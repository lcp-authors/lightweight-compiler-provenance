
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

00012290 <.init>:
   12290:	push	{r3, lr}
   12294:	bl	12580 <_start@@Base+0x3c>
   12298:	pop	{r3, pc}

Disassembly of section .plt:

0001229c <free@plt-0x14>:
   1229c:	push	{lr}		; (str lr, [sp, #-4]!)
   122a0:	ldr	lr, [pc, #4]	; 122ac <free@plt-0x4>
   122a4:	add	lr, pc, lr
   122a8:	ldr	pc, [lr, #8]!
   122ac:	andeq	r8, r1, r4, asr sp

000122b0 <free@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #24, 20	; 0x18000
   122b8:	ldr	pc, [ip, #3412]!	; 0xd54

000122bc <memcpy@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #24, 20	; 0x18000
   122c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000122c8 <memcmp@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #24, 20	; 0x18000
   122d0:	ldr	pc, [ip, #3396]!	; 0xd44

000122d4 <realloc@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #24, 20	; 0x18000
   122dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000122e0 <malloc@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #24, 20	; 0x18000
   122e8:	ldr	pc, [ip, #3380]!	; 0xd34

000122ec <__libc_start_main@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #24, 20	; 0x18000
   122f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000122f8 <__gmon_start__@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #24, 20	; 0x18000
   12300:	ldr	pc, [ip, #3364]!	; 0xd24

00012304 <strlen@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #24, 20	; 0x18000
   1230c:	ldr	pc, [ip, #3356]!	; 0xd1c

00012310 <posix_memalign@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #24, 20	; 0x18000
   12318:	ldr	pc, [ip, #3348]!	; 0xd14

0001231c <memset@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #24, 20	; 0x18000
   12324:	ldr	pc, [ip, #3340]!	; 0xd0c

00012328 <strncpy@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #24, 20	; 0x18000
   12330:	ldr	pc, [ip, #3332]!	; 0xd04

00012334 <memchr@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #24, 20	; 0x18000
   1233c:	ldr	pc, [ip, #3324]!	; 0xcfc

00012340 <abort@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #24, 20	; 0x18000
   12348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001234c <__assert_fail@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #24, 20	; 0x18000
   12354:	ldr	pc, [ip, #3308]!	; 0xcec

Disassembly of section .text:

00012358 <main@@Base-0xd4>:
   12358:	ldr	r3, [pc, #28]	; 1237c <__assert_fail@plt+0x30>
   1235c:	ldr	r1, [pc, #28]	; 12380 <__assert_fail@plt+0x34>
   12360:	ldr	r0, [pc, #28]	; 12384 <__assert_fail@plt+0x38>
   12364:	push	{r4, lr}
   12368:	add	r3, pc, r3
   1236c:	mov	r2, #308	; 0x134
   12370:	add	r1, pc, r1
   12374:	add	r0, pc, r0
   12378:	bl	1234c <__assert_fail@plt>
   1237c:	andeq	r6, r0, ip, lsr #25
   12380:	strdeq	r7, [r0], -r4
   12384:	andeq	r7, r0, r8, ror r4
   12388:	ldr	r3, [pc, #32]	; 123b0 <__assert_fail@plt+0x64>
   1238c:	ldr	r1, [pc, #32]	; 123b4 <__assert_fail@plt+0x68>
   12390:	ldr	r0, [pc, #32]	; 123b8 <__assert_fail@plt+0x6c>
   12394:	add	r3, pc, r3
   12398:	push	{r4, lr}
   1239c:	add	r3, r3, #16
   123a0:	ldr	r2, [pc, #20]	; 123bc <__assert_fail@plt+0x70>
   123a4:	add	r1, pc, r1
   123a8:	add	r0, pc, r0
   123ac:	bl	1234c <__assert_fail@plt>
   123b0:	andeq	r6, r0, r0, lsl #25
   123b4:	andeq	r7, r0, r0, asr #7
   123b8:	andeq	r7, r0, r4, asr #8
   123bc:	andeq	r0, r0, r1, lsr #5
   123c0:	ldr	r3, [pc, #32]	; 123e8 <__assert_fail@plt+0x9c>
   123c4:	ldr	r1, [pc, #32]	; 123ec <__assert_fail@plt+0xa0>
   123c8:	ldr	r0, [pc, #32]	; 123f0 <__assert_fail@plt+0xa4>
   123cc:	add	r3, pc, r3
   123d0:	push	{r4, lr}
   123d4:	add	r3, r3, #28
   123d8:	ldr	r2, [pc, #20]	; 123f4 <__assert_fail@plt+0xa8>
   123dc:	add	r1, pc, r1
   123e0:	add	r0, pc, r0
   123e4:	bl	1234c <__assert_fail@plt>
   123e8:	andeq	r6, r0, r8, asr #24
   123ec:	andeq	r7, r0, r8, lsl #7
   123f0:	andeq	r7, r0, ip, lsl #8
   123f4:	andeq	r0, r0, r7, lsl #5
   123f8:	ldr	r3, [pc, #32]	; 12420 <__assert_fail@plt+0xd4>
   123fc:	ldr	r1, [pc, #32]	; 12424 <__assert_fail@plt+0xd8>
   12400:	ldr	r0, [pc, #32]	; 12428 <__assert_fail@plt+0xdc>
   12404:	add	r3, pc, r3
   12408:	push	{r4, lr}
   1240c:	mov	r2, #892	; 0x37c
   12410:	add	r3, r3, #40	; 0x28
   12414:	add	r1, pc, r1
   12418:	add	r0, pc, r0
   1241c:	bl	1234c <__assert_fail@plt>
   12420:	andeq	r6, r0, r0, lsl ip
   12424:	andeq	r7, r0, r0, asr r3
   12428:	andeq	r7, r0, ip, lsr #7

0001242c <main@@Base>:
   1242c:	push	{r4, r5, lr}
   12430:	sub	sp, sp, #244	; 0xf4
   12434:	add	r4, sp, #8
   12438:	mov	r0, r4
   1243c:	bl	13670 <flatcc_builder_init@@Base>
   12440:	ldr	r1, [pc, #220]	; 12524 <main@@Base+0xf8>
   12444:	mov	r3, #0
   12448:	mov	r0, r4
   1244c:	mov	r2, r3
   12450:	add	r1, pc, r1
   12454:	bl	13fb0 <flatcc_builder_start_buffer@@Base>
   12458:	cmp	r0, #0
   1245c:	bne	1246c <main@@Base+0x40>
   12460:	mov	r1, #36	; 0x24
   12464:	mov	r0, r4
   12468:	bl	14de8 <flatcc_builder_start_table@@Base>
   1246c:	ldr	r1, [pc, #180]	; 12528 <main@@Base+0xfc>
   12470:	mov	r0, r4
   12474:	add	r1, pc, r1
   12478:	bl	1668c <flatcc_builder_create_string_str@@Base>
   1247c:	subs	r5, r0, #0
   12480:	beq	12498 <main@@Base+0x6c>
   12484:	mov	r1, #3
   12488:	mov	r0, r4
   1248c:	bl	16a48 <flatcc_builder_table_add_offset@@Base>
   12490:	cmp	r0, #0
   12494:	strne	r5, [r0]
   12498:	ldr	r5, [pc, #140]	; 1252c <main@@Base+0x100>
   1249c:	mov	r2, #1
   124a0:	add	r5, pc, r5
   124a4:	mov	r1, r5
   124a8:	mov	r0, r4
   124ac:	bl	15734 <flatcc_builder_check_required@@Base>
   124b0:	cmp	r0, #0
   124b4:	beq	12508 <main@@Base+0xdc>
   124b8:	mov	r0, r4
   124bc:	bl	157dc <flatcc_builder_end_table@@Base>
   124c0:	mov	r1, r0
   124c4:	mov	r0, r4
   124c8:	bl	14068 <flatcc_builder_end_buffer@@Base>
   124cc:	add	r1, sp, #4
   124d0:	mov	r0, r4
   124d4:	bl	16fb0 <flatcc_builder_get_direct_buffer@@Base>
   124d8:	ldr	r3, [pc, #80]	; 12530 <main@@Base+0x104>
   124dc:	ldr	r2, [pc, #80]	; 12534 <main@@Base+0x108>
   124e0:	add	r3, pc, r3
   124e4:	add	r2, pc, r2
   124e8:	ldr	r1, [sp, #4]
   124ec:	bl	185d8 <flatcc_verify_table_as_root@@Base>
   124f0:	mov	r5, r0
   124f4:	mov	r0, r4
   124f8:	bl	137f8 <flatcc_builder_clear@@Base>
   124fc:	mov	r0, r5
   12500:	add	sp, sp, #244	; 0xf4
   12504:	pop	{r4, r5, pc}
   12508:	ldr	r1, [pc, #40]	; 12538 <main@@Base+0x10c>
   1250c:	ldr	r0, [pc, #40]	; 1253c <main@@Base+0x110>
   12510:	add	r3, r5, #4
   12514:	ldr	r2, [pc, #36]	; 12540 <main@@Base+0x114>
   12518:	add	r1, pc, r1
   1251c:	add	r0, pc, r0
   12520:	bl	1234c <__assert_fail@plt>
   12524:	andeq	r6, r0, r0, lsl #21
   12528:	andeq	r6, r0, r4, ror #20
   1252c:	andeq	r6, r0, ip, lsl #20
   12530:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   12534:	andeq	r6, r0, ip, ror #19
   12538:	andeq	r6, r0, ip, asr #19
   1253c:	andeq	r6, r0, r8, asr #20
   12540:	andeq	r0, r0, lr, asr r9

00012544 <_start@@Base>:
   12544:	mov	fp, #0
   12548:	mov	lr, #0
   1254c:	pop	{r1}		; (ldr r1, [sp], #4)
   12550:	mov	r2, sp
   12554:	push	{r2}		; (str r2, [sp, #-4]!)
   12558:	push	{r0}		; (str r0, [sp, #-4]!)
   1255c:	ldr	ip, [pc, #16]	; 12574 <_start@@Base+0x30>
   12560:	push	{ip}		; (str ip, [sp, #-4]!)
   12564:	ldr	r0, [pc, #12]	; 12578 <_start@@Base+0x34>
   12568:	ldr	r3, [pc, #12]	; 1257c <_start@@Base+0x38>
   1256c:	bl	122ec <__libc_start_main@plt>
   12570:	bl	12340 <abort@plt>
   12574:	andeq	r8, r1, r4, lsr #29
   12578:	andeq	r2, r1, ip, lsr #8
   1257c:	andeq	r8, r1, r4, asr #28
   12580:	ldr	r3, [pc, #20]	; 1259c <_start@@Base+0x58>
   12584:	ldr	r2, [pc, #20]	; 125a0 <_start@@Base+0x5c>
   12588:	add	r3, pc, r3
   1258c:	ldr	r2, [r3, r2]
   12590:	cmp	r2, #0
   12594:	bxeq	lr
   12598:	b	122f8 <__gmon_start__@plt>
   1259c:	andeq	r8, r1, r0, ror sl
   125a0:	andeq	r0, r0, r8, asr #32
   125a4:	ldr	r3, [pc, #28]	; 125c8 <_start@@Base+0x84>
   125a8:	ldr	r0, [pc, #28]	; 125cc <_start@@Base+0x88>
   125ac:	sub	r3, r3, r0
   125b0:	cmp	r3, #6
   125b4:	bxls	lr
   125b8:	ldr	r3, [pc, #16]	; 125d0 <_start@@Base+0x8c>
   125bc:	cmp	r3, #0
   125c0:	bxeq	lr
   125c4:	bx	r3
   125c8:	andeq	fp, r2, pc, asr r0
   125cc:	andeq	fp, r2, ip, asr r0
   125d0:	andeq	r0, r0, r0
   125d4:	ldr	r1, [pc, #36]	; 12600 <_start@@Base+0xbc>
   125d8:	ldr	r0, [pc, #36]	; 12604 <_start@@Base+0xc0>
   125dc:	sub	r1, r1, r0
   125e0:	asr	r1, r1, #2
   125e4:	add	r1, r1, r1, lsr #31
   125e8:	asrs	r1, r1, #1
   125ec:	bxeq	lr
   125f0:	ldr	r3, [pc, #16]	; 12608 <_start@@Base+0xc4>
   125f4:	cmp	r3, #0
   125f8:	bxeq	lr
   125fc:	bx	r3
   12600:	andeq	fp, r2, ip, asr r0
   12604:	andeq	fp, r2, ip, asr r0
   12608:	andeq	r0, r0, r0
   1260c:	push	{r4, lr}
   12610:	ldr	r4, [pc, #24]	; 12630 <_start@@Base+0xec>
   12614:	ldrb	r3, [r4]
   12618:	cmp	r3, #0
   1261c:	popne	{r4, pc}
   12620:	bl	125a4 <_start@@Base+0x60>
   12624:	mov	r3, #1
   12628:	strb	r3, [r4]
   1262c:	pop	{r4, pc}
   12630:	andeq	fp, r2, ip, asr r0
   12634:	ldr	r0, [pc, #40]	; 12664 <_start@@Base+0x120>
   12638:	ldr	r3, [r0]
   1263c:	cmp	r3, #0
   12640:	bne	12648 <_start@@Base+0x104>
   12644:	b	125d4 <_start@@Base+0x90>
   12648:	ldr	r3, [pc, #24]	; 12668 <_start@@Base+0x124>
   1264c:	cmp	r3, #0
   12650:	beq	12644 <_start@@Base+0x100>
   12654:	push	{r4, lr}
   12658:	blx	r3
   1265c:	pop	{r4, lr}
   12660:	b	125d4 <_start@@Base+0x90>
   12664:	andeq	sl, r2, r4, lsl pc
   12668:	andeq	r0, r0, r0
   1266c:	mov	r0, #0
   12670:	bx	lr
   12674:	mov	r3, #4
   12678:	mov	r2, r3
   1267c:	mov	r1, #0
   12680:	b	17b4c <flatcc_verify_field@@Base>
   12684:	mov	r3, #8
   12688:	push	{r4, lr}
   1268c:	mov	r2, r3
   12690:	mov	r1, #0
   12694:	mov	r4, r0
   12698:	bl	17b4c <flatcc_verify_field@@Base>
   1269c:	cmp	r0, #0
   126a0:	popne	{r4, pc}
   126a4:	mov	r3, #4
   126a8:	mov	r0, r4
   126ac:	mov	r2, r3
   126b0:	mov	r1, #1
   126b4:	pop	{r4, lr}
   126b8:	b	17b4c <flatcc_verify_field@@Base>
   126bc:	mov	r3, #1
   126c0:	push	{r4, lr}
   126c4:	mov	r2, r3
   126c8:	mov	r1, #0
   126cc:	mov	r4, r0
   126d0:	bl	17b4c <flatcc_verify_field@@Base>
   126d4:	cmp	r0, #0
   126d8:	popne	{r4, pc}
   126dc:	mov	r3, #1
   126e0:	mov	r2, r3
   126e4:	mov	r1, r3
   126e8:	mov	r0, r4
   126ec:	bl	17b4c <flatcc_verify_field@@Base>
   126f0:	cmp	r0, #0
   126f4:	popne	{r4, pc}
   126f8:	mov	r3, #1
   126fc:	mov	r2, r3
   12700:	mov	r1, #2
   12704:	mov	r0, r4
   12708:	bl	17b4c <flatcc_verify_field@@Base>
   1270c:	cmp	r0, #0
   12710:	popne	{r4, pc}
   12714:	mov	r3, #1
   12718:	mov	r0, r4
   1271c:	mov	r2, r3
   12720:	mov	r1, #3
   12724:	pop	{r4, lr}
   12728:	b	17b4c <flatcc_verify_field@@Base>
   1272c:	mov	r2, #0
   12730:	push	{r4, lr}
   12734:	mov	r1, r2
   12738:	mov	r4, r0
   1273c:	bl	17bbc <flatcc_verify_string_field@@Base>
   12740:	cmp	r0, #0
   12744:	popne	{r4, pc}
   12748:	mov	r3, #8
   1274c:	mov	r2, r3
   12750:	mov	r1, #1
   12754:	mov	r0, r4
   12758:	bl	17b4c <flatcc_verify_field@@Base>
   1275c:	cmp	r0, #0
   12760:	popne	{r4, pc}
   12764:	mov	r3, #2
   12768:	mov	r0, r4
   1276c:	mov	r2, r3
   12770:	mov	r1, r3
   12774:	pop	{r4, lr}
   12778:	b	17b4c <flatcc_verify_field@@Base>
   1277c:	mov	r2, #0
   12780:	push	{r4, lr}
   12784:	mov	r1, r2
   12788:	mov	r4, r0
   1278c:	bl	17bbc <flatcc_verify_string_field@@Base>
   12790:	cmp	r0, #0
   12794:	popne	{r4, pc}
   12798:	mov	r3, #4
   1279c:	mov	r2, r3
   127a0:	mov	r1, #1
   127a4:	mov	r0, r4
   127a8:	bl	17b4c <flatcc_verify_field@@Base>
   127ac:	cmp	r0, #0
   127b0:	popne	{r4, pc}
   127b4:	mov	r2, r0
   127b8:	mov	r1, #2
   127bc:	mov	r0, r4
   127c0:	bl	17bbc <flatcc_verify_string_field@@Base>
   127c4:	cmp	r0, #0
   127c8:	popne	{r4, pc}
   127cc:	mov	r3, #8
   127d0:	mov	r2, r3
   127d4:	mov	r1, #3
   127d8:	mov	r0, r4
   127dc:	bl	17b4c <flatcc_verify_field@@Base>
   127e0:	cmp	r0, #0
   127e4:	popne	{r4, pc}
   127e8:	mov	r2, r0
   127ec:	mov	r1, #4
   127f0:	mov	r0, r4
   127f4:	bl	17bbc <flatcc_verify_string_field@@Base>
   127f8:	cmp	r0, #0
   127fc:	popne	{r4, pc}
   12800:	mov	r3, #8
   12804:	mov	r2, r3
   12808:	mov	r1, #5
   1280c:	mov	r0, r4
   12810:	bl	17b4c <flatcc_verify_field@@Base>
   12814:	cmp	r0, #0
   12818:	popne	{r4, pc}
   1281c:	mov	r3, #4
   12820:	mov	r2, r3
   12824:	mov	r1, #6
   12828:	mov	r0, r4
   1282c:	bl	17b4c <flatcc_verify_field@@Base>
   12830:	cmp	r0, #0
   12834:	popne	{r4, pc}
   12838:	mov	r3, #8
   1283c:	mov	r2, r3
   12840:	mov	r1, #7
   12844:	mov	r0, r4
   12848:	bl	17b4c <flatcc_verify_field@@Base>
   1284c:	cmp	r0, #0
   12850:	popne	{r4, pc}
   12854:	mov	r3, #4
   12858:	mov	r0, r4
   1285c:	mov	r2, r3
   12860:	mov	r1, #8
   12864:	pop	{r4, lr}
   12868:	b	17b4c <flatcc_verify_field@@Base>
   1286c:	ldr	r3, [pc, #88]	; 128cc <_start@@Base+0x388>
   12870:	mov	r2, #0
   12874:	push	{r4, lr}
   12878:	mov	r1, r2
   1287c:	add	r3, pc, r3
   12880:	mov	r4, r0
   12884:	bl	17e58 <flatcc_verify_table_field@@Base>
   12888:	cmp	r0, #0
   1288c:	popne	{r4, pc}
   12890:	ldr	r3, [pc, #56]	; 128d0 <_start@@Base+0x38c>
   12894:	mov	r2, r0
   12898:	add	r3, pc, r3
   1289c:	mov	r1, #1
   128a0:	mov	r0, r4
   128a4:	bl	17e58 <flatcc_verify_table_field@@Base>
   128a8:	cmp	r0, #0
   128ac:	popne	{r4, pc}
   128b0:	ldr	r3, [pc, #28]	; 128d4 <_start@@Base+0x390>
   128b4:	mov	r2, r0
   128b8:	add	r3, pc, r3
   128bc:	mov	r0, r4
   128c0:	mov	r1, #2
   128c4:	pop	{r4, lr}
   128c8:	b	17e58 <flatcc_verify_table_field@@Base>
   128cc:			; <UNDEFINED> instruction: 0xfffffef8
   128d0:	andeq	r0, r0, r8, ror #13
   128d4:			; <UNDEFINED> instruction: 0xfffffdc4
   128d8:	push	{r4, r5, r6, r7, r8, lr}
   128dc:	mov	r3, #16
   128e0:	sub	sp, sp, #8
   128e4:	mov	r2, #32
   128e8:	mov	r1, #0
   128ec:	mov	r4, r0
   128f0:	bl	17b4c <flatcc_verify_field@@Base>
   128f4:	cmp	r0, #0
   128f8:	beq	12904 <_start@@Base+0x3c0>
   128fc:	add	sp, sp, #8
   12900:	pop	{r4, r5, r6, r7, r8, pc}
   12904:	mov	r3, #2
   12908:	mov	r2, r3
   1290c:	mov	r1, r3
   12910:	mov	r0, r4
   12914:	bl	17b4c <flatcc_verify_field@@Base>
   12918:	cmp	r0, #0
   1291c:	bne	128fc <_start@@Base+0x3b8>
   12920:	mov	r3, #2
   12924:	mov	r2, r3
   12928:	mov	r1, #1
   1292c:	mov	r0, r4
   12930:	bl	17b4c <flatcc_verify_field@@Base>
   12934:	cmp	r0, #0
   12938:	bne	128fc <_start@@Base+0x3b8>
   1293c:	mov	r2, #1
   12940:	mov	r1, #3
   12944:	mov	r0, r4
   12948:	bl	17bbc <flatcc_verify_string_field@@Base>
   1294c:	cmp	r0, #0
   12950:	bne	128fc <_start@@Base+0x3b8>
   12954:	mov	r3, #1
   12958:	mov	r2, r3
   1295c:	mov	r1, #6
   12960:	mov	r0, r4
   12964:	bl	17b4c <flatcc_verify_field@@Base>
   12968:	cmp	r0, #0
   1296c:	bne	128fc <_start@@Base+0x3b8>
   12970:	mov	r5, #1
   12974:	mvn	r6, #0
   12978:	mov	r2, r0
   1297c:	stm	sp, {r5, r6}
   12980:	mov	r3, r5
   12984:	mov	r1, #5
   12988:	mov	r0, r4
   1298c:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12990:	cmp	r0, #0
   12994:	bne	128fc <_start@@Base+0x3b8>
   12998:	ldr	r3, [pc, #868]	; 12d04 <_start@@Base+0x7c0>
   1299c:	mov	r2, r0
   129a0:	add	r3, pc, r3
   129a4:	mov	r1, #11
   129a8:	mov	r0, r4
   129ac:	bl	17f6c <flatcc_verify_table_vector_field@@Base>
   129b0:	cmp	r0, #0
   129b4:	bne	128fc <_start@@Base+0x3b8>
   129b8:	mov	r2, r0
   129bc:	mov	r1, #10
   129c0:	mov	r0, r4
   129c4:	bl	17cf8 <flatcc_verify_string_vector_field@@Base>
   129c8:	cmp	r0, #0
   129cc:	bne	128fc <_start@@Base+0x3b8>
   129d0:	mov	r2, r0
   129d4:	mov	r1, #28
   129d8:	mov	r0, r4
   129dc:	bl	17cf8 <flatcc_verify_string_vector_field@@Base>
   129e0:	cmp	r0, #0
   129e4:	bne	128fc <_start@@Base+0x3b8>
   129e8:	mov	r2, r0
   129ec:	stm	sp, {r5, r6}
   129f0:	mov	r3, r5
   129f4:	mov	r1, #24
   129f8:	mov	r0, r4
   129fc:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	128fc <_start@@Base+0x3b8>
   12a08:	mvn	r3, #-536870912	; 0xe0000000
   12a0c:	mov	r5, #4
   12a10:	str	r3, [sp, #4]
   12a14:	str	r5, [sp]
   12a18:	mov	r3, #8
   12a1c:	mov	r2, #0
   12a20:	mov	r1, #29
   12a24:	mov	r0, r4
   12a28:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12a2c:	cmp	r0, #0
   12a30:	bne	128fc <_start@@Base+0x3b8>
   12a34:	ldr	r7, [pc, #716]	; 12d08 <_start@@Base+0x7c4>
   12a38:	mov	r2, r0
   12a3c:	add	r7, pc, r7
   12a40:	mov	r3, r7
   12a44:	mov	r1, #12
   12a48:	mov	r0, r4
   12a4c:	bl	17e58 <flatcc_verify_table_field@@Base>
   12a50:	cmp	r0, #0
   12a54:	bne	128fc <_start@@Base+0x3b8>
   12a58:	ldr	r3, [pc, #684]	; 12d0c <_start@@Base+0x7c8>
   12a5c:	mov	r2, r0
   12a60:	add	r3, pc, r3
   12a64:	mov	r1, #8
   12a68:	mov	r0, r4
   12a6c:	bl	18a64 <flatcc_verify_union_field@@Base>
   12a70:	cmp	r0, #0
   12a74:	bne	128fc <_start@@Base+0x3b8>
   12a78:	mvn	r8, #-1073741824	; 0xc0000000
   12a7c:	mov	r6, #2
   12a80:	mov	r2, r0
   12a84:	stm	sp, {r6, r8}
   12a88:	mov	r3, r5
   12a8c:	mov	r1, #9
   12a90:	mov	r0, r4
   12a94:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	128fc <_start@@Base+0x3b8>
   12aa0:	mov	r2, r0
   12aa4:	stm	sp, {r6, r8}
   12aa8:	mov	r3, r5
   12aac:	mov	r1, #31
   12ab0:	mov	r0, r4
   12ab4:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	128fc <_start@@Base+0x3b8>
   12ac0:	mov	r6, #1
   12ac4:	mov	r3, r0
   12ac8:	mov	r2, r0
   12acc:	stm	sp, {r6, r7}
   12ad0:	mov	r1, #13
   12ad4:	mov	r0, r4
   12ad8:	bl	188a8 <flatcc_verify_table_as_nested_root@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	128fc <_start@@Base+0x3b8>
   12ae4:	ldr	r3, [pc, #548]	; 12d10 <_start@@Base+0x7cc>
   12ae8:	mov	r2, r0
   12aec:	add	r3, pc, r3
   12af0:	mov	r1, #14
   12af4:	mov	r0, r4
   12af8:	bl	17e58 <flatcc_verify_table_field@@Base>
   12afc:	cmp	r0, #0
   12b00:	bne	128fc <_start@@Base+0x3b8>
   12b04:	mov	r3, r6
   12b08:	mov	r2, r6
   12b0c:	mov	r1, #15
   12b10:	mov	r0, r4
   12b14:	bl	17b4c <flatcc_verify_field@@Base>
   12b18:	cmp	r0, #0
   12b1c:	bne	128fc <_start@@Base+0x3b8>
   12b20:	mov	r3, r5
   12b24:	mov	r2, r5
   12b28:	mov	r1, #16
   12b2c:	mov	r0, r4
   12b30:	bl	17b4c <flatcc_verify_field@@Base>
   12b34:	cmp	r0, #0
   12b38:	bne	128fc <_start@@Base+0x3b8>
   12b3c:	mov	r3, r5
   12b40:	mov	r2, r5
   12b44:	mov	r1, #17
   12b48:	mov	r0, r4
   12b4c:	bl	17b4c <flatcc_verify_field@@Base>
   12b50:	cmp	r0, #0
   12b54:	bne	128fc <_start@@Base+0x3b8>
   12b58:	mov	r3, #8
   12b5c:	mov	r2, r3
   12b60:	mov	r1, #18
   12b64:	mov	r0, r4
   12b68:	bl	17b4c <flatcc_verify_field@@Base>
   12b6c:	cmp	r0, #0
   12b70:	bne	128fc <_start@@Base+0x3b8>
   12b74:	mov	r3, #8
   12b78:	mov	r2, r3
   12b7c:	mov	r1, #19
   12b80:	mov	r0, r4
   12b84:	bl	17b4c <flatcc_verify_field@@Base>
   12b88:	cmp	r0, #0
   12b8c:	bne	128fc <_start@@Base+0x3b8>
   12b90:	mov	r3, r5
   12b94:	mov	r2, r5
   12b98:	mov	r1, #20
   12b9c:	mov	r0, r4
   12ba0:	bl	17b4c <flatcc_verify_field@@Base>
   12ba4:	cmp	r0, #0
   12ba8:	bne	128fc <_start@@Base+0x3b8>
   12bac:	mov	r3, r5
   12bb0:	mov	r2, r5
   12bb4:	mov	r1, #21
   12bb8:	mov	r0, r4
   12bbc:	bl	17b4c <flatcc_verify_field@@Base>
   12bc0:	cmp	r0, #0
   12bc4:	bne	128fc <_start@@Base+0x3b8>
   12bc8:	mov	r3, #8
   12bcc:	mov	r2, r3
   12bd0:	mov	r1, #22
   12bd4:	mov	r0, r4
   12bd8:	bl	17b4c <flatcc_verify_field@@Base>
   12bdc:	cmp	r0, #0
   12be0:	bne	128fc <_start@@Base+0x3b8>
   12be4:	mov	r3, #8
   12be8:	mov	r2, r3
   12bec:	mov	r1, #23
   12bf0:	mov	r0, r4
   12bf4:	bl	17b4c <flatcc_verify_field@@Base>
   12bf8:	cmp	r0, #0
   12bfc:	bne	128fc <_start@@Base+0x3b8>
   12c00:	mov	r3, r5
   12c04:	mov	r2, r5
   12c08:	mov	r1, #25
   12c0c:	mov	r0, r4
   12c10:	bl	17b4c <flatcc_verify_field@@Base>
   12c14:	cmp	r0, #0
   12c18:	bne	128fc <_start@@Base+0x3b8>
   12c1c:	mov	r3, r5
   12c20:	mov	r2, r5
   12c24:	mov	r1, #26
   12c28:	mov	r0, r4
   12c2c:	bl	17b4c <flatcc_verify_field@@Base>
   12c30:	cmp	r0, #0
   12c34:	bne	128fc <_start@@Base+0x3b8>
   12c38:	mov	r3, r5
   12c3c:	mov	r2, r5
   12c40:	mov	r1, #27
   12c44:	mov	r0, r4
   12c48:	bl	17b4c <flatcc_verify_field@@Base>
   12c4c:	cmp	r0, #0
   12c50:	bne	128fc <_start@@Base+0x3b8>
   12c54:	mvn	r1, #0
   12c58:	mov	r2, r0
   12c5c:	str	r1, [sp, #4]
   12c60:	mov	r3, r6
   12c64:	str	r6, [sp]
   12c68:	mov	r1, #30
   12c6c:	mov	r0, r4
   12c70:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12c74:	cmp	r0, #0
   12c78:	bne	128fc <_start@@Base+0x3b8>
   12c7c:	mov	r5, #8
   12c80:	mvn	r6, #-536870912	; 0xe0000000
   12c84:	mov	r3, r5
   12c88:	stm	sp, {r5, r6}
   12c8c:	mov	r2, #0
   12c90:	mov	r1, #32
   12c94:	mov	r0, r4
   12c98:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12c9c:	cmp	r0, #0
   12ca0:	bne	128fc <_start@@Base+0x3b8>
   12ca4:	mov	r2, r0
   12ca8:	stm	sp, {r5, r6}
   12cac:	mov	r3, r5
   12cb0:	mov	r1, #33	; 0x21
   12cb4:	mov	r0, r4
   12cb8:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12cbc:	cmp	r0, #0
   12cc0:	bne	128fc <_start@@Base+0x3b8>
   12cc4:	ldr	r3, [pc, #72]	; 12d14 <_start@@Base+0x7d0>
   12cc8:	mov	r2, r0
   12ccc:	add	r3, pc, r3
   12cd0:	mov	r1, #34	; 0x22
   12cd4:	mov	r0, r4
   12cd8:	bl	17e58 <flatcc_verify_table_field@@Base>
   12cdc:	cmp	r0, #0
   12ce0:	bne	128fc <_start@@Base+0x3b8>
   12ce4:	ldr	r3, [pc, #44]	; 12d18 <_start@@Base+0x7d4>
   12ce8:	mov	r2, r0
   12cec:	add	r3, pc, r3
   12cf0:	mov	r0, r4
   12cf4:	mov	r1, #35	; 0x23
   12cf8:	add	sp, sp, #8
   12cfc:	pop	{r4, r5, r6, r7, r8, lr}
   12d00:	b	17e58 <flatcc_verify_table_field@@Base>
   12d04:			; <UNDEFINED> instruction: 0xffffff30
   12d08:			; <UNDEFINED> instruction: 0xfffffe94
   12d0c:	andeq	r0, r0, r0, asr #6
   12d10:			; <UNDEFINED> instruction: 0xfffffc38
   12d14:	andeq	r0, r0, ip, lsr #5
   12d18:	andeq	r0, r0, r8, lsr #32
   12d1c:	push	{r4, r5, r6, lr}
   12d20:	mov	r4, #1
   12d24:	sub	sp, sp, #8
   12d28:	mvn	r5, #0
   12d2c:	mov	r2, #0
   12d30:	mov	r1, r2
   12d34:	stm	sp, {r4, r5}
   12d38:	mov	r3, r4
   12d3c:	mov	r6, r0
   12d40:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12d44:	subs	r2, r0, #0
   12d48:	beq	12d58 <_start@@Base+0x814>
   12d4c:	mov	r0, r2
   12d50:	add	sp, sp, #8
   12d54:	pop	{r4, r5, r6, pc}
   12d58:	stm	sp, {r4, r5}
   12d5c:	mov	r3, r4
   12d60:	mov	r1, r4
   12d64:	mov	r0, r6
   12d68:	bl	17c50 <flatcc_verify_vector_field@@Base>
   12d6c:	subs	r2, r0, #0
   12d70:	bne	12d4c <_start@@Base+0x808>
   12d74:	ldr	r3, [pc, #40]	; 12da4 <_start@@Base+0x860>
   12d78:	str	r4, [sp]
   12d7c:	add	r3, pc, r3
   12d80:	str	r3, [sp, #4]
   12d84:	mov	r0, r6
   12d88:	mov	r3, r2
   12d8c:	mov	r1, #2
   12d90:	bl	188a8 <flatcc_verify_table_as_nested_root@@Base>
   12d94:	mov	r2, r0
   12d98:	mov	r0, r2
   12d9c:	add	sp, sp, #8
   12da0:	pop	{r4, r5, r6, pc}
   12da4:			; <UNDEFINED> instruction: 0xfffffb54
   12da8:	ldrb	r3, [r0, #12]
   12dac:	sub	r3, r3, #1
   12db0:	cmp	r3, #3
   12db4:	addls	pc, pc, r3, lsl #2
   12db8:	b	12dfc <_start@@Base+0x8b8>
   12dbc:	b	12df0 <_start@@Base+0x8ac>
   12dc0:	b	12de4 <_start@@Base+0x8a0>
   12dc4:	b	12dd8 <_start@@Base+0x894>
   12dc8:	b	12dcc <_start@@Base+0x888>
   12dcc:	ldr	r1, [pc, #48]	; 12e04 <_start@@Base+0x8c0>
   12dd0:	add	r1, pc, r1
   12dd4:	b	18224 <flatcc_verify_union_table@@Base>
   12dd8:	ldr	r1, [pc, #40]	; 12e08 <_start@@Base+0x8c4>
   12ddc:	add	r1, pc, r1
   12de0:	b	18224 <flatcc_verify_union_table@@Base>
   12de4:	ldr	r1, [pc, #32]	; 12e0c <_start@@Base+0x8c8>
   12de8:	add	r1, pc, r1
   12dec:	b	18224 <flatcc_verify_union_table@@Base>
   12df0:	ldr	r1, [pc, #24]	; 12e10 <_start@@Base+0x8cc>
   12df4:	add	r1, pc, r1
   12df8:	b	18224 <flatcc_verify_union_table@@Base>
   12dfc:	mov	r0, #0
   12e00:	bx	lr
   12e04:	andeq	r0, r0, ip, lsr r0
   12e08:			; <UNDEFINED> instruction: 0xfffff888
   12e0c:			; <UNDEFINED> instruction: 0xfffff8cc
   12e10:			; <UNDEFINED> instruction: 0xfffffadc
   12e14:	ldr	r3, [pc, #88]	; 12e74 <_start@@Base+0x930>
   12e18:	mov	r2, #0
   12e1c:	push	{r4, lr}
   12e20:	mov	r1, r2
   12e24:	add	r3, pc, r3
   12e28:	mov	r4, r0
   12e2c:	bl	17e58 <flatcc_verify_table_field@@Base>
   12e30:	cmp	r0, #0
   12e34:	popne	{r4, pc}
   12e38:	ldr	r3, [pc, #56]	; 12e78 <_start@@Base+0x934>
   12e3c:	mov	r2, r0
   12e40:	add	r3, pc, r3
   12e44:	mov	r1, #1
   12e48:	mov	r0, r4
   12e4c:	bl	17e58 <flatcc_verify_table_field@@Base>
   12e50:	cmp	r0, #0
   12e54:	popne	{r4, pc}
   12e58:	ldr	r3, [pc, #28]	; 12e7c <_start@@Base+0x938>
   12e5c:	mov	r2, r0
   12e60:	add	r3, pc, r3
   12e64:	mov	r0, r4
   12e68:	mov	r1, #3
   12e6c:	pop	{r4, lr}
   12e70:	b	18bbc <flatcc_verify_union_vector_field@@Base>
   12e74:			; <UNDEFINED> instruction: 0xfffffa40
   12e78:	andeq	r0, r0, r8, lsr r0
   12e7c:			; <UNDEFINED> instruction: 0xffffff40
   12e80:	push	{r4, r5, r6, lr}
   12e84:	mov	r2, #0
   12e88:	ldr	r4, [pc, #132]	; 12f14 <_start@@Base+0x9d0>
   12e8c:	mov	r1, #1
   12e90:	add	r4, pc, r4
   12e94:	mov	r3, r4
   12e98:	mov	r5, r0
   12e9c:	bl	18a64 <flatcc_verify_union_field@@Base>
   12ea0:	cmp	r0, #0
   12ea4:	popne	{r4, r5, r6, pc}
   12ea8:	mov	r2, r0
   12eac:	mov	r3, r4
   12eb0:	mov	r1, #3
   12eb4:	mov	r0, r5
   12eb8:	bl	18a64 <flatcc_verify_union_field@@Base>
   12ebc:	cmp	r0, #0
   12ec0:	popne	{r4, r5, r6, pc}
   12ec4:	mov	r2, r0
   12ec8:	mov	r3, r4
   12ecc:	mov	r1, #5
   12ed0:	mov	r0, r5
   12ed4:	bl	18a64 <flatcc_verify_union_field@@Base>
   12ed8:	cmp	r0, #0
   12edc:	popne	{r4, r5, r6, pc}
   12ee0:	mov	r2, r0
   12ee4:	mov	r3, r4
   12ee8:	mov	r1, #7
   12eec:	mov	r0, r5
   12ef0:	bl	18a64 <flatcc_verify_union_field@@Base>
   12ef4:	cmp	r0, #0
   12ef8:	popne	{r4, r5, r6, pc}
   12efc:	mov	r3, r4
   12f00:	mov	r2, r0
   12f04:	mov	r1, #9
   12f08:	mov	r0, r5
   12f0c:	pop	{r4, r5, r6, lr}
   12f10:	b	18bbc <flatcc_verify_union_vector_field@@Base>
   12f14:	andeq	r0, r0, r0, lsl #1
   12f18:	ldrb	r3, [r0, #12]
   12f1c:	cmp	r3, #9
   12f20:	beq	12f5c <_start@@Base+0xa18>
   12f24:	bls	12f40 <_start@@Base+0x9fc>
   12f28:	cmp	r3, #11
   12f2c:	beq	12f3c <_start@@Base+0x9f8>
   12f30:	bcc	12f5c <_start@@Base+0xa18>
   12f34:	cmp	r3, #255	; 0xff
   12f38:	bne	12f68 <_start@@Base+0xa24>
   12f3c:	b	18378 <flatcc_verify_union_string@@Base>
   12f40:	cmp	r3, #2
   12f44:	beq	12f70 <_start@@Base+0xa2c>
   12f48:	cmp	r3, #8
   12f4c:	bne	12f68 <_start@@Base+0xa24>
   12f50:	mov	r2, #2
   12f54:	mov	r1, r2
   12f58:	b	1831c <flatcc_verify_union_struct@@Base>
   12f5c:	mov	r2, #4
   12f60:	mov	r1, r2
   12f64:	b	1831c <flatcc_verify_union_struct@@Base>
   12f68:	mov	r0, #0
   12f6c:	bx	lr
   12f70:	ldr	r1, [pc, #4]	; 12f7c <_start@@Base+0xa38>
   12f74:	add	r1, pc, r1
   12f78:	b	18224 <flatcc_verify_union_table@@Base>
   12f7c:			; <UNDEFINED> instruction: 0xfffff6f8
   12f80:	mov	r0, #0
   12f84:	bx	lr
   12f88:	mov	r3, #8
   12f8c:	push	{r4, lr}
   12f90:	mov	r2, r3
   12f94:	mov	r1, #0
   12f98:	mov	r4, r0
   12f9c:	bl	17b4c <flatcc_verify_field@@Base>
   12fa0:	cmp	r0, #0
   12fa4:	popne	{r4, pc}
   12fa8:	mov	r3, #4
   12fac:	mov	r0, r4
   12fb0:	mov	r2, r3
   12fb4:	mov	r1, #1
   12fb8:	pop	{r4, lr}
   12fbc:	b	17b4c <flatcc_verify_field@@Base>
   12fc0:	push	{r4, r5, r6, lr}
   12fc4:	mov	r4, r0
   12fc8:	ldr	ip, [r0, #28]
   12fcc:	sub	sp, sp, #8
   12fd0:	mov	r3, #1
   12fd4:	ldr	r0, [r0, #40]	; 0x28
   12fd8:	ldr	r6, [r4, #48]	; 0x30
   12fdc:	mov	r5, r2
   12fe0:	str	r3, [sp]
   12fe4:	add	r2, r1, ip
   12fe8:	add	r1, r4, #60	; 0x3c
   12fec:	blx	r6
   12ff0:	cmp	r0, #0
   12ff4:	bne	1302c <_start@@Base+0xae8>
   12ff8:	ldr	r1, [r4, #28]
   12ffc:	ldr	r3, [r4, #64]	; 0x40
   13000:	ldr	r2, [r4, #60]	; 0x3c
   13004:	sub	r3, r3, r1
   13008:	ldr	ip, [r4, #32]
   1300c:	cmp	r3, r5
   13010:	movcs	r3, r5
   13014:	add	r2, r2, r1
   13018:	str	r3, [r4, #24]
   1301c:	str	r2, [r4, #16]
   13020:	str	r5, [ip, #4]
   13024:	add	sp, sp, #8
   13028:	pop	{r4, r5, r6, pc}
   1302c:	mvn	r0, #0
   13030:	b	13024 <_start@@Base+0xae0>

00013034 <flatcc_builder_default_alloc@@Base>:
   13034:	push	{r4, r5, r6, r7, r8, lr}
   13038:	subs	r5, r2, #0
   1303c:	mov	r6, r1
   13040:	bne	13064 <flatcc_builder_default_alloc@@Base+0x30>
   13044:	ldr	r0, [r1]
   13048:	cmp	r0, #0
   1304c:	popeq	{r4, r5, r6, r7, r8, pc}
   13050:	bl	122b0 <free@plt>
   13054:	str	r5, [r6]
   13058:	str	r5, [r6, #4]
   1305c:	mov	r0, r5
   13060:	pop	{r4, r5, r6, r7, r8, pc}
   13064:	mov	r7, r3
   13068:	ldr	r3, [sp, #24]
   1306c:	sub	r2, r3, #1
   13070:	cmp	r2, #6
   13074:	addls	pc, pc, r2, lsl #2
   13078:	b	13114 <flatcc_builder_default_alloc@@Base+0xe0>
   1307c:	b	130e8 <flatcc_builder_default_alloc@@Base+0xb4>
   13080:	b	13114 <flatcc_builder_default_alloc@@Base+0xe0>
   13084:	b	13114 <flatcc_builder_default_alloc@@Base+0xe0>
   13088:	b	1310c <flatcc_builder_default_alloc@@Base+0xd8>
   1308c:	b	13098 <flatcc_builder_default_alloc@@Base+0x64>
   13090:	b	13114 <flatcc_builder_default_alloc@@Base+0xe0>
   13094:	b	13104 <flatcc_builder_default_alloc@@Base+0xd0>
   13098:	mov	r4, r5
   1309c:	ldr	r3, [r6, #4]
   130a0:	cmp	r5, r3
   130a4:	bhi	130b0 <flatcc_builder_default_alloc@@Base+0x7c>
   130a8:	cmp	r4, r3, lsr #1
   130ac:	bls	1311c <flatcc_builder_default_alloc@@Base+0xe8>
   130b0:	mov	r1, r4
   130b4:	ldr	r0, [r6]
   130b8:	bl	122d4 <realloc@plt>
   130bc:	subs	r5, r0, #0
   130c0:	beq	13138 <flatcc_builder_default_alloc@@Base+0x104>
   130c4:	cmp	r7, #0
   130c8:	beq	130d8 <flatcc_builder_default_alloc@@Base+0xa4>
   130cc:	ldr	r0, [r6, #4]
   130d0:	cmp	r0, r4
   130d4:	bcc	13124 <flatcc_builder_default_alloc@@Base+0xf0>
   130d8:	str	r5, [r6]
   130dc:	str	r4, [r6, #4]
   130e0:	mov	r0, #0
   130e4:	pop	{r4, r5, r6, r7, r8, pc}
   130e8:	mov	r4, #256	; 0x100
   130ec:	cmp	r5, r4
   130f0:	bls	1309c <flatcc_builder_default_alloc@@Base+0x68>
   130f4:	lsl	r4, r4, #1
   130f8:	cmp	r5, r4
   130fc:	bhi	130f4 <flatcc_builder_default_alloc@@Base+0xc0>
   13100:	b	1309c <flatcc_builder_default_alloc@@Base+0x68>
   13104:	mov	r4, #64	; 0x40
   13108:	b	130ec <flatcc_builder_default_alloc@@Base+0xb8>
   1310c:	mov	r4, #288	; 0x120
   13110:	b	130ec <flatcc_builder_default_alloc@@Base+0xb8>
   13114:	mov	r4, #32
   13118:	b	130ec <flatcc_builder_default_alloc@@Base+0xb8>
   1311c:	mov	r0, #0
   13120:	pop	{r4, r5, r6, r7, r8, pc}
   13124:	sub	r2, r4, r0
   13128:	mov	r1, #0
   1312c:	add	r0, r5, r0
   13130:	bl	1231c <memset@plt>
   13134:	b	130d8 <flatcc_builder_default_alloc@@Base+0xa4>
   13138:	mvn	r0, #0
   1313c:	pop	{r4, r5, r6, r7, r8, pc}
   13140:	push	{r4, r5, lr}
   13144:	cmp	r2, #0
   13148:	ldr	lr, [pc, #248]	; 13248 <flatcc_builder_default_alloc@@Base+0x214>
   1314c:	sub	sp, sp, #84	; 0x54
   13150:	mov	ip, r0
   13154:	add	lr, pc, lr
   13158:	bne	13168 <flatcc_builder_default_alloc@@Base+0x134>
   1315c:	ldrh	r2, [r0, #132]	; 0x84
   13160:	cmp	r2, #0
   13164:	moveq	r2, #1
   13168:	ldrh	r0, [r1]
   1316c:	cmp	r0, #3
   13170:	movls	r4, #4
   13174:	movls	r0, r4
   13178:	strhls	r4, [r1]
   1317c:	cmp	r2, r0
   13180:	strhhi	r2, [r1]
   13184:	cmp	r3, #0
   13188:	bne	1319c <flatcc_builder_default_alloc@@Base+0x168>
   1318c:	ldr	r4, [ip, #140]	; 0x8c
   13190:	sub	r2, r2, #1
   13194:	ands	r3, r2, r4
   13198:	bne	131a8 <flatcc_builder_default_alloc@@Base+0x174>
   1319c:	mov	r0, #0
   131a0:	add	sp, sp, #84	; 0x54
   131a4:	pop	{r4, r5, pc}
   131a8:	ldr	r2, [pc, #156]	; 1324c <flatcc_builder_default_alloc@@Base+0x218>
   131ac:	add	r1, r4, r3
   131b0:	str	r3, [sp, #8]
   131b4:	ldr	r0, [lr, r2]
   131b8:	cmp	r4, r1
   131bc:	mov	r2, #1
   131c0:	str	r0, [sp, #16]
   131c4:	str	r3, [sp, #20]
   131c8:	str	r1, [ip, #140]	; 0x8c
   131cc:	str	r2, [sp, #12]
   131d0:	bgt	13220 <flatcc_builder_default_alloc@@Base+0x1ec>
   131d4:	ldr	r0, [ip, #36]	; 0x24
   131d8:	add	r1, sp, #16
   131dc:	str	r3, [sp]
   131e0:	mov	r3, r4
   131e4:	ldr	r5, [ip, #44]	; 0x2c
   131e8:	blx	r5
   131ec:	cmp	r0, #0
   131f0:	bne	13224 <flatcc_builder_default_alloc@@Base+0x1f0>
   131f4:	cmn	r4, #1
   131f8:	bne	1319c <flatcc_builder_default_alloc@@Base+0x168>
   131fc:	ldr	r3, [pc, #76]	; 13250 <flatcc_builder_default_alloc@@Base+0x21c>
   13200:	ldr	r1, [pc, #76]	; 13254 <flatcc_builder_default_alloc@@Base+0x220>
   13204:	ldr	r0, [pc, #76]	; 13258 <flatcc_builder_default_alloc@@Base+0x224>
   13208:	add	r3, pc, r3
   1320c:	ldr	r2, [pc, #72]	; 1325c <flatcc_builder_default_alloc@@Base+0x228>
   13210:	add	r3, r3, #60	; 0x3c
   13214:	add	r1, pc, r1
   13218:	add	r0, pc, r0
   1321c:	bl	1234c <__assert_fail@plt>
   13220:	bl	12388 <__assert_fail@plt+0x3c>
   13224:	ldr	r3, [pc, #52]	; 13260 <flatcc_builder_default_alloc@@Base+0x22c>
   13228:	ldr	r1, [pc, #52]	; 13264 <flatcc_builder_default_alloc@@Base+0x230>
   1322c:	ldr	r0, [pc, #52]	; 13268 <flatcc_builder_default_alloc@@Base+0x234>
   13230:	add	r3, pc, r3
   13234:	ldr	r2, [pc, #48]	; 1326c <flatcc_builder_default_alloc@@Base+0x238>
   13238:	add	r3, r3, #16
   1323c:	add	r1, pc, r1
   13240:	add	r0, pc, r0
   13244:	bl	1234c <__assert_fail@plt>
   13248:	andeq	r7, r1, r4, lsr #29
   1324c:	andeq	r0, r0, r4, asr #32
   13250:	andeq	r5, r0, ip, lsl #28
   13254:	andeq	r6, r0, r0, asr r5
   13258:	ldrdeq	r6, [r0], -r4
   1325c:			; <UNDEFINED> instruction: 0x000002be
   13260:	andeq	r5, r0, r4, ror #27
   13264:	andeq	r6, r0, r8, lsr #10
   13268:	andeq	r6, r0, ip, lsr #11
   1326c:	andeq	r0, r0, r5, lsr #5
   13270:	push	{r4, r5, r6, r7, lr}
   13274:	mov	r5, r1
   13278:	ldr	r1, [r0, #156]	; 0x9c
   1327c:	ldr	r3, [r0, #160]	; 0xa0
   13280:	add	r2, r1, #1
   13284:	cmp	r2, r3
   13288:	sub	sp, sp, #12
   1328c:	mov	r4, r0
   13290:	str	r2, [r0, #156]	; 0x9c
   13294:	ble	13304 <flatcc_builder_default_alloc@@Base+0x2d0>
   13298:	ldr	r3, [r0, #176]	; 0xb0
   1329c:	cmp	r3, #0
   132a0:	cmpgt	r2, r3
   132a4:	movgt	r3, #1
   132a8:	movle	r3, #0
   132ac:	bgt	13378 <flatcc_builder_default_alloc@@Base+0x344>
   132b0:	add	r1, r1, r1, lsl #3
   132b4:	ldr	r0, [r0, #88]	; 0x58
   132b8:	lsl	r6, r1, #2
   132bc:	add	r2, r6, #36	; 0x24
   132c0:	cmp	r2, r0
   132c4:	bhi	13354 <flatcc_builder_default_alloc@@Base+0x320>
   132c8:	ldr	r3, [r4, #84]	; 0x54
   132cc:	add	r3, r3, r6
   132d0:	cmp	r3, #0
   132d4:	str	r3, [r4, #32]
   132d8:	beq	13378 <flatcc_builder_default_alloc@@Base+0x344>
   132dc:	ldr	r2, [r4, #88]	; 0x58
   132e0:	ldr	r0, [pc, #152]	; 13380 <flatcc_builder_default_alloc@@Base+0x34c>
   132e4:	ldr	r1, [r4, #176]	; 0xb0
   132e8:	umull	r0, r2, r0, r2
   132ec:	lsr	r2, r2, #3
   132f0:	cmp	r1, #0
   132f4:	cmpgt	r2, r1
   132f8:	str	r2, [r4, #160]	; 0xa0
   132fc:	strgt	r1, [r4, #160]	; 0xa0
   13300:	b	13310 <flatcc_builder_default_alloc@@Base+0x2dc>
   13304:	ldr	r3, [r0, #32]
   13308:	add	r3, r3, #36	; 0x24
   1330c:	str	r3, [r0, #32]
   13310:	ldr	r0, [r4, #20]
   13314:	ldr	ip, [r4, #28]
   13318:	ldrh	lr, [r4, #130]	; 0x82
   1331c:	add	r2, r0, ip
   13320:	mov	r1, #0
   13324:	str	r0, [r3, #8]
   13328:	strh	lr, [r3, #12]
   1332c:	add	r2, r2, #7
   13330:	mvn	lr, #3
   13334:	mov	r0, r1
   13338:	bic	r2, r2, #7
   1333c:	strh	r5, [r4, #130]	; 0x82
   13340:	stm	r3, {ip, lr}
   13344:	str	r2, [r4, #28]
   13348:	str	r1, [r4, #20]
   1334c:	add	sp, sp, #12
   13350:	pop	{r4, r5, r6, r7, pc}
   13354:	mov	r1, #4
   13358:	ldr	r0, [r4, #40]	; 0x28
   1335c:	str	r1, [sp]
   13360:	add	r1, r4, #84	; 0x54
   13364:	ldr	r7, [r4, #48]	; 0x30
   13368:	blx	r7
   1336c:	cmp	r0, #0
   13370:	beq	132c8 <flatcc_builder_default_alloc@@Base+0x294>
   13374:	bl	12358 <__assert_fail@plt+0xc>
   13378:	mvn	r0, #0
   1337c:	b	1334c <flatcc_builder_default_alloc@@Base+0x318>
   13380:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   13384:	push	{r4, r5, r6, r7, lr}
   13388:	mov	r5, r0
   1338c:	ldrh	r0, [r0, #128]	; 0x80
   13390:	sub	sp, sp, #92	; 0x5c
   13394:	add	ip, sp, #12
   13398:	cmp	r0, #3
   1339c:	movls	r0, #4
   133a0:	strhls	r0, [r5, #128]	; 0x80
   133a4:	ldr	r4, [pc, #448]	; 1356c <flatcc_builder_default_alloc@@Base+0x538>
   133a8:	ldr	r0, [r5, #136]	; 0x88
   133ac:	mov	r7, #4
   133b0:	mov	r6, #1
   133b4:	str	ip, [sp, #24]
   133b8:	lsls	ip, r2, #2
   133bc:	add	r4, pc, r4
   133c0:	str	r2, [sp, #12]
   133c4:	and	lr, r0, #3
   133c8:	str	r7, [sp, #16]
   133cc:	str	r7, [sp, #28]
   133d0:	str	r6, [sp, #20]
   133d4:	beq	133f0 <flatcc_builder_default_alloc@@Base+0x3bc>
   133d8:	add	r7, ip, r7
   133dc:	mov	r6, #2
   133e0:	str	r1, [sp, #32]
   133e4:	str	ip, [sp, #36]	; 0x24
   133e8:	str	r7, [sp, #16]
   133ec:	str	r6, [sp, #20]
   133f0:	cmp	lr, #0
   133f4:	beq	13424 <flatcc_builder_default_alloc@@Base+0x3f0>
   133f8:	ldr	ip, [sp, #20]
   133fc:	ldr	r6, [pc, #364]	; 13570 <flatcc_builder_default_alloc@@Base+0x53c>
   13400:	add	ip, ip, #1
   13404:	add	r7, r7, lr
   13408:	str	r7, [sp, #16]
   1340c:	ldr	r6, [r4, r6]
   13410:	add	r4, sp, #88	; 0x58
   13414:	add	r4, r4, ip, lsl #3
   13418:	str	ip, [sp, #20]
   1341c:	str	r6, [r4, #-72]	; 0xffffffb8
   13420:	str	lr, [r4, #-68]	; 0xffffffbc
   13424:	cmp	r2, #0
   13428:	sub	r4, r0, r7
   1342c:	beq	134c0 <flatcc_builder_default_alloc@@Base+0x48c>
   13430:	add	r6, r3, r2
   13434:	mvn	ip, #3
   13438:	mov	r2, r3
   1343c:	b	13474 <flatcc_builder_default_alloc@@Base+0x440>
   13440:	sub	r0, ip, r4
   13444:	add	r0, r0, lr
   13448:	cmp	r3, #0
   1344c:	str	r0, [r1]
   13450:	beq	13460 <flatcc_builder_default_alloc@@Base+0x42c>
   13454:	ldrb	r0, [r2]
   13458:	cmp	r0, #0
   1345c:	beq	13520 <flatcc_builder_default_alloc@@Base+0x4ec>
   13460:	add	r2, r2, #1
   13464:	cmp	r2, r6
   13468:	add	r1, r1, #4
   1346c:	sub	ip, ip, #4
   13470:	beq	134b8 <flatcc_builder_default_alloc@@Base+0x484>
   13474:	ldr	lr, [r1]
   13478:	cmp	lr, #0
   1347c:	bne	13440 <flatcc_builder_default_alloc@@Base+0x40c>
   13480:	cmp	r3, #0
   13484:	beq	134fc <flatcc_builder_default_alloc@@Base+0x4c8>
   13488:	ldrb	r0, [r2]
   1348c:	cmp	r0, #0
   13490:	beq	13460 <flatcc_builder_default_alloc@@Base+0x42c>
   13494:	ldr	r3, [pc, #216]	; 13574 <flatcc_builder_default_alloc@@Base+0x540>
   13498:	ldr	r1, [pc, #216]	; 13578 <flatcc_builder_default_alloc@@Base+0x544>
   1349c:	ldr	r0, [pc, #216]	; 1357c <flatcc_builder_default_alloc@@Base+0x548>
   134a0:	add	r3, pc, r3
   134a4:	ldr	r2, [pc, #212]	; 13580 <flatcc_builder_default_alloc@@Base+0x54c>
   134a8:	add	r3, r3, #76	; 0x4c
   134ac:	add	r1, pc, r1
   134b0:	add	r0, pc, r0
   134b4:	bl	1234c <__assert_fail@plt>
   134b8:	ldr	r0, [r5, #136]	; 0x88
   134bc:	sub	r4, r0, r7
   134c0:	cmp	r4, r0
   134c4:	bge	13568 <flatcc_builder_default_alloc@@Base+0x534>
   134c8:	ldr	r0, [r5, #36]	; 0x24
   134cc:	ldr	r2, [sp, #20]
   134d0:	str	r7, [sp]
   134d4:	mov	r3, r4
   134d8:	ldr	r6, [r5, #44]	; 0x2c
   134dc:	add	r1, sp, #24
   134e0:	blx	r6
   134e4:	cmp	r0, #0
   134e8:	bne	13544 <flatcc_builder_default_alloc@@Base+0x510>
   134ec:	mov	r0, r4
   134f0:	str	r4, [r5, #136]	; 0x88
   134f4:	add	sp, sp, #92	; 0x5c
   134f8:	pop	{r4, r5, r6, r7, pc}
   134fc:	ldr	r3, [pc, #128]	; 13584 <flatcc_builder_default_alloc@@Base+0x550>
   13500:	ldr	r1, [pc, #128]	; 13588 <flatcc_builder_default_alloc@@Base+0x554>
   13504:	ldr	r0, [pc, #128]	; 1358c <flatcc_builder_default_alloc@@Base+0x558>
   13508:	add	r3, pc, r3
   1350c:	ldr	r2, [pc, #124]	; 13590 <flatcc_builder_default_alloc@@Base+0x55c>
   13510:	add	r3, r3, #76	; 0x4c
   13514:	add	r1, pc, r1
   13518:	add	r0, pc, r0
   1351c:	bl	1234c <__assert_fail@plt>
   13520:	ldr	r3, [pc, #108]	; 13594 <flatcc_builder_default_alloc@@Base+0x560>
   13524:	ldr	r1, [pc, #108]	; 13598 <flatcc_builder_default_alloc@@Base+0x564>
   13528:	ldr	r0, [pc, #108]	; 1359c <flatcc_builder_default_alloc@@Base+0x568>
   1352c:	add	r3, pc, r3
   13530:	ldr	r2, [pc, #104]	; 135a0 <flatcc_builder_default_alloc@@Base+0x56c>
   13534:	add	r3, r3, #76	; 0x4c
   13538:	add	r1, pc, r1
   1353c:	add	r0, pc, r0
   13540:	bl	1234c <__assert_fail@plt>
   13544:	ldr	r3, [pc, #88]	; 135a4 <flatcc_builder_default_alloc@@Base+0x570>
   13548:	ldr	r1, [pc, #88]	; 135a8 <flatcc_builder_default_alloc@@Base+0x574>
   1354c:	ldr	r0, [pc, #88]	; 135ac <flatcc_builder_default_alloc@@Base+0x578>
   13550:	add	r3, pc, r3
   13554:	ldr	r2, [pc, #84]	; 135b0 <flatcc_builder_default_alloc@@Base+0x57c>
   13558:	add	r3, r3, #28
   1355c:	add	r1, pc, r1
   13560:	add	r0, pc, r0
   13564:	bl	1234c <__assert_fail@plt>
   13568:	bl	123c0 <__assert_fail@plt+0x74>
   1356c:	andeq	r7, r1, ip, lsr ip
   13570:	andeq	r0, r0, r4, asr #32
   13574:	andeq	r5, r0, r4, ror fp
   13578:			; <UNDEFINED> instruction: 0x000062b8
   1357c:	andeq	r6, r0, r0, asr #6
   13580:			; <UNDEFINED> instruction: 0x000005b5
   13584:	andeq	r5, r0, ip, lsl #22
   13588:	andeq	r6, r0, r0, asr r2
   1358c:	ldrdeq	r6, [r0], -r4
   13590:			; <UNDEFINED> instruction: 0x000005b7
   13594:	andeq	r5, r0, r8, ror #21
   13598:	andeq	r6, r0, ip, lsr #4
   1359c:	andeq	r6, r0, r4, lsr #5
   135a0:			; <UNDEFINED> instruction: 0x000005b1
   135a4:	andeq	r5, r0, r4, asr #21
   135a8:	andeq	r6, r0, r8, lsl #4
   135ac:	andeq	r6, r0, ip, lsl #5
   135b0:	andeq	r0, r0, fp, lsl #5

000135b4 <flatcc_builder_flush_vtable_cache@@Base>:
   135b4:	ldr	r3, [r0, #116]	; 0x74
   135b8:	cmp	r3, #0
   135bc:	bxeq	lr
   135c0:	ldr	r2, [r0, #96]	; 0x60
   135c4:	push	{r4, lr}
   135c8:	mov	r1, #0
   135cc:	mov	r4, r0
   135d0:	ldr	r0, [r0, #92]	; 0x5c
   135d4:	bl	1231c <memset@plt>
   135d8:	mov	r2, #16
   135dc:	mov	r3, #0
   135e0:	str	r2, [r4, #124]	; 0x7c
   135e4:	str	r3, [r4, #120]	; 0x78
   135e8:	pop	{r4, pc}

000135ec <flatcc_builder_custom_init@@Base>:
   135ec:	push	{r4, r5, r6, r7, r8, lr}
   135f0:	mov	r6, r1
   135f4:	mov	r7, r2
   135f8:	mov	r1, #0
   135fc:	mov	r2, #232	; 0xe8
   13600:	mov	r5, r3
   13604:	mov	r4, r0
   13608:	ldr	r8, [sp, #24]
   1360c:	bl	1231c <memset@plt>
   13610:	ldr	r3, [pc, #76]	; 13664 <flatcc_builder_custom_init@@Base+0x78>
   13614:	cmp	r6, #0
   13618:	add	r3, pc, r3
   1361c:	beq	1364c <flatcc_builder_custom_init@@Base+0x60>
   13620:	cmp	r5, #0
   13624:	beq	13640 <flatcc_builder_custom_init@@Base+0x54>
   13628:	str	r8, [r4, #40]	; 0x28
   1362c:	str	r5, [r4, #48]	; 0x30
   13630:	str	r7, [r4, #36]	; 0x24
   13634:	str	r6, [r4, #44]	; 0x2c
   13638:	mov	r0, #0
   1363c:	pop	{r4, r5, r6, r7, r8, pc}
   13640:	ldr	r2, [pc, #32]	; 13668 <flatcc_builder_custom_init@@Base+0x7c>
   13644:	ldr	r5, [r3, r2]
   13648:	b	13628 <flatcc_builder_custom_init@@Base+0x3c>
   1364c:	ldr	r2, [pc, #24]	; 1366c <flatcc_builder_custom_init@@Base+0x80>
   13650:	mov	r1, #1
   13654:	str	r1, [r4, #184]	; 0xb8
   13658:	add	r7, r4, #188	; 0xbc
   1365c:	ldr	r6, [r3, r2]
   13660:	b	13620 <flatcc_builder_custom_init@@Base+0x34>
   13664:	andeq	r7, r1, r0, ror #19
   13668:	andeq	r0, r0, ip, asr #32
   1366c:	andeq	r0, r0, r0, asr r0

00013670 <flatcc_builder_init@@Base>:
   13670:	push	{lr}		; (str lr, [sp, #-4]!)
   13674:	sub	sp, sp, #12
   13678:	mov	r3, #0
   1367c:	str	r3, [sp]
   13680:	mov	r2, r3
   13684:	mov	r1, r3
   13688:	bl	135ec <flatcc_builder_custom_init@@Base>
   1368c:	add	sp, sp, #12
   13690:	pop	{pc}		; (ldr pc, [sp], #4)

00013694 <flatcc_builder_custom_reset@@Base>:
   13694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13698:	add	r7, r0, #52	; 0x34
   1369c:	mov	r4, #0
   136a0:	sub	sp, sp, #12
   136a4:	mov	r5, r0
   136a8:	mov	sl, r1
   136ac:	mov	r8, r2
   136b0:	mov	r6, r7
   136b4:	mov	r9, r4
   136b8:	mov	fp, #1
   136bc:	b	13710 <flatcc_builder_custom_reset@@Base+0x7c>
   136c0:	cmp	r4, #5
   136c4:	cmpne	r8, #0
   136c8:	beq	136f4 <flatcc_builder_custom_reset@@Base+0x60>
   136cc:	ldr	r0, [r5, #40]	; 0x28
   136d0:	mov	r3, fp
   136d4:	str	r4, [sp]
   136d8:	mov	r2, #1
   136dc:	mov	r1, r6
   136e0:	ldr	ip, [r5, #48]	; 0x30
   136e4:	blx	ip
   136e8:	cmp	r0, #0
   136ec:	bne	137d4 <flatcc_builder_custom_reset@@Base+0x140>
   136f0:	ldr	r0, [r7, r4, lsl #3]
   136f4:	ldr	r2, [r6, #4]
   136f8:	mov	r1, r9
   136fc:	bl	1231c <memset@plt>
   13700:	add	r4, r4, #1
   13704:	cmp	r4, #8
   13708:	add	r6, r6, #8
   1370c:	beq	1374c <flatcc_builder_custom_reset@@Base+0xb8>
   13710:	ldr	r0, [r7, r4, lsl #3]
   13714:	cmp	r0, #0
   13718:	bne	136c0 <flatcc_builder_custom_reset@@Base+0x2c>
   1371c:	ldr	r3, [r6, #4]
   13720:	cmp	r3, #0
   13724:	beq	13700 <flatcc_builder_custom_reset@@Base+0x6c>
   13728:	ldr	r3, [pc, #172]	; 137dc <flatcc_builder_custom_reset@@Base+0x148>
   1372c:	ldr	r1, [pc, #172]	; 137e0 <flatcc_builder_custom_reset@@Base+0x14c>
   13730:	ldr	r0, [pc, #172]	; 137e4 <flatcc_builder_custom_reset@@Base+0x150>
   13734:	add	r3, pc, r3
   13738:	ldr	r2, [pc, #168]	; 137e8 <flatcc_builder_custom_reset@@Base+0x154>
   1373c:	add	r3, r3, #108	; 0x6c
   13740:	add	r1, pc, r1
   13744:	add	r0, pc, r0
   13748:	bl	1234c <__assert_fail@plt>
   1374c:	ldr	r2, [r5, #124]	; 0x7c
   13750:	mov	r3, #0
   13754:	ldr	r0, [r5, #60]	; 0x3c
   13758:	cmp	r2, r3
   1375c:	str	r3, [r5, #120]	; 0x78
   13760:	ldr	r1, [r5, #76]	; 0x4c
   13764:	movne	r3, #16
   13768:	ldr	r2, [r5, #52]	; 0x34
   1376c:	str	r0, [r5, #16]
   13770:	ldr	r0, [r5, #184]	; 0xb8
   13774:	strne	r3, [r5, #124]	; 0x7c
   13778:	mov	r3, #0
   1377c:	cmp	sl, #0
   13780:	strne	r3, [r5, #172]	; 0xac
   13784:	strne	r3, [r5, #176]	; 0xb0
   13788:	strne	r3, [r5, #180]	; 0xb4
   1378c:	cmp	r0, #0
   13790:	stm	r5, {r1, r2}
   13794:	strh	r3, [r5, #128]	; 0x80
   13798:	str	r3, [r5, #136]	; 0x88
   1379c:	str	r3, [r5, #140]	; 0x8c
   137a0:	str	r3, [r5, #156]	; 0x9c
   137a4:	str	r3, [r5, #160]	; 0xa0
   137a8:	str	r3, [r5, #20]
   137ac:	str	r3, [r5, #24]
   137b0:	str	r3, [r5, #148]	; 0x94
   137b4:	str	r3, [r5, #152]	; 0x98
   137b8:	str	r3, [r5, #32]
   137bc:	beq	137cc <flatcc_builder_custom_reset@@Base+0x138>
   137c0:	add	r0, r5, #188	; 0xbc
   137c4:	bl	17270 <flatcc_emitter_reset@@Base>
   137c8:	mov	r0, #0
   137cc:	add	sp, sp, #12
   137d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137d4:	mvn	r0, #0
   137d8:	b	137cc <flatcc_builder_custom_reset@@Base+0x138>
   137dc:	andeq	r5, r0, r0, ror #17
   137e0:	andeq	r6, r0, r4, lsr #32
   137e4:	strheq	r6, [r0], -ip
   137e8:			; <UNDEFINED> instruction: 0x000001b2

000137ec <flatcc_builder_reset@@Base>:
   137ec:	mov	r2, #0
   137f0:	mov	r1, r2
   137f4:	b	13694 <flatcc_builder_custom_reset@@Base>

000137f8 <flatcc_builder_clear@@Base>:
   137f8:	push	{r4, r5, r6, r7, r8, lr}
   137fc:	mov	r4, #0
   13800:	sub	sp, sp, #8
   13804:	mov	r6, r0
   13808:	add	r5, r0, #52	; 0x34
   1380c:	mov	r8, r4
   13810:	ldr	r0, [r6, #40]	; 0x28
   13814:	mov	r1, r5
   13818:	str	r4, [sp]
   1381c:	mov	r3, r8
   13820:	add	r4, r4, #1
   13824:	ldr	r7, [r6, #48]	; 0x30
   13828:	mov	r2, #0
   1382c:	blx	r7
   13830:	cmp	r4, #8
   13834:	add	r5, r5, #8
   13838:	bne	13810 <flatcc_builder_clear@@Base+0x18>
   1383c:	ldr	r3, [r6, #184]	; 0xb8
   13840:	cmp	r3, #0
   13844:	beq	13850 <flatcc_builder_clear@@Base+0x58>
   13848:	add	r0, r6, #188	; 0xbc
   1384c:	bl	1732c <flatcc_emitter_clear@@Base>
   13850:	mov	r0, r6
   13854:	mov	r2, #232	; 0xe8
   13858:	mov	r1, #0
   1385c:	add	sp, sp, #8
   13860:	pop	{r4, r5, r6, r7, r8, lr}
   13864:	b	1231c <memset@plt>

00013868 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13868:	push	{r4, r5, r6, r7, r8, lr}
   1386c:	add	r4, r1, #3
   13870:	bic	r4, r4, #3
   13874:	ldr	r7, [r0, #228]	; 0xe4
   13878:	add	r4, r4, #4
   1387c:	ldr	r3, [r0, #112]	; 0x70
   13880:	add	r2, r4, r7
   13884:	cmp	r2, r3
   13888:	sub	sp, sp, #8
   1388c:	mov	r6, r0
   13890:	bhi	138d8 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   13894:	ldr	r8, [r6, #108]	; 0x6c
   13898:	adds	r5, r8, r7
   1389c:	beq	13900 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   138a0:	mov	r2, r4
   138a4:	mov	r1, #0
   138a8:	mov	r0, r5
   138ac:	bl	1231c <memset@plt>
   138b0:	ldr	r3, [r6, #224]	; 0xe0
   138b4:	add	r0, r5, #4
   138b8:	str	r3, [r8, r7]
   138bc:	ldr	r3, [r6, #228]	; 0xe4
   138c0:	add	r4, r4, r3
   138c4:	add	r3, r3, #4
   138c8:	str	r4, [r6, #228]	; 0xe4
   138cc:	str	r3, [r6, #224]	; 0xe0
   138d0:	add	sp, sp, #8
   138d4:	pop	{r4, r5, r6, r7, r8, pc}
   138d8:	mov	r3, #7
   138dc:	ldr	r0, [r0, #40]	; 0x28
   138e0:	add	r1, r6, #108	; 0x6c
   138e4:	str	r3, [sp]
   138e8:	mov	r3, #0
   138ec:	ldr	r5, [r6, #48]	; 0x30
   138f0:	blx	r5
   138f4:	cmp	r0, #0
   138f8:	beq	13894 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   138fc:	bl	12358 <__assert_fail@plt+0xc>
   13900:	mov	r0, r5
   13904:	b	138d0 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00013908 <flatcc_builder_enter_user_frame@@Base>:
   13908:	push	{r4, r5, r6, r7, lr}
   1390c:	add	r4, r1, #3
   13910:	bic	r4, r4, #3
   13914:	ldr	r6, [r0, #228]	; 0xe4
   13918:	add	r4, r4, #4
   1391c:	ldr	r3, [r0, #112]	; 0x70
   13920:	add	r2, r4, r6
   13924:	cmp	r2, r3
   13928:	sub	sp, sp, #12
   1392c:	mov	r5, r0
   13930:	bhi	13970 <flatcc_builder_enter_user_frame@@Base+0x68>
   13934:	ldr	r7, [r5, #108]	; 0x6c
   13938:	adds	r0, r7, r6
   1393c:	beq	13968 <flatcc_builder_enter_user_frame@@Base+0x60>
   13940:	mov	r2, r4
   13944:	mov	r1, #0
   13948:	bl	1231c <memset@plt>
   1394c:	ldr	r3, [r5, #224]	; 0xe0
   13950:	str	r3, [r7, r6]
   13954:	ldr	r0, [r5, #228]	; 0xe4
   13958:	add	r4, r4, r0
   1395c:	add	r0, r0, #4
   13960:	str	r4, [r5, #228]	; 0xe4
   13964:	str	r0, [r5, #224]	; 0xe0
   13968:	add	sp, sp, #12
   1396c:	pop	{r4, r5, r6, r7, pc}
   13970:	mov	r3, #7
   13974:	ldr	r0, [r0, #40]	; 0x28
   13978:	add	r1, r5, #108	; 0x6c
   1397c:	str	r3, [sp]
   13980:	mov	r3, #0
   13984:	ldr	r7, [r5, #48]	; 0x30
   13988:	blx	r7
   1398c:	cmp	r0, #0
   13990:	beq	13934 <flatcc_builder_enter_user_frame@@Base+0x2c>
   13994:	bl	12358 <__assert_fail@plt+0xc>

00013998 <flatcc_builder_exit_user_frame@@Base>:
   13998:	ldr	r3, [r0, #224]	; 0xe0
   1399c:	cmp	r3, #0
   139a0:	beq	139c4 <flatcc_builder_exit_user_frame@@Base+0x2c>
   139a4:	ldr	r2, [r0, #108]	; 0x6c
   139a8:	sub	r1, r3, #4
   139ac:	add	r3, r2, r3
   139b0:	str	r1, [r0, #228]	; 0xe4
   139b4:	ldr	r3, [r3, #-4]
   139b8:	str	r3, [r0, #224]	; 0xe0
   139bc:	mov	r0, r3
   139c0:	bx	lr
   139c4:	ldr	r3, [pc, #32]	; 139ec <flatcc_builder_exit_user_frame@@Base+0x54>
   139c8:	ldr	r1, [pc, #32]	; 139f0 <flatcc_builder_exit_user_frame@@Base+0x58>
   139cc:	ldr	r0, [pc, #32]	; 139f4 <flatcc_builder_exit_user_frame@@Base+0x5c>
   139d0:	add	r3, pc, r3
   139d4:	push	{r4, lr}
   139d8:	add	r3, r3, #136	; 0x88
   139dc:	ldr	r2, [pc, #20]	; 139f8 <flatcc_builder_exit_user_frame@@Base+0x60>
   139e0:	add	r1, pc, r1
   139e4:	add	r0, pc, r0
   139e8:	bl	1234c <__assert_fail@plt>
   139ec:	andeq	r5, r0, r4, asr #12
   139f0:	andeq	r5, r0, r4, lsl #27
   139f4:	andeq	r5, r0, r0, lsr lr
   139f8:	andeq	r0, r0, lr, lsl r2

000139fc <flatcc_builder_exit_user_frame_at@@Base>:
   139fc:	ldr	r2, [r0, #224]	; 0xe0
   13a00:	cmp	r2, r1
   13a04:	bcc	13a10 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13a08:	str	r1, [r0, #224]	; 0xe0
   13a0c:	b	13998 <flatcc_builder_exit_user_frame@@Base>
   13a10:	ldr	r3, [pc, #32]	; 13a38 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13a14:	ldr	r1, [pc, #32]	; 13a3c <flatcc_builder_exit_user_frame_at@@Base+0x40>
   13a18:	ldr	r0, [pc, #32]	; 13a40 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   13a1c:	add	r3, pc, r3
   13a20:	push	{r4, lr}
   13a24:	add	r3, r3, #168	; 0xa8
   13a28:	ldr	r2, [pc, #20]	; 13a44 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   13a2c:	add	r1, pc, r1
   13a30:	add	r0, pc, r0
   13a34:	bl	1234c <__assert_fail@plt>
   13a38:	strdeq	r5, [r0], -r8
   13a3c:	andeq	r5, r0, r8, lsr sp
   13a40:	andeq	r5, r0, r0, lsl #28
   13a44:	andeq	r0, r0, r7, lsr #4

00013a48 <flatcc_builder_get_current_user_frame@@Base>:
   13a48:	ldr	r0, [r0, #224]	; 0xe0
   13a4c:	bx	lr

00013a50 <flatcc_builder_get_user_frame_ptr@@Base>:
   13a50:	ldr	r0, [r0, #108]	; 0x6c
   13a54:	add	r0, r0, r1
   13a58:	bx	lr

00013a5c <flatcc_builder_embed_buffer@@Base>:
   13a5c:	ldr	ip, [r0, #152]	; 0x98
   13a60:	push	{r4, r5, r6, lr}
   13a64:	mov	r5, r3
   13a68:	sub	sp, sp, #88	; 0x58
   13a6c:	adds	r3, ip, #0
   13a70:	movne	r3, #1
   13a74:	mov	r6, r2
   13a78:	mov	r2, r1
   13a7c:	add	r1, sp, #104	; 0x68
   13a80:	mov	r4, r0
   13a84:	bl	13140 <flatcc_builder_default_alloc@@Base+0x10c>
   13a88:	ldr	ip, [pc, #324]	; 13bd4 <flatcc_builder_embed_buffer@@Base+0x178>
   13a8c:	add	ip, pc, ip
   13a90:	cmp	r0, #0
   13a94:	bne	13b9c <flatcc_builder_embed_buffer@@Base+0x140>
   13a98:	ldr	r2, [sp, #108]	; 0x6c
   13a9c:	ldr	r1, [r4, #136]	; 0x88
   13aa0:	ldrh	r3, [sp, #104]	; 0x68
   13aa4:	tst	r2, #2
   13aa8:	moveq	lr, #0
   13aac:	movne	lr, #4
   13ab0:	sub	r2, r1, r5
   13ab4:	sub	r3, r3, #1
   13ab8:	sub	r2, r2, lr
   13abc:	and	r2, r2, r3
   13ac0:	ldr	r3, [r4, #152]	; 0x98
   13ac4:	str	r0, [sp, #16]
   13ac8:	str	r0, [sp, #20]
   13acc:	cmp	r3, #0
   13ad0:	add	r0, r5, r2
   13ad4:	str	r0, [sp, #12]
   13ad8:	beq	13af8 <flatcc_builder_embed_buffer@@Base+0x9c>
   13adc:	mov	r3, #4
   13ae0:	mov	lr, #1
   13ae4:	add	r0, sp, #12
   13ae8:	str	r3, [sp, #16]
   13aec:	str	r3, [sp, #28]
   13af0:	str	r0, [sp, #24]
   13af4:	str	lr, [sp, #20]
   13af8:	cmp	r5, #0
   13afc:	beq	13b24 <flatcc_builder_embed_buffer@@Base+0xc8>
   13b00:	ldr	r0, [sp, #20]
   13b04:	add	lr, sp, #88	; 0x58
   13b08:	add	r0, r0, #1
   13b0c:	add	r3, r3, r5
   13b10:	add	lr, lr, r0, lsl #3
   13b14:	str	r3, [sp, #16]
   13b18:	str	r0, [sp, #20]
   13b1c:	str	r6, [lr, #-72]	; 0xffffffb8
   13b20:	str	r5, [lr, #-68]	; 0xffffffbc
   13b24:	cmp	r2, #0
   13b28:	bne	13b6c <flatcc_builder_embed_buffer@@Base+0x110>
   13b2c:	sub	r5, r1, r3
   13b30:	cmp	r1, r5
   13b34:	ble	13bd0 <flatcc_builder_embed_buffer@@Base+0x174>
   13b38:	ldr	r0, [r4, #36]	; 0x24
   13b3c:	ldr	r2, [sp, #20]
   13b40:	str	r3, [sp]
   13b44:	add	r1, sp, #24
   13b48:	ldr	r6, [r4, #44]	; 0x2c
   13b4c:	mov	r3, r5
   13b50:	blx	r6
   13b54:	cmp	r0, #0
   13b58:	streq	r5, [r4, #136]	; 0x88
   13b5c:	bne	13bac <flatcc_builder_embed_buffer@@Base+0x150>
   13b60:	mov	r0, r5
   13b64:	add	sp, sp, #88	; 0x58
   13b68:	pop	{r4, r5, r6, pc}
   13b6c:	ldr	r0, [sp, #20]
   13b70:	ldr	lr, [pc, #96]	; 13bd8 <flatcc_builder_embed_buffer@@Base+0x17c>
   13b74:	add	r0, r0, #1
   13b78:	add	r3, r3, r2
   13b7c:	str	r3, [sp, #16]
   13b80:	ldr	lr, [ip, lr]
   13b84:	add	ip, sp, #88	; 0x58
   13b88:	add	ip, ip, r0, lsl #3
   13b8c:	str	r0, [sp, #20]
   13b90:	str	lr, [ip, #-72]	; 0xffffffb8
   13b94:	str	r2, [ip, #-68]	; 0xffffffbc
   13b98:	b	13b2c <flatcc_builder_embed_buffer@@Base+0xd0>
   13b9c:	mov	r5, #0
   13ba0:	mov	r0, r5
   13ba4:	add	sp, sp, #88	; 0x58
   13ba8:	pop	{r4, r5, r6, pc}
   13bac:	ldr	r3, [pc, #40]	; 13bdc <flatcc_builder_embed_buffer@@Base+0x180>
   13bb0:	ldr	r1, [pc, #40]	; 13be0 <flatcc_builder_embed_buffer@@Base+0x184>
   13bb4:	ldr	r0, [pc, #40]	; 13be4 <flatcc_builder_embed_buffer@@Base+0x188>
   13bb8:	add	r3, pc, r3
   13bbc:	ldr	r2, [pc, #36]	; 13be8 <flatcc_builder_embed_buffer@@Base+0x18c>
   13bc0:	add	r3, r3, #28
   13bc4:	add	r1, pc, r1
   13bc8:	add	r0, pc, r0
   13bcc:	bl	1234c <__assert_fail@plt>
   13bd0:	bl	123c0 <__assert_fail@plt+0x74>
   13bd4:	andeq	r7, r1, ip, ror #10
   13bd8:	andeq	r0, r0, r4, asr #32
   13bdc:	andeq	r5, r0, ip, asr r4
   13be0:	andeq	r5, r0, r0, lsr #23
   13be4:	andeq	r5, r0, r4, lsr #24
   13be8:	andeq	r0, r0, fp, lsl #5

00013bec <flatcc_builder_create_buffer@@Base>:
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bf0:	sub	sp, sp, #100	; 0x64
   13bf4:	mov	r5, #0
   13bf8:	ldr	r8, [sp, #140]	; 0x8c
   13bfc:	mov	r9, r1
   13c00:	and	r6, r8, #1
   13c04:	mov	r7, r3
   13c08:	add	r1, sp, #136	; 0x88
   13c0c:	mov	r3, r6
   13c10:	str	r5, [sp, #20]
   13c14:	mov	r4, r0
   13c18:	bl	13140 <flatcc_builder_default_alloc@@Base+0x10c>
   13c1c:	ldr	lr, [pc, #516]	; 13e28 <flatcc_builder_create_buffer@@Base+0x23c>
   13c20:	add	lr, pc, lr
   13c24:	cmp	r0, r5
   13c28:	bne	13dbc <flatcc_builder_create_buffer@@Base+0x1d0>
   13c2c:	ldrh	r3, [r4, #128]	; 0x80
   13c30:	ldrh	r2, [sp, #136]	; 0x88
   13c34:	uxtb	r5, r6
   13c38:	cmp	r3, r2
   13c3c:	strhcc	r2, [r4, #128]	; 0x80
   13c40:	cmp	r9, #0
   13c44:	sub	r2, r2, #1
   13c48:	ldrne	r3, [r9]
   13c4c:	ldreq	r0, [sp, #20]
   13c50:	ldrne	r0, [r9]
   13c54:	strne	r3, [sp, #20]
   13c58:	cmp	r0, #0
   13c5c:	movne	r0, #4
   13c60:	moveq	r0, #0
   13c64:	ands	r3, r8, #2
   13c68:	ldr	r8, [r4, #136]	; 0x88
   13c6c:	bne	13d8c <flatcc_builder_create_buffer@@Base+0x1a0>
   13c70:	sub	r1, r8, #4
   13c74:	cmp	r5, #0
   13c78:	sub	r1, r1, r0
   13c7c:	and	r2, r2, r1
   13c80:	moveq	r9, #1
   13c84:	moveq	ip, #4
   13c88:	bne	13d98 <flatcc_builder_create_buffer@@Base+0x1ac>
   13c8c:	add	r1, r3, #1
   13c90:	add	sl, sp, #96	; 0x60
   13c94:	add	r1, sl, r1, lsl #3
   13c98:	mov	fp, #4
   13c9c:	add	sl, sp, #12
   13ca0:	cmp	r0, #0
   13ca4:	str	ip, [sp, #24]
   13ca8:	str	r9, [sp, #28]
   13cac:	str	sl, [r1, #-72]	; 0xffffffb8
   13cb0:	str	fp, [r1, #-68]	; 0xffffffbc
   13cb4:	beq	13ce0 <flatcc_builder_create_buffer@@Base+0xf4>
   13cb8:	add	r9, r9, #1
   13cbc:	add	r1, sp, #96	; 0x60
   13cc0:	add	r9, r1, r9, lsl #3
   13cc4:	add	r3, r3, #2
   13cc8:	add	ip, ip, r0
   13ccc:	str	r3, [sp, #28]
   13cd0:	add	r3, sp, #20
   13cd4:	str	r0, [r9, #-68]	; 0xffffffbc
   13cd8:	str	ip, [sp, #24]
   13cdc:	str	r3, [r9, #-72]	; 0xffffffb8
   13ce0:	cmp	r2, #0
   13ce4:	beq	13d14 <flatcc_builder_create_buffer@@Base+0x128>
   13ce8:	ldr	r3, [sp, #28]
   13cec:	ldr	r1, [pc, #312]	; 13e2c <flatcc_builder_create_buffer@@Base+0x240>
   13cf0:	add	r3, r3, #1
   13cf4:	add	ip, ip, r2
   13cf8:	str	ip, [sp, #24]
   13cfc:	ldr	r0, [lr, r1]
   13d00:	add	r1, sp, #96	; 0x60
   13d04:	add	r1, r1, r3, lsl #3
   13d08:	str	r3, [sp, #28]
   13d0c:	str	r0, [r1, #-72]	; 0xffffffb8
   13d10:	str	r2, [r1, #-68]	; 0xffffffbc
   13d14:	cmp	r5, #0
   13d18:	sub	r5, r8, ip
   13d1c:	mov	r3, r5
   13d20:	beq	13dcc <flatcc_builder_create_buffer@@Base+0x1e0>
   13d24:	cmp	r6, #0
   13d28:	add	r3, r5, #4
   13d2c:	beq	13dcc <flatcc_builder_create_buffer@@Base+0x1e0>
   13d30:	ldr	r2, [r4, #144]	; 0x90
   13d34:	sub	r2, r2, r3
   13d38:	str	r2, [sp, #16]
   13d3c:	sub	r7, r7, r3
   13d40:	cmp	r5, r8
   13d44:	str	r7, [sp, #12]
   13d48:	mov	r6, r5
   13d4c:	bge	13ddc <flatcc_builder_create_buffer@@Base+0x1f0>
   13d50:	ldr	r0, [r4, #36]	; 0x24
   13d54:	ldr	r2, [sp, #28]
   13d58:	str	ip, [sp]
   13d5c:	mov	r3, r5
   13d60:	ldr	r7, [r4, #44]	; 0x2c
   13d64:	add	r1, sp, #32
   13d68:	blx	r7
   13d6c:	cmp	r0, #0
   13d70:	bne	13de0 <flatcc_builder_create_buffer@@Base+0x1f4>
   13d74:	cmp	r5, #0
   13d78:	str	r5, [r4, #136]	; 0x88
   13d7c:	beq	13e04 <flatcc_builder_create_buffer@@Base+0x218>
   13d80:	mov	r0, r6
   13d84:	add	sp, sp, #100	; 0x64
   13d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d8c:	sub	r3, r8, #8
   13d90:	sub	r3, r3, r0
   13d94:	and	r2, r2, r3
   13d98:	mov	ip, #4
   13d9c:	mov	r3, #1
   13da0:	add	r1, sp, #16
   13da4:	str	ip, [sp, #36]	; 0x24
   13da8:	str	r1, [sp, #32]
   13dac:	mov	r5, r3
   13db0:	mov	r9, #2
   13db4:	mov	ip, #8
   13db8:	b	13c8c <flatcc_builder_create_buffer@@Base+0xa0>
   13dbc:	mov	r6, r5
   13dc0:	mov	r0, r6
   13dc4:	add	sp, sp, #100	; 0x64
   13dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dcc:	ldr	r2, [r4, #140]	; 0x8c
   13dd0:	sub	r2, r2, r3
   13dd4:	str	r2, [sp, #16]
   13dd8:	b	13d3c <flatcc_builder_create_buffer@@Base+0x150>
   13ddc:	bl	123c0 <__assert_fail@plt+0x74>
   13de0:	ldr	r3, [pc, #72]	; 13e30 <flatcc_builder_create_buffer@@Base+0x244>
   13de4:	ldr	r1, [pc, #72]	; 13e34 <flatcc_builder_create_buffer@@Base+0x248>
   13de8:	ldr	r0, [pc, #72]	; 13e38 <flatcc_builder_create_buffer@@Base+0x24c>
   13dec:	add	r3, pc, r3
   13df0:	ldr	r2, [pc, #68]	; 13e3c <flatcc_builder_create_buffer@@Base+0x250>
   13df4:	add	r3, r3, #28
   13df8:	add	r1, pc, r1
   13dfc:	add	r0, pc, r0
   13e00:	bl	1234c <__assert_fail@plt>
   13e04:	ldr	r3, [pc, #52]	; 13e40 <flatcc_builder_create_buffer@@Base+0x254>
   13e08:	ldr	r1, [pc, #52]	; 13e44 <flatcc_builder_create_buffer@@Base+0x258>
   13e0c:	ldr	r0, [pc, #52]	; 13e48 <flatcc_builder_create_buffer@@Base+0x25c>
   13e10:	add	r3, pc, r3
   13e14:	mov	r2, #772	; 0x304
   13e18:	add	r3, r3, #204	; 0xcc
   13e1c:	add	r1, pc, r1
   13e20:	add	r0, pc, r0
   13e24:	bl	1234c <__assert_fail@plt>
   13e28:	ldrdeq	r7, [r1], -r8
   13e2c:	andeq	r0, r0, r4, asr #32
   13e30:	andeq	r5, r0, r8, lsr #4
   13e34:	andeq	r5, r0, ip, ror #18
   13e38:	strdeq	r5, [r0], -r0
   13e3c:	andeq	r0, r0, fp, lsl #5
   13e40:	andeq	r5, r0, r4, lsl #4
   13e44:	andeq	r5, r0, r8, asr #18
   13e48:	andeq	r5, r0, ip, asr #19

00013e4c <flatcc_builder_create_struct@@Base>:
   13e4c:	push	{r4, r5, r6, lr}
   13e50:	cmp	r3, #0
   13e54:	ldr	lr, [pc, #300]	; 13f88 <flatcc_builder_create_struct@@Base+0x13c>
   13e58:	sub	sp, sp, #80	; 0x50
   13e5c:	add	lr, pc, lr
   13e60:	beq	13f64 <flatcc_builder_create_struct@@Base+0x118>
   13e64:	mov	r5, r0
   13e68:	ldrh	r0, [r0, #128]	; 0x80
   13e6c:	ldr	ip, [r5, #136]	; 0x88
   13e70:	cmp	r0, r3
   13e74:	strhcc	r3, [r5, #128]	; 0x80
   13e78:	mov	r0, #0
   13e7c:	sub	r3, r3, #1
   13e80:	sub	r4, ip, r2
   13e84:	cmp	r2, #0
   13e88:	and	r3, r3, r4
   13e8c:	str	r0, [sp, #8]
   13e90:	str	r0, [sp, #12]
   13e94:	bne	13f14 <flatcc_builder_create_struct@@Base+0xc8>
   13e98:	cmp	r3, #0
   13e9c:	movne	r6, #1
   13ea0:	movne	r1, r2
   13ea4:	beq	13f3c <flatcc_builder_create_struct@@Base+0xf0>
   13ea8:	ldr	r0, [pc, #220]	; 13f8c <flatcc_builder_create_struct@@Base+0x140>
   13eac:	add	r1, r1, #1
   13eb0:	add	r2, r2, r3
   13eb4:	add	r4, sp, #80	; 0x50
   13eb8:	add	r1, r4, r1, lsl #3
   13ebc:	str	r2, [sp, #8]
   13ec0:	sub	r4, ip, r2
   13ec4:	ldr	r0, [lr, r0]
   13ec8:	str	r3, [r1, #-68]	; 0xffffffbc
   13ecc:	str	r0, [r1, #-72]	; 0xffffffb8
   13ed0:	str	r6, [sp, #12]
   13ed4:	cmp	ip, r4
   13ed8:	ble	13f3c <flatcc_builder_create_struct@@Base+0xf0>
   13edc:	ldr	r3, [sp, #12]
   13ee0:	ldr	r0, [r5, #36]	; 0x24
   13ee4:	add	r1, sp, #16
   13ee8:	str	r2, [sp]
   13eec:	mov	r2, r3
   13ef0:	ldr	r6, [r5, #44]	; 0x2c
   13ef4:	mov	r3, r4
   13ef8:	blx	r6
   13efc:	cmp	r0, #0
   13f00:	bne	13f40 <flatcc_builder_create_struct@@Base+0xf4>
   13f04:	mov	r0, r4
   13f08:	str	r4, [r5, #136]	; 0x88
   13f0c:	add	sp, sp, #80	; 0x50
   13f10:	pop	{r4, r5, r6, pc}
   13f14:	cmp	r3, r0
   13f18:	mov	r0, #1
   13f1c:	str	r1, [sp, #16]
   13f20:	str	r2, [sp, #8]
   13f24:	str	r2, [sp, #20]
   13f28:	str	r0, [sp, #12]
   13f2c:	movne	r1, r0
   13f30:	movne	r6, #2
   13f34:	beq	13ed4 <flatcc_builder_create_struct@@Base+0x88>
   13f38:	b	13ea8 <flatcc_builder_create_struct@@Base+0x5c>
   13f3c:	bl	123c0 <__assert_fail@plt+0x74>
   13f40:	ldr	r3, [pc, #72]	; 13f90 <flatcc_builder_create_struct@@Base+0x144>
   13f44:	ldr	r1, [pc, #72]	; 13f94 <flatcc_builder_create_struct@@Base+0x148>
   13f48:	ldr	r0, [pc, #72]	; 13f98 <flatcc_builder_create_struct@@Base+0x14c>
   13f4c:	add	r3, pc, r3
   13f50:	ldr	r2, [pc, #68]	; 13f9c <flatcc_builder_create_struct@@Base+0x150>
   13f54:	add	r3, r3, #28
   13f58:	add	r1, pc, r1
   13f5c:	add	r0, pc, r0
   13f60:	bl	1234c <__assert_fail@plt>
   13f64:	ldr	r3, [pc, #52]	; 13fa0 <flatcc_builder_create_struct@@Base+0x154>
   13f68:	ldr	r1, [pc, #52]	; 13fa4 <flatcc_builder_create_struct@@Base+0x158>
   13f6c:	ldr	r0, [pc, #52]	; 13fa8 <flatcc_builder_create_struct@@Base+0x15c>
   13f70:	add	r3, pc, r3
   13f74:	ldr	r2, [pc, #48]	; 13fac <flatcc_builder_create_struct@@Base+0x160>
   13f78:	add	r3, r3, #236	; 0xec
   13f7c:	add	r1, pc, r1
   13f80:	add	r0, pc, r0
   13f84:	bl	1234c <__assert_fail@plt>
   13f88:	muleq	r1, ip, r1
   13f8c:	andeq	r0, r0, r4, asr #32
   13f90:	andeq	r5, r0, r8, asr #1
   13f94:	andeq	r5, r0, ip, lsl #16
   13f98:	muleq	r0, r0, r8
   13f9c:	andeq	r0, r0, fp, lsl #5
   13fa0:	andeq	r5, r0, r4, lsr #1
   13fa4:	andeq	r5, r0, r8, ror #15
   13fa8:	ldrdeq	r5, [r0], -r0
   13fac:	andeq	r0, r0, pc, lsl #6

00013fb0 <flatcc_builder_start_buffer@@Base>:
   13fb0:	push	{r4, r5, r6, r7, r8, lr}
   13fb4:	mov	r5, r1
   13fb8:	ldrh	r1, [r0, #128]	; 0x80
   13fbc:	mov	r4, r0
   13fc0:	mov	r7, r2
   13fc4:	mov	r6, r3
   13fc8:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   13fcc:	ldr	r1, [pc, #140]	; 14060 <flatcc_builder_start_buffer@@Base+0xb0>
   13fd0:	add	r1, pc, r1
   13fd4:	cmp	r0, #0
   13fd8:	bne	14058 <flatcc_builder_start_buffer@@Base+0xa8>
   13fdc:	ldrh	r3, [r4, #132]	; 0x84
   13fe0:	ldr	ip, [r4, #32]
   13fe4:	mov	r2, #1
   13fe8:	strh	r2, [r4, #128]	; 0x80
   13fec:	strh	r3, [ip, #34]	; 0x22
   13ff0:	ldrh	r3, [r4, #164]	; 0xa4
   13ff4:	strh	r7, [r4, #132]	; 0x84
   13ff8:	cmp	r5, #0
   13ffc:	strh	r3, [ip, #32]
   14000:	ldr	r3, [r4, #144]	; 0x90
   14004:	strh	r6, [r4, #164]	; 0xa4
   14008:	str	r3, [ip, #20]
   1400c:	ldr	r3, [r4, #152]	; 0x98
   14010:	str	r3, [ip, #28]
   14014:	ldr	r3, [r4, #148]	; 0x94
   14018:	ldr	lr, [r4, #136]	; 0x88
   1401c:	ldr	r2, [r4, #168]	; 0xa8
   14020:	add	r6, r3, #1
   14024:	str	r3, [r4, #152]	; 0x98
   14028:	str	r6, [r4, #148]	; 0x94
   1402c:	str	lr, [r4, #144]	; 0x90
   14030:	str	r2, [ip, #16]
   14034:	beq	1404c <flatcc_builder_start_buffer@@Base+0x9c>
   14038:	ldr	r2, [r5]
   1403c:	mov	r3, #1
   14040:	str	r2, [r4, #168]	; 0xa8
   14044:	strh	r3, [ip, #14]
   14048:	pop	{r4, r5, r6, r7, r8, pc}
   1404c:	ldr	r3, [pc, #16]	; 14064 <flatcc_builder_start_buffer@@Base+0xb4>
   14050:	ldr	r5, [r1, r3]
   14054:	b	14038 <flatcc_builder_start_buffer@@Base+0x88>
   14058:	mvn	r0, #0
   1405c:	pop	{r4, r5, r6, r7, r8, pc}
   14060:	andeq	r7, r1, r8, lsr #32
   14064:	andeq	r0, r0, r4, asr #32

00014068 <flatcc_builder_end_buffer@@Base>:
   14068:	ldr	ip, [r0, #32]
   1406c:	ldrh	r2, [r0, #164]	; 0xa4
   14070:	push	{r4, r5, r6, lr}
   14074:	mov	r4, r0
   14078:	ldrh	ip, [ip, #14]
   1407c:	ldr	r0, [r0, #152]	; 0x98
   14080:	and	r2, r2, #2
   14084:	cmp	r0, #0
   14088:	moveq	r0, r2
   1408c:	orrne	r0, r2, #1
   14090:	cmp	ip, #1
   14094:	sub	sp, sp, #8
   14098:	bne	14178 <flatcc_builder_end_buffer@@Base+0x110>
   1409c:	ldrh	r2, [r4, #132]	; 0x84
   140a0:	ldrh	ip, [r4, #128]	; 0x80
   140a4:	mov	r3, r1
   140a8:	add	r1, r4, #168	; 0xa8
   140ac:	cmp	r2, ip
   140b0:	movhi	ip, r2
   140b4:	strhhi	r2, [r4, #128]	; 0x80
   140b8:	str	r0, [sp, #4]
   140bc:	str	ip, [sp]
   140c0:	mov	r0, r4
   140c4:	bl	13bec <flatcc_builder_create_buffer@@Base>
   140c8:	subs	r5, r0, #0
   140cc:	beq	1416c <flatcc_builder_end_buffer@@Base+0x104>
   140d0:	ldr	r3, [r4, #32]
   140d4:	ldr	r2, [r4, #20]
   140d8:	mov	r1, #0
   140dc:	ldr	ip, [r3, #20]
   140e0:	ldr	r0, [r4, #16]
   140e4:	str	ip, [r4, #144]	; 0x90
   140e8:	ldr	ip, [r3, #28]
   140ec:	str	ip, [r4, #152]	; 0x98
   140f0:	ldr	ip, [r3, #16]
   140f4:	str	ip, [r4, #168]	; 0xa8
   140f8:	ldrh	r3, [r3, #32]
   140fc:	strh	r3, [r4, #164]	; 0xa4
   14100:	bl	1231c <memset@plt>
   14104:	ldr	r3, [r4, #32]
   14108:	ldr	r2, [r4, #64]	; 0x40
   1410c:	ldrh	lr, [r4, #130]	; 0x82
   14110:	ldr	ip, [r3]
   14114:	ldr	r1, [r3, #4]
   14118:	ldrh	r0, [r4, #128]	; 0x80
   1411c:	sub	r2, r2, ip
   14120:	cmp	r2, r1
   14124:	movcs	r2, r1
   14128:	cmp	r0, lr
   1412c:	ldr	r0, [r4, #60]	; 0x3c
   14130:	ldr	r6, [r3, #8]
   14134:	str	r2, [r4, #24]
   14138:	add	r2, r0, ip
   1413c:	str	r2, [r4, #16]
   14140:	str	r6, [r4, #20]
   14144:	ldr	r2, [r4, #156]	; 0x9c
   14148:	str	ip, [r4, #28]
   1414c:	str	r1, [r3, #4]
   14150:	strhcc	lr, [r4, #128]	; 0x80
   14154:	ldrh	r1, [r3, #12]
   14158:	sub	r2, r2, #1
   1415c:	sub	r3, r3, #36	; 0x24
   14160:	str	r2, [r4, #156]	; 0x9c
   14164:	strh	r1, [r4, #130]	; 0x82
   14168:	str	r3, [r4, #32]
   1416c:	mov	r0, r5
   14170:	add	sp, sp, #8
   14174:	pop	{r4, r5, r6, pc}
   14178:	ldr	r3, [pc, #28]	; 1419c <flatcc_builder_end_buffer@@Base+0x134>
   1417c:	ldr	r1, [pc, #28]	; 141a0 <flatcc_builder_end_buffer@@Base+0x138>
   14180:	ldr	r0, [pc, #28]	; 141a4 <flatcc_builder_end_buffer@@Base+0x13c>
   14184:	add	r3, pc, r3
   14188:	ldr	r2, [pc, #24]	; 141a8 <flatcc_builder_end_buffer@@Base+0x140>
   1418c:	add	r3, r3, #268	; 0x10c
   14190:	add	r1, pc, r1
   14194:	add	r0, pc, r0
   14198:	bl	1234c <__assert_fail@plt>
   1419c:	muleq	r0, r0, lr
   141a0:	ldrdeq	r5, [r0], -r4
   141a4:	andeq	r5, r0, r8, asr #13
   141a8:	andeq	r0, r0, r6, asr #6

000141ac <flatcc_builder_start_struct@@Base>:
   141ac:	push	{r4, r5, r6, lr}
   141b0:	mov	r5, r1
   141b4:	mov	r1, r2
   141b8:	mov	r4, r0
   141bc:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   141c0:	cmp	r0, #0
   141c4:	bne	14244 <flatcc_builder_start_struct@@Base+0x98>
   141c8:	ldr	r2, [r4, #28]
   141cc:	ldr	r3, [r4, #64]	; 0x40
   141d0:	ldr	r0, [r4, #60]	; 0x3c
   141d4:	ldr	ip, [r4, #32]
   141d8:	sub	r3, r3, r2
   141dc:	cmn	r3, #4
   141e0:	ldr	r6, [r4, #20]
   141e4:	add	r0, r0, r2
   141e8:	mov	r2, #2
   141ec:	strh	r2, [ip, #14]
   141f0:	mvnhi	r2, #3
   141f4:	movhi	r3, r2
   141f8:	add	r5, r5, r6
   141fc:	strhi	r2, [r4, #24]
   14200:	strls	r3, [r4, #24]
   14204:	mvn	r2, #3
   14208:	cmp	r5, r3
   1420c:	str	r0, [r4, #16]
   14210:	str	r2, [ip, #4]
   14214:	str	r5, [r4, #20]
   14218:	bcs	14224 <flatcc_builder_start_struct@@Base+0x78>
   1421c:	add	r0, r0, r6
   14220:	pop	{r4, r5, r6, pc}
   14224:	add	r1, r5, #1
   14228:	mov	r0, r4
   1422c:	bl	12fc0 <_start@@Base+0xa7c>
   14230:	cmp	r0, #0
   14234:	bne	14244 <flatcc_builder_start_struct@@Base+0x98>
   14238:	ldr	r0, [r4, #16]
   1423c:	add	r0, r0, r6
   14240:	pop	{r4, r5, r6, pc}
   14244:	mov	r0, #0
   14248:	pop	{r4, r5, r6, pc}

0001424c <flatcc_builder_struct_edit@@Base>:
   1424c:	ldr	r0, [r0, #16]
   14250:	bx	lr

00014254 <flatcc_builder_end_struct@@Base>:
   14254:	ldr	r3, [r0, #32]
   14258:	push	{r4, r5, r6, lr}
   1425c:	ldrh	r3, [r3, #14]
   14260:	cmp	r3, #2
   14264:	bne	14304 <flatcc_builder_end_struct@@Base+0xb0>
   14268:	ldrh	r3, [r0, #130]	; 0x82
   1426c:	ldr	r2, [r0, #20]
   14270:	ldr	r1, [r0, #16]
   14274:	mov	r4, r0
   14278:	bl	13e4c <flatcc_builder_create_struct@@Base>
   1427c:	subs	r5, r0, #0
   14280:	beq	142fc <flatcc_builder_end_struct@@Base+0xa8>
   14284:	ldr	r2, [r4, #20]
   14288:	mov	r1, #0
   1428c:	ldr	r0, [r4, #16]
   14290:	bl	1231c <memset@plt>
   14294:	ldr	r3, [r4, #32]
   14298:	ldr	r2, [r4, #64]	; 0x40
   1429c:	ldrh	lr, [r4, #130]	; 0x82
   142a0:	ldr	ip, [r3]
   142a4:	ldr	r1, [r3, #4]
   142a8:	ldrh	r0, [r4, #128]	; 0x80
   142ac:	sub	r2, r2, ip
   142b0:	cmp	r2, r1
   142b4:	movcs	r2, r1
   142b8:	cmp	r0, lr
   142bc:	ldr	r0, [r4, #60]	; 0x3c
   142c0:	ldr	r6, [r3, #8]
   142c4:	str	r2, [r4, #24]
   142c8:	add	r2, r0, ip
   142cc:	str	r2, [r4, #16]
   142d0:	str	r6, [r4, #20]
   142d4:	ldr	r2, [r4, #156]	; 0x9c
   142d8:	str	ip, [r4, #28]
   142dc:	str	r1, [r3, #4]
   142e0:	strhcc	lr, [r4, #128]	; 0x80
   142e4:	ldrh	r1, [r3, #12]
   142e8:	sub	r2, r2, #1
   142ec:	sub	r3, r3, #36	; 0x24
   142f0:	str	r2, [r4, #156]	; 0x9c
   142f4:	strh	r1, [r4, #130]	; 0x82
   142f8:	str	r3, [r4, #32]
   142fc:	mov	r0, r5
   14300:	pop	{r4, r5, r6, pc}
   14304:	ldr	r3, [pc, #28]	; 14328 <flatcc_builder_end_struct@@Base+0xd4>
   14308:	ldr	r1, [pc, #28]	; 1432c <flatcc_builder_end_struct@@Base+0xd8>
   1430c:	ldr	r0, [pc, #28]	; 14330 <flatcc_builder_end_struct@@Base+0xdc>
   14310:	add	r3, pc, r3
   14314:	mov	r2, #872	; 0x368
   14318:	add	r3, r3, #296	; 0x128
   1431c:	add	r1, pc, r1
   14320:	add	r0, pc, r0
   14324:	bl	1234c <__assert_fail@plt>
   14328:	andeq	r4, r0, r4, lsl #26
   1432c:	andeq	r5, r0, r8, asr #8
   14330:	andeq	r5, r0, r8, ror #10

00014334 <flatcc_builder_extend_vector@@Base>:
   14334:	ldr	r2, [r0, #32]
   14338:	push	{r4, r5, r6, lr}
   1433c:	ldr	r3, [r2, #20]
   14340:	ldr	r4, [r2, #24]
   14344:	add	ip, r1, r3
   14348:	cmp	r3, ip
   1434c:	movls	r3, #0
   14350:	movhi	r3, #1
   14354:	cmp	r4, ip
   14358:	movcs	r4, r3
   1435c:	orrcc	r4, r3, #1
   14360:	cmp	r4, #0
   14364:	bne	143b4 <flatcc_builder_extend_vector@@Base+0x80>
   14368:	ldr	lr, [r2, #16]
   1436c:	str	ip, [r2, #20]
   14370:	ldr	r6, [r0, #20]
   14374:	ldr	r3, [r0, #24]
   14378:	mla	r1, lr, r1, r6
   1437c:	mov	r5, r0
   14380:	cmp	r1, r3
   14384:	str	r1, [r0, #20]
   14388:	bcs	14398 <flatcc_builder_extend_vector@@Base+0x64>
   1438c:	ldr	r0, [r5, #16]
   14390:	add	r0, r0, r6
   14394:	pop	{r4, r5, r6, pc}
   14398:	add	r1, r1, #1
   1439c:	mvn	r2, #3
   143a0:	bl	12fc0 <_start@@Base+0xa7c>
   143a4:	cmp	r0, #0
   143a8:	beq	1438c <flatcc_builder_extend_vector@@Base+0x58>
   143ac:	mov	r0, r4
   143b0:	pop	{r4, r5, r6, pc}
   143b4:	bl	123f8 <__assert_fail@plt+0xac>

000143b8 <flatcc_builder_vector_push@@Base>:
   143b8:	ldr	r3, [r0, #32]
   143bc:	push	{r4, r5, r6, r7, r8, lr}
   143c0:	ldrh	r2, [r3, #14]
   143c4:	cmp	r2, #4
   143c8:	bne	14470 <flatcc_builder_vector_push@@Base+0xb8>
   143cc:	mov	r6, r1
   143d0:	ldr	r2, [r3, #20]
   143d4:	ldr	r1, [r3, #24]
   143d8:	cmp	r2, r1
   143dc:	bhi	1444c <flatcc_builder_vector_push@@Base+0x94>
   143e0:	add	r2, r2, #1
   143e4:	str	r2, [r3, #20]
   143e8:	ldr	r7, [r3, #16]
   143ec:	ldr	r5, [r0, #20]
   143f0:	ldr	r3, [r0, #24]
   143f4:	add	r1, r7, r5
   143f8:	cmp	r1, r3
   143fc:	mov	r4, r0
   14400:	str	r1, [r0, #20]
   14404:	bcs	14430 <flatcc_builder_vector_push@@Base+0x78>
   14408:	ldr	r3, [r4, #16]
   1440c:	adds	r3, r3, r5
   14410:	beq	14428 <flatcc_builder_vector_push@@Base+0x70>
   14414:	mov	r0, r3
   14418:	mov	r2, r7
   1441c:	mov	r1, r6
   14420:	bl	122bc <memcpy@plt>
   14424:	mov	r3, r0
   14428:	mov	r0, r3
   1442c:	pop	{r4, r5, r6, r7, r8, pc}
   14430:	add	r1, r1, #1
   14434:	mvn	r2, #3
   14438:	bl	12fc0 <_start@@Base+0xa7c>
   1443c:	cmp	r0, #0
   14440:	beq	14408 <flatcc_builder_vector_push@@Base+0x50>
   14444:	mov	r3, #0
   14448:	b	14428 <flatcc_builder_vector_push@@Base+0x70>
   1444c:	ldr	r3, [pc, #64]	; 14494 <flatcc_builder_vector_push@@Base+0xdc>
   14450:	ldr	r1, [pc, #64]	; 14498 <flatcc_builder_vector_push@@Base+0xe0>
   14454:	ldr	r0, [pc, #64]	; 1449c <flatcc_builder_vector_push@@Base+0xe4>
   14458:	add	r3, pc, r3
   1445c:	mov	r2, #908	; 0x38c
   14460:	add	r3, r3, #324	; 0x144
   14464:	add	r1, pc, r1
   14468:	add	r0, pc, r0
   1446c:	bl	1234c <__assert_fail@plt>
   14470:	ldr	r3, [pc, #40]	; 144a0 <flatcc_builder_vector_push@@Base+0xe8>
   14474:	ldr	r1, [pc, #40]	; 144a4 <flatcc_builder_vector_push@@Base+0xec>
   14478:	ldr	r0, [pc, #40]	; 144a8 <flatcc_builder_vector_push@@Base+0xf0>
   1447c:	add	r3, pc, r3
   14480:	ldr	r2, [pc, #36]	; 144ac <flatcc_builder_vector_push@@Base+0xf4>
   14484:	add	r3, r3, #324	; 0x144
   14488:	add	r1, pc, r1
   1448c:	add	r0, pc, r0
   14490:	bl	1234c <__assert_fail@plt>
   14494:			; <UNDEFINED> instruction: 0x00004bbc
   14498:	andeq	r5, r0, r0, lsl #6
   1449c:	andeq	r5, r0, r8, ror r4
   144a0:	muleq	r0, r8, fp
   144a4:	ldrdeq	r5, [r0], -ip
   144a8:	andeq	r5, r0, r8, lsr #8
   144ac:	andeq	r0, r0, fp, lsl #7

000144b0 <flatcc_builder_append_vector@@Base>:
   144b0:	push	{r4, r5, r6, r7, r8, lr}
   144b4:	mov	r7, r1
   144b8:	ldr	r1, [r0, #32]
   144bc:	ldrh	r3, [r1, #14]
   144c0:	cmp	r3, #4
   144c4:	bne	14564 <flatcc_builder_append_vector@@Base+0xb4>
   144c8:	ldr	r3, [r1, #20]
   144cc:	ldr	r4, [r1, #24]
   144d0:	add	ip, r2, r3
   144d4:	cmp	r3, ip
   144d8:	movls	r3, #0
   144dc:	movhi	r3, #1
   144e0:	cmp	r4, ip
   144e4:	movcs	r4, r3
   144e8:	orrcc	r4, r3, #1
   144ec:	cmp	r4, #0
   144f0:	bne	14560 <flatcc_builder_append_vector@@Base+0xb0>
   144f4:	ldr	r6, [r1, #16]
   144f8:	str	ip, [r1, #20]
   144fc:	ldr	r8, [r0, #20]
   14500:	mul	r6, r6, r2
   14504:	ldr	r3, [r0, #24]
   14508:	add	r1, r6, r8
   1450c:	cmp	r1, r3
   14510:	mov	r5, r0
   14514:	str	r1, [r0, #20]
   14518:	bcs	14544 <flatcc_builder_append_vector@@Base+0x94>
   1451c:	ldr	r3, [r5, #16]
   14520:	adds	r3, r3, r8
   14524:	beq	1453c <flatcc_builder_append_vector@@Base+0x8c>
   14528:	mov	r0, r3
   1452c:	mov	r2, r6
   14530:	mov	r1, r7
   14534:	bl	122bc <memcpy@plt>
   14538:	mov	r3, r0
   1453c:	mov	r0, r3
   14540:	pop	{r4, r5, r6, r7, r8, pc}
   14544:	add	r1, r1, #1
   14548:	mvn	r2, #3
   1454c:	bl	12fc0 <_start@@Base+0xa7c>
   14550:	cmp	r0, #0
   14554:	beq	1451c <flatcc_builder_append_vector@@Base+0x6c>
   14558:	mov	r3, r4
   1455c:	b	1453c <flatcc_builder_append_vector@@Base+0x8c>
   14560:	bl	123f8 <__assert_fail@plt+0xac>
   14564:	ldr	r3, [pc, #28]	; 14588 <flatcc_builder_append_vector@@Base+0xd8>
   14568:	ldr	r1, [pc, #28]	; 1458c <flatcc_builder_append_vector@@Base+0xdc>
   1456c:	ldr	r0, [pc, #28]	; 14590 <flatcc_builder_append_vector@@Base+0xe0>
   14570:	add	r3, pc, r3
   14574:	ldr	r2, [pc, #24]	; 14594 <flatcc_builder_append_vector@@Base+0xe4>
   14578:	add	r3, r3, #352	; 0x160
   1457c:	add	r1, pc, r1
   14580:	add	r0, pc, r0
   14584:	bl	1234c <__assert_fail@plt>
   14588:	andeq	r4, r0, r4, lsr #21
   1458c:	andeq	r5, r0, r8, ror #3
   14590:	andeq	r5, r0, r4, lsr r3
   14594:	muleq	r0, r3, r3

00014598 <flatcc_builder_extend_offset_vector@@Base>:
   14598:	ldr	ip, [r0, #32]
   1459c:	push	{r4, r5, r6, lr}
   145a0:	ldr	r3, [ip, #20]
   145a4:	adds	r2, r1, r3
   145a8:	movcs	r3, #1
   145ac:	movcc	r3, #0
   145b0:	cmn	r2, #-1073741823	; 0xc0000001
   145b4:	movls	r4, #0
   145b8:	movhi	r4, #1
   145bc:	orrs	r4, r3, r4
   145c0:	bne	1460c <flatcc_builder_extend_offset_vector@@Base+0x74>
   145c4:	str	r2, [ip, #20]
   145c8:	ldr	r6, [r0, #20]
   145cc:	ldr	r3, [r0, #24]
   145d0:	add	r1, r6, r1, lsl #2
   145d4:	cmp	r1, r3
   145d8:	mov	r5, r0
   145dc:	str	r1, [r0, #20]
   145e0:	bcs	145f0 <flatcc_builder_extend_offset_vector@@Base+0x58>
   145e4:	ldr	r0, [r5, #16]
   145e8:	add	r0, r0, r6
   145ec:	pop	{r4, r5, r6, pc}
   145f0:	add	r1, r1, #1
   145f4:	mvn	r2, #3
   145f8:	bl	12fc0 <_start@@Base+0xa7c>
   145fc:	cmp	r0, #0
   14600:	beq	145e4 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   14604:	mov	r0, r4
   14608:	pop	{r4, r5, r6, pc}
   1460c:	bl	123f8 <__assert_fail@plt+0xac>

00014610 <flatcc_builder_offset_vector_push@@Base>:
   14610:	ldr	r2, [r0, #32]
   14614:	push	{r4, r5, r6, lr}
   14618:	ldrh	r3, [r2, #14]
   1461c:	cmp	r3, #5
   14620:	bne	14688 <flatcc_builder_offset_vector_push@@Base+0x78>
   14624:	ldr	r3, [r2, #20]
   14628:	cmn	r3, #-1073741823	; 0xc0000001
   1462c:	beq	14680 <flatcc_builder_offset_vector_push@@Base+0x70>
   14630:	add	r3, r3, #1
   14634:	str	r3, [r2, #20]
   14638:	ldr	r5, [r0, #20]
   1463c:	ldr	r2, [r0, #24]
   14640:	add	r3, r5, #4
   14644:	cmp	r3, r2
   14648:	mov	r4, r0
   1464c:	mov	r6, r1
   14650:	str	r3, [r0, #20]
   14654:	bcs	1466c <flatcc_builder_offset_vector_push@@Base+0x5c>
   14658:	ldr	r3, [r4, #16]
   1465c:	adds	r0, r3, r5
   14660:	beq	146ac <flatcc_builder_offset_vector_push@@Base+0x9c>
   14664:	str	r6, [r3, r5]
   14668:	pop	{r4, r5, r6, pc}
   1466c:	mvn	r2, #3
   14670:	add	r1, r5, #5
   14674:	bl	12fc0 <_start@@Base+0xa7c>
   14678:	cmp	r0, #0
   1467c:	beq	14658 <flatcc_builder_offset_vector_push@@Base+0x48>
   14680:	mov	r0, #0
   14684:	pop	{r4, r5, r6, pc}
   14688:	ldr	r3, [pc, #32]	; 146b0 <flatcc_builder_offset_vector_push@@Base+0xa0>
   1468c:	ldr	r1, [pc, #32]	; 146b4 <flatcc_builder_offset_vector_push@@Base+0xa4>
   14690:	ldr	r0, [pc, #32]	; 146b8 <flatcc_builder_offset_vector_push@@Base+0xa8>
   14694:	add	r3, pc, r3
   14698:	ldr	r2, [pc, #28]	; 146bc <flatcc_builder_offset_vector_push@@Base+0xac>
   1469c:	add	r3, r3, #384	; 0x180
   146a0:	add	r1, pc, r1
   146a4:	add	r0, pc, r0
   146a8:	bl	1234c <__assert_fail@plt>
   146ac:	pop	{r4, r5, r6, pc}
   146b0:	andeq	r4, r0, r0, lsl #19
   146b4:	andeq	r5, r0, r4, asr #1
   146b8:	andeq	r5, r0, ip, ror r2
   146bc:	andeq	r0, r0, r6, lsr #7

000146c0 <flatcc_builder_append_offset_vector@@Base>:
   146c0:	ldr	ip, [r0, #32]
   146c4:	push	{r4, r5, r6, r7, r8, lr}
   146c8:	ldrh	r3, [ip, #14]
   146cc:	cmp	r3, #5
   146d0:	bne	14768 <flatcc_builder_append_offset_vector@@Base+0xa8>
   146d4:	mov	r6, r1
   146d8:	ldr	r1, [ip, #20]
   146dc:	adds	r1, r2, r1
   146e0:	movcs	lr, #1
   146e4:	movcc	lr, #0
   146e8:	cmn	r1, #-1073741823	; 0xc0000001
   146ec:	movls	r3, #0
   146f0:	movhi	r3, #1
   146f4:	orrs	r8, lr, r3
   146f8:	bne	14764 <flatcc_builder_append_offset_vector@@Base+0xa4>
   146fc:	str	r1, [ip, #20]
   14700:	ldr	r7, [r0, #20]
   14704:	lsl	r4, r2, #2
   14708:	ldr	r3, [r0, #24]
   1470c:	add	r1, r4, r7
   14710:	cmp	r1, r3
   14714:	mov	r5, r0
   14718:	str	r1, [r0, #20]
   1471c:	bcs	14748 <flatcc_builder_append_offset_vector@@Base+0x88>
   14720:	ldr	r3, [r5, #16]
   14724:	adds	r3, r3, r7
   14728:	beq	14740 <flatcc_builder_append_offset_vector@@Base+0x80>
   1472c:	mov	r0, r3
   14730:	mov	r2, r4
   14734:	mov	r1, r6
   14738:	bl	122bc <memcpy@plt>
   1473c:	mov	r3, r0
   14740:	mov	r0, r3
   14744:	pop	{r4, r5, r6, r7, r8, pc}
   14748:	add	r1, r1, #1
   1474c:	mvn	r2, #3
   14750:	bl	12fc0 <_start@@Base+0xa7c>
   14754:	cmp	r0, #0
   14758:	beq	14720 <flatcc_builder_append_offset_vector@@Base+0x60>
   1475c:	mov	r3, r8
   14760:	b	14740 <flatcc_builder_append_offset_vector@@Base+0x80>
   14764:	bl	123f8 <__assert_fail@plt+0xac>
   14768:	ldr	r3, [pc, #28]	; 1478c <flatcc_builder_append_offset_vector@@Base+0xcc>
   1476c:	ldr	r1, [pc, #28]	; 14790 <flatcc_builder_append_offset_vector@@Base+0xd0>
   14770:	ldr	r0, [pc, #28]	; 14794 <flatcc_builder_append_offset_vector@@Base+0xd4>
   14774:	add	r3, pc, r3
   14778:	mov	r2, #948	; 0x3b4
   1477c:	add	r3, r3, #420	; 0x1a4
   14780:	add	r1, pc, r1
   14784:	add	r0, pc, r0
   14788:	bl	1234c <__assert_fail@plt>
   1478c:	andeq	r4, r0, r0, lsr #17
   14790:	andeq	r4, r0, r4, ror #31
   14794:	muleq	r0, ip, r1

00014798 <flatcc_builder_extend_string@@Base>:
   14798:	ldr	r2, [r0, #32]
   1479c:	push	{r4, r5, r6, lr}
   147a0:	ldrh	r3, [r2, #14]
   147a4:	cmp	r3, #6
   147a8:	bne	14804 <flatcc_builder_extend_string@@Base+0x6c>
   147ac:	ldr	r3, [r2, #20]
   147b0:	adds	r3, r1, r3
   147b4:	bcs	14800 <flatcc_builder_extend_string@@Base+0x68>
   147b8:	str	r3, [r2, #20]
   147bc:	ldr	r5, [r0, #20]
   147c0:	ldr	r3, [r0, #24]
   147c4:	add	r1, r1, r5
   147c8:	cmp	r1, r3
   147cc:	mov	r4, r0
   147d0:	str	r1, [r0, #20]
   147d4:	bcs	147e4 <flatcc_builder_extend_string@@Base+0x4c>
   147d8:	ldr	r0, [r4, #16]
   147dc:	add	r0, r0, r5
   147e0:	pop	{r4, r5, r6, pc}
   147e4:	add	r1, r1, #1
   147e8:	mvn	r2, #3
   147ec:	bl	12fc0 <_start@@Base+0xa7c>
   147f0:	cmp	r0, #0
   147f4:	beq	147d8 <flatcc_builder_extend_string@@Base+0x40>
   147f8:	mov	r0, #0
   147fc:	pop	{r4, r5, r6, pc}
   14800:	bl	123f8 <__assert_fail@plt+0xac>
   14804:	ldr	r3, [pc, #28]	; 14828 <flatcc_builder_extend_string@@Base+0x90>
   14808:	ldr	r1, [pc, #28]	; 1482c <flatcc_builder_extend_string@@Base+0x94>
   1480c:	ldr	r0, [pc, #28]	; 14830 <flatcc_builder_extend_string@@Base+0x98>
   14810:	add	r3, pc, r3
   14814:	ldr	r2, [pc, #24]	; 14834 <flatcc_builder_extend_string@@Base+0x9c>
   14818:	add	r3, r3, #456	; 0x1c8
   1481c:	add	r1, pc, r1
   14820:	add	r0, pc, r0
   14824:	bl	1234c <__assert_fail@plt>
   14828:	andeq	r4, r0, r4, lsl #16
   1482c:	andeq	r4, r0, r8, asr #30
   14830:	andeq	r5, r0, r4, lsr r1
   14834:			; <UNDEFINED> instruction: 0x000003bd

00014838 <flatcc_builder_append_string@@Base>:
   14838:	push	{r4, r5, r6, r7, r8, lr}
   1483c:	mov	r7, r1
   14840:	ldr	r1, [r0, #32]
   14844:	ldrh	r3, [r1, #14]
   14848:	cmp	r3, #6
   1484c:	bne	148c8 <flatcc_builder_append_string@@Base+0x90>
   14850:	ldr	r3, [r1, #20]
   14854:	mov	r5, r2
   14858:	adds	r3, r2, r3
   1485c:	bcs	148c4 <flatcc_builder_append_string@@Base+0x8c>
   14860:	str	r3, [r1, #20]
   14864:	ldr	r6, [r0, #20]
   14868:	ldr	r3, [r0, #24]
   1486c:	add	r1, r2, r6
   14870:	cmp	r1, r3
   14874:	mov	r4, r0
   14878:	str	r1, [r0, #20]
   1487c:	bcs	148a8 <flatcc_builder_append_string@@Base+0x70>
   14880:	ldr	r3, [r4, #16]
   14884:	adds	r3, r3, r6
   14888:	beq	148a0 <flatcc_builder_append_string@@Base+0x68>
   1488c:	mov	r0, r3
   14890:	mov	r2, r5
   14894:	mov	r1, r7
   14898:	bl	122bc <memcpy@plt>
   1489c:	mov	r3, r0
   148a0:	mov	r0, r3
   148a4:	pop	{r4, r5, r6, r7, r8, pc}
   148a8:	add	r1, r1, #1
   148ac:	mvn	r2, #3
   148b0:	bl	12fc0 <_start@@Base+0xa7c>
   148b4:	cmp	r0, #0
   148b8:	beq	14880 <flatcc_builder_append_string@@Base+0x48>
   148bc:	mov	r3, #0
   148c0:	b	148a0 <flatcc_builder_append_string@@Base+0x68>
   148c4:	bl	123f8 <__assert_fail@plt+0xac>
   148c8:	ldr	r3, [pc, #28]	; 148ec <flatcc_builder_append_string@@Base+0xb4>
   148cc:	ldr	r1, [pc, #28]	; 148f0 <flatcc_builder_append_string@@Base+0xb8>
   148d0:	ldr	r0, [pc, #28]	; 148f4 <flatcc_builder_append_string@@Base+0xbc>
   148d4:	add	r3, pc, r3
   148d8:	ldr	r2, [pc, #24]	; 148f8 <flatcc_builder_append_string@@Base+0xc0>
   148dc:	add	r3, r3, #488	; 0x1e8
   148e0:	add	r1, pc, r1
   148e4:	add	r0, pc, r0
   148e8:	bl	1234c <__assert_fail@plt>
   148ec:	andeq	r4, r0, r0, asr #14
   148f0:	andeq	r4, r0, r4, lsl #29
   148f4:	andeq	r5, r0, r0, ror r0
   148f8:	andeq	r0, r0, r6, asr #7

000148fc <flatcc_builder_append_string_str@@Base>:
   148fc:	push	{r4, r5, r6, lr}
   14900:	mov	r5, r0
   14904:	mov	r0, r1
   14908:	mov	r4, r1
   1490c:	bl	12304 <strlen@plt>
   14910:	mov	r1, r4
   14914:	mov	r2, r0
   14918:	mov	r0, r5
   1491c:	pop	{r4, r5, r6, lr}
   14920:	b	14838 <flatcc_builder_append_string@@Base>

00014924 <flatcc_builder_append_string_strn@@Base>:
   14924:	push	{r4, r5, r6, lr}
   14928:	mov	r4, r1
   1492c:	mov	r6, r0
   14930:	mov	r1, #0
   14934:	mov	r0, r4
   14938:	mov	r5, r2
   1493c:	bl	12334 <memchr@plt>
   14940:	mov	r1, r4
   14944:	cmp	r0, #0
   14948:	subne	r5, r0, r4
   1494c:	mov	r2, r5
   14950:	mov	r0, r6
   14954:	pop	{r4, r5, r6, lr}
   14958:	b	14838 <flatcc_builder_append_string@@Base>

0001495c <flatcc_builder_truncate_vector@@Base>:
   1495c:	ldr	r3, [r0, #32]
   14960:	push	{r4, lr}
   14964:	ldrh	r2, [r3, #14]
   14968:	cmp	r2, #4
   1496c:	bne	149b0 <flatcc_builder_truncate_vector@@Base+0x54>
   14970:	ldr	ip, [r3, #20]
   14974:	cmp	ip, r1
   14978:	bcc	149d4 <flatcc_builder_truncate_vector@@Base+0x78>
   1497c:	ldr	r2, [r3, #16]
   14980:	sub	ip, ip, r1
   14984:	str	ip, [r3, #20]
   14988:	mul	r2, r2, r1
   1498c:	ldr	r3, [r0, #20]
   14990:	ldr	r1, [r0, #16]
   14994:	sub	r3, r3, r2
   14998:	str	r3, [r0, #20]
   1499c:	add	r0, r1, r3
   149a0:	mov	r1, #0
   149a4:	bl	1231c <memset@plt>
   149a8:	mov	r0, #0
   149ac:	pop	{r4, pc}
   149b0:	ldr	r3, [pc, #64]	; 149f8 <flatcc_builder_truncate_vector@@Base+0x9c>
   149b4:	ldr	r1, [pc, #64]	; 149fc <flatcc_builder_truncate_vector@@Base+0xa0>
   149b8:	ldr	r0, [pc, #64]	; 14a00 <flatcc_builder_truncate_vector@@Base+0xa4>
   149bc:	add	r3, pc, r3
   149c0:	ldr	r2, [pc, #60]	; 14a04 <flatcc_builder_truncate_vector@@Base+0xa8>
   149c4:	add	r3, r3, #520	; 0x208
   149c8:	add	r1, pc, r1
   149cc:	add	r0, pc, r0
   149d0:	bl	1234c <__assert_fail@plt>
   149d4:	ldr	r3, [pc, #44]	; 14a08 <flatcc_builder_truncate_vector@@Base+0xac>
   149d8:	ldr	r1, [pc, #44]	; 14a0c <flatcc_builder_truncate_vector@@Base+0xb0>
   149dc:	ldr	r0, [pc, #44]	; 14a10 <flatcc_builder_truncate_vector@@Base+0xb4>
   149e0:	add	r3, pc, r3
   149e4:	ldr	r2, [pc, #40]	; 14a14 <flatcc_builder_truncate_vector@@Base+0xb8>
   149e8:	add	r3, r3, #520	; 0x208
   149ec:	add	r1, pc, r1
   149f0:	add	r0, pc, r0
   149f4:	bl	1234c <__assert_fail@plt>
   149f8:	andeq	r4, r0, r8, asr r6
   149fc:	muleq	r0, ip, sp
   14a00:	andeq	r4, r0, r8, ror #29
   14a04:	ldrdeq	r0, [r0], -r9
   14a08:	andeq	r4, r0, r4, lsr r6
   14a0c:	andeq	r4, r0, r8, ror sp
   14a10:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   14a14:	ldrdeq	r0, [r0], -sl

00014a18 <flatcc_builder_truncate_offset_vector@@Base>:
   14a18:	ldr	r3, [r0, #32]
   14a1c:	push	{r4, lr}
   14a20:	ldrh	r2, [r3, #14]
   14a24:	cmp	r2, #5
   14a28:	bne	14a6c <flatcc_builder_truncate_offset_vector@@Base+0x54>
   14a2c:	ldr	ip, [r3, #20]
   14a30:	cmp	ip, r1
   14a34:	bcc	14a90 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   14a38:	ldr	r2, [r3, #16]
   14a3c:	sub	ip, ip, r1
   14a40:	str	ip, [r3, #20]
   14a44:	mul	r2, r2, r1
   14a48:	ldr	r3, [r0, #20]
   14a4c:	ldr	r1, [r0, #16]
   14a50:	sub	r3, r3, r2
   14a54:	str	r3, [r0, #20]
   14a58:	add	r0, r1, r3
   14a5c:	mov	r1, #0
   14a60:	bl	1231c <memset@plt>
   14a64:	mov	r0, #0
   14a68:	pop	{r4, pc}
   14a6c:	ldr	r3, [pc, #64]	; 14ab4 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   14a70:	ldr	r1, [pc, #64]	; 14ab8 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   14a74:	ldr	r0, [pc, #64]	; 14abc <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   14a78:	add	r3, pc, r3
   14a7c:	ldr	r2, [pc, #60]	; 14ac0 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   14a80:	add	r3, r3, #552	; 0x228
   14a84:	add	r1, pc, r1
   14a88:	add	r0, pc, r0
   14a8c:	bl	1234c <__assert_fail@plt>
   14a90:	ldr	r3, [pc, #44]	; 14ac4 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   14a94:	ldr	r1, [pc, #44]	; 14ac8 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   14a98:	ldr	r0, [pc, #44]	; 14acc <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   14a9c:	add	r3, pc, r3
   14aa0:	ldr	r2, [pc, #40]	; 14ad0 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   14aa4:	add	r3, r3, #552	; 0x228
   14aa8:	add	r1, pc, r1
   14aac:	add	r0, pc, r0
   14ab0:	bl	1234c <__assert_fail@plt>
   14ab4:	muleq	r0, ip, r5
   14ab8:	andeq	r4, r0, r0, ror #25
   14abc:	muleq	r0, r8, lr
   14ac0:	andeq	r0, r0, r2, ror #7
   14ac4:	andeq	r4, r0, r8, ror r5
   14ac8:			; <UNDEFINED> instruction: 0x00004cbc
   14acc:	strdeq	r4, [r0], -r8
   14ad0:	andeq	r0, r0, r3, ror #7

00014ad4 <flatcc_builder_truncate_string@@Base>:
   14ad4:	ldr	r2, [r0, #32]
   14ad8:	push	{r4, lr}
   14adc:	ldrh	r3, [r2, #14]
   14ae0:	cmp	r3, #6
   14ae4:	bne	14b24 <flatcc_builder_truncate_string@@Base+0x50>
   14ae8:	ldr	r3, [r2, #20]
   14aec:	cmp	r3, r1
   14af0:	bcc	14b48 <flatcc_builder_truncate_string@@Base+0x74>
   14af4:	sub	r3, r3, r1
   14af8:	str	r3, [r2, #20]
   14afc:	ldr	r3, [r0, #20]
   14b00:	ldr	r2, [r0, #16]
   14b04:	sub	r3, r3, r1
   14b08:	str	r3, [r0, #20]
   14b0c:	add	r0, r2, r3
   14b10:	mov	r2, r1
   14b14:	mov	r1, #0
   14b18:	bl	1231c <memset@plt>
   14b1c:	mov	r0, #0
   14b20:	pop	{r4, pc}
   14b24:	ldr	r3, [pc, #64]	; 14b6c <flatcc_builder_truncate_string@@Base+0x98>
   14b28:	ldr	r1, [pc, #64]	; 14b70 <flatcc_builder_truncate_string@@Base+0x9c>
   14b2c:	ldr	r0, [pc, #64]	; 14b74 <flatcc_builder_truncate_string@@Base+0xa0>
   14b30:	add	r3, pc, r3
   14b34:	ldr	r2, [pc, #60]	; 14b78 <flatcc_builder_truncate_string@@Base+0xa4>
   14b38:	add	r3, r3, #592	; 0x250
   14b3c:	add	r1, pc, r1
   14b40:	add	r0, pc, r0
   14b44:	bl	1234c <__assert_fail@plt>
   14b48:	ldr	r3, [pc, #44]	; 14b7c <flatcc_builder_truncate_string@@Base+0xa8>
   14b4c:	ldr	r1, [pc, #44]	; 14b80 <flatcc_builder_truncate_string@@Base+0xac>
   14b50:	ldr	r0, [pc, #44]	; 14b84 <flatcc_builder_truncate_string@@Base+0xb0>
   14b54:	add	r3, pc, r3
   14b58:	mov	r2, #1004	; 0x3ec
   14b5c:	add	r3, r3, #592	; 0x250
   14b60:	add	r1, pc, r1
   14b64:	add	r0, pc, r0
   14b68:	bl	1234c <__assert_fail@plt>
   14b6c:	andeq	r4, r0, r4, ror #9
   14b70:	andeq	r4, r0, r8, lsr #24
   14b74:	andeq	r4, r0, r4, lsl lr
   14b78:	andeq	r0, r0, fp, ror #7
   14b7c:	andeq	r4, r0, r0, asr #9
   14b80:	andeq	r4, r0, r4, lsl #24
   14b84:	andeq	r4, r0, ip, ror lr

00014b88 <flatcc_builder_start_vector@@Base>:
   14b88:	cmp	r2, #4
   14b8c:	push	{r4, r5, r6, lr}
   14b90:	mov	r6, r1
   14b94:	movcs	r1, r2
   14b98:	movcc	r1, #4
   14b9c:	mov	r5, r3
   14ba0:	mov	r4, r0
   14ba4:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   14ba8:	cmp	r0, #0
   14bac:	bne	14bf8 <flatcc_builder_start_vector@@Base+0x70>
   14bb0:	ldr	r2, [r4, #32]
   14bb4:	mov	lr, #4
   14bb8:	str	r6, [r2, #16]
   14bbc:	str	r0, [r2, #20]
   14bc0:	str	r5, [r2, #24]
   14bc4:	ldr	ip, [r4, #28]
   14bc8:	ldr	r3, [r4, #64]	; 0x40
   14bcc:	ldr	r1, [r4, #60]	; 0x3c
   14bd0:	sub	r3, r3, ip
   14bd4:	cmn	r3, #4
   14bd8:	mvnhi	r3, #3
   14bdc:	strh	lr, [r2, #14]
   14be0:	add	r1, r1, ip
   14be4:	str	r3, [r4, #24]
   14be8:	mvn	r3, #3
   14bec:	str	r1, [r4, #16]
   14bf0:	str	r3, [r2, #4]
   14bf4:	pop	{r4, r5, r6, pc}
   14bf8:	mvn	r0, #0
   14bfc:	pop	{r4, r5, r6, pc}

00014c00 <flatcc_builder_start_offset_vector@@Base>:
   14c00:	push	{r4, lr}
   14c04:	mov	r1, #4
   14c08:	mov	r4, r0
   14c0c:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   14c10:	cmp	r0, #0
   14c14:	bne	14c60 <flatcc_builder_start_offset_vector@@Base+0x60>
   14c18:	ldr	r3, [r4, #32]
   14c1c:	mov	r2, #4
   14c20:	mov	lr, #5
   14c24:	str	r0, [r3, #20]
   14c28:	str	r2, [r3, #16]
   14c2c:	ldr	ip, [r4, #28]
   14c30:	ldr	r2, [r4, #64]	; 0x40
   14c34:	ldr	r1, [r4, #60]	; 0x3c
   14c38:	sub	r2, r2, ip
   14c3c:	cmn	r2, #4
   14c40:	mvnhi	r2, #3
   14c44:	strh	lr, [r3, #14]
   14c48:	add	r1, r1, ip
   14c4c:	str	r2, [r4, #24]
   14c50:	mvn	r2, #3
   14c54:	str	r1, [r4, #16]
   14c58:	str	r2, [r3, #4]
   14c5c:	pop	{r4, pc}
   14c60:	mvn	r0, #0
   14c64:	pop	{r4, pc}

00014c68 <flatcc_builder_start_string@@Base>:
   14c68:	push	{r4, lr}
   14c6c:	mov	r1, #1
   14c70:	mov	r4, r0
   14c74:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   14c78:	cmp	r0, #0
   14c7c:	bne	14cc8 <flatcc_builder_start_string@@Base+0x60>
   14c80:	ldr	r3, [r4, #32]
   14c84:	mov	r2, #1
   14c88:	mov	lr, #6
   14c8c:	str	r0, [r3, #20]
   14c90:	str	r2, [r3, #16]
   14c94:	ldr	ip, [r4, #28]
   14c98:	ldr	r2, [r4, #64]	; 0x40
   14c9c:	ldr	r1, [r4, #60]	; 0x3c
   14ca0:	sub	r2, r2, ip
   14ca4:	cmn	r2, #4
   14ca8:	mvnhi	r2, #3
   14cac:	strh	lr, [r3, #14]
   14cb0:	add	r1, r1, ip
   14cb4:	str	r2, [r4, #24]
   14cb8:	mvn	r2, #3
   14cbc:	str	r1, [r4, #16]
   14cc0:	str	r2, [r3, #4]
   14cc4:	pop	{r4, pc}
   14cc8:	mvn	r0, #0
   14ccc:	pop	{r4, pc}

00014cd0 <flatcc_builder_reserve_table@@Base>:
   14cd0:	cmp	r1, #0
   14cd4:	push	{r4, r5, r6, r7, lr}
   14cd8:	sub	sp, sp, #12
   14cdc:	blt	14db4 <flatcc_builder_reserve_table@@Base+0xe4>
   14ce0:	ldr	r2, [r0, #32]
   14ce4:	add	r1, r1, #2
   14ce8:	mov	r5, r0
   14cec:	ldrh	r6, [r2, #28]
   14cf0:	ldr	r3, [r2, #16]
   14cf4:	ldr	r0, [r0, #56]	; 0x38
   14cf8:	lsl	r4, r1, #1
   14cfc:	add	r6, r3, r6, lsl #1
   14d00:	add	r2, r6, r4
   14d04:	cmp	r2, r0
   14d08:	bhi	14d64 <flatcc_builder_reserve_table@@Base+0x94>
   14d0c:	ldr	r3, [r5, #52]	; 0x34
   14d10:	adds	r3, r3, r6
   14d14:	streq	r3, [r5, #4]
   14d18:	mvneq	r0, #0
   14d1c:	beq	14d5c <flatcc_builder_reserve_table@@Base+0x8c>
   14d20:	ldr	r2, [r5, #32]
   14d24:	add	r3, r3, #4
   14d28:	str	r3, [r5, #4]
   14d2c:	ldr	r6, [r2, #20]
   14d30:	ldr	r3, [r5, #80]	; 0x50
   14d34:	add	r2, r4, r6
   14d38:	sub	r2, r2, #3
   14d3c:	cmp	r2, r3
   14d40:	bhi	14d8c <flatcc_builder_reserve_table@@Base+0xbc>
   14d44:	ldr	r3, [r5, #76]	; 0x4c
   14d48:	add	r3, r3, r6
   14d4c:	cmp	r3, #0
   14d50:	movne	r0, #0
   14d54:	mvneq	r0, #0
   14d58:	str	r3, [r5]
   14d5c:	add	sp, sp, #12
   14d60:	pop	{r4, r5, r6, r7, pc}
   14d64:	mov	r3, #0
   14d68:	ldr	r0, [r5, #40]	; 0x28
   14d6c:	add	r1, r5, #52	; 0x34
   14d70:	str	r3, [sp]
   14d74:	mov	r3, #1
   14d78:	ldr	r7, [r5, #48]	; 0x30
   14d7c:	blx	r7
   14d80:	cmp	r0, #0
   14d84:	beq	14d0c <flatcc_builder_reserve_table@@Base+0x3c>
   14d88:	bl	12358 <__assert_fail@plt+0xc>
   14d8c:	mov	r3, #3
   14d90:	ldr	r0, [r5, #40]	; 0x28
   14d94:	add	r1, r5, #76	; 0x4c
   14d98:	str	r3, [sp]
   14d9c:	mov	r3, #0
   14da0:	ldr	r4, [r5, #48]	; 0x30
   14da4:	blx	r4
   14da8:	cmp	r0, #0
   14dac:	beq	14d44 <flatcc_builder_reserve_table@@Base+0x74>
   14db0:	b	14d88 <flatcc_builder_reserve_table@@Base+0xb8>
   14db4:	ldr	r3, [pc, #28]	; 14dd8 <flatcc_builder_reserve_table@@Base+0x108>
   14db8:	ldr	r1, [pc, #28]	; 14ddc <flatcc_builder_reserve_table@@Base+0x10c>
   14dbc:	ldr	r0, [pc, #28]	; 14de0 <flatcc_builder_reserve_table@@Base+0x110>
   14dc0:	add	r3, pc, r3
   14dc4:	ldr	r2, [pc, #24]	; 14de4 <flatcc_builder_reserve_table@@Base+0x114>
   14dc8:	add	r3, r3, #624	; 0x270
   14dcc:	add	r1, pc, r1
   14dd0:	add	r0, pc, r0
   14dd4:	bl	1234c <__assert_fail@plt>
   14dd8:	andeq	r4, r0, r4, asr r2
   14ddc:	muleq	r0, r8, r9
   14de0:	andeq	r4, r0, r4, lsr ip
   14de4:	andeq	r0, r0, r9, lsr #8

00014de8 <flatcc_builder_start_table@@Base>:
   14de8:	push	{r4, r5, r6, r7, r8, lr}
   14dec:	mov	r5, r1
   14df0:	sub	sp, sp, #8
   14df4:	mov	r1, #4
   14df8:	mov	r4, r0
   14dfc:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   14e00:	subs	r7, r0, #0
   14e04:	bne	14f3c <flatcc_builder_start_table@@Base+0x154>
   14e08:	ldr	r3, [r4, #52]	; 0x34
   14e0c:	ldr	r6, [r4, #4]
   14e10:	ldr	r0, [r4, #32]
   14e14:	sub	r6, r6, r3
   14e18:	add	r5, r5, #2
   14e1c:	str	r6, [r0, #16]
   14e20:	ldr	r1, [r4, #76]	; 0x4c
   14e24:	ldr	r2, [r4]
   14e28:	lsl	r5, r5, #1
   14e2c:	sub	r2, r2, r1
   14e30:	str	r2, [r0, #20]
   14e34:	ldr	r2, [r4, #12]
   14e38:	ldr	lr, [pc, #268]	; 14f4c <flatcc_builder_start_table@@Base+0x164>
   14e3c:	str	r2, [r0, #24]
   14e40:	ldrh	r2, [r4, #8]
   14e44:	mov	r1, #3
   14e48:	strh	r2, [r0, #28]
   14e4c:	add	r6, r6, r2, lsl #1
   14e50:	ldr	ip, [r4, #56]	; 0x38
   14e54:	add	r2, r6, r5
   14e58:	cmp	r2, ip
   14e5c:	strh	r7, [r4, #8]
   14e60:	str	lr, [r4, #12]
   14e64:	strh	r1, [r0, #14]
   14e68:	bhi	14eec <flatcc_builder_start_table@@Base+0x104>
   14e6c:	adds	r6, r3, r6
   14e70:	streq	r6, [r4, #4]
   14e74:	beq	14f3c <flatcc_builder_start_table@@Base+0x154>
   14e78:	ldr	r3, [r4, #32]
   14e7c:	add	r6, r6, #4
   14e80:	str	r6, [r4, #4]
   14e84:	ldr	r6, [r3, #20]
   14e88:	sub	r2, r5, #3
   14e8c:	ldr	r3, [r4, #80]	; 0x50
   14e90:	add	r2, r2, r6
   14e94:	cmp	r2, r3
   14e98:	bhi	14f14 <flatcc_builder_start_table@@Base+0x12c>
   14e9c:	ldr	r3, [r4, #76]	; 0x4c
   14ea0:	add	r3, r3, r6
   14ea4:	cmp	r3, #0
   14ea8:	str	r3, [r4]
   14eac:	beq	14f3c <flatcc_builder_start_table@@Base+0x154>
   14eb0:	ldr	r0, [r4, #28]
   14eb4:	ldr	r3, [r4, #64]	; 0x40
   14eb8:	ldr	r2, [pc, #144]	; 14f50 <flatcc_builder_start_table@@Base+0x168>
   14ebc:	sub	r3, r3, r0
   14ec0:	ldr	r1, [r4, #60]	; 0x3c
   14ec4:	ldr	ip, [r4, #32]
   14ec8:	cmp	r3, r2
   14ecc:	add	r1, r1, r0
   14ed0:	movcs	r3, r2
   14ed4:	str	r1, [r4, #16]
   14ed8:	str	r3, [r4, #24]
   14edc:	mov	r0, r7
   14ee0:	str	r2, [ip, #4]
   14ee4:	add	sp, sp, #8
   14ee8:	pop	{r4, r5, r6, r7, r8, pc}
   14eec:	ldr	r0, [r4, #40]	; 0x28
   14ef0:	mov	r3, #1
   14ef4:	str	r7, [sp]
   14ef8:	add	r1, r4, #52	; 0x34
   14efc:	ldr	r8, [r4, #48]	; 0x30
   14f00:	blx	r8
   14f04:	cmp	r0, #0
   14f08:	bne	14f38 <flatcc_builder_start_table@@Base+0x150>
   14f0c:	ldr	r3, [r4, #52]	; 0x34
   14f10:	b	14e6c <flatcc_builder_start_table@@Base+0x84>
   14f14:	mov	r3, #3
   14f18:	ldr	r0, [r4, #40]	; 0x28
   14f1c:	add	r1, r4, #76	; 0x4c
   14f20:	str	r3, [sp]
   14f24:	mov	r3, #0
   14f28:	ldr	r5, [r4, #48]	; 0x30
   14f2c:	blx	r5
   14f30:	cmp	r0, #0
   14f34:	beq	14e9c <flatcc_builder_start_table@@Base+0xb4>
   14f38:	bl	12358 <__assert_fail@plt+0xc>
   14f3c:	mvn	r7, #0
   14f40:	mov	r0, r7
   14f44:	add	sp, sp, #8
   14f48:	pop	{r4, r5, r6, r7, r8, pc}
   14f4c:	svccs	0x00693b52
   14f50:	strdeq	pc, [r0], -ip

00014f54 <flatcc_builder_create_vtable@@Base>:
   14f54:	push	{r4, r5, r6, lr}
   14f58:	sub	sp, sp, #80	; 0x50
   14f5c:	subs	r3, r2, #0
   14f60:	mov	r2, #0
   14f64:	mov	r4, r0
   14f68:	str	r2, [sp, #8]
   14f6c:	str	r2, [sp, #12]
   14f70:	beq	14fe8 <flatcc_builder_create_vtable@@Base+0x94>
   14f74:	ldr	r0, [r0, #152]	; 0x98
   14f78:	mov	r2, #1
   14f7c:	cmp	r0, #0
   14f80:	str	r1, [sp, #16]
   14f84:	str	r3, [sp, #8]
   14f88:	str	r3, [sp, #20]
   14f8c:	str	r2, [sp, #12]
   14f90:	mov	r1, r3
   14f94:	beq	15004 <flatcc_builder_create_vtable@@Base+0xb0>
   14f98:	ldr	r2, [r4, #136]	; 0x88
   14f9c:	sub	r5, r2, r3
   14fa0:	cmp	r2, r5
   14fa4:	ble	15000 <flatcc_builder_create_vtable@@Base+0xac>
   14fa8:	ldr	r0, [r4, #36]	; 0x24
   14fac:	ldr	r2, [sp, #12]
   14fb0:	str	r3, [sp]
   14fb4:	add	r1, sp, #16
   14fb8:	ldr	r6, [r4, #44]	; 0x2c
   14fbc:	mov	r3, r5
   14fc0:	blx	r6
   14fc4:	cmp	r0, #0
   14fc8:	bne	15078 <flatcc_builder_create_vtable@@Base+0x124>
   14fcc:	cmp	r5, #0
   14fd0:	str	r5, [r4, #136]	; 0x88
   14fd4:	beq	14fdc <flatcc_builder_create_vtable@@Base+0x88>
   14fd8:	add	r5, r5, #1
   14fdc:	mov	r0, r5
   14fe0:	add	sp, sp, #80	; 0x50
   14fe4:	pop	{r4, r5, r6, pc}
   14fe8:	ldr	r3, [r0, #152]	; 0x98
   14fec:	cmp	r3, #0
   14ff0:	bne	15000 <flatcc_builder_create_vtable@@Base+0xac>
   14ff4:	ldr	r3, [r0, #180]	; 0xb4
   14ff8:	cmp	r3, #0
   14ffc:	beq	1506c <flatcc_builder_create_vtable@@Base+0x118>
   15000:	bl	123c0 <__assert_fail@plt+0x74>
   15004:	ldr	r2, [r4, #180]	; 0xb4
   15008:	cmp	r2, #0
   1500c:	bne	14f98 <flatcc_builder_create_vtable@@Base+0x44>
   15010:	ldr	r5, [r4, #140]	; 0x8c
   15014:	add	r3, r5, r3
   15018:	cmp	r5, r3
   1501c:	str	r3, [r4, #140]	; 0x8c
   15020:	bgt	1509c <flatcc_builder_create_vtable@@Base+0x148>
   15024:	ldr	r0, [r4, #36]	; 0x24
   15028:	ldr	r2, [sp, #12]
   1502c:	str	r1, [sp]
   15030:	mov	r3, r5
   15034:	ldr	r4, [r4, #44]	; 0x2c
   15038:	add	r1, sp, #16
   1503c:	blx	r4
   15040:	cmp	r0, #0
   15044:	beq	14fd8 <flatcc_builder_create_vtable@@Base+0x84>
   15048:	ldr	r3, [pc, #80]	; 150a0 <flatcc_builder_create_vtable@@Base+0x14c>
   1504c:	ldr	r1, [pc, #80]	; 150a4 <flatcc_builder_create_vtable@@Base+0x150>
   15050:	ldr	r0, [pc, #80]	; 150a8 <flatcc_builder_create_vtable@@Base+0x154>
   15054:	add	r3, pc, r3
   15058:	ldr	r2, [pc, #76]	; 150ac <flatcc_builder_create_vtable@@Base+0x158>
   1505c:	add	r3, r3, #16
   15060:	add	r1, pc, r1
   15064:	add	r0, pc, r0
   15068:	bl	1234c <__assert_fail@plt>
   1506c:	ldr	r5, [r4, #140]	; 0x8c
   15070:	mov	r1, r3
   15074:	b	15024 <flatcc_builder_create_vtable@@Base+0xd0>
   15078:	ldr	r3, [pc, #48]	; 150b0 <flatcc_builder_create_vtable@@Base+0x15c>
   1507c:	ldr	r1, [pc, #48]	; 150b4 <flatcc_builder_create_vtable@@Base+0x160>
   15080:	ldr	r0, [pc, #48]	; 150b8 <flatcc_builder_create_vtable@@Base+0x164>
   15084:	add	r3, pc, r3
   15088:	ldr	r2, [pc, #44]	; 150bc <flatcc_builder_create_vtable@@Base+0x168>
   1508c:	add	r3, r3, #28
   15090:	add	r1, pc, r1
   15094:	add	r0, pc, r0
   15098:	bl	1234c <__assert_fail@plt>
   1509c:	bl	12388 <__assert_fail@plt+0x3c>
   150a0:	andeq	r3, r0, r0, asr #31
   150a4:	andeq	r4, r0, r4, lsl #14
   150a8:	andeq	r4, r0, r8, lsl #15
   150ac:	andeq	r0, r0, r5, lsr #5
   150b0:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   150b4:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   150b8:	andeq	r4, r0, r8, asr r7
   150bc:	andeq	r0, r0, fp, lsl #5

000150c0 <flatcc_builder_create_cached_vtable@@Base>:
   150c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c4:	sub	sp, sp, #28
   150c8:	ldr	r4, [r0, #116]	; 0x74
   150cc:	mov	sl, r3
   150d0:	cmp	r4, #0
   150d4:	mov	r8, r0
   150d8:	str	r1, [sp, #8]
   150dc:	mov	r7, r2
   150e0:	rsbne	r3, r4, #32
   150e4:	beq	1523c <flatcc_builder_create_cached_vtable@@Base+0x17c>
   150e8:	lsr	sl, sl, r3
   150ec:	ldr	r3, [r8, #92]	; 0x5c
   150f0:	adds	r2, r3, sl, lsl #2
   150f4:	str	r3, [sp, #16]
   150f8:	str	r2, [sp, #20]
   150fc:	beq	15230 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15100:	ldr	r5, [r3, sl, lsl #2]
   15104:	cmp	r5, #0
   15108:	beq	1532c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1510c:	mov	r3, #0
   15110:	ldr	fp, [r8, #100]	; 0x64
   15114:	ldr	r6, [r8, #68]	; 0x44
   15118:	mov	r9, r2
   1511c:	str	r3, [sp, #12]
   15120:	b	15134 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15124:	ldr	r5, [r4, #12]
   15128:	add	r9, r4, #12
   1512c:	cmp	r5, #0
   15130:	beq	15184 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15134:	add	r4, fp, r5
   15138:	ldr	r2, [r4, #8]
   1513c:	add	r1, r6, r2
   15140:	ldrh	r2, [r6, r2]
   15144:	cmp	r2, r7
   15148:	bne	15124 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1514c:	mov	r2, r7
   15150:	ldr	r0, [sp, #8]
   15154:	bl	122c8 <memcmp@plt>
   15158:	cmp	r0, #0
   1515c:	bne	15124 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15160:	ldr	r1, [r4, #4]
   15164:	ldr	r2, [r8, #152]	; 0x98
   15168:	cmp	r1, r2
   1516c:	beq	15200 <flatcc_builder_create_cached_vtable@@Base+0x140>
   15170:	ldr	r5, [r4, #12]
   15174:	add	r9, r4, #12
   15178:	cmp	r5, #0
   1517c:	str	r4, [sp, #12]
   15180:	bne	15134 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15184:	ldr	r4, [r8, #124]	; 0x7c
   15188:	ldr	r3, [r8, #104]	; 0x68
   1518c:	add	r2, r4, #16
   15190:	cmp	r2, r3
   15194:	bhi	15304 <flatcc_builder_create_cached_vtable@@Base+0x244>
   15198:	ldr	r5, [r8, #100]	; 0x64
   1519c:	adds	r6, r5, r4
   151a0:	beq	15230 <flatcc_builder_create_cached_vtable@@Base+0x170>
   151a4:	ldr	r3, [r8, #124]	; 0x7c
   151a8:	ldr	r0, [sp, #16]
   151ac:	ldr	r2, [r8, #152]	; 0x98
   151b0:	add	r1, r3, #16
   151b4:	str	r1, [r8, #124]	; 0x7c
   151b8:	str	r2, [r6, #4]
   151bc:	ldr	r1, [r0, sl, lsl #2]
   151c0:	mov	r2, r7
   151c4:	str	r1, [r6, #12]
   151c8:	str	r3, [r0, sl, lsl #2]
   151cc:	ldr	r1, [sp, #8]
   151d0:	mov	r0, r8
   151d4:	bl	14f54 <flatcc_builder_create_vtable@@Base>
   151d8:	cmp	r0, #0
   151dc:	str	r0, [r5, r4]
   151e0:	beq	15230 <flatcc_builder_create_cached_vtable@@Base+0x170>
   151e4:	ldr	r3, [sp, #12]
   151e8:	cmp	r3, #0
   151ec:	beq	15334 <flatcc_builder_create_cached_vtable@@Base+0x274>
   151f0:	ldr	r3, [r3, #8]
   151f4:	str	r3, [r6, #8]
   151f8:	add	sp, sp, #28
   151fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15200:	ldr	r3, [sp, #20]
   15204:	cmp	r3, r9
   15208:	beq	15224 <flatcc_builder_create_cached_vtable@@Base+0x164>
   1520c:	ldr	r2, [sp, #16]
   15210:	ldr	r3, [r4, #12]
   15214:	str	r3, [r9]
   15218:	ldr	r3, [r2, sl, lsl #2]
   1521c:	str	r3, [r4, #12]
   15220:	str	r5, [r2, sl, lsl #2]
   15224:	ldr	r0, [r4]
   15228:	add	sp, sp, #28
   1522c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15230:	mov	r0, #0
   15234:	add	sp, sp, #28
   15238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1523c:	ldr	r3, [r0, #124]	; 0x7c
   15240:	add	r5, r0, #92	; 0x5c
   15244:	cmp	r3, #0
   15248:	bne	153cc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   1524c:	ldr	r3, [r0, #104]	; 0x68
   15250:	cmp	r3, #15
   15254:	bls	152d8 <flatcc_builder_create_cached_vtable@@Base+0x218>
   15258:	ldr	r3, [r8, #100]	; 0x64
   1525c:	cmp	r3, #0
   15260:	beq	15230 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15264:	mov	r2, #16
   15268:	mov	r3, #5
   1526c:	str	r2, [r8, #124]	; 0x7c
   15270:	ldr	r0, [r8, #40]	; 0x28
   15274:	mov	r1, r5
   15278:	str	r3, [sp]
   1527c:	mov	r2, #256	; 0x100
   15280:	ldr	r5, [r8, #48]	; 0x30
   15284:	mov	r3, #1
   15288:	blx	r5
   1528c:	cmp	r0, #0
   15290:	bne	15230 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15294:	ldr	r1, [r8, #96]	; 0x60
   15298:	mov	r3, #256	; 0x100
   1529c:	b	152a4 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   152a0:	mov	r3, r2
   152a4:	lsl	r2, r3, #1
   152a8:	cmp	r2, r1
   152ac:	bls	152a0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   152b0:	lsr	r3, r3, #2
   152b4:	cmp	r3, #1
   152b8:	bls	1538c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   152bc:	mov	r2, #1
   152c0:	add	r4, r4, #1
   152c4:	cmp	r3, r2, lsl r4
   152c8:	bhi	152c0 <flatcc_builder_create_cached_vtable@@Base+0x200>
   152cc:	rsb	r3, r4, #32
   152d0:	str	r4, [r8, #116]	; 0x74
   152d4:	b	150e8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   152d8:	mov	r3, #6
   152dc:	ldr	r0, [r0, #40]	; 0x28
   152e0:	mov	r2, #16
   152e4:	str	r3, [sp]
   152e8:	add	r1, r8, #100	; 0x64
   152ec:	ldr	r6, [r8, #48]	; 0x30
   152f0:	mov	r3, r4
   152f4:	blx	r6
   152f8:	cmp	r0, #0
   152fc:	beq	15258 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15300:	b	153b8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15304:	mov	r3, #6
   15308:	ldr	r0, [r8, #40]	; 0x28
   1530c:	add	r1, r8, #100	; 0x64
   15310:	str	r3, [sp]
   15314:	mov	r3, #0
   15318:	ldr	r5, [r8, #48]	; 0x30
   1531c:	blx	r5
   15320:	cmp	r0, #0
   15324:	beq	15198 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   15328:	b	153b8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   1532c:	str	r5, [sp, #12]
   15330:	b	15184 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15334:	ldr	r3, [r8, #172]	; 0xac
   15338:	ldr	r9, [r8, #120]	; 0x78
   1533c:	cmp	r3, #0
   15340:	add	r2, r9, r7
   15344:	beq	15350 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15348:	cmp	r3, r2
   1534c:	bcc	153bc <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   15350:	ldr	r3, [r8, #72]	; 0x48
   15354:	cmp	r3, r2
   15358:	bcc	15394 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   1535c:	ldr	r3, [r8, #68]	; 0x44
   15360:	adds	r0, r3, r9
   15364:	beq	153f0 <flatcc_builder_create_cached_vtable@@Base+0x330>
   15368:	ldr	r3, [r8, #120]	; 0x78
   1536c:	ldr	r1, [sp, #8]
   15370:	add	ip, r3, r7
   15374:	str	r3, [r6, #8]
   15378:	mov	r2, r7
   1537c:	str	ip, [r8, #120]	; 0x78
   15380:	bl	122bc <memcpy@plt>
   15384:	ldr	r0, [r5, r4]
   15388:	b	151f8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   1538c:	mov	r3, #32
   15390:	b	152d0 <flatcc_builder_create_cached_vtable@@Base+0x210>
   15394:	mov	r3, #2
   15398:	ldr	r0, [r8, #40]	; 0x28
   1539c:	add	r1, r8, #68	; 0x44
   153a0:	str	r3, [sp]
   153a4:	mov	r3, #0
   153a8:	ldr	sl, [r8, #48]	; 0x30
   153ac:	blx	sl
   153b0:	cmp	r0, #0
   153b4:	beq	1535c <flatcc_builder_create_cached_vtable@@Base+0x29c>
   153b8:	bl	12358 <__assert_fail@plt+0xc>
   153bc:	mov	r0, r8
   153c0:	bl	135b4 <flatcc_builder_flush_vtable_cache@@Base>
   153c4:	ldr	r0, [r5, r4]
   153c8:	b	151f8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   153cc:	ldr	r3, [pc, #36]	; 153f8 <flatcc_builder_create_cached_vtable@@Base+0x338>
   153d0:	ldr	r1, [pc, #36]	; 153fc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   153d4:	ldr	r0, [pc, #36]	; 15400 <flatcc_builder_create_cached_vtable@@Base+0x340>
   153d8:	add	r3, pc, r3
   153dc:	ldr	r2, [pc, #32]	; 15404 <flatcc_builder_create_cached_vtable@@Base+0x344>
   153e0:	add	r3, r3, #656	; 0x290
   153e4:	add	r1, pc, r1
   153e8:	add	r0, pc, r0
   153ec:	bl	1234c <__assert_fail@plt>
   153f0:	mvn	r0, #0
   153f4:	b	151f8 <flatcc_builder_create_cached_vtable@@Base+0x138>
   153f8:	andeq	r3, r0, ip, lsr ip
   153fc:	andeq	r4, r0, r0, lsl #7
   15400:	andeq	r4, r0, r8, lsr #12
   15404:	andeq	r0, r0, r6, asr r1

00015408 <flatcc_builder_create_table@@Base>:
   15408:	push	{r4, r5, r6, r7, r8, lr}
   1540c:	sub	sp, sp, #88	; 0x58
   15410:	ldr	r8, [pc, #436]	; 155cc <flatcc_builder_create_table@@Base+0x1c4>
   15414:	ldr	r4, [sp, #116]	; 0x74
   15418:	add	r8, pc, r8
   1541c:	cmp	r4, #0
   15420:	ldr	lr, [sp, #120]	; 0x78
   15424:	blt	1555c <flatcc_builder_create_table@@Base+0x154>
   15428:	tst	lr, #1
   1542c:	beq	155a8 <flatcc_builder_create_table@@Base+0x1a0>
   15430:	mov	r5, r0
   15434:	ldrh	r0, [r0, #128]	; 0x80
   15438:	cmp	r3, #4
   1543c:	movcc	r3, #4
   15440:	ldr	ip, [r5, #136]	; 0x88
   15444:	cmp	r0, r3
   15448:	mvn	r0, #3
   1544c:	strhcc	r3, [r5, #128]	; 0x80
   15450:	sub	r7, ip, r2
   15454:	sub	r3, r3, #1
   15458:	sub	r0, r0, r2
   1545c:	and	r7, r7, r3
   15460:	add	r0, r0, ip
   15464:	sub	r3, lr, #1
   15468:	sub	r0, r0, r7
   1546c:	sub	r3, r0, r3
   15470:	cmp	r4, #0
   15474:	str	r3, [sp, #12]
   15478:	beq	154ac <flatcc_builder_create_table@@Base+0xa4>
   1547c:	ldr	ip, [sp, #112]	; 0x70
   15480:	mvn	r6, #3
   15484:	add	r4, ip, r4, lsl #1
   15488:	sub	r6, r6, r0
   1548c:	ldrh	r3, [ip], #2
   15490:	sub	lr, r6, r3
   15494:	ldr	r0, [r1, r3]
   15498:	cmp	r4, ip
   1549c:	add	r0, r0, lr
   154a0:	str	r0, [r1, r3]
   154a4:	bne	1548c <flatcc_builder_create_table@@Base+0x84>
   154a8:	ldr	ip, [r5, #136]	; 0x88
   154ac:	mov	r3, #4
   154b0:	mov	lr, #1
   154b4:	add	r0, sp, #12
   154b8:	cmp	r2, #0
   154bc:	str	r3, [sp, #16]
   154c0:	str	r3, [sp, #28]
   154c4:	str	r0, [sp, #24]
   154c8:	str	lr, [sp, #20]
   154cc:	beq	154e8 <flatcc_builder_create_table@@Base+0xe0>
   154d0:	add	r3, r2, r3
   154d4:	mov	r0, #2
   154d8:	str	r1, [sp, #32]
   154dc:	str	r2, [sp, #36]	; 0x24
   154e0:	str	r3, [sp, #16]
   154e4:	str	r0, [sp, #20]
   154e8:	cmp	r7, #0
   154ec:	beq	1551c <flatcc_builder_create_table@@Base+0x114>
   154f0:	ldr	r2, [sp, #20]
   154f4:	ldr	r1, [pc, #212]	; 155d0 <flatcc_builder_create_table@@Base+0x1c8>
   154f8:	add	r2, r2, #1
   154fc:	add	r3, r3, r7
   15500:	str	r3, [sp, #16]
   15504:	ldr	r0, [r8, r1]
   15508:	add	r1, sp, #88	; 0x58
   1550c:	add	r1, r1, r2, lsl #3
   15510:	str	r2, [sp, #20]
   15514:	str	r0, [r1, #-72]	; 0xffffffb8
   15518:	str	r7, [r1, #-68]	; 0xffffffbc
   1551c:	sub	r4, ip, r3
   15520:	cmp	r4, ip
   15524:	bge	155a4 <flatcc_builder_create_table@@Base+0x19c>
   15528:	ldr	r0, [r5, #36]	; 0x24
   1552c:	ldr	r2, [sp, #20]
   15530:	str	r3, [sp]
   15534:	add	r1, sp, #24
   15538:	ldr	r6, [r5, #44]	; 0x2c
   1553c:	mov	r3, r4
   15540:	blx	r6
   15544:	cmp	r0, #0
   15548:	bne	15580 <flatcc_builder_create_table@@Base+0x178>
   1554c:	mov	r0, r4
   15550:	str	r4, [r5, #136]	; 0x88
   15554:	add	sp, sp, #88	; 0x58
   15558:	pop	{r4, r5, r6, r7, r8, pc}
   1555c:	ldr	r3, [pc, #112]	; 155d4 <flatcc_builder_create_table@@Base+0x1cc>
   15560:	ldr	r1, [pc, #112]	; 155d8 <flatcc_builder_create_table@@Base+0x1d0>
   15564:	ldr	r0, [pc, #112]	; 155dc <flatcc_builder_create_table@@Base+0x1d4>
   15568:	add	r3, pc, r3
   1556c:	ldr	r2, [pc, #108]	; 155e0 <flatcc_builder_create_table@@Base+0x1d8>
   15570:	add	r3, r3, #668	; 0x29c
   15574:	add	r1, pc, r1
   15578:	add	r0, pc, r0
   1557c:	bl	1234c <__assert_fail@plt>
   15580:	ldr	r3, [pc, #92]	; 155e4 <flatcc_builder_create_table@@Base+0x1dc>
   15584:	ldr	r1, [pc, #92]	; 155e8 <flatcc_builder_create_table@@Base+0x1e0>
   15588:	ldr	r0, [pc, #92]	; 155ec <flatcc_builder_create_table@@Base+0x1e4>
   1558c:	add	r3, pc, r3
   15590:	ldr	r2, [pc, #88]	; 155f0 <flatcc_builder_create_table@@Base+0x1e8>
   15594:	add	r3, r3, #28
   15598:	add	r1, pc, r1
   1559c:	add	r0, pc, r0
   155a0:	bl	1234c <__assert_fail@plt>
   155a4:	bl	123c0 <__assert_fail@plt+0x74>
   155a8:	ldr	r3, [pc, #68]	; 155f4 <flatcc_builder_create_table@@Base+0x1ec>
   155ac:	ldr	r1, [pc, #68]	; 155f8 <flatcc_builder_create_table@@Base+0x1f0>
   155b0:	ldr	r0, [pc, #68]	; 155fc <flatcc_builder_create_table@@Base+0x1f4>
   155b4:	add	r3, pc, r3
   155b8:	ldr	r2, [pc, #64]	; 15600 <flatcc_builder_create_table@@Base+0x1f8>
   155bc:	add	r3, r3, #668	; 0x29c
   155c0:	add	r1, pc, r1
   155c4:	add	r0, pc, r0
   155c8:	bl	1234c <__assert_fail@plt>
   155cc:	andeq	r5, r1, r0, ror #23
   155d0:	andeq	r0, r0, r4, asr #32
   155d4:	andeq	r3, r0, ip, lsr #21
   155d8:	strdeq	r4, [r0], -r0
   155dc:	andeq	r4, r0, r8, lsr #9
   155e0:	ldrdeq	r0, [r0], -r5
   155e4:	andeq	r3, r0, r8, lsl #21
   155e8:	andeq	r4, r0, ip, asr #3
   155ec:	andeq	r4, r0, r0, asr r2
   155f0:	andeq	r0, r0, fp, lsl #5
   155f4:	andeq	r3, r0, r0, ror #20
   155f8:	andeq	r4, r0, r4, lsr #3
   155fc:	andeq	r4, r0, r0, ror r4
   15600:	ldrdeq	r0, [r0], -fp

00015604 <flatcc_builder_check_required_field@@Base>:
   15604:	ldr	r3, [r0, #32]
   15608:	ldrh	r3, [r3, #14]
   1560c:	cmp	r3, #3
   15610:	bne	1563c <flatcc_builder_check_required_field@@Base+0x38>
   15614:	ldrh	r3, [r0, #8]
   15618:	cmp	r3, r1
   1561c:	movls	r0, #0
   15620:	bls	15638 <flatcc_builder_check_required_field@@Base+0x34>
   15624:	ldr	r3, [r0, #4]
   15628:	lsl	r1, r1, #1
   1562c:	ldrh	r0, [r3, r1]
   15630:	adds	r0, r0, #0
   15634:	movne	r0, #1
   15638:	bx	lr
   1563c:	ldr	r3, [pc, #32]	; 15664 <flatcc_builder_check_required_field@@Base+0x60>
   15640:	ldr	r1, [pc, #32]	; 15668 <flatcc_builder_check_required_field@@Base+0x64>
   15644:	ldr	r0, [pc, #32]	; 1566c <flatcc_builder_check_required_field@@Base+0x68>
   15648:	add	r3, pc, r3
   1564c:	push	{r4, lr}
   15650:	add	r3, r3, #696	; 0x2b8
   15654:	ldr	r2, [pc, #20]	; 15670 <flatcc_builder_check_required_field@@Base+0x6c>
   15658:	add	r1, pc, r1
   1565c:	add	r0, pc, r0
   15660:	bl	1234c <__assert_fail@plt>
   15664:	andeq	r3, r0, ip, asr #19
   15668:	andeq	r4, r0, ip, lsl #2
   1566c:	andeq	r4, r0, r4, ror #7
   15670:	strdeq	r0, [r0], -r8

00015674 <flatcc_builder_check_union_field@@Base>:
   15674:	ldr	r3, [r0, #32]
   15678:	ldrh	r3, [r3, #14]
   1567c:	cmp	r3, #3
   15680:	bne	156fc <flatcc_builder_check_union_field@@Base+0x88>
   15684:	cmp	r1, #0
   15688:	beq	156d4 <flatcc_builder_check_union_field@@Base+0x60>
   1568c:	ldrh	r3, [r0, #8]
   15690:	cmp	r3, r1
   15694:	bls	156d4 <flatcc_builder_check_union_field@@Base+0x60>
   15698:	sub	r1, r1, #-2147483647	; 0x80000001
   1569c:	ldr	r3, [r0, #4]
   156a0:	lsl	r1, r1, #1
   156a4:	ldrh	r2, [r3, r1]
   156a8:	cmp	r2, #0
   156ac:	beq	156e8 <flatcc_builder_check_union_field@@Base+0x74>
   156b0:	ldr	r0, [r0, #16]
   156b4:	add	r1, r3, r1
   156b8:	ldrb	r2, [r0, r2]
   156bc:	ldrh	r1, [r1, #2]
   156c0:	cmp	r2, #0
   156c4:	bne	156dc <flatcc_builder_check_union_field@@Base+0x68>
   156c8:	clz	r0, r1
   156cc:	lsr	r0, r0, #5
   156d0:	bx	lr
   156d4:	mov	r0, #0
   156d8:	bx	lr
   156dc:	adds	r0, r1, #0
   156e0:	movne	r0, #1
   156e4:	b	156d8 <flatcc_builder_check_union_field@@Base+0x64>
   156e8:	add	r1, r3, r1
   156ec:	ldrh	r1, [r1, #2]
   156f0:	clz	r0, r1
   156f4:	lsr	r0, r0, #5
   156f8:	bx	lr
   156fc:	ldr	r3, [pc, #32]	; 15724 <flatcc_builder_check_union_field@@Base+0xb0>
   15700:	ldr	r1, [pc, #32]	; 15728 <flatcc_builder_check_union_field@@Base+0xb4>
   15704:	ldr	r0, [pc, #32]	; 1572c <flatcc_builder_check_union_field@@Base+0xb8>
   15708:	add	r3, pc, r3
   1570c:	push	{r4, lr}
   15710:	add	r3, r3, #732	; 0x2dc
   15714:	ldr	r2, [pc, #20]	; 15730 <flatcc_builder_check_union_field@@Base+0xbc>
   15718:	add	r1, pc, r1
   1571c:	add	r0, pc, r0
   15720:	bl	1234c <__assert_fail@plt>
   15724:	andeq	r3, r0, ip, lsl #18
   15728:	andeq	r4, r0, ip, asr #32
   1572c:	andeq	r4, r0, r4, lsr #6
   15730:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00015734 <flatcc_builder_check_required@@Base>:
   15734:	ldr	r3, [r0, #32]
   15738:	ldrh	r3, [r3, #14]
   1573c:	cmp	r3, #3
   15740:	bne	157a4 <flatcc_builder_check_required@@Base+0x70>
   15744:	ldrh	r3, [r0, #8]
   15748:	cmp	r3, r2
   1574c:	movlt	r0, #0
   15750:	blt	157a0 <flatcc_builder_check_required@@Base+0x6c>
   15754:	cmp	r2, #0
   15758:	ble	1579c <flatcc_builder_check_required@@Base+0x68>
   1575c:	ldrh	r3, [r1]
   15760:	ldr	ip, [r0, #4]
   15764:	lsl	r3, r3, #1
   15768:	ldrh	r0, [ip, r3]
   1576c:	cmp	r0, #0
   15770:	beq	157a0 <flatcc_builder_check_required@@Base+0x6c>
   15774:	add	r2, r1, r2, lsl #1
   15778:	add	r1, r1, #2
   1577c:	b	15794 <flatcc_builder_check_required@@Base+0x60>
   15780:	ldrh	r3, [r1], #2
   15784:	lsl	r3, r3, #1
   15788:	ldrh	r0, [ip, r3]
   1578c:	cmp	r0, #0
   15790:	beq	157a0 <flatcc_builder_check_required@@Base+0x6c>
   15794:	cmp	r1, r2
   15798:	bne	15780 <flatcc_builder_check_required@@Base+0x4c>
   1579c:	mov	r0, #1
   157a0:	bx	lr
   157a4:	ldr	r3, [pc, #32]	; 157cc <flatcc_builder_check_required@@Base+0x98>
   157a8:	ldr	r1, [pc, #32]	; 157d0 <flatcc_builder_check_required@@Base+0x9c>
   157ac:	ldr	r0, [pc, #32]	; 157d4 <flatcc_builder_check_required@@Base+0xa0>
   157b0:	add	r3, pc, r3
   157b4:	push	{r4, lr}
   157b8:	add	r3, r3, #768	; 0x300
   157bc:	ldr	r2, [pc, #20]	; 157d8 <flatcc_builder_check_required@@Base+0xa4>
   157c0:	add	r1, pc, r1
   157c4:	add	r0, pc, r0
   157c8:	bl	1234c <__assert_fail@plt>
   157cc:	andeq	r3, r0, r4, ror #16
   157d0:	andeq	r3, r0, r4, lsr #31
   157d4:	andeq	r4, r0, ip, ror r2
   157d8:	andeq	r0, r0, r1, lsl r5

000157dc <flatcc_builder_end_table@@Base>:
   157dc:	ldr	r3, [r0, #32]
   157e0:	push	{r4, r5, r6, r7, lr}
   157e4:	sub	sp, sp, #20
   157e8:	ldrh	r3, [r3, #14]
   157ec:	cmp	r3, #3
   157f0:	bne	15974 <flatcc_builder_end_table@@Base+0x198>
   157f4:	ldrh	r5, [r0, #8]
   157f8:	ldr	r3, [r0, #12]
   157fc:	ldr	r1, [pc, #404]	; 15998 <flatcc_builder_end_table@@Base+0x1bc>
   15800:	add	r5, r5, #2
   15804:	ldr	r2, [r0, #20]
   15808:	lsl	r5, r5, #1
   1580c:	add	r2, r2, #4
   15810:	uxth	r5, r5
   15814:	eor	r3, r3, r5
   15818:	uxth	r2, r2
   1581c:	mul	r3, r1, r3
   15820:	ldr	ip, [r0, #4]
   15824:	eor	r3, r3, r2
   15828:	sub	r6, ip, #4
   1582c:	mul	r1, r1, r3
   15830:	strh	r2, [ip, #-2]
   15834:	strh	r5, [ip, #-4]
   15838:	mov	r3, r1
   1583c:	str	r1, [r0, #12]
   15840:	mov	r2, r5
   15844:	mov	r1, r6
   15848:	mov	r4, r0
   1584c:	bl	150c0 <flatcc_builder_create_cached_vtable@@Base>
   15850:	subs	r7, r0, #0
   15854:	bne	15868 <flatcc_builder_end_table@@Base+0x8c>
   15858:	mov	r5, #0
   1585c:	mov	r0, r5
   15860:	add	sp, sp, #20
   15864:	pop	{r4, r5, r6, r7, pc}
   15868:	mov	r2, r5
   1586c:	mov	r1, #0
   15870:	mov	r0, r6
   15874:	bl	1231c <memset@plt>
   15878:	ldr	r3, [r4, #32]
   1587c:	ldr	ip, [r4, #76]	; 0x4c
   15880:	ldr	r0, [r4]
   15884:	ldr	r2, [r3, #20]
   15888:	ldr	r1, [r4, #16]
   1588c:	add	ip, ip, r2
   15890:	sub	r0, r0, ip
   15894:	ldrh	r3, [r4, #130]	; 0x82
   15898:	asr	r0, r0, #1
   1589c:	ldr	r2, [r4, #20]
   158a0:	str	r0, [sp, #4]
   158a4:	str	r7, [sp, #8]
   158a8:	str	ip, [sp]
   158ac:	mov	r0, r4
   158b0:	bl	15408 <flatcc_builder_create_table@@Base>
   158b4:	subs	r5, r0, #0
   158b8:	beq	15858 <flatcc_builder_end_table@@Base+0x7c>
   158bc:	ldr	r3, [r4, #32]
   158c0:	ldr	r0, [r4, #52]	; 0x34
   158c4:	ldr	ip, [r4, #76]	; 0x4c
   158c8:	ldr	r1, [r3, #24]
   158cc:	ldr	r2, [r4, #20]
   158d0:	str	r1, [r4, #12]
   158d4:	ldrh	lr, [r3, #28]
   158d8:	mov	r1, #0
   158dc:	strh	lr, [r4, #8]
   158e0:	ldr	lr, [r3, #16]
   158e4:	add	r0, r0, lr
   158e8:	str	r0, [r4, #4]
   158ec:	ldr	r3, [r3, #20]
   158f0:	ldr	r0, [r4, #16]
   158f4:	add	r3, ip, r3
   158f8:	str	r3, [r4]
   158fc:	bl	1231c <memset@plt>
   15900:	ldr	r3, [r4, #32]
   15904:	ldr	r2, [r4, #64]	; 0x40
   15908:	ldrh	lr, [r4, #130]	; 0x82
   1590c:	ldr	ip, [r3]
   15910:	ldr	r1, [r3, #4]
   15914:	ldrh	r0, [r4, #128]	; 0x80
   15918:	sub	r2, r2, ip
   1591c:	cmp	r2, r1
   15920:	movcs	r2, r1
   15924:	cmp	r0, lr
   15928:	ldr	r0, [r4, #60]	; 0x3c
   1592c:	ldr	r6, [r3, #8]
   15930:	str	r2, [r4, #24]
   15934:	add	r2, r0, ip
   15938:	str	r2, [r4, #16]
   1593c:	str	r6, [r4, #20]
   15940:	ldr	r2, [r4, #156]	; 0x9c
   15944:	str	ip, [r4, #28]
   15948:	str	r1, [r3, #4]
   1594c:	strhcc	lr, [r4, #128]	; 0x80
   15950:	ldrh	r1, [r3, #12]
   15954:	sub	r2, r2, #1
   15958:	sub	r3, r3, #36	; 0x24
   1595c:	mov	r0, r5
   15960:	str	r2, [r4, #156]	; 0x9c
   15964:	strh	r1, [r4, #130]	; 0x82
   15968:	str	r3, [r4, #32]
   1596c:	add	sp, sp, #20
   15970:	pop	{r4, r5, r6, r7, pc}
   15974:	ldr	r3, [pc, #32]	; 1599c <flatcc_builder_end_table@@Base+0x1c0>
   15978:	ldr	r1, [pc, #32]	; 159a0 <flatcc_builder_end_table@@Base+0x1c4>
   1597c:	ldr	r0, [pc, #32]	; 159a4 <flatcc_builder_end_table@@Base+0x1c8>
   15980:	add	r3, pc, r3
   15984:	ldr	r2, [pc, #28]	; 159a8 <flatcc_builder_end_table@@Base+0x1cc>
   15988:	add	r3, r3, #800	; 0x320
   1598c:	add	r1, pc, r1
   15990:	add	r0, pc, r0
   15994:	bl	1234c <__assert_fail@plt>
   15998:			; <UNDEFINED> instruction: 0x9e3779b1
   1599c:	muleq	r0, r4, r6
   159a0:	ldrdeq	r3, [r0], -r8
   159a4:	strheq	r4, [r0], -r0
   159a8:	andeq	r0, r0, r5, lsr #10

000159ac <flatcc_builder_create_vector@@Base>:
   159ac:	push	{r4, r5, r6, lr}
   159b0:	sub	sp, sp, #88	; 0x58
   159b4:	ldr	lr, [pc, #320]	; 15afc <flatcc_builder_create_vector@@Base+0x150>
   159b8:	ldr	ip, [sp, #108]	; 0x6c
   159bc:	mov	r4, r0
   159c0:	cmp	r2, ip
   159c4:	add	lr, pc, lr
   159c8:	ldrh	r0, [sp, #104]	; 0x68
   159cc:	bhi	15ab0 <flatcc_builder_create_vector@@Base+0x104>
   159d0:	ldrh	ip, [r4, #128]	; 0x80
   159d4:	cmp	r0, #4
   159d8:	mul	r3, r3, r2
   159dc:	movcc	r0, #4
   159e0:	ldr	r6, [r4, #136]	; 0x88
   159e4:	cmp	ip, r0
   159e8:	strhcc	r0, [r4, #128]	; 0x80
   159ec:	sub	r5, r6, r3
   159f0:	sub	r0, r0, #1
   159f4:	mov	ip, #4
   159f8:	str	r2, [sp, #12]
   159fc:	and	r0, r0, r5
   15a00:	add	r2, sp, #12
   15a04:	mov	r5, #1
   15a08:	cmp	r3, #0
   15a0c:	str	ip, [sp, #16]
   15a10:	str	ip, [sp, #28]
   15a14:	str	r2, [sp, #24]
   15a18:	str	r5, [sp, #20]
   15a1c:	bne	15a94 <flatcc_builder_create_vector@@Base+0xe8>
   15a20:	cmp	r0, #0
   15a24:	beq	15a54 <flatcc_builder_create_vector@@Base+0xa8>
   15a28:	ldr	r3, [sp, #20]
   15a2c:	ldr	r2, [pc, #204]	; 15b00 <flatcc_builder_create_vector@@Base+0x154>
   15a30:	add	r3, r3, #1
   15a34:	add	ip, ip, r0
   15a38:	str	ip, [sp, #16]
   15a3c:	ldr	r1, [lr, r2]
   15a40:	add	r2, sp, #88	; 0x58
   15a44:	add	r2, r2, r3, lsl #3
   15a48:	str	r3, [sp, #20]
   15a4c:	str	r1, [r2, #-72]	; 0xffffffb8
   15a50:	str	r0, [r2, #-68]	; 0xffffffbc
   15a54:	sub	r5, r6, ip
   15a58:	cmp	r6, r5
   15a5c:	ble	15af8 <flatcc_builder_create_vector@@Base+0x14c>
   15a60:	ldr	r0, [r4, #36]	; 0x24
   15a64:	ldr	r2, [sp, #20]
   15a68:	str	ip, [sp]
   15a6c:	mov	r3, r5
   15a70:	ldr	r6, [r4, #44]	; 0x2c
   15a74:	add	r1, sp, #24
   15a78:	blx	r6
   15a7c:	cmp	r0, #0
   15a80:	bne	15ad4 <flatcc_builder_create_vector@@Base+0x128>
   15a84:	mov	r0, r5
   15a88:	str	r5, [r4, #136]	; 0x88
   15a8c:	add	sp, sp, #88	; 0x58
   15a90:	pop	{r4, r5, r6, pc}
   15a94:	add	ip, r3, ip
   15a98:	mov	r2, #2
   15a9c:	str	r1, [sp, #32]
   15aa0:	str	r3, [sp, #36]	; 0x24
   15aa4:	str	ip, [sp, #16]
   15aa8:	str	r2, [sp, #20]
   15aac:	b	15a20 <flatcc_builder_create_vector@@Base+0x74>
   15ab0:	ldr	r3, [pc, #76]	; 15b04 <flatcc_builder_create_vector@@Base+0x158>
   15ab4:	ldr	r1, [pc, #76]	; 15b08 <flatcc_builder_create_vector@@Base+0x15c>
   15ab8:	ldr	r0, [pc, #76]	; 15b0c <flatcc_builder_create_vector@@Base+0x160>
   15abc:	add	r3, pc, r3
   15ac0:	ldr	r2, [pc, #72]	; 15b10 <flatcc_builder_create_vector@@Base+0x164>
   15ac4:	add	r3, r3, #828	; 0x33c
   15ac8:	add	r1, pc, r1
   15acc:	add	r0, pc, r0
   15ad0:	bl	1234c <__assert_fail@plt>
   15ad4:	ldr	r3, [pc, #56]	; 15b14 <flatcc_builder_create_vector@@Base+0x168>
   15ad8:	ldr	r1, [pc, #56]	; 15b18 <flatcc_builder_create_vector@@Base+0x16c>
   15adc:	ldr	r0, [pc, #56]	; 15b1c <flatcc_builder_create_vector@@Base+0x170>
   15ae0:	add	r3, pc, r3
   15ae4:	ldr	r2, [pc, #52]	; 15b20 <flatcc_builder_create_vector@@Base+0x174>
   15ae8:	add	r3, r3, #28
   15aec:	add	r1, pc, r1
   15af0:	add	r0, pc, r0
   15af4:	bl	1234c <__assert_fail@plt>
   15af8:	bl	123c0 <__assert_fail@plt+0x74>
   15afc:	andeq	r5, r1, r4, lsr r6
   15b00:	andeq	r0, r0, r4, asr #32
   15b04:	andeq	r3, r0, r8, asr r5
   15b08:	muleq	r0, ip, ip
   15b0c:	andeq	r3, r0, r0, lsr #31
   15b10:	andeq	r0, r0, r5, asr r5
   15b14:	andeq	r3, r0, r4, lsr r5
   15b18:	andeq	r3, r0, r8, ror ip
   15b1c:	strdeq	r3, [r0], -ip
   15b20:	andeq	r0, r0, fp, lsl #5

00015b24 <flatcc_builder_end_vector@@Base>:
   15b24:	ldr	r1, [r0, #32]
   15b28:	push	{r4, r5, r6, lr}
   15b2c:	sub	sp, sp, #8
   15b30:	ldrh	r3, [r1, #14]
   15b34:	cmp	r3, #4
   15b38:	bne	15bec <flatcc_builder_end_vector@@Base+0xc8>
   15b3c:	ldrh	lr, [r0, #130]	; 0x82
   15b40:	ldr	ip, [r1, #24]
   15b44:	ldr	r3, [r1, #16]
   15b48:	ldr	r2, [r1, #20]
   15b4c:	ldr	r1, [r0, #16]
   15b50:	str	lr, [sp]
   15b54:	str	ip, [sp, #4]
   15b58:	mov	r4, r0
   15b5c:	bl	159ac <flatcc_builder_create_vector@@Base>
   15b60:	subs	r5, r0, #0
   15b64:	beq	15be0 <flatcc_builder_end_vector@@Base+0xbc>
   15b68:	ldr	r2, [r4, #20]
   15b6c:	mov	r1, #0
   15b70:	ldr	r0, [r4, #16]
   15b74:	bl	1231c <memset@plt>
   15b78:	ldr	r3, [r4, #32]
   15b7c:	ldr	r2, [r4, #64]	; 0x40
   15b80:	ldrh	lr, [r4, #130]	; 0x82
   15b84:	ldr	ip, [r3]
   15b88:	ldr	r1, [r3, #4]
   15b8c:	ldrh	r0, [r4, #128]	; 0x80
   15b90:	sub	r2, r2, ip
   15b94:	cmp	r2, r1
   15b98:	movcs	r2, r1
   15b9c:	cmp	r0, lr
   15ba0:	ldr	r0, [r4, #60]	; 0x3c
   15ba4:	ldr	r6, [r3, #8]
   15ba8:	str	r2, [r4, #24]
   15bac:	add	r2, r0, ip
   15bb0:	str	r2, [r4, #16]
   15bb4:	str	r6, [r4, #20]
   15bb8:	ldr	r2, [r4, #156]	; 0x9c
   15bbc:	str	ip, [r4, #28]
   15bc0:	str	r1, [r3, #4]
   15bc4:	strhcc	lr, [r4, #128]	; 0x80
   15bc8:	ldrh	r1, [r3, #12]
   15bcc:	sub	r2, r2, #1
   15bd0:	sub	r3, r3, #36	; 0x24
   15bd4:	str	r2, [r4, #156]	; 0x9c
   15bd8:	strh	r1, [r4, #130]	; 0x82
   15bdc:	str	r3, [r4, #32]
   15be0:	mov	r0, r5
   15be4:	add	sp, sp, #8
   15be8:	pop	{r4, r5, r6, pc}
   15bec:	ldr	r3, [pc, #28]	; 15c10 <flatcc_builder_end_vector@@Base+0xec>
   15bf0:	ldr	r1, [pc, #28]	; 15c14 <flatcc_builder_end_vector@@Base+0xf0>
   15bf4:	ldr	r0, [pc, #28]	; 15c18 <flatcc_builder_end_vector@@Base+0xf4>
   15bf8:	add	r3, pc, r3
   15bfc:	ldr	r2, [pc, #24]	; 15c1c <flatcc_builder_end_vector@@Base+0xf8>
   15c00:	add	r3, r3, #860	; 0x35c
   15c04:	add	r1, pc, r1
   15c08:	add	r0, pc, r0
   15c0c:	bl	1234c <__assert_fail@plt>
   15c10:	andeq	r3, r0, ip, lsl r4
   15c14:	andeq	r3, r0, r0, ror #22
   15c18:	andeq	r3, r0, ip, lsr #25
   15c1c:	andeq	r0, r0, r8, ror r5

00015c20 <flatcc_builder_vector_count@@Base>:
   15c20:	ldr	r3, [r0, #32]
   15c24:	ldr	r0, [r3, #20]
   15c28:	bx	lr

00015c2c <flatcc_builder_vector_edit@@Base>:
   15c2c:	ldr	r0, [r0, #16]
   15c30:	bx	lr

00015c34 <flatcc_builder_create_offset_vector_direct@@Base>:
   15c34:	cmn	r2, #-1073741823	; 0xc0000001
   15c38:	bls	15c44 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   15c3c:	mov	r0, #0
   15c40:	bx	lr
   15c44:	mov	r3, #0
   15c48:	b	13384 <flatcc_builder_default_alloc@@Base+0x350>

00015c4c <flatcc_builder_end_offset_vector@@Base>:
   15c4c:	ldr	r3, [r0, #32]
   15c50:	push	{r4, r5, r6, lr}
   15c54:	ldrh	r2, [r3, #14]
   15c58:	cmp	r2, #5
   15c5c:	bne	15cf8 <flatcc_builder_end_offset_vector@@Base+0xac>
   15c60:	ldr	r2, [r3, #20]
   15c64:	ldr	r1, [r0, #16]
   15c68:	mov	r4, r0
   15c6c:	bl	15c34 <flatcc_builder_create_offset_vector_direct@@Base>
   15c70:	subs	r5, r0, #0
   15c74:	beq	15cf0 <flatcc_builder_end_offset_vector@@Base+0xa4>
   15c78:	ldr	r2, [r4, #20]
   15c7c:	mov	r1, #0
   15c80:	ldr	r0, [r4, #16]
   15c84:	bl	1231c <memset@plt>
   15c88:	ldr	r3, [r4, #32]
   15c8c:	ldr	r2, [r4, #64]	; 0x40
   15c90:	ldrh	lr, [r4, #130]	; 0x82
   15c94:	ldr	ip, [r3]
   15c98:	ldr	r1, [r3, #4]
   15c9c:	ldrh	r0, [r4, #128]	; 0x80
   15ca0:	sub	r2, r2, ip
   15ca4:	cmp	r2, r1
   15ca8:	movcs	r2, r1
   15cac:	cmp	r0, lr
   15cb0:	ldr	r0, [r4, #60]	; 0x3c
   15cb4:	ldr	r6, [r3, #8]
   15cb8:	str	r2, [r4, #24]
   15cbc:	add	r2, r0, ip
   15cc0:	str	r2, [r4, #16]
   15cc4:	str	r6, [r4, #20]
   15cc8:	ldr	r2, [r4, #156]	; 0x9c
   15ccc:	str	ip, [r4, #28]
   15cd0:	str	r1, [r3, #4]
   15cd4:	strhcc	lr, [r4, #128]	; 0x80
   15cd8:	ldrh	r1, [r3, #12]
   15cdc:	sub	r2, r2, #1
   15ce0:	sub	r3, r3, #36	; 0x24
   15ce4:	str	r2, [r4, #156]	; 0x9c
   15ce8:	strh	r1, [r4, #130]	; 0x82
   15cec:	str	r3, [r4, #32]
   15cf0:	mov	r0, r5
   15cf4:	pop	{r4, r5, r6, pc}
   15cf8:	ldr	r3, [pc, #28]	; 15d1c <flatcc_builder_end_offset_vector@@Base+0xd0>
   15cfc:	ldr	r1, [pc, #28]	; 15d20 <flatcc_builder_end_offset_vector@@Base+0xd4>
   15d00:	ldr	r0, [pc, #28]	; 15d24 <flatcc_builder_end_offset_vector@@Base+0xd8>
   15d04:	add	r3, pc, r3
   15d08:	ldr	r2, [pc, #24]	; 15d28 <flatcc_builder_end_offset_vector@@Base+0xdc>
   15d0c:	add	r3, r3, #888	; 0x378
   15d10:	add	r1, pc, r1
   15d14:	add	r0, pc, r0
   15d18:	bl	1234c <__assert_fail@plt>
   15d1c:	andeq	r3, r0, r0, lsl r3
   15d20:	andeq	r3, r0, r4, asr sl
   15d24:	andeq	r3, r0, ip, lsl #24
   15d28:	andeq	r0, r0, r8, asr #11

00015d2c <flatcc_builder_create_offset_vector@@Base>:
   15d2c:	push	{r4, r5, r6, lr}
   15d30:	mov	r6, r1
   15d34:	mov	r5, r2
   15d38:	mov	r4, r0
   15d3c:	bl	14c00 <flatcc_builder_start_offset_vector@@Base>
   15d40:	cmp	r0, #0
   15d44:	beq	15d50 <flatcc_builder_create_offset_vector@@Base+0x24>
   15d48:	mov	r0, #0
   15d4c:	pop	{r4, r5, r6, pc}
   15d50:	mov	r1, r5
   15d54:	mov	r0, r4
   15d58:	bl	14598 <flatcc_builder_extend_offset_vector@@Base>
   15d5c:	cmp	r0, #0
   15d60:	beq	15d48 <flatcc_builder_create_offset_vector@@Base+0x1c>
   15d64:	lsl	r2, r5, #2
   15d68:	mov	r1, r6
   15d6c:	bl	122bc <memcpy@plt>
   15d70:	mov	r0, r4
   15d74:	pop	{r4, r5, r6, lr}
   15d78:	b	15c4c <flatcc_builder_end_offset_vector@@Base>

00015d7c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15d7c:	ldr	r2, [r0, #32]
   15d80:	push	{r4, r5, r6, lr}
   15d84:	ldrh	ip, [r2, #14]
   15d88:	cmp	ip, #5
   15d8c:	bne	15e40 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   15d90:	ldr	r2, [r2, #20]
   15d94:	cmn	r2, #-1073741823	; 0xc0000001
   15d98:	bls	15da8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   15d9c:	mov	r5, #0
   15da0:	mov	r0, r5
   15da4:	pop	{r4, r5, r6, pc}
   15da8:	mov	r3, r1
   15dac:	ldr	r1, [r0, #16]
   15db0:	mov	r4, r0
   15db4:	bl	13384 <flatcc_builder_default_alloc@@Base+0x350>
   15db8:	subs	r5, r0, #0
   15dbc:	beq	15d9c <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   15dc0:	ldr	r2, [r4, #20]
   15dc4:	mov	r1, #0
   15dc8:	ldr	r0, [r4, #16]
   15dcc:	bl	1231c <memset@plt>
   15dd0:	ldr	r3, [r4, #32]
   15dd4:	ldr	r2, [r4, #64]	; 0x40
   15dd8:	ldrh	lr, [r4, #130]	; 0x82
   15ddc:	ldr	ip, [r3]
   15de0:	ldr	r1, [r3, #4]
   15de4:	ldrh	r0, [r4, #128]	; 0x80
   15de8:	sub	r2, r2, ip
   15dec:	cmp	r2, r1
   15df0:	movcs	r2, r1
   15df4:	cmp	r0, lr
   15df8:	ldr	r0, [r4, #60]	; 0x3c
   15dfc:	ldr	r6, [r3, #8]
   15e00:	str	r2, [r4, #24]
   15e04:	add	r2, r0, ip
   15e08:	str	r2, [r4, #16]
   15e0c:	str	r6, [r4, #20]
   15e10:	ldr	r2, [r4, #156]	; 0x9c
   15e14:	str	ip, [r4, #28]
   15e18:	str	r1, [r3, #4]
   15e1c:	strhcc	lr, [r4, #128]	; 0x80
   15e20:	ldrh	r1, [r3, #12]
   15e24:	sub	r2, r2, #1
   15e28:	sub	r3, r3, #36	; 0x24
   15e2c:	str	r2, [r4, #156]	; 0x9c
   15e30:	strh	r1, [r4, #130]	; 0x82
   15e34:	str	r3, [r4, #32]
   15e38:	mov	r0, r5
   15e3c:	pop	{r4, r5, r6, pc}
   15e40:	ldr	r3, [pc, #28]	; 15e64 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   15e44:	ldr	r1, [pc, #28]	; 15e68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   15e48:	ldr	r0, [pc, #28]	; 15e6c <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   15e4c:	add	r3, pc, r3
   15e50:	ldr	r2, [pc, #24]	; 15e70 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   15e54:	add	r3, r3, #924	; 0x39c
   15e58:	add	r1, pc, r1
   15e5c:	add	r0, pc, r0
   15e60:	bl	1234c <__assert_fail@plt>
   15e64:	andeq	r3, r0, r8, asr #3
   15e68:	andeq	r3, r0, ip, lsl #18
   15e6c:	andeq	r3, r0, r4, asr #21
   15e70:	ldrdeq	r0, [r0], -r5

00015e74 <flatcc_builder_offset_vector_edit@@Base>:
   15e74:	ldr	r0, [r0, #16]
   15e78:	bx	lr

00015e7c <flatcc_builder_offset_vector_count@@Base>:
   15e7c:	ldr	r3, [r0, #32]
   15e80:	ldr	r0, [r3, #20]
   15e84:	bx	lr

00015e88 <flatcc_builder_create_union_vector_direct@@Base>:
   15e88:	push	{r4, r5, r6, r7, r8, lr}
   15e8c:	sub	sp, sp, #8
   15e90:	mov	r4, r0
   15e94:	ldr	r5, [sp, #32]
   15e98:	cmn	r5, #-1073741823	; 0xc0000001
   15e9c:	bls	15eb8 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   15ea0:	mov	r3, #0
   15ea4:	mov	r0, r4
   15ea8:	str	r3, [r4]
   15eac:	str	r3, [r4, #4]
   15eb0:	add	sp, sp, #8
   15eb4:	pop	{r4, r5, r6, r7, r8, pc}
   15eb8:	mov	r6, r1
   15ebc:	mov	r7, r2
   15ec0:	mov	r1, r3
   15ec4:	mov	r0, r6
   15ec8:	mov	r3, r2
   15ecc:	mov	r2, r5
   15ed0:	bl	13384 <flatcc_builder_default_alloc@@Base+0x350>
   15ed4:	subs	r8, r0, #0
   15ed8:	beq	15ea0 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   15edc:	mvn	ip, #0
   15ee0:	mov	r3, #1
   15ee4:	mov	r2, r5
   15ee8:	mov	r1, r7
   15eec:	mov	r0, r6
   15ef0:	stm	sp, {r3, ip}
   15ef4:	bl	159ac <flatcc_builder_create_vector@@Base>
   15ef8:	stm	r4, {r0, r8}
   15efc:	mov	r0, r4
   15f00:	add	sp, sp, #8
   15f04:	pop	{r4, r5, r6, r7, r8, pc}

00015f08 <flatcc_builder_create_union_vector@@Base>:
   15f08:	push	{r4, r5, r6, r7, r8, lr}
   15f0c:	mov	r6, r0
   15f10:	sub	sp, sp, #16
   15f14:	mov	r0, r1
   15f18:	mov	r5, r1
   15f1c:	mov	r4, r2
   15f20:	mov	r7, r3
   15f24:	bl	14c00 <flatcc_builder_start_offset_vector@@Base>
   15f28:	cmp	r0, #0
   15f2c:	beq	15f48 <flatcc_builder_create_union_vector@@Base+0x40>
   15f30:	mov	r3, #0
   15f34:	mov	r0, r6
   15f38:	str	r3, [r6]
   15f3c:	str	r3, [r6, #4]
   15f40:	add	sp, sp, #16
   15f44:	pop	{r4, r5, r6, r7, r8, pc}
   15f48:	mov	r1, r7
   15f4c:	mov	r0, r5
   15f50:	bl	14598 <flatcc_builder_extend_offset_vector@@Base>
   15f54:	cmp	r0, #0
   15f58:	beq	15f30 <flatcc_builder_create_union_vector@@Base+0x28>
   15f5c:	ldr	r8, [r5, #20]
   15f60:	ldr	r3, [r5, #24]
   15f64:	add	r1, r7, r8
   15f68:	cmp	r1, r3
   15f6c:	str	r1, [r5, #20]
   15f70:	bcs	16068 <flatcc_builder_create_union_vector@@Base+0x160>
   15f74:	ldr	r2, [r5, #16]
   15f78:	adds	r8, r2, r8
   15f7c:	beq	15f30 <flatcc_builder_create_union_vector@@Base+0x28>
   15f80:	mov	r0, r5
   15f84:	bl	15e74 <flatcc_builder_offset_vector_edit@@Base>
   15f88:	cmp	r7, #0
   15f8c:	movne	r1, r4
   15f90:	subne	lr, r8, #1
   15f94:	mov	r3, r0
   15f98:	addne	r2, r1, r7, lsl #3
   15f9c:	subne	ip, r0, #4
   15fa0:	beq	15fc0 <flatcc_builder_create_union_vector@@Base+0xb8>
   15fa4:	ldrb	r4, [r1]
   15fa8:	add	r1, r1, #8
   15fac:	strb	r4, [lr, #1]!
   15fb0:	ldr	r4, [r1, #-4]
   15fb4:	cmp	r2, r1
   15fb8:	str	r4, [ip, #4]!
   15fbc:	bne	15fa4 <flatcc_builder_create_union_vector@@Base+0x9c>
   15fc0:	str	r7, [sp]
   15fc4:	mov	r2, r8
   15fc8:	mov	r1, r5
   15fcc:	add	r0, sp, #8
   15fd0:	bl	15e88 <flatcc_builder_create_union_vector_direct@@Base>
   15fd4:	ldr	r2, [r5, #20]
   15fd8:	mov	r1, #0
   15fdc:	ldr	r0, [r5, #16]
   15fe0:	ldr	r7, [sp, #8]
   15fe4:	ldr	r4, [sp, #12]
   15fe8:	bl	1231c <memset@plt>
   15fec:	ldr	r3, [r5, #32]
   15ff0:	ldr	r2, [r5, #64]	; 0x40
   15ff4:	ldrh	lr, [r5, #130]	; 0x82
   15ff8:	ldr	ip, [r3]
   15ffc:	ldr	r1, [r3, #4]
   16000:	ldrh	r0, [r5, #128]	; 0x80
   16004:	sub	r2, r2, ip
   16008:	cmp	r2, r1
   1600c:	movcs	r2, r1
   16010:	cmp	r0, lr
   16014:	ldr	r0, [r5, #60]	; 0x3c
   16018:	ldr	r8, [r3, #8]
   1601c:	str	r2, [r5, #24]
   16020:	add	r2, r0, ip
   16024:	str	r2, [r5, #16]
   16028:	str	r8, [r5, #20]
   1602c:	ldr	r2, [r5, #156]	; 0x9c
   16030:	str	ip, [r5, #28]
   16034:	str	r1, [r3, #4]
   16038:	strhcc	lr, [r5, #128]	; 0x80
   1603c:	ldrh	r1, [r3, #12]
   16040:	sub	r2, r2, #1
   16044:	sub	r3, r3, #36	; 0x24
   16048:	mov	r0, r6
   1604c:	str	r7, [r6]
   16050:	str	r4, [r6, #4]
   16054:	str	r2, [r5, #156]	; 0x9c
   16058:	strh	r1, [r5, #130]	; 0x82
   1605c:	str	r3, [r5, #32]
   16060:	add	sp, sp, #16
   16064:	pop	{r4, r5, r6, r7, r8, pc}
   16068:	add	r1, r1, #1
   1606c:	mvn	r2, #3
   16070:	mov	r0, r5
   16074:	bl	12fc0 <_start@@Base+0xa7c>
   16078:	cmp	r0, #0
   1607c:	beq	15f74 <flatcc_builder_create_union_vector@@Base+0x6c>
   16080:	b	15f30 <flatcc_builder_create_union_vector@@Base+0x28>

00016084 <flatcc_builder_start_union_vector@@Base>:
   16084:	push	{r4, lr}
   16088:	mov	r1, #4
   1608c:	mov	r4, r0
   16090:	bl	13270 <flatcc_builder_default_alloc@@Base+0x23c>
   16094:	cmp	r0, #0
   16098:	bne	160e4 <flatcc_builder_start_union_vector@@Base+0x60>
   1609c:	ldr	r3, [r4, #32]
   160a0:	mov	r2, #8
   160a4:	mov	lr, #7
   160a8:	str	r0, [r3, #20]
   160ac:	str	r2, [r3, #16]
   160b0:	ldr	ip, [r4, #28]
   160b4:	ldr	r2, [r4, #64]	; 0x40
   160b8:	ldr	r1, [r4, #60]	; 0x3c
   160bc:	sub	r2, r2, ip
   160c0:	cmn	r2, #4
   160c4:	mvnhi	r2, #3
   160c8:	strh	lr, [r3, #14]
   160cc:	add	r1, r1, ip
   160d0:	str	r2, [r4, #24]
   160d4:	mvn	r2, #3
   160d8:	str	r1, [r4, #16]
   160dc:	str	r2, [r3, #4]
   160e0:	pop	{r4, pc}
   160e4:	mvn	r0, #0
   160e8:	pop	{r4, pc}

000160ec <flatcc_builder_union_vector_edit@@Base>:
   160ec:	ldr	r0, [r0, #16]
   160f0:	bx	lr

000160f4 <flatcc_builder_union_vector_count@@Base>:
   160f4:	ldr	r3, [r0, #32]
   160f8:	ldr	r0, [r3, #20]
   160fc:	bx	lr

00016100 <flatcc_builder_end_union_vector@@Base>:
   16100:	ldr	r3, [r1, #32]
   16104:	push	{r4, r5, r6, r7, r8, lr}
   16108:	sub	sp, sp, #16
   1610c:	ldrh	r3, [r3, #14]
   16110:	cmp	r3, #7
   16114:	bne	1626c <flatcc_builder_end_union_vector@@Base+0x16c>
   16118:	mov	r5, r0
   1611c:	mov	r0, r1
   16120:	mov	r4, r1
   16124:	bl	160f4 <flatcc_builder_union_vector_count@@Base>
   16128:	ldr	r8, [r4, #20]
   1612c:	ldr	r3, [r4, #24]
   16130:	lsl	r7, r0, #2
   16134:	add	r1, r7, r0
   16138:	add	r1, r1, r8
   1613c:	cmp	r1, r3
   16140:	mov	r6, r0
   16144:	str	r1, [r4, #20]
   16148:	bcs	1623c <flatcc_builder_end_union_vector@@Base+0x13c>
   1614c:	ldr	r3, [r4, #16]
   16150:	adds	r8, r3, r8
   16154:	beq	16254 <flatcc_builder_end_union_vector@@Base+0x154>
   16158:	mov	r0, r4
   1615c:	bl	160ec <flatcc_builder_union_vector_edit@@Base>
   16160:	cmp	r6, #0
   16164:	add	r2, r8, r7
   16168:	subne	ip, r2, #1
   1616c:	subne	r1, r8, #4
   16170:	addne	r7, r0, r6, lsl #3
   16174:	beq	16194 <flatcc_builder_end_union_vector@@Base+0x94>
   16178:	ldrb	lr, [r0]
   1617c:	add	r0, r0, #8
   16180:	strb	lr, [ip, #1]!
   16184:	ldr	lr, [r0, #-4]
   16188:	cmp	r0, r7
   1618c:	str	lr, [r1, #4]!
   16190:	bne	16178 <flatcc_builder_end_union_vector@@Base+0x78>
   16194:	mov	r3, r8
   16198:	str	r6, [sp]
   1619c:	mov	r1, r4
   161a0:	add	r0, sp, #8
   161a4:	bl	15e88 <flatcc_builder_create_union_vector_direct@@Base>
   161a8:	ldr	r2, [r4, #20]
   161ac:	mov	r1, #0
   161b0:	ldr	r0, [r4, #16]
   161b4:	ldr	r7, [sp, #8]
   161b8:	ldr	r6, [sp, #12]
   161bc:	bl	1231c <memset@plt>
   161c0:	ldr	r3, [r4, #32]
   161c4:	ldr	r2, [r4, #64]	; 0x40
   161c8:	ldrh	lr, [r4, #130]	; 0x82
   161cc:	ldr	ip, [r3]
   161d0:	ldr	r1, [r3, #4]
   161d4:	ldrh	r0, [r4, #128]	; 0x80
   161d8:	sub	r2, r2, ip
   161dc:	cmp	r2, r1
   161e0:	movcs	r2, r1
   161e4:	cmp	r0, lr
   161e8:	ldr	r0, [r4, #60]	; 0x3c
   161ec:	ldr	r8, [r3, #8]
   161f0:	str	r2, [r4, #24]
   161f4:	add	r2, r0, ip
   161f8:	str	r2, [r4, #16]
   161fc:	str	r8, [r4, #20]
   16200:	ldr	r2, [r4, #156]	; 0x9c
   16204:	str	ip, [r4, #28]
   16208:	str	r1, [r3, #4]
   1620c:	strhcc	lr, [r4, #128]	; 0x80
   16210:	ldrh	r1, [r3, #12]
   16214:	sub	r2, r2, #1
   16218:	sub	r3, r3, #36	; 0x24
   1621c:	mov	r0, r5
   16220:	str	r7, [r5]
   16224:	str	r6, [r5, #4]
   16228:	str	r2, [r4, #156]	; 0x9c
   1622c:	strh	r1, [r4, #130]	; 0x82
   16230:	str	r3, [r4, #32]
   16234:	add	sp, sp, #16
   16238:	pop	{r4, r5, r6, r7, r8, pc}
   1623c:	add	r1, r1, #1
   16240:	mvn	r2, #3
   16244:	mov	r0, r4
   16248:	bl	12fc0 <_start@@Base+0xa7c>
   1624c:	cmp	r0, #0
   16250:	beq	1614c <flatcc_builder_end_union_vector@@Base+0x4c>
   16254:	mov	r3, #0
   16258:	mov	r0, r5
   1625c:	str	r3, [r5]
   16260:	str	r3, [r5, #4]
   16264:	add	sp, sp, #16
   16268:	pop	{r4, r5, r6, r7, r8, pc}
   1626c:	ldr	r3, [pc, #28]	; 16290 <flatcc_builder_end_union_vector@@Base+0x190>
   16270:	ldr	r1, [pc, #28]	; 16294 <flatcc_builder_end_union_vector@@Base+0x194>
   16274:	ldr	r0, [pc, #28]	; 16298 <flatcc_builder_end_union_vector@@Base+0x198>
   16278:	add	r3, pc, r3
   1627c:	ldr	r2, [pc, #24]	; 1629c <flatcc_builder_end_union_vector@@Base+0x19c>
   16280:	add	r3, r3, #968	; 0x3c8
   16284:	add	r1, pc, r1
   16288:	add	r0, pc, r0
   1628c:	bl	1234c <__assert_fail@plt>
   16290:	muleq	r0, ip, sp
   16294:	andeq	r3, r0, r0, ror #9
   16298:	strdeq	r3, [r0], -r8
   1629c:	andeq	r0, r0, r1, asr r6

000162a0 <flatcc_builder_extend_union_vector@@Base>:
   162a0:	ldr	ip, [r0, #32]
   162a4:	push	{r4, r5, r6, lr}
   162a8:	ldr	r3, [ip, #20]
   162ac:	adds	r2, r1, r3
   162b0:	movcs	r3, #1
   162b4:	movcc	r3, #0
   162b8:	cmn	r2, #-536870911	; 0xe0000001
   162bc:	movls	r4, #0
   162c0:	movhi	r4, #1
   162c4:	orrs	r4, r3, r4
   162c8:	bne	16314 <flatcc_builder_extend_union_vector@@Base+0x74>
   162cc:	str	r2, [ip, #20]
   162d0:	ldr	r6, [r0, #20]
   162d4:	ldr	r3, [r0, #24]
   162d8:	add	r1, r6, r1, lsl #3
   162dc:	cmp	r1, r3
   162e0:	mov	r5, r0
   162e4:	str	r1, [r0, #20]
   162e8:	bcs	162f8 <flatcc_builder_extend_union_vector@@Base+0x58>
   162ec:	ldr	r0, [r5, #16]
   162f0:	add	r0, r0, r6
   162f4:	pop	{r4, r5, r6, pc}
   162f8:	add	r1, r1, #1
   162fc:	mvn	r2, #3
   16300:	bl	12fc0 <_start@@Base+0xa7c>
   16304:	cmp	r0, #0
   16308:	beq	162ec <flatcc_builder_extend_union_vector@@Base+0x4c>
   1630c:	mov	r0, r4
   16310:	pop	{r4, r5, r6, pc}
   16314:	bl	123f8 <__assert_fail@plt+0xac>

00016318 <flatcc_builder_truncate_union_vector@@Base>:
   16318:	ldr	r3, [r0, #32]
   1631c:	push	{r4, lr}
   16320:	ldrh	r2, [r3, #14]
   16324:	cmp	r2, #7
   16328:	bne	1636c <flatcc_builder_truncate_union_vector@@Base+0x54>
   1632c:	ldr	ip, [r3, #20]
   16330:	cmp	ip, r1
   16334:	bcc	16390 <flatcc_builder_truncate_union_vector@@Base+0x78>
   16338:	ldr	r2, [r3, #16]
   1633c:	sub	ip, ip, r1
   16340:	str	ip, [r3, #20]
   16344:	mul	r2, r2, r1
   16348:	ldr	r3, [r0, #20]
   1634c:	ldr	r1, [r0, #16]
   16350:	sub	r3, r3, r2
   16354:	str	r3, [r0, #20]
   16358:	add	r0, r1, r3
   1635c:	mov	r1, #0
   16360:	bl	1231c <memset@plt>
   16364:	mov	r0, #0
   16368:	pop	{r4, pc}
   1636c:	ldr	r3, [pc, #64]	; 163b4 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   16370:	ldr	r1, [pc, #64]	; 163b8 <flatcc_builder_truncate_union_vector@@Base+0xa0>
   16374:	ldr	r0, [pc, #64]	; 163bc <flatcc_builder_truncate_union_vector@@Base+0xa4>
   16378:	add	r3, pc, r3
   1637c:	ldr	r2, [pc, #60]	; 163c0 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   16380:	add	r3, r3, #1000	; 0x3e8
   16384:	add	r1, pc, r1
   16388:	add	r0, pc, r0
   1638c:	bl	1234c <__assert_fail@plt>
   16390:	ldr	r3, [pc, #44]	; 163c4 <flatcc_builder_truncate_union_vector@@Base+0xac>
   16394:	ldr	r1, [pc, #44]	; 163c8 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   16398:	ldr	r0, [pc, #44]	; 163cc <flatcc_builder_truncate_union_vector@@Base+0xb4>
   1639c:	add	r3, pc, r3
   163a0:	ldr	r2, [pc, #40]	; 163d0 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   163a4:	add	r3, r3, #1000	; 0x3e8
   163a8:	add	r1, pc, r1
   163ac:	add	r0, pc, r0
   163b0:	bl	1234c <__assert_fail@plt>
   163b4:	muleq	r0, ip, ip
   163b8:	andeq	r3, r0, r0, ror #7
   163bc:	strdeq	r3, [r0], -r8
   163c0:	andeq	r0, r0, r1, lsl #13
   163c4:	andeq	r2, r0, r8, ror ip
   163c8:			; <UNDEFINED> instruction: 0x000033bc
   163cc:	strdeq	r3, [r0], -r8
   163d0:	andeq	r0, r0, r2, lsl #13

000163d4 <flatcc_builder_union_vector_push@@Base>:
   163d4:	ldr	ip, [r0, #32]
   163d8:	push	{r4, r5, r6, lr}
   163dc:	sub	sp, sp, #8
   163e0:	ldrh	r3, [ip, #14]
   163e4:	stm	sp, {r1, r2}
   163e8:	cmp	r3, #7
   163ec:	bne	1646c <flatcc_builder_union_vector_push@@Base+0x98>
   163f0:	ldr	r3, [ip, #20]
   163f4:	cmn	r3, #-536870911	; 0xe0000001
   163f8:	beq	1645c <flatcc_builder_union_vector_push@@Base+0x88>
   163fc:	add	r3, r3, #1
   16400:	str	r3, [ip, #20]
   16404:	ldr	r6, [r0, #20]
   16408:	ldr	r2, [r0, #24]
   1640c:	add	r3, r6, #8
   16410:	cmp	r3, r2
   16414:	mov	r4, r0
   16418:	mov	r5, sp
   1641c:	str	r3, [r0, #20]
   16420:	bcs	16448 <flatcc_builder_union_vector_push@@Base+0x74>
   16424:	ldr	r3, [r4, #16]
   16428:	adds	r3, r3, r6
   1642c:	beq	16490 <flatcc_builder_union_vector_push@@Base+0xbc>
   16430:	ldm	r5, {r0, r1}
   16434:	mov	r2, r3
   16438:	stm	r3, {r0, r1}
   1643c:	mov	r0, r2
   16440:	add	sp, sp, #8
   16444:	pop	{r4, r5, r6, pc}
   16448:	mvn	r2, #3
   1644c:	add	r1, r6, #9
   16450:	bl	12fc0 <_start@@Base+0xa7c>
   16454:	cmp	r0, #0
   16458:	beq	16424 <flatcc_builder_union_vector_push@@Base+0x50>
   1645c:	mov	r2, #0
   16460:	mov	r0, r2
   16464:	add	sp, sp, #8
   16468:	pop	{r4, r5, r6, pc}
   1646c:	ldr	r3, [pc, #36]	; 16498 <flatcc_builder_union_vector_push@@Base+0xc4>
   16470:	ldr	r1, [pc, #36]	; 1649c <flatcc_builder_union_vector_push@@Base+0xc8>
   16474:	ldr	r0, [pc, #36]	; 164a0 <flatcc_builder_union_vector_push@@Base+0xcc>
   16478:	add	r3, pc, r3
   1647c:	ldr	r2, [pc, #32]	; 164a4 <flatcc_builder_union_vector_push@@Base+0xd0>
   16480:	add	r3, r3, #1040	; 0x410
   16484:	add	r1, pc, r1
   16488:	add	r0, pc, r0
   1648c:	bl	1234c <__assert_fail@plt>
   16490:	mov	r2, r3
   16494:	b	1643c <flatcc_builder_union_vector_push@@Base+0x68>
   16498:	muleq	r0, ip, fp
   1649c:	andeq	r3, r0, r0, ror #5
   164a0:	strdeq	r3, [r0], -r8
   164a4:	andeq	r0, r0, sp, lsl #13

000164a8 <flatcc_builder_append_union_vector@@Base>:
   164a8:	ldr	ip, [r0, #32]
   164ac:	push	{r4, r5, r6, r7, r8, lr}
   164b0:	ldrh	r3, [ip, #14]
   164b4:	cmp	r3, #7
   164b8:	bne	16550 <flatcc_builder_append_union_vector@@Base+0xa8>
   164bc:	mov	r6, r1
   164c0:	ldr	r1, [ip, #20]
   164c4:	adds	r1, r2, r1
   164c8:	movcs	lr, #1
   164cc:	movcc	lr, #0
   164d0:	cmn	r1, #-536870911	; 0xe0000001
   164d4:	movls	r3, #0
   164d8:	movhi	r3, #1
   164dc:	orrs	r8, lr, r3
   164e0:	bne	1654c <flatcc_builder_append_union_vector@@Base+0xa4>
   164e4:	str	r1, [ip, #20]
   164e8:	ldr	r7, [r0, #20]
   164ec:	lsl	r4, r2, #3
   164f0:	ldr	r3, [r0, #24]
   164f4:	add	r1, r4, r7
   164f8:	cmp	r1, r3
   164fc:	mov	r5, r0
   16500:	str	r1, [r0, #20]
   16504:	bcs	16530 <flatcc_builder_append_union_vector@@Base+0x88>
   16508:	ldr	r3, [r5, #16]
   1650c:	adds	r3, r3, r7
   16510:	beq	16528 <flatcc_builder_append_union_vector@@Base+0x80>
   16514:	mov	r0, r3
   16518:	mov	r2, r4
   1651c:	mov	r1, r6
   16520:	bl	122bc <memcpy@plt>
   16524:	mov	r3, r0
   16528:	mov	r0, r3
   1652c:	pop	{r4, r5, r6, r7, r8, pc}
   16530:	add	r1, r1, #1
   16534:	mvn	r2, #3
   16538:	bl	12fc0 <_start@@Base+0xa7c>
   1653c:	cmp	r0, #0
   16540:	beq	16508 <flatcc_builder_append_union_vector@@Base+0x60>
   16544:	mov	r3, r8
   16548:	b	16528 <flatcc_builder_append_union_vector@@Base+0x80>
   1654c:	bl	123f8 <__assert_fail@plt+0xac>
   16550:	ldr	r3, [pc, #32]	; 16578 <flatcc_builder_append_union_vector@@Base+0xd0>
   16554:	ldr	r1, [pc, #32]	; 1657c <flatcc_builder_append_union_vector@@Base+0xd4>
   16558:	add	r3, pc, r3
   1655c:	ldr	r0, [pc, #28]	; 16580 <flatcc_builder_append_union_vector@@Base+0xd8>
   16560:	add	r3, r3, #1072	; 0x430
   16564:	ldr	r2, [pc, #24]	; 16584 <flatcc_builder_append_union_vector@@Base+0xdc>
   16568:	add	r3, r3, #4
   1656c:	add	r1, pc, r1
   16570:	add	r0, pc, r0
   16574:	bl	1234c <__assert_fail@plt>
   16578:			; <UNDEFINED> instruction: 0x00002abc
   1657c:	strdeq	r3, [r0], -r8
   16580:	andeq	r3, r0, r0, lsl r5
   16584:	muleq	r0, ip, r6

00016588 <flatcc_builder_create_string@@Base>:
   16588:	push	{r4, r5, r6, lr}
   1658c:	sub	sp, sp, #88	; 0x58
   16590:	ldr	lr, [r0, #136]	; 0x88
   16594:	mov	r4, r0
   16598:	add	r0, sp, #88	; 0x58
   1659c:	cmp	r2, #0
   165a0:	sub	r3, lr, r2
   165a4:	str	r2, [r0, #-76]!	; 0xffffffb4
   165a8:	sub	r3, r3, #1
   165ac:	str	r0, [sp, #24]
   165b0:	ldr	r5, [pc, #188]	; 16674 <flatcc_builder_create_string@@Base+0xec>
   165b4:	moveq	r0, #1
   165b8:	strne	r1, [sp, #32]
   165bc:	mov	ip, #4
   165c0:	moveq	r1, r0
   165c4:	movne	r1, #2
   165c8:	and	r3, r3, #3
   165cc:	ldr	r0, [pc, #164]	; 16678 <flatcc_builder_create_string@@Base+0xf0>
   165d0:	str	ip, [sp, #28]
   165d4:	add	r5, pc, r5
   165d8:	addne	ip, r2, ip
   165dc:	add	r3, r3, #1
   165e0:	add	r1, r1, #1
   165e4:	add	ip, ip, r3
   165e8:	add	r6, sp, #88	; 0x58
   165ec:	strne	r2, [sp, #36]	; 0x24
   165f0:	add	r1, r6, r1, lsl #3
   165f4:	str	ip, [sp, #16]
   165f8:	ldr	r0, [r5, r0]
   165fc:	sub	r5, lr, ip
   16600:	movne	r2, #3
   16604:	moveq	r2, #2
   16608:	cmp	lr, r5
   1660c:	str	r0, [r1, #-72]	; 0xffffffb8
   16610:	str	r3, [r1, #-68]	; 0xffffffbc
   16614:	str	r2, [sp, #20]
   16618:	ble	1664c <flatcc_builder_create_string@@Base+0xc4>
   1661c:	ldr	r0, [r4, #36]	; 0x24
   16620:	mov	r3, r5
   16624:	str	ip, [sp]
   16628:	add	r1, sp, #24
   1662c:	ldr	r6, [r4, #44]	; 0x2c
   16630:	blx	r6
   16634:	cmp	r0, #0
   16638:	bne	16650 <flatcc_builder_create_string@@Base+0xc8>
   1663c:	mov	r0, r5
   16640:	str	r5, [r4, #136]	; 0x88
   16644:	add	sp, sp, #88	; 0x58
   16648:	pop	{r4, r5, r6, pc}
   1664c:	bl	123c0 <__assert_fail@plt+0x74>
   16650:	ldr	r3, [pc, #36]	; 1667c <flatcc_builder_create_string@@Base+0xf4>
   16654:	ldr	r1, [pc, #36]	; 16680 <flatcc_builder_create_string@@Base+0xf8>
   16658:	ldr	r0, [pc, #36]	; 16684 <flatcc_builder_create_string@@Base+0xfc>
   1665c:	add	r3, pc, r3
   16660:	ldr	r2, [pc, #32]	; 16688 <flatcc_builder_create_string@@Base+0x100>
   16664:	add	r3, r3, #28
   16668:	add	r1, pc, r1
   1666c:	add	r0, pc, r0
   16670:	bl	1234c <__assert_fail@plt>
   16674:	andeq	r4, r1, r4, lsr #20
   16678:	andeq	r0, r0, r4, asr #32
   1667c:			; <UNDEFINED> instruction: 0x000029b8
   16680:	strdeq	r3, [r0], -ip
   16684:	andeq	r3, r0, r0, lsl #3
   16688:	andeq	r0, r0, fp, lsl #5

0001668c <flatcc_builder_create_string_str@@Base>:
   1668c:	push	{r4, r5, r6, lr}
   16690:	mov	r5, r0
   16694:	mov	r0, r1
   16698:	mov	r4, r1
   1669c:	bl	12304 <strlen@plt>
   166a0:	mov	r1, r4
   166a4:	mov	r2, r0
   166a8:	mov	r0, r5
   166ac:	pop	{r4, r5, r6, lr}
   166b0:	b	16588 <flatcc_builder_create_string@@Base>

000166b4 <flatcc_builder_create_string_strn@@Base>:
   166b4:	push	{r4, r5, r6, lr}
   166b8:	mov	r4, r1
   166bc:	mov	r6, r0
   166c0:	mov	r1, #0
   166c4:	mov	r0, r4
   166c8:	mov	r5, r2
   166cc:	bl	12334 <memchr@plt>
   166d0:	mov	r1, r4
   166d4:	cmp	r0, #0
   166d8:	subne	r5, r0, r4
   166dc:	mov	r2, r5
   166e0:	mov	r0, r6
   166e4:	pop	{r4, r5, r6, lr}
   166e8:	b	16588 <flatcc_builder_create_string@@Base>

000166ec <flatcc_builder_end_string@@Base>:
   166ec:	ldr	r3, [r0, #32]
   166f0:	push	{r4, r5, r6, lr}
   166f4:	ldrh	r2, [r3, #14]
   166f8:	cmp	r2, #6
   166fc:	bne	167cc <flatcc_builder_end_string@@Base+0xe0>
   16700:	ldr	r2, [r3, #20]
   16704:	ldr	r3, [r0, #20]
   16708:	mov	r4, r0
   1670c:	cmp	r2, r3
   16710:	bne	167a4 <flatcc_builder_end_string@@Base+0xb8>
   16714:	ldr	r1, [r0, #16]
   16718:	bl	16588 <flatcc_builder_create_string@@Base>
   1671c:	subs	r5, r0, #0
   16720:	beq	1679c <flatcc_builder_end_string@@Base+0xb0>
   16724:	ldr	r2, [r4, #20]
   16728:	mov	r1, #0
   1672c:	ldr	r0, [r4, #16]
   16730:	bl	1231c <memset@plt>
   16734:	ldr	r3, [r4, #32]
   16738:	ldr	r2, [r4, #64]	; 0x40
   1673c:	ldrh	lr, [r4, #130]	; 0x82
   16740:	ldr	ip, [r3]
   16744:	ldr	r1, [r3, #4]
   16748:	ldrh	r0, [r4, #128]	; 0x80
   1674c:	sub	r2, r2, ip
   16750:	cmp	r2, r1
   16754:	movcs	r2, r1
   16758:	cmp	r0, lr
   1675c:	ldr	r0, [r4, #60]	; 0x3c
   16760:	ldr	r6, [r3, #8]
   16764:	str	r2, [r4, #24]
   16768:	add	r2, r0, ip
   1676c:	str	r2, [r4, #16]
   16770:	str	r6, [r4, #20]
   16774:	ldr	r2, [r4, #156]	; 0x9c
   16778:	str	ip, [r4, #28]
   1677c:	str	r1, [r3, #4]
   16780:	strhcc	lr, [r4, #128]	; 0x80
   16784:	ldrh	r1, [r3, #12]
   16788:	sub	r2, r2, #1
   1678c:	sub	r3, r3, #36	; 0x24
   16790:	str	r2, [r4, #156]	; 0x9c
   16794:	strh	r1, [r4, #130]	; 0x82
   16798:	str	r3, [r4, #32]
   1679c:	mov	r0, r5
   167a0:	pop	{r4, r5, r6, pc}
   167a4:	ldr	r3, [pc, #72]	; 167f4 <flatcc_builder_end_string@@Base+0x108>
   167a8:	ldr	r1, [pc, #72]	; 167f8 <flatcc_builder_end_string@@Base+0x10c>
   167ac:	add	r3, pc, r3
   167b0:	ldr	r0, [pc, #68]	; 167fc <flatcc_builder_end_string@@Base+0x110>
   167b4:	add	r3, r3, #1104	; 0x450
   167b8:	ldr	r2, [pc, #64]	; 16800 <flatcc_builder_end_string@@Base+0x114>
   167bc:	add	r3, r3, #8
   167c0:	add	r1, pc, r1
   167c4:	add	r0, pc, r0
   167c8:	bl	1234c <__assert_fail@plt>
   167cc:	ldr	r3, [pc, #48]	; 16804 <flatcc_builder_end_string@@Base+0x118>
   167d0:	ldr	r1, [pc, #48]	; 16808 <flatcc_builder_end_string@@Base+0x11c>
   167d4:	add	r3, pc, r3
   167d8:	ldr	r0, [pc, #44]	; 1680c <flatcc_builder_end_string@@Base+0x120>
   167dc:	add	r3, r3, #1104	; 0x450
   167e0:	ldr	r2, [pc, #40]	; 16810 <flatcc_builder_end_string@@Base+0x124>
   167e4:	add	r3, r3, #8
   167e8:	add	r1, pc, r1
   167ec:	add	r0, pc, r0
   167f0:	bl	1234c <__assert_fail@plt>
   167f4:	andeq	r2, r0, r8, ror #16
   167f8:	andeq	r2, r0, r4, lsr #31
   167fc:	strdeq	r3, [r0], -r0
   16800:	andeq	r0, r0, r5, asr #13
   16804:	andeq	r2, r0, r0, asr #16
   16808:	andeq	r2, r0, ip, ror pc
   1680c:	andeq	r3, r0, r8, ror #2
   16810:	andeq	r0, r0, r4, asr #13

00016814 <flatcc_builder_string_edit@@Base>:
   16814:	ldr	r0, [r0, #16]
   16818:	bx	lr

0001681c <flatcc_builder_string_len@@Base>:
   1681c:	ldr	r3, [r0, #32]
   16820:	ldr	r0, [r3, #20]
   16824:	bx	lr

00016828 <flatcc_builder_table_add@@Base>:
   16828:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1682c:	mov	r4, r0
   16830:	ldr	r0, [r0, #32]
   16834:	ldrh	r0, [r0, #14]
   16838:	cmp	r0, #3
   1683c:	bne	16954 <flatcc_builder_table_add@@Base+0x12c>
   16840:	ldr	r0, [pc, #308]	; 1697c <flatcc_builder_table_add@@Base+0x154>
   16844:	cmp	r1, r0
   16848:	bhi	1692c <flatcc_builder_table_add@@Base+0x104>
   1684c:	ldrh	r0, [r4, #130]	; 0x82
   16850:	lsl	r8, r1, #1
   16854:	cmp	r0, r3
   16858:	ldr	r0, [r4, #4]
   1685c:	strhcc	r3, [r4, #130]	; 0x82
   16860:	add	lr, r0, r8
   16864:	ldrh	r7, [r0, r8]
   16868:	cmp	r7, #0
   1686c:	bne	16904 <flatcc_builder_table_add@@Base+0xdc>
   16870:	ldr	ip, [r4, #12]
   16874:	ldr	r9, [pc, #260]	; 16980 <flatcc_builder_table_add@@Base+0x158>
   16878:	eor	ip, ip, r1
   1687c:	ldr	r0, [r4, #20]
   16880:	mul	ip, r9, ip
   16884:	sub	r6, r3, #1
   16888:	eor	ip, ip, r2
   1688c:	rsb	r3, r3, #0
   16890:	add	r6, r6, r0
   16894:	and	r6, r6, r3
   16898:	mul	ip, r9, ip
   1689c:	ldr	r3, [r4, #24]
   168a0:	add	r2, r2, r6
   168a4:	cmp	r2, r3
   168a8:	uxth	r5, r1
   168ac:	str	ip, [r4, #12]
   168b0:	str	r2, [r4, #20]
   168b4:	bcs	168dc <flatcc_builder_table_add@@Base+0xb4>
   168b8:	add	r3, r6, #4
   168bc:	strh	r3, [lr]
   168c0:	ldrh	r3, [r4, #8]
   168c4:	ldr	r0, [r4, #16]
   168c8:	cmp	r3, r5
   168cc:	addls	r5, r5, #1
   168d0:	strhls	r5, [r4, #8]
   168d4:	add	r0, r0, r6
   168d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168dc:	add	r1, r2, #1
   168e0:	mov	r0, r4
   168e4:	ldr	r2, [pc, #152]	; 16984 <flatcc_builder_table_add@@Base+0x15c>
   168e8:	bl	12fc0 <_start@@Base+0xa7c>
   168ec:	cmp	r0, #0
   168f0:	ldreq	lr, [r4, #4]
   168f4:	addeq	lr, lr, r8
   168f8:	beq	168b8 <flatcc_builder_table_add@@Base+0x90>
   168fc:	mov	r0, r7
   16900:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16904:	ldr	r3, [pc, #124]	; 16988 <flatcc_builder_table_add@@Base+0x160>
   16908:	ldr	r1, [pc, #124]	; 1698c <flatcc_builder_table_add@@Base+0x164>
   1690c:	add	r3, pc, r3
   16910:	ldr	r0, [pc, #120]	; 16990 <flatcc_builder_table_add@@Base+0x168>
   16914:	add	r3, r3, #1136	; 0x470
   16918:	ldr	r2, [pc, #116]	; 16994 <flatcc_builder_table_add@@Base+0x16c>
   1691c:	add	r3, r3, #4
   16920:	add	r1, pc, r1
   16924:	add	r0, pc, r0
   16928:	bl	1234c <__assert_fail@plt>
   1692c:	ldr	r3, [pc, #100]	; 16998 <flatcc_builder_table_add@@Base+0x170>
   16930:	ldr	r1, [pc, #100]	; 1699c <flatcc_builder_table_add@@Base+0x174>
   16934:	add	r3, pc, r3
   16938:	ldr	r0, [pc, #96]	; 169a0 <flatcc_builder_table_add@@Base+0x178>
   1693c:	add	r3, r3, #1136	; 0x470
   16940:	ldr	r2, [pc, #92]	; 169a4 <flatcc_builder_table_add@@Base+0x17c>
   16944:	add	r3, r3, #4
   16948:	add	r1, pc, r1
   1694c:	add	r0, pc, r0
   16950:	bl	1234c <__assert_fail@plt>
   16954:	ldr	r3, [pc, #76]	; 169a8 <flatcc_builder_table_add@@Base+0x180>
   16958:	ldr	r1, [pc, #76]	; 169ac <flatcc_builder_table_add@@Base+0x184>
   1695c:	add	r3, pc, r3
   16960:	ldr	r0, [pc, #72]	; 169b0 <flatcc_builder_table_add@@Base+0x188>
   16964:	add	r3, r3, #1136	; 0x470
   16968:	ldr	r2, [pc, #68]	; 169b4 <flatcc_builder_table_add@@Base+0x18c>
   1696c:	add	r3, r3, #4
   16970:	add	r1, pc, r1
   16974:	add	r0, pc, r0
   16978:	bl	1234c <__assert_fail@plt>
   1697c:	strdeq	r7, [r0], -ip
   16980:			; <UNDEFINED> instruction: 0x9e3779b1
   16984:	strdeq	pc, [r0], -ip
   16988:	andeq	r2, r0, r8, lsl #14
   1698c:	andeq	r2, r0, r4, asr #28
   16990:	andeq	r2, r0, r8, asr #29
   16994:	strdeq	r0, [r0], -r8
   16998:	andeq	r2, r0, r0, ror #13
   1699c:	andeq	r2, r0, ip, lsl lr
   169a0:	andeq	r3, r0, ip, lsl #3
   169a4:	andeq	r0, r0, lr, ror #13
   169a8:			; <UNDEFINED> instruction: 0x000026b8
   169ac:	strdeq	r2, [r0], -r4
   169b0:	andeq	r3, r0, ip, asr #1
   169b4:	andeq	r0, r0, sp, ror #13

000169b8 <flatcc_builder_table_edit@@Base>:
   169b8:	ldr	r3, [r0, #32]
   169bc:	ldrh	r3, [r3, #14]
   169c0:	cmp	r3, #3
   169c4:	bne	169dc <flatcc_builder_table_edit@@Base+0x24>
   169c8:	ldr	r3, [r0, #20]
   169cc:	ldr	r0, [r0, #16]
   169d0:	sub	r1, r3, r1
   169d4:	add	r0, r0, r1
   169d8:	bx	lr
   169dc:	ldr	r3, [pc, #32]	; 16a04 <flatcc_builder_table_edit@@Base+0x4c>
   169e0:	ldr	r1, [pc, #32]	; 16a08 <flatcc_builder_table_edit@@Base+0x50>
   169e4:	ldr	r0, [pc, #32]	; 16a0c <flatcc_builder_table_edit@@Base+0x54>
   169e8:	add	r3, pc, r3
   169ec:	push	{r4, lr}
   169f0:	add	r3, r3, #1168	; 0x490
   169f4:	ldr	r2, [pc, #20]	; 16a10 <flatcc_builder_table_edit@@Base+0x58>
   169f8:	add	r1, pc, r1
   169fc:	add	r0, pc, r0
   16a00:	bl	1234c <__assert_fail@plt>
   16a04:	andeq	r2, r0, ip, lsr #12
   16a08:	andeq	r2, r0, ip, ror #26
   16a0c:	andeq	r3, r0, r4, asr #32
   16a10:	andeq	r0, r0, r2, lsl #14

00016a14 <flatcc_builder_table_add_copy@@Base>:
   16a14:	push	{r4, r5, r6, lr}
   16a18:	mov	r4, r3
   16a1c:	mov	r6, r2
   16a20:	ldrh	r3, [sp, #16]
   16a24:	mov	r2, r4
   16a28:	bl	16828 <flatcc_builder_table_add@@Base>
   16a2c:	subs	r5, r0, #0
   16a30:	beq	16a40 <flatcc_builder_table_add_copy@@Base+0x2c>
   16a34:	mov	r2, r4
   16a38:	mov	r1, r6
   16a3c:	bl	122bc <memcpy@plt>
   16a40:	mov	r0, r5
   16a44:	pop	{r4, r5, r6, pc}

00016a48 <flatcc_builder_table_add_offset@@Base>:
   16a48:	ldr	r3, [r0, #32]
   16a4c:	push	{r4, r5, r6, r7, r8, lr}
   16a50:	ldrh	r3, [r3, #14]
   16a54:	cmp	r3, #3
   16a58:	bne	16b70 <flatcc_builder_table_add_offset@@Base+0x128>
   16a5c:	ldr	r3, [pc, #308]	; 16b98 <flatcc_builder_table_add_offset@@Base+0x150>
   16a60:	cmp	r1, r3
   16a64:	bhi	16b48 <flatcc_builder_table_add_offset@@Base+0x100>
   16a68:	ldr	r3, [r0, #4]
   16a6c:	lsl	r7, r1, #1
   16a70:	mov	r4, r0
   16a74:	ldrh	r6, [r3, r7]
   16a78:	add	ip, r3, r7
   16a7c:	cmp	r6, #0
   16a80:	bne	16b20 <flatcc_builder_table_add_offset@@Base+0xd8>
   16a84:	ldr	r3, [r0, #12]
   16a88:	ldr	r2, [pc, #268]	; 16b9c <flatcc_builder_table_add_offset@@Base+0x154>
   16a8c:	eor	r3, r3, r1
   16a90:	ldr	r5, [r0, #20]
   16a94:	mul	r3, r2, r3
   16a98:	add	r5, r5, #3
   16a9c:	eor	r3, r3, #4
   16aa0:	bic	r5, r5, #3
   16aa4:	mul	r3, r2, r3
   16aa8:	ldr	lr, [r0, #24]
   16aac:	add	r2, r5, #4
   16ab0:	cmp	r2, lr
   16ab4:	uxth	r8, r1
   16ab8:	str	r3, [r0, #12]
   16abc:	str	r2, [r0, #20]
   16ac0:	bhi	16afc <flatcc_builder_table_add_offset@@Base+0xb4>
   16ac4:	uxth	r2, r5
   16ac8:	add	r3, r2, #4
   16acc:	strh	r3, [ip]
   16ad0:	ldrh	r3, [r4, #8]
   16ad4:	ldr	r0, [r4, #16]
   16ad8:	cmp	r3, r8
   16adc:	ldr	r3, [r4]
   16ae0:	addls	r1, r8, #1
   16ae4:	strhls	r1, [r4, #8]
   16ae8:	add	r1, r3, #2
   16aec:	str	r1, [r4]
   16af0:	add	r0, r0, r5
   16af4:	strh	r2, [r3]
   16af8:	pop	{r4, r5, r6, r7, r8, pc}
   16afc:	mov	r1, r2
   16b00:	ldr	r2, [pc, #152]	; 16ba0 <flatcc_builder_table_add_offset@@Base+0x158>
   16b04:	bl	12fc0 <_start@@Base+0xa7c>
   16b08:	cmp	r0, #0
   16b0c:	ldreq	ip, [r4, #4]
   16b10:	addeq	ip, ip, r7
   16b14:	beq	16ac4 <flatcc_builder_table_add_offset@@Base+0x7c>
   16b18:	mov	r0, r6
   16b1c:	pop	{r4, r5, r6, r7, r8, pc}
   16b20:	ldr	r3, [pc, #124]	; 16ba4 <flatcc_builder_table_add_offset@@Base+0x15c>
   16b24:	ldr	r1, [pc, #124]	; 16ba8 <flatcc_builder_table_add_offset@@Base+0x160>
   16b28:	add	r3, pc, r3
   16b2c:	ldr	r0, [pc, #120]	; 16bac <flatcc_builder_table_add_offset@@Base+0x164>
   16b30:	add	r3, r3, #1184	; 0x4a0
   16b34:	ldr	r2, [pc, #116]	; 16bb0 <flatcc_builder_table_add_offset@@Base+0x168>
   16b38:	add	r3, r3, #12
   16b3c:	add	r1, pc, r1
   16b40:	add	r0, pc, r0
   16b44:	bl	1234c <__assert_fail@plt>
   16b48:	ldr	r3, [pc, #100]	; 16bb4 <flatcc_builder_table_add_offset@@Base+0x16c>
   16b4c:	ldr	r1, [pc, #100]	; 16bb8 <flatcc_builder_table_add_offset@@Base+0x170>
   16b50:	add	r3, pc, r3
   16b54:	ldr	r0, [pc, #96]	; 16bbc <flatcc_builder_table_add_offset@@Base+0x174>
   16b58:	add	r3, r3, #1184	; 0x4a0
   16b5c:	ldr	r2, [pc, #92]	; 16bc0 <flatcc_builder_table_add_offset@@Base+0x178>
   16b60:	add	r3, r3, #12
   16b64:	add	r1, pc, r1
   16b68:	add	r0, pc, r0
   16b6c:	bl	1234c <__assert_fail@plt>
   16b70:	ldr	r3, [pc, #76]	; 16bc4 <flatcc_builder_table_add_offset@@Base+0x17c>
   16b74:	ldr	r1, [pc, #76]	; 16bc8 <flatcc_builder_table_add_offset@@Base+0x180>
   16b78:	add	r3, pc, r3
   16b7c:	ldr	r0, [pc, #72]	; 16bcc <flatcc_builder_table_add_offset@@Base+0x184>
   16b80:	add	r3, r3, #1184	; 0x4a0
   16b84:	ldr	r2, [pc, #68]	; 16bd0 <flatcc_builder_table_add_offset@@Base+0x188>
   16b88:	add	r3, r3, #12
   16b8c:	add	r1, pc, r1
   16b90:	add	r0, pc, r0
   16b94:	bl	1234c <__assert_fail@plt>
   16b98:	strdeq	r7, [r0], -ip
   16b9c:			; <UNDEFINED> instruction: 0x9e3779b1
   16ba0:	strdeq	pc, [r0], -ip
   16ba4:	andeq	r2, r0, ip, ror #9
   16ba8:	andeq	r2, r0, r8, lsr #24
   16bac:	andeq	r2, r0, ip, lsr #25
   16bb0:	andeq	r0, r0, fp, lsl r7
   16bb4:	andeq	r2, r0, r4, asr #9
   16bb8:	andeq	r2, r0, r0, lsl #24
   16bbc:	andeq	r2, r0, r0, ror pc
   16bc0:	andeq	r0, r0, r4, lsl r7
   16bc4:	muleq	r0, ip, r4
   16bc8:	ldrdeq	r2, [r0], -r8
   16bcc:			; <UNDEFINED> instruction: 0x00002eb0
   16bd0:	andeq	r0, r0, r3, lsl r7

00016bd4 <flatcc_builder_table_add_union@@Base>:
   16bd4:	push	{r4, r5, r6, r7, lr}
   16bd8:	sub	sp, sp, #12
   16bdc:	add	ip, sp, #8
   16be0:	stmdb	ip, {r2, r3}
   16be4:	ldr	r3, [r0, #32]
   16be8:	ldrb	r5, [sp]
   16bec:	ldr	r6, [sp, #4]
   16bf0:	ldrh	r3, [r3, #14]
   16bf4:	cmp	r3, #3
   16bf8:	bne	16c80 <flatcc_builder_table_add_union@@Base+0xac>
   16bfc:	cmp	r5, #0
   16c00:	mov	r4, r0
   16c04:	mov	r7, r1
   16c08:	beq	16c50 <flatcc_builder_table_add_union@@Base+0x7c>
   16c0c:	cmp	r6, #0
   16c10:	beq	16c24 <flatcc_builder_table_add_union@@Base+0x50>
   16c14:	bl	16a48 <flatcc_builder_table_add_offset@@Base>
   16c18:	cmp	r0, #0
   16c1c:	strne	r6, [r0]
   16c20:	beq	16cd0 <flatcc_builder_table_add_union@@Base+0xfc>
   16c24:	mov	r3, #1
   16c28:	sub	r1, r7, #1
   16c2c:	mov	r0, r4
   16c30:	mov	r2, r3
   16c34:	bl	16828 <flatcc_builder_table_add@@Base>
   16c38:	cmp	r0, #0
   16c3c:	beq	16ca8 <flatcc_builder_table_add_union@@Base+0xd4>
   16c40:	strb	r5, [r0]
   16c44:	mov	r0, #0
   16c48:	add	sp, sp, #12
   16c4c:	pop	{r4, r5, r6, r7, pc}
   16c50:	cmp	r6, #0
   16c54:	beq	16c24 <flatcc_builder_table_add_union@@Base+0x50>
   16c58:	ldr	r3, [pc, #152]	; 16cf8 <flatcc_builder_table_add_union@@Base+0x124>
   16c5c:	ldr	r1, [pc, #152]	; 16cfc <flatcc_builder_table_add_union@@Base+0x128>
   16c60:	add	r3, pc, r3
   16c64:	ldr	r0, [pc, #148]	; 16d00 <flatcc_builder_table_add_union@@Base+0x12c>
   16c68:	add	r3, r3, #1216	; 0x4c0
   16c6c:	ldr	r2, [pc, #144]	; 16d04 <flatcc_builder_table_add_union@@Base+0x130>
   16c70:	add	r3, r3, #12
   16c74:	add	r1, pc, r1
   16c78:	add	r0, pc, r0
   16c7c:	bl	1234c <__assert_fail@plt>
   16c80:	ldr	r3, [pc, #128]	; 16d08 <flatcc_builder_table_add_union@@Base+0x134>
   16c84:	ldr	r1, [pc, #128]	; 16d0c <flatcc_builder_table_add_union@@Base+0x138>
   16c88:	add	r3, pc, r3
   16c8c:	ldr	r0, [pc, #124]	; 16d10 <flatcc_builder_table_add_union@@Base+0x13c>
   16c90:	add	r3, r3, #1216	; 0x4c0
   16c94:	ldr	r2, [pc, #120]	; 16d14 <flatcc_builder_table_add_union@@Base+0x140>
   16c98:	add	r3, r3, #12
   16c9c:	add	r1, pc, r1
   16ca0:	add	r0, pc, r0
   16ca4:	bl	1234c <__assert_fail@plt>
   16ca8:	ldr	r3, [pc, #104]	; 16d18 <flatcc_builder_table_add_union@@Base+0x144>
   16cac:	ldr	r1, [pc, #104]	; 16d1c <flatcc_builder_table_add_union@@Base+0x148>
   16cb0:	add	r3, pc, r3
   16cb4:	ldr	r0, [pc, #100]	; 16d20 <flatcc_builder_table_add_union@@Base+0x14c>
   16cb8:	add	r3, r3, #1216	; 0x4c0
   16cbc:	ldr	r2, [pc, #96]	; 16d24 <flatcc_builder_table_add_union@@Base+0x150>
   16cc0:	add	r3, r3, #12
   16cc4:	add	r1, pc, r1
   16cc8:	add	r0, pc, r0
   16ccc:	bl	1234c <__assert_fail@plt>
   16cd0:	ldr	r3, [pc, #80]	; 16d28 <flatcc_builder_table_add_union@@Base+0x154>
   16cd4:	ldr	r1, [pc, #80]	; 16d2c <flatcc_builder_table_add_union@@Base+0x158>
   16cd8:	add	r3, pc, r3
   16cdc:	ldr	r0, [pc, #76]	; 16d30 <flatcc_builder_table_add_union@@Base+0x15c>
   16ce0:	add	r3, r3, #1216	; 0x4c0
   16ce4:	ldr	r2, [pc, #72]	; 16d34 <flatcc_builder_table_add_union@@Base+0x160>
   16ce8:	add	r3, r3, #12
   16cec:	add	r1, pc, r1
   16cf0:	add	r0, pc, r0
   16cf4:	bl	1234c <__assert_fail@plt>
   16cf8:			; <UNDEFINED> instruction: 0x000023b4
   16cfc:	strdeq	r2, [r0], -r0
   16d00:	andeq	r2, r0, r4, lsr #29
   16d04:	andeq	r0, r0, pc, ror #11
   16d08:	andeq	r2, r0, ip, lsl #7
   16d0c:	andeq	r2, r0, r8, asr #21
   16d10:	andeq	r2, r0, r0, lsr #27
   16d14:	andeq	r0, r0, lr, ror #11
   16d18:	andeq	r2, r0, r4, ror #6
   16d1c:	andeq	r2, r0, r0, lsr #21
   16d20:	andeq	r2, r0, r4, lsl #29
   16d24:	strdeq	r0, [r0], -r6
   16d28:	andeq	r2, r0, ip, lsr r3
   16d2c:	andeq	r2, r0, r8, ror sl
   16d30:	andeq	r2, r0, r0, asr lr
   16d34:	strdeq	r0, [r0], -r2

00016d38 <flatcc_builder_table_add_union_vector@@Base>:
   16d38:	push	{r4, r5, r6, r7, lr}
   16d3c:	sub	sp, sp, #12
   16d40:	add	ip, sp, #8
   16d44:	stmdb	ip, {r2, r3}
   16d48:	ldr	r3, [r0, #32]
   16d4c:	ldr	r4, [sp]
   16d50:	ldr	r6, [sp, #4]
   16d54:	ldrh	r3, [r3, #14]
   16d58:	cmp	r3, #3
   16d5c:	bne	16e00 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   16d60:	clz	r3, r6
   16d64:	clz	r2, r4
   16d68:	lsr	r3, r3, #5
   16d6c:	lsr	r2, r2, #5
   16d70:	cmp	r2, r3
   16d74:	beq	16d94 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16d78:	adds	r4, r4, #0
   16d7c:	movne	r4, #1
   16d80:	cmp	r4, r3
   16d84:	mvnne	r0, #0
   16d88:	beq	16e28 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   16d8c:	add	sp, sp, #12
   16d90:	pop	{r4, r5, r6, r7, pc}
   16d94:	cmp	r4, #0
   16d98:	moveq	r0, r4
   16d9c:	beq	16d8c <flatcc_builder_table_add_union_vector@@Base+0x54>
   16da0:	mov	r7, r1
   16da4:	sub	r1, r1, #1
   16da8:	mov	r5, r0
   16dac:	bl	16a48 <flatcc_builder_table_add_offset@@Base>
   16db0:	cmp	r0, #0
   16db4:	beq	16e50 <flatcc_builder_table_add_union_vector@@Base+0x118>
   16db8:	str	r4, [r0]
   16dbc:	mov	r1, r7
   16dc0:	mov	r0, r5
   16dc4:	bl	16a48 <flatcc_builder_table_add_offset@@Base>
   16dc8:	cmp	r0, #0
   16dcc:	strne	r6, [r0]
   16dd0:	movne	r0, #0
   16dd4:	bne	16d8c <flatcc_builder_table_add_union_vector@@Base+0x54>
   16dd8:	ldr	r3, [pc, #152]	; 16e78 <flatcc_builder_table_add_union_vector@@Base+0x140>
   16ddc:	ldr	r1, [pc, #152]	; 16e7c <flatcc_builder_table_add_union_vector@@Base+0x144>
   16de0:	add	r3, pc, r3
   16de4:	ldr	r0, [pc, #148]	; 16e80 <flatcc_builder_table_add_union_vector@@Base+0x148>
   16de8:	add	r3, r3, #1248	; 0x4e0
   16dec:	ldr	r2, [pc, #144]	; 16e84 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   16df0:	add	r3, r3, #12
   16df4:	add	r1, pc, r1
   16df8:	add	r0, pc, r0
   16dfc:	bl	1234c <__assert_fail@plt>
   16e00:	ldr	r3, [pc, #128]	; 16e88 <flatcc_builder_table_add_union_vector@@Base+0x150>
   16e04:	ldr	r1, [pc, #128]	; 16e8c <flatcc_builder_table_add_union_vector@@Base+0x154>
   16e08:	add	r3, pc, r3
   16e0c:	ldr	r0, [pc, #124]	; 16e90 <flatcc_builder_table_add_union_vector@@Base+0x158>
   16e10:	add	r3, r3, #1248	; 0x4e0
   16e14:	mov	r2, #1536	; 0x600
   16e18:	add	r3, r3, #12
   16e1c:	add	r1, pc, r1
   16e20:	add	r0, pc, r0
   16e24:	bl	1234c <__assert_fail@plt>
   16e28:	ldr	r3, [pc, #100]	; 16e94 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   16e2c:	ldr	r1, [pc, #100]	; 16e98 <flatcc_builder_table_add_union_vector@@Base+0x160>
   16e30:	add	r3, pc, r3
   16e34:	ldr	r0, [pc, #96]	; 16e9c <flatcc_builder_table_add_union_vector@@Base+0x164>
   16e38:	add	r3, r3, #1248	; 0x4e0
   16e3c:	ldr	r2, [pc, #92]	; 16ea0 <flatcc_builder_table_add_union_vector@@Base+0x168>
   16e40:	add	r3, r3, #12
   16e44:	add	r1, pc, r1
   16e48:	add	r0, pc, r0
   16e4c:	bl	1234c <__assert_fail@plt>
   16e50:	ldr	r3, [pc, #76]	; 16ea4 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   16e54:	ldr	r1, [pc, #76]	; 16ea8 <flatcc_builder_table_add_union_vector@@Base+0x170>
   16e58:	add	r3, pc, r3
   16e5c:	ldr	r0, [pc, #72]	; 16eac <flatcc_builder_table_add_union_vector@@Base+0x174>
   16e60:	add	r3, r3, #1248	; 0x4e0
   16e64:	ldr	r2, [pc, #68]	; 16eb0 <flatcc_builder_table_add_union_vector@@Base+0x178>
   16e68:	add	r3, r3, #12
   16e6c:	add	r1, pc, r1
   16e70:	add	r0, pc, r0
   16e74:	bl	1234c <__assert_fail@plt>
   16e78:	andeq	r2, r0, r4, lsr r2
   16e7c:	andeq	r2, r0, r0, ror r9
   16e80:	andeq	r2, r0, r8, asr #26
   16e84:	andeq	r0, r0, r8, lsl #12
   16e88:	andeq	r2, r0, ip, lsl #4
   16e8c:	andeq	r2, r0, r8, asr #18
   16e90:	andeq	r2, r0, r0, lsr #24
   16e94:	andeq	r2, r0, r4, ror #3
   16e98:	andeq	r2, r0, r0, lsr #18
   16e9c:	andeq	r2, r0, r0, lsl sp
   16ea0:	andeq	r0, r0, r1, lsl #12
   16ea4:			; <UNDEFINED> instruction: 0x000021bc
   16ea8:	strdeq	r2, [r0], -r8
   16eac:	ldrdeq	r2, [r0], -r0
   16eb0:	andeq	r0, r0, r4, lsl #12

00016eb4 <flatcc_builder_push_buffer_alignment@@Base>:
   16eb4:	mov	r3, r0
   16eb8:	mov	r2, #4
   16ebc:	ldrh	r0, [r0, #128]	; 0x80
   16ec0:	strh	r2, [r3, #128]	; 0x80
   16ec4:	bx	lr

00016ec8 <flatcc_builder_pop_buffer_alignment@@Base>:
   16ec8:	ldrh	r3, [r0, #128]	; 0x80
   16ecc:	cmp	r3, r1
   16ed0:	strhcc	r1, [r0, #128]	; 0x80
   16ed4:	bx	lr

00016ed8 <flatcc_builder_get_buffer_alignment@@Base>:
   16ed8:	ldrh	r0, [r0, #128]	; 0x80
   16edc:	bx	lr

00016ee0 <flatcc_builder_set_vtable_clustering@@Base>:
   16ee0:	clz	r1, r1
   16ee4:	lsr	r1, r1, #5
   16ee8:	str	r1, [r0, #180]	; 0xb4
   16eec:	bx	lr

00016ef0 <flatcc_builder_set_block_align@@Base>:
   16ef0:	strh	r1, [r0, #132]	; 0x84
   16ef4:	bx	lr

00016ef8 <flatcc_builder_get_level@@Base>:
   16ef8:	ldr	r0, [r0, #156]	; 0x9c
   16efc:	bx	lr

00016f00 <flatcc_builder_set_max_level@@Base>:
   16f00:	ldr	r3, [r0, #160]	; 0xa0
   16f04:	str	r1, [r0, #176]	; 0xb0
   16f08:	cmp	r1, r3
   16f0c:	strgt	r1, [r0, #160]	; 0xa0
   16f10:	bx	lr

00016f14 <flatcc_builder_get_buffer_size@@Base>:
   16f14:	ldr	r2, [r0, #140]	; 0x8c
   16f18:	ldr	r0, [r0, #136]	; 0x88
   16f1c:	sub	r0, r2, r0
   16f20:	bx	lr

00016f24 <flatcc_builder_get_buffer_start@@Base>:
   16f24:	ldr	r0, [r0, #136]	; 0x88
   16f28:	bx	lr

00016f2c <flatcc_builder_get_buffer_end@@Base>:
   16f2c:	ldr	r0, [r0, #140]	; 0x8c
   16f30:	bx	lr

00016f34 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16f34:	str	r1, [r0, #172]	; 0xac
   16f38:	bx	lr

00016f3c <flatcc_builder_set_identifier@@Base>:
   16f3c:	ldr	r3, [pc, #32]	; 16f64 <flatcc_builder_set_identifier@@Base+0x28>
   16f40:	cmp	r1, #0
   16f44:	add	r3, pc, r3
   16f48:	beq	16f58 <flatcc_builder_set_identifier@@Base+0x1c>
   16f4c:	ldr	r3, [r1]
   16f50:	str	r3, [r0, #168]	; 0xa8
   16f54:	bx	lr
   16f58:	ldr	r2, [pc, #8]	; 16f68 <flatcc_builder_set_identifier@@Base+0x2c>
   16f5c:	ldr	r1, [r3, r2]
   16f60:	b	16f4c <flatcc_builder_set_identifier@@Base+0x10>
   16f64:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   16f68:	andeq	r0, r0, r4, asr #32

00016f6c <flatcc_builder_get_type@@Base>:
   16f6c:	ldr	r0, [r0, #32]
   16f70:	cmp	r0, #0
   16f74:	ldrhne	r0, [r0, #14]
   16f78:	bx	lr

00016f7c <flatcc_builder_get_type_at@@Base>:
   16f7c:	cmp	r1, #0
   16f80:	ble	16fa8 <flatcc_builder_get_type_at@@Base+0x2c>
   16f84:	ldr	r3, [r0, #156]	; 0x9c
   16f88:	cmp	r1, r3
   16f8c:	bgt	16fa8 <flatcc_builder_get_type_at@@Base+0x2c>
   16f90:	sub	r1, r1, r3
   16f94:	ldr	r3, [r0, #32]
   16f98:	add	r1, r1, r1, lsl #3
   16f9c:	add	r1, r3, r1, lsl #2
   16fa0:	ldrh	r0, [r1, #14]
   16fa4:	bx	lr
   16fa8:	mov	r0, #0
   16fac:	bx	lr

00016fb0 <flatcc_builder_get_direct_buffer@@Base>:
   16fb0:	ldr	r3, [r0, #184]	; 0xb8
   16fb4:	cmp	r3, #0
   16fb8:	beq	16fcc <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16fbc:	ldr	r2, [r0, #188]	; 0xbc
   16fc0:	ldr	r3, [r0, #192]	; 0xc0
   16fc4:	cmp	r2, r3
   16fc8:	beq	16fe0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   16fcc:	cmp	r1, #0
   16fd0:	movne	r0, #0
   16fd4:	strne	r0, [r1]
   16fd8:	moveq	r0, r1
   16fdc:	bx	lr
   16fe0:	cmp	r1, #0
   16fe4:	ldrne	r3, [r0, #212]	; 0xd4
   16fe8:	ldr	r0, [r0, #196]	; 0xc4
   16fec:	strne	r3, [r1]
   16ff0:	bx	lr

00016ff4 <flatcc_builder_copy_buffer@@Base>:
   16ff4:	ldr	r3, [r0, #184]	; 0xb8
   16ff8:	cmp	r3, #0
   16ffc:	beq	1703c <flatcc_builder_copy_buffer@@Base+0x48>
   17000:	push	{r4, lr}
   17004:	add	r0, r0, #188	; 0xbc
   17008:	bl	1770c <flatcc_emitter_copy_buffer@@Base>
   1700c:	cmp	r0, #0
   17010:	popne	{r4, pc}
   17014:	ldr	r3, [pc, #40]	; 17044 <flatcc_builder_copy_buffer@@Base+0x50>
   17018:	ldr	r1, [pc, #40]	; 17048 <flatcc_builder_copy_buffer@@Base+0x54>
   1701c:	add	r3, pc, r3
   17020:	ldr	r0, [pc, #36]	; 1704c <flatcc_builder_copy_buffer@@Base+0x58>
   17024:	add	r3, r3, #1296	; 0x510
   17028:	ldr	r2, [pc, #32]	; 17050 <flatcc_builder_copy_buffer@@Base+0x5c>
   1702c:	add	r3, r3, #4
   17030:	add	r1, pc, r1
   17034:	add	r0, pc, r0
   17038:	bl	1234c <__assert_fail@plt>
   1703c:	mov	r0, r3
   17040:	bx	lr
   17044:	strdeq	r1, [r0], -r8
   17048:	andeq	r2, r0, r4, lsr r7
   1704c:	andeq	r2, r0, ip, asr #22
   17050:	andeq	r0, r0, r6, lsl #15

00017054 <flatcc_builder_finalize_buffer@@Base>:
   17054:	push	{r4, r5, r6, lr}
   17058:	mov	r5, r1
   1705c:	mov	r6, r0
   17060:	bl	16f14 <flatcc_builder_get_buffer_size@@Base>
   17064:	cmp	r5, #0
   17068:	strne	r0, [r5]
   1706c:	mov	r4, r0
   17070:	bl	122e0 <malloc@plt>
   17074:	subs	r5, r0, #0
   17078:	beq	1709c <flatcc_builder_finalize_buffer@@Base+0x48>
   1707c:	mov	r2, r4
   17080:	mov	r0, r6
   17084:	mov	r1, r5
   17088:	bl	16ff4 <flatcc_builder_copy_buffer@@Base>
   1708c:	cmp	r0, #0
   17090:	beq	170c0 <flatcc_builder_finalize_buffer@@Base+0x6c>
   17094:	mov	r0, r5
   17098:	pop	{r4, r5, r6, pc}
   1709c:	ldr	r3, [pc, #64]	; 170e4 <flatcc_builder_finalize_buffer@@Base+0x90>
   170a0:	ldr	r1, [pc, #64]	; 170e8 <flatcc_builder_finalize_buffer@@Base+0x94>
   170a4:	ldr	r0, [pc, #64]	; 170ec <flatcc_builder_finalize_buffer@@Base+0x98>
   170a8:	add	r3, pc, r3
   170ac:	ldr	r2, [pc, #60]	; 170f0 <flatcc_builder_finalize_buffer@@Base+0x9c>
   170b0:	add	r3, r3, #1328	; 0x530
   170b4:	add	r1, pc, r1
   170b8:	add	r0, pc, r0
   170bc:	bl	1234c <__assert_fail@plt>
   170c0:	ldr	r3, [pc, #44]	; 170f4 <flatcc_builder_finalize_buffer@@Base+0xa0>
   170c4:	ldr	r1, [pc, #44]	; 170f8 <flatcc_builder_finalize_buffer@@Base+0xa4>
   170c8:	ldr	r0, [pc, #44]	; 170fc <flatcc_builder_finalize_buffer@@Base+0xa8>
   170cc:	add	r3, pc, r3
   170d0:	ldr	r2, [pc, #40]	; 17100 <flatcc_builder_finalize_buffer@@Base+0xac>
   170d4:	add	r3, r3, #1328	; 0x530
   170d8:	add	r1, pc, r1
   170dc:	add	r0, pc, r0
   170e0:	bl	1234c <__assert_fail@plt>
   170e4:	andeq	r1, r0, ip, ror #30
   170e8:			; <UNDEFINED> instruction: 0x000026b0
   170ec:	andeq	r2, r0, r4, lsr r7
   170f0:	muleq	r0, r8, r7
   170f4:	andeq	r1, r0, r8, asr #30
   170f8:	andeq	r2, r0, ip, lsl #13
   170fc:	andeq	r2, r0, r0, lsl r7
   17100:	muleq	r0, ip, r7

00017104 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17104:	push	{r4, r5, r6, r7, lr}
   17108:	sub	sp, sp, #12
   1710c:	mov	r6, r1
   17110:	mov	r7, r0
   17114:	bl	16f14 <flatcc_builder_get_buffer_size@@Base>
   17118:	cmp	r6, #0
   1711c:	strne	r0, [r6]
   17120:	mov	r4, r0
   17124:	mov	r0, r7
   17128:	bl	16ed8 <flatcc_builder_get_buffer_alignment@@Base>
   1712c:	sub	r4, r4, #1
   17130:	mov	r1, r0
   17134:	rsb	r3, r0, #0
   17138:	add	r4, r4, r0
   1713c:	add	r0, sp, #8
   17140:	cmp	r1, #4
   17144:	and	r4, r4, r3
   17148:	mov	r3, #0
   1714c:	movcc	r1, #4
   17150:	mov	r2, r4
   17154:	str	r3, [r0, #-4]!
   17158:	bl	12310 <posix_memalign@plt>
   1715c:	cmp	r0, #0
   17160:	beq	17190 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   17164:	ldr	r0, [sp, #4]
   17168:	cmp	r0, #0
   1716c:	beq	17174 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   17170:	bl	122b0 <free@plt>
   17174:	cmp	r6, #0
   17178:	moveq	r5, r6
   1717c:	movne	r5, #0
   17180:	strne	r5, [r6]
   17184:	mov	r0, r5
   17188:	add	sp, sp, #12
   1718c:	pop	{r4, r5, r6, r7, pc}
   17190:	ldr	r5, [sp, #4]
   17194:	cmp	r5, #0
   17198:	beq	17174 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   1719c:	mov	r2, r4
   171a0:	mov	r0, r7
   171a4:	mov	r1, r5
   171a8:	bl	16ff4 <flatcc_builder_copy_buffer@@Base>
   171ac:	cmp	r0, #0
   171b0:	bne	17184 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   171b4:	mov	r0, r5
   171b8:	b	17170 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

000171bc <flatcc_builder_aligned_alloc@@Base>:
   171bc:	push	{r4, lr}
   171c0:	sub	sp, sp, #8
   171c4:	add	r3, sp, #8
   171c8:	cmp	r0, #4
   171cc:	mov	r4, #0
   171d0:	mov	r2, r1
   171d4:	str	r4, [r3, #-4]!
   171d8:	movcs	r1, r0
   171dc:	movcc	r1, #4
   171e0:	mov	r0, r3
   171e4:	bl	12310 <posix_memalign@plt>
   171e8:	cmp	r0, r4
   171ec:	ldr	r0, [sp, #4]
   171f0:	beq	17204 <flatcc_builder_aligned_alloc@@Base+0x48>
   171f4:	cmp	r0, #0
   171f8:	beq	17204 <flatcc_builder_aligned_alloc@@Base+0x48>
   171fc:	bl	122b0 <free@plt>
   17200:	mov	r0, r4
   17204:	add	sp, sp, #8
   17208:	pop	{r4, pc}

0001720c <flatcc_builder_aligned_free@@Base>:
   1720c:	b	122b0 <free@plt>

00017210 <flatcc_builder_get_emit_context@@Base>:
   17210:	ldr	r0, [r0, #36]	; 0x24
   17214:	bx	lr

00017218 <flatcc_emitter_recycle_page@@Base>:
   17218:	ldr	r3, [r0]
   1721c:	cmp	r3, r1
   17220:	beq	17268 <flatcc_emitter_recycle_page@@Base+0x50>
   17224:	ldr	r2, [r0, #4]
   17228:	cmp	r1, r2
   1722c:	beq	17268 <flatcc_emitter_recycle_page@@Base+0x50>
   17230:	ldr	ip, [r1, #2944]	; 0xb80
   17234:	ldr	r2, [r1, #2948]	; 0xb84
   17238:	push	{lr}		; (str lr, [sp, #-4]!)
   1723c:	mov	r0, #0
   17240:	str	r2, [ip, #2948]	; 0xb84
   17244:	ldr	r2, [r3, #2948]	; 0xb84
   17248:	ldr	lr, [r1, #2948]	; 0xb84
   1724c:	str	ip, [lr, #2944]	; 0xb80
   17250:	str	r3, [r1, #2944]	; 0xb80
   17254:	str	r2, [r1, #2948]	; 0xb84
   17258:	str	r1, [r2, #2944]	; 0xb80
   1725c:	ldr	r3, [r1, #2944]	; 0xb80
   17260:	str	r1, [r3, #2948]	; 0xb84
   17264:	pop	{pc}		; (ldr pc, [sp], #4)
   17268:	mvn	r0, #0
   1726c:	bx	lr

00017270 <flatcc_emitter_reset@@Base>:
   17270:	ldr	r2, [r0]
   17274:	cmp	r2, #0
   17278:	bxeq	lr
   1727c:	ldr	r3, [r0, #32]
   17280:	mov	r1, #1472	; 0x5c0
   17284:	push	{r4, lr}
   17288:	cmp	r3, #0
   1728c:	str	r1, [r0, #12]
   17290:	str	r1, [r0, #20]
   17294:	ldr	r1, [r0, #24]
   17298:	add	ip, r2, #1472	; 0x5c0
   1729c:	moveq	r3, r1
   172a0:	stmib	r0, {r2, ip}
   172a4:	str	ip, [r0, #16]
   172a8:	add	ip, r3, r3, lsl #1
   172ac:	lsr	r3, r1, #2
   172b0:	add	r3, r3, ip, lsr #2
   172b4:	ldr	ip, [r0, #28]
   172b8:	ldr	lr, [pc, #104]	; 17328 <flatcc_emitter_reset@@Base+0xb8>
   172bc:	cmp	ip, r3, lsl #1
   172c0:	mov	r1, #0
   172c4:	str	lr, [r2, #2952]	; 0xb88
   172c8:	str	r3, [r0, #32]
   172cc:	str	r1, [r0, #24]
   172d0:	popls	{r4, pc}
   172d4:	ldr	r3, [r2, #2944]	; 0xb80
   172d8:	mov	r4, r0
   172dc:	cmp	r2, r3
   172e0:	popeq	{r4, pc}
   172e4:	ldr	r1, [r3, #2944]	; 0xb80
   172e8:	mov	r0, r3
   172ec:	str	r1, [r2, #2944]	; 0xb80
   172f0:	ldr	r3, [r3, #2944]	; 0xb80
   172f4:	str	r2, [r3, #2948]	; 0xb84
   172f8:	bl	122b0 <free@plt>
   172fc:	ldr	r3, [r4, #28]
   17300:	ldr	r2, [r4, #32]
   17304:	sub	r3, r3, #2944	; 0xb80
   17308:	str	r3, [r4, #28]
   1730c:	cmp	r3, r2, lsl #1
   17310:	popls	{r4, pc}
   17314:	ldm	r4, {r1, r2}
   17318:	ldr	r3, [r2, #2944]	; 0xb80
   1731c:	cmp	r3, r1
   17320:	bne	172e4 <flatcc_emitter_reset@@Base+0x74>
   17324:	pop	{r4, pc}
   17328:			; <UNDEFINED> instruction: 0xfffffa40

0001732c <flatcc_emitter_clear@@Base>:
   1732c:	ldr	r3, [r0]
   17330:	cmp	r3, #0
   17334:	bxeq	lr
   17338:	ldr	r2, [r3, #2948]	; 0xb84
   1733c:	mov	r1, #0
   17340:	push	{r4, r5, r6, lr}
   17344:	mov	r5, r0
   17348:	str	r1, [r2, #2944]	; 0xb80
   1734c:	ldr	r4, [r3, #2944]	; 0xb80
   17350:	cmp	r4, r1
   17354:	bne	17360 <flatcc_emitter_clear@@Base+0x34>
   17358:	b	17390 <flatcc_emitter_clear@@Base+0x64>
   1735c:	mov	r4, r3
   17360:	ldr	r0, [r4, #2948]	; 0xb84
   17364:	bl	122b0 <free@plt>
   17368:	ldr	r3, [r4, #2944]	; 0xb80
   1736c:	cmp	r3, #0
   17370:	bne	1735c <flatcc_emitter_clear@@Base+0x30>
   17374:	mov	r0, r4
   17378:	bl	122b0 <free@plt>
   1737c:	mov	r0, r5
   17380:	mov	r2, #36	; 0x24
   17384:	mov	r1, #0
   17388:	pop	{r4, r5, r6, lr}
   1738c:	b	1231c <memset@plt>
   17390:	mov	r4, r3
   17394:	b	17374 <flatcc_emitter_clear@@Base+0x48>

00017398 <flatcc_emitter@@Base>:
   17398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1739c:	sub	sp, sp, #12
   173a0:	mov	r4, r0
   173a4:	ldr	ip, [sp, #48]	; 0x30
   173a8:	ldr	r0, [r0, #24]
   173ac:	cmp	r3, #0
   173b0:	add	r0, r0, ip
   173b4:	str	r0, [r4, #24]
   173b8:	blt	1757c <flatcc_emitter@@Base+0x1e4>
   173bc:	ldr	r0, [r4, #20]
   173c0:	cmp	ip, r0
   173c4:	bls	17450 <flatcc_emitter@@Base+0xb8>
   173c8:	cmp	r2, #0
   173cc:	addne	r7, r1, #8
   173d0:	movne	r8, r2
   173d4:	movne	r9, #2944	; 0xb80
   173d8:	beq	17444 <flatcc_emitter@@Base+0xac>
   173dc:	ldr	r6, [r7, #-4]
   173e0:	ldr	sl, [r7, #-8]
   173e4:	cmp	r6, #0
   173e8:	beq	17438 <flatcc_emitter@@Base+0xa0>
   173ec:	cmp	r0, r6
   173f0:	mov	r5, r0
   173f4:	bcs	17498 <flatcc_emitter@@Base+0x100>
   173f8:	cmp	r0, #0
   173fc:	beq	174a4 <flatcc_emitter@@Base+0x10c>
   17400:	sub	r6, r6, r0
   17404:	mov	r1, sl
   17408:	mov	r2, r5
   1740c:	ldr	r0, [r4, #16]
   17410:	bl	122bc <memcpy@plt>
   17414:	ldr	r3, [r4, #16]
   17418:	ldr	r0, [r4, #20]
   1741c:	add	r3, r3, r5
   17420:	sub	r0, r0, r5
   17424:	cmp	r6, #0
   17428:	add	sl, sl, r5
   1742c:	str	r3, [r4, #16]
   17430:	str	r0, [r4, #20]
   17434:	bne	173ec <flatcc_emitter@@Base+0x54>
   17438:	subs	r8, r8, #1
   1743c:	add	r7, r7, #8
   17440:	bne	173dc <flatcc_emitter@@Base+0x44>
   17444:	mov	r0, #0
   17448:	add	sp, sp, #12
   1744c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17450:	ldr	r3, [r4, #16]
   17454:	sub	r0, r0, ip
   17458:	add	ip, r3, ip
   1745c:	str	r0, [r4, #20]
   17460:	str	ip, [r4, #16]
   17464:	cmp	r2, #0
   17468:	addne	r4, r1, #8
   1746c:	movne	r7, r2
   17470:	beq	17444 <flatcc_emitter@@Base+0xac>
   17474:	ldmdb	r4, {r1, r2}
   17478:	mov	r0, r3
   1747c:	bl	122bc <memcpy@plt>
   17480:	ldr	r2, [r4, #-4]
   17484:	subs	r7, r7, #1
   17488:	add	r4, r4, #8
   1748c:	add	r3, r0, r2
   17490:	bne	17474 <flatcc_emitter@@Base+0xdc>
   17494:	b	17444 <flatcc_emitter@@Base+0xac>
   17498:	mov	r5, r6
   1749c:	mov	r6, #0
   174a0:	b	17404 <flatcc_emitter@@Base+0x6c>
   174a4:	ldr	fp, [r4, #4]
   174a8:	cmp	fp, #0
   174ac:	beq	1751c <flatcc_emitter@@Base+0x184>
   174b0:	ldr	r5, [fp, #2944]	; 0xb80
   174b4:	ldr	r3, [r4]
   174b8:	cmp	r5, r3
   174bc:	beq	174e4 <flatcc_emitter@@Base+0x14c>
   174c0:	str	r5, [r4, #4]
   174c4:	ldr	r3, [r5, #2948]	; 0xb84
   174c8:	mov	r0, r9
   174cc:	str	r5, [r4, #16]
   174d0:	ldr	r3, [r3, #2952]	; 0xb88
   174d4:	str	r9, [r4, #20]
   174d8:	add	r3, r3, #2944	; 0xb80
   174dc:	str	r3, [r5, #2952]	; 0xb88
   174e0:	b	173ec <flatcc_emitter@@Base+0x54>
   174e4:	ldr	r0, [pc, #540]	; 17708 <flatcc_emitter@@Base+0x370>
   174e8:	bl	122e0 <malloc@plt>
   174ec:	cmp	r0, #0
   174f0:	beq	1752c <flatcc_emitter@@Base+0x194>
   174f4:	ldr	r3, [r4, #28]
   174f8:	str	r5, [r0, #2944]	; 0xb80
   174fc:	add	r3, r3, #2944	; 0xb80
   17500:	str	fp, [r0, #2948]	; 0xb84
   17504:	str	r3, [r4, #28]
   17508:	str	r0, [r5, #2948]	; 0xb84
   1750c:	str	r0, [fp, #2944]	; 0xb80
   17510:	mov	r5, r0
   17514:	str	r0, [r4, #4]
   17518:	b	174c4 <flatcc_emitter@@Base+0x12c>
   1751c:	ldr	r0, [pc, #484]	; 17708 <flatcc_emitter@@Base+0x370>
   17520:	bl	122e0 <malloc@plt>
   17524:	cmp	r0, #0
   17528:	bne	17538 <flatcc_emitter@@Base+0x1a0>
   1752c:	mvn	r0, #0
   17530:	add	sp, sp, #12
   17534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17538:	mov	r2, #1472	; 0x5c0
   1753c:	ldr	r3, [r4, #28]
   17540:	str	r2, [r4, #12]
   17544:	str	r2, [r4, #20]
   17548:	sub	r2, r2, #2944	; 0xb80
   1754c:	str	r2, [r0, #2952]	; 0xb88
   17550:	str	r0, [r4]
   17554:	add	r3, r3, #2944	; 0xb80
   17558:	str	r0, [r4, #4]
   1755c:	str	r0, [r0, #2944]	; 0xb80
   17560:	str	r0, [r0, #2948]	; 0xb84
   17564:	add	r0, r0, #1472	; 0x5c0
   17568:	str	r0, [r4, #8]
   1756c:	str	r0, [r4, #16]
   17570:	str	r3, [r4, #28]
   17574:	mov	r0, #1472	; 0x5c0
   17578:	b	173ec <flatcc_emitter@@Base+0x54>
   1757c:	ldr	r0, [r4, #12]
   17580:	cmp	ip, r0
   17584:	bls	17604 <flatcc_emitter@@Base+0x26c>
   17588:	add	r6, r1, r2, lsl #3
   1758c:	mov	r7, r2
   17590:	mov	r9, #2944	; 0xb80
   17594:	mov	r8, #0
   17598:	cmp	r7, #0
   1759c:	beq	17444 <flatcc_emitter@@Base+0xac>
   175a0:	ldr	r5, [r6, #-4]
   175a4:	ldr	sl, [r6, #-8]
   175a8:	cmp	r5, #0
   175ac:	add	sl, sl, r5
   175b0:	beq	175f8 <flatcc_emitter@@Base+0x260>
   175b4:	ldr	r2, [r4, #12]
   175b8:	cmp	r2, r5
   175bc:	bcs	1761c <flatcc_emitter@@Base+0x284>
   175c0:	cmp	r2, #0
   175c4:	beq	1762c <flatcc_emitter@@Base+0x294>
   175c8:	sub	r5, r5, r2
   175cc:	mov	r1, r8
   175d0:	ldr	r0, [r4, #8]
   175d4:	rsb	r3, r2, #0
   175d8:	add	r0, r0, r3
   175dc:	add	sl, sl, r3
   175e0:	str	r1, [r4, #12]
   175e4:	str	r0, [r4, #8]
   175e8:	mov	r1, sl
   175ec:	bl	122bc <memcpy@plt>
   175f0:	cmp	r5, #0
   175f4:	bne	175b4 <flatcc_emitter@@Base+0x21c>
   175f8:	sub	r6, r6, #8
   175fc:	sub	r7, r7, #1
   17600:	b	17598 <flatcc_emitter@@Base+0x200>
   17604:	ldr	r3, [r4, #8]
   17608:	sub	r0, r0, ip
   1760c:	sub	r3, r3, ip
   17610:	str	r0, [r4, #12]
   17614:	str	r3, [r4, #8]
   17618:	b	17464 <flatcc_emitter@@Base+0xcc>
   1761c:	sub	r1, r2, r5
   17620:	mov	r2, r5
   17624:	mov	r5, #0
   17628:	b	175d0 <flatcc_emitter@@Base+0x238>
   1762c:	ldr	r3, [r4]
   17630:	cmp	r3, #0
   17634:	beq	176b8 <flatcc_emitter@@Base+0x320>
   17638:	ldr	fp, [r3, #2948]	; 0xb84
   1763c:	ldr	r2, [r4, #4]
   17640:	cmp	fp, r2
   17644:	beq	17678 <flatcc_emitter@@Base+0x2e0>
   17648:	ldr	r3, [r3, #2952]	; 0xb88
   1764c:	sub	r3, r3, #2944	; 0xb80
   17650:	str	r3, [fp, #2952]	; 0xb88
   17654:	str	fp, [r4]
   17658:	ldr	r3, [fp, #2944]	; 0xb80
   1765c:	add	r2, fp, #2944	; 0xb80
   17660:	str	r9, [r4, #12]
   17664:	ldr	r3, [r3, #2952]	; 0xb88
   17668:	str	r2, [r4, #8]
   1766c:	sub	r3, r3, #2944	; 0xb80
   17670:	str	r3, [fp, #2952]	; 0xb88
   17674:	b	175b4 <flatcc_emitter@@Base+0x21c>
   17678:	ldr	r0, [pc, #136]	; 17708 <flatcc_emitter@@Base+0x370>
   1767c:	str	r3, [sp, #4]
   17680:	bl	122e0 <malloc@plt>
   17684:	ldr	r3, [sp, #4]
   17688:	cmp	r0, #0
   1768c:	beq	1752c <flatcc_emitter@@Base+0x194>
   17690:	ldr	r2, [r4, #28]
   17694:	str	fp, [r0, #2948]	; 0xb84
   17698:	add	r2, r2, #2944	; 0xb80
   1769c:	str	r3, [r0, #2944]	; 0xb80
   176a0:	str	r2, [r4, #28]
   176a4:	str	r0, [r3, #2948]	; 0xb84
   176a8:	str	r0, [fp, #2944]	; 0xb80
   176ac:	str	r0, [r4]
   176b0:	mov	fp, r0
   176b4:	b	17658 <flatcc_emitter@@Base+0x2c0>
   176b8:	ldr	r0, [pc, #72]	; 17708 <flatcc_emitter@@Base+0x370>
   176bc:	bl	122e0 <malloc@plt>
   176c0:	cmp	r0, #0
   176c4:	beq	1752c <flatcc_emitter@@Base+0x194>
   176c8:	mov	r2, #1472	; 0x5c0
   176cc:	ldr	r3, [r4, #28]
   176d0:	str	r2, [r4, #12]
   176d4:	str	r2, [r4, #20]
   176d8:	sub	r2, r2, #2944	; 0xb80
   176dc:	str	r2, [r0, #2952]	; 0xb88
   176e0:	str	r0, [r4]
   176e4:	add	r3, r3, #2944	; 0xb80
   176e8:	str	r0, [r4, #4]
   176ec:	str	r0, [r0, #2944]	; 0xb80
   176f0:	str	r0, [r0, #2948]	; 0xb84
   176f4:	add	r0, r0, #1472	; 0x5c0
   176f8:	str	r0, [r4, #8]
   176fc:	str	r0, [r4, #16]
   17700:	str	r3, [r4, #28]
   17704:	b	175b4 <flatcc_emitter@@Base+0x21c>
   17708:	andeq	r0, r0, ip, lsl #23

0001770c <flatcc_emitter_copy_buffer@@Base>:
   1770c:	ldr	ip, [r0, #24]
   17710:	cmp	ip, r2
   17714:	bhi	177b0 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17718:	ldr	r2, [r0]
   1771c:	cmp	r2, #0
   17720:	beq	177b0 <flatcc_emitter_copy_buffer@@Base+0xa4>
   17724:	mov	r3, r1
   17728:	ldr	r1, [r0, #4]
   1772c:	push	{r4, r5, r6, lr}
   17730:	cmp	r2, r1
   17734:	mov	r5, r0
   17738:	beq	177bc <flatcc_emitter_copy_buffer@@Base+0xb0>
   1773c:	ldr	r4, [r0, #12]
   17740:	ldr	r1, [r5, #8]
   17744:	rsb	r4, r4, #2944	; 0xb80
   17748:	mov	r2, r4
   1774c:	mov	r0, r3
   17750:	bl	122bc <memcpy@plt>
   17754:	ldr	r2, [r5]
   17758:	ldr	r1, [r5, #4]
   1775c:	add	r3, r0, r4
   17760:	ldr	r4, [r2, #2944]	; 0xb80
   17764:	cmp	r4, r1
   17768:	beq	17794 <flatcc_emitter_copy_buffer@@Base+0x88>
   1776c:	mov	r6, #2944	; 0xb80
   17770:	mov	r1, r4
   17774:	mov	r0, r3
   17778:	mov	r2, r6
   1777c:	bl	122bc <memcpy@plt>
   17780:	ldr	r4, [r4, #2944]	; 0xb80
   17784:	ldr	r1, [r5, #4]
   17788:	cmp	r1, r4
   1778c:	add	r3, r0, #2944	; 0xb80
   17790:	bne	17770 <flatcc_emitter_copy_buffer@@Base+0x64>
   17794:	ldr	r2, [r5, #20]
   17798:	mov	r0, r3
   1779c:	rsb	r2, r2, #2944	; 0xb80
   177a0:	bl	122bc <memcpy@plt>
   177a4:	mov	r3, r0
   177a8:	mov	r0, r3
   177ac:	pop	{r4, r5, r6, pc}
   177b0:	mov	r3, #0
   177b4:	mov	r0, r3
   177b8:	bx	lr
   177bc:	ldr	r1, [r0, #8]
   177c0:	mov	r2, ip
   177c4:	mov	r0, r3
   177c8:	bl	122bc <memcpy@plt>
   177cc:	mov	r3, r0
   177d0:	b	177a8 <flatcc_emitter_copy_buffer@@Base+0x9c>
   177d4:	add	r1, r1, #2
   177d8:	ldrh	ip, [r0, #22]
   177dc:	lsl	r1, r1, #1
   177e0:	uxth	r1, r1
   177e4:	cmp	ip, r1
   177e8:	bls	17814 <flatcc_emitter_copy_buffer@@Base+0x108>
   177ec:	ldr	ip, [r0, #12]
   177f0:	ldrh	r1, [ip, r1]
   177f4:	cmp	r1, #0
   177f8:	beq	17814 <flatcc_emitter_copy_buffer@@Base+0x108>
   177fc:	ldrh	r2, [r0, #20]
   17800:	add	ip, r1, #4
   17804:	cmp	ip, r2
   17808:	bls	1782c <flatcc_emitter_copy_buffer@@Base+0x120>
   1780c:	mov	r0, #13
   17810:	bx	lr
   17814:	mov	r1, #0
   17818:	cmp	r2, r1
   1781c:	movne	r0, #4
   17820:	moveq	r0, r1
   17824:	str	r1, [r3]
   17828:	bx	lr
   1782c:	ldr	r2, [r0, #16]
   17830:	add	r1, r1, r2
   17834:	ands	r0, r1, #3
   17838:	beq	17844 <flatcc_emitter_copy_buffer@@Base+0x138>
   1783c:	mov	r0, #12
   17840:	bx	lr
   17844:	str	r1, [r3]
   17848:	bx	lr

0001784c <flatcc_verify_error_string@@Base>:
   1784c:	cmp	r0, #36	; 0x24
   17850:	addls	pc, pc, r0, lsl #2
   17854:	b	17aa8 <flatcc_verify_error_string@@Base+0x25c>
   17858:	b	178ec <flatcc_verify_error_string@@Base+0xa0>
   1785c:	b	17a9c <flatcc_verify_error_string@@Base+0x250>
   17860:	b	17a90 <flatcc_verify_error_string@@Base+0x244>
   17864:	b	17a84 <flatcc_verify_error_string@@Base+0x238>
   17868:	b	17a78 <flatcc_verify_error_string@@Base+0x22c>
   1786c:	b	17a6c <flatcc_verify_error_string@@Base+0x220>
   17870:	b	17a60 <flatcc_verify_error_string@@Base+0x214>
   17874:	b	17a54 <flatcc_verify_error_string@@Base+0x208>
   17878:	b	17a48 <flatcc_verify_error_string@@Base+0x1fc>
   1787c:	b	17a3c <flatcc_verify_error_string@@Base+0x1f0>
   17880:	b	17a30 <flatcc_verify_error_string@@Base+0x1e4>
   17884:	b	17a24 <flatcc_verify_error_string@@Base+0x1d8>
   17888:	b	17a18 <flatcc_verify_error_string@@Base+0x1cc>
   1788c:	b	17a0c <flatcc_verify_error_string@@Base+0x1c0>
   17890:	b	17a00 <flatcc_verify_error_string@@Base+0x1b4>
   17894:	b	179f4 <flatcc_verify_error_string@@Base+0x1a8>
   17898:	b	179e8 <flatcc_verify_error_string@@Base+0x19c>
   1789c:	b	179dc <flatcc_verify_error_string@@Base+0x190>
   178a0:	b	179d0 <flatcc_verify_error_string@@Base+0x184>
   178a4:	b	179c4 <flatcc_verify_error_string@@Base+0x178>
   178a8:	b	179b8 <flatcc_verify_error_string@@Base+0x16c>
   178ac:	b	179ac <flatcc_verify_error_string@@Base+0x160>
   178b0:	b	179a0 <flatcc_verify_error_string@@Base+0x154>
   178b4:	b	17994 <flatcc_verify_error_string@@Base+0x148>
   178b8:	b	17988 <flatcc_verify_error_string@@Base+0x13c>
   178bc:	b	1797c <flatcc_verify_error_string@@Base+0x130>
   178c0:	b	17970 <flatcc_verify_error_string@@Base+0x124>
   178c4:	b	17964 <flatcc_verify_error_string@@Base+0x118>
   178c8:	b	17958 <flatcc_verify_error_string@@Base+0x10c>
   178cc:	b	1794c <flatcc_verify_error_string@@Base+0x100>
   178d0:	b	17940 <flatcc_verify_error_string@@Base+0xf4>
   178d4:	b	17934 <flatcc_verify_error_string@@Base+0xe8>
   178d8:	b	17928 <flatcc_verify_error_string@@Base+0xdc>
   178dc:	b	1791c <flatcc_verify_error_string@@Base+0xd0>
   178e0:	b	17910 <flatcc_verify_error_string@@Base+0xc4>
   178e4:	b	17904 <flatcc_verify_error_string@@Base+0xb8>
   178e8:	b	178f8 <flatcc_verify_error_string@@Base+0xac>
   178ec:	ldr	r0, [pc, #448]	; 17ab4 <flatcc_verify_error_string@@Base+0x268>
   178f0:	add	r0, pc, r0
   178f4:	bx	lr
   178f8:	ldr	r0, [pc, #440]	; 17ab8 <flatcc_verify_error_string@@Base+0x26c>
   178fc:	add	r0, pc, r0
   17900:	bx	lr
   17904:	ldr	r0, [pc, #432]	; 17abc <flatcc_verify_error_string@@Base+0x270>
   17908:	add	r0, pc, r0
   1790c:	bx	lr
   17910:	ldr	r0, [pc, #424]	; 17ac0 <flatcc_verify_error_string@@Base+0x274>
   17914:	add	r0, pc, r0
   17918:	bx	lr
   1791c:	ldr	r0, [pc, #416]	; 17ac4 <flatcc_verify_error_string@@Base+0x278>
   17920:	add	r0, pc, r0
   17924:	bx	lr
   17928:	ldr	r0, [pc, #408]	; 17ac8 <flatcc_verify_error_string@@Base+0x27c>
   1792c:	add	r0, pc, r0
   17930:	bx	lr
   17934:	ldr	r0, [pc, #400]	; 17acc <flatcc_verify_error_string@@Base+0x280>
   17938:	add	r0, pc, r0
   1793c:	bx	lr
   17940:	ldr	r0, [pc, #392]	; 17ad0 <flatcc_verify_error_string@@Base+0x284>
   17944:	add	r0, pc, r0
   17948:	bx	lr
   1794c:	ldr	r0, [pc, #384]	; 17ad4 <flatcc_verify_error_string@@Base+0x288>
   17950:	add	r0, pc, r0
   17954:	bx	lr
   17958:	ldr	r0, [pc, #376]	; 17ad8 <flatcc_verify_error_string@@Base+0x28c>
   1795c:	add	r0, pc, r0
   17960:	bx	lr
   17964:	ldr	r0, [pc, #368]	; 17adc <flatcc_verify_error_string@@Base+0x290>
   17968:	add	r0, pc, r0
   1796c:	bx	lr
   17970:	ldr	r0, [pc, #360]	; 17ae0 <flatcc_verify_error_string@@Base+0x294>
   17974:	add	r0, pc, r0
   17978:	bx	lr
   1797c:	ldr	r0, [pc, #352]	; 17ae4 <flatcc_verify_error_string@@Base+0x298>
   17980:	add	r0, pc, r0
   17984:	bx	lr
   17988:	ldr	r0, [pc, #344]	; 17ae8 <flatcc_verify_error_string@@Base+0x29c>
   1798c:	add	r0, pc, r0
   17990:	bx	lr
   17994:	ldr	r0, [pc, #336]	; 17aec <flatcc_verify_error_string@@Base+0x2a0>
   17998:	add	r0, pc, r0
   1799c:	bx	lr
   179a0:	ldr	r0, [pc, #328]	; 17af0 <flatcc_verify_error_string@@Base+0x2a4>
   179a4:	add	r0, pc, r0
   179a8:	bx	lr
   179ac:	ldr	r0, [pc, #320]	; 17af4 <flatcc_verify_error_string@@Base+0x2a8>
   179b0:	add	r0, pc, r0
   179b4:	bx	lr
   179b8:	ldr	r0, [pc, #312]	; 17af8 <flatcc_verify_error_string@@Base+0x2ac>
   179bc:	add	r0, pc, r0
   179c0:	bx	lr
   179c4:	ldr	r0, [pc, #304]	; 17afc <flatcc_verify_error_string@@Base+0x2b0>
   179c8:	add	r0, pc, r0
   179cc:	bx	lr
   179d0:	ldr	r0, [pc, #296]	; 17b00 <flatcc_verify_error_string@@Base+0x2b4>
   179d4:	add	r0, pc, r0
   179d8:	bx	lr
   179dc:	ldr	r0, [pc, #288]	; 17b04 <flatcc_verify_error_string@@Base+0x2b8>
   179e0:	add	r0, pc, r0
   179e4:	bx	lr
   179e8:	ldr	r0, [pc, #280]	; 17b08 <flatcc_verify_error_string@@Base+0x2bc>
   179ec:	add	r0, pc, r0
   179f0:	bx	lr
   179f4:	ldr	r0, [pc, #272]	; 17b0c <flatcc_verify_error_string@@Base+0x2c0>
   179f8:	add	r0, pc, r0
   179fc:	bx	lr
   17a00:	ldr	r0, [pc, #264]	; 17b10 <flatcc_verify_error_string@@Base+0x2c4>
   17a04:	add	r0, pc, r0
   17a08:	bx	lr
   17a0c:	ldr	r0, [pc, #256]	; 17b14 <flatcc_verify_error_string@@Base+0x2c8>
   17a10:	add	r0, pc, r0
   17a14:	bx	lr
   17a18:	ldr	r0, [pc, #248]	; 17b18 <flatcc_verify_error_string@@Base+0x2cc>
   17a1c:	add	r0, pc, r0
   17a20:	bx	lr
   17a24:	ldr	r0, [pc, #240]	; 17b1c <flatcc_verify_error_string@@Base+0x2d0>
   17a28:	add	r0, pc, r0
   17a2c:	bx	lr
   17a30:	ldr	r0, [pc, #232]	; 17b20 <flatcc_verify_error_string@@Base+0x2d4>
   17a34:	add	r0, pc, r0
   17a38:	bx	lr
   17a3c:	ldr	r0, [pc, #224]	; 17b24 <flatcc_verify_error_string@@Base+0x2d8>
   17a40:	add	r0, pc, r0
   17a44:	bx	lr
   17a48:	ldr	r0, [pc, #216]	; 17b28 <flatcc_verify_error_string@@Base+0x2dc>
   17a4c:	add	r0, pc, r0
   17a50:	bx	lr
   17a54:	ldr	r0, [pc, #208]	; 17b2c <flatcc_verify_error_string@@Base+0x2e0>
   17a58:	add	r0, pc, r0
   17a5c:	bx	lr
   17a60:	ldr	r0, [pc, #200]	; 17b30 <flatcc_verify_error_string@@Base+0x2e4>
   17a64:	add	r0, pc, r0
   17a68:	bx	lr
   17a6c:	ldr	r0, [pc, #192]	; 17b34 <flatcc_verify_error_string@@Base+0x2e8>
   17a70:	add	r0, pc, r0
   17a74:	bx	lr
   17a78:	ldr	r0, [pc, #184]	; 17b38 <flatcc_verify_error_string@@Base+0x2ec>
   17a7c:	add	r0, pc, r0
   17a80:	bx	lr
   17a84:	ldr	r0, [pc, #176]	; 17b3c <flatcc_verify_error_string@@Base+0x2f0>
   17a88:	add	r0, pc, r0
   17a8c:	bx	lr
   17a90:	ldr	r0, [pc, #168]	; 17b40 <flatcc_verify_error_string@@Base+0x2f4>
   17a94:	add	r0, pc, r0
   17a98:	bx	lr
   17a9c:	ldr	r0, [pc, #160]	; 17b44 <flatcc_verify_error_string@@Base+0x2f8>
   17aa0:	add	r0, pc, r0
   17aa4:	bx	lr
   17aa8:	ldr	r0, [pc, #152]	; 17b48 <flatcc_verify_error_string@@Base+0x2fc>
   17aac:	add	r0, pc, r0
   17ab0:	bx	lr
   17ab4:	muleq	r0, r8, r2
   17ab8:	andeq	r2, r0, r4, lsl #14
   17abc:	ldrdeq	r2, [r0], -r0
   17ac0:	muleq	r0, r0, r6
   17ac4:	andeq	r2, r0, ip, asr r6
   17ac8:	andeq	r2, r0, r8, lsr #12
   17acc:	andeq	r2, r0, r4, lsl #12
   17ad0:	ldrdeq	r2, [r0], -r0
   17ad4:	muleq	r0, ip, r5
   17ad8:	andeq	r2, r0, r8, ror r5
   17adc:	andeq	r2, r0, r0, asr r5
   17ae0:	andeq	r2, r0, r0, lsr r5
   17ae4:	strdeq	r2, [r0], -r4
   17ae8:			; <UNDEFINED> instruction: 0x000024bc
   17aec:	andeq	r2, r0, r4, lsl #9
   17af0:	andeq	r2, r0, r4, asr #8
   17af4:	andeq	r2, r0, ip, lsl #8
   17af8:	andeq	r2, r0, r8, ror #7
   17afc:			; <UNDEFINED> instruction: 0x000023b4
   17b00:	muleq	r0, r4, r3
   17b04:	andeq	r2, r0, r0, ror #6
   17b08:	andeq	r2, r0, ip, lsr #6
   17b0c:	strdeq	r2, [r0], -r8
   17b10:	ldrdeq	r2, [r0], -r0
   17b14:	andeq	r2, r0, r8, lsr #5
   17b18:	andeq	r2, r0, r4, lsl #5
   17b1c:	andeq	r2, r0, r4, ror #4
   17b20:	andeq	r2, r0, r0, asr #4
   17b24:	andeq	r2, r0, r0, lsr #4
   17b28:	andeq	r2, r0, r0, lsl #4
   17b2c:	ldrdeq	r2, [r0], -r8
   17b30:	andeq	r2, r0, ip, lsr #3
   17b34:	andeq	r2, r0, ip, ror r1
   17b38:	andeq	r2, r0, r8, asr r1
   17b3c:	andeq	r2, r0, r0, lsr r1
   17b40:	andeq	r2, r0, r0, lsl r1
   17b44:	andeq	r2, r0, ip, ror #1
   17b48:	andeq	r2, r0, r4, ror #10

00017b4c <flatcc_verify_field@@Base>:
   17b4c:	add	r1, r1, #2
   17b50:	ldrh	ip, [r0, #22]
   17b54:	lsl	r1, r1, #1
   17b58:	uxth	r1, r1
   17b5c:	cmp	ip, r1
   17b60:	bls	17b94 <flatcc_verify_field@@Base+0x48>
   17b64:	ldr	ip, [r0, #12]
   17b68:	ldrh	r1, [ip, r1]
   17b6c:	cmp	r1, #0
   17b70:	beq	17b94 <flatcc_verify_field@@Base+0x48>
   17b74:	push	{lr}		; (str lr, [sp, #-4]!)
   17b78:	add	r2, r2, r1
   17b7c:	ldrh	lr, [r0, #20]
   17b80:	ldr	ip, [r0]
   17b84:	cmp	r2, lr
   17b88:	bls	17b9c <flatcc_verify_field@@Base+0x50>
   17b8c:	mov	r0, #13
   17b90:	pop	{pc}		; (ldr pc, [sp], #4)
   17b94:	mov	r0, #0
   17b98:	bx	lr
   17b9c:	ldr	r0, [r0, #16]
   17ba0:	sub	r3, r3, #1
   17ba4:	add	r0, ip, r0
   17ba8:	add	r0, r0, r1
   17bac:	tst	r0, r3
   17bb0:	moveq	r0, #0
   17bb4:	movne	r0, #12
   17bb8:	pop	{pc}		; (ldr pc, [sp], #4)

00017bbc <flatcc_verify_string_field@@Base>:
   17bbc:	push	{r4, lr}
   17bc0:	sub	sp, sp, #8
   17bc4:	add	r3, sp, #4
   17bc8:	mov	r4, r0
   17bcc:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   17bd0:	cmp	r0, #0
   17bd4:	bne	17c28 <flatcc_verify_string_field@@Base+0x6c>
   17bd8:	ldr	r3, [sp, #4]
   17bdc:	cmp	r3, #0
   17be0:	beq	17c28 <flatcc_verify_string_field@@Base+0x6c>
   17be4:	ldr	r1, [r4]
   17be8:	ldr	r2, [r1, r3]
   17bec:	add	r2, r3, r2
   17bf0:	cmp	r3, r2
   17bf4:	bcs	17c30 <flatcc_verify_string_field@@Base+0x74>
   17bf8:	ldr	r3, [r4, #4]
   17bfc:	add	ip, r2, #4
   17c00:	cmp	r3, ip
   17c04:	bcc	17c30 <flatcc_verify_string_field@@Base+0x74>
   17c08:	tst	r2, #3
   17c0c:	bne	17c30 <flatcc_verify_string_field@@Base+0x74>
   17c10:	ldr	r2, [r1, r2]
   17c14:	sub	r3, r3, ip
   17c18:	add	lr, r2, #1
   17c1c:	cmp	r3, lr
   17c20:	movcc	r0, #8
   17c24:	bcs	17c3c <flatcc_verify_string_field@@Base+0x80>
   17c28:	add	sp, sp, #8
   17c2c:	pop	{r4, pc}
   17c30:	mov	r0, #17
   17c34:	add	sp, sp, #8
   17c38:	pop	{r4, pc}
   17c3c:	add	r1, r1, ip
   17c40:	ldrb	r3, [r1, r2]
   17c44:	cmp	r3, #0
   17c48:	movne	r0, #7
   17c4c:	b	17c28 <flatcc_verify_string_field@@Base+0x6c>

00017c50 <flatcc_verify_vector_field@@Base>:
   17c50:	push	{r4, r5, r6, lr}
   17c54:	sub	sp, sp, #8
   17c58:	mov	r5, r3
   17c5c:	add	r3, sp, #4
   17c60:	mov	r6, r0
   17c64:	ldrh	r4, [sp, #24]
   17c68:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   17c6c:	cmp	r0, #0
   17c70:	bne	17cd0 <flatcc_verify_vector_field@@Base+0x80>
   17c74:	ldr	r3, [sp, #4]
   17c78:	cmp	r3, #0
   17c7c:	beq	17cd0 <flatcc_verify_vector_field@@Base+0x80>
   17c80:	ldr	r1, [r6]
   17c84:	ldr	r2, [r1, r3]
   17c88:	add	r2, r3, r2
   17c8c:	cmp	r3, r2
   17c90:	bcs	17cd8 <flatcc_verify_vector_field@@Base+0x88>
   17c94:	ldr	ip, [r6, #4]
   17c98:	add	r3, r2, #4
   17c9c:	cmp	ip, r3
   17ca0:	bcc	17cd8 <flatcc_verify_vector_field@@Base+0x88>
   17ca4:	cmp	r4, #4
   17ca8:	movcc	r4, #4
   17cac:	sub	r4, r4, #1
   17cb0:	orr	r4, r4, #3
   17cb4:	tst	r4, r3
   17cb8:	bne	17cd8 <flatcc_verify_vector_field@@Base+0x88>
   17cbc:	ldr	r2, [r1, r2]
   17cc0:	ldr	r1, [sp, #28]
   17cc4:	cmp	r1, r2
   17cc8:	movcc	r0, #25
   17ccc:	bcs	17ce4 <flatcc_verify_vector_field@@Base+0x94>
   17cd0:	add	sp, sp, #8
   17cd4:	pop	{r4, r5, r6, pc}
   17cd8:	mov	r0, #16
   17cdc:	add	sp, sp, #8
   17ce0:	pop	{r4, r5, r6, pc}
   17ce4:	mul	r5, r2, r5
   17ce8:	sub	r3, ip, r3
   17cec:	cmp	r3, r5
   17cf0:	movcc	r0, #26
   17cf4:	b	17cd0 <flatcc_verify_vector_field@@Base+0x80>

00017cf8 <flatcc_verify_string_vector_field@@Base>:
   17cf8:	push	{r4, r5, r6, r7, lr}
   17cfc:	sub	sp, sp, #12
   17d00:	add	r3, sp, #4
   17d04:	mov	r4, r0
   17d08:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   17d0c:	cmp	r0, #0
   17d10:	bne	17d68 <flatcc_verify_string_vector_field@@Base+0x70>
   17d14:	ldr	r3, [sp, #4]
   17d18:	cmp	r3, #0
   17d1c:	beq	17d68 <flatcc_verify_string_vector_field@@Base+0x70>
   17d20:	ldr	lr, [r4]
   17d24:	ldr	r2, [lr, r3]
   17d28:	add	r2, r3, r2
   17d2c:	cmp	r3, r2
   17d30:	bcs	17d70 <flatcc_verify_string_vector_field@@Base+0x78>
   17d34:	ldr	r5, [r4, #4]
   17d38:	add	r3, r2, #4
   17d3c:	cmp	r5, r3
   17d40:	bcc	17d70 <flatcc_verify_string_vector_field@@Base+0x78>
   17d44:	tst	r3, #3
   17d48:	bne	17d70 <flatcc_verify_string_vector_field@@Base+0x78>
   17d4c:	ldr	r1, [lr, r2]
   17d50:	cmn	r1, #-1073741823	; 0xc0000001
   17d54:	bls	17d7c <flatcc_verify_string_vector_field@@Base+0x84>
   17d58:	ldr	r2, [lr, r2]
   17d5c:	cmn	r2, #-1073741823	; 0xc0000001
   17d60:	movhi	r0, #25
   17d64:	bls	17de8 <flatcc_verify_string_vector_field@@Base+0xf0>
   17d68:	add	sp, sp, #12
   17d6c:	pop	{r4, r5, r6, r7, pc}
   17d70:	mov	r0, #16
   17d74:	add	sp, sp, #12
   17d78:	pop	{r4, r5, r6, r7, pc}
   17d7c:	lsl	r4, r1, #2
   17d80:	sub	ip, r5, r3
   17d84:	cmp	ip, r4
   17d88:	bcc	17d58 <flatcc_verify_string_vector_field@@Base+0x60>
   17d8c:	cmp	r1, #0
   17d90:	beq	17d68 <flatcc_verify_string_vector_field@@Base+0x70>
   17d94:	ldr	r2, [lr, r3]
   17d98:	add	r1, lr, r3
   17d9c:	add	r2, r3, r2
   17da0:	cmp	r3, r2
   17da4:	bcs	17ddc <flatcc_verify_string_vector_field@@Base+0xe4>
   17da8:	add	ip, r2, #4
   17dac:	cmp	r5, ip
   17db0:	bcc	17ddc <flatcc_verify_string_vector_field@@Base+0xe4>
   17db4:	tst	r2, #3
   17db8:	bne	17ddc <flatcc_verify_string_vector_field@@Base+0xe4>
   17dbc:	ldr	r2, [lr, r2]
   17dc0:	sub	r6, r5, ip
   17dc4:	add	r7, r2, #1
   17dc8:	cmp	r7, r6
   17dcc:	bls	17df8 <flatcc_verify_string_vector_field@@Base+0x100>
   17dd0:	mov	r0, #8
   17dd4:	add	sp, sp, #12
   17dd8:	pop	{r4, r5, r6, r7, pc}
   17ddc:	mov	r0, #17
   17de0:	add	sp, sp, #12
   17de4:	pop	{r4, r5, r6, r7, pc}
   17de8:	sub	r3, r5, r3
   17dec:	cmp	r3, r2, lsl #2
   17df0:	movcc	r0, #26
   17df4:	b	17d68 <flatcc_verify_string_vector_field@@Base+0x70>
   17df8:	add	r4, r3, r4
   17dfc:	add	r2, lr, r2
   17e00:	ldrb	r2, [r2, ip]
   17e04:	cmp	r2, #0
   17e08:	movne	r0, #7
   17e0c:	bne	17d68 <flatcc_verify_string_vector_field@@Base+0x70>
   17e10:	add	r3, r3, #4
   17e14:	cmp	r3, r4
   17e18:	beq	17d68 <flatcc_verify_string_vector_field@@Base+0x70>
   17e1c:	ldr	r2, [r1, #4]!
   17e20:	add	r2, r3, r2
   17e24:	cmp	r3, r2
   17e28:	add	ip, r2, #4
   17e2c:	bcs	17ddc <flatcc_verify_string_vector_field@@Base+0xe4>
   17e30:	cmp	r5, ip
   17e34:	bcc	17ddc <flatcc_verify_string_vector_field@@Base+0xe4>
   17e38:	tst	r2, #3
   17e3c:	sub	r7, r5, ip
   17e40:	bne	17ddc <flatcc_verify_string_vector_field@@Base+0xe4>
   17e44:	ldr	r2, [lr, r2]
   17e48:	add	r6, r2, #1
   17e4c:	cmp	r7, r6
   17e50:	bcc	17dd0 <flatcc_verify_string_vector_field@@Base+0xd8>
   17e54:	b	17dfc <flatcc_verify_string_vector_field@@Base+0x104>

00017e58 <flatcc_verify_table_field@@Base>:
   17e58:	push	{r4, r5, lr}
   17e5c:	sub	sp, sp, #36	; 0x24
   17e60:	mov	r5, r3
   17e64:	add	r3, sp, #4
   17e68:	mov	r4, r0
   17e6c:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   17e70:	cmp	r0, #0
   17e74:	bne	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17e78:	ldr	r3, [sp, #4]
   17e7c:	cmp	r3, #0
   17e80:	bne	17e8c <flatcc_verify_table_field@@Base+0x34>
   17e84:	add	sp, sp, #36	; 0x24
   17e88:	pop	{r4, r5, pc}
   17e8c:	ldr	r2, [r4, #8]
   17e90:	ldr	ip, [r4]
   17e94:	sub	r2, r2, #1
   17e98:	cmp	r2, #0
   17e9c:	ldr	r1, [ip, r3]
   17ea0:	ldr	lr, [r4, #4]
   17ea4:	str	r2, [sp, #16]
   17ea8:	moveq	r0, #3
   17eac:	beq	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17eb0:	add	r2, r3, r1
   17eb4:	cmp	r3, r2
   17eb8:	bcs	17f54 <flatcc_verify_table_field@@Base+0xfc>
   17ebc:	add	r3, r2, #4
   17ec0:	cmp	lr, r3
   17ec4:	bcc	17f54 <flatcc_verify_table_field@@Base+0xfc>
   17ec8:	tst	r2, #3
   17ecc:	bne	17f54 <flatcc_verify_table_field@@Base+0xfc>
   17ed0:	str	r2, [sp, #24]
   17ed4:	ldr	r3, [ip, r2]
   17ed8:	subs	r3, r2, r3
   17edc:	bmi	17f5c <flatcc_verify_table_field@@Base+0x104>
   17ee0:	tst	r3, #1
   17ee4:	bne	17f5c <flatcc_verify_table_field@@Base+0x104>
   17ee8:	add	r1, r3, #2
   17eec:	cmp	lr, r1
   17ef0:	movcc	r0, #27
   17ef4:	bcc	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17ef8:	ldrh	r0, [ip, r3]
   17efc:	add	r4, ip, r3
   17f00:	add	r3, r0, r3
   17f04:	cmp	lr, r3
   17f08:	strh	r0, [sp, #30]
   17f0c:	bcc	17f64 <flatcc_verify_table_field@@Base+0x10c>
   17f10:	tst	r0, #1
   17f14:	bne	17f64 <flatcc_verify_table_field@@Base+0x10c>
   17f18:	cmp	r0, #3
   17f1c:	movls	r0, #28
   17f20:	bls	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17f24:	ldrh	r3, [ip, r1]
   17f28:	sub	r2, lr, r2
   17f2c:	cmp	r2, r3
   17f30:	strh	r3, [sp, #28]
   17f34:	movcc	r0, #20
   17f38:	bcc	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17f3c:	add	r0, sp, #8
   17f40:	str	r4, [sp, #20]
   17f44:	str	ip, [sp, #8]
   17f48:	str	lr, [sp, #12]
   17f4c:	blx	r5
   17f50:	b	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17f54:	mov	r0, #15
   17f58:	b	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17f5c:	mov	r0, #29
   17f60:	b	17e84 <flatcc_verify_table_field@@Base+0x2c>
   17f64:	mov	r0, #30
   17f68:	b	17e84 <flatcc_verify_table_field@@Base+0x2c>

00017f6c <flatcc_verify_table_vector_field@@Base>:
   17f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f70:	sub	sp, sp, #44	; 0x2c
   17f74:	mov	r8, r3
   17f78:	add	r3, sp, #12
   17f7c:	mov	r4, r0
   17f80:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   17f84:	subs	r5, r0, #0
   17f88:	bne	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   17f8c:	ldr	r3, [sp, #12]
   17f90:	cmp	r3, #0
   17f94:	bne	17fa4 <flatcc_verify_table_vector_field@@Base+0x38>
   17f98:	mov	r0, r5
   17f9c:	add	sp, sp, #44	; 0x2c
   17fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fa4:	ldr	r7, [r4, #8]
   17fa8:	cmp	r7, #0
   17fac:	ble	18008 <flatcc_verify_table_vector_field@@Base+0x9c>
   17fb0:	ldr	sl, [r4]
   17fb4:	ldr	r1, [sl, r3]
   17fb8:	add	r1, r3, r1
   17fbc:	cmp	r3, r1
   17fc0:	bcs	18018 <flatcc_verify_table_vector_field@@Base+0xac>
   17fc4:	ldr	fp, [r4, #4]
   17fc8:	add	r4, r1, #4
   17fcc:	cmp	fp, r4
   17fd0:	bcc	18018 <flatcc_verify_table_vector_field@@Base+0xac>
   17fd4:	tst	r4, #3
   17fd8:	bne	18018 <flatcc_verify_table_vector_field@@Base+0xac>
   17fdc:	ldr	r3, [sl, r1]
   17fe0:	cmn	r3, #-1073741823	; 0xc0000001
   17fe4:	bls	18028 <flatcc_verify_table_vector_field@@Base+0xbc>
   17fe8:	ldr	r3, [sl, r1]
   17fec:	cmn	r3, #-1073741823	; 0xc0000001
   17ff0:	movhi	r5, #25
   17ff4:	bhi	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   17ff8:	sub	r4, fp, r4
   17ffc:	cmp	r4, r3, lsl #2
   18000:	movcc	r5, #26
   18004:	b	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   18008:	mov	r5, #3
   1800c:	mov	r0, r5
   18010:	add	sp, sp, #44	; 0x2c
   18014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18018:	mov	r5, #16
   1801c:	mov	r0, r5
   18020:	add	sp, sp, #44	; 0x2c
   18024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18028:	lsl	r9, r3, #2
   1802c:	sub	r2, fp, r4
   18030:	cmp	r2, r9
   18034:	bcc	17fe8 <flatcc_verify_table_vector_field@@Base+0x7c>
   18038:	cmp	r3, #0
   1803c:	beq	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   18040:	sub	r7, r7, #2
   18044:	cmp	r7, #0
   18048:	ldr	r3, [sl, r4]
   1804c:	add	r2, sl, r4
   18050:	str	r7, [sp, #24]
   18054:	beq	18008 <flatcc_verify_table_vector_field@@Base+0x9c>
   18058:	add	r3, r4, r3
   1805c:	cmp	r4, r3
   18060:	bcs	18200 <flatcc_verify_table_vector_field@@Base+0x294>
   18064:	add	r0, r3, #4
   18068:	cmp	fp, r0
   1806c:	bcc	18200 <flatcc_verify_table_vector_field@@Base+0x294>
   18070:	tst	r3, #3
   18074:	bne	18200 <flatcc_verify_table_vector_field@@Base+0x294>
   18078:	add	r1, r1, #8
   1807c:	add	r9, r4, r9
   18080:	add	r6, sl, r1
   18084:	mov	r1, r2
   18088:	add	r2, sp, #16
   1808c:	str	r2, [sp]
   18090:	str	r3, [sp, #32]
   18094:	ldr	r2, [sl, r3]
   18098:	subs	r2, r3, r2
   1809c:	bmi	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   180a0:	tst	r2, #1
   180a4:	beq	18158 <flatcc_verify_table_vector_field@@Base+0x1ec>
   180a8:	ldr	r3, [r1]
   180ac:	str	r7, [sp, #24]
   180b0:	add	r3, r4, r3
   180b4:	cmp	r3, r4
   180b8:	bls	1820c <flatcc_verify_table_vector_field@@Base+0x2a0>
   180bc:	add	r2, r3, #4
   180c0:	cmp	fp, r2
   180c4:	bcc	1820c <flatcc_verify_table_vector_field@@Base+0x2a0>
   180c8:	tst	r3, #3
   180cc:	bne	1820c <flatcc_verify_table_vector_field@@Base+0x2a0>
   180d0:	str	r3, [sp, #32]
   180d4:	ldr	r2, [sl, r3]
   180d8:	subs	r2, r3, r2
   180dc:	bmi	18214 <flatcc_verify_table_vector_field@@Base+0x2a8>
   180e0:	tst	r2, #1
   180e4:	bne	18214 <flatcc_verify_table_vector_field@@Base+0x2a8>
   180e8:	add	r0, r2, #2
   180ec:	cmp	fp, r0
   180f0:	movcc	r5, #27
   180f4:	bcc	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   180f8:	ldrh	r1, [sl, r2]
   180fc:	add	ip, sl, r2
   18100:	add	r2, r1, r2
   18104:	cmp	fp, r2
   18108:	strh	r1, [sp, #38]	; 0x26
   1810c:	bcc	1821c <flatcc_verify_table_vector_field@@Base+0x2b0>
   18110:	tst	r1, #1
   18114:	bne	1821c <flatcc_verify_table_vector_field@@Base+0x2b0>
   18118:	cmp	r1, #3
   1811c:	movls	r5, #28
   18120:	bls	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   18124:	ldrh	r2, [sl, r0]
   18128:	sub	r3, fp, r3
   1812c:	cmp	r3, r2
   18130:	strh	r2, [sp, #36]	; 0x24
   18134:	movcc	r5, #20
   18138:	bcc	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   1813c:	add	r0, sp, #16
   18140:	str	ip, [sp, #28]
   18144:	str	sl, [sp, #16]
   18148:	str	fp, [sp, #20]
   1814c:	blx	r8
   18150:	mov	r5, r0
   18154:	b	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   18158:	add	r0, r2, #2
   1815c:	cmp	fp, r0
   18160:	bcc	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   18164:	ldrh	lr, [sl, r2]
   18168:	add	ip, sl, r2
   1816c:	add	r2, lr, r2
   18170:	cmp	fp, r2
   18174:	strh	lr, [sp, #38]	; 0x26
   18178:	bcc	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   1817c:	tst	lr, #1
   18180:	bne	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   18184:	cmp	lr, #3
   18188:	bls	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   1818c:	ldrh	r2, [sl, r0]
   18190:	sub	r3, fp, r3
   18194:	cmp	r3, r2
   18198:	strh	r2, [sp, #36]	; 0x24
   1819c:	bcc	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   181a0:	ldr	r0, [sp]
   181a4:	str	r1, [sp, #4]
   181a8:	str	ip, [sp, #28]
   181ac:	str	sl, [sp, #16]
   181b0:	str	fp, [sp, #20]
   181b4:	blx	r8
   181b8:	ldr	r1, [sp, #4]
   181bc:	cmp	r0, #0
   181c0:	bne	180a8 <flatcc_verify_table_vector_field@@Base+0x13c>
   181c4:	add	r4, r4, #4
   181c8:	cmp	r4, r9
   181cc:	beq	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   181d0:	mov	r2, r6
   181d4:	ldr	r3, [r6], #4
   181d8:	str	r7, [sp, #24]
   181dc:	add	r3, r3, r4
   181e0:	cmp	r4, r3
   181e4:	bcs	18200 <flatcc_verify_table_vector_field@@Base+0x294>
   181e8:	add	r0, r3, #4
   181ec:	cmp	fp, r0
   181f0:	bcc	18200 <flatcc_verify_table_vector_field@@Base+0x294>
   181f4:	tst	r3, #3
   181f8:	add	r1, r1, #4
   181fc:	beq	18090 <flatcc_verify_table_vector_field@@Base+0x124>
   18200:	ldr	r3, [r2]
   18204:	str	r7, [sp, #24]
   18208:	b	180b0 <flatcc_verify_table_vector_field@@Base+0x144>
   1820c:	mov	r5, #15
   18210:	b	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   18214:	mov	r5, #29
   18218:	b	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>
   1821c:	mov	r5, #30
   18220:	b	17f98 <flatcc_verify_table_vector_field@@Base+0x2c>

00018224 <flatcc_verify_union_table@@Base>:
   18224:	ldr	r3, [r0, #8]
   18228:	push	{r4, r5, lr}
   1822c:	sub	r3, r3, #1
   18230:	sub	sp, sp, #28
   18234:	cmp	r3, #0
   18238:	ldr	lr, [r0]
   1823c:	str	r3, [sp, #8]
   18240:	ldr	ip, [r0, #4]
   18244:	ldr	r2, [r0, #16]
   18248:	ldr	r3, [r0, #20]
   1824c:	moveq	r0, #3
   18250:	bne	1825c <flatcc_verify_union_table@@Base+0x38>
   18254:	add	sp, sp, #28
   18258:	pop	{r4, r5, pc}
   1825c:	add	r3, r2, r3
   18260:	cmp	r2, r3
   18264:	bcs	18300 <flatcc_verify_union_table@@Base+0xdc>
   18268:	add	r2, r3, #4
   1826c:	cmp	ip, r2
   18270:	bcc	18300 <flatcc_verify_union_table@@Base+0xdc>
   18274:	tst	r3, #3
   18278:	bne	18300 <flatcc_verify_union_table@@Base+0xdc>
   1827c:	str	r3, [sp, #16]
   18280:	ldr	r2, [lr, r3]
   18284:	subs	r2, r3, r2
   18288:	bmi	1830c <flatcc_verify_union_table@@Base+0xe8>
   1828c:	tst	r2, #1
   18290:	bne	1830c <flatcc_verify_union_table@@Base+0xe8>
   18294:	add	r0, r2, #2
   18298:	cmp	ip, r0
   1829c:	movcc	r0, #27
   182a0:	bcc	18254 <flatcc_verify_union_table@@Base+0x30>
   182a4:	ldrh	r4, [lr, r2]
   182a8:	add	r5, lr, r2
   182ac:	add	r2, r4, r2
   182b0:	cmp	ip, r2
   182b4:	strh	r4, [sp, #22]
   182b8:	bcc	18314 <flatcc_verify_union_table@@Base+0xf0>
   182bc:	tst	r4, #1
   182c0:	bne	18314 <flatcc_verify_union_table@@Base+0xf0>
   182c4:	cmp	r4, #3
   182c8:	movls	r0, #28
   182cc:	bls	18254 <flatcc_verify_union_table@@Base+0x30>
   182d0:	ldrh	r2, [lr, r0]
   182d4:	sub	r3, ip, r3
   182d8:	cmp	r3, r2
   182dc:	strh	r2, [sp, #20]
   182e0:	movcc	r0, #20
   182e4:	bcc	18254 <flatcc_verify_union_table@@Base+0x30>
   182e8:	mov	r0, sp
   182ec:	str	r5, [sp, #12]
   182f0:	str	lr, [sp]
   182f4:	str	ip, [sp, #4]
   182f8:	blx	r1
   182fc:	b	18254 <flatcc_verify_union_table@@Base+0x30>
   18300:	mov	r0, #15
   18304:	add	sp, sp, #28
   18308:	pop	{r4, r5, pc}
   1830c:	mov	r0, #29
   18310:	b	18254 <flatcc_verify_union_table@@Base+0x30>
   18314:	mov	r0, #30
   18318:	b	18254 <flatcc_verify_union_table@@Base+0x30>

0001831c <flatcc_verify_union_struct@@Base>:
   1831c:	ldr	r3, [r0, #20]
   18320:	ldr	ip, [r0, #4]
   18324:	cmp	r3, #0
   18328:	ldr	r0, [r0, #16]
   1832c:	bne	18338 <flatcc_verify_union_struct@@Base+0x1c>
   18330:	mov	r0, #18
   18334:	bx	lr
   18338:	add	r3, r0, r3
   1833c:	cmp	ip, r3
   18340:	bcc	18330 <flatcc_verify_union_struct@@Base+0x14>
   18344:	adds	r1, r1, r3
   18348:	bcc	18354 <flatcc_verify_union_struct@@Base+0x38>
   1834c:	mov	r0, #10
   18350:	bx	lr
   18354:	cmp	ip, r1
   18358:	bcs	18364 <flatcc_verify_union_struct@@Base+0x48>
   1835c:	mov	r0, #9
   18360:	bx	lr
   18364:	sub	r2, r2, #1
   18368:	tst	r2, r3
   1836c:	movne	r0, #11
   18370:	moveq	r0, #0
   18374:	bx	lr

00018378 <flatcc_verify_union_string@@Base>:
   18378:	ldr	r2, [r0, #16]
   1837c:	ldr	r3, [r0, #20]
   18380:	add	r3, r2, r3
   18384:	cmp	r2, r3
   18388:	bcs	183c4 <flatcc_verify_union_string@@Base+0x4c>
   1838c:	ldr	r2, [r0, #4]
   18390:	add	r1, r3, #4
   18394:	cmp	r2, r1
   18398:	bcc	183c4 <flatcc_verify_union_string@@Base+0x4c>
   1839c:	tst	r3, #3
   183a0:	bne	183c4 <flatcc_verify_union_string@@Base+0x4c>
   183a4:	ldr	r0, [r0]
   183a8:	sub	r2, r2, r1
   183ac:	ldr	r3, [r0, r3]
   183b0:	add	ip, r3, #1
   183b4:	cmp	r2, ip
   183b8:	bcs	183cc <flatcc_verify_union_string@@Base+0x54>
   183bc:	mov	r0, #8
   183c0:	bx	lr
   183c4:	mov	r0, #17
   183c8:	bx	lr
   183cc:	add	r1, r0, r1
   183d0:	ldrb	r0, [r1, r3]
   183d4:	cmp	r0, #0
   183d8:	movne	r0, #7
   183dc:	moveq	r0, #0
   183e0:	bx	lr

000183e4 <flatcc_verify_buffer_header@@Base>:
   183e4:	ands	r3, r0, #3
   183e8:	beq	183f4 <flatcc_verify_buffer_header@@Base+0x10>
   183ec:	mov	r0, #5
   183f0:	bx	lr
   183f4:	cmn	r1, #9
   183f8:	bls	18404 <flatcc_verify_buffer_header@@Base+0x20>
   183fc:	mov	r0, #6
   18400:	bx	lr
   18404:	cmp	r1, #7
   18408:	bls	18454 <flatcc_verify_buffer_header@@Base+0x70>
   1840c:	cmp	r2, #0
   18410:	beq	1845c <flatcc_verify_buffer_header@@Base+0x78>
   18414:	push	{r4, lr}
   18418:	sub	sp, sp, #8
   1841c:	mov	r4, r0
   18420:	add	r0, sp, #8
   18424:	mov	r1, r2
   18428:	str	r3, [r0, #-4]!
   1842c:	mov	r2, #4
   18430:	bl	12328 <strncpy@plt>
   18434:	ldr	r2, [r4, #4]
   18438:	ldr	r3, [sp, #4]
   1843c:	cmp	r3, #0
   18440:	cmpne	r2, r3
   18444:	moveq	r0, #0
   18448:	movne	r0, #2
   1844c:	add	sp, sp, #8
   18450:	pop	{r4, pc}
   18454:	mov	r0, #1
   18458:	bx	lr
   1845c:	mov	r0, #0
   18460:	bx	lr

00018464 <flatcc_verify_typed_buffer_header@@Base>:
   18464:	tst	r0, #3
   18468:	beq	18474 <flatcc_verify_typed_buffer_header@@Base+0x10>
   1846c:	mov	r0, #5
   18470:	bx	lr
   18474:	cmn	r1, #9
   18478:	bls	18484 <flatcc_verify_typed_buffer_header@@Base+0x20>
   1847c:	mov	r0, #6
   18480:	bx	lr
   18484:	cmp	r1, #7
   18488:	bls	184b0 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   1848c:	cmp	r2, #0
   18490:	beq	184a8 <flatcc_verify_typed_buffer_header@@Base+0x44>
   18494:	ldr	r0, [r0, #4]
   18498:	cmp	r2, r0
   1849c:	movne	r0, #2
   184a0:	moveq	r0, #0
   184a4:	bx	lr
   184a8:	mov	r0, r2
   184ac:	bx	lr
   184b0:	mov	r0, #1
   184b4:	bx	lr

000184b8 <flatcc_verify_struct_as_root@@Base>:
   184b8:	push	{r4, r5, r6, r7, r8, lr}
   184bc:	mov	r6, r3
   184c0:	mov	r5, r0
   184c4:	mov	r4, r1
   184c8:	mov	r8, r2
   184cc:	ldrh	r7, [sp, #24]
   184d0:	bl	183e4 <flatcc_verify_buffer_header@@Base>
   184d4:	cmp	r0, #0
   184d8:	bne	18504 <flatcc_verify_struct_as_root@@Base+0x4c>
   184dc:	ldr	r2, [r5]
   184e0:	cmp	r4, r2
   184e4:	movcs	r3, #0
   184e8:	movcc	r3, #1
   184ec:	cmp	r2, #0
   184f0:	orreq	r3, r3, #1
   184f4:	cmp	r3, #0
   184f8:	beq	18518 <flatcc_verify_struct_as_root@@Base+0x60>
   184fc:	mov	r0, #18
   18500:	pop	{r4, r5, r6, r7, r8, pc}
   18504:	mov	r2, r8
   18508:	mov	r1, r4
   1850c:	mov	r0, r5
   18510:	pop	{r4, r5, r6, r7, r8, lr}
   18514:	b	183e4 <flatcc_verify_buffer_header@@Base>
   18518:	adds	r6, r6, r2
   1851c:	bcc	18528 <flatcc_verify_struct_as_root@@Base+0x70>
   18520:	mov	r0, #10
   18524:	pop	{r4, r5, r6, r7, r8, pc}
   18528:	cmp	r4, r6
   1852c:	bcs	18538 <flatcc_verify_struct_as_root@@Base+0x80>
   18530:	mov	r0, #9
   18534:	pop	{r4, r5, r6, r7, r8, pc}
   18538:	sub	r7, r7, #1
   1853c:	tst	r7, r2
   18540:	movne	r0, #11
   18544:	pop	{r4, r5, r6, r7, r8, pc}

00018548 <flatcc_verify_struct_as_typed_root@@Base>:
   18548:	push	{r4, r5, r6, r7, r8, lr}
   1854c:	mov	r6, r3
   18550:	mov	r5, r0
   18554:	mov	r4, r1
   18558:	mov	r8, r2
   1855c:	ldrh	r7, [sp, #24]
   18560:	bl	18464 <flatcc_verify_typed_buffer_header@@Base>
   18564:	cmp	r0, #0
   18568:	bne	18594 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   1856c:	ldr	r2, [r5]
   18570:	cmp	r4, r2
   18574:	movcs	r3, #0
   18578:	movcc	r3, #1
   1857c:	cmp	r2, #0
   18580:	orreq	r3, r3, #1
   18584:	cmp	r3, #0
   18588:	beq	185a8 <flatcc_verify_struct_as_typed_root@@Base+0x60>
   1858c:	mov	r0, #18
   18590:	pop	{r4, r5, r6, r7, r8, pc}
   18594:	mov	r2, r8
   18598:	mov	r1, r4
   1859c:	mov	r0, r5
   185a0:	pop	{r4, r5, r6, r7, r8, lr}
   185a4:	b	18464 <flatcc_verify_typed_buffer_header@@Base>
   185a8:	adds	r6, r6, r2
   185ac:	bcc	185b8 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   185b0:	mov	r0, #10
   185b4:	pop	{r4, r5, r6, r7, r8, pc}
   185b8:	cmp	r4, r6
   185bc:	bcs	185c8 <flatcc_verify_struct_as_typed_root@@Base+0x80>
   185c0:	mov	r0, #9
   185c4:	pop	{r4, r5, r6, r7, r8, pc}
   185c8:	sub	r7, r7, #1
   185cc:	tst	r7, r2
   185d0:	movne	r0, #11
   185d4:	pop	{r4, r5, r6, r7, r8, pc}

000185d8 <flatcc_verify_table_as_root@@Base>:
   185d8:	push	{r4, r5, r6, r7, lr}
   185dc:	sub	sp, sp, #28
   185e0:	mov	r7, r3
   185e4:	mov	r4, r0
   185e8:	mov	r5, r1
   185ec:	mov	r6, r2
   185f0:	bl	183e4 <flatcc_verify_buffer_header@@Base>
   185f4:	cmp	r0, #0
   185f8:	bne	18630 <flatcc_verify_table_as_root@@Base+0x58>
   185fc:	ldr	r3, [r4]
   18600:	mov	r2, #99	; 0x63
   18604:	cmp	r3, #0
   18608:	str	r2, [sp, #8]
   1860c:	beq	18624 <flatcc_verify_table_as_root@@Base+0x4c>
   18610:	add	r2, r3, #4
   18614:	cmp	r5, r2
   18618:	bcc	18624 <flatcc_verify_table_as_root@@Base+0x4c>
   1861c:	tst	r3, #3
   18620:	beq	18648 <flatcc_verify_table_as_root@@Base+0x70>
   18624:	mov	r0, #15
   18628:	add	sp, sp, #28
   1862c:	pop	{r4, r5, r6, r7, pc}
   18630:	mov	r2, r6
   18634:	mov	r1, r5
   18638:	mov	r0, r4
   1863c:	bl	183e4 <flatcc_verify_buffer_header@@Base>
   18640:	add	sp, sp, #28
   18644:	pop	{r4, r5, r6, r7, pc}
   18648:	ldr	r2, [r4, r3]
   1864c:	str	r3, [sp, #16]
   18650:	subs	r2, r3, r2
   18654:	bmi	186c8 <flatcc_verify_table_as_root@@Base+0xf0>
   18658:	tst	r2, #1
   1865c:	bne	186c8 <flatcc_verify_table_as_root@@Base+0xf0>
   18660:	add	r1, r2, #2
   18664:	cmp	r5, r1
   18668:	movcc	r0, #27
   1866c:	bcc	18628 <flatcc_verify_table_as_root@@Base+0x50>
   18670:	ldrh	r0, [r4, r2]
   18674:	add	ip, r4, r2
   18678:	add	r2, r0, r2
   1867c:	cmp	r5, r2
   18680:	strh	r0, [sp, #22]
   18684:	bcc	186d0 <flatcc_verify_table_as_root@@Base+0xf8>
   18688:	tst	r0, #1
   1868c:	bne	186d0 <flatcc_verify_table_as_root@@Base+0xf8>
   18690:	cmp	r0, #3
   18694:	movls	r0, #28
   18698:	bls	18628 <flatcc_verify_table_as_root@@Base+0x50>
   1869c:	ldrh	r2, [r4, r1]
   186a0:	sub	r3, r5, r3
   186a4:	cmp	r3, r2
   186a8:	strh	r2, [sp, #20]
   186ac:	movcc	r0, #20
   186b0:	bcc	18628 <flatcc_verify_table_as_root@@Base+0x50>
   186b4:	mov	r0, sp
   186b8:	str	ip, [sp, #12]
   186bc:	stm	sp, {r4, r5}
   186c0:	blx	r7
   186c4:	b	18628 <flatcc_verify_table_as_root@@Base+0x50>
   186c8:	mov	r0, #29
   186cc:	b	18628 <flatcc_verify_table_as_root@@Base+0x50>
   186d0:	mov	r0, #30
   186d4:	b	18628 <flatcc_verify_table_as_root@@Base+0x50>

000186d8 <flatcc_verify_table_as_typed_root@@Base>:
   186d8:	push	{r4, r5, r6, r7, lr}
   186dc:	sub	sp, sp, #28
   186e0:	mov	r7, r3
   186e4:	mov	r4, r0
   186e8:	mov	r5, r1
   186ec:	mov	r6, r2
   186f0:	bl	18464 <flatcc_verify_typed_buffer_header@@Base>
   186f4:	cmp	r0, #0
   186f8:	bne	18730 <flatcc_verify_table_as_typed_root@@Base+0x58>
   186fc:	ldr	r3, [r4]
   18700:	mov	r2, #99	; 0x63
   18704:	cmp	r3, #0
   18708:	str	r2, [sp, #8]
   1870c:	beq	18724 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   18710:	add	r2, r3, #4
   18714:	cmp	r5, r2
   18718:	bcc	18724 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   1871c:	tst	r3, #3
   18720:	beq	18748 <flatcc_verify_table_as_typed_root@@Base+0x70>
   18724:	mov	r0, #15
   18728:	add	sp, sp, #28
   1872c:	pop	{r4, r5, r6, r7, pc}
   18730:	mov	r2, r6
   18734:	mov	r1, r5
   18738:	mov	r0, r4
   1873c:	bl	18464 <flatcc_verify_typed_buffer_header@@Base>
   18740:	add	sp, sp, #28
   18744:	pop	{r4, r5, r6, r7, pc}
   18748:	ldr	r2, [r4, r3]
   1874c:	str	r3, [sp, #16]
   18750:	subs	r2, r3, r2
   18754:	bmi	187c8 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   18758:	tst	r2, #1
   1875c:	bne	187c8 <flatcc_verify_table_as_typed_root@@Base+0xf0>
   18760:	add	r1, r2, #2
   18764:	cmp	r5, r1
   18768:	movcc	r0, #27
   1876c:	bcc	18728 <flatcc_verify_table_as_typed_root@@Base+0x50>
   18770:	ldrh	r0, [r4, r2]
   18774:	add	ip, r4, r2
   18778:	add	r2, r0, r2
   1877c:	cmp	r5, r2
   18780:	strh	r0, [sp, #22]
   18784:	bcc	187d0 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   18788:	tst	r0, #1
   1878c:	bne	187d0 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   18790:	cmp	r0, #3
   18794:	movls	r0, #28
   18798:	bls	18728 <flatcc_verify_table_as_typed_root@@Base+0x50>
   1879c:	ldrh	r2, [r4, r1]
   187a0:	sub	r3, r5, r3
   187a4:	cmp	r3, r2
   187a8:	strh	r2, [sp, #20]
   187ac:	movcc	r0, #20
   187b0:	bcc	18728 <flatcc_verify_table_as_typed_root@@Base+0x50>
   187b4:	mov	r0, sp
   187b8:	str	ip, [sp, #12]
   187bc:	stm	sp, {r4, r5}
   187c0:	blx	r7
   187c4:	b	18728 <flatcc_verify_table_as_typed_root@@Base+0x50>
   187c8:	mov	r0, #29
   187cc:	b	18728 <flatcc_verify_table_as_typed_root@@Base+0x50>
   187d0:	mov	r0, #30
   187d4:	b	18728 <flatcc_verify_table_as_typed_root@@Base+0x50>

000187d8 <flatcc_verify_struct_as_nested_root@@Base>:
   187d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187dc:	sub	sp, sp, #12
   187e0:	mvn	sl, #0
   187e4:	ldrh	r6, [sp, #52]	; 0x34
   187e8:	mov	r9, #1
   187ec:	mov	r7, r3
   187f0:	str	sl, [sp, #4]
   187f4:	mov	r3, r6
   187f8:	str	r9, [sp]
   187fc:	mov	r5, r0
   18800:	mov	r4, r1
   18804:	mov	fp, r2
   18808:	ldr	r8, [sp, #48]	; 0x30
   1880c:	bl	17c50 <flatcc_verify_vector_field@@Base>
   18810:	cmp	r0, #0
   18814:	bne	1887c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   18818:	add	r4, r4, #2
   1881c:	ldrh	r3, [r5, #22]
   18820:	lsl	r4, r4, #1
   18824:	uxth	r4, r4
   18828:	cmp	r3, r4
   1882c:	bls	188a0 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   18830:	ldr	r3, [r5, #12]
   18834:	ldrh	r3, [r3, r4]
   18838:	cmp	r3, #0
   1883c:	beq	188a0 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   18840:	ldr	r1, [r5, #16]
   18844:	ldr	r2, [r5]
   18848:	add	r3, r3, r1
   1884c:	adds	r1, r2, r3
   18850:	beq	188a0 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   18854:	ldr	r2, [r2, r3]
   18858:	mov	r3, r8
   1885c:	add	r0, r1, r2
   18860:	add	r0, r0, #4
   18864:	ldr	r1, [r1, r2]
   18868:	mov	r2, r7
   1886c:	str	r6, [sp, #48]	; 0x30
   18870:	add	sp, sp, #12
   18874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18878:	b	184b8 <flatcc_verify_struct_as_root@@Base>
   1887c:	str	sl, [sp, #52]	; 0x34
   18880:	str	r9, [sp, #48]	; 0x30
   18884:	mov	r3, r6
   18888:	mov	r2, fp
   1888c:	mov	r1, r4
   18890:	mov	r0, r5
   18894:	add	sp, sp, #12
   18898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1889c:	b	17c50 <flatcc_verify_vector_field@@Base>
   188a0:	add	sp, sp, #12
   188a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000188a8 <flatcc_verify_table_as_nested_root@@Base>:
   188a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   188ac:	sub	sp, sp, #32
   188b0:	mvn	r9, #0
   188b4:	ldrh	r7, [sp, #64]	; 0x40
   188b8:	mov	r8, #1
   188bc:	mov	r6, r3
   188c0:	str	r9, [sp, #4]
   188c4:	mov	r3, r7
   188c8:	str	r8, [sp]
   188cc:	mov	r5, r0
   188d0:	mov	r4, r1
   188d4:	mov	sl, r2
   188d8:	bl	17c50 <flatcc_verify_vector_field@@Base>
   188dc:	cmp	r0, #0
   188e0:	bne	18984 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   188e4:	add	r4, r4, #2
   188e8:	ldrh	r3, [r5, #22]
   188ec:	lsl	r4, r4, #1
   188f0:	uxth	r4, r4
   188f4:	cmp	r3, r4
   188f8:	bls	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   188fc:	ldr	r3, [r5, #12]
   18900:	ldrh	r3, [r3, r4]
   18904:	cmp	r3, #0
   18908:	beq	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   1890c:	ldr	r1, [r5, #16]
   18910:	ldr	r2, [r5]
   18914:	add	r3, r3, r1
   18918:	adds	r1, r2, r3
   1891c:	beq	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18920:	ldr	r3, [r2, r3]
   18924:	mov	r2, r6
   18928:	add	r4, r1, r3
   1892c:	ldr	r7, [r1, r3]
   18930:	add	r8, r4, #4
   18934:	mov	r0, r8
   18938:	mov	r1, r7
   1893c:	bl	183e4 <flatcc_verify_buffer_header@@Base>
   18940:	cmp	r0, #0
   18944:	bne	1896c <flatcc_verify_table_as_nested_root@@Base+0xc4>
   18948:	ldr	r3, [r5, #8]
   1894c:	ldr	r2, [r4, #4]
   18950:	sub	r3, r3, #1
   18954:	cmp	r3, #0
   18958:	str	r3, [sp, #16]
   1895c:	moveq	r0, #3
   18960:	bne	189a4 <flatcc_verify_table_as_nested_root@@Base+0xfc>
   18964:	add	sp, sp, #32
   18968:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1896c:	mov	r2, r6
   18970:	mov	r1, r7
   18974:	mov	r0, r8
   18978:	bl	183e4 <flatcc_verify_buffer_header@@Base>
   1897c:	add	sp, sp, #32
   18980:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18984:	stm	sp, {r8, r9}
   18988:	mov	r3, r7
   1898c:	mov	r2, sl
   18990:	mov	r1, r4
   18994:	mov	r0, r5
   18998:	bl	17c50 <flatcc_verify_vector_field@@Base>
   1899c:	add	sp, sp, #32
   189a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189a4:	cmp	r2, #0
   189a8:	beq	18a48 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   189ac:	add	r3, r2, #4
   189b0:	cmp	r7, r3
   189b4:	bcc	18a48 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   189b8:	tst	r2, #3
   189bc:	bne	18a48 <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   189c0:	str	r2, [sp, #24]
   189c4:	ldr	r3, [r8, r2]
   189c8:	subs	r3, r2, r3
   189cc:	bmi	18a54 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   189d0:	tst	r3, #1
   189d4:	bne	18a54 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   189d8:	add	r1, r3, #2
   189dc:	cmp	r7, r1
   189e0:	movcc	r0, #27
   189e4:	bcc	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   189e8:	ldrh	r0, [r8, r3]
   189ec:	add	ip, r8, r3
   189f0:	add	r3, r0, r3
   189f4:	cmp	r7, r3
   189f8:	strh	r0, [sp, #30]
   189fc:	bcc	18a5c <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   18a00:	tst	r0, #1
   18a04:	bne	18a5c <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   18a08:	cmp	r0, #3
   18a0c:	movls	r0, #28
   18a10:	bls	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18a14:	ldrh	r3, [r8, r1]
   18a18:	sub	r2, r7, r2
   18a1c:	cmp	r2, r3
   18a20:	strh	r3, [sp, #28]
   18a24:	movcc	r0, #20
   18a28:	bcc	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18a2c:	add	r0, sp, #8
   18a30:	ldr	r3, [sp, #68]	; 0x44
   18a34:	str	ip, [sp, #20]
   18a38:	str	r8, [sp, #8]
   18a3c:	str	r7, [sp, #12]
   18a40:	blx	r3
   18a44:	b	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18a48:	mov	r0, #15
   18a4c:	add	sp, sp, #32
   18a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a54:	mov	r0, #29
   18a58:	b	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   18a5c:	mov	r0, #30
   18a60:	b	18964 <flatcc_verify_table_as_nested_root@@Base+0xbc>

00018a64 <flatcc_verify_union_field@@Base>:
   18a64:	sub	ip, r1, #1
   18a68:	push	{r4, r5, r6, lr}
   18a6c:	uxth	ip, ip
   18a70:	add	ip, ip, #2
   18a74:	ldrh	lr, [r0, #22]
   18a78:	lsl	ip, ip, #1
   18a7c:	sub	sp, sp, #32
   18a80:	uxth	ip, ip
   18a84:	cmp	ip, lr
   18a88:	ldr	r5, [r0, #12]
   18a8c:	bcs	18ab8 <flatcc_verify_union_field@@Base+0x54>
   18a90:	ldrh	ip, [r5, ip]
   18a94:	cmp	ip, #0
   18a98:	beq	18ab8 <flatcc_verify_union_field@@Base+0x54>
   18a9c:	ldrh	r4, [r0, #20]
   18aa0:	add	r6, ip, #1
   18aa4:	cmp	r6, r4
   18aa8:	movhi	r0, #13
   18aac:	bls	18afc <flatcc_verify_union_field@@Base+0x98>
   18ab0:	add	sp, sp, #32
   18ab4:	pop	{r4, r5, r6, pc}
   18ab8:	add	r1, r1, #2
   18abc:	lsl	r1, r1, #1
   18ac0:	uxth	r1, r1
   18ac4:	cmp	lr, r1
   18ac8:	bhi	18ae4 <flatcc_verify_union_field@@Base+0x80>
   18acc:	cmp	r2, #0
   18ad0:	movne	r0, #21
   18ad4:	bne	18ab0 <flatcc_verify_union_field@@Base+0x4c>
   18ad8:	mov	r0, #0
   18adc:	add	sp, sp, #32
   18ae0:	pop	{r4, r5, r6, pc}
   18ae4:	ldrh	r3, [r5, r1]
   18ae8:	cmp	r3, #0
   18aec:	movne	r0, #23
   18af0:	beq	18acc <flatcc_verify_union_field@@Base+0x68>
   18af4:	add	sp, sp, #32
   18af8:	pop	{r4, r5, r6, pc}
   18afc:	add	r4, r1, #2
   18b00:	ldr	r6, [r0]
   18b04:	lsl	r4, r4, #1
   18b08:	uxth	r4, r4
   18b0c:	cmp	lr, r4
   18b10:	bhi	18b84 <flatcc_verify_union_field@@Base+0x120>
   18b14:	ldr	lr, [r0, #16]
   18b18:	add	ip, ip, lr
   18b1c:	add	r4, r6, ip
   18b20:	ldrb	ip, [r6, ip]
   18b24:	cmp	ip, #0
   18b28:	beq	18ad8 <flatcc_verify_union_field@@Base+0x74>
   18b2c:	mov	r6, r3
   18b30:	add	r3, sp, #4
   18b34:	mov	r5, r0
   18b38:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   18b3c:	cmp	r0, #0
   18b40:	bne	18ab0 <flatcc_verify_union_field@@Base+0x4c>
   18b44:	ldr	r3, [sp, #4]
   18b48:	cmp	r3, #0
   18b4c:	beq	18ad8 <flatcc_verify_union_field@@Base+0x74>
   18b50:	ldmib	r5, {r0, r1}
   18b54:	ldr	r2, [r5]
   18b58:	str	r3, [sp, #24]
   18b5c:	str	r0, [sp, #12]
   18b60:	str	r1, [sp, #16]
   18b64:	ldr	r3, [r2, r3]
   18b68:	str	r2, [sp, #8]
   18b6c:	str	r3, [sp, #28]
   18b70:	ldrb	r3, [r4]
   18b74:	add	r0, sp, #8
   18b78:	strb	r3, [sp, #20]
   18b7c:	blx	r6
   18b80:	b	18ab0 <flatcc_verify_union_field@@Base+0x4c>
   18b84:	ldr	lr, [r0, #16]
   18b88:	ldrh	r5, [r5, r4]
   18b8c:	add	ip, ip, lr
   18b90:	add	r4, r6, ip
   18b94:	ldrb	ip, [r6, ip]
   18b98:	adds	lr, ip, #0
   18b9c:	movne	lr, #1
   18ba0:	cmp	r5, #0
   18ba4:	orreq	lr, lr, #1
   18ba8:	cmp	lr, #0
   18bac:	bne	18b24 <flatcc_verify_union_field@@Base+0xc0>
   18bb0:	mov	r0, #24
   18bb4:	add	sp, sp, #32
   18bb8:	pop	{r4, r5, r6, pc}

00018bbc <flatcc_verify_union_vector_field@@Base>:
   18bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bc0:	sub	r6, r1, #1
   18bc4:	ldrh	lr, [r0, #22]
   18bc8:	uxth	r6, r6
   18bcc:	add	r5, r6, #2
   18bd0:	sub	sp, sp, #52	; 0x34
   18bd4:	lsl	r5, r5, #1
   18bd8:	ldr	r4, [r0, #12]
   18bdc:	uxth	r5, r5
   18be0:	cmp	r5, lr
   18be4:	bcs	18c94 <flatcc_verify_union_vector_field@@Base+0xd8>
   18be8:	ldrh	ip, [r4, r5]
   18bec:	cmp	ip, #0
   18bf0:	beq	18c94 <flatcc_verify_union_vector_field@@Base+0xd8>
   18bf4:	mov	r9, #1
   18bf8:	mvn	fp, #0
   18bfc:	str	r3, [sp, #12]
   18c00:	mov	r7, r1
   18c04:	stm	sp, {r9, fp}
   18c08:	mov	r3, r9
   18c0c:	mov	r1, r6
   18c10:	mov	r8, r2
   18c14:	mov	r4, r0
   18c18:	bl	17c50 <flatcc_verify_vector_field@@Base>
   18c1c:	subs	sl, r0, #0
   18c20:	bne	18d4c <flatcc_verify_union_vector_field@@Base+0x190>
   18c24:	ldrh	r3, [r4, #22]
   18c28:	cmp	r3, r5
   18c2c:	bls	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18c30:	ldr	r3, [r4, #12]
   18c34:	ldrh	r3, [r3, r5]
   18c38:	cmp	r3, #0
   18c3c:	beq	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18c40:	ldr	r1, [r4, #16]
   18c44:	ldr	r2, [r4]
   18c48:	add	r3, r3, r1
   18c4c:	adds	lr, r2, r3
   18c50:	beq	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18c54:	ldr	ip, [r2, r3]
   18c58:	mov	r1, r7
   18c5c:	mov	r2, r8
   18c60:	add	r3, sp, #20
   18c64:	mov	r0, r4
   18c68:	add	r5, lr, ip
   18c6c:	ldr	r7, [lr, ip]
   18c70:	bl	177d4 <flatcc_emitter_copy_buffer@@Base+0xc8>
   18c74:	subs	r6, r0, #0
   18c78:	bne	18d34 <flatcc_verify_union_vector_field@@Base+0x178>
   18c7c:	ldr	r3, [sp, #20]
   18c80:	cmp	r3, #0
   18c84:	bne	18cd0 <flatcc_verify_union_vector_field@@Base+0x114>
   18c88:	mov	r0, sl
   18c8c:	add	sp, sp, #52	; 0x34
   18c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c94:	add	ip, r1, #2
   18c98:	lsl	ip, ip, #1
   18c9c:	uxth	ip, ip
   18ca0:	cmp	lr, ip
   18ca4:	bhi	18cc0 <flatcc_verify_union_vector_field@@Base+0x104>
   18ca8:	cmp	r2, #0
   18cac:	movne	sl, #22
   18cb0:	beq	18bf4 <flatcc_verify_union_vector_field@@Base+0x38>
   18cb4:	mov	r0, sl
   18cb8:	add	sp, sp, #52	; 0x34
   18cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cc0:	ldrh	ip, [r4, ip]
   18cc4:	cmp	ip, #0
   18cc8:	bne	18bf4 <flatcc_verify_union_vector_field@@Base+0x38>
   18ccc:	b	18ca8 <flatcc_verify_union_vector_field@@Base+0xec>
   18cd0:	ldr	r1, [r4, #8]
   18cd4:	cmp	r1, #0
   18cd8:	movle	sl, #3
   18cdc:	ble	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18ce0:	ldr	r0, [r4]
   18ce4:	ldr	r2, [r0, r3]
   18ce8:	add	r2, r3, r2
   18cec:	cmp	r3, r2
   18cf0:	bcs	18d44 <flatcc_verify_union_vector_field@@Base+0x188>
   18cf4:	ldr	ip, [r4, #4]
   18cf8:	add	r8, r2, #4
   18cfc:	cmp	ip, r8
   18d00:	bcc	18d44 <flatcc_verify_union_vector_field@@Base+0x188>
   18d04:	ands	r3, r8, #3
   18d08:	beq	18d74 <flatcc_verify_union_vector_field@@Base+0x1b8>
   18d0c:	cmp	r3, #0
   18d10:	bne	18d44 <flatcc_verify_union_vector_field@@Base+0x188>
   18d14:	ldr	r3, [r0, r2]
   18d18:	cmn	r3, #-1073741823	; 0xc0000001
   18d1c:	movhi	sl, #25
   18d20:	bhi	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18d24:	sub	ip, ip, r8
   18d28:	cmp	ip, r3, lsl #2
   18d2c:	movcc	sl, #26
   18d30:	bcc	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18d34:	mov	sl, r6
   18d38:	mov	r0, sl
   18d3c:	add	sp, sp, #52	; 0x34
   18d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d44:	mov	sl, #16
   18d48:	b	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18d4c:	stm	sp, {r9, fp}
   18d50:	mov	r3, r9
   18d54:	mov	r2, r8
   18d58:	mov	r1, r6
   18d5c:	mov	r0, r4
   18d60:	bl	17c50 <flatcc_verify_vector_field@@Base>
   18d64:	mov	sl, r0
   18d68:	mov	r0, sl
   18d6c:	add	sp, sp, #52	; 0x34
   18d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d74:	ldr	r3, [r0, r2]
   18d78:	add	r4, r0, r2
   18d7c:	cmn	r3, #-1073741823	; 0xc0000001
   18d80:	bhi	18d14 <flatcc_verify_union_vector_field@@Base+0x158>
   18d84:	lsl	lr, r3, #2
   18d88:	sub	r9, ip, r8
   18d8c:	cmp	r9, lr
   18d90:	bcc	18d14 <flatcc_verify_union_vector_field@@Base+0x158>
   18d94:	cmp	r7, r3
   18d98:	movne	sl, #34	; 0x22
   18d9c:	bne	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18da0:	sub	r1, r1, #1
   18da4:	cmp	r7, #0
   18da8:	str	r1, [sp, #32]
   18dac:	str	r0, [sp, #24]
   18db0:	str	ip, [sp, #28]
   18db4:	beq	18d34 <flatcc_verify_union_vector_field@@Base+0x178>
   18db8:	add	r2, r2, lr
   18dbc:	add	r7, r0, r2
   18dc0:	add	r5, r5, #4
   18dc4:	add	r9, sp, #24
   18dc8:	b	18de8 <flatcc_verify_union_vector_field@@Base+0x22c>
   18dcc:	ldrb	r3, [r5]
   18dd0:	cmp	r3, #0
   18dd4:	bne	18e34 <flatcc_verify_union_vector_field@@Base+0x278>
   18dd8:	cmp	r4, r7
   18ddc:	add	r8, r8, #4
   18de0:	add	r5, r5, #1
   18de4:	beq	18d34 <flatcc_verify_union_vector_field@@Base+0x178>
   18de8:	ldr	r3, [r4, #4]!
   18dec:	mov	r0, r9
   18df0:	cmp	r3, #0
   18df4:	beq	18dcc <flatcc_verify_union_vector_field@@Base+0x210>
   18df8:	ldrb	r2, [r5]
   18dfc:	cmp	r2, #0
   18e00:	beq	18e3c <flatcc_verify_union_vector_field@@Base+0x280>
   18e04:	str	r3, [sp, #44]	; 0x2c
   18e08:	ldr	r3, [sp, #12]
   18e0c:	strb	r2, [sp, #36]	; 0x24
   18e10:	str	r8, [sp, #40]	; 0x28
   18e14:	blx	r3
   18e18:	cmp	r0, #0
   18e1c:	beq	18dd8 <flatcc_verify_union_vector_field@@Base+0x21c>
   18e20:	mov	r0, r9
   18e24:	ldr	r3, [sp, #12]
   18e28:	blx	r3
   18e2c:	mov	sl, r0
   18e30:	b	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18e34:	mov	sl, #32
   18e38:	b	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>
   18e3c:	mov	sl, #33	; 0x21
   18e40:	b	18c88 <flatcc_verify_union_vector_field@@Base+0xcc>

00018e44 <__libc_csu_init@@Base>:
   18e44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e48:	mov	r7, r0
   18e4c:	ldr	r6, [pc, #72]	; 18e9c <__libc_csu_init@@Base+0x58>
   18e50:	ldr	r5, [pc, #72]	; 18ea0 <__libc_csu_init@@Base+0x5c>
   18e54:	add	r6, pc, r6
   18e58:	add	r5, pc, r5
   18e5c:	sub	r6, r6, r5
   18e60:	mov	r8, r1
   18e64:	mov	r9, r2
   18e68:	bl	12290 <free@plt-0x20>
   18e6c:	asrs	r6, r6, #2
   18e70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e74:	mov	r4, #0
   18e78:	add	r4, r4, #1
   18e7c:	ldr	r3, [r5], #4
   18e80:	mov	r2, r9
   18e84:	mov	r1, r8
   18e88:	mov	r0, r7
   18e8c:	blx	r3
   18e90:	cmp	r6, r4
   18e94:	bne	18e78 <__libc_csu_init@@Base+0x34>
   18e98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e9c:	strheq	r2, [r1], -r4
   18ea0:	andeq	r2, r1, ip, lsr #1

00018ea4 <__libc_csu_fini@@Base>:
   18ea4:	bx	lr

Disassembly of section .fini:

00018ea8 <.fini>:
   18ea8:	push	{r3, lr}
   18eac:	pop	{r3, pc}
