
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00001018 <.init>:
    1018:	push	{r3, lr}
    101c:	bl	11a0 <o_strchr@plt+0xc>
    1020:	pop	{r3, pc}

Disassembly of section .plt:

00001024 <strstr@plt-0x14>:
    1024:	push	{lr}		; (str lr, [sp, #-4]!)
    1028:	ldr	lr, [pc, #4]	; 1034 <strstr@plt-0x4>
    102c:	add	lr, pc, lr
    1030:	ldr	pc, [lr, #8]!
    1034:	andeq	r1, r1, ip, asr #31

00001038 <strstr@plt>:
    1038:	add	ip, pc, #0, 12
    103c:	add	ip, ip, #69632	; 0x11000
    1040:	ldr	pc, [ip, #4044]!	; 0xfcc

00001044 <strcasestr@plt>:
    1044:	add	ip, pc, #0, 12
    1048:	add	ip, ip, #69632	; 0x11000
    104c:	ldr	pc, [ip, #4036]!	; 0xfc4

00001050 <strcmp@plt>:
    1050:	add	ip, pc, #0, 12
    1054:	add	ip, ip, #69632	; 0x11000
    1058:	ldr	pc, [ip, #4028]!	; 0xfbc

0000105c <__cxa_finalize@plt>:
    105c:	add	ip, pc, #0, 12
    1060:	add	ip, ip, #69632	; 0x11000
    1064:	ldr	pc, [ip, #4020]!	; 0xfb4

00001068 <o_free@plt>:
    1068:	add	ip, pc, #0, 12
    106c:	add	ip, ip, #69632	; 0x11000
    1070:	ldr	pc, [ip, #4012]!	; 0xfac

00001074 <pointer_list_remove_at@plt>:
    1074:	add	ip, pc, #0, 12
    1078:	add	ip, ip, #69632	; 0x11000
    107c:	ldr	pc, [ip, #4004]!	; 0xfa4

00001080 <memcpy@plt>:
    1080:	add	ip, pc, #0, 12
    1084:	add	ip, ip, #69632	; 0x11000
    1088:	ldr	pc, [ip, #3996]!	; 0xf9c

0000108c <o_strdup@plt>:
    108c:	add	ip, pc, #0, 12
    1090:	add	ip, ip, #69632	; 0x11000
    1094:	ldr	pc, [ip, #3988]!	; 0xf94

00001098 <o_base64_encode@plt>:
    1098:	add	ip, pc, #0, 12
    109c:	add	ip, ip, #69632	; 0x11000
    10a0:	ldr	pc, [ip, #3980]!	; 0xf8c

000010a4 <strcasecmp@plt>:
    10a4:	add	ip, pc, #0, 12
    10a8:	add	ip, ip, #69632	; 0x11000
    10ac:	ldr	pc, [ip, #3972]!	; 0xf84

000010b0 <trimwhitespace@plt>:
    10b0:	add	ip, pc, #0, 12
    10b4:	add	ip, ip, #69632	; 0x11000
    10b8:	ldr	pc, [ip, #3964]!	; 0xf7c

000010bc <strcpy@plt>:
    10bc:	add	ip, pc, #0, 12
    10c0:	add	ip, ip, #69632	; 0x11000
    10c4:	ldr	pc, [ip, #3956]!	; 0xf74

000010c8 <o_realloc@plt>:
    10c8:	add	ip, pc, #0, 12
    10cc:	add	ip, ip, #69632	; 0x11000
    10d0:	ldr	pc, [ip, #3948]!	; 0xf6c

000010d4 <str_replace@plt>:
    10d4:	add	ip, pc, #0, 12
    10d8:	add	ip, ip, #69632	; 0x11000
    10dc:	ldr	pc, [ip, #3940]!	; 0xf64

000010e0 <__gmon_start__@plt>:
    10e0:	add	ip, pc, #0, 12
    10e4:	add	ip, ip, #69632	; 0x11000
    10e8:	ldr	pc, [ip, #3932]!	; 0xf5c

000010ec <__ctype_b_loc@plt>:
    10ec:	add	ip, pc, #0, 12
    10f0:	add	ip, ip, #69632	; 0x11000
    10f4:	ldr	pc, [ip, #3924]!	; 0xf54

000010f8 <strlen@plt>:
    10f8:	add	ip, pc, #0, 12
    10fc:	add	ip, ip, #69632	; 0x11000
    1100:	ldr	pc, [ip, #3916]!	; 0xf4c

00001104 <strchr@plt>:
    1104:	add	ip, pc, #0, 12
    1108:	add	ip, ip, #69632	; 0x11000
    110c:	ldr	pc, [ip, #3908]!	; 0xf44

00001110 <strncasecmp@plt>:
    1110:	add	ip, pc, #0, 12
    1114:	add	ip, ip, #69632	; 0x11000
    1118:	ldr	pc, [ip, #3900]!	; 0xf3c

0000111c <snprintf@plt>:
    111c:	add	ip, pc, #0, 12
    1120:	add	ip, ip, #69632	; 0x11000
    1124:	ldr	pc, [ip, #3892]!	; 0xf34

00001128 <o_malloc@plt>:
    1128:	add	ip, pc, #0, 12
    112c:	add	ip, ip, #69632	; 0x11000
    1130:	ldr	pc, [ip, #3884]!	; 0xf2c

00001134 <memset@plt>:
    1134:	add	ip, pc, #0, 12
    1138:	add	ip, ip, #69632	; 0x11000
    113c:	ldr	pc, [ip, #3876]!	; 0xf24

00001140 <strncpy@plt>:
    1140:	add	ip, pc, #0, 12
    1144:	add	ip, ip, #69632	; 0x11000
    1148:	ldr	pc, [ip, #3868]!	; 0xf1c

0000114c <msprintf@plt>:
    114c:	add	ip, pc, #0, 12
    1150:	add	ip, ip, #69632	; 0x11000
    1154:	ldr	pc, [ip, #3860]!	; 0xf14

00001158 <o_base64url_2_base64@plt>:
    1158:	add	ip, pc, #0, 12
    115c:	add	ip, ip, #69632	; 0x11000
    1160:	ldr	pc, [ip, #3852]!	; 0xf0c

00001164 <strrchr@plt>:
    1164:	add	ip, pc, #0, 12
    1168:	add	ip, ip, #69632	; 0x11000
    116c:	ldr	pc, [ip, #3844]!	; 0xf04

00001170 <o_base64_decode@plt>:
    1170:	add	ip, pc, #0, 12
    1174:	add	ip, ip, #69632	; 0x11000
    1178:	ldr	pc, [ip, #3836]!	; 0xefc

0000117c <vsnprintf@plt>:
    117c:	add	ip, pc, #0, 12
    1180:	add	ip, ip, #69632	; 0x11000
    1184:	ldr	pc, [ip, #3828]!	; 0xef4

00001188 <strncmp@plt>:
    1188:	add	ip, pc, #0, 12
    118c:	add	ip, ip, #69632	; 0x11000
    1190:	ldr	pc, [ip, #3820]!	; 0xeec

00001194 <o_strchr@plt>:
    1194:	add	ip, pc, #0, 12
    1198:	add	ip, ip, #69632	; 0x11000
    119c:	ldr	pc, [ip, #3812]!	; 0xee4

Disassembly of section .text:

000011a0 <o_base64_encode@@Base-0x124>:
    11a0:	ldr	r3, [pc, #20]	; 11bc <o_strchr@plt+0x28>
    11a4:	ldr	r2, [pc, #20]	; 11c0 <o_strchr@plt+0x2c>
    11a8:	add	r3, pc, r3
    11ac:	ldr	r2, [r3, r2]
    11b0:	cmp	r2, #0
    11b4:	bxeq	lr
    11b8:	b	10e0 <__gmon_start__@plt>
    11bc:	andeq	r1, r1, r0, asr lr
    11c0:	andeq	r0, r0, ip, lsl #1
    11c4:	ldr	r0, [pc, #44]	; 11f8 <o_strchr@plt+0x64>
    11c8:	ldr	r3, [pc, #44]	; 11fc <o_strchr@plt+0x68>
    11cc:	add	r0, pc, r0
    11d0:	add	r3, pc, r3
    11d4:	cmp	r3, r0
    11d8:	ldr	r3, [pc, #32]	; 1200 <o_strchr@plt+0x6c>
    11dc:	add	r3, pc, r3
    11e0:	bxeq	lr
    11e4:	ldr	r2, [pc, #24]	; 1204 <o_strchr@plt+0x70>
    11e8:	ldr	r3, [r3, r2]
    11ec:	cmp	r3, #0
    11f0:	bxeq	lr
    11f4:	bx	r3
    11f8:	ldrdeq	r1, [r1], -r0
    11fc:	andeq	r1, r1, ip, asr #29
    1200:	andeq	r1, r1, ip, lsl lr
    1204:	andeq	r0, r0, r8, lsl #1
    1208:	ldr	r0, [pc, #56]	; 1248 <o_strchr@plt+0xb4>
    120c:	ldr	r3, [pc, #56]	; 124c <o_strchr@plt+0xb8>
    1210:	add	r0, pc, r0
    1214:	add	r3, pc, r3
    1218:	sub	r1, r3, r0
    121c:	ldr	r3, [pc, #44]	; 1250 <o_strchr@plt+0xbc>
    1220:	asr	r1, r1, #2
    1224:	add	r3, pc, r3
    1228:	add	r1, r1, r1, lsr #31
    122c:	asrs	r1, r1, #1
    1230:	bxeq	lr
    1234:	ldr	r2, [pc, #24]	; 1254 <o_strchr@plt+0xc0>
    1238:	ldr	r3, [r3, r2]
    123c:	cmp	r3, #0
    1240:	bxeq	lr
    1244:	bx	r3
    1248:	andeq	r1, r1, ip, lsl #29
    124c:	andeq	r1, r1, r8, lsl #29
    1250:	ldrdeq	r1, [r1], -r4
    1254:	muleq	r0, r0, r0
    1258:	ldr	r3, [pc, #76]	; 12ac <o_strchr@plt+0x118>
    125c:	ldr	r2, [pc, #76]	; 12b0 <o_strchr@plt+0x11c>
    1260:	add	r3, pc, r3
    1264:	add	r2, pc, r2
    1268:	ldrb	r3, [r3]
    126c:	cmp	r3, #0
    1270:	bxne	lr
    1274:	ldr	r3, [pc, #56]	; 12b4 <o_strchr@plt+0x120>
    1278:	push	{r4, lr}
    127c:	ldr	r3, [r2, r3]
    1280:	cmp	r3, #0
    1284:	beq	1294 <o_strchr@plt+0x100>
    1288:	ldr	r3, [pc, #40]	; 12b8 <o_strchr@plt+0x124>
    128c:	ldr	r0, [pc, r3]
    1290:	bl	105c <__cxa_finalize@plt>
    1294:	bl	11c4 <o_strchr@plt+0x30>
    1298:	ldr	r3, [pc, #28]	; 12bc <o_strchr@plt+0x128>
    129c:	mov	r2, #1
    12a0:	add	r3, pc, r3
    12a4:	strb	r2, [r3]
    12a8:	pop	{r4, pc}
    12ac:	andeq	r1, r1, ip, lsr lr
    12b0:	muleq	r1, r4, sp
    12b4:	andeq	r0, r0, r4, lsl #1
    12b8:	andeq	r1, r1, r0, lsl #28
    12bc:	strdeq	r1, [r1], -ip
    12c0:	b	1208 <o_strchr@plt+0x74>

000012c4 <o_base64_encode@@Base>:
    12c4:	push	{r4, r5, r6, sl, fp, lr}
    12c8:	add	fp, sp, #16
    12cc:	cmp	r3, #0
    12d0:	mov	ip, #0
    12d4:	cmpne	r0, #0
    12d8:	beq	14a0 <o_base64_encode@@Base+0x1dc>
    12dc:	movw	r4, #43691	; 0xaaab
    12e0:	lsl	r5, r1, #2
    12e4:	movt	r4, #43690	; 0xaaaa
    12e8:	umull	r5, r4, r5, r4
    12ec:	mov	r5, #4
    12f0:	add	lr, r5, r4, lsr #1
    12f4:	movw	r5, #36409	; 0x8e39
    12f8:	lsr	r4, r4, #1
    12fc:	movt	r5, #14563	; 0x38e3
    1300:	umull	r5, lr, lr, r5
    1304:	add	r5, r4, lr, lsr #4
    1308:	add	r5, r5, #5
    130c:	cmp	r5, r1
    1310:	bcc	14a0 <o_base64_encode@@Base+0x1dc>
    1314:	mov	ip, #0
    1318:	cmp	r1, #3
    131c:	str	ip, [r3]
    1320:	blt	13b4 <o_base64_encode@@Base+0xf0>
    1324:	ldr	r5, [pc, #380]	; 14a8 <o_base64_encode@@Base+0x1e4>
    1328:	add	r6, r0, r1
    132c:	mov	ip, #0
    1330:	add	r5, pc, r5
    1334:	cmp	r2, #0
    1338:	mov	lr, #0
    133c:	beq	1394 <o_base64_encode@@Base+0xd0>
    1340:	ldrb	r1, [r0]
    1344:	add	lr, r2, #4
    1348:	ldrb	r1, [r5, r1, lsr #2]
    134c:	strb	r1, [r2]
    1350:	ldrb	r4, [r0, #1]
    1354:	ldrb	r1, [r0]
    1358:	lsr	r4, r4, #4
    135c:	bfi	r4, r1, #4, #2
    1360:	ldrb	r1, [r5, r4]
    1364:	strb	r1, [r2, #1]
    1368:	ldrb	r4, [r0, #2]
    136c:	ldrb	r1, [r0, #1]
    1370:	lsr	r4, r4, #6
    1374:	bfi	r4, r1, #2, #4
    1378:	ldrb	r1, [r5, r4]
    137c:	strb	r1, [r2, #2]
    1380:	ldrb	r1, [r0, #2]
    1384:	and	r1, r1, #63	; 0x3f
    1388:	ldrb	r1, [r5, r1]
    138c:	strb	r1, [r2, #3]
    1390:	ldr	ip, [r3]
    1394:	add	r0, r0, #3
    1398:	add	ip, ip, #4
    139c:	mov	r2, lr
    13a0:	sub	r1, r6, r0
    13a4:	str	ip, [r3]
    13a8:	cmp	r1, #2
    13ac:	bgt	1334 <o_base64_encode@@Base+0x70>
    13b0:	b	13b8 <o_base64_encode@@Base+0xf4>
    13b4:	mov	lr, r2
    13b8:	cmp	r1, #0
    13bc:	beq	1490 <o_base64_encode@@Base+0x1cc>
    13c0:	cmp	lr, #0
    13c4:	beq	13e4 <o_base64_encode@@Base+0x120>
    13c8:	ldrb	r2, [r0]
    13cc:	ldr	r6, [pc, #216]	; 14ac <o_base64_encode@@Base+0x1e8>
    13d0:	add	r6, pc, r6
    13d4:	ldrb	r2, [r6, r2, lsr #2]
    13d8:	strb	r2, [lr], #1
    13dc:	ldr	ip, [r3]
    13e0:	b	13e8 <o_base64_encode@@Base+0x124>
    13e4:	mov	lr, #0
    13e8:	add	r2, ip, #1
    13ec:	cmp	r1, #1
    13f0:	str	r2, [r3]
    13f4:	bne	1424 <o_base64_encode@@Base+0x160>
    13f8:	cmp	lr, #0
    13fc:	beq	147c <o_base64_encode@@Base+0x1b8>
    1400:	mov	r1, #61	; 0x3d
    1404:	ldrb	r0, [r0]
    1408:	strb	r1, [lr, #1]
    140c:	ldr	r1, [pc, #156]	; 14b0 <o_base64_encode@@Base+0x1ec>
    1410:	and	r0, r0, #3
    1414:	add	r1, pc, r1
    1418:	ldrb	r0, [r1, r0, lsl #4]
    141c:	strb	r0, [lr]
    1420:	b	145c <o_base64_encode@@Base+0x198>
    1424:	cmp	lr, #0
    1428:	beq	147c <o_base64_encode@@Base+0x1b8>
    142c:	ldrb	r2, [r0, #1]
    1430:	ldrb	r1, [r0]
    1434:	lsr	r2, r2, #4
    1438:	bfi	r2, r1, #4, #2
    143c:	ldr	r1, [pc, #112]	; 14b4 <o_base64_encode@@Base+0x1f0>
    1440:	add	r1, pc, r1
    1444:	ldrb	r2, [r1, r2]
    1448:	strb	r2, [lr]
    144c:	ldrb	r0, [r0, #1]
    1450:	and	r0, r0, #15
    1454:	ldrb	r0, [r1, r0, lsl #2]
    1458:	strb	r0, [lr, #1]
    145c:	ldr	r0, [r3]
    1460:	add	r0, r0, #2
    1464:	str	r0, [r3]
    1468:	mov	r0, #61	; 0x3d
    146c:	strb	r0, [lr, #2]
    1470:	add	lr, lr, #3
    1474:	ldr	r0, [r3]
    1478:	b	1488 <o_base64_encode@@Base+0x1c4>
    147c:	add	r0, ip, #3
    1480:	mov	lr, #0
    1484:	str	r0, [r3]
    1488:	add	r0, r0, #1
    148c:	str	r0, [r3]
    1490:	cmp	lr, #0
    1494:	mov	ip, #1
    1498:	movne	r0, #0
    149c:	strbne	r0, [lr]
    14a0:	mov	r0, ip
    14a4:	pop	{r4, r5, r6, sl, fp, pc}
    14a8:	andeq	r1, r0, r4, lsr #13
    14ac:	andeq	r1, r0, r4, lsl #12
    14b0:	andeq	r1, r0, r0, asr #11
    14b4:	muleq	r0, r4, r5

000014b8 <o_base64_decode@@Base>:
    14b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14bc:	add	fp, sp, #28
    14c0:	sub	sp, sp, #268	; 0x10c
    14c4:	mov	r6, r0
    14c8:	mov	r0, #0
    14cc:	cmp	r6, #0
    14d0:	beq	14e8 <o_base64_decode@@Base+0x30>
    14d4:	cmp	r1, #0
    14d8:	mov	r5, r1
    14dc:	movne	r8, r3
    14e0:	cmpne	r3, #0
    14e4:	bne	14f0 <o_base64_decode@@Base+0x38>
    14e8:	sub	sp, fp, #28
    14ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14f0:	add	r4, sp, #8
    14f4:	mov	sl, r2
    14f8:	mov	r1, #128	; 0x80
    14fc:	mov	r2, #256	; 0x100
    1500:	mov	r0, r4
    1504:	bl	1134 <memset@plt>
    1508:	ldr	r1, [pc, #352]	; 1670 <o_base64_decode@@Base+0x1b8>
    150c:	mov	r0, #0
    1510:	add	r1, pc, r1
    1514:	ldrb	r2, [r1, r0]
    1518:	strb	r0, [r4, r2]
    151c:	add	r0, r0, #1
    1520:	cmp	r0, #64	; 0x40
    1524:	bne	1514 <o_base64_decode@@Base+0x5c>
    1528:	mov	r1, #0
    152c:	mov	r0, r6
    1530:	mov	r2, r5
    1534:	strb	r1, [sp, #69]	; 0x45
    1538:	ldrb	r3, [r0], #1
    153c:	ldrb	r3, [r4, r3]
    1540:	cmp	r3, #128	; 0x80
    1544:	addne	r1, r1, #1
    1548:	subs	r2, r2, #1
    154c:	bne	1538 <o_base64_decode@@Base+0x80>
    1550:	mov	r0, #0
    1554:	cmp	r1, #0
    1558:	beq	14e8 <o_base64_decode@@Base+0x30>
    155c:	ands	r1, r1, #3
    1560:	bne	14e8 <o_base64_decode@@Base+0x30>
    1564:	mov	r9, #0
    1568:	mov	r7, #0
    156c:	str	r9, [r8]
    1570:	ldrb	r1, [r6]
    1574:	ldr	r0, [pc, #248]	; 1674 <o_base64_decode@@Base+0x1bc>
    1578:	add	r0, pc, r0
    157c:	bl	1194 <o_strchr@plt>
    1580:	ldrb	r1, [r6]
    1584:	cmp	r0, #0
    1588:	bne	15a4 <o_base64_decode@@Base+0xec>
    158c:	sub	r0, r1, #9
    1590:	cmp	r0, #2
    1594:	bcc	15a4 <o_base64_decode@@Base+0xec>
    1598:	cmp	r1, #61	; 0x3d
    159c:	cmpne	r1, #32
    15a0:	bne	1644 <o_base64_decode@@Base+0x18c>
    15a4:	ldrb	r0, [r4, r1]
    15a8:	cmp	r0, #128	; 0x80
    15ac:	beq	1630 <o_base64_decode@@Base+0x178>
    15b0:	add	r2, sp, #4
    15b4:	cmp	r1, #61	; 0x3d
    15b8:	strb	r0, [r2, r7]
    15bc:	add	r7, r7, #1
    15c0:	addeq	r9, r9, #1
    15c4:	cmp	r7, #4
    15c8:	bne	1630 <o_base64_decode@@Base+0x178>
    15cc:	mov	r0, #0
    15d0:	cmp	sl, #0
    15d4:	mov	r2, #0
    15d8:	beq	1614 <o_base64_decode@@Base+0x15c>
    15dc:	ldrb	r2, [sp, #5]
    15e0:	ldrb	r1, [sp, #4]
    15e4:	lsr	r3, r2, #4
    15e8:	orr	r1, r3, r1, lsl #2
    15ec:	strb	r1, [sl]
    15f0:	ldrb	r1, [sp, #6]
    15f4:	lsr	r1, r1, #2
    15f8:	orr	r1, r1, r2, lsl #4
    15fc:	strb	r1, [sl, #1]
    1600:	ldrb	r1, [sp, #6]
    1604:	ldrb	r2, [sp, #7]
    1608:	orr	r1, r2, r1, lsl #6
    160c:	add	r2, sl, #3
    1610:	strb	r1, [sl, #2]
    1614:	ldr	r1, [r8]
    1618:	cmp	r9, #0
    161c:	add	r3, r1, #3
    1620:	str	r3, [r8]
    1624:	bne	164c <o_base64_decode@@Base+0x194>
    1628:	mov	sl, r2
    162c:	mov	r7, r9
    1630:	add	r6, r6, #1
    1634:	subs	r5, r5, #1
    1638:	bne	1570 <o_base64_decode@@Base+0xb8>
    163c:	mov	r0, #1
    1640:	b	14e8 <o_base64_decode@@Base+0x30>
    1644:	mov	r0, #0
    1648:	b	14e8 <o_base64_decode@@Base+0x30>
    164c:	cmp	r9, #2
    1650:	beq	1664 <o_base64_decode@@Base+0x1ac>
    1654:	cmp	r9, #1
    1658:	bne	14e8 <o_base64_decode@@Base+0x30>
    165c:	add	r0, r1, #2
    1660:	b	1668 <o_base64_decode@@Base+0x1b0>
    1664:	add	r0, r1, #1
    1668:	str	r0, [r8]
    166c:	b	163c <o_base64_decode@@Base+0x184>
    1670:	andeq	r1, r0, r4, asr #9
    1674:	andeq	r1, r0, ip, asr r4

00001678 <o_base64url_encode@@Base>:
    1678:	push	{r4, r5, fp, lr}
    167c:	add	fp, sp, #8
    1680:	mov	r4, r3
    1684:	cmp	r2, #0
    1688:	beq	16c4 <o_base64url_encode@@Base+0x4c>
    168c:	mov	r3, r4
    1690:	mov	r5, r2
    1694:	bl	1098 <o_base64_encode@plt>
    1698:	cmp	r0, #0
    169c:	beq	1714 <o_base64url_encode@@Base+0x9c>
    16a0:	ldr	r2, [r4]
    16a4:	cmp	r2, #2
    16a8:	bcc	171c <o_base64url_encode@@Base+0xa4>
    16ac:	add	r1, r2, r5
    16b0:	mvn	r3, #1
    16b4:	ldrb	ip, [r1, #-2]!
    16b8:	cmp	ip, #61	; 0x3d
    16bc:	bne	1724 <o_base64url_encode@@Base+0xac>
    16c0:	b	1738 <o_base64url_encode@@Base+0xc0>
    16c4:	cmp	r1, #0
    16c8:	mov	r0, #0
    16cc:	cmpne	r4, #0
    16d0:	beq	1788 <o_base64url_encode@@Base+0x110>
    16d4:	vmov	s0, r1
    16d8:	vmov.f64	d16, #16	; 0x40800000  4.0
    16dc:	vmov.f64	d18, #8	; 0x40400000  3.0
    16e0:	mov	r0, #1
    16e4:	vcvt.f64.u32	d17, s0
    16e8:	vmul.f64	d16, d17, d16
    16ec:	vmov.f64	d17, #112	; 0x3f800000  1.0
    16f0:	vdiv.f64	d16, d16, d18
    16f4:	vrintm.f64	d18, d16
    16f8:	vadd.f64	d17, d18, d17
    16fc:	vcmp.f64	d16, d18
    1700:	vmrs	APSR_nzcv, fpscr
    1704:	vseleq.f64	d16, d16, d17
    1708:	vcvt.u32.f64	s0, d16
    170c:	vstr	s0, [r4]
    1710:	pop	{r4, r5, fp, pc}
    1714:	mov	r0, #0
    1718:	pop	{r4, r5, fp, pc}
    171c:	cmp	r2, #0
    1720:	beq	1788 <o_base64url_encode@@Base+0x110>
    1724:	add	r1, r2, r5
    1728:	mvn	r3, #0
    172c:	ldrb	r2, [r1, #-1]!
    1730:	cmp	r2, #61	; 0x3d
    1734:	bne	1750 <o_base64url_encode@@Base+0xd8>
    1738:	mov	r2, #0
    173c:	strb	r2, [r1]
    1740:	ldr	r1, [r4]
    1744:	adds	r1, r1, r3
    1748:	str	r1, [r4]
    174c:	beq	1788 <o_base64url_encode@@Base+0x110>
    1750:	mov	r1, #0
    1754:	ldrb	r2, [r5, r1]
    1758:	cmp	r2, #43	; 0x2b
    175c:	beq	1770 <o_base64url_encode@@Base+0xf8>
    1760:	cmp	r2, #47	; 0x2f
    1764:	bne	1778 <o_base64url_encode@@Base+0x100>
    1768:	mov	r2, #95	; 0x5f
    176c:	b	1774 <o_base64url_encode@@Base+0xfc>
    1770:	mov	r2, #45	; 0x2d
    1774:	strb	r2, [r5, r1]
    1778:	ldr	r2, [r4]
    177c:	add	r1, r1, #1
    1780:	cmp	r1, r2
    1784:	bcc	1754 <o_base64url_encode@@Base+0xdc>
    1788:	pop	{r4, r5, fp, pc}

0000178c <o_base64url_decode@@Base>:
    178c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1790:	add	fp, sp, #24
    1794:	sub	sp, sp, #8
    1798:	mov	r7, #0
    179c:	cmp	r0, #0
    17a0:	beq	180c <o_base64url_decode@@Base+0x80>
    17a4:	mov	r6, r0
    17a8:	add	r0, r1, #3
    17ac:	mov	r8, r3
    17b0:	mov	r9, r2
    17b4:	mov	r5, r1
    17b8:	bl	1128 <o_malloc@plt>
    17bc:	cmp	r0, #0
    17c0:	beq	180c <o_base64url_decode@@Base+0x80>
    17c4:	mov	r4, r0
    17c8:	add	r3, sp, #4
    17cc:	mov	r0, r6
    17d0:	mov	r1, r5
    17d4:	mov	r2, r4
    17d8:	bl	1158 <o_base64url_2_base64@plt>
    17dc:	cmp	r0, #0
    17e0:	beq	1800 <o_base64url_decode@@Base+0x74>
    17e4:	ldr	r1, [sp, #4]
    17e8:	mov	r0, r4
    17ec:	mov	r2, r9
    17f0:	mov	r3, r8
    17f4:	bl	1170 <o_base64_decode@plt>
    17f8:	mov	r7, r0
    17fc:	b	1804 <o_base64url_decode@@Base+0x78>
    1800:	mov	r7, #1
    1804:	mov	r0, r4
    1808:	bl	1068 <o_free@plt>
    180c:	mov	r0, r7
    1810:	sub	sp, fp, #24
    1814:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001818 <o_base64url_2_base64@@Base>:
    1818:	push	{r4, r5, r6, sl, fp, lr}
    181c:	add	fp, sp, #16
    1820:	cmp	r0, #0
    1824:	beq	18b8 <o_base64url_2_base64@@Base+0xa0>
    1828:	mov	r6, r1
    182c:	mov	r1, r0
    1830:	mov	r5, r2
    1834:	mov	r0, r2
    1838:	mov	r4, r3
    183c:	mov	r2, r6
    1840:	bl	1080 <memcpy@plt>
    1844:	mov	r0, #1
    1848:	cmp	r6, #0
    184c:	str	r6, [r4]
    1850:	beq	18d4 <o_base64url_2_base64@@Base+0xbc>
    1854:	mov	r1, r5
    1858:	mov	r2, r6
    185c:	ldrb	r3, [r1]
    1860:	cmp	r3, #45	; 0x2d
    1864:	beq	1878 <o_base64url_2_base64@@Base+0x60>
    1868:	cmp	r3, #95	; 0x5f
    186c:	bne	1880 <o_base64url_2_base64@@Base+0x68>
    1870:	mov	r3, #47	; 0x2f
    1874:	b	187c <o_base64url_2_base64@@Base+0x64>
    1878:	mov	r3, #43	; 0x2b
    187c:	strb	r3, [r1]
    1880:	add	r1, r1, #1
    1884:	subs	r2, r2, #1
    1888:	bne	185c <o_base64url_2_base64@@Base+0x44>
    188c:	and	r1, r6, #3
    1890:	cmp	r1, #3
    1894:	beq	18c0 <o_base64url_2_base64@@Base+0xa8>
    1898:	cmp	r1, #2
    189c:	bne	18d4 <o_base64url_2_base64@@Base+0xbc>
    18a0:	add	r1, r5, r6
    18a4:	movw	r2, #15677	; 0x3d3d
    18a8:	strh	r2, [r1]
    18ac:	ldr	r1, [r4]
    18b0:	add	r1, r1, #2
    18b4:	b	18d0 <o_base64url_2_base64@@Base+0xb8>
    18b8:	mov	r0, #0
    18bc:	pop	{r4, r5, r6, sl, fp, pc}
    18c0:	mov	r1, #61	; 0x3d
    18c4:	strb	r1, [r5, r6]
    18c8:	ldr	r1, [r4]
    18cc:	add	r1, r1, #1
    18d0:	str	r1, [r4]
    18d4:	pop	{r4, r5, r6, sl, fp, pc}

000018d8 <o_base64_2_base64url@@Base>:
    18d8:	push	{r4, r5, r6, sl, fp, lr}
    18dc:	add	fp, sp, #16
    18e0:	cmp	r0, #0
    18e4:	beq	1950 <o_base64_2_base64url@@Base+0x78>
    18e8:	mov	r6, r1
    18ec:	mov	r1, r0
    18f0:	mov	r5, r2
    18f4:	mov	r0, r2
    18f8:	mov	r4, r3
    18fc:	mov	r2, r6
    1900:	bl	1080 <memcpy@plt>
    1904:	cmp	r6, #0
    1908:	str	r6, [r4]
    190c:	beq	1958 <o_base64_2_base64url@@Base+0x80>
    1910:	mov	r0, r5
    1914:	ldrb	r1, [r0]
    1918:	cmp	r1, #43	; 0x2b
    191c:	beq	1930 <o_base64_2_base64url@@Base+0x58>
    1920:	cmp	r1, #47	; 0x2f
    1924:	bne	1938 <o_base64_2_base64url@@Base+0x60>
    1928:	mov	r1, #95	; 0x5f
    192c:	b	1934 <o_base64_2_base64url@@Base+0x5c>
    1930:	mov	r1, #45	; 0x2d
    1934:	strb	r1, [r0]
    1938:	add	r0, r0, #1
    193c:	subs	r6, r6, #1
    1940:	bne	1914 <o_base64_2_base64url@@Base+0x3c>
    1944:	ldr	r0, [r4]
    1948:	sub	r1, r0, #1
    194c:	b	195c <o_base64_2_base64url@@Base+0x84>
    1950:	mov	r0, #0
    1954:	pop	{r4, r5, r6, sl, fp, pc}
    1958:	mvn	r1, #0
    195c:	ldrb	r2, [r5, r1]
    1960:	mov	r0, #1
    1964:	cmp	r2, #61	; 0x3d
    1968:	bne	1984 <o_base64_2_base64url@@Base+0xac>
    196c:	sub	r2, r5, #1
    1970:	str	r1, [r4]
    1974:	ldrb	r3, [r2, r1]
    1978:	sub	r1, r1, #1
    197c:	cmp	r3, #61	; 0x3d
    1980:	beq	1970 <o_base64_2_base64url@@Base+0x98>
    1984:	pop	{r4, r5, r6, sl, fp, pc}

00001988 <o_malloc@@Base>:
    1988:	cmp	r0, #0
    198c:	moveq	r0, #0
    1990:	bxeq	lr
    1994:	ldr	r1, [pc, #4]	; 19a0 <o_malloc@@Base+0x18>
    1998:	ldr	r1, [pc, r1]
    199c:	bx	r1
    19a0:	strdeq	r1, [r1], -r8

000019a4 <o_realloc@@Base>:
    19a4:	cmp	r1, #0
    19a8:	moveq	r0, #0
    19ac:	bxeq	lr
    19b0:	ldr	r2, [pc, #4]	; 19bc <o_realloc@@Base+0x18>
    19b4:	ldr	r2, [pc, r2]
    19b8:	bx	r2
    19bc:	andeq	r1, r1, r0, ror #13

000019c0 <o_free@@Base>:
    19c0:	cmp	r0, #0
    19c4:	bxeq	lr
    19c8:	ldr	r1, [pc, #4]	; 19d4 <o_free@@Base+0x14>
    19cc:	ldr	r1, [pc, r1]
    19d0:	bx	r1
    19d4:	andeq	r1, r1, ip, asr #13

000019d8 <o_set_alloc_funcs@@Base>:
    19d8:	ldr	r3, [pc, #32]	; 1a00 <o_set_alloc_funcs@@Base+0x28>
    19dc:	add	r3, pc, r3
    19e0:	str	r1, [r3]
    19e4:	ldr	r1, [pc, #24]	; 1a04 <o_set_alloc_funcs@@Base+0x2c>
    19e8:	add	r1, pc, r1
    19ec:	str	r0, [r1]
    19f0:	ldr	r0, [pc, #16]	; 1a08 <o_set_alloc_funcs@@Base+0x30>
    19f4:	add	r0, pc, r0
    19f8:	str	r2, [r0]
    19fc:	bx	lr
    1a00:			; <UNDEFINED> instruction: 0x000116b8
    1a04:	andeq	r1, r1, r8, lsr #13
    1a08:	andeq	r1, r1, r4, lsr #13

00001a0c <o_get_alloc_funcs@@Base>:
    1a0c:	cmp	r0, #0
    1a10:	beq	1a20 <o_get_alloc_funcs@@Base+0x14>
    1a14:	ldr	r3, [pc, #48]	; 1a4c <o_get_alloc_funcs@@Base+0x40>
    1a18:	ldr	r3, [pc, r3]
    1a1c:	str	r3, [r0]
    1a20:	cmp	r1, #0
    1a24:	beq	1a34 <o_get_alloc_funcs@@Base+0x28>
    1a28:	ldr	r0, [pc, #32]	; 1a50 <o_get_alloc_funcs@@Base+0x44>
    1a2c:	ldr	r0, [pc, r0]
    1a30:	str	r0, [r1]
    1a34:	cmp	r2, #0
    1a38:	bxeq	lr
    1a3c:	ldr	r0, [pc, #16]	; 1a54 <o_get_alloc_funcs@@Base+0x48>
    1a40:	ldr	r0, [pc, r0]
    1a44:	str	r0, [r2]
    1a48:	bx	lr
    1a4c:	andeq	r1, r1, r8, ror r6
    1a50:	andeq	r1, r1, r8, ror #12
    1a54:	andeq	r1, r1, r8, asr r6

00001a58 <str_replace@@Base>:
    1a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a5c:	add	fp, sp, #28
    1a60:	sub	sp, sp, #12
    1a64:	mov	r4, #0
    1a68:	cmp	r0, #0
    1a6c:	beq	1a84 <str_replace@@Base+0x2c>
    1a70:	cmp	r1, #0
    1a74:	mov	r7, r1
    1a78:	movne	sl, r2
    1a7c:	cmpne	r2, #0
    1a80:	bne	1a90 <str_replace@@Base+0x38>
    1a84:	mov	r0, r4
    1a88:	sub	sp, fp, #28
    1a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a90:	mov	r1, r7
    1a94:	mov	r6, r0
    1a98:	bl	1038 <strstr@plt>
    1a9c:	cmp	r0, #0
    1aa0:	beq	1b70 <str_replace@@Base+0x118>
    1aa4:	sub	r5, r0, r6
    1aa8:	add	r8, r5, #1
    1aac:	mov	r0, r8
    1ab0:	bl	1128 <o_malloc@plt>
    1ab4:	cmp	r0, #0
    1ab8:	beq	1a84 <str_replace@@Base+0x2c>
    1abc:	mov	r1, r6
    1ac0:	mov	r2, r5
    1ac4:	mov	r9, r0
    1ac8:	bl	1080 <memcpy@plt>
    1acc:	mov	r4, #0
    1ad0:	mov	r0, r9
    1ad4:	strb	r4, [r9, r5]
    1ad8:	bl	10f8 <strlen@plt>
    1adc:	add	r5, r6, r0
    1ae0:	mov	r0, r7
    1ae4:	bl	10f8 <strlen@plt>
    1ae8:	add	r0, r5, r0
    1aec:	mov	r1, r7
    1af0:	mov	r2, sl
    1af4:	bl	10d4 <str_replace@plt>
    1af8:	cmp	r0, #0
    1afc:	beq	1b80 <str_replace@@Base+0x128>
    1b00:	mov	r7, r0
    1b04:	mov	r0, sl
    1b08:	bl	10f8 <strlen@plt>
    1b0c:	add	r4, r8, r0
    1b10:	mov	r0, r7
    1b14:	bl	10f8 <strlen@plt>
    1b18:	add	r5, r4, r0
    1b1c:	mov	r0, r5
    1b20:	bl	1128 <o_malloc@plt>
    1b24:	cmp	r0, #0
    1b28:	beq	1b8c <str_replace@@Base+0x134>
    1b2c:	str	sl, [sp]
    1b30:	str	r7, [sp, #4]
    1b34:	mov	r1, r5
    1b38:	mov	r3, r9
    1b3c:	mov	r4, r0
    1b40:	ldr	r2, [pc, #92]	; 1ba4 <str_replace@@Base+0x14c>
    1b44:	add	r2, pc, r2
    1b48:	bl	111c <snprintf@plt>
    1b4c:	mov	r5, r0
    1b50:	mov	r0, r9
    1b54:	bl	1068 <o_free@plt>
    1b58:	mov	r0, r7
    1b5c:	bl	1068 <o_free@plt>
    1b60:	cmn	r5, #1
    1b64:	bgt	1a84 <str_replace@@Base+0x2c>
    1b68:	mov	r0, r4
    1b6c:	b	1b98 <str_replace@@Base+0x140>
    1b70:	mov	r0, r6
    1b74:	sub	sp, fp, #28
    1b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b7c:	b	1ba8 <o_strdup@@Base>
    1b80:	mov	r0, r9
    1b84:	bl	1068 <o_free@plt>
    1b88:	b	1a84 <str_replace@@Base+0x2c>
    1b8c:	mov	r0, r9
    1b90:	bl	1068 <o_free@plt>
    1b94:	mov	r0, r7
    1b98:	bl	1068 <o_free@plt>
    1b9c:	mov	r4, #0
    1ba0:	b	1a84 <str_replace@@Base+0x2c>
    1ba4:	ldrdeq	r0, [r0], -r1

00001ba8 <o_strdup@@Base>:
    1ba8:	push	{r4, r5, r6, r7, fp, lr}
    1bac:	add	fp, sp, #16
    1bb0:	mov	r5, #0
    1bb4:	cmp	r0, #0
    1bb8:	beq	1bf4 <o_strdup@@Base+0x4c>
    1bbc:	mov	r4, r0
    1bc0:	bl	10f8 <strlen@plt>
    1bc4:	mov	r6, r0
    1bc8:	add	r0, r0, #1
    1bcc:	bl	1128 <o_malloc@plt>
    1bd0:	cmp	r0, #0
    1bd4:	beq	1bf4 <o_strdup@@Base+0x4c>
    1bd8:	mov	r1, r4
    1bdc:	mov	r2, r6
    1be0:	mov	r7, r0
    1be4:	bl	1080 <memcpy@plt>
    1be8:	mov	r0, #0
    1bec:	mov	r5, r7
    1bf0:	strb	r0, [r7, r6]
    1bf4:	mov	r0, r5
    1bf8:	pop	{r4, r5, r6, r7, fp, pc}

00001bfc <msprintf@@Base>:
    1bfc:	sub	sp, sp, #12
    1c00:	push	{r4, r5, r6, r7, fp, lr}
    1c04:	add	fp, sp, #16
    1c08:	sub	sp, sp, #12
    1c0c:	add	ip, fp, #8
    1c10:	cmp	r0, #0
    1c14:	stm	ip, {r1, r2, r3}
    1c18:	beq	1c70 <msprintf@@Base+0x74>
    1c1c:	mov	r4, r0
    1c20:	add	r3, fp, #8
    1c24:	mov	r0, #0
    1c28:	mov	r1, #0
    1c2c:	mov	r5, #0
    1c30:	mov	r2, r4
    1c34:	str	r3, [sp, #4]
    1c38:	str	r3, [sp, #8]
    1c3c:	bl	117c <vsnprintf@plt>
    1c40:	add	r6, r0, #1
    1c44:	mov	r0, r6
    1c48:	bl	1128 <o_malloc@plt>
    1c4c:	cmp	r0, #0
    1c50:	beq	1c74 <msprintf@@Base+0x78>
    1c54:	ldr	r3, [sp, #4]
    1c58:	mov	r1, r6
    1c5c:	mov	r2, r4
    1c60:	mov	r7, r0
    1c64:	bl	117c <vsnprintf@plt>
    1c68:	mov	r5, r7
    1c6c:	b	1c74 <msprintf@@Base+0x78>
    1c70:	mov	r5, #0
    1c74:	mov	r0, r5
    1c78:	sub	sp, fp, #16
    1c7c:	pop	{r4, r5, r6, r7, fp, lr}
    1c80:	add	sp, sp, #12
    1c84:	bx	lr

00001c88 <mstrcatf@@Base>:
    1c88:	sub	sp, sp, #8
    1c8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1c90:	add	fp, sp, #24
    1c94:	sub	sp, sp, #8
    1c98:	cmp	r1, #0
    1c9c:	str	r2, [fp, #8]
    1ca0:	str	r3, [fp, #12]
    1ca4:	beq	1d30 <mstrcatf@@Base+0xa8>
    1ca8:	mov	r5, r1
    1cac:	add	r3, fp, #8
    1cb0:	mov	r8, r0
    1cb4:	mov	r0, #0
    1cb8:	mov	r1, #0
    1cbc:	mov	r6, #0
    1cc0:	mov	r2, r5
    1cc4:	str	r3, [sp]
    1cc8:	str	r3, [sp, #4]
    1ccc:	bl	117c <vsnprintf@plt>
    1cd0:	add	r4, r0, #1
    1cd4:	mov	r0, r4
    1cd8:	bl	1128 <o_malloc@plt>
    1cdc:	mov	r7, r0
    1ce0:	cmp	r8, #0
    1ce4:	beq	1d38 <mstrcatf@@Base+0xb0>
    1ce8:	cmp	r7, #0
    1cec:	beq	1d58 <mstrcatf@@Base+0xd0>
    1cf0:	ldr	r3, [sp]
    1cf4:	mov	r0, r7
    1cf8:	mov	r1, r4
    1cfc:	mov	r2, r5
    1d00:	bl	117c <vsnprintf@plt>
    1d04:	ldr	r0, [pc, #96]	; 1d6c <mstrcatf@@Base+0xe4>
    1d08:	mov	r1, r8
    1d0c:	mov	r2, r7
    1d10:	add	r0, pc, r0
    1d14:	bl	114c <msprintf@plt>
    1d18:	mov	r6, r0
    1d1c:	mov	r0, r7
    1d20:	bl	1068 <o_free@plt>
    1d24:	mov	r0, r8
    1d28:	bl	1068 <o_free@plt>
    1d2c:	b	1d58 <mstrcatf@@Base+0xd0>
    1d30:	mov	r6, #0
    1d34:	b	1d58 <mstrcatf@@Base+0xd0>
    1d38:	cmp	r7, #0
    1d3c:	beq	1d54 <mstrcatf@@Base+0xcc>
    1d40:	ldr	r3, [sp]
    1d44:	mov	r0, r7
    1d48:	mov	r1, r4
    1d4c:	mov	r2, r5
    1d50:	bl	117c <vsnprintf@plt>
    1d54:	mov	r6, r7
    1d58:	mov	r0, r6
    1d5c:	sub	sp, fp, #24
    1d60:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    1d64:	add	sp, sp, #8
    1d68:	bx	lr
    1d6c:	andeq	r0, r0, r7, lsl #26

00001d70 <o_strndup@@Base>:
    1d70:	push	{r4, r5, r6, r7, fp, lr}
    1d74:	add	fp, sp, #16
    1d78:	mov	r5, #0
    1d7c:	cmp	r0, #0
    1d80:	beq	1db8 <o_strndup@@Base+0x48>
    1d84:	mov	r6, r0
    1d88:	add	r0, r1, #1
    1d8c:	mov	r4, r1
    1d90:	bl	1128 <o_malloc@plt>
    1d94:	cmp	r0, #0
    1d98:	beq	1db8 <o_strndup@@Base+0x48>
    1d9c:	mov	r1, r6
    1da0:	mov	r2, r4
    1da4:	mov	r7, r0
    1da8:	bl	1080 <memcpy@plt>
    1dac:	mov	r0, #0
    1db0:	mov	r5, r7
    1db4:	strb	r0, [r7, r4]
    1db8:	mov	r0, r5
    1dbc:	pop	{r4, r5, r6, r7, fp, pc}

00001dc0 <o_strcmp@@Base>:
    1dc0:	orrs	r2, r0, r1
    1dc4:	mov	r2, #0
    1dc8:	beq	1dec <o_strcmp@@Base+0x2c>
    1dcc:	cmp	r1, #0
    1dd0:	mov	r2, #1
    1dd4:	mov	r3, #1
    1dd8:	mvneq	r2, #0
    1ddc:	cmp	r0, #0
    1de0:	moveq	r2, r3
    1de4:	cmpne	r1, #0
    1de8:	bne	1df4 <o_strcmp@@Base+0x34>
    1dec:	mov	r0, r2
    1df0:	bx	lr
    1df4:	b	1050 <strcmp@plt>

00001df8 <o_strncmp@@Base>:
    1df8:	mov	r3, r0
    1dfc:	orrs	r0, r0, r1
    1e00:	mov	r0, #0
    1e04:	cmpne	r2, #0
    1e08:	bne	1e10 <o_strncmp@@Base+0x18>
    1e0c:	bx	lr
    1e10:	cmp	r1, #0
    1e14:	mov	r0, #1
    1e18:	mov	ip, #1
    1e1c:	mvneq	r0, #0
    1e20:	cmp	r3, #0
    1e24:	moveq	r0, ip
    1e28:	cmpne	r1, #0
    1e2c:	bxeq	lr
    1e30:	mov	r0, r3
    1e34:	b	1188 <strncmp@plt>

00001e38 <o_strcpy@@Base>:
    1e38:	cmp	r0, #0
    1e3c:	mov	r2, #0
    1e40:	cmpne	r1, #0
    1e44:	beq	1e5c <o_strcpy@@Base+0x24>
    1e48:	push	{fp, lr}
    1e4c:	mov	fp, sp
    1e50:	bl	10bc <strcpy@plt>
    1e54:	mov	r2, r0
    1e58:	pop	{fp, lr}
    1e5c:	mov	r0, r2
    1e60:	bx	lr

00001e64 <o_strncpy@@Base>:
    1e64:	cmp	r0, #0
    1e68:	mov	r3, #0
    1e6c:	cmpne	r1, #0
    1e70:	beq	1e88 <o_strncpy@@Base+0x24>
    1e74:	push	{fp, lr}
    1e78:	mov	fp, sp
    1e7c:	bl	1140 <strncpy@plt>
    1e80:	mov	r3, r0
    1e84:	pop	{fp, lr}
    1e88:	mov	r0, r3
    1e8c:	bx	lr

00001e90 <o_strcasecmp@@Base>:
    1e90:	orrs	r2, r0, r1
    1e94:	mov	r2, #0
    1e98:	beq	1ec4 <o_strcasecmp@@Base+0x34>
    1e9c:	cmp	r0, #0
    1ea0:	beq	1eb0 <o_strcasecmp@@Base+0x20>
    1ea4:	mvn	r2, #0
    1ea8:	cmp	r1, #0
    1eac:	beq	1ec4 <o_strcasecmp@@Base+0x34>
    1eb0:	cmp	r0, #0
    1eb4:	bne	1ecc <o_strcasecmp@@Base+0x3c>
    1eb8:	mov	r2, #1
    1ebc:	cmp	r1, #0
    1ec0:	beq	1ecc <o_strcasecmp@@Base+0x3c>
    1ec4:	mov	r0, r2
    1ec8:	bx	lr
    1ecc:	b	10a4 <strcasecmp@plt>

00001ed0 <o_strncasecmp@@Base>:
    1ed0:	orrs	r3, r0, r1
    1ed4:	mov	r3, #0
    1ed8:	cmpne	r2, #0
    1edc:	bne	1ee8 <o_strncasecmp@@Base+0x18>
    1ee0:	mov	r0, r3
    1ee4:	bx	lr
    1ee8:	cmp	r0, #0
    1eec:	beq	1efc <o_strncasecmp@@Base+0x2c>
    1ef0:	mvn	r3, #0
    1ef4:	cmp	r1, #0
    1ef8:	beq	1ee0 <o_strncasecmp@@Base+0x10>
    1efc:	cmp	r0, #0
    1f00:	bne	1f10 <o_strncasecmp@@Base+0x40>
    1f04:	mov	r3, #1
    1f08:	cmp	r1, #0
    1f0c:	bne	1ee0 <o_strncasecmp@@Base+0x10>
    1f10:	b	1110 <strncasecmp@plt>

00001f14 <o_strstr@@Base>:
    1f14:	cmp	r0, #0
    1f18:	cmpne	r1, #0
    1f1c:	bne	1f28 <o_strstr@@Base+0x14>
    1f20:	mov	r0, #0
    1f24:	bx	lr
    1f28:	b	1038 <strstr@plt>

00001f2c <o_strchr@@Base>:
    1f2c:	cmp	r0, #0
    1f30:	moveq	r0, #0
    1f34:	bxeq	lr
    1f38:	b	1104 <strchr@plt>

00001f3c <o_strnchr@@Base>:
    1f3c:	push	{r4, r5, r6, r7, fp, lr}
    1f40:	add	fp, sp, #16
    1f44:	cmp	r0, #0
    1f48:	mov	r4, #0
    1f4c:	movne	r7, r1
    1f50:	cmpne	r1, #0
    1f54:	bne	1f60 <o_strnchr@@Base+0x24>
    1f58:	mov	r0, r4
    1f5c:	pop	{r4, r5, r6, r7, fp, pc}
    1f60:	mov	r5, r2
    1f64:	mov	r6, r0
    1f68:	bl	10f8 <strlen@plt>
    1f6c:	cmp	r0, #0
    1f70:	beq	1f58 <o_strnchr@@Base+0x1c>
    1f74:	ldrb	r1, [r6]
    1f78:	cmp	r1, r5
    1f7c:	beq	1f94 <o_strnchr@@Base+0x58>
    1f80:	subs	r7, r7, #1
    1f84:	sub	r0, r0, #1
    1f88:	add	r6, r6, #1
    1f8c:	bne	1f6c <o_strnchr@@Base+0x30>
    1f90:	b	1f58 <o_strnchr@@Base+0x1c>
    1f94:	mov	r4, r6
    1f98:	b	1f58 <o_strnchr@@Base+0x1c>

00001f9c <o_strlen@@Base>:
    1f9c:	cmp	r0, #0
    1fa0:	moveq	r0, #0
    1fa4:	bxeq	lr
    1fa8:	b	10f8 <strlen@plt>

00001fac <o_strrchr@@Base>:
    1fac:	cmp	r0, #0
    1fb0:	moveq	r0, #0
    1fb4:	bxeq	lr
    1fb8:	b	1164 <strrchr@plt>

00001fbc <o_strrnchr@@Base>:
    1fbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1fc0:	add	fp, sp, #24
    1fc4:	cmp	r0, #0
    1fc8:	mov	r8, #0
    1fcc:	movne	r7, r1
    1fd0:	cmpne	r1, #0
    1fd4:	bne	1fe0 <o_strrnchr@@Base+0x24>
    1fd8:	mov	r0, r8
    1fdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1fe0:	mov	r9, r2
    1fe4:	mov	r6, r0
    1fe8:	bl	10f8 <strlen@plt>
    1fec:	sub	r5, r0, #1
    1ff0:	rsb	r4, r0, #0
    1ff4:	cmp	r5, #0
    1ff8:	bmi	1fd8 <o_strrnchr@@Base+0x1c>
    1ffc:	mov	r0, r6
    2000:	bl	10f8 <strlen@plt>
    2004:	add	r0, r0, r4
    2008:	cmp	r0, r7
    200c:	bcs	1fd8 <o_strrnchr@@Base+0x1c>
    2010:	ldrb	r0, [r6, r5]
    2014:	sub	r5, r5, #1
    2018:	add	r4, r4, #1
    201c:	cmp	r0, r9
    2020:	bne	1ff4 <o_strrnchr@@Base+0x38>
    2024:	sub	r8, r6, r4
    2028:	b	1fd8 <o_strrnchr@@Base+0x1c>

0000202c <o_strnstr@@Base>:
    202c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2030:	add	fp, sp, #24
    2034:	cmp	r0, #0
    2038:	mov	r8, #0
    203c:	movne	r9, r1
    2040:	cmpne	r1, #0
    2044:	bne	2050 <o_strnstr@@Base+0x24>
    2048:	mov	r0, r8
    204c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2050:	mov	r5, r0
    2054:	mov	r0, r9
    2058:	mov	r4, r2
    205c:	bl	10f8 <strlen@plt>
    2060:	cmp	r0, #0
    2064:	beq	20b4 <o_strnstr@@Base+0x88>
    2068:	mov	r7, r0
    206c:	subs	r0, r4, r0
    2070:	bmi	2048 <o_strnstr@@Base+0x1c>
    2074:	ldrb	r6, [r9]
    2078:	add	r4, r4, #1
    207c:	ldrb	r0, [r5]
    2080:	cmp	r0, r6
    2084:	bne	20a0 <o_strnstr@@Base+0x74>
    2088:	mov	r0, r5
    208c:	mov	r1, r9
    2090:	mov	r2, r7
    2094:	bl	1188 <strncmp@plt>
    2098:	cmp	r0, #0
    209c:	beq	20b4 <o_strnstr@@Base+0x88>
    20a0:	sub	r4, r4, #1
    20a4:	add	r5, r5, #1
    20a8:	cmp	r7, r4
    20ac:	bne	207c <o_strnstr@@Base+0x50>
    20b0:	b	2048 <o_strnstr@@Base+0x1c>
    20b4:	mov	r8, r5
    20b8:	b	2048 <o_strnstr@@Base+0x1c>

000020bc <o_strcasestr@@Base>:
    20bc:	cmp	r0, #0
    20c0:	cmpne	r1, #0
    20c4:	bne	20d0 <o_strcasestr@@Base+0x14>
    20c8:	mov	r0, #0
    20cc:	bx	lr
    20d0:	b	1044 <strcasestr@plt>

000020d4 <split_string@@Base>:
    20d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20d8:	add	fp, sp, #28
    20dc:	sub	sp, sp, #4
    20e0:	cmp	r0, #0
    20e4:	mov	r5, #0
    20e8:	movne	r8, r1
    20ec:	cmpne	r1, #0
    20f0:	bne	2100 <split_string@@Base+0x2c>
    20f4:	mov	r0, r5
    20f8:	sub	sp, fp, #28
    20fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2100:	cmp	r2, #0
    2104:	mov	r6, r0
    2108:	mov	r9, r2
    210c:	mov	r1, r8
    2110:	movne	r0, #0
    2114:	strne	r0, [r9]
    2118:	mov	r0, r6
    211c:	bl	1038 <strstr@plt>
    2120:	cmp	r0, #0
    2124:	beq	21c8 <split_string@@Base+0xf4>
    2128:	mov	r7, r0
    212c:	mov	r5, #1
    2130:	cmp	r9, #0
    2134:	beq	219c <split_string@@Base+0xc8>
    2138:	mov	r0, #4
    213c:	add	r1, r0, r5, lsl #2
    2140:	ldr	r0, [r9]
    2144:	bl	10c8 <o_realloc@plt>
    2148:	cmp	r0, #0
    214c:	str	r0, [r9]
    2150:	beq	219c <split_string@@Base+0xc8>
    2154:	sub	sl, r7, r6
    2158:	add	r0, sl, #1
    215c:	bl	1128 <o_malloc@plt>
    2160:	mov	r1, #0
    2164:	mov	r4, r0
    2168:	cmp	r0, #0
    216c:	beq	2188 <split_string@@Base+0xb4>
    2170:	mov	r0, r4
    2174:	mov	r1, r6
    2178:	mov	r2, sl
    217c:	bl	1080 <memcpy@plt>
    2180:	mov	r1, #0
    2184:	strb	r1, [r4, sl]
    2188:	ldr	r0, [r9]
    218c:	add	r0, r0, r5, lsl #2
    2190:	str	r4, [r0, #-4]
    2194:	ldr	r0, [r9]
    2198:	str	r1, [r0, r5, lsl #2]
    219c:	mov	r0, r8
    21a0:	bl	10f8 <strlen@plt>
    21a4:	add	r6, r7, r0
    21a8:	mov	r1, r8
    21ac:	mov	r0, r6
    21b0:	bl	1038 <strstr@plt>
    21b4:	mov	r7, r0
    21b8:	add	r5, r5, #1
    21bc:	cmp	r0, #0
    21c0:	bne	2130 <split_string@@Base+0x5c>
    21c4:	b	21cc <split_string@@Base+0xf8>
    21c8:	mov	r5, #1
    21cc:	cmp	r9, #0
    21d0:	beq	20f4 <split_string@@Base+0x20>
    21d4:	mov	r0, #4
    21d8:	add	r1, r0, r5, lsl #2
    21dc:	ldr	r0, [r9]
    21e0:	bl	10c8 <o_realloc@plt>
    21e4:	cmp	r0, #0
    21e8:	str	r0, [r9]
    21ec:	beq	20f4 <split_string@@Base+0x20>
    21f0:	mov	r0, r6
    21f4:	bl	108c <o_strdup@plt>
    21f8:	ldr	r1, [r9]
    21fc:	add	r1, r1, r5, lsl #2
    2200:	str	r0, [r1, #-4]
    2204:	mov	r1, #0
    2208:	ldr	r0, [r9]
    220c:	str	r1, [r0, r5, lsl #2]
    2210:	b	20f4 <split_string@@Base+0x20>

00002214 <free_string_array@@Base>:
    2214:	cmp	r0, #0
    2218:	bxeq	lr
    221c:	push	{r4, r5, r6, sl, fp, lr}
    2220:	add	fp, sp, #16
    2224:	mov	r4, r0
    2228:	ldr	r0, [r0]
    222c:	cmp	r0, #0
    2230:	beq	2250 <free_string_array@@Base+0x3c>
    2234:	add	r5, r4, #4
    2238:	mov	r6, #0
    223c:	bl	1068 <o_free@plt>
    2240:	str	r6, [r5, #-4]
    2244:	ldr	r0, [r5], #4
    2248:	cmp	r0, #0
    224c:	bne	223c <free_string_array@@Base+0x28>
    2250:	mov	r0, r4
    2254:	pop	{r4, r5, r6, sl, fp, lr}
    2258:	b	1068 <o_free@plt>

0000225c <string_array_size@@Base>:
    225c:	cmp	r0, #0
    2260:	moveq	r0, #0
    2264:	bxeq	lr
    2268:	mov	r1, #0
    226c:	ldr	r2, [r0, r1, lsl #2]
    2270:	add	r1, r1, #1
    2274:	cmp	r2, #0
    2278:	bne	226c <string_array_size@@Base+0x10>
    227c:	sub	r0, r1, #1
    2280:	bx	lr

00002284 <string_array_join@@Base>:
    2284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    2288:	add	fp, sp, #24
    228c:	cmp	r0, #0
    2290:	mov	r5, #0
    2294:	movne	r4, r1
    2298:	cmpne	r1, #0
    229c:	bne	22a8 <string_array_join@@Base+0x24>
    22a0:	mov	r0, r5
    22a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    22a8:	ldr	r3, [r0]
    22ac:	cmp	r3, #0
    22b0:	beq	22a0 <string_array_join@@Base+0x1c>
    22b4:	ldr	r8, [pc, #80]	; 230c <string_array_join@@Base+0x88>
    22b8:	add	r6, r0, #4
    22bc:	mov	r5, #0
    22c0:	add	r8, pc, r8
    22c4:	cmp	r5, #0
    22c8:	beq	22f0 <string_array_join@@Base+0x6c>
    22cc:	mov	r0, r8
    22d0:	mov	r1, r5
    22d4:	mov	r2, r4
    22d8:	bl	114c <msprintf@plt>
    22dc:	mov	r7, r0
    22e0:	mov	r0, r5
    22e4:	bl	1068 <o_free@plt>
    22e8:	mov	r5, r7
    22ec:	b	22fc <string_array_join@@Base+0x78>
    22f0:	mov	r0, r3
    22f4:	bl	108c <o_strdup@plt>
    22f8:	mov	r5, r0
    22fc:	ldr	r3, [r6], #4
    2300:	cmp	r3, #0
    2304:	bne	22c4 <string_array_join@@Base+0x40>
    2308:	b	22a0 <string_array_join@@Base+0x1c>
    230c:	andeq	r0, r0, r5, asr r7

00002310 <trimwhitespace@@Base>:
    2310:	push	{r4, r5, r6, sl, fp, lr}
    2314:	add	fp, sp, #16
    2318:	cmp	r0, #0
    231c:	beq	2354 <trimwhitespace@@Base+0x44>
    2320:	ldrb	r6, [r0]
    2324:	mov	r4, r0
    2328:	cmp	r6, #0
    232c:	beq	2398 <trimwhitespace@@Base+0x88>
    2330:	bl	10ec <__ctype_b_loc@plt>
    2334:	ldr	r5, [r0]
    2338:	add	r0, r5, r6, lsl #1
    233c:	ldrb	r0, [r0, #1]
    2340:	tst	r0, #32
    2344:	beq	235c <trimwhitespace@@Base+0x4c>
    2348:	ldrb	r0, [r4, #1]!
    234c:	add	r0, r5, r0, lsl #1
    2350:	b	233c <trimwhitespace@@Base+0x2c>
    2354:	mov	r4, #0
    2358:	b	2398 <trimwhitespace@@Base+0x88>
    235c:	mov	r0, r4
    2360:	bl	10f8 <strlen@plt>
    2364:	add	r0, r0, r4
    2368:	sub	r1, r0, #1
    236c:	mov	r0, r1
    2370:	cmp	r1, r4
    2374:	bls	2390 <trimwhitespace@@Base+0x80>
    2378:	mov	r1, r0
    237c:	ldrb	r2, [r1], #-1
    2380:	add	r2, r5, r2, lsl #1
    2384:	ldrb	r2, [r2, #1]
    2388:	tst	r2, #32
    238c:	bne	236c <trimwhitespace@@Base+0x5c>
    2390:	mov	r1, #0
    2394:	strb	r1, [r0, #1]
    2398:	mov	r0, r4
    239c:	pop	{r4, r5, r6, sl, fp, pc}

000023a0 <trimcharacter@@Base>:
    23a0:	push	{r4, r5, fp, lr}
    23a4:	add	fp, sp, #8
    23a8:	cmp	r0, #0
    23ac:	beq	23d4 <trimcharacter@@Base+0x34>
    23b0:	mov	r4, r0
    23b4:	ldrb	r0, [r0]
    23b8:	cmp	r0, #0
    23bc:	beq	2410 <trimcharacter@@Base+0x70>
    23c0:	mov	r5, r1
    23c4:	cmp	r0, r5
    23c8:	bne	23dc <trimcharacter@@Base+0x3c>
    23cc:	ldrb	r0, [r4, #1]!
    23d0:	b	23c4 <trimcharacter@@Base+0x24>
    23d4:	mov	r4, #0
    23d8:	b	2410 <trimcharacter@@Base+0x70>
    23dc:	mov	r0, r4
    23e0:	bl	10f8 <strlen@plt>
    23e4:	add	r0, r0, r4
    23e8:	sub	r1, r0, #1
    23ec:	mov	r0, r1
    23f0:	cmp	r1, r4
    23f4:	bls	2408 <trimcharacter@@Base+0x68>
    23f8:	mov	r1, r0
    23fc:	ldrb	r2, [r1], #-1
    2400:	cmp	r2, r5
    2404:	beq	23ec <trimcharacter@@Base+0x4c>
    2408:	mov	r1, #0
    240c:	strb	r1, [r0, #1]
    2410:	mov	r0, r4
    2414:	pop	{r4, r5, fp, pc}

00002418 <string_array_has_value@@Base>:
    2418:	push	{r4, r5, r6, sl, fp, lr}
    241c:	add	fp, sp, #16
    2420:	cmp	r0, #0
    2424:	mov	r4, #0
    2428:	movne	r5, r1
    242c:	cmpne	r1, #0
    2430:	bne	243c <string_array_has_value@@Base+0x24>
    2434:	mov	r0, r4
    2438:	pop	{r4, r5, r6, sl, fp, pc}
    243c:	mov	r1, r0
    2440:	ldr	r0, [r0]
    2444:	cmp	r0, #0
    2448:	beq	2434 <string_array_has_value@@Base+0x1c>
    244c:	add	r6, r1, #4
    2450:	mov	r1, r5
    2454:	bl	1050 <strcmp@plt>
    2458:	cmp	r0, #0
    245c:	beq	2470 <string_array_has_value@@Base+0x58>
    2460:	ldr	r0, [r6], #4
    2464:	cmp	r0, #0
    2468:	bne	2450 <string_array_has_value@@Base+0x38>
    246c:	b	2434 <string_array_has_value@@Base+0x1c>
    2470:	mov	r4, #1
    2474:	b	2434 <string_array_has_value@@Base+0x1c>

00002478 <string_array_has_value_case@@Base>:
    2478:	push	{r4, r5, r6, sl, fp, lr}
    247c:	add	fp, sp, #16
    2480:	cmp	r0, #0
    2484:	mov	r4, #0
    2488:	movne	r5, r1
    248c:	cmpne	r1, #0
    2490:	bne	249c <string_array_has_value_case@@Base+0x24>
    2494:	mov	r0, r4
    2498:	pop	{r4, r5, r6, sl, fp, pc}
    249c:	mov	r1, r0
    24a0:	ldr	r0, [r0]
    24a4:	cmp	r0, #0
    24a8:	beq	2494 <string_array_has_value_case@@Base+0x1c>
    24ac:	add	r6, r1, #4
    24b0:	mov	r1, r5
    24b4:	bl	10a4 <strcasecmp@plt>
    24b8:	cmp	r0, #0
    24bc:	beq	24d0 <string_array_has_value_case@@Base+0x58>
    24c0:	ldr	r0, [r6], #4
    24c4:	cmp	r0, #0
    24c8:	bne	24b0 <string_array_has_value_case@@Base+0x38>
    24cc:	b	2494 <string_array_has_value_case@@Base+0x1c>
    24d0:	mov	r4, #1
    24d4:	b	2494 <string_array_has_value_case@@Base+0x1c>

000024d8 <string_array_has_value_n@@Base>:
    24d8:	push	{r4, r5, r6, r7, fp, lr}
    24dc:	add	fp, sp, #16
    24e0:	cmp	r0, #0
    24e4:	movne	r5, r1
    24e8:	cmpne	r1, #0
    24ec:	beq	2534 <string_array_has_value_n@@Base+0x5c>
    24f0:	mov	r1, r0
    24f4:	ldr	r0, [r0]
    24f8:	cmp	r0, #0
    24fc:	beq	2534 <string_array_has_value_n@@Base+0x5c>
    2500:	mov	r4, r2
    2504:	add	r7, r1, #4
    2508:	mov	r6, #1
    250c:	cmp	r4, #0
    2510:	beq	2538 <string_array_has_value_n@@Base+0x60>
    2514:	mov	r1, r5
    2518:	mov	r2, r4
    251c:	bl	1188 <strncmp@plt>
    2520:	cmp	r0, #0
    2524:	beq	2538 <string_array_has_value_n@@Base+0x60>
    2528:	ldr	r0, [r7], #4
    252c:	cmp	r0, #0
    2530:	bne	250c <string_array_has_value_n@@Base+0x34>
    2534:	mov	r6, #0
    2538:	mov	r0, r6
    253c:	pop	{r4, r5, r6, r7, fp, pc}

00002540 <string_array_has_value_ncase@@Base>:
    2540:	push	{r4, r5, r6, r7, fp, lr}
    2544:	add	fp, sp, #16
    2548:	cmp	r0, #0
    254c:	movne	r5, r1
    2550:	cmpne	r1, #0
    2554:	beq	259c <string_array_has_value_ncase@@Base+0x5c>
    2558:	mov	r1, r0
    255c:	ldr	r0, [r0]
    2560:	cmp	r0, #0
    2564:	beq	259c <string_array_has_value_ncase@@Base+0x5c>
    2568:	mov	r4, r2
    256c:	add	r7, r1, #4
    2570:	mov	r6, #1
    2574:	cmp	r4, #0
    2578:	beq	25a0 <string_array_has_value_ncase@@Base+0x60>
    257c:	mov	r1, r5
    2580:	mov	r2, r4
    2584:	bl	1110 <strncasecmp@plt>
    2588:	cmp	r0, #0
    258c:	beq	25a0 <string_array_has_value_ncase@@Base+0x60>
    2590:	ldr	r0, [r7], #4
    2594:	cmp	r0, #0
    2598:	bne	2574 <string_array_has_value_ncase@@Base+0x34>
    259c:	mov	r6, #0
    25a0:	mov	r0, r6
    25a4:	pop	{r4, r5, r6, r7, fp, pc}

000025a8 <string_array_has_trimmed_value@@Base>:
    25a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    25ac:	add	fp, sp, #24
    25b0:	cmp	r0, #0
    25b4:	mov	r6, #0
    25b8:	cmpne	r1, #0
    25bc:	beq	2664 <string_array_has_trimmed_value@@Base+0xbc>
    25c0:	mov	r7, r0
    25c4:	mov	r0, r1
    25c8:	bl	108c <o_strdup@plt>
    25cc:	mov	r8, r0
    25d0:	cmp	r0, #0
    25d4:	beq	2658 <string_array_has_trimmed_value@@Base+0xb0>
    25d8:	mov	r0, r8
    25dc:	bl	10b0 <trimwhitespace@plt>
    25e0:	mov	r5, r0
    25e4:	ldr	r0, [r7]
    25e8:	cmp	r0, #0
    25ec:	beq	2658 <string_array_has_trimmed_value@@Base+0xb0>
    25f0:	add	r4, r7, #4
    25f4:	bl	108c <o_strdup@plt>
    25f8:	cmp	r0, #0
    25fc:	beq	2658 <string_array_has_trimmed_value@@Base+0xb0>
    2600:	mov	r7, r0
    2604:	bl	10b0 <trimwhitespace@plt>
    2608:	orrs	r1, r5, r0
    260c:	bne	2618 <string_array_has_trimmed_value@@Base+0x70>
    2610:	mov	r6, #1
    2614:	b	2638 <string_array_has_trimmed_value@@Base+0x90>
    2618:	cmp	r5, #0
    261c:	mov	r6, #0
    2620:	cmpne	r0, #0
    2624:	beq	2638 <string_array_has_trimmed_value@@Base+0x90>
    2628:	mov	r1, r5
    262c:	bl	1050 <strcmp@plt>
    2630:	cmp	r0, #0
    2634:	moveq	r6, #1
    2638:	mov	r0, r7
    263c:	bl	1068 <o_free@plt>
    2640:	cmp	r6, #0
    2644:	bne	265c <string_array_has_trimmed_value@@Base+0xb4>
    2648:	ldr	r0, [r4], #4
    264c:	cmp	r0, #0
    2650:	bne	25f4 <string_array_has_trimmed_value@@Base+0x4c>
    2654:	b	265c <string_array_has_trimmed_value@@Base+0xb4>
    2658:	mov	r6, #0
    265c:	mov	r0, r8
    2660:	bl	1068 <o_free@plt>
    2664:	mov	r0, r6
    2668:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000266c <pointer_list_init@@Base>:
    266c:	cmp	r0, #0
    2670:	movne	r1, #0
    2674:	strne	r1, [r0]
    2678:	strne	r1, [r0, #4]
    267c:	bx	lr

00002680 <pointer_list_clean@@Base>:
    2680:	push	{r4, r5, fp, lr}
    2684:	add	fp, sp, #8
    2688:	cmp	r0, #0
    268c:	beq	26bc <pointer_list_clean@@Base+0x3c>
    2690:	mov	r4, r0
    2694:	ldr	r0, [r0]
    2698:	cmp	r0, #0
    269c:	popeq	{r4, r5, fp, pc}
    26a0:	sub	r5, r0, #1
    26a4:	mov	r0, r4
    26a8:	mov	r1, r5
    26ac:	bl	1074 <pointer_list_remove_at@plt>
    26b0:	sub	r5, r5, #1
    26b4:	cmn	r5, #1
    26b8:	bne	26a4 <pointer_list_clean@@Base+0x24>
    26bc:	pop	{r4, r5, fp, pc}

000026c0 <pointer_list_size@@Base>:
    26c0:	cmp	r0, #0
    26c4:	ldrne	r0, [r0]
    26c8:	moveq	r0, #0
    26cc:	bx	lr

000026d0 <pointer_list_remove_at@@Base>:
    26d0:	push	{r4, sl, fp, lr}
    26d4:	add	fp, sp, #8
    26d8:	mov	r4, r0
    26dc:	mov	r0, #0
    26e0:	cmp	r4, #0
    26e4:	beq	2750 <pointer_list_remove_at@@Base+0x80>
    26e8:	ldr	ip, [r4]
    26ec:	cmp	ip, r1
    26f0:	popls	{r4, sl, fp, pc}
    26f4:	sub	r3, ip, #1
    26f8:	cmp	r3, r1
    26fc:	bls	271c <pointer_list_remove_at@@Base+0x4c>
    2700:	ldr	r0, [r4, #4]
    2704:	add	r2, r0, r1, lsl #2
    2708:	ldr	r2, [r2, #4]
    270c:	str	r2, [r0, r1, lsl #2]
    2710:	add	r1, r1, #1
    2714:	cmp	r3, r1
    2718:	bne	2700 <pointer_list_remove_at@@Base+0x30>
    271c:	ldr	r0, [r4, #4]
    2720:	cmp	ip, #2
    2724:	bcc	2734 <pointer_list_remove_at@@Base+0x64>
    2728:	lsl	r1, r3, #2
    272c:	bl	10c8 <o_realloc@plt>
    2730:	b	273c <pointer_list_remove_at@@Base+0x6c>
    2734:	bl	1068 <o_free@plt>
    2738:	mov	r0, #0
    273c:	str	r0, [r4, #4]
    2740:	ldr	r0, [r4]
    2744:	sub	r0, r0, #1
    2748:	str	r0, [r4]
    274c:	mov	r0, #1
    2750:	pop	{r4, sl, fp, pc}

00002754 <pointer_list_clean_free@@Base>:
    2754:	push	{r4, r5, r6, sl, fp, lr}
    2758:	add	fp, sp, #16
    275c:	cmp	r0, #0
    2760:	beq	27b4 <pointer_list_clean_free@@Base+0x60>
    2764:	mov	r4, r1
    2768:	ldr	r1, [r0]
    276c:	mov	r5, r0
    2770:	cmp	r1, #0
    2774:	beq	27b4 <pointer_list_clean_free@@Base+0x60>
    2778:	sub	r6, r1, #1
    277c:	mov	r0, #0
    2780:	cmp	r1, r6
    2784:	bls	2790 <pointer_list_clean_free@@Base+0x3c>
    2788:	ldr	r0, [r5, #4]
    278c:	ldr	r0, [r0, r6, lsl #2]
    2790:	blx	r4
    2794:	mov	r0, r5
    2798:	mov	r1, r6
    279c:	bl	1074 <pointer_list_remove_at@plt>
    27a0:	cmp	r6, #0
    27a4:	beq	27b4 <pointer_list_clean_free@@Base+0x60>
    27a8:	ldr	r1, [r5]
    27ac:	sub	r6, r6, #1
    27b0:	b	277c <pointer_list_clean_free@@Base+0x28>
    27b4:	pop	{r4, r5, r6, sl, fp, pc}

000027b8 <pointer_list_get_at@@Base>:
    27b8:	mov	r2, r0
    27bc:	mov	r0, #0
    27c0:	cmp	r2, #0
    27c4:	beq	27dc <pointer_list_get_at@@Base+0x24>
    27c8:	ldr	r3, [r2]
    27cc:	cmp	r3, r1
    27d0:	bxls	lr
    27d4:	ldr	r0, [r2, #4]
    27d8:	ldr	r0, [r0, r1, lsl #2]
    27dc:	bx	lr

000027e0 <pointer_list_append@@Base>:
    27e0:	push	{r4, r5, fp, lr}
    27e4:	add	fp, sp, #8
    27e8:	cmp	r0, #0
    27ec:	beq	2830 <pointer_list_append@@Base+0x50>
    27f0:	mov	r5, r1
    27f4:	ldr	r1, [r0]
    27f8:	mov	r4, r0
    27fc:	ldr	r0, [r0, #4]
    2800:	mov	r2, #4
    2804:	add	r1, r2, r1, lsl #2
    2808:	bl	10c8 <o_realloc@plt>
    280c:	cmp	r0, #0
    2810:	str	r0, [r4, #4]
    2814:	beq	2838 <pointer_list_append@@Base+0x58>
    2818:	ldr	r1, [r4]
    281c:	str	r5, [r0, r1, lsl #2]
    2820:	add	r0, r1, #1
    2824:	mov	r5, #1
    2828:	str	r0, [r4]
    282c:	b	2848 <pointer_list_append@@Base+0x68>
    2830:	mov	r5, #0
    2834:	b	2848 <pointer_list_append@@Base+0x68>
    2838:	mov	r0, #0
    283c:	mov	r5, #0
    2840:	bl	1068 <o_free@plt>
    2844:	str	r5, [r4, #4]
    2848:	mov	r0, r5
    284c:	pop	{r4, r5, fp, pc}

00002850 <pointer_list_remove_at_free@@Base>:
    2850:	push	{r4, r5, fp, lr}
    2854:	add	fp, sp, #8
    2858:	cmp	r0, #0
    285c:	beq	2890 <pointer_list_remove_at_free@@Base+0x40>
    2860:	mov	r5, r0
    2864:	ldr	r0, [r0]
    2868:	mov	r4, r1
    286c:	cmp	r0, r1
    2870:	bls	2890 <pointer_list_remove_at_free@@Base+0x40>
    2874:	ldr	r0, [r5, #4]
    2878:	ldr	r0, [r0, r4, lsl #2]
    287c:	blx	r2
    2880:	mov	r0, r5
    2884:	mov	r1, r4
    2888:	pop	{r4, r5, fp, lr}
    288c:	b	26d0 <pointer_list_remove_at@@Base>
    2890:	mov	r0, #0
    2894:	pop	{r4, r5, fp, pc}

00002898 <pointer_list_insert_at@@Base>:
    2898:	push	{r4, r5, r6, r7, fp, lr}
    289c:	add	fp, sp, #16
    28a0:	mov	r7, #0
    28a4:	cmp	r0, #0
    28a8:	beq	291c <pointer_list_insert_at@@Base+0x84>
    28ac:	mov	r4, r0
    28b0:	ldr	r0, [r0]
    28b4:	mov	r5, r2
    28b8:	cmp	r0, r2
    28bc:	bcc	291c <pointer_list_insert_at@@Base+0x84>
    28c0:	mov	r6, r1
    28c4:	mov	r1, #4
    28c8:	add	r1, r1, r0, lsl #2
    28cc:	ldr	r0, [r4, #4]
    28d0:	bl	10c8 <o_realloc@plt>
    28d4:	cmp	r0, #0
    28d8:	str	r0, [r4, #4]
    28dc:	beq	291c <pointer_list_insert_at@@Base+0x84>
    28e0:	ldr	r1, [r4]
    28e4:	cmp	r1, r5
    28e8:	bls	290c <pointer_list_insert_at@@Base+0x74>
    28ec:	mov	r2, r1
    28f0:	add	r3, r0, r2, lsl #2
    28f4:	ldr	r3, [r3, #-4]
    28f8:	str	r3, [r0, r2, lsl #2]
    28fc:	sub	r2, r2, #1
    2900:	ldr	r0, [r4, #4]
    2904:	cmp	r2, r5
    2908:	bhi	28f0 <pointer_list_insert_at@@Base+0x58>
    290c:	str	r6, [r0, r5, lsl #2]
    2910:	add	r0, r1, #1
    2914:	mov	r7, #1
    2918:	str	r0, [r4]
    291c:	mov	r0, r7
    2920:	pop	{r4, r5, r6, r7, fp, pc}

00002924 <pointer_list_remove_pointer@@Base>:
    2924:	push	{fp, lr}
    2928:	mov	fp, sp
    292c:	cmp	r0, #0
    2930:	beq	2960 <pointer_list_remove_pointer@@Base+0x3c>
    2934:	ldr	ip, [r0]
    2938:	cmp	ip, #0
    293c:	beq	2960 <pointer_list_remove_pointer@@Base+0x3c>
    2940:	ldr	lr, [r0, #4]
    2944:	mov	r2, #0
    2948:	ldr	r3, [lr, r2, lsl #2]
    294c:	cmp	r3, r1
    2950:	beq	2968 <pointer_list_remove_pointer@@Base+0x44>
    2954:	add	r2, r2, #1
    2958:	cmp	r2, ip
    295c:	bcc	2948 <pointer_list_remove_pointer@@Base+0x24>
    2960:	mov	r0, #0
    2964:	pop	{fp, pc}
    2968:	mov	r1, r2
    296c:	pop	{fp, lr}
    2970:	b	26d0 <pointer_list_remove_at@@Base>

00002974 <pointer_list_remove_pointer_free@@Base>:
    2974:	push	{r4, r5, r6, sl, fp, lr}
    2978:	add	fp, sp, #16
    297c:	cmp	r0, #0
    2980:	beq	29b4 <pointer_list_remove_pointer_free@@Base+0x40>
    2984:	mov	r6, r0
    2988:	ldr	r0, [r0]
    298c:	cmp	r0, #0
    2990:	beq	29b4 <pointer_list_remove_pointer_free@@Base+0x40>
    2994:	ldr	r3, [r6, #4]
    2998:	mov	r5, #0
    299c:	ldr	r4, [r3, r5, lsl #2]
    29a0:	cmp	r4, r1
    29a4:	beq	29bc <pointer_list_remove_pointer_free@@Base+0x48>
    29a8:	add	r5, r5, #1
    29ac:	cmp	r5, r0
    29b0:	bcc	299c <pointer_list_remove_pointer_free@@Base+0x28>
    29b4:	mov	r0, #0
    29b8:	pop	{r4, r5, r6, sl, fp, pc}
    29bc:	mov	r0, r1
    29c0:	blx	r2
    29c4:	mov	r0, r6
    29c8:	mov	r1, r5
    29cc:	pop	{r4, r5, r6, sl, fp, lr}
    29d0:	b	26d0 <pointer_list_remove_at@@Base>

Disassembly of section .fini:

000029d4 <.fini>:
    29d4:	push	{r3, lr}
    29d8:	pop	{r3, pc}
