
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	1114c <__assert_fail@plt+0x48>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <fdopen@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <fdopen@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r7, r1, r4, asr #3

00010e40 <fdopen@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <calloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <fputs_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <raise@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <strcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <posix_fadvise64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <memmove@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <_exit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <memcpy@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <__strtoull_internal@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <fputc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <__memcpy_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <getenv@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__sprintf_chk@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__cxa_atexit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <setvbuf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <__fprintf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fclose@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <fseeko64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <fcntl64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <localeconv@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <fread_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #94208	; 0x17000
   110e8:	ldr	pc, [ip, #4]!

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	mov	fp, #0
   11114:	mov	lr, #0
   11118:	pop	{r1}		; (ldr r1, [sp], #4)
   1111c:	mov	r2, sp
   11120:	push	{r2}		; (str r2, [sp, #-4]!)
   11124:	push	{r0}		; (str r0, [sp, #-4]!)
   11128:	ldr	ip, [pc, #16]	; 11140 <__assert_fail@plt+0x3c>
   1112c:	push	{ip}		; (str ip, [sp, #-4]!)
   11130:	ldr	r0, [pc, #12]	; 11144 <__assert_fail@plt+0x40>
   11134:	ldr	r3, [pc, #12]	; 11148 <__assert_fail@plt+0x44>
   11138:	bl	10f90 <__libc_start_main@plt>
   1113c:	bl	110ec <abort@plt>
   11140:	andeq	r6, r1, r8, lsr #23
   11144:	andeq	r1, r1, ip, asr #19
   11148:	andeq	r6, r1, r8, asr #22
   1114c:	ldr	r3, [pc, #20]	; 11168 <__assert_fail@plt+0x64>
   11150:	ldr	r2, [pc, #20]	; 1116c <__assert_fail@plt+0x68>
   11154:	add	r3, pc, r3
   11158:	ldr	r2, [r3, r2]
   1115c:	cmp	r2, #0
   11160:	bxeq	lr
   11164:	b	10fa8 <__gmon_start__@plt>
   11168:	andeq	r6, r1, r4, lsr #29
   1116c:	strdeq	r0, [r0], -ip
   11170:	ldr	r3, [pc, #28]	; 11194 <__assert_fail@plt+0x90>
   11174:	ldr	r0, [pc, #28]	; 11198 <__assert_fail@plt+0x94>
   11178:	sub	r3, r3, r0
   1117c:	cmp	r3, #6
   11180:	bxls	lr
   11184:	ldr	r3, [pc, #16]	; 1119c <__assert_fail@plt+0x98>
   11188:	cmp	r3, #0
   1118c:	bxeq	lr
   11190:	bx	r3
   11194:	andeq	r8, r2, r7, asr r1
   11198:	andeq	r8, r2, r4, asr r1
   1119c:	andeq	r0, r0, r0
   111a0:	ldr	r1, [pc, #36]	; 111cc <__assert_fail@plt+0xc8>
   111a4:	ldr	r0, [pc, #36]	; 111d0 <__assert_fail@plt+0xcc>
   111a8:	sub	r1, r1, r0
   111ac:	asr	r1, r1, #2
   111b0:	add	r1, r1, r1, lsr #31
   111b4:	asrs	r1, r1, #1
   111b8:	bxeq	lr
   111bc:	ldr	r3, [pc, #16]	; 111d4 <__assert_fail@plt+0xd0>
   111c0:	cmp	r3, #0
   111c4:	bxeq	lr
   111c8:	bx	r3
   111cc:	andeq	r8, r2, r4, asr r1
   111d0:	andeq	r8, r2, r4, asr r1
   111d4:	andeq	r0, r0, r0
   111d8:	push	{r4, lr}
   111dc:	ldr	r4, [pc, #24]	; 111fc <__assert_fail@plt+0xf8>
   111e0:	ldrb	r3, [r4]
   111e4:	cmp	r3, #0
   111e8:	popne	{r4, pc}
   111ec:	bl	11170 <__assert_fail@plt+0x6c>
   111f0:	mov	r3, #1
   111f4:	strb	r3, [r4]
   111f8:	pop	{r4, pc}
   111fc:	andeq	r8, r2, r8, ror r1
   11200:	ldr	r0, [pc, #40]	; 11230 <__assert_fail@plt+0x12c>
   11204:	ldr	r3, [r0]
   11208:	cmp	r3, #0
   1120c:	bne	11214 <__assert_fail@plt+0x110>
   11210:	b	111a0 <__assert_fail@plt+0x9c>
   11214:	ldr	r3, [pc, #24]	; 11234 <__assert_fail@plt+0x130>
   11218:	cmp	r3, #0
   1121c:	beq	11210 <__assert_fail@plt+0x10c>
   11220:	push	{r4, lr}
   11224:	blx	r3
   11228:	pop	{r4, lr}
   1122c:	b	111a0 <__assert_fail@plt+0x9c>
   11230:	andeq	r7, r2, r4, lsl pc
   11234:	andeq	r0, r0, r0
   11238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1123c:	sub	sp, sp, #12
   11240:	mov	r8, r0
   11244:	str	r1, [sp]
   11248:	str	r2, [sp, #4]
   1124c:	mov	r0, #32768	; 0x8000
   11250:	bl	158c4 <__assert_fail@plt+0x47c0>
   11254:	subs	r9, r0, #0
   11258:	beq	11384 <__assert_fail@plt+0x280>
   1125c:	mov	r4, #0
   11260:	mov	r6, #0
   11264:	mov	r7, #0
   11268:	mov	sl, #1
   1126c:	add	fp, r9, #32512	; 0x7f00
   11270:	add	fp, fp, #255	; 0xff
   11274:	mov	r5, #0
   11278:	mov	r3, r8
   1127c:	rsb	r2, r5, #32768	; 0x8000
   11280:	mov	r1, sl
   11284:	add	r0, r9, r5
   11288:	bl	110d4 <fread_unlocked@plt>
   1128c:	add	r5, r5, r0
   11290:	cmp	r5, #32768	; 0x8000
   11294:	beq	11328 <__assert_fail@plt+0x224>
   11298:	cmp	r0, #0
   1129c:	beq	11314 <__assert_fail@plt+0x210>
   112a0:	ldr	r3, [r8]
   112a4:	tst	r3, #16
   112a8:	beq	11278 <__assert_fail@plt+0x174>
   112ac:	cmp	r5, #0
   112b0:	movne	r1, r9
   112b4:	addne	r0, r9, r5
   112b8:	beq	1138c <__assert_fail@plt+0x288>
   112bc:	ldrb	r2, [r1], #1
   112c0:	lsl	r3, r4, #15
   112c4:	uxth	r3, r3
   112c8:	add	r4, r3, r4, asr #1
   112cc:	add	r4, r4, r2
   112d0:	uxth	r4, r4
   112d4:	cmp	r0, r1
   112d8:	bne	112bc <__assert_fail@plt+0x1b8>
   112dc:	adds	r2, r6, r5
   112e0:	adc	r3, r7, #0
   112e4:	cmp	r7, r3
   112e8:	cmpeq	r6, r2
   112ec:	bls	11394 <__assert_fail@plt+0x290>
   112f0:	bl	10ff0 <__errno_location@plt>
   112f4:	mov	r3, #75	; 0x4b
   112f8:	str	r3, [r0]
   112fc:	mvn	r4, #0
   11300:	mov	r0, r9
   11304:	bl	1207c <__assert_fail@plt+0xf78>
   11308:	mov	r0, r4
   1130c:	add	sp, sp, #12
   11310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11314:	ldr	r3, [r8]
   11318:	tst	r3, #32
   1131c:	mvnne	r4, #0
   11320:	bne	11300 <__assert_fail@plt+0x1fc>
   11324:	b	112ac <__assert_fail@plt+0x1a8>
   11328:	sub	r2, r9, #1
   1132c:	mov	r3, r4
   11330:	lsl	r4, r3, #15
   11334:	uxth	r4, r4
   11338:	add	r4, r4, r3, asr #1
   1133c:	ldrb	r3, [r2, #1]!
   11340:	add	r4, r4, r3
   11344:	uxth	r3, r4
   11348:	cmp	fp, r2
   1134c:	bne	11330 <__assert_fail@plt+0x22c>
   11350:	mov	r4, r3
   11354:	adds	r2, r6, #32768	; 0x8000
   11358:	adc	r3, r7, #0
   1135c:	cmp	r7, r3
   11360:	cmpeq	r6, r2
   11364:	movls	r6, r2
   11368:	movls	r7, r3
   1136c:	bls	11274 <__assert_fail@plt+0x170>
   11370:	bl	10ff0 <__errno_location@plt>
   11374:	mov	r3, #75	; 0x4b
   11378:	str	r3, [r0]
   1137c:	mvn	r4, #0
   11380:	b	11300 <__assert_fail@plt+0x1fc>
   11384:	mvn	r4, #0
   11388:	b	11308 <__assert_fail@plt+0x204>
   1138c:	adds	r2, r6, r5
   11390:	adc	r3, r7, #0
   11394:	ldr	r1, [sp]
   11398:	str	r4, [r1]
   1139c:	ldr	r1, [sp, #4]
   113a0:	strd	r2, [r1]
   113a4:	mov	r4, #0
   113a8:	b	11300 <__assert_fail@plt+0x1fc>
   113ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b0:	sub	sp, sp, #12
   113b4:	mov	r5, r0
   113b8:	str	r1, [sp]
   113bc:	str	r2, [sp, #4]
   113c0:	mov	r0, #32768	; 0x8000
   113c4:	bl	158c4 <__assert_fail@plt+0x47c0>
   113c8:	subs	r9, r0, #0
   113cc:	beq	114d0 <__assert_fail@plt+0x3cc>
   113d0:	mov	r8, #0
   113d4:	mov	r6, #0
   113d8:	mov	r7, #0
   113dc:	mov	sl, #1
   113e0:	add	fp, r9, #32512	; 0x7f00
   113e4:	add	fp, fp, #255	; 0xff
   113e8:	mov	r4, #0
   113ec:	mov	r3, r5
   113f0:	rsb	r2, r4, #32768	; 0x8000
   113f4:	mov	r1, sl
   113f8:	add	r0, r9, r4
   113fc:	bl	110d4 <fread_unlocked@plt>
   11400:	add	r4, r4, r0
   11404:	cmp	r4, #32768	; 0x8000
   11408:	beq	1148c <__assert_fail@plt+0x388>
   1140c:	cmp	r0, #0
   11410:	beq	11478 <__assert_fail@plt+0x374>
   11414:	ldr	r3, [r5]
   11418:	tst	r3, #16
   1141c:	beq	113ec <__assert_fail@plt+0x2e8>
   11420:	cmp	r4, #0
   11424:	movne	r3, r9
   11428:	addne	r1, r9, r4
   1142c:	beq	114d8 <__assert_fail@plt+0x3d4>
   11430:	ldrb	r2, [r3], #1
   11434:	add	r8, r8, r2
   11438:	cmp	r1, r3
   1143c:	bne	11430 <__assert_fail@plt+0x32c>
   11440:	adds	r2, r6, r4
   11444:	adc	r3, r7, #0
   11448:	cmp	r7, r3
   1144c:	cmpeq	r6, r2
   11450:	bls	114e0 <__assert_fail@plt+0x3dc>
   11454:	bl	10ff0 <__errno_location@plt>
   11458:	mov	r3, #75	; 0x4b
   1145c:	str	r3, [r0]
   11460:	mvn	r4, #0
   11464:	mov	r0, r9
   11468:	bl	1207c <__assert_fail@plt+0xf78>
   1146c:	mov	r0, r4
   11470:	add	sp, sp, #12
   11474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11478:	ldr	r3, [r5]
   1147c:	tst	r3, #32
   11480:	mvnne	r4, #0
   11484:	bne	11464 <__assert_fail@plt+0x360>
   11488:	b	11420 <__assert_fail@plt+0x31c>
   1148c:	sub	r3, r9, #1
   11490:	ldrb	r2, [r3, #1]!
   11494:	add	r8, r8, r2
   11498:	cmp	fp, r3
   1149c:	bne	11490 <__assert_fail@plt+0x38c>
   114a0:	adds	r2, r6, #32768	; 0x8000
   114a4:	adc	r3, r7, #0
   114a8:	cmp	r7, r3
   114ac:	cmpeq	r6, r2
   114b0:	movls	r6, r2
   114b4:	movls	r7, r3
   114b8:	bls	113e8 <__assert_fail@plt+0x2e4>
   114bc:	bl	10ff0 <__errno_location@plt>
   114c0:	mov	r3, #75	; 0x4b
   114c4:	str	r3, [r0]
   114c8:	mvn	r4, #0
   114cc:	b	11464 <__assert_fail@plt+0x360>
   114d0:	mvn	r4, #0
   114d4:	b	1146c <__assert_fail@plt+0x368>
   114d8:	adds	r2, r6, r4
   114dc:	adc	r3, r7, #0
   114e0:	lsr	r1, r8, #16
   114e4:	uxtah	r8, r1, r8
   114e8:	asr	r1, r8, #16
   114ec:	uxtah	r8, r1, r8
   114f0:	ldr	r1, [sp]
   114f4:	str	r8, [r1]
   114f8:	ldr	r1, [sp, #4]
   114fc:	strd	r2, [r1]
   11500:	mov	r4, #0
   11504:	b	11464 <__assert_fail@plt+0x360>
   11508:	push	{r4, r5, r6, lr}
   1150c:	sub	sp, sp, #672	; 0x2a0
   11510:	mov	r6, r0
   11514:	ldrb	r4, [sp, #688]	; 0x2b0
   11518:	ldr	r5, [r2]
   1151c:	mov	r2, #1024	; 0x400
   11520:	mov	r3, #0
   11524:	strd	r2, [sp, #8]
   11528:	mov	r2, #1
   1152c:	mov	r3, #0
   11530:	strd	r2, [sp]
   11534:	mov	r3, #0
   11538:	add	r2, sp, #20
   1153c:	add	r1, sp, #696	; 0x2b8
   11540:	ldrd	r0, [r1]
   11544:	bl	12210 <__assert_fail@plt+0x110c>
   11548:	mov	r3, r0
   1154c:	mov	r2, r5
   11550:	ldr	r1, [pc, #92]	; 115b4 <__assert_fail@plt+0x4b0>
   11554:	mov	r0, #1
   11558:	bl	1102c <__printf_chk@plt>
   1155c:	ldrb	r3, [sp, #692]	; 0x2b4
   11560:	cmp	r3, #0
   11564:	bne	11594 <__assert_fail@plt+0x490>
   11568:	ldr	r3, [pc, #72]	; 115b8 <__assert_fail@plt+0x4b4>
   1156c:	ldr	r0, [r3]
   11570:	ldr	r3, [r0, #20]
   11574:	ldr	r2, [r0, #24]
   11578:	cmp	r3, r2
   1157c:	addcc	r2, r3, #1
   11580:	strcc	r2, [r0, #20]
   11584:	strbcc	r4, [r3]
   11588:	bcs	115a8 <__assert_fail@plt+0x4a4>
   1158c:	add	sp, sp, #672	; 0x2a0
   11590:	pop	{r4, r5, r6, pc}
   11594:	mov	r2, r6
   11598:	ldr	r1, [pc, #28]	; 115bc <__assert_fail@plt+0x4b8>
   1159c:	mov	r0, #1
   115a0:	bl	1102c <__printf_chk@plt>
   115a4:	b	11568 <__assert_fail@plt+0x464>
   115a8:	mov	r1, r4
   115ac:	bl	11074 <__overflow@plt>
   115b0:	b	1158c <__assert_fail@plt+0x488>
   115b4:	ldrdeq	r6, [r1], -r0
   115b8:	andeq	r8, r2, r4, ror r1
   115bc:	andeq	r7, r1, r4, ror #10
   115c0:	push	{r4, r5, r6, lr}
   115c4:	sub	sp, sp, #672	; 0x2a0
   115c8:	mov	r6, r0
   115cc:	ldrb	r4, [sp, #688]	; 0x2b0
   115d0:	ldr	r5, [r2]
   115d4:	mov	r2, #512	; 0x200
   115d8:	mov	r3, #0
   115dc:	strd	r2, [sp, #8]
   115e0:	mov	r2, #1
   115e4:	mov	r3, #0
   115e8:	strd	r2, [sp]
   115ec:	mov	r3, #0
   115f0:	add	r2, sp, #20
   115f4:	add	r1, sp, #696	; 0x2b8
   115f8:	ldrd	r0, [r1]
   115fc:	bl	12210 <__assert_fail@plt+0x110c>
   11600:	mov	r3, r0
   11604:	mov	r2, r5
   11608:	ldr	r1, [pc, #92]	; 1166c <__assert_fail@plt+0x568>
   1160c:	mov	r0, #1
   11610:	bl	1102c <__printf_chk@plt>
   11614:	ldrb	r3, [sp, #692]	; 0x2b4
   11618:	cmp	r3, #0
   1161c:	bne	1164c <__assert_fail@plt+0x548>
   11620:	ldr	r3, [pc, #72]	; 11670 <__assert_fail@plt+0x56c>
   11624:	ldr	r0, [r3]
   11628:	ldr	r3, [r0, #20]
   1162c:	ldr	r2, [r0, #24]
   11630:	cmp	r3, r2
   11634:	addcc	r2, r3, #1
   11638:	strcc	r2, [r0, #20]
   1163c:	strbcc	r4, [r3]
   11640:	bcs	11660 <__assert_fail@plt+0x55c>
   11644:	add	sp, sp, #672	; 0x2a0
   11648:	pop	{r4, r5, r6, pc}
   1164c:	mov	r2, r6
   11650:	ldr	r1, [pc, #28]	; 11674 <__assert_fail@plt+0x570>
   11654:	mov	r0, #1
   11658:	bl	1102c <__printf_chk@plt>
   1165c:	b	11620 <__assert_fail@plt+0x51c>
   11660:	mov	r1, r4
   11664:	bl	11074 <__overflow@plt>
   11668:	b	11644 <__assert_fail@plt+0x540>
   1166c:	ldrdeq	r6, [r1], -ip
   11670:	andeq	r8, r2, r4, ror r1
   11674:	andeq	r7, r1, r4, ror #10
   11678:	push	{lr}		; (str lr, [sp, #-4]!)
   1167c:	sub	sp, sp, #60	; 0x3c
   11680:	subs	r6, r0, #0
   11684:	beq	116c0 <__assert_fail@plt+0x5bc>
   11688:	ldr	r3, [pc, #740]	; 11974 <__assert_fail@plt+0x870>
   1168c:	ldr	r4, [r3]
   11690:	mov	r2, #5
   11694:	ldr	r1, [pc, #732]	; 11978 <__assert_fail@plt+0x874>
   11698:	mov	r0, #0
   1169c:	bl	10ef4 <dcgettext@plt>
   116a0:	ldr	r3, [pc, #724]	; 1197c <__assert_fail@plt+0x878>
   116a4:	ldr	r3, [r3]
   116a8:	mov	r2, r0
   116ac:	mov	r1, #1
   116b0:	mov	r0, r4
   116b4:	bl	11044 <__fprintf_chk@plt>
   116b8:	mov	r0, r6
   116bc:	bl	10fcc <exit@plt>
   116c0:	mov	r2, #5
   116c4:	ldr	r1, [pc, #692]	; 11980 <__assert_fail@plt+0x87c>
   116c8:	mov	r0, #0
   116cc:	bl	10ef4 <dcgettext@plt>
   116d0:	ldr	r3, [pc, #676]	; 1197c <__assert_fail@plt+0x878>
   116d4:	ldr	r2, [r3]
   116d8:	mov	r1, r0
   116dc:	mov	r0, #1
   116e0:	bl	1102c <__printf_chk@plt>
   116e4:	mov	r2, #5
   116e8:	ldr	r1, [pc, #660]	; 11984 <__assert_fail@plt+0x880>
   116ec:	mov	r0, #0
   116f0:	bl	10ef4 <dcgettext@plt>
   116f4:	mov	r3, #16
   116f8:	ldr	r2, [pc, #648]	; 11988 <__assert_fail@plt+0x884>
   116fc:	mov	r1, r0
   11700:	mov	r0, #1
   11704:	bl	1102c <__printf_chk@plt>
   11708:	mov	r2, #5
   1170c:	ldr	r1, [pc, #632]	; 1198c <__assert_fail@plt+0x888>
   11710:	mov	r0, #0
   11714:	bl	10ef4 <dcgettext@plt>
   11718:	ldr	r4, [pc, #624]	; 11990 <__assert_fail@plt+0x88c>
   1171c:	ldr	r1, [r4]
   11720:	bl	10e58 <fputs_unlocked@plt>
   11724:	mov	r2, #5
   11728:	ldr	r1, [pc, #612]	; 11994 <__assert_fail@plt+0x890>
   1172c:	mov	r0, #0
   11730:	bl	10ef4 <dcgettext@plt>
   11734:	ldr	r1, [r4]
   11738:	bl	10e58 <fputs_unlocked@plt>
   1173c:	mov	r2, #5
   11740:	ldr	r1, [pc, #592]	; 11998 <__assert_fail@plt+0x894>
   11744:	mov	r0, #0
   11748:	bl	10ef4 <dcgettext@plt>
   1174c:	ldr	r1, [r4]
   11750:	bl	10e58 <fputs_unlocked@plt>
   11754:	mov	r2, #5
   11758:	ldr	r1, [pc, #572]	; 1199c <__assert_fail@plt+0x898>
   1175c:	mov	r0, #0
   11760:	bl	10ef4 <dcgettext@plt>
   11764:	ldr	r1, [r4]
   11768:	bl	10e58 <fputs_unlocked@plt>
   1176c:	mov	ip, sp
   11770:	ldr	lr, [pc, #552]	; 119a0 <__assert_fail@plt+0x89c>
   11774:	ldm	lr!, {r0, r1, r2, r3}
   11778:	stmia	ip!, {r0, r1, r2, r3}
   1177c:	ldm	lr!, {r0, r1, r2, r3}
   11780:	stmia	ip!, {r0, r1, r2, r3}
   11784:	ldm	lr!, {r0, r1, r2, r3}
   11788:	stmia	ip!, {r0, r1, r2, r3}
   1178c:	ldm	lr, {r0, r1}
   11790:	stm	ip, {r0, r1}
   11794:	ldr	r1, [sp]
   11798:	cmp	r1, #0
   1179c:	moveq	r4, sp
   117a0:	beq	117c8 <__assert_fail@plt+0x6c4>
   117a4:	mov	r4, sp
   117a8:	ldr	r5, [pc, #500]	; 119a4 <__assert_fail@plt+0x8a0>
   117ac:	mov	r0, r5
   117b0:	bl	10e70 <strcmp@plt>
   117b4:	cmp	r0, #0
   117b8:	beq	117c8 <__assert_fail@plt+0x6c4>
   117bc:	ldr	r1, [r4, #8]!
   117c0:	cmp	r1, #0
   117c4:	bne	117ac <__assert_fail@plt+0x6a8>
   117c8:	ldr	r4, [r4, #4]
   117cc:	cmp	r4, #0
   117d0:	beq	118e4 <__assert_fail@plt+0x7e0>
   117d4:	mov	r2, #5
   117d8:	ldr	r1, [pc, #456]	; 119a8 <__assert_fail@plt+0x8a4>
   117dc:	mov	r0, #0
   117e0:	bl	10ef4 <dcgettext@plt>
   117e4:	ldr	r3, [pc, #448]	; 119ac <__assert_fail@plt+0x8a8>
   117e8:	ldr	r2, [pc, #448]	; 119b0 <__assert_fail@plt+0x8ac>
   117ec:	mov	r1, r0
   117f0:	mov	r0, #1
   117f4:	bl	1102c <__printf_chk@plt>
   117f8:	mov	r1, #0
   117fc:	mov	r0, #5
   11800:	bl	11080 <setlocale@plt>
   11804:	cmp	r0, #0
   11808:	beq	11820 <__assert_fail@plt+0x71c>
   1180c:	mov	r2, #3
   11810:	ldr	r1, [pc, #412]	; 119b4 <__assert_fail@plt+0x8b0>
   11814:	bl	110e0 <strncmp@plt>
   11818:	cmp	r0, #0
   1181c:	bne	11880 <__assert_fail@plt+0x77c>
   11820:	mov	r2, #5
   11824:	ldr	r1, [pc, #396]	; 119b8 <__assert_fail@plt+0x8b4>
   11828:	mov	r0, #0
   1182c:	bl	10ef4 <dcgettext@plt>
   11830:	ldr	r5, [pc, #364]	; 119a4 <__assert_fail@plt+0x8a0>
   11834:	mov	r3, r5
   11838:	ldr	r2, [pc, #364]	; 119ac <__assert_fail@plt+0x8a8>
   1183c:	mov	r1, r0
   11840:	mov	r0, #1
   11844:	bl	1102c <__printf_chk@plt>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #360]	; 119bc <__assert_fail@plt+0x8b8>
   11850:	mov	r0, #0
   11854:	bl	10ef4 <dcgettext@plt>
   11858:	mov	r1, r0
   1185c:	ldr	r2, [pc, #348]	; 119c0 <__assert_fail@plt+0x8bc>
   11860:	ldr	r3, [pc, #348]	; 119c4 <__assert_fail@plt+0x8c0>
   11864:	cmp	r4, r5
   11868:	movne	r3, r2
   1186c:	mov	r2, r4
   11870:	mov	r0, #1
   11874:	bl	1102c <__printf_chk@plt>
   11878:	b	116b8 <__assert_fail@plt+0x5b4>
   1187c:	ldr	r4, [pc, #288]	; 119a4 <__assert_fail@plt+0x8a0>
   11880:	mov	r2, #5
   11884:	ldr	r1, [pc, #316]	; 119c8 <__assert_fail@plt+0x8c4>
   11888:	mov	r0, #0
   1188c:	bl	10ef4 <dcgettext@plt>
   11890:	ldr	r3, [pc, #248]	; 11990 <__assert_fail@plt+0x88c>
   11894:	ldr	r1, [r3]
   11898:	bl	10e58 <fputs_unlocked@plt>
   1189c:	b	11820 <__assert_fail@plt+0x71c>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #268]	; 119b8 <__assert_fail@plt+0x8b4>
   118a8:	mov	r0, #0
   118ac:	bl	10ef4 <dcgettext@plt>
   118b0:	ldr	r4, [pc, #236]	; 119a4 <__assert_fail@plt+0x8a0>
   118b4:	mov	r3, r4
   118b8:	ldr	r2, [pc, #236]	; 119ac <__assert_fail@plt+0x8a8>
   118bc:	mov	r1, r0
   118c0:	mov	r0, #1
   118c4:	bl	1102c <__printf_chk@plt>
   118c8:	mov	r2, #5
   118cc:	ldr	r1, [pc, #232]	; 119bc <__assert_fail@plt+0x8b8>
   118d0:	mov	r0, #0
   118d4:	bl	10ef4 <dcgettext@plt>
   118d8:	mov	r1, r0
   118dc:	ldr	r3, [pc, #224]	; 119c4 <__assert_fail@plt+0x8c0>
   118e0:	b	1186c <__assert_fail@plt+0x768>
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #184]	; 119a8 <__assert_fail@plt+0x8a4>
   118ec:	mov	r0, #0
   118f0:	bl	10ef4 <dcgettext@plt>
   118f4:	ldr	r3, [pc, #176]	; 119ac <__assert_fail@plt+0x8a8>
   118f8:	ldr	r2, [pc, #176]	; 119b0 <__assert_fail@plt+0x8ac>
   118fc:	mov	r1, r0
   11900:	mov	r0, #1
   11904:	bl	1102c <__printf_chk@plt>
   11908:	mov	r1, #0
   1190c:	mov	r0, #5
   11910:	bl	11080 <setlocale@plt>
   11914:	cmp	r0, #0
   11918:	beq	118a0 <__assert_fail@plt+0x79c>
   1191c:	mov	r2, #3
   11920:	ldr	r1, [pc, #140]	; 119b4 <__assert_fail@plt+0x8b0>
   11924:	bl	110e0 <strncmp@plt>
   11928:	cmp	r0, #0
   1192c:	bne	1187c <__assert_fail@plt+0x778>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #124]	; 119b8 <__assert_fail@plt+0x8b4>
   11938:	mov	r0, #0
   1193c:	bl	10ef4 <dcgettext@plt>
   11940:	ldr	r4, [pc, #92]	; 119a4 <__assert_fail@plt+0x8a0>
   11944:	mov	r3, r4
   11948:	ldr	r2, [pc, #92]	; 119ac <__assert_fail@plt+0x8a8>
   1194c:	mov	r1, r0
   11950:	mov	r0, #1
   11954:	bl	1102c <__printf_chk@plt>
   11958:	mov	r2, #5
   1195c:	ldr	r1, [pc, #88]	; 119bc <__assert_fail@plt+0x8b8>
   11960:	mov	r0, #0
   11964:	bl	10ef4 <dcgettext@plt>
   11968:	mov	r1, r0
   1196c:	ldr	r3, [pc, #80]	; 119c4 <__assert_fail@plt+0x8c0>
   11970:	b	1186c <__assert_fail@plt+0x768>
   11974:	andeq	r8, r2, r8, ror #2
   11978:	andeq	r6, r1, r0, ror ip
   1197c:	andeq	r8, r2, ip, lsl #3
   11980:	muleq	r1, r8, ip
   11984:			; <UNDEFINED> instruction: 0x00016cbc
   11988:	andeq	r6, r1, r4, ror #25
   1198c:	andeq	r6, r1, r8, ror #25
   11990:	andeq	r8, r2, r4, ror r1
   11994:	andeq	r6, r1, r0, lsr #26
   11998:	andeq	r6, r1, ip, lsr #27
   1199c:	ldrdeq	r6, [r1], -ip
   119a0:	andeq	r6, r1, r4, ror #23
   119a4:	andeq	r6, r1, ip, ror #24
   119a8:	andeq	r6, r1, r4, lsl lr
   119ac:	andeq	r6, r1, ip, lsr #28
   119b0:	andeq	r6, r1, r4, asr lr
   119b4:	andeq	r6, r1, r4, ror #28
   119b8:			; <UNDEFINED> instruction: 0x00016eb0
   119bc:	andeq	r6, r1, ip, asr #29
   119c0:			; <UNDEFINED> instruction: 0x00016cb8
   119c4:	andeq	r6, r1, ip, asr pc
   119c8:	andeq	r6, r1, r8, ror #28
   119cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d0:	sub	sp, sp, #44	; 0x2c
   119d4:	mov	r5, r0
   119d8:	mov	r4, r1
   119dc:	ldr	r0, [r1]
   119e0:	bl	12c2c <__assert_fail@plt+0x1b28>
   119e4:	ldr	r1, [pc, #812]	; 11d18 <__assert_fail@plt+0xc14>
   119e8:	mov	r0, #6
   119ec:	bl	11080 <setlocale@plt>
   119f0:	ldr	r6, [pc, #804]	; 11d1c <__assert_fail@plt+0xc18>
   119f4:	ldr	r1, [pc, #804]	; 11d20 <__assert_fail@plt+0xc1c>
   119f8:	mov	r0, r6
   119fc:	bl	110c8 <bindtextdomain@plt>
   11a00:	mov	r0, r6
   11a04:	bl	10f0c <textdomain@plt>
   11a08:	ldr	r0, [pc, #788]	; 11d24 <__assert_fail@plt+0xc20>
   11a0c:	bl	16bac <__assert_fail@plt+0x5aa8>
   11a10:	mov	r3, #0
   11a14:	mov	r2, #1
   11a18:	mov	r1, r3
   11a1c:	ldr	r0, [pc, #772]	; 11d28 <__assert_fail@plt+0xc24>
   11a20:	ldr	r0, [r0]
   11a24:	bl	11014 <setvbuf@plt>
   11a28:	ldr	r8, [pc, #764]	; 11d2c <__assert_fail@plt+0xc28>
   11a2c:	ldr	r7, [pc, #764]	; 11d30 <__assert_fail@plt+0xc2c>
   11a30:	mov	r6, #0
   11a34:	ldr	r9, [pc, #760]	; 11d34 <__assert_fail@plt+0xc30>
   11a38:	mov	sl, #1
   11a3c:	str	r6, [sp]
   11a40:	mov	r3, r8
   11a44:	mov	r2, r7
   11a48:	mov	r1, r4
   11a4c:	mov	r0, r5
   11a50:	bl	10fb4 <getopt_long@plt>
   11a54:	cmn	r0, #1
   11a58:	beq	11adc <__assert_fail@plt+0x9d8>
   11a5c:	cmn	r0, #2
   11a60:	beq	11acc <__assert_fail@plt+0x9c8>
   11a64:	ble	11a80 <__assert_fail@plt+0x97c>
   11a68:	cmp	r0, #114	; 0x72
   11a6c:	beq	11ac4 <__assert_fail@plt+0x9c0>
   11a70:	cmp	r0, #115	; 0x73
   11a74:	bne	11ad4 <__assert_fail@plt+0x9d0>
   11a78:	str	sl, [r9]
   11a7c:	b	11a3c <__assert_fail@plt+0x938>
   11a80:	cmn	r0, #3
   11a84:	bne	11ad4 <__assert_fail@plt+0x9d0>
   11a88:	mov	r4, #0
   11a8c:	str	r4, [sp, #8]
   11a90:	ldr	r3, [pc, #672]	; 11d38 <__assert_fail@plt+0xc34>
   11a94:	str	r3, [sp, #4]
   11a98:	ldr	r3, [pc, #668]	; 11d3c <__assert_fail@plt+0xc38>
   11a9c:	str	r3, [sp]
   11aa0:	ldr	r3, [pc, #664]	; 11d40 <__assert_fail@plt+0xc3c>
   11aa4:	ldr	r3, [r3]
   11aa8:	ldr	r2, [pc, #660]	; 11d44 <__assert_fail@plt+0xc40>
   11aac:	ldr	r1, [pc, #660]	; 11d48 <__assert_fail@plt+0xc44>
   11ab0:	ldr	r0, [pc, #624]	; 11d28 <__assert_fail@plt+0xc24>
   11ab4:	ldr	r0, [r0]
   11ab8:	bl	14c5c <__assert_fail@plt+0x3b58>
   11abc:	mov	r0, r4
   11ac0:	bl	10fcc <exit@plt>
   11ac4:	str	r6, [r9]
   11ac8:	b	11a3c <__assert_fail@plt+0x938>
   11acc:	mov	r0, #0
   11ad0:	bl	11678 <__assert_fail@plt+0x574>
   11ad4:	mov	r0, #1
   11ad8:	bl	11678 <__assert_fail@plt+0x574>
   11adc:	add	fp, r4, r5, lsl #2
   11ae0:	ldr	r3, [pc, #612]	; 11d4c <__assert_fail@plt+0xc48>
   11ae4:	ldr	r3, [r3]
   11ae8:	cmp	r5, r3
   11aec:	ldreq	r3, [pc, #604]	; 11d50 <__assert_fail@plt+0xc4c>
   11af0:	streq	r3, [r4, r5, lsl #2]
   11af4:	addeq	fp, fp, #4
   11af8:	ldr	r3, [pc, #588]	; 11d4c <__assert_fail@plt+0xc48>
   11afc:	ldr	r3, [r3]
   11b00:	add	r4, r4, r3, lsl #2
   11b04:	mov	r3, #1
   11b08:	str	r3, [sp, #20]
   11b0c:	ldr	sl, [pc, #576]	; 11d54 <__assert_fail@plt+0xc50>
   11b10:	ldr	r9, [pc, #540]	; 11d34 <__assert_fail@plt+0xc30>
   11b14:	b	11bb0 <__assert_fail@plt+0xaac>
   11b18:	ldr	r1, [pc, #568]	; 11d58 <__assert_fail@plt+0xc54>
   11b1c:	mov	r0, r6
   11b20:	bl	11fe0 <__assert_fail@plt+0xedc>
   11b24:	subs	r8, r0, #0
   11b28:	beq	11c58 <__assert_fail@plt+0xb54>
   11b2c:	mov	r1, #2
   11b30:	mov	r0, r8
   11b34:	bl	11ea0 <__assert_fail@plt+0xd9c>
   11b38:	ldr	r3, [r9]
   11b3c:	add	r3, sl, r3, lsl #2
   11b40:	ldr	r3, [r3, #120]	; 0x78
   11b44:	add	r2, sp, #24
   11b48:	add	r1, sp, #32
   11b4c:	mov	r0, r8
   11b50:	blx	r3
   11b54:	cmp	r0, #0
   11b58:	bne	11ce4 <__assert_fail@plt+0xbe0>
   11b5c:	mov	r0, r8
   11b60:	bl	11ed4 <__assert_fail@plt+0xdd0>
   11b64:	cmp	r0, #0
   11b68:	bne	11d0c <__assert_fail@plt+0xc08>
   11b6c:	ldr	r1, [r9]
   11b70:	add	r1, sl, r1, lsl #2
   11b74:	ldrd	r2, [sp, #24]
   11b78:	strd	r2, [sp, #8]
   11b7c:	ldr	r3, [pc, #456]	; 11d4c <__assert_fail@plt+0xc48>
   11b80:	ldr	r3, [r3]
   11b84:	subs	r3, r3, r5
   11b88:	movne	r3, #1
   11b8c:	str	r3, [sp, #4]
   11b90:	mov	r3, #10
   11b94:	str	r3, [sp]
   11b98:	ldr	r7, [r1, #128]	; 0x80
   11b9c:	mov	r3, #0
   11ba0:	add	r2, sp, #32
   11ba4:	mov	r1, r3
   11ba8:	mov	r0, r6
   11bac:	blx	r7
   11bb0:	cmp	fp, r4
   11bb4:	bls	11c88 <__assert_fail@plt+0xb84>
   11bb8:	ldr	r6, [r4], #4
   11bbc:	ldr	r1, [pc, #396]	; 11d50 <__assert_fail@plt+0xc4c>
   11bc0:	mov	r0, r6
   11bc4:	bl	10e70 <strcmp@plt>
   11bc8:	cmp	r0, #0
   11bcc:	bne	11b18 <__assert_fail@plt+0xa14>
   11bd0:	mov	r3, #1
   11bd4:	strb	r3, [r9, #4]
   11bd8:	ldr	r3, [pc, #380]	; 11d5c <__assert_fail@plt+0xc58>
   11bdc:	ldr	r8, [r3]
   11be0:	mov	r1, #2
   11be4:	mov	r0, r8
   11be8:	bl	11ea0 <__assert_fail@plt+0xd9c>
   11bec:	ldr	r3, [r9]
   11bf0:	add	r3, sl, r3, lsl #2
   11bf4:	ldr	r3, [r3, #120]	; 0x78
   11bf8:	add	r2, sp, #24
   11bfc:	add	r1, sp, #32
   11c00:	mov	r0, r8
   11c04:	blx	r3
   11c08:	subs	r7, r0, #0
   11c0c:	beq	11c18 <__assert_fail@plt+0xb14>
   11c10:	bl	10ff0 <__errno_location@plt>
   11c14:	ldr	r7, [r0]
   11c18:	mov	r0, r8
   11c1c:	bl	110b0 <clearerr_unlocked@plt>
   11c20:	cmp	r7, #0
   11c24:	beq	11b6c <__assert_fail@plt+0xa68>
   11c28:	mov	r2, r6
   11c2c:	mov	r1, #3
   11c30:	mov	r0, #0
   11c34:	bl	14614 <__assert_fail@plt+0x3510>
   11c38:	mov	r3, r0
   11c3c:	ldr	r2, [pc, #284]	; 11d60 <__assert_fail@plt+0xc5c>
   11c40:	mov	r1, r7
   11c44:	mov	r0, #0
   11c48:	bl	10f6c <error@plt>
   11c4c:	mov	r3, #0
   11c50:	str	r3, [sp, #20]
   11c54:	b	11bb0 <__assert_fail@plt+0xaac>
   11c58:	bl	10ff0 <__errno_location@plt>
   11c5c:	ldr	r7, [r0]
   11c60:	mov	r2, r6
   11c64:	mov	r1, #3
   11c68:	mov	r0, #0
   11c6c:	bl	14614 <__assert_fail@plt+0x3510>
   11c70:	mov	r3, r0
   11c74:	ldr	r2, [pc, #228]	; 11d60 <__assert_fail@plt+0xc5c>
   11c78:	mov	r1, r7
   11c7c:	mov	r0, #0
   11c80:	bl	10f6c <error@plt>
   11c84:	b	11c4c <__assert_fail@plt+0xb48>
   11c88:	ldr	r3, [pc, #164]	; 11d34 <__assert_fail@plt+0xc30>
   11c8c:	ldrb	r3, [r3, #4]
   11c90:	cmp	r3, #0
   11c94:	bne	11ca8 <__assert_fail@plt+0xba4>
   11c98:	ldr	r3, [sp, #20]
   11c9c:	eor	r0, r3, #1
   11ca0:	add	sp, sp, #44	; 0x2c
   11ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ca8:	ldr	r3, [pc, #172]	; 11d5c <__assert_fail@plt+0xc58>
   11cac:	ldr	r0, [r3]
   11cb0:	bl	11ed4 <__assert_fail@plt+0xdd0>
   11cb4:	cmn	r0, #1
   11cb8:	bne	11c98 <__assert_fail@plt+0xb94>
   11cbc:	bl	10ff0 <__errno_location@plt>
   11cc0:	ldr	r4, [r0]
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #148]	; 11d64 <__assert_fail@plt+0xc60>
   11ccc:	mov	r0, #0
   11cd0:	bl	10ef4 <dcgettext@plt>
   11cd4:	mov	r2, r0
   11cd8:	mov	r1, r4
   11cdc:	mov	r0, #1
   11ce0:	bl	10f6c <error@plt>
   11ce4:	bl	10ff0 <__errno_location@plt>
   11ce8:	ldr	r7, [r0]
   11cec:	mov	r0, r8
   11cf0:	bl	11ed4 <__assert_fail@plt+0xdd0>
   11cf4:	clz	r3, r7
   11cf8:	lsr	r3, r3, #5
   11cfc:	cmp	r0, #0
   11d00:	moveq	r3, #0
   11d04:	cmp	r3, #0
   11d08:	beq	11c20 <__assert_fail@plt+0xb1c>
   11d0c:	bl	10ff0 <__errno_location@plt>
   11d10:	ldr	r7, [r0]
   11d14:	b	11c20 <__assert_fail@plt+0xb1c>
   11d18:			; <UNDEFINED> instruction: 0x00016cb8
   11d1c:	andeq	r6, r1, r8, asr lr
   11d20:	andeq	r6, r1, r0, lsl #30
   11d24:	andeq	r1, r1, r8, lsl #27
   11d28:	andeq	r8, r2, r4, ror r1
   11d2c:	andeq	r6, r1, ip, lsl ip
   11d30:	andeq	r6, r1, ip, lsr pc
   11d34:	andeq	r8, r2, ip, ror r1
   11d38:	andeq	r6, r1, r8, lsl pc
   11d3c:	andeq	r6, r1, r8, lsr #30
   11d40:	andeq	r8, r2, r8, lsl #2
   11d44:	andeq	r6, r1, r4, asr lr
   11d48:	andeq	r6, r1, ip, ror #24
   11d4c:	andeq	r8, r2, r0, ror #2
   11d50:	andeq	r6, r1, r0, asr #30
   11d54:	andeq	r6, r1, r4, ror #23
   11d58:	andeq	r6, r1, r8, lsr pc
   11d5c:	andeq	r8, r2, r0, ror r1
   11d60:	strdeq	r6, [r1], -r8
   11d64:	andeq	r6, r1, r4, asr #30
   11d68:	ldr	r3, [pc, #4]	; 11d74 <__assert_fail@plt+0xc70>
   11d6c:	str	r0, [r3]
   11d70:	bx	lr
   11d74:	andeq	r8, r2, r4, lsl #3
   11d78:	ldr	r3, [pc, #4]	; 11d84 <__assert_fail@plt+0xc80>
   11d7c:	strb	r0, [r3, #4]
   11d80:	bx	lr
   11d84:	andeq	r8, r2, r4, lsl #3
   11d88:	push	{r4, r5, r6, lr}
   11d8c:	sub	sp, sp, #8
   11d90:	ldr	r3, [pc, #200]	; 11e60 <__assert_fail@plt+0xd5c>
   11d94:	ldr	r0, [r3]
   11d98:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   11d9c:	cmp	r0, #0
   11da0:	beq	11dc4 <__assert_fail@plt+0xcc0>
   11da4:	ldr	r3, [pc, #184]	; 11e64 <__assert_fail@plt+0xd60>
   11da8:	ldrb	r3, [r3, #4]
   11dac:	cmp	r3, #0
   11db0:	beq	11de0 <__assert_fail@plt+0xcdc>
   11db4:	bl	10ff0 <__errno_location@plt>
   11db8:	ldr	r3, [r0]
   11dbc:	cmp	r3, #32
   11dc0:	bne	11de0 <__assert_fail@plt+0xcdc>
   11dc4:	ldr	r3, [pc, #156]	; 11e68 <__assert_fail@plt+0xd64>
   11dc8:	ldr	r0, [r3]
   11dcc:	bl	15cd4 <__assert_fail@plt+0x4bd0>
   11dd0:	cmp	r0, #0
   11dd4:	bne	11e54 <__assert_fail@plt+0xd50>
   11dd8:	add	sp, sp, #8
   11ddc:	pop	{r4, r5, r6, pc}
   11de0:	mov	r2, #5
   11de4:	ldr	r1, [pc, #128]	; 11e6c <__assert_fail@plt+0xd68>
   11de8:	mov	r0, #0
   11dec:	bl	10ef4 <dcgettext@plt>
   11df0:	mov	r4, r0
   11df4:	ldr	r3, [pc, #104]	; 11e64 <__assert_fail@plt+0xd60>
   11df8:	ldr	r5, [r3]
   11dfc:	cmp	r5, #0
   11e00:	beq	11e38 <__assert_fail@plt+0xd34>
   11e04:	bl	10ff0 <__errno_location@plt>
   11e08:	ldr	r6, [r0]
   11e0c:	mov	r0, r5
   11e10:	bl	145f4 <__assert_fail@plt+0x34f0>
   11e14:	str	r4, [sp]
   11e18:	mov	r3, r0
   11e1c:	ldr	r2, [pc, #76]	; 11e70 <__assert_fail@plt+0xd6c>
   11e20:	mov	r1, r6
   11e24:	mov	r0, #0
   11e28:	bl	10f6c <error@plt>
   11e2c:	ldr	r3, [pc, #64]	; 11e74 <__assert_fail@plt+0xd70>
   11e30:	ldr	r0, [r3]
   11e34:	bl	10eac <_exit@plt>
   11e38:	bl	10ff0 <__errno_location@plt>
   11e3c:	mov	r3, r4
   11e40:	ldr	r2, [pc, #48]	; 11e78 <__assert_fail@plt+0xd74>
   11e44:	ldr	r1, [r0]
   11e48:	mov	r0, #0
   11e4c:	bl	10f6c <error@plt>
   11e50:	b	11e2c <__assert_fail@plt+0xd28>
   11e54:	ldr	r3, [pc, #24]	; 11e74 <__assert_fail@plt+0xd70>
   11e58:	ldr	r0, [r3]
   11e5c:	bl	10eac <_exit@plt>
   11e60:	andeq	r8, r2, r4, ror r1
   11e64:	andeq	r8, r2, r4, lsl #3
   11e68:	andeq	r8, r2, r8, ror #2
   11e6c:	andeq	r6, r1, r8, ror #31
   11e70:	strdeq	r6, [r1], -r4
   11e74:	andeq	r8, r2, ip, lsl #2
   11e78:	strdeq	r6, [r1], -r8
   11e7c:	push	{r4, r5, lr}
   11e80:	sub	sp, sp, #20
   11e84:	ldr	r1, [sp, #40]	; 0x28
   11e88:	str	r1, [sp, #8]
   11e8c:	ldrd	r4, [sp, #32]
   11e90:	strd	r4, [sp]
   11e94:	bl	10e7c <posix_fadvise64@plt>
   11e98:	add	sp, sp, #20
   11e9c:	pop	{r4, r5, pc}
   11ea0:	cmp	r0, #0
   11ea4:	bxeq	lr
   11ea8:	push	{r4, lr}
   11eac:	sub	sp, sp, #16
   11eb0:	mov	r4, r1
   11eb4:	bl	11038 <fileno@plt>
   11eb8:	str	r4, [sp, #8]
   11ebc:	mov	r2, #0
   11ec0:	mov	r3, #0
   11ec4:	strd	r2, [sp]
   11ec8:	bl	10e7c <posix_fadvise64@plt>
   11ecc:	add	sp, sp, #16
   11ed0:	pop	{r4, pc}
   11ed4:	push	{r4, r5, r6, lr}
   11ed8:	sub	sp, sp, #8
   11edc:	mov	r4, r0
   11ee0:	bl	11038 <fileno@plt>
   11ee4:	cmp	r0, #0
   11ee8:	blt	11f60 <__assert_fail@plt+0xe5c>
   11eec:	mov	r0, r4
   11ef0:	bl	10f9c <__freading@plt>
   11ef4:	cmp	r0, #0
   11ef8:	beq	11f2c <__assert_fail@plt+0xe28>
   11efc:	mov	r0, r4
   11f00:	bl	11038 <fileno@plt>
   11f04:	mov	r3, #1
   11f08:	str	r3, [sp]
   11f0c:	mov	r2, #0
   11f10:	mov	r3, #0
   11f14:	bl	10f3c <lseek64@plt>
   11f18:	mvn	r2, #0
   11f1c:	mvn	r3, #0
   11f20:	cmp	r1, r3
   11f24:	cmpeq	r0, r2
   11f28:	beq	11f6c <__assert_fail@plt+0xe68>
   11f2c:	mov	r0, r4
   11f30:	bl	11f7c <__assert_fail@plt+0xe78>
   11f34:	cmp	r0, #0
   11f38:	beq	11f6c <__assert_fail@plt+0xe68>
   11f3c:	bl	10ff0 <__errno_location@plt>
   11f40:	mov	r5, r0
   11f44:	ldr	r6, [r0]
   11f48:	mov	r0, r4
   11f4c:	bl	11050 <fclose@plt>
   11f50:	cmp	r6, #0
   11f54:	strne	r6, [r5]
   11f58:	mvnne	r0, #0
   11f5c:	b	11f74 <__assert_fail@plt+0xe70>
   11f60:	mov	r0, r4
   11f64:	bl	11050 <fclose@plt>
   11f68:	b	11f74 <__assert_fail@plt+0xe70>
   11f6c:	mov	r0, r4
   11f70:	bl	11050 <fclose@plt>
   11f74:	add	sp, sp, #8
   11f78:	pop	{r4, r5, r6, pc}
   11f7c:	push	{r4, lr}
   11f80:	sub	sp, sp, #8
   11f84:	subs	r4, r0, #0
   11f88:	beq	11f9c <__assert_fail@plt+0xe98>
   11f8c:	mov	r0, r4
   11f90:	bl	10f9c <__freading@plt>
   11f94:	cmp	r0, #0
   11f98:	bne	11fac <__assert_fail@plt+0xea8>
   11f9c:	mov	r0, r4
   11fa0:	bl	10e88 <fflush@plt>
   11fa4:	add	sp, sp, #8
   11fa8:	pop	{r4, pc}
   11fac:	ldr	r3, [r4]
   11fb0:	tst	r3, #256	; 0x100
   11fb4:	bne	11fc4 <__assert_fail@plt+0xec0>
   11fb8:	mov	r0, r4
   11fbc:	bl	10e88 <fflush@plt>
   11fc0:	b	11fa4 <__assert_fail@plt+0xea0>
   11fc4:	mov	r3, #1
   11fc8:	str	r3, [sp]
   11fcc:	mov	r2, #0
   11fd0:	mov	r3, #0
   11fd4:	mov	r0, r4
   11fd8:	bl	120d4 <__assert_fail@plt+0xfd0>
   11fdc:	b	11fb8 <__assert_fail@plt+0xeb4>
   11fe0:	push	{r4, r5, r6, lr}
   11fe4:	mov	r5, r1
   11fe8:	bl	110bc <fopen64@plt>
   11fec:	subs	r4, r0, #0
   11ff0:	beq	12004 <__assert_fail@plt+0xf00>
   11ff4:	mov	r0, r4
   11ff8:	bl	11038 <fileno@plt>
   11ffc:	cmp	r0, #2
   12000:	bls	1200c <__assert_fail@plt+0xf08>
   12004:	mov	r0, r4
   12008:	pop	{r4, r5, r6, pc}
   1200c:	bl	14790 <__assert_fail@plt+0x368c>
   12010:	subs	r6, r0, #0
   12014:	blt	1205c <__assert_fail@plt+0xf58>
   12018:	mov	r0, r4
   1201c:	bl	11ed4 <__assert_fail@plt+0xdd0>
   12020:	cmp	r0, #0
   12024:	bne	1203c <__assert_fail@plt+0xf38>
   12028:	mov	r1, r5
   1202c:	mov	r0, r6
   12030:	bl	10e40 <fdopen@plt>
   12034:	subs	r4, r0, #0
   12038:	bne	12004 <__assert_fail@plt+0xf00>
   1203c:	bl	10ff0 <__errno_location@plt>
   12040:	mov	r4, r0
   12044:	ldr	r5, [r0]
   12048:	mov	r0, r6
   1204c:	bl	110f8 <close@plt>
   12050:	str	r5, [r4]
   12054:	mov	r4, #0
   12058:	b	12004 <__assert_fail@plt+0xf00>
   1205c:	bl	10ff0 <__errno_location@plt>
   12060:	mov	r5, r0
   12064:	ldr	r6, [r0]
   12068:	mov	r0, r4
   1206c:	bl	11ed4 <__assert_fail@plt+0xdd0>
   12070:	str	r6, [r5]
   12074:	mov	r4, #0
   12078:	b	12004 <__assert_fail@plt+0xf00>
   1207c:	push	{r4, r5, lr}
   12080:	sub	sp, sp, #12
   12084:	mov	r5, r0
   12088:	bl	10ff0 <__errno_location@plt>
   1208c:	mov	r4, r0
   12090:	ldr	r3, [r0]
   12094:	str	r3, [sp]
   12098:	str	r3, [sp, #4]
   1209c:	mov	r3, #0
   120a0:	str	r3, [r0]
   120a4:	mov	r0, r5
   120a8:	bl	10ea0 <free@plt>
   120ac:	ldr	r3, [r4]
   120b0:	cmp	r3, #0
   120b4:	moveq	r3, #4
   120b8:	movne	r3, #0
   120bc:	add	r2, sp, #8
   120c0:	add	r3, r2, r3
   120c4:	ldr	r3, [r3, #-8]
   120c8:	str	r3, [r4]
   120cc:	add	sp, sp, #12
   120d0:	pop	{r4, r5, pc}
   120d4:	push	{r4, r5, r6, r7, lr}
   120d8:	sub	sp, sp, #12
   120dc:	mov	r4, r0
   120e0:	mov	r6, r2
   120e4:	mov	r7, r3
   120e8:	ldr	r5, [sp, #32]
   120ec:	ldr	r2, [r0, #8]
   120f0:	ldr	r3, [r0, #4]
   120f4:	cmp	r2, r3
   120f8:	beq	12118 <__assert_fail@plt+0x1014>
   120fc:	str	r5, [sp]
   12100:	mov	r2, r6
   12104:	mov	r3, r7
   12108:	mov	r0, r4
   1210c:	bl	1105c <fseeko64@plt>
   12110:	add	sp, sp, #12
   12114:	pop	{r4, r5, r6, r7, pc}
   12118:	ldr	r2, [r0, #20]
   1211c:	ldr	r3, [r0, #16]
   12120:	cmp	r2, r3
   12124:	bne	120fc <__assert_fail@plt+0xff8>
   12128:	ldr	r3, [r0, #36]	; 0x24
   1212c:	cmp	r3, #0
   12130:	bne	120fc <__assert_fail@plt+0xff8>
   12134:	bl	11038 <fileno@plt>
   12138:	str	r5, [sp]
   1213c:	mov	r2, r6
   12140:	mov	r3, r7
   12144:	bl	10f3c <lseek64@plt>
   12148:	mvn	r2, #0
   1214c:	mvn	r3, #0
   12150:	cmp	r1, r3
   12154:	cmpeq	r0, r2
   12158:	beq	12174 <__assert_fail@plt+0x1070>
   1215c:	ldr	r3, [r4]
   12160:	bic	r3, r3, #16
   12164:	str	r3, [r4]
   12168:	strd	r0, [r4, #80]	; 0x50
   1216c:	mov	r0, #0
   12170:	b	12110 <__assert_fail@plt+0x100c>
   12174:	mvn	r0, #0
   12178:	b	12110 <__assert_fail@plt+0x100c>
   1217c:	andeq	r0, r0, r0
   12180:	push	{r4, r6, r7, lr}
   12184:	vpush	{d8}
   12188:	vmov.f64	d8, d0
   1218c:	cmp	r0, #1
   12190:	beq	121f8 <__assert_fail@plt+0x10f4>
   12194:	mov	r4, r0
   12198:	vldr	d7, [pc, #104]	; 12208 <__assert_fail@plt+0x1104>
   1219c:	vcmpe.f64	d0, d7
   121a0:	vmrs	APSR_nzcv, fpscr
   121a4:	bpl	121f8 <__assert_fail@plt+0x10f4>
   121a8:	vmov	r0, r1, d0
   121ac:	bl	169d8 <__assert_fail@plt+0x58d4>
   121b0:	mov	r6, r0
   121b4:	mov	r7, r1
   121b8:	cmp	r4, #0
   121bc:	movne	r0, #0
   121c0:	bne	121e0 <__assert_fail@plt+0x10dc>
   121c4:	mov	r0, r6
   121c8:	bl	16914 <__assert_fail@plt+0x5810>
   121cc:	vmov	d7, r0, r1
   121d0:	vcmp.f64	d7, d8
   121d4:	vmrs	APSR_nzcv, fpscr
   121d8:	movne	r0, #1
   121dc:	moveq	r0, #0
   121e0:	adds	r2, r6, r0
   121e4:	adc	r3, r7, r0, asr #31
   121e8:	mov	r0, r2
   121ec:	mov	r1, r3
   121f0:	bl	16914 <__assert_fail@plt+0x5810>
   121f4:	vmov	d8, r0, r1
   121f8:	vmov.f64	d0, d8
   121fc:	vpop	{d8}
   12200:	pop	{r4, r6, r7, pc}
   12204:	nop			; (mov r0, r0)
   12208:	andeq	r0, r0, r0
   1220c:	mvnsmi	r0, #0
   12210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12214:	vpush	{d8-d9}
   12218:	sub	sp, sp, #124	; 0x7c
   1221c:	strd	r0, [sp, #32]
   12220:	mov	r7, r2
   12224:	str	r2, [sp, #24]
   12228:	mov	r8, r3
   1222c:	and	r3, r3, #3
   12230:	str	r3, [sp, #28]
   12234:	and	r3, r8, #32
   12238:	str	r3, [sp, #40]	; 0x28
   1223c:	cmp	r3, #0
   12240:	movne	r3, #1024	; 0x400
   12244:	moveq	r3, #1000	; 0x3e8
   12248:	str	r3, [sp, #44]	; 0x2c
   1224c:	bl	110a4 <localeconv@plt>
   12250:	mov	r5, r0
   12254:	ldr	r6, [r0]
   12258:	mov	r0, r6
   1225c:	bl	10fd8 <strlen@plt>
   12260:	mov	r4, r0
   12264:	sub	r3, r0, #1
   12268:	ldr	r2, [pc, #1112]	; 126c8 <__assert_fail@plt+0x15c4>
   1226c:	cmp	r3, #15
   12270:	movhi	r6, r2
   12274:	str	r6, [sp, #64]	; 0x40
   12278:	cmp	r3, #15
   1227c:	movhi	r4, #1
   12280:	ldr	r9, [r5, #8]
   12284:	ldr	r5, [r5, #4]
   12288:	mov	r0, r5
   1228c:	bl	10fd8 <strlen@plt>
   12290:	ldr	r3, [pc, #1076]	; 126cc <__assert_fail@plt+0x15c8>
   12294:	cmp	r0, #16
   12298:	movhi	r5, r3
   1229c:	str	r5, [sp, #12]
   122a0:	add	sl, r7, #644	; 0x284
   122a4:	add	sl, sl, #3
   122a8:	ldrd	r2, [sp, #184]	; 0xb8
   122ac:	ldrd	r6, [sp, #176]	; 0xb0
   122b0:	cmp	r3, r7
   122b4:	cmpeq	r2, r6
   122b8:	bhi	1243c <__assert_fail@plt+0x1338>
   122bc:	mov	r0, r6
   122c0:	mov	r1, r7
   122c4:	bl	16988 <__assert_fail@plt+0x5884>
   122c8:	orrs	r3, r2, r3
   122cc:	bne	12314 <__assert_fail@plt+0x1210>
   122d0:	ldrd	r2, [sp, #184]	; 0xb8
   122d4:	ldrd	r0, [sp, #176]	; 0xb0
   122d8:	bl	16988 <__assert_fail@plt+0x5884>
   122dc:	mov	r2, r0
   122e0:	mov	r3, r1
   122e4:	ldrd	r6, [sp, #32]
   122e8:	mul	r0, r2, r7
   122ec:	mla	ip, r6, r3, r0
   122f0:	umull	r0, r1, r2, r6
   122f4:	strd	r0, [sp, #16]
   122f8:	add	r1, ip, r1
   122fc:	str	r1, [sp, #20]
   12300:	ldrd	r0, [sp, #16]
   12304:	bl	16988 <__assert_fail@plt+0x5884>
   12308:	cmp	r7, r1
   1230c:	cmpeq	r6, r0
   12310:	beq	125b4 <__assert_fail@plt+0x14b0>
   12314:	ldrd	r0, [sp, #176]	; 0xb0
   12318:	bl	16914 <__assert_fail@plt+0x5810>
   1231c:	vmov	d9, r0, r1
   12320:	ldrd	r0, [sp, #184]	; 0xb8
   12324:	bl	16914 <__assert_fail@plt+0x5810>
   12328:	vmov	d7, r0, r1
   1232c:	vdiv.f64	d8, d9, d7
   12330:	ldrd	r0, [sp, #32]
   12334:	bl	16914 <__assert_fail@plt+0x5810>
   12338:	vmov	d7, r0, r1
   1233c:	vmul.f64	d0, d8, d7
   12340:	tst	r8, #16
   12344:	beq	1250c <__assert_fail@plt+0x1408>
   12348:	vldr	d7, [pc, #872]	; 126b8 <__assert_fail@plt+0x15b4>
   1234c:	mov	r7, #0
   12350:	vldr	s13, [sp, #44]	; 0x2c
   12354:	vcvt.f64.u32	d6, s13
   12358:	vmul.f64	d7, d7, d6
   1235c:	add	r7, r7, #1
   12360:	vmul.f64	d5, d6, d7
   12364:	vcmpe.f64	d0, d5
   12368:	vmrs	APSR_nzcv, fpscr
   1236c:	movge	r3, #1
   12370:	movlt	r3, #0
   12374:	cmp	r7, #7
   12378:	movgt	r3, #0
   1237c:	andle	r3, r3, #1
   12380:	cmp	r3, #0
   12384:	bne	12358 <__assert_fail@plt+0x1254>
   12388:	vdiv.f64	d8, d0, d7
   1238c:	vmov.f64	d0, d8
   12390:	ldr	r0, [sp, #28]
   12394:	bl	12180 <__assert_fail@plt+0x107c>
   12398:	vstr	d0, [sp]
   1239c:	ldr	r3, [pc, #812]	; 126d0 <__assert_fail@plt+0x15cc>
   123a0:	mvn	r2, #0
   123a4:	mov	r1, #1
   123a8:	ldr	r6, [sp, #24]
   123ac:	mov	r0, r6
   123b0:	bl	10ffc <__sprintf_chk@plt>
   123b4:	mov	r0, r6
   123b8:	bl	10fd8 <strlen@plt>
   123bc:	mov	r5, r0
   123c0:	add	r4, r4, #1
   123c4:	ldr	r3, [sp, #40]	; 0x28
   123c8:	cmp	r3, #0
   123cc:	movne	r3, #1
   123d0:	moveq	r3, #2
   123d4:	add	r3, r3, r4
   123d8:	cmp	r0, r3
   123dc:	bhi	123f8 <__assert_fail@plt+0x12f4>
   123e0:	tst	r8, #8
   123e4:	beq	12544 <__assert_fail@plt+0x1440>
   123e8:	add	r3, r6, r0
   123ec:	ldrb	r3, [r3, #-1]
   123f0:	cmp	r3, #48	; 0x30
   123f4:	bne	12544 <__assert_fail@plt+0x1440>
   123f8:	vldr	d9, [pc, #704]	; 126c0 <__assert_fail@plt+0x15bc>
   123fc:	vmul.f64	d0, d8, d9
   12400:	ldr	r0, [sp, #28]
   12404:	bl	12180 <__assert_fail@plt+0x107c>
   12408:	vdiv.f64	d0, d0, d9
   1240c:	vstr	d0, [sp]
   12410:	ldr	r3, [pc, #700]	; 126d4 <__assert_fail@plt+0x15d0>
   12414:	mvn	r2, #0
   12418:	mov	r1, #1
   1241c:	ldr	r4, [sp, #24]
   12420:	mov	r0, r4
   12424:	bl	10ffc <__sprintf_chk@plt>
   12428:	mov	r0, r4
   1242c:	bl	10fd8 <strlen@plt>
   12430:	mov	r5, r0
   12434:	mov	r4, #0
   12438:	b	12544 <__assert_fail@plt+0x1440>
   1243c:	ldrd	r2, [sp, #176]	; 0xb0
   12440:	orrs	r3, r2, r3
   12444:	beq	12314 <__assert_fail@plt+0x1210>
   12448:	ldrd	r2, [sp, #176]	; 0xb0
   1244c:	ldrd	r0, [sp, #184]	; 0xb8
   12450:	bl	16988 <__assert_fail@plt+0x5884>
   12454:	orrs	r3, r2, r3
   12458:	bne	12314 <__assert_fail@plt+0x1210>
   1245c:	ldrd	r2, [sp, #176]	; 0xb0
   12460:	ldrd	r0, [sp, #184]	; 0xb8
   12464:	bl	16988 <__assert_fail@plt+0x5884>
   12468:	strd	r0, [sp, #48]	; 0x30
   1246c:	mov	r2, r0
   12470:	mov	r3, r1
   12474:	ldrd	r0, [sp, #32]
   12478:	bl	16988 <__assert_fail@plt+0x5884>
   1247c:	mov	r1, #10
   12480:	umull	r6, r7, r2, r1
   12484:	mla	r7, r1, r3, r7
   12488:	ldrd	r2, [sp, #48]	; 0x30
   1248c:	mov	r0, r6
   12490:	mov	r1, r7
   12494:	bl	16988 <__assert_fail@plt+0x5884>
   12498:	lsls	r0, r2, #1
   1249c:	adc	r1, r3, r3
   124a0:	strd	r0, [sp, #56]	; 0x38
   124a4:	ldrd	r2, [sp, #48]	; 0x30
   124a8:	ldrd	r0, [sp, #32]
   124ac:	bl	16988 <__assert_fail@plt+0x5884>
   124b0:	strd	r0, [sp, #16]
   124b4:	ldrd	r2, [sp, #48]	; 0x30
   124b8:	mov	r0, r6
   124bc:	mov	r1, r7
   124c0:	bl	16988 <__assert_fail@plt+0x5884>
   124c4:	mov	r6, r0
   124c8:	ldrd	r2, [sp, #48]	; 0x30
   124cc:	ldrd	r0, [sp, #56]	; 0x38
   124d0:	cmp	r3, r1
   124d4:	cmpeq	r2, r0
   124d8:	bls	124f0 <__assert_fail@plt+0x13ec>
   124dc:	mov	r3, r0
   124e0:	orrs	r3, r3, r1
   124e4:	movne	fp, #1
   124e8:	moveq	fp, #0
   124ec:	b	125bc <__assert_fail@plt+0x14b8>
   124f0:	ldrd	r2, [sp, #48]	; 0x30
   124f4:	ldrd	r0, [sp, #56]	; 0x38
   124f8:	cmp	r3, r1
   124fc:	cmpeq	r2, r0
   12500:	movcc	fp, #3
   12504:	movcs	fp, #2
   12508:	b	125bc <__assert_fail@plt+0x14b8>
   1250c:	ldr	r0, [sp, #28]
   12510:	bl	12180 <__assert_fail@plt+0x107c>
   12514:	vstr	d0, [sp]
   12518:	ldr	r3, [pc, #436]	; 126d4 <__assert_fail@plt+0x15d0>
   1251c:	mvn	r2, #0
   12520:	mov	r1, #1
   12524:	ldr	r4, [sp, #24]
   12528:	mov	r0, r4
   1252c:	bl	10ffc <__sprintf_chk@plt>
   12530:	mov	r0, r4
   12534:	bl	10fd8 <strlen@plt>
   12538:	mov	r5, r0
   1253c:	mov	r4, #0
   12540:	mvn	r7, #0
   12544:	sub	r6, sl, r5
   12548:	mov	r2, r5
   1254c:	ldr	r1, [sp, #24]
   12550:	mov	r0, r6
   12554:	bl	10e94 <memmove@plt>
   12558:	sub	r5, r5, r4
   1255c:	add	r5, r6, r5
   12560:	tst	r8, #4
   12564:	bne	1293c <__assert_fail@plt+0x1838>
   12568:	tst	r8, #128	; 0x80
   1256c:	beq	12a68 <__assert_fail@plt+0x1964>
   12570:	cmp	r7, #0
   12574:	blt	129cc <__assert_fail@plt+0x18c8>
   12578:	and	r3, r8, #256	; 0x100
   1257c:	orrs	r2, r7, r3
   12580:	beq	1259c <__assert_fail@plt+0x1498>
   12584:	tst	r8, #64	; 0x40
   12588:	beq	1259c <__assert_fail@plt+0x1498>
   1258c:	ldr	r1, [sp, #24]
   12590:	add	sl, r1, #648	; 0x288
   12594:	mov	r2, #32
   12598:	strb	r2, [r1, #647]	; 0x287
   1259c:	cmp	r7, #0
   125a0:	bne	12a20 <__assert_fail@plt+0x191c>
   125a4:	cmp	r3, #0
   125a8:	beq	12a68 <__assert_fail@plt+0x1964>
   125ac:	mov	r2, sl
   125b0:	b	12a5c <__assert_fail@plt+0x1958>
   125b4:	mov	fp, #0
   125b8:	mov	r6, fp
   125bc:	ands	r3, r8, #16
   125c0:	str	r3, [sp, #48]	; 0x30
   125c4:	streq	sl, [sp, #32]
   125c8:	mvneq	r7, #0
   125cc:	beq	12780 <__assert_fail@plt+0x167c>
   125d0:	ldr	ip, [sp, #44]	; 0x2c
   125d4:	mov	r3, #0
   125d8:	ldrd	r0, [sp, #16]
   125dc:	cmp	r1, r3
   125e0:	cmpeq	r0, ip
   125e4:	strcc	sl, [sp, #32]
   125e8:	movcc	r7, #0
   125ec:	bcc	12780 <__assert_fail@plt+0x167c>
   125f0:	mov	r7, #0
   125f4:	str	sl, [sp, #32]
   125f8:	mov	sl, ip
   125fc:	str	r9, [sp, #56]	; 0x38
   12600:	str	r8, [sp, #68]	; 0x44
   12604:	mov	r8, ip
   12608:	mov	r9, r3
   1260c:	b	1264c <__assert_fail@plt+0x1548>
   12610:	add	fp, fp, r5
   12614:	cmp	sl, fp
   12618:	movcc	fp, #3
   1261c:	movcs	fp, #2
   12620:	add	r7, r7, #1
   12624:	ldrd	r2, [sp, #16]
   12628:	cmp	r9, r3
   1262c:	cmpeq	r8, r2
   12630:	movls	r3, #1
   12634:	movhi	r3, #0
   12638:	cmp	r7, #7
   1263c:	movgt	r3, #0
   12640:	andle	r3, r3, #1
   12644:	cmp	r3, #0
   12648:	beq	126dc <__assert_fail@plt+0x15d8>
   1264c:	mov	r2, r8
   12650:	mov	r3, r9
   12654:	ldrd	r0, [sp, #16]
   12658:	bl	16988 <__assert_fail@plt+0x5884>
   1265c:	add	r2, r2, r2, lsl #2
   12660:	add	r6, r6, r2, lsl #1
   12664:	mov	r1, sl
   12668:	mov	r0, r6
   1266c:	bl	16370 <__assert_fail@plt+0x526c>
   12670:	asr	r5, fp, #1
   12674:	add	r5, r5, r1, lsl #1
   12678:	mov	r2, r8
   1267c:	mov	r3, r9
   12680:	ldrd	r0, [sp, #16]
   12684:	bl	16988 <__assert_fail@plt+0x5884>
   12688:	strd	r0, [sp, #16]
   1268c:	mov	r1, sl
   12690:	mov	r0, r6
   12694:	bl	16184 <__assert_fail@plt+0x5080>
   12698:	mov	r6, r0
   1269c:	cmp	sl, r5
   126a0:	bls	12610 <__assert_fail@plt+0x150c>
   126a4:	cmn	fp, r5
   126a8:	movne	fp, #1
   126ac:	moveq	fp, #0
   126b0:	b	12620 <__assert_fail@plt+0x151c>
   126b4:	nop			; (mov r0, r0)
   126b8:	andeq	r0, r0, r0
   126bc:	svccc	0x00f00000	; IMB
   126c0:	andeq	r0, r0, r0
   126c4:	eormi	r0, r4, r0
   126c8:	andeq	r7, r1, ip, lsl r0
   126cc:			; <UNDEFINED> instruction: 0x00016cb8
   126d0:	andeq	r7, r1, r8, lsr #32
   126d4:	andeq	r7, r1, r0, lsr #32
   126d8:	strdeq	r6, [r1], -ip
   126dc:	ldr	sl, [sp, #32]
   126e0:	ldr	r9, [sp, #56]	; 0x38
   126e4:	ldr	r8, [sp, #68]	; 0x44
   126e8:	ldrd	r2, [sp, #16]
   126ec:	cmp	r3, #0
   126f0:	cmpeq	r2, #9
   126f4:	strhi	sl, [sp, #32]
   126f8:	bhi	12780 <__assert_fail@plt+0x167c>
   126fc:	ldr	r3, [sp, #28]
   12700:	cmp	r3, #1
   12704:	beq	12828 <__assert_fail@plt+0x1724>
   12708:	ldr	r3, [sp, #28]
   1270c:	clz	r3, r3
   12710:	lsr	r3, r3, #5
   12714:	cmp	fp, #0
   12718:	moveq	r3, #0
   1271c:	cmp	r3, #0
   12720:	beq	12734 <__assert_fail@plt+0x1630>
   12724:	add	r6, r6, #1
   12728:	cmp	r6, #10
   1272c:	movne	fp, #0
   12730:	beq	12840 <__assert_fail@plt+0x173c>
   12734:	cmp	r6, #0
   12738:	bne	1274c <__assert_fail@plt+0x1648>
   1273c:	ands	r6, r8, #8
   12740:	strne	sl, [sp, #32]
   12744:	movne	r6, #0
   12748:	bne	12780 <__assert_fail@plt+0x167c>
   1274c:	ldr	r3, [sp, #24]
   12750:	add	r5, r3, #644	; 0x284
   12754:	add	r5, r5, #2
   12758:	add	r6, r6, #48	; 0x30
   1275c:	strb	r6, [r3, #646]	; 0x286
   12760:	sub	r3, r5, r4
   12764:	str	r3, [sp, #32]
   12768:	mov	r2, r4
   1276c:	ldr	r1, [sp, #64]	; 0x40
   12770:	mov	r0, r3
   12774:	bl	10eb8 <memcpy@plt>
   12778:	mov	r6, #0
   1277c:	mov	fp, r6
   12780:	ldr	r3, [sp, #28]
   12784:	cmp	r3, #1
   12788:	beq	12870 <__assert_fail@plt+0x176c>
   1278c:	ldr	r3, [sp, #28]
   12790:	cmp	r3, #0
   12794:	movne	fp, #0
   12798:	bne	127ac <__assert_fail@plt+0x16a8>
   1279c:	add	fp, r6, fp
   127a0:	cmp	fp, #0
   127a4:	movle	fp, #0
   127a8:	movgt	fp, #1
   127ac:	cmp	fp, #0
   127b0:	beq	128cc <__assert_fail@plt+0x17c8>
   127b4:	ldrd	r2, [sp, #16]
   127b8:	adds	r2, r2, #1
   127bc:	adc	r3, r3, #0
   127c0:	mov	r0, r2
   127c4:	mov	r1, r3
   127c8:	strd	r0, [sp, #16]
   127cc:	ldr	r3, [sp, #48]	; 0x30
   127d0:	cmp	r3, #0
   127d4:	beq	128cc <__assert_fail@plt+0x17c8>
   127d8:	ldr	r2, [sp, #44]	; 0x2c
   127dc:	mov	r3, #0
   127e0:	cmp	r3, r1
   127e4:	cmpeq	r2, r0
   127e8:	moveq	r3, #1
   127ec:	movne	r3, #0
   127f0:	cmp	r7, #7
   127f4:	movgt	r3, #0
   127f8:	andle	r3, r3, #1
   127fc:	cmp	r3, #0
   12800:	beq	128cc <__assert_fail@plt+0x17c8>
   12804:	add	r7, r7, #1
   12808:	tst	r8, #8
   1280c:	beq	128a0 <__assert_fail@plt+0x179c>
   12810:	ldr	r2, [sp, #32]
   12814:	sub	r6, r2, #1
   12818:	mov	r3, #49	; 0x31
   1281c:	strb	r3, [r2, #-1]
   12820:	mov	r5, r2
   12824:	b	12560 <__assert_fail@plt+0x145c>
   12828:	and	r3, r6, #1
   1282c:	add	r3, r3, fp
   12830:	cmp	r3, #2
   12834:	movle	r3, #0
   12838:	movgt	r3, #1
   1283c:	b	1271c <__assert_fail@plt+0x1618>
   12840:	ldrd	r2, [sp, #16]
   12844:	adds	r2, r2, #1
   12848:	adc	r3, r3, #0
   1284c:	strd	r2, [sp, #16]
   12850:	cmp	r3, #0
   12854:	cmpeq	r2, #9
   12858:	strhi	sl, [sp, #32]
   1285c:	movhi	fp, #0
   12860:	movhi	r6, fp
   12864:	bhi	12780 <__assert_fail@plt+0x167c>
   12868:	mov	fp, #0
   1286c:	b	1273c <__assert_fail@plt+0x1638>
   12870:	ldrd	r2, [sp, #16]
   12874:	and	r2, r2, #1
   12878:	mov	r3, #0
   1287c:	adds	r2, r2, fp
   12880:	adc	r3, r3, fp, asr #31
   12884:	orr	r2, r2, r3
   12888:	cmp	r2, #0
   1288c:	addne	r6, r6, #1
   12890:	cmp	r6, #5
   12894:	movle	fp, #0
   12898:	movgt	fp, #1
   1289c:	b	127ac <__assert_fail@plt+0x16a8>
   128a0:	mov	r3, #48	; 0x30
   128a4:	ldr	r2, [sp, #32]
   128a8:	strb	r3, [r2, #-1]
   128ac:	mvn	r3, r4
   128b0:	add	r3, r2, r3
   128b4:	str	r3, [sp, #32]
   128b8:	mov	r2, r4
   128bc:	ldr	r1, [sp, #64]	; 0x40
   128c0:	mov	r0, r3
   128c4:	bl	10eb8 <memcpy@plt>
   128c8:	b	12810 <__assert_fail@plt+0x170c>
   128cc:	ldr	r6, [sp, #32]
   128d0:	mov	r4, #10
   128d4:	mov	r5, #0
   128d8:	mov	fp, r6
   128dc:	str	r8, [sp, #28]
   128e0:	mov	r8, r7
   128e4:	ldrd	r6, [sp, #16]
   128e8:	mov	r2, r4
   128ec:	mov	r3, r5
   128f0:	mov	r0, r6
   128f4:	mov	r1, r7
   128f8:	bl	16988 <__assert_fail@plt+0x5884>
   128fc:	add	r2, r2, #48	; 0x30
   12900:	strb	r2, [fp, #-1]!
   12904:	mov	r2, r4
   12908:	mov	r3, r5
   1290c:	mov	r0, r6
   12910:	mov	r1, r7
   12914:	bl	16988 <__assert_fail@plt+0x5884>
   12918:	mov	r6, r0
   1291c:	mov	r7, r1
   12920:	orrs	r3, r6, r7
   12924:	bne	128e8 <__assert_fail@plt+0x17e4>
   12928:	mov	r7, r8
   1292c:	mov	r6, fp
   12930:	ldr	r8, [sp, #28]
   12934:	ldr	r5, [sp, #32]
   12938:	b	12560 <__assert_fail@plt+0x145c>
   1293c:	sub	r4, r5, r6
   12940:	ldr	r0, [sp, #12]
   12944:	bl	10fd8 <strlen@plt>
   12948:	mov	fp, r0
   1294c:	mov	r3, #41	; 0x29
   12950:	mov	r2, r4
   12954:	mov	r1, r6
   12958:	add	r0, sp, #76	; 0x4c
   1295c:	bl	10f24 <__memcpy_chk@plt>
   12960:	mov	r6, r5
   12964:	mvn	r5, #0
   12968:	b	129ac <__assert_fail@plt+0x18a8>
   1296c:	cmp	r5, r4
   12970:	movcs	r5, r4
   12974:	sub	r6, r6, r5
   12978:	sub	r4, r4, r5
   1297c:	mov	r2, r5
   12980:	add	r3, sp, #76	; 0x4c
   12984:	add	r1, r3, r4
   12988:	mov	r0, r6
   1298c:	bl	10eb8 <memcpy@plt>
   12990:	cmp	r4, #0
   12994:	beq	12568 <__assert_fail@plt+0x1464>
   12998:	sub	r6, r6, fp
   1299c:	mov	r2, fp
   129a0:	ldr	r1, [sp, #12]
   129a4:	mov	r0, r6
   129a8:	bl	10eb8 <memcpy@plt>
   129ac:	ldrb	r3, [r9]
   129b0:	cmp	r3, #0
   129b4:	beq	1296c <__assert_fail@plt+0x1868>
   129b8:	cmp	r3, #255	; 0xff
   129bc:	movne	r5, r3
   129c0:	moveq	r5, r4
   129c4:	add	r9, r9, #1
   129c8:	b	1296c <__assert_fail@plt+0x1868>
   129cc:	ldrd	r2, [sp, #184]	; 0xb8
   129d0:	cmp	r3, #0
   129d4:	cmpeq	r2, #1
   129d8:	bls	12a88 <__assert_fail@plt+0x1984>
   129dc:	mov	r7, #1
   129e0:	mov	r2, #1
   129e4:	mov	r3, #0
   129e8:	ldr	r1, [sp, #44]	; 0x2c
   129ec:	ldrd	r4, [sp, #184]	; 0xb8
   129f0:	mul	r0, r1, r3
   129f4:	umull	r2, r3, r2, r1
   129f8:	add	r3, r0, r3
   129fc:	cmp	r5, r3
   12a00:	cmpeq	r4, r2
   12a04:	bls	12578 <__assert_fail@plt+0x1474>
   12a08:	add	r7, r7, #1
   12a0c:	cmp	r7, #8
   12a10:	bne	129f0 <__assert_fail@plt+0x18ec>
   12a14:	and	r3, r8, #256	; 0x100
   12a18:	tst	r8, #64	; 0x40
   12a1c:	bne	1258c <__assert_fail@plt+0x1488>
   12a20:	add	r2, sl, #1
   12a24:	ldr	r1, [sp, #40]	; 0x28
   12a28:	cmp	r1, #0
   12a2c:	cmpeq	r7, #1
   12a30:	ldrne	r1, [pc, #-864]	; 126d8 <__assert_fail@plt+0x15d4>
   12a34:	ldrbne	r1, [r1, r7]
   12a38:	moveq	r1, #107	; 0x6b
   12a3c:	strb	r1, [sl]
   12a40:	cmp	r3, #0
   12a44:	beq	12a80 <__assert_fail@plt+0x197c>
   12a48:	ldr	r3, [sp, #40]	; 0x28
   12a4c:	cmp	r3, #0
   12a50:	addne	r2, sl, #2
   12a54:	movne	r3, #105	; 0x69
   12a58:	strbne	r3, [sl, #1]
   12a5c:	add	sl, r2, #1
   12a60:	mov	r3, #66	; 0x42
   12a64:	strb	r3, [r2]
   12a68:	mov	r3, #0
   12a6c:	strb	r3, [sl]
   12a70:	mov	r0, r6
   12a74:	add	sp, sp, #124	; 0x7c
   12a78:	vpop	{d8-d9}
   12a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a80:	mov	sl, r2
   12a84:	b	12a68 <__assert_fail@plt+0x1964>
   12a88:	ands	r3, r8, #256	; 0x100
   12a8c:	movne	r7, #0
   12a90:	bne	12584 <__assert_fail@plt+0x1480>
   12a94:	b	125a4 <__assert_fail@plt+0x14a0>
   12a98:	push	{r4, r5, r6, r7, lr}
   12a9c:	sub	sp, sp, #20
   12aa0:	mov	r7, r1
   12aa4:	mov	r6, r2
   12aa8:	subs	r4, r0, #0
   12aac:	beq	12b1c <__assert_fail@plt+0x1a18>
   12ab0:	ldrb	r3, [r4]
   12ab4:	cmp	r3, #39	; 0x27
   12ab8:	addeq	r4, r4, #1
   12abc:	moveq	r5, #4
   12ac0:	movne	r5, #0
   12ac4:	ldr	r1, [pc, #332]	; 12c18 <__assert_fail@plt+0x1b14>
   12ac8:	mov	r3, #4
   12acc:	add	r2, r1, #12
   12ad0:	add	r1, r1, #20
   12ad4:	mov	r0, r4
   12ad8:	bl	15954 <__assert_fail@plt+0x4850>
   12adc:	cmp	r0, #0
   12ae0:	blt	12b60 <__assert_fail@plt+0x1a5c>
   12ae4:	ldr	r3, [pc, #300]	; 12c18 <__assert_fail@plt+0x1b14>
   12ae8:	add	r0, r3, r0, lsl #2
   12aec:	ldr	r3, [r0, #12]
   12af0:	orr	r5, r5, r3
   12af4:	mov	r2, #1
   12af8:	mov	r3, #0
   12afc:	strd	r2, [r6]
   12b00:	str	r5, [r7]
   12b04:	mov	r0, #0
   12b08:	ldrd	r2, [r6]
   12b0c:	orrs	r3, r2, r3
   12b10:	beq	12bf4 <__assert_fail@plt+0x1af0>
   12b14:	add	sp, sp, #20
   12b18:	pop	{r4, r5, r6, r7, pc}
   12b1c:	ldr	r0, [pc, #248]	; 12c1c <__assert_fail@plt+0x1b18>
   12b20:	bl	10f78 <getenv@plt>
   12b24:	subs	r4, r0, #0
   12b28:	bne	12ab0 <__assert_fail@plt+0x19ac>
   12b2c:	ldr	r0, [pc, #236]	; 12c20 <__assert_fail@plt+0x1b1c>
   12b30:	bl	10f78 <getenv@plt>
   12b34:	subs	r4, r0, #0
   12b38:	bne	12ab0 <__assert_fail@plt+0x19ac>
   12b3c:	ldr	r0, [pc, #224]	; 12c24 <__assert_fail@plt+0x1b20>
   12b40:	bl	10f78 <getenv@plt>
   12b44:	cmp	r0, #0
   12b48:	moveq	r2, #1024	; 0x400
   12b4c:	movne	r2, #512	; 0x200
   12b50:	mov	r3, #0
   12b54:	strd	r2, [r6]
   12b58:	mov	r5, #0
   12b5c:	b	12b00 <__assert_fail@plt+0x19fc>
   12b60:	ldr	r3, [pc, #192]	; 12c28 <__assert_fail@plt+0x1b24>
   12b64:	str	r3, [sp]
   12b68:	mov	r3, r6
   12b6c:	mov	r2, #0
   12b70:	add	r1, sp, #12
   12b74:	mov	r0, r4
   12b78:	bl	153f4 <__assert_fail@plt+0x42f0>
   12b7c:	cmp	r0, #0
   12b80:	movne	r3, #0
   12b84:	strne	r3, [r7]
   12b88:	bne	12b08 <__assert_fail@plt+0x1a04>
   12b8c:	ldrb	r3, [r4]
   12b90:	sub	r3, r3, #48	; 0x30
   12b94:	uxtb	r3, r3
   12b98:	cmp	r3, #9
   12b9c:	bls	12b00 <__assert_fail@plt+0x19fc>
   12ba0:	ldr	r2, [sp, #12]
   12ba4:	cmp	r4, r2
   12ba8:	beq	12bc8 <__assert_fail@plt+0x1ac4>
   12bac:	ldrb	r3, [r4, #1]!
   12bb0:	sub	r3, r3, #48	; 0x30
   12bb4:	uxtb	r3, r3
   12bb8:	cmp	r3, #9
   12bbc:	bls	12b00 <__assert_fail@plt+0x19fc>
   12bc0:	cmp	r4, r2
   12bc4:	bne	12bac <__assert_fail@plt+0x1aa8>
   12bc8:	ldrb	r3, [r2, #-1]
   12bcc:	cmp	r3, #66	; 0x42
   12bd0:	orrne	r5, r5, #128	; 0x80
   12bd4:	beq	12be0 <__assert_fail@plt+0x1adc>
   12bd8:	orr	r5, r5, #32
   12bdc:	b	12b00 <__assert_fail@plt+0x19fc>
   12be0:	orr	r5, r5, #384	; 0x180
   12be4:	ldrb	r3, [r2, #-2]
   12be8:	cmp	r3, #105	; 0x69
   12bec:	bne	12b00 <__assert_fail@plt+0x19fc>
   12bf0:	b	12bd8 <__assert_fail@plt+0x1ad4>
   12bf4:	ldr	r0, [pc, #40]	; 12c24 <__assert_fail@plt+0x1b20>
   12bf8:	bl	10f78 <getenv@plt>
   12bfc:	cmp	r0, #0
   12c00:	moveq	r2, #1024	; 0x400
   12c04:	movne	r2, #512	; 0x200
   12c08:	mov	r3, #0
   12c0c:	strd	r2, [r6]
   12c10:	mov	r0, #4
   12c14:	b	12b14 <__assert_fail@plt+0x1a10>
   12c18:	strdeq	r6, [r1], -ip
   12c1c:	andeq	r7, r1, r0, lsr r0
   12c20:	andeq	r7, r1, ip, lsr r0
   12c24:	andeq	r7, r1, r8, asr #32
   12c28:	andeq	r7, r1, r8, asr r0
   12c2c:	push	{r4, r5, r6, lr}
   12c30:	subs	r4, r0, #0
   12c34:	beq	12cac <__assert_fail@plt+0x1ba8>
   12c38:	mov	r1, #47	; 0x2f
   12c3c:	mov	r0, r4
   12c40:	bl	1108c <strrchr@plt>
   12c44:	cmp	r0, #0
   12c48:	addne	r5, r0, #1
   12c4c:	moveq	r5, r4
   12c50:	sub	r3, r5, r4
   12c54:	cmp	r3, #6
   12c58:	ble	12c98 <__assert_fail@plt+0x1b94>
   12c5c:	mov	r2, #7
   12c60:	ldr	r1, [pc, #96]	; 12cc8 <__assert_fail@plt+0x1bc4>
   12c64:	sub	r0, r5, #7
   12c68:	bl	110e0 <strncmp@plt>
   12c6c:	cmp	r0, #0
   12c70:	bne	12c98 <__assert_fail@plt+0x1b94>
   12c74:	mov	r2, #3
   12c78:	ldr	r1, [pc, #76]	; 12ccc <__assert_fail@plt+0x1bc8>
   12c7c:	mov	r0, r5
   12c80:	bl	110e0 <strncmp@plt>
   12c84:	cmp	r0, #0
   12c88:	addeq	r4, r5, #3
   12c8c:	ldreq	r3, [pc, #60]	; 12cd0 <__assert_fail@plt+0x1bcc>
   12c90:	streq	r4, [r3]
   12c94:	movne	r4, r5
   12c98:	ldr	r3, [pc, #52]	; 12cd4 <__assert_fail@plt+0x1bd0>
   12c9c:	str	r4, [r3]
   12ca0:	ldr	r3, [pc, #48]	; 12cd8 <__assert_fail@plt+0x1bd4>
   12ca4:	str	r4, [r3]
   12ca8:	pop	{r4, r5, r6, pc}
   12cac:	ldr	r3, [pc, #40]	; 12cdc <__assert_fail@plt+0x1bd8>
   12cb0:	ldr	r3, [r3]
   12cb4:	mov	r2, #55	; 0x37
   12cb8:	mov	r1, #1
   12cbc:	ldr	r0, [pc, #28]	; 12ce0 <__assert_fail@plt+0x1bdc>
   12cc0:	bl	10f30 <fwrite@plt>
   12cc4:	bl	110ec <abort@plt>
   12cc8:	strheq	r7, [r1], -r8
   12ccc:	andeq	r7, r1, r0, asr #1
   12cd0:	andeq	r8, r2, r8, asr r1
   12cd4:	andeq	r8, r2, ip, lsl #3
   12cd8:	andeq	r8, r2, ip, asr r1
   12cdc:	andeq	r8, r2, r8, ror #2
   12ce0:	andeq	r7, r1, r0, lsl #1
   12ce4:	push	{r4, r5, r6, lr}
   12ce8:	mov	r5, r0
   12cec:	mov	r4, r1
   12cf0:	mov	r2, #48	; 0x30
   12cf4:	mov	r1, #0
   12cf8:	bl	11020 <memset@plt>
   12cfc:	cmp	r4, #10
   12d00:	beq	12d10 <__assert_fail@plt+0x1c0c>
   12d04:	str	r4, [r5]
   12d08:	mov	r0, r5
   12d0c:	pop	{r4, r5, r6, pc}
   12d10:	bl	110ec <abort@plt>
   12d14:	push	{r4, r5, r6, lr}
   12d18:	mov	r4, r0
   12d1c:	mov	r5, r1
   12d20:	mov	r2, #5
   12d24:	mov	r1, r0
   12d28:	mov	r0, #0
   12d2c:	bl	10ef4 <dcgettext@plt>
   12d30:	cmp	r4, r0
   12d34:	popne	{r4, r5, r6, pc}
   12d38:	bl	15fa4 <__assert_fail@plt+0x4ea0>
   12d3c:	ldrb	r3, [r0]
   12d40:	bic	r3, r3, #32
   12d44:	cmp	r3, #85	; 0x55
   12d48:	beq	12dc4 <__assert_fail@plt+0x1cc0>
   12d4c:	cmp	r3, #71	; 0x47
   12d50:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12d54:	ldrb	r3, [r0, #1]
   12d58:	bic	r3, r3, #32
   12d5c:	cmp	r3, #66	; 0x42
   12d60:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12d64:	ldrb	r3, [r0, #2]
   12d68:	cmp	r3, #49	; 0x31
   12d6c:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12d70:	ldrb	r3, [r0, #3]
   12d74:	cmp	r3, #56	; 0x38
   12d78:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12d7c:	ldrb	r3, [r0, #4]
   12d80:	cmp	r3, #48	; 0x30
   12d84:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12d88:	ldrb	r3, [r0, #5]
   12d8c:	cmp	r3, #51	; 0x33
   12d90:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12d94:	ldrb	r3, [r0, #6]
   12d98:	cmp	r3, #48	; 0x30
   12d9c:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12da0:	ldrb	r3, [r0, #7]
   12da4:	cmp	r3, #0
   12da8:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12dac:	ldrb	r2, [r4]
   12db0:	ldr	r3, [pc, #124]	; 12e34 <__assert_fail@plt+0x1d30>
   12db4:	ldr	r0, [pc, #124]	; 12e38 <__assert_fail@plt+0x1d34>
   12db8:	cmp	r2, #96	; 0x60
   12dbc:	movne	r0, r3
   12dc0:	pop	{r4, r5, r6, pc}
   12dc4:	ldrb	r3, [r0, #1]
   12dc8:	bic	r3, r3, #32
   12dcc:	cmp	r3, #84	; 0x54
   12dd0:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12dd4:	ldrb	r3, [r0, #2]
   12dd8:	bic	r3, r3, #32
   12ddc:	cmp	r3, #70	; 0x46
   12de0:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12de4:	ldrb	r3, [r0, #3]
   12de8:	cmp	r3, #45	; 0x2d
   12dec:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12df0:	ldrb	r3, [r0, #4]
   12df4:	cmp	r3, #56	; 0x38
   12df8:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12dfc:	ldrb	r3, [r0, #5]
   12e00:	cmp	r3, #0
   12e04:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12e08:	ldrb	r2, [r4]
   12e0c:	ldr	r3, [pc, #40]	; 12e3c <__assert_fail@plt+0x1d38>
   12e10:	ldr	r0, [pc, #40]	; 12e40 <__assert_fail@plt+0x1d3c>
   12e14:	cmp	r2, #96	; 0x60
   12e18:	movne	r0, r3
   12e1c:	pop	{r4, r5, r6, pc}
   12e20:	ldr	r3, [pc, #28]	; 12e44 <__assert_fail@plt+0x1d40>
   12e24:	ldr	r0, [pc, #28]	; 12e48 <__assert_fail@plt+0x1d44>
   12e28:	cmp	r5, #9
   12e2c:	movne	r0, r3
   12e30:	pop	{r4, r5, r6, pc}
   12e34:	andeq	r7, r1, ip, lsl r1
   12e38:	andeq	r7, r1, r8, lsr #2
   12e3c:	andeq	r7, r1, r8, lsl r1
   12e40:	andeq	r7, r1, ip, lsr #2
   12e44:	andeq	r7, r1, r0, lsr #2
   12e48:	andeq	r7, r1, r4, lsr #2
   12e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e50:	sub	sp, sp, #116	; 0x74
   12e54:	str	r0, [sp, #36]	; 0x24
   12e58:	mov	sl, r1
   12e5c:	str	r2, [sp, #52]	; 0x34
   12e60:	str	r3, [sp, #28]
   12e64:	ldr	r8, [sp, #152]	; 0x98
   12e68:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   12e6c:	str	r0, [sp, #84]	; 0x54
   12e70:	ldr	r3, [sp, #156]	; 0x9c
   12e74:	lsr	r3, r3, #1
   12e78:	and	r3, r3, #1
   12e7c:	str	r3, [sp, #32]
   12e80:	mov	r3, #1
   12e84:	str	r3, [sp, #40]	; 0x28
   12e88:	mov	r3, #0
   12e8c:	str	r3, [sp, #80]	; 0x50
   12e90:	str	r3, [sp, #44]	; 0x2c
   12e94:	str	r3, [sp, #48]	; 0x30
   12e98:	str	r3, [sp, #60]	; 0x3c
   12e9c:	str	r3, [sp, #72]	; 0x48
   12ea0:	str	r3, [sp, #76]	; 0x4c
   12ea4:	mov	r7, sl
   12ea8:	mov	sl, r8
   12eac:	cmp	sl, #10
   12eb0:	ldrls	pc, [pc, sl, lsl #2]
   12eb4:	b	1306c <__assert_fail@plt+0x1f68>
   12eb8:	andeq	r2, r1, ip, lsl pc
   12ebc:	andeq	r2, r1, ip, ror #29
   12ec0:	andeq	r3, r1, r8, asr #32
   12ec4:	andeq	r2, r1, r4, ror #29
   12ec8:	strdeq	r2, [r1], -ip
   12ecc:	andeq	r2, r1, ip, lsr #30
   12ed0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12ed4:	andeq	r3, r1, r0, ror r0
   12ed8:	andeq	r2, r1, r8, ror #30
   12edc:	andeq	r2, r1, r8, ror #30
   12ee0:	andeq	r2, r1, r8, ror #30
   12ee4:	mov	r3, #1
   12ee8:	str	r3, [sp, #48]	; 0x30
   12eec:	mov	r3, #1
   12ef0:	str	r3, [sp, #32]
   12ef4:	str	r3, [sp, #60]	; 0x3c
   12ef8:	ldr	r3, [pc, #4068]	; 13ee4 <__assert_fail@plt+0x2de0>
   12efc:	str	r3, [sp, #72]	; 0x48
   12f00:	mov	fp, #0
   12f04:	mov	sl, #2
   12f08:	mov	r6, #0
   12f0c:	ldr	r3, [sp, #48]	; 0x30
   12f10:	eor	r3, r3, #1
   12f14:	str	r3, [sp, #68]	; 0x44
   12f18:	b	13800 <__assert_fail@plt+0x26fc>
   12f1c:	mov	r3, #0
   12f20:	str	r3, [sp, #32]
   12f24:	mov	fp, r3
   12f28:	b	12f08 <__assert_fail@plt+0x1e04>
   12f2c:	ldr	r3, [sp, #32]
   12f30:	cmp	r3, #0
   12f34:	bne	13088 <__assert_fail@plt+0x1f84>
   12f38:	cmp	r7, #0
   12f3c:	beq	130a8 <__assert_fail@plt+0x1fa4>
   12f40:	ldr	r3, [sp, #36]	; 0x24
   12f44:	mov	r2, #34	; 0x22
   12f48:	strb	r2, [r3]
   12f4c:	mov	r3, #1
   12f50:	str	r3, [sp, #48]	; 0x30
   12f54:	str	r3, [sp, #60]	; 0x3c
   12f58:	ldr	r3, [pc, #3980]	; 13eec <__assert_fail@plt+0x2de8>
   12f5c:	str	r3, [sp, #72]	; 0x48
   12f60:	mov	fp, #1
   12f64:	b	12f08 <__assert_fail@plt+0x1e04>
   12f68:	cmp	sl, #10
   12f6c:	beq	12f90 <__assert_fail@plt+0x1e8c>
   12f70:	mov	r1, sl
   12f74:	ldr	r0, [pc, #3948]	; 13ee8 <__assert_fail@plt+0x2de4>
   12f78:	bl	12d14 <__assert_fail@plt+0x1c10>
   12f7c:	str	r0, [sp, #164]	; 0xa4
   12f80:	mov	r1, sl
   12f84:	ldr	r0, [pc, #3928]	; 13ee4 <__assert_fail@plt+0x2de0>
   12f88:	bl	12d14 <__assert_fail@plt+0x1c10>
   12f8c:	str	r0, [sp, #168]	; 0xa8
   12f90:	ldr	r3, [sp, #32]
   12f94:	cmp	r3, #0
   12f98:	movne	fp, #0
   12f9c:	bne	12fd4 <__assert_fail@plt+0x1ed0>
   12fa0:	ldr	r3, [sp, #164]	; 0xa4
   12fa4:	ldrb	r3, [r3]
   12fa8:	cmp	r3, #0
   12fac:	beq	12ff4 <__assert_fail@plt+0x1ef0>
   12fb0:	ldr	r2, [sp, #164]	; 0xa4
   12fb4:	mov	fp, #0
   12fb8:	ldr	r1, [sp, #36]	; 0x24
   12fbc:	cmp	r7, fp
   12fc0:	strbhi	r3, [r1, fp]
   12fc4:	add	fp, fp, #1
   12fc8:	ldrb	r3, [r2, #1]!
   12fcc:	cmp	r3, #0
   12fd0:	bne	12fbc <__assert_fail@plt+0x1eb8>
   12fd4:	ldr	r0, [sp, #168]	; 0xa8
   12fd8:	bl	10fd8 <strlen@plt>
   12fdc:	str	r0, [sp, #60]	; 0x3c
   12fe0:	ldr	r3, [sp, #168]	; 0xa8
   12fe4:	str	r3, [sp, #72]	; 0x48
   12fe8:	mov	r3, #1
   12fec:	str	r3, [sp, #48]	; 0x30
   12ff0:	b	12f08 <__assert_fail@plt+0x1e04>
   12ff4:	mov	fp, #0
   12ff8:	b	12fd4 <__assert_fail@plt+0x1ed0>
   12ffc:	ldr	r3, [sp, #32]
   13000:	cmp	r3, #0
   13004:	bne	130c4 <__assert_fail@plt+0x1fc0>
   13008:	mov	r3, #1
   1300c:	str	r3, [sp, #48]	; 0x30
   13010:	cmp	r7, #0
   13014:	beq	130e0 <__assert_fail@plt+0x1fdc>
   13018:	ldr	r3, [sp, #36]	; 0x24
   1301c:	mov	r2, #39	; 0x27
   13020:	strb	r2, [r3]
   13024:	mov	r3, #0
   13028:	str	r3, [sp, #32]
   1302c:	mov	r3, #1
   13030:	str	r3, [sp, #60]	; 0x3c
   13034:	ldr	r3, [pc, #3752]	; 13ee4 <__assert_fail@plt+0x2de0>
   13038:	str	r3, [sp, #72]	; 0x48
   1303c:	mov	fp, #1
   13040:	mov	sl, #2
   13044:	b	12f08 <__assert_fail@plt+0x1e04>
   13048:	ldr	r3, [sp, #32]
   1304c:	cmp	r3, #0
   13050:	beq	13010 <__assert_fail@plt+0x1f0c>
   13054:	mov	r3, #1
   13058:	str	r3, [sp, #60]	; 0x3c
   1305c:	ldr	r3, [pc, #3712]	; 13ee4 <__assert_fail@plt+0x2de0>
   13060:	str	r3, [sp, #72]	; 0x48
   13064:	mov	fp, #0
   13068:	b	12f08 <__assert_fail@plt+0x1e04>
   1306c:	bl	110ec <abort@plt>
   13070:	mov	r3, #0
   13074:	str	r3, [sp, #32]
   13078:	mov	r3, #1
   1307c:	str	r3, [sp, #48]	; 0x30
   13080:	mov	fp, #0
   13084:	b	12f08 <__assert_fail@plt+0x1e04>
   13088:	ldr	r3, [sp, #32]
   1308c:	str	r3, [sp, #48]	; 0x30
   13090:	mov	r3, #1
   13094:	str	r3, [sp, #60]	; 0x3c
   13098:	ldr	r3, [pc, #3660]	; 13eec <__assert_fail@plt+0x2de8>
   1309c:	str	r3, [sp, #72]	; 0x48
   130a0:	mov	fp, #0
   130a4:	b	12f08 <__assert_fail@plt+0x1e04>
   130a8:	mov	r3, #1
   130ac:	str	r3, [sp, #48]	; 0x30
   130b0:	str	r3, [sp, #60]	; 0x3c
   130b4:	ldr	r3, [pc, #3632]	; 13eec <__assert_fail@plt+0x2de8>
   130b8:	str	r3, [sp, #72]	; 0x48
   130bc:	mov	fp, #1
   130c0:	b	12f08 <__assert_fail@plt+0x1e04>
   130c4:	mov	r3, #1
   130c8:	str	r3, [sp, #60]	; 0x3c
   130cc:	ldr	r3, [pc, #3600]	; 13ee4 <__assert_fail@plt+0x2de0>
   130d0:	str	r3, [sp, #72]	; 0x48
   130d4:	mov	fp, #0
   130d8:	mov	sl, #2
   130dc:	b	12f08 <__assert_fail@plt+0x1e04>
   130e0:	mov	r3, #0
   130e4:	str	r3, [sp, #32]
   130e8:	mov	r3, #1
   130ec:	str	r3, [sp, #60]	; 0x3c
   130f0:	ldr	r3, [pc, #3564]	; 13ee4 <__assert_fail@plt+0x2de0>
   130f4:	str	r3, [sp, #72]	; 0x48
   130f8:	mov	fp, #1
   130fc:	mov	sl, #2
   13100:	b	12f08 <__assert_fail@plt+0x1e04>
   13104:	mov	r3, #0
   13108:	str	r3, [sp, #56]	; 0x38
   1310c:	ldr	r3, [sp, #52]	; 0x34
   13110:	add	r2, r3, r6
   13114:	str	r2, [sp, #64]	; 0x40
   13118:	ldrb	r4, [r3, r6]
   1311c:	cmp	r4, #126	; 0x7e
   13120:	ldrls	pc, [pc, r4, lsl #2]
   13124:	b	13960 <__assert_fail@plt+0x285c>
   13128:	andeq	r3, r1, r0, asr #6
   1312c:	andeq	r3, r1, r0, ror #18
   13130:	andeq	r3, r1, r0, ror #18
   13134:	andeq	r3, r1, r0, ror #18
   13138:	andeq	r3, r1, r0, ror #18
   1313c:	andeq	r3, r1, r0, ror #18
   13140:	andeq	r3, r1, r0, ror #18
   13144:	muleq	r1, ip, r6
   13148:	andeq	r3, r1, r8, lsr r3
   1314c:	andeq	r3, r1, r4, asr r6
   13150:	andeq	r3, r1, ip, asr #12
   13154:			; <UNDEFINED> instruction: 0x000135bc
   13158:			; <UNDEFINED> instruction: 0x000135b4
   1315c:	andeq	r3, r1, r0, lsr r3
   13160:	andeq	r3, r1, r0, ror #18
   13164:	andeq	r3, r1, r0, ror #18
   13168:	andeq	r3, r1, r0, ror #18
   1316c:	andeq	r3, r1, r0, ror #18
   13170:	andeq	r3, r1, r0, ror #18
   13174:	andeq	r3, r1, r0, ror #18
   13178:	andeq	r3, r1, r0, ror #18
   1317c:	andeq	r3, r1, r0, ror #18
   13180:	andeq	r3, r1, r0, ror #18
   13184:	andeq	r3, r1, r0, ror #18
   13188:	andeq	r3, r1, r0, ror #18
   1318c:	andeq	r3, r1, r0, ror #18
   13190:	andeq	r3, r1, r0, ror #18
   13194:	andeq	r3, r1, r0, ror #18
   13198:	andeq	r3, r1, r0, ror #18
   1319c:	andeq	r3, r1, r0, ror #18
   131a0:	andeq	r3, r1, r0, ror #18
   131a4:	andeq	r3, r1, r0, ror #18
   131a8:	strdeq	r3, [r1], -r0
   131ac:	andeq	r3, r1, ip, ror #13
   131b0:	andeq	r3, r1, ip, ror #13
   131b4:	andeq	r3, r1, r4, asr #13
   131b8:	andeq	r3, r1, ip, ror #13
   131bc:	andeq	r3, r1, r4, lsr sp
   131c0:	andeq	r3, r1, ip, ror #13
   131c4:	andeq	r3, r1, r4, asr #17
   131c8:	andeq	r3, r1, ip, ror #13
   131cc:	andeq	r3, r1, ip, ror #13
   131d0:	andeq	r3, r1, ip, ror #13
   131d4:	andeq	r3, r1, r4, lsr sp
   131d8:	andeq	r3, r1, r4, lsr sp
   131dc:	andeq	r3, r1, r4, lsr sp
   131e0:	andeq	r3, r1, r4, lsr sp
   131e4:	andeq	r3, r1, r4, lsr sp
   131e8:	andeq	r3, r1, r4, lsr sp
   131ec:	andeq	r3, r1, r4, lsr sp
   131f0:	andeq	r3, r1, r4, lsr sp
   131f4:	andeq	r3, r1, r4, lsr sp
   131f8:	andeq	r3, r1, r4, lsr sp
   131fc:	andeq	r3, r1, r4, lsr sp
   13200:	andeq	r3, r1, r4, lsr sp
   13204:	andeq	r3, r1, r4, lsr sp
   13208:	andeq	r3, r1, r4, lsr sp
   1320c:	andeq	r3, r1, r4, lsr sp
   13210:	andeq	r3, r1, r4, lsr sp
   13214:	andeq	r3, r1, ip, ror #13
   13218:	andeq	r3, r1, ip, ror #13
   1321c:	andeq	r3, r1, ip, ror #13
   13220:	andeq	r3, r1, ip, ror #13
   13224:	andeq	r3, r1, r8, asr #8
   13228:	andeq	r3, r1, r0, ror #18
   1322c:	andeq	r3, r1, r4, lsr sp
   13230:	andeq	r3, r1, r4, lsr sp
   13234:	andeq	r3, r1, r4, lsr sp
   13238:	andeq	r3, r1, r4, lsr sp
   1323c:	andeq	r3, r1, r4, lsr sp
   13240:	andeq	r3, r1, r4, lsr sp
   13244:	andeq	r3, r1, r4, lsr sp
   13248:	andeq	r3, r1, r4, lsr sp
   1324c:	andeq	r3, r1, r4, lsr sp
   13250:	andeq	r3, r1, r4, lsr sp
   13254:	andeq	r3, r1, r4, lsr sp
   13258:	andeq	r3, r1, r4, lsr sp
   1325c:	andeq	r3, r1, r4, lsr sp
   13260:	andeq	r3, r1, r4, lsr sp
   13264:	andeq	r3, r1, r4, lsr sp
   13268:	andeq	r3, r1, r4, lsr sp
   1326c:	andeq	r3, r1, r4, lsr sp
   13270:	andeq	r3, r1, r4, lsr sp
   13274:	andeq	r3, r1, r4, lsr sp
   13278:	andeq	r3, r1, r4, lsr sp
   1327c:	andeq	r3, r1, r4, lsr sp
   13280:	andeq	r3, r1, r4, lsr sp
   13284:	andeq	r3, r1, r4, lsr sp
   13288:	andeq	r3, r1, r4, lsr sp
   1328c:	andeq	r3, r1, r4, lsr sp
   13290:	andeq	r3, r1, r4, lsr sp
   13294:	andeq	r3, r1, ip, ror #13
   13298:	andeq	r3, r1, r4, asr #11
   1329c:	andeq	r3, r1, r4, lsr sp
   132a0:	andeq	r3, r1, ip, ror #13
   132a4:	andeq	r3, r1, r4, lsr sp
   132a8:	andeq	r3, r1, ip, ror #13
   132ac:	andeq	r3, r1, r4, lsr sp
   132b0:	andeq	r3, r1, r4, lsr sp
   132b4:	andeq	r3, r1, r4, lsr sp
   132b8:	andeq	r3, r1, r4, lsr sp
   132bc:	andeq	r3, r1, r4, lsr sp
   132c0:	andeq	r3, r1, r4, lsr sp
   132c4:	andeq	r3, r1, r4, lsr sp
   132c8:	andeq	r3, r1, r4, lsr sp
   132cc:	andeq	r3, r1, r4, lsr sp
   132d0:	andeq	r3, r1, r4, lsr sp
   132d4:	andeq	r3, r1, r4, lsr sp
   132d8:	andeq	r3, r1, r4, lsr sp
   132dc:	andeq	r3, r1, r4, lsr sp
   132e0:	andeq	r3, r1, r4, lsr sp
   132e4:	andeq	r3, r1, r4, lsr sp
   132e8:	andeq	r3, r1, r4, lsr sp
   132ec:	andeq	r3, r1, r4, lsr sp
   132f0:	andeq	r3, r1, r4, lsr sp
   132f4:	andeq	r3, r1, r4, lsr sp
   132f8:	andeq	r3, r1, r4, lsr sp
   132fc:	andeq	r3, r1, r4, lsr sp
   13300:	andeq	r3, r1, r4, lsr sp
   13304:	andeq	r3, r1, r4, lsr sp
   13308:	andeq	r3, r1, r4, lsr sp
   1330c:	andeq	r3, r1, r4, lsr sp
   13310:	andeq	r3, r1, r4, lsr sp
   13314:	andeq	r3, r1, r4, lsr #13
   13318:	andeq	r3, r1, ip, ror #13
   1331c:	andeq	r3, r1, r4, lsr #13
   13320:	andeq	r3, r1, r4, asr #13
   13324:	mov	r3, #0
   13328:	str	r3, [sp, #56]	; 0x38
   1332c:	b	1310c <__assert_fail@plt+0x2008>
   13330:	mov	r3, #114	; 0x72
   13334:	b	13658 <__assert_fail@plt+0x2554>
   13338:	mov	r3, #98	; 0x62
   1333c:	b	13670 <__assert_fail@plt+0x256c>
   13340:	ldr	r3, [sp, #48]	; 0x30
   13344:	cmp	r3, #0
   13348:	beq	13430 <__assert_fail@plt+0x232c>
   1334c:	ldr	r3, [sp, #32]
   13350:	cmp	r3, #0
   13354:	bne	13eb8 <__assert_fail@plt+0x2db4>
   13358:	ldr	r3, [sp, #44]	; 0x2c
   1335c:	eor	r3, r3, #1
   13360:	cmp	sl, #2
   13364:	movne	r3, #0
   13368:	andeq	r3, r3, #1
   1336c:	cmp	r3, #0
   13370:	moveq	r2, fp
   13374:	beq	133b8 <__assert_fail@plt+0x22b4>
   13378:	cmp	r7, fp
   1337c:	ldrhi	r2, [sp, #36]	; 0x24
   13380:	movhi	r1, #39	; 0x27
   13384:	strbhi	r1, [r2, fp]
   13388:	add	r2, fp, #1
   1338c:	cmp	r7, r2
   13390:	ldrhi	r1, [sp, #36]	; 0x24
   13394:	movhi	r0, #36	; 0x24
   13398:	strbhi	r0, [r1, r2]
   1339c:	add	r2, fp, #2
   133a0:	cmp	r7, r2
   133a4:	ldrhi	r1, [sp, #36]	; 0x24
   133a8:	movhi	r0, #39	; 0x27
   133ac:	strbhi	r0, [r1, r2]
   133b0:	add	r2, fp, #3
   133b4:	str	r3, [sp, #44]	; 0x2c
   133b8:	cmp	r7, r2
   133bc:	ldrhi	r3, [sp, #36]	; 0x24
   133c0:	movhi	r1, #92	; 0x5c
   133c4:	strbhi	r1, [r3, r2]
   133c8:	add	fp, r2, #1
   133cc:	cmp	r5, #0
   133d0:	beq	13d3c <__assert_fail@plt+0x2c38>
   133d4:	add	r3, r6, #1
   133d8:	ldr	r1, [sp, #28]
   133dc:	cmp	r1, r3
   133e0:	bls	13d4c <__assert_fail@plt+0x2c48>
   133e4:	ldr	r1, [sp, #52]	; 0x34
   133e8:	ldrb	r3, [r1, r3]
   133ec:	sub	r3, r3, #48	; 0x30
   133f0:	uxtb	r3, r3
   133f4:	cmp	r3, #9
   133f8:	bhi	13d58 <__assert_fail@plt+0x2c54>
   133fc:	cmp	r7, fp
   13400:	movhi	r3, #48	; 0x30
   13404:	ldrhi	r1, [sp, #36]	; 0x24
   13408:	strbhi	r3, [r1, fp]
   1340c:	add	r3, r2, #2
   13410:	cmp	r7, r3
   13414:	movhi	r1, #48	; 0x30
   13418:	ldrhi	r0, [sp, #36]	; 0x24
   1341c:	strbhi	r1, [r0, r3]
   13420:	add	fp, r2, #3
   13424:	ldr	r8, [sp, #32]
   13428:	mov	r4, #48	; 0x30
   1342c:	b	13708 <__assert_fail@plt+0x2604>
   13430:	ldr	r3, [sp, #156]	; 0x9c
   13434:	tst	r3, #1
   13438:	bne	137fc <__assert_fail@plt+0x26f8>
   1343c:	ldr	r5, [sp, #48]	; 0x30
   13440:	mov	r8, r5
   13444:	b	13708 <__assert_fail@plt+0x2604>
   13448:	cmp	sl, #2
   1344c:	beq	13464 <__assert_fail@plt+0x2360>
   13450:	cmp	sl, #5
   13454:	beq	1347c <__assert_fail@plt+0x2378>
   13458:	mov	r8, #0
   1345c:	mov	r5, r8
   13460:	b	13708 <__assert_fail@plt+0x2604>
   13464:	ldr	r3, [sp, #32]
   13468:	cmp	r3, #0
   1346c:	bne	13ecc <__assert_fail@plt+0x2dc8>
   13470:	mov	r8, r3
   13474:	mov	r5, r3
   13478:	b	13708 <__assert_fail@plt+0x2604>
   1347c:	ldr	r3, [sp, #156]	; 0x9c
   13480:	tst	r3, #4
   13484:	beq	13d64 <__assert_fail@plt+0x2c60>
   13488:	add	r3, r6, #2
   1348c:	ldr	r2, [sp, #28]
   13490:	cmp	r2, r3
   13494:	bls	13d70 <__assert_fail@plt+0x2c6c>
   13498:	ldr	r2, [sp, #52]	; 0x34
   1349c:	add	r2, r2, r6
   134a0:	ldrb	r2, [r2, #1]
   134a4:	cmp	r2, #63	; 0x3f
   134a8:	movne	r8, #0
   134ac:	movne	r5, r8
   134b0:	bne	13708 <__assert_fail@plt+0x2604>
   134b4:	ldr	r2, [sp, #52]	; 0x34
   134b8:	ldrb	r2, [r2, r3]
   134bc:	sub	r1, r2, #33	; 0x21
   134c0:	cmp	r1, #29
   134c4:	ldrls	pc, [pc, r1, lsl #2]
   134c8:	b	13d7c <__assert_fail@plt+0x2c78>
   134cc:	andeq	r3, r1, r4, asr #10
   134d0:	andeq	r3, r1, ip, ror sp
   134d4:	andeq	r3, r1, ip, ror sp
   134d8:	andeq	r3, r1, ip, ror sp
   134dc:	andeq	r3, r1, ip, ror sp
   134e0:	andeq	r3, r1, ip, ror sp
   134e4:	andeq	r3, r1, r4, asr #10
   134e8:	andeq	r3, r1, r4, asr #10
   134ec:	andeq	r3, r1, r4, asr #10
   134f0:	andeq	r3, r1, ip, ror sp
   134f4:	andeq	r3, r1, ip, ror sp
   134f8:	andeq	r3, r1, ip, ror sp
   134fc:	andeq	r3, r1, r4, asr #10
   13500:	andeq	r3, r1, ip, ror sp
   13504:	andeq	r3, r1, r4, asr #10
   13508:	andeq	r3, r1, ip, ror sp
   1350c:	andeq	r3, r1, ip, ror sp
   13510:	andeq	r3, r1, ip, ror sp
   13514:	andeq	r3, r1, ip, ror sp
   13518:	andeq	r3, r1, ip, ror sp
   1351c:	andeq	r3, r1, ip, ror sp
   13520:	andeq	r3, r1, ip, ror sp
   13524:	andeq	r3, r1, ip, ror sp
   13528:	andeq	r3, r1, ip, ror sp
   1352c:	andeq	r3, r1, ip, ror sp
   13530:	andeq	r3, r1, ip, ror sp
   13534:	andeq	r3, r1, ip, ror sp
   13538:	andeq	r3, r1, r4, asr #10
   1353c:	andeq	r3, r1, r4, asr #10
   13540:	andeq	r3, r1, r4, asr #10
   13544:	ldr	r1, [sp, #32]
   13548:	cmp	r1, #0
   1354c:	bne	13f8c <__assert_fail@plt+0x2e88>
   13550:	cmp	r7, fp
   13554:	movhi	r1, #63	; 0x3f
   13558:	ldrhi	r0, [sp, #36]	; 0x24
   1355c:	strbhi	r1, [r0, fp]
   13560:	add	r1, fp, #1
   13564:	cmp	r7, r1
   13568:	ldrhi	r0, [sp, #36]	; 0x24
   1356c:	movhi	ip, #34	; 0x22
   13570:	strbhi	ip, [r0, r1]
   13574:	add	r1, fp, #2
   13578:	cmp	r7, r1
   1357c:	ldrhi	r0, [sp, #36]	; 0x24
   13580:	movhi	ip, #34	; 0x22
   13584:	strbhi	ip, [r0, r1]
   13588:	add	r1, fp, #3
   1358c:	cmp	r7, r1
   13590:	movhi	r0, #63	; 0x3f
   13594:	ldrhi	ip, [sp, #36]	; 0x24
   13598:	strbhi	r0, [ip, r1]
   1359c:	add	fp, fp, #4
   135a0:	ldr	r5, [sp, #32]
   135a4:	mov	r8, r5
   135a8:	mov	r4, r2
   135ac:	mov	r6, r3
   135b0:	b	13708 <__assert_fail@plt+0x2604>
   135b4:	mov	r3, #102	; 0x66
   135b8:	b	13670 <__assert_fail@plt+0x256c>
   135bc:	mov	r3, #118	; 0x76
   135c0:	b	13670 <__assert_fail@plt+0x256c>
   135c4:	cmp	sl, #2
   135c8:	beq	13634 <__assert_fail@plt+0x2530>
   135cc:	ldr	r3, [sp, #48]	; 0x30
   135d0:	ldr	r2, [sp, #32]
   135d4:	and	r3, r3, r2
   135d8:	tst	r9, r3
   135dc:	moveq	r3, r4
   135e0:	beq	13670 <__assert_fail@plt+0x256c>
   135e4:	mov	r8, #0
   135e8:	mov	r5, r8
   135ec:	eor	r5, r5, #1
   135f0:	ldr	r3, [sp, #44]	; 0x2c
   135f4:	and	r5, r5, r3
   135f8:	tst	r5, #255	; 0xff
   135fc:	beq	137dc <__assert_fail@plt+0x26d8>
   13600:	cmp	r7, fp
   13604:	ldrhi	r3, [sp, #36]	; 0x24
   13608:	movhi	r2, #39	; 0x27
   1360c:	strbhi	r2, [r3, fp]
   13610:	add	r3, fp, #1
   13614:	cmp	r7, r3
   13618:	ldrhi	r2, [sp, #36]	; 0x24
   1361c:	movhi	r1, #39	; 0x27
   13620:	strbhi	r1, [r2, r3]
   13624:	add	fp, fp, #2
   13628:	mov	r3, #0
   1362c:	str	r3, [sp, #44]	; 0x2c
   13630:	b	137dc <__assert_fail@plt+0x26d8>
   13634:	ldr	r3, [sp, #32]
   13638:	cmp	r3, #0
   1363c:	bne	13ed8 <__assert_fail@plt+0x2dd4>
   13640:	mov	r8, r3
   13644:	mov	r5, r3
   13648:	b	135ec <__assert_fail@plt+0x24e8>
   1364c:	mov	r3, #110	; 0x6e
   13650:	b	13658 <__assert_fail@plt+0x2554>
   13654:	mov	r3, #116	; 0x74
   13658:	ldr	r2, [sp, #32]
   1365c:	cmp	sl, #2
   13660:	movne	r2, #0
   13664:	andeq	r2, r2, #1
   13668:	cmp	r2, #0
   1366c:	bne	13690 <__assert_fail@plt+0x258c>
   13670:	ldr	r2, [sp, #48]	; 0x30
   13674:	cmp	r2, #0
   13678:	moveq	r8, r2
   1367c:	moveq	r5, r2
   13680:	beq	13708 <__assert_fail@plt+0x2604>
   13684:	mov	r4, r3
   13688:	mov	r8, #0
   1368c:	b	13760 <__assert_fail@plt+0x265c>
   13690:	mov	r8, sl
   13694:	mov	sl, r7
   13698:	b	13f04 <__assert_fail@plt+0x2e00>
   1369c:	mov	r3, #97	; 0x61
   136a0:	b	13670 <__assert_fail@plt+0x256c>
   136a4:	ldr	r3, [sp, #28]
   136a8:	cmn	r3, #1
   136ac:	beq	136d8 <__assert_fail@plt+0x25d4>
   136b0:	ldr	r3, [sp, #28]
   136b4:	subs	r3, r3, #1
   136b8:	movne	r3, #1
   136bc:	cmp	r3, #0
   136c0:	bne	13d88 <__assert_fail@plt+0x2c84>
   136c4:	cmp	r6, #0
   136c8:	beq	136f0 <__assert_fail@plt+0x25ec>
   136cc:	mov	r8, #0
   136d0:	mov	r5, r8
   136d4:	b	13708 <__assert_fail@plt+0x2604>
   136d8:	ldr	r3, [sp, #52]	; 0x34
   136dc:	ldrb	r3, [r3, #1]
   136e0:	adds	r3, r3, #0
   136e4:	movne	r3, #1
   136e8:	b	136bc <__assert_fail@plt+0x25b8>
   136ec:	mov	r8, #0
   136f0:	ldr	r5, [sp, #32]
   136f4:	cmp	sl, #2
   136f8:	movne	r5, #0
   136fc:	andeq	r5, r5, #1
   13700:	cmp	r5, #0
   13704:	bne	138b8 <__assert_fail@plt+0x27b4>
   13708:	ldr	r3, [sp, #68]	; 0x44
   1370c:	cmp	sl, #2
   13710:	orreq	r3, r3, #1
   13714:	eor	r3, r3, #1
   13718:	ldr	r2, [sp, #32]
   1371c:	orr	r3, r2, r3
   13720:	tst	r3, #255	; 0xff
   13724:	beq	13754 <__assert_fail@plt+0x2650>
   13728:	ldr	r3, [sp, #160]	; 0xa0
   1372c:	cmp	r3, #0
   13730:	beq	13754 <__assert_fail@plt+0x2650>
   13734:	lsr	r2, r4, #5
   13738:	uxtb	r2, r2
   1373c:	and	r3, r4, #31
   13740:	ldr	r1, [sp, #160]	; 0xa0
   13744:	ldr	r2, [r1, r2, lsl #2]
   13748:	lsr	r3, r2, r3
   1374c:	tst	r3, #1
   13750:	bne	13760 <__assert_fail@plt+0x265c>
   13754:	ldr	r3, [sp, #56]	; 0x38
   13758:	cmp	r3, #0
   1375c:	beq	135ec <__assert_fail@plt+0x24e8>
   13760:	ldr	r3, [sp, #32]
   13764:	cmp	r3, #0
   13768:	bne	13f74 <__assert_fail@plt+0x2e70>
   1376c:	ldr	r3, [sp, #44]	; 0x2c
   13770:	eor	r3, r3, #1
   13774:	cmp	sl, #2
   13778:	movne	r3, #0
   1377c:	andeq	r3, r3, #1
   13780:	cmp	r3, #0
   13784:	beq	137c8 <__assert_fail@plt+0x26c4>
   13788:	cmp	r7, fp
   1378c:	ldrhi	r2, [sp, #36]	; 0x24
   13790:	movhi	r1, #39	; 0x27
   13794:	strbhi	r1, [r2, fp]
   13798:	add	r2, fp, #1
   1379c:	cmp	r7, r2
   137a0:	ldrhi	r1, [sp, #36]	; 0x24
   137a4:	movhi	r0, #36	; 0x24
   137a8:	strbhi	r0, [r1, r2]
   137ac:	add	r2, fp, #2
   137b0:	cmp	r7, r2
   137b4:	ldrhi	r1, [sp, #36]	; 0x24
   137b8:	movhi	r0, #39	; 0x27
   137bc:	strbhi	r0, [r1, r2]
   137c0:	add	fp, fp, #3
   137c4:	str	r3, [sp, #44]	; 0x2c
   137c8:	cmp	r7, fp
   137cc:	ldrhi	r3, [sp, #36]	; 0x24
   137d0:	movhi	r2, #92	; 0x5c
   137d4:	strbhi	r2, [r3, fp]
   137d8:	add	fp, fp, #1
   137dc:	cmp	fp, r7
   137e0:	ldrcc	r3, [sp, #36]	; 0x24
   137e4:	strbcc	r4, [r3, fp]
   137e8:	add	fp, fp, #1
   137ec:	ldr	r3, [sp, #40]	; 0x28
   137f0:	cmp	r8, #0
   137f4:	moveq	r3, #0
   137f8:	str	r3, [sp, #40]	; 0x28
   137fc:	add	r6, r6, #1
   13800:	ldr	r3, [sp, #28]
   13804:	cmn	r3, #1
   13808:	beq	13d94 <__assert_fail@plt+0x2c90>
   1380c:	ldr	r3, [sp, #28]
   13810:	subs	r8, r3, r6
   13814:	movne	r8, #1
   13818:	cmp	r8, #0
   1381c:	beq	13da8 <__assert_fail@plt+0x2ca4>
   13820:	ldr	r5, [sp, #48]	; 0x30
   13824:	cmp	sl, #2
   13828:	moveq	r5, #0
   1382c:	andne	r5, r5, #1
   13830:	ldr	r3, [sp, #60]	; 0x3c
   13834:	adds	r9, r3, #0
   13838:	movne	r9, #1
   1383c:	ands	r2, r5, r9
   13840:	str	r2, [sp, #56]	; 0x38
   13844:	beq	1310c <__assert_fail@plt+0x2008>
   13848:	add	r4, r6, r3
   1384c:	ldr	r2, [sp, #28]
   13850:	cmp	r3, #1
   13854:	movls	r3, #0
   13858:	movhi	r3, #1
   1385c:	cmn	r2, #1
   13860:	movne	r3, #0
   13864:	cmp	r3, #0
   13868:	beq	13878 <__assert_fail@plt+0x2774>
   1386c:	ldr	r0, [sp, #52]	; 0x34
   13870:	bl	10fd8 <strlen@plt>
   13874:	str	r0, [sp, #28]
   13878:	ldr	r3, [sp, #28]
   1387c:	cmp	r3, r4
   13880:	bcc	13104 <__assert_fail@plt+0x2000>
   13884:	ldr	r2, [sp, #60]	; 0x3c
   13888:	ldr	r1, [sp, #72]	; 0x48
   1388c:	ldr	r3, [sp, #52]	; 0x34
   13890:	add	r0, r3, r6
   13894:	bl	10edc <memcmp@plt>
   13898:	cmp	r0, #0
   1389c:	bne	13324 <__assert_fail@plt+0x2220>
   138a0:	ldr	r3, [sp, #32]
   138a4:	cmp	r3, #0
   138a8:	beq	1310c <__assert_fail@plt+0x2008>
   138ac:	mov	r8, sl
   138b0:	mov	sl, r7
   138b4:	b	13f04 <__assert_fail@plt+0x2e00>
   138b8:	mov	r8, sl
   138bc:	mov	sl, r7
   138c0:	b	13f04 <__assert_fail@plt+0x2e00>
   138c4:	cmp	sl, #2
   138c8:	strne	r8, [sp, #80]	; 0x50
   138cc:	movne	r5, #0
   138d0:	bne	13708 <__assert_fail@plt+0x2604>
   138d4:	ldr	r3, [sp, #32]
   138d8:	cmp	r3, #0
   138dc:	bne	13ef0 <__assert_fail@plt+0x2dec>
   138e0:	ldr	r2, [sp, #76]	; 0x4c
   138e4:	adds	r3, r7, #0
   138e8:	movne	r3, #1
   138ec:	cmp	r2, #0
   138f0:	movne	r3, #0
   138f4:	cmp	r3, #0
   138f8:	movne	r3, #0
   138fc:	bne	1392c <__assert_fail@plt+0x2828>
   13900:	cmp	r7, fp
   13904:	ldrhi	r3, [sp, #36]	; 0x24
   13908:	movhi	r2, #39	; 0x27
   1390c:	strbhi	r2, [r3, fp]
   13910:	add	r3, fp, #1
   13914:	cmp	r7, r3
   13918:	ldrhi	r2, [sp, #36]	; 0x24
   1391c:	movhi	r1, #92	; 0x5c
   13920:	strbhi	r1, [r2, r3]
   13924:	mov	r3, r7
   13928:	ldr	r7, [sp, #76]	; 0x4c
   1392c:	add	r2, fp, #2
   13930:	cmp	r2, r3
   13934:	ldrcc	r1, [sp, #36]	; 0x24
   13938:	movcc	r0, #39	; 0x27
   1393c:	strbcc	r0, [r1, r2]
   13940:	add	fp, fp, #3
   13944:	ldr	r2, [sp, #32]
   13948:	mov	r5, r2
   1394c:	str	r8, [sp, #80]	; 0x50
   13950:	str	r2, [sp, #44]	; 0x2c
   13954:	str	r7, [sp, #76]	; 0x4c
   13958:	mov	r7, r3
   1395c:	b	13708 <__assert_fail@plt+0x2604>
   13960:	ldr	r5, [sp, #84]	; 0x54
   13964:	cmp	r5, #1
   13968:	beq	13998 <__assert_fail@plt+0x2894>
   1396c:	mov	r3, #0
   13970:	str	r3, [sp, #104]	; 0x68
   13974:	str	r3, [sp, #108]	; 0x6c
   13978:	ldr	r3, [sp, #28]
   1397c:	cmn	r3, #1
   13980:	beq	139cc <__assert_fail@plt+0x28c8>
   13984:	mov	r3, #0
   13988:	str	r4, [sp, #88]	; 0x58
   1398c:	str	fp, [sp, #92]	; 0x5c
   13990:	mov	fp, r3
   13994:	b	13af4 <__assert_fail@plt+0x29f0>
   13998:	bl	10fc0 <__ctype_b_loc@plt>
   1399c:	ldr	r2, [r0]
   139a0:	lsl	r3, r4, #1
   139a4:	ldrh	r8, [r2, r3]
   139a8:	lsr	r8, r8, #14
   139ac:	and	r8, r8, #1
   139b0:	mov	r2, r5
   139b4:	eor	r5, r8, #1
   139b8:	ldr	r3, [sp, #48]	; 0x30
   139bc:	and	r5, r5, r3
   139c0:	ands	r5, r5, #255	; 0xff
   139c4:	beq	13708 <__assert_fail@plt+0x2604>
   139c8:	b	13b8c <__assert_fail@plt+0x2a88>
   139cc:	ldr	r0, [sp, #52]	; 0x34
   139d0:	bl	10fd8 <strlen@plt>
   139d4:	str	r0, [sp, #28]
   139d8:	b	13984 <__assert_fail@plt+0x2880>
   139dc:	mov	r2, fp
   139e0:	mov	r1, r4
   139e4:	ldr	r4, [sp, #88]	; 0x58
   139e8:	ldr	fp, [sp, #92]	; 0x5c
   139ec:	ldr	r0, [sp, #28]
   139f0:	cmp	r0, r5
   139f4:	bls	13bc0 <__assert_fail@plt+0x2abc>
   139f8:	ldrb	r3, [r1]
   139fc:	cmp	r3, #0
   13a00:	beq	13bc8 <__assert_fail@plt+0x2ac4>
   13a04:	mov	r3, r1
   13a08:	add	r2, r2, #1
   13a0c:	add	r1, r6, r2
   13a10:	cmp	r0, r1
   13a14:	bls	13bd0 <__assert_fail@plt+0x2acc>
   13a18:	ldrb	r1, [r3, #1]!
   13a1c:	cmp	r1, #0
   13a20:	bne	13a08 <__assert_fail@plt+0x2904>
   13a24:	mov	r8, #0
   13a28:	b	13b84 <__assert_fail@plt+0x2a80>
   13a2c:	cmp	r4, r5
   13a30:	beq	13ad0 <__assert_fail@plt+0x29cc>
   13a34:	ldrb	r3, [r4, #1]!
   13a38:	sub	r3, r3, #91	; 0x5b
   13a3c:	cmp	r3, #33	; 0x21
   13a40:	ldrls	pc, [pc, r3, lsl #2]
   13a44:	b	13a2c <__assert_fail@plt+0x2928>
   13a48:	strdeq	r3, [r1], -ip
   13a4c:	strdeq	r3, [r1], -ip
   13a50:	andeq	r3, r1, ip, lsr #20
   13a54:	strdeq	r3, [r1], -ip
   13a58:	andeq	r3, r1, ip, lsr #20
   13a5c:	strdeq	r3, [r1], -ip
   13a60:	andeq	r3, r1, ip, lsr #20
   13a64:	andeq	r3, r1, ip, lsr #20
   13a68:	andeq	r3, r1, ip, lsr #20
   13a6c:	andeq	r3, r1, ip, lsr #20
   13a70:	andeq	r3, r1, ip, lsr #20
   13a74:	andeq	r3, r1, ip, lsr #20
   13a78:	andeq	r3, r1, ip, lsr #20
   13a7c:	andeq	r3, r1, ip, lsr #20
   13a80:	andeq	r3, r1, ip, lsr #20
   13a84:	andeq	r3, r1, ip, lsr #20
   13a88:	andeq	r3, r1, ip, lsr #20
   13a8c:	andeq	r3, r1, ip, lsr #20
   13a90:	andeq	r3, r1, ip, lsr #20
   13a94:	andeq	r3, r1, ip, lsr #20
   13a98:	andeq	r3, r1, ip, lsr #20
   13a9c:	andeq	r3, r1, ip, lsr #20
   13aa0:	andeq	r3, r1, ip, lsr #20
   13aa4:	andeq	r3, r1, ip, lsr #20
   13aa8:	andeq	r3, r1, ip, lsr #20
   13aac:	andeq	r3, r1, ip, lsr #20
   13ab0:	andeq	r3, r1, ip, lsr #20
   13ab4:	andeq	r3, r1, ip, lsr #20
   13ab8:	andeq	r3, r1, ip, lsr #20
   13abc:	andeq	r3, r1, ip, lsr #20
   13ac0:	andeq	r3, r1, ip, lsr #20
   13ac4:	andeq	r3, r1, ip, lsr #20
   13ac8:	andeq	r3, r1, ip, lsr #20
   13acc:	strdeq	r3, [r1], -ip
   13ad0:	ldr	r0, [sp, #100]	; 0x64
   13ad4:	bl	10f18 <iswprint@plt>
   13ad8:	cmp	r0, #0
   13adc:	moveq	r8, #0
   13ae0:	add	fp, fp, r9
   13ae4:	add	r0, sp, #104	; 0x68
   13ae8:	bl	10ed0 <mbsinit@plt>
   13aec:	cmp	r0, #0
   13af0:	bne	13b64 <__assert_fail@plt+0x2a60>
   13af4:	add	r5, r6, fp
   13af8:	ldr	r3, [sp, #52]	; 0x34
   13afc:	add	r4, r3, r5
   13b00:	add	r3, sp, #104	; 0x68
   13b04:	ldr	r2, [sp, #28]
   13b08:	sub	r2, r2, r5
   13b0c:	mov	r1, r4
   13b10:	add	r0, sp, #100	; 0x64
   13b14:	bl	15fd8 <__assert_fail@plt+0x4ed4>
   13b18:	subs	r9, r0, #0
   13b1c:	beq	13bd8 <__assert_fail@plt+0x2ad4>
   13b20:	cmn	r9, #1
   13b24:	beq	13b74 <__assert_fail@plt+0x2a70>
   13b28:	cmn	r9, #2
   13b2c:	beq	139dc <__assert_fail@plt+0x28d8>
   13b30:	ldr	r3, [sp, #32]
   13b34:	cmp	sl, #2
   13b38:	movne	r3, #0
   13b3c:	andeq	r3, r3, #1
   13b40:	cmp	r3, #0
   13b44:	beq	13ad0 <__assert_fail@plt+0x29cc>
   13b48:	cmp	r9, #1
   13b4c:	bls	13ad0 <__assert_fail@plt+0x29cc>
   13b50:	sub	r3, r9, #1
   13b54:	add	r5, r3, r5
   13b58:	ldr	r3, [sp, #52]	; 0x34
   13b5c:	add	r5, r3, r5
   13b60:	b	13a34 <__assert_fail@plt+0x2930>
   13b64:	ldr	r4, [sp, #88]	; 0x58
   13b68:	mov	r2, fp
   13b6c:	ldr	fp, [sp, #92]	; 0x5c
   13b70:	b	13b84 <__assert_fail@plt+0x2a80>
   13b74:	ldr	r4, [sp, #88]	; 0x58
   13b78:	mov	r2, fp
   13b7c:	ldr	fp, [sp, #92]	; 0x5c
   13b80:	mov	r8, #0
   13b84:	cmp	r2, #1
   13b88:	bls	139b4 <__assert_fail@plt+0x28b0>
   13b8c:	add	r1, r6, r2
   13b90:	ldr	ip, [sp, #64]	; 0x40
   13b94:	mov	r5, #0
   13b98:	eor	r3, r8, #1
   13b9c:	ldr	r2, [sp, #48]	; 0x30
   13ba0:	and	r3, r3, r2
   13ba4:	uxtb	r3, r3
   13ba8:	ldr	r9, [sp, #32]
   13bac:	ldr	lr, [sp, #44]	; 0x2c
   13bb0:	ldr	r2, [sp, #56]	; 0x38
   13bb4:	str	r8, [sp, #56]	; 0x38
   13bb8:	ldr	r0, [sp, #36]	; 0x24
   13bbc:	b	13c58 <__assert_fail@plt+0x2b54>
   13bc0:	mov	r8, #0
   13bc4:	b	13b84 <__assert_fail@plt+0x2a80>
   13bc8:	mov	r8, #0
   13bcc:	b	13b84 <__assert_fail@plt+0x2a80>
   13bd0:	mov	r8, #0
   13bd4:	b	13b84 <__assert_fail@plt+0x2a80>
   13bd8:	ldr	r4, [sp, #88]	; 0x58
   13bdc:	mov	r2, fp
   13be0:	ldr	fp, [sp, #92]	; 0x5c
   13be4:	b	13b84 <__assert_fail@plt+0x2a80>
   13be8:	cmp	r2, #0
   13bec:	beq	13c00 <__assert_fail@plt+0x2afc>
   13bf0:	cmp	r7, fp
   13bf4:	movhi	r2, #92	; 0x5c
   13bf8:	strbhi	r2, [r0, fp]
   13bfc:	add	fp, fp, #1
   13c00:	add	r8, r6, #1
   13c04:	cmp	r1, r8
   13c08:	bls	13d10 <__assert_fail@plt+0x2c0c>
   13c0c:	eor	r2, r5, #1
   13c10:	and	r2, r2, lr
   13c14:	ands	r2, r2, #255	; 0xff
   13c18:	beq	13d2c <__assert_fail@plt+0x2c28>
   13c1c:	cmp	r7, fp
   13c20:	movhi	r2, #39	; 0x27
   13c24:	strbhi	r2, [r0, fp]
   13c28:	add	r2, fp, #1
   13c2c:	cmp	r7, r2
   13c30:	movhi	lr, #39	; 0x27
   13c34:	strbhi	lr, [r0, r2]
   13c38:	add	fp, fp, #2
   13c3c:	mov	r6, r8
   13c40:	mov	r2, r3
   13c44:	mov	lr, r3
   13c48:	cmp	r7, fp
   13c4c:	strbhi	r4, [r0, fp]
   13c50:	add	fp, fp, #1
   13c54:	ldrb	r4, [ip, #1]!
   13c58:	cmp	r3, #0
   13c5c:	beq	13be8 <__assert_fail@plt+0x2ae4>
   13c60:	cmp	r9, #0
   13c64:	bne	13f68 <__assert_fail@plt+0x2e64>
   13c68:	eor	r5, lr, #1
   13c6c:	cmp	sl, #2
   13c70:	movne	r5, #0
   13c74:	andeq	r5, r5, #1
   13c78:	cmp	r5, #0
   13c7c:	beq	13cb4 <__assert_fail@plt+0x2bb0>
   13c80:	cmp	r7, fp
   13c84:	movhi	lr, #39	; 0x27
   13c88:	strbhi	lr, [r0, fp]
   13c8c:	add	lr, fp, #1
   13c90:	cmp	r7, lr
   13c94:	movhi	r8, #36	; 0x24
   13c98:	strbhi	r8, [r0, lr]
   13c9c:	add	lr, fp, #2
   13ca0:	cmp	r7, lr
   13ca4:	movhi	r8, #39	; 0x27
   13ca8:	strbhi	r8, [r0, lr]
   13cac:	add	fp, fp, #3
   13cb0:	mov	lr, r5
   13cb4:	cmp	r7, fp
   13cb8:	movhi	r5, #92	; 0x5c
   13cbc:	strbhi	r5, [r0, fp]
   13cc0:	add	r5, fp, #1
   13cc4:	cmp	r7, r5
   13cc8:	lsrhi	r8, r4, #6
   13ccc:	addhi	r8, r8, #48	; 0x30
   13cd0:	strbhi	r8, [r0, r5]
   13cd4:	add	r8, fp, #2
   13cd8:	cmp	r7, r8
   13cdc:	lsrhi	r5, r4, #3
   13ce0:	andhi	r5, r5, #7
   13ce4:	addhi	r5, r5, #48	; 0x30
   13ce8:	strbhi	r5, [r0, r8]
   13cec:	add	fp, fp, #3
   13cf0:	and	r4, r4, #7
   13cf4:	add	r4, r4, #48	; 0x30
   13cf8:	add	r5, r6, #1
   13cfc:	cmp	r1, r5
   13d00:	bls	13d1c <__assert_fail@plt+0x2c18>
   13d04:	mov	r6, r5
   13d08:	mov	r5, r3
   13d0c:	b	13c48 <__assert_fail@plt+0x2b44>
   13d10:	str	lr, [sp, #44]	; 0x2c
   13d14:	ldr	r8, [sp, #56]	; 0x38
   13d18:	b	135ec <__assert_fail@plt+0x24e8>
   13d1c:	str	lr, [sp, #44]	; 0x2c
   13d20:	ldr	r8, [sp, #56]	; 0x38
   13d24:	mov	r5, r3
   13d28:	b	135ec <__assert_fail@plt+0x24e8>
   13d2c:	mov	r6, r8
   13d30:	b	13c48 <__assert_fail@plt+0x2b44>
   13d34:	mov	r5, #0
   13d38:	b	13708 <__assert_fail@plt+0x2604>
   13d3c:	mov	r8, r5
   13d40:	ldr	r5, [sp, #48]	; 0x30
   13d44:	mov	r4, #48	; 0x30
   13d48:	b	13708 <__assert_fail@plt+0x2604>
   13d4c:	ldr	r8, [sp, #32]
   13d50:	mov	r4, #48	; 0x30
   13d54:	b	13708 <__assert_fail@plt+0x2604>
   13d58:	ldr	r8, [sp, #32]
   13d5c:	mov	r4, #48	; 0x30
   13d60:	b	13708 <__assert_fail@plt+0x2604>
   13d64:	mov	r8, #0
   13d68:	mov	r5, r8
   13d6c:	b	13708 <__assert_fail@plt+0x2604>
   13d70:	mov	r8, #0
   13d74:	mov	r5, r8
   13d78:	b	13708 <__assert_fail@plt+0x2604>
   13d7c:	mov	r8, #0
   13d80:	mov	r5, r8
   13d84:	b	13708 <__assert_fail@plt+0x2604>
   13d88:	mov	r8, #0
   13d8c:	mov	r5, r8
   13d90:	b	13708 <__assert_fail@plt+0x2604>
   13d94:	ldr	r3, [sp, #52]	; 0x34
   13d98:	ldrb	r8, [r3, r6]
   13d9c:	adds	r8, r8, #0
   13da0:	movne	r8, #1
   13da4:	b	13818 <__assert_fail@plt+0x2714>
   13da8:	cmp	sl, #2
   13dac:	movne	r3, #0
   13db0:	moveq	r3, #1
   13db4:	ldr	r1, [sp, #32]
   13db8:	mov	r2, r1
   13dbc:	and	r2, r2, r3
   13dc0:	cmp	fp, #0
   13dc4:	movne	r2, #0
   13dc8:	andeq	r2, r2, #1
   13dcc:	cmp	r2, #0
   13dd0:	bne	13f80 <__assert_fail@plt+0x2e7c>
   13dd4:	eor	r2, r1, #1
   13dd8:	and	r3, r3, r2
   13ddc:	ldr	r1, [sp, #80]	; 0x50
   13de0:	tst	r1, r3
   13de4:	beq	13e5c <__assert_fail@plt+0x2d58>
   13de8:	ldr	r3, [sp, #40]	; 0x28
   13dec:	cmp	r3, #0
   13df0:	bne	13e18 <__assert_fail@plt+0x2d14>
   13df4:	ldr	r1, [sp, #76]	; 0x4c
   13df8:	clz	r3, r7
   13dfc:	lsr	r3, r3, #5
   13e00:	cmp	r1, #0
   13e04:	moveq	r3, #0
   13e08:	cmp	r3, #0
   13e0c:	beq	13e5c <__assert_fail@plt+0x2d58>
   13e10:	ldr	r7, [sp, #76]	; 0x4c
   13e14:	b	12eac <__assert_fail@plt+0x1da8>
   13e18:	ldr	r3, [sp, #168]	; 0xa8
   13e1c:	str	r3, [sp, #16]
   13e20:	ldr	r3, [sp, #164]	; 0xa4
   13e24:	str	r3, [sp, #12]
   13e28:	ldr	r3, [sp, #160]	; 0xa0
   13e2c:	str	r3, [sp, #8]
   13e30:	ldr	r3, [sp, #156]	; 0x9c
   13e34:	str	r3, [sp, #4]
   13e38:	mov	r3, #5
   13e3c:	str	r3, [sp]
   13e40:	ldr	r3, [sp, #28]
   13e44:	ldr	r2, [sp, #52]	; 0x34
   13e48:	ldr	r1, [sp, #76]	; 0x4c
   13e4c:	ldr	r0, [sp, #36]	; 0x24
   13e50:	bl	12e4c <__assert_fail@plt+0x1d48>
   13e54:	mov	fp, r0
   13e58:	b	13f5c <__assert_fail@plt+0x2e58>
   13e5c:	mov	sl, r7
   13e60:	ldr	r3, [sp, #72]	; 0x48
   13e64:	cmp	r3, #0
   13e68:	moveq	r2, #0
   13e6c:	andne	r2, r2, #1
   13e70:	cmp	r2, #0
   13e74:	beq	13ea4 <__assert_fail@plt+0x2da0>
   13e78:	mov	r2, r3
   13e7c:	ldrb	r3, [r3]
   13e80:	cmp	r3, #0
   13e84:	beq	13ea4 <__assert_fail@plt+0x2da0>
   13e88:	ldr	r1, [sp, #36]	; 0x24
   13e8c:	cmp	sl, fp
   13e90:	strbhi	r3, [r1, fp]
   13e94:	add	fp, fp, #1
   13e98:	ldrb	r3, [r2, #1]!
   13e9c:	cmp	r3, #0
   13ea0:	bne	13e8c <__assert_fail@plt+0x2d88>
   13ea4:	cmp	sl, fp
   13ea8:	movhi	r3, #0
   13eac:	ldrhi	r2, [sp, #36]	; 0x24
   13eb0:	strbhi	r3, [r2, fp]
   13eb4:	b	13f5c <__assert_fail@plt+0x2e58>
   13eb8:	mov	r8, sl
   13ebc:	mov	sl, r7
   13ec0:	ldr	r3, [sp, #32]
   13ec4:	str	r3, [sp, #48]	; 0x30
   13ec8:	b	13f04 <__assert_fail@plt+0x2e00>
   13ecc:	mov	r8, sl
   13ed0:	mov	sl, r7
   13ed4:	b	13f04 <__assert_fail@plt+0x2e00>
   13ed8:	mov	r8, sl
   13edc:	mov	sl, r7
   13ee0:	b	13f04 <__assert_fail@plt+0x2e00>
   13ee4:	andeq	r7, r1, r0, lsr #2
   13ee8:	andeq	r7, r1, r0, lsr r1
   13eec:	andeq	r7, r1, r4, lsr #2
   13ef0:	mov	r8, sl
   13ef4:	mov	sl, r7
   13ef8:	b	13f04 <__assert_fail@plt+0x2e00>
   13efc:	mov	r8, sl
   13f00:	mov	sl, r7
   13f04:	ldr	r3, [sp, #48]	; 0x30
   13f08:	cmp	r8, #2
   13f0c:	movne	r3, #0
   13f10:	andeq	r3, r3, #1
   13f14:	cmp	r3, #0
   13f18:	movne	r8, #4
   13f1c:	ldr	r3, [sp, #168]	; 0xa8
   13f20:	str	r3, [sp, #16]
   13f24:	ldr	r3, [sp, #164]	; 0xa4
   13f28:	str	r3, [sp, #12]
   13f2c:	mov	r3, #0
   13f30:	str	r3, [sp, #8]
   13f34:	ldr	r3, [sp, #156]	; 0x9c
   13f38:	bic	r3, r3, #2
   13f3c:	str	r3, [sp, #4]
   13f40:	str	r8, [sp]
   13f44:	ldr	r3, [sp, #28]
   13f48:	ldr	r2, [sp, #52]	; 0x34
   13f4c:	mov	r1, sl
   13f50:	ldr	r0, [sp, #36]	; 0x24
   13f54:	bl	12e4c <__assert_fail@plt+0x1d48>
   13f58:	mov	fp, r0
   13f5c:	mov	r0, fp
   13f60:	add	sp, sp, #116	; 0x74
   13f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	mov	r8, sl
   13f6c:	mov	sl, r7
   13f70:	b	13f04 <__assert_fail@plt+0x2e00>
   13f74:	mov	r8, sl
   13f78:	mov	sl, r7
   13f7c:	b	13f04 <__assert_fail@plt+0x2e00>
   13f80:	mov	r8, sl
   13f84:	mov	sl, r7
   13f88:	b	13f04 <__assert_fail@plt+0x2e00>
   13f8c:	mov	r8, sl
   13f90:	mov	sl, r7
   13f94:	b	13f1c <__assert_fail@plt+0x2e18>
   13f98:	mov	r3, #1
   13f9c:	str	r3, [sp, #32]
   13fa0:	str	r3, [sp, #48]	; 0x30
   13fa4:	str	r3, [sp, #60]	; 0x3c
   13fa8:	ldr	r3, [pc, #-196]	; 13eec <__assert_fail@plt+0x2de8>
   13fac:	str	r3, [sp, #72]	; 0x48
   13fb0:	mov	fp, #0
   13fb4:	mov	sl, #5
   13fb8:	b	12f08 <__assert_fail@plt+0x1e04>
   13fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc0:	sub	sp, sp, #52	; 0x34
   13fc4:	mov	r5, r0
   13fc8:	str	r1, [sp, #24]
   13fcc:	str	r2, [sp, #28]
   13fd0:	mov	r4, r3
   13fd4:	bl	10ff0 <__errno_location@plt>
   13fd8:	str	r0, [sp, #32]
   13fdc:	ldr	r3, [r0]
   13fe0:	str	r3, [sp, #36]	; 0x24
   13fe4:	ldr	r3, [pc, #396]	; 14178 <__assert_fail@plt+0x3074>
   13fe8:	ldr	r6, [r3]
   13fec:	cmn	r5, #-2147483647	; 0x80000001
   13ff0:	movne	r3, #0
   13ff4:	moveq	r3, #1
   13ff8:	orrs	r3, r3, r5, lsr #31
   13ffc:	bne	1413c <__assert_fail@plt+0x3038>
   14000:	ldr	r3, [pc, #368]	; 14178 <__assert_fail@plt+0x3074>
   14004:	ldr	r2, [r3, #4]
   14008:	cmp	r5, r2
   1400c:	blt	14074 <__assert_fail@plt+0x2f70>
   14010:	str	r2, [sp, #44]	; 0x2c
   14014:	add	r3, r3, #8
   14018:	cmp	r6, r3
   1401c:	beq	14140 <__assert_fail@plt+0x303c>
   14020:	sub	r2, r5, r2
   14024:	mov	r3, #8
   14028:	str	r3, [sp]
   1402c:	mvn	r3, #-2147483648	; 0x80000000
   14030:	add	r2, r2, #1
   14034:	add	r1, sp, #44	; 0x2c
   14038:	mov	r0, r6
   1403c:	bl	14ed4 <__assert_fail@plt+0x3dd0>
   14040:	mov	r6, r0
   14044:	ldr	r3, [pc, #300]	; 14178 <__assert_fail@plt+0x3074>
   14048:	str	r0, [r3]
   1404c:	ldr	r7, [pc, #292]	; 14178 <__assert_fail@plt+0x3074>
   14050:	ldr	r0, [r7, #4]
   14054:	ldr	r2, [sp, #44]	; 0x2c
   14058:	sub	r2, r2, r0
   1405c:	lsl	r2, r2, #3
   14060:	mov	r1, #0
   14064:	add	r0, r6, r0, lsl #3
   14068:	bl	11020 <memset@plt>
   1406c:	ldr	r3, [sp, #44]	; 0x2c
   14070:	str	r3, [r7, #4]
   14074:	add	fp, r6, r5, lsl #3
   14078:	ldr	r8, [r6, r5, lsl #3]
   1407c:	ldr	r7, [fp, #4]
   14080:	ldr	r9, [r4, #4]
   14084:	orr	r9, r9, #1
   14088:	add	sl, r4, #8
   1408c:	ldr	r3, [r4, #44]	; 0x2c
   14090:	str	r3, [sp, #16]
   14094:	ldr	r3, [r4, #40]	; 0x28
   14098:	str	r3, [sp, #12]
   1409c:	str	sl, [sp, #8]
   140a0:	str	r9, [sp, #4]
   140a4:	ldr	r3, [r4]
   140a8:	str	r3, [sp]
   140ac:	ldr	r3, [sp, #28]
   140b0:	ldr	r2, [sp, #24]
   140b4:	mov	r1, r8
   140b8:	mov	r0, r7
   140bc:	bl	12e4c <__assert_fail@plt+0x1d48>
   140c0:	cmp	r8, r0
   140c4:	bhi	14124 <__assert_fail@plt+0x3020>
   140c8:	add	r8, r0, #1
   140cc:	str	r8, [r6, r5, lsl #3]
   140d0:	ldr	r3, [pc, #164]	; 1417c <__assert_fail@plt+0x3078>
   140d4:	cmp	r7, r3
   140d8:	beq	140e4 <__assert_fail@plt+0x2fe0>
   140dc:	mov	r0, r7
   140e0:	bl	1207c <__assert_fail@plt+0xf78>
   140e4:	mov	r0, r8
   140e8:	bl	14d50 <__assert_fail@plt+0x3c4c>
   140ec:	mov	r7, r0
   140f0:	str	r0, [fp, #4]
   140f4:	ldr	r3, [r4, #44]	; 0x2c
   140f8:	str	r3, [sp, #16]
   140fc:	ldr	r3, [r4, #40]	; 0x28
   14100:	str	r3, [sp, #12]
   14104:	str	sl, [sp, #8]
   14108:	str	r9, [sp, #4]
   1410c:	ldr	r3, [r4]
   14110:	str	r3, [sp]
   14114:	ldr	r3, [sp, #28]
   14118:	ldr	r2, [sp, #24]
   1411c:	mov	r1, r8
   14120:	bl	12e4c <__assert_fail@plt+0x1d48>
   14124:	ldr	r3, [sp, #32]
   14128:	ldr	r2, [sp, #36]	; 0x24
   1412c:	str	r2, [r3]
   14130:	mov	r0, r7
   14134:	add	sp, sp, #52	; 0x34
   14138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1413c:	bl	110ec <abort@plt>
   14140:	sub	r2, r5, r2
   14144:	mov	r3, #8
   14148:	str	r3, [sp]
   1414c:	mvn	r3, #-2147483648	; 0x80000000
   14150:	add	r2, r2, #1
   14154:	add	r1, sp, #44	; 0x2c
   14158:	mov	r0, #0
   1415c:	bl	14ed4 <__assert_fail@plt+0x3dd0>
   14160:	mov	r6, r0
   14164:	ldr	r3, [pc, #12]	; 14178 <__assert_fail@plt+0x3074>
   14168:	str	r0, [r3], #8
   1416c:	ldm	r3, {r0, r1}
   14170:	stm	r6, {r0, r1}
   14174:	b	1404c <__assert_fail@plt+0x2f48>
   14178:	andeq	r8, r2, r0, lsl r1
   1417c:	muleq	r2, r0, r1
   14180:	push	{r4, r5, r6, lr}
   14184:	mov	r4, r0
   14188:	bl	10ff0 <__errno_location@plt>
   1418c:	mov	r5, r0
   14190:	ldr	r6, [r0]
   14194:	cmp	r4, #0
   14198:	ldr	r3, [pc, #20]	; 141b4 <__assert_fail@plt+0x30b0>
   1419c:	moveq	r4, r3
   141a0:	mov	r1, #48	; 0x30
   141a4:	mov	r0, r4
   141a8:	bl	1523c <__assert_fail@plt+0x4138>
   141ac:	str	r6, [r5]
   141b0:	pop	{r4, r5, r6, pc}
   141b4:	muleq	r2, r0, r2
   141b8:	subs	r3, r0, #0
   141bc:	ldr	r2, [pc, #8]	; 141cc <__assert_fail@plt+0x30c8>
   141c0:	moveq	r3, r2
   141c4:	ldr	r0, [r3]
   141c8:	bx	lr
   141cc:	muleq	r2, r0, r2
   141d0:	subs	r3, r0, #0
   141d4:	ldr	r2, [pc, #8]	; 141e4 <__assert_fail@plt+0x30e0>
   141d8:	moveq	r3, r2
   141dc:	str	r1, [r3]
   141e0:	bx	lr
   141e4:	muleq	r2, r0, r2
   141e8:	push	{lr}		; (str lr, [sp, #-4]!)
   141ec:	subs	r3, r0, #0
   141f0:	ldr	r0, [pc, #44]	; 14224 <__assert_fail@plt+0x3120>
   141f4:	moveq	r3, r0
   141f8:	add	r3, r3, #8
   141fc:	lsr	lr, r1, #5
   14200:	and	r1, r1, #31
   14204:	ldr	ip, [r3, lr, lsl #2]
   14208:	lsr	r0, ip, r1
   1420c:	eor	r2, r2, r0
   14210:	and	r2, r2, #1
   14214:	eor	r1, ip, r2, lsl r1
   14218:	str	r1, [r3, lr, lsl #2]
   1421c:	and	r0, r0, #1
   14220:	pop	{pc}		; (ldr pc, [sp], #4)
   14224:	muleq	r2, r0, r2
   14228:	subs	r3, r0, #0
   1422c:	ldr	r2, [pc, #12]	; 14240 <__assert_fail@plt+0x313c>
   14230:	moveq	r3, r2
   14234:	ldr	r0, [r3, #4]
   14238:	str	r1, [r3, #4]
   1423c:	bx	lr
   14240:	muleq	r2, r0, r2
   14244:	subs	r3, r0, #0
   14248:	ldr	r0, [pc, #40]	; 14278 <__assert_fail@plt+0x3174>
   1424c:	moveq	r3, r0
   14250:	mov	r0, #10
   14254:	str	r0, [r3]
   14258:	cmp	r2, #0
   1425c:	cmpne	r1, #0
   14260:	beq	14270 <__assert_fail@plt+0x316c>
   14264:	str	r1, [r3, #40]	; 0x28
   14268:	str	r2, [r3, #44]	; 0x2c
   1426c:	bx	lr
   14270:	push	{r4, lr}
   14274:	bl	110ec <abort@plt>
   14278:	muleq	r2, r0, r2
   1427c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14280:	sub	sp, sp, #24
   14284:	mov	r7, r0
   14288:	mov	r8, r1
   1428c:	mov	r9, r2
   14290:	mov	sl, r3
   14294:	ldr	r4, [sp, #56]	; 0x38
   14298:	cmp	r4, #0
   1429c:	ldr	r3, [pc, #84]	; 142f8 <__assert_fail@plt+0x31f4>
   142a0:	moveq	r4, r3
   142a4:	bl	10ff0 <__errno_location@plt>
   142a8:	mov	r5, r0
   142ac:	ldr	r6, [r0]
   142b0:	ldr	r3, [r4, #44]	; 0x2c
   142b4:	str	r3, [sp, #16]
   142b8:	ldr	r3, [r4, #40]	; 0x28
   142bc:	str	r3, [sp, #12]
   142c0:	add	r3, r4, #8
   142c4:	str	r3, [sp, #8]
   142c8:	ldr	r3, [r4, #4]
   142cc:	str	r3, [sp, #4]
   142d0:	ldr	r3, [r4]
   142d4:	str	r3, [sp]
   142d8:	mov	r3, sl
   142dc:	mov	r2, r9
   142e0:	mov	r1, r8
   142e4:	mov	r0, r7
   142e8:	bl	12e4c <__assert_fail@plt+0x1d48>
   142ec:	str	r6, [r5]
   142f0:	add	sp, sp, #24
   142f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142f8:	muleq	r2, r0, r2
   142fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14300:	sub	sp, sp, #44	; 0x2c
   14304:	str	r0, [sp, #28]
   14308:	str	r1, [sp, #32]
   1430c:	mov	r6, r2
   14310:	subs	r4, r3, #0
   14314:	ldr	r3, [pc, #172]	; 143c8 <__assert_fail@plt+0x32c4>
   14318:	moveq	r4, r3
   1431c:	bl	10ff0 <__errno_location@plt>
   14320:	mov	r7, r0
   14324:	ldr	fp, [r0]
   14328:	ldr	r5, [r4, #4]
   1432c:	cmp	r6, #0
   14330:	orreq	r5, r5, #1
   14334:	add	r9, r4, #8
   14338:	ldr	r3, [r4, #44]	; 0x2c
   1433c:	str	r3, [sp, #16]
   14340:	ldr	r3, [r4, #40]	; 0x28
   14344:	str	r3, [sp, #12]
   14348:	str	r9, [sp, #8]
   1434c:	str	r5, [sp, #4]
   14350:	ldr	r3, [r4]
   14354:	str	r3, [sp]
   14358:	ldr	r3, [sp, #32]
   1435c:	ldr	r2, [sp, #28]
   14360:	mov	r1, #0
   14364:	mov	r0, r1
   14368:	bl	12e4c <__assert_fail@plt+0x1d48>
   1436c:	mov	sl, r0
   14370:	add	r8, r0, #1
   14374:	mov	r0, r8
   14378:	bl	14d50 <__assert_fail@plt+0x3c4c>
   1437c:	str	r0, [sp, #36]	; 0x24
   14380:	ldr	r3, [r4, #44]	; 0x2c
   14384:	str	r3, [sp, #16]
   14388:	ldr	r3, [r4, #40]	; 0x28
   1438c:	str	r3, [sp, #12]
   14390:	str	r9, [sp, #8]
   14394:	str	r5, [sp, #4]
   14398:	ldr	r3, [r4]
   1439c:	str	r3, [sp]
   143a0:	ldr	r3, [sp, #32]
   143a4:	ldr	r2, [sp, #28]
   143a8:	mov	r1, r8
   143ac:	bl	12e4c <__assert_fail@plt+0x1d48>
   143b0:	str	fp, [r7]
   143b4:	cmp	r6, #0
   143b8:	strne	sl, [r6]
   143bc:	ldr	r0, [sp, #36]	; 0x24
   143c0:	add	sp, sp, #44	; 0x2c
   143c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143c8:	muleq	r2, r0, r2
   143cc:	push	{r4, lr}
   143d0:	mov	r3, r2
   143d4:	mov	r2, #0
   143d8:	bl	142fc <__assert_fail@plt+0x31f8>
   143dc:	pop	{r4, pc}
   143e0:	push	{r4, r5, r6, r7, r8, lr}
   143e4:	ldr	r3, [pc, #140]	; 14478 <__assert_fail@plt+0x3374>
   143e8:	ldr	r7, [r3]
   143ec:	ldr	r3, [r3, #4]
   143f0:	cmp	r3, #1
   143f4:	ble	14420 <__assert_fail@plt+0x331c>
   143f8:	mov	r5, r7
   143fc:	mov	r4, #1
   14400:	ldr	r6, [pc, #112]	; 14478 <__assert_fail@plt+0x3374>
   14404:	ldr	r0, [r5, #12]
   14408:	bl	1207c <__assert_fail@plt+0xf78>
   1440c:	add	r4, r4, #1
   14410:	add	r5, r5, #8
   14414:	ldr	r3, [r6, #4]
   14418:	cmp	r3, r4
   1441c:	bgt	14404 <__assert_fail@plt+0x3300>
   14420:	ldr	r0, [r7, #4]
   14424:	ldr	r3, [pc, #80]	; 1447c <__assert_fail@plt+0x3378>
   14428:	cmp	r0, r3
   1442c:	beq	14448 <__assert_fail@plt+0x3344>
   14430:	bl	1207c <__assert_fail@plt+0xf78>
   14434:	ldr	r3, [pc, #60]	; 14478 <__assert_fail@plt+0x3374>
   14438:	mov	r2, #256	; 0x100
   1443c:	str	r2, [r3, #8]
   14440:	ldr	r2, [pc, #52]	; 1447c <__assert_fail@plt+0x3378>
   14444:	str	r2, [r3, #12]
   14448:	ldr	r3, [pc, #48]	; 14480 <__assert_fail@plt+0x337c>
   1444c:	cmp	r7, r3
   14450:	beq	14468 <__assert_fail@plt+0x3364>
   14454:	mov	r0, r7
   14458:	bl	1207c <__assert_fail@plt+0xf78>
   1445c:	ldr	r3, [pc, #20]	; 14478 <__assert_fail@plt+0x3374>
   14460:	add	r2, r3, #8
   14464:	str	r2, [r3]
   14468:	mov	r2, #1
   1446c:	ldr	r3, [pc, #4]	; 14478 <__assert_fail@plt+0x3374>
   14470:	str	r2, [r3, #4]
   14474:	pop	{r4, r5, r6, r7, r8, pc}
   14478:	andeq	r8, r2, r0, lsl r1
   1447c:	muleq	r2, r0, r1
   14480:	andeq	r8, r2, r8, lsl r1
   14484:	push	{r4, lr}
   14488:	ldr	r3, [pc, #8]	; 14498 <__assert_fail@plt+0x3394>
   1448c:	mvn	r2, #0
   14490:	bl	13fbc <__assert_fail@plt+0x2eb8>
   14494:	pop	{r4, pc}
   14498:	muleq	r2, r0, r2
   1449c:	push	{r4, lr}
   144a0:	ldr	r3, [pc, #4]	; 144ac <__assert_fail@plt+0x33a8>
   144a4:	bl	13fbc <__assert_fail@plt+0x2eb8>
   144a8:	pop	{r4, pc}
   144ac:	muleq	r2, r0, r2
   144b0:	push	{r4, lr}
   144b4:	mov	r1, r0
   144b8:	mov	r0, #0
   144bc:	bl	14484 <__assert_fail@plt+0x3380>
   144c0:	pop	{r4, pc}
   144c4:	push	{r4, lr}
   144c8:	mov	r2, r1
   144cc:	mov	r1, r0
   144d0:	mov	r0, #0
   144d4:	bl	1449c <__assert_fail@plt+0x3398>
   144d8:	pop	{r4, pc}
   144dc:	push	{r4, r5, lr}
   144e0:	sub	sp, sp, #52	; 0x34
   144e4:	mov	r4, r0
   144e8:	mov	r5, r2
   144ec:	mov	r0, sp
   144f0:	bl	12ce4 <__assert_fail@plt+0x1be0>
   144f4:	mov	r3, sp
   144f8:	mvn	r2, #0
   144fc:	mov	r1, r5
   14500:	mov	r0, r4
   14504:	bl	13fbc <__assert_fail@plt+0x2eb8>
   14508:	add	sp, sp, #52	; 0x34
   1450c:	pop	{r4, r5, pc}
   14510:	push	{r4, r5, r6, lr}
   14514:	sub	sp, sp, #48	; 0x30
   14518:	mov	r4, r0
   1451c:	mov	r5, r2
   14520:	mov	r6, r3
   14524:	mov	r0, sp
   14528:	bl	12ce4 <__assert_fail@plt+0x1be0>
   1452c:	mov	r3, sp
   14530:	mov	r2, r6
   14534:	mov	r1, r5
   14538:	mov	r0, r4
   1453c:	bl	13fbc <__assert_fail@plt+0x2eb8>
   14540:	add	sp, sp, #48	; 0x30
   14544:	pop	{r4, r5, r6, pc}
   14548:	push	{r4, lr}
   1454c:	mov	r2, r1
   14550:	mov	r1, r0
   14554:	mov	r0, #0
   14558:	bl	144dc <__assert_fail@plt+0x33d8>
   1455c:	pop	{r4, pc}
   14560:	push	{r4, lr}
   14564:	mov	r3, r2
   14568:	mov	r2, r1
   1456c:	mov	r1, r0
   14570:	mov	r0, #0
   14574:	bl	14510 <__assert_fail@plt+0x340c>
   14578:	pop	{r4, pc}
   1457c:	push	{r4, r5, r6, lr}
   14580:	sub	sp, sp, #48	; 0x30
   14584:	mov	r4, r0
   14588:	mov	r5, r1
   1458c:	mov	r6, r2
   14590:	mov	ip, sp
   14594:	ldr	lr, [pc, #64]	; 145dc <__assert_fail@plt+0x34d8>
   14598:	ldm	lr!, {r0, r1, r2, r3}
   1459c:	stmia	ip!, {r0, r1, r2, r3}
   145a0:	ldm	lr!, {r0, r1, r2, r3}
   145a4:	stmia	ip!, {r0, r1, r2, r3}
   145a8:	ldm	lr, {r0, r1, r2, r3}
   145ac:	stm	ip, {r0, r1, r2, r3}
   145b0:	mov	r2, #1
   145b4:	mov	r1, r6
   145b8:	mov	r0, sp
   145bc:	bl	141e8 <__assert_fail@plt+0x30e4>
   145c0:	mov	r3, sp
   145c4:	mov	r2, r5
   145c8:	mov	r1, r4
   145cc:	mov	r0, #0
   145d0:	bl	13fbc <__assert_fail@plt+0x2eb8>
   145d4:	add	sp, sp, #48	; 0x30
   145d8:	pop	{r4, r5, r6, pc}
   145dc:	muleq	r2, r0, r2
   145e0:	push	{r4, lr}
   145e4:	mov	r2, r1
   145e8:	mvn	r1, #0
   145ec:	bl	1457c <__assert_fail@plt+0x3478>
   145f0:	pop	{r4, pc}
   145f4:	push	{r4, lr}
   145f8:	mov	r1, #58	; 0x3a
   145fc:	bl	145e0 <__assert_fail@plt+0x34dc>
   14600:	pop	{r4, pc}
   14604:	push	{r4, lr}
   14608:	mov	r2, #58	; 0x3a
   1460c:	bl	1457c <__assert_fail@plt+0x3478>
   14610:	pop	{r4, pc}
   14614:	push	{r4, r5, lr}
   14618:	sub	sp, sp, #100	; 0x64
   1461c:	mov	r4, r0
   14620:	mov	r5, r2
   14624:	mov	r0, sp
   14628:	bl	12ce4 <__assert_fail@plt+0x1be0>
   1462c:	add	lr, sp, #48	; 0x30
   14630:	mov	ip, sp
   14634:	ldm	ip!, {r0, r1, r2, r3}
   14638:	stmia	lr!, {r0, r1, r2, r3}
   1463c:	ldm	ip!, {r0, r1, r2, r3}
   14640:	stmia	lr!, {r0, r1, r2, r3}
   14644:	ldm	ip, {r0, r1, r2, r3}
   14648:	stm	lr, {r0, r1, r2, r3}
   1464c:	mov	r2, #1
   14650:	mov	r1, #58	; 0x3a
   14654:	add	r0, sp, #48	; 0x30
   14658:	bl	141e8 <__assert_fail@plt+0x30e4>
   1465c:	add	r3, sp, #48	; 0x30
   14660:	mvn	r2, #0
   14664:	mov	r1, r5
   14668:	mov	r0, r4
   1466c:	bl	13fbc <__assert_fail@plt+0x2eb8>
   14670:	add	sp, sp, #100	; 0x64
   14674:	pop	{r4, r5, pc}
   14678:	push	{r4, r5, r6, r7, lr}
   1467c:	sub	sp, sp, #52	; 0x34
   14680:	mov	r4, r0
   14684:	mov	r6, r1
   14688:	mov	r7, r2
   1468c:	mov	r5, r3
   14690:	mov	ip, sp
   14694:	ldr	lr, [pc, #64]	; 146dc <__assert_fail@plt+0x35d8>
   14698:	ldm	lr!, {r0, r1, r2, r3}
   1469c:	stmia	ip!, {r0, r1, r2, r3}
   146a0:	ldm	lr!, {r0, r1, r2, r3}
   146a4:	stmia	ip!, {r0, r1, r2, r3}
   146a8:	ldm	lr, {r0, r1, r2, r3}
   146ac:	stm	ip, {r0, r1, r2, r3}
   146b0:	mov	r2, r7
   146b4:	mov	r1, r6
   146b8:	mov	r0, sp
   146bc:	bl	14244 <__assert_fail@plt+0x3140>
   146c0:	mov	r3, sp
   146c4:	ldr	r2, [sp, #72]	; 0x48
   146c8:	mov	r1, r5
   146cc:	mov	r0, r4
   146d0:	bl	13fbc <__assert_fail@plt+0x2eb8>
   146d4:	add	sp, sp, #52	; 0x34
   146d8:	pop	{r4, r5, r6, r7, pc}
   146dc:	muleq	r2, r0, r2
   146e0:	push	{lr}		; (str lr, [sp, #-4]!)
   146e4:	sub	sp, sp, #12
   146e8:	mvn	ip, #0
   146ec:	str	ip, [sp]
   146f0:	bl	14678 <__assert_fail@plt+0x3574>
   146f4:	add	sp, sp, #12
   146f8:	pop	{pc}		; (ldr pc, [sp], #4)
   146fc:	push	{r4, lr}
   14700:	mov	r3, r2
   14704:	mov	r2, r1
   14708:	mov	r1, r0
   1470c:	mov	r0, #0
   14710:	bl	146e0 <__assert_fail@plt+0x35dc>
   14714:	pop	{r4, pc}
   14718:	push	{lr}		; (str lr, [sp, #-4]!)
   1471c:	sub	sp, sp, #12
   14720:	str	r3, [sp]
   14724:	mov	r3, r2
   14728:	mov	r2, r1
   1472c:	mov	r1, r0
   14730:	mov	r0, #0
   14734:	bl	14678 <__assert_fail@plt+0x3574>
   14738:	add	sp, sp, #12
   1473c:	pop	{pc}		; (ldr pc, [sp], #4)
   14740:	push	{r4, lr}
   14744:	ldr	r3, [pc, #4]	; 14750 <__assert_fail@plt+0x364c>
   14748:	bl	13fbc <__assert_fail@plt+0x2eb8>
   1474c:	pop	{r4, pc}
   14750:	andeq	r8, r2, r0, lsr #2
   14754:	push	{r4, lr}
   14758:	mov	r2, r1
   1475c:	mov	r1, r0
   14760:	mov	r0, #0
   14764:	bl	14740 <__assert_fail@plt+0x363c>
   14768:	pop	{r4, pc}
   1476c:	push	{r4, lr}
   14770:	mvn	r2, #0
   14774:	bl	14740 <__assert_fail@plt+0x363c>
   14778:	pop	{r4, pc}
   1477c:	push	{r4, lr}
   14780:	mov	r1, r0
   14784:	mov	r0, #0
   14788:	bl	1476c <__assert_fail@plt+0x3668>
   1478c:	pop	{r4, pc}
   14790:	push	{r4, lr}
   14794:	mov	r2, #3
   14798:	mov	r1, #0
   1479c:	bl	15d4c <__assert_fail@plt+0x4c48>
   147a0:	pop	{r4, pc}
   147a4:	push	{r4, r5, r6, lr}
   147a8:	sub	sp, sp, #32
   147ac:	mov	r4, r0
   147b0:	ldr	r5, [sp, #48]	; 0x30
   147b4:	ldr	r6, [sp, #52]	; 0x34
   147b8:	cmp	r1, #0
   147bc:	beq	14874 <__assert_fail@plt+0x3770>
   147c0:	str	r3, [sp, #4]
   147c4:	str	r2, [sp]
   147c8:	mov	r3, r1
   147cc:	ldr	r2, [pc, #940]	; 14b80 <__assert_fail@plt+0x3a7c>
   147d0:	mov	r1, #1
   147d4:	bl	11044 <__fprintf_chk@plt>
   147d8:	mov	r2, #5
   147dc:	ldr	r1, [pc, #928]	; 14b84 <__assert_fail@plt+0x3a80>
   147e0:	mov	r0, #0
   147e4:	bl	10ef4 <dcgettext@plt>
   147e8:	ldr	r3, [pc, #920]	; 14b88 <__assert_fail@plt+0x3a84>
   147ec:	str	r3, [sp]
   147f0:	mov	r3, r0
   147f4:	ldr	r2, [pc, #912]	; 14b8c <__assert_fail@plt+0x3a88>
   147f8:	mov	r1, #1
   147fc:	mov	r0, r4
   14800:	bl	11044 <__fprintf_chk@plt>
   14804:	mov	r1, r4
   14808:	mov	r0, #10
   1480c:	bl	10ee8 <fputc_unlocked@plt>
   14810:	mov	r2, #5
   14814:	ldr	r1, [pc, #884]	; 14b90 <__assert_fail@plt+0x3a8c>
   14818:	mov	r0, #0
   1481c:	bl	10ef4 <dcgettext@plt>
   14820:	ldr	r3, [pc, #876]	; 14b94 <__assert_fail@plt+0x3a90>
   14824:	mov	r2, r0
   14828:	mov	r1, #1
   1482c:	mov	r0, r4
   14830:	bl	11044 <__fprintf_chk@plt>
   14834:	mov	r1, r4
   14838:	mov	r0, #10
   1483c:	bl	10ee8 <fputc_unlocked@plt>
   14840:	cmp	r6, #9
   14844:	ldrls	pc, [pc, r6, lsl #2]
   14848:	b	14b18 <__assert_fail@plt+0x3a14>
   1484c:			; <UNDEFINED> instruction: 0x000148b0
   14850:	andeq	r4, r1, ip, lsl #17
   14854:			; <UNDEFINED> instruction: 0x000148b8
   14858:	andeq	r4, r1, r8, ror #17
   1485c:	andeq	r4, r1, r0, lsr #18
   14860:	andeq	r4, r1, r0, ror #18
   14864:	andeq	r4, r1, r8, lsr #19
   14868:	strdeq	r4, [r1], -r8
   1486c:	andeq	r4, r1, r0, asr sl
   14870:			; <UNDEFINED> instruction: 0x00014ab0
   14874:	str	r3, [sp]
   14878:	mov	r3, r2
   1487c:	ldr	r2, [pc, #788]	; 14b98 <__assert_fail@plt+0x3a94>
   14880:	mov	r1, #1
   14884:	bl	11044 <__fprintf_chk@plt>
   14888:	b	147d8 <__assert_fail@plt+0x36d4>
   1488c:	mov	r2, #5
   14890:	ldr	r1, [pc, #772]	; 14b9c <__assert_fail@plt+0x3a98>
   14894:	mov	r0, #0
   14898:	bl	10ef4 <dcgettext@plt>
   1489c:	ldr	r3, [r5]
   148a0:	mov	r2, r0
   148a4:	mov	r1, #1
   148a8:	mov	r0, r4
   148ac:	bl	11044 <__fprintf_chk@plt>
   148b0:	add	sp, sp, #32
   148b4:	pop	{r4, r5, r6, pc}
   148b8:	mov	r2, #5
   148bc:	ldr	r1, [pc, #732]	; 14ba0 <__assert_fail@plt+0x3a9c>
   148c0:	mov	r0, #0
   148c4:	bl	10ef4 <dcgettext@plt>
   148c8:	ldr	r3, [r5]
   148cc:	ldr	r2, [r5, #4]
   148d0:	str	r2, [sp]
   148d4:	mov	r2, r0
   148d8:	mov	r1, #1
   148dc:	mov	r0, r4
   148e0:	bl	11044 <__fprintf_chk@plt>
   148e4:	b	148b0 <__assert_fail@plt+0x37ac>
   148e8:	mov	r2, #5
   148ec:	ldr	r1, [pc, #688]	; 14ba4 <__assert_fail@plt+0x3aa0>
   148f0:	mov	r0, #0
   148f4:	bl	10ef4 <dcgettext@plt>
   148f8:	ldr	r3, [r5]
   148fc:	ldr	r2, [r5, #8]
   14900:	str	r2, [sp, #4]
   14904:	ldr	r2, [r5, #4]
   14908:	str	r2, [sp]
   1490c:	mov	r2, r0
   14910:	mov	r1, #1
   14914:	mov	r0, r4
   14918:	bl	11044 <__fprintf_chk@plt>
   1491c:	b	148b0 <__assert_fail@plt+0x37ac>
   14920:	mov	r2, #5
   14924:	ldr	r1, [pc, #636]	; 14ba8 <__assert_fail@plt+0x3aa4>
   14928:	mov	r0, #0
   1492c:	bl	10ef4 <dcgettext@plt>
   14930:	ldr	r3, [r5]
   14934:	ldr	r2, [r5, #12]
   14938:	str	r2, [sp, #8]
   1493c:	ldr	r2, [r5, #8]
   14940:	str	r2, [sp, #4]
   14944:	ldr	r2, [r5, #4]
   14948:	str	r2, [sp]
   1494c:	mov	r2, r0
   14950:	mov	r1, #1
   14954:	mov	r0, r4
   14958:	bl	11044 <__fprintf_chk@plt>
   1495c:	b	148b0 <__assert_fail@plt+0x37ac>
   14960:	mov	r2, #5
   14964:	ldr	r1, [pc, #576]	; 14bac <__assert_fail@plt+0x3aa8>
   14968:	mov	r0, #0
   1496c:	bl	10ef4 <dcgettext@plt>
   14970:	ldr	r3, [r5]
   14974:	ldr	r2, [r5, #16]
   14978:	str	r2, [sp, #12]
   1497c:	ldr	r2, [r5, #12]
   14980:	str	r2, [sp, #8]
   14984:	ldr	r2, [r5, #8]
   14988:	str	r2, [sp, #4]
   1498c:	ldr	r2, [r5, #4]
   14990:	str	r2, [sp]
   14994:	mov	r2, r0
   14998:	mov	r1, #1
   1499c:	mov	r0, r4
   149a0:	bl	11044 <__fprintf_chk@plt>
   149a4:	b	148b0 <__assert_fail@plt+0x37ac>
   149a8:	mov	r2, #5
   149ac:	ldr	r1, [pc, #508]	; 14bb0 <__assert_fail@plt+0x3aac>
   149b0:	mov	r0, #0
   149b4:	bl	10ef4 <dcgettext@plt>
   149b8:	ldr	r3, [r5]
   149bc:	ldr	r2, [r5, #20]
   149c0:	str	r2, [sp, #16]
   149c4:	ldr	r2, [r5, #16]
   149c8:	str	r2, [sp, #12]
   149cc:	ldr	r2, [r5, #12]
   149d0:	str	r2, [sp, #8]
   149d4:	ldr	r2, [r5, #8]
   149d8:	str	r2, [sp, #4]
   149dc:	ldr	r2, [r5, #4]
   149e0:	str	r2, [sp]
   149e4:	mov	r2, r0
   149e8:	mov	r1, #1
   149ec:	mov	r0, r4
   149f0:	bl	11044 <__fprintf_chk@plt>
   149f4:	b	148b0 <__assert_fail@plt+0x37ac>
   149f8:	mov	r2, #5
   149fc:	ldr	r1, [pc, #432]	; 14bb4 <__assert_fail@plt+0x3ab0>
   14a00:	mov	r0, #0
   14a04:	bl	10ef4 <dcgettext@plt>
   14a08:	ldr	r3, [r5]
   14a0c:	ldr	r2, [r5, #24]
   14a10:	str	r2, [sp, #20]
   14a14:	ldr	r2, [r5, #20]
   14a18:	str	r2, [sp, #16]
   14a1c:	ldr	r2, [r5, #16]
   14a20:	str	r2, [sp, #12]
   14a24:	ldr	r2, [r5, #12]
   14a28:	str	r2, [sp, #8]
   14a2c:	ldr	r2, [r5, #8]
   14a30:	str	r2, [sp, #4]
   14a34:	ldr	r2, [r5, #4]
   14a38:	str	r2, [sp]
   14a3c:	mov	r2, r0
   14a40:	mov	r1, #1
   14a44:	mov	r0, r4
   14a48:	bl	11044 <__fprintf_chk@plt>
   14a4c:	b	148b0 <__assert_fail@plt+0x37ac>
   14a50:	mov	r2, #5
   14a54:	ldr	r1, [pc, #348]	; 14bb8 <__assert_fail@plt+0x3ab4>
   14a58:	mov	r0, #0
   14a5c:	bl	10ef4 <dcgettext@plt>
   14a60:	ldr	r3, [r5]
   14a64:	ldr	r2, [r5, #28]
   14a68:	str	r2, [sp, #24]
   14a6c:	ldr	r2, [r5, #24]
   14a70:	str	r2, [sp, #20]
   14a74:	ldr	r2, [r5, #20]
   14a78:	str	r2, [sp, #16]
   14a7c:	ldr	r2, [r5, #16]
   14a80:	str	r2, [sp, #12]
   14a84:	ldr	r2, [r5, #12]
   14a88:	str	r2, [sp, #8]
   14a8c:	ldr	r2, [r5, #8]
   14a90:	str	r2, [sp, #4]
   14a94:	ldr	r2, [r5, #4]
   14a98:	str	r2, [sp]
   14a9c:	mov	r2, r0
   14aa0:	mov	r1, #1
   14aa4:	mov	r0, r4
   14aa8:	bl	11044 <__fprintf_chk@plt>
   14aac:	b	148b0 <__assert_fail@plt+0x37ac>
   14ab0:	mov	r2, #5
   14ab4:	ldr	r1, [pc, #256]	; 14bbc <__assert_fail@plt+0x3ab8>
   14ab8:	mov	r0, #0
   14abc:	bl	10ef4 <dcgettext@plt>
   14ac0:	ldr	r3, [r5]
   14ac4:	ldr	r2, [r5, #32]
   14ac8:	str	r2, [sp, #28]
   14acc:	ldr	r2, [r5, #28]
   14ad0:	str	r2, [sp, #24]
   14ad4:	ldr	r2, [r5, #24]
   14ad8:	str	r2, [sp, #20]
   14adc:	ldr	r2, [r5, #20]
   14ae0:	str	r2, [sp, #16]
   14ae4:	ldr	r2, [r5, #16]
   14ae8:	str	r2, [sp, #12]
   14aec:	ldr	r2, [r5, #12]
   14af0:	str	r2, [sp, #8]
   14af4:	ldr	r2, [r5, #8]
   14af8:	str	r2, [sp, #4]
   14afc:	ldr	r2, [r5, #4]
   14b00:	str	r2, [sp]
   14b04:	mov	r2, r0
   14b08:	mov	r1, #1
   14b0c:	mov	r0, r4
   14b10:	bl	11044 <__fprintf_chk@plt>
   14b14:	b	148b0 <__assert_fail@plt+0x37ac>
   14b18:	mov	r2, #5
   14b1c:	ldr	r1, [pc, #156]	; 14bc0 <__assert_fail@plt+0x3abc>
   14b20:	mov	r0, #0
   14b24:	bl	10ef4 <dcgettext@plt>
   14b28:	ldr	r3, [r5]
   14b2c:	ldr	r2, [r5, #32]
   14b30:	str	r2, [sp, #28]
   14b34:	ldr	r2, [r5, #28]
   14b38:	str	r2, [sp, #24]
   14b3c:	ldr	r2, [r5, #24]
   14b40:	str	r2, [sp, #20]
   14b44:	ldr	r2, [r5, #20]
   14b48:	str	r2, [sp, #16]
   14b4c:	ldr	r2, [r5, #16]
   14b50:	str	r2, [sp, #12]
   14b54:	ldr	r2, [r5, #12]
   14b58:	str	r2, [sp, #8]
   14b5c:	ldr	r2, [r5, #8]
   14b60:	str	r2, [sp, #4]
   14b64:	ldr	r2, [r5, #4]
   14b68:	str	r2, [sp]
   14b6c:	mov	r2, r0
   14b70:	mov	r1, #1
   14b74:	mov	r0, r4
   14b78:	bl	11044 <__fprintf_chk@plt>
   14b7c:	b	148b0 <__assert_fail@plt+0x37ac>
   14b80:	muleq	r1, r8, r1
   14b84:	andeq	r7, r1, ip, lsr #3
   14b88:	andeq	r0, r0, r6, ror #15
   14b8c:	andeq	r7, r1, r4, lsl #9
   14b90:			; <UNDEFINED> instruction: 0x000171b0
   14b94:	andeq	r7, r1, ip, asr r2
   14b98:	andeq	r7, r1, r4, lsr #3
   14b9c:	andeq	r7, r1, r0, lsl #5
   14ba0:	muleq	r1, r0, r2
   14ba4:	andeq	r7, r1, r8, lsr #5
   14ba8:	andeq	r7, r1, r4, asr #5
   14bac:	andeq	r7, r1, r4, ror #5
   14bb0:	andeq	r7, r1, r8, lsl #6
   14bb4:	andeq	r7, r1, r0, lsr r3
   14bb8:	andeq	r7, r1, ip, asr r3
   14bbc:	andeq	r7, r1, ip, lsl #7
   14bc0:	andeq	r7, r1, r0, asr #7
   14bc4:	push	{r4, r5, lr}
   14bc8:	sub	sp, sp, #12
   14bcc:	ldr	r5, [sp, #24]
   14bd0:	ldr	ip, [r5]
   14bd4:	cmp	ip, #0
   14bd8:	beq	14c08 <__assert_fail@plt+0x3b04>
   14bdc:	mov	lr, r5
   14be0:	mov	ip, #0
   14be4:	add	ip, ip, #1
   14be8:	ldr	r4, [lr, #4]!
   14bec:	cmp	r4, #0
   14bf0:	bne	14be4 <__assert_fail@plt+0x3ae0>
   14bf4:	str	ip, [sp, #4]
   14bf8:	str	r5, [sp]
   14bfc:	bl	147a4 <__assert_fail@plt+0x36a0>
   14c00:	add	sp, sp, #12
   14c04:	pop	{r4, r5, pc}
   14c08:	mov	ip, #0
   14c0c:	b	14bf4 <__assert_fail@plt+0x3af0>
   14c10:	push	{r4, r5, lr}
   14c14:	sub	sp, sp, #52	; 0x34
   14c18:	ldr	r4, [sp, #64]	; 0x40
   14c1c:	sub	r4, r4, #4
   14c20:	add	r5, sp, #4
   14c24:	mov	ip, #0
   14c28:	ldr	lr, [r4, #4]!
   14c2c:	str	lr, [r5, #4]!
   14c30:	cmp	lr, #0
   14c34:	beq	14c44 <__assert_fail@plt+0x3b40>
   14c38:	add	ip, ip, #1
   14c3c:	cmp	ip, #10
   14c40:	bne	14c28 <__assert_fail@plt+0x3b24>
   14c44:	str	ip, [sp, #4]
   14c48:	add	ip, sp, #8
   14c4c:	str	ip, [sp]
   14c50:	bl	147a4 <__assert_fail@plt+0x36a0>
   14c54:	add	sp, sp, #52	; 0x34
   14c58:	pop	{r4, r5, pc}
   14c5c:	push	{r3}		; (str r3, [sp, #-4]!)
   14c60:	push	{lr}		; (str lr, [sp, #-4]!)
   14c64:	sub	sp, sp, #16
   14c68:	add	r3, sp, #24
   14c6c:	str	r3, [sp, #12]
   14c70:	str	r3, [sp]
   14c74:	ldr	r3, [sp, #20]
   14c78:	bl	14c10 <__assert_fail@plt+0x3b0c>
   14c7c:	add	sp, sp, #16
   14c80:	pop	{lr}		; (ldr lr, [sp], #4)
   14c84:	add	sp, sp, #4
   14c88:	bx	lr
   14c8c:	push	{r4, lr}
   14c90:	ldr	r3, [pc, #112]	; 14d08 <__assert_fail@plt+0x3c04>
   14c94:	ldr	r1, [r3]
   14c98:	mov	r0, #10
   14c9c:	bl	10ee8 <fputc_unlocked@plt>
   14ca0:	mov	r2, #5
   14ca4:	ldr	r1, [pc, #96]	; 14d0c <__assert_fail@plt+0x3c08>
   14ca8:	mov	r0, #0
   14cac:	bl	10ef4 <dcgettext@plt>
   14cb0:	ldr	r2, [pc, #88]	; 14d10 <__assert_fail@plt+0x3c0c>
   14cb4:	mov	r1, r0
   14cb8:	mov	r0, #1
   14cbc:	bl	1102c <__printf_chk@plt>
   14cc0:	mov	r2, #5
   14cc4:	ldr	r1, [pc, #72]	; 14d14 <__assert_fail@plt+0x3c10>
   14cc8:	mov	r0, #0
   14ccc:	bl	10ef4 <dcgettext@plt>
   14cd0:	ldr	r3, [pc, #64]	; 14d18 <__assert_fail@plt+0x3c14>
   14cd4:	ldr	r2, [pc, #64]	; 14d1c <__assert_fail@plt+0x3c18>
   14cd8:	mov	r1, r0
   14cdc:	mov	r0, #1
   14ce0:	bl	1102c <__printf_chk@plt>
   14ce4:	mov	r2, #5
   14ce8:	ldr	r1, [pc, #48]	; 14d20 <__assert_fail@plt+0x3c1c>
   14cec:	mov	r0, #0
   14cf0:	bl	10ef4 <dcgettext@plt>
   14cf4:	ldr	r2, [pc, #40]	; 14d24 <__assert_fail@plt+0x3c20>
   14cf8:	mov	r1, r0
   14cfc:	mov	r0, #1
   14d00:	bl	1102c <__printf_chk@plt>
   14d04:	pop	{r4, pc}
   14d08:	andeq	r8, r2, r4, ror r1
   14d0c:	strdeq	r7, [r1], -ip
   14d10:	andeq	r7, r1, r0, lsl r4
   14d14:	andeq	r7, r1, r8, lsr #8
   14d18:	andeq	r6, r1, ip, lsr #28
   14d1c:	andeq	r6, r1, r4, asr lr
   14d20:	andeq	r7, r1, ip, lsr r4
   14d24:	andeq	r7, r1, r4, ror #8
   14d28:	push	{r4, lr}
   14d2c:	bl	158c4 <__assert_fail@plt+0x47c0>
   14d30:	cmp	r0, #0
   14d34:	popne	{r4, pc}
   14d38:	bl	152cc <__assert_fail@plt+0x41c8>
   14d3c:	push	{r4, lr}
   14d40:	bl	158c4 <__assert_fail@plt+0x47c0>
   14d44:	cmp	r0, #0
   14d48:	popne	{r4, pc}
   14d4c:	bl	152cc <__assert_fail@plt+0x41c8>
   14d50:	push	{r4, lr}
   14d54:	bl	14d28 <__assert_fail@plt+0x3c24>
   14d58:	pop	{r4, pc}
   14d5c:	push	{r4, r5, r6, lr}
   14d60:	mov	r5, r0
   14d64:	mov	r4, r1
   14d68:	bl	158f4 <__assert_fail@plt+0x47f0>
   14d6c:	cmp	r0, #0
   14d70:	popne	{r4, r5, r6, pc}
   14d74:	adds	r4, r4, #0
   14d78:	movne	r4, #1
   14d7c:	cmp	r5, #0
   14d80:	orreq	r4, r4, #1
   14d84:	cmp	r4, #0
   14d88:	popeq	{r4, r5, r6, pc}
   14d8c:	bl	152cc <__assert_fail@plt+0x41c8>
   14d90:	push	{r4, lr}
   14d94:	cmp	r1, #0
   14d98:	orreq	r1, r1, #1
   14d9c:	bl	158f4 <__assert_fail@plt+0x47f0>
   14da0:	cmp	r0, #0
   14da4:	popne	{r4, pc}
   14da8:	bl	152cc <__assert_fail@plt+0x41c8>
   14dac:	push	{r4, r5, r6, lr}
   14db0:	mov	r6, r0
   14db4:	mov	r5, r1
   14db8:	mov	r4, r2
   14dbc:	bl	16030 <__assert_fail@plt+0x4f2c>
   14dc0:	cmp	r0, #0
   14dc4:	popne	{r4, r5, r6, pc}
   14dc8:	cmp	r6, #0
   14dcc:	beq	14ddc <__assert_fail@plt+0x3cd8>
   14dd0:	cmp	r5, #0
   14dd4:	cmpne	r4, #0
   14dd8:	popeq	{r4, r5, r6, pc}
   14ddc:	bl	152cc <__assert_fail@plt+0x41c8>
   14de0:	push	{r4, lr}
   14de4:	bl	14dac <__assert_fail@plt+0x3ca8>
   14de8:	pop	{r4, pc}
   14dec:	push	{r4, lr}
   14df0:	mov	ip, r1
   14df4:	mov	r3, r2
   14df8:	cmp	r2, #0
   14dfc:	cmpne	r1, #0
   14e00:	moveq	r3, #1
   14e04:	moveq	ip, r3
   14e08:	mov	r2, r3
   14e0c:	mov	r1, ip
   14e10:	bl	16030 <__assert_fail@plt+0x4f2c>
   14e14:	cmp	r0, #0
   14e18:	popne	{r4, pc}
   14e1c:	bl	152cc <__assert_fail@plt+0x41c8>
   14e20:	push	{r4, lr}
   14e24:	mov	r2, r1
   14e28:	mov	r1, r0
   14e2c:	mov	r0, #0
   14e30:	bl	14dac <__assert_fail@plt+0x3ca8>
   14e34:	pop	{r4, pc}
   14e38:	push	{r4, lr}
   14e3c:	mov	r2, r1
   14e40:	mov	r1, r0
   14e44:	mov	r0, #0
   14e48:	bl	14dec <__assert_fail@plt+0x3ce8>
   14e4c:	pop	{r4, pc}
   14e50:	push	{r4, r5, r6, r7, r8, lr}
   14e54:	mov	r5, r1
   14e58:	mov	r6, r2
   14e5c:	ldr	r4, [r1]
   14e60:	subs	r7, r0, #0
   14e64:	beq	14e80 <__assert_fail@plt+0x3d7c>
   14e68:	lsr	r2, r4, #1
   14e6c:	add	r3, r2, #1
   14e70:	mvn	r3, r3
   14e74:	cmp	r4, r3
   14e78:	bls	14ea4 <__assert_fail@plt+0x3da0>
   14e7c:	bl	152cc <__assert_fail@plt+0x41c8>
   14e80:	cmp	r4, #0
   14e84:	bne	14eac <__assert_fail@plt+0x3da8>
   14e88:	mov	r1, r2
   14e8c:	mov	r0, #64	; 0x40
   14e90:	bl	16184 <__assert_fail@plt+0x5080>
   14e94:	cmp	r0, #0
   14e98:	movne	r4, r0
   14e9c:	addeq	r4, r0, #1
   14ea0:	b	14eac <__assert_fail@plt+0x3da8>
   14ea4:	add	r4, r4, #1
   14ea8:	add	r4, r4, r2
   14eac:	mov	r2, r6
   14eb0:	mov	r1, r4
   14eb4:	mov	r0, r7
   14eb8:	bl	14dac <__assert_fail@plt+0x3ca8>
   14ebc:	str	r4, [r5]
   14ec0:	pop	{r4, r5, r6, r7, r8, pc}
   14ec4:	push	{r4, lr}
   14ec8:	mov	r2, #1
   14ecc:	bl	14e50 <__assert_fail@plt+0x3d4c>
   14ed0:	pop	{r4, pc}
   14ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed8:	sub	sp, sp, #12
   14edc:	mov	fp, r0
   14ee0:	mov	sl, r1
   14ee4:	mov	r9, r2
   14ee8:	mov	r7, r3
   14eec:	ldr	r6, [sp, #48]	; 0x30
   14ef0:	ldr	r5, [r1]
   14ef4:	asrs	r4, r5, #1
   14ef8:	bmi	15054 <__assert_fail@plt+0x3f50>
   14efc:	cmp	r5, #0
   14f00:	blt	15068 <__assert_fail@plt+0x3f64>
   14f04:	mvn	r3, #-2147483648	; 0x80000000
   14f08:	sub	r3, r3, r4
   14f0c:	cmp	r5, r3
   14f10:	movle	r3, #0
   14f14:	movgt	r3, #1
   14f18:	cmp	r3, #0
   14f1c:	addeq	r4, r4, r5
   14f20:	mvnne	r4, #-2147483648	; 0x80000000
   14f24:	mvn	r8, r7
   14f28:	lsr	r8, r8, #31
   14f2c:	cmp	r7, r4
   14f30:	movge	r3, #0
   14f34:	andlt	r3, r8, #1
   14f38:	cmp	r3, #0
   14f3c:	movne	r4, r7
   14f40:	cmp	r6, #0
   14f44:	blt	1507c <__assert_fail@plt+0x3f78>
   14f48:	cmp	r6, #0
   14f4c:	beq	15128 <__assert_fail@plt+0x4024>
   14f50:	cmp	r4, #0
   14f54:	blt	150d8 <__assert_fail@plt+0x3fd4>
   14f58:	mov	r1, r6
   14f5c:	mvn	r0, #-2147483648	; 0x80000000
   14f60:	bl	16390 <__assert_fail@plt+0x528c>
   14f64:	cmp	r0, r4
   14f68:	movge	r0, #0
   14f6c:	movlt	r0, #1
   14f70:	cmp	r0, #0
   14f74:	mvnne	r3, #-2147483648	; 0x80000000
   14f78:	strne	r3, [sp, #4]
   14f7c:	beq	15110 <__assert_fail@plt+0x400c>
   14f80:	mov	r1, r6
   14f84:	ldr	r0, [sp, #4]
   14f88:	bl	16390 <__assert_fail@plt+0x528c>
   14f8c:	mov	r4, r0
   14f90:	mov	r1, r6
   14f94:	ldr	r0, [sp, #4]
   14f98:	bl	165b0 <__assert_fail@plt+0x54ac>
   14f9c:	ldr	r3, [sp, #4]
   14fa0:	sub	r1, r3, r1
   14fa4:	cmp	fp, #0
   14fa8:	moveq	r3, #0
   14fac:	streq	r3, [sl]
   14fb0:	sub	r3, r4, r5
   14fb4:	cmp	r3, r9
   14fb8:	bge	15040 <__assert_fail@plt+0x3f3c>
   14fbc:	cmp	r9, #0
   14fc0:	blt	15134 <__assert_fail@plt+0x4030>
   14fc4:	cmp	r5, #0
   14fc8:	blt	15148 <__assert_fail@plt+0x4044>
   14fcc:	mvn	r3, #-2147483648	; 0x80000000
   14fd0:	sub	r3, r3, r9
   14fd4:	cmp	r5, r3
   14fd8:	movle	r3, #0
   14fdc:	movgt	r3, #1
   14fe0:	cmp	r3, #0
   14fe4:	bne	151f0 <__assert_fail@plt+0x40ec>
   14fe8:	add	r5, r5, r9
   14fec:	mov	r4, r5
   14ff0:	cmp	r7, r5
   14ff4:	movge	r7, #0
   14ff8:	andlt	r7, r8, #1
   14ffc:	cmp	r7, #0
   15000:	bne	151f0 <__assert_fail@plt+0x40ec>
   15004:	cmp	r6, #0
   15008:	blt	1515c <__assert_fail@plt+0x4058>
   1500c:	cmp	r6, #0
   15010:	beq	1503c <__assert_fail@plt+0x3f38>
   15014:	cmp	r5, #0
   15018:	blt	151b8 <__assert_fail@plt+0x40b4>
   1501c:	mov	r1, r6
   15020:	mvn	r0, #-2147483648	; 0x80000000
   15024:	bl	16390 <__assert_fail@plt+0x528c>
   15028:	cmp	r5, r0
   1502c:	movle	r0, #0
   15030:	movgt	r0, #1
   15034:	cmp	r0, #0
   15038:	bne	151f0 <__assert_fail@plt+0x40ec>
   1503c:	mul	r1, r5, r6
   15040:	mov	r0, fp
   15044:	bl	14d5c <__assert_fail@plt+0x3c58>
   15048:	str	r4, [sl]
   1504c:	add	sp, sp, #12
   15050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15054:	rsb	r3, r4, #-2147483648	; 0x80000000
   15058:	cmp	r5, r3
   1505c:	movge	r3, #0
   15060:	movlt	r3, #1
   15064:	b	14f18 <__assert_fail@plt+0x3e14>
   15068:	rsb	r3, r5, #-2147483648	; 0x80000000
   1506c:	cmp	r4, r3
   15070:	movge	r3, #0
   15074:	movlt	r3, #1
   15078:	b	14f18 <__assert_fail@plt+0x3e14>
   1507c:	cmp	r4, #0
   15080:	blt	150a8 <__assert_fail@plt+0x3fa4>
   15084:	cmn	r6, #1
   15088:	beq	150c4 <__assert_fail@plt+0x3fc0>
   1508c:	mov	r1, r6
   15090:	mov	r0, #-2147483648	; 0x80000000
   15094:	bl	16390 <__assert_fail@plt+0x528c>
   15098:	cmp	r0, r4
   1509c:	movge	r0, #0
   150a0:	movlt	r0, #1
   150a4:	b	14f70 <__assert_fail@plt+0x3e6c>
   150a8:	mov	r1, r6
   150ac:	mvn	r0, #-2147483648	; 0x80000000
   150b0:	bl	16390 <__assert_fail@plt+0x528c>
   150b4:	cmp	r0, r4
   150b8:	movle	r0, #0
   150bc:	movgt	r0, #1
   150c0:	b	14f70 <__assert_fail@plt+0x3e6c>
   150c4:	add	r0, r4, #-2147483648	; 0x80000000
   150c8:	cmp	r0, #0
   150cc:	movle	r0, #0
   150d0:	movgt	r0, #1
   150d4:	b	14f70 <__assert_fail@plt+0x3e6c>
   150d8:	cmn	r4, #1
   150dc:	beq	150fc <__assert_fail@plt+0x3ff8>
   150e0:	mov	r1, r4
   150e4:	mov	r0, #-2147483648	; 0x80000000
   150e8:	bl	16390 <__assert_fail@plt+0x528c>
   150ec:	cmp	r6, r0
   150f0:	movle	r0, #0
   150f4:	movgt	r0, #1
   150f8:	b	14f70 <__assert_fail@plt+0x3e6c>
   150fc:	add	r0, r6, #-2147483648	; 0x80000000
   15100:	cmp	r0, #0
   15104:	movle	r0, #0
   15108:	movgt	r0, #1
   1510c:	b	14f70 <__assert_fail@plt+0x3e6c>
   15110:	mul	r1, r6, r4
   15114:	cmp	r1, #63	; 0x3f
   15118:	movle	r3, #64	; 0x40
   1511c:	strle	r3, [sp, #4]
   15120:	bgt	14fa4 <__assert_fail@plt+0x3ea0>
   15124:	b	14f80 <__assert_fail@plt+0x3e7c>
   15128:	mov	r3, #64	; 0x40
   1512c:	str	r3, [sp, #4]
   15130:	b	14f80 <__assert_fail@plt+0x3e7c>
   15134:	rsb	r3, r9, #-2147483648	; 0x80000000
   15138:	cmp	r5, r3
   1513c:	movge	r3, #0
   15140:	movlt	r3, #1
   15144:	b	14fe0 <__assert_fail@plt+0x3edc>
   15148:	rsb	r3, r5, #-2147483648	; 0x80000000
   1514c:	cmp	r9, r3
   15150:	movge	r3, #0
   15154:	movlt	r3, #1
   15158:	b	14fe0 <__assert_fail@plt+0x3edc>
   1515c:	cmp	r5, #0
   15160:	blt	15188 <__assert_fail@plt+0x4084>
   15164:	cmn	r6, #1
   15168:	beq	151a4 <__assert_fail@plt+0x40a0>
   1516c:	mov	r1, r6
   15170:	mov	r0, #-2147483648	; 0x80000000
   15174:	bl	16390 <__assert_fail@plt+0x528c>
   15178:	cmp	r5, r0
   1517c:	movle	r0, #0
   15180:	movgt	r0, #1
   15184:	b	15034 <__assert_fail@plt+0x3f30>
   15188:	mov	r1, r6
   1518c:	mvn	r0, #-2147483648	; 0x80000000
   15190:	bl	16390 <__assert_fail@plt+0x528c>
   15194:	cmp	r5, r0
   15198:	movge	r0, #0
   1519c:	movlt	r0, #1
   151a0:	b	15034 <__assert_fail@plt+0x3f30>
   151a4:	add	r0, r5, #-2147483648	; 0x80000000
   151a8:	cmp	r0, #0
   151ac:	movle	r0, #0
   151b0:	movgt	r0, #1
   151b4:	b	15034 <__assert_fail@plt+0x3f30>
   151b8:	cmn	r5, #1
   151bc:	beq	151dc <__assert_fail@plt+0x40d8>
   151c0:	mov	r1, r5
   151c4:	mov	r0, #-2147483648	; 0x80000000
   151c8:	bl	16390 <__assert_fail@plt+0x528c>
   151cc:	cmp	r6, r0
   151d0:	movle	r0, #0
   151d4:	movgt	r0, #1
   151d8:	b	15034 <__assert_fail@plt+0x3f30>
   151dc:	add	r0, r6, #-2147483648	; 0x80000000
   151e0:	cmp	r0, #0
   151e4:	movle	r0, #0
   151e8:	movgt	r0, #1
   151ec:	b	15034 <__assert_fail@plt+0x3f30>
   151f0:	bl	152cc <__assert_fail@plt+0x41c8>
   151f4:	push	{r4, lr}
   151f8:	bl	15874 <__assert_fail@plt+0x4770>
   151fc:	cmp	r0, #0
   15200:	popne	{r4, pc}
   15204:	bl	152cc <__assert_fail@plt+0x41c8>
   15208:	push	{r4, lr}
   1520c:	mov	r1, #1
   15210:	bl	151f4 <__assert_fail@plt+0x40f0>
   15214:	pop	{r4, pc}
   15218:	push	{r4, lr}
   1521c:	bl	15874 <__assert_fail@plt+0x4770>
   15220:	cmp	r0, #0
   15224:	popne	{r4, pc}
   15228:	bl	152cc <__assert_fail@plt+0x41c8>
   1522c:	push	{r4, lr}
   15230:	mov	r1, #1
   15234:	bl	15218 <__assert_fail@plt+0x4114>
   15238:	pop	{r4, pc}
   1523c:	push	{r4, r5, r6, lr}
   15240:	mov	r5, r0
   15244:	mov	r4, r1
   15248:	mov	r0, r1
   1524c:	bl	14d28 <__assert_fail@plt+0x3c24>
   15250:	mov	r2, r4
   15254:	mov	r1, r5
   15258:	bl	10eb8 <memcpy@plt>
   1525c:	pop	{r4, r5, r6, pc}
   15260:	push	{r4, r5, r6, lr}
   15264:	mov	r5, r0
   15268:	mov	r4, r1
   1526c:	mov	r0, r1
   15270:	bl	14d3c <__assert_fail@plt+0x3c38>
   15274:	mov	r2, r4
   15278:	mov	r1, r5
   1527c:	bl	10eb8 <memcpy@plt>
   15280:	pop	{r4, r5, r6, pc}
   15284:	push	{r4, r5, r6, lr}
   15288:	mov	r5, r0
   1528c:	mov	r4, r1
   15290:	add	r0, r1, #1
   15294:	bl	14d3c <__assert_fail@plt+0x3c38>
   15298:	mov	r2, #0
   1529c:	strb	r2, [r0, r4]
   152a0:	mov	r2, r4
   152a4:	mov	r1, r5
   152a8:	bl	10eb8 <memcpy@plt>
   152ac:	pop	{r4, r5, r6, pc}
   152b0:	push	{r4, lr}
   152b4:	mov	r4, r0
   152b8:	bl	10fd8 <strlen@plt>
   152bc:	add	r1, r0, #1
   152c0:	mov	r0, r4
   152c4:	bl	1523c <__assert_fail@plt+0x4138>
   152c8:	pop	{r4, pc}
   152cc:	push	{r4, lr}
   152d0:	ldr	r3, [pc, #40]	; 15300 <__assert_fail@plt+0x41fc>
   152d4:	ldr	r4, [r3]
   152d8:	mov	r2, #5
   152dc:	ldr	r1, [pc, #32]	; 15304 <__assert_fail@plt+0x4200>
   152e0:	mov	r0, #0
   152e4:	bl	10ef4 <dcgettext@plt>
   152e8:	mov	r3, r0
   152ec:	ldr	r2, [pc, #20]	; 15308 <__assert_fail@plt+0x4204>
   152f0:	mov	r1, #0
   152f4:	mov	r0, r4
   152f8:	bl	10f6c <error@plt>
   152fc:	bl	110ec <abort@plt>
   15300:	andeq	r8, r2, ip, lsl #2
   15304:			; <UNDEFINED> instruction: 0x000174b4
   15308:	strdeq	r6, [r1], -r8
   1530c:	push	{r4, r5, r6, lr}
   15310:	mov	r5, r0
   15314:	subs	r4, r1, #0
   15318:	blt	1536c <__assert_fail@plt+0x4268>
   1531c:	cmp	r4, #0
   15320:	moveq	r3, #0
   15324:	beq	15350 <__assert_fail@plt+0x424c>
   15328:	mov	r2, r4
   1532c:	asr	r3, r4, #31
   15330:	mvn	r0, #0
   15334:	mvn	r1, #0
   15338:	bl	16988 <__assert_fail@plt+0x5884>
   1533c:	ldrd	r2, [r5]
   15340:	cmp	r1, r3
   15344:	cmpeq	r0, r2
   15348:	movcc	r3, #1
   1534c:	movcs	r3, #0
   15350:	cmp	r3, #0
   15354:	beq	1538c <__assert_fail@plt+0x4288>
   15358:	mvn	r2, #0
   1535c:	mvn	r3, #0
   15360:	strd	r2, [r5]
   15364:	mov	r0, #1
   15368:	pop	{r4, r5, r6, pc}
   1536c:	mov	r1, r4
   15370:	mov	r0, #0
   15374:	bl	16390 <__assert_fail@plt+0x528c>
   15378:	ldrd	r2, [r5]
   1537c:	orrs	r3, r2, r3
   15380:	movne	r3, #1
   15384:	moveq	r3, #0
   15388:	b	15350 <__assert_fail@plt+0x424c>
   1538c:	asr	r3, r4, #31
   15390:	ldr	r1, [r5, #4]
   15394:	ldr	r2, [r5]
   15398:	mul	r3, r3, r2
   1539c:	mla	r1, r4, r1, r3
   153a0:	umull	r2, r3, r2, r4
   153a4:	add	r3, r1, r3
   153a8:	strd	r2, [r5]
   153ac:	mov	r0, #0
   153b0:	pop	{r4, r5, r6, pc}
   153b4:	push	{r4, r5, r6, r7, r8, lr}
   153b8:	subs	r4, r2, #0
   153bc:	beq	153ec <__assert_fail@plt+0x42e8>
   153c0:	mov	r7, r1
   153c4:	mov	r6, r0
   153c8:	mov	r5, #0
   153cc:	mov	r1, r7
   153d0:	mov	r0, r6
   153d4:	bl	1530c <__assert_fail@plt+0x4208>
   153d8:	orr	r5, r5, r0
   153dc:	subs	r4, r4, #1
   153e0:	bne	153cc <__assert_fail@plt+0x42c8>
   153e4:	mov	r0, r5
   153e8:	pop	{r4, r5, r6, r7, r8, pc}
   153ec:	mov	r5, #0
   153f0:	b	153e4 <__assert_fail@plt+0x42e0>
   153f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   153f8:	sub	sp, sp, #20
   153fc:	cmp	r2, #36	; 0x24
   15400:	bhi	15440 <__assert_fail@plt+0x433c>
   15404:	mov	r5, r0
   15408:	mov	r6, r1
   1540c:	mov	r7, r2
   15410:	mov	r9, r3
   15414:	cmp	r1, #0
   15418:	addeq	r6, sp, #12
   1541c:	bl	10ff0 <__errno_location@plt>
   15420:	mov	r8, r0
   15424:	mov	r3, #0
   15428:	str	r3, [r0]
   1542c:	ldrb	r4, [r5]
   15430:	bl	10fc0 <__ctype_b_loc@plt>
   15434:	ldr	r1, [r0]
   15438:	mov	r2, r5
   1543c:	b	15458 <__assert_fail@plt+0x4354>
   15440:	ldr	r3, [pc, #1056]	; 15868 <__assert_fail@plt+0x4764>
   15444:	mov	r2, #85	; 0x55
   15448:	ldr	r1, [pc, #1052]	; 1586c <__assert_fail@plt+0x4768>
   1544c:	ldr	r0, [pc, #1052]	; 15870 <__assert_fail@plt+0x476c>
   15450:	bl	11104 <__assert_fail@plt>
   15454:	ldrb	r4, [r2, #1]!
   15458:	lsl	r3, r4, #1
   1545c:	ldrh	r3, [r1, r3]
   15460:	tst	r3, #8192	; 0x2000
   15464:	bne	15454 <__assert_fail@plt+0x4350>
   15468:	cmp	r4, #45	; 0x2d
   1546c:	moveq	r4, #4
   15470:	bne	15480 <__assert_fail@plt+0x437c>
   15474:	mov	r0, r4
   15478:	add	sp, sp, #20
   1547c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15480:	mov	r3, #0
   15484:	mov	r2, r7
   15488:	mov	r1, r6
   1548c:	mov	r0, r5
   15490:	bl	10ec4 <__strtoull_internal@plt>
   15494:	strd	r0, [sp]
   15498:	ldr	r7, [r6]
   1549c:	cmp	r5, r7
   154a0:	beq	154c4 <__assert_fail@plt+0x43c0>
   154a4:	ldr	r3, [r8]
   154a8:	cmp	r3, #0
   154ac:	beq	1550c <__assert_fail@plt+0x4408>
   154b0:	cmp	r3, #34	; 0x22
   154b4:	moveq	r4, #1
   154b8:	beq	15510 <__assert_fail@plt+0x440c>
   154bc:	mov	r4, #4
   154c0:	b	15474 <__assert_fail@plt+0x4370>
   154c4:	ldr	r3, [sp, #48]	; 0x30
   154c8:	cmp	r3, #0
   154cc:	moveq	r4, #4
   154d0:	beq	15474 <__assert_fail@plt+0x4370>
   154d4:	ldrb	r1, [r7]
   154d8:	cmp	r1, #0
   154dc:	moveq	r4, #4
   154e0:	beq	15474 <__assert_fail@plt+0x4370>
   154e4:	mov	r0, r3
   154e8:	bl	10fe4 <strchr@plt>
   154ec:	cmp	r0, #0
   154f0:	moveq	r4, #4
   154f4:	beq	15474 <__assert_fail@plt+0x4370>
   154f8:	mov	r2, #1
   154fc:	mov	r3, #0
   15500:	strd	r2, [sp]
   15504:	mov	r4, #0
   15508:	b	1551c <__assert_fail@plt+0x4418>
   1550c:	mov	r4, #0
   15510:	ldr	r3, [sp, #48]	; 0x30
   15514:	cmp	r3, #0
   15518:	beq	1560c <__assert_fail@plt+0x4508>
   1551c:	ldrb	r5, [r7]
   15520:	cmp	r5, #0
   15524:	beq	157a4 <__assert_fail@plt+0x46a0>
   15528:	mov	r1, r5
   1552c:	ldr	r0, [sp, #48]	; 0x30
   15530:	bl	10fe4 <strchr@plt>
   15534:	cmp	r0, #0
   15538:	beq	15614 <__assert_fail@plt+0x4510>
   1553c:	sub	r3, r5, #69	; 0x45
   15540:	cmp	r3, #47	; 0x2f
   15544:	ldrls	pc, [pc, r3, lsl #2]
   15548:	b	15680 <__assert_fail@plt+0x457c>
   1554c:	andeq	r5, r1, r4, lsr #12
   15550:	andeq	r5, r1, r0, lsl #13
   15554:	andeq	r5, r1, r4, lsr #12
   15558:	andeq	r5, r1, r0, lsl #13
   1555c:	andeq	r5, r1, r0, lsl #13
   15560:	andeq	r5, r1, r0, lsl #13
   15564:	andeq	r5, r1, r4, lsr #12
   15568:	andeq	r5, r1, r0, lsl #13
   1556c:	andeq	r5, r1, r4, lsr #12
   15570:	andeq	r5, r1, r0, lsl #13
   15574:	andeq	r5, r1, r0, lsl #13
   15578:	andeq	r5, r1, r4, lsr #12
   1557c:	andeq	r5, r1, r0, lsl #13
   15580:	andeq	r5, r1, r0, lsl #13
   15584:	andeq	r5, r1, r0, lsl #13
   15588:	andeq	r5, r1, r4, lsr #12
   1558c:	andeq	r5, r1, r0, lsl #13
   15590:	andeq	r5, r1, r0, lsl #13
   15594:	andeq	r5, r1, r0, lsl #13
   15598:	andeq	r5, r1, r0, lsl #13
   1559c:	andeq	r5, r1, r4, lsr #12
   155a0:	andeq	r5, r1, r4, lsr #12
   155a4:	andeq	r5, r1, r0, lsl #13
   155a8:	andeq	r5, r1, r0, lsl #13
   155ac:	andeq	r5, r1, r0, lsl #13
   155b0:	andeq	r5, r1, r0, lsl #13
   155b4:	andeq	r5, r1, r0, lsl #13
   155b8:	andeq	r5, r1, r0, lsl #13
   155bc:	andeq	r5, r1, r0, lsl #13
   155c0:	andeq	r5, r1, r0, lsl #13
   155c4:	andeq	r5, r1, r0, lsl #13
   155c8:	andeq	r5, r1, r0, lsl #13
   155cc:	andeq	r5, r1, r0, lsl #13
   155d0:	andeq	r5, r1, r0, lsl #13
   155d4:	andeq	r5, r1, r4, lsr #12
   155d8:	andeq	r5, r1, r0, lsl #13
   155dc:	andeq	r5, r1, r0, lsl #13
   155e0:	andeq	r5, r1, r0, lsl #13
   155e4:	andeq	r5, r1, r4, lsr #12
   155e8:	andeq	r5, r1, r0, lsl #13
   155ec:	andeq	r5, r1, r4, lsr #12
   155f0:	andeq	r5, r1, r0, lsl #13
   155f4:	andeq	r5, r1, r0, lsl #13
   155f8:	andeq	r5, r1, r0, lsl #13
   155fc:	andeq	r5, r1, r0, lsl #13
   15600:	andeq	r5, r1, r0, lsl #13
   15604:	andeq	r5, r1, r0, lsl #13
   15608:	andeq	r5, r1, r4, lsr #12
   1560c:	strd	r0, [r9]
   15610:	b	15474 <__assert_fail@plt+0x4370>
   15614:	ldrd	r2, [sp]
   15618:	strd	r2, [r9]
   1561c:	orr	r4, r4, #2
   15620:	b	15474 <__assert_fail@plt+0x4370>
   15624:	mov	r1, #48	; 0x30
   15628:	ldr	r0, [sp, #48]	; 0x30
   1562c:	bl	10fe4 <strchr@plt>
   15630:	cmp	r0, #0
   15634:	beq	15770 <__assert_fail@plt+0x466c>
   15638:	ldrb	r3, [r7, #1]
   1563c:	cmp	r3, #68	; 0x44
   15640:	beq	1565c <__assert_fail@plt+0x4558>
   15644:	cmp	r3, #105	; 0x69
   15648:	beq	15668 <__assert_fail@plt+0x4564>
   1564c:	cmp	r3, #66	; 0x42
   15650:	movne	r7, #1
   15654:	movne	r1, #1024	; 0x400
   15658:	bne	15688 <__assert_fail@plt+0x4584>
   1565c:	mov	r7, #2
   15660:	mov	r1, #1000	; 0x3e8
   15664:	b	15688 <__assert_fail@plt+0x4584>
   15668:	ldrb	r7, [r7, #2]
   1566c:	cmp	r7, #66	; 0x42
   15670:	movne	r7, #1
   15674:	moveq	r7, #3
   15678:	mov	r1, #1024	; 0x400
   1567c:	b	15688 <__assert_fail@plt+0x4584>
   15680:	mov	r7, #1
   15684:	mov	r1, #1024	; 0x400
   15688:	sub	r5, r5, #66	; 0x42
   1568c:	cmp	r5, #53	; 0x35
   15690:	ldrls	pc, [pc, r5, lsl #2]
   15694:	b	15850 <__assert_fail@plt+0x474c>
   15698:			; <UNDEFINED> instruction: 0x000157b0
   1569c:	andeq	r5, r1, r0, asr r8
   156a0:	andeq	r5, r1, r0, asr r8
   156a4:	andeq	r5, r1, r0, asr #15
   156a8:	andeq	r5, r1, r0, asr r8
   156ac:	ldrdeq	r5, [r1], -r0
   156b0:	andeq	r5, r1, r0, asr r8
   156b4:	andeq	r5, r1, r0, asr r8
   156b8:	andeq	r5, r1, r0, asr r8
   156bc:	andeq	r5, r1, r0, ror #15
   156c0:	andeq	r5, r1, r0, asr r8
   156c4:	strdeq	r5, [r1], -r0
   156c8:	andeq	r5, r1, r0, asr r8
   156cc:	andeq	r5, r1, r0, asr r8
   156d0:	andeq	r5, r1, r0, lsl #16
   156d4:	andeq	r5, r1, r0, asr r8
   156d8:	andeq	r5, r1, r0, asr r8
   156dc:	andeq	r5, r1, r0, asr r8
   156e0:	andeq	r5, r1, r0, lsl r8
   156e4:	andeq	r5, r1, r0, asr r8
   156e8:	andeq	r5, r1, r0, asr r8
   156ec:	andeq	r5, r1, r0, asr r8
   156f0:	andeq	r5, r1, r0, asr r8
   156f4:	andeq	r5, r1, r0, lsr r8
   156f8:	andeq	r5, r1, r0, asr #16
   156fc:	andeq	r5, r1, r0, asr r8
   15700:	andeq	r5, r1, r0, asr r8
   15704:	andeq	r5, r1, r0, asr r8
   15708:	andeq	r5, r1, r0, asr r8
   1570c:	andeq	r5, r1, r0, asr r8
   15710:	andeq	r5, r1, r0, asr r8
   15714:	andeq	r5, r1, r0, asr r8
   15718:	andeq	r5, r1, ip, ror r7
   1571c:	andeq	r5, r1, r0, ror #16
   15720:	andeq	r5, r1, r0, asr r8
   15724:	andeq	r5, r1, r0, asr r8
   15728:	andeq	r5, r1, r0, asr r8
   1572c:	ldrdeq	r5, [r1], -r0
   15730:	andeq	r5, r1, r0, asr r8
   15734:	andeq	r5, r1, r0, asr r8
   15738:	andeq	r5, r1, r0, asr r8
   1573c:	andeq	r5, r1, r0, ror #15
   15740:	andeq	r5, r1, r0, asr r8
   15744:	strdeq	r5, [r1], -r0
   15748:	andeq	r5, r1, r0, asr r8
   1574c:	andeq	r5, r1, r0, asr r8
   15750:	andeq	r5, r1, r0, asr r8
   15754:	andeq	r5, r1, r0, asr r8
   15758:	andeq	r5, r1, r0, asr r8
   1575c:	andeq	r5, r1, r0, asr r8
   15760:	andeq	r5, r1, r0, lsl r8
   15764:	andeq	r5, r1, r0, asr r8
   15768:	andeq	r5, r1, r0, asr r8
   1576c:	andeq	r5, r1, r0, lsr #16
   15770:	mov	r7, #1
   15774:	mov	r1, #1024	; 0x400
   15778:	b	15688 <__assert_fail@plt+0x4584>
   1577c:	mov	r1, #512	; 0x200
   15780:	mov	r0, sp
   15784:	bl	1530c <__assert_fail@plt+0x4208>
   15788:	orr	r4, r4, r0
   1578c:	ldr	r3, [r6]
   15790:	add	r2, r3, r7
   15794:	str	r2, [r6]
   15798:	ldrb	r3, [r3, r7]
   1579c:	cmp	r3, #0
   157a0:	orrne	r4, r4, #2
   157a4:	ldrd	r2, [sp]
   157a8:	strd	r2, [r9]
   157ac:	b	15474 <__assert_fail@plt+0x4370>
   157b0:	mov	r1, #1024	; 0x400
   157b4:	mov	r0, sp
   157b8:	bl	1530c <__assert_fail@plt+0x4208>
   157bc:	b	15788 <__assert_fail@plt+0x4684>
   157c0:	mov	r2, #6
   157c4:	mov	r0, sp
   157c8:	bl	153b4 <__assert_fail@plt+0x42b0>
   157cc:	b	15788 <__assert_fail@plt+0x4684>
   157d0:	mov	r2, #3
   157d4:	mov	r0, sp
   157d8:	bl	153b4 <__assert_fail@plt+0x42b0>
   157dc:	b	15788 <__assert_fail@plt+0x4684>
   157e0:	mov	r2, #1
   157e4:	mov	r0, sp
   157e8:	bl	153b4 <__assert_fail@plt+0x42b0>
   157ec:	b	15788 <__assert_fail@plt+0x4684>
   157f0:	mov	r2, #2
   157f4:	mov	r0, sp
   157f8:	bl	153b4 <__assert_fail@plt+0x42b0>
   157fc:	b	15788 <__assert_fail@plt+0x4684>
   15800:	mov	r2, #5
   15804:	mov	r0, sp
   15808:	bl	153b4 <__assert_fail@plt+0x42b0>
   1580c:	b	15788 <__assert_fail@plt+0x4684>
   15810:	mov	r2, #4
   15814:	mov	r0, sp
   15818:	bl	153b4 <__assert_fail@plt+0x42b0>
   1581c:	b	15788 <__assert_fail@plt+0x4684>
   15820:	mov	r1, #2
   15824:	mov	r0, sp
   15828:	bl	1530c <__assert_fail@plt+0x4208>
   1582c:	b	15788 <__assert_fail@plt+0x4684>
   15830:	mov	r2, #8
   15834:	mov	r0, sp
   15838:	bl	153b4 <__assert_fail@plt+0x42b0>
   1583c:	b	15788 <__assert_fail@plt+0x4684>
   15840:	mov	r2, #7
   15844:	mov	r0, sp
   15848:	bl	153b4 <__assert_fail@plt+0x42b0>
   1584c:	b	15788 <__assert_fail@plt+0x4684>
   15850:	ldrd	r2, [sp]
   15854:	strd	r2, [r9]
   15858:	orr	r4, r4, #2
   1585c:	b	15474 <__assert_fail@plt+0x4370>
   15860:	mov	r0, #0
   15864:	b	15788 <__assert_fail@plt+0x4684>
   15868:	andeq	r7, r1, r8, asr #9
   1586c:	ldrdeq	r7, [r1], -r4
   15870:	andeq	r7, r1, r4, ror #9
   15874:	push	{r4, lr}
   15878:	mov	r2, r0
   1587c:	mov	r3, r1
   15880:	cmp	r1, #0
   15884:	cmpne	r0, #0
   15888:	moveq	r3, #1
   1588c:	moveq	r2, r3
   15890:	umull	r0, r1, r2, r3
   15894:	cmp	r0, #0
   15898:	cmpge	r1, #0
   1589c:	bne	158b0 <__assert_fail@plt+0x47ac>
   158a0:	mov	r1, r3
   158a4:	mov	r0, r2
   158a8:	bl	10e4c <calloc@plt>
   158ac:	pop	{r4, pc}
   158b0:	bl	10ff0 <__errno_location@plt>
   158b4:	mov	r3, #12
   158b8:	str	r3, [r0]
   158bc:	mov	r0, #0
   158c0:	pop	{r4, pc}
   158c4:	push	{r4, lr}
   158c8:	cmp	r0, #0
   158cc:	moveq	r0, #1
   158d0:	cmp	r0, #0
   158d4:	blt	158e0 <__assert_fail@plt+0x47dc>
   158d8:	bl	10f84 <malloc@plt>
   158dc:	pop	{r4, pc}
   158e0:	bl	10ff0 <__errno_location@plt>
   158e4:	mov	r3, #12
   158e8:	str	r3, [r0]
   158ec:	mov	r0, #0
   158f0:	pop	{r4, pc}
   158f4:	push	{r4, lr}
   158f8:	cmp	r0, #0
   158fc:	beq	15918 <__assert_fail@plt+0x4814>
   15900:	cmp	r1, #0
   15904:	beq	15924 <__assert_fail@plt+0x4820>
   15908:	cmp	r1, #0
   1590c:	blt	15930 <__assert_fail@plt+0x482c>
   15910:	bl	10f00 <realloc@plt>
   15914:	pop	{r4, pc}
   15918:	mov	r0, r1
   1591c:	bl	158c4 <__assert_fail@plt+0x47c0>
   15920:	pop	{r4, pc}
   15924:	bl	1207c <__assert_fail@plt+0xf78>
   15928:	mov	r0, #0
   1592c:	pop	{r4, pc}
   15930:	bl	10ff0 <__errno_location@plt>
   15934:	mov	r3, #12
   15938:	str	r3, [r0]
   1593c:	mov	r0, #0
   15940:	pop	{r4, pc}
   15944:	push	{r4, lr}
   15948:	mov	r0, #1
   1594c:	bl	11678 <__assert_fail@plt+0x574>
   15950:	pop	{r4, pc}
   15954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15958:	sub	sp, sp, #12
   1595c:	str	r0, [sp, #4]
   15960:	mov	r6, r1
   15964:	mov	fp, r2
   15968:	mov	r8, r3
   1596c:	bl	10fd8 <strlen@plt>
   15970:	str	r0, [sp]
   15974:	ldr	r4, [r6]
   15978:	cmp	r4, #0
   1597c:	beq	15a24 <__assert_fail@plt+0x4920>
   15980:	mov	r5, fp
   15984:	mov	sl, #0
   15988:	mvn	r9, #0
   1598c:	mov	r7, sl
   15990:	b	159b0 <__assert_fail@plt+0x48ac>
   15994:	mov	r9, r7
   15998:	b	15a18 <__assert_fail@plt+0x4914>
   1599c:	add	r7, r7, #1
   159a0:	ldr	r4, [r6, #4]!
   159a4:	add	r5, r5, r8
   159a8:	cmp	r4, #0
   159ac:	beq	15a10 <__assert_fail@plt+0x490c>
   159b0:	ldr	r2, [sp]
   159b4:	ldr	r1, [sp, #4]
   159b8:	mov	r0, r4
   159bc:	bl	110e0 <strncmp@plt>
   159c0:	cmp	r0, #0
   159c4:	bne	1599c <__assert_fail@plt+0x4898>
   159c8:	mov	r0, r4
   159cc:	bl	10fd8 <strlen@plt>
   159d0:	ldr	r3, [sp]
   159d4:	cmp	r3, r0
   159d8:	beq	15994 <__assert_fail@plt+0x4890>
   159dc:	cmn	r9, #1
   159e0:	moveq	r9, r7
   159e4:	beq	1599c <__assert_fail@plt+0x4898>
   159e8:	cmp	fp, #0
   159ec:	moveq	sl, #1
   159f0:	beq	1599c <__assert_fail@plt+0x4898>
   159f4:	mov	r2, r8
   159f8:	mov	r1, r5
   159fc:	mla	r0, r8, r9, fp
   15a00:	bl	10edc <memcmp@plt>
   15a04:	cmp	r0, #0
   15a08:	movne	sl, #1
   15a0c:	b	1599c <__assert_fail@plt+0x4898>
   15a10:	cmp	sl, #0
   15a14:	mvnne	r9, #1
   15a18:	mov	r0, r9
   15a1c:	add	sp, sp, #12
   15a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a24:	mvn	r9, #0
   15a28:	b	15a18 <__assert_fail@plt+0x4914>
   15a2c:	push	{r4, r5, r6, lr}
   15a30:	mov	r6, r0
   15a34:	ldr	r0, [r1]
   15a38:	cmp	r0, #0
   15a3c:	beq	15a78 <__assert_fail@plt+0x4974>
   15a40:	mov	r4, r1
   15a44:	mov	r5, #0
   15a48:	mov	r1, r6
   15a4c:	bl	10e70 <strcmp@plt>
   15a50:	cmp	r0, #0
   15a54:	beq	15a70 <__assert_fail@plt+0x496c>
   15a58:	add	r5, r5, #1
   15a5c:	ldr	r0, [r4, #4]!
   15a60:	cmp	r0, #0
   15a64:	bne	15a48 <__assert_fail@plt+0x4944>
   15a68:	mvn	r0, #0
   15a6c:	pop	{r4, r5, r6, pc}
   15a70:	mov	r0, r5
   15a74:	pop	{r4, r5, r6, pc}
   15a78:	mvn	r0, #0
   15a7c:	pop	{r4, r5, r6, pc}
   15a80:	push	{r4, r5, r6, lr}
   15a84:	sub	sp, sp, #8
   15a88:	mov	r5, r0
   15a8c:	mov	r4, r1
   15a90:	cmn	r2, #1
   15a94:	mov	r2, #5
   15a98:	ldreq	r1, [pc, #76]	; 15aec <__assert_fail@plt+0x49e8>
   15a9c:	ldrne	r1, [pc, #76]	; 15af0 <__assert_fail@plt+0x49ec>
   15aa0:	mov	r0, #0
   15aa4:	bl	10ef4 <dcgettext@plt>
   15aa8:	mov	r6, r0
   15aac:	mov	r2, r4
   15ab0:	mov	r1, #8
   15ab4:	mov	r0, #0
   15ab8:	bl	144dc <__assert_fail@plt+0x33d8>
   15abc:	mov	r4, r0
   15ac0:	mov	r1, r5
   15ac4:	mov	r0, #1
   15ac8:	bl	1476c <__assert_fail@plt+0x3668>
   15acc:	str	r0, [sp]
   15ad0:	mov	r3, r4
   15ad4:	mov	r2, r6
   15ad8:	mov	r1, #0
   15adc:	mov	r0, r1
   15ae0:	bl	10f6c <error@plt>
   15ae4:	add	sp, sp, #8
   15ae8:	pop	{r4, r5, r6, pc}
   15aec:	andeq	r7, r1, ip, lsl #10
   15af0:	andeq	r7, r1, r8, lsr #10
   15af4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af8:	mov	r7, r0
   15afc:	mov	r4, r1
   15b00:	mov	r8, r2
   15b04:	mov	r2, #5
   15b08:	ldr	r1, [pc, #224]	; 15bf0 <__assert_fail@plt+0x4aec>
   15b0c:	mov	r0, #0
   15b10:	bl	10ef4 <dcgettext@plt>
   15b14:	ldr	r3, [pc, #216]	; 15bf4 <__assert_fail@plt+0x4af0>
   15b18:	ldr	r1, [r3]
   15b1c:	bl	10e58 <fputs_unlocked@plt>
   15b20:	ldr	r5, [r7]
   15b24:	cmp	r5, #0
   15b28:	beq	15bb8 <__assert_fail@plt+0x4ab4>
   15b2c:	mov	r9, #0
   15b30:	mov	r6, r9
   15b34:	ldr	sl, [pc, #184]	; 15bf4 <__assert_fail@plt+0x4af0>
   15b38:	b	15b74 <__assert_fail@plt+0x4a70>
   15b3c:	ldr	r9, [sl]
   15b40:	mov	r0, r5
   15b44:	bl	1477c <__assert_fail@plt+0x3678>
   15b48:	mov	r3, r0
   15b4c:	ldr	r2, [pc, #164]	; 15bf8 <__assert_fail@plt+0x4af4>
   15b50:	mov	r1, #1
   15b54:	mov	r0, r9
   15b58:	bl	11044 <__fprintf_chk@plt>
   15b5c:	mov	r9, r4
   15b60:	add	r6, r6, #1
   15b64:	ldr	r5, [r7, #4]!
   15b68:	add	r4, r4, r8
   15b6c:	cmp	r5, #0
   15b70:	beq	15bb8 <__assert_fail@plt+0x4ab4>
   15b74:	cmp	r6, #0
   15b78:	beq	15b3c <__assert_fail@plt+0x4a38>
   15b7c:	mov	r2, r8
   15b80:	mov	r1, r4
   15b84:	mov	r0, r9
   15b88:	bl	10edc <memcmp@plt>
   15b8c:	cmp	r0, #0
   15b90:	bne	15b3c <__assert_fail@plt+0x4a38>
   15b94:	ldr	fp, [sl]
   15b98:	mov	r0, r5
   15b9c:	bl	1477c <__assert_fail@plt+0x3678>
   15ba0:	mov	r3, r0
   15ba4:	ldr	r2, [pc, #80]	; 15bfc <__assert_fail@plt+0x4af8>
   15ba8:	mov	r1, #1
   15bac:	mov	r0, fp
   15bb0:	bl	11044 <__fprintf_chk@plt>
   15bb4:	b	15b60 <__assert_fail@plt+0x4a5c>
   15bb8:	ldr	r3, [pc, #52]	; 15bf4 <__assert_fail@plt+0x4af0>
   15bbc:	ldr	r0, [r3]
   15bc0:	ldr	r3, [r0, #20]
   15bc4:	ldr	r2, [r0, #24]
   15bc8:	cmp	r3, r2
   15bcc:	bcs	15be4 <__assert_fail@plt+0x4ae0>
   15bd0:	add	r2, r3, #1
   15bd4:	str	r2, [r0, #20]
   15bd8:	mov	r2, #10
   15bdc:	strb	r2, [r3]
   15be0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15be4:	mov	r1, #10
   15be8:	bl	11074 <__overflow@plt>
   15bec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bf0:	andeq	r7, r1, r8, asr #10
   15bf4:	andeq	r8, r2, r8, ror #2
   15bf8:	andeq	r7, r1, r0, ror #10
   15bfc:	andeq	r7, r1, r8, ror #10
   15c00:	push	{r4, r5, r6, r7, r8, lr}
   15c04:	mov	r7, r0
   15c08:	mov	r5, r1
   15c0c:	mov	r4, r2
   15c10:	mov	r6, r3
   15c14:	ldrb	r3, [sp, #32]
   15c18:	cmp	r3, #0
   15c1c:	beq	15c6c <__assert_fail@plt+0x4b68>
   15c20:	ldr	r3, [sp, #24]
   15c24:	mov	r2, r6
   15c28:	mov	r1, r4
   15c2c:	mov	r0, r5
   15c30:	bl	15954 <__assert_fail@plt+0x4850>
   15c34:	cmp	r0, #0
   15c38:	popge	{r4, r5, r6, r7, r8, pc}
   15c3c:	mov	r2, r0
   15c40:	mov	r1, r5
   15c44:	mov	r0, r7
   15c48:	bl	15a80 <__assert_fail@plt+0x497c>
   15c4c:	ldr	r2, [sp, #24]
   15c50:	mov	r1, r6
   15c54:	mov	r0, r4
   15c58:	bl	15af4 <__assert_fail@plt+0x49f0>
   15c5c:	ldr	r3, [sp, #28]
   15c60:	blx	r3
   15c64:	mvn	r0, #0
   15c68:	pop	{r4, r5, r6, r7, r8, pc}
   15c6c:	mov	r1, r2
   15c70:	mov	r0, r5
   15c74:	bl	15a2c <__assert_fail@plt+0x4928>
   15c78:	b	15c34 <__assert_fail@plt+0x4b30>
   15c7c:	push	{r4, r5, r6, r7, r8, lr}
   15c80:	ldr	r6, [r1]
   15c84:	cmp	r6, #0
   15c88:	beq	15ccc <__assert_fail@plt+0x4bc8>
   15c8c:	mov	r7, r3
   15c90:	mov	r8, r0
   15c94:	mov	r4, r2
   15c98:	mov	r5, r1
   15c9c:	mov	r2, r7
   15ca0:	mov	r1, r4
   15ca4:	mov	r0, r8
   15ca8:	bl	10edc <memcmp@plt>
   15cac:	cmp	r0, #0
   15cb0:	beq	15cc4 <__assert_fail@plt+0x4bc0>
   15cb4:	ldr	r6, [r5, #4]!
   15cb8:	add	r4, r4, r7
   15cbc:	cmp	r6, #0
   15cc0:	bne	15c9c <__assert_fail@plt+0x4b98>
   15cc4:	mov	r0, r6
   15cc8:	pop	{r4, r5, r6, r7, r8, pc}
   15ccc:	mov	r6, #0
   15cd0:	b	15cc4 <__assert_fail@plt+0x4bc0>
   15cd4:	push	{r4, r5, r6, lr}
   15cd8:	mov	r5, r0
   15cdc:	bl	10f54 <__fpending@plt>
   15ce0:	mov	r6, r0
   15ce4:	ldr	r4, [r5]
   15ce8:	and	r4, r4, #32
   15cec:	mov	r0, r5
   15cf0:	bl	11ed4 <__assert_fail@plt+0xdd0>
   15cf4:	cmp	r4, #0
   15cf8:	bne	15d20 <__assert_fail@plt+0x4c1c>
   15cfc:	cmp	r0, #0
   15d00:	popeq	{r4, r5, r6, pc}
   15d04:	cmp	r6, #0
   15d08:	bne	15d3c <__assert_fail@plt+0x4c38>
   15d0c:	bl	10ff0 <__errno_location@plt>
   15d10:	ldr	r0, [r0]
   15d14:	subs	r0, r0, #9
   15d18:	mvnne	r0, #0
   15d1c:	pop	{r4, r5, r6, pc}
   15d20:	cmp	r0, #0
   15d24:	bne	15d44 <__assert_fail@plt+0x4c40>
   15d28:	bl	10ff0 <__errno_location@plt>
   15d2c:	mov	r3, #0
   15d30:	str	r3, [r0]
   15d34:	mvn	r0, #0
   15d38:	pop	{r4, r5, r6, pc}
   15d3c:	mvn	r0, #0
   15d40:	pop	{r4, r5, r6, pc}
   15d44:	mvn	r0, #0
   15d48:	pop	{r4, r5, r6, pc}
   15d4c:	push	{r1, r2, r3}
   15d50:	push	{r4, r5, r6, lr}
   15d54:	sub	sp, sp, #12
   15d58:	mov	r5, r0
   15d5c:	ldr	r1, [sp, #28]
   15d60:	add	r3, sp, #32
   15d64:	str	r3, [sp, #4]
   15d68:	cmp	r1, #0
   15d6c:	beq	15db4 <__assert_fail@plt+0x4cb0>
   15d70:	ldr	r3, [pc, #540]	; 15f94 <__assert_fail@plt+0x4e90>
   15d74:	cmp	r1, r3
   15d78:	beq	15de4 <__assert_fail@plt+0x4ce0>
   15d7c:	cmp	r1, #11
   15d80:	beq	15f84 <__assert_fail@plt+0x4e80>
   15d84:	bgt	15f10 <__assert_fail@plt+0x4e0c>
   15d88:	cmp	r1, #3
   15d8c:	beq	15f84 <__assert_fail@plt+0x4e80>
   15d90:	ble	15ed0 <__assert_fail@plt+0x4dcc>
   15d94:	cmp	r1, #8
   15d98:	beq	15ef0 <__assert_fail@plt+0x4dec>
   15d9c:	ble	15ee8 <__assert_fail@plt+0x4de4>
   15da0:	cmp	r1, #9
   15da4:	beq	15f84 <__assert_fail@plt+0x4e80>
   15da8:	cmp	r1, #10
   15dac:	bne	15f48 <__assert_fail@plt+0x4e44>
   15db0:	b	15ef0 <__assert_fail@plt+0x4dec>
   15db4:	ldr	r3, [sp, #4]
   15db8:	add	r2, r3, #4
   15dbc:	str	r2, [sp, #4]
   15dc0:	ldr	r2, [r3]
   15dc4:	mov	r1, #0
   15dc8:	bl	11068 <fcntl64@plt>
   15dcc:	mov	r4, r0
   15dd0:	mov	r0, r4
   15dd4:	add	sp, sp, #12
   15dd8:	pop	{r4, r5, r6, lr}
   15ddc:	add	sp, sp, #12
   15de0:	bx	lr
   15de4:	ldr	r3, [sp, #4]
   15de8:	add	r2, r3, #4
   15dec:	str	r2, [sp, #4]
   15df0:	ldr	r6, [r3]
   15df4:	ldr	r3, [pc, #412]	; 15f98 <__assert_fail@plt+0x4e94>
   15df8:	ldr	r3, [r3]
   15dfc:	cmp	r3, #0
   15e00:	blt	15e60 <__assert_fail@plt+0x4d5c>
   15e04:	mov	r2, r6
   15e08:	ldr	r1, [pc, #388]	; 15f94 <__assert_fail@plt+0x4e90>
   15e0c:	bl	11068 <fcntl64@plt>
   15e10:	subs	r4, r0, #0
   15e14:	blt	15e28 <__assert_fail@plt+0x4d24>
   15e18:	mov	r2, #1
   15e1c:	ldr	r3, [pc, #372]	; 15f98 <__assert_fail@plt+0x4e94>
   15e20:	str	r2, [r3]
   15e24:	b	15dd0 <__assert_fail@plt+0x4ccc>
   15e28:	bl	10ff0 <__errno_location@plt>
   15e2c:	ldr	r3, [r0]
   15e30:	cmp	r3, #22
   15e34:	bne	15e18 <__assert_fail@plt+0x4d14>
   15e38:	mov	r2, r6
   15e3c:	mov	r1, #0
   15e40:	mov	r0, r5
   15e44:	bl	11068 <fcntl64@plt>
   15e48:	subs	r4, r0, #0
   15e4c:	blt	15dd0 <__assert_fail@plt+0x4ccc>
   15e50:	mvn	r2, #0
   15e54:	ldr	r3, [pc, #316]	; 15f98 <__assert_fail@plt+0x4e94>
   15e58:	str	r2, [r3]
   15e5c:	b	15e84 <__assert_fail@plt+0x4d80>
   15e60:	mov	r2, r6
   15e64:	mov	r1, #0
   15e68:	bl	11068 <fcntl64@plt>
   15e6c:	subs	r4, r0, #0
   15e70:	blt	15dd0 <__assert_fail@plt+0x4ccc>
   15e74:	ldr	r3, [pc, #284]	; 15f98 <__assert_fail@plt+0x4e94>
   15e78:	ldr	r3, [r3]
   15e7c:	cmn	r3, #1
   15e80:	bne	15dd0 <__assert_fail@plt+0x4ccc>
   15e84:	mov	r1, #1
   15e88:	mov	r0, r4
   15e8c:	bl	11068 <fcntl64@plt>
   15e90:	subs	r2, r0, #0
   15e94:	blt	15eb0 <__assert_fail@plt+0x4dac>
   15e98:	orr	r2, r2, #1
   15e9c:	mov	r1, #2
   15ea0:	mov	r0, r4
   15ea4:	bl	11068 <fcntl64@plt>
   15ea8:	cmn	r0, #1
   15eac:	bne	15dd0 <__assert_fail@plt+0x4ccc>
   15eb0:	bl	10ff0 <__errno_location@plt>
   15eb4:	mov	r5, r0
   15eb8:	ldr	r6, [r0]
   15ebc:	mov	r0, r4
   15ec0:	bl	110f8 <close@plt>
   15ec4:	str	r6, [r5]
   15ec8:	mvn	r4, #0
   15ecc:	b	15dd0 <__assert_fail@plt+0x4ccc>
   15ed0:	cmp	r1, #1
   15ed4:	beq	15f84 <__assert_fail@plt+0x4e80>
   15ed8:	bgt	15ef0 <__assert_fail@plt+0x4dec>
   15edc:	cmp	r1, #0
   15ee0:	bne	15f48 <__assert_fail@plt+0x4e44>
   15ee4:	b	15ef0 <__assert_fail@plt+0x4dec>
   15ee8:	cmp	r1, #4
   15eec:	bne	15f48 <__assert_fail@plt+0x4e44>
   15ef0:	ldr	r3, [sp, #4]
   15ef4:	add	r2, r3, #4
   15ef8:	str	r2, [sp, #4]
   15efc:	ldr	r2, [r3]
   15f00:	mov	r0, r5
   15f04:	bl	11068 <fcntl64@plt>
   15f08:	mov	r4, r0
   15f0c:	b	15dd0 <__assert_fail@plt+0x4ccc>
   15f10:	ldr	r3, [pc, #132]	; 15f9c <__assert_fail@plt+0x4e98>
   15f14:	cmp	r1, r3
   15f18:	bgt	15f68 <__assert_fail@plt+0x4e64>
   15f1c:	sub	r3, r3, #1
   15f20:	cmp	r1, r3
   15f24:	bge	15ef0 <__assert_fail@plt+0x4dec>
   15f28:	sub	r3, r3, #5
   15f2c:	cmp	r1, r3
   15f30:	beq	15f84 <__assert_fail@plt+0x4e80>
   15f34:	add	r3, r3, #1
   15f38:	cmp	r1, r3
   15f3c:	beq	15ef0 <__assert_fail@plt+0x4dec>
   15f40:	cmp	r1, #1024	; 0x400
   15f44:	beq	15ef0 <__assert_fail@plt+0x4dec>
   15f48:	ldr	r3, [sp, #4]
   15f4c:	add	r2, r3, #4
   15f50:	str	r2, [sp, #4]
   15f54:	ldr	r2, [r3]
   15f58:	mov	r0, r5
   15f5c:	bl	11068 <fcntl64@plt>
   15f60:	mov	r4, r0
   15f64:	b	15dd0 <__assert_fail@plt+0x4ccc>
   15f68:	ldr	r3, [pc, #48]	; 15fa0 <__assert_fail@plt+0x4e9c>
   15f6c:	cmp	r1, r3
   15f70:	beq	15ef0 <__assert_fail@plt+0x4dec>
   15f74:	blt	15f84 <__assert_fail@plt+0x4e80>
   15f78:	add	r3, r3, #1
   15f7c:	cmp	r1, r3
   15f80:	bne	15f48 <__assert_fail@plt+0x4e44>
   15f84:	mov	r0, r5
   15f88:	bl	11068 <fcntl64@plt>
   15f8c:	mov	r4, r0
   15f90:	b	15dd0 <__assert_fail@plt+0x4ccc>
   15f94:	andeq	r0, r0, r6, lsl #8
   15f98:	andeq	r8, r2, r0, asr #5
   15f9c:	andeq	r0, r0, r7, lsl #8
   15fa0:	andeq	r0, r0, r9, lsl #8
   15fa4:	push	{r4, lr}
   15fa8:	mov	r0, #14
   15fac:	bl	11098 <nl_langinfo@plt>
   15fb0:	cmp	r0, #0
   15fb4:	beq	15fcc <__assert_fail@plt+0x4ec8>
   15fb8:	ldrb	r2, [r0]
   15fbc:	ldr	r3, [pc, #16]	; 15fd4 <__assert_fail@plt+0x4ed0>
   15fc0:	cmp	r2, #0
   15fc4:	moveq	r0, r3
   15fc8:	pop	{r4, pc}
   15fcc:	ldr	r0, [pc]	; 15fd4 <__assert_fail@plt+0x4ed0>
   15fd0:	pop	{r4, pc}
   15fd4:	andeq	r7, r1, r0, ror r5
   15fd8:	push	{r4, r5, r6, r7, lr}
   15fdc:	sub	sp, sp, #12
   15fe0:	mov	r7, r1
   15fe4:	mov	r5, r2
   15fe8:	subs	r6, r0, #0
   15fec:	addeq	r6, sp, #4
   15ff0:	mov	r0, r6
   15ff4:	bl	10f60 <mbrtowc@plt>
   15ff8:	mov	r4, r0
   15ffc:	cmp	r5, #0
   16000:	cmnne	r0, #3
   16004:	bhi	16014 <__assert_fail@plt+0x4f10>
   16008:	mov	r0, r4
   1600c:	add	sp, sp, #12
   16010:	pop	{r4, r5, r6, r7, pc}
   16014:	mov	r0, #0
   16018:	bl	1607c <__assert_fail@plt+0x4f78>
   1601c:	cmp	r0, #0
   16020:	ldrbeq	r3, [r7]
   16024:	streq	r3, [r6]
   16028:	moveq	r4, #1
   1602c:	b	16008 <__assert_fail@plt+0x4f04>
   16030:	push	{r4, r5, r6, lr}
   16034:	mov	r6, r0
   16038:	mov	r5, r1
   1603c:	subs	r4, r2, #0
   16040:	beq	1606c <__assert_fail@plt+0x4f68>
   16044:	mov	r1, r4
   16048:	mvn	r0, #0
   1604c:	bl	16184 <__assert_fail@plt+0x5080>
   16050:	cmp	r0, r5
   16054:	bcs	1606c <__assert_fail@plt+0x4f68>
   16058:	bl	10ff0 <__errno_location@plt>
   1605c:	mov	r3, #12
   16060:	str	r3, [r0]
   16064:	mov	r0, #0
   16068:	pop	{r4, r5, r6, pc}
   1606c:	mul	r1, r5, r4
   16070:	mov	r0, r6
   16074:	bl	158f4 <__assert_fail@plt+0x47f0>
   16078:	pop	{r4, r5, r6, pc}
   1607c:	push	{lr}		; (str lr, [sp, #-4]!)
   16080:	sub	sp, sp, #268	; 0x10c
   16084:	ldr	r2, [pc, #68]	; 160d0 <__assert_fail@plt+0x4fcc>
   16088:	add	r1, sp, #4
   1608c:	bl	160dc <__assert_fail@plt+0x4fd8>
   16090:	cmp	r0, #0
   16094:	movne	r0, #0
   16098:	bne	160c8 <__assert_fail@plt+0x4fc4>
   1609c:	ldr	r1, [pc, #48]	; 160d4 <__assert_fail@plt+0x4fd0>
   160a0:	add	r0, sp, #4
   160a4:	bl	10e70 <strcmp@plt>
   160a8:	cmp	r0, #0
   160ac:	moveq	r0, #0
   160b0:	beq	160c8 <__assert_fail@plt+0x4fc4>
   160b4:	ldr	r1, [pc, #28]	; 160d8 <__assert_fail@plt+0x4fd4>
   160b8:	add	r0, sp, #4
   160bc:	bl	10e70 <strcmp@plt>
   160c0:	adds	r0, r0, #0
   160c4:	movne	r0, #1
   160c8:	add	sp, sp, #268	; 0x10c
   160cc:	pop	{pc}		; (ldr pc, [sp], #4)
   160d0:	andeq	r0, r0, r1, lsl #2
   160d4:	andeq	r7, r1, r8, ror r5
   160d8:	andeq	r7, r1, ip, ror r5
   160dc:	push	{r4, r5, r6, lr}
   160e0:	mov	r6, r1
   160e4:	mov	r4, r2
   160e8:	mov	r1, #0
   160ec:	bl	11080 <setlocale@plt>
   160f0:	subs	r5, r0, #0
   160f4:	beq	16118 <__assert_fail@plt+0x5014>
   160f8:	mov	r0, r5
   160fc:	bl	10fd8 <strlen@plt>
   16100:	cmp	r4, r0
   16104:	bhi	16130 <__assert_fail@plt+0x502c>
   16108:	cmp	r4, #0
   1610c:	bne	16148 <__assert_fail@plt+0x5044>
   16110:	mov	r0, #34	; 0x22
   16114:	pop	{r4, r5, r6, pc}
   16118:	cmp	r4, #0
   1611c:	beq	1616c <__assert_fail@plt+0x5068>
   16120:	mov	r3, #0
   16124:	strb	r3, [r6]
   16128:	mov	r0, #22
   1612c:	pop	{r4, r5, r6, pc}
   16130:	add	r2, r0, #1
   16134:	mov	r1, r5
   16138:	mov	r0, r6
   1613c:	bl	10eb8 <memcpy@plt>
   16140:	mov	r0, #0
   16144:	pop	{r4, r5, r6, pc}
   16148:	sub	r4, r4, #1
   1614c:	mov	r2, r4
   16150:	mov	r1, r5
   16154:	mov	r0, r6
   16158:	bl	10eb8 <memcpy@plt>
   1615c:	mov	r3, #0
   16160:	strb	r3, [r6, r4]
   16164:	mov	r0, #34	; 0x22
   16168:	pop	{r4, r5, r6, pc}
   1616c:	mov	r0, #22
   16170:	pop	{r4, r5, r6, pc}
   16174:	push	{r4, lr}
   16178:	mov	r1, #0
   1617c:	bl	11080 <setlocale@plt>
   16180:	pop	{r4, pc}
   16184:	subs	r2, r1, #1
   16188:	bxeq	lr
   1618c:	bcc	16364 <__assert_fail@plt+0x5260>
   16190:	cmp	r0, r1
   16194:	bls	16348 <__assert_fail@plt+0x5244>
   16198:	tst	r1, r2
   1619c:	beq	16354 <__assert_fail@plt+0x5250>
   161a0:	clz	r3, r0
   161a4:	clz	r2, r1
   161a8:	sub	r3, r2, r3
   161ac:	rsbs	r3, r3, #31
   161b0:	addne	r3, r3, r3, lsl #1
   161b4:	mov	r2, #0
   161b8:	addne	pc, pc, r3, lsl #2
   161bc:	nop			; (mov r0, r0)
   161c0:	cmp	r0, r1, lsl #31
   161c4:	adc	r2, r2, r2
   161c8:	subcs	r0, r0, r1, lsl #31
   161cc:	cmp	r0, r1, lsl #30
   161d0:	adc	r2, r2, r2
   161d4:	subcs	r0, r0, r1, lsl #30
   161d8:	cmp	r0, r1, lsl #29
   161dc:	adc	r2, r2, r2
   161e0:	subcs	r0, r0, r1, lsl #29
   161e4:	cmp	r0, r1, lsl #28
   161e8:	adc	r2, r2, r2
   161ec:	subcs	r0, r0, r1, lsl #28
   161f0:	cmp	r0, r1, lsl #27
   161f4:	adc	r2, r2, r2
   161f8:	subcs	r0, r0, r1, lsl #27
   161fc:	cmp	r0, r1, lsl #26
   16200:	adc	r2, r2, r2
   16204:	subcs	r0, r0, r1, lsl #26
   16208:	cmp	r0, r1, lsl #25
   1620c:	adc	r2, r2, r2
   16210:	subcs	r0, r0, r1, lsl #25
   16214:	cmp	r0, r1, lsl #24
   16218:	adc	r2, r2, r2
   1621c:	subcs	r0, r0, r1, lsl #24
   16220:	cmp	r0, r1, lsl #23
   16224:	adc	r2, r2, r2
   16228:	subcs	r0, r0, r1, lsl #23
   1622c:	cmp	r0, r1, lsl #22
   16230:	adc	r2, r2, r2
   16234:	subcs	r0, r0, r1, lsl #22
   16238:	cmp	r0, r1, lsl #21
   1623c:	adc	r2, r2, r2
   16240:	subcs	r0, r0, r1, lsl #21
   16244:	cmp	r0, r1, lsl #20
   16248:	adc	r2, r2, r2
   1624c:	subcs	r0, r0, r1, lsl #20
   16250:	cmp	r0, r1, lsl #19
   16254:	adc	r2, r2, r2
   16258:	subcs	r0, r0, r1, lsl #19
   1625c:	cmp	r0, r1, lsl #18
   16260:	adc	r2, r2, r2
   16264:	subcs	r0, r0, r1, lsl #18
   16268:	cmp	r0, r1, lsl #17
   1626c:	adc	r2, r2, r2
   16270:	subcs	r0, r0, r1, lsl #17
   16274:	cmp	r0, r1, lsl #16
   16278:	adc	r2, r2, r2
   1627c:	subcs	r0, r0, r1, lsl #16
   16280:	cmp	r0, r1, lsl #15
   16284:	adc	r2, r2, r2
   16288:	subcs	r0, r0, r1, lsl #15
   1628c:	cmp	r0, r1, lsl #14
   16290:	adc	r2, r2, r2
   16294:	subcs	r0, r0, r1, lsl #14
   16298:	cmp	r0, r1, lsl #13
   1629c:	adc	r2, r2, r2
   162a0:	subcs	r0, r0, r1, lsl #13
   162a4:	cmp	r0, r1, lsl #12
   162a8:	adc	r2, r2, r2
   162ac:	subcs	r0, r0, r1, lsl #12
   162b0:	cmp	r0, r1, lsl #11
   162b4:	adc	r2, r2, r2
   162b8:	subcs	r0, r0, r1, lsl #11
   162bc:	cmp	r0, r1, lsl #10
   162c0:	adc	r2, r2, r2
   162c4:	subcs	r0, r0, r1, lsl #10
   162c8:	cmp	r0, r1, lsl #9
   162cc:	adc	r2, r2, r2
   162d0:	subcs	r0, r0, r1, lsl #9
   162d4:	cmp	r0, r1, lsl #8
   162d8:	adc	r2, r2, r2
   162dc:	subcs	r0, r0, r1, lsl #8
   162e0:	cmp	r0, r1, lsl #7
   162e4:	adc	r2, r2, r2
   162e8:	subcs	r0, r0, r1, lsl #7
   162ec:	cmp	r0, r1, lsl #6
   162f0:	adc	r2, r2, r2
   162f4:	subcs	r0, r0, r1, lsl #6
   162f8:	cmp	r0, r1, lsl #5
   162fc:	adc	r2, r2, r2
   16300:	subcs	r0, r0, r1, lsl #5
   16304:	cmp	r0, r1, lsl #4
   16308:	adc	r2, r2, r2
   1630c:	subcs	r0, r0, r1, lsl #4
   16310:	cmp	r0, r1, lsl #3
   16314:	adc	r2, r2, r2
   16318:	subcs	r0, r0, r1, lsl #3
   1631c:	cmp	r0, r1, lsl #2
   16320:	adc	r2, r2, r2
   16324:	subcs	r0, r0, r1, lsl #2
   16328:	cmp	r0, r1, lsl #1
   1632c:	adc	r2, r2, r2
   16330:	subcs	r0, r0, r1, lsl #1
   16334:	cmp	r0, r1
   16338:	adc	r2, r2, r2
   1633c:	subcs	r0, r0, r1
   16340:	mov	r0, r2
   16344:	bx	lr
   16348:	moveq	r0, #1
   1634c:	movne	r0, #0
   16350:	bx	lr
   16354:	clz	r2, r1
   16358:	rsb	r2, r2, #31
   1635c:	lsr	r0, r0, r2
   16360:	bx	lr
   16364:	cmp	r0, #0
   16368:	mvnne	r0, #0
   1636c:	b	169c4 <__assert_fail@plt+0x58c0>
   16370:	cmp	r1, #0
   16374:	beq	16364 <__assert_fail@plt+0x5260>
   16378:	push	{r0, r1, lr}
   1637c:	bl	16184 <__assert_fail@plt+0x5080>
   16380:	pop	{r1, r2, lr}
   16384:	mul	r3, r2, r0
   16388:	sub	r1, r1, r3
   1638c:	bx	lr
   16390:	cmp	r1, #0
   16394:	beq	165a0 <__assert_fail@plt+0x549c>
   16398:	eor	ip, r0, r1
   1639c:	rsbmi	r1, r1, #0
   163a0:	subs	r2, r1, #1
   163a4:	beq	1656c <__assert_fail@plt+0x5468>
   163a8:	movs	r3, r0
   163ac:	rsbmi	r3, r0, #0
   163b0:	cmp	r3, r1
   163b4:	bls	16578 <__assert_fail@plt+0x5474>
   163b8:	tst	r1, r2
   163bc:	beq	16588 <__assert_fail@plt+0x5484>
   163c0:	clz	r2, r3
   163c4:	clz	r0, r1
   163c8:	sub	r2, r0, r2
   163cc:	rsbs	r2, r2, #31
   163d0:	addne	r2, r2, r2, lsl #1
   163d4:	mov	r0, #0
   163d8:	addne	pc, pc, r2, lsl #2
   163dc:	nop			; (mov r0, r0)
   163e0:	cmp	r3, r1, lsl #31
   163e4:	adc	r0, r0, r0
   163e8:	subcs	r3, r3, r1, lsl #31
   163ec:	cmp	r3, r1, lsl #30
   163f0:	adc	r0, r0, r0
   163f4:	subcs	r3, r3, r1, lsl #30
   163f8:	cmp	r3, r1, lsl #29
   163fc:	adc	r0, r0, r0
   16400:	subcs	r3, r3, r1, lsl #29
   16404:	cmp	r3, r1, lsl #28
   16408:	adc	r0, r0, r0
   1640c:	subcs	r3, r3, r1, lsl #28
   16410:	cmp	r3, r1, lsl #27
   16414:	adc	r0, r0, r0
   16418:	subcs	r3, r3, r1, lsl #27
   1641c:	cmp	r3, r1, lsl #26
   16420:	adc	r0, r0, r0
   16424:	subcs	r3, r3, r1, lsl #26
   16428:	cmp	r3, r1, lsl #25
   1642c:	adc	r0, r0, r0
   16430:	subcs	r3, r3, r1, lsl #25
   16434:	cmp	r3, r1, lsl #24
   16438:	adc	r0, r0, r0
   1643c:	subcs	r3, r3, r1, lsl #24
   16440:	cmp	r3, r1, lsl #23
   16444:	adc	r0, r0, r0
   16448:	subcs	r3, r3, r1, lsl #23
   1644c:	cmp	r3, r1, lsl #22
   16450:	adc	r0, r0, r0
   16454:	subcs	r3, r3, r1, lsl #22
   16458:	cmp	r3, r1, lsl #21
   1645c:	adc	r0, r0, r0
   16460:	subcs	r3, r3, r1, lsl #21
   16464:	cmp	r3, r1, lsl #20
   16468:	adc	r0, r0, r0
   1646c:	subcs	r3, r3, r1, lsl #20
   16470:	cmp	r3, r1, lsl #19
   16474:	adc	r0, r0, r0
   16478:	subcs	r3, r3, r1, lsl #19
   1647c:	cmp	r3, r1, lsl #18
   16480:	adc	r0, r0, r0
   16484:	subcs	r3, r3, r1, lsl #18
   16488:	cmp	r3, r1, lsl #17
   1648c:	adc	r0, r0, r0
   16490:	subcs	r3, r3, r1, lsl #17
   16494:	cmp	r3, r1, lsl #16
   16498:	adc	r0, r0, r0
   1649c:	subcs	r3, r3, r1, lsl #16
   164a0:	cmp	r3, r1, lsl #15
   164a4:	adc	r0, r0, r0
   164a8:	subcs	r3, r3, r1, lsl #15
   164ac:	cmp	r3, r1, lsl #14
   164b0:	adc	r0, r0, r0
   164b4:	subcs	r3, r3, r1, lsl #14
   164b8:	cmp	r3, r1, lsl #13
   164bc:	adc	r0, r0, r0
   164c0:	subcs	r3, r3, r1, lsl #13
   164c4:	cmp	r3, r1, lsl #12
   164c8:	adc	r0, r0, r0
   164cc:	subcs	r3, r3, r1, lsl #12
   164d0:	cmp	r3, r1, lsl #11
   164d4:	adc	r0, r0, r0
   164d8:	subcs	r3, r3, r1, lsl #11
   164dc:	cmp	r3, r1, lsl #10
   164e0:	adc	r0, r0, r0
   164e4:	subcs	r3, r3, r1, lsl #10
   164e8:	cmp	r3, r1, lsl #9
   164ec:	adc	r0, r0, r0
   164f0:	subcs	r3, r3, r1, lsl #9
   164f4:	cmp	r3, r1, lsl #8
   164f8:	adc	r0, r0, r0
   164fc:	subcs	r3, r3, r1, lsl #8
   16500:	cmp	r3, r1, lsl #7
   16504:	adc	r0, r0, r0
   16508:	subcs	r3, r3, r1, lsl #7
   1650c:	cmp	r3, r1, lsl #6
   16510:	adc	r0, r0, r0
   16514:	subcs	r3, r3, r1, lsl #6
   16518:	cmp	r3, r1, lsl #5
   1651c:	adc	r0, r0, r0
   16520:	subcs	r3, r3, r1, lsl #5
   16524:	cmp	r3, r1, lsl #4
   16528:	adc	r0, r0, r0
   1652c:	subcs	r3, r3, r1, lsl #4
   16530:	cmp	r3, r1, lsl #3
   16534:	adc	r0, r0, r0
   16538:	subcs	r3, r3, r1, lsl #3
   1653c:	cmp	r3, r1, lsl #2
   16540:	adc	r0, r0, r0
   16544:	subcs	r3, r3, r1, lsl #2
   16548:	cmp	r3, r1, lsl #1
   1654c:	adc	r0, r0, r0
   16550:	subcs	r3, r3, r1, lsl #1
   16554:	cmp	r3, r1
   16558:	adc	r0, r0, r0
   1655c:	subcs	r3, r3, r1
   16560:	cmp	ip, #0
   16564:	rsbmi	r0, r0, #0
   16568:	bx	lr
   1656c:	teq	ip, r0
   16570:	rsbmi	r0, r0, #0
   16574:	bx	lr
   16578:	movcc	r0, #0
   1657c:	asreq	r0, ip, #31
   16580:	orreq	r0, r0, #1
   16584:	bx	lr
   16588:	clz	r2, r1
   1658c:	rsb	r2, r2, #31
   16590:	cmp	ip, #0
   16594:	lsr	r0, r3, r2
   16598:	rsbmi	r0, r0, #0
   1659c:	bx	lr
   165a0:	cmp	r0, #0
   165a4:	mvngt	r0, #-2147483648	; 0x80000000
   165a8:	movlt	r0, #-2147483648	; 0x80000000
   165ac:	b	169c4 <__assert_fail@plt+0x58c0>
   165b0:	cmp	r1, #0
   165b4:	beq	165a0 <__assert_fail@plt+0x549c>
   165b8:	push	{r0, r1, lr}
   165bc:	bl	16398 <__assert_fail@plt+0x5294>
   165c0:	pop	{r1, r2, lr}
   165c4:	mul	r3, r2, r0
   165c8:	sub	r1, r1, r3
   165cc:	bx	lr
   165d0:	eor	r1, r1, #-2147483648	; 0x80000000
   165d4:	b	165dc <__assert_fail@plt+0x54d8>
   165d8:	eor	r3, r3, #-2147483648	; 0x80000000
   165dc:	push	{r4, r5, lr}
   165e0:	lsl	r4, r1, #1
   165e4:	lsl	r5, r3, #1
   165e8:	teq	r4, r5
   165ec:	teqeq	r0, r2
   165f0:	orrsne	ip, r4, r0
   165f4:	orrsne	ip, r5, r2
   165f8:	mvnsne	ip, r4, asr #21
   165fc:	mvnsne	ip, r5, asr #21
   16600:	beq	167ec <__assert_fail@plt+0x56e8>
   16604:	lsr	r4, r4, #21
   16608:	rsbs	r5, r4, r5, lsr #21
   1660c:	rsblt	r5, r5, #0
   16610:	ble	16630 <__assert_fail@plt+0x552c>
   16614:	add	r4, r4, r5
   16618:	eor	r2, r0, r2
   1661c:	eor	r3, r1, r3
   16620:	eor	r0, r2, r0
   16624:	eor	r1, r3, r1
   16628:	eor	r2, r0, r2
   1662c:	eor	r3, r1, r3
   16630:	cmp	r5, #54	; 0x36
   16634:	pophi	{r4, r5, pc}
   16638:	tst	r1, #-2147483648	; 0x80000000
   1663c:	lsl	r1, r1, #12
   16640:	mov	ip, #1048576	; 0x100000
   16644:	orr	r1, ip, r1, lsr #12
   16648:	beq	16654 <__assert_fail@plt+0x5550>
   1664c:	rsbs	r0, r0, #0
   16650:	rsc	r1, r1, #0
   16654:	tst	r3, #-2147483648	; 0x80000000
   16658:	lsl	r3, r3, #12
   1665c:	orr	r3, ip, r3, lsr #12
   16660:	beq	1666c <__assert_fail@plt+0x5568>
   16664:	rsbs	r2, r2, #0
   16668:	rsc	r3, r3, #0
   1666c:	teq	r4, r5
   16670:	beq	167d4 <__assert_fail@plt+0x56d0>
   16674:	sub	r4, r4, #1
   16678:	rsbs	lr, r5, #32
   1667c:	blt	16698 <__assert_fail@plt+0x5594>
   16680:	lsl	ip, r2, lr
   16684:	adds	r0, r0, r2, lsr r5
   16688:	adc	r1, r1, #0
   1668c:	adds	r0, r0, r3, lsl lr
   16690:	adcs	r1, r1, r3, asr r5
   16694:	b	166b4 <__assert_fail@plt+0x55b0>
   16698:	sub	r5, r5, #32
   1669c:	add	lr, lr, #32
   166a0:	cmp	r2, #1
   166a4:	lsl	ip, r3, lr
   166a8:	orrcs	ip, ip, #2
   166ac:	adds	r0, r0, r3, asr r5
   166b0:	adcs	r1, r1, r3, asr #31
   166b4:	and	r5, r1, #-2147483648	; 0x80000000
   166b8:	bpl	166c8 <__assert_fail@plt+0x55c4>
   166bc:	rsbs	ip, ip, #0
   166c0:	rscs	r0, r0, #0
   166c4:	rsc	r1, r1, #0
   166c8:	cmp	r1, #1048576	; 0x100000
   166cc:	bcc	1670c <__assert_fail@plt+0x5608>
   166d0:	cmp	r1, #2097152	; 0x200000
   166d4:	bcc	166f4 <__assert_fail@plt+0x55f0>
   166d8:	lsrs	r1, r1, #1
   166dc:	rrxs	r0, r0
   166e0:	rrx	ip, ip
   166e4:	add	r4, r4, #1
   166e8:	lsl	r2, r4, #21
   166ec:	cmn	r2, #4194304	; 0x400000
   166f0:	bcs	1684c <__assert_fail@plt+0x5748>
   166f4:	cmp	ip, #-2147483648	; 0x80000000
   166f8:	lsrseq	ip, r0, #1
   166fc:	adcs	r0, r0, #0
   16700:	adc	r1, r1, r4, lsl #20
   16704:	orr	r1, r1, r5
   16708:	pop	{r4, r5, pc}
   1670c:	lsls	ip, ip, #1
   16710:	adcs	r0, r0, r0
   16714:	adc	r1, r1, r1
   16718:	tst	r1, #1048576	; 0x100000
   1671c:	sub	r4, r4, #1
   16720:	bne	166f4 <__assert_fail@plt+0x55f0>
   16724:	teq	r1, #0
   16728:	moveq	r1, r0
   1672c:	moveq	r0, #0
   16730:	clz	r3, r1
   16734:	addeq	r3, r3, #32
   16738:	sub	r3, r3, #11
   1673c:	subs	r2, r3, #32
   16740:	bge	16764 <__assert_fail@plt+0x5660>
   16744:	adds	r2, r2, #12
   16748:	ble	16760 <__assert_fail@plt+0x565c>
   1674c:	add	ip, r2, #20
   16750:	rsb	r2, r2, #12
   16754:	lsl	r0, r1, ip
   16758:	lsr	r1, r1, r2
   1675c:	b	16774 <__assert_fail@plt+0x5670>
   16760:	add	r2, r2, #20
   16764:	rsble	ip, r2, #32
   16768:	lsl	r1, r1, r2
   1676c:	orrle	r1, r1, r0, lsr ip
   16770:	lslle	r0, r0, r2
   16774:	subs	r4, r4, r3
   16778:	addge	r1, r1, r4, lsl #20
   1677c:	orrge	r1, r1, r5
   16780:	popge	{r4, r5, pc}
   16784:	mvn	r4, r4
   16788:	subs	r4, r4, #31
   1678c:	bge	167c8 <__assert_fail@plt+0x56c4>
   16790:	adds	r4, r4, #12
   16794:	bgt	167b0 <__assert_fail@plt+0x56ac>
   16798:	add	r4, r4, #20
   1679c:	rsb	r2, r4, #32
   167a0:	lsr	r0, r0, r4
   167a4:	orr	r0, r0, r1, lsl r2
   167a8:	orr	r1, r5, r1, lsr r4
   167ac:	pop	{r4, r5, pc}
   167b0:	rsb	r4, r4, #12
   167b4:	rsb	r2, r4, #32
   167b8:	lsr	r0, r0, r2
   167bc:	orr	r0, r0, r1, lsl r4
   167c0:	mov	r1, r5
   167c4:	pop	{r4, r5, pc}
   167c8:	lsr	r0, r1, r4
   167cc:	mov	r1, r5
   167d0:	pop	{r4, r5, pc}
   167d4:	teq	r4, #0
   167d8:	eor	r3, r3, #1048576	; 0x100000
   167dc:	eoreq	r1, r1, #1048576	; 0x100000
   167e0:	addeq	r4, r4, #1
   167e4:	subne	r5, r5, #1
   167e8:	b	16674 <__assert_fail@plt+0x5570>
   167ec:	mvns	ip, r4, asr #21
   167f0:	mvnsne	ip, r5, asr #21
   167f4:	beq	1685c <__assert_fail@plt+0x5758>
   167f8:	teq	r4, r5
   167fc:	teqeq	r0, r2
   16800:	beq	16814 <__assert_fail@plt+0x5710>
   16804:	orrs	ip, r4, r0
   16808:	moveq	r1, r3
   1680c:	moveq	r0, r2
   16810:	pop	{r4, r5, pc}
   16814:	teq	r1, r3
   16818:	movne	r1, #0
   1681c:	movne	r0, #0
   16820:	popne	{r4, r5, pc}
   16824:	lsrs	ip, r4, #21
   16828:	bne	1683c <__assert_fail@plt+0x5738>
   1682c:	lsls	r0, r0, #1
   16830:	adcs	r1, r1, r1
   16834:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16838:	pop	{r4, r5, pc}
   1683c:	adds	r4, r4, #4194304	; 0x400000
   16840:	addcc	r1, r1, #1048576	; 0x100000
   16844:	popcc	{r4, r5, pc}
   16848:	and	r5, r1, #-2147483648	; 0x80000000
   1684c:	orr	r1, r5, #2130706432	; 0x7f000000
   16850:	orr	r1, r1, #15728640	; 0xf00000
   16854:	mov	r0, #0
   16858:	pop	{r4, r5, pc}
   1685c:	mvns	ip, r4, asr #21
   16860:	movne	r1, r3
   16864:	movne	r0, r2
   16868:	mvnseq	ip, r5, asr #21
   1686c:	movne	r3, r1
   16870:	movne	r2, r0
   16874:	orrs	r4, r0, r1, lsl #12
   16878:	orrseq	r5, r2, r3, lsl #12
   1687c:	teqeq	r1, r3
   16880:	orrne	r1, r1, #524288	; 0x80000
   16884:	pop	{r4, r5, pc}
   16888:	teq	r0, #0
   1688c:	moveq	r1, #0
   16890:	bxeq	lr
   16894:	push	{r4, r5, lr}
   16898:	mov	r4, #1024	; 0x400
   1689c:	add	r4, r4, #50	; 0x32
   168a0:	mov	r5, #0
   168a4:	mov	r1, #0
   168a8:	b	16724 <__assert_fail@plt+0x5620>
   168ac:	teq	r0, #0
   168b0:	moveq	r1, #0
   168b4:	bxeq	lr
   168b8:	push	{r4, r5, lr}
   168bc:	mov	r4, #1024	; 0x400
   168c0:	add	r4, r4, #50	; 0x32
   168c4:	ands	r5, r0, #-2147483648	; 0x80000000
   168c8:	rsbmi	r0, r0, #0
   168cc:	mov	r1, #0
   168d0:	b	16724 <__assert_fail@plt+0x5620>
   168d4:	lsls	r2, r0, #1
   168d8:	asr	r1, r2, #3
   168dc:	rrx	r1, r1
   168e0:	lsl	r0, r2, #28
   168e4:	andsne	r3, r2, #-16777216	; 0xff000000
   168e8:	teqne	r3, #-16777216	; 0xff000000
   168ec:	eorne	r1, r1, #939524096	; 0x38000000
   168f0:	bxne	lr
   168f4:	teq	r2, #0
   168f8:	teqne	r3, #-16777216	; 0xff000000
   168fc:	bxeq	lr
   16900:	push	{r4, r5, lr}
   16904:	mov	r4, #896	; 0x380
   16908:	and	r5, r1, #-2147483648	; 0x80000000
   1690c:	bic	r1, r1, #-2147483648	; 0x80000000
   16910:	b	16724 <__assert_fail@plt+0x5620>
   16914:	orrs	r2, r0, r1
   16918:	bxeq	lr
   1691c:	push	{r4, r5, lr}
   16920:	mov	r5, #0
   16924:	b	16944 <__assert_fail@plt+0x5840>
   16928:	orrs	r2, r0, r1
   1692c:	bxeq	lr
   16930:	push	{r4, r5, lr}
   16934:	ands	r5, r1, #-2147483648	; 0x80000000
   16938:	bpl	16944 <__assert_fail@plt+0x5840>
   1693c:	rsbs	r0, r0, #0
   16940:	rsc	r1, r1, #0
   16944:	mov	r4, #1024	; 0x400
   16948:	add	r4, r4, #50	; 0x32
   1694c:	lsrs	ip, r1, #22
   16950:	beq	166c8 <__assert_fail@plt+0x55c4>
   16954:	mov	r2, #3
   16958:	lsrs	ip, ip, #3
   1695c:	addne	r2, r2, #3
   16960:	lsrs	ip, ip, #3
   16964:	addne	r2, r2, #3
   16968:	add	r2, r2, ip, lsr #3
   1696c:	rsb	r3, r2, #32
   16970:	lsl	ip, r0, r3
   16974:	lsr	r0, r0, r2
   16978:	orr	r0, r0, r1, lsl r3
   1697c:	lsr	r1, r1, r2
   16980:	add	r4, r4, r2
   16984:	b	166c8 <__assert_fail@plt+0x55c4>
   16988:	cmp	r3, #0
   1698c:	cmpeq	r2, #0
   16990:	bne	169a8 <__assert_fail@plt+0x58a4>
   16994:	cmp	r1, #0
   16998:	cmpeq	r0, #0
   1699c:	mvnne	r1, #0
   169a0:	mvnne	r0, #0
   169a4:	b	169c4 <__assert_fail@plt+0x58c0>
   169a8:	sub	sp, sp, #8
   169ac:	push	{sp, lr}
   169b0:	bl	16a20 <__assert_fail@plt+0x591c>
   169b4:	ldr	lr, [sp, #4]
   169b8:	add	sp, sp, #8
   169bc:	pop	{r2, r3}
   169c0:	bx	lr
   169c4:	push	{r1, lr}
   169c8:	mov	r0, #8
   169cc:	bl	10e64 <raise@plt>
   169d0:	pop	{r1, pc}
   169d4:	andeq	r0, r0, r0
   169d8:	vmov	d7, r0, r1
   169dc:	vldr	d6, [pc, #44]	; 16a10 <__assert_fail@plt+0x590c>
   169e0:	vldr	d5, [pc, #48]	; 16a18 <__assert_fail@plt+0x5914>
   169e4:	mov	r0, #0
   169e8:	vmul.f64	d6, d7, d6
   169ec:	vcvt.u32.f64	s12, d6
   169f0:	vcvt.f64.u32	d4, s12
   169f4:	vmov	r1, s12
   169f8:	vmls.f64	d7, d4, d5
   169fc:	vcvt.u32.f64	s14, d7
   16a00:	vmov	r3, s14
   16a04:	orr	r0, r0, r3
   16a08:	bx	lr
   16a0c:	nop			; (mov r0, r0)
   16a10:	andeq	r0, r0, r0
   16a14:	ldclcc	0, cr0, [r0]
   16a18:	andeq	r0, r0, r0
   16a1c:	mvnsmi	r0, r0
   16a20:	cmp	r1, r3
   16a24:	push	{r4, r5, r6, r7, r8, r9, lr}
   16a28:	cmpeq	r0, r2
   16a2c:	mov	r4, r0
   16a30:	mov	r5, r1
   16a34:	ldr	r9, [sp, #28]
   16a38:	movcc	r0, #0
   16a3c:	movcc	r1, #0
   16a40:	bcc	16b38 <__assert_fail@plt+0x5a34>
   16a44:	cmp	r3, #0
   16a48:	clzeq	ip, r2
   16a4c:	clzne	ip, r3
   16a50:	addeq	ip, ip, #32
   16a54:	cmp	r5, #0
   16a58:	clzeq	r1, r4
   16a5c:	addeq	r1, r1, #32
   16a60:	clzne	r1, r5
   16a64:	sub	ip, ip, r1
   16a68:	sub	lr, ip, #32
   16a6c:	lsl	r7, r3, ip
   16a70:	rsb	r8, ip, #32
   16a74:	orr	r7, r7, r2, lsl lr
   16a78:	orr	r7, r7, r2, lsr r8
   16a7c:	lsl	r6, r2, ip
   16a80:	cmp	r5, r7
   16a84:	cmpeq	r4, r6
   16a88:	movcc	r0, #0
   16a8c:	movcc	r1, #0
   16a90:	bcc	16aac <__assert_fail@plt+0x59a8>
   16a94:	mov	r3, #1
   16a98:	subs	r4, r4, r6
   16a9c:	lsl	r1, r3, lr
   16aa0:	lsl	r0, r3, ip
   16aa4:	orr	r1, r1, r3, lsr r8
   16aa8:	sbc	r5, r5, r7
   16aac:	cmp	ip, #0
   16ab0:	beq	16b38 <__assert_fail@plt+0x5a34>
   16ab4:	lsrs	r3, r7, #1
   16ab8:	rrx	r2, r6
   16abc:	mov	r6, ip
   16ac0:	b	16ae4 <__assert_fail@plt+0x59e0>
   16ac4:	subs	r4, r4, r2
   16ac8:	sbc	r5, r5, r3
   16acc:	adds	r4, r4, r4
   16ad0:	adc	r5, r5, r5
   16ad4:	adds	r4, r4, #1
   16ad8:	adc	r5, r5, #0
   16adc:	subs	r6, r6, #1
   16ae0:	beq	16b00 <__assert_fail@plt+0x59fc>
   16ae4:	cmp	r5, r3
   16ae8:	cmpeq	r4, r2
   16aec:	bcs	16ac4 <__assert_fail@plt+0x59c0>
   16af0:	adds	r4, r4, r4
   16af4:	adc	r5, r5, r5
   16af8:	subs	r6, r6, #1
   16afc:	bne	16ae4 <__assert_fail@plt+0x59e0>
   16b00:	lsr	r6, r4, ip
   16b04:	lsr	r7, r5, ip
   16b08:	orr	r6, r6, r5, lsl r8
   16b0c:	adds	r2, r0, r4
   16b10:	orr	r6, r6, r5, lsr lr
   16b14:	adc	r3, r1, r5
   16b18:	lsl	r1, r7, ip
   16b1c:	orr	r1, r1, r6, lsl lr
   16b20:	lsl	r0, r6, ip
   16b24:	orr	r1, r1, r6, lsr r8
   16b28:	subs	r0, r2, r0
   16b2c:	mov	r4, r6
   16b30:	mov	r5, r7
   16b34:	sbc	r1, r3, r1
   16b38:	cmp	r9, #0
   16b3c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16b40:	strd	r4, [r9]
   16b44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b4c:	mov	r7, r0
   16b50:	ldr	r6, [pc, #72]	; 16ba0 <__assert_fail@plt+0x5a9c>
   16b54:	ldr	r5, [pc, #72]	; 16ba4 <__assert_fail@plt+0x5aa0>
   16b58:	add	r6, pc, r6
   16b5c:	add	r5, pc, r5
   16b60:	sub	r6, r6, r5
   16b64:	mov	r8, r1
   16b68:	mov	r9, r2
   16b6c:	bl	10e20 <fdopen@plt-0x20>
   16b70:	asrs	r6, r6, #2
   16b74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b78:	mov	r4, #0
   16b7c:	add	r4, r4, #1
   16b80:	ldr	r3, [r5], #4
   16b84:	mov	r2, r9
   16b88:	mov	r1, r8
   16b8c:	mov	r0, r7
   16b90:	blx	r3
   16b94:	cmp	r6, r4
   16b98:	bne	16b7c <__assert_fail@plt+0x5a78>
   16b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ba0:			; <UNDEFINED> instruction: 0x000113b0
   16ba4:	andeq	r1, r1, r8, lsr #7
   16ba8:	bx	lr
   16bac:	ldr	r3, [pc, #12]	; 16bc0 <__assert_fail@plt+0x5abc>
   16bb0:	mov	r1, #0
   16bb4:	add	r3, pc, r3
   16bb8:	ldr	r2, [r3]
   16bbc:	b	11008 <__cxa_atexit@plt>
   16bc0:	andeq	r1, r1, r8, asr #10

Disassembly of section .fini:

00016bc4 <.fini>:
   16bc4:	push	{r3, lr}
   16bc8:	pop	{r3, pc}
