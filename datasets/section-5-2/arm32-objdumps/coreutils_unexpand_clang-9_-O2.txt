
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010da8 <.init>:
   10da8:	push	{r3, lr}
   10dac:	bl	1105c <__assert_fail@plt+0x48>
   10db0:	pop	{r3, pc}

Disassembly of section .plt:

00010db4 <calloc@plt-0x14>:
   10db4:	push	{lr}		; (str lr, [sp, #-4]!)
   10db8:	ldr	lr, [pc, #4]	; 10dc4 <calloc@plt-0x4>
   10dbc:	add	lr, pc, lr
   10dc0:	ldr	pc, [lr, #8]!
   10dc4:	andeq	r6, r1, ip, lsr r2

00010dc8 <calloc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #572]!	; 0x23c

00010dd4 <fputs_unlocked@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #564]!	; 0x234

00010de0 <raise@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #556]!	; 0x22c

00010dec <strcmp@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #548]!	; 0x224

00010df8 <posix_fadvise64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #540]!	; 0x21c

00010e04 <fflush@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #532]!	; 0x214

00010e10 <free@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #524]!	; 0x20c

00010e1c <_exit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #516]!	; 0x204

00010e28 <memcpy@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #508]!	; 0x1fc

00010e34 <mbsinit@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e40 <fwrite_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #492]!	; 0x1ec

00010e4c <dcgettext@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #484]!	; 0x1e4

00010e58 <realloc@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #476]!	; 0x1dc

00010e64 <textdomain@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e70 <iswprint@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #460]!	; 0x1cc

00010e7c <fwrite@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #452]!	; 0x1c4

00010e88 <lseek64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #444]!	; 0x1bc

00010e94 <__ctype_get_mb_cur_max@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea0 <__fpending@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #428]!	; 0x1ac

00010eac <mbrtowc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #420]!	; 0x1a4

00010eb8 <error@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #412]!	; 0x19c

00010ec4 <malloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #404]!	; 0x194

00010ed0 <__libc_start_main@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #396]!	; 0x18c

00010edc <__freading@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #388]!	; 0x184

00010ee8 <__gmon_start__@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #380]!	; 0x17c

00010ef4 <getopt_long@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #372]!	; 0x174

00010f00 <__ctype_b_loc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #364]!	; 0x16c

00010f0c <exit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #356]!	; 0x164

00010f18 <bcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #348]!	; 0x15c

00010f24 <strlen@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #340]!	; 0x154

00010f30 <__errno_location@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #332]!	; 0x14c

00010f3c <__cxa_atexit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #324]!	; 0x144

00010f48 <memset@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #316]!	; 0x13c

00010f54 <__printf_chk@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #308]!	; 0x134

00010f60 <fileno@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #300]!	; 0x12c

00010f6c <__fprintf_chk@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #292]!	; 0x124

00010f78 <fclose@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #284]!	; 0x11c

00010f84 <fseeko64@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #276]!	; 0x114

00010f90 <__uflow@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #268]!	; 0x10c

00010f9c <__overflow@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #260]!	; 0x104

00010fa8 <setlocale@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #252]!	; 0xfc

00010fb4 <strrchr@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #244]!	; 0xf4

00010fc0 <nl_langinfo@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #236]!	; 0xec

00010fcc <clearerr_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #228]!	; 0xe4

00010fd8 <fopen64@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #220]!	; 0xdc

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #212]!	; 0xd4

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #204]!	; 0xcc

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #196]!	; 0xc4

00011008 <strspn@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #188]!	; 0xbc

00011014 <__assert_fail@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #180]!	; 0xb4

Disassembly of section .text:

00011020 <.text>:
   11020:	mov	fp, #0
   11024:	mov	lr, #0
   11028:	pop	{r1}		; (ldr r1, [sp], #4)
   1102c:	mov	r2, sp
   11030:	push	{r2}		; (str r2, [sp, #-4]!)
   11034:	push	{r0}		; (str r0, [sp, #-4]!)
   11038:	ldr	ip, [pc, #16]	; 11050 <__assert_fail@plt+0x3c>
   1103c:	push	{ip}		; (str ip, [sp, #-4]!)
   11040:	ldr	r0, [pc, #12]	; 11054 <__assert_fail@plt+0x40>
   11044:	ldr	r3, [pc, #12]	; 11058 <__assert_fail@plt+0x44>
   11048:	bl	10ed0 <__libc_start_main@plt>
   1104c:	bl	10ffc <abort@plt>
   11050:	andeq	r5, r1, r8, asr #10
   11054:	andeq	r1, r1, ip, lsr #7
   11058:	andeq	r5, r1, r8, ror #9
   1105c:	ldr	r3, [pc, #20]	; 11078 <__assert_fail@plt+0x64>
   11060:	ldr	r2, [pc, #20]	; 1107c <__assert_fail@plt+0x68>
   11064:	add	r3, pc, r3
   11068:	ldr	r2, [r3, r2]
   1106c:	cmp	r2, #0
   11070:	bxeq	lr
   11074:	b	10ee8 <__gmon_start__@plt>
   11078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1107c:	ldrdeq	r0, [r0], -r4
   11080:	ldr	r0, [pc, #24]	; 110a0 <__assert_fail@plt+0x8c>
   11084:	ldr	r3, [pc, #24]	; 110a4 <__assert_fail@plt+0x90>
   11088:	cmp	r3, r0
   1108c:	bxeq	lr
   11090:	ldr	r3, [pc, #16]	; 110a8 <__assert_fail@plt+0x94>
   11094:	cmp	r3, #0
   11098:	bxeq	lr
   1109c:	bx	r3
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r7, r2, r0, lsr r1
   110a8:	andeq	r0, r0, r0
   110ac:	ldr	r0, [pc, #36]	; 110d8 <__assert_fail@plt+0xc4>
   110b0:	ldr	r1, [pc, #36]	; 110dc <__assert_fail@plt+0xc8>
   110b4:	sub	r1, r1, r0
   110b8:	asr	r1, r1, #2
   110bc:	add	r1, r1, r1, lsr #31
   110c0:	asrs	r1, r1, #1
   110c4:	bxeq	lr
   110c8:	ldr	r3, [pc, #16]	; 110e0 <__assert_fail@plt+0xcc>
   110cc:	cmp	r3, #0
   110d0:	bxeq	lr
   110d4:	bx	r3
   110d8:	andeq	r7, r2, r0, lsr r1
   110dc:	andeq	r7, r2, r0, lsr r1
   110e0:	andeq	r0, r0, r0
   110e4:	push	{r4, lr}
   110e8:	ldr	r4, [pc, #24]	; 11108 <__assert_fail@plt+0xf4>
   110ec:	ldrb	r3, [r4]
   110f0:	cmp	r3, #0
   110f4:	popne	{r4, pc}
   110f8:	bl	11080 <__assert_fail@plt+0x6c>
   110fc:	mov	r3, #1
   11100:	strb	r3, [r4]
   11104:	pop	{r4, pc}
   11108:	andeq	r7, r2, r4, asr r1
   1110c:	b	110ac <__assert_fail@plt+0x98>
   11110:	push	{fp, lr}
   11114:	mov	fp, sp
   11118:	sub	sp, sp, #56	; 0x38
   1111c:	mov	r4, r0
   11120:	cmp	r0, #0
   11124:	bne	11368 <__assert_fail@plt+0x354>
   11128:	movw	r1, #21915	; 0x559b
   1112c:	mov	r0, #0
   11130:	mov	r2, #5
   11134:	movt	r1, #1
   11138:	bl	10e4c <dcgettext@plt>
   1113c:	mov	r1, r0
   11140:	movw	r0, #29084	; 0x719c
   11144:	movt	r0, #2
   11148:	ldr	r2, [r0]
   1114c:	mov	r0, #1
   11150:	bl	10f54 <__printf_chk@plt>
   11154:	movw	r1, #21948	; 0x55bc
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10e4c <dcgettext@plt>
   11168:	movw	r7, #29004	; 0x714c
   1116c:	movt	r7, #2
   11170:	ldr	r1, [r7]
   11174:	bl	10dd4 <fputs_unlocked@plt>
   11178:	movw	r1, #22440	; 0x57a8
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	movt	r1, #1
   11188:	bl	10e4c <dcgettext@plt>
   1118c:	ldr	r1, [r7]
   11190:	bl	10dd4 <fputs_unlocked@plt>
   11194:	movw	r1, #22496	; 0x57e0
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e4c <dcgettext@plt>
   111a8:	ldr	r1, [r7]
   111ac:	bl	10dd4 <fputs_unlocked@plt>
   111b0:	movw	r1, #22014	; 0x55fe
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10e4c <dcgettext@plt>
   111c4:	ldr	r1, [r7]
   111c8:	bl	10dd4 <fputs_unlocked@plt>
   111cc:	bl	12300 <__assert_fail@plt+0x12ec>
   111d0:	movw	r1, #22235	; 0x56db
   111d4:	mov	r0, #0
   111d8:	mov	r2, #5
   111dc:	movt	r1, #1
   111e0:	bl	10e4c <dcgettext@plt>
   111e4:	ldr	r1, [r7]
   111e8:	bl	10dd4 <fputs_unlocked@plt>
   111ec:	movw	r1, #22280	; 0x5708
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10e4c <dcgettext@plt>
   11200:	ldr	r1, [r7]
   11204:	bl	10dd4 <fputs_unlocked@plt>
   11208:	movw	r0, #23048	; 0x5a08
   1120c:	mov	r2, #48	; 0x30
   11210:	mov	r6, sp
   11214:	movw	r5, #22334	; 0x573e
   11218:	movt	r0, #1
   1121c:	movt	r5, #1
   11220:	add	r1, r0, #32
   11224:	add	r3, r0, #16
   11228:	vld1.64	{d18-d19}, [r0], r2
   1122c:	vld1.64	{d16-d17}, [r1]
   11230:	vld1.64	{d20-d21}, [r3]
   11234:	vldr	d22, [r0]
   11238:	add	r1, r6, #32
   1123c:	add	r0, r6, #16
   11240:	vst1.64	{d16-d17}, [r1]
   11244:	movw	r1, #22571	; 0x582b
   11248:	vst1.64	{d20-d21}, [r0]
   1124c:	mov	r0, r6
   11250:	movt	r1, #1
   11254:	vst1.64	{d18-d19}, [r0], r2
   11258:	vstr	d22, [r0]
   1125c:	mov	r0, r5
   11260:	bl	10dec <strcmp@plt>
   11264:	cmp	r0, #0
   11268:	ldrne	r1, [r6, #8]!
   1126c:	cmpne	r1, #0
   11270:	bne	1125c <__assert_fail@plt+0x248>
   11274:	movw	r1, #22666	; 0x588a
   11278:	ldr	r6, [r6, #4]
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10e4c <dcgettext@plt>
   1128c:	movw	r2, #22382	; 0x576e
   11290:	movw	r3, #22689	; 0x58a1
   11294:	mov	r1, r0
   11298:	mov	r0, #1
   1129c:	movt	r2, #1
   112a0:	movt	r3, #1
   112a4:	bl	10f54 <__printf_chk@plt>
   112a8:	cmp	r6, #0
   112ac:	mov	r0, #5
   112b0:	mov	r1, #0
   112b4:	moveq	r6, r5
   112b8:	bl	10fa8 <setlocale@plt>
   112bc:	cmp	r0, #0
   112c0:	beq	112f8 <__assert_fail@plt+0x2e4>
   112c4:	movw	r1, #22729	; 0x58c9
   112c8:	mov	r2, #3
   112cc:	movt	r1, #1
   112d0:	bl	10ff0 <strncmp@plt>
   112d4:	cmp	r0, #0
   112d8:	beq	112f8 <__assert_fail@plt+0x2e4>
   112dc:	movw	r1, #22733	; 0x58cd
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10e4c <dcgettext@plt>
   112f0:	ldr	r1, [r7]
   112f4:	bl	10dd4 <fputs_unlocked@plt>
   112f8:	movw	r1, #22804	; 0x5914
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	movt	r1, #1
   11308:	bl	10e4c <dcgettext@plt>
   1130c:	movw	r2, #22689	; 0x58a1
   11310:	mov	r1, r0
   11314:	mov	r0, #1
   11318:	mov	r3, r5
   1131c:	movt	r2, #1
   11320:	bl	10f54 <__printf_chk@plt>
   11324:	movw	r1, #22831	; 0x592f
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10e4c <dcgettext@plt>
   11338:	mov	r1, r0
   1133c:	movw	r0, #22599	; 0x5847
   11340:	movw	r3, #22881	; 0x5961
   11344:	cmp	r6, r5
   11348:	mov	r2, r6
   1134c:	movt	r0, #1
   11350:	movt	r3, #1
   11354:	moveq	r3, r0
   11358:	mov	r0, #1
   1135c:	bl	10f54 <__printf_chk@plt>
   11360:	mov	r0, r4
   11364:	bl	10f0c <exit@plt>
   11368:	movw	r0, #28992	; 0x7140
   1136c:	movw	r1, #21876	; 0x5574
   11370:	mov	r2, #5
   11374:	movt	r0, #2
   11378:	movt	r1, #1
   1137c:	ldr	r5, [r0]
   11380:	mov	r0, #0
   11384:	bl	10e4c <dcgettext@plt>
   11388:	mov	r2, r0
   1138c:	movw	r0, #29084	; 0x719c
   11390:	mov	r1, #1
   11394:	movt	r0, #2
   11398:	ldr	r3, [r0]
   1139c:	mov	r0, r5
   113a0:	bl	10f6c <__fprintf_chk@plt>
   113a4:	mov	r0, r4
   113a8:	bl	10f0c <exit@plt>
   113ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b0:	add	fp, sp, #28
   113b4:	sub	sp, sp, #36	; 0x24
   113b8:	mov	r5, r0
   113bc:	ldr	r0, [r1]
   113c0:	mov	r4, r1
   113c4:	bl	1265c <__assert_fail@plt+0x1648>
   113c8:	movw	r1, #22881	; 0x5961
   113cc:	mov	r0, #6
   113d0:	movt	r1, #1
   113d4:	bl	10fa8 <setlocale@plt>
   113d8:	movw	r6, #22386	; 0x5772
   113dc:	movw	r1, #22343	; 0x5747
   113e0:	movt	r6, #1
   113e4:	movt	r1, #1
   113e8:	mov	r0, r6
   113ec:	bl	10fe4 <bindtextdomain@plt>
   113f0:	mov	r0, r6
   113f4:	bl	10e64 <textdomain@plt>
   113f8:	movw	r0, #9068	; 0x236c
   113fc:	movt	r0, #1
   11400:	bl	1554c <__assert_fail@plt+0x4538>
   11404:	movw	r8, #22367	; 0x575f
   11408:	movw	r9, #22952	; 0x59a8
   1140c:	mov	sl, #0
   11410:	mov	r0, #0
   11414:	movt	r8, #1
   11418:	movt	r9, #1
   1141c:	str	r0, [sp, #24]
   11420:	mov	r0, #0
   11424:	mov	r1, r4
   11428:	mov	r2, r8
   1142c:	mov	r3, r9
   11430:	str	r0, [sp]
   11434:	mov	r0, r5
   11438:	bl	10ef4 <getopt_long@plt>
   1143c:	cmp	r0, #96	; 0x60
   11440:	ble	11460 <__assert_fail@plt+0x44c>
   11444:	cmp	r0, #97	; 0x61
   11448:	beq	114ac <__assert_fail@plt+0x498>
   1144c:	cmp	r0, #116	; 0x74
   11450:	beq	114c0 <__assert_fail@plt+0x4ac>
   11454:	cmp	r0, #256	; 0x100
   11458:	beq	1154c <__assert_fail@plt+0x538>
   1145c:	b	114ec <__assert_fail@plt+0x4d8>
   11460:	cmp	r0, #43	; 0x2b
   11464:	bgt	11484 <__assert_fail@plt+0x470>
   11468:	cmn	r0, #1
   1146c:	beq	11554 <__assert_fail@plt+0x540>
   11470:	cmn	r0, #3
   11474:	beq	11950 <__assert_fail@plt+0x93c>
   11478:	cmn	r0, #2
   1147c:	bne	114ec <__assert_fail@plt+0x4d8>
   11480:	b	11998 <__assert_fail@plt+0x984>
   11484:	cmp	r0, #44	; 0x2c
   11488:	bne	114e4 <__assert_fail@plt+0x4d0>
   1148c:	tst	sl, #1
   11490:	mov	sl, #0
   11494:	beq	11420 <__assert_fail@plt+0x40c>
   11498:	mov	r0, r6
   1149c:	mov	r1, r7
   114a0:	bl	119d8 <__assert_fail@plt+0x9c4>
   114a4:	mov	sl, #0
   114a8:	b	11420 <__assert_fail@plt+0x40c>
   114ac:	movw	r0, #29016	; 0x7158
   114b0:	mov	r1, #1
   114b4:	movt	r0, #2
   114b8:	strb	r1, [r0]
   114bc:	b	11420 <__assert_fail@plt+0x40c>
   114c0:	movw	r0, #29016	; 0x7158
   114c4:	mov	r1, #1
   114c8:	movt	r0, #2
   114cc:	strb	r1, [r0]
   114d0:	movw	r0, #29008	; 0x7150
   114d4:	movt	r0, #2
   114d8:	ldr	r0, [r0]
   114dc:	bl	11acc <__assert_fail@plt+0xab8>
   114e0:	b	11420 <__assert_fail@plt+0x40c>
   114e4:	cmp	r0, #63	; 0x3f
   114e8:	beq	119a0 <__assert_fail@plt+0x98c>
   114ec:	ands	r1, sl, #1
   114f0:	moveq	r7, r1
   114f4:	moveq	r6, r1
   114f8:	movw	r1, #39321	; 0x9999
   114fc:	movt	r1, #39321	; 0x9999
   11500:	subs	r1, r1, r6
   11504:	movw	r1, #39321	; 0x9999
   11508:	movt	r1, #6553	; 0x1999
   1150c:	sbcs	r1, r1, r7
   11510:	bcc	119a8 <__assert_fail@plt+0x994>
   11514:	mov	r1, #10
   11518:	add	r3, r7, r7, lsl #2
   1151c:	sub	r0, r0, #48	; 0x30
   11520:	mov	sl, #1
   11524:	umull	r1, r2, r6, r1
   11528:	add	r2, r2, r3, lsl #1
   1152c:	adds	r1, r1, r0
   11530:	adc	r0, r2, r0, asr #31
   11534:	subs	r2, r1, r6
   11538:	mov	r6, r1
   1153c:	sbcs	r2, r0, r7
   11540:	mov	r7, r0
   11544:	bcs	11420 <__assert_fail@plt+0x40c>
   11548:	b	119a8 <__assert_fail@plt+0x994>
   1154c:	mov	r0, #1
   11550:	b	1141c <__assert_fail@plt+0x408>
   11554:	ldr	r0, [sp, #24]
   11558:	tst	r0, #1
   1155c:	movwne	r1, #29016	; 0x7158
   11560:	movne	r0, #0
   11564:	movtne	r1, #2
   11568:	strbne	r0, [r1]
   1156c:	tst	sl, #1
   11570:	beq	11580 <__assert_fail@plt+0x56c>
   11574:	mov	r0, r6
   11578:	mov	r1, r7
   1157c:	bl	119d8 <__assert_fail@plt+0x9c4>
   11580:	bl	11e60 <__assert_fail@plt+0xe4c>
   11584:	movw	r0, #28984	; 0x7138
   11588:	movt	r0, #2
   1158c:	ldr	r1, [r0]
   11590:	mov	r0, #0
   11594:	cmp	r1, r5
   11598:	addlt	r0, r4, r1, lsl #2
   1159c:	bl	12094 <__assert_fail@plt+0x1080>
   115a0:	mov	r0, #0
   115a4:	bl	120c4 <__assert_fail@plt+0x10b0>
   115a8:	cmp	r0, #0
   115ac:	beq	11938 <__assert_fail@plt+0x924>
   115b0:	mov	r1, r0
   115b4:	movw	r0, #29392	; 0x72d0
   115b8:	movt	r0, #2
   115bc:	mov	r4, r1
   115c0:	ldr	r0, [r0]
   115c4:	bl	14ab4 <__assert_fail@plt+0x3aa0>
   115c8:	mov	r3, r4
   115cc:	str	r0, [sp, #12]
   115d0:	mov	r8, #0
   115d4:	mov	r0, #0
   115d8:	mov	r4, #1
   115dc:	mov	sl, #0
   115e0:	mov	r6, #1
   115e4:	mov	ip, #0
   115e8:	str	r8, [sp, #32]
   115ec:	str	r0, [sp, #20]
   115f0:	ldmib	r3, {r0, r1}
   115f4:	cmp	r0, r1
   115f8:	bcs	11824 <__assert_fail@plt+0x810>
   115fc:	add	r1, r0, #1
   11600:	str	r1, [r3, #4]
   11604:	ldrb	r7, [r0]
   11608:	tst	r4, #1
   1160c:	beq	11884 <__assert_fail@plt+0x870>
   11610:	str	r6, [sp, #16]
   11614:	mov	r4, ip
   11618:	str	r3, [sp, #24]
   1161c:	bl	10f00 <__ctype_b_loc@plt>
   11620:	ldr	r0, [r0]
   11624:	add	r0, r0, r7, lsl #1
   11628:	ldrh	r0, [r0]
   1162c:	ands	r6, r0, #1
   11630:	beq	1166c <__assert_fail@plt+0x658>
   11634:	mov	r0, r8
   11638:	mov	r1, sl
   1163c:	add	r2, sp, #32
   11640:	add	r3, sp, #31
   11644:	bl	11f90 <__assert_fail@plt+0xf7c>
   11648:	mov	r5, r0
   1164c:	ldrb	r0, [sp, #31]
   11650:	cmp	r0, #0
   11654:	beq	116e4 <__assert_fail@plt+0x6d0>
   11658:	ldr	r3, [sp, #24]
   1165c:	mov	r5, r8
   11660:	mov	r9, sl
   11664:	mov	r2, r4
   11668:	b	11764 <__assert_fail@plt+0x750>
   1166c:	cmp	r7, #8
   11670:	mov	r2, r4
   11674:	bne	116b8 <__assert_fail@plt+0x6a4>
   11678:	ldr	r0, [sp, #32]
   1167c:	ldr	r3, [sp, #24]
   11680:	mov	r7, #8
   11684:	mov	r4, #1
   11688:	cmp	r0, #0
   1168c:	subne	r0, r0, #1
   11690:	subs	r5, r8, #1
   11694:	str	r0, [sp, #32]
   11698:	orr	r0, r8, sl
   1169c:	sbc	r9, sl, #0
   116a0:	cmp	r0, #0
   116a4:	moveq	r9, sl
   116a8:	moveq	r5, r8
   116ac:	cmp	r2, #0
   116b0:	bne	11774 <__assert_fail@plt+0x760>
   116b4:	b	117cc <__assert_fail@plt+0x7b8>
   116b8:	adds	r5, r8, #1
   116bc:	ldr	r3, [sp, #24]
   116c0:	mov	r0, #0
   116c4:	mov	r4, #1
   116c8:	adcs	r9, sl, #0
   116cc:	adc	r0, r0, #0
   116d0:	cmp	r0, #1
   116d4:	beq	119b4 <__assert_fail@plt+0x9a0>
   116d8:	cmp	r2, #0
   116dc:	bne	11774 <__assert_fail@plt+0x760>
   116e0:	b	117cc <__assert_fail@plt+0x7b8>
   116e4:	mov	r9, r1
   116e8:	subs	r1, r5, r8
   116ec:	sbcs	r1, r9, sl
   116f0:	bcc	119b4 <__assert_fail@plt+0x9a0>
   116f4:	mov	ip, r4
   116f8:	cmp	r7, #9
   116fc:	bne	11710 <__assert_fail@plt+0x6fc>
   11700:	ldr	r3, [sp, #24]
   11704:	cmp	ip, #0
   11708:	bne	1174c <__assert_fail@plt+0x738>
   1170c:	b	11758 <__assert_fail@plt+0x744>
   11710:	adds	r8, r8, #1
   11714:	ldr	r3, [sp, #16]
   11718:	adc	sl, sl, #0
   1171c:	eor	r1, r8, r5
   11720:	eor	r2, sl, r9
   11724:	orrs	r1, r1, r2
   11728:	mov	r2, r1
   1172c:	movwne	r2, #1
   11730:	mvn	r3, r3
   11734:	orr	r2, r3, r2
   11738:	tst	r2, #1
   1173c:	bne	117f4 <__assert_fail@plt+0x7e0>
   11740:	ldr	r3, [sp, #24]
   11744:	mov	r5, r8
   11748:	mov	r9, sl
   1174c:	ldr	r1, [sp, #12]
   11750:	mov	r2, #9
   11754:	strb	r2, [r1]
   11758:	ldr	r1, [sp, #20]
   1175c:	mov	r7, #9
   11760:	and	r2, r1, #1
   11764:	clz	r0, r0
   11768:	lsr	r4, r0, #5
   1176c:	cmp	r2, #0
   11770:	beq	117cc <__assert_fail@plt+0x7b8>
   11774:	mov	r8, r6
   11778:	cmp	r2, #1
   1177c:	beq	11798 <__assert_fail@plt+0x784>
   11780:	ldr	r0, [sp, #20]
   11784:	tst	r0, #1
   11788:	beq	11798 <__assert_fail@plt+0x784>
   1178c:	ldr	r0, [sp, #12]
   11790:	mov	r1, #9
   11794:	strb	r1, [r0]
   11798:	movw	r0, #29004	; 0x714c
   1179c:	mov	r1, #1
   117a0:	mov	r6, r2
   117a4:	movt	r0, #2
   117a8:	ldr	r3, [r0]
   117ac:	ldr	r0, [sp, #12]
   117b0:	bl	10e40 <fwrite_unlocked@plt>
   117b4:	ldr	r3, [sp, #24]
   117b8:	mov	r1, #0
   117bc:	cmp	r0, r6
   117c0:	mov	r6, r8
   117c4:	str	r1, [sp, #20]
   117c8:	bne	11904 <__assert_fail@plt+0x8f0>
   117cc:	movw	r0, #29016	; 0x7158
   117d0:	mov	ip, #0
   117d4:	movt	r0, #2
   117d8:	ldrb	r0, [r0]
   117dc:	orrs	r0, r6, r0
   117e0:	movwne	r0, #1
   117e4:	and	r4, r4, r0
   117e8:	cmn	r7, #1
   117ec:	bgt	11898 <__assert_fail@plt+0x884>
   117f0:	b	11930 <__assert_fail@plt+0x91c>
   117f4:	ldr	r0, [sp, #12]
   117f8:	ldr	r3, [sp, #24]
   117fc:	mov	r4, #1
   11800:	mov	r6, #1
   11804:	strb	r7, [r0, ip]
   11808:	clz	r0, r1
   1180c:	ldr	r1, [sp, #20]
   11810:	add	ip, ip, #1
   11814:	lsr	r0, r0, #5
   11818:	orr	r1, r1, r0
   1181c:	str	r1, [sp, #20]
   11820:	b	118c8 <__assert_fail@plt+0x8b4>
   11824:	mov	r0, r3
   11828:	mov	r9, r6
   1182c:	mov	r6, ip
   11830:	mov	r5, r3
   11834:	bl	10f90 <__uflow@plt>
   11838:	mov	r7, r0
   1183c:	cmn	r0, #1
   11840:	bgt	11870 <__assert_fail@plt+0x85c>
   11844:	mov	r0, r5
   11848:	bl	120c4 <__assert_fail@plt+0x10b0>
   1184c:	mov	ip, r6
   11850:	mov	r3, r0
   11854:	cmp	r0, #0
   11858:	mov	r6, r9
   1185c:	bne	115f0 <__assert_fail@plt+0x5dc>
   11860:	mov	r3, #0
   11864:	tst	r4, #1
   11868:	bne	11610 <__assert_fail@plt+0x5fc>
   1186c:	b	11884 <__assert_fail@plt+0x870>
   11870:	mov	ip, r6
   11874:	mov	r3, r5
   11878:	mov	r6, r9
   1187c:	tst	r4, #1
   11880:	bne	11610 <__assert_fail@plt+0x5fc>
   11884:	mov	r4, #0
   11888:	mov	r5, r8
   1188c:	mov	r9, sl
   11890:	cmn	r7, #1
   11894:	ble	11930 <__assert_fail@plt+0x91c>
   11898:	movw	r0, #29004	; 0x714c
   1189c:	movt	r0, #2
   118a0:	ldr	r0, [r0]
   118a4:	ldr	r1, [r0, #20]
   118a8:	ldr	r2, [r0, #24]
   118ac:	cmp	r1, r2
   118b0:	bcs	118d4 <__assert_fail@plt+0x8c0>
   118b4:	add	r2, r1, #1
   118b8:	mov	r8, r5
   118bc:	mov	sl, r9
   118c0:	str	r2, [r0, #20]
   118c4:	strb	r7, [r1]
   118c8:	cmp	r7, #10
   118cc:	bne	115f0 <__assert_fail@plt+0x5dc>
   118d0:	b	115d0 <__assert_fail@plt+0x5bc>
   118d4:	uxtb	r1, r7
   118d8:	str	r6, [sp, #24]
   118dc:	mov	r8, r3
   118e0:	mov	r6, ip
   118e4:	bl	10f9c <__overflow@plt>
   118e8:	mov	ip, r6
   118ec:	ldr	r6, [sp, #24]
   118f0:	mov	r3, r8
   118f4:	cmn	r0, #1
   118f8:	mov	r8, r5
   118fc:	mov	sl, r9
   11900:	bgt	118c8 <__assert_fail@plt+0x8b4>
   11904:	bl	10f30 <__errno_location@plt>
   11908:	movw	r1, #22938	; 0x599a
   1190c:	ldr	r4, [r0]
   11910:	mov	r0, #0
   11914:	mov	r2, #5
   11918:	movt	r1, #1
   1191c:	bl	10e4c <dcgettext@plt>
   11920:	mov	r2, r0
   11924:	mov	r0, #1
   11928:	mov	r1, r4
   1192c:	bl	10eb8 <error@plt>
   11930:	ldr	r0, [sp, #12]
   11934:	bl	1258c <__assert_fail@plt+0x1578>
   11938:	bl	122b0 <__assert_fail@plt+0x129c>
   1193c:	movw	r0, #29020	; 0x715c
   11940:	movt	r0, #2
   11944:	ldr	r0, [r0]
   11948:	sub	sp, fp, #28
   1194c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11950:	movw	r0, #28904	; 0x70e8
   11954:	movw	r2, #22396	; 0x577c
   11958:	mov	r1, #0
   1195c:	movt	r0, #2
   11960:	movt	r2, #1
   11964:	str	r1, [sp, #4]
   11968:	movw	r1, #22334	; 0x573e
   1196c:	movt	r1, #1
   11970:	ldr	r3, [r0]
   11974:	movw	r0, #29004	; 0x714c
   11978:	str	r2, [sp]
   1197c:	movw	r2, #22382	; 0x576e
   11980:	movt	r0, #2
   11984:	movt	r2, #1
   11988:	ldr	r0, [r0]
   1198c:	bl	14880 <__assert_fail@plt+0x386c>
   11990:	mov	r0, #0
   11994:	bl	10f0c <exit@plt>
   11998:	mov	r0, #0
   1199c:	bl	11110 <__assert_fail@plt+0xfc>
   119a0:	mov	r0, #1
   119a4:	bl	11110 <__assert_fail@plt+0xfc>
   119a8:	movw	r1, #22412	; 0x578c
   119ac:	movt	r1, #1
   119b0:	b	119bc <__assert_fail@plt+0x9a8>
   119b4:	movw	r1, #22915	; 0x5983
   119b8:	movt	r1, #1
   119bc:	mov	r0, #0
   119c0:	mov	r2, #5
   119c4:	bl	10e4c <dcgettext@plt>
   119c8:	mov	r2, r0
   119cc:	mov	r0, #1
   119d0:	mov	r1, #0
   119d4:	bl	10eb8 <error@plt>
   119d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   119dc:	add	fp, sp, #24
   119e0:	movw	r8, #29024	; 0x7160
   119e4:	mov	r4, r1
   119e8:	movw	r9, #29028	; 0x7164
   119ec:	mov	r5, r0
   119f0:	mov	r0, #0
   119f4:	movt	r8, #2
   119f8:	movt	r9, #2
   119fc:	ldr	r1, [r8]
   11a00:	cmp	r1, #0
   11a04:	beq	11a18 <__assert_fail@plt+0xa04>
   11a08:	ldr	r2, [r9]
   11a0c:	add	r2, r2, r1, lsl #3
   11a10:	ldrd	r2, [r2, #-8]
   11a14:	b	11a20 <__assert_fail@plt+0xa0c>
   11a18:	mov	r2, #0
   11a1c:	mov	r3, #0
   11a20:	subs	r7, r5, r2
   11a24:	sbcs	r6, r4, r3
   11a28:	adc	r0, r0, #0
   11a2c:	rsbs	r0, r0, #1
   11a30:	movw	r0, #29032	; 0x7168
   11a34:	movt	r0, #2
   11a38:	movwne	r6, #0
   11a3c:	movwne	r7, #0
   11a40:	ldr	r0, [r0]
   11a44:	cmp	r1, r0
   11a48:	bne	11a6c <__assert_fail@plt+0xa58>
   11a4c:	ldr	r0, [r9]
   11a50:	movw	r1, #29032	; 0x7168
   11a54:	mov	r2, #8
   11a58:	movt	r1, #2
   11a5c:	bl	14c60 <__assert_fail@plt+0x3c4c>
   11a60:	ldr	r1, [r8]
   11a64:	str	r0, [r9]
   11a68:	b	11a70 <__assert_fail@plt+0xa5c>
   11a6c:	ldr	r0, [r9]
   11a70:	add	r2, r1, #1
   11a74:	str	r2, [r8]
   11a78:	str	r5, [r0, r1, lsl #3]!
   11a7c:	str	r4, [r0, #4]
   11a80:	movw	r0, #29392	; 0x72d0
   11a84:	movt	r0, #2
   11a88:	ldr	r1, [r0]
   11a8c:	subs	r1, r1, r7
   11a90:	rscs	r1, r6, #0
   11a94:	bcs	11aa4 <__assert_fail@plt+0xa90>
   11a98:	cmp	r6, #0
   11a9c:	bne	11aa8 <__assert_fail@plt+0xa94>
   11aa0:	str	r7, [r0]
   11aa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11aa8:	movw	r1, #23104	; 0x5a40
   11aac:	mov	r0, #0
   11ab0:	mov	r2, #5
   11ab4:	movt	r1, #1
   11ab8:	bl	10e4c <dcgettext@plt>
   11abc:	mov	r2, r0
   11ac0:	mov	r0, #1
   11ac4:	mov	r1, #0
   11ac8:	bl	10eb8 <error@plt>
   11acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad0:	add	fp, sp, #28
   11ad4:	sub	sp, sp, #12
   11ad8:	mov	r5, r0
   11adc:	mov	r0, #1
   11ae0:	mov	r7, #0
   11ae4:	mov	r8, #0
   11ae8:	mov	r9, #0
   11aec:	mov	sl, #0
   11af0:	mov	r6, #0
   11af4:	str	r0, [sp, #4]
   11af8:	mov	r0, #0
   11afc:	str	r0, [sp, #8]
   11b00:	b	11b20 <__assert_fail@plt+0xb0c>
   11b04:	mov	r0, r7
   11b08:	mov	r1, r8
   11b0c:	bl	119d8 <__assert_fail@plt+0x9c4>
   11b10:	mov	r9, #0
   11b14:	mov	sl, #0
   11b18:	mov	r6, #0
   11b1c:	add	r5, r5, #1
   11b20:	ldrb	r4, [r5]
   11b24:	cmp	r4, #44	; 0x2c
   11b28:	beq	11ba0 <__assert_fail@plt+0xb8c>
   11b2c:	cmp	r4, #0
   11b30:	beq	11d6c <__assert_fail@plt+0xd58>
   11b34:	bl	10f00 <__ctype_b_loc@plt>
   11b38:	ldr	r0, [r0]
   11b3c:	ldrb	r0, [r0, r4, lsl #1]
   11b40:	tst	r0, #1
   11b44:	bne	11ba0 <__assert_fail@plt+0xb8c>
   11b48:	cmp	r4, #43	; 0x2b
   11b4c:	beq	11bf4 <__assert_fail@plt+0xbe0>
   11b50:	cmp	r4, #47	; 0x2f
   11b54:	bne	11c50 <__assert_fail@plt+0xc3c>
   11b58:	mov	sl, #0
   11b5c:	tst	r6, #1
   11b60:	beq	11d54 <__assert_fail@plt+0xd40>
   11b64:	movw	r1, #23127	; 0x5a57
   11b68:	mov	r0, #0
   11b6c:	mov	r2, #5
   11b70:	movt	r1, #1
   11b74:	bl	10e4c <dcgettext@plt>
   11b78:	mov	r6, r0
   11b7c:	mov	r0, r5
   11b80:	bl	142b0 <__assert_fail@plt+0x329c>
   11b84:	mov	r3, r0
   11b88:	mov	r0, #0
   11b8c:	mov	r1, #0
   11b90:	mov	r2, r6
   11b94:	bl	10eb8 <error@plt>
   11b98:	mov	r9, #1
   11b9c:	b	11c38 <__assert_fail@plt+0xc24>
   11ba0:	tst	r6, #1
   11ba4:	beq	11b18 <__assert_fail@plt+0xb04>
   11ba8:	tst	r9, #1
   11bac:	beq	11bd0 <__assert_fail@plt+0xbbc>
   11bb0:	movw	r4, #29040	; 0x7170
   11bb4:	movt	r4, #2
   11bb8:	ldrd	r0, [r4]
   11bbc:	orrs	r0, r0, r1
   11bc0:	bne	11d98 <__assert_fail@plt+0xd84>
   11bc4:	stm	r4, {r7, r8}
   11bc8:	mov	r9, #1
   11bcc:	b	11b18 <__assert_fail@plt+0xb04>
   11bd0:	tst	sl, #1
   11bd4:	beq	11b04 <__assert_fail@plt+0xaf0>
   11bd8:	movw	r4, #29048	; 0x7178
   11bdc:	movt	r4, #2
   11be0:	ldrd	r0, [r4]
   11be4:	orrs	r0, r0, r1
   11be8:	bne	11e30 <__assert_fail@plt+0xe1c>
   11bec:	stm	r4, {r7, r8}
   11bf0:	b	11c44 <__assert_fail@plt+0xc30>
   11bf4:	tst	r6, #1
   11bf8:	beq	11c44 <__assert_fail@plt+0xc30>
   11bfc:	movw	r1, #23168	; 0x5a80
   11c00:	mov	r0, #0
   11c04:	mov	r2, #5
   11c08:	mov	r9, #0
   11c0c:	movt	r1, #1
   11c10:	bl	10e4c <dcgettext@plt>
   11c14:	mov	r6, r0
   11c18:	mov	r0, r5
   11c1c:	bl	142b0 <__assert_fail@plt+0x329c>
   11c20:	mov	r3, r0
   11c24:	mov	r0, #0
   11c28:	mov	r1, #0
   11c2c:	mov	r2, r6
   11c30:	bl	10eb8 <error@plt>
   11c34:	mov	sl, #1
   11c38:	mov	r0, #0
   11c3c:	str	r0, [sp, #4]
   11c40:	b	11d48 <__assert_fail@plt+0xd34>
   11c44:	mov	sl, #1
   11c48:	mov	r9, #0
   11c4c:	b	11b18 <__assert_fail@plt+0xb04>
   11c50:	sub	r0, r4, #48	; 0x30
   11c54:	cmp	r0, #9
   11c58:	bhi	11df4 <__assert_fail@plt+0xde0>
   11c5c:	movw	r3, #39321	; 0x9999
   11c60:	ands	r1, r6, #1
   11c64:	ldr	r2, [sp, #8]
   11c68:	moveq	r2, r5
   11c6c:	movt	r3, #39321	; 0x9999
   11c70:	str	r2, [sp, #8]
   11c74:	mov	r2, r1
   11c78:	movne	r1, r7
   11c7c:	movne	r2, r8
   11c80:	subs	r3, r3, r1
   11c84:	movw	r3, #39321	; 0x9999
   11c88:	movt	r3, #6553	; 0x1999
   11c8c:	sbcs	r3, r3, r2
   11c90:	bcc	11cc4 <__assert_fail@plt+0xcb0>
   11c94:	mov	r3, #10
   11c98:	add	r6, r2, r2, lsl #2
   11c9c:	mov	r8, r2
   11ca0:	umull	r3, r7, r1, r3
   11ca4:	add	r7, r7, r6, lsl #1
   11ca8:	adds	r3, r3, r0
   11cac:	mov	r6, #1
   11cb0:	adc	r0, r7, r0, asr #31
   11cb4:	subs	r7, r3, r1
   11cb8:	sbcs	r7, r0, r2
   11cbc:	mov	r7, r1
   11cc0:	bcs	11d5c <__assert_fail@plt+0xd48>
   11cc4:	str	sl, [sp]
   11cc8:	movw	r1, #23209	; 0x5aa9
   11ccc:	ldr	sl, [sp, #8]
   11cd0:	movt	r1, #1
   11cd4:	mov	r0, sl
   11cd8:	bl	11008 <strspn@plt>
   11cdc:	mov	r5, r0
   11ce0:	mov	r0, sl
   11ce4:	mov	r1, r5
   11ce8:	bl	14f7c <__assert_fail@plt+0x3f68>
   11cec:	movw	r1, #23220	; 0x5ab4
   11cf0:	mov	r6, r0
   11cf4:	mov	r0, #0
   11cf8:	mov	r2, #5
   11cfc:	movt	r1, #1
   11d00:	str	r0, [sp, #4]
   11d04:	mov	r0, #0
   11d08:	bl	10e4c <dcgettext@plt>
   11d0c:	mov	r4, r8
   11d10:	mov	r8, r0
   11d14:	mov	r0, r6
   11d18:	bl	142b0 <__assert_fail@plt+0x329c>
   11d1c:	mov	r3, r0
   11d20:	mov	r2, r8
   11d24:	mov	r0, #0
   11d28:	mov	r1, #0
   11d2c:	mov	r8, r4
   11d30:	bl	10eb8 <error@plt>
   11d34:	mov	r0, r6
   11d38:	bl	1258c <__assert_fail@plt+0x1578>
   11d3c:	add	r0, sl, r5
   11d40:	ldr	sl, [sp]
   11d44:	sub	r5, r0, #1
   11d48:	mov	r6, #1
   11d4c:	add	r5, r5, #1
   11d50:	b	11b20 <__assert_fail@plt+0xb0c>
   11d54:	mov	r9, #1
   11d58:	b	11b18 <__assert_fail@plt+0xb04>
   11d5c:	mov	r7, r3
   11d60:	mov	r8, r0
   11d64:	add	r5, r5, #1
   11d68:	b	11b20 <__assert_fail@plt+0xb0c>
   11d6c:	ldr	r1, [sp, #4]
   11d70:	and	r0, r1, r6
   11d74:	tst	r0, #1
   11d78:	beq	11da4 <__assert_fail@plt+0xd90>
   11d7c:	tst	r9, #1
   11d80:	beq	11db8 <__assert_fail@plt+0xda4>
   11d84:	movw	r4, #29040	; 0x7170
   11d88:	movt	r4, #2
   11d8c:	ldrd	r0, [r4]
   11d90:	orrs	r0, r0, r1
   11d94:	beq	11dd4 <__assert_fail@plt+0xdc0>
   11d98:	movw	r1, #23770	; 0x5cda
   11d9c:	movt	r1, #1
   11da0:	b	11e38 <__assert_fail@plt+0xe24>
   11da4:	tst	r1, #1
   11da8:	subne	sp, fp, #28
   11dac:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11db0:	mov	r0, #1
   11db4:	bl	10f0c <exit@plt>
   11db8:	tst	sl, #1
   11dbc:	beq	11de0 <__assert_fail@plt+0xdcc>
   11dc0:	movw	r4, #29048	; 0x7178
   11dc4:	movt	r4, #2
   11dc8:	ldrd	r0, [r4]
   11dcc:	orrs	r0, r0, r1
   11dd0:	bne	11e30 <__assert_fail@plt+0xe1c>
   11dd4:	stm	r4, {r7, r8}
   11dd8:	sub	sp, fp, #28
   11ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11de0:	mov	r0, r7
   11de4:	mov	r1, r8
   11de8:	sub	sp, fp, #28
   11dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df0:	b	119d8 <__assert_fail@plt+0x9c4>
   11df4:	movw	r1, #23245	; 0x5acd
   11df8:	mov	r0, #0
   11dfc:	mov	r2, #5
   11e00:	movt	r1, #1
   11e04:	bl	10e4c <dcgettext@plt>
   11e08:	mov	r4, r0
   11e0c:	mov	r0, r5
   11e10:	bl	142b0 <__assert_fail@plt+0x329c>
   11e14:	mov	r3, r0
   11e18:	mov	r0, #0
   11e1c:	mov	r1, #0
   11e20:	mov	r2, r4
   11e24:	bl	10eb8 <error@plt>
   11e28:	mov	r0, #1
   11e2c:	bl	10f0c <exit@plt>
   11e30:	movw	r1, #23817	; 0x5d09
   11e34:	movt	r1, #1
   11e38:	mov	r0, #0
   11e3c:	mov	r2, #5
   11e40:	bl	10e4c <dcgettext@plt>
   11e44:	mov	r2, r0
   11e48:	mov	r0, #0
   11e4c:	mov	r1, #0
   11e50:	bl	10eb8 <error@plt>
   11e54:	mov	r0, #1
   11e58:	stm	r4, {r7, r8}
   11e5c:	bl	10f0c <exit@plt>
   11e60:	push	{r4, r5, r6, r7, fp, lr}
   11e64:	add	fp, sp, #16
   11e68:	movw	r0, #29024	; 0x7160
   11e6c:	movt	r0, #2
   11e70:	ldr	r1, [r0]
   11e74:	movw	r0, #29028	; 0x7164
   11e78:	movt	r0, #2
   11e7c:	ldr	ip, [r0]
   11e80:	cmp	r1, #0
   11e84:	beq	11ec4 <__assert_fail@plt+0xeb0>
   11e88:	mov	r6, #0
   11e8c:	mov	r2, ip
   11e90:	mov	r3, r1
   11e94:	mov	r5, #0
   11e98:	ldm	r2, {r4, r7}
   11e9c:	orrs	r0, r4, r7
   11ea0:	beq	11f54 <__assert_fail@plt+0xf40>
   11ea4:	subs	r0, r6, r4
   11ea8:	sbcs	r0, r5, r7
   11eac:	bcs	11f60 <__assert_fail@plt+0xf4c>
   11eb0:	add	r2, r2, #8
   11eb4:	subs	r3, r3, #1
   11eb8:	mov	r6, r4
   11ebc:	mov	r5, r7
   11ec0:	bne	11e98 <__assert_fail@plt+0xe84>
   11ec4:	movw	r2, #29040	; 0x7170
   11ec8:	movt	r2, #2
   11ecc:	ldrd	r4, [r2]
   11ed0:	movw	r2, #29048	; 0x7178
   11ed4:	movt	r2, #2
   11ed8:	ldrd	r2, [r2]
   11edc:	orrs	r7, r2, r3
   11ee0:	orrsne	r6, r4, r5
   11ee4:	bne	11f84 <__assert_fail@plt+0xf70>
   11ee8:	cmp	r1, #0
   11eec:	beq	11f14 <__assert_fail@plt+0xf00>
   11ef0:	mov	r6, #0
   11ef4:	cmp	r1, #1
   11ef8:	bne	11f40 <__assert_fail@plt+0xf2c>
   11efc:	orr	r0, r4, r2
   11f00:	orr	r1, r5, r3
   11f04:	mov	r7, #0
   11f08:	orrs	r0, r0, r1
   11f0c:	ldrdeq	r6, [ip]
   11f10:	b	11f44 <__assert_fail@plt+0xf30>
   11f14:	cmp	r7, #0
   11f18:	orr	r0, r4, r5
   11f1c:	mov	r7, #0
   11f20:	movweq	r2, #8
   11f24:	cmp	r0, #0
   11f28:	movw	r0, #29392	; 0x72d0
   11f2c:	movt	r0, #2
   11f30:	movne	r2, r4
   11f34:	mov	r6, r2
   11f38:	str	r2, [r0]
   11f3c:	b	11f44 <__assert_fail@plt+0xf30>
   11f40:	mov	r7, #0
   11f44:	movw	r0, #29056	; 0x7180
   11f48:	movt	r0, #2
   11f4c:	strd	r6, [r0]
   11f50:	pop	{r4, r5, r6, r7, fp, pc}
   11f54:	movw	r1, #23864	; 0x5d38
   11f58:	movt	r1, #1
   11f5c:	b	11f68 <__assert_fail@plt+0xf54>
   11f60:	movw	r1, #23885	; 0x5d4d
   11f64:	movt	r1, #1
   11f68:	mov	r0, #0
   11f6c:	mov	r2, #5
   11f70:	bl	10e4c <dcgettext@plt>
   11f74:	mov	r2, r0
   11f78:	mov	r0, #1
   11f7c:	mov	r1, #0
   11f80:	bl	10eb8 <error@plt>
   11f84:	movw	r1, #23913	; 0x5d69
   11f88:	movt	r1, #1
   11f8c:	b	11f68 <__assert_fail@plt+0xf54>
   11f90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f94:	add	fp, sp, #24
   11f98:	mov	r9, r0
   11f9c:	mov	r0, #0
   11fa0:	mov	r8, r1
   11fa4:	strb	r0, [r3]
   11fa8:	movw	r0, #29056	; 0x7180
   11fac:	movt	r0, #2
   11fb0:	ldrd	r6, [r0]
   11fb4:	orrs	r0, r6, r7
   11fb8:	bne	1201c <__assert_fail@plt+0x1008>
   11fbc:	movw	r0, #29024	; 0x7160
   11fc0:	ldr	r1, [r2]
   11fc4:	movt	r0, #2
   11fc8:	ldr	r0, [r0]
   11fcc:	cmp	r1, r0
   11fd0:	bcs	12008 <__assert_fail@plt+0xff4>
   11fd4:	movw	r7, #29028	; 0x7164
   11fd8:	movt	r7, #2
   11fdc:	ldr	r7, [r7]
   11fe0:	add	r4, r7, r1, lsl #3
   11fe4:	ldrd	r6, [r4]
   11fe8:	subs	r5, r9, r6
   11fec:	sbcs	r5, r8, r7
   11ff0:	bcc	12040 <__assert_fail@plt+0x102c>
   11ff4:	add	r1, r1, #1
   11ff8:	add	r4, r4, #8
   11ffc:	cmp	r1, r0
   12000:	str	r1, [r2]
   12004:	bcc	11fe4 <__assert_fail@plt+0xfd0>
   12008:	movw	r1, #29040	; 0x7170
   1200c:	movt	r1, #2
   12010:	ldrd	r6, [r1]
   12014:	orrs	r1, r6, r7
   12018:	beq	1204c <__assert_fail@plt+0x1038>
   1201c:	mov	r0, r9
   12020:	mov	r1, r8
   12024:	mov	r2, r6
   12028:	mov	r3, r7
   1202c:	bl	15374 <__assert_fail@plt+0x4360>
   12030:	adds	r0, r6, r9
   12034:	adc	r1, r7, r8
   12038:	subs	r6, r0, r2
   1203c:	sbc	r7, r1, r3
   12040:	mov	r0, r6
   12044:	mov	r1, r7
   12048:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1204c:	movw	r1, #29048	; 0x7178
   12050:	movt	r1, #2
   12054:	ldrd	r6, [r1]
   12058:	orrs	r1, r6, r7
   1205c:	beq	12080 <__assert_fail@plt+0x106c>
   12060:	movw	r1, #29028	; 0x7164
   12064:	movt	r1, #2
   12068:	ldr	r1, [r1]
   1206c:	add	r0, r1, r0, lsl #3
   12070:	ldrd	r0, [r0, #-8]
   12074:	subs	r0, r9, r0
   12078:	sbc	r1, r8, r1
   1207c:	b	12024 <__assert_fail@plt+0x1010>
   12080:	mov	r0, #1
   12084:	mov	r6, #0
   12088:	mov	r7, #0
   1208c:	strb	r0, [r3]
   12090:	b	12040 <__assert_fail@plt+0x102c>
   12094:	movw	r1, #29064	; 0x7188
   12098:	mov	r2, #0
   1209c:	cmp	r0, #0
   120a0:	movt	r1, #2
   120a4:	strb	r2, [r1]
   120a8:	movw	r1, #28896	; 0x70e0
   120ac:	movt	r1, #2
   120b0:	movne	r1, r0
   120b4:	movw	r0, #29068	; 0x718c
   120b8:	movt	r0, #2
   120bc:	str	r1, [r0]
   120c0:	bx	lr
   120c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120c8:	add	fp, sp, #28
   120cc:	sub	sp, sp, #4
   120d0:	cmp	r0, #0
   120d4:	beq	12170 <__assert_fail@plt+0x115c>
   120d8:	movw	r8, #29072	; 0x7190
   120dc:	movt	r8, #2
   120e0:	ldr	r7, [r8]
   120e4:	cmp	r7, #0
   120e8:	beq	12290 <__assert_fail@plt+0x127c>
   120ec:	mov	r5, r0
   120f0:	bl	10f30 <__errno_location@plt>
   120f4:	ldr	r1, [r5]
   120f8:	mov	r6, r0
   120fc:	ldr	r0, [r0]
   12100:	lsl	r1, r1, #26
   12104:	and	r4, r0, r1, asr #31
   12108:	movw	r1, #24046	; 0x5dee
   1210c:	mov	r0, r7
   12110:	movt	r1, #1
   12114:	bl	10dec <strcmp@plt>
   12118:	cmp	r0, #0
   1211c:	beq	1227c <__assert_fail@plt+0x1268>
   12120:	mov	r0, r5
   12124:	bl	12494 <__assert_fail@plt+0x1480>
   12128:	cmp	r0, #0
   1212c:	ldrne	r4, [r6]
   12130:	cmp	r4, #0
   12134:	beq	12170 <__assert_fail@plt+0x115c>
   12138:	ldr	r2, [r8]
   1213c:	mov	r0, #0
   12140:	mov	r1, #3
   12144:	bl	14004 <__assert_fail@plt+0x2ff0>
   12148:	movw	r2, #23285	; 0x5af5
   1214c:	mov	r3, r0
   12150:	mov	r0, #0
   12154:	mov	r1, r4
   12158:	movt	r2, #1
   1215c:	bl	10eb8 <error@plt>
   12160:	movw	r1, #29020	; 0x715c
   12164:	mov	r0, #1
   12168:	movt	r1, #2
   1216c:	str	r0, [r1]
   12170:	movw	sl, #29068	; 0x718c
   12174:	movt	sl, #2
   12178:	ldr	r0, [sl]
   1217c:	add	r1, r0, #4
   12180:	str	r1, [sl]
   12184:	ldr	r7, [r0]
   12188:	cmp	r7, #0
   1218c:	beq	12250 <__assert_fail@plt+0x123c>
   12190:	movw	r9, #24046	; 0x5dee
   12194:	movw	r5, #23285	; 0x5af5
   12198:	mov	r8, #1
   1219c:	movt	r9, #1
   121a0:	movt	r5, #1
   121a4:	mov	r0, r7
   121a8:	mov	r1, r9
   121ac:	bl	10dec <strcmp@plt>
   121b0:	cmp	r0, #0
   121b4:	beq	121d8 <__assert_fail@plt+0x11c4>
   121b8:	movw	r1, #22948	; 0x59a4
   121bc:	mov	r0, r7
   121c0:	movt	r1, #1
   121c4:	bl	10fd8 <fopen64@plt>
   121c8:	mov	r6, r0
   121cc:	cmp	r6, #0
   121d0:	beq	121f8 <__assert_fail@plt+0x11e4>
   121d4:	b	12258 <__assert_fail@plt+0x1244>
   121d8:	movw	r0, #29064	; 0x7188
   121dc:	movt	r0, #2
   121e0:	strb	r8, [r0]
   121e4:	movw	r0, #29000	; 0x7148
   121e8:	movt	r0, #2
   121ec:	ldr	r6, [r0]
   121f0:	cmp	r6, #0
   121f4:	bne	12258 <__assert_fail@plt+0x1244>
   121f8:	bl	10f30 <__errno_location@plt>
   121fc:	ldr	r4, [r0]
   12200:	mov	r0, #0
   12204:	mov	r1, #3
   12208:	mov	r2, r7
   1220c:	mov	r6, #0
   12210:	bl	14004 <__assert_fail@plt+0x2ff0>
   12214:	mov	r3, r0
   12218:	mov	r0, #0
   1221c:	mov	r1, r4
   12220:	mov	r2, r5
   12224:	bl	10eb8 <error@plt>
   12228:	movw	r0, #29020	; 0x715c
   1222c:	movt	r0, #2
   12230:	str	r8, [r0]
   12234:	ldr	r0, [sl]
   12238:	add	r1, r0, #4
   1223c:	str	r1, [sl]
   12240:	ldr	r7, [r0]
   12244:	cmp	r7, #0
   12248:	bne	121a4 <__assert_fail@plt+0x1190>
   1224c:	b	12270 <__assert_fail@plt+0x125c>
   12250:	mov	r6, #0
   12254:	b	12270 <__assert_fail@plt+0x125c>
   12258:	movw	r0, #29072	; 0x7190
   1225c:	mov	r1, #2
   12260:	movt	r0, #2
   12264:	str	r7, [r0]
   12268:	mov	r0, r6
   1226c:	bl	12458 <__assert_fail@plt+0x1444>
   12270:	mov	r0, r6
   12274:	sub	sp, fp, #28
   12278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1227c:	mov	r0, r5
   12280:	bl	10fcc <clearerr_unlocked@plt>
   12284:	cmp	r4, #0
   12288:	bne	12138 <__assert_fail@plt+0x1124>
   1228c:	b	12170 <__assert_fail@plt+0x115c>
   12290:	movw	r0, #23288	; 0x5af8
   12294:	movw	r1, #23298	; 0x5b02
   12298:	movw	r3, #23318	; 0x5b16
   1229c:	mov	r2, #340	; 0x154
   122a0:	movt	r0, #1
   122a4:	movt	r1, #1
   122a8:	movt	r3, #1
   122ac:	bl	11014 <__assert_fail@plt>
   122b0:	push	{fp, lr}
   122b4:	mov	fp, sp
   122b8:	movw	r0, #29064	; 0x7188
   122bc:	movt	r0, #2
   122c0:	ldrb	r0, [r0]
   122c4:	cmp	r0, #1
   122c8:	popne	{fp, pc}
   122cc:	movw	r0, #29000	; 0x7148
   122d0:	movt	r0, #2
   122d4:	ldr	r0, [r0]
   122d8:	bl	12494 <__assert_fail@plt+0x1480>
   122dc:	cmp	r0, #0
   122e0:	bne	122e8 <__assert_fail@plt+0x12d4>
   122e4:	pop	{fp, pc}
   122e8:	bl	10f30 <__errno_location@plt>
   122ec:	ldr	r1, [r0]
   122f0:	movw	r2, #24046	; 0x5dee
   122f4:	mov	r0, #1
   122f8:	movt	r2, #1
   122fc:	bl	10eb8 <error@plt>
   12300:	push	{r4, sl, fp, lr}
   12304:	add	fp, sp, #8
   12308:	movw	r1, #23342	; 0x5b2e
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	movt	r1, #1
   12318:	bl	10e4c <dcgettext@plt>
   1231c:	movw	r4, #29004	; 0x714c
   12320:	movt	r4, #2
   12324:	ldr	r1, [r4]
   12328:	bl	10dd4 <fputs_unlocked@plt>
   1232c:	movw	r1, #23405	; 0x5b6d
   12330:	mov	r0, #0
   12334:	mov	r2, #5
   12338:	movt	r1, #1
   1233c:	bl	10e4c <dcgettext@plt>
   12340:	ldr	r1, [r4]
   12344:	pop	{r4, sl, fp, lr}
   12348:	b	10dd4 <fputs_unlocked@plt>
   1234c:	movw	r1, #29076	; 0x7194
   12350:	movt	r1, #2
   12354:	str	r0, [r1]
   12358:	bx	lr
   1235c:	movw	r1, #29080	; 0x7198
   12360:	movt	r1, #2
   12364:	strb	r0, [r1]
   12368:	bx	lr
   1236c:	push	{r4, r5, r6, sl, fp, lr}
   12370:	add	fp, sp, #16
   12374:	sub	sp, sp, #8
   12378:	movw	r0, #29004	; 0x714c
   1237c:	movt	r0, #2
   12380:	ldr	r0, [r0]
   12384:	bl	1510c <__assert_fail@plt+0x40f8>
   12388:	cmp	r0, #0
   1238c:	beq	123b4 <__assert_fail@plt+0x13a0>
   12390:	movw	r0, #29080	; 0x7198
   12394:	movt	r0, #2
   12398:	ldrb	r0, [r0]
   1239c:	cmp	r0, #0
   123a0:	beq	123d4 <__assert_fail@plt+0x13c0>
   123a4:	bl	10f30 <__errno_location@plt>
   123a8:	ldr	r0, [r0]
   123ac:	cmp	r0, #32
   123b0:	bne	123d4 <__assert_fail@plt+0x13c0>
   123b4:	movw	r0, #28992	; 0x7140
   123b8:	movt	r0, #2
   123bc:	ldr	r0, [r0]
   123c0:	bl	1510c <__assert_fail@plt+0x40f8>
   123c4:	cmp	r0, #0
   123c8:	subeq	sp, fp, #16
   123cc:	popeq	{r4, r5, r6, sl, fp, pc}
   123d0:	b	12444 <__assert_fail@plt+0x1430>
   123d4:	movw	r1, #22938	; 0x599a
   123d8:	mov	r0, #0
   123dc:	mov	r2, #5
   123e0:	movt	r1, #1
   123e4:	bl	10e4c <dcgettext@plt>
   123e8:	mov	r4, r0
   123ec:	movw	r0, #29076	; 0x7194
   123f0:	movt	r0, #2
   123f4:	ldr	r6, [r0]
   123f8:	bl	10f30 <__errno_location@plt>
   123fc:	ldr	r5, [r0]
   12400:	cmp	r6, #0
   12404:	bne	12420 <__assert_fail@plt+0x140c>
   12408:	movw	r2, #23285	; 0x5af5
   1240c:	mov	r0, #0
   12410:	mov	r1, r5
   12414:	mov	r3, r4
   12418:	movt	r2, #1
   1241c:	b	12440 <__assert_fail@plt+0x142c>
   12420:	mov	r0, r6
   12424:	bl	13f28 <__assert_fail@plt+0x2f14>
   12428:	movw	r2, #23973	; 0x5da5
   1242c:	mov	r3, r0
   12430:	str	r4, [sp]
   12434:	mov	r0, #0
   12438:	mov	r1, r5
   1243c:	movt	r2, #1
   12440:	bl	10eb8 <error@plt>
   12444:	movw	r0, #28908	; 0x70ec
   12448:	movt	r0, #2
   1244c:	ldr	r0, [r0]
   12450:	bl	10e1c <_exit@plt>
   12454:	b	10df8 <posix_fadvise64@plt>
   12458:	cmp	r0, #0
   1245c:	bxeq	lr
   12460:	push	{r4, sl, fp, lr}
   12464:	add	fp, sp, #8
   12468:	sub	sp, sp, #16
   1246c:	mov	r4, r1
   12470:	bl	10f60 <fileno@plt>
   12474:	mov	r1, #0
   12478:	mov	r2, #0
   1247c:	mov	r3, #0
   12480:	str	r1, [sp]
   12484:	stmib	sp, {r1, r4}
   12488:	bl	10df8 <posix_fadvise64@plt>
   1248c:	sub	sp, fp, #8
   12490:	pop	{r4, sl, fp, pc}
   12494:	push	{r4, r5, r6, sl, fp, lr}
   12498:	add	fp, sp, #16
   1249c:	sub	sp, sp, #8
   124a0:	mov	r4, r0
   124a4:	bl	10f60 <fileno@plt>
   124a8:	cmn	r0, #1
   124ac:	ble	12520 <__assert_fail@plt+0x150c>
   124b0:	mov	r0, r4
   124b4:	bl	10edc <__freading@plt>
   124b8:	cmp	r0, #0
   124bc:	beq	124e8 <__assert_fail@plt+0x14d4>
   124c0:	mov	r0, r4
   124c4:	bl	10f60 <fileno@plt>
   124c8:	mov	r1, #1
   124cc:	mov	r2, #0
   124d0:	mov	r3, #0
   124d4:	str	r1, [sp]
   124d8:	bl	10e88 <lseek64@plt>
   124dc:	and	r0, r0, r1
   124e0:	cmn	r0, #1
   124e4:	beq	12520 <__assert_fail@plt+0x150c>
   124e8:	mov	r0, r4
   124ec:	bl	12530 <__assert_fail@plt+0x151c>
   124f0:	cmp	r0, #0
   124f4:	beq	12520 <__assert_fail@plt+0x150c>
   124f8:	bl	10f30 <__errno_location@plt>
   124fc:	ldr	r6, [r0]
   12500:	mov	r5, r0
   12504:	mov	r0, r4
   12508:	bl	10f78 <fclose@plt>
   1250c:	cmp	r6, #0
   12510:	strne	r6, [r5]
   12514:	mvnne	r0, #0
   12518:	sub	sp, fp, #16
   1251c:	pop	{r4, r5, r6, sl, fp, pc}
   12520:	mov	r0, r4
   12524:	sub	sp, fp, #16
   12528:	pop	{r4, r5, r6, sl, fp, lr}
   1252c:	b	10f78 <fclose@plt>
   12530:	push	{r4, sl, fp, lr}
   12534:	add	fp, sp, #8
   12538:	sub	sp, sp, #8
   1253c:	mov	r4, r0
   12540:	cmp	r0, #0
   12544:	beq	1257c <__assert_fail@plt+0x1568>
   12548:	mov	r0, r4
   1254c:	bl	10edc <__freading@plt>
   12550:	cmp	r0, #0
   12554:	beq	1257c <__assert_fail@plt+0x1568>
   12558:	ldrb	r0, [r4, #1]
   1255c:	tst	r0, #1
   12560:	beq	1257c <__assert_fail@plt+0x1568>
   12564:	mov	r0, #1
   12568:	mov	r2, #0
   1256c:	mov	r3, #0
   12570:	str	r0, [sp]
   12574:	mov	r0, r4
   12578:	bl	125b4 <__assert_fail@plt+0x15a0>
   1257c:	mov	r0, r4
   12580:	sub	sp, fp, #8
   12584:	pop	{r4, sl, fp, lr}
   12588:	b	10e04 <fflush@plt>
   1258c:	push	{r4, r5, r6, sl, fp, lr}
   12590:	add	fp, sp, #16
   12594:	mov	r4, r0
   12598:	bl	10f30 <__errno_location@plt>
   1259c:	ldr	r6, [r0]
   125a0:	mov	r5, r0
   125a4:	mov	r0, r4
   125a8:	bl	10e10 <free@plt>
   125ac:	str	r6, [r5]
   125b0:	pop	{r4, r5, r6, sl, fp, pc}
   125b4:	push	{r4, r5, r6, r7, fp, lr}
   125b8:	add	fp, sp, #16
   125bc:	sub	sp, sp, #8
   125c0:	mov	r4, r0
   125c4:	ldr	r0, [r0, #4]
   125c8:	mov	r5, r3
   125cc:	mov	r6, r2
   125d0:	ldr	r1, [r4, #8]
   125d4:	cmp	r1, r0
   125d8:	bne	125f4 <__assert_fail@plt+0x15e0>
   125dc:	ldrd	r0, [r4, #16]
   125e0:	cmp	r1, r0
   125e4:	bne	125f4 <__assert_fail@plt+0x15e0>
   125e8:	ldr	r0, [r4, #36]	; 0x24
   125ec:	cmp	r0, #0
   125f0:	beq	1260c <__assert_fail@plt+0x15f8>
   125f4:	mov	r0, r4
   125f8:	mov	r2, r6
   125fc:	mov	r3, r5
   12600:	sub	sp, fp, #16
   12604:	pop	{r4, r5, r6, r7, fp, lr}
   12608:	b	10f84 <fseeko64@plt>
   1260c:	ldr	r7, [fp, #8]
   12610:	mov	r0, r4
   12614:	bl	10f60 <fileno@plt>
   12618:	mov	r2, r6
   1261c:	mov	r3, r5
   12620:	str	r7, [sp]
   12624:	bl	10e88 <lseek64@plt>
   12628:	and	r2, r0, r1
   1262c:	cmn	r2, #1
   12630:	beq	12650 <__assert_fail@plt+0x163c>
   12634:	strd	r0, [r4, #80]	; 0x50
   12638:	ldr	r0, [r4]
   1263c:	bic	r0, r0, #16
   12640:	str	r0, [r4]
   12644:	mov	r0, #0
   12648:	sub	sp, fp, #16
   1264c:	pop	{r4, r5, r6, r7, fp, pc}
   12650:	mvn	r0, #0
   12654:	sub	sp, fp, #16
   12658:	pop	{r4, r5, r6, r7, fp, pc}
   1265c:	push	{r4, r5, fp, lr}
   12660:	add	fp, sp, #8
   12664:	cmp	r0, #0
   12668:	beq	126fc <__assert_fail@plt+0x16e8>
   1266c:	mov	r1, #47	; 0x2f
   12670:	mov	r4, r0
   12674:	bl	10fb4 <strrchr@plt>
   12678:	cmp	r0, #0
   1267c:	mov	r5, r4
   12680:	addne	r5, r0, #1
   12684:	sub	r0, r5, r4
   12688:	cmp	r0, #7
   1268c:	blt	126e0 <__assert_fail@plt+0x16cc>
   12690:	movw	r1, #24036	; 0x5de4
   12694:	sub	r0, r5, #7
   12698:	mov	r2, #7
   1269c:	movt	r1, #1
   126a0:	bl	10ff0 <strncmp@plt>
   126a4:	cmp	r0, #0
   126a8:	bne	126e0 <__assert_fail@plt+0x16cc>
   126ac:	movw	r1, #24044	; 0x5dec
   126b0:	mov	r0, r5
   126b4:	mov	r2, #3
   126b8:	movt	r1, #1
   126bc:	bl	10ff0 <strncmp@plt>
   126c0:	cmp	r0, #0
   126c4:	beq	126d0 <__assert_fail@plt+0x16bc>
   126c8:	mov	r4, r5
   126cc:	b	126e0 <__assert_fail@plt+0x16cc>
   126d0:	movw	r0, #28976	; 0x7130
   126d4:	add	r4, r5, #3
   126d8:	movt	r0, #2
   126dc:	str	r4, [r0]
   126e0:	movw	r0, #28980	; 0x7134
   126e4:	movt	r0, #2
   126e8:	str	r4, [r0]
   126ec:	movw	r0, #29084	; 0x719c
   126f0:	movt	r0, #2
   126f4:	str	r4, [r0]
   126f8:	pop	{r4, r5, fp, pc}
   126fc:	movw	r0, #28992	; 0x7140
   12700:	mov	r1, #55	; 0x37
   12704:	mov	r2, #1
   12708:	movt	r0, #2
   1270c:	ldr	r3, [r0]
   12710:	movw	r0, #23980	; 0x5dac
   12714:	movt	r0, #1
   12718:	bl	10e7c <fwrite@plt>
   1271c:	bl	10ffc <abort@plt>
   12720:	push	{r4, r5, r6, sl, fp, lr}
   12724:	add	fp, sp, #16
   12728:	mov	r4, r0
   1272c:	movw	r0, #29088	; 0x71a0
   12730:	movt	r0, #2
   12734:	cmp	r4, #0
   12738:	moveq	r4, r0
   1273c:	bl	10f30 <__errno_location@plt>
   12740:	ldr	r6, [r0]
   12744:	mov	r5, r0
   12748:	mov	r0, r4
   1274c:	mov	r1, #48	; 0x30
   12750:	bl	14f14 <__assert_fail@plt+0x3f00>
   12754:	str	r6, [r5]
   12758:	pop	{r4, r5, r6, sl, fp, pc}
   1275c:	movw	r1, #29088	; 0x71a0
   12760:	cmp	r0, #0
   12764:	movt	r1, #2
   12768:	movne	r1, r0
   1276c:	ldr	r0, [r1]
   12770:	bx	lr
   12774:	movw	r2, #29088	; 0x71a0
   12778:	cmp	r0, #0
   1277c:	movt	r2, #2
   12780:	movne	r2, r0
   12784:	str	r1, [r2]
   12788:	bx	lr
   1278c:	movw	r3, #29088	; 0x71a0
   12790:	cmp	r0, #0
   12794:	and	r2, r2, #1
   12798:	movt	r3, #2
   1279c:	movne	r3, r0
   127a0:	ubfx	r0, r1, #5, #3
   127a4:	and	r1, r1, #31
   127a8:	add	ip, r3, r0, lsl #2
   127ac:	mov	r0, #1
   127b0:	ldr	r3, [ip, #8]
   127b4:	and	r0, r0, r3, lsr r1
   127b8:	eor	r2, r0, r2
   127bc:	eor	r1, r3, r2, lsl r1
   127c0:	str	r1, [ip, #8]
   127c4:	bx	lr
   127c8:	movw	r2, #29088	; 0x71a0
   127cc:	cmp	r0, #0
   127d0:	movt	r2, #2
   127d4:	movne	r2, r0
   127d8:	ldr	r0, [r2, #4]
   127dc:	str	r1, [r2, #4]
   127e0:	bx	lr
   127e4:	push	{fp, lr}
   127e8:	mov	fp, sp
   127ec:	movw	r3, #29088	; 0x71a0
   127f0:	cmp	r0, #0
   127f4:	movt	r3, #2
   127f8:	movne	r3, r0
   127fc:	cmp	r1, #0
   12800:	mov	r0, #10
   12804:	cmpne	r2, #0
   12808:	str	r0, [r3]
   1280c:	bne	12814 <__assert_fail@plt+0x1800>
   12810:	bl	10ffc <abort@plt>
   12814:	str	r1, [r3, #40]	; 0x28
   12818:	str	r2, [r3, #44]	; 0x2c
   1281c:	pop	{fp, pc}
   12820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12824:	add	fp, sp, #28
   12828:	sub	sp, sp, #20
   1282c:	mov	r7, r0
   12830:	ldr	r0, [fp, #8]
   12834:	movw	r5, #29088	; 0x71a0
   12838:	mov	r8, r3
   1283c:	mov	r9, r2
   12840:	mov	sl, r1
   12844:	movt	r5, #2
   12848:	cmp	r0, #0
   1284c:	movne	r5, r0
   12850:	bl	10f30 <__errno_location@plt>
   12854:	ldr	r2, [r5, #40]	; 0x28
   12858:	ldr	r3, [r5, #44]	; 0x2c
   1285c:	mov	r4, r0
   12860:	ldm	r5, {r0, r1}
   12864:	add	r5, r5, #8
   12868:	ldr	r6, [r4]
   1286c:	stm	sp, {r0, r1, r5}
   12870:	mov	r0, r7
   12874:	mov	r1, sl
   12878:	str	r2, [sp, #12]
   1287c:	str	r3, [sp, #16]
   12880:	mov	r2, r9
   12884:	mov	r3, r8
   12888:	bl	12898 <__assert_fail@plt+0x1884>
   1288c:	str	r6, [r4]
   12890:	sub	sp, fp, #28
   12894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1289c:	add	fp, sp, #28
   128a0:	sub	sp, sp, #156	; 0x9c
   128a4:	mov	r5, r0
   128a8:	add	r0, r2, #1
   128ac:	mov	r6, r1
   128b0:	mov	sl, r3
   128b4:	str	r2, [fp, #-80]	; 0xffffffb0
   128b8:	str	r0, [sp, #72]	; 0x48
   128bc:	ldr	r0, [fp, #12]
   128c0:	and	r1, r0, #1
   128c4:	str	r1, [sp, #36]	; 0x24
   128c8:	and	r1, r0, #4
   128cc:	str	r1, [sp, #32]
   128d0:	ubfx	r9, r0, #1, #1
   128d4:	bl	10e94 <__ctype_get_mb_cur_max@plt>
   128d8:	str	r0, [sp, #40]	; 0x28
   128dc:	ldr	r0, [fp, #24]
   128e0:	ldr	r7, [fp, #8]
   128e4:	mov	r1, #0
   128e8:	str	r5, [fp, #-84]	; 0xffffffac
   128ec:	str	r1, [fp, #-56]	; 0xffffffc8
   128f0:	mov	r1, #0
   128f4:	str	r1, [sp, #60]	; 0x3c
   128f8:	mov	r1, #1
   128fc:	str	r1, [fp, #-48]	; 0xffffffd0
   12900:	str	r0, [sp, #80]	; 0x50
   12904:	ldr	r0, [fp, #20]
   12908:	str	r0, [sp, #76]	; 0x4c
   1290c:	mov	r0, #0
   12910:	str	r0, [sp, #56]	; 0x38
   12914:	mov	r0, #0
   12918:	str	r0, [fp, #-88]	; 0xffffffa8
   1291c:	mov	r0, #0
   12920:	str	r0, [fp, #-72]	; 0xffffffb8
   12924:	mov	r0, #0
   12928:	cmp	r7, #10
   1292c:	bhi	138c0 <__assert_fail@plt+0x28ac>
   12930:	add	r1, pc, #24
   12934:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12938:	mov	r4, r6
   1293c:	mov	r8, #0
   12940:	mov	r2, #1
   12944:	mov	r3, #0
   12948:	mov	lr, sl
   1294c:	ldr	pc, [r1, r7, lsl #2]
   12950:	andeq	r2, r1, r4, lsl sl
   12954:	andeq	r2, r1, r8, ror #20
   12958:	andeq	r2, r1, r8, lsr #20
   1295c:	andeq	r2, r1, ip, lsl #20
   12960:	andeq	r2, r1, ip, asr sl
   12964:	muleq	r1, r0, sl
   12968:	andeq	r2, r1, r8, lsr sl
   1296c:	andeq	r2, r1, r4, lsl fp
   12970:	andeq	r2, r1, ip, ror r9
   12974:	andeq	r2, r1, ip, ror r9
   12978:	andeq	r2, r1, r4, lsr #19
   1297c:	movw	r0, #24126	; 0x5e3e
   12980:	mov	r1, r7
   12984:	movt	r0, #1
   12988:	bl	142c8 <__assert_fail@plt+0x32b4>
   1298c:	str	r0, [sp, #76]	; 0x4c
   12990:	movw	r0, #23956	; 0x5d94
   12994:	mov	r1, r7
   12998:	movt	r0, #1
   1299c:	bl	142c8 <__assert_fail@plt+0x32b4>
   129a0:	str	r0, [sp, #80]	; 0x50
   129a4:	mov	r8, #0
   129a8:	tst	r9, #1
   129ac:	bne	129e4 <__assert_fail@plt+0x19d0>
   129b0:	ldr	r0, [sp, #76]	; 0x4c
   129b4:	ldrb	r0, [r0]
   129b8:	cmp	r0, #0
   129bc:	beq	129e4 <__assert_fail@plt+0x19d0>
   129c0:	ldr	r1, [sp, #76]	; 0x4c
   129c4:	mov	r8, #0
   129c8:	add	r1, r1, #1
   129cc:	cmp	r8, r4
   129d0:	strbcc	r0, [r5, r8]
   129d4:	ldrb	r0, [r1, r8]
   129d8:	add	r8, r8, #1
   129dc:	cmp	r0, #0
   129e0:	bne	129cc <__assert_fail@plt+0x19b8>
   129e4:	ldr	r6, [sp, #80]	; 0x50
   129e8:	mov	r0, r6
   129ec:	bl	10f24 <strlen@plt>
   129f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   129f4:	str	r0, [fp, #-72]	; 0xffffffb8
   129f8:	str	r6, [fp, #-88]	; 0xffffffa8
   129fc:	mov	r2, #1
   12a00:	mov	r3, r9
   12a04:	mov	lr, sl
   12a08:	b	12b14 <__assert_fail@plt+0x1b00>
   12a0c:	mov	r0, #1
   12a10:	b	12a68 <__assert_fail@plt+0x1a54>
   12a14:	mov	r7, #0
   12a18:	mov	r8, #0
   12a1c:	mov	r2, r0
   12a20:	mov	r3, #0
   12a24:	b	12b14 <__assert_fail@plt+0x1b00>
   12a28:	tst	r9, #1
   12a2c:	bne	12a68 <__assert_fail@plt+0x1a54>
   12a30:	mov	r2, r0
   12a34:	b	12ac0 <__assert_fail@plt+0x1aac>
   12a38:	mov	r0, #1
   12a3c:	mov	r8, #0
   12a40:	mov	r7, #5
   12a44:	mov	r2, #1
   12a48:	str	r0, [fp, #-72]	; 0xffffffb8
   12a4c:	movw	r0, #24124	; 0x5e3c
   12a50:	movt	r0, #1
   12a54:	str	r0, [fp, #-88]	; 0xffffffa8
   12a58:	b	12a88 <__assert_fail@plt+0x1a74>
   12a5c:	mov	r2, #1
   12a60:	tst	r9, #1
   12a64:	beq	12ac0 <__assert_fail@plt+0x1aac>
   12a68:	mov	r1, #1
   12a6c:	mov	r8, #0
   12a70:	mov	r7, #2
   12a74:	mov	r2, r0
   12a78:	str	r1, [fp, #-72]	; 0xffffffb8
   12a7c:	movw	r1, #23956	; 0x5d94
   12a80:	movt	r1, #1
   12a84:	str	r1, [fp, #-88]	; 0xffffffa8
   12a88:	mov	r3, #1
   12a8c:	b	12b14 <__assert_fail@plt+0x1b00>
   12a90:	tst	r9, #1
   12a94:	beq	12ae4 <__assert_fail@plt+0x1ad0>
   12a98:	mov	r0, #1
   12a9c:	mov	r8, #0
   12aa0:	mov	r2, #1
   12aa4:	mov	r3, #1
   12aa8:	mov	r7, #5
   12aac:	str	r0, [fp, #-72]	; 0xffffffb8
   12ab0:	movw	r0, #24124	; 0x5e3c
   12ab4:	movt	r0, #1
   12ab8:	str	r0, [fp, #-88]	; 0xffffffa8
   12abc:	b	12b14 <__assert_fail@plt+0x1b00>
   12ac0:	cmp	r4, #0
   12ac4:	mov	r8, #1
   12ac8:	mov	r3, #0
   12acc:	mov	r7, #2
   12ad0:	movne	r0, #39	; 0x27
   12ad4:	strbne	r0, [r5]
   12ad8:	movw	r0, #23956	; 0x5d94
   12adc:	movt	r0, #1
   12ae0:	b	12b08 <__assert_fail@plt+0x1af4>
   12ae4:	cmp	r4, #0
   12ae8:	mov	r8, #1
   12aec:	mov	r2, #1
   12af0:	mov	r7, #5
   12af4:	mov	r3, #0
   12af8:	movne	r0, #34	; 0x22
   12afc:	strbne	r0, [r5]
   12b00:	movw	r0, #24124	; 0x5e3c
   12b04:	movt	r0, #1
   12b08:	str	r0, [fp, #-88]	; 0xffffffa8
   12b0c:	mov	r0, #1
   12b10:	str	r0, [fp, #-72]	; 0xffffffb8
   12b14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b18:	eor	r6, r3, #1
   12b1c:	str	r7, [fp, #-68]	; 0xffffffbc
   12b20:	str	r3, [fp, #-76]	; 0xffffffb4
   12b24:	str	r2, [sp, #84]	; 0x54
   12b28:	str	r6, [sp, #92]	; 0x5c
   12b2c:	cmp	r0, #0
   12b30:	movwne	r0, #1
   12b34:	and	r1, r0, r3
   12b38:	and	r1, r2, r1
   12b3c:	str	r1, [sp, #48]	; 0x30
   12b40:	sub	r1, r7, #2
   12b44:	clz	r1, r1
   12b48:	lsr	r1, r1, #5
   12b4c:	and	r1, r1, r3
   12b50:	str	r1, [sp, #64]	; 0x40
   12b54:	subs	r1, r7, #2
   12b58:	mov	r7, #0
   12b5c:	movwne	r1, #1
   12b60:	orr	r6, r1, r6
   12b64:	and	r1, r1, r2
   12b68:	and	r0, r0, r1
   12b6c:	str	r6, [sp, #68]	; 0x44
   12b70:	str	r0, [fp, #-60]	; 0xffffffc4
   12b74:	orr	r0, r1, r3
   12b78:	ldr	r1, [fp, #16]
   12b7c:	eor	r0, r0, #1
   12b80:	clz	r1, r1
   12b84:	lsr	r1, r1, #5
   12b88:	orr	r0, r1, r0
   12b8c:	str	r0, [fp, #-64]	; 0xffffffc0
   12b90:	eor	r0, r2, #1
   12b94:	str	r0, [sp, #52]	; 0x34
   12b98:	cmn	lr, #1
   12b9c:	beq	12bac <__assert_fail@plt+0x1b98>
   12ba0:	cmp	r7, lr
   12ba4:	bne	12bb8 <__assert_fail@plt+0x1ba4>
   12ba8:	b	13700 <__assert_fail@plt+0x26ec>
   12bac:	ldrb	r0, [ip, r7]
   12bb0:	cmp	r0, #0
   12bb4:	beq	13708 <__assert_fail@plt+0x26f4>
   12bb8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12bbc:	mov	sl, #0
   12bc0:	cmp	r0, #0
   12bc4:	beq	12bfc <__assert_fail@plt+0x1be8>
   12bc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12bcc:	add	r5, r7, r0
   12bd0:	cmp	r0, #2
   12bd4:	bcc	12bf0 <__assert_fail@plt+0x1bdc>
   12bd8:	cmn	lr, #1
   12bdc:	bne	12bf0 <__assert_fail@plt+0x1bdc>
   12be0:	mov	r0, ip
   12be4:	bl	10f24 <strlen@plt>
   12be8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12bec:	mov	lr, r0
   12bf0:	cmp	r5, lr
   12bf4:	bls	12c04 <__assert_fail@plt+0x1bf0>
   12bf8:	ldr	r5, [fp, #-84]	; 0xffffffac
   12bfc:	mov	r0, #0
   12c00:	b	12c50 <__assert_fail@plt+0x1c3c>
   12c04:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12c08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12c0c:	add	r0, ip, r7
   12c10:	mov	r6, r4
   12c14:	mov	r4, lr
   12c18:	bl	10f18 <bcmp@plt>
   12c1c:	ldr	r2, [sp, #92]	; 0x5c
   12c20:	cmp	r0, #0
   12c24:	ldr	r5, [fp, #-84]	; 0xffffffac
   12c28:	mov	r1, r0
   12c2c:	movwne	r1, #1
   12c30:	orr	r1, r1, r2
   12c34:	tst	r1, #1
   12c38:	beq	13790 <__assert_fail@plt+0x277c>
   12c3c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12c40:	clz	r0, r0
   12c44:	mov	lr, r4
   12c48:	mov	r4, r6
   12c4c:	lsr	r0, r0, #5
   12c50:	str	r0, [fp, #-52]	; 0xffffffcc
   12c54:	ldrb	r6, [ip, r7]
   12c58:	cmp	r6, #126	; 0x7e
   12c5c:	bhi	1318c <__assert_fail@plt+0x2178>
   12c60:	add	r3, pc, #16
   12c64:	mov	r9, #1
   12c68:	mov	r2, #110	; 0x6e
   12c6c:	mov	r0, #97	; 0x61
   12c70:	mov	r1, #0
   12c74:	ldr	pc, [r3, r6, lsl #2]
   12c78:	andeq	r2, r1, ip, ror #31
   12c7c:	andeq	r3, r1, ip, lsl #3
   12c80:	andeq	r3, r1, ip, lsl #3
   12c84:	andeq	r3, r1, ip, lsl #3
   12c88:	andeq	r3, r1, ip, lsl #3
   12c8c:	andeq	r3, r1, ip, lsl #3
   12c90:	andeq	r3, r1, ip, lsl #3
   12c94:	andeq	r3, r1, r8, ror #4
   12c98:	andeq	r2, r1, ip, asr #31
   12c9c:	andeq	r2, r1, r4, asr #31
   12ca0:	ldrdeq	r2, [r1], -r8
   12ca4:	strdeq	r3, [r1], -r4
   12ca8:			; <UNDEFINED> instruction: 0x00012fbc
   12cac:	ldrdeq	r2, [r1], -r4
   12cb0:	andeq	r3, r1, ip, lsl #3
   12cb4:	andeq	r3, r1, ip, lsl #3
   12cb8:	andeq	r3, r1, ip, lsl #3
   12cbc:	andeq	r3, r1, ip, lsl #3
   12cc0:	andeq	r3, r1, ip, lsl #3
   12cc4:	andeq	r3, r1, ip, lsl #3
   12cc8:	andeq	r3, r1, ip, lsl #3
   12ccc:	andeq	r3, r1, ip, lsl #3
   12cd0:	andeq	r3, r1, ip, lsl #3
   12cd4:	andeq	r3, r1, ip, lsl #3
   12cd8:	andeq	r3, r1, ip, lsl #3
   12cdc:	andeq	r3, r1, ip, lsl #3
   12ce0:	andeq	r3, r1, ip, lsl #3
   12ce4:	andeq	r3, r1, ip, lsl #3
   12ce8:	andeq	r3, r1, ip, lsl #3
   12cec:	andeq	r3, r1, ip, lsl #3
   12cf0:	andeq	r3, r1, ip, lsl #3
   12cf4:	andeq	r3, r1, ip, lsl #3
   12cf8:	andeq	r2, r1, r0, ror pc
   12cfc:	andeq	r2, r1, r4, ror pc
   12d00:	andeq	r2, r1, r4, ror pc
   12d04:	andeq	r2, r1, ip, asr pc
   12d08:	andeq	r2, r1, r4, ror pc
   12d0c:	andeq	r2, r1, r4, ror lr
   12d10:	andeq	r2, r1, r4, ror pc
   12d14:	strdeq	r3, [r1], -ip
   12d18:	andeq	r2, r1, r4, ror pc
   12d1c:	andeq	r2, r1, r4, ror pc
   12d20:	andeq	r2, r1, r4, ror pc
   12d24:	andeq	r2, r1, r4, ror lr
   12d28:	andeq	r2, r1, r4, ror lr
   12d2c:	andeq	r2, r1, r4, ror lr
   12d30:	andeq	r2, r1, r4, ror lr
   12d34:	andeq	r2, r1, r4, ror lr
   12d38:	andeq	r2, r1, r4, ror lr
   12d3c:	andeq	r2, r1, r4, ror lr
   12d40:	andeq	r2, r1, r4, ror lr
   12d44:	andeq	r2, r1, r4, ror lr
   12d48:	andeq	r2, r1, r4, ror lr
   12d4c:	andeq	r2, r1, r4, ror lr
   12d50:	andeq	r2, r1, r4, ror lr
   12d54:	andeq	r2, r1, r4, ror lr
   12d58:	andeq	r2, r1, r4, ror lr
   12d5c:	andeq	r2, r1, r4, ror lr
   12d60:	andeq	r2, r1, r4, ror lr
   12d64:	andeq	r2, r1, r4, ror pc
   12d68:	andeq	r2, r1, r4, ror pc
   12d6c:	andeq	r2, r1, r4, ror pc
   12d70:	andeq	r2, r1, r4, ror pc
   12d74:	andeq	r3, r1, r4, asr #1
   12d78:	andeq	r3, r1, ip, lsl #3
   12d7c:	andeq	r2, r1, r4, ror lr
   12d80:	andeq	r2, r1, r4, ror lr
   12d84:	andeq	r2, r1, r4, ror lr
   12d88:	andeq	r2, r1, r4, ror lr
   12d8c:	andeq	r2, r1, r4, ror lr
   12d90:	andeq	r2, r1, r4, ror lr
   12d94:	andeq	r2, r1, r4, ror lr
   12d98:	andeq	r2, r1, r4, ror lr
   12d9c:	andeq	r2, r1, r4, ror lr
   12da0:	andeq	r2, r1, r4, ror lr
   12da4:	andeq	r2, r1, r4, ror lr
   12da8:	andeq	r2, r1, r4, ror lr
   12dac:	andeq	r2, r1, r4, ror lr
   12db0:	andeq	r2, r1, r4, ror lr
   12db4:	andeq	r2, r1, r4, ror lr
   12db8:	andeq	r2, r1, r4, ror lr
   12dbc:	andeq	r2, r1, r4, ror lr
   12dc0:	andeq	r2, r1, r4, ror lr
   12dc4:	andeq	r2, r1, r4, ror lr
   12dc8:	andeq	r2, r1, r4, ror lr
   12dcc:	andeq	r2, r1, r4, ror lr
   12dd0:	andeq	r2, r1, r4, ror lr
   12dd4:	andeq	r2, r1, r4, ror lr
   12dd8:	andeq	r2, r1, r4, ror lr
   12ddc:	andeq	r2, r1, r4, ror lr
   12de0:	andeq	r2, r1, r4, ror lr
   12de4:	andeq	r2, r1, r4, ror pc
   12de8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12dec:	andeq	r2, r1, r4, ror lr
   12df0:	andeq	r2, r1, r4, ror pc
   12df4:	andeq	r2, r1, r4, ror lr
   12df8:	andeq	r2, r1, r4, ror pc
   12dfc:	andeq	r2, r1, r4, ror lr
   12e00:	andeq	r2, r1, r4, ror lr
   12e04:	andeq	r2, r1, r4, ror lr
   12e08:	andeq	r2, r1, r4, ror lr
   12e0c:	andeq	r2, r1, r4, ror lr
   12e10:	andeq	r2, r1, r4, ror lr
   12e14:	andeq	r2, r1, r4, ror lr
   12e18:	andeq	r2, r1, r4, ror lr
   12e1c:	andeq	r2, r1, r4, ror lr
   12e20:	andeq	r2, r1, r4, ror lr
   12e24:	andeq	r2, r1, r4, ror lr
   12e28:	andeq	r2, r1, r4, ror lr
   12e2c:	andeq	r2, r1, r4, ror lr
   12e30:	andeq	r2, r1, r4, ror lr
   12e34:	andeq	r2, r1, r4, ror lr
   12e38:	andeq	r2, r1, r4, ror lr
   12e3c:	andeq	r2, r1, r4, ror lr
   12e40:	andeq	r2, r1, r4, ror lr
   12e44:	andeq	r2, r1, r4, ror lr
   12e48:	andeq	r2, r1, r4, ror lr
   12e4c:	andeq	r2, r1, r4, ror lr
   12e50:	andeq	r2, r1, r4, ror lr
   12e54:	andeq	r2, r1, r4, ror lr
   12e58:	andeq	r2, r1, r4, ror lr
   12e5c:	andeq	r2, r1, r4, ror lr
   12e60:	andeq	r2, r1, r4, ror lr
   12e64:	andeq	r2, r1, r0, lsr pc
   12e68:	andeq	r2, r1, r4, ror pc
   12e6c:	andeq	r2, r1, r0, lsr pc
   12e70:	andeq	r2, r1, ip, asr pc
   12e74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e78:	tst	r0, #1
   12e7c:	bne	12ea8 <__assert_fail@plt+0x1e94>
   12e80:	ldr	r1, [fp, #16]
   12e84:	ubfx	r0, r6, #5, #3
   12e88:	mov	r2, #1
   12e8c:	ldr	r0, [r1, r0, lsl #2]
   12e90:	and	r1, r6, #31
   12e94:	tst	r0, r2, lsl r1
   12e98:	beq	12ea8 <__assert_fail@plt+0x1e94>
   12e9c:	mov	r0, r6
   12ea0:	mov	r1, r9
   12ea4:	b	12ebc <__assert_fail@plt+0x1ea8>
   12ea8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12eac:	mov	r1, r9
   12eb0:	cmp	r0, #0
   12eb4:	mov	r0, r6
   12eb8:	beq	131fc <__assert_fail@plt+0x21e8>
   12ebc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ec0:	tst	r2, #1
   12ec4:	bne	137cc <__assert_fail@plt+0x27b8>
   12ec8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12ecc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12ed0:	subs	r2, r2, #2
   12ed4:	movwne	r2, #1
   12ed8:	orr	r2, r2, r3
   12edc:	tst	r2, #1
   12ee0:	bne	12f1c <__assert_fail@plt+0x1f08>
   12ee4:	cmp	r8, r4
   12ee8:	movcc	r2, #39	; 0x27
   12eec:	strbcc	r2, [r5, r8]
   12ef0:	add	r2, r8, #1
   12ef4:	cmp	r2, r4
   12ef8:	movcc	r3, #36	; 0x24
   12efc:	strbcc	r3, [r5, r2]
   12f00:	add	r2, r8, #2
   12f04:	add	r8, r8, #3
   12f08:	cmp	r2, r4
   12f0c:	movcc	r3, #39	; 0x27
   12f10:	strbcc	r3, [r5, r2]
   12f14:	mov	r2, #1
   12f18:	str	r2, [fp, #-56]	; 0xffffffc8
   12f1c:	cmp	r8, r4
   12f20:	movcc	r2, #92	; 0x5c
   12f24:	strbcc	r2, [r5, r8]
   12f28:	add	r8, r8, #1
   12f2c:	b	13240 <__assert_fail@plt+0x222c>
   12f30:	cmp	lr, #1
   12f34:	beq	12f5c <__assert_fail@plt+0x1f48>
   12f38:	mov	r9, #0
   12f3c:	cmn	lr, #1
   12f40:	bne	12f68 <__assert_fail@plt+0x1f54>
   12f44:	ldrb	r0, [ip, #1]
   12f48:	cmp	r0, #0
   12f4c:	beq	12f5c <__assert_fail@plt+0x1f48>
   12f50:	mvn	lr, #0
   12f54:	mov	sl, #0
   12f58:	b	12e74 <__assert_fail@plt+0x1e60>
   12f5c:	mov	r9, #0
   12f60:	cmp	r7, #0
   12f64:	beq	12f70 <__assert_fail@plt+0x1f5c>
   12f68:	mov	sl, #0
   12f6c:	b	12e74 <__assert_fail@plt+0x1e60>
   12f70:	mov	r1, #1
   12f74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f78:	cmp	r0, #2
   12f7c:	bne	12f94 <__assert_fail@plt+0x1f80>
   12f80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f84:	mov	r9, r1
   12f88:	tst	r0, #1
   12f8c:	beq	12e74 <__assert_fail@plt+0x1e60>
   12f90:	b	137cc <__assert_fail@plt+0x27b8>
   12f94:	mov	r9, r1
   12f98:	b	12e74 <__assert_fail@plt+0x1e60>
   12f9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fa0:	cmp	r0, #2
   12fa4:	bne	131e0 <__assert_fail@plt+0x21cc>
   12fa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fac:	tst	r0, #1
   12fb0:	bne	137cc <__assert_fail@plt+0x27b8>
   12fb4:	mov	sl, #0
   12fb8:	b	131f4 <__assert_fail@plt+0x21e0>
   12fbc:	mov	r0, #102	; 0x66
   12fc0:	b	13268 <__assert_fail@plt+0x2254>
   12fc4:	mov	r2, #116	; 0x74
   12fc8:	b	12fd8 <__assert_fail@plt+0x1fc4>
   12fcc:	mov	r0, #98	; 0x62
   12fd0:	b	13268 <__assert_fail@plt+0x2254>
   12fd4:	mov	r2, #114	; 0x72
   12fd8:	ldr	r0, [sp, #68]	; 0x44
   12fdc:	tst	r0, #1
   12fe0:	mov	r0, r2
   12fe4:	bne	13268 <__assert_fail@plt+0x2254>
   12fe8:	b	137cc <__assert_fail@plt+0x27b8>
   12fec:	ldr	r0, [sp, #84]	; 0x54
   12ff0:	tst	r0, #1
   12ff4:	beq	13284 <__assert_fail@plt+0x2270>
   12ff8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ffc:	tst	r0, #1
   13000:	bne	138b8 <__assert_fail@plt+0x28a4>
   13004:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13008:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1300c:	subs	r0, r0, #2
   13010:	movwne	r0, #1
   13014:	orr	r0, r0, r1
   13018:	tst	r0, #1
   1301c:	bne	13058 <__assert_fail@plt+0x2044>
   13020:	cmp	r8, r4
   13024:	movcc	r0, #39	; 0x27
   13028:	strbcc	r0, [r5, r8]
   1302c:	add	r0, r8, #1
   13030:	cmp	r0, r4
   13034:	movcc	r1, #36	; 0x24
   13038:	strbcc	r1, [r5, r0]
   1303c:	add	r0, r8, #2
   13040:	add	r8, r8, #3
   13044:	cmp	r0, r4
   13048:	movcc	r1, #39	; 0x27
   1304c:	strbcc	r1, [r5, r0]
   13050:	mov	r0, #1
   13054:	str	r0, [fp, #-56]	; 0xffffffc8
   13058:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1305c:	cmp	r8, r4
   13060:	mov	r9, #0
   13064:	mov	sl, #1
   13068:	mov	r6, #48	; 0x30
   1306c:	movcc	r0, #92	; 0x5c
   13070:	strbcc	r0, [r5, r8]
   13074:	add	r0, r8, #1
   13078:	cmp	r1, #2
   1307c:	beq	1344c <__assert_fail@plt+0x2438>
   13080:	add	r1, r7, #1
   13084:	cmp	r1, lr
   13088:	bcs	1344c <__assert_fail@plt+0x2438>
   1308c:	ldrb	r1, [ip, r1]
   13090:	sub	r1, r1, #48	; 0x30
   13094:	uxtb	r1, r1
   13098:	cmp	r1, #9
   1309c:	bhi	1344c <__assert_fail@plt+0x2438>
   130a0:	cmp	r0, r4
   130a4:	movcc	r1, #48	; 0x30
   130a8:	strbcc	r1, [r5, r0]
   130ac:	add	r0, r8, #2
   130b0:	add	r8, r8, #3
   130b4:	cmp	r0, r4
   130b8:	movcc	r1, #48	; 0x30
   130bc:	strbcc	r1, [r5, r0]
   130c0:	b	12e74 <__assert_fail@plt+0x1e60>
   130c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130c8:	mov	sl, #0
   130cc:	mov	r6, #63	; 0x3f
   130d0:	cmp	r0, #5
   130d4:	beq	13454 <__assert_fail@plt+0x2440>
   130d8:	cmp	r0, #2
   130dc:	bne	134fc <__assert_fail@plt+0x24e8>
   130e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130e4:	mov	r9, #0
   130e8:	tst	r0, #1
   130ec:	beq	12e74 <__assert_fail@plt+0x1e60>
   130f0:	b	137cc <__assert_fail@plt+0x27b8>
   130f4:	mov	r0, #118	; 0x76
   130f8:	b	13268 <__assert_fail@plt+0x2254>
   130fc:	mov	r0, #1
   13100:	mov	r6, #39	; 0x27
   13104:	str	r0, [sp, #60]	; 0x3c
   13108:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1310c:	cmp	r0, #2
   13110:	bne	132a0 <__assert_fail@plt+0x228c>
   13114:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13118:	tst	r0, #1
   1311c:	bne	137cc <__assert_fail@plt+0x27b8>
   13120:	ldr	r2, [sp, #56]	; 0x38
   13124:	clz	r1, r4
   13128:	mov	sl, #0
   1312c:	mov	r9, #1
   13130:	lsr	r1, r1, #5
   13134:	cmp	r2, #0
   13138:	mov	r0, r2
   1313c:	movwne	r0, #1
   13140:	orrs	r0, r0, r1
   13144:	moveq	r2, r4
   13148:	moveq	r4, r0
   1314c:	cmp	r8, r4
   13150:	str	r2, [sp, #56]	; 0x38
   13154:	movcc	r0, #39	; 0x27
   13158:	strbcc	r0, [r5, r8]
   1315c:	add	r0, r8, #1
   13160:	cmp	r0, r4
   13164:	movcc	r1, #92	; 0x5c
   13168:	strbcc	r1, [r5, r0]
   1316c:	add	r0, r8, #2
   13170:	add	r8, r8, #3
   13174:	cmp	r0, r4
   13178:	movcc	r1, #39	; 0x27
   1317c:	strbcc	r1, [r5, r0]
   13180:	mov	r0, #0
   13184:	str	r0, [fp, #-56]	; 0xffffffc8
   13188:	b	12e74 <__assert_fail@plt+0x1e60>
   1318c:	ldr	r0, [sp, #40]	; 0x28
   13190:	str	r4, [sp, #88]	; 0x58
   13194:	cmp	r0, #1
   13198:	bne	132a8 <__assert_fail@plt+0x2294>
   1319c:	str	lr, [sp, #28]
   131a0:	bl	10f00 <__ctype_b_loc@plt>
   131a4:	ldr	r0, [r0]
   131a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   131ac:	mov	r2, #1
   131b0:	add	r0, r0, r6, lsl #1
   131b4:	ldrb	r0, [r0, #1]
   131b8:	ubfx	r9, r0, #6, #1
   131bc:	ldr	r0, [sp, #52]	; 0x34
   131c0:	cmp	r2, #1
   131c4:	orr	r0, r9, r0
   131c8:	bhi	13504 <__assert_fail@plt+0x24f0>
   131cc:	tst	r0, #1
   131d0:	beq	13504 <__assert_fail@plt+0x24f0>
   131d4:	ldr	lr, [sp, #28]
   131d8:	ldr	r4, [sp, #88]	; 0x58
   131dc:	b	12e74 <__assert_fail@plt+0x1e60>
   131e0:	ldr	r1, [sp, #48]	; 0x30
   131e4:	mov	sl, #0
   131e8:	mov	r0, #92	; 0x5c
   131ec:	cmp	r1, #0
   131f0:	beq	13268 <__assert_fail@plt+0x2254>
   131f4:	mov	r6, #92	; 0x5c
   131f8:	mov	r9, #0
   131fc:	cmp	sl, #0
   13200:	bne	13238 <__assert_fail@plt+0x2224>
   13204:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13208:	tst	r0, #1
   1320c:	beq	13238 <__assert_fail@plt+0x2224>
   13210:	cmp	r8, r4
   13214:	movcc	r0, #39	; 0x27
   13218:	strbcc	r0, [r5, r8]
   1321c:	add	r0, r8, #1
   13220:	add	r8, r8, #2
   13224:	cmp	r0, r4
   13228:	movcc	r1, #39	; 0x27
   1322c:	strbcc	r1, [r5, r0]
   13230:	mov	r0, #0
   13234:	str	r0, [fp, #-56]	; 0xffffffc8
   13238:	mov	r1, r9
   1323c:	mov	r0, r6
   13240:	cmp	r8, r4
   13244:	strbcc	r0, [r5, r8]
   13248:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1324c:	add	r8, r8, #1
   13250:	and	r0, r0, r1
   13254:	str	r0, [fp, #-48]	; 0xffffffd0
   13258:	add	r7, r7, #1
   1325c:	cmn	lr, #1
   13260:	bne	12ba0 <__assert_fail@plt+0x1b8c>
   13264:	b	12bac <__assert_fail@plt+0x1b98>
   13268:	ldr	r1, [sp, #84]	; 0x54
   1326c:	mov	sl, #0
   13270:	mov	r9, #0
   13274:	tst	r1, #1
   13278:	mov	r1, #0
   1327c:	beq	12e74 <__assert_fail@plt+0x1e60>
   13280:	b	12ebc <__assert_fail@plt+0x1ea8>
   13284:	ldr	r0, [sp, #36]	; 0x24
   13288:	mov	r6, #0
   1328c:	mov	sl, #0
   13290:	mov	r9, #0
   13294:	cmp	r0, #0
   13298:	beq	12e74 <__assert_fail@plt+0x1e60>
   1329c:	b	13258 <__assert_fail@plt+0x2244>
   132a0:	mov	r9, #1
   132a4:	b	12e74 <__assert_fail@plt+0x1e60>
   132a8:	mov	r0, #0
   132ac:	cmn	lr, #1
   132b0:	sub	r4, fp, #40	; 0x28
   132b4:	str	r0, [fp, #-36]	; 0xffffffdc
   132b8:	str	r0, [fp, #-40]	; 0xffffffd8
   132bc:	bne	132d0 <__assert_fail@plt+0x22bc>
   132c0:	mov	r0, ip
   132c4:	bl	10f24 <strlen@plt>
   132c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132cc:	mov	lr, r0
   132d0:	ldr	r0, [sp, #72]	; 0x48
   132d4:	mov	r9, #1
   132d8:	mov	r2, #0
   132dc:	str	lr, [sp, #28]
   132e0:	add	r0, r0, r7
   132e4:	str	r0, [sp, #20]
   132e8:	b	1332c <__assert_fail@plt+0x2318>
   132ec:	ldr	r5, [sp, #44]	; 0x2c
   132f0:	add	r5, r0, r5
   132f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   132f8:	bl	10e70 <iswprint@plt>
   132fc:	cmp	r0, #0
   13300:	sub	r4, fp, #40	; 0x28
   13304:	movwne	r0, #1
   13308:	and	r9, r9, r0
   1330c:	mov	r0, r4
   13310:	bl	10e34 <mbsinit@plt>
   13314:	mov	r2, r5
   13318:	ldr	lr, [sp, #28]
   1331c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13320:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13324:	cmp	r0, #0
   13328:	bne	131bc <__assert_fail@plt+0x21a8>
   1332c:	add	r0, r2, r7
   13330:	str	r2, [sp, #44]	; 0x2c
   13334:	mov	r3, r4
   13338:	add	r1, ip, r0
   1333c:	str	r0, [sp, #24]
   13340:	sub	r2, lr, r0
   13344:	sub	r0, fp, #44	; 0x2c
   13348:	bl	151c8 <__assert_fail@plt+0x41b4>
   1334c:	cmp	r0, #0
   13350:	beq	136f4 <__assert_fail@plt+0x26e0>
   13354:	cmn	r0, #1
   13358:	beq	136b0 <__assert_fail@plt+0x269c>
   1335c:	ldr	lr, [sp, #28]
   13360:	cmn	r0, #2
   13364:	beq	136b8 <__assert_fail@plt+0x26a4>
   13368:	ldr	r2, [sp, #64]	; 0x40
   1336c:	ldr	r4, [sp, #88]	; 0x58
   13370:	ldr	ip, [sp, #84]	; 0x54
   13374:	cmp	r0, #2
   13378:	mov	r1, #0
   1337c:	movwcc	r1, #1
   13380:	eor	r2, r2, #1
   13384:	orrs	r1, r2, r1
   13388:	bne	132ec <__assert_fail@plt+0x22d8>
   1338c:	ldr	r1, [sp, #44]	; 0x2c
   13390:	ldr	r2, [sp, #20]
   13394:	add	r1, r2, r1
   13398:	sub	r2, r0, #1
   1339c:	b	133ac <__assert_fail@plt+0x2398>
   133a0:	add	r1, r1, #1
   133a4:	subs	r2, r2, #1
   133a8:	beq	132ec <__assert_fail@plt+0x22d8>
   133ac:	ldrb	r3, [r1]
   133b0:	sub	r3, r3, #91	; 0x5b
   133b4:	cmp	r3, #33	; 0x21
   133b8:	bhi	133a0 <__assert_fail@plt+0x238c>
   133bc:	add	r5, pc, #0
   133c0:	ldr	pc, [r5, r3, lsl #2]
   133c4:	andeq	r3, r1, r8, lsr #15
   133c8:	andeq	r3, r1, r8, lsr #15
   133cc:	andeq	r3, r1, r0, lsr #7
   133d0:	andeq	r3, r1, r8, lsr #15
   133d4:	andeq	r3, r1, r0, lsr #7
   133d8:	andeq	r3, r1, r8, lsr #15
   133dc:	andeq	r3, r1, r0, lsr #7
   133e0:	andeq	r3, r1, r0, lsr #7
   133e4:	andeq	r3, r1, r0, lsr #7
   133e8:	andeq	r3, r1, r0, lsr #7
   133ec:	andeq	r3, r1, r0, lsr #7
   133f0:	andeq	r3, r1, r0, lsr #7
   133f4:	andeq	r3, r1, r0, lsr #7
   133f8:	andeq	r3, r1, r0, lsr #7
   133fc:	andeq	r3, r1, r0, lsr #7
   13400:	andeq	r3, r1, r0, lsr #7
   13404:	andeq	r3, r1, r0, lsr #7
   13408:	andeq	r3, r1, r0, lsr #7
   1340c:	andeq	r3, r1, r0, lsr #7
   13410:	andeq	r3, r1, r0, lsr #7
   13414:	andeq	r3, r1, r0, lsr #7
   13418:	andeq	r3, r1, r0, lsr #7
   1341c:	andeq	r3, r1, r0, lsr #7
   13420:	andeq	r3, r1, r0, lsr #7
   13424:	andeq	r3, r1, r0, lsr #7
   13428:	andeq	r3, r1, r0, lsr #7
   1342c:	andeq	r3, r1, r0, lsr #7
   13430:	andeq	r3, r1, r0, lsr #7
   13434:	andeq	r3, r1, r0, lsr #7
   13438:	andeq	r3, r1, r0, lsr #7
   1343c:	andeq	r3, r1, r0, lsr #7
   13440:	andeq	r3, r1, r0, lsr #7
   13444:	andeq	r3, r1, r0, lsr #7
   13448:	andeq	r3, r1, r8, lsr #15
   1344c:	mov	r8, r0
   13450:	b	12e74 <__assert_fail@plt+0x1e60>
   13454:	ldr	r0, [sp, #32]
   13458:	cmp	r0, #0
   1345c:	beq	134fc <__assert_fail@plt+0x24e8>
   13460:	add	r0, r7, #2
   13464:	cmp	r0, lr
   13468:	bcs	134fc <__assert_fail@plt+0x24e8>
   1346c:	add	r1, r7, ip
   13470:	ldrb	r1, [r1, #1]
   13474:	cmp	r1, #63	; 0x3f
   13478:	bne	134fc <__assert_fail@plt+0x24e8>
   1347c:	ldrb	r9, [ip, r0]
   13480:	sub	r2, r9, #33	; 0x21
   13484:	cmp	r2, #29
   13488:	bhi	134fc <__assert_fail@plt+0x24e8>
   1348c:	movw	r1, #20929	; 0x51c1
   13490:	mov	r3, #1
   13494:	movt	r1, #14336	; 0x3800
   13498:	tst	r1, r3, lsl r2
   1349c:	beq	134fc <__assert_fail@plt+0x24e8>
   134a0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   134a4:	tst	r1, #1
   134a8:	bne	137cc <__assert_fail@plt+0x27b8>
   134ac:	cmp	r8, r4
   134b0:	add	r2, r8, #1
   134b4:	mov	r6, r9
   134b8:	mov	r7, r0
   134bc:	mov	r9, #0
   134c0:	movcc	r1, #63	; 0x3f
   134c4:	strbcc	r1, [r5, r8]
   134c8:	cmp	r2, r4
   134cc:	movcc	r1, #34	; 0x22
   134d0:	strbcc	r1, [r5, r2]
   134d4:	add	r2, r8, #2
   134d8:	cmp	r2, r4
   134dc:	movcc	r1, #34	; 0x22
   134e0:	strbcc	r1, [r5, r2]
   134e4:	add	r2, r8, #3
   134e8:	add	r8, r8, #4
   134ec:	cmp	r2, r4
   134f0:	movcc	r1, #63	; 0x3f
   134f4:	strbcc	r1, [r5, r2]
   134f8:	b	12e74 <__assert_fail@plt+0x1e60>
   134fc:	mov	r9, #0
   13500:	b	12e74 <__assert_fail@plt+0x1e60>
   13504:	ldr	lr, [sp, #28]
   13508:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1350c:	add	r1, r2, r7
   13510:	mov	r2, #0
   13514:	str	r1, [sp, #44]	; 0x2c
   13518:	tst	r0, #1
   1351c:	bne	13638 <__assert_fail@plt+0x2624>
   13520:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13524:	tst	r1, #1
   13528:	bne	137c8 <__assert_fail@plt+0x27b4>
   1352c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13530:	subs	r2, r1, #2
   13534:	movwne	r2, #1
   13538:	orr	r2, r2, r4
   1353c:	tst	r2, #1
   13540:	bne	13584 <__assert_fail@plt+0x2570>
   13544:	ldr	r1, [sp, #88]	; 0x58
   13548:	add	r2, r8, #1
   1354c:	mov	r4, #1
   13550:	cmp	r8, r1
   13554:	movcc	r1, #39	; 0x27
   13558:	strbcc	r1, [r5, r8]
   1355c:	ldr	r1, [sp, #88]	; 0x58
   13560:	cmp	r2, r1
   13564:	movcc	r1, #36	; 0x24
   13568:	strbcc	r1, [r5, r2]
   1356c:	ldr	r1, [sp, #88]	; 0x58
   13570:	add	r2, r8, #2
   13574:	add	r8, r8, #3
   13578:	cmp	r2, r1
   1357c:	movcc	r1, #39	; 0x27
   13580:	strbcc	r1, [r5, r2]
   13584:	ldr	r1, [sp, #88]	; 0x58
   13588:	add	r2, r8, #1
   1358c:	cmp	r8, r1
   13590:	movcc	r1, #92	; 0x5c
   13594:	strbcc	r1, [r5, r8]
   13598:	ldr	r1, [sp, #88]	; 0x58
   1359c:	cmp	r2, r1
   135a0:	bcs	135b4 <__assert_fail@plt+0x25a0>
   135a4:	uxtb	r3, r6
   135a8:	mov	r1, #48	; 0x30
   135ac:	orr	r3, r1, r3, lsr #6
   135b0:	strb	r3, [r5, r2]
   135b4:	ldr	r1, [sp, #88]	; 0x58
   135b8:	add	r2, r8, #2
   135bc:	add	r8, r8, #3
   135c0:	cmp	r2, r1
   135c4:	lsrcc	r3, r6, #3
   135c8:	movcc	r1, #6
   135cc:	bficc	r3, r1, #3, #29
   135d0:	mov	r1, #6
   135d4:	bfi	r6, r1, #3, #29
   135d8:	strbcc	r3, [r5, r2]
   135dc:	mov	r2, #1
   135e0:	b	13660 <__assert_fail@plt+0x264c>
   135e4:	ldr	r1, [sp, #88]	; 0x58
   135e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   135ec:	ldr	r4, [sp, #88]	; 0x58
   135f0:	cmp	r8, r1
   135f4:	movcc	r1, #39	; 0x27
   135f8:	strbcc	r1, [r5, r8]
   135fc:	add	r1, r8, #1
   13600:	add	r8, r8, #2
   13604:	cmp	r1, r4
   13608:	movcc	r4, #39	; 0x27
   1360c:	strbcc	r4, [r5, r1]
   13610:	mov	r4, #0
   13614:	ldr	r1, [sp, #88]	; 0x58
   13618:	cmp	r8, r1
   1361c:	ldr	r1, [sp, #72]	; 0x48
   13620:	strbcc	r6, [r5, r8]
   13624:	add	r8, r8, #1
   13628:	ldrb	r6, [r1, r7]
   1362c:	mov	r7, r3
   13630:	tst	r0, #1
   13634:	beq	13520 <__assert_fail@plt+0x250c>
   13638:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1363c:	tst	r1, #1
   13640:	beq	13658 <__assert_fail@plt+0x2644>
   13644:	ldr	r1, [sp, #88]	; 0x58
   13648:	cmp	r8, r1
   1364c:	movcc	r1, #92	; 0x5c
   13650:	strbcc	r1, [r5, r8]
   13654:	add	r8, r8, #1
   13658:	mov	r1, #0
   1365c:	str	r1, [fp, #-52]	; 0xffffffcc
   13660:	ldr	r1, [sp, #44]	; 0x2c
   13664:	add	r3, r7, #1
   13668:	and	sl, r2, #1
   1366c:	cmp	r1, r3
   13670:	bls	13694 <__assert_fail@plt+0x2680>
   13674:	cmp	sl, #0
   13678:	mvn	r5, r4
   1367c:	movwne	sl, #1
   13680:	orr	r5, r5, sl
   13684:	tst	r5, #1
   13688:	beq	135e4 <__assert_fail@plt+0x25d0>
   1368c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13690:	b	13614 <__assert_fail@plt+0x2600>
   13694:	str	r4, [fp, #-56]	; 0xffffffc8
   13698:	ldr	r4, [sp, #88]	; 0x58
   1369c:	cmp	sl, #0
   136a0:	movwne	sl, #1
   136a4:	cmp	sl, #0
   136a8:	beq	13204 <__assert_fail@plt+0x21f0>
   136ac:	b	13238 <__assert_fail@plt+0x2224>
   136b0:	mov	r9, #0
   136b4:	b	136f4 <__assert_fail@plt+0x26e0>
   136b8:	ldr	r0, [sp, #24]
   136bc:	mov	r9, #0
   136c0:	cmp	lr, r0
   136c4:	bls	136f4 <__assert_fail@plt+0x26e0>
   136c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   136cc:	ldr	r2, [sp, #44]	; 0x2c
   136d0:	add	r0, ip, r7
   136d4:	ldrb	r1, [r0, r2]
   136d8:	cmp	r1, #0
   136dc:	beq	131bc <__assert_fail@plt+0x21a8>
   136e0:	add	r2, r2, #1
   136e4:	add	r1, r7, r2
   136e8:	cmp	r1, lr
   136ec:	bcc	136d4 <__assert_fail@plt+0x26c0>
   136f0:	b	131bc <__assert_fail@plt+0x21a8>
   136f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   136f8:	ldr	r2, [sp, #44]	; 0x2c
   136fc:	b	131bc <__assert_fail@plt+0x21a8>
   13700:	mov	lr, r7
   13704:	b	1370c <__assert_fail@plt+0x26f8>
   13708:	mvn	lr, #0
   1370c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13710:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13714:	eor	r0, r1, #2
   13718:	orr	r0, r0, r8
   1371c:	clz	r0, r0
   13720:	lsr	r0, r0, #5
   13724:	tst	r2, r0
   13728:	bne	137cc <__assert_fail@plt+0x27b8>
   1372c:	subs	r0, r1, #2
   13730:	movwne	r0, #1
   13734:	orr	r0, r2, r0
   13738:	tst	r0, #1
   1373c:	ldreq	r0, [sp, #60]	; 0x3c
   13740:	eoreq	r0, r0, #1
   13744:	tsteq	r0, #1
   13748:	bne	13860 <__assert_fail@plt+0x284c>
   1374c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13750:	mov	sl, lr
   13754:	tst	r0, #1
   13758:	bne	1382c <__assert_fail@plt+0x2818>
   1375c:	ldr	r6, [sp, #56]	; 0x38
   13760:	mov	r9, #0
   13764:	cmp	r6, #0
   13768:	beq	13858 <__assert_fail@plt+0x2844>
   1376c:	ldr	r0, [sp, #84]	; 0x54
   13770:	mov	r1, #0
   13774:	mov	r7, #2
   13778:	cmp	r4, #0
   1377c:	str	r1, [fp, #-48]	; 0xffffffd0
   13780:	mov	r1, #0
   13784:	str	r1, [fp, #-76]	; 0xffffffb4
   13788:	beq	12928 <__assert_fail@plt+0x1914>
   1378c:	b	13860 <__assert_fail@plt+0x284c>
   13790:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13794:	ldr	r1, [fp, #12]
   13798:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1379c:	mov	lr, r4
   137a0:	mov	r4, r6
   137a4:	b	137ec <__assert_fail@plt+0x27d8>
   137a8:	tst	ip, #1
   137ac:	ldr	r5, [fp, #-84]	; 0xffffffac
   137b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137b4:	ldr	r1, [fp, #12]
   137b8:	mov	r0, #2
   137bc:	movwne	r0, #4
   137c0:	mov	r2, r0
   137c4:	b	137ec <__assert_fail@plt+0x27d8>
   137c8:	ldr	r4, [sp, #88]	; 0x58
   137cc:	ldr	r1, [sp, #84]	; 0x54
   137d0:	mov	r0, #2
   137d4:	tst	r1, #1
   137d8:	movwne	r0, #4
   137dc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   137e0:	ldr	r1, [fp, #12]
   137e4:	cmp	r2, #2
   137e8:	moveq	r2, r0
   137ec:	mov	r0, #0
   137f0:	bic	r1, r1, #2
   137f4:	str	r2, [sp]
   137f8:	mov	r2, ip
   137fc:	mov	r3, lr
   13800:	str	r0, [sp, #8]
   13804:	ldr	r0, [sp, #76]	; 0x4c
   13808:	str	r1, [sp, #4]
   1380c:	mov	r1, r4
   13810:	str	r0, [sp, #12]
   13814:	ldr	r0, [sp, #80]	; 0x50
   13818:	str	r0, [sp, #16]
   1381c:	mov	r0, r5
   13820:	bl	12898 <__assert_fail@plt+0x1884>
   13824:	mov	r8, r0
   13828:	b	138ac <__assert_fail@plt+0x2898>
   1382c:	mov	r0, #5
   13830:	ldr	r1, [sp, #56]	; 0x38
   13834:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13838:	mov	r3, sl
   1383c:	str	r0, [sp]
   13840:	ldr	r0, [fp, #12]
   13844:	str	r0, [sp, #4]
   13848:	ldr	r0, [fp, #16]
   1384c:	str	r0, [sp, #8]
   13850:	ldr	r0, [sp, #76]	; 0x4c
   13854:	b	13810 <__assert_fail@plt+0x27fc>
   13858:	mov	r0, #0
   1385c:	str	r0, [fp, #-76]	; 0xffffffb4
   13860:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13864:	cmp	r1, #0
   13868:	beq	138a0 <__assert_fail@plt+0x288c>
   1386c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13870:	tst	r0, #1
   13874:	bne	138a0 <__assert_fail@plt+0x288c>
   13878:	ldrb	r0, [r1]
   1387c:	cmp	r0, #0
   13880:	beq	138a0 <__assert_fail@plt+0x288c>
   13884:	add	r1, r1, #1
   13888:	cmp	r8, r4
   1388c:	strbcc	r0, [r5, r8]
   13890:	add	r8, r8, #1
   13894:	ldrb	r0, [r1], #1
   13898:	cmp	r0, #0
   1389c:	bne	13888 <__assert_fail@plt+0x2874>
   138a0:	cmp	r8, r4
   138a4:	movcc	r0, #0
   138a8:	strbcc	r0, [r5, r8]
   138ac:	mov	r0, r8
   138b0:	sub	sp, fp, #28
   138b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138b8:	mov	r0, #4
   138bc:	b	137dc <__assert_fail@plt+0x27c8>
   138c0:	bl	10ffc <abort@plt>
   138c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138c8:	add	fp, sp, #28
   138cc:	sub	sp, sp, #28
   138d0:	movw	r5, #29088	; 0x71a0
   138d4:	cmp	r2, #0
   138d8:	mov	r4, r1
   138dc:	mov	r7, r0
   138e0:	str	r0, [sp, #20]
   138e4:	movt	r5, #2
   138e8:	movne	r5, r2
   138ec:	bl	10f30 <__errno_location@plt>
   138f0:	mov	sl, r0
   138f4:	ldr	r2, [r5, #40]	; 0x28
   138f8:	ldr	r3, [r5, #44]	; 0x2c
   138fc:	ldm	r5, {r0, r1}
   13900:	orr	r8, r1, #1
   13904:	add	r9, r5, #8
   13908:	mov	r1, #0
   1390c:	ldr	r6, [sl]
   13910:	stm	sp, {r0, r8, r9}
   13914:	mov	r0, #0
   13918:	str	r2, [sp, #12]
   1391c:	str	r3, [sp, #16]
   13920:	mov	r2, r7
   13924:	mov	r3, r4
   13928:	str	r6, [sp, #24]
   1392c:	mov	r6, r4
   13930:	bl	12898 <__assert_fail@plt+0x1884>
   13934:	add	r7, r0, #1
   13938:	mov	r0, r7
   1393c:	bl	14ae4 <__assert_fail@plt+0x3ad0>
   13940:	mov	r4, r0
   13944:	ldr	r0, [r5]
   13948:	ldr	r2, [r5, #44]	; 0x2c
   1394c:	ldr	r1, [r5, #40]	; 0x28
   13950:	mov	r3, r6
   13954:	stm	sp, {r0, r8, r9}
   13958:	str	r2, [sp, #16]
   1395c:	ldr	r2, [sp, #20]
   13960:	str	r1, [sp, #12]
   13964:	mov	r0, r4
   13968:	mov	r1, r7
   1396c:	bl	12898 <__assert_fail@plt+0x1884>
   13970:	ldr	r0, [sp, #24]
   13974:	str	r0, [sl]
   13978:	mov	r0, r4
   1397c:	sub	sp, fp, #28
   13980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13988:	add	fp, sp, #28
   1398c:	sub	sp, sp, #36	; 0x24
   13990:	movw	r8, #29088	; 0x71a0
   13994:	cmp	r3, #0
   13998:	mov	r4, r2
   1399c:	str	r2, [sp, #24]
   139a0:	mov	r5, r1
   139a4:	mov	r6, r0
   139a8:	str	r0, [sp, #20]
   139ac:	movt	r8, #2
   139b0:	movne	r8, r3
   139b4:	bl	10f30 <__errno_location@plt>
   139b8:	str	r0, [sp, #28]
   139bc:	ldr	r1, [r8, #40]	; 0x28
   139c0:	ldr	r2, [r8, #44]	; 0x2c
   139c4:	ldr	r7, [r0]
   139c8:	cmp	r4, #0
   139cc:	add	sl, r8, #8
   139d0:	mov	r0, #0
   139d4:	ldm	r8, {r3, r9}
   139d8:	orreq	r9, r9, #1
   139dc:	stm	sp, {r3, r9, sl}
   139e0:	str	r1, [sp, #12]
   139e4:	str	r2, [sp, #16]
   139e8:	mov	r1, #0
   139ec:	mov	r2, r6
   139f0:	mov	r3, r5
   139f4:	str	r7, [sp, #32]
   139f8:	mov	r7, r5
   139fc:	bl	12898 <__assert_fail@plt+0x1884>
   13a00:	add	r4, r0, #1
   13a04:	mov	r5, r0
   13a08:	mov	r0, r4
   13a0c:	bl	14ae4 <__assert_fail@plt+0x3ad0>
   13a10:	mov	r6, r0
   13a14:	ldr	r0, [r8]
   13a18:	ldr	r2, [r8, #44]	; 0x2c
   13a1c:	ldr	r1, [r8, #40]	; 0x28
   13a20:	mov	r3, r7
   13a24:	stm	sp, {r0, r9, sl}
   13a28:	str	r2, [sp, #16]
   13a2c:	ldr	r2, [sp, #20]
   13a30:	str	r1, [sp, #12]
   13a34:	mov	r0, r6
   13a38:	mov	r1, r4
   13a3c:	bl	12898 <__assert_fail@plt+0x1884>
   13a40:	ldr	r0, [sp, #24]
   13a44:	ldr	r1, [sp, #32]
   13a48:	ldr	r2, [sp, #28]
   13a4c:	cmp	r0, #0
   13a50:	str	r1, [r2]
   13a54:	strne	r5, [r0]
   13a58:	mov	r0, r6
   13a5c:	sub	sp, fp, #28
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a68:	add	fp, sp, #24
   13a6c:	movw	r5, #28916	; 0x70f4
   13a70:	movw	r8, #28912	; 0x70f0
   13a74:	movt	r5, #2
   13a78:	movt	r8, #2
   13a7c:	ldr	r0, [r5]
   13a80:	ldr	r4, [r8]
   13a84:	cmp	r0, #2
   13a88:	blt	13ab4 <__assert_fail@plt+0x2aa0>
   13a8c:	add	r7, r4, #12
   13a90:	mov	r6, #0
   13a94:	ldr	r0, [r7, r6, lsl #3]
   13a98:	bl	1258c <__assert_fail@plt+0x1578>
   13a9c:	ldr	r1, [r5]
   13aa0:	add	r2, r6, #2
   13aa4:	add	r0, r6, #1
   13aa8:	mov	r6, r0
   13aac:	cmp	r2, r1
   13ab0:	blt	13a94 <__assert_fail@plt+0x2a80>
   13ab4:	ldr	r0, [r4, #4]
   13ab8:	movw	r9, #29136	; 0x71d0
   13abc:	movw	r7, #28920	; 0x70f8
   13ac0:	movt	r9, #2
   13ac4:	movt	r7, #2
   13ac8:	cmp	r0, r9
   13acc:	beq	13adc <__assert_fail@plt+0x2ac8>
   13ad0:	bl	1258c <__assert_fail@plt+0x1578>
   13ad4:	mov	r0, #256	; 0x100
   13ad8:	stm	r7, {r0, r9}
   13adc:	cmp	r4, r7
   13ae0:	beq	13af0 <__assert_fail@plt+0x2adc>
   13ae4:	mov	r0, r4
   13ae8:	bl	1258c <__assert_fail@plt+0x1578>
   13aec:	str	r7, [r8]
   13af0:	mov	r0, #1
   13af4:	str	r0, [r5]
   13af8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13afc:	movw	r3, #29088	; 0x71a0
   13b00:	mvn	r2, #0
   13b04:	movt	r3, #2
   13b08:	b	13b0c <__assert_fail@plt+0x2af8>
   13b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b10:	add	fp, sp, #28
   13b14:	sub	sp, sp, #44	; 0x2c
   13b18:	mov	r7, r3
   13b1c:	str	r2, [sp, #36]	; 0x24
   13b20:	str	r1, [sp, #32]
   13b24:	mov	r5, r0
   13b28:	bl	10f30 <__errno_location@plt>
   13b2c:	cmp	r5, #0
   13b30:	bmi	13ca0 <__assert_fail@plt+0x2c8c>
   13b34:	cmn	r5, #-2147483647	; 0x80000001
   13b38:	beq	13ca0 <__assert_fail@plt+0x2c8c>
   13b3c:	movw	r8, #28916	; 0x70f4
   13b40:	movw	r4, #28912	; 0x70f0
   13b44:	str	r0, [sp, #28]
   13b48:	ldr	r0, [r0]
   13b4c:	movt	r8, #2
   13b50:	movt	r4, #2
   13b54:	ldr	r1, [r8]
   13b58:	ldr	r6, [r4]
   13b5c:	str	r0, [sp, #24]
   13b60:	cmp	r1, r5
   13b64:	ble	13b70 <__assert_fail@plt+0x2b5c>
   13b68:	mov	sl, r6
   13b6c:	b	13bdc <__assert_fail@plt+0x2bc8>
   13b70:	movw	r9, #28920	; 0x70f8
   13b74:	mov	r0, #8
   13b78:	str	r1, [fp, #-32]	; 0xffffffe0
   13b7c:	sub	r1, r5, r1
   13b80:	mvn	r3, #-2147483648	; 0x80000000
   13b84:	movt	r9, #2
   13b88:	str	r0, [sp]
   13b8c:	add	r2, r1, #1
   13b90:	sub	r1, fp, #32
   13b94:	subs	r0, r6, r9
   13b98:	movne	r0, r6
   13b9c:	bl	14ce4 <__assert_fail@plt+0x3cd0>
   13ba0:	mov	sl, r0
   13ba4:	cmp	r6, r9
   13ba8:	str	r0, [r4]
   13bac:	bne	13bb8 <__assert_fail@plt+0x2ba4>
   13bb0:	ldrd	r0, [r9]
   13bb4:	stm	sl, {r0, r1}
   13bb8:	ldr	r1, [r8]
   13bbc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bc0:	add	r0, sl, r1, lsl #3
   13bc4:	sub	r1, r2, r1
   13bc8:	lsl	r2, r1, #3
   13bcc:	mov	r1, #0
   13bd0:	bl	10f48 <memset@plt>
   13bd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13bd8:	str	r0, [r8]
   13bdc:	mov	r9, sl
   13be0:	ldm	r7, {r0, r1}
   13be4:	orr	r8, r1, #1
   13be8:	add	r1, r7, #8
   13bec:	ldr	r2, [r7, #40]	; 0x28
   13bf0:	ldr	r3, [r7, #44]	; 0x2c
   13bf4:	ldr	r6, [r9, r5, lsl #3]!
   13bf8:	str	r1, [sp, #20]
   13bfc:	ldr	r4, [r9, #4]!
   13c00:	stm	sp, {r0, r8}
   13c04:	add	r0, sp, #8
   13c08:	stm	r0, {r1, r2, r3}
   13c0c:	ldr	r2, [sp, #32]
   13c10:	ldr	r3, [sp, #36]	; 0x24
   13c14:	mov	r1, r6
   13c18:	mov	r0, r4
   13c1c:	bl	12898 <__assert_fail@plt+0x1884>
   13c20:	cmp	r6, r0
   13c24:	bhi	13c88 <__assert_fail@plt+0x2c74>
   13c28:	add	r6, r0, #1
   13c2c:	movw	r0, #29136	; 0x71d0
   13c30:	movt	r0, #2
   13c34:	str	r6, [sl, r5, lsl #3]
   13c38:	cmp	r4, r0
   13c3c:	beq	13c48 <__assert_fail@plt+0x2c34>
   13c40:	mov	r0, r4
   13c44:	bl	1258c <__assert_fail@plt+0x1578>
   13c48:	mov	r0, r6
   13c4c:	bl	14ae4 <__assert_fail@plt+0x3ad0>
   13c50:	str	r0, [r9]
   13c54:	mov	r4, r0
   13c58:	add	r3, sp, #8
   13c5c:	ldr	r0, [r7]
   13c60:	ldr	r1, [r7, #40]	; 0x28
   13c64:	ldr	r2, [r7, #44]	; 0x2c
   13c68:	stm	sp, {r0, r8}
   13c6c:	ldr	r0, [sp, #20]
   13c70:	stm	r3, {r0, r1, r2}
   13c74:	ldr	r2, [sp, #32]
   13c78:	ldr	r3, [sp, #36]	; 0x24
   13c7c:	mov	r0, r4
   13c80:	mov	r1, r6
   13c84:	bl	12898 <__assert_fail@plt+0x1884>
   13c88:	ldr	r0, [sp, #28]
   13c8c:	ldr	r1, [sp, #24]
   13c90:	str	r1, [r0]
   13c94:	mov	r0, r4
   13c98:	sub	sp, fp, #28
   13c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca0:	bl	10ffc <abort@plt>
   13ca4:	movw	r3, #29088	; 0x71a0
   13ca8:	movt	r3, #2
   13cac:	b	13b0c <__assert_fail@plt+0x2af8>
   13cb0:	movw	r3, #29088	; 0x71a0
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, #0
   13cbc:	mvn	r2, #0
   13cc0:	movt	r3, #2
   13cc4:	b	13b0c <__assert_fail@plt+0x2af8>
   13cc8:	movw	r3, #29088	; 0x71a0
   13ccc:	mov	r2, r1
   13cd0:	mov	r1, r0
   13cd4:	mov	r0, #0
   13cd8:	movt	r3, #2
   13cdc:	b	13b0c <__assert_fail@plt+0x2af8>
   13ce0:	push	{fp, lr}
   13ce4:	mov	fp, sp
   13ce8:	sub	sp, sp, #48	; 0x30
   13cec:	vmov.i32	q8, #0	; 0x00000000
   13cf0:	mov	ip, #32
   13cf4:	mov	r3, sp
   13cf8:	mov	lr, r2
   13cfc:	cmp	r1, #10
   13d00:	add	r2, r3, #16
   13d04:	vst1.64	{d16-d17}, [r3], ip
   13d08:	vst1.64	{d16-d17}, [r2]
   13d0c:	vst1.64	{d16-d17}, [r3]
   13d10:	beq	13d30 <__assert_fail@plt+0x2d1c>
   13d14:	str	r1, [sp]
   13d18:	mov	r3, sp
   13d1c:	mov	r1, lr
   13d20:	mvn	r2, #0
   13d24:	bl	13b0c <__assert_fail@plt+0x2af8>
   13d28:	mov	sp, fp
   13d2c:	pop	{fp, pc}
   13d30:	bl	10ffc <abort@plt>
   13d34:	push	{r4, sl, fp, lr}
   13d38:	add	fp, sp, #8
   13d3c:	sub	sp, sp, #48	; 0x30
   13d40:	vmov.i32	q8, #0	; 0x00000000
   13d44:	mov	ip, r3
   13d48:	mov	r3, sp
   13d4c:	mov	lr, #32
   13d50:	cmp	r1, #10
   13d54:	add	r4, r3, #16
   13d58:	vst1.64	{d16-d17}, [r3], lr
   13d5c:	vst1.64	{d16-d17}, [r4]
   13d60:	vst1.64	{d16-d17}, [r3]
   13d64:	beq	13d84 <__assert_fail@plt+0x2d70>
   13d68:	str	r1, [sp]
   13d6c:	mov	r1, r2
   13d70:	mov	r3, sp
   13d74:	mov	r2, ip
   13d78:	bl	13b0c <__assert_fail@plt+0x2af8>
   13d7c:	sub	sp, fp, #8
   13d80:	pop	{r4, sl, fp, pc}
   13d84:	bl	10ffc <abort@plt>
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	sub	sp, sp, #48	; 0x30
   13d94:	vmov.i32	q8, #0	; 0x00000000
   13d98:	mov	r3, sp
   13d9c:	mov	ip, #32
   13da0:	cmp	r0, #10
   13da4:	add	r2, r3, #16
   13da8:	vst1.64	{d16-d17}, [r3], ip
   13dac:	vst1.64	{d16-d17}, [r2]
   13db0:	vst1.64	{d16-d17}, [r3]
   13db4:	beq	13dd4 <__assert_fail@plt+0x2dc0>
   13db8:	str	r0, [sp]
   13dbc:	mov	r3, sp
   13dc0:	mov	r0, #0
   13dc4:	mvn	r2, #0
   13dc8:	bl	13b0c <__assert_fail@plt+0x2af8>
   13dcc:	mov	sp, fp
   13dd0:	pop	{fp, pc}
   13dd4:	bl	10ffc <abort@plt>
   13dd8:	push	{fp, lr}
   13ddc:	mov	fp, sp
   13de0:	sub	sp, sp, #48	; 0x30
   13de4:	vmov.i32	q8, #0	; 0x00000000
   13de8:	mov	r3, sp
   13dec:	mov	ip, #32
   13df0:	cmp	r0, #10
   13df4:	add	lr, r3, #16
   13df8:	vst1.64	{d16-d17}, [r3], ip
   13dfc:	vst1.64	{d16-d17}, [lr]
   13e00:	vst1.64	{d16-d17}, [r3]
   13e04:	beq	13e20 <__assert_fail@plt+0x2e0c>
   13e08:	str	r0, [sp]
   13e0c:	mov	r3, sp
   13e10:	mov	r0, #0
   13e14:	bl	13b0c <__assert_fail@plt+0x2af8>
   13e18:	mov	sp, fp
   13e1c:	pop	{fp, pc}
   13e20:	bl	10ffc <abort@plt>
   13e24:	push	{r4, sl, fp, lr}
   13e28:	add	fp, sp, #8
   13e2c:	sub	sp, sp, #48	; 0x30
   13e30:	mov	lr, r0
   13e34:	movw	r0, #29088	; 0x71a0
   13e38:	mov	ip, r1
   13e3c:	mov	r1, #32
   13e40:	mov	r4, #1
   13e44:	movt	r0, #2
   13e48:	add	r3, r0, #16
   13e4c:	vld1.64	{d16-d17}, [r0], r1
   13e50:	vld1.64	{d20-d21}, [r0]
   13e54:	vld1.64	{d18-d19}, [r3]
   13e58:	mov	r3, sp
   13e5c:	add	r0, r3, #32
   13e60:	add	r1, r3, #16
   13e64:	vst1.64	{d20-d21}, [r0]
   13e68:	mov	r0, #28
   13e6c:	vst1.64	{d18-d19}, [r1]
   13e70:	mov	r1, r3
   13e74:	and	r0, r0, r2, lsr #3
   13e78:	and	r2, r2, #31
   13e7c:	vst1.64	{d16-d17}, [r1], r0
   13e80:	ldr	r0, [r1, #8]
   13e84:	bic	r4, r4, r0, lsr r2
   13e88:	eor	r0, r0, r4, lsl r2
   13e8c:	mov	r2, ip
   13e90:	str	r0, [r1, #8]
   13e94:	mov	r0, #0
   13e98:	mov	r1, lr
   13e9c:	bl	13b0c <__assert_fail@plt+0x2af8>
   13ea0:	sub	sp, fp, #8
   13ea4:	pop	{r4, sl, fp, pc}
   13ea8:	push	{fp, lr}
   13eac:	mov	fp, sp
   13eb0:	sub	sp, sp, #48	; 0x30
   13eb4:	mov	ip, r0
   13eb8:	movw	r0, #29088	; 0x71a0
   13ebc:	mov	r2, #32
   13ec0:	movt	r0, #2
   13ec4:	add	r3, r0, #16
   13ec8:	vld1.64	{d16-d17}, [r0], r2
   13ecc:	vld1.64	{d20-d21}, [r0]
   13ed0:	vld1.64	{d18-d19}, [r3]
   13ed4:	mov	r3, sp
   13ed8:	add	r0, r3, #32
   13edc:	add	r2, r3, #16
   13ee0:	vst1.64	{d20-d21}, [r0]
   13ee4:	mov	r0, #28
   13ee8:	vst1.64	{d18-d19}, [r2]
   13eec:	mov	r2, r3
   13ef0:	and	r0, r0, r1, lsr #3
   13ef4:	and	r1, r1, #31
   13ef8:	vst1.64	{d16-d17}, [r2], r0
   13efc:	mov	r0, #1
   13f00:	ldr	lr, [r2, #8]
   13f04:	bic	r0, r0, lr, lsr r1
   13f08:	eor	r0, lr, r0, lsl r1
   13f0c:	mov	r1, ip
   13f10:	str	r0, [r2, #8]
   13f14:	mov	r0, #0
   13f18:	mvn	r2, #0
   13f1c:	bl	13b0c <__assert_fail@plt+0x2af8>
   13f20:	mov	sp, fp
   13f24:	pop	{fp, pc}
   13f28:	push	{fp, lr}
   13f2c:	mov	fp, sp
   13f30:	sub	sp, sp, #48	; 0x30
   13f34:	mov	r1, r0
   13f38:	movw	r0, #29088	; 0x71a0
   13f3c:	mov	r3, #32
   13f40:	movt	r0, #2
   13f44:	add	r2, r0, #16
   13f48:	vld1.64	{d16-d17}, [r0], r3
   13f4c:	mov	r3, sp
   13f50:	vld1.64	{d18-d19}, [r2]
   13f54:	vld1.64	{d20-d21}, [r0]
   13f58:	add	r2, r3, #16
   13f5c:	add	r0, r3, #32
   13f60:	vst1.64	{d18-d19}, [r2]
   13f64:	vst1.64	{d20-d21}, [r0]
   13f68:	mov	r0, #12
   13f6c:	mov	r2, r3
   13f70:	vst1.64	{d16-d17}, [r2], r0
   13f74:	ldr	r0, [r2]
   13f78:	orr	r0, r0, #67108864	; 0x4000000
   13f7c:	str	r0, [r2]
   13f80:	mov	r0, #0
   13f84:	mvn	r2, #0
   13f88:	bl	13b0c <__assert_fail@plt+0x2af8>
   13f8c:	mov	sp, fp
   13f90:	pop	{fp, pc}
   13f94:	push	{fp, lr}
   13f98:	mov	fp, sp
   13f9c:	sub	sp, sp, #48	; 0x30
   13fa0:	mov	ip, r1
   13fa4:	mov	r1, r0
   13fa8:	movw	r0, #29088	; 0x71a0
   13fac:	mov	r2, #32
   13fb0:	movt	r0, #2
   13fb4:	add	r3, r0, #16
   13fb8:	vld1.64	{d16-d17}, [r0], r2
   13fbc:	vld1.64	{d18-d19}, [r3]
   13fc0:	vld1.64	{d20-d21}, [r0]
   13fc4:	mov	r3, sp
   13fc8:	add	r2, r3, #16
   13fcc:	add	r0, r3, #32
   13fd0:	vst1.64	{d18-d19}, [r2]
   13fd4:	vst1.64	{d20-d21}, [r0]
   13fd8:	mov	r0, #12
   13fdc:	mov	r2, r3
   13fe0:	vst1.64	{d16-d17}, [r2], r0
   13fe4:	ldr	r0, [r2]
   13fe8:	orr	r0, r0, #67108864	; 0x4000000
   13fec:	str	r0, [r2]
   13ff0:	mov	r0, #0
   13ff4:	mov	r2, ip
   13ff8:	bl	13b0c <__assert_fail@plt+0x2af8>
   13ffc:	mov	sp, fp
   14000:	pop	{fp, pc}
   14004:	push	{r4, sl, fp, lr}
   14008:	add	fp, sp, #8
   1400c:	sub	sp, sp, #96	; 0x60
   14010:	vmov.i32	q8, #0	; 0x00000000
   14014:	mov	ip, r2
   14018:	mov	r2, sp
   1401c:	mov	r4, #28
   14020:	cmp	r1, #10
   14024:	mov	r3, r2
   14028:	add	lr, r2, #16
   1402c:	vst1.64	{d16-d17}, [r3], r4
   14030:	vst1.64	{d16-d17}, [lr]
   14034:	vst1.32	{d16-d17}, [r3]
   14038:	beq	14088 <__assert_fail@plt+0x3074>
   1403c:	vld1.64	{d16-d17}, [r2], r4
   14040:	vld1.64	{d18-d19}, [lr]
   14044:	add	r3, sp, #48	; 0x30
   14048:	vld1.32	{d20-d21}, [r2]
   1404c:	add	r2, r3, #20
   14050:	add	r4, r3, #4
   14054:	vst1.32	{d18-d19}, [r2]
   14058:	add	r2, r3, #32
   1405c:	vst1.32	{d16-d17}, [r4]
   14060:	vst1.32	{d20-d21}, [r2]
   14064:	str	r1, [sp, #48]	; 0x30
   14068:	mvn	r2, #0
   1406c:	ldr	r1, [sp, #60]	; 0x3c
   14070:	orr	r1, r1, #67108864	; 0x4000000
   14074:	str	r1, [sp, #60]	; 0x3c
   14078:	mov	r1, ip
   1407c:	bl	13b0c <__assert_fail@plt+0x2af8>
   14080:	sub	sp, fp, #8
   14084:	pop	{r4, sl, fp, pc}
   14088:	bl	10ffc <abort@plt>
   1408c:	push	{r4, r5, r6, sl, fp, lr}
   14090:	add	fp, sp, #16
   14094:	sub	sp, sp, #48	; 0x30
   14098:	mov	ip, r3
   1409c:	movw	r3, #29088	; 0x71a0
   140a0:	mov	r6, #32
   140a4:	cmp	r1, #0
   140a8:	mov	r4, sp
   140ac:	movt	r3, #2
   140b0:	cmpne	r2, #0
   140b4:	add	r5, r4, #16
   140b8:	add	lr, r3, #16
   140bc:	vld1.64	{d16-d17}, [r3], r6
   140c0:	vld1.64	{d18-d19}, [lr]
   140c4:	vld1.64	{d20-d21}, [r3]
   140c8:	mov	r3, #10
   140cc:	vst1.64	{d16-d17}, [r4], r6
   140d0:	vst1.64	{d18-d19}, [r5]
   140d4:	vst1.64	{d20-d21}, [r4]
   140d8:	str	r3, [sp]
   140dc:	bne	140e4 <__assert_fail@plt+0x30d0>
   140e0:	bl	10ffc <abort@plt>
   140e4:	str	r2, [sp, #44]	; 0x2c
   140e8:	str	r1, [sp, #40]	; 0x28
   140ec:	mov	r3, sp
   140f0:	mov	r1, ip
   140f4:	mvn	r2, #0
   140f8:	bl	13b0c <__assert_fail@plt+0x2af8>
   140fc:	sub	sp, fp, #16
   14100:	pop	{r4, r5, r6, sl, fp, pc}
   14104:	push	{r4, r5, r6, sl, fp, lr}
   14108:	add	fp, sp, #16
   1410c:	sub	sp, sp, #48	; 0x30
   14110:	mov	lr, r3
   14114:	movw	r3, #29088	; 0x71a0
   14118:	mov	r6, #32
   1411c:	cmp	r1, #0
   14120:	mov	r4, sp
   14124:	movt	r3, #2
   14128:	cmpne	r2, #0
   1412c:	add	r5, r4, #16
   14130:	add	ip, r3, #16
   14134:	vld1.64	{d16-d17}, [r3], r6
   14138:	vld1.64	{d18-d19}, [ip]
   1413c:	vld1.64	{d20-d21}, [r3]
   14140:	mov	r3, #10
   14144:	vst1.64	{d16-d17}, [r4], r6
   14148:	vst1.64	{d18-d19}, [r5]
   1414c:	vst1.64	{d20-d21}, [r4]
   14150:	str	r3, [sp]
   14154:	bne	1415c <__assert_fail@plt+0x3148>
   14158:	bl	10ffc <abort@plt>
   1415c:	ldr	ip, [fp, #8]
   14160:	str	r2, [sp, #44]	; 0x2c
   14164:	str	r1, [sp, #40]	; 0x28
   14168:	mov	r3, sp
   1416c:	mov	r1, lr
   14170:	mov	r2, ip
   14174:	bl	13b0c <__assert_fail@plt+0x2af8>
   14178:	sub	sp, fp, #16
   1417c:	pop	{r4, r5, r6, sl, fp, pc}
   14180:	push	{r4, sl, fp, lr}
   14184:	add	fp, sp, #8
   14188:	sub	sp, sp, #48	; 0x30
   1418c:	movw	r3, #29088	; 0x71a0
   14190:	mov	lr, #32
   14194:	mov	ip, r2
   14198:	cmp	r0, #0
   1419c:	movt	r3, #2
   141a0:	cmpne	r1, #0
   141a4:	add	r2, r3, #16
   141a8:	vld1.64	{d16-d17}, [r3], lr
   141ac:	vld1.64	{d20-d21}, [r3]
   141b0:	vld1.64	{d18-d19}, [r2]
   141b4:	mov	r2, sp
   141b8:	add	r4, r2, #16
   141bc:	vst1.64	{d16-d17}, [r2], lr
   141c0:	vst1.64	{d20-d21}, [r2]
   141c4:	mov	r2, #10
   141c8:	vst1.64	{d18-d19}, [r4]
   141cc:	str	r2, [sp]
   141d0:	bne	141d8 <__assert_fail@plt+0x31c4>
   141d4:	bl	10ffc <abort@plt>
   141d8:	str	r1, [sp, #44]	; 0x2c
   141dc:	str	r0, [sp, #40]	; 0x28
   141e0:	mov	r3, sp
   141e4:	mov	r0, #0
   141e8:	mov	r1, ip
   141ec:	mvn	r2, #0
   141f0:	bl	13b0c <__assert_fail@plt+0x2af8>
   141f4:	sub	sp, fp, #8
   141f8:	pop	{r4, sl, fp, pc}
   141fc:	push	{r4, r5, fp, lr}
   14200:	add	fp, sp, #8
   14204:	sub	sp, sp, #48	; 0x30
   14208:	mov	ip, r3
   1420c:	movw	r3, #29088	; 0x71a0
   14210:	mov	r4, #32
   14214:	mov	lr, r2
   14218:	cmp	r0, #0
   1421c:	movt	r3, #2
   14220:	cmpne	r1, #0
   14224:	add	r2, r3, #16
   14228:	vld1.64	{d16-d17}, [r3], r4
   1422c:	vld1.64	{d20-d21}, [r3]
   14230:	vld1.64	{d18-d19}, [r2]
   14234:	mov	r2, sp
   14238:	add	r5, r2, #16
   1423c:	vst1.64	{d16-d17}, [r2], r4
   14240:	vst1.64	{d20-d21}, [r2]
   14244:	mov	r2, #10
   14248:	vst1.64	{d18-d19}, [r5]
   1424c:	str	r2, [sp]
   14250:	bne	14258 <__assert_fail@plt+0x3244>
   14254:	bl	10ffc <abort@plt>
   14258:	str	r1, [sp, #44]	; 0x2c
   1425c:	str	r0, [sp, #40]	; 0x28
   14260:	mov	r3, sp
   14264:	mov	r0, #0
   14268:	mov	r1, lr
   1426c:	mov	r2, ip
   14270:	bl	13b0c <__assert_fail@plt+0x2af8>
   14274:	sub	sp, fp, #8
   14278:	pop	{r4, r5, fp, pc}
   1427c:	movw	r3, #28928	; 0x7100
   14280:	movt	r3, #2
   14284:	b	13b0c <__assert_fail@plt+0x2af8>
   14288:	movw	r3, #28928	; 0x7100
   1428c:	mov	r2, r1
   14290:	mov	r1, r0
   14294:	mov	r0, #0
   14298:	movt	r3, #2
   1429c:	b	13b0c <__assert_fail@plt+0x2af8>
   142a0:	movw	r3, #28928	; 0x7100
   142a4:	mvn	r2, #0
   142a8:	movt	r3, #2
   142ac:	b	13b0c <__assert_fail@plt+0x2af8>
   142b0:	movw	r3, #28928	; 0x7100
   142b4:	mov	r1, r0
   142b8:	mov	r0, #0
   142bc:	mvn	r2, #0
   142c0:	movt	r3, #2
   142c4:	b	13b0c <__assert_fail@plt+0x2af8>
   142c8:	push	{r4, r5, fp, lr}
   142cc:	add	fp, sp, #8
   142d0:	mov	r5, r0
   142d4:	mov	r4, r1
   142d8:	mov	r0, #0
   142dc:	mov	r2, #5
   142e0:	mov	r1, r5
   142e4:	bl	10e4c <dcgettext@plt>
   142e8:	cmp	r0, r5
   142ec:	popne	{r4, r5, fp, pc}
   142f0:	bl	15190 <__assert_fail@plt+0x417c>
   142f4:	ldrb	r1, [r0]
   142f8:	and	r1, r1, #223	; 0xdf
   142fc:	cmp	r1, #71	; 0x47
   14300:	beq	14368 <__assert_fail@plt+0x3354>
   14304:	cmp	r1, #85	; 0x55
   14308:	bne	143c0 <__assert_fail@plt+0x33ac>
   1430c:	ldrb	r1, [r0, #1]
   14310:	and	r1, r1, #223	; 0xdf
   14314:	cmp	r1, #84	; 0x54
   14318:	bne	143c0 <__assert_fail@plt+0x33ac>
   1431c:	ldrb	r1, [r0, #2]
   14320:	and	r1, r1, #223	; 0xdf
   14324:	cmp	r1, #70	; 0x46
   14328:	bne	143c0 <__assert_fail@plt+0x33ac>
   1432c:	ldrb	r1, [r0, #3]
   14330:	cmp	r1, #45	; 0x2d
   14334:	bne	143c0 <__assert_fail@plt+0x33ac>
   14338:	ldrb	r1, [r0, #4]
   1433c:	cmp	r1, #56	; 0x38
   14340:	bne	143c0 <__assert_fail@plt+0x33ac>
   14344:	ldrb	r0, [r0, #5]
   14348:	cmp	r0, #0
   1434c:	bne	143c0 <__assert_fail@plt+0x33ac>
   14350:	ldrb	r1, [r5]
   14354:	movw	r2, #24128	; 0x5e40
   14358:	movw	r0, #24132	; 0x5e44
   1435c:	movt	r2, #1
   14360:	movt	r0, #1
   14364:	b	143f0 <__assert_fail@plt+0x33dc>
   14368:	ldrb	r1, [r0, #1]
   1436c:	and	r1, r1, #223	; 0xdf
   14370:	cmp	r1, #66	; 0x42
   14374:	bne	143c0 <__assert_fail@plt+0x33ac>
   14378:	ldrb	r1, [r0, #2]
   1437c:	cmp	r1, #49	; 0x31
   14380:	bne	143c0 <__assert_fail@plt+0x33ac>
   14384:	ldrb	r1, [r0, #3]
   14388:	cmp	r1, #56	; 0x38
   1438c:	bne	143c0 <__assert_fail@plt+0x33ac>
   14390:	ldrb	r1, [r0, #4]
   14394:	cmp	r1, #48	; 0x30
   14398:	bne	143c0 <__assert_fail@plt+0x33ac>
   1439c:	ldrb	r1, [r0, #5]
   143a0:	cmp	r1, #51	; 0x33
   143a4:	bne	143c0 <__assert_fail@plt+0x33ac>
   143a8:	ldrb	r1, [r0, #6]
   143ac:	cmp	r1, #48	; 0x30
   143b0:	bne	143c0 <__assert_fail@plt+0x33ac>
   143b4:	ldrb	r0, [r0, #7]
   143b8:	cmp	r0, #0
   143bc:	beq	143dc <__assert_fail@plt+0x33c8>
   143c0:	movw	r1, #24124	; 0x5e3c
   143c4:	movw	r0, #23956	; 0x5d94
   143c8:	cmp	r4, #9
   143cc:	movt	r1, #1
   143d0:	movt	r0, #1
   143d4:	moveq	r0, r1
   143d8:	pop	{r4, r5, fp, pc}
   143dc:	ldrb	r1, [r5]
   143e0:	movw	r2, #24136	; 0x5e48
   143e4:	movw	r0, #24140	; 0x5e4c
   143e8:	movt	r2, #1
   143ec:	movt	r0, #1
   143f0:	cmp	r1, #96	; 0x60
   143f4:	moveq	r0, r2
   143f8:	pop	{r4, r5, fp, pc}
   143fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14400:	add	fp, sp, #24
   14404:	sub	sp, sp, #32
   14408:	ldr	r6, [fp, #12]
   1440c:	ldr	r7, [fp, #8]
   14410:	mov	r4, r2
   14414:	mov	r8, r0
   14418:	cmp	r1, #0
   1441c:	beq	14444 <__assert_fail@plt+0x3430>
   14420:	movw	r2, #24228	; 0x5ea4
   14424:	mov	r5, r1
   14428:	str	r3, [sp, #4]
   1442c:	str	r4, [sp]
   14430:	mov	r0, r8
   14434:	mov	r1, #1
   14438:	movt	r2, #1
   1443c:	mov	r3, r5
   14440:	b	1445c <__assert_fail@plt+0x3448>
   14444:	movw	r2, #24240	; 0x5eb0
   14448:	str	r3, [sp]
   1444c:	mov	r0, r8
   14450:	mov	r1, #1
   14454:	mov	r3, r4
   14458:	movt	r2, #1
   1445c:	bl	10f6c <__fprintf_chk@plt>
   14460:	movw	r1, #24247	; 0x5eb7
   14464:	mov	r0, #0
   14468:	mov	r2, #5
   1446c:	movt	r1, #1
   14470:	bl	10e4c <dcgettext@plt>
   14474:	movw	r2, #24965	; 0x6185
   14478:	mov	r3, r0
   1447c:	movw	r0, #2022	; 0x7e6
   14480:	mov	r1, #1
   14484:	movt	r2, #1
   14488:	str	r0, [sp]
   1448c:	mov	r0, r8
   14490:	bl	10f6c <__fprintf_chk@plt>
   14494:	movw	r4, #22880	; 0x5960
   14498:	mov	r1, r8
   1449c:	movt	r4, #1
   144a0:	mov	r0, r4
   144a4:	bl	10dd4 <fputs_unlocked@plt>
   144a8:	movw	r1, #24251	; 0x5ebb
   144ac:	mov	r0, #0
   144b0:	mov	r2, #5
   144b4:	movt	r1, #1
   144b8:	bl	10e4c <dcgettext@plt>
   144bc:	movw	r3, #24422	; 0x5f66
   144c0:	mov	r2, r0
   144c4:	mov	r0, r8
   144c8:	mov	r1, #1
   144cc:	movt	r3, #1
   144d0:	bl	10f6c <__fprintf_chk@plt>
   144d4:	mov	r0, r4
   144d8:	mov	r1, r8
   144dc:	bl	10dd4 <fputs_unlocked@plt>
   144e0:	cmp	r6, #9
   144e4:	bhi	14520 <__assert_fail@plt+0x350c>
   144e8:	add	r0, pc, #0
   144ec:	ldr	pc, [r0, r6, lsl #2]
   144f0:	andeq	r4, r1, r8, lsl r5
   144f4:	andeq	r4, r1, ip, lsr #10
   144f8:	andeq	r4, r1, ip, asr r5
   144fc:	andeq	r4, r1, r4, lsl #11
   14500:	andeq	r4, r1, ip, lsr #11
   14504:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14508:	strdeq	r4, [r1], -ip
   1450c:	andeq	r4, r1, r4, lsr r6
   14510:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14514:	andeq	r4, r1, ip, ror r6
   14518:	sub	sp, fp, #24
   1451c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14520:	movw	r1, #24775	; 0x60c7
   14524:	movt	r1, #1
   14528:	b	14684 <__assert_fail@plt+0x3670>
   1452c:	movw	r1, #24456	; 0x5f88
   14530:	mov	r0, #0
   14534:	mov	r2, #5
   14538:	movt	r1, #1
   1453c:	bl	10e4c <dcgettext@plt>
   14540:	ldr	r3, [r7]
   14544:	mov	r2, r0
   14548:	mov	r0, r8
   1454c:	mov	r1, #1
   14550:	sub	sp, fp, #24
   14554:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14558:	b	10f6c <__fprintf_chk@plt>
   1455c:	movw	r1, #24472	; 0x5f98
   14560:	mov	r0, #0
   14564:	mov	r2, #5
   14568:	movt	r1, #1
   1456c:	bl	10e4c <dcgettext@plt>
   14570:	mov	r2, r0
   14574:	ldr	r3, [r7]
   14578:	ldr	r0, [r7, #4]
   1457c:	str	r0, [sp]
   14580:	b	14670 <__assert_fail@plt+0x365c>
   14584:	movw	r1, #24495	; 0x5faf
   14588:	mov	r0, #0
   1458c:	mov	r2, #5
   14590:	movt	r1, #1
   14594:	bl	10e4c <dcgettext@plt>
   14598:	mov	r2, r0
   1459c:	ldr	r3, [r7]
   145a0:	ldmib	r7, {r0, r1}
   145a4:	stm	sp, {r0, r1}
   145a8:	b	14670 <__assert_fail@plt+0x365c>
   145ac:	movw	r1, #24523	; 0x5fcb
   145b0:	mov	r0, #0
   145b4:	mov	r2, #5
   145b8:	movt	r1, #1
   145bc:	bl	10e4c <dcgettext@plt>
   145c0:	ldr	r3, [r7]
   145c4:	mov	r2, r0
   145c8:	ldmib	r7, {r0, r1, r7}
   145cc:	stm	sp, {r0, r1, r7}
   145d0:	b	14670 <__assert_fail@plt+0x365c>
   145d4:	movw	r1, #24555	; 0x5feb
   145d8:	mov	r0, #0
   145dc:	mov	r2, #5
   145e0:	movt	r1, #1
   145e4:	bl	10e4c <dcgettext@plt>
   145e8:	ldr	r3, [r7]
   145ec:	mov	r2, r0
   145f0:	ldmib	r7, {r0, r1, r6, r7}
   145f4:	stm	sp, {r0, r1, r6, r7}
   145f8:	b	14670 <__assert_fail@plt+0x365c>
   145fc:	movw	r1, #24591	; 0x600f
   14600:	mov	r0, #0
   14604:	mov	r2, #5
   14608:	movt	r1, #1
   1460c:	bl	10e4c <dcgettext@plt>
   14610:	mov	r2, r0
   14614:	ldr	r3, [r7]
   14618:	ldmib	r7, {r0, r1, r6}
   1461c:	ldr	r5, [r7, #16]
   14620:	ldr	r7, [r7, #20]
   14624:	stm	sp, {r0, r1, r6}
   14628:	str	r5, [sp, #12]
   1462c:	str	r7, [sp, #16]
   14630:	b	14670 <__assert_fail@plt+0x365c>
   14634:	movw	r1, #24631	; 0x6037
   14638:	mov	r0, #0
   1463c:	mov	r2, #5
   14640:	movt	r1, #1
   14644:	bl	10e4c <dcgettext@plt>
   14648:	mov	r2, r0
   1464c:	ldr	r3, [r7]
   14650:	ldmib	r7, {r0, r1, r6}
   14654:	ldr	r5, [r7, #16]
   14658:	ldr	r4, [r7, #20]
   1465c:	ldr	r7, [r7, #24]
   14660:	stm	sp, {r0, r1, r6}
   14664:	str	r5, [sp, #12]
   14668:	str	r4, [sp, #16]
   1466c:	str	r7, [sp, #20]
   14670:	mov	r0, r8
   14674:	mov	r1, #1
   14678:	b	14724 <__assert_fail@plt+0x3710>
   1467c:	movw	r1, #24723	; 0x6093
   14680:	movt	r1, #1
   14684:	mov	r0, #0
   14688:	mov	r2, #5
   1468c:	bl	10e4c <dcgettext@plt>
   14690:	mov	ip, r0
   14694:	ldr	r3, [r7]
   14698:	ldr	r0, [r7, #4]
   1469c:	ldr	r1, [r7, #8]
   146a0:	ldr	r6, [r7, #12]
   146a4:	ldr	r5, [r7, #16]
   146a8:	ldr	r4, [r7, #20]
   146ac:	ldr	r2, [r7, #24]
   146b0:	ldr	lr, [r7, #28]
   146b4:	ldr	r7, [r7, #32]
   146b8:	stm	sp, {r0, r1, r6}
   146bc:	str	r5, [sp, #12]
   146c0:	str	r4, [sp, #16]
   146c4:	str	r2, [sp, #20]
   146c8:	str	lr, [sp, #24]
   146cc:	str	r7, [sp, #28]
   146d0:	b	14718 <__assert_fail@plt+0x3704>
   146d4:	movw	r1, #24675	; 0x6063
   146d8:	mov	r0, #0
   146dc:	mov	r2, #5
   146e0:	movt	r1, #1
   146e4:	bl	10e4c <dcgettext@plt>
   146e8:	mov	ip, r0
   146ec:	ldr	r3, [r7]
   146f0:	ldmib	r7, {r0, r1, r6}
   146f4:	ldr	r5, [r7, #16]
   146f8:	ldr	r4, [r7, #20]
   146fc:	ldr	r2, [r7, #24]
   14700:	ldr	r7, [r7, #28]
   14704:	stm	sp, {r0, r1, r6}
   14708:	str	r5, [sp, #12]
   1470c:	str	r4, [sp, #16]
   14710:	str	r2, [sp, #20]
   14714:	str	r7, [sp, #24]
   14718:	mov	r0, r8
   1471c:	mov	r1, #1
   14720:	mov	r2, ip
   14724:	bl	10f6c <__fprintf_chk@plt>
   14728:	sub	sp, fp, #24
   1472c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14730:	push	{r4, sl, fp, lr}
   14734:	add	fp, sp, #8
   14738:	sub	sp, sp, #8
   1473c:	ldr	ip, [fp, #8]
   14740:	mov	lr, #0
   14744:	ldr	r4, [ip, lr, lsl #2]
   14748:	add	lr, lr, #1
   1474c:	cmp	r4, #0
   14750:	bne	14744 <__assert_fail@plt+0x3730>
   14754:	sub	r4, lr, #1
   14758:	str	ip, [sp]
   1475c:	str	r4, [sp, #4]
   14760:	bl	143fc <__assert_fail@plt+0x33e8>
   14764:	sub	sp, fp, #8
   14768:	pop	{r4, sl, fp, pc}
   1476c:	push	{fp, lr}
   14770:	mov	fp, sp
   14774:	sub	sp, sp, #48	; 0x30
   14778:	ldr	ip, [fp, #8]
   1477c:	ldr	lr, [ip]
   14780:	cmp	lr, #0
   14784:	str	lr, [sp, #8]
   14788:	beq	14824 <__assert_fail@plt+0x3810>
   1478c:	ldr	lr, [ip, #4]
   14790:	cmp	lr, #0
   14794:	str	lr, [sp, #12]
   14798:	beq	1482c <__assert_fail@plt+0x3818>
   1479c:	ldr	lr, [ip, #8]
   147a0:	cmp	lr, #0
   147a4:	str	lr, [sp, #16]
   147a8:	beq	14834 <__assert_fail@plt+0x3820>
   147ac:	ldr	lr, [ip, #12]
   147b0:	cmp	lr, #0
   147b4:	str	lr, [sp, #20]
   147b8:	beq	1483c <__assert_fail@plt+0x3828>
   147bc:	ldr	lr, [ip, #16]
   147c0:	cmp	lr, #0
   147c4:	str	lr, [sp, #24]
   147c8:	beq	14844 <__assert_fail@plt+0x3830>
   147cc:	ldr	lr, [ip, #20]
   147d0:	cmp	lr, #0
   147d4:	str	lr, [sp, #28]
   147d8:	beq	1484c <__assert_fail@plt+0x3838>
   147dc:	ldr	lr, [ip, #24]
   147e0:	cmp	lr, #0
   147e4:	str	lr, [sp, #32]
   147e8:	beq	14854 <__assert_fail@plt+0x3840>
   147ec:	ldr	lr, [ip, #28]
   147f0:	cmp	lr, #0
   147f4:	str	lr, [sp, #36]	; 0x24
   147f8:	beq	1485c <__assert_fail@plt+0x3848>
   147fc:	ldr	lr, [ip, #32]
   14800:	cmp	lr, #0
   14804:	str	lr, [sp, #40]	; 0x28
   14808:	beq	14864 <__assert_fail@plt+0x3850>
   1480c:	ldr	lr, [ip, #36]	; 0x24
   14810:	mov	ip, #10
   14814:	cmp	lr, #0
   14818:	str	lr, [sp, #44]	; 0x2c
   1481c:	movweq	ip, #9
   14820:	b	14868 <__assert_fail@plt+0x3854>
   14824:	mov	ip, #0
   14828:	b	14868 <__assert_fail@plt+0x3854>
   1482c:	mov	ip, #1
   14830:	b	14868 <__assert_fail@plt+0x3854>
   14834:	mov	ip, #2
   14838:	b	14868 <__assert_fail@plt+0x3854>
   1483c:	mov	ip, #3
   14840:	b	14868 <__assert_fail@plt+0x3854>
   14844:	mov	ip, #4
   14848:	b	14868 <__assert_fail@plt+0x3854>
   1484c:	mov	ip, #5
   14850:	b	14868 <__assert_fail@plt+0x3854>
   14854:	mov	ip, #6
   14858:	b	14868 <__assert_fail@plt+0x3854>
   1485c:	mov	ip, #7
   14860:	b	14868 <__assert_fail@plt+0x3854>
   14864:	mov	ip, #8
   14868:	add	lr, sp, #8
   1486c:	str	ip, [sp, #4]
   14870:	str	lr, [sp]
   14874:	bl	143fc <__assert_fail@plt+0x33e8>
   14878:	mov	sp, fp
   1487c:	pop	{fp, pc}
   14880:	push	{fp, lr}
   14884:	mov	fp, sp
   14888:	sub	sp, sp, #56	; 0x38
   1488c:	add	ip, fp, #8
   14890:	str	ip, [sp, #12]
   14894:	ldr	lr, [fp, #8]
   14898:	cmp	lr, #0
   1489c:	str	lr, [sp, #16]
   148a0:	beq	1493c <__assert_fail@plt+0x3928>
   148a4:	ldr	lr, [ip, #4]
   148a8:	cmp	lr, #0
   148ac:	str	lr, [sp, #20]
   148b0:	beq	14944 <__assert_fail@plt+0x3930>
   148b4:	ldr	lr, [ip, #8]
   148b8:	cmp	lr, #0
   148bc:	str	lr, [sp, #24]
   148c0:	beq	1494c <__assert_fail@plt+0x3938>
   148c4:	ldr	lr, [ip, #12]
   148c8:	cmp	lr, #0
   148cc:	str	lr, [sp, #28]
   148d0:	beq	14954 <__assert_fail@plt+0x3940>
   148d4:	ldr	lr, [ip, #16]
   148d8:	cmp	lr, #0
   148dc:	str	lr, [sp, #32]
   148e0:	beq	1495c <__assert_fail@plt+0x3948>
   148e4:	ldr	lr, [ip, #20]
   148e8:	cmp	lr, #0
   148ec:	str	lr, [sp, #36]	; 0x24
   148f0:	beq	14964 <__assert_fail@plt+0x3950>
   148f4:	ldr	lr, [ip, #24]
   148f8:	cmp	lr, #0
   148fc:	str	lr, [sp, #40]	; 0x28
   14900:	beq	1496c <__assert_fail@plt+0x3958>
   14904:	ldr	lr, [ip, #28]
   14908:	cmp	lr, #0
   1490c:	str	lr, [sp, #44]	; 0x2c
   14910:	beq	14974 <__assert_fail@plt+0x3960>
   14914:	ldr	lr, [ip, #32]
   14918:	cmp	lr, #0
   1491c:	str	lr, [sp, #48]	; 0x30
   14920:	beq	1497c <__assert_fail@plt+0x3968>
   14924:	ldr	lr, [ip, #36]	; 0x24
   14928:	mov	ip, #10
   1492c:	cmp	lr, #0
   14930:	str	lr, [sp, #52]	; 0x34
   14934:	movweq	ip, #9
   14938:	b	14980 <__assert_fail@plt+0x396c>
   1493c:	mov	ip, #0
   14940:	b	14980 <__assert_fail@plt+0x396c>
   14944:	mov	ip, #1
   14948:	b	14980 <__assert_fail@plt+0x396c>
   1494c:	mov	ip, #2
   14950:	b	14980 <__assert_fail@plt+0x396c>
   14954:	mov	ip, #3
   14958:	b	14980 <__assert_fail@plt+0x396c>
   1495c:	mov	ip, #4
   14960:	b	14980 <__assert_fail@plt+0x396c>
   14964:	mov	ip, #5
   14968:	b	14980 <__assert_fail@plt+0x396c>
   1496c:	mov	ip, #6
   14970:	b	14980 <__assert_fail@plt+0x396c>
   14974:	mov	ip, #7
   14978:	b	14980 <__assert_fail@plt+0x396c>
   1497c:	mov	ip, #8
   14980:	add	lr, sp, #16
   14984:	str	ip, [sp, #4]
   14988:	str	lr, [sp]
   1498c:	bl	143fc <__assert_fail@plt+0x33e8>
   14990:	mov	sp, fp
   14994:	pop	{fp, pc}
   14998:	push	{fp, lr}
   1499c:	mov	fp, sp
   149a0:	movw	r0, #29004	; 0x714c
   149a4:	movt	r0, #2
   149a8:	ldr	r1, [r0]
   149ac:	movw	r0, #22880	; 0x5960
   149b0:	movt	r0, #1
   149b4:	bl	10dd4 <fputs_unlocked@plt>
   149b8:	movw	r1, #24835	; 0x6103
   149bc:	mov	r0, #0
   149c0:	mov	r2, #5
   149c4:	movt	r1, #1
   149c8:	bl	10e4c <dcgettext@plt>
   149cc:	movw	r2, #24855	; 0x6117
   149d0:	mov	r1, r0
   149d4:	mov	r0, #1
   149d8:	movt	r2, #1
   149dc:	bl	10f54 <__printf_chk@plt>
   149e0:	movw	r1, #24877	; 0x612d
   149e4:	mov	r0, #0
   149e8:	mov	r2, #5
   149ec:	movt	r1, #1
   149f0:	bl	10e4c <dcgettext@plt>
   149f4:	movw	r2, #22382	; 0x576e
   149f8:	movw	r3, #22689	; 0x58a1
   149fc:	mov	r1, r0
   14a00:	mov	r0, #1
   14a04:	movt	r2, #1
   14a08:	movt	r3, #1
   14a0c:	bl	10f54 <__printf_chk@plt>
   14a10:	movw	r1, #24897	; 0x6141
   14a14:	mov	r0, #0
   14a18:	mov	r2, #5
   14a1c:	movt	r1, #1
   14a20:	bl	10e4c <dcgettext@plt>
   14a24:	movw	r2, #24936	; 0x6168
   14a28:	mov	r1, r0
   14a2c:	mov	r0, #1
   14a30:	movt	r2, #1
   14a34:	pop	{fp, lr}
   14a38:	b	10f54 <__printf_chk@plt>
   14a3c:	push	{r4, r5, r6, sl, fp, lr}
   14a40:	add	fp, sp, #16
   14a44:	mov	r4, r2
   14a48:	mov	r5, r1
   14a4c:	mov	r6, r0
   14a50:	bl	1522c <__assert_fail@plt+0x4218>
   14a54:	cmp	r0, #0
   14a58:	popne	{r4, r5, r6, sl, fp, pc}
   14a5c:	cmp	r6, #0
   14a60:	beq	14a74 <__assert_fail@plt+0x3a60>
   14a64:	cmp	r5, #0
   14a68:	cmpne	r4, #0
   14a6c:	bne	14a74 <__assert_fail@plt+0x3a60>
   14a70:	pop	{r4, r5, r6, sl, fp, pc}
   14a74:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14a78:	push	{r4, r5, r6, sl, fp, lr}
   14a7c:	add	fp, sp, #16
   14a80:	mov	r4, r2
   14a84:	mov	r5, r1
   14a88:	mov	r6, r0
   14a8c:	bl	1522c <__assert_fail@plt+0x4218>
   14a90:	cmp	r0, #0
   14a94:	popne	{r4, r5, r6, sl, fp, pc}
   14a98:	cmp	r6, #0
   14a9c:	beq	14ab0 <__assert_fail@plt+0x3a9c>
   14aa0:	cmp	r5, #0
   14aa4:	cmpne	r4, #0
   14aa8:	bne	14ab0 <__assert_fail@plt+0x3a9c>
   14aac:	pop	{r4, r5, r6, sl, fp, pc}
   14ab0:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ab4:	push	{fp, lr}
   14ab8:	mov	fp, sp
   14abc:	bl	15088 <__assert_fail@plt+0x4074>
   14ac0:	cmp	r0, #0
   14ac4:	popne	{fp, pc}
   14ac8:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14acc:	push	{fp, lr}
   14ad0:	mov	fp, sp
   14ad4:	bl	15088 <__assert_fail@plt+0x4074>
   14ad8:	cmp	r0, #0
   14adc:	popne	{fp, pc}
   14ae0:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ae4:	push	{fp, lr}
   14ae8:	mov	fp, sp
   14aec:	bl	15088 <__assert_fail@plt+0x4074>
   14af0:	cmp	r0, #0
   14af4:	popne	{fp, pc}
   14af8:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14afc:	push	{r4, r5, fp, lr}
   14b00:	add	fp, sp, #8
   14b04:	mov	r4, r1
   14b08:	mov	r5, r0
   14b0c:	bl	150b8 <__assert_fail@plt+0x40a4>
   14b10:	cmp	r0, #0
   14b14:	popne	{r4, r5, fp, pc}
   14b18:	cmp	r5, #0
   14b1c:	beq	14b2c <__assert_fail@plt+0x3b18>
   14b20:	cmp	r4, #0
   14b24:	bne	14b2c <__assert_fail@plt+0x3b18>
   14b28:	pop	{r4, r5, fp, pc}
   14b2c:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14b30:	push	{fp, lr}
   14b34:	mov	fp, sp
   14b38:	cmp	r1, #0
   14b3c:	orreq	r1, r1, #1
   14b40:	bl	150b8 <__assert_fail@plt+0x40a4>
   14b44:	cmp	r0, #0
   14b48:	popne	{fp, pc}
   14b4c:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	clz	r3, r2
   14b5c:	lsr	ip, r3, #5
   14b60:	clz	r3, r1
   14b64:	lsr	r3, r3, #5
   14b68:	orrs	r3, r3, ip
   14b6c:	movwne	r1, #1
   14b70:	movwne	r2, #1
   14b74:	bl	1522c <__assert_fail@plt+0x4218>
   14b78:	cmp	r0, #0
   14b7c:	popne	{fp, pc}
   14b80:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14b84:	push	{fp, lr}
   14b88:	mov	fp, sp
   14b8c:	mov	r2, r1
   14b90:	mov	r1, r0
   14b94:	mov	r0, #0
   14b98:	bl	1522c <__assert_fail@plt+0x4218>
   14b9c:	cmp	r0, #0
   14ba0:	popne	{fp, pc}
   14ba4:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ba8:	push	{fp, lr}
   14bac:	mov	fp, sp
   14bb0:	mov	r2, r1
   14bb4:	mov	r1, r0
   14bb8:	clz	r0, r2
   14bbc:	clz	r3, r1
   14bc0:	lsr	r0, r0, #5
   14bc4:	lsr	r3, r3, #5
   14bc8:	orrs	r0, r3, r0
   14bcc:	mov	r0, #0
   14bd0:	movwne	r1, #1
   14bd4:	movwne	r2, #1
   14bd8:	bl	1522c <__assert_fail@plt+0x4218>
   14bdc:	cmp	r0, #0
   14be0:	popne	{fp, pc}
   14be4:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14be8:	push	{r4, r5, r6, sl, fp, lr}
   14bec:	add	fp, sp, #16
   14bf0:	ldr	r5, [r1]
   14bf4:	mov	r4, r1
   14bf8:	mov	r6, r0
   14bfc:	cmp	r0, #0
   14c00:	beq	14c18 <__assert_fail@plt+0x3c04>
   14c04:	mov	r0, #1
   14c08:	add	r0, r0, r5, lsr #1
   14c0c:	adds	r5, r5, r0
   14c10:	bcc	14c20 <__assert_fail@plt+0x3c0c>
   14c14:	b	14c5c <__assert_fail@plt+0x3c48>
   14c18:	cmp	r5, #0
   14c1c:	movweq	r5, #64	; 0x40
   14c20:	mov	r0, r6
   14c24:	mov	r1, r5
   14c28:	mov	r2, #1
   14c2c:	bl	1522c <__assert_fail@plt+0x4218>
   14c30:	cmp	r5, #0
   14c34:	mov	r1, r5
   14c38:	movwne	r1, #1
   14c3c:	cmp	r0, #0
   14c40:	bne	14c54 <__assert_fail@plt+0x3c40>
   14c44:	clz	r2, r6
   14c48:	lsr	r2, r2, #5
   14c4c:	orrs	r1, r2, r1
   14c50:	bne	14c5c <__assert_fail@plt+0x3c48>
   14c54:	str	r5, [r4]
   14c58:	pop	{r4, r5, r6, sl, fp, pc}
   14c5c:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14c60:	push	{r4, r5, r6, r7, fp, lr}
   14c64:	add	fp, sp, #16
   14c68:	ldr	r5, [r1]
   14c6c:	mov	r6, r2
   14c70:	mov	r4, r1
   14c74:	mov	r7, r0
   14c78:	cmp	r0, #0
   14c7c:	beq	14c94 <__assert_fail@plt+0x3c80>
   14c80:	mov	r0, #1
   14c84:	add	r0, r0, r5, lsr #1
   14c88:	adds	r5, r5, r0
   14c8c:	bcc	14cac <__assert_fail@plt+0x3c98>
   14c90:	b	14ce0 <__assert_fail@plt+0x3ccc>
   14c94:	cmp	r5, #0
   14c98:	bne	14cac <__assert_fail@plt+0x3c98>
   14c9c:	mov	r0, #64	; 0x40
   14ca0:	cmp	r6, #64	; 0x40
   14ca4:	udiv	r5, r0, r6
   14ca8:	addhi	r5, r5, #1
   14cac:	mov	r0, r7
   14cb0:	mov	r1, r5
   14cb4:	mov	r2, r6
   14cb8:	bl	1522c <__assert_fail@plt+0x4218>
   14cbc:	cmp	r0, #0
   14cc0:	bne	14cd8 <__assert_fail@plt+0x3cc4>
   14cc4:	cmp	r7, #0
   14cc8:	beq	14ce0 <__assert_fail@plt+0x3ccc>
   14ccc:	cmp	r6, #0
   14cd0:	cmpne	r5, #0
   14cd4:	bne	14ce0 <__assert_fail@plt+0x3ccc>
   14cd8:	str	r5, [r4]
   14cdc:	pop	{r4, r5, r6, r7, fp, pc}
   14ce0:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ce4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ce8:	add	fp, sp, #24
   14cec:	mov	r8, r1
   14cf0:	ldr	r1, [r1]
   14cf4:	mov	r5, r0
   14cf8:	add	r0, r1, r1, asr #1
   14cfc:	cmp	r0, r1
   14d00:	mvnvs	r0, #-2147483648	; 0x80000000
   14d04:	cmp	r0, r3
   14d08:	mov	r7, r0
   14d0c:	movgt	r7, r3
   14d10:	cmn	r3, #1
   14d14:	movle	r7, r0
   14d18:	ldr	r0, [fp, #8]
   14d1c:	cmn	r0, #1
   14d20:	ble	14d48 <__assert_fail@plt+0x3d34>
   14d24:	cmp	r0, #0
   14d28:	beq	14d9c <__assert_fail@plt+0x3d88>
   14d2c:	cmn	r7, #1
   14d30:	ble	14d70 <__assert_fail@plt+0x3d5c>
   14d34:	mvn	r4, #-2147483648	; 0x80000000
   14d38:	udiv	r6, r4, r0
   14d3c:	cmp	r6, r7
   14d40:	bge	14d9c <__assert_fail@plt+0x3d88>
   14d44:	b	14dac <__assert_fail@plt+0x3d98>
   14d48:	cmn	r7, #1
   14d4c:	ble	14d8c <__assert_fail@plt+0x3d78>
   14d50:	cmn	r0, #1
   14d54:	beq	14d9c <__assert_fail@plt+0x3d88>
   14d58:	mov	r6, #-2147483648	; 0x80000000
   14d5c:	mvn	r4, #-2147483648	; 0x80000000
   14d60:	sdiv	r6, r6, r0
   14d64:	cmp	r6, r7
   14d68:	bge	14d9c <__assert_fail@plt+0x3d88>
   14d6c:	b	14dac <__assert_fail@plt+0x3d98>
   14d70:	beq	14d9c <__assert_fail@plt+0x3d88>
   14d74:	mov	r6, #-2147483648	; 0x80000000
   14d78:	mvn	r4, #-2147483648	; 0x80000000
   14d7c:	sdiv	r6, r6, r7
   14d80:	cmp	r6, r0
   14d84:	bge	14d9c <__assert_fail@plt+0x3d88>
   14d88:	b	14dac <__assert_fail@plt+0x3d98>
   14d8c:	mvn	r4, #-2147483648	; 0x80000000
   14d90:	sdiv	r6, r4, r0
   14d94:	cmp	r7, r6
   14d98:	blt	14dac <__assert_fail@plt+0x3d98>
   14d9c:	mul	r6, r7, r0
   14da0:	mov	r4, #64	; 0x40
   14da4:	cmp	r6, #63	; 0x3f
   14da8:	bgt	14db4 <__assert_fail@plt+0x3da0>
   14dac:	sdiv	r7, r4, r0
   14db0:	mul	r6, r7, r0
   14db4:	cmp	r5, #0
   14db8:	moveq	r4, #0
   14dbc:	streq	r4, [r8]
   14dc0:	sub	r4, r7, r1
   14dc4:	cmp	r4, r2
   14dc8:	bge	14e74 <__assert_fail@plt+0x3e60>
   14dcc:	add	r7, r1, r2
   14dd0:	mov	r6, #0
   14dd4:	mov	r2, #0
   14dd8:	cmp	r7, r3
   14ddc:	movwgt	r6, #1
   14de0:	cmn	r3, #1
   14de4:	movwgt	r2, #1
   14de8:	cmp	r7, r1
   14dec:	bvs	14ea8 <__assert_fail@plt+0x3e94>
   14df0:	ands	r1, r2, r6
   14df4:	bne	14ea8 <__assert_fail@plt+0x3e94>
   14df8:	cmn	r0, #1
   14dfc:	ble	14e24 <__assert_fail@plt+0x3e10>
   14e00:	cmp	r0, #0
   14e04:	beq	14e70 <__assert_fail@plt+0x3e5c>
   14e08:	cmn	r7, #1
   14e0c:	ble	14e48 <__assert_fail@plt+0x3e34>
   14e10:	mvn	r1, #-2147483648	; 0x80000000
   14e14:	udiv	r1, r1, r0
   14e18:	cmp	r1, r7
   14e1c:	bge	14e70 <__assert_fail@plt+0x3e5c>
   14e20:	b	14ea8 <__assert_fail@plt+0x3e94>
   14e24:	cmn	r7, #1
   14e28:	ble	14e60 <__assert_fail@plt+0x3e4c>
   14e2c:	cmn	r0, #1
   14e30:	beq	14e70 <__assert_fail@plt+0x3e5c>
   14e34:	mov	r1, #-2147483648	; 0x80000000
   14e38:	sdiv	r1, r1, r0
   14e3c:	cmp	r1, r7
   14e40:	bge	14e70 <__assert_fail@plt+0x3e5c>
   14e44:	b	14ea8 <__assert_fail@plt+0x3e94>
   14e48:	beq	14e70 <__assert_fail@plt+0x3e5c>
   14e4c:	mov	r1, #-2147483648	; 0x80000000
   14e50:	sdiv	r1, r1, r7
   14e54:	cmp	r1, r0
   14e58:	bge	14e70 <__assert_fail@plt+0x3e5c>
   14e5c:	b	14ea8 <__assert_fail@plt+0x3e94>
   14e60:	mvn	r1, #-2147483648	; 0x80000000
   14e64:	sdiv	r1, r1, r0
   14e68:	cmp	r7, r1
   14e6c:	blt	14ea8 <__assert_fail@plt+0x3e94>
   14e70:	mul	r6, r7, r0
   14e74:	mov	r0, r5
   14e78:	mov	r1, r6
   14e7c:	bl	150b8 <__assert_fail@plt+0x40a4>
   14e80:	cmp	r6, #0
   14e84:	movwne	r6, #1
   14e88:	cmp	r0, #0
   14e8c:	bne	14ea0 <__assert_fail@plt+0x3e8c>
   14e90:	clz	r1, r5
   14e94:	lsr	r1, r1, #5
   14e98:	orrs	r1, r1, r6
   14e9c:	bne	14ea8 <__assert_fail@plt+0x3e94>
   14ea0:	str	r7, [r8]
   14ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ea8:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14eac:	push	{fp, lr}
   14eb0:	mov	fp, sp
   14eb4:	mov	r1, #1
   14eb8:	bl	15034 <__assert_fail@plt+0x4020>
   14ebc:	cmp	r0, #0
   14ec0:	popne	{fp, pc}
   14ec4:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ec8:	push	{fp, lr}
   14ecc:	mov	fp, sp
   14ed0:	bl	15034 <__assert_fail@plt+0x4020>
   14ed4:	cmp	r0, #0
   14ed8:	popne	{fp, pc}
   14edc:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ee0:	push	{fp, lr}
   14ee4:	mov	fp, sp
   14ee8:	mov	r1, #1
   14eec:	bl	15034 <__assert_fail@plt+0x4020>
   14ef0:	cmp	r0, #0
   14ef4:	popne	{fp, pc}
   14ef8:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14efc:	push	{fp, lr}
   14f00:	mov	fp, sp
   14f04:	bl	15034 <__assert_fail@plt+0x4020>
   14f08:	cmp	r0, #0
   14f0c:	popne	{fp, pc}
   14f10:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14f14:	push	{r4, r5, fp, lr}
   14f18:	add	fp, sp, #8
   14f1c:	mov	r5, r0
   14f20:	mov	r0, r1
   14f24:	mov	r4, r1
   14f28:	bl	15088 <__assert_fail@plt+0x4074>
   14f2c:	cmp	r0, #0
   14f30:	beq	14f44 <__assert_fail@plt+0x3f30>
   14f34:	mov	r1, r5
   14f38:	mov	r2, r4
   14f3c:	pop	{r4, r5, fp, lr}
   14f40:	b	10e28 <memcpy@plt>
   14f44:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14f48:	push	{r4, r5, fp, lr}
   14f4c:	add	fp, sp, #8
   14f50:	mov	r5, r0
   14f54:	mov	r0, r1
   14f58:	mov	r4, r1
   14f5c:	bl	15088 <__assert_fail@plt+0x4074>
   14f60:	cmp	r0, #0
   14f64:	beq	14f78 <__assert_fail@plt+0x3f64>
   14f68:	mov	r1, r5
   14f6c:	mov	r2, r4
   14f70:	pop	{r4, r5, fp, lr}
   14f74:	b	10e28 <memcpy@plt>
   14f78:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14f7c:	push	{r4, r5, fp, lr}
   14f80:	add	fp, sp, #8
   14f84:	mov	r5, r0
   14f88:	add	r0, r1, #1
   14f8c:	mov	r4, r1
   14f90:	bl	15088 <__assert_fail@plt+0x4074>
   14f94:	cmp	r0, #0
   14f98:	beq	14fb4 <__assert_fail@plt+0x3fa0>
   14f9c:	mov	r1, #0
   14fa0:	mov	r2, r4
   14fa4:	strb	r1, [r0, r4]
   14fa8:	mov	r1, r5
   14fac:	pop	{r4, r5, fp, lr}
   14fb0:	b	10e28 <memcpy@plt>
   14fb4:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14fb8:	push	{r4, r5, fp, lr}
   14fbc:	add	fp, sp, #8
   14fc0:	mov	r4, r0
   14fc4:	bl	10f24 <strlen@plt>
   14fc8:	add	r5, r0, #1
   14fcc:	mov	r0, r5
   14fd0:	bl	15088 <__assert_fail@plt+0x4074>
   14fd4:	cmp	r0, #0
   14fd8:	beq	14fec <__assert_fail@plt+0x3fd8>
   14fdc:	mov	r1, r4
   14fe0:	mov	r2, r5
   14fe4:	pop	{r4, r5, fp, lr}
   14fe8:	b	10e28 <memcpy@plt>
   14fec:	bl	14ff0 <__assert_fail@plt+0x3fdc>
   14ff0:	push	{fp, lr}
   14ff4:	mov	fp, sp
   14ff8:	movw	r0, #28908	; 0x70ec
   14ffc:	movw	r1, #25012	; 0x61b4
   15000:	mov	r2, #5
   15004:	movt	r0, #2
   15008:	movt	r1, #1
   1500c:	ldr	r4, [r0]
   15010:	mov	r0, #0
   15014:	bl	10e4c <dcgettext@plt>
   15018:	movw	r2, #23285	; 0x5af5
   1501c:	mov	r3, r0
   15020:	mov	r0, r4
   15024:	mov	r1, #0
   15028:	movt	r2, #1
   1502c:	bl	10eb8 <error@plt>
   15030:	bl	10ffc <abort@plt>
   15034:	clz	r2, r1
   15038:	clz	r3, r0
   1503c:	lsr	r2, r2, #5
   15040:	lsr	r3, r3, #5
   15044:	orrs	r2, r3, r2
   15048:	movwne	r1, #1
   1504c:	movwne	r0, #1
   15050:	cmp	r1, #0
   15054:	beq	15084 <__assert_fail@plt+0x4070>
   15058:	mvn	r2, #-2147483648	; 0x80000000
   1505c:	udiv	r2, r2, r1
   15060:	cmp	r2, r0
   15064:	bcs	15084 <__assert_fail@plt+0x4070>
   15068:	push	{fp, lr}
   1506c:	mov	fp, sp
   15070:	bl	10f30 <__errno_location@plt>
   15074:	mov	r1, #12
   15078:	str	r1, [r0]
   1507c:	mov	r0, #0
   15080:	pop	{fp, pc}
   15084:	b	10dc8 <calloc@plt>
   15088:	cmp	r0, #0
   1508c:	movweq	r0, #1
   15090:	cmn	r0, #1
   15094:	ble	1509c <__assert_fail@plt+0x4088>
   15098:	b	10ec4 <malloc@plt>
   1509c:	push	{fp, lr}
   150a0:	mov	fp, sp
   150a4:	bl	10f30 <__errno_location@plt>
   150a8:	mov	r1, #12
   150ac:	str	r1, [r0]
   150b0:	mov	r0, #0
   150b4:	pop	{fp, pc}
   150b8:	push	{fp, lr}
   150bc:	mov	fp, sp
   150c0:	cmp	r0, #0
   150c4:	beq	150e0 <__assert_fail@plt+0x40cc>
   150c8:	cmp	r1, #0
   150cc:	beq	150ec <__assert_fail@plt+0x40d8>
   150d0:	cmn	r1, #1
   150d4:	ble	150f8 <__assert_fail@plt+0x40e4>
   150d8:	pop	{fp, lr}
   150dc:	b	10e58 <realloc@plt>
   150e0:	mov	r0, r1
   150e4:	pop	{fp, lr}
   150e8:	b	15088 <__assert_fail@plt+0x4074>
   150ec:	bl	1258c <__assert_fail@plt+0x1578>
   150f0:	mov	r0, #0
   150f4:	pop	{fp, pc}
   150f8:	bl	10f30 <__errno_location@plt>
   150fc:	mov	r1, #12
   15100:	str	r1, [r0]
   15104:	mov	r0, #0
   15108:	pop	{fp, pc}
   1510c:	push	{r4, r5, r6, sl, fp, lr}
   15110:	add	fp, sp, #16
   15114:	mov	r4, r0
   15118:	bl	10ea0 <__fpending@plt>
   1511c:	ldr	r6, [r4]
   15120:	mov	r5, r0
   15124:	mov	r0, r4
   15128:	bl	12494 <__assert_fail@plt+0x1480>
   1512c:	tst	r6, #32
   15130:	bne	15168 <__assert_fail@plt+0x4154>
   15134:	cmp	r0, #0
   15138:	mov	r4, r0
   1513c:	mvnne	r4, #0
   15140:	cmp	r5, #0
   15144:	bne	15174 <__assert_fail@plt+0x4160>
   15148:	cmp	r0, #0
   1514c:	beq	15174 <__assert_fail@plt+0x4160>
   15150:	bl	10f30 <__errno_location@plt>
   15154:	ldr	r0, [r0]
   15158:	subs	r4, r0, #9
   1515c:	mvnne	r4, #0
   15160:	mov	r0, r4
   15164:	pop	{r4, r5, r6, sl, fp, pc}
   15168:	mvn	r4, #0
   1516c:	cmp	r0, #0
   15170:	beq	1517c <__assert_fail@plt+0x4168>
   15174:	mov	r0, r4
   15178:	pop	{r4, r5, r6, sl, fp, pc}
   1517c:	bl	10f30 <__errno_location@plt>
   15180:	mov	r1, #0
   15184:	str	r1, [r0]
   15188:	mov	r0, r4
   1518c:	pop	{r4, r5, r6, sl, fp, pc}
   15190:	push	{fp, lr}
   15194:	mov	fp, sp
   15198:	mov	r0, #14
   1519c:	bl	10fc0 <nl_langinfo@plt>
   151a0:	movw	r1, #22881	; 0x5961
   151a4:	cmp	r0, #0
   151a8:	movt	r1, #1
   151ac:	movne	r1, r0
   151b0:	movw	r0, #25029	; 0x61c5
   151b4:	ldrb	r2, [r1]
   151b8:	movt	r0, #1
   151bc:	cmp	r2, #0
   151c0:	movne	r0, r1
   151c4:	pop	{fp, pc}
   151c8:	push	{r4, r5, r6, r7, fp, lr}
   151cc:	add	fp, sp, #16
   151d0:	sub	sp, sp, #8
   151d4:	cmp	r0, #0
   151d8:	add	r5, sp, #4
   151dc:	mov	r7, r2
   151e0:	mov	r4, r1
   151e4:	movne	r5, r0
   151e8:	mov	r0, r5
   151ec:	bl	10eac <mbrtowc@plt>
   151f0:	mov	r6, r0
   151f4:	cmp	r7, #0
   151f8:	beq	15220 <__assert_fail@plt+0x420c>
   151fc:	cmn	r6, #2
   15200:	bcc	15220 <__assert_fail@plt+0x420c>
   15204:	mov	r0, #0
   15208:	bl	15268 <__assert_fail@plt+0x4254>
   1520c:	cmp	r0, #0
   15210:	bne	15220 <__assert_fail@plt+0x420c>
   15214:	ldrb	r0, [r4]
   15218:	mov	r6, #1
   1521c:	str	r0, [r5]
   15220:	mov	r0, r6
   15224:	sub	sp, fp, #16
   15228:	pop	{r4, r5, r6, r7, fp, pc}
   1522c:	cmp	r2, #0
   15230:	beq	15260 <__assert_fail@plt+0x424c>
   15234:	mvn	r3, #0
   15238:	udiv	r3, r3, r2
   1523c:	cmp	r3, r1
   15240:	bcs	15260 <__assert_fail@plt+0x424c>
   15244:	push	{fp, lr}
   15248:	mov	fp, sp
   1524c:	bl	10f30 <__errno_location@plt>
   15250:	mov	r1, #12
   15254:	str	r1, [r0]
   15258:	mov	r0, #0
   1525c:	pop	{fp, pc}
   15260:	mul	r1, r2, r1
   15264:	b	150b8 <__assert_fail@plt+0x40a4>
   15268:	push	{r4, sl, fp, lr}
   1526c:	add	fp, sp, #8
   15270:	sub	sp, sp, #264	; 0x108
   15274:	add	r1, sp, #7
   15278:	movw	r2, #257	; 0x101
   1527c:	bl	152d4 <__assert_fail@plt+0x42c0>
   15280:	mov	r4, #0
   15284:	cmp	r0, #0
   15288:	bne	152c8 <__assert_fail@plt+0x42b4>
   1528c:	movw	r1, #25035	; 0x61cb
   15290:	add	r0, sp, #7
   15294:	mov	r2, #2
   15298:	movt	r1, #1
   1529c:	bl	10f18 <bcmp@plt>
   152a0:	cmp	r0, #0
   152a4:	beq	152c8 <__assert_fail@plt+0x42b4>
   152a8:	movw	r1, #25037	; 0x61cd
   152ac:	add	r0, sp, #7
   152b0:	mov	r2, #6
   152b4:	movt	r1, #1
   152b8:	bl	10f18 <bcmp@plt>
   152bc:	cmp	r0, #0
   152c0:	mov	r4, r0
   152c4:	movwne	r4, #1
   152c8:	mov	r0, r4
   152cc:	sub	sp, fp, #8
   152d0:	pop	{r4, sl, fp, pc}
   152d4:	push	{r4, r5, r6, r7, fp, lr}
   152d8:	add	fp, sp, #16
   152dc:	mov	r4, r1
   152e0:	mov	r1, #0
   152e4:	mov	r6, r2
   152e8:	bl	10fa8 <setlocale@plt>
   152ec:	cmp	r0, #0
   152f0:	beq	15320 <__assert_fail@plt+0x430c>
   152f4:	mov	r7, r0
   152f8:	bl	10f24 <strlen@plt>
   152fc:	cmp	r0, r6
   15300:	bcs	1533c <__assert_fail@plt+0x4328>
   15304:	add	r2, r0, #1
   15308:	mov	r0, r4
   1530c:	mov	r1, r7
   15310:	bl	10e28 <memcpy@plt>
   15314:	mov	r5, #0
   15318:	mov	r0, r5
   1531c:	pop	{r4, r5, r6, r7, fp, pc}
   15320:	mov	r5, #22
   15324:	cmp	r6, #0
   15328:	beq	15364 <__assert_fail@plt+0x4350>
   1532c:	mov	r0, #0
   15330:	strb	r0, [r4]
   15334:	mov	r0, r5
   15338:	pop	{r4, r5, r6, r7, fp, pc}
   1533c:	mov	r5, #34	; 0x22
   15340:	cmp	r6, #0
   15344:	beq	15364 <__assert_fail@plt+0x4350>
   15348:	sub	r6, r6, #1
   1534c:	mov	r0, r4
   15350:	mov	r1, r7
   15354:	mov	r2, r6
   15358:	bl	10e28 <memcpy@plt>
   1535c:	mov	r0, #0
   15360:	strb	r0, [r4, r6]
   15364:	mov	r0, r5
   15368:	pop	{r4, r5, r6, r7, fp, pc}
   1536c:	mov	r1, #0
   15370:	b	10fa8 <setlocale@plt>
   15374:	cmp	r3, #0
   15378:	cmpeq	r2, #0
   1537c:	bne	15394 <__assert_fail@plt+0x4380>
   15380:	cmp	r1, #0
   15384:	cmpeq	r0, #0
   15388:	mvnne	r1, #0
   1538c:	mvnne	r0, #0
   15390:	b	153b0 <__assert_fail@plt+0x439c>
   15394:	sub	sp, sp, #8
   15398:	push	{sp, lr}
   1539c:	bl	153c0 <__assert_fail@plt+0x43ac>
   153a0:	ldr	lr, [sp, #4]
   153a4:	add	sp, sp, #8
   153a8:	pop	{r2, r3}
   153ac:	bx	lr
   153b0:	push	{r1, lr}
   153b4:	mov	r0, #8
   153b8:	bl	10de0 <raise@plt>
   153bc:	pop	{r1, pc}
   153c0:	cmp	r1, r3
   153c4:	cmpeq	r0, r2
   153c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153cc:	mov	r4, r0
   153d0:	movcc	r0, #0
   153d4:	mov	r5, r1
   153d8:	ldr	lr, [sp, #36]	; 0x24
   153dc:	movcc	r1, r0
   153e0:	bcc	154dc <__assert_fail@plt+0x44c8>
   153e4:	cmp	r3, #0
   153e8:	clzeq	ip, r2
   153ec:	clzne	ip, r3
   153f0:	addeq	ip, ip, #32
   153f4:	cmp	r5, #0
   153f8:	clzeq	r1, r4
   153fc:	addeq	r1, r1, #32
   15400:	clzne	r1, r5
   15404:	sub	ip, ip, r1
   15408:	sub	sl, ip, #32
   1540c:	lsl	r9, r3, ip
   15410:	rsb	fp, ip, #32
   15414:	orr	r9, r9, r2, lsl sl
   15418:	orr	r9, r9, r2, lsr fp
   1541c:	lsl	r8, r2, ip
   15420:	cmp	r5, r9
   15424:	cmpeq	r4, r8
   15428:	movcc	r0, #0
   1542c:	movcc	r1, r0
   15430:	bcc	1544c <__assert_fail@plt+0x4438>
   15434:	mov	r0, #1
   15438:	subs	r4, r4, r8
   1543c:	lsl	r1, r0, sl
   15440:	orr	r1, r1, r0, lsr fp
   15444:	lsl	r0, r0, ip
   15448:	sbc	r5, r5, r9
   1544c:	cmp	ip, #0
   15450:	beq	154dc <__assert_fail@plt+0x44c8>
   15454:	lsr	r6, r8, #1
   15458:	orr	r6, r6, r9, lsl #31
   1545c:	lsr	r7, r9, #1
   15460:	mov	r2, ip
   15464:	b	15488 <__assert_fail@plt+0x4474>
   15468:	subs	r3, r4, r6
   1546c:	sbc	r8, r5, r7
   15470:	adds	r3, r3, r3
   15474:	adc	r8, r8, r8
   15478:	adds	r4, r3, #1
   1547c:	adc	r5, r8, #0
   15480:	subs	r2, r2, #1
   15484:	beq	154a4 <__assert_fail@plt+0x4490>
   15488:	cmp	r5, r7
   1548c:	cmpeq	r4, r6
   15490:	bcs	15468 <__assert_fail@plt+0x4454>
   15494:	adds	r4, r4, r4
   15498:	adc	r5, r5, r5
   1549c:	subs	r2, r2, #1
   154a0:	bne	15488 <__assert_fail@plt+0x4474>
   154a4:	lsr	r3, r4, ip
   154a8:	orr	r3, r3, r5, lsl fp
   154ac:	lsr	r2, r5, ip
   154b0:	orr	r3, r3, r5, lsr sl
   154b4:	adds	r0, r0, r4
   154b8:	mov	r4, r3
   154bc:	lsl	r3, r2, ip
   154c0:	orr	r3, r3, r4, lsl sl
   154c4:	lsl	ip, r4, ip
   154c8:	orr	r3, r3, r4, lsr fp
   154cc:	adc	r1, r1, r5
   154d0:	subs	r0, r0, ip
   154d4:	mov	r5, r2
   154d8:	sbc	r1, r1, r3
   154dc:	cmp	lr, #0
   154e0:	strdne	r4, [lr]
   154e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154ec:	mov	r7, r0
   154f0:	ldr	r6, [pc, #72]	; 15540 <__assert_fail@plt+0x452c>
   154f4:	ldr	r5, [pc, #72]	; 15544 <__assert_fail@plt+0x4530>
   154f8:	add	r6, pc, r6
   154fc:	add	r5, pc, r5
   15500:	sub	r6, r6, r5
   15504:	mov	r8, r1
   15508:	mov	r9, r2
   1550c:	bl	10da8 <calloc@plt-0x20>
   15510:	asrs	r6, r6, #2
   15514:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15518:	mov	r4, #0
   1551c:	add	r4, r4, #1
   15520:	ldr	r3, [r5], #4
   15524:	mov	r2, r9
   15528:	mov	r1, r8
   1552c:	mov	r0, r7
   15530:	blx	r3
   15534:	cmp	r6, r4
   15538:	bne	1551c <__assert_fail@plt+0x4508>
   1553c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15540:	andeq	r1, r1, ip, lsl #20
   15544:	andeq	r1, r1, r4, lsl #20
   15548:	bx	lr
   1554c:	ldr	r3, [pc, #12]	; 15560 <__assert_fail@plt+0x454c>
   15550:	mov	r1, #0
   15554:	add	r3, pc, r3
   15558:	ldr	r2, [r3]
   1555c:	b	10f3c <__cxa_atexit@plt>
   15560:	andeq	r1, r1, r0, lsl #23

Disassembly of section .fini:

00015564 <.fini>:
   15564:	push	{r3, lr}
   15568:	pop	{r3, pc}
