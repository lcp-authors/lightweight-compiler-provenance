
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

000110a8 <.init>:
   110a8:	push	{r3, lr}
   110ac:	bl	11404 <__assert_fail@plt+0x48>
   110b0:	pop	{r3, pc}

Disassembly of section .plt:

000110b4 <calloc@plt-0x14>:
   110b4:	push	{lr}		; (str lr, [sp, #-4]!)
   110b8:	ldr	lr, [pc, #4]	; 110c4 <calloc@plt-0x4>
   110bc:	add	lr, pc, lr
   110c0:	ldr	pc, [lr, #8]!
   110c4:	andeq	r5, r1, ip, lsr pc

000110c8 <calloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #3900]!	; 0xf3c

000110d4 <fputs_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #3892]!	; 0xf34

000110e0 <raise@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3884]!	; 0xf2c

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3876]!	; 0xf24

000110f8 <fflush@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3868]!	; 0xf1c

00011104 <utmpxname@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3860]!	; 0xf14

00011110 <free@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3852]!	; 0xf0c

0001111c <gai_strerror@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3844]!	; 0xf04

00011128 <_exit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3836]!	; 0xefc

00011134 <memcpy@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3828]!	; 0xef4

00011140 <mbsinit@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3820]!	; 0xeec

0001114c <time@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3812]!	; 0xee4

00011158 <memcmp@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3804]!	; 0xedc

00011164 <stpcpy@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3796]!	; 0xed4

00011170 <dcgettext@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3788]!	; 0xecc

0001117c <strdup@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3780]!	; 0xec4

00011188 <setutxent@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3772]!	; 0xebc

00011194 <realloc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a0 <textdomain@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3756]!	; 0xeac

000111ac <iswprint@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3748]!	; 0xea4

000111b8 <lseek64@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3740]!	; 0xe9c

000111c4 <__ctype_get_mb_cur_max@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3732]!	; 0xe94

000111d0 <__fpending@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3724]!	; 0xe8c

000111dc <ferror_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3716]!	; 0xe84

000111e8 <mbrtowc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3708]!	; 0xe7c

000111f4 <error@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3700]!	; 0xe74

00011200 <__asprintf_chk@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3692]!	; 0xe6c

0001120c <puts@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3684]!	; 0xe64

00011218 <malloc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3676]!	; 0xe5c

00011224 <__libc_start_main@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3668]!	; 0xe54

00011230 <strftime@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3660]!	; 0xe4c

0001123c <__freading@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3652]!	; 0xe44

00011248 <localtime@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3644]!	; 0xe3c

00011254 <__gmon_start__@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #86016	; 0x15000
   1125c:	ldr	pc, [ip, #3636]!	; 0xe34

00011260 <getopt_long@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #86016	; 0x15000
   11268:	ldr	pc, [ip, #3628]!	; 0xe2c

0001126c <kill@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #86016	; 0x15000
   11274:	ldr	pc, [ip, #3620]!	; 0xe24

00011278 <__ctype_b_loc@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #86016	; 0x15000
   11280:	ldr	pc, [ip, #3612]!	; 0xe1c

00011284 <exit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #86016	; 0x15000
   1128c:	ldr	pc, [ip, #3604]!	; 0xe14

00011290 <ttyname@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #86016	; 0x15000
   11298:	ldr	pc, [ip, #3596]!	; 0xe0c

0001129c <strlen@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #86016	; 0x15000
   112a4:	ldr	pc, [ip, #3588]!	; 0xe04

000112a8 <strchr@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #86016	; 0x15000
   112b0:	ldr	pc, [ip, #3580]!	; 0xdfc

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #86016	; 0x15000
   112bc:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c0 <__sprintf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #86016	; 0x15000
   112c8:	ldr	pc, [ip, #3564]!	; 0xdec

000112cc <__cxa_atexit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #86016	; 0x15000
   112d4:	ldr	pc, [ip, #3556]!	; 0xde4

000112d8 <memset@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #86016	; 0x15000
   112e0:	ldr	pc, [ip, #3548]!	; 0xddc

000112e4 <strncpy@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #86016	; 0x15000
   112ec:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f0 <__printf_chk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #86016	; 0x15000
   112f8:	ldr	pc, [ip, #3532]!	; 0xdcc

000112fc <fileno@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #86016	; 0x15000
   11304:	ldr	pc, [ip, #3524]!	; 0xdc4

00011308 <__fprintf_chk@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3516]!	; 0xdbc

00011314 <fclose@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011320 <fseeko64@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3500]!	; 0xdac

0001132c <endutxent@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3492]!	; 0xda4

00011338 <setlocale@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3484]!	; 0xd9c

00011344 <strrchr@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3476]!	; 0xd94

00011350 <nl_langinfo@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3468]!	; 0xd8c

0001135c <freeaddrinfo@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3460]!	; 0xd84

00011368 <getaddrinfo@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3452]!	; 0xd7c

00011374 <bindtextdomain@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3444]!	; 0xd74

00011380 <__xstat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3436]!	; 0xd6c

0001138c <fputs@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3428]!	; 0xd64

00011398 <strncmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3420]!	; 0xd5c

000113a4 <abort@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3412]!	; 0xd54

000113b0 <getutxent@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3404]!	; 0xd4c

000113bc <__assert_fail@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3396]!	; 0xd44

Disassembly of section .text:

000113c8 <.text>:
   113c8:	mov	fp, #0
   113cc:	mov	lr, #0
   113d0:	pop	{r1}		; (ldr r1, [sp], #4)
   113d4:	mov	r2, sp
   113d8:	push	{r2}		; (str r2, [sp, #-4]!)
   113dc:	push	{r0}		; (str r0, [sp, #-4]!)
   113e0:	ldr	ip, [pc, #16]	; 113f8 <__assert_fail@plt+0x3c>
   113e4:	push	{ip}		; (str ip, [sp, #-4]!)
   113e8:	ldr	r0, [pc, #12]	; 113fc <__assert_fail@plt+0x40>
   113ec:	ldr	r3, [pc, #12]	; 11400 <__assert_fail@plt+0x44>
   113f0:	bl	11224 <__libc_start_main@plt>
   113f4:	bl	113a4 <abort@plt>
   113f8:	andeq	r5, r1, ip, ror #21
   113fc:	muleq	r1, r8, r7
   11400:	andeq	r5, r1, ip, lsl #21
   11404:	ldr	r3, [pc, #20]	; 11420 <__assert_fail@plt+0x64>
   11408:	ldr	r2, [pc, #20]	; 11424 <__assert_fail@plt+0x68>
   1140c:	add	r3, pc, r3
   11410:	ldr	r2, [r3, r2]
   11414:	cmp	r2, #0
   11418:	bxeq	lr
   1141c:	b	11254 <__gmon_start__@plt>
   11420:	andeq	r5, r1, ip, ror #23
   11424:	andeq	r0, r0, ip, lsl #2
   11428:	ldr	r0, [pc, #24]	; 11448 <__assert_fail@plt+0x8c>
   1142c:	ldr	r3, [pc, #24]	; 1144c <__assert_fail@plt+0x90>
   11430:	cmp	r3, r0
   11434:	bxeq	lr
   11438:	ldr	r3, [pc, #16]	; 11450 <__assert_fail@plt+0x94>
   1143c:	cmp	r3, #0
   11440:	bxeq	lr
   11444:	bx	r3
   11448:	andeq	r7, r2, r8, ror #2
   1144c:	andeq	r7, r2, r8, ror #2
   11450:	andeq	r0, r0, r0
   11454:	ldr	r0, [pc, #36]	; 11480 <__assert_fail@plt+0xc4>
   11458:	ldr	r1, [pc, #36]	; 11484 <__assert_fail@plt+0xc8>
   1145c:	sub	r1, r1, r0
   11460:	asr	r1, r1, #2
   11464:	add	r1, r1, r1, lsr #31
   11468:	asrs	r1, r1, #1
   1146c:	bxeq	lr
   11470:	ldr	r3, [pc, #16]	; 11488 <__assert_fail@plt+0xcc>
   11474:	cmp	r3, #0
   11478:	bxeq	lr
   1147c:	bx	r3
   11480:	andeq	r7, r2, r8, ror #2
   11484:	andeq	r7, r2, r8, ror #2
   11488:	andeq	r0, r0, r0
   1148c:	push	{r4, lr}
   11490:	ldr	r4, [pc, #24]	; 114b0 <__assert_fail@plt+0xf4>
   11494:	ldrb	r3, [r4]
   11498:	cmp	r3, #0
   1149c:	popne	{r4, pc}
   114a0:	bl	11428 <__assert_fail@plt+0x6c>
   114a4:	mov	r3, #1
   114a8:	strb	r3, [r4]
   114ac:	pop	{r4, pc}
   114b0:	andeq	r7, r2, r0, lsl #3
   114b4:	b	11454 <__assert_fail@plt+0x98>
   114b8:	push	{fp, lr}
   114bc:	mov	fp, sp
   114c0:	sub	sp, sp, #56	; 0x38
   114c4:	mov	r8, r0
   114c8:	cmp	r0, #0
   114cc:	bne	11758 <__assert_fail@plt+0x39c>
   114d0:	movw	r1, #23371	; 0x5b4b
   114d4:	mov	r0, #0
   114d8:	mov	r2, #5
   114dc:	movt	r1, #1
   114e0:	bl	11170 <dcgettext@plt>
   114e4:	mov	r1, r0
   114e8:	movw	r0, #29188	; 0x7204
   114ec:	movt	r0, #2
   114f0:	ldr	r2, [r0]
   114f4:	mov	r0, #1
   114f8:	bl	112f0 <__printf_chk@plt>
   114fc:	movw	r1, #23415	; 0x5b77
   11500:	mov	r0, #0
   11504:	mov	r2, #5
   11508:	movt	r1, #1
   1150c:	bl	11170 <dcgettext@plt>
   11510:	movw	r9, #29052	; 0x717c
   11514:	movt	r9, #2
   11518:	ldr	r1, [r9]
   1151c:	bl	110d4 <fputs_unlocked@plt>
   11520:	movw	r1, #23475	; 0x5bb3
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	11170 <dcgettext@plt>
   11534:	ldr	r1, [r9]
   11538:	bl	110d4 <fputs_unlocked@plt>
   1153c:	movw	r1, #23670	; 0x5c76
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	11170 <dcgettext@plt>
   11550:	ldr	r1, [r9]
   11554:	bl	110d4 <fputs_unlocked@plt>
   11558:	movw	r1, #23720	; 0x5ca8
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #1
   11568:	bl	11170 <dcgettext@plt>
   1156c:	ldr	r1, [r9]
   11570:	bl	110d4 <fputs_unlocked@plt>
   11574:	movw	r1, #23907	; 0x5d63
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	11170 <dcgettext@plt>
   11588:	ldr	r1, [r9]
   1158c:	bl	110d4 <fputs_unlocked@plt>
   11590:	movw	r1, #24130	; 0x5e42
   11594:	mov	r0, #0
   11598:	mov	r2, #5
   1159c:	movt	r1, #1
   115a0:	bl	11170 <dcgettext@plt>
   115a4:	ldr	r1, [r9]
   115a8:	bl	110d4 <fputs_unlocked@plt>
   115ac:	movw	r1, #24293	; 0x5ee5
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	movt	r1, #1
   115bc:	bl	11170 <dcgettext@plt>
   115c0:	ldr	r1, [r9]
   115c4:	bl	110d4 <fputs_unlocked@plt>
   115c8:	movw	r1, #24338	; 0x5f12
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	movt	r1, #1
   115d8:	bl	11170 <dcgettext@plt>
   115dc:	ldr	r1, [r9]
   115e0:	bl	110d4 <fputs_unlocked@plt>
   115e4:	movw	r1, #24392	; 0x5f48
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	movt	r1, #1
   115f4:	bl	11170 <dcgettext@plt>
   115f8:	movw	r2, #24517	; 0x5fc5
   115fc:	movw	r3, #24531	; 0x5fd3
   11600:	mov	r1, r0
   11604:	mov	r0, #1
   11608:	movt	r2, #1
   1160c:	movt	r3, #1
   11610:	bl	112f0 <__printf_chk@plt>
   11614:	movw	r0, #25728	; 0x6480
   11618:	mov	r6, sp
   1161c:	movt	r0, #1
   11620:	mov	r1, r6
   11624:	ldm	r0!, {r2, r3, r4, r5}
   11628:	stmia	r1!, {r2, r3, r4, r5}
   1162c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11630:	stmia	r1!, {r2, r3, r4, r5, r7}
   11634:	ldm	r0, {r2, r3, r4, r5, r7}
   11638:	stm	r1, {r2, r3, r4, r5, r7}
   1163c:	movw	r1, #24693	; 0x6075
   11640:	movw	r5, #24545	; 0x5fe1
   11644:	movt	r1, #1
   11648:	movt	r5, #1
   1164c:	mov	r0, r5
   11650:	bl	110ec <strcmp@plt>
   11654:	cmp	r0, #0
   11658:	ldrne	r1, [r6, #8]!
   1165c:	cmpne	r1, #0
   11660:	bne	1164c <__assert_fail@plt+0x290>
   11664:	ldr	r6, [r6, #4]
   11668:	movw	r1, #24788	; 0x60d4
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	11170 <dcgettext@plt>
   1167c:	movw	r2, #24588	; 0x600c
   11680:	movw	r3, #24811	; 0x60eb
   11684:	mov	r1, r0
   11688:	mov	r0, #1
   1168c:	movt	r2, #1
   11690:	movt	r3, #1
   11694:	bl	112f0 <__printf_chk@plt>
   11698:	cmp	r6, #0
   1169c:	mov	r0, #5
   116a0:	mov	r1, #0
   116a4:	moveq	r6, r5
   116a8:	bl	11338 <setlocale@plt>
   116ac:	cmp	r0, #0
   116b0:	beq	116e8 <__assert_fail@plt+0x32c>
   116b4:	movw	r1, #24851	; 0x6113
   116b8:	mov	r2, #3
   116bc:	movt	r1, #1
   116c0:	bl	11398 <strncmp@plt>
   116c4:	cmp	r0, #0
   116c8:	beq	116e8 <__assert_fail@plt+0x32c>
   116cc:	movw	r1, #24855	; 0x6117
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11170 <dcgettext@plt>
   116e0:	ldr	r1, [r9]
   116e4:	bl	110d4 <fputs_unlocked@plt>
   116e8:	movw	r1, #24926	; 0x615e
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11170 <dcgettext@plt>
   116fc:	movw	r2, #24811	; 0x60eb
   11700:	mov	r1, r0
   11704:	mov	r0, #1
   11708:	mov	r3, r5
   1170c:	movt	r2, #1
   11710:	bl	112f0 <__printf_chk@plt>
   11714:	movw	r1, #24953	; 0x6179
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	11170 <dcgettext@plt>
   11728:	movw	r3, #25003	; 0x61ab
   1172c:	mov	r1, r0
   11730:	movw	r0, #24721	; 0x6091
   11734:	cmp	r6, r5
   11738:	mov	r2, r6
   1173c:	movt	r0, #1
   11740:	movt	r3, #1
   11744:	moveq	r3, r0
   11748:	mov	r0, #1
   1174c:	bl	112f0 <__printf_chk@plt>
   11750:	mov	r0, r8
   11754:	bl	11284 <exit@plt>
   11758:	movw	r0, #29048	; 0x7178
   1175c:	movw	r1, #23332	; 0x5b24
   11760:	mov	r2, #5
   11764:	movt	r0, #2
   11768:	movt	r1, #1
   1176c:	ldr	r5, [r0]
   11770:	mov	r0, #0
   11774:	bl	11170 <dcgettext@plt>
   11778:	mov	r2, r0
   1177c:	movw	r0, #29188	; 0x7204
   11780:	mov	r1, #1
   11784:	movt	r0, #2
   11788:	ldr	r3, [r0]
   1178c:	mov	r0, r5
   11790:	bl	11308 <__fprintf_chk@plt>
   11794:	b	11750 <__assert_fail@plt+0x394>
   11798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1179c:	add	fp, sp, #28
   117a0:	sub	sp, sp, #20
   117a4:	mov	r5, r0
   117a8:	ldr	r0, [r1]
   117ac:	mov	r4, r1
   117b0:	bl	12e04 <__assert_fail@plt+0x1a48>
   117b4:	movw	r1, #25003	; 0x61ab
   117b8:	mov	r0, #6
   117bc:	movt	r1, #1
   117c0:	bl	11338 <setlocale@plt>
   117c4:	movw	r6, #24592	; 0x6010
   117c8:	movw	r1, #24549	; 0x5fe5
   117cc:	movt	r6, #1
   117d0:	movt	r1, #1
   117d4:	mov	r0, r6
   117d8:	bl	11374 <bindtextdomain@plt>
   117dc:	mov	r0, r6
   117e0:	bl	111a0 <textdomain@plt>
   117e4:	movw	r0, #11220	; 0x2bd4
   117e8:	movt	r0, #1
   117ec:	bl	15af0 <__assert_fail@plt+0x4734>
   117f0:	movw	r9, #24573	; 0x5ffd
   117f4:	movw	r7, #25440	; 0x6360
   117f8:	mov	r6, #1
   117fc:	mov	r8, #1
   11800:	movt	r9, #1
   11804:	movt	r7, #1
   11808:	b	118dc <__assert_fail@plt+0x520>
   1180c:	cmp	r0, #72	; 0x48
   11810:	bne	11b90 <__assert_fail@plt+0x7d4>
   11814:	movw	r0, #29070	; 0x718e
   11818:	movt	r0, #2
   1181c:	b	118b0 <__assert_fail@plt+0x4f4>
   11820:	cmp	r0, #84	; 0x54
   11824:	bne	118a0 <__assert_fail@plt+0x4e4>
   11828:	movw	r0, #29067	; 0x718b
   1182c:	movt	r0, #2
   11830:	b	118b0 <__assert_fail@plt+0x4f4>
   11834:	movw	r0, #29066	; 0x718a
   11838:	movt	r0, #2
   1183c:	b	11884 <__assert_fail@plt+0x4c8>
   11840:	movw	r0, #29073	; 0x7191
   11844:	movt	r0, #2
   11848:	b	118b0 <__assert_fail@plt+0x4f4>
   1184c:	movw	r0, #29072	; 0x7190
   11850:	movt	r0, #2
   11854:	b	118b0 <__assert_fail@plt+0x4f4>
   11858:	movw	r0, #29071	; 0x718f
   1185c:	movt	r0, #2
   11860:	b	118b0 <__assert_fail@plt+0x4f4>
   11864:	movw	r0, #29063	; 0x7187
   11868:	movt	r0, #2
   1186c:	b	118d8 <__assert_fail@plt+0x51c>
   11870:	movw	r0, #29062	; 0x7186
   11874:	movt	r0, #2
   11878:	b	11884 <__assert_fail@plt+0x4c8>
   1187c:	movw	r0, #29064	; 0x7188
   11880:	movt	r0, #2
   11884:	strb	r6, [r0]
   11888:	movw	r0, #29068	; 0x718c
   1188c:	movt	r0, #2
   11890:	b	118d8 <__assert_fail@plt+0x51c>
   11894:	movw	r0, #29065	; 0x7189
   11898:	movt	r0, #2
   1189c:	b	118d8 <__assert_fail@plt+0x51c>
   118a0:	cmp	r0, #256	; 0x100
   118a4:	bne	11b90 <__assert_fail@plt+0x7d4>
   118a8:	movw	r0, #29074	; 0x7192
   118ac:	movt	r0, #2
   118b0:	mov	r8, sl
   118b4:	b	118d8 <__assert_fail@plt+0x51c>
   118b8:	movw	r0, #29068	; 0x718c
   118bc:	movt	r0, #2
   118c0:	strb	r6, [r0]
   118c4:	movw	r0, #29061	; 0x7185
   118c8:	movt	r0, #2
   118cc:	strb	r6, [r0]
   118d0:	movw	r0, #29069	; 0x718d
   118d4:	movt	r0, #2
   118d8:	strb	r6, [r0]
   118dc:	mov	sl, r8
   118e0:	mov	r8, #0
   118e4:	mov	r0, r5
   118e8:	mov	r1, r4
   118ec:	mov	r2, r9
   118f0:	mov	r3, r7
   118f4:	str	r8, [sp]
   118f8:	bl	11260 <getopt_long@plt>
   118fc:	cmp	r0, #83	; 0x53
   11900:	ble	119e8 <__assert_fail@plt+0x62c>
   11904:	sub	r1, r0, #97	; 0x61
   11908:	cmp	r1, #22
   1190c:	bhi	11820 <__assert_fail@plt+0x464>
   11910:	movw	r0, #29060	; 0x7184
   11914:	add	r2, pc, #4
   11918:	movt	r0, #2
   1191c:	ldr	pc, [r2, r1, lsl #2]
   11920:	andeq	r1, r1, ip, ror r9
   11924:	ldrdeq	r1, [r1], -r8
   11928:	muleq	r1, r0, fp
   1192c:			; <UNDEFINED> instruction: 0x000118b8
   11930:	muleq	r1, r0, fp
   11934:	muleq	r1, r0, fp
   11938:	muleq	r1, r0, fp
   1193c:	muleq	r1, r0, fp
   11940:	muleq	r1, r0, fp
   11944:	muleq	r1, r0, fp
   11948:	muleq	r1, r0, fp
   1194c:	andeq	r1, r1, r0, ror r8
   11950:	andeq	r1, r1, r8, asr r8
   11954:	muleq	r1, r0, fp
   11958:	muleq	r1, r0, fp
   1195c:	andeq	r1, r1, r4, ror #16
   11960:	andeq	r1, r1, ip, asr #16
   11964:	andeq	r1, r1, ip, ror r8
   11968:	andeq	r1, r1, r0, asr #16
   1196c:	muleq	r1, r4, r8
   11970:	andeq	r1, r1, r4, lsr r8
   11974:	muleq	r1, r0, fp
   11978:	andeq	r1, r1, r8, lsr #16
   1197c:	movw	r0, #29061	; 0x7185
   11980:	movt	r0, #2
   11984:	strb	r6, [r0]
   11988:	movw	r0, #29060	; 0x7184
   1198c:	movt	r0, #2
   11990:	strb	r6, [r0]
   11994:	movw	r0, #29062	; 0x7186
   11998:	movt	r0, #2
   1199c:	strb	r6, [r0]
   119a0:	movw	r0, #29063	; 0x7187
   119a4:	movt	r0, #2
   119a8:	strb	r6, [r0]
   119ac:	movw	r0, #29064	; 0x7188
   119b0:	movt	r0, #2
   119b4:	strb	r6, [r0]
   119b8:	movw	r0, #29065	; 0x7189
   119bc:	movt	r0, #2
   119c0:	strb	r6, [r0]
   119c4:	movw	r0, #29066	; 0x718a
   119c8:	movt	r0, #2
   119cc:	strb	r6, [r0]
   119d0:	movw	r0, #29067	; 0x718b
   119d4:	movt	r0, #2
   119d8:	strb	r6, [r0]
   119dc:	movw	r0, #29068	; 0x718c
   119e0:	movt	r0, #2
   119e4:	b	118cc <__assert_fail@plt+0x510>
   119e8:	cmp	r0, #71	; 0x47
   119ec:	bgt	1180c <__assert_fail@plt+0x450>
   119f0:	cmn	r0, #1
   119f4:	bne	11ae0 <__assert_fail@plt+0x724>
   119f8:	tst	sl, #1
   119fc:	beq	11a1c <__assert_fail@plt+0x660>
   11a00:	movw	r0, #29073	; 0x7191
   11a04:	mov	r1, #1
   11a08:	movt	r0, #2
   11a0c:	strb	r1, [r0]
   11a10:	movw	r0, #29066	; 0x718a
   11a14:	movt	r0, #2
   11a18:	strb	r1, [r0]
   11a1c:	movw	r0, #29069	; 0x718d
   11a20:	movt	r0, #2
   11a24:	ldrb	r0, [r0]
   11a28:	cmp	r0, #1
   11a2c:	movweq	r0, #29073	; 0x7191
   11a30:	moveq	r1, #0
   11a34:	movteq	r0, #2
   11a38:	strbeq	r1, [r0]
   11a3c:	mov	r0, #2
   11a40:	bl	12ce4 <__assert_fail@plt+0x1928>
   11a44:	movw	r1, #24649	; 0x6049
   11a48:	movw	r2, #24664	; 0x6058
   11a4c:	cmp	r0, #0
   11a50:	movw	r0, #29076	; 0x7194
   11a54:	movw	r6, #29040	; 0x7170
   11a58:	movt	r1, #1
   11a5c:	movt	r2, #1
   11a60:	movt	r0, #2
   11a64:	movt	r6, #2
   11a68:	movne	r2, r1
   11a6c:	movw	r1, #29080	; 0x7198
   11a70:	str	r2, [r0]
   11a74:	mov	r0, #12
   11a78:	movt	r1, #2
   11a7c:	movwne	r0, #16
   11a80:	str	r0, [r1]
   11a84:	ldr	r0, [r6]
   11a88:	sub	r1, r5, r0
   11a8c:	add	r2, r1, #1
   11a90:	cmp	r2, #2
   11a94:	bcc	11ab8 <__assert_fail@plt+0x6fc>
   11a98:	cmp	r1, #1
   11a9c:	beq	11ac8 <__assert_fail@plt+0x70c>
   11aa0:	cmp	r1, #2
   11aa4:	bne	11b54 <__assert_fail@plt+0x798>
   11aa8:	movw	r0, #29071	; 0x718f
   11aac:	mov	r1, #1
   11ab0:	movt	r0, #2
   11ab4:	strb	r1, [r0]
   11ab8:	movw	r0, #24517	; 0x5fc5
   11abc:	mov	r1, #1
   11ac0:	movt	r0, #1
   11ac4:	b	11ad0 <__assert_fail@plt+0x714>
   11ac8:	ldr	r0, [r4, r0, lsl #2]
   11acc:	mov	r1, #0
   11ad0:	bl	11b98 <__assert_fail@plt+0x7dc>
   11ad4:	mov	r0, #0
   11ad8:	sub	sp, fp, #28
   11adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae0:	cmn	r0, #3
   11ae4:	bne	11b44 <__assert_fail@plt+0x788>
   11ae8:	movw	r0, #28960	; 0x7120
   11aec:	movw	r2, #24635	; 0x603b
   11af0:	movw	r7, #24619	; 0x602b
   11af4:	movw	r6, #24602	; 0x601a
   11af8:	mov	r1, #0
   11afc:	movt	r0, #2
   11b00:	movt	r2, #1
   11b04:	movt	r7, #1
   11b08:	movt	r6, #1
   11b0c:	ldr	r3, [r0]
   11b10:	movw	r0, #29052	; 0x717c
   11b14:	movt	r0, #2
   11b18:	ldr	r0, [r0]
   11b1c:	stm	sp, {r6, r7}
   11b20:	str	r2, [sp, #8]
   11b24:	movw	r2, #24588	; 0x600c
   11b28:	str	r1, [sp, #12]
   11b2c:	movw	r1, #24545	; 0x5fe1
   11b30:	movt	r1, #1
   11b34:	movt	r2, #1
   11b38:	bl	14f20 <__assert_fail@plt+0x3b64>
   11b3c:	mov	r0, #0
   11b40:	bl	11284 <exit@plt>
   11b44:	cmn	r0, #2
   11b48:	bne	11b90 <__assert_fail@plt+0x7d4>
   11b4c:	mov	r0, #0
   11b50:	bl	114b8 <__assert_fail@plt+0xfc>
   11b54:	movw	r1, #24676	; 0x6064
   11b58:	mov	r0, #0
   11b5c:	mov	r2, #5
   11b60:	movt	r1, #1
   11b64:	bl	11170 <dcgettext@plt>
   11b68:	mov	r5, r0
   11b6c:	ldr	r0, [r6]
   11b70:	add	r0, r4, r0, lsl #2
   11b74:	ldr	r0, [r0, #8]
   11b78:	bl	14808 <__assert_fail@plt+0x344c>
   11b7c:	mov	r3, r0
   11b80:	mov	r0, #0
   11b84:	mov	r1, #0
   11b88:	mov	r2, r5
   11b8c:	bl	111f4 <error@plt>
   11b90:	mov	r0, #1
   11b94:	bl	114b8 <__assert_fail@plt+0xfc>
   11b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b9c:	add	fp, sp, #28
   11ba0:	sub	sp, sp, #484	; 0x1e4
   11ba4:	mov	r3, r1
   11ba8:	add	r1, sp, #52	; 0x34
   11bac:	add	r2, sp, #48	; 0x30
   11bb0:	mov	r4, r0
   11bb4:	bl	149a8 <__assert_fail@plt+0x35ec>
   11bb8:	cmp	r0, #0
   11bbc:	bne	1279c <__assert_fail@plt+0x13e0>
   11bc0:	movw	r0, #29072	; 0x7190
   11bc4:	ldr	r4, [sp, #48]	; 0x30
   11bc8:	ldr	r9, [sp, #52]	; 0x34
   11bcc:	movt	r0, #2
   11bd0:	ldrb	r0, [r0]
   11bd4:	cmp	r0, #1
   11bd8:	bne	11c80 <__assert_fail@plt+0x8c4>
   11bdc:	mov	r5, #0
   11be0:	cmp	r9, #0
   11be4:	beq	11c58 <__assert_fail@plt+0x89c>
   11be8:	movw	r7, #25003	; 0x61ab
   11bec:	movw	r8, #25109	; 0x6215
   11bf0:	movw	sl, #25258	; 0x62aa
   11bf4:	movt	r7, #1
   11bf8:	movt	r8, #1
   11bfc:	movt	sl, #1
   11c00:	ldrb	r0, [r4, #44]	; 0x2c
   11c04:	sub	r9, r9, #1
   11c08:	cmp	r0, #0
   11c0c:	beq	11c4c <__assert_fail@plt+0x890>
   11c10:	ldrh	r0, [r4]
   11c14:	cmp	r0, #7
   11c18:	bne	11c4c <__assert_fail@plt+0x890>
   11c1c:	mov	r0, r4
   11c20:	bl	14940 <__assert_fail@plt+0x3584>
   11c24:	mov	r6, r0
   11c28:	mov	r0, #1
   11c2c:	mov	r1, r8
   11c30:	mov	r2, r7
   11c34:	mov	r3, r6
   11c38:	bl	112f0 <__printf_chk@plt>
   11c3c:	mov	r0, r6
   11c40:	bl	12cbc <__assert_fail@plt+0x1900>
   11c44:	add	r5, r5, #1
   11c48:	mov	r7, sl
   11c4c:	add	r4, r4, #384	; 0x180
   11c50:	cmp	r9, #0
   11c54:	bne	11c00 <__assert_fail@plt+0x844>
   11c58:	movw	r1, #25114	; 0x621a
   11c5c:	mov	r0, #0
   11c60:	mov	r2, #5
   11c64:	movt	r1, #1
   11c68:	bl	11170 <dcgettext@plt>
   11c6c:	mov	r1, r0
   11c70:	mov	r0, #1
   11c74:	mov	r2, r5
   11c78:	bl	112f0 <__printf_chk@plt>
   11c7c:	b	1278c <__assert_fail@plt+0x13d0>
   11c80:	movw	r0, #29070	; 0x718e
   11c84:	movt	r0, #2
   11c88:	ldrb	r0, [r0]
   11c8c:	cmp	r0, #1
   11c90:	bne	11d5c <__assert_fail@plt+0x9a0>
   11c94:	movw	r1, #25134	; 0x622e
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	movt	r1, #1
   11ca4:	bl	11170 <dcgettext@plt>
   11ca8:	movw	r1, #25139	; 0x6233
   11cac:	str	r0, [sp, #44]	; 0x2c
   11cb0:	mov	r0, #0
   11cb4:	mov	r2, #5
   11cb8:	movt	r1, #1
   11cbc:	bl	11170 <dcgettext@plt>
   11cc0:	movw	r1, #25144	; 0x6238
   11cc4:	mov	r8, r0
   11cc8:	mov	r0, #0
   11ccc:	mov	r2, #5
   11cd0:	movt	r1, #1
   11cd4:	bl	11170 <dcgettext@plt>
   11cd8:	movw	r1, #25149	; 0x623d
   11cdc:	mov	sl, r0
   11ce0:	mov	r0, #0
   11ce4:	mov	r2, #5
   11ce8:	movt	r1, #1
   11cec:	bl	11170 <dcgettext@plt>
   11cf0:	movw	r1, #25154	; 0x6242
   11cf4:	mov	r5, r0
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	movt	r1, #1
   11d04:	bl	11170 <dcgettext@plt>
   11d08:	movw	r1, #25158	; 0x6246
   11d0c:	mov	r6, r0
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	movt	r1, #1
   11d1c:	bl	11170 <dcgettext@plt>
   11d20:	movw	r1, #25166	; 0x624e
   11d24:	mov	r7, r0
   11d28:	mov	r0, #0
   11d2c:	mov	r2, #5
   11d30:	movt	r1, #1
   11d34:	bl	11170 <dcgettext@plt>
   11d38:	add	r1, sp, #8
   11d3c:	stm	sp, {r8, sl}
   11d40:	mov	r2, #32
   11d44:	mvn	r3, #0
   11d48:	stm	r1, {r5, r6, r7}
   11d4c:	str	r0, [sp, #20]
   11d50:	mvn	r0, #0
   11d54:	ldr	r1, [sp, #44]	; 0x2c
   11d58:	bl	127ec <__assert_fail@plt+0x1430>
   11d5c:	movw	sl, #29071	; 0x718f
   11d60:	movt	sl, #2
   11d64:	ldrb	r0, [sl]
   11d68:	cmp	r0, #1
   11d6c:	bne	11da0 <__assert_fail@plt+0x9e4>
   11d70:	mov	r0, #0
   11d74:	bl	11290 <ttyname@plt>
   11d78:	cmp	r0, #0
   11d7c:	beq	1278c <__assert_fail@plt+0x13d0>
   11d80:	movw	r1, #25128	; 0x6228
   11d84:	mov	r2, #5
   11d88:	mov	r5, r0
   11d8c:	movt	r1, #1
   11d90:	bl	11398 <strncmp@plt>
   11d94:	cmp	r0, #0
   11d98:	addeq	r5, r5, #5
   11d9c:	str	r5, [sp, #40]	; 0x28
   11da0:	cmp	r9, #0
   11da4:	beq	1278c <__assert_fail@plt+0x13d0>
   11da8:	sub	r0, fp, #184	; 0xb8
   11dac:	movw	r7, #29066	; 0x718a
   11db0:	sub	r6, fp, #196	; 0xc4
   11db4:	orr	r0, r0, #5
   11db8:	movt	r7, #2
   11dbc:	str	r0, [sp, #24]
   11dc0:	mov	r0, #-2147483648	; 0x80000000
   11dc4:	str	r0, [sp, #44]	; 0x2c
   11dc8:	ldrb	r0, [sl]
   11dcc:	cmp	r0, #1
   11dd0:	bne	11dec <__assert_fail@plt+0xa30>
   11dd4:	ldr	r0, [sp, #40]	; 0x28
   11dd8:	add	r1, r4, #8
   11ddc:	mov	r2, #32
   11de0:	bl	11398 <strncmp@plt>
   11de4:	cmp	r0, #0
   11de8:	bne	1276c <__assert_fail@plt+0x13b0>
   11dec:	ldrb	r0, [r7]
   11df0:	cmp	r0, #1
   11df4:	bne	11eec <__assert_fail@plt+0xb30>
   11df8:	mov	r8, r4
   11dfc:	ldrb	r0, [r8, #44]!	; 0x2c
   11e00:	cmp	r0, #0
   11e04:	beq	11eec <__assert_fail@plt+0xb30>
   11e08:	ldrh	r0, [r4]
   11e0c:	cmp	r0, #7
   11e10:	bne	11eec <__assert_fail@plt+0xb30>
   11e14:	ldr	r0, [r4, #4]
   11e18:	movw	r3, #25228	; 0x628c
   11e1c:	mov	r1, #1
   11e20:	mov	r2, #12
   11e24:	movt	r3, #1
   11e28:	str	r0, [sp]
   11e2c:	mov	r0, r6
   11e30:	bl	112c0 <__sprintf_chk@plt>
   11e34:	mov	r0, r4
   11e38:	ldrb	r1, [r0, #8]!
   11e3c:	str	r0, [sp, #36]	; 0x24
   11e40:	cmp	r1, #47	; 0x2f
   11e44:	sub	r0, fp, #184	; 0xb8
   11e48:	beq	11e70 <__assert_fail@plt+0xab4>
   11e4c:	ldr	r2, [sp, #24]
   11e50:	mov	r0, #47	; 0x2f
   11e54:	cmp	r1, #0
   11e58:	strh	r0, [fp, #-180]	; 0xffffff4c
   11e5c:	movw	r0, #25647	; 0x642f
   11e60:	movt	r0, #30309	; 0x7665
   11e64:	str	r0, [fp, #-184]	; 0xffffff48
   11e68:	mov	r0, r2
   11e6c:	beq	11eb0 <__assert_fail@plt+0xaf4>
   11e70:	add	r2, r4, #40	; 0x28
   11e74:	mov	r7, #0
   11e78:	strb	r1, [r0, r7]
   11e7c:	add	r1, r4, r7
   11e80:	mov	r3, r7
   11e84:	add	r1, r1, #9
   11e88:	cmp	r1, r2
   11e8c:	bcs	11ea0 <__assert_fail@plt+0xae4>
   11e90:	ldrb	r1, [r1]
   11e94:	add	r7, r3, #1
   11e98:	cmp	r1, #0
   11e9c:	bne	11e78 <__assert_fail@plt+0xabc>
   11ea0:	movw	r7, #29066	; 0x718a
   11ea4:	add	r0, r0, r3
   11ea8:	add	r2, r0, #1
   11eac:	movt	r7, #2
   11eb0:	mov	r0, #0
   11eb4:	sub	r1, fp, #136	; 0x88
   11eb8:	strb	r0, [r2]
   11ebc:	sub	r0, fp, #184	; 0xb8
   11ec0:	bl	15b08 <__assert_fail@plt+0x474c>
   11ec4:	mov	r1, #63	; 0x3f
   11ec8:	cmp	r0, #0
   11ecc:	beq	123b4 <__assert_fail@plt+0xff8>
   11ed0:	movw	r3, #25237	; 0x6295
   11ed4:	str	r1, [sp, #32]
   11ed8:	sub	r0, fp, #143	; 0x8f
   11edc:	mov	r1, #1
   11ee0:	mov	r2, #7
   11ee4:	movt	r3, #1
   11ee8:	b	124dc <__assert_fail@plt+0x1120>
   11eec:	movw	r0, #29064	; 0x7188
   11ef0:	movt	r0, #2
   11ef4:	ldrb	r0, [r0]
   11ef8:	cmp	r0, #1
   11efc:	ldrheq	r0, [r4]
   11f00:	cmpeq	r0, #1
   11f04:	beq	120e0 <__assert_fail@plt+0xd24>
   11f08:	movw	r0, #29060	; 0x7184
   11f0c:	movt	r0, #2
   11f10:	ldrb	r0, [r0]
   11f14:	cmp	r0, #1
   11f18:	ldrheq	r0, [r4]
   11f1c:	cmpeq	r0, #2
   11f20:	beq	12244 <__assert_fail@plt+0xe88>
   11f24:	movw	r0, #29065	; 0x7189
   11f28:	movt	r0, #2
   11f2c:	ldrb	r0, [r0]
   11f30:	cmp	r0, #1
   11f34:	ldrheq	r0, [r4]
   11f38:	cmpeq	r0, #3
   11f3c:	beq	12254 <__assert_fail@plt+0xe98>
   11f40:	movw	r0, #29063	; 0x7187
   11f44:	movt	r0, #2
   11f48:	ldrb	r0, [r0]
   11f4c:	cmp	r0, #1
   11f50:	ldrheq	r0, [r4]
   11f54:	cmpeq	r0, #5
   11f58:	beq	122a8 <__assert_fail@plt+0xeec>
   11f5c:	movw	r0, #29062	; 0x7186
   11f60:	movt	r0, #2
   11f64:	ldrb	r0, [r0]
   11f68:	cmp	r0, #1
   11f6c:	ldrheq	r0, [r4]
   11f70:	cmpeq	r0, #6
   11f74:	beq	1231c <__assert_fail@plt+0xf60>
   11f78:	movw	r0, #29061	; 0x7185
   11f7c:	sub	r6, fp, #196	; 0xc4
   11f80:	movt	r0, #2
   11f84:	ldrb	r0, [r0]
   11f88:	cmp	r0, #1
   11f8c:	ldrheq	r0, [r4]
   11f90:	cmpeq	r0, #8
   11f94:	bne	1276c <__assert_fail@plt+0x13b0>
   11f98:	mov	r0, r4
   11f9c:	bl	12a80 <__assert_fail@plt+0x16c4>
   11fa0:	mov	r8, r0
   11fa4:	ldr	r0, [r4, #4]
   11fa8:	movw	r3, #25228	; 0x628c
   11fac:	mov	r1, #1
   11fb0:	mov	r2, #12
   11fb4:	movt	r3, #1
   11fb8:	str	r0, [sp]
   11fbc:	mov	r0, r6
   11fc0:	bl	112c0 <__sprintf_chk@plt>
   11fc4:	movw	r6, #29140	; 0x71d4
   11fc8:	movt	r6, #2
   11fcc:	ldr	r5, [r6]
   11fd0:	cmp	r5, #0
   11fd4:	bne	12020 <__assert_fail@plt+0xc64>
   11fd8:	movw	r1, #25418	; 0x634a
   11fdc:	mov	r0, #0
   11fe0:	mov	r2, #5
   11fe4:	movt	r1, #1
   11fe8:	bl	11170 <dcgettext@plt>
   11fec:	bl	1129c <strlen@plt>
   11ff0:	movw	r1, #25424	; 0x6350
   11ff4:	mov	r5, r0
   11ff8:	mov	r0, #0
   11ffc:	mov	r2, #5
   12000:	movt	r1, #1
   12004:	bl	11170 <dcgettext@plt>
   12008:	bl	1129c <strlen@plt>
   1200c:	add	r0, r5, r0
   12010:	add	r0, r0, #14
   12014:	bl	15028 <__assert_fail@plt+0x3c6c>
   12018:	mov	r5, r0
   1201c:	str	r0, [r6]
   12020:	movw	r1, #25418	; 0x634a
   12024:	mov	r0, #0
   12028:	mov	r2, #5
   1202c:	movt	r1, #1
   12030:	bl	11170 <dcgettext@plt>
   12034:	mov	r7, r0
   12038:	mov	r0, #332	; 0x14c
   1203c:	movw	r1, #25424	; 0x6350
   12040:	mov	r2, #5
   12044:	ldrsh	r6, [r4, r0]
   12048:	mov	r0, #0
   1204c:	movt	r1, #1
   12050:	bl	11170 <dcgettext@plt>
   12054:	movw	r1, #334	; 0x14e
   12058:	movw	r3, #25430	; 0x6356
   1205c:	mvn	r2, #0
   12060:	ldrsh	r1, [r4, r1]
   12064:	str	r0, [sp, #8]
   12068:	mov	r0, r5
   1206c:	movt	r3, #1
   12070:	str	r7, [sp]
   12074:	str	r6, [sp, #4]
   12078:	str	r1, [sp, #12]
   1207c:	mov	r1, #1
   12080:	bl	112c0 <__sprintf_chk@plt>
   12084:	mov	r0, r4
   12088:	bl	12a10 <__assert_fail@plt+0x1654>
   1208c:	movw	r1, #29140	; 0x71d4
   12090:	add	r2, r4, #8
   12094:	str	r0, [sp, #4]
   12098:	sub	r6, fp, #196	; 0xc4
   1209c:	mvn	r0, #0
   120a0:	str	r8, [sp, #16]
   120a4:	movt	r1, #2
   120a8:	str	r2, [sp]
   120ac:	mov	r2, #32
   120b0:	str	r6, [sp, #12]
   120b4:	ldr	r3, [r1]
   120b8:	movw	r1, #25003	; 0x61ab
   120bc:	movt	r1, #1
   120c0:	str	r1, [sp, #8]
   120c4:	str	r3, [sp, #20]
   120c8:	mov	r3, #32
   120cc:	bl	127ec <__assert_fail@plt+0x1430>
   120d0:	mov	r0, r8
   120d4:	bl	12cbc <__assert_fail@plt+0x1900>
   120d8:	movw	r7, #29066	; 0x718a
   120dc:	b	1223c <__assert_fail@plt+0xe80>
   120e0:	ldr	r7, [r4, #4]
   120e4:	asr	r0, r7, #31
   120e8:	add	r6, r7, r0, lsr #24
   120ec:	movw	r0, #29132	; 0x71cc
   120f0:	movt	r0, #2
   120f4:	ldr	r5, [r0]
   120f8:	cmp	r5, #0
   120fc:	bne	12130 <__assert_fail@plt+0xd74>
   12100:	movw	r1, #25356	; 0x630c
   12104:	mov	r0, #0
   12108:	mov	r2, #5
   1210c:	movt	r1, #1
   12110:	bl	11170 <dcgettext@plt>
   12114:	bl	1129c <strlen@plt>
   12118:	add	r0, r0, #3
   1211c:	bl	15028 <__assert_fail@plt+0x3c6c>
   12120:	mov	r5, r0
   12124:	movw	r0, #29132	; 0x71cc
   12128:	movt	r0, #2
   1212c:	str	r5, [r0]
   12130:	movw	r1, #25356	; 0x630c
   12134:	mov	r0, #0
   12138:	mov	r2, #5
   1213c:	asr	r6, r6, #8
   12140:	movt	r1, #1
   12144:	bl	11170 <dcgettext@plt>
   12148:	movw	r3, #25366	; 0x6316
   1214c:	uxtb	r1, r7
   12150:	mvn	r2, #0
   12154:	stm	sp, {r0, r1}
   12158:	mov	r0, r5
   1215c:	mov	r1, #1
   12160:	movt	r3, #1
   12164:	bl	112c0 <__sprintf_chk@plt>
   12168:	movw	r7, #29136	; 0x71d0
   1216c:	movt	r7, #2
   12170:	ldr	r5, [r7]
   12174:	cmp	r5, #0
   12178:	bne	121a4 <__assert_fail@plt+0xde8>
   1217c:	movw	r1, #25372	; 0x631c
   12180:	mov	r0, #0
   12184:	mov	r2, #5
   12188:	movt	r1, #1
   1218c:	bl	11170 <dcgettext@plt>
   12190:	bl	1129c <strlen@plt>
   12194:	add	r0, r0, #2
   12198:	bl	15028 <__assert_fail@plt+0x3c6c>
   1219c:	mov	r5, r0
   121a0:	str	r0, [r7]
   121a4:	movw	r1, #25372	; 0x631c
   121a8:	mov	r0, #0
   121ac:	mov	r2, #5
   121b0:	movt	r1, #1
   121b4:	bl	11170 <dcgettext@plt>
   121b8:	uxtb	r1, r6
   121bc:	movw	r3, #25378	; 0x6322
   121c0:	mvn	r2, #0
   121c4:	cmp	r1, #78	; 0x4e
   121c8:	movt	r3, #1
   121cc:	movweq	r1, #83	; 0x53
   121d0:	stm	sp, {r0, r1}
   121d4:	mov	r0, r5
   121d8:	mov	r1, #1
   121dc:	bl	112c0 <__sprintf_chk@plt>
   121e0:	movw	r0, #29132	; 0x71cc
   121e4:	movt	r0, #2
   121e8:	ldr	r5, [r0]
   121ec:	mov	r0, r4
   121f0:	bl	12a10 <__assert_fail@plt+0x1654>
   121f4:	ldr	r3, [r7]
   121f8:	mvn	r1, #31
   121fc:	str	r5, [sp]
   12200:	uxtab	r2, r1, r6
   12204:	movw	r1, #25003	; 0x61ab
   12208:	cmp	r2, #95	; 0x5f
   1220c:	movt	r1, #1
   12210:	mov	r2, #32
   12214:	stmib	sp, {r0, r1}
   12218:	mvn	r0, #0
   1221c:	str	r1, [sp, #12]
   12220:	str	r1, [sp, #20]
   12224:	movcs	r3, r1
   12228:	str	r3, [sp, #16]
   1222c:	mvn	r3, #0
   12230:	bl	127ec <__assert_fail@plt+0x1430>
   12234:	movw	r7, #29066	; 0x718a
   12238:	sub	r6, fp, #196	; 0xc4
   1223c:	movt	r7, #2
   12240:	b	1276c <__assert_fail@plt+0x13b0>
   12244:	movw	r1, #25383	; 0x6327
   12248:	mov	r0, #0
   1224c:	movt	r1, #1
   12250:	b	12260 <__assert_fail@plt+0xea4>
   12254:	movw	r1, #25395	; 0x6333
   12258:	mov	r0, #0
   1225c:	movt	r1, #1
   12260:	mov	r2, #5
   12264:	bl	11170 <dcgettext@plt>
   12268:	mov	r5, r0
   1226c:	mov	r0, r4
   12270:	bl	12a10 <__assert_fail@plt+0x1654>
   12274:	movw	r1, #25003	; 0x61ab
   12278:	str	r0, [sp, #4]
   1227c:	mvn	r0, #0
   12280:	mov	r2, #32
   12284:	mvn	r3, #0
   12288:	str	r5, [sp]
   1228c:	sub	r6, fp, #196	; 0xc4
   12290:	movt	r1, #1
   12294:	str	r1, [sp, #8]
   12298:	str	r1, [sp, #12]
   1229c:	str	r1, [sp, #16]
   122a0:	str	r1, [sp, #20]
   122a4:	b	12768 <__assert_fail@plt+0x13ac>
   122a8:	mov	r0, r4
   122ac:	bl	12a80 <__assert_fail@plt+0x16c4>
   122b0:	mov	r5, r0
   122b4:	ldr	r0, [r4, #4]
   122b8:	movw	r3, #25228	; 0x628c
   122bc:	sub	r6, fp, #196	; 0xc4
   122c0:	mov	r1, #1
   122c4:	mov	r2, #12
   122c8:	movt	r3, #1
   122cc:	str	r0, [sp]
   122d0:	mov	r0, r6
   122d4:	bl	112c0 <__sprintf_chk@plt>
   122d8:	mov	r0, r4
   122dc:	bl	12a10 <__assert_fail@plt+0x1654>
   122e0:	add	r1, r4, #8
   122e4:	str	r0, [sp, #4]
   122e8:	mvn	r0, #0
   122ec:	mov	r2, #32
   122f0:	mov	r3, #32
   122f4:	str	r6, [sp, #12]
   122f8:	str	r5, [sp, #16]
   122fc:	str	r1, [sp]
   12300:	movw	r1, #25003	; 0x61ab
   12304:	movt	r1, #1
   12308:	str	r1, [sp, #8]
   1230c:	str	r1, [sp, #20]
   12310:	bl	127ec <__assert_fail@plt+0x1430>
   12314:	mov	r0, r5
   12318:	b	123ac <__assert_fail@plt+0xff0>
   1231c:	mov	r0, r4
   12320:	bl	12a80 <__assert_fail@plt+0x16c4>
   12324:	mov	r5, r0
   12328:	ldr	r0, [r4, #4]
   1232c:	movw	r3, #25228	; 0x628c
   12330:	sub	r8, fp, #196	; 0xc4
   12334:	mov	r1, #1
   12338:	mov	r2, #12
   1233c:	movt	r3, #1
   12340:	str	r0, [sp]
   12344:	mov	r0, r8
   12348:	bl	112c0 <__sprintf_chk@plt>
   1234c:	movw	r1, #25412	; 0x6344
   12350:	mov	r0, #0
   12354:	mov	r2, #5
   12358:	movt	r1, #1
   1235c:	bl	11170 <dcgettext@plt>
   12360:	mov	r6, r0
   12364:	mov	r0, r4
   12368:	bl	12a10 <__assert_fail@plt+0x1654>
   1236c:	str	r0, [sp, #4]
   12370:	movw	r0, #25003	; 0x61ab
   12374:	add	r1, r4, #8
   12378:	mov	r2, #32
   1237c:	mov	r3, #32
   12380:	str	r8, [sp, #12]
   12384:	str	r5, [sp, #16]
   12388:	movt	r0, #1
   1238c:	str	r1, [sp]
   12390:	mov	r1, r6
   12394:	str	r0, [sp, #8]
   12398:	str	r0, [sp, #20]
   1239c:	mvn	r0, #0
   123a0:	bl	127ec <__assert_fail@plt+0x1430>
   123a4:	mov	r0, r5
   123a8:	mov	r6, r8
   123ac:	bl	12cbc <__assert_fail@plt+0x1900>
   123b0:	b	1276c <__assert_fail@plt+0x13b0>
   123b4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   123b8:	ldr	r5, [fp, #-64]	; 0xffffffc0
   123bc:	mov	r1, #43	; 0x2b
   123c0:	tst	r0, #16
   123c4:	movweq	r1, #45	; 0x2d
   123c8:	cmp	r5, #0
   123cc:	beq	12688 <__assert_fail@plt+0x12cc>
   123d0:	movw	r0, #28956	; 0x711c
   123d4:	str	r1, [sp, #32]
   123d8:	movt	r0, #2
   123dc:	ldr	r0, [r0]
   123e0:	cmp	r0, #-2147483648	; 0x80000000
   123e4:	bne	123f4 <__assert_fail@plt+0x1038>
   123e8:	movw	r0, #28956	; 0x711c
   123ec:	movt	r0, #2
   123f0:	bl	1114c <time@plt>
   123f4:	ldr	r0, [sp, #44]	; 0x2c
   123f8:	cmp	r5, r0
   123fc:	ble	124a4 <__assert_fail@plt+0x10e8>
   12400:	movw	r0, #28956	; 0x711c
   12404:	movt	r0, #2
   12408:	ldr	r0, [r0]
   1240c:	cmp	r0, r5
   12410:	blt	124a4 <__assert_fail@plt+0x10e8>
   12414:	movw	r1, #44672	; 0xae80
   12418:	movt	r1, #65534	; 0xfffe
   1241c:	add	r1, r0, r1
   12420:	cmp	r1, r5
   12424:	bge	124a4 <__assert_fail@plt+0x10e8>
   12428:	sub	r1, r0, r5
   1242c:	movw	r0, #25254	; 0x62a6
   12430:	sub	r6, fp, #196	; 0xc4
   12434:	cmp	r1, #60	; 0x3c
   12438:	movt	r0, #1
   1243c:	blt	124bc <__assert_fail@plt+0x1100>
   12440:	movw	r0, #20864	; 0x5180
   12444:	movt	r0, #1
   12448:	cmp	r1, r0
   1244c:	bge	127cc <__assert_fail@plt+0x1410>
   12450:	movw	r0, #46021	; 0xb3c5
   12454:	movw	r5, #29092	; 0x71a4
   12458:	movw	r3, #25340	; 0x62fc
   1245c:	movt	r0, #37282	; 0x91a2
   12460:	movt	r5, #2
   12464:	movt	r3, #1
   12468:	umull	r0, r2, r1, r0
   1246c:	lsr	r0, r2, #11
   12470:	mov	r2, #3600	; 0xe10
   12474:	mls	r1, r0, r2, r1
   12478:	movw	r2, #34953	; 0x8889
   1247c:	movt	r2, #34952	; 0x8888
   12480:	umull	r1, r2, r1, r2
   12484:	lsr	r1, r2, #5
   12488:	mov	r2, #6
   1248c:	stm	sp, {r0, r1}
   12490:	mov	r0, r5
   12494:	mov	r1, #1
   12498:	bl	112c0 <__sprintf_chk@plt>
   1249c:	mov	r0, r5
   124a0:	b	124bc <__assert_fail@plt+0x1100>
   124a4:	movw	r1, #25350	; 0x6306
   124a8:	mov	r0, #0
   124ac:	mov	r2, #5
   124b0:	movt	r1, #1
   124b4:	bl	11170 <dcgettext@plt>
   124b8:	sub	r6, fp, #196	; 0xc4
   124bc:	movw	r3, #25232	; 0x6290
   124c0:	mov	r1, #6
   124c4:	str	r0, [sp, #4]
   124c8:	sub	r0, fp, #143	; 0x8f
   124cc:	mov	r2, #7
   124d0:	str	r1, [sp]
   124d4:	mov	r1, #1
   124d8:	movt	r3, #1
   124dc:	bl	112c0 <__sprintf_chk@plt>
   124e0:	ldrb	r1, [r4, #76]	; 0x4c
   124e4:	cmp	r1, #0
   124e8:	beq	125f0 <__assert_fail@plt+0x1234>
   124ec:	add	r0, r4, #332	; 0x14c
   124f0:	mov	r3, #0
   124f4:	add	r6, sp, #59	; 0x3b
   124f8:	strb	r1, [r6, r3]
   124fc:	add	r1, r4, r3
   12500:	mov	r2, r3
   12504:	add	r1, r1, #77	; 0x4d
   12508:	cmp	r1, r0
   1250c:	bcs	12520 <__assert_fail@plt+0x1164>
   12510:	ldrb	r1, [r1]
   12514:	add	r3, r2, #1
   12518:	cmp	r1, #0
   1251c:	bne	124f8 <__assert_fail@plt+0x113c>
   12520:	add	r0, r6, r2
   12524:	mov	r7, #0
   12528:	mov	r1, #58	; 0x3a
   1252c:	strb	r7, [r0, #1]
   12530:	mov	r0, r6
   12534:	bl	112a8 <strchr@plt>
   12538:	cmp	r0, #0
   1253c:	mov	sl, #0
   12540:	movw	r5, #29088	; 0x71a0
   12544:	movne	r1, #0
   12548:	movt	r5, #2
   1254c:	strbne	r1, [r0], #1
   12550:	movne	sl, r0
   12554:	ldrb	r0, [sp, #59]	; 0x3b
   12558:	cmp	r0, #0
   1255c:	beq	12580 <__assert_fail@plt+0x11c4>
   12560:	movw	r0, #29074	; 0x7192
   12564:	movt	r0, #2
   12568:	ldrb	r0, [r0]
   1256c:	cmp	r0, #1
   12570:	bne	12580 <__assert_fail@plt+0x11c4>
   12574:	mov	r0, r6
   12578:	bl	12b04 <__assert_fail@plt+0x1748>
   1257c:	mov	r7, r0
   12580:	cmp	r7, #0
   12584:	ldr	r5, [r5]
   12588:	str	r7, [sp, #28]
   1258c:	moveq	r7, r6
   12590:	mov	r0, r7
   12594:	bl	1129c <strlen@plt>
   12598:	mov	r6, r0
   1259c:	cmp	sl, #0
   125a0:	beq	12614 <__assert_fail@plt+0x1258>
   125a4:	mov	r0, sl
   125a8:	bl	1129c <strlen@plt>
   125ac:	add	r0, r6, r0
   125b0:	add	r0, r0, #4
   125b4:	cmp	r5, r0
   125b8:	bcs	12654 <__assert_fail@plt+0x1298>
   125bc:	movw	r1, #29088	; 0x71a0
   125c0:	movt	r1, #2
   125c4:	str	r0, [r1]
   125c8:	movw	r0, #29084	; 0x719c
   125cc:	mov	r5, r1
   125d0:	movt	r0, #2
   125d4:	mov	r6, r0
   125d8:	ldr	r0, [r0]
   125dc:	bl	12cbc <__assert_fail@plt+0x1900>
   125e0:	ldr	r0, [r5]
   125e4:	bl	15028 <__assert_fail@plt+0x3c6c>
   125e8:	str	r0, [r6]
   125ec:	b	12660 <__assert_fail@plt+0x12a4>
   125f0:	movw	r5, #29088	; 0x71a0
   125f4:	movt	r5, #2
   125f8:	ldr	r0, [r5]
   125fc:	cmp	r0, #0
   12600:	beq	12690 <__assert_fail@plt+0x12d4>
   12604:	movw	r0, #29084	; 0x719c
   12608:	movt	r0, #2
   1260c:	ldr	r0, [r0]
   12610:	b	126bc <__assert_fail@plt+0x1300>
   12614:	add	r0, r6, #3
   12618:	cmp	r5, r0
   1261c:	bcs	126c8 <__assert_fail@plt+0x130c>
   12620:	movw	r1, #29088	; 0x71a0
   12624:	movt	r1, #2
   12628:	str	r0, [r1]
   1262c:	movw	r0, #29084	; 0x719c
   12630:	mov	r5, r1
   12634:	movt	r0, #2
   12638:	mov	r6, r0
   1263c:	ldr	r0, [r0]
   12640:	bl	12cbc <__assert_fail@plt+0x1900>
   12644:	ldr	r0, [r5]
   12648:	bl	15028 <__assert_fail@plt+0x3c6c>
   1264c:	str	r0, [r6]
   12650:	b	126d4 <__assert_fail@plt+0x1318>
   12654:	movw	r0, #29084	; 0x719c
   12658:	movt	r0, #2
   1265c:	ldr	r0, [r0]
   12660:	movw	r3, #25241	; 0x6299
   12664:	mov	r1, #1
   12668:	mvn	r2, #0
   1266c:	sub	r6, fp, #196	; 0xc4
   12670:	stm	sp, {r7, sl}
   12674:	movt	r3, #1
   12678:	bl	112c0 <__sprintf_chk@plt>
   1267c:	movw	sl, #29071	; 0x718f
   12680:	movt	sl, #2
   12684:	b	126f8 <__assert_fail@plt+0x133c>
   12688:	sub	r6, fp, #196	; 0xc4
   1268c:	b	11ed0 <__assert_fail@plt+0xb14>
   12690:	mov	r0, #1
   12694:	str	r0, [r5]
   12698:	movw	r0, #29084	; 0x719c
   1269c:	movt	r0, #2
   126a0:	ldr	r0, [r0]
   126a4:	bl	12cbc <__assert_fail@plt+0x1900>
   126a8:	ldr	r0, [r5]
   126ac:	bl	15028 <__assert_fail@plt+0x3c6c>
   126b0:	movw	r1, #29084	; 0x719c
   126b4:	movt	r1, #2
   126b8:	str	r0, [r1]
   126bc:	mov	r1, #0
   126c0:	strb	r1, [r0]
   126c4:	b	12714 <__assert_fail@plt+0x1358>
   126c8:	movw	r0, #29084	; 0x719c
   126cc:	movt	r0, #2
   126d0:	ldr	r0, [r0]
   126d4:	movw	r3, #25249	; 0x62a1
   126d8:	movw	sl, #29071	; 0x718f
   126dc:	mov	r1, #1
   126e0:	mvn	r2, #0
   126e4:	sub	r6, fp, #196	; 0xc4
   126e8:	str	r7, [sp]
   126ec:	movt	r3, #1
   126f0:	movt	sl, #2
   126f4:	bl	112c0 <__sprintf_chk@plt>
   126f8:	ldr	r0, [sp, #28]
   126fc:	cmp	r0, #0
   12700:	beq	1270c <__assert_fail@plt+0x1350>
   12704:	mov	r0, r7
   12708:	bl	12cbc <__assert_fail@plt+0x1900>
   1270c:	movw	r7, #29066	; 0x718a
   12710:	movt	r7, #2
   12714:	mov	r0, r4
   12718:	bl	12a10 <__assert_fail@plt+0x1654>
   1271c:	movw	r1, #29084	; 0x719c
   12720:	movw	r2, #25003	; 0x61ab
   12724:	ldr	r3, [sp, #36]	; 0x24
   12728:	str	r0, [sp, #4]
   1272c:	sub	r0, fp, #143	; 0x8f
   12730:	str	r6, [sp, #12]
   12734:	movt	r1, #2
   12738:	movt	r2, #1
   1273c:	str	r0, [sp, #8]
   12740:	mov	r0, #32
   12744:	ldr	r1, [r1]
   12748:	str	r2, [sp, #20]
   1274c:	str	r3, [sp]
   12750:	mov	r3, #32
   12754:	cmp	r1, #0
   12758:	moveq	r1, r2
   1275c:	ldr	r2, [sp, #32]
   12760:	str	r1, [sp, #16]
   12764:	mov	r1, r8
   12768:	bl	127ec <__assert_fail@plt+0x1430>
   1276c:	ldrh	r0, [r4]
   12770:	sub	r9, r9, #1
   12774:	cmp	r0, #2
   12778:	ldreq	r0, [r4, #340]	; 0x154
   1277c:	add	r4, r4, #384	; 0x180
   12780:	streq	r0, [sp, #44]	; 0x2c
   12784:	cmp	r9, #0
   12788:	bne	11dc8 <__assert_fail@plt+0xa0c>
   1278c:	ldr	r0, [sp, #48]	; 0x30
   12790:	bl	12cbc <__assert_fail@plt+0x1900>
   12794:	sub	sp, fp, #28
   12798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1279c:	bl	112b4 <__errno_location@plt>
   127a0:	ldr	r5, [r0]
   127a4:	mov	r0, #0
   127a8:	mov	r1, #3
   127ac:	mov	r2, r4
   127b0:	bl	14674 <__assert_fail@plt+0x32b8>
   127b4:	movw	r2, #25815	; 0x64d7
   127b8:	mov	r3, r0
   127bc:	mov	r0, #1
   127c0:	mov	r1, r5
   127c4:	movt	r2, #1
   127c8:	bl	111f4 <error@plt>
   127cc:	movw	r0, #25260	; 0x62ac
   127d0:	movw	r1, #25290	; 0x62ca
   127d4:	movw	r3, #25300	; 0x62d4
   127d8:	mov	r2, #205	; 0xcd
   127dc:	movt	r0, #1
   127e0:	movt	r1, #1
   127e4:	movt	r3, #1
   127e8:	bl	113bc <__assert_fail@plt>
   127ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127f0:	add	fp, sp, #28
   127f4:	sub	sp, sp, #68	; 0x44
   127f8:	mov	r5, r0
   127fc:	movw	r0, #29068	; 0x718c
   12800:	movw	r8, #28952	; 0x7118
   12804:	mov	r9, r3
   12808:	mov	r6, r1
   1280c:	movt	r0, #2
   12810:	movt	r8, #2
   12814:	ldrb	r0, [r0]
   12818:	strb	r2, [r8, #1]
   1281c:	cmp	r0, #1
   12820:	bne	1286c <__assert_fail@plt+0x14b0>
   12824:	movw	r0, #29073	; 0x7191
   12828:	movt	r0, #2
   1282c:	ldrb	r0, [r0]
   12830:	cmp	r0, #0
   12834:	bne	1286c <__assert_fail@plt+0x14b0>
   12838:	ldr	r4, [fp, #16]
   1283c:	mov	r0, r4
   12840:	bl	1129c <strlen@plt>
   12844:	cmp	r0, #6
   12848:	bhi	1286c <__assert_fail@plt+0x14b0>
   1284c:	movw	r3, #25171	; 0x6253
   12850:	sub	r0, fp, #40	; 0x28
   12854:	mov	r1, #1
   12858:	mov	r2, #8
   1285c:	str	r4, [sp]
   12860:	movt	r3, #1
   12864:	bl	112c0 <__sprintf_chk@plt>
   12868:	b	12874 <__assert_fail@plt+0x14b8>
   1286c:	mov	r0, #0
   12870:	strb	r0, [fp, #-40]	; 0xffffffd8
   12874:	movw	r0, #29073	; 0x7191
   12878:	movt	r0, #2
   1287c:	ldrb	r0, [r0]
   12880:	cmp	r0, #0
   12884:	bne	128bc <__assert_fail@plt+0x1500>
   12888:	ldr	r4, [fp, #20]
   1288c:	mov	r0, r4
   12890:	bl	1129c <strlen@plt>
   12894:	cmp	r0, #11
   12898:	bhi	128bc <__assert_fail@plt+0x1500>
   1289c:	movw	r3, #25177	; 0x6259
   128a0:	add	r0, sp, #43	; 0x2b
   128a4:	mov	r1, #1
   128a8:	mov	r2, #13
   128ac:	str	r4, [sp]
   128b0:	movt	r3, #1
   128b4:	bl	112c0 <__sprintf_chk@plt>
   128b8:	b	128c4 <__assert_fail@plt+0x1508>
   128bc:	mov	r0, #0
   128c0:	strb	r0, [sp, #43]	; 0x2b
   128c4:	movw	sl, #29069	; 0x718d
   128c8:	ldr	r4, [fp, #28]
   128cc:	mov	r0, #1
   128d0:	movt	sl, #2
   128d4:	ldrb	r1, [sl]
   128d8:	cmp	r1, #1
   128dc:	bne	128f8 <__assert_fail@plt+0x153c>
   128e0:	mov	r0, r4
   128e4:	bl	1129c <strlen@plt>
   128e8:	mov	r1, r0
   128ec:	add	r0, r0, #2
   128f0:	cmp	r1, #12
   128f4:	movwcc	r0, #14
   128f8:	bl	15028 <__assert_fail@plt+0x3c6c>
   128fc:	mov	r7, r0
   12900:	ldrb	r0, [sl]
   12904:	cmp	r0, #1
   12908:	bne	1292c <__assert_fail@plt+0x1570>
   1290c:	movw	r3, #25183	; 0x625f
   12910:	mov	r0, r7
   12914:	mov	r1, #1
   12918:	mvn	r2, #0
   1291c:	str	r4, [sp]
   12920:	movt	r3, #1
   12924:	bl	112c0 <__sprintf_chk@plt>
   12928:	b	12934 <__assert_fail@plt+0x1578>
   1292c:	mov	r0, #0
   12930:	strb	r0, [r7]
   12934:	movw	r0, #29067	; 0x718b
   12938:	movw	r4, #25223	; 0x6287
   1293c:	cmp	r6, #0
   12940:	ldr	r2, [fp, #24]
   12944:	movw	r1, #29080	; 0x7198
   12948:	str	r7, [sp, #36]	; 0x24
   1294c:	mov	r3, r5
   12950:	sub	r5, fp, #40	; 0x28
   12954:	movt	r0, #2
   12958:	movt	r4, #1
   1295c:	movt	r1, #2
   12960:	ldrb	r0, [r0]
   12964:	movne	r4, r6
   12968:	movw	r6, #25003	; 0x61ab
   1296c:	ldr	r1, [r1]
   12970:	movt	r6, #1
   12974:	str	r2, [sp, #32]
   12978:	add	r2, sp, #43	; 0x2b
   1297c:	cmp	r0, #0
   12980:	ldr	r0, [fp, #8]
   12984:	movne	r6, r8
   12988:	stm	sp, {r4, r6, r9}
   1298c:	str	r2, [sp, #28]
   12990:	movw	r2, #25190	; 0x6266
   12994:	str	r1, [sp, #16]
   12998:	mov	r1, #1
   1299c:	str	r5, [sp, #24]
   129a0:	movt	r2, #1
   129a4:	str	r0, [sp, #12]
   129a8:	ldr	r0, [fp, #12]
   129ac:	str	r0, [sp, #20]
   129b0:	sub	r0, fp, #32
   129b4:	bl	11200 <__asprintf_chk@plt>
   129b8:	cmn	r0, #1
   129bc:	beq	12a0c <__assert_fail@plt+0x1650>
   129c0:	ldr	r4, [fp, #-32]	; 0xffffffe0
   129c4:	mov	r0, r4
   129c8:	bl	1129c <strlen@plt>
   129cc:	add	r0, r4, r0
   129d0:	add	r0, r0, #1
   129d4:	ldrb	r1, [r0, #-2]
   129d8:	sub	r0, r0, #1
   129dc:	cmp	r1, #32
   129e0:	beq	129d4 <__assert_fail@plt+0x1618>
   129e4:	mov	r1, #0
   129e8:	strb	r1, [r0]
   129ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129f0:	bl	1120c <puts@plt>
   129f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   129f8:	bl	12cbc <__assert_fail@plt+0x1900>
   129fc:	mov	r0, r7
   12a00:	bl	12cbc <__assert_fail@plt+0x1900>
   12a04:	sub	sp, fp, #28
   12a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a0c:	bl	15478 <__assert_fail@plt+0x40bc>
   12a10:	push	{r4, sl, fp, lr}
   12a14:	add	fp, sp, #8
   12a18:	sub	sp, sp, #8
   12a1c:	ldr	r0, [r0, #340]	; 0x154
   12a20:	str	r0, [sp, #4]
   12a24:	add	r0, sp, #4
   12a28:	bl	11248 <localtime@plt>
   12a2c:	cmp	r0, #0
   12a30:	beq	12a5c <__assert_fail@plt+0x16a0>
   12a34:	mov	r3, r0
   12a38:	movw	r0, #29076	; 0x7194
   12a3c:	movw	r4, #29098	; 0x71aa
   12a40:	mov	r1, #33	; 0x21
   12a44:	movt	r0, #2
   12a48:	movt	r4, #2
   12a4c:	ldr	r2, [r0]
   12a50:	mov	r0, r4
   12a54:	bl	11230 <strftime@plt>
   12a58:	b	12a74 <__assert_fail@plt+0x16b8>
   12a5c:	ldr	r0, [sp, #4]
   12a60:	movw	r2, #29098	; 0x71aa
   12a64:	movt	r2, #2
   12a68:	asr	r1, r0, #31
   12a6c:	bl	12d48 <__assert_fail@plt+0x198c>
   12a70:	mov	r4, r0
   12a74:	mov	r0, r4
   12a78:	sub	sp, fp, #8
   12a7c:	pop	{r4, sl, fp, pc}
   12a80:	push	{r4, r5, r6, sl, fp, lr}
   12a84:	add	fp, sp, #16
   12a88:	movw	r6, #25408	; 0x6340
   12a8c:	mov	r5, r0
   12a90:	mov	r0, #0
   12a94:	mov	r2, #5
   12a98:	movt	r6, #1
   12a9c:	mov	r1, r6
   12aa0:	bl	11170 <dcgettext@plt>
   12aa4:	bl	1129c <strlen@plt>
   12aa8:	add	r0, r0, #5
   12aac:	bl	15028 <__assert_fail@plt+0x3c6c>
   12ab0:	mov	r4, r0
   12ab4:	mov	r0, #0
   12ab8:	mov	r1, r6
   12abc:	mov	r2, #5
   12ac0:	bl	11170 <dcgettext@plt>
   12ac4:	mov	r1, r0
   12ac8:	mov	r0, r4
   12acc:	bl	11164 <stpcpy@plt>
   12ad0:	add	r1, r5, #44	; 0x2c
   12ad4:	add	r2, r5, #40	; 0x28
   12ad8:	ldrb	r3, [r2]
   12adc:	cmp	r3, #0
   12ae0:	beq	12af4 <__assert_fail@plt+0x1738>
   12ae4:	add	r2, r2, #1
   12ae8:	strb	r3, [r0], #1
   12aec:	cmp	r2, r1
   12af0:	bcc	12ad8 <__assert_fail@plt+0x171c>
   12af4:	mov	r1, #0
   12af8:	strb	r1, [r0]
   12afc:	mov	r0, r4
   12b00:	pop	{r4, r5, r6, sl, fp, pc}
   12b04:	movw	r1, #29144	; 0x71d8
   12b08:	movt	r1, #2
   12b0c:	b	12b10 <__assert_fail@plt+0x1754>
   12b10:	push	{r4, r5, r6, sl, fp, lr}
   12b14:	add	fp, sp, #16
   12b18:	sub	sp, sp, #8
   12b1c:	movw	r2, #29148	; 0x71dc
   12b20:	mov	r6, r0
   12b24:	mov	r0, #2
   12b28:	mov	r5, r1
   12b2c:	mov	r4, #0
   12b30:	add	r3, sp, #4
   12b34:	mov	r1, #0
   12b38:	movt	r2, #2
   12b3c:	str	r4, [sp, #4]
   12b40:	str	r0, [r2]
   12b44:	mov	r0, r6
   12b48:	bl	11368 <getaddrinfo@plt>
   12b4c:	cmp	r0, #0
   12b50:	beq	12b60 <__assert_fail@plt+0x17a4>
   12b54:	cmp	r5, #0
   12b58:	strne	r0, [r5]
   12b5c:	b	12b98 <__assert_fail@plt+0x17dc>
   12b60:	ldr	r0, [sp, #4]
   12b64:	ldr	r0, [r0, #24]
   12b68:	cmp	r0, #0
   12b6c:	movne	r6, r0
   12b70:	mov	r0, r6
   12b74:	bl	1117c <strdup@plt>
   12b78:	mov	r4, r0
   12b7c:	cmp	r5, #0
   12b80:	beq	12b90 <__assert_fail@plt+0x17d4>
   12b84:	cmp	r4, #0
   12b88:	mvneq	r0, #9
   12b8c:	streq	r0, [r5]
   12b90:	ldr	r0, [sp, #4]
   12b94:	bl	1135c <freeaddrinfo@plt>
   12b98:	mov	r0, r4
   12b9c:	sub	sp, fp, #16
   12ba0:	pop	{r4, r5, r6, sl, fp, pc}
   12ba4:	movw	r0, #29144	; 0x71d8
   12ba8:	movt	r0, #2
   12bac:	ldr	r0, [r0]
   12bb0:	b	1111c <gai_strerror@plt>
   12bb4:	movw	r1, #29180	; 0x71fc
   12bb8:	movt	r1, #2
   12bbc:	str	r0, [r1]
   12bc0:	bx	lr
   12bc4:	movw	r1, #29184	; 0x7200
   12bc8:	movt	r1, #2
   12bcc:	strb	r0, [r1]
   12bd0:	bx	lr
   12bd4:	push	{r4, r5, r6, sl, fp, lr}
   12bd8:	add	fp, sp, #16
   12bdc:	sub	sp, sp, #8
   12be0:	movw	r0, #29052	; 0x717c
   12be4:	movt	r0, #2
   12be8:	ldr	r0, [r0]
   12bec:	bl	15590 <__assert_fail@plt+0x41d4>
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c1c <__assert_fail@plt+0x1860>
   12bf8:	movw	r0, #29184	; 0x7200
   12bfc:	movt	r0, #2
   12c00:	ldrb	r0, [r0]
   12c04:	cmp	r0, #0
   12c08:	beq	12c3c <__assert_fail@plt+0x1880>
   12c0c:	bl	112b4 <__errno_location@plt>
   12c10:	ldr	r0, [r0]
   12c14:	cmp	r0, #32
   12c18:	bne	12c3c <__assert_fail@plt+0x1880>
   12c1c:	movw	r0, #29048	; 0x7178
   12c20:	movt	r0, #2
   12c24:	ldr	r0, [r0]
   12c28:	bl	15590 <__assert_fail@plt+0x41d4>
   12c2c:	cmp	r0, #0
   12c30:	subeq	sp, fp, #16
   12c34:	popeq	{r4, r5, r6, sl, fp, pc}
   12c38:	b	12cac <__assert_fail@plt+0x18f0>
   12c3c:	movw	r1, #25799	; 0x64c7
   12c40:	mov	r0, #0
   12c44:	mov	r2, #5
   12c48:	movt	r1, #1
   12c4c:	bl	11170 <dcgettext@plt>
   12c50:	mov	r4, r0
   12c54:	movw	r0, #29180	; 0x71fc
   12c58:	movt	r0, #2
   12c5c:	ldr	r6, [r0]
   12c60:	bl	112b4 <__errno_location@plt>
   12c64:	ldr	r5, [r0]
   12c68:	cmp	r6, #0
   12c6c:	bne	12c88 <__assert_fail@plt+0x18cc>
   12c70:	movw	r2, #25815	; 0x64d7
   12c74:	mov	r0, #0
   12c78:	mov	r1, r5
   12c7c:	mov	r3, r4
   12c80:	movt	r2, #1
   12c84:	b	12ca8 <__assert_fail@plt+0x18ec>
   12c88:	mov	r0, r6
   12c8c:	bl	145c8 <__assert_fail@plt+0x320c>
   12c90:	movw	r2, #25811	; 0x64d3
   12c94:	mov	r3, r0
   12c98:	str	r4, [sp]
   12c9c:	mov	r0, #0
   12ca0:	mov	r1, r5
   12ca4:	movt	r2, #1
   12ca8:	bl	111f4 <error@plt>
   12cac:	movw	r0, #28964	; 0x7124
   12cb0:	movt	r0, #2
   12cb4:	ldr	r0, [r0]
   12cb8:	bl	11128 <_exit@plt>
   12cbc:	push	{r4, r5, r6, sl, fp, lr}
   12cc0:	add	fp, sp, #16
   12cc4:	mov	r4, r0
   12cc8:	bl	112b4 <__errno_location@plt>
   12ccc:	ldr	r6, [r0]
   12cd0:	mov	r5, r0
   12cd4:	mov	r0, r4
   12cd8:	bl	11110 <free@plt>
   12cdc:	str	r6, [r5]
   12ce0:	pop	{r4, r5, r6, sl, fp, pc}
   12ce4:	push	{r4, sl, fp, lr}
   12ce8:	add	fp, sp, #8
   12cec:	sub	sp, sp, #264	; 0x108
   12cf0:	add	r1, sp, #7
   12cf4:	movw	r2, #257	; 0x101
   12cf8:	bl	14ad8 <__assert_fail@plt+0x371c>
   12cfc:	mov	r4, #0
   12d00:	cmp	r0, #0
   12d04:	bne	12d3c <__assert_fail@plt+0x1980>
   12d08:	movw	r1, #25818	; 0x64da
   12d0c:	add	r0, sp, #7
   12d10:	movt	r1, #1
   12d14:	bl	110ec <strcmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	beq	12d3c <__assert_fail@plt+0x1980>
   12d20:	movw	r1, #25820	; 0x64dc
   12d24:	add	r0, sp, #7
   12d28:	movt	r1, #1
   12d2c:	bl	110ec <strcmp@plt>
   12d30:	mov	r4, r0
   12d34:	cmp	r0, #0
   12d38:	movwne	r4, #1
   12d3c:	mov	r0, r4
   12d40:	sub	sp, fp, #8
   12d44:	pop	{r4, sl, fp, pc}
   12d48:	push	{r4, r5, r6, sl, fp, lr}
   12d4c:	add	fp, sp, #16
   12d50:	mov	r5, r0
   12d54:	mov	r0, #0
   12d58:	mov	r4, r1
   12d5c:	add	r6, r2, #19
   12d60:	cmp	r1, #0
   12d64:	strb	r0, [r2, #20]
   12d68:	blt	12db4 <__assert_fail@plt+0x19f8>
   12d6c:	mov	r0, r5
   12d70:	mov	r1, r4
   12d74:	mov	r2, #10
   12d78:	mov	r3, #0
   12d7c:	bl	15880 <__assert_fail@plt+0x44c4>
   12d80:	add	r2, r0, r0, lsl #2
   12d84:	sub	r2, r5, r2, lsl #1
   12d88:	add	r2, r2, #48	; 0x30
   12d8c:	strb	r2, [r6], #-1
   12d90:	adds	r2, r5, #9
   12d94:	mov	r5, r0
   12d98:	adc	r3, r4, #0
   12d9c:	rsbs	r2, r2, #18
   12da0:	mov	r4, r1
   12da4:	rscs	r2, r3, #0
   12da8:	bcc	12d6c <__assert_fail@plt+0x19b0>
   12dac:	add	r6, r6, #1
   12db0:	b	12dfc <__assert_fail@plt+0x1a40>
   12db4:	mov	r0, r5
   12db8:	mov	r1, r4
   12dbc:	mov	r2, #10
   12dc0:	mov	r3, #0
   12dc4:	bl	15880 <__assert_fail@plt+0x44c4>
   12dc8:	add	r2, r0, r0, lsl #2
   12dcc:	rsb	r2, r5, r2, lsl #1
   12dd0:	add	r2, r2, #48	; 0x30
   12dd4:	strb	r2, [r6], #-1
   12dd8:	adds	r2, r5, #9
   12ddc:	mov	r5, r0
   12de0:	adc	r3, r4, #0
   12de4:	rsbs	r2, r2, #18
   12de8:	mov	r4, r1
   12dec:	rscs	r2, r3, #0
   12df0:	bcc	12db4 <__assert_fail@plt+0x19f8>
   12df4:	mov	r0, #45	; 0x2d
   12df8:	strb	r0, [r6]
   12dfc:	mov	r0, r6
   12e00:	pop	{r4, r5, r6, sl, fp, pc}
   12e04:	push	{r4, r5, fp, lr}
   12e08:	add	fp, sp, #8
   12e0c:	cmp	r0, #0
   12e10:	beq	12ea4 <__assert_fail@plt+0x1ae8>
   12e14:	mov	r1, #47	; 0x2f
   12e18:	mov	r4, r0
   12e1c:	bl	11344 <strrchr@plt>
   12e20:	cmp	r0, #0
   12e24:	mov	r5, r4
   12e28:	addne	r5, r0, #1
   12e2c:	sub	r0, r5, r4
   12e30:	cmp	r0, #7
   12e34:	blt	12e88 <__assert_fail@plt+0x1acc>
   12e38:	movw	r1, #25882	; 0x651a
   12e3c:	sub	r0, r5, #7
   12e40:	mov	r2, #7
   12e44:	movt	r1, #1
   12e48:	bl	11398 <strncmp@plt>
   12e4c:	cmp	r0, #0
   12e50:	bne	12e88 <__assert_fail@plt+0x1acc>
   12e54:	movw	r1, #25890	; 0x6522
   12e58:	mov	r0, r5
   12e5c:	mov	r2, #3
   12e60:	movt	r1, #1
   12e64:	bl	11398 <strncmp@plt>
   12e68:	cmp	r0, #0
   12e6c:	beq	12e78 <__assert_fail@plt+0x1abc>
   12e70:	mov	r4, r5
   12e74:	b	12e88 <__assert_fail@plt+0x1acc>
   12e78:	movw	r0, #29032	; 0x7168
   12e7c:	add	r4, r5, #3
   12e80:	movt	r0, #2
   12e84:	str	r4, [r0]
   12e88:	movw	r0, #29036	; 0x716c
   12e8c:	movt	r0, #2
   12e90:	str	r4, [r0]
   12e94:	movw	r0, #29188	; 0x7204
   12e98:	movt	r0, #2
   12e9c:	str	r4, [r0]
   12ea0:	pop	{r4, r5, fp, pc}
   12ea4:	movw	r0, #29048	; 0x7178
   12ea8:	movt	r0, #2
   12eac:	ldr	r1, [r0]
   12eb0:	movw	r0, #25826	; 0x64e2
   12eb4:	movt	r0, #1
   12eb8:	bl	1138c <fputs@plt>
   12ebc:	bl	113a4 <abort@plt>
   12ec0:	push	{r4, r5, r6, sl, fp, lr}
   12ec4:	add	fp, sp, #16
   12ec8:	mov	r4, r0
   12ecc:	movw	r0, #29192	; 0x7208
   12ed0:	movt	r0, #2
   12ed4:	cmp	r4, #0
   12ed8:	moveq	r4, r0
   12edc:	bl	112b4 <__errno_location@plt>
   12ee0:	ldr	r6, [r0]
   12ee4:	mov	r5, r0
   12ee8:	mov	r0, r4
   12eec:	mov	r1, #48	; 0x30
   12ef0:	bl	15378 <__assert_fail@plt+0x3fbc>
   12ef4:	str	r6, [r5]
   12ef8:	pop	{r4, r5, r6, sl, fp, pc}
   12efc:	movw	r1, #29192	; 0x7208
   12f00:	cmp	r0, #0
   12f04:	movt	r1, #2
   12f08:	movne	r1, r0
   12f0c:	ldr	r0, [r1]
   12f10:	bx	lr
   12f14:	movw	r2, #29192	; 0x7208
   12f18:	cmp	r0, #0
   12f1c:	movt	r2, #2
   12f20:	movne	r2, r0
   12f24:	str	r1, [r2]
   12f28:	bx	lr
   12f2c:	movw	r3, #29192	; 0x7208
   12f30:	cmp	r0, #0
   12f34:	movt	r3, #2
   12f38:	movne	r3, r0
   12f3c:	ubfx	r0, r1, #5, #3
   12f40:	and	r1, r1, #31
   12f44:	add	r0, r3, r0, lsl #2
   12f48:	ldr	r3, [r0, #8]
   12f4c:	eor	r2, r2, r3, lsr r1
   12f50:	and	r2, r2, #1
   12f54:	eor	r2, r3, r2, lsl r1
   12f58:	str	r2, [r0, #8]
   12f5c:	mov	r0, #1
   12f60:	and	r0, r0, r3, lsr r1
   12f64:	bx	lr
   12f68:	movw	r2, #29192	; 0x7208
   12f6c:	cmp	r0, #0
   12f70:	movt	r2, #2
   12f74:	movne	r2, r0
   12f78:	ldr	r0, [r2, #4]
   12f7c:	str	r1, [r2, #4]
   12f80:	bx	lr
   12f84:	movw	r3, #29192	; 0x7208
   12f88:	cmp	r0, #0
   12f8c:	movt	r3, #2
   12f90:	movne	r3, r0
   12f94:	cmp	r1, #0
   12f98:	mov	r0, #10
   12f9c:	cmpne	r2, #0
   12fa0:	str	r0, [r3]
   12fa4:	bne	12fb4 <__assert_fail@plt+0x1bf8>
   12fa8:	push	{fp, lr}
   12fac:	mov	fp, sp
   12fb0:	bl	113a4 <abort@plt>
   12fb4:	str	r1, [r3, #40]	; 0x28
   12fb8:	str	r2, [r3, #44]	; 0x2c
   12fbc:	bx	lr
   12fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fc4:	add	fp, sp, #28
   12fc8:	sub	sp, sp, #20
   12fcc:	mov	r7, r0
   12fd0:	ldr	r0, [fp, #8]
   12fd4:	movw	r5, #29192	; 0x7208
   12fd8:	mov	r8, r3
   12fdc:	mov	r9, r2
   12fe0:	mov	sl, r1
   12fe4:	movt	r5, #2
   12fe8:	cmp	r0, #0
   12fec:	movne	r5, r0
   12ff0:	bl	112b4 <__errno_location@plt>
   12ff4:	mov	r4, r0
   12ff8:	ldm	r5, {r0, r1}
   12ffc:	ldr	r2, [r5, #40]	; 0x28
   13000:	ldr	r3, [r5, #44]	; 0x2c
   13004:	add	r5, r5, #8
   13008:	ldr	r6, [r4]
   1300c:	stm	sp, {r0, r1, r5}
   13010:	str	r2, [sp, #12]
   13014:	str	r3, [sp, #16]
   13018:	mov	r0, r7
   1301c:	mov	r1, sl
   13020:	mov	r2, r9
   13024:	mov	r3, r8
   13028:	bl	13038 <__assert_fail@plt+0x1c7c>
   1302c:	str	r6, [r4]
   13030:	sub	sp, fp, #28
   13034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1303c:	add	fp, sp, #28
   13040:	sub	sp, sp, #156	; 0x9c
   13044:	str	r0, [fp, #-56]	; 0xffffffc8
   13048:	ldr	r0, [fp, #12]
   1304c:	mov	r4, r1
   13050:	str	r3, [sp, #80]	; 0x50
   13054:	str	r2, [fp, #-84]	; 0xffffffac
   13058:	and	r1, r0, #4
   1305c:	str	r1, [sp, #24]
   13060:	and	r1, r0, #1
   13064:	str	r1, [sp, #28]
   13068:	ubfx	r7, r0, #1, #1
   1306c:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   13070:	str	r0, [sp, #32]
   13074:	ldr	r0, [fp, #24]
   13078:	ldr	r9, [fp, #8]
   1307c:	mov	r2, #0
   13080:	mov	r1, #0
   13084:	mov	r5, #0
   13088:	str	r2, [sp, #52]	; 0x34
   1308c:	mov	r2, #1
   13090:	str	r0, [sp, #72]	; 0x48
   13094:	ldr	r0, [fp, #20]
   13098:	str	r0, [sp, #64]	; 0x40
   1309c:	mov	r0, #0
   130a0:	str	r0, [sp, #92]	; 0x5c
   130a4:	mov	r0, #0
   130a8:	str	r0, [fp, #-76]	; 0xffffffb4
   130ac:	mov	r0, #0
   130b0:	cmp	r9, #10
   130b4:	str	r1, [sp, #68]	; 0x44
   130b8:	bhi	140b8 <__assert_fail@plt+0x2cfc>
   130bc:	add	r1, pc, #28
   130c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   130c4:	ldr	lr, [sp, #80]	; 0x50
   130c8:	mov	r6, r4
   130cc:	mov	r8, #0
   130d0:	mov	r3, #1
   130d4:	mov	sl, #0
   130d8:	mov	r4, r2
   130dc:	ldr	pc, [r1, r9, lsl #2]
   130e0:			; <UNDEFINED> instruction: 0x000131b0
   130e4:	andeq	r3, r1, ip, ror #3
   130e8:	andeq	r3, r1, r0, asr #3
   130ec:	andeq	r3, r1, r8, lsr #3
   130f0:	andeq	r3, r1, r0, ror #3
   130f4:	andeq	r3, r1, r8, lsr r2
   130f8:	ldrdeq	r3, [r1], -r0
   130fc:	muleq	r1, r8, r2
   13100:	andeq	r3, r1, ip, lsl #2
   13104:	andeq	r3, r1, ip, lsl #2
   13108:	andeq	r3, r1, r4, lsr r1
   1310c:	movw	r0, #25972	; 0x6574
   13110:	mov	r1, r9
   13114:	movt	r0, #1
   13118:	bl	14820 <__assert_fail@plt+0x3464>
   1311c:	str	r0, [sp, #64]	; 0x40
   13120:	movw	r0, #25974	; 0x6576
   13124:	mov	r1, r9
   13128:	movt	r0, #1
   1312c:	bl	14820 <__assert_fail@plt+0x3464>
   13130:	str	r0, [sp, #72]	; 0x48
   13134:	mov	r8, #0
   13138:	mov	sl, r7
   1313c:	tst	r7, #1
   13140:	str	r5, [fp, #-48]	; 0xffffffd0
   13144:	bne	13180 <__assert_fail@plt+0x1dc4>
   13148:	ldr	r0, [sp, #64]	; 0x40
   1314c:	ldrb	r0, [r0]
   13150:	cmp	r0, #0
   13154:	beq	13180 <__assert_fail@plt+0x1dc4>
   13158:	ldr	r1, [sp, #64]	; 0x40
   1315c:	mov	r8, #0
   13160:	add	r1, r1, #1
   13164:	cmp	r8, r6
   13168:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1316c:	strbcc	r0, [r2, r8]
   13170:	ldrb	r0, [r1, r8]
   13174:	add	r8, r8, #1
   13178:	cmp	r0, #0
   1317c:	bne	13164 <__assert_fail@plt+0x1da8>
   13180:	ldr	r7, [sp, #72]	; 0x48
   13184:	mov	r0, r7
   13188:	bl	1129c <strlen@plt>
   1318c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13190:	ldr	lr, [sp, #80]	; 0x50
   13194:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13198:	str	r0, [fp, #-76]	; 0xffffffb4
   1319c:	str	r7, [sp, #92]	; 0x5c
   131a0:	mov	r3, #1
   131a4:	b	13298 <__assert_fail@plt+0x1edc>
   131a8:	mov	r0, #1
   131ac:	b	131ec <__assert_fail@plt+0x1e30>
   131b0:	mov	r9, #0
   131b4:	mov	r8, #0
   131b8:	mov	r3, r0
   131bc:	b	13294 <__assert_fail@plt+0x1ed8>
   131c0:	tst	r7, #1
   131c4:	bne	131ec <__assert_fail@plt+0x1e30>
   131c8:	mov	r3, r0
   131cc:	b	13214 <__assert_fail@plt+0x1e58>
   131d0:	mov	r0, #1
   131d4:	mov	r8, #0
   131d8:	mov	r9, #5
   131dc:	b	1324c <__assert_fail@plt+0x1e90>
   131e0:	mov	r3, #1
   131e4:	tst	r7, #1
   131e8:	beq	13214 <__assert_fail@plt+0x1e58>
   131ec:	mov	r1, #1
   131f0:	mov	r8, #0
   131f4:	mov	r9, #2
   131f8:	mov	r3, r0
   131fc:	mov	sl, #1
   13200:	str	r1, [fp, #-76]	; 0xffffffb4
   13204:	movw	r1, #25974	; 0x6576
   13208:	movt	r1, #1
   1320c:	str	r1, [sp, #92]	; 0x5c
   13210:	b	13298 <__assert_fail@plt+0x1edc>
   13214:	cmp	r6, #0
   13218:	mov	r8, #1
   1321c:	mov	r9, #2
   13220:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13224:	movne	r0, #39	; 0x27
   13228:	strbne	r0, [r1]
   1322c:	movw	r0, #25974	; 0x6576
   13230:	movt	r0, #1
   13234:	b	13288 <__assert_fail@plt+0x1ecc>
   13238:	mov	r9, #5
   1323c:	tst	r7, #1
   13240:	beq	13268 <__assert_fail@plt+0x1eac>
   13244:	mov	r0, #1
   13248:	mov	r8, #0
   1324c:	str	r0, [fp, #-76]	; 0xffffffb4
   13250:	movw	r0, #25970	; 0x6572
   13254:	mov	r3, #1
   13258:	mov	sl, #1
   1325c:	movt	r0, #1
   13260:	str	r0, [sp, #92]	; 0x5c
   13264:	b	13298 <__assert_fail@plt+0x1edc>
   13268:	cmp	r6, #0
   1326c:	mov	r8, #1
   13270:	mov	r3, #1
   13274:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13278:	movne	r0, #34	; 0x22
   1327c:	strbne	r0, [r1]
   13280:	movw	r0, #25970	; 0x6572
   13284:	movt	r0, #1
   13288:	str	r0, [sp, #92]	; 0x5c
   1328c:	mov	r0, #1
   13290:	str	r0, [fp, #-76]	; 0xffffffb4
   13294:	mov	sl, #0
   13298:	ldr	r0, [fp, #16]
   1329c:	mov	r7, #0
   132a0:	str	r9, [fp, #-64]	; 0xffffffc0
   132a4:	str	sl, [fp, #-72]	; 0xffffffb8
   132a8:	str	r3, [sp, #84]	; 0x54
   132ac:	cmp	r0, #0
   132b0:	movwne	r0, #1
   132b4:	and	r0, r0, sl
   132b8:	str	r0, [fp, #-88]	; 0xffffffa8
   132bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132c0:	cmp	r0, #0
   132c4:	movwne	r0, #1
   132c8:	subs	r2, r9, #2
   132cc:	and	r1, r0, sl
   132d0:	str	r2, [fp, #-80]	; 0xffffffb0
   132d4:	and	r1, r3, r1
   132d8:	str	r1, [sp, #44]	; 0x2c
   132dc:	clz	r1, r2
   132e0:	lsr	r1, r1, #5
   132e4:	and	r1, r1, sl
   132e8:	str	r1, [sp, #56]	; 0x38
   132ec:	mov	r1, r2
   132f0:	eor	r2, sl, #1
   132f4:	movwne	r1, #1
   132f8:	str	r2, [sp, #88]	; 0x58
   132fc:	orr	r2, r1, r2
   13300:	and	r1, r1, r3
   13304:	and	r0, r0, r1
   13308:	str	r2, [sp, #60]	; 0x3c
   1330c:	str	r1, [fp, #-68]	; 0xffffffbc
   13310:	str	r0, [fp, #-60]	; 0xffffffc4
   13314:	eor	r0, r3, #1
   13318:	str	r0, [sp, #48]	; 0x30
   1331c:	cmn	lr, #1
   13320:	beq	13330 <__assert_fail@plt+0x1f74>
   13324:	cmp	r7, lr
   13328:	bne	1333c <__assert_fail@plt+0x1f80>
   1332c:	b	13ee8 <__assert_fail@plt+0x2b2c>
   13330:	ldrb	r0, [ip, r7]
   13334:	cmp	r0, #0
   13338:	beq	13ef0 <__assert_fail@plt+0x2b34>
   1333c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13340:	mov	r9, #0
   13344:	str	r5, [fp, #-48]	; 0xffffffd0
   13348:	str	r6, [fp, #-52]	; 0xffffffcc
   1334c:	cmp	r0, #0
   13350:	beq	13390 <__assert_fail@plt+0x1fd4>
   13354:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13358:	mov	r5, r4
   1335c:	add	r4, r7, r0
   13360:	cmp	r0, #2
   13364:	bcc	13380 <__assert_fail@plt+0x1fc4>
   13368:	cmn	lr, #1
   1336c:	bne	13380 <__assert_fail@plt+0x1fc4>
   13370:	mov	r0, ip
   13374:	bl	1129c <strlen@plt>
   13378:	ldr	ip, [fp, #-84]	; 0xffffffac
   1337c:	mov	lr, r0
   13380:	cmp	r4, lr
   13384:	bls	13398 <__assert_fail@plt+0x1fdc>
   13388:	mov	r6, #0
   1338c:	b	133d8 <__assert_fail@plt+0x201c>
   13390:	mov	r6, #0
   13394:	b	133dc <__assert_fail@plt+0x2020>
   13398:	ldr	r1, [sp, #92]	; 0x5c
   1339c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   133a0:	add	r0, ip, r7
   133a4:	mov	r4, lr
   133a8:	bl	11158 <memcmp@plt>
   133ac:	ldr	r2, [sp, #88]	; 0x58
   133b0:	cmp	r0, #0
   133b4:	mov	r1, r0
   133b8:	movwne	r1, #1
   133bc:	orr	r1, r1, r2
   133c0:	tst	r1, #1
   133c4:	beq	13f84 <__assert_fail@plt+0x2bc8>
   133c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   133cc:	clz	r0, r0
   133d0:	mov	lr, r4
   133d4:	lsr	r6, r0, #5
   133d8:	mov	r4, r5
   133dc:	ldrb	r5, [ip, r7]
   133e0:	cmp	r5, #126	; 0x7e
   133e4:	bhi	137ac <__assert_fail@plt+0x23f0>
   133e8:	add	r3, pc, #16
   133ec:	mov	sl, #1
   133f0:	mov	r2, #110	; 0x6e
   133f4:	mov	r0, #97	; 0x61
   133f8:	mov	r1, #0
   133fc:	ldr	pc, [r3, r5, lsl #2]
   13400:	muleq	r1, r0, r6
   13404:	andeq	r3, r1, ip, lsr #15
   13408:	andeq	r3, r1, ip, lsr #15
   1340c:	andeq	r3, r1, ip, lsr #15
   13410:	andeq	r3, r1, ip, lsr #15
   13414:	andeq	r3, r1, ip, lsr #15
   13418:	andeq	r3, r1, ip, lsr #15
   1341c:	andeq	r3, r1, r0, asr r8
   13420:	andeq	r3, r1, r0, ror r6
   13424:	andeq	r3, r1, r8, ror #12
   13428:	andeq	r3, r1, ip, ror r6
   1342c:	andeq	r3, r1, r0, lsl #14
   13430:	andeq	r3, r1, r0, ror #12
   13434:	andeq	r3, r1, r8, ror r6
   13438:	andeq	r3, r1, ip, lsr #15
   1343c:	andeq	r3, r1, ip, lsr #15
   13440:	andeq	r3, r1, ip, lsr #15
   13444:	andeq	r3, r1, ip, lsr #15
   13448:	andeq	r3, r1, ip, lsr #15
   1344c:	andeq	r3, r1, ip, lsr #15
   13450:	andeq	r3, r1, ip, lsr #15
   13454:	andeq	r3, r1, ip, lsr #15
   13458:	andeq	r3, r1, ip, lsr #15
   1345c:	andeq	r3, r1, ip, lsr #15
   13460:	andeq	r3, r1, ip, lsr #15
   13464:	andeq	r3, r1, ip, lsr #15
   13468:	andeq	r3, r1, ip, lsr #15
   1346c:	andeq	r3, r1, ip, lsr #15
   13470:	andeq	r3, r1, ip, lsr #15
   13474:	andeq	r3, r1, ip, lsr #15
   13478:	andeq	r3, r1, ip, lsr #15
   1347c:	andeq	r3, r1, ip, lsr #15
   13480:	andeq	r3, r1, r0, lsl r8
   13484:	andeq	r3, r1, r4, lsl r8
   13488:	andeq	r3, r1, r4, lsl r8
   1348c:	andeq	r3, r1, r0, lsl r6
   13490:	andeq	r3, r1, r4, lsl r8
   13494:	strdeq	r3, [r1], -ip
   13498:	andeq	r3, r1, r4, lsl r8
   1349c:	andeq	r3, r1, r8, lsl #14
   134a0:	andeq	r3, r1, r4, lsl r8
   134a4:	andeq	r3, r1, r4, lsl r8
   134a8:	andeq	r3, r1, r4, lsl r8
   134ac:	strdeq	r3, [r1], -ip
   134b0:	strdeq	r3, [r1], -ip
   134b4:	strdeq	r3, [r1], -ip
   134b8:	strdeq	r3, [r1], -ip
   134bc:	strdeq	r3, [r1], -ip
   134c0:	strdeq	r3, [r1], -ip
   134c4:	strdeq	r3, [r1], -ip
   134c8:	strdeq	r3, [r1], -ip
   134cc:	strdeq	r3, [r1], -ip
   134d0:	strdeq	r3, [r1], -ip
   134d4:	strdeq	r3, [r1], -ip
   134d8:	strdeq	r3, [r1], -ip
   134dc:	strdeq	r3, [r1], -ip
   134e0:	strdeq	r3, [r1], -ip
   134e4:	strdeq	r3, [r1], -ip
   134e8:	strdeq	r3, [r1], -ip
   134ec:	andeq	r3, r1, r4, lsl r8
   134f0:	andeq	r3, r1, r4, lsl r8
   134f4:	andeq	r3, r1, r4, lsl r8
   134f8:	andeq	r3, r1, r4, lsl r8
   134fc:	ldrdeq	r3, [r1], -r4
   13500:	andeq	r3, r1, ip, lsr #15
   13504:	strdeq	r3, [r1], -ip
   13508:	strdeq	r3, [r1], -ip
   1350c:	strdeq	r3, [r1], -ip
   13510:	strdeq	r3, [r1], -ip
   13514:	strdeq	r3, [r1], -ip
   13518:	strdeq	r3, [r1], -ip
   1351c:	strdeq	r3, [r1], -ip
   13520:	strdeq	r3, [r1], -ip
   13524:	strdeq	r3, [r1], -ip
   13528:	strdeq	r3, [r1], -ip
   1352c:	strdeq	r3, [r1], -ip
   13530:	strdeq	r3, [r1], -ip
   13534:	strdeq	r3, [r1], -ip
   13538:	strdeq	r3, [r1], -ip
   1353c:	strdeq	r3, [r1], -ip
   13540:	strdeq	r3, [r1], -ip
   13544:	strdeq	r3, [r1], -ip
   13548:	strdeq	r3, [r1], -ip
   1354c:	strdeq	r3, [r1], -ip
   13550:	strdeq	r3, [r1], -ip
   13554:	strdeq	r3, [r1], -ip
   13558:	strdeq	r3, [r1], -ip
   1355c:	strdeq	r3, [r1], -ip
   13560:	strdeq	r3, [r1], -ip
   13564:	strdeq	r3, [r1], -ip
   13568:	strdeq	r3, [r1], -ip
   1356c:	andeq	r3, r1, r4, lsl r8
   13570:	andeq	r3, r1, ip, lsr r6
   13574:	strdeq	r3, [r1], -ip
   13578:	andeq	r3, r1, r4, lsl r8
   1357c:	strdeq	r3, [r1], -ip
   13580:	andeq	r3, r1, r4, lsl r8
   13584:	strdeq	r3, [r1], -ip
   13588:	strdeq	r3, [r1], -ip
   1358c:	strdeq	r3, [r1], -ip
   13590:	strdeq	r3, [r1], -ip
   13594:	strdeq	r3, [r1], -ip
   13598:	strdeq	r3, [r1], -ip
   1359c:	strdeq	r3, [r1], -ip
   135a0:	strdeq	r3, [r1], -ip
   135a4:	strdeq	r3, [r1], -ip
   135a8:	strdeq	r3, [r1], -ip
   135ac:	strdeq	r3, [r1], -ip
   135b0:	strdeq	r3, [r1], -ip
   135b4:	strdeq	r3, [r1], -ip
   135b8:	strdeq	r3, [r1], -ip
   135bc:	strdeq	r3, [r1], -ip
   135c0:	strdeq	r3, [r1], -ip
   135c4:	strdeq	r3, [r1], -ip
   135c8:	strdeq	r3, [r1], -ip
   135cc:	strdeq	r3, [r1], -ip
   135d0:	strdeq	r3, [r1], -ip
   135d4:	strdeq	r3, [r1], -ip
   135d8:	strdeq	r3, [r1], -ip
   135dc:	strdeq	r3, [r1], -ip
   135e0:	strdeq	r3, [r1], -ip
   135e4:	strdeq	r3, [r1], -ip
   135e8:	strdeq	r3, [r1], -ip
   135ec:	andeq	r3, r1, r0, lsr #12
   135f0:	andeq	r3, r1, r4, lsl r8
   135f4:	andeq	r3, r1, r0, lsr #12
   135f8:	andeq	r3, r1, r0, lsl r6
   135fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13600:	cmp	r0, #0
   13604:	beq	13864 <__assert_fail@plt+0x24a8>
   13608:	ldr	r0, [fp, #16]
   1360c:	b	13868 <__assert_fail@plt+0x24ac>
   13610:	mov	sl, #0
   13614:	cmp	r7, #0
   13618:	bne	13a80 <__assert_fail@plt+0x26c4>
   1361c:	b	13810 <__assert_fail@plt+0x2454>
   13620:	mov	sl, #0
   13624:	cmn	lr, #1
   13628:	beq	137fc <__assert_fail@plt+0x2440>
   1362c:	cmp	r7, #0
   13630:	cmpeq	lr, #1
   13634:	bne	13a80 <__assert_fail@plt+0x26c4>
   13638:	b	13810 <__assert_fail@plt+0x2454>
   1363c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13640:	cmp	r0, #2
   13644:	bne	13834 <__assert_fail@plt+0x2478>
   13648:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1364c:	tst	r0, #1
   13650:	bne	13fa0 <__assert_fail@plt+0x2be4>
   13654:	mov	r9, #0
   13658:	mov	r0, #92	; 0x5c
   1365c:	b	13848 <__assert_fail@plt+0x248c>
   13660:	mov	r0, #102	; 0x66
   13664:	b	13850 <__assert_fail@plt+0x2494>
   13668:	mov	r2, #116	; 0x74
   1366c:	b	1367c <__assert_fail@plt+0x22c0>
   13670:	mov	r0, #98	; 0x62
   13674:	b	13850 <__assert_fail@plt+0x2494>
   13678:	mov	r2, #114	; 0x72
   1367c:	ldr	r0, [sp, #60]	; 0x3c
   13680:	tst	r0, #1
   13684:	mov	r0, r2
   13688:	bne	13850 <__assert_fail@plt+0x2494>
   1368c:	b	13fa0 <__assert_fail@plt+0x2be4>
   13690:	ldr	r0, [sp, #84]	; 0x54
   13694:	tst	r0, #1
   13698:	beq	1393c <__assert_fail@plt+0x2580>
   1369c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   136a0:	tst	r0, #1
   136a4:	bne	140a8 <__assert_fail@plt+0x2cec>
   136a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   136b0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   136b4:	cmp	r0, #2
   136b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   136bc:	movwne	r0, #1
   136c0:	orr	r0, r0, r3
   136c4:	tst	r0, #1
   136c8:	beq	13dbc <__assert_fail@plt+0x2a00>
   136cc:	mov	r0, r8
   136d0:	b	13dfc <__assert_fail@plt+0x2a40>
   136d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136d8:	mov	r9, #0
   136dc:	mov	r5, #63	; 0x3f
   136e0:	cmp	r0, #5
   136e4:	beq	13a88 <__assert_fail@plt+0x26cc>
   136e8:	cmp	r0, #2
   136ec:	bne	13b48 <__assert_fail@plt+0x278c>
   136f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   136f4:	tst	r0, #1
   136f8:	beq	13b4c <__assert_fail@plt+0x2790>
   136fc:	b	13fa0 <__assert_fail@plt+0x2be4>
   13700:	mov	r0, #118	; 0x76
   13704:	b	13850 <__assert_fail@plt+0x2494>
   13708:	mov	r0, #1
   1370c:	mov	r5, #39	; 0x27
   13710:	str	r0, [sp, #52]	; 0x34
   13714:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13718:	cmp	r0, #2
   1371c:	bne	137a4 <__assert_fail@plt+0x23e8>
   13720:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13724:	tst	r0, #1
   13728:	bne	13fa0 <__assert_fail@plt+0x2be4>
   1372c:	ldr	r3, [sp, #68]	; 0x44
   13730:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13734:	mov	r9, #0
   13738:	clz	r1, r2
   1373c:	cmp	r3, #0
   13740:	mov	r0, r3
   13744:	movwne	r0, #1
   13748:	lsr	r1, r1, #5
   1374c:	orrs	r0, r0, r1
   13750:	moveq	r3, r2
   13754:	moveq	r2, r0
   13758:	cmp	r8, r2
   1375c:	str	r3, [sp, #68]	; 0x44
   13760:	str	r2, [fp, #-52]	; 0xffffffcc
   13764:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13768:	movcc	r0, #39	; 0x27
   1376c:	strbcc	r0, [r1, r8]
   13770:	add	r0, r8, #1
   13774:	cmp	r0, r2
   13778:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1377c:	movcc	r1, #92	; 0x5c
   13780:	strbcc	r1, [r3, r0]
   13784:	add	r0, r8, #2
   13788:	add	r8, r8, #3
   1378c:	cmp	r0, r2
   13790:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13794:	movcc	r1, #39	; 0x27
   13798:	strbcc	r1, [r2, r0]
   1379c:	mov	r0, #0
   137a0:	str	r0, [fp, #-48]	; 0xffffffd0
   137a4:	mov	sl, #1
   137a8:	b	135fc <__assert_fail@plt+0x2240>
   137ac:	ldr	r0, [sp, #32]
   137b0:	cmp	r0, #1
   137b4:	bne	13960 <__assert_fail@plt+0x25a4>
   137b8:	str	lr, [sp, #80]	; 0x50
   137bc:	bl	11278 <__ctype_b_loc@plt>
   137c0:	ldr	r0, [r0]
   137c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   137c8:	mov	r1, #1
   137cc:	add	r0, r0, r5, lsl #1
   137d0:	ldrb	r0, [r0, #1]
   137d4:	ubfx	sl, r0, #6, #1
   137d8:	ldr	r0, [sp, #48]	; 0x30
   137dc:	mov	r2, r1
   137e0:	cmp	r1, #1
   137e4:	orr	r0, sl, r0
   137e8:	bhi	13b54 <__assert_fail@plt+0x2798>
   137ec:	tst	r0, #1
   137f0:	beq	13b54 <__assert_fail@plt+0x2798>
   137f4:	ldr	lr, [sp, #80]	; 0x50
   137f8:	b	135fc <__assert_fail@plt+0x2240>
   137fc:	cmp	r7, #0
   13800:	bne	13a7c <__assert_fail@plt+0x26c0>
   13804:	ldrb	r0, [ip, #1]
   13808:	cmp	r0, #0
   1380c:	bne	13a7c <__assert_fail@plt+0x26c0>
   13810:	mov	r1, #1
   13814:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13818:	cmp	r0, #2
   1381c:	bne	1382c <__assert_fail@plt+0x2470>
   13820:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13824:	tst	r0, #1
   13828:	bne	13fa0 <__assert_fail@plt+0x2be4>
   1382c:	mov	sl, r1
   13830:	b	135fc <__assert_fail@plt+0x2240>
   13834:	ldr	r1, [sp, #44]	; 0x2c
   13838:	mov	r9, #0
   1383c:	mov	r0, #92	; 0x5c
   13840:	cmp	r1, #0
   13844:	beq	13850 <__assert_fail@plt+0x2494>
   13848:	mov	sl, #0
   1384c:	b	13d68 <__assert_fail@plt+0x29ac>
   13850:	ldr	r1, [sp, #84]	; 0x54
   13854:	mov	sl, #0
   13858:	mov	r9, #0
   1385c:	tst	r1, #1
   13860:	bne	1389c <__assert_fail@plt+0x24e0>
   13864:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13868:	cmp	r0, #0
   1386c:	mov	r0, r5
   13870:	beq	13894 <__assert_fail@plt+0x24d8>
   13874:	ldr	r1, [fp, #16]
   13878:	ubfx	r0, r5, #5, #3
   1387c:	mov	r2, #1
   13880:	ldr	r0, [r1, r0, lsl #2]
   13884:	and	r1, r5, #31
   13888:	tst	r0, r2, lsl r1
   1388c:	mov	r0, r5
   13890:	bne	1389c <__assert_fail@plt+0x24e0>
   13894:	cmp	r6, #0
   13898:	beq	13d68 <__assert_fail@plt+0x29ac>
   1389c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   138a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   138a4:	tst	r1, #1
   138a8:	bne	13f7c <__assert_fail@plt+0x2bc0>
   138ac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   138b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138b4:	cmp	r1, #2
   138b8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   138bc:	movwne	r1, #1
   138c0:	orr	r1, r1, r5
   138c4:	tst	r1, #1
   138c8:	bne	1390c <__assert_fail@plt+0x2550>
   138cc:	cmp	r8, r6
   138d0:	mov	r5, #1
   138d4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   138d8:	movcc	r1, #39	; 0x27
   138dc:	strbcc	r1, [r2, r8]
   138e0:	add	r1, r8, #1
   138e4:	cmp	r1, r6
   138e8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   138ec:	movcc	r2, #36	; 0x24
   138f0:	strbcc	r2, [r3, r1]
   138f4:	add	r1, r8, #2
   138f8:	add	r8, r8, #3
   138fc:	cmp	r1, r6
   13900:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13904:	movcc	r2, #39	; 0x27
   13908:	strbcc	r2, [r3, r1]
   1390c:	cmp	r8, r6
   13910:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13914:	movcc	r1, #92	; 0x5c
   13918:	strbcc	r1, [r2, r8]
   1391c:	add	r8, r8, #1
   13920:	cmp	r8, r6
   13924:	and	r4, r4, sl
   13928:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1392c:	strbcc	r0, [r1, r8]
   13930:	add	r8, r8, #1
   13934:	add	r7, r7, #1
   13938:	b	1331c <__assert_fail@plt+0x1f60>
   1393c:	ldr	r0, [sp, #28]
   13940:	mov	sl, #0
   13944:	mov	r9, #0
   13948:	mov	r5, #0
   1394c:	cmp	r0, #0
   13950:	beq	13864 <__assert_fail@plt+0x24a8>
   13954:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13958:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1395c:	b	13934 <__assert_fail@plt+0x2578>
   13960:	mov	r0, #0
   13964:	cmn	lr, #1
   13968:	str	r6, [sp, #76]	; 0x4c
   1396c:	str	r4, [sp, #20]
   13970:	str	r0, [fp, #-36]	; 0xffffffdc
   13974:	str	r0, [fp, #-40]	; 0xffffffd8
   13978:	bne	1398c <__assert_fail@plt+0x25d0>
   1397c:	mov	r0, ip
   13980:	bl	1129c <strlen@plt>
   13984:	ldr	ip, [fp, #-84]	; 0xffffffac
   13988:	mov	lr, r0
   1398c:	add	r0, ip, r7
   13990:	mov	sl, #1
   13994:	mov	r6, #0
   13998:	sub	r4, fp, #40	; 0x28
   1399c:	str	lr, [sp, #80]	; 0x50
   139a0:	str	r0, [sp, #36]	; 0x24
   139a4:	str	r6, [sp, #40]	; 0x28
   139a8:	add	r6, r6, r7
   139ac:	sub	r0, fp, #44	; 0x2c
   139b0:	mov	r3, r4
   139b4:	add	r1, ip, r6
   139b8:	sub	r2, lr, r6
   139bc:	bl	157e4 <__assert_fail@plt+0x4428>
   139c0:	cmp	r0, #0
   139c4:	beq	13ed0 <__assert_fail@plt+0x2b14>
   139c8:	cmn	r0, #1
   139cc:	beq	13e90 <__assert_fail@plt+0x2ad4>
   139d0:	ldr	lr, [sp, #80]	; 0x50
   139d4:	cmn	r0, #2
   139d8:	beq	13e98 <__assert_fail@plt+0x2adc>
   139dc:	ldr	r2, [sp, #56]	; 0x38
   139e0:	cmp	r0, #2
   139e4:	mov	r1, #0
   139e8:	movwcc	r1, #1
   139ec:	eor	r2, r2, #1
   139f0:	orrs	r1, r2, r1
   139f4:	bne	13a40 <__assert_fail@plt+0x2684>
   139f8:	ldr	r1, [sp, #40]	; 0x28
   139fc:	ldr	r2, [sp, #36]	; 0x24
   13a00:	add	ip, r2, r1
   13a04:	mov	r2, #1
   13a08:	ldrb	r3, [ip, r2]
   13a0c:	sub	r6, r3, #94	; 0x5e
   13a10:	cmp	r6, #30
   13a14:	bhi	13a28 <__assert_fail@plt+0x266c>
   13a18:	mov	r4, #1
   13a1c:	mov	r1, #1073741829	; 0x40000005
   13a20:	tst	r1, r4, lsl r6
   13a24:	bne	13f9c <__assert_fail@plt+0x2be0>
   13a28:	sub	r3, r3, #91	; 0x5b
   13a2c:	cmp	r3, #2
   13a30:	bcc	13f9c <__assert_fail@plt+0x2be0>
   13a34:	add	r2, r2, #1
   13a38:	cmp	r2, r0
   13a3c:	bcc	13a08 <__assert_fail@plt+0x264c>
   13a40:	ldr	r6, [sp, #40]	; 0x28
   13a44:	add	r6, r0, r6
   13a48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13a4c:	bl	111ac <iswprint@plt>
   13a50:	cmp	r0, #0
   13a54:	sub	r4, fp, #40	; 0x28
   13a58:	movwne	r0, #1
   13a5c:	and	sl, sl, r0
   13a60:	mov	r0, r4
   13a64:	bl	11140 <mbsinit@plt>
   13a68:	ldr	lr, [sp, #80]	; 0x50
   13a6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a70:	cmp	r0, #0
   13a74:	beq	139a4 <__assert_fail@plt+0x25e8>
   13a78:	b	13ed8 <__assert_fail@plt+0x2b1c>
   13a7c:	mvn	lr, #0
   13a80:	mov	r9, #0
   13a84:	b	135fc <__assert_fail@plt+0x2240>
   13a88:	ldr	r0, [sp, #24]
   13a8c:	cmp	r0, #0
   13a90:	beq	13b48 <__assert_fail@plt+0x278c>
   13a94:	add	r0, r7, #2
   13a98:	cmp	r0, lr
   13a9c:	bcs	13b48 <__assert_fail@plt+0x278c>
   13aa0:	add	r1, ip, r7
   13aa4:	ldrb	r1, [r1, #1]
   13aa8:	cmp	r1, #63	; 0x3f
   13aac:	bne	13b48 <__assert_fail@plt+0x278c>
   13ab0:	ldrb	r5, [ip, r0]
   13ab4:	sub	r1, r5, #33	; 0x21
   13ab8:	cmp	r1, #29
   13abc:	bhi	13b48 <__assert_fail@plt+0x278c>
   13ac0:	movw	r3, #20929	; 0x51c1
   13ac4:	mov	r2, #1
   13ac8:	movt	r3, #14336	; 0x3800
   13acc:	tst	r3, r2, lsl r1
   13ad0:	beq	13b48 <__assert_fail@plt+0x278c>
   13ad4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13ad8:	tst	r1, #1
   13adc:	bne	140b0 <__assert_fail@plt+0x2cf4>
   13ae0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13ae4:	mov	r7, r0
   13ae8:	cmp	r8, r1
   13aec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13af0:	movcc	r1, #63	; 0x3f
   13af4:	strbcc	r1, [r2, r8]
   13af8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13afc:	add	r1, r8, #1
   13b00:	cmp	r1, r2
   13b04:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13b08:	movcc	r2, #34	; 0x22
   13b0c:	strbcc	r2, [r3, r1]
   13b10:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b14:	add	r1, r8, #2
   13b18:	cmp	r1, r2
   13b1c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13b20:	movcc	r2, #34	; 0x22
   13b24:	strbcc	r2, [r3, r1]
   13b28:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b2c:	add	r1, r8, #3
   13b30:	add	r8, r8, #4
   13b34:	cmp	r1, r2
   13b38:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13b3c:	movcc	r2, #63	; 0x3f
   13b40:	strbcc	r2, [r3, r1]
   13b44:	b	13b4c <__assert_fail@plt+0x2790>
   13b48:	mov	r5, #63	; 0x3f
   13b4c:	mov	sl, #0
   13b50:	b	135fc <__assert_fail@plt+0x2240>
   13b54:	str	r0, [sp, #40]	; 0x28
   13b58:	add	r0, r2, r7
   13b5c:	str	r6, [sp, #76]	; 0x4c
   13b60:	add	r1, r7, #1
   13b64:	ldr	lr, [sp, #80]	; 0x50
   13b68:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b6c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13b70:	mov	r3, #0
   13b74:	str	r0, [sp, #36]	; 0x24
   13b78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b7c:	b	13c10 <__assert_fail@plt+0x2854>
   13b80:	str	r0, [sp, #76]	; 0x4c
   13b84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b88:	cmp	r9, #0
   13b8c:	movwne	r9, #1
   13b90:	mvn	r7, r0
   13b94:	orr	r7, r7, r9
   13b98:	tst	r7, #1
   13b9c:	bne	13bec <__assert_fail@plt+0x2830>
   13ba0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13ba4:	cmp	r8, r6
   13ba8:	bcs	13bc0 <__assert_fail@plt+0x2804>
   13bac:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13bb0:	mov	r2, r4
   13bb4:	mov	r4, #39	; 0x27
   13bb8:	strb	r4, [r7, r8]
   13bbc:	mov	r4, r2
   13bc0:	add	r7, r8, #1
   13bc4:	cmp	r7, r6
   13bc8:	bcs	13be0 <__assert_fail@plt+0x2824>
   13bcc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13bd0:	mov	r2, r4
   13bd4:	mov	r4, #39	; 0x27
   13bd8:	strb	r4, [r0, r7]
   13bdc:	mov	r4, r2
   13be0:	add	r8, r8, #2
   13be4:	mov	r0, #0
   13be8:	b	13bf4 <__assert_fail@plt+0x2838>
   13bec:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13bf0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13bf4:	cmp	r8, r6
   13bf8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13bfc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13c00:	strbcc	r5, [r2, r8]
   13c04:	add	r8, r8, #1
   13c08:	ldrb	r5, [ip, r1]
   13c0c:	add	r1, r1, #1
   13c10:	ldr	r2, [sp, #40]	; 0x28
   13c14:	tst	r2, #1
   13c18:	beq	13c54 <__assert_fail@plt+0x2898>
   13c1c:	ldr	r2, [sp, #76]	; 0x4c
   13c20:	str	r0, [fp, #-48]	; 0xffffffd0
   13c24:	tst	r2, #1
   13c28:	beq	13c4c <__assert_fail@plt+0x2890>
   13c2c:	cmp	r8, r6
   13c30:	bcs	13c48 <__assert_fail@plt+0x288c>
   13c34:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13c38:	mov	r2, r4
   13c3c:	mov	r4, #92	; 0x5c
   13c40:	strb	r4, [r6, r8]
   13c44:	mov	r4, r2
   13c48:	add	r8, r8, #1
   13c4c:	mov	r0, #0
   13c50:	b	13d48 <__assert_fail@plt+0x298c>
   13c54:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13c58:	tst	r2, #1
   13c5c:	bne	13fa8 <__assert_fail@plt+0x2bec>
   13c60:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13c64:	cmp	r7, #2
   13c68:	movwne	r3, #1
   13c6c:	orr	r3, r3, r0
   13c70:	tst	r3, #1
   13c74:	bne	13cd0 <__assert_fail@plt+0x2914>
   13c78:	cmp	r8, r6
   13c7c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13c80:	movcc	r3, #39	; 0x27
   13c84:	strbcc	r3, [r2, r8]
   13c88:	add	r3, r8, #1
   13c8c:	cmp	r3, r6
   13c90:	bcs	13ca8 <__assert_fail@plt+0x28ec>
   13c94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c98:	mov	r7, r4
   13c9c:	mov	r4, #36	; 0x24
   13ca0:	strb	r4, [r2, r3]
   13ca4:	mov	r4, r7
   13ca8:	add	r3, r8, #2
   13cac:	cmp	r3, r6
   13cb0:	bcs	13cc8 <__assert_fail@plt+0x290c>
   13cb4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13cb8:	mov	r7, r4
   13cbc:	mov	r4, #39	; 0x27
   13cc0:	strb	r4, [r2, r3]
   13cc4:	mov	r4, r7
   13cc8:	add	r8, r8, #3
   13ccc:	mov	r0, #1
   13cd0:	cmp	r8, r6
   13cd4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13cd8:	movcc	r3, #92	; 0x5c
   13cdc:	strbcc	r3, [r2, r8]
   13ce0:	add	r3, r8, #1
   13ce4:	cmp	r3, r6
   13ce8:	bcs	13d08 <__assert_fail@plt+0x294c>
   13cec:	mov	r2, r4
   13cf0:	and	r7, r5, #192	; 0xc0
   13cf4:	mov	r4, #48	; 0x30
   13cf8:	orr	r7, r4, r7, lsr #6
   13cfc:	mov	r4, r2
   13d00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d04:	strb	r7, [r2, r3]
   13d08:	add	r3, r8, #2
   13d0c:	cmp	r3, r6
   13d10:	bcs	13d30 <__assert_fail@plt+0x2974>
   13d14:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d18:	mov	r6, r4
   13d1c:	lsr	r7, r5, #3
   13d20:	mov	r4, #6
   13d24:	bfi	r7, r4, #3, #29
   13d28:	mov	r4, r6
   13d2c:	strb	r7, [r2, r3]
   13d30:	str	r0, [fp, #-48]	; 0xffffffd0
   13d34:	ldr	r0, [sp, #76]	; 0x4c
   13d38:	mov	r3, #6
   13d3c:	add	r8, r8, #3
   13d40:	bfi	r5, r3, #3, #29
   13d44:	mov	r3, #1
   13d48:	ldr	r2, [sp, #36]	; 0x24
   13d4c:	and	r9, r3, #1
   13d50:	cmp	r2, r1
   13d54:	bhi	13b80 <__assert_fail@plt+0x27c4>
   13d58:	cmp	r9, #0
   13d5c:	sub	r7, r1, #1
   13d60:	mov	r0, r5
   13d64:	movwne	r9, #1
   13d68:	cmp	r9, #0
   13d6c:	bne	13db0 <__assert_fail@plt+0x29f4>
   13d70:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d74:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13d78:	tst	r5, #1
   13d7c:	beq	13920 <__assert_fail@plt+0x2564>
   13d80:	cmp	r8, r6
   13d84:	mov	r5, #0
   13d88:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13d8c:	movcc	r1, #39	; 0x27
   13d90:	strbcc	r1, [r2, r8]
   13d94:	add	r1, r8, #1
   13d98:	add	r8, r8, #2
   13d9c:	cmp	r1, r6
   13da0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13da4:	movcc	r2, #39	; 0x27
   13da8:	strbcc	r2, [r3, r1]
   13dac:	b	13920 <__assert_fail@plt+0x2564>
   13db0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13db4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13db8:	b	13920 <__assert_fail@plt+0x2564>
   13dbc:	cmp	r8, r1
   13dc0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13dc4:	movcc	r0, #39	; 0x27
   13dc8:	strbcc	r0, [r2, r8]
   13dcc:	add	r0, r8, #1
   13dd0:	cmp	r0, r1
   13dd4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13dd8:	movcc	r2, #36	; 0x24
   13ddc:	strbcc	r2, [r3, r0]
   13de0:	add	r0, r8, #2
   13de4:	cmp	r0, r1
   13de8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13dec:	movcc	r2, #39	; 0x27
   13df0:	strbcc	r2, [r3, r0]
   13df4:	add	r0, r8, #3
   13df8:	mov	r3, #1
   13dfc:	cmp	r0, r1
   13e00:	add	r8, r0, #1
   13e04:	str	r3, [fp, #-48]	; 0xffffffd0
   13e08:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e0c:	movcc	r1, #92	; 0x5c
   13e10:	strbcc	r1, [r2, r0]
   13e14:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e18:	cmp	r1, #2
   13e1c:	beq	13e80 <__assert_fail@plt+0x2ac4>
   13e20:	add	r1, r7, #1
   13e24:	mov	sl, #0
   13e28:	mov	r9, #1
   13e2c:	mov	r5, #48	; 0x30
   13e30:	cmp	r1, lr
   13e34:	bcs	135fc <__assert_fail@plt+0x2240>
   13e38:	ldrb	r1, [ip, r1]
   13e3c:	sub	r1, r1, #48	; 0x30
   13e40:	uxtb	r1, r1
   13e44:	cmp	r1, #9
   13e48:	bhi	135fc <__assert_fail@plt+0x2240>
   13e4c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13e50:	cmp	r8, r1
   13e54:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13e58:	movcc	r1, #48	; 0x30
   13e5c:	strbcc	r1, [r2, r8]
   13e60:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13e64:	add	r1, r0, #2
   13e68:	add	r8, r0, #3
   13e6c:	cmp	r1, r2
   13e70:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13e74:	movcc	r2, #48	; 0x30
   13e78:	strbcc	r2, [r3, r1]
   13e7c:	b	135fc <__assert_fail@plt+0x2240>
   13e80:	mov	r0, #48	; 0x30
   13e84:	mov	r9, #1
   13e88:	mov	sl, #0
   13e8c:	b	13894 <__assert_fail@plt+0x24d8>
   13e90:	mov	sl, #0
   13e94:	b	13ed0 <__assert_fail@plt+0x2b14>
   13e98:	mov	sl, #0
   13e9c:	cmp	lr, r6
   13ea0:	bls	13ed0 <__assert_fail@plt+0x2b14>
   13ea4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ea8:	ldr	r6, [sp, #40]	; 0x28
   13eac:	ldr	r0, [sp, #36]	; 0x24
   13eb0:	ldrb	r0, [r0, r6]
   13eb4:	cmp	r0, #0
   13eb8:	beq	13ed8 <__assert_fail@plt+0x2b1c>
   13ebc:	add	r6, r6, #1
   13ec0:	add	r0, r7, r6
   13ec4:	cmp	r0, lr
   13ec8:	bcc	13eac <__assert_fail@plt+0x2af0>
   13ecc:	b	13ed8 <__assert_fail@plt+0x2b1c>
   13ed0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ed4:	ldr	r6, [sp, #40]	; 0x28
   13ed8:	mov	r1, r6
   13edc:	ldr	r4, [sp, #20]
   13ee0:	ldr	r6, [sp, #76]	; 0x4c
   13ee4:	b	137d8 <__assert_fail@plt+0x241c>
   13ee8:	mov	lr, r7
   13eec:	b	13ef4 <__assert_fail@plt+0x2b38>
   13ef0:	mvn	lr, #0
   13ef4:	ldr	r9, [fp, #-64]	; 0xffffffc0
   13ef8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13efc:	eor	r0, r9, #2
   13f00:	orr	r0, r0, r8
   13f04:	clz	r0, r0
   13f08:	lsr	r0, r0, #5
   13f0c:	tst	r1, r0
   13f10:	bne	1400c <__assert_fail@plt+0x2c50>
   13f14:	mov	r0, r1
   13f18:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13f1c:	cmp	r9, #2
   13f20:	movwne	r1, #1
   13f24:	orr	r0, r0, r1
   13f28:	tst	r0, #1
   13f2c:	bne	1404c <__assert_fail@plt+0x2c90>
   13f30:	ldr	r0, [sp, #52]	; 0x34
   13f34:	ldr	r1, [sp, #68]	; 0x44
   13f38:	str	lr, [sp, #80]	; 0x50
   13f3c:	eor	r0, r0, #1
   13f40:	tst	r0, #1
   13f44:	bne	1404c <__assert_fail@plt+0x2c90>
   13f48:	tst	r4, #1
   13f4c:	bne	14014 <__assert_fail@plt+0x2c58>
   13f50:	mov	r7, #0
   13f54:	cmp	r1, #0
   13f58:	beq	14044 <__assert_fail@plt+0x2c88>
   13f5c:	ldr	r0, [sp, #84]	; 0x54
   13f60:	mov	r3, #0
   13f64:	cmp	r6, #0
   13f68:	mov	r2, #0
   13f6c:	mov	r4, r1
   13f70:	str	r3, [fp, #-72]	; 0xffffffb8
   13f74:	beq	130b0 <__assert_fail@plt+0x1cf4>
   13f78:	b	1404c <__assert_fail@plt+0x2c90>
   13f7c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13f80:	b	13fa8 <__assert_fail@plt+0x2bec>
   13f84:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f88:	mov	r2, #1
   13f8c:	mov	lr, r4
   13f90:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13f94:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13f98:	b	13fac <__assert_fail@plt+0x2bf0>
   13f9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13fa0:	mov	r7, #2
   13fa4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13fa8:	ldr	r2, [sp, #84]	; 0x54
   13fac:	mov	r0, #0
   13fb0:	ldr	r1, [fp, #12]
   13fb4:	tst	r2, #1
   13fb8:	mov	r2, r7
   13fbc:	mov	r3, lr
   13fc0:	str	r0, [sp, #8]
   13fc4:	ldr	r0, [sp, #64]	; 0x40
   13fc8:	movwne	r2, #4
   13fcc:	cmp	r7, #2
   13fd0:	movne	r2, r7
   13fd4:	str	r2, [sp]
   13fd8:	mov	r2, ip
   13fdc:	bic	r1, r1, #2
   13fe0:	str	r0, [sp, #12]
   13fe4:	ldr	r0, [sp, #72]	; 0x48
   13fe8:	str	r1, [sp, #4]
   13fec:	mov	r1, r6
   13ff0:	str	r0, [sp, #16]
   13ff4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ff8:	bl	13038 <__assert_fail@plt+0x1c7c>
   13ffc:	mov	r8, r0
   14000:	mov	r0, r8
   14004:	sub	sp, fp, #28
   14008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1400c:	mov	r7, #2
   14010:	b	13fa8 <__assert_fail@plt+0x2bec>
   14014:	mov	r0, #5
   14018:	ldr	r2, [fp, #-84]	; 0xffffffac
   1401c:	ldr	r3, [sp, #80]	; 0x50
   14020:	str	r0, [sp]
   14024:	ldr	r0, [fp, #12]
   14028:	str	r0, [sp, #4]
   1402c:	ldr	r0, [fp, #16]
   14030:	str	r0, [sp, #8]
   14034:	ldr	r0, [sp, #64]	; 0x40
   14038:	str	r0, [sp, #12]
   1403c:	ldr	r0, [sp, #72]	; 0x48
   14040:	b	13ff0 <__assert_fail@plt+0x2c34>
   14044:	mov	r0, #0
   14048:	str	r0, [fp, #-72]	; 0xffffffb8
   1404c:	ldr	r1, [sp, #92]	; 0x5c
   14050:	cmp	r1, #0
   14054:	beq	14094 <__assert_fail@plt+0x2cd8>
   14058:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1405c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14060:	tst	r0, #1
   14064:	bne	14098 <__assert_fail@plt+0x2cdc>
   14068:	ldrb	r0, [r1]
   1406c:	cmp	r0, #0
   14070:	beq	14098 <__assert_fail@plt+0x2cdc>
   14074:	add	r1, r1, #1
   14078:	cmp	r8, r6
   1407c:	strbcc	r0, [r2, r8]
   14080:	add	r8, r8, #1
   14084:	ldrb	r0, [r1], #1
   14088:	cmp	r0, #0
   1408c:	bne	14078 <__assert_fail@plt+0x2cbc>
   14090:	b	14098 <__assert_fail@plt+0x2cdc>
   14094:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14098:	cmp	r8, r6
   1409c:	movcc	r0, #0
   140a0:	strbcc	r0, [r2, r8]
   140a4:	b	14000 <__assert_fail@plt+0x2c44>
   140a8:	mov	r2, #1
   140ac:	b	13f90 <__assert_fail@plt+0x2bd4>
   140b0:	mov	r7, #5
   140b4:	b	13fa4 <__assert_fail@plt+0x2be8>
   140b8:	bl	113a4 <abort@plt>
   140bc:	mov	r3, r2
   140c0:	mov	r2, #0
   140c4:	b	140c8 <__assert_fail@plt+0x2d0c>
   140c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140cc:	add	fp, sp, #28
   140d0:	sub	sp, sp, #36	; 0x24
   140d4:	movw	r8, #29192	; 0x7208
   140d8:	cmp	r3, #0
   140dc:	mov	r4, r2
   140e0:	str	r2, [sp, #24]
   140e4:	mov	r5, r1
   140e8:	mov	r6, r0
   140ec:	str	r0, [sp, #20]
   140f0:	movt	r8, #2
   140f4:	movne	r8, r3
   140f8:	bl	112b4 <__errno_location@plt>
   140fc:	str	r0, [sp, #28]
   14100:	cmp	r4, #0
   14104:	add	sl, r8, #8
   14108:	ldm	r8, {r3, r9}
   1410c:	ldr	r7, [r0]
   14110:	ldr	r1, [r8, #40]	; 0x28
   14114:	ldr	r2, [r8, #44]	; 0x2c
   14118:	mov	r0, #0
   1411c:	orreq	r9, r9, #1
   14120:	str	r7, [sp, #32]
   14124:	mov	r7, r5
   14128:	stm	sp, {r3, r9, sl}
   1412c:	str	r1, [sp, #12]
   14130:	str	r2, [sp, #16]
   14134:	mov	r1, #0
   14138:	mov	r2, r6
   1413c:	mov	r3, r5
   14140:	bl	13038 <__assert_fail@plt+0x1c7c>
   14144:	add	r4, r0, #1
   14148:	mov	r5, r0
   1414c:	mov	r0, r4
   14150:	bl	15058 <__assert_fail@plt+0x3c9c>
   14154:	mov	r6, r0
   14158:	ldr	r0, [r8]
   1415c:	ldr	r2, [r8, #44]	; 0x2c
   14160:	ldr	r1, [r8, #40]	; 0x28
   14164:	mov	r3, r7
   14168:	stm	sp, {r0, r9, sl}
   1416c:	str	r2, [sp, #16]
   14170:	str	r1, [sp, #12]
   14174:	mov	r0, r6
   14178:	mov	r1, r4
   1417c:	ldr	r2, [sp, #20]
   14180:	bl	13038 <__assert_fail@plt+0x1c7c>
   14184:	ldr	r0, [sp, #24]
   14188:	ldr	r1, [sp, #32]
   1418c:	ldr	r2, [sp, #28]
   14190:	cmp	r0, #0
   14194:	str	r1, [r2]
   14198:	strne	r5, [r0]
   1419c:	mov	r0, r6
   141a0:	sub	sp, fp, #28
   141a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   141ac:	add	fp, sp, #24
   141b0:	movw	r5, #28972	; 0x712c
   141b4:	movw	r8, #28968	; 0x7128
   141b8:	movt	r5, #2
   141bc:	movt	r8, #2
   141c0:	ldr	r0, [r5]
   141c4:	ldr	r4, [r8]
   141c8:	cmp	r0, #2
   141cc:	blt	141f8 <__assert_fail@plt+0x2e3c>
   141d0:	add	r7, r4, #12
   141d4:	mov	r6, #0
   141d8:	ldr	r0, [r7, r6, lsl #3]
   141dc:	bl	12cbc <__assert_fail@plt+0x1900>
   141e0:	ldr	r1, [r5]
   141e4:	add	r2, r6, #2
   141e8:	add	r0, r6, #1
   141ec:	mov	r6, r0
   141f0:	cmp	r2, r1
   141f4:	blt	141d8 <__assert_fail@plt+0x2e1c>
   141f8:	ldr	r0, [r4, #4]
   141fc:	movw	r7, #29240	; 0x7238
   14200:	movt	r7, #2
   14204:	cmp	r0, r7
   14208:	beq	14220 <__assert_fail@plt+0x2e64>
   1420c:	bl	12cbc <__assert_fail@plt+0x1900>
   14210:	movw	r0, #28976	; 0x7130
   14214:	mov	r6, #256	; 0x100
   14218:	movt	r0, #2
   1421c:	strd	r6, [r0]
   14220:	movw	r6, #28976	; 0x7130
   14224:	movt	r6, #2
   14228:	cmp	r4, r6
   1422c:	beq	1423c <__assert_fail@plt+0x2e80>
   14230:	mov	r0, r4
   14234:	bl	12cbc <__assert_fail@plt+0x1900>
   14238:	str	r6, [r8]
   1423c:	mov	r0, #1
   14240:	str	r0, [r5]
   14244:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14248:	movw	r3, #29192	; 0x7208
   1424c:	mvn	r2, #0
   14250:	movt	r3, #2
   14254:	b	14258 <__assert_fail@plt+0x2e9c>
   14258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1425c:	add	fp, sp, #28
   14260:	sub	sp, sp, #44	; 0x2c
   14264:	mov	r7, r3
   14268:	str	r2, [sp, #36]	; 0x24
   1426c:	str	r1, [sp, #32]
   14270:	mov	r5, r0
   14274:	bl	112b4 <__errno_location@plt>
   14278:	cmp	r5, #0
   1427c:	blt	143e8 <__assert_fail@plt+0x302c>
   14280:	cmn	r5, #-2147483647	; 0x80000001
   14284:	beq	143e8 <__assert_fail@plt+0x302c>
   14288:	movw	r8, #28972	; 0x712c
   1428c:	movw	r4, #28968	; 0x7128
   14290:	str	r0, [sp, #28]
   14294:	ldr	r0, [r0]
   14298:	movt	r8, #2
   1429c:	movt	r4, #2
   142a0:	ldr	r1, [r8]
   142a4:	ldr	r6, [r4]
   142a8:	str	r0, [sp, #24]
   142ac:	cmp	r1, r5
   142b0:	ble	142bc <__assert_fail@plt+0x2f00>
   142b4:	mov	sl, r6
   142b8:	b	14324 <__assert_fail@plt+0x2f68>
   142bc:	movw	r9, #28976	; 0x7130
   142c0:	mov	r0, #8
   142c4:	add	r2, r5, #1
   142c8:	str	r1, [fp, #-32]	; 0xffffffe0
   142cc:	mvn	r3, #-2147483648	; 0x80000000
   142d0:	movt	r9, #2
   142d4:	str	r0, [sp]
   142d8:	sub	r2, r2, r1
   142dc:	sub	r1, fp, #32
   142e0:	subs	r0, r6, r9
   142e4:	movne	r0, r6
   142e8:	bl	15188 <__assert_fail@plt+0x3dcc>
   142ec:	cmp	r6, r9
   142f0:	mov	sl, r0
   142f4:	str	r0, [r4]
   142f8:	ldrdeq	r0, [r9]
   142fc:	stmeq	sl, {r0, r1}
   14300:	ldr	r1, [r8]
   14304:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14308:	add	r0, sl, r1, lsl #3
   1430c:	sub	r1, r2, r1
   14310:	lsl	r2, r1, #3
   14314:	mov	r1, #0
   14318:	bl	112d8 <memset@plt>
   1431c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14320:	str	r0, [r8]
   14324:	mov	r9, sl
   14328:	ldr	r6, [r9, r5, lsl #3]!
   1432c:	ldr	r4, [r9, #4]!
   14330:	ldm	r7, {r0, r1}
   14334:	ldr	r2, [r7, #40]	; 0x28
   14338:	ldr	r3, [r7, #44]	; 0x2c
   1433c:	orr	r8, r1, #1
   14340:	add	r1, r7, #8
   14344:	stm	sp, {r0, r8}
   14348:	add	r0, sp, #8
   1434c:	str	r1, [sp, #20]
   14350:	stm	r0, {r1, r2, r3}
   14354:	mov	r0, r4
   14358:	mov	r1, r6
   1435c:	ldr	r2, [sp, #32]
   14360:	ldr	r3, [sp, #36]	; 0x24
   14364:	bl	13038 <__assert_fail@plt+0x1c7c>
   14368:	cmp	r6, r0
   1436c:	bhi	143d0 <__assert_fail@plt+0x3014>
   14370:	add	r6, r0, #1
   14374:	movw	r0, #29240	; 0x7238
   14378:	movt	r0, #2
   1437c:	str	r6, [sl, r5, lsl #3]
   14380:	cmp	r4, r0
   14384:	beq	14390 <__assert_fail@plt+0x2fd4>
   14388:	mov	r0, r4
   1438c:	bl	12cbc <__assert_fail@plt+0x1900>
   14390:	mov	r0, r6
   14394:	bl	15058 <__assert_fail@plt+0x3c9c>
   14398:	str	r0, [r9]
   1439c:	mov	r4, r0
   143a0:	add	r3, sp, #8
   143a4:	ldr	r0, [r7]
   143a8:	ldr	r1, [r7, #40]	; 0x28
   143ac:	ldr	r2, [r7, #44]	; 0x2c
   143b0:	stm	sp, {r0, r8}
   143b4:	ldr	r0, [sp, #20]
   143b8:	stm	r3, {r0, r1, r2}
   143bc:	mov	r0, r4
   143c0:	mov	r1, r6
   143c4:	ldr	r2, [sp, #32]
   143c8:	ldr	r3, [sp, #36]	; 0x24
   143cc:	bl	13038 <__assert_fail@plt+0x1c7c>
   143d0:	ldr	r0, [sp, #28]
   143d4:	ldr	r1, [sp, #24]
   143d8:	str	r1, [r0]
   143dc:	mov	r0, r4
   143e0:	sub	sp, fp, #28
   143e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143e8:	bl	113a4 <abort@plt>
   143ec:	movw	r3, #29192	; 0x7208
   143f0:	movt	r3, #2
   143f4:	b	14258 <__assert_fail@plt+0x2e9c>
   143f8:	movw	r3, #29192	; 0x7208
   143fc:	mov	r1, r0
   14400:	mov	r0, #0
   14404:	mvn	r2, #0
   14408:	movt	r3, #2
   1440c:	b	14258 <__assert_fail@plt+0x2e9c>
   14410:	movw	r3, #29192	; 0x7208
   14414:	mov	r2, r1
   14418:	mov	r1, r0
   1441c:	mov	r0, #0
   14420:	movt	r3, #2
   14424:	b	14258 <__assert_fail@plt+0x2e9c>
   14428:	push	{fp, lr}
   1442c:	mov	fp, sp
   14430:	sub	sp, sp, #48	; 0x30
   14434:	vmov.i32	q8, #0	; 0x00000000
   14438:	mov	ip, #32
   1443c:	mov	r3, sp
   14440:	mov	lr, r2
   14444:	cmp	r1, #10
   14448:	add	r2, r3, #16
   1444c:	vst1.64	{d16-d17}, [r3], ip
   14450:	vst1.64	{d16-d17}, [r3]
   14454:	vst1.64	{d16-d17}, [r2]
   14458:	beq	14478 <__assert_fail@plt+0x30bc>
   1445c:	str	r1, [sp]
   14460:	mov	r3, sp
   14464:	mov	r1, lr
   14468:	mvn	r2, #0
   1446c:	bl	14258 <__assert_fail@plt+0x2e9c>
   14470:	mov	sp, fp
   14474:	pop	{fp, pc}
   14478:	bl	113a4 <abort@plt>
   1447c:	push	{r4, sl, fp, lr}
   14480:	add	fp, sp, #8
   14484:	sub	sp, sp, #48	; 0x30
   14488:	mov	ip, r3
   1448c:	mov	r3, sp
   14490:	vmov.i32	q8, #0	; 0x00000000
   14494:	mov	lr, #32
   14498:	cmp	r1, #10
   1449c:	add	r4, r3, #16
   144a0:	vst1.64	{d16-d17}, [r3], lr
   144a4:	vst1.64	{d16-d17}, [r3]
   144a8:	vst1.64	{d16-d17}, [r4]
   144ac:	beq	144cc <__assert_fail@plt+0x3110>
   144b0:	str	r1, [sp]
   144b4:	mov	r1, r2
   144b8:	mov	r3, sp
   144bc:	mov	r2, ip
   144c0:	bl	14258 <__assert_fail@plt+0x2e9c>
   144c4:	sub	sp, fp, #8
   144c8:	pop	{r4, sl, fp, pc}
   144cc:	bl	113a4 <abort@plt>
   144d0:	mov	r2, r1
   144d4:	mov	r1, r0
   144d8:	mov	r0, #0
   144dc:	b	14428 <__assert_fail@plt+0x306c>
   144e0:	mov	r3, r2
   144e4:	mov	r2, r1
   144e8:	mov	r1, r0
   144ec:	mov	r0, #0
   144f0:	b	1447c <__assert_fail@plt+0x30c0>
   144f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   144f8:	add	fp, sp, #24
   144fc:	sub	sp, sp, #48	; 0x30
   14500:	movw	r8, #29192	; 0x7208
   14504:	mov	lr, r0
   14508:	mov	r3, sp
   1450c:	mov	ip, r1
   14510:	movt	r8, #2
   14514:	mov	r1, r3
   14518:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1451c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14520:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14524:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14528:	ubfx	r0, r2, #5, #3
   1452c:	and	r2, r2, #31
   14530:	mov	r4, #1
   14534:	add	r0, r3, r0, lsl #2
   14538:	ldr	r1, [r0, #8]
   1453c:	bic	r4, r4, r1, lsr r2
   14540:	eor	r1, r1, r4, lsl r2
   14544:	mov	r2, ip
   14548:	str	r1, [r0, #8]
   1454c:	mov	r0, #0
   14550:	mov	r1, lr
   14554:	bl	14258 <__assert_fail@plt+0x2e9c>
   14558:	sub	sp, fp, #24
   1455c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14560:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14564:	add	fp, sp, #24
   14568:	sub	sp, sp, #48	; 0x30
   1456c:	movw	lr, #29192	; 0x7208
   14570:	mov	ip, r0
   14574:	mov	r3, sp
   14578:	movt	lr, #2
   1457c:	mov	r2, r3
   14580:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14584:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14588:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1458c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14590:	ubfx	r0, r1, #5, #3
   14594:	and	r1, r1, #31
   14598:	mov	r7, #1
   1459c:	add	r0, r3, r0, lsl #2
   145a0:	ldr	r2, [r0, #8]
   145a4:	bic	r7, r7, r2, lsr r1
   145a8:	eor	r1, r2, r7, lsl r1
   145ac:	mvn	r2, #0
   145b0:	str	r1, [r0, #8]
   145b4:	mov	r0, #0
   145b8:	mov	r1, ip
   145bc:	bl	14258 <__assert_fail@plt+0x2e9c>
   145c0:	sub	sp, fp, #24
   145c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145c8:	push	{r4, r5, r6, r7, fp, lr}
   145cc:	add	fp, sp, #16
   145d0:	sub	sp, sp, #48	; 0x30
   145d4:	movw	lr, #29192	; 0x7208
   145d8:	mov	ip, r0
   145dc:	mov	r3, sp
   145e0:	movt	lr, #2
   145e4:	mov	r2, r3
   145e8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   145ec:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   145f0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   145f4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   145f8:	mov	r1, ip
   145fc:	mvn	r2, #0
   14600:	ldr	r0, [sp, #12]
   14604:	orr	r0, r0, #67108864	; 0x4000000
   14608:	str	r0, [sp, #12]
   1460c:	mov	r0, #0
   14610:	bl	14258 <__assert_fail@plt+0x2e9c>
   14614:	sub	sp, fp, #16
   14618:	pop	{r4, r5, r6, r7, fp, pc}
   1461c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14620:	add	fp, sp, #24
   14624:	sub	sp, sp, #48	; 0x30
   14628:	movw	r8, #29192	; 0x7208
   1462c:	mov	ip, r1
   14630:	mov	lr, r0
   14634:	mov	r3, sp
   14638:	movt	r8, #2
   1463c:	mov	r2, r3
   14640:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14644:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14648:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1464c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14650:	mov	r1, lr
   14654:	mov	r2, ip
   14658:	ldr	r0, [sp, #12]
   1465c:	orr	r0, r0, #67108864	; 0x4000000
   14660:	str	r0, [sp, #12]
   14664:	mov	r0, #0
   14668:	bl	14258 <__assert_fail@plt+0x2e9c>
   1466c:	sub	sp, fp, #24
   14670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14674:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14678:	add	fp, sp, #24
   1467c:	sub	sp, sp, #96	; 0x60
   14680:	mov	lr, sp
   14684:	vmov.i32	q8, #0	; 0x00000000
   14688:	mov	ip, r2
   1468c:	cmp	r1, #10
   14690:	add	r3, lr, #16
   14694:	mov	r2, lr
   14698:	vst1.64	{d16-d17}, [r3]
   1469c:	mov	r3, #28
   146a0:	vst1.64	{d16-d17}, [r2], r3
   146a4:	vst1.32	{d16-d17}, [r2]
   146a8:	beq	146e8 <__assert_fail@plt+0x332c>
   146ac:	str	r1, [sp, #48]	; 0x30
   146b0:	add	r3, sp, #48	; 0x30
   146b4:	ldm	lr!, {r2, r4, r5, r6, r7}
   146b8:	add	r1, r3, #4
   146bc:	stmia	r1!, {r2, r4, r5, r6, r7}
   146c0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   146c4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   146c8:	mvn	r2, #0
   146cc:	ldr	r1, [sp, #60]	; 0x3c
   146d0:	orr	r1, r1, #67108864	; 0x4000000
   146d4:	str	r1, [sp, #60]	; 0x3c
   146d8:	mov	r1, ip
   146dc:	bl	14258 <__assert_fail@plt+0x2e9c>
   146e0:	sub	sp, fp, #24
   146e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146e8:	bl	113a4 <abort@plt>
   146ec:	push	{fp, lr}
   146f0:	mov	fp, sp
   146f4:	sub	sp, sp, #8
   146f8:	mvn	ip, #0
   146fc:	str	ip, [sp]
   14700:	bl	1470c <__assert_fail@plt+0x3350>
   14704:	mov	sp, fp
   14708:	pop	{fp, pc}
   1470c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14710:	add	fp, sp, #24
   14714:	sub	sp, sp, #48	; 0x30
   14718:	movw	ip, #29192	; 0x7208
   1471c:	mov	lr, r3
   14720:	mov	r3, sp
   14724:	cmp	r1, #0
   14728:	movt	ip, #2
   1472c:	cmpne	r2, #0
   14730:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14734:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14738:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1473c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14740:	mov	r3, #10
   14744:	str	r3, [sp]
   14748:	bne	14750 <__assert_fail@plt+0x3394>
   1474c:	bl	113a4 <abort@plt>
   14750:	ldr	ip, [fp, #8]
   14754:	str	r2, [sp, #44]	; 0x2c
   14758:	str	r1, [sp, #40]	; 0x28
   1475c:	mov	r3, sp
   14760:	mov	r1, lr
   14764:	mov	r2, ip
   14768:	bl	14258 <__assert_fail@plt+0x2e9c>
   1476c:	sub	sp, fp, #24
   14770:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14774:	push	{fp, lr}
   14778:	mov	fp, sp
   1477c:	sub	sp, sp, #8
   14780:	mov	r3, r2
   14784:	mov	r2, r1
   14788:	mov	r1, r0
   1478c:	mvn	r0, #0
   14790:	str	r0, [sp]
   14794:	mov	r0, #0
   14798:	bl	1470c <__assert_fail@plt+0x3350>
   1479c:	mov	sp, fp
   147a0:	pop	{fp, pc}
   147a4:	push	{fp, lr}
   147a8:	mov	fp, sp
   147ac:	sub	sp, sp, #8
   147b0:	mov	ip, r2
   147b4:	mov	r2, r1
   147b8:	mov	r1, r0
   147bc:	str	r3, [sp]
   147c0:	mov	r0, #0
   147c4:	mov	r3, ip
   147c8:	bl	1470c <__assert_fail@plt+0x3350>
   147cc:	mov	sp, fp
   147d0:	pop	{fp, pc}
   147d4:	movw	r3, #28984	; 0x7138
   147d8:	movt	r3, #2
   147dc:	b	14258 <__assert_fail@plt+0x2e9c>
   147e0:	movw	r3, #28984	; 0x7138
   147e4:	mov	r2, r1
   147e8:	mov	r1, r0
   147ec:	mov	r0, #0
   147f0:	movt	r3, #2
   147f4:	b	14258 <__assert_fail@plt+0x2e9c>
   147f8:	movw	r3, #28984	; 0x7138
   147fc:	mvn	r2, #0
   14800:	movt	r3, #2
   14804:	b	14258 <__assert_fail@plt+0x2e9c>
   14808:	movw	r3, #28984	; 0x7138
   1480c:	mov	r1, r0
   14810:	mov	r0, #0
   14814:	mvn	r2, #0
   14818:	movt	r3, #2
   1481c:	b	14258 <__assert_fail@plt+0x2e9c>
   14820:	push	{r4, r5, fp, lr}
   14824:	add	fp, sp, #8
   14828:	mov	r5, r0
   1482c:	mov	r4, r1
   14830:	mov	r0, #0
   14834:	mov	r2, #5
   14838:	mov	r1, r5
   1483c:	bl	11170 <dcgettext@plt>
   14840:	cmp	r0, r5
   14844:	popne	{r4, r5, fp, pc}
   14848:	bl	157ac <__assert_fail@plt+0x43f0>
   1484c:	ldrb	r1, [r0]
   14850:	and	r1, r1, #223	; 0xdf
   14854:	cmp	r1, #71	; 0x47
   14858:	beq	148c0 <__assert_fail@plt+0x3504>
   1485c:	cmp	r1, #85	; 0x55
   14860:	bne	148e4 <__assert_fail@plt+0x3528>
   14864:	ldrb	r1, [r0, #1]
   14868:	and	r1, r1, #223	; 0xdf
   1486c:	cmp	r1, #84	; 0x54
   14870:	bne	148e4 <__assert_fail@plt+0x3528>
   14874:	ldrb	r1, [r0, #2]
   14878:	and	r1, r1, #223	; 0xdf
   1487c:	cmp	r1, #70	; 0x46
   14880:	ldrbeq	r1, [r0, #3]
   14884:	cmpeq	r1, #45	; 0x2d
   14888:	bne	148e4 <__assert_fail@plt+0x3528>
   1488c:	ldrb	r1, [r0, #4]
   14890:	cmp	r1, #56	; 0x38
   14894:	ldrbeq	r0, [r0, #5]
   14898:	cmpeq	r0, #0
   1489c:	bne	148e4 <__assert_fail@plt+0x3528>
   148a0:	ldrb	r1, [r5]
   148a4:	movw	r2, #25976	; 0x6578
   148a8:	movw	r0, #25980	; 0x657c
   148ac:	movt	r2, #1
   148b0:	movt	r0, #1
   148b4:	cmp	r1, #96	; 0x60
   148b8:	moveq	r0, r2
   148bc:	pop	{r4, r5, fp, pc}
   148c0:	ldrb	r1, [r0, #1]
   148c4:	and	r1, r1, #223	; 0xdf
   148c8:	cmp	r1, #66	; 0x42
   148cc:	bne	148e4 <__assert_fail@plt+0x3528>
   148d0:	ldrb	r1, [r0, #2]
   148d4:	cmp	r1, #49	; 0x31
   148d8:	ldrbeq	r1, [r0, #3]
   148dc:	cmpeq	r1, #56	; 0x38
   148e0:	beq	14900 <__assert_fail@plt+0x3544>
   148e4:	movw	r1, #25970	; 0x6572
   148e8:	movw	r0, #25974	; 0x6576
   148ec:	cmp	r4, #9
   148f0:	movt	r1, #1
   148f4:	movt	r0, #1
   148f8:	moveq	r0, r1
   148fc:	pop	{r4, r5, fp, pc}
   14900:	ldrb	r1, [r0, #4]
   14904:	cmp	r1, #48	; 0x30
   14908:	ldrbeq	r1, [r0, #5]
   1490c:	cmpeq	r1, #51	; 0x33
   14910:	bne	148e4 <__assert_fail@plt+0x3528>
   14914:	ldrb	r1, [r0, #6]
   14918:	cmp	r1, #48	; 0x30
   1491c:	ldrbeq	r0, [r0, #7]
   14920:	cmpeq	r0, #0
   14924:	bne	148e4 <__assert_fail@plt+0x3528>
   14928:	ldrb	r1, [r5]
   1492c:	movw	r2, #25984	; 0x6580
   14930:	movw	r0, #25988	; 0x6584
   14934:	movt	r2, #1
   14938:	movt	r0, #1
   1493c:	b	148b4 <__assert_fail@plt+0x34f8>
   14940:	push	{r4, r5, fp, lr}
   14944:	add	fp, sp, #8
   14948:	mov	r5, r0
   1494c:	mov	r0, #33	; 0x21
   14950:	bl	15028 <__assert_fail@plt+0x3c6c>
   14954:	add	r1, r5, #44	; 0x2c
   14958:	mov	r2, #32
   1495c:	mov	r4, r0
   14960:	bl	112e4 <strncpy@plt>
   14964:	mov	r5, #0
   14968:	mov	r0, r4
   1496c:	strb	r5, [r4, #32]
   14970:	bl	1129c <strlen@plt>
   14974:	cmp	r0, #1
   14978:	blt	149a0 <__assert_fail@plt+0x35e4>
   1497c:	add	r1, r4, r0
   14980:	mov	r0, r1
   14984:	ldrb	r2, [r0, #-1]!
   14988:	cmp	r2, #32
   1498c:	bne	149a0 <__assert_fail@plt+0x35e4>
   14990:	strb	r5, [r1, #-1]
   14994:	cmp	r4, r0
   14998:	mov	r1, r0
   1499c:	bcc	14984 <__assert_fail@plt+0x35c8>
   149a0:	mov	r0, r4
   149a4:	pop	{r4, r5, fp, pc}
   149a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149ac:	add	fp, sp, #28
   149b0:	sub	sp, sp, #20
   149b4:	mov	r6, #0
   149b8:	mov	r5, r3
   149bc:	str	r2, [sp, #12]
   149c0:	str	r1, [sp, #8]
   149c4:	str	r6, [sp, #16]
   149c8:	bl	11104 <utmpxname@plt>
   149cc:	bl	11188 <setutxent@plt>
   149d0:	bl	113b0 <getutxent@plt>
   149d4:	cmp	r0, #0
   149d8:	beq	14ab4 <__assert_fail@plt+0x36f8>
   149dc:	mov	r4, r0
   149e0:	and	r7, r5, #1
   149e4:	and	r8, r5, #2
   149e8:	mov	r5, #0
   149ec:	mov	r9, #384	; 0x180
   149f0:	add	sl, sp, #16
   149f4:	mov	r6, #0
   149f8:	ldrb	r0, [r4, #44]	; 0x2c
   149fc:	cmp	r0, #0
   14a00:	mov	r0, #0
   14a04:	ldrhne	r0, [r4]
   14a08:	subne	r0, r0, #7
   14a0c:	clzne	r0, r0
   14a10:	lsrne	r0, r0, #5
   14a14:	cmp	r8, #0
   14a18:	beq	14a24 <__assert_fail@plt+0x3668>
   14a1c:	cmp	r0, #0
   14a20:	beq	14aa0 <__assert_fail@plt+0x36e4>
   14a24:	cmp	r7, #0
   14a28:	beq	14a60 <__assert_fail@plt+0x36a4>
   14a2c:	eors	r0, r0, #1
   14a30:	bne	14a60 <__assert_fail@plt+0x36a4>
   14a34:	ldr	r0, [r4, #4]
   14a38:	cmp	r0, #1
   14a3c:	blt	14a60 <__assert_fail@plt+0x36a4>
   14a40:	mov	r1, #0
   14a44:	bl	1126c <kill@plt>
   14a48:	cmn	r0, #1
   14a4c:	bgt	14a60 <__assert_fail@plt+0x36a4>
   14a50:	bl	112b4 <__errno_location@plt>
   14a54:	ldr	r0, [r0]
   14a58:	cmp	r0, #3
   14a5c:	beq	14aa0 <__assert_fail@plt+0x36e4>
   14a60:	ldr	r0, [sp, #16]
   14a64:	cmp	r5, r0
   14a68:	bne	14a88 <__assert_fail@plt+0x36cc>
   14a6c:	mov	r0, r6
   14a70:	mov	r1, sl
   14a74:	mov	r2, #1
   14a78:	mvn	r3, #0
   14a7c:	str	r9, [sp]
   14a80:	bl	15188 <__assert_fail@plt+0x3dcc>
   14a84:	mov	r6, r0
   14a88:	add	r0, r5, r5, lsl #1
   14a8c:	mov	r1, r4
   14a90:	mov	r2, #384	; 0x180
   14a94:	add	r0, r6, r0, lsl #7
   14a98:	bl	11134 <memcpy@plt>
   14a9c:	add	r5, r5, #1
   14aa0:	bl	113b0 <getutxent@plt>
   14aa4:	mov	r4, r0
   14aa8:	cmp	r0, #0
   14aac:	bne	149f8 <__assert_fail@plt+0x363c>
   14ab0:	b	14ab8 <__assert_fail@plt+0x36fc>
   14ab4:	mov	r5, #0
   14ab8:	bl	1132c <endutxent@plt>
   14abc:	ldr	r0, [sp, #8]
   14ac0:	str	r5, [r0]
   14ac4:	ldr	r0, [sp, #12]
   14ac8:	str	r6, [r0]
   14acc:	mov	r0, #0
   14ad0:	sub	sp, fp, #28
   14ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad8:	push	{r4, r5, r6, r7, fp, lr}
   14adc:	add	fp, sp, #16
   14ae0:	mov	r4, r1
   14ae4:	mov	r1, #0
   14ae8:	mov	r6, r2
   14aec:	bl	11338 <setlocale@plt>
   14af0:	cmp	r0, #0
   14af4:	beq	14b20 <__assert_fail@plt+0x3764>
   14af8:	mov	r7, r0
   14afc:	bl	1129c <strlen@plt>
   14b00:	cmp	r0, r6
   14b04:	bcs	14b34 <__assert_fail@plt+0x3778>
   14b08:	add	r2, r0, #1
   14b0c:	mov	r0, r4
   14b10:	mov	r1, r7
   14b14:	bl	11134 <memcpy@plt>
   14b18:	mov	r5, #0
   14b1c:	b	14b5c <__assert_fail@plt+0x37a0>
   14b20:	cmp	r6, #0
   14b24:	mov	r5, #22
   14b28:	movne	r0, #0
   14b2c:	strbne	r0, [r4]
   14b30:	b	14b5c <__assert_fail@plt+0x37a0>
   14b34:	mov	r5, #34	; 0x22
   14b38:	cmp	r6, #0
   14b3c:	beq	14b5c <__assert_fail@plt+0x37a0>
   14b40:	sub	r6, r6, #1
   14b44:	mov	r0, r4
   14b48:	mov	r1, r7
   14b4c:	mov	r2, r6
   14b50:	bl	11134 <memcpy@plt>
   14b54:	mov	r0, #0
   14b58:	strb	r0, [r4, r6]
   14b5c:	mov	r0, r5
   14b60:	pop	{r4, r5, r6, r7, fp, pc}
   14b64:	mov	r1, #0
   14b68:	b	11338 <setlocale@plt>
   14b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b70:	add	fp, sp, #24
   14b74:	sub	sp, sp, #32
   14b78:	ldr	r6, [fp, #12]
   14b7c:	ldr	r7, [fp, #8]
   14b80:	mov	r4, r2
   14b84:	mov	r8, r0
   14b88:	cmp	r1, #0
   14b8c:	beq	14bb4 <__assert_fail@plt+0x37f8>
   14b90:	movw	r2, #26076	; 0x65dc
   14b94:	mov	r5, r1
   14b98:	str	r3, [sp, #4]
   14b9c:	str	r4, [sp]
   14ba0:	mov	r0, r8
   14ba4:	mov	r1, #1
   14ba8:	movt	r2, #1
   14bac:	mov	r3, r5
   14bb0:	b	14bcc <__assert_fail@plt+0x3810>
   14bb4:	movw	r2, #26088	; 0x65e8
   14bb8:	str	r3, [sp]
   14bbc:	mov	r0, r8
   14bc0:	mov	r1, #1
   14bc4:	mov	r3, r4
   14bc8:	movt	r2, #1
   14bcc:	bl	11308 <__fprintf_chk@plt>
   14bd0:	movw	r1, #26095	; 0x65ef
   14bd4:	mov	r0, #0
   14bd8:	mov	r2, #5
   14bdc:	movt	r1, #1
   14be0:	bl	11170 <dcgettext@plt>
   14be4:	movw	r2, #26813	; 0x68bd
   14be8:	mov	r3, r0
   14bec:	movw	r0, #2022	; 0x7e6
   14bf0:	mov	r1, #1
   14bf4:	str	r0, [sp]
   14bf8:	movt	r2, #1
   14bfc:	mov	r0, r8
   14c00:	bl	11308 <__fprintf_chk@plt>
   14c04:	movw	r4, #25002	; 0x61aa
   14c08:	mov	r1, r8
   14c0c:	movt	r4, #1
   14c10:	mov	r0, r4
   14c14:	bl	110d4 <fputs_unlocked@plt>
   14c18:	movw	r1, #26099	; 0x65f3
   14c1c:	mov	r0, #0
   14c20:	mov	r2, #5
   14c24:	movt	r1, #1
   14c28:	bl	11170 <dcgettext@plt>
   14c2c:	movw	r3, #26270	; 0x669e
   14c30:	mov	r2, r0
   14c34:	mov	r0, r8
   14c38:	mov	r1, #1
   14c3c:	movt	r3, #1
   14c40:	bl	11308 <__fprintf_chk@plt>
   14c44:	mov	r0, r4
   14c48:	mov	r1, r8
   14c4c:	bl	110d4 <fputs_unlocked@plt>
   14c50:	cmp	r6, #9
   14c54:	bhi	14cb8 <__assert_fail@plt+0x38fc>
   14c58:	add	r0, pc, #0
   14c5c:	ldr	pc, [r0, r6, lsl #2]
   14c60:	muleq	r1, r0, lr
   14c64:	andeq	r4, r1, r8, lsl #25
   14c68:	andeq	r4, r1, r4, asr #25
   14c6c:	andeq	r4, r1, ip, ror #25
   14c70:	andeq	r4, r1, r4, lsl sp
   14c74:	andeq	r4, r1, ip, lsr sp
   14c78:	andeq	r4, r1, r4, ror #26
   14c7c:	muleq	r1, ip, sp
   14c80:	andeq	r4, r1, ip, lsr lr
   14c84:	andeq	r4, r1, r4, ror #27
   14c88:	movw	r1, #26304	; 0x66c0
   14c8c:	mov	r0, #0
   14c90:	mov	r2, #5
   14c94:	movt	r1, #1
   14c98:	bl	11170 <dcgettext@plt>
   14c9c:	ldr	r3, [r7]
   14ca0:	mov	r2, r0
   14ca4:	mov	r0, r8
   14ca8:	mov	r1, #1
   14cac:	sub	sp, fp, #24
   14cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14cb4:	b	11308 <__fprintf_chk@plt>
   14cb8:	movw	r1, #26623	; 0x67ff
   14cbc:	movt	r1, #1
   14cc0:	b	14dec <__assert_fail@plt+0x3a30>
   14cc4:	movw	r1, #26320	; 0x66d0
   14cc8:	mov	r0, #0
   14ccc:	mov	r2, #5
   14cd0:	movt	r1, #1
   14cd4:	bl	11170 <dcgettext@plt>
   14cd8:	mov	r2, r0
   14cdc:	ldr	r3, [r7]
   14ce0:	ldr	r0, [r7, #4]
   14ce4:	str	r0, [sp]
   14ce8:	b	14dd8 <__assert_fail@plt+0x3a1c>
   14cec:	movw	r1, #26343	; 0x66e7
   14cf0:	mov	r0, #0
   14cf4:	mov	r2, #5
   14cf8:	movt	r1, #1
   14cfc:	bl	11170 <dcgettext@plt>
   14d00:	ldr	r3, [r7]
   14d04:	mov	r2, r0
   14d08:	ldmib	r7, {r0, r1}
   14d0c:	stm	sp, {r0, r1}
   14d10:	b	14dd8 <__assert_fail@plt+0x3a1c>
   14d14:	movw	r1, #26371	; 0x6703
   14d18:	mov	r0, #0
   14d1c:	mov	r2, #5
   14d20:	movt	r1, #1
   14d24:	bl	11170 <dcgettext@plt>
   14d28:	ldr	r3, [r7]
   14d2c:	mov	r2, r0
   14d30:	ldmib	r7, {r0, r1, r7}
   14d34:	stm	sp, {r0, r1, r7}
   14d38:	b	14dd8 <__assert_fail@plt+0x3a1c>
   14d3c:	movw	r1, #26403	; 0x6723
   14d40:	mov	r0, #0
   14d44:	mov	r2, #5
   14d48:	movt	r1, #1
   14d4c:	bl	11170 <dcgettext@plt>
   14d50:	ldr	r3, [r7]
   14d54:	mov	r2, r0
   14d58:	ldmib	r7, {r0, r1, r6, r7}
   14d5c:	stm	sp, {r0, r1, r6, r7}
   14d60:	b	14dd8 <__assert_fail@plt+0x3a1c>
   14d64:	movw	r1, #26439	; 0x6747
   14d68:	mov	r0, #0
   14d6c:	mov	r2, #5
   14d70:	movt	r1, #1
   14d74:	bl	11170 <dcgettext@plt>
   14d78:	ldr	r3, [r7]
   14d7c:	mov	r2, r0
   14d80:	ldmib	r7, {r0, r1, r6}
   14d84:	ldr	r5, [r7, #16]
   14d88:	ldr	r7, [r7, #20]
   14d8c:	stm	sp, {r0, r1, r6}
   14d90:	str	r5, [sp, #12]
   14d94:	str	r7, [sp, #16]
   14d98:	b	14dd8 <__assert_fail@plt+0x3a1c>
   14d9c:	movw	r1, #26479	; 0x676f
   14da0:	mov	r0, #0
   14da4:	mov	r2, #5
   14da8:	movt	r1, #1
   14dac:	bl	11170 <dcgettext@plt>
   14db0:	ldr	r3, [r7]
   14db4:	mov	r2, r0
   14db8:	ldmib	r7, {r0, r1, r6}
   14dbc:	ldr	r5, [r7, #16]
   14dc0:	ldr	r4, [r7, #20]
   14dc4:	ldr	r7, [r7, #24]
   14dc8:	stm	sp, {r0, r1, r6}
   14dcc:	str	r5, [sp, #12]
   14dd0:	str	r4, [sp, #16]
   14dd4:	str	r7, [sp, #20]
   14dd8:	mov	r0, r8
   14ddc:	mov	r1, #1
   14de0:	b	14e8c <__assert_fail@plt+0x3ad0>
   14de4:	movw	r1, #26571	; 0x67cb
   14de8:	movt	r1, #1
   14dec:	mov	r0, #0
   14df0:	mov	r2, #5
   14df4:	bl	11170 <dcgettext@plt>
   14df8:	mov	ip, r0
   14dfc:	ldr	r3, [r7]
   14e00:	ldr	r0, [r7, #4]
   14e04:	ldr	r1, [r7, #8]
   14e08:	ldr	r6, [r7, #12]
   14e0c:	ldr	r5, [r7, #16]
   14e10:	ldr	r4, [r7, #20]
   14e14:	ldr	r2, [r7, #24]
   14e18:	ldr	lr, [r7, #28]
   14e1c:	ldr	r7, [r7, #32]
   14e20:	stm	sp, {r0, r1, r6}
   14e24:	str	r5, [sp, #12]
   14e28:	str	r4, [sp, #16]
   14e2c:	str	r2, [sp, #20]
   14e30:	str	lr, [sp, #24]
   14e34:	str	r7, [sp, #28]
   14e38:	b	14e80 <__assert_fail@plt+0x3ac4>
   14e3c:	movw	r1, #26523	; 0x679b
   14e40:	mov	r0, #0
   14e44:	mov	r2, #5
   14e48:	movt	r1, #1
   14e4c:	bl	11170 <dcgettext@plt>
   14e50:	mov	ip, r0
   14e54:	ldr	r3, [r7]
   14e58:	ldmib	r7, {r0, r1, r6}
   14e5c:	ldr	r5, [r7, #16]
   14e60:	ldr	r4, [r7, #20]
   14e64:	ldr	r2, [r7, #24]
   14e68:	ldr	r7, [r7, #28]
   14e6c:	stm	sp, {r0, r1, r6}
   14e70:	str	r5, [sp, #12]
   14e74:	str	r4, [sp, #16]
   14e78:	str	r2, [sp, #20]
   14e7c:	str	r7, [sp, #24]
   14e80:	mov	r0, r8
   14e84:	mov	r1, #1
   14e88:	mov	r2, ip
   14e8c:	bl	11308 <__fprintf_chk@plt>
   14e90:	sub	sp, fp, #24
   14e94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e98:	push	{r4, sl, fp, lr}
   14e9c:	add	fp, sp, #8
   14ea0:	sub	sp, sp, #8
   14ea4:	ldr	ip, [fp, #8]
   14ea8:	mov	lr, #0
   14eac:	ldr	r4, [ip, lr, lsl #2]
   14eb0:	add	lr, lr, #1
   14eb4:	cmp	r4, #0
   14eb8:	bne	14eac <__assert_fail@plt+0x3af0>
   14ebc:	sub	r4, lr, #1
   14ec0:	str	ip, [sp]
   14ec4:	str	r4, [sp, #4]
   14ec8:	bl	14b6c <__assert_fail@plt+0x37b0>
   14ecc:	sub	sp, fp, #8
   14ed0:	pop	{r4, sl, fp, pc}
   14ed4:	push	{r4, r5, fp, lr}
   14ed8:	add	fp, sp, #8
   14edc:	sub	sp, sp, #48	; 0x30
   14ee0:	ldr	r4, [fp, #8]
   14ee4:	mov	ip, #0
   14ee8:	add	lr, sp, #8
   14eec:	ldr	r5, [r4]
   14ef0:	cmp	r5, #0
   14ef4:	str	r5, [lr, ip, lsl #2]
   14ef8:	beq	14f0c <__assert_fail@plt+0x3b50>
   14efc:	add	ip, ip, #1
   14f00:	add	r4, r4, #4
   14f04:	cmp	ip, #10
   14f08:	bcc	14eec <__assert_fail@plt+0x3b30>
   14f0c:	str	lr, [sp]
   14f10:	str	ip, [sp, #4]
   14f14:	bl	14b6c <__assert_fail@plt+0x37b0>
   14f18:	sub	sp, fp, #8
   14f1c:	pop	{r4, r5, fp, pc}
   14f20:	push	{fp, lr}
   14f24:	mov	fp, sp
   14f28:	sub	sp, sp, #8
   14f2c:	add	ip, fp, #8
   14f30:	str	ip, [sp, #4]
   14f34:	str	ip, [sp]
   14f38:	bl	14ed4 <__assert_fail@plt+0x3b18>
   14f3c:	mov	sp, fp
   14f40:	pop	{fp, pc}
   14f44:	push	{fp, lr}
   14f48:	mov	fp, sp
   14f4c:	movw	r0, #29052	; 0x717c
   14f50:	movt	r0, #2
   14f54:	ldr	r1, [r0]
   14f58:	movw	r0, #25002	; 0x61aa
   14f5c:	movt	r0, #1
   14f60:	bl	110d4 <fputs_unlocked@plt>
   14f64:	movw	r1, #26683	; 0x683b
   14f68:	mov	r0, #0
   14f6c:	mov	r2, #5
   14f70:	movt	r1, #1
   14f74:	bl	11170 <dcgettext@plt>
   14f78:	movw	r2, #26703	; 0x684f
   14f7c:	mov	r1, r0
   14f80:	mov	r0, #1
   14f84:	movt	r2, #1
   14f88:	bl	112f0 <__printf_chk@plt>
   14f8c:	movw	r1, #26725	; 0x6865
   14f90:	mov	r0, #0
   14f94:	mov	r2, #5
   14f98:	movt	r1, #1
   14f9c:	bl	11170 <dcgettext@plt>
   14fa0:	movw	r2, #24588	; 0x600c
   14fa4:	movw	r3, #24811	; 0x60eb
   14fa8:	mov	r1, r0
   14fac:	mov	r0, #1
   14fb0:	movt	r2, #1
   14fb4:	movt	r3, #1
   14fb8:	bl	112f0 <__printf_chk@plt>
   14fbc:	movw	r1, #26745	; 0x6879
   14fc0:	mov	r0, #0
   14fc4:	mov	r2, #5
   14fc8:	movt	r1, #1
   14fcc:	bl	11170 <dcgettext@plt>
   14fd0:	movw	r2, #26784	; 0x68a0
   14fd4:	mov	r1, r0
   14fd8:	mov	r0, #1
   14fdc:	movt	r2, #1
   14fe0:	pop	{fp, lr}
   14fe4:	b	112f0 <__printf_chk@plt>
   14fe8:	b	14fec <__assert_fail@plt+0x3c30>
   14fec:	push	{r4, r5, r6, sl, fp, lr}
   14ff0:	add	fp, sp, #16
   14ff4:	mov	r4, r2
   14ff8:	mov	r5, r1
   14ffc:	mov	r6, r0
   15000:	bl	15844 <__assert_fail@plt+0x4488>
   15004:	cmp	r0, #0
   15008:	popne	{r4, r5, r6, sl, fp, pc}
   1500c:	cmp	r6, #0
   15010:	beq	15024 <__assert_fail@plt+0x3c68>
   15014:	cmp	r5, #0
   15018:	cmpne	r4, #0
   1501c:	bne	15024 <__assert_fail@plt+0x3c68>
   15020:	pop	{r4, r5, r6, sl, fp, pc}
   15024:	bl	15478 <__assert_fail@plt+0x40bc>
   15028:	push	{fp, lr}
   1502c:	mov	fp, sp
   15030:	bl	15510 <__assert_fail@plt+0x4154>
   15034:	cmp	r0, #0
   15038:	popne	{fp, pc}
   1503c:	bl	15478 <__assert_fail@plt+0x40bc>
   15040:	push	{fp, lr}
   15044:	mov	fp, sp
   15048:	bl	15510 <__assert_fail@plt+0x4154>
   1504c:	cmp	r0, #0
   15050:	popne	{fp, pc}
   15054:	bl	15478 <__assert_fail@plt+0x40bc>
   15058:	push	{fp, lr}
   1505c:	mov	fp, sp
   15060:	bl	15510 <__assert_fail@plt+0x4154>
   15064:	cmp	r0, #0
   15068:	popne	{fp, pc}
   1506c:	bl	15478 <__assert_fail@plt+0x40bc>
   15070:	push	{r4, r5, fp, lr}
   15074:	add	fp, sp, #8
   15078:	mov	r4, r1
   1507c:	mov	r5, r0
   15080:	bl	15540 <__assert_fail@plt+0x4184>
   15084:	cmp	r0, #0
   15088:	popne	{r4, r5, fp, pc}
   1508c:	cmp	r5, #0
   15090:	beq	150a0 <__assert_fail@plt+0x3ce4>
   15094:	cmp	r4, #0
   15098:	bne	150a0 <__assert_fail@plt+0x3ce4>
   1509c:	pop	{r4, r5, fp, pc}
   150a0:	bl	15478 <__assert_fail@plt+0x40bc>
   150a4:	push	{fp, lr}
   150a8:	mov	fp, sp
   150ac:	cmp	r1, #0
   150b0:	orreq	r1, r1, #1
   150b4:	bl	15540 <__assert_fail@plt+0x4184>
   150b8:	cmp	r0, #0
   150bc:	popne	{fp, pc}
   150c0:	bl	15478 <__assert_fail@plt+0x40bc>
   150c4:	push	{fp, lr}
   150c8:	mov	fp, sp
   150cc:	clz	r3, r2
   150d0:	lsr	ip, r3, #5
   150d4:	clz	r3, r1
   150d8:	lsr	r3, r3, #5
   150dc:	orrs	r3, r3, ip
   150e0:	movwne	r1, #1
   150e4:	movwne	r2, #1
   150e8:	bl	15844 <__assert_fail@plt+0x4488>
   150ec:	cmp	r0, #0
   150f0:	popne	{fp, pc}
   150f4:	bl	15478 <__assert_fail@plt+0x40bc>
   150f8:	push	{fp, lr}
   150fc:	mov	fp, sp
   15100:	mov	r2, r1
   15104:	mov	r1, r0
   15108:	mov	r0, #0
   1510c:	bl	15844 <__assert_fail@plt+0x4488>
   15110:	cmp	r0, #0
   15114:	popne	{fp, pc}
   15118:	bl	15478 <__assert_fail@plt+0x40bc>
   1511c:	mov	r2, r1
   15120:	mov	r1, r0
   15124:	mov	r0, #0
   15128:	b	150c4 <__assert_fail@plt+0x3d08>
   1512c:	mov	r2, #1
   15130:	b	15134 <__assert_fail@plt+0x3d78>
   15134:	push	{r4, r5, fp, lr}
   15138:	add	fp, sp, #8
   1513c:	ldr	r5, [r1]
   15140:	mov	r4, r1
   15144:	cmp	r0, #0
   15148:	beq	15160 <__assert_fail@plt+0x3da4>
   1514c:	mov	r1, #1
   15150:	add	r1, r1, r5, lsr #1
   15154:	adds	r5, r5, r1
   15158:	bcc	15178 <__assert_fail@plt+0x3dbc>
   1515c:	bl	15478 <__assert_fail@plt+0x40bc>
   15160:	cmp	r5, #0
   15164:	bne	15178 <__assert_fail@plt+0x3dbc>
   15168:	mov	r1, #64	; 0x40
   1516c:	cmp	r2, #64	; 0x40
   15170:	udiv	r5, r1, r2
   15174:	addhi	r5, r5, #1
   15178:	mov	r1, r5
   1517c:	bl	14fec <__assert_fail@plt+0x3c30>
   15180:	str	r5, [r4]
   15184:	pop	{r4, r5, fp, pc}
   15188:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1518c:	add	fp, sp, #24
   15190:	ldr	r6, [r1]
   15194:	mov	r8, r1
   15198:	ldr	r4, [fp, #8]
   1519c:	add	r1, r6, r6, asr #1
   151a0:	cmp	r1, r6
   151a4:	mvnvs	r1, #-2147483648	; 0x80000000
   151a8:	cmp	r1, r3
   151ac:	mov	r5, r1
   151b0:	movgt	r5, r3
   151b4:	cmn	r3, #1
   151b8:	movle	r5, r1
   151bc:	cmn	r4, #1
   151c0:	ble	151e0 <__assert_fail@plt+0x3e24>
   151c4:	cmp	r4, #0
   151c8:	beq	15234 <__assert_fail@plt+0x3e78>
   151cc:	cmn	r5, #1
   151d0:	ble	15208 <__assert_fail@plt+0x3e4c>
   151d4:	mvn	r7, #-2147483648	; 0x80000000
   151d8:	udiv	r1, r7, r4
   151dc:	b	151fc <__assert_fail@plt+0x3e40>
   151e0:	cmn	r5, #1
   151e4:	ble	15224 <__assert_fail@plt+0x3e68>
   151e8:	cmn	r4, #1
   151ec:	beq	15234 <__assert_fail@plt+0x3e78>
   151f0:	mov	r1, #-2147483648	; 0x80000000
   151f4:	mvn	r7, #-2147483648	; 0x80000000
   151f8:	sdiv	r1, r1, r4
   151fc:	cmp	r1, r5
   15200:	bge	15234 <__assert_fail@plt+0x3e78>
   15204:	b	15244 <__assert_fail@plt+0x3e88>
   15208:	beq	15234 <__assert_fail@plt+0x3e78>
   1520c:	mov	r1, #-2147483648	; 0x80000000
   15210:	mvn	r7, #-2147483648	; 0x80000000
   15214:	sdiv	r1, r1, r5
   15218:	cmp	r1, r4
   1521c:	bge	15234 <__assert_fail@plt+0x3e78>
   15220:	b	15244 <__assert_fail@plt+0x3e88>
   15224:	mvn	r7, #-2147483648	; 0x80000000
   15228:	sdiv	r1, r7, r4
   1522c:	cmp	r5, r1
   15230:	blt	15244 <__assert_fail@plt+0x3e88>
   15234:	mul	r1, r5, r4
   15238:	mov	r7, #64	; 0x40
   1523c:	cmp	r1, #63	; 0x3f
   15240:	bgt	1524c <__assert_fail@plt+0x3e90>
   15244:	sdiv	r5, r7, r4
   15248:	mul	r1, r5, r4
   1524c:	cmp	r0, #0
   15250:	moveq	r7, #0
   15254:	streq	r7, [r8]
   15258:	sub	r7, r5, r6
   1525c:	cmp	r7, r2
   15260:	bge	15304 <__assert_fail@plt+0x3f48>
   15264:	add	r5, r6, r2
   15268:	mov	r2, #0
   1526c:	mov	r1, #0
   15270:	cmp	r5, r3
   15274:	movwgt	r2, #1
   15278:	cmn	r3, #1
   1527c:	movwgt	r1, #1
   15280:	cmp	r5, r6
   15284:	bvs	152ec <__assert_fail@plt+0x3f30>
   15288:	ands	r1, r1, r2
   1528c:	bne	152ec <__assert_fail@plt+0x3f30>
   15290:	cmn	r4, #1
   15294:	ble	152b4 <__assert_fail@plt+0x3ef8>
   15298:	cmp	r4, #0
   1529c:	beq	15300 <__assert_fail@plt+0x3f44>
   152a0:	cmn	r5, #1
   152a4:	ble	152d8 <__assert_fail@plt+0x3f1c>
   152a8:	mvn	r1, #-2147483648	; 0x80000000
   152ac:	udiv	r1, r1, r4
   152b0:	b	152cc <__assert_fail@plt+0x3f10>
   152b4:	cmn	r5, #1
   152b8:	ble	152f0 <__assert_fail@plt+0x3f34>
   152bc:	cmn	r4, #1
   152c0:	beq	15300 <__assert_fail@plt+0x3f44>
   152c4:	mov	r1, #-2147483648	; 0x80000000
   152c8:	sdiv	r1, r1, r4
   152cc:	cmp	r1, r5
   152d0:	bge	15300 <__assert_fail@plt+0x3f44>
   152d4:	b	152ec <__assert_fail@plt+0x3f30>
   152d8:	beq	15300 <__assert_fail@plt+0x3f44>
   152dc:	mov	r1, #-2147483648	; 0x80000000
   152e0:	sdiv	r1, r1, r5
   152e4:	cmp	r1, r4
   152e8:	bge	15300 <__assert_fail@plt+0x3f44>
   152ec:	bl	15478 <__assert_fail@plt+0x40bc>
   152f0:	mvn	r1, #-2147483648	; 0x80000000
   152f4:	sdiv	r1, r1, r4
   152f8:	cmp	r5, r1
   152fc:	blt	152ec <__assert_fail@plt+0x3f30>
   15300:	mul	r1, r5, r4
   15304:	bl	15070 <__assert_fail@plt+0x3cb4>
   15308:	str	r5, [r8]
   1530c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15310:	push	{fp, lr}
   15314:	mov	fp, sp
   15318:	mov	r1, #1
   1531c:	bl	154bc <__assert_fail@plt+0x4100>
   15320:	cmp	r0, #0
   15324:	popne	{fp, pc}
   15328:	bl	15478 <__assert_fail@plt+0x40bc>
   1532c:	push	{fp, lr}
   15330:	mov	fp, sp
   15334:	bl	154bc <__assert_fail@plt+0x4100>
   15338:	cmp	r0, #0
   1533c:	popne	{fp, pc}
   15340:	bl	15478 <__assert_fail@plt+0x40bc>
   15344:	push	{fp, lr}
   15348:	mov	fp, sp
   1534c:	mov	r1, #1
   15350:	bl	154bc <__assert_fail@plt+0x4100>
   15354:	cmp	r0, #0
   15358:	popne	{fp, pc}
   1535c:	bl	15478 <__assert_fail@plt+0x40bc>
   15360:	push	{fp, lr}
   15364:	mov	fp, sp
   15368:	bl	154bc <__assert_fail@plt+0x4100>
   1536c:	cmp	r0, #0
   15370:	popne	{fp, pc}
   15374:	bl	15478 <__assert_fail@plt+0x40bc>
   15378:	push	{r4, r5, r6, sl, fp, lr}
   1537c:	add	fp, sp, #16
   15380:	mov	r5, r0
   15384:	mov	r0, r1
   15388:	mov	r4, r1
   1538c:	bl	15510 <__assert_fail@plt+0x4154>
   15390:	cmp	r0, #0
   15394:	beq	153b0 <__assert_fail@plt+0x3ff4>
   15398:	mov	r1, r5
   1539c:	mov	r2, r4
   153a0:	mov	r6, r0
   153a4:	bl	11134 <memcpy@plt>
   153a8:	mov	r0, r6
   153ac:	pop	{r4, r5, r6, sl, fp, pc}
   153b0:	bl	15478 <__assert_fail@plt+0x40bc>
   153b4:	push	{r4, r5, r6, sl, fp, lr}
   153b8:	add	fp, sp, #16
   153bc:	mov	r5, r0
   153c0:	mov	r0, r1
   153c4:	mov	r4, r1
   153c8:	bl	15510 <__assert_fail@plt+0x4154>
   153cc:	cmp	r0, #0
   153d0:	beq	153ec <__assert_fail@plt+0x4030>
   153d4:	mov	r1, r5
   153d8:	mov	r2, r4
   153dc:	mov	r6, r0
   153e0:	bl	11134 <memcpy@plt>
   153e4:	mov	r0, r6
   153e8:	pop	{r4, r5, r6, sl, fp, pc}
   153ec:	bl	15478 <__assert_fail@plt+0x40bc>
   153f0:	push	{r4, r5, r6, sl, fp, lr}
   153f4:	add	fp, sp, #16
   153f8:	mov	r5, r0
   153fc:	add	r0, r1, #1
   15400:	mov	r4, r1
   15404:	bl	15510 <__assert_fail@plt+0x4154>
   15408:	cmp	r0, #0
   1540c:	beq	15434 <__assert_fail@plt+0x4078>
   15410:	mov	r6, r0
   15414:	mov	r0, #0
   15418:	mov	r1, r5
   1541c:	mov	r2, r4
   15420:	strb	r0, [r6, r4]
   15424:	mov	r0, r6
   15428:	bl	11134 <memcpy@plt>
   1542c:	mov	r0, r6
   15430:	pop	{r4, r5, r6, sl, fp, pc}
   15434:	bl	15478 <__assert_fail@plt+0x40bc>
   15438:	push	{r4, r5, r6, sl, fp, lr}
   1543c:	add	fp, sp, #16
   15440:	mov	r4, r0
   15444:	bl	1129c <strlen@plt>
   15448:	add	r5, r0, #1
   1544c:	mov	r0, r5
   15450:	bl	15510 <__assert_fail@plt+0x4154>
   15454:	cmp	r0, #0
   15458:	beq	15474 <__assert_fail@plt+0x40b8>
   1545c:	mov	r1, r4
   15460:	mov	r2, r5
   15464:	mov	r6, r0
   15468:	bl	11134 <memcpy@plt>
   1546c:	mov	r0, r6
   15470:	pop	{r4, r5, r6, sl, fp, pc}
   15474:	bl	15478 <__assert_fail@plt+0x40bc>
   15478:	push	{fp, lr}
   1547c:	mov	fp, sp
   15480:	movw	r0, #28964	; 0x7124
   15484:	movw	r1, #26860	; 0x68ec
   15488:	mov	r2, #5
   1548c:	movt	r0, #2
   15490:	movt	r1, #1
   15494:	ldr	r4, [r0]
   15498:	mov	r0, #0
   1549c:	bl	11170 <dcgettext@plt>
   154a0:	movw	r2, #25815	; 0x64d7
   154a4:	mov	r3, r0
   154a8:	mov	r0, r4
   154ac:	mov	r1, #0
   154b0:	movt	r2, #1
   154b4:	bl	111f4 <error@plt>
   154b8:	bl	113a4 <abort@plt>
   154bc:	clz	r2, r1
   154c0:	clz	r3, r0
   154c4:	lsr	r2, r2, #5
   154c8:	lsr	r3, r3, #5
   154cc:	orrs	r2, r3, r2
   154d0:	movwne	r1, #1
   154d4:	movwne	r0, #1
   154d8:	cmp	r1, #0
   154dc:	beq	1550c <__assert_fail@plt+0x4150>
   154e0:	mvn	r2, #-2147483648	; 0x80000000
   154e4:	udiv	r2, r2, r1
   154e8:	cmp	r2, r0
   154ec:	bcs	1550c <__assert_fail@plt+0x4150>
   154f0:	push	{fp, lr}
   154f4:	mov	fp, sp
   154f8:	bl	112b4 <__errno_location@plt>
   154fc:	mov	r1, #12
   15500:	str	r1, [r0]
   15504:	mov	r0, #0
   15508:	pop	{fp, pc}
   1550c:	b	110c8 <calloc@plt>
   15510:	cmp	r0, #0
   15514:	movweq	r0, #1
   15518:	cmn	r0, #1
   1551c:	ble	15524 <__assert_fail@plt+0x4168>
   15520:	b	11218 <malloc@plt>
   15524:	push	{fp, lr}
   15528:	mov	fp, sp
   1552c:	bl	112b4 <__errno_location@plt>
   15530:	mov	r1, #12
   15534:	str	r1, [r0]
   15538:	mov	r0, #0
   1553c:	pop	{fp, pc}
   15540:	push	{fp, lr}
   15544:	mov	fp, sp
   15548:	cmp	r0, #0
   1554c:	beq	15568 <__assert_fail@plt+0x41ac>
   15550:	cmp	r1, #0
   15554:	beq	15574 <__assert_fail@plt+0x41b8>
   15558:	cmn	r1, #1
   1555c:	ble	1557c <__assert_fail@plt+0x41c0>
   15560:	pop	{fp, lr}
   15564:	b	11194 <realloc@plt>
   15568:	mov	r0, r1
   1556c:	pop	{fp, lr}
   15570:	b	15510 <__assert_fail@plt+0x4154>
   15574:	bl	12cbc <__assert_fail@plt+0x1900>
   15578:	b	15588 <__assert_fail@plt+0x41cc>
   1557c:	bl	112b4 <__errno_location@plt>
   15580:	mov	r1, #12
   15584:	str	r1, [r0]
   15588:	mov	r0, #0
   1558c:	pop	{fp, pc}
   15590:	push	{r4, r5, r6, sl, fp, lr}
   15594:	add	fp, sp, #16
   15598:	mov	r4, r0
   1559c:	bl	111d0 <__fpending@plt>
   155a0:	mov	r5, r0
   155a4:	mov	r0, r4
   155a8:	bl	111dc <ferror_unlocked@plt>
   155ac:	mov	r6, r0
   155b0:	mov	r0, r4
   155b4:	bl	15610 <__assert_fail@plt+0x4254>
   155b8:	cmp	r6, #0
   155bc:	beq	155dc <__assert_fail@plt+0x4220>
   155c0:	mvn	r4, #0
   155c4:	cmp	r0, #0
   155c8:	bne	15608 <__assert_fail@plt+0x424c>
   155cc:	bl	112b4 <__errno_location@plt>
   155d0:	mov	r1, #0
   155d4:	str	r1, [r0]
   155d8:	b	15608 <__assert_fail@plt+0x424c>
   155dc:	cmp	r0, #0
   155e0:	mov	r4, r0
   155e4:	mvnne	r4, #0
   155e8:	cmp	r5, #0
   155ec:	bne	15608 <__assert_fail@plt+0x424c>
   155f0:	cmp	r0, #0
   155f4:	beq	15608 <__assert_fail@plt+0x424c>
   155f8:	bl	112b4 <__errno_location@plt>
   155fc:	ldr	r0, [r0]
   15600:	subs	r4, r0, #9
   15604:	mvnne	r4, #0
   15608:	mov	r0, r4
   1560c:	pop	{r4, r5, r6, sl, fp, pc}
   15610:	push	{r4, r5, r6, sl, fp, lr}
   15614:	add	fp, sp, #16
   15618:	sub	sp, sp, #8
   1561c:	mov	r4, r0
   15620:	bl	112fc <fileno@plt>
   15624:	cmn	r0, #1
   15628:	ble	1569c <__assert_fail@plt+0x42e0>
   1562c:	mov	r0, r4
   15630:	bl	1123c <__freading@plt>
   15634:	cmp	r0, #0
   15638:	beq	15664 <__assert_fail@plt+0x42a8>
   1563c:	mov	r0, r4
   15640:	bl	112fc <fileno@plt>
   15644:	mov	r1, #1
   15648:	mov	r2, #0
   1564c:	mov	r3, #0
   15650:	str	r1, [sp]
   15654:	bl	111b8 <lseek64@plt>
   15658:	and	r0, r0, r1
   1565c:	cmn	r0, #1
   15660:	beq	1569c <__assert_fail@plt+0x42e0>
   15664:	mov	r0, r4
   15668:	bl	156ac <__assert_fail@plt+0x42f0>
   1566c:	cmp	r0, #0
   15670:	beq	1569c <__assert_fail@plt+0x42e0>
   15674:	bl	112b4 <__errno_location@plt>
   15678:	ldr	r6, [r0]
   1567c:	mov	r5, r0
   15680:	mov	r0, r4
   15684:	bl	11314 <fclose@plt>
   15688:	cmp	r6, #0
   1568c:	strne	r6, [r5]
   15690:	mvnne	r0, #0
   15694:	sub	sp, fp, #16
   15698:	pop	{r4, r5, r6, sl, fp, pc}
   1569c:	mov	r0, r4
   156a0:	sub	sp, fp, #16
   156a4:	pop	{r4, r5, r6, sl, fp, lr}
   156a8:	b	11314 <fclose@plt>
   156ac:	push	{r4, sl, fp, lr}
   156b0:	add	fp, sp, #8
   156b4:	sub	sp, sp, #8
   156b8:	mov	r4, r0
   156bc:	cmp	r0, #0
   156c0:	beq	156dc <__assert_fail@plt+0x4320>
   156c4:	mov	r0, r4
   156c8:	bl	1123c <__freading@plt>
   156cc:	cmp	r0, #0
   156d0:	ldrbne	r0, [r4, #1]
   156d4:	tstne	r0, #1
   156d8:	bne	156ec <__assert_fail@plt+0x4330>
   156dc:	mov	r0, r4
   156e0:	sub	sp, fp, #8
   156e4:	pop	{r4, sl, fp, lr}
   156e8:	b	110f8 <fflush@plt>
   156ec:	mov	r0, #1
   156f0:	mov	r2, #0
   156f4:	mov	r3, #0
   156f8:	str	r0, [sp]
   156fc:	mov	r0, r4
   15700:	bl	15708 <__assert_fail@plt+0x434c>
   15704:	b	156dc <__assert_fail@plt+0x4320>
   15708:	push	{r4, r5, r6, r7, fp, lr}
   1570c:	add	fp, sp, #16
   15710:	sub	sp, sp, #8
   15714:	mov	r4, r0
   15718:	ldr	r0, [r0, #4]
   1571c:	mov	r5, r3
   15720:	mov	r6, r2
   15724:	ldr	r1, [r4, #8]
   15728:	cmp	r1, r0
   1572c:	bne	15748 <__assert_fail@plt+0x438c>
   15730:	ldrd	r0, [r4, #16]
   15734:	cmp	r1, r0
   15738:	bne	15748 <__assert_fail@plt+0x438c>
   1573c:	ldr	r0, [r4, #36]	; 0x24
   15740:	cmp	r0, #0
   15744:	beq	15760 <__assert_fail@plt+0x43a4>
   15748:	mov	r0, r4
   1574c:	mov	r2, r6
   15750:	mov	r3, r5
   15754:	sub	sp, fp, #16
   15758:	pop	{r4, r5, r6, r7, fp, lr}
   1575c:	b	11320 <fseeko64@plt>
   15760:	ldr	r7, [fp, #8]
   15764:	mov	r0, r4
   15768:	bl	112fc <fileno@plt>
   1576c:	mov	r2, r6
   15770:	mov	r3, r5
   15774:	str	r7, [sp]
   15778:	bl	111b8 <lseek64@plt>
   1577c:	and	r2, r0, r1
   15780:	cmn	r2, #1
   15784:	beq	157a0 <__assert_fail@plt+0x43e4>
   15788:	strd	r0, [r4, #80]	; 0x50
   1578c:	ldr	r0, [r4]
   15790:	bic	r0, r0, #16
   15794:	str	r0, [r4]
   15798:	mov	r0, #0
   1579c:	b	157a4 <__assert_fail@plt+0x43e8>
   157a0:	mvn	r0, #0
   157a4:	sub	sp, fp, #16
   157a8:	pop	{r4, r5, r6, r7, fp, pc}
   157ac:	push	{fp, lr}
   157b0:	mov	fp, sp
   157b4:	mov	r0, #14
   157b8:	bl	11350 <nl_langinfo@plt>
   157bc:	movw	r1, #25003	; 0x61ab
   157c0:	cmp	r0, #0
   157c4:	movt	r1, #1
   157c8:	movne	r1, r0
   157cc:	movw	r0, #26877	; 0x68fd
   157d0:	ldrb	r2, [r1]
   157d4:	movt	r0, #1
   157d8:	cmp	r2, #0
   157dc:	movne	r0, r1
   157e0:	pop	{fp, pc}
   157e4:	push	{r4, r5, r6, r7, fp, lr}
   157e8:	add	fp, sp, #16
   157ec:	sub	sp, sp, #8
   157f0:	add	r5, sp, #4
   157f4:	cmp	r0, #0
   157f8:	mov	r7, r2
   157fc:	mov	r4, r1
   15800:	movne	r5, r0
   15804:	mov	r0, r5
   15808:	bl	111e8 <mbrtowc@plt>
   1580c:	mov	r6, r0
   15810:	cmp	r7, #0
   15814:	beq	15838 <__assert_fail@plt+0x447c>
   15818:	cmn	r6, #2
   1581c:	bcc	15838 <__assert_fail@plt+0x447c>
   15820:	mov	r0, #0
   15824:	bl	12ce4 <__assert_fail@plt+0x1928>
   15828:	cmp	r0, #0
   1582c:	ldrbeq	r0, [r4]
   15830:	moveq	r6, #1
   15834:	streq	r0, [r5]
   15838:	mov	r0, r6
   1583c:	sub	sp, fp, #16
   15840:	pop	{r4, r5, r6, r7, fp, pc}
   15844:	cmp	r2, #0
   15848:	beq	15878 <__assert_fail@plt+0x44bc>
   1584c:	mvn	r3, #0
   15850:	udiv	r3, r3, r2
   15854:	cmp	r3, r1
   15858:	bcs	15878 <__assert_fail@plt+0x44bc>
   1585c:	push	{fp, lr}
   15860:	mov	fp, sp
   15864:	bl	112b4 <__errno_location@plt>
   15868:	mov	r1, #12
   1586c:	str	r1, [r0]
   15870:	mov	r0, #0
   15874:	pop	{fp, pc}
   15878:	mul	r1, r2, r1
   1587c:	b	15540 <__assert_fail@plt+0x4184>
   15880:	cmp	r3, #0
   15884:	cmpeq	r2, #0
   15888:	bne	158ac <__assert_fail@plt+0x44f0>
   1588c:	cmp	r1, #0
   15890:	movlt	r1, #-2147483648	; 0x80000000
   15894:	movlt	r0, #0
   15898:	blt	158a8 <__assert_fail@plt+0x44ec>
   1589c:	cmpeq	r0, #0
   158a0:	mvnne	r1, #-2147483648	; 0x80000000
   158a4:	mvnne	r0, #0
   158a8:	b	15954 <__assert_fail@plt+0x4598>
   158ac:	sub	sp, sp, #8
   158b0:	push	{sp, lr}
   158b4:	cmp	r1, #0
   158b8:	blt	158d8 <__assert_fail@plt+0x451c>
   158bc:	cmp	r3, #0
   158c0:	blt	1590c <__assert_fail@plt+0x4550>
   158c4:	bl	15964 <__assert_fail@plt+0x45a8>
   158c8:	ldr	lr, [sp, #4]
   158cc:	add	sp, sp, #8
   158d0:	pop	{r2, r3}
   158d4:	bx	lr
   158d8:	rsbs	r0, r0, #0
   158dc:	sbc	r1, r1, r1, lsl #1
   158e0:	cmp	r3, #0
   158e4:	blt	15930 <__assert_fail@plt+0x4574>
   158e8:	bl	15964 <__assert_fail@plt+0x45a8>
   158ec:	ldr	lr, [sp, #4]
   158f0:	add	sp, sp, #8
   158f4:	pop	{r2, r3}
   158f8:	rsbs	r0, r0, #0
   158fc:	sbc	r1, r1, r1, lsl #1
   15900:	rsbs	r2, r2, #0
   15904:	sbc	r3, r3, r3, lsl #1
   15908:	bx	lr
   1590c:	rsbs	r2, r2, #0
   15910:	sbc	r3, r3, r3, lsl #1
   15914:	bl	15964 <__assert_fail@plt+0x45a8>
   15918:	ldr	lr, [sp, #4]
   1591c:	add	sp, sp, #8
   15920:	pop	{r2, r3}
   15924:	rsbs	r0, r0, #0
   15928:	sbc	r1, r1, r1, lsl #1
   1592c:	bx	lr
   15930:	rsbs	r2, r2, #0
   15934:	sbc	r3, r3, r3, lsl #1
   15938:	bl	15964 <__assert_fail@plt+0x45a8>
   1593c:	ldr	lr, [sp, #4]
   15940:	add	sp, sp, #8
   15944:	pop	{r2, r3}
   15948:	rsbs	r2, r2, #0
   1594c:	sbc	r3, r3, r3, lsl #1
   15950:	bx	lr
   15954:	push	{r1, lr}
   15958:	mov	r0, #8
   1595c:	bl	110e0 <raise@plt>
   15960:	pop	{r1, pc}
   15964:	cmp	r1, r3
   15968:	cmpeq	r0, r2
   1596c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15970:	mov	r4, r0
   15974:	movcc	r0, #0
   15978:	mov	r5, r1
   1597c:	ldr	lr, [sp, #36]	; 0x24
   15980:	movcc	r1, r0
   15984:	bcc	15a80 <__assert_fail@plt+0x46c4>
   15988:	cmp	r3, #0
   1598c:	clzeq	ip, r2
   15990:	clzne	ip, r3
   15994:	addeq	ip, ip, #32
   15998:	cmp	r5, #0
   1599c:	clzeq	r1, r4
   159a0:	addeq	r1, r1, #32
   159a4:	clzne	r1, r5
   159a8:	sub	ip, ip, r1
   159ac:	sub	sl, ip, #32
   159b0:	lsl	r9, r3, ip
   159b4:	rsb	fp, ip, #32
   159b8:	orr	r9, r9, r2, lsl sl
   159bc:	orr	r9, r9, r2, lsr fp
   159c0:	lsl	r8, r2, ip
   159c4:	cmp	r5, r9
   159c8:	cmpeq	r4, r8
   159cc:	movcc	r0, #0
   159d0:	movcc	r1, r0
   159d4:	bcc	159f0 <__assert_fail@plt+0x4634>
   159d8:	mov	r0, #1
   159dc:	subs	r4, r4, r8
   159e0:	lsl	r1, r0, sl
   159e4:	orr	r1, r1, r0, lsr fp
   159e8:	lsl	r0, r0, ip
   159ec:	sbc	r5, r5, r9
   159f0:	cmp	ip, #0
   159f4:	beq	15a80 <__assert_fail@plt+0x46c4>
   159f8:	lsr	r6, r8, #1
   159fc:	orr	r6, r6, r9, lsl #31
   15a00:	lsr	r7, r9, #1
   15a04:	mov	r2, ip
   15a08:	b	15a2c <__assert_fail@plt+0x4670>
   15a0c:	subs	r3, r4, r6
   15a10:	sbc	r8, r5, r7
   15a14:	adds	r3, r3, r3
   15a18:	adc	r8, r8, r8
   15a1c:	adds	r4, r3, #1
   15a20:	adc	r5, r8, #0
   15a24:	subs	r2, r2, #1
   15a28:	beq	15a48 <__assert_fail@plt+0x468c>
   15a2c:	cmp	r5, r7
   15a30:	cmpeq	r4, r6
   15a34:	bcs	15a0c <__assert_fail@plt+0x4650>
   15a38:	adds	r4, r4, r4
   15a3c:	adc	r5, r5, r5
   15a40:	subs	r2, r2, #1
   15a44:	bne	15a2c <__assert_fail@plt+0x4670>
   15a48:	lsr	r3, r4, ip
   15a4c:	orr	r3, r3, r5, lsl fp
   15a50:	lsr	r2, r5, ip
   15a54:	orr	r3, r3, r5, lsr sl
   15a58:	adds	r0, r0, r4
   15a5c:	mov	r4, r3
   15a60:	lsl	r3, r2, ip
   15a64:	orr	r3, r3, r4, lsl sl
   15a68:	lsl	ip, r4, ip
   15a6c:	orr	r3, r3, r4, lsr fp
   15a70:	adc	r1, r1, r5
   15a74:	subs	r0, r0, ip
   15a78:	mov	r5, r2
   15a7c:	sbc	r1, r1, r3
   15a80:	cmp	lr, #0
   15a84:	strdne	r4, [lr]
   15a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a90:	mov	r7, r0
   15a94:	ldr	r6, [pc, #72]	; 15ae4 <__assert_fail@plt+0x4728>
   15a98:	ldr	r5, [pc, #72]	; 15ae8 <__assert_fail@plt+0x472c>
   15a9c:	add	r6, pc, r6
   15aa0:	add	r5, pc, r5
   15aa4:	sub	r6, r6, r5
   15aa8:	mov	r8, r1
   15aac:	mov	r9, r2
   15ab0:	bl	110a8 <calloc@plt-0x20>
   15ab4:	asrs	r6, r6, #2
   15ab8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15abc:	mov	r4, #0
   15ac0:	add	r4, r4, #1
   15ac4:	ldr	r3, [r5], #4
   15ac8:	mov	r2, r9
   15acc:	mov	r1, r8
   15ad0:	mov	r0, r7
   15ad4:	blx	r3
   15ad8:	cmp	r6, r4
   15adc:	bne	15ac0 <__assert_fail@plt+0x4704>
   15ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ae4:	andeq	r1, r1, r8, ror #8
   15ae8:	andeq	r1, r1, r0, ror #8
   15aec:	bx	lr
   15af0:	ldr	r3, [pc, #12]	; 15b04 <__assert_fail@plt+0x4748>
   15af4:	mov	r1, #0
   15af8:	add	r3, pc, r3
   15afc:	ldr	r2, [r3]
   15b00:	b	112cc <__cxa_atexit@plt>
   15b04:	andeq	r1, r1, r4, lsl r6
   15b08:	mov	r2, r1
   15b0c:	mov	r1, r0
   15b10:	mov	r0, #3
   15b14:	b	11380 <__xstat64@plt>

Disassembly of section .fini:

00015b18 <.fini>:
   15b18:	push	{r3, lr}
   15b1c:	pop	{r3, pc}
