
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11f20 <__assert_fail@plt+0xd74>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <fstatfs64@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <fstatfs64@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	sp, r1, ip, asr #2

00010eb8 <fstatfs64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #118784	; 0x1d000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #118784	; 0x1d000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #118784	; 0x1d000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #118784	; 0x1d000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #118784	; 0x1d000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <fflush@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #118784	; 0x1d000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <memmove@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #118784	; 0x1d000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #118784	; 0x1d000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #118784	; 0x1d000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #118784	; 0x1d000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #118784	; 0x1d000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <memcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #118784	; 0x1d000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <fputc_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #118784	; 0x1d000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #118784	; 0x1d000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #118784	; 0x1d000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #118784	; 0x1d000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <__fxstatat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #118784	; 0x1d000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <iswprint@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #118784	; 0x1d000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__fxstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #118784	; 0x1d000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fwrite@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #118784	; 0x1d000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <lseek64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #118784	; 0x1d000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__ctype_get_mb_cur_max@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #118784	; 0x1d000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <__fpending@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #118784	; 0x1d000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <mbrtowc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #118784	; 0x1d000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <error@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #118784	; 0x1d000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #118784	; 0x1d000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <malloc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #118784	; 0x1d000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__libc_start_main@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #118784	; 0x1d000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__freading@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #118784	; 0x1d000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__gmon_start__@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #118784	; 0x1d000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <getopt_long@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #118784	; 0x1d000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <__ctype_b_loc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #118784	; 0x1d000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #118784	; 0x1d000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #118784	; 0x1d000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <openat64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #118784	; 0x1d000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <fchmodat@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #118784	; 0x1d000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <__errno_location@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #118784	; 0x1d000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__sprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #118784	; 0x1d000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <__cxa_atexit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #118784	; 0x1d000
   11088:	ldr	pc, [ip, #28]!

0001108c <memset@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #118784	; 0x1d000
   11094:	ldr	pc, [ip, #20]!

00011098 <__printf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #118784	; 0x1d000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fileno@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #118784	; 0x1d000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <__fprintf_chk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #28, 20	; 0x1c000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <fclose@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #28, 20	; 0x1c000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <fseeko64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #28, 20	; 0x1c000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <fcntl64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #28, 20	; 0x1c000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #28, 20	; 0x1c000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #28, 20	; 0x1c000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #28, 20	; 0x1c000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <readdir64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #28, 20	; 0x1c000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <fdopendir@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #28, 20	; 0x1c000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <dirfd@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #28, 20	; 0x1c000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <fchdir@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #28, 20	; 0x1c000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <qsort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #28, 20	; 0x1c000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #28, 20	; 0x1c000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <umask@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

00011158 <chmod@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3980]!	; 0xf8c

00011164 <__xstat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3972]!	; 0xf84

00011170 <strncmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3964]!	; 0xf7c

0001117c <abort@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3956]!	; 0xf74

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3948]!	; 0xf6c

00011194 <__lxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3940]!	; 0xf64

000111a0 <closedir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3932]!	; 0xf5c

000111ac <__assert_fail@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111b8 <.text>:
   111b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111bc:	mov	r5, r1
   111c0:	movw	r4, #51112	; 0xc7a8
   111c4:	movt	r4, #1
   111c8:	strd	r6, [sp, #8]
   111cc:	mov	r6, r0
   111d0:	strd	r8, [sp, #16]
   111d4:	movw	r9, #57624	; 0xe118
   111d8:	movt	r9, #2
   111dc:	strd	sl, [sp, #24]
   111e0:	mov	sl, #0
   111e4:	movw	fp, #57736	; 0xe188
   111e8:	movt	fp, #2
   111ec:	str	lr, [sp, #32]
   111f0:	sub	sp, sp, #164	; 0xa4
   111f4:	ldr	r7, [pc, #3296]	; 11edc <__assert_fail@plt+0xd30>
   111f8:	mov	r8, sl
   111fc:	str	sl, [sp, #16]
   11200:	ldr	r0, [r1]
   11204:	str	sl, [sp, #20]
   11208:	str	sl, [sp, #40]	; 0x28
   1120c:	bl	16d34 <__assert_fail@plt+0x5b88>
   11210:	movw	r1, #50168	; 0xc3f8
   11214:	movt	r1, #1
   11218:	str	sl, [sp, #24]
   1121c:	mov	r0, #6
   11220:	bl	110e0 <setlocale@plt>
   11224:	movw	r1, #51056	; 0xc770
   11228:	movt	r1, #1
   1122c:	movw	r0, #50888	; 0xc6c8
   11230:	movt	r0, #1
   11234:	bl	11140 <bindtextdomain@plt>
   11238:	movw	r0, #50888	; 0xc6c8
   1123c:	movt	r0, #1
   11240:	bl	10f6c <textdomain@plt>
   11244:	movw	r0, #9124	; 0x23a4
   11248:	movt	r0, #1
   1124c:	bl	1c1cc <__assert_fail@plt+0xb020>
   11250:	strb	sl, [fp]
   11254:	strb	sl, [fp, #1]
   11258:	strb	sl, [fp, #2]
   1125c:	mov	sl, #0
   11260:	mov	r3, r7
   11264:	mov	r2, r4
   11268:	mov	r1, r5
   1126c:	mov	r0, r6
   11270:	str	sl, [sp]
   11274:	bl	11020 <getopt_long@plt>
   11278:	cmn	r0, #1
   1127c:	beq	11498 <__assert_fail@plt+0x2ec>
   11280:	cmp	r0, #99	; 0x63
   11284:	beq	1145c <__assert_fail@plt+0x2b0>
   11288:	ble	112cc <__assert_fail@plt+0x120>
   1128c:	cmp	r0, #118	; 0x76
   11290:	beq	11454 <__assert_fail@plt+0x2a8>
   11294:	ble	1134c <__assert_fail@plt+0x1a0>
   11298:	cmp	r0, #256	; 0x100
   1129c:	beq	1144c <__assert_fail@plt+0x2a0>
   112a0:	ble	1133c <__assert_fail@plt+0x190>
   112a4:	movw	r3, #257	; 0x101
   112a8:	cmp	r0, r3
   112ac:	beq	11440 <__assert_fail@plt+0x294>
   112b0:	movw	r3, #258	; 0x102
   112b4:	cmp	r0, r3
   112b8:	bne	11344 <__assert_fail@plt+0x198>
   112bc:	movw	r3, #57728	; 0xe180
   112c0:	movt	r3, #2
   112c4:	ldr	r8, [r3]
   112c8:	b	1125c <__assert_fail@plt+0xb0>
   112cc:	cmp	r0, #55	; 0x37
   112d0:	bgt	1140c <__assert_fail@plt+0x260>
   112d4:	cmp	r0, #48	; 0x30
   112d8:	bge	11370 <__assert_fail@plt+0x1c4>
   112dc:	cmn	r0, #2
   112e0:	beq	11468 <__assert_fail@plt+0x2bc>
   112e4:	bgt	113fc <__assert_fail@plt+0x250>
   112e8:	cmn	r0, #3
   112ec:	bne	11344 <__assert_fail@plt+0x198>
   112f0:	movw	r1, #51080	; 0xc788
   112f4:	movt	r1, #1
   112f8:	movw	r2, #51096	; 0xc798
   112fc:	movt	r2, #1
   11300:	movw	r3, #57628	; 0xe11c
   11304:	movt	r3, #2
   11308:	movw	r0, #57724	; 0xe17c
   1130c:	movt	r0, #2
   11310:	str	r2, [sp]
   11314:	movw	r2, #50884	; 0xc6c4
   11318:	movt	r2, #1
   1131c:	stmib	sp, {r1, sl}
   11320:	movw	r1, #49880	; 0xc2d8
   11324:	movt	r1, #1
   11328:	ldr	r0, [r0]
   1132c:	ldr	r3, [r3]
   11330:	bl	1ae20 <__assert_fail@plt+0x9c74>
   11334:	mov	r0, sl
   11338:	bl	11038 <exit@plt>
   1133c:	cmp	r0, #120	; 0x78
   11340:	ble	11370 <__assert_fail@plt+0x1c4>
   11344:	mov	r0, #1
   11348:	bl	11fd4 <__assert_fail@plt+0xe28>
   1134c:	cmp	r0, #111	; 0x6f
   11350:	beq	11370 <__assert_fail@plt+0x1c4>
   11354:	bgt	113f0 <__assert_fail@plt+0x244>
   11358:	cmp	r0, #102	; 0x66
   1135c:	moveq	r3, #1
   11360:	strbeq	r3, [fp, #1]
   11364:	beq	1125c <__assert_fail@plt+0xb0>
   11368:	cmp	r0, #103	; 0x67
   1136c:	bne	11344 <__assert_fail@plt+0x198>
   11370:	movw	r3, #57712	; 0xe170
   11374:	movt	r3, #2
   11378:	ldr	r2, [sp, #20]
   1137c:	ldr	r3, [r3]
   11380:	mov	sl, r2
   11384:	cmp	r2, #0
   11388:	addne	sl, sl, #1
   1138c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11390:	ldr	r3, [r5, r3, lsl #2]
   11394:	str	sl, [sp, #28]
   11398:	mov	r0, r3
   1139c:	str	r3, [sp, #32]
   113a0:	bl	11044 <strlen@plt>
   113a4:	add	sl, r0, sl
   113a8:	mov	r2, r0
   113ac:	ldr	r3, [sp, #32]
   113b0:	ldr	r1, [sp, #40]	; 0x28
   113b4:	cmp	r1, sl
   113b8:	bls	11470 <__assert_fail@plt+0x2c4>
   113bc:	mov	r1, r3
   113c0:	ldr	lr, [sp, #20]
   113c4:	mov	ip, #44	; 0x2c
   113c8:	add	r2, r2, #1
   113cc:	str	sl, [sp, #20]
   113d0:	ldr	r3, [sp, #24]
   113d4:	ldr	r0, [sp, #28]
   113d8:	strb	ip, [r3, lr]
   113dc:	add	r0, r3, r0
   113e0:	bl	10f24 <memcpy@plt>
   113e4:	mov	r3, #1
   113e8:	strb	r3, [fp]
   113ec:	b	1125c <__assert_fail@plt+0xb0>
   113f0:	cmp	r0, #114	; 0x72
   113f4:	blt	11344 <__assert_fail@plt+0x198>
   113f8:	b	11370 <__assert_fail@plt+0x1c4>
   113fc:	sub	r0, r0, #43	; 0x2b
   11400:	cmp	r0, #1
   11404:	bhi	11344 <__assert_fail@plt+0x198>
   11408:	b	11370 <__assert_fail@plt+0x1c4>
   1140c:	cmp	r0, #82	; 0x52
   11410:	moveq	r3, #1
   11414:	strbeq	r3, [fp, #2]
   11418:	beq	1125c <__assert_fail@plt+0xb0>
   1141c:	ble	11434 <__assert_fail@plt+0x288>
   11420:	cmp	r0, #88	; 0x58
   11424:	beq	11370 <__assert_fail@plt+0x1c4>
   11428:	cmp	r0, #97	; 0x61
   1142c:	bne	11344 <__assert_fail@plt+0x198>
   11430:	b	11370 <__assert_fail@plt+0x1c4>
   11434:	cmp	r0, #61	; 0x3d
   11438:	bne	11344 <__assert_fail@plt+0x198>
   1143c:	b	11370 <__assert_fail@plt+0x1c4>
   11440:	mov	r3, #1
   11444:	str	r3, [sp, #16]
   11448:	b	1125c <__assert_fail@plt+0xb0>
   1144c:	str	sl, [sp, #16]
   11450:	b	1125c <__assert_fail@plt+0xb0>
   11454:	str	sl, [r9]
   11458:	b	1125c <__assert_fail@plt+0xb0>
   1145c:	mov	r3, #1
   11460:	str	r3, [r9]
   11464:	b	1125c <__assert_fail@plt+0xb0>
   11468:	mov	r0, sl
   1146c:	bl	11fd4 <__assert_fail@plt+0xe28>
   11470:	add	ip, sl, #1
   11474:	add	r1, sp, #40	; 0x28
   11478:	ldr	r0, [sp, #24]
   1147c:	str	r2, [sp, #36]	; 0x24
   11480:	str	ip, [sp, #40]	; 0x28
   11484:	bl	1b204 <__assert_fail@plt+0xa058>
   11488:	str	r0, [sp, #24]
   1148c:	ldr	r3, [sp, #32]
   11490:	ldr	r2, [sp, #36]	; 0x24
   11494:	b	113bc <__assert_fail@plt+0x210>
   11498:	cmp	r8, sl
   1149c:	ldr	r3, [sp, #24]
   114a0:	beq	11968 <__assert_fail@plt+0x7bc>
   114a4:	cmp	r3, sl
   114a8:	beq	114d4 <__assert_fail@plt+0x328>
   114ac:	mov	r2, #5
   114b0:	mov	r0, sl
   114b4:	movw	r1, #51180	; 0xc7ec
   114b8:	movt	r1, #1
   114bc:	bl	10f54 <dcgettext@plt>
   114c0:	mov	r2, r0
   114c4:	mov	r1, sl
   114c8:	mov	r0, sl
   114cc:	bl	10fd8 <error@plt>
   114d0:	b	11344 <__assert_fail@plt+0x198>
   114d4:	movw	r4, #57712	; 0xe170
   114d8:	movt	r4, #2
   114dc:	ldr	r3, [r4]
   114e0:	cmp	r6, r3
   114e4:	ble	1199c <__assert_fail@plt+0x7f0>
   114e8:	mov	r0, r8
   114ec:	bl	16aa4 <__assert_fail@plt+0x58f8>
   114f0:	cmp	r0, #0
   114f4:	str	r0, [fp, #4]
   114f8:	beq	11eb4 <__assert_fail@plt+0xd08>
   114fc:	ldrb	r3, [fp, #2]
   11500:	ldr	r2, [sp, #16]
   11504:	ands	r3, r2, r3
   11508:	streq	r3, [fp, #32]
   1150c:	bne	11d44 <__assert_fail@plt+0xb98>
   11510:	movw	r3, #57624	; 0xe118
   11514:	movt	r3, #2
   11518:	ldr	r0, [r4]
   1151c:	mov	r2, #0
   11520:	movw	r1, #1041	; 0x411
   11524:	str	r3, [sp, #16]
   11528:	movw	r3, #51892	; 0xcab4
   1152c:	movt	r3, #1
   11530:	mov	sl, #1
   11534:	str	r3, [sp, #24]
   11538:	movw	r3, #51920	; 0xcad0
   1153c:	movt	r3, #1
   11540:	add	r0, r5, r0, lsl #2
   11544:	str	r3, [sp, #36]	; 0x24
   11548:	bl	1b62c <__assert_fail@plt+0xa480>
   1154c:	mov	r9, r0
   11550:	mov	r0, r9
   11554:	bl	144c8 <__assert_fail@plt+0x331c>
   11558:	subs	r7, r0, #0
   1155c:	beq	119c4 <__assert_fail@plt+0x818>
   11560:	ldrh	r3, [r7, #56]	; 0x38
   11564:	ldr	r4, [r7, #28]
   11568:	sub	r3, r3, #2
   1156c:	cmp	r3, #11
   11570:	ldrls	pc, [pc, r3, lsl #2]
   11574:	b	1160c <__assert_fail@plt+0x460>
   11578:	strdeq	r1, [r1], -r8
   1157c:	andeq	r1, r1, ip, lsl #12
   11580:			; <UNDEFINED> instruction: 0x000115b4
   11584:	andeq	r1, r1, ip, lsl #12
   11588:	andeq	r1, r1, r8, lsr #11
   1158c:	andeq	r1, r1, r0, lsr #17
   11590:	andeq	r1, r1, ip, lsl #12
   11594:	andeq	r1, r1, ip, lsl #12
   11598:	andeq	r1, r1, ip, lsr r8
   1159c:	andeq	r1, r1, ip, lsl #12
   115a0:	andeq	r1, r1, ip, lsl #12
   115a4:	strdeq	r1, [r1], -r4
   115a8:	mov	r5, #1
   115ac:	and	sl, sl, r5
   115b0:	b	11550 <__assert_fail@plt+0x3a4>
   115b4:	ldrb	r5, [fp, #1]
   115b8:	cmp	r5, #0
   115bc:	beq	11b68 <__assert_fail@plt+0x9bc>
   115c0:	ldr	r3, [sp, #16]
   115c4:	ldr	r3, [r3]
   115c8:	cmp	r3, #2
   115cc:	beq	115d8 <__assert_fail@plt+0x42c>
   115d0:	cmp	r3, #0
   115d4:	beq	11a00 <__assert_fail@plt+0x854>
   115d8:	mov	r5, #0
   115dc:	ldrb	r3, [fp, #2]
   115e0:	cmp	r3, #0
   115e4:	beq	118dc <__assert_fail@plt+0x730>
   115e8:	cmp	r5, #1
   115ec:	movls	r5, #0
   115f0:	movhi	r5, #1
   115f4:	b	115ac <__assert_fail@plt+0x400>
   115f8:	mov	r1, r7
   115fc:	mov	r0, r9
   11600:	bl	1b684 <__assert_fail@plt+0xa4d8>
   11604:	cmp	r0, #0
   11608:	bne	11cb8 <__assert_fail@plt+0xb0c>
   1160c:	ldr	ip, [fp, #32]
   11610:	cmp	ip, #0
   11614:	beq	1162c <__assert_fail@plt+0x480>
   11618:	ldrd	r2, [ip]
   1161c:	ldrd	r0, [r7, #160]	; 0xa0
   11620:	cmp	r1, r3
   11624:	cmpeq	r0, r2
   11628:	beq	11a24 <__assert_fail@plt+0x878>
   1162c:	ldr	r6, [r7, #80]	; 0x50
   11630:	and	r1, r6, #61440	; 0xf000
   11634:	cmp	r1, #40960	; 0xa000
   11638:	beq	118f0 <__assert_fail@plt+0x744>
   1163c:	mov	r5, #0
   11640:	sub	r1, r1, #16384	; 0x4000
   11644:	ldr	r8, [r7, #24]
   11648:	clz	r1, r1
   1164c:	mov	r0, r6
   11650:	lsr	r1, r1, #5
   11654:	str	r5, [sp]
   11658:	ldr	r3, [fp, #4]
   1165c:	ldr	r2, [fp, #8]
   11660:	bl	16b00 <__assert_fail@plt+0x5954>
   11664:	mov	r2, r0
   11668:	mov	r3, r5
   1166c:	ldr	r0, [r9, #32]
   11670:	mov	r1, r8
   11674:	str	r2, [sp, #20]
   11678:	bl	12490 <__assert_fail@plt+0x12e4>
   1167c:	cmp	r0, #0
   11680:	bne	11ac8 <__assert_fail@plt+0x91c>
   11684:	ldr	r3, [sp, #16]
   11688:	ldr	r3, [r3]
   1168c:	cmp	r3, #2
   11690:	moveq	r5, #4
   11694:	beq	11744 <__assert_fail@plt+0x598>
   11698:	ldr	r3, [sp, #20]
   1169c:	tst	r3, #3584	; 0xe00
   116a0:	ldreq	r3, [sp, #20]
   116a4:	bne	11adc <__assert_fail@plt+0x930>
   116a8:	eor	r3, r3, r6
   116ac:	ubfx	r3, r3, #0, #12
   116b0:	cmp	r3, #0
   116b4:	beq	11b50 <__assert_fail@plt+0x9a4>
   116b8:	ubfx	r3, r6, #0, #12
   116bc:	mov	r1, r4
   116c0:	mov	r0, #4
   116c4:	mov	r5, #0
   116c8:	str	r3, [sp, #28]
   116cc:	bl	19378 <__assert_fail@plt+0x81cc>
   116d0:	mov	r8, r0
   116d4:	ldr	r0, [sp, #20]
   116d8:	add	r1, sp, #44	; 0x2c
   116dc:	ubfx	r3, r0, #0, #12
   116e0:	str	r3, [sp, #32]
   116e4:	bl	125d4 <__assert_fail@plt+0x1428>
   116e8:	add	r1, sp, #56	; 0x38
   116ec:	mov	r0, r6
   116f0:	strb	r5, [sp, #54]	; 0x36
   116f4:	bl	125d4 <__assert_fail@plt+0x1428>
   116f8:	mov	r0, r5
   116fc:	movw	r1, #51976	; 0xcb08
   11700:	movt	r1, #1
   11704:	mov	r2, #5
   11708:	strb	r5, [sp, #66]	; 0x42
   1170c:	mov	r5, #4
   11710:	bl	10f54 <dcgettext@plt>
   11714:	add	lr, sp, #45	; 0x2d
   11718:	add	ip, sp, #57	; 0x39
   1171c:	ldr	r3, [sp, #28]
   11720:	mov	r1, r0
   11724:	mov	r0, #1
   11728:	ldr	r2, [sp, #32]
   1172c:	str	ip, [sp]
   11730:	stmib	sp, {r2, lr}
   11734:	mov	r2, r8
   11738:	bl	11098 <__printf_chk@plt>
   1173c:	cmp	r5, #2
   11740:	bls	115dc <__assert_fail@plt+0x430>
   11744:	ldrb	r3, [fp]
   11748:	cmp	r3, #0
   1174c:	beq	115dc <__assert_fail@plt+0x430>
   11750:	and	r1, r6, #61440	; 0xf000
   11754:	mov	r8, #0
   11758:	ldr	r3, [fp, #4]
   1175c:	sub	r1, r1, #16384	; 0x4000
   11760:	mov	r0, r6
   11764:	clz	r1, r1
   11768:	mov	r2, r8
   1176c:	str	r8, [sp]
   11770:	lsr	r1, r1, #5
   11774:	bl	16b00 <__assert_fail@plt+0x5954>
   11778:	ldr	r3, [sp, #20]
   1177c:	mov	r6, r0
   11780:	bics	r3, r3, r0
   11784:	beq	115dc <__assert_fail@plt+0x430>
   11788:	add	r1, sp, #44	; 0x2c
   1178c:	ldr	r0, [sp, #20]
   11790:	mov	r5, #1
   11794:	bl	125d4 <__assert_fail@plt+0x1428>
   11798:	mov	r0, r6
   1179c:	add	r1, sp, #56	; 0x38
   117a0:	bl	125d4 <__assert_fail@plt+0x1428>
   117a4:	mov	r2, #5
   117a8:	mov	r0, r8
   117ac:	ldr	r1, [sp, #36]	; 0x24
   117b0:	strb	r8, [sp, #54]	; 0x36
   117b4:	strb	r8, [sp, #66]	; 0x42
   117b8:	bl	10f54 <dcgettext@plt>
   117bc:	mov	r6, r0
   117c0:	mov	r2, r4
   117c4:	mov	r1, #3
   117c8:	mov	r0, r8
   117cc:	bl	19ef8 <__assert_fail@plt+0x8d4c>
   117d0:	add	r1, sp, #45	; 0x2d
   117d4:	add	ip, sp, #57	; 0x39
   117d8:	mov	r3, r0
   117dc:	mov	r2, r6
   117e0:	mov	r0, r8
   117e4:	stm	sp, {r1, ip}
   117e8:	mov	r1, r8
   117ec:	bl	10fd8 <error@plt>
   117f0:	b	115dc <__assert_fail@plt+0x430>
   117f4:	ldrb	r5, [fp, #1]
   117f8:	cmp	r5, #0
   117fc:	bne	115c0 <__assert_fail@plt+0x414>
   11800:	mov	r2, #5
   11804:	mov	r0, r5
   11808:	movw	r1, #51388	; 0xc8bc
   1180c:	movt	r1, #1
   11810:	bl	10f54 <dcgettext@plt>
   11814:	mov	r6, r0
   11818:	mov	r1, r4
   1181c:	mov	r0, #4
   11820:	bl	19378 <__assert_fail@plt+0x81cc>
   11824:	mov	r3, r0
   11828:	mov	r2, r6
   1182c:	mov	r1, r5
   11830:	mov	r0, r5
   11834:	bl	10fd8 <error@plt>
   11838:	b	115c0 <__assert_fail@plt+0x414>
   1183c:	ldr	r3, [r7, #48]	; 0x30
   11840:	cmp	r3, #0
   11844:	bne	11854 <__assert_fail@plt+0x6a8>
   11848:	ldr	r3, [r7, #16]
   1184c:	cmp	r3, #0
   11850:	beq	11e04 <__assert_fail@plt+0xc58>
   11854:	ldrb	r5, [fp, #1]
   11858:	cmp	r5, #0
   1185c:	movweq	r1, #51340	; 0xc88c
   11860:	movteq	r1, #1
   11864:	bne	115c0 <__assert_fail@plt+0x414>
   11868:	ldr	r6, [r7, #32]
   1186c:	mov	r2, #5
   11870:	mov	r0, r5
   11874:	bl	10f54 <dcgettext@plt>
   11878:	mov	r8, r0
   1187c:	mov	r1, r4
   11880:	mov	r0, #4
   11884:	bl	19378 <__assert_fail@plt+0x81cc>
   11888:	mov	r3, r0
   1188c:	mov	r2, r8
   11890:	mov	r1, r6
   11894:	mov	r0, r5
   11898:	bl	10fd8 <error@plt>
   1189c:	b	115c0 <__assert_fail@plt+0x414>
   118a0:	ldrb	r5, [fp, #1]
   118a4:	cmp	r5, #0
   118a8:	bne	115c0 <__assert_fail@plt+0x414>
   118ac:	ldr	r6, [r7, #32]
   118b0:	mov	r2, r4
   118b4:	mov	r1, #3
   118b8:	mov	r0, r5
   118bc:	bl	19ef8 <__assert_fail@plt+0x8d4c>
   118c0:	mov	r3, r0
   118c4:	movw	r2, #52372	; 0xcc94
   118c8:	movt	r2, #1
   118cc:	mov	r0, r5
   118d0:	mov	r1, r6
   118d4:	bl	10fd8 <error@plt>
   118d8:	b	115c0 <__assert_fail@plt+0x414>
   118dc:	mov	r1, r7
   118e0:	mov	r2, #4
   118e4:	mov	r0, r9
   118e8:	bl	14cdc <__assert_fail@plt+0x3b30>
   118ec:	b	115e8 <__assert_fail@plt+0x43c>
   118f0:	mov	r3, #0
   118f4:	mov	r5, #2
   118f8:	mov	r6, r3
   118fc:	str	r3, [sp, #20]
   11900:	ldr	r3, [sp, #16]
   11904:	ldr	r3, [r3]
   11908:	cmp	r3, #2
   1190c:	beq	115dc <__assert_fail@plt+0x430>
   11910:	cmp	r3, #0
   11914:	bne	115dc <__assert_fail@plt+0x430>
   11918:	mov	r1, r4
   1191c:	mov	r0, #4
   11920:	str	r3, [sp, #28]
   11924:	bl	19378 <__assert_fail@plt+0x81cc>
   11928:	cmp	r5, #0
   1192c:	mov	r8, r0
   11930:	beq	11a10 <__assert_fail@plt+0x864>
   11934:	cmp	r5, #2
   11938:	ldr	r3, [sp, #28]
   1193c:	bne	11bf0 <__assert_fail@plt+0xa44>
   11940:	movw	r1, #51836	; 0xca7c
   11944:	movt	r1, #1
   11948:	mov	r0, r3
   1194c:	mov	r2, #5
   11950:	bl	10f54 <dcgettext@plt>
   11954:	mov	r1, r0
   11958:	mov	r2, r8
   1195c:	mov	r0, #1
   11960:	bl	11098 <__printf_chk@plt>
   11964:	b	115dc <__assert_fail@plt+0x430>
   11968:	movw	r4, #57712	; 0xe170
   1196c:	movt	r4, #2
   11970:	cmp	r3, #0
   11974:	ldr	r2, [r4]
   11978:	beq	11bcc <__assert_fail@plt+0xa20>
   1197c:	cmp	r6, r2
   11980:	movle	r3, r2
   11984:	bgt	11ba4 <__assert_fail@plt+0x9f8>
   11988:	sub	r3, r3, #-1073741823	; 0xc0000001
   1198c:	ldr	r2, [sp, #24]
   11990:	ldr	r3, [r5, r3, lsl #2]
   11994:	cmp	r3, r2
   11998:	beq	11dc8 <__assert_fail@plt+0xc1c>
   1199c:	mov	r2, #5
   119a0:	movw	r1, #51224	; 0xc818
   119a4:	movt	r1, #1
   119a8:	mov	r0, #0
   119ac:	bl	10f54 <dcgettext@plt>
   119b0:	mov	r1, #0
   119b4:	mov	r2, r0
   119b8:	mov	r0, r1
   119bc:	bl	10fd8 <error@plt>
   119c0:	b	11344 <__assert_fail@plt+0x198>
   119c4:	bl	11068 <__errno_location@plt>
   119c8:	ldr	r5, [r0]
   119cc:	mov	r4, r0
   119d0:	cmp	r5, #0
   119d4:	beq	119e8 <__assert_fail@plt+0x83c>
   119d8:	ldrb	sl, [fp, #1]
   119dc:	cmp	sl, #0
   119e0:	movne	sl, r7
   119e4:	beq	11da0 <__assert_fail@plt+0xbf4>
   119e8:	mov	r0, r9
   119ec:	bl	142c0 <__assert_fail@plt+0x3114>
   119f0:	cmp	r0, #0
   119f4:	bne	11b74 <__assert_fail@plt+0x9c8>
   119f8:	eor	r0, sl, #1
   119fc:	bl	11038 <exit@plt>
   11a00:	mov	r1, r4
   11a04:	mov	r0, #4
   11a08:	bl	19378 <__assert_fail@plt+0x81cc>
   11a0c:	mov	r8, r0
   11a10:	mov	r0, #0
   11a14:	mov	r2, #5
   11a18:	ldr	r1, [sp, #24]
   11a1c:	mov	r5, r0
   11a20:	b	11950 <__assert_fail@plt+0x7a4>
   11a24:	ldrd	r0, [ip, #8]
   11a28:	ldrd	r2, [r7, #64]	; 0x40
   11a2c:	cmp	r3, r1
   11a30:	cmpeq	r2, r0
   11a34:	bne	1162c <__assert_fail@plt+0x480>
   11a38:	movw	r1, #51320	; 0xc878
   11a3c:	movt	r1, #1
   11a40:	mov	r0, r4
   11a44:	bl	10ee8 <strcmp@plt>
   11a48:	subs	r5, r0, #0
   11a4c:	bne	11e58 <__assert_fail@plt+0xcac>
   11a50:	mov	r2, #5
   11a54:	movw	r1, #51616	; 0xc9a0
   11a58:	movt	r1, #1
   11a5c:	bl	10f54 <dcgettext@plt>
   11a60:	mov	r6, r0
   11a64:	mov	r1, r4
   11a68:	mov	r0, #4
   11a6c:	bl	19378 <__assert_fail@plt+0x81cc>
   11a70:	mov	r3, r0
   11a74:	mov	r2, r6
   11a78:	mov	r1, r5
   11a7c:	mov	r0, r5
   11a80:	bl	10fd8 <error@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #51724	; 0xca0c
   11a8c:	movt	r1, #1
   11a90:	mov	r0, #0
   11a94:	bl	10f54 <dcgettext@plt>
   11a98:	mov	r1, #0
   11a9c:	mov	r2, r0
   11aa0:	mov	r0, r1
   11aa4:	mov	r5, #0
   11aa8:	bl	10fd8 <error@plt>
   11aac:	mov	r1, r7
   11ab0:	mov	r2, #4
   11ab4:	mov	r0, r9
   11ab8:	bl	14cdc <__assert_fail@plt+0x3b30>
   11abc:	mov	r0, r9
   11ac0:	bl	144c8 <__assert_fail@plt+0x331c>
   11ac4:	b	115ac <__assert_fail@plt+0x400>
   11ac8:	ldrb	r5, [fp, #1]
   11acc:	cmp	r5, #0
   11ad0:	beq	11cfc <__assert_fail@plt+0xb50>
   11ad4:	mov	r5, #1
   11ad8:	b	11900 <__assert_fail@plt+0x754>
   11adc:	add	r3, sp, #56	; 0x38
   11ae0:	mov	r2, r8
   11ae4:	str	r0, [sp]
   11ae8:	mov	r0, #3
   11aec:	ldr	r1, [r9, #32]
   11af0:	bl	10f78 <__fxstatat64@plt>
   11af4:	cmp	r0, #0
   11af8:	ldreq	r3, [sp, #72]	; 0x48
   11afc:	beq	116a8 <__assert_fail@plt+0x4fc>
   11b00:	ldrb	r5, [fp, #1]
   11b04:	cmp	r5, #0
   11b08:	bne	11b50 <__assert_fail@plt+0x9a4>
   11b0c:	bl	11068 <__errno_location@plt>
   11b10:	mov	r2, #5
   11b14:	movw	r1, #51804	; 0xca5c
   11b18:	movt	r1, #1
   11b1c:	ldr	r8, [r0]
   11b20:	mov	r0, r5
   11b24:	bl	10f54 <dcgettext@plt>
   11b28:	mov	r2, r0
   11b2c:	mov	r1, r4
   11b30:	mov	r0, #4
   11b34:	str	r2, [sp, #28]
   11b38:	bl	19378 <__assert_fail@plt+0x81cc>
   11b3c:	mov	r3, r0
   11b40:	mov	r1, r8
   11b44:	ldr	r2, [sp, #28]
   11b48:	mov	r0, r5
   11b4c:	bl	10fd8 <error@plt>
   11b50:	ldr	r3, [sp, #16]
   11b54:	ldr	r8, [r3]
   11b58:	cmp	r8, #0
   11b5c:	beq	11c4c <__assert_fail@plt+0xaa0>
   11b60:	mov	r5, #3
   11b64:	b	11744 <__assert_fail@plt+0x598>
   11b68:	movw	r1, #51360	; 0xc8a0
   11b6c:	movt	r1, #1
   11b70:	b	11868 <__assert_fail@plt+0x6bc>
   11b74:	ldr	r4, [r4]
   11b78:	mov	r2, #5
   11b7c:	movw	r1, #51956	; 0xcaf4
   11b80:	movt	r1, #1
   11b84:	mov	r0, #0
   11b88:	bl	10f54 <dcgettext@plt>
   11b8c:	mov	r2, r0
   11b90:	mov	r0, #0
   11b94:	mov	sl, r0
   11b98:	mov	r1, r4
   11b9c:	bl	10fd8 <error@plt>
   11ba0:	b	119f8 <__assert_fail@plt+0x84c>
   11ba4:	ldr	r0, [sp, #24]
   11ba8:	bl	16704 <__assert_fail@plt+0x5558>
   11bac:	cmp	r0, #0
   11bb0:	mov	r6, r0
   11bb4:	str	r0, [fp, #4]
   11bb8:	beq	11e20 <__assert_fail@plt+0xc74>
   11bbc:	mov	r0, #0
   11bc0:	bl	1114c <umask@plt>
   11bc4:	str	r0, [fp, #8]
   11bc8:	b	114fc <__assert_fail@plt+0x350>
   11bcc:	add	r3, r2, #1
   11bd0:	ldr	r2, [r5, r2, lsl #2]
   11bd4:	cmp	r3, r6
   11bd8:	str	r3, [r4]
   11bdc:	str	r2, [sp, #24]
   11be0:	blt	11ba4 <__assert_fail@plt+0x9f8>
   11be4:	cmp	r2, #0
   11be8:	bne	11988 <__assert_fail@plt+0x7dc>
   11bec:	b	1199c <__assert_fail@plt+0x7f0>
   11bf0:	ldr	r5, [sp, #20]
   11bf4:	add	r1, sp, #44	; 0x2c
   11bf8:	str	r3, [sp, #32]
   11bfc:	ubfx	r3, r6, #0, #12
   11c00:	str	r3, [sp, #28]
   11c04:	mov	r0, r5
   11c08:	bl	125d4 <__assert_fail@plt+0x1428>
   11c0c:	ldr	r3, [sp, #32]
   11c10:	add	r1, sp, #56	; 0x38
   11c14:	mov	r0, r6
   11c18:	strb	r3, [sp, #54]	; 0x36
   11c1c:	bl	125d4 <__assert_fail@plt+0x1428>
   11c20:	ldr	r3, [sp, #32]
   11c24:	movw	r1, #52064	; 0xcb60
   11c28:	movt	r1, #1
   11c2c:	mov	r2, #5
   11c30:	mov	r0, r3
   11c34:	strb	r3, [sp, #66]	; 0x42
   11c38:	bl	10f54 <dcgettext@plt>
   11c3c:	ubfx	r3, r5, #0, #12
   11c40:	mov	r5, #1
   11c44:	str	r3, [sp, #32]
   11c48:	b	11714 <__assert_fail@plt+0x568>
   11c4c:	mov	r1, r4
   11c50:	mov	r0, #4
   11c54:	bl	19378 <__assert_fail@plt+0x81cc>
   11c58:	add	r1, sp, #44	; 0x2c
   11c5c:	str	r0, [sp, #28]
   11c60:	mov	r5, #3
   11c64:	ldr	r0, [sp, #20]
   11c68:	bl	125d4 <__assert_fail@plt+0x1428>
   11c6c:	add	r1, sp, #56	; 0x38
   11c70:	mov	r0, r6
   11c74:	strb	r8, [sp, #54]	; 0x36
   11c78:	bl	125d4 <__assert_fail@plt+0x1428>
   11c7c:	mov	r0, r8
   11c80:	mov	r2, #5
   11c84:	strb	r8, [sp, #66]	; 0x42
   11c88:	movw	r1, #52028	; 0xcb3c
   11c8c:	movt	r1, #1
   11c90:	bl	10f54 <dcgettext@plt>
   11c94:	ldr	r3, [sp, #20]
   11c98:	add	ip, sp, #45	; 0x2d
   11c9c:	mov	r1, r0
   11ca0:	mov	r0, #1
   11ca4:	str	ip, [sp]
   11ca8:	ldr	r2, [sp, #28]
   11cac:	ubfx	r3, r3, #0, #12
   11cb0:	bl	11098 <__printf_chk@plt>
   11cb4:	b	11744 <__assert_fail@plt+0x598>
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #51428	; 0xc8e4
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	bl	10f54 <dcgettext@plt>
   11ccc:	mov	r5, r0
   11cd0:	mov	r2, r4
   11cd4:	mov	r1, #3
   11cd8:	mov	r0, #0
   11cdc:	bl	19ef8 <__assert_fail@plt+0x8d4c>
   11ce0:	mov	r1, #0
   11ce4:	mov	r3, r0
   11ce8:	mov	r2, r5
   11cec:	mov	r0, r1
   11cf0:	bl	10fd8 <error@plt>
   11cf4:	mov	r5, #0
   11cf8:	b	115ac <__assert_fail@plt+0x400>
   11cfc:	bl	11068 <__errno_location@plt>
   11d00:	mov	r2, #5
   11d04:	movw	r1, #51776	; 0xca40
   11d08:	movt	r1, #1
   11d0c:	ldr	r8, [r0]
   11d10:	mov	r0, r5
   11d14:	bl	10f54 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	mov	r1, r4
   11d20:	mov	r0, #4
   11d24:	str	r2, [sp, #28]
   11d28:	bl	19378 <__assert_fail@plt+0x81cc>
   11d2c:	mov	r3, r0
   11d30:	mov	r1, r8
   11d34:	ldr	r2, [sp, #28]
   11d38:	mov	r0, r5
   11d3c:	bl	10fd8 <error@plt>
   11d40:	b	11ad4 <__assert_fail@plt+0x928>
   11d44:	ldr	r0, [pc, #404]	; 11ee0 <__assert_fail@plt+0xd34>
   11d48:	bl	1a838 <__assert_fail@plt+0x968c>
   11d4c:	cmp	r0, #0
   11d50:	mov	r6, r0
   11d54:	str	r0, [fp, #32]
   11d58:	bne	11510 <__assert_fail@plt+0x364>
   11d5c:	bl	11068 <__errno_location@plt>
   11d60:	movw	r1, #51268	; 0xc844
   11d64:	movt	r1, #1
   11d68:	ldr	r4, [r0]
   11d6c:	mov	r2, #5
   11d70:	mov	r0, r6
   11d74:	bl	10f54 <dcgettext@plt>
   11d78:	mov	r5, r0
   11d7c:	movw	r1, #51320	; 0xc878
   11d80:	movt	r1, #1
   11d84:	mov	r0, #4
   11d88:	bl	19378 <__assert_fail@plt+0x81cc>
   11d8c:	mov	r3, r0
   11d90:	mov	r2, r5
   11d94:	mov	r1, r4
   11d98:	mov	r0, #1
   11d9c:	bl	10fd8 <error@plt>
   11da0:	mov	r2, #5
   11da4:	mov	r0, sl
   11da8:	movw	r1, #51324	; 0xc87c
   11dac:	movt	r1, #1
   11db0:	bl	10f54 <dcgettext@plt>
   11db4:	mov	r2, r0
   11db8:	mov	r1, r5
   11dbc:	mov	r0, sl
   11dc0:	bl	10fd8 <error@plt>
   11dc4:	b	119e8 <__assert_fail@plt+0x83c>
   11dc8:	mov	r2, #5
   11dcc:	movw	r1, #51240	; 0xc828
   11dd0:	movt	r1, #1
   11dd4:	mov	r0, #0
   11dd8:	bl	10f54 <dcgettext@plt>
   11ddc:	sub	r6, r6, #-1073741823	; 0xc0000001
   11de0:	mov	r4, r0
   11de4:	ldr	r0, [r5, r6, lsl #2]
   11de8:	bl	1a6a4 <__assert_fail@plt+0x94f8>
   11dec:	mov	r1, #0
   11df0:	mov	r3, r0
   11df4:	mov	r2, r4
   11df8:	mov	r0, r1
   11dfc:	bl	10fd8 <error@plt>
   11e00:	b	11344 <__assert_fail@plt+0x198>
   11e04:	mov	r5, #1
   11e08:	mov	r1, r7
   11e0c:	mov	r2, r5
   11e10:	mov	r0, r9
   11e14:	str	r5, [r7, #16]
   11e18:	bl	14cdc <__assert_fail@plt+0x3b30>
   11e1c:	b	115ac <__assert_fail@plt+0x400>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #51300	; 0xc864
   11e28:	movt	r1, #1
   11e2c:	bl	10f54 <dcgettext@plt>
   11e30:	mov	r4, r0
   11e34:	ldr	r0, [sp, #24]
   11e38:	bl	1a6a4 <__assert_fail@plt+0x94f8>
   11e3c:	mov	r3, r0
   11e40:	mov	r2, r4
   11e44:	mov	r0, r6
   11e48:	mov	r1, r6
   11e4c:	bl	10fd8 <error@plt>
   11e50:	mov	r0, #1
   11e54:	bl	11fd4 <__assert_fail@plt+0xe28>
   11e58:	mov	r2, #5
   11e5c:	movw	r1, #51664	; 0xc9d0
   11e60:	movt	r1, #1
   11e64:	mov	r0, #0
   11e68:	bl	10f54 <dcgettext@plt>
   11e6c:	mov	r5, r0
   11e70:	mov	r2, r4
   11e74:	mov	r1, #4
   11e78:	mov	r0, #0
   11e7c:	bl	1929c <__assert_fail@plt+0x80f0>
   11e80:	mov	r4, r0
   11e84:	mov	r1, #4
   11e88:	movw	r2, #51320	; 0xc878
   11e8c:	movt	r2, #1
   11e90:	mov	r0, #1
   11e94:	bl	1929c <__assert_fail@plt+0x80f0>
   11e98:	mov	r1, #0
   11e9c:	mov	r3, r4
   11ea0:	str	r0, [sp]
   11ea4:	mov	r2, r5
   11ea8:	mov	r0, r1
   11eac:	bl	10fd8 <error@plt>
   11eb0:	b	11a84 <__assert_fail@plt+0x8d8>
   11eb4:	bl	11068 <__errno_location@plt>
   11eb8:	movw	r1, #51268	; 0xc844
   11ebc:	movt	r1, #1
   11ec0:	ldr	r4, [r0]
   11ec4:	mov	r2, #5
   11ec8:	ldr	r0, [sp, #24]
   11ecc:	bl	10f54 <dcgettext@plt>
   11ed0:	mov	r5, r0
   11ed4:	mov	r1, r8
   11ed8:	b	11d84 <__assert_fail@plt+0xbd8>
   11edc:	andeq	ip, r1, r8, lsr #4
   11ee0:	muleq	r2, r8, r1
   11ee4:	mov	fp, #0
   11ee8:	mov	lr, #0
   11eec:	pop	{r1}		; (ldr r1, [sp], #4)
   11ef0:	mov	r2, sp
   11ef4:	push	{r2}		; (str r2, [sp, #-4]!)
   11ef8:	push	{r0}		; (str r0, [sp, #-4]!)
   11efc:	ldr	ip, [pc, #16]	; 11f14 <__assert_fail@plt+0xd68>
   11f00:	push	{ip}		; (str ip, [sp, #-4]!)
   11f04:	ldr	r0, [pc, #12]	; 11f18 <__assert_fail@plt+0xd6c>
   11f08:	ldr	r3, [pc, #12]	; 11f1c <__assert_fail@plt+0xd70>
   11f0c:	bl	10ffc <__libc_start_main@plt>
   11f10:	bl	1117c <abort@plt>
   11f14:	andeq	ip, r1, r8, asr #3
   11f18:			; <UNDEFINED> instruction: 0x000111b8
   11f1c:	andeq	ip, r1, r8, ror #2
   11f20:	ldr	r3, [pc, #20]	; 11f3c <__assert_fail@plt+0xd90>
   11f24:	ldr	r2, [pc, #20]	; 11f40 <__assert_fail@plt+0xd94>
   11f28:	add	r3, pc, r3
   11f2c:	ldr	r2, [r3, r2]
   11f30:	cmp	r2, #0
   11f34:	bxeq	lr
   11f38:	b	11014 <__gmon_start__@plt>
   11f3c:	ldrdeq	ip, [r1], -r0
   11f40:	andeq	r0, r0, ip, lsl #2
   11f44:	ldr	r0, [pc, #24]	; 11f64 <__assert_fail@plt+0xdb8>
   11f48:	ldr	r3, [pc, #24]	; 11f68 <__assert_fail@plt+0xdbc>
   11f4c:	cmp	r3, r0
   11f50:	bxeq	lr
   11f54:	ldr	r3, [pc, #16]	; 11f6c <__assert_fail@plt+0xdc0>
   11f58:	cmp	r3, #0
   11f5c:	bxeq	lr
   11f60:	bx	r3
   11f64:	andeq	lr, r2, r4, ror #2
   11f68:	andeq	lr, r2, r4, ror #2
   11f6c:	andeq	r0, r0, r0
   11f70:	ldr	r0, [pc, #36]	; 11f9c <__assert_fail@plt+0xdf0>
   11f74:	ldr	r1, [pc, #36]	; 11fa0 <__assert_fail@plt+0xdf4>
   11f78:	sub	r1, r1, r0
   11f7c:	asr	r1, r1, #2
   11f80:	add	r1, r1, r1, lsr #31
   11f84:	asrs	r1, r1, #1
   11f88:	bxeq	lr
   11f8c:	ldr	r3, [pc, #16]	; 11fa4 <__assert_fail@plt+0xdf8>
   11f90:	cmp	r3, #0
   11f94:	bxeq	lr
   11f98:	bx	r3
   11f9c:	andeq	lr, r2, r4, ror #2
   11fa0:	andeq	lr, r2, r4, ror #2
   11fa4:	andeq	r0, r0, r0
   11fa8:	push	{r4, lr}
   11fac:	ldr	r4, [pc, #24]	; 11fcc <__assert_fail@plt+0xe20>
   11fb0:	ldrb	r3, [r4]
   11fb4:	cmp	r3, #0
   11fb8:	popne	{r4, pc}
   11fbc:	bl	11f44 <__assert_fail@plt+0xd98>
   11fc0:	mov	r3, #1
   11fc4:	strb	r3, [r4]
   11fc8:	pop	{r4, pc}
   11fcc:	andeq	lr, r2, r4, lsl #3
   11fd0:	b	11f70 <__assert_fail@plt+0xdc4>
   11fd4:	subs	r6, r0, #0
   11fd8:	str	r7, [sp, #-8]!
   11fdc:	str	lr, [sp, #4]
   11fe0:	sub	sp, sp, #64	; 0x40
   11fe4:	beq	1202c <__assert_fail@plt+0xe80>
   11fe8:	movw	r3, #57720	; 0xe178
   11fec:	movt	r3, #2
   11ff0:	ldr	r4, [r3]
   11ff4:	mov	r2, #5
   11ff8:	movw	r1, #49888	; 0xc2e0
   11ffc:	movt	r1, #1
   12000:	mov	r0, #0
   12004:	bl	10f54 <dcgettext@plt>
   12008:	movw	r3, #57780	; 0xe1b4
   1200c:	movt	r3, #2
   12010:	mov	r2, r0
   12014:	mov	r1, #1
   12018:	ldr	r3, [r3]
   1201c:	mov	r0, r4
   12020:	bl	110b0 <__fprintf_chk@plt>
   12024:	mov	r0, r6
   12028:	bl	11038 <exit@plt>
   1202c:	mov	r2, #5
   12030:	movw	r1, #49928	; 0xc308
   12034:	movt	r1, #1
   12038:	movw	r7, #57724	; 0xe17c
   1203c:	movt	r7, #2
   12040:	bl	10f54 <dcgettext@plt>
   12044:	movw	r3, #57780	; 0xe1b4
   12048:	movt	r3, #2
   1204c:	ldr	ip, [r3]
   12050:	mov	r1, r0
   12054:	mov	r0, #1
   12058:	mov	r3, ip
   1205c:	mov	r2, ip
   12060:	str	ip, [sp]
   12064:	bl	11098 <__printf_chk@plt>
   12068:	mov	r2, #5
   1206c:	movw	r1, #50064	; 0xc390
   12070:	movt	r1, #1
   12074:	mov	r0, r6
   12078:	bl	10f54 <dcgettext@plt>
   1207c:	ldr	r1, [r7]
   12080:	bl	10ed0 <fputs_unlocked@plt>
   12084:	mov	r2, #5
   12088:	movw	r1, #50172	; 0xc3fc
   1208c:	movt	r1, #1
   12090:	mov	r0, r6
   12094:	bl	10f54 <dcgettext@plt>
   12098:	ldr	r1, [r7]
   1209c:	bl	10ed0 <fputs_unlocked@plt>
   120a0:	mov	r2, #5
   120a4:	movw	r1, #50376	; 0xc4c8
   120a8:	movt	r1, #1
   120ac:	mov	r0, r6
   120b0:	bl	10f54 <dcgettext@plt>
   120b4:	ldr	r1, [r7]
   120b8:	bl	10ed0 <fputs_unlocked@plt>
   120bc:	mov	r2, #5
   120c0:	movw	r1, #50504	; 0xc548
   120c4:	movt	r1, #1
   120c8:	mov	r0, r6
   120cc:	bl	10f54 <dcgettext@plt>
   120d0:	ldr	r1, [r7]
   120d4:	bl	10ed0 <fputs_unlocked@plt>
   120d8:	mov	r2, #5
   120dc:	movw	r1, #50572	; 0xc58c
   120e0:	movt	r1, #1
   120e4:	mov	r0, r6
   120e8:	bl	10f54 <dcgettext@plt>
   120ec:	ldr	r1, [r7]
   120f0:	bl	10ed0 <fputs_unlocked@plt>
   120f4:	mov	r2, #5
   120f8:	movw	r1, #50640	; 0xc5d0
   120fc:	movt	r1, #1
   12100:	mov	r0, r6
   12104:	bl	10f54 <dcgettext@plt>
   12108:	ldr	r1, [r7]
   1210c:	bl	10ed0 <fputs_unlocked@plt>
   12110:	mov	r2, #5
   12114:	movw	r1, #50688	; 0xc600
   12118:	movt	r1, #1
   1211c:	mov	r0, r6
   12120:	bl	10f54 <dcgettext@plt>
   12124:	ldr	r1, [r7]
   12128:	bl	10ed0 <fputs_unlocked@plt>
   1212c:	mov	r2, #5
   12130:	movw	r1, #50744	; 0xc638
   12134:	movt	r1, #1
   12138:	mov	r0, r6
   1213c:	bl	10f54 <dcgettext@plt>
   12140:	ldr	r1, [r7]
   12144:	bl	10ed0 <fputs_unlocked@plt>
   12148:	movw	lr, #49648	; 0xc1f0
   1214c:	movt	lr, #1
   12150:	ldr	ip, [lr]
   12154:	ldr	r4, [lr, #4]
   12158:	ldrd	r8, [lr, #8]
   1215c:	subs	r1, ip, #0
   12160:	str	ip, [sp, #8]
   12164:	ldrd	r2, [lr, #16]
   12168:	str	r4, [sp, #12]
   1216c:	ldrd	r4, [lr, #24]
   12170:	strd	r8, [sp, #16]
   12174:	ldrd	r8, [lr, #32]
   12178:	strd	r2, [sp, #24]
   1217c:	ldrd	r2, [lr, #40]	; 0x28
   12180:	strd	r4, [sp, #32]
   12184:	ldrd	r4, [lr, #48]	; 0x30
   12188:	strd	r8, [sp, #40]	; 0x28
   1218c:	strd	r2, [sp, #48]	; 0x30
   12190:	strd	r4, [sp, #56]	; 0x38
   12194:	movwne	r5, #49880	; 0xc2d8
   12198:	add	r4, sp, #8
   1219c:	movtne	r5, #1
   121a0:	bne	12298 <__assert_fail@plt+0x10ec>
   121a4:	ldr	r4, [r4, #4]
   121a8:	movw	r1, #50820	; 0xc684
   121ac:	movt	r1, #1
   121b0:	mov	r2, #5
   121b4:	cmp	r4, #0
   121b8:	beq	122ac <__assert_fail@plt+0x1100>
   121bc:	mov	r0, #0
   121c0:	bl	10f54 <dcgettext@plt>
   121c4:	mov	r1, r0
   121c8:	movw	r3, #50844	; 0xc69c
   121cc:	movt	r3, #1
   121d0:	movw	r2, #50884	; 0xc6c4
   121d4:	movt	r2, #1
   121d8:	mov	r0, #1
   121dc:	bl	11098 <__printf_chk@plt>
   121e0:	mov	r1, #0
   121e4:	mov	r0, #5
   121e8:	bl	110e0 <setlocale@plt>
   121ec:	cmp	r0, #0
   121f0:	movweq	r5, #49880	; 0xc2d8
   121f4:	movteq	r5, #1
   121f8:	beq	1221c <__assert_fail@plt+0x1070>
   121fc:	movw	r1, #50900	; 0xc6d4
   12200:	movt	r1, #1
   12204:	mov	r2, #3
   12208:	movw	r5, #49880	; 0xc2d8
   1220c:	movt	r5, #1
   12210:	bl	11170 <strncmp@plt>
   12214:	cmp	r0, #0
   12218:	bne	12364 <__assert_fail@plt+0x11b8>
   1221c:	mov	r2, #5
   12220:	movw	r1, #50976	; 0xc720
   12224:	movt	r1, #1
   12228:	mov	r0, #0
   1222c:	bl	10f54 <dcgettext@plt>
   12230:	mov	r1, r0
   12234:	movw	r3, #49880	; 0xc2d8
   12238:	movt	r3, #1
   1223c:	movw	r2, #50844	; 0xc69c
   12240:	movt	r2, #1
   12244:	mov	r0, #1
   12248:	bl	11098 <__printf_chk@plt>
   1224c:	mov	r2, #5
   12250:	movw	r1, #51004	; 0xc73c
   12254:	movt	r1, #1
   12258:	mov	r0, #0
   1225c:	bl	10f54 <dcgettext@plt>
   12260:	movw	r2, #52132	; 0xcba4
   12264:	movt	r2, #1
   12268:	cmp	r4, r5
   1226c:	movw	r3, #50168	; 0xc3f8
   12270:	movt	r3, #1
   12274:	mov	r1, r0
   12278:	moveq	r3, r2
   1227c:	mov	r2, r4
   12280:	mov	r0, #1
   12284:	bl	11098 <__printf_chk@plt>
   12288:	b	12024 <__assert_fail@plt+0xe78>
   1228c:	ldr	r1, [r4, #8]!
   12290:	cmp	r1, #0
   12294:	beq	121a4 <__assert_fail@plt+0xff8>
   12298:	mov	r0, r5
   1229c:	bl	10ee8 <strcmp@plt>
   122a0:	cmp	r0, #0
   122a4:	bne	1228c <__assert_fail@plt+0x10e0>
   122a8:	b	121a4 <__assert_fail@plt+0xff8>
   122ac:	mov	r0, r4
   122b0:	bl	10f54 <dcgettext@plt>
   122b4:	mov	r1, r0
   122b8:	movw	r3, #50844	; 0xc69c
   122bc:	movt	r3, #1
   122c0:	movw	r2, #50884	; 0xc6c4
   122c4:	movt	r2, #1
   122c8:	mov	r0, #1
   122cc:	bl	11098 <__printf_chk@plt>
   122d0:	mov	r1, r4
   122d4:	mov	r0, #5
   122d8:	bl	110e0 <setlocale@plt>
   122dc:	cmp	r0, #0
   122e0:	beq	122fc <__assert_fail@plt+0x1150>
   122e4:	movw	r1, #50900	; 0xc6d4
   122e8:	movt	r1, #1
   122ec:	mov	r2, #3
   122f0:	bl	11170 <strncmp@plt>
   122f4:	cmp	r0, #0
   122f8:	bne	12358 <__assert_fail@plt+0x11ac>
   122fc:	mov	r2, #5
   12300:	movw	r1, #50976	; 0xc720
   12304:	movt	r1, #1
   12308:	mov	r0, #0
   1230c:	bl	10f54 <dcgettext@plt>
   12310:	mov	r1, r0
   12314:	movw	r3, #49880	; 0xc2d8
   12318:	movt	r3, #1
   1231c:	movw	r2, #50844	; 0xc69c
   12320:	movt	r2, #1
   12324:	mov	r0, #1
   12328:	bl	11098 <__printf_chk@plt>
   1232c:	movw	r1, #51004	; 0xc73c
   12330:	movt	r1, #1
   12334:	mov	r2, #5
   12338:	mov	r0, #0
   1233c:	bl	10f54 <dcgettext@plt>
   12340:	movw	r4, #49880	; 0xc2d8
   12344:	movt	r4, #1
   12348:	movw	r3, #52132	; 0xcba4
   1234c:	movt	r3, #1
   12350:	mov	r1, r0
   12354:	b	1227c <__assert_fail@plt+0x10d0>
   12358:	movw	r5, #49880	; 0xc2d8
   1235c:	movt	r5, #1
   12360:	mov	r4, r5
   12364:	mov	r2, #5
   12368:	movw	r1, #50904	; 0xc6d8
   1236c:	movt	r1, #1
   12370:	mov	r0, #0
   12374:	bl	10f54 <dcgettext@plt>
   12378:	ldr	r1, [r7]
   1237c:	bl	10ed0 <fputs_unlocked@plt>
   12380:	b	1221c <__assert_fail@plt+0x1070>
   12384:	movw	r3, #57772	; 0xe1ac
   12388:	movt	r3, #2
   1238c:	str	r0, [r3]
   12390:	bx	lr
   12394:	movw	r3, #57772	; 0xe1ac
   12398:	movt	r3, #2
   1239c:	strb	r0, [r3, #4]
   123a0:	bx	lr
   123a4:	movw	r3, #57724	; 0xe17c
   123a8:	movt	r3, #2
   123ac:	strd	r4, [sp, #-16]!
   123b0:	ldr	r0, [r3]
   123b4:	str	r6, [sp, #8]
   123b8:	str	lr, [sp, #12]
   123bc:	sub	sp, sp, #8
   123c0:	bl	1b7c4 <__assert_fail@plt+0xa618>
   123c4:	cmp	r0, #0
   123c8:	beq	123f4 <__assert_fail@plt+0x1248>
   123cc:	movw	r4, #57772	; 0xe1ac
   123d0:	movt	r4, #2
   123d4:	ldrb	r6, [r4, #4]
   123d8:	bl	11068 <__errno_location@plt>
   123dc:	mov	r5, r0
   123e0:	cmp	r6, #0
   123e4:	beq	12420 <__assert_fail@plt+0x1274>
   123e8:	ldr	r3, [r0]
   123ec:	cmp	r3, #32
   123f0:	bne	12420 <__assert_fail@plt+0x1274>
   123f4:	movw	r3, #57720	; 0xe178
   123f8:	movt	r3, #2
   123fc:	ldr	r0, [r3]
   12400:	bl	1b7c4 <__assert_fail@plt+0xa618>
   12404:	cmp	r0, #0
   12408:	bne	12468 <__assert_fail@plt+0x12bc>
   1240c:	add	sp, sp, #8
   12410:	ldrd	r4, [sp]
   12414:	ldr	r6, [sp, #8]
   12418:	add	sp, sp, #12
   1241c:	pop	{pc}		; (ldr pc, [sp], #4)
   12420:	movw	r1, #52356	; 0xcc84
   12424:	movt	r1, #1
   12428:	mov	r2, #5
   1242c:	mov	r0, #0
   12430:	bl	10f54 <dcgettext@plt>
   12434:	mov	r6, r0
   12438:	ldr	r0, [r4]
   1243c:	cmp	r0, #0
   12440:	beq	12478 <__assert_fail@plt+0x12cc>
   12444:	ldr	r4, [r5]
   12448:	bl	19b28 <__assert_fail@plt+0x897c>
   1244c:	mov	r3, r0
   12450:	movw	r2, #52368	; 0xcc90
   12454:	movt	r2, #1
   12458:	mov	r0, #0
   1245c:	str	r6, [sp]
   12460:	mov	r1, r4
   12464:	bl	10fd8 <error@plt>
   12468:	movw	r3, #57632	; 0xe120
   1246c:	movt	r3, #2
   12470:	ldr	r0, [r3]
   12474:	bl	10f18 <_exit@plt>
   12478:	mov	r3, r6
   1247c:	movw	r2, #52372	; 0xcc94
   12480:	movt	r2, #1
   12484:	ldr	r1, [r5]
   12488:	bl	10fd8 <error@plt>
   1248c:	b	12468 <__assert_fail@plt+0x12bc>
   12490:	cmp	r3, #256	; 0x100
   12494:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12498:	movne	r4, r3
   1249c:	strd	r6, [sp, #8]
   124a0:	mov	r6, r2
   124a4:	mov	r7, r0
   124a8:	strd	r8, [sp, #16]
   124ac:	mov	r8, r1
   124b0:	strd	sl, [sp, #24]
   124b4:	str	lr, [sp, #32]
   124b8:	sub	sp, sp, #148	; 0x94
   124bc:	beq	124f8 <__assert_fail@plt+0x134c>
   124c0:	mov	r3, r4
   124c4:	mov	r2, r6
   124c8:	mov	r1, r8
   124cc:	mov	r0, r7
   124d0:	bl	1105c <fchmodat@plt>
   124d4:	mov	r5, r0
   124d8:	mov	r0, r5
   124dc:	add	sp, sp, #148	; 0x94
   124e0:	ldrd	r4, [sp]
   124e4:	ldrd	r6, [sp, #8]
   124e8:	ldrd	r8, [sp, #16]
   124ec:	ldrd	sl, [sp, #24]
   124f0:	add	sp, sp, #32
   124f4:	pop	{pc}		; (ldr pc, [sp], #4)
   124f8:	mov	r2, #2654208	; 0x288000
   124fc:	bl	11050 <openat64@plt>
   12500:	subs	r5, r0, #0
   12504:	blt	124d8 <__assert_fail@plt+0x132c>
   12508:	mov	r0, #4096	; 0x1000
   1250c:	add	r3, sp, #40	; 0x28
   12510:	mov	r1, r5
   12514:	movw	r2, #50168	; 0xc3f8
   12518:	movt	r2, #1
   1251c:	str	r0, [sp]
   12520:	mov	r0, #3
   12524:	bl	10f78 <__fxstatat64@plt>
   12528:	mov	r4, r0
   1252c:	bl	11068 <__errno_location@plt>
   12530:	cmp	r4, #0
   12534:	mov	r9, r0
   12538:	bne	125a4 <__assert_fail@plt+0x13f8>
   1253c:	ldr	r3, [sp, #56]	; 0x38
   12540:	and	r3, r3, #61440	; 0xf000
   12544:	cmp	r3, #40960	; 0xa000
   12548:	beq	125bc <__assert_fail@plt+0x1410>
   1254c:	mov	r2, #26
   12550:	mov	r1, #1
   12554:	str	r5, [sp]
   12558:	movw	r3, #52376	; 0xcc98
   1255c:	movt	r3, #1
   12560:	add	r0, sp, #12
   12564:	bl	11074 <__sprintf_chk@plt>
   12568:	mov	r1, r6
   1256c:	add	r0, sp, #12
   12570:	bl	11158 <chmod@plt>
   12574:	mov	sl, r0
   12578:	mov	r0, r5
   1257c:	ldr	fp, [r9]
   12580:	bl	11188 <close@plt>
   12584:	cmp	sl, #0
   12588:	moveq	r5, sl
   1258c:	beq	124d8 <__assert_fail@plt+0x132c>
   12590:	cmp	fp, #2
   12594:	movne	r5, sl
   12598:	strne	fp, [r9]
   1259c:	bne	124d8 <__assert_fail@plt+0x132c>
   125a0:	b	124c0 <__assert_fail@plt+0x1314>
   125a4:	ldr	r4, [r9]
   125a8:	mov	r0, r5
   125ac:	mvn	r5, #0
   125b0:	bl	11188 <close@plt>
   125b4:	str	r4, [r9]
   125b8:	b	124d8 <__assert_fail@plt+0x132c>
   125bc:	mov	r0, r5
   125c0:	mvn	r5, #0
   125c4:	bl	11188 <close@plt>
   125c8:	mov	r3, #95	; 0x5f
   125cc:	str	r3, [r9]
   125d0:	b	124d8 <__assert_fail@plt+0x132c>
   125d4:	and	r3, r0, #61440	; 0xf000
   125d8:	cmp	r3, #32768	; 0x8000
   125dc:	moveq	r2, #45	; 0x2d
   125e0:	beq	1262c <__assert_fail@plt+0x1480>
   125e4:	cmp	r3, #16384	; 0x4000
   125e8:	moveq	r2, #100	; 0x64
   125ec:	beq	1262c <__assert_fail@plt+0x1480>
   125f0:	cmp	r3, #24576	; 0x6000
   125f4:	moveq	r2, #98	; 0x62
   125f8:	beq	1262c <__assert_fail@plt+0x1480>
   125fc:	cmp	r3, #8192	; 0x2000
   12600:	moveq	r2, #99	; 0x63
   12604:	beq	1262c <__assert_fail@plt+0x1480>
   12608:	cmp	r3, #40960	; 0xa000
   1260c:	moveq	r2, #108	; 0x6c
   12610:	beq	1262c <__assert_fail@plt+0x1480>
   12614:	cmp	r3, #4096	; 0x1000
   12618:	moveq	r2, #112	; 0x70
   1261c:	beq	1262c <__assert_fail@plt+0x1480>
   12620:	cmp	r3, #49152	; 0xc000
   12624:	moveq	r2, #115	; 0x73
   12628:	movne	r2, #63	; 0x3f
   1262c:	tst	r0, #256	; 0x100
   12630:	strb	r2, [r1]
   12634:	and	r3, r0, #64	; 0x40
   12638:	movne	ip, #114	; 0x72
   1263c:	moveq	ip, #45	; 0x2d
   12640:	tst	r0, #128	; 0x80
   12644:	movne	r2, #119	; 0x77
   12648:	moveq	r2, #45	; 0x2d
   1264c:	strb	ip, [r1, #1]
   12650:	tst	r0, #2048	; 0x800
   12654:	strb	r2, [r1, #2]
   12658:	beq	126f8 <__assert_fail@plt+0x154c>
   1265c:	cmp	r3, #0
   12660:	movne	r2, #115	; 0x73
   12664:	moveq	r2, #83	; 0x53
   12668:	tst	r0, #32
   1266c:	strb	r2, [r1, #3]
   12670:	and	r3, r0, #8
   12674:	movne	ip, #114	; 0x72
   12678:	moveq	ip, #45	; 0x2d
   1267c:	tst	r0, #16
   12680:	movne	r2, #119	; 0x77
   12684:	moveq	r2, #45	; 0x2d
   12688:	strb	ip, [r1, #4]
   1268c:	tst	r0, #1024	; 0x400
   12690:	strb	r2, [r1, #5]
   12694:	beq	12708 <__assert_fail@plt+0x155c>
   12698:	cmp	r3, #0
   1269c:	movne	r2, #115	; 0x73
   126a0:	moveq	r2, #83	; 0x53
   126a4:	tst	r0, #4
   126a8:	strb	r2, [r1, #6]
   126ac:	and	r3, r0, #1
   126b0:	movne	ip, #114	; 0x72
   126b4:	moveq	ip, #45	; 0x2d
   126b8:	tst	r0, #2
   126bc:	movne	r2, #119	; 0x77
   126c0:	moveq	r2, #45	; 0x2d
   126c4:	strb	ip, [r1, #7]
   126c8:	tst	r0, #512	; 0x200
   126cc:	strb	r2, [r1, #8]
   126d0:	beq	12718 <__assert_fail@plt+0x156c>
   126d4:	cmp	r3, #0
   126d8:	movne	r0, #116	; 0x74
   126dc:	moveq	r0, #84	; 0x54
   126e0:	mov	r2, #32
   126e4:	mov	r3, #0
   126e8:	strb	r0, [r1, #9]
   126ec:	strb	r2, [r1, #10]
   126f0:	strb	r3, [r1, #11]
   126f4:	bx	lr
   126f8:	cmp	r3, #0
   126fc:	movne	r2, #120	; 0x78
   12700:	moveq	r2, #45	; 0x2d
   12704:	b	12668 <__assert_fail@plt+0x14bc>
   12708:	cmp	r3, #0
   1270c:	movne	r2, #120	; 0x78
   12710:	moveq	r2, #45	; 0x2d
   12714:	b	126a4 <__assert_fail@plt+0x14f8>
   12718:	cmp	r3, #0
   1271c:	movne	r0, #120	; 0x78
   12720:	moveq	r0, #45	; 0x2d
   12724:	b	126e0 <__assert_fail@plt+0x1534>
   12728:	ldr	r3, [r0, #16]
   1272c:	and	r2, r3, #61440	; 0xf000
   12730:	cmp	r2, #32768	; 0x8000
   12734:	moveq	r0, #45	; 0x2d
   12738:	beq	12784 <__assert_fail@plt+0x15d8>
   1273c:	cmp	r2, #16384	; 0x4000
   12740:	moveq	r0, #100	; 0x64
   12744:	beq	12784 <__assert_fail@plt+0x15d8>
   12748:	cmp	r2, #24576	; 0x6000
   1274c:	moveq	r0, #98	; 0x62
   12750:	beq	12784 <__assert_fail@plt+0x15d8>
   12754:	cmp	r2, #8192	; 0x2000
   12758:	moveq	r0, #99	; 0x63
   1275c:	beq	12784 <__assert_fail@plt+0x15d8>
   12760:	cmp	r2, #40960	; 0xa000
   12764:	moveq	r0, #108	; 0x6c
   12768:	beq	12784 <__assert_fail@plt+0x15d8>
   1276c:	cmp	r2, #4096	; 0x1000
   12770:	moveq	r0, #112	; 0x70
   12774:	beq	12784 <__assert_fail@plt+0x15d8>
   12778:	cmp	r2, #49152	; 0xc000
   1277c:	moveq	r0, #115	; 0x73
   12780:	movne	r0, #63	; 0x3f
   12784:	tst	r3, #256	; 0x100
   12788:	strb	r0, [r1]
   1278c:	and	r2, r3, #64	; 0x40
   12790:	movne	ip, #114	; 0x72
   12794:	moveq	ip, #45	; 0x2d
   12798:	tst	r3, #128	; 0x80
   1279c:	movne	r0, #119	; 0x77
   127a0:	moveq	r0, #45	; 0x2d
   127a4:	strb	ip, [r1, #1]
   127a8:	tst	r3, #2048	; 0x800
   127ac:	strb	r0, [r1, #2]
   127b0:	beq	12850 <__assert_fail@plt+0x16a4>
   127b4:	cmp	r2, #0
   127b8:	movne	r0, #115	; 0x73
   127bc:	moveq	r0, #83	; 0x53
   127c0:	tst	r3, #32
   127c4:	strb	r0, [r1, #3]
   127c8:	and	r2, r3, #8
   127cc:	movne	ip, #114	; 0x72
   127d0:	moveq	ip, #45	; 0x2d
   127d4:	tst	r3, #16
   127d8:	movne	r0, #119	; 0x77
   127dc:	moveq	r0, #45	; 0x2d
   127e0:	strb	ip, [r1, #4]
   127e4:	tst	r3, #1024	; 0x400
   127e8:	strb	r0, [r1, #5]
   127ec:	beq	12860 <__assert_fail@plt+0x16b4>
   127f0:	cmp	r2, #0
   127f4:	movne	r0, #115	; 0x73
   127f8:	moveq	r0, #83	; 0x53
   127fc:	tst	r3, #4
   12800:	strb	r0, [r1, #6]
   12804:	and	r2, r3, #1
   12808:	movne	ip, #114	; 0x72
   1280c:	moveq	ip, #45	; 0x2d
   12810:	tst	r3, #2
   12814:	movne	r0, #119	; 0x77
   12818:	moveq	r0, #45	; 0x2d
   1281c:	strb	ip, [r1, #7]
   12820:	tst	r3, #512	; 0x200
   12824:	strb	r0, [r1, #8]
   12828:	beq	12870 <__assert_fail@plt+0x16c4>
   1282c:	cmp	r2, #0
   12830:	movne	r0, #116	; 0x74
   12834:	moveq	r0, #84	; 0x54
   12838:	mov	r2, #32
   1283c:	mov	r3, #0
   12840:	strb	r0, [r1, #9]
   12844:	strb	r2, [r1, #10]
   12848:	strb	r3, [r1, #11]
   1284c:	bx	lr
   12850:	cmp	r2, #0
   12854:	movne	r0, #120	; 0x78
   12858:	moveq	r0, #45	; 0x2d
   1285c:	b	127c0 <__assert_fail@plt+0x1614>
   12860:	cmp	r2, #0
   12864:	movne	r0, #120	; 0x78
   12868:	moveq	r0, #45	; 0x2d
   1286c:	b	127fc <__assert_fail@plt+0x1650>
   12870:	cmp	r2, #0
   12874:	movne	r0, #120	; 0x78
   12878:	moveq	r0, #45	; 0x2d
   1287c:	b	12838 <__assert_fail@plt+0x168c>
   12880:	strd	r4, [sp, #-8]!
   12884:	ldrd	r2, [r1, #8]
   12888:	ldrd	r4, [r0, #8]
   1288c:	cmp	r5, r3
   12890:	cmpeq	r4, r2
   12894:	movne	r0, #0
   12898:	bne	128b4 <__assert_fail@plt+0x1708>
   1289c:	ldrd	r4, [r0]
   128a0:	ldrd	r2, [r1]
   128a4:	cmp	r5, r3
   128a8:	cmpeq	r4, r2
   128ac:	moveq	r0, #1
   128b0:	movne	r0, #0
   128b4:	ldrd	r4, [sp]
   128b8:	add	sp, sp, #8
   128bc:	bx	lr
   128c0:	mov	r2, r1
   128c4:	mov	r3, #0
   128c8:	str	r4, [sp, #-8]!
   128cc:	ldrd	r0, [r0, #8]
   128d0:	str	lr, [sp, #4]
   128d4:	bl	1bff4 <__assert_fail@plt+0xae48>
   128d8:	ldr	r4, [sp]
   128dc:	add	sp, sp, #4
   128e0:	mov	r0, r2
   128e4:	pop	{pc}		; (ldr pc, [sp], #4)
   128e8:	mov	r2, r1
   128ec:	mov	r3, #0
   128f0:	str	r4, [sp, #-8]!
   128f4:	ldrd	r0, [r0]
   128f8:	str	lr, [sp, #4]
   128fc:	bl	1bff4 <__assert_fail@plt+0xae48>
   12900:	ldr	r4, [sp]
   12904:	add	sp, sp, #4
   12908:	mov	r0, r2
   1290c:	pop	{pc}		; (ldr pc, [sp], #4)
   12910:	strd	r4, [sp, #-8]!
   12914:	ldrd	r2, [r1]
   12918:	ldrd	r4, [r0]
   1291c:	cmp	r5, r3
   12920:	cmpeq	r4, r2
   12924:	ldrd	r4, [sp]
   12928:	add	sp, sp, #8
   1292c:	moveq	r0, #1
   12930:	movne	r0, #0
   12934:	bx	lr
   12938:	ldr	r2, [r0]
   1293c:	ldr	r3, [r1]
   12940:	ldrd	r0, [r2, #160]	; 0xa0
   12944:	ldrd	r2, [r3, #160]	; 0xa0
   12948:	cmp	r1, r3
   1294c:	cmpeq	r0, r2
   12950:	movhi	r0, #1
   12954:	movls	r0, #0
   12958:	movcc	r3, #1
   1295c:	movcs	r3, #0
   12960:	sub	r0, r0, r3
   12964:	bx	lr
   12968:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1296c:	mov	r5, r2
   12970:	mov	r4, r1
   12974:	ldr	r2, [r0, #40]	; 0x28
   12978:	strd	r6, [sp, #8]
   1297c:	mov	r6, r0
   12980:	str	r8, [sp, #16]
   12984:	str	lr, [sp, #20]
   12988:	ldr	r0, [r0, #8]
   1298c:	cmp	r2, r5
   12990:	ldr	r7, [r6, #44]	; 0x2c
   12994:	bcs	129bc <__assert_fail@plt+0x1810>
   12998:	add	r1, r5, #40	; 0x28
   1299c:	cmn	r1, #-1073741823	; 0xc0000001
   129a0:	str	r1, [r6, #40]	; 0x28
   129a4:	bhi	12a3c <__assert_fail@plt+0x1890>
   129a8:	lsl	r1, r1, #2
   129ac:	bl	1b76c <__assert_fail@plt+0xa5c0>
   129b0:	cmp	r0, #0
   129b4:	strne	r0, [r6, #8]
   129b8:	beq	12a38 <__assert_fail@plt+0x188c>
   129bc:	cmp	r4, #0
   129c0:	movne	r2, r0
   129c4:	beq	129d8 <__assert_fail@plt+0x182c>
   129c8:	str	r4, [r2], #4
   129cc:	ldr	r4, [r4, #8]
   129d0:	cmp	r4, #0
   129d4:	bne	129c8 <__assert_fail@plt+0x181c>
   129d8:	mov	r3, r7
   129dc:	mov	r2, #4
   129e0:	mov	r1, r5
   129e4:	bl	11134 <qsort@plt>
   129e8:	ldr	lr, [r6, #8]
   129ec:	subs	r3, r5, #1
   129f0:	ldr	r0, [lr]
   129f4:	moveq	r2, r0
   129f8:	beq	12a1c <__assert_fail@plt+0x1870>
   129fc:	mov	r2, lr
   12a00:	ldr	r1, [r2]
   12a04:	subs	r3, r3, #1
   12a08:	ldr	ip, [r2, #4]!
   12a0c:	str	ip, [r1, #8]
   12a10:	bne	12a00 <__assert_fail@plt+0x1854>
   12a14:	add	r5, lr, r5, lsl #2
   12a18:	ldr	r2, [r5, #-4]
   12a1c:	mov	r3, #0
   12a20:	str	r3, [r2, #8]
   12a24:	ldrd	r4, [sp]
   12a28:	ldrd	r6, [sp, #8]
   12a2c:	ldr	r8, [sp, #16]
   12a30:	add	sp, sp, #20
   12a34:	pop	{pc}		; (ldr pc, [sp], #4)
   12a38:	ldr	r0, [r6, #8]
   12a3c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   12a40:	mov	r3, #0
   12a44:	mov	r0, r4
   12a48:	str	r3, [r6, #8]
   12a4c:	str	r3, [r6, #40]	; 0x28
   12a50:	b	12a24 <__assert_fail@plt+0x1878>
   12a54:	strd	r4, [sp, #-20]!	; 0xffffffec
   12a58:	ldr	r5, [r0, #44]	; 0x2c
   12a5c:	ldr	r3, [r5, #48]	; 0x30
   12a60:	strd	r6, [sp, #8]
   12a64:	str	lr, [sp, #16]
   12a68:	sub	sp, sp, #100	; 0x64
   12a6c:	tst	r3, #512	; 0x200
   12a70:	beq	12b00 <__assert_fail@plt+0x1954>
   12a74:	ldr	r4, [r5, #52]	; 0x34
   12a78:	mov	r7, r1
   12a7c:	mov	r6, r0
   12a80:	cmp	r4, #0
   12a84:	beq	12aac <__assert_fail@plt+0x1900>
   12a88:	ldrd	r2, [r6, #64]	; 0x40
   12a8c:	add	r1, sp, #8
   12a90:	mov	r0, r4
   12a94:	strd	r2, [sp, #8]
   12a98:	bl	154e8 <__assert_fail@plt+0x433c>
   12a9c:	cmp	r0, #0
   12aa0:	beq	12ae4 <__assert_fail@plt+0x1938>
   12aa4:	ldr	r0, [r0, #8]
   12aa8:	b	12b04 <__assert_fail@plt+0x1958>
   12aac:	movw	r0, #48296	; 0xbca8
   12ab0:	movt	r0, #1
   12ab4:	mov	r1, r4
   12ab8:	movw	r3, #10512	; 0x2910
   12abc:	movt	r3, #1
   12ac0:	movw	r2, #10472	; 0x28e8
   12ac4:	movt	r2, #1
   12ac8:	str	r0, [sp]
   12acc:	mov	r0, #13
   12ad0:	bl	1586c <__assert_fail@plt+0x46c0>
   12ad4:	cmp	r0, #0
   12ad8:	mov	r4, r0
   12adc:	str	r0, [r5, #52]	; 0x34
   12ae0:	bne	12a88 <__assert_fail@plt+0x18dc>
   12ae4:	cmp	r7, #0
   12ae8:	blt	12b00 <__assert_fail@plt+0x1954>
   12aec:	mov	r0, r7
   12af0:	add	r1, sp, #8
   12af4:	bl	10eb8 <fstatfs64@plt>
   12af8:	cmp	r0, #0
   12afc:	beq	12b18 <__assert_fail@plt+0x196c>
   12b00:	mov	r0, #0
   12b04:	add	sp, sp, #100	; 0x64
   12b08:	ldrd	r4, [sp]
   12b0c:	ldrd	r6, [sp, #8]
   12b10:	add	sp, sp, #16
   12b14:	pop	{pc}		; (ldr pc, [sp], #4)
   12b18:	cmp	r4, #0
   12b1c:	beq	12b5c <__assert_fail@plt+0x19b0>
   12b20:	mov	r0, #16
   12b24:	bl	1b730 <__assert_fail@plt+0xa584>
   12b28:	subs	r5, r0, #0
   12b2c:	beq	12b5c <__assert_fail@plt+0x19b0>
   12b30:	ldr	ip, [sp, #8]
   12b34:	mov	r0, r4
   12b38:	mov	r1, r5
   12b3c:	ldrd	r2, [r6, #64]	; 0x40
   12b40:	strd	r2, [r5]
   12b44:	str	ip, [r5, #8]
   12b48:	bl	160d4 <__assert_fail@plt+0x4f28>
   12b4c:	cmp	r0, #0
   12b50:	beq	12b64 <__assert_fail@plt+0x19b8>
   12b54:	cmp	r5, r0
   12b58:	bne	12b70 <__assert_fail@plt+0x19c4>
   12b5c:	ldr	r0, [sp, #8]
   12b60:	b	12b04 <__assert_fail@plt+0x1958>
   12b64:	mov	r0, r5
   12b68:	bl	1bca8 <__assert_fail@plt+0xaafc>
   12b6c:	b	12b5c <__assert_fail@plt+0x19b0>
   12b70:	bl	1117c <abort@plt>
   12b74:	ldr	ip, [r2, #48]	; 0x30
   12b78:	strd	r4, [sp, #-16]!
   12b7c:	mov	r4, r2
   12b80:	add	r5, r2, #64	; 0x40
   12b84:	ldr	r2, [r2, #24]
   12b88:	str	r6, [sp, #8]
   12b8c:	str	lr, [sp, #12]
   12b90:	sub	sp, sp, #8
   12b94:	cmp	ip, #0
   12b98:	bne	12c10 <__assert_fail@plt+0x1a64>
   12b9c:	tst	r1, #1
   12ba0:	beq	12c10 <__assert_fail@plt+0x1a64>
   12ba4:	mov	r1, r2
   12ba8:	mov	r0, #3
   12bac:	mov	r2, r5
   12bb0:	bl	11164 <__xstat64@plt>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12c3c <__assert_fail@plt+0x1a90>
   12bbc:	bl	11068 <__errno_location@plt>
   12bc0:	ldr	r3, [r0]
   12bc4:	mov	r6, r0
   12bc8:	cmp	r3, #2
   12bcc:	bne	12bf4 <__assert_fail@plt+0x1a48>
   12bd0:	mov	r2, r5
   12bd4:	mov	r0, #3
   12bd8:	ldr	r1, [r4, #24]
   12bdc:	bl	11194 <__lxstat64@plt>
   12be0:	subs	r3, r0, #0
   12be4:	moveq	r0, #13
   12be8:	streq	r3, [r6]
   12bec:	beq	12c60 <__assert_fail@plt+0x1ab4>
   12bf0:	ldr	r3, [r6]
   12bf4:	mov	r0, r5
   12bf8:	mov	r2, #104	; 0x68
   12bfc:	str	r3, [r4, #32]
   12c00:	mov	r1, #0
   12c04:	bl	1108c <memset@plt>
   12c08:	mov	r0, #10
   12c0c:	b	12c60 <__assert_fail@plt+0x1ab4>
   12c10:	ubfx	ip, r1, #1, #1
   12c14:	orrs	r3, r3, ip
   12c18:	bne	12ba4 <__assert_fail@plt+0x19f8>
   12c1c:	mov	ip, #256	; 0x100
   12c20:	mov	r1, r0
   12c24:	mov	r3, r5
   12c28:	mov	r0, #3
   12c2c:	str	ip, [sp]
   12c30:	bl	10f78 <__fxstatat64@plt>
   12c34:	cmp	r0, #0
   12c38:	bne	12cbc <__assert_fail@plt+0x1b10>
   12c3c:	ldr	r3, [r4, #80]	; 0x50
   12c40:	and	r3, r3, #61440	; 0xf000
   12c44:	cmp	r3, #16384	; 0x4000
   12c48:	beq	12c74 <__assert_fail@plt+0x1ac8>
   12c4c:	cmp	r3, #40960	; 0xa000
   12c50:	beq	12cc8 <__assert_fail@plt+0x1b1c>
   12c54:	cmp	r3, #32768	; 0x8000
   12c58:	movne	r0, #3
   12c5c:	moveq	r0, #8
   12c60:	add	sp, sp, #8
   12c64:	ldrd	r4, [sp]
   12c68:	ldr	r6, [sp, #8]
   12c6c:	add	sp, sp, #12
   12c70:	pop	{pc}		; (ldr pc, [sp], #4)
   12c74:	ldrb	r3, [r4, #168]	; 0xa8
   12c78:	cmp	r3, #46	; 0x2e
   12c7c:	bne	12ca0 <__assert_fail@plt+0x1af4>
   12c80:	ldrb	r3, [r4, #169]	; 0xa9
   12c84:	cmp	r3, #0
   12c88:	beq	12ca8 <__assert_fail@plt+0x1afc>
   12c8c:	ldr	r3, [r4, #168]	; 0xa8
   12c90:	bic	r3, r3, #-16777216	; 0xff000000
   12c94:	bic	r3, r3, #255	; 0xff
   12c98:	cmp	r3, #11776	; 0x2e00
   12c9c:	beq	12ca8 <__assert_fail@plt+0x1afc>
   12ca0:	mov	r0, #1
   12ca4:	b	12c60 <__assert_fail@plt+0x1ab4>
   12ca8:	ldr	r3, [r4, #48]	; 0x30
   12cac:	cmp	r3, #0
   12cb0:	moveq	r0, #1
   12cb4:	movne	r0, #5
   12cb8:	b	12c60 <__assert_fail@plt+0x1ab4>
   12cbc:	bl	11068 <__errno_location@plt>
   12cc0:	ldr	r3, [r0]
   12cc4:	b	12bf4 <__assert_fail@plt+0x1a48>
   12cc8:	mov	r0, #12
   12ccc:	b	12c60 <__assert_fail@plt+0x1ab4>
   12cd0:	movw	r3, #258	; 0x102
   12cd4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12cd8:	tst	r0, r3
   12cdc:	strd	r6, [sp, #8]
   12ce0:	strd	r8, [sp, #16]
   12ce4:	mov	r8, r2
   12ce8:	str	sl, [sp, #24]
   12cec:	mov	sl, r1
   12cf0:	str	lr, [sp, #28]
   12cf4:	beq	12d78 <__assert_fail@plt+0x1bcc>
   12cf8:	mov	r0, #24
   12cfc:	bl	1b730 <__assert_fail@plt+0xa584>
   12d00:	subs	r9, r0, #0
   12d04:	beq	12d9c <__assert_fail@plt+0x1bf0>
   12d08:	ldrd	r6, [r8, #64]	; 0x40
   12d0c:	mov	r1, r9
   12d10:	ldrd	r4, [r8, #160]	; 0xa0
   12d14:	ldr	r0, [sl]
   12d18:	strd	r6, [r9]
   12d1c:	str	r8, [r9, #16]
   12d20:	strd	r4, [r9, #8]
   12d24:	bl	160d4 <__assert_fail@plt+0x4f28>
   12d28:	cmp	r9, r0
   12d2c:	mov	r4, r0
   12d30:	beq	12d5c <__assert_fail@plt+0x1bb0>
   12d34:	mov	r0, r9
   12d38:	bl	1bca8 <__assert_fail@plt+0xaafc>
   12d3c:	cmp	r4, #0
   12d40:	beq	12d9c <__assert_fail@plt+0x1bf0>
   12d44:	ldr	r3, [r4, #16]
   12d48:	mov	r2, #2
   12d4c:	mov	r0, #1
   12d50:	str	r3, [r8]
   12d54:	strh	r2, [r8, #56]	; 0x38
   12d58:	b	12d60 <__assert_fail@plt+0x1bb4>
   12d5c:	mov	r0, #1
   12d60:	ldrd	r4, [sp]
   12d64:	ldrd	r6, [sp, #8]
   12d68:	ldrd	r8, [sp, #16]
   12d6c:	ldr	sl, [sp, #24]
   12d70:	add	sp, sp, #28
   12d74:	pop	{pc}		; (ldr pc, [sp], #4)
   12d78:	add	r1, r2, #64	; 0x40
   12d7c:	ldr	r0, [sl]
   12d80:	bl	1b874 <__assert_fail@plt+0xa6c8>
   12d84:	cmp	r0, #0
   12d88:	beq	12d5c <__assert_fail@plt+0x1bb0>
   12d8c:	mov	r3, #2
   12d90:	str	r8, [r8]
   12d94:	strh	r3, [r8, #56]	; 0x38
   12d98:	b	12d60 <__assert_fail@plt+0x1bb4>
   12d9c:	mov	r0, #0
   12da0:	b	12d60 <__assert_fail@plt+0x1bb4>
   12da4:	movw	r3, #258	; 0x102
   12da8:	mov	ip, r1
   12dac:	strd	r4, [sp, #-12]!
   12db0:	tst	r0, r3
   12db4:	str	lr, [sp, #8]
   12db8:	sub	sp, sp, #28
   12dbc:	bne	12e0c <__assert_fail@plt+0x1c60>
   12dc0:	ldr	r3, [r2, #4]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12dfc <__assert_fail@plt+0x1c50>
   12dcc:	ldr	r1, [r3, #48]	; 0x30
   12dd0:	cmp	r1, #0
   12dd4:	blt	12dfc <__assert_fail@plt+0x1c50>
   12dd8:	ldr	ip, [ip]
   12ddc:	ldrd	r0, [ip, #16]
   12de0:	orrs	r1, r0, r1
   12de4:	beq	12e6c <__assert_fail@plt+0x1cc0>
   12de8:	ldrd	r4, [ip]
   12dec:	ldrd	r0, [r2, #160]	; 0xa0
   12df0:	cmp	r5, r1
   12df4:	cmpeq	r4, r0
   12df8:	beq	12e44 <__assert_fail@plt+0x1c98>
   12dfc:	add	sp, sp, #28
   12e00:	ldrd	r4, [sp]
   12e04:	add	sp, sp, #8
   12e08:	pop	{pc}		; (ldr pc, [sp], #4)
   12e0c:	ldrd	r4, [r2, #64]	; 0x40
   12e10:	mov	r1, sp
   12e14:	ldrd	r2, [r2, #160]	; 0xa0
   12e18:	ldr	r0, [ip]
   12e1c:	strd	r4, [sp]
   12e20:	strd	r2, [sp, #8]
   12e24:	bl	162f8 <__assert_fail@plt+0x514c>
   12e28:	cmp	r0, #0
   12e2c:	beq	12e6c <__assert_fail@plt+0x1cc0>
   12e30:	bl	1bca8 <__assert_fail@plt+0xaafc>
   12e34:	add	sp, sp, #28
   12e38:	ldrd	r4, [sp]
   12e3c:	add	sp, sp, #8
   12e40:	pop	{pc}		; (ldr pc, [sp], #4)
   12e44:	ldrd	r0, [ip, #8]
   12e48:	ldrd	r4, [r2, #64]	; 0x40
   12e4c:	cmp	r1, r5
   12e50:	cmpeq	r0, r4
   12e54:	bne	12dfc <__assert_fail@plt+0x1c50>
   12e58:	ldrd	r0, [r3, #64]	; 0x40
   12e5c:	ldrd	r2, [r3, #160]	; 0xa0
   12e60:	strd	r2, [ip]
   12e64:	strd	r0, [ip, #8]
   12e68:	b	12dfc <__assert_fail@plt+0x1c50>
   12e6c:	bl	1117c <abort@plt>
   12e70:	ldr	r3, [r0, #48]	; 0x30
   12e74:	strd	r4, [sp, #-16]!
   12e78:	add	r5, r0, #60	; 0x3c
   12e7c:	str	r6, [sp, #8]
   12e80:	str	lr, [sp, #12]
   12e84:	ands	r6, r3, #4
   12e88:	movne	r6, #0
   12e8c:	bne	12ec8 <__assert_fail@plt+0x1d1c>
   12e90:	tst	r3, #512	; 0x200
   12e94:	mov	r4, r0
   12e98:	beq	12ef8 <__assert_fail@plt+0x1d4c>
   12e9c:	mov	r0, r5
   12ea0:	ldr	r1, [r4, #32]
   12ea4:	bl	1666c <__assert_fail@plt+0x54c0>
   12ea8:	cmp	r0, #0
   12eac:	bge	12f0c <__assert_fail@plt+0x1d60>
   12eb0:	mvn	r3, #99	; 0x63
   12eb4:	str	r3, [r4, #32]
   12eb8:	b	12ec8 <__assert_fail@plt+0x1d1c>
   12ebc:	bl	166b4 <__assert_fail@plt+0x5508>
   12ec0:	cmp	r0, #0
   12ec4:	bge	12ef0 <__assert_fail@plt+0x1d44>
   12ec8:	mov	r0, r5
   12ecc:	bl	16664 <__assert_fail@plt+0x54b8>
   12ed0:	cmp	r0, #0
   12ed4:	mov	r0, r5
   12ed8:	beq	12ebc <__assert_fail@plt+0x1d10>
   12edc:	mov	r0, r6
   12ee0:	ldrd	r4, [sp]
   12ee4:	ldr	r6, [sp, #8]
   12ee8:	add	sp, sp, #12
   12eec:	pop	{pc}		; (ldr pc, [sp], #4)
   12ef0:	bl	11188 <close@plt>
   12ef4:	b	12ec8 <__assert_fail@plt+0x1d1c>
   12ef8:	ldr	r0, [r0, #28]
   12efc:	bl	11128 <fchdir@plt>
   12f00:	adds	r6, r0, #0
   12f04:	movne	r6, #1
   12f08:	b	12ec8 <__assert_fail@plt+0x1d1c>
   12f0c:	bl	11188 <close@plt>
   12f10:	mvn	r3, #99	; 0x63
   12f14:	str	r3, [r4, #32]
   12f18:	b	12ec8 <__assert_fail@plt+0x1d1c>
   12f1c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12f20:	mov	r5, r0
   12f24:	mov	r4, r2
   12f28:	strd	r6, [sp, #8]
   12f2c:	strd	r8, [sp, #16]
   12f30:	mov	r8, r1
   12f34:	ldr	r9, [r0, #48]	; 0x30
   12f38:	str	sl, [sp, #24]
   12f3c:	subs	sl, r3, #0
   12f40:	str	lr, [sp, #28]
   12f44:	sub	sp, sp, #104	; 0x68
   12f48:	and	r6, r9, #4
   12f4c:	beq	13048 <__assert_fail@plt+0x1e9c>
   12f50:	movw	r1, #52444	; 0xccdc
   12f54:	movt	r1, #1
   12f58:	mov	r0, sl
   12f5c:	bl	10ee8 <strcmp@plt>
   12f60:	cmp	r0, #0
   12f64:	bne	13048 <__assert_fail@plt+0x1e9c>
   12f68:	cmp	r6, #0
   12f6c:	bne	13088 <__assert_fail@plt+0x1edc>
   12f70:	cmp	r4, #0
   12f74:	bge	131c4 <__assert_fail@plt+0x2018>
   12f78:	tst	r9, #512	; 0x200
   12f7c:	beq	130cc <__assert_fail@plt+0x1f20>
   12f80:	add	r6, r5, #60	; 0x3c
   12f84:	mov	r0, r6
   12f88:	bl	16664 <__assert_fail@plt+0x54b8>
   12f8c:	cmp	r0, #0
   12f90:	beq	1314c <__assert_fail@plt+0x1fa0>
   12f94:	lsl	r2, r9, #11
   12f98:	mov	r6, #1
   12f9c:	and	r2, r2, #32768	; 0x8000
   12fa0:	orr	r2, r2, #540672	; 0x84000
   12fa4:	orr	r2, r2, #2304	; 0x900
   12fa8:	mov	r1, sl
   12fac:	ldr	r0, [r5, #32]
   12fb0:	bl	16c90 <__assert_fail@plt+0x5ae4>
   12fb4:	mov	r7, r0
   12fb8:	cmp	r7, #0
   12fbc:	blt	131bc <__assert_fail@plt+0x2010>
   12fc0:	ldr	r9, [r5, #48]	; 0x30
   12fc4:	tst	r9, #2
   12fc8:	beq	13064 <__assert_fail@plt+0x1eb8>
   12fcc:	mov	r2, sp
   12fd0:	mov	r1, r7
   12fd4:	mov	r0, #3
   12fd8:	bl	10f90 <__fxstat64@plt>
   12fdc:	cmp	r0, #0
   12fe0:	bne	130c4 <__assert_fail@plt+0x1f18>
   12fe4:	ldrd	r2, [sp]
   12fe8:	ldrd	r0, [r8, #64]	; 0x40
   12fec:	cmp	r1, r3
   12ff0:	cmpeq	r0, r2
   12ff4:	bne	130b8 <__assert_fail@plt+0x1f0c>
   12ff8:	ldrd	r2, [sp, #96]	; 0x60
   12ffc:	ldrd	r0, [r8, #160]	; 0xa0
   13000:	cmp	r1, r3
   13004:	cmpeq	r0, r2
   13008:	bne	130b8 <__assert_fail@plt+0x1f0c>
   1300c:	ldr	r9, [r5, #48]	; 0x30
   13010:	tst	r9, #512	; 0x200
   13014:	bne	130f4 <__assert_fail@plt+0x1f48>
   13018:	mov	r0, r7
   1301c:	bl	11128 <fchdir@plt>
   13020:	mov	r9, r0
   13024:	cmp	r4, #0
   13028:	bge	13098 <__assert_fail@plt+0x1eec>
   1302c:	bl	11068 <__errno_location@plt>
   13030:	mov	r4, r0
   13034:	mov	r0, r7
   13038:	ldr	r5, [r4]
   1303c:	bl	11188 <close@plt>
   13040:	str	r5, [r4]
   13044:	b	13098 <__assert_fail@plt+0x1eec>
   13048:	cmp	r6, #0
   1304c:	bne	13088 <__assert_fail@plt+0x1edc>
   13050:	cmp	r4, #0
   13054:	movge	r7, r4
   13058:	blt	1317c <__assert_fail@plt+0x1fd0>
   1305c:	tst	r9, #2
   13060:	bne	12fcc <__assert_fail@plt+0x1e20>
   13064:	cmp	sl, #0
   13068:	beq	13010 <__assert_fail@plt+0x1e64>
   1306c:	mov	r0, sl
   13070:	movw	r1, #52444	; 0xccdc
   13074:	movt	r1, #1
   13078:	bl	10ee8 <strcmp@plt>
   1307c:	cmp	r0, #0
   13080:	bne	13010 <__assert_fail@plt+0x1e64>
   13084:	b	12fcc <__assert_fail@plt+0x1e20>
   13088:	mvn	r3, r4
   1308c:	lsr	r3, r3, #31
   13090:	ands	r9, r3, r9, lsr #9
   13094:	bne	1313c <__assert_fail@plt+0x1f90>
   13098:	mov	r0, r9
   1309c:	add	sp, sp, #104	; 0x68
   130a0:	ldrd	r4, [sp]
   130a4:	ldrd	r6, [sp, #8]
   130a8:	ldrd	r8, [sp, #16]
   130ac:	ldr	sl, [sp, #24]
   130b0:	add	sp, sp, #28
   130b4:	pop	{pc}		; (ldr pc, [sp], #4)
   130b8:	bl	11068 <__errno_location@plt>
   130bc:	mov	r3, #2
   130c0:	str	r3, [r0]
   130c4:	mvn	r9, #0
   130c8:	b	13024 <__assert_fail@plt+0x1e78>
   130cc:	lsl	r2, r9, #11
   130d0:	mov	r6, #1
   130d4:	and	r2, r2, #32768	; 0x8000
   130d8:	orr	r2, r2, #540672	; 0x84000
   130dc:	orr	r2, r2, #2304	; 0x900
   130e0:	mov	r1, r2
   130e4:	mov	r0, sl
   130e8:	bl	1bc08 <__assert_fail@plt+0xaa5c>
   130ec:	mov	r7, r0
   130f0:	b	12fb8 <__assert_fail@plt+0x1e0c>
   130f4:	ldr	r1, [r5, #32]
   130f8:	sub	r3, r1, r7
   130fc:	cmn	r1, #100	; 0x64
   13100:	clz	r3, r3
   13104:	lsr	r3, r3, #5
   13108:	moveq	r3, #0
   1310c:	cmp	r3, #0
   13110:	bne	131d8 <__assert_fail@plt+0x202c>
   13114:	cmp	r6, #0
   13118:	beq	1319c <__assert_fail@plt+0x1ff0>
   1311c:	mvn	r3, r1
   13120:	eor	r9, r9, #4
   13124:	lsr	r3, r3, #31
   13128:	ands	r3, r3, r9, lsr #2
   1312c:	bne	131b4 <__assert_fail@plt+0x2008>
   13130:	mov	r9, #0
   13134:	str	r7, [r5, #32]
   13138:	b	13098 <__assert_fail@plt+0x1eec>
   1313c:	mov	r0, r4
   13140:	mov	r9, #0
   13144:	bl	11188 <close@plt>
   13148:	b	13098 <__assert_fail@plt+0x1eec>
   1314c:	mov	r0, r6
   13150:	bl	166b4 <__assert_fail@plt+0x5508>
   13154:	ldr	r9, [r5, #48]	; 0x30
   13158:	subs	r7, r0, #0
   1315c:	movlt	r6, #1
   13160:	andlt	r3, r9, #512	; 0x200
   13164:	blt	13180 <__assert_fail@plt+0x1fd4>
   13168:	tst	r9, #2
   1316c:	mov	r4, r7
   13170:	mov	r6, #1
   13174:	beq	13010 <__assert_fail@plt+0x1e64>
   13178:	b	12fcc <__assert_fail@plt+0x1e20>
   1317c:	and	r3, r9, #512	; 0x200
   13180:	lsl	r2, r9, #11
   13184:	cmp	r3, #0
   13188:	and	r2, r2, #32768	; 0x8000
   1318c:	orr	r2, r2, #540672	; 0x84000
   13190:	orr	r2, r2, #2304	; 0x900
   13194:	bne	12fa8 <__assert_fail@plt+0x1dfc>
   13198:	b	130e0 <__assert_fail@plt+0x1f34>
   1319c:	add	r0, r5, #60	; 0x3c
   131a0:	bl	1666c <__assert_fail@plt+0x54c0>
   131a4:	cmp	r0, #0
   131a8:	blt	13130 <__assert_fail@plt+0x1f84>
   131ac:	bl	11188 <close@plt>
   131b0:	b	13130 <__assert_fail@plt+0x1f84>
   131b4:	mov	r0, r1
   131b8:	b	131ac <__assert_fail@plt+0x2000>
   131bc:	mvn	r9, #0
   131c0:	b	13098 <__assert_fail@plt+0x1eec>
   131c4:	tst	r9, #2
   131c8:	mov	r7, r4
   131cc:	mov	r6, #1
   131d0:	beq	1306c <__assert_fail@plt+0x1ec0>
   131d4:	b	12fcc <__assert_fail@plt+0x1e20>
   131d8:	bl	1117c <abort@plt>
   131dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   131e0:	strd	r6, [sp, #8]
   131e4:	mov	r6, r0
   131e8:	strd	sl, [sp, #24]
   131ec:	ldr	fp, [r0]
   131f0:	strd	r8, [sp, #16]
   131f4:	str	lr, [sp, #32]
   131f8:	sub	sp, sp, #76	; 0x4c
   131fc:	str	r1, [sp, #40]	; 0x28
   13200:	ldr	r0, [fp, #12]
   13204:	cmp	r0, #0
   13208:	str	r0, [sp, #48]	; 0x30
   1320c:	beq	1367c <__assert_fail@plt+0x24d0>
   13210:	bl	1111c <dirfd@plt>
   13214:	cmp	r0, #0
   13218:	str	r0, [sp, #68]	; 0x44
   1321c:	blt	13bf0 <__assert_fail@plt+0x2a44>
   13220:	ldr	r3, [r6, #44]	; 0x2c
   13224:	cmp	r3, #0
   13228:	beq	13a9c <__assert_fail@plt+0x28f0>
   1322c:	ldr	r3, [r6, #48]	; 0x30
   13230:	mvn	r2, #0
   13234:	str	r2, [sp, #28]
   13238:	mov	r2, #1
   1323c:	str	r2, [sp, #60]	; 0x3c
   13240:	ldr	r1, [fp, #28]
   13244:	ldr	r0, [fp, #40]	; 0x28
   13248:	sub	r2, r0, #1
   1324c:	str	r0, [sp, #4]
   13250:	ldrb	r1, [r1, r2]
   13254:	cmp	r1, #47	; 0x2f
   13258:	beq	13268 <__assert_fail@plt+0x20bc>
   1325c:	add	r1, r0, #1
   13260:	mov	r2, r0
   13264:	str	r1, [sp, #4]
   13268:	ands	r3, r3, #4
   1326c:	streq	r3, [sp, #32]
   13270:	beq	1328c <__assert_fail@plt+0x20e0>
   13274:	ldr	r3, [r6, #24]
   13278:	mov	r0, #47	; 0x2f
   1327c:	add	r1, r3, r2
   13280:	strb	r0, [r3, r2]
   13284:	add	r3, r1, #1
   13288:	str	r3, [sp, #32]
   1328c:	movw	r3, #6548	; 0x1994
   13290:	movt	r3, #258	; 0x102
   13294:	ldr	r2, [r6, #36]	; 0x24
   13298:	movw	r0, #19778	; 0x4d42
   1329c:	movt	r0, #65363	; 0xff53
   132a0:	str	fp, [sp, #16]
   132a4:	str	r3, [sp, #52]	; 0x34
   132a8:	mov	r1, #0
   132ac:	ldr	r3, [fp, #48]	; 0x30
   132b0:	mov	r9, r1
   132b4:	mov	fp, r1
   132b8:	str	r0, [sp, #56]	; 0x38
   132bc:	ldr	r0, [sp, #4]
   132c0:	str	r1, [sp, #12]
   132c4:	str	r1, [sp, #36]	; 0x24
   132c8:	add	r3, r3, #1
   132cc:	sub	r2, r2, r0
   132d0:	str	r1, [sp, #44]	; 0x2c
   132d4:	str	r2, [sp, #20]
   132d8:	str	r3, [sp, #24]
   132dc:	b	132f4 <__assert_fail@plt+0x2148>
   132e0:	ldr	r3, [sp, #28]
   132e4:	add	r9, r9, #1
   132e8:	cmp	r9, r3
   132ec:	bcs	137d8 <__assert_fail@plt+0x262c>
   132f0:	mov	fp, r4
   132f4:	ldr	r3, [sp, #16]
   132f8:	ldr	r4, [r3, #12]
   132fc:	cmp	r4, #0
   13300:	beq	13918 <__assert_fail@plt+0x276c>
   13304:	bl	11068 <__errno_location@plt>
   13308:	mov	sl, r0
   1330c:	mov	r3, #0
   13310:	mov	r0, r4
   13314:	str	r3, [sl]
   13318:	bl	11104 <readdir64@plt>
   1331c:	subs	r7, r0, #0
   13320:	beq	139ec <__assert_fail@plt+0x2840>
   13324:	ldr	r3, [r6, #48]	; 0x30
   13328:	tst	r3, #32
   1332c:	bne	1333c <__assert_fail@plt+0x2190>
   13330:	ldrb	r3, [r7, #19]
   13334:	cmp	r3, #46	; 0x2e
   13338:	beq	1353c <__assert_fail@plt+0x2390>
   1333c:	add	r1, r7, #19
   13340:	mov	r0, r1
   13344:	str	r1, [sp, #8]
   13348:	bl	11044 <strlen@plt>
   1334c:	mov	r5, r0
   13350:	add	r0, r0, #176	; 0xb0
   13354:	bic	r0, r0, #7
   13358:	bl	1b730 <__assert_fail@plt+0xa584>
   1335c:	subs	r4, r0, #0
   13360:	beq	13570 <__assert_fail@plt+0x23c4>
   13364:	add	r8, r4, #168	; 0xa8
   13368:	mov	r2, r5
   1336c:	ldr	r1, [sp, #8]
   13370:	mov	r0, r8
   13374:	bl	10f24 <memcpy@plt>
   13378:	ldr	r3, [sp, #20]
   1337c:	mov	r1, #0
   13380:	add	r0, r4, r5
   13384:	mov	ip, #196608	; 0x30000
   13388:	ldr	r2, [r6, #24]
   1338c:	strb	r1, [r0, #168]	; 0xa8
   13390:	str	r1, [r4, #12]
   13394:	cmp	r3, r5
   13398:	str	r1, [r4, #16]
   1339c:	str	r1, [r4, #20]
   133a0:	str	r2, [r4, #28]
   133a4:	str	r1, [r4, #32]
   133a8:	str	r6, [r4, #44]	; 0x2c
   133ac:	str	r5, [r4, #52]	; 0x34
   133b0:	str	ip, [r4, #58]	; 0x3a
   133b4:	bls	13478 <__assert_fail@plt+0x22cc>
   133b8:	ldr	r3, [sp, #4]
   133bc:	adds	r5, r5, r3
   133c0:	bcs	13cd8 <__assert_fail@plt+0x2b2c>
   133c4:	ldr	r3, [sp, #24]
   133c8:	str	r5, [r4, #40]	; 0x28
   133cc:	ldr	ip, [r6]
   133d0:	ldr	r1, [r6, #48]	; 0x30
   133d4:	str	r3, [r4, #48]	; 0x30
   133d8:	ldrd	r2, [r7]
   133dc:	str	ip, [r4, #4]
   133e0:	tst	r1, #4
   133e4:	streq	r8, [r4, #24]
   133e8:	strd	r2, [r4, #160]	; 0xa0
   133ec:	bne	13518 <__assert_fail@plt+0x236c>
   133f0:	ldr	r3, [r6, #44]	; 0x2c
   133f4:	cmp	r3, #0
   133f8:	beq	13404 <__assert_fail@plt+0x2258>
   133fc:	ands	r3, r1, #1024	; 0x400
   13400:	beq	1355c <__assert_fail@plt+0x23b0>
   13404:	ldrb	r3, [r7, #18]
   13408:	tst	r1, #8
   1340c:	sub	r0, r3, #1
   13410:	beq	1341c <__assert_fail@plt+0x2270>
   13414:	tst	r3, #251	; 0xfb
   13418:	bne	13618 <__assert_fail@plt+0x246c>
   1341c:	mov	r3, #11
   13420:	cmp	r0, r3
   13424:	strh	r3, [r4, #56]	; 0x38
   13428:	bls	134fc <__assert_fail@plt+0x2350>
   1342c:	mov	r1, #0
   13430:	mov	r2, #2
   13434:	mov	r3, #0
   13438:	str	r1, [r4, #80]	; 0x50
   1343c:	strd	r2, [r4, #112]	; 0x70
   13440:	ldr	r2, [sp, #12]
   13444:	mov	r3, #0
   13448:	str	r3, [r4, #8]
   1344c:	cmp	r2, r3
   13450:	movw	r3, #10000	; 0x2710
   13454:	strne	r4, [fp, #8]
   13458:	streq	r4, [sp, #12]
   1345c:	cmp	r9, r3
   13460:	bne	132e0 <__assert_fail@plt+0x2134>
   13464:	ldr	r5, [r6, #44]	; 0x2c
   13468:	cmp	r5, #0
   1346c:	beq	1378c <__assert_fail@plt+0x25e0>
   13470:	movw	r9, #10001	; 0x2711
   13474:	b	132f0 <__assert_fail@plt+0x2144>
   13478:	ldr	ip, [r6, #36]	; 0x24
   1347c:	ldr	r3, [sp, #4]
   13480:	add	r0, ip, #256	; 0x100
   13484:	add	r0, r0, #1
   13488:	add	r0, r0, r3
   1348c:	add	r0, r0, r5
   13490:	cmp	ip, r0
   13494:	bhi	13654 <__assert_fail@plt+0x24a8>
   13498:	mov	r1, r0
   1349c:	str	r0, [r6, #36]	; 0x24
   134a0:	mov	r0, r2
   134a4:	str	r2, [sp, #8]
   134a8:	bl	1b76c <__assert_fail@plt+0xa5c0>
   134ac:	cmp	r0, #0
   134b0:	ldr	r2, [sp, #8]
   134b4:	beq	13a48 <__assert_fail@plt+0x289c>
   134b8:	cmp	r2, r0
   134bc:	str	r0, [r6, #24]
   134c0:	beq	134e0 <__assert_fail@plt+0x2334>
   134c4:	ldr	r2, [r6, #48]	; 0x30
   134c8:	tst	r2, #4
   134cc:	ldrne	r3, [sp, #4]
   134d0:	addne	r3, r0, r3
   134d4:	strne	r3, [sp, #32]
   134d8:	mov	r3, #1
   134dc:	str	r3, [sp, #36]	; 0x24
   134e0:	ldr	r3, [sp, #4]
   134e4:	ldr	r2, [r6, #36]	; 0x24
   134e8:	sub	r3, r2, r3
   134ec:	str	r3, [sp, #20]
   134f0:	b	133b8 <__assert_fail@plt+0x220c>
   134f4:	mov	r3, #11
   134f8:	strh	r3, [r4, #56]	; 0x38
   134fc:	movw	r3, #52396	; 0xccac
   13500:	movt	r3, #1
   13504:	ldr	r1, [r3, r0, lsl #2]
   13508:	mov	r2, #2
   1350c:	mov	r3, #0
   13510:	str	r1, [r4, #80]	; 0x50
   13514:	b	1343c <__assert_fail@plt+0x2290>
   13518:	ldr	ip, [r4, #28]
   1351c:	mov	r1, r8
   13520:	ldr	r2, [r4, #52]	; 0x34
   13524:	ldr	r0, [sp, #32]
   13528:	str	ip, [r4, #24]
   1352c:	add	r2, r2, #1
   13530:	bl	10f00 <memmove@plt>
   13534:	ldr	r1, [r6, #48]	; 0x30
   13538:	b	133f0 <__assert_fail@plt+0x2244>
   1353c:	ldrb	r3, [r7, #20]
   13540:	cmp	r3, #0
   13544:	beq	13554 <__assert_fail@plt+0x23a8>
   13548:	ldrh	r3, [r7, #20]
   1354c:	cmp	r3, #46	; 0x2e
   13550:	bne	1333c <__assert_fail@plt+0x2190>
   13554:	mov	r4, fp
   13558:	b	132f0 <__assert_fail@plt+0x2144>
   1355c:	mov	r2, r4
   13560:	ldr	r0, [r6, #32]
   13564:	bl	12b74 <__assert_fail@plt+0x19c8>
   13568:	strh	r0, [r4, #56]	; 0x38
   1356c:	b	13440 <__assert_fail@plt+0x2294>
   13570:	ldr	r5, [sl]
   13574:	ldr	r8, [sp, #12]
   13578:	ldr	fp, [sp, #16]
   1357c:	mov	r0, r4
   13580:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13584:	cmp	r8, #0
   13588:	bne	135f4 <__assert_fail@plt+0x2448>
   1358c:	ldr	r0, [fp, #12]
   13590:	bl	111a0 <closedir@plt>
   13594:	ldr	r3, [r6, #48]	; 0x30
   13598:	mov	r2, #0
   1359c:	mov	r1, #7
   135a0:	mov	r8, r2
   135a4:	str	r2, [fp, #12]
   135a8:	strh	r1, [fp, #56]	; 0x38
   135ac:	orr	r3, r3, #8192	; 0x2000
   135b0:	str	r3, [r6, #48]	; 0x30
   135b4:	str	r5, [sl]
   135b8:	mov	r0, r8
   135bc:	add	sp, sp, #76	; 0x4c
   135c0:	ldrd	r4, [sp]
   135c4:	ldrd	r6, [sp, #8]
   135c8:	ldrd	r8, [sp, #16]
   135cc:	ldrd	sl, [sp, #24]
   135d0:	add	sp, sp, #32
   135d4:	pop	{pc}		; (ldr pc, [sp], #4)
   135d8:	mov	r0, r3
   135dc:	bl	111a0 <closedir@plt>
   135e0:	mov	r0, r8
   135e4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   135e8:	cmp	r4, #0
   135ec:	beq	1358c <__assert_fail@plt+0x23e0>
   135f0:	mov	r8, r4
   135f4:	mov	r0, r8
   135f8:	ldr	r4, [r8, #8]
   135fc:	ldr	r3, [r8, #12]
   13600:	cmp	r3, #0
   13604:	bne	135d8 <__assert_fail@plt+0x242c>
   13608:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1360c:	cmp	r4, #0
   13610:	bne	135f0 <__assert_fail@plt+0x2444>
   13614:	b	1358c <__assert_fail@plt+0x23e0>
   13618:	ubfx	r2, r1, #4, #1
   1361c:	cmp	r3, #10
   13620:	moveq	r3, r2
   13624:	orrne	r3, r2, #1
   13628:	cmp	r3, #0
   1362c:	beq	134f4 <__assert_fail@plt+0x2348>
   13630:	mov	r3, #11
   13634:	cmp	r0, r3
   13638:	strh	r3, [r4, #56]	; 0x38
   1363c:	bls	13894 <__assert_fail@plt+0x26e8>
   13640:	mov	r1, #0
   13644:	mov	r2, #1
   13648:	mov	r3, #0
   1364c:	str	r1, [r4, #80]	; 0x50
   13650:	b	1343c <__assert_fail@plt+0x2290>
   13654:	mov	r0, r2
   13658:	ldr	r8, [sp, #12]
   1365c:	ldr	fp, [sp, #16]
   13660:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13664:	mov	r3, #36	; 0x24
   13668:	mov	r1, #0
   1366c:	mov	r5, r3
   13670:	str	r1, [r6, #24]
   13674:	str	r3, [sl]
   13678:	b	1357c <__assert_fail@plt+0x23d0>
   1367c:	ldr	r3, [r6, #48]	; 0x30
   13680:	ldr	r1, [fp, #24]
   13684:	and	r2, r3, #516	; 0x204
   13688:	cmp	r2, #512	; 0x200
   1368c:	ldreq	r0, [r6, #32]
   13690:	mvnne	r0, #99	; 0x63
   13694:	ands	r2, r3, #16
   13698:	beq	136a8 <__assert_fail@plt+0x24fc>
   1369c:	tst	r3, #1
   136a0:	moveq	r2, #32768	; 0x8000
   136a4:	bne	138b0 <__assert_fail@plt+0x2704>
   136a8:	add	r3, sp, #68	; 0x44
   136ac:	bl	16cd0 <__assert_fail@plt+0x5b24>
   136b0:	cmp	r0, #0
   136b4:	mov	r8, r0
   136b8:	str	r0, [fp, #12]
   136bc:	beq	13c44 <__assert_fail@plt+0x2a98>
   136c0:	ldrh	r3, [fp, #56]	; 0x38
   136c4:	ldr	r0, [r6, #48]	; 0x30
   136c8:	cmp	r3, #11
   136cc:	beq	13b84 <__assert_fail@plt+0x29d8>
   136d0:	tst	r0, #256	; 0x100
   136d4:	bne	13ac8 <__assert_fail@plt+0x291c>
   136d8:	ldr	r2, [r6, #44]	; 0x2c
   136dc:	movw	r3, #34464	; 0x86a0
   136e0:	movt	r3, #1
   136e4:	cmp	r2, #0
   136e8:	mvnne	r3, #0
   136ec:	str	r3, [sp, #28]
   136f0:	ldr	r3, [sp, #40]	; 0x28
   136f4:	cmp	r3, #2
   136f8:	beq	13ab8 <__assert_fail@plt+0x290c>
   136fc:	ldr	r3, [r6, #48]	; 0x30
   13700:	ldr	r0, [sp, #68]	; 0x44
   13704:	and	r3, r3, #56	; 0x38
   13708:	cmp	r3, #24
   1370c:	beq	138c0 <__assert_fail@plt+0x2714>
   13710:	ldr	r3, [sp, #40]	; 0x28
   13714:	sub	r4, r3, #3
   13718:	clz	r4, r4
   1371c:	lsr	r4, r4, #5
   13720:	ldr	r3, [r6, #48]	; 0x30
   13724:	tst	r3, #512	; 0x200
   13728:	bne	13c30 <__assert_fail@plt+0x2a84>
   1372c:	cmp	r0, #0
   13730:	bge	13bc4 <__assert_fail@plt+0x2a18>
   13734:	cmp	r4, #0
   13738:	beq	13748 <__assert_fail@plt+0x259c>
   1373c:	bl	11068 <__errno_location@plt>
   13740:	ldr	r3, [r0]
   13744:	str	r3, [fp, #32]
   13748:	ldrh	r3, [fp, #58]	; 0x3a
   1374c:	ldr	r0, [fp, #12]
   13750:	orr	r3, r3, #1
   13754:	strh	r3, [fp, #58]	; 0x3a
   13758:	bl	111a0 <closedir@plt>
   1375c:	ldr	r3, [r6, #48]	; 0x30
   13760:	mov	r2, #0
   13764:	str	r2, [fp, #12]
   13768:	tst	r3, #512	; 0x200
   1376c:	beq	1377c <__assert_fail@plt+0x25d0>
   13770:	ldr	r0, [sp, #68]	; 0x44
   13774:	cmp	r0, r2
   13778:	bge	13c24 <__assert_fail@plt+0x2a78>
   1377c:	mov	r2, #0
   13780:	str	r2, [fp, #12]
   13784:	str	r2, [sp, #60]	; 0x3c
   13788:	b	13240 <__assert_fail@plt+0x2094>
   1378c:	ldr	r0, [sp, #16]
   13790:	ldr	r1, [sp, #68]	; 0x44
   13794:	bl	12a54 <__assert_fail@plt+0x18a8>
   13798:	movw	r3, #26985	; 0x6969
   1379c:	cmp	r0, r3
   137a0:	beq	137c4 <__assert_fail@plt+0x2618>
   137a4:	ldr	r3, [sp, #52]	; 0x34
   137a8:	cmp	r0, r3
   137ac:	beq	137c4 <__assert_fail@plt+0x2618>
   137b0:	ldr	r3, [sp, #56]	; 0x38
   137b4:	cmp	r0, r3
   137b8:	movne	r3, #1
   137bc:	strne	r3, [sp, #44]	; 0x2c
   137c0:	bne	13470 <__assert_fail@plt+0x22c4>
   137c4:	ldr	r3, [sp, #28]
   137c8:	add	r9, r9, #1
   137cc:	str	r5, [sp, #44]	; 0x2c
   137d0:	cmp	r9, r3
   137d4:	bcc	132f0 <__assert_fail@plt+0x2144>
   137d8:	ldr	r8, [sp, #12]
   137dc:	ldr	r3, [sp, #36]	; 0x24
   137e0:	ldr	fp, [sp, #16]
   137e4:	cmp	r3, #0
   137e8:	beq	1392c <__assert_fail@plt+0x2780>
   137ec:	ldr	r3, [r6, #4]
   137f0:	ldr	r1, [r6, #24]
   137f4:	cmp	r3, #0
   137f8:	beq	1382c <__assert_fail@plt+0x2680>
   137fc:	ldr	r2, [r3, #24]
   13800:	add	r0, r3, #168	; 0xa8
   13804:	cmp	r2, r0
   13808:	beq	13a34 <__assert_fail@plt+0x2888>
   1380c:	ldr	r0, [r3, #28]
   13810:	str	r1, [r3, #28]
   13814:	sub	r2, r2, r0
   13818:	add	r2, r1, r2
   1381c:	str	r2, [r3, #24]
   13820:	ldr	r3, [r3, #8]
   13824:	cmp	r3, #0
   13828:	bne	137fc <__assert_fail@plt+0x2650>
   1382c:	ldr	r3, [r8, #48]	; 0x30
   13830:	cmp	r3, #0
   13834:	movge	r3, r8
   13838:	bge	13850 <__assert_fail@plt+0x26a4>
   1383c:	b	1392c <__assert_fail@plt+0x2780>
   13840:	ldr	r3, [r2, #48]	; 0x30
   13844:	cmp	r3, #0
   13848:	blt	1392c <__assert_fail@plt+0x2780>
   1384c:	mov	r3, r2
   13850:	ldr	r2, [r3, #24]
   13854:	add	r0, r3, #168	; 0xa8
   13858:	cmp	r2, r0
   1385c:	beq	13870 <__assert_fail@plt+0x26c4>
   13860:	ldr	r0, [r3, #28]
   13864:	sub	r2, r2, r0
   13868:	add	r2, r1, r2
   1386c:	str	r2, [r3, #24]
   13870:	ldr	r2, [r3, #8]
   13874:	str	r1, [r3, #28]
   13878:	cmp	r2, #0
   1387c:	bne	13840 <__assert_fail@plt+0x2694>
   13880:	ldr	r2, [r3, #4]
   13884:	ldr	r3, [r2, #48]	; 0x30
   13888:	cmp	r3, #0
   1388c:	bge	1384c <__assert_fail@plt+0x26a0>
   13890:	b	1392c <__assert_fail@plt+0x2780>
   13894:	movw	r3, #52396	; 0xccac
   13898:	movt	r3, #1
   1389c:	ldr	r1, [r3, r0, lsl #2]
   138a0:	mov	r2, #1
   138a4:	mov	r3, #0
   138a8:	str	r1, [r4, #80]	; 0x50
   138ac:	b	1343c <__assert_fail@plt+0x2290>
   138b0:	ldr	r2, [fp, #48]	; 0x30
   138b4:	cmp	r2, #0
   138b8:	movne	r2, #32768	; 0x8000
   138bc:	b	136a8 <__assert_fail@plt+0x24fc>
   138c0:	ldr	r3, [fp, #84]	; 0x54
   138c4:	cmp	r3, #2
   138c8:	bne	13710 <__assert_fail@plt+0x2564>
   138cc:	mov	r1, r0
   138d0:	mov	r0, fp
   138d4:	bl	12a54 <__assert_fail@plt+0x18a8>
   138d8:	movw	r3, #26985	; 0x6969
   138dc:	cmp	r0, r3
   138e0:	beq	13cd0 <__assert_fail@plt+0x2b24>
   138e4:	bgt	13cb4 <__assert_fail@plt+0x2b08>
   138e8:	movw	r3, #19778	; 0x4d42
   138ec:	movt	r3, #65363	; 0xff53
   138f0:	cmp	r0, r3
   138f4:	beq	13cd0 <__assert_fail@plt+0x2b24>
   138f8:	cmp	r0, #0
   138fc:	beq	13cd0 <__assert_fail@plt+0x2b24>
   13900:	ldr	r3, [sp, #40]	; 0x28
   13904:	cmp	r3, #3
   13908:	bne	13ab8 <__assert_fail@plt+0x290c>
   1390c:	mov	r4, #0
   13910:	ldr	r0, [sp, #68]	; 0x44
   13914:	b	13720 <__assert_fail@plt+0x2574>
   13918:	ldr	r8, [sp, #12]
   1391c:	mov	fp, r3
   13920:	ldr	r3, [sp, #36]	; 0x24
   13924:	cmp	r3, #0
   13928:	bne	137ec <__assert_fail@plt+0x2640>
   1392c:	ldr	r3, [r6, #48]	; 0x30
   13930:	tst	r3, #4
   13934:	beq	13964 <__assert_fail@plt+0x27b8>
   13938:	ldr	r2, [sp, #4]
   1393c:	ldr	r3, [r6, #36]	; 0x24
   13940:	cmp	r9, #0
   13944:	cmpne	r3, r2
   13948:	bne	13958 <__assert_fail@plt+0x27ac>
   1394c:	ldr	r3, [sp, #32]
   13950:	sub	r3, r3, #1
   13954:	str	r3, [sp, #32]
   13958:	ldr	r2, [sp, #32]
   1395c:	mov	r3, #0
   13960:	strb	r3, [r2]
   13964:	ldr	r2, [sp, #48]	; 0x30
   13968:	ldr	r3, [sp, #60]	; 0x3c
   1396c:	cmp	r2, #0
   13970:	movne	r3, #0
   13974:	cmp	r3, #0
   13978:	beq	139b0 <__assert_fail@plt+0x2804>
   1397c:	ldr	r3, [sp, #40]	; 0x28
   13980:	cmp	r9, #0
   13984:	cmpne	r3, #1
   13988:	bne	139b8 <__assert_fail@plt+0x280c>
   1398c:	ldr	r3, [fp, #48]	; 0x30
   13990:	cmp	r3, #0
   13994:	bne	13ba0 <__assert_fail@plt+0x29f4>
   13998:	mov	r0, r6
   1399c:	bl	12e70 <__assert_fail@plt+0x1cc4>
   139a0:	adds	r0, r0, #0
   139a4:	movne	r0, #1
   139a8:	cmp	r0, #0
   139ac:	bne	13c54 <__assert_fail@plt+0x2aa8>
   139b0:	cmp	r9, #0
   139b4:	beq	13b14 <__assert_fail@plt+0x2968>
   139b8:	ldr	r3, [sp, #44]	; 0x2c
   139bc:	cmp	r3, #0
   139c0:	bne	13a70 <__assert_fail@plt+0x28c4>
   139c4:	ldr	r3, [r6, #44]	; 0x2c
   139c8:	cmp	r3, #0
   139cc:	cmpne	r9, #1
   139d0:	beq	135b8 <__assert_fail@plt+0x240c>
   139d4:	mov	r1, r8
   139d8:	mov	r2, r9
   139dc:	mov	r0, r6
   139e0:	bl	12968 <__assert_fail@plt+0x17bc>
   139e4:	mov	r8, r0
   139e8:	b	135b8 <__assert_fail@plt+0x240c>
   139ec:	ldr	r3, [sl]
   139f0:	ldr	r8, [sp, #12]
   139f4:	ldr	fp, [sp, #16]
   139f8:	cmp	r3, #0
   139fc:	beq	13a18 <__assert_fail@plt+0x286c>
   13a00:	ldr	r2, [sp, #48]	; 0x30
   13a04:	str	r3, [fp, #32]
   13a08:	orrs	r2, r2, r9
   13a0c:	moveq	r3, #4
   13a10:	movne	r3, #7
   13a14:	strh	r3, [fp, #56]	; 0x38
   13a18:	ldr	r0, [fp, #12]
   13a1c:	cmp	r0, #0
   13a20:	beq	13920 <__assert_fail@plt+0x2774>
   13a24:	bl	111a0 <closedir@plt>
   13a28:	mov	r3, #0
   13a2c:	str	r3, [fp, #12]
   13a30:	b	13920 <__assert_fail@plt+0x2774>
   13a34:	str	r1, [r3, #28]
   13a38:	ldr	r3, [r3, #8]
   13a3c:	cmp	r3, #0
   13a40:	bne	137fc <__assert_fail@plt+0x2650>
   13a44:	b	1382c <__assert_fail@plt+0x2680>
   13a48:	mov	r1, r0
   13a4c:	ldr	r0, [r6, #24]
   13a50:	str	r1, [sp, #4]
   13a54:	ldr	r8, [sp, #12]
   13a58:	ldr	fp, [sp, #16]
   13a5c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13a60:	ldr	r1, [sp, #4]
   13a64:	ldr	r5, [sl]
   13a68:	str	r1, [r6, #24]
   13a6c:	b	1357c <__assert_fail@plt+0x23d0>
   13a70:	movw	r3, #10552	; 0x2938
   13a74:	movt	r3, #1
   13a78:	mov	r1, r8
   13a7c:	mov	r2, r9
   13a80:	mov	r0, r6
   13a84:	str	r3, [r6, #44]	; 0x2c
   13a88:	bl	12968 <__assert_fail@plt+0x17bc>
   13a8c:	mov	r3, #0
   13a90:	mov	r8, r0
   13a94:	str	r3, [r6, #44]	; 0x2c
   13a98:	b	135b8 <__assert_fail@plt+0x240c>
   13a9c:	movw	r3, #34464	; 0x86a0
   13aa0:	movt	r3, #1
   13aa4:	mov	r2, #1
   13aa8:	str	r3, [sp, #28]
   13aac:	str	r2, [sp, #60]	; 0x3c
   13ab0:	ldr	r3, [r6, #48]	; 0x30
   13ab4:	b	13240 <__assert_fail@plt+0x2094>
   13ab8:	mov	r3, #0
   13abc:	str	r3, [sp, #60]	; 0x3c
   13ac0:	ldr	r3, [r6, #48]	; 0x30
   13ac4:	b	13240 <__assert_fail@plt+0x2094>
   13ac8:	add	r4, r6, #56	; 0x38
   13acc:	mov	r2, fp
   13ad0:	mov	r1, r4
   13ad4:	bl	12da4 <__assert_fail@plt+0x1bf8>
   13ad8:	mov	r3, #0
   13adc:	mov	r2, fp
   13ae0:	ldr	r0, [r6, #32]
   13ae4:	ldr	r1, [r6, #48]	; 0x30
   13ae8:	bl	12b74 <__assert_fail@plt+0x19c8>
   13aec:	mov	r2, fp
   13af0:	mov	r1, r4
   13af4:	ldr	r0, [r6, #48]	; 0x30
   13af8:	bl	12cd0 <__assert_fail@plt+0x1b24>
   13afc:	subs	r8, r0, #0
   13b00:	bne	136d8 <__assert_fail@plt+0x252c>
   13b04:	bl	11068 <__errno_location@plt>
   13b08:	mov	r3, #12
   13b0c:	str	r3, [r0]
   13b10:	b	135b8 <__assert_fail@plt+0x240c>
   13b14:	ldr	r3, [sp, #40]	; 0x28
   13b18:	cmp	r3, #3
   13b1c:	bne	13b34 <__assert_fail@plt+0x2988>
   13b20:	ldrh	r3, [fp, #56]	; 0x38
   13b24:	cmp	r3, #4
   13b28:	cmpne	r3, #7
   13b2c:	movne	r3, #6
   13b30:	strhne	r3, [fp, #56]	; 0x38
   13b34:	cmp	r8, #0
   13b38:	bne	13b5c <__assert_fail@plt+0x29b0>
   13b3c:	b	13b7c <__assert_fail@plt+0x29d0>
   13b40:	mov	r0, r3
   13b44:	bl	111a0 <closedir@plt>
   13b48:	mov	r0, r8
   13b4c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13b50:	cmp	r4, #0
   13b54:	beq	13b7c <__assert_fail@plt+0x29d0>
   13b58:	mov	r8, r4
   13b5c:	mov	r0, r8
   13b60:	ldr	r4, [r8, #8]
   13b64:	ldr	r3, [r8, #12]
   13b68:	cmp	r3, #0
   13b6c:	bne	13b40 <__assert_fail@plt+0x2994>
   13b70:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13b74:	cmp	r4, #0
   13b78:	bne	13b58 <__assert_fail@plt+0x29ac>
   13b7c:	mov	r8, #0
   13b80:	b	135b8 <__assert_fail@plt+0x240c>
   13b84:	mov	r1, r0
   13b88:	mov	r3, #0
   13b8c:	ldr	r0, [r6, #32]
   13b90:	mov	r2, fp
   13b94:	bl	12b74 <__assert_fail@plt+0x19c8>
   13b98:	strh	r0, [fp, #56]	; 0x38
   13b9c:	b	136d8 <__assert_fail@plt+0x252c>
   13ba0:	movw	r3, #52444	; 0xccdc
   13ba4:	movt	r3, #1
   13ba8:	ldr	r1, [fp, #4]
   13bac:	mvn	r2, #0
   13bb0:	mov	r0, r6
   13bb4:	bl	12f1c <__assert_fail@plt+0x1d70>
   13bb8:	adds	r0, r0, #0
   13bbc:	movne	r0, #1
   13bc0:	b	139a8 <__assert_fail@plt+0x27fc>
   13bc4:	mov	r2, r0
   13bc8:	mov	r3, #0
   13bcc:	mov	r1, fp
   13bd0:	mov	r0, r6
   13bd4:	bl	12f1c <__assert_fail@plt+0x1d70>
   13bd8:	cmp	r0, #0
   13bdc:	bne	13734 <__assert_fail@plt+0x2588>
   13be0:	mov	r3, #1
   13be4:	str	r3, [sp, #60]	; 0x3c
   13be8:	ldr	r3, [r6, #48]	; 0x30
   13bec:	b	13240 <__assert_fail@plt+0x2094>
   13bf0:	ldr	r0, [fp, #12]
   13bf4:	mov	r8, #0
   13bf8:	bl	111a0 <closedir@plt>
   13bfc:	ldr	r3, [sp, #40]	; 0x28
   13c00:	str	r8, [fp, #12]
   13c04:	cmp	r3, #3
   13c08:	bne	13b7c <__assert_fail@plt+0x29d0>
   13c0c:	mov	r3, #4
   13c10:	strh	r3, [fp, #56]	; 0x38
   13c14:	bl	11068 <__errno_location@plt>
   13c18:	ldr	r3, [r0]
   13c1c:	str	r3, [fp, #32]
   13c20:	b	135b8 <__assert_fail@plt+0x240c>
   13c24:	bl	11188 <close@plt>
   13c28:	ldr	r3, [r6, #48]	; 0x30
   13c2c:	b	1377c <__assert_fail@plt+0x25d0>
   13c30:	mov	r2, #3
   13c34:	movw	r1, #1030	; 0x406
   13c38:	bl	1ba20 <__assert_fail@plt+0xa874>
   13c3c:	str	r0, [sp, #68]	; 0x44
   13c40:	b	1372c <__assert_fail@plt+0x2580>
   13c44:	ldr	r3, [sp, #40]	; 0x28
   13c48:	cmp	r3, #3
   13c4c:	bne	13b7c <__assert_fail@plt+0x29d0>
   13c50:	b	13c0c <__assert_fail@plt+0x2a60>
   13c54:	ldr	r3, [r6, #48]	; 0x30
   13c58:	mov	r2, #7
   13c5c:	cmp	r8, #0
   13c60:	strh	r2, [fp, #56]	; 0x38
   13c64:	orr	r3, r3, #8192	; 0x2000
   13c68:	str	r3, [r6, #48]	; 0x30
   13c6c:	bne	13c90 <__assert_fail@plt+0x2ae4>
   13c70:	b	13b7c <__assert_fail@plt+0x29d0>
   13c74:	mov	r0, r3
   13c78:	bl	111a0 <closedir@plt>
   13c7c:	mov	r0, r8
   13c80:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13c84:	cmp	r4, #0
   13c88:	beq	13b7c <__assert_fail@plt+0x29d0>
   13c8c:	mov	r8, r4
   13c90:	mov	r0, r8
   13c94:	ldr	r4, [r8, #8]
   13c98:	ldr	r3, [r8, #12]
   13c9c:	cmp	r3, #0
   13ca0:	bne	13c74 <__assert_fail@plt+0x2ac8>
   13ca4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13ca8:	cmp	r4, #0
   13cac:	bne	13c8c <__assert_fail@plt+0x2ae0>
   13cb0:	b	13b7c <__assert_fail@plt+0x29d0>
   13cb4:	movw	r3, #40864	; 0x9fa0
   13cb8:	cmp	r0, r3
   13cbc:	beq	13cd0 <__assert_fail@plt+0x2b24>
   13cc0:	movw	r3, #16719	; 0x414f
   13cc4:	movt	r3, #21318	; 0x5346
   13cc8:	cmp	r0, r3
   13ccc:	bne	13900 <__assert_fail@plt+0x2754>
   13cd0:	ldr	r0, [sp, #68]	; 0x44
   13cd4:	b	13710 <__assert_fail@plt+0x2564>
   13cd8:	ldr	r8, [sp, #12]
   13cdc:	mov	r0, r4
   13ce0:	ldr	fp, [sp, #16]
   13ce4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13ce8:	cmp	r8, #0
   13cec:	bne	13d10 <__assert_fail@plt+0x2b64>
   13cf0:	b	13d30 <__assert_fail@plt+0x2b84>
   13cf4:	mov	r0, r3
   13cf8:	bl	111a0 <closedir@plt>
   13cfc:	mov	r0, r8
   13d00:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13d04:	cmp	r4, #0
   13d08:	beq	13d30 <__assert_fail@plt+0x2b84>
   13d0c:	mov	r8, r4
   13d10:	mov	r0, r8
   13d14:	ldr	r4, [r8, #8]
   13d18:	ldr	r3, [r8, #12]
   13d1c:	cmp	r3, #0
   13d20:	bne	13cf4 <__assert_fail@plt+0x2b48>
   13d24:	bl	1bca8 <__assert_fail@plt+0xaafc>
   13d28:	cmp	r4, #0
   13d2c:	bne	13d0c <__assert_fail@plt+0x2b60>
   13d30:	ldr	r0, [fp, #12]
   13d34:	mov	r8, #0
   13d38:	bl	111a0 <closedir@plt>
   13d3c:	ldr	r3, [r6, #48]	; 0x30
   13d40:	mov	r1, #7
   13d44:	mov	r2, #36	; 0x24
   13d48:	str	r8, [fp, #12]
   13d4c:	strh	r1, [fp, #56]	; 0x38
   13d50:	orr	r3, r3, #8192	; 0x2000
   13d54:	str	r3, [r6, #48]	; 0x30
   13d58:	str	r2, [sl]
   13d5c:	b	135b8 <__assert_fail@plt+0x240c>
   13d60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d64:	strd	r6, [sp, #8]
   13d68:	bic	r7, r1, #4080	; 0xff0
   13d6c:	bic	r7, r7, #15
   13d70:	strd	r8, [sp, #16]
   13d74:	strd	sl, [sp, #24]
   13d78:	cmp	r7, #0
   13d7c:	str	lr, [sp, #32]
   13d80:	sub	sp, sp, #36	; 0x24
   13d84:	str	r2, [sp, #12]
   13d88:	bne	141f4 <__assert_fail@plt+0x3048>
   13d8c:	and	r3, r1, #516	; 0x204
   13d90:	mov	r5, r1
   13d94:	cmp	r3, #516	; 0x204
   13d98:	beq	14188 <__assert_fail@plt+0x2fdc>
   13d9c:	ands	r7, r1, #18
   13da0:	beq	14188 <__assert_fail@plt+0x2fdc>
   13da4:	mov	r9, r0
   13da8:	mov	r1, #96	; 0x60
   13dac:	mov	r0, #1
   13db0:	bl	1b6bc <__assert_fail@plt+0xa510>
   13db4:	subs	r7, r0, #0
   13db8:	beq	14100 <__assert_fail@plt+0x2f54>
   13dbc:	ldr	r3, [sp, #12]
   13dc0:	tst	r5, #2
   13dc4:	mvn	r2, #99	; 0x63
   13dc8:	streq	r5, [r7, #48]	; 0x30
   13dcc:	str	r2, [r7, #32]
   13dd0:	str	r3, [r7, #44]	; 0x2c
   13dd4:	bicne	r3, r5, #512	; 0x200
   13dd8:	orrne	r3, r3, #4
   13ddc:	strne	r3, [r7, #48]	; 0x30
   13de0:	ldr	r3, [r9]
   13de4:	cmp	r3, #0
   13de8:	beq	14240 <__assert_fail@plt+0x3094>
   13dec:	mov	r6, r9
   13df0:	mov	r4, #0
   13df4:	mov	r0, r3
   13df8:	bl	11044 <strlen@plt>
   13dfc:	ldr	r3, [r6, #4]!
   13e00:	cmp	r4, r0
   13e04:	movcc	r4, r0
   13e08:	cmp	r3, #0
   13e0c:	bne	13df4 <__assert_fail@plt+0x2c48>
   13e10:	add	r4, r4, #1
   13e14:	cmp	r4, #4096	; 0x1000
   13e18:	movcc	r4, #4096	; 0x1000
   13e1c:	ldr	r0, [r7, #24]
   13e20:	ldr	r3, [r7, #36]	; 0x24
   13e24:	add	r1, r3, #256	; 0x100
   13e28:	add	r1, r1, r4
   13e2c:	cmp	r3, r1
   13e30:	bhi	14208 <__assert_fail@plt+0x305c>
   13e34:	str	r1, [r7, #36]	; 0x24
   13e38:	bl	1b76c <__assert_fail@plt+0xa5c0>
   13e3c:	subs	r4, r0, #0
   13e40:	beq	1428c <__assert_fail@plt+0x30e0>
   13e44:	ldr	r3, [r9]
   13e48:	str	r4, [r7, #24]
   13e4c:	cmp	r3, #0
   13e50:	str	r3, [sp, #16]
   13e54:	beq	141e0 <__assert_fail@plt+0x3034>
   13e58:	mov	r0, #176	; 0xb0
   13e5c:	bl	1b730 <__assert_fail@plt+0xa584>
   13e60:	subs	ip, r0, #0
   13e64:	str	ip, [sp, #16]
   13e68:	beq	14170 <__assert_fail@plt+0x2fc4>
   13e6c:	ldr	r2, [sp, #12]
   13e70:	mov	r3, #0
   13e74:	mvn	r1, #0
   13e78:	ldr	r0, [r7, #24]
   13e7c:	str	r3, [ip, #12]
   13e80:	str	r3, [ip, #16]
   13e84:	cmp	r2, r3
   13e88:	mov	r2, #196608	; 0x30000
   13e8c:	str	r3, [ip, #20]
   13e90:	str	r7, [ip, #44]	; 0x2c
   13e94:	str	r3, [ip, #32]
   13e98:	str	r3, [ip, #52]	; 0x34
   13e9c:	strb	r3, [ip, #168]	; 0xa8
   13ea0:	moveq	r3, #1
   13ea4:	str	r0, [ip, #28]
   13ea8:	streq	r3, [sp, #24]
   13eac:	str	r1, [ip, #48]	; 0x30
   13eb0:	str	r2, [ip, #58]	; 0x3a
   13eb4:	ldr	fp, [r9]
   13eb8:	beq	13ec8 <__assert_fail@plt+0x2d1c>
   13ebc:	ldr	r3, [r7, #48]	; 0x30
   13ec0:	ubfx	r3, r3, #10, #1
   13ec4:	str	r3, [sp, #24]
   13ec8:	cmp	fp, #0
   13ecc:	beq	142b8 <__assert_fail@plt+0x310c>
   13ed0:	eor	r5, r5, #2048	; 0x800
   13ed4:	mov	r3, #0
   13ed8:	ubfx	r2, r5, #11, #1
   13edc:	mov	r6, r3
   13ee0:	mov	sl, r3
   13ee4:	mov	r8, r3
   13ee8:	str	r2, [sp, #20]
   13eec:	str	r3, [sp, #28]
   13ef0:	b	13f2c <__assert_fail@plt+0x2d80>
   13ef4:	ldr	r2, [sp, #12]
   13ef8:	mov	r3, #11
   13efc:	mov	r0, #2
   13f00:	mov	r1, #0
   13f04:	strh	r3, [r4, #56]	; 0x38
   13f08:	strd	r0, [r4, #112]	; 0x70
   13f0c:	cmp	r2, #0
   13f10:	beq	141cc <__assert_fail@plt+0x3020>
   13f14:	str	r8, [r4, #8]
   13f18:	mov	r8, r4
   13f1c:	ldr	fp, [r9, #4]!
   13f20:	add	sl, sl, #1
   13f24:	cmp	fp, #0
   13f28:	beq	14028 <__assert_fail@plt+0x2e7c>
   13f2c:	mov	r0, fp
   13f30:	bl	11044 <strlen@plt>
   13f34:	ldr	r3, [sp, #20]
   13f38:	mov	r5, r0
   13f3c:	cmp	r0, #2
   13f40:	movls	r3, #0
   13f44:	andhi	r3, r3, #1
   13f48:	cmp	r3, #0
   13f4c:	bne	14198 <__assert_fail@plt+0x2fec>
   13f50:	add	r0, r5, #176	; 0xb0
   13f54:	bic	r0, r0, #7
   13f58:	bl	1b730 <__assert_fail@plt+0xa584>
   13f5c:	subs	r4, r0, #0
   13f60:	beq	14120 <__assert_fail@plt+0x2f74>
   13f64:	add	r3, r4, #168	; 0xa8
   13f68:	mov	r1, fp
   13f6c:	mov	r0, r3
   13f70:	mov	r2, r5
   13f74:	bl	10f24 <memcpy@plt>
   13f78:	add	ip, r4, r5
   13f7c:	ldr	r2, [sp, #24]
   13f80:	mov	r3, r0
   13f84:	cmp	r8, #0
   13f88:	mov	r1, #3
   13f8c:	strb	r6, [ip, #168]	; 0xa8
   13f90:	moveq	r2, #0
   13f94:	ldr	ip, [sp, #16]
   13f98:	ldr	r0, [r7, #24]
   13f9c:	cmp	r2, #0
   13fa0:	str	ip, [r4, #4]
   13fa4:	str	r6, [r4, #12]
   13fa8:	str	r6, [r4, #16]
   13fac:	str	r6, [r4, #20]
   13fb0:	str	r3, [r4, #24]
   13fb4:	str	r0, [r4, #28]
   13fb8:	str	r6, [r4, #32]
   13fbc:	str	r7, [r4, #44]	; 0x2c
   13fc0:	str	r6, [r4, #48]	; 0x30
   13fc4:	str	r5, [r4, #52]	; 0x34
   13fc8:	strh	r6, [r4, #58]	; 0x3a
   13fcc:	strh	r1, [r4, #60]	; 0x3c
   13fd0:	bne	13ef4 <__assert_fail@plt+0x2d48>
   13fd4:	mov	r3, r2
   13fd8:	mov	r2, r4
   13fdc:	ldr	r0, [r7, #32]
   13fe0:	ldr	r1, [r7, #48]	; 0x30
   13fe4:	bl	12b74 <__assert_fail@plt+0x19c8>
   13fe8:	ldr	r3, [sp, #12]
   13fec:	strh	r0, [r4, #56]	; 0x38
   13ff0:	cmp	r3, #0
   13ff4:	bne	13f14 <__assert_fail@plt+0x2d68>
   13ff8:	cmp	r8, #0
   13ffc:	str	r3, [r4, #8]
   14000:	moveq	r8, r4
   14004:	streq	r4, [sp, #28]
   14008:	beq	13f1c <__assert_fail@plt+0x2d70>
   1400c:	ldr	r3, [sp, #28]
   14010:	str	r4, [sp, #28]
   14014:	str	r4, [r3, #8]
   14018:	ldr	fp, [r9, #4]!
   1401c:	add	sl, sl, #1
   14020:	cmp	fp, #0
   14024:	bne	13f2c <__assert_fail@plt+0x2d80>
   14028:	ldr	r3, [sp, #12]
   1402c:	cmp	r3, #0
   14030:	cmpne	sl, #1
   14034:	bls	1404c <__assert_fail@plt+0x2ea0>
   14038:	mov	r1, r8
   1403c:	mov	r2, sl
   14040:	mov	r0, r7
   14044:	bl	12968 <__assert_fail@plt+0x17bc>
   14048:	mov	r8, r0
   1404c:	mov	r0, #176	; 0xb0
   14050:	bl	1b730 <__assert_fail@plt+0xa584>
   14054:	cmp	r0, #0
   14058:	streq	r0, [r7]
   1405c:	beq	14120 <__assert_fail@plt+0x2f74>
   14060:	ldr	lr, [r7, #24]
   14064:	movw	r4, #258	; 0x102
   14068:	mov	r1, #0
   1406c:	mov	ip, #1
   14070:	mov	r2, #9
   14074:	str	r0, [r7]
   14078:	ldr	r3, [r7, #48]	; 0x30
   1407c:	str	r8, [r0, #8]
   14080:	str	r1, [r0, #12]
   14084:	str	r1, [r0, #16]
   14088:	str	r1, [r0, #20]
   1408c:	tst	r4, r3
   14090:	mov	r3, #3
   14094:	str	lr, [r0, #28]
   14098:	str	r1, [r0, #32]
   1409c:	str	r7, [r0, #44]	; 0x2c
   140a0:	str	ip, [r0, #48]	; 0x30
   140a4:	str	r1, [r0, #52]	; 0x34
   140a8:	str	r2, [r0, #56]	; 0x38
   140ac:	strh	r3, [r0, #60]	; 0x3c
   140b0:	strb	r1, [r0, #168]	; 0xa8
   140b4:	beq	14224 <__assert_fail@plt+0x3078>
   140b8:	movw	r0, #48296	; 0xbca8
   140bc:	movt	r0, #1
   140c0:	movw	r3, #10368	; 0x2880
   140c4:	movt	r3, #1
   140c8:	movw	r2, #10432	; 0x28c0
   140cc:	movt	r2, #1
   140d0:	str	r0, [sp]
   140d4:	mov	r0, #31
   140d8:	bl	1586c <__assert_fail@plt+0x46c0>
   140dc:	cmp	r0, #0
   140e0:	str	r0, [r7, #56]	; 0x38
   140e4:	beq	14120 <__assert_fail@plt+0x2f74>
   140e8:	ldr	r3, [r7, #48]	; 0x30
   140ec:	tst	r3, #516	; 0x204
   140f0:	beq	14248 <__assert_fail@plt+0x309c>
   140f4:	mvn	r1, #0
   140f8:	add	r0, r7, #60	; 0x3c
   140fc:	bl	16638 <__assert_fail@plt+0x548c>
   14100:	mov	r0, r7
   14104:	add	sp, sp, #36	; 0x24
   14108:	ldrd	r4, [sp]
   1410c:	ldrd	r6, [sp, #8]
   14110:	ldrd	r8, [sp, #16]
   14114:	ldrd	sl, [sp, #24]
   14118:	add	sp, sp, #32
   1411c:	pop	{pc}		; (ldr pc, [sp], #4)
   14120:	cmp	r8, #0
   14124:	bne	14148 <__assert_fail@plt+0x2f9c>
   14128:	b	14168 <__assert_fail@plt+0x2fbc>
   1412c:	mov	r0, r3
   14130:	bl	111a0 <closedir@plt>
   14134:	mov	r0, r8
   14138:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1413c:	cmp	r4, #0
   14140:	beq	14168 <__assert_fail@plt+0x2fbc>
   14144:	mov	r8, r4
   14148:	mov	r0, r8
   1414c:	ldr	r4, [r8, #8]
   14150:	ldr	r3, [r8, #12]
   14154:	cmp	r3, #0
   14158:	bne	1412c <__assert_fail@plt+0x2f80>
   1415c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14160:	cmp	r4, #0
   14164:	bne	14144 <__assert_fail@plt+0x2f98>
   14168:	ldr	r0, [sp, #16]
   1416c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14170:	ldr	r0, [r7, #24]
   14174:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14178:	mov	r0, r7
   1417c:	mov	r7, #0
   14180:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14184:	b	14100 <__assert_fail@plt+0x2f54>
   14188:	bl	11068 <__errno_location@plt>
   1418c:	mov	r3, #22
   14190:	str	r3, [r0]
   14194:	b	14100 <__assert_fail@plt+0x2f54>
   14198:	sub	r3, r0, #1
   1419c:	ldrb	r2, [fp, r3]
   141a0:	add	r3, fp, r3
   141a4:	cmp	r2, #47	; 0x2f
   141a8:	bne	13f50 <__assert_fail@plt+0x2da4>
   141ac:	ldrb	r2, [r3, #-1]!
   141b0:	cmp	r2, #47	; 0x2f
   141b4:	bne	13f50 <__assert_fail@plt+0x2da4>
   141b8:	sub	r5, r5, #1
   141bc:	cmp	r5, #1
   141c0:	bne	141ac <__assert_fail@plt+0x3000>
   141c4:	mov	r0, #176	; 0xb0
   141c8:	b	13f58 <__assert_fail@plt+0x2dac>
   141cc:	ldr	r3, [sp, #28]
   141d0:	str	r2, [r4, #8]
   141d4:	str	r4, [sp, #28]
   141d8:	str	r4, [r3, #8]
   141dc:	b	14018 <__assert_fail@plt+0x2e6c>
   141e0:	ldr	r3, [sp, #12]
   141e4:	cmp	r3, #0
   141e8:	beq	142b0 <__assert_fail@plt+0x3104>
   141ec:	ldr	fp, [sp, #16]
   141f0:	b	13ebc <__assert_fail@plt+0x2d10>
   141f4:	bl	11068 <__errno_location@plt>
   141f8:	mov	r3, #22
   141fc:	mov	r7, #0
   14200:	str	r3, [r0]
   14204:	b	14100 <__assert_fail@plt+0x2f54>
   14208:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1420c:	mov	r3, #0
   14210:	str	r3, [r7, #24]
   14214:	bl	11068 <__errno_location@plt>
   14218:	mov	r3, #36	; 0x24
   1421c:	str	r3, [r0]
   14220:	b	14178 <__assert_fail@plt+0x2fcc>
   14224:	mov	r0, #32
   14228:	bl	1b730 <__assert_fail@plt+0xa584>
   1422c:	cmp	r0, #0
   14230:	str	r0, [r7, #56]	; 0x38
   14234:	beq	14120 <__assert_fail@plt+0x2f74>
   14238:	bl	1b84c <__assert_fail@plt+0xa6a0>
   1423c:	b	140e8 <__assert_fail@plt+0x2f3c>
   14240:	mov	r4, #4096	; 0x1000
   14244:	b	13e1c <__assert_fail@plt+0x2c70>
   14248:	lsl	r2, r3, #11
   1424c:	tst	r3, #512	; 0x200
   14250:	and	r2, r2, #32768	; 0x8000
   14254:	orr	r2, r2, #540672	; 0x84000
   14258:	orr	r2, r2, #2304	; 0x900
   1425c:	beq	1429c <__assert_fail@plt+0x30f0>
   14260:	movw	r1, #52448	; 0xcce0
   14264:	movt	r1, #1
   14268:	ldr	r0, [r7, #32]
   1426c:	bl	16c90 <__assert_fail@plt+0x5ae4>
   14270:	cmp	r0, #0
   14274:	str	r0, [r7, #28]
   14278:	bge	140f4 <__assert_fail@plt+0x2f48>
   1427c:	ldr	r3, [r7, #48]	; 0x30
   14280:	orr	r3, r3, #4
   14284:	str	r3, [r7, #48]	; 0x30
   14288:	b	140f4 <__assert_fail@plt+0x2f48>
   1428c:	ldr	r0, [r7, #24]
   14290:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14294:	str	r4, [r7, #24]
   14298:	b	14178 <__assert_fail@plt+0x2fcc>
   1429c:	mov	r1, r2
   142a0:	movw	r0, #52448	; 0xcce0
   142a4:	movt	r0, #1
   142a8:	bl	1bc08 <__assert_fail@plt+0xaa5c>
   142ac:	b	14270 <__assert_fail@plt+0x30c4>
   142b0:	ldr	r8, [sp, #16]
   142b4:	b	1404c <__assert_fail@plt+0x2ea0>
   142b8:	mov	r8, fp
   142bc:	b	1404c <__assert_fail@plt+0x2ea0>
   142c0:	ldr	r3, [r0]
   142c4:	strd	r4, [sp, #-16]!
   142c8:	str	r6, [sp, #8]
   142cc:	mov	r6, r0
   142d0:	str	lr, [sp, #12]
   142d4:	cmp	r3, #0
   142d8:	beq	1432c <__assert_fail@plt+0x3180>
   142dc:	ldr	r2, [r3, #48]	; 0x30
   142e0:	cmp	r2, #0
   142e4:	bge	14300 <__assert_fail@plt+0x3154>
   142e8:	b	144b0 <__assert_fail@plt+0x3304>
   142ec:	bl	1bca8 <__assert_fail@plt+0xaafc>
   142f0:	ldr	r3, [r4, #48]	; 0x30
   142f4:	cmp	r3, #0
   142f8:	blt	14324 <__assert_fail@plt+0x3178>
   142fc:	mov	r3, r4
   14300:	ldr	r4, [r3, #8]
   14304:	mov	r0, r3
   14308:	cmp	r4, #0
   1430c:	bne	142ec <__assert_fail@plt+0x3140>
   14310:	ldr	r4, [r3, #4]
   14314:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14318:	ldr	r3, [r4, #48]	; 0x30
   1431c:	cmp	r3, #0
   14320:	bge	142fc <__assert_fail@plt+0x3150>
   14324:	mov	r0, r4
   14328:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1432c:	ldr	r4, [r6, #4]
   14330:	cmp	r4, #0
   14334:	bne	14358 <__assert_fail@plt+0x31ac>
   14338:	b	14378 <__assert_fail@plt+0x31cc>
   1433c:	mov	r0, r3
   14340:	bl	111a0 <closedir@plt>
   14344:	mov	r0, r4
   14348:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1434c:	cmp	r5, #0
   14350:	beq	14378 <__assert_fail@plt+0x31cc>
   14354:	mov	r4, r5
   14358:	mov	r0, r4
   1435c:	ldr	r5, [r4, #8]
   14360:	ldr	r3, [r4, #12]
   14364:	cmp	r3, #0
   14368:	bne	1433c <__assert_fail@plt+0x3190>
   1436c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14370:	cmp	r5, #0
   14374:	bne	14354 <__assert_fail@plt+0x31a8>
   14378:	ldr	r0, [r6, #8]
   1437c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14380:	ldr	r0, [r6, #24]
   14384:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14388:	ldr	r3, [r6, #48]	; 0x30
   1438c:	tst	r3, #512	; 0x200
   14390:	beq	14440 <__assert_fail@plt+0x3294>
   14394:	ldr	r0, [r6, #32]
   14398:	cmp	r0, #0
   1439c:	bge	14428 <__assert_fail@plt+0x327c>
   143a0:	mov	r5, #0
   143a4:	add	r4, r6, #60	; 0x3c
   143a8:	b	143b8 <__assert_fail@plt+0x320c>
   143ac:	bl	166b4 <__assert_fail@plt+0x5508>
   143b0:	cmp	r0, #0
   143b4:	bge	14420 <__assert_fail@plt+0x3274>
   143b8:	mov	r0, r4
   143bc:	bl	16664 <__assert_fail@plt+0x54b8>
   143c0:	cmp	r0, #0
   143c4:	mov	r0, r4
   143c8:	beq	143ac <__assert_fail@plt+0x3200>
   143cc:	ldr	r0, [r6, #52]	; 0x34
   143d0:	cmp	r0, #0
   143d4:	beq	143dc <__assert_fail@plt+0x3230>
   143d8:	bl	15bac <__assert_fail@plt+0x4a00>
   143dc:	ldr	r3, [r6, #48]	; 0x30
   143e0:	movw	r2, #258	; 0x102
   143e4:	ldr	r0, [r6, #56]	; 0x38
   143e8:	tst	r2, r3
   143ec:	beq	14478 <__assert_fail@plt+0x32cc>
   143f0:	cmp	r0, #0
   143f4:	beq	143fc <__assert_fail@plt+0x3250>
   143f8:	bl	15bac <__assert_fail@plt+0x4a00>
   143fc:	mov	r0, r6
   14400:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14404:	cmp	r5, #0
   14408:	bne	144b8 <__assert_fail@plt+0x330c>
   1440c:	mov	r0, r5
   14410:	ldrd	r4, [sp]
   14414:	ldr	r6, [sp, #8]
   14418:	add	sp, sp, #12
   1441c:	pop	{pc}		; (ldr pc, [sp], #4)
   14420:	bl	11188 <close@plt>
   14424:	b	143b8 <__assert_fail@plt+0x320c>
   14428:	bl	11188 <close@plt>
   1442c:	cmp	r0, #0
   14430:	beq	143a0 <__assert_fail@plt+0x31f4>
   14434:	bl	11068 <__errno_location@plt>
   14438:	ldr	r5, [r0]
   1443c:	b	143a4 <__assert_fail@plt+0x31f8>
   14440:	tst	r3, #4
   14444:	bne	143a0 <__assert_fail@plt+0x31f4>
   14448:	ldr	r0, [r6, #28]
   1444c:	bl	11128 <fchdir@plt>
   14450:	cmp	r0, #0
   14454:	bne	14480 <__assert_fail@plt+0x32d4>
   14458:	ldr	r0, [r6, #28]
   1445c:	bl	11188 <close@plt>
   14460:	cmp	r0, #0
   14464:	beq	143a0 <__assert_fail@plt+0x31f4>
   14468:	bl	11068 <__errno_location@plt>
   1446c:	mov	r4, r0
   14470:	ldr	r5, [r4]
   14474:	b	143a4 <__assert_fail@plt+0x31f8>
   14478:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1447c:	b	143fc <__assert_fail@plt+0x3250>
   14480:	bl	11068 <__errno_location@plt>
   14484:	ldr	r5, [r0]
   14488:	mov	r4, r0
   1448c:	ldr	r0, [r6, #28]
   14490:	bl	11188 <close@plt>
   14494:	adds	r3, r0, #0
   14498:	movne	r3, #1
   1449c:	cmp	r5, #0
   144a0:	movne	r3, #0
   144a4:	cmp	r3, #0
   144a8:	beq	143a4 <__assert_fail@plt+0x31f8>
   144ac:	b	14470 <__assert_fail@plt+0x32c4>
   144b0:	mov	r4, r3
   144b4:	b	14324 <__assert_fail@plt+0x3178>
   144b8:	bl	11068 <__errno_location@plt>
   144bc:	str	r5, [r0]
   144c0:	mvn	r5, #0
   144c4:	b	1440c <__assert_fail@plt+0x3260>
   144c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144cc:	ldr	r4, [r0]
   144d0:	strd	r6, [sp, #8]
   144d4:	str	r8, [sp, #16]
   144d8:	str	lr, [sp, #20]
   144dc:	sub	sp, sp, #8
   144e0:	cmp	r4, #0
   144e4:	beq	146f4 <__assert_fail@plt+0x3548>
   144e8:	ldr	r1, [r0, #48]	; 0x30
   144ec:	ands	r3, r1, #8192	; 0x2000
   144f0:	bne	146f4 <__assert_fail@plt+0x3548>
   144f4:	ldrh	r2, [r4, #60]	; 0x3c
   144f8:	mov	r8, r0
   144fc:	mov	r0, #3
   14500:	strh	r0, [r4, #60]	; 0x3c
   14504:	cmp	r2, #1
   14508:	beq	1494c <__assert_fail@plt+0x37a0>
   1450c:	cmp	r2, #2
   14510:	ldrh	r3, [r4, #56]	; 0x38
   14514:	beq	14614 <__assert_fail@plt+0x3468>
   14518:	cmp	r3, #1
   1451c:	bne	1454c <__assert_fail@plt+0x33a0>
   14520:	b	14714 <__assert_fail@plt+0x3568>
   14524:	mov	r0, r4
   14528:	str	r5, [r8]
   1452c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14530:	ldr	r4, [r5, #48]	; 0x30
   14534:	cmp	r4, #0
   14538:	beq	14794 <__assert_fail@plt+0x35e8>
   1453c:	ldrh	r3, [r5, #60]	; 0x3c
   14540:	mov	r4, r5
   14544:	cmp	r3, #4
   14548:	bne	14868 <__assert_fail@plt+0x36bc>
   1454c:	ldr	r5, [r4, #8]
   14550:	cmp	r5, #0
   14554:	bne	14524 <__assert_fail@plt+0x3378>
   14558:	ldr	r6, [r4, #4]
   1455c:	ldr	r3, [r6, #12]
   14560:	cmp	r3, #0
   14564:	bne	14ac4 <__assert_fail@plt+0x3918>
   14568:	mov	r0, r4
   1456c:	str	r6, [r8]
   14570:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14574:	ldr	r3, [r6, #48]	; 0x30
   14578:	cmn	r3, #1
   1457c:	beq	14aa4 <__assert_fail@plt+0x38f8>
   14580:	ldrh	r3, [r6, #56]	; 0x38
   14584:	cmp	r3, #11
   14588:	beq	14948 <__assert_fail@plt+0x379c>
   1458c:	ldr	r2, [r8, #24]
   14590:	mov	r1, #0
   14594:	ldr	r3, [r6, #40]	; 0x28
   14598:	strb	r1, [r2, r3]
   1459c:	ldr	r3, [r6, #48]	; 0x30
   145a0:	cmp	r3, r1
   145a4:	beq	146c0 <__assert_fail@plt+0x3514>
   145a8:	ldrh	r3, [r6, #58]	; 0x3a
   145ac:	tst	r3, #2
   145b0:	beq	14a00 <__assert_fail@plt+0x3854>
   145b4:	ldr	r3, [r8, #48]	; 0x30
   145b8:	ldr	r4, [r6, #36]	; 0x24
   145bc:	tst	r3, #4
   145c0:	bne	14608 <__assert_fail@plt+0x345c>
   145c4:	tst	r3, #512	; 0x200
   145c8:	beq	14ba0 <__assert_fail@plt+0x39f4>
   145cc:	ldr	r1, [r8, #32]
   145d0:	sub	r3, r4, r1
   145d4:	cmn	r1, #100	; 0x64
   145d8:	clz	r3, r3
   145dc:	lsr	r3, r3, #5
   145e0:	moveq	r3, #0
   145e4:	cmp	r3, #0
   145e8:	bne	14948 <__assert_fail@plt+0x379c>
   145ec:	add	r0, r8, #60	; 0x3c
   145f0:	bl	1666c <__assert_fail@plt+0x54c0>
   145f4:	cmp	r0, #0
   145f8:	blt	14600 <__assert_fail@plt+0x3454>
   145fc:	bl	11188 <close@plt>
   14600:	str	r4, [r8, #32]
   14604:	ldr	r4, [r6, #36]	; 0x24
   14608:	mov	r0, r4
   1460c:	bl	11188 <close@plt>
   14610:	b	14a08 <__assert_fail@plt+0x385c>
   14614:	sub	r2, r3, #12
   14618:	cmp	r2, #1
   1461c:	bls	14904 <__assert_fail@plt+0x3758>
   14620:	cmp	r3, #1
   14624:	bne	1454c <__assert_fail@plt+0x33a0>
   14628:	tst	r1, #64	; 0x40
   1462c:	beq	14644 <__assert_fail@plt+0x3498>
   14630:	ldrd	r2, [r8, #16]
   14634:	ldrd	r6, [r4, #64]	; 0x40
   14638:	cmp	r7, r3
   1463c:	cmpeq	r6, r2
   14640:	bne	1471c <__assert_fail@plt+0x3570>
   14644:	ldr	r5, [r8, #4]
   14648:	cmp	r5, #0
   1464c:	beq	149ac <__assert_fail@plt+0x3800>
   14650:	tst	r1, #4096	; 0x1000
   14654:	bne	14960 <__assert_fail@plt+0x37b4>
   14658:	mvn	r2, #0
   1465c:	mov	r1, r4
   14660:	ldr	r3, [r4, #24]
   14664:	mov	r0, r8
   14668:	bl	12f1c <__assert_fail@plt+0x1d70>
   1466c:	cmp	r0, #0
   14670:	beq	14a8c <__assert_fail@plt+0x38e0>
   14674:	bl	11068 <__errno_location@plt>
   14678:	ldrh	r3, [r4, #58]	; 0x3a
   1467c:	ldr	r2, [r0]
   14680:	orr	r3, r3, #1
   14684:	str	r2, [r4, #32]
   14688:	strh	r3, [r4, #58]	; 0x3a
   1468c:	ldr	r4, [r8, #4]
   14690:	cmp	r4, #0
   14694:	beq	146b4 <__assert_fail@plt+0x3508>
   14698:	mov	r3, r4
   1469c:	ldr	r2, [r3, #4]
   146a0:	ldr	r2, [r2, #24]
   146a4:	str	r2, [r3, #24]
   146a8:	ldr	r3, [r3, #8]
   146ac:	cmp	r3, #0
   146b0:	bne	1469c <__assert_fail@plt+0x34f0>
   146b4:	mov	r3, #0
   146b8:	str	r3, [r8, #4]
   146bc:	b	14870 <__assert_fail@plt+0x36c4>
   146c0:	mov	r0, r8
   146c4:	bl	12e70 <__assert_fail@plt+0x1cc4>
   146c8:	cmp	r0, #0
   146cc:	beq	14a08 <__assert_fail@plt+0x385c>
   146d0:	bl	11068 <__errno_location@plt>
   146d4:	ldr	r3, [r8, #48]	; 0x30
   146d8:	ldr	r2, [r0]
   146dc:	orr	r0, r3, #8192	; 0x2000
   146e0:	ldrh	r3, [r6, #56]	; 0x38
   146e4:	str	r2, [r6, #32]
   146e8:	str	r0, [r8, #48]	; 0x30
   146ec:	cmp	r3, #2
   146f0:	bne	14a1c <__assert_fail@plt+0x3870>
   146f4:	mov	r4, #0
   146f8:	mov	r0, r4
   146fc:	add	sp, sp, #8
   14700:	ldrd	r4, [sp]
   14704:	ldrd	r6, [sp, #8]
   14708:	ldr	r8, [sp, #16]
   1470c:	add	sp, sp, #20
   14710:	pop	{pc}		; (ldr pc, [sp], #4)
   14714:	cmp	r2, #4
   14718:	bne	14628 <__assert_fail@plt+0x347c>
   1471c:	ldrh	r3, [r4, #58]	; 0x3a
   14720:	tst	r3, #2
   14724:	bne	14b04 <__assert_fail@plt+0x3958>
   14728:	ldr	r5, [r8, #4]
   1472c:	cmp	r5, #0
   14730:	bne	14768 <__assert_fail@plt+0x35bc>
   14734:	mov	r3, #6
   14738:	mov	r2, r4
   1473c:	ldr	r0, [r8, #48]	; 0x30
   14740:	add	r1, r8, #56	; 0x38
   14744:	strh	r3, [r4, #56]	; 0x38
   14748:	bl	12da4 <__assert_fail@plt+0x1bf8>
   1474c:	b	146f8 <__assert_fail@plt+0x354c>
   14750:	bl	111a0 <closedir@plt>
   14754:	mov	r0, r5
   14758:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1475c:	cmp	r6, #0
   14760:	beq	14788 <__assert_fail@plt+0x35dc>
   14764:	mov	r5, r6
   14768:	ldr	r6, [r5, #8]
   1476c:	ldr	r0, [r5, #12]
   14770:	cmp	r0, #0
   14774:	bne	14750 <__assert_fail@plt+0x35a4>
   14778:	mov	r0, r5
   1477c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14780:	cmp	r6, #0
   14784:	bne	14764 <__assert_fail@plt+0x35b8>
   14788:	mov	r3, #0
   1478c:	str	r3, [r8, #4]
   14790:	b	14734 <__assert_fail@plt+0x3588>
   14794:	mov	r0, r8
   14798:	bl	12e70 <__assert_fail@plt+0x1cc4>
   1479c:	ldr	r3, [r8, #48]	; 0x30
   147a0:	cmp	r0, #0
   147a4:	orrne	r3, r3, #8192	; 0x2000
   147a8:	strne	r3, [r8, #48]	; 0x30
   147ac:	bne	146f8 <__assert_fail@plt+0x354c>
   147b0:	movw	r2, #258	; 0x102
   147b4:	ldr	r0, [r8, #56]	; 0x38
   147b8:	tst	r2, r3
   147bc:	beq	14afc <__assert_fail@plt+0x3950>
   147c0:	cmp	r0, #0
   147c4:	beq	147cc <__assert_fail@plt+0x3620>
   147c8:	bl	15bac <__assert_fail@plt+0x4a00>
   147cc:	ldr	r2, [r5, #52]	; 0x34
   147d0:	add	r4, r5, #168	; 0xa8
   147d4:	mov	r1, r4
   147d8:	ldr	r0, [r8, #24]
   147dc:	str	r2, [r5, #40]	; 0x28
   147e0:	add	r2, r2, #1
   147e4:	bl	10f00 <memmove@plt>
   147e8:	mov	r0, r4
   147ec:	mov	r1, #47	; 0x2f
   147f0:	bl	110ec <strrchr@plt>
   147f4:	cmp	r0, #0
   147f8:	beq	14828 <__assert_fail@plt+0x367c>
   147fc:	cmp	r4, r0
   14800:	beq	14a94 <__assert_fail@plt+0x38e8>
   14804:	add	r6, r0, #1
   14808:	mov	r0, r6
   1480c:	bl	11044 <strlen@plt>
   14810:	mov	r7, r0
   14814:	mov	r1, r6
   14818:	mov	r0, r4
   1481c:	add	r2, r7, #1
   14820:	bl	10f00 <memmove@plt>
   14824:	str	r7, [r5, #52]	; 0x34
   14828:	ldr	r3, [r8, #24]
   1482c:	movw	r1, #258	; 0x102
   14830:	ldr	r2, [r8, #48]	; 0x30
   14834:	str	r3, [r5, #24]
   14838:	str	r3, [r5, #28]
   1483c:	tst	r1, r2
   14840:	bne	14a54 <__assert_fail@plt+0x38a8>
   14844:	mov	r0, #32
   14848:	bl	1b730 <__assert_fail@plt+0xa584>
   1484c:	cmp	r0, #0
   14850:	str	r0, [r8, #56]	; 0x38
   14854:	beq	14b94 <__assert_fail@plt+0x39e8>
   14858:	bl	1b84c <__assert_fail@plt+0xa6a0>
   1485c:	mov	r4, r5
   14860:	ldrh	r3, [r5, #56]	; 0x38
   14864:	b	148b4 <__assert_fail@plt+0x3708>
   14868:	cmp	r3, #2
   1486c:	beq	14b10 <__assert_fail@plt+0x3964>
   14870:	ldr	r0, [r4, #4]
   14874:	mov	ip, #47	; 0x2f
   14878:	add	r1, r4, #168	; 0xa8
   1487c:	ldr	r3, [r8, #24]
   14880:	ldr	lr, [r0, #28]
   14884:	ldr	r2, [r0, #40]	; 0x28
   14888:	sub	r0, r2, #1
   1488c:	ldrb	lr, [lr, r0]
   14890:	cmp	lr, ip
   14894:	movne	r0, r2
   14898:	strb	ip, [r3, r0]
   1489c:	add	r0, r3, r0
   148a0:	ldr	r2, [r4, #52]	; 0x34
   148a4:	add	r0, r0, #1
   148a8:	add	r2, r2, #1
   148ac:	bl	10f00 <memmove@plt>
   148b0:	ldrh	r3, [r4, #56]	; 0x38
   148b4:	cmp	r3, #11
   148b8:	str	r4, [r8]
   148bc:	beq	1492c <__assert_fail@plt+0x3780>
   148c0:	cmp	r3, #1
   148c4:	bne	146f8 <__assert_fail@plt+0x354c>
   148c8:	ldr	r3, [r4, #48]	; 0x30
   148cc:	add	r1, r8, #56	; 0x38
   148d0:	ldr	r0, [r8, #48]	; 0x30
   148d4:	cmp	r3, #0
   148d8:	ldrdeq	r2, [r4, #64]	; 0x40
   148dc:	strdeq	r2, [r8, #16]
   148e0:	mov	r2, r4
   148e4:	bl	12cd0 <__assert_fail@plt+0x1b24>
   148e8:	subs	r5, r0, #0
   148ec:	bne	146f8 <__assert_fail@plt+0x354c>
   148f0:	bl	11068 <__errno_location@plt>
   148f4:	mov	r3, #12
   148f8:	mov	r4, r5
   148fc:	str	r3, [r0]
   14900:	b	146f8 <__assert_fail@plt+0x354c>
   14904:	mov	r3, #1
   14908:	mov	r2, r4
   1490c:	ldr	r0, [r8, #32]
   14910:	bl	12b74 <__assert_fail@plt+0x19c8>
   14914:	cmp	r0, #1
   14918:	strh	r0, [r4, #56]	; 0x38
   1491c:	beq	14bb8 <__assert_fail@plt+0x3a0c>
   14920:	cmp	r0, #11
   14924:	str	r4, [r8]
   14928:	bne	146f8 <__assert_fail@plt+0x354c>
   1492c:	ldrd	r2, [r4, #112]	; 0x70
   14930:	cmp	r3, #0
   14934:	cmpeq	r2, #2
   14938:	beq	14b40 <__assert_fail@plt+0x3994>
   1493c:	cmp	r3, #0
   14940:	cmpeq	r2, #1
   14944:	beq	146f8 <__assert_fail@plt+0x354c>
   14948:	bl	1117c <abort@plt>
   1494c:	mov	r2, r4
   14950:	ldr	r0, [r8, #32]
   14954:	bl	12b74 <__assert_fail@plt+0x19c8>
   14958:	strh	r0, [r4, #56]	; 0x38
   1495c:	b	146f8 <__assert_fail@plt+0x354c>
   14960:	bic	r1, r1, #4096	; 0x1000
   14964:	str	r1, [r8, #48]	; 0x30
   14968:	b	14984 <__assert_fail@plt+0x37d8>
   1496c:	bl	111a0 <closedir@plt>
   14970:	mov	r0, r5
   14974:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14978:	cmp	r6, #0
   1497c:	beq	149a4 <__assert_fail@plt+0x37f8>
   14980:	mov	r5, r6
   14984:	ldr	r6, [r5, #8]
   14988:	ldr	r0, [r5, #12]
   1498c:	cmp	r0, #0
   14990:	bne	1496c <__assert_fail@plt+0x37c0>
   14994:	mov	r0, r5
   14998:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1499c:	cmp	r6, #0
   149a0:	bne	14980 <__assert_fail@plt+0x37d4>
   149a4:	mov	r3, #0
   149a8:	str	r3, [r8, #4]
   149ac:	mov	r1, #3
   149b0:	mov	r0, r8
   149b4:	bl	131dc <__assert_fail@plt+0x2030>
   149b8:	cmp	r0, #0
   149bc:	str	r0, [r8, #4]
   149c0:	movne	r4, r0
   149c4:	bne	146b4 <__assert_fail@plt+0x3508>
   149c8:	ldr	r0, [r8, #48]	; 0x30
   149cc:	tst	r0, #8192	; 0x2000
   149d0:	bne	146f4 <__assert_fail@plt+0x3548>
   149d4:	ldr	r3, [r4, #32]
   149d8:	cmp	r3, #0
   149dc:	beq	149f0 <__assert_fail@plt+0x3844>
   149e0:	ldrh	r3, [r4, #56]	; 0x38
   149e4:	cmp	r3, #4
   149e8:	movne	r3, #7
   149ec:	strhne	r3, [r4, #56]	; 0x38
   149f0:	add	r1, r8, #56	; 0x38
   149f4:	mov	r2, r4
   149f8:	bl	12da4 <__assert_fail@plt+0x1bf8>
   149fc:	b	146f8 <__assert_fail@plt+0x354c>
   14a00:	tst	r3, #1
   14a04:	beq	14b60 <__assert_fail@plt+0x39b4>
   14a08:	ldrh	r3, [r6, #56]	; 0x38
   14a0c:	ldr	r0, [r8, #48]	; 0x30
   14a10:	cmp	r3, #2
   14a14:	beq	14a44 <__assert_fail@plt+0x3898>
   14a18:	ldr	r2, [r6, #32]
   14a1c:	cmp	r2, #0
   14a20:	movne	r3, #7
   14a24:	strhne	r3, [r6, #56]	; 0x38
   14a28:	bne	14a44 <__assert_fail@plt+0x3898>
   14a2c:	mov	r3, #6
   14a30:	mov	r2, r6
   14a34:	add	r1, r8, #56	; 0x38
   14a38:	strh	r3, [r6, #56]	; 0x38
   14a3c:	bl	12da4 <__assert_fail@plt+0x1bf8>
   14a40:	ldr	r0, [r8, #48]	; 0x30
   14a44:	tst	r0, #8192	; 0x2000
   14a48:	moveq	r4, r6
   14a4c:	beq	146f8 <__assert_fail@plt+0x354c>
   14a50:	b	146f4 <__assert_fail@plt+0x3548>
   14a54:	movw	r1, #48296	; 0xbca8
   14a58:	movt	r1, #1
   14a5c:	movw	r3, #10368	; 0x2880
   14a60:	movt	r3, #1
   14a64:	movw	r2, #10432	; 0x28c0
   14a68:	movt	r2, #1
   14a6c:	str	r1, [sp]
   14a70:	mov	r0, #31
   14a74:	mov	r1, #0
   14a78:	bl	1586c <__assert_fail@plt+0x46c0>
   14a7c:	mov	r4, r5
   14a80:	ldrh	r3, [r5, #56]	; 0x38
   14a84:	str	r0, [r8, #56]	; 0x38
   14a88:	b	148b4 <__assert_fail@plt+0x3708>
   14a8c:	ldr	r4, [r8, #4]
   14a90:	b	146b4 <__assert_fail@plt+0x3508>
   14a94:	ldrb	r3, [r4, #1]
   14a98:	cmp	r3, #0
   14a9c:	beq	14828 <__assert_fail@plt+0x367c>
   14aa0:	b	14804 <__assert_fail@plt+0x3658>
   14aa4:	mov	r0, r6
   14aa8:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14aac:	bl	11068 <__errno_location@plt>
   14ab0:	mov	r3, #0
   14ab4:	mov	r4, r3
   14ab8:	str	r3, [r0]
   14abc:	str	r3, [r8]
   14ac0:	b	146f8 <__assert_fail@plt+0x354c>
   14ac4:	ldr	r2, [r8, #24]
   14ac8:	mov	r1, #3
   14acc:	mov	r0, r8
   14ad0:	ldr	r3, [r6, #40]	; 0x28
   14ad4:	str	r6, [r8]
   14ad8:	strb	r5, [r2, r3]
   14adc:	bl	131dc <__assert_fail@plt+0x2030>
   14ae0:	subs	r3, r0, #0
   14ae4:	bne	14b84 <__assert_fail@plt+0x39d8>
   14ae8:	ldr	r3, [r8, #48]	; 0x30
   14aec:	tst	r3, #8192	; 0x2000
   14af0:	bne	146f4 <__assert_fail@plt+0x3548>
   14af4:	ldr	r6, [r4, #4]
   14af8:	b	14568 <__assert_fail@plt+0x33bc>
   14afc:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14b00:	b	147cc <__assert_fail@plt+0x3620>
   14b04:	ldr	r0, [r4, #36]	; 0x24
   14b08:	bl	11188 <close@plt>
   14b0c:	b	14728 <__assert_fail@plt+0x357c>
   14b10:	mov	r3, #1
   14b14:	mov	r2, r5
   14b18:	ldr	r0, [r8, #32]
   14b1c:	ldr	r1, [r8, #48]	; 0x30
   14b20:	bl	12b74 <__assert_fail@plt+0x19c8>
   14b24:	cmp	r0, #1
   14b28:	strh	r0, [r5, #56]	; 0x38
   14b2c:	beq	14c10 <__assert_fail@plt+0x3a64>
   14b30:	mov	r3, #3
   14b34:	mov	r4, r5
   14b38:	strh	r3, [r5, #60]	; 0x3c
   14b3c:	b	14870 <__assert_fail@plt+0x36c4>
   14b40:	mov	r3, #0
   14b44:	mov	r2, r4
   14b48:	ldr	r0, [r8, #32]
   14b4c:	ldr	r1, [r8, #48]	; 0x30
   14b50:	bl	12b74 <__assert_fail@plt+0x19c8>
   14b54:	mov	r3, r0
   14b58:	strh	r0, [r4, #56]	; 0x38
   14b5c:	b	148c0 <__assert_fail@plt+0x3714>
   14b60:	movw	r3, #52444	; 0xccdc
   14b64:	movt	r3, #1
   14b68:	ldr	r1, [r6, #4]
   14b6c:	mvn	r2, #0
   14b70:	mov	r0, r8
   14b74:	bl	12f1c <__assert_fail@plt+0x1d70>
   14b78:	cmp	r0, #0
   14b7c:	beq	14a08 <__assert_fail@plt+0x385c>
   14b80:	b	146d0 <__assert_fail@plt+0x3524>
   14b84:	mov	r0, r4
   14b88:	mov	r4, r3
   14b8c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14b90:	b	14870 <__assert_fail@plt+0x36c4>
   14b94:	ldrh	r3, [r5, #56]	; 0x38
   14b98:	mov	r4, r5
   14b9c:	b	148b4 <__assert_fail@plt+0x3708>
   14ba0:	mov	r0, r4
   14ba4:	bl	11128 <fchdir@plt>
   14ba8:	cmp	r0, #0
   14bac:	bne	14c60 <__assert_fail@plt+0x3ab4>
   14bb0:	ldr	r4, [r6, #36]	; 0x24
   14bb4:	b	14608 <__assert_fail@plt+0x345c>
   14bb8:	ldr	r3, [r8, #48]	; 0x30
   14bbc:	tst	r3, #4
   14bc0:	strne	r4, [r8]
   14bc4:	bne	148c8 <__assert_fail@plt+0x371c>
   14bc8:	lsl	r2, r3, #11
   14bcc:	tst	r3, #512	; 0x200
   14bd0:	and	r2, r2, #32768	; 0x8000
   14bd4:	orr	r2, r2, #540672	; 0x84000
   14bd8:	orr	r2, r2, #2304	; 0x900
   14bdc:	beq	14c80 <__assert_fail@plt+0x3ad4>
   14be0:	movw	r1, #52448	; 0xcce0
   14be4:	movt	r1, #1
   14be8:	ldr	r0, [r8, #32]
   14bec:	bl	16c90 <__assert_fail@plt+0x5ae4>
   14bf0:	cmp	r0, #0
   14bf4:	str	r0, [r4, #36]	; 0x24
   14bf8:	blt	14c94 <__assert_fail@plt+0x3ae8>
   14bfc:	ldrh	r2, [r4, #58]	; 0x3a
   14c00:	ldrh	r3, [r4, #56]	; 0x38
   14c04:	orr	r2, r2, #2
   14c08:	strh	r2, [r4, #58]	; 0x3a
   14c0c:	b	148b4 <__assert_fail@plt+0x3708>
   14c10:	ldr	r3, [r8, #48]	; 0x30
   14c14:	tst	r3, #4
   14c18:	bne	14b30 <__assert_fail@plt+0x3984>
   14c1c:	lsl	r2, r3, #11
   14c20:	tst	r3, #512	; 0x200
   14c24:	and	r2, r2, #32768	; 0x8000
   14c28:	orr	r2, r2, #540672	; 0x84000
   14c2c:	orr	r2, r2, #2304	; 0x900
   14c30:	beq	14cb0 <__assert_fail@plt+0x3b04>
   14c34:	movw	r1, #52448	; 0xcce0
   14c38:	movt	r1, #1
   14c3c:	ldr	r0, [r8, #32]
   14c40:	bl	16c90 <__assert_fail@plt+0x5ae4>
   14c44:	cmp	r0, #0
   14c48:	str	r0, [r5, #36]	; 0x24
   14c4c:	blt	14cc4 <__assert_fail@plt+0x3b18>
   14c50:	ldrh	r3, [r5, #58]	; 0x3a
   14c54:	orr	r3, r3, #2
   14c58:	strh	r3, [r5, #58]	; 0x3a
   14c5c:	b	14b30 <__assert_fail@plt+0x3984>
   14c60:	bl	11068 <__errno_location@plt>
   14c64:	ldr	r3, [r8, #48]	; 0x30
   14c68:	ldr	r2, [r0]
   14c6c:	ldr	r4, [r6, #36]	; 0x24
   14c70:	orr	r3, r3, #8192	; 0x2000
   14c74:	str	r2, [r6, #32]
   14c78:	str	r3, [r8, #48]	; 0x30
   14c7c:	b	14608 <__assert_fail@plt+0x345c>
   14c80:	mov	r1, r2
   14c84:	movw	r0, #52448	; 0xcce0
   14c88:	movt	r0, #1
   14c8c:	bl	1bc08 <__assert_fail@plt+0xaa5c>
   14c90:	b	14bf0 <__assert_fail@plt+0x3a44>
   14c94:	bl	11068 <__errno_location@plt>
   14c98:	ldr	r3, [r0]
   14c9c:	mov	r2, #7
   14ca0:	str	r3, [r4, #32]
   14ca4:	strh	r2, [r4, #56]	; 0x38
   14ca8:	str	r4, [r8]
   14cac:	b	146f8 <__assert_fail@plt+0x354c>
   14cb0:	mov	r1, r2
   14cb4:	movw	r0, #52448	; 0xcce0
   14cb8:	movt	r0, #1
   14cbc:	bl	1bc08 <__assert_fail@plt+0xaa5c>
   14cc0:	b	14c44 <__assert_fail@plt+0x3a98>
   14cc4:	bl	11068 <__errno_location@plt>
   14cc8:	ldr	r3, [r0]
   14ccc:	mov	r2, #7
   14cd0:	str	r3, [r5, #32]
   14cd4:	strh	r2, [r5, #56]	; 0x38
   14cd8:	b	14b30 <__assert_fail@plt+0x3984>
   14cdc:	cmp	r2, #4
   14ce0:	bhi	14cf4 <__assert_fail@plt+0x3b48>
   14ce4:	mov	r3, #0
   14ce8:	strh	r2, [r1, #60]	; 0x3c
   14cec:	mov	r0, r3
   14cf0:	bx	lr
   14cf4:	str	r4, [sp, #-8]!
   14cf8:	str	lr, [sp, #4]
   14cfc:	bl	11068 <__errno_location@plt>
   14d00:	mov	r2, #22
   14d04:	mov	r3, #1
   14d08:	ldr	r4, [sp]
   14d0c:	add	sp, sp, #4
   14d10:	str	r2, [r0]
   14d14:	mov	r0, r3
   14d18:	pop	{pc}		; (ldr pc, [sp], #4)
   14d1c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14d20:	mov	r5, r0
   14d24:	strd	r6, [sp, #8]
   14d28:	strd	r8, [sp, #16]
   14d2c:	mov	r8, r1
   14d30:	str	sl, [sp, #24]
   14d34:	str	lr, [sp, #28]
   14d38:	bl	11068 <__errno_location@plt>
   14d3c:	bics	r2, r8, #4096	; 0x1000
   14d40:	mov	r6, r0
   14d44:	movne	r3, #22
   14d48:	movne	r0, #0
   14d4c:	strne	r3, [r6]
   14d50:	bne	14e18 <__assert_fail@plt+0x3c6c>
   14d54:	ldr	r9, [r5]
   14d58:	str	r2, [r6]
   14d5c:	ldr	r3, [r5, #48]	; 0x30
   14d60:	ands	r0, r3, #8192	; 0x2000
   14d64:	bne	14ec8 <__assert_fail@plt+0x3d1c>
   14d68:	ldrh	r3, [r9, #56]	; 0x38
   14d6c:	cmp	r3, #9
   14d70:	beq	14ed0 <__assert_fail@plt+0x3d24>
   14d74:	cmp	r3, #1
   14d78:	bne	14e18 <__assert_fail@plt+0x3c6c>
   14d7c:	ldr	r4, [r5, #4]
   14d80:	cmp	r4, #0
   14d84:	bne	14da4 <__assert_fail@plt+0x3bf8>
   14d88:	b	14dc4 <__assert_fail@plt+0x3c18>
   14d8c:	bl	111a0 <closedir@plt>
   14d90:	mov	r0, r4
   14d94:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14d98:	cmp	r7, #0
   14d9c:	beq	14dc4 <__assert_fail@plt+0x3c18>
   14da0:	mov	r4, r7
   14da4:	ldr	r7, [r4, #8]
   14da8:	ldr	r0, [r4, #12]
   14dac:	cmp	r0, #0
   14db0:	bne	14d8c <__assert_fail@plt+0x3be0>
   14db4:	mov	r0, r4
   14db8:	bl	1bca8 <__assert_fail@plt+0xaafc>
   14dbc:	cmp	r7, #0
   14dc0:	bne	14da0 <__assert_fail@plt+0x3bf4>
   14dc4:	cmp	r8, #4096	; 0x1000
   14dc8:	movne	r4, #1
   14dcc:	bne	14de0 <__assert_fail@plt+0x3c34>
   14dd0:	ldr	r3, [r5, #48]	; 0x30
   14dd4:	mov	r4, #2
   14dd8:	orr	r3, r3, #4096	; 0x1000
   14ddc:	str	r3, [r5, #48]	; 0x30
   14de0:	ldr	r3, [r9, #48]	; 0x30
   14de4:	cmp	r3, #0
   14de8:	bne	14e08 <__assert_fail@plt+0x3c5c>
   14dec:	ldr	r3, [r9, #24]
   14df0:	ldrb	r3, [r3]
   14df4:	cmp	r3, #47	; 0x2f
   14df8:	beq	14e08 <__assert_fail@plt+0x3c5c>
   14dfc:	ldr	r3, [r5, #48]	; 0x30
   14e00:	tst	r3, #4
   14e04:	beq	14e30 <__assert_fail@plt+0x3c84>
   14e08:	mov	r1, r4
   14e0c:	mov	r0, r5
   14e10:	bl	131dc <__assert_fail@plt+0x2030>
   14e14:	str	r0, [r5, #4]
   14e18:	ldrd	r4, [sp]
   14e1c:	ldrd	r6, [sp, #8]
   14e20:	ldrd	r8, [sp, #16]
   14e24:	ldr	sl, [sp, #24]
   14e28:	add	sp, sp, #28
   14e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e30:	lsl	r2, r3, #11
   14e34:	tst	r3, #512	; 0x200
   14e38:	and	r2, r2, #32768	; 0x8000
   14e3c:	orr	r2, r2, #540672	; 0x84000
   14e40:	orr	r2, r2, #2304	; 0x900
   14e44:	beq	14ed8 <__assert_fail@plt+0x3d2c>
   14e48:	movw	r1, #52448	; 0xcce0
   14e4c:	movt	r1, #1
   14e50:	ldr	r0, [r5, #32]
   14e54:	bl	16c90 <__assert_fail@plt+0x5ae4>
   14e58:	mov	r7, r0
   14e5c:	cmp	r7, #0
   14e60:	movlt	r3, #0
   14e64:	movlt	r0, r3
   14e68:	strlt	r3, [r5, #4]
   14e6c:	blt	14e18 <__assert_fail@plt+0x3c6c>
   14e70:	mov	r1, r4
   14e74:	mov	r0, r5
   14e78:	bl	131dc <__assert_fail@plt+0x2030>
   14e7c:	ldr	r3, [r5, #48]	; 0x30
   14e80:	str	r0, [r5, #4]
   14e84:	ands	r4, r3, #512	; 0x200
   14e88:	beq	14ef0 <__assert_fail@plt+0x3d44>
   14e8c:	ldr	r1, [r5, #32]
   14e90:	sub	r3, r7, r1
   14e94:	cmn	r1, #100	; 0x64
   14e98:	clz	r3, r3
   14e9c:	lsr	r3, r3, #5
   14ea0:	moveq	r3, #0
   14ea4:	cmp	r3, #0
   14ea8:	bne	14f28 <__assert_fail@plt+0x3d7c>
   14eac:	add	r0, r5, #60	; 0x3c
   14eb0:	bl	1666c <__assert_fail@plt+0x54c0>
   14eb4:	cmp	r0, #0
   14eb8:	blt	14ec0 <__assert_fail@plt+0x3d14>
   14ebc:	bl	11188 <close@plt>
   14ec0:	str	r7, [r5, #32]
   14ec4:	b	14f08 <__assert_fail@plt+0x3d5c>
   14ec8:	mov	r0, r2
   14ecc:	b	14e18 <__assert_fail@plt+0x3c6c>
   14ed0:	ldr	r0, [r9, #8]
   14ed4:	b	14e18 <__assert_fail@plt+0x3c6c>
   14ed8:	mov	r1, r2
   14edc:	movw	r0, #52448	; 0xcce0
   14ee0:	movt	r0, #1
   14ee4:	bl	1bc08 <__assert_fail@plt+0xaa5c>
   14ee8:	mov	r7, r0
   14eec:	b	14e5c <__assert_fail@plt+0x3cb0>
   14ef0:	mov	r0, r7
   14ef4:	bl	11128 <fchdir@plt>
   14ef8:	cmp	r0, #0
   14efc:	bne	14f10 <__assert_fail@plt+0x3d64>
   14f00:	mov	r0, r7
   14f04:	bl	11188 <close@plt>
   14f08:	ldr	r0, [r5, #4]
   14f0c:	b	14e18 <__assert_fail@plt+0x3c6c>
   14f10:	ldr	r5, [r6]
   14f14:	mov	r0, r7
   14f18:	bl	11188 <close@plt>
   14f1c:	mov	r0, r4
   14f20:	str	r5, [r6]
   14f24:	b	14e18 <__assert_fail@plt+0x3c6c>
   14f28:	bl	1117c <abort@plt>
   14f2c:	andeq	r0, r0, r0
   14f30:	ror	r0, r0, #3
   14f34:	udiv	r3, r0, r1
   14f38:	mls	r0, r3, r1, r0
   14f3c:	bx	lr
   14f40:	sub	r0, r1, r0
   14f44:	clz	r0, r0
   14f48:	lsr	r0, r0, #5
   14f4c:	bx	lr
   14f50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f54:	mov	r5, r1
   14f58:	strd	r6, [sp, #8]
   14f5c:	mov	r6, r0
   14f60:	mov	r7, r3
   14f64:	mov	r0, r1
   14f68:	strd	r8, [sp, #16]
   14f6c:	strd	sl, [sp, #24]
   14f70:	mov	fp, r2
   14f74:	str	lr, [sp, #32]
   14f78:	sub	sp, sp, #4
   14f7c:	ldr	r1, [r6, #8]
   14f80:	ldr	r3, [r6, #24]
   14f84:	blx	r3
   14f88:	ldr	r3, [r6, #8]
   14f8c:	cmp	r0, r3
   14f90:	bcs	150ac <__assert_fail@plt+0x3f00>
   14f94:	ldr	r8, [r6]
   14f98:	lsl	r9, r0, #3
   14f9c:	mov	sl, r0
   14fa0:	add	r4, r8, r9
   14fa4:	str	r4, [fp]
   14fa8:	ldr	r1, [r8, r0, lsl #3]
   14fac:	cmp	r1, #0
   14fb0:	beq	150a4 <__assert_fail@plt+0x3ef8>
   14fb4:	cmp	r1, r5
   14fb8:	beq	1506c <__assert_fail@plt+0x3ec0>
   14fbc:	mov	r0, r5
   14fc0:	ldr	r3, [r6, #28]
   14fc4:	blx	r3
   14fc8:	cmp	r0, #0
   14fcc:	bne	15068 <__assert_fail@plt+0x3ebc>
   14fd0:	ldr	r3, [r4, #4]
   14fd4:	cmp	r3, #0
   14fd8:	beq	150a4 <__assert_fail@plt+0x3ef8>
   14fdc:	ldr	r1, [r3]
   14fe0:	cmp	r5, r1
   14fe4:	bne	15008 <__assert_fail@plt+0x3e5c>
   14fe8:	b	15024 <__assert_fail@plt+0x3e78>
   14fec:	ldr	r4, [r4, #4]
   14ff0:	ldr	r3, [r4, #4]
   14ff4:	cmp	r3, #0
   14ff8:	beq	150a4 <__assert_fail@plt+0x3ef8>
   14ffc:	ldr	r1, [r3]
   15000:	cmp	r1, r5
   15004:	beq	15024 <__assert_fail@plt+0x3e78>
   15008:	mov	r0, r5
   1500c:	ldr	r3, [r6, #28]
   15010:	blx	r3
   15014:	cmp	r0, #0
   15018:	beq	14fec <__assert_fail@plt+0x3e40>
   1501c:	ldr	r3, [r4, #4]
   15020:	ldr	r1, [r3]
   15024:	cmp	r7, #0
   15028:	beq	15048 <__assert_fail@plt+0x3e9c>
   1502c:	ldr	r0, [r3, #4]
   15030:	mov	r2, #0
   15034:	str	r0, [r4, #4]
   15038:	str	r2, [r3]
   1503c:	ldr	r2, [r6, #36]	; 0x24
   15040:	str	r2, [r3, #4]
   15044:	str	r3, [r6, #36]	; 0x24
   15048:	mov	r0, r1
   1504c:	add	sp, sp, #4
   15050:	ldrd	r4, [sp]
   15054:	ldrd	r6, [sp, #8]
   15058:	ldrd	r8, [sp, #16]
   1505c:	ldrd	sl, [sp, #24]
   15060:	add	sp, sp, #32
   15064:	pop	{pc}		; (ldr pc, [sp], #4)
   15068:	ldr	r1, [r8, sl, lsl #3]
   1506c:	cmp	r7, #0
   15070:	beq	15048 <__assert_fail@plt+0x3e9c>
   15074:	ldr	r0, [r4, #4]
   15078:	cmp	r0, #0
   1507c:	streq	r0, [r8, sl, lsl #3]
   15080:	beq	15048 <__assert_fail@plt+0x3e9c>
   15084:	ldrd	r2, [r0]
   15088:	mov	ip, #0
   1508c:	strd	r2, [r8, r9]
   15090:	str	ip, [r0]
   15094:	ldr	r3, [r6, #36]	; 0x24
   15098:	str	r3, [r0, #4]
   1509c:	str	r0, [r6, #36]	; 0x24
   150a0:	b	15048 <__assert_fail@plt+0x3e9c>
   150a4:	mov	r1, #0
   150a8:	b	15048 <__assert_fail@plt+0x3e9c>
   150ac:	bl	1117c <abort@plt>
   150b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   150b4:	ldr	r3, [r1, #4]
   150b8:	strd	r6, [sp, #8]
   150bc:	ldr	r6, [r1]
   150c0:	strd	r8, [sp, #16]
   150c4:	str	sl, [sp, #24]
   150c8:	str	lr, [sp, #28]
   150cc:	cmp	r6, r3
   150d0:	bcs	151b0 <__assert_fail@plt+0x4004>
   150d4:	mov	r8, r2
   150d8:	mov	r5, r0
   150dc:	mov	r7, r1
   150e0:	add	r6, r6, #8
   150e4:	mov	r9, #0
   150e8:	b	150f8 <__assert_fail@plt+0x3f4c>
   150ec:	cmp	r3, r6
   150f0:	add	r6, r6, #8
   150f4:	bls	151b0 <__assert_fail@plt+0x4004>
   150f8:	ldr	sl, [r6, #-8]
   150fc:	cmp	sl, #0
   15100:	beq	150ec <__assert_fail@plt+0x3f40>
   15104:	ldr	r4, [r6, #-4]
   15108:	cmp	r4, #0
   1510c:	beq	15194 <__assert_fail@plt+0x3fe8>
   15110:	ldr	r1, [r5, #8]
   15114:	b	15130 <__assert_fail@plt+0x3f84>
   15118:	ldr	r3, [ip, #4]
   1511c:	cmp	r2, #0
   15120:	str	r3, [r4, #4]
   15124:	str	r4, [ip, #4]
   15128:	mov	r4, r2
   1512c:	beq	15190 <__assert_fail@plt+0x3fe4>
   15130:	ldr	sl, [r4]
   15134:	ldr	r3, [r5, #24]
   15138:	mov	r0, sl
   1513c:	blx	r3
   15140:	ldr	r1, [r5, #8]
   15144:	cmp	r0, r1
   15148:	bcs	15264 <__assert_fail@plt+0x40b8>
   1514c:	ldr	r3, [r5]
   15150:	ldr	r2, [r4, #4]
   15154:	ldr	lr, [r3, r0, lsl #3]
   15158:	add	ip, r3, r0, lsl #3
   1515c:	cmp	lr, #0
   15160:	bne	15118 <__assert_fail@plt+0x3f6c>
   15164:	ldr	ip, [r5, #12]
   15168:	cmp	r2, #0
   1516c:	str	sl, [r3, r0, lsl #3]
   15170:	add	ip, ip, #1
   15174:	str	ip, [r5, #12]
   15178:	str	lr, [r4]
   1517c:	ldr	r3, [r5, #36]	; 0x24
   15180:	str	r3, [r4, #4]
   15184:	str	r4, [r5, #36]	; 0x24
   15188:	mov	r4, r2
   1518c:	bne	15130 <__assert_fail@plt+0x3f84>
   15190:	ldr	sl, [r6, #-8]
   15194:	cmp	r8, #0
   15198:	str	r9, [r6, #-4]
   1519c:	beq	151cc <__assert_fail@plt+0x4020>
   151a0:	ldr	r3, [r7, #4]
   151a4:	cmp	r3, r6
   151a8:	add	r6, r6, #8
   151ac:	bhi	150f8 <__assert_fail@plt+0x3f4c>
   151b0:	mov	r0, #1
   151b4:	ldrd	r4, [sp]
   151b8:	ldrd	r6, [sp, #8]
   151bc:	ldrd	r8, [sp, #16]
   151c0:	ldr	sl, [sp, #24]
   151c4:	add	sp, sp, #28
   151c8:	pop	{pc}		; (ldr pc, [sp], #4)
   151cc:	mov	r0, sl
   151d0:	ldr	r1, [r5, #8]
   151d4:	ldr	r3, [r5, #24]
   151d8:	blx	r3
   151dc:	ldr	r3, [r5, #8]
   151e0:	cmp	r0, r3
   151e4:	bcs	15264 <__assert_fail@plt+0x40b8>
   151e8:	ldr	r3, [r5]
   151ec:	ldr	r2, [r3, r0, lsl #3]
   151f0:	add	r4, r3, r0, lsl #3
   151f4:	cmp	r2, #0
   151f8:	beq	15238 <__assert_fail@plt+0x408c>
   151fc:	ldr	r0, [r5, #36]	; 0x24
   15200:	cmp	r0, #0
   15204:	beq	1524c <__assert_fail@plt+0x40a0>
   15208:	ldr	r3, [r0, #4]
   1520c:	str	r3, [r5, #36]	; 0x24
   15210:	ldr	r3, [r4, #4]
   15214:	str	sl, [r0]
   15218:	str	r3, [r0, #4]
   1521c:	str	r0, [r4, #4]
   15220:	ldr	r2, [r7, #12]
   15224:	str	r9, [r6, #-8]
   15228:	ldr	r3, [r7, #4]
   1522c:	sub	r2, r2, #1
   15230:	str	r2, [r7, #12]
   15234:	b	150ec <__assert_fail@plt+0x3f40>
   15238:	ldr	r2, [r5, #12]
   1523c:	str	sl, [r3, r0, lsl #3]
   15240:	add	r2, r2, #1
   15244:	str	r2, [r5, #12]
   15248:	b	15220 <__assert_fail@plt+0x4074>
   1524c:	mov	r0, #8
   15250:	bl	1b730 <__assert_fail@plt+0xa584>
   15254:	cmp	r0, #0
   15258:	bne	15210 <__assert_fail@plt+0x4064>
   1525c:	mov	r0, r8
   15260:	b	151b4 <__assert_fail@plt+0x4008>
   15264:	bl	1117c <abort@plt>
   15268:	ldr	r0, [r0, #8]
   1526c:	bx	lr
   15270:	ldr	r0, [r0, #12]
   15274:	bx	lr
   15278:	ldr	r0, [r0, #16]
   1527c:	bx	lr
   15280:	ldm	r0, {r1, r3}
   15284:	cmp	r1, r3
   15288:	bcs	152fc <__assert_fail@plt+0x4150>
   1528c:	sub	ip, r3, #1
   15290:	add	r3, r1, #16
   15294:	sub	ip, ip, r1
   15298:	mov	r0, #0
   1529c:	bic	ip, ip, #7
   152a0:	add	r1, r1, #8
   152a4:	add	ip, ip, r3
   152a8:	b	152b8 <__assert_fail@plt+0x410c>
   152ac:	add	r1, r1, #8
   152b0:	cmp	r1, ip
   152b4:	beq	152f8 <__assert_fail@plt+0x414c>
   152b8:	ldr	r3, [r1, #-8]
   152bc:	cmp	r3, #0
   152c0:	beq	152ac <__assert_fail@plt+0x4100>
   152c4:	ldr	r3, [r1, #-4]
   152c8:	mov	r2, #1
   152cc:	cmp	r3, #0
   152d0:	beq	152e4 <__assert_fail@plt+0x4138>
   152d4:	ldr	r3, [r3, #4]
   152d8:	add	r2, r2, #1
   152dc:	cmp	r3, #0
   152e0:	bne	152d4 <__assert_fail@plt+0x4128>
   152e4:	cmp	r0, r2
   152e8:	add	r1, r1, #8
   152ec:	movcc	r0, r2
   152f0:	cmp	r1, ip
   152f4:	bne	152b8 <__assert_fail@plt+0x410c>
   152f8:	bx	lr
   152fc:	mov	r0, #0
   15300:	bx	lr
   15304:	ldm	r0, {r1, r3}
   15308:	push	{lr}		; (str lr, [sp, #-4]!)
   1530c:	cmp	r1, r3
   15310:	bcs	153a4 <__assert_fail@plt+0x41f8>
   15314:	sub	ip, r3, #1
   15318:	mov	r2, #0
   1531c:	sub	ip, ip, r1
   15320:	add	r3, r1, #16
   15324:	bic	ip, ip, #7
   15328:	add	r1, r1, #8
   1532c:	add	ip, ip, r3
   15330:	mov	lr, r2
   15334:	b	15344 <__assert_fail@plt+0x4198>
   15338:	add	r1, r1, #8
   1533c:	cmp	r1, ip
   15340:	beq	15380 <__assert_fail@plt+0x41d4>
   15344:	ldr	r3, [r1, #-8]
   15348:	cmp	r3, #0
   1534c:	beq	15338 <__assert_fail@plt+0x418c>
   15350:	ldr	r3, [r1, #-4]
   15354:	add	lr, lr, #1
   15358:	add	r2, r2, #1
   1535c:	cmp	r3, #0
   15360:	beq	15338 <__assert_fail@plt+0x418c>
   15364:	ldr	r3, [r3, #4]
   15368:	add	r2, r2, #1
   1536c:	cmp	r3, #0
   15370:	bne	15364 <__assert_fail@plt+0x41b8>
   15374:	add	r1, r1, #8
   15378:	cmp	r1, ip
   1537c:	bne	15344 <__assert_fail@plt+0x4198>
   15380:	ldr	r3, [r0, #12]
   15384:	cmp	r3, lr
   15388:	movne	r0, #0
   1538c:	bne	153a0 <__assert_fail@plt+0x41f4>
   15390:	ldr	r0, [r0, #16]
   15394:	sub	r0, r0, r2
   15398:	clz	r0, r0
   1539c:	lsr	r0, r0, #5
   153a0:	pop	{pc}		; (ldr pc, [sp], #4)
   153a4:	mov	r2, #0
   153a8:	mov	lr, r2
   153ac:	b	15380 <__assert_fail@plt+0x41d4>
   153b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   153b4:	mov	r4, r1
   153b8:	ldr	r2, [r0]
   153bc:	ldr	r1, [r0, #4]
   153c0:	ldr	r3, [r0, #16]
   153c4:	strd	r6, [sp, #8]
   153c8:	str	lr, [sp, #16]
   153cc:	sub	sp, sp, #12
   153d0:	cmp	r2, r1
   153d4:	ldrd	r6, [r0, #8]
   153d8:	bcs	154d8 <__assert_fail@plt+0x432c>
   153dc:	sub	ip, r1, #1
   153e0:	add	r1, r2, #16
   153e4:	sub	ip, ip, r2
   153e8:	add	r0, r2, #8
   153ec:	bic	ip, ip, #7
   153f0:	mov	r5, #0
   153f4:	add	ip, ip, r1
   153f8:	b	15408 <__assert_fail@plt+0x425c>
   153fc:	add	r0, r0, #8
   15400:	cmp	r0, ip
   15404:	beq	15448 <__assert_fail@plt+0x429c>
   15408:	ldr	r2, [r0, #-8]
   1540c:	cmp	r2, #0
   15410:	beq	153fc <__assert_fail@plt+0x4250>
   15414:	ldr	r2, [r0, #-4]
   15418:	mov	r1, #1
   1541c:	cmp	r2, #0
   15420:	beq	15434 <__assert_fail@plt+0x4288>
   15424:	ldr	r2, [r2, #4]
   15428:	add	r1, r1, #1
   1542c:	cmp	r2, #0
   15430:	bne	15424 <__assert_fail@plt+0x4278>
   15434:	cmp	r5, r1
   15438:	add	r0, r0, #8
   1543c:	movcc	r5, r1
   15440:	cmp	r0, ip
   15444:	bne	15408 <__assert_fail@plt+0x425c>
   15448:	mov	r1, #1
   1544c:	mov	r0, r4
   15450:	movw	r2, #52472	; 0xccf8
   15454:	movt	r2, #1
   15458:	bl	110b0 <__fprintf_chk@plt>
   1545c:	mov	r3, r6
   15460:	mov	r1, #1
   15464:	mov	r0, r4
   15468:	movw	r2, #52496	; 0xcd10
   1546c:	movt	r2, #1
   15470:	bl	110b0 <__fprintf_chk@plt>
   15474:	vmov	s15, r7
   15478:	mov	r3, r7
   1547c:	mov	r1, #1
   15480:	vldr	d5, [pc, #88]	; 154e0 <__assert_fail@plt+0x4334>
   15484:	mov	r0, r4
   15488:	movw	r2, #52520	; 0xcd28
   1548c:	movt	r2, #1
   15490:	vcvt.f64.u32	d6, s15
   15494:	vmov	s15, r6
   15498:	vmul.f64	d6, d6, d5
   1549c:	vcvt.f64.u32	d7, s15
   154a0:	vdiv.f64	d5, d6, d7
   154a4:	vstr	d5, [sp]
   154a8:	bl	110b0 <__fprintf_chk@plt>
   154ac:	mov	r3, r5
   154b0:	mov	r0, r4
   154b4:	movw	r2, #52556	; 0xcd4c
   154b8:	movt	r2, #1
   154bc:	mov	r1, #1
   154c0:	add	sp, sp, #12
   154c4:	ldrd	r4, [sp]
   154c8:	ldrd	r6, [sp, #8]
   154cc:	ldr	lr, [sp, #16]
   154d0:	add	sp, sp, #20
   154d4:	b	110b0 <__fprintf_chk@plt>
   154d8:	mov	r5, #0
   154dc:	b	15448 <__assert_fail@plt+0x429c>
   154e0:	andeq	r0, r0, r0
   154e4:	subsmi	r0, r9, r0
   154e8:	strd	r4, [sp, #-16]!
   154ec:	mov	r5, r1
   154f0:	str	r6, [sp, #8]
   154f4:	mov	r6, r0
   154f8:	mov	r0, r1
   154fc:	str	lr, [sp, #12]
   15500:	ldr	r1, [r6, #8]
   15504:	ldr	r3, [r6, #24]
   15508:	blx	r3
   1550c:	ldr	r3, [r6, #8]
   15510:	cmp	r0, r3
   15514:	bcs	15584 <__assert_fail@plt+0x43d8>
   15518:	ldr	r4, [r6]
   1551c:	ldr	r1, [r4, r0, lsl #3]
   15520:	add	r4, r4, r0, lsl #3
   15524:	cmp	r1, #0
   15528:	beq	15564 <__assert_fail@plt+0x43b8>
   1552c:	cmp	r1, r5
   15530:	bne	15544 <__assert_fail@plt+0x4398>
   15534:	b	15568 <__assert_fail@plt+0x43bc>
   15538:	ldr	r1, [r4]
   1553c:	cmp	r5, r1
   15540:	beq	15568 <__assert_fail@plt+0x43bc>
   15544:	mov	r0, r5
   15548:	ldr	r3, [r6, #28]
   1554c:	blx	r3
   15550:	cmp	r0, #0
   15554:	bne	1557c <__assert_fail@plt+0x43d0>
   15558:	ldr	r4, [r4, #4]
   1555c:	cmp	r4, #0
   15560:	bne	15538 <__assert_fail@plt+0x438c>
   15564:	mov	r1, #0
   15568:	ldrd	r4, [sp]
   1556c:	mov	r0, r1
   15570:	ldr	r6, [sp, #8]
   15574:	add	sp, sp, #12
   15578:	pop	{pc}		; (ldr pc, [sp], #4)
   1557c:	ldr	r1, [r4]
   15580:	b	15568 <__assert_fail@plt+0x43bc>
   15584:	bl	1117c <abort@plt>
   15588:	ldr	r3, [r0, #16]
   1558c:	cmp	r3, #0
   15590:	beq	155e4 <__assert_fail@plt+0x4438>
   15594:	ldr	r3, [r0]
   15598:	ldr	r2, [r0, #4]
   1559c:	cmp	r3, r2
   155a0:	bcs	155d8 <__assert_fail@plt+0x442c>
   155a4:	ldr	r0, [r3]
   155a8:	cmp	r0, #0
   155ac:	bxne	lr
   155b0:	sub	r2, r2, #1
   155b4:	sub	r2, r2, r3
   155b8:	bic	r2, r2, #7
   155bc:	add	r2, r3, r2
   155c0:	b	155d0 <__assert_fail@plt+0x4424>
   155c4:	ldr	r0, [r3, #8]!
   155c8:	cmp	r0, #0
   155cc:	bxne	lr
   155d0:	cmp	r3, r2
   155d4:	bne	155c4 <__assert_fail@plt+0x4418>
   155d8:	str	r4, [sp, #-8]!
   155dc:	str	lr, [sp, #4]
   155e0:	bl	1117c <abort@plt>
   155e4:	mov	r0, r3
   155e8:	bx	lr
   155ec:	strd	r4, [sp, #-16]!
   155f0:	mov	r5, r0
   155f4:	mov	r4, r1
   155f8:	mov	r0, r1
   155fc:	ldr	r1, [r5, #8]
   15600:	ldr	r3, [r5, #24]
   15604:	str	r6, [sp, #8]
   15608:	str	lr, [sp, #12]
   1560c:	blx	r3
   15610:	ldr	r3, [r5, #8]
   15614:	cmp	r0, r3
   15618:	bcs	15680 <__assert_fail@plt+0x44d4>
   1561c:	ldr	r2, [r5]
   15620:	add	r2, r2, r0, lsl #3
   15624:	mov	r3, r2
   15628:	b	15634 <__assert_fail@plt+0x4488>
   1562c:	cmp	r3, #0
   15630:	beq	1564c <__assert_fail@plt+0x44a0>
   15634:	ldm	r3, {r1, r3}
   15638:	cmp	r1, r4
   1563c:	bne	1562c <__assert_fail@plt+0x4480>
   15640:	cmp	r3, #0
   15644:	ldrne	r0, [r3]
   15648:	bne	15670 <__assert_fail@plt+0x44c4>
   1564c:	ldr	r3, [r5, #4]
   15650:	b	15660 <__assert_fail@plt+0x44b4>
   15654:	ldr	r0, [r2]
   15658:	cmp	r0, #0
   1565c:	bne	15670 <__assert_fail@plt+0x44c4>
   15660:	add	r2, r2, #8
   15664:	cmp	r3, r2
   15668:	bhi	15654 <__assert_fail@plt+0x44a8>
   1566c:	mov	r0, #0
   15670:	ldrd	r4, [sp]
   15674:	ldr	r6, [sp, #8]
   15678:	add	sp, sp, #12
   1567c:	pop	{pc}		; (ldr pc, [sp], #4)
   15680:	bl	1117c <abort@plt>
   15684:	strd	r4, [sp, #-16]!
   15688:	mov	r3, #0
   1568c:	ldr	r5, [r0]
   15690:	str	r6, [sp, #8]
   15694:	str	lr, [sp, #12]
   15698:	ldr	lr, [r0, #4]
   1569c:	cmp	lr, r5
   156a0:	bls	156bc <__assert_fail@plt+0x4510>
   156a4:	ldr	ip, [r5]
   156a8:	cmp	ip, #0
   156ac:	bne	156d0 <__assert_fail@plt+0x4524>
   156b0:	add	r5, r5, #8
   156b4:	cmp	r5, lr
   156b8:	bcc	156a4 <__assert_fail@plt+0x44f8>
   156bc:	ldrd	r4, [sp]
   156c0:	mov	r0, r3
   156c4:	ldr	r6, [sp, #8]
   156c8:	add	sp, sp, #12
   156cc:	pop	{pc}		; (ldr pc, [sp], #4)
   156d0:	cmp	r2, r3
   156d4:	bls	156bc <__assert_fail@plt+0x4510>
   156d8:	str	ip, [r1, r3, lsl #2]
   156dc:	add	r4, r3, #1
   156e0:	lsl	lr, r3, #2
   156e4:	ldr	ip, [r5, #4]
   156e8:	cmp	ip, #0
   156ec:	beq	1574c <__assert_fail@plt+0x45a0>
   156f0:	cmp	r2, r4
   156f4:	bls	15740 <__assert_fail@plt+0x4594>
   156f8:	ldr	r6, [ip]
   156fc:	add	r3, r3, #2
   15700:	str	r6, [r1, r4, lsl #2]
   15704:	ldr	ip, [ip, #4]
   15708:	cmp	ip, #0
   1570c:	beq	15738 <__assert_fail@plt+0x458c>
   15710:	add	lr, lr, #4
   15714:	add	lr, r1, lr
   15718:	cmp	r2, r3
   1571c:	add	r3, r3, #1
   15720:	beq	15744 <__assert_fail@plt+0x4598>
   15724:	ldr	r4, [ip]
   15728:	str	r4, [lr, #4]!
   1572c:	ldr	ip, [ip, #4]
   15730:	cmp	ip, #0
   15734:	bne	15718 <__assert_fail@plt+0x456c>
   15738:	ldr	lr, [r0, #4]
   1573c:	b	156b0 <__assert_fail@plt+0x4504>
   15740:	mov	r2, r4
   15744:	mov	r3, r2
   15748:	b	156bc <__assert_fail@plt+0x4510>
   1574c:	mov	r3, r4
   15750:	ldr	lr, [r0, #4]
   15754:	b	156b0 <__assert_fail@plt+0x4504>
   15758:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1575c:	ldr	r3, [r0, #4]
   15760:	strd	r6, [sp, #8]
   15764:	strd	r8, [sp, #16]
   15768:	ldr	r8, [r0]
   1576c:	str	sl, [sp, #24]
   15770:	str	lr, [sp, #28]
   15774:	cmp	r3, r8
   15778:	bls	157f4 <__assert_fail@plt+0x4648>
   1577c:	mov	r7, r2
   15780:	mov	r6, r1
   15784:	mov	r9, r0
   15788:	mov	r5, #0
   1578c:	ldr	r0, [r8]
   15790:	cmp	r0, #0
   15794:	bne	157c0 <__assert_fail@plt+0x4614>
   15798:	add	r8, r8, #8
   1579c:	cmp	r8, r3
   157a0:	bcc	1578c <__assert_fail@plt+0x45e0>
   157a4:	mov	r0, r5
   157a8:	ldrd	r4, [sp]
   157ac:	ldrd	r6, [sp, #8]
   157b0:	ldrd	r8, [sp, #16]
   157b4:	ldr	sl, [sp, #24]
   157b8:	add	sp, sp, #28
   157bc:	pop	{pc}		; (ldr pc, [sp], #4)
   157c0:	mov	r4, r8
   157c4:	b	157cc <__assert_fail@plt+0x4620>
   157c8:	ldr	r0, [r4]
   157cc:	mov	r1, r7
   157d0:	blx	r6
   157d4:	cmp	r0, #0
   157d8:	beq	157a4 <__assert_fail@plt+0x45f8>
   157dc:	ldr	r4, [r4, #4]
   157e0:	add	r5, r5, #1
   157e4:	cmp	r4, #0
   157e8:	bne	157c8 <__assert_fail@plt+0x461c>
   157ec:	ldr	r3, [r9, #4]
   157f0:	b	15798 <__assert_fail@plt+0x45ec>
   157f4:	mov	r5, #0
   157f8:	b	157a4 <__assert_fail@plt+0x45f8>
   157fc:	ldrb	r2, [r0]
   15800:	cmp	r2, #0
   15804:	beq	15830 <__assert_fail@plt+0x4684>
   15808:	mov	r3, #0
   1580c:	rsb	r3, r3, r3, lsl #5
   15810:	add	r3, r3, r2
   15814:	ldrb	r2, [r0, #1]!
   15818:	udiv	ip, r3, r1
   1581c:	cmp	r2, #0
   15820:	mls	r3, r1, ip, r3
   15824:	bne	1580c <__assert_fail@plt+0x4660>
   15828:	mov	r0, r3
   1582c:	bx	lr
   15830:	mov	r3, r2
   15834:	mov	r0, r3
   15838:	bx	lr
   1583c:	movw	r3, #52452	; 0xcce4
   15840:	movt	r3, #1
   15844:	strd	r4, [sp, #-8]!
   15848:	ldrd	r4, [r3]
   1584c:	ldr	r1, [r3, #16]
   15850:	ldrd	r2, [r3, #8]
   15854:	strd	r4, [r0]
   15858:	ldrd	r4, [sp]
   1585c:	add	sp, sp, #8
   15860:	strd	r2, [r0, #8]
   15864:	str	r1, [r0, #16]
   15868:	bx	lr
   1586c:	cmp	r2, #0
   15870:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15874:	movw	r4, #20272	; 0x4f30
   15878:	movt	r4, #1
   1587c:	movne	r4, r2
   15880:	strd	r6, [sp, #8]
   15884:	cmp	r3, #0
   15888:	str	r8, [sp, #16]
   1588c:	mov	r8, r0
   15890:	mov	r0, #40	; 0x28
   15894:	movw	r5, #20288	; 0x4f40
   15898:	movt	r5, #1
   1589c:	mov	r7, r1
   158a0:	str	lr, [sp, #20]
   158a4:	movne	r5, r3
   158a8:	bl	1b730 <__assert_fail@plt+0xa584>
   158ac:	subs	r6, r0, #0
   158b0:	beq	158f4 <__assert_fail@plt+0x4748>
   158b4:	cmp	r7, #0
   158b8:	movw	r3, #52452	; 0xcce4
   158bc:	movt	r3, #1
   158c0:	beq	15980 <__assert_fail@plt+0x47d4>
   158c4:	cmp	r7, r3
   158c8:	str	r7, [r6, #20]
   158cc:	beq	15984 <__assert_fail@plt+0x47d8>
   158d0:	vldr	s14, [pc, #456]	; 15aa0 <__assert_fail@plt+0x48f4>
   158d4:	vldr	s15, [r7, #8]
   158d8:	vcmpe.f32	s15, s14
   158dc:	vmrs	APSR_nzcv, fpscr
   158e0:	bgt	1590c <__assert_fail@plt+0x4760>
   158e4:	str	r3, [r6, #20]
   158e8:	mov	r0, r6
   158ec:	mov	r6, #0
   158f0:	bl	1bca8 <__assert_fail@plt+0xaafc>
   158f4:	mov	r0, r6
   158f8:	ldrd	r4, [sp]
   158fc:	ldrd	r6, [sp, #8]
   15900:	ldr	r8, [sp, #16]
   15904:	add	sp, sp, #20
   15908:	pop	{pc}		; (ldr pc, [sp], #4)
   1590c:	vldr	s13, [pc, #400]	; 15aa4 <__assert_fail@plt+0x48f8>
   15910:	vcmpe.f32	s15, s13
   15914:	vmrs	APSR_nzcv, fpscr
   15918:	bpl	158e4 <__assert_fail@plt+0x4738>
   1591c:	vldr	s13, [pc, #388]	; 15aa8 <__assert_fail@plt+0x48fc>
   15920:	vldr	s12, [r7, #12]
   15924:	vcmpe.f32	s12, s13
   15928:	vmrs	APSR_nzcv, fpscr
   1592c:	ble	158e4 <__assert_fail@plt+0x4738>
   15930:	vldr	s13, [r7]
   15934:	vcmpe.f32	s13, #0.0
   15938:	vmrs	APSR_nzcv, fpscr
   1593c:	blt	158e4 <__assert_fail@plt+0x4738>
   15940:	vadd.f32	s14, s13, s14
   15944:	vldr	s13, [r7, #4]
   15948:	vcmpe.f32	s14, s13
   1594c:	vmrs	APSR_nzcv, fpscr
   15950:	bpl	158e4 <__assert_fail@plt+0x4738>
   15954:	vldr	s12, [pc, #336]	; 15aac <__assert_fail@plt+0x4900>
   15958:	vcmpe.f32	s13, s12
   1595c:	vmrs	APSR_nzcv, fpscr
   15960:	bhi	158e4 <__assert_fail@plt+0x4738>
   15964:	vcmpe.f32	s15, s14
   15968:	vmrs	APSR_nzcv, fpscr
   1596c:	ble	158e4 <__assert_fail@plt+0x4738>
   15970:	ldrb	r3, [r7, #16]
   15974:	cmp	r3, #0
   15978:	bne	159ac <__assert_fail@plt+0x4800>
   1597c:	b	15988 <__assert_fail@plt+0x47dc>
   15980:	str	r3, [r6, #20]
   15984:	vldr	s15, [pc, #292]	; 15ab0 <__assert_fail@plt+0x4904>
   15988:	vmov	s14, r8
   1598c:	vldr	s13, [pc, #288]	; 15ab4 <__assert_fail@plt+0x4908>
   15990:	vcvt.f32.u32	s12, s14
   15994:	vdiv.f32	s14, s12, s15
   15998:	vcmpe.f32	s14, s13
   1599c:	vmrs	APSR_nzcv, fpscr
   159a0:	bge	15a34 <__assert_fail@plt+0x4888>
   159a4:	vcvt.u32.f32	s15, s14
   159a8:	vmov	r8, s15
   159ac:	cmp	r8, #10
   159b0:	movcs	r3, r8
   159b4:	movcc	r3, #10
   159b8:	orr	r3, r3, #1
   159bc:	cmn	r3, #1
   159c0:	beq	15a34 <__assert_fail@plt+0x4888>
   159c4:	movw	lr, #43691	; 0xaaab
   159c8:	movt	lr, #43690	; 0xaaaa
   159cc:	umull	r1, r2, lr, r3
   159d0:	cmp	r3, #9
   159d4:	lsr	r2, r2, #1
   159d8:	add	r2, r2, r2, lsl #1
   159dc:	sub	r2, r3, r2
   159e0:	bls	15a20 <__assert_fail@plt+0x4874>
   159e4:	cmp	r2, #0
   159e8:	beq	15a28 <__assert_fail@plt+0x487c>
   159ec:	mov	ip, #16
   159f0:	mov	r0, #9
   159f4:	mov	r1, #3
   159f8:	b	15a04 <__assert_fail@plt+0x4858>
   159fc:	cmp	r2, #0
   15a00:	beq	15a28 <__assert_fail@plt+0x487c>
   15a04:	add	r1, r1, #2
   15a08:	add	r0, r0, ip
   15a0c:	cmp	r0, r3
   15a10:	add	ip, ip, #8
   15a14:	udiv	r2, r3, r1
   15a18:	mls	r2, r1, r2, r3
   15a1c:	bcc	159fc <__assert_fail@plt+0x4850>
   15a20:	cmp	r2, #0
   15a24:	bne	15a40 <__assert_fail@plt+0x4894>
   15a28:	add	r3, r3, #2
   15a2c:	cmn	r3, #1
   15a30:	bne	159cc <__assert_fail@plt+0x4820>
   15a34:	mov	r3, #0
   15a38:	str	r3, [r6, #8]
   15a3c:	b	158e8 <__assert_fail@plt+0x473c>
   15a40:	lsrs	r2, r3, #30
   15a44:	movne	r7, #1
   15a48:	moveq	r7, #0
   15a4c:	tst	r3, #536870912	; 0x20000000
   15a50:	bne	15a34 <__assert_fail@plt+0x4888>
   15a54:	cmp	r7, #0
   15a58:	bne	15a34 <__assert_fail@plt+0x4888>
   15a5c:	mov	r0, r3
   15a60:	mov	r1, #8
   15a64:	str	r3, [r6, #8]
   15a68:	bl	1b6bc <__assert_fail@plt+0xa510>
   15a6c:	cmp	r0, #0
   15a70:	str	r0, [r6]
   15a74:	beq	158e8 <__assert_fail@plt+0x473c>
   15a78:	ldr	r3, [r6, #8]
   15a7c:	str	r7, [r6, #12]
   15a80:	str	r7, [r6, #16]
   15a84:	strd	r4, [r6, #24]
   15a88:	str	r7, [r6, #36]	; 0x24
   15a8c:	add	r0, r0, r3, lsl #3
   15a90:	ldr	r3, [sp, #24]
   15a94:	str	r0, [r6, #4]
   15a98:	str	r3, [r6, #32]
   15a9c:	b	158f4 <__assert_fail@plt+0x4748>
   15aa0:	stclcc	12, cr12, [ip, #820]	; 0x334
   15aa4:	svccc	0x00666666
   15aa8:	svccc	0x008ccccd
   15aac:	svccc	0x00800000
   15ab0:	svccc	0x004ccccd
   15ab4:	svcmi	0x00800000
   15ab8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15abc:	mov	r5, r0
   15ac0:	ldr	r2, [r0, #4]
   15ac4:	strd	r6, [sp, #8]
   15ac8:	ldr	r6, [r0]
   15acc:	str	r8, [sp, #16]
   15ad0:	str	lr, [sp, #20]
   15ad4:	cmp	r6, r2
   15ad8:	addcc	r6, r6, #8
   15adc:	movcc	r7, #0
   15ae0:	bcc	15af4 <__assert_fail@plt+0x4948>
   15ae4:	b	15b68 <__assert_fail@plt+0x49bc>
   15ae8:	cmp	r2, r6
   15aec:	add	r6, r6, #8
   15af0:	bls	15b68 <__assert_fail@plt+0x49bc>
   15af4:	ldr	r3, [r6, #-8]
   15af8:	cmp	r3, #0
   15afc:	beq	15ae8 <__assert_fail@plt+0x493c>
   15b00:	ldr	r4, [r6, #-4]
   15b04:	ldr	r3, [r5, #32]
   15b08:	cmp	r4, #0
   15b0c:	beq	15b40 <__assert_fail@plt+0x4994>
   15b10:	cmp	r3, #0
   15b14:	beq	15b88 <__assert_fail@plt+0x49dc>
   15b18:	ldr	r0, [r4]
   15b1c:	blx	r3
   15b20:	ldr	r1, [r4, #4]
   15b24:	ldr	r3, [r5, #32]
   15b28:	ldr	r2, [r5, #36]	; 0x24
   15b2c:	str	r7, [r4]
   15b30:	str	r2, [r4, #4]
   15b34:	str	r4, [r5, #36]	; 0x24
   15b38:	subs	r4, r1, #0
   15b3c:	bne	15b10 <__assert_fail@plt+0x4964>
   15b40:	cmp	r3, #0
   15b44:	beq	15b50 <__assert_fail@plt+0x49a4>
   15b48:	ldr	r0, [r6, #-8]
   15b4c:	blx	r3
   15b50:	str	r7, [r6, #-8]
   15b54:	str	r7, [r6, #-4]
   15b58:	ldr	r2, [r5, #4]
   15b5c:	cmp	r2, r6
   15b60:	add	r6, r6, #8
   15b64:	bhi	15af4 <__assert_fail@plt+0x4948>
   15b68:	mov	r3, #0
   15b6c:	ldrd	r6, [sp, #8]
   15b70:	ldr	r8, [sp, #16]
   15b74:	str	r3, [r5, #12]
   15b78:	str	r3, [r5, #16]
   15b7c:	ldrd	r4, [sp]
   15b80:	add	sp, sp, #20
   15b84:	pop	{pc}		; (ldr pc, [sp], #4)
   15b88:	ldr	r2, [r5, #36]	; 0x24
   15b8c:	str	r7, [r4]
   15b90:	ldr	r3, [r4, #4]
   15b94:	str	r2, [r4, #4]
   15b98:	mov	r2, r4
   15b9c:	str	r2, [r5, #36]	; 0x24
   15ba0:	subs	r4, r3, #0
   15ba4:	bne	15b8c <__assert_fail@plt+0x49e0>
   15ba8:	b	15b50 <__assert_fail@plt+0x49a4>
   15bac:	strd	r4, [sp, #-16]!
   15bb0:	ldr	r2, [r0, #32]
   15bb4:	ldr	r5, [r0]
   15bb8:	ldr	r3, [r0, #4]
   15bbc:	cmp	r2, #0
   15bc0:	str	r6, [sp, #8]
   15bc4:	mov	r6, r0
   15bc8:	str	lr, [sp, #12]
   15bcc:	beq	15c34 <__assert_fail@plt+0x4a88>
   15bd0:	ldr	r2, [r0, #16]
   15bd4:	cmp	r2, #0
   15bd8:	beq	15c34 <__assert_fail@plt+0x4a88>
   15bdc:	cmp	r5, r3
   15be0:	bcc	15bf4 <__assert_fail@plt+0x4a48>
   15be4:	b	15c68 <__assert_fail@plt+0x4abc>
   15be8:	add	r5, r5, #8
   15bec:	cmp	r5, r3
   15bf0:	bcs	15c30 <__assert_fail@plt+0x4a84>
   15bf4:	ldr	r0, [r5]
   15bf8:	cmp	r0, #0
   15bfc:	beq	15be8 <__assert_fail@plt+0x4a3c>
   15c00:	mov	r4, r5
   15c04:	b	15c0c <__assert_fail@plt+0x4a60>
   15c08:	ldr	r0, [r4]
   15c0c:	ldr	r3, [r6, #32]
   15c10:	blx	r3
   15c14:	ldr	r4, [r4, #4]
   15c18:	cmp	r4, #0
   15c1c:	bne	15c08 <__assert_fail@plt+0x4a5c>
   15c20:	ldr	r3, [r6, #4]
   15c24:	add	r5, r5, #8
   15c28:	cmp	r5, r3
   15c2c:	bcc	15bf4 <__assert_fail@plt+0x4a48>
   15c30:	ldr	r5, [r6]
   15c34:	cmp	r3, r5
   15c38:	bls	15c68 <__assert_fail@plt+0x4abc>
   15c3c:	ldr	r0, [r5, #4]
   15c40:	cmp	r0, #0
   15c44:	beq	15c5c <__assert_fail@plt+0x4ab0>
   15c48:	ldr	r4, [r0, #4]
   15c4c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   15c50:	subs	r0, r4, #0
   15c54:	bne	15c48 <__assert_fail@plt+0x4a9c>
   15c58:	ldr	r3, [r6, #4]
   15c5c:	add	r5, r5, #8
   15c60:	cmp	r5, r3
   15c64:	bcc	15c3c <__assert_fail@plt+0x4a90>
   15c68:	ldr	r0, [r6, #36]	; 0x24
   15c6c:	cmp	r0, #0
   15c70:	beq	15c84 <__assert_fail@plt+0x4ad8>
   15c74:	ldr	r4, [r0, #4]
   15c78:	bl	1bca8 <__assert_fail@plt+0xaafc>
   15c7c:	subs	r0, r4, #0
   15c80:	bne	15c74 <__assert_fail@plt+0x4ac8>
   15c84:	ldr	r0, [r6]
   15c88:	bl	1bca8 <__assert_fail@plt+0xaafc>
   15c8c:	mov	r0, r6
   15c90:	ldrd	r4, [sp]
   15c94:	ldr	r6, [sp, #8]
   15c98:	ldr	lr, [sp, #12]
   15c9c:	add	sp, sp, #16
   15ca0:	b	1bca8 <__assert_fail@plt+0xaafc>
   15ca4:	ldr	r3, [r0, #20]
   15ca8:	strd	r4, [sp, #-20]!	; 0xffffffec
   15cac:	mov	r5, r0
   15cb0:	ldrb	r2, [r3, #16]
   15cb4:	strd	r6, [sp, #8]
   15cb8:	str	lr, [sp, #16]
   15cbc:	sub	sp, sp, #44	; 0x2c
   15cc0:	cmp	r2, #0
   15cc4:	bne	15cf0 <__assert_fail@plt+0x4b44>
   15cc8:	vmov	s15, r1
   15ccc:	vldr	s12, [r3, #8]
   15cd0:	vldr	s13, [pc, #444]	; 15e94 <__assert_fail@plt+0x4ce8>
   15cd4:	vcvt.f32.u32	s15, s15
   15cd8:	vdiv.f32	s14, s15, s12
   15cdc:	vcmpe.f32	s14, s13
   15ce0:	vmrs	APSR_nzcv, fpscr
   15ce4:	vcvtlt.u32.f32	s15, s14
   15ce8:	vmovlt	r1, s15
   15cec:	bge	15d74 <__assert_fail@plt+0x4bc8>
   15cf0:	cmp	r1, #10
   15cf4:	movcc	r1, #10
   15cf8:	orr	r4, r1, #1
   15cfc:	cmn	r4, #1
   15d00:	beq	15d74 <__assert_fail@plt+0x4bc8>
   15d04:	movw	ip, #43691	; 0xaaab
   15d08:	movt	ip, #43690	; 0xaaaa
   15d0c:	umull	r2, r3, ip, r4
   15d10:	cmp	r4, #9
   15d14:	lsr	r3, r3, #1
   15d18:	add	r3, r3, r3, lsl #1
   15d1c:	sub	r3, r4, r3
   15d20:	bls	15d60 <__assert_fail@plt+0x4bb4>
   15d24:	cmp	r3, #0
   15d28:	beq	15d68 <__assert_fail@plt+0x4bbc>
   15d2c:	mov	r0, #16
   15d30:	mov	r1, #9
   15d34:	mov	r2, #3
   15d38:	b	15d48 <__assert_fail@plt+0x4b9c>
   15d3c:	cmp	r3, #0
   15d40:	add	r0, r0, #8
   15d44:	beq	15d68 <__assert_fail@plt+0x4bbc>
   15d48:	add	r2, r2, #2
   15d4c:	add	r1, r1, r0
   15d50:	cmp	r1, r4
   15d54:	udiv	r3, r4, r2
   15d58:	mls	r3, r2, r3, r4
   15d5c:	bcc	15d3c <__assert_fail@plt+0x4b90>
   15d60:	cmp	r3, #0
   15d64:	bne	15d90 <__assert_fail@plt+0x4be4>
   15d68:	add	r4, r4, #2
   15d6c:	cmn	r4, #1
   15d70:	bne	15d0c <__assert_fail@plt+0x4b60>
   15d74:	mov	r4, #0
   15d78:	mov	r0, r4
   15d7c:	add	sp, sp, #44	; 0x2c
   15d80:	ldrd	r4, [sp]
   15d84:	ldrd	r6, [sp, #8]
   15d88:	add	sp, sp, #16
   15d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d90:	lsrs	r3, r4, #30
   15d94:	movne	r6, #1
   15d98:	moveq	r6, #0
   15d9c:	tst	r4, #536870912	; 0x20000000
   15da0:	bne	15d74 <__assert_fail@plt+0x4bc8>
   15da4:	cmp	r6, #0
   15da8:	bne	15d74 <__assert_fail@plt+0x4bc8>
   15dac:	ldr	r3, [r5, #8]
   15db0:	cmp	r3, r4
   15db4:	beq	15e5c <__assert_fail@plt+0x4cb0>
   15db8:	mov	r1, #8
   15dbc:	mov	r0, r4
   15dc0:	bl	1b6bc <__assert_fail@plt+0xa510>
   15dc4:	cmp	r0, #0
   15dc8:	str	r0, [sp]
   15dcc:	beq	15d74 <__assert_fail@plt+0x4bc8>
   15dd0:	add	r3, r0, r4, lsl #3
   15dd4:	ldr	r7, [r5, #20]
   15dd8:	mov	r2, r6
   15ddc:	mov	r0, sp
   15de0:	mov	r1, r5
   15de4:	ldr	lr, [r5, #28]
   15de8:	stmib	sp, {r3, r4, r6}
   15dec:	ldr	r4, [r5, #24]
   15df0:	strd	r6, [sp, #16]
   15df4:	ldr	ip, [r5, #32]
   15df8:	ldr	r3, [r5, #36]	; 0x24
   15dfc:	str	r4, [sp, #24]
   15e00:	str	lr, [sp, #28]
   15e04:	str	ip, [sp, #32]
   15e08:	str	r3, [sp, #36]	; 0x24
   15e0c:	bl	150b0 <__assert_fail@plt+0x3f04>
   15e10:	subs	r4, r0, #0
   15e14:	bne	15e64 <__assert_fail@plt+0x4cb8>
   15e18:	ldr	r3, [sp, #36]	; 0x24
   15e1c:	mov	r2, #1
   15e20:	mov	r1, sp
   15e24:	mov	r0, r5
   15e28:	str	r3, [r5, #36]	; 0x24
   15e2c:	bl	150b0 <__assert_fail@plt+0x3f04>
   15e30:	cmp	r0, #0
   15e34:	beq	15e90 <__assert_fail@plt+0x4ce4>
   15e38:	mov	r1, sp
   15e3c:	mov	r0, r5
   15e40:	mov	r2, r4
   15e44:	bl	150b0 <__assert_fail@plt+0x3f04>
   15e48:	cmp	r0, #0
   15e4c:	beq	15e90 <__assert_fail@plt+0x4ce4>
   15e50:	ldr	r0, [sp]
   15e54:	bl	1bca8 <__assert_fail@plt+0xaafc>
   15e58:	b	15d78 <__assert_fail@plt+0x4bcc>
   15e5c:	mov	r4, #1
   15e60:	b	15d78 <__assert_fail@plt+0x4bcc>
   15e64:	ldr	r0, [r5]
   15e68:	bl	1bca8 <__assert_fail@plt+0xaafc>
   15e6c:	ldrd	r2, [sp]
   15e70:	ldr	r1, [sp, #8]
   15e74:	strd	r2, [r5]
   15e78:	ldr	r2, [sp, #12]
   15e7c:	str	r1, [r5, #8]
   15e80:	ldr	r3, [sp, #36]	; 0x24
   15e84:	str	r2, [r5, #12]
   15e88:	str	r3, [r5, #36]	; 0x24
   15e8c:	b	15d78 <__assert_fail@plt+0x4bcc>
   15e90:	bl	1117c <abort@plt>
   15e94:	svcmi	0x00800000
   15e98:	strd	r4, [sp, #-16]!
   15e9c:	str	r6, [sp, #8]
   15ea0:	subs	r6, r1, #0
   15ea4:	str	lr, [sp, #12]
   15ea8:	sub	sp, sp, #8
   15eac:	beq	16038 <__assert_fail@plt+0x4e8c>
   15eb0:	mov	r3, #0
   15eb4:	mov	r5, r2
   15eb8:	add	r2, sp, #4
   15ebc:	mov	r4, r0
   15ec0:	bl	14f50 <__assert_fail@plt+0x3da4>
   15ec4:	subs	r3, r0, #0
   15ec8:	beq	15ef4 <__assert_fail@plt+0x4d48>
   15ecc:	cmp	r5, #0
   15ed0:	moveq	r0, r5
   15ed4:	beq	15ee0 <__assert_fail@plt+0x4d34>
   15ed8:	mov	r0, #0
   15edc:	str	r3, [r5]
   15ee0:	add	sp, sp, #8
   15ee4:	ldrd	r4, [sp]
   15ee8:	ldr	r6, [sp, #8]
   15eec:	add	sp, sp, #12
   15ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ef4:	vldr	s15, [r4, #8]
   15ef8:	vldr	s14, [r4, #12]
   15efc:	ldr	r3, [r4, #20]
   15f00:	vcvt.f32.u32	s15, s15
   15f04:	vcvt.f32.u32	s14, s14
   15f08:	vldr	s13, [r3, #8]
   15f0c:	vmul.f32	s12, s13, s15
   15f10:	vcmpe.f32	s14, s12
   15f14:	vmrs	APSR_nzcv, fpscr
   15f18:	bgt	15f60 <__assert_fail@plt+0x4db4>
   15f1c:	ldr	r2, [sp, #4]
   15f20:	ldr	r3, [r2]
   15f24:	cmp	r3, #0
   15f28:	beq	16064 <__assert_fail@plt+0x4eb8>
   15f2c:	ldr	r3, [r4, #36]	; 0x24
   15f30:	cmp	r3, #0
   15f34:	beq	16088 <__assert_fail@plt+0x4edc>
   15f38:	ldr	r1, [r3, #4]
   15f3c:	str	r1, [r4, #36]	; 0x24
   15f40:	ldr	r1, [r4, #16]
   15f44:	mov	r0, #1
   15f48:	ldr	ip, [r2, #4]
   15f4c:	add	r1, r1, r0
   15f50:	stm	r3, {r6, ip}
   15f54:	str	r3, [r2, #4]
   15f58:	str	r1, [r4, #16]
   15f5c:	b	15ee0 <__assert_fail@plt+0x4d34>
   15f60:	movw	r2, #52452	; 0xcce4
   15f64:	movt	r2, #1
   15f68:	cmp	r3, r2
   15f6c:	beq	160a0 <__assert_fail@plt+0x4ef4>
   15f70:	vldr	s12, [pc, #320]	; 160b8 <__assert_fail@plt+0x4f0c>
   15f74:	vcmpe.f32	s13, s12
   15f78:	vmrs	APSR_nzcv, fpscr
   15f7c:	ble	1603c <__assert_fail@plt+0x4e90>
   15f80:	vldr	s11, [pc, #308]	; 160bc <__assert_fail@plt+0x4f10>
   15f84:	vcmpe.f32	s13, s11
   15f88:	vmrs	APSR_nzcv, fpscr
   15f8c:	bpl	1603c <__assert_fail@plt+0x4e90>
   15f90:	vldr	s10, [pc, #296]	; 160c0 <__assert_fail@plt+0x4f14>
   15f94:	vldr	s11, [r3, #12]
   15f98:	vcmpe.f32	s11, s10
   15f9c:	vmrs	APSR_nzcv, fpscr
   15fa0:	ble	1603c <__assert_fail@plt+0x4e90>
   15fa4:	vldr	s10, [r3]
   15fa8:	vcmpe.f32	s10, #0.0
   15fac:	vmrs	APSR_nzcv, fpscr
   15fb0:	blt	1603c <__assert_fail@plt+0x4e90>
   15fb4:	vadd.f32	s12, s10, s12
   15fb8:	vldr	s10, [r3, #4]
   15fbc:	vcmpe.f32	s12, s10
   15fc0:	vmrs	APSR_nzcv, fpscr
   15fc4:	bpl	1603c <__assert_fail@plt+0x4e90>
   15fc8:	vldr	s9, [pc, #244]	; 160c4 <__assert_fail@plt+0x4f18>
   15fcc:	vcmpe.f32	s10, s9
   15fd0:	vmrs	APSR_nzcv, fpscr
   15fd4:	bhi	1603c <__assert_fail@plt+0x4e90>
   15fd8:	vcmpe.f32	s13, s12
   15fdc:	vmrs	APSR_nzcv, fpscr
   15fe0:	ble	1603c <__assert_fail@plt+0x4e90>
   15fe4:	ldrb	r3, [r3, #16]
   15fe8:	vmul.f32	s15, s15, s11
   15fec:	cmp	r3, #0
   15ff0:	beq	1605c <__assert_fail@plt+0x4eb0>
   15ff4:	vldr	s14, [pc, #204]	; 160c8 <__assert_fail@plt+0x4f1c>
   15ff8:	vcmpe.f32	s15, s14
   15ffc:	vmrs	APSR_nzcv, fpscr
   16000:	bge	16098 <__assert_fail@plt+0x4eec>
   16004:	vcvt.u32.f32	s15, s15
   16008:	mov	r0, r4
   1600c:	vmov	r1, s15
   16010:	bl	15ca4 <__assert_fail@plt+0x4af8>
   16014:	cmp	r0, #0
   16018:	beq	16098 <__assert_fail@plt+0x4eec>
   1601c:	add	r2, sp, #4
   16020:	mov	r3, #0
   16024:	mov	r1, r6
   16028:	mov	r0, r4
   1602c:	bl	14f50 <__assert_fail@plt+0x3da4>
   16030:	cmp	r0, #0
   16034:	beq	15f1c <__assert_fail@plt+0x4d70>
   16038:	bl	1117c <abort@plt>
   1603c:	vldr	s13, [pc, #136]	; 160cc <__assert_fail@plt+0x4f20>
   16040:	str	r2, [r4, #20]
   16044:	vmul.f32	s12, s15, s13
   16048:	vcmpe.f32	s14, s12
   1604c:	vmrs	APSR_nzcv, fpscr
   16050:	ble	15f1c <__assert_fail@plt+0x4d70>
   16054:	vldr	s14, [pc, #116]	; 160d0 <__assert_fail@plt+0x4f24>
   16058:	vmul.f32	s15, s15, s14
   1605c:	vmul.f32	s15, s15, s13
   16060:	b	15ff4 <__assert_fail@plt+0x4e48>
   16064:	ldr	r1, [r4, #12]
   16068:	mov	r0, #1
   1606c:	ldr	r3, [r4, #16]
   16070:	str	r6, [r2]
   16074:	add	r2, r1, r0
   16078:	add	r3, r3, r0
   1607c:	str	r2, [r4, #12]
   16080:	str	r3, [r4, #16]
   16084:	b	15ee0 <__assert_fail@plt+0x4d34>
   16088:	mov	r0, #8
   1608c:	bl	1b730 <__assert_fail@plt+0xa584>
   16090:	subs	r3, r0, #0
   16094:	bne	160b0 <__assert_fail@plt+0x4f04>
   16098:	mvn	r0, #0
   1609c:	b	15ee0 <__assert_fail@plt+0x4d34>
   160a0:	vldr	s14, [pc, #40]	; 160d0 <__assert_fail@plt+0x4f24>
   160a4:	vldr	s13, [pc, #32]	; 160cc <__assert_fail@plt+0x4f20>
   160a8:	vmul.f32	s15, s15, s14
   160ac:	b	1605c <__assert_fail@plt+0x4eb0>
   160b0:	ldr	r2, [sp, #4]
   160b4:	b	15f40 <__assert_fail@plt+0x4d94>
   160b8:	stclcc	12, cr12, [ip, #820]	; 0x334
   160bc:	svccc	0x00666666
   160c0:	svccc	0x008ccccd
   160c4:	svccc	0x00800000
   160c8:	svcmi	0x00800000
   160cc:	svccc	0x004ccccd
   160d0:	svccc	0x00b4fdf4
   160d4:	strd	r4, [sp, #-16]!
   160d8:	str	r6, [sp, #8]
   160dc:	subs	r6, r1, #0
   160e0:	str	lr, [sp, #12]
   160e4:	sub	sp, sp, #8
   160e8:	beq	16264 <__assert_fail@plt+0x50b8>
   160ec:	mov	r3, #0
   160f0:	add	r2, sp, #4
   160f4:	mov	r4, r0
   160f8:	bl	14f50 <__assert_fail@plt+0x3da4>
   160fc:	subs	r5, r0, #0
   16100:	beq	1611c <__assert_fail@plt+0x4f70>
   16104:	mov	r0, r5
   16108:	add	sp, sp, #8
   1610c:	ldrd	r4, [sp]
   16110:	ldr	r6, [sp, #8]
   16114:	add	sp, sp, #12
   16118:	pop	{pc}		; (ldr pc, [sp], #4)
   1611c:	vldr	s15, [r4, #8]
   16120:	vldr	s14, [r4, #12]
   16124:	ldr	r3, [r4, #20]
   16128:	vcvt.f32.u32	s15, s15
   1612c:	vcvt.f32.u32	s14, s14
   16130:	vldr	s13, [r3, #8]
   16134:	vmul.f32	s12, s13, s15
   16138:	vcmpe.f32	s14, s12
   1613c:	vmrs	APSR_nzcv, fpscr
   16140:	bgt	1618c <__assert_fail@plt+0x4fe0>
   16144:	ldr	r3, [sp, #4]
   16148:	ldr	r2, [r3]
   1614c:	cmp	r2, #0
   16150:	beq	16290 <__assert_fail@plt+0x50e4>
   16154:	ldr	r0, [r4, #36]	; 0x24
   16158:	cmp	r0, #0
   1615c:	beq	162b4 <__assert_fail@plt+0x5108>
   16160:	ldr	r2, [r0, #4]
   16164:	str	r2, [r4, #36]	; 0x24
   16168:	ldr	r2, [r4, #16]
   1616c:	mov	r5, r6
   16170:	ldr	r1, [r3, #4]
   16174:	str	r6, [r0]
   16178:	add	r2, r2, #1
   1617c:	str	r1, [r0, #4]
   16180:	str	r0, [r3, #4]
   16184:	str	r2, [r4, #16]
   16188:	b	16104 <__assert_fail@plt+0x4f58>
   1618c:	movw	r2, #52452	; 0xcce4
   16190:	movt	r2, #1
   16194:	cmp	r3, r2
   16198:	beq	162cc <__assert_fail@plt+0x5120>
   1619c:	vldr	s12, [pc, #312]	; 162dc <__assert_fail@plt+0x5130>
   161a0:	vcmpe.f32	s13, s12
   161a4:	vmrs	APSR_nzcv, fpscr
   161a8:	ble	16268 <__assert_fail@plt+0x50bc>
   161ac:	vldr	s11, [pc, #300]	; 162e0 <__assert_fail@plt+0x5134>
   161b0:	vcmpe.f32	s13, s11
   161b4:	vmrs	APSR_nzcv, fpscr
   161b8:	bpl	16268 <__assert_fail@plt+0x50bc>
   161bc:	vldr	s10, [pc, #288]	; 162e4 <__assert_fail@plt+0x5138>
   161c0:	vldr	s11, [r3, #12]
   161c4:	vcmpe.f32	s11, s10
   161c8:	vmrs	APSR_nzcv, fpscr
   161cc:	ble	16268 <__assert_fail@plt+0x50bc>
   161d0:	vldr	s10, [r3]
   161d4:	vcmpe.f32	s10, #0.0
   161d8:	vmrs	APSR_nzcv, fpscr
   161dc:	blt	16268 <__assert_fail@plt+0x50bc>
   161e0:	vadd.f32	s12, s10, s12
   161e4:	vldr	s10, [r3, #4]
   161e8:	vcmpe.f32	s12, s10
   161ec:	vmrs	APSR_nzcv, fpscr
   161f0:	bpl	16268 <__assert_fail@plt+0x50bc>
   161f4:	vldr	s9, [pc, #236]	; 162e8 <__assert_fail@plt+0x513c>
   161f8:	vcmpe.f32	s10, s9
   161fc:	vmrs	APSR_nzcv, fpscr
   16200:	bhi	16268 <__assert_fail@plt+0x50bc>
   16204:	vcmpe.f32	s13, s12
   16208:	vmrs	APSR_nzcv, fpscr
   1620c:	ble	16268 <__assert_fail@plt+0x50bc>
   16210:	ldrb	r3, [r3, #16]
   16214:	vmul.f32	s15, s15, s11
   16218:	cmp	r3, #0
   1621c:	beq	16288 <__assert_fail@plt+0x50dc>
   16220:	vldr	s14, [pc, #196]	; 162ec <__assert_fail@plt+0x5140>
   16224:	vcmpe.f32	s15, s14
   16228:	vmrs	APSR_nzcv, fpscr
   1622c:	bge	16104 <__assert_fail@plt+0x4f58>
   16230:	vcvt.u32.f32	s15, s15
   16234:	mov	r0, r4
   16238:	vmov	r1, s15
   1623c:	bl	15ca4 <__assert_fail@plt+0x4af8>
   16240:	cmp	r0, #0
   16244:	beq	16104 <__assert_fail@plt+0x4f58>
   16248:	add	r2, sp, #4
   1624c:	mov	r3, #0
   16250:	mov	r1, r6
   16254:	mov	r0, r4
   16258:	bl	14f50 <__assert_fail@plt+0x3da4>
   1625c:	cmp	r0, #0
   16260:	beq	16144 <__assert_fail@plt+0x4f98>
   16264:	bl	1117c <abort@plt>
   16268:	vldr	s13, [pc, #128]	; 162f0 <__assert_fail@plt+0x5144>
   1626c:	str	r2, [r4, #20]
   16270:	vmul.f32	s12, s15, s13
   16274:	vcmpe.f32	s14, s12
   16278:	vmrs	APSR_nzcv, fpscr
   1627c:	ble	16144 <__assert_fail@plt+0x4f98>
   16280:	vldr	s14, [pc, #108]	; 162f4 <__assert_fail@plt+0x5148>
   16284:	vmul.f32	s15, s15, s14
   16288:	vmul.f32	s15, s15, s13
   1628c:	b	16220 <__assert_fail@plt+0x5074>
   16290:	ldr	r2, [r4, #12]
   16294:	mov	r5, r6
   16298:	str	r6, [r3]
   1629c:	ldr	r3, [r4, #16]
   162a0:	add	r2, r2, #1
   162a4:	add	r3, r3, #1
   162a8:	str	r2, [r4, #12]
   162ac:	str	r3, [r4, #16]
   162b0:	b	16104 <__assert_fail@plt+0x4f58>
   162b4:	mov	r0, #8
   162b8:	bl	1b730 <__assert_fail@plt+0xa584>
   162bc:	cmp	r0, #0
   162c0:	beq	16104 <__assert_fail@plt+0x4f58>
   162c4:	ldr	r3, [sp, #4]
   162c8:	b	16168 <__assert_fail@plt+0x4fbc>
   162cc:	vldr	s14, [pc, #32]	; 162f4 <__assert_fail@plt+0x5148>
   162d0:	vldr	s13, [pc, #24]	; 162f0 <__assert_fail@plt+0x5144>
   162d4:	vmul.f32	s15, s15, s14
   162d8:	b	16288 <__assert_fail@plt+0x50dc>
   162dc:	stclcc	12, cr12, [ip, #820]	; 0x334
   162e0:	svccc	0x00666666
   162e4:	svccc	0x008ccccd
   162e8:	svccc	0x00800000
   162ec:	svcmi	0x00800000
   162f0:	svccc	0x004ccccd
   162f4:	svccc	0x00b4fdf4
   162f8:	strd	r4, [sp, #-16]!
   162fc:	mov	r3, #1
   16300:	mov	r4, r0
   16304:	str	r6, [sp, #8]
   16308:	str	lr, [sp, #12]
   1630c:	sub	sp, sp, #8
   16310:	add	r2, sp, #4
   16314:	bl	14f50 <__assert_fail@plt+0x3da4>
   16318:	subs	r5, r0, #0
   1631c:	beq	1633c <__assert_fail@plt+0x5190>
   16320:	ldr	r2, [sp, #4]
   16324:	ldr	r3, [r4, #16]
   16328:	ldr	r2, [r2]
   1632c:	sub	r3, r3, #1
   16330:	str	r3, [r4, #16]
   16334:	cmp	r2, #0
   16338:	beq	16354 <__assert_fail@plt+0x51a8>
   1633c:	mov	r0, r5
   16340:	add	sp, sp, #8
   16344:	ldrd	r4, [sp]
   16348:	ldr	r6, [sp, #8]
   1634c:	add	sp, sp, #12
   16350:	pop	{pc}		; (ldr pc, [sp], #4)
   16354:	vldr	s15, [r4, #8]
   16358:	ldr	r3, [r4, #12]
   1635c:	ldr	r2, [r4, #20]
   16360:	vcvt.f32.u32	s15, s15
   16364:	sub	r3, r3, #1
   16368:	vmov	s14, r3
   1636c:	vldr	s13, [r2]
   16370:	str	r3, [r4, #12]
   16374:	vmul.f32	s12, s13, s15
   16378:	vcvt.f32.u32	s14, s14
   1637c:	vcmpe.f32	s14, s12
   16380:	vmrs	APSR_nzcv, fpscr
   16384:	bpl	1633c <__assert_fail@plt+0x5190>
   16388:	movw	r3, #52452	; 0xcce4
   1638c:	movt	r3, #1
   16390:	cmp	r2, r3
   16394:	beq	16474 <__assert_fail@plt+0x52c8>
   16398:	vldr	s11, [pc, #224]	; 16480 <__assert_fail@plt+0x52d4>
   1639c:	vldr	s12, [r2, #8]
   163a0:	vcmpe.f32	s12, s11
   163a4:	vmrs	APSR_nzcv, fpscr
   163a8:	ble	1645c <__assert_fail@plt+0x52b0>
   163ac:	vldr	s10, [pc, #208]	; 16484 <__assert_fail@plt+0x52d8>
   163b0:	vcmpe.f32	s12, s10
   163b4:	vmrs	APSR_nzcv, fpscr
   163b8:	bpl	1645c <__assert_fail@plt+0x52b0>
   163bc:	vldr	s10, [pc, #196]	; 16488 <__assert_fail@plt+0x52dc>
   163c0:	vldr	s9, [r2, #12]
   163c4:	vcmpe.f32	s9, s10
   163c8:	vmrs	APSR_nzcv, fpscr
   163cc:	ble	1645c <__assert_fail@plt+0x52b0>
   163d0:	vcmpe.f32	s13, #0.0
   163d4:	vmrs	APSR_nzcv, fpscr
   163d8:	blt	1645c <__assert_fail@plt+0x52b0>
   163dc:	vadd.f32	s13, s13, s11
   163e0:	vldr	s11, [r2, #4]
   163e4:	vcmpe.f32	s13, s11
   163e8:	vmrs	APSR_nzcv, fpscr
   163ec:	bpl	1645c <__assert_fail@plt+0x52b0>
   163f0:	vldr	s10, [pc, #148]	; 1648c <__assert_fail@plt+0x52e0>
   163f4:	vcmpe.f32	s11, s10
   163f8:	vmrs	APSR_nzcv, fpscr
   163fc:	bhi	1645c <__assert_fail@plt+0x52b0>
   16400:	vcmpe.f32	s12, s13
   16404:	vmrs	APSR_nzcv, fpscr
   16408:	ble	1645c <__assert_fail@plt+0x52b0>
   1640c:	ldrb	r3, [r2, #16]
   16410:	vmul.f32	s15, s15, s11
   16414:	cmp	r3, #0
   16418:	beq	16478 <__assert_fail@plt+0x52cc>
   1641c:	vcvt.u32.f32	s15, s15
   16420:	mov	r0, r4
   16424:	vmov	r1, s15
   16428:	bl	15ca4 <__assert_fail@plt+0x4af8>
   1642c:	cmp	r0, #0
   16430:	bne	1633c <__assert_fail@plt+0x5190>
   16434:	ldr	r0, [r4, #36]	; 0x24
   16438:	cmp	r0, #0
   1643c:	beq	16450 <__assert_fail@plt+0x52a4>
   16440:	ldr	r6, [r0, #4]
   16444:	bl	1bca8 <__assert_fail@plt+0xaafc>
   16448:	subs	r0, r6, #0
   1644c:	bne	16440 <__assert_fail@plt+0x5294>
   16450:	mov	r3, #0
   16454:	str	r3, [r4, #36]	; 0x24
   16458:	b	1633c <__assert_fail@plt+0x5190>
   1645c:	vldr	s13, [pc, #44]	; 16490 <__assert_fail@plt+0x52e4>
   16460:	str	r3, [r4, #20]
   16464:	vmul.f32	s13, s15, s13
   16468:	vcmpe.f32	s14, s13
   1646c:	vmrs	APSR_nzcv, fpscr
   16470:	bpl	1633c <__assert_fail@plt+0x5190>
   16474:	vldr	s12, [pc, #24]	; 16494 <__assert_fail@plt+0x52e8>
   16478:	vmul.f32	s15, s15, s12
   1647c:	b	1641c <__assert_fail@plt+0x5270>
   16480:	stclcc	12, cr12, [ip, #820]	; 0x334
   16484:	svccc	0x00666666
   16488:	svccc	0x008ccccd
   1648c:	svccc	0x00800000
   16490:	andeq	r0, r0, r0
   16494:	svccc	0x004ccccd
   16498:	strd	r4, [sp, #-16]!
   1649c:	mov	r3, #1
   164a0:	mov	r4, r0
   164a4:	str	r6, [sp, #8]
   164a8:	str	lr, [sp, #12]
   164ac:	sub	sp, sp, #8
   164b0:	add	r2, sp, #4
   164b4:	bl	14f50 <__assert_fail@plt+0x3da4>
   164b8:	subs	r5, r0, #0
   164bc:	beq	164dc <__assert_fail@plt+0x5330>
   164c0:	ldr	r2, [sp, #4]
   164c4:	ldr	r3, [r4, #16]
   164c8:	ldr	r2, [r2]
   164cc:	sub	r3, r3, #1
   164d0:	str	r3, [r4, #16]
   164d4:	cmp	r2, #0
   164d8:	beq	164f4 <__assert_fail@plt+0x5348>
   164dc:	mov	r0, r5
   164e0:	add	sp, sp, #8
   164e4:	ldrd	r4, [sp]
   164e8:	ldr	r6, [sp, #8]
   164ec:	add	sp, sp, #12
   164f0:	pop	{pc}		; (ldr pc, [sp], #4)
   164f4:	vldr	s15, [r4, #8]
   164f8:	ldr	r3, [r4, #12]
   164fc:	ldr	r2, [r4, #20]
   16500:	vcvt.f32.u32	s15, s15
   16504:	sub	r3, r3, #1
   16508:	vmov	s14, r3
   1650c:	vldr	s13, [r2]
   16510:	str	r3, [r4, #12]
   16514:	vmul.f32	s12, s13, s15
   16518:	vcvt.f32.u32	s14, s14
   1651c:	vcmpe.f32	s14, s12
   16520:	vmrs	APSR_nzcv, fpscr
   16524:	bpl	164dc <__assert_fail@plt+0x5330>
   16528:	movw	r3, #52452	; 0xcce4
   1652c:	movt	r3, #1
   16530:	cmp	r2, r3
   16534:	beq	16614 <__assert_fail@plt+0x5468>
   16538:	vldr	s11, [pc, #224]	; 16620 <__assert_fail@plt+0x5474>
   1653c:	vldr	s12, [r2, #8]
   16540:	vcmpe.f32	s12, s11
   16544:	vmrs	APSR_nzcv, fpscr
   16548:	ble	165fc <__assert_fail@plt+0x5450>
   1654c:	vldr	s10, [pc, #208]	; 16624 <__assert_fail@plt+0x5478>
   16550:	vcmpe.f32	s12, s10
   16554:	vmrs	APSR_nzcv, fpscr
   16558:	bpl	165fc <__assert_fail@plt+0x5450>
   1655c:	vldr	s10, [pc, #196]	; 16628 <__assert_fail@plt+0x547c>
   16560:	vldr	s9, [r2, #12]
   16564:	vcmpe.f32	s9, s10
   16568:	vmrs	APSR_nzcv, fpscr
   1656c:	ble	165fc <__assert_fail@plt+0x5450>
   16570:	vcmpe.f32	s13, #0.0
   16574:	vmrs	APSR_nzcv, fpscr
   16578:	blt	165fc <__assert_fail@plt+0x5450>
   1657c:	vadd.f32	s13, s13, s11
   16580:	vldr	s11, [r2, #4]
   16584:	vcmpe.f32	s13, s11
   16588:	vmrs	APSR_nzcv, fpscr
   1658c:	bpl	165fc <__assert_fail@plt+0x5450>
   16590:	vldr	s10, [pc, #148]	; 1662c <__assert_fail@plt+0x5480>
   16594:	vcmpe.f32	s11, s10
   16598:	vmrs	APSR_nzcv, fpscr
   1659c:	bhi	165fc <__assert_fail@plt+0x5450>
   165a0:	vcmpe.f32	s12, s13
   165a4:	vmrs	APSR_nzcv, fpscr
   165a8:	ble	165fc <__assert_fail@plt+0x5450>
   165ac:	ldrb	r3, [r2, #16]
   165b0:	vmul.f32	s15, s15, s11
   165b4:	cmp	r3, #0
   165b8:	beq	16618 <__assert_fail@plt+0x546c>
   165bc:	vcvt.u32.f32	s15, s15
   165c0:	mov	r0, r4
   165c4:	vmov	r1, s15
   165c8:	bl	15ca4 <__assert_fail@plt+0x4af8>
   165cc:	cmp	r0, #0
   165d0:	bne	164dc <__assert_fail@plt+0x5330>
   165d4:	ldr	r0, [r4, #36]	; 0x24
   165d8:	cmp	r0, #0
   165dc:	beq	165f0 <__assert_fail@plt+0x5444>
   165e0:	ldr	r6, [r0, #4]
   165e4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   165e8:	subs	r0, r6, #0
   165ec:	bne	165e0 <__assert_fail@plt+0x5434>
   165f0:	mov	r3, #0
   165f4:	str	r3, [r4, #36]	; 0x24
   165f8:	b	164dc <__assert_fail@plt+0x5330>
   165fc:	vldr	s13, [pc, #44]	; 16630 <__assert_fail@plt+0x5484>
   16600:	str	r3, [r4, #20]
   16604:	vmul.f32	s13, s15, s13
   16608:	vcmpe.f32	s14, s13
   1660c:	vmrs	APSR_nzcv, fpscr
   16610:	bpl	164dc <__assert_fail@plt+0x5330>
   16614:	vldr	s12, [pc, #24]	; 16634 <__assert_fail@plt+0x5488>
   16618:	vmul.f32	s15, s15, s12
   1661c:	b	165bc <__assert_fail@plt+0x5410>
   16620:	stclcc	12, cr12, [ip, #820]	; 0x334
   16624:	svccc	0x00666666
   16628:	svccc	0x008ccccd
   1662c:	svccc	0x00800000
   16630:	andeq	r0, r0, r0
   16634:	svccc	0x004ccccd
   16638:	mov	r3, #0
   1663c:	mov	r2, #1
   16640:	str	r1, [r0]
   16644:	str	r1, [r0, #4]
   16648:	str	r1, [r0, #8]
   1664c:	str	r1, [r0, #12]
   16650:	str	r1, [r0, #16]
   16654:	str	r3, [r0, #20]
   16658:	str	r3, [r0, #24]
   1665c:	strb	r2, [r0, #28]
   16660:	bx	lr
   16664:	ldrb	r0, [r0, #28]
   16668:	bx	lr
   1666c:	ldrb	ip, [r0, #28]
   16670:	mov	r2, r0
   16674:	ldr	r3, [r0, #20]
   16678:	eor	ip, ip, #1
   1667c:	add	r3, ip, r3
   16680:	and	r3, r3, #3
   16684:	ldr	r0, [r0, r3, lsl #2]
   16688:	str	r1, [r2, r3, lsl #2]
   1668c:	ldr	r1, [r2, #24]
   16690:	str	r3, [r2, #20]
   16694:	cmp	r1, r3
   16698:	bne	166a8 <__assert_fail@plt+0x54fc>
   1669c:	add	ip, ip, r1
   166a0:	and	ip, ip, #3
   166a4:	str	ip, [r2, #24]
   166a8:	mov	r3, #0
   166ac:	strb	r3, [r2, #28]
   166b0:	bx	lr
   166b4:	ldrb	r3, [r0, #28]
   166b8:	cmp	r3, #0
   166bc:	bne	166f8 <__assert_fail@plt+0x554c>
   166c0:	ldr	r1, [r0, #16]
   166c4:	ldr	r3, [r0, #20]
   166c8:	ldr	r2, [r0, r3, lsl #2]
   166cc:	str	r1, [r0, r3, lsl #2]
   166d0:	ldr	r1, [r0, #24]
   166d4:	cmp	r3, r1
   166d8:	moveq	r3, #1
   166dc:	strbeq	r3, [r0, #28]
   166e0:	beq	166f0 <__assert_fail@plt+0x5544>
   166e4:	add	r3, r3, #3
   166e8:	and	r3, r3, #3
   166ec:	str	r3, [r0, #20]
   166f0:	mov	r0, r2
   166f4:	bx	lr
   166f8:	str	r4, [sp, #-8]!
   166fc:	str	lr, [sp, #4]
   16700:	bl	1117c <abort@plt>
   16704:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16708:	mov	r5, r0
   1670c:	strd	r6, [sp, #8]
   16710:	strd	r8, [sp, #16]
   16714:	strd	sl, [sp, #24]
   16718:	str	lr, [sp, #32]
   1671c:	sub	sp, sp, #4
   16720:	ldrb	r3, [r0]
   16724:	sub	r2, r3, #48	; 0x30
   16728:	cmp	r2, #7
   1672c:	bls	16874 <__assert_fail@plt+0x56c8>
   16730:	cmp	r3, #0
   16734:	moveq	r0, #1
   16738:	beq	16768 <__assert_fail@plt+0x55bc>
   1673c:	mov	r1, r5
   16740:	mov	r0, #1
   16744:	and	r2, r3, #239	; 0xef
   16748:	cmp	r3, #43	; 0x2b
   1674c:	cmpne	r2, #45	; 0x2d
   16750:	ldrb	r3, [r1, #1]!
   16754:	moveq	r2, #1
   16758:	movne	r2, #0
   1675c:	add	r0, r0, r2
   16760:	cmp	r3, #0
   16764:	bne	16744 <__assert_fail@plt+0x5598>
   16768:	mov	r1, #16
   1676c:	movw	fp, #519	; 0x207
   16770:	bl	1b194 <__assert_fail@plt+0x9fe8>
   16774:	mov	r8, #3
   16778:	mov	ip, #0
   1677c:	mov	r4, #0
   16780:	ldrb	r3, [r5]
   16784:	mov	lr, r5
   16788:	add	r5, r5, #1
   1678c:	cmp	r3, #97	; 0x61
   16790:	beq	16a1c <__assert_fail@plt+0x5870>
   16794:	bls	167d4 <__assert_fail@plt+0x5628>
   16798:	cmp	r3, #111	; 0x6f
   1679c:	beq	16a14 <__assert_fail@plt+0x5868>
   167a0:	cmp	r3, #117	; 0x75
   167a4:	beq	16a24 <__assert_fail@plt+0x5878>
   167a8:	cmp	r3, #103	; 0x67
   167ac:	beq	16a2c <__assert_fail@plt+0x5880>
   167b0:	bl	1bca8 <__assert_fail@plt+0xaafc>
   167b4:	mov	r0, #0
   167b8:	add	sp, sp, #4
   167bc:	ldrd	r4, [sp]
   167c0:	ldrd	r6, [sp, #8]
   167c4:	ldrd	r8, [sp, #16]
   167c8:	ldrd	sl, [sp, #24]
   167cc:	add	sp, sp, #32
   167d0:	pop	{pc}		; (ldr pc, [sp], #4)
   167d4:	cmp	r3, #45	; 0x2d
   167d8:	beq	167ec <__assert_fail@plt+0x5640>
   167dc:	cmp	r3, #61	; 0x3d
   167e0:	beq	167ec <__assert_fail@plt+0x5640>
   167e4:	cmp	r3, #43	; 0x2b
   167e8:	bne	167b0 <__assert_fail@plt+0x5604>
   167ec:	add	r6, ip, #1
   167f0:	mov	r7, #1
   167f4:	add	ip, r0, ip, lsl #4
   167f8:	movw	r5, #4095	; 0xfff
   167fc:	b	1684c <__assert_fail@plt+0x56a0>
   16800:	cmp	r2, #117	; 0x75
   16804:	addeq	r2, lr, #2
   16808:	moveq	r9, #448	; 0x1c0
   1680c:	bne	16920 <__assert_fail@plt+0x5774>
   16810:	strb	r3, [ip]
   16814:	ldrb	r3, [lr, #2]
   16818:	mov	lr, r2
   1681c:	strb	r8, [ip, #1]
   16820:	stmib	ip, {r4, r9}
   16824:	cmp	r4, #0
   16828:	andne	r9, r9, r4
   1682c:	and	r2, r3, #239	; 0xef
   16830:	add	ip, ip, #16
   16834:	str	r9, [ip, #-4]
   16838:	cmp	r3, #43	; 0x2b
   1683c:	cmpne	r2, #45	; 0x2d
   16840:	add	r2, r6, #1
   16844:	bne	16a7c <__assert_fail@plt+0x58d0>
   16848:	mov	r6, r2
   1684c:	ldrb	r2, [lr, #1]
   16850:	add	r1, lr, #1
   16854:	cmp	r2, #103	; 0x67
   16858:	beq	16a08 <__assert_fail@plt+0x585c>
   1685c:	bls	168b0 <__assert_fail@plt+0x5704>
   16860:	cmp	r2, #111	; 0x6f
   16864:	bne	16800 <__assert_fail@plt+0x5654>
   16868:	add	r2, lr, #2
   1686c:	mov	r9, #7
   16870:	b	16810 <__assert_fail@plt+0x5664>
   16874:	mov	r2, r0
   16878:	mov	r4, #0
   1687c:	b	16890 <__assert_fail@plt+0x56e4>
   16880:	ldrb	r3, [r2]
   16884:	sub	r1, r3, #48	; 0x30
   16888:	cmp	r1, #7
   1688c:	bhi	16a38 <__assert_fail@plt+0x588c>
   16890:	ldrb	r3, [r2], #1
   16894:	lsl	r4, r4, #3
   16898:	sub	r4, r4, #48	; 0x30
   1689c:	add	r4, r3, r4
   168a0:	cmp	r4, #4096	; 0x1000
   168a4:	bcc	16880 <__assert_fail@plt+0x56d4>
   168a8:	mov	r0, #0
   168ac:	b	167b8 <__assert_fail@plt+0x560c>
   168b0:	sub	lr, r2, #48	; 0x30
   168b4:	cmp	lr, #7
   168b8:	movls	r2, #0
   168bc:	bhi	16920 <__assert_fail@plt+0x5774>
   168c0:	ldrb	lr, [r1], #1
   168c4:	lsl	r2, r2, #3
   168c8:	sub	r2, r2, #48	; 0x30
   168cc:	add	r2, lr, r2
   168d0:	cmp	r2, #4096	; 0x1000
   168d4:	bcs	167b0 <__assert_fail@plt+0x5604>
   168d8:	ldrb	r9, [r1]
   168dc:	sub	lr, r9, #48	; 0x30
   168e0:	cmp	lr, #7
   168e4:	bls	168c0 <__assert_fail@plt+0x5714>
   168e8:	cmp	r4, #0
   168ec:	bne	167b0 <__assert_fail@plt+0x5604>
   168f0:	cmp	r9, #0
   168f4:	cmpne	r9, #44	; 0x2c
   168f8:	bne	167b0 <__assert_fail@plt+0x5604>
   168fc:	movw	r4, #4095	; 0xfff
   16900:	mov	lr, r1
   16904:	strb	r3, [ip]
   16908:	mov	r3, r9
   1690c:	mov	r9, r4
   16910:	strb	r7, [ip, #1]
   16914:	str	r5, [ip, #4]
   16918:	str	r2, [ip, #8]
   1691c:	b	1682c <__assert_fail@plt+0x5680>
   16920:	mov	sl, #1
   16924:	mov	r9, #0
   16928:	sub	lr, r2, #88	; 0x58
   1692c:	cmp	lr, #32
   16930:	ldrls	pc, [pc, lr, lsl #2]
   16934:	b	169f0 <__assert_fail@plt+0x5844>
   16938:			; <UNDEFINED> instruction: 0x000169bc
   1693c:	strdeq	r6, [r1], -r0
   16940:	strdeq	r6, [r1], -r0
   16944:	strdeq	r6, [r1], -r0
   16948:	strdeq	r6, [r1], -r0
   1694c:	strdeq	r6, [r1], -r0
   16950:	strdeq	r6, [r1], -r0
   16954:	strdeq	r6, [r1], -r0
   16958:	strdeq	r6, [r1], -r0
   1695c:	strdeq	r6, [r1], -r0
   16960:	strdeq	r6, [r1], -r0
   16964:	strdeq	r6, [r1], -r0
   16968:	strdeq	r6, [r1], -r0
   1696c:	strdeq	r6, [r1], -r0
   16970:	strdeq	r6, [r1], -r0
   16974:	strdeq	r6, [r1], -r0
   16978:	strdeq	r6, [r1], -r0
   1697c:	strdeq	r6, [r1], -r0
   16980:	strdeq	r6, [r1], -r0
   16984:	strdeq	r6, [r1], -r0
   16988:	strdeq	r6, [r1], -r0
   1698c:	strdeq	r6, [r1], -r0
   16990:	strdeq	r6, [r1], -r0
   16994:	strdeq	r6, [r1], -r0
   16998:	strdeq	r6, [r1], -r0
   1699c:	strdeq	r6, [r1], -r0
   169a0:	andeq	r6, r1, r8, ror #19
   169a4:	andeq	r6, r1, r0, ror #19
   169a8:	ldrdeq	r6, [r1], -r8
   169ac:	strdeq	r6, [r1], -r0
   169b0:	strdeq	r6, [r1], -r0
   169b4:	ldrdeq	r6, [r1], -r0
   169b8:	andeq	r6, r1, r8, asr #19
   169bc:	mov	sl, #2
   169c0:	ldrb	r2, [r1, #1]!
   169c4:	b	16928 <__assert_fail@plt+0x577c>
   169c8:	orr	r9, r9, #73	; 0x49
   169cc:	b	169c0 <__assert_fail@plt+0x5814>
   169d0:	orr	r9, r9, #146	; 0x92
   169d4:	b	169c0 <__assert_fail@plt+0x5814>
   169d8:	orr	r9, r9, #512	; 0x200
   169dc:	b	169c0 <__assert_fail@plt+0x5814>
   169e0:	orr	r9, r9, #3072	; 0xc00
   169e4:	b	169c0 <__assert_fail@plt+0x5814>
   169e8:	orr	r9, r9, #292	; 0x124
   169ec:	b	169c0 <__assert_fail@plt+0x5814>
   169f0:	mov	lr, r1
   169f4:	strb	r3, [ip]
   169f8:	mov	r3, r2
   169fc:	strb	sl, [ip, #1]
   16a00:	stmib	ip, {r4, r9}
   16a04:	b	16824 <__assert_fail@plt+0x5678>
   16a08:	add	r2, lr, #2
   16a0c:	mov	r9, #56	; 0x38
   16a10:	b	16810 <__assert_fail@plt+0x5664>
   16a14:	orr	r4, r4, fp
   16a18:	b	16780 <__assert_fail@plt+0x55d4>
   16a1c:	movw	r4, #4095	; 0xfff
   16a20:	b	16780 <__assert_fail@plt+0x55d4>
   16a24:	orr	r4, r4, #2496	; 0x9c0
   16a28:	b	16780 <__assert_fail@plt+0x55d4>
   16a2c:	orr	r4, r4, #1072	; 0x430
   16a30:	orr	r4, r4, #8
   16a34:	b	16780 <__assert_fail@plt+0x55d4>
   16a38:	cmp	r3, #0
   16a3c:	bne	168a8 <__assert_fail@plt+0x56fc>
   16a40:	sub	r2, r2, r5
   16a44:	mov	r0, #32
   16a48:	cmp	r2, #4
   16a4c:	andle	r5, r4, #3072	; 0xc00
   16a50:	movwgt	r5, #4095	; 0xfff
   16a54:	mvnle	r5, r5, lsr #10
   16a58:	mvnle	r5, r5, lsl #10
   16a5c:	bl	1b030 <__assert_fail@plt+0x9e84>
   16a60:	movw	r1, #317	; 0x13d
   16a64:	movw	r2, #4095	; 0xfff
   16a68:	mov	r3, #0
   16a6c:	strh	r1, [r0]
   16a70:	stmib	r0, {r2, r4, r5}
   16a74:	strb	r3, [r0, #17]
   16a78:	b	167b8 <__assert_fail@plt+0x560c>
   16a7c:	cmp	r3, #44	; 0x2c
   16a80:	bne	16a90 <__assert_fail@plt+0x58e4>
   16a84:	add	r5, lr, #1
   16a88:	mov	ip, r6
   16a8c:	b	1677c <__assert_fail@plt+0x55d0>
   16a90:	cmp	r3, #0
   16a94:	addeq	r6, r0, r6, lsl #4
   16a98:	strbeq	r3, [r6, #1]
   16a9c:	beq	167b8 <__assert_fail@plt+0x560c>
   16aa0:	b	167b0 <__assert_fail@plt+0x5604>
   16aa4:	strd	r4, [sp, #-12]!
   16aa8:	mov	r1, r0
   16aac:	mov	r0, #3
   16ab0:	str	lr, [sp, #8]
   16ab4:	sub	sp, sp, #108	; 0x6c
   16ab8:	mov	r2, sp
   16abc:	bl	11164 <__xstat64@plt>
   16ac0:	subs	r4, r0, #0
   16ac4:	movne	r0, #0
   16ac8:	bne	16af0 <__assert_fail@plt+0x5944>
   16acc:	ldr	r5, [sp, #16]
   16ad0:	mov	r0, #32
   16ad4:	bl	1b030 <__assert_fail@plt+0x9e84>
   16ad8:	movw	r3, #4095	; 0xfff
   16adc:	movw	r2, #317	; 0x13d
   16ae0:	strh	r2, [r0]
   16ae4:	stmib	r0, {r3, r5}
   16ae8:	str	r3, [r0, #12]
   16aec:	strb	r4, [r0, #17]
   16af0:	add	sp, sp, #108	; 0x6c
   16af4:	ldrd	r4, [sp]
   16af8:	add	sp, sp, #8
   16afc:	pop	{pc}		; (ldr pc, [sp], #4)
   16b00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16b04:	ubfx	r0, r0, #0, #12
   16b08:	strd	r6, [sp, #8]
   16b0c:	strd	r8, [sp, #16]
   16b10:	strd	sl, [sp, #24]
   16b14:	str	lr, [sp, #32]
   16b18:	ldrb	lr, [r3, #1]
   16b1c:	ldr	sl, [sp, #36]	; 0x24
   16b20:	cmp	lr, #0
   16b24:	beq	16c88 <__assert_fail@plt+0x5adc>
   16b28:	add	r3, r3, #16
   16b2c:	mvn	r2, r2
   16b30:	mov	r7, #0
   16b34:	mvn	r8, #3072	; 0xc00
   16b38:	movw	r9, #438	; 0x1b6
   16b3c:	b	16bc4 <__assert_fail@plt+0x5a18>
   16b40:	cmp	lr, #2
   16b44:	mvn	r4, #0
   16b48:	beq	16c78 <__assert_fail@plt+0x5acc>
   16b4c:	mov	r5, r1
   16b50:	cmp	lr, #3
   16b54:	bne	16b88 <__assert_fail@plt+0x59dc>
   16b58:	and	ip, ip, r0
   16b5c:	and	lr, ip, #292	; 0x124
   16b60:	cmp	lr, #0
   16b64:	movne	lr, r9
   16b68:	moveq	lr, #146	; 0x92
   16b6c:	movne	fp, #292	; 0x124
   16b70:	moveq	fp, #0
   16b74:	tst	ip, #146	; 0x92
   16b78:	moveq	lr, fp
   16b7c:	tst	ip, #73	; 0x49
   16b80:	orrne	lr, lr, #73	; 0x49
   16b84:	orr	ip, lr, ip
   16b88:	cmp	r6, #0
   16b8c:	and	ip, ip, r4
   16b90:	ldrb	lr, [r3, #-16]
   16b94:	bne	16c00 <__assert_fail@plt+0x5a54>
   16b98:	cmp	lr, #45	; 0x2d
   16b9c:	and	ip, ip, r2
   16ba0:	beq	16c60 <__assert_fail@plt+0x5ab4>
   16ba4:	cmp	lr, #61	; 0x3d
   16ba8:	beq	16c20 <__assert_fail@plt+0x5a74>
   16bac:	cmp	lr, #43	; 0x2b
   16bb0:	beq	16c6c <__assert_fail@plt+0x5ac0>
   16bb4:	add	r3, r3, #16
   16bb8:	ldrb	lr, [r3, #-15]
   16bbc:	cmp	lr, #0
   16bc0:	beq	16c40 <__assert_fail@plt+0x5a94>
   16bc4:	cmp	r1, #0
   16bc8:	ldr	r6, [r3, #-12]
   16bcc:	ldr	ip, [r3, #-8]
   16bd0:	beq	16b40 <__assert_fail@plt+0x5994>
   16bd4:	cmp	lr, #2
   16bd8:	ldr	r4, [r3, #-4]
   16bdc:	mvn	r5, r4
   16be0:	orr	r4, r4, r8
   16be4:	and	r5, r5, #3072	; 0xc00
   16be8:	bne	16b50 <__assert_fail@plt+0x59a4>
   16bec:	orr	ip, ip, #73	; 0x49
   16bf0:	cmp	r6, #0
   16bf4:	ldrb	lr, [r3, #-16]
   16bf8:	and	ip, ip, r4
   16bfc:	beq	16b98 <__assert_fail@plt+0x59ec>
   16c00:	cmp	lr, #45	; 0x2d
   16c04:	and	ip, ip, r6
   16c08:	beq	16c60 <__assert_fail@plt+0x5ab4>
   16c0c:	cmp	lr, #61	; 0x3d
   16c10:	bne	16bac <__assert_fail@plt+0x5a00>
   16c14:	mvn	r6, r6
   16c18:	orr	r5, r5, r6
   16c1c:	mvn	r4, r5
   16c20:	add	r3, r3, #16
   16c24:	ldrb	lr, [r3, #-15]
   16c28:	ubfx	r4, r4, #0, #12
   16c2c:	and	r0, r0, r5
   16c30:	orr	r0, r0, ip
   16c34:	orr	r7, r7, r4
   16c38:	cmp	lr, #0
   16c3c:	bne	16bc4 <__assert_fail@plt+0x5a18>
   16c40:	cmp	sl, #0
   16c44:	ldrd	r4, [sp]
   16c48:	strne	r7, [sl]
   16c4c:	ldrd	r6, [sp, #8]
   16c50:	ldrd	r8, [sp, #16]
   16c54:	ldrd	sl, [sp, #24]
   16c58:	add	sp, sp, #32
   16c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c60:	orr	r7, r7, ip
   16c64:	bic	r0, r0, ip
   16c68:	b	16bb4 <__assert_fail@plt+0x5a08>
   16c6c:	orr	r7, r7, ip
   16c70:	orr	r0, r0, ip
   16c74:	b	16bb4 <__assert_fail@plt+0x5a08>
   16c78:	ands	r5, r0, #73	; 0x49
   16c7c:	beq	16b88 <__assert_fail@plt+0x59dc>
   16c80:	mov	r5, r1
   16c84:	b	16bec <__assert_fail@plt+0x5a40>
   16c88:	mov	r7, lr
   16c8c:	b	16c40 <__assert_fail@plt+0x5a94>
   16c90:	push	{r2, r3}
   16c94:	push	{lr}		; (str lr, [sp, #-4]!)
   16c98:	sub	sp, sp, #12
   16c9c:	ldr	r2, [sp, #16]
   16ca0:	ands	r3, r2, #64	; 0x40
   16ca4:	bne	16cc0 <__assert_fail@plt+0x5b14>
   16ca8:	bl	11050 <openat64@plt>
   16cac:	bl	1a894 <__assert_fail@plt+0x96e8>
   16cb0:	add	sp, sp, #12
   16cb4:	pop	{lr}		; (ldr lr, [sp], #4)
   16cb8:	add	sp, sp, #8
   16cbc:	bx	lr
   16cc0:	add	ip, sp, #20
   16cc4:	ldr	r3, [sp, #20]
   16cc8:	str	ip, [sp, #4]
   16ccc:	b	16ca8 <__assert_fail@plt+0x5afc>
   16cd0:	orr	r2, r2, #540672	; 0x84000
   16cd4:	strd	r4, [sp, #-16]!
   16cd8:	orr	r2, r2, #2304	; 0x900
   16cdc:	str	r6, [sp, #8]
   16ce0:	mov	r6, r3
   16ce4:	str	lr, [sp, #12]
   16ce8:	bl	16c90 <__assert_fail@plt+0x5ae4>
   16cec:	subs	r5, r0, #0
   16cf0:	movlt	r4, #0
   16cf4:	blt	16d08 <__assert_fail@plt+0x5b5c>
   16cf8:	bl	11110 <fdopendir@plt>
   16cfc:	subs	r4, r0, #0
   16d00:	beq	16d1c <__assert_fail@plt+0x5b70>
   16d04:	str	r5, [r6]
   16d08:	mov	r0, r4
   16d0c:	ldrd	r4, [sp]
   16d10:	ldr	r6, [sp, #8]
   16d14:	add	sp, sp, #12
   16d18:	pop	{pc}		; (ldr pc, [sp], #4)
   16d1c:	bl	11068 <__errno_location@plt>
   16d20:	mov	r6, r0
   16d24:	mov	r0, r5
   16d28:	ldr	r5, [r6]
   16d2c:	bl	11188 <close@plt>
   16d30:	b	16d04 <__assert_fail@plt+0x5b58>
   16d34:	strd	r4, [sp, #-16]!
   16d38:	subs	r4, r0, #0
   16d3c:	str	r6, [sp, #8]
   16d40:	str	lr, [sp, #12]
   16d44:	beq	16ddc <__assert_fail@plt+0x5c30>
   16d48:	mov	r1, #47	; 0x2f
   16d4c:	bl	110ec <strrchr@plt>
   16d50:	subs	r5, r0, #0
   16d54:	beq	16db4 <__assert_fail@plt+0x5c08>
   16d58:	add	r6, r5, #1
   16d5c:	sub	r3, r6, r4
   16d60:	cmp	r3, #6
   16d64:	ble	16db4 <__assert_fail@plt+0x5c08>
   16d68:	movw	r1, #52636	; 0xcd9c
   16d6c:	movt	r1, #1
   16d70:	mov	r2, #7
   16d74:	sub	r0, r5, #6
   16d78:	bl	11170 <strncmp@plt>
   16d7c:	cmp	r0, #0
   16d80:	bne	16db4 <__assert_fail@plt+0x5c08>
   16d84:	movw	r1, #52644	; 0xcda4
   16d88:	movt	r1, #1
   16d8c:	mov	r2, #3
   16d90:	mov	r0, r6
   16d94:	bl	11170 <strncmp@plt>
   16d98:	cmp	r0, #0
   16d9c:	movne	r4, r6
   16da0:	bne	16db4 <__assert_fail@plt+0x5c08>
   16da4:	add	r4, r5, #4
   16da8:	movw	r3, #57704	; 0xe168
   16dac:	movt	r3, #2
   16db0:	str	r4, [r3]
   16db4:	movw	r2, #57780	; 0xe1b4
   16db8:	movt	r2, #2
   16dbc:	ldr	r6, [sp, #8]
   16dc0:	movw	r3, #57708	; 0xe16c
   16dc4:	movt	r3, #2
   16dc8:	str	r4, [r2]
   16dcc:	str	r4, [r3]
   16dd0:	ldrd	r4, [sp]
   16dd4:	add	sp, sp, #12
   16dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ddc:	movw	r3, #57720	; 0xe178
   16de0:	movt	r3, #2
   16de4:	movw	r0, #52580	; 0xcd64
   16de8:	movt	r0, #1
   16dec:	ldr	r3, [r3]
   16df0:	mov	r2, #55	; 0x37
   16df4:	mov	r1, #1
   16df8:	bl	10f9c <fwrite@plt>
   16dfc:	bl	1117c <abort@plt>
   16e00:	mov	r2, #5
   16e04:	strd	r4, [sp, #-16]!
   16e08:	mov	r5, r0
   16e0c:	str	r6, [sp, #8]
   16e10:	mov	r6, r1
   16e14:	mov	r1, r0
   16e18:	mov	r0, #0
   16e1c:	str	lr, [sp, #12]
   16e20:	bl	10f54 <dcgettext@plt>
   16e24:	cmp	r5, r0
   16e28:	mov	r4, r0
   16e2c:	beq	16e44 <__assert_fail@plt+0x5c98>
   16e30:	mov	r0, r4
   16e34:	ldrd	r4, [sp]
   16e38:	ldr	r6, [sp, #8]
   16e3c:	add	sp, sp, #12
   16e40:	pop	{pc}		; (ldr pc, [sp], #4)
   16e44:	bl	1bdd8 <__assert_fail@plt+0xac2c>
   16e48:	ldrb	r3, [r0]
   16e4c:	bic	r3, r3, #32
   16e50:	cmp	r3, #85	; 0x55
   16e54:	bne	16ebc <__assert_fail@plt+0x5d10>
   16e58:	ldrb	r3, [r0, #1]
   16e5c:	bic	r3, r3, #32
   16e60:	cmp	r3, #84	; 0x54
   16e64:	bne	16f3c <__assert_fail@plt+0x5d90>
   16e68:	ldrb	r3, [r0, #2]
   16e6c:	bic	r3, r3, #32
   16e70:	cmp	r3, #70	; 0x46
   16e74:	bne	16f3c <__assert_fail@plt+0x5d90>
   16e78:	ldrb	r3, [r0, #3]
   16e7c:	cmp	r3, #45	; 0x2d
   16e80:	bne	16f3c <__assert_fail@plt+0x5d90>
   16e84:	ldrb	r3, [r0, #4]
   16e88:	cmp	r3, #56	; 0x38
   16e8c:	bne	16f3c <__assert_fail@plt+0x5d90>
   16e90:	ldrb	r3, [r0, #5]
   16e94:	cmp	r3, #0
   16e98:	bne	16f3c <__assert_fail@plt+0x5d90>
   16e9c:	ldrb	r2, [r4]
   16ea0:	movw	r3, #52736	; 0xce00
   16ea4:	movt	r3, #1
   16ea8:	movw	r4, #52748	; 0xce0c
   16eac:	movt	r4, #1
   16eb0:	cmp	r2, #96	; 0x60
   16eb4:	movne	r4, r3
   16eb8:	b	16e30 <__assert_fail@plt+0x5c84>
   16ebc:	cmp	r3, #71	; 0x47
   16ec0:	bne	16f3c <__assert_fail@plt+0x5d90>
   16ec4:	ldrb	r3, [r0, #1]
   16ec8:	bic	r3, r3, #32
   16ecc:	cmp	r3, #66	; 0x42
   16ed0:	bne	16f3c <__assert_fail@plt+0x5d90>
   16ed4:	ldrb	r3, [r0, #2]
   16ed8:	cmp	r3, #49	; 0x31
   16edc:	bne	16f3c <__assert_fail@plt+0x5d90>
   16ee0:	ldrb	r3, [r0, #3]
   16ee4:	cmp	r3, #56	; 0x38
   16ee8:	bne	16f3c <__assert_fail@plt+0x5d90>
   16eec:	ldrb	r3, [r0, #4]
   16ef0:	cmp	r3, #48	; 0x30
   16ef4:	bne	16f3c <__assert_fail@plt+0x5d90>
   16ef8:	ldrb	r3, [r0, #5]
   16efc:	cmp	r3, #51	; 0x33
   16f00:	bne	16f3c <__assert_fail@plt+0x5d90>
   16f04:	ldrb	r3, [r0, #6]
   16f08:	cmp	r3, #48	; 0x30
   16f0c:	bne	16f3c <__assert_fail@plt+0x5d90>
   16f10:	ldrb	r3, [r0, #7]
   16f14:	cmp	r3, #0
   16f18:	bne	16f3c <__assert_fail@plt+0x5d90>
   16f1c:	ldrb	r2, [r4]
   16f20:	movw	r3, #52740	; 0xce04
   16f24:	movt	r3, #1
   16f28:	movw	r4, #52744	; 0xce08
   16f2c:	movt	r4, #1
   16f30:	cmp	r2, #96	; 0x60
   16f34:	movne	r4, r3
   16f38:	b	16e30 <__assert_fail@plt+0x5c84>
   16f3c:	movw	r3, #52752	; 0xce10
   16f40:	movt	r3, #1
   16f44:	cmp	r6, #9
   16f48:	movw	r4, #52732	; 0xcdfc
   16f4c:	movt	r4, #1
   16f50:	movne	r4, r3
   16f54:	b	16e30 <__assert_fail@plt+0x5c84>
   16f58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16f5c:	strd	r6, [sp, #8]
   16f60:	strd	r8, [sp, #16]
   16f64:	mov	r8, r3
   16f68:	strd	sl, [sp, #24]
   16f6c:	mov	fp, r0
   16f70:	mov	sl, r1
   16f74:	str	lr, [sp, #32]
   16f78:	sub	sp, sp, #140	; 0x8c
   16f7c:	ldr	r3, [sp, #180]	; 0xb4
   16f80:	str	r2, [sp, #28]
   16f84:	and	r4, r3, #2
   16f88:	ubfx	r3, r3, #1, #1
   16f8c:	str	r3, [sp, #44]	; 0x2c
   16f90:	bl	10fb4 <__ctype_get_mb_cur_max@plt>
   16f94:	ldr	r3, [sp, #176]	; 0xb0
   16f98:	str	r0, [sp, #76]	; 0x4c
   16f9c:	cmp	r3, #10
   16fa0:	ldrls	pc, [pc, r3, lsl #2]
   16fa4:	b	18940 <__assert_fail@plt+0x7794>
   16fa8:	andeq	r7, r1, r8, lsr #8
   16fac:	andeq	r7, r1, r4, asr #10
   16fb0:	andeq	r7, r1, r0, asr #21
   16fb4:			; <UNDEFINED> instruction: 0x000175b0
   16fb8:	andeq	r7, r1, r0, lsr r3
   16fbc:	andeq	r7, r1, ip, lsr #7
   16fc0:	andeq	r7, r1, r4, lsl #9
   16fc4:	andeq	r7, r1, ip, ror #9
   16fc8:	ldrdeq	r6, [r1], -r4
   16fcc:	ldrdeq	r6, [r1], -r4
   16fd0:	ldrdeq	r6, [r1], -r4
   16fd4:	ldr	r3, [sp, #176]	; 0xb0
   16fd8:	cmp	r3, #10
   16fdc:	beq	17008 <__assert_fail@plt+0x5e5c>
   16fe0:	mov	r1, r3
   16fe4:	movw	r0, #52756	; 0xce14
   16fe8:	movt	r0, #1
   16fec:	bl	16e00 <__assert_fail@plt+0x5c54>
   16ff0:	str	r0, [sp, #188]	; 0xbc
   16ff4:	movw	r0, #52752	; 0xce10
   16ff8:	movt	r0, #1
   16ffc:	ldr	r1, [sp, #176]	; 0xb0
   17000:	bl	16e00 <__assert_fail@plt+0x5c54>
   17004:	str	r0, [sp, #192]	; 0xc0
   17008:	cmp	r4, #0
   1700c:	movne	r4, #0
   17010:	beq	186cc <__assert_fail@plt+0x7520>
   17014:	mov	r5, #0
   17018:	ldr	r0, [sp, #192]	; 0xc0
   1701c:	mov	r9, r5
   17020:	str	r5, [sp, #64]	; 0x40
   17024:	bl	11044 <strlen@plt>
   17028:	mov	r3, #1
   1702c:	ldr	r2, [sp, #44]	; 0x2c
   17030:	cmp	r0, r5
   17034:	moveq	r2, r5
   17038:	str	r3, [sp, #32]
   1703c:	str	r3, [sp, #48]	; 0x30
   17040:	str	r5, [sp, #52]	; 0x34
   17044:	str	r3, [sp, #60]	; 0x3c
   17048:	ldr	r3, [sp, #180]	; 0xb4
   1704c:	str	r0, [sp, #56]	; 0x38
   17050:	str	r5, [sp, #68]	; 0x44
   17054:	str	r5, [sp, #80]	; 0x50
   17058:	str	r5, [sp, #84]	; 0x54
   1705c:	and	r3, r3, #1
   17060:	str	r2, [sp, #88]	; 0x58
   17064:	str	r3, [sp, #92]	; 0x5c
   17068:	ldr	r3, [sp, #180]	; 0xb4
   1706c:	and	r3, r3, #4
   17070:	str	r3, [sp, #96]	; 0x60
   17074:	ldr	r3, [sp, #192]	; 0xc0
   17078:	str	r3, [sp, #72]	; 0x48
   1707c:	mov	r3, fp
   17080:	mov	r7, #0
   17084:	mov	fp, r9
   17088:	mov	r9, r3
   1708c:	cmn	r8, #1
   17090:	beq	17694 <__assert_fail@plt+0x64e8>
   17094:	subs	r6, r8, r7
   17098:	movne	r6, #1
   1709c:	cmp	r6, #0
   170a0:	beq	176ac <__assert_fail@plt+0x6500>
   170a4:	ldr	r0, [sp, #28]
   170a8:	ldr	r3, [sp, #48]	; 0x30
   170ac:	cmp	r3, #0
   170b0:	add	r3, r0, r7
   170b4:	str	r3, [sp, #36]	; 0x24
   170b8:	beq	17b38 <__assert_fail@plt+0x698c>
   170bc:	ldr	r2, [sp, #56]	; 0x38
   170c0:	cmp	r2, #0
   170c4:	beq	18038 <__assert_fail@plt+0x6e8c>
   170c8:	cmp	r2, #1
   170cc:	mov	r3, r2
   170d0:	movls	r3, #0
   170d4:	movhi	r3, #1
   170d8:	cmn	r8, #1
   170dc:	add	r5, r7, r2
   170e0:	movne	r3, #0
   170e4:	cmp	r3, #0
   170e8:	beq	170f4 <__assert_fail@plt+0x5f48>
   170ec:	bl	11044 <strlen@plt>
   170f0:	mov	r8, r0
   170f4:	cmp	r5, r8
   170f8:	bhi	18038 <__assert_fail@plt+0x6e8c>
   170fc:	ldr	r0, [sp, #36]	; 0x24
   17100:	ldr	r2, [sp, #56]	; 0x38
   17104:	ldr	r1, [sp, #72]	; 0x48
   17108:	bl	10f3c <memcmp@plt>
   1710c:	cmp	r0, #0
   17110:	bne	18038 <__assert_fail@plt+0x6e8c>
   17114:	ldr	r3, [sp, #44]	; 0x2c
   17118:	cmp	r3, #0
   1711c:	bne	187e4 <__assert_fail@plt+0x7638>
   17120:	ldr	r3, [sp, #36]	; 0x24
   17124:	ldrb	r5, [r3]
   17128:	cmp	r5, #126	; 0x7e
   1712c:	ldrls	pc, [pc, r5, lsl #2]
   17130:	b	185cc <__assert_fail@plt+0x7420>
   17134:	andeq	r7, r1, r8, lsl #16
   17138:	andeq	r8, r1, ip, asr #11
   1713c:	andeq	r8, r1, ip, asr #11
   17140:	andeq	r8, r1, ip, asr #11
   17144:	andeq	r8, r1, ip, asr #11
   17148:	andeq	r8, r1, ip, asr #11
   1714c:	andeq	r8, r1, ip, asr #11
   17150:	andeq	r7, r1, r0, ror #14
   17154:	andeq	r7, r1, r8, asr r7
   17158:	andeq	r7, r1, r8, ror #14
   1715c:	andeq	r7, r1, ip, ror #17
   17160:	ldrdeq	r7, [r1], -ip
   17164:	andeq	r7, r1, r4, lsl #12
   17168:			; <UNDEFINED> instruction: 0x000178b8
   1716c:	andeq	r8, r1, ip, asr #11
   17170:	andeq	r8, r1, ip, asr #11
   17174:	andeq	r8, r1, ip, asr #11
   17178:	andeq	r8, r1, ip, asr #11
   1717c:	andeq	r8, r1, ip, asr #11
   17180:	andeq	r8, r1, ip, asr #11
   17184:	andeq	r8, r1, ip, asr #11
   17188:	andeq	r8, r1, ip, asr #11
   1718c:	andeq	r8, r1, ip, asr #11
   17190:	andeq	r8, r1, ip, asr #11
   17194:	andeq	r8, r1, ip, asr #11
   17198:	andeq	r8, r1, ip, asr #11
   1719c:	andeq	r8, r1, ip, asr #11
   171a0:	andeq	r8, r1, ip, asr #11
   171a4:	andeq	r8, r1, ip, asr #11
   171a8:	andeq	r8, r1, ip, asr #11
   171ac:	andeq	r8, r1, ip, asr #11
   171b0:	andeq	r8, r1, ip, asr #11
   171b4:	andeq	r7, r1, r4, ror #18
   171b8:	andeq	r7, r1, r8, asr r9
   171bc:	andeq	r7, r1, r8, asr r9
   171c0:	andeq	r7, r1, ip, asr #18
   171c4:	andeq	r7, r1, r8, asr r9
   171c8:	andeq	r7, r1, r0, lsr sl
   171cc:	andeq	r7, r1, r8, asr r9
   171d0:	andeq	r7, r1, r0, lsr #21
   171d4:	andeq	r7, r1, r8, asr r9
   171d8:	andeq	r7, r1, r8, asr r9
   171dc:	andeq	r7, r1, r8, asr r9
   171e0:	andeq	r7, r1, r0, lsr sl
   171e4:	andeq	r7, r1, r0, lsr sl
   171e8:	andeq	r7, r1, r0, lsr sl
   171ec:	andeq	r7, r1, r0, lsr sl
   171f0:	andeq	r7, r1, r0, lsr sl
   171f4:	andeq	r7, r1, r0, lsr sl
   171f8:	andeq	r7, r1, r0, lsr sl
   171fc:	andeq	r7, r1, r0, lsr sl
   17200:	andeq	r7, r1, r0, lsr sl
   17204:	andeq	r7, r1, r0, lsr sl
   17208:	andeq	r7, r1, r0, lsr sl
   1720c:	andeq	r7, r1, r0, lsr sl
   17210:	andeq	r7, r1, r0, lsr sl
   17214:	andeq	r7, r1, r0, lsr sl
   17218:	andeq	r7, r1, r0, lsr sl
   1721c:	andeq	r7, r1, r0, lsr sl
   17220:	andeq	r7, r1, r8, asr r9
   17224:	andeq	r7, r1, r8, asr r9
   17228:	andeq	r7, r1, r8, asr r9
   1722c:	andeq	r7, r1, r8, asr r9
   17230:	andeq	r7, r1, r0, asr sl
   17234:	andeq	r8, r1, ip, asr #11
   17238:	andeq	r7, r1, r0, lsr sl
   1723c:	andeq	r7, r1, r0, lsr sl
   17240:	andeq	r7, r1, r0, lsr sl
   17244:	andeq	r7, r1, r0, lsr sl
   17248:	andeq	r7, r1, r0, lsr sl
   1724c:	andeq	r7, r1, r0, lsr sl
   17250:	andeq	r7, r1, r0, lsr sl
   17254:	andeq	r7, r1, r0, lsr sl
   17258:	andeq	r7, r1, r0, lsr sl
   1725c:	andeq	r7, r1, r0, lsr sl
   17260:	andeq	r7, r1, r0, lsr sl
   17264:	andeq	r7, r1, r0, lsr sl
   17268:	andeq	r7, r1, r0, lsr sl
   1726c:	andeq	r7, r1, r0, lsr sl
   17270:	andeq	r7, r1, r0, lsr sl
   17274:	andeq	r7, r1, r0, lsr sl
   17278:	andeq	r7, r1, r0, lsr sl
   1727c:	andeq	r7, r1, r0, lsr sl
   17280:	andeq	r7, r1, r0, lsr sl
   17284:	andeq	r7, r1, r0, lsr sl
   17288:	andeq	r7, r1, r0, lsr sl
   1728c:	andeq	r7, r1, r0, lsr sl
   17290:	andeq	r7, r1, r0, lsr sl
   17294:	andeq	r7, r1, r0, lsr sl
   17298:	andeq	r7, r1, r0, lsr sl
   1729c:	andeq	r7, r1, r0, lsr sl
   172a0:	andeq	r7, r1, r8, asr r9
   172a4:	strdeq	r7, [r1], -r4
   172a8:	andeq	r7, r1, r0, lsr sl
   172ac:	andeq	r7, r1, r8, asr r9
   172b0:	andeq	r7, r1, r0, lsr sl
   172b4:	andeq	r7, r1, r8, asr r9
   172b8:	andeq	r7, r1, r0, lsr sl
   172bc:	andeq	r7, r1, r0, lsr sl
   172c0:	andeq	r7, r1, r0, lsr sl
   172c4:	andeq	r7, r1, r0, lsr sl
   172c8:	andeq	r7, r1, r0, lsr sl
   172cc:	andeq	r7, r1, r0, lsr sl
   172d0:	andeq	r7, r1, r0, lsr sl
   172d4:	andeq	r7, r1, r0, lsr sl
   172d8:	andeq	r7, r1, r0, lsr sl
   172dc:	andeq	r7, r1, r0, lsr sl
   172e0:	andeq	r7, r1, r0, lsr sl
   172e4:	andeq	r7, r1, r0, lsr sl
   172e8:	andeq	r7, r1, r0, lsr sl
   172ec:	andeq	r7, r1, r0, lsr sl
   172f0:	andeq	r7, r1, r0, lsr sl
   172f4:	andeq	r7, r1, r0, lsr sl
   172f8:	andeq	r7, r1, r0, lsr sl
   172fc:	andeq	r7, r1, r0, lsr sl
   17300:	andeq	r7, r1, r0, lsr sl
   17304:	andeq	r7, r1, r0, lsr sl
   17308:	andeq	r7, r1, r0, lsr sl
   1730c:	andeq	r7, r1, r0, lsr sl
   17310:	andeq	r7, r1, r0, lsr sl
   17314:	andeq	r7, r1, r0, lsr sl
   17318:	andeq	r7, r1, r0, lsr sl
   1731c:	andeq	r7, r1, r0, lsr sl
   17320:	andeq	r7, r1, r0, lsl #18
   17324:	andeq	r7, r1, r8, asr r9
   17328:	andeq	r7, r1, r0, lsl #18
   1732c:	andeq	r7, r1, ip, asr #18
   17330:	ldr	r3, [sp, #180]	; 0xb4
   17334:	cmp	r4, #0
   17338:	and	r3, r3, #1
   1733c:	str	r3, [sp, #92]	; 0x5c
   17340:	ldr	r3, [sp, #180]	; 0xb4
   17344:	and	r3, r3, #4
   17348:	str	r3, [sp, #96]	; 0x60
   1734c:	moveq	r3, #1
   17350:	streq	r3, [sp, #60]	; 0x3c
   17354:	beq	17ae4 <__assert_fail@plt+0x6938>
   17358:	mov	r3, #0
   1735c:	mov	r2, #1
   17360:	mov	r4, r3
   17364:	mov	r9, r3
   17368:	str	r2, [sp, #32]
   1736c:	str	r2, [sp, #44]	; 0x2c
   17370:	str	r3, [sp, #48]	; 0x30
   17374:	str	r2, [sp, #52]	; 0x34
   17378:	str	r2, [sp, #56]	; 0x38
   1737c:	str	r3, [sp, #60]	; 0x3c
   17380:	str	r2, [sp, #64]	; 0x40
   17384:	str	r2, [sp, #68]	; 0x44
   17388:	str	r3, [sp, #80]	; 0x50
   1738c:	str	r3, [sp, #84]	; 0x54
   17390:	str	r3, [sp, #88]	; 0x58
   17394:	movw	r3, #52752	; 0xce10
   17398:	movt	r3, #1
   1739c:	str	r3, [sp, #72]	; 0x48
   173a0:	mov	r3, #2
   173a4:	str	r3, [sp, #176]	; 0xb0
   173a8:	b	1707c <__assert_fail@plt+0x5ed0>
   173ac:	ldr	r3, [sp, #180]	; 0xb4
   173b0:	cmp	r4, #0
   173b4:	and	r3, r3, #1
   173b8:	str	r3, [sp, #92]	; 0x5c
   173bc:	ldr	r3, [sp, #180]	; 0xb4
   173c0:	and	r3, r3, #4
   173c4:	str	r3, [sp, #96]	; 0x60
   173c8:	bne	1879c <__assert_fail@plt+0x75f0>
   173cc:	cmp	sl, #0
   173d0:	beq	18548 <__assert_fail@plt+0x739c>
   173d4:	mov	r3, #34	; 0x22
   173d8:	mov	r2, r4
   173dc:	mov	r1, #1
   173e0:	mov	r9, r2
   173e4:	strb	r3, [fp]
   173e8:	movw	r3, #52732	; 0xcdfc
   173ec:	movt	r3, #1
   173f0:	mov	r4, r1
   173f4:	str	r1, [sp, #32]
   173f8:	str	r2, [sp, #44]	; 0x2c
   173fc:	str	r1, [sp, #48]	; 0x30
   17400:	str	r2, [sp, #52]	; 0x34
   17404:	str	r1, [sp, #56]	; 0x38
   17408:	str	r1, [sp, #60]	; 0x3c
   1740c:	str	r2, [sp, #64]	; 0x40
   17410:	str	r2, [sp, #68]	; 0x44
   17414:	str	r3, [sp, #72]	; 0x48
   17418:	str	r2, [sp, #80]	; 0x50
   1741c:	str	r2, [sp, #84]	; 0x54
   17420:	str	r2, [sp, #88]	; 0x58
   17424:	b	1707c <__assert_fail@plt+0x5ed0>
   17428:	mov	r3, #0
   1742c:	mov	r2, #1
   17430:	mov	r9, r3
   17434:	str	r2, [sp, #32]
   17438:	str	r3, [sp, #44]	; 0x2c
   1743c:	str	r3, [sp, #48]	; 0x30
   17440:	str	r3, [sp, #52]	; 0x34
   17444:	str	r3, [sp, #60]	; 0x3c
   17448:	strd	r2, [sp, #64]	; 0x40
   1744c:	str	r3, [sp, #72]	; 0x48
   17450:	str	r3, [sp, #80]	; 0x50
   17454:	str	r3, [sp, #88]	; 0x58
   17458:	ldr	r3, [sp, #180]	; 0xb4
   1745c:	and	r3, r3, r2
   17460:	str	r3, [sp, #92]	; 0x5c
   17464:	ldr	r3, [sp, #180]	; 0xb4
   17468:	and	r3, r3, #4
   1746c:	str	r3, [sp, #96]	; 0x60
   17470:	ldr	r3, [sp, #176]	; 0xb0
   17474:	mov	r4, r3
   17478:	str	r3, [sp, #56]	; 0x38
   1747c:	str	r3, [sp, #84]	; 0x54
   17480:	b	1707c <__assert_fail@plt+0x5ed0>
   17484:	mov	r3, #1
   17488:	mov	r4, #0
   1748c:	mov	r9, r4
   17490:	str	r3, [sp, #32]
   17494:	str	r3, [sp, #44]	; 0x2c
   17498:	str	r3, [sp, #48]	; 0x30
   1749c:	str	r4, [sp, #52]	; 0x34
   174a0:	str	r3, [sp, #56]	; 0x38
   174a4:	str	r3, [sp, #60]	; 0x3c
   174a8:	str	r3, [sp, #88]	; 0x58
   174ac:	movw	r3, #52732	; 0xcdfc
   174b0:	movt	r3, #1
   174b4:	str	r4, [sp, #64]	; 0x40
   174b8:	str	r4, [sp, #68]	; 0x44
   174bc:	str	r3, [sp, #72]	; 0x48
   174c0:	ldr	r3, [sp, #180]	; 0xb4
   174c4:	str	r4, [sp, #80]	; 0x50
   174c8:	str	r4, [sp, #84]	; 0x54
   174cc:	and	r3, r3, #1
   174d0:	str	r3, [sp, #92]	; 0x5c
   174d4:	ldr	r3, [sp, #180]	; 0xb4
   174d8:	and	r3, r3, #4
   174dc:	str	r3, [sp, #96]	; 0x60
   174e0:	mov	r3, #5
   174e4:	str	r3, [sp, #176]	; 0xb0
   174e8:	b	1707c <__assert_fail@plt+0x5ed0>
   174ec:	mov	r3, #1
   174f0:	mov	r4, #0
   174f4:	mov	r9, r4
   174f8:	str	r3, [sp, #32]
   174fc:	str	r4, [sp, #44]	; 0x2c
   17500:	str	r3, [sp, #48]	; 0x30
   17504:	str	r3, [sp, #60]	; 0x3c
   17508:	ldr	r3, [sp, #180]	; 0xb4
   1750c:	str	r4, [sp, #52]	; 0x34
   17510:	str	r4, [sp, #56]	; 0x38
   17514:	str	r4, [sp, #64]	; 0x40
   17518:	str	r4, [sp, #68]	; 0x44
   1751c:	and	r3, r3, #1
   17520:	str	r4, [sp, #72]	; 0x48
   17524:	str	r4, [sp, #80]	; 0x50
   17528:	str	r4, [sp, #84]	; 0x54
   1752c:	str	r3, [sp, #92]	; 0x5c
   17530:	ldr	r3, [sp, #180]	; 0xb4
   17534:	str	r4, [sp, #88]	; 0x58
   17538:	and	r3, r3, #4
   1753c:	str	r3, [sp, #96]	; 0x60
   17540:	b	1707c <__assert_fail@plt+0x5ed0>
   17544:	mov	r3, #0
   17548:	mov	r2, #1
   1754c:	ldr	r1, [sp, #176]	; 0xb0
   17550:	mov	r4, r3
   17554:	mov	r9, r3
   17558:	movw	r3, #52752	; 0xce10
   1755c:	movt	r3, #1
   17560:	str	r2, [sp, #32]
   17564:	str	r2, [sp, #44]	; 0x2c
   17568:	str	r4, [sp, #48]	; 0x30
   1756c:	strd	r2, [sp, #68]	; 0x44
   17570:	ldr	r3, [sp, #180]	; 0xb4
   17574:	str	r2, [sp, #52]	; 0x34
   17578:	str	r1, [sp, #56]	; 0x38
   1757c:	str	r4, [sp, #60]	; 0x3c
   17580:	str	r2, [sp, #64]	; 0x40
   17584:	and	r3, r3, r2
   17588:	str	r4, [sp, #80]	; 0x50
   1758c:	str	r4, [sp, #84]	; 0x54
   17590:	str	r4, [sp, #88]	; 0x58
   17594:	str	r3, [sp, #92]	; 0x5c
   17598:	ldr	r3, [sp, #180]	; 0xb4
   1759c:	and	r3, r3, #4
   175a0:	str	r3, [sp, #96]	; 0x60
   175a4:	mov	r3, #2
   175a8:	str	r3, [sp, #176]	; 0xb0
   175ac:	b	1707c <__assert_fail@plt+0x5ed0>
   175b0:	mov	r3, #1
   175b4:	mov	r2, #0
   175b8:	mov	r4, r2
   175bc:	mov	r9, r2
   175c0:	str	r3, [sp, #32]
   175c4:	str	r3, [sp, #44]	; 0x2c
   175c8:	str	r2, [sp, #48]	; 0x30
   175cc:	str	r3, [sp, #52]	; 0x34
   175d0:	str	r3, [sp, #56]	; 0x38
   175d4:	str	r3, [sp, #60]	; 0x3c
   175d8:	str	r3, [sp, #64]	; 0x40
   175dc:	str	r3, [sp, #68]	; 0x44
   175e0:	str	r3, [sp, #88]	; 0x58
   175e4:	movw	r3, #52752	; 0xce10
   175e8:	movt	r3, #1
   175ec:	str	r3, [sp, #72]	; 0x48
   175f0:	ldr	r3, [sp, #180]	; 0xb4
   175f4:	str	r2, [sp, #80]	; 0x50
   175f8:	str	r2, [sp, #84]	; 0x54
   175fc:	and	r3, r3, #1
   17600:	b	17594 <__assert_fail@plt+0x63e8>
   17604:	mov	r5, #102	; 0x66
   17608:	mov	r6, #0
   1760c:	ldr	r3, [sp, #44]	; 0x2c
   17610:	cmp	r3, #0
   17614:	bne	184c4 <__assert_fail@plt+0x7318>
   17618:	ldr	r2, [sp, #52]	; 0x34
   1761c:	eor	r3, fp, #1
   17620:	ands	r3, r2, r3
   17624:	beq	1765c <__assert_fail@plt+0x64b0>
   17628:	cmp	sl, r4
   1762c:	mov	fp, r3
   17630:	movhi	r2, #39	; 0x27
   17634:	strbhi	r2, [r9, r4]
   17638:	add	r2, r4, #1
   1763c:	cmp	sl, r2
   17640:	movhi	r1, #36	; 0x24
   17644:	strbhi	r1, [r9, r2]
   17648:	add	r2, r4, #2
   1764c:	add	r4, r4, #3
   17650:	cmp	sl, r2
   17654:	movhi	r1, #39	; 0x27
   17658:	strbhi	r1, [r9, r2]
   1765c:	cmp	sl, r4
   17660:	add	r7, r7, #1
   17664:	movhi	r3, #92	; 0x5c
   17668:	strbhi	r3, [r9, r4]
   1766c:	add	r4, r4, #1
   17670:	cmp	r4, sl
   17674:	ldr	r3, [sp, #32]
   17678:	strbcc	r5, [r9, r4]
   1767c:	cmp	r6, #0
   17680:	add	r4, r4, #1
   17684:	moveq	r3, #0
   17688:	cmn	r8, #1
   1768c:	str	r3, [sp, #32]
   17690:	bne	17094 <__assert_fail@plt+0x5ee8>
   17694:	ldr	r3, [sp, #28]
   17698:	ldrb	r6, [r3, r7]
   1769c:	adds	r6, r6, #0
   176a0:	movne	r6, #1
   176a4:	cmp	r6, #0
   176a8:	bne	170a4 <__assert_fail@plt+0x5ef8>
   176ac:	mov	r3, r9
   176b0:	mov	r9, fp
   176b4:	mov	fp, r3
   176b8:	ldr	r3, [sp, #68]	; 0x44
   176bc:	cmp	r4, #0
   176c0:	movne	r3, #0
   176c4:	cmp	r3, #0
   176c8:	bne	188bc <__assert_fail@plt+0x7710>
   176cc:	ldr	r3, [sp, #44]	; 0x2c
   176d0:	ldr	r2, [sp, #52]	; 0x34
   176d4:	eor	r3, r3, #1
   176d8:	ands	r2, r3, r2
   176dc:	beq	187f4 <__assert_fail@plt+0x7648>
   176e0:	ldr	r3, [sp, #80]	; 0x50
   176e4:	cmp	r3, #0
   176e8:	beq	187f8 <__assert_fail@plt+0x764c>
   176ec:	ldr	r3, [sp, #32]
   176f0:	cmp	r3, #0
   176f4:	bne	1886c <__assert_fail@plt+0x76c0>
   176f8:	ldr	r3, [sp, #84]	; 0x54
   176fc:	adds	r3, r3, #0
   17700:	movne	r3, #1
   17704:	cmp	sl, #0
   17708:	movne	r3, #0
   1770c:	cmp	r3, #0
   17710:	ldreq	r2, [sp, #80]	; 0x50
   17714:	beq	187f8 <__assert_fail@plt+0x764c>
   17718:	ldr	r2, [sp, #84]	; 0x54
   1771c:	mov	sl, r2
   17720:	mov	r0, #0
   17724:	mov	r4, #1
   17728:	mov	r1, #39	; 0x27
   1772c:	str	r0, [sp, #44]	; 0x2c
   17730:	strb	r1, [fp]
   17734:	str	r0, [sp, #48]	; 0x30
   17738:	str	r4, [sp, #52]	; 0x34
   1773c:	str	r4, [sp, #56]	; 0x38
   17740:	str	r4, [sp, #64]	; 0x40
   17744:	str	r0, [sp, #68]	; 0x44
   17748:	str	r3, [sp, #80]	; 0x50
   1774c:	str	r2, [sp, #84]	; 0x54
   17750:	str	r0, [sp, #88]	; 0x58
   17754:	b	17394 <__assert_fail@plt+0x61e8>
   17758:	mov	r5, #98	; 0x62
   1775c:	b	17608 <__assert_fail@plt+0x645c>
   17760:	mov	r5, #97	; 0x61
   17764:	b	17608 <__assert_fail@plt+0x645c>
   17768:	ldr	r3, [sp, #48]	; 0x30
   1776c:	str	r3, [sp, #40]	; 0x28
   17770:	mov	r3, #116	; 0x74
   17774:	ldr	r2, [sp, #68]	; 0x44
   17778:	cmp	r2, #0
   1777c:	bne	17978 <__assert_fail@plt+0x67cc>
   17780:	ldr	r2, [sp, #60]	; 0x3c
   17784:	cmp	r2, #0
   17788:	bne	178d4 <__assert_fail@plt+0x6728>
   1778c:	ldr	r3, [sp, #44]	; 0x2c
   17790:	mov	r6, #0
   17794:	cmp	r3, #0
   17798:	beq	17944 <__assert_fail@plt+0x6798>
   1779c:	mov	r3, fp
   177a0:	ldr	r2, [sp, #184]	; 0xb8
   177a4:	cmp	r2, #0
   177a8:	beq	177c8 <__assert_fail@plt+0x661c>
   177ac:	ubfx	r1, r5, #5, #8
   177b0:	mov	r0, r2
   177b4:	and	r2, r5, #31
   177b8:	ldr	r1, [r0, r1, lsl #2]
   177bc:	lsr	r2, r1, r2
   177c0:	tst	r2, #1
   177c4:	bne	1760c <__assert_fail@plt+0x6460>
   177c8:	ldr	r2, [sp, #40]	; 0x28
   177cc:	cmp	r2, #0
   177d0:	addeq	r7, r7, #1
   177d4:	bne	1760c <__assert_fail@plt+0x6460>
   177d8:	cmp	r3, #0
   177dc:	beq	17670 <__assert_fail@plt+0x64c4>
   177e0:	cmp	sl, r4
   177e4:	mov	fp, #0
   177e8:	movhi	r3, #39	; 0x27
   177ec:	strbhi	r3, [r9, r4]
   177f0:	add	r3, r4, #1
   177f4:	add	r4, r4, #2
   177f8:	cmp	sl, r3
   177fc:	movhi	r2, #39	; 0x27
   17800:	strbhi	r2, [r9, r3]
   17804:	b	17670 <__assert_fail@plt+0x64c4>
   17808:	ldr	r3, [sp, #48]	; 0x30
   1780c:	str	r3, [sp, #40]	; 0x28
   17810:	eor	r3, fp, #1
   17814:	ldr	r2, [sp, #52]	; 0x34
   17818:	ands	r2, r2, r3
   1781c:	beq	184dc <__assert_fail@plt+0x7330>
   17820:	cmp	sl, r4
   17824:	movhi	r3, #39	; 0x27
   17828:	strbhi	r3, [r9, r4]
   1782c:	add	r3, r4, #1
   17830:	cmp	sl, r3
   17834:	movhi	r1, #36	; 0x24
   17838:	strbhi	r1, [r9, r3]
   1783c:	add	r3, r4, #2
   17840:	cmp	sl, r3
   17844:	movhi	r1, #39	; 0x27
   17848:	strbhi	r1, [r9, r3]
   1784c:	add	r3, r4, #3
   17850:	cmp	sl, r3
   17854:	bls	18528 <__assert_fail@plt+0x737c>
   17858:	mov	r4, r3
   1785c:	mov	r3, #92	; 0x5c
   17860:	mov	fp, r2
   17864:	mov	r2, r4
   17868:	strb	r3, [r9, r4]
   1786c:	ldr	r3, [sp, #176]	; 0xb0
   17870:	add	r4, r4, #1
   17874:	cmp	r3, #2
   17878:	beq	18590 <__assert_fail@plt+0x73e4>
   1787c:	add	r3, r7, #1
   17880:	cmp	r3, r8
   17884:	bcs	1789c <__assert_fail@plt+0x66f0>
   17888:	ldr	r1, [sp, #28]
   1788c:	ldrb	r3, [r1, r3]
   17890:	sub	r3, r3, #48	; 0x30
   17894:	cmp	r3, #9
   17898:	bls	185a0 <__assert_fail@plt+0x73f4>
   1789c:	mov	r3, #0
   178a0:	mov	r5, #48	; 0x30
   178a4:	ldr	r6, [sp, #64]	; 0x40
   178a8:	cmp	r6, #0
   178ac:	beq	177a0 <__assert_fail@plt+0x65f4>
   178b0:	mov	r6, #0
   178b4:	b	177c8 <__assert_fail@plt+0x661c>
   178b8:	ldr	r3, [sp, #48]	; 0x30
   178bc:	str	r3, [sp, #40]	; 0x28
   178c0:	ldr	r2, [sp, #60]	; 0x3c
   178c4:	mov	r5, #13
   178c8:	mov	r3, #114	; 0x72
   178cc:	cmp	r2, #0
   178d0:	beq	1778c <__assert_fail@plt+0x65e0>
   178d4:	mov	r5, r3
   178d8:	b	17608 <__assert_fail@plt+0x645c>
   178dc:	ldr	r3, [sp, #48]	; 0x30
   178e0:	str	r3, [sp, #40]	; 0x28
   178e4:	mov	r3, #118	; 0x76
   178e8:	b	17780 <__assert_fail@plt+0x65d4>
   178ec:	ldr	r3, [sp, #48]	; 0x30
   178f0:	str	r3, [sp, #40]	; 0x28
   178f4:	mov	r5, #10
   178f8:	mov	r3, #110	; 0x6e
   178fc:	b	17780 <__assert_fail@plt+0x65d4>
   17900:	ldr	r3, [sp, #48]	; 0x30
   17904:	cmn	r8, #1
   17908:	str	r3, [sp, #40]	; 0x28
   1790c:	beq	17d54 <__assert_fail@plt+0x6ba8>
   17910:	subs	r3, r8, #1
   17914:	movne	r3, #1
   17918:	cmp	r3, #0
   1791c:	bne	17928 <__assert_fail@plt+0x677c>
   17920:	cmp	r7, #0
   17924:	beq	1796c <__assert_fail@plt+0x67c0>
   17928:	mov	r6, #0
   1792c:	ldr	r3, [sp, #64]	; 0x40
   17930:	cmp	r3, #0
   17934:	beq	1779c <__assert_fail@plt+0x65f0>
   17938:	ldr	r3, [sp, #44]	; 0x2c
   1793c:	cmp	r3, #0
   17940:	bne	1779c <__assert_fail@plt+0x65f0>
   17944:	mov	r3, fp
   17948:	b	177c8 <__assert_fail@plt+0x661c>
   1794c:	ldr	r3, [sp, #48]	; 0x30
   17950:	str	r3, [sp, #40]	; 0x28
   17954:	b	17920 <__assert_fail@plt+0x6774>
   17958:	ldr	r3, [sp, #48]	; 0x30
   1795c:	str	r3, [sp, #40]	; 0x28
   17960:	b	17928 <__assert_fail@plt+0x677c>
   17964:	ldr	r6, [sp, #48]	; 0x30
   17968:	str	r6, [sp, #40]	; 0x28
   1796c:	ldr	r3, [sp, #68]	; 0x44
   17970:	cmp	r3, #0
   17974:	beq	1792c <__assert_fail@plt+0x6780>
   17978:	mov	r3, #2
   1797c:	mov	fp, r9
   17980:	str	r3, [sp, #176]	; 0xb0
   17984:	ldr	r3, [sp, #60]	; 0x3c
   17988:	cmp	r3, #0
   1798c:	ldr	r3, [sp, #176]	; 0xb0
   17990:	movne	r3, #4
   17994:	str	r3, [sp, #176]	; 0xb0
   17998:	mov	lr, #0
   1799c:	mov	r0, fp
   179a0:	ldr	r2, [sp, #28]
   179a4:	ldr	r3, [sp, #180]	; 0xb4
   179a8:	ldr	r1, [sp, #188]	; 0xbc
   179ac:	bic	ip, r3, #2
   179b0:	ldr	r3, [sp, #176]	; 0xb0
   179b4:	stm	sp, {r3, ip, lr}
   179b8:	mov	r3, r8
   179bc:	ldr	ip, [sp, #192]	; 0xc0
   179c0:	str	r1, [sp, #12]
   179c4:	mov	r1, sl
   179c8:	str	ip, [sp, #16]
   179cc:	bl	16f58 <__assert_fail@plt+0x5dac>
   179d0:	mov	r4, r0
   179d4:	mov	r0, r4
   179d8:	add	sp, sp, #140	; 0x8c
   179dc:	ldrd	r4, [sp]
   179e0:	ldrd	r6, [sp, #8]
   179e4:	ldrd	r8, [sp, #16]
   179e8:	ldrd	sl, [sp, #24]
   179ec:	add	sp, sp, #32
   179f0:	pop	{pc}		; (ldr pc, [sp], #4)
   179f4:	ldr	r3, [sp, #48]	; 0x30
   179f8:	str	r3, [sp, #40]	; 0x28
   179fc:	ldr	r3, [sp, #176]	; 0xb0
   17a00:	cmp	r3, #2
   17a04:	beq	17d7c <__assert_fail@plt+0x6bd0>
   17a08:	ldr	r3, [sp, #88]	; 0x58
   17a0c:	cmp	r3, #0
   17a10:	moveq	r5, #92	; 0x5c
   17a14:	moveq	r3, r5
   17a18:	beq	17780 <__assert_fail@plt+0x65d4>
   17a1c:	add	r7, r7, #1
   17a20:	mov	r3, fp
   17a24:	mov	r6, #0
   17a28:	mov	r5, #92	; 0x5c
   17a2c:	b	177d8 <__assert_fail@plt+0x662c>
   17a30:	ldr	r3, [sp, #64]	; 0x40
   17a34:	cmp	r3, #0
   17a38:	bne	188b0 <__assert_fail@plt+0x7704>
   17a3c:	ldr	r2, [sp, #48]	; 0x30
   17a40:	mov	r3, fp
   17a44:	mov	r6, r2
   17a48:	str	r2, [sp, #40]	; 0x28
   17a4c:	b	177a0 <__assert_fail@plt+0x65f4>
   17a50:	ldr	r3, [sp, #176]	; 0xb0
   17a54:	cmp	r3, #2
   17a58:	beq	187ec <__assert_fail@plt+0x7640>
   17a5c:	cmp	r3, #5
   17a60:	ldr	r3, [sp, #48]	; 0x30
   17a64:	str	r3, [sp, #40]	; 0x28
   17a68:	bne	17a94 <__assert_fail@plt+0x68e8>
   17a6c:	ldr	r3, [sp, #96]	; 0x60
   17a70:	cmp	r3, #0
   17a74:	beq	184f0 <__assert_fail@plt+0x7344>
   17a78:	add	r3, r7, #2
   17a7c:	cmp	r3, r8
   17a80:	bcs	17a94 <__assert_fail@plt+0x68e8>
   17a84:	ldr	r2, [sp, #36]	; 0x24
   17a88:	ldrb	r5, [r2, #1]
   17a8c:	cmp	r5, #63	; 0x3f
   17a90:	beq	185d8 <__assert_fail@plt+0x742c>
   17a94:	mov	r6, #0
   17a98:	mov	r5, #63	; 0x3f
   17a9c:	b	1792c <__assert_fail@plt+0x6780>
   17aa0:	ldr	r3, [sp, #176]	; 0xb0
   17aa4:	cmp	r3, #2
   17aa8:	ldr	r3, [sp, #48]	; 0x30
   17aac:	beq	18294 <__assert_fail@plt+0x70e8>
   17ab0:	mov	r5, #39	; 0x27
   17ab4:	str	r3, [sp, #40]	; 0x28
   17ab8:	str	r6, [sp, #80]	; 0x50
   17abc:	b	1792c <__assert_fail@plt+0x6780>
   17ac0:	ldr	r3, [sp, #180]	; 0xb4
   17ac4:	cmp	r4, #0
   17ac8:	and	r3, r3, #1
   17acc:	str	r3, [sp, #92]	; 0x5c
   17ad0:	ldr	r3, [sp, #180]	; 0xb4
   17ad4:	and	r3, r3, #4
   17ad8:	str	r3, [sp, #96]	; 0x60
   17adc:	bne	188fc <__assert_fail@plt+0x7750>
   17ae0:	str	r4, [sp, #60]	; 0x3c
   17ae4:	cmp	sl, #0
   17ae8:	bne	188e0 <__assert_fail@plt+0x7734>
   17aec:	mov	r3, #1
   17af0:	movw	r2, #52752	; 0xce10
   17af4:	movt	r2, #1
   17af8:	mov	r4, r3
   17afc:	mov	r3, #2
   17b00:	mov	r9, sl
   17b04:	str	r4, [sp, #32]
   17b08:	str	sl, [sp, #44]	; 0x2c
   17b0c:	str	sl, [sp, #48]	; 0x30
   17b10:	str	r4, [sp, #52]	; 0x34
   17b14:	str	r4, [sp, #56]	; 0x38
   17b18:	str	r4, [sp, #64]	; 0x40
   17b1c:	str	sl, [sp, #68]	; 0x44
   17b20:	str	r2, [sp, #72]	; 0x48
   17b24:	str	sl, [sp, #80]	; 0x50
   17b28:	str	sl, [sp, #84]	; 0x54
   17b2c:	str	sl, [sp, #88]	; 0x58
   17b30:	str	r3, [sp, #176]	; 0xb0
   17b34:	b	1707c <__assert_fail@plt+0x5ed0>
   17b38:	ldrb	r5, [r0, r7]
   17b3c:	cmp	r5, #126	; 0x7e
   17b40:	ldrls	pc, [pc, r5, lsl #2]
   17b44:	b	17ea8 <__assert_fail@plt+0x6cfc>
   17b48:	andeq	r7, r1, r4, ror lr
   17b4c:	andeq	r7, r1, r8, lsr #29
   17b50:	andeq	r7, r1, r8, lsr #29
   17b54:	andeq	r7, r1, r8, lsr #29
   17b58:	andeq	r7, r1, r8, lsr #29
   17b5c:	andeq	r7, r1, r8, lsr #29
   17b60:	andeq	r7, r1, r8, lsr #29
   17b64:	andeq	r7, r1, r4, ror #28
   17b68:	andeq	r7, r1, r4, asr lr
   17b6c:	ldrdeq	r7, [r1], -r8
   17b70:	andeq	r7, r1, r4, asr #28
   17b74:			; <UNDEFINED> instruction: 0x00017db8
   17b78:	muleq	r1, r8, lr
   17b7c:	andeq	r7, r1, r4, lsr #28
   17b80:	andeq	r7, r1, r8, lsr #29
   17b84:	andeq	r7, r1, r8, lsr #29
   17b88:	andeq	r7, r1, r8, lsr #29
   17b8c:	andeq	r7, r1, r8, lsr #29
   17b90:	andeq	r7, r1, r8, lsr #29
   17b94:	andeq	r7, r1, r8, lsr #29
   17b98:	andeq	r7, r1, r8, lsr #29
   17b9c:	andeq	r7, r1, r8, lsr #29
   17ba0:	andeq	r7, r1, r8, lsr #29
   17ba4:	andeq	r7, r1, r8, lsr #29
   17ba8:	andeq	r7, r1, r8, lsr #29
   17bac:	andeq	r7, r1, r8, lsr #29
   17bb0:	andeq	r7, r1, r8, lsr #29
   17bb4:	andeq	r7, r1, r8, lsr #29
   17bb8:	andeq	r7, r1, r8, lsr #29
   17bbc:	andeq	r7, r1, r8, lsr #29
   17bc0:	andeq	r7, r1, r8, lsr #29
   17bc4:	andeq	r7, r1, r8, lsr #29
   17bc8:	andeq	r7, r1, ip, asr #27
   17bcc:	andeq	r7, r1, r4, lsr lr
   17bd0:	andeq	r7, r1, r4, lsr lr
   17bd4:	andeq	r7, r1, ip, lsr #27
   17bd8:	andeq	r7, r1, r4, lsr lr
   17bdc:	andeq	r7, r1, r0, lsr #27
   17be0:	andeq	r7, r1, r4, lsr lr
   17be4:	andeq	r7, r1, r0, lsl lr
   17be8:	andeq	r7, r1, r4, lsr lr
   17bec:	andeq	r7, r1, r4, lsr lr
   17bf0:	andeq	r7, r1, r4, lsr lr
   17bf4:	andeq	r7, r1, r0, lsr #27
   17bf8:	andeq	r7, r1, r0, lsr #27
   17bfc:	andeq	r7, r1, r0, lsr #27
   17c00:	andeq	r7, r1, r0, lsr #27
   17c04:	andeq	r7, r1, r0, lsr #27
   17c08:	andeq	r7, r1, r0, lsr #27
   17c0c:	andeq	r7, r1, r0, lsr #27
   17c10:	andeq	r7, r1, r0, lsr #27
   17c14:	andeq	r7, r1, r0, lsr #27
   17c18:	andeq	r7, r1, r0, lsr #27
   17c1c:	andeq	r7, r1, r0, lsr #27
   17c20:	andeq	r7, r1, r0, lsr #27
   17c24:	andeq	r7, r1, r0, lsr #27
   17c28:	andeq	r7, r1, r0, lsr #27
   17c2c:	andeq	r7, r1, r0, lsr #27
   17c30:	andeq	r7, r1, r0, lsr #27
   17c34:	andeq	r7, r1, r4, lsr lr
   17c38:	andeq	r7, r1, r4, lsr lr
   17c3c:	andeq	r7, r1, r4, lsr lr
   17c40:	andeq	r7, r1, r4, lsr lr
   17c44:	andeq	r7, r1, r8, ror #27
   17c48:	andeq	r7, r1, r8, lsr #29
   17c4c:	andeq	r7, r1, r0, lsr #27
   17c50:	andeq	r7, r1, r0, lsr #27
   17c54:	andeq	r7, r1, r0, lsr #27
   17c58:	andeq	r7, r1, r0, lsr #27
   17c5c:	andeq	r7, r1, r0, lsr #27
   17c60:	andeq	r7, r1, r0, lsr #27
   17c64:	andeq	r7, r1, r0, lsr #27
   17c68:	andeq	r7, r1, r0, lsr #27
   17c6c:	andeq	r7, r1, r0, lsr #27
   17c70:	andeq	r7, r1, r0, lsr #27
   17c74:	andeq	r7, r1, r0, lsr #27
   17c78:	andeq	r7, r1, r0, lsr #27
   17c7c:	andeq	r7, r1, r0, lsr #27
   17c80:	andeq	r7, r1, r0, lsr #27
   17c84:	andeq	r7, r1, r0, lsr #27
   17c88:	andeq	r7, r1, r0, lsr #27
   17c8c:	andeq	r7, r1, r0, lsr #27
   17c90:	andeq	r7, r1, r0, lsr #27
   17c94:	andeq	r7, r1, r0, lsr #27
   17c98:	andeq	r7, r1, r0, lsr #27
   17c9c:	andeq	r7, r1, r0, lsr #27
   17ca0:	andeq	r7, r1, r0, lsr #27
   17ca4:	andeq	r7, r1, r0, lsr #27
   17ca8:	andeq	r7, r1, r0, lsr #27
   17cac:	andeq	r7, r1, r0, lsr #27
   17cb0:	andeq	r7, r1, r0, lsr #27
   17cb4:	andeq	r7, r1, r4, lsr lr
   17cb8:	andeq	r7, r1, r8, ror #26
   17cbc:	andeq	r7, r1, r0, lsr #27
   17cc0:	andeq	r7, r1, r4, lsr lr
   17cc4:	andeq	r7, r1, r0, lsr #27
   17cc8:	andeq	r7, r1, r4, lsr lr
   17ccc:	andeq	r7, r1, r0, lsr #27
   17cd0:	andeq	r7, r1, r0, lsr #27
   17cd4:	andeq	r7, r1, r0, lsr #27
   17cd8:	andeq	r7, r1, r0, lsr #27
   17cdc:	andeq	r7, r1, r0, lsr #27
   17ce0:	andeq	r7, r1, r0, lsr #27
   17ce4:	andeq	r7, r1, r0, lsr #27
   17ce8:	andeq	r7, r1, r0, lsr #27
   17cec:	andeq	r7, r1, r0, lsr #27
   17cf0:	andeq	r7, r1, r0, lsr #27
   17cf4:	andeq	r7, r1, r0, lsr #27
   17cf8:	andeq	r7, r1, r0, lsr #27
   17cfc:	andeq	r7, r1, r0, lsr #27
   17d00:	andeq	r7, r1, r0, lsr #27
   17d04:	andeq	r7, r1, r0, lsr #27
   17d08:	andeq	r7, r1, r0, lsr #27
   17d0c:	andeq	r7, r1, r0, lsr #27
   17d10:	andeq	r7, r1, r0, lsr #27
   17d14:	andeq	r7, r1, r0, lsr #27
   17d18:	andeq	r7, r1, r0, lsr #27
   17d1c:	andeq	r7, r1, r0, lsr #27
   17d20:	andeq	r7, r1, r0, lsr #27
   17d24:	andeq	r7, r1, r0, lsr #27
   17d28:	andeq	r7, r1, r0, lsr #27
   17d2c:	andeq	r7, r1, r0, lsr #27
   17d30:	andeq	r7, r1, r0, lsr #27
   17d34:	andeq	r7, r1, r4, asr #26
   17d38:	andeq	r7, r1, r4, lsr lr
   17d3c:	andeq	r7, r1, r4, asr #26
   17d40:	andeq	r7, r1, ip, lsr #27
   17d44:	mov	r3, #0
   17d48:	cmn	r8, #1
   17d4c:	str	r3, [sp, #40]	; 0x28
   17d50:	bne	17910 <__assert_fail@plt+0x6764>
   17d54:	ldr	r3, [sp, #28]
   17d58:	ldrb	r3, [r3, #1]
   17d5c:	adds	r3, r3, #0
   17d60:	movne	r3, #1
   17d64:	b	17918 <__assert_fail@plt+0x676c>
   17d68:	mov	r3, #0
   17d6c:	str	r3, [sp, #40]	; 0x28
   17d70:	ldr	r3, [sp, #176]	; 0xb0
   17d74:	cmp	r3, #2
   17d78:	bne	17a08 <__assert_fail@plt+0x685c>
   17d7c:	ldr	r3, [sp, #44]	; 0x2c
   17d80:	cmp	r3, #0
   17d84:	bne	186c4 <__assert_fail@plt+0x7518>
   17d88:	mov	r6, r3
   17d8c:	add	r7, r7, #1
   17d90:	mov	r3, fp
   17d94:	mov	r5, #92	; 0x5c
   17d98:	b	177d8 <__assert_fail@plt+0x662c>
   17d9c:	ldr	r6, [sp, #48]	; 0x30
   17da0:	mov	r3, #0
   17da4:	str	r3, [sp, #40]	; 0x28
   17da8:	b	1792c <__assert_fail@plt+0x6780>
   17dac:	mov	r3, #0
   17db0:	str	r3, [sp, #40]	; 0x28
   17db4:	b	17920 <__assert_fail@plt+0x6774>
   17db8:	mov	r3, #0
   17dbc:	str	r3, [sp, #40]	; 0x28
   17dc0:	mov	r3, #118	; 0x76
   17dc4:	b	17780 <__assert_fail@plt+0x65d4>
   17dc8:	ldr	r6, [sp, #48]	; 0x30
   17dcc:	mov	r3, #0
   17dd0:	str	r3, [sp, #40]	; 0x28
   17dd4:	b	1796c <__assert_fail@plt+0x67c0>
   17dd8:	mov	r3, #0
   17ddc:	str	r3, [sp, #40]	; 0x28
   17de0:	mov	r3, #116	; 0x74
   17de4:	b	17774 <__assert_fail@plt+0x65c8>
   17de8:	ldr	r3, [sp, #176]	; 0xb0
   17dec:	cmp	r3, #2
   17df0:	beq	18300 <__assert_fail@plt+0x7154>
   17df4:	cmp	r3, #5
   17df8:	mov	r3, #0
   17dfc:	str	r3, [sp, #40]	; 0x28
   17e00:	beq	17a6c <__assert_fail@plt+0x68c0>
   17e04:	mov	r6, #0
   17e08:	mov	r5, #63	; 0x3f
   17e0c:	b	1792c <__assert_fail@plt+0x6780>
   17e10:	ldr	r3, [sp, #176]	; 0xb0
   17e14:	cmp	r3, #2
   17e18:	beq	18288 <__assert_fail@plt+0x70dc>
   17e1c:	mov	r3, #0
   17e20:	b	17ab0 <__assert_fail@plt+0x6904>
   17e24:	mov	r3, #0
   17e28:	str	r3, [sp, #40]	; 0x28
   17e2c:	mov	r3, #114	; 0x72
   17e30:	b	17774 <__assert_fail@plt+0x65c8>
   17e34:	mov	r3, #0
   17e38:	mov	r6, r3
   17e3c:	str	r3, [sp, #40]	; 0x28
   17e40:	b	1796c <__assert_fail@plt+0x67c0>
   17e44:	mov	r3, #0
   17e48:	str	r3, [sp, #40]	; 0x28
   17e4c:	mov	r3, #110	; 0x6e
   17e50:	b	17774 <__assert_fail@plt+0x65c8>
   17e54:	mov	r3, #0
   17e58:	str	r3, [sp, #40]	; 0x28
   17e5c:	mov	r3, #98	; 0x62
   17e60:	b	17780 <__assert_fail@plt+0x65d4>
   17e64:	mov	r3, #0
   17e68:	str	r3, [sp, #40]	; 0x28
   17e6c:	mov	r3, #97	; 0x61
   17e70:	b	17780 <__assert_fail@plt+0x65d4>
   17e74:	ldr	r3, [sp, #60]	; 0x3c
   17e78:	cmp	r3, #0
   17e7c:	bne	1826c <__assert_fail@plt+0x70c0>
   17e80:	ldr	r3, [sp, #92]	; 0x5c
   17e84:	cmp	r3, #0
   17e88:	addne	r7, r7, #1
   17e8c:	bne	1708c <__assert_fail@plt+0x5ee0>
   17e90:	str	r3, [sp, #40]	; 0x28
   17e94:	b	1778c <__assert_fail@plt+0x65e0>
   17e98:	mov	r3, #0
   17e9c:	str	r3, [sp, #40]	; 0x28
   17ea0:	mov	r3, #102	; 0x66
   17ea4:	b	17780 <__assert_fail@plt+0x65d4>
   17ea8:	mov	r3, #0
   17eac:	str	r3, [sp, #40]	; 0x28
   17eb0:	ldr	r3, [sp, #76]	; 0x4c
   17eb4:	cmp	r3, #1
   17eb8:	bne	18320 <__assert_fail@plt+0x7174>
   17ebc:	bl	1102c <__ctype_b_loc@plt>
   17ec0:	ldr	r2, [r0]
   17ec4:	sxth	r3, r5
   17ec8:	lsl	r3, r3, #1
   17ecc:	ldr	r1, [sp, #76]	; 0x4c
   17ed0:	ldrh	r3, [r2, r3]
   17ed4:	mov	r0, r1
   17ed8:	and	r3, r3, #16384	; 0x4000
   17edc:	cmp	r3, #0
   17ee0:	ldr	r3, [sp, #60]	; 0x3c
   17ee4:	movne	r6, #1
   17ee8:	moveq	r6, #0
   17eec:	movne	r2, #0
   17ef0:	andeq	r2, r3, #1
   17ef4:	cmp	r2, #0
   17ef8:	beq	1792c <__assert_fail@plt+0x6780>
   17efc:	ldr	r2, [sp, #60]	; 0x3c
   17f00:	mov	r6, #0
   17f04:	add	r1, r0, r7
   17f08:	mov	ip, #39	; 0x27
   17f0c:	str	r6, [sp, #100]	; 0x64
   17f10:	mov	r0, #0
   17f14:	ldr	lr, [sp, #36]	; 0x24
   17f18:	str	r8, [sp, #36]	; 0x24
   17f1c:	ldr	r6, [sp, #40]	; 0x28
   17f20:	ldr	r8, [sp, #44]	; 0x2c
   17f24:	b	17fd4 <__assert_fail@plt+0x6e28>
   17f28:	cmp	r8, #0
   17f2c:	bne	18508 <__assert_fail@plt+0x735c>
   17f30:	ldr	r0, [sp, #52]	; 0x34
   17f34:	eor	r3, fp, #1
   17f38:	ands	r3, r0, r3
   17f3c:	beq	17f6c <__assert_fail@plt+0x6dc0>
   17f40:	cmp	sl, r4
   17f44:	add	r0, r4, #1
   17f48:	strbhi	ip, [r9, r4]
   17f4c:	cmp	sl, r0
   17f50:	movhi	fp, #36	; 0x24
   17f54:	strbhi	fp, [r9, r0]
   17f58:	add	r0, r4, #2
   17f5c:	mov	fp, r3
   17f60:	cmp	sl, r0
   17f64:	add	r4, r4, #3
   17f68:	strbhi	ip, [r9, r0]
   17f6c:	cmp	sl, r4
   17f70:	movhi	r3, #92	; 0x5c
   17f74:	strbhi	r3, [r9, r4]
   17f78:	add	r3, r4, #1
   17f7c:	cmp	sl, r3
   17f80:	bls	17f90 <__assert_fail@plt+0x6de4>
   17f84:	lsr	r0, r5, #6
   17f88:	add	r0, r0, #48	; 0x30
   17f8c:	strb	r0, [r9, r3]
   17f90:	add	r3, r4, #2
   17f94:	cmp	sl, r3
   17f98:	bls	17fa8 <__assert_fail@plt+0x6dfc>
   17f9c:	ubfx	r0, r5, #3, #3
   17fa0:	add	r0, r0, #48	; 0x30
   17fa4:	strb	r0, [r9, r3]
   17fa8:	add	r7, r7, #1
   17fac:	and	r5, r5, #7
   17fb0:	cmp	r1, r7
   17fb4:	add	r5, r5, #48	; 0x30
   17fb8:	add	r4, r4, #3
   17fbc:	bls	1851c <__assert_fail@plt+0x7370>
   17fc0:	mov	r0, r2
   17fc4:	cmp	sl, r4
   17fc8:	strbhi	r5, [r9, r4]
   17fcc:	add	r4, r4, #1
   17fd0:	ldrb	r5, [lr, #1]!
   17fd4:	cmp	r2, #0
   17fd8:	bne	17f28 <__assert_fail@plt+0x6d7c>
   17fdc:	eor	r3, r0, #1
   17fe0:	cmp	r6, #0
   17fe4:	and	r3, r3, fp
   17fe8:	uxtb	r3, r3
   17fec:	beq	18000 <__assert_fail@plt+0x6e54>
   17ff0:	cmp	sl, r4
   17ff4:	movhi	r6, #92	; 0x5c
   17ff8:	strbhi	r6, [r9, r4]
   17ffc:	add	r4, r4, #1
   18000:	add	r7, r7, #1
   18004:	cmp	r7, r1
   18008:	bcs	184fc <__assert_fail@plt+0x7350>
   1800c:	cmp	r3, #0
   18010:	beq	18540 <__assert_fail@plt+0x7394>
   18014:	cmp	sl, r4
   18018:	add	r3, r4, #1
   1801c:	mov	r6, #0
   18020:	strbhi	ip, [r9, r4]
   18024:	cmp	sl, r3
   18028:	add	r4, r4, #2
   1802c:	mov	fp, r6
   18030:	strbhi	ip, [r9, r3]
   18034:	b	17fc4 <__assert_fail@plt+0x6e18>
   18038:	ldr	r3, [sp, #36]	; 0x24
   1803c:	ldrb	r5, [r3]
   18040:	cmp	r5, #126	; 0x7e
   18044:	ldrls	pc, [pc, r5, lsl #2]
   18048:	b	17ea8 <__assert_fail@plt+0x6cfc>
   1804c:	andeq	r8, r1, ip, ror #4
   18050:	andeq	r7, r1, r8, lsr #29
   18054:	andeq	r7, r1, r8, lsr #29
   18058:	andeq	r7, r1, r8, lsr #29
   1805c:	andeq	r7, r1, r8, lsr #29
   18060:	andeq	r7, r1, r8, lsr #29
   18064:	andeq	r7, r1, r8, lsr #29
   18068:	andeq	r7, r1, r0, ror #14
   1806c:	andeq	r7, r1, r8, asr r7
   18070:	ldrdeq	r7, [r1], -r8
   18074:	andeq	r8, r1, r0, ror #4
   18078:			; <UNDEFINED> instruction: 0x00017db8
   1807c:	andeq	r7, r1, r4, lsl #12
   18080:	andeq	r8, r1, r4, asr r2
   18084:	andeq	r7, r1, r8, lsr #29
   18088:	andeq	r7, r1, r8, lsr #29
   1808c:	andeq	r7, r1, r8, lsr #29
   18090:	andeq	r7, r1, r8, lsr #29
   18094:	andeq	r7, r1, r8, lsr #29
   18098:	andeq	r7, r1, r8, lsr #29
   1809c:	andeq	r7, r1, r8, lsr #29
   180a0:	andeq	r7, r1, r8, lsr #29
   180a4:	andeq	r7, r1, r8, lsr #29
   180a8:	andeq	r7, r1, r8, lsr #29
   180ac:	andeq	r7, r1, r8, lsr #29
   180b0:	andeq	r7, r1, r8, lsr #29
   180b4:	andeq	r7, r1, r8, lsr #29
   180b8:	andeq	r7, r1, r8, lsr #29
   180bc:	andeq	r7, r1, r8, lsr #29
   180c0:	andeq	r7, r1, r8, lsr #29
   180c4:	andeq	r7, r1, r8, lsr #29
   180c8:	andeq	r7, r1, r8, lsr #29
   180cc:	andeq	r7, r1, r8, asr #27
   180d0:	andeq	r8, r1, r8, asr #4
   180d4:	andeq	r8, r1, r8, asr #4
   180d8:	andeq	r7, r1, ip, lsr #27
   180dc:	andeq	r8, r1, r8, asr #4
   180e0:	muleq	r1, ip, sp
   180e4:	andeq	r8, r1, r8, asr #4
   180e8:	andeq	r7, r1, r0, lsl lr
   180ec:	andeq	r8, r1, r8, asr #4
   180f0:	andeq	r8, r1, r8, asr #4
   180f4:	andeq	r8, r1, r8, asr #4
   180f8:	muleq	r1, ip, sp
   180fc:	muleq	r1, ip, sp
   18100:	muleq	r1, ip, sp
   18104:	muleq	r1, ip, sp
   18108:	muleq	r1, ip, sp
   1810c:	muleq	r1, ip, sp
   18110:	muleq	r1, ip, sp
   18114:	muleq	r1, ip, sp
   18118:	muleq	r1, ip, sp
   1811c:	muleq	r1, ip, sp
   18120:	muleq	r1, ip, sp
   18124:	muleq	r1, ip, sp
   18128:	muleq	r1, ip, sp
   1812c:	muleq	r1, ip, sp
   18130:	muleq	r1, ip, sp
   18134:	muleq	r1, ip, sp
   18138:	andeq	r8, r1, r8, asr #4
   1813c:	andeq	r8, r1, r8, asr #4
   18140:	andeq	r8, r1, r8, asr #4
   18144:	andeq	r8, r1, r8, asr #4
   18148:	andeq	r7, r1, r8, ror #27
   1814c:	andeq	r7, r1, r8, lsr #29
   18150:	muleq	r1, ip, sp
   18154:	muleq	r1, ip, sp
   18158:	muleq	r1, ip, sp
   1815c:	muleq	r1, ip, sp
   18160:	muleq	r1, ip, sp
   18164:	muleq	r1, ip, sp
   18168:	muleq	r1, ip, sp
   1816c:	muleq	r1, ip, sp
   18170:	muleq	r1, ip, sp
   18174:	muleq	r1, ip, sp
   18178:	muleq	r1, ip, sp
   1817c:	muleq	r1, ip, sp
   18180:	muleq	r1, ip, sp
   18184:	muleq	r1, ip, sp
   18188:	muleq	r1, ip, sp
   1818c:	muleq	r1, ip, sp
   18190:	muleq	r1, ip, sp
   18194:	muleq	r1, ip, sp
   18198:	muleq	r1, ip, sp
   1819c:	muleq	r1, ip, sp
   181a0:	muleq	r1, ip, sp
   181a4:	muleq	r1, ip, sp
   181a8:	muleq	r1, ip, sp
   181ac:	muleq	r1, ip, sp
   181b0:	muleq	r1, ip, sp
   181b4:	muleq	r1, ip, sp
   181b8:	andeq	r8, r1, r8, asr #4
   181bc:	andeq	r7, r1, r8, ror #26
   181c0:	muleq	r1, ip, sp
   181c4:	andeq	r8, r1, r8, asr #4
   181c8:	muleq	r1, ip, sp
   181cc:	andeq	r8, r1, r8, asr #4
   181d0:	muleq	r1, ip, sp
   181d4:	muleq	r1, ip, sp
   181d8:	muleq	r1, ip, sp
   181dc:	muleq	r1, ip, sp
   181e0:	muleq	r1, ip, sp
   181e4:	muleq	r1, ip, sp
   181e8:	muleq	r1, ip, sp
   181ec:	muleq	r1, ip, sp
   181f0:	muleq	r1, ip, sp
   181f4:	muleq	r1, ip, sp
   181f8:	muleq	r1, ip, sp
   181fc:	muleq	r1, ip, sp
   18200:	muleq	r1, ip, sp
   18204:	muleq	r1, ip, sp
   18208:	muleq	r1, ip, sp
   1820c:	muleq	r1, ip, sp
   18210:	muleq	r1, ip, sp
   18214:	muleq	r1, ip, sp
   18218:	muleq	r1, ip, sp
   1821c:	muleq	r1, ip, sp
   18220:	muleq	r1, ip, sp
   18224:	muleq	r1, ip, sp
   18228:	muleq	r1, ip, sp
   1822c:	muleq	r1, ip, sp
   18230:	muleq	r1, ip, sp
   18234:	muleq	r1, ip, sp
   18238:	andeq	r7, r1, r4, asr #26
   1823c:	andeq	r8, r1, r8, asr #4
   18240:	andeq	r7, r1, r4, asr #26
   18244:	andeq	r7, r1, ip, lsr #27
   18248:	mov	r3, #0
   1824c:	str	r3, [sp, #40]	; 0x28
   18250:	b	17928 <__assert_fail@plt+0x677c>
   18254:	mov	r3, #0
   18258:	str	r3, [sp, #40]	; 0x28
   1825c:	b	178c0 <__assert_fail@plt+0x6714>
   18260:	mov	r3, #0
   18264:	str	r3, [sp, #40]	; 0x28
   18268:	b	178f4 <__assert_fail@plt+0x6748>
   1826c:	ldr	r3, [sp, #44]	; 0x2c
   18270:	cmp	r3, #0
   18274:	beq	1780c <__assert_fail@plt+0x6660>
   18278:	ldr	r3, [sp, #52]	; 0x34
   1827c:	mov	fp, r9
   18280:	str	r3, [sp, #60]	; 0x3c
   18284:	b	17984 <__assert_fail@plt+0x67d8>
   18288:	ldr	r3, [sp, #44]	; 0x2c
   1828c:	cmp	r3, #0
   18290:	bne	186c4 <__assert_fail@plt+0x7518>
   18294:	str	r3, [sp, #40]	; 0x28
   18298:	cmp	sl, #0
   1829c:	ldr	r3, [sp, #84]	; 0x54
   182a0:	clz	r3, r3
   182a4:	lsr	r3, r3, #5
   182a8:	moveq	r3, #0
   182ac:	cmp	r3, #0
   182b0:	strne	sl, [sp, #84]	; 0x54
   182b4:	movne	sl, #0
   182b8:	bne	182e8 <__assert_fail@plt+0x713c>
   182bc:	cmp	sl, r4
   182c0:	movhi	r3, #39	; 0x27
   182c4:	strbhi	r3, [r9, r4]
   182c8:	add	r3, r4, #1
   182cc:	cmp	sl, r3
   182d0:	movhi	r2, #92	; 0x5c
   182d4:	strbhi	r2, [r9, r3]
   182d8:	add	r3, r4, #2
   182dc:	cmp	sl, r3
   182e0:	movhi	r2, #39	; 0x27
   182e4:	strbhi	r2, [r9, r3]
   182e8:	mov	r3, #0
   182ec:	add	r4, r4, #3
   182f0:	str	r6, [sp, #80]	; 0x50
   182f4:	mov	fp, r3
   182f8:	mov	r5, #39	; 0x27
   182fc:	b	177c8 <__assert_fail@plt+0x661c>
   18300:	ldr	r3, [sp, #44]	; 0x2c
   18304:	cmp	r3, #0
   18308:	bne	186c4 <__assert_fail@plt+0x7518>
   1830c:	mov	r6, #0
   18310:	mov	r5, #63	; 0x3f
   18314:	str	r3, [sp, #40]	; 0x28
   18318:	mov	r3, fp
   1831c:	b	177c8 <__assert_fail@plt+0x661c>
   18320:	mov	r2, #0
   18324:	mov	r3, #0
   18328:	cmn	r8, #1
   1832c:	strd	r2, [sp, #128]	; 0x80
   18330:	bne	18340 <__assert_fail@plt+0x7194>
   18334:	ldr	r0, [sp, #28]
   18338:	bl	11044 <strlen@plt>
   1833c:	mov	r8, r0
   18340:	str	r9, [sp, #100]	; 0x64
   18344:	mov	r3, #0
   18348:	strd	sl, [sp, #104]	; 0x68
   1834c:	ldr	sl, [sp, #28]
   18350:	str	r5, [sp, #112]	; 0x70
   18354:	mov	r5, r3
   18358:	ldr	r9, [sp, #68]	; 0x44
   1835c:	str	r4, [sp, #116]	; 0x74
   18360:	add	r4, r7, r5
   18364:	add	r3, sp, #128	; 0x80
   18368:	add	fp, sl, r4
   1836c:	sub	r2, r8, r4
   18370:	mov	r1, fp
   18374:	add	r0, sp, #124	; 0x7c
   18378:	bl	1be24 <__assert_fail@plt+0xac78>
   1837c:	subs	r1, r0, #0
   18380:	beq	183c0 <__assert_fail@plt+0x7214>
   18384:	cmn	r1, #1
   18388:	beq	18718 <__assert_fail@plt+0x756c>
   1838c:	cmn	r1, #2
   18390:	beq	18738 <__assert_fail@plt+0x758c>
   18394:	cmp	r9, #0
   18398:	bne	183f0 <__assert_fail@plt+0x7244>
   1839c:	ldr	r0, [sp, #124]	; 0x7c
   183a0:	add	r5, r5, r1
   183a4:	bl	10f84 <iswprint@plt>
   183a8:	cmp	r0, #0
   183ac:	add	r0, sp, #128	; 0x80
   183b0:	moveq	r6, #0
   183b4:	bl	10f30 <mbsinit@plt>
   183b8:	cmp	r0, #0
   183bc:	beq	18360 <__assert_fail@plt+0x71b4>
   183c0:	ldr	r3, [sp, #60]	; 0x3c
   183c4:	add	r9, sp, #100	; 0x64
   183c8:	mov	r0, r5
   183cc:	ldm	r9, {r9, sl, fp}
   183d0:	eor	r2, r6, #1
   183d4:	ldr	r5, [sp, #112]	; 0x70
   183d8:	and	r2, r2, r3
   183dc:	uxtb	r2, r2
   183e0:	ldr	r4, [sp, #116]	; 0x74
   183e4:	cmp	r0, #1
   183e8:	bhi	17f04 <__assert_fail@plt+0x6d58>
   183ec:	b	17ef4 <__assert_fail@plt+0x6d48>
   183f0:	cmp	r1, #1
   183f4:	beq	1839c <__assert_fail@plt+0x71f0>
   183f8:	add	r2, r4, #1
   183fc:	add	r3, sl, r1
   18400:	add	r2, sl, r2
   18404:	add	r4, r3, r4
   18408:	ldrb	r3, [r2], #1
   1840c:	sub	r3, r3, #91	; 0x5b
   18410:	cmp	r3, #33	; 0x21
   18414:	ldrls	pc, [pc, r3, lsl #2]
   18418:	b	184a4 <__assert_fail@plt+0x72f8>
   1841c:			; <UNDEFINED> instruction: 0x000184b0
   18420:			; <UNDEFINED> instruction: 0x000184b0
   18424:	andeq	r8, r1, r4, lsr #9
   18428:			; <UNDEFINED> instruction: 0x000184b0
   1842c:	andeq	r8, r1, r4, lsr #9
   18430:			; <UNDEFINED> instruction: 0x000184b0
   18434:	andeq	r8, r1, r4, lsr #9
   18438:	andeq	r8, r1, r4, lsr #9
   1843c:	andeq	r8, r1, r4, lsr #9
   18440:	andeq	r8, r1, r4, lsr #9
   18444:	andeq	r8, r1, r4, lsr #9
   18448:	andeq	r8, r1, r4, lsr #9
   1844c:	andeq	r8, r1, r4, lsr #9
   18450:	andeq	r8, r1, r4, lsr #9
   18454:	andeq	r8, r1, r4, lsr #9
   18458:	andeq	r8, r1, r4, lsr #9
   1845c:	andeq	r8, r1, r4, lsr #9
   18460:	andeq	r8, r1, r4, lsr #9
   18464:	andeq	r8, r1, r4, lsr #9
   18468:	andeq	r8, r1, r4, lsr #9
   1846c:	andeq	r8, r1, r4, lsr #9
   18470:	andeq	r8, r1, r4, lsr #9
   18474:	andeq	r8, r1, r4, lsr #9
   18478:	andeq	r8, r1, r4, lsr #9
   1847c:	andeq	r8, r1, r4, lsr #9
   18480:	andeq	r8, r1, r4, lsr #9
   18484:	andeq	r8, r1, r4, lsr #9
   18488:	andeq	r8, r1, r4, lsr #9
   1848c:	andeq	r8, r1, r4, lsr #9
   18490:	andeq	r8, r1, r4, lsr #9
   18494:	andeq	r8, r1, r4, lsr #9
   18498:	andeq	r8, r1, r4, lsr #9
   1849c:	andeq	r8, r1, r4, lsr #9
   184a0:			; <UNDEFINED> instruction: 0x000184b0
   184a4:	cmp	r4, r2
   184a8:	bne	18408 <__assert_fail@plt+0x725c>
   184ac:	b	1839c <__assert_fail@plt+0x71f0>
   184b0:	mov	r3, #2
   184b4:	ldr	fp, [sp, #100]	; 0x64
   184b8:	str	r3, [sp, #176]	; 0xb0
   184bc:	ldr	sl, [sp, #104]	; 0x68
   184c0:	b	17984 <__assert_fail@plt+0x67d8>
   184c4:	ldr	r2, [sp, #52]	; 0x34
   184c8:	mov	fp, r9
   184cc:	ldr	r3, [sp, #60]	; 0x3c
   184d0:	and	r3, r3, r2
   184d4:	str	r3, [sp, #60]	; 0x3c
   184d8:	b	17984 <__assert_fail@plt+0x67d8>
   184dc:	cmp	sl, r4
   184e0:	movhi	r2, fp
   184e4:	bhi	1785c <__assert_fail@plt+0x66b0>
   184e8:	mov	r2, r4
   184ec:	b	1786c <__assert_fail@plt+0x66c0>
   184f0:	mov	r6, r3
   184f4:	mov	r5, #63	; 0x3f
   184f8:	b	1792c <__assert_fail@plt+0x6780>
   184fc:	ldr	r8, [sp, #36]	; 0x24
   18500:	ldr	r6, [sp, #100]	; 0x64
   18504:	b	177d8 <__assert_fail@plt+0x662c>
   18508:	mov	fp, r9
   1850c:	ldr	r8, [sp, #36]	; 0x24
   18510:	ldr	r3, [sp, #52]	; 0x34
   18514:	str	r3, [sp, #60]	; 0x3c
   18518:	b	17984 <__assert_fail@plt+0x67d8>
   1851c:	ldr	r8, [sp, #36]	; 0x24
   18520:	ldr	r6, [sp, #100]	; 0x64
   18524:	b	17670 <__assert_fail@plt+0x64c4>
   18528:	mov	r3, #0
   1852c:	add	r4, r4, #4
   18530:	mov	fp, r2
   18534:	mov	r6, r3
   18538:	mov	r5, #48	; 0x30
   1853c:	b	177c8 <__assert_fail@plt+0x661c>
   18540:	mov	r6, r3
   18544:	b	17fc4 <__assert_fail@plt+0x6e18>
   18548:	mov	r3, #1
   1854c:	movw	r2, #52732	; 0xcdfc
   18550:	movt	r2, #1
   18554:	mov	r4, r3
   18558:	mov	r9, sl
   1855c:	str	r3, [sp, #32]
   18560:	str	sl, [sp, #44]	; 0x2c
   18564:	str	r3, [sp, #48]	; 0x30
   18568:	str	sl, [sp, #52]	; 0x34
   1856c:	str	r3, [sp, #56]	; 0x38
   18570:	str	r3, [sp, #60]	; 0x3c
   18574:	str	sl, [sp, #64]	; 0x40
   18578:	str	sl, [sp, #68]	; 0x44
   1857c:	str	r2, [sp, #72]	; 0x48
   18580:	str	sl, [sp, #80]	; 0x50
   18584:	str	sl, [sp, #84]	; 0x54
   18588:	str	sl, [sp, #88]	; 0x58
   1858c:	b	1707c <__assert_fail@plt+0x5ed0>
   18590:	mov	r3, #0
   18594:	mov	r5, #48	; 0x30
   18598:	mov	r6, r3
   1859c:	b	177c8 <__assert_fail@plt+0x661c>
   185a0:	cmp	sl, r4
   185a4:	mov	r5, #48	; 0x30
   185a8:	movhi	r3, #48	; 0x30
   185ac:	strbhi	r3, [r9, r4]
   185b0:	add	r3, r2, #2
   185b4:	add	r4, r2, #3
   185b8:	cmp	sl, r3
   185bc:	movhi	r1, #48	; 0x30
   185c0:	strbhi	r1, [r9, r3]
   185c4:	mov	r3, #0
   185c8:	b	178a4 <__assert_fail@plt+0x66f8>
   185cc:	ldr	r3, [sp, #48]	; 0x30
   185d0:	str	r3, [sp, #40]	; 0x28
   185d4:	b	17eb0 <__assert_fail@plt+0x6d04>
   185d8:	ldr	r2, [sp, #28]
   185dc:	ldrb	r2, [r2, r3]
   185e0:	sub	r1, r2, #33	; 0x21
   185e4:	cmp	r1, #29
   185e8:	ldrls	pc, [pc, r1, lsl #2]
   185ec:	b	17928 <__assert_fail@plt+0x677c>
   185f0:	andeq	r8, r1, r8, ror #12
   185f4:	andeq	r7, r1, r8, lsr #18
   185f8:	andeq	r7, r1, r8, lsr #18
   185fc:	andeq	r7, r1, r8, lsr #18
   18600:	andeq	r7, r1, r8, lsr #18
   18604:	andeq	r7, r1, r8, lsr #18
   18608:	andeq	r8, r1, r8, ror #12
   1860c:	andeq	r8, r1, r8, ror #12
   18610:	andeq	r8, r1, r8, ror #12
   18614:	andeq	r7, r1, r8, lsr #18
   18618:	andeq	r7, r1, r8, lsr #18
   1861c:	andeq	r7, r1, r8, lsr #18
   18620:	andeq	r8, r1, r8, ror #12
   18624:	andeq	r7, r1, r8, lsr #18
   18628:	andeq	r8, r1, r8, ror #12
   1862c:	andeq	r7, r1, r8, lsr #18
   18630:	andeq	r7, r1, r8, lsr #18
   18634:	andeq	r7, r1, r8, lsr #18
   18638:	andeq	r7, r1, r8, lsr #18
   1863c:	andeq	r7, r1, r8, lsr #18
   18640:	andeq	r7, r1, r8, lsr #18
   18644:	andeq	r7, r1, r8, lsr #18
   18648:	andeq	r7, r1, r8, lsr #18
   1864c:	andeq	r7, r1, r8, lsr #18
   18650:	andeq	r7, r1, r8, lsr #18
   18654:	andeq	r7, r1, r8, lsr #18
   18658:	andeq	r7, r1, r8, lsr #18
   1865c:	andeq	r8, r1, r8, ror #12
   18660:	andeq	r8, r1, r8, ror #12
   18664:	andeq	r8, r1, r8, ror #12
   18668:	ldr	r1, [sp, #44]	; 0x2c
   1866c:	cmp	r1, #0
   18670:	bne	188d0 <__assert_fail@plt+0x7724>
   18674:	cmp	sl, r4
   18678:	mov	r7, r3
   1867c:	movhi	r1, #63	; 0x3f
   18680:	mov	r5, r2
   18684:	mov	r3, fp
   18688:	strbhi	r1, [r9, r4]
   1868c:	add	r1, r4, #1
   18690:	cmp	sl, r1
   18694:	movhi	r0, #34	; 0x22
   18698:	strbhi	r0, [r9, r1]
   1869c:	add	r1, r4, #2
   186a0:	cmp	sl, r1
   186a4:	movhi	r0, #34	; 0x22
   186a8:	strbhi	r0, [r9, r1]
   186ac:	add	r1, r4, #3
   186b0:	add	r4, r4, #4
   186b4:	cmp	sl, r1
   186b8:	movhi	r0, #63	; 0x3f
   186bc:	strbhi	r0, [r9, r1]
   186c0:	b	178a4 <__assert_fail@plt+0x66f8>
   186c4:	mov	fp, r9
   186c8:	b	17984 <__assert_fail@plt+0x67d8>
   186cc:	ldr	r3, [sp, #188]	; 0xbc
   186d0:	ldrb	r3, [r3]
   186d4:	cmp	r3, #0
   186d8:	beq	17014 <__assert_fail@plt+0x5e68>
   186dc:	ldr	r2, [sp, #188]	; 0xbc
   186e0:	cmp	sl, r4
   186e4:	bls	18704 <__assert_fail@plt+0x7558>
   186e8:	strb	r3, [fp, r4]
   186ec:	add	r4, r4, #1
   186f0:	ldrb	r3, [r2, #1]!
   186f4:	cmp	r3, #0
   186f8:	beq	17014 <__assert_fail@plt+0x5e68>
   186fc:	cmp	sl, r4
   18700:	bhi	186e8 <__assert_fail@plt+0x753c>
   18704:	ldrb	r3, [r2, #1]!
   18708:	add	r4, r4, #1
   1870c:	cmp	r3, #0
   18710:	bne	186e0 <__assert_fail@plt+0x7534>
   18714:	b	17014 <__assert_fail@plt+0x5e68>
   18718:	add	r9, sp, #100	; 0x64
   1871c:	mov	r0, r5
   18720:	ldr	r2, [sp, #60]	; 0x3c
   18724:	mov	r6, #0
   18728:	ldm	r9, {r9, sl, fp}
   1872c:	ldr	r5, [sp, #112]	; 0x70
   18730:	ldr	r4, [sp, #116]	; 0x74
   18734:	b	183e4 <__assert_fail@plt+0x7238>
   18738:	cmp	r4, r8
   1873c:	add	r9, sp, #100	; 0x64
   18740:	mov	r1, r4
   18744:	mov	r2, fp
   18748:	ldm	r9, {r9, sl, fp}
   1874c:	mov	r3, r5
   18750:	mov	r0, r5
   18754:	ldr	r5, [sp, #112]	; 0x70
   18758:	ldr	r4, [sp, #116]	; 0x74
   1875c:	bcs	18790 <__assert_fail@plt+0x75e4>
   18760:	ldrb	r6, [r2]
   18764:	cmp	r6, #0
   18768:	bne	1877c <__assert_fail@plt+0x75d0>
   1876c:	b	188c8 <__assert_fail@plt+0x771c>
   18770:	ldrb	r6, [r2, #1]!
   18774:	cmp	r6, #0
   18778:	beq	18860 <__assert_fail@plt+0x76b4>
   1877c:	add	r3, r3, #1
   18780:	add	r1, r7, r3
   18784:	cmp	r8, r1
   18788:	bhi	18770 <__assert_fail@plt+0x75c4>
   1878c:	mov	r0, r3
   18790:	mov	r6, #0
   18794:	ldr	r2, [sp, #60]	; 0x3c
   18798:	b	183e4 <__assert_fail@plt+0x7238>
   1879c:	mov	r3, #1
   187a0:	mov	r4, #0
   187a4:	mov	r9, r4
   187a8:	str	r3, [sp, #32]
   187ac:	str	r3, [sp, #44]	; 0x2c
   187b0:	str	r3, [sp, #48]	; 0x30
   187b4:	str	r4, [sp, #52]	; 0x34
   187b8:	str	r3, [sp, #56]	; 0x38
   187bc:	str	r3, [sp, #60]	; 0x3c
   187c0:	str	r3, [sp, #88]	; 0x58
   187c4:	movw	r3, #52732	; 0xcdfc
   187c8:	movt	r3, #1
   187cc:	str	r4, [sp, #64]	; 0x40
   187d0:	str	r4, [sp, #68]	; 0x44
   187d4:	str	r3, [sp, #72]	; 0x48
   187d8:	str	r4, [sp, #80]	; 0x50
   187dc:	str	r4, [sp, #84]	; 0x54
   187e0:	b	1707c <__assert_fail@plt+0x5ed0>
   187e4:	mov	fp, r9
   187e8:	b	17998 <__assert_fail@plt+0x67ec>
   187ec:	ldr	r3, [sp, #48]	; 0x30
   187f0:	b	1830c <__assert_fail@plt+0x7160>
   187f4:	mov	r2, r3
   187f8:	ldr	r3, [sp, #72]	; 0x48
   187fc:	cmp	r3, #0
   18800:	moveq	r2, #0
   18804:	andne	r2, r2, #1
   18808:	cmp	r2, #0
   1880c:	beq	1883c <__assert_fail@plt+0x7690>
   18810:	mov	r2, r3
   18814:	ldrb	r3, [r3]
   18818:	cmp	r3, #0
   1881c:	beq	1883c <__assert_fail@plt+0x7690>
   18820:	cmp	sl, r4
   18824:	bls	1884c <__assert_fail@plt+0x76a0>
   18828:	strb	r3, [fp, r4]
   1882c:	add	r4, r4, #1
   18830:	ldrb	r3, [r2, #1]!
   18834:	cmp	r3, #0
   18838:	bne	18820 <__assert_fail@plt+0x7674>
   1883c:	cmp	sl, r4
   18840:	movhi	r3, #0
   18844:	strbhi	r3, [fp, r4]
   18848:	b	179d4 <__assert_fail@plt+0x6828>
   1884c:	ldrb	r3, [r2, #1]!
   18850:	add	r4, r4, #1
   18854:	cmp	r3, #0
   18858:	bne	18820 <__assert_fail@plt+0x7674>
   1885c:	b	1883c <__assert_fail@plt+0x7690>
   18860:	mov	r0, r3
   18864:	ldr	r2, [sp, #60]	; 0x3c
   18868:	b	183e4 <__assert_fail@plt+0x7238>
   1886c:	mov	ip, #5
   18870:	mov	r3, r8
   18874:	ldr	r1, [sp, #84]	; 0x54
   18878:	str	ip, [sp]
   1887c:	ldr	r2, [sp, #180]	; 0xb4
   18880:	ldr	ip, [sp, #188]	; 0xbc
   18884:	ldr	r0, [sp, #184]	; 0xb8
   18888:	str	r2, [sp, #4]
   1888c:	ldr	r2, [sp, #28]
   18890:	str	ip, [sp, #12]
   18894:	ldr	ip, [sp, #192]	; 0xc0
   18898:	str	r0, [sp, #8]
   1889c:	mov	r0, fp
   188a0:	str	ip, [sp, #16]
   188a4:	bl	16f58 <__assert_fail@plt+0x5dac>
   188a8:	mov	r4, r0
   188ac:	b	179d4 <__assert_fail@plt+0x6828>
   188b0:	mov	r6, r3
   188b4:	str	r3, [sp, #40]	; 0x28
   188b8:	b	17944 <__assert_fail@plt+0x6798>
   188bc:	mov	r3, #2
   188c0:	str	r3, [sp, #176]	; 0xb0
   188c4:	b	17984 <__assert_fail@plt+0x67d8>
   188c8:	ldr	r2, [sp, #60]	; 0x3c
   188cc:	b	183e4 <__assert_fail@plt+0x7238>
   188d0:	mov	r3, #5
   188d4:	mov	fp, r9
   188d8:	str	r3, [sp, #176]	; 0xb0
   188dc:	b	17998 <__assert_fail@plt+0x67ec>
   188e0:	mov	r1, #1
   188e4:	mov	r9, #0
   188e8:	mov	r3, r9
   188ec:	mov	r2, r9
   188f0:	str	r1, [sp, #32]
   188f4:	str	sl, [sp, #84]	; 0x54
   188f8:	b	17720 <__assert_fail@plt+0x6574>
   188fc:	mov	r3, #0
   18900:	mov	r2, #1
   18904:	mov	r9, r3
   18908:	mov	r4, r3
   1890c:	str	r2, [sp, #32]
   18910:	strd	r2, [sp, #44]	; 0x2c
   18914:	strd	r2, [sp, #56]	; 0x38
   18918:	str	r3, [sp, #80]	; 0x50
   1891c:	str	r3, [sp, #84]	; 0x54
   18920:	str	r3, [sp, #88]	; 0x58
   18924:	movw	r3, #52752	; 0xce10
   18928:	movt	r3, #1
   1892c:	str	r2, [sp, #52]	; 0x34
   18930:	str	r2, [sp, #64]	; 0x40
   18934:	str	r2, [sp, #68]	; 0x44
   18938:	str	r3, [sp, #72]	; 0x48
   1893c:	b	1707c <__assert_fail@plt+0x5ed0>
   18940:	bl	1117c <abort@plt>
   18944:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18948:	mov	r4, r0
   1894c:	mov	r5, r3
   18950:	strd	r6, [sp, #8]
   18954:	movw	r7, #57636	; 0xe124
   18958:	movt	r7, #2
   1895c:	strd	r8, [sp, #16]
   18960:	strd	sl, [sp, #24]
   18964:	mov	sl, r1
   18968:	mov	fp, r2
   1896c:	str	lr, [sp, #32]
   18970:	sub	sp, sp, #60	; 0x3c
   18974:	bl	11068 <__errno_location@plt>
   18978:	mov	r8, r0
   1897c:	cmn	r4, #-2147483647	; 0x80000001
   18980:	ldr	r6, [r7]
   18984:	movne	r0, #0
   18988:	moveq	r0, #1
   1898c:	ldr	r3, [r8]
   18990:	orrs	r0, r0, r4, lsr #31
   18994:	str	r3, [sp, #28]
   18998:	bne	18b28 <__assert_fail@plt+0x797c>
   1899c:	ldr	r3, [r7, #4]
   189a0:	cmp	r3, r4
   189a4:	bgt	18a04 <__assert_fail@plt+0x7858>
   189a8:	add	r1, r7, #8
   189ac:	sub	r2, r4, r3
   189b0:	str	r3, [sp, #52]	; 0x34
   189b4:	cmp	r6, r1
   189b8:	add	r2, r2, #1
   189bc:	beq	18b00 <__assert_fail@plt+0x7954>
   189c0:	mov	r1, #8
   189c4:	mov	r0, r6
   189c8:	mvn	r3, #-2147483648	; 0x80000000
   189cc:	str	r1, [sp]
   189d0:	add	r1, sp, #52	; 0x34
   189d4:	bl	1b31c <__assert_fail@plt+0xa170>
   189d8:	mov	r6, r0
   189dc:	str	r0, [r7]
   189e0:	ldr	r0, [r7, #4]
   189e4:	mov	r1, #0
   189e8:	ldr	r2, [sp, #52]	; 0x34
   189ec:	sub	r2, r2, r0
   189f0:	add	r0, r6, r0, lsl #3
   189f4:	lsl	r2, r2, #3
   189f8:	bl	1108c <memset@plt>
   189fc:	ldr	r3, [sp, #52]	; 0x34
   18a00:	str	r3, [r7, #4]
   18a04:	ldr	r1, [r5, #4]
   18a08:	add	r0, r6, r4, lsl #3
   18a0c:	add	ip, r5, #8
   18a10:	mov	r3, fp
   18a14:	mov	r2, sl
   18a18:	ldr	r7, [r0, #4]
   18a1c:	str	r0, [sp, #36]	; 0x24
   18a20:	str	ip, [sp, #40]	; 0x28
   18a24:	orr	r0, r1, #1
   18a28:	ldr	r9, [r6, r4, lsl #3]
   18a2c:	str	ip, [sp, #8]
   18a30:	ldr	lr, [r5, #44]	; 0x2c
   18a34:	str	r0, [sp, #4]
   18a38:	ldr	ip, [r5]
   18a3c:	mov	r1, r9
   18a40:	str	ip, [sp, #32]
   18a44:	ldr	ip, [r5, #40]	; 0x28
   18a48:	str	ip, [sp, #12]
   18a4c:	ldr	ip, [sp, #32]
   18a50:	str	lr, [sp, #16]
   18a54:	str	r0, [sp, #44]	; 0x2c
   18a58:	mov	r0, r7
   18a5c:	str	ip, [sp]
   18a60:	bl	16f58 <__assert_fail@plt+0x5dac>
   18a64:	cmp	r9, r0
   18a68:	bhi	18ad8 <__assert_fail@plt+0x792c>
   18a6c:	add	r9, r0, #1
   18a70:	movw	r3, #57784	; 0xe1b8
   18a74:	movt	r3, #2
   18a78:	cmp	r7, r3
   18a7c:	str	r9, [r6, r4, lsl #3]
   18a80:	beq	18a8c <__assert_fail@plt+0x78e0>
   18a84:	mov	r0, r7
   18a88:	bl	1bca8 <__assert_fail@plt+0xaafc>
   18a8c:	mov	r0, r9
   18a90:	bl	1b078 <__assert_fail@plt+0x9ecc>
   18a94:	ldr	ip, [r5]
   18a98:	mov	r3, fp
   18a9c:	mov	r2, sl
   18aa0:	mov	r1, r9
   18aa4:	mov	r7, r0
   18aa8:	ldr	lr, [sp, #36]	; 0x24
   18aac:	ldr	r4, [r5, #40]	; 0x28
   18ab0:	str	r0, [lr, #4]
   18ab4:	ldr	lr, [r5, #44]	; 0x2c
   18ab8:	str	ip, [sp]
   18abc:	ldr	ip, [sp, #44]	; 0x2c
   18ac0:	str	ip, [sp, #4]
   18ac4:	ldr	ip, [sp, #40]	; 0x28
   18ac8:	str	r4, [sp, #12]
   18acc:	str	lr, [sp, #16]
   18ad0:	str	ip, [sp, #8]
   18ad4:	bl	16f58 <__assert_fail@plt+0x5dac>
   18ad8:	ldr	r3, [sp, #28]
   18adc:	mov	r0, r7
   18ae0:	str	r3, [r8]
   18ae4:	add	sp, sp, #60	; 0x3c
   18ae8:	ldrd	r4, [sp]
   18aec:	ldrd	r6, [sp, #8]
   18af0:	ldrd	r8, [sp, #16]
   18af4:	ldrd	sl, [sp, #24]
   18af8:	add	sp, sp, #32
   18afc:	pop	{pc}		; (ldr pc, [sp], #4)
   18b00:	mov	r1, #8
   18b04:	mvn	r3, #-2147483648	; 0x80000000
   18b08:	str	r1, [sp]
   18b0c:	add	r1, sp, #52	; 0x34
   18b10:	bl	1b31c <__assert_fail@plt+0xa170>
   18b14:	ldrd	r2, [r7, #8]
   18b18:	mov	r6, r0
   18b1c:	str	r0, [r7]
   18b20:	strd	r2, [r0]
   18b24:	b	189e0 <__assert_fail@plt+0x7834>
   18b28:	bl	1117c <abort@plt>
   18b2c:	strd	r4, [sp, #-16]!
   18b30:	mov	r5, r0
   18b34:	str	r6, [sp, #8]
   18b38:	str	lr, [sp, #12]
   18b3c:	bl	11068 <__errno_location@plt>
   18b40:	mov	r4, r0
   18b44:	cmp	r5, #0
   18b48:	ldr	r0, [pc, #32]	; 18b70 <__assert_fail@plt+0x79c4>
   18b4c:	mov	r1, #48	; 0x30
   18b50:	movne	r0, r5
   18b54:	ldr	r6, [r4]
   18b58:	bl	1b4bc <__assert_fail@plt+0xa310>
   18b5c:	str	r6, [r4]
   18b60:	ldrd	r4, [sp]
   18b64:	ldr	r6, [sp, #8]
   18b68:	add	sp, sp, #12
   18b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b70:			; <UNDEFINED> instruction: 0x0002e2b8
   18b74:	ldr	r3, [pc, #12]	; 18b88 <__assert_fail@plt+0x79dc>
   18b78:	cmp	r0, #0
   18b7c:	moveq	r0, r3
   18b80:	ldr	r0, [r0]
   18b84:	bx	lr
   18b88:			; <UNDEFINED> instruction: 0x0002e2b8
   18b8c:	ldr	r3, [pc, #12]	; 18ba0 <__assert_fail@plt+0x79f4>
   18b90:	cmp	r0, #0
   18b94:	moveq	r0, r3
   18b98:	str	r1, [r0]
   18b9c:	bx	lr
   18ba0:			; <UNDEFINED> instruction: 0x0002e2b8
   18ba4:	ldr	r3, [pc, #52]	; 18be0 <__assert_fail@plt+0x7a34>
   18ba8:	cmp	r0, #0
   18bac:	push	{lr}		; (str lr, [sp, #-4]!)
   18bb0:	lsr	lr, r1, #5
   18bb4:	and	r1, r1, #31
   18bb8:	moveq	r0, r3
   18bbc:	add	r3, r0, #8
   18bc0:	ldr	ip, [r3, lr, lsl #2]
   18bc4:	lsr	r0, ip, r1
   18bc8:	eor	r2, r2, r0
   18bcc:	and	r0, r0, #1
   18bd0:	and	r2, r2, #1
   18bd4:	eor	r1, ip, r2, lsl r1
   18bd8:	str	r1, [r3, lr, lsl #2]
   18bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   18be0:			; <UNDEFINED> instruction: 0x0002e2b8
   18be4:	ldr	r3, [pc, #16]	; 18bfc <__assert_fail@plt+0x7a50>
   18be8:	cmp	r0, #0
   18bec:	movne	r3, r0
   18bf0:	ldr	r0, [r3, #4]
   18bf4:	str	r1, [r3, #4]
   18bf8:	bx	lr
   18bfc:			; <UNDEFINED> instruction: 0x0002e2b8
   18c00:	ldr	r3, [pc, #48]	; 18c38 <__assert_fail@plt+0x7a8c>
   18c04:	cmp	r0, #0
   18c08:	mov	ip, #10
   18c0c:	moveq	r0, r3
   18c10:	cmp	r2, #0
   18c14:	cmpne	r1, #0
   18c18:	str	ip, [r0]
   18c1c:	beq	18c2c <__assert_fail@plt+0x7a80>
   18c20:	str	r1, [r0, #40]	; 0x28
   18c24:	str	r2, [r0, #44]	; 0x2c
   18c28:	bx	lr
   18c2c:	str	r4, [sp, #-8]!
   18c30:	str	lr, [sp, #4]
   18c34:	bl	1117c <abort@plt>
   18c38:			; <UNDEFINED> instruction: 0x0002e2b8
   18c3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18c40:	strd	r6, [sp, #8]
   18c44:	mov	r7, r0
   18c48:	mov	r6, r1
   18c4c:	strd	r8, [sp, #16]
   18c50:	mov	r8, r2
   18c54:	mov	r9, r3
   18c58:	str	lr, [sp, #24]
   18c5c:	sub	sp, sp, #28
   18c60:	ldr	r4, [sp, #56]	; 0x38
   18c64:	ldr	ip, [pc, #104]	; 18cd4 <__assert_fail@plt+0x7b28>
   18c68:	cmp	r4, #0
   18c6c:	moveq	r4, ip
   18c70:	bl	11068 <__errno_location@plt>
   18c74:	ldr	ip, [r4, #44]	; 0x2c
   18c78:	mov	r5, r0
   18c7c:	mov	r1, r6
   18c80:	add	lr, r4, #8
   18c84:	mov	r3, r9
   18c88:	ldr	r6, [r5]
   18c8c:	mov	r2, r8
   18c90:	mov	r0, r7
   18c94:	str	ip, [sp, #16]
   18c98:	ldr	ip, [r4, #40]	; 0x28
   18c9c:	str	lr, [sp, #8]
   18ca0:	str	ip, [sp, #12]
   18ca4:	ldr	ip, [r4, #4]
   18ca8:	str	ip, [sp, #4]
   18cac:	ldr	ip, [r4]
   18cb0:	str	ip, [sp]
   18cb4:	bl	16f58 <__assert_fail@plt+0x5dac>
   18cb8:	str	r6, [r5]
   18cbc:	add	sp, sp, #28
   18cc0:	ldrd	r4, [sp]
   18cc4:	ldrd	r6, [sp, #8]
   18cc8:	ldrd	r8, [sp, #16]
   18ccc:	add	sp, sp, #24
   18cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   18cd4:			; <UNDEFINED> instruction: 0x0002e2b8
   18cd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18cdc:	cmp	r2, #0
   18ce0:	ldr	r4, [pc, #192]	; 18da8 <__assert_fail@plt+0x7bfc>
   18ce4:	movne	r4, r2
   18ce8:	strd	r6, [sp, #8]
   18cec:	strd	r8, [sp, #16]
   18cf0:	mov	r9, r1
   18cf4:	mov	r8, r0
   18cf8:	strd	sl, [sp, #24]
   18cfc:	str	lr, [sp, #32]
   18d00:	sub	sp, sp, #36	; 0x24
   18d04:	bl	11068 <__errno_location@plt>
   18d08:	ldr	r5, [r4, #4]
   18d0c:	mov	r6, r0
   18d10:	add	r7, r4, #8
   18d14:	mov	r1, #0
   18d18:	mov	r3, r9
   18d1c:	ldr	ip, [r4, #44]	; 0x2c
   18d20:	mov	r2, r8
   18d24:	mov	r0, r1
   18d28:	ldr	sl, [r6]
   18d2c:	orr	r5, r5, #1
   18d30:	str	ip, [sp, #16]
   18d34:	ldr	ip, [r4, #40]	; 0x28
   18d38:	stmib	sp, {r5, r7, ip}
   18d3c:	ldr	ip, [r4]
   18d40:	str	ip, [sp]
   18d44:	bl	16f58 <__assert_fail@plt+0x5dac>
   18d48:	add	r1, r0, #1
   18d4c:	mov	r0, r1
   18d50:	str	r1, [sp, #28]
   18d54:	bl	1b078 <__assert_fail@plt+0x9ecc>
   18d58:	ldr	ip, [r4, #44]	; 0x2c
   18d5c:	mov	fp, r0
   18d60:	mov	r3, r9
   18d64:	mov	r2, r8
   18d68:	ldr	r1, [sp, #28]
   18d6c:	str	ip, [sp, #16]
   18d70:	ldr	ip, [r4, #40]	; 0x28
   18d74:	stmib	sp, {r5, r7, ip}
   18d78:	ldr	ip, [r4]
   18d7c:	str	ip, [sp]
   18d80:	bl	16f58 <__assert_fail@plt+0x5dac>
   18d84:	mov	r0, fp
   18d88:	str	sl, [r6]
   18d8c:	add	sp, sp, #36	; 0x24
   18d90:	ldrd	r4, [sp]
   18d94:	ldrd	r6, [sp, #8]
   18d98:	ldrd	r8, [sp, #16]
   18d9c:	ldrd	sl, [sp, #24]
   18da0:	add	sp, sp, #32
   18da4:	pop	{pc}		; (ldr pc, [sp], #4)
   18da8:			; <UNDEFINED> instruction: 0x0002e2b8
   18dac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18db0:	cmp	r3, #0
   18db4:	ldr	r4, [pc, #220]	; 18e98 <__assert_fail@plt+0x7cec>
   18db8:	movne	r4, r3
   18dbc:	strd	r6, [sp, #8]
   18dc0:	mov	r6, r2
   18dc4:	strd	r8, [sp, #16]
   18dc8:	mov	r9, r0
   18dcc:	strd	sl, [sp, #24]
   18dd0:	mov	sl, r1
   18dd4:	str	lr, [sp, #32]
   18dd8:	sub	sp, sp, #44	; 0x2c
   18ddc:	bl	11068 <__errno_location@plt>
   18de0:	ldr	r5, [r4, #4]
   18de4:	mov	r7, r0
   18de8:	mov	r1, #0
   18dec:	add	r8, r4, #8
   18df0:	mov	r3, sl
   18df4:	ldr	ip, [r4, #44]	; 0x2c
   18df8:	mov	r2, r9
   18dfc:	mov	r0, r1
   18e00:	ldr	lr, [r7]
   18e04:	cmp	r6, r1
   18e08:	orreq	r5, r5, #1
   18e0c:	str	ip, [sp, #16]
   18e10:	ldr	ip, [r4, #40]	; 0x28
   18e14:	stmib	sp, {r5, r8, ip}
   18e18:	ldr	ip, [r4]
   18e1c:	str	lr, [sp, #28]
   18e20:	str	ip, [sp]
   18e24:	bl	16f58 <__assert_fail@plt+0x5dac>
   18e28:	add	r1, r0, #1
   18e2c:	mov	fp, r0
   18e30:	mov	r0, r1
   18e34:	str	r1, [sp, #36]	; 0x24
   18e38:	bl	1b078 <__assert_fail@plt+0x9ecc>
   18e3c:	ldr	ip, [r4, #44]	; 0x2c
   18e40:	mov	r3, sl
   18e44:	mov	r2, r9
   18e48:	ldr	r1, [sp, #36]	; 0x24
   18e4c:	str	ip, [sp, #16]
   18e50:	ldr	ip, [r4, #40]	; 0x28
   18e54:	str	r0, [sp, #32]
   18e58:	stmib	sp, {r5, r8, ip}
   18e5c:	ldr	ip, [r4]
   18e60:	str	ip, [sp]
   18e64:	bl	16f58 <__assert_fail@plt+0x5dac>
   18e68:	ldr	lr, [sp, #28]
   18e6c:	cmp	r6, #0
   18e70:	ldr	r0, [sp, #32]
   18e74:	str	lr, [r7]
   18e78:	strne	fp, [r6]
   18e7c:	add	sp, sp, #44	; 0x2c
   18e80:	ldrd	r4, [sp]
   18e84:	ldrd	r6, [sp, #8]
   18e88:	ldrd	r8, [sp, #16]
   18e8c:	ldrd	sl, [sp, #24]
   18e90:	add	sp, sp, #32
   18e94:	pop	{pc}		; (ldr pc, [sp], #4)
   18e98:			; <UNDEFINED> instruction: 0x0002e2b8
   18e9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ea0:	movw	r5, #57636	; 0xe124
   18ea4:	movt	r5, #2
   18ea8:	ldr	r3, [r5, #4]
   18eac:	strd	r6, [sp, #8]
   18eb0:	str	r8, [sp, #16]
   18eb4:	str	lr, [sp, #20]
   18eb8:	ldr	r7, [r5]
   18ebc:	cmp	r3, #1
   18ec0:	ble	18ee4 <__assert_fail@plt+0x7d38>
   18ec4:	mov	r4, #1
   18ec8:	add	r6, r7, #4
   18ecc:	ldr	r0, [r6, r4, lsl #3]
   18ed0:	add	r4, r4, #1
   18ed4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   18ed8:	ldr	r3, [r5, #4]
   18edc:	cmp	r3, r4
   18ee0:	bgt	18ecc <__assert_fail@plt+0x7d20>
   18ee4:	ldr	r0, [r7, #4]
   18ee8:	movw	r4, #57784	; 0xe1b8
   18eec:	movt	r4, #2
   18ef0:	cmp	r0, r4
   18ef4:	beq	18f08 <__assert_fail@plt+0x7d5c>
   18ef8:	bl	1bca8 <__assert_fail@plt+0xaafc>
   18efc:	mov	r3, #256	; 0x100
   18f00:	str	r3, [r5, #8]
   18f04:	str	r4, [r5, #12]
   18f08:	ldr	r4, [pc, #44]	; 18f3c <__assert_fail@plt+0x7d90>
   18f0c:	cmp	r7, r4
   18f10:	beq	18f20 <__assert_fail@plt+0x7d74>
   18f14:	mov	r0, r7
   18f18:	bl	1bca8 <__assert_fail@plt+0xaafc>
   18f1c:	str	r4, [r5]
   18f20:	mov	r3, #1
   18f24:	ldrd	r6, [sp, #8]
   18f28:	str	r3, [r5, #4]
   18f2c:	ldrd	r4, [sp]
   18f30:	ldr	r8, [sp, #16]
   18f34:	add	sp, sp, #20
   18f38:	pop	{pc}		; (ldr pc, [sp], #4)
   18f3c:	andeq	lr, r2, ip, lsr #2
   18f40:	ldr	r3, [pc, #4]	; 18f4c <__assert_fail@plt+0x7da0>
   18f44:	mvn	r2, #0
   18f48:	b	18944 <__assert_fail@plt+0x7798>
   18f4c:			; <UNDEFINED> instruction: 0x0002e2b8
   18f50:	ldr	r3, [pc]	; 18f58 <__assert_fail@plt+0x7dac>
   18f54:	b	18944 <__assert_fail@plt+0x7798>
   18f58:			; <UNDEFINED> instruction: 0x0002e2b8
   18f5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18f60:	movw	r4, #57636	; 0xe124
   18f64:	movt	r4, #2
   18f68:	strd	r6, [sp, #8]
   18f6c:	strd	r8, [sp, #16]
   18f70:	strd	sl, [sp, #24]
   18f74:	mov	sl, r0
   18f78:	str	lr, [sp, #32]
   18f7c:	sub	sp, sp, #44	; 0x2c
   18f80:	bl	11068 <__errno_location@plt>
   18f84:	ldr	r3, [r0]
   18f88:	mov	r8, r0
   18f8c:	ldr	r2, [r4, #4]
   18f90:	ldr	r5, [r4]
   18f94:	str	r3, [sp, #28]
   18f98:	cmp	r2, #0
   18f9c:	bgt	18ff8 <__assert_fail@plt+0x7e4c>
   18fa0:	add	r3, r4, #8
   18fa4:	str	r2, [sp, #36]	; 0x24
   18fa8:	rsb	r2, r2, #1
   18fac:	cmp	r5, r3
   18fb0:	beq	190c4 <__assert_fail@plt+0x7f18>
   18fb4:	mov	r1, #8
   18fb8:	mov	r0, r5
   18fbc:	mvn	r3, #-2147483648	; 0x80000000
   18fc0:	str	r1, [sp]
   18fc4:	add	r1, sp, #36	; 0x24
   18fc8:	bl	1b31c <__assert_fail@plt+0xa170>
   18fcc:	mov	r5, r0
   18fd0:	str	r0, [r4]
   18fd4:	ldr	r0, [r4, #4]
   18fd8:	mov	r1, #0
   18fdc:	ldr	r2, [sp, #36]	; 0x24
   18fe0:	sub	r2, r2, r0
   18fe4:	add	r0, r5, r0, lsl #3
   18fe8:	lsl	r2, r2, #3
   18fec:	bl	1108c <memset@plt>
   18ff0:	ldr	r3, [sp, #36]	; 0x24
   18ff4:	str	r3, [r4, #4]
   18ff8:	movw	r4, #57784	; 0xe1b8
   18ffc:	movt	r4, #2
   19000:	ldr	r9, [r5]
   19004:	add	fp, r4, #264	; 0x108
   19008:	mvn	r3, #0
   1900c:	ldr	r7, [r4, #260]	; 0x104
   19010:	mov	r2, sl
   19014:	ldr	r6, [r5, #4]
   19018:	str	fp, [sp, #8]
   1901c:	mov	r1, r9
   19020:	ldr	ip, [r4, #256]	; 0x100
   19024:	orr	r7, r7, #1
   19028:	ldr	lr, [r4, #300]	; 0x12c
   1902c:	mov	r0, r6
   19030:	str	ip, [sp]
   19034:	str	r7, [sp, #4]
   19038:	str	lr, [sp, #16]
   1903c:	ldr	ip, [r4, #296]	; 0x128
   19040:	str	ip, [sp, #12]
   19044:	bl	16f58 <__assert_fail@plt+0x5dac>
   19048:	cmp	r9, r0
   1904c:	bhi	1909c <__assert_fail@plt+0x7ef0>
   19050:	add	r9, r0, #1
   19054:	cmp	r6, r4
   19058:	str	r9, [r5]
   1905c:	beq	19068 <__assert_fail@plt+0x7ebc>
   19060:	mov	r0, r6
   19064:	bl	1bca8 <__assert_fail@plt+0xaafc>
   19068:	mov	r0, r9
   1906c:	bl	1b078 <__assert_fail@plt+0x9ecc>
   19070:	ldr	r3, [r4, #256]	; 0x100
   19074:	mov	r2, sl
   19078:	mov	r1, r9
   1907c:	mov	r6, r0
   19080:	ldr	lr, [r4, #296]	; 0x128
   19084:	ldr	ip, [r4, #300]	; 0x12c
   19088:	str	r0, [r5, #4]
   1908c:	stm	sp, {r3, r7, fp, lr}
   19090:	mvn	r3, #0
   19094:	str	ip, [sp, #16]
   19098:	bl	16f58 <__assert_fail@plt+0x5dac>
   1909c:	ldr	r3, [sp, #28]
   190a0:	mov	r0, r6
   190a4:	str	r3, [r8]
   190a8:	add	sp, sp, #44	; 0x2c
   190ac:	ldrd	r4, [sp]
   190b0:	ldrd	r6, [sp, #8]
   190b4:	ldrd	r8, [sp, #16]
   190b8:	ldrd	sl, [sp, #24]
   190bc:	add	sp, sp, #32
   190c0:	pop	{pc}		; (ldr pc, [sp], #4)
   190c4:	mov	r0, #8
   190c8:	mvn	r3, #-2147483648	; 0x80000000
   190cc:	add	r1, sp, #36	; 0x24
   190d0:	str	r0, [sp]
   190d4:	mov	r0, #0
   190d8:	bl	1b31c <__assert_fail@plt+0xa170>
   190dc:	ldrd	r2, [r4, #8]
   190e0:	mov	r5, r0
   190e4:	str	r0, [r4]
   190e8:	strd	r2, [r0]
   190ec:	b	18fd4 <__assert_fail@plt+0x7e28>
   190f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   190f4:	movw	r4, #57636	; 0xe124
   190f8:	movt	r4, #2
   190fc:	strd	r6, [sp, #8]
   19100:	strd	r8, [sp, #16]
   19104:	strd	sl, [sp, #24]
   19108:	mov	sl, r0
   1910c:	mov	fp, r1
   19110:	str	lr, [sp, #32]
   19114:	sub	sp, sp, #44	; 0x2c
   19118:	bl	11068 <__errno_location@plt>
   1911c:	ldr	r3, [r0]
   19120:	mov	r8, r0
   19124:	ldr	r2, [r4, #4]
   19128:	ldr	r5, [r4]
   1912c:	str	r3, [sp, #28]
   19130:	cmp	r2, #0
   19134:	bgt	19190 <__assert_fail@plt+0x7fe4>
   19138:	add	r3, r4, #8
   1913c:	str	r2, [sp, #36]	; 0x24
   19140:	rsb	r2, r2, #1
   19144:	cmp	r5, r3
   19148:	beq	1926c <__assert_fail@plt+0x80c0>
   1914c:	mov	r1, #8
   19150:	mov	r0, r5
   19154:	mvn	r3, #-2147483648	; 0x80000000
   19158:	str	r1, [sp]
   1915c:	add	r1, sp, #36	; 0x24
   19160:	bl	1b31c <__assert_fail@plt+0xa170>
   19164:	mov	r5, r0
   19168:	str	r0, [r4]
   1916c:	ldr	r0, [r4, #4]
   19170:	mov	r1, #0
   19174:	ldr	r2, [sp, #36]	; 0x24
   19178:	sub	r2, r2, r0
   1917c:	add	r0, r5, r0, lsl #3
   19180:	lsl	r2, r2, #3
   19184:	bl	1108c <memset@plt>
   19188:	ldr	r3, [sp, #36]	; 0x24
   1918c:	str	r3, [r4, #4]
   19190:	movw	r4, #57784	; 0xe1b8
   19194:	movt	r4, #2
   19198:	ldr	r9, [r5]
   1919c:	add	r0, r4, #264	; 0x108
   191a0:	mov	r3, fp
   191a4:	ldr	r7, [r4, #260]	; 0x104
   191a8:	mov	r2, sl
   191ac:	ldr	r6, [r5, #4]
   191b0:	str	r0, [sp, #8]
   191b4:	mov	r1, r9
   191b8:	ldr	ip, [r4, #256]	; 0x100
   191bc:	orr	r7, r7, #1
   191c0:	ldr	lr, [r4, #300]	; 0x12c
   191c4:	mov	r0, r6
   191c8:	str	ip, [sp]
   191cc:	str	r7, [sp, #4]
   191d0:	str	lr, [sp, #16]
   191d4:	ldr	ip, [r4, #296]	; 0x128
   191d8:	str	ip, [sp, #12]
   191dc:	bl	16f58 <__assert_fail@plt+0x5dac>
   191e0:	cmp	r9, r0
   191e4:	bhi	19244 <__assert_fail@plt+0x8098>
   191e8:	add	r9, r0, #1
   191ec:	cmp	r6, r4
   191f0:	str	r9, [r5]
   191f4:	beq	19200 <__assert_fail@plt+0x8054>
   191f8:	mov	r0, r6
   191fc:	bl	1bca8 <__assert_fail@plt+0xaafc>
   19200:	mov	r0, r9
   19204:	bl	1b078 <__assert_fail@plt+0x9ecc>
   19208:	ldr	ip, [r4, #256]	; 0x100
   1920c:	mov	r1, r9
   19210:	mov	r3, fp
   19214:	mov	r2, sl
   19218:	mov	r6, r0
   1921c:	ldr	r9, [r4, #296]	; 0x128
   19220:	ldr	lr, [r4, #300]	; 0x12c
   19224:	str	r0, [r5, #4]
   19228:	str	ip, [sp]
   1922c:	ldr	ip, [pc, #100]	; 19298 <__assert_fail@plt+0x80ec>
   19230:	str	r7, [sp, #4]
   19234:	str	ip, [sp, #8]
   19238:	str	r9, [sp, #12]
   1923c:	str	lr, [sp, #16]
   19240:	bl	16f58 <__assert_fail@plt+0x5dac>
   19244:	ldr	r3, [sp, #28]
   19248:	mov	r0, r6
   1924c:	str	r3, [r8]
   19250:	add	sp, sp, #44	; 0x2c
   19254:	ldrd	r4, [sp]
   19258:	ldrd	r6, [sp, #8]
   1925c:	ldrd	r8, [sp, #16]
   19260:	ldrd	sl, [sp, #24]
   19264:	add	sp, sp, #32
   19268:	pop	{pc}		; (ldr pc, [sp], #4)
   1926c:	mov	r0, #8
   19270:	mvn	r3, #-2147483648	; 0x80000000
   19274:	add	r1, sp, #36	; 0x24
   19278:	str	r0, [sp]
   1927c:	mov	r0, #0
   19280:	bl	1b31c <__assert_fail@plt+0xa170>
   19284:	ldrd	r2, [r4, #8]
   19288:	mov	r5, r0
   1928c:	str	r0, [r4]
   19290:	strd	r2, [r0]
   19294:	b	1916c <__assert_fail@plt+0x7fc0>
   19298:	andeq	lr, r2, r0, asr #5
   1929c:	strd	r4, [sp, #-20]!	; 0xffffffec
   192a0:	mov	r4, #0
   192a4:	mov	r5, #0
   192a8:	strd	r6, [sp, #8]
   192ac:	cmp	r1, #10
   192b0:	str	lr, [sp, #16]
   192b4:	sub	sp, sp, #100	; 0x64
   192b8:	strd	r4, [sp, #48]	; 0x30
   192bc:	beq	19304 <__assert_fail@plt+0x8158>
   192c0:	mov	r3, sp
   192c4:	strd	r4, [sp, #8]
   192c8:	str	r1, [sp, #48]	; 0x30
   192cc:	mov	r1, r2
   192d0:	mvn	r2, #0
   192d4:	ldrd	r6, [sp, #48]	; 0x30
   192d8:	strd	r6, [sp]
   192dc:	strd	r4, [sp, #16]
   192e0:	strd	r4, [sp, #24]
   192e4:	strd	r4, [sp, #32]
   192e8:	strd	r4, [sp, #40]	; 0x28
   192ec:	bl	18944 <__assert_fail@plt+0x7798>
   192f0:	add	sp, sp, #100	; 0x64
   192f4:	ldrd	r4, [sp]
   192f8:	ldrd	r6, [sp, #8]
   192fc:	add	sp, sp, #16
   19300:	pop	{pc}		; (ldr pc, [sp], #4)
   19304:	bl	1117c <abort@plt>
   19308:	strd	r4, [sp, #-20]!	; 0xffffffec
   1930c:	mov	r4, #0
   19310:	mov	r5, #0
   19314:	strd	r6, [sp, #8]
   19318:	cmp	r1, #10
   1931c:	str	lr, [sp, #16]
   19320:	sub	sp, sp, #100	; 0x64
   19324:	strd	r4, [sp, #48]	; 0x30
   19328:	beq	19374 <__assert_fail@plt+0x81c8>
   1932c:	mov	ip, r2
   19330:	mov	r2, r3
   19334:	strd	r4, [sp, #8]
   19338:	str	r1, [sp, #48]	; 0x30
   1933c:	mov	r3, sp
   19340:	mov	r1, ip
   19344:	ldrd	r6, [sp, #48]	; 0x30
   19348:	strd	r6, [sp]
   1934c:	strd	r4, [sp, #16]
   19350:	strd	r4, [sp, #24]
   19354:	strd	r4, [sp, #32]
   19358:	strd	r4, [sp, #40]	; 0x28
   1935c:	bl	18944 <__assert_fail@plt+0x7798>
   19360:	add	sp, sp, #100	; 0x64
   19364:	ldrd	r4, [sp]
   19368:	ldrd	r6, [sp, #8]
   1936c:	add	sp, sp, #16
   19370:	pop	{pc}		; (ldr pc, [sp], #4)
   19374:	bl	1117c <abort@plt>
   19378:	mov	r2, #0
   1937c:	mov	r3, #0
   19380:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19384:	strd	r6, [sp, #8]
   19388:	cmp	r0, #10
   1938c:	strd	r8, [sp, #16]
   19390:	strd	sl, [sp, #24]
   19394:	str	lr, [sp, #32]
   19398:	sub	sp, sp, #124	; 0x7c
   1939c:	strd	r2, [sp, #72]	; 0x48
   193a0:	strd	r2, [sp, #80]	; 0x50
   193a4:	strd	r2, [sp, #88]	; 0x58
   193a8:	strd	r2, [sp, #96]	; 0x60
   193ac:	strd	r2, [sp, #104]	; 0x68
   193b0:	strd	r2, [sp, #112]	; 0x70
   193b4:	beq	19558 <__assert_fail@plt+0x83ac>
   193b8:	mov	r6, r1
   193bc:	movw	r4, #57636	; 0xe124
   193c0:	movt	r4, #2
   193c4:	str	r0, [sp, #72]	; 0x48
   193c8:	ldrd	r0, [sp, #72]	; 0x48
   193cc:	strd	r0, [sp, #24]
   193d0:	strd	r2, [sp, #32]
   193d4:	strd	r2, [sp, #40]	; 0x28
   193d8:	strd	r2, [sp, #48]	; 0x30
   193dc:	strd	r2, [sp, #56]	; 0x38
   193e0:	strd	r2, [sp, #64]	; 0x40
   193e4:	bl	11068 <__errno_location@plt>
   193e8:	mov	r8, r0
   193ec:	ldr	r5, [r4]
   193f0:	ldr	r2, [r4, #4]
   193f4:	ldr	r9, [r0]
   193f8:	cmp	r2, #0
   193fc:	bgt	19458 <__assert_fail@plt+0x82ac>
   19400:	add	r3, r4, #8
   19404:	str	r2, [sp, #72]	; 0x48
   19408:	rsb	r2, r2, #1
   1940c:	cmp	r5, r3
   19410:	beq	1952c <__assert_fail@plt+0x8380>
   19414:	mov	r3, #8
   19418:	mov	r0, r5
   1941c:	add	r1, sp, #72	; 0x48
   19420:	str	r3, [sp]
   19424:	mvn	r3, #-2147483648	; 0x80000000
   19428:	bl	1b31c <__assert_fail@plt+0xa170>
   1942c:	mov	r5, r0
   19430:	str	r0, [r4]
   19434:	ldr	r0, [r4, #4]
   19438:	mov	r1, #0
   1943c:	ldr	r2, [sp, #72]	; 0x48
   19440:	sub	r2, r2, r0
   19444:	add	r0, r5, r0, lsl #3
   19448:	lsl	r2, r2, #3
   1944c:	bl	1108c <memset@plt>
   19450:	ldr	r3, [sp, #72]	; 0x48
   19454:	str	r3, [r4, #4]
   19458:	ldr	sl, [r5]
   1945c:	add	r0, sp, #32
   19460:	mvn	r3, #0
   19464:	mov	r2, r6
   19468:	ldr	r7, [sp, #28]
   1946c:	ldr	r4, [r5, #4]
   19470:	mov	r1, sl
   19474:	str	r0, [sp, #8]
   19478:	ldr	lr, [sp, #24]
   1947c:	orr	r7, r7, #1
   19480:	ldr	ip, [sp, #64]	; 0x40
   19484:	mov	r0, r4
   19488:	ldr	fp, [sp, #68]	; 0x44
   1948c:	str	lr, [sp]
   19490:	str	r7, [sp, #4]
   19494:	str	ip, [sp, #12]
   19498:	str	fp, [sp, #16]
   1949c:	bl	16f58 <__assert_fail@plt+0x5dac>
   194a0:	cmp	sl, r0
   194a4:	bhi	19508 <__assert_fail@plt+0x835c>
   194a8:	add	sl, r0, #1
   194ac:	movw	r3, #57784	; 0xe1b8
   194b0:	movt	r3, #2
   194b4:	cmp	r4, r3
   194b8:	str	sl, [r5]
   194bc:	beq	194c8 <__assert_fail@plt+0x831c>
   194c0:	mov	r0, r4
   194c4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   194c8:	mov	r0, sl
   194cc:	bl	1b078 <__assert_fail@plt+0x9ecc>
   194d0:	ldr	r3, [sp, #24]
   194d4:	mov	r2, r6
   194d8:	mov	r1, sl
   194dc:	mov	r4, r0
   194e0:	ldr	lr, [sp, #64]	; 0x40
   194e4:	ldr	ip, [sp, #68]	; 0x44
   194e8:	str	r0, [r5, #4]
   194ec:	add	r5, sp, #32
   194f0:	stm	sp, {r3, r7}
   194f4:	mvn	r3, #0
   194f8:	str	r5, [sp, #8]
   194fc:	str	lr, [sp, #12]
   19500:	str	ip, [sp, #16]
   19504:	bl	16f58 <__assert_fail@plt+0x5dac>
   19508:	mov	r0, r4
   1950c:	str	r9, [r8]
   19510:	add	sp, sp, #124	; 0x7c
   19514:	ldrd	r4, [sp]
   19518:	ldrd	r6, [sp, #8]
   1951c:	ldrd	r8, [sp, #16]
   19520:	ldrd	sl, [sp, #24]
   19524:	add	sp, sp, #32
   19528:	pop	{pc}		; (ldr pc, [sp], #4)
   1952c:	mov	r0, #8
   19530:	mvn	r3, #-2147483648	; 0x80000000
   19534:	add	r1, sp, #72	; 0x48
   19538:	str	r0, [sp]
   1953c:	mov	r0, #0
   19540:	bl	1b31c <__assert_fail@plt+0xa170>
   19544:	ldrd	r2, [r4, #8]
   19548:	mov	r5, r0
   1954c:	str	r0, [r4]
   19550:	strd	r2, [r0]
   19554:	b	19434 <__assert_fail@plt+0x8288>
   19558:	bl	1117c <abort@plt>
   1955c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19560:	cmp	r0, #10
   19564:	strd	r6, [sp, #8]
   19568:	mov	r6, #0
   1956c:	mov	r7, #0
   19570:	strd	r8, [sp, #16]
   19574:	strd	sl, [sp, #24]
   19578:	str	lr, [sp, #32]
   1957c:	sub	sp, sp, #124	; 0x7c
   19580:	strd	r6, [sp, #72]	; 0x48
   19584:	strd	r6, [sp, #80]	; 0x50
   19588:	strd	r6, [sp, #88]	; 0x58
   1958c:	strd	r6, [sp, #96]	; 0x60
   19590:	strd	r6, [sp, #104]	; 0x68
   19594:	strd	r6, [sp, #112]	; 0x70
   19598:	beq	19744 <__assert_fail@plt+0x8598>
   1959c:	mov	sl, r2
   195a0:	movw	r5, #57636	; 0xe124
   195a4:	movt	r5, #2
   195a8:	str	r0, [sp, #72]	; 0x48
   195ac:	mov	r9, r1
   195b0:	ldrd	r2, [sp, #72]	; 0x48
   195b4:	strd	r2, [sp, #24]
   195b8:	strd	r6, [sp, #32]
   195bc:	strd	r6, [sp, #40]	; 0x28
   195c0:	strd	r6, [sp, #48]	; 0x30
   195c4:	strd	r6, [sp, #56]	; 0x38
   195c8:	strd	r6, [sp, #64]	; 0x40
   195cc:	bl	11068 <__errno_location@plt>
   195d0:	mov	r7, r0
   195d4:	ldr	r4, [r5]
   195d8:	ldr	r2, [r5, #4]
   195dc:	ldr	fp, [r0]
   195e0:	cmp	r2, #0
   195e4:	bgt	19640 <__assert_fail@plt+0x8494>
   195e8:	add	r3, r5, #8
   195ec:	str	r2, [sp, #72]	; 0x48
   195f0:	rsb	r2, r2, #1
   195f4:	cmp	r4, r3
   195f8:	beq	19718 <__assert_fail@plt+0x856c>
   195fc:	mov	r3, #8
   19600:	mov	r0, r4
   19604:	add	r1, sp, #72	; 0x48
   19608:	str	r3, [sp]
   1960c:	mvn	r3, #-2147483648	; 0x80000000
   19610:	bl	1b31c <__assert_fail@plt+0xa170>
   19614:	mov	r4, r0
   19618:	str	r0, [r5]
   1961c:	ldr	r0, [r5, #4]
   19620:	mov	r1, #0
   19624:	ldr	r2, [sp, #72]	; 0x48
   19628:	sub	r2, r2, r0
   1962c:	add	r0, r4, r0, lsl #3
   19630:	lsl	r2, r2, #3
   19634:	bl	1108c <memset@plt>
   19638:	ldr	r3, [sp, #72]	; 0x48
   1963c:	str	r3, [r5, #4]
   19640:	ldr	ip, [sp, #24]
   19644:	add	r0, sp, #32
   19648:	mov	r3, sl
   1964c:	mov	r2, r9
   19650:	ldr	r6, [sp, #28]
   19654:	ldr	r8, [r4]
   19658:	ldr	r5, [r4, #4]
   1965c:	str	ip, [sp]
   19660:	orr	r6, r6, #1
   19664:	ldr	ip, [sp, #64]	; 0x40
   19668:	mov	r1, r8
   1966c:	str	r6, [sp, #4]
   19670:	ldr	lr, [sp, #68]	; 0x44
   19674:	str	r0, [sp, #8]
   19678:	mov	r0, r5
   1967c:	str	ip, [sp, #12]
   19680:	str	lr, [sp, #16]
   19684:	bl	16f58 <__assert_fail@plt+0x5dac>
   19688:	cmp	r8, r0
   1968c:	bhi	196f4 <__assert_fail@plt+0x8548>
   19690:	add	r8, r0, #1
   19694:	movw	r3, #57784	; 0xe1b8
   19698:	movt	r3, #2
   1969c:	cmp	r5, r3
   196a0:	str	r8, [r4]
   196a4:	beq	196b0 <__assert_fail@plt+0x8504>
   196a8:	mov	r0, r5
   196ac:	bl	1bca8 <__assert_fail@plt+0xaafc>
   196b0:	mov	r0, r8
   196b4:	bl	1b078 <__assert_fail@plt+0x9ecc>
   196b8:	ldr	lr, [sp, #24]
   196bc:	mov	r1, r8
   196c0:	mov	r3, sl
   196c4:	mov	r2, r9
   196c8:	mov	r5, r0
   196cc:	ldr	r8, [sp, #64]	; 0x40
   196d0:	ldr	ip, [sp, #68]	; 0x44
   196d4:	str	r0, [r4, #4]
   196d8:	str	lr, [sp]
   196dc:	add	lr, sp, #32
   196e0:	str	r6, [sp, #4]
   196e4:	str	lr, [sp, #8]
   196e8:	str	r8, [sp, #12]
   196ec:	str	ip, [sp, #16]
   196f0:	bl	16f58 <__assert_fail@plt+0x5dac>
   196f4:	mov	r0, r5
   196f8:	str	fp, [r7]
   196fc:	add	sp, sp, #124	; 0x7c
   19700:	ldrd	r4, [sp]
   19704:	ldrd	r6, [sp, #8]
   19708:	ldrd	r8, [sp, #16]
   1970c:	ldrd	sl, [sp, #24]
   19710:	add	sp, sp, #32
   19714:	pop	{pc}		; (ldr pc, [sp], #4)
   19718:	mov	r0, #8
   1971c:	mvn	r3, #-2147483648	; 0x80000000
   19720:	add	r1, sp, #72	; 0x48
   19724:	str	r0, [sp]
   19728:	mov	r0, #0
   1972c:	bl	1b31c <__assert_fail@plt+0xa170>
   19730:	ldrd	r2, [r5, #8]
   19734:	mov	r4, r0
   19738:	str	r0, [r5]
   1973c:	strd	r2, [r0]
   19740:	b	1961c <__assert_fail@plt+0x8470>
   19744:	bl	1117c <abort@plt>
   19748:	ldr	r3, [pc, #492]	; 1993c <__assert_fail@plt+0x8790>
   1974c:	lsr	ip, r2, #5
   19750:	and	r2, r2, #31
   19754:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19758:	movw	r5, #57636	; 0xe124
   1975c:	movt	r5, #2
   19760:	strd	r6, [sp, #8]
   19764:	strd	r8, [sp, #16]
   19768:	strd	sl, [sp, #24]
   1976c:	mov	sl, r0
   19770:	mov	fp, r1
   19774:	ldrd	r0, [r3]
   19778:	str	lr, [sp, #32]
   1977c:	sub	sp, sp, #92	; 0x5c
   19780:	ldrd	r8, [r3, #8]
   19784:	add	r6, sp, #48	; 0x30
   19788:	strd	r0, [sp, #40]	; 0x28
   1978c:	ldrd	r0, [r3, #16]
   19790:	strd	r8, [sp, #48]	; 0x30
   19794:	ldrd	r8, [r3, #24]
   19798:	strd	r0, [sp, #56]	; 0x38
   1979c:	ldrd	r0, [r3, #32]
   197a0:	strd	r8, [sp, #64]	; 0x40
   197a4:	ldrd	r8, [r3, #40]	; 0x28
   197a8:	strd	r0, [sp, #72]	; 0x48
   197ac:	strd	r8, [sp, #80]	; 0x50
   197b0:	ldr	r3, [r6, ip, lsl #2]
   197b4:	mvn	r1, r3, lsr r2
   197b8:	and	r1, r1, #1
   197bc:	eor	r2, r3, r1, lsl r2
   197c0:	str	r2, [r6, ip, lsl #2]
   197c4:	bl	11068 <__errno_location@plt>
   197c8:	ldr	r3, [r0]
   197cc:	mov	r8, r0
   197d0:	ldr	r2, [r5, #4]
   197d4:	ldr	r4, [r5]
   197d8:	str	r3, [sp, #28]
   197dc:	cmp	r2, #0
   197e0:	bgt	1983c <__assert_fail@plt+0x8690>
   197e4:	add	r3, r5, #8
   197e8:	str	r2, [sp, #36]	; 0x24
   197ec:	rsb	r2, r2, #1
   197f0:	cmp	r4, r3
   197f4:	beq	19910 <__assert_fail@plt+0x8764>
   197f8:	mov	r1, #8
   197fc:	mov	r0, r4
   19800:	mvn	r3, #-2147483648	; 0x80000000
   19804:	str	r1, [sp]
   19808:	add	r1, sp, #36	; 0x24
   1980c:	bl	1b31c <__assert_fail@plt+0xa170>
   19810:	mov	r4, r0
   19814:	str	r0, [r5]
   19818:	ldr	r0, [r5, #4]
   1981c:	mov	r1, #0
   19820:	ldr	r2, [sp, #36]	; 0x24
   19824:	sub	r2, r2, r0
   19828:	add	r0, r4, r0, lsl #3
   1982c:	lsl	r2, r2, #3
   19830:	bl	1108c <memset@plt>
   19834:	ldr	r3, [sp, #36]	; 0x24
   19838:	str	r3, [r5, #4]
   1983c:	ldr	ip, [sp, #40]	; 0x28
   19840:	mov	r3, fp
   19844:	mov	r2, sl
   19848:	ldr	r7, [sp, #44]	; 0x2c
   1984c:	ldr	r9, [r4]
   19850:	ldr	r5, [r4, #4]
   19854:	str	ip, [sp]
   19858:	orr	r7, r7, #1
   1985c:	ldr	ip, [sp, #80]	; 0x50
   19860:	mov	r1, r9
   19864:	str	r7, [sp, #4]
   19868:	ldr	lr, [sp, #84]	; 0x54
   1986c:	mov	r0, r5
   19870:	str	r6, [sp, #8]
   19874:	str	ip, [sp, #12]
   19878:	str	lr, [sp, #16]
   1987c:	bl	16f58 <__assert_fail@plt+0x5dac>
   19880:	cmp	r9, r0
   19884:	bhi	198e8 <__assert_fail@plt+0x873c>
   19888:	add	r9, r0, #1
   1988c:	movw	r3, #57784	; 0xe1b8
   19890:	movt	r3, #2
   19894:	cmp	r5, r3
   19898:	str	r9, [r4]
   1989c:	beq	198a8 <__assert_fail@plt+0x86fc>
   198a0:	mov	r0, r5
   198a4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   198a8:	mov	r0, r9
   198ac:	bl	1b078 <__assert_fail@plt+0x9ecc>
   198b0:	mov	r1, r9
   198b4:	ldr	ip, [sp, #40]	; 0x28
   198b8:	mov	r3, fp
   198bc:	mov	r2, sl
   198c0:	mov	r5, r0
   198c4:	ldr	r9, [sp, #80]	; 0x50
   198c8:	ldr	lr, [sp, #84]	; 0x54
   198cc:	str	r0, [r4, #4]
   198d0:	str	ip, [sp]
   198d4:	str	r7, [sp, #4]
   198d8:	str	r6, [sp, #8]
   198dc:	str	r9, [sp, #12]
   198e0:	str	lr, [sp, #16]
   198e4:	bl	16f58 <__assert_fail@plt+0x5dac>
   198e8:	ldr	r3, [sp, #28]
   198ec:	mov	r0, r5
   198f0:	str	r3, [r8]
   198f4:	add	sp, sp, #92	; 0x5c
   198f8:	ldrd	r4, [sp]
   198fc:	ldrd	r6, [sp, #8]
   19900:	ldrd	r8, [sp, #16]
   19904:	ldrd	sl, [sp, #24]
   19908:	add	sp, sp, #32
   1990c:	pop	{pc}		; (ldr pc, [sp], #4)
   19910:	mov	r0, #8
   19914:	mvn	r3, #-2147483648	; 0x80000000
   19918:	add	r1, sp, #36	; 0x24
   1991c:	str	r0, [sp]
   19920:	mov	r0, #0
   19924:	bl	1b31c <__assert_fail@plt+0xa170>
   19928:	ldrd	r2, [r5, #8]
   1992c:	mov	r4, r0
   19930:	str	r0, [r5]
   19934:	strd	r2, [r0]
   19938:	b	19818 <__assert_fail@plt+0x866c>
   1993c:			; <UNDEFINED> instruction: 0x0002e2b8
   19940:	ldr	ip, [pc, #476]	; 19b24 <__assert_fail@plt+0x8978>
   19944:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19948:	movw	r4, #57636	; 0xe124
   1994c:	movt	r4, #2
   19950:	ldrd	r2, [ip, #8]
   19954:	strd	r6, [sp, #8]
   19958:	lsr	r7, r1, #5
   1995c:	mov	r6, r0
   19960:	strd	r8, [sp, #16]
   19964:	str	lr, [sp, #32]
   19968:	and	lr, r1, #31
   1996c:	ldrd	r0, [ip]
   19970:	strd	sl, [sp, #24]
   19974:	sub	sp, sp, #84	; 0x54
   19978:	add	r5, sp, #40	; 0x28
   1997c:	strd	r0, [sp, #32]
   19980:	strd	r2, [sp, #40]	; 0x28
   19984:	ldrd	r0, [ip, #16]
   19988:	ldrd	r2, [ip, #24]
   1998c:	strd	r0, [sp, #48]	; 0x30
   19990:	ldrd	r0, [ip, #32]
   19994:	strd	r2, [sp, #56]	; 0x38
   19998:	ldrd	r2, [ip, #40]	; 0x28
   1999c:	strd	r0, [sp, #64]	; 0x40
   199a0:	strd	r2, [sp, #72]	; 0x48
   199a4:	ldr	r1, [r5, r7, lsl #2]
   199a8:	mvn	r3, r1, lsr lr
   199ac:	and	r3, r3, #1
   199b0:	eor	r1, r1, r3, lsl lr
   199b4:	str	r1, [r5, r7, lsl #2]
   199b8:	bl	11068 <__errno_location@plt>
   199bc:	mov	r9, r0
   199c0:	ldr	sl, [r0]
   199c4:	ldr	r2, [r4, #4]
   199c8:	ldr	r7, [r4]
   199cc:	cmp	r2, #0
   199d0:	bgt	19a2c <__assert_fail@plt+0x8880>
   199d4:	add	r3, r4, #8
   199d8:	str	r2, [sp, #28]
   199dc:	rsb	r2, r2, #1
   199e0:	cmp	r7, r3
   199e4:	beq	19af8 <__assert_fail@plt+0x894c>
   199e8:	mov	r1, #8
   199ec:	mov	r0, r7
   199f0:	mvn	r3, #-2147483648	; 0x80000000
   199f4:	str	r1, [sp]
   199f8:	add	r1, sp, #28
   199fc:	bl	1b31c <__assert_fail@plt+0xa170>
   19a00:	mov	r7, r0
   19a04:	str	r0, [r4]
   19a08:	ldr	r0, [r4, #4]
   19a0c:	mov	r1, #0
   19a10:	ldr	r2, [sp, #28]
   19a14:	sub	r2, r2, r0
   19a18:	add	r0, r7, r0, lsl #3
   19a1c:	lsl	r2, r2, #3
   19a20:	bl	1108c <memset@plt>
   19a24:	ldr	r3, [sp, #28]
   19a28:	str	r3, [r4, #4]
   19a2c:	ldr	ip, [sp, #32]
   19a30:	mvn	r3, #0
   19a34:	mov	r2, r6
   19a38:	ldr	r8, [sp, #36]	; 0x24
   19a3c:	ldr	fp, [r7]
   19a40:	ldr	r4, [r7, #4]
   19a44:	str	ip, [sp]
   19a48:	orr	r8, r8, #1
   19a4c:	ldr	ip, [sp, #72]	; 0x48
   19a50:	mov	r1, fp
   19a54:	str	r8, [sp, #4]
   19a58:	ldr	lr, [sp, #76]	; 0x4c
   19a5c:	mov	r0, r4
   19a60:	str	r5, [sp, #8]
   19a64:	str	ip, [sp, #12]
   19a68:	str	lr, [sp, #16]
   19a6c:	bl	16f58 <__assert_fail@plt+0x5dac>
   19a70:	cmp	fp, r0
   19a74:	bhi	19ad4 <__assert_fail@plt+0x8928>
   19a78:	add	fp, r0, #1
   19a7c:	movw	r3, #57784	; 0xe1b8
   19a80:	movt	r3, #2
   19a84:	cmp	r4, r3
   19a88:	str	fp, [r7]
   19a8c:	beq	19a98 <__assert_fail@plt+0x88ec>
   19a90:	mov	r0, r4
   19a94:	bl	1bca8 <__assert_fail@plt+0xaafc>
   19a98:	mov	r0, fp
   19a9c:	bl	1b078 <__assert_fail@plt+0x9ecc>
   19aa0:	ldr	r3, [sp, #32]
   19aa4:	mov	r2, r6
   19aa8:	mov	r1, fp
   19aac:	mov	r4, r0
   19ab0:	ldr	lr, [sp, #72]	; 0x48
   19ab4:	ldr	ip, [sp, #76]	; 0x4c
   19ab8:	str	r0, [r7, #4]
   19abc:	stm	sp, {r3, r8}
   19ac0:	mvn	r3, #0
   19ac4:	str	r5, [sp, #8]
   19ac8:	str	lr, [sp, #12]
   19acc:	str	ip, [sp, #16]
   19ad0:	bl	16f58 <__assert_fail@plt+0x5dac>
   19ad4:	mov	r0, r4
   19ad8:	str	sl, [r9]
   19adc:	add	sp, sp, #84	; 0x54
   19ae0:	ldrd	r4, [sp]
   19ae4:	ldrd	r6, [sp, #8]
   19ae8:	ldrd	r8, [sp, #16]
   19aec:	ldrd	sl, [sp, #24]
   19af0:	add	sp, sp, #32
   19af4:	pop	{pc}		; (ldr pc, [sp], #4)
   19af8:	mov	r0, #8
   19afc:	mvn	r3, #-2147483648	; 0x80000000
   19b00:	add	r1, sp, #28
   19b04:	str	r0, [sp]
   19b08:	mov	r0, #0
   19b0c:	bl	1b31c <__assert_fail@plt+0xa170>
   19b10:	ldrd	r2, [r4, #8]
   19b14:	mov	r7, r0
   19b18:	str	r0, [r4]
   19b1c:	strd	r2, [r0]
   19b20:	b	19a08 <__assert_fail@plt+0x885c>
   19b24:			; <UNDEFINED> instruction: 0x0002e2b8
   19b28:	ldr	ip, [pc, #472]	; 19d08 <__assert_fail@plt+0x8b5c>
   19b2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19b30:	mov	r5, r0
   19b34:	movw	r4, #57636	; 0xe124
   19b38:	movt	r4, #2
   19b3c:	ldrd	r2, [ip]
   19b40:	ldrd	r0, [ip, #8]
   19b44:	strd	r6, [sp, #8]
   19b48:	strd	r8, [sp, #16]
   19b4c:	strd	sl, [sp, #24]
   19b50:	str	lr, [sp, #32]
   19b54:	sub	sp, sp, #84	; 0x54
   19b58:	strd	r2, [sp, #32]
   19b5c:	strd	r0, [sp, #40]	; 0x28
   19b60:	ldr	r6, [sp, #44]	; 0x2c
   19b64:	ldrd	r2, [ip, #16]
   19b68:	ldrd	r0, [ip, #24]
   19b6c:	mvn	lr, r6
   19b70:	and	lr, lr, #67108864	; 0x4000000
   19b74:	eor	lr, lr, r6
   19b78:	ldrd	r6, [ip, #40]	; 0x28
   19b7c:	strd	r2, [sp, #48]	; 0x30
   19b80:	ldrd	r2, [ip, #32]
   19b84:	str	lr, [sp, #44]	; 0x2c
   19b88:	strd	r0, [sp, #56]	; 0x38
   19b8c:	strd	r2, [sp, #64]	; 0x40
   19b90:	strd	r6, [sp, #72]	; 0x48
   19b94:	bl	11068 <__errno_location@plt>
   19b98:	mov	r8, r0
   19b9c:	ldr	r9, [r0]
   19ba0:	ldr	r2, [r4, #4]
   19ba4:	ldr	r6, [r4]
   19ba8:	cmp	r2, #0
   19bac:	bgt	19c08 <__assert_fail@plt+0x8a5c>
   19bb0:	add	r3, r4, #8
   19bb4:	str	r2, [sp, #28]
   19bb8:	rsb	r2, r2, #1
   19bbc:	cmp	r6, r3
   19bc0:	beq	19cdc <__assert_fail@plt+0x8b30>
   19bc4:	mov	r1, #8
   19bc8:	mov	r0, r6
   19bcc:	mvn	r3, #-2147483648	; 0x80000000
   19bd0:	str	r1, [sp]
   19bd4:	add	r1, sp, #28
   19bd8:	bl	1b31c <__assert_fail@plt+0xa170>
   19bdc:	mov	r6, r0
   19be0:	str	r0, [r4]
   19be4:	ldr	r0, [r4, #4]
   19be8:	mov	r1, #0
   19bec:	ldr	r2, [sp, #28]
   19bf0:	sub	r2, r2, r0
   19bf4:	add	r0, r6, r0, lsl #3
   19bf8:	lsl	r2, r2, #3
   19bfc:	bl	1108c <memset@plt>
   19c00:	ldr	r3, [sp, #28]
   19c04:	str	r3, [r4, #4]
   19c08:	ldr	sl, [r6]
   19c0c:	add	r0, sp, #40	; 0x28
   19c10:	mvn	r3, #0
   19c14:	mov	r2, r5
   19c18:	ldr	r7, [sp, #36]	; 0x24
   19c1c:	ldr	r4, [r6, #4]
   19c20:	mov	r1, sl
   19c24:	str	r0, [sp, #8]
   19c28:	ldr	lr, [sp, #32]
   19c2c:	orr	r7, r7, #1
   19c30:	ldr	ip, [sp, #72]	; 0x48
   19c34:	mov	r0, r4
   19c38:	ldr	fp, [sp, #76]	; 0x4c
   19c3c:	str	lr, [sp]
   19c40:	str	r7, [sp, #4]
   19c44:	str	ip, [sp, #12]
   19c48:	str	fp, [sp, #16]
   19c4c:	bl	16f58 <__assert_fail@plt+0x5dac>
   19c50:	cmp	sl, r0
   19c54:	bhi	19cb8 <__assert_fail@plt+0x8b0c>
   19c58:	add	sl, r0, #1
   19c5c:	movw	r3, #57784	; 0xe1b8
   19c60:	movt	r3, #2
   19c64:	cmp	r4, r3
   19c68:	str	sl, [r6]
   19c6c:	beq	19c78 <__assert_fail@plt+0x8acc>
   19c70:	mov	r0, r4
   19c74:	bl	1bca8 <__assert_fail@plt+0xaafc>
   19c78:	mov	r0, sl
   19c7c:	bl	1b078 <__assert_fail@plt+0x9ecc>
   19c80:	ldr	r3, [sp, #32]
   19c84:	mov	r2, r5
   19c88:	add	r5, sp, #40	; 0x28
   19c8c:	mov	r1, sl
   19c90:	mov	r4, r0
   19c94:	ldr	lr, [sp, #72]	; 0x48
   19c98:	ldr	ip, [sp, #76]	; 0x4c
   19c9c:	str	r0, [r6, #4]
   19ca0:	stm	sp, {r3, r7}
   19ca4:	mvn	r3, #0
   19ca8:	str	r5, [sp, #8]
   19cac:	str	lr, [sp, #12]
   19cb0:	str	ip, [sp, #16]
   19cb4:	bl	16f58 <__assert_fail@plt+0x5dac>
   19cb8:	mov	r0, r4
   19cbc:	str	r9, [r8]
   19cc0:	add	sp, sp, #84	; 0x54
   19cc4:	ldrd	r4, [sp]
   19cc8:	ldrd	r6, [sp, #8]
   19ccc:	ldrd	r8, [sp, #16]
   19cd0:	ldrd	sl, [sp, #24]
   19cd4:	add	sp, sp, #32
   19cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cdc:	mov	r0, #8
   19ce0:	mvn	r3, #-2147483648	; 0x80000000
   19ce4:	add	r1, sp, #28
   19ce8:	str	r0, [sp]
   19cec:	mov	r0, #0
   19cf0:	bl	1b31c <__assert_fail@plt+0xa170>
   19cf4:	ldrd	r2, [r4, #8]
   19cf8:	mov	r6, r0
   19cfc:	str	r0, [r4]
   19d00:	strd	r2, [r0]
   19d04:	b	19be4 <__assert_fail@plt+0x8a38>
   19d08:			; <UNDEFINED> instruction: 0x0002e2b8
   19d0c:	ldr	ip, [pc, #480]	; 19ef4 <__assert_fail@plt+0x8d48>
   19d10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d14:	mov	r5, r0
   19d18:	movw	r4, #57636	; 0xe124
   19d1c:	movt	r4, #2
   19d20:	ldrd	r2, [ip]
   19d24:	strd	r6, [sp, #8]
   19d28:	mov	r6, r1
   19d2c:	ldrd	r0, [ip, #8]
   19d30:	strd	r8, [sp, #16]
   19d34:	strd	sl, [sp, #24]
   19d38:	str	lr, [sp, #32]
   19d3c:	sub	sp, sp, #84	; 0x54
   19d40:	ldrd	r8, [ip, #40]	; 0x28
   19d44:	strd	r2, [sp, #32]
   19d48:	strd	r0, [sp, #40]	; 0x28
   19d4c:	ldrd	r2, [ip, #16]
   19d50:	ldr	r7, [sp, #44]	; 0x2c
   19d54:	ldrd	r0, [ip, #24]
   19d58:	strd	r2, [sp, #48]	; 0x30
   19d5c:	ldrd	r2, [ip, #32]
   19d60:	mvn	lr, r7
   19d64:	and	lr, lr, #67108864	; 0x4000000
   19d68:	eor	lr, lr, r7
   19d6c:	str	lr, [sp, #44]	; 0x2c
   19d70:	strd	r0, [sp, #56]	; 0x38
   19d74:	strd	r2, [sp, #64]	; 0x40
   19d78:	strd	r8, [sp, #72]	; 0x48
   19d7c:	bl	11068 <__errno_location@plt>
   19d80:	mov	r9, r0
   19d84:	ldr	sl, [r0]
   19d88:	ldr	r2, [r4, #4]
   19d8c:	ldr	r7, [r4]
   19d90:	cmp	r2, #0
   19d94:	bgt	19df0 <__assert_fail@plt+0x8c44>
   19d98:	add	r3, r4, #8
   19d9c:	str	r2, [sp, #28]
   19da0:	rsb	r2, r2, #1
   19da4:	cmp	r7, r3
   19da8:	beq	19ec8 <__assert_fail@plt+0x8d1c>
   19dac:	mov	r1, #8
   19db0:	mov	r0, r7
   19db4:	mvn	r3, #-2147483648	; 0x80000000
   19db8:	str	r1, [sp]
   19dbc:	add	r1, sp, #28
   19dc0:	bl	1b31c <__assert_fail@plt+0xa170>
   19dc4:	mov	r7, r0
   19dc8:	str	r0, [r4]
   19dcc:	ldr	r0, [r4, #4]
   19dd0:	mov	r1, #0
   19dd4:	ldr	r2, [sp, #28]
   19dd8:	sub	r2, r2, r0
   19ddc:	add	r0, r7, r0, lsl #3
   19de0:	lsl	r2, r2, #3
   19de4:	bl	1108c <memset@plt>
   19de8:	ldr	r3, [sp, #28]
   19dec:	str	r3, [r4, #4]
   19df0:	ldr	ip, [sp, #32]
   19df4:	add	r0, sp, #40	; 0x28
   19df8:	mov	r3, r6
   19dfc:	mov	r2, r5
   19e00:	ldr	r8, [sp, #36]	; 0x24
   19e04:	ldr	fp, [r7]
   19e08:	ldr	r4, [r7, #4]
   19e0c:	str	ip, [sp]
   19e10:	orr	r8, r8, #1
   19e14:	ldr	ip, [sp, #72]	; 0x48
   19e18:	mov	r1, fp
   19e1c:	str	r8, [sp, #4]
   19e20:	ldr	lr, [sp, #76]	; 0x4c
   19e24:	str	r0, [sp, #8]
   19e28:	mov	r0, r4
   19e2c:	str	ip, [sp, #12]
   19e30:	str	lr, [sp, #16]
   19e34:	bl	16f58 <__assert_fail@plt+0x5dac>
   19e38:	cmp	fp, r0
   19e3c:	bhi	19ea4 <__assert_fail@plt+0x8cf8>
   19e40:	add	fp, r0, #1
   19e44:	movw	r3, #57784	; 0xe1b8
   19e48:	movt	r3, #2
   19e4c:	cmp	r4, r3
   19e50:	str	fp, [r7]
   19e54:	beq	19e60 <__assert_fail@plt+0x8cb4>
   19e58:	mov	r0, r4
   19e5c:	bl	1bca8 <__assert_fail@plt+0xaafc>
   19e60:	mov	r0, fp
   19e64:	bl	1b078 <__assert_fail@plt+0x9ecc>
   19e68:	ldr	lr, [sp, #32]
   19e6c:	mov	r2, r5
   19e70:	mov	r3, r6
   19e74:	mov	r1, fp
   19e78:	mov	r4, r0
   19e7c:	ldr	r5, [sp, #72]	; 0x48
   19e80:	ldr	ip, [sp, #76]	; 0x4c
   19e84:	str	r0, [r7, #4]
   19e88:	str	lr, [sp]
   19e8c:	add	lr, sp, #40	; 0x28
   19e90:	str	r8, [sp, #4]
   19e94:	str	lr, [sp, #8]
   19e98:	str	r5, [sp, #12]
   19e9c:	str	ip, [sp, #16]
   19ea0:	bl	16f58 <__assert_fail@plt+0x5dac>
   19ea4:	mov	r0, r4
   19ea8:	str	sl, [r9]
   19eac:	add	sp, sp, #84	; 0x54
   19eb0:	ldrd	r4, [sp]
   19eb4:	ldrd	r6, [sp, #8]
   19eb8:	ldrd	r8, [sp, #16]
   19ebc:	ldrd	sl, [sp, #24]
   19ec0:	add	sp, sp, #32
   19ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ec8:	mov	r0, #8
   19ecc:	mvn	r3, #-2147483648	; 0x80000000
   19ed0:	add	r1, sp, #28
   19ed4:	str	r0, [sp]
   19ed8:	mov	r0, #0
   19edc:	bl	1b31c <__assert_fail@plt+0xa170>
   19ee0:	ldrd	r2, [r4, #8]
   19ee4:	mov	r7, r0
   19ee8:	str	r0, [r4]
   19eec:	strd	r2, [r0]
   19ef0:	b	19dcc <__assert_fail@plt+0x8c20>
   19ef4:			; <UNDEFINED> instruction: 0x0002e2b8
   19ef8:	strd	r4, [sp, #-12]!
   19efc:	mov	r4, #0
   19f00:	mov	r5, #0
   19f04:	str	lr, [sp, #8]
   19f08:	sub	sp, sp, #100	; 0x64
   19f0c:	cmp	r1, #10
   19f10:	strd	r4, [sp]
   19f14:	strd	r4, [sp, #8]
   19f18:	strd	r4, [sp, #16]
   19f1c:	strd	r4, [sp, #24]
   19f20:	strd	r4, [sp, #32]
   19f24:	strd	r4, [sp, #40]	; 0x28
   19f28:	beq	19f58 <__assert_fail@plt+0x8dac>
   19f2c:	mov	ip, #67108864	; 0x4000000
   19f30:	mov	r3, sp
   19f34:	str	r1, [sp]
   19f38:	mov	r1, r2
   19f3c:	mvn	r2, #0
   19f40:	str	ip, [sp, #12]
   19f44:	bl	18944 <__assert_fail@plt+0x7798>
   19f48:	add	sp, sp, #100	; 0x64
   19f4c:	ldrd	r4, [sp]
   19f50:	add	sp, sp, #8
   19f54:	pop	{pc}		; (ldr pc, [sp], #4)
   19f58:	bl	1117c <abort@plt>
   19f5c:	ldr	ip, [pc, #156]	; 1a000 <__assert_fail@plt+0x8e54>
   19f60:	cmp	r2, #0
   19f64:	cmpne	r1, #0
   19f68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19f6c:	strd	r6, [sp, #8]
   19f70:	mov	r6, r2
   19f74:	str	r8, [sp, #16]
   19f78:	mov	r8, r3
   19f7c:	strd	sl, [sp, #20]
   19f80:	ldrd	r4, [ip]
   19f84:	str	lr, [sp, #28]
   19f88:	sub	sp, sp, #48	; 0x30
   19f8c:	mov	lr, #10
   19f90:	ldrd	r2, [ip, #8]
   19f94:	ldrd	sl, [ip, #16]
   19f98:	strd	r4, [sp]
   19f9c:	ldrd	r4, [ip, #32]
   19fa0:	str	lr, [sp]
   19fa4:	strd	r2, [sp, #8]
   19fa8:	strd	sl, [sp, #16]
   19fac:	ldrd	r2, [ip, #24]
   19fb0:	ldrd	sl, [ip, #40]	; 0x28
   19fb4:	strd	r2, [sp, #24]
   19fb8:	strd	r4, [sp, #32]
   19fbc:	strd	sl, [sp, #40]	; 0x28
   19fc0:	beq	19ffc <__assert_fail@plt+0x8e50>
   19fc4:	mov	r7, r1
   19fc8:	mov	r3, sp
   19fcc:	mov	r1, r8
   19fd0:	mvn	r2, #0
   19fd4:	str	r7, [sp, #40]	; 0x28
   19fd8:	str	r6, [sp, #44]	; 0x2c
   19fdc:	bl	18944 <__assert_fail@plt+0x7798>
   19fe0:	add	sp, sp, #48	; 0x30
   19fe4:	ldrd	r4, [sp]
   19fe8:	ldrd	r6, [sp, #8]
   19fec:	ldr	r8, [sp, #16]
   19ff0:	ldrd	sl, [sp, #20]
   19ff4:	add	sp, sp, #28
   19ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ffc:	bl	1117c <abort@plt>
   1a000:			; <UNDEFINED> instruction: 0x0002e2b8
   1a004:	ldr	ip, [pc, #156]	; 1a0a8 <__assert_fail@plt+0x8efc>
   1a008:	cmp	r2, #0
   1a00c:	cmpne	r1, #0
   1a010:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a014:	strd	r6, [sp, #8]
   1a018:	mov	r6, r2
   1a01c:	str	r8, [sp, #16]
   1a020:	mov	r8, r3
   1a024:	strd	sl, [sp, #20]
   1a028:	ldrd	r4, [ip]
   1a02c:	str	lr, [sp, #28]
   1a030:	sub	sp, sp, #48	; 0x30
   1a034:	mov	lr, #10
   1a038:	ldrd	r2, [ip, #8]
   1a03c:	ldrd	sl, [ip, #16]
   1a040:	strd	r4, [sp]
   1a044:	ldrd	r4, [ip, #32]
   1a048:	str	lr, [sp]
   1a04c:	strd	r2, [sp, #8]
   1a050:	strd	sl, [sp, #16]
   1a054:	ldrd	r2, [ip, #24]
   1a058:	ldrd	sl, [ip, #40]	; 0x28
   1a05c:	strd	r2, [sp, #24]
   1a060:	strd	r4, [sp, #32]
   1a064:	strd	sl, [sp, #40]	; 0x28
   1a068:	beq	1a0a4 <__assert_fail@plt+0x8ef8>
   1a06c:	ldr	r2, [sp, #80]	; 0x50
   1a070:	mov	r7, r1
   1a074:	mov	r3, sp
   1a078:	mov	r1, r8
   1a07c:	str	r7, [sp, #40]	; 0x28
   1a080:	str	r6, [sp, #44]	; 0x2c
   1a084:	bl	18944 <__assert_fail@plt+0x7798>
   1a088:	add	sp, sp, #48	; 0x30
   1a08c:	ldrd	r4, [sp]
   1a090:	ldrd	r6, [sp, #8]
   1a094:	ldr	r8, [sp, #16]
   1a098:	ldrd	sl, [sp, #20]
   1a09c:	add	sp, sp, #28
   1a0a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0a4:	bl	1117c <abort@plt>
   1a0a8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a0ac:	ldr	ip, [pc, #512]	; 1a2b4 <__assert_fail@plt+0x9108>
   1a0b0:	cmp	r0, #0
   1a0b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a0b8:	ldrd	r4, [ip, #16]
   1a0bc:	strd	r6, [sp, #8]
   1a0c0:	clz	r6, r1
   1a0c4:	mov	r7, r1
   1a0c8:	strd	r8, [sp, #16]
   1a0cc:	mov	r8, r0
   1a0d0:	lsr	r6, r6, #5
   1a0d4:	strd	sl, [sp, #24]
   1a0d8:	mov	fp, r2
   1a0dc:	mov	sl, #10
   1a0e0:	ldrd	r2, [ip]
   1a0e4:	moveq	r6, #1
   1a0e8:	str	lr, [sp, #32]
   1a0ec:	sub	sp, sp, #92	; 0x5c
   1a0f0:	cmp	r6, #0
   1a0f4:	ldrd	r0, [ip, #8]
   1a0f8:	strd	r2, [sp, #40]	; 0x28
   1a0fc:	strd	r4, [sp, #56]	; 0x38
   1a100:	ldrd	r2, [ip, #24]
   1a104:	strd	r0, [sp, #48]	; 0x30
   1a108:	ldrd	r0, [ip, #32]
   1a10c:	str	sl, [sp, #40]	; 0x28
   1a110:	ldrd	r4, [ip, #40]	; 0x28
   1a114:	strd	r2, [sp, #64]	; 0x40
   1a118:	strd	r0, [sp, #72]	; 0x48
   1a11c:	strd	r4, [sp, #80]	; 0x50
   1a120:	bne	1a2b0 <__assert_fail@plt+0x9104>
   1a124:	movw	r5, #57636	; 0xe124
   1a128:	movt	r5, #2
   1a12c:	str	r8, [sp, #80]	; 0x50
   1a130:	str	r7, [sp, #84]	; 0x54
   1a134:	bl	11068 <__errno_location@plt>
   1a138:	ldr	r3, [r0]
   1a13c:	mov	r9, r0
   1a140:	ldr	r2, [r5, #4]
   1a144:	ldr	r4, [r5]
   1a148:	str	r3, [sp, #28]
   1a14c:	cmp	r2, #0
   1a150:	movgt	r1, sl
   1a154:	bgt	1a1bc <__assert_fail@plt+0x9010>
   1a158:	add	r3, r5, #8
   1a15c:	str	r2, [sp, #36]	; 0x24
   1a160:	rsb	r2, r2, #1
   1a164:	cmp	r4, r3
   1a168:	beq	1a284 <__assert_fail@plt+0x90d8>
   1a16c:	mov	r1, #8
   1a170:	mov	r0, r4
   1a174:	mvn	r3, #-2147483648	; 0x80000000
   1a178:	str	r1, [sp]
   1a17c:	add	r1, sp, #36	; 0x24
   1a180:	bl	1b31c <__assert_fail@plt+0xa170>
   1a184:	mov	r4, r0
   1a188:	str	r0, [r5]
   1a18c:	ldr	r0, [r5, #4]
   1a190:	mov	r1, #0
   1a194:	ldr	r2, [sp, #36]	; 0x24
   1a198:	sub	r2, r2, r0
   1a19c:	add	r0, r4, r0, lsl #3
   1a1a0:	lsl	r2, r2, #3
   1a1a4:	bl	1108c <memset@plt>
   1a1a8:	ldr	r3, [sp, #36]	; 0x24
   1a1ac:	ldr	r1, [sp, #40]	; 0x28
   1a1b0:	ldr	r8, [sp, #80]	; 0x50
   1a1b4:	str	r3, [r5, #4]
   1a1b8:	ldr	r7, [sp, #84]	; 0x54
   1a1bc:	mvn	r3, #0
   1a1c0:	mov	r2, fp
   1a1c4:	ldr	r6, [sp, #44]	; 0x2c
   1a1c8:	ldr	sl, [r4]
   1a1cc:	ldr	r5, [r4, #4]
   1a1d0:	orr	r6, r6, #1
   1a1d4:	stm	sp, {r1, r6}
   1a1d8:	add	r1, sp, #48	; 0x30
   1a1dc:	str	r8, [sp, #12]
   1a1e0:	mov	r0, r5
   1a1e4:	str	r1, [sp, #8]
   1a1e8:	mov	r1, sl
   1a1ec:	str	r7, [sp, #16]
   1a1f0:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a1f4:	cmp	sl, r0
   1a1f8:	bhi	1a25c <__assert_fail@plt+0x90b0>
   1a1fc:	add	r7, r0, #1
   1a200:	movw	r3, #57784	; 0xe1b8
   1a204:	movt	r3, #2
   1a208:	cmp	r5, r3
   1a20c:	str	r7, [r4]
   1a210:	beq	1a21c <__assert_fail@plt+0x9070>
   1a214:	mov	r0, r5
   1a218:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1a21c:	mov	r0, r7
   1a220:	bl	1b078 <__assert_fail@plt+0x9ecc>
   1a224:	ldr	r3, [sp, #40]	; 0x28
   1a228:	mov	r2, fp
   1a22c:	mov	r1, r7
   1a230:	mov	r5, r0
   1a234:	ldr	lr, [sp, #80]	; 0x50
   1a238:	ldr	ip, [sp, #84]	; 0x54
   1a23c:	str	r0, [r4, #4]
   1a240:	add	r4, sp, #48	; 0x30
   1a244:	stm	sp, {r3, r6}
   1a248:	mvn	r3, #0
   1a24c:	str	r4, [sp, #8]
   1a250:	str	lr, [sp, #12]
   1a254:	str	ip, [sp, #16]
   1a258:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a25c:	ldr	r3, [sp, #28]
   1a260:	mov	r0, r5
   1a264:	str	r3, [r9]
   1a268:	add	sp, sp, #92	; 0x5c
   1a26c:	ldrd	r4, [sp]
   1a270:	ldrd	r6, [sp, #8]
   1a274:	ldrd	r8, [sp, #16]
   1a278:	ldrd	sl, [sp, #24]
   1a27c:	add	sp, sp, #32
   1a280:	pop	{pc}		; (ldr pc, [sp], #4)
   1a284:	mov	r1, #8
   1a288:	mvn	r3, #-2147483648	; 0x80000000
   1a28c:	mov	r0, r6
   1a290:	str	r1, [sp]
   1a294:	add	r1, sp, #36	; 0x24
   1a298:	bl	1b31c <__assert_fail@plt+0xa170>
   1a29c:	ldrd	r2, [r5, #8]
   1a2a0:	mov	r4, r0
   1a2a4:	str	r0, [r5]
   1a2a8:	strd	r2, [r0]
   1a2ac:	b	1a18c <__assert_fail@plt+0x8fe0>
   1a2b0:	bl	1117c <abort@plt>
   1a2b4:			; <UNDEFINED> instruction: 0x0002e2b8
   1a2b8:	ldr	ip, [pc, #536]	; 1a4d8 <__assert_fail@plt+0x932c>
   1a2bc:	cmp	r0, #0
   1a2c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a2c4:	ldrd	r4, [ip, #16]
   1a2c8:	strd	r6, [sp, #8]
   1a2cc:	mov	r6, r1
   1a2d0:	mov	r7, r0
   1a2d4:	strd	r8, [sp, #16]
   1a2d8:	mov	r9, #10
   1a2dc:	strd	sl, [sp, #24]
   1a2e0:	mov	sl, r2
   1a2e4:	mov	fp, r3
   1a2e8:	str	lr, [sp, #32]
   1a2ec:	clz	lr, r1
   1a2f0:	sub	sp, sp, #92	; 0x5c
   1a2f4:	ldrd	r2, [ip]
   1a2f8:	lsr	lr, lr, #5
   1a2fc:	moveq	lr, #1
   1a300:	ldrd	r0, [ip, #8]
   1a304:	cmp	lr, #0
   1a308:	strd	r4, [sp, #56]	; 0x38
   1a30c:	ldrd	r4, [ip, #40]	; 0x28
   1a310:	str	lr, [sp, #28]
   1a314:	strd	r2, [sp, #40]	; 0x28
   1a318:	ldrd	r2, [ip, #24]
   1a31c:	strd	r0, [sp, #48]	; 0x30
   1a320:	ldrd	r0, [ip, #32]
   1a324:	str	r9, [sp, #40]	; 0x28
   1a328:	strd	r2, [sp, #64]	; 0x40
   1a32c:	strd	r4, [sp, #80]	; 0x50
   1a330:	strd	r0, [sp, #72]	; 0x48
   1a334:	bne	1a4d4 <__assert_fail@plt+0x9328>
   1a338:	movw	r5, #57636	; 0xe124
   1a33c:	movt	r5, #2
   1a340:	str	r7, [sp, #80]	; 0x50
   1a344:	str	r6, [sp, #84]	; 0x54
   1a348:	bl	11068 <__errno_location@plt>
   1a34c:	ldr	r3, [r0]
   1a350:	mov	r8, r0
   1a354:	ldr	r2, [r5, #4]
   1a358:	ldr	r4, [r5]
   1a35c:	str	r3, [sp, #24]
   1a360:	cmp	r2, #0
   1a364:	movgt	r1, r9
   1a368:	bgt	1a3d0 <__assert_fail@plt+0x9224>
   1a36c:	add	r3, r5, #8
   1a370:	str	r2, [sp, #36]	; 0x24
   1a374:	rsb	r2, r2, #1
   1a378:	cmp	r4, r3
   1a37c:	beq	1a4a8 <__assert_fail@plt+0x92fc>
   1a380:	mov	r1, #8
   1a384:	mov	r0, r4
   1a388:	mvn	r3, #-2147483648	; 0x80000000
   1a38c:	str	r1, [sp]
   1a390:	add	r1, sp, #36	; 0x24
   1a394:	bl	1b31c <__assert_fail@plt+0xa170>
   1a398:	mov	r4, r0
   1a39c:	str	r0, [r5]
   1a3a0:	ldr	r0, [r5, #4]
   1a3a4:	mov	r1, #0
   1a3a8:	ldr	r2, [sp, #36]	; 0x24
   1a3ac:	sub	r2, r2, r0
   1a3b0:	add	r0, r4, r0, lsl #3
   1a3b4:	lsl	r2, r2, #3
   1a3b8:	bl	1108c <memset@plt>
   1a3bc:	ldr	r3, [sp, #36]	; 0x24
   1a3c0:	ldr	r1, [sp, #40]	; 0x28
   1a3c4:	ldr	r7, [sp, #80]	; 0x50
   1a3c8:	str	r3, [r5, #4]
   1a3cc:	ldr	r6, [sp, #84]	; 0x54
   1a3d0:	mov	r3, fp
   1a3d4:	mov	r2, sl
   1a3d8:	ldr	r0, [sp, #44]	; 0x2c
   1a3dc:	ldr	r9, [r4]
   1a3e0:	ldr	r5, [r4, #4]
   1a3e4:	orr	r0, r0, #1
   1a3e8:	str	r1, [sp]
   1a3ec:	add	r1, sp, #48	; 0x30
   1a3f0:	str	r0, [sp, #4]
   1a3f4:	str	r1, [sp, #8]
   1a3f8:	mov	r1, r9
   1a3fc:	str	r7, [sp, #12]
   1a400:	str	r6, [sp, #16]
   1a404:	str	r0, [sp, #28]
   1a408:	mov	r0, r5
   1a40c:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a410:	cmp	r9, r0
   1a414:	bhi	1a480 <__assert_fail@plt+0x92d4>
   1a418:	add	r6, r0, #1
   1a41c:	movw	r3, #57784	; 0xe1b8
   1a420:	movt	r3, #2
   1a424:	cmp	r5, r3
   1a428:	str	r6, [r4]
   1a42c:	beq	1a438 <__assert_fail@plt+0x928c>
   1a430:	mov	r0, r5
   1a434:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1a438:	mov	r0, r6
   1a43c:	bl	1b078 <__assert_fail@plt+0x9ecc>
   1a440:	ldr	lr, [sp, #40]	; 0x28
   1a444:	mov	r1, r6
   1a448:	mov	r3, fp
   1a44c:	mov	r2, sl
   1a450:	mov	r5, r0
   1a454:	ldr	r6, [sp, #80]	; 0x50
   1a458:	ldr	ip, [sp, #84]	; 0x54
   1a45c:	str	r0, [r4, #4]
   1a460:	str	lr, [sp]
   1a464:	ldr	lr, [sp, #28]
   1a468:	str	lr, [sp, #4]
   1a46c:	add	lr, sp, #48	; 0x30
   1a470:	str	r6, [sp, #12]
   1a474:	str	lr, [sp, #8]
   1a478:	str	ip, [sp, #16]
   1a47c:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a480:	ldr	r3, [sp, #24]
   1a484:	mov	r0, r5
   1a488:	str	r3, [r8]
   1a48c:	add	sp, sp, #92	; 0x5c
   1a490:	ldrd	r4, [sp]
   1a494:	ldrd	r6, [sp, #8]
   1a498:	ldrd	r8, [sp, #16]
   1a49c:	ldrd	sl, [sp, #24]
   1a4a0:	add	sp, sp, #32
   1a4a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4a8:	mov	r1, #8
   1a4ac:	mvn	r3, #-2147483648	; 0x80000000
   1a4b0:	ldr	r0, [sp, #28]
   1a4b4:	str	r1, [sp]
   1a4b8:	add	r1, sp, #36	; 0x24
   1a4bc:	bl	1b31c <__assert_fail@plt+0xa170>
   1a4c0:	ldrd	r2, [r5, #8]
   1a4c4:	mov	r4, r0
   1a4c8:	str	r0, [r5]
   1a4cc:	strd	r2, [r0]
   1a4d0:	b	1a3a0 <__assert_fail@plt+0x91f4>
   1a4d4:	bl	1117c <abort@plt>
   1a4d8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a4dc:	ldr	r3, [pc]	; 1a4e4 <__assert_fail@plt+0x9338>
   1a4e0:	b	18944 <__assert_fail@plt+0x7798>
   1a4e4:	andeq	lr, r2, r4, lsr r1
   1a4e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4ec:	movw	r4, #57636	; 0xe124
   1a4f0:	movt	r4, #2
   1a4f4:	strd	r6, [sp, #8]
   1a4f8:	strd	r8, [sp, #16]
   1a4fc:	strd	sl, [sp, #24]
   1a500:	mov	sl, r0
   1a504:	mov	fp, r1
   1a508:	str	lr, [sp, #32]
   1a50c:	sub	sp, sp, #44	; 0x2c
   1a510:	bl	11068 <__errno_location@plt>
   1a514:	ldr	r3, [r0]
   1a518:	mov	r8, r0
   1a51c:	ldr	r2, [r4, #4]
   1a520:	ldr	r5, [r4]
   1a524:	str	r3, [sp, #28]
   1a528:	cmp	r2, #0
   1a52c:	bgt	1a588 <__assert_fail@plt+0x93dc>
   1a530:	add	r3, r4, #8
   1a534:	str	r2, [sp, #36]	; 0x24
   1a538:	rsb	r2, r2, #1
   1a53c:	cmp	r5, r3
   1a540:	beq	1a664 <__assert_fail@plt+0x94b8>
   1a544:	mov	r1, #8
   1a548:	mov	r0, r5
   1a54c:	mvn	r3, #-2147483648	; 0x80000000
   1a550:	str	r1, [sp]
   1a554:	add	r1, sp, #36	; 0x24
   1a558:	bl	1b31c <__assert_fail@plt+0xa170>
   1a55c:	mov	r5, r0
   1a560:	str	r0, [r4]
   1a564:	ldr	r0, [r4, #4]
   1a568:	mov	r1, #0
   1a56c:	ldr	r2, [sp, #36]	; 0x24
   1a570:	sub	r2, r2, r0
   1a574:	add	r0, r5, r0, lsl #3
   1a578:	lsl	r2, r2, #3
   1a57c:	bl	1108c <memset@plt>
   1a580:	ldr	r3, [sp, #36]	; 0x24
   1a584:	str	r3, [r4, #4]
   1a588:	ldr	ip, [r4, #16]
   1a58c:	mov	r3, fp
   1a590:	mov	r2, sl
   1a594:	ldr	r7, [r4, #20]
   1a598:	ldr	r0, [pc, #240]	; 1a690 <__assert_fail@plt+0x94e4>
   1a59c:	ldr	r9, [r5]
   1a5a0:	orr	r7, r7, #1
   1a5a4:	ldr	r6, [r5, #4]
   1a5a8:	str	ip, [sp]
   1a5ac:	ldr	ip, [r4, #56]	; 0x38
   1a5b0:	mov	r1, r9
   1a5b4:	str	r7, [sp, #4]
   1a5b8:	ldr	lr, [r4, #60]	; 0x3c
   1a5bc:	str	r0, [sp, #8]
   1a5c0:	mov	r0, r6
   1a5c4:	str	ip, [sp, #12]
   1a5c8:	str	lr, [sp, #16]
   1a5cc:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a5d0:	cmp	r9, r0
   1a5d4:	bhi	1a63c <__assert_fail@plt+0x9490>
   1a5d8:	add	r9, r0, #1
   1a5dc:	movw	r3, #57784	; 0xe1b8
   1a5e0:	movt	r3, #2
   1a5e4:	cmp	r6, r3
   1a5e8:	str	r9, [r5]
   1a5ec:	beq	1a5f8 <__assert_fail@plt+0x944c>
   1a5f0:	mov	r0, r6
   1a5f4:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1a5f8:	mov	r0, r9
   1a5fc:	bl	1b078 <__assert_fail@plt+0x9ecc>
   1a600:	ldr	ip, [r4, #16]
   1a604:	mov	r1, r9
   1a608:	mov	r3, fp
   1a60c:	mov	r2, sl
   1a610:	mov	r6, r0
   1a614:	ldr	r9, [r4, #56]	; 0x38
   1a618:	ldr	lr, [r4, #60]	; 0x3c
   1a61c:	str	r0, [r5, #4]
   1a620:	str	ip, [sp]
   1a624:	ldr	ip, [pc, #100]	; 1a690 <__assert_fail@plt+0x94e4>
   1a628:	str	r7, [sp, #4]
   1a62c:	str	ip, [sp, #8]
   1a630:	str	r9, [sp, #12]
   1a634:	str	lr, [sp, #16]
   1a638:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a63c:	ldr	r3, [sp, #28]
   1a640:	mov	r0, r6
   1a644:	str	r3, [r8]
   1a648:	add	sp, sp, #44	; 0x2c
   1a64c:	ldrd	r4, [sp]
   1a650:	ldrd	r6, [sp, #8]
   1a654:	ldrd	r8, [sp, #16]
   1a658:	ldrd	sl, [sp, #24]
   1a65c:	add	sp, sp, #32
   1a660:	pop	{pc}		; (ldr pc, [sp], #4)
   1a664:	mov	r0, #8
   1a668:	mvn	r3, #-2147483648	; 0x80000000
   1a66c:	add	r1, sp, #36	; 0x24
   1a670:	str	r0, [sp]
   1a674:	mov	r0, #0
   1a678:	bl	1b31c <__assert_fail@plt+0xa170>
   1a67c:	ldrd	r2, [r4, #8]
   1a680:	mov	r5, r0
   1a684:	str	r0, [r4]
   1a688:	strd	r2, [r0]
   1a68c:	b	1a564 <__assert_fail@plt+0x93b8>
   1a690:	andeq	lr, r2, ip, lsr r1
   1a694:	ldr	r3, [pc, #4]	; 1a6a0 <__assert_fail@plt+0x94f4>
   1a698:	mvn	r2, #0
   1a69c:	b	18944 <__assert_fail@plt+0x7798>
   1a6a0:	andeq	lr, r2, r4, lsr r1
   1a6a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a6a8:	movw	r4, #57636	; 0xe124
   1a6ac:	movt	r4, #2
   1a6b0:	strd	r6, [sp, #8]
   1a6b4:	strd	r8, [sp, #16]
   1a6b8:	strd	sl, [sp, #24]
   1a6bc:	mov	sl, r0
   1a6c0:	str	lr, [sp, #32]
   1a6c4:	sub	sp, sp, #44	; 0x2c
   1a6c8:	bl	11068 <__errno_location@plt>
   1a6cc:	ldr	r3, [r0]
   1a6d0:	mov	r8, r0
   1a6d4:	ldr	r2, [r4, #4]
   1a6d8:	ldr	r5, [r4]
   1a6dc:	str	r3, [sp, #28]
   1a6e0:	cmp	r2, #0
   1a6e4:	bgt	1a740 <__assert_fail@plt+0x9594>
   1a6e8:	add	r3, r4, #8
   1a6ec:	str	r2, [sp, #36]	; 0x24
   1a6f0:	rsb	r2, r2, #1
   1a6f4:	cmp	r5, r3
   1a6f8:	beq	1a808 <__assert_fail@plt+0x965c>
   1a6fc:	mov	r1, #8
   1a700:	mov	r0, r5
   1a704:	mvn	r3, #-2147483648	; 0x80000000
   1a708:	str	r1, [sp]
   1a70c:	add	r1, sp, #36	; 0x24
   1a710:	bl	1b31c <__assert_fail@plt+0xa170>
   1a714:	mov	r5, r0
   1a718:	str	r0, [r4]
   1a71c:	ldr	r0, [r4, #4]
   1a720:	mov	r1, #0
   1a724:	ldr	r2, [sp, #36]	; 0x24
   1a728:	sub	r2, r2, r0
   1a72c:	add	r0, r5, r0, lsl #3
   1a730:	lsl	r2, r2, #3
   1a734:	bl	1108c <memset@plt>
   1a738:	ldr	r3, [sp, #36]	; 0x24
   1a73c:	str	r3, [r4, #4]
   1a740:	ldr	ip, [r4, #16]
   1a744:	mvn	r3, #0
   1a748:	mov	r2, sl
   1a74c:	ldr	r7, [r4, #20]
   1a750:	ldr	fp, [pc, #220]	; 1a834 <__assert_fail@plt+0x9688>
   1a754:	ldr	r9, [r5]
   1a758:	orr	r7, r7, #1
   1a75c:	ldr	r6, [r5, #4]
   1a760:	str	ip, [sp]
   1a764:	ldr	ip, [r4, #56]	; 0x38
   1a768:	mov	r1, r9
   1a76c:	stmib	sp, {r7, fp}
   1a770:	ldr	lr, [r4, #60]	; 0x3c
   1a774:	mov	r0, r6
   1a778:	str	ip, [sp, #12]
   1a77c:	str	lr, [sp, #16]
   1a780:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a784:	cmp	r9, r0
   1a788:	bhi	1a7e0 <__assert_fail@plt+0x9634>
   1a78c:	add	r9, r0, #1
   1a790:	movw	r3, #57784	; 0xe1b8
   1a794:	movt	r3, #2
   1a798:	cmp	r6, r3
   1a79c:	str	r9, [r5]
   1a7a0:	beq	1a7ac <__assert_fail@plt+0x9600>
   1a7a4:	mov	r0, r6
   1a7a8:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1a7ac:	mov	r0, r9
   1a7b0:	bl	1b078 <__assert_fail@plt+0x9ecc>
   1a7b4:	ldr	r3, [r4, #16]
   1a7b8:	mov	r2, sl
   1a7bc:	mov	r1, r9
   1a7c0:	mov	r6, r0
   1a7c4:	ldr	lr, [r4, #56]	; 0x38
   1a7c8:	ldr	ip, [r4, #60]	; 0x3c
   1a7cc:	str	r0, [r5, #4]
   1a7d0:	stm	sp, {r3, r7, fp, lr}
   1a7d4:	mvn	r3, #0
   1a7d8:	str	ip, [sp, #16]
   1a7dc:	bl	16f58 <__assert_fail@plt+0x5dac>
   1a7e0:	ldr	r3, [sp, #28]
   1a7e4:	mov	r0, r6
   1a7e8:	str	r3, [r8]
   1a7ec:	add	sp, sp, #44	; 0x2c
   1a7f0:	ldrd	r4, [sp]
   1a7f4:	ldrd	r6, [sp, #8]
   1a7f8:	ldrd	r8, [sp, #16]
   1a7fc:	ldrd	sl, [sp, #24]
   1a800:	add	sp, sp, #32
   1a804:	pop	{pc}		; (ldr pc, [sp], #4)
   1a808:	mov	r0, #8
   1a80c:	mvn	r3, #-2147483648	; 0x80000000
   1a810:	add	r1, sp, #36	; 0x24
   1a814:	str	r0, [sp]
   1a818:	mov	r0, #0
   1a81c:	bl	1b31c <__assert_fail@plt+0xa170>
   1a820:	ldrd	r2, [r4, #8]
   1a824:	mov	r5, r0
   1a828:	str	r0, [r4]
   1a82c:	strd	r2, [r0]
   1a830:	b	1a71c <__assert_fail@plt+0x9570>
   1a834:	andeq	lr, r2, ip, lsr r1
   1a838:	str	r4, [sp, #-16]!
   1a83c:	movw	r1, #51320	; 0xc878
   1a840:	movt	r1, #1
   1a844:	strd	r6, [sp, #4]
   1a848:	mov	r4, r0
   1a84c:	mov	r0, #3
   1a850:	str	lr, [sp, #12]
   1a854:	sub	sp, sp, #104	; 0x68
   1a858:	mov	r2, sp
   1a85c:	bl	11194 <__lxstat64@plt>
   1a860:	cmp	r0, #0
   1a864:	movne	r0, #0
   1a868:	bne	1a880 <__assert_fail@plt+0x96d4>
   1a86c:	ldrd	r6, [sp]
   1a870:	mov	r0, r4
   1a874:	ldrd	r2, [sp, #96]	; 0x60
   1a878:	strd	r2, [r4]
   1a87c:	strd	r6, [r4, #8]
   1a880:	add	sp, sp, #104	; 0x68
   1a884:	ldr	r4, [sp]
   1a888:	ldrd	r6, [sp, #4]
   1a88c:	add	sp, sp, #12
   1a890:	pop	{pc}		; (ldr pc, [sp], #4)
   1a894:	cmp	r0, #2
   1a898:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a89c:	mov	r4, r0
   1a8a0:	strd	r6, [sp, #8]
   1a8a4:	str	r8, [sp, #16]
   1a8a8:	str	lr, [sp, #20]
   1a8ac:	bls	1a8c8 <__assert_fail@plt+0x971c>
   1a8b0:	mov	r0, r4
   1a8b4:	ldrd	r4, [sp]
   1a8b8:	ldrd	r6, [sp, #8]
   1a8bc:	ldr	r8, [sp, #16]
   1a8c0:	add	sp, sp, #20
   1a8c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8c8:	bl	1becc <__assert_fail@plt+0xad20>
   1a8cc:	mov	r7, r0
   1a8d0:	bl	11068 <__errno_location@plt>
   1a8d4:	mov	r5, r0
   1a8d8:	mov	r0, r4
   1a8dc:	ldr	r6, [r5]
   1a8e0:	mov	r4, r7
   1a8e4:	bl	11188 <close@plt>
   1a8e8:	str	r6, [r5]
   1a8ec:	b	1a8b0 <__assert_fail@plt+0x9704>
   1a8f0:	cmp	r1, #0
   1a8f4:	strd	r4, [sp, #-16]!
   1a8f8:	mov	ip, r3
   1a8fc:	str	r6, [sp, #8]
   1a900:	mov	r4, r0
   1a904:	str	lr, [sp, #12]
   1a908:	sub	sp, sp, #32
   1a90c:	ldr	r5, [sp, #48]	; 0x30
   1a910:	ldr	r6, [sp, #52]	; 0x34
   1a914:	beq	1aa58 <__assert_fail@plt+0x98ac>
   1a918:	mov	r3, r1
   1a91c:	mov	r1, #1
   1a920:	stm	sp, {r2, ip}
   1a924:	movw	r2, #52860	; 0xce7c
   1a928:	movt	r2, #1
   1a92c:	bl	110b0 <__fprintf_chk@plt>
   1a930:	mov	r2, #5
   1a934:	movw	r1, #52880	; 0xce90
   1a938:	movt	r1, #1
   1a93c:	mov	r0, #0
   1a940:	bl	10f54 <dcgettext@plt>
   1a944:	movw	ip, #2022	; 0x7e6
   1a948:	mov	r3, r0
   1a94c:	mov	r1, #1
   1a950:	movw	r2, #53608	; 0xd168
   1a954:	movt	r2, #1
   1a958:	mov	r0, r4
   1a95c:	str	ip, [sp]
   1a960:	bl	110b0 <__fprintf_chk@plt>
   1a964:	mov	r1, r4
   1a968:	mov	r0, #10
   1a96c:	bl	10f48 <fputc_unlocked@plt>
   1a970:	mov	r2, #5
   1a974:	movw	r1, #52884	; 0xce94
   1a978:	movt	r1, #1
   1a97c:	mov	r0, #0
   1a980:	bl	10f54 <dcgettext@plt>
   1a984:	mov	r2, r0
   1a988:	mov	r1, #1
   1a98c:	movw	r3, #53056	; 0xcf40
   1a990:	movt	r3, #1
   1a994:	mov	r0, r4
   1a998:	bl	110b0 <__fprintf_chk@plt>
   1a99c:	mov	r1, r4
   1a9a0:	mov	r0, #10
   1a9a4:	bl	10f48 <fputc_unlocked@plt>
   1a9a8:	cmp	r6, #9
   1a9ac:	ldrls	pc, [pc, r6, lsl #2]
   1a9b0:	b	1acc4 <__assert_fail@plt+0x9b18>
   1a9b4:	andeq	sl, r1, r4, asr #20
   1a9b8:	andeq	sl, r1, r4, ror sl
   1a9bc:			; <UNDEFINED> instruction: 0x0001aab0
   1a9c0:	strdeq	sl, [r1], -r0
   1a9c4:	andeq	sl, r1, r8, lsr fp
   1a9c8:	andeq	sl, r1, r0, ror fp
   1a9cc:			; <UNDEFINED> instruction: 0x0001abb8
   1a9d0:	andeq	sl, r1, ip, lsl #24
   1a9d4:	andeq	sl, r1, r4, ror #24
   1a9d8:	ldrdeq	sl, [r1], -ip
   1a9dc:	movw	r1, #53360	; 0xd070
   1a9e0:	movt	r1, #1
   1a9e4:	mov	r2, #5
   1a9e8:	mov	r0, #0
   1a9ec:	bl	10f54 <dcgettext@plt>
   1a9f0:	ldr	lr, [r5, #4]
   1a9f4:	mov	r2, r0
   1a9f8:	mov	r1, #1
   1a9fc:	mov	r0, r4
   1aa00:	ldr	r3, [r5, #8]
   1aa04:	ldr	ip, [r5, #32]
   1aa08:	str	lr, [sp]
   1aa0c:	ldr	lr, [r5, #12]
   1aa10:	str	ip, [sp, #28]
   1aa14:	ldr	ip, [r5, #28]
   1aa18:	str	r3, [sp, #4]
   1aa1c:	ldr	r3, [r5, #16]
   1aa20:	str	lr, [sp, #8]
   1aa24:	ldr	lr, [r5, #20]
   1aa28:	str	ip, [sp, #24]
   1aa2c:	ldr	ip, [r5, #24]
   1aa30:	str	r3, [sp, #12]
   1aa34:	ldr	r3, [r5]
   1aa38:	str	lr, [sp, #16]
   1aa3c:	str	ip, [sp, #20]
   1aa40:	bl	110b0 <__fprintf_chk@plt>
   1aa44:	add	sp, sp, #32
   1aa48:	ldrd	r4, [sp]
   1aa4c:	ldr	r6, [sp, #8]
   1aa50:	add	sp, sp, #12
   1aa54:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa58:	mov	r3, r2
   1aa5c:	mov	r1, #1
   1aa60:	str	ip, [sp]
   1aa64:	movw	r2, #52872	; 0xce88
   1aa68:	movt	r2, #1
   1aa6c:	bl	110b0 <__fprintf_chk@plt>
   1aa70:	b	1a930 <__assert_fail@plt+0x9784>
   1aa74:	mov	r2, #5
   1aa78:	movw	r1, #53092	; 0xcf64
   1aa7c:	movt	r1, #1
   1aa80:	mov	r0, #0
   1aa84:	bl	10f54 <dcgettext@plt>
   1aa88:	ldr	r3, [r5]
   1aa8c:	mov	r2, r0
   1aa90:	mov	r1, #1
   1aa94:	mov	r0, r4
   1aa98:	add	sp, sp, #32
   1aa9c:	ldrd	r4, [sp]
   1aaa0:	ldr	r6, [sp, #8]
   1aaa4:	ldr	lr, [sp, #12]
   1aaa8:	add	sp, sp, #16
   1aaac:	b	110b0 <__fprintf_chk@plt>
   1aab0:	mov	r2, #5
   1aab4:	movw	r1, #53108	; 0xcf74
   1aab8:	movt	r1, #1
   1aabc:	mov	r0, #0
   1aac0:	bl	10f54 <dcgettext@plt>
   1aac4:	ldm	r5, {r3, ip}
   1aac8:	mov	r2, r0
   1aacc:	mov	r1, #1
   1aad0:	mov	r0, r4
   1aad4:	str	ip, [sp, #48]	; 0x30
   1aad8:	add	sp, sp, #32
   1aadc:	ldrd	r4, [sp]
   1aae0:	ldr	r6, [sp, #8]
   1aae4:	ldr	lr, [sp, #12]
   1aae8:	add	sp, sp, #16
   1aaec:	b	110b0 <__fprintf_chk@plt>
   1aaf0:	mov	r2, #5
   1aaf4:	movw	r1, #53132	; 0xcf8c
   1aaf8:	movt	r1, #1
   1aafc:	mov	r0, #0
   1ab00:	bl	10f54 <dcgettext@plt>
   1ab04:	ldm	r5, {r3, lr}
   1ab08:	mov	r2, r0
   1ab0c:	mov	r1, #1
   1ab10:	mov	r0, r4
   1ab14:	ldr	ip, [r5, #8]
   1ab18:	str	lr, [sp, #48]	; 0x30
   1ab1c:	str	ip, [sp, #52]	; 0x34
   1ab20:	add	sp, sp, #32
   1ab24:	ldrd	r4, [sp]
   1ab28:	ldr	r6, [sp, #8]
   1ab2c:	ldr	lr, [sp, #12]
   1ab30:	add	sp, sp, #16
   1ab34:	b	110b0 <__fprintf_chk@plt>
   1ab38:	mov	r2, #5
   1ab3c:	movw	r1, #53160	; 0xcfa8
   1ab40:	movt	r1, #1
   1ab44:	mov	r0, #0
   1ab48:	bl	10f54 <dcgettext@plt>
   1ab4c:	ldmib	r5, {r3, ip, lr}
   1ab50:	mov	r2, r0
   1ab54:	mov	r1, #1
   1ab58:	mov	r0, r4
   1ab5c:	str	r3, [sp]
   1ab60:	ldr	r3, [r5]
   1ab64:	stmib	sp, {ip, lr}
   1ab68:	bl	110b0 <__fprintf_chk@plt>
   1ab6c:	b	1aa44 <__assert_fail@plt+0x9898>
   1ab70:	mov	r2, #5
   1ab74:	movw	r1, #53192	; 0xcfc8
   1ab78:	movt	r1, #1
   1ab7c:	mov	r0, #0
   1ab80:	bl	10f54 <dcgettext@plt>
   1ab84:	ldmib	r5, {ip, lr}
   1ab88:	mov	r2, r0
   1ab8c:	mov	r1, #1
   1ab90:	mov	r0, r4
   1ab94:	ldr	r3, [r5, #16]
   1ab98:	str	ip, [sp]
   1ab9c:	ldr	ip, [r5, #12]
   1aba0:	str	r3, [sp, #12]
   1aba4:	ldr	r3, [r5]
   1aba8:	str	lr, [sp, #4]
   1abac:	str	ip, [sp, #8]
   1abb0:	bl	110b0 <__fprintf_chk@plt>
   1abb4:	b	1aa44 <__assert_fail@plt+0x9898>
   1abb8:	mov	r2, #5
   1abbc:	movw	r1, #53228	; 0xcfec
   1abc0:	movt	r1, #1
   1abc4:	mov	r0, #0
   1abc8:	bl	10f54 <dcgettext@plt>
   1abcc:	ldr	lr, [r5, #4]
   1abd0:	mov	r2, r0
   1abd4:	mov	r1, #1
   1abd8:	mov	r0, r4
   1abdc:	ldr	r3, [r5, #8]
   1abe0:	ldr	ip, [r5, #20]
   1abe4:	str	lr, [sp]
   1abe8:	ldr	lr, [r5, #12]
   1abec:	str	ip, [sp, #16]
   1abf0:	ldr	ip, [r5, #16]
   1abf4:	str	r3, [sp, #4]
   1abf8:	ldr	r3, [r5]
   1abfc:	str	lr, [sp, #8]
   1ac00:	str	ip, [sp, #12]
   1ac04:	bl	110b0 <__fprintf_chk@plt>
   1ac08:	b	1aa44 <__assert_fail@plt+0x9898>
   1ac0c:	mov	r2, #5
   1ac10:	movw	r1, #53268	; 0xd014
   1ac14:	movt	r1, #1
   1ac18:	mov	r0, #0
   1ac1c:	bl	10f54 <dcgettext@plt>
   1ac20:	ldmib	r5, {r3, ip}
   1ac24:	mov	r2, r0
   1ac28:	mov	r1, #1
   1ac2c:	mov	r0, r4
   1ac30:	ldr	lr, [r5, #24]
   1ac34:	str	r3, [sp]
   1ac38:	ldr	r3, [r5, #12]
   1ac3c:	str	lr, [sp, #20]
   1ac40:	ldr	lr, [r5, #20]
   1ac44:	str	ip, [sp, #4]
   1ac48:	ldr	ip, [r5, #16]
   1ac4c:	str	r3, [sp, #8]
   1ac50:	ldr	r3, [r5]
   1ac54:	str	ip, [sp, #12]
   1ac58:	str	lr, [sp, #16]
   1ac5c:	bl	110b0 <__fprintf_chk@plt>
   1ac60:	b	1aa44 <__assert_fail@plt+0x9898>
   1ac64:	mov	r2, #5
   1ac68:	movw	r1, #53312	; 0xd040
   1ac6c:	movt	r1, #1
   1ac70:	mov	r0, #0
   1ac74:	bl	10f54 <dcgettext@plt>
   1ac78:	ldmib	r5, {ip, lr}
   1ac7c:	mov	r2, r0
   1ac80:	mov	r1, #1
   1ac84:	mov	r0, r4
   1ac88:	ldr	r3, [r5, #28]
   1ac8c:	str	ip, [sp]
   1ac90:	ldr	ip, [r5, #12]
   1ac94:	str	r3, [sp, #24]
   1ac98:	ldr	r3, [r5, #24]
   1ac9c:	str	lr, [sp, #4]
   1aca0:	ldr	lr, [r5, #16]
   1aca4:	str	ip, [sp, #8]
   1aca8:	ldr	ip, [r5, #20]
   1acac:	str	r3, [sp, #20]
   1acb0:	ldr	r3, [r5]
   1acb4:	str	lr, [sp, #12]
   1acb8:	str	ip, [sp, #16]
   1acbc:	bl	110b0 <__fprintf_chk@plt>
   1acc0:	b	1aa44 <__assert_fail@plt+0x9898>
   1acc4:	movw	r1, #53412	; 0xd0a4
   1acc8:	movt	r1, #1
   1accc:	b	1a9e4 <__assert_fail@plt+0x9838>
   1acd0:	strd	r4, [sp, #-12]!
   1acd4:	str	lr, [sp, #8]
   1acd8:	sub	sp, sp, #12
   1acdc:	ldr	r5, [sp, #24]
   1ace0:	ldr	ip, [r5]
   1ace4:	cmp	ip, #0
   1ace8:	beq	1ad04 <__assert_fail@plt+0x9b58>
   1acec:	mov	lr, r5
   1acf0:	mov	ip, #0
   1acf4:	ldr	r4, [lr, #4]!
   1acf8:	add	ip, ip, #1
   1acfc:	cmp	r4, #0
   1ad00:	bne	1acf4 <__assert_fail@plt+0x9b48>
   1ad04:	stm	sp, {r5, ip}
   1ad08:	bl	1a8f0 <__assert_fail@plt+0x9744>
   1ad0c:	add	sp, sp, #12
   1ad10:	ldrd	r4, [sp]
   1ad14:	add	sp, sp, #8
   1ad18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad1c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad20:	sub	sp, sp, #52	; 0x34
   1ad24:	ldr	ip, [sp, #56]	; 0x38
   1ad28:	ldr	lr, [ip]
   1ad2c:	cmp	lr, #0
   1ad30:	str	lr, [sp, #8]
   1ad34:	beq	1adcc <__assert_fail@plt+0x9c20>
   1ad38:	ldr	lr, [ip, #4]
   1ad3c:	cmp	lr, #0
   1ad40:	str	lr, [sp, #12]
   1ad44:	beq	1ade0 <__assert_fail@plt+0x9c34>
   1ad48:	ldr	lr, [ip, #8]
   1ad4c:	cmp	lr, #0
   1ad50:	str	lr, [sp, #16]
   1ad54:	beq	1ade8 <__assert_fail@plt+0x9c3c>
   1ad58:	ldr	lr, [ip, #12]
   1ad5c:	cmp	lr, #0
   1ad60:	str	lr, [sp, #20]
   1ad64:	beq	1adf0 <__assert_fail@plt+0x9c44>
   1ad68:	ldr	lr, [ip, #16]
   1ad6c:	cmp	lr, #0
   1ad70:	str	lr, [sp, #24]
   1ad74:	beq	1adf8 <__assert_fail@plt+0x9c4c>
   1ad78:	ldr	lr, [ip, #20]
   1ad7c:	cmp	lr, #0
   1ad80:	str	lr, [sp, #28]
   1ad84:	beq	1ae00 <__assert_fail@plt+0x9c54>
   1ad88:	ldr	lr, [ip, #24]
   1ad8c:	cmp	lr, #0
   1ad90:	str	lr, [sp, #32]
   1ad94:	beq	1ae08 <__assert_fail@plt+0x9c5c>
   1ad98:	ldr	lr, [ip, #28]
   1ad9c:	cmp	lr, #0
   1ada0:	str	lr, [sp, #36]	; 0x24
   1ada4:	beq	1ae10 <__assert_fail@plt+0x9c64>
   1ada8:	ldr	lr, [ip, #32]
   1adac:	cmp	lr, #0
   1adb0:	str	lr, [sp, #40]	; 0x28
   1adb4:	beq	1ae18 <__assert_fail@plt+0x9c6c>
   1adb8:	ldr	ip, [ip, #36]	; 0x24
   1adbc:	cmp	ip, #0
   1adc0:	str	ip, [sp, #44]	; 0x2c
   1adc4:	movne	lr, #10
   1adc8:	moveq	lr, #9
   1adcc:	add	ip, sp, #8
   1add0:	stm	sp, {ip, lr}
   1add4:	bl	1a8f0 <__assert_fail@plt+0x9744>
   1add8:	add	sp, sp, #52	; 0x34
   1addc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ade0:	mov	lr, #1
   1ade4:	b	1adcc <__assert_fail@plt+0x9c20>
   1ade8:	mov	lr, #2
   1adec:	b	1adcc <__assert_fail@plt+0x9c20>
   1adf0:	mov	lr, #3
   1adf4:	b	1adcc <__assert_fail@plt+0x9c20>
   1adf8:	mov	lr, #4
   1adfc:	b	1adcc <__assert_fail@plt+0x9c20>
   1ae00:	mov	lr, #5
   1ae04:	b	1adcc <__assert_fail@plt+0x9c20>
   1ae08:	mov	lr, #6
   1ae0c:	b	1adcc <__assert_fail@plt+0x9c20>
   1ae10:	mov	lr, #7
   1ae14:	b	1adcc <__assert_fail@plt+0x9c20>
   1ae18:	mov	lr, #8
   1ae1c:	b	1adcc <__assert_fail@plt+0x9c20>
   1ae20:	push	{r3}		; (str r3, [sp, #-4]!)
   1ae24:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae28:	sub	sp, sp, #56	; 0x38
   1ae2c:	ldr	ip, [sp, #64]	; 0x40
   1ae30:	add	r3, sp, #64	; 0x40
   1ae34:	str	r3, [sp, #12]
   1ae38:	cmp	ip, #0
   1ae3c:	str	ip, [sp, #16]
   1ae40:	beq	1aed8 <__assert_fail@plt+0x9d2c>
   1ae44:	ldr	ip, [sp, #68]	; 0x44
   1ae48:	cmp	ip, #0
   1ae4c:	str	ip, [sp, #20]
   1ae50:	beq	1aefc <__assert_fail@plt+0x9d50>
   1ae54:	ldr	ip, [sp, #72]	; 0x48
   1ae58:	cmp	ip, #0
   1ae5c:	str	ip, [sp, #24]
   1ae60:	beq	1af04 <__assert_fail@plt+0x9d58>
   1ae64:	ldr	ip, [sp, #76]	; 0x4c
   1ae68:	cmp	ip, #0
   1ae6c:	str	ip, [sp, #28]
   1ae70:	beq	1af0c <__assert_fail@plt+0x9d60>
   1ae74:	ldr	ip, [sp, #80]	; 0x50
   1ae78:	cmp	ip, #0
   1ae7c:	str	ip, [sp, #32]
   1ae80:	beq	1af14 <__assert_fail@plt+0x9d68>
   1ae84:	ldr	ip, [sp, #84]	; 0x54
   1ae88:	cmp	ip, #0
   1ae8c:	str	ip, [sp, #36]	; 0x24
   1ae90:	beq	1af1c <__assert_fail@plt+0x9d70>
   1ae94:	ldr	ip, [sp, #88]	; 0x58
   1ae98:	cmp	ip, #0
   1ae9c:	str	ip, [sp, #40]	; 0x28
   1aea0:	beq	1af24 <__assert_fail@plt+0x9d78>
   1aea4:	ldr	ip, [sp, #92]	; 0x5c
   1aea8:	cmp	ip, #0
   1aeac:	str	ip, [sp, #44]	; 0x2c
   1aeb0:	beq	1af2c <__assert_fail@plt+0x9d80>
   1aeb4:	ldr	ip, [sp, #96]	; 0x60
   1aeb8:	cmp	ip, #0
   1aebc:	str	ip, [sp, #48]	; 0x30
   1aec0:	beq	1af34 <__assert_fail@plt+0x9d88>
   1aec4:	ldr	r3, [sp, #100]	; 0x64
   1aec8:	cmp	r3, #0
   1aecc:	str	r3, [sp, #52]	; 0x34
   1aed0:	movne	ip, #10
   1aed4:	moveq	ip, #9
   1aed8:	ldr	r3, [sp, #60]	; 0x3c
   1aedc:	add	lr, sp, #16
   1aee0:	str	lr, [sp]
   1aee4:	str	ip, [sp, #4]
   1aee8:	bl	1a8f0 <__assert_fail@plt+0x9744>
   1aeec:	add	sp, sp, #56	; 0x38
   1aef0:	pop	{lr}		; (ldr lr, [sp], #4)
   1aef4:	add	sp, sp, #4
   1aef8:	bx	lr
   1aefc:	mov	ip, #1
   1af00:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af04:	mov	ip, #2
   1af08:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af0c:	mov	ip, #3
   1af10:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af14:	mov	ip, #4
   1af18:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af1c:	mov	ip, #5
   1af20:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af24:	mov	ip, #6
   1af28:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af2c:	mov	ip, #7
   1af30:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af34:	mov	ip, #8
   1af38:	b	1aed8 <__assert_fail@plt+0x9d2c>
   1af3c:	movw	r3, #57724	; 0xe17c
   1af40:	movt	r3, #2
   1af44:	str	r4, [sp, #-8]!
   1af48:	mov	r0, #10
   1af4c:	ldr	r1, [r3]
   1af50:	str	lr, [sp, #4]
   1af54:	bl	10f48 <fputc_unlocked@plt>
   1af58:	mov	r2, #5
   1af5c:	movw	r1, #53472	; 0xd0e0
   1af60:	movt	r1, #1
   1af64:	mov	r0, #0
   1af68:	bl	10f54 <dcgettext@plt>
   1af6c:	mov	r1, r0
   1af70:	movw	r2, #53492	; 0xd0f4
   1af74:	movt	r2, #1
   1af78:	mov	r0, #1
   1af7c:	bl	11098 <__printf_chk@plt>
   1af80:	mov	r2, #5
   1af84:	movw	r1, #53516	; 0xd10c
   1af88:	movt	r1, #1
   1af8c:	mov	r0, #0
   1af90:	bl	10f54 <dcgettext@plt>
   1af94:	mov	r1, r0
   1af98:	movw	r3, #50844	; 0xc69c
   1af9c:	movt	r3, #1
   1afa0:	movw	r2, #50884	; 0xc6c4
   1afa4:	movt	r2, #1
   1afa8:	mov	r0, #1
   1afac:	bl	11098 <__printf_chk@plt>
   1afb0:	mov	r2, #5
   1afb4:	movw	r1, #53536	; 0xd120
   1afb8:	movt	r1, #1
   1afbc:	mov	r0, #0
   1afc0:	bl	10f54 <dcgettext@plt>
   1afc4:	mov	r1, r0
   1afc8:	movw	r2, #53576	; 0xd148
   1afcc:	movt	r2, #1
   1afd0:	mov	r0, #1
   1afd4:	ldr	r4, [sp]
   1afd8:	ldr	lr, [sp, #4]
   1afdc:	add	sp, sp, #8
   1afe0:	b	11098 <__printf_chk@plt>
   1afe4:	strd	r4, [sp, #-16]!
   1afe8:	mov	r4, r0
   1afec:	mov	r5, r2
   1aff0:	str	r6, [sp, #8]
   1aff4:	mov	r6, r1
   1aff8:	str	lr, [sp, #12]
   1affc:	bl	1be94 <__assert_fail@plt+0xace8>
   1b000:	cmp	r0, #0
   1b004:	beq	1b018 <__assert_fail@plt+0x9e6c>
   1b008:	ldrd	r4, [sp]
   1b00c:	ldr	r6, [sp, #8]
   1b010:	add	sp, sp, #12
   1b014:	pop	{pc}		; (ldr pc, [sp], #4)
   1b018:	cmp	r4, #0
   1b01c:	beq	1b02c <__assert_fail@plt+0x9e80>
   1b020:	cmp	r6, #0
   1b024:	cmpne	r5, #0
   1b028:	beq	1b008 <__assert_fail@plt+0x9e5c>
   1b02c:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b030:	str	r4, [sp, #-8]!
   1b034:	str	lr, [sp, #4]
   1b038:	bl	1b730 <__assert_fail@plt+0xa584>
   1b03c:	cmp	r0, #0
   1b040:	beq	1b050 <__assert_fail@plt+0x9ea4>
   1b044:	ldr	r4, [sp]
   1b048:	add	sp, sp, #4
   1b04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b050:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b054:	str	r4, [sp, #-8]!
   1b058:	str	lr, [sp, #4]
   1b05c:	bl	1b730 <__assert_fail@plt+0xa584>
   1b060:	cmp	r0, #0
   1b064:	beq	1b074 <__assert_fail@plt+0x9ec8>
   1b068:	ldr	r4, [sp]
   1b06c:	add	sp, sp, #4
   1b070:	pop	{pc}		; (ldr pc, [sp], #4)
   1b074:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b078:	str	r4, [sp, #-8]!
   1b07c:	str	lr, [sp, #4]
   1b080:	bl	1b730 <__assert_fail@plt+0xa584>
   1b084:	cmp	r0, #0
   1b088:	beq	1b098 <__assert_fail@plt+0x9eec>
   1b08c:	ldr	r4, [sp]
   1b090:	add	sp, sp, #4
   1b094:	pop	{pc}		; (ldr pc, [sp], #4)
   1b098:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b09c:	strd	r4, [sp, #-16]!
   1b0a0:	mov	r5, r0
   1b0a4:	mov	r4, r1
   1b0a8:	str	r6, [sp, #8]
   1b0ac:	str	lr, [sp, #12]
   1b0b0:	bl	1b76c <__assert_fail@plt+0xa5c0>
   1b0b4:	cmp	r0, #0
   1b0b8:	beq	1b0cc <__assert_fail@plt+0x9f20>
   1b0bc:	ldrd	r4, [sp]
   1b0c0:	ldr	r6, [sp, #8]
   1b0c4:	add	sp, sp, #12
   1b0c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0cc:	adds	r4, r4, #0
   1b0d0:	movne	r4, #1
   1b0d4:	cmp	r5, #0
   1b0d8:	moveq	r4, #1
   1b0dc:	cmp	r4, #0
   1b0e0:	beq	1b0bc <__assert_fail@plt+0x9f10>
   1b0e4:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b0e8:	cmp	r1, #0
   1b0ec:	orreq	r1, r1, #1
   1b0f0:	str	r4, [sp, #-8]!
   1b0f4:	str	lr, [sp, #4]
   1b0f8:	bl	1b76c <__assert_fail@plt+0xa5c0>
   1b0fc:	cmp	r0, #0
   1b100:	beq	1b110 <__assert_fail@plt+0x9f64>
   1b104:	ldr	r4, [sp]
   1b108:	add	sp, sp, #4
   1b10c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b110:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b114:	strd	r4, [sp, #-16]!
   1b118:	mov	r4, r0
   1b11c:	mov	r5, r2
   1b120:	str	r6, [sp, #8]
   1b124:	mov	r6, r1
   1b128:	str	lr, [sp, #12]
   1b12c:	bl	1be94 <__assert_fail@plt+0xace8>
   1b130:	cmp	r0, #0
   1b134:	beq	1b148 <__assert_fail@plt+0x9f9c>
   1b138:	ldrd	r4, [sp]
   1b13c:	ldr	r6, [sp, #8]
   1b140:	add	sp, sp, #12
   1b144:	pop	{pc}		; (ldr pc, [sp], #4)
   1b148:	cmp	r4, #0
   1b14c:	beq	1b15c <__assert_fail@plt+0x9fb0>
   1b150:	cmp	r6, #0
   1b154:	cmpne	r5, #0
   1b158:	beq	1b138 <__assert_fail@plt+0x9f8c>
   1b15c:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b160:	cmp	r2, #0
   1b164:	cmpne	r1, #0
   1b168:	str	r4, [sp, #-8]!
   1b16c:	moveq	r2, #1
   1b170:	str	lr, [sp, #4]
   1b174:	moveq	r1, r2
   1b178:	bl	1be94 <__assert_fail@plt+0xace8>
   1b17c:	cmp	r0, #0
   1b180:	beq	1b190 <__assert_fail@plt+0x9fe4>
   1b184:	ldr	r4, [sp]
   1b188:	add	sp, sp, #4
   1b18c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b190:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b194:	mov	r2, r1
   1b198:	mov	r1, r0
   1b19c:	str	r4, [sp, #-8]!
   1b1a0:	mov	r0, #0
   1b1a4:	str	lr, [sp, #4]
   1b1a8:	bl	1be94 <__assert_fail@plt+0xace8>
   1b1ac:	cmp	r0, #0
   1b1b0:	beq	1b1c0 <__assert_fail@plt+0xa014>
   1b1b4:	ldr	r4, [sp]
   1b1b8:	add	sp, sp, #4
   1b1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1c0:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b1c4:	cmp	r1, #0
   1b1c8:	cmpne	r0, #0
   1b1cc:	str	r4, [sp, #-8]!
   1b1d0:	moveq	r2, #1
   1b1d4:	movne	r2, r1
   1b1d8:	str	lr, [sp, #4]
   1b1dc:	movne	r1, r0
   1b1e0:	moveq	r1, r2
   1b1e4:	mov	r0, #0
   1b1e8:	bl	1be94 <__assert_fail@plt+0xace8>
   1b1ec:	cmp	r0, #0
   1b1f0:	beq	1b200 <__assert_fail@plt+0xa054>
   1b1f4:	ldr	r4, [sp]
   1b1f8:	add	sp, sp, #4
   1b1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b200:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b204:	cmp	r0, #0
   1b208:	strd	r4, [sp, #-16]!
   1b20c:	mov	r5, r1
   1b210:	ldr	r4, [r1]
   1b214:	str	r6, [sp, #8]
   1b218:	str	lr, [sp, #12]
   1b21c:	beq	1b264 <__assert_fail@plt+0xa0b8>
   1b220:	lsr	r3, r4, #1
   1b224:	add	r3, r3, #1
   1b228:	adds	r4, r4, r3
   1b22c:	bcs	1b260 <__assert_fail@plt+0xa0b4>
   1b230:	mov	r2, #1
   1b234:	mov	r1, r4
   1b238:	bl	1be94 <__assert_fail@plt+0xace8>
   1b23c:	cmp	r0, #0
   1b240:	beq	1b258 <__assert_fail@plt+0xa0ac>
   1b244:	ldr	r6, [sp, #8]
   1b248:	str	r4, [r5]
   1b24c:	ldrd	r4, [sp]
   1b250:	add	sp, sp, #12
   1b254:	pop	{pc}		; (ldr pc, [sp], #4)
   1b258:	cmp	r4, #0
   1b25c:	beq	1b244 <__assert_fail@plt+0xa098>
   1b260:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b264:	cmp	r4, #0
   1b268:	mov	r2, #1
   1b26c:	moveq	r4, #64	; 0x40
   1b270:	mov	r1, r4
   1b274:	bl	1be94 <__assert_fail@plt+0xace8>
   1b278:	cmp	r0, #0
   1b27c:	bne	1b244 <__assert_fail@plt+0xa098>
   1b280:	b	1b260 <__assert_fail@plt+0xa0b4>
   1b284:	cmp	r0, #0
   1b288:	strd	r4, [sp, #-16]!
   1b28c:	mov	r5, r1
   1b290:	ldr	r4, [r1]
   1b294:	str	r6, [sp, #8]
   1b298:	mov	r6, r2
   1b29c:	str	lr, [sp, #12]
   1b2a0:	beq	1b2e8 <__assert_fail@plt+0xa13c>
   1b2a4:	lsr	r3, r4, #1
   1b2a8:	add	r3, r3, #1
   1b2ac:	adds	r4, r4, r3
   1b2b0:	bcs	1b2e4 <__assert_fail@plt+0xa138>
   1b2b4:	mov	r1, r4
   1b2b8:	bl	1be94 <__assert_fail@plt+0xace8>
   1b2bc:	cmp	r0, #0
   1b2c0:	beq	1b2d8 <__assert_fail@plt+0xa12c>
   1b2c4:	ldr	r6, [sp, #8]
   1b2c8:	str	r4, [r5]
   1b2cc:	ldrd	r4, [sp]
   1b2d0:	add	sp, sp, #12
   1b2d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2d8:	cmp	r4, #0
   1b2dc:	cmpne	r6, #0
   1b2e0:	beq	1b2c4 <__assert_fail@plt+0xa118>
   1b2e4:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b2e8:	cmp	r4, #0
   1b2ec:	bne	1b300 <__assert_fail@plt+0xa154>
   1b2f0:	mov	r4, #64	; 0x40
   1b2f4:	udiv	r4, r4, r2
   1b2f8:	cmp	r2, #64	; 0x40
   1b2fc:	addhi	r4, r4, #1
   1b300:	mov	r2, r6
   1b304:	mov	r1, r4
   1b308:	mov	r0, #0
   1b30c:	bl	1be94 <__assert_fail@plt+0xace8>
   1b310:	cmp	r0, #0
   1b314:	bne	1b2c4 <__assert_fail@plt+0xa118>
   1b318:	b	1b2e4 <__assert_fail@plt+0xa138>
   1b31c:	ldr	ip, [r1]
   1b320:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b324:	strd	r6, [sp, #8]
   1b328:	mov	r7, r1
   1b32c:	mov	r6, r0
   1b330:	str	r8, [sp, #16]
   1b334:	mvn	r8, r3
   1b338:	lsr	r8, r8, #31
   1b33c:	str	lr, [sp, #20]
   1b340:	asr	r1, ip, #1
   1b344:	ldr	lr, [sp, #24]
   1b348:	adds	r4, ip, r1
   1b34c:	mvnvs	r4, #-2147483648	; 0x80000000
   1b350:	cmp	r3, r4
   1b354:	movge	r1, #0
   1b358:	andlt	r1, r8, #1
   1b35c:	cmp	r1, #0
   1b360:	movne	r4, r3
   1b364:	smull	r0, r1, r4, lr
   1b368:	cmp	r1, r0, asr #31
   1b36c:	bne	1b41c <__assert_fail@plt+0xa270>
   1b370:	cmp	r0, #63	; 0x3f
   1b374:	mov	r5, r0
   1b378:	ble	1b3e8 <__assert_fail@plt+0xa23c>
   1b37c:	cmp	r6, #0
   1b380:	sub	r1, r4, ip
   1b384:	streq	r6, [r7]
   1b388:	cmp	r1, r2
   1b38c:	bge	1b3bc <__assert_fail@plt+0xa210>
   1b390:	adds	r4, ip, r2
   1b394:	bvs	1b418 <__assert_fail@plt+0xa26c>
   1b398:	cmp	r4, r3
   1b39c:	movle	r3, #0
   1b3a0:	andgt	r3, r8, #1
   1b3a4:	cmp	r3, #0
   1b3a8:	bne	1b418 <__assert_fail@plt+0xa26c>
   1b3ac:	smull	r0, r1, r4, lr
   1b3b0:	cmp	r1, r0, asr #31
   1b3b4:	mov	r5, r0
   1b3b8:	bne	1b418 <__assert_fail@plt+0xa26c>
   1b3bc:	mov	r1, r5
   1b3c0:	mov	r0, r6
   1b3c4:	bl	1b76c <__assert_fail@plt+0xa5c0>
   1b3c8:	cmp	r0, #0
   1b3cc:	beq	1b3fc <__assert_fail@plt+0xa250>
   1b3d0:	ldr	r8, [sp, #16]
   1b3d4:	str	r4, [r7]
   1b3d8:	ldrd	r4, [sp]
   1b3dc:	ldrd	r6, [sp, #8]
   1b3e0:	add	sp, sp, #20
   1b3e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3e8:	mov	r0, #64	; 0x40
   1b3ec:	sdiv	r4, r0, lr
   1b3f0:	mls	r5, lr, r4, r0
   1b3f4:	sub	r5, r0, r5
   1b3f8:	b	1b37c <__assert_fail@plt+0xa1d0>
   1b3fc:	adds	r5, r5, #0
   1b400:	movne	r5, #1
   1b404:	cmp	r6, #0
   1b408:	movne	r6, r5
   1b40c:	moveq	r6, #1
   1b410:	cmp	r6, #0
   1b414:	beq	1b3d0 <__assert_fail@plt+0xa224>
   1b418:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b41c:	mvn	r0, #-2147483648	; 0x80000000
   1b420:	b	1b3ec <__assert_fail@plt+0xa240>
   1b424:	mov	r1, #1
   1b428:	str	r4, [sp, #-8]!
   1b42c:	str	lr, [sp, #4]
   1b430:	bl	1b6bc <__assert_fail@plt+0xa510>
   1b434:	cmp	r0, #0
   1b438:	beq	1b448 <__assert_fail@plt+0xa29c>
   1b43c:	ldr	r4, [sp]
   1b440:	add	sp, sp, #4
   1b444:	pop	{pc}		; (ldr pc, [sp], #4)
   1b448:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b44c:	mov	r1, #1
   1b450:	str	r4, [sp, #-8]!
   1b454:	str	lr, [sp, #4]
   1b458:	bl	1b6bc <__assert_fail@plt+0xa510>
   1b45c:	cmp	r0, #0
   1b460:	beq	1b470 <__assert_fail@plt+0xa2c4>
   1b464:	ldr	r4, [sp]
   1b468:	add	sp, sp, #4
   1b46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b470:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b474:	str	r4, [sp, #-8]!
   1b478:	str	lr, [sp, #4]
   1b47c:	bl	1b6bc <__assert_fail@plt+0xa510>
   1b480:	cmp	r0, #0
   1b484:	beq	1b494 <__assert_fail@plt+0xa2e8>
   1b488:	ldr	r4, [sp]
   1b48c:	add	sp, sp, #4
   1b490:	pop	{pc}		; (ldr pc, [sp], #4)
   1b494:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b498:	str	r4, [sp, #-8]!
   1b49c:	str	lr, [sp, #4]
   1b4a0:	bl	1b6bc <__assert_fail@plt+0xa510>
   1b4a4:	cmp	r0, #0
   1b4a8:	beq	1b4b8 <__assert_fail@plt+0xa30c>
   1b4ac:	ldr	r4, [sp]
   1b4b0:	add	sp, sp, #4
   1b4b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4b8:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b4bc:	strd	r4, [sp, #-16]!
   1b4c0:	mov	r4, r1
   1b4c4:	str	r6, [sp, #8]
   1b4c8:	mov	r6, r0
   1b4cc:	mov	r0, r1
   1b4d0:	str	lr, [sp, #12]
   1b4d4:	bl	1b730 <__assert_fail@plt+0xa584>
   1b4d8:	subs	r5, r0, #0
   1b4dc:	beq	1b500 <__assert_fail@plt+0xa354>
   1b4e0:	mov	r2, r4
   1b4e4:	mov	r1, r6
   1b4e8:	bl	10f24 <memcpy@plt>
   1b4ec:	mov	r0, r5
   1b4f0:	ldrd	r4, [sp]
   1b4f4:	ldr	r6, [sp, #8]
   1b4f8:	add	sp, sp, #12
   1b4fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b500:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b504:	strd	r4, [sp, #-16]!
   1b508:	mov	r4, r1
   1b50c:	str	r6, [sp, #8]
   1b510:	mov	r6, r0
   1b514:	mov	r0, r1
   1b518:	str	lr, [sp, #12]
   1b51c:	bl	1b730 <__assert_fail@plt+0xa584>
   1b520:	subs	r5, r0, #0
   1b524:	beq	1b548 <__assert_fail@plt+0xa39c>
   1b528:	mov	r2, r4
   1b52c:	mov	r1, r6
   1b530:	bl	10f24 <memcpy@plt>
   1b534:	mov	r0, r5
   1b538:	ldrd	r4, [sp]
   1b53c:	ldr	r6, [sp, #8]
   1b540:	add	sp, sp, #12
   1b544:	pop	{pc}		; (ldr pc, [sp], #4)
   1b548:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b54c:	strd	r4, [sp, #-16]!
   1b550:	mov	r4, r1
   1b554:	str	r6, [sp, #8]
   1b558:	mov	r6, r0
   1b55c:	add	r0, r1, #1
   1b560:	str	lr, [sp, #12]
   1b564:	bl	1b730 <__assert_fail@plt+0xa584>
   1b568:	subs	r5, r0, #0
   1b56c:	beq	1b598 <__assert_fail@plt+0xa3ec>
   1b570:	mov	r3, #0
   1b574:	mov	r1, r6
   1b578:	mov	r2, r4
   1b57c:	strb	r3, [r5, r4]
   1b580:	bl	10f24 <memcpy@plt>
   1b584:	mov	r0, r5
   1b588:	ldrd	r4, [sp]
   1b58c:	ldr	r6, [sp, #8]
   1b590:	add	sp, sp, #12
   1b594:	pop	{pc}		; (ldr pc, [sp], #4)
   1b598:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b59c:	strd	r4, [sp, #-16]!
   1b5a0:	str	r6, [sp, #8]
   1b5a4:	mov	r6, r0
   1b5a8:	str	lr, [sp, #12]
   1b5ac:	bl	11044 <strlen@plt>
   1b5b0:	add	r4, r0, #1
   1b5b4:	mov	r0, r4
   1b5b8:	bl	1b730 <__assert_fail@plt+0xa584>
   1b5bc:	subs	r5, r0, #0
   1b5c0:	beq	1b5e4 <__assert_fail@plt+0xa438>
   1b5c4:	mov	r2, r4
   1b5c8:	mov	r1, r6
   1b5cc:	bl	10f24 <memcpy@plt>
   1b5d0:	mov	r0, r5
   1b5d4:	ldrd	r4, [sp]
   1b5d8:	ldr	r6, [sp, #8]
   1b5dc:	add	sp, sp, #12
   1b5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e4:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b5e8:	movw	r3, #57632	; 0xe120
   1b5ec:	movt	r3, #2
   1b5f0:	str	r4, [sp, #-8]!
   1b5f4:	ldr	r4, [r3]
   1b5f8:	mov	r2, #5
   1b5fc:	movw	r1, #53656	; 0xd198
   1b600:	movt	r1, #1
   1b604:	mov	r0, #0
   1b608:	str	lr, [sp, #4]
   1b60c:	bl	10f54 <dcgettext@plt>
   1b610:	mov	r3, r0
   1b614:	movw	r2, #52372	; 0xcc94
   1b618:	movt	r2, #1
   1b61c:	mov	r1, #0
   1b620:	mov	r0, r4
   1b624:	bl	10fd8 <error@plt>
   1b628:	bl	1117c <abort@plt>
   1b62c:	orr	r1, r1, #512	; 0x200
   1b630:	str	r4, [sp, #-8]!
   1b634:	str	lr, [sp, #4]
   1b638:	bl	13d60 <__assert_fail@plt+0x2bb4>
   1b63c:	cmp	r0, #0
   1b640:	beq	1b650 <__assert_fail@plt+0xa4a4>
   1b644:	ldr	r4, [sp]
   1b648:	add	sp, sp, #4
   1b64c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b650:	bl	11068 <__errno_location@plt>
   1b654:	ldr	r3, [r0]
   1b658:	cmp	r3, #22
   1b65c:	beq	1b664 <__assert_fail@plt+0xa4b8>
   1b660:	bl	1b5e8 <__assert_fail@plt+0xa43c>
   1b664:	movw	r3, #53676	; 0xd1ac
   1b668:	movt	r3, #1
   1b66c:	movw	r1, #53688	; 0xd1b8
   1b670:	movt	r1, #1
   1b674:	movw	r0, #53700	; 0xd1c4
   1b678:	movt	r0, #1
   1b67c:	mov	r2, #41	; 0x29
   1b680:	bl	111ac <__assert_fail@plt>
   1b684:	ldr	r3, [r0, #48]	; 0x30
   1b688:	and	r3, r3, #17
   1b68c:	cmp	r3, #16
   1b690:	beq	1b6b4 <__assert_fail@plt+0xa508>
   1b694:	cmp	r3, #17
   1b698:	beq	1b6a4 <__assert_fail@plt+0xa4f8>
   1b69c:	mov	r0, #0
   1b6a0:	bx	lr
   1b6a4:	ldr	r0, [r1, #48]	; 0x30
   1b6a8:	adds	r0, r0, #0
   1b6ac:	movne	r0, #1
   1b6b0:	bx	lr
   1b6b4:	mov	r0, #1
   1b6b8:	bx	lr
   1b6bc:	cmp	r1, #0
   1b6c0:	cmpne	r0, #0
   1b6c4:	beq	1b710 <__assert_fail@plt+0xa564>
   1b6c8:	strd	r4, [sp, #-16]!
   1b6cc:	umull	r4, r5, r0, r1
   1b6d0:	str	r6, [sp, #8]
   1b6d4:	str	lr, [sp, #12]
   1b6d8:	adds	r3, r5, #0
   1b6dc:	movne	r3, #1
   1b6e0:	cmp	r4, #0
   1b6e4:	blt	1b6f0 <__assert_fail@plt+0xa544>
   1b6e8:	cmp	r3, #0
   1b6ec:	beq	1b71c <__assert_fail@plt+0xa570>
   1b6f0:	bl	11068 <__errno_location@plt>
   1b6f4:	mov	r3, #12
   1b6f8:	ldrd	r4, [sp]
   1b6fc:	ldr	r6, [sp, #8]
   1b700:	add	sp, sp, #12
   1b704:	str	r3, [r0]
   1b708:	mov	r0, #0
   1b70c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b710:	mov	r1, #1
   1b714:	mov	r0, r1
   1b718:	b	10ec4 <calloc@plt>
   1b71c:	ldrd	r4, [sp]
   1b720:	ldr	r6, [sp, #8]
   1b724:	ldr	lr, [sp, #12]
   1b728:	add	sp, sp, #16
   1b72c:	b	10ec4 <calloc@plt>
   1b730:	cmp	r0, #0
   1b734:	beq	1b740 <__assert_fail@plt+0xa594>
   1b738:	blt	1b748 <__assert_fail@plt+0xa59c>
   1b73c:	b	10ff0 <malloc@plt>
   1b740:	mov	r0, #1
   1b744:	b	10ff0 <malloc@plt>
   1b748:	str	r4, [sp, #-8]!
   1b74c:	str	lr, [sp, #4]
   1b750:	bl	11068 <__errno_location@plt>
   1b754:	mov	r3, #12
   1b758:	ldr	r4, [sp]
   1b75c:	add	sp, sp, #4
   1b760:	str	r3, [r0]
   1b764:	mov	r0, #0
   1b768:	pop	{pc}		; (ldr pc, [sp], #4)
   1b76c:	cmp	r0, #0
   1b770:	beq	1b798 <__assert_fail@plt+0xa5ec>
   1b774:	cmp	r1, #0
   1b778:	str	r4, [sp, #-8]!
   1b77c:	str	lr, [sp, #4]
   1b780:	beq	1b7a0 <__assert_fail@plt+0xa5f4>
   1b784:	blt	1b7b4 <__assert_fail@plt+0xa608>
   1b788:	ldr	r4, [sp]
   1b78c:	ldr	lr, [sp, #4]
   1b790:	add	sp, sp, #8
   1b794:	b	10f60 <realloc@plt>
   1b798:	mov	r0, r1
   1b79c:	b	1b730 <__assert_fail@plt+0xa584>
   1b7a0:	bl	1bca8 <__assert_fail@plt+0xaafc>
   1b7a4:	ldr	r4, [sp]
   1b7a8:	add	sp, sp, #4
   1b7ac:	mov	r0, #0
   1b7b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7b4:	bl	11068 <__errno_location@plt>
   1b7b8:	mov	r3, #12
   1b7bc:	str	r3, [r0]
   1b7c0:	b	1b7a4 <__assert_fail@plt+0xa5f8>
   1b7c4:	strd	r4, [sp, #-16]!
   1b7c8:	mov	r4, r0
   1b7cc:	str	r6, [sp, #8]
   1b7d0:	str	lr, [sp, #12]
   1b7d4:	bl	10fc0 <__fpending@plt>
   1b7d8:	ldr	r5, [r4]
   1b7dc:	mov	r6, r0
   1b7e0:	mov	r0, r4
   1b7e4:	bl	1b96c <__assert_fail@plt+0xa7c0>
   1b7e8:	mov	r4, r0
   1b7ec:	and	r5, r5, #32
   1b7f0:	cmp	r5, #0
   1b7f4:	bne	1b82c <__assert_fail@plt+0xa680>
   1b7f8:	cmp	r0, #0
   1b7fc:	beq	1b818 <__assert_fail@plt+0xa66c>
   1b800:	cmp	r6, #0
   1b804:	bne	1b844 <__assert_fail@plt+0xa698>
   1b808:	bl	11068 <__errno_location@plt>
   1b80c:	ldr	r4, [r0]
   1b810:	subs	r4, r4, #9
   1b814:	mvnne	r4, #0
   1b818:	mov	r0, r4
   1b81c:	ldrd	r4, [sp]
   1b820:	ldr	r6, [sp, #8]
   1b824:	add	sp, sp, #12
   1b828:	pop	{pc}		; (ldr pc, [sp], #4)
   1b82c:	cmp	r0, #0
   1b830:	bne	1b844 <__assert_fail@plt+0xa698>
   1b834:	bl	11068 <__errno_location@plt>
   1b838:	str	r4, [r0]
   1b83c:	mvn	r4, #0
   1b840:	b	1b818 <__assert_fail@plt+0xa66c>
   1b844:	mvn	r4, #0
   1b848:	b	1b818 <__assert_fail@plt+0xa66c>
   1b84c:	movw	r3, #62998	; 0xf616
   1b850:	movt	r3, #149	; 0x95
   1b854:	strd	r4, [sp, #-8]!
   1b858:	mov	r4, #0
   1b85c:	mov	r5, #0
   1b860:	strd	r4, [r0, #16]
   1b864:	str	r3, [r0, #24]
   1b868:	ldrd	r4, [sp]
   1b86c:	add	sp, sp, #8
   1b870:	bx	lr
   1b874:	ldr	r2, [r0, #24]
   1b878:	movw	r3, #62998	; 0xf616
   1b87c:	movt	r3, #149	; 0x95
   1b880:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b884:	strd	r6, [sp, #8]
   1b888:	strd	r8, [sp, #16]
   1b88c:	strd	sl, [sp, #24]
   1b890:	cmp	r2, r3
   1b894:	str	lr, [sp, #32]
   1b898:	sub	sp, sp, #4
   1b89c:	bne	1b94c <__assert_fail@plt+0xa7a0>
   1b8a0:	ldrd	r6, [r0, #16]
   1b8a4:	ldrd	sl, [r1, #96]	; 0x60
   1b8a8:	orrs	r3, r6, r7
   1b8ac:	beq	1b900 <__assert_fail@plt+0xa754>
   1b8b0:	ldrd	r2, [r0]
   1b8b4:	cmp	r3, fp
   1b8b8:	cmpeq	r2, sl
   1b8bc:	beq	1b920 <__assert_fail@plt+0xa774>
   1b8c0:	adds	r8, r6, #1
   1b8c4:	adc	r9, r7, #0
   1b8c8:	and	r2, r6, r8
   1b8cc:	and	r3, r7, r9
   1b8d0:	orrs	r3, r2, r3
   1b8d4:	strd	r8, [r0, #16]
   1b8d8:	movne	r1, #0
   1b8dc:	beq	1b93c <__assert_fail@plt+0xa790>
   1b8e0:	mov	r0, r1
   1b8e4:	add	sp, sp, #4
   1b8e8:	ldrd	r4, [sp]
   1b8ec:	ldrd	r6, [sp, #8]
   1b8f0:	ldrd	r8, [sp, #16]
   1b8f4:	ldrd	sl, [sp, #24]
   1b8f8:	add	sp, sp, #32
   1b8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b900:	mov	r2, #1
   1b904:	mov	r3, #0
   1b908:	strd	r2, [r0, #16]
   1b90c:	ldrd	r2, [r1]
   1b910:	mov	r1, #0
   1b914:	strd	sl, [r0]
   1b918:	strd	r2, [r0, #8]
   1b91c:	b	1b8e0 <__assert_fail@plt+0xa734>
   1b920:	ldrd	r4, [r1]
   1b924:	ldrd	r2, [r0, #8]
   1b928:	cmp	r5, r3
   1b92c:	cmpeq	r4, r2
   1b930:	bne	1b8c0 <__assert_fail@plt+0xa714>
   1b934:	mov	r1, #1
   1b938:	b	1b8e0 <__assert_fail@plt+0xa734>
   1b93c:	orrs	r3, r8, r9
   1b940:	bne	1b90c <__assert_fail@plt+0xa760>
   1b944:	mov	r1, #1
   1b948:	b	1b8e0 <__assert_fail@plt+0xa734>
   1b94c:	movw	r3, #53716	; 0xd1d4
   1b950:	movt	r3, #1
   1b954:	movw	r1, #53728	; 0xd1e0
   1b958:	movt	r1, #1
   1b95c:	movw	r0, #53748	; 0xd1f4
   1b960:	movt	r0, #1
   1b964:	mov	r2, #60	; 0x3c
   1b968:	bl	111ac <__assert_fail@plt>
   1b96c:	strd	r4, [sp, #-12]!
   1b970:	mov	r4, r0
   1b974:	str	lr, [sp, #8]
   1b978:	sub	sp, sp, #12
   1b97c:	bl	110a4 <fileno@plt>
   1b980:	cmp	r0, #0
   1b984:	mov	r0, r4
   1b988:	blt	1ba0c <__assert_fail@plt+0xa860>
   1b98c:	bl	11008 <__freading@plt>
   1b990:	cmp	r0, #0
   1b994:	bne	1b9d8 <__assert_fail@plt+0xa82c>
   1b998:	mov	r0, r4
   1b99c:	bl	1bc48 <__assert_fail@plt+0xaa9c>
   1b9a0:	cmp	r0, #0
   1b9a4:	beq	1ba08 <__assert_fail@plt+0xa85c>
   1b9a8:	bl	11068 <__errno_location@plt>
   1b9ac:	mov	r5, r0
   1b9b0:	mov	r0, r4
   1b9b4:	ldr	r4, [r5]
   1b9b8:	bl	110bc <fclose@plt>
   1b9bc:	cmp	r4, #0
   1b9c0:	mvnne	r0, #0
   1b9c4:	strne	r4, [r5]
   1b9c8:	add	sp, sp, #12
   1b9cc:	ldrd	r4, [sp]
   1b9d0:	add	sp, sp, #8
   1b9d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9d8:	mov	r0, r4
   1b9dc:	bl	110a4 <fileno@plt>
   1b9e0:	mov	r1, #1
   1b9e4:	mov	r2, #0
   1b9e8:	mov	r3, #0
   1b9ec:	str	r1, [sp]
   1b9f0:	bl	10fa8 <lseek64@plt>
   1b9f4:	mvn	r3, #0
   1b9f8:	mvn	r2, #0
   1b9fc:	cmp	r1, r3
   1ba00:	cmpeq	r0, r2
   1ba04:	bne	1b998 <__assert_fail@plt+0xa7ec>
   1ba08:	mov	r0, r4
   1ba0c:	add	sp, sp, #12
   1ba10:	ldrd	r4, [sp]
   1ba14:	ldr	lr, [sp, #8]
   1ba18:	add	sp, sp, #12
   1ba1c:	b	110bc <fclose@plt>
   1ba20:	push	{r1, r2, r3}
   1ba24:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ba28:	strd	r6, [sp, #8]
   1ba2c:	str	lr, [sp, #16]
   1ba30:	sub	sp, sp, #8
   1ba34:	ldr	r1, [sp, #28]
   1ba38:	add	r2, sp, #32
   1ba3c:	str	r2, [sp, #4]
   1ba40:	cmp	r1, #0
   1ba44:	beq	1bb20 <__assert_fail@plt+0xa974>
   1ba48:	movw	r3, #1030	; 0x406
   1ba4c:	mov	r6, r0
   1ba50:	cmp	r1, r3
   1ba54:	beq	1bb30 <__assert_fail@plt+0xa984>
   1ba58:	cmp	r1, #11
   1ba5c:	beq	1bad8 <__assert_fail@plt+0xa92c>
   1ba60:	ble	1bab8 <__assert_fail@plt+0xa90c>
   1ba64:	movw	r2, #1031	; 0x407
   1ba68:	cmp	r1, r2
   1ba6c:	bgt	1baf4 <__assert_fail@plt+0xa948>
   1ba70:	cmp	r1, r3
   1ba74:	bge	1ba84 <__assert_fail@plt+0xa8d8>
   1ba78:	movw	r3, #1025	; 0x401
   1ba7c:	cmp	r1, r3
   1ba80:	beq	1bad8 <__assert_fail@plt+0xa92c>
   1ba84:	ldr	r3, [sp, #4]
   1ba88:	mov	r0, r6
   1ba8c:	ldr	r2, [r3]
   1ba90:	bl	110d4 <fcntl64@plt>
   1ba94:	mov	r4, r0
   1ba98:	mov	r0, r4
   1ba9c:	add	sp, sp, #8
   1baa0:	ldrd	r4, [sp]
   1baa4:	ldrd	r6, [sp, #8]
   1baa8:	ldr	lr, [sp, #16]
   1baac:	add	sp, sp, #20
   1bab0:	add	sp, sp, #12
   1bab4:	bx	lr
   1bab8:	cmp	r1, #4
   1babc:	beq	1ba84 <__assert_fail@plt+0xa8d8>
   1bac0:	bgt	1bae8 <__assert_fail@plt+0xa93c>
   1bac4:	cmp	r1, #2
   1bac8:	beq	1ba84 <__assert_fail@plt+0xa8d8>
   1bacc:	bgt	1bad8 <__assert_fail@plt+0xa92c>
   1bad0:	cmp	r1, #1
   1bad4:	bne	1ba84 <__assert_fail@plt+0xa8d8>
   1bad8:	mov	r0, r6
   1badc:	bl	110d4 <fcntl64@plt>
   1bae0:	mov	r4, r0
   1bae4:	b	1ba98 <__assert_fail@plt+0xa8ec>
   1bae8:	cmp	r1, #9
   1baec:	bne	1ba84 <__assert_fail@plt+0xa8d8>
   1baf0:	b	1bad8 <__assert_fail@plt+0xa92c>
   1baf4:	movw	r3, #1033	; 0x409
   1baf8:	cmp	r1, r3
   1bafc:	beq	1ba84 <__assert_fail@plt+0xa8d8>
   1bb00:	blt	1bad8 <__assert_fail@plt+0xa92c>
   1bb04:	movw	r3, #1034	; 0x40a
   1bb08:	cmp	r1, r3
   1bb0c:	bne	1ba84 <__assert_fail@plt+0xa8d8>
   1bb10:	mov	r0, r6
   1bb14:	bl	110d4 <fcntl64@plt>
   1bb18:	mov	r4, r0
   1bb1c:	b	1ba98 <__assert_fail@plt+0xa8ec>
   1bb20:	ldr	r2, [sp, #32]
   1bb24:	bl	110d4 <fcntl64@plt>
   1bb28:	mov	r4, r0
   1bb2c:	b	1ba98 <__assert_fail@plt+0xa8ec>
   1bb30:	movw	r5, #58088	; 0xe2e8
   1bb34:	movt	r5, #2
   1bb38:	ldr	r7, [r2]
   1bb3c:	add	r2, sp, #36	; 0x24
   1bb40:	ldr	r3, [r5]
   1bb44:	str	r2, [sp, #4]
   1bb48:	mov	r2, r7
   1bb4c:	cmp	r3, #0
   1bb50:	blt	1bb6c <__assert_fail@plt+0xa9c0>
   1bb54:	bl	110d4 <fcntl64@plt>
   1bb58:	subs	r4, r0, #0
   1bb5c:	blt	1bbd4 <__assert_fail@plt+0xaa28>
   1bb60:	mov	r3, #1
   1bb64:	str	r3, [r5]
   1bb68:	b	1ba98 <__assert_fail@plt+0xa8ec>
   1bb6c:	mov	r1, #0
   1bb70:	bl	110d4 <fcntl64@plt>
   1bb74:	subs	r4, r0, #0
   1bb78:	blt	1ba98 <__assert_fail@plt+0xa8ec>
   1bb7c:	ldr	r3, [r5]
   1bb80:	cmn	r3, #1
   1bb84:	bne	1ba98 <__assert_fail@plt+0xa8ec>
   1bb88:	mov	r1, #1
   1bb8c:	mov	r0, r4
   1bb90:	bl	110d4 <fcntl64@plt>
   1bb94:	subs	r2, r0, #0
   1bb98:	blt	1bbb4 <__assert_fail@plt+0xaa08>
   1bb9c:	orr	r2, r2, #1
   1bba0:	mov	r1, #2
   1bba4:	mov	r0, r4
   1bba8:	bl	110d4 <fcntl64@plt>
   1bbac:	cmn	r0, #1
   1bbb0:	bne	1ba98 <__assert_fail@plt+0xa8ec>
   1bbb4:	bl	11068 <__errno_location@plt>
   1bbb8:	mov	r5, r0
   1bbbc:	mov	r0, r4
   1bbc0:	ldr	r6, [r5]
   1bbc4:	mvn	r4, #0
   1bbc8:	bl	11188 <close@plt>
   1bbcc:	str	r6, [r5]
   1bbd0:	b	1ba98 <__assert_fail@plt+0xa8ec>
   1bbd4:	bl	11068 <__errno_location@plt>
   1bbd8:	ldr	r3, [r0]
   1bbdc:	cmp	r3, #22
   1bbe0:	bne	1bb60 <__assert_fail@plt+0xa9b4>
   1bbe4:	mov	r2, r7
   1bbe8:	mov	r0, r6
   1bbec:	mov	r1, #0
   1bbf0:	bl	110d4 <fcntl64@plt>
   1bbf4:	subs	r4, r0, #0
   1bbf8:	mvnge	r3, #0
   1bbfc:	strge	r3, [r5]
   1bc00:	bge	1bb88 <__assert_fail@plt+0xa9dc>
   1bc04:	b	1ba98 <__assert_fail@plt+0xa8ec>
   1bc08:	push	{r1, r2, r3}
   1bc0c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bc10:	sub	sp, sp, #8
   1bc14:	ldr	r1, [sp, #12]
   1bc18:	ands	r2, r1, #64	; 0x40
   1bc1c:	bne	1bc38 <__assert_fail@plt+0xaa8c>
   1bc20:	bl	10fe4 <open64@plt>
   1bc24:	bl	1a894 <__assert_fail@plt+0x96e8>
   1bc28:	add	sp, sp, #8
   1bc2c:	pop	{lr}		; (ldr lr, [sp], #4)
   1bc30:	add	sp, sp, #12
   1bc34:	bx	lr
   1bc38:	add	r3, sp, #16
   1bc3c:	ldr	r2, [sp, #16]
   1bc40:	str	r3, [sp, #4]
   1bc44:	b	1bc20 <__assert_fail@plt+0xaa74>
   1bc48:	str	r4, [sp, #-8]!
   1bc4c:	subs	r4, r0, #0
   1bc50:	str	lr, [sp, #4]
   1bc54:	sub	sp, sp, #8
   1bc58:	beq	1bc74 <__assert_fail@plt+0xaac8>
   1bc5c:	bl	11008 <__freading@plt>
   1bc60:	cmp	r0, #0
   1bc64:	beq	1bc74 <__assert_fail@plt+0xaac8>
   1bc68:	ldr	r3, [r4]
   1bc6c:	tst	r3, #256	; 0x100
   1bc70:	bne	1bc8c <__assert_fail@plt+0xaae0>
   1bc74:	mov	r0, r4
   1bc78:	add	sp, sp, #8
   1bc7c:	ldr	r4, [sp]
   1bc80:	ldr	lr, [sp, #4]
   1bc84:	add	sp, sp, #8
   1bc88:	b	10ef4 <fflush@plt>
   1bc8c:	mov	r1, #1
   1bc90:	mov	r2, #0
   1bc94:	mov	r3, #0
   1bc98:	mov	r0, r4
   1bc9c:	str	r1, [sp]
   1bca0:	bl	1bd08 <__assert_fail@plt+0xab5c>
   1bca4:	b	1bc74 <__assert_fail@plt+0xaac8>
   1bca8:	strd	r4, [sp, #-12]!
   1bcac:	mov	r5, r0
   1bcb0:	str	lr, [sp, #8]
   1bcb4:	sub	sp, sp, #12
   1bcb8:	bl	11068 <__errno_location@plt>
   1bcbc:	mov	r4, r0
   1bcc0:	mov	r2, #0
   1bcc4:	ldr	r3, [r4]
   1bcc8:	mov	r0, r5
   1bccc:	str	r2, [r4]
   1bcd0:	str	r3, [sp]
   1bcd4:	str	r3, [sp, #4]
   1bcd8:	bl	10f0c <free@plt>
   1bcdc:	ldr	r3, [r4]
   1bce0:	add	r2, sp, #8
   1bce4:	clz	r3, r3
   1bce8:	lsr	r3, r3, #5
   1bcec:	add	r3, r2, r3, lsl #2
   1bcf0:	ldr	r3, [r3, #-8]
   1bcf4:	str	r3, [r4]
   1bcf8:	add	sp, sp, #12
   1bcfc:	ldrd	r4, [sp]
   1bd00:	add	sp, sp, #8
   1bd04:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bd0c:	mov	r4, r0
   1bd10:	ldr	ip, [r0, #4]
   1bd14:	strd	r6, [sp, #8]
   1bd18:	str	lr, [sp, #20]
   1bd1c:	ldr	lr, [r0, #8]
   1bd20:	str	r8, [sp, #16]
   1bd24:	sub	sp, sp, #8
   1bd28:	ldr	r5, [sp, #32]
   1bd2c:	cmp	lr, ip
   1bd30:	beq	1bd58 <__assert_fail@plt+0xabac>
   1bd34:	mov	r0, r4
   1bd38:	str	r5, [sp, #32]
   1bd3c:	add	sp, sp, #8
   1bd40:	ldrd	r4, [sp]
   1bd44:	ldrd	r6, [sp, #8]
   1bd48:	ldr	r8, [sp, #16]
   1bd4c:	ldr	lr, [sp, #20]
   1bd50:	add	sp, sp, #24
   1bd54:	b	110c8 <fseeko64@plt>
   1bd58:	ldr	ip, [r0, #16]
   1bd5c:	ldr	lr, [r0, #20]
   1bd60:	cmp	lr, ip
   1bd64:	bne	1bd34 <__assert_fail@plt+0xab88>
   1bd68:	ldr	r8, [r0, #36]	; 0x24
   1bd6c:	cmp	r8, #0
   1bd70:	bne	1bd34 <__assert_fail@plt+0xab88>
   1bd74:	mov	r6, r2
   1bd78:	mov	r7, r3
   1bd7c:	bl	110a4 <fileno@plt>
   1bd80:	mov	r2, r6
   1bd84:	mov	r3, r7
   1bd88:	str	r5, [sp]
   1bd8c:	bl	10fa8 <lseek64@plt>
   1bd90:	mvn	r3, #0
   1bd94:	mvn	r2, #0
   1bd98:	cmp	r1, r3
   1bd9c:	cmpeq	r0, r2
   1bda0:	beq	1bdd0 <__assert_fail@plt+0xac24>
   1bda4:	ldr	r3, [r4]
   1bda8:	strd	r0, [r4, #80]	; 0x50
   1bdac:	bic	r3, r3, #16
   1bdb0:	str	r3, [r4]
   1bdb4:	mov	r0, r8
   1bdb8:	add	sp, sp, #8
   1bdbc:	ldrd	r4, [sp]
   1bdc0:	ldrd	r6, [sp, #8]
   1bdc4:	ldr	r8, [sp, #16]
   1bdc8:	add	sp, sp, #20
   1bdcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdd0:	mvn	r8, #0
   1bdd4:	b	1bdb4 <__assert_fail@plt+0xac08>
   1bdd8:	mov	r0, #14
   1bddc:	str	r4, [sp, #-8]!
   1bde0:	str	lr, [sp, #4]
   1bde4:	bl	110f8 <nl_langinfo@plt>
   1bde8:	cmp	r0, #0
   1bdec:	beq	1be10 <__assert_fail@plt+0xac64>
   1bdf0:	ldrb	r2, [r0]
   1bdf4:	movw	r3, #53772	; 0xd20c
   1bdf8:	movt	r3, #1
   1bdfc:	ldr	r4, [sp]
   1be00:	add	sp, sp, #4
   1be04:	cmp	r2, #0
   1be08:	moveq	r0, r3
   1be0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be10:	ldr	r4, [sp]
   1be14:	add	sp, sp, #4
   1be18:	movw	r0, #53772	; 0xd20c
   1be1c:	movt	r0, #1
   1be20:	pop	{pc}		; (ldr pc, [sp], #4)
   1be24:	strd	r4, [sp, #-20]!	; 0xffffffec
   1be28:	mov	r5, r2
   1be2c:	strd	r6, [sp, #8]
   1be30:	subs	r6, r0, #0
   1be34:	mov	r7, r1
   1be38:	str	lr, [sp, #16]
   1be3c:	sub	sp, sp, #12
   1be40:	addeq	r6, sp, #4
   1be44:	mov	r0, r6
   1be48:	bl	10fcc <mbrtowc@plt>
   1be4c:	cmp	r5, #0
   1be50:	cmnne	r0, #3
   1be54:	mov	r4, r0
   1be58:	bhi	1be74 <__assert_fail@plt+0xacc8>
   1be5c:	mov	r0, r4
   1be60:	add	sp, sp, #12
   1be64:	ldrd	r4, [sp]
   1be68:	ldrd	r6, [sp, #8]
   1be6c:	add	sp, sp, #16
   1be70:	pop	{pc}		; (ldr pc, [sp], #4)
   1be74:	mov	r0, #0
   1be78:	bl	1bed8 <__assert_fail@plt+0xad2c>
   1be7c:	cmp	r0, #0
   1be80:	bne	1be5c <__assert_fail@plt+0xacb0>
   1be84:	ldrb	r3, [r7]
   1be88:	mov	r4, #1
   1be8c:	str	r3, [r6]
   1be90:	b	1be5c <__assert_fail@plt+0xacb0>
   1be94:	umull	r2, r3, r1, r2
   1be98:	cmp	r3, #0
   1be9c:	bne	1bea8 <__assert_fail@plt+0xacfc>
   1bea0:	mov	r1, r2
   1bea4:	b	1b76c <__assert_fail@plt+0xa5c0>
   1bea8:	str	r4, [sp, #-8]!
   1beac:	str	lr, [sp, #4]
   1beb0:	bl	11068 <__errno_location@plt>
   1beb4:	mov	r3, #12
   1beb8:	ldr	r4, [sp]
   1bebc:	add	sp, sp, #4
   1bec0:	str	r3, [r0]
   1bec4:	mov	r0, #0
   1bec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1becc:	mov	r2, #3
   1bed0:	mov	r1, #0
   1bed4:	b	1ba20 <__assert_fail@plt+0xa874>
   1bed8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bedc:	sub	sp, sp, #268	; 0x10c
   1bee0:	movw	r2, #257	; 0x101
   1bee4:	add	r1, sp, #4
   1bee8:	bl	1bf30 <__assert_fail@plt+0xad84>
   1beec:	cmp	r0, #0
   1bef0:	movne	r0, #0
   1bef4:	bne	1bf28 <__assert_fail@plt+0xad7c>
   1bef8:	movw	r1, #53780	; 0xd214
   1befc:	movt	r1, #1
   1bf00:	add	r0, sp, #4
   1bf04:	bl	10ee8 <strcmp@plt>
   1bf08:	cmp	r0, #0
   1bf0c:	beq	1bf28 <__assert_fail@plt+0xad7c>
   1bf10:	add	r0, sp, #4
   1bf14:	movw	r1, #53784	; 0xd218
   1bf18:	movt	r1, #1
   1bf1c:	bl	10ee8 <strcmp@plt>
   1bf20:	adds	r0, r0, #0
   1bf24:	movne	r0, #1
   1bf28:	add	sp, sp, #268	; 0x10c
   1bf2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf30:	strd	r4, [sp, #-16]!
   1bf34:	mov	r5, r1
   1bf38:	mov	r1, #0
   1bf3c:	mov	r4, r2
   1bf40:	str	r6, [sp, #8]
   1bf44:	str	lr, [sp, #12]
   1bf48:	bl	110e0 <setlocale@plt>
   1bf4c:	subs	r6, r0, #0
   1bf50:	beq	1bfd0 <__assert_fail@plt+0xae24>
   1bf54:	bl	11044 <strlen@plt>
   1bf58:	cmp	r4, r0
   1bf5c:	bhi	1bf7c <__assert_fail@plt+0xadd0>
   1bf60:	cmp	r4, #0
   1bf64:	moveq	r0, #34	; 0x22
   1bf68:	bne	1bfa0 <__assert_fail@plt+0xadf4>
   1bf6c:	ldrd	r4, [sp]
   1bf70:	ldr	r6, [sp, #8]
   1bf74:	add	sp, sp, #12
   1bf78:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf7c:	add	r2, r0, #1
   1bf80:	mov	r1, r6
   1bf84:	mov	r0, r5
   1bf88:	bl	10f24 <memcpy@plt>
   1bf8c:	ldrd	r4, [sp]
   1bf90:	mov	r0, #0
   1bf94:	ldr	r6, [sp, #8]
   1bf98:	add	sp, sp, #12
   1bf9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfa0:	sub	r4, r4, #1
   1bfa4:	mov	r1, r6
   1bfa8:	mov	r2, r4
   1bfac:	mov	r0, r5
   1bfb0:	bl	10f24 <memcpy@plt>
   1bfb4:	mov	r3, #0
   1bfb8:	mov	r0, #34	; 0x22
   1bfbc:	strb	r3, [r5, r4]
   1bfc0:	ldrd	r4, [sp]
   1bfc4:	ldr	r6, [sp, #8]
   1bfc8:	add	sp, sp, #12
   1bfcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfd0:	cmp	r4, #0
   1bfd4:	mov	r0, #22
   1bfd8:	strbne	r6, [r5]
   1bfdc:	ldrd	r4, [sp]
   1bfe0:	ldr	r6, [sp, #8]
   1bfe4:	add	sp, sp, #12
   1bfe8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfec:	mov	r1, #0
   1bff0:	b	110e0 <setlocale@plt>
   1bff4:	cmp	r3, #0
   1bff8:	cmpeq	r2, #0
   1bffc:	bne	1c014 <__assert_fail@plt+0xae68>
   1c000:	cmp	r1, #0
   1c004:	cmpeq	r0, #0
   1c008:	mvnne	r1, #0
   1c00c:	mvnne	r0, #0
   1c010:	b	1c030 <__assert_fail@plt+0xae84>
   1c014:	sub	sp, sp, #8
   1c018:	push	{sp, lr}
   1c01c:	bl	1c040 <__assert_fail@plt+0xae94>
   1c020:	ldr	lr, [sp, #4]
   1c024:	add	sp, sp, #8
   1c028:	pop	{r2, r3}
   1c02c:	bx	lr
   1c030:	push	{r1, lr}
   1c034:	mov	r0, #8
   1c038:	bl	10edc <raise@plt>
   1c03c:	pop	{r1, pc}
   1c040:	cmp	r1, r3
   1c044:	cmpeq	r0, r2
   1c048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c04c:	mov	r4, r0
   1c050:	movcc	r0, #0
   1c054:	mov	r5, r1
   1c058:	ldr	lr, [sp, #36]	; 0x24
   1c05c:	movcc	r1, r0
   1c060:	bcc	1c15c <__assert_fail@plt+0xafb0>
   1c064:	cmp	r3, #0
   1c068:	clzeq	ip, r2
   1c06c:	clzne	ip, r3
   1c070:	addeq	ip, ip, #32
   1c074:	cmp	r5, #0
   1c078:	clzeq	r1, r4
   1c07c:	addeq	r1, r1, #32
   1c080:	clzne	r1, r5
   1c084:	sub	ip, ip, r1
   1c088:	sub	sl, ip, #32
   1c08c:	lsl	r9, r3, ip
   1c090:	rsb	fp, ip, #32
   1c094:	orr	r9, r9, r2, lsl sl
   1c098:	orr	r9, r9, r2, lsr fp
   1c09c:	lsl	r8, r2, ip
   1c0a0:	cmp	r5, r9
   1c0a4:	cmpeq	r4, r8
   1c0a8:	movcc	r0, #0
   1c0ac:	movcc	r1, r0
   1c0b0:	bcc	1c0cc <__assert_fail@plt+0xaf20>
   1c0b4:	mov	r0, #1
   1c0b8:	subs	r4, r4, r8
   1c0bc:	lsl	r1, r0, sl
   1c0c0:	orr	r1, r1, r0, lsr fp
   1c0c4:	lsl	r0, r0, ip
   1c0c8:	sbc	r5, r5, r9
   1c0cc:	cmp	ip, #0
   1c0d0:	beq	1c15c <__assert_fail@plt+0xafb0>
   1c0d4:	lsr	r6, r8, #1
   1c0d8:	orr	r6, r6, r9, lsl #31
   1c0dc:	lsr	r7, r9, #1
   1c0e0:	mov	r2, ip
   1c0e4:	b	1c108 <__assert_fail@plt+0xaf5c>
   1c0e8:	subs	r3, r4, r6
   1c0ec:	sbc	r8, r5, r7
   1c0f0:	adds	r3, r3, r3
   1c0f4:	adc	r8, r8, r8
   1c0f8:	adds	r4, r3, #1
   1c0fc:	adc	r5, r8, #0
   1c100:	subs	r2, r2, #1
   1c104:	beq	1c124 <__assert_fail@plt+0xaf78>
   1c108:	cmp	r5, r7
   1c10c:	cmpeq	r4, r6
   1c110:	bcs	1c0e8 <__assert_fail@plt+0xaf3c>
   1c114:	adds	r4, r4, r4
   1c118:	adc	r5, r5, r5
   1c11c:	subs	r2, r2, #1
   1c120:	bne	1c108 <__assert_fail@plt+0xaf5c>
   1c124:	lsr	r3, r4, ip
   1c128:	orr	r3, r3, r5, lsl fp
   1c12c:	lsr	r2, r5, ip
   1c130:	orr	r3, r3, r5, lsr sl
   1c134:	adds	r0, r0, r4
   1c138:	mov	r4, r3
   1c13c:	lsl	r3, r2, ip
   1c140:	orr	r3, r3, r4, lsl sl
   1c144:	lsl	ip, r4, ip
   1c148:	orr	r3, r3, r4, lsr fp
   1c14c:	adc	r1, r1, r5
   1c150:	subs	r0, r0, ip
   1c154:	mov	r5, r2
   1c158:	sbc	r1, r1, r3
   1c15c:	cmp	lr, #0
   1c160:	strdne	r4, [lr]
   1c164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c168:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c16c:	mov	r7, r0
   1c170:	ldr	r6, [pc, #72]	; 1c1c0 <__assert_fail@plt+0xb014>
   1c174:	ldr	r5, [pc, #72]	; 1c1c4 <__assert_fail@plt+0xb018>
   1c178:	add	r6, pc, r6
   1c17c:	add	r5, pc, r5
   1c180:	sub	r6, r6, r5
   1c184:	mov	r8, r1
   1c188:	mov	r9, r2
   1c18c:	bl	10e98 <fstatfs64@plt-0x20>
   1c190:	asrs	r6, r6, #2
   1c194:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c198:	mov	r4, #0
   1c19c:	add	r4, r4, #1
   1c1a0:	ldr	r3, [r5], #4
   1c1a4:	mov	r2, r9
   1c1a8:	mov	r1, r8
   1c1ac:	mov	r0, r7
   1c1b0:	blx	r3
   1c1b4:	cmp	r6, r4
   1c1b8:	bne	1c19c <__assert_fail@plt+0xaff0>
   1c1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c1c0:	muleq	r1, r4, sp
   1c1c4:	andeq	r1, r1, ip, lsl #27
   1c1c8:	bx	lr
   1c1cc:	ldr	r3, [pc, #12]	; 1c1e0 <__assert_fail@plt+0xb034>
   1c1d0:	mov	r1, #0
   1c1d4:	add	r3, pc, r3
   1c1d8:	ldr	r2, [r3]
   1c1dc:	b	11080 <__cxa_atexit@plt>
   1c1e0:	andeq	r1, r1, r8, lsr pc

Disassembly of section .fini:

0001c1e4 <.fini>:
   1c1e4:	push	{r3, lr}
   1c1e8:	pop	{r3, pc}
