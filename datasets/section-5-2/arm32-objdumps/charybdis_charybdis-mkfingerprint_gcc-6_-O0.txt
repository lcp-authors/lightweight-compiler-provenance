
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104a8 <.init>:
   104a8:	push	{r3, lr}
   104ac:	bl	10588 <strcmp@plt+0x48>
   104b0:	pop	{r3, pc}

Disassembly of section .plt:

000104b4 <abort@plt-0x14>:
   104b4:	push	{lr}		; (str lr, [sp, #-4]!)
   104b8:	ldr	lr, [pc, #4]	; 104c4 <abort@plt-0x4>
   104bc:	add	lr, pc, lr
   104c0:	ldr	pc, [lr, #8]!
   104c4:	andeq	r0, r1, ip, lsr fp

000104c8 <abort@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2876]!	; 0xb3c

000104d4 <__libc_start_main@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2868]!	; 0xb34

000104e0 <__gmon_start__@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2860]!	; 0xb2c

000104ec <putchar@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2852]!	; 0xb24

000104f8 <memset@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2844]!	; 0xb1c

00010504 <perror@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2836]!	; 0xb14

00010510 <printf@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2828]!	; 0xb0c

0001051c <fwrite@plt>:
   1051c:	add	ip, pc, #0, 12
   10520:	add	ip, ip, #16, 20	; 0x10000
   10524:	ldr	pc, [ip, #2820]!	; 0xb04

00010528 <puts@plt>:
   10528:	add	ip, pc, #0, 12
   1052c:	add	ip, ip, #16, 20	; 0x10000
   10530:	ldr	pc, [ip, #2812]!	; 0xafc

00010534 <rb_get_ssl_certfp_file@plt>:
   10534:	add	ip, pc, #0, 12
   10538:	add	ip, ip, #16, 20	; 0x10000
   1053c:	ldr	pc, [ip, #2804]!	; 0xaf4

00010540 <strcmp@plt>:
   10540:	add	ip, pc, #0, 12
   10544:	add	ip, ip, #16, 20	; 0x10000
   10548:	ldr	pc, [ip, #2796]!	; 0xaec

Disassembly of section .text:

0001054c <.text>:
   1054c:	mov	fp, #0
   10550:	mov	lr, #0
   10554:	pop	{r1}		; (ldr r1, [sp], #4)
   10558:	mov	r2, sp
   1055c:	push	{r2}		; (str r2, [sp, #-4]!)
   10560:	push	{r0}		; (str r0, [sp, #-4]!)
   10564:	ldr	ip, [pc, #16]	; 1057c <strcmp@plt+0x3c>
   10568:	push	{ip}		; (str ip, [sp, #-4]!)
   1056c:	ldr	r0, [pc, #12]	; 10580 <strcmp@plt+0x40>
   10570:	ldr	r3, [pc, #12]	; 10584 <strcmp@plt+0x44>
   10574:	bl	104d4 <__libc_start_main@plt>
   10578:	bl	104c8 <abort@plt>
   1057c:			; <UNDEFINED> instruction: 0x000109b4
   10580:	andeq	r0, r1, r4, ror r6
   10584:	andeq	r0, r1, r4, asr r9
   10588:	ldr	r3, [pc, #20]	; 105a4 <strcmp@plt+0x64>
   1058c:	ldr	r2, [pc, #20]	; 105a8 <strcmp@plt+0x68>
   10590:	add	r3, pc, r3
   10594:	ldr	r2, [r3, r2]
   10598:	cmp	r2, #0
   1059c:	bxeq	lr
   105a0:	b	104e0 <__gmon_start__@plt>
   105a4:	andeq	r0, r1, r8, ror #20
   105a8:	andeq	r0, r0, r8, lsr r0
   105ac:	ldr	r3, [pc, #28]	; 105d0 <strcmp@plt+0x90>
   105b0:	ldr	r0, [pc, #28]	; 105d4 <strcmp@plt+0x94>
   105b4:	sub	r3, r3, r0
   105b8:	cmp	r3, #6
   105bc:	bxls	lr
   105c0:	ldr	r3, [pc, #16]	; 105d8 <strcmp@plt+0x98>
   105c4:	cmp	r3, #0
   105c8:	bxeq	lr
   105cc:	bx	r3
   105d0:	andeq	r1, r2, fp, asr #32
   105d4:	andeq	r1, r2, r8, asr #32
   105d8:	andeq	r0, r0, r0
   105dc:	ldr	r1, [pc, #36]	; 10608 <strcmp@plt+0xc8>
   105e0:	ldr	r0, [pc, #36]	; 1060c <strcmp@plt+0xcc>
   105e4:	sub	r1, r1, r0
   105e8:	asr	r1, r1, #2
   105ec:	add	r1, r1, r1, lsr #31
   105f0:	asrs	r1, r1, #1
   105f4:	bxeq	lr
   105f8:	ldr	r3, [pc, #16]	; 10610 <strcmp@plt+0xd0>
   105fc:	cmp	r3, #0
   10600:	bxeq	lr
   10604:	bx	r3
   10608:	andeq	r1, r2, r8, asr #32
   1060c:	andeq	r1, r2, r8, asr #32
   10610:	andeq	r0, r0, r0
   10614:	push	{r4, lr}
   10618:	ldr	r4, [pc, #24]	; 10638 <strcmp@plt+0xf8>
   1061c:	ldrb	r3, [r4]
   10620:	cmp	r3, #0
   10624:	popne	{r4, pc}
   10628:	bl	105ac <strcmp@plt+0x6c>
   1062c:	mov	r3, #1
   10630:	strb	r3, [r4]
   10634:	pop	{r4, pc}
   10638:	andeq	r1, r2, r8, asr #32
   1063c:	ldr	r0, [pc, #40]	; 1066c <strcmp@plt+0x12c>
   10640:	ldr	r3, [r0]
   10644:	cmp	r3, #0
   10648:	bne	10650 <strcmp@plt+0x110>
   1064c:	b	105dc <strcmp@plt+0x9c>
   10650:	ldr	r3, [pc, #24]	; 10670 <strcmp@plt+0x130>
   10654:	cmp	r3, #0
   10658:	beq	1064c <strcmp@plt+0x10c>
   1065c:	push	{r4, lr}
   10660:	blx	r3
   10664:	pop	{r4, lr}
   10668:	b	105dc <strcmp@plt+0x9c>
   1066c:	strdeq	r0, [r2], -ip
   10670:	andeq	r0, r0, r0
   10674:	push	{r4, fp, lr}
   10678:	add	fp, sp, #8
   1067c:	sub	sp, sp, #108	; 0x6c
   10680:	str	r0, [fp, #-112]	; 0xffffff90
   10684:	str	r1, [fp, #-116]	; 0xffffff8c
   10688:	ldr	r4, [pc, #628]	; 10904 <strcmp@plt+0x3c4>
   1068c:	add	r4, pc, r4
   10690:	sub	r3, fp, #104	; 0x68
   10694:	mov	r2, #65	; 0x41
   10698:	mov	r1, #0
   1069c:	mov	r0, r3
   106a0:	bl	104f8 <memset@plt>
   106a4:	ldr	r3, [fp, #-112]	; 0xffffff90
   106a8:	cmp	r3, #3
   106ac:	beq	106d8 <strcmp@plt+0x198>
   106b0:	ldr	r3, [pc, #592]	; 10908 <strcmp@plt+0x3c8>
   106b4:	add	r3, pc, r3
   106b8:	mov	r0, r3
   106bc:	bl	10528 <puts@plt>
   106c0:	ldr	r3, [pc, #580]	; 1090c <strcmp@plt+0x3cc>
   106c4:	add	r3, pc, r3
   106c8:	mov	r0, r3
   106cc:	bl	10528 <puts@plt>
   106d0:	mov	r3, #1
   106d4:	b	108f8 <strcmp@plt+0x3b8>
   106d8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   106dc:	ldr	r3, [r3, #4]
   106e0:	str	r3, [fp, #-28]	; 0xffffffe4
   106e4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   106e8:	ldr	r3, [r3, #8]
   106ec:	str	r3, [fp, #-32]	; 0xffffffe0
   106f0:	ldr	r3, [pc, #536]	; 10910 <strcmp@plt+0x3d0>
   106f4:	add	r3, pc, r3
   106f8:	mov	r1, r3
   106fc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10700:	bl	10540 <strcmp@plt>
   10704:	mov	r3, r0
   10708:	cmp	r3, #0
   1070c:	bne	10728 <strcmp@plt+0x1e8>
   10710:	mov	r3, #0
   10714:	str	r3, [fp, #-16]
   10718:	ldr	r3, [pc, #500]	; 10914 <strcmp@plt+0x3d4>
   1071c:	add	r3, pc, r3
   10720:	str	r3, [fp, #-20]	; 0xffffffec
   10724:	b	10824 <strcmp@plt+0x2e4>
   10728:	ldr	r3, [pc, #488]	; 10918 <strcmp@plt+0x3d8>
   1072c:	add	r3, pc, r3
   10730:	mov	r1, r3
   10734:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10738:	bl	10540 <strcmp@plt>
   1073c:	mov	r3, r0
   10740:	cmp	r3, #0
   10744:	bne	10760 <strcmp@plt+0x220>
   10748:	mov	r3, #1
   1074c:	str	r3, [fp, #-16]
   10750:	ldr	r3, [pc, #452]	; 1091c <strcmp@plt+0x3dc>
   10754:	add	r3, pc, r3
   10758:	str	r3, [fp, #-20]	; 0xffffffec
   1075c:	b	10824 <strcmp@plt+0x2e4>
   10760:	ldr	r3, [pc, #440]	; 10920 <strcmp@plt+0x3e0>
   10764:	add	r3, pc, r3
   10768:	mov	r1, r3
   1076c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   10770:	bl	10540 <strcmp@plt>
   10774:	mov	r3, r0
   10778:	cmp	r3, #0
   1077c:	bne	10798 <strcmp@plt+0x258>
   10780:	mov	r3, #2
   10784:	str	r3, [fp, #-16]
   10788:	ldr	r3, [pc, #404]	; 10924 <strcmp@plt+0x3e4>
   1078c:	add	r3, pc, r3
   10790:	str	r3, [fp, #-20]	; 0xffffffec
   10794:	b	10824 <strcmp@plt+0x2e4>
   10798:	ldr	r3, [pc, #392]	; 10928 <strcmp@plt+0x3e8>
   1079c:	add	r3, pc, r3
   107a0:	mov	r1, r3
   107a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   107a8:	bl	10540 <strcmp@plt>
   107ac:	mov	r3, r0
   107b0:	cmp	r3, #0
   107b4:	bne	107d0 <strcmp@plt+0x290>
   107b8:	ldr	r3, [pc, #364]	; 1092c <strcmp@plt+0x3ec>
   107bc:	str	r3, [fp, #-16]
   107c0:	ldr	r3, [pc, #360]	; 10930 <strcmp@plt+0x3f0>
   107c4:	add	r3, pc, r3
   107c8:	str	r3, [fp, #-20]	; 0xffffffec
   107cc:	b	10824 <strcmp@plt+0x2e4>
   107d0:	ldr	r3, [pc, #348]	; 10934 <strcmp@plt+0x3f4>
   107d4:	add	r3, pc, r3
   107d8:	mov	r1, r3
   107dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   107e0:	bl	10540 <strcmp@plt>
   107e4:	mov	r3, r0
   107e8:	cmp	r3, #0
   107ec:	bne	10808 <strcmp@plt+0x2c8>
   107f0:	ldr	r3, [pc, #320]	; 10938 <strcmp@plt+0x3f8>
   107f4:	str	r3, [fp, #-16]
   107f8:	ldr	r3, [pc, #316]	; 1093c <strcmp@plt+0x3fc>
   107fc:	add	r3, pc, r3
   10800:	str	r3, [fp, #-20]	; 0xffffffec
   10804:	b	10824 <strcmp@plt+0x2e4>
   10808:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1080c:	ldr	r3, [pc, #300]	; 10940 <strcmp@plt+0x400>
   10810:	add	r3, pc, r3
   10814:	mov	r0, r3
   10818:	bl	10510 <printf@plt>
   1081c:	mov	r3, #1
   10820:	b	108f8 <strcmp@plt+0x3b8>
   10824:	sub	r3, fp, #104	; 0x68
   10828:	ldr	r2, [fp, #-16]
   1082c:	mov	r1, r3
   10830:	ldr	r0, [fp, #-32]	; 0xffffffe0
   10834:	bl	10534 <rb_get_ssl_certfp_file@plt>
   10838:	str	r0, [fp, #-36]	; 0xffffffdc
   1083c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   10840:	cmp	r3, #0
   10844:	bge	10858 <strcmp@plt+0x318>
   10848:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1084c:	bl	10504 <perror@plt>
   10850:	mov	r3, #1
   10854:	b	108f8 <strcmp@plt+0x3b8>
   10858:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1085c:	cmp	r3, #0
   10860:	bne	1088c <strcmp@plt+0x34c>
   10864:	ldr	r3, [pc, #216]	; 10944 <strcmp@plt+0x404>
   10868:	ldr	r3, [r4, r3]
   1086c:	ldr	r3, [r3]
   10870:	mov	r2, #14
   10874:	mov	r1, #1
   10878:	ldr	r0, [pc, #200]	; 10948 <strcmp@plt+0x408>
   1087c:	add	r0, pc, r0
   10880:	bl	1051c <fwrite@plt>
   10884:	mov	r3, #1
   10888:	b	108f8 <strcmp@plt+0x3b8>
   1088c:	ldr	r1, [fp, #-20]	; 0xffffffec
   10890:	ldr	r3, [pc, #180]	; 1094c <strcmp@plt+0x40c>
   10894:	add	r3, pc, r3
   10898:	mov	r0, r3
   1089c:	bl	10510 <printf@plt>
   108a0:	mov	r3, #0
   108a4:	str	r3, [fp, #-24]	; 0xffffffe8
   108a8:	b	108dc <strcmp@plt+0x39c>
   108ac:	sub	r2, fp, #104	; 0x68
   108b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   108b4:	add	r3, r2, r3
   108b8:	ldrb	r3, [r3]
   108bc:	mov	r1, r3
   108c0:	ldr	r3, [pc, #136]	; 10950 <strcmp@plt+0x410>
   108c4:	add	r3, pc, r3
   108c8:	mov	r0, r3
   108cc:	bl	10510 <printf@plt>
   108d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   108d4:	add	r3, r3, #1
   108d8:	str	r3, [fp, #-24]	; 0xffffffe8
   108dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   108e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   108e4:	cmp	r2, r3
   108e8:	blt	108ac <strcmp@plt+0x36c>
   108ec:	mov	r0, #10
   108f0:	bl	104ec <putchar@plt>
   108f4:	mov	r3, #0
   108f8:	mov	r0, r3
   108fc:	sub	sp, fp, #8
   10900:	pop	{r4, fp, pc}
   10904:	andeq	r0, r1, ip, ror #18
   10908:	andeq	r0, r0, r8, lsl #6
   1090c:	andeq	r0, r0, ip, lsl r3
   10910:	andeq	r0, r0, ip, lsr #6
   10914:	andeq	r0, r0, ip, lsl #6
   10918:	andeq	r0, r0, r0, lsl #6
   1091c:	ldrdeq	r0, [r0], -r4
   10920:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10924:	muleq	r0, ip, r2
   10928:	andeq	r0, r0, r0, lsr #5
   1092c:	andeq	r1, r0, r1
   10930:	andeq	r0, r0, r4, lsl #5
   10934:	andeq	r0, r0, r4, lsl #5
   10938:	andeq	r1, r0, r2
   1093c:	andeq	r0, r0, r8, ror #4
   10940:	andeq	r0, r0, r4, ror #4
   10944:	andeq	r0, r0, ip, lsr r0
   10948:	andeq	r0, r0, ip, lsl #4
   1094c:	andeq	r0, r0, r4, lsl #4
   10950:	ldrdeq	r0, [r0], -r8
   10954:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10958:	mov	r7, r0
   1095c:	ldr	r6, [pc, #72]	; 109ac <strcmp@plt+0x46c>
   10960:	ldr	r5, [pc, #72]	; 109b0 <strcmp@plt+0x470>
   10964:	add	r6, pc, r6
   10968:	add	r5, pc, r5
   1096c:	sub	r6, r6, r5
   10970:	mov	r8, r1
   10974:	mov	r9, r2
   10978:	bl	104a8 <abort@plt-0x20>
   1097c:	asrs	r6, r6, #2
   10980:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10984:	mov	r4, #0
   10988:	add	r4, r4, #1
   1098c:	ldr	r3, [r5], #4
   10990:	mov	r2, r9
   10994:	mov	r1, r8
   10998:	mov	r0, r7
   1099c:	blx	r3
   109a0:	cmp	r6, r4
   109a4:	bne	10988 <strcmp@plt+0x448>
   109a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109ac:	andeq	r0, r1, ip, lsl #11
   109b0:	andeq	r0, r1, r4, lsl #11
   109b4:	bx	lr

Disassembly of section .fini:

000109b8 <.fini>:
   109b8:	push	{r3, lr}
   109bc:	pop	{r3, pc}
