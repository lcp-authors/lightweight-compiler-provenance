
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b58 <.init>:
   10b58:	push	{r3, lr}
   10b5c:	bl	10e3c <__assert_fail@plt+0x48>
   10b60:	pop	{r3, pc}

Disassembly of section .plt:

00010b64 <fstatfs64@plt-0x14>:
   10b64:	push	{lr}		; (str lr, [sp, #-4]!)
   10b68:	ldr	lr, [pc, #4]	; 10b74 <fstatfs64@plt-0x4>
   10b6c:	add	lr, pc, lr
   10b70:	ldr	pc, [lr, #8]!
   10b74:	andeq	r7, r1, ip, lsl #9

00010b78 <fstatfs64@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1164]!	; 0x48c

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1156]!	; 0x484

00010b90 <raise@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1148]!	; 0x47c

00010b9c <strcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1140]!	; 0x474

00010ba8 <strtol@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb4 <getpwuid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1124]!	; 0x464

00010bc0 <printf@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bcc <getuid@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1108]!	; 0x454

00010bd8 <memmove@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1100]!	; 0x44c

00010be4 <free@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1092]!	; 0x444

00010bf0 <memcpy@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bfc <time@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1076]!	; 0x434

00010c08 <ctime@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1068]!	; 0x42c

00010c14 <realloc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1060]!	; 0x424

00010c20 <funlockfile@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1052]!	; 0x41c

00010c2c <__fxstatat64@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1044]!	; 0x414

00010c38 <__fxstat64@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1036]!	; 0x40c

00010c44 <readlink@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1028]!	; 0x404

00010c50 <fwrite@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c5c <ioctl@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c68 <strcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c74 <open64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c80 <getenv@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #988]!	; 0x3dc

00010c8c <malloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #980]!	; 0x3d4

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca4 <strerror@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #964]!	; 0x3c4

00010cb0 <__gmon_start__@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cbc <__ctype_b_loc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc8 <strlen@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd4 <strchr@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #932]!	; 0x3a4

00010ce0 <openat64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #924]!	; 0x39c

00010cec <fprintf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #916]!	; 0x394

00010cf8 <__errno_location@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #908]!	; 0x38c

00010d04 <snprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #900]!	; 0x384

00010d10 <memset@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #892]!	; 0x37c

00010d1c <fcntl64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #884]!	; 0x374

00010d28 <strrchr@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #876]!	; 0x36c

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #868]!	; 0x364

00010d40 <readdir64@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #860]!	; 0x35c

00010d4c <fdopendir@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #852]!	; 0x354

00010d58 <putc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #844]!	; 0x34c

00010d64 <dirfd@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #836]!	; 0x344

00010d70 <flockfile@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #828]!	; 0x33c

00010d7c <fchdir@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #820]!	; 0x334

00010d88 <qsort@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #812]!	; 0x32c

00010d94 <__xstat64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #804]!	; 0x324

00010da0 <isatty@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #796]!	; 0x31c

00010dac <strncmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #788]!	; 0x314

00010db8 <abort@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #780]!	; 0x30c

00010dc4 <close@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #772]!	; 0x304

00010dd0 <__lxstat64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #764]!	; 0x2fc

00010ddc <closedir@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #756]!	; 0x2f4

00010de8 <getgrgid@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #748]!	; 0x2ec

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010e00 <.text>:
   10e00:	mov	fp, #0
   10e04:	mov	lr, #0
   10e08:	pop	{r1}		; (ldr r1, [sp], #4)
   10e0c:	mov	r2, sp
   10e10:	push	{r2}		; (str r2, [sp, #-4]!)
   10e14:	push	{r0}		; (str r0, [sp, #-4]!)
   10e18:	ldr	ip, [pc, #16]	; 10e30 <__assert_fail@plt+0x3c>
   10e1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e20:	ldr	r0, [pc, #12]	; 10e34 <__assert_fail@plt+0x40>
   10e24:	ldr	r3, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	bl	10c98 <__libc_start_main@plt>
   10e2c:	bl	10db8 <abort@plt>
   10e30:	andeq	r7, r1, ip, lsr fp
   10e34:	andeq	r0, r1, r8, lsr #30
   10e38:	ldrdeq	r7, [r1], -ip
   10e3c:	ldr	r3, [pc, #20]	; 10e58 <__assert_fail@plt+0x64>
   10e40:	ldr	r2, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	add	r3, pc, r3
   10e48:	ldr	r2, [r3, r2]
   10e4c:	cmp	r2, #0
   10e50:	bxeq	lr
   10e54:	b	10cb0 <__gmon_start__@plt>
   10e58:			; <UNDEFINED> instruction: 0x000171b4
   10e5c:	andeq	r0, r0, r4, ror #1
   10e60:	ldr	r3, [pc, #28]	; 10e84 <__assert_fail@plt+0x90>
   10e64:	ldr	r0, [pc, #28]	; 10e88 <__assert_fail@plt+0x94>
   10e68:	sub	r3, r3, r0
   10e6c:	cmp	r3, #6
   10e70:	bxls	lr
   10e74:	ldr	r3, [pc, #16]	; 10e8c <__assert_fail@plt+0x98>
   10e78:	cmp	r3, #0
   10e7c:	bxeq	lr
   10e80:	bx	r3
   10e84:	andeq	r8, r2, r3, lsl r1
   10e88:	andeq	r8, r2, r0, lsl r1
   10e8c:	andeq	r0, r0, r0
   10e90:	ldr	r1, [pc, #36]	; 10ebc <__assert_fail@plt+0xc8>
   10e94:	ldr	r0, [pc, #36]	; 10ec0 <__assert_fail@plt+0xcc>
   10e98:	sub	r1, r1, r0
   10e9c:	asr	r1, r1, #2
   10ea0:	add	r1, r1, r1, lsr #31
   10ea4:	asrs	r1, r1, #1
   10ea8:	bxeq	lr
   10eac:	ldr	r3, [pc, #16]	; 10ec4 <__assert_fail@plt+0xd0>
   10eb0:	cmp	r3, #0
   10eb4:	bxeq	lr
   10eb8:	bx	r3
   10ebc:	andeq	r8, r2, r0, lsl r1
   10ec0:	andeq	r8, r2, r0, lsl r1
   10ec4:	andeq	r0, r0, r0
   10ec8:	push	{r4, lr}
   10ecc:	ldr	r4, [pc, #24]	; 10eec <__assert_fail@plt+0xf8>
   10ed0:	ldrb	r3, [r4]
   10ed4:	cmp	r3, #0
   10ed8:	popne	{r4, pc}
   10edc:	bl	10e60 <__assert_fail@plt+0x6c>
   10ee0:	mov	r3, #1
   10ee4:	strb	r3, [r4]
   10ee8:	pop	{r4, pc}
   10eec:	andeq	r8, r2, r8, lsl r1
   10ef0:	ldr	r0, [pc, #40]	; 10f20 <__assert_fail@plt+0x12c>
   10ef4:	ldr	r3, [r0]
   10ef8:	cmp	r3, #0
   10efc:	bne	10f04 <__assert_fail@plt+0x110>
   10f00:	b	10e90 <__assert_fail@plt+0x9c>
   10f04:	ldr	r3, [pc, #24]	; 10f24 <__assert_fail@plt+0x130>
   10f08:	cmp	r3, #0
   10f0c:	beq	10f00 <__assert_fail@plt+0x10c>
   10f10:	push	{r4, lr}
   10f14:	blx	r3
   10f18:	pop	{r4, lr}
   10f1c:	b	10e90 <__assert_fail@plt+0x9c>
   10f20:	andeq	r7, r2, r4, lsl pc
   10f24:	andeq	r0, r0, r0
   10f28:	push	{r4, lr}
   10f2c:	bl	11768 <__assert_fail@plt+0x974>
   10f30:	pop	{r4, pc}
   10f34:	ldr	r2, [r0]
   10f38:	ldrh	r0, [r2, #56]	; 0x38
   10f3c:	cmp	r0, #7
   10f40:	beq	10fd0 <__assert_fail@plt+0x1dc>
   10f44:	ldr	r1, [r1]
   10f48:	ldrh	r3, [r1, #56]	; 0x38
   10f4c:	cmp	r3, #7
   10f50:	beq	10fd8 <__assert_fail@plt+0x1e4>
   10f54:	push	{r4, lr}
   10f58:	cmp	r3, #10
   10f5c:	cmpne	r0, #10
   10f60:	bne	10f88 <__assert_fail@plt+0x194>
   10f64:	cmp	r3, #10
   10f68:	beq	10f74 <__assert_fail@plt+0x180>
   10f6c:	mov	r0, #1
   10f70:	pop	{r4, pc}
   10f74:	cmp	r0, #10
   10f78:	bne	10fe0 <__assert_fail@plt+0x1ec>
   10f7c:	mov	r0, r2
   10f80:	bl	12cd0 <__assert_fail@plt+0x1edc>
   10f84:	pop	{r4, pc}
   10f88:	cmp	r0, r3
   10f8c:	beq	10fbc <__assert_fail@plt+0x1c8>
   10f90:	ldr	ip, [r2, #48]	; 0x30
   10f94:	cmp	ip, #0
   10f98:	bne	10fbc <__assert_fail@plt+0x1c8>
   10f9c:	ldr	ip, [pc, #76]	; 10ff0 <__assert_fail@plt+0x1fc>
   10fa0:	ldr	ip, [ip]
   10fa4:	cmp	ip, #0
   10fa8:	bne	10fbc <__assert_fail@plt+0x1c8>
   10fac:	cmp	r0, #1
   10fb0:	popeq	{r4, pc}
   10fb4:	cmp	r3, #1
   10fb8:	beq	10fe8 <__assert_fail@plt+0x1f4>
   10fbc:	ldr	r3, [pc, #48]	; 10ff4 <__assert_fail@plt+0x200>
   10fc0:	ldr	r3, [r3]
   10fc4:	mov	r0, r2
   10fc8:	blx	r3
   10fcc:	pop	{r4, pc}
   10fd0:	mov	r0, #0
   10fd4:	bx	lr
   10fd8:	mov	r0, #0
   10fdc:	bx	lr
   10fe0:	mvn	r0, #0
   10fe4:	pop	{r4, pc}
   10fe8:	mvn	r0, #0
   10fec:	pop	{r4, pc}
   10ff0:	andeq	r8, r2, r0, lsr #3
   10ff4:	andeq	r8, r2, ip, lsl r1
   10ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ffc:	sub	sp, sp, #180	; 0xb4
   11000:	str	r0, [sp, #4]
   11004:	subs	r3, r1, #0
   11008:	str	r3, [sp, #52]	; 0x34
   1100c:	beq	113dc <__assert_fail@plt+0x5e8>
   11010:	ldr	r3, [pc, #1180]	; 114b4 <__assert_fail@plt+0x6c0>
   11014:	ldr	r3, [r3]
   11018:	cmp	r3, #0
   1101c:	movne	r3, #1
   11020:	strne	r3, [sp]
   11024:	bne	11054 <__assert_fail@plt+0x260>
   11028:	ldr	r3, [pc, #1160]	; 114b8 <__assert_fail@plt+0x6c4>
   1102c:	ldr	r3, [r3]
   11030:	cmp	r3, #0
   11034:	movne	r3, #1
   11038:	strne	r3, [sp]
   1103c:	bne	11054 <__assert_fail@plt+0x260>
   11040:	ldr	r3, [pc, #1140]	; 114bc <__assert_fail@plt+0x6c8>
   11044:	ldr	r3, [r3]
   11048:	adds	r3, r3, #0
   1104c:	movne	r3, #1
   11050:	str	r3, [sp]
   11054:	ldr	r4, [sp, #52]	; 0x34
   11058:	mov	r3, #0
   1105c:	str	r3, [sp, #48]	; 0x30
   11060:	mov	r8, r3
   11064:	str	r3, [sp, #28]
   11068:	str	r3, [sp, #24]
   1106c:	str	r3, [sp, #44]	; 0x2c
   11070:	str	r3, [sp, #36]	; 0x24
   11074:	mov	sl, r3
   11078:	mov	r5, r3
   1107c:	mov	fp, r3
   11080:	str	r3, [sp, #8]
   11084:	mov	r0, #0
   11088:	mov	r1, #0
   1108c:	strd	r0, [sp, #16]
   11090:	mov	r9, r3
   11094:	b	11240 <__assert_fail@plt+0x44c>
   11098:	ldr	r3, [pc, #1056]	; 114c0 <__assert_fail@plt+0x6cc>
   1109c:	ldr	r6, [r3]
   110a0:	ldr	r0, [r4, #32]
   110a4:	bl	10ca4 <strerror@plt>
   110a8:	mov	r3, r0
   110ac:	add	r2, r4, #168	; 0xa8
   110b0:	ldr	r1, [pc, #1036]	; 114c4 <__assert_fail@plt+0x6d0>
   110b4:	mov	r0, r6
   110b8:	bl	10cec <fprintf@plt>
   110bc:	mov	r3, #1
   110c0:	str	r3, [r4, #16]
   110c4:	ldr	r2, [pc, #1020]	; 114c8 <__assert_fail@plt+0x6d4>
   110c8:	str	r3, [r2]
   110cc:	b	11234 <__assert_fail@plt+0x440>
   110d0:	cmp	r3, #1
   110d4:	bne	11268 <__assert_fail@plt+0x474>
   110d8:	ldr	r3, [pc, #1004]	; 114cc <__assert_fail@plt+0x6d8>
   110dc:	ldr	r3, [r3]
   110e0:	cmp	r3, #0
   110e4:	moveq	r3, #1
   110e8:	streq	r3, [r4, #16]
   110ec:	beq	11234 <__assert_fail@plt+0x440>
   110f0:	b	11268 <__assert_fail@plt+0x474>
   110f4:	ldr	r3, [pc, #980]	; 114d0 <__assert_fail@plt+0x6dc>
   110f8:	ldr	r3, [r3]
   110fc:	cmp	r3, #0
   11100:	moveq	r3, #1
   11104:	streq	r3, [r4, #16]
   11108:	beq	11234 <__assert_fail@plt+0x440>
   1110c:	b	11268 <__assert_fail@plt+0x474>
   11110:	ldr	r0, [r4, #88]	; 0x58
   11114:	bl	10bb4 <getpwuid@plt>
   11118:	cmp	r0, #0
   1111c:	beq	11478 <__assert_fail@plt+0x684>
   11120:	ldr	r3, [r0]
   11124:	mov	r6, r3
   11128:	str	r3, [sp, #32]
   1112c:	ldr	r0, [r4, #92]	; 0x5c
   11130:	bl	10de8 <getgrgid@plt>
   11134:	cmp	r0, #0
   11138:	beq	11490 <__assert_fail@plt+0x69c>
   1113c:	ldr	r3, [r0]
   11140:	str	r3, [sp, #12]
   11144:	cmp	r6, #0
   11148:	beq	112fc <__assert_fail@plt+0x508>
   1114c:	ldr	r3, [sp, #12]
   11150:	cmp	r3, #0
   11154:	beq	1149c <__assert_fail@plt+0x6a8>
   11158:	ldr	r0, [sp, #32]
   1115c:	bl	10cc8 <strlen@plt>
   11160:	mov	r6, r0
   11164:	ldr	r3, [sp, #28]
   11168:	cmp	r3, r0
   1116c:	movlt	r3, r0
   11170:	str	r3, [sp, #28]
   11174:	ldr	r0, [sp, #12]
   11178:	bl	10cc8 <strlen@plt>
   1117c:	mov	r3, r0
   11180:	str	r0, [sp, #40]	; 0x28
   11184:	ldr	r2, [sp, #24]
   11188:	cmp	r2, r0
   1118c:	movge	r3, r2
   11190:	str	r3, [sp, #24]
   11194:	ldr	r3, [pc, #824]	; 114d4 <__assert_fail@plt+0x6e0>
   11198:	ldr	r0, [r3]
   1119c:	cmp	r0, #0
   111a0:	beq	111c0 <__assert_fail@plt+0x3cc>
   111a4:	ldr	r3, [sp, #44]	; 0x2c
   111a8:	cmp	r3, #1
   111ac:	movlt	r3, #1
   111b0:	str	r3, [sp, #44]	; 0x2c
   111b4:	ldr	r0, [sp]
   111b8:	ldr	r3, [pc, #792]	; 114d8 <__assert_fail@plt+0x6e4>
   111bc:	str	r3, [sp, #48]	; 0x30
   111c0:	ldr	r3, [sp, #40]	; 0x28
   111c4:	add	r3, r6, r3
   111c8:	add	r3, r3, #19
   111cc:	add	r0, r3, r0
   111d0:	bl	17038 <__assert_fail@plt+0x6244>
   111d4:	subs	r7, r0, #0
   111d8:	beq	11320 <__assert_fail@plt+0x52c>
   111dc:	add	r0, r7, #12
   111e0:	str	r0, [r7]
   111e4:	ldr	r1, [sp, #32]
   111e8:	bl	10c68 <strcpy@plt>
   111ec:	add	r0, r6, #13
   111f0:	add	r0, r7, r0
   111f4:	str	r0, [r7, #4]
   111f8:	ldr	r1, [sp, #12]
   111fc:	bl	10c68 <strcpy@plt>
   11200:	ldr	r3, [r4, #80]	; 0x50
   11204:	and	r3, r3, #45056	; 0xb000
   11208:	ldr	r2, [sp, #36]	; 0x24
   1120c:	ldr	r1, [sp]
   11210:	cmp	r3, #8192	; 0x2000
   11214:	moveq	r2, r1
   11218:	str	r2, [sp, #36]	; 0x24
   1121c:	ldr	r3, [pc, #688]	; 114d4 <__assert_fail@plt+0x6e0>
   11220:	ldr	r3, [r3]
   11224:	cmp	r3, #0
   11228:	bne	11354 <__assert_fail@plt+0x560>
   1122c:	str	r7, [r4, #20]
   11230:	add	r8, r8, #1
   11234:	ldr	r4, [r4, #8]
   11238:	cmp	r4, #0
   1123c:	beq	11374 <__assert_fail@plt+0x580>
   11240:	ldrh	r3, [r4, #56]	; 0x38
   11244:	cmp	r3, #10
   11248:	cmpne	r3, #7
   1124c:	beq	11098 <__assert_fail@plt+0x2a4>
   11250:	ldr	r2, [sp, #4]
   11254:	cmp	r2, #0
   11258:	beq	110d0 <__assert_fail@plt+0x2dc>
   1125c:	ldrb	r3, [r4, #168]	; 0xa8
   11260:	cmp	r3, #46	; 0x2e
   11264:	beq	110f4 <__assert_fail@plt+0x300>
   11268:	ldr	r3, [r4, #52]	; 0x34
   1126c:	cmp	r5, r3
   11270:	movcc	r5, r3
   11274:	ldr	r3, [sp]
   11278:	cmp	r3, #0
   1127c:	beq	11230 <__assert_fail@plt+0x43c>
   11280:	ldrd	r2, [r4, #128]	; 0x80
   11284:	asr	r1, r9, #31
   11288:	cmp	r9, r2
   1128c:	sbcs	r1, r1, r3
   11290:	movlt	r9, r2
   11294:	ldrd	r0, [r4, #160]	; 0xa0
   11298:	mov	r7, #0
   1129c:	cmp	r1, r7
   112a0:	cmpeq	r0, fp
   112a4:	movhi	fp, r0
   112a8:	ldr	r1, [r4, #84]	; 0x54
   112ac:	cmp	sl, r1
   112b0:	movcc	sl, r1
   112b4:	ldrd	r0, [r4, #112]	; 0x70
   112b8:	ldrd	r6, [sp, #16]
   112bc:	cmp	r6, r0
   112c0:	sbcs	ip, r7, r1
   112c4:	strdlt	r0, [sp, #16]
   112c8:	ldr	r1, [sp, #8]
   112cc:	add	r3, r1, r2
   112d0:	str	r3, [sp, #8]
   112d4:	ldr	r3, [pc, #476]	; 114b8 <__assert_fail@plt+0x6c4>
   112d8:	ldr	r3, [r3]
   112dc:	cmp	r3, #0
   112e0:	beq	11230 <__assert_fail@plt+0x43c>
   112e4:	ldr	r3, [pc, #496]	; 114dc <__assert_fail@plt+0x6e8>
   112e8:	ldr	r3, [r3]
   112ec:	cmp	r3, #0
   112f0:	movne	r3, #0
   112f4:	strne	r3, [sp, #12]
   112f8:	beq	11110 <__assert_fail@plt+0x31c>
   112fc:	add	r2, sp, #80	; 0x50
   11300:	ldr	r0, [r4, #88]	; 0x58
   11304:	mov	r1, #0
   11308:	bl	16e78 <__assert_fail@plt+0x6084>
   1130c:	str	r0, [sp, #32]
   11310:	b	1114c <__assert_fail@plt+0x358>
   11314:	ldr	r3, [sp, #32]
   11318:	str	r3, [sp, #12]
   1131c:	b	112fc <__assert_fail@plt+0x508>
   11320:	ldr	r3, [pc, #408]	; 114c0 <__assert_fail@plt+0x6cc>
   11324:	ldr	r4, [r3]
   11328:	bl	10cf8 <__errno_location@plt>
   1132c:	ldr	r0, [r0]
   11330:	bl	10ca4 <strerror@plt>
   11334:	mov	r2, r0
   11338:	ldr	r1, [pc, #416]	; 114e0 <__assert_fail@plt+0x6ec>
   1133c:	mov	r0, r4
   11340:	bl	10cec <fprintf@plt>
   11344:	mov	r2, #1
   11348:	ldr	r3, [pc, #376]	; 114c8 <__assert_fail@plt+0x6d4>
   1134c:	str	r2, [r3]
   11350:	b	113dc <__assert_fail@plt+0x5e8>
   11354:	ldr	r3, [sp, #40]	; 0x28
   11358:	add	r0, r6, r3
   1135c:	add	r0, r0, #14
   11360:	add	r0, r7, r0
   11364:	str	r0, [r7, #8]
   11368:	ldr	r1, [sp, #48]	; 0x30
   1136c:	bl	10c68 <strcpy@plt>
   11370:	b	1122c <__assert_fail@plt+0x438>
   11374:	mov	r6, sl
   11378:	cmp	r8, #0
   1137c:	beq	113dc <__assert_fail@plt+0x5e8>
   11380:	ldr	r3, [sp, #52]	; 0x34
   11384:	str	r3, [sp, #128]	; 0x80
   11388:	str	r8, [sp, #140]	; 0x8c
   1138c:	str	r5, [sp, #144]	; 0x90
   11390:	ldr	r3, [sp]
   11394:	cmp	r3, #0
   11398:	bne	113e4 <__assert_fail@plt+0x5f0>
   1139c:	ldr	r4, [pc, #320]	; 114e4 <__assert_fail@plt+0x6f0>
   113a0:	ldr	r3, [r4, #4]
   113a4:	add	r0, sp, #128	; 0x80
   113a8:	blx	r3
   113ac:	mov	r3, #1
   113b0:	str	r3, [r4, #8]
   113b4:	ldr	r3, [pc, #252]	; 114b8 <__assert_fail@plt+0x6c4>
   113b8:	ldr	r3, [r3]
   113bc:	cmp	r3, #0
   113c0:	beq	113dc <__assert_fail@plt+0x5e8>
   113c4:	ldr	r4, [sp, #52]	; 0x34
   113c8:	ldr	r0, [r4, #20]
   113cc:	bl	13034 <__assert_fail@plt+0x2240>
   113d0:	ldr	r4, [r4, #8]
   113d4:	cmp	r4, #0
   113d8:	bne	113c8 <__assert_fail@plt+0x5d4>
   113dc:	add	sp, sp, #180	; 0xb4
   113e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113e4:	ldr	r3, [sp, #36]	; 0x24
   113e8:	str	r3, [sp, #136]	; 0x88
   113ec:	ldr	r3, [sp, #8]
   113f0:	str	r3, [sp, #132]	; 0x84
   113f4:	add	r2, sp, #104	; 0x68
   113f8:	mov	r0, r9
   113fc:	asr	r1, r9, #31
   11400:	bl	16e78 <__assert_fail@plt+0x6084>
   11404:	bl	10cc8 <strlen@plt>
   11408:	str	r0, [sp, #148]	; 0x94
   1140c:	ldr	r3, [sp, #44]	; 0x2c
   11410:	str	r3, [sp, #152]	; 0x98
   11414:	ldr	r3, [sp, #24]
   11418:	str	r3, [sp, #156]	; 0x9c
   1141c:	add	r2, sp, #104	; 0x68
   11420:	mov	r0, fp
   11424:	mov	r1, r4
   11428:	bl	16e78 <__assert_fail@plt+0x6084>
   1142c:	bl	10cc8 <strlen@plt>
   11430:	str	r0, [sp, #160]	; 0xa0
   11434:	add	r2, sp, #104	; 0x68
   11438:	mov	r0, r6
   1143c:	mov	r1, r4
   11440:	bl	16e78 <__assert_fail@plt+0x6084>
   11444:	bl	10cc8 <strlen@plt>
   11448:	str	r0, [sp, #164]	; 0xa4
   1144c:	add	r2, sp, #104	; 0x68
   11450:	ldrd	r0, [sp, #16]
   11454:	bl	16e78 <__assert_fail@plt+0x6084>
   11458:	bl	10cc8 <strlen@plt>
   1145c:	str	r0, [sp, #168]	; 0xa8
   11460:	ldr	r3, [sp, #28]
   11464:	str	r3, [sp, #172]	; 0xac
   11468:	b	1139c <__assert_fail@plt+0x5a8>
   1146c:	ldr	r3, [r0]
   11470:	str	r3, [sp, #12]
   11474:	b	112fc <__assert_fail@plt+0x508>
   11478:	ldr	r0, [r4, #92]	; 0x5c
   1147c:	bl	10de8 <getgrgid@plt>
   11480:	cmp	r0, #0
   11484:	bne	1146c <__assert_fail@plt+0x678>
   11488:	mov	r3, #0
   1148c:	str	r3, [sp, #32]
   11490:	ldr	r3, [sp, #32]
   11494:	cmp	r3, #0
   11498:	beq	11314 <__assert_fail@plt+0x520>
   1149c:	add	r2, sp, #56	; 0x38
   114a0:	ldr	r0, [r4, #92]	; 0x5c
   114a4:	mov	r1, #0
   114a8:	bl	16e78 <__assert_fail@plt+0x6084>
   114ac:	str	r0, [sp, #12]
   114b0:	b	11158 <__assert_fail@plt+0x364>
   114b4:	andeq	r8, r2, r0, ror r1
   114b8:	andeq	r8, r2, ip, lsl #3
   114bc:	andeq	r8, r2, r8, asr r1
   114c0:	andeq	r8, r2, r0, lsl r1
   114c4:	andeq	r7, r1, r0, asr fp
   114c8:	andeq	r8, r2, r8, lsl #3
   114cc:	andeq	r8, r2, r0, lsr #3
   114d0:			; <UNDEFINED> instruction: 0x000281b0
   114d4:	andeq	r8, r2, r8, ror #2
   114d8:	andeq	r7, r1, ip, asr #22
   114dc:	muleq	r2, r8, r1
   114e0:	andeq	r7, r1, r8, asr fp
   114e4:	andeq	r8, r2, ip, lsl r1
   114e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114ec:	sub	sp, sp, #12
   114f0:	str	r0, [sp, #4]
   114f4:	mov	r6, r1
   114f8:	mov	r4, r2
   114fc:	ldr	r3, [pc, #556]	; 11730 <__assert_fail@plt+0x93c>
   11500:	ldr	r2, [r3]
   11504:	ldr	r3, [pc, #552]	; 11734 <__assert_fail@plt+0x940>
   11508:	cmp	r2, #0
   1150c:	moveq	r2, r3
   11510:	movne	r2, #0
   11514:	mov	r1, r4
   11518:	mov	r0, r6
   1151c:	bl	14570 <__assert_fail@plt+0x377c>
   11520:	subs	r5, r0, #0
   11524:	beq	11580 <__assert_fail@plt+0x78c>
   11528:	mov	r1, #0
   1152c:	mov	r0, r5
   11530:	bl	1510c <__assert_fail@plt+0x4318>
   11534:	mov	r1, r0
   11538:	mov	r0, #0
   1153c:	bl	10ff8 <__assert_fail@plt+0x204>
   11540:	ldr	r3, [pc, #496]	; 11738 <__assert_fail@plt+0x944>
   11544:	ldr	r6, [r3]
   11548:	cmp	r6, #0
   1154c:	bne	116fc <__assert_fail@plt+0x908>
   11550:	ldr	r3, [pc, #484]	; 1173c <__assert_fail@plt+0x948>
   11554:	ldr	r3, [r3]
   11558:	cmp	r3, #0
   1155c:	bne	1156c <__assert_fail@plt+0x778>
   11560:	and	r6, r4, #8
   11564:	cmp	r6, #0
   11568:	movne	r6, #4096	; 0x1000
   1156c:	ldr	r8, [pc, #460]	; 11740 <__assert_fail@plt+0x94c>
   11570:	ldr	sl, [pc, #460]	; 11744 <__assert_fail@plt+0x950>
   11574:	ldr	r9, [pc, #460]	; 11748 <__assert_fail@plt+0x954>
   11578:	ldr	fp, [pc, #444]	; 1173c <__assert_fail@plt+0x948>
   1157c:	b	11680 <__assert_fail@plt+0x88c>
   11580:	ldr	r3, [pc, #440]	; 11740 <__assert_fail@plt+0x94c>
   11584:	ldr	r4, [r3]
   11588:	ldr	r5, [r6]
   1158c:	bl	10cf8 <__errno_location@plt>
   11590:	ldr	r0, [r0]
   11594:	bl	10ca4 <strerror@plt>
   11598:	mov	r3, r0
   1159c:	mov	r2, r5
   115a0:	ldr	r1, [pc, #420]	; 1174c <__assert_fail@plt+0x958>
   115a4:	mov	r0, r4
   115a8:	bl	10cec <fprintf@plt>
   115ac:	mov	r2, #1
   115b0:	ldr	r3, [pc, #396]	; 11744 <__assert_fail@plt+0x950>
   115b4:	str	r2, [r3]
   115b8:	b	116fc <__assert_fail@plt+0x908>
   115bc:	ldrb	r3, [r4, #168]	; 0xa8
   115c0:	cmp	r3, #46	; 0x2e
   115c4:	beq	11640 <__assert_fail@plt+0x84c>
   115c8:	ldr	r3, [r9, #8]
   115cc:	cmp	r3, #0
   115d0:	bne	11660 <__assert_fail@plt+0x86c>
   115d4:	ldr	r3, [sp, #4]
   115d8:	cmp	r3, #1
   115dc:	ble	115f4 <__assert_fail@plt+0x800>
   115e0:	ldr	r1, [r4, #28]
   115e4:	ldr	r0, [pc, #356]	; 11750 <__assert_fail@plt+0x95c>
   115e8:	bl	10bc0 <printf@plt>
   115ec:	mov	r3, #1
   115f0:	str	r3, [r9, #8]
   115f4:	mov	r1, r6
   115f8:	mov	r0, r5
   115fc:	bl	1510c <__assert_fail@plt+0x4318>
   11600:	mov	r7, r0
   11604:	mov	r1, r0
   11608:	mov	r0, r4
   1160c:	bl	10ff8 <__assert_fail@plt+0x204>
   11610:	ldr	r3, [fp]
   11614:	clz	r3, r3
   11618:	lsr	r3, r3, #5
   1161c:	cmp	r7, #0
   11620:	moveq	r3, #0
   11624:	cmp	r3, #0
   11628:	beq	11680 <__assert_fail@plt+0x88c>
   1162c:	mov	r2, #4
   11630:	mov	r1, r4
   11634:	mov	r0, r5
   11638:	bl	150e0 <__assert_fail@plt+0x42ec>
   1163c:	b	11680 <__assert_fail@plt+0x88c>
   11640:	ldr	r3, [r4, #48]	; 0x30
   11644:	cmp	r3, #0
   11648:	beq	115c8 <__assert_fail@plt+0x7d4>
   1164c:	ldr	r3, [pc, #256]	; 11754 <__assert_fail@plt+0x960>
   11650:	ldr	r3, [r3]
   11654:	cmp	r3, #0
   11658:	beq	11680 <__assert_fail@plt+0x88c>
   1165c:	b	115c8 <__assert_fail@plt+0x7d4>
   11660:	ldr	r1, [r4, #28]
   11664:	ldr	r0, [pc, #236]	; 11758 <__assert_fail@plt+0x964>
   11668:	bl	10bc0 <printf@plt>
   1166c:	b	115f4 <__assert_fail@plt+0x800>
   11670:	add	r2, r4, #168	; 0xa8
   11674:	ldr	r1, [pc, #224]	; 1175c <__assert_fail@plt+0x968>
   11678:	ldr	r0, [r8]
   1167c:	bl	10cec <fprintf@plt>
   11680:	mov	r0, r5
   11684:	bl	14a70 <__assert_fail@plt+0x3c7c>
   11688:	subs	r4, r0, #0
   1168c:	beq	116ec <__assert_fail@plt+0x8f8>
   11690:	ldrh	r3, [r4, #56]	; 0x38
   11694:	sub	r3, r3, #1
   11698:	cmp	r3, #6
   1169c:	ldrls	pc, [pc, r3, lsl #2]
   116a0:	b	11680 <__assert_fail@plt+0x88c>
   116a4:			; <UNDEFINED> instruction: 0x000115bc
   116a8:	andeq	r1, r1, r0, ror r6
   116ac:	andeq	r1, r1, r0, lsl #13
   116b0:	andeq	r1, r1, r0, asr #13
   116b4:	andeq	r1, r1, r0, lsl #13
   116b8:	andeq	r1, r1, r0, lsl #13
   116bc:	andeq	r1, r1, r0, asr #13
   116c0:	ldr	r7, [r8]
   116c4:	ldr	r0, [r4, #32]
   116c8:	bl	10ca4 <strerror@plt>
   116cc:	mov	r3, r0
   116d0:	add	r2, r4, #168	; 0xa8
   116d4:	ldr	r1, [pc, #132]	; 11760 <__assert_fail@plt+0x96c>
   116d8:	mov	r0, r7
   116dc:	bl	10cec <fprintf@plt>
   116e0:	mov	r3, #1
   116e4:	str	r3, [sl]
   116e8:	b	11680 <__assert_fail@plt+0x88c>
   116ec:	bl	10cf8 <__errno_location@plt>
   116f0:	ldr	r0, [r0]
   116f4:	cmp	r0, #0
   116f8:	bne	11704 <__assert_fail@plt+0x910>
   116fc:	add	sp, sp, #12
   11700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11704:	ldr	r3, [pc, #52]	; 11740 <__assert_fail@plt+0x94c>
   11708:	ldr	r4, [r3]
   1170c:	bl	10ca4 <strerror@plt>
   11710:	mov	r2, r0
   11714:	ldr	r1, [pc, #72]	; 11764 <__assert_fail@plt+0x970>
   11718:	mov	r0, r4
   1171c:	bl	10cec <fprintf@plt>
   11720:	mov	r2, #1
   11724:	ldr	r3, [pc, #24]	; 11744 <__assert_fail@plt+0x950>
   11728:	str	r2, [r3]
   1172c:	b	116fc <__assert_fail@plt+0x908>
   11730:	andeq	r8, r2, ip, ror r1
   11734:	andeq	r0, r1, r4, lsr pc
   11738:	andeq	r8, r2, r0, lsr #3
   1173c:	andeq	r8, r2, ip, ror #2
   11740:	andeq	r8, r2, r0, lsl r1
   11744:	andeq	r8, r2, r8, lsl #3
   11748:	andeq	r8, r2, ip, lsl r1
   1174c:	andeq	r7, r1, r4, ror #22
   11750:	andeq	r7, r1, r0, lsl #23
   11754:			; <UNDEFINED> instruction: 0x000281b0
   11758:	andeq	r7, r1, r8, ror fp
   1175c:	andeq	r7, r1, r8, lsl #23
   11760:	andeq	r7, r1, r0, asr fp
   11764:	andeq	r7, r1, r8, lsr #23
   11768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1176c:	sub	sp, sp, #12
   11770:	mov	r4, r0
   11774:	mov	r5, r1
   11778:	mov	r3, #0
   1177c:	ldr	r2, [pc, #2008]	; 11f5c <__assert_fail@plt+0x1168>
   11780:	str	r3, [r2, #8]
   11784:	ldr	r2, [pc, #2004]	; 11f60 <__assert_fail@plt+0x116c>
   11788:	str	r3, [r2]
   1178c:	ldr	r2, [pc, #2000]	; 11f64 <__assert_fail@plt+0x1170>
   11790:	str	r3, [r2]
   11794:	ldr	r2, [pc, #1996]	; 11f68 <__assert_fail@plt+0x1174>
   11798:	str	r3, [r2]
   1179c:	ldr	r2, [pc, #1992]	; 11f6c <__assert_fail@plt+0x1178>
   117a0:	str	r3, [r2]
   117a4:	ldr	r2, [pc, #1988]	; 11f70 <__assert_fail@plt+0x117c>
   117a8:	str	r3, [r2]
   117ac:	ldr	r2, [pc, #1984]	; 11f74 <__assert_fail@plt+0x1180>
   117b0:	str	r3, [r2]
   117b4:	ldr	r2, [pc, #1980]	; 11f78 <__assert_fail@plt+0x1184>
   117b8:	str	r3, [r2]
   117bc:	ldr	r2, [pc, #1976]	; 11f7c <__assert_fail@plt+0x1188>
   117c0:	str	r3, [r2]
   117c4:	ldr	r2, [pc, #1972]	; 11f80 <__assert_fail@plt+0x118c>
   117c8:	str	r3, [r2]
   117cc:	ldr	r2, [pc, #1968]	; 11f84 <__assert_fail@plt+0x1190>
   117d0:	str	r3, [r2]
   117d4:	ldr	r2, [pc, #1964]	; 11f88 <__assert_fail@plt+0x1194>
   117d8:	str	r3, [r2]
   117dc:	ldr	r2, [pc, #1960]	; 11f8c <__assert_fail@plt+0x1198>
   117e0:	str	r3, [r2]
   117e4:	ldr	r2, [pc, #1956]	; 11f90 <__assert_fail@plt+0x119c>
   117e8:	str	r3, [r2]
   117ec:	ldr	r2, [pc, #1952]	; 11f94 <__assert_fail@plt+0x11a0>
   117f0:	str	r3, [r2]
   117f4:	ldr	r2, [pc, #1948]	; 11f98 <__assert_fail@plt+0x11a4>
   117f8:	str	r3, [r2]
   117fc:	ldr	r2, [pc, #1944]	; 11f9c <__assert_fail@plt+0x11a8>
   11800:	str	r3, [r2]
   11804:	ldr	r2, [pc, #1940]	; 11fa0 <__assert_fail@plt+0x11ac>
   11808:	str	r3, [r2]
   1180c:	ldr	r2, [pc, #1936]	; 11fa4 <__assert_fail@plt+0x11b0>
   11810:	str	r3, [r2]
   11814:	ldr	r2, [pc, #1932]	; 11fa8 <__assert_fail@plt+0x11b4>
   11818:	str	r3, [r2]
   1181c:	ldr	r2, [pc, #1928]	; 11fac <__assert_fail@plt+0x11b8>
   11820:	str	r3, [r2]
   11824:	ldr	r2, [pc, #1924]	; 11fb0 <__assert_fail@plt+0x11bc>
   11828:	str	r3, [r2]
   1182c:	ldr	r2, [pc, #1920]	; 11fb4 <__assert_fail@plt+0x11c0>
   11830:	str	r3, [r2]
   11834:	ldr	r2, [pc, #1916]	; 11fb8 <__assert_fail@plt+0x11c4>
   11838:	str	r3, [r2]
   1183c:	mov	r0, #1
   11840:	bl	10da0 <isatty@plt>
   11844:	cmp	r0, #0
   11848:	bne	119d8 <__assert_fail@plt+0xbe4>
   1184c:	mov	r2, #1
   11850:	ldr	r3, [pc, #1848]	; 11f90 <__assert_fail@plt+0x119c>
   11854:	str	r2, [r3]
   11858:	bl	10bcc <getuid@plt>
   1185c:	cmp	r0, #0
   11860:	moveq	r2, #1
   11864:	ldreq	r3, [pc, #1808]	; 11f7c <__assert_fail@plt+0x1188>
   11868:	streq	r2, [r3]
   1186c:	mov	r2, #1
   11870:	ldr	r3, [pc, #1860]	; 11fbc <__assert_fail@plt+0x11c8>
   11874:	str	r2, [r3]
   11878:	mov	r7, #20
   1187c:	ldr	r6, [pc, #1852]	; 11fc0 <__assert_fail@plt+0x11cc>
   11880:	ldr	fp, [pc, #1832]	; 11fb0 <__assert_fail@plt+0x11bc>
   11884:	ldr	r8, [pc, #1744]	; 11f5c <__assert_fail@plt+0x1168>
   11888:	ldr	sl, [pc, #1796]	; 11f94 <__assert_fail@plt+0x11a0>
   1188c:	ldr	r9, [pc, #1816]	; 11fac <__assert_fail@plt+0x11b8>
   11890:	mov	r2, r6
   11894:	mov	r1, r5
   11898:	mov	r0, r4
   1189c:	bl	15e18 <__assert_fail@plt+0x5024>
   118a0:	cmn	r0, #1
   118a4:	beq	11cd0 <__assert_fail@plt+0xedc>
   118a8:	sub	r0, r0, #49	; 0x31
   118ac:	cmp	r0, #71	; 0x47
   118b0:	ldrls	pc, [pc, r0, lsl #2]
   118b4:	b	11cc8 <__assert_fail@plt+0xed4>
   118b8:	andeq	r1, r1, r0, asr #20
   118bc:	andeq	r1, r1, r8, asr #25
   118c0:	andeq	r1, r1, r8, asr #25
   118c4:	andeq	r1, r1, r8, asr #25
   118c8:	andeq	r1, r1, r8, asr #25
   118cc:	andeq	r1, r1, r8, asr #25
   118d0:	andeq	r1, r1, r8, asr #25
   118d4:	andeq	r1, r1, r8, asr #25
   118d8:	andeq	r1, r1, r8, asr #25
   118dc:	andeq	r1, r1, r8, asr #25
   118e0:	andeq	r1, r1, r8, asr #25
   118e4:	andeq	r1, r1, r8, asr #25
   118e8:	andeq	r1, r1, r8, asr #25
   118ec:	andeq	r1, r1, r8, asr #25
   118f0:	andeq	r1, r1, r8, asr #25
   118f4:	andeq	r1, r1, r8, asr #25
   118f8:	strdeq	r1, [r1], -r0
   118fc:	andeq	r1, r1, r8, asr #25
   11900:	andeq	r1, r1, r4, ror sl
   11904:	andeq	r1, r1, r8, asr #25
   11908:	andeq	r1, r1, r8, asr #25
   1190c:	andeq	r1, r1, r0, asr #23
   11910:	andeq	r1, r1, r8, asr #25
   11914:	andeq	r1, r1, r8, asr #25
   11918:	andeq	r1, r1, r8, asr #25
   1191c:	andeq	r1, r1, r8, asr #25
   11920:	andeq	r1, r1, r8, asr #25
   11924:	ldrdeq	r1, [r1], -r0
   11928:	andeq	r1, r1, r8, asr #25
   1192c:	andeq	r1, r1, r8, asr #25
   11930:	andeq	r1, r1, r8, asr #25
   11934:	andeq	r1, r1, r8, asr #25
   11938:	andeq	r1, r1, r8, asr #25
   1193c:	ldrdeq	r1, [r1], -ip
   11940:	andeq	r1, r1, ip, lsl #25
   11944:	andeq	r1, r1, r4, lsr #25
   11948:	andeq	r1, r1, r8, asr #25
   1194c:	andeq	r1, r1, r8, asr #25
   11950:			; <UNDEFINED> instruction: 0x00011cbc
   11954:	andeq	r1, r1, r8, asr #25
   11958:	andeq	r1, r1, r8, asr #25
   1195c:	andeq	r1, r1, r8, asr #25
   11960:	andeq	r1, r1, r8, asr #25
   11964:	andeq	r1, r1, r8, asr #25
   11968:	andeq	r1, r1, r8, asr #25
   1196c:	andeq	r1, r1, r8, asr #25
   11970:	andeq	r1, r1, r8, asr #25
   11974:	andeq	r1, r1, r8, asr #25
   11978:	andeq	r1, r1, ip, ror #23
   1197c:	andeq	r1, r1, r8, asr #25
   11980:	andeq	r1, r1, r8, lsl #23
   11984:	andeq	r1, r1, r0, lsl #24
   11988:	andeq	r1, r1, r8, asr #25
   1198c:	andeq	r1, r1, ip, lsl ip
   11990:	muleq	r1, r0, r8
   11994:	andeq	r1, r1, r8, asr #25
   11998:	andeq	r1, r1, ip, lsr #24
   1199c:	andeq	r1, r1, r8, asr #25
   119a0:	andeq	r1, r1, ip, lsr ip
   119a4:	andeq	r1, r1, r8, lsr #21
   119a8:	andeq	r1, r1, r4, ror #21
   119ac:	andeq	r1, r1, ip, asr #22
   119b0:	andeq	r1, r1, ip, asr #24
   119b4:	andeq	r1, r1, ip, asr ip
   119b8:	andeq	r1, r1, ip, ror #24
   119bc:	andeq	r1, r1, ip, ror ip
   119c0:	muleq	r1, r8, ip
   119c4:			; <UNDEFINED> instruction: 0x00011cb0
   119c8:	andeq	r1, r1, r4, lsr #23
   119cc:	andeq	r1, r1, r8, asr #25
   119d0:	andeq	r1, r1, r8, asr #25
   119d4:	andeq	r1, r1, r8, lsl fp
   119d8:	ldr	r0, [pc, #1508]	; 11fc4 <__assert_fail@plt+0x11d0>
   119dc:	bl	10c80 <getenv@plt>
   119e0:	cmp	r0, #0
   119e4:	beq	11a14 <__assert_fail@plt+0xc20>
   119e8:	mov	r2, #10
   119ec:	mov	r1, #0
   119f0:	bl	10ba8 <strtol@plt>
   119f4:	ldr	r3, [pc, #1484]	; 11fc8 <__assert_fail@plt+0x11d4>
   119f8:	str	r0, [r3]
   119fc:	mov	r3, #1
   11a00:	ldr	r2, [pc, #1412]	; 11f8c <__assert_fail@plt+0x1198>
   11a04:	str	r3, [r2]
   11a08:	ldr	r2, [pc, #1372]	; 11f6c <__assert_fail@plt+0x1178>
   11a0c:	str	r3, [r2]
   11a10:	b	11858 <__assert_fail@plt+0xa64>
   11a14:	mov	r2, sp
   11a18:	ldr	r1, [pc, #1452]	; 11fcc <__assert_fail@plt+0x11d8>
   11a1c:	mov	r0, #1
   11a20:	bl	16ee0 <__assert_fail@plt+0x60ec>
   11a24:	cmp	r0, #0
   11a28:	bne	119fc <__assert_fail@plt+0xc08>
   11a2c:	ldrh	r3, [sp, #2]
   11a30:	cmp	r3, #0
   11a34:	ldrne	r2, [pc, #1420]	; 11fc8 <__assert_fail@plt+0x11d4>
   11a38:	strne	r3, [r2]
   11a3c:	b	119fc <__assert_fail@plt+0xc08>
   11a40:	mov	r2, #1
   11a44:	ldr	r3, [pc, #1348]	; 11f90 <__assert_fail@plt+0x119c>
   11a48:	str	r2, [r3]
   11a4c:	mov	r3, #0
   11a50:	ldr	r2, [pc, #1356]	; 11fa4 <__assert_fail@plt+0x11b0>
   11a54:	str	r3, [r2]
   11a58:	ldr	r2, [pc, #1304]	; 11f78 <__assert_fail@plt+0x1184>
   11a5c:	str	r3, [r2]
   11a60:	ldr	r2, [pc, #1280]	; 11f68 <__assert_fail@plt+0x1174>
   11a64:	str	r3, [r2]
   11a68:	ldr	r2, [pc, #1276]	; 11f6c <__assert_fail@plt+0x1178>
   11a6c:	str	r3, [r2]
   11a70:	b	11890 <__assert_fail@plt+0xa9c>
   11a74:	mov	r2, #1
   11a78:	ldr	r3, [pc, #1260]	; 11f6c <__assert_fail@plt+0x1178>
   11a7c:	str	r2, [r3]
   11a80:	mov	r3, #0
   11a84:	ldr	r2, [pc, #1304]	; 11fa4 <__assert_fail@plt+0x11b0>
   11a88:	str	r3, [r2]
   11a8c:	ldr	r2, [pc, #1276]	; 11f90 <__assert_fail@plt+0x119c>
   11a90:	str	r3, [r2]
   11a94:	ldr	r2, [pc, #1228]	; 11f68 <__assert_fail@plt+0x1174>
   11a98:	str	r3, [r2]
   11a9c:	ldr	r2, [pc, #1236]	; 11f78 <__assert_fail@plt+0x1184>
   11aa0:	str	r3, [r2]
   11aa4:	b	11890 <__assert_fail@plt+0xa9c>
   11aa8:	mov	r2, #1
   11aac:	ldr	r3, [pc, #1220]	; 11f78 <__assert_fail@plt+0x1184>
   11ab0:	str	r2, [r3]
   11ab4:	mov	r3, #0
   11ab8:	ldr	r2, [pc, #1220]	; 11f84 <__assert_fail@plt+0x1190>
   11abc:	str	r3, [r2]
   11ac0:	ldr	r2, [pc, #1244]	; 11fa4 <__assert_fail@plt+0x11b0>
   11ac4:	str	r3, [r2]
   11ac8:	ldr	r2, [pc, #1216]	; 11f90 <__assert_fail@plt+0x119c>
   11acc:	str	r3, [r2]
   11ad0:	ldr	r2, [pc, #1168]	; 11f68 <__assert_fail@plt+0x1174>
   11ad4:	str	r3, [r2]
   11ad8:	ldr	r2, [pc, #1164]	; 11f6c <__assert_fail@plt+0x1178>
   11adc:	str	r3, [r2]
   11ae0:	b	11890 <__assert_fail@plt+0xa9c>
   11ae4:	mov	r2, #1
   11ae8:	ldr	r3, [pc, #1204]	; 11fa4 <__assert_fail@plt+0x11b0>
   11aec:	str	r2, [r3]
   11af0:	mov	r3, #0
   11af4:	ldr	r2, [pc, #1172]	; 11f90 <__assert_fail@plt+0x119c>
   11af8:	str	r3, [r2]
   11afc:	ldr	r2, [pc, #1140]	; 11f78 <__assert_fail@plt+0x1184>
   11b00:	str	r3, [r2]
   11b04:	ldr	r2, [pc, #1116]	; 11f68 <__assert_fail@plt+0x1174>
   11b08:	str	r3, [r2]
   11b0c:	ldr	r2, [pc, #1112]	; 11f6c <__assert_fail@plt+0x1178>
   11b10:	str	r3, [r2]
   11b14:	b	11890 <__assert_fail@plt+0xa9c>
   11b18:	mov	r2, #1
   11b1c:	ldr	r3, [pc, #1092]	; 11f68 <__assert_fail@plt+0x1174>
   11b20:	str	r2, [r3]
   11b24:	mov	r3, #0
   11b28:	ldr	r2, [pc, #1140]	; 11fa4 <__assert_fail@plt+0x11b0>
   11b2c:	str	r3, [r2]
   11b30:	ldr	r2, [pc, #1112]	; 11f90 <__assert_fail@plt+0x119c>
   11b34:	str	r3, [r2]
   11b38:	ldr	r2, [pc, #1080]	; 11f78 <__assert_fail@plt+0x1184>
   11b3c:	str	r3, [r2]
   11b40:	ldr	r2, [pc, #1060]	; 11f6c <__assert_fail@plt+0x1178>
   11b44:	str	r3, [r2]
   11b48:	b	11890 <__assert_fail@plt+0xa9c>
   11b4c:	mov	r3, #1
   11b50:	ldr	r2, [pc, #1056]	; 11f78 <__assert_fail@plt+0x1184>
   11b54:	str	r3, [r2]
   11b58:	ldr	r2, [pc, #1060]	; 11f84 <__assert_fail@plt+0x1190>
   11b5c:	str	r3, [r2]
   11b60:	mov	r3, #0
   11b64:	ldr	r2, [pc, #1080]	; 11fa4 <__assert_fail@plt+0x11b0>
   11b68:	str	r3, [r2]
   11b6c:	ldr	r2, [pc, #1052]	; 11f90 <__assert_fail@plt+0x119c>
   11b70:	str	r3, [r2]
   11b74:	ldr	r2, [pc, #1004]	; 11f68 <__assert_fail@plt+0x1174>
   11b78:	str	r3, [r2]
   11b7c:	ldr	r2, [pc, #1000]	; 11f6c <__assert_fail@plt+0x1178>
   11b80:	str	r3, [r2]
   11b84:	b	11890 <__assert_fail@plt+0xa9c>
   11b88:	mov	r2, #1
   11b8c:	ldr	r3, [pc, #1044]	; 11fa8 <__assert_fail@plt+0x11b4>
   11b90:	str	r2, [r3]
   11b94:	mov	r2, #0
   11b98:	ldr	r3, [pc, #976]	; 11f70 <__assert_fail@plt+0x117c>
   11b9c:	str	r2, [r3]
   11ba0:	b	11890 <__assert_fail@plt+0xa9c>
   11ba4:	mov	r2, #1
   11ba8:	ldr	r3, [pc, #960]	; 11f70 <__assert_fail@plt+0x117c>
   11bac:	str	r2, [r3]
   11bb0:	mov	r2, #0
   11bb4:	ldr	r3, [pc, #1004]	; 11fa8 <__assert_fail@plt+0x11b4>
   11bb8:	str	r2, [r3]
   11bbc:	b	11890 <__assert_fail@plt+0xa9c>
   11bc0:	mov	r2, #1
   11bc4:	ldr	r3, [pc, #1004]	; 11fb8 <__assert_fail@plt+0x11c4>
   11bc8:	str	r2, [r3]
   11bcc:	b	11890 <__assert_fail@plt+0xa9c>
   11bd0:	bic	r7, r7, #16
   11bd4:	orr	r7, r7, #2
   11bd8:	b	11890 <__assert_fail@plt+0xa9c>
   11bdc:	mov	r2, #1
   11be0:	ldr	r3, [pc, #948]	; 11f9c <__assert_fail@plt+0x11a8>
   11be4:	str	r2, [r3]
   11be8:	b	11890 <__assert_fail@plt+0xa9c>
   11bec:	orr	r7, r7, #32
   11bf0:	mov	r2, #1
   11bf4:	ldr	r3, [pc, #896]	; 11f7c <__assert_fail@plt+0x1188>
   11bf8:	str	r2, [r3]
   11bfc:	b	11890 <__assert_fail@plt+0xa9c>
   11c00:	mov	r2, #1
   11c04:	ldr	r3, [pc, #884]	; 11f80 <__assert_fail@plt+0x118c>
   11c08:	str	r2, [r3]
   11c0c:	mov	r2, #0
   11c10:	ldr	r3, [pc, #900]	; 11f9c <__assert_fail@plt+0x11a8>
   11c14:	str	r2, [r3]
   11c18:	b	11890 <__assert_fail@plt+0xa9c>
   11c1c:	mov	r2, #1
   11c20:	ldr	r3, [pc, #864]	; 11f88 <__assert_fail@plt+0x1194>
   11c24:	str	r2, [r3]
   11c28:	b	11890 <__assert_fail@plt+0xa9c>
   11c2c:	mov	r2, #1
   11c30:	ldr	r3, [pc, #808]	; 11f60 <__assert_fail@plt+0x116c>
   11c34:	str	r2, [r3]
   11c38:	b	11890 <__assert_fail@plt+0xa9c>
   11c3c:	mov	r2, #1024	; 0x400
   11c40:	ldr	r3, [pc, #904]	; 11fd0 <__assert_fail@plt+0x11dc>
   11c44:	str	r2, [r3]
   11c48:	b	11890 <__assert_fail@plt+0xa9c>
   11c4c:	mov	r2, #1
   11c50:	ldr	r3, [pc, #780]	; 11f64 <__assert_fail@plt+0x1170>
   11c54:	str	r2, [r3]
   11c58:	b	11890 <__assert_fail@plt+0xa9c>
   11c5c:	mov	r2, #1
   11c60:	ldr	r3, [pc, #844]	; 11fb4 <__assert_fail@plt+0x11c0>
   11c64:	str	r2, [r3]
   11c68:	b	11890 <__assert_fail@plt+0xa9c>
   11c6c:	mov	r2, #1
   11c70:	ldr	r3, [pc, #788]	; 11f8c <__assert_fail@plt+0x1198>
   11c74:	str	r2, [r3]
   11c78:	b	11890 <__assert_fail@plt+0xa9c>
   11c7c:	mov	r3, #1
   11c80:	ldr	r2, [pc, #784]	; 11f98 <__assert_fail@plt+0x11a4>
   11c84:	str	r3, [r2]
   11c88:	b	11890 <__assert_fail@plt+0xa9c>
   11c8c:	mov	r3, #1
   11c90:	str	r3, [r8, #12]
   11c94:	b	11890 <__assert_fail@plt+0xa9c>
   11c98:	mov	r3, #1
   11c9c:	str	r3, [r9]
   11ca0:	b	11890 <__assert_fail@plt+0xa9c>
   11ca4:	mov	r3, #1
   11ca8:	str	r3, [sl]
   11cac:	b	11890 <__assert_fail@plt+0xa9c>
   11cb0:	mov	r3, #2
   11cb4:	str	r3, [r8, #12]
   11cb8:	b	11890 <__assert_fail@plt+0xa9c>
   11cbc:	mov	r3, #1
   11cc0:	str	r3, [fp]
   11cc4:	b	11890 <__assert_fail@plt+0xa9c>
   11cc8:	bl	12ca4 <__assert_fail@plt+0x1eb0>
   11ccc:	b	11e0c <__assert_fail@plt+0x1018>
   11cd0:	ldr	r3, [pc, #740]	; 11fbc <__assert_fail@plt+0x11c8>
   11cd4:	ldr	r1, [r3]
   11cd8:	sub	r0, r4, r1
   11cdc:	ldr	r3, [pc, #660]	; 11f78 <__assert_fail@plt+0x1184>
   11ce0:	ldr	r3, [r3]
   11ce4:	cmp	r3, #0
   11ce8:	bne	11d68 <__assert_fail@plt+0xf74>
   11cec:	ldr	r2, [pc, #620]	; 11f60 <__assert_fail@plt+0x116c>
   11cf0:	ldr	r2, [r2]
   11cf4:	cmp	r2, #0
   11cf8:	bne	11f38 <__assert_fail@plt+0x1144>
   11cfc:	ldr	r2, [pc, #680]	; 11fac <__assert_fail@plt+0x11b8>
   11d00:	ldr	r2, [r2]
   11d04:	cmp	r2, #0
   11d08:	bne	11f38 <__assert_fail@plt+0x1144>
   11d0c:	ldr	r2, [pc, #676]	; 11fb8 <__assert_fail@plt+0x11c4>
   11d10:	ldr	r2, [r2]
   11d14:	cmp	r2, #0
   11d18:	bne	11f48 <__assert_fail@plt+0x1154>
   11d1c:	ldr	r2, [pc, #656]	; 11fb4 <__assert_fail@plt+0x11c0>
   11d20:	ldr	r2, [r2]
   11d24:	cmp	r2, #0
   11d28:	bne	11d3c <__assert_fail@plt+0xf48>
   11d2c:	ldr	r2, [pc, #552]	; 11f5c <__assert_fail@plt+0x1168>
   11d30:	ldr	r2, [r2, #12]
   11d34:	cmp	r2, #0
   11d38:	orreq	r7, r7, #8
   11d3c:	ldr	r2, [pc, #572]	; 11f80 <__assert_fail@plt+0x118c>
   11d40:	ldr	r2, [r2]
   11d44:	cmp	r2, #0
   11d48:	bne	11f48 <__assert_fail@plt+0x1154>
   11d4c:	b	11d60 <__assert_fail@plt+0xf6c>
   11d50:	ldr	r2, [pc, #608]	; 11fb8 <__assert_fail@plt+0x11c4>
   11d54:	ldr	r2, [r2]
   11d58:	cmp	r2, #0
   11d5c:	bne	11f48 <__assert_fail@plt+0x1154>
   11d60:	orr	r7, r7, #1
   11d64:	b	11f48 <__assert_fail@plt+0x1154>
   11d68:	ldr	r2, [pc, #576]	; 11fb0 <__assert_fail@plt+0x11bc>
   11d6c:	ldr	r2, [r2]
   11d70:	cmp	r2, #0
   11d74:	beq	11d94 <__assert_fail@plt+0xfa0>
   11d78:	orr	r7, r7, #128	; 0x80
   11d7c:	cmp	r3, #0
   11d80:	bne	11d94 <__assert_fail@plt+0xfa0>
   11d84:	ldr	r2, [pc, #544]	; 11fac <__assert_fail@plt+0x11b8>
   11d88:	ldr	r2, [r2]
   11d8c:	cmp	r2, #0
   11d90:	beq	11da0 <__assert_fail@plt+0xfac>
   11d94:	mov	ip, #2
   11d98:	ldr	r2, [pc, #560]	; 11fd0 <__assert_fail@plt+0x11dc>
   11d9c:	str	ip, [r2]
   11da0:	ldr	r2, [pc, #496]	; 11f98 <__assert_fail@plt+0x11a4>
   11da4:	ldr	r2, [r2]
   11da8:	cmp	r2, #0
   11dac:	beq	11e70 <__assert_fail@plt+0x107c>
   11db0:	ldr	r2, [pc, #420]	; 11f5c <__assert_fail@plt+0x1168>
   11db4:	ldr	r2, [r2, #12]
   11db8:	cmp	r2, #1
   11dbc:	beq	11e24 <__assert_fail@plt+0x1030>
   11dc0:	cmp	r2, #2
   11dc4:	beq	11e34 <__assert_fail@plt+0x1040>
   11dc8:	cmp	r2, #0
   11dcc:	beq	11e14 <__assert_fail@plt+0x1020>
   11dd0:	ldr	r2, [pc, #440]	; 11f90 <__assert_fail@plt+0x119c>
   11dd4:	ldr	r2, [r2]
   11dd8:	cmp	r2, #0
   11ddc:	beq	11ee8 <__assert_fail@plt+0x10f4>
   11de0:	ldr	r2, [pc, #492]	; 11fd4 <__assert_fail@plt+0x11e0>
   11de4:	ldr	r3, [pc, #368]	; 11f5c <__assert_fail@plt+0x1168>
   11de8:	str	r2, [r3, #4]
   11dec:	cmp	r0, #0
   11df0:	mov	r2, r7
   11df4:	addne	r1, r5, r1, lsl #2
   11df8:	ldreq	r1, [pc, #472]	; 11fd8 <__assert_fail@plt+0x11e4>
   11dfc:	moveq	r0, #1
   11e00:	bl	114e8 <__assert_fail@plt+0x6f4>
   11e04:	ldr	r3, [pc, #464]	; 11fdc <__assert_fail@plt+0x11e8>
   11e08:	ldr	r0, [r3]
   11e0c:	add	sp, sp, #12
   11e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e14:	ldr	ip, [pc, #452]	; 11fe0 <__assert_fail@plt+0x11ec>
   11e18:	ldr	r2, [pc, #316]	; 11f5c <__assert_fail@plt+0x1168>
   11e1c:	str	ip, [r2]
   11e20:	b	11dd0 <__assert_fail@plt+0xfdc>
   11e24:	ldr	ip, [pc, #440]	; 11fe4 <__assert_fail@plt+0x11f0>
   11e28:	ldr	r2, [pc, #300]	; 11f5c <__assert_fail@plt+0x1168>
   11e2c:	str	ip, [r2]
   11e30:	b	11dd0 <__assert_fail@plt+0xfdc>
   11e34:	ldr	r2, [pc, #308]	; 11f70 <__assert_fail@plt+0x117c>
   11e38:	ldr	r2, [r2]
   11e3c:	cmp	r2, #0
   11e40:	ldrne	ip, [pc, #416]	; 11fe8 <__assert_fail@plt+0x11f4>
   11e44:	ldrne	r2, [pc, #272]	; 11f5c <__assert_fail@plt+0x1168>
   11e48:	strne	ip, [r2]
   11e4c:	bne	11dd0 <__assert_fail@plt+0xfdc>
   11e50:	ldr	r2, [pc, #336]	; 11fa8 <__assert_fail@plt+0x11b4>
   11e54:	ldr	r2, [r2]
   11e58:	cmp	r2, #0
   11e5c:	ldrne	ip, [pc, #392]	; 11fec <__assert_fail@plt+0x11f8>
   11e60:	ldreq	ip, [pc, #392]	; 11ff0 <__assert_fail@plt+0x11fc>
   11e64:	ldr	r2, [pc, #240]	; 11f5c <__assert_fail@plt+0x1168>
   11e68:	str	ip, [r2]
   11e6c:	b	11dd0 <__assert_fail@plt+0xfdc>
   11e70:	ldr	r2, [pc, #228]	; 11f5c <__assert_fail@plt+0x1168>
   11e74:	ldr	r2, [r2, #12]
   11e78:	cmp	r2, #1
   11e7c:	beq	11e9c <__assert_fail@plt+0x10a8>
   11e80:	cmp	r2, #2
   11e84:	beq	11eac <__assert_fail@plt+0x10b8>
   11e88:	cmp	r2, #0
   11e8c:	ldreq	ip, [pc, #352]	; 11ff4 <__assert_fail@plt+0x1200>
   11e90:	ldreq	r2, [pc, #196]	; 11f5c <__assert_fail@plt+0x1168>
   11e94:	streq	ip, [r2]
   11e98:	b	11dd0 <__assert_fail@plt+0xfdc>
   11e9c:	ldr	ip, [pc, #340]	; 11ff8 <__assert_fail@plt+0x1204>
   11ea0:	ldr	r2, [pc, #180]	; 11f5c <__assert_fail@plt+0x1168>
   11ea4:	str	ip, [r2]
   11ea8:	b	11dd0 <__assert_fail@plt+0xfdc>
   11eac:	ldr	r2, [pc, #188]	; 11f70 <__assert_fail@plt+0x117c>
   11eb0:	ldr	r2, [r2]
   11eb4:	cmp	r2, #0
   11eb8:	ldrne	ip, [pc, #316]	; 11ffc <__assert_fail@plt+0x1208>
   11ebc:	ldrne	r2, [pc, #152]	; 11f5c <__assert_fail@plt+0x1168>
   11ec0:	strne	ip, [r2]
   11ec4:	bne	11dd0 <__assert_fail@plt+0xfdc>
   11ec8:	ldr	r2, [pc, #216]	; 11fa8 <__assert_fail@plt+0x11b4>
   11ecc:	ldr	r2, [r2]
   11ed0:	cmp	r2, #0
   11ed4:	ldrne	ip, [pc, #292]	; 12000 <__assert_fail@plt+0x120c>
   11ed8:	ldreq	ip, [pc, #292]	; 12004 <__assert_fail@plt+0x1210>
   11edc:	ldr	r2, [pc, #120]	; 11f5c <__assert_fail@plt+0x1168>
   11ee0:	str	ip, [r2]
   11ee4:	b	11dd0 <__assert_fail@plt+0xfdc>
   11ee8:	ldr	r2, [pc, #120]	; 11f68 <__assert_fail@plt+0x1174>
   11eec:	ldr	r2, [r2]
   11ef0:	cmp	r2, #0
   11ef4:	ldrne	r2, [pc, #268]	; 12008 <__assert_fail@plt+0x1214>
   11ef8:	ldrne	r3, [pc, #92]	; 11f5c <__assert_fail@plt+0x1168>
   11efc:	strne	r2, [r3, #4]
   11f00:	bne	11dec <__assert_fail@plt+0xff8>
   11f04:	cmp	r3, #0
   11f08:	ldrne	r2, [pc, #252]	; 1200c <__assert_fail@plt+0x1218>
   11f0c:	ldrne	r3, [pc, #72]	; 11f5c <__assert_fail@plt+0x1168>
   11f10:	strne	r2, [r3, #4]
   11f14:	bne	11dec <__assert_fail@plt+0xff8>
   11f18:	ldr	r3, [pc, #132]	; 11fa4 <__assert_fail@plt+0x11b0>
   11f1c:	ldr	r3, [r3]
   11f20:	cmp	r3, #0
   11f24:	ldrne	r2, [pc, #228]	; 12010 <__assert_fail@plt+0x121c>
   11f28:	ldreq	r2, [pc, #228]	; 12014 <__assert_fail@plt+0x1220>
   11f2c:	ldr	r3, [pc, #40]	; 11f5c <__assert_fail@plt+0x1168>
   11f30:	str	r2, [r3, #4]
   11f34:	b	11dec <__assert_fail@plt+0xff8>
   11f38:	ldr	r2, [pc, #64]	; 11f80 <__assert_fail@plt+0x118c>
   11f3c:	ldr	r2, [r2]
   11f40:	cmp	r2, #0
   11f44:	beq	11d50 <__assert_fail@plt+0xf5c>
   11f48:	ldr	r2, [pc, #96]	; 11fb0 <__assert_fail@plt+0x11bc>
   11f4c:	ldr	r2, [r2]
   11f50:	cmp	r2, #0
   11f54:	bne	11d78 <__assert_fail@plt+0xf84>
   11f58:	b	11d84 <__assert_fail@plt+0xf90>
   11f5c:	andeq	r8, r2, ip, lsl r1
   11f60:	andeq	r8, r2, r0, ror r1
   11f64:	andeq	r8, r2, r8, ror #2
   11f68:	muleq	r2, ip, r1
   11f6c:	andeq	r8, r2, r4, ror #2
   11f70:	andeq	r8, r2, r8, ror r1
   11f74:	andeq	r8, r2, ip, lsr #3
   11f78:	andeq	r8, r2, ip, lsl #3
   11f7c:			; <UNDEFINED> instruction: 0x000281b0
   11f80:	andeq	r8, r2, r0, lsr #3
   11f84:	muleq	r2, r8, r1
   11f88:	andeq	r8, r2, ip, ror r1
   11f8c:			; <UNDEFINED> instruction: 0x000281b4
   11f90:	andeq	r8, r2, r0, ror #2
   11f94:	muleq	r2, r4, r1
   11f98:	andeq	r8, r2, r4, ror r1
   11f9c:	andeq	r8, r2, ip, ror #2
   11fa0:	andeq	r8, r2, ip, asr r1
   11fa4:			; <UNDEFINED> instruction: 0x000281b8
   11fa8:	andeq	r8, r2, r4, lsr #3
   11fac:	andeq	r8, r2, r8, asr r1
   11fb0:	andeq	r8, r2, r4, lsl #3
   11fb4:	muleq	r2, r0, r1
   11fb8:	andeq	r8, r2, r0, lsl #3
   11fbc:	andeq	r8, r2, r4, lsl #2
   11fc0:	andeq	r7, r1, r0, asr #23
   11fc4:			; <UNDEFINED> instruction: 0x00017bb8
   11fc8:	strdeq	r8, [r2], -r0
   11fcc:	andeq	r5, r0, r3, lsl r4
   11fd0:	andeq	r8, r2, r8, lsr #3
   11fd4:	muleq	r1, r4, r3
   11fd8:	strdeq	r8, [r2], -r4
   11fdc:	andeq	r8, r2, r8, lsl #3
   11fe0:	andeq	r2, r1, r4, ror #25
   11fe4:	muleq	r1, ip, lr
   11fe8:	ldrdeq	r2, [r1], -r4
   11fec:	andeq	r2, r1, r8, asr #28
   11ff0:	andeq	r2, r1, r0, ror #26
   11ff4:	ldrdeq	r2, [r1], -r0
   11ff8:	andeq	r2, r1, r8, asr lr
   11ffc:	andeq	r2, r1, r0, ror sp
   12000:	andeq	r2, r1, r4, ror #27
   12004:	strdeq	r2, [r1], -ip
   12008:	ldrdeq	r2, [r1], -r0
   1200c:	andeq	r2, r1, r8, lsr #9
   12010:	andeq	r2, r1, r0, lsl fp
   12014:	andeq	r2, r1, r4, ror #14
   12018:	push	{r4, lr}
   1201c:	and	r3, r0, #61440	; 0xf000
   12020:	cmp	r3, #16384	; 0x4000
   12024:	beq	12074 <__assert_fail@plt+0x1280>
   12028:	bls	12054 <__assert_fail@plt+0x1260>
   1202c:	cmp	r3, #40960	; 0xa000
   12030:	beq	1208c <__assert_fail@plt+0x1298>
   12034:	cmp	r3, #49152	; 0xc000
   12038:	bne	120a4 <__assert_fail@plt+0x12b0>
   1203c:	ldr	r3, [pc, #136]	; 120cc <__assert_fail@plt+0x12d8>
   12040:	ldr	r1, [r3]
   12044:	mov	r0, #61	; 0x3d
   12048:	bl	10d58 <putc@plt>
   1204c:	mov	r0, #1
   12050:	pop	{r4, pc}
   12054:	cmp	r3, #4096	; 0x1000
   12058:	bne	120a4 <__assert_fail@plt+0x12b0>
   1205c:	ldr	r3, [pc, #104]	; 120cc <__assert_fail@plt+0x12d8>
   12060:	ldr	r1, [r3]
   12064:	mov	r0, #124	; 0x7c
   12068:	bl	10d58 <putc@plt>
   1206c:	mov	r0, #1
   12070:	pop	{r4, pc}
   12074:	ldr	r3, [pc, #80]	; 120cc <__assert_fail@plt+0x12d8>
   12078:	ldr	r1, [r3]
   1207c:	mov	r0, #47	; 0x2f
   12080:	bl	10d58 <putc@plt>
   12084:	mov	r0, #1
   12088:	pop	{r4, pc}
   1208c:	ldr	r3, [pc, #56]	; 120cc <__assert_fail@plt+0x12d8>
   12090:	ldr	r1, [r3]
   12094:	mov	r0, #64	; 0x40
   12098:	bl	10d58 <putc@plt>
   1209c:	mov	r0, #1
   120a0:	pop	{r4, pc}
   120a4:	tst	r0, #73	; 0x49
   120a8:	bne	120b4 <__assert_fail@plt+0x12c0>
   120ac:	mov	r0, #0
   120b0:	pop	{r4, pc}
   120b4:	ldr	r3, [pc, #16]	; 120cc <__assert_fail@plt+0x12d8>
   120b8:	ldr	r1, [r3]
   120bc:	mov	r0, #42	; 0x2a
   120c0:	bl	10d58 <putc@plt>
   120c4:	mov	r0, #1
   120c8:	pop	{r4, pc}
   120cc:	andeq	r8, r2, r4, lsl r1
   120d0:	push	{r4, r5, r6, lr}
   120d4:	mov	r5, r0
   120d8:	mov	r6, r2
   120dc:	ldr	r3, [pc, #184]	; 1219c <__assert_fail@plt+0x13a8>
   120e0:	ldr	r4, [r3]
   120e4:	cmp	r4, #0
   120e8:	bne	1214c <__assert_fail@plt+0x1358>
   120ec:	ldr	r3, [pc, #172]	; 121a0 <__assert_fail@plt+0x13ac>
   120f0:	ldr	r3, [r3]
   120f4:	cmp	r3, #0
   120f8:	bne	12160 <__assert_fail@plt+0x136c>
   120fc:	add	r0, r5, #168	; 0xa8
   12100:	bl	12c1c <__assert_fail@plt+0x1e28>
   12104:	add	r4, r4, r0
   12108:	ldr	r3, [pc, #148]	; 121a4 <__assert_fail@plt+0x13b0>
   1210c:	ldr	r3, [r3]
   12110:	cmp	r3, #0
   12114:	bne	12138 <__assert_fail@plt+0x1344>
   12118:	ldr	r3, [pc, #136]	; 121a8 <__assert_fail@plt+0x13b4>
   1211c:	ldr	r3, [r3]
   12120:	cmp	r3, #0
   12124:	beq	12144 <__assert_fail@plt+0x1350>
   12128:	ldr	r3, [r5, #80]	; 0x50
   1212c:	and	r3, r3, #61440	; 0xf000
   12130:	cmp	r3, #16384	; 0x4000
   12134:	bne	12144 <__assert_fail@plt+0x1350>
   12138:	ldr	r0, [r5, #80]	; 0x50
   1213c:	bl	12018 <__assert_fail@plt+0x1224>
   12140:	add	r4, r4, r0
   12144:	mov	r0, r4
   12148:	pop	{r4, r5, r6, pc}
   1214c:	ldr	r2, [r0, #160]	; 0xa0
   12150:	ldr	r0, [pc, #84]	; 121ac <__assert_fail@plt+0x13b8>
   12154:	bl	10bc0 <printf@plt>
   12158:	mov	r4, r0
   1215c:	b	120ec <__assert_fail@plt+0x12f8>
   12160:	ldr	r3, [pc, #72]	; 121b0 <__assert_fail@plt+0x13bc>
   12164:	ldr	r2, [r3]
   12168:	sub	ip, r2, #1
   1216c:	ldrd	r0, [r5, #128]	; 0x80
   12170:	asr	r3, r2, #31
   12174:	adds	r0, r0, ip
   12178:	adc	r1, r1, ip, asr #31
   1217c:	bl	17894 <__assert_fail@plt+0x6aa0>
   12180:	mov	r2, r0
   12184:	mov	r3, r1
   12188:	mov	r1, r6
   1218c:	ldr	r0, [pc, #32]	; 121b4 <__assert_fail@plt+0x13c0>
   12190:	bl	10bc0 <printf@plt>
   12194:	add	r4, r4, r0
   12198:	b	120fc <__assert_fail@plt+0x1308>
   1219c:	andeq	r8, r2, r0, ror r1
   121a0:	andeq	r8, r2, r8, asr r1
   121a4:	andeq	r8, r2, r0, lsl #3
   121a8:	muleq	r2, r0, r1
   121ac:	ldrdeq	r7, [r1], -ip
   121b0:	andeq	r8, r2, r8, lsr #3
   121b4:	andeq	r7, r1, r4, ror #23
   121b8:	push	{r4, r5, r6, r7, lr}
   121bc:	sub	sp, sp, #12
   121c0:	add	r3, sp, #8
   121c4:	str	r0, [r3, #-4]!
   121c8:	mov	r0, r3
   121cc:	bl	10c08 <ctime@plt>
   121d0:	mov	r6, r0
   121d4:	add	r4, r0, #3
   121d8:	add	r7, r0, #10
   121dc:	ldr	r5, [pc, #196]	; 122a8 <__assert_fail@plt+0x14b4>
   121e0:	ldr	r1, [r5]
   121e4:	ldrb	r0, [r4, #1]!
   121e8:	bl	10d58 <putc@plt>
   121ec:	cmp	r4, r7
   121f0:	bne	121e0 <__assert_fail@plt+0x13ec>
   121f4:	ldr	r3, [pc, #176]	; 122ac <__assert_fail@plt+0x14b8>
   121f8:	ldr	r3, [r3]
   121fc:	cmp	r3, #0
   12200:	beq	12238 <__assert_fail@plt+0x1444>
   12204:	add	r6, r6, #23
   12208:	ldr	r5, [pc, #152]	; 122a8 <__assert_fail@plt+0x14b4>
   1220c:	ldr	r1, [r5]
   12210:	ldrb	r0, [r4, #1]!
   12214:	bl	10d58 <putc@plt>
   12218:	cmp	r6, r4
   1221c:	bne	1220c <__assert_fail@plt+0x1418>
   12220:	ldr	r3, [pc, #128]	; 122a8 <__assert_fail@plt+0x14b4>
   12224:	ldr	r1, [r3]
   12228:	mov	r0, #32
   1222c:	bl	10d58 <putc@plt>
   12230:	add	sp, sp, #12
   12234:	pop	{r4, r5, r6, r7, pc}
   12238:	ldr	r5, [sp, #4]
   1223c:	add	r5, r5, #15663104	; 0xef0000
   12240:	add	r5, r5, #61696	; 0xf100
   12244:	mov	r0, #0
   12248:	bl	10bfc <time@plt>
   1224c:	cmp	r5, r0
   12250:	ble	12274 <__assert_fail@plt+0x1480>
   12254:	add	r6, r6, #15
   12258:	ldr	r5, [pc, #72]	; 122a8 <__assert_fail@plt+0x14b4>
   1225c:	ldr	r1, [r5]
   12260:	ldrb	r0, [r4, #1]!
   12264:	bl	10d58 <putc@plt>
   12268:	cmp	r4, r6
   1226c:	bne	1225c <__assert_fail@plt+0x1468>
   12270:	b	12220 <__assert_fail@plt+0x142c>
   12274:	ldr	r3, [pc, #44]	; 122a8 <__assert_fail@plt+0x14b4>
   12278:	ldr	r1, [r3]
   1227c:	mov	r0, #32
   12280:	bl	10d58 <putc@plt>
   12284:	add	r4, r6, #19
   12288:	add	r6, r6, #23
   1228c:	ldr	r5, [pc, #20]	; 122a8 <__assert_fail@plt+0x14b4>
   12290:	ldr	r1, [r5]
   12294:	ldrb	r0, [r4, #1]!
   12298:	bl	10d58 <putc@plt>
   1229c:	cmp	r4, r6
   122a0:	bne	12290 <__assert_fail@plt+0x149c>
   122a4:	b	12220 <__assert_fail@plt+0x142c>
   122a8:	andeq	r8, r2, r4, lsl r1
   122ac:	muleq	r2, r4, r1
   122b0:	push	{r4, lr}
   122b4:	sub	sp, sp, #8192	; 0x2000
   122b8:	sub	sp, sp, #8
   122bc:	ldr	r3, [r0, #48]	; 0x30
   122c0:	cmp	r3, #0
   122c4:	bne	12324 <__assert_fail@plt+0x1530>
   122c8:	add	r3, r0, #168	; 0xa8
   122cc:	ldr	r2, [pc, #168]	; 1237c <__assert_fail@plt+0x1588>
   122d0:	mov	r1, #4096	; 0x1000
   122d4:	add	r0, sp, #4096	; 0x1000
   122d8:	add	r0, r0, #8
   122dc:	bl	10d04 <snprintf@plt>
   122e0:	ldr	r2, [pc, #152]	; 12380 <__assert_fail@plt+0x158c>
   122e4:	add	r1, sp, #8
   122e8:	add	r0, sp, #4096	; 0x1000
   122ec:	add	r0, r0, #8
   122f0:	bl	10c44 <readlink@plt>
   122f4:	cmn	r0, #1
   122f8:	beq	1234c <__assert_fail@plt+0x1558>
   122fc:	add	r4, sp, #8
   12300:	mov	r3, #0
   12304:	strb	r3, [r4, r0]
   12308:	ldr	r0, [pc, #116]	; 12384 <__assert_fail@plt+0x1590>
   1230c:	bl	10bc0 <printf@plt>
   12310:	mov	r0, r4
   12314:	bl	12c1c <__assert_fail@plt+0x1e28>
   12318:	add	sp, sp, #8192	; 0x2000
   1231c:	add	sp, sp, #8
   12320:	pop	{r4, pc}
   12324:	ldr	r3, [r0, #4]
   12328:	ldr	r3, [r3, #24]
   1232c:	add	r0, r0, #168	; 0xa8
   12330:	str	r0, [sp]
   12334:	ldr	r2, [pc, #76]	; 12388 <__assert_fail@plt+0x1594>
   12338:	mov	r1, #4096	; 0x1000
   1233c:	add	r0, sp, #4096	; 0x1000
   12340:	add	r0, r0, #8
   12344:	bl	10d04 <snprintf@plt>
   12348:	b	122e0 <__assert_fail@plt+0x14ec>
   1234c:	ldr	r3, [pc, #56]	; 1238c <__assert_fail@plt+0x1598>
   12350:	ldr	r4, [r3]
   12354:	bl	10cf8 <__errno_location@plt>
   12358:	ldr	r0, [r0]
   1235c:	bl	10ca4 <strerror@plt>
   12360:	mov	r3, r0
   12364:	add	r2, sp, #4096	; 0x1000
   12368:	add	r2, r2, #8
   1236c:	ldr	r1, [pc, #28]	; 12390 <__assert_fail@plt+0x159c>
   12370:	mov	r0, r4
   12374:	bl	10cec <fprintf@plt>
   12378:	b	12318 <__assert_fail@plt+0x1524>
   1237c:	andeq	r7, r1, r0, ror #22
   12380:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12384:	andeq	r7, r1, r4, lsl #24
   12388:	andeq	r7, r1, ip, ror #23
   1238c:	andeq	r8, r2, r0, lsl r1
   12390:	strdeq	r7, [r1], -r4
   12394:	push	{r4, r5, r6, r7, r8, lr}
   12398:	ldr	r4, [r0]
   1239c:	cmp	r4, #0
   123a0:	popeq	{r4, r5, r6, r7, r8, pc}
   123a4:	mov	r5, r0
   123a8:	ldr	r7, [pc, #64]	; 123f0 <__assert_fail@plt+0x15fc>
   123ac:	mov	r6, #10
   123b0:	b	123c0 <__assert_fail@plt+0x15cc>
   123b4:	ldr	r4, [r4, #8]
   123b8:	cmp	r4, #0
   123bc:	beq	123ec <__assert_fail@plt+0x15f8>
   123c0:	ldr	r3, [r4, #16]
   123c4:	cmp	r3, #1
   123c8:	beq	123b4 <__assert_fail@plt+0x15c0>
   123cc:	ldr	r2, [r5, #20]
   123d0:	ldr	r1, [r5, #32]
   123d4:	mov	r0, r4
   123d8:	bl	120d0 <__assert_fail@plt+0x12dc>
   123dc:	ldr	r1, [r7]
   123e0:	mov	r0, r6
   123e4:	bl	10d58 <putc@plt>
   123e8:	b	123b4 <__assert_fail@plt+0x15c0>
   123ec:	pop	{r4, r5, r6, r7, r8, pc}
   123f0:	andeq	r8, r2, r4, lsl r1
   123f4:	push	{r4, r5, r6, lr}
   123f8:	mov	r5, r1
   123fc:	ldr	r1, [r0, #16]
   12400:	ldr	r3, [pc, #140]	; 12494 <__assert_fail@plt+0x16a0>
   12404:	ldr	r3, [r3]
   12408:	cmp	r3, #0
   1240c:	ldrne	r3, [r0, #32]
   12410:	addne	r3, r3, #1
   12414:	addne	r1, r1, r3
   12418:	ldr	r3, [pc, #120]	; 12498 <__assert_fail@plt+0x16a4>
   1241c:	ldr	r3, [r3]
   12420:	cmp	r3, #0
   12424:	ldrne	r3, [r0, #20]
   12428:	addne	r3, r3, #1
   1242c:	addne	r1, r1, r3
   12430:	ldr	r3, [pc, #100]	; 1249c <__assert_fail@plt+0x16a8>
   12434:	ldr	r3, [r3]
   12438:	cmp	r3, #0
   1243c:	bne	12450 <__assert_fail@plt+0x165c>
   12440:	ldr	r3, [pc, #88]	; 124a0 <__assert_fail@plt+0x16ac>
   12444:	ldr	r3, [r3]
   12448:	cmp	r3, #0
   1244c:	beq	12454 <__assert_fail@plt+0x1660>
   12450:	add	r1, r1, #1
   12454:	add	r1, r1, #1
   12458:	ldr	r3, [pc, #68]	; 124a4 <__assert_fail@plt+0x16b0>
   1245c:	ldr	r4, [r3]
   12460:	add	r4, r4, #1
   12464:	cmp	r4, r1, lsl #1
   12468:	blt	12488 <__assert_fail@plt+0x1694>
   1246c:	mov	r0, r4
   12470:	bl	17654 <__assert_fail@plt+0x6860>
   12474:	mov	r1, r0
   12478:	str	r0, [r5]
   1247c:	mov	r0, r4
   12480:	bl	17654 <__assert_fail@plt+0x6860>
   12484:	pop	{r4, r5, r6, pc}
   12488:	bl	12394 <__assert_fail@plt+0x15a0>
   1248c:	mov	r0, #0
   12490:	pop	{r4, r5, r6, pc}
   12494:	andeq	r8, r2, r0, ror r1
   12498:	andeq	r8, r2, r8, asr r1
   1249c:	andeq	r8, r2, r0, lsl #3
   124a0:	muleq	r2, r0, r1
   124a4:	strdeq	r8, [r2], -r0
   124a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124ac:	sub	sp, sp, #44	; 0x2c
   124b0:	mov	r5, r0
   124b4:	ldr	r3, [r0]
   124b8:	ldr	r3, [r3, #48]	; 0x30
   124bc:	cmp	r3, #0
   124c0:	beq	12508 <__assert_fail@plt+0x1714>
   124c4:	ldr	r3, [pc, #592]	; 1271c <__assert_fail@plt+0x1928>
   124c8:	ldr	r3, [r3]
   124cc:	cmp	r3, #0
   124d0:	bne	124e4 <__assert_fail@plt+0x16f0>
   124d4:	ldr	r3, [pc, #580]	; 12720 <__assert_fail@plt+0x192c>
   124d8:	ldr	r3, [r3]
   124dc:	cmp	r3, #0
   124e0:	beq	12508 <__assert_fail@plt+0x1714>
   124e4:	ldr	r3, [pc, #568]	; 12724 <__assert_fail@plt+0x1930>
   124e8:	ldr	r1, [r3]
   124ec:	sub	r0, r1, #1
   124f0:	ldr	r3, [r5, #4]
   124f4:	add	r0, r0, r3
   124f8:	bl	17448 <__assert_fail@plt+0x6654>
   124fc:	mov	r1, r0
   12500:	ldr	r0, [pc, #544]	; 12728 <__assert_fail@plt+0x1934>
   12504:	bl	10bc0 <printf@plt>
   12508:	ldr	r4, [r5]
   1250c:	cmp	r4, #0
   12510:	beq	12714 <__assert_fail@plt+0x1920>
   12514:	ldr	fp, [pc, #528]	; 1272c <__assert_fail@plt+0x1938>
   12518:	ldr	sl, [pc, #512]	; 12720 <__assert_fail@plt+0x192c>
   1251c:	ldr	r9, [pc, #524]	; 12730 <__assert_fail@plt+0x193c>
   12520:	ldr	r8, [pc, #524]	; 12734 <__assert_fail@plt+0x1940>
   12524:	ldr	r7, [pc, #524]	; 12738 <__assert_fail@plt+0x1944>
   12528:	b	125fc <__assert_fail@plt+0x1808>
   1252c:	ldr	r2, [r4, #160]	; 0xa0
   12530:	ldr	r1, [r5, #32]
   12534:	ldr	r0, [pc, #512]	; 1273c <__assert_fail@plt+0x1948>
   12538:	bl	10bc0 <printf@plt>
   1253c:	b	12614 <__assert_fail@plt+0x1820>
   12540:	ldr	r3, [pc, #476]	; 12724 <__assert_fail@plt+0x1930>
   12544:	ldr	r2, [r3]
   12548:	sub	ip, r2, #1
   1254c:	ldrd	r0, [r4, #128]	; 0x80
   12550:	asr	r3, r2, #31
   12554:	adds	r0, r0, ip
   12558:	adc	r1, r1, ip, asr #31
   1255c:	bl	17894 <__assert_fail@plt+0x6aa0>
   12560:	mov	r2, r0
   12564:	mov	r3, r1
   12568:	ldr	r1, [r5, #20]
   1256c:	ldr	r0, [pc, #460]	; 12740 <__assert_fail@plt+0x194c>
   12570:	bl	10bc0 <printf@plt>
   12574:	b	12620 <__assert_fail@plt+0x182c>
   12578:	ldr	r2, [r6, #8]
   1257c:	ldr	r1, [r5, #24]
   12580:	ldr	r0, [pc, #444]	; 12744 <__assert_fail@plt+0x1950>
   12584:	bl	10bc0 <printf@plt>
   12588:	b	12670 <__assert_fail@plt+0x187c>
   1258c:	ldr	r2, [r4, #96]	; 0x60
   12590:	lsr	r1, r2, #8
   12594:	uxtb	r2, r2
   12598:	uxtb	r1, r1
   1259c:	ldr	r0, [pc, #420]	; 12748 <__assert_fail@plt+0x1954>
   125a0:	bl	10bc0 <printf@plt>
   125a4:	b	126ac <__assert_fail@plt+0x18b8>
   125a8:	ldrd	r2, [r4, #112]	; 0x70
   125ac:	ldr	r1, [r5, #40]	; 0x28
   125b0:	ldr	r0, [pc, #392]	; 12740 <__assert_fail@plt+0x194c>
   125b4:	bl	10bc0 <printf@plt>
   125b8:	b	126ac <__assert_fail@plt+0x18b8>
   125bc:	ldr	r0, [r4, #136]	; 0x88
   125c0:	bl	121b8 <__assert_fail@plt+0x13c4>
   125c4:	b	126d0 <__assert_fail@plt+0x18dc>
   125c8:	ldr	r0, [r4, #80]	; 0x50
   125cc:	bl	12018 <__assert_fail@plt+0x1224>
   125d0:	ldr	r3, [r4, #80]	; 0x50
   125d4:	and	r3, r3, #61440	; 0xf000
   125d8:	cmp	r3, #40960	; 0xa000
   125dc:	beq	12708 <__assert_fail@plt+0x1914>
   125e0:	ldr	r3, [pc, #356]	; 1274c <__assert_fail@plt+0x1958>
   125e4:	ldr	r1, [r3]
   125e8:	mov	r0, #10
   125ec:	bl	10d58 <putc@plt>
   125f0:	ldr	r4, [r4, #8]
   125f4:	cmp	r4, #0
   125f8:	beq	12714 <__assert_fail@plt+0x1920>
   125fc:	ldr	r3, [r4, #16]
   12600:	cmp	r3, #1
   12604:	beq	125f0 <__assert_fail@plt+0x17fc>
   12608:	ldr	r3, [fp]
   1260c:	cmp	r3, #0
   12610:	bne	1252c <__assert_fail@plt+0x1738>
   12614:	ldr	r3, [sl]
   12618:	cmp	r3, #0
   1261c:	bne	12540 <__assert_fail@plt+0x174c>
   12620:	add	r1, sp, #20
   12624:	ldr	r0, [r4, #80]	; 0x50
   12628:	bl	12eac <__assert_fail@plt+0x20b8>
   1262c:	ldr	r6, [r4, #20]
   12630:	ldr	r3, [r4, #84]	; 0x54
   12634:	ldr	r2, [r6, #4]
   12638:	str	r2, [sp, #12]
   1263c:	ldr	r2, [r5, #28]
   12640:	str	r2, [sp, #8]
   12644:	ldr	r2, [r6]
   12648:	str	r2, [sp, #4]
   1264c:	ldr	r2, [r5, #44]	; 0x2c
   12650:	str	r2, [sp]
   12654:	ldr	r2, [r5, #36]	; 0x24
   12658:	add	r1, sp, #20
   1265c:	ldr	r0, [pc, #236]	; 12750 <__assert_fail@plt+0x195c>
   12660:	bl	10bc0 <printf@plt>
   12664:	ldr	r3, [r9]
   12668:	cmp	r3, #0
   1266c:	bne	12578 <__assert_fail@plt+0x1784>
   12670:	ldr	r3, [r4, #80]	; 0x50
   12674:	and	r3, r3, #45056	; 0xb000
   12678:	cmp	r3, #8192	; 0x2000
   1267c:	beq	1258c <__assert_fail@plt+0x1798>
   12680:	ldr	r3, [r5, #8]
   12684:	cmp	r3, #0
   12688:	beq	125a8 <__assert_fail@plt+0x17b4>
   1268c:	ldr	r1, [r5, #40]	; 0x28
   12690:	ldrd	r2, [r4, #112]	; 0x70
   12694:	strd	r2, [sp]
   12698:	mov	r3, r1
   1269c:	ldr	r2, [pc, #176]	; 12754 <__assert_fail@plt+0x1960>
   126a0:	rsb	r1, r1, #8
   126a4:	ldr	r0, [pc, #172]	; 12758 <__assert_fail@plt+0x1964>
   126a8:	bl	10bc0 <printf@plt>
   126ac:	ldr	r3, [r8]
   126b0:	cmp	r3, #0
   126b4:	bne	125bc <__assert_fail@plt+0x17c8>
   126b8:	ldr	r3, [pc, #156]	; 1275c <__assert_fail@plt+0x1968>
   126bc:	ldr	r3, [r3]
   126c0:	cmp	r3, #0
   126c4:	ldrne	r0, [r4, #152]	; 0x98
   126c8:	ldreq	r0, [r4, #144]	; 0x90
   126cc:	bl	121b8 <__assert_fail@plt+0x13c4>
   126d0:	add	r0, r4, #168	; 0xa8
   126d4:	bl	12c1c <__assert_fail@plt+0x1e28>
   126d8:	ldr	r3, [r7]
   126dc:	cmp	r3, #0
   126e0:	bne	125c8 <__assert_fail@plt+0x17d4>
   126e4:	ldr	r3, [pc, #116]	; 12760 <__assert_fail@plt+0x196c>
   126e8:	ldr	r3, [r3]
   126ec:	cmp	r3, #0
   126f0:	beq	125d0 <__assert_fail@plt+0x17dc>
   126f4:	ldr	r3, [r4, #80]	; 0x50
   126f8:	and	r3, r3, #61440	; 0xf000
   126fc:	cmp	r3, #16384	; 0x4000
   12700:	bne	125d0 <__assert_fail@plt+0x17dc>
   12704:	b	125c8 <__assert_fail@plt+0x17d4>
   12708:	mov	r0, r4
   1270c:	bl	122b0 <__assert_fail@plt+0x14bc>
   12710:	b	125e0 <__assert_fail@plt+0x17ec>
   12714:	add	sp, sp, #44	; 0x2c
   12718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1271c:	andeq	r8, r2, ip, lsl #3
   12720:	andeq	r8, r2, r8, asr r1
   12724:	andeq	r8, r2, r8, lsr #3
   12728:	andeq	r7, r1, ip, lsl #24
   1272c:	andeq	r8, r2, r0, ror r1
   12730:	andeq	r8, r2, r8, ror #2
   12734:	andeq	r8, r2, r8, ror r1
   12738:	andeq	r8, r2, r0, lsl #3
   1273c:	ldrdeq	r7, [r1], -ip
   12740:	andeq	r7, r1, r4, ror #23
   12744:	andeq	r7, r1, ip, lsr #24
   12748:	andeq	r7, r1, r4, lsr ip
   1274c:	andeq	r8, r2, r4, lsl r1
   12750:	andeq	r7, r1, r8, lsl ip
   12754:	andeq	r7, r1, ip, asr #27
   12758:	andeq	r7, r1, r0, asr #24
   1275c:	andeq	r8, r2, r4, lsr #3
   12760:	muleq	r2, r0, r1
   12764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12768:	sub	sp, sp, #36	; 0x24
   1276c:	mov	sl, r0
   12770:	add	r1, sp, #28
   12774:	bl	123f4 <__assert_fail@plt+0x1600>
   12778:	subs	r3, r0, #0
   1277c:	str	r3, [sp, #12]
   12780:	beq	128e8 <__assert_fail@plt+0x1af4>
   12784:	ldr	r1, [sl, #12]
   12788:	ldr	r3, [pc, #540]	; 129ac <__assert_fail@plt+0x1bb8>
   1278c:	ldr	r3, [r3]
   12790:	cmp	r1, r3
   12794:	bgt	1288c <__assert_fail@plt+0x1a98>
   12798:	ldr	r3, [sl]
   1279c:	cmp	r3, #0
   127a0:	beq	12994 <__assert_fail@plt+0x1ba0>
   127a4:	ldr	r2, [pc, #516]	; 129b0 <__assert_fail@plt+0x1bbc>
   127a8:	ldr	r1, [r2]
   127ac:	mov	r2, #0
   127b0:	ldr	r0, [r3, #16]
   127b4:	cmp	r0, #1
   127b8:	strne	r3, [r1, r2, lsl #2]
   127bc:	addne	r2, r2, #1
   127c0:	ldr	r3, [r3, #8]
   127c4:	cmp	r3, #0
   127c8:	bne	127b0 <__assert_fail@plt+0x19bc>
   127cc:	mov	r5, r2
   127d0:	str	r2, [sp, #8]
   127d4:	ldr	r4, [sp, #28]
   127d8:	mov	r1, r4
   127dc:	mov	r0, r2
   127e0:	bl	17654 <__assert_fail@plt+0x6860>
   127e4:	mov	r6, r0
   127e8:	str	r0, [sp, #4]
   127ec:	mov	r1, r4
   127f0:	mov	r0, r5
   127f4:	bl	17874 <__assert_fail@plt+0x6a80>
   127f8:	cmp	r1, #0
   127fc:	movne	r3, r6
   12800:	addne	r3, r3, #1
   12804:	strne	r3, [sp, #4]
   12808:	ldr	r3, [sl]
   1280c:	ldr	r3, [r3, #48]	; 0x30
   12810:	cmp	r3, #0
   12814:	beq	1285c <__assert_fail@plt+0x1a68>
   12818:	ldr	r3, [pc, #404]	; 129b4 <__assert_fail@plt+0x1bc0>
   1281c:	ldr	r3, [r3]
   12820:	cmp	r3, #0
   12824:	bne	12838 <__assert_fail@plt+0x1a44>
   12828:	ldr	r3, [pc, #392]	; 129b8 <__assert_fail@plt+0x1bc4>
   1282c:	ldr	r3, [r3]
   12830:	cmp	r3, #0
   12834:	beq	1285c <__assert_fail@plt+0x1a68>
   12838:	ldr	r3, [pc, #380]	; 129bc <__assert_fail@plt+0x1bc8>
   1283c:	ldr	r1, [r3]
   12840:	sub	r0, r1, #1
   12844:	ldr	r3, [sl, #4]
   12848:	add	r0, r0, r3
   1284c:	bl	17448 <__assert_fail@plt+0x6654>
   12850:	mov	r1, r0
   12854:	ldr	r0, [pc, #356]	; 129c0 <__assert_fail@plt+0x1bcc>
   12858:	bl	10bc0 <printf@plt>
   1285c:	ldr	r3, [sp, #4]
   12860:	cmp	r3, #0
   12864:	ble	128e8 <__assert_fail@plt+0x1af4>
   12868:	lsl	r3, r3, #2
   1286c:	str	r3, [sp, #16]
   12870:	mov	r3, #0
   12874:	str	r3, [sp, #20]
   12878:	ldr	fp, [pc, #304]	; 129b0 <__assert_fail@plt+0x1bbc>
   1287c:	ldr	r3, [sp, #12]
   12880:	add	r6, r3, #1
   12884:	ldr	r5, [pc, #312]	; 129c4 <__assert_fail@plt+0x1bd0>
   12888:	b	12980 <__assert_fail@plt+0x1b8c>
   1288c:	lsl	r1, r1, #2
   12890:	ldr	r3, [pc, #280]	; 129b0 <__assert_fail@plt+0x1bbc>
   12894:	ldr	r0, [r3]
   12898:	bl	17068 <__assert_fail@plt+0x6274>
   1289c:	cmp	r0, #0
   128a0:	beq	128bc <__assert_fail@plt+0x1ac8>
   128a4:	ldr	r2, [sl, #12]
   128a8:	ldr	r3, [pc, #252]	; 129ac <__assert_fail@plt+0x1bb8>
   128ac:	str	r2, [r3]
   128b0:	ldr	r3, [pc, #248]	; 129b0 <__assert_fail@plt+0x1bbc>
   128b4:	str	r0, [r3]
   128b8:	b	12798 <__assert_fail@plt+0x19a4>
   128bc:	ldr	r3, [pc, #260]	; 129c8 <__assert_fail@plt+0x1bd4>
   128c0:	ldr	r4, [r3]
   128c4:	bl	10cf8 <__errno_location@plt>
   128c8:	ldr	r0, [r0]
   128cc:	bl	10ca4 <strerror@plt>
   128d0:	mov	r2, r0
   128d4:	ldr	r1, [pc, #240]	; 129cc <__assert_fail@plt+0x1bd8>
   128d8:	mov	r0, r4
   128dc:	bl	10cec <fprintf@plt>
   128e0:	mov	r0, sl
   128e4:	bl	12394 <__assert_fail@plt+0x15a0>
   128e8:	add	sp, sp, #36	; 0x24
   128ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128f0:	ldr	r3, [sp, #16]
   128f4:	add	r9, r9, r3
   128f8:	ldr	r2, [sl, #20]
   128fc:	ldr	r1, [sl, #32]
   12900:	ldr	r3, [fp]
   12904:	ldr	r0, [r3, r9]
   12908:	bl	120d0 <__assert_fail@plt+0x12dc>
   1290c:	ldr	r3, [sp, #4]
   12910:	add	r7, r7, r3
   12914:	ldr	r3, [sp, #8]
   12918:	cmp	r7, r3
   1291c:	bge	1295c <__assert_fail@plt+0x1b68>
   12920:	add	r8, r8, #1
   12924:	ldr	r3, [sp, #28]
   12928:	cmp	r8, r3
   1292c:	beq	1295c <__assert_fail@plt+0x1b68>
   12930:	add	r4, r0, #1
   12934:	ldr	r3, [sp, #12]
   12938:	cmp	r3, r0
   1293c:	ble	128f0 <__assert_fail@plt+0x1afc>
   12940:	ldr	r1, [r5]
   12944:	mov	r0, #32
   12948:	bl	10d58 <putc@plt>
   1294c:	add	r4, r4, #1
   12950:	cmp	r6, r4
   12954:	bne	12940 <__assert_fail@plt+0x1b4c>
   12958:	b	128f0 <__assert_fail@plt+0x1afc>
   1295c:	ldr	r1, [r5]
   12960:	mov	r0, #10
   12964:	bl	10d58 <putc@plt>
   12968:	ldr	r3, [sp, #20]
   1296c:	add	r3, r3, #1
   12970:	str	r3, [sp, #20]
   12974:	ldr	r2, [sp, #4]
   12978:	cmp	r2, r3
   1297c:	beq	128e8 <__assert_fail@plt+0x1af4>
   12980:	ldr	r3, [sp, #20]
   12984:	lsl	r9, r3, #2
   12988:	mov	r7, r3
   1298c:	mov	r8, #0
   12990:	b	128f8 <__assert_fail@plt+0x1b04>
   12994:	ldr	r1, [sp, #28]
   12998:	mov	r0, #0
   1299c:	bl	17654 <__assert_fail@plt+0x6860>
   129a0:	str	r0, [sp, #4]
   129a4:	str	r0, [sp, #8]
   129a8:	b	12808 <__assert_fail@plt+0x1a14>
   129ac:	andeq	r8, r2, r0, lsl #2
   129b0:	andeq	r8, r2, ip, lsr #2
   129b4:	andeq	r8, r2, ip, lsl #3
   129b8:	andeq	r8, r2, r8, asr r1
   129bc:	andeq	r8, r2, r8, lsr #3
   129c0:	andeq	r7, r1, ip, lsl #24
   129c4:	andeq	r8, r2, r4, lsl r1
   129c8:	andeq	r8, r2, r0, lsl r1
   129cc:	andeq	r7, r1, ip, asr #24
   129d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d4:	sub	sp, sp, #12
   129d8:	mov	sl, r0
   129dc:	add	r1, sp, #4
   129e0:	bl	123f4 <__assert_fail@plt+0x1600>
   129e4:	subs	fp, r0, #0
   129e8:	beq	12af4 <__assert_fail@plt+0x1d00>
   129ec:	ldr	r3, [sl]
   129f0:	ldr	r3, [r3, #48]	; 0x30
   129f4:	cmp	r3, #0
   129f8:	beq	12a44 <__assert_fail@plt+0x1c50>
   129fc:	ldr	r3, [pc, #248]	; 12afc <__assert_fail@plt+0x1d08>
   12a00:	ldr	r3, [r3]
   12a04:	cmp	r3, #0
   12a08:	bne	12a1c <__assert_fail@plt+0x1c28>
   12a0c:	ldr	r3, [pc, #236]	; 12b00 <__assert_fail@plt+0x1d0c>
   12a10:	ldr	r3, [r3]
   12a14:	cmp	r3, #0
   12a18:	beq	12a44 <__assert_fail@plt+0x1c50>
   12a1c:	ldr	r3, [pc, #224]	; 12b04 <__assert_fail@plt+0x1d10>
   12a20:	ldr	r1, [r3]
   12a24:	sub	r0, r1, #1
   12a28:	ldr	r3, [sl, #4]
   12a2c:	add	r0, r0, r3
   12a30:	bl	17448 <__assert_fail@plt+0x6654>
   12a34:	mov	r2, r0
   12a38:	mov	r3, #0
   12a3c:	ldr	r0, [pc, #196]	; 12b08 <__assert_fail@plt+0x1d14>
   12a40:	bl	10bc0 <printf@plt>
   12a44:	ldr	r5, [sl]
   12a48:	cmp	r5, #0
   12a4c:	beq	12ae4 <__assert_fail@plt+0x1cf0>
   12a50:	mov	r9, #0
   12a54:	add	r8, fp, #1
   12a58:	ldr	r6, [pc, #172]	; 12b0c <__assert_fail@plt+0x1d18>
   12a5c:	mov	r7, #32
   12a60:	b	12a84 <__assert_fail@plt+0x1c90>
   12a64:	ldr	r1, [r6]
   12a68:	mov	r0, #10
   12a6c:	bl	10d58 <putc@plt>
   12a70:	mov	r9, #0
   12a74:	b	12a9c <__assert_fail@plt+0x1ca8>
   12a78:	ldr	r5, [r5, #8]
   12a7c:	cmp	r5, #0
   12a80:	beq	12ae4 <__assert_fail@plt+0x1cf0>
   12a84:	ldr	r3, [r5, #16]
   12a88:	cmp	r3, #1
   12a8c:	beq	12a78 <__assert_fail@plt+0x1c84>
   12a90:	ldr	r3, [sp, #4]
   12a94:	cmp	r3, r9
   12a98:	ble	12a64 <__assert_fail@plt+0x1c70>
   12a9c:	ldr	r2, [sl, #20]
   12aa0:	ldr	r1, [sl, #32]
   12aa4:	mov	r0, r5
   12aa8:	bl	120d0 <__assert_fail@plt+0x12dc>
   12aac:	add	r9, r9, #1
   12ab0:	ldr	r3, [sp, #4]
   12ab4:	cmp	r9, r3
   12ab8:	bge	12a78 <__assert_fail@plt+0x1c84>
   12abc:	add	r4, r0, #1
   12ac0:	cmp	fp, r0
   12ac4:	ble	12a78 <__assert_fail@plt+0x1c84>
   12ac8:	ldr	r1, [r6]
   12acc:	mov	r0, r7
   12ad0:	bl	10d58 <putc@plt>
   12ad4:	add	r4, r4, #1
   12ad8:	cmp	r4, r8
   12adc:	bne	12ac8 <__assert_fail@plt+0x1cd4>
   12ae0:	b	12a78 <__assert_fail@plt+0x1c84>
   12ae4:	ldr	r3, [pc, #32]	; 12b0c <__assert_fail@plt+0x1d18>
   12ae8:	ldr	r1, [r3]
   12aec:	mov	r0, #10
   12af0:	bl	10d58 <putc@plt>
   12af4:	add	sp, sp, #12
   12af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12afc:	andeq	r8, r2, ip, lsl #3
   12b00:	andeq	r8, r2, r8, asr r1
   12b04:	andeq	r8, r2, r8, lsr #3
   12b08:	andeq	r7, r1, ip, asr ip
   12b0c:	andeq	r8, r2, r4, lsl r1
   12b10:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b14:	mov	r6, r0
   12b18:	ldr	r3, [pc, #232]	; 12c08 <__assert_fail@plt+0x1e14>
   12b1c:	ldr	r7, [r3]
   12b20:	cmp	r7, #0
   12b24:	ldrne	r7, [r0, #32]
   12b28:	addne	r7, r7, #1
   12b2c:	ldr	r3, [pc, #216]	; 12c0c <__assert_fail@plt+0x1e18>
   12b30:	ldr	r3, [r3]
   12b34:	cmp	r3, #0
   12b38:	ldrne	r3, [r0, #20]
   12b3c:	addne	r3, r3, #1
   12b40:	addne	r7, r7, r3
   12b44:	ldr	r3, [pc, #196]	; 12c10 <__assert_fail@plt+0x1e1c>
   12b48:	ldr	r3, [r3]
   12b4c:	cmp	r3, #0
   12b50:	addne	r7, r7, #1
   12b54:	ldr	r4, [r0]
   12b58:	cmp	r4, #0
   12b5c:	beq	12bf4 <__assert_fail@plt+0x1e00>
   12b60:	mov	r5, #0
   12b64:	ldr	r8, [pc, #168]	; 12c14 <__assert_fail@plt+0x1e20>
   12b68:	mov	sl, #44	; 0x2c
   12b6c:	ldr	r9, [pc, #164]	; 12c18 <__assert_fail@plt+0x1e24>
   12b70:	mov	fp, #32
   12b74:	b	12ba4 <__assert_fail@plt+0x1db0>
   12b78:	ldr	r1, [r8]
   12b7c:	mov	r0, fp
   12b80:	bl	10d58 <putc@plt>
   12b84:	ldr	r2, [r6, #20]
   12b88:	ldr	r1, [r6, #32]
   12b8c:	mov	r0, r4
   12b90:	bl	120d0 <__assert_fail@plt+0x12dc>
   12b94:	add	r5, r5, r0
   12b98:	ldr	r4, [r4, #8]
   12b9c:	cmp	r4, #0
   12ba0:	beq	12bf4 <__assert_fail@plt+0x1e00>
   12ba4:	ldr	r3, [r4, #16]
   12ba8:	cmp	r3, #1
   12bac:	beq	12b98 <__assert_fail@plt+0x1da4>
   12bb0:	cmp	r5, #0
   12bb4:	ble	12b84 <__assert_fail@plt+0x1d90>
   12bb8:	ldr	r1, [r8]
   12bbc:	mov	r0, sl
   12bc0:	bl	10d58 <putc@plt>
   12bc4:	add	r5, r5, #2
   12bc8:	add	r3, r7, r5
   12bcc:	ldr	r2, [r4, #52]	; 0x34
   12bd0:	add	r3, r3, r2
   12bd4:	ldr	r2, [r9]
   12bd8:	cmp	r3, r2
   12bdc:	bcc	12b78 <__assert_fail@plt+0x1d84>
   12be0:	ldr	r1, [r8]
   12be4:	mov	r0, #10
   12be8:	bl	10d58 <putc@plt>
   12bec:	mov	r5, #0
   12bf0:	b	12b84 <__assert_fail@plt+0x1d90>
   12bf4:	ldr	r3, [pc, #24]	; 12c14 <__assert_fail@plt+0x1e20>
   12bf8:	ldr	r1, [r3]
   12bfc:	mov	r0, #10
   12c00:	bl	10d58 <putc@plt>
   12c04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c08:	andeq	r8, r2, r0, ror r1
   12c0c:	andeq	r8, r2, r8, asr r1
   12c10:	andeq	r8, r2, r0, lsl #3
   12c14:	andeq	r8, r2, r4, lsl r1
   12c18:	strdeq	r8, [r2], -r0
   12c1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c20:	ldrb	r4, [r0]
   12c24:	cmp	r4, #0
   12c28:	beq	12c90 <__assert_fail@plt+0x1e9c>
   12c2c:	mov	r5, r0
   12c30:	bl	10cbc <__ctype_b_loc@plt>
   12c34:	mov	r8, r0
   12c38:	mov	r6, #0
   12c3c:	ldr	r9, [pc, #88]	; 12c9c <__assert_fail@plt+0x1ea8>
   12c40:	mov	sl, #63	; 0x3f
   12c44:	ldr	r7, [pc, #84]	; 12ca0 <__assert_fail@plt+0x1eac>
   12c48:	b	12c68 <__assert_fail@plt+0x1e74>
   12c4c:	mov	r0, r4
   12c50:	ldr	r1, [r7]
   12c54:	bl	10d58 <putc@plt>
   12c58:	add	r6, r6, #1
   12c5c:	ldrb	r4, [r5, #1]!
   12c60:	cmp	r4, #0
   12c64:	beq	12c94 <__assert_fail@plt+0x1ea0>
   12c68:	ldr	r2, [r8]
   12c6c:	lsl	r3, r4, #1
   12c70:	ldrh	r3, [r2, r3]
   12c74:	tst	r3, #16384	; 0x4000
   12c78:	bne	12c4c <__assert_fail@plt+0x1e58>
   12c7c:	ldr	r3, [r9]
   12c80:	cmp	r3, #0
   12c84:	movne	r0, sl
   12c88:	bne	12c50 <__assert_fail@plt+0x1e5c>
   12c8c:	b	12c4c <__assert_fail@plt+0x1e58>
   12c90:	mov	r6, #0
   12c94:	mov	r0, r6
   12c98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c9c:			; <UNDEFINED> instruction: 0x000281b4
   12ca0:	andeq	r8, r2, r4, lsl r1
   12ca4:	push	{r4, lr}
   12ca8:	ldr	r3, [pc, #24]	; 12cc8 <__assert_fail@plt+0x1ed4>
   12cac:	ldr	r3, [r3]
   12cb0:	mov	r2, #51	; 0x33
   12cb4:	mov	r1, #1
   12cb8:	ldr	r0, [pc, #12]	; 12ccc <__assert_fail@plt+0x1ed8>
   12cbc:	bl	10c50 <fwrite@plt>
   12cc0:	mov	r0, #1
   12cc4:	pop	{r4, pc}
   12cc8:	andeq	r8, r2, r0, lsl r1
   12ccc:	andeq	r7, r1, r8, ror #24
   12cd0:	push	{r4, lr}
   12cd4:	add	r1, r1, #168	; 0xa8
   12cd8:	add	r0, r0, #168	; 0xa8
   12cdc:	bl	10b9c <strcmp@plt>
   12ce0:	pop	{r4, pc}
   12ce4:	push	{r4, lr}
   12ce8:	add	r3, r1, #168	; 0xa8
   12cec:	add	r1, r0, #168	; 0xa8
   12cf0:	mov	r0, r3
   12cf4:	bl	10b9c <strcmp@plt>
   12cf8:	pop	{r4, pc}
   12cfc:	ldr	r2, [r1, #144]	; 0x90
   12d00:	ldr	r3, [r0, #144]	; 0x90
   12d04:	cmp	r2, r3
   12d08:	bgt	12d48 <__assert_fail@plt+0x1f54>
   12d0c:	beq	12d2c <__assert_fail@plt+0x1f38>
   12d10:	cmp	r2, r3
   12d14:	blt	12d58 <__assert_fail@plt+0x1f64>
   12d18:	push	{r4, lr}
   12d1c:	add	r1, r1, #168	; 0xa8
   12d20:	add	r0, r0, #168	; 0xa8
   12d24:	bl	10b9c <strcmp@plt>
   12d28:	pop	{r4, pc}
   12d2c:	ldr	r2, [r1, #148]	; 0x94
   12d30:	ldr	r3, [r0, #148]	; 0x94
   12d34:	cmp	r2, r3
   12d38:	bgt	12d50 <__assert_fail@plt+0x1f5c>
   12d3c:	bge	12d18 <__assert_fail@plt+0x1f24>
   12d40:	mvn	r0, #0
   12d44:	bx	lr
   12d48:	mov	r0, #1
   12d4c:	bx	lr
   12d50:	mov	r0, #1
   12d54:	bx	lr
   12d58:	mvn	r0, #0
   12d5c:	bx	lr
   12d60:	push	{r4, lr}
   12d64:	bl	12cfc <__assert_fail@plt+0x1f08>
   12d68:	rsb	r0, r0, #0
   12d6c:	pop	{r4, pc}
   12d70:	ldr	r2, [r1, #136]	; 0x88
   12d74:	ldr	r3, [r0, #136]	; 0x88
   12d78:	cmp	r2, r3
   12d7c:	bgt	12dbc <__assert_fail@plt+0x1fc8>
   12d80:	beq	12da0 <__assert_fail@plt+0x1fac>
   12d84:	cmp	r2, r3
   12d88:	blt	12dcc <__assert_fail@plt+0x1fd8>
   12d8c:	push	{r4, lr}
   12d90:	add	r1, r1, #168	; 0xa8
   12d94:	add	r0, r0, #168	; 0xa8
   12d98:	bl	10b9c <strcmp@plt>
   12d9c:	pop	{r4, pc}
   12da0:	ldr	r2, [r1, #140]	; 0x8c
   12da4:	ldr	r3, [r0, #140]	; 0x8c
   12da8:	cmp	r2, r3
   12dac:	bgt	12dc4 <__assert_fail@plt+0x1fd0>
   12db0:	bge	12d8c <__assert_fail@plt+0x1f98>
   12db4:	mvn	r0, #0
   12db8:	bx	lr
   12dbc:	mov	r0, #1
   12dc0:	bx	lr
   12dc4:	mov	r0, #1
   12dc8:	bx	lr
   12dcc:	mvn	r0, #0
   12dd0:	bx	lr
   12dd4:	push	{r4, lr}
   12dd8:	bl	12d70 <__assert_fail@plt+0x1f7c>
   12ddc:	rsb	r0, r0, #0
   12de0:	pop	{r4, pc}
   12de4:	ldr	r2, [r1, #152]	; 0x98
   12de8:	ldr	r3, [r0, #152]	; 0x98
   12dec:	cmp	r2, r3
   12df0:	bgt	12e30 <__assert_fail@plt+0x203c>
   12df4:	beq	12e14 <__assert_fail@plt+0x2020>
   12df8:	cmp	r2, r3
   12dfc:	blt	12e40 <__assert_fail@plt+0x204c>
   12e00:	push	{r4, lr}
   12e04:	add	r1, r1, #168	; 0xa8
   12e08:	add	r0, r0, #168	; 0xa8
   12e0c:	bl	10b9c <strcmp@plt>
   12e10:	pop	{r4, pc}
   12e14:	ldr	r2, [r1, #156]	; 0x9c
   12e18:	ldr	r3, [r0, #156]	; 0x9c
   12e1c:	cmp	r2, r3
   12e20:	bgt	12e38 <__assert_fail@plt+0x2044>
   12e24:	bge	12e00 <__assert_fail@plt+0x200c>
   12e28:	mvn	r0, #0
   12e2c:	bx	lr
   12e30:	mov	r0, #1
   12e34:	bx	lr
   12e38:	mov	r0, #1
   12e3c:	bx	lr
   12e40:	mvn	r0, #0
   12e44:	bx	lr
   12e48:	push	{r4, lr}
   12e4c:	bl	12de4 <__assert_fail@plt+0x1ff0>
   12e50:	rsb	r0, r0, #0
   12e54:	pop	{r4, pc}
   12e58:	push	{r4, r5, r6, lr}
   12e5c:	ldrd	r4, [r1, #112]	; 0x70
   12e60:	ldrd	r2, [r0, #112]	; 0x70
   12e64:	cmp	r2, r4
   12e68:	sbcs	ip, r3, r5
   12e6c:	blt	12e8c <__assert_fail@plt+0x2098>
   12e70:	cmp	r4, r2
   12e74:	sbcs	r3, r5, r3
   12e78:	blt	12e94 <__assert_fail@plt+0x20a0>
   12e7c:	add	r1, r1, #168	; 0xa8
   12e80:	add	r0, r0, #168	; 0xa8
   12e84:	bl	10b9c <strcmp@plt>
   12e88:	pop	{r4, r5, r6, pc}
   12e8c:	mov	r0, #1
   12e90:	pop	{r4, r5, r6, pc}
   12e94:	mvn	r0, #0
   12e98:	pop	{r4, r5, r6, pc}
   12e9c:	push	{r4, lr}
   12ea0:	bl	12e58 <__assert_fail@plt+0x2064>
   12ea4:	rsb	r0, r0, #0
   12ea8:	pop	{r4, pc}
   12eac:	and	r3, r0, #61440	; 0xf000
   12eb0:	cmp	r3, #32768	; 0x8000
   12eb4:	moveq	r3, #45	; 0x2d
   12eb8:	beq	12f04 <__assert_fail@plt+0x2110>
   12ebc:	cmp	r3, #16384	; 0x4000
   12ec0:	moveq	r3, #100	; 0x64
   12ec4:	beq	12f04 <__assert_fail@plt+0x2110>
   12ec8:	cmp	r3, #24576	; 0x6000
   12ecc:	moveq	r3, #98	; 0x62
   12ed0:	beq	12f04 <__assert_fail@plt+0x2110>
   12ed4:	cmp	r3, #8192	; 0x2000
   12ed8:	moveq	r3, #99	; 0x63
   12edc:	beq	12f04 <__assert_fail@plt+0x2110>
   12ee0:	cmp	r3, #40960	; 0xa000
   12ee4:	moveq	r3, #108	; 0x6c
   12ee8:	beq	12f04 <__assert_fail@plt+0x2110>
   12eec:	cmp	r3, #4096	; 0x1000
   12ef0:	moveq	r3, #112	; 0x70
   12ef4:	beq	12f04 <__assert_fail@plt+0x2110>
   12ef8:	cmp	r3, #49152	; 0xc000
   12efc:	moveq	r3, #115	; 0x73
   12f00:	movne	r3, #63	; 0x3f
   12f04:	strb	r3, [r1]
   12f08:	and	r3, r0, #256	; 0x100
   12f0c:	cmp	r3, #0
   12f10:	movne	r3, #114	; 0x72
   12f14:	moveq	r3, #45	; 0x2d
   12f18:	strb	r3, [r1, #1]
   12f1c:	and	r3, r0, #128	; 0x80
   12f20:	cmp	r3, #0
   12f24:	movne	r3, #119	; 0x77
   12f28:	moveq	r3, #45	; 0x2d
   12f2c:	strb	r3, [r1, #2]
   12f30:	tst	r0, #2048	; 0x800
   12f34:	beq	12fe8 <__assert_fail@plt+0x21f4>
   12f38:	and	r3, r0, #64	; 0x40
   12f3c:	cmp	r3, #0
   12f40:	movne	r3, #115	; 0x73
   12f44:	moveq	r3, #83	; 0x53
   12f48:	strb	r3, [r1, #3]
   12f4c:	and	r3, r0, #32
   12f50:	cmp	r3, #0
   12f54:	movne	r3, #114	; 0x72
   12f58:	moveq	r3, #45	; 0x2d
   12f5c:	strb	r3, [r1, #4]
   12f60:	and	r3, r0, #16
   12f64:	cmp	r3, #0
   12f68:	movne	r3, #119	; 0x77
   12f6c:	moveq	r3, #45	; 0x2d
   12f70:	strb	r3, [r1, #5]
   12f74:	tst	r0, #1024	; 0x400
   12f78:	beq	12ffc <__assert_fail@plt+0x2208>
   12f7c:	and	r3, r0, #8
   12f80:	cmp	r3, #0
   12f84:	movne	r3, #115	; 0x73
   12f88:	moveq	r3, #83	; 0x53
   12f8c:	strb	r3, [r1, #6]
   12f90:	and	r3, r0, #4
   12f94:	cmp	r3, #0
   12f98:	movne	r3, #114	; 0x72
   12f9c:	moveq	r3, #45	; 0x2d
   12fa0:	strb	r3, [r1, #7]
   12fa4:	and	r3, r0, #2
   12fa8:	cmp	r3, #0
   12fac:	movne	r3, #119	; 0x77
   12fb0:	moveq	r3, #45	; 0x2d
   12fb4:	strb	r3, [r1, #8]
   12fb8:	tst	r0, #512	; 0x200
   12fbc:	beq	13010 <__assert_fail@plt+0x221c>
   12fc0:	and	r0, r0, #1
   12fc4:	cmp	r0, #0
   12fc8:	movne	r0, #116	; 0x74
   12fcc:	moveq	r0, #84	; 0x54
   12fd0:	strb	r0, [r1, #9]
   12fd4:	mov	r3, #32
   12fd8:	strb	r3, [r1, #10]
   12fdc:	mov	r3, #0
   12fe0:	strb	r3, [r1, #11]
   12fe4:	bx	lr
   12fe8:	and	r3, r0, #64	; 0x40
   12fec:	cmp	r3, #0
   12ff0:	movne	r3, #120	; 0x78
   12ff4:	moveq	r3, #45	; 0x2d
   12ff8:	b	12f48 <__assert_fail@plt+0x2154>
   12ffc:	and	r3, r0, #8
   13000:	cmp	r3, #0
   13004:	movne	r3, #120	; 0x78
   13008:	moveq	r3, #45	; 0x2d
   1300c:	b	12f8c <__assert_fail@plt+0x2198>
   13010:	and	r0, r0, #1
   13014:	cmp	r0, #0
   13018:	movne	r0, #120	; 0x78
   1301c:	moveq	r0, #45	; 0x2d
   13020:	b	12fd0 <__assert_fail@plt+0x21dc>
   13024:	push	{r4, lr}
   13028:	ldr	r0, [r0, #16]
   1302c:	bl	12eac <__assert_fail@plt+0x20b8>
   13030:	pop	{r4, pc}
   13034:	push	{r4, r5, lr}
   13038:	sub	sp, sp, #12
   1303c:	mov	r5, r0
   13040:	bl	10cf8 <__errno_location@plt>
   13044:	mov	r4, r0
   13048:	ldr	r3, [r0]
   1304c:	str	r3, [sp]
   13050:	str	r3, [sp, #4]
   13054:	mov	r3, #0
   13058:	str	r3, [r0]
   1305c:	mov	r0, r5
   13060:	bl	10be4 <free@plt>
   13064:	ldr	r3, [r4]
   13068:	cmp	r3, #0
   1306c:	moveq	r3, #4
   13070:	movne	r3, #0
   13074:	add	r2, sp, #8
   13078:	add	r3, r2, r3
   1307c:	ldr	r3, [r3, #-8]
   13080:	str	r3, [r4]
   13084:	add	sp, sp, #12
   13088:	pop	{r4, r5, pc}
   1308c:	push	{r4, r5}
   13090:	ldrd	r4, [r0, #8]
   13094:	ldrd	r2, [r1, #8]
   13098:	cmp	r5, r3
   1309c:	cmpeq	r4, r2
   130a0:	movne	r0, #0
   130a4:	beq	130b0 <__assert_fail@plt+0x22bc>
   130a8:	pop	{r4, r5}
   130ac:	bx	lr
   130b0:	ldrd	r4, [r0]
   130b4:	ldrd	r2, [r1]
   130b8:	cmp	r5, r3
   130bc:	cmpeq	r4, r2
   130c0:	moveq	r0, #1
   130c4:	movne	r0, #0
   130c8:	b	130a8 <__assert_fail@plt+0x22b4>
   130cc:	push	{r4, lr}
   130d0:	mov	r2, r1
   130d4:	mov	r3, #0
   130d8:	ldrd	r0, [r0, #8]
   130dc:	bl	17968 <__assert_fail@plt+0x6b74>
   130e0:	mov	r0, r2
   130e4:	pop	{r4, pc}
   130e8:	push	{r4, lr}
   130ec:	mov	r2, r1
   130f0:	mov	r3, #0
   130f4:	ldrd	r0, [r0]
   130f8:	bl	17968 <__assert_fail@plt+0x6b74>
   130fc:	mov	r0, r2
   13100:	pop	{r4, pc}
   13104:	push	{r4, r5}
   13108:	ldrd	r4, [r0]
   1310c:	ldrd	r2, [r1]
   13110:	cmp	r5, r3
   13114:	cmpeq	r4, r2
   13118:	moveq	r0, #1
   1311c:	movne	r0, #0
   13120:	pop	{r4, r5}
   13124:	bx	lr
   13128:	push	{r4, r5}
   1312c:	ldr	r3, [r0]
   13130:	ldrd	r4, [r3, #160]	; 0xa0
   13134:	ldr	r3, [r1]
   13138:	ldrd	r2, [r3, #160]	; 0xa0
   1313c:	cmp	r5, r3
   13140:	cmpeq	r4, r2
   13144:	movhi	r0, #1
   13148:	movls	r0, #0
   1314c:	movcc	r3, #1
   13150:	movcs	r3, #0
   13154:	sub	r0, r0, r3
   13158:	pop	{r4, r5}
   1315c:	bx	lr
   13160:	push	{r4, r5, r6, lr}
   13164:	mov	r4, r0
   13168:	ldr	r3, [r0, #36]	; 0x24
   1316c:	add	r1, r1, #256	; 0x100
   13170:	adds	r1, r1, r3
   13174:	bcs	13198 <__assert_fail@plt+0x23a4>
   13178:	str	r1, [r0, #36]	; 0x24
   1317c:	ldr	r0, [r0, #24]
   13180:	bl	17068 <__assert_fail@plt+0x6274>
   13184:	cmp	r0, #0
   13188:	beq	131bc <__assert_fail@plt+0x23c8>
   1318c:	str	r0, [r4, #24]
   13190:	mov	r0, #1
   13194:	pop	{r4, r5, r6, pc}
   13198:	ldr	r0, [r0, #24]
   1319c:	bl	13034 <__assert_fail@plt+0x2240>
   131a0:	mov	r5, #0
   131a4:	str	r5, [r4, #24]
   131a8:	bl	10cf8 <__errno_location@plt>
   131ac:	mov	r3, #36	; 0x24
   131b0:	str	r3, [r0]
   131b4:	mov	r0, r5
   131b8:	pop	{r4, r5, r6, pc}
   131bc:	ldr	r0, [r4, #24]
   131c0:	bl	13034 <__assert_fail@plt+0x2240>
   131c4:	mov	r0, #0
   131c8:	str	r0, [r4, #24]
   131cc:	pop	{r4, r5, r6, pc}
   131d0:	push	{r4, r5, r6, lr}
   131d4:	sub	sp, sp, #8
   131d8:	mov	r4, r1
   131dc:	add	r5, r1, #64	; 0x40
   131e0:	ldr	r3, [r1, #48]	; 0x30
   131e4:	cmp	r3, #0
   131e8:	bne	131f8 <__assert_fail@plt+0x2404>
   131ec:	ldr	r3, [r0, #48]	; 0x30
   131f0:	tst	r3, #1
   131f4:	bne	13208 <__assert_fail@plt+0x2414>
   131f8:	ldr	r3, [r0, #48]	; 0x30
   131fc:	lsl	r3, r3, #30
   13200:	orrs	r3, r2, r3, lsr #31
   13204:	beq	13280 <__assert_fail@plt+0x248c>
   13208:	mov	r2, r5
   1320c:	ldr	r1, [r4, #24]
   13210:	mov	r0, #3
   13214:	bl	10d94 <__xstat64@plt>
   13218:	cmp	r0, #0
   1321c:	beq	132b4 <__assert_fail@plt+0x24c0>
   13220:	bl	10cf8 <__errno_location@plt>
   13224:	mov	r6, r0
   13228:	ldr	r3, [r0]
   1322c:	cmp	r3, #2
   13230:	beq	13258 <__assert_fail@plt+0x2464>
   13234:	ldr	r3, [r6]
   13238:	str	r3, [r4, #32]
   1323c:	mov	r2, #104	; 0x68
   13240:	mov	r1, #0
   13244:	mov	r0, r5
   13248:	bl	10d10 <memset@plt>
   1324c:	mov	r0, #10
   13250:	add	sp, sp, #8
   13254:	pop	{r4, r5, r6, pc}
   13258:	mov	r2, r5
   1325c:	ldr	r1, [r4, #24]
   13260:	mov	r0, #3
   13264:	bl	10dd0 <__lxstat64@plt>
   13268:	cmp	r0, #0
   1326c:	bne	13234 <__assert_fail@plt+0x2440>
   13270:	mov	r3, #0
   13274:	str	r3, [r6]
   13278:	mov	r0, #13
   1327c:	b	13250 <__assert_fail@plt+0x245c>
   13280:	ldr	r1, [r0, #32]
   13284:	mov	r3, #256	; 0x100
   13288:	str	r3, [sp]
   1328c:	mov	r3, r5
   13290:	ldr	r2, [r4, #24]
   13294:	mov	r0, #3
   13298:	bl	10c2c <__fxstatat64@plt>
   1329c:	cmp	r0, #0
   132a0:	beq	132b4 <__assert_fail@plt+0x24c0>
   132a4:	bl	10cf8 <__errno_location@plt>
   132a8:	ldr	r3, [r0]
   132ac:	str	r3, [r4, #32]
   132b0:	b	1323c <__assert_fail@plt+0x2448>
   132b4:	ldr	r0, [r4, #80]	; 0x50
   132b8:	and	r0, r0, #61440	; 0xf000
   132bc:	cmp	r0, #16384	; 0x4000
   132c0:	beq	132e0 <__assert_fail@plt+0x24ec>
   132c4:	cmp	r0, #40960	; 0xa000
   132c8:	moveq	r0, #12
   132cc:	beq	13250 <__assert_fail@plt+0x245c>
   132d0:	cmp	r0, #32768	; 0x8000
   132d4:	moveq	r0, #8
   132d8:	movne	r0, #3
   132dc:	b	13250 <__assert_fail@plt+0x245c>
   132e0:	ldrb	r3, [r4, #168]	; 0xa8
   132e4:	cmp	r3, #46	; 0x2e
   132e8:	movne	r0, #1
   132ec:	bne	13250 <__assert_fail@plt+0x245c>
   132f0:	ldrb	r3, [r4, #169]	; 0xa9
   132f4:	cmp	r3, #0
   132f8:	beq	13314 <__assert_fail@plt+0x2520>
   132fc:	ldr	r3, [r4, #168]	; 0xa8
   13300:	bic	r3, r3, #-16777216	; 0xff000000
   13304:	bic	r3, r3, #255	; 0xff
   13308:	cmp	r3, #11776	; 0x2e00
   1330c:	movne	r0, #1
   13310:	bne	13250 <__assert_fail@plt+0x245c>
   13314:	ldr	r0, [r4, #48]	; 0x30
   13318:	cmp	r0, #0
   1331c:	moveq	r0, #1
   13320:	movne	r0, #5
   13324:	b	13250 <__assert_fail@plt+0x245c>
   13328:	push	{r4, r5, r6, r7, r8, lr}
   1332c:	mov	r6, r0
   13330:	mov	r4, r1
   13334:	mov	r5, r2
   13338:	ldr	r7, [r0, #44]	; 0x2c
   1333c:	ldr	r3, [r0, #40]	; 0x28
   13340:	cmp	r3, r2
   13344:	bcs	13370 <__assert_fail@plt+0x257c>
   13348:	add	r1, r2, #40	; 0x28
   1334c:	str	r1, [r0, #40]	; 0x28
   13350:	cmn	r1, #-1073741823	; 0xc0000001
   13354:	bhi	133e0 <__assert_fail@plt+0x25ec>
   13358:	lsl	r1, r1, #2
   1335c:	ldr	r0, [r0, #8]
   13360:	bl	17068 <__assert_fail@plt+0x6274>
   13364:	cmp	r0, #0
   13368:	strne	r0, [r6, #8]
   1336c:	beq	133e0 <__assert_fail@plt+0x25ec>
   13370:	ldr	r3, [r6, #8]
   13374:	cmp	r4, #0
   13378:	beq	1338c <__assert_fail@plt+0x2598>
   1337c:	str	r4, [r3], #4
   13380:	ldr	r4, [r4, #8]
   13384:	cmp	r4, #0
   13388:	bne	1337c <__assert_fail@plt+0x2588>
   1338c:	mov	r3, r7
   13390:	mov	r2, #4
   13394:	mov	r1, r5
   13398:	ldr	r0, [r6, #8]
   1339c:	bl	10d88 <qsort@plt>
   133a0:	ldr	lr, [r6, #8]
   133a4:	ldr	r0, [lr]
   133a8:	subs	r3, r5, #1
   133ac:	beq	133d0 <__assert_fail@plt+0x25dc>
   133b0:	mov	r2, lr
   133b4:	ldr	r1, [r2]
   133b8:	ldr	ip, [r2, #4]!
   133bc:	str	ip, [r1, #8]
   133c0:	subs	r3, r3, #1
   133c4:	bne	133b4 <__assert_fail@plt+0x25c0>
   133c8:	sub	r5, r5, #-1073741823	; 0xc0000001
   133cc:	add	lr, lr, r5, lsl #2
   133d0:	ldr	r3, [lr]
   133d4:	mov	r2, #0
   133d8:	str	r2, [r3, #8]
   133dc:	pop	{r4, r5, r6, r7, r8, pc}
   133e0:	ldr	r0, [r6, #8]
   133e4:	bl	13034 <__assert_fail@plt+0x2240>
   133e8:	mov	r3, #0
   133ec:	str	r3, [r6, #8]
   133f0:	str	r3, [r6, #40]	; 0x28
   133f4:	mov	r0, r4
   133f8:	pop	{r4, r5, r6, r7, r8, pc}
   133fc:	push	{r4, r5, r6, r7, r8, lr}
   13400:	mov	r6, r0
   13404:	mov	r7, r1
   13408:	mov	r5, r2
   1340c:	add	r0, r2, #176	; 0xb0
   13410:	bic	r0, r0, #7
   13414:	bl	17038 <__assert_fail@plt+0x6244>
   13418:	subs	r4, r0, #0
   1341c:	beq	13468 <__assert_fail@plt+0x2674>
   13420:	mov	r2, r5
   13424:	mov	r1, r7
   13428:	add	r0, r4, #168	; 0xa8
   1342c:	bl	10bf0 <memcpy@plt>
   13430:	add	r2, r4, r5
   13434:	mov	r3, #0
   13438:	strb	r3, [r2, #168]	; 0xa8
   1343c:	str	r5, [r4, #52]	; 0x34
   13440:	str	r6, [r4, #44]	; 0x2c
   13444:	ldr	r2, [r6, #24]
   13448:	str	r2, [r4, #28]
   1344c:	str	r3, [r4, #32]
   13450:	str	r3, [r4, #12]
   13454:	strh	r3, [r4, #58]	; 0x3a
   13458:	mov	r2, #3
   1345c:	strh	r2, [r4, #60]	; 0x3c
   13460:	str	r3, [r4, #16]
   13464:	str	r3, [r4, #20]
   13468:	mov	r0, r4
   1346c:	pop	{r4, r5, r6, r7, r8, pc}
   13470:	push	{r4, lr}
   13474:	sub	sp, sp, #8
   13478:	mov	r4, r0
   1347c:	ldr	r2, [r0, #48]	; 0x30
   13480:	ldr	r3, [pc, #92]	; 134e4 <__assert_fail@plt+0x26f0>
   13484:	and	r3, r3, r2
   13488:	cmp	r3, #0
   1348c:	beq	134c0 <__assert_fail@plt+0x26cc>
   13490:	ldr	r3, [pc, #80]	; 134e8 <__assert_fail@plt+0x26f4>
   13494:	str	r3, [sp]
   13498:	ldr	r3, [pc, #76]	; 134ec <__assert_fail@plt+0x26f8>
   1349c:	ldr	r2, [pc, #76]	; 134f0 <__assert_fail@plt+0x26fc>
   134a0:	mov	r1, #0
   134a4:	mov	r0, #31
   134a8:	bl	16720 <__assert_fail@plt+0x592c>
   134ac:	str	r0, [r4, #56]	; 0x38
   134b0:	adds	r0, r0, #0
   134b4:	movne	r0, #1
   134b8:	add	sp, sp, #8
   134bc:	pop	{r4, pc}
   134c0:	mov	r0, #32
   134c4:	bl	17038 <__assert_fail@plt+0x6244>
   134c8:	str	r0, [r4, #56]	; 0x38
   134cc:	cmp	r0, #0
   134d0:	moveq	r0, #0
   134d4:	beq	134b8 <__assert_fail@plt+0x26c4>
   134d8:	bl	170b8 <__assert_fail@plt+0x62c4>
   134dc:	mov	r0, #1
   134e0:	b	134b8 <__assert_fail@plt+0x26c4>
   134e4:	andeq	r0, r0, r2, lsl #2
   134e8:	andeq	r3, r1, r4, lsr r0
   134ec:	andeq	r3, r1, ip, lsl #1
   134f0:	andeq	r3, r1, ip, asr #1
   134f4:	push	{r4, lr}
   134f8:	mov	ip, r1
   134fc:	ldr	r3, [r0, #48]	; 0x30
   13500:	and	lr, r3, #16
   13504:	ldr	r2, [pc, #48]	; 1353c <__assert_fail@plt+0x2748>
   13508:	ldr	r1, [pc, #48]	; 13540 <__assert_fail@plt+0x274c>
   1350c:	cmp	lr, #0
   13510:	moveq	r1, r2
   13514:	tst	r3, #512	; 0x200
   13518:	bne	13528 <__assert_fail@plt+0x2734>
   1351c:	mov	r0, ip
   13520:	bl	173f8 <__assert_fail@plt+0x6604>
   13524:	pop	{r4, pc}
   13528:	mov	r2, r1
   1352c:	mov	r1, ip
   13530:	ldr	r0, [r0, #32]
   13534:	bl	16f10 <__assert_fail@plt+0x611c>
   13538:	pop	{r4, pc}
   1353c:	andeq	r4, r8, r0, lsl #18
   13540:	andeq	ip, r8, r0, lsl #18
   13544:	push	{r4, r5, r6, lr}
   13548:	subs	r4, r0, #0
   1354c:	bne	13568 <__assert_fail@plt+0x2774>
   13550:	pop	{r4, r5, r6, pc}
   13554:	mov	r0, r4
   13558:	bl	13034 <__assert_fail@plt+0x2240>
   1355c:	mov	r4, r5
   13560:	cmp	r5, #0
   13564:	beq	13580 <__assert_fail@plt+0x278c>
   13568:	ldr	r5, [r4, #8]
   1356c:	ldr	r0, [r4, #12]
   13570:	cmp	r0, #0
   13574:	beq	13554 <__assert_fail@plt+0x2760>
   13578:	bl	10ddc <closedir@plt>
   1357c:	b	13554 <__assert_fail@plt+0x2760>
   13580:	pop	{r4, r5, r6, pc}
   13584:	push	{r4, lr}
   13588:	ldr	r2, [r0, #48]	; 0x30
   1358c:	ldr	r3, [pc, #40]	; 135bc <__assert_fail@plt+0x27c8>
   13590:	and	r3, r3, r2
   13594:	cmp	r3, #0
   13598:	beq	135b0 <__assert_fail@plt+0x27bc>
   1359c:	ldr	r0, [r0, #56]	; 0x38
   135a0:	cmp	r0, #0
   135a4:	popeq	{r4, pc}
   135a8:	bl	168b0 <__assert_fail@plt+0x5abc>
   135ac:	pop	{r4, pc}
   135b0:	ldr	r0, [r0, #56]	; 0x38
   135b4:	bl	13034 <__assert_fail@plt+0x2240>
   135b8:	pop	{r4, pc}
   135bc:	andeq	r0, r0, r2, lsl #2
   135c0:	push	{r4, lr}
   135c4:	mov	r4, r0
   135c8:	mov	r0, r4
   135cc:	bl	16de4 <__assert_fail@plt+0x5ff0>
   135d0:	cmp	r0, #0
   135d4:	bne	135f0 <__assert_fail@plt+0x27fc>
   135d8:	mov	r0, r4
   135dc:	bl	16e30 <__assert_fail@plt+0x603c>
   135e0:	cmp	r0, #0
   135e4:	blt	135c8 <__assert_fail@plt+0x27d4>
   135e8:	bl	10dc4 <close@plt>
   135ec:	b	135c8 <__assert_fail@plt+0x27d4>
   135f0:	pop	{r4, pc}
   135f4:	push	{r4, r5, r6, r7, lr}
   135f8:	sub	sp, sp, #116	; 0x74
   135fc:	ldr	r4, [r0, #44]	; 0x2c
   13600:	ldr	r3, [r4, #48]	; 0x30
   13604:	tst	r3, #512	; 0x200
   13608:	beq	136e8 <__assert_fail@plt+0x28f4>
   1360c:	mov	r7, r1
   13610:	mov	r5, r0
   13614:	ldr	r6, [r4, #52]	; 0x34
   13618:	cmp	r6, #0
   1361c:	beq	13644 <__assert_fail@plt+0x2850>
   13620:	ldrd	r2, [r5, #64]	; 0x40
   13624:	add	r1, sp, #112	; 0x70
   13628:	strd	r2, [r1, #-104]!	; 0xffffff98
   1362c:	mov	r0, r6
   13630:	bl	16468 <__assert_fail@plt+0x5674>
   13634:	cmp	r0, #0
   13638:	beq	13670 <__assert_fail@plt+0x287c>
   1363c:	ldr	r0, [r0, #8]
   13640:	b	136ec <__assert_fail@plt+0x28f8>
   13644:	ldr	r3, [pc, #184]	; 13704 <__assert_fail@plt+0x2910>
   13648:	str	r3, [sp]
   1364c:	ldr	r3, [pc, #180]	; 13708 <__assert_fail@plt+0x2914>
   13650:	ldr	r2, [pc, #180]	; 1370c <__assert_fail@plt+0x2918>
   13654:	mov	r1, #0
   13658:	mov	r0, #13
   1365c:	bl	16720 <__assert_fail@plt+0x592c>
   13660:	mov	r6, r0
   13664:	str	r0, [r4, #52]	; 0x34
   13668:	cmp	r0, #0
   1366c:	bne	13620 <__assert_fail@plt+0x282c>
   13670:	cmp	r7, #0
   13674:	blt	136f4 <__assert_fail@plt+0x2900>
   13678:	add	r1, sp, #24
   1367c:	mov	r0, r7
   13680:	bl	10b78 <fstatfs64@plt>
   13684:	cmp	r0, #0
   13688:	bne	136fc <__assert_fail@plt+0x2908>
   1368c:	cmp	r6, #0
   13690:	beq	136d0 <__assert_fail@plt+0x28dc>
   13694:	mov	r0, #16
   13698:	bl	17038 <__assert_fail@plt+0x6244>
   1369c:	subs	r4, r0, #0
   136a0:	beq	136d0 <__assert_fail@plt+0x28dc>
   136a4:	ldrd	r2, [r5, #64]	; 0x40
   136a8:	strd	r2, [r4]
   136ac:	ldr	r3, [sp, #24]
   136b0:	str	r3, [r4, #8]
   136b4:	mov	r1, r4
   136b8:	mov	r0, r6
   136bc:	bl	16c6c <__assert_fail@plt+0x5e78>
   136c0:	cmp	r0, #0
   136c4:	beq	136dc <__assert_fail@plt+0x28e8>
   136c8:	cmp	r4, r0
   136cc:	bne	136d8 <__assert_fail@plt+0x28e4>
   136d0:	ldr	r0, [sp, #24]
   136d4:	b	136ec <__assert_fail@plt+0x28f8>
   136d8:	bl	10db8 <abort@plt>
   136dc:	mov	r0, r4
   136e0:	bl	13034 <__assert_fail@plt+0x2240>
   136e4:	b	136d0 <__assert_fail@plt+0x28dc>
   136e8:	mov	r0, #0
   136ec:	add	sp, sp, #116	; 0x74
   136f0:	pop	{r4, r5, r6, r7, pc}
   136f4:	mov	r0, #0
   136f8:	b	136ec <__assert_fail@plt+0x28f8>
   136fc:	mov	r0, #0
   13700:	b	136ec <__assert_fail@plt+0x28f8>
   13704:	andeq	r3, r1, r4, lsr r0
   13708:	andeq	r3, r1, r4, lsl #2
   1370c:	andeq	r3, r1, r8, ror #1
   13710:	push	{r4, r5, r6, lr}
   13714:	mov	r5, r0
   13718:	mov	r4, r1
   1371c:	ldr	r2, [r0, #48]	; 0x30
   13720:	ldr	r3, [pc, #176]	; 137d8 <__assert_fail@plt+0x29e4>
   13724:	and	r3, r3, r2
   13728:	cmp	r3, #0
   1372c:	beq	13794 <__assert_fail@plt+0x29a0>
   13730:	mov	r0, #24
   13734:	bl	17038 <__assert_fail@plt+0x6244>
   13738:	subs	r6, r0, #0
   1373c:	beq	137b8 <__assert_fail@plt+0x29c4>
   13740:	ldrd	r2, [r4, #64]	; 0x40
   13744:	strd	r2, [r6]
   13748:	ldrd	r2, [r4, #160]	; 0xa0
   1374c:	strd	r2, [r6, #8]
   13750:	str	r4, [r6, #16]
   13754:	mov	r1, r6
   13758:	ldr	r0, [r5, #56]	; 0x38
   1375c:	bl	16c6c <__assert_fail@plt+0x5e78>
   13760:	mov	r5, r0
   13764:	cmp	r6, r0
   13768:	beq	137c0 <__assert_fail@plt+0x29cc>
   1376c:	mov	r0, r6
   13770:	bl	13034 <__assert_fail@plt+0x2240>
   13774:	cmp	r5, #0
   13778:	beq	137c8 <__assert_fail@plt+0x29d4>
   1377c:	ldr	r3, [r5, #16]
   13780:	str	r3, [r4]
   13784:	mov	r3, #2
   13788:	strh	r3, [r4, #56]	; 0x38
   1378c:	mov	r0, #1
   13790:	pop	{r4, r5, r6, pc}
   13794:	add	r1, r1, #64	; 0x40
   13798:	ldr	r0, [r0, #56]	; 0x38
   1379c:	bl	170d4 <__assert_fail@plt+0x62e0>
   137a0:	cmp	r0, #0
   137a4:	beq	137d0 <__assert_fail@plt+0x29dc>
   137a8:	str	r4, [r4]
   137ac:	mov	r3, #2
   137b0:	strh	r3, [r4, #56]	; 0x38
   137b4:	pop	{r4, r5, r6, pc}
   137b8:	mov	r0, #0
   137bc:	pop	{r4, r5, r6, pc}
   137c0:	mov	r0, #1
   137c4:	pop	{r4, r5, r6, pc}
   137c8:	mov	r0, #0
   137cc:	pop	{r4, r5, r6, pc}
   137d0:	mov	r0, #1
   137d4:	pop	{r4, r5, r6, pc}
   137d8:	andeq	r0, r0, r2, lsl #2
   137dc:	push	{r4, r5, r6, lr}
   137e0:	mov	r5, r1
   137e4:	ldr	r1, [r0, #32]
   137e8:	cmp	r1, r5
   137ec:	movne	r3, #0
   137f0:	moveq	r3, #1
   137f4:	cmn	r1, #100	; 0x64
   137f8:	moveq	r3, #0
   137fc:	cmp	r3, #0
   13800:	bne	13840 <__assert_fail@plt+0x2a4c>
   13804:	mov	r4, r0
   13808:	cmp	r2, #0
   1380c:	bne	13844 <__assert_fail@plt+0x2a50>
   13810:	ldr	r3, [r0, #48]	; 0x30
   13814:	lsr	r3, r3, #2
   13818:	eor	r3, r3, #1
   1381c:	cmp	r1, #0
   13820:	movlt	r3, #0
   13824:	andge	r3, r3, #1
   13828:	cmp	r3, #0
   1382c:	beq	13838 <__assert_fail@plt+0x2a44>
   13830:	mov	r0, r1
   13834:	bl	10dc4 <close@plt>
   13838:	str	r5, [r4, #32]
   1383c:	pop	{r4, r5, r6, pc}
   13840:	bl	10db8 <abort@plt>
   13844:	add	r0, r0, #60	; 0x3c
   13848:	bl	16dec <__assert_fail@plt+0x5ff8>
   1384c:	cmp	r0, #0
   13850:	blt	13838 <__assert_fail@plt+0x2a44>
   13854:	bl	10dc4 <close@plt>
   13858:	b	13838 <__assert_fail@plt+0x2a44>
   1385c:	push	{r4, r5, r6, lr}
   13860:	mov	r4, r0
   13864:	ldr	r3, [r0, #48]	; 0x30
   13868:	ands	r5, r3, #4
   1386c:	movne	r5, #0
   13870:	bne	1388c <__assert_fail@plt+0x2a98>
   13874:	tst	r3, #512	; 0x200
   13878:	bne	1389c <__assert_fail@plt+0x2aa8>
   1387c:	ldr	r0, [r0, #28]
   13880:	bl	10d7c <fchdir@plt>
   13884:	adds	r5, r0, #0
   13888:	movne	r5, #1
   1388c:	add	r0, r4, #60	; 0x3c
   13890:	bl	135c0 <__assert_fail@plt+0x27cc>
   13894:	mov	r0, r5
   13898:	pop	{r4, r5, r6, pc}
   1389c:	mov	r2, #1
   138a0:	mvn	r1, #99	; 0x63
   138a4:	bl	137dc <__assert_fail@plt+0x29e8>
   138a8:	b	1388c <__assert_fail@plt+0x2a98>
   138ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   138b0:	sub	sp, sp, #108	; 0x6c
   138b4:	mov	r4, r0
   138b8:	mov	r6, r1
   138bc:	mov	r5, r2
   138c0:	subs	r9, r3, #0
   138c4:	beq	13a60 <__assert_fail@plt+0x2c6c>
   138c8:	ldr	r1, [pc, #448]	; 13a90 <__assert_fail@plt+0x2c9c>
   138cc:	mov	r0, r9
   138d0:	bl	10b9c <strcmp@plt>
   138d4:	cmp	r0, #0
   138d8:	bne	13a60 <__assert_fail@plt+0x2c6c>
   138dc:	ldr	r3, [r4, #48]	; 0x30
   138e0:	tst	r3, #4
   138e4:	bne	13a6c <__assert_fail@plt+0x2c78>
   138e8:	cmp	r5, #0
   138ec:	bge	139fc <__assert_fail@plt+0x2c08>
   138f0:	tst	r3, #512	; 0x200
   138f4:	beq	1390c <__assert_fail@plt+0x2b18>
   138f8:	add	r7, r4, #60	; 0x3c
   138fc:	mov	r0, r7
   13900:	bl	16de4 <__assert_fail@plt+0x5ff0>
   13904:	cmp	r0, #0
   13908:	beq	1392c <__assert_fail@plt+0x2b38>
   1390c:	mov	r7, #1
   13910:	mov	r1, r9
   13914:	mov	r0, r4
   13918:	bl	134f4 <__assert_fail@plt+0x2700>
   1391c:	subs	r8, r0, #0
   13920:	bge	1397c <__assert_fail@plt+0x2b88>
   13924:	mvn	r4, #0
   13928:	b	139e8 <__assert_fail@plt+0x2bf4>
   1392c:	mov	r0, r7
   13930:	bl	16e30 <__assert_fail@plt+0x603c>
   13934:	subs	r8, r0, #0
   13938:	blt	1390c <__assert_fail@plt+0x2b18>
   1393c:	ldr	r3, [r4, #48]	; 0x30
   13940:	tst	r3, #2
   13944:	bne	13a08 <__assert_fail@plt+0x2c14>
   13948:	mov	r5, r8
   1394c:	mov	r7, #1
   13950:	ldr	r3, [r4, #48]	; 0x30
   13954:	tst	r3, #512	; 0x200
   13958:	bne	13a2c <__assert_fail@plt+0x2c38>
   1395c:	mov	r0, r8
   13960:	bl	10d7c <fchdir@plt>
   13964:	mov	r4, r0
   13968:	b	139e0 <__assert_fail@plt+0x2bec>
   1396c:	cmp	r5, #0
   13970:	movge	r8, r5
   13974:	movge	r7, #0
   13978:	blt	139f4 <__assert_fail@plt+0x2c00>
   1397c:	ldr	r3, [r4, #48]	; 0x30
   13980:	tst	r3, #2
   13984:	bne	139a4 <__assert_fail@plt+0x2bb0>
   13988:	cmp	r9, #0
   1398c:	beq	13950 <__assert_fail@plt+0x2b5c>
   13990:	ldr	r1, [pc, #248]	; 13a90 <__assert_fail@plt+0x2c9c>
   13994:	mov	r0, r9
   13998:	bl	10b9c <strcmp@plt>
   1399c:	cmp	r0, #0
   139a0:	bne	13950 <__assert_fail@plt+0x2b5c>
   139a4:	mov	r2, sp
   139a8:	mov	r1, r8
   139ac:	mov	r0, #3
   139b0:	bl	10c38 <__fxstat64@plt>
   139b4:	cmp	r0, #0
   139b8:	bne	139dc <__assert_fail@plt+0x2be8>
   139bc:	ldrd	r0, [r6, #64]	; 0x40
   139c0:	ldrd	r2, [sp]
   139c4:	cmp	r1, r3
   139c8:	cmpeq	r0, r2
   139cc:	beq	13a14 <__assert_fail@plt+0x2c20>
   139d0:	bl	10cf8 <__errno_location@plt>
   139d4:	mov	r3, #2
   139d8:	str	r3, [r0]
   139dc:	mvn	r4, #0
   139e0:	cmp	r5, #0
   139e4:	blt	13a44 <__assert_fail@plt+0x2c50>
   139e8:	mov	r0, r4
   139ec:	add	sp, sp, #108	; 0x6c
   139f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   139f4:	mov	r7, #0
   139f8:	b	13910 <__assert_fail@plt+0x2b1c>
   139fc:	mov	r8, r5
   13a00:	mov	r7, #1
   13a04:	b	1397c <__assert_fail@plt+0x2b88>
   13a08:	mov	r5, r8
   13a0c:	mov	r7, #1
   13a10:	b	139a4 <__assert_fail@plt+0x2bb0>
   13a14:	ldrd	r0, [r6, #160]	; 0xa0
   13a18:	ldrd	r2, [sp, #96]	; 0x60
   13a1c:	cmp	r1, r3
   13a20:	cmpeq	r0, r2
   13a24:	bne	139d0 <__assert_fail@plt+0x2bdc>
   13a28:	b	13950 <__assert_fail@plt+0x2b5c>
   13a2c:	eor	r2, r7, #1
   13a30:	mov	r1, r8
   13a34:	mov	r0, r4
   13a38:	bl	137dc <__assert_fail@plt+0x29e8>
   13a3c:	mov	r4, #0
   13a40:	b	139e8 <__assert_fail@plt+0x2bf4>
   13a44:	bl	10cf8 <__errno_location@plt>
   13a48:	mov	r5, r0
   13a4c:	ldr	r6, [r0]
   13a50:	mov	r0, r8
   13a54:	bl	10dc4 <close@plt>
   13a58:	str	r6, [r5]
   13a5c:	b	139e8 <__assert_fail@plt+0x2bf4>
   13a60:	ldr	r3, [r4, #48]	; 0x30
   13a64:	tst	r3, #4
   13a68:	beq	1396c <__assert_fail@plt+0x2b78>
   13a6c:	mvn	r2, r5
   13a70:	lsr	r2, r2, #31
   13a74:	ands	r3, r2, r3, lsr #9
   13a78:	moveq	r4, #0
   13a7c:	beq	139e8 <__assert_fail@plt+0x2bf4>
   13a80:	mov	r0, r5
   13a84:	bl	10dc4 <close@plt>
   13a88:	mov	r4, #0
   13a8c:	b	139e8 <__assert_fail@plt+0x2bf4>
   13a90:	muleq	r1, ip, ip
   13a94:	push	{r4, r5, lr}
   13a98:	sub	sp, sp, #28
   13a9c:	ldr	r2, [r0, #48]	; 0x30
   13aa0:	ldr	r3, [pc, #172]	; 13b54 <__assert_fail@plt+0x2d60>
   13aa4:	and	r3, r3, r2
   13aa8:	cmp	r3, #0
   13aac:	bne	13af4 <__assert_fail@plt+0x2d00>
   13ab0:	ldr	ip, [r1, #4]
   13ab4:	cmp	ip, #0
   13ab8:	beq	13aec <__assert_fail@plt+0x2cf8>
   13abc:	ldr	r3, [ip, #48]	; 0x30
   13ac0:	cmp	r3, #0
   13ac4:	blt	13aec <__assert_fail@plt+0x2cf8>
   13ac8:	ldr	lr, [r0, #56]	; 0x38
   13acc:	ldrd	r2, [lr, #16]
   13ad0:	orrs	r3, r2, r3
   13ad4:	beq	13b24 <__assert_fail@plt+0x2d30>
   13ad8:	ldrd	r4, [lr]
   13adc:	ldrd	r2, [r1, #160]	; 0xa0
   13ae0:	cmp	r5, r3
   13ae4:	cmpeq	r4, r2
   13ae8:	beq	13b28 <__assert_fail@plt+0x2d34>
   13aec:	add	sp, sp, #28
   13af0:	pop	{r4, r5, pc}
   13af4:	ldrd	r2, [r1, #64]	; 0x40
   13af8:	strd	r2, [sp]
   13afc:	ldrd	r2, [r1, #160]	; 0xa0
   13b00:	strd	r2, [sp, #8]
   13b04:	mov	r1, sp
   13b08:	ldr	r0, [r0, #56]	; 0x38
   13b0c:	bl	16ca4 <__assert_fail@plt+0x5eb0>
   13b10:	cmp	r0, #0
   13b14:	beq	13b20 <__assert_fail@plt+0x2d2c>
   13b18:	bl	13034 <__assert_fail@plt+0x2240>
   13b1c:	b	13aec <__assert_fail@plt+0x2cf8>
   13b20:	bl	10db8 <abort@plt>
   13b24:	bl	10db8 <abort@plt>
   13b28:	ldrd	r2, [lr, #8]
   13b2c:	ldrd	r4, [r1, #64]	; 0x40
   13b30:	cmp	r3, r5
   13b34:	cmpeq	r2, r4
   13b38:	bne	13aec <__assert_fail@plt+0x2cf8>
   13b3c:	ldrd	r2, [ip, #64]	; 0x40
   13b40:	strd	r2, [lr, #8]
   13b44:	ldr	r3, [r0, #56]	; 0x38
   13b48:	ldrd	r0, [ip, #160]	; 0xa0
   13b4c:	strd	r0, [r3]
   13b50:	b	13aec <__assert_fail@plt+0x2cf8>
   13b54:	andeq	r0, r0, r2, lsl #2
   13b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b5c:	sub	sp, sp, #68	; 0x44
   13b60:	mov	r5, r0
   13b64:	str	r1, [sp, #40]	; 0x28
   13b68:	ldr	r9, [r0]
   13b6c:	ldr	r3, [r9, #12]
   13b70:	str	r3, [sp, #44]	; 0x2c
   13b74:	cmp	r3, #0
   13b78:	beq	13c78 <__assert_fail@plt+0x2e84>
   13b7c:	mov	r0, r3
   13b80:	bl	10d64 <dirfd@plt>
   13b84:	str	r0, [sp, #60]	; 0x3c
   13b88:	cmp	r0, #0
   13b8c:	blt	13c34 <__assert_fail@plt+0x2e40>
   13b90:	ldr	r3, [r5, #44]	; 0x2c
   13b94:	cmp	r3, #0
   13b98:	ldr	r3, [pc, #2472]	; 14548 <__assert_fail@plt+0x3754>
   13b9c:	mvnne	r3, #0
   13ba0:	str	r3, [sp, #24]
   13ba4:	mov	r3, #1
   13ba8:	str	r3, [sp, #52]	; 0x34
   13bac:	ldr	r3, [r9, #40]	; 0x28
   13bb0:	mov	r1, r3
   13bb4:	sub	r3, r3, #1
   13bb8:	ldr	r2, [r9, #28]
   13bbc:	ldrb	r2, [r2, r3]
   13bc0:	cmp	r2, #47	; 0x2f
   13bc4:	moveq	r1, r3
   13bc8:	str	r1, [sp, #32]
   13bcc:	ldr	r3, [r5, #48]	; 0x30
   13bd0:	tst	r3, #4
   13bd4:	ldrne	r3, [r5, #24]
   13bd8:	addne	r2, r3, r1
   13bdc:	addne	r2, r2, #1
   13be0:	strne	r2, [sp, #28]
   13be4:	movne	r2, #47	; 0x2f
   13be8:	strbne	r2, [r3, r1]
   13bec:	moveq	r3, #0
   13bf0:	streq	r3, [sp, #28]
   13bf4:	ldr	r3, [sp, #32]
   13bf8:	add	r3, r3, #1
   13bfc:	str	r3, [sp, #12]
   13c00:	ldr	fp, [r5, #36]	; 0x24
   13c04:	sub	fp, fp, r3
   13c08:	ldr	r3, [r9, #48]	; 0x30
   13c0c:	add	r3, r3, #1
   13c10:	str	r3, [sp, #20]
   13c14:	mov	r3, #0
   13c18:	str	r3, [sp, #48]	; 0x30
   13c1c:	str	r3, [sp, #36]	; 0x24
   13c20:	str	r3, [sp, #4]
   13c24:	mov	r8, r3
   13c28:	str	r3, [sp, #8]
   13c2c:	mov	sl, r3
   13c30:	b	141a8 <__assert_fail@plt+0x33b4>
   13c34:	ldr	r0, [r9, #12]
   13c38:	bl	10ddc <closedir@plt>
   13c3c:	mov	r3, #0
   13c40:	str	r3, [r9, #12]
   13c44:	ldr	r3, [sp, #40]	; 0x28
   13c48:	cmp	r3, #3
   13c4c:	movne	r3, #0
   13c50:	strne	r3, [sp, #8]
   13c54:	bne	14018 <__assert_fail@plt+0x3224>
   13c58:	mov	r3, #4
   13c5c:	strh	r3, [r9, #56]	; 0x38
   13c60:	bl	10cf8 <__errno_location@plt>
   13c64:	ldr	r3, [r0]
   13c68:	str	r3, [r9, #32]
   13c6c:	mov	r3, #0
   13c70:	str	r3, [sp, #8]
   13c74:	b	14018 <__assert_fail@plt+0x3224>
   13c78:	ldr	r3, [r0, #48]	; 0x30
   13c7c:	and	r2, r3, #516	; 0x204
   13c80:	cmp	r2, #512	; 0x200
   13c84:	ldreq	r0, [r0, #32]
   13c88:	mvnne	r0, #99	; 0x63
   13c8c:	ldr	r1, [r9, #24]
   13c90:	ands	r2, r3, #16
   13c94:	beq	13cb4 <__assert_fail@plt+0x2ec0>
   13c98:	tst	r3, #1
   13c9c:	moveq	r2, #32768	; 0x8000
   13ca0:	beq	13cb4 <__assert_fail@plt+0x2ec0>
   13ca4:	ldr	r2, [r9, #48]	; 0x30
   13ca8:	cmp	r2, #0
   13cac:	movne	r2, #32768	; 0x8000
   13cb0:	moveq	r2, #0
   13cb4:	add	r3, sp, #60	; 0x3c
   13cb8:	bl	16f4c <__assert_fail@plt+0x6158>
   13cbc:	str	r0, [r9, #12]
   13cc0:	cmp	r0, #0
   13cc4:	beq	13db8 <__assert_fail@plt+0x2fc4>
   13cc8:	ldrh	r3, [r9, #56]	; 0x38
   13ccc:	cmp	r3, #11
   13cd0:	beq	13dec <__assert_fail@plt+0x2ff8>
   13cd4:	ldr	r3, [r5, #48]	; 0x30
   13cd8:	tst	r3, #256	; 0x100
   13cdc:	bne	13e04 <__assert_fail@plt+0x3010>
   13ce0:	ldr	r3, [r5, #44]	; 0x2c
   13ce4:	cmp	r3, #0
   13ce8:	ldr	r3, [pc, #2136]	; 14548 <__assert_fail@plt+0x3754>
   13cec:	mvnne	r3, #0
   13cf0:	str	r3, [sp, #24]
   13cf4:	ldr	r3, [sp, #40]	; 0x28
   13cf8:	cmp	r3, #2
   13cfc:	beq	13ef4 <__assert_fail@plt+0x3100>
   13d00:	ldr	r3, [r5, #48]	; 0x30
   13d04:	and	r3, r3, #56	; 0x38
   13d08:	cmp	r3, #24
   13d0c:	beq	13e4c <__assert_fail@plt+0x3058>
   13d10:	ldr	r3, [sp, #40]	; 0x28
   13d14:	cmp	r3, #3
   13d18:	movne	r6, #0
   13d1c:	moveq	r6, #1
   13d20:	mov	r4, #1
   13d24:	ldr	r3, [r5, #48]	; 0x30
   13d28:	tst	r3, #512	; 0x200
   13d2c:	bne	13edc <__assert_fail@plt+0x30e8>
   13d30:	ldr	r2, [sp, #60]	; 0x3c
   13d34:	cmp	r2, #0
   13d38:	blt	13d5c <__assert_fail@plt+0x2f68>
   13d3c:	mov	r3, #0
   13d40:	mov	r1, r9
   13d44:	mov	r0, r5
   13d48:	bl	138ac <__assert_fail@plt+0x2ab8>
   13d4c:	cmp	r0, #0
   13d50:	moveq	r3, #1
   13d54:	streq	r3, [sp, #52]	; 0x34
   13d58:	beq	13bac <__assert_fail@plt+0x2db8>
   13d5c:	tst	r4, r6
   13d60:	beq	13d70 <__assert_fail@plt+0x2f7c>
   13d64:	bl	10cf8 <__errno_location@plt>
   13d68:	ldr	r3, [r0]
   13d6c:	str	r3, [r9, #32]
   13d70:	ldrh	r3, [r9, #58]	; 0x3a
   13d74:	orr	r3, r3, #1
   13d78:	strh	r3, [r9, #58]	; 0x3a
   13d7c:	ldr	r0, [r9, #12]
   13d80:	bl	10ddc <closedir@plt>
   13d84:	mov	r3, #0
   13d88:	str	r3, [r9, #12]
   13d8c:	ldr	r3, [r5, #48]	; 0x30
   13d90:	tst	r3, #512	; 0x200
   13d94:	beq	13da8 <__assert_fail@plt+0x2fb4>
   13d98:	ldr	r0, [sp, #60]	; 0x3c
   13d9c:	cmp	r0, #0
   13da0:	blt	13da8 <__assert_fail@plt+0x2fb4>
   13da4:	bl	10dc4 <close@plt>
   13da8:	mov	r3, #0
   13dac:	str	r3, [r9, #12]
   13db0:	str	r3, [sp, #52]	; 0x34
   13db4:	b	13bac <__assert_fail@plt+0x2db8>
   13db8:	ldr	r3, [sp, #40]	; 0x28
   13dbc:	cmp	r3, #3
   13dc0:	movne	r3, #0
   13dc4:	strne	r3, [sp, #8]
   13dc8:	bne	14018 <__assert_fail@plt+0x3224>
   13dcc:	mov	r3, #4
   13dd0:	strh	r3, [r9, #56]	; 0x38
   13dd4:	bl	10cf8 <__errno_location@plt>
   13dd8:	ldr	r3, [r0]
   13ddc:	str	r3, [r9, #32]
   13de0:	mov	r3, #0
   13de4:	str	r3, [sp, #8]
   13de8:	b	14018 <__assert_fail@plt+0x3224>
   13dec:	mov	r2, #0
   13df0:	mov	r1, r9
   13df4:	mov	r0, r5
   13df8:	bl	131d0 <__assert_fail@plt+0x23dc>
   13dfc:	strh	r0, [r9, #56]	; 0x38
   13e00:	b	13ce0 <__assert_fail@plt+0x2eec>
   13e04:	mov	r1, r9
   13e08:	mov	r0, r5
   13e0c:	bl	13a94 <__assert_fail@plt+0x2ca0>
   13e10:	mov	r2, #0
   13e14:	mov	r1, r9
   13e18:	mov	r0, r5
   13e1c:	bl	131d0 <__assert_fail@plt+0x23dc>
   13e20:	mov	r1, r9
   13e24:	mov	r0, r5
   13e28:	bl	13710 <__assert_fail@plt+0x291c>
   13e2c:	cmp	r0, #0
   13e30:	bne	13ce0 <__assert_fail@plt+0x2eec>
   13e34:	bl	10cf8 <__errno_location@plt>
   13e38:	mov	r3, #12
   13e3c:	str	r3, [r0]
   13e40:	mov	r3, #0
   13e44:	str	r3, [sp, #8]
   13e48:	b	14018 <__assert_fail@plt+0x3224>
   13e4c:	ldr	r3, [r9, #84]	; 0x54
   13e50:	cmp	r3, #2
   13e54:	bne	13d10 <__assert_fail@plt+0x2f1c>
   13e58:	ldr	r1, [sp, #60]	; 0x3c
   13e5c:	mov	r0, r9
   13e60:	bl	135f4 <__assert_fail@plt+0x2800>
   13e64:	ldr	r3, [pc, #1760]	; 1454c <__assert_fail@plt+0x3758>
   13e68:	cmp	r0, r3
   13e6c:	beq	13ec4 <__assert_fail@plt+0x30d0>
   13e70:	bgt	13eac <__assert_fail@plt+0x30b8>
   13e74:	ldr	r3, [pc, #1748]	; 14550 <__assert_fail@plt+0x375c>
   13e78:	cmp	r0, r3
   13e7c:	beq	13ec4 <__assert_fail@plt+0x30d0>
   13e80:	cmp	r0, #0
   13e84:	beq	13ec4 <__assert_fail@plt+0x30d0>
   13e88:	ldr	r3, [sp, #40]	; 0x28
   13e8c:	cmp	r3, #3
   13e90:	moveq	r6, #1
   13e94:	movne	r6, #0
   13e98:	movne	r3, #0
   13e9c:	strne	r3, [sp, #52]	; 0x34
   13ea0:	bne	13bac <__assert_fail@plt+0x2db8>
   13ea4:	mov	r4, #0
   13ea8:	b	13d24 <__assert_fail@plt+0x2f30>
   13eac:	ldr	r3, [pc, #1696]	; 14554 <__assert_fail@plt+0x3760>
   13eb0:	cmp	r0, r3
   13eb4:	beq	13ec4 <__assert_fail@plt+0x30d0>
   13eb8:	ldr	r3, [pc, #1688]	; 14558 <__assert_fail@plt+0x3764>
   13ebc:	cmp	r0, r3
   13ec0:	bne	13e88 <__assert_fail@plt+0x3094>
   13ec4:	ldr	r3, [sp, #40]	; 0x28
   13ec8:	cmp	r3, #3
   13ecc:	movne	r6, #0
   13ed0:	moveq	r6, #1
   13ed4:	mov	r4, #1
   13ed8:	b	13d24 <__assert_fail@plt+0x2f30>
   13edc:	mov	r2, #3
   13ee0:	ldr	r1, [pc, #1652]	; 1455c <__assert_fail@plt+0x3768>
   13ee4:	ldr	r0, [sp, #60]	; 0x3c
   13ee8:	bl	171a0 <__assert_fail@plt+0x63ac>
   13eec:	str	r0, [sp, #60]	; 0x3c
   13ef0:	b	13d30 <__assert_fail@plt+0x2f3c>
   13ef4:	mov	r3, #0
   13ef8:	str	r3, [sp, #52]	; 0x34
   13efc:	b	13bac <__assert_fail@plt+0x2db8>
   13f00:	ldr	r3, [sp, #16]
   13f04:	ldr	r3, [r3]
   13f08:	cmp	r3, #0
   13f0c:	beq	13f38 <__assert_fail@plt+0x3144>
   13f10:	str	r3, [r9, #32]
   13f14:	ldr	r3, [sp, #44]	; 0x2c
   13f18:	cmp	r8, #0
   13f1c:	cmpeq	r3, #0
   13f20:	movne	r3, #1
   13f24:	moveq	r3, #0
   13f28:	cmp	r3, #0
   13f2c:	movne	r3, #7
   13f30:	moveq	r3, #4
   13f34:	strh	r3, [r9, #56]	; 0x38
   13f38:	ldr	r0, [r9, #12]
   13f3c:	cmp	r0, #0
   13f40:	beq	13f50 <__assert_fail@plt+0x315c>
   13f44:	bl	10ddc <closedir@plt>
   13f48:	mov	r3, #0
   13f4c:	str	r3, [r9, #12]
   13f50:	ldr	r3, [sp, #36]	; 0x24
   13f54:	cmp	r3, #0
   13f58:	bne	14398 <__assert_fail@plt+0x35a4>
   13f5c:	ldr	r3, [r5, #48]	; 0x30
   13f60:	tst	r3, #4
   13f64:	beq	13f90 <__assert_fail@plt+0x319c>
   13f68:	ldr	r3, [r5, #36]	; 0x24
   13f6c:	ldr	r2, [sp, #12]
   13f70:	cmp	r8, #0
   13f74:	cmpne	r3, r2
   13f78:	ldreq	r3, [sp, #28]
   13f7c:	subeq	r3, r3, #1
   13f80:	streq	r3, [sp, #28]
   13f84:	mov	r3, #0
   13f88:	ldr	r2, [sp, #28]
   13f8c:	strb	r3, [r2]
   13f90:	ldr	r3, [sp, #52]	; 0x34
   13f94:	ldr	r2, [sp, #44]	; 0x2c
   13f98:	cmp	r2, #0
   13f9c:	movne	r3, #0
   13fa0:	andeq	r3, r3, #1
   13fa4:	cmp	r3, #0
   13fa8:	beq	13fe0 <__assert_fail@plt+0x31ec>
   13fac:	ldr	r3, [sp, #40]	; 0x28
   13fb0:	cmp	r8, #0
   13fb4:	cmpne	r3, #1
   13fb8:	bne	13fe0 <__assert_fail@plt+0x31ec>
   13fbc:	ldr	r3, [r9, #48]	; 0x30
   13fc0:	cmp	r3, #0
   13fc4:	bne	14418 <__assert_fail@plt+0x3624>
   13fc8:	mov	r0, r5
   13fcc:	bl	1385c <__assert_fail@plt+0x2a68>
   13fd0:	adds	r0, r0, #0
   13fd4:	movne	r0, #1
   13fd8:	cmp	r0, #0
   13fdc:	bne	14438 <__assert_fail@plt+0x3644>
   13fe0:	cmp	r8, #0
   13fe4:	beq	14460 <__assert_fail@plt+0x366c>
   13fe8:	ldr	r3, [sp, #48]	; 0x30
   13fec:	cmp	r3, #0
   13ff0:	bne	14498 <__assert_fail@plt+0x36a4>
   13ff4:	ldr	r3, [r5, #44]	; 0x2c
   13ff8:	cmp	r3, #0
   13ffc:	cmpne	r8, #1
   14000:	bls	14018 <__assert_fail@plt+0x3224>
   14004:	mov	r2, r8
   14008:	ldr	r1, [sp, #8]
   1400c:	mov	r0, r5
   14010:	bl	13328 <__assert_fail@plt+0x2534>
   14014:	str	r0, [sp, #8]
   14018:	ldr	r0, [sp, #8]
   1401c:	add	sp, sp, #68	; 0x44
   14020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14024:	ldrb	r3, [r7, #20]
   14028:	cmp	r3, #0
   1402c:	beq	14390 <__assert_fail@plt+0x359c>
   14030:	ldrh	r3, [r7, #20]
   14034:	cmp	r3, #46	; 0x2e
   14038:	bne	141e8 <__assert_fail@plt+0x33f4>
   1403c:	ldr	r4, [sp, #4]
   14040:	b	141a4 <__assert_fail@plt+0x33b0>
   14044:	ldr	fp, [r5, #24]
   14048:	ldr	r3, [sp, #32]
   1404c:	add	r1, r3, #2
   14050:	add	r1, r1, r6
   14054:	mov	r0, r5
   14058:	bl	13160 <__assert_fail@plt+0x236c>
   1405c:	cmp	r0, #0
   14060:	beq	14098 <__assert_fail@plt+0x32a4>
   14064:	ldr	r3, [r5, #24]
   14068:	cmp	fp, r3
   1406c:	beq	140e0 <__assert_fail@plt+0x32ec>
   14070:	ldr	r2, [r5, #48]	; 0x30
   14074:	tst	r2, #4
   14078:	ldrne	r2, [sp, #12]
   1407c:	addne	r3, r3, r2
   14080:	strne	r3, [sp, #28]
   14084:	ldr	fp, [r5, #36]	; 0x24
   14088:	ldr	r3, [sp, #12]
   1408c:	sub	fp, fp, r3
   14090:	str	r0, [sp, #36]	; 0x24
   14094:	b	14218 <__assert_fail@plt+0x3424>
   14098:	ldr	r7, [sp, #16]
   1409c:	ldr	r6, [r7]
   140a0:	mov	r0, r4
   140a4:	bl	13034 <__assert_fail@plt+0x2240>
   140a8:	ldr	r0, [sp, #8]
   140ac:	bl	13544 <__assert_fail@plt+0x2750>
   140b0:	ldr	r0, [r9, #12]
   140b4:	bl	10ddc <closedir@plt>
   140b8:	mov	r2, #0
   140bc:	str	r2, [r9, #12]
   140c0:	mov	r3, #7
   140c4:	strh	r3, [r9, #56]	; 0x38
   140c8:	ldr	r3, [r5, #48]	; 0x30
   140cc:	orr	r3, r3, #8192	; 0x2000
   140d0:	str	r3, [r5, #48]	; 0x30
   140d4:	str	r6, [r7]
   140d8:	str	r2, [sp, #8]
   140dc:	b	14018 <__assert_fail@plt+0x3224>
   140e0:	ldr	r0, [sp, #36]	; 0x24
   140e4:	b	14084 <__assert_fail@plt+0x3290>
   140e8:	mov	r0, r4
   140ec:	bl	13034 <__assert_fail@plt+0x2240>
   140f0:	ldr	r0, [sp, #8]
   140f4:	bl	13544 <__assert_fail@plt+0x2750>
   140f8:	ldr	r0, [r9, #12]
   140fc:	bl	10ddc <closedir@plt>
   14100:	mov	r2, #0
   14104:	str	r2, [r9, #12]
   14108:	mov	r3, #7
   1410c:	strh	r3, [r9, #56]	; 0x38
   14110:	ldr	r3, [r5, #48]	; 0x30
   14114:	orr	r3, r3, #8192	; 0x2000
   14118:	str	r3, [r5, #48]	; 0x30
   1411c:	mov	r3, #36	; 0x24
   14120:	ldr	r1, [sp, #16]
   14124:	str	r3, [r1]
   14128:	str	r2, [sp, #8]
   1412c:	b	14018 <__assert_fail@plt+0x3224>
   14130:	ldr	r3, [r4, #28]
   14134:	str	r3, [r4, #24]
   14138:	ldr	r2, [r4, #52]	; 0x34
   1413c:	add	r2, r2, #1
   14140:	add	r1, r4, #168	; 0xa8
   14144:	ldr	r0, [sp, #28]
   14148:	bl	10bd8 <memmove@plt>
   1414c:	b	14254 <__assert_fail@plt+0x3460>
   14150:	mov	r3, sl
   14154:	mov	r2, #16384	; 0x4000
   14158:	str	r2, [r4, #80]	; 0x50
   1415c:	cmp	r3, #0
   14160:	movne	r2, #1
   14164:	moveq	r2, #2
   14168:	mov	r3, #0
   1416c:	strd	r2, [r4, #112]	; 0x70
   14170:	str	sl, [r4, #8]
   14174:	ldr	r3, [sp, #8]
   14178:	cmp	r3, #0
   1417c:	ldrne	r3, [sp, #4]
   14180:	strne	r4, [r3, #8]
   14184:	streq	r4, [sp, #8]
   14188:	ldr	r3, [pc, #976]	; 14560 <__assert_fail@plt+0x376c>
   1418c:	cmp	r8, r3
   14190:	beq	14344 <__assert_fail@plt+0x3550>
   14194:	add	r8, r8, #1
   14198:	ldr	r3, [sp, #24]
   1419c:	cmp	r8, r3
   141a0:	bcs	13f50 <__assert_fail@plt+0x315c>
   141a4:	str	r4, [sp, #4]
   141a8:	ldr	r3, [r9, #12]
   141ac:	cmp	r3, #0
   141b0:	beq	13f50 <__assert_fail@plt+0x315c>
   141b4:	bl	10cf8 <__errno_location@plt>
   141b8:	str	r0, [sp, #16]
   141bc:	str	sl, [r0]
   141c0:	ldr	r0, [r9, #12]
   141c4:	bl	10d40 <readdir64@plt>
   141c8:	subs	r7, r0, #0
   141cc:	beq	13f00 <__assert_fail@plt+0x310c>
   141d0:	ldr	r3, [r5, #48]	; 0x30
   141d4:	tst	r3, #32
   141d8:	bne	141e8 <__assert_fail@plt+0x33f4>
   141dc:	ldrb	r3, [r7, #19]
   141e0:	cmp	r3, #46	; 0x2e
   141e4:	beq	14024 <__assert_fail@plt+0x3230>
   141e8:	add	r4, r7, #19
   141ec:	mov	r0, r4
   141f0:	bl	10cc8 <strlen@plt>
   141f4:	mov	r6, r0
   141f8:	mov	r2, r0
   141fc:	mov	r1, r4
   14200:	mov	r0, r5
   14204:	bl	133fc <__assert_fail@plt+0x2608>
   14208:	subs	r4, r0, #0
   1420c:	beq	14098 <__assert_fail@plt+0x32a4>
   14210:	cmp	fp, r6
   14214:	bls	14044 <__assert_fail@plt+0x3250>
   14218:	ldr	r3, [sp, #12]
   1421c:	adds	r6, r3, r6
   14220:	bcs	140e8 <__assert_fail@plt+0x32f4>
   14224:	ldr	r3, [sp, #20]
   14228:	str	r3, [r4, #48]	; 0x30
   1422c:	ldr	r3, [r5]
   14230:	str	r3, [r4, #4]
   14234:	str	r6, [r4, #40]	; 0x28
   14238:	ldrd	r2, [r7]
   1423c:	strd	r2, [r4, #160]	; 0xa0
   14240:	ldr	r3, [r5, #48]	; 0x30
   14244:	tst	r3, #4
   14248:	addeq	r3, r4, #168	; 0xa8
   1424c:	streq	r3, [r4, #24]
   14250:	bne	14130 <__assert_fail@plt+0x333c>
   14254:	ldr	r3, [r5, #44]	; 0x2c
   14258:	cmp	r3, #0
   1425c:	beq	1426c <__assert_fail@plt+0x3478>
   14260:	ldr	r3, [r5, #48]	; 0x30
   14264:	tst	r3, #1024	; 0x400
   14268:	beq	1432c <__assert_fail@plt+0x3538>
   1426c:	ldr	r3, [r5, #48]	; 0x30
   14270:	tst	r3, #8
   14274:	beq	144fc <__assert_fail@plt+0x3708>
   14278:	ldrb	r2, [r7, #18]
   1427c:	tst	r2, #251	; 0xfb
   14280:	beq	144fc <__assert_fail@plt+0x3708>
   14284:	lsr	r3, r3, #4
   14288:	and	r3, r3, #1
   1428c:	cmp	r2, #10
   14290:	orrne	r3, r3, #1
   14294:	cmp	r3, #0
   14298:	beq	144fc <__assert_fail@plt+0x3708>
   1429c:	mov	r2, #11
   142a0:	strh	r2, [r4, #56]	; 0x38
   142a4:	ldrb	r2, [r7, #18]
   142a8:	sub	r2, r2, #1
   142ac:	cmp	r2, #11
   142b0:	ldrls	pc, [pc, r2, lsl #2]
   142b4:	b	1431c <__assert_fail@plt+0x3528>
   142b8:	andeq	r4, r1, ip, ror #5
   142bc:	andeq	r4, r1, r4, lsr #6
   142c0:	andeq	r4, r1, ip, lsl r3
   142c4:	andeq	r4, r1, r4, asr r1
   142c8:	andeq	r4, r1, ip, lsl r3
   142cc:	andeq	r4, r1, r0, asr #9
   142d0:	andeq	r4, r1, ip, lsl r3
   142d4:	andeq	r4, r1, r4, lsl #6
   142d8:	andeq	r4, r1, ip, lsl r3
   142dc:	strdeq	r4, [r1], -r8
   142e0:	andeq	r4, r1, ip, lsl r3
   142e4:	andeq	r4, r1, r0, lsl r3
   142e8:	mov	r3, sl
   142ec:	mov	r2, #4096	; 0x1000
   142f0:	b	14158 <__assert_fail@plt+0x3364>
   142f4:	mov	r3, sl
   142f8:	mov	r2, #40960	; 0xa000
   142fc:	b	14158 <__assert_fail@plt+0x3364>
   14300:	mov	r3, sl
   14304:	mov	r2, #32768	; 0x8000
   14308:	b	14158 <__assert_fail@plt+0x3364>
   1430c:	mov	r3, sl
   14310:	mov	r2, #49152	; 0xc000
   14314:	b	14158 <__assert_fail@plt+0x3364>
   14318:	mov	r3, sl
   1431c:	mov	r2, sl
   14320:	b	14158 <__assert_fail@plt+0x3364>
   14324:	mov	r2, #8192	; 0x2000
   14328:	b	14158 <__assert_fail@plt+0x3364>
   1432c:	mov	r2, sl
   14330:	mov	r1, r4
   14334:	mov	r0, r5
   14338:	bl	131d0 <__assert_fail@plt+0x23dc>
   1433c:	strh	r0, [r4, #56]	; 0x38
   14340:	b	14170 <__assert_fail@plt+0x337c>
   14344:	ldr	r3, [r5, #44]	; 0x2c
   14348:	cmp	r3, #0
   1434c:	bne	14194 <__assert_fail@plt+0x33a0>
   14350:	ldr	r1, [sp, #60]	; 0x3c
   14354:	mov	r0, r9
   14358:	bl	135f4 <__assert_fail@plt+0x2800>
   1435c:	ldr	r3, [pc, #488]	; 1454c <__assert_fail@plt+0x3758>
   14360:	cmp	r0, r3
   14364:	beq	14388 <__assert_fail@plt+0x3594>
   14368:	ldr	r3, [pc, #500]	; 14564 <__assert_fail@plt+0x3770>
   1436c:	cmp	r0, r3
   14370:	beq	14388 <__assert_fail@plt+0x3594>
   14374:	ldr	r3, [pc, #468]	; 14550 <__assert_fail@plt+0x375c>
   14378:	cmp	r0, r3
   1437c:	movne	r3, #1
   14380:	strne	r3, [sp, #48]	; 0x30
   14384:	bne	14194 <__assert_fail@plt+0x33a0>
   14388:	str	sl, [sp, #48]	; 0x30
   1438c:	b	14194 <__assert_fail@plt+0x33a0>
   14390:	ldr	r4, [sp, #4]
   14394:	b	141a4 <__assert_fail@plt+0x33b0>
   14398:	ldr	r0, [r5, #24]
   1439c:	ldr	r1, [r5, #4]
   143a0:	cmp	r1, #0
   143a4:	beq	143d4 <__assert_fail@plt+0x35e0>
   143a8:	ldr	r3, [r1, #24]
   143ac:	add	r2, r1, #168	; 0xa8
   143b0:	cmp	r3, r2
   143b4:	ldrne	r2, [r1, #28]
   143b8:	subne	r3, r3, r2
   143bc:	addne	r3, r0, r3
   143c0:	strne	r3, [r1, #24]
   143c4:	str	r0, [r1, #28]
   143c8:	ldr	r1, [r1, #8]
   143cc:	cmp	r1, #0
   143d0:	bne	143a8 <__assert_fail@plt+0x35b4>
   143d4:	ldr	r3, [sp, #8]
   143d8:	ldr	r2, [r3, #48]	; 0x30
   143dc:	cmp	r2, #0
   143e0:	blt	13f5c <__assert_fail@plt+0x3168>
   143e4:	ldr	r2, [r3, #24]
   143e8:	add	r1, r3, #168	; 0xa8
   143ec:	cmp	r2, r1
   143f0:	ldrne	r1, [r3, #28]
   143f4:	subne	r2, r2, r1
   143f8:	addne	r2, r0, r2
   143fc:	strne	r2, [r3, #24]
   14400:	str	r0, [r3, #28]
   14404:	ldr	r2, [r3, #8]
   14408:	cmp	r2, #0
   1440c:	ldreq	r2, [r3, #4]
   14410:	mov	r3, r2
   14414:	b	143d8 <__assert_fail@plt+0x35e4>
   14418:	ldr	r3, [pc, #328]	; 14568 <__assert_fail@plt+0x3774>
   1441c:	mvn	r2, #0
   14420:	ldr	r1, [r9, #4]
   14424:	mov	r0, r5
   14428:	bl	138ac <__assert_fail@plt+0x2ab8>
   1442c:	adds	r0, r0, #0
   14430:	movne	r0, #1
   14434:	b	13fd8 <__assert_fail@plt+0x31e4>
   14438:	mov	r3, #7
   1443c:	strh	r3, [r9, #56]	; 0x38
   14440:	ldr	r3, [r5, #48]	; 0x30
   14444:	orr	r3, r3, #8192	; 0x2000
   14448:	str	r3, [r5, #48]	; 0x30
   1444c:	ldr	r0, [sp, #8]
   14450:	bl	13544 <__assert_fail@plt+0x2750>
   14454:	mov	r3, #0
   14458:	str	r3, [sp, #8]
   1445c:	b	14018 <__assert_fail@plt+0x3224>
   14460:	ldr	r3, [sp, #40]	; 0x28
   14464:	cmp	r3, #3
   14468:	beq	14480 <__assert_fail@plt+0x368c>
   1446c:	ldr	r0, [sp, #8]
   14470:	bl	13544 <__assert_fail@plt+0x2750>
   14474:	mov	r3, #0
   14478:	str	r3, [sp, #8]
   1447c:	b	14018 <__assert_fail@plt+0x3224>
   14480:	ldrh	r3, [r9, #56]	; 0x38
   14484:	cmp	r3, #4
   14488:	cmpne	r3, #7
   1448c:	movne	r3, #6
   14490:	strhne	r3, [r9, #56]	; 0x38
   14494:	b	1446c <__assert_fail@plt+0x3678>
   14498:	ldr	r3, [pc, #204]	; 1456c <__assert_fail@plt+0x3778>
   1449c:	str	r3, [r5, #44]	; 0x2c
   144a0:	mov	r2, r8
   144a4:	ldr	r1, [sp, #8]
   144a8:	mov	r0, r5
   144ac:	bl	13328 <__assert_fail@plt+0x2534>
   144b0:	str	r0, [sp, #8]
   144b4:	mov	r3, #0
   144b8:	str	r3, [r5, #44]	; 0x2c
   144bc:	b	14018 <__assert_fail@plt+0x3224>
   144c0:	mov	r3, #24576	; 0x6000
   144c4:	str	r3, [r4, #80]	; 0x50
   144c8:	mov	r2, #1
   144cc:	mov	r3, #0
   144d0:	b	1416c <__assert_fail@plt+0x3378>
   144d4:	mov	r3, #24576	; 0x6000
   144d8:	str	r3, [r4, #80]	; 0x50
   144dc:	mov	r2, #2
   144e0:	mov	r3, #0
   144e4:	b	1416c <__assert_fail@plt+0x3378>
   144e8:	mov	r3, #8192	; 0x2000
   144ec:	str	r3, [r4, #80]	; 0x50
   144f0:	mov	r2, #2
   144f4:	mov	r3, #0
   144f8:	b	1416c <__assert_fail@plt+0x3378>
   144fc:	mov	r3, #11
   14500:	strh	r3, [r4, #56]	; 0x38
   14504:	ldrb	r3, [r7, #18]
   14508:	sub	r3, r3, #1
   1450c:	cmp	r3, #11
   14510:	ldrls	pc, [pc, r3, lsl #2]
   14514:	b	14318 <__assert_fail@plt+0x3524>
   14518:	andeq	r4, r1, r8, ror #5
   1451c:	andeq	r4, r1, r8, ror #9
   14520:	andeq	r4, r1, r8, lsl r3
   14524:	andeq	r4, r1, r0, asr r1
   14528:	andeq	r4, r1, r8, lsl r3
   1452c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14530:	andeq	r4, r1, r8, lsl r3
   14534:	andeq	r4, r1, r0, lsl #6
   14538:	andeq	r4, r1, r8, lsl r3
   1453c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14540:	andeq	r4, r1, r8, lsl r3
   14544:	andeq	r4, r1, ip, lsl #6
   14548:	andeq	r8, r1, r0, lsr #13
   1454c:	andeq	r6, r0, r9, ror #18
   14550:			; <UNDEFINED> instruction: 0xff534d42
   14554:	andeq	r9, r0, r0, lsr #31
   14558:	movtpl	r4, #24911	; 0x614f
   1455c:	andeq	r0, r0, r6, lsl #8
   14560:	andeq	r2, r0, r0, lsl r7
   14564:			; <UNDEFINED> instruction: 0x01021994
   14568:	muleq	r1, ip, ip
   1456c:	andeq	r3, r1, r8, lsr #2
   14570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14574:	sub	sp, sp, #20
   14578:	bic	r3, r1, #4080	; 0xff0
   1457c:	bics	r3, r3, #15
   14580:	bne	146a0 <__assert_fail@plt+0x38ac>
   14584:	mov	r7, r0
   14588:	mov	r9, r1
   1458c:	mov	fp, r2
   14590:	and	r3, r1, #516	; 0x204
   14594:	cmp	r3, #516	; 0x204
   14598:	beq	146b4 <__assert_fail@plt+0x38c0>
   1459c:	tst	r1, #18
   145a0:	beq	146c8 <__assert_fail@plt+0x38d4>
   145a4:	mov	r1, #96	; 0x60
   145a8:	mov	r0, #1
   145ac:	bl	16fe8 <__assert_fail@plt+0x61f4>
   145b0:	subs	r6, r0, #0
   145b4:	beq	148e4 <__assert_fail@plt+0x3af0>
   145b8:	str	fp, [r6, #44]	; 0x2c
   145bc:	tst	r9, #2
   145c0:	streq	r9, [r6, #48]	; 0x30
   145c4:	bicne	r3, r9, #512	; 0x200
   145c8:	orrne	r3, r3, #4
   145cc:	strne	r3, [r6, #48]	; 0x30
   145d0:	mvn	r3, #99	; 0x63
   145d4:	str	r3, [r6, #32]
   145d8:	ldr	r0, [r7]
   145dc:	cmp	r0, #0
   145e0:	beq	146dc <__assert_fail@plt+0x38e8>
   145e4:	mov	r5, r7
   145e8:	mov	r4, #0
   145ec:	bl	10cc8 <strlen@plt>
   145f0:	cmp	r4, r0
   145f4:	movcc	r4, r0
   145f8:	ldr	r0, [r5, #4]!
   145fc:	cmp	r0, #0
   14600:	bne	145ec <__assert_fail@plt+0x37f8>
   14604:	add	r1, r4, #1
   14608:	cmp	r1, #4096	; 0x1000
   1460c:	movcc	r1, #4096	; 0x1000
   14610:	mov	r0, r6
   14614:	bl	13160 <__assert_fail@plt+0x236c>
   14618:	subs	sl, r0, #0
   1461c:	beq	148d8 <__assert_fail@plt+0x3ae4>
   14620:	ldr	r3, [r7]
   14624:	cmp	r3, #0
   14628:	beq	148f0 <__assert_fail@plt+0x3afc>
   1462c:	mov	r2, #0
   14630:	ldr	r1, [pc, #716]	; 14904 <__assert_fail@plt+0x3b10>
   14634:	mov	r0, r6
   14638:	bl	133fc <__assert_fail@plt+0x2608>
   1463c:	subs	r3, r0, #0
   14640:	mov	r2, r3
   14644:	str	r3, [sp, #8]
   14648:	beq	148d0 <__assert_fail@plt+0x3adc>
   1464c:	mvn	r3, #0
   14650:	str	r3, [r2, #48]	; 0x30
   14654:	cmp	fp, #0
   14658:	beq	14668 <__assert_fail@plt+0x3874>
   1465c:	ldr	sl, [r6, #48]	; 0x30
   14660:	lsr	sl, sl, #10
   14664:	and	sl, sl, #1
   14668:	ldr	r4, [r7]
   1466c:	cmp	r4, #0
   14670:	beq	14880 <__assert_fail@plt+0x3a8c>
   14674:	mov	r3, #0
   14678:	mov	r5, r3
   1467c:	str	r3, [sp, #12]
   14680:	mov	r8, r3
   14684:	lsr	r9, r9, #11
   14688:	eor	r9, r9, #1
   1468c:	and	r3, r9, #1
   14690:	mov	r9, r5
   14694:	str	r6, [sp, #4]
   14698:	mov	r6, r3
   1469c:	b	14754 <__assert_fail@plt+0x3960>
   146a0:	bl	10cf8 <__errno_location@plt>
   146a4:	mov	r3, #22
   146a8:	str	r3, [r0]
   146ac:	mov	r6, #0
   146b0:	b	148e4 <__assert_fail@plt+0x3af0>
   146b4:	bl	10cf8 <__errno_location@plt>
   146b8:	mov	r3, #22
   146bc:	str	r3, [r0]
   146c0:	mov	r6, #0
   146c4:	b	148e4 <__assert_fail@plt+0x3af0>
   146c8:	bl	10cf8 <__errno_location@plt>
   146cc:	mov	r3, #22
   146d0:	str	r3, [r0]
   146d4:	mov	r6, #0
   146d8:	b	148e4 <__assert_fail@plt+0x3af0>
   146dc:	mov	r4, #0
   146e0:	b	14604 <__assert_fail@plt+0x3810>
   146e4:	mov	r1, r4
   146e8:	ldr	r0, [sp, #4]
   146ec:	bl	133fc <__assert_fail@plt+0x2608>
   146f0:	subs	r4, r0, #0
   146f4:	beq	148bc <__assert_fail@plt+0x3ac8>
   146f8:	str	r9, [r4, #48]	; 0x30
   146fc:	ldr	r3, [sp, #8]
   14700:	str	r3, [r4, #4]
   14704:	add	r3, r4, #168	; 0xa8
   14708:	str	r3, [r4, #24]
   1470c:	cmp	r5, #0
   14710:	moveq	r3, #0
   14714:	andne	r3, sl, #1
   14718:	cmp	r3, #0
   1471c:	beq	147bc <__assert_fail@plt+0x39c8>
   14720:	mov	r3, #11
   14724:	strh	r3, [r4, #56]	; 0x38
   14728:	mov	r2, #2
   1472c:	mov	r3, #0
   14730:	strd	r2, [r4, #112]	; 0x70
   14734:	cmp	fp, #0
   14738:	beq	147d4 <__assert_fail@plt+0x39e0>
   1473c:	str	r5, [r4, #8]
   14740:	mov	r5, r4
   14744:	add	r8, r8, #1
   14748:	ldr	r4, [r7, #4]!
   1474c:	cmp	r4, #0
   14750:	beq	147f4 <__assert_fail@plt+0x3a00>
   14754:	mov	r0, r4
   14758:	bl	10cc8 <strlen@plt>
   1475c:	mov	r2, r0
   14760:	cmp	r0, #2
   14764:	movls	r3, #0
   14768:	andhi	r3, r6, #1
   1476c:	cmp	r3, #0
   14770:	beq	146e4 <__assert_fail@plt+0x38f0>
   14774:	add	r3, r4, r0
   14778:	ldrb	r3, [r3, #-1]
   1477c:	cmp	r3, #47	; 0x2f
   14780:	bne	146e4 <__assert_fail@plt+0x38f0>
   14784:	cmp	r0, #1
   14788:	bls	146e4 <__assert_fail@plt+0x38f0>
   1478c:	sub	r1, r0, #2
   14790:	add	r3, r4, r1
   14794:	ldrb	r1, [r4, r1]
   14798:	cmp	r1, #47	; 0x2f
   1479c:	bne	146e4 <__assert_fail@plt+0x38f0>
   147a0:	sub	r2, r2, #1
   147a4:	cmp	r2, #1
   147a8:	beq	146e4 <__assert_fail@plt+0x38f0>
   147ac:	ldrb	r1, [r3, #-1]!
   147b0:	cmp	r1, #47	; 0x2f
   147b4:	beq	147a0 <__assert_fail@plt+0x39ac>
   147b8:	b	146e4 <__assert_fail@plt+0x38f0>
   147bc:	mov	r2, r9
   147c0:	mov	r1, r4
   147c4:	ldr	r0, [sp, #4]
   147c8:	bl	131d0 <__assert_fail@plt+0x23dc>
   147cc:	strh	r0, [r4, #56]	; 0x38
   147d0:	b	14734 <__assert_fail@plt+0x3940>
   147d4:	str	r9, [r4, #8]
   147d8:	cmp	r5, #0
   147dc:	ldrne	r3, [sp, #12]
   147e0:	strne	r4, [r3, #8]
   147e4:	strne	r4, [sp, #12]
   147e8:	streq	r4, [sp, #12]
   147ec:	moveq	r5, r4
   147f0:	b	14744 <__assert_fail@plt+0x3950>
   147f4:	ldr	r6, [sp, #4]
   147f8:	cmp	fp, #0
   147fc:	cmpne	r8, #1
   14800:	bhi	14868 <__assert_fail@plt+0x3a74>
   14804:	mov	r2, #0
   14808:	ldr	r1, [pc, #244]	; 14904 <__assert_fail@plt+0x3b10>
   1480c:	mov	r0, r6
   14810:	bl	133fc <__assert_fail@plt+0x2608>
   14814:	str	r0, [r6]
   14818:	cmp	r0, #0
   1481c:	beq	148c0 <__assert_fail@plt+0x3acc>
   14820:	str	r5, [r0, #8]
   14824:	ldr	r3, [r6]
   14828:	mov	r2, #9
   1482c:	strh	r2, [r3, #56]	; 0x38
   14830:	ldr	r3, [r6]
   14834:	mov	r2, #1
   14838:	str	r2, [r3, #48]	; 0x30
   1483c:	mov	r0, r6
   14840:	bl	13470 <__assert_fail@plt+0x267c>
   14844:	cmp	r0, #0
   14848:	beq	148c0 <__assert_fail@plt+0x3acc>
   1484c:	ldr	r3, [r6, #48]	; 0x30
   14850:	tst	r3, #516	; 0x204
   14854:	beq	14898 <__assert_fail@plt+0x3aa4>
   14858:	mvn	r1, #0
   1485c:	add	r0, r6, #60	; 0x3c
   14860:	bl	16db8 <__assert_fail@plt+0x5fc4>
   14864:	b	148e4 <__assert_fail@plt+0x3af0>
   14868:	mov	r2, r8
   1486c:	mov	r1, r5
   14870:	mov	r0, r6
   14874:	bl	13328 <__assert_fail@plt+0x2534>
   14878:	mov	r5, r0
   1487c:	b	14804 <__assert_fail@plt+0x3a10>
   14880:	mov	r5, #0
   14884:	b	14804 <__assert_fail@plt+0x3a10>
   14888:	mov	r3, #0
   1488c:	str	r3, [sp, #8]
   14890:	mov	r5, r3
   14894:	b	14804 <__assert_fail@plt+0x3a10>
   14898:	ldr	r1, [pc, #104]	; 14908 <__assert_fail@plt+0x3b14>
   1489c:	mov	r0, r6
   148a0:	bl	134f4 <__assert_fail@plt+0x2700>
   148a4:	str	r0, [r6, #28]
   148a8:	cmp	r0, #0
   148ac:	ldrlt	r3, [r6, #48]	; 0x30
   148b0:	orrlt	r3, r3, #4
   148b4:	strlt	r3, [r6, #48]	; 0x30
   148b8:	b	14858 <__assert_fail@plt+0x3a64>
   148bc:	ldr	r6, [sp, #4]
   148c0:	mov	r0, r5
   148c4:	bl	13544 <__assert_fail@plt+0x2750>
   148c8:	ldr	r0, [sp, #8]
   148cc:	bl	13034 <__assert_fail@plt+0x2240>
   148d0:	ldr	r0, [r6, #24]
   148d4:	bl	13034 <__assert_fail@plt+0x2240>
   148d8:	mov	r0, r6
   148dc:	bl	13034 <__assert_fail@plt+0x2240>
   148e0:	mov	r6, #0
   148e4:	mov	r0, r6
   148e8:	add	sp, sp, #20
   148ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f0:	cmp	fp, #0
   148f4:	beq	14888 <__assert_fail@plt+0x3a94>
   148f8:	mov	r3, #0
   148fc:	str	r3, [sp, #8]
   14900:	b	1465c <__assert_fail@plt+0x3868>
   14904:	andeq	r7, r1, ip, asr #27
   14908:	andeq	r7, r1, r0, lsr #25
   1490c:	push	{r4, r5, r6, lr}
   14910:	mov	r5, r0
   14914:	ldr	r0, [r0]
   14918:	cmp	r0, #0
   1491c:	beq	14954 <__assert_fail@plt+0x3b60>
   14920:	ldr	r3, [r0, #48]	; 0x30
   14924:	cmp	r3, #0
   14928:	blt	149b8 <__assert_fail@plt+0x3bc4>
   1492c:	ldr	r4, [r0, #8]
   14930:	cmp	r4, #0
   14934:	ldreq	r4, [r0, #4]
   14938:	bl	13034 <__assert_fail@plt+0x2240>
   1493c:	mov	r0, r4
   14940:	ldr	r3, [r4, #48]	; 0x30
   14944:	cmp	r3, #0
   14948:	bge	1492c <__assert_fail@plt+0x3b38>
   1494c:	mov	r0, r4
   14950:	bl	13034 <__assert_fail@plt+0x2240>
   14954:	ldr	r0, [r5, #4]
   14958:	cmp	r0, #0
   1495c:	beq	14964 <__assert_fail@plt+0x3b70>
   14960:	bl	13544 <__assert_fail@plt+0x2750>
   14964:	ldr	r0, [r5, #8]
   14968:	bl	13034 <__assert_fail@plt+0x2240>
   1496c:	ldr	r0, [r5, #24]
   14970:	bl	13034 <__assert_fail@plt+0x2240>
   14974:	ldr	r3, [r5, #48]	; 0x30
   14978:	tst	r3, #512	; 0x200
   1497c:	beq	149c0 <__assert_fail@plt+0x3bcc>
   14980:	ldr	r0, [r5, #32]
   14984:	cmp	r0, #0
   14988:	blt	149c8 <__assert_fail@plt+0x3bd4>
   1498c:	bl	10dc4 <close@plt>
   14990:	cmp	r0, #0
   14994:	beq	149c8 <__assert_fail@plt+0x3bd4>
   14998:	bl	10cf8 <__errno_location@plt>
   1499c:	ldr	r4, [r0]
   149a0:	add	r0, r5, #60	; 0x3c
   149a4:	bl	135c0 <__assert_fail@plt+0x27cc>
   149a8:	ldr	r0, [r5, #52]	; 0x34
   149ac:	cmp	r0, #0
   149b0:	bne	149e0 <__assert_fail@plt+0x3bec>
   149b4:	b	149e4 <__assert_fail@plt+0x3bf0>
   149b8:	mov	r4, r0
   149bc:	b	1494c <__assert_fail@plt+0x3b58>
   149c0:	tst	r3, #4
   149c4:	beq	14a04 <__assert_fail@plt+0x3c10>
   149c8:	add	r0, r5, #60	; 0x3c
   149cc:	bl	135c0 <__assert_fail@plt+0x27cc>
   149d0:	ldr	r0, [r5, #52]	; 0x34
   149d4:	cmp	r0, #0
   149d8:	movne	r4, #0
   149dc:	beq	14a58 <__assert_fail@plt+0x3c64>
   149e0:	bl	168b0 <__assert_fail@plt+0x5abc>
   149e4:	mov	r0, r5
   149e8:	bl	13584 <__assert_fail@plt+0x2790>
   149ec:	mov	r0, r5
   149f0:	bl	13034 <__assert_fail@plt+0x2240>
   149f4:	cmp	r4, #0
   149f8:	bne	14a48 <__assert_fail@plt+0x3c54>
   149fc:	mov	r0, r4
   14a00:	pop	{r4, r5, r6, pc}
   14a04:	ldr	r0, [r5, #28]
   14a08:	bl	10d7c <fchdir@plt>
   14a0c:	subs	r4, r0, #0
   14a10:	beq	14a1c <__assert_fail@plt+0x3c28>
   14a14:	bl	10cf8 <__errno_location@plt>
   14a18:	ldr	r4, [r0]
   14a1c:	ldr	r0, [r5, #28]
   14a20:	bl	10dc4 <close@plt>
   14a24:	clz	r3, r4
   14a28:	lsr	r3, r3, #5
   14a2c:	cmp	r0, #0
   14a30:	moveq	r3, #0
   14a34:	cmp	r3, #0
   14a38:	beq	149a0 <__assert_fail@plt+0x3bac>
   14a3c:	bl	10cf8 <__errno_location@plt>
   14a40:	ldr	r4, [r0]
   14a44:	b	149a0 <__assert_fail@plt+0x3bac>
   14a48:	bl	10cf8 <__errno_location@plt>
   14a4c:	str	r4, [r0]
   14a50:	mvn	r4, #0
   14a54:	b	149fc <__assert_fail@plt+0x3c08>
   14a58:	mov	r0, r5
   14a5c:	bl	13584 <__assert_fail@plt+0x2790>
   14a60:	mov	r0, r5
   14a64:	bl	13034 <__assert_fail@plt+0x2240>
   14a68:	mov	r4, #0
   14a6c:	b	149fc <__assert_fail@plt+0x3c08>
   14a70:	push	{r4, r5, r6, r7, r8, lr}
   14a74:	ldr	r5, [r0]
   14a78:	cmp	r5, #0
   14a7c:	beq	150c0 <__assert_fail@plt+0x42cc>
   14a80:	ldr	r3, [r0, #48]	; 0x30
   14a84:	tst	r3, #8192	; 0x2000
   14a88:	bne	150c8 <__assert_fail@plt+0x42d4>
   14a8c:	mov	r8, r0
   14a90:	ldrh	r3, [r5, #60]	; 0x3c
   14a94:	mov	r2, #3
   14a98:	strh	r2, [r5, #60]	; 0x3c
   14a9c:	cmp	r3, #1
   14aa0:	beq	14b20 <__assert_fail@plt+0x3d2c>
   14aa4:	cmp	r3, #2
   14aa8:	beq	14b38 <__assert_fail@plt+0x3d44>
   14aac:	ldrh	r2, [r5, #56]	; 0x38
   14ab0:	cmp	r2, #1
   14ab4:	bne	14d2c <__assert_fail@plt+0x3f38>
   14ab8:	cmp	r3, #4
   14abc:	beq	14ae0 <__assert_fail@plt+0x3cec>
   14ac0:	ldr	r1, [r8, #48]	; 0x30
   14ac4:	tst	r1, #64	; 0x40
   14ac8:	beq	14bd8 <__assert_fail@plt+0x3de4>
   14acc:	ldrd	r6, [r5, #64]	; 0x40
   14ad0:	ldrd	r2, [r8, #16]
   14ad4:	cmp	r7, r3
   14ad8:	cmpeq	r6, r2
   14adc:	beq	14bd8 <__assert_fail@plt+0x3de4>
   14ae0:	ldrh	r3, [r5, #58]	; 0x3a
   14ae4:	tst	r3, #2
   14ae8:	bne	14bcc <__assert_fail@plt+0x3dd8>
   14aec:	ldr	r0, [r8, #4]
   14af0:	cmp	r0, #0
   14af4:	beq	14b04 <__assert_fail@plt+0x3d10>
   14af8:	bl	13544 <__assert_fail@plt+0x2750>
   14afc:	mov	r3, #0
   14b00:	str	r3, [r8, #4]
   14b04:	mov	r3, #6
   14b08:	strh	r3, [r5, #56]	; 0x38
   14b0c:	mov	r1, r5
   14b10:	mov	r0, r8
   14b14:	bl	13a94 <__assert_fail@plt+0x2ca0>
   14b18:	mov	r4, r5
   14b1c:	b	14e08 <__assert_fail@plt+0x4014>
   14b20:	mov	r2, #0
   14b24:	mov	r1, r5
   14b28:	bl	131d0 <__assert_fail@plt+0x23dc>
   14b2c:	strh	r0, [r5, #56]	; 0x38
   14b30:	mov	r4, r5
   14b34:	b	14e08 <__assert_fail@plt+0x4014>
   14b38:	ldrh	r2, [r5, #56]	; 0x38
   14b3c:	sub	r3, r2, #12
   14b40:	uxth	r3, r3
   14b44:	cmp	r3, #1
   14b48:	bls	14b58 <__assert_fail@plt+0x3d64>
   14b4c:	cmp	r2, #1
   14b50:	bne	14d2c <__assert_fail@plt+0x3f38>
   14b54:	b	14ac0 <__assert_fail@plt+0x3ccc>
   14b58:	mov	r2, #1
   14b5c:	mov	r1, r5
   14b60:	bl	131d0 <__assert_fail@plt+0x23dc>
   14b64:	strh	r0, [r5, #56]	; 0x38
   14b68:	cmp	r0, #1
   14b6c:	movne	r4, r5
   14b70:	bne	14f08 <__assert_fail@plt+0x4114>
   14b74:	ldr	r3, [r8, #48]	; 0x30
   14b78:	tst	r3, #4
   14b7c:	movne	r4, r5
   14b80:	bne	14f08 <__assert_fail@plt+0x4114>
   14b84:	ldr	r1, [pc, #1356]	; 150d8 <__assert_fail@plt+0x42e4>
   14b88:	mov	r0, r8
   14b8c:	bl	134f4 <__assert_fail@plt+0x2700>
   14b90:	str	r0, [r5, #36]	; 0x24
   14b94:	cmp	r0, #0
   14b98:	blt	14bb0 <__assert_fail@plt+0x3dbc>
   14b9c:	ldrh	r3, [r5, #58]	; 0x3a
   14ba0:	orr	r3, r3, #2
   14ba4:	strh	r3, [r5, #58]	; 0x3a
   14ba8:	mov	r4, r5
   14bac:	b	14f08 <__assert_fail@plt+0x4114>
   14bb0:	bl	10cf8 <__errno_location@plt>
   14bb4:	ldr	r3, [r0]
   14bb8:	str	r3, [r5, #32]
   14bbc:	mov	r3, #7
   14bc0:	strh	r3, [r5, #56]	; 0x38
   14bc4:	mov	r4, r5
   14bc8:	b	14f08 <__assert_fail@plt+0x4114>
   14bcc:	ldr	r0, [r5, #36]	; 0x24
   14bd0:	bl	10dc4 <close@plt>
   14bd4:	b	14aec <__assert_fail@plt+0x3cf8>
   14bd8:	ldr	r0, [r8, #4]
   14bdc:	cmp	r0, #0
   14be0:	beq	14c2c <__assert_fail@plt+0x3e38>
   14be4:	tst	r1, #4096	; 0x1000
   14be8:	bne	14c18 <__assert_fail@plt+0x3e24>
   14bec:	ldr	r3, [r5, #24]
   14bf0:	mvn	r2, #0
   14bf4:	mov	r1, r5
   14bf8:	mov	r0, r8
   14bfc:	bl	138ac <__assert_fail@plt+0x2ab8>
   14c00:	cmp	r0, #0
   14c04:	bne	14c80 <__assert_fail@plt+0x3e8c>
   14c08:	ldr	r4, [r8, #4]
   14c0c:	mov	r3, #0
   14c10:	str	r3, [r8, #4]
   14c14:	b	14ec8 <__assert_fail@plt+0x40d4>
   14c18:	bic	r1, r1, #4096	; 0x1000
   14c1c:	str	r1, [r8, #48]	; 0x30
   14c20:	bl	13544 <__assert_fail@plt+0x2750>
   14c24:	mov	r3, #0
   14c28:	str	r3, [r8, #4]
   14c2c:	mov	r1, #3
   14c30:	mov	r0, r8
   14c34:	bl	13b58 <__assert_fail@plt+0x2d64>
   14c38:	str	r0, [r8, #4]
   14c3c:	cmp	r0, #0
   14c40:	bne	14c08 <__assert_fail@plt+0x3e14>
   14c44:	ldr	r3, [r8, #48]	; 0x30
   14c48:	tst	r3, #8192	; 0x2000
   14c4c:	bne	150d0 <__assert_fail@plt+0x42dc>
   14c50:	ldr	r3, [r5, #32]
   14c54:	cmp	r3, #0
   14c58:	beq	14c6c <__assert_fail@plt+0x3e78>
   14c5c:	ldrh	r3, [r5, #56]	; 0x38
   14c60:	cmp	r3, #4
   14c64:	movne	r3, #7
   14c68:	strhne	r3, [r5, #56]	; 0x38
   14c6c:	mov	r1, r5
   14c70:	mov	r0, r8
   14c74:	bl	13a94 <__assert_fail@plt+0x2ca0>
   14c78:	mov	r4, r5
   14c7c:	b	14e08 <__assert_fail@plt+0x4014>
   14c80:	bl	10cf8 <__errno_location@plt>
   14c84:	ldr	r3, [r0]
   14c88:	str	r3, [r5, #32]
   14c8c:	ldrh	r3, [r5, #58]	; 0x3a
   14c90:	orr	r3, r3, #1
   14c94:	strh	r3, [r5, #58]	; 0x3a
   14c98:	ldr	r3, [r8, #4]
   14c9c:	cmp	r3, #0
   14ca0:	beq	14c08 <__assert_fail@plt+0x3e14>
   14ca4:	ldr	r2, [r3, #4]
   14ca8:	ldr	r2, [r2, #24]
   14cac:	str	r2, [r3, #24]
   14cb0:	ldr	r3, [r3, #8]
   14cb4:	cmp	r3, #0
   14cb8:	bne	14ca4 <__assert_fail@plt+0x3eb0>
   14cbc:	b	14c08 <__assert_fail@plt+0x3e14>
   14cc0:	str	r3, [r8]
   14cc4:	ldr	r2, [r8, #24]
   14cc8:	ldr	r3, [r3, #40]	; 0x28
   14ccc:	mov	r1, #0
   14cd0:	strb	r1, [r2, r3]
   14cd4:	mov	r1, #3
   14cd8:	mov	r0, r8
   14cdc:	bl	13b58 <__assert_fail@plt+0x2d64>
   14ce0:	subs	r4, r0, #0
   14ce4:	beq	14cf4 <__assert_fail@plt+0x3f00>
   14ce8:	mov	r0, r5
   14cec:	bl	13034 <__assert_fail@plt+0x2240>
   14cf0:	b	14ec8 <__assert_fail@plt+0x40d4>
   14cf4:	ldr	r3, [r8, #48]	; 0x30
   14cf8:	tst	r3, #8192	; 0x2000
   14cfc:	beq	14d48 <__assert_fail@plt+0x3f54>
   14d00:	b	14e08 <__assert_fail@plt+0x4014>
   14d04:	str	r4, [r8]
   14d08:	mov	r0, r5
   14d0c:	bl	13034 <__assert_fail@plt+0x2240>
   14d10:	ldr	r3, [r4, #48]	; 0x30
   14d14:	cmp	r3, #0
   14d18:	beq	14e10 <__assert_fail@plt+0x401c>
   14d1c:	ldrh	r3, [r4, #60]	; 0x3c
   14d20:	mov	r5, r4
   14d24:	cmp	r3, #4
   14d28:	bne	14ec0 <__assert_fail@plt+0x40cc>
   14d2c:	ldr	r4, [r5, #8]
   14d30:	cmp	r4, #0
   14d34:	bne	14d04 <__assert_fail@plt+0x3f10>
   14d38:	ldr	r3, [r5, #4]
   14d3c:	ldr	r2, [r3, #12]
   14d40:	cmp	r2, #0
   14d44:	bne	14cc0 <__assert_fail@plt+0x3ecc>
   14d48:	ldr	r4, [r5, #4]
   14d4c:	str	r4, [r8]
   14d50:	mov	r0, r5
   14d54:	bl	13034 <__assert_fail@plt+0x2240>
   14d58:	ldr	r3, [r4, #48]	; 0x30
   14d5c:	cmn	r3, #1
   14d60:	beq	15008 <__assert_fail@plt+0x4214>
   14d64:	ldrh	r3, [r4, #56]	; 0x38
   14d68:	cmp	r3, #11
   14d6c:	beq	15024 <__assert_fail@plt+0x4230>
   14d70:	ldr	r2, [r8, #24]
   14d74:	ldr	r3, [r4, #40]	; 0x28
   14d78:	mov	r1, #0
   14d7c:	strb	r1, [r2, r3]
   14d80:	ldr	r3, [r4, #48]	; 0x30
   14d84:	cmp	r3, r1
   14d88:	beq	15028 <__assert_fail@plt+0x4234>
   14d8c:	ldrh	r3, [r4, #58]	; 0x3a
   14d90:	tst	r3, #2
   14d94:	beq	15080 <__assert_fail@plt+0x428c>
   14d98:	ldr	r3, [r8, #48]	; 0x30
   14d9c:	tst	r3, #4
   14da0:	bne	14dbc <__assert_fail@plt+0x3fc8>
   14da4:	tst	r3, #512	; 0x200
   14da8:	beq	15054 <__assert_fail@plt+0x4260>
   14dac:	mov	r2, #1
   14db0:	ldr	r1, [r4, #36]	; 0x24
   14db4:	mov	r0, r8
   14db8:	bl	137dc <__assert_fail@plt+0x29e8>
   14dbc:	ldr	r0, [r4, #36]	; 0x24
   14dc0:	bl	10dc4 <close@plt>
   14dc4:	ldrh	r3, [r4, #56]	; 0x38
   14dc8:	cmp	r3, #2
   14dcc:	beq	14df8 <__assert_fail@plt+0x4004>
   14dd0:	ldr	r3, [r4, #32]
   14dd4:	cmp	r3, #0
   14dd8:	movne	r3, #7
   14ddc:	strhne	r3, [r4, #56]	; 0x38
   14de0:	bne	14df8 <__assert_fail@plt+0x4004>
   14de4:	mov	r3, #6
   14de8:	strh	r3, [r4, #56]	; 0x38
   14dec:	mov	r1, r4
   14df0:	mov	r0, r8
   14df4:	bl	13a94 <__assert_fail@plt+0x2ca0>
   14df8:	ldr	r3, [r8, #48]	; 0x30
   14dfc:	and	r3, r3, #8192	; 0x2000
   14e00:	cmp	r3, #0
   14e04:	movne	r4, #0
   14e08:	mov	r0, r4
   14e0c:	pop	{r4, r5, r6, r7, r8, pc}
   14e10:	mov	r0, r8
   14e14:	bl	1385c <__assert_fail@plt+0x2a68>
   14e18:	cmp	r0, #0
   14e1c:	bne	14e9c <__assert_fail@plt+0x40a8>
   14e20:	mov	r0, r8
   14e24:	bl	13584 <__assert_fail@plt+0x2790>
   14e28:	ldr	r2, [r4, #52]	; 0x34
   14e2c:	str	r2, [r4, #40]	; 0x28
   14e30:	add	r6, r4, #168	; 0xa8
   14e34:	add	r2, r2, #1
   14e38:	mov	r1, r6
   14e3c:	ldr	r0, [r8, #24]
   14e40:	bl	10bd8 <memmove@plt>
   14e44:	mov	r1, #47	; 0x2f
   14e48:	mov	r0, r6
   14e4c:	bl	10d28 <strrchr@plt>
   14e50:	cmp	r0, #0
   14e54:	beq	14e84 <__assert_fail@plt+0x4090>
   14e58:	cmp	r6, r0
   14e5c:	beq	14eb0 <__assert_fail@plt+0x40bc>
   14e60:	add	r5, r0, #1
   14e64:	mov	r0, r5
   14e68:	bl	10cc8 <strlen@plt>
   14e6c:	mov	r7, r0
   14e70:	add	r2, r0, #1
   14e74:	mov	r1, r5
   14e78:	mov	r0, r6
   14e7c:	bl	10bd8 <memmove@plt>
   14e80:	str	r7, [r4, #52]	; 0x34
   14e84:	ldr	r3, [r8, #24]
   14e88:	str	r3, [r4, #28]
   14e8c:	str	r3, [r4, #24]
   14e90:	mov	r0, r8
   14e94:	bl	13470 <__assert_fail@plt+0x267c>
   14e98:	b	14f08 <__assert_fail@plt+0x4114>
   14e9c:	ldr	r3, [r8, #48]	; 0x30
   14ea0:	orr	r3, r3, #8192	; 0x2000
   14ea4:	str	r3, [r8, #48]	; 0x30
   14ea8:	mov	r4, #0
   14eac:	b	14e08 <__assert_fail@plt+0x4014>
   14eb0:	ldrb	r3, [r4, #169]	; 0xa9
   14eb4:	cmp	r3, #0
   14eb8:	bne	14e60 <__assert_fail@plt+0x406c>
   14ebc:	b	14e84 <__assert_fail@plt+0x4090>
   14ec0:	cmp	r3, #2
   14ec4:	beq	14f5c <__assert_fail@plt+0x4168>
   14ec8:	ldr	r2, [r8, #24]
   14ecc:	ldr	r0, [r4, #4]
   14ed0:	ldr	r1, [r0, #40]	; 0x28
   14ed4:	sub	r3, r1, #1
   14ed8:	ldr	r0, [r0, #28]
   14edc:	ldrb	r0, [r0, r3]
   14ee0:	cmp	r0, #47	; 0x2f
   14ee4:	movne	r3, r1
   14ee8:	add	r0, r2, r3
   14eec:	mov	r1, #47	; 0x2f
   14ef0:	strb	r1, [r2, r3]
   14ef4:	ldr	r2, [r4, #52]	; 0x34
   14ef8:	add	r2, r2, #1
   14efc:	add	r1, r4, #168	; 0xa8
   14f00:	add	r0, r0, #1
   14f04:	bl	10bd8 <memmove@plt>
   14f08:	str	r4, [r8]
   14f0c:	ldrh	r3, [r4, #56]	; 0x38
   14f10:	cmp	r3, #11
   14f14:	beq	14fd0 <__assert_fail@plt+0x41dc>
   14f18:	ldrh	r3, [r4, #56]	; 0x38
   14f1c:	cmp	r3, #1
   14f20:	bne	14e08 <__assert_fail@plt+0x4014>
   14f24:	ldr	r3, [r4, #48]	; 0x30
   14f28:	cmp	r3, #0
   14f2c:	ldrdeq	r2, [r4, #64]	; 0x40
   14f30:	strdeq	r2, [r8, #16]
   14f34:	mov	r1, r4
   14f38:	mov	r0, r8
   14f3c:	bl	13710 <__assert_fail@plt+0x291c>
   14f40:	cmp	r0, #0
   14f44:	bne	14e08 <__assert_fail@plt+0x4014>
   14f48:	bl	10cf8 <__errno_location@plt>
   14f4c:	mov	r3, #12
   14f50:	str	r3, [r0]
   14f54:	mov	r4, #0
   14f58:	b	14e08 <__assert_fail@plt+0x4014>
   14f5c:	mov	r2, #1
   14f60:	mov	r1, r4
   14f64:	mov	r0, r8
   14f68:	bl	131d0 <__assert_fail@plt+0x23dc>
   14f6c:	strh	r0, [r4, #56]	; 0x38
   14f70:	cmp	r0, #1
   14f74:	beq	14f84 <__assert_fail@plt+0x4190>
   14f78:	mov	r3, #3
   14f7c:	strh	r3, [r4, #60]	; 0x3c
   14f80:	b	14ec8 <__assert_fail@plt+0x40d4>
   14f84:	ldr	r3, [r8, #48]	; 0x30
   14f88:	tst	r3, #4
   14f8c:	bne	14f78 <__assert_fail@plt+0x4184>
   14f90:	ldr	r1, [pc, #320]	; 150d8 <__assert_fail@plt+0x42e4>
   14f94:	mov	r0, r8
   14f98:	bl	134f4 <__assert_fail@plt+0x2700>
   14f9c:	str	r0, [r4, #36]	; 0x24
   14fa0:	cmp	r0, #0
   14fa4:	bge	14fc0 <__assert_fail@plt+0x41cc>
   14fa8:	bl	10cf8 <__errno_location@plt>
   14fac:	ldr	r3, [r0]
   14fb0:	str	r3, [r4, #32]
   14fb4:	mov	r3, #7
   14fb8:	strh	r3, [r4, #56]	; 0x38
   14fbc:	b	14f78 <__assert_fail@plt+0x4184>
   14fc0:	ldrh	r3, [r4, #58]	; 0x3a
   14fc4:	orr	r3, r3, #2
   14fc8:	strh	r3, [r4, #58]	; 0x3a
   14fcc:	b	14f78 <__assert_fail@plt+0x4184>
   14fd0:	ldrd	r2, [r4, #112]	; 0x70
   14fd4:	cmp	r3, #0
   14fd8:	cmpeq	r2, #2
   14fdc:	beq	14ff0 <__assert_fail@plt+0x41fc>
   14fe0:	cmp	r3, #0
   14fe4:	cmpeq	r2, #1
   14fe8:	beq	14e08 <__assert_fail@plt+0x4014>
   14fec:	bl	10db8 <abort@plt>
   14ff0:	mov	r2, #0
   14ff4:	mov	r1, r4
   14ff8:	mov	r0, r8
   14ffc:	bl	131d0 <__assert_fail@plt+0x23dc>
   15000:	strh	r0, [r4, #56]	; 0x38
   15004:	b	14f18 <__assert_fail@plt+0x4124>
   15008:	mov	r0, r4
   1500c:	bl	13034 <__assert_fail@plt+0x2240>
   15010:	bl	10cf8 <__errno_location@plt>
   15014:	mov	r4, #0
   15018:	str	r4, [r0]
   1501c:	str	r4, [r8]
   15020:	b	14e08 <__assert_fail@plt+0x4014>
   15024:	bl	10db8 <abort@plt>
   15028:	mov	r0, r8
   1502c:	bl	1385c <__assert_fail@plt+0x2a68>
   15030:	cmp	r0, #0
   15034:	beq	14dc4 <__assert_fail@plt+0x3fd0>
   15038:	bl	10cf8 <__errno_location@plt>
   1503c:	ldr	r3, [r0]
   15040:	str	r3, [r4, #32]
   15044:	ldr	r3, [r8, #48]	; 0x30
   15048:	orr	r3, r3, #8192	; 0x2000
   1504c:	str	r3, [r8, #48]	; 0x30
   15050:	b	14dc4 <__assert_fail@plt+0x3fd0>
   15054:	ldr	r0, [r4, #36]	; 0x24
   15058:	bl	10d7c <fchdir@plt>
   1505c:	cmp	r0, #0
   15060:	beq	14dbc <__assert_fail@plt+0x3fc8>
   15064:	bl	10cf8 <__errno_location@plt>
   15068:	ldr	r3, [r0]
   1506c:	str	r3, [r4, #32]
   15070:	ldr	r3, [r8, #48]	; 0x30
   15074:	orr	r3, r3, #8192	; 0x2000
   15078:	str	r3, [r8, #48]	; 0x30
   1507c:	b	14dbc <__assert_fail@plt+0x3fc8>
   15080:	tst	r3, #1
   15084:	bne	14dc4 <__assert_fail@plt+0x3fd0>
   15088:	ldr	r3, [pc, #76]	; 150dc <__assert_fail@plt+0x42e8>
   1508c:	mvn	r2, #0
   15090:	ldr	r1, [r4, #4]
   15094:	mov	r0, r8
   15098:	bl	138ac <__assert_fail@plt+0x2ab8>
   1509c:	cmp	r0, #0
   150a0:	beq	14dc4 <__assert_fail@plt+0x3fd0>
   150a4:	bl	10cf8 <__errno_location@plt>
   150a8:	ldr	r3, [r0]
   150ac:	str	r3, [r4, #32]
   150b0:	ldr	r3, [r8, #48]	; 0x30
   150b4:	orr	r3, r3, #8192	; 0x2000
   150b8:	str	r3, [r8, #48]	; 0x30
   150bc:	b	14dc4 <__assert_fail@plt+0x3fd0>
   150c0:	mov	r4, #0
   150c4:	b	14e08 <__assert_fail@plt+0x4014>
   150c8:	mov	r4, #0
   150cc:	b	14e08 <__assert_fail@plt+0x4014>
   150d0:	mov	r4, #0
   150d4:	b	14e08 <__assert_fail@plt+0x4014>
   150d8:	andeq	r7, r1, r0, lsr #25
   150dc:	muleq	r1, ip, ip
   150e0:	cmp	r2, #4
   150e4:	bhi	150f4 <__assert_fail@plt+0x4300>
   150e8:	strh	r2, [r1, #60]	; 0x3c
   150ec:	mov	r0, #0
   150f0:	bx	lr
   150f4:	push	{r4, lr}
   150f8:	bl	10cf8 <__errno_location@plt>
   150fc:	mov	r3, #22
   15100:	str	r3, [r0]
   15104:	mov	r0, #1
   15108:	pop	{r4, pc}
   1510c:	push	{r4, r5, r6, r7, r8, lr}
   15110:	bics	r3, r1, #4096	; 0x1000
   15114:	bne	151b8 <__assert_fail@plt+0x43c4>
   15118:	mov	r4, r0
   1511c:	mov	r6, r1
   15120:	ldr	r5, [r0]
   15124:	bl	10cf8 <__errno_location@plt>
   15128:	mov	r7, r0
   1512c:	mov	r3, #0
   15130:	str	r3, [r0]
   15134:	ldr	r3, [r4, #48]	; 0x30
   15138:	tst	r3, #8192	; 0x2000
   1513c:	bne	1525c <__assert_fail@plt+0x4468>
   15140:	ldrh	r3, [r5, #56]	; 0x38
   15144:	cmp	r3, #9
   15148:	beq	151cc <__assert_fail@plt+0x43d8>
   1514c:	cmp	r3, #1
   15150:	bne	15264 <__assert_fail@plt+0x4470>
   15154:	ldr	r0, [r4, #4]
   15158:	cmp	r0, #0
   1515c:	beq	15164 <__assert_fail@plt+0x4370>
   15160:	bl	13544 <__assert_fail@plt+0x2750>
   15164:	cmp	r6, #4096	; 0x1000
   15168:	ldreq	r3, [r4, #48]	; 0x30
   1516c:	orreq	r3, r3, #4096	; 0x1000
   15170:	streq	r3, [r4, #48]	; 0x30
   15174:	moveq	r6, #2
   15178:	movne	r6, #1
   1517c:	ldr	r3, [r5, #48]	; 0x30
   15180:	cmp	r3, #0
   15184:	bne	151a4 <__assert_fail@plt+0x43b0>
   15188:	ldr	r3, [r5, #24]
   1518c:	ldrb	r3, [r3]
   15190:	cmp	r3, #47	; 0x2f
   15194:	beq	151a4 <__assert_fail@plt+0x43b0>
   15198:	ldr	r3, [r4, #48]	; 0x30
   1519c:	tst	r3, #4
   151a0:	beq	151d4 <__assert_fail@plt+0x43e0>
   151a4:	mov	r1, r6
   151a8:	mov	r0, r4
   151ac:	bl	13b58 <__assert_fail@plt+0x2d64>
   151b0:	str	r0, [r4, #4]
   151b4:	pop	{r4, r5, r6, r7, r8, pc}
   151b8:	bl	10cf8 <__errno_location@plt>
   151bc:	mov	r3, #22
   151c0:	str	r3, [r0]
   151c4:	mov	r0, #0
   151c8:	pop	{r4, r5, r6, r7, r8, pc}
   151cc:	ldr	r0, [r5, #8]
   151d0:	pop	{r4, r5, r6, r7, r8, pc}
   151d4:	ldr	r1, [pc, #144]	; 1526c <__assert_fail@plt+0x4478>
   151d8:	mov	r0, r4
   151dc:	bl	134f4 <__assert_fail@plt+0x2700>
   151e0:	subs	r5, r0, #0
   151e4:	blt	1521c <__assert_fail@plt+0x4428>
   151e8:	mov	r1, r6
   151ec:	mov	r0, r4
   151f0:	bl	13b58 <__assert_fail@plt+0x2d64>
   151f4:	str	r0, [r4, #4]
   151f8:	ldr	r3, [r4, #48]	; 0x30
   151fc:	tst	r3, #512	; 0x200
   15200:	beq	15228 <__assert_fail@plt+0x4434>
   15204:	mov	r2, #1
   15208:	mov	r1, r5
   1520c:	mov	r0, r4
   15210:	bl	137dc <__assert_fail@plt+0x29e8>
   15214:	ldr	r0, [r4, #4]
   15218:	pop	{r4, r5, r6, r7, r8, pc}
   1521c:	mov	r0, #0
   15220:	str	r0, [r4, #4]
   15224:	pop	{r4, r5, r6, r7, r8, pc}
   15228:	mov	r0, r5
   1522c:	bl	10d7c <fchdir@plt>
   15230:	cmp	r0, #0
   15234:	bne	15244 <__assert_fail@plt+0x4450>
   15238:	mov	r0, r5
   1523c:	bl	10dc4 <close@plt>
   15240:	b	15214 <__assert_fail@plt+0x4420>
   15244:	ldr	r4, [r7]
   15248:	mov	r0, r5
   1524c:	bl	10dc4 <close@plt>
   15250:	str	r4, [r7]
   15254:	mov	r0, #0
   15258:	pop	{r4, r5, r6, r7, r8, pc}
   1525c:	mov	r0, #0
   15260:	pop	{r4, r5, r6, r7, r8, pc}
   15264:	mov	r0, #0
   15268:	pop	{r4, r5, r6, r7, r8, pc}
   1526c:	andeq	r7, r1, r0, lsr #25
   15270:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15274:	ldr	r4, [r1, #28]
   15278:	ldr	r5, [r1, #32]
   1527c:	ldr	r6, [r1]
   15280:	add	r7, r0, r5, lsl #2
   15284:	b	152bc <__assert_fail@plt+0x44c8>
   15288:	cmp	sl, #0
   1528c:	ble	152b8 <__assert_fail@plt+0x44c4>
   15290:	add	r2, r0, r4, lsl #2
   15294:	sub	r3, r6, sl
   15298:	add	r3, r0, r3, lsl #2
   1529c:	add	r8, r0, r6, lsl #2
   152a0:	ldr	ip, [r2]
   152a4:	ldr	lr, [r3]
   152a8:	str	lr, [r2], #4
   152ac:	str	ip, [r3], #4
   152b0:	cmp	r3, r8
   152b4:	bne	152a0 <__assert_fail@plt+0x44ac>
   152b8:	sub	r6, r6, sl
   152bc:	cmp	r6, r5
   152c0:	movle	r3, #0
   152c4:	movgt	r3, #1
   152c8:	cmp	r4, r5
   152cc:	movge	r3, #0
   152d0:	cmp	r3, #0
   152d4:	beq	15320 <__assert_fail@plt+0x452c>
   152d8:	sub	r9, r6, r5
   152dc:	sub	sl, r5, r4
   152e0:	cmp	r9, sl
   152e4:	bgt	15288 <__assert_fail@plt+0x4494>
   152e8:	cmp	r9, #0
   152ec:	addgt	r3, r0, r4, lsl #2
   152f0:	addgt	r8, r9, r4
   152f4:	addgt	r8, r0, r8, lsl #2
   152f8:	movgt	r2, r7
   152fc:	ble	15318 <__assert_fail@plt+0x4524>
   15300:	ldr	ip, [r3]
   15304:	ldr	lr, [r2]
   15308:	str	lr, [r3], #4
   1530c:	str	ip, [r2], #4
   15310:	cmp	r3, r8
   15314:	bne	15300 <__assert_fail@plt+0x450c>
   15318:	add	r4, r4, r9
   1531c:	b	152bc <__assert_fail@plt+0x44c8>
   15320:	ldr	r0, [r1]
   15324:	ldr	r3, [r1, #32]
   15328:	sub	r2, r0, r3
   1532c:	ldr	r3, [r1, #28]
   15330:	add	r3, r3, r2
   15334:	str	r3, [r1, #28]
   15338:	str	r0, [r1, #32]
   1533c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15344:	sub	sp, sp, #44	; 0x2c
   15348:	str	r0, [sp, #20]
   1534c:	str	r1, [sp, #12]
   15350:	str	r2, [sp, #24]
   15354:	str	r3, [sp, #8]
   15358:	ldr	fp, [sp, #88]	; 0x58
   1535c:	ldr	sl, [fp, #20]
   15360:	ldrb	r3, [sl]
   15364:	cmp	r3, #0
   15368:	cmpne	r3, #61	; 0x3d
   1536c:	beq	153a8 <__assert_fail@plt+0x45b4>
   15370:	mov	r8, sl
   15374:	ldrb	r3, [r8, #1]!
   15378:	cmp	r3, #0
   1537c:	cmpne	r3, #61	; 0x3d
   15380:	bne	15374 <__assert_fail@plt+0x4580>
   15384:	sub	r7, r8, sl
   15388:	ldr	r5, [sp, #8]
   1538c:	ldr	r3, [r5]
   15390:	str	r3, [sp, #16]
   15394:	cmp	r3, #0
   15398:	beq	1569c <__assert_fail@plt+0x48a8>
   1539c:	mov	r4, r3
   153a0:	mov	r6, #0
   153a4:	b	153c0 <__assert_fail@plt+0x45cc>
   153a8:	mov	r8, sl
   153ac:	b	15384 <__assert_fail@plt+0x4590>
   153b0:	add	r6, r6, #1
   153b4:	ldr	r4, [r5, #16]!
   153b8:	cmp	r4, #0
   153bc:	beq	153f8 <__assert_fail@plt+0x4604>
   153c0:	mov	r9, r5
   153c4:	mov	r2, r7
   153c8:	mov	r1, sl
   153cc:	mov	r0, r4
   153d0:	bl	10dac <strncmp@plt>
   153d4:	cmp	r0, #0
   153d8:	bne	153b0 <__assert_fail@plt+0x45bc>
   153dc:	mov	r0, r4
   153e0:	bl	10cc8 <strlen@plt>
   153e4:	cmp	r7, r0
   153e8:	bne	153b0 <__assert_fail@plt+0x45bc>
   153ec:	cmp	r5, #0
   153f0:	strne	r6, [sp, #28]
   153f4:	bne	1564c <__assert_fail@plt+0x4858>
   153f8:	ldr	r4, [sp, #8]
   153fc:	mvn	r3, #0
   15400:	str	r3, [sp, #28]
   15404:	mov	sl, #0
   15408:	str	sl, [sp, #36]	; 0x24
   1540c:	mov	r5, sl
   15410:	mov	r9, sl
   15414:	str	r8, [sp, #32]
   15418:	mov	r8, sl
   1541c:	ldr	r0, [sp, #16]
   15420:	b	15470 <__assert_fail@plt+0x467c>
   15424:	ldr	r2, [r9, #8]
   15428:	ldr	r3, [r4, #8]
   1542c:	cmp	r2, r3
   15430:	bne	154a8 <__assert_fail@plt+0x46b4>
   15434:	ldr	r2, [r9, #12]
   15438:	ldr	r3, [r4, #12]
   1543c:	cmp	r2, r3
   15440:	bne	154a8 <__assert_fail@plt+0x46b4>
   15444:	b	15460 <__assert_fail@plt+0x466c>
   15448:	cmp	r8, #0
   1544c:	moveq	sl, #1
   15450:	beq	15460 <__assert_fail@plt+0x466c>
   15454:	mov	sl, #1
   15458:	mov	r3, #1
   1545c:	strb	r3, [r8, r5]
   15460:	add	r5, r5, #1
   15464:	ldr	r0, [r4, #16]!
   15468:	cmp	r0, #0
   1546c:	beq	15510 <__assert_fail@plt+0x471c>
   15470:	mov	r2, r7
   15474:	ldr	r1, [fp, #20]
   15478:	bl	10dac <strncmp@plt>
   1547c:	cmp	r0, #0
   15480:	bne	15460 <__assert_fail@plt+0x466c>
   15484:	cmp	r9, #0
   15488:	beq	154fc <__assert_fail@plt+0x4708>
   1548c:	ldr	r3, [sp, #84]	; 0x54
   15490:	cmp	r3, #0
   15494:	bne	154a8 <__assert_fail@plt+0x46b4>
   15498:	ldr	r2, [r9, #4]
   1549c:	ldr	r3, [r4, #4]
   154a0:	cmp	r2, r3
   154a4:	beq	15424 <__assert_fail@plt+0x4630>
   154a8:	cmp	sl, #0
   154ac:	bne	15460 <__assert_fail@plt+0x466c>
   154b0:	ldr	r3, [sp, #92]	; 0x5c
   154b4:	cmp	r3, #0
   154b8:	beq	15448 <__assert_fail@plt+0x4654>
   154bc:	cmp	r8, #0
   154c0:	bne	15458 <__assert_fail@plt+0x4664>
   154c4:	mov	r0, r6
   154c8:	bl	17038 <__assert_fail@plt+0x6244>
   154cc:	subs	r8, r0, #0
   154d0:	beq	15508 <__assert_fail@plt+0x4714>
   154d4:	mov	r2, r6
   154d8:	mov	r1, #0
   154dc:	mov	r0, r8
   154e0:	bl	10d10 <memset@plt>
   154e4:	ldr	r3, [sp, #28]
   154e8:	mov	r2, #1
   154ec:	strb	r2, [r8, r3]
   154f0:	mov	r3, #1
   154f4:	str	r3, [sp, #36]	; 0x24
   154f8:	b	15458 <__assert_fail@plt+0x4664>
   154fc:	str	r5, [sp, #28]
   15500:	mov	r9, r4
   15504:	b	15460 <__assert_fail@plt+0x466c>
   15508:	mov	sl, #1
   1550c:	b	15460 <__assert_fail@plt+0x466c>
   15510:	mov	r3, r8
   15514:	str	r8, [sp, #16]
   15518:	ldr	r8, [sp, #32]
   1551c:	cmp	sl, #0
   15520:	cmpeq	r3, #0
   15524:	beq	15644 <__assert_fail@plt+0x4850>
   15528:	ldr	r3, [sp, #92]	; 0x5c
   1552c:	cmp	r3, #0
   15530:	beq	15560 <__assert_fail@plt+0x476c>
   15534:	cmp	sl, #0
   15538:	beq	1559c <__assert_fail@plt+0x47a8>
   1553c:	ldr	r3, [sp, #12]
   15540:	ldr	r2, [r3]
   15544:	ldr	r3, [pc, #708]	; 15810 <__assert_fail@plt+0x4a1c>
   15548:	ldr	r0, [r3]
   1554c:	ldr	r3, [fp, #20]
   15550:	str	r3, [sp]
   15554:	ldr	r3, [sp, #96]	; 0x60
   15558:	ldr	r1, [pc, #692]	; 15814 <__assert_fail@plt+0x4a20>
   1555c:	bl	10cec <fprintf@plt>
   15560:	ldr	r3, [sp, #36]	; 0x24
   15564:	cmp	r3, #0
   15568:	bne	15638 <__assert_fail@plt+0x4844>
   1556c:	ldr	r4, [fp, #20]
   15570:	mov	r0, r4
   15574:	bl	10cc8 <strlen@plt>
   15578:	add	r0, r4, r0
   1557c:	str	r0, [fp, #20]
   15580:	ldr	r3, [fp]
   15584:	add	r3, r3, #1
   15588:	str	r3, [fp]
   1558c:	mov	r3, #0
   15590:	str	r3, [fp, #8]
   15594:	mov	r0, #63	; 0x3f
   15598:	b	15790 <__assert_fail@plt+0x499c>
   1559c:	ldr	r4, [pc, #620]	; 15810 <__assert_fail@plt+0x4a1c>
   155a0:	ldr	r0, [r4]
   155a4:	bl	10d70 <flockfile@plt>
   155a8:	ldr	r3, [sp, #12]
   155ac:	ldr	r2, [r3]
   155b0:	ldr	r0, [r4]
   155b4:	ldr	r3, [fp, #20]
   155b8:	str	r3, [sp]
   155bc:	ldr	r3, [sp, #96]	; 0x60
   155c0:	ldr	r1, [pc, #592]	; 15818 <__assert_fail@plt+0x4a24>
   155c4:	bl	10cec <fprintf@plt>
   155c8:	cmp	r6, #0
   155cc:	ble	1561c <__assert_fail@plt+0x4828>
   155d0:	ldr	r3, [sp, #16]
   155d4:	mov	r4, r3
   155d8:	add	r6, r3, r6
   155dc:	ldr	r7, [pc, #568]	; 1581c <__assert_fail@plt+0x4a28>
   155e0:	ldr	r5, [pc, #552]	; 15810 <__assert_fail@plt+0x4a1c>
   155e4:	ldr	r8, [sp, #8]
   155e8:	b	155f8 <__assert_fail@plt+0x4804>
   155ec:	add	sl, sl, #1
   155f0:	cmp	r4, r6
   155f4:	beq	1561c <__assert_fail@plt+0x4828>
   155f8:	ldrb	r3, [r4], #1
   155fc:	cmp	r3, #0
   15600:	beq	155ec <__assert_fail@plt+0x47f8>
   15604:	ldr	r3, [r8, sl, lsl #4]
   15608:	ldr	r2, [sp, #96]	; 0x60
   1560c:	mov	r1, r7
   15610:	ldr	r0, [r5]
   15614:	bl	10cec <fprintf@plt>
   15618:	b	155ec <__assert_fail@plt+0x47f8>
   1561c:	ldr	r4, [pc, #492]	; 15810 <__assert_fail@plt+0x4a1c>
   15620:	ldr	r1, [r4]
   15624:	mov	r0, #10
   15628:	bl	10d34 <fputc@plt>
   1562c:	ldr	r0, [r4]
   15630:	bl	10c20 <funlockfile@plt>
   15634:	b	15560 <__assert_fail@plt+0x476c>
   15638:	ldr	r0, [sp, #16]
   1563c:	bl	13034 <__assert_fail@plt+0x2240>
   15640:	b	1556c <__assert_fail@plt+0x4778>
   15644:	cmp	r9, #0
   15648:	beq	1569c <__assert_fail@plt+0x48a8>
   1564c:	ldr	r2, [fp]
   15650:	add	r3, r2, #1
   15654:	str	r3, [fp]
   15658:	mov	r1, #0
   1565c:	str	r1, [fp, #20]
   15660:	ldrb	r1, [r8]
   15664:	cmp	r1, #0
   15668:	beq	1575c <__assert_fail@plt+0x4968>
   1566c:	ldr	r3, [r9, #4]
   15670:	cmp	r3, #0
   15674:	addne	r8, r8, #1
   15678:	strne	r8, [fp, #12]
   1567c:	bne	15768 <__assert_fail@plt+0x4974>
   15680:	ldr	r3, [sp, #92]	; 0x5c
   15684:	cmp	r3, #0
   15688:	bne	15734 <__assert_fail@plt+0x4940>
   1568c:	ldr	r3, [r9, #12]
   15690:	str	r3, [fp, #8]
   15694:	mov	r0, #63	; 0x3f
   15698:	b	15790 <__assert_fail@plt+0x499c>
   1569c:	ldr	r3, [sp, #84]	; 0x54
   156a0:	cmp	r3, #0
   156a4:	bne	156d4 <__assert_fail@plt+0x48e0>
   156a8:	ldr	r3, [sp, #92]	; 0x5c
   156ac:	cmp	r3, #0
   156b0:	bne	1570c <__assert_fail@plt+0x4918>
   156b4:	mov	r2, #0
   156b8:	str	r2, [fp, #20]
   156bc:	ldr	r3, [fp]
   156c0:	add	r3, r3, #1
   156c4:	str	r3, [fp]
   156c8:	str	r2, [fp, #8]
   156cc:	mov	r0, #63	; 0x3f
   156d0:	b	15790 <__assert_fail@plt+0x499c>
   156d4:	ldr	r3, [fp]
   156d8:	ldr	r2, [sp, #12]
   156dc:	ldr	r3, [r2, r3, lsl #2]
   156e0:	ldrb	r3, [r3, #1]
   156e4:	cmp	r3, #45	; 0x2d
   156e8:	beq	156a8 <__assert_fail@plt+0x48b4>
   156ec:	ldr	r3, [fp, #20]
   156f0:	ldrb	r1, [r3]
   156f4:	ldr	r0, [sp, #24]
   156f8:	bl	10cd4 <strchr@plt>
   156fc:	cmp	r0, #0
   15700:	beq	156a8 <__assert_fail@plt+0x48b4>
   15704:	mvn	r0, #0
   15708:	b	15790 <__assert_fail@plt+0x499c>
   1570c:	ldr	r3, [sp, #12]
   15710:	ldr	r2, [r3]
   15714:	ldr	r3, [pc, #244]	; 15810 <__assert_fail@plt+0x4a1c>
   15718:	ldr	r0, [r3]
   1571c:	ldr	r3, [fp, #20]
   15720:	str	r3, [sp]
   15724:	ldr	r3, [sp, #96]	; 0x60
   15728:	ldr	r1, [pc, #240]	; 15820 <__assert_fail@plt+0x4a2c>
   1572c:	bl	10cec <fprintf@plt>
   15730:	b	156b4 <__assert_fail@plt+0x48c0>
   15734:	ldr	r3, [sp, #12]
   15738:	ldr	r2, [r3]
   1573c:	ldr	r3, [pc, #204]	; 15810 <__assert_fail@plt+0x4a1c>
   15740:	ldr	r0, [r3]
   15744:	ldr	r3, [r9]
   15748:	str	r3, [sp]
   1574c:	ldr	r3, [sp, #96]	; 0x60
   15750:	ldr	r1, [pc, #204]	; 15824 <__assert_fail@plt+0x4a30>
   15754:	bl	10cec <fprintf@plt>
   15758:	b	1568c <__assert_fail@plt+0x4898>
   1575c:	ldr	r1, [r9, #4]
   15760:	cmp	r1, #1
   15764:	beq	15798 <__assert_fail@plt+0x49a4>
   15768:	ldr	r3, [sp, #80]	; 0x50
   1576c:	cmp	r3, #0
   15770:	ldrne	r2, [sp, #28]
   15774:	strne	r2, [r3]
   15778:	ldr	r3, [r9, #8]
   1577c:	cmp	r3, #0
   15780:	ldrne	r2, [r9, #12]
   15784:	strne	r2, [r3]
   15788:	movne	r0, #0
   1578c:	ldreq	r0, [r9, #12]
   15790:	add	sp, sp, #44	; 0x2c
   15794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15798:	ldr	r1, [sp, #20]
   1579c:	cmp	r3, r1
   157a0:	bge	157bc <__assert_fail@plt+0x49c8>
   157a4:	add	r2, r2, #2
   157a8:	str	r2, [fp]
   157ac:	ldr	r2, [sp, #12]
   157b0:	ldr	r3, [r2, r3, lsl #2]
   157b4:	str	r3, [fp, #12]
   157b8:	b	15768 <__assert_fail@plt+0x4974>
   157bc:	ldr	r3, [sp, #92]	; 0x5c
   157c0:	cmp	r3, #0
   157c4:	bne	157e8 <__assert_fail@plt+0x49f4>
   157c8:	ldr	r3, [r9, #12]
   157cc:	str	r3, [fp, #8]
   157d0:	ldr	r3, [sp, #24]
   157d4:	ldrb	r0, [r3]
   157d8:	cmp	r0, #58	; 0x3a
   157dc:	moveq	r0, #58	; 0x3a
   157e0:	movne	r0, #63	; 0x3f
   157e4:	b	15790 <__assert_fail@plt+0x499c>
   157e8:	ldr	r3, [sp, #12]
   157ec:	ldr	r2, [r3]
   157f0:	ldr	r3, [pc, #24]	; 15810 <__assert_fail@plt+0x4a1c>
   157f4:	ldr	r0, [r3]
   157f8:	ldr	r3, [r9]
   157fc:	str	r3, [sp]
   15800:	ldr	r3, [sp, #96]	; 0x60
   15804:	ldr	r1, [pc, #28]	; 15828 <__assert_fail@plt+0x4a34>
   15808:	bl	10cec <fprintf@plt>
   1580c:	b	157c8 <__assert_fail@plt+0x49d4>
   15810:	andeq	r8, r2, r0, lsl r1
   15814:	andeq	r7, r1, r4, lsr #25
   15818:	andeq	r7, r1, r4, asr #25
   1581c:	strdeq	r7, [r1], -r4
   15820:	strdeq	r7, [r1], -ip
   15824:	andeq	r7, r1, ip, lsl sp
   15828:	andeq	r7, r1, ip, asr #26
   1582c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15830:	sub	sp, sp, #36	; 0x24
   15834:	str	r3, [sp, #24]
   15838:	ldr	r4, [sp, #80]	; 0x50
   1583c:	ldr	r8, [r4, #4]
   15840:	subs	r5, r0, #0
   15844:	ble	15d4c <__assert_fail@plt+0x4f58>
   15848:	mov	r9, r1
   1584c:	mov	r6, r2
   15850:	mov	r3, #0
   15854:	str	r3, [r4, #12]
   15858:	ldr	r3, [r4]
   1585c:	cmp	r3, #0
   15860:	beq	15884 <__assert_fail@plt+0x4a90>
   15864:	ldr	r3, [r4, #16]
   15868:	cmp	r3, #0
   1586c:	beq	1588c <__assert_fail@plt+0x4a98>
   15870:	ldrb	r3, [r2]
   15874:	sub	r3, r3, #43	; 0x2b
   15878:	tst	r3, #253	; 0xfd
   1587c:	addeq	r6, r2, #1
   15880:	b	158e8 <__assert_fail@plt+0x4af4>
   15884:	mov	r3, #1
   15888:	str	r3, [r4]
   1588c:	ldr	r3, [r4]
   15890:	str	r3, [r4, #32]
   15894:	str	r3, [r4, #28]
   15898:	mov	r3, #0
   1589c:	str	r3, [r4, #20]
   158a0:	ldrb	r3, [r6]
   158a4:	cmp	r3, #45	; 0x2d
   158a8:	moveq	r3, #2
   158ac:	streq	r3, [r4, #24]
   158b0:	addeq	r6, r6, #1
   158b4:	beq	158e0 <__assert_fail@plt+0x4aec>
   158b8:	cmp	r3, #43	; 0x2b
   158bc:	moveq	r3, #0
   158c0:	streq	r3, [r4, #24]
   158c4:	addeq	r6, r6, #1
   158c8:	beq	158e0 <__assert_fail@plt+0x4aec>
   158cc:	ldr	r3, [sp, #84]	; 0x54
   158d0:	cmp	r3, #0
   158d4:	beq	15984 <__assert_fail@plt+0x4b90>
   158d8:	mov	r3, #0
   158dc:	str	r3, [r4, #24]
   158e0:	mov	r3, #1
   158e4:	str	r3, [r4, #16]
   158e8:	ldrb	r3, [r6]
   158ec:	cmp	r3, #58	; 0x3a
   158f0:	moveq	r8, #0
   158f4:	ldr	r3, [r4, #20]
   158f8:	cmp	r3, #0
   158fc:	beq	1590c <__assert_fail@plt+0x4b18>
   15900:	ldrb	r3, [r3]
   15904:	cmp	r3, #0
   15908:	bne	15a98 <__assert_fail@plt+0x4ca4>
   1590c:	ldr	r3, [r4]
   15910:	ldr	r2, [r4, #32]
   15914:	cmp	r2, r3
   15918:	strgt	r3, [r4, #32]
   1591c:	ldr	r2, [r4, #28]
   15920:	cmp	r3, r2
   15924:	strlt	r3, [r4, #28]
   15928:	ldr	r2, [r4, #24]
   1592c:	cmp	r2, #1
   15930:	beq	159a0 <__assert_fail@plt+0x4bac>
   15934:	ldr	r7, [r4]
   15938:	cmp	r5, r7
   1593c:	beq	15a24 <__assert_fail@plt+0x4c30>
   15940:	ldr	sl, [r9, r7, lsl #2]
   15944:	ldr	r1, [pc, #1088]	; 15d8c <__assert_fail@plt+0x4f98>
   15948:	mov	r0, sl
   1594c:	bl	10b9c <strcmp@plt>
   15950:	cmp	r0, #0
   15954:	bne	15d5c <__assert_fail@plt+0x4f68>
   15958:	add	r7, r7, #1
   1595c:	str	r7, [r4]
   15960:	ldr	r2, [r4, #28]
   15964:	ldr	r3, [r4, #32]
   15968:	cmp	r7, r3
   1596c:	cmpne	r2, r3
   15970:	beq	15a14 <__assert_fail@plt+0x4c20>
   15974:	mov	r1, r4
   15978:	mov	r0, r9
   1597c:	bl	15270 <__assert_fail@plt+0x447c>
   15980:	b	15a1c <__assert_fail@plt+0x4c28>
   15984:	ldr	r0, [pc, #1028]	; 15d90 <__assert_fail@plt+0x4f9c>
   15988:	bl	10c80 <getenv@plt>
   1598c:	cmp	r0, #0
   15990:	bne	158d8 <__assert_fail@plt+0x4ae4>
   15994:	mov	r3, #1
   15998:	str	r3, [r4, #24]
   1599c:	b	158e0 <__assert_fail@plt+0x4aec>
   159a0:	ldr	r2, [r4, #32]
   159a4:	ldr	r1, [r4, #28]
   159a8:	cmp	r1, r2
   159ac:	cmpne	r3, r2
   159b0:	beq	159c4 <__assert_fail@plt+0x4bd0>
   159b4:	mov	r1, r4
   159b8:	mov	r0, r9
   159bc:	bl	15270 <__assert_fail@plt+0x447c>
   159c0:	b	159cc <__assert_fail@plt+0x4bd8>
   159c4:	cmp	r3, r2
   159c8:	strne	r3, [r4, #28]
   159cc:	ldr	r3, [r4]
   159d0:	cmp	r5, r3
   159d4:	ble	15a0c <__assert_fail@plt+0x4c18>
   159d8:	add	r1, r9, r3, lsl #2
   159dc:	b	159f0 <__assert_fail@plt+0x4bfc>
   159e0:	add	r3, r3, #1
   159e4:	str	r3, [r4]
   159e8:	cmp	r5, r3
   159ec:	beq	15a0c <__assert_fail@plt+0x4c18>
   159f0:	ldr	r2, [r1], #4
   159f4:	ldrb	r0, [r2]
   159f8:	cmp	r0, #45	; 0x2d
   159fc:	bne	159e0 <__assert_fail@plt+0x4bec>
   15a00:	ldrb	r2, [r2, #1]
   15a04:	cmp	r2, #0
   15a08:	beq	159e0 <__assert_fail@plt+0x4bec>
   15a0c:	str	r3, [r4, #32]
   15a10:	b	15934 <__assert_fail@plt+0x4b40>
   15a14:	cmp	r2, r3
   15a18:	streq	r7, [r4, #28]
   15a1c:	str	r5, [r4, #32]
   15a20:	str	r5, [r4]
   15a24:	ldr	r3, [r4, #28]
   15a28:	ldr	r2, [r4, #32]
   15a2c:	cmp	r3, r2
   15a30:	mvneq	r0, #0
   15a34:	strne	r3, [r4]
   15a38:	mvnne	r0, #0
   15a3c:	b	15b9c <__assert_fail@plt+0x4da8>
   15a40:	ldrb	r1, [sl, #1]
   15a44:	cmp	r1, #0
   15a48:	beq	15d68 <__assert_fail@plt+0x4f74>
   15a4c:	ldr	r3, [sp, #24]
   15a50:	cmp	r3, #0
   15a54:	beq	15a88 <__assert_fail@plt+0x4c94>
   15a58:	cmp	r1, #45	; 0x2d
   15a5c:	beq	15b00 <__assert_fail@plt+0x4d0c>
   15a60:	ldr	r3, [sp, #76]	; 0x4c
   15a64:	cmp	r3, #0
   15a68:	beq	15a88 <__assert_fail@plt+0x4c94>
   15a6c:	ldrb	r3, [sl, #2]
   15a70:	cmp	r3, #0
   15a74:	bne	15b40 <__assert_fail@plt+0x4d4c>
   15a78:	mov	r0, r6
   15a7c:	bl	10cd4 <strchr@plt>
   15a80:	cmp	r0, #0
   15a84:	beq	15b40 <__assert_fail@plt+0x4d4c>
   15a88:	ldr	r3, [r4]
   15a8c:	ldr	r3, [r9, r3, lsl #2]
   15a90:	add	r3, r3, #1
   15a94:	str	r3, [r4, #20]
   15a98:	ldr	sl, [r4, #20]
   15a9c:	add	fp, sl, #1
   15aa0:	str	fp, [r4, #20]
   15aa4:	ldrb	r7, [sl]
   15aa8:	str	r7, [sp, #28]
   15aac:	mov	r1, r7
   15ab0:	mov	r0, r6
   15ab4:	bl	10cd4 <strchr@plt>
   15ab8:	ldrb	r3, [sl, #1]
   15abc:	cmp	r3, #0
   15ac0:	ldreq	r3, [r4]
   15ac4:	addeq	r3, r3, #1
   15ac8:	streq	r3, [r4]
   15acc:	sub	r3, r7, #58	; 0x3a
   15ad0:	uxtb	r3, r3
   15ad4:	cmp	r0, #0
   15ad8:	cmpne	r3, #1
   15adc:	bls	15b88 <__assert_fail@plt+0x4d94>
   15ae0:	ldrb	r3, [r0]
   15ae4:	cmp	r3, #87	; 0x57
   15ae8:	beq	15bc0 <__assert_fail@plt+0x4dcc>
   15aec:	ldrb	r3, [r0, #1]
   15af0:	cmp	r3, #58	; 0x3a
   15af4:	beq	15c8c <__assert_fail@plt+0x4e98>
   15af8:	mov	r0, r7
   15afc:	b	15b9c <__assert_fail@plt+0x4da8>
   15b00:	add	sl, sl, #2
   15b04:	str	sl, [r4, #20]
   15b08:	ldr	r3, [pc, #636]	; 15d8c <__assert_fail@plt+0x4f98>
   15b0c:	str	r3, [sp, #16]
   15b10:	str	r8, [sp, #12]
   15b14:	str	r4, [sp, #8]
   15b18:	ldr	r3, [sp, #76]	; 0x4c
   15b1c:	str	r3, [sp, #4]
   15b20:	ldr	r3, [sp, #72]	; 0x48
   15b24:	str	r3, [sp]
   15b28:	ldr	r3, [sp, #24]
   15b2c:	mov	r2, r6
   15b30:	mov	r1, r9
   15b34:	mov	r0, r5
   15b38:	bl	15340 <__assert_fail@plt+0x454c>
   15b3c:	b	15b9c <__assert_fail@plt+0x4da8>
   15b40:	add	sl, sl, #1
   15b44:	str	sl, [r4, #20]
   15b48:	ldr	r3, [pc, #580]	; 15d94 <__assert_fail@plt+0x4fa0>
   15b4c:	str	r3, [sp, #16]
   15b50:	str	r8, [sp, #12]
   15b54:	str	r4, [sp, #8]
   15b58:	ldr	r3, [sp, #76]	; 0x4c
   15b5c:	str	r3, [sp, #4]
   15b60:	ldr	r3, [sp, #72]	; 0x48
   15b64:	str	r3, [sp]
   15b68:	ldr	r3, [sp, #24]
   15b6c:	mov	r2, r6
   15b70:	mov	r1, r9
   15b74:	mov	r0, r5
   15b78:	bl	15340 <__assert_fail@plt+0x454c>
   15b7c:	cmn	r0, #1
   15b80:	bne	15b9c <__assert_fail@plt+0x4da8>
   15b84:	b	15a88 <__assert_fail@plt+0x4c94>
   15b88:	cmp	r8, #0
   15b8c:	bne	15ba4 <__assert_fail@plt+0x4db0>
   15b90:	ldr	r3, [sp, #28]
   15b94:	str	r3, [r4, #8]
   15b98:	mov	r0, #63	; 0x3f
   15b9c:	add	sp, sp, #36	; 0x24
   15ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba4:	ldr	r3, [sp, #28]
   15ba8:	ldr	r2, [r9]
   15bac:	ldr	r1, [pc, #484]	; 15d98 <__assert_fail@plt+0x4fa4>
   15bb0:	ldr	r0, [pc, #484]	; 15d9c <__assert_fail@plt+0x4fa8>
   15bb4:	ldr	r0, [r0]
   15bb8:	bl	10cec <fprintf@plt>
   15bbc:	b	15b90 <__assert_fail@plt+0x4d9c>
   15bc0:	ldrb	r3, [r0, #1]
   15bc4:	ldr	r2, [sp, #24]
   15bc8:	cmp	r3, #59	; 0x3b
   15bcc:	movne	r3, #0
   15bd0:	moveq	r3, #1
   15bd4:	cmp	r2, #0
   15bd8:	moveq	r3, #0
   15bdc:	cmp	r3, #0
   15be0:	beq	15aec <__assert_fail@plt+0x4cf8>
   15be4:	ldrb	r3, [sl, #1]
   15be8:	cmp	r3, #0
   15bec:	strne	fp, [r4, #12]
   15bf0:	bne	15c08 <__assert_fail@plt+0x4e14>
   15bf4:	ldr	r3, [r4]
   15bf8:	cmp	r5, r3
   15bfc:	beq	15c4c <__assert_fail@plt+0x4e58>
   15c00:	ldr	r3, [r9, r3, lsl #2]
   15c04:	str	r3, [r4, #12]
   15c08:	ldr	r3, [r4, #12]
   15c0c:	str	r3, [r4, #20]
   15c10:	mov	r3, #0
   15c14:	str	r3, [r4, #12]
   15c18:	ldr	r2, [pc, #384]	; 15da0 <__assert_fail@plt+0x4fac>
   15c1c:	str	r2, [sp, #16]
   15c20:	str	r8, [sp, #12]
   15c24:	str	r4, [sp, #8]
   15c28:	str	r3, [sp, #4]
   15c2c:	ldr	r3, [sp, #72]	; 0x48
   15c30:	str	r3, [sp]
   15c34:	ldr	r3, [sp, #24]
   15c38:	mov	r2, r6
   15c3c:	mov	r1, r9
   15c40:	mov	r0, r5
   15c44:	bl	15340 <__assert_fail@plt+0x454c>
   15c48:	b	15b9c <__assert_fail@plt+0x4da8>
   15c4c:	cmp	r8, #0
   15c50:	bne	15c70 <__assert_fail@plt+0x4e7c>
   15c54:	ldr	r3, [sp, #28]
   15c58:	str	r3, [r4, #8]
   15c5c:	ldrb	r0, [r6]
   15c60:	cmp	r0, #58	; 0x3a
   15c64:	moveq	r0, #58	; 0x3a
   15c68:	movne	r0, #63	; 0x3f
   15c6c:	b	15b9c <__assert_fail@plt+0x4da8>
   15c70:	ldr	r3, [sp, #28]
   15c74:	ldr	r2, [r9]
   15c78:	ldr	r1, [pc, #292]	; 15da4 <__assert_fail@plt+0x4fb0>
   15c7c:	ldr	r0, [pc, #280]	; 15d9c <__assert_fail@plt+0x4fa8>
   15c80:	ldr	r0, [r0]
   15c84:	bl	10cec <fprintf@plt>
   15c88:	b	15c54 <__assert_fail@plt+0x4e60>
   15c8c:	ldrb	r3, [r0, #2]
   15c90:	cmp	r3, #58	; 0x3a
   15c94:	beq	15cc0 <__assert_fail@plt+0x4ecc>
   15c98:	ldrb	r3, [sl, #1]
   15c9c:	cmp	r3, #0
   15ca0:	beq	15cec <__assert_fail@plt+0x4ef8>
   15ca4:	str	fp, [r4, #12]
   15ca8:	ldr	r3, [r4]
   15cac:	add	r3, r3, #1
   15cb0:	str	r3, [r4]
   15cb4:	mov	r3, #0
   15cb8:	str	r3, [r4, #20]
   15cbc:	b	15af8 <__assert_fail@plt+0x4d04>
   15cc0:	ldrb	r3, [sl, #1]
   15cc4:	cmp	r3, #0
   15cc8:	strne	fp, [r4, #12]
   15ccc:	ldrne	r3, [r4]
   15cd0:	addne	r3, r3, #1
   15cd4:	strne	r3, [r4]
   15cd8:	moveq	r3, #0
   15cdc:	streq	r3, [r4, #12]
   15ce0:	mov	r3, #0
   15ce4:	str	r3, [r4, #20]
   15ce8:	b	15af8 <__assert_fail@plt+0x4d04>
   15cec:	ldr	r3, [r4]
   15cf0:	cmp	r5, r3
   15cf4:	beq	15d0c <__assert_fail@plt+0x4f18>
   15cf8:	add	r2, r3, #1
   15cfc:	str	r2, [r4]
   15d00:	ldr	r3, [r9, r3, lsl #2]
   15d04:	str	r3, [r4, #12]
   15d08:	b	15cb4 <__assert_fail@plt+0x4ec0>
   15d0c:	cmp	r8, #0
   15d10:	bne	15d30 <__assert_fail@plt+0x4f3c>
   15d14:	ldr	r3, [sp, #28]
   15d18:	str	r3, [r4, #8]
   15d1c:	ldrb	r7, [r6]
   15d20:	cmp	r7, #58	; 0x3a
   15d24:	moveq	r7, #58	; 0x3a
   15d28:	movne	r7, #63	; 0x3f
   15d2c:	b	15cb4 <__assert_fail@plt+0x4ec0>
   15d30:	ldr	r3, [sp, #28]
   15d34:	ldr	r2, [r9]
   15d38:	ldr	r1, [pc, #100]	; 15da4 <__assert_fail@plt+0x4fb0>
   15d3c:	ldr	r0, [pc, #88]	; 15d9c <__assert_fail@plt+0x4fa8>
   15d40:	ldr	r0, [r0]
   15d44:	bl	10cec <fprintf@plt>
   15d48:	b	15d14 <__assert_fail@plt+0x4f20>
   15d4c:	mvn	r0, #0
   15d50:	b	15b9c <__assert_fail@plt+0x4da8>
   15d54:	mvn	r0, #0
   15d58:	b	15b9c <__assert_fail@plt+0x4da8>
   15d5c:	ldrb	r3, [sl]
   15d60:	cmp	r3, #45	; 0x2d
   15d64:	beq	15a40 <__assert_fail@plt+0x4c4c>
   15d68:	ldr	r3, [r4, #24]
   15d6c:	cmp	r3, #0
   15d70:	beq	15d54 <__assert_fail@plt+0x4f60>
   15d74:	add	r3, r7, #1
   15d78:	str	r3, [r4]
   15d7c:	ldr	r3, [r9, r7, lsl #2]
   15d80:	str	r3, [r4, #12]
   15d84:	mov	r0, #1
   15d88:	b	15b9c <__assert_fail@plt+0x4da8>
   15d8c:	andeq	r7, r1, r4, lsl #27
   15d90:	andeq	r7, r1, r4, ror sp
   15d94:	andeq	r7, r1, ip, asr #22
   15d98:	andeq	r7, r1, r8, lsl #27
   15d9c:	andeq	r8, r2, r0, lsl r1
   15da0:	ldrdeq	r7, [r1], -r0
   15da4:	andeq	r7, r1, r4, lsr #27
   15da8:	push	{r4, r5, lr}
   15dac:	sub	sp, sp, #20
   15db0:	ldr	r4, [pc, #84]	; 15e0c <__assert_fail@plt+0x5018>
   15db4:	ldr	r5, [pc, #84]	; 15e10 <__assert_fail@plt+0x501c>
   15db8:	ldr	ip, [r5]
   15dbc:	str	ip, [r4]
   15dc0:	ldr	ip, [r5, #4]
   15dc4:	str	ip, [r4, #4]
   15dc8:	ldr	ip, [sp, #40]	; 0x28
   15dcc:	str	ip, [sp, #12]
   15dd0:	str	r4, [sp, #8]
   15dd4:	ldr	ip, [sp, #36]	; 0x24
   15dd8:	str	ip, [sp, #4]
   15ddc:	ldr	ip, [sp, #32]
   15de0:	str	ip, [sp]
   15de4:	bl	1582c <__assert_fail@plt+0x4a38>
   15de8:	ldr	r3, [r4]
   15dec:	str	r3, [r5]
   15df0:	ldr	r2, [r4, #12]
   15df4:	ldr	r3, [pc, #24]	; 15e14 <__assert_fail@plt+0x5020>
   15df8:	str	r2, [r3]
   15dfc:	ldr	r3, [r4, #8]
   15e00:	str	r3, [r5, #8]
   15e04:	add	sp, sp, #20
   15e08:	pop	{r4, r5, pc}
   15e0c:	andeq	r8, r2, r0, lsr r1
   15e10:	andeq	r8, r2, r4, lsl #2
   15e14:			; <UNDEFINED> instruction: 0x000281bc
   15e18:	push	{lr}		; (str lr, [sp, #-4]!)
   15e1c:	sub	sp, sp, #20
   15e20:	mov	r3, #1
   15e24:	str	r3, [sp, #8]
   15e28:	mov	r3, #0
   15e2c:	str	r3, [sp, #4]
   15e30:	str	r3, [sp]
   15e34:	bl	15da8 <__assert_fail@plt+0x4fb4>
   15e38:	add	sp, sp, #20
   15e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e40:	push	{r4, lr}
   15e44:	ror	r0, r0, #3
   15e48:	bl	17634 <__assert_fail@plt+0x6840>
   15e4c:	mov	r0, r1
   15e50:	pop	{r4, pc}
   15e54:	cmp	r1, r0
   15e58:	movne	r0, #0
   15e5c:	moveq	r0, #1
   15e60:	bx	lr
   15e64:	ldr	r3, [r0, #20]
   15e68:	ldr	r2, [pc, #176]	; 15f20 <__assert_fail@plt+0x512c>
   15e6c:	cmp	r3, r2
   15e70:	beq	15f08 <__assert_fail@plt+0x5114>
   15e74:	vldr	s15, [r3, #8]
   15e78:	vldr	s14, [pc, #144]	; 15f10 <__assert_fail@plt+0x511c>
   15e7c:	vcmpe.f32	s15, s14
   15e80:	vmrs	APSR_nzcv, fpscr
   15e84:	ble	15ee4 <__assert_fail@plt+0x50f0>
   15e88:	vldr	s14, [pc, #132]	; 15f14 <__assert_fail@plt+0x5120>
   15e8c:	vcmpe.f32	s15, s14
   15e90:	vmrs	APSR_nzcv, fpscr
   15e94:	bpl	15ee4 <__assert_fail@plt+0x50f0>
   15e98:	vldr	s13, [r3, #12]
   15e9c:	vldr	s14, [pc, #116]	; 15f18 <__assert_fail@plt+0x5124>
   15ea0:	vcmpe.f32	s13, s14
   15ea4:	vmrs	APSR_nzcv, fpscr
   15ea8:	ble	15ee4 <__assert_fail@plt+0x50f0>
   15eac:	vldr	s14, [r3]
   15eb0:	vcmpe.f32	s14, #0.0
   15eb4:	vmrs	APSR_nzcv, fpscr
   15eb8:	blt	15ee4 <__assert_fail@plt+0x50f0>
   15ebc:	vldr	s13, [pc, #76]	; 15f10 <__assert_fail@plt+0x511c>
   15ec0:	vadd.f32	s14, s14, s13
   15ec4:	vldr	s13, [r3, #4]
   15ec8:	vcmpe.f32	s14, s13
   15ecc:	vmrs	APSR_nzcv, fpscr
   15ed0:	bpl	15ee4 <__assert_fail@plt+0x50f0>
   15ed4:	vldr	s12, [pc, #64]	; 15f1c <__assert_fail@plt+0x5128>
   15ed8:	vcmpe.f32	s13, s12
   15edc:	vmrs	APSR_nzcv, fpscr
   15ee0:	bls	15ef4 <__assert_fail@plt+0x5100>
   15ee4:	ldr	r3, [pc, #52]	; 15f20 <__assert_fail@plt+0x512c>
   15ee8:	str	r3, [r0, #20]
   15eec:	mov	r0, #0
   15ef0:	bx	lr
   15ef4:	vcmpe.f32	s15, s14
   15ef8:	vmrs	APSR_nzcv, fpscr
   15efc:	ble	15ee4 <__assert_fail@plt+0x50f0>
   15f00:	mov	r0, #1
   15f04:	bx	lr
   15f08:	mov	r0, #1
   15f0c:	bx	lr
   15f10:	stclcc	12, cr12, [ip, #820]	; 0x334
   15f14:	svccc	0x00666666
   15f18:	svccc	0x008ccccd
   15f1c:	svccc	0x00800000
   15f20:	ldrdeq	r7, [r1], -r4
   15f24:	push	{r4, lr}
   15f28:	mov	r4, r0
   15f2c:	mov	r0, r1
   15f30:	ldr	r3, [r4, #24]
   15f34:	ldr	r1, [r4, #8]
   15f38:	blx	r3
   15f3c:	ldr	r3, [r4, #8]
   15f40:	cmp	r0, r3
   15f44:	bcs	15f54 <__assert_fail@plt+0x5160>
   15f48:	ldr	r3, [r4]
   15f4c:	add	r0, r3, r0, lsl #3
   15f50:	pop	{r4, pc}
   15f54:	bl	10db8 <abort@plt>
   15f58:	push	{r4, r5, r6, r7, r8, lr}
   15f5c:	ldrb	r3, [r1, #16]
   15f60:	cmp	r3, #0
   15f64:	bne	15f94 <__assert_fail@plt+0x51a0>
   15f68:	vmov	s15, r0
   15f6c:	vcvt.f32.u32	s13, s15
   15f70:	vldr	s14, [r1, #8]
   15f74:	vdiv.f32	s15, s13, s14
   15f78:	vldr	s14, [pc, #204]	; 1604c <__assert_fail@plt+0x5258>
   15f7c:	vcmpe.f32	s15, s14
   15f80:	vmrs	APSR_nzcv, fpscr
   15f84:	movge	r7, #0
   15f88:	bge	15fcc <__assert_fail@plt+0x51d8>
   15f8c:	vcvt.u32.f32	s15, s15
   15f90:	vmov	r0, s15
   15f94:	cmp	r0, #10
   15f98:	movcc	r0, #10
   15f9c:	orr	r7, r0, #1
   15fa0:	cmn	r7, #1
   15fa4:	ldrne	r8, [pc, #164]	; 16050 <__assert_fail@plt+0x525c>
   15fa8:	bne	15ff8 <__assert_fail@plt+0x5204>
   15fac:	lsr	r3, r7, #30
   15fb0:	lsl	r2, r7, #2
   15fb4:	adds	r3, r3, #0
   15fb8:	movne	r3, #1
   15fbc:	cmp	r2, #0
   15fc0:	movlt	r3, #1
   15fc4:	cmp	r3, #0
   15fc8:	movne	r7, #0
   15fcc:	mov	r0, r7
   15fd0:	pop	{r4, r5, r6, r7, r8, pc}
   15fd4:	mov	r4, #3
   15fd8:	mov	r1, r4
   15fdc:	mov	r0, r7
   15fe0:	bl	17634 <__assert_fail@plt+0x6840>
   15fe4:	cmp	r1, #0
   15fe8:	bne	15fac <__assert_fail@plt+0x51b8>
   15fec:	add	r7, r7, #2
   15ff0:	cmn	r7, #1
   15ff4:	beq	15fac <__assert_fail@plt+0x51b8>
   15ff8:	cmp	r7, #9
   15ffc:	bls	15fd4 <__assert_fail@plt+0x51e0>
   16000:	umull	r2, r3, r8, r7
   16004:	lsr	r3, r3, #1
   16008:	add	r3, r3, r3, lsl #1
   1600c:	cmp	r7, r3
   16010:	beq	15fec <__assert_fail@plt+0x51f8>
   16014:	mov	r6, #16
   16018:	mov	r5, #9
   1601c:	mov	r4, #3
   16020:	add	r5, r5, r6
   16024:	add	r4, r4, #2
   16028:	cmp	r5, r7
   1602c:	bcs	15fd8 <__assert_fail@plt+0x51e4>
   16030:	add	r6, r6, #8
   16034:	mov	r1, r4
   16038:	mov	r0, r7
   1603c:	bl	17634 <__assert_fail@plt+0x6840>
   16040:	cmp	r1, #0
   16044:	bne	16020 <__assert_fail@plt+0x522c>
   16048:	b	15fec <__assert_fail@plt+0x51f8>
   1604c:	svcmi	0x00800000
   16050:	bge	feac0b04 <stdout@@GLIBC_2.4+0xfea989f0>
   16054:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16058:	ldr	r7, [r1]
   1605c:	ldr	r3, [r1, #4]
   16060:	cmp	r7, r3
   16064:	bcs	16198 <__assert_fail@plt+0x53a4>
   16068:	mov	fp, r2
   1606c:	mov	sl, r1
   16070:	mov	r6, r0
   16074:	add	r7, r7, #8
   16078:	mov	r9, #0
   1607c:	b	160e4 <__assert_fail@plt+0x52f0>
   16080:	str	r5, [r0]
   16084:	ldr	r2, [r6, #12]
   16088:	add	r2, r2, #1
   1608c:	str	r2, [r6, #12]
   16090:	str	r9, [r4]
   16094:	ldr	r2, [r6, #36]	; 0x24
   16098:	str	r2, [r4, #4]
   1609c:	str	r4, [r6, #36]	; 0x24
   160a0:	b	1612c <__assert_fail@plt+0x5338>
   160a4:	mov	r0, #8
   160a8:	bl	17038 <__assert_fail@plt+0x6244>
   160ac:	cmp	r0, #0
   160b0:	beq	161a0 <__assert_fail@plt+0x53ac>
   160b4:	str	r4, [r0]
   160b8:	ldr	r3, [r5, #4]
   160bc:	str	r3, [r0, #4]
   160c0:	str	r0, [r5, #4]
   160c4:	str	r9, [r8, #-8]
   160c8:	ldr	r3, [sl, #12]
   160cc:	sub	r3, r3, #1
   160d0:	str	r3, [sl, #12]
   160d4:	add	r7, r7, #8
   160d8:	ldr	r3, [sl, #4]
   160dc:	cmp	r3, r8
   160e0:	bls	16190 <__assert_fail@plt+0x539c>
   160e4:	mov	r8, r7
   160e8:	ldr	r3, [r7, #-8]
   160ec:	cmp	r3, #0
   160f0:	beq	160d4 <__assert_fail@plt+0x52e0>
   160f4:	ldr	r4, [r7, #-4]
   160f8:	cmp	r4, #0
   160fc:	beq	16138 <__assert_fail@plt+0x5344>
   16100:	ldr	r5, [r4]
   16104:	mov	r1, r5
   16108:	mov	r0, r6
   1610c:	bl	15f24 <__assert_fail@plt+0x5130>
   16110:	ldr	r3, [r4, #4]
   16114:	ldr	r2, [r0]
   16118:	cmp	r2, #0
   1611c:	beq	16080 <__assert_fail@plt+0x528c>
   16120:	ldr	r2, [r0, #4]
   16124:	str	r2, [r4, #4]
   16128:	str	r4, [r0, #4]
   1612c:	mov	r4, r3
   16130:	cmp	r3, #0
   16134:	bne	16100 <__assert_fail@plt+0x530c>
   16138:	ldr	r4, [r8, #-8]
   1613c:	str	r9, [r8, #-4]
   16140:	cmp	fp, #0
   16144:	bne	160d4 <__assert_fail@plt+0x52e0>
   16148:	mov	r1, r4
   1614c:	mov	r0, r6
   16150:	bl	15f24 <__assert_fail@plt+0x5130>
   16154:	mov	r5, r0
   16158:	ldr	r3, [r0]
   1615c:	cmp	r3, #0
   16160:	beq	1617c <__assert_fail@plt+0x5388>
   16164:	ldr	r0, [r6, #36]	; 0x24
   16168:	cmp	r0, #0
   1616c:	beq	160a4 <__assert_fail@plt+0x52b0>
   16170:	ldr	r3, [r0, #4]
   16174:	str	r3, [r6, #36]	; 0x24
   16178:	b	160b4 <__assert_fail@plt+0x52c0>
   1617c:	str	r4, [r0]
   16180:	ldr	r3, [r6, #12]
   16184:	add	r3, r3, #1
   16188:	str	r3, [r6, #12]
   1618c:	b	160c4 <__assert_fail@plt+0x52d0>
   16190:	mov	r0, #1
   16194:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16198:	mov	r0, #1
   1619c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161a0:	mov	r0, fp
   161a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161a8:	push	{r4, r5, r6, r7, r8, lr}
   161ac:	mov	r6, r0
   161b0:	mov	r5, r1
   161b4:	mov	r8, r2
   161b8:	mov	r7, r3
   161bc:	bl	15f24 <__assert_fail@plt+0x5130>
   161c0:	str	r0, [r8]
   161c4:	ldr	r3, [r0]
   161c8:	cmp	r3, #0
   161cc:	beq	162a4 <__assert_fail@plt+0x54b0>
   161d0:	mov	r4, r0
   161d4:	cmp	r5, r3
   161d8:	beq	1626c <__assert_fail@plt+0x5478>
   161dc:	ldr	r2, [r6, #28]
   161e0:	mov	r1, r3
   161e4:	mov	r0, r5
   161e8:	blx	r2
   161ec:	cmp	r0, #0
   161f0:	bne	1626c <__assert_fail@plt+0x5478>
   161f4:	ldr	r3, [r4, #4]
   161f8:	cmp	r3, #0
   161fc:	beq	162ac <__assert_fail@plt+0x54b8>
   16200:	ldr	r1, [r3]
   16204:	cmp	r5, r1
   16208:	beq	1623c <__assert_fail@plt+0x5448>
   1620c:	ldr	r3, [r6, #28]
   16210:	mov	r0, r5
   16214:	blx	r3
   16218:	cmp	r0, #0
   1621c:	bne	1623c <__assert_fail@plt+0x5448>
   16220:	ldr	r4, [r4, #4]
   16224:	ldr	r3, [r4, #4]
   16228:	cmp	r3, #0
   1622c:	beq	162a4 <__assert_fail@plt+0x54b0>
   16230:	ldr	r1, [r3]
   16234:	cmp	r5, r1
   16238:	bne	1620c <__assert_fail@plt+0x5418>
   1623c:	ldr	r2, [r4, #4]
   16240:	ldr	r3, [r2]
   16244:	cmp	r7, #0
   16248:	beq	162a4 <__assert_fail@plt+0x54b0>
   1624c:	ldr	r1, [r2, #4]
   16250:	str	r1, [r4, #4]
   16254:	mov	r1, #0
   16258:	str	r1, [r2]
   1625c:	ldr	r1, [r6, #36]	; 0x24
   16260:	str	r1, [r2, #4]
   16264:	str	r2, [r6, #36]	; 0x24
   16268:	b	162a4 <__assert_fail@plt+0x54b0>
   1626c:	ldr	r3, [r4]
   16270:	cmp	r7, #0
   16274:	beq	162a4 <__assert_fail@plt+0x54b0>
   16278:	ldr	r2, [r4, #4]
   1627c:	cmp	r2, #0
   16280:	ldmne	r2, {r0, r1}
   16284:	stmne	r4, {r0, r1}
   16288:	movne	r1, #0
   1628c:	strne	r1, [r2]
   16290:	ldrne	r1, [r6, #36]	; 0x24
   16294:	strne	r1, [r2, #4]
   16298:	strne	r2, [r6, #36]	; 0x24
   1629c:	moveq	r2, #0
   162a0:	streq	r2, [r4]
   162a4:	mov	r0, r3
   162a8:	pop	{r4, r5, r6, r7, r8, pc}
   162ac:	mov	r3, #0
   162b0:	b	162a4 <__assert_fail@plt+0x54b0>
   162b4:	ldr	r0, [r0, #8]
   162b8:	bx	lr
   162bc:	ldr	r0, [r0, #12]
   162c0:	bx	lr
   162c4:	ldr	r0, [r0, #16]
   162c8:	bx	lr
   162cc:	ldr	r1, [r0]
   162d0:	ldr	ip, [r0, #4]
   162d4:	cmp	r1, ip
   162d8:	bcs	16330 <__assert_fail@plt+0x553c>
   162dc:	mov	r0, #0
   162e0:	b	162fc <__assert_fail@plt+0x5508>
   162e4:	mov	r2, #1
   162e8:	cmp	r0, r2
   162ec:	movcc	r0, r2
   162f0:	add	r1, r1, #8
   162f4:	cmp	r1, ip
   162f8:	bcs	1632c <__assert_fail@plt+0x5538>
   162fc:	ldr	r3, [r1]
   16300:	cmp	r3, #0
   16304:	beq	162f0 <__assert_fail@plt+0x54fc>
   16308:	ldr	r3, [r1, #4]
   1630c:	cmp	r3, #0
   16310:	beq	162e4 <__assert_fail@plt+0x54f0>
   16314:	mov	r2, #1
   16318:	add	r2, r2, #1
   1631c:	ldr	r3, [r3, #4]
   16320:	cmp	r3, #0
   16324:	bne	16318 <__assert_fail@plt+0x5524>
   16328:	b	162e8 <__assert_fail@plt+0x54f4>
   1632c:	bx	lr
   16330:	mov	r0, #0
   16334:	bx	lr
   16338:	push	{lr}		; (str lr, [sp, #-4]!)
   1633c:	ldr	r1, [r0]
   16340:	ldr	lr, [r0, #4]
   16344:	cmp	r1, lr
   16348:	bcs	16398 <__assert_fail@plt+0x55a4>
   1634c:	mov	r2, #0
   16350:	mov	ip, r2
   16354:	b	16364 <__assert_fail@plt+0x5570>
   16358:	add	r1, r1, #8
   1635c:	cmp	r1, lr
   16360:	bcs	163a0 <__assert_fail@plt+0x55ac>
   16364:	ldr	r3, [r1]
   16368:	cmp	r3, #0
   1636c:	beq	16358 <__assert_fail@plt+0x5564>
   16370:	add	ip, ip, #1
   16374:	add	r2, r2, #1
   16378:	ldr	r3, [r1, #4]
   1637c:	cmp	r3, #0
   16380:	beq	16358 <__assert_fail@plt+0x5564>
   16384:	add	r2, r2, #1
   16388:	ldr	r3, [r3, #4]
   1638c:	cmp	r3, #0
   16390:	bne	16384 <__assert_fail@plt+0x5590>
   16394:	b	16358 <__assert_fail@plt+0x5564>
   16398:	mov	r2, #0
   1639c:	mov	ip, r2
   163a0:	ldr	r3, [r0, #12]
   163a4:	cmp	r3, ip
   163a8:	beq	163b4 <__assert_fail@plt+0x55c0>
   163ac:	mov	r0, #0
   163b0:	pop	{pc}		; (ldr pc, [sp], #4)
   163b4:	ldr	r0, [r0, #16]
   163b8:	cmp	r0, r2
   163bc:	movne	r0, #0
   163c0:	moveq	r0, #1
   163c4:	pop	{pc}		; (ldr pc, [sp], #4)
   163c8:	push	{r4, r5, r6, r7, r8, lr}
   163cc:	sub	sp, sp, #8
   163d0:	mov	r6, r0
   163d4:	mov	r4, r1
   163d8:	ldr	r5, [r0, #8]
   163dc:	ldr	r7, [r0, #12]
   163e0:	bl	162cc <__assert_fail@plt+0x54d8>
   163e4:	mov	r8, r0
   163e8:	ldr	r2, [r6, #16]
   163ec:	ldr	r1, [pc, #100]	; 16458 <__assert_fail@plt+0x5664>
   163f0:	mov	r0, r4
   163f4:	bl	10cec <fprintf@plt>
   163f8:	mov	r2, r5
   163fc:	ldr	r1, [pc, #88]	; 1645c <__assert_fail@plt+0x5668>
   16400:	mov	r0, r4
   16404:	bl	10cec <fprintf@plt>
   16408:	vmov	s15, r7
   1640c:	vcvt.f64.u32	d6, s15
   16410:	vldr	d7, [pc, #56]	; 16450 <__assert_fail@plt+0x565c>
   16414:	vmul.f64	d6, d6, d7
   16418:	vmov	s15, r5
   1641c:	vcvt.f64.u32	d7, s15
   16420:	vdiv.f64	d5, d6, d7
   16424:	vstr	d5, [sp]
   16428:	mov	r2, r7
   1642c:	ldr	r1, [pc, #44]	; 16460 <__assert_fail@plt+0x566c>
   16430:	mov	r0, r4
   16434:	bl	10cec <fprintf@plt>
   16438:	mov	r2, r8
   1643c:	ldr	r1, [pc, #32]	; 16464 <__assert_fail@plt+0x5670>
   16440:	mov	r0, r4
   16444:	bl	10cec <fprintf@plt>
   16448:	add	sp, sp, #8
   1644c:	pop	{r4, r5, r6, r7, r8, pc}
   16450:	andeq	r0, r0, r0
   16454:	subsmi	r0, r9, r0
   16458:	andeq	r7, r1, r8, ror #27
   1645c:	andeq	r7, r1, r0, lsl #28
   16460:	andeq	r7, r1, r8, lsl lr
   16464:	andeq	r7, r1, ip, lsr lr
   16468:	push	{r4, r5, r6, lr}
   1646c:	mov	r6, r0
   16470:	mov	r5, r1
   16474:	bl	15f24 <__assert_fail@plt+0x5130>
   16478:	ldr	r1, [r0]
   1647c:	cmp	r1, #0
   16480:	beq	164d4 <__assert_fail@plt+0x56e0>
   16484:	mov	r4, r0
   16488:	cmp	r0, #0
   1648c:	beq	164dc <__assert_fail@plt+0x56e8>
   16490:	cmp	r5, r1
   16494:	beq	164c4 <__assert_fail@plt+0x56d0>
   16498:	ldr	r3, [r6, #28]
   1649c:	mov	r0, r5
   164a0:	blx	r3
   164a4:	cmp	r0, #0
   164a8:	bne	164c4 <__assert_fail@plt+0x56d0>
   164ac:	ldr	r4, [r4, #4]
   164b0:	cmp	r4, #0
   164b4:	beq	164cc <__assert_fail@plt+0x56d8>
   164b8:	ldr	r1, [r4]
   164bc:	cmp	r5, r1
   164c0:	bne	16498 <__assert_fail@plt+0x56a4>
   164c4:	ldr	r0, [r4]
   164c8:	pop	{r4, r5, r6, pc}
   164cc:	mov	r0, #0
   164d0:	pop	{r4, r5, r6, pc}
   164d4:	mov	r0, #0
   164d8:	pop	{r4, r5, r6, pc}
   164dc:	mov	r0, #0
   164e0:	pop	{r4, r5, r6, pc}
   164e4:	ldr	r3, [r0, #16]
   164e8:	cmp	r3, #0
   164ec:	beq	16530 <__assert_fail@plt+0x573c>
   164f0:	ldr	r3, [r0]
   164f4:	ldr	r2, [r0, #4]
   164f8:	cmp	r3, r2
   164fc:	bcs	16528 <__assert_fail@plt+0x5734>
   16500:	ldr	r0, [r3]
   16504:	cmp	r0, #0
   16508:	bne	16524 <__assert_fail@plt+0x5730>
   1650c:	add	r3, r3, #8
   16510:	cmp	r3, r2
   16514:	bcs	16528 <__assert_fail@plt+0x5734>
   16518:	ldr	r0, [r3]
   1651c:	cmp	r0, #0
   16520:	beq	1650c <__assert_fail@plt+0x5718>
   16524:	bx	lr
   16528:	push	{r4, lr}
   1652c:	bl	10db8 <abort@plt>
   16530:	mov	r0, #0
   16534:	b	16524 <__assert_fail@plt+0x5730>
   16538:	push	{r4, r5, r6, lr}
   1653c:	mov	r5, r0
   16540:	mov	r4, r1
   16544:	bl	15f24 <__assert_fail@plt+0x5130>
   16548:	mov	r2, r0
   1654c:	mov	r3, r0
   16550:	ldr	r1, [r3]
   16554:	cmp	r4, r1
   16558:	beq	1656c <__assert_fail@plt+0x5778>
   1655c:	ldr	r3, [r3, #4]
   16560:	cmp	r3, #0
   16564:	bne	16550 <__assert_fail@plt+0x575c>
   16568:	b	16578 <__assert_fail@plt+0x5784>
   1656c:	ldr	r3, [r3, #4]
   16570:	cmp	r3, #0
   16574:	bne	16598 <__assert_fail@plt+0x57a4>
   16578:	ldr	r3, [r5, #4]
   1657c:	add	r2, r2, #8
   16580:	cmp	r2, r3
   16584:	bcs	165a0 <__assert_fail@plt+0x57ac>
   16588:	ldr	r0, [r2]
   1658c:	cmp	r0, #0
   16590:	beq	1657c <__assert_fail@plt+0x5788>
   16594:	pop	{r4, r5, r6, pc}
   16598:	ldr	r0, [r3]
   1659c:	pop	{r4, r5, r6, pc}
   165a0:	mov	r0, #0
   165a4:	pop	{r4, r5, r6, pc}
   165a8:	push	{r4, r5, lr}
   165ac:	ldr	r4, [r0]
   165b0:	ldr	r3, [r0, #4]
   165b4:	cmp	r4, r3
   165b8:	bcs	16624 <__assert_fail@plt+0x5830>
   165bc:	mov	r5, r0
   165c0:	mov	r0, #0
   165c4:	b	165d8 <__assert_fail@plt+0x57e4>
   165c8:	add	r4, r4, #8
   165cc:	ldr	r3, [r5, #4]
   165d0:	cmp	r3, r4
   165d4:	bls	16620 <__assert_fail@plt+0x582c>
   165d8:	ldr	r3, [r4]
   165dc:	cmp	r3, #0
   165e0:	beq	165c8 <__assert_fail@plt+0x57d4>
   165e4:	cmp	r4, #0
   165e8:	beq	165c8 <__assert_fail@plt+0x57d4>
   165ec:	cmp	r2, r0
   165f0:	popls	{r4, r5, pc}
   165f4:	add	ip, r1, r0, lsl #2
   165f8:	mov	r3, r4
   165fc:	add	r0, r0, #1
   16600:	ldr	lr, [r3]
   16604:	str	lr, [ip], #4
   16608:	ldr	r3, [r3, #4]
   1660c:	cmp	r3, #0
   16610:	beq	165c8 <__assert_fail@plt+0x57d4>
   16614:	cmp	r2, r0
   16618:	bne	165fc <__assert_fail@plt+0x5808>
   1661c:	pop	{r4, r5, pc}
   16620:	pop	{r4, r5, pc}
   16624:	mov	r0, #0
   16628:	pop	{r4, r5, pc}
   1662c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16630:	ldr	r8, [r0]
   16634:	ldr	r3, [r0, #4]
   16638:	cmp	r8, r3
   1663c:	bcs	166a4 <__assert_fail@plt+0x58b0>
   16640:	mov	r7, r2
   16644:	mov	r6, r1
   16648:	mov	r9, r0
   1664c:	mov	r5, #0
   16650:	b	16664 <__assert_fail@plt+0x5870>
   16654:	add	r8, r8, #8
   16658:	ldr	r3, [r9, #4]
   1665c:	cmp	r3, r8
   16660:	bls	166a8 <__assert_fail@plt+0x58b4>
   16664:	ldr	r3, [r8]
   16668:	cmp	r3, #0
   1666c:	beq	16654 <__assert_fail@plt+0x5860>
   16670:	cmp	r8, #0
   16674:	beq	16654 <__assert_fail@plt+0x5860>
   16678:	mov	r4, r8
   1667c:	mov	r1, r7
   16680:	ldr	r0, [r4]
   16684:	blx	r6
   16688:	cmp	r0, #0
   1668c:	beq	166a8 <__assert_fail@plt+0x58b4>
   16690:	add	r5, r5, #1
   16694:	ldr	r4, [r4, #4]
   16698:	cmp	r4, #0
   1669c:	bne	1667c <__assert_fail@plt+0x5888>
   166a0:	b	16654 <__assert_fail@plt+0x5860>
   166a4:	mov	r5, #0
   166a8:	mov	r0, r5
   166ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166b0:	ldrb	r3, [r0]
   166b4:	cmp	r3, #0
   166b8:	beq	166f0 <__assert_fail@plt+0x58fc>
   166bc:	push	{r4, r5, r6, lr}
   166c0:	mov	r4, r0
   166c4:	mov	r5, r1
   166c8:	mov	r1, #0
   166cc:	rsb	r0, r1, r1, lsl #5
   166d0:	mov	r1, r5
   166d4:	add	r0, r0, r3
   166d8:	bl	17634 <__assert_fail@plt+0x6840>
   166dc:	ldrb	r3, [r4, #1]!
   166e0:	cmp	r3, #0
   166e4:	bne	166cc <__assert_fail@plt+0x58d8>
   166e8:	mov	r0, r1
   166ec:	pop	{r4, r5, r6, pc}
   166f0:	mov	r1, #0
   166f4:	mov	r0, r1
   166f8:	bx	lr
   166fc:	push	{lr}		; (str lr, [sp, #-4]!)
   16700:	mov	ip, r0
   16704:	ldr	lr, [pc, #16]	; 1671c <__assert_fail@plt+0x5928>
   16708:	ldm	lr!, {r0, r1, r2, r3}
   1670c:	stmia	ip!, {r0, r1, r2, r3}
   16710:	ldr	r3, [lr]
   16714:	str	r3, [ip]
   16718:	pop	{pc}		; (ldr pc, [sp], #4)
   1671c:	ldrdeq	r7, [r1], -r4
   16720:	push	{r4, r5, r6, r7, r8, lr}
   16724:	mov	r8, r0
   16728:	mov	r5, r1
   1672c:	subs	r7, r2, #0
   16730:	ldr	r2, [pc, #180]	; 167ec <__assert_fail@plt+0x59f8>
   16734:	cmp	r7, #0
   16738:	moveq	r7, r2
   1673c:	subs	r6, r3, #0
   16740:	ldr	r3, [pc, #168]	; 167f0 <__assert_fail@plt+0x59fc>
   16744:	cmp	r6, #0
   16748:	moveq	r6, r3
   1674c:	mov	r0, #40	; 0x28
   16750:	bl	17038 <__assert_fail@plt+0x6244>
   16754:	subs	r4, r0, #0
   16758:	beq	167d4 <__assert_fail@plt+0x59e0>
   1675c:	ldr	r3, [pc, #144]	; 167f4 <__assert_fail@plt+0x5a00>
   16760:	cmp	r5, #0
   16764:	moveq	r5, r3
   16768:	str	r5, [r4, #20]
   1676c:	mov	r0, r4
   16770:	bl	15e64 <__assert_fail@plt+0x5070>
   16774:	cmp	r0, #0
   16778:	beq	167dc <__assert_fail@plt+0x59e8>
   1677c:	mov	r1, r5
   16780:	mov	r0, r8
   16784:	bl	15f58 <__assert_fail@plt+0x5164>
   16788:	str	r0, [r4, #8]
   1678c:	cmp	r0, #0
   16790:	beq	167dc <__assert_fail@plt+0x59e8>
   16794:	mov	r1, #8
   16798:	bl	16fe8 <__assert_fail@plt+0x61f4>
   1679c:	str	r0, [r4]
   167a0:	cmp	r0, #0
   167a4:	beq	167dc <__assert_fail@plt+0x59e8>
   167a8:	ldr	r3, [r4, #8]
   167ac:	add	r0, r0, r3, lsl #3
   167b0:	str	r0, [r4, #4]
   167b4:	mov	r3, #0
   167b8:	str	r3, [r4, #12]
   167bc:	str	r3, [r4, #16]
   167c0:	str	r7, [r4, #24]
   167c4:	str	r6, [r4, #28]
   167c8:	ldr	r2, [sp, #24]
   167cc:	str	r2, [r4, #32]
   167d0:	str	r3, [r4, #36]	; 0x24
   167d4:	mov	r0, r4
   167d8:	pop	{r4, r5, r6, r7, r8, pc}
   167dc:	mov	r0, r4
   167e0:	bl	13034 <__assert_fail@plt+0x2240>
   167e4:	mov	r4, #0
   167e8:	b	167d4 <__assert_fail@plt+0x59e0>
   167ec:	andeq	r5, r1, r0, asr #28
   167f0:	andeq	r5, r1, r4, asr lr
   167f4:	ldrdeq	r7, [r1], -r4
   167f8:	push	{r4, r5, r6, r7, r8, lr}
   167fc:	mov	r5, r0
   16800:	ldr	r7, [r0]
   16804:	ldr	r3, [r0, #4]
   16808:	cmp	r7, r3
   1680c:	bcs	168a0 <__assert_fail@plt+0x5aac>
   16810:	add	r7, r7, #8
   16814:	mov	r6, #0
   16818:	b	16880 <__assert_fail@plt+0x5a8c>
   1681c:	str	r6, [r4]
   16820:	ldr	r3, [r4, #4]
   16824:	ldr	r2, [r5, #36]	; 0x24
   16828:	str	r2, [r4, #4]
   1682c:	str	r4, [r5, #36]	; 0x24
   16830:	mov	r4, r3
   16834:	cmp	r3, #0
   16838:	beq	16854 <__assert_fail@plt+0x5a60>
   1683c:	ldr	r3, [r5, #32]
   16840:	cmp	r3, #0
   16844:	beq	1681c <__assert_fail@plt+0x5a28>
   16848:	ldr	r0, [r4]
   1684c:	blx	r3
   16850:	b	1681c <__assert_fail@plt+0x5a28>
   16854:	ldr	r3, [r5, #32]
   16858:	cmp	r3, #0
   1685c:	beq	16868 <__assert_fail@plt+0x5a74>
   16860:	ldr	r0, [r8, #-8]
   16864:	blx	r3
   16868:	str	r6, [r8, #-8]
   1686c:	str	r6, [r8, #-4]
   16870:	add	r7, r7, #8
   16874:	ldr	r3, [r5, #4]
   16878:	cmp	r3, r8
   1687c:	bls	168a0 <__assert_fail@plt+0x5aac>
   16880:	mov	r8, r7
   16884:	ldr	r3, [r7, #-8]
   16888:	cmp	r3, #0
   1688c:	beq	16870 <__assert_fail@plt+0x5a7c>
   16890:	ldr	r4, [r7, #-4]
   16894:	cmp	r4, #0
   16898:	bne	1683c <__assert_fail@plt+0x5a48>
   1689c:	b	16854 <__assert_fail@plt+0x5a60>
   168a0:	mov	r3, #0
   168a4:	str	r3, [r5, #12]
   168a8:	str	r3, [r5, #16]
   168ac:	pop	{r4, r5, r6, r7, r8, pc}
   168b0:	push	{r4, r5, r6, lr}
   168b4:	mov	r5, r0
   168b8:	ldr	r3, [r0, #32]
   168bc:	cmp	r3, #0
   168c0:	beq	16928 <__assert_fail@plt+0x5b34>
   168c4:	ldr	r3, [r0, #16]
   168c8:	cmp	r3, #0
   168cc:	beq	16928 <__assert_fail@plt+0x5b34>
   168d0:	ldr	r6, [r0]
   168d4:	ldr	r3, [r0, #4]
   168d8:	cmp	r6, r3
   168dc:	bcc	168f4 <__assert_fail@plt+0x5b00>
   168e0:	b	16968 <__assert_fail@plt+0x5b74>
   168e4:	add	r6, r6, #8
   168e8:	ldr	r3, [r5, #4]
   168ec:	cmp	r3, r6
   168f0:	bls	16928 <__assert_fail@plt+0x5b34>
   168f4:	ldr	r3, [r6]
   168f8:	cmp	r3, #0
   168fc:	beq	168e4 <__assert_fail@plt+0x5af0>
   16900:	cmp	r6, #0
   16904:	beq	168e4 <__assert_fail@plt+0x5af0>
   16908:	mov	r4, r6
   1690c:	ldr	r3, [r5, #32]
   16910:	ldr	r0, [r4]
   16914:	blx	r3
   16918:	ldr	r4, [r4, #4]
   1691c:	cmp	r4, #0
   16920:	bne	1690c <__assert_fail@plt+0x5b18>
   16924:	b	168e4 <__assert_fail@plt+0x5af0>
   16928:	ldr	r6, [r5]
   1692c:	ldr	r3, [r5, #4]
   16930:	cmp	r6, r3
   16934:	bcs	16968 <__assert_fail@plt+0x5b74>
   16938:	ldr	r0, [r6, #4]
   1693c:	cmp	r0, #0
   16940:	beq	16958 <__assert_fail@plt+0x5b64>
   16944:	ldr	r4, [r0, #4]
   16948:	bl	13034 <__assert_fail@plt+0x2240>
   1694c:	mov	r0, r4
   16950:	cmp	r4, #0
   16954:	bne	16944 <__assert_fail@plt+0x5b50>
   16958:	add	r6, r6, #8
   1695c:	ldr	r3, [r5, #4]
   16960:	cmp	r3, r6
   16964:	bhi	16938 <__assert_fail@plt+0x5b44>
   16968:	ldr	r0, [r5, #36]	; 0x24
   1696c:	cmp	r0, #0
   16970:	beq	16988 <__assert_fail@plt+0x5b94>
   16974:	ldr	r4, [r0, #4]
   16978:	bl	13034 <__assert_fail@plt+0x2240>
   1697c:	mov	r0, r4
   16980:	cmp	r4, #0
   16984:	bne	16974 <__assert_fail@plt+0x5b80>
   16988:	ldr	r0, [r5]
   1698c:	bl	13034 <__assert_fail@plt+0x2240>
   16990:	mov	r0, r5
   16994:	bl	13034 <__assert_fail@plt+0x2240>
   16998:	pop	{r4, r5, r6, pc}
   1699c:	push	{r4, r5, lr}
   169a0:	sub	sp, sp, #44	; 0x2c
   169a4:	mov	r4, r0
   169a8:	mov	r0, r1
   169ac:	ldr	r1, [r4, #20]
   169b0:	bl	15f58 <__assert_fail@plt+0x5164>
   169b4:	subs	r5, r0, #0
   169b8:	beq	16ab0 <__assert_fail@plt+0x5cbc>
   169bc:	ldr	r3, [r4, #8]
   169c0:	cmp	r5, r3
   169c4:	beq	16ac0 <__assert_fail@plt+0x5ccc>
   169c8:	mov	r1, #8
   169cc:	mov	r0, r5
   169d0:	bl	16fe8 <__assert_fail@plt+0x61f4>
   169d4:	str	r0, [sp]
   169d8:	cmp	r0, #0
   169dc:	beq	16ac8 <__assert_fail@plt+0x5cd4>
   169e0:	str	r5, [sp, #8]
   169e4:	add	r0, r0, r5, lsl #3
   169e8:	str	r0, [sp, #4]
   169ec:	mov	r2, #0
   169f0:	str	r2, [sp, #12]
   169f4:	str	r2, [sp, #16]
   169f8:	ldr	r3, [r4, #20]
   169fc:	str	r3, [sp, #20]
   16a00:	ldr	r3, [r4, #24]
   16a04:	str	r3, [sp, #24]
   16a08:	ldr	r3, [r4, #28]
   16a0c:	str	r3, [sp, #28]
   16a10:	ldr	r3, [r4, #32]
   16a14:	str	r3, [sp, #32]
   16a18:	ldr	r3, [r4, #36]	; 0x24
   16a1c:	str	r3, [sp, #36]	; 0x24
   16a20:	mov	r1, r4
   16a24:	mov	r0, sp
   16a28:	bl	16054 <__assert_fail@plt+0x5260>
   16a2c:	subs	r5, r0, #0
   16a30:	bne	16a78 <__assert_fail@plt+0x5c84>
   16a34:	ldr	r3, [sp, #36]	; 0x24
   16a38:	str	r3, [r4, #36]	; 0x24
   16a3c:	mov	r2, #1
   16a40:	mov	r1, sp
   16a44:	mov	r0, r4
   16a48:	bl	16054 <__assert_fail@plt+0x5260>
   16a4c:	cmp	r0, #0
   16a50:	beq	16aac <__assert_fail@plt+0x5cb8>
   16a54:	mov	r2, #0
   16a58:	mov	r1, sp
   16a5c:	mov	r0, r4
   16a60:	bl	16054 <__assert_fail@plt+0x5260>
   16a64:	cmp	r0, #0
   16a68:	beq	16aac <__assert_fail@plt+0x5cb8>
   16a6c:	ldr	r0, [sp]
   16a70:	bl	13034 <__assert_fail@plt+0x2240>
   16a74:	b	16ab4 <__assert_fail@plt+0x5cc0>
   16a78:	ldr	r0, [r4]
   16a7c:	bl	13034 <__assert_fail@plt+0x2240>
   16a80:	ldr	r3, [sp]
   16a84:	str	r3, [r4]
   16a88:	ldr	r3, [sp, #4]
   16a8c:	str	r3, [r4, #4]
   16a90:	ldr	r3, [sp, #8]
   16a94:	str	r3, [r4, #8]
   16a98:	ldr	r3, [sp, #12]
   16a9c:	str	r3, [r4, #12]
   16aa0:	ldr	r3, [sp, #36]	; 0x24
   16aa4:	str	r3, [r4, #36]	; 0x24
   16aa8:	b	16ab4 <__assert_fail@plt+0x5cc0>
   16aac:	bl	10db8 <abort@plt>
   16ab0:	mov	r5, #0
   16ab4:	mov	r0, r5
   16ab8:	add	sp, sp, #44	; 0x2c
   16abc:	pop	{r4, r5, pc}
   16ac0:	mov	r5, #1
   16ac4:	b	16ab4 <__assert_fail@plt+0x5cc0>
   16ac8:	mov	r5, #0
   16acc:	b	16ab4 <__assert_fail@plt+0x5cc0>
   16ad0:	push	{r4, r5, r6, lr}
   16ad4:	sub	sp, sp, #8
   16ad8:	subs	r6, r1, #0
   16adc:	beq	16b18 <__assert_fail@plt+0x5d24>
   16ae0:	mov	r4, r0
   16ae4:	mov	r5, r2
   16ae8:	mov	r3, #0
   16aec:	add	r2, sp, #4
   16af0:	mov	r1, r6
   16af4:	bl	161a8 <__assert_fail@plt+0x53b4>
   16af8:	cmp	r0, #0
   16afc:	beq	16b1c <__assert_fail@plt+0x5d28>
   16b00:	cmp	r5, #0
   16b04:	moveq	r0, #0
   16b08:	strne	r0, [r5]
   16b0c:	movne	r0, #0
   16b10:	add	sp, sp, #8
   16b14:	pop	{r4, r5, r6, pc}
   16b18:	bl	10db8 <abort@plt>
   16b1c:	vldr	s15, [r4, #12]
   16b20:	vcvt.f32.u32	s14, s15
   16b24:	ldr	r3, [r4, #20]
   16b28:	vldr	s15, [r4, #8]
   16b2c:	vcvt.f32.u32	s15, s15
   16b30:	vldr	s13, [r3, #8]
   16b34:	vmul.f32	s15, s15, s13
   16b38:	vcmpe.f32	s14, s15
   16b3c:	vmrs	APSR_nzcv, fpscr
   16b40:	bgt	16b90 <__assert_fail@plt+0x5d9c>
   16b44:	ldr	r3, [sp, #4]
   16b48:	ldr	r2, [r3]
   16b4c:	cmp	r2, #0
   16b50:	beq	16c34 <__assert_fail@plt+0x5e40>
   16b54:	ldr	r0, [r4, #36]	; 0x24
   16b58:	cmp	r0, #0
   16b5c:	beq	16c1c <__assert_fail@plt+0x5e28>
   16b60:	ldr	r3, [r0, #4]
   16b64:	str	r3, [r4, #36]	; 0x24
   16b68:	str	r6, [r0]
   16b6c:	ldr	r3, [sp, #4]
   16b70:	ldr	r2, [r3, #4]
   16b74:	str	r2, [r0, #4]
   16b78:	str	r0, [r3, #4]
   16b7c:	ldr	r3, [r4, #16]
   16b80:	add	r3, r3, #1
   16b84:	str	r3, [r4, #16]
   16b88:	mov	r0, #1
   16b8c:	b	16b10 <__assert_fail@plt+0x5d1c>
   16b90:	mov	r0, r4
   16b94:	bl	15e64 <__assert_fail@plt+0x5070>
   16b98:	ldr	r3, [r4, #20]
   16b9c:	vldr	s13, [r3, #8]
   16ba0:	vldr	s15, [r4, #8]
   16ba4:	vcvt.f32.u32	s15, s15
   16ba8:	vldr	s14, [r4, #12]
   16bac:	vcvt.f32.u32	s14, s14
   16bb0:	vmul.f32	s12, s13, s15
   16bb4:	vcmpe.f32	s14, s12
   16bb8:	vmrs	APSR_nzcv, fpscr
   16bbc:	ble	16b44 <__assert_fail@plt+0x5d50>
   16bc0:	ldrb	r2, [r3, #16]
   16bc4:	cmp	r2, #0
   16bc8:	vldr	s14, [r3, #12]
   16bcc:	vmul.f32	s15, s15, s14
   16bd0:	vmuleq.f32	s15, s15, s13
   16bd4:	vldr	s14, [pc, #140]	; 16c68 <__assert_fail@plt+0x5e74>
   16bd8:	vcmpe.f32	s15, s14
   16bdc:	vmrs	APSR_nzcv, fpscr
   16be0:	bge	16c58 <__assert_fail@plt+0x5e64>
   16be4:	vcvt.u32.f32	s15, s15
   16be8:	vmov	r1, s15
   16bec:	mov	r0, r4
   16bf0:	bl	1699c <__assert_fail@plt+0x5ba8>
   16bf4:	cmp	r0, #0
   16bf8:	beq	16c60 <__assert_fail@plt+0x5e6c>
   16bfc:	mov	r3, #0
   16c00:	add	r2, sp, #4
   16c04:	mov	r1, r6
   16c08:	mov	r0, r4
   16c0c:	bl	161a8 <__assert_fail@plt+0x53b4>
   16c10:	cmp	r0, #0
   16c14:	beq	16b44 <__assert_fail@plt+0x5d50>
   16c18:	bl	10db8 <abort@plt>
   16c1c:	mov	r0, #8
   16c20:	bl	17038 <__assert_fail@plt+0x6244>
   16c24:	cmp	r0, #0
   16c28:	bne	16b68 <__assert_fail@plt+0x5d74>
   16c2c:	mvn	r0, #0
   16c30:	b	16b10 <__assert_fail@plt+0x5d1c>
   16c34:	str	r6, [r3]
   16c38:	ldr	r3, [r4, #16]
   16c3c:	add	r3, r3, #1
   16c40:	str	r3, [r4, #16]
   16c44:	ldr	r3, [r4, #12]
   16c48:	add	r3, r3, #1
   16c4c:	str	r3, [r4, #12]
   16c50:	mov	r0, #1
   16c54:	b	16b10 <__assert_fail@plt+0x5d1c>
   16c58:	mvn	r0, #0
   16c5c:	b	16b10 <__assert_fail@plt+0x5d1c>
   16c60:	mvn	r0, #0
   16c64:	b	16b10 <__assert_fail@plt+0x5d1c>
   16c68:	svcmi	0x00800000
   16c6c:	push	{r4, lr}
   16c70:	sub	sp, sp, #8
   16c74:	mov	r4, r1
   16c78:	add	r2, sp, #4
   16c7c:	bl	16ad0 <__assert_fail@plt+0x5cdc>
   16c80:	cmn	r0, #1
   16c84:	beq	16c9c <__assert_fail@plt+0x5ea8>
   16c88:	cmp	r0, #0
   16c8c:	movne	r0, r4
   16c90:	ldreq	r0, [sp, #4]
   16c94:	add	sp, sp, #8
   16c98:	pop	{r4, pc}
   16c9c:	mov	r0, #0
   16ca0:	b	16c94 <__assert_fail@plt+0x5ea0>
   16ca4:	push	{r4, r5, r6, lr}
   16ca8:	sub	sp, sp, #8
   16cac:	mov	r4, r0
   16cb0:	mov	r3, #1
   16cb4:	add	r2, sp, #4
   16cb8:	bl	161a8 <__assert_fail@plt+0x53b4>
   16cbc:	subs	r5, r0, #0
   16cc0:	beq	16ce0 <__assert_fail@plt+0x5eec>
   16cc4:	ldr	r3, [r4, #16]
   16cc8:	sub	r3, r3, #1
   16ccc:	str	r3, [r4, #16]
   16cd0:	ldr	r3, [sp, #4]
   16cd4:	ldr	r3, [r3]
   16cd8:	cmp	r3, #0
   16cdc:	beq	16cec <__assert_fail@plt+0x5ef8>
   16ce0:	mov	r0, r5
   16ce4:	add	sp, sp, #8
   16ce8:	pop	{r4, r5, r6, pc}
   16cec:	ldr	r3, [r4, #12]
   16cf0:	sub	r3, r3, #1
   16cf4:	str	r3, [r4, #12]
   16cf8:	vmov	s15, r3
   16cfc:	vcvt.f32.u32	s15, s15
   16d00:	ldr	r3, [r4, #20]
   16d04:	vldr	s14, [r4, #8]
   16d08:	vcvt.f32.u32	s14, s14
   16d0c:	vldr	s13, [r3]
   16d10:	vmul.f32	s14, s14, s13
   16d14:	vcmpe.f32	s15, s14
   16d18:	vmrs	APSR_nzcv, fpscr
   16d1c:	bpl	16ce0 <__assert_fail@plt+0x5eec>
   16d20:	mov	r0, r4
   16d24:	bl	15e64 <__assert_fail@plt+0x5070>
   16d28:	ldr	r3, [r4, #20]
   16d2c:	vldr	s15, [r4, #8]
   16d30:	vcvt.f32.u32	s15, s15
   16d34:	vldr	s14, [r4, #12]
   16d38:	vcvt.f32.u32	s13, s14
   16d3c:	vldr	s14, [r3]
   16d40:	vmul.f32	s14, s15, s14
   16d44:	vcmpe.f32	s13, s14
   16d48:	vmrs	APSR_nzcv, fpscr
   16d4c:	bpl	16ce0 <__assert_fail@plt+0x5eec>
   16d50:	ldrb	r2, [r3, #16]
   16d54:	cmp	r2, #0
   16d58:	vldr	s14, [r3, #4]
   16d5c:	vmuleq.f32	s15, s15, s14
   16d60:	vldreq	s14, [r3, #8]
   16d64:	vmul.f32	s15, s15, s14
   16d68:	vcvt.u32.f32	s15, s15
   16d6c:	vmov	r1, s15
   16d70:	mov	r0, r4
   16d74:	bl	1699c <__assert_fail@plt+0x5ba8>
   16d78:	cmp	r0, #0
   16d7c:	bne	16ce0 <__assert_fail@plt+0x5eec>
   16d80:	ldr	r0, [r4, #36]	; 0x24
   16d84:	cmp	r0, #0
   16d88:	beq	16da0 <__assert_fail@plt+0x5fac>
   16d8c:	ldr	r6, [r0, #4]
   16d90:	bl	13034 <__assert_fail@plt+0x2240>
   16d94:	mov	r0, r6
   16d98:	cmp	r6, #0
   16d9c:	bne	16d8c <__assert_fail@plt+0x5f98>
   16da0:	mov	r3, #0
   16da4:	str	r3, [r4, #36]	; 0x24
   16da8:	b	16ce0 <__assert_fail@plt+0x5eec>
   16dac:	push	{r4, lr}
   16db0:	bl	16ca4 <__assert_fail@plt+0x5eb0>
   16db4:	pop	{r4, pc}
   16db8:	mov	r3, #1
   16dbc:	strb	r3, [r0, #28]
   16dc0:	mov	r3, #0
   16dc4:	str	r3, [r0, #20]
   16dc8:	str	r3, [r0, #24]
   16dcc:	str	r1, [r0]
   16dd0:	str	r1, [r0, #4]
   16dd4:	str	r1, [r0, #8]
   16dd8:	str	r1, [r0, #12]
   16ddc:	str	r1, [r0, #16]
   16de0:	bx	lr
   16de4:	ldrb	r0, [r0, #28]
   16de8:	bx	lr
   16dec:	mov	r2, r0
   16df0:	ldrb	ip, [r0, #28]
   16df4:	eor	ip, ip, #1
   16df8:	ldr	r3, [r0, #20]
   16dfc:	add	r3, ip, r3
   16e00:	and	r3, r3, #3
   16e04:	ldr	r0, [r0, r3, lsl #2]
   16e08:	str	r1, [r2, r3, lsl #2]
   16e0c:	str	r3, [r2, #20]
   16e10:	ldr	r1, [r2, #24]
   16e14:	cmp	r3, r1
   16e18:	addeq	r3, ip, r3
   16e1c:	andeq	r3, r3, #3
   16e20:	streq	r3, [r2, #24]
   16e24:	mov	r3, #0
   16e28:	strb	r3, [r2, #28]
   16e2c:	bx	lr
   16e30:	ldrb	r3, [r0, #28]
   16e34:	cmp	r3, #0
   16e38:	bne	16e70 <__assert_fail@plt+0x607c>
   16e3c:	mov	r2, r0
   16e40:	ldr	r3, [r0, #20]
   16e44:	ldr	r0, [r0, r3, lsl #2]
   16e48:	ldr	r1, [r2, #16]
   16e4c:	str	r1, [r2, r3, lsl #2]
   16e50:	ldr	r1, [r2, #24]
   16e54:	cmp	r3, r1
   16e58:	moveq	r3, #1
   16e5c:	strbeq	r3, [r2, #28]
   16e60:	addne	r3, r3, #3
   16e64:	andne	r3, r3, #3
   16e68:	strne	r3, [r2, #20]
   16e6c:	bx	lr
   16e70:	push	{r4, lr}
   16e74:	bl	10db8 <abort@plt>
   16e78:	push	{r4, r5, r6, r8, r9, lr}
   16e7c:	mov	r4, r0
   16e80:	mov	r5, r1
   16e84:	add	r6, r2, #20
   16e88:	mov	r3, #0
   16e8c:	strb	r3, [r2, #20]
   16e90:	mov	r8, #10
   16e94:	mov	r9, #0
   16e98:	mov	r2, r8
   16e9c:	mov	r3, r9
   16ea0:	mov	r0, r4
   16ea4:	mov	r1, r5
   16ea8:	bl	17968 <__assert_fail@plt+0x6b74>
   16eac:	add	r2, r2, #48	; 0x30
   16eb0:	strb	r2, [r6, #-1]!
   16eb4:	mov	r2, r8
   16eb8:	mov	r3, r9
   16ebc:	mov	r0, r4
   16ec0:	mov	r1, r5
   16ec4:	bl	17968 <__assert_fail@plt+0x6b74>
   16ec8:	mov	r4, r0
   16ecc:	mov	r5, r1
   16ed0:	orrs	r3, r4, r5
   16ed4:	bne	16e98 <__assert_fail@plt+0x60a4>
   16ed8:	mov	r0, r6
   16edc:	pop	{r4, r5, r6, r8, r9, pc}
   16ee0:	push	{r1, r2, r3}
   16ee4:	push	{lr}		; (str lr, [sp, #-4]!)
   16ee8:	sub	sp, sp, #8
   16eec:	add	r3, sp, #20
   16ef0:	str	r3, [sp, #4]
   16ef4:	ldr	r2, [sp, #16]
   16ef8:	ldr	r1, [sp, #12]
   16efc:	bl	10c5c <ioctl@plt>
   16f00:	add	sp, sp, #8
   16f04:	pop	{lr}		; (ldr lr, [sp], #4)
   16f08:	add	sp, sp, #12
   16f0c:	bx	lr
   16f10:	push	{r2, r3}
   16f14:	push	{lr}		; (str lr, [sp, #-4]!)
   16f18:	sub	sp, sp, #12
   16f1c:	ldr	r2, [sp, #16]
   16f20:	tst	r2, #64	; 0x40
   16f24:	addne	r3, sp, #24
   16f28:	strne	r3, [sp, #4]
   16f2c:	ldrne	r3, [sp, #20]
   16f30:	moveq	r3, #0
   16f34:	bl	10ce0 <openat64@plt>
   16f38:	bl	16fa8 <__assert_fail@plt+0x61b4>
   16f3c:	add	sp, sp, #12
   16f40:	pop	{lr}		; (ldr lr, [sp], #4)
   16f44:	add	sp, sp, #8
   16f48:	bx	lr
   16f4c:	push	{r4, r5, r6, r7, r8, lr}
   16f50:	mov	r6, r3
   16f54:	orr	r2, r2, #540672	; 0x84000
   16f58:	orr	r2, r2, #2304	; 0x900
   16f5c:	bl	16f10 <__assert_fail@plt+0x611c>
   16f60:	subs	r4, r0, #0
   16f64:	blt	16fa0 <__assert_fail@plt+0x61ac>
   16f68:	mov	r0, r4
   16f6c:	bl	10d4c <fdopendir@plt>
   16f70:	subs	r5, r0, #0
   16f74:	beq	16f84 <__assert_fail@plt+0x6190>
   16f78:	str	r4, [r6]
   16f7c:	mov	r0, r5
   16f80:	pop	{r4, r5, r6, r7, r8, pc}
   16f84:	bl	10cf8 <__errno_location@plt>
   16f88:	mov	r6, r0
   16f8c:	ldr	r7, [r0]
   16f90:	mov	r0, r4
   16f94:	bl	10dc4 <close@plt>
   16f98:	str	r7, [r6]
   16f9c:	b	16f7c <__assert_fail@plt+0x6188>
   16fa0:	mov	r5, #0
   16fa4:	b	16f7c <__assert_fail@plt+0x6188>
   16fa8:	push	{r4, r5, r6, r7, r8, lr}
   16fac:	mov	r4, r0
   16fb0:	cmp	r0, #2
   16fb4:	bls	16fc0 <__assert_fail@plt+0x61cc>
   16fb8:	mov	r0, r4
   16fbc:	pop	{r4, r5, r6, r7, r8, pc}
   16fc0:	bl	17434 <__assert_fail@plt+0x6640>
   16fc4:	mov	r6, r0
   16fc8:	bl	10cf8 <__errno_location@plt>
   16fcc:	mov	r5, r0
   16fd0:	ldr	r7, [r0]
   16fd4:	mov	r0, r4
   16fd8:	bl	10dc4 <close@plt>
   16fdc:	str	r7, [r5]
   16fe0:	mov	r4, r6
   16fe4:	b	16fb8 <__assert_fail@plt+0x61c4>
   16fe8:	push	{r4, lr}
   16fec:	mov	r2, r0
   16ff0:	mov	r3, r1
   16ff4:	cmp	r1, #0
   16ff8:	cmpne	r0, #0
   16ffc:	moveq	r3, #1
   17000:	moveq	r2, r3
   17004:	umull	r0, r1, r2, r3
   17008:	cmp	r0, #0
   1700c:	cmpge	r1, #0
   17010:	bne	17024 <__assert_fail@plt+0x6230>
   17014:	mov	r1, r3
   17018:	mov	r0, r2
   1701c:	bl	10b84 <calloc@plt>
   17020:	pop	{r4, pc}
   17024:	bl	10cf8 <__errno_location@plt>
   17028:	mov	r3, #12
   1702c:	str	r3, [r0]
   17030:	mov	r0, #0
   17034:	pop	{r4, pc}
   17038:	push	{r4, lr}
   1703c:	cmp	r0, #0
   17040:	moveq	r0, #1
   17044:	cmp	r0, #0
   17048:	blt	17054 <__assert_fail@plt+0x6260>
   1704c:	bl	10c8c <malloc@plt>
   17050:	pop	{r4, pc}
   17054:	bl	10cf8 <__errno_location@plt>
   17058:	mov	r3, #12
   1705c:	str	r3, [r0]
   17060:	mov	r0, #0
   17064:	pop	{r4, pc}
   17068:	push	{r4, lr}
   1706c:	cmp	r0, #0
   17070:	beq	1708c <__assert_fail@plt+0x6298>
   17074:	cmp	r1, #0
   17078:	beq	17098 <__assert_fail@plt+0x62a4>
   1707c:	cmp	r1, #0
   17080:	blt	170a4 <__assert_fail@plt+0x62b0>
   17084:	bl	10c14 <realloc@plt>
   17088:	pop	{r4, pc}
   1708c:	mov	r0, r1
   17090:	bl	17038 <__assert_fail@plt+0x6244>
   17094:	pop	{r4, pc}
   17098:	bl	13034 <__assert_fail@plt+0x2240>
   1709c:	mov	r0, #0
   170a0:	pop	{r4, pc}
   170a4:	bl	10cf8 <__errno_location@plt>
   170a8:	mov	r3, #12
   170ac:	str	r3, [r0]
   170b0:	mov	r0, #0
   170b4:	pop	{r4, pc}
   170b8:	mov	r2, #0
   170bc:	mov	r3, #0
   170c0:	strd	r2, [r0, #16]
   170c4:	ldr	r3, [pc, #4]	; 170d0 <__assert_fail@plt+0x62dc>
   170c8:	str	r3, [r0, #24]
   170cc:	bx	lr
   170d0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   170d4:	push	{r4, r5, r6, r7, r8, lr}
   170d8:	ldr	r2, [r0, #24]
   170dc:	ldr	r3, [pc, #172]	; 17190 <__assert_fail@plt+0x639c>
   170e0:	cmp	r2, r3
   170e4:	bne	1712c <__assert_fail@plt+0x6338>
   170e8:	ldrd	r6, [r0, #16]
   170ec:	orrs	r3, r6, r7
   170f0:	beq	1716c <__assert_fail@plt+0x6378>
   170f4:	ldrd	r4, [r1, #96]	; 0x60
   170f8:	ldrd	r2, [r0]
   170fc:	cmp	r5, r3
   17100:	cmpeq	r4, r2
   17104:	beq	17140 <__assert_fail@plt+0x634c>
   17108:	adds	r2, r6, #1
   1710c:	adc	r3, r7, #0
   17110:	strd	r2, [r0, #16]
   17114:	and	r6, r6, r2
   17118:	and	r7, r7, r3
   1711c:	orrs	ip, r6, r7
   17120:	beq	1715c <__assert_fail@plt+0x6368>
   17124:	mov	r0, #0
   17128:	pop	{r4, r5, r6, r7, r8, pc}
   1712c:	ldr	r3, [pc, #96]	; 17194 <__assert_fail@plt+0x63a0>
   17130:	mov	r2, #60	; 0x3c
   17134:	ldr	r1, [pc, #92]	; 17198 <__assert_fail@plt+0x63a4>
   17138:	ldr	r0, [pc, #92]	; 1719c <__assert_fail@plt+0x63a8>
   1713c:	bl	10df4 <__assert_fail@plt>
   17140:	ldrd	r4, [r1]
   17144:	ldrd	r2, [r0, #8]
   17148:	cmp	r5, r3
   1714c:	cmpeq	r4, r2
   17150:	bne	17108 <__assert_fail@plt+0x6314>
   17154:	mov	r0, #1
   17158:	pop	{r4, r5, r6, r7, r8, pc}
   1715c:	orrs	r3, r2, r3
   17160:	bne	17178 <__assert_fail@plt+0x6384>
   17164:	mov	r0, #1
   17168:	pop	{r4, r5, r6, r7, r8, pc}
   1716c:	mov	r2, #1
   17170:	mov	r3, #0
   17174:	strd	r2, [r0, #16]
   17178:	ldrd	r2, [r1]
   1717c:	strd	r2, [r0, #8]
   17180:	ldrd	r2, [r1, #96]	; 0x60
   17184:	strd	r2, [r0]
   17188:	mov	r0, #0
   1718c:	pop	{r4, r5, r6, r7, r8, pc}
   17190:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17194:	andeq	r7, r1, r4, asr lr
   17198:	andeq	r7, r1, r0, ror #28
   1719c:	andeq	r7, r1, r0, ror lr
   171a0:	push	{r1, r2, r3}
   171a4:	push	{r4, r5, r6, lr}
   171a8:	sub	sp, sp, #12
   171ac:	mov	r5, r0
   171b0:	ldr	r1, [sp, #28]
   171b4:	add	r3, sp, #32
   171b8:	str	r3, [sp, #4]
   171bc:	cmp	r1, #0
   171c0:	beq	17208 <__assert_fail@plt+0x6414>
   171c4:	ldr	r3, [pc, #540]	; 173e8 <__assert_fail@plt+0x65f4>
   171c8:	cmp	r1, r3
   171cc:	beq	17238 <__assert_fail@plt+0x6444>
   171d0:	cmp	r1, #11
   171d4:	beq	173d8 <__assert_fail@plt+0x65e4>
   171d8:	bgt	17364 <__assert_fail@plt+0x6570>
   171dc:	cmp	r1, #3
   171e0:	beq	173d8 <__assert_fail@plt+0x65e4>
   171e4:	ble	17324 <__assert_fail@plt+0x6530>
   171e8:	cmp	r1, #8
   171ec:	beq	17344 <__assert_fail@plt+0x6550>
   171f0:	ble	1733c <__assert_fail@plt+0x6548>
   171f4:	cmp	r1, #9
   171f8:	beq	173d8 <__assert_fail@plt+0x65e4>
   171fc:	cmp	r1, #10
   17200:	bne	1739c <__assert_fail@plt+0x65a8>
   17204:	b	17344 <__assert_fail@plt+0x6550>
   17208:	ldr	r3, [sp, #4]
   1720c:	add	r2, r3, #4
   17210:	str	r2, [sp, #4]
   17214:	ldr	r2, [r3]
   17218:	mov	r1, #0
   1721c:	bl	10d1c <fcntl64@plt>
   17220:	mov	r4, r0
   17224:	mov	r0, r4
   17228:	add	sp, sp, #12
   1722c:	pop	{r4, r5, r6, lr}
   17230:	add	sp, sp, #12
   17234:	bx	lr
   17238:	ldr	r3, [sp, #4]
   1723c:	add	r2, r3, #4
   17240:	str	r2, [sp, #4]
   17244:	ldr	r6, [r3]
   17248:	ldr	r3, [pc, #412]	; 173ec <__assert_fail@plt+0x65f8>
   1724c:	ldr	r3, [r3]
   17250:	cmp	r3, #0
   17254:	blt	172b4 <__assert_fail@plt+0x64c0>
   17258:	mov	r2, r6
   1725c:	ldr	r1, [pc, #388]	; 173e8 <__assert_fail@plt+0x65f4>
   17260:	bl	10d1c <fcntl64@plt>
   17264:	subs	r4, r0, #0
   17268:	blt	1727c <__assert_fail@plt+0x6488>
   1726c:	mov	r2, #1
   17270:	ldr	r3, [pc, #372]	; 173ec <__assert_fail@plt+0x65f8>
   17274:	str	r2, [r3]
   17278:	b	17224 <__assert_fail@plt+0x6430>
   1727c:	bl	10cf8 <__errno_location@plt>
   17280:	ldr	r3, [r0]
   17284:	cmp	r3, #22
   17288:	bne	1726c <__assert_fail@plt+0x6478>
   1728c:	mov	r2, r6
   17290:	mov	r1, #0
   17294:	mov	r0, r5
   17298:	bl	10d1c <fcntl64@plt>
   1729c:	subs	r4, r0, #0
   172a0:	blt	17224 <__assert_fail@plt+0x6430>
   172a4:	mvn	r2, #0
   172a8:	ldr	r3, [pc, #316]	; 173ec <__assert_fail@plt+0x65f8>
   172ac:	str	r2, [r3]
   172b0:	b	172d8 <__assert_fail@plt+0x64e4>
   172b4:	mov	r2, r6
   172b8:	mov	r1, #0
   172bc:	bl	10d1c <fcntl64@plt>
   172c0:	subs	r4, r0, #0
   172c4:	blt	17224 <__assert_fail@plt+0x6430>
   172c8:	ldr	r3, [pc, #284]	; 173ec <__assert_fail@plt+0x65f8>
   172cc:	ldr	r3, [r3]
   172d0:	cmn	r3, #1
   172d4:	bne	17224 <__assert_fail@plt+0x6430>
   172d8:	mov	r1, #1
   172dc:	mov	r0, r4
   172e0:	bl	10d1c <fcntl64@plt>
   172e4:	subs	r2, r0, #0
   172e8:	blt	17304 <__assert_fail@plt+0x6510>
   172ec:	orr	r2, r2, #1
   172f0:	mov	r1, #2
   172f4:	mov	r0, r4
   172f8:	bl	10d1c <fcntl64@plt>
   172fc:	cmn	r0, #1
   17300:	bne	17224 <__assert_fail@plt+0x6430>
   17304:	bl	10cf8 <__errno_location@plt>
   17308:	mov	r5, r0
   1730c:	ldr	r6, [r0]
   17310:	mov	r0, r4
   17314:	bl	10dc4 <close@plt>
   17318:	str	r6, [r5]
   1731c:	mvn	r4, #0
   17320:	b	17224 <__assert_fail@plt+0x6430>
   17324:	cmp	r1, #1
   17328:	beq	173d8 <__assert_fail@plt+0x65e4>
   1732c:	bgt	17344 <__assert_fail@plt+0x6550>
   17330:	cmp	r1, #0
   17334:	bne	1739c <__assert_fail@plt+0x65a8>
   17338:	b	17344 <__assert_fail@plt+0x6550>
   1733c:	cmp	r1, #4
   17340:	bne	1739c <__assert_fail@plt+0x65a8>
   17344:	ldr	r3, [sp, #4]
   17348:	add	r2, r3, #4
   1734c:	str	r2, [sp, #4]
   17350:	ldr	r2, [r3]
   17354:	mov	r0, r5
   17358:	bl	10d1c <fcntl64@plt>
   1735c:	mov	r4, r0
   17360:	b	17224 <__assert_fail@plt+0x6430>
   17364:	ldr	r3, [pc, #132]	; 173f0 <__assert_fail@plt+0x65fc>
   17368:	cmp	r1, r3
   1736c:	bgt	173bc <__assert_fail@plt+0x65c8>
   17370:	sub	r3, r3, #1
   17374:	cmp	r1, r3
   17378:	bge	17344 <__assert_fail@plt+0x6550>
   1737c:	sub	r3, r3, #5
   17380:	cmp	r1, r3
   17384:	beq	173d8 <__assert_fail@plt+0x65e4>
   17388:	add	r3, r3, #1
   1738c:	cmp	r1, r3
   17390:	beq	17344 <__assert_fail@plt+0x6550>
   17394:	cmp	r1, #1024	; 0x400
   17398:	beq	17344 <__assert_fail@plt+0x6550>
   1739c:	ldr	r3, [sp, #4]
   173a0:	add	r2, r3, #4
   173a4:	str	r2, [sp, #4]
   173a8:	ldr	r2, [r3]
   173ac:	mov	r0, r5
   173b0:	bl	10d1c <fcntl64@plt>
   173b4:	mov	r4, r0
   173b8:	b	17224 <__assert_fail@plt+0x6430>
   173bc:	ldr	r3, [pc, #48]	; 173f4 <__assert_fail@plt+0x6600>
   173c0:	cmp	r1, r3
   173c4:	beq	17344 <__assert_fail@plt+0x6550>
   173c8:	blt	173d8 <__assert_fail@plt+0x65e4>
   173cc:	add	r3, r3, #1
   173d0:	cmp	r1, r3
   173d4:	bne	1739c <__assert_fail@plt+0x65a8>
   173d8:	mov	r0, r5
   173dc:	bl	10d1c <fcntl64@plt>
   173e0:	mov	r4, r0
   173e4:	b	17224 <__assert_fail@plt+0x6430>
   173e8:	andeq	r0, r0, r6, lsl #8
   173ec:	andeq	r8, r2, r4, asr r1
   173f0:	andeq	r0, r0, r7, lsl #8
   173f4:	andeq	r0, r0, r9, lsl #8
   173f8:	push	{r1, r2, r3}
   173fc:	push	{lr}		; (str lr, [sp, #-4]!)
   17400:	sub	sp, sp, #8
   17404:	ldr	r1, [sp, #12]
   17408:	tst	r1, #64	; 0x40
   1740c:	addne	r3, sp, #20
   17410:	strne	r3, [sp, #4]
   17414:	ldrne	r2, [sp, #16]
   17418:	moveq	r2, #0
   1741c:	bl	10c74 <open64@plt>
   17420:	bl	16fa8 <__assert_fail@plt+0x61b4>
   17424:	add	sp, sp, #8
   17428:	pop	{lr}		; (ldr lr, [sp], #4)
   1742c:	add	sp, sp, #12
   17430:	bx	lr
   17434:	push	{r4, lr}
   17438:	mov	r2, #3
   1743c:	mov	r1, #0
   17440:	bl	171a0 <__assert_fail@plt+0x63ac>
   17444:	pop	{r4, pc}
   17448:	subs	r2, r1, #1
   1744c:	bxeq	lr
   17450:	bcc	17628 <__assert_fail@plt+0x6834>
   17454:	cmp	r0, r1
   17458:	bls	1760c <__assert_fail@plt+0x6818>
   1745c:	tst	r1, r2
   17460:	beq	17618 <__assert_fail@plt+0x6824>
   17464:	clz	r3, r0
   17468:	clz	r2, r1
   1746c:	sub	r3, r2, r3
   17470:	rsbs	r3, r3, #31
   17474:	addne	r3, r3, r3, lsl #1
   17478:	mov	r2, #0
   1747c:	addne	pc, pc, r3, lsl #2
   17480:	nop			; (mov r0, r0)
   17484:	cmp	r0, r1, lsl #31
   17488:	adc	r2, r2, r2
   1748c:	subcs	r0, r0, r1, lsl #31
   17490:	cmp	r0, r1, lsl #30
   17494:	adc	r2, r2, r2
   17498:	subcs	r0, r0, r1, lsl #30
   1749c:	cmp	r0, r1, lsl #29
   174a0:	adc	r2, r2, r2
   174a4:	subcs	r0, r0, r1, lsl #29
   174a8:	cmp	r0, r1, lsl #28
   174ac:	adc	r2, r2, r2
   174b0:	subcs	r0, r0, r1, lsl #28
   174b4:	cmp	r0, r1, lsl #27
   174b8:	adc	r2, r2, r2
   174bc:	subcs	r0, r0, r1, lsl #27
   174c0:	cmp	r0, r1, lsl #26
   174c4:	adc	r2, r2, r2
   174c8:	subcs	r0, r0, r1, lsl #26
   174cc:	cmp	r0, r1, lsl #25
   174d0:	adc	r2, r2, r2
   174d4:	subcs	r0, r0, r1, lsl #25
   174d8:	cmp	r0, r1, lsl #24
   174dc:	adc	r2, r2, r2
   174e0:	subcs	r0, r0, r1, lsl #24
   174e4:	cmp	r0, r1, lsl #23
   174e8:	adc	r2, r2, r2
   174ec:	subcs	r0, r0, r1, lsl #23
   174f0:	cmp	r0, r1, lsl #22
   174f4:	adc	r2, r2, r2
   174f8:	subcs	r0, r0, r1, lsl #22
   174fc:	cmp	r0, r1, lsl #21
   17500:	adc	r2, r2, r2
   17504:	subcs	r0, r0, r1, lsl #21
   17508:	cmp	r0, r1, lsl #20
   1750c:	adc	r2, r2, r2
   17510:	subcs	r0, r0, r1, lsl #20
   17514:	cmp	r0, r1, lsl #19
   17518:	adc	r2, r2, r2
   1751c:	subcs	r0, r0, r1, lsl #19
   17520:	cmp	r0, r1, lsl #18
   17524:	adc	r2, r2, r2
   17528:	subcs	r0, r0, r1, lsl #18
   1752c:	cmp	r0, r1, lsl #17
   17530:	adc	r2, r2, r2
   17534:	subcs	r0, r0, r1, lsl #17
   17538:	cmp	r0, r1, lsl #16
   1753c:	adc	r2, r2, r2
   17540:	subcs	r0, r0, r1, lsl #16
   17544:	cmp	r0, r1, lsl #15
   17548:	adc	r2, r2, r2
   1754c:	subcs	r0, r0, r1, lsl #15
   17550:	cmp	r0, r1, lsl #14
   17554:	adc	r2, r2, r2
   17558:	subcs	r0, r0, r1, lsl #14
   1755c:	cmp	r0, r1, lsl #13
   17560:	adc	r2, r2, r2
   17564:	subcs	r0, r0, r1, lsl #13
   17568:	cmp	r0, r1, lsl #12
   1756c:	adc	r2, r2, r2
   17570:	subcs	r0, r0, r1, lsl #12
   17574:	cmp	r0, r1, lsl #11
   17578:	adc	r2, r2, r2
   1757c:	subcs	r0, r0, r1, lsl #11
   17580:	cmp	r0, r1, lsl #10
   17584:	adc	r2, r2, r2
   17588:	subcs	r0, r0, r1, lsl #10
   1758c:	cmp	r0, r1, lsl #9
   17590:	adc	r2, r2, r2
   17594:	subcs	r0, r0, r1, lsl #9
   17598:	cmp	r0, r1, lsl #8
   1759c:	adc	r2, r2, r2
   175a0:	subcs	r0, r0, r1, lsl #8
   175a4:	cmp	r0, r1, lsl #7
   175a8:	adc	r2, r2, r2
   175ac:	subcs	r0, r0, r1, lsl #7
   175b0:	cmp	r0, r1, lsl #6
   175b4:	adc	r2, r2, r2
   175b8:	subcs	r0, r0, r1, lsl #6
   175bc:	cmp	r0, r1, lsl #5
   175c0:	adc	r2, r2, r2
   175c4:	subcs	r0, r0, r1, lsl #5
   175c8:	cmp	r0, r1, lsl #4
   175cc:	adc	r2, r2, r2
   175d0:	subcs	r0, r0, r1, lsl #4
   175d4:	cmp	r0, r1, lsl #3
   175d8:	adc	r2, r2, r2
   175dc:	subcs	r0, r0, r1, lsl #3
   175e0:	cmp	r0, r1, lsl #2
   175e4:	adc	r2, r2, r2
   175e8:	subcs	r0, r0, r1, lsl #2
   175ec:	cmp	r0, r1, lsl #1
   175f0:	adc	r2, r2, r2
   175f4:	subcs	r0, r0, r1, lsl #1
   175f8:	cmp	r0, r1
   175fc:	adc	r2, r2, r2
   17600:	subcs	r0, r0, r1
   17604:	mov	r0, r2
   17608:	bx	lr
   1760c:	moveq	r0, #1
   17610:	movne	r0, #0
   17614:	bx	lr
   17618:	clz	r2, r1
   1761c:	rsb	r2, r2, #31
   17620:	lsr	r0, r0, r2
   17624:	bx	lr
   17628:	cmp	r0, #0
   1762c:	mvnne	r0, #0
   17630:	b	179a4 <__assert_fail@plt+0x6bb0>
   17634:	cmp	r1, #0
   17638:	beq	17628 <__assert_fail@plt+0x6834>
   1763c:	push	{r0, r1, lr}
   17640:	bl	17448 <__assert_fail@plt+0x6654>
   17644:	pop	{r1, r2, lr}
   17648:	mul	r3, r2, r0
   1764c:	sub	r1, r1, r3
   17650:	bx	lr
   17654:	cmp	r1, #0
   17658:	beq	17864 <__assert_fail@plt+0x6a70>
   1765c:	eor	ip, r0, r1
   17660:	rsbmi	r1, r1, #0
   17664:	subs	r2, r1, #1
   17668:	beq	17830 <__assert_fail@plt+0x6a3c>
   1766c:	movs	r3, r0
   17670:	rsbmi	r3, r0, #0
   17674:	cmp	r3, r1
   17678:	bls	1783c <__assert_fail@plt+0x6a48>
   1767c:	tst	r1, r2
   17680:	beq	1784c <__assert_fail@plt+0x6a58>
   17684:	clz	r2, r3
   17688:	clz	r0, r1
   1768c:	sub	r2, r0, r2
   17690:	rsbs	r2, r2, #31
   17694:	addne	r2, r2, r2, lsl #1
   17698:	mov	r0, #0
   1769c:	addne	pc, pc, r2, lsl #2
   176a0:	nop			; (mov r0, r0)
   176a4:	cmp	r3, r1, lsl #31
   176a8:	adc	r0, r0, r0
   176ac:	subcs	r3, r3, r1, lsl #31
   176b0:	cmp	r3, r1, lsl #30
   176b4:	adc	r0, r0, r0
   176b8:	subcs	r3, r3, r1, lsl #30
   176bc:	cmp	r3, r1, lsl #29
   176c0:	adc	r0, r0, r0
   176c4:	subcs	r3, r3, r1, lsl #29
   176c8:	cmp	r3, r1, lsl #28
   176cc:	adc	r0, r0, r0
   176d0:	subcs	r3, r3, r1, lsl #28
   176d4:	cmp	r3, r1, lsl #27
   176d8:	adc	r0, r0, r0
   176dc:	subcs	r3, r3, r1, lsl #27
   176e0:	cmp	r3, r1, lsl #26
   176e4:	adc	r0, r0, r0
   176e8:	subcs	r3, r3, r1, lsl #26
   176ec:	cmp	r3, r1, lsl #25
   176f0:	adc	r0, r0, r0
   176f4:	subcs	r3, r3, r1, lsl #25
   176f8:	cmp	r3, r1, lsl #24
   176fc:	adc	r0, r0, r0
   17700:	subcs	r3, r3, r1, lsl #24
   17704:	cmp	r3, r1, lsl #23
   17708:	adc	r0, r0, r0
   1770c:	subcs	r3, r3, r1, lsl #23
   17710:	cmp	r3, r1, lsl #22
   17714:	adc	r0, r0, r0
   17718:	subcs	r3, r3, r1, lsl #22
   1771c:	cmp	r3, r1, lsl #21
   17720:	adc	r0, r0, r0
   17724:	subcs	r3, r3, r1, lsl #21
   17728:	cmp	r3, r1, lsl #20
   1772c:	adc	r0, r0, r0
   17730:	subcs	r3, r3, r1, lsl #20
   17734:	cmp	r3, r1, lsl #19
   17738:	adc	r0, r0, r0
   1773c:	subcs	r3, r3, r1, lsl #19
   17740:	cmp	r3, r1, lsl #18
   17744:	adc	r0, r0, r0
   17748:	subcs	r3, r3, r1, lsl #18
   1774c:	cmp	r3, r1, lsl #17
   17750:	adc	r0, r0, r0
   17754:	subcs	r3, r3, r1, lsl #17
   17758:	cmp	r3, r1, lsl #16
   1775c:	adc	r0, r0, r0
   17760:	subcs	r3, r3, r1, lsl #16
   17764:	cmp	r3, r1, lsl #15
   17768:	adc	r0, r0, r0
   1776c:	subcs	r3, r3, r1, lsl #15
   17770:	cmp	r3, r1, lsl #14
   17774:	adc	r0, r0, r0
   17778:	subcs	r3, r3, r1, lsl #14
   1777c:	cmp	r3, r1, lsl #13
   17780:	adc	r0, r0, r0
   17784:	subcs	r3, r3, r1, lsl #13
   17788:	cmp	r3, r1, lsl #12
   1778c:	adc	r0, r0, r0
   17790:	subcs	r3, r3, r1, lsl #12
   17794:	cmp	r3, r1, lsl #11
   17798:	adc	r0, r0, r0
   1779c:	subcs	r3, r3, r1, lsl #11
   177a0:	cmp	r3, r1, lsl #10
   177a4:	adc	r0, r0, r0
   177a8:	subcs	r3, r3, r1, lsl #10
   177ac:	cmp	r3, r1, lsl #9
   177b0:	adc	r0, r0, r0
   177b4:	subcs	r3, r3, r1, lsl #9
   177b8:	cmp	r3, r1, lsl #8
   177bc:	adc	r0, r0, r0
   177c0:	subcs	r3, r3, r1, lsl #8
   177c4:	cmp	r3, r1, lsl #7
   177c8:	adc	r0, r0, r0
   177cc:	subcs	r3, r3, r1, lsl #7
   177d0:	cmp	r3, r1, lsl #6
   177d4:	adc	r0, r0, r0
   177d8:	subcs	r3, r3, r1, lsl #6
   177dc:	cmp	r3, r1, lsl #5
   177e0:	adc	r0, r0, r0
   177e4:	subcs	r3, r3, r1, lsl #5
   177e8:	cmp	r3, r1, lsl #4
   177ec:	adc	r0, r0, r0
   177f0:	subcs	r3, r3, r1, lsl #4
   177f4:	cmp	r3, r1, lsl #3
   177f8:	adc	r0, r0, r0
   177fc:	subcs	r3, r3, r1, lsl #3
   17800:	cmp	r3, r1, lsl #2
   17804:	adc	r0, r0, r0
   17808:	subcs	r3, r3, r1, lsl #2
   1780c:	cmp	r3, r1, lsl #1
   17810:	adc	r0, r0, r0
   17814:	subcs	r3, r3, r1, lsl #1
   17818:	cmp	r3, r1
   1781c:	adc	r0, r0, r0
   17820:	subcs	r3, r3, r1
   17824:	cmp	ip, #0
   17828:	rsbmi	r0, r0, #0
   1782c:	bx	lr
   17830:	teq	ip, r0
   17834:	rsbmi	r0, r0, #0
   17838:	bx	lr
   1783c:	movcc	r0, #0
   17840:	asreq	r0, ip, #31
   17844:	orreq	r0, r0, #1
   17848:	bx	lr
   1784c:	clz	r2, r1
   17850:	rsb	r2, r2, #31
   17854:	cmp	ip, #0
   17858:	lsr	r0, r3, r2
   1785c:	rsbmi	r0, r0, #0
   17860:	bx	lr
   17864:	cmp	r0, #0
   17868:	mvngt	r0, #-2147483648	; 0x80000000
   1786c:	movlt	r0, #-2147483648	; 0x80000000
   17870:	b	179a4 <__assert_fail@plt+0x6bb0>
   17874:	cmp	r1, #0
   17878:	beq	17864 <__assert_fail@plt+0x6a70>
   1787c:	push	{r0, r1, lr}
   17880:	bl	1765c <__assert_fail@plt+0x6868>
   17884:	pop	{r1, r2, lr}
   17888:	mul	r3, r2, r0
   1788c:	sub	r1, r1, r3
   17890:	bx	lr
   17894:	cmp	r3, #0
   17898:	cmpeq	r2, #0
   1789c:	bne	178c0 <__assert_fail@plt+0x6acc>
   178a0:	cmp	r1, #0
   178a4:	movlt	r1, #-2147483648	; 0x80000000
   178a8:	movlt	r0, #0
   178ac:	blt	178bc <__assert_fail@plt+0x6ac8>
   178b0:	cmpeq	r0, #0
   178b4:	mvnne	r1, #-2147483648	; 0x80000000
   178b8:	mvnne	r0, #0
   178bc:	b	179a4 <__assert_fail@plt+0x6bb0>
   178c0:	sub	sp, sp, #8
   178c4:	push	{sp, lr}
   178c8:	cmp	r1, #0
   178cc:	blt	178ec <__assert_fail@plt+0x6af8>
   178d0:	cmp	r3, #0
   178d4:	blt	17920 <__assert_fail@plt+0x6b2c>
   178d8:	bl	179b4 <__assert_fail@plt+0x6bc0>
   178dc:	ldr	lr, [sp, #4]
   178e0:	add	sp, sp, #8
   178e4:	pop	{r2, r3}
   178e8:	bx	lr
   178ec:	rsbs	r0, r0, #0
   178f0:	sbc	r1, r1, r1, lsl #1
   178f4:	cmp	r3, #0
   178f8:	blt	17944 <__assert_fail@plt+0x6b50>
   178fc:	bl	179b4 <__assert_fail@plt+0x6bc0>
   17900:	ldr	lr, [sp, #4]
   17904:	add	sp, sp, #8
   17908:	pop	{r2, r3}
   1790c:	rsbs	r0, r0, #0
   17910:	sbc	r1, r1, r1, lsl #1
   17914:	rsbs	r2, r2, #0
   17918:	sbc	r3, r3, r3, lsl #1
   1791c:	bx	lr
   17920:	rsbs	r2, r2, #0
   17924:	sbc	r3, r3, r3, lsl #1
   17928:	bl	179b4 <__assert_fail@plt+0x6bc0>
   1792c:	ldr	lr, [sp, #4]
   17930:	add	sp, sp, #8
   17934:	pop	{r2, r3}
   17938:	rsbs	r0, r0, #0
   1793c:	sbc	r1, r1, r1, lsl #1
   17940:	bx	lr
   17944:	rsbs	r2, r2, #0
   17948:	sbc	r3, r3, r3, lsl #1
   1794c:	bl	179b4 <__assert_fail@plt+0x6bc0>
   17950:	ldr	lr, [sp, #4]
   17954:	add	sp, sp, #8
   17958:	pop	{r2, r3}
   1795c:	rsbs	r2, r2, #0
   17960:	sbc	r3, r3, r3, lsl #1
   17964:	bx	lr
   17968:	cmp	r3, #0
   1796c:	cmpeq	r2, #0
   17970:	bne	17988 <__assert_fail@plt+0x6b94>
   17974:	cmp	r1, #0
   17978:	cmpeq	r0, #0
   1797c:	mvnne	r1, #0
   17980:	mvnne	r0, #0
   17984:	b	179a4 <__assert_fail@plt+0x6bb0>
   17988:	sub	sp, sp, #8
   1798c:	push	{sp, lr}
   17990:	bl	179b4 <__assert_fail@plt+0x6bc0>
   17994:	ldr	lr, [sp, #4]
   17998:	add	sp, sp, #8
   1799c:	pop	{r2, r3}
   179a0:	bx	lr
   179a4:	push	{r1, lr}
   179a8:	mov	r0, #8
   179ac:	bl	10b90 <raise@plt>
   179b0:	pop	{r1, pc}
   179b4:	cmp	r1, r3
   179b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   179bc:	cmpeq	r0, r2
   179c0:	mov	r4, r0
   179c4:	mov	r5, r1
   179c8:	ldr	r9, [sp, #28]
   179cc:	movcc	r0, #0
   179d0:	movcc	r1, #0
   179d4:	bcc	17acc <__assert_fail@plt+0x6cd8>
   179d8:	cmp	r3, #0
   179dc:	clzeq	ip, r2
   179e0:	clzne	ip, r3
   179e4:	addeq	ip, ip, #32
   179e8:	cmp	r5, #0
   179ec:	clzeq	r1, r4
   179f0:	addeq	r1, r1, #32
   179f4:	clzne	r1, r5
   179f8:	sub	ip, ip, r1
   179fc:	sub	lr, ip, #32
   17a00:	lsl	r7, r3, ip
   17a04:	rsb	r8, ip, #32
   17a08:	orr	r7, r7, r2, lsl lr
   17a0c:	orr	r7, r7, r2, lsr r8
   17a10:	lsl	r6, r2, ip
   17a14:	cmp	r5, r7
   17a18:	cmpeq	r4, r6
   17a1c:	movcc	r0, #0
   17a20:	movcc	r1, #0
   17a24:	bcc	17a40 <__assert_fail@plt+0x6c4c>
   17a28:	mov	r3, #1
   17a2c:	subs	r4, r4, r6
   17a30:	lsl	r1, r3, lr
   17a34:	lsl	r0, r3, ip
   17a38:	orr	r1, r1, r3, lsr r8
   17a3c:	sbc	r5, r5, r7
   17a40:	cmp	ip, #0
   17a44:	beq	17acc <__assert_fail@plt+0x6cd8>
   17a48:	lsrs	r3, r7, #1
   17a4c:	rrx	r2, r6
   17a50:	mov	r6, ip
   17a54:	b	17a78 <__assert_fail@plt+0x6c84>
   17a58:	subs	r4, r4, r2
   17a5c:	sbc	r5, r5, r3
   17a60:	adds	r4, r4, r4
   17a64:	adc	r5, r5, r5
   17a68:	adds	r4, r4, #1
   17a6c:	adc	r5, r5, #0
   17a70:	subs	r6, r6, #1
   17a74:	beq	17a94 <__assert_fail@plt+0x6ca0>
   17a78:	cmp	r5, r3
   17a7c:	cmpeq	r4, r2
   17a80:	bcs	17a58 <__assert_fail@plt+0x6c64>
   17a84:	adds	r4, r4, r4
   17a88:	adc	r5, r5, r5
   17a8c:	subs	r6, r6, #1
   17a90:	bne	17a78 <__assert_fail@plt+0x6c84>
   17a94:	lsr	r6, r4, ip
   17a98:	lsr	r7, r5, ip
   17a9c:	orr	r6, r6, r5, lsl r8
   17aa0:	adds	r2, r0, r4
   17aa4:	orr	r6, r6, r5, lsr lr
   17aa8:	adc	r3, r1, r5
   17aac:	lsl	r1, r7, ip
   17ab0:	orr	r1, r1, r6, lsl lr
   17ab4:	lsl	r0, r6, ip
   17ab8:	orr	r1, r1, r6, lsr r8
   17abc:	subs	r0, r2, r0
   17ac0:	mov	r4, r6
   17ac4:	mov	r5, r7
   17ac8:	sbc	r1, r3, r1
   17acc:	cmp	r9, #0
   17ad0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17ad4:	strd	r4, [r9]
   17ad8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17adc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ae0:	mov	r7, r0
   17ae4:	ldr	r6, [pc, #72]	; 17b34 <__assert_fail@plt+0x6d40>
   17ae8:	ldr	r5, [pc, #72]	; 17b38 <__assert_fail@plt+0x6d44>
   17aec:	add	r6, pc, r6
   17af0:	add	r5, pc, r5
   17af4:	sub	r6, r6, r5
   17af8:	mov	r8, r1
   17afc:	mov	r9, r2
   17b00:	bl	10b58 <fstatfs64@plt-0x20>
   17b04:	asrs	r6, r6, #2
   17b08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b0c:	mov	r4, #0
   17b10:	add	r4, r4, #1
   17b14:	ldr	r3, [r5], #4
   17b18:	mov	r2, r9
   17b1c:	mov	r1, r8
   17b20:	mov	r0, r7
   17b24:	blx	r3
   17b28:	cmp	r6, r4
   17b2c:	bne	17b10 <__assert_fail@plt+0x6d1c>
   17b30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b34:	andeq	r0, r1, ip, lsl r4
   17b38:	andeq	r0, r1, r4, lsl r4
   17b3c:	bx	lr

Disassembly of section .fini:

00017b40 <.fini>:
   17b40:	push	{r3, lr}
   17b44:	pop	{r3, pc}
