
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109cc <.init>:
   109cc:	push	{r3, lr}
   109d0:	bl	10c94 <__assert_fail@plt+0xf8>
   109d4:	pop	{r3, pc}

Disassembly of section .plt:

000109d8 <calloc@plt-0x14>:
   109d8:	push	{lr}		; (str lr, [sp, #-4]!)
   109dc:	ldr	lr, [pc, #4]	; 109e8 <calloc@plt-0x4>
   109e0:	add	lr, pc, lr
   109e4:	ldr	pc, [lr, #8]!
   109e8:	andeq	r7, r1, r8, lsl r6

000109ec <calloc@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #94208	; 0x17000
   109f4:	ldr	pc, [ip, #1560]!	; 0x618

000109f8 <strcmp@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #94208	; 0x17000
   10a00:	ldr	pc, [ip, #1552]!	; 0x610

00010a04 <strtol@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #94208	; 0x17000
   10a0c:	ldr	pc, [ip, #1544]!	; 0x608

00010a10 <printf@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #94208	; 0x17000
   10a18:	ldr	pc, [ip, #1536]!	; 0x600

00010a1c <fopen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #94208	; 0x17000
   10a24:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a28 <free@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #94208	; 0x17000
   10a30:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a34 <utf8proc_get_property@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #94208	; 0x17000
   10a3c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a40 <fgets@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #94208	; 0x17000
   10a48:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a4c <utf8proc_encode_char@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #94208	; 0x17000
   10a54:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a58 <strdup@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #94208	; 0x17000
   10a60:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a64 <rewind@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #94208	; 0x17000
   10a6c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a70 <unlink@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #94208	; 0x17000
   10a78:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a7c <utf8proc_tolower@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #94208	; 0x17000
   10a84:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a88 <__xstat@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #94208	; 0x17000
   10a90:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a94 <fwrite@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #94208	; 0x17000
   10a9c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa0 <fread@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #94208	; 0x17000
   10aa8:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aac <utf8proc_iterate@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #94208	; 0x17000
   10ab4:	ldr	pc, [ip, #1432]!	; 0x598

00010ab8 <malloc@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #94208	; 0x17000
   10ac0:	ldr	pc, [ip, #1424]!	; 0x590

00010ac4 <__libc_start_main@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #94208	; 0x17000
   10acc:	ldr	pc, [ip, #1416]!	; 0x588

00010ad0 <__sysv_signal@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #94208	; 0x17000
   10ad8:	ldr	pc, [ip, #1408]!	; 0x580

00010adc <__gmon_start__@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #94208	; 0x17000
   10ae4:	ldr	pc, [ip, #1400]!	; 0x578

00010ae8 <getpid@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #94208	; 0x17000
   10af0:	ldr	pc, [ip, #1392]!	; 0x570

00010af4 <exit@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #94208	; 0x17000
   10afc:	ldr	pc, [ip, #1384]!	; 0x568

00010b00 <utf8proc_category@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #94208	; 0x17000
   10b08:	ldr	pc, [ip, #1376]!	; 0x560

00010b0c <strlen@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #94208	; 0x17000
   10b14:	ldr	pc, [ip, #1368]!	; 0x558

00010b18 <fprintf@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #94208	; 0x17000
   10b20:	ldr	pc, [ip, #1360]!	; 0x550

00010b24 <__isoc99_sscanf@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #94208	; 0x17000
   10b2c:	ldr	pc, [ip, #1352]!	; 0x548

00010b30 <fclose@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #94208	; 0x17000
   10b38:	ldr	pc, [ip, #1344]!	; 0x540

00010b3c <utf8proc_NFC@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #94208	; 0x17000
   10b44:	ldr	pc, [ip, #1336]!	; 0x538

00010b48 <fputc@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #94208	; 0x17000
   10b50:	ldr	pc, [ip, #1328]!	; 0x530

00010b54 <sprintf@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1320]!	; 0x528

00010b60 <utf8proc_errmsg@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1312]!	; 0x520

00010b6c <fputs@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1304]!	; 0x518

00010b78 <strncmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1296]!	; 0x510

00010b84 <abort@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1288]!	; 0x508

00010b90 <getc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1280]!	; 0x500

00010b9c <__assert_fail@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1272]!	; 0x4f8

Disassembly of section .text:

00010ba8 <error@@Base-0x1d24>:
   10ba8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bac:	sub	sp, sp, #12
   10bb0:	mov	r3, #0
   10bb4:	movw	r2, #15144	; 0x3b28
   10bb8:	movt	r2, #1
   10bbc:	str	r0, [sp, #4]
   10bc0:	add	r0, sp, #4
   10bc4:	mov	r5, r1
   10bc8:	bl	12a38 <error@@Base+0x16c>
   10bcc:	ldr	r3, [sp, #4]
   10bd0:	cmp	r3, #2
   10bd4:	beq	10be4 <__assert_fail@plt+0x48>
   10bd8:	movw	r0, #15180	; 0x3b4c
   10bdc:	movt	r0, #1
   10be0:	bl	128cc <error@@Base>
   10be4:	movw	r2, #32940	; 0x80ac
   10be8:	movt	r2, #2
   10bec:	ldr	r1, [r5]
   10bf0:	movw	r0, #33100	; 0x814c
   10bf4:	movt	r0, #2
   10bf8:	bl	12d98 <error@@Base+0x4cc>
   10bfc:	movw	r4, #33132	; 0x816c
   10c00:	movt	r4, #2
   10c04:	movw	r1, #33100	; 0x814c
   10c08:	movt	r1, #2
   10c0c:	movw	r0, #33116	; 0x815c
   10c10:	movt	r0, #2
   10c14:	bl	11e94 <__assert_fail@plt+0x12f8>
   10c18:	mov	r0, r4
   10c1c:	ldr	r1, [r5, #4]
   10c20:	bl	116b0 <__assert_fail@plt+0xb14>
   10c24:	ldr	r1, [r4]
   10c28:	movw	r2, #33096	; 0x8148
   10c2c:	movt	r2, #2
   10c30:	movw	r3, #50236	; 0xc43c
   10c34:	movt	r3, #2
   10c38:	ldr	r0, [r4, #4]
   10c3c:	cmp	r1, #0
   10c40:	str	r1, [r2]
   10c44:	str	r0, [r3]
   10c48:	bne	10c50 <__assert_fail@plt+0xb4>
   10c4c:	bl	1286c <__assert_fail@plt+0x1cd0>
   10c50:	bl	10d48 <__assert_fail@plt+0x1ac>
   10c54:	b	10c4c <__assert_fail@plt+0xb0>
   10c58:	mov	fp, #0
   10c5c:	mov	lr, #0
   10c60:	pop	{r1}		; (ldr r1, [sp], #4)
   10c64:	mov	r2, sp
   10c68:	push	{r2}		; (str r2, [sp, #-4]!)
   10c6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c70:	ldr	ip, [pc, #16]	; 10c88 <__assert_fail@plt+0xec>
   10c74:	push	{ip}		; (str ip, [sp, #-4]!)
   10c78:	ldr	r0, [pc, #12]	; 10c8c <__assert_fail@plt+0xf0>
   10c7c:	ldr	r3, [pc, #12]	; 10c90 <__assert_fail@plt+0xf4>
   10c80:	bl	10ac4 <__libc_start_main@plt>
   10c84:	bl	10b84 <abort@plt>
   10c88:	andeq	r3, r1, ip, lsl #22
   10c8c:	andeq	r0, r1, r8, lsr #23
   10c90:	andeq	r3, r1, ip, lsr #21
   10c94:	ldr	r3, [pc, #20]	; 10cb0 <__assert_fail@plt+0x114>
   10c98:	ldr	r2, [pc, #20]	; 10cb4 <__assert_fail@plt+0x118>
   10c9c:	add	r3, pc, r3
   10ca0:	ldr	r2, [r3, r2]
   10ca4:	cmp	r2, #0
   10ca8:	bxeq	lr
   10cac:	b	10adc <__gmon_start__@plt>
   10cb0:	andeq	r7, r1, ip, asr r3
   10cb4:	andeq	r0, r0, r0, lsr #1
   10cb8:	ldr	r0, [pc, #24]	; 10cd8 <__assert_fail@plt+0x13c>
   10cbc:	ldr	r3, [pc, #24]	; 10cdc <__assert_fail@plt+0x140>
   10cc0:	cmp	r3, r0
   10cc4:	bxeq	lr
   10cc8:	ldr	r3, [pc, #16]	; 10ce0 <__assert_fail@plt+0x144>
   10ccc:	cmp	r3, #0
   10cd0:	bxeq	lr
   10cd4:	bx	r3
   10cd8:	andeq	r8, r2, r0, asr #1
   10cdc:	andeq	r8, r2, r0, asr #1
   10ce0:	andeq	r0, r0, r0
   10ce4:	ldr	r0, [pc, #36]	; 10d10 <__assert_fail@plt+0x174>
   10ce8:	ldr	r1, [pc, #36]	; 10d14 <__assert_fail@plt+0x178>
   10cec:	sub	r1, r1, r0
   10cf0:	asr	r1, r1, #2
   10cf4:	add	r1, r1, r1, lsr #31
   10cf8:	asrs	r1, r1, #1
   10cfc:	bxeq	lr
   10d00:	ldr	r3, [pc, #16]	; 10d18 <__assert_fail@plt+0x17c>
   10d04:	cmp	r3, #0
   10d08:	bxeq	lr
   10d0c:	bx	r3
   10d10:	andeq	r8, r2, r0, asr #1
   10d14:	andeq	r8, r2, r0, asr #1
   10d18:	andeq	r0, r0, r0
   10d1c:	push	{r4, lr}
   10d20:	ldr	r4, [pc, #24]	; 10d40 <__assert_fail@plt+0x1a4>
   10d24:	ldrb	r3, [r4]
   10d28:	cmp	r3, #0
   10d2c:	popne	{r4, pc}
   10d30:	bl	10cb8 <__assert_fail@plt+0x11c>
   10d34:	mov	r3, #1
   10d38:	strb	r3, [r4]
   10d3c:	pop	{r4, pc}
   10d40:	ldrdeq	r8, [r2], -r0
   10d44:	b	10ce4 <__assert_fail@plt+0x148>
   10d48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10d4c:	movw	r5, #50236	; 0xc43c
   10d50:	movt	r5, #2
   10d54:	strd	r6, [sp, #8]
   10d58:	movw	r6, #33096	; 0x8148
   10d5c:	movt	r6, #2
   10d60:	ldr	r3, [r5]
   10d64:	movw	r7, #32980	; 0x80d4
   10d68:	movt	r7, #2
   10d6c:	strd	r8, [sp, #16]
   10d70:	movw	r0, #15132	; 0x3b1c
   10d74:	movt	r0, #1
   10d78:	vldr	s15, [r6]
   10d7c:	str	sl, [sp, #24]
   10d80:	str	lr, [sp, #28]
   10d84:	vpush	{d8}
   10d88:	vldr	d8, [pc, #288]	; 10eb0 <__assert_fail@plt+0x314>
   10d8c:	vmov	r2, s15
   10d90:	vcvt.f64.s32	d6, s15
   10d94:	ldr	r1, [r7]
   10d98:	sub	r3, r2, r3
   10d9c:	vmov	s14, r3
   10da0:	add	r3, r1, #1
   10da4:	str	r3, [r7]
   10da8:	vcvt.f64.s32	d7, s14
   10dac:	vmul.f64	d7, d7, d8
   10db0:	vdiv.f64	d7, d7, d6
   10db4:	vmov	r2, r3, d7
   10db8:	bl	10a10 <printf@plt>
   10dbc:	movw	r3, #33116	; 0x815c
   10dc0:	movt	r3, #2
   10dc4:	ldr	r4, [r3]
   10dc8:	cmp	r4, #0
   10dcc:	beq	10e94 <__assert_fail@plt+0x2f8>
   10dd0:	ldr	r9, [pc, #224]	; 10eb8 <__assert_fail@plt+0x31c>
   10dd4:	ldr	r8, [pc, #224]	; 10ebc <__assert_fail@plt+0x320>
   10dd8:	b	10e1c <__assert_fail@plt+0x280>
   10ddc:	ldr	r2, [r5]
   10de0:	vmov	s15, r3
   10de4:	ldr	r1, [r7]
   10de8:	sub	r3, r3, r2
   10dec:	vmov	s14, r3
   10df0:	add	r3, r1, #1
   10df4:	str	r3, [r7]
   10df8:	vcvt.f64.s32	d6, s15
   10dfc:	vcvt.f64.s32	d7, s14
   10e00:	vmul.f64	d7, d7, d8
   10e04:	vdiv.f64	d7, d7, d6
   10e08:	vmov	r2, r3, d7
   10e0c:	bl	10a10 <printf@plt>
   10e10:	ldr	r4, [r4, #4]
   10e14:	cmp	r4, #0
   10e18:	beq	10e94 <__assert_fail@plt+0x2f8>
   10e1c:	mov	r0, r9
   10e20:	ldr	r1, [r4, #8]
   10e24:	bl	11b00 <__assert_fail@plt+0xf64>
   10e28:	subs	r1, r0, #0
   10e2c:	mov	r0, r8
   10e30:	beq	10e54 <__assert_fail@plt+0x2b8>
   10e34:	ldr	r3, [r5]
   10e38:	ldr	r2, [r6]
   10e3c:	ldr	ip, [r1, #12]
   10e40:	ldr	r1, [r1, #16]
   10e44:	sub	r2, r2, ip
   10e48:	sub	r3, r3, r1
   10e4c:	str	r2, [r6]
   10e50:	str	r3, [r5]
   10e54:	ldr	r1, [r4, #8]
   10e58:	bl	11b00 <__assert_fail@plt+0xf64>
   10e5c:	cmp	r0, #0
   10e60:	ldr	r3, [r6]
   10e64:	beq	10e84 <__assert_fail@plt+0x2e8>
   10e68:	ldr	r2, [r5]
   10e6c:	ldr	ip, [r0, #12]
   10e70:	ldr	r1, [r0, #16]
   10e74:	sub	r3, r3, ip
   10e78:	sub	r2, r2, r1
   10e7c:	str	r3, [r6]
   10e80:	str	r2, [r5]
   10e84:	cmp	r3, #0
   10e88:	movw	r0, #15132	; 0x3b1c
   10e8c:	movt	r0, #1
   10e90:	bne	10ddc <__assert_fail@plt+0x240>
   10e94:	vpop	{d8}
   10e98:	ldrd	r4, [sp]
   10e9c:	ldrd	r6, [sp, #8]
   10ea0:	ldrd	r8, [sp, #16]
   10ea4:	ldr	sl, [sp, #24]
   10ea8:	add	sp, sp, #28
   10eac:	pop	{pc}		; (ldr pc, [sp], #4)
   10eb0:	andeq	r0, r0, r0
   10eb4:	subsmi	r0, r9, r0
   10eb8:	andeq	r8, r2, ip, asr #10
   10ebc:	andeq	sl, r2, r4, asr #9
   10ec0:	str	r4, [sp, #-8]!
   10ec4:	str	lr, [sp, #4]
   10ec8:	bl	11b00 <__assert_fail@plt+0xf64>
   10ecc:	cmp	r0, #0
   10ed0:	beq	10f04 <__assert_fail@plt+0x368>
   10ed4:	movw	r2, #33096	; 0x8148
   10ed8:	movt	r2, #2
   10edc:	ldr	lr, [r0, #12]
   10ee0:	movw	r3, #50236	; 0xc43c
   10ee4:	movt	r3, #2
   10ee8:	ldr	ip, [r2]
   10eec:	ldr	r1, [r3]
   10ef0:	ldr	r0, [r0, #16]
   10ef4:	sub	ip, ip, lr
   10ef8:	str	ip, [r2]
   10efc:	sub	r2, r1, r0
   10f00:	str	r2, [r3]
   10f04:	ldr	r4, [sp]
   10f08:	add	sp, sp, #4
   10f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f10:	movw	r3, #33096	; 0x8148
   10f14:	movt	r3, #2
   10f18:	vldr	d5, [pc, #80]	; 10f70 <__assert_fail@plt+0x3d4>
   10f1c:	movw	r1, #50236	; 0xc43c
   10f20:	movt	r1, #2
   10f24:	ldr	ip, [r1]
   10f28:	movw	r2, #32980	; 0x80d4
   10f2c:	movt	r2, #2
   10f30:	movw	r0, #15132	; 0x3b1c
   10f34:	movt	r0, #1
   10f38:	ldr	r3, [r3]
   10f3c:	ldr	r1, [r2]
   10f40:	vmov	s15, r3
   10f44:	sub	r3, r3, ip
   10f48:	vmov	s14, r3
   10f4c:	add	r3, r1, #1
   10f50:	str	r3, [r2]
   10f54:	vcvt.f64.s32	d6, s15
   10f58:	vcvt.f64.s32	d7, s14
   10f5c:	vmul.f64	d7, d7, d5
   10f60:	vdiv.f64	d7, d7, d6
   10f64:	vmov	r2, r3, d7
   10f68:	b	10a10 <printf@plt>
   10f6c:	nop	{0}
   10f70:	andeq	r0, r0, r0
   10f74:	subsmi	r0, r9, r0
   10f78:	movw	r3, #33132	; 0x816c
   10f7c:	movt	r3, #2
   10f80:	ldm	r3, {r0, r3}
   10f84:	movw	r1, #33096	; 0x8148
   10f88:	movt	r1, #2
   10f8c:	movw	r2, #50236	; 0xc43c
   10f90:	movt	r2, #2
   10f94:	cmp	r0, #0
   10f98:	str	r0, [r1]
   10f9c:	str	r3, [r2]
   10fa0:	bne	10fa8 <__assert_fail@plt+0x40c>
   10fa4:	bx	lr
   10fa8:	b	10d48 <__assert_fail@plt+0x1ac>
   10fac:	andeq	r0, r0, r0
   10fb0:	ldr	r0, [r0, #8]
   10fb4:	ldr	r1, [r1, #8]
   10fb8:	b	126d4 <__assert_fail@plt+0x1b38>
   10fbc:	mov	r2, r0
   10fc0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   10fc4:	strd	r6, [sp, #8]
   10fc8:	mov	r6, r0
   10fcc:	mov	r7, r1
   10fd0:	movw	r0, #32984	; 0x80d8
   10fd4:	movt	r0, #2
   10fd8:	strd	r8, [sp, #16]
   10fdc:	mov	r1, #99	; 0x63
   10fe0:	str	lr, [sp, #24]
   10fe4:	sub	sp, sp, #12
   10fe8:	bl	10a40 <fgets@plt>
   10fec:	cmp	r0, #0
   10ff0:	beq	110bc <__assert_fail@plt+0x520>
   10ff4:	movw	r0, #32984	; 0x80d8
   10ff8:	movt	r0, #2
   10ffc:	mov	r2, r6
   11000:	mov	r1, #99	; 0x63
   11004:	bl	10a40 <fgets@plt>
   11008:	cmp	r0, #0
   1100c:	beq	110bc <__assert_fail@plt+0x520>
   11010:	movw	r4, #32984	; 0x80d8
   11014:	movt	r4, #2
   11018:	movw	r8, #15212	; 0x3b6c
   1101c:	movt	r8, #1
   11020:	add	r5, r4, #29
   11024:	mov	r9, #0
   11028:	b	11048 <__assert_fail@plt+0x4ac>
   1102c:	ldr	r0, [sp]
   11030:	add	r3, r7, r3, lsl #3
   11034:	ldm	r3, {r1, r2}
   11038:	ldr	ip, [sp, #4]
   1103c:	add	r1, r1, r0
   11040:	add	r2, r2, ip
   11044:	stm	r3, {r1, r2}
   11048:	mov	r2, r6
   1104c:	mov	r1, #99	; 0x63
   11050:	mov	r0, r4
   11054:	bl	10a40 <fgets@plt>
   11058:	cmp	r0, #0
   1105c:	add	r3, sp, #4
   11060:	mov	r2, sp
   11064:	mov	r1, r8
   11068:	mov	r0, r4
   1106c:	beq	110c0 <__assert_fail@plt+0x524>
   11070:	bl	10b24 <__isoc99_sscanf@plt>
   11074:	cmp	r0, #2
   11078:	bne	110c0 <__assert_fail@plt+0x524>
   1107c:	mov	r1, #0
   11080:	mov	r2, #10
   11084:	mov	r0, r5
   11088:	bl	10a04 <strtol@plt>
   1108c:	subs	r3, r0, #0
   11090:	movw	r1, #15204	; 0x3b64
   11094:	movt	r1, #1
   11098:	mov	r0, r5
   1109c:	bne	1102c <__assert_fail@plt+0x490>
   110a0:	bl	109f8 <strcmp@plt>
   110a4:	cmp	r0, #0
   110a8:	ldr	r0, [sp]
   110ac:	mov	r3, r7
   110b0:	addne	r3, r7, #88	; 0x58
   110b4:	moveq	r9, r0
   110b8:	b	11034 <__assert_fail@plt+0x498>
   110bc:	mov	r9, #0
   110c0:	mov	r0, r9
   110c4:	add	sp, sp, #12
   110c8:	ldrd	r4, [sp]
   110cc:	ldrd	r6, [sp, #8]
   110d0:	ldrd	r8, [sp, #16]
   110d4:	add	sp, sp, #24
   110d8:	pop	{pc}		; (ldr pc, [sp], #4)
   110dc:	strd	r4, [sp, #-16]!
   110e0:	subs	r4, r1, #0
   110e4:	mov	r5, r0
   110e8:	str	r6, [sp, #8]
   110ec:	str	lr, [sp, #12]
   110f0:	beq	1118c <__assert_fail@plt+0x5f0>
   110f4:	movw	r1, #15220	; 0x3b74
   110f8:	movt	r1, #1
   110fc:	ldrd	r2, [r4]
   11100:	bl	10b18 <fprintf@plt>
   11104:	ldr	r3, [r4]
   11108:	cmp	r3, #0
   1110c:	beq	11170 <__assert_fail@plt+0x5d4>
   11110:	ldr	r2, [r4, #4]
   11114:	movw	r1, #15244	; 0x3b8c
   11118:	movt	r1, #1
   1111c:	vmov	s15, r3
   11120:	mov	r0, r5
   11124:	vldr	d5, [pc, #124]	; 111a8 <__assert_fail@plt+0x60c>
   11128:	sub	r3, r3, r2
   1112c:	vmov	s14, r3
   11130:	vcvt.f64.s32	d6, s15
   11134:	vcvt.f64.s32	d7, s14
   11138:	vmul.f64	d7, d7, d5
   1113c:	vdiv.f64	d7, d7, d6
   11140:	vmov	r2, r3, d7
   11144:	bl	10b18 <fprintf@plt>
   11148:	mov	r3, r5
   1114c:	movw	r0, #15280	; 0x3bb0
   11150:	movt	r0, #1
   11154:	mov	r2, #3
   11158:	ldrd	r4, [sp]
   1115c:	mov	r1, #1
   11160:	ldr	r6, [sp, #8]
   11164:	ldr	lr, [sp, #12]
   11168:	add	sp, sp, #16
   1116c:	b	10a94 <fwrite@plt>
   11170:	movw	r0, #15232	; 0x3b80
   11174:	movt	r0, #1
   11178:	mov	r3, r5
   1117c:	mov	r2, #8
   11180:	mov	r1, #1
   11184:	bl	10a94 <fwrite@plt>
   11188:	b	11148 <__assert_fail@plt+0x5ac>
   1118c:	movw	r0, #15252	; 0x3b94
   11190:	movt	r0, #1
   11194:	mov	r3, r5
   11198:	mov	r2, #26
   1119c:	mov	r1, #1
   111a0:	bl	10a94 <fwrite@plt>
   111a4:	b	11148 <__assert_fail@plt+0x5ac>
   111a8:	andeq	r0, r0, r0
   111ac:	subsmi	r0, r9, r0
   111b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111b4:	movw	r5, #32984	; 0x80d8
   111b8:	movt	r5, #2
   111bc:	mov	r2, r0
   111c0:	strd	r6, [sp, #8]
   111c4:	strd	r8, [sp, #16]
   111c8:	mov	r8, r0
   111cc:	mov	r9, r1
   111d0:	mov	r0, r5
   111d4:	mov	r1, #99	; 0x63
   111d8:	strd	sl, [sp, #24]
   111dc:	str	lr, [sp, #32]
   111e0:	sub	sp, sp, #20
   111e4:	bl	10a40 <fgets@plt>
   111e8:	cmp	r0, #0
   111ec:	beq	11290 <__assert_fail@plt+0x6f4>
   111f0:	mov	r2, r8
   111f4:	mov	r1, #99	; 0x63
   111f8:	mov	r0, r5
   111fc:	bl	10a40 <fgets@plt>
   11200:	cmp	r0, #0
   11204:	beq	11290 <__assert_fail@plt+0x6f4>
   11208:	movw	sl, #15212	; 0x3b6c
   1120c:	movt	sl, #1
   11210:	mov	r4, r5
   11214:	add	fp, r5, #29
   11218:	b	11268 <__assert_fail@plt+0x6cc>
   1121c:	bl	10b24 <__isoc99_sscanf@plt>
   11220:	cmp	r0, #2
   11224:	bne	11290 <__assert_fail@plt+0x6f4>
   11228:	mov	r0, r4
   1122c:	bl	10b0c <strlen@plt>
   11230:	add	r3, r5, r0
   11234:	mov	r2, #0
   11238:	ldrd	r6, [sp, #8]
   1123c:	mov	r1, fp
   11240:	mov	r0, r9
   11244:	strb	r2, [r3, #-1]
   11248:	bl	11b00 <__assert_fail@plt+0xf64>
   1124c:	subs	r3, r0, #0
   11250:	beq	112ac <__assert_fail@plt+0x710>
   11254:	ldr	r1, [r3, #12]
   11258:	ldr	r2, [r3, #16]
   1125c:	add	r6, r1, r6
   11260:	add	r7, r2, r7
   11264:	strd	r6, [r3, #12]
   11268:	mov	r2, r8
   1126c:	mov	r1, #99	; 0x63
   11270:	mov	r0, r4
   11274:	bl	10a40 <fgets@plt>
   11278:	cmp	r0, #0
   1127c:	add	r3, sp, #12
   11280:	add	r2, sp, #8
   11284:	mov	r1, sl
   11288:	mov	r0, r4
   1128c:	bne	1121c <__assert_fail@plt+0x680>
   11290:	add	sp, sp, #20
   11294:	ldrd	r4, [sp]
   11298:	ldrd	r6, [sp, #8]
   1129c:	ldrd	r8, [sp, #16]
   112a0:	ldrd	sl, [sp, #24]
   112a4:	add	sp, sp, #32
   112a8:	pop	{pc}		; (ldr pc, [sp], #4)
   112ac:	mov	r1, #20
   112b0:	mov	r0, #1
   112b4:	bl	1290c <error@@Base+0x40>
   112b8:	mov	r3, r0
   112bc:	mov	r0, fp
   112c0:	str	r3, [sp, #4]
   112c4:	bl	10a58 <strdup@plt>
   112c8:	ldr	r3, [sp, #4]
   112cc:	mov	r1, r3
   112d0:	str	r0, [r3, #8]
   112d4:	mov	r0, r9
   112d8:	bl	11b8c <__assert_fail@plt+0xff0>
   112dc:	ldr	r3, [sp, #4]
   112e0:	b	11254 <__assert_fail@plt+0x6b8>
   112e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   112e8:	mov	r5, r0
   112ec:	mov	r0, r1
   112f0:	strd	r6, [sp, #8]
   112f4:	add	r7, r1, #4096	; 0x1000
   112f8:	mov	r4, r2
   112fc:	strd	r8, [sp, #16]
   11300:	str	sl, [sp, #24]
   11304:	str	lr, [sp, #28]
   11308:	vpush	{d8}
   1130c:	bl	11c94 <__assert_fail@plt+0x10f8>
   11310:	movw	r2, #4016	; 0xfb0
   11314:	movt	r2, #1
   11318:	ldr	r1, [r7, #3952]	; 0xf70
   1131c:	ldr	r0, [r7, #3956]	; 0xf74
   11320:	bl	13a80 <error@@Base+0x11b4>
   11324:	mov	r2, r4
   11328:	mov	r0, r5
   1132c:	movw	r1, #15284	; 0x3bb4
   11330:	movt	r1, #1
   11334:	bl	10b18 <fprintf@plt>
   11338:	mov	r3, r5
   1133c:	mov	r2, #26
   11340:	mov	r1, #1
   11344:	movw	r0, #15252	; 0x3b94
   11348:	movt	r0, #1
   1134c:	bl	10a94 <fwrite@plt>
   11350:	mov	r3, r5
   11354:	mov	r2, #3
   11358:	mov	r1, #1
   1135c:	movw	r0, #15280	; 0x3bb0
   11360:	movt	r0, #1
   11364:	bl	10a94 <fwrite@plt>
   11368:	mov	r1, r5
   1136c:	mov	r0, #10
   11370:	bl	10b48 <fputc@plt>
   11374:	ldr	r3, [r7, #3956]	; 0xf74
   11378:	cmp	r3, #0
   1137c:	ble	11474 <__assert_fail@plt+0x8d8>
   11380:	movw	r8, #15252	; 0x3b94
   11384:	movt	r8, #1
   11388:	vldr	d8, [pc, #256]	; 11490 <__assert_fail@plt+0x8f4>
   1138c:	mov	r4, #0
   11390:	b	1140c <__assert_fail@plt+0x870>
   11394:	ldr	r3, [r6, #16]
   11398:	movw	r1, #15244	; 0x3b8c
   1139c:	movt	r1, #1
   113a0:	vmov	s15, ip
   113a4:	mov	r0, r5
   113a8:	sub	r3, ip, r3
   113ac:	vmov	s14, r3
   113b0:	vcvt.f64.s32	d6, s15
   113b4:	vcvt.f64.s32	d7, s14
   113b8:	vmul.f64	d7, d7, d8
   113bc:	vdiv.f64	d7, d7, d6
   113c0:	vmov	r2, r3, d7
   113c4:	bl	10b18 <fprintf@plt>
   113c8:	mov	r1, #1
   113cc:	mov	r3, r5
   113d0:	mov	r2, #3
   113d4:	movw	r0, #15280	; 0x3bb0
   113d8:	movt	r0, #1
   113dc:	add	r4, r4, r1
   113e0:	bl	10a94 <fwrite@plt>
   113e4:	ldr	r3, [r7, #3952]	; 0xf70
   113e8:	movw	r1, #28776	; 0x7068
   113ec:	movt	r1, #1
   113f0:	mov	r0, r5
   113f4:	ldr	r3, [r3, r9]
   113f8:	ldr	r2, [r3, #8]
   113fc:	bl	10b18 <fprintf@plt>
   11400:	ldr	r3, [r7, #3956]	; 0xf74
   11404:	cmp	r3, r4
   11408:	ble	11474 <__assert_fail@plt+0x8d8>
   1140c:	ldr	r3, [r7, #3952]	; 0xf70
   11410:	movw	r1, #15220	; 0x3b74
   11414:	movt	r1, #1
   11418:	mov	r0, r5
   1141c:	lsl	r9, r4, #2
   11420:	ldr	r6, [r3, r4, lsl #2]
   11424:	cmn	r6, #12
   11428:	beq	1145c <__assert_fail@plt+0x8c0>
   1142c:	ldrd	r2, [r6, #12]
   11430:	bl	10b18 <fprintf@plt>
   11434:	ldr	ip, [r6, #12]
   11438:	movw	r0, #15232	; 0x3b80
   1143c:	movt	r0, #1
   11440:	mov	r3, r5
   11444:	mov	r2, #8
   11448:	mov	r1, #1
   1144c:	cmp	ip, #0
   11450:	bne	11394 <__assert_fail@plt+0x7f8>
   11454:	bl	10a94 <fwrite@plt>
   11458:	b	113c8 <__assert_fail@plt+0x82c>
   1145c:	mov	r3, r5
   11460:	mov	r2, #26
   11464:	mov	r1, #1
   11468:	mov	r0, r8
   1146c:	bl	10a94 <fwrite@plt>
   11470:	b	113c8 <__assert_fail@plt+0x82c>
   11474:	vpop	{d8}
   11478:	ldrd	r4, [sp]
   1147c:	ldrd	r6, [sp, #8]
   11480:	ldrd	r8, [sp, #16]
   11484:	ldr	sl, [sp, #24]
   11488:	add	sp, sp, #28
   1148c:	pop	{pc}		; (ldr pc, [sp], #4)
   11490:	andeq	r0, r0, r0
   11494:	subsmi	r0, r9, r0
   11498:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1149c:	mov	r5, r1
   114a0:	movw	r1, #15284	; 0x3bb4
   114a4:	movt	r1, #1
   114a8:	strd	r6, [sp, #8]
   114ac:	mov	r6, r0
   114b0:	strd	r8, [sp, #16]
   114b4:	mov	r9, r2
   114b8:	mov	r2, r3
   114bc:	strd	sl, [sp, #24]
   114c0:	sub	fp, r9, #1
   114c4:	movw	r7, #15308	; 0x3bcc
   114c8:	movt	r7, #1
   114cc:	str	lr, [sp, #32]
   114d0:	sub	sp, sp, #4
   114d4:	ldrb	r8, [sp, #40]	; 0x28
   114d8:	uxth	fp, fp
   114dc:	mov	r4, #1
   114e0:	add	fp, fp, #2
   114e4:	ldrb	sl, [sp, #44]	; 0x2c
   114e8:	bl	10b18 <fprintf@plt>
   114ec:	mov	r3, r6
   114f0:	mov	r2, #26
   114f4:	mov	r1, #1
   114f8:	movw	r0, #15252	; 0x3b94
   114fc:	movt	r0, #1
   11500:	bl	10a94 <fwrite@plt>
   11504:	mov	r3, r6
   11508:	mov	r2, #3
   1150c:	mov	r1, #1
   11510:	movw	r0, #15280	; 0x3bb0
   11514:	movt	r0, #1
   11518:	bl	10a94 <fwrite@plt>
   1151c:	cmp	r8, #0
   11520:	movw	r3, #15300	; 0x3bc4
   11524:	movt	r3, #1
   11528:	movw	r2, #15292	; 0x3bbc
   1152c:	movt	r2, #1
   11530:	mov	r0, r6
   11534:	moveq	r2, r3
   11538:	movw	r1, #28776	; 0x7068
   1153c:	movt	r1, #1
   11540:	bl	10b18 <fprintf@plt>
   11544:	ldr	r3, [r5, r4, lsl #3]
   11548:	mov	r0, r6
   1154c:	add	r1, r5, r4, lsl #3
   11550:	cmp	r3, #0
   11554:	ble	1156c <__assert_fail@plt+0x9d0>
   11558:	bl	110dc <__assert_fail@plt+0x540>
   1155c:	mov	r2, r4
   11560:	mov	r1, r7
   11564:	mov	r0, r6
   11568:	bl	10b18 <fprintf@plt>
   1156c:	add	r4, r4, #1
   11570:	cmp	fp, r4
   11574:	bne	11544 <__assert_fail@plt+0x9a8>
   11578:	cmp	r8, #0
   1157c:	beq	11594 <__assert_fail@plt+0x9f8>
   11580:	add	r1, r9, #1
   11584:	ldr	r3, [r5, r1, lsl #3]
   11588:	add	r1, r5, r1, lsl #3
   1158c:	cmp	r3, #0
   11590:	bgt	115b8 <__assert_fail@plt+0xa1c>
   11594:	cmp	sl, #0
   11598:	bne	115dc <__assert_fail@plt+0xa40>
   1159c:	add	sp, sp, #4
   115a0:	ldrd	r4, [sp]
   115a4:	ldrd	r6, [sp, #8]
   115a8:	ldrd	r8, [sp, #16]
   115ac:	ldrd	sl, [sp, #24]
   115b0:	add	sp, sp, #32
   115b4:	pop	{pc}		; (ldr pc, [sp], #4)
   115b8:	mov	r0, r6
   115bc:	bl	110dc <__assert_fail@plt+0x540>
   115c0:	mov	r2, r9
   115c4:	movw	r1, #15320	; 0x3bd8
   115c8:	movt	r1, #1
   115cc:	mov	r0, r6
   115d0:	bl	10b18 <fprintf@plt>
   115d4:	cmp	sl, #0
   115d8:	beq	1159c <__assert_fail@plt+0xa00>
   115dc:	mov	r1, r5
   115e0:	mov	r0, r6
   115e4:	bl	110dc <__assert_fail@plt+0x540>
   115e8:	mov	r3, r6
   115ec:	movw	r0, #15204	; 0x3b64
   115f0:	movt	r0, #1
   115f4:	mov	r2, #7
   115f8:	mov	r1, #1
   115fc:	add	sp, sp, #4
   11600:	ldrd	r4, [sp]
   11604:	ldrd	r6, [sp, #8]
   11608:	ldrd	r8, [sp, #16]
   1160c:	ldrd	sl, [sp, #24]
   11610:	ldr	lr, [sp, #32]
   11614:	add	sp, sp, #36	; 0x24
   11618:	b	10a94 <fwrite@plt>
   1161c:	ldr	ip, [r0]
   11620:	ldr	r3, [r0, #4]
   11624:	add	r1, ip, r1
   11628:	add	r2, r3, r2
   1162c:	stm	r0, {r1, r2}
   11630:	bx	lr
   11634:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11638:	mov	r5, r3
   1163c:	strd	r6, [sp, #8]
   11640:	mov	r6, r2
   11644:	mov	r7, r0
   11648:	str	r8, [sp, #16]
   1164c:	mov	r8, r1
   11650:	str	lr, [sp, #20]
   11654:	bl	11b00 <__assert_fail@plt+0xf64>
   11658:	subs	r4, r0, #0
   1165c:	beq	11684 <__assert_fail@plt+0xae8>
   11660:	ldrd	r0, [r4, #12]
   11664:	ldr	r8, [sp, #16]
   11668:	add	r0, r0, r6
   1166c:	add	r1, r1, r5
   11670:	ldrd	r6, [sp, #8]
   11674:	strd	r0, [r4, #12]
   11678:	ldrd	r4, [sp]
   1167c:	add	sp, sp, #20
   11680:	pop	{pc}		; (ldr pc, [sp], #4)
   11684:	mov	r1, #20
   11688:	mov	r0, #1
   1168c:	bl	1290c <error@@Base+0x40>
   11690:	mov	r4, r0
   11694:	mov	r0, r8
   11698:	bl	10a58 <strdup@plt>
   1169c:	mov	r1, r4
   116a0:	str	r0, [r4, #8]
   116a4:	mov	r0, r7
   116a8:	bl	11b8c <__assert_fail@plt+0xff0>
   116ac:	b	11660 <__assert_fail@plt+0xac4>
   116b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   116b4:	mov	r5, r0
   116b8:	strd	r6, [sp, #8]
   116bc:	mov	r6, r1
   116c0:	movw	r1, #15340	; 0x3bec
   116c4:	movt	r1, #1
   116c8:	mov	r0, r6
   116cc:	str	lr, [sp, #16]
   116d0:	sub	sp, sp, #12
   116d4:	bl	129ac <error@@Base+0xe0>
   116d8:	mov	r2, r0
   116dc:	mov	r4, r0
   116e0:	mov	r1, #99	; 0x63
   116e4:	movw	r0, #32984	; 0x80d8
   116e8:	movt	r0, #2
   116ec:	bl	10a40 <fgets@plt>
   116f0:	cmp	r0, #0
   116f4:	beq	1178c <__assert_fail@plt+0xbf0>
   116f8:	movw	r1, #15344	; 0x3bf0
   116fc:	movt	r1, #1
   11700:	movw	r0, #32984	; 0x80d8
   11704:	movt	r0, #2
   11708:	mov	r2, #45	; 0x2d
   1170c:	bl	10b78 <strncmp@plt>
   11710:	cmp	r0, #0
   11714:	bne	1178c <__assert_fail@plt+0xbf0>
   11718:	movw	r0, #32984	; 0x80d8
   1171c:	movt	r0, #2
   11720:	mov	r2, r4
   11724:	mov	r1, #99	; 0x63
   11728:	bl	10a40 <fgets@plt>
   1172c:	cmp	r0, #0
   11730:	beq	1178c <__assert_fail@plt+0xbf0>
   11734:	movw	r1, #29020	; 0x715c
   11738:	movt	r1, #1
   1173c:	movw	r0, #32984	; 0x80d8
   11740:	movt	r0, #2
   11744:	bl	109f8 <strcmp@plt>
   11748:	cmp	r0, #0
   1174c:	bne	1178c <__assert_fail@plt+0xbf0>
   11750:	movw	r0, #32984	; 0x80d8
   11754:	movt	r0, #2
   11758:	mov	r2, r4
   1175c:	mov	r1, #99	; 0x63
   11760:	bl	10a40 <fgets@plt>
   11764:	cmp	r0, #0
   11768:	beq	1178c <__assert_fail@plt+0xbf0>
   1176c:	movw	r1, #15216	; 0x3b70
   11770:	movt	r1, #1
   11774:	movw	r0, #32984	; 0x80d8
   11778:	movt	r0, #2
   1177c:	mov	r2, sp
   11780:	bl	10b24 <__isoc99_sscanf@plt>
   11784:	cmp	r0, #1
   11788:	beq	117a8 <__assert_fail@plt+0xc0c>
   1178c:	cmp	r6, #0
   11790:	movw	r1, #15332	; 0x3be4
   11794:	movt	r1, #1
   11798:	movw	r0, #15392	; 0x3c20
   1179c:	movt	r0, #1
   117a0:	movne	r1, r6
   117a4:	bl	12968 <error@@Base+0x9c>
   117a8:	movw	r0, #32984	; 0x80d8
   117ac:	movt	r0, #2
   117b0:	mov	r2, r4
   117b4:	mov	r1, #99	; 0x63
   117b8:	bl	10a40 <fgets@plt>
   117bc:	cmp	r0, #0
   117c0:	beq	1178c <__assert_fail@plt+0xbf0>
   117c4:	movw	r1, #15216	; 0x3b70
   117c8:	movt	r1, #1
   117cc:	movw	r0, #32984	; 0x80d8
   117d0:	movt	r0, #2
   117d4:	add	r2, sp, #4
   117d8:	bl	10b24 <__isoc99_sscanf@plt>
   117dc:	cmp	r0, #1
   117e0:	bne	1178c <__assert_fail@plt+0xbf0>
   117e4:	movw	r0, #32984	; 0x80d8
   117e8:	movt	r0, #2
   117ec:	mov	r2, r4
   117f0:	mov	r1, #99	; 0x63
   117f4:	bl	10a40 <fgets@plt>
   117f8:	cmp	r0, #0
   117fc:	beq	1178c <__assert_fail@plt+0xbf0>
   11800:	movw	r0, #32984	; 0x80d8
   11804:	movt	r0, #2
   11808:	mov	r2, r4
   1180c:	mov	r1, #99	; 0x63
   11810:	bl	10a40 <fgets@plt>
   11814:	cmp	r0, #0
   11818:	beq	1178c <__assert_fail@plt+0xbf0>
   1181c:	ldm	sp, {ip, lr}
   11820:	add	r1, r5, #8
   11824:	mov	r0, r4
   11828:	ldr	r3, [r5]
   1182c:	ldr	r2, [r5, #4]
   11830:	add	r3, r3, ip
   11834:	add	r2, r2, lr
   11838:	str	r3, [r5]
   1183c:	str	r2, [r5, #4]
   11840:	bl	10fbc <__assert_fail@plt+0x420>
   11844:	mov	r7, r0
   11848:	add	r1, r5, #416	; 0x1a0
   1184c:	mov	r0, r4
   11850:	bl	10fbc <__assert_fail@plt+0x420>
   11854:	mov	r6, r0
   11858:	add	r1, r5, #824	; 0x338
   1185c:	mov	r0, r4
   11860:	bl	10fbc <__assert_fail@plt+0x420>
   11864:	ldr	r3, [sp]
   11868:	cmp	r3, #0
   1186c:	bgt	1188c <__assert_fail@plt+0xcf0>
   11870:	mov	r0, r4
   11874:	bl	1272c <__assert_fail@plt+0x1b90>
   11878:	add	sp, sp, #12
   1187c:	ldrd	r4, [sp]
   11880:	ldrd	r6, [sp, #8]
   11884:	add	sp, sp, #16
   11888:	pop	{pc}		; (ldr pc, [sp], #4)
   1188c:	add	r1, r5, #920	; 0x398
   11890:	mov	r0, r4
   11894:	bl	10fbc <__assert_fail@plt+0x420>
   11898:	cmp	r7, #0
   1189c:	ble	118ac <__assert_fail@plt+0xd10>
   118a0:	add	r1, r5, #992	; 0x3e0
   118a4:	mov	r0, r4
   118a8:	bl	111b0 <__assert_fail@plt+0x614>
   118ac:	cmp	r6, #0
   118b0:	ble	11870 <__assert_fail@plt+0xcd4>
   118b4:	add	r1, r5, #9024	; 0x2340
   118b8:	mov	r0, r4
   118bc:	add	r1, r1, #24
   118c0:	bl	111b0 <__assert_fail@plt+0x614>
   118c4:	b	11870 <__assert_fail@plt+0xcd4>
   118c8:	mov	r3, r1
   118cc:	movw	r1, #15412	; 0x3c34
   118d0:	movt	r1, #1
   118d4:	strd	r4, [sp, #-20]!	; 0xffffffec
   118d8:	mov	r4, r0
   118dc:	mov	r0, r3
   118e0:	strd	r6, [sp, #8]
   118e4:	str	lr, [sp, #16]
   118e8:	sub	sp, sp, #12
   118ec:	bl	129ac <error@@Base+0xe0>
   118f0:	mov	r5, r0
   118f4:	movw	r3, #29020	; 0x715c
   118f8:	movt	r3, #1
   118fc:	movw	r2, #15344	; 0x3bf0
   11900:	movt	r2, #1
   11904:	movw	r1, #15416	; 0x3c38
   11908:	movt	r1, #1
   1190c:	bl	10b18 <fprintf@plt>
   11910:	mov	r0, r5
   11914:	movw	r1, #15424	; 0x3c40
   11918:	movt	r1, #1
   1191c:	ldr	r2, [r4]
   11920:	bl	10b18 <fprintf@plt>
   11924:	mov	r0, r5
   11928:	movw	r1, #15440	; 0x3c50
   1192c:	movt	r1, #1
   11930:	ldr	r2, [r4, #4]
   11934:	bl	10b18 <fprintf@plt>
   11938:	ldr	r3, [r4]
   1193c:	cmp	r3, #0
   11940:	bne	11a04 <__assert_fail@plt+0xe68>
   11944:	movw	r0, #15232	; 0x3b80
   11948:	movt	r0, #1
   1194c:	mov	r3, r5
   11950:	mov	r2, #8
   11954:	mov	r1, #1
   11958:	bl	10a94 <fwrite@plt>
   1195c:	mov	r6, #1
   11960:	mov	r7, #0
   11964:	mov	r3, r5
   11968:	mov	r2, #12
   1196c:	mov	r1, r6
   11970:	movw	r0, #15464	; 0x3c68
   11974:	movt	r0, #1
   11978:	bl	10a94 <fwrite@plt>
   1197c:	mov	r2, #50	; 0x32
   11980:	add	r1, r4, #8
   11984:	str	r7, [sp]
   11988:	mov	r0, r5
   1198c:	movw	r3, #15480	; 0x3c78
   11990:	movt	r3, #1
   11994:	str	r6, [sp, #4]
   11998:	bl	11498 <__assert_fail@plt+0x8fc>
   1199c:	mov	r2, #50	; 0x32
   119a0:	add	r1, r4, #416	; 0x1a0
   119a4:	str	r7, [sp]
   119a8:	mov	r0, r5
   119ac:	movw	r3, #15492	; 0x3c84
   119b0:	movt	r3, #1
   119b4:	str	r6, [sp, #4]
   119b8:	bl	11498 <__assert_fail@plt+0x8fc>
   119bc:	movw	r3, #15508	; 0x3c94
   119c0:	movt	r3, #1
   119c4:	str	r6, [sp]
   119c8:	mov	r2, #10
   119cc:	add	r1, r4, #824	; 0x338
   119d0:	str	r6, [sp, #4]
   119d4:	mov	r0, r5
   119d8:	bl	11498 <__assert_fail@plt+0x8fc>
   119dc:	ldr	r3, [r4]
   119e0:	cmp	r3, r7
   119e4:	bgt	11a40 <__assert_fail@plt+0xea4>
   119e8:	mov	r0, r5
   119ec:	add	sp, sp, #12
   119f0:	ldrd	r4, [sp]
   119f4:	ldrd	r6, [sp, #8]
   119f8:	ldr	lr, [sp, #16]
   119fc:	add	sp, sp, #20
   11a00:	b	1272c <__assert_fail@plt+0x1b90>
   11a04:	ldr	r2, [r4, #4]
   11a08:	movw	r1, #15244	; 0x3b8c
   11a0c:	movt	r1, #1
   11a10:	vmov	s15, r3
   11a14:	mov	r0, r5
   11a18:	vldr	d5, [pc, #136]	; 11aa8 <__assert_fail@plt+0xf0c>
   11a1c:	sub	r3, r3, r2
   11a20:	vmov	s14, r3
   11a24:	vcvt.f64.s32	d6, s15
   11a28:	vcvt.f64.s32	d7, s14
   11a2c:	vmul.f64	d7, d7, d5
   11a30:	vdiv.f64	d7, d7, d6
   11a34:	vmov	r2, r3, d7
   11a38:	bl	10b18 <fprintf@plt>
   11a3c:	b	1195c <__assert_fail@plt+0xdc0>
   11a40:	movw	r3, #15532	; 0x3cac
   11a44:	movt	r3, #1
   11a48:	str	r7, [sp]
   11a4c:	mov	r2, #8
   11a50:	add	r1, r4, #920	; 0x398
   11a54:	str	r7, [sp, #4]
   11a58:	mov	r0, r5
   11a5c:	bl	11498 <__assert_fail@plt+0x8fc>
   11a60:	ldr	r3, [r4, #8]
   11a64:	cmp	r3, r7
   11a68:	ble	11a80 <__assert_fail@plt+0xee4>
   11a6c:	movw	r2, #15480	; 0x3c78
   11a70:	movt	r2, #1
   11a74:	add	r1, r4, #992	; 0x3e0
   11a78:	mov	r0, r5
   11a7c:	bl	112e4 <__assert_fail@plt+0x748>
   11a80:	ldr	r3, [r4, #416]	; 0x1a0
   11a84:	cmp	r3, #0
   11a88:	ble	119e8 <__assert_fail@plt+0xe4c>
   11a8c:	add	r1, r4, #9024	; 0x2340
   11a90:	movw	r2, #15492	; 0x3c84
   11a94:	movt	r2, #1
   11a98:	add	r1, r1, #24
   11a9c:	mov	r0, r5
   11aa0:	bl	112e4 <__assert_fail@plt+0x748>
   11aa4:	b	119e8 <__assert_fail@plt+0xe4c>
   11aa8:	andeq	r0, r0, r0
   11aac:	subsmi	r0, r9, r0
   11ab0:	strd	r4, [sp, #-16]!
   11ab4:	add	r5, r0, #8000	; 0x1f40
   11ab8:	mov	r4, r0
   11abc:	add	r5, r5, #48	; 0x30
   11ac0:	str	r6, [sp, #8]
   11ac4:	mov	r6, r0
   11ac8:	str	lr, [sp, #12]
   11acc:	mov	r0, r4
   11ad0:	add	r4, r4, #16
   11ad4:	bl	13614 <error@@Base+0xd48>
   11ad8:	cmp	r5, r4
   11adc:	bne	11acc <__assert_fail@plt+0xf30>
   11ae0:	add	r6, r6, #4096	; 0x1000
   11ae4:	mov	r3, #0
   11ae8:	ldrd	r4, [sp]
   11aec:	str	r3, [r6, #3952]	; 0xf70
   11af0:	str	r3, [r6, #3956]	; 0xf74
   11af4:	ldr	r6, [sp, #8]
   11af8:	add	sp, sp, #12
   11afc:	pop	{pc}		; (ldr pc, [sp], #4)
   11b00:	strd	r4, [sp, #-16]!
   11b04:	mov	r5, r1
   11b08:	str	r6, [sp, #8]
   11b0c:	str	lr, [sp, #12]
   11b10:	ldrb	r3, [r1]
   11b14:	cmp	r3, #0
   11b18:	beq	11b48 <__assert_fail@plt+0xfac>
   11b1c:	mov	r2, #0
   11b20:	add	r2, r2, r3
   11b24:	ldrb	r3, [r1, #1]!
   11b28:	cmp	r3, #0
   11b2c:	bne	11b20 <__assert_fail@plt+0xf84>
   11b30:	movw	r3, #20065	; 0x4e61
   11b34:	movt	r3, #33354	; 0x824a
   11b38:	movw	r1, #503	; 0x1f7
   11b3c:	umull	ip, r3, r3, r2
   11b40:	lsr	r3, r3, #8
   11b44:	mls	r3, r1, r3, r2
   11b48:	ldr	r4, [r0, r3, lsl #4]
   11b4c:	cmp	r4, #0
   11b50:	bne	11b64 <__assert_fail@plt+0xfc8>
   11b54:	b	11b78 <__assert_fail@plt+0xfdc>
   11b58:	ldr	r4, [r4, #4]
   11b5c:	cmp	r4, #0
   11b60:	beq	11b78 <__assert_fail@plt+0xfdc>
   11b64:	mov	r0, r5
   11b68:	ldr	r1, [r4, #8]
   11b6c:	bl	109f8 <strcmp@plt>
   11b70:	cmp	r0, #0
   11b74:	bne	11b58 <__assert_fail@plt+0xfbc>
   11b78:	mov	r0, r4
   11b7c:	ldrd	r4, [sp]
   11b80:	ldr	r6, [sp, #8]
   11b84:	add	sp, sp, #12
   11b88:	pop	{pc}		; (ldr pc, [sp], #4)
   11b8c:	ldr	r2, [r1, #8]
   11b90:	str	r4, [sp, #-8]!
   11b94:	mov	r4, r0
   11b98:	str	lr, [sp, #4]
   11b9c:	ldrb	r3, [r2]
   11ba0:	cmp	r3, #0
   11ba4:	beq	11bd8 <__assert_fail@plt+0x103c>
   11ba8:	mov	r0, #0
   11bac:	add	r0, r0, r3
   11bb0:	ldrb	r3, [r2, #1]!
   11bb4:	cmp	r3, #0
   11bb8:	bne	11bac <__assert_fail@plt+0x1010>
   11bbc:	movw	r3, #20065	; 0x4e61
   11bc0:	movt	r3, #33354	; 0x824a
   11bc4:	movw	r2, #503	; 0x1f7
   11bc8:	umull	ip, r3, r3, r0
   11bcc:	lsr	r3, r3, #8
   11bd0:	mls	r0, r2, r3, r0
   11bd4:	add	r0, r4, r0, lsl #4
   11bd8:	add	r4, r4, #4096	; 0x1000
   11bdc:	bl	1362c <error@@Base+0xd60>
   11be0:	ldr	r0, [r4, #3952]	; 0xf70
   11be4:	cmp	r0, #0
   11be8:	beq	11bf8 <__assert_fail@plt+0x105c>
   11bec:	bl	10a28 <free@plt>
   11bf0:	mov	r3, #0
   11bf4:	str	r3, [r4, #3952]	; 0xf70
   11bf8:	ldr	r3, [r4, #3956]	; 0xf74
   11bfc:	add	r3, r3, #1
   11c00:	str	r3, [r4, #3956]	; 0xf74
   11c04:	ldr	r4, [sp]
   11c08:	add	sp, sp, #4
   11c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c10:	ldr	r2, [r1, #8]
   11c14:	str	r4, [sp, #-8]!
   11c18:	mov	r4, r0
   11c1c:	str	lr, [sp, #4]
   11c20:	ldrb	r3, [r2]
   11c24:	cmp	r3, #0
   11c28:	beq	11c5c <__assert_fail@plt+0x10c0>
   11c2c:	mov	r0, #0
   11c30:	add	r0, r0, r3
   11c34:	ldrb	r3, [r2, #1]!
   11c38:	cmp	r3, #0
   11c3c:	bne	11c30 <__assert_fail@plt+0x1094>
   11c40:	movw	r3, #20065	; 0x4e61
   11c44:	movt	r3, #33354	; 0x824a
   11c48:	movw	r2, #503	; 0x1f7
   11c4c:	umull	ip, r3, r3, r0
   11c50:	lsr	r3, r3, #8
   11c54:	mls	r0, r2, r3, r0
   11c58:	add	r0, r4, r0, lsl #4
   11c5c:	add	r4, r4, #4096	; 0x1000
   11c60:	bl	1378c <error@@Base+0xec0>
   11c64:	ldr	r0, [r4, #3952]	; 0xf70
   11c68:	cmp	r0, #0
   11c6c:	beq	11c7c <__assert_fail@plt+0x10e0>
   11c70:	bl	10a28 <free@plt>
   11c74:	mov	r3, #0
   11c78:	str	r3, [r4, #3952]	; 0xf70
   11c7c:	ldr	r3, [r4, #3956]	; 0xf74
   11c80:	sub	r3, r3, #1
   11c84:	str	r3, [r4, #3956]	; 0xf74
   11c88:	ldr	r4, [sp]
   11c8c:	add	sp, sp, #4
   11c90:	pop	{pc}		; (ldr pc, [sp], #4)
   11c94:	strd	r4, [sp, #-16]!
   11c98:	str	r6, [sp, #8]
   11c9c:	add	r6, r0, #4096	; 0x1000
   11ca0:	ldr	r4, [r6, #3952]	; 0xf70
   11ca4:	str	lr, [sp, #12]
   11ca8:	cmp	r4, #0
   11cac:	beq	11cc0 <__assert_fail@plt+0x1124>
   11cb0:	ldrd	r4, [sp]
   11cb4:	ldr	r6, [sp, #8]
   11cb8:	add	sp, sp, #12
   11cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11cc0:	ldr	r3, [r6, #3956]	; 0xf74
   11cc4:	cmp	r3, #0
   11cc8:	beq	11cb0 <__assert_fail@plt+0x1114>
   11ccc:	mov	r5, r0
   11cd0:	mov	r1, #4
   11cd4:	mov	r0, r3
   11cd8:	bl	1290c <error@@Base+0x40>
   11cdc:	mov	r2, r4
   11ce0:	mov	ip, r4
   11ce4:	str	r0, [r6, #3952]	; 0xf70
   11ce8:	movw	lr, #503	; 0x1f7
   11cec:	ldr	r3, [r5, ip, lsl #4]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d10 <__assert_fail@plt+0x1174>
   11cf8:	add	r1, r0, r2, lsl #2
   11cfc:	str	r3, [r1], #4
   11d00:	add	r2, r2, #1
   11d04:	ldr	r3, [r3, #4]
   11d08:	cmp	r3, #0
   11d0c:	bne	11cfc <__assert_fail@plt+0x1160>
   11d10:	add	ip, ip, #1
   11d14:	cmp	ip, lr
   11d18:	bne	11cec <__assert_fail@plt+0x1150>
   11d1c:	ldrd	r4, [sp]
   11d20:	ldr	r6, [sp, #8]
   11d24:	add	sp, sp, #12
   11d28:	pop	{pc}		; (ldr pc, [sp], #4)
   11d2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11d30:	add	r5, r0, #8000	; 0x1f40
   11d34:	mov	r4, r0
   11d38:	add	r5, r5, #48	; 0x30
   11d3c:	strd	r6, [sp, #8]
   11d40:	mov	r7, r0
   11d44:	mov	r6, r1
   11d48:	str	r8, [sp, #16]
   11d4c:	str	lr, [sp, #20]
   11d50:	mov	r0, r4
   11d54:	mov	r1, r6
   11d58:	add	r4, r4, #16
   11d5c:	bl	13858 <error@@Base+0xf8c>
   11d60:	cmp	r5, r4
   11d64:	bne	11d50 <__assert_fail@plt+0x11b4>
   11d68:	add	r7, r7, #4096	; 0x1000
   11d6c:	ldr	r0, [r7, #3952]	; 0xf70
   11d70:	cmp	r0, #0
   11d74:	beq	11d84 <__assert_fail@plt+0x11e8>
   11d78:	bl	10a28 <free@plt>
   11d7c:	mov	r3, #0
   11d80:	str	r3, [r7, #3952]	; 0xf70
   11d84:	mov	r3, #0
   11d88:	ldrd	r4, [sp]
   11d8c:	ldr	r8, [sp, #16]
   11d90:	str	r3, [r7, #3956]	; 0xf74
   11d94:	ldrd	r6, [sp, #8]
   11d98:	add	sp, sp, #20
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	str	r4, [sp, #-8]!
   11da4:	movw	r4, #15580	; 0x3cdc
   11da8:	movt	r4, #1
   11dac:	str	lr, [sp, #4]
   11db0:	ldr	r0, [r0, #4]
   11db4:	cmp	r0, #0
   11db8:	beq	11e68 <__assert_fail@plt+0x12cc>
   11dbc:	movw	ip, #1092	; 0x444
   11dc0:	movw	r2, #8294	; 0x2066
   11dc4:	ldr	lr, [r0, #12]
   11dc8:	mov	r3, ip
   11dcc:	mov	r1, #0
   11dd0:	b	11ddc <__assert_fail@plt+0x1240>
   11dd4:	add	r2, r2, r2, lsl #1
   11dd8:	ldr	r2, [r4, r2, lsl #2]
   11ddc:	add	r3, r1, r3, lsr #1
   11de0:	cmp	lr, r2
   11de4:	subcc	ip, r3, #1
   11de8:	bcc	11e04 <__assert_fail@plt+0x1268>
   11dec:	add	r2, r3, r3, lsl #1
   11df0:	add	r1, r3, #1
   11df4:	add	r3, r4, r2, lsl #2
   11df8:	ldr	r2, [r3, #4]
   11dfc:	cmp	lr, r2
   11e00:	bls	11e74 <__assert_fail@plt+0x12d8>
   11e04:	sub	r3, ip, r1
   11e08:	cmp	ip, r1
   11e0c:	add	r2, r1, r3, lsr #1
   11e10:	bcs	11dd4 <__assert_fail@plt+0x1238>
   11e14:	movw	r2, #8294	; 0x2066
   11e18:	mov	r1, #0
   11e1c:	movw	ip, #1092	; 0x444
   11e20:	movw	r3, #1092	; 0x444
   11e24:	b	11e30 <__assert_fail@plt+0x1294>
   11e28:	add	r2, r2, r2, lsl #1
   11e2c:	ldr	r2, [r4, r2, lsl #2]
   11e30:	add	r3, r1, r3, lsr #1
   11e34:	cmp	lr, r2
   11e38:	subcc	ip, r3, #1
   11e3c:	bcc	11e58 <__assert_fail@plt+0x12bc>
   11e40:	add	r2, r3, r3, lsl #1
   11e44:	add	r1, r3, #1
   11e48:	add	r3, r4, r2, lsl #2
   11e4c:	ldr	r2, [r3, #4]
   11e50:	cmp	lr, r2
   11e54:	bls	11e84 <__assert_fail@plt+0x12e8>
   11e58:	sub	r3, ip, r1
   11e5c:	cmp	ip, r1
   11e60:	add	r2, r1, r3, lsr #1
   11e64:	bcs	11e28 <__assert_fail@plt+0x128c>
   11e68:	ldr	r4, [sp]
   11e6c:	add	sp, sp, #4
   11e70:	pop	{pc}		; (ldr pc, [sp], #4)
   11e74:	ldr	r3, [r3, #8]
   11e78:	cmp	r3, #4
   11e7c:	beq	11db0 <__assert_fail@plt+0x1214>
   11e80:	b	11e14 <__assert_fail@plt+0x1278>
   11e84:	ldr	r3, [r3, #8]
   11e88:	cmp	r3, #6
   11e8c:	beq	11db0 <__assert_fail@plt+0x1214>
   11e90:	b	11e68 <__assert_fail@plt+0x12cc>
   11e94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e98:	strd	r6, [sp, #8]
   11e9c:	strd	r8, [sp, #16]
   11ea0:	ldr	r9, [r1]
   11ea4:	strd	sl, [sp, #24]
   11ea8:	str	lr, [sp, #32]
   11eac:	sub	sp, sp, #28
   11eb0:	cmp	r9, #0
   11eb4:	str	r9, [sp, #12]
   11eb8:	beq	121ac <__assert_fail@plt+0x1610>
   11ebc:	movw	r7, #15580	; 0x3cdc
   11ec0:	movt	r7, #1
   11ec4:	str	r0, [sp, #4]
   11ec8:	mov	r8, #17
   11ecc:	add	r6, sp, #8
   11ed0:	mov	r0, r6
   11ed4:	bl	11da0 <__assert_fail@plt+0x1204>
   11ed8:	subs	r6, r0, #0
   11edc:	beq	122b8 <__assert_fail@plt+0x171c>
   11ee0:	movw	r1, #1092	; 0x444
   11ee4:	movw	r0, #8294	; 0x2066
   11ee8:	ldr	ip, [r6, #12]
   11eec:	mov	r3, r1
   11ef0:	mov	r2, #0
   11ef4:	b	11f08 <__assert_fail@plt+0x136c>
   11ef8:	sub	r3, r1, r2
   11efc:	add	r0, r2, r3, lsr #1
   11f00:	add	r0, r0, r0, lsl #1
   11f04:	ldr	r0, [r7, r0, lsl #2]
   11f08:	add	r3, r2, r3, lsr #1
   11f0c:	cmp	ip, r0
   11f10:	subcc	r1, r3, #1
   11f14:	bcc	11f30 <__assert_fail@plt+0x1394>
   11f18:	add	r2, r3, r3, lsl #1
   11f1c:	add	r2, r7, r2, lsl #2
   11f20:	ldr	r0, [r2, #4]
   11f24:	cmp	ip, r0
   11f28:	bls	12390 <__assert_fail@plt+0x17f4>
   11f2c:	add	r2, r3, #1
   11f30:	cmp	r1, r2
   11f34:	bcs	11ef8 <__assert_fail@plt+0x135c>
   11f38:	mov	r0, r6
   11f3c:	bl	11da0 <__assert_fail@plt+0x1204>
   11f40:	cmp	r0, #0
   11f44:	beq	12520 <__assert_fail@plt+0x1984>
   11f48:	mov	r5, #0
   11f4c:	mov	sl, r5
   11f50:	movw	r1, #1092	; 0x444
   11f54:	movw	lr, #8294	; 0x2066
   11f58:	ldr	ip, [r0, #12]
   11f5c:	mov	r3, r1
   11f60:	mov	r2, #0
   11f64:	b	11f78 <__assert_fail@plt+0x13dc>
   11f68:	sub	r3, r1, r2
   11f6c:	add	lr, r2, r3, lsr #1
   11f70:	add	lr, lr, lr, lsl #1
   11f74:	ldr	lr, [r7, lr, lsl #2]
   11f78:	add	r3, r2, r3, lsr #1
   11f7c:	cmp	ip, lr
   11f80:	subcc	r1, r3, #1
   11f84:	bcc	11fa0 <__assert_fail@plt+0x1404>
   11f88:	add	r2, r3, r3, lsl #1
   11f8c:	add	r2, r7, r2, lsl #2
   11f90:	ldr	lr, [r2, #4]
   11f94:	cmp	ip, lr
   11f98:	bls	12464 <__assert_fail@plt+0x18c8>
   11f9c:	add	r2, r3, #1
   11fa0:	cmp	r1, r2
   11fa4:	bcs	11f68 <__assert_fail@plt+0x13cc>
   11fa8:	bl	11da0 <__assert_fail@plt+0x1204>
   11fac:	cmp	r0, #0
   11fb0:	beq	12568 <__assert_fail@plt+0x19cc>
   11fb4:	mov	r4, #0
   11fb8:	mov	r1, r4
   11fbc:	mov	lr, r4
   11fc0:	movw	ip, #1092	; 0x444
   11fc4:	movw	fp, #8294	; 0x2066
   11fc8:	ldr	r0, [r0, #12]
   11fcc:	mov	r3, ip
   11fd0:	mov	r2, #0
   11fd4:	b	11fe8 <__assert_fail@plt+0x144c>
   11fd8:	sub	r3, ip, r2
   11fdc:	add	fp, r2, r3, lsr #1
   11fe0:	add	fp, fp, fp, lsl #1
   11fe4:	ldr	fp, [r7, fp, lsl #2]
   11fe8:	add	r3, r2, r3, lsr #1
   11fec:	cmp	r0, fp
   11ff0:	subcc	ip, r3, #1
   11ff4:	bcc	12010 <__assert_fail@plt+0x1474>
   11ff8:	add	r2, r3, r3, lsl #1
   11ffc:	add	r2, r7, r2, lsl #2
   12000:	ldr	fp, [r2, #4]
   12004:	cmp	r0, fp
   12008:	bls	12378 <__assert_fail@plt+0x17dc>
   1200c:	add	r2, r3, #1
   12010:	cmp	ip, r2
   12014:	bcs	11fd8 <__assert_fail@plt+0x143c>
   12018:	mov	r2, #0
   1201c:	cmp	lr, #0
   12020:	bne	12294 <__assert_fail@plt+0x16f8>
   12024:	sub	r3, r5, #2
   12028:	cmp	r3, #1
   1202c:	orrls	sl, sl, #1
   12030:	cmp	sl, #0
   12034:	bne	121d8 <__assert_fail@plt+0x163c>
   12038:	bic	ip, r4, #2
   1203c:	cmp	ip, #1
   12040:	movne	r0, r1
   12044:	orreq	r0, r1, #1
   12048:	cmp	r0, #0
   1204c:	bne	121d8 <__assert_fail@plt+0x163c>
   12050:	sub	r3, r5, #8
   12054:	cmp	r3, #1
   12058:	bhi	122cc <__assert_fail@plt+0x1730>
   1205c:	sub	r1, r4, #8
   12060:	cmp	r1, #1
   12064:	bls	122b0 <__assert_fail@plt+0x1714>
   12068:	sub	r1, r4, #12
   1206c:	sub	r0, r4, #10
   12070:	clz	r0, r0
   12074:	cmp	r4, #10
   12078:	cmpne	r1, #1
   1207c:	lsr	r0, r0, #5
   12080:	bhi	12090 <__assert_fail@plt+0x14f4>
   12084:	sub	r1, r2, #8
   12088:	cmp	r1, #1
   1208c:	bls	122b0 <__assert_fail@plt+0x1714>
   12090:	sub	r1, r8, #8
   12094:	cmp	r1, #1
   12098:	bls	12510 <__assert_fail@plt+0x1974>
   1209c:	sub	r1, r5, #8
   120a0:	clz	r1, r1
   120a4:	lsr	r1, r1, #5
   120a8:	tst	r1, r0
   120ac:	beq	123f0 <__assert_fail@plt+0x1854>
   120b0:	mov	r8, #8
   120b4:	ldr	r3, [r6, #4]
   120b8:	cmp	r3, #0
   120bc:	bne	11ed0 <__assert_fail@plt+0x1334>
   120c0:	ldr	r0, [r9, #12]
   120c4:	bl	10a34 <utf8proc_get_property@plt>
   120c8:	ldrsh	r3, [r0]
   120cc:	cmp	r3, #0
   120d0:	ble	1219c <__assert_fail@plt+0x1600>
   120d4:	cmp	r3, #12
   120d8:	ble	120e4 <__assert_fail@plt+0x1548>
   120dc:	cmp	r3, #29
   120e0:	bne	1219c <__assert_fail@plt+0x1600>
   120e4:	ldr	r5, [r6, #4]
   120e8:	cmp	r5, r9
   120ec:	movne	r4, r9
   120f0:	movne	r8, #0
   120f4:	bne	12104 <__assert_fail@plt+0x1568>
   120f8:	b	12578 <__assert_fail@plt+0x19dc>
   120fc:	cmp	r4, #0
   12100:	beq	1258c <__assert_fail@plt+0x19f0>
   12104:	add	r1, sp, #8
   12108:	ldr	r0, [r4, #12]
   1210c:	bl	10a4c <utf8proc_encode_char@plt>
   12110:	cmp	r0, #0
   12114:	beq	125ac <__assert_fail@plt+0x1a10>
   12118:	ldr	r4, [r4, #4]
   1211c:	add	r8, r8, r0
   12120:	cmp	r5, r4
   12124:	bne	120fc <__assert_fail@plt+0x1560>
   12128:	add	r0, r8, #1
   1212c:	mov	r4, #0
   12130:	bl	10ab8 <malloc@plt>
   12134:	mov	r8, r0
   12138:	b	12144 <__assert_fail@plt+0x15a8>
   1213c:	cmp	r9, #0
   12140:	beq	125cc <__assert_fail@plt+0x1a30>
   12144:	add	r1, r8, r4
   12148:	ldr	r0, [r9, #12]
   1214c:	bl	10a4c <utf8proc_encode_char@plt>
   12150:	ldr	r9, [r9, #4]
   12154:	add	r4, r4, r0
   12158:	cmp	r5, r9
   1215c:	bne	1213c <__assert_fail@plt+0x15a0>
   12160:	add	r4, r8, r4
   12164:	mov	r3, #0
   12168:	mov	r1, #12
   1216c:	mov	r0, #1
   12170:	strb	r3, [r4]
   12174:	bl	1290c <error@@Base+0x40>
   12178:	mov	r4, r0
   1217c:	mov	r0, r8
   12180:	bl	10b3c <utf8proc_NFC@plt>
   12184:	mov	r1, r4
   12188:	str	r0, [r4, #8]
   1218c:	ldr	r0, [sp, #4]
   12190:	bl	13684 <error@@Base+0xdb8>
   12194:	mov	r0, r8
   12198:	bl	10a28 <free@plt>
   1219c:	ldr	r9, [r6, #4]
   121a0:	cmp	r9, #0
   121a4:	str	r9, [sp, #12]
   121a8:	bne	11ec8 <__assert_fail@plt+0x132c>
   121ac:	add	sp, sp, #28
   121b0:	ldrd	r4, [sp]
   121b4:	ldrd	r6, [sp, #8]
   121b8:	ldrd	r8, [sp, #16]
   121bc:	ldrd	sl, [sp, #24]
   121c0:	add	sp, sp, #32
   121c4:	pop	{pc}		; (ldr pc, [sp], #4)
   121c8:	ldr	r3, [r2, #8]
   121cc:	cmp	r3, #4
   121d0:	bne	1223c <__assert_fail@plt+0x16a0>
   121d4:	mov	r6, r0
   121d8:	ldr	r0, [r6, #4]
   121dc:	cmp	r0, #0
   121e0:	beq	120c0 <__assert_fail@plt+0x1524>
   121e4:	movw	ip, #1092	; 0x444
   121e8:	movw	lr, #8294	; 0x2066
   121ec:	ldr	r1, [r0, #12]
   121f0:	mov	r3, ip
   121f4:	mov	r2, #0
   121f8:	b	1220c <__assert_fail@plt+0x1670>
   121fc:	sub	r3, ip, r2
   12200:	add	lr, r2, r3, lsr #1
   12204:	add	lr, lr, lr, lsl #1
   12208:	ldr	lr, [r7, lr, lsl #2]
   1220c:	add	r3, r2, r3, lsr #1
   12210:	cmp	r1, lr
   12214:	subcc	ip, r3, #1
   12218:	bcc	12234 <__assert_fail@plt+0x1698>
   1221c:	add	r2, r3, r3, lsl #1
   12220:	add	r2, r7, r2, lsl #2
   12224:	ldr	lr, [r2, #4]
   12228:	cmp	r1, lr
   1222c:	bls	121c8 <__assert_fail@plt+0x162c>
   12230:	add	r2, r3, #1
   12234:	cmp	r2, ip
   12238:	bls	121fc <__assert_fail@plt+0x1660>
   1223c:	movw	ip, #8294	; 0x2066
   12240:	mov	r2, #0
   12244:	movw	lr, #1092	; 0x444
   12248:	movw	r3, #1092	; 0x444
   1224c:	b	12260 <__assert_fail@plt+0x16c4>
   12250:	sub	r3, lr, r2
   12254:	add	ip, r2, r3, lsr #1
   12258:	add	ip, ip, ip, lsl #1
   1225c:	ldr	ip, [r7, ip, lsl #2]
   12260:	add	r3, r2, r3, lsr #1
   12264:	cmp	r1, ip
   12268:	subcc	lr, r3, #1
   1226c:	bcc	12288 <__assert_fail@plt+0x16ec>
   12270:	add	r2, r3, r3, lsl #1
   12274:	add	r2, r7, r2, lsl #2
   12278:	ldr	ip, [r2, #4]
   1227c:	cmp	r1, ip
   12280:	bls	12380 <__assert_fail@plt+0x17e4>
   12284:	add	r2, r3, #1
   12288:	cmp	lr, r2
   1228c:	bcs	12250 <__assert_fail@plt+0x16b4>
   12290:	b	120c0 <__assert_fail@plt+0x1524>
   12294:	mov	r8, #1
   12298:	b	120b4 <__assert_fail@plt+0x1518>
   1229c:	cmp	r5, #13
   122a0:	bne	123c0 <__assert_fail@plt+0x1824>
   122a4:	sub	r1, r4, #8
   122a8:	cmp	r1, #1
   122ac:	bhi	122d8 <__assert_fail@plt+0x173c>
   122b0:	mov	r8, r5
   122b4:	b	120b4 <__assert_fail@plt+0x1518>
   122b8:	mov	r4, #18
   122bc:	mov	ip, #16
   122c0:	mov	r2, r4
   122c4:	mov	r5, r4
   122c8:	mov	r3, #10
   122cc:	sub	r1, r8, #8
   122d0:	cmp	r1, #1
   122d4:	bls	1229c <__assert_fail@plt+0x1700>
   122d8:	sub	r0, r4, #10
   122dc:	clz	r0, r0
   122e0:	lsr	r0, r0, #5
   122e4:	cmp	r8, #8
   122e8:	cmpeq	r5, #11
   122ec:	bne	1248c <__assert_fail@plt+0x18f0>
   122f0:	cmp	r4, #8
   122f4:	beq	12548 <__assert_fail@plt+0x19ac>
   122f8:	sub	lr, r4, #15
   122fc:	mov	r1, #0
   12300:	clz	lr, lr
   12304:	mov	r3, r1
   12308:	lsr	lr, lr, #5
   1230c:	sub	r2, r5, #7
   12310:	sub	r0, r4, #7
   12314:	clz	r2, r2
   12318:	clz	r0, r0
   1231c:	lsr	r2, r2, #5
   12320:	mov	r8, r5
   12324:	lsr	r0, r0, #5
   12328:	orrs	r3, r1, r3
   1232c:	bne	12340 <__assert_fail@plt+0x17a4>
   12330:	cmp	r5, #16
   12334:	orreq	r2, r2, #1
   12338:	cmp	r2, #0
   1233c:	beq	12534 <__assert_fail@plt+0x1998>
   12340:	cmp	r4, #16
   12344:	beq	120b4 <__assert_fail@plt+0x1518>
   12348:	cmp	r5, #16
   1234c:	bne	12534 <__assert_fail@plt+0x1998>
   12350:	sub	r4, r4, #8
   12354:	cmp	r4, #1
   12358:	orrls	lr, lr, #1
   1235c:	cmp	lr, #0
   12360:	bne	120b4 <__assert_fail@plt+0x1518>
   12364:	cmp	r0, #0
   12368:	bne	120b4 <__assert_fail@plt+0x1518>
   1236c:	cmp	r6, #0
   12370:	bne	121d8 <__assert_fail@plt+0x163c>
   12374:	b	121ac <__assert_fail@plt+0x1610>
   12378:	ldr	r2, [r2, #8]
   1237c:	b	1201c <__assert_fail@plt+0x1480>
   12380:	ldr	r3, [r2, #8]
   12384:	cmp	r3, #6
   12388:	beq	121d4 <__assert_fail@plt+0x1638>
   1238c:	b	120c0 <__assert_fail@plt+0x1524>
   12390:	ldr	r5, [r2, #8]
   12394:	mov	r0, r6
   12398:	bl	11da0 <__assert_fail@plt+0x1204>
   1239c:	cmp	r0, #0
   123a0:	sub	sl, r5, #1
   123a4:	clz	sl, sl
   123a8:	lsr	sl, sl, #5
   123ac:	bne	11f50 <__assert_fail@plt+0x13b4>
   123b0:	mov	r4, #18
   123b4:	mov	r1, r0
   123b8:	mov	r2, r4
   123bc:	b	12024 <__assert_fail@plt+0x1488>
   123c0:	sub	r1, r5, #10
   123c4:	bics	r1, r1, #2
   123c8:	bne	12510 <__assert_fail@plt+0x1974>
   123cc:	sub	r1, r4, #8
   123d0:	cmp	r1, #1
   123d4:	bls	122b0 <__assert_fail@plt+0x1714>
   123d8:	sub	r0, r4, #10
   123dc:	sub	r1, r5, #8
   123e0:	clz	r0, r0
   123e4:	clz	r1, r1
   123e8:	lsr	r0, r0, #5
   123ec:	lsr	r1, r1, #5
   123f0:	cmp	r4, #11
   123f4:	movne	r1, #0
   123f8:	andeq	r1, r1, #1
   123fc:	cmp	r1, #0
   12400:	beq	122e4 <__assert_fail@plt+0x1748>
   12404:	cmp	r2, #8
   12408:	beq	120b0 <__assert_fail@plt+0x1514>
   1240c:	cmp	r3, #1
   12410:	sub	r1, r5, #15
   12414:	movhi	r3, #0
   12418:	movls	r3, #1
   1241c:	clz	r1, r1
   12420:	cmp	r5, #15
   12424:	lsr	r1, r1, #5
   12428:	mov	lr, #0
   1242c:	beq	124d0 <__assert_fail@plt+0x1934>
   12430:	cmp	r8, #15
   12434:	beq	12550 <__assert_fail@plt+0x19b4>
   12438:	sub	r2, r5, #7
   1243c:	sub	r0, r4, #7
   12440:	clz	r2, r2
   12444:	clz	r0, r0
   12448:	lsr	r2, r2, #5
   1244c:	lsr	r0, r0, #5
   12450:	tst	r2, r0
   12454:	movne	r8, #7
   12458:	bne	120b4 <__assert_fail@plt+0x1518>
   1245c:	mov	r8, r5
   12460:	b	12328 <__assert_fail@plt+0x178c>
   12464:	ldr	r4, [r2, #8]
   12468:	bl	11da0 <__assert_fail@plt+0x1204>
   1246c:	cmp	r0, #0
   12470:	sub	r1, r4, #2
   12474:	clz	r1, r1
   12478:	lsr	r1, r1, #5
   1247c:	and	lr, r1, sl
   12480:	bne	11fc0 <__assert_fail@plt+0x1424>
   12484:	mov	r2, #18
   12488:	b	1201c <__assert_fail@plt+0x1480>
   1248c:	sub	r1, r5, #15
   12490:	sub	lr, r4, #15
   12494:	clz	r1, r1
   12498:	clz	lr, lr
   1249c:	lsr	r1, r1, #5
   124a0:	lsr	lr, lr, #5
   124a4:	tst	r1, lr
   124a8:	beq	124b4 <__assert_fail@plt+0x1918>
   124ac:	mov	r8, #15
   124b0:	b	120b4 <__assert_fail@plt+0x1518>
   124b4:	cmp	r3, #1
   124b8:	movhi	r3, #0
   124bc:	movls	r3, #1
   124c0:	tst	lr, r3
   124c4:	bne	122b0 <__assert_fail@plt+0x1714>
   124c8:	cmp	r5, #15
   124cc:	bne	12430 <__assert_fail@plt+0x1894>
   124d0:	sub	r8, r4, #8
   124d4:	cmp	r8, #1
   124d8:	bls	124ac <__assert_fail@plt+0x1910>
   124dc:	cmp	ip, #12
   124e0:	orreq	r0, r0, #1
   124e4:	cmp	r0, #0
   124e8:	beq	124f4 <__assert_fail@plt+0x1958>
   124ec:	cmp	r2, #15
   124f0:	beq	124ac <__assert_fail@plt+0x1910>
   124f4:	sub	r0, r4, #7
   124f8:	orrs	r3, r1, r3
   124fc:	clz	r0, r0
   12500:	lsr	r0, r0, #5
   12504:	beq	12534 <__assert_fail@plt+0x1998>
   12508:	mov	r8, #15
   1250c:	b	12340 <__assert_fail@plt+0x17a4>
   12510:	sub	r0, r4, #10
   12514:	clz	r0, r0
   12518:	lsr	r0, r0, #5
   1251c:	b	1209c <__assert_fail@plt+0x1500>
   12520:	mov	r2, #18
   12524:	mov	r5, r0
   12528:	mov	r1, r0
   1252c:	mov	r4, r2
   12530:	b	12038 <__assert_fail@plt+0x149c>
   12534:	cmp	r5, #5
   12538:	cmpeq	r4, #5
   1253c:	bne	1236c <__assert_fail@plt+0x17d0>
   12540:	mov	r8, #5
   12544:	b	120b4 <__assert_fail@plt+0x1518>
   12548:	mov	r8, #11
   1254c:	b	120b4 <__assert_fail@plt+0x1518>
   12550:	cmp	r5, #14
   12554:	bne	125e8 <__assert_fail@plt+0x1a4c>
   12558:	cmp	r4, #15
   1255c:	bne	1230c <__assert_fail@plt+0x1770>
   12560:	mov	r8, r5
   12564:	b	120b4 <__assert_fail@plt+0x1518>
   12568:	mov	r4, r0
   1256c:	mov	r2, #18
   12570:	mov	r1, r0
   12574:	b	12024 <__assert_fail@plt+0x1488>
   12578:	mov	r0, #1
   1257c:	bl	10ab8 <malloc@plt>
   12580:	mov	r8, r0
   12584:	mov	r4, r0
   12588:	b	12164 <__assert_fail@plt+0x15c8>
   1258c:	movw	r3, #15540	; 0x3cb4
   12590:	movt	r3, #1
   12594:	movw	r1, #28696	; 0x7018
   12598:	movt	r1, #1
   1259c:	movw	r0, #28704	; 0x7020
   125a0:	movt	r0, #1
   125a4:	mov	r2, #249	; 0xf9
   125a8:	bl	10b9c <__assert_fail@plt>
   125ac:	movw	r3, #15540	; 0x3cb4
   125b0:	movt	r3, #1
   125b4:	movw	r1, #28696	; 0x7018
   125b8:	movt	r1, #1
   125bc:	movw	r0, #28720	; 0x7030
   125c0:	movt	r0, #1
   125c4:	mov	r2, #253	; 0xfd
   125c8:	bl	10b9c <__assert_fail@plt>
   125cc:	movw	r1, #28696	; 0x7018
   125d0:	movt	r1, #1
   125d4:	ldr	r3, [pc, #40]	; 12604 <__assert_fail@plt+0x1a68>
   125d8:	movw	r0, #28704	; 0x7020
   125dc:	movt	r0, #1
   125e0:	movw	r2, #269	; 0x10d
   125e4:	bl	10b9c <__assert_fail@plt>
   125e8:	sub	r2, r5, #10
   125ec:	bics	r2, r2, #2
   125f0:	bne	12438 <__assert_fail@plt+0x189c>
   125f4:	cmp	r4, #15
   125f8:	bne	12438 <__assert_fail@plt+0x189c>
   125fc:	mov	r8, r5
   12600:	b	120b4 <__assert_fail@plt+0x1518>
   12604:	andeq	r3, r1, r8, asr #25
   12608:	str	r4, [sp, #-8]!
   1260c:	mov	r4, r0
   12610:	ldr	r0, [r0, #8]
   12614:	str	lr, [sp, #4]
   12618:	bl	10a28 <free@plt>
   1261c:	mov	r0, r4
   12620:	ldr	r4, [sp]
   12624:	ldr	lr, [sp, #4]
   12628:	add	sp, sp, #8
   1262c:	b	10a28 <free@plt>
   12630:	movw	r3, #50248	; 0xc448
   12634:	movt	r3, #2
   12638:	str	r7, [sp, #-8]!
   1263c:	ldr	r3, [r3]
   12640:	mov	r8, r0
   12644:	str	lr, [sp, #4]
   12648:	sub	sp, sp, #112	; 0x70
   1264c:	cmp	r3, #0
   12650:	beq	12658 <__assert_fail@plt+0x1abc>
   12654:	blx	r3
   12658:	movw	r5, #33084	; 0x813c
   1265c:	movt	r5, #2
   12660:	ldrsh	r3, [r5]
   12664:	cmp	r3, #0
   12668:	ble	126cc <__assert_fail@plt+0x1b30>
   1266c:	movw	r7, #50244	; 0xc444
   12670:	movt	r7, #2
   12674:	movw	r6, #28740	; 0x7044
   12678:	movt	r6, #1
   1267c:	mov	r4, #1
   12680:	ldr	r9, [r7]
   12684:	bl	10ae8 <getpid@plt>
   12688:	mov	r3, r0
   1268c:	mov	r1, r6
   12690:	str	r4, [sp]
   12694:	add	r0, sp, #12
   12698:	add	r4, r4, #1
   1269c:	sxth	r4, r4
   126a0:	mov	r2, r9
   126a4:	bl	10b54 <sprintf@plt>
   126a8:	add	r0, sp, #12
   126ac:	bl	10a58 <strdup@plt>
   126b0:	mov	r9, r0
   126b4:	bl	10a70 <unlink@plt>
   126b8:	mov	r0, r9
   126bc:	bl	10a28 <free@plt>
   126c0:	ldrsh	r3, [r5]
   126c4:	cmp	r3, r4
   126c8:	bge	12680 <__assert_fail@plt+0x1ae4>
   126cc:	mov	r0, r8
   126d0:	bl	10af4 <exit@plt>
   126d4:	ldrb	r3, [r0]
   126d8:	ldrb	r2, [r1]
   126dc:	cmp	r3, #0
   126e0:	beq	12708 <__assert_fail@plt+0x1b6c>
   126e4:	cmp	r2, r3
   126e8:	beq	126f8 <__assert_fail@plt+0x1b5c>
   126ec:	b	12714 <__assert_fail@plt+0x1b78>
   126f0:	cmp	r3, r2
   126f4:	bne	12714 <__assert_fail@plt+0x1b78>
   126f8:	ldrb	r3, [r0, #1]!
   126fc:	ldrb	r2, [r1, #1]!
   12700:	cmp	r3, #0
   12704:	bne	126f0 <__assert_fail@plt+0x1b54>
   12708:	cmp	r2, #0
   1270c:	beq	12724 <__assert_fail@plt+0x1b88>
   12710:	mov	r3, #0
   12714:	cmp	r3, r2
   12718:	mvncc	r0, #0
   1271c:	movcs	r0, #1
   12720:	bx	lr
   12724:	mov	r0, r2
   12728:	bx	lr
   1272c:	movw	r3, #32968	; 0x80c8
   12730:	movt	r3, #2
   12734:	ldr	r3, [r3]
   12738:	cmp	r3, r0
   1273c:	beq	12758 <__assert_fail@plt+0x1bbc>
   12740:	movw	r3, #32972	; 0x80cc
   12744:	movt	r3, #2
   12748:	ldr	r3, [r3]
   1274c:	cmp	r3, r0
   12750:	beq	12758 <__assert_fail@plt+0x1bbc>
   12754:	b	10b30 <fclose@plt>
   12758:	bx	lr
   1275c:	push	{lr}		; (str lr, [sp, #-4]!)
   12760:	sub	sp, sp, #92	; 0x5c
   12764:	mov	r1, r0
   12768:	mov	r2, sp
   1276c:	mov	r0, #3
   12770:	bl	10a88 <__xstat@plt>
   12774:	clz	r0, r0
   12778:	lsr	r0, r0, #5
   1277c:	add	sp, sp, #92	; 0x5c
   12780:	pop	{pc}		; (ldr pc, [sp], #4)
   12784:	movw	r3, #33084	; 0x813c
   12788:	movt	r3, #2
   1278c:	strd	r4, [sp, #-12]!
   12790:	ldrh	r4, [r3]
   12794:	movw	r2, #50244	; 0xc444
   12798:	movt	r2, #2
   1279c:	ldr	r5, [r2]
   127a0:	str	lr, [sp, #8]
   127a4:	sub	sp, sp, #116	; 0x74
   127a8:	add	r4, r4, #1
   127ac:	sxth	r4, r4
   127b0:	strh	r4, [r3]
   127b4:	bl	10ae8 <getpid@plt>
   127b8:	mov	r3, r0
   127bc:	mov	r2, r5
   127c0:	str	r4, [sp]
   127c4:	add	r0, sp, #12
   127c8:	movw	r1, #28740	; 0x7044
   127cc:	movt	r1, #1
   127d0:	bl	10b54 <sprintf@plt>
   127d4:	add	r0, sp, #12
   127d8:	bl	10a58 <strdup@plt>
   127dc:	mov	r4, r0
   127e0:	bl	10a70 <unlink@plt>
   127e4:	mov	r0, r4
   127e8:	add	sp, sp, #116	; 0x74
   127ec:	ldrd	r4, [sp]
   127f0:	add	sp, sp, #8
   127f4:	pop	{pc}		; (ldr pc, [sp], #4)
   127f8:	str	r4, [sp, #-8]!
   127fc:	mov	r4, r0
   12800:	str	lr, [sp, #4]
   12804:	bl	10b0c <strlen@plt>
   12808:	uxth	r0, r0
   1280c:	sub	r3, r0, #1
   12810:	sxth	r3, r3
   12814:	cmp	r3, #0
   12818:	blt	12858 <__assert_fail@plt+0x1cbc>
   1281c:	ldrb	r2, [r4, r3]
   12820:	cmp	r2, #47	; 0x2f
   12824:	beq	12858 <__assert_fail@plt+0x1cbc>
   12828:	sub	r0, r0, #2
   1282c:	sxth	r3, r0
   12830:	add	r2, r3, #1
   12834:	add	r2, r4, r2
   12838:	b	1284c <__assert_fail@plt+0x1cb0>
   1283c:	ldrb	r0, [r2, #-1]!
   12840:	cmp	r0, #47	; 0x2f
   12844:	beq	12858 <__assert_fail@plt+0x1cbc>
   12848:	mov	r3, r1
   1284c:	tst	r3, #32768	; 0x8000
   12850:	sub	r1, r3, #1
   12854:	beq	1283c <__assert_fail@plt+0x1ca0>
   12858:	add	r0, r3, #1
   1285c:	add	r0, r4, r0
   12860:	ldr	r4, [sp]
   12864:	add	sp, sp, #4
   12868:	pop	{pc}		; (ldr pc, [sp], #4)
   1286c:	mov	r0, #0
   12870:	str	r4, [sp, #-8]!
   12874:	str	lr, [sp, #4]
   12878:	bl	12630 <__assert_fail@plt+0x1a94>
   1287c:	movw	r3, #50240	; 0xc440
   12880:	movt	r3, #2
   12884:	str	r4, [sp, #-8]!
   12888:	ldr	r2, [r3]
   1288c:	str	lr, [sp, #4]
   12890:	cmp	r2, #0
   12894:	beq	128a0 <__assert_fail@plt+0x1d04>
   12898:	blx	r2
   1289c:	bl	1286c <__assert_fail@plt+0x1cd0>
   128a0:	movw	r3, #50244	; 0xc444
   128a4:	movt	r3, #2
   128a8:	movw	ip, #32960	; 0x80c0
   128ac:	movt	ip, #2
   128b0:	ldr	r2, [r3]
   128b4:	movw	r1, #28756	; 0x7054
   128b8:	movt	r1, #1
   128bc:	mov	r3, r0
   128c0:	ldr	r0, [ip]
   128c4:	bl	10b18 <fprintf@plt>
   128c8:	b	1289c <__assert_fail@plt+0x1d00>

000128cc <error@@Base>:
   128cc:	movw	r3, #50244	; 0xc444
   128d0:	movt	r3, #2
   128d4:	str	r4, [sp, #-8]!
   128d8:	movw	ip, #32960	; 0x80c0
   128dc:	movt	ip, #2
   128e0:	ldr	r2, [r3]
   128e4:	movw	r1, #28772	; 0x7064
   128e8:	movt	r1, #1
   128ec:	str	lr, [sp, #4]
   128f0:	mov	r3, r0
   128f4:	ldr	r0, [ip]
   128f8:	bl	10b18 <fprintf@plt>
   128fc:	movw	r3, #32952	; 0x80b8
   12900:	movt	r3, #2
   12904:	ldr	r0, [r3]
   12908:	bl	12630 <__assert_fail@plt+0x1a94>
   1290c:	str	r4, [sp, #-8]!
   12910:	str	lr, [sp, #4]
   12914:	bl	109ec <calloc@plt>
   12918:	cmp	r0, #0
   1291c:	beq	1292c <error@@Base+0x60>
   12920:	ldr	r4, [sp]
   12924:	add	sp, sp, #4
   12928:	pop	{pc}		; (ldr pc, [sp], #4)
   1292c:	movw	r0, #28780	; 0x706c
   12930:	movt	r0, #1
   12934:	bl	128cc <error@@Base>
   12938:	movw	r3, #33084	; 0x813c
   1293c:	movt	r3, #2
   12940:	ldrb	r2, [r3, #2]
   12944:	cmp	r2, #0
   12948:	bxne	lr
   1294c:	mov	r2, #1
   12950:	movw	r0, #28808	; 0x7088
   12954:	movt	r0, #1
   12958:	str	r4, [sp, #-8]!
   1295c:	str	lr, [sp, #4]
   12960:	strb	r2, [r3, #2]
   12964:	bl	128cc <error@@Base>
   12968:	push	{lr}		; (str lr, [sp, #-4]!)
   1296c:	sub	sp, sp, #12
   12970:	movw	r3, #50244	; 0xc444
   12974:	movt	r3, #2
   12978:	movw	ip, #32960	; 0x80c0
   1297c:	movt	ip, #2
   12980:	str	r1, [sp]
   12984:	movw	r1, #28824	; 0x7098
   12988:	movt	r1, #1
   1298c:	ldr	r2, [r3]
   12990:	mov	r3, r0
   12994:	ldr	r0, [ip]
   12998:	bl	10b18 <fprintf@plt>
   1299c:	movw	r3, #32952	; 0x80b8
   129a0:	movt	r3, #2
   129a4:	ldr	r0, [r3]
   129a8:	bl	12630 <__assert_fail@plt+0x1a94>
   129ac:	subs	r2, r0, #0
   129b0:	strd	r4, [sp, #-16]!
   129b4:	mov	r4, r1
   129b8:	str	r6, [sp, #8]
   129bc:	str	lr, [sp, #12]
   129c0:	beq	12a00 <error@@Base+0x134>
   129c4:	mov	r5, r2
   129c8:	bl	10a1c <fopen@plt>
   129cc:	cmp	r0, #0
   129d0:	beq	129e4 <error@@Base+0x118>
   129d4:	ldrd	r4, [sp]
   129d8:	ldr	r6, [sp, #8]
   129dc:	add	sp, sp, #12
   129e0:	pop	{pc}		; (ldr pc, [sp], #4)
   129e4:	ldrb	r3, [r4]
   129e8:	mov	r1, r5
   129ec:	cmp	r3, #119	; 0x77
   129f0:	beq	12a2c <error@@Base+0x160>
   129f4:	movw	r0, #28864	; 0x70c0
   129f8:	movt	r0, #1
   129fc:	bl	12968 <error@@Base+0x9c>
   12a00:	ldrb	r3, [r1]
   12a04:	ldrd	r4, [sp]
   12a08:	ldr	r6, [sp, #8]
   12a0c:	add	sp, sp, #12
   12a10:	cmp	r3, #114	; 0x72
   12a14:	movweq	r3, #32968	; 0x80c8
   12a18:	movwne	r3, #32972	; 0x80cc
   12a1c:	movteq	r3, #2
   12a20:	movtne	r3, #2
   12a24:	ldr	r0, [r3]
   12a28:	pop	{pc}		; (ldr pc, [sp], #4)
   12a2c:	movw	r0, #28840	; 0x70a8
   12a30:	movt	r0, #1
   12a34:	bl	12968 <error@@Base+0x9c>
   12a38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12a3c:	ldr	r4, [r1]
   12a40:	strd	r6, [sp, #8]
   12a44:	strd	r8, [sp, #16]
   12a48:	mov	r8, r3
   12a4c:	strd	sl, [sp, #24]
   12a50:	mov	sl, r1
   12a54:	str	lr, [sp, #32]
   12a58:	sub	sp, sp, #20
   12a5c:	str	r0, [sp]
   12a60:	mov	r0, r4
   12a64:	str	r2, [sp, #12]
   12a68:	bl	10b0c <strlen@plt>
   12a6c:	uxth	r0, r0
   12a70:	sub	r3, r0, #1
   12a74:	sxth	r3, r3
   12a78:	cmp	r3, #0
   12a7c:	blt	12abc <error@@Base+0x1f0>
   12a80:	ldrb	r2, [r4, r3]
   12a84:	cmp	r2, #47	; 0x2f
   12a88:	beq	12abc <error@@Base+0x1f0>
   12a8c:	sub	r0, r0, #2
   12a90:	sxth	r3, r0
   12a94:	add	r2, r3, #1
   12a98:	add	r2, r4, r2
   12a9c:	b	12ab4 <error@@Base+0x1e8>
   12aa0:	ldrb	r1, [r2, #-1]!
   12aa4:	sub	r0, r3, #1
   12aa8:	cmp	r1, #47	; 0x2f
   12aac:	beq	12abc <error@@Base+0x1f0>
   12ab0:	mov	r3, r0
   12ab4:	tst	r3, #32768	; 0x8000
   12ab8:	beq	12aa0 <error@@Base+0x1d4>
   12abc:	add	r3, r3, #1
   12ac0:	movw	r2, #50244	; 0xc444
   12ac4:	movt	r2, #2
   12ac8:	add	r3, r4, r3
   12acc:	movw	r1, #10552	; 0x2938
   12ad0:	movt	r1, #1
   12ad4:	mov	r0, #2
   12ad8:	str	r3, [r2]
   12adc:	bl	10ad0 <__sysv_signal@plt>
   12ae0:	movw	r1, #10552	; 0x2938
   12ae4:	movt	r1, #1
   12ae8:	mov	r0, #15
   12aec:	bl	10ad0 <__sysv_signal@plt>
   12af0:	ldr	r3, [sp]
   12af4:	ldr	r9, [r3]
   12af8:	cmp	r9, #1
   12afc:	beq	12cd4 <error@@Base+0x408>
   12b00:	movle	r6, #0
   12b04:	ble	12c5c <error@@Base+0x390>
   12b08:	movw	r3, #28884	; 0x70d4
   12b0c:	movt	r3, #1
   12b10:	mov	r7, #1
   12b14:	mov	r6, #0
   12b18:	mov	r4, r7
   12b1c:	str	r3, [sp, #8]
   12b20:	mov	r3, sl
   12b24:	mov	sl, r9
   12b28:	b	12b4c <error@@Base+0x280>
   12b2c:	add	r4, r4, #1
   12b30:	add	r2, r6, #1
   12b34:	str	r5, [r3, r6, lsl #2]
   12b38:	sxth	r4, r4
   12b3c:	sxth	r6, r2
   12b40:	cmp	r4, sl
   12b44:	mov	r7, r4
   12b48:	bge	12c5c <error@@Base+0x390>
   12b4c:	ldr	r5, [r3, r4, lsl #2]
   12b50:	lsl	r9, r4, #2
   12b54:	ldrb	r2, [r5]
   12b58:	cmp	r2, #45	; 0x2d
   12b5c:	bne	12b2c <error@@Base+0x260>
   12b60:	ldrb	fp, [r5, #1]
   12b64:	cmp	fp, #0
   12b68:	beq	12b2c <error@@Base+0x260>
   12b6c:	mov	r0, r5
   12b70:	str	r3, [sp, #4]
   12b74:	bl	10b0c <strlen@plt>
   12b78:	mov	r2, r0
   12b7c:	mov	r1, r5
   12b80:	ldr	r0, [sp, #8]
   12b84:	bl	10b78 <strncmp@plt>
   12b88:	cmp	r0, #0
   12b8c:	beq	12ce8 <error@@Base+0x41c>
   12b90:	ldr	r3, [sp, #4]
   12b94:	add	r7, r7, #1
   12b98:	cmp	r7, sl
   12b9c:	movge	r0, #0
   12ba0:	addlt	r9, r3, r9
   12ba4:	ldrlt	r0, [r9, #4]
   12ba8:	cmp	r8, #0
   12bac:	beq	12bf0 <error@@Base+0x324>
   12bb0:	ldrb	r2, [r8]
   12bb4:	cmp	r2, #0
   12bb8:	beq	12bf0 <error@@Base+0x324>
   12bbc:	cmp	fp, r2
   12bc0:	beq	12c00 <error@@Base+0x334>
   12bc4:	mov	r2, #0
   12bc8:	b	12bd4 <error@@Base+0x308>
   12bcc:	cmp	fp, ip
   12bd0:	beq	12c04 <error@@Base+0x338>
   12bd4:	add	r2, r2, #1
   12bd8:	sxth	r2, r2
   12bdc:	add	r1, r2, r2, lsl #1
   12be0:	ldrb	ip, [r8, r1, lsl #2]
   12be4:	add	r1, r8, r1, lsl #2
   12be8:	cmp	ip, #0
   12bec:	bne	12bcc <error@@Base+0x300>
   12bf0:	movw	r0, #28892	; 0x70dc
   12bf4:	movt	r0, #1
   12bf8:	mov	r1, r5
   12bfc:	bl	12968 <error@@Base+0x9c>
   12c00:	mov	r1, r8
   12c04:	ldr	r2, [r1, #4]
   12c08:	cmp	r2, #0
   12c0c:	beq	12c94 <error@@Base+0x3c8>
   12c10:	ldrb	ip, [r5, #2]
   12c14:	cmp	ip, #0
   12c18:	bne	12c80 <error@@Base+0x3b4>
   12c1c:	cmp	r0, #0
   12c20:	beq	12cf0 <error@@Base+0x424>
   12c24:	ldr	r1, [r2]
   12c28:	cmp	r1, #0
   12c2c:	bne	12d00 <error@@Base+0x434>
   12c30:	str	r0, [r2]
   12c34:	uxth	r2, r4
   12c38:	ldrb	r1, [r5, #2]
   12c3c:	add	r4, r2, #1
   12c40:	sxth	r4, r4
   12c44:	cmp	r1, #0
   12c48:	addeq	r4, r2, #2
   12c4c:	sxtheq	r4, r4
   12c50:	cmp	r4, sl
   12c54:	mov	r7, r4
   12c58:	blt	12b4c <error@@Base+0x280>
   12c5c:	ldr	r3, [sp]
   12c60:	str	r6, [r3]
   12c64:	add	sp, sp, #20
   12c68:	ldrd	r4, [sp]
   12c6c:	ldrd	r6, [sp, #8]
   12c70:	ldrd	r8, [sp, #16]
   12c74:	ldrd	sl, [sp, #24]
   12c78:	add	sp, sp, #32
   12c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c80:	ldr	r1, [r2]
   12c84:	cmp	r1, #0
   12c88:	bne	12d00 <error@@Base+0x434>
   12c8c:	add	r0, r5, #2
   12c90:	b	12c30 <error@@Base+0x364>
   12c94:	ldr	r2, [r1, #8]
   12c98:	cmp	r2, #0
   12c9c:	beq	12bf0 <error@@Base+0x324>
   12ca0:	ldrb	r1, [r5, #2]
   12ca4:	cmp	r1, #0
   12ca8:	bne	12bf0 <error@@Base+0x324>
   12cac:	ldrb	r1, [r2]
   12cb0:	cmp	r1, #0
   12cb4:	bne	12d00 <error@@Base+0x434>
   12cb8:	mov	r1, #1
   12cbc:	add	r4, r4, #1
   12cc0:	sxth	r4, r4
   12cc4:	strb	r1, [r2]
   12cc8:	ldr	r2, [sp]
   12ccc:	ldr	sl, [r2]
   12cd0:	b	12b40 <error@@Base+0x274>
   12cd4:	movw	r3, #32952	; 0x80b8
   12cd8:	movt	r3, #2
   12cdc:	ldrb	r6, [r3, #4]
   12ce0:	cmp	r6, #0
   12ce4:	beq	12c5c <error@@Base+0x390>
   12ce8:	ldr	r0, [sp, #12]
   12cec:	bl	1287c <__assert_fail@plt+0x1ce0>
   12cf0:	ldr	r2, [r1, #8]
   12cf4:	cmp	r2, #0
   12cf8:	bne	12cac <error@@Base+0x3e0>
   12cfc:	b	12bf0 <error@@Base+0x324>
   12d00:	movw	r0, #28908	; 0x70ec
   12d04:	movt	r0, #1
   12d08:	mov	r1, r5
   12d0c:	bl	12968 <error@@Base+0x9c>
   12d10:	push	{lr}		; (str lr, [sp, #-4]!)
   12d14:	sub	sp, sp, #12
   12d18:	movw	r3, #50244	; 0xc444
   12d1c:	movt	r3, #2
   12d20:	movw	ip, #32960	; 0x80c0
   12d24:	movt	ip, #2
   12d28:	str	r1, [sp]
   12d2c:	movw	r1, #28824	; 0x7098
   12d30:	movt	r1, #1
   12d34:	ldr	r2, [r3]
   12d38:	mov	r3, r0
   12d3c:	ldr	r0, [ip]
   12d40:	bl	10b18 <fprintf@plt>
   12d44:	add	sp, sp, #12
   12d48:	pop	{pc}		; (ldr pc, [sp], #4)
   12d4c:	strd	r4, [sp, #-16]!
   12d50:	uxtb	r5, r1
   12d54:	mov	r1, #16
   12d58:	str	r6, [sp, #8]
   12d5c:	mov	r6, r0
   12d60:	mov	r0, #1
   12d64:	mov	r4, r2
   12d68:	str	lr, [sp, #12]
   12d6c:	bl	1290c <error@@Base+0x40>
   12d70:	mov	r3, r0
   12d74:	mov	r0, r6
   12d78:	mov	r1, r3
   12d7c:	strb	r5, [r3, #8]
   12d80:	str	r4, [r3, #12]
   12d84:	ldrd	r4, [sp]
   12d88:	ldr	r6, [sp, #8]
   12d8c:	ldr	lr, [sp, #12]
   12d90:	add	sp, sp, #16
   12d94:	b	13684 <error@@Base+0xdb8>
   12d98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12d9c:	clz	r3, r1
   12da0:	strd	r6, [sp, #8]
   12da4:	lsr	r3, r3, #5
   12da8:	strd	r8, [sp, #16]
   12dac:	strd	sl, [sp, #24]
   12db0:	mov	fp, r2
   12db4:	str	lr, [sp, #32]
   12db8:	sub	sp, sp, #116	; 0x74
   12dbc:	ldrb	r2, [r2]
   12dc0:	cmp	r2, #0
   12dc4:	moveq	r3, #0
   12dc8:	cmp	r3, #0
   12dcc:	bne	131a4 <error@@Base+0x8d8>
   12dd0:	mov	r9, r0
   12dd4:	mov	r0, r1
   12dd8:	ldr	r3, [r9, #4]
   12ddc:	movw	r1, #15340	; 0x3bec
   12de0:	movt	r1, #1
   12de4:	str	r3, [sp, #4]
   12de8:	bl	129ac <error@@Base+0xe0>
   12dec:	ldrb	r3, [fp]
   12df0:	mov	r6, r0
   12df4:	cmp	r3, #0
   12df8:	bne	130f0 <error@@Base+0x824>
   12dfc:	ldr	sl, [fp, #4]
   12e00:	mov	r0, r6
   12e04:	ldrb	r5, [fp, #1]
   12e08:	cmp	sl, #0
   12e0c:	moveq	sl, #94	; 0x5e
   12e10:	bl	10b90 <getc@plt>
   12e14:	cmn	r0, #1
   12e18:	beq	12ed8 <error@@Base+0x60c>
   12e1c:	movw	r8, #32264	; 0x7e08
   12e20:	movt	r8, #2
   12e24:	ldrsb	r4, [r8, r0]
   12e28:	cmp	r4, #0
   12e2c:	ble	13184 <error@@Base+0x8b8>
   12e30:	cmp	r5, #0
   12e34:	movne	r7, #0
   12e38:	bne	12e4c <error@@Base+0x580>
   12e3c:	b	12f6c <error@@Base+0x6a0>
   12e40:	ldrsb	r4, [r8, r0]
   12e44:	cmp	r4, #0
   12e48:	ble	13184 <error@@Base+0x8b8>
   12e4c:	cmp	r4, #1
   12e50:	strb	r0, [sp, #8]
   12e54:	beq	12e78 <error@@Base+0x5ac>
   12e58:	sub	r5, r4, #1
   12e5c:	mov	r3, r6
   12e60:	mov	r2, r5
   12e64:	mov	r1, #1
   12e68:	add	r0, sp, #9
   12e6c:	bl	10aa0 <fread@plt>
   12e70:	cmp	r5, r0
   12e74:	bne	13198 <error@@Base+0x8cc>
   12e78:	add	r2, sp, #12
   12e7c:	mov	r1, #4
   12e80:	add	r0, sp, #8
   12e84:	bl	10aac <utf8proc_iterate@plt>
   12e88:	cmp	r0, r4
   12e8c:	bne	13190 <error@@Base+0x8c4>
   12e90:	ldr	r4, [sp, #12]
   12e94:	cmp	r4, sl
   12e98:	moveq	r7, #1
   12e9c:	beq	12ec8 <error@@Base+0x5fc>
   12ea0:	mov	r1, #16
   12ea4:	mov	r0, #1
   12ea8:	bl	1290c <error@@Base+0x40>
   12eac:	mov	r3, r0
   12eb0:	mov	r0, r9
   12eb4:	mov	r1, r3
   12eb8:	strb	r7, [r3, #8]
   12ebc:	mov	r7, #0
   12ec0:	str	r4, [r3, #12]
   12ec4:	bl	13684 <error@@Base+0xdb8>
   12ec8:	mov	r0, r6
   12ecc:	bl	10b90 <getc@plt>
   12ed0:	cmn	r0, #1
   12ed4:	bne	12e40 <error@@Base+0x574>
   12ed8:	mov	r0, r6
   12edc:	bl	1272c <__assert_fail@plt+0x1b90>
   12ee0:	ldrb	r3, [fp, #9]
   12ee4:	cmp	r3, #0
   12ee8:	beq	12ff0 <error@@Base+0x724>
   12eec:	ldr	r3, [sp, #4]
   12ef0:	cmp	r3, #0
   12ef4:	ldrne	r6, [r3, #4]
   12ef8:	ldreq	r6, [r9]
   12efc:	cmp	r6, #0
   12f00:	beq	12ff0 <error@@Base+0x724>
   12f04:	mov	r5, r6
   12f08:	mov	r7, #32
   12f0c:	b	12f1c <error@@Base+0x650>
   12f10:	ldr	r5, [r5, #4]
   12f14:	cmp	r5, #0
   12f18:	beq	13068 <error@@Base+0x79c>
   12f1c:	ldr	r4, [r5, #12]
   12f20:	mov	r0, r4
   12f24:	bl	10a34 <utf8proc_get_property@plt>
   12f28:	cmp	r4, #13
   12f2c:	bhi	130e4 <error@@Base+0x818>
   12f30:	cmp	r4, #11
   12f34:	bcs	12f58 <error@@Base+0x68c>
   12f38:	cmp	r4, #9
   12f3c:	beq	12f58 <error@@Base+0x68c>
   12f40:	cmp	r4, #10
   12f44:	beq	12f10 <error@@Base+0x644>
   12f48:	ldrsh	r3, [r0]
   12f4c:	sub	r3, r3, #23
   12f50:	cmp	r3, #2
   12f54:	bhi	12f10 <error@@Base+0x644>
   12f58:	str	r7, [r5, #12]
   12f5c:	b	12f10 <error@@Base+0x644>
   12f60:	ldrsb	r4, [r8, r0]
   12f64:	cmp	r4, #0
   12f68:	ble	13184 <error@@Base+0x8b8>
   12f6c:	cmp	r4, #1
   12f70:	strb	r0, [sp, #8]
   12f74:	beq	12f98 <error@@Base+0x6cc>
   12f78:	sub	r5, r4, #1
   12f7c:	mov	r3, r6
   12f80:	mov	r2, r5
   12f84:	mov	r1, #1
   12f88:	add	r0, sp, #9
   12f8c:	bl	10aa0 <fread@plt>
   12f90:	cmp	r0, r5
   12f94:	bne	13198 <error@@Base+0x8cc>
   12f98:	add	r2, sp, #12
   12f9c:	mov	r1, #4
   12fa0:	add	r0, sp, #8
   12fa4:	bl	10aac <utf8proc_iterate@plt>
   12fa8:	cmp	r4, r0
   12fac:	bne	13190 <error@@Base+0x8c4>
   12fb0:	ldr	r4, [sp, #12]
   12fb4:	mov	r1, #16
   12fb8:	mov	r0, #1
   12fbc:	bl	1290c <error@@Base+0x40>
   12fc0:	mov	r3, r0
   12fc4:	mov	r2, #0
   12fc8:	mov	r1, r0
   12fcc:	mov	r0, r9
   12fd0:	strb	r2, [r3, #8]
   12fd4:	str	r4, [r3, #12]
   12fd8:	bl	13684 <error@@Base+0xdb8>
   12fdc:	mov	r0, r6
   12fe0:	bl	10b90 <getc@plt>
   12fe4:	cmn	r0, #1
   12fe8:	bne	12f60 <error@@Base+0x694>
   12fec:	b	12ed8 <error@@Base+0x60c>
   12ff0:	ldrb	r3, [fp, #10]
   12ff4:	cmp	r3, #0
   12ff8:	beq	13028 <error@@Base+0x75c>
   12ffc:	ldr	r3, [sp, #4]
   13000:	cmp	r3, #0
   13004:	ldrne	r4, [r3, #4]
   13008:	ldreq	r4, [r9]
   1300c:	b	13020 <error@@Base+0x754>
   13010:	ldr	r0, [r4, #12]
   13014:	bl	10a7c <utf8proc_tolower@plt>
   13018:	str	r0, [r4, #12]
   1301c:	ldr	r4, [r4, #4]
   13020:	cmp	r4, #0
   13024:	bne	13010 <error@@Base+0x744>
   13028:	add	sp, sp, #116	; 0x74
   1302c:	ldrd	r4, [sp]
   13030:	ldrd	r6, [sp, #8]
   13034:	ldrd	r8, [sp, #16]
   13038:	ldrd	sl, [sp, #24]
   1303c:	add	sp, sp, #32
   13040:	pop	{pc}		; (ldr pc, [sp], #4)
   13044:	cmp	r3, #10
   13048:	movne	r2, #0
   1304c:	andeq	r2, r2, #1
   13050:	cmp	r2, #0
   13054:	bne	130cc <error@@Base+0x800>
   13058:	subs	r5, r3, #10
   1305c:	movne	r5, #1
   13060:	subs	r6, r4, #0
   13064:	beq	12ff0 <error@@Base+0x724>
   13068:	eor	r2, r5, #1
   1306c:	ldr	r4, [r6, #4]
   13070:	ldr	r3, [r6, #12]
   13074:	cmp	r3, #32
   13078:	bne	13044 <error@@Base+0x778>
   1307c:	cmp	r4, #0
   13080:	moveq	r2, #1
   13084:	cmp	r2, #0
   13088:	bne	1309c <error@@Base+0x7d0>
   1308c:	ldr	r2, [r4, #12]
   13090:	cmp	r2, #10
   13094:	cmpne	r2, #32
   13098:	bne	13058 <error@@Base+0x78c>
   1309c:	cmp	r4, #0
   130a0:	movne	r3, r5
   130a4:	moveq	r3, #0
   130a8:	cmp	r3, #0
   130ac:	beq	130cc <error@@Base+0x800>
   130b0:	ldr	r3, [r4, #12]
   130b4:	cmp	r3, #32
   130b8:	bne	130cc <error@@Base+0x800>
   130bc:	ldrb	r3, [r4, #8]
   130c0:	ldrb	r2, [r6, #8]
   130c4:	orr	r3, r3, r2
   130c8:	strb	r3, [r4, #8]
   130cc:	mov	r0, r9
   130d0:	mov	r1, r6
   130d4:	bl	1378c <error@@Base+0xec0>
   130d8:	mov	r0, r6
   130dc:	bl	10a28 <free@plt>
   130e0:	b	13060 <error@@Base+0x794>
   130e4:	cmp	r4, #160	; 0xa0
   130e8:	bne	12f48 <error@@Base+0x67c>
   130ec:	b	12f58 <error@@Base+0x68c>
   130f0:	mov	r2, r0
   130f4:	mov	r1, #99	; 0x63
   130f8:	add	r0, sp, #12
   130fc:	bl	10a40 <fgets@plt>
   13100:	cmp	r0, #0
   13104:	beq	13124 <error@@Base+0x858>
   13108:	movw	r1, #28956	; 0x711c
   1310c:	movt	r1, #1
   13110:	mov	r2, #51	; 0x33
   13114:	add	r0, sp, #12
   13118:	bl	10b78 <strncmp@plt>
   1311c:	subs	r4, r0, #0
   13120:	beq	13138 <error@@Base+0x86c>
   13124:	mov	r0, r6
   13128:	bl	10a64 <rewind@plt>
   1312c:	mov	r3, #0
   13130:	strb	r3, [fp, #11]
   13134:	b	12dfc <error@@Base+0x530>
   13138:	movw	r5, #29012	; 0x7154
   1313c:	movt	r5, #1
   13140:	mov	r2, r6
   13144:	mov	r1, #99	; 0x63
   13148:	add	r0, sp, #12
   1314c:	bl	10a40 <fgets@plt>
   13150:	cmp	r0, #0
   13154:	beq	1317c <error@@Base+0x8b0>
   13158:	mov	r1, r5
   1315c:	add	r0, sp, #12
   13160:	bl	109f8 <strcmp@plt>
   13164:	cmp	r0, #0
   13168:	bne	13140 <error@@Base+0x874>
   1316c:	cmp	r4, #0
   13170:	bne	1317c <error@@Base+0x8b0>
   13174:	mov	r4, #1
   13178:	b	13140 <error@@Base+0x874>
   1317c:	mov	r3, #1
   13180:	b	13130 <error@@Base+0x864>
   13184:	movw	r0, #29068	; 0x718c
   13188:	movt	r0, #1
   1318c:	bl	128cc <error@@Base>
   13190:	bl	10b60 <utf8proc_errmsg@plt>
   13194:	bl	128cc <error@@Base>
   13198:	movw	r0, #29092	; 0x71a4
   1319c:	movt	r0, #1
   131a0:	bl	128cc <error@@Base>
   131a4:	movw	r1, #28928	; 0x7100
   131a8:	movt	r1, #1
   131ac:	movw	r0, #28940	; 0x710c
   131b0:	movt	r0, #1
   131b4:	bl	12968 <error@@Base+0x9c>
   131b8:	str	r4, [sp, #-8]!
   131bc:	str	lr, [sp, #4]
   131c0:	bl	10a4c <utf8proc_encode_char@plt>
   131c4:	cmp	r0, #0
   131c8:	ble	131dc <error@@Base+0x910>
   131cc:	ldr	r4, [sp]
   131d0:	add	sp, sp, #4
   131d4:	sxtb	r0, r0
   131d8:	pop	{pc}		; (ldr pc, [sp], #4)
   131dc:	movw	r0, #29116	; 0x71bc
   131e0:	movt	r0, #1
   131e4:	bl	128cc <error@@Base>
   131e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   131ec:	uxtb	r5, r0
   131f0:	cmp	r5, #0
   131f4:	strd	r6, [sp, #8]
   131f8:	mov	r6, r1
   131fc:	mov	r7, r2
   13200:	moveq	r4, r2
   13204:	str	r8, [sp, #16]
   13208:	uxtb	r8, r3
   1320c:	str	lr, [sp, #20]
   13210:	bne	13320 <error@@Base+0xa54>
   13214:	cmp	r6, #10
   13218:	bne	13250 <error@@Base+0x984>
   1321c:	cmp	r8, #0
   13220:	movw	r2, #15460	; 0x3c64
   13224:	movt	r2, #1
   13228:	movw	r1, #29140	; 0x71d4
   1322c:	movt	r1, #1
   13230:	mov	r0, r4
   13234:	ldrd	r4, [sp]
   13238:	moveq	r1, r2
   1323c:	ldrd	r6, [sp, #8]
   13240:	ldr	r8, [sp, #16]
   13244:	ldr	lr, [sp, #20]
   13248:	add	sp, sp, #24
   1324c:	b	10b54 <sprintf@plt>
   13250:	mov	r0, r6
   13254:	bl	10a34 <utf8proc_get_property@plt>
   13258:	cmp	r6, #32
   1325c:	beq	1327c <error@@Base+0x9b0>
   13260:	ldrsh	r3, [r0]
   13264:	cmp	r3, #0
   13268:	ble	132f0 <error@@Base+0xa24>
   1326c:	cmp	r3, #22
   13270:	ble	1327c <error@@Base+0x9b0>
   13274:	cmp	r3, #29
   13278:	bne	132f0 <error@@Base+0xa24>
   1327c:	mov	r0, r6
   13280:	bl	10b00 <utf8proc_category@plt>
   13284:	sub	r0, r0, #6
   13288:	cmp	r0, #2
   1328c:	bhi	132b4 <error@@Base+0x9e8>
   13290:	mov	r1, r4
   13294:	movw	r0, #9676	; 0x25cc
   13298:	bl	10a4c <utf8proc_encode_char@plt>
   1329c:	cmp	r0, #0
   132a0:	ble	13340 <error@@Base+0xa74>
   132a4:	sxtb	r0, r0
   132a8:	add	r0, r5, r0
   132ac:	sxth	r5, r0
   132b0:	add	r4, r7, r5
   132b4:	mov	r1, r4
   132b8:	mov	r0, r6
   132bc:	bl	10a4c <utf8proc_encode_char@plt>
   132c0:	cmp	r0, #0
   132c4:	ble	13340 <error@@Base+0xa74>
   132c8:	sxtb	r0, r0
   132cc:	mov	r3, #0
   132d0:	add	r0, r5, r0
   132d4:	sxth	r0, r0
   132d8:	strb	r3, [r7, r0]
   132dc:	ldrd	r4, [sp]
   132e0:	ldrd	r6, [sp, #8]
   132e4:	ldr	r8, [sp, #16]
   132e8:	add	sp, sp, #20
   132ec:	pop	{pc}		; (ldr pc, [sp], #4)
   132f0:	cmp	r6, #255	; 0xff
   132f4:	bls	1334c <error@@Base+0xa80>
   132f8:	movw	r1, #29156	; 0x71e4
   132fc:	movt	r1, #1
   13300:	mov	r2, r6
   13304:	mov	r0, r4
   13308:	ldrd	r4, [sp]
   1330c:	ldrd	r6, [sp, #8]
   13310:	ldr	r8, [sp, #16]
   13314:	ldr	lr, [sp, #20]
   13318:	add	sp, sp, #24
   1331c:	b	10b54 <sprintf@plt>
   13320:	mov	r1, r2
   13324:	mov	r0, #94	; 0x5e
   13328:	bl	10a4c <utf8proc_encode_char@plt>
   1332c:	subs	r4, r0, #0
   13330:	sxtbgt	r4, r4
   13334:	sxthgt	r5, r4
   13338:	addgt	r4, r7, r4
   1333c:	bgt	13214 <error@@Base+0x948>
   13340:	movw	r0, #29116	; 0x71bc
   13344:	movt	r0, #1
   13348:	bl	128cc <error@@Base>
   1334c:	movw	r1, #29148	; 0x71dc
   13350:	movt	r1, #1
   13354:	mov	r2, r6
   13358:	mov	r0, r4
   1335c:	b	13308 <error@@Base+0xa3c>
   13360:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13364:	mov	r4, r2
   13368:	mov	r5, r0
   1336c:	mov	r0, r1
   13370:	movw	r1, #15412	; 0x3c34
   13374:	movt	r1, #1
   13378:	strd	r6, [sp, #8]
   1337c:	strd	r8, [sp, #16]
   13380:	strd	sl, [sp, #24]
   13384:	str	lr, [sp, #32]
   13388:	sub	sp, sp, #20
   1338c:	bl	129ac <error@@Base+0xe0>
   13390:	cmp	r4, #0
   13394:	mov	r7, r0
   13398:	beq	133ec <error@@Base+0xb20>
   1339c:	mov	r3, r7
   133a0:	mov	r2, #55	; 0x37
   133a4:	mov	r1, #1
   133a8:	movw	r0, #28956	; 0x711c
   133ac:	movt	r0, #1
   133b0:	bl	10a94 <fwrite@plt>
   133b4:	mov	r3, r7
   133b8:	mov	r2, #55	; 0x37
   133bc:	mov	r1, #1
   133c0:	movw	r0, #29012	; 0x7154
   133c4:	movt	r0, #1
   133c8:	bl	10a94 <fwrite@plt>
   133cc:	mov	r0, r7
   133d0:	blx	r4
   133d4:	movw	r0, #29012	; 0x7154
   133d8:	movt	r0, #1
   133dc:	mov	r3, r7
   133e0:	mov	r2, #55	; 0x37
   133e4:	mov	r1, #1
   133e8:	bl	10a94 <fwrite@plt>
   133ec:	ldr	r4, [r5]
   133f0:	cmp	r4, #0
   133f4:	beq	13544 <error@@Base+0xc78>
   133f8:	movw	sl, #29156	; 0x71e4
   133fc:	movt	sl, #1
   13400:	movw	r9, #29148	; 0x71dc
   13404:	movt	r9, #1
   13408:	movw	r8, #15460	; 0x3c64
   1340c:	movt	r8, #1
   13410:	b	13434 <error@@Base+0xb68>
   13414:	ldrh	r3, [r8]
   13418:	strh	r3, [r6]
   1341c:	mov	r1, r7
   13420:	add	r0, sp, #4
   13424:	bl	10b6c <fputs@plt>
   13428:	ldr	r4, [r4, #4]
   1342c:	cmp	r4, #0
   13430:	beq	13544 <error@@Base+0xc78>
   13434:	ldrb	r3, [r4, #8]
   13438:	ldr	r5, [r4, #12]
   1343c:	cmp	r3, #0
   13440:	moveq	fp, r3
   13444:	addeq	r6, sp, #4
   13448:	bne	134ec <error@@Base+0xc20>
   1344c:	cmp	r5, #10
   13450:	beq	13414 <error@@Base+0xb48>
   13454:	mov	r0, r5
   13458:	bl	10a34 <utf8proc_get_property@plt>
   1345c:	cmp	r5, #32
   13460:	beq	13480 <error@@Base+0xbb4>
   13464:	ldrsh	r3, [r0]
   13468:	cmp	r3, #0
   1346c:	ble	13514 <error@@Base+0xc48>
   13470:	cmp	r3, #22
   13474:	ble	13480 <error@@Base+0xbb4>
   13478:	cmp	r3, #29
   1347c:	bne	13514 <error@@Base+0xc48>
   13480:	mov	r0, r5
   13484:	bl	10b00 <utf8proc_category@plt>
   13488:	sub	r0, r0, #6
   1348c:	cmp	r0, #2
   13490:	bhi	134bc <error@@Base+0xbf0>
   13494:	mov	r1, r6
   13498:	movw	r0, #9676	; 0x25cc
   1349c:	bl	10a4c <utf8proc_encode_char@plt>
   134a0:	subs	r3, r0, #0
   134a4:	ble	13568 <error@@Base+0xc9c>
   134a8:	sxtb	r3, r3
   134ac:	add	r3, fp, r3
   134b0:	sxth	fp, r3
   134b4:	add	r3, sp, #4
   134b8:	add	r6, r3, fp
   134bc:	mov	r1, r6
   134c0:	mov	r0, r5
   134c4:	bl	10a4c <utf8proc_encode_char@plt>
   134c8:	subs	r3, r0, #0
   134cc:	ble	13568 <error@@Base+0xc9c>
   134d0:	sxtb	r3, r3
   134d4:	add	r1, sp, #16
   134d8:	add	r3, fp, r3
   134dc:	mov	r2, #0
   134e0:	sxtah	r3, r1, r3
   134e4:	strb	r2, [r3, #-12]
   134e8:	b	1341c <error@@Base+0xb50>
   134ec:	add	r1, sp, #4
   134f0:	mov	r0, #94	; 0x5e
   134f4:	bl	10a4c <utf8proc_encode_char@plt>
   134f8:	subs	r6, r0, #0
   134fc:	ble	13568 <error@@Base+0xc9c>
   13500:	sxtb	r6, r6
   13504:	add	r3, sp, #4
   13508:	sxth	fp, r6
   1350c:	add	r6, r3, r6
   13510:	b	1344c <error@@Base+0xb80>
   13514:	cmp	r5, #255	; 0xff
   13518:	bhi	13530 <error@@Base+0xc64>
   1351c:	mov	r2, r5
   13520:	mov	r0, r6
   13524:	mov	r1, r9
   13528:	bl	10b54 <sprintf@plt>
   1352c:	b	1341c <error@@Base+0xb50>
   13530:	mov	r2, r5
   13534:	mov	r0, r6
   13538:	mov	r1, sl
   1353c:	bl	10b54 <sprintf@plt>
   13540:	b	1341c <error@@Base+0xb50>
   13544:	mov	r0, r7
   13548:	bl	1272c <__assert_fail@plt+0x1b90>
   1354c:	add	sp, sp, #20
   13550:	ldrd	r4, [sp]
   13554:	ldrd	r6, [sp, #8]
   13558:	ldrd	r8, [sp, #16]
   1355c:	ldrd	sl, [sp, #24]
   13560:	add	sp, sp, #32
   13564:	pop	{pc}		; (ldr pc, [sp], #4)
   13568:	movw	r0, #29116	; 0x71bc
   1356c:	movt	r0, #1
   13570:	bl	128cc <error@@Base>
   13574:	strd	r4, [sp, #-20]!	; 0xffffffec
   13578:	mov	r2, #0
   1357c:	strd	r6, [sp, #8]
   13580:	str	lr, [sp, #16]
   13584:	sub	sp, sp, #12
   13588:	ldrb	r3, [r1]
   1358c:	str	r2, [sp, #4]
   13590:	cmp	r3, r2
   13594:	beq	135fc <error@@Base+0xd30>
   13598:	mov	r4, r1
   1359c:	mov	r6, r0
   135a0:	b	135d4 <error@@Base+0xd08>
   135a4:	ldr	r5, [sp, #4]
   135a8:	bl	1290c <error@@Base+0x40>
   135ac:	mov	r3, r0
   135b0:	mov	r2, #0
   135b4:	mov	r1, r0
   135b8:	mov	r0, r6
   135bc:	strb	r2, [r3, #8]
   135c0:	str	r5, [r3, #12]
   135c4:	bl	13684 <error@@Base+0xdb8>
   135c8:	ldrb	r3, [r4, r7]!
   135cc:	cmp	r3, #0
   135d0:	beq	135fc <error@@Base+0xd30>
   135d4:	mvn	r1, #0
   135d8:	add	r2, sp, #4
   135dc:	mov	r0, r4
   135e0:	bl	10aac <utf8proc_iterate@plt>
   135e4:	subs	r7, r0, #0
   135e8:	mov	r1, #16
   135ec:	mov	r0, #1
   135f0:	bgt	135a4 <error@@Base+0xcd8>
   135f4:	mov	r0, #0
   135f8:	b	13600 <error@@Base+0xd34>
   135fc:	mov	r0, #1
   13600:	add	sp, sp, #12
   13604:	ldrd	r4, [sp]
   13608:	ldrd	r6, [sp, #8]
   1360c:	add	sp, sp, #16
   13610:	pop	{pc}		; (ldr pc, [sp], #4)
   13614:	mov	r3, #0
   13618:	str	r3, [r0]
   1361c:	str	r3, [r0, #4]
   13620:	str	r3, [r0, #8]
   13624:	str	r3, [r0, #12]
   13628:	bx	lr
   1362c:	ldr	r3, [r0]
   13630:	mov	r2, #0
   13634:	str	r4, [sp, #-8]!
   13638:	mov	r4, r0
   1363c:	str	lr, [sp, #4]
   13640:	cmp	r3, r2
   13644:	strd	r2, [r1]
   13648:	str	r1, [r0]
   1364c:	streq	r1, [r0, #4]
   13650:	ldr	r0, [r0, #8]
   13654:	strne	r1, [r3]
   13658:	cmp	r0, #0
   1365c:	beq	1366c <error@@Base+0xda0>
   13660:	bl	10a28 <free@plt>
   13664:	mov	r3, #0
   13668:	str	r3, [r4, #8]
   1366c:	ldr	r3, [r4, #12]
   13670:	add	r3, r3, #1
   13674:	str	r3, [r4, #12]
   13678:	ldr	r4, [sp]
   1367c:	add	sp, sp, #4
   13680:	pop	{pc}		; (ldr pc, [sp], #4)
   13684:	ldr	r3, [r0, #4]
   13688:	mov	r2, #0
   1368c:	str	r4, [sp, #-8]!
   13690:	mov	r4, r0
   13694:	str	lr, [sp, #4]
   13698:	cmp	r3, r2
   1369c:	str	r3, [r1]
   136a0:	str	r2, [r1, #4]
   136a4:	streq	r1, [r0]
   136a8:	ldr	r0, [r0, #8]
   136ac:	strne	r1, [r3, #4]
   136b0:	str	r1, [r4, #4]
   136b4:	cmp	r0, #0
   136b8:	beq	136c8 <error@@Base+0xdfc>
   136bc:	bl	10a28 <free@plt>
   136c0:	mov	r3, #0
   136c4:	str	r3, [r4, #8]
   136c8:	ldr	r3, [r4, #12]
   136cc:	add	r3, r3, #1
   136d0:	str	r3, [r4, #12]
   136d4:	ldr	r4, [sp]
   136d8:	add	sp, sp, #4
   136dc:	pop	{pc}		; (ldr pc, [sp], #4)
   136e0:	ldr	r3, [r2]
   136e4:	str	r4, [sp, #-8]!
   136e8:	mov	r4, r0
   136ec:	str	lr, [sp, #4]
   136f0:	cmp	r3, #0
   136f4:	str	r3, [r1]
   136f8:	str	r2, [r1, #4]
   136fc:	streq	r1, [r0]
   13700:	ldr	r0, [r0, #8]
   13704:	strne	r1, [r3, #4]
   13708:	str	r1, [r2]
   1370c:	cmp	r0, #0
   13710:	beq	13720 <error@@Base+0xe54>
   13714:	bl	10a28 <free@plt>
   13718:	mov	r3, #0
   1371c:	str	r3, [r4, #8]
   13720:	ldr	r3, [r4, #12]
   13724:	add	r3, r3, #1
   13728:	str	r3, [r4, #12]
   1372c:	ldr	r4, [sp]
   13730:	add	sp, sp, #4
   13734:	pop	{pc}		; (ldr pc, [sp], #4)
   13738:	ldr	r3, [r1, #4]
   1373c:	str	r4, [sp, #-8]!
   13740:	mov	r4, r0
   13744:	str	lr, [sp, #4]
   13748:	cmp	r3, #0
   1374c:	stm	r2, {r1, r3}
   13750:	str	r2, [r1, #4]
   13754:	streq	r2, [r0, #4]
   13758:	ldr	r0, [r0, #8]
   1375c:	strne	r2, [r3]
   13760:	cmp	r0, #0
   13764:	beq	13774 <error@@Base+0xea8>
   13768:	bl	10a28 <free@plt>
   1376c:	mov	r3, #0
   13770:	str	r3, [r4, #8]
   13774:	ldr	r3, [r4, #12]
   13778:	add	r3, r3, #1
   1377c:	str	r3, [r4, #12]
   13780:	ldr	r4, [sp]
   13784:	add	sp, sp, #4
   13788:	pop	{pc}		; (ldr pc, [sp], #4)
   1378c:	ldrd	r2, [r1]
   13790:	strd	r4, [sp, #-16]!
   13794:	mov	r4, r0
   13798:	mov	r5, #0
   1379c:	str	r6, [sp, #8]
   137a0:	str	lr, [sp, #12]
   137a4:	cmp	r2, #0
   137a8:	strne	r3, [r2, #4]
   137ac:	ldrne	r3, [r1, #4]
   137b0:	streq	r3, [r0]
   137b4:	cmp	r3, #0
   137b8:	streq	r2, [r0, #4]
   137bc:	ldr	r0, [r0, #8]
   137c0:	strne	r2, [r3]
   137c4:	str	r5, [r1]
   137c8:	str	r5, [r1, #4]
   137cc:	cmp	r0, r5
   137d0:	beq	137dc <error@@Base+0xf10>
   137d4:	bl	10a28 <free@plt>
   137d8:	str	r5, [r4, #8]
   137dc:	ldr	r3, [r4, #12]
   137e0:	ldr	r6, [sp, #8]
   137e4:	sub	r3, r3, #1
   137e8:	str	r3, [r4, #12]
   137ec:	ldrd	r4, [sp]
   137f0:	add	sp, sp, #12
   137f4:	pop	{pc}		; (ldr pc, [sp], #4)
   137f8:	ldr	r3, [r0, #8]
   137fc:	cmp	r3, #0
   13800:	bxne	lr
   13804:	ldr	r3, [r0, #12]
   13808:	cmp	r3, #0
   1380c:	bxeq	lr
   13810:	mov	r1, #4
   13814:	str	r4, [sp, #-8]!
   13818:	mov	r4, r0
   1381c:	mov	r0, r3
   13820:	str	lr, [sp, #4]
   13824:	bl	1290c <error@@Base+0x40>
   13828:	ldr	r3, [r4]
   1382c:	str	r0, [r4, #8]
   13830:	cmp	r3, #0
   13834:	beq	1384c <error@@Base+0xf80>
   13838:	sub	r0, r0, #4
   1383c:	str	r3, [r0, #4]!
   13840:	ldr	r3, [r3, #4]
   13844:	cmp	r3, #0
   13848:	bne	1383c <error@@Base+0xf70>
   1384c:	ldr	r4, [sp]
   13850:	add	sp, sp, #4
   13854:	pop	{pc}		; (ldr pc, [sp], #4)
   13858:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1385c:	ldr	r4, [r0]
   13860:	strd	r6, [sp, #8]
   13864:	str	r8, [sp, #16]
   13868:	str	lr, [sp, #20]
   1386c:	cmp	r4, #0
   13870:	beq	138f0 <error@@Base+0x1024>
   13874:	mov	r7, r1
   13878:	mov	r5, r0
   1387c:	mov	r6, #0
   13880:	b	138b0 <error@@Base+0xfe4>
   13884:	mov	r0, r3
   13888:	bl	10a28 <free@plt>
   1388c:	ldr	r3, [r5, #12]
   13890:	mov	r0, r4
   13894:	str	r6, [r5, #8]
   13898:	sub	r3, r3, #1
   1389c:	str	r3, [r5, #12]
   138a0:	blx	r7
   138a4:	ldr	r4, [r5]
   138a8:	cmp	r4, #0
   138ac:	beq	138f0 <error@@Base+0x1024>
   138b0:	ldrd	r2, [r4]
   138b4:	mov	r0, r4
   138b8:	cmp	r2, #0
   138bc:	strne	r3, [r2, #4]
   138c0:	ldrne	r3, [r4, #4]
   138c4:	streq	r3, [r5]
   138c8:	cmp	r3, #0
   138cc:	strne	r2, [r3]
   138d0:	ldr	r3, [r5, #8]
   138d4:	streq	r2, [r5, #4]
   138d8:	str	r6, [r4]
   138dc:	str	r6, [r4, #4]
   138e0:	cmp	r3, #0
   138e4:	bne	13884 <error@@Base+0xfb8>
   138e8:	ldr	r3, [r5, #12]
   138ec:	b	13898 <error@@Base+0xfcc>
   138f0:	ldrd	r4, [sp]
   138f4:	ldrd	r6, [sp, #8]
   138f8:	ldr	r8, [sp, #16]
   138fc:	add	sp, sp, #20
   13900:	pop	{pc}		; (ldr pc, [sp], #4)
   13904:	lsl	r3, r1, #2
   13908:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1390c:	strd	r6, [sp, #8]
   13910:	strd	r8, [sp, #16]
   13914:	mov	r8, r0
   13918:	strd	sl, [sp, #24]
   1391c:	movw	sl, #33088	; 0x8140
   13920:	movt	sl, #2
   13924:	str	lr, [sp, #32]
   13928:	sub	sp, sp, #12
   1392c:	str	r1, [sp]
   13930:	str	r3, [sp, #4]
   13934:	ldr	r3, [sp]
   13938:	ldr	r1, [sl]
   1393c:	cmp	r8, r3
   13940:	movlt	r4, r3
   13944:	movlt	r7, r8
   13948:	ldr	r5, [r1, r8, lsl #2]
   1394c:	bge	13a6c <error@@Base+0x11a0>
   13950:	mov	r0, r5
   13954:	lsl	fp, r4, #2
   13958:	ldr	r1, [r1, r4, lsl #2]
   1395c:	ldr	r2, [sl, #4]
   13960:	blx	r2
   13964:	cmp	r0, #0
   13968:	bge	139fc <error@@Base+0x1130>
   1396c:	sub	r4, r4, #1
   13970:	ldr	r1, [sl]
   13974:	cmp	r7, r4
   13978:	lslge	fp, r4, #2
   1397c:	blt	13950 <error@@Base+0x1084>
   13980:	cmp	r4, r7
   13984:	add	r6, r1, fp
   13988:	beq	13a0c <error@@Base+0x1140>
   1398c:	ldr	r0, [r1, fp]
   13990:	add	r9, r7, #1
   13994:	lsl	r6, r7, #2
   13998:	cmp	r4, r9
   1399c:	str	r0, [r1, r7, lsl #2]
   139a0:	bgt	139b8 <error@@Base+0x10ec>
   139a4:	b	13a4c <error@@Base+0x1180>
   139a8:	add	r9, r9, #1
   139ac:	ldr	r1, [sl]
   139b0:	cmp	r4, r9
   139b4:	beq	13a04 <error@@Base+0x1138>
   139b8:	mov	r0, r5
   139bc:	ldr	r1, [r1, r9, lsl #2]
   139c0:	lsl	r6, r9, #2
   139c4:	ldr	r7, [sl, #4]
   139c8:	blx	r7
   139cc:	cmp	r0, #0
   139d0:	bgt	139a8 <error@@Base+0x10dc>
   139d4:	ldr	r1, [sl]
   139d8:	mov	r7, r9
   139dc:	add	r6, r1, r6
   139e0:	ldr	r0, [r6]
   139e4:	sub	r4, r4, #1
   139e8:	cmp	r4, r9
   139ec:	str	r0, [r1, fp]
   139f0:	bgt	13950 <error@@Base+0x1084>
   139f4:	add	r6, r1, r4, lsl #2
   139f8:	b	13a10 <error@@Base+0x1144>
   139fc:	ldr	r1, [sl]
   13a00:	b	13980 <error@@Base+0x10b4>
   13a04:	add	r6, r1, fp
   13a08:	mov	r7, r4
   13a0c:	mov	r4, r7
   13a10:	sub	r1, r4, #1
   13a14:	str	r5, [r6]
   13a18:	cmp	r8, r1
   13a1c:	blt	13a60 <error@@Base+0x1194>
   13a20:	ldr	r3, [sp]
   13a24:	add	r8, r7, #1
   13a28:	cmp	r8, r3
   13a2c:	blt	13934 <error@@Base+0x1068>
   13a30:	add	sp, sp, #12
   13a34:	ldrd	r4, [sp]
   13a38:	ldrd	r6, [sp, #8]
   13a3c:	ldrd	r8, [sp, #16]
   13a40:	ldrd	sl, [sp, #24]
   13a44:	add	sp, sp, #32
   13a48:	pop	{pc}		; (ldr pc, [sp], #4)
   13a4c:	add	r6, r6, #4
   13a50:	add	r6, r1, r6
   13a54:	beq	13a08 <error@@Base+0x113c>
   13a58:	mov	r7, r9
   13a5c:	b	139e0 <error@@Base+0x1114>
   13a60:	mov	r0, r8
   13a64:	bl	13904 <error@@Base+0x1038>
   13a68:	b	13a20 <error@@Base+0x1154>
   13a6c:	mov	r4, r3
   13a70:	ldr	r3, [sp, #4]
   13a74:	mov	r7, r8
   13a78:	add	r6, r1, r3
   13a7c:	b	13a10 <error@@Base+0x1144>
   13a80:	cmp	r0, #1
   13a84:	mov	ip, r1
   13a88:	ble	13aa8 <error@@Base+0x11dc>
   13a8c:	movw	r3, #33088	; 0x8140
   13a90:	movt	r3, #2
   13a94:	sub	r1, r0, #1
   13a98:	mov	r0, #0
   13a9c:	str	ip, [r3]
   13aa0:	str	r2, [r3, #4]
   13aa4:	b	13904 <error@@Base+0x1038>
   13aa8:	bx	lr
   13aac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ab0:	mov	r7, r0
   13ab4:	ldr	r6, [pc, #72]	; 13b04 <error@@Base+0x1238>
   13ab8:	ldr	r5, [pc, #72]	; 13b08 <error@@Base+0x123c>
   13abc:	add	r6, pc, r6
   13ac0:	add	r5, pc, r5
   13ac4:	sub	r6, r6, r5
   13ac8:	mov	r8, r1
   13acc:	mov	r9, r2
   13ad0:	bl	109cc <calloc@plt-0x20>
   13ad4:	asrs	r6, r6, #2
   13ad8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13adc:	mov	r4, #0
   13ae0:	add	r4, r4, #1
   13ae4:	ldr	r3, [r5], #4
   13ae8:	mov	r2, r9
   13aec:	mov	r1, r8
   13af0:	mov	r0, r7
   13af4:	blx	r3
   13af8:	cmp	r6, r4
   13afc:	bne	13ae0 <error@@Base+0x1214>
   13b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b04:	andeq	r4, r1, r0, asr #6
   13b08:	andeq	r4, r1, r8, lsr r3
   13b0c:	bx	lr

Disassembly of section .fini:

00013b10 <.fini>:
   13b10:	push	{r3, lr}
   13b14:	pop	{r3, pc}
