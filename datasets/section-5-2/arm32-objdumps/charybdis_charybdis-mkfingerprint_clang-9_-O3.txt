
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104ac <.init>:
   104ac:	push	{r3, lr}
   104b0:	bl	10580 <strcmp@plt+0x48>
   104b4:	pop	{r3, pc}

Disassembly of section .plt:

000104b8 <abort@plt-0x14>:
   104b8:	push	{lr}		; (str lr, [sp, #-4]!)
   104bc:	ldr	lr, [pc, #4]	; 104c8 <abort@plt-0x4>
   104c0:	add	lr, pc, lr
   104c4:	ldr	pc, [lr, #8]!
   104c8:	andeq	r0, r1, r8, lsr fp

000104cc <abort@plt>:
   104cc:	add	ip, pc, #0, 12
   104d0:	add	ip, ip, #16, 20	; 0x10000
   104d4:	ldr	pc, [ip, #2872]!	; 0xb38

000104d8 <__libc_start_main@plt>:
   104d8:	add	ip, pc, #0, 12
   104dc:	add	ip, ip, #16, 20	; 0x10000
   104e0:	ldr	pc, [ip, #2864]!	; 0xb30

000104e4 <__gmon_start__@plt>:
   104e4:	add	ip, pc, #0, 12
   104e8:	add	ip, ip, #16, 20	; 0x10000
   104ec:	ldr	pc, [ip, #2856]!	; 0xb28

000104f0 <putchar@plt>:
   104f0:	add	ip, pc, #0, 12
   104f4:	add	ip, ip, #16, 20	; 0x10000
   104f8:	ldr	pc, [ip, #2848]!	; 0xb20

000104fc <perror@plt>:
   104fc:	add	ip, pc, #0, 12
   10500:	add	ip, ip, #16, 20	; 0x10000
   10504:	ldr	pc, [ip, #2840]!	; 0xb18

00010508 <printf@plt>:
   10508:	add	ip, pc, #0, 12
   1050c:	add	ip, ip, #16, 20	; 0x10000
   10510:	ldr	pc, [ip, #2832]!	; 0xb10

00010514 <fwrite@plt>:
   10514:	add	ip, pc, #0, 12
   10518:	add	ip, ip, #16, 20	; 0x10000
   1051c:	ldr	pc, [ip, #2824]!	; 0xb08

00010520 <puts@plt>:
   10520:	add	ip, pc, #0, 12
   10524:	add	ip, ip, #16, 20	; 0x10000
   10528:	ldr	pc, [ip, #2816]!	; 0xb00

0001052c <rb_get_ssl_certfp_file@plt>:
   1052c:	add	ip, pc, #0, 12
   10530:	add	ip, ip, #16, 20	; 0x10000
   10534:	ldr	pc, [ip, #2808]!	; 0xaf8

00010538 <strcmp@plt>:
   10538:	add	ip, pc, #0, 12
   1053c:	add	ip, ip, #16, 20	; 0x10000
   10540:	ldr	pc, [ip, #2800]!	; 0xaf0

Disassembly of section .text:

00010544 <.text>:
   10544:	mov	fp, #0
   10548:	mov	lr, #0
   1054c:	pop	{r1}		; (ldr r1, [sp], #4)
   10550:	mov	r2, sp
   10554:	push	{r2}		; (str r2, [sp, #-4]!)
   10558:	push	{r0}		; (str r0, [sp, #-4]!)
   1055c:	ldr	ip, [pc, #16]	; 10574 <strcmp@plt+0x3c>
   10560:	push	{ip}		; (str ip, [sp, #-4]!)
   10564:	ldr	r0, [pc, #12]	; 10578 <strcmp@plt+0x40>
   10568:	ldr	r3, [pc, #12]	; 1057c <strcmp@plt+0x44>
   1056c:	bl	104d8 <__libc_start_main@plt>
   10570:	bl	104cc <abort@plt>
   10574:	andeq	r0, r1, ip, lsl #17
   10578:	andeq	r0, r1, r4, lsr r6
   1057c:	andeq	r0, r1, ip, lsr #16
   10580:	ldr	r3, [pc, #20]	; 1059c <strcmp@plt+0x64>
   10584:	ldr	r2, [pc, #20]	; 105a0 <strcmp@plt+0x68>
   10588:	add	r3, pc, r3
   1058c:	ldr	r2, [r3, r2]
   10590:	cmp	r2, #0
   10594:	bxeq	lr
   10598:	b	104e4 <__gmon_start__@plt>
   1059c:	andeq	r0, r1, r0, ror sl
   105a0:	andeq	r0, r0, r4, lsr r0
   105a4:	ldr	r0, [pc, #24]	; 105c4 <strcmp@plt+0x8c>
   105a8:	ldr	r3, [pc, #24]	; 105c8 <strcmp@plt+0x90>
   105ac:	cmp	r3, r0
   105b0:	bxeq	lr
   105b4:	ldr	r3, [pc, #16]	; 105cc <strcmp@plt+0x94>
   105b8:	cmp	r3, #0
   105bc:	bxeq	lr
   105c0:	bx	r3
   105c4:	andeq	r1, r2, r0, asr #32
   105c8:	andeq	r1, r2, r0, asr #32
   105cc:	andeq	r0, r0, r0
   105d0:	ldr	r0, [pc, #36]	; 105fc <strcmp@plt+0xc4>
   105d4:	ldr	r1, [pc, #36]	; 10600 <strcmp@plt+0xc8>
   105d8:	sub	r1, r1, r0
   105dc:	asr	r1, r1, #2
   105e0:	add	r1, r1, r1, lsr #31
   105e4:	asrs	r1, r1, #1
   105e8:	bxeq	lr
   105ec:	ldr	r3, [pc, #16]	; 10604 <strcmp@plt+0xcc>
   105f0:	cmp	r3, #0
   105f4:	bxeq	lr
   105f8:	bx	r3
   105fc:	andeq	r1, r2, r0, asr #32
   10600:	andeq	r1, r2, r0, asr #32
   10604:	andeq	r0, r0, r0
   10608:	push	{r4, lr}
   1060c:	ldr	r4, [pc, #24]	; 1062c <strcmp@plt+0xf4>
   10610:	ldrb	r3, [r4]
   10614:	cmp	r3, #0
   10618:	popne	{r4, pc}
   1061c:	bl	105a4 <strcmp@plt+0x6c>
   10620:	mov	r3, #1
   10624:	strb	r3, [r4]
   10628:	pop	{r4, pc}
   1062c:	andeq	r1, r2, r4, asr #32
   10630:	b	105d0 <strcmp@plt+0x98>
   10634:	push	{r4, r5, r6, r7, fp, lr}
   10638:	add	fp, sp, #16
   1063c:	sub	sp, sp, #72	; 0x48
   10640:	vmov.i32	q8, #0	; 0x00000000
   10644:	mov	r6, sp
   10648:	mov	r2, #64	; 0x40
   1064c:	mov	r7, #0
   10650:	cmp	r0, #3
   10654:	mov	r3, r6
   10658:	vst1.64	{d16-d17}, [r3], r2
   1065c:	add	r2, r6, #48	; 0x30
   10660:	vst1.64	{d16-d17}, [r2]
   10664:	add	r2, r6, #32
   10668:	strb	r7, [r3]
   1066c:	vst1.64	{d16-d17}, [r2]
   10670:	add	r2, r6, #16
   10674:	vst1.64	{d16-d17}, [r2]
   10678:	bne	10724 <strcmp@plt+0x1ec>
   1067c:	ldr	r6, [r1, #4]
   10680:	ldr	r4, [r1, #8]
   10684:	movw	r1, #2204	; 0x89c
   10688:	movt	r1, #1
   1068c:	mov	r0, r6
   10690:	bl	10538 <strcmp@plt>
   10694:	movw	r5, #2285	; 0x8ed
   10698:	cmp	r0, #0
   1069c:	movt	r5, #1
   106a0:	beq	10778 <strcmp@plt+0x240>
   106a4:	movw	r1, #2214	; 0x8a6
   106a8:	mov	r0, r6
   106ac:	movt	r1, #1
   106b0:	bl	10538 <strcmp@plt>
   106b4:	cmp	r0, #0
   106b8:	beq	1074c <strcmp@plt+0x214>
   106bc:	movw	r1, #2385	; 0x951
   106c0:	mov	r0, r6
   106c4:	movt	r1, #1
   106c8:	bl	10538 <strcmp@plt>
   106cc:	cmp	r0, #0
   106d0:	beq	10754 <strcmp@plt+0x21c>
   106d4:	movw	r1, #2209	; 0x8a1
   106d8:	mov	r0, r6
   106dc:	movt	r1, #1
   106e0:	bl	10538 <strcmp@plt>
   106e4:	cmp	r0, #0
   106e8:	beq	1075c <strcmp@plt+0x224>
   106ec:	movw	r1, #2380	; 0x94c
   106f0:	mov	r0, r6
   106f4:	movt	r1, #1
   106f8:	bl	10538 <strcmp@plt>
   106fc:	cmp	r0, #0
   10700:	beq	1076c <strcmp@plt+0x234>
   10704:	movw	r0, #2251	; 0x8cb
   10708:	mov	r1, r6
   1070c:	movt	r0, #1
   10710:	bl	10508 <printf@plt>
   10714:	mov	r4, #1
   10718:	mov	r0, r4
   1071c:	sub	sp, fp, #16
   10720:	pop	{r4, r5, r6, r7, fp, pc}
   10724:	movw	r0, #2294	; 0x8f6
   10728:	movt	r0, #1
   1072c:	bl	10520 <puts@plt>
   10730:	movw	r0, #2328	; 0x918
   10734:	movt	r0, #1
   10738:	bl	10520 <puts@plt>
   1073c:	mov	r4, #1
   10740:	mov	r0, r4
   10744:	sub	sp, fp, #16
   10748:	pop	{r4, r5, r6, r7, fp, pc}
   1074c:	mov	r7, #1
   10750:	b	10778 <strcmp@plt+0x240>
   10754:	mov	r7, #2
   10758:	b	10778 <strcmp@plt+0x240>
   1075c:	movw	r5, #2221	; 0x8ad
   10760:	movw	r7, #4097	; 0x1001
   10764:	movt	r5, #1
   10768:	b	10778 <strcmp@plt+0x240>
   1076c:	movw	r5, #2236	; 0x8bc
   10770:	movw	r7, #4098	; 0x1002
   10774:	movt	r5, #1
   10778:	mov	r6, sp
   1077c:	mov	r0, r4
   10780:	mov	r2, r7
   10784:	mov	r1, r6
   10788:	bl	1052c <rb_get_ssl_certfp_file@plt>
   1078c:	cmn	r0, #1
   10790:	ble	107e4 <strcmp@plt+0x2ac>
   10794:	mov	r7, r0
   10798:	cmp	r0, #0
   1079c:	beq	107fc <strcmp@plt+0x2c4>
   107a0:	movw	r0, #2286	; 0x8ee
   107a4:	mov	r1, r5
   107a8:	movt	r0, #1
   107ac:	bl	10508 <printf@plt>
   107b0:	movw	r4, #2289	; 0x8f1
   107b4:	movt	r4, #1
   107b8:	ldrb	r1, [r6], #1
   107bc:	mov	r0, r4
   107c0:	bl	10508 <printf@plt>
   107c4:	subs	r7, r7, #1
   107c8:	bne	107b8 <strcmp@plt+0x280>
   107cc:	mov	r0, #10
   107d0:	bl	104f0 <putchar@plt>
   107d4:	mov	r4, #0
   107d8:	mov	r0, r4
   107dc:	sub	sp, fp, #16
   107e0:	pop	{r4, r5, r6, r7, fp, pc}
   107e4:	mov	r0, r4
   107e8:	bl	104fc <perror@plt>
   107ec:	mov	r4, #1
   107f0:	mov	r0, r4
   107f4:	sub	sp, fp, #16
   107f8:	pop	{r4, r5, r6, r7, fp, pc}
   107fc:	movw	r0, #4160	; 0x1040
   10800:	mov	r1, #14
   10804:	mov	r2, #1
   10808:	mov	r4, #1
   1080c:	movt	r0, #2
   10810:	ldr	r3, [r0]
   10814:	movw	r0, #2271	; 0x8df
   10818:	movt	r0, #1
   1081c:	bl	10514 <fwrite@plt>
   10820:	mov	r0, r4
   10824:	sub	sp, fp, #16
   10828:	pop	{r4, r5, r6, r7, fp, pc}
   1082c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10830:	mov	r7, r0
   10834:	ldr	r6, [pc, #72]	; 10884 <strcmp@plt+0x34c>
   10838:	ldr	r5, [pc, #72]	; 10888 <strcmp@plt+0x350>
   1083c:	add	r6, pc, r6
   10840:	add	r5, pc, r5
   10844:	sub	r6, r6, r5
   10848:	mov	r8, r1
   1084c:	mov	r9, r2
   10850:	bl	104ac <abort@plt-0x20>
   10854:	asrs	r6, r6, #2
   10858:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1085c:	mov	r4, #0
   10860:	add	r4, r4, #1
   10864:	ldr	r3, [r5], #4
   10868:	mov	r2, r9
   1086c:	mov	r1, r8
   10870:	mov	r0, r7
   10874:	blx	r3
   10878:	cmp	r6, r4
   1087c:	bne	10860 <strcmp@plt+0x328>
   10880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10884:			; <UNDEFINED> instruction: 0x000106b0
   10888:	andeq	r0, r1, r8, lsr #13
   1088c:	bx	lr

Disassembly of section .fini:

00010890 <.fini>:
   10890:	push	{r3, lr}
   10894:	pop	{r3, pc}
