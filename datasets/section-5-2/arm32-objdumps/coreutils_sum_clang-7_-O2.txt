
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010ef8 <.init>:
   10ef8:	push	{r3, lr}
   10efc:	bl	1120c <__assert_fail@plt+0x48>
   10f00:	pop	{r3, pc}

Disassembly of section .plt:

00010f04 <fdopen@plt-0x14>:
   10f04:	push	{lr}		; (str lr, [sp, #-4]!)
   10f08:	ldr	lr, [pc, #4]	; 10f14 <fdopen@plt-0x4>
   10f0c:	add	lr, pc, lr
   10f10:	ldr	pc, [lr, #8]!
   10f14:	andeq	r7, r1, ip, ror #1

00010f18 <fdopen@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #236]!	; 0xec

00010f24 <calloc@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #228]!	; 0xe4

00010f30 <fputs_unlocked@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #220]!	; 0xdc

00010f3c <raise@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #212]!	; 0xd4

00010f48 <strcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #204]!	; 0xcc

00010f54 <posix_fadvise64@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #196]!	; 0xc4

00010f60 <fflush@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #188]!	; 0xbc

00010f6c <memmove@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #180]!	; 0xb4

00010f78 <free@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #172]!	; 0xac

00010f84 <_exit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #164]!	; 0xa4

00010f90 <memcpy@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #156]!	; 0x9c

00010f9c <__strtoull_internal@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #148]!	; 0x94

00010fa8 <mbsinit@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #140]!	; 0x8c

00010fb4 <memcmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #132]!	; 0x84

00010fc0 <dcgettext@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #124]!	; 0x7c

00010fcc <realloc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #116]!	; 0x74

00010fd8 <textdomain@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #108]!	; 0x6c

00010fe4 <iswprint@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #100]!	; 0x64

00010ff0 <fwrite@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #92]!	; 0x5c

00010ffc <lseek64@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #84]!	; 0x54

00011008 <__ctype_get_mb_cur_max@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #76]!	; 0x4c

00011014 <__fpending@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #68]!	; 0x44

00011020 <mbrtowc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #60]!	; 0x3c

0001102c <error@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #52]!	; 0x34

00011038 <getenv@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #44]!	; 0x2c

00011044 <malloc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #36]!	; 0x24

00011050 <__libc_start_main@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #28]!

0001105c <__freading@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #20]!

00011068 <__gmon_start__@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #12]!

00011074 <getopt_long@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #4]!

00011080 <__ctype_b_loc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #4092]!	; 0xffc

0001108c <exit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #4084]!	; 0xff4

00011098 <strlen@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #4076]!	; 0xfec

000110a4 <strchr@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b0 <__errno_location@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110bc <__sprintf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110c8 <__cxa_atexit@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d4 <setvbuf@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e0 <memset@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4028]!	; 0xfbc

000110ec <__printf_chk@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4020]!	; 0xfb4

000110f8 <fileno@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4012]!	; 0xfac

00011104 <__fprintf_chk@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011110 <fclose@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3996]!	; 0xf9c

0001111c <fseeko64@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3988]!	; 0xf94

00011128 <fcntl64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3980]!	; 0xf8c

00011134 <__overflow@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3972]!	; 0xf84

00011140 <setlocale@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3964]!	; 0xf7c

0001114c <strrchr@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3956]!	; 0xf74

00011158 <nl_langinfo@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3948]!	; 0xf6c

00011164 <localeconv@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3940]!	; 0xf64

00011170 <clearerr_unlocked@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3932]!	; 0xf5c

0001117c <fopen64@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3924]!	; 0xf54

00011188 <bindtextdomain@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3916]!	; 0xf4c

00011194 <fread_unlocked@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3908]!	; 0xf44

000111a0 <strncmp@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3900]!	; 0xf3c

000111ac <abort@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3892]!	; 0xf34

000111b8 <close@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c4 <__assert_fail@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3876]!	; 0xf24

Disassembly of section .text:

000111d0 <.text>:
   111d0:	mov	fp, #0
   111d4:	mov	lr, #0
   111d8:	pop	{r1}		; (ldr r1, [sp], #4)
   111dc:	mov	r2, sp
   111e0:	push	{r2}		; (str r2, [sp, #-4]!)
   111e4:	push	{r0}		; (str r0, [sp, #-4]!)
   111e8:	ldr	ip, [pc, #16]	; 11200 <__assert_fail@plt+0x3c>
   111ec:	push	{ip}		; (str ip, [sp, #-4]!)
   111f0:	ldr	r0, [pc, #12]	; 11204 <__assert_fail@plt+0x40>
   111f4:	ldr	r3, [pc, #12]	; 11208 <__assert_fail@plt+0x44>
   111f8:	bl	11050 <__libc_start_main@plt>
   111fc:	bl	111ac <abort@plt>
   11200:	andeq	r7, r1, r0, asr r3
   11204:	strdeq	r1, [r1], -ip
   11208:	strdeq	r7, [r1], -r0
   1120c:	ldr	r3, [pc, #20]	; 11228 <__assert_fail@plt+0x64>
   11210:	ldr	r2, [pc, #20]	; 1122c <__assert_fail@plt+0x68>
   11214:	add	r3, pc, r3
   11218:	ldr	r2, [r3, r2]
   1121c:	cmp	r2, #0
   11220:	bxeq	lr
   11224:	b	11068 <__gmon_start__@plt>
   11228:	andeq	r6, r1, r4, ror #27
   1122c:	strdeq	r0, [r0], -r4
   11230:	ldr	r0, [pc, #24]	; 11250 <__assert_fail@plt+0x8c>
   11234:	ldr	r3, [pc, #24]	; 11254 <__assert_fail@plt+0x90>
   11238:	cmp	r3, r0
   1123c:	bxeq	lr
   11240:	ldr	r3, [pc, #16]	; 11258 <__assert_fail@plt+0x94>
   11244:	cmp	r3, #0
   11248:	bxeq	lr
   1124c:	bx	r3
   11250:	andeq	r8, r2, ip, asr #2
   11254:	andeq	r8, r2, ip, asr #2
   11258:	andeq	r0, r0, r0
   1125c:	ldr	r0, [pc, #36]	; 11288 <__assert_fail@plt+0xc4>
   11260:	ldr	r1, [pc, #36]	; 1128c <__assert_fail@plt+0xc8>
   11264:	sub	r1, r1, r0
   11268:	asr	r1, r1, #2
   1126c:	add	r1, r1, r1, lsr #31
   11270:	asrs	r1, r1, #1
   11274:	bxeq	lr
   11278:	ldr	r3, [pc, #16]	; 11290 <__assert_fail@plt+0xcc>
   1127c:	cmp	r3, #0
   11280:	bxeq	lr
   11284:	bx	r3
   11288:	andeq	r8, r2, ip, asr #2
   1128c:	andeq	r8, r2, ip, asr #2
   11290:	andeq	r0, r0, r0
   11294:	push	{r4, lr}
   11298:	ldr	r4, [pc, #24]	; 112b8 <__assert_fail@plt+0xf4>
   1129c:	ldrb	r3, [r4]
   112a0:	cmp	r3, #0
   112a4:	popne	{r4, pc}
   112a8:	bl	11230 <__assert_fail@plt+0x6c>
   112ac:	mov	r3, #1
   112b0:	strb	r3, [r4]
   112b4:	pop	{r4, pc}
   112b8:	andeq	r8, r2, r0, ror r1
   112bc:	b	1125c <__assert_fail@plt+0x98>
   112c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112c4:	add	fp, sp, #28
   112c8:	sub	sp, sp, #4
   112cc:	mov	r7, r0
   112d0:	mov	r0, #32768	; 0x8000
   112d4:	mov	r5, r2
   112d8:	mov	r9, r1
   112dc:	bl	16360 <__assert_fail@plt+0x519c>
   112e0:	cmp	r0, #0
   112e4:	beq	1138c <__assert_fail@plt+0x1c8>
   112e8:	str	r5, [sp]
   112ec:	mov	r4, r0
   112f0:	mov	r5, #0
   112f4:	mov	sl, #0
   112f8:	mov	r6, #0
   112fc:	mov	r1, #0
   11300:	mov	r8, r1
   11304:	add	r0, r4, r1
   11308:	rsb	r2, r1, #32768	; 0x8000
   1130c:	mov	r1, #1
   11310:	mov	r3, r7
   11314:	bl	11194 <fread_unlocked@plt>
   11318:	add	r1, r0, r8
   1131c:	cmp	r1, #32768	; 0x8000
   11320:	beq	1133c <__assert_fail@plt+0x178>
   11324:	ldr	r2, [r7]
   11328:	cmp	r0, #0
   1132c:	beq	11394 <__assert_fail@plt+0x1d0>
   11330:	tst	r2, #16
   11334:	beq	11300 <__assert_fail@plt+0x13c>
   11338:	b	113a0 <__assert_fail@plt+0x1dc>
   1133c:	mov	r0, #0
   11340:	ldrb	r1, [r4, r0]
   11344:	lsr	r2, r5, #1
   11348:	add	r0, r0, #1
   1134c:	add	r2, r2, r5, lsl #15
   11350:	cmp	r0, #32768	; 0x8000
   11354:	add	r1, r2, r1
   11358:	uxth	r5, r1
   1135c:	bcc	11340 <__assert_fail@plt+0x17c>
   11360:	movw	r2, #32768	; 0x8000
   11364:	adds	r0, sl, #32768	; 0x8000
   11368:	mvn	r3, r6
   1136c:	movt	r2, #65535	; 0xffff
   11370:	adc	r1, r6, #0
   11374:	eor	r2, sl, r2
   11378:	mov	sl, r0
   1137c:	mov	r6, r1
   11380:	orrs	r2, r2, r3
   11384:	bne	112fc <__assert_fail@plt+0x138>
   11388:	b	113e0 <__assert_fail@plt+0x21c>
   1138c:	mvn	r7, #0
   11390:	b	11408 <__assert_fail@plt+0x244>
   11394:	mvn	r7, #0
   11398:	tst	r2, #32
   1139c:	bne	11400 <__assert_fail@plt+0x23c>
   113a0:	cmp	r1, #0
   113a4:	beq	113cc <__assert_fail@plt+0x208>
   113a8:	add	r0, r0, r8
   113ac:	mov	r2, r4
   113b0:	ldrb	r7, [r2], #1
   113b4:	lsr	r3, r5, #1
   113b8:	subs	r0, r0, #1
   113bc:	add	r3, r3, r5, lsl #15
   113c0:	add	r3, r3, r7
   113c4:	uxth	r5, r3
   113c8:	bne	113b0 <__assert_fail@plt+0x1ec>
   113cc:	adds	r0, sl, r1
   113d0:	mov	r7, #0
   113d4:	adcs	r1, r6, #0
   113d8:	adcs	r2, r7, #0
   113dc:	beq	113f4 <__assert_fail@plt+0x230>
   113e0:	bl	110b0 <__errno_location@plt>
   113e4:	mov	r1, #75	; 0x4b
   113e8:	mvn	r7, #0
   113ec:	str	r1, [r0]
   113f0:	b	11400 <__assert_fail@plt+0x23c>
   113f4:	ldr	r2, [sp]
   113f8:	str	r5, [r9]
   113fc:	strd	r0, [r2]
   11400:	mov	r0, r4
   11404:	bl	120a0 <__assert_fail@plt+0xedc>
   11408:	mov	r0, r7
   1140c:	sub	sp, fp, #28
   11410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11414:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11418:	add	fp, sp, #28
   1141c:	sub	sp, sp, #20
   11420:	mov	r7, r0
   11424:	mov	r0, #32768	; 0x8000
   11428:	mov	r4, r2
   1142c:	mov	r5, r1
   11430:	bl	16360 <__assert_fail@plt+0x519c>
   11434:	cmp	r0, #0
   11438:	beq	11508 <__assert_fail@plt+0x344>
   1143c:	mov	sl, r0
   11440:	str	r5, [sp, #4]
   11444:	mov	r0, #0
   11448:	add	r9, sp, #12
   1144c:	mov	r6, #0
   11450:	mov	r5, #0
   11454:	mov	r1, #0
   11458:	str	r0, [sp, #8]
   1145c:	mov	r8, r1
   11460:	add	r0, sl, r1
   11464:	rsb	r2, r1, #32768	; 0x8000
   11468:	mov	r1, #1
   1146c:	mov	r3, r7
   11470:	bl	11194 <fread_unlocked@plt>
   11474:	add	r1, r0, r8
   11478:	cmp	r1, #32768	; 0x8000
   1147c:	beq	11498 <__assert_fail@plt+0x2d4>
   11480:	ldr	r2, [r7]
   11484:	cmp	r0, #0
   11488:	beq	11510 <__assert_fail@plt+0x34c>
   1148c:	tst	r2, #16
   11490:	beq	1145c <__assert_fail@plt+0x298>
   11494:	b	1151c <__assert_fail@plt+0x358>
   11498:	mov	r0, #0
   1149c:	vdup.32	q8, r0
   114a0:	vmov.32	d16[0], r5
   114a4:	ldr	r1, [sl, r0]
   114a8:	add	r0, r0, #4
   114ac:	cmp	r0, #32768	; 0x8000
   114b0:	str	r1, [sp, #12]
   114b4:	vld1.32	{d18[0]}, [r9 :32]
   114b8:	vmovl.u8	q9, d18
   114bc:	vmovl.u16	q9, d18
   114c0:	vadd.i32	q8, q8, q9
   114c4:	bne	114a4 <__assert_fail@plt+0x2e0>
   114c8:	ldr	r2, [sp, #8]
   114cc:	vext.8	q9, q8, q8, #8
   114d0:	movw	r3, #32768	; 0x8000
   114d4:	vadd.i32	q8, q8, q9
   114d8:	movt	r3, #65535	; 0xffff
   114dc:	vdup.32	q9, d16[1]
   114e0:	vadd.i32	q8, q8, q9
   114e4:	adds	r0, r2, #32768	; 0x8000
   114e8:	eor	r2, r2, r3
   114ec:	mvn	r3, r6
   114f0:	vmov.32	r5, d16[0]
   114f4:	adc	r1, r6, #0
   114f8:	orrs	r2, r2, r3
   114fc:	mov	r6, r1
   11500:	bne	11454 <__assert_fail@plt+0x290>
   11504:	b	115c4 <__assert_fail@plt+0x400>
   11508:	mvn	r7, #0
   1150c:	b	115fc <__assert_fail@plt+0x438>
   11510:	mvn	r7, #0
   11514:	tst	r2, #32
   11518:	bne	115f4 <__assert_fail@plt+0x430>
   1151c:	cmp	r1, #0
   11520:	beq	115ac <__assert_fail@plt+0x3e8>
   11524:	mov	r7, #0
   11528:	cmp	r1, #3
   1152c:	bls	11590 <__assert_fail@plt+0x3cc>
   11530:	mov	r2, #0
   11534:	bic	r7, r1, #3
   11538:	mov	ip, r4
   1153c:	add	r3, sp, #16
   11540:	mov	r4, sl
   11544:	vdup.32	q8, r2
   11548:	mov	r2, r7
   1154c:	vmov.32	d16[0], r5
   11550:	ldr	r5, [r4], #4
   11554:	subs	r2, r2, #4
   11558:	str	r5, [sp, #16]
   1155c:	vld1.32	{d18[0]}, [r3 :32]
   11560:	vmovl.u8	q9, d18
   11564:	vmovl.u16	q9, d18
   11568:	vadd.i32	q8, q8, q9
   1156c:	bne	11550 <__assert_fail@plt+0x38c>
   11570:	vext.8	q9, q8, q8, #8
   11574:	cmp	r1, r7
   11578:	mov	r4, ip
   1157c:	vadd.i32	q8, q8, q9
   11580:	vdup.32	q9, d16[1]
   11584:	vadd.i32	q8, q8, q9
   11588:	vmov.32	r5, d16[0]
   1158c:	beq	115ac <__assert_fail@plt+0x3e8>
   11590:	sub	r0, r0, r7
   11594:	add	r2, sl, r7
   11598:	add	r0, r0, r8
   1159c:	ldrb	r3, [r2], #1
   115a0:	subs	r0, r0, #1
   115a4:	add	r5, r5, r3
   115a8:	bne	1159c <__assert_fail@plt+0x3d8>
   115ac:	ldr	r0, [sp, #8]
   115b0:	mov	r7, #0
   115b4:	adds	r0, r0, r1
   115b8:	adcs	r1, r6, #0
   115bc:	adcs	r2, r7, #0
   115c0:	beq	115d8 <__assert_fail@plt+0x414>
   115c4:	bl	110b0 <__errno_location@plt>
   115c8:	mov	r1, #75	; 0x4b
   115cc:	mvn	r7, #0
   115d0:	str	r1, [r0]
   115d4:	b	115f4 <__assert_fail@plt+0x430>
   115d8:	lsr	r2, r5, #16
   115dc:	uxtah	r2, r2, r5
   115e0:	lsr	r3, r2, #16
   115e4:	uxtah	r2, r3, r2
   115e8:	ldr	r3, [sp, #4]
   115ec:	str	r2, [r3]
   115f0:	strd	r0, [r4]
   115f4:	mov	r0, sl
   115f8:	bl	120a0 <__assert_fail@plt+0xedc>
   115fc:	mov	r0, r7
   11600:	sub	sp, fp, #28
   11604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11608:	push	{r4, r5, r6, r7, fp, lr}
   1160c:	add	fp, sp, #16
   11610:	sub	sp, sp, #672	; 0x2a0
   11614:	mov	r4, r0
   11618:	ldr	r5, [r2]
   1161c:	mov	r2, #1
   11620:	mov	r0, #0
   11624:	mov	r1, #1024	; 0x400
   11628:	mov	r3, #0
   1162c:	str	r2, [sp]
   11630:	stmib	sp, {r0, r1}
   11634:	str	r0, [sp, #12]
   11638:	ldr	r0, [fp, #16]
   1163c:	ldr	r1, [fp, #20]
   11640:	add	r2, sp, #20
   11644:	bl	12170 <__assert_fail@plt+0xfac>
   11648:	movw	r1, #29564	; 0x737c
   1164c:	mov	r3, r0
   11650:	mov	r0, #1
   11654:	mov	r2, r5
   11658:	movt	r1, #1
   1165c:	bl	110ec <__printf_chk@plt>
   11660:	ldr	r0, [fp, #12]
   11664:	cmp	r0, #0
   11668:	beq	11680 <__assert_fail@plt+0x4bc>
   1166c:	movw	r1, #31972	; 0x7ce4
   11670:	mov	r0, #1
   11674:	mov	r2, r4
   11678:	movt	r1, #1
   1167c:	bl	110ec <__printf_chk@plt>
   11680:	movw	r0, #33132	; 0x816c
   11684:	ldr	r1, [fp, #8]
   11688:	movt	r0, #2
   1168c:	ldr	r0, [r0]
   11690:	ldr	r2, [r0, #20]
   11694:	ldr	r3, [r0, #24]
   11698:	cmp	r2, r3
   1169c:	addcc	r3, r2, #1
   116a0:	strcc	r3, [r0, #20]
   116a4:	strbcc	r1, [r2]
   116a8:	subcc	sp, fp, #16
   116ac:	popcc	{r4, r5, r6, r7, fp, pc}
   116b0:	bl	11134 <__overflow@plt>
   116b4:	sub	sp, fp, #16
   116b8:	pop	{r4, r5, r6, r7, fp, pc}
   116bc:	push	{r4, r5, r6, r7, fp, lr}
   116c0:	add	fp, sp, #16
   116c4:	sub	sp, sp, #672	; 0x2a0
   116c8:	mov	r4, r0
   116cc:	ldr	r5, [r2]
   116d0:	mov	r2, #1
   116d4:	mov	r0, #0
   116d8:	mov	r1, #512	; 0x200
   116dc:	mov	r3, #0
   116e0:	str	r2, [sp]
   116e4:	stmib	sp, {r0, r1}
   116e8:	str	r0, [sp, #12]
   116ec:	ldr	r0, [fp, #16]
   116f0:	ldr	r1, [fp, #20]
   116f4:	add	r2, sp, #20
   116f8:	bl	12170 <__assert_fail@plt+0xfac>
   116fc:	movw	r1, #29573	; 0x7385
   11700:	mov	r3, r0
   11704:	mov	r0, #1
   11708:	mov	r2, r5
   1170c:	movt	r1, #1
   11710:	bl	110ec <__printf_chk@plt>
   11714:	ldr	r0, [fp, #12]
   11718:	cmp	r0, #0
   1171c:	beq	11734 <__assert_fail@plt+0x570>
   11720:	movw	r1, #31972	; 0x7ce4
   11724:	mov	r0, #1
   11728:	mov	r2, r4
   1172c:	movt	r1, #1
   11730:	bl	110ec <__printf_chk@plt>
   11734:	movw	r0, #33132	; 0x816c
   11738:	ldr	r1, [fp, #8]
   1173c:	movt	r0, #2
   11740:	ldr	r0, [r0]
   11744:	ldr	r2, [r0, #20]
   11748:	ldr	r3, [r0, #24]
   1174c:	cmp	r2, r3
   11750:	addcc	r3, r2, #1
   11754:	strcc	r3, [r0, #20]
   11758:	strbcc	r1, [r2]
   1175c:	subcc	sp, fp, #16
   11760:	popcc	{r4, r5, r6, r7, fp, pc}
   11764:	bl	11134 <__overflow@plt>
   11768:	sub	sp, fp, #16
   1176c:	pop	{r4, r5, r6, r7, fp, pc}
   11770:	push	{fp, lr}
   11774:	mov	fp, sp
   11778:	sub	sp, sp, #56	; 0x38
   1177c:	mov	r4, r0
   11780:	cmp	r0, #0
   11784:	bne	119b8 <__assert_fail@plt+0x7f4>
   11788:	movw	r1, #29618	; 0x73b2
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	10fc0 <dcgettext@plt>
   1179c:	mov	r1, r0
   117a0:	movw	r0, #33152	; 0x8180
   117a4:	movt	r0, #2
   117a8:	ldr	r2, [r0]
   117ac:	mov	r0, #1
   117b0:	bl	110ec <__printf_chk@plt>
   117b4:	movw	r1, #29651	; 0x73d3
   117b8:	mov	r0, #0
   117bc:	mov	r2, #5
   117c0:	movt	r1, #1
   117c4:	bl	10fc0 <dcgettext@plt>
   117c8:	movw	r2, #29690	; 0x73fa
   117cc:	mov	r1, r0
   117d0:	mov	r0, #1
   117d4:	mov	r3, #16
   117d8:	movt	r2, #1
   117dc:	bl	110ec <__printf_chk@plt>
   117e0:	movw	r1, #30021	; 0x7545
   117e4:	mov	r0, #0
   117e8:	mov	r2, #5
   117ec:	movt	r1, #1
   117f0:	bl	10fc0 <dcgettext@plt>
   117f4:	movw	r7, #33132	; 0x816c
   117f8:	movt	r7, #2
   117fc:	ldr	r1, [r7]
   11800:	bl	10f30 <fputs_unlocked@plt>
   11804:	movw	r1, #29694	; 0x73fe
   11808:	mov	r0, #0
   1180c:	mov	r2, #5
   11810:	movt	r1, #1
   11814:	bl	10fc0 <dcgettext@plt>
   11818:	ldr	r1, [r7]
   1181c:	bl	10f30 <fputs_unlocked@plt>
   11820:	movw	r1, #29832	; 0x7488
   11824:	mov	r0, #0
   11828:	mov	r2, #5
   1182c:	movt	r1, #1
   11830:	bl	10fc0 <dcgettext@plt>
   11834:	ldr	r1, [r7]
   11838:	bl	10f30 <fputs_unlocked@plt>
   1183c:	movw	r1, #29877	; 0x74b5
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	10fc0 <dcgettext@plt>
   11850:	ldr	r1, [r7]
   11854:	bl	10f30 <fputs_unlocked@plt>
   11858:	movw	r0, #30480	; 0x7710
   1185c:	mov	r2, #48	; 0x30
   11860:	mov	r6, sp
   11864:	movw	r5, #30168	; 0x75d8
   11868:	movt	r0, #1
   1186c:	movt	r5, #1
   11870:	add	r1, r0, #32
   11874:	add	r3, r0, #16
   11878:	vld1.64	{d18-d19}, [r0], r2
   1187c:	vld1.64	{d16-d17}, [r1]
   11880:	vld1.64	{d20-d21}, [r3]
   11884:	add	r1, r6, #32
   11888:	vldr	d22, [r0]
   1188c:	add	r0, r6, #16
   11890:	vst1.64	{d16-d17}, [r1]
   11894:	movw	r1, #30077	; 0x757d
   11898:	vst1.64	{d20-d21}, [r0]
   1189c:	mov	r0, r6
   118a0:	vst1.64	{d18-d19}, [r0], r2
   118a4:	movt	r1, #1
   118a8:	vstr	d22, [r0]
   118ac:	mov	r0, r5
   118b0:	bl	10f48 <strcmp@plt>
   118b4:	cmp	r0, #0
   118b8:	ldrne	r1, [r6, #8]!
   118bc:	cmpne	r1, #0
   118c0:	bne	118ac <__assert_fail@plt+0x6e8>
   118c4:	ldr	r6, [r6, #4]
   118c8:	movw	r1, #30172	; 0x75dc
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #1
   118d8:	bl	10fc0 <dcgettext@plt>
   118dc:	movw	r2, #29958	; 0x7506
   118e0:	movw	r3, #30195	; 0x75f3
   118e4:	mov	r1, r0
   118e8:	mov	r0, #1
   118ec:	movt	r2, #1
   118f0:	movt	r3, #1
   118f4:	bl	110ec <__printf_chk@plt>
   118f8:	cmp	r6, #0
   118fc:	mov	r0, #5
   11900:	mov	r1, #0
   11904:	moveq	r6, r5
   11908:	bl	11140 <setlocale@plt>
   1190c:	cmp	r0, #0
   11910:	beq	11948 <__assert_fail@plt+0x784>
   11914:	movw	r1, #30235	; 0x761b
   11918:	mov	r2, #3
   1191c:	movt	r1, #1
   11920:	bl	111a0 <strncmp@plt>
   11924:	cmp	r0, #0
   11928:	beq	11948 <__assert_fail@plt+0x784>
   1192c:	movw	r1, #30239	; 0x761f
   11930:	mov	r0, #0
   11934:	mov	r2, #5
   11938:	movt	r1, #1
   1193c:	bl	10fc0 <dcgettext@plt>
   11940:	ldr	r1, [r7]
   11944:	bl	10f30 <fputs_unlocked@plt>
   11948:	movw	r1, #30310	; 0x7666
   1194c:	mov	r0, #0
   11950:	mov	r2, #5
   11954:	movt	r1, #1
   11958:	bl	10fc0 <dcgettext@plt>
   1195c:	movw	r2, #30195	; 0x75f3
   11960:	mov	r1, r0
   11964:	mov	r0, #1
   11968:	mov	r3, r5
   1196c:	movt	r2, #1
   11970:	bl	110ec <__printf_chk@plt>
   11974:	movw	r1, #30337	; 0x7681
   11978:	mov	r0, #0
   1197c:	mov	r2, #5
   11980:	movt	r1, #1
   11984:	bl	10fc0 <dcgettext@plt>
   11988:	movw	r3, #30387	; 0x76b3
   1198c:	mov	r1, r0
   11990:	movw	r0, #30105	; 0x7599
   11994:	cmp	r6, r5
   11998:	mov	r2, r6
   1199c:	movt	r0, #1
   119a0:	movt	r3, #1
   119a4:	moveq	r3, r0
   119a8:	mov	r0, #1
   119ac:	bl	110ec <__printf_chk@plt>
   119b0:	mov	r0, r4
   119b4:	bl	1108c <exit@plt>
   119b8:	movw	r0, #33120	; 0x8160
   119bc:	movw	r1, #29579	; 0x738b
   119c0:	mov	r2, #5
   119c4:	movt	r0, #2
   119c8:	movt	r1, #1
   119cc:	ldr	r5, [r0]
   119d0:	mov	r0, #0
   119d4:	bl	10fc0 <dcgettext@plt>
   119d8:	mov	r2, r0
   119dc:	movw	r0, #33152	; 0x8180
   119e0:	mov	r1, #1
   119e4:	movt	r0, #2
   119e8:	ldr	r3, [r0]
   119ec:	mov	r0, r5
   119f0:	bl	11104 <__fprintf_chk@plt>
   119f4:	mov	r0, r4
   119f8:	bl	1108c <exit@plt>
   119fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a00:	add	fp, sp, #28
   11a04:	sub	sp, sp, #52	; 0x34
   11a08:	str	r0, [sp, #20]
   11a0c:	ldr	r0, [r1]
   11a10:	mov	r7, r1
   11a14:	bl	12c98 <__assert_fail@plt+0x1ad4>
   11a18:	movw	r1, #30387	; 0x76b3
   11a1c:	mov	r0, #6
   11a20:	movt	r1, #1
   11a24:	bl	11140 <setlocale@plt>
   11a28:	movw	r4, #29962	; 0x750a
   11a2c:	movw	r1, #29931	; 0x74eb
   11a30:	movt	r4, #1
   11a34:	movt	r1, #1
   11a38:	mov	r0, r4
   11a3c:	bl	11188 <bindtextdomain@plt>
   11a40:	mov	r0, r4
   11a44:	bl	10fd8 <textdomain@plt>
   11a48:	movw	r0, #7628	; 0x1dcc
   11a4c:	movt	r0, #1
   11a50:	bl	17354 <__assert_fail@plt+0x6190>
   11a54:	movw	r8, #33132	; 0x816c
   11a58:	mov	r1, #0
   11a5c:	mov	r2, #1
   11a60:	mov	r3, #0
   11a64:	mov	r5, #0
   11a68:	movt	r8, #2
   11a6c:	ldr	r0, [r8]
   11a70:	bl	110d4 <setvbuf@plt>
   11a74:	sub	r0, fp, #34	; 0x22
   11a78:	movw	r6, #29955	; 0x7503
   11a7c:	movw	r4, #30408	; 0x76c8
   11a80:	add	r0, r0, #3
   11a84:	movt	r6, #1
   11a88:	movt	r4, #1
   11a8c:	and	r1, r0, #3
   11a90:	sub	r0, r0, r1
   11a94:	str	r0, [sp, #28]
   11a98:	b	11aa8 <__assert_fail@plt+0x8e4>
   11a9c:	movw	r0, #33140	; 0x8174
   11aa0:	movt	r0, #2
   11aa4:	strb	r1, [r0]
   11aa8:	ldr	r0, [sp, #20]
   11aac:	mov	r1, r7
   11ab0:	mov	r2, r6
   11ab4:	mov	r3, r4
   11ab8:	str	r5, [sp]
   11abc:	bl	11074 <getopt_long@plt>
   11ac0:	cmp	r0, #113	; 0x71
   11ac4:	ble	11ae4 <__assert_fail@plt+0x920>
   11ac8:	cmp	r0, #114	; 0x72
   11acc:	mov	r1, #0
   11ad0:	beq	11a9c <__assert_fail@plt+0x8d8>
   11ad4:	cmp	r0, #115	; 0x73
   11ad8:	bne	11d78 <__assert_fail@plt+0xbb4>
   11adc:	mov	r1, #1
   11ae0:	b	11a9c <__assert_fail@plt+0x8d8>
   11ae4:	cmn	r0, #1
   11ae8:	bne	11d14 <__assert_fail@plt+0xb50>
   11aec:	movw	r0, #33112	; 0x8158
   11af0:	ldr	r1, [sp, #20]
   11af4:	movt	r0, #2
   11af8:	ldr	r0, [r0]
   11afc:	add	r6, r7, r1, lsl #2
   11b00:	cmp	r0, r1
   11b04:	add	r5, r7, r0, lsl #2
   11b08:	mov	r0, #1
   11b0c:	movweq	r1, #30766	; 0x782e
   11b10:	str	r0, [sp, #24]
   11b14:	movteq	r1, #1
   11b18:	streq	r1, [r6], #4
   11b1c:	cmp	r5, r6
   11b20:	bcs	11cd4 <__assert_fail@plt+0xb10>
   11b24:	mov	r0, #1
   11b28:	str	r0, [sp, #24]
   11b2c:	ldr	r7, [r5]
   11b30:	movw	r1, #30766	; 0x782e
   11b34:	movt	r1, #1
   11b38:	mov	r0, r7
   11b3c:	bl	10f48 <strcmp@plt>
   11b40:	mov	r9, r0
   11b44:	cmp	r0, #0
   11b48:	beq	11b98 <__assert_fail@plt+0x9d4>
   11b4c:	movw	r1, #30569	; 0x7769
   11b50:	mov	r0, r7
   11b54:	movt	r1, #1
   11b58:	bl	11fec <__assert_fail@plt+0xe28>
   11b5c:	mov	sl, r0
   11b60:	cmp	r0, #0
   11b64:	bne	11bb4 <__assert_fail@plt+0x9f0>
   11b68:	bl	110b0 <__errno_location@plt>
   11b6c:	ldr	r4, [r0]
   11b70:	mov	r0, #0
   11b74:	mov	r1, #3
   11b78:	mov	r2, r7
   11b7c:	str	r0, [sp, #24]
   11b80:	mov	r0, #0
   11b84:	bl	14620 <__assert_fail@plt+0x345c>
   11b88:	mov	r3, r0
   11b8c:	mov	r0, #0
   11b90:	mov	r1, r4
   11b94:	b	11c54 <__assert_fail@plt+0xa90>
   11b98:	movw	r1, #33141	; 0x8175
   11b9c:	mov	r0, #1
   11ba0:	movt	r1, #2
   11ba4:	strb	r0, [r1]
   11ba8:	movw	r0, #33128	; 0x8168
   11bac:	movt	r0, #2
   11bb0:	ldr	sl, [r0]
   11bb4:	mov	r0, sl
   11bb8:	mov	r1, #2
   11bbc:	bl	11eb8 <__assert_fail@plt+0xcf4>
   11bc0:	movw	r0, #33140	; 0x8174
   11bc4:	movw	r1, #30536	; 0x7748
   11bc8:	add	r2, sp, #32
   11bcc:	movt	r0, #2
   11bd0:	movt	r1, #1
   11bd4:	ldrb	r0, [r0]
   11bd8:	ldr	r3, [r1, r0, lsl #2]
   11bdc:	ldr	r1, [sp, #28]
   11be0:	mov	r0, sl
   11be4:	blx	r3
   11be8:	cmp	r0, #0
   11bec:	beq	11bfc <__assert_fail@plt+0xa38>
   11bf0:	bl	110b0 <__errno_location@plt>
   11bf4:	ldr	r8, [r0]
   11bf8:	b	11c00 <__assert_fail@plt+0xa3c>
   11bfc:	mov	r8, #0
   11c00:	mov	r0, sl
   11c04:	cmp	r9, #0
   11c08:	beq	11c64 <__assert_fail@plt+0xaa0>
   11c0c:	bl	11ef4 <__assert_fail@plt+0xd30>
   11c10:	cmp	r8, #0
   11c14:	bne	11c28 <__assert_fail@plt+0xa64>
   11c18:	cmp	r0, #0
   11c1c:	beq	11c28 <__assert_fail@plt+0xa64>
   11c20:	bl	110b0 <__errno_location@plt>
   11c24:	ldr	r8, [r0]
   11c28:	cmp	r8, #0
   11c2c:	beq	11c70 <__assert_fail@plt+0xaac>
   11c30:	mov	r0, #0
   11c34:	mov	r1, #3
   11c38:	mov	r2, r7
   11c3c:	str	r0, [sp, #24]
   11c40:	mov	r0, #0
   11c44:	bl	14620 <__assert_fail@plt+0x345c>
   11c48:	mov	r3, r0
   11c4c:	mov	r0, #0
   11c50:	mov	r1, r8
   11c54:	movw	r2, #31973	; 0x7ce5
   11c58:	movt	r2, #1
   11c5c:	bl	1102c <error@plt>
   11c60:	b	11cc8 <__assert_fail@plt+0xb04>
   11c64:	bl	11170 <clearerr_unlocked@plt>
   11c68:	cmp	r8, #0
   11c6c:	bne	11c30 <__assert_fail@plt+0xa6c>
   11c70:	movw	r1, #33112	; 0x8158
   11c74:	ldr	r4, [sp, #20]
   11c78:	movw	r0, #33140	; 0x8174
   11c7c:	ldr	r2, [sp, #32]
   11c80:	ldr	r3, [sp, #36]	; 0x24
   11c84:	movt	r1, #2
   11c88:	movt	r0, #2
   11c8c:	ldr	r1, [r1]
   11c90:	ldrb	r0, [r0]
   11c94:	subs	r1, r1, r4
   11c98:	mov	r4, #10
   11c9c:	movwne	r1, #1
   11ca0:	str	r4, [sp]
   11ca4:	stmib	sp, {r1, r2, r3}
   11ca8:	movw	r1, #30472	; 0x7708
   11cac:	mov	r3, #0
   11cb0:	movt	r1, #1
   11cb4:	ldr	r2, [sp, #28]
   11cb8:	ldr	r4, [r1, r0, lsl #2]
   11cbc:	mov	r0, r7
   11cc0:	mov	r1, #0
   11cc4:	blx	r4
   11cc8:	add	r5, r5, #4
   11ccc:	cmp	r5, r6
   11cd0:	bcc	11b2c <__assert_fail@plt+0x968>
   11cd4:	movw	r0, #33141	; 0x8175
   11cd8:	movt	r0, #2
   11cdc:	ldrb	r0, [r0]
   11ce0:	cmp	r0, #0
   11ce4:	beq	11d00 <__assert_fail@plt+0xb3c>
   11ce8:	movw	r0, #33128	; 0x8168
   11cec:	movt	r0, #2
   11cf0:	ldr	r0, [r0]
   11cf4:	bl	11ef4 <__assert_fail@plt+0xd30>
   11cf8:	cmn	r0, #1
   11cfc:	beq	11d80 <__assert_fail@plt+0xbbc>
   11d00:	ldr	r1, [sp, #24]
   11d04:	mov	r0, #1
   11d08:	bic	r0, r0, r1
   11d0c:	sub	sp, fp, #28
   11d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d14:	cmn	r0, #3
   11d18:	bne	11d68 <__assert_fail@plt+0xba4>
   11d1c:	movw	r0, #33024	; 0x8100
   11d20:	movw	r2, #29990	; 0x7526
   11d24:	mov	r1, #0
   11d28:	movw	r7, #29972	; 0x7514
   11d2c:	movt	r0, #2
   11d30:	movt	r2, #1
   11d34:	str	r1, [sp, #8]
   11d38:	movw	r1, #30168	; 0x75d8
   11d3c:	movt	r7, #1
   11d40:	ldr	r3, [r0]
   11d44:	ldr	r0, [r8]
   11d48:	str	r2, [sp, #4]
   11d4c:	movw	r2, #29958	; 0x7506
   11d50:	movt	r1, #1
   11d54:	str	r7, [sp]
   11d58:	movt	r2, #1
   11d5c:	bl	14e94 <__assert_fail@plt+0x3cd0>
   11d60:	mov	r0, #0
   11d64:	bl	1108c <exit@plt>
   11d68:	cmn	r0, #2
   11d6c:	bne	11d78 <__assert_fail@plt+0xbb4>
   11d70:	mov	r0, #0
   11d74:	bl	11770 <__assert_fail@plt+0x5ac>
   11d78:	mov	r0, #1
   11d7c:	bl	11770 <__assert_fail@plt+0x5ac>
   11d80:	bl	110b0 <__errno_location@plt>
   11d84:	ldr	r4, [r0]
   11d88:	movw	r1, #30006	; 0x7536
   11d8c:	mov	r0, #0
   11d90:	mov	r2, #5
   11d94:	movt	r1, #1
   11d98:	bl	10fc0 <dcgettext@plt>
   11d9c:	mov	r2, r0
   11da0:	mov	r0, #1
   11da4:	mov	r1, r4
   11da8:	bl	1102c <error@plt>
   11dac:	movw	r1, #33144	; 0x8178
   11db0:	movt	r1, #2
   11db4:	str	r0, [r1]
   11db8:	bx	lr
   11dbc:	movw	r1, #33148	; 0x817c
   11dc0:	movt	r1, #2
   11dc4:	strb	r0, [r1]
   11dc8:	bx	lr
   11dcc:	push	{r4, r5, r6, sl, fp, lr}
   11dd0:	add	fp, sp, #16
   11dd4:	sub	sp, sp, #8
   11dd8:	movw	r0, #33132	; 0x816c
   11ddc:	movt	r0, #2
   11de0:	ldr	r0, [r0]
   11de4:	bl	16938 <__assert_fail@plt+0x5774>
   11de8:	cmp	r0, #0
   11dec:	beq	11e14 <__assert_fail@plt+0xc50>
   11df0:	movw	r0, #33148	; 0x817c
   11df4:	movt	r0, #2
   11df8:	ldrb	r0, [r0]
   11dfc:	cmp	r0, #0
   11e00:	beq	11e34 <__assert_fail@plt+0xc70>
   11e04:	bl	110b0 <__errno_location@plt>
   11e08:	ldr	r0, [r0]
   11e0c:	cmp	r0, #32
   11e10:	bne	11e34 <__assert_fail@plt+0xc70>
   11e14:	movw	r0, #33120	; 0x8160
   11e18:	movt	r0, #2
   11e1c:	ldr	r0, [r0]
   11e20:	bl	16938 <__assert_fail@plt+0x5774>
   11e24:	cmp	r0, #0
   11e28:	subeq	sp, fp, #16
   11e2c:	popeq	{r4, r5, r6, sl, fp, pc}
   11e30:	b	11ea4 <__assert_fail@plt+0xce0>
   11e34:	movw	r1, #30559	; 0x775f
   11e38:	mov	r0, #0
   11e3c:	mov	r2, #5
   11e40:	movt	r1, #1
   11e44:	bl	10fc0 <dcgettext@plt>
   11e48:	mov	r4, r0
   11e4c:	movw	r0, #33144	; 0x8178
   11e50:	movt	r0, #2
   11e54:	ldr	r6, [r0]
   11e58:	bl	110b0 <__errno_location@plt>
   11e5c:	ldr	r5, [r0]
   11e60:	cmp	r6, #0
   11e64:	bne	11e80 <__assert_fail@plt+0xcbc>
   11e68:	movw	r2, #31973	; 0x7ce5
   11e6c:	mov	r0, #0
   11e70:	mov	r1, r5
   11e74:	mov	r3, r4
   11e78:	movt	r2, #1
   11e7c:	b	11ea0 <__assert_fail@plt+0xcdc>
   11e80:	mov	r0, r6
   11e84:	bl	14544 <__assert_fail@plt+0x3380>
   11e88:	movw	r2, #30571	; 0x776b
   11e8c:	mov	r3, r0
   11e90:	str	r4, [sp]
   11e94:	mov	r0, #0
   11e98:	mov	r1, r5
   11e9c:	movt	r2, #1
   11ea0:	bl	1102c <error@plt>
   11ea4:	movw	r0, #33028	; 0x8104
   11ea8:	movt	r0, #2
   11eac:	ldr	r0, [r0]
   11eb0:	bl	10f84 <_exit@plt>
   11eb4:	b	10f54 <posix_fadvise64@plt>
   11eb8:	cmp	r0, #0
   11ebc:	bxeq	lr
   11ec0:	push	{r4, sl, fp, lr}
   11ec4:	add	fp, sp, #8
   11ec8:	sub	sp, sp, #16
   11ecc:	mov	r4, r1
   11ed0:	bl	110f8 <fileno@plt>
   11ed4:	mov	r1, #0
   11ed8:	mov	r2, #0
   11edc:	mov	r3, #0
   11ee0:	str	r1, [sp]
   11ee4:	stmib	sp, {r1, r4}
   11ee8:	bl	10f54 <posix_fadvise64@plt>
   11eec:	sub	sp, fp, #8
   11ef0:	pop	{r4, sl, fp, pc}
   11ef4:	push	{r4, r5, r6, sl, fp, lr}
   11ef8:	add	fp, sp, #16
   11efc:	sub	sp, sp, #8
   11f00:	mov	r4, r0
   11f04:	bl	110f8 <fileno@plt>
   11f08:	cmn	r0, #1
   11f0c:	ble	11f80 <__assert_fail@plt+0xdbc>
   11f10:	mov	r0, r4
   11f14:	bl	1105c <__freading@plt>
   11f18:	cmp	r0, #0
   11f1c:	beq	11f48 <__assert_fail@plt+0xd84>
   11f20:	mov	r0, r4
   11f24:	bl	110f8 <fileno@plt>
   11f28:	mov	r1, #1
   11f2c:	mov	r2, #0
   11f30:	mov	r3, #0
   11f34:	str	r1, [sp]
   11f38:	bl	10ffc <lseek64@plt>
   11f3c:	and	r0, r0, r1
   11f40:	cmn	r0, #1
   11f44:	beq	11f80 <__assert_fail@plt+0xdbc>
   11f48:	mov	r0, r4
   11f4c:	bl	11f90 <__assert_fail@plt+0xdcc>
   11f50:	cmp	r0, #0
   11f54:	beq	11f80 <__assert_fail@plt+0xdbc>
   11f58:	bl	110b0 <__errno_location@plt>
   11f5c:	ldr	r6, [r0]
   11f60:	mov	r5, r0
   11f64:	mov	r0, r4
   11f68:	bl	11110 <fclose@plt>
   11f6c:	cmp	r6, #0
   11f70:	strne	r6, [r5]
   11f74:	mvnne	r0, #0
   11f78:	sub	sp, fp, #16
   11f7c:	pop	{r4, r5, r6, sl, fp, pc}
   11f80:	mov	r0, r4
   11f84:	sub	sp, fp, #16
   11f88:	pop	{r4, r5, r6, sl, fp, lr}
   11f8c:	b	11110 <fclose@plt>
   11f90:	push	{r4, sl, fp, lr}
   11f94:	add	fp, sp, #8
   11f98:	sub	sp, sp, #8
   11f9c:	mov	r4, r0
   11fa0:	cmp	r0, #0
   11fa4:	beq	11fc0 <__assert_fail@plt+0xdfc>
   11fa8:	mov	r0, r4
   11fac:	bl	1105c <__freading@plt>
   11fb0:	cmp	r0, #0
   11fb4:	ldrbne	r0, [r4, #1]
   11fb8:	tstne	r0, #1
   11fbc:	bne	11fd0 <__assert_fail@plt+0xe0c>
   11fc0:	mov	r0, r4
   11fc4:	sub	sp, fp, #8
   11fc8:	pop	{r4, sl, fp, lr}
   11fcc:	b	10f60 <fflush@plt>
   11fd0:	mov	r0, #1
   11fd4:	mov	r2, #0
   11fd8:	mov	r3, #0
   11fdc:	str	r0, [sp]
   11fe0:	mov	r0, r4
   11fe4:	bl	120c8 <__assert_fail@plt+0xf04>
   11fe8:	b	11fc0 <__assert_fail@plt+0xdfc>
   11fec:	push	{r4, r5, r6, r7, fp, lr}
   11ff0:	add	fp, sp, #16
   11ff4:	mov	r5, r1
   11ff8:	bl	1117c <fopen64@plt>
   11ffc:	mov	r4, #0
   12000:	cmp	r0, #0
   12004:	beq	12054 <__assert_fail@plt+0xe90>
   12008:	mov	r6, r0
   1200c:	bl	110f8 <fileno@plt>
   12010:	cmp	r0, #2
   12014:	movhi	r0, r6
   12018:	pophi	{r4, r5, r6, r7, fp, pc}
   1201c:	bl	14a04 <__assert_fail@plt+0x3840>
   12020:	cmn	r0, #1
   12024:	ble	12080 <__assert_fail@plt+0xebc>
   12028:	mov	r7, r0
   1202c:	mov	r0, r6
   12030:	bl	11ef4 <__assert_fail@plt+0xd30>
   12034:	cmp	r0, #0
   12038:	bne	1205c <__assert_fail@plt+0xe98>
   1203c:	mov	r0, r7
   12040:	mov	r1, r5
   12044:	bl	10f18 <fdopen@plt>
   12048:	mov	r4, r0
   1204c:	cmp	r0, #0
   12050:	beq	1205c <__assert_fail@plt+0xe98>
   12054:	mov	r0, r4
   12058:	pop	{r4, r5, r6, r7, fp, pc}
   1205c:	bl	110b0 <__errno_location@plt>
   12060:	ldr	r5, [r0]
   12064:	mov	r4, r0
   12068:	mov	r0, r7
   1206c:	bl	111b8 <close@plt>
   12070:	str	r5, [r4]
   12074:	mov	r4, #0
   12078:	mov	r0, r4
   1207c:	pop	{r4, r5, r6, r7, fp, pc}
   12080:	bl	110b0 <__errno_location@plt>
   12084:	ldr	r7, [r0]
   12088:	mov	r5, r0
   1208c:	mov	r0, r6
   12090:	bl	11ef4 <__assert_fail@plt+0xd30>
   12094:	mov	r0, r4
   12098:	str	r7, [r5]
   1209c:	pop	{r4, r5, r6, r7, fp, pc}
   120a0:	push	{r4, r5, r6, sl, fp, lr}
   120a4:	add	fp, sp, #16
   120a8:	mov	r4, r0
   120ac:	bl	110b0 <__errno_location@plt>
   120b0:	ldr	r6, [r0]
   120b4:	mov	r5, r0
   120b8:	mov	r0, r4
   120bc:	bl	10f78 <free@plt>
   120c0:	str	r6, [r5]
   120c4:	pop	{r4, r5, r6, sl, fp, pc}
   120c8:	push	{r4, r5, r6, r7, fp, lr}
   120cc:	add	fp, sp, #16
   120d0:	sub	sp, sp, #8
   120d4:	mov	r4, r0
   120d8:	ldr	r0, [r0, #4]
   120dc:	mov	r5, r3
   120e0:	mov	r6, r2
   120e4:	ldr	r1, [r4, #8]
   120e8:	cmp	r1, r0
   120ec:	bne	12108 <__assert_fail@plt+0xf44>
   120f0:	ldrd	r0, [r4, #16]
   120f4:	cmp	r1, r0
   120f8:	bne	12108 <__assert_fail@plt+0xf44>
   120fc:	ldr	r0, [r4, #36]	; 0x24
   12100:	cmp	r0, #0
   12104:	beq	12120 <__assert_fail@plt+0xf5c>
   12108:	mov	r0, r4
   1210c:	mov	r2, r6
   12110:	mov	r3, r5
   12114:	sub	sp, fp, #16
   12118:	pop	{r4, r5, r6, r7, fp, lr}
   1211c:	b	1111c <fseeko64@plt>
   12120:	ldr	r7, [fp, #8]
   12124:	mov	r0, r4
   12128:	bl	110f8 <fileno@plt>
   1212c:	mov	r2, r6
   12130:	mov	r3, r5
   12134:	str	r7, [sp]
   12138:	bl	10ffc <lseek64@plt>
   1213c:	and	r2, r0, r1
   12140:	cmn	r2, #1
   12144:	mvneq	r0, #0
   12148:	subeq	sp, fp, #16
   1214c:	popeq	{r4, r5, r6, r7, fp, pc}
   12150:	strd	r0, [r4, #80]	; 0x50
   12154:	ldr	r0, [r4]
   12158:	bic	r0, r0, #16
   1215c:	str	r0, [r4]
   12160:	mov	r0, #0
   12164:	sub	sp, fp, #16
   12168:	pop	{r4, r5, r6, r7, fp, pc}
   1216c:	andeq	r0, r0, r0
   12170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12174:	add	fp, sp, #28
   12178:	sub	sp, sp, #4
   1217c:	vpush	{d8-d9}
   12180:	sub	sp, sp, #104	; 0x68
   12184:	mov	r7, r3
   12188:	mov	r6, r2
   1218c:	mov	r9, r1
   12190:	str	r0, [sp, #44]	; 0x2c
   12194:	bl	11164 <localeconv@plt>
   12198:	ldr	r5, [r0]
   1219c:	mov	r4, r0
   121a0:	mov	r0, r5
   121a4:	bl	11098 <strlen@plt>
   121a8:	movw	r2, #30578	; 0x7772
   121ac:	sub	r1, r0, #1
   121b0:	cmp	r1, #16
   121b4:	movt	r2, #1
   121b8:	movcc	r2, r5
   121bc:	ldr	r5, [r4, #4]
   121c0:	ldr	r4, [r4, #8]
   121c4:	movcs	r0, #1
   121c8:	str	r0, [sp, #16]
   121cc:	str	r2, [sp, #12]
   121d0:	mov	r0, r5
   121d4:	bl	11098 <strlen@plt>
   121d8:	movw	r3, #30387	; 0x76b3
   121dc:	cmp	r0, #17
   121e0:	movw	r0, #647	; 0x287
   121e4:	ldr	r2, [fp, #16]
   121e8:	ldr	sl, [fp, #8]
   121ec:	ldr	r8, [fp, #12]
   121f0:	str	r6, [sp, #28]
   121f4:	str	r7, [sp, #36]	; 0x24
   121f8:	str	r4, [sp, #20]
   121fc:	movt	r3, #1
   12200:	add	r1, r6, r0
   12204:	movcc	r3, r5
   12208:	ands	r0, r7, #32
   1220c:	ldr	r5, [fp, #20]
   12210:	str	r1, [sp, #32]
   12214:	str	r0, [sp, #24]
   12218:	mov	r0, #1000	; 0x3e8
   1221c:	str	r3, [sp, #52]	; 0x34
   12220:	movwne	r0, #1024	; 0x400
   12224:	str	r0, [sp, #40]	; 0x28
   12228:	and	r0, r7, #3
   1222c:	str	r0, [sp, #48]	; 0x30
   12230:	subs	r0, sl, r2
   12234:	sbcs	r0, r8, r5
   12238:	bcs	1232c <__assert_fail@plt+0x1168>
   1223c:	orrs	r0, sl, r8
   12240:	mov	r4, r9
   12244:	beq	12414 <__assert_fail@plt+0x1250>
   12248:	ldr	r5, [fp, #20]
   1224c:	mov	r0, r2
   12250:	mov	r2, sl
   12254:	mov	r3, r8
   12258:	mov	r1, r5
   1225c:	bl	17138 <__assert_fail@plt+0x5f74>
   12260:	ldr	r2, [fp, #16]
   12264:	mov	r6, r0
   12268:	mov	r3, r1
   1226c:	umull	r0, r1, r0, sl
   12270:	mla	r1, r6, r8, r1
   12274:	mla	r1, r3, sl, r1
   12278:	subs	r0, r2, r0
   1227c:	sbc	r1, r5, r1
   12280:	orrs	r0, r0, r1
   12284:	bne	12414 <__assert_fail@plt+0x1250>
   12288:	ldr	r5, [sp, #44]	; 0x2c
   1228c:	mov	r1, r4
   12290:	mov	r2, r6
   12294:	mov	r8, r3
   12298:	mov	r0, r5
   1229c:	bl	17138 <__assert_fail@plt+0x5f74>
   122a0:	mov	r7, r0
   122a4:	mov	r9, r1
   122a8:	umull	r0, r1, r0, r6
   122ac:	mov	r2, #10
   122b0:	mov	r3, r8
   122b4:	mla	r1, r7, r8, r1
   122b8:	subs	r0, r5, r0
   122bc:	mla	r1, r9, r6, r1
   122c0:	umull	sl, r0, r0, r2
   122c4:	mov	r2, r6
   122c8:	sbc	r1, r4, r1
   122cc:	add	r1, r1, r1, lsl #2
   122d0:	add	r5, r0, r1, lsl #1
   122d4:	mov	r0, sl
   122d8:	mov	r1, r5
   122dc:	bl	17138 <__assert_fail@plt+0x5f74>
   122e0:	mov	r4, r0
   122e4:	umull	r0, r2, r0, r6
   122e8:	mla	r2, r4, r8, r2
   122ec:	subs	r0, sl, r0
   122f0:	mla	r1, r1, r6, r2
   122f4:	mov	r2, #2
   122f8:	sbc	r1, r5, r1
   122fc:	subs	r3, r6, r0, lsl #1
   12300:	lsl	r1, r1, #1
   12304:	orr	r1, r1, r0, lsr #31
   12308:	sbcs	r3, r8, r1
   1230c:	orr	r5, r1, r0, lsl #1
   12310:	movwcc	r2, #3
   12314:	cmp	r5, #0
   12318:	movwne	r5, #1
   1231c:	rsbs	r0, r6, r0, lsl #1
   12320:	sbcs	r0, r1, r8
   12324:	movcs	r5, r2
   12328:	b	123a4 <__assert_fail@plt+0x11e0>
   1232c:	mov	r0, sl
   12330:	mov	r1, r8
   12334:	mov	r3, r5
   12338:	bl	17138 <__assert_fail@plt+0x5f74>
   1233c:	ldr	r2, [fp, #16]
   12340:	mov	r6, r0
   12344:	mov	r3, r1
   12348:	mov	r4, r9
   1234c:	umull	r0, r1, r0, r2
   12350:	mla	r1, r6, r5, r1
   12354:	subs	r0, sl, r0
   12358:	mla	r1, r3, r2, r1
   1235c:	sbc	r1, r8, r1
   12360:	orrs	r0, r0, r1
   12364:	bne	12414 <__assert_fail@plt+0x1250>
   12368:	ldr	r5, [sp, #44]	; 0x2c
   1236c:	mov	r2, r6
   12370:	umull	r7, r0, r6, r5
   12374:	mla	r0, r6, r4, r0
   12378:	mla	r9, r3, r5, r0
   1237c:	mov	r0, r7
   12380:	mov	r1, r9
   12384:	bl	17138 <__assert_fail@plt+0x5f74>
   12388:	ldr	r2, [fp, #16]
   1238c:	eor	r1, r1, r4
   12390:	eor	r0, r0, r5
   12394:	orrs	r0, r0, r1
   12398:	bne	12414 <__assert_fail@plt+0x1250>
   1239c:	mov	r5, #0
   123a0:	mov	r4, #0
   123a4:	ldr	r0, [sp, #36]	; 0x24
   123a8:	ldr	r2, [sp, #40]	; 0x28
   123ac:	mvn	r6, #0
   123b0:	ands	r8, r0, #16
   123b4:	beq	123c8 <__assert_fail@plt+0x1204>
   123b8:	subs	r0, r7, r2
   123bc:	mov	r6, #0
   123c0:	sbcs	r0, r9, #0
   123c4:	bcs	128f0 <__assert_fail@plt+0x172c>
   123c8:	ldr	r0, [sp, #32]
   123cc:	mov	sl, r7
   123d0:	str	r0, [sp, #44]	; 0x2c
   123d4:	ldr	r0, [sp, #48]	; 0x30
   123d8:	cmp	r0, #0
   123dc:	beq	12704 <__assert_fail@plt+0x1540>
   123e0:	cmp	r0, #1
   123e4:	bne	12778 <__assert_fail@plt+0x15b4>
   123e8:	rsbs	r1, r5, #0
   123ec:	mov	r0, #0
   123f0:	and	r3, sl, #1
   123f4:	ldr	r5, [sp, #44]	; 0x2c
   123f8:	sbc	r0, r0, #0
   123fc:	eor	r1, r3, r1
   12400:	orrs	r0, r1, r0
   12404:	addne	r4, r4, #1
   12408:	cmp	r4, #5
   1240c:	bgt	12714 <__assert_fail@plt+0x1550>
   12410:	b	12768 <__assert_fail@plt+0x15a4>
   12414:	ldr	r9, [fp, #20]
   12418:	mov	r0, r2
   1241c:	mov	r1, r9
   12420:	bl	170c4 <__assert_fail@plt+0x5f00>
   12424:	vmov	d8, r0, r1
   12428:	ldr	r0, [sp, #44]	; 0x2c
   1242c:	mov	r1, r4
   12430:	bl	170c4 <__assert_fail@plt+0x5f00>
   12434:	mov	r6, r0
   12438:	mov	r7, r1
   1243c:	mov	r0, sl
   12440:	mov	r1, r8
   12444:	bl	170c4 <__assert_fail@plt+0x5f00>
   12448:	vmov	d17, r6, r7
   1244c:	ldr	r7, [sp, #36]	; 0x24
   12450:	vmov	d16, r0, r1
   12454:	vdiv.f64	d16, d16, d8
   12458:	vmul.f64	d8, d16, d17
   1245c:	tst	r7, #16
   12460:	bne	124d4 <__assert_fail@plt+0x1310>
   12464:	ldr	r0, [sp, #48]	; 0x30
   12468:	ldr	sl, [sp, #28]
   1246c:	cmp	r0, #1
   12470:	beq	1265c <__assert_fail@plt+0x1498>
   12474:	vldr	d16, [pc, #756]	; 12770 <__assert_fail@plt+0x15ac>
   12478:	ldr	r8, [sp, #32]
   1247c:	vcmpe.f64	d8, d16
   12480:	vmrs	APSR_nzcv, fpscr
   12484:	bpl	12660 <__assert_fail@plt+0x149c>
   12488:	mov	r6, r0
   1248c:	vmov	r0, r1, d8
   12490:	bl	17188 <__assert_fail@plt+0x5fc4>
   12494:	mov	r4, r0
   12498:	mov	r5, r1
   1249c:	bl	170c4 <__assert_fail@plt+0x5f00>
   124a0:	vmov	d16, r0, r1
   124a4:	clz	r0, r6
   124a8:	mov	r2, #0
   124ac:	vcmp.f64	d8, d16
   124b0:	lsr	r0, r0, #5
   124b4:	vmrs	APSR_nzcv, fpscr
   124b8:	movwne	r2, #1
   124bc:	and	r0, r0, r2
   124c0:	adds	r0, r0, r4
   124c4:	adc	r1, r5, #0
   124c8:	bl	170c4 <__assert_fail@plt+0x5f00>
   124cc:	vmov	d8, r0, r1
   124d0:	b	12660 <__assert_fail@plt+0x149c>
   124d4:	ldr	r0, [sp, #40]	; 0x28
   124d8:	vmov.f64	d16, #112	; 0x3f800000  1.0
   124dc:	mov	r6, #0
   124e0:	vmov	s0, r0
   124e4:	vcvt.f64.u32	d17, s0
   124e8:	ldr	sl, [sp, #28]
   124ec:	add	r6, r6, #1
   124f0:	vmul.f64	d16, d16, d17
   124f4:	cmp	r6, #7
   124f8:	vmulls.f64	d18, d16, d17
   124fc:	vcmpels.f64	d18, d8
   12500:	vmrsls	APSR_nzcv, fpscr
   12504:	bls	124ec <__assert_fail@plt+0x1328>
   12508:	ldr	r0, [sp, #48]	; 0x30
   1250c:	ldr	r8, [sp, #32]
   12510:	ldr	r5, [sp, #16]
   12514:	vdiv.f64	d8, d8, d16
   12518:	vmov.f64	d16, d8
   1251c:	cmp	r0, #1
   12520:	beq	12584 <__assert_fail@plt+0x13c0>
   12524:	vldr	d16, [pc, #580]	; 12770 <__assert_fail@plt+0x15ac>
   12528:	vcmpe.f64	d8, d16
   1252c:	vmov.f64	d16, d8
   12530:	vmrs	APSR_nzcv, fpscr
   12534:	bpl	12584 <__assert_fail@plt+0x13c0>
   12538:	vmov	r0, r1, d8
   1253c:	bl	17188 <__assert_fail@plt+0x5fc4>
   12540:	mov	r4, r0
   12544:	mov	r5, r1
   12548:	bl	170c4 <__assert_fail@plt+0x5f00>
   1254c:	vmov	d16, r0, r1
   12550:	ldr	r0, [sp, #48]	; 0x30
   12554:	mov	r2, #0
   12558:	vcmp.f64	d8, d16
   1255c:	vmrs	APSR_nzcv, fpscr
   12560:	movwne	r2, #1
   12564:	clz	r0, r0
   12568:	lsr	r0, r0, #5
   1256c:	and	r0, r0, r2
   12570:	adds	r0, r0, r4
   12574:	adc	r1, r5, #0
   12578:	ldr	r5, [sp, #16]
   1257c:	bl	170c4 <__assert_fail@plt+0x5f00>
   12580:	vmov	d16, r0, r1
   12584:	movw	r3, #30586	; 0x777a
   12588:	mov	r0, sl
   1258c:	mov	r1, #1
   12590:	mvn	r2, #0
   12594:	vstr	d16, [sp]
   12598:	movt	r3, #1
   1259c:	bl	110bc <__sprintf_chk@plt>
   125a0:	ldr	r1, [sp, #24]
   125a4:	mov	r0, #3
   125a8:	cmp	r1, #0
   125ac:	movwne	r0, #2
   125b0:	add	r4, r0, r5
   125b4:	mov	r0, sl
   125b8:	bl	11098 <strlen@plt>
   125bc:	cmp	r4, r0
   125c0:	bcc	125e4 <__assert_fail@plt+0x1420>
   125c4:	mov	r2, r0
   125c8:	add	r5, r5, #1
   125cc:	tst	r7, #8
   125d0:	beq	12690 <__assert_fail@plt+0x14cc>
   125d4:	add	r0, sl, r2
   125d8:	ldrb	r0, [r0, #-1]
   125dc:	cmp	r0, #48	; 0x30
   125e0:	bne	12690 <__assert_fail@plt+0x14cc>
   125e4:	ldr	r0, [sp, #48]	; 0x30
   125e8:	vmov.f64	d9, #36	; 0x41200000  10.0
   125ec:	vmul.f64	d8, d8, d9
   125f0:	cmp	r0, #1
   125f4:	beq	12650 <__assert_fail@plt+0x148c>
   125f8:	vldr	d16, [pc, #368]	; 12770 <__assert_fail@plt+0x15ac>
   125fc:	vcmpe.f64	d8, d16
   12600:	vmrs	APSR_nzcv, fpscr
   12604:	bpl	12650 <__assert_fail@plt+0x148c>
   12608:	vmov	r0, r1, d8
   1260c:	bl	17188 <__assert_fail@plt+0x5fc4>
   12610:	mov	r4, r0
   12614:	mov	r5, r1
   12618:	bl	170c4 <__assert_fail@plt+0x5f00>
   1261c:	vmov	d16, r0, r1
   12620:	ldr	r0, [sp, #48]	; 0x30
   12624:	mov	r2, #0
   12628:	vcmp.f64	d8, d16
   1262c:	vmrs	APSR_nzcv, fpscr
   12630:	movwne	r2, #1
   12634:	clz	r0, r0
   12638:	lsr	r0, r0, #5
   1263c:	and	r0, r0, r2
   12640:	adds	r0, r0, r4
   12644:	adc	r1, r5, #0
   12648:	bl	170c4 <__assert_fail@plt+0x5f00>
   1264c:	vmov	d8, r0, r1
   12650:	vdiv.f64	d16, d8, d9
   12654:	vstr	d16, [sp]
   12658:	b	12668 <__assert_fail@plt+0x14a4>
   1265c:	ldr	r8, [sp, #32]
   12660:	mvn	r6, #0
   12664:	vstr	d8, [sp]
   12668:	movw	r3, #30580	; 0x7774
   1266c:	mov	r0, sl
   12670:	mov	r1, #1
   12674:	mvn	r2, #0
   12678:	movt	r3, #1
   1267c:	bl	110bc <__sprintf_chk@plt>
   12680:	mov	r0, sl
   12684:	bl	11098 <strlen@plt>
   12688:	mov	r2, r0
   1268c:	mov	r5, #0
   12690:	sub	r4, r8, r2
   12694:	mov	r1, sl
   12698:	mov	r0, r4
   1269c:	bl	10f6c <memmove@plt>
   126a0:	sub	r5, r8, r5
   126a4:	tst	r7, #4
   126a8:	bne	127d0 <__assert_fail@plt+0x160c>
   126ac:	ldr	r3, [sp, #40]	; 0x28
   126b0:	ldr	r5, [fp, #16]
   126b4:	tst	r7, #128	; 0x80
   126b8:	beq	12a0c <__assert_fail@plt+0x1848>
   126bc:	cmn	r6, #1
   126c0:	bgt	129a4 <__assert_fail@plt+0x17e0>
   126c4:	subs	r0, r5, #2
   126c8:	mov	r6, #0
   126cc:	sbcs	r0, r9, #0
   126d0:	bcc	129a4 <__assert_fail@plt+0x17e0>
   126d4:	mov	r0, #0
   126d8:	mov	r1, #1
   126dc:	mov	r6, #0
   126e0:	cmp	r6, #7
   126e4:	beq	129a0 <__assert_fail@plt+0x17dc>
   126e8:	umull	r1, r2, r1, r3
   126ec:	add	r6, r6, #1
   126f0:	mla	r0, r0, r3, r2
   126f4:	subs	r2, r1, r5
   126f8:	sbcs	r2, r0, r9
   126fc:	bcc	126e0 <__assert_fail@plt+0x151c>
   12700:	b	129a4 <__assert_fail@plt+0x17e0>
   12704:	add	r0, r4, r5
   12708:	ldr	r5, [sp, #44]	; 0x2c
   1270c:	cmp	r0, #1
   12710:	blt	12768 <__assert_fail@plt+0x15a4>
   12714:	adds	sl, sl, #1
   12718:	adc	r9, r9, #0
   1271c:	cmp	r6, #7
   12720:	bgt	12768 <__assert_fail@plt+0x15a4>
   12724:	cmp	r8, #0
   12728:	beq	12768 <__assert_fail@plt+0x15a4>
   1272c:	eor	r0, sl, r2
   12730:	orrs	r0, r0, r9
   12734:	ldreq	r0, [sp, #36]	; 0x24
   12738:	addeq	r6, r6, #1
   1273c:	moveq	r9, #0
   12740:	moveq	sl, #1
   12744:	tsteq	r0, #8
   12748:	bne	12768 <__assert_fail@plt+0x15a4>
   1274c:	ldr	r2, [sp, #16]
   12750:	mov	r0, #48	; 0x30
   12754:	ldr	r1, [sp, #12]
   12758:	strb	r0, [r5, #-1]!
   1275c:	sub	r5, r5, r2
   12760:	mov	r0, r5
   12764:	bl	10f90 <memcpy@plt>
   12768:	ldr	r8, [sp, #32]
   1276c:	b	12780 <__assert_fail@plt+0x15bc>
   12770:	andeq	r0, r0, r0
   12774:	mvnsmi	r0, #0
   12778:	ldr	r8, [sp, #32]
   1277c:	ldr	r5, [sp, #44]	; 0x2c
   12780:	mov	r4, r5
   12784:	mov	r0, sl
   12788:	mov	r1, r9
   1278c:	mov	r2, #10
   12790:	mov	r3, #0
   12794:	bl	17138 <__assert_fail@plt+0x5f74>
   12798:	add	r2, r0, r0, lsl #2
   1279c:	sub	r2, sl, r2, lsl #1
   127a0:	orr	r2, r2, #48	; 0x30
   127a4:	strb	r2, [r4, #-1]!
   127a8:	rsbs	r2, sl, #9
   127ac:	mov	sl, r0
   127b0:	rscs	r2, r9, #0
   127b4:	mov	r9, r1
   127b8:	bcc	12784 <__assert_fail@plt+0x15c0>
   127bc:	ldr	r7, [sp, #36]	; 0x24
   127c0:	ldr	r9, [fp, #20]
   127c4:	ldr	sl, [sp, #28]
   127c8:	tst	r7, #4
   127cc:	beq	126ac <__assert_fail@plt+0x14e8>
   127d0:	ldr	r0, [sp, #52]	; 0x34
   127d4:	mov	r7, r5
   127d8:	str	r6, [sp, #16]
   127dc:	sub	r5, r5, r4
   127e0:	bl	11098 <strlen@plt>
   127e4:	add	r8, sp, #56	; 0x38
   127e8:	str	r0, [sp, #48]	; 0x30
   127ec:	mov	r1, r4
   127f0:	mov	r2, r5
   127f4:	mov	r0, r8
   127f8:	bl	10f90 <memcpy@plt>
   127fc:	ldr	r0, [sp, #20]
   12800:	ldrb	r6, [r0]
   12804:	cmp	r6, #255	; 0xff
   12808:	mov	r9, r6
   1280c:	moveq	r9, r5
   12810:	cmp	r6, #0
   12814:	mvneq	r9, #0
   12818:	cmp	r9, r5
   1281c:	movhi	r9, r5
   12820:	sub	r4, r7, r9
   12824:	sub	r7, r5, r9
   12828:	mov	r2, r9
   1282c:	add	r1, r8, r7
   12830:	mov	r0, r4
   12834:	bl	10f90 <memcpy@plt>
   12838:	cmp	r7, #0
   1283c:	beq	128c8 <__assert_fail@plt+0x1704>
   12840:	clz	r0, r6
   12844:	ldr	r8, [sp, #20]
   12848:	lsr	sl, r0, #5
   1284c:	ldr	r0, [sp, #48]	; 0x30
   12850:	rsb	r0, r0, #0
   12854:	str	r0, [sp, #44]	; 0x2c
   12858:	ldr	r0, [sp, #44]	; 0x2c
   1285c:	ldr	r1, [sp, #52]	; 0x34
   12860:	ldr	r2, [sp, #48]	; 0x30
   12864:	add	r4, r4, r0
   12868:	mov	r0, r4
   1286c:	bl	10f90 <memcpy@plt>
   12870:	tst	sl, #1
   12874:	add	r0, sp, #56	; 0x38
   12878:	addeq	r8, r8, #1
   1287c:	ldrb	r6, [r8]
   12880:	cmp	r6, #255	; 0xff
   12884:	mov	r5, r6
   12888:	moveq	r5, r7
   1288c:	cmp	r6, #0
   12890:	moveq	r5, r9
   12894:	cmp	r7, r5
   12898:	movcc	r5, r7
   1289c:	sub	r7, r7, r5
   128a0:	sub	r4, r4, r5
   128a4:	mov	r2, r5
   128a8:	add	r1, r0, r7
   128ac:	mov	r0, r4
   128b0:	bl	10f90 <memcpy@plt>
   128b4:	clz	r0, r6
   128b8:	cmp	r7, #0
   128bc:	mov	r9, r5
   128c0:	lsr	sl, r0, #5
   128c4:	bne	12858 <__assert_fail@plt+0x1694>
   128c8:	ldr	r8, [sp, #32]
   128cc:	ldr	sl, [sp, #28]
   128d0:	ldr	r7, [sp, #36]	; 0x24
   128d4:	ldr	r3, [sp, #40]	; 0x28
   128d8:	ldr	r9, [fp, #20]
   128dc:	ldr	r5, [fp, #16]
   128e0:	ldr	r6, [sp, #16]
   128e4:	tst	r7, #128	; 0x80
   128e8:	bne	126bc <__assert_fail@plt+0x14f8>
   128ec:	b	12a0c <__assert_fail@plt+0x1848>
   128f0:	mov	r6, #0
   128f4:	mov	r0, r7
   128f8:	mov	r1, r9
   128fc:	mov	r3, #0
   12900:	bl	17138 <__assert_fail@plt+0x5f74>
   12904:	ldr	r2, [sp, #40]	; 0x28
   12908:	mov	sl, r0
   1290c:	mov	r9, r1
   12910:	mls	r0, r0, r2, r7
   12914:	add	r0, r0, r0, lsl #2
   12918:	add	r0, r4, r0, lsl #1
   1291c:	udiv	r4, r0, r2
   12920:	mls	r0, r4, r2, r0
   12924:	lsl	r0, r0, #1
   12928:	add	r0, r0, r5, lsr #1
   1292c:	cmp	r0, r2
   12930:	bcs	12948 <__assert_fail@plt+0x1784>
   12934:	add	r1, r0, r5
   12938:	cmn	r0, r5
   1293c:	movwne	r1, #1
   12940:	mov	r5, r1
   12944:	b	12958 <__assert_fail@plt+0x1794>
   12948:	add	r0, r0, r5
   1294c:	mov	r5, #2
   12950:	cmp	r2, r0
   12954:	movwcc	r5, #3
   12958:	add	r6, r6, #1
   1295c:	cmp	r6, #7
   12960:	bhi	12974 <__assert_fail@plt+0x17b0>
   12964:	subs	r0, sl, r2
   12968:	mov	r7, sl
   1296c:	sbcs	r0, r9, #0
   12970:	bcs	128f4 <__assert_fail@plt+0x1730>
   12974:	rsbs	r0, sl, #9
   12978:	rscs	r0, r9, #0
   1297c:	bcc	12a28 <__assert_fail@plt+0x1864>
   12980:	ldr	r0, [sp, #48]	; 0x30
   12984:	cmp	r0, #1
   12988:	bne	12a30 <__assert_fail@plt+0x186c>
   1298c:	and	r0, r4, #1
   12990:	add	r0, r5, r0
   12994:	cmp	r0, #2
   12998:	bhi	12a40 <__assert_fail@plt+0x187c>
   1299c:	b	12a74 <__assert_fail@plt+0x18b0>
   129a0:	mov	r6, #8
   129a4:	and	r0, r7, #256	; 0x100
   129a8:	tst	r7, #64	; 0x40
   129ac:	orrsne	r1, r6, r0
   129b0:	movne	r1, #32
   129b4:	addne	r8, sl, #648	; 0x288
   129b8:	strbne	r1, [sl, #647]	; 0x287
   129bc:	cmp	r6, #0
   129c0:	beq	129e8 <__assert_fail@plt+0x1824>
   129c4:	ldr	r1, [sp, #24]
   129c8:	cmp	r1, #0
   129cc:	moveq	r1, #107	; 0x6b
   129d0:	cmpeq	r6, #1
   129d4:	beq	129e4 <__assert_fail@plt+0x1820>
   129d8:	movw	r1, #30668	; 0x77cc
   129dc:	movt	r1, #1
   129e0:	ldrb	r1, [r1, r6]
   129e4:	strb	r1, [r8], #1
   129e8:	cmp	r0, #0
   129ec:	beq	12a0c <__assert_fail@plt+0x1848>
   129f0:	ldr	r0, [sp, #24]
   129f4:	cmp	r0, #0
   129f8:	cmpne	r6, #0
   129fc:	movne	r0, #105	; 0x69
   12a00:	strbne	r0, [r8], #1
   12a04:	mov	r0, #66	; 0x42
   12a08:	strb	r0, [r8], #1
   12a0c:	mov	r0, #0
   12a10:	strb	r0, [r8]
   12a14:	mov	r0, r4
   12a18:	sub	sp, fp, #48	; 0x30
   12a1c:	vpop	{d8-d9}
   12a20:	add	sp, sp, #4
   12a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a28:	ldr	r0, [sp, #32]
   12a2c:	b	123d0 <__assert_fail@plt+0x120c>
   12a30:	cmp	r0, #0
   12a34:	bne	12a74 <__assert_fail@plt+0x18b0>
   12a38:	cmp	r5, #0
   12a3c:	beq	12a74 <__assert_fail@plt+0x18b0>
   12a40:	adds	r0, sl, #1
   12a44:	add	r4, r4, #1
   12a48:	mov	r5, #0
   12a4c:	adc	r1, r9, #0
   12a50:	cmp	r4, #10
   12a54:	bne	12a74 <__assert_fail@plt+0x18b0>
   12a58:	rsbs	r3, r0, #9
   12a5c:	mov	r4, #0
   12a60:	mov	sl, r0
   12a64:	mov	r9, r1
   12a68:	mov	r5, #0
   12a6c:	rscs	r3, r1, #0
   12a70:	bcc	12ac4 <__assert_fail@plt+0x1900>
   12a74:	ldr	r0, [sp, #36]	; 0x24
   12a78:	tst	r0, #8
   12a7c:	beq	12a94 <__assert_fail@plt+0x18d0>
   12a80:	cmp	r4, #0
   12a84:	bne	12a94 <__assert_fail@plt+0x18d0>
   12a88:	ldr	r0, [sp, #32]
   12a8c:	str	r0, [sp, #44]	; 0x2c
   12a90:	b	12abc <__assert_fail@plt+0x18f8>
   12a94:	ldr	r1, [sp, #28]
   12a98:	ldr	r2, [sp, #16]
   12a9c:	add	r0, r4, #48	; 0x30
   12aa0:	strb	r0, [r1, #646]!	; 0x286
   12aa4:	sub	r0, r1, r2
   12aa8:	ldr	r1, [sp, #12]
   12aac:	str	r0, [sp, #44]	; 0x2c
   12ab0:	bl	10f90 <memcpy@plt>
   12ab4:	ldr	r2, [sp, #40]	; 0x28
   12ab8:	mov	r5, #0
   12abc:	mov	r4, #0
   12ac0:	b	123d4 <__assert_fail@plt+0x1210>
   12ac4:	ldr	r0, [sp, #32]
   12ac8:	mov	r5, #0
   12acc:	mov	sl, #10
   12ad0:	mov	r9, #0
   12ad4:	b	123d0 <__assert_fail@plt+0x120c>
   12ad8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12adc:	add	fp, sp, #24
   12ae0:	sub	sp, sp, #8
   12ae4:	mov	r4, r2
   12ae8:	mov	r8, r1
   12aec:	cmp	r0, #0
   12af0:	bne	12b1c <__assert_fail@plt+0x1958>
   12af4:	movw	r0, #30592	; 0x7780
   12af8:	movt	r0, #1
   12afc:	bl	11038 <getenv@plt>
   12b00:	cmp	r0, #0
   12b04:	bne	12b1c <__assert_fail@plt+0x1958>
   12b08:	movw	r0, #30603	; 0x778b
   12b0c:	movt	r0, #1
   12b10:	bl	11038 <getenv@plt>
   12b14:	cmp	r0, #0
   12b18:	beq	12c40 <__assert_fail@plt+0x1a7c>
   12b1c:	mov	r6, r0
   12b20:	movw	r7, #30692	; 0x77e4
   12b24:	movw	r1, #30680	; 0x77d8
   12b28:	mov	r3, #4
   12b2c:	ldrb	r5, [r6], #1
   12b30:	movt	r7, #1
   12b34:	movt	r1, #1
   12b38:	mov	r2, r7
   12b3c:	cmp	r5, #39	; 0x27
   12b40:	movne	r6, r0
   12b44:	mov	r0, r6
   12b48:	bl	163ec <__assert_fail@plt+0x5228>
   12b4c:	sub	r1, r5, #39	; 0x27
   12b50:	cmp	r0, #0
   12b54:	clz	r1, r1
   12b58:	lsr	r1, r1, #5
   12b5c:	lsl	r5, r1, #2
   12b60:	blt	12b88 <__assert_fail@plt+0x19c4>
   12b64:	ldr	r0, [r7, r0, lsl #2]
   12b68:	mov	r2, #1
   12b6c:	mov	r1, #0
   12b70:	str	r2, [r4]
   12b74:	str	r1, [r4, #4]
   12b78:	orr	r1, r0, r5
   12b7c:	mov	r0, #0
   12b80:	str	r1, [r8]
   12b84:	b	12bb8 <__assert_fail@plt+0x19f4>
   12b88:	movw	r0, #30613	; 0x7795
   12b8c:	add	r1, sp, #4
   12b90:	mov	r2, #0
   12b94:	mov	r3, r4
   12b98:	mov	r7, #0
   12b9c:	movt	r0, #1
   12ba0:	str	r0, [sp]
   12ba4:	mov	r0, r6
   12ba8:	bl	1566c <__assert_fail@plt+0x44a8>
   12bac:	cmp	r0, #0
   12bb0:	beq	12bfc <__assert_fail@plt+0x1a38>
   12bb4:	str	r7, [r8]
   12bb8:	ldrd	r2, [r4]
   12bbc:	orrs	r1, r2, r3
   12bc0:	beq	12bcc <__assert_fail@plt+0x1a08>
   12bc4:	sub	sp, fp, #24
   12bc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12bcc:	movw	r0, #30649	; 0x77b9
   12bd0:	movt	r0, #1
   12bd4:	bl	11038 <getenv@plt>
   12bd8:	cmp	r0, #0
   12bdc:	mov	r2, #512	; 0x200
   12be0:	mov	r0, #4
   12be4:	mov	r1, #0
   12be8:	movweq	r2, #1024	; 0x400
   12bec:	str	r2, [r4]
   12bf0:	str	r1, [r4, #4]
   12bf4:	sub	sp, fp, #24
   12bf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12bfc:	ldrb	r0, [r6]
   12c00:	sub	r0, r0, #48	; 0x30
   12c04:	uxtb	r0, r0
   12c08:	cmp	r0, #10
   12c0c:	bcc	12c38 <__assert_fail@plt+0x1a74>
   12c10:	ldr	r0, [sp, #4]
   12c14:	cmp	r0, r6
   12c18:	beq	12c68 <__assert_fail@plt+0x1aa4>
   12c1c:	ldrb	r2, [r6, #1]
   12c20:	add	r1, r6, #1
   12c24:	mov	r6, r1
   12c28:	sub	r2, r2, #48	; 0x30
   12c2c:	uxtb	r2, r2
   12c30:	cmp	r2, #10
   12c34:	bcs	12c14 <__assert_fail@plt+0x1a50>
   12c38:	mov	r1, r5
   12c3c:	b	12b7c <__assert_fail@plt+0x19b8>
   12c40:	movw	r0, #30649	; 0x77b9
   12c44:	movt	r0, #1
   12c48:	bl	11038 <getenv@plt>
   12c4c:	mov	r2, #512	; 0x200
   12c50:	cmp	r0, #0
   12c54:	mov	r1, #0
   12c58:	movweq	r2, #1024	; 0x400
   12c5c:	str	r2, [r4]
   12c60:	str	r1, [r4, #4]
   12c64:	b	12b7c <__assert_fail@plt+0x19b8>
   12c68:	ldrb	r2, [r0, #-1]
   12c6c:	orr	r1, r5, #384	; 0x180
   12c70:	cmp	r2, #66	; 0x42
   12c74:	mov	r2, r1
   12c78:	orrne	r2, r5, #128	; 0x80
   12c7c:	bne	12c90 <__assert_fail@plt+0x1acc>
   12c80:	ldrb	r0, [r0, #-2]
   12c84:	cmp	r0, #105	; 0x69
   12c88:	orreq	r1, r2, #32
   12c8c:	b	12b7c <__assert_fail@plt+0x19b8>
   12c90:	orr	r1, r2, #32
   12c94:	b	12b7c <__assert_fail@plt+0x19b8>
   12c98:	push	{r4, r5, fp, lr}
   12c9c:	add	fp, sp, #8
   12ca0:	cmp	r0, #0
   12ca4:	beq	12d38 <__assert_fail@plt+0x1b74>
   12ca8:	mov	r1, #47	; 0x2f
   12cac:	mov	r4, r0
   12cb0:	bl	1114c <strrchr@plt>
   12cb4:	cmp	r0, #0
   12cb8:	mov	r5, r4
   12cbc:	addne	r5, r0, #1
   12cc0:	sub	r0, r5, r4
   12cc4:	cmp	r0, #7
   12cc8:	blt	12d1c <__assert_fail@plt+0x1b58>
   12ccc:	movw	r1, #30756	; 0x7824
   12cd0:	sub	r0, r5, #7
   12cd4:	mov	r2, #7
   12cd8:	movt	r1, #1
   12cdc:	bl	111a0 <strncmp@plt>
   12ce0:	cmp	r0, #0
   12ce4:	bne	12d1c <__assert_fail@plt+0x1b58>
   12ce8:	movw	r1, #30764	; 0x782c
   12cec:	mov	r0, r5
   12cf0:	mov	r2, #3
   12cf4:	movt	r1, #1
   12cf8:	bl	111a0 <strncmp@plt>
   12cfc:	cmp	r0, #0
   12d00:	beq	12d0c <__assert_fail@plt+0x1b48>
   12d04:	mov	r4, r5
   12d08:	b	12d1c <__assert_fail@plt+0x1b58>
   12d0c:	movw	r0, #33104	; 0x8150
   12d10:	add	r4, r5, #3
   12d14:	movt	r0, #2
   12d18:	str	r4, [r0]
   12d1c:	movw	r0, #33108	; 0x8154
   12d20:	movt	r0, #2
   12d24:	str	r4, [r0]
   12d28:	movw	r0, #33152	; 0x8180
   12d2c:	movt	r0, #2
   12d30:	str	r4, [r0]
   12d34:	pop	{r4, r5, fp, pc}
   12d38:	movw	r0, #33120	; 0x8160
   12d3c:	mov	r1, #55	; 0x37
   12d40:	mov	r2, #1
   12d44:	movt	r0, #2
   12d48:	ldr	r3, [r0]
   12d4c:	movw	r0, #30700	; 0x77ec
   12d50:	movt	r0, #1
   12d54:	bl	10ff0 <fwrite@plt>
   12d58:	bl	111ac <abort@plt>
   12d5c:	push	{r4, r5, r6, sl, fp, lr}
   12d60:	add	fp, sp, #16
   12d64:	mov	r4, r0
   12d68:	movw	r0, #33160	; 0x8188
   12d6c:	movt	r0, #2
   12d70:	cmp	r4, #0
   12d74:	moveq	r4, r0
   12d78:	bl	110b0 <__errno_location@plt>
   12d7c:	ldr	r6, [r0]
   12d80:	mov	r5, r0
   12d84:	mov	r0, r4
   12d88:	mov	r1, #48	; 0x30
   12d8c:	bl	15528 <__assert_fail@plt+0x4364>
   12d90:	str	r6, [r5]
   12d94:	pop	{r4, r5, r6, sl, fp, pc}
   12d98:	movw	r1, #33160	; 0x8188
   12d9c:	cmp	r0, #0
   12da0:	movt	r1, #2
   12da4:	movne	r1, r0
   12da8:	ldr	r0, [r1]
   12dac:	bx	lr
   12db0:	movw	r2, #33160	; 0x8188
   12db4:	cmp	r0, #0
   12db8:	movt	r2, #2
   12dbc:	movne	r2, r0
   12dc0:	str	r1, [r2]
   12dc4:	bx	lr
   12dc8:	movw	r3, #33160	; 0x8188
   12dcc:	cmp	r0, #0
   12dd0:	movt	r3, #2
   12dd4:	movne	r3, r0
   12dd8:	ubfx	r0, r1, #5, #3
   12ddc:	and	r1, r1, #31
   12de0:	add	r0, r3, r0, lsl #2
   12de4:	ldr	r3, [r0, #8]
   12de8:	eor	r2, r2, r3, lsr r1
   12dec:	and	r2, r2, #1
   12df0:	eor	r2, r3, r2, lsl r1
   12df4:	str	r2, [r0, #8]
   12df8:	mov	r0, #1
   12dfc:	and	r0, r0, r3, lsr r1
   12e00:	bx	lr
   12e04:	movw	r2, #33160	; 0x8188
   12e08:	cmp	r0, #0
   12e0c:	movt	r2, #2
   12e10:	movne	r2, r0
   12e14:	ldr	r0, [r2, #4]
   12e18:	str	r1, [r2, #4]
   12e1c:	bx	lr
   12e20:	movw	r3, #33160	; 0x8188
   12e24:	cmp	r0, #0
   12e28:	movt	r3, #2
   12e2c:	movne	r3, r0
   12e30:	cmp	r1, #0
   12e34:	mov	r0, #10
   12e38:	cmpne	r2, #0
   12e3c:	str	r0, [r3]
   12e40:	bne	12e50 <__assert_fail@plt+0x1c8c>
   12e44:	push	{fp, lr}
   12e48:	mov	fp, sp
   12e4c:	bl	111ac <abort@plt>
   12e50:	str	r1, [r3, #40]	; 0x28
   12e54:	str	r2, [r3, #44]	; 0x2c
   12e58:	bx	lr
   12e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e60:	add	fp, sp, #28
   12e64:	sub	sp, sp, #20
   12e68:	mov	r7, r0
   12e6c:	ldr	r0, [fp, #8]
   12e70:	movw	r5, #33160	; 0x8188
   12e74:	mov	r8, r3
   12e78:	mov	r9, r2
   12e7c:	mov	sl, r1
   12e80:	movt	r5, #2
   12e84:	cmp	r0, #0
   12e88:	movne	r5, r0
   12e8c:	bl	110b0 <__errno_location@plt>
   12e90:	mov	r4, r0
   12e94:	ldm	r5, {r0, r1}
   12e98:	ldr	r2, [r5, #40]	; 0x28
   12e9c:	ldr	r3, [r5, #44]	; 0x2c
   12ea0:	add	r5, r5, #8
   12ea4:	ldr	r6, [r4]
   12ea8:	stm	sp, {r0, r1, r5}
   12eac:	str	r2, [sp, #12]
   12eb0:	str	r3, [sp, #16]
   12eb4:	mov	r0, r7
   12eb8:	mov	r1, sl
   12ebc:	mov	r2, r9
   12ec0:	mov	r3, r8
   12ec4:	bl	12ed4 <__assert_fail@plt+0x1d10>
   12ec8:	str	r6, [r4]
   12ecc:	sub	sp, fp, #28
   12ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ed8:	add	fp, sp, #28
   12edc:	sub	sp, sp, #156	; 0x9c
   12ee0:	str	r0, [sp, #80]	; 0x50
   12ee4:	ldr	r0, [fp, #12]
   12ee8:	mov	r6, r1
   12eec:	mov	r9, r3
   12ef0:	str	r2, [fp, #-84]	; 0xffffffac
   12ef4:	and	r1, r0, #4
   12ef8:	str	r1, [sp, #32]
   12efc:	and	r1, r0, #1
   12f00:	str	r1, [sp, #36]	; 0x24
   12f04:	ubfx	r4, r0, #1, #1
   12f08:	bl	11008 <__ctype_get_mb_cur_max@plt>
   12f0c:	str	r0, [sp, #40]	; 0x28
   12f10:	ldr	r0, [fp, #24]
   12f14:	ldr	r7, [fp, #8]
   12f18:	mov	r1, #0
   12f1c:	mov	r5, #1
   12f20:	str	r1, [fp, #-56]	; 0xffffffc8
   12f24:	mov	r1, #0
   12f28:	str	r1, [sp, #60]	; 0x3c
   12f2c:	str	r0, [sp, #76]	; 0x4c
   12f30:	ldr	r0, [fp, #20]
   12f34:	str	r0, [sp, #72]	; 0x48
   12f38:	mov	r0, #0
   12f3c:	str	r0, [sp, #56]	; 0x38
   12f40:	mov	r0, #0
   12f44:	str	r0, [sp, #92]	; 0x5c
   12f48:	mov	r0, #0
   12f4c:	str	r0, [fp, #-76]	; 0xffffffb4
   12f50:	mov	r0, #0
   12f54:	cmp	r7, #10
   12f58:	bhi	13ed8 <__assert_fail@plt+0x2d14>
   12f5c:	add	r1, pc, #28
   12f60:	mov	sl, r6
   12f64:	ldr	r6, [sp, #80]	; 0x50
   12f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f6c:	mov	r8, #0
   12f70:	mov	r2, #1
   12f74:	mov	r3, #0
   12f78:	mov	lr, r9
   12f7c:	ldr	pc, [r1, r7, lsl #2]
   12f80:	andeq	r3, r1, r4, rrx
   12f84:	muleq	r1, r0, r0
   12f88:	andeq	r3, r1, r4, asr r0
   12f8c:	andeq	r3, r1, ip, asr #32
   12f90:	andeq	r3, r1, r4, lsl #1
   12f94:	ldrdeq	r3, [r1], -r8
   12f98:	andeq	r3, r1, r4, ror r0
   12f9c:	andeq	r3, r1, r4, lsr r1
   12fa0:	andeq	r2, r1, ip, lsr #31
   12fa4:	andeq	r2, r1, ip, lsr #31
   12fa8:	ldrdeq	r2, [r1], -r4
   12fac:	movw	r0, #30846	; 0x787e
   12fb0:	mov	r1, r7
   12fb4:	movt	r0, #1
   12fb8:	bl	148e4 <__assert_fail@plt+0x3720>
   12fbc:	str	r0, [sp, #72]	; 0x48
   12fc0:	movw	r0, #30848	; 0x7880
   12fc4:	mov	r1, r7
   12fc8:	movt	r0, #1
   12fcc:	bl	148e4 <__assert_fail@plt+0x3720>
   12fd0:	str	r0, [sp, #76]	; 0x4c
   12fd4:	str	r5, [fp, #-48]	; 0xffffffd0
   12fd8:	mov	r8, #0
   12fdc:	mov	r5, r7
   12fe0:	tst	r4, #1
   12fe4:	bne	1301c <__assert_fail@plt+0x1e58>
   12fe8:	ldr	r0, [sp, #72]	; 0x48
   12fec:	ldrb	r0, [r0]
   12ff0:	cmp	r0, #0
   12ff4:	beq	1301c <__assert_fail@plt+0x1e58>
   12ff8:	ldr	r1, [sp, #72]	; 0x48
   12ffc:	mov	r8, #0
   13000:	add	r1, r1, #1
   13004:	cmp	r8, sl
   13008:	strbcc	r0, [r6, r8]
   1300c:	ldrb	r0, [r1, r8]
   13010:	add	r8, r8, #1
   13014:	cmp	r0, #0
   13018:	bne	13004 <__assert_fail@plt+0x1e40>
   1301c:	ldr	r7, [sp, #76]	; 0x4c
   13020:	mov	r0, r7
   13024:	bl	11098 <strlen@plt>
   13028:	str	r7, [sp, #92]	; 0x5c
   1302c:	mov	r7, r5
   13030:	ldr	ip, [fp, #-84]	; 0xffffffac
   13034:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13038:	str	r0, [fp, #-76]	; 0xffffffb4
   1303c:	mov	r2, #1
   13040:	mov	r3, r4
   13044:	mov	lr, r9
   13048:	b	13134 <__assert_fail@plt+0x1f70>
   1304c:	mov	r0, #1
   13050:	b	13090 <__assert_fail@plt+0x1ecc>
   13054:	tst	r4, #1
   13058:	bne	13090 <__assert_fail@plt+0x1ecc>
   1305c:	mov	r2, r0
   13060:	b	130b8 <__assert_fail@plt+0x1ef4>
   13064:	mov	r7, #0
   13068:	mov	r8, #0
   1306c:	mov	r2, r0
   13070:	b	13130 <__assert_fail@plt+0x1f6c>
   13074:	mov	r0, #1
   13078:	mov	r8, #0
   1307c:	mov	r7, #5
   13080:	b	130ec <__assert_fail@plt+0x1f28>
   13084:	mov	r2, #1
   13088:	tst	r4, #1
   1308c:	beq	130b8 <__assert_fail@plt+0x1ef4>
   13090:	mov	r1, #1
   13094:	mov	r8, #0
   13098:	mov	r7, #2
   1309c:	mov	r2, r0
   130a0:	mov	r3, #1
   130a4:	str	r1, [fp, #-76]	; 0xffffffb4
   130a8:	movw	r1, #30848	; 0x7880
   130ac:	movt	r1, #1
   130b0:	str	r1, [sp, #92]	; 0x5c
   130b4:	b	13134 <__assert_fail@plt+0x1f70>
   130b8:	cmp	sl, #0
   130bc:	mov	r8, #1
   130c0:	mov	r7, #2
   130c4:	movne	r0, #39	; 0x27
   130c8:	strbne	r0, [r6]
   130cc:	movw	r0, #30848	; 0x7880
   130d0:	movt	r0, #1
   130d4:	b	13124 <__assert_fail@plt+0x1f60>
   130d8:	mov	r7, #5
   130dc:	tst	r4, #1
   130e0:	beq	13108 <__assert_fail@plt+0x1f44>
   130e4:	mov	r0, #1
   130e8:	mov	r8, #0
   130ec:	str	r0, [fp, #-76]	; 0xffffffb4
   130f0:	movw	r0, #30844	; 0x787c
   130f4:	mov	r2, #1
   130f8:	mov	r3, #1
   130fc:	movt	r0, #1
   13100:	str	r0, [sp, #92]	; 0x5c
   13104:	b	13134 <__assert_fail@plt+0x1f70>
   13108:	cmp	sl, #0
   1310c:	mov	r8, #1
   13110:	mov	r2, #1
   13114:	movne	r0, #34	; 0x22
   13118:	strbne	r0, [r6]
   1311c:	movw	r0, #30844	; 0x787c
   13120:	movt	r0, #1
   13124:	str	r0, [sp, #92]	; 0x5c
   13128:	mov	r0, #1
   1312c:	str	r0, [fp, #-76]	; 0xffffffb4
   13130:	mov	r3, #0
   13134:	ldr	r0, [fp, #16]
   13138:	str	r3, [fp, #-72]	; 0xffffffb8
   1313c:	str	r7, [fp, #-64]	; 0xffffffc0
   13140:	str	r2, [sp, #84]	; 0x54
   13144:	cmp	r0, #0
   13148:	movwne	r0, #1
   1314c:	and	r0, r0, r3
   13150:	str	r0, [fp, #-88]	; 0xffffffa8
   13154:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13158:	cmp	r0, #0
   1315c:	movwne	r0, #1
   13160:	subs	r4, r7, #2
   13164:	mov	r7, #0
   13168:	and	r1, r0, r3
   1316c:	str	r4, [fp, #-80]	; 0xffffffb0
   13170:	and	r1, r2, r1
   13174:	str	r1, [sp, #48]	; 0x30
   13178:	clz	r1, r4
   1317c:	lsr	r1, r1, #5
   13180:	and	r1, r1, r3
   13184:	eor	r3, r3, #1
   13188:	str	r1, [sp, #64]	; 0x40
   1318c:	mov	r1, r4
   13190:	str	r3, [sp, #88]	; 0x58
   13194:	movwne	r1, #1
   13198:	orr	r3, r1, r3
   1319c:	and	r1, r1, r2
   131a0:	and	r0, r0, r1
   131a4:	str	r3, [sp, #68]	; 0x44
   131a8:	str	r1, [fp, #-68]	; 0xffffffbc
   131ac:	str	r0, [fp, #-60]	; 0xffffffc4
   131b0:	eor	r0, r2, #1
   131b4:	str	r0, [sp, #52]	; 0x34
   131b8:	cmn	lr, #1
   131bc:	beq	131cc <__assert_fail@plt+0x2008>
   131c0:	cmp	r7, lr
   131c4:	bne	131d8 <__assert_fail@plt+0x2014>
   131c8:	b	13d00 <__assert_fail@plt+0x2b3c>
   131cc:	ldrb	r0, [ip, r7]
   131d0:	cmp	r0, #0
   131d4:	beq	13d08 <__assert_fail@plt+0x2b44>
   131d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   131dc:	mov	r9, #0
   131e0:	str	r5, [fp, #-48]	; 0xffffffd0
   131e4:	cmp	r0, #0
   131e8:	beq	1321c <__assert_fail@plt+0x2058>
   131ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131f0:	add	r4, r7, r0
   131f4:	cmp	r0, #2
   131f8:	bcc	13214 <__assert_fail@plt+0x2050>
   131fc:	cmn	lr, #1
   13200:	bne	13214 <__assert_fail@plt+0x2050>
   13204:	mov	r0, ip
   13208:	bl	11098 <strlen@plt>
   1320c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13210:	mov	lr, r0
   13214:	cmp	r4, lr
   13218:	bls	13224 <__assert_fail@plt+0x2060>
   1321c:	mov	r0, #0
   13220:	b	13264 <__assert_fail@plt+0x20a0>
   13224:	ldr	r1, [sp, #92]	; 0x5c
   13228:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1322c:	add	r0, ip, r7
   13230:	mov	r4, lr
   13234:	bl	10fb4 <memcmp@plt>
   13238:	ldr	r2, [sp, #88]	; 0x58
   1323c:	cmp	r0, #0
   13240:	mov	r1, r0
   13244:	movwne	r1, #1
   13248:	orr	r1, r1, r2
   1324c:	tst	r1, #1
   13250:	beq	13d98 <__assert_fail@plt+0x2bd4>
   13254:	ldr	ip, [fp, #-84]	; 0xffffffac
   13258:	clz	r0, r0
   1325c:	mov	lr, r4
   13260:	lsr	r0, r0, #5
   13264:	str	r0, [fp, #-52]	; 0xffffffcc
   13268:	ldrb	r5, [ip, r7]
   1326c:	cmp	r5, #126	; 0x7e
   13270:	bhi	13628 <__assert_fail@plt+0x2464>
   13274:	add	r3, pc, #16
   13278:	mov	r4, #1
   1327c:	mov	r2, #110	; 0x6e
   13280:	mov	r0, #97	; 0x61
   13284:	mov	r1, #0
   13288:	ldr	pc, [r3, r5, lsl #2]
   1328c:	andeq	r3, r1, r4, lsr #10
   13290:	andeq	r3, r1, r8, lsr #12
   13294:	andeq	r3, r1, r8, lsr #12
   13298:	andeq	r3, r1, r8, lsr #12
   1329c:	andeq	r3, r1, r8, lsr #12
   132a0:	andeq	r3, r1, r8, lsr #12
   132a4:	andeq	r3, r1, r8, lsr #12
   132a8:	ldrdeq	r3, [r1], -ip
   132ac:	andeq	r3, r1, r4, lsl #10
   132b0:	strdeq	r3, [r1], -ip
   132b4:	andeq	r3, r1, r0, lsl r5
   132b8:	muleq	r1, r0, r5
   132bc:	strdeq	r3, [r1], -r4
   132c0:	andeq	r3, r1, ip, lsl #10
   132c4:	andeq	r3, r1, r8, lsr #12
   132c8:	andeq	r3, r1, r8, lsr #12
   132cc:	andeq	r3, r1, r8, lsr #12
   132d0:	andeq	r3, r1, r8, lsr #12
   132d4:	andeq	r3, r1, r8, lsr #12
   132d8:	andeq	r3, r1, r8, lsr #12
   132dc:	andeq	r3, r1, r8, lsr #12
   132e0:	andeq	r3, r1, r8, lsr #12
   132e4:	andeq	r3, r1, r8, lsr #12
   132e8:	andeq	r3, r1, r8, lsr #12
   132ec:	andeq	r3, r1, r8, lsr #12
   132f0:	andeq	r3, r1, r8, lsr #12
   132f4:	andeq	r3, r1, r8, lsr #12
   132f8:	andeq	r3, r1, r8, lsr #12
   132fc:	andeq	r3, r1, r8, lsr #12
   13300:	andeq	r3, r1, r8, lsr #12
   13304:	andeq	r3, r1, r8, lsr #12
   13308:	andeq	r3, r1, r8, lsr #12
   1330c:	muleq	r1, r4, r6
   13310:	muleq	r1, r8, r6
   13314:	muleq	r1, r8, r6
   13318:	muleq	r1, ip, r4
   1331c:	muleq	r1, r8, r6
   13320:	andeq	r3, r1, r8, lsl #9
   13324:	muleq	r1, r8, r6
   13328:	muleq	r1, r8, r5
   1332c:	muleq	r1, r8, r6
   13330:	muleq	r1, r8, r6
   13334:	muleq	r1, r8, r6
   13338:	andeq	r3, r1, r8, lsl #9
   1333c:	andeq	r3, r1, r8, lsl #9
   13340:	andeq	r3, r1, r8, lsl #9
   13344:	andeq	r3, r1, r8, lsl #9
   13348:	andeq	r3, r1, r8, lsl #9
   1334c:	andeq	r3, r1, r8, lsl #9
   13350:	andeq	r3, r1, r8, lsl #9
   13354:	andeq	r3, r1, r8, lsl #9
   13358:	andeq	r3, r1, r8, lsl #9
   1335c:	andeq	r3, r1, r8, lsl #9
   13360:	andeq	r3, r1, r8, lsl #9
   13364:	andeq	r3, r1, r8, lsl #9
   13368:	andeq	r3, r1, r8, lsl #9
   1336c:	andeq	r3, r1, r8, lsl #9
   13370:	andeq	r3, r1, r8, lsl #9
   13374:	andeq	r3, r1, r8, lsl #9
   13378:	muleq	r1, r8, r6
   1337c:	muleq	r1, r8, r6
   13380:	muleq	r1, r8, r6
   13384:	muleq	r1, r8, r6
   13388:	andeq	r3, r1, r4, ror #10
   1338c:	andeq	r3, r1, r8, lsr #12
   13390:	andeq	r3, r1, r8, lsl #9
   13394:	andeq	r3, r1, r8, lsl #9
   13398:	andeq	r3, r1, r8, lsl #9
   1339c:	andeq	r3, r1, r8, lsl #9
   133a0:	andeq	r3, r1, r8, lsl #9
   133a4:	andeq	r3, r1, r8, lsl #9
   133a8:	andeq	r3, r1, r8, lsl #9
   133ac:	andeq	r3, r1, r8, lsl #9
   133b0:	andeq	r3, r1, r8, lsl #9
   133b4:	andeq	r3, r1, r8, lsl #9
   133b8:	andeq	r3, r1, r8, lsl #9
   133bc:	andeq	r3, r1, r8, lsl #9
   133c0:	andeq	r3, r1, r8, lsl #9
   133c4:	andeq	r3, r1, r8, lsl #9
   133c8:	andeq	r3, r1, r8, lsl #9
   133cc:	andeq	r3, r1, r8, lsl #9
   133d0:	andeq	r3, r1, r8, lsl #9
   133d4:	andeq	r3, r1, r8, lsl #9
   133d8:	andeq	r3, r1, r8, lsl #9
   133dc:	andeq	r3, r1, r8, lsl #9
   133e0:	andeq	r3, r1, r8, lsl #9
   133e4:	andeq	r3, r1, r8, lsl #9
   133e8:	andeq	r3, r1, r8, lsl #9
   133ec:	andeq	r3, r1, r8, lsl #9
   133f0:	andeq	r3, r1, r8, lsl #9
   133f4:	andeq	r3, r1, r8, lsl #9
   133f8:	muleq	r1, r8, r6
   133fc:	ldrdeq	r3, [r1], -r0
   13400:	andeq	r3, r1, r8, lsl #9
   13404:	muleq	r1, r8, r6
   13408:	andeq	r3, r1, r8, lsl #9
   1340c:	muleq	r1, r8, r6
   13410:	andeq	r3, r1, r8, lsl #9
   13414:	andeq	r3, r1, r8, lsl #9
   13418:	andeq	r3, r1, r8, lsl #9
   1341c:	andeq	r3, r1, r8, lsl #9
   13420:	andeq	r3, r1, r8, lsl #9
   13424:	andeq	r3, r1, r8, lsl #9
   13428:	andeq	r3, r1, r8, lsl #9
   1342c:	andeq	r3, r1, r8, lsl #9
   13430:	andeq	r3, r1, r8, lsl #9
   13434:	andeq	r3, r1, r8, lsl #9
   13438:	andeq	r3, r1, r8, lsl #9
   1343c:	andeq	r3, r1, r8, lsl #9
   13440:	andeq	r3, r1, r8, lsl #9
   13444:	andeq	r3, r1, r8, lsl #9
   13448:	andeq	r3, r1, r8, lsl #9
   1344c:	andeq	r3, r1, r8, lsl #9
   13450:	andeq	r3, r1, r8, lsl #9
   13454:	andeq	r3, r1, r8, lsl #9
   13458:	andeq	r3, r1, r8, lsl #9
   1345c:	andeq	r3, r1, r8, lsl #9
   13460:	andeq	r3, r1, r8, lsl #9
   13464:	andeq	r3, r1, r8, lsl #9
   13468:	andeq	r3, r1, r8, lsl #9
   1346c:	andeq	r3, r1, r8, lsl #9
   13470:	andeq	r3, r1, r8, lsl #9
   13474:	andeq	r3, r1, r8, lsl #9
   13478:			; <UNDEFINED> instruction: 0x000134b0
   1347c:	muleq	r1, r8, r6
   13480:			; <UNDEFINED> instruction: 0x000134b0
   13484:	muleq	r1, ip, r4
   13488:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1348c:	cmp	r0, #0
   13490:	beq	136f0 <__assert_fail@plt+0x252c>
   13494:	ldr	r0, [fp, #16]
   13498:	b	136f4 <__assert_fail@plt+0x2530>
   1349c:	mov	r4, #0
   134a0:	cmp	r7, #0
   134a4:	beq	13694 <__assert_fail@plt+0x24d0>
   134a8:	mov	r9, #0
   134ac:	b	13488 <__assert_fail@plt+0x22c4>
   134b0:	mov	r4, #0
   134b4:	cmn	lr, #1
   134b8:	beq	13678 <__assert_fail@plt+0x24b4>
   134bc:	cmp	r7, #0
   134c0:	bne	134a8 <__assert_fail@plt+0x22e4>
   134c4:	cmp	lr, #1
   134c8:	beq	13694 <__assert_fail@plt+0x24d0>
   134cc:	b	134a8 <__assert_fail@plt+0x22e4>
   134d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134d4:	cmp	r0, #2
   134d8:	bne	136b8 <__assert_fail@plt+0x24f4>
   134dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134e0:	tst	r0, #1
   134e4:	bne	13db4 <__assert_fail@plt+0x2bf0>
   134e8:	mov	r9, #0
   134ec:	mov	r0, #92	; 0x5c
   134f0:	b	136cc <__assert_fail@plt+0x2508>
   134f4:	mov	r0, #102	; 0x66
   134f8:	b	136dc <__assert_fail@plt+0x2518>
   134fc:	mov	r2, #116	; 0x74
   13500:	b	13510 <__assert_fail@plt+0x234c>
   13504:	mov	r0, #98	; 0x62
   13508:	b	136dc <__assert_fail@plt+0x2518>
   1350c:	mov	r2, #114	; 0x72
   13510:	ldr	r0, [sp, #68]	; 0x44
   13514:	tst	r0, #1
   13518:	mov	r0, r2
   1351c:	bne	136dc <__assert_fail@plt+0x2518>
   13520:	b	13db4 <__assert_fail@plt+0x2bf0>
   13524:	ldr	r0, [sp, #84]	; 0x54
   13528:	tst	r0, #1
   1352c:	beq	137cc <__assert_fail@plt+0x2608>
   13530:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13534:	tst	r0, #1
   13538:	bne	13ec4 <__assert_fail@plt+0x2d00>
   1353c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13540:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13544:	cmp	r0, #2
   13548:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1354c:	movwne	r0, #1
   13550:	orr	r0, r0, r2
   13554:	tst	r0, #1
   13558:	beq	13b9c <__assert_fail@plt+0x29d8>
   1355c:	mov	r0, r8
   13560:	b	13bd0 <__assert_fail@plt+0x2a0c>
   13564:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13568:	mov	r9, #0
   1356c:	mov	r5, #63	; 0x3f
   13570:	cmp	r0, #5
   13574:	beq	13980 <__assert_fail@plt+0x27bc>
   13578:	cmp	r0, #2
   1357c:	bne	13a24 <__assert_fail@plt+0x2860>
   13580:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13584:	tst	r0, #1
   13588:	beq	13a28 <__assert_fail@plt+0x2864>
   1358c:	b	13db4 <__assert_fail@plt+0x2bf0>
   13590:	mov	r0, #118	; 0x76
   13594:	b	136dc <__assert_fail@plt+0x2518>
   13598:	mov	r0, #1
   1359c:	mov	r5, #39	; 0x27
   135a0:	str	r0, [sp, #60]	; 0x3c
   135a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135a8:	cmp	r0, #2
   135ac:	bne	13620 <__assert_fail@plt+0x245c>
   135b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   135b4:	tst	r0, #1
   135b8:	bne	13db4 <__assert_fail@plt+0x2bf0>
   135bc:	ldr	r2, [sp, #56]	; 0x38
   135c0:	clz	r1, sl
   135c4:	mov	r9, #0
   135c8:	lsr	r1, r1, #5
   135cc:	cmp	r2, #0
   135d0:	mov	r0, r2
   135d4:	movwne	r0, #1
   135d8:	orrs	r0, r0, r1
   135dc:	moveq	r2, sl
   135e0:	moveq	sl, r0
   135e4:	cmp	r8, sl
   135e8:	str	r2, [sp, #56]	; 0x38
   135ec:	movcc	r0, #39	; 0x27
   135f0:	strbcc	r0, [r6, r8]
   135f4:	add	r0, r8, #1
   135f8:	cmp	r0, sl
   135fc:	movcc	r1, #92	; 0x5c
   13600:	strbcc	r1, [r6, r0]
   13604:	add	r0, r8, #2
   13608:	add	r8, r8, #3
   1360c:	cmp	r0, sl
   13610:	movcc	r1, #39	; 0x27
   13614:	strbcc	r1, [r6, r0]
   13618:	mov	r0, #0
   1361c:	str	r0, [fp, #-56]	; 0xffffffc8
   13620:	mov	r4, #1
   13624:	b	13488 <__assert_fail@plt+0x22c4>
   13628:	ldr	r0, [sp, #40]	; 0x28
   1362c:	cmp	r0, #1
   13630:	bne	137f8 <__assert_fail@plt+0x2634>
   13634:	str	lr, [sp, #28]
   13638:	bl	11080 <__ctype_b_loc@plt>
   1363c:	ldr	r0, [r0]
   13640:	ldr	ip, [fp, #-84]	; 0xffffffac
   13644:	mov	r1, #1
   13648:	add	r0, r0, r5, lsl #1
   1364c:	ldrb	r0, [r0, #1]
   13650:	ubfx	r4, r0, #6, #1
   13654:	ldr	r0, [sp, #52]	; 0x34
   13658:	mov	r2, r1
   1365c:	cmp	r1, #1
   13660:	orr	r0, r4, r0
   13664:	bhi	13a30 <__assert_fail@plt+0x286c>
   13668:	tst	r0, #1
   1366c:	beq	13a30 <__assert_fail@plt+0x286c>
   13670:	ldr	lr, [sp, #28]
   13674:	b	13488 <__assert_fail@plt+0x22c4>
   13678:	cmp	r7, #0
   1367c:	ldrbeq	r0, [ip, #1]
   13680:	cmpeq	r0, #0
   13684:	beq	13694 <__assert_fail@plt+0x24d0>
   13688:	mvn	lr, #0
   1368c:	mov	r9, #0
   13690:	b	13488 <__assert_fail@plt+0x22c4>
   13694:	mov	r1, #1
   13698:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1369c:	cmp	r0, #2
   136a0:	bne	136b0 <__assert_fail@plt+0x24ec>
   136a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   136a8:	tst	r0, #1
   136ac:	bne	13db4 <__assert_fail@plt+0x2bf0>
   136b0:	mov	r4, r1
   136b4:	b	13488 <__assert_fail@plt+0x22c4>
   136b8:	ldr	r1, [sp, #48]	; 0x30
   136bc:	mov	r9, #0
   136c0:	mov	r0, #92	; 0x5c
   136c4:	cmp	r1, #0
   136c8:	beq	136dc <__assert_fail@plt+0x2518>
   136cc:	mov	r4, #0
   136d0:	cmp	r9, #0
   136d4:	beq	13c68 <__assert_fail@plt+0x2aa4>
   136d8:	b	13ca4 <__assert_fail@plt+0x2ae0>
   136dc:	ldr	r1, [sp, #84]	; 0x54
   136e0:	mov	r4, #0
   136e4:	mov	r9, #0
   136e8:	tst	r1, #1
   136ec:	bne	1372c <__assert_fail@plt+0x2568>
   136f0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   136f4:	cmp	r0, #0
   136f8:	mov	r0, r5
   136fc:	beq	13720 <__assert_fail@plt+0x255c>
   13700:	ldr	r1, [fp, #16]
   13704:	ubfx	r0, r5, #5, #3
   13708:	mov	r2, #1
   1370c:	ldr	r0, [r1, r0, lsl #2]
   13710:	and	r1, r5, #31
   13714:	tst	r0, r2, lsl r1
   13718:	mov	r0, r5
   1371c:	bne	1372c <__assert_fail@plt+0x2568>
   13720:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13724:	cmp	r1, #0
   13728:	beq	13c60 <__assert_fail@plt+0x2a9c>
   1372c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13730:	tst	r1, #1
   13734:	bne	13d8c <__assert_fail@plt+0x2bc8>
   13738:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1373c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13740:	cmp	r1, #2
   13744:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13748:	movwne	r1, #1
   1374c:	orr	r1, r1, r2
   13750:	tst	r1, #1
   13754:	beq	13760 <__assert_fail@plt+0x259c>
   13758:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1375c:	b	1379c <__assert_fail@plt+0x25d8>
   13760:	cmp	r8, sl
   13764:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13768:	movcc	r1, #39	; 0x27
   1376c:	strbcc	r1, [r6, r8]
   13770:	add	r1, r8, #1
   13774:	cmp	r1, sl
   13778:	movcc	r2, #36	; 0x24
   1377c:	strbcc	r2, [r6, r1]
   13780:	add	r1, r8, #2
   13784:	add	r8, r8, #3
   13788:	cmp	r1, sl
   1378c:	movcc	r2, #39	; 0x27
   13790:	strbcc	r2, [r6, r1]
   13794:	mov	r1, #1
   13798:	str	r1, [fp, #-56]	; 0xffffffc8
   1379c:	cmp	r8, sl
   137a0:	movcc	r1, #92	; 0x5c
   137a4:	strbcc	r1, [r6, r8]
   137a8:	add	r8, r8, #1
   137ac:	cmp	r8, sl
   137b0:	and	r5, r5, r4
   137b4:	add	r7, r7, #1
   137b8:	strbcc	r0, [r6, r8]
   137bc:	add	r8, r8, #1
   137c0:	cmn	lr, #1
   137c4:	bne	131c0 <__assert_fail@plt+0x1ffc>
   137c8:	b	131cc <__assert_fail@plt+0x2008>
   137cc:	ldr	r0, [sp, #36]	; 0x24
   137d0:	mov	r4, #0
   137d4:	mov	r9, #0
   137d8:	mov	r5, #0
   137dc:	cmp	r0, #0
   137e0:	beq	136f0 <__assert_fail@plt+0x252c>
   137e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   137e8:	add	r7, r7, #1
   137ec:	cmn	lr, #1
   137f0:	bne	131c0 <__assert_fail@plt+0x1ffc>
   137f4:	b	131cc <__assert_fail@plt+0x2008>
   137f8:	mov	r0, #0
   137fc:	cmn	lr, #1
   13800:	str	r0, [fp, #-36]	; 0xffffffdc
   13804:	str	r0, [fp, #-40]	; 0xffffffd8
   13808:	bne	1381c <__assert_fail@plt+0x2658>
   1380c:	mov	r0, ip
   13810:	bl	11098 <strlen@plt>
   13814:	ldr	ip, [fp, #-84]	; 0xffffffac
   13818:	mov	lr, r0
   1381c:	add	r0, ip, r7
   13820:	mov	r4, #1
   13824:	mov	r6, #0
   13828:	str	lr, [sp, #28]
   1382c:	str	r0, [sp, #24]
   13830:	sub	r0, fp, #40	; 0x28
   13834:	mov	r3, r0
   13838:	str	r6, [sp, #44]	; 0x2c
   1383c:	add	r6, r6, r7
   13840:	sub	r0, fp, #44	; 0x2c
   13844:	add	r1, ip, r6
   13848:	sub	r2, lr, r6
   1384c:	bl	16bd4 <__assert_fail@plt+0x5a10>
   13850:	cmp	r0, #0
   13854:	beq	13cec <__assert_fail@plt+0x2b28>
   13858:	cmn	r0, #1
   1385c:	beq	13cac <__assert_fail@plt+0x2ae8>
   13860:	ldr	lr, [sp, #28]
   13864:	cmn	r0, #2
   13868:	beq	13cb4 <__assert_fail@plt+0x2af0>
   1386c:	ldr	r2, [sp, #64]	; 0x40
   13870:	cmp	r0, #2
   13874:	mov	r1, #0
   13878:	movwcc	r1, #1
   1387c:	eor	r2, r2, #1
   13880:	orrs	r1, r2, r1
   13884:	bne	13944 <__assert_fail@plt+0x2780>
   13888:	ldr	r1, [sp, #44]	; 0x2c
   1388c:	ldr	r2, [sp, #24]
   13890:	add	r1, r2, r1
   13894:	mov	r2, #1
   13898:	ldrb	r3, [r1, r2]
   1389c:	sub	r3, r3, #91	; 0x5b
   138a0:	cmp	r3, #33	; 0x21
   138a4:	bhi	13938 <__assert_fail@plt+0x2774>
   138a8:	add	r6, pc, #0
   138ac:	ldr	pc, [r6, r3, lsl #2]
   138b0:	andeq	r3, r1, ip, lsr #27
   138b4:	andeq	r3, r1, ip, lsr #27
   138b8:	andeq	r3, r1, r8, lsr r9
   138bc:	andeq	r3, r1, ip, lsr #27
   138c0:	andeq	r3, r1, r8, lsr r9
   138c4:	andeq	r3, r1, ip, lsr #27
   138c8:	andeq	r3, r1, r8, lsr r9
   138cc:	andeq	r3, r1, r8, lsr r9
   138d0:	andeq	r3, r1, r8, lsr r9
   138d4:	andeq	r3, r1, r8, lsr r9
   138d8:	andeq	r3, r1, r8, lsr r9
   138dc:	andeq	r3, r1, r8, lsr r9
   138e0:	andeq	r3, r1, r8, lsr r9
   138e4:	andeq	r3, r1, r8, lsr r9
   138e8:	andeq	r3, r1, r8, lsr r9
   138ec:	andeq	r3, r1, r8, lsr r9
   138f0:	andeq	r3, r1, r8, lsr r9
   138f4:	andeq	r3, r1, r8, lsr r9
   138f8:	andeq	r3, r1, r8, lsr r9
   138fc:	andeq	r3, r1, r8, lsr r9
   13900:	andeq	r3, r1, r8, lsr r9
   13904:	andeq	r3, r1, r8, lsr r9
   13908:	andeq	r3, r1, r8, lsr r9
   1390c:	andeq	r3, r1, r8, lsr r9
   13910:	andeq	r3, r1, r8, lsr r9
   13914:	andeq	r3, r1, r8, lsr r9
   13918:	andeq	r3, r1, r8, lsr r9
   1391c:	andeq	r3, r1, r8, lsr r9
   13920:	andeq	r3, r1, r8, lsr r9
   13924:	andeq	r3, r1, r8, lsr r9
   13928:	andeq	r3, r1, r8, lsr r9
   1392c:	andeq	r3, r1, r8, lsr r9
   13930:	andeq	r3, r1, r8, lsr r9
   13934:	andeq	r3, r1, ip, lsr #27
   13938:	add	r2, r2, #1
   1393c:	cmp	r2, r0
   13940:	bcc	13898 <__assert_fail@plt+0x26d4>
   13944:	ldr	r6, [sp, #44]	; 0x2c
   13948:	add	r6, r0, r6
   1394c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13950:	bl	10fe4 <iswprint@plt>
   13954:	cmp	r0, #0
   13958:	movwne	r0, #1
   1395c:	and	r4, r4, r0
   13960:	sub	r0, fp, #40	; 0x28
   13964:	bl	10fa8 <mbsinit@plt>
   13968:	ldr	lr, [sp, #28]
   1396c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13970:	sub	r3, fp, #40	; 0x28
   13974:	cmp	r0, #0
   13978:	beq	13838 <__assert_fail@plt+0x2674>
   1397c:	b	13cf4 <__assert_fail@plt+0x2b30>
   13980:	ldr	r0, [sp, #32]
   13984:	cmp	r0, #0
   13988:	beq	13a24 <__assert_fail@plt+0x2860>
   1398c:	add	r0, r7, #2
   13990:	cmp	r0, lr
   13994:	bcs	13a24 <__assert_fail@plt+0x2860>
   13998:	add	r1, ip, r7
   1399c:	ldrb	r1, [r1, #1]
   139a0:	cmp	r1, #63	; 0x3f
   139a4:	bne	13a24 <__assert_fail@plt+0x2860>
   139a8:	ldrb	r5, [ip, r0]
   139ac:	sub	r1, r5, #33	; 0x21
   139b0:	cmp	r1, #29
   139b4:	bhi	13a24 <__assert_fail@plt+0x2860>
   139b8:	movw	r3, #20929	; 0x51c1
   139bc:	mov	r2, #1
   139c0:	movt	r3, #14336	; 0x3800
   139c4:	tst	r3, r2, lsl r1
   139c8:	beq	13a24 <__assert_fail@plt+0x2860>
   139cc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   139d0:	tst	r1, #1
   139d4:	bne	13ecc <__assert_fail@plt+0x2d08>
   139d8:	cmp	r8, sl
   139dc:	mov	r7, r0
   139e0:	mov	r4, #0
   139e4:	movcc	r1, #63	; 0x3f
   139e8:	strbcc	r1, [r6, r8]
   139ec:	add	r1, r8, #1
   139f0:	cmp	r1, sl
   139f4:	movcc	r2, #34	; 0x22
   139f8:	strbcc	r2, [r6, r1]
   139fc:	add	r1, r8, #2
   13a00:	cmp	r1, sl
   13a04:	movcc	r2, #34	; 0x22
   13a08:	strbcc	r2, [r6, r1]
   13a0c:	add	r1, r8, #3
   13a10:	add	r8, r8, #4
   13a14:	cmp	r1, sl
   13a18:	movcc	r2, #63	; 0x3f
   13a1c:	strbcc	r2, [r6, r1]
   13a20:	b	13488 <__assert_fail@plt+0x22c4>
   13a24:	mov	r5, #63	; 0x3f
   13a28:	mov	r4, #0
   13a2c:	b	13488 <__assert_fail@plt+0x22c4>
   13a30:	add	r1, r2, r7
   13a34:	ldr	lr, [sp, #28]
   13a38:	mov	r3, #0
   13a3c:	str	r1, [sp, #44]	; 0x2c
   13a40:	add	r1, r7, #1
   13a44:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a48:	tst	r0, #1
   13a4c:	bne	13b20 <__assert_fail@plt+0x295c>
   13a50:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13a54:	tst	r2, #1
   13a58:	bne	13e14 <__assert_fail@plt+0x2c50>
   13a5c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13a60:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a64:	cmp	r7, #2
   13a68:	movwne	r3, #1
   13a6c:	orr	r3, r3, r2
   13a70:	tst	r3, #1
   13a74:	bne	13ab0 <__assert_fail@plt+0x28ec>
   13a78:	cmp	r8, sl
   13a7c:	add	r3, r8, #1
   13a80:	movcc	r2, #39	; 0x27
   13a84:	strbcc	r2, [r6, r8]
   13a88:	cmp	r3, sl
   13a8c:	movcc	r2, #36	; 0x24
   13a90:	strbcc	r2, [r6, r3]
   13a94:	add	r3, r8, #2
   13a98:	add	r8, r8, #3
   13a9c:	cmp	r3, sl
   13aa0:	movcc	r2, #39	; 0x27
   13aa4:	strbcc	r2, [r6, r3]
   13aa8:	mov	r2, #1
   13aac:	str	r2, [fp, #-56]	; 0xffffffc8
   13ab0:	cmp	r8, sl
   13ab4:	movcc	r3, #92	; 0x5c
   13ab8:	strbcc	r3, [r6, r8]
   13abc:	add	r3, r8, #1
   13ac0:	cmp	r3, sl
   13ac4:	andcc	r7, r5, #192	; 0xc0
   13ac8:	movcc	r2, #48	; 0x30
   13acc:	orrcc	r7, r2, r7, lsr #6
   13ad0:	strbcc	r7, [r6, r3]
   13ad4:	add	r3, r8, #2
   13ad8:	add	r8, r8, #3
   13adc:	cmp	r3, sl
   13ae0:	lsrcc	r7, r5, #3
   13ae4:	movcc	r2, #6
   13ae8:	bficc	r7, r2, #3, #29
   13aec:	mov	r2, #6
   13af0:	strbcc	r7, [r6, r3]
   13af4:	bfi	r5, r2, #3, #29
   13af8:	mov	r3, #1
   13afc:	b	13b44 <__assert_fail@plt+0x2980>
   13b00:	cmp	r8, sl
   13b04:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b08:	strbcc	r5, [r6, r8]
   13b0c:	add	r8, r8, #1
   13b10:	ldrb	r5, [ip, r1]
   13b14:	add	r1, r1, #1
   13b18:	tst	r0, #1
   13b1c:	beq	13a50 <__assert_fail@plt+0x288c>
   13b20:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b24:	tst	r2, #1
   13b28:	beq	13b3c <__assert_fail@plt+0x2978>
   13b2c:	cmp	r8, sl
   13b30:	movcc	r7, #92	; 0x5c
   13b34:	strbcc	r7, [r6, r8]
   13b38:	add	r8, r8, #1
   13b3c:	mov	r2, #0
   13b40:	str	r2, [fp, #-52]	; 0xffffffcc
   13b44:	ldr	r2, [sp, #44]	; 0x2c
   13b48:	and	r9, r3, #1
   13b4c:	cmp	r2, r1
   13b50:	bls	13c50 <__assert_fail@plt+0x2a8c>
   13b54:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b58:	cmp	r9, #0
   13b5c:	movwne	r9, #1
   13b60:	mvn	r7, r2
   13b64:	orr	r7, r7, r9
   13b68:	tst	r7, #1
   13b6c:	bne	13b00 <__assert_fail@plt+0x293c>
   13b70:	cmp	r8, sl
   13b74:	movcc	r7, #39	; 0x27
   13b78:	strbcc	r7, [r6, r8]
   13b7c:	add	r7, r8, #1
   13b80:	add	r8, r8, #2
   13b84:	cmp	r7, sl
   13b88:	movcc	r2, #39	; 0x27
   13b8c:	strbcc	r2, [r6, r7]
   13b90:	mov	r2, #0
   13b94:	str	r2, [fp, #-56]	; 0xffffffc8
   13b98:	b	13b00 <__assert_fail@plt+0x293c>
   13b9c:	cmp	r8, sl
   13ba0:	mov	r2, #1
   13ba4:	movcc	r0, #39	; 0x27
   13ba8:	strbcc	r0, [r6, r8]
   13bac:	add	r0, r8, #1
   13bb0:	cmp	r0, sl
   13bb4:	movcc	r1, #36	; 0x24
   13bb8:	strbcc	r1, [r6, r0]
   13bbc:	add	r0, r8, #2
   13bc0:	cmp	r0, sl
   13bc4:	movcc	r1, #39	; 0x27
   13bc8:	strbcc	r1, [r6, r0]
   13bcc:	add	r0, r8, #3
   13bd0:	cmp	r0, sl
   13bd4:	add	r8, r0, #1
   13bd8:	str	r2, [fp, #-56]	; 0xffffffc8
   13bdc:	movcc	r1, #92	; 0x5c
   13be0:	strbcc	r1, [r6, r0]
   13be4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13be8:	cmp	r1, #2
   13bec:	beq	13c40 <__assert_fail@plt+0x2a7c>
   13bf0:	add	r1, r7, #1
   13bf4:	mov	r4, #0
   13bf8:	mov	r9, #1
   13bfc:	mov	r5, #48	; 0x30
   13c00:	cmp	r1, lr
   13c04:	bcs	13488 <__assert_fail@plt+0x22c4>
   13c08:	ldrb	r1, [ip, r1]
   13c0c:	sub	r1, r1, #48	; 0x30
   13c10:	uxtb	r1, r1
   13c14:	cmp	r1, #9
   13c18:	bhi	13488 <__assert_fail@plt+0x22c4>
   13c1c:	cmp	r8, sl
   13c20:	movcc	r1, #48	; 0x30
   13c24:	strbcc	r1, [r6, r8]
   13c28:	add	r1, r0, #2
   13c2c:	add	r8, r0, #3
   13c30:	cmp	r1, sl
   13c34:	movcc	r2, #48	; 0x30
   13c38:	strbcc	r2, [r6, r1]
   13c3c:	b	13488 <__assert_fail@plt+0x22c4>
   13c40:	mov	r0, #48	; 0x30
   13c44:	mov	r9, #1
   13c48:	mov	r4, #0
   13c4c:	b	13720 <__assert_fail@plt+0x255c>
   13c50:	cmp	r9, #0
   13c54:	sub	r7, r1, #1
   13c58:	mov	r0, r5
   13c5c:	movwne	r9, #1
   13c60:	cmp	r9, #0
   13c64:	bne	13ca4 <__assert_fail@plt+0x2ae0>
   13c68:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13c6c:	tst	r1, #1
   13c70:	beq	13ca4 <__assert_fail@plt+0x2ae0>
   13c74:	cmp	r8, sl
   13c78:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13c7c:	movcc	r1, #39	; 0x27
   13c80:	strbcc	r1, [r6, r8]
   13c84:	add	r1, r8, #1
   13c88:	add	r8, r8, #2
   13c8c:	cmp	r1, sl
   13c90:	movcc	r2, #39	; 0x27
   13c94:	strbcc	r2, [r6, r1]
   13c98:	mov	r1, #0
   13c9c:	str	r1, [fp, #-56]	; 0xffffffc8
   13ca0:	b	137ac <__assert_fail@plt+0x25e8>
   13ca4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13ca8:	b	137ac <__assert_fail@plt+0x25e8>
   13cac:	mov	r4, #0
   13cb0:	b	13cec <__assert_fail@plt+0x2b28>
   13cb4:	mov	r4, #0
   13cb8:	cmp	lr, r6
   13cbc:	bls	13cec <__assert_fail@plt+0x2b28>
   13cc0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cc4:	ldr	r6, [sp, #44]	; 0x2c
   13cc8:	ldr	r0, [sp, #24]
   13ccc:	ldrb	r0, [r0, r6]
   13cd0:	cmp	r0, #0
   13cd4:	beq	13cf4 <__assert_fail@plt+0x2b30>
   13cd8:	add	r6, r6, #1
   13cdc:	add	r0, r7, r6
   13ce0:	cmp	r0, lr
   13ce4:	bcc	13cc8 <__assert_fail@plt+0x2b04>
   13ce8:	b	13cf4 <__assert_fail@plt+0x2b30>
   13cec:	ldr	ip, [fp, #-84]	; 0xffffffac
   13cf0:	ldr	r6, [sp, #44]	; 0x2c
   13cf4:	mov	r1, r6
   13cf8:	ldr	r6, [sp, #80]	; 0x50
   13cfc:	b	13654 <__assert_fail@plt+0x2490>
   13d00:	mov	lr, r7
   13d04:	b	13d0c <__assert_fail@plt+0x2b48>
   13d08:	mvn	lr, #0
   13d0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d10:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13d14:	eor	r0, r7, #2
   13d18:	orr	r0, r0, r8
   13d1c:	clz	r0, r0
   13d20:	lsr	r0, r0, #5
   13d24:	tst	r1, r0
   13d28:	bne	13db4 <__assert_fail@plt+0x2bf0>
   13d2c:	mov	r0, r1
   13d30:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13d34:	cmp	r7, #2
   13d38:	movwne	r1, #1
   13d3c:	orr	r0, r0, r1
   13d40:	tst	r0, #1
   13d44:	ldreq	r0, [sp, #60]	; 0x3c
   13d48:	eoreq	r0, r0, #1
   13d4c:	tsteq	r0, #1
   13d50:	bne	13e60 <__assert_fail@plt+0x2c9c>
   13d54:	mov	r9, lr
   13d58:	tst	r5, #1
   13d5c:	bne	13e1c <__assert_fail@plt+0x2c58>
   13d60:	ldr	r6, [sp, #56]	; 0x38
   13d64:	mov	r4, #0
   13d68:	cmp	r6, #0
   13d6c:	beq	13e58 <__assert_fail@plt+0x2c94>
   13d70:	ldr	r0, [sp, #84]	; 0x54
   13d74:	mov	r1, #0
   13d78:	cmp	sl, #0
   13d7c:	mov	r5, #0
   13d80:	str	r1, [fp, #-72]	; 0xffffffb8
   13d84:	beq	12f54 <__assert_fail@plt+0x1d90>
   13d88:	b	13e60 <__assert_fail@plt+0x2c9c>
   13d8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d90:	ldr	r2, [sp, #84]	; 0x54
   13d94:	b	13dbc <__assert_fail@plt+0x2bf8>
   13d98:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d9c:	mov	r2, #1
   13da0:	mov	lr, r4
   13da4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13da8:	b	13dbc <__assert_fail@plt+0x2bf8>
   13dac:	ldr	r6, [sp, #80]	; 0x50
   13db0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13db4:	ldr	r2, [sp, #84]	; 0x54
   13db8:	mov	r7, #2
   13dbc:	mov	r0, #0
   13dc0:	ldr	r1, [fp, #12]
   13dc4:	tst	r2, #1
   13dc8:	mov	r2, r7
   13dcc:	mov	r3, lr
   13dd0:	str	r0, [sp, #8]
   13dd4:	ldr	r0, [sp, #72]	; 0x48
   13dd8:	movwne	r2, #4
   13ddc:	cmp	r7, #2
   13de0:	movne	r2, r7
   13de4:	str	r2, [sp]
   13de8:	mov	r2, ip
   13dec:	bic	r1, r1, #2
   13df0:	str	r0, [sp, #12]
   13df4:	ldr	r0, [sp, #76]	; 0x4c
   13df8:	str	r1, [sp, #4]
   13dfc:	mov	r1, sl
   13e00:	str	r0, [sp, #16]
   13e04:	mov	r0, r6
   13e08:	bl	12ed4 <__assert_fail@plt+0x1d10>
   13e0c:	mov	r8, r0
   13e10:	b	13eb8 <__assert_fail@plt+0x2cf4>
   13e14:	ldr	r2, [sp, #84]	; 0x54
   13e18:	b	13dbc <__assert_fail@plt+0x2bf8>
   13e1c:	mov	r0, #5
   13e20:	ldr	r1, [sp, #56]	; 0x38
   13e24:	ldr	r2, [fp, #-84]	; 0xffffffac
   13e28:	mov	r3, r9
   13e2c:	str	r0, [sp]
   13e30:	ldr	r0, [fp, #12]
   13e34:	str	r0, [sp, #4]
   13e38:	ldr	r0, [fp, #16]
   13e3c:	str	r0, [sp, #8]
   13e40:	ldr	r0, [sp, #72]	; 0x48
   13e44:	str	r0, [sp, #12]
   13e48:	ldr	r0, [sp, #76]	; 0x4c
   13e4c:	str	r0, [sp, #16]
   13e50:	ldr	r0, [sp, #80]	; 0x50
   13e54:	b	13e08 <__assert_fail@plt+0x2c44>
   13e58:	mov	r0, #0
   13e5c:	str	r0, [fp, #-72]	; 0xffffffb8
   13e60:	ldr	r1, [sp, #92]	; 0x5c
   13e64:	cmp	r1, #0
   13e68:	beq	13ea8 <__assert_fail@plt+0x2ce4>
   13e6c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e70:	ldr	r2, [sp, #80]	; 0x50
   13e74:	tst	r0, #1
   13e78:	bne	13eac <__assert_fail@plt+0x2ce8>
   13e7c:	ldrb	r0, [r1]
   13e80:	cmp	r0, #0
   13e84:	beq	13eac <__assert_fail@plt+0x2ce8>
   13e88:	add	r1, r1, #1
   13e8c:	cmp	r8, sl
   13e90:	strbcc	r0, [r2, r8]
   13e94:	add	r8, r8, #1
   13e98:	ldrb	r0, [r1], #1
   13e9c:	cmp	r0, #0
   13ea0:	bne	13e8c <__assert_fail@plt+0x2cc8>
   13ea4:	b	13eac <__assert_fail@plt+0x2ce8>
   13ea8:	ldr	r2, [sp, #80]	; 0x50
   13eac:	cmp	r8, sl
   13eb0:	movcc	r0, #0
   13eb4:	strbcc	r0, [r2, r8]
   13eb8:	mov	r0, r8
   13ebc:	sub	sp, fp, #28
   13ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec4:	mov	r2, #1
   13ec8:	b	13da4 <__assert_fail@plt+0x2be0>
   13ecc:	ldr	r2, [sp, #84]	; 0x54
   13ed0:	mov	r7, #5
   13ed4:	b	13dbc <__assert_fail@plt+0x2bf8>
   13ed8:	bl	111ac <abort@plt>
   13edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ee0:	add	fp, sp, #28
   13ee4:	sub	sp, sp, #28
   13ee8:	movw	r5, #33160	; 0x8188
   13eec:	cmp	r2, #0
   13ef0:	mov	r4, r1
   13ef4:	mov	r7, r0
   13ef8:	str	r0, [sp, #20]
   13efc:	movt	r5, #2
   13f00:	movne	r5, r2
   13f04:	bl	110b0 <__errno_location@plt>
   13f08:	mov	sl, r0
   13f0c:	ldm	r5, {r0, r1}
   13f10:	ldr	r2, [r5, #40]	; 0x28
   13f14:	ldr	r3, [r5, #44]	; 0x2c
   13f18:	add	r9, r5, #8
   13f1c:	ldr	r6, [sl]
   13f20:	orr	r8, r1, #1
   13f24:	mov	r1, #0
   13f28:	str	r6, [sp, #24]
   13f2c:	stm	sp, {r0, r8, r9}
   13f30:	str	r2, [sp, #12]
   13f34:	str	r3, [sp, #16]
   13f38:	mov	r0, #0
   13f3c:	mov	r2, r7
   13f40:	mov	r3, r4
   13f44:	mov	r6, r4
   13f48:	bl	12ed4 <__assert_fail@plt+0x1d10>
   13f4c:	add	r7, r0, #1
   13f50:	mov	r0, r7
   13f54:	bl	150f8 <__assert_fail@plt+0x3f34>
   13f58:	mov	r4, r0
   13f5c:	ldr	r0, [r5]
   13f60:	ldr	r2, [r5, #44]	; 0x2c
   13f64:	ldr	r1, [r5, #40]	; 0x28
   13f68:	mov	r3, r6
   13f6c:	stm	sp, {r0, r8, r9}
   13f70:	str	r2, [sp, #16]
   13f74:	str	r1, [sp, #12]
   13f78:	mov	r0, r4
   13f7c:	mov	r1, r7
   13f80:	ldr	r2, [sp, #20]
   13f84:	bl	12ed4 <__assert_fail@plt+0x1d10>
   13f88:	ldr	r0, [sp, #24]
   13f8c:	str	r0, [sl]
   13f90:	mov	r0, r4
   13f94:	sub	sp, fp, #28
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa0:	add	fp, sp, #28
   13fa4:	sub	sp, sp, #36	; 0x24
   13fa8:	movw	r8, #33160	; 0x8188
   13fac:	cmp	r3, #0
   13fb0:	mov	r4, r2
   13fb4:	str	r2, [sp, #24]
   13fb8:	mov	r5, r1
   13fbc:	mov	r6, r0
   13fc0:	str	r0, [sp, #20]
   13fc4:	movt	r8, #2
   13fc8:	movne	r8, r3
   13fcc:	bl	110b0 <__errno_location@plt>
   13fd0:	str	r0, [sp, #28]
   13fd4:	cmp	r4, #0
   13fd8:	add	sl, r8, #8
   13fdc:	ldm	r8, {r3, r9}
   13fe0:	ldr	r7, [r0]
   13fe4:	ldr	r1, [r8, #40]	; 0x28
   13fe8:	ldr	r2, [r8, #44]	; 0x2c
   13fec:	mov	r0, #0
   13ff0:	orreq	r9, r9, #1
   13ff4:	str	r7, [sp, #32]
   13ff8:	mov	r7, r5
   13ffc:	stm	sp, {r3, r9, sl}
   14000:	str	r1, [sp, #12]
   14004:	str	r2, [sp, #16]
   14008:	mov	r1, #0
   1400c:	mov	r2, r6
   14010:	mov	r3, r5
   14014:	bl	12ed4 <__assert_fail@plt+0x1d10>
   14018:	add	r4, r0, #1
   1401c:	mov	r5, r0
   14020:	mov	r0, r4
   14024:	bl	150f8 <__assert_fail@plt+0x3f34>
   14028:	mov	r6, r0
   1402c:	ldr	r0, [r8]
   14030:	ldr	r2, [r8, #44]	; 0x2c
   14034:	ldr	r1, [r8, #40]	; 0x28
   14038:	mov	r3, r7
   1403c:	stm	sp, {r0, r9, sl}
   14040:	str	r2, [sp, #16]
   14044:	str	r1, [sp, #12]
   14048:	mov	r0, r6
   1404c:	mov	r1, r4
   14050:	ldr	r2, [sp, #20]
   14054:	bl	12ed4 <__assert_fail@plt+0x1d10>
   14058:	ldr	r0, [sp, #24]
   1405c:	ldr	r1, [sp, #32]
   14060:	ldr	r2, [sp, #28]
   14064:	cmp	r0, #0
   14068:	str	r1, [r2]
   1406c:	strne	r5, [r0]
   14070:	mov	r0, r6
   14074:	sub	sp, fp, #28
   14078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1407c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14080:	add	fp, sp, #24
   14084:	movw	r5, #33036	; 0x810c
   14088:	movw	r8, #33032	; 0x8108
   1408c:	movt	r5, #2
   14090:	movt	r8, #2
   14094:	ldr	r0, [r5]
   14098:	ldr	r4, [r8]
   1409c:	cmp	r0, #2
   140a0:	blt	140cc <__assert_fail@plt+0x2f08>
   140a4:	add	r7, r4, #12
   140a8:	mov	r6, #0
   140ac:	ldr	r0, [r7, r6, lsl #3]
   140b0:	bl	120a0 <__assert_fail@plt+0xedc>
   140b4:	ldr	r1, [r5]
   140b8:	add	r2, r6, #2
   140bc:	add	r0, r6, #1
   140c0:	mov	r6, r0
   140c4:	cmp	r2, r1
   140c8:	blt	140ac <__assert_fail@plt+0x2ee8>
   140cc:	ldr	r0, [r4, #4]
   140d0:	movw	r7, #33208	; 0x81b8
   140d4:	movt	r7, #2
   140d8:	cmp	r0, r7
   140dc:	beq	140f4 <__assert_fail@plt+0x2f30>
   140e0:	bl	120a0 <__assert_fail@plt+0xedc>
   140e4:	movw	r0, #33040	; 0x8110
   140e8:	mov	r6, #256	; 0x100
   140ec:	movt	r0, #2
   140f0:	strd	r6, [r0]
   140f4:	movw	r6, #33040	; 0x8110
   140f8:	movt	r6, #2
   140fc:	cmp	r4, r6
   14100:	beq	14110 <__assert_fail@plt+0x2f4c>
   14104:	mov	r0, r4
   14108:	bl	120a0 <__assert_fail@plt+0xedc>
   1410c:	str	r6, [r8]
   14110:	mov	r0, #1
   14114:	str	r0, [r5]
   14118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1411c:	movw	r3, #33160	; 0x8188
   14120:	mvn	r2, #0
   14124:	movt	r3, #2
   14128:	b	1412c <__assert_fail@plt+0x2f68>
   1412c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14130:	add	fp, sp, #28
   14134:	sub	sp, sp, #44	; 0x2c
   14138:	mov	r7, r3
   1413c:	str	r2, [sp, #36]	; 0x24
   14140:	str	r1, [sp, #32]
   14144:	mov	r5, r0
   14148:	bl	110b0 <__errno_location@plt>
   1414c:	cmp	r5, #0
   14150:	blt	142bc <__assert_fail@plt+0x30f8>
   14154:	cmn	r5, #-2147483647	; 0x80000001
   14158:	beq	142bc <__assert_fail@plt+0x30f8>
   1415c:	movw	r8, #33036	; 0x810c
   14160:	movw	r4, #33032	; 0x8108
   14164:	str	r0, [sp, #28]
   14168:	ldr	r0, [r0]
   1416c:	movt	r8, #2
   14170:	movt	r4, #2
   14174:	ldr	r1, [r8]
   14178:	ldr	r6, [r4]
   1417c:	str	r0, [sp, #24]
   14180:	cmp	r1, r5
   14184:	ble	14190 <__assert_fail@plt+0x2fcc>
   14188:	mov	sl, r6
   1418c:	b	141f8 <__assert_fail@plt+0x3034>
   14190:	movw	r9, #33040	; 0x8110
   14194:	mov	r0, #8
   14198:	add	r2, r5, #1
   1419c:	str	r1, [fp, #-32]	; 0xffffffe0
   141a0:	mvn	r3, #-2147483648	; 0x80000000
   141a4:	movt	r9, #2
   141a8:	str	r0, [sp]
   141ac:	sub	r2, r2, r1
   141b0:	sub	r1, fp, #32
   141b4:	subs	r0, r6, r9
   141b8:	movne	r0, r6
   141bc:	bl	152f8 <__assert_fail@plt+0x4134>
   141c0:	cmp	r6, r9
   141c4:	mov	sl, r0
   141c8:	str	r0, [r4]
   141cc:	ldrdeq	r0, [r9]
   141d0:	stmeq	sl, {r0, r1}
   141d4:	ldr	r1, [r8]
   141d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   141dc:	add	r0, sl, r1, lsl #3
   141e0:	sub	r1, r2, r1
   141e4:	lsl	r2, r1, #3
   141e8:	mov	r1, #0
   141ec:	bl	110e0 <memset@plt>
   141f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141f4:	str	r0, [r8]
   141f8:	mov	r9, sl
   141fc:	ldr	r6, [r9, r5, lsl #3]!
   14200:	ldr	r4, [r9, #4]!
   14204:	ldm	r7, {r0, r1}
   14208:	ldr	r2, [r7, #40]	; 0x28
   1420c:	ldr	r3, [r7, #44]	; 0x2c
   14210:	orr	r8, r1, #1
   14214:	add	r1, r7, #8
   14218:	stm	sp, {r0, r8}
   1421c:	add	r0, sp, #8
   14220:	str	r1, [sp, #20]
   14224:	stm	r0, {r1, r2, r3}
   14228:	mov	r0, r4
   1422c:	mov	r1, r6
   14230:	ldr	r2, [sp, #32]
   14234:	ldr	r3, [sp, #36]	; 0x24
   14238:	bl	12ed4 <__assert_fail@plt+0x1d10>
   1423c:	cmp	r6, r0
   14240:	bhi	142a4 <__assert_fail@plt+0x30e0>
   14244:	add	r6, r0, #1
   14248:	movw	r0, #33208	; 0x81b8
   1424c:	movt	r0, #2
   14250:	str	r6, [sl, r5, lsl #3]
   14254:	cmp	r4, r0
   14258:	beq	14264 <__assert_fail@plt+0x30a0>
   1425c:	mov	r0, r4
   14260:	bl	120a0 <__assert_fail@plt+0xedc>
   14264:	mov	r0, r6
   14268:	bl	150f8 <__assert_fail@plt+0x3f34>
   1426c:	str	r0, [r9]
   14270:	mov	r4, r0
   14274:	add	r3, sp, #8
   14278:	ldr	r0, [r7]
   1427c:	ldr	r1, [r7, #40]	; 0x28
   14280:	ldr	r2, [r7, #44]	; 0x2c
   14284:	stm	sp, {r0, r8}
   14288:	ldr	r0, [sp, #20]
   1428c:	stm	r3, {r0, r1, r2}
   14290:	mov	r0, r4
   14294:	mov	r1, r6
   14298:	ldr	r2, [sp, #32]
   1429c:	ldr	r3, [sp, #36]	; 0x24
   142a0:	bl	12ed4 <__assert_fail@plt+0x1d10>
   142a4:	ldr	r0, [sp, #28]
   142a8:	ldr	r1, [sp, #24]
   142ac:	str	r1, [r0]
   142b0:	mov	r0, r4
   142b4:	sub	sp, fp, #28
   142b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142bc:	bl	111ac <abort@plt>
   142c0:	movw	r3, #33160	; 0x8188
   142c4:	movt	r3, #2
   142c8:	b	1412c <__assert_fail@plt+0x2f68>
   142cc:	movw	r3, #33160	; 0x8188
   142d0:	mov	r1, r0
   142d4:	mov	r0, #0
   142d8:	mvn	r2, #0
   142dc:	movt	r3, #2
   142e0:	b	1412c <__assert_fail@plt+0x2f68>
   142e4:	movw	r3, #33160	; 0x8188
   142e8:	mov	r2, r1
   142ec:	mov	r1, r0
   142f0:	mov	r0, #0
   142f4:	movt	r3, #2
   142f8:	b	1412c <__assert_fail@plt+0x2f68>
   142fc:	push	{fp, lr}
   14300:	mov	fp, sp
   14304:	sub	sp, sp, #48	; 0x30
   14308:	vmov.i32	q8, #0	; 0x00000000
   1430c:	mov	ip, #32
   14310:	mov	r3, sp
   14314:	mov	lr, r2
   14318:	cmp	r1, #10
   1431c:	add	r2, r3, #16
   14320:	vst1.64	{d16-d17}, [r3], ip
   14324:	vst1.64	{d16-d17}, [r3]
   14328:	vst1.64	{d16-d17}, [r2]
   1432c:	beq	1434c <__assert_fail@plt+0x3188>
   14330:	str	r1, [sp]
   14334:	mov	r3, sp
   14338:	mov	r1, lr
   1433c:	mvn	r2, #0
   14340:	bl	1412c <__assert_fail@plt+0x2f68>
   14344:	mov	sp, fp
   14348:	pop	{fp, pc}
   1434c:	bl	111ac <abort@plt>
   14350:	push	{r4, sl, fp, lr}
   14354:	add	fp, sp, #8
   14358:	sub	sp, sp, #48	; 0x30
   1435c:	mov	ip, r3
   14360:	mov	r3, sp
   14364:	vmov.i32	q8, #0	; 0x00000000
   14368:	mov	lr, #32
   1436c:	cmp	r1, #10
   14370:	add	r4, r3, #16
   14374:	vst1.64	{d16-d17}, [r3], lr
   14378:	vst1.64	{d16-d17}, [r3]
   1437c:	vst1.64	{d16-d17}, [r4]
   14380:	beq	143a0 <__assert_fail@plt+0x31dc>
   14384:	str	r1, [sp]
   14388:	mov	r1, r2
   1438c:	mov	r3, sp
   14390:	mov	r2, ip
   14394:	bl	1412c <__assert_fail@plt+0x2f68>
   14398:	sub	sp, fp, #8
   1439c:	pop	{r4, sl, fp, pc}
   143a0:	bl	111ac <abort@plt>
   143a4:	push	{fp, lr}
   143a8:	mov	fp, sp
   143ac:	sub	sp, sp, #48	; 0x30
   143b0:	mov	r3, sp
   143b4:	vmov.i32	q8, #0	; 0x00000000
   143b8:	mov	ip, #32
   143bc:	cmp	r0, #10
   143c0:	add	r2, r3, #16
   143c4:	vst1.64	{d16-d17}, [r3], ip
   143c8:	vst1.64	{d16-d17}, [r3]
   143cc:	vst1.64	{d16-d17}, [r2]
   143d0:	beq	143f0 <__assert_fail@plt+0x322c>
   143d4:	str	r0, [sp]
   143d8:	mov	r3, sp
   143dc:	mov	r0, #0
   143e0:	mvn	r2, #0
   143e4:	bl	1412c <__assert_fail@plt+0x2f68>
   143e8:	mov	sp, fp
   143ec:	pop	{fp, pc}
   143f0:	bl	111ac <abort@plt>
   143f4:	push	{fp, lr}
   143f8:	mov	fp, sp
   143fc:	sub	sp, sp, #48	; 0x30
   14400:	mov	r3, sp
   14404:	vmov.i32	q8, #0	; 0x00000000
   14408:	mov	ip, #32
   1440c:	cmp	r0, #10
   14410:	add	lr, r3, #16
   14414:	vst1.64	{d16-d17}, [r3], ip
   14418:	vst1.64	{d16-d17}, [r3]
   1441c:	vst1.64	{d16-d17}, [lr]
   14420:	beq	1443c <__assert_fail@plt+0x3278>
   14424:	str	r0, [sp]
   14428:	mov	r3, sp
   1442c:	mov	r0, #0
   14430:	bl	1412c <__assert_fail@plt+0x2f68>
   14434:	mov	sp, fp
   14438:	pop	{fp, pc}
   1443c:	bl	111ac <abort@plt>
   14440:	push	{r4, sl, fp, lr}
   14444:	add	fp, sp, #8
   14448:	sub	sp, sp, #48	; 0x30
   1444c:	mov	lr, r0
   14450:	movw	r0, #33160	; 0x8188
   14454:	mov	r3, #32
   14458:	mov	ip, r1
   1445c:	mov	r4, #1
   14460:	movt	r0, #2
   14464:	add	r1, r0, #16
   14468:	vld1.64	{d16-d17}, [r0], r3
   1446c:	mov	r3, sp
   14470:	vld1.64	{d18-d19}, [r1]
   14474:	add	r1, r3, #16
   14478:	vld1.64	{d20-d21}, [r0]
   1447c:	add	r0, r3, #32
   14480:	vst1.64	{d18-d19}, [r1]
   14484:	mov	r1, r3
   14488:	vst1.64	{d20-d21}, [r0]
   1448c:	mov	r0, #28
   14490:	and	r0, r0, r2, lsr #3
   14494:	and	r2, r2, #31
   14498:	vst1.64	{d16-d17}, [r1], r0
   1449c:	ldr	r0, [r1, #8]
   144a0:	bic	r4, r4, r0, lsr r2
   144a4:	eor	r0, r0, r4, lsl r2
   144a8:	mov	r2, ip
   144ac:	str	r0, [r1, #8]
   144b0:	mov	r0, #0
   144b4:	mov	r1, lr
   144b8:	bl	1412c <__assert_fail@plt+0x2f68>
   144bc:	sub	sp, fp, #8
   144c0:	pop	{r4, sl, fp, pc}
   144c4:	push	{fp, lr}
   144c8:	mov	fp, sp
   144cc:	sub	sp, sp, #48	; 0x30
   144d0:	mov	ip, r0
   144d4:	movw	r0, #33160	; 0x8188
   144d8:	mov	r3, #32
   144dc:	movt	r0, #2
   144e0:	add	r2, r0, #16
   144e4:	vld1.64	{d16-d17}, [r0], r3
   144e8:	mov	r3, sp
   144ec:	vld1.64	{d18-d19}, [r2]
   144f0:	add	r2, r3, #16
   144f4:	vld1.64	{d20-d21}, [r0]
   144f8:	add	r0, r3, #32
   144fc:	vst1.64	{d18-d19}, [r2]
   14500:	mov	r2, r3
   14504:	vst1.64	{d20-d21}, [r0]
   14508:	mov	r0, #28
   1450c:	and	r0, r0, r1, lsr #3
   14510:	and	r1, r1, #31
   14514:	vst1.64	{d16-d17}, [r2], r0
   14518:	mov	r0, #1
   1451c:	ldr	lr, [r2, #8]
   14520:	bic	r0, r0, lr, lsr r1
   14524:	eor	r0, lr, r0, lsl r1
   14528:	mov	r1, ip
   1452c:	str	r0, [r2, #8]
   14530:	mov	r0, #0
   14534:	mvn	r2, #0
   14538:	bl	1412c <__assert_fail@plt+0x2f68>
   1453c:	mov	sp, fp
   14540:	pop	{fp, pc}
   14544:	push	{fp, lr}
   14548:	mov	fp, sp
   1454c:	sub	sp, sp, #48	; 0x30
   14550:	movw	r2, #33160	; 0x8188
   14554:	mov	r3, #32
   14558:	mov	r1, r0
   1455c:	movt	r2, #2
   14560:	add	r0, r2, #16
   14564:	vld1.64	{d16-d17}, [r2], r3
   14568:	mov	r3, sp
   1456c:	vld1.64	{d18-d19}, [r0]
   14570:	add	r0, r3, #16
   14574:	vld1.64	{d20-d21}, [r2]
   14578:	mov	r2, r3
   1457c:	vst1.64	{d18-d19}, [r0]
   14580:	add	r0, r3, #32
   14584:	vst1.64	{d20-d21}, [r0]
   14588:	mov	r0, #12
   1458c:	vst1.64	{d16-d17}, [r2], r0
   14590:	ldr	r0, [r2]
   14594:	orr	r0, r0, #67108864	; 0x4000000
   14598:	str	r0, [r2]
   1459c:	mov	r0, #0
   145a0:	mvn	r2, #0
   145a4:	bl	1412c <__assert_fail@plt+0x2f68>
   145a8:	mov	sp, fp
   145ac:	pop	{fp, pc}
   145b0:	push	{fp, lr}
   145b4:	mov	fp, sp
   145b8:	sub	sp, sp, #48	; 0x30
   145bc:	mov	ip, r1
   145c0:	mov	r1, r0
   145c4:	movw	r0, #33160	; 0x8188
   145c8:	mov	r3, #32
   145cc:	movt	r0, #2
   145d0:	add	r2, r0, #16
   145d4:	vld1.64	{d16-d17}, [r0], r3
   145d8:	mov	r3, sp
   145dc:	vld1.64	{d18-d19}, [r2]
   145e0:	add	r2, r3, #16
   145e4:	vld1.64	{d20-d21}, [r0]
   145e8:	add	r0, r3, #32
   145ec:	vst1.64	{d18-d19}, [r2]
   145f0:	mov	r2, r3
   145f4:	vst1.64	{d20-d21}, [r0]
   145f8:	mov	r0, #12
   145fc:	vst1.64	{d16-d17}, [r2], r0
   14600:	ldr	r0, [r2]
   14604:	orr	r0, r0, #67108864	; 0x4000000
   14608:	str	r0, [r2]
   1460c:	mov	r0, #0
   14610:	mov	r2, ip
   14614:	bl	1412c <__assert_fail@plt+0x2f68>
   14618:	mov	sp, fp
   1461c:	pop	{fp, pc}
   14620:	push	{r4, sl, fp, lr}
   14624:	add	fp, sp, #8
   14628:	sub	sp, sp, #96	; 0x60
   1462c:	mov	ip, r2
   14630:	mov	r2, sp
   14634:	vmov.i32	q8, #0	; 0x00000000
   14638:	mov	r4, #28
   1463c:	cmp	r1, #10
   14640:	mov	r3, r2
   14644:	add	lr, r2, #16
   14648:	vst1.64	{d16-d17}, [r3], r4
   1464c:	vst1.64	{d16-d17}, [lr]
   14650:	vst1.32	{d16-d17}, [r3]
   14654:	beq	146a4 <__assert_fail@plt+0x34e0>
   14658:	vld1.64	{d16-d17}, [r2], r4
   1465c:	vld1.64	{d18-d19}, [lr]
   14660:	add	r3, sp, #48	; 0x30
   14664:	add	r4, r3, #4
   14668:	vld1.32	{d20-d21}, [r2]
   1466c:	add	r2, r3, #20
   14670:	vst1.32	{d16-d17}, [r4]
   14674:	vst1.32	{d18-d19}, [r2]
   14678:	add	r2, r3, #32
   1467c:	vst1.32	{d20-d21}, [r2]
   14680:	str	r1, [sp, #48]	; 0x30
   14684:	mvn	r2, #0
   14688:	ldr	r1, [sp, #60]	; 0x3c
   1468c:	orr	r1, r1, #67108864	; 0x4000000
   14690:	str	r1, [sp, #60]	; 0x3c
   14694:	mov	r1, ip
   14698:	bl	1412c <__assert_fail@plt+0x2f68>
   1469c:	sub	sp, fp, #8
   146a0:	pop	{r4, sl, fp, pc}
   146a4:	bl	111ac <abort@plt>
   146a8:	push	{r4, r5, fp, lr}
   146ac:	add	fp, sp, #8
   146b0:	sub	sp, sp, #48	; 0x30
   146b4:	mov	ip, r3
   146b8:	movw	r3, #33160	; 0x8188
   146bc:	mov	lr, #32
   146c0:	cmp	r1, #0
   146c4:	mov	r5, sp
   146c8:	movt	r3, #2
   146cc:	cmpne	r2, #0
   146d0:	add	r4, r3, #16
   146d4:	vld1.64	{d16-d17}, [r3], lr
   146d8:	vld1.64	{d18-d19}, [r4]
   146dc:	add	r4, r5, #16
   146e0:	vld1.64	{d20-d21}, [r3]
   146e4:	vst1.64	{d16-d17}, [r5], lr
   146e8:	mov	r3, #10
   146ec:	vst1.64	{d18-d19}, [r4]
   146f0:	vst1.64	{d20-d21}, [r5]
   146f4:	str	r3, [sp]
   146f8:	bne	14700 <__assert_fail@plt+0x353c>
   146fc:	bl	111ac <abort@plt>
   14700:	str	r2, [sp, #44]	; 0x2c
   14704:	str	r1, [sp, #40]	; 0x28
   14708:	mov	r3, sp
   1470c:	mov	r1, ip
   14710:	mvn	r2, #0
   14714:	bl	1412c <__assert_fail@plt+0x2f68>
   14718:	sub	sp, fp, #8
   1471c:	pop	{r4, r5, fp, pc}
   14720:	push	{r4, r5, fp, lr}
   14724:	add	fp, sp, #8
   14728:	sub	sp, sp, #48	; 0x30
   1472c:	mov	lr, r3
   14730:	movw	r3, #33160	; 0x8188
   14734:	mov	ip, #32
   14738:	cmp	r1, #0
   1473c:	mov	r5, sp
   14740:	movt	r3, #2
   14744:	cmpne	r2, #0
   14748:	add	r4, r3, #16
   1474c:	vld1.64	{d16-d17}, [r3], ip
   14750:	vld1.64	{d18-d19}, [r4]
   14754:	add	r4, r5, #16
   14758:	vld1.64	{d20-d21}, [r3]
   1475c:	vst1.64	{d16-d17}, [r5], ip
   14760:	mov	r3, #10
   14764:	vst1.64	{d18-d19}, [r4]
   14768:	vst1.64	{d20-d21}, [r5]
   1476c:	str	r3, [sp]
   14770:	bne	14778 <__assert_fail@plt+0x35b4>
   14774:	bl	111ac <abort@plt>
   14778:	ldr	ip, [fp, #8]
   1477c:	str	r2, [sp, #44]	; 0x2c
   14780:	str	r1, [sp, #40]	; 0x28
   14784:	mov	r3, sp
   14788:	mov	r1, lr
   1478c:	mov	r2, ip
   14790:	bl	1412c <__assert_fail@plt+0x2f68>
   14794:	sub	sp, fp, #8
   14798:	pop	{r4, r5, fp, pc}
   1479c:	push	{r4, sl, fp, lr}
   147a0:	add	fp, sp, #8
   147a4:	sub	sp, sp, #48	; 0x30
   147a8:	mov	ip, r2
   147ac:	movw	r2, #33160	; 0x8188
   147b0:	mov	lr, #32
   147b4:	cmp	r0, #0
   147b8:	mov	r4, sp
   147bc:	movt	r2, #2
   147c0:	cmpne	r1, #0
   147c4:	add	r3, r2, #16
   147c8:	vld1.64	{d16-d17}, [r2], lr
   147cc:	vld1.64	{d18-d19}, [r3]
   147d0:	add	r3, r4, #16
   147d4:	vld1.64	{d20-d21}, [r2]
   147d8:	vst1.64	{d16-d17}, [r4], lr
   147dc:	mov	r2, #10
   147e0:	vst1.64	{d18-d19}, [r3]
   147e4:	vst1.64	{d20-d21}, [r4]
   147e8:	str	r2, [sp]
   147ec:	bne	147f4 <__assert_fail@plt+0x3630>
   147f0:	bl	111ac <abort@plt>
   147f4:	str	r1, [sp, #44]	; 0x2c
   147f8:	str	r0, [sp, #40]	; 0x28
   147fc:	mov	r3, sp
   14800:	mov	r0, #0
   14804:	mov	r1, ip
   14808:	mvn	r2, #0
   1480c:	bl	1412c <__assert_fail@plt+0x2f68>
   14810:	sub	sp, fp, #8
   14814:	pop	{r4, sl, fp, pc}
   14818:	push	{r4, r5, fp, lr}
   1481c:	add	fp, sp, #8
   14820:	sub	sp, sp, #48	; 0x30
   14824:	mov	lr, r2
   14828:	movw	r2, #33160	; 0x8188
   1482c:	mov	ip, r3
   14830:	mov	r3, #32
   14834:	cmp	r0, #0
   14838:	mov	r5, sp
   1483c:	movt	r2, #2
   14840:	cmpne	r1, #0
   14844:	add	r4, r2, #16
   14848:	vld1.64	{d16-d17}, [r2], r3
   1484c:	vld1.64	{d18-d19}, [r4]
   14850:	add	r4, r5, #16
   14854:	vld1.64	{d20-d21}, [r2]
   14858:	vst1.64	{d16-d17}, [r5], r3
   1485c:	mov	r2, #10
   14860:	vst1.64	{d18-d19}, [r4]
   14864:	vst1.64	{d20-d21}, [r5]
   14868:	str	r2, [sp]
   1486c:	bne	14874 <__assert_fail@plt+0x36b0>
   14870:	bl	111ac <abort@plt>
   14874:	str	r1, [sp, #44]	; 0x2c
   14878:	str	r0, [sp, #40]	; 0x28
   1487c:	mov	r3, sp
   14880:	mov	r0, #0
   14884:	mov	r1, lr
   14888:	mov	r2, ip
   1488c:	bl	1412c <__assert_fail@plt+0x2f68>
   14890:	sub	sp, fp, #8
   14894:	pop	{r4, r5, fp, pc}
   14898:	movw	r3, #33048	; 0x8118
   1489c:	movt	r3, #2
   148a0:	b	1412c <__assert_fail@plt+0x2f68>
   148a4:	movw	r3, #33048	; 0x8118
   148a8:	mov	r2, r1
   148ac:	mov	r1, r0
   148b0:	mov	r0, #0
   148b4:	movt	r3, #2
   148b8:	b	1412c <__assert_fail@plt+0x2f68>
   148bc:	movw	r3, #33048	; 0x8118
   148c0:	mvn	r2, #0
   148c4:	movt	r3, #2
   148c8:	b	1412c <__assert_fail@plt+0x2f68>
   148cc:	movw	r3, #33048	; 0x8118
   148d0:	mov	r1, r0
   148d4:	mov	r0, #0
   148d8:	mvn	r2, #0
   148dc:	movt	r3, #2
   148e0:	b	1412c <__assert_fail@plt+0x2f68>
   148e4:	push	{r4, r5, fp, lr}
   148e8:	add	fp, sp, #8
   148ec:	mov	r5, r0
   148f0:	mov	r4, r1
   148f4:	mov	r0, #0
   148f8:	mov	r2, #5
   148fc:	mov	r1, r5
   14900:	bl	10fc0 <dcgettext@plt>
   14904:	cmp	r0, r5
   14908:	popne	{r4, r5, fp, pc}
   1490c:	bl	16b9c <__assert_fail@plt+0x59d8>
   14910:	ldrb	r1, [r0]
   14914:	and	r1, r1, #223	; 0xdf
   14918:	cmp	r1, #71	; 0x47
   1491c:	beq	14984 <__assert_fail@plt+0x37c0>
   14920:	cmp	r1, #85	; 0x55
   14924:	bne	149a8 <__assert_fail@plt+0x37e4>
   14928:	ldrb	r1, [r0, #1]
   1492c:	and	r1, r1, #223	; 0xdf
   14930:	cmp	r1, #84	; 0x54
   14934:	bne	149a8 <__assert_fail@plt+0x37e4>
   14938:	ldrb	r1, [r0, #2]
   1493c:	and	r1, r1, #223	; 0xdf
   14940:	cmp	r1, #70	; 0x46
   14944:	ldrbeq	r1, [r0, #3]
   14948:	cmpeq	r1, #45	; 0x2d
   1494c:	bne	149a8 <__assert_fail@plt+0x37e4>
   14950:	ldrb	r1, [r0, #4]
   14954:	cmp	r1, #56	; 0x38
   14958:	ldrbeq	r0, [r0, #5]
   1495c:	cmpeq	r0, #0
   14960:	bne	149a8 <__assert_fail@plt+0x37e4>
   14964:	ldrb	r1, [r5]
   14968:	movw	r2, #30850	; 0x7882
   1496c:	movw	r0, #30854	; 0x7886
   14970:	movt	r2, #1
   14974:	movt	r0, #1
   14978:	cmp	r1, #96	; 0x60
   1497c:	moveq	r0, r2
   14980:	pop	{r4, r5, fp, pc}
   14984:	ldrb	r1, [r0, #1]
   14988:	and	r1, r1, #223	; 0xdf
   1498c:	cmp	r1, #66	; 0x42
   14990:	bne	149a8 <__assert_fail@plt+0x37e4>
   14994:	ldrb	r1, [r0, #2]
   14998:	cmp	r1, #49	; 0x31
   1499c:	ldrbeq	r1, [r0, #3]
   149a0:	cmpeq	r1, #56	; 0x38
   149a4:	beq	149c4 <__assert_fail@plt+0x3800>
   149a8:	movw	r1, #30844	; 0x787c
   149ac:	movw	r0, #30848	; 0x7880
   149b0:	cmp	r4, #9
   149b4:	movt	r1, #1
   149b8:	movt	r0, #1
   149bc:	moveq	r0, r1
   149c0:	pop	{r4, r5, fp, pc}
   149c4:	ldrb	r1, [r0, #4]
   149c8:	cmp	r1, #48	; 0x30
   149cc:	ldrbeq	r1, [r0, #5]
   149d0:	cmpeq	r1, #51	; 0x33
   149d4:	bne	149a8 <__assert_fail@plt+0x37e4>
   149d8:	ldrb	r1, [r0, #6]
   149dc:	cmp	r1, #48	; 0x30
   149e0:	ldrbeq	r0, [r0, #7]
   149e4:	cmpeq	r0, #0
   149e8:	bne	149a8 <__assert_fail@plt+0x37e4>
   149ec:	ldrb	r1, [r5]
   149f0:	movw	r2, #30858	; 0x788a
   149f4:	movw	r0, #30862	; 0x788e
   149f8:	movt	r2, #1
   149fc:	movt	r0, #1
   14a00:	b	14978 <__assert_fail@plt+0x37b4>
   14a04:	mov	r1, #0
   14a08:	mov	r2, #3
   14a0c:	b	169bc <__assert_fail@plt+0x57f8>
   14a10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a14:	add	fp, sp, #24
   14a18:	sub	sp, sp, #32
   14a1c:	ldr	r6, [fp, #12]
   14a20:	ldr	r7, [fp, #8]
   14a24:	mov	r4, r2
   14a28:	mov	r8, r0
   14a2c:	cmp	r1, #0
   14a30:	beq	14a58 <__assert_fail@plt+0x3894>
   14a34:	movw	r2, #30952	; 0x78e8
   14a38:	mov	r5, r1
   14a3c:	str	r3, [sp, #4]
   14a40:	str	r4, [sp]
   14a44:	mov	r0, r8
   14a48:	mov	r1, #1
   14a4c:	movt	r2, #1
   14a50:	mov	r3, r5
   14a54:	b	14a70 <__assert_fail@plt+0x38ac>
   14a58:	movw	r2, #30964	; 0x78f4
   14a5c:	str	r3, [sp]
   14a60:	mov	r0, r8
   14a64:	mov	r1, #1
   14a68:	mov	r3, r4
   14a6c:	movt	r2, #1
   14a70:	bl	11104 <__fprintf_chk@plt>
   14a74:	movw	r1, #30971	; 0x78fb
   14a78:	mov	r0, #0
   14a7c:	mov	r2, #5
   14a80:	movt	r1, #1
   14a84:	bl	10fc0 <dcgettext@plt>
   14a88:	movw	r2, #31689	; 0x7bc9
   14a8c:	mov	r3, r0
   14a90:	movw	r0, #2022	; 0x7e6
   14a94:	mov	r1, #1
   14a98:	str	r0, [sp]
   14a9c:	movt	r2, #1
   14aa0:	mov	r0, r8
   14aa4:	bl	11104 <__fprintf_chk@plt>
   14aa8:	movw	r4, #30386	; 0x76b2
   14aac:	mov	r1, r8
   14ab0:	movt	r4, #1
   14ab4:	mov	r0, r4
   14ab8:	bl	10f30 <fputs_unlocked@plt>
   14abc:	movw	r1, #30975	; 0x78ff
   14ac0:	mov	r0, #0
   14ac4:	mov	r2, #5
   14ac8:	movt	r1, #1
   14acc:	bl	10fc0 <dcgettext@plt>
   14ad0:	movw	r3, #31146	; 0x79aa
   14ad4:	mov	r2, r0
   14ad8:	mov	r0, r8
   14adc:	mov	r1, #1
   14ae0:	movt	r3, #1
   14ae4:	bl	11104 <__fprintf_chk@plt>
   14ae8:	mov	r0, r4
   14aec:	mov	r1, r8
   14af0:	bl	10f30 <fputs_unlocked@plt>
   14af4:	cmp	r6, #9
   14af8:	bhi	14b34 <__assert_fail@plt+0x3970>
   14afc:	add	r0, pc, #0
   14b00:	ldr	pc, [r0, r6, lsl #2]
   14b04:	andeq	r4, r1, ip, lsr #22
   14b08:	andeq	r4, r1, r0, asr #22
   14b0c:	andeq	r4, r1, r0, ror fp
   14b10:	muleq	r1, r8, fp
   14b14:	andeq	r4, r1, r0, asr #23
   14b18:	andeq	r4, r1, r8, ror #23
   14b1c:	andeq	r4, r1, r0, lsl ip
   14b20:	andeq	r4, r1, r8, asr #24
   14b24:	andeq	r4, r1, r8, ror #25
   14b28:	muleq	r1, r0, ip
   14b2c:	sub	sp, fp, #24
   14b30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b34:	movw	r1, #31499	; 0x7b0b
   14b38:	movt	r1, #1
   14b3c:	b	14c98 <__assert_fail@plt+0x3ad4>
   14b40:	movw	r1, #31180	; 0x79cc
   14b44:	mov	r0, #0
   14b48:	mov	r2, #5
   14b4c:	movt	r1, #1
   14b50:	bl	10fc0 <dcgettext@plt>
   14b54:	ldr	r3, [r7]
   14b58:	mov	r2, r0
   14b5c:	mov	r0, r8
   14b60:	mov	r1, #1
   14b64:	sub	sp, fp, #24
   14b68:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b6c:	b	11104 <__fprintf_chk@plt>
   14b70:	movw	r1, #31196	; 0x79dc
   14b74:	mov	r0, #0
   14b78:	mov	r2, #5
   14b7c:	movt	r1, #1
   14b80:	bl	10fc0 <dcgettext@plt>
   14b84:	mov	r2, r0
   14b88:	ldr	r3, [r7]
   14b8c:	ldr	r0, [r7, #4]
   14b90:	str	r0, [sp]
   14b94:	b	14c84 <__assert_fail@plt+0x3ac0>
   14b98:	movw	r1, #31219	; 0x79f3
   14b9c:	mov	r0, #0
   14ba0:	mov	r2, #5
   14ba4:	movt	r1, #1
   14ba8:	bl	10fc0 <dcgettext@plt>
   14bac:	ldr	r3, [r7]
   14bb0:	mov	r2, r0
   14bb4:	ldmib	r7, {r0, r1}
   14bb8:	stm	sp, {r0, r1}
   14bbc:	b	14c84 <__assert_fail@plt+0x3ac0>
   14bc0:	movw	r1, #31247	; 0x7a0f
   14bc4:	mov	r0, #0
   14bc8:	mov	r2, #5
   14bcc:	movt	r1, #1
   14bd0:	bl	10fc0 <dcgettext@plt>
   14bd4:	ldr	r3, [r7]
   14bd8:	mov	r2, r0
   14bdc:	ldmib	r7, {r0, r1, r7}
   14be0:	stm	sp, {r0, r1, r7}
   14be4:	b	14c84 <__assert_fail@plt+0x3ac0>
   14be8:	movw	r1, #31279	; 0x7a2f
   14bec:	mov	r0, #0
   14bf0:	mov	r2, #5
   14bf4:	movt	r1, #1
   14bf8:	bl	10fc0 <dcgettext@plt>
   14bfc:	ldr	r3, [r7]
   14c00:	mov	r2, r0
   14c04:	ldmib	r7, {r0, r1, r6, r7}
   14c08:	stm	sp, {r0, r1, r6, r7}
   14c0c:	b	14c84 <__assert_fail@plt+0x3ac0>
   14c10:	movw	r1, #31315	; 0x7a53
   14c14:	mov	r0, #0
   14c18:	mov	r2, #5
   14c1c:	movt	r1, #1
   14c20:	bl	10fc0 <dcgettext@plt>
   14c24:	ldr	r3, [r7]
   14c28:	mov	r2, r0
   14c2c:	ldmib	r7, {r0, r1, r6}
   14c30:	ldr	r5, [r7, #16]
   14c34:	ldr	r7, [r7, #20]
   14c38:	stm	sp, {r0, r1, r6}
   14c3c:	str	r5, [sp, #12]
   14c40:	str	r7, [sp, #16]
   14c44:	b	14c84 <__assert_fail@plt+0x3ac0>
   14c48:	movw	r1, #31355	; 0x7a7b
   14c4c:	mov	r0, #0
   14c50:	mov	r2, #5
   14c54:	movt	r1, #1
   14c58:	bl	10fc0 <dcgettext@plt>
   14c5c:	ldr	r3, [r7]
   14c60:	mov	r2, r0
   14c64:	ldmib	r7, {r0, r1, r6}
   14c68:	ldr	r5, [r7, #16]
   14c6c:	ldr	r4, [r7, #20]
   14c70:	ldr	r7, [r7, #24]
   14c74:	stm	sp, {r0, r1, r6}
   14c78:	str	r5, [sp, #12]
   14c7c:	str	r4, [sp, #16]
   14c80:	str	r7, [sp, #20]
   14c84:	mov	r0, r8
   14c88:	mov	r1, #1
   14c8c:	b	14d38 <__assert_fail@plt+0x3b74>
   14c90:	movw	r1, #31447	; 0x7ad7
   14c94:	movt	r1, #1
   14c98:	mov	r0, #0
   14c9c:	mov	r2, #5
   14ca0:	bl	10fc0 <dcgettext@plt>
   14ca4:	mov	ip, r0
   14ca8:	ldr	r3, [r7]
   14cac:	ldr	r0, [r7, #4]
   14cb0:	ldr	r1, [r7, #8]
   14cb4:	ldr	r6, [r7, #12]
   14cb8:	ldr	r5, [r7, #16]
   14cbc:	ldr	r4, [r7, #20]
   14cc0:	ldr	r2, [r7, #24]
   14cc4:	ldr	lr, [r7, #28]
   14cc8:	ldr	r7, [r7, #32]
   14ccc:	stm	sp, {r0, r1, r6}
   14cd0:	str	r5, [sp, #12]
   14cd4:	str	r4, [sp, #16]
   14cd8:	str	r2, [sp, #20]
   14cdc:	str	lr, [sp, #24]
   14ce0:	str	r7, [sp, #28]
   14ce4:	b	14d2c <__assert_fail@plt+0x3b68>
   14ce8:	movw	r1, #31399	; 0x7aa7
   14cec:	mov	r0, #0
   14cf0:	mov	r2, #5
   14cf4:	movt	r1, #1
   14cf8:	bl	10fc0 <dcgettext@plt>
   14cfc:	mov	ip, r0
   14d00:	ldr	r3, [r7]
   14d04:	ldmib	r7, {r0, r1, r6}
   14d08:	ldr	r5, [r7, #16]
   14d0c:	ldr	r4, [r7, #20]
   14d10:	ldr	r2, [r7, #24]
   14d14:	ldr	r7, [r7, #28]
   14d18:	stm	sp, {r0, r1, r6}
   14d1c:	str	r5, [sp, #12]
   14d20:	str	r4, [sp, #16]
   14d24:	str	r2, [sp, #20]
   14d28:	str	r7, [sp, #24]
   14d2c:	mov	r0, r8
   14d30:	mov	r1, #1
   14d34:	mov	r2, ip
   14d38:	bl	11104 <__fprintf_chk@plt>
   14d3c:	sub	sp, fp, #24
   14d40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d44:	push	{r4, sl, fp, lr}
   14d48:	add	fp, sp, #8
   14d4c:	sub	sp, sp, #8
   14d50:	ldr	ip, [fp, #8]
   14d54:	mov	lr, #0
   14d58:	ldr	r4, [ip, lr, lsl #2]
   14d5c:	add	lr, lr, #1
   14d60:	cmp	r4, #0
   14d64:	bne	14d58 <__assert_fail@plt+0x3b94>
   14d68:	sub	r4, lr, #1
   14d6c:	str	ip, [sp]
   14d70:	str	r4, [sp, #4]
   14d74:	bl	14a10 <__assert_fail@plt+0x384c>
   14d78:	sub	sp, fp, #8
   14d7c:	pop	{r4, sl, fp, pc}
   14d80:	push	{fp, lr}
   14d84:	mov	fp, sp
   14d88:	sub	sp, sp, #48	; 0x30
   14d8c:	ldr	ip, [fp, #8]
   14d90:	ldr	lr, [ip]
   14d94:	cmp	lr, #0
   14d98:	str	lr, [sp, #8]
   14d9c:	beq	14e38 <__assert_fail@plt+0x3c74>
   14da0:	ldr	lr, [ip, #4]
   14da4:	cmp	lr, #0
   14da8:	str	lr, [sp, #12]
   14dac:	beq	14e40 <__assert_fail@plt+0x3c7c>
   14db0:	ldr	lr, [ip, #8]
   14db4:	cmp	lr, #0
   14db8:	str	lr, [sp, #16]
   14dbc:	beq	14e48 <__assert_fail@plt+0x3c84>
   14dc0:	ldr	lr, [ip, #12]
   14dc4:	cmp	lr, #0
   14dc8:	str	lr, [sp, #20]
   14dcc:	beq	14e50 <__assert_fail@plt+0x3c8c>
   14dd0:	ldr	lr, [ip, #16]
   14dd4:	cmp	lr, #0
   14dd8:	str	lr, [sp, #24]
   14ddc:	beq	14e58 <__assert_fail@plt+0x3c94>
   14de0:	ldr	lr, [ip, #20]
   14de4:	cmp	lr, #0
   14de8:	str	lr, [sp, #28]
   14dec:	beq	14e60 <__assert_fail@plt+0x3c9c>
   14df0:	ldr	lr, [ip, #24]
   14df4:	cmp	lr, #0
   14df8:	str	lr, [sp, #32]
   14dfc:	beq	14e68 <__assert_fail@plt+0x3ca4>
   14e00:	ldr	lr, [ip, #28]
   14e04:	cmp	lr, #0
   14e08:	str	lr, [sp, #36]	; 0x24
   14e0c:	beq	14e70 <__assert_fail@plt+0x3cac>
   14e10:	ldr	lr, [ip, #32]
   14e14:	cmp	lr, #0
   14e18:	str	lr, [sp, #40]	; 0x28
   14e1c:	beq	14e78 <__assert_fail@plt+0x3cb4>
   14e20:	ldr	lr, [ip, #36]	; 0x24
   14e24:	mov	ip, #10
   14e28:	cmp	lr, #0
   14e2c:	str	lr, [sp, #44]	; 0x2c
   14e30:	movweq	ip, #9
   14e34:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e38:	mov	ip, #0
   14e3c:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e40:	mov	ip, #1
   14e44:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e48:	mov	ip, #2
   14e4c:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e50:	mov	ip, #3
   14e54:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e58:	mov	ip, #4
   14e5c:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e60:	mov	ip, #5
   14e64:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e68:	mov	ip, #6
   14e6c:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e70:	mov	ip, #7
   14e74:	b	14e7c <__assert_fail@plt+0x3cb8>
   14e78:	mov	ip, #8
   14e7c:	add	lr, sp, #8
   14e80:	str	ip, [sp, #4]
   14e84:	str	lr, [sp]
   14e88:	bl	14a10 <__assert_fail@plt+0x384c>
   14e8c:	mov	sp, fp
   14e90:	pop	{fp, pc}
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	sub	sp, sp, #56	; 0x38
   14ea0:	add	ip, fp, #8
   14ea4:	str	ip, [sp, #12]
   14ea8:	ldr	lr, [fp, #8]
   14eac:	cmp	lr, #0
   14eb0:	str	lr, [sp, #16]
   14eb4:	beq	14f50 <__assert_fail@plt+0x3d8c>
   14eb8:	ldr	lr, [ip, #4]
   14ebc:	cmp	lr, #0
   14ec0:	str	lr, [sp, #20]
   14ec4:	beq	14f58 <__assert_fail@plt+0x3d94>
   14ec8:	ldr	lr, [ip, #8]
   14ecc:	cmp	lr, #0
   14ed0:	str	lr, [sp, #24]
   14ed4:	beq	14f60 <__assert_fail@plt+0x3d9c>
   14ed8:	ldr	lr, [ip, #12]
   14edc:	cmp	lr, #0
   14ee0:	str	lr, [sp, #28]
   14ee4:	beq	14f68 <__assert_fail@plt+0x3da4>
   14ee8:	ldr	lr, [ip, #16]
   14eec:	cmp	lr, #0
   14ef0:	str	lr, [sp, #32]
   14ef4:	beq	14f70 <__assert_fail@plt+0x3dac>
   14ef8:	ldr	lr, [ip, #20]
   14efc:	cmp	lr, #0
   14f00:	str	lr, [sp, #36]	; 0x24
   14f04:	beq	14f78 <__assert_fail@plt+0x3db4>
   14f08:	ldr	lr, [ip, #24]
   14f0c:	cmp	lr, #0
   14f10:	str	lr, [sp, #40]	; 0x28
   14f14:	beq	14f80 <__assert_fail@plt+0x3dbc>
   14f18:	ldr	lr, [ip, #28]
   14f1c:	cmp	lr, #0
   14f20:	str	lr, [sp, #44]	; 0x2c
   14f24:	beq	14f88 <__assert_fail@plt+0x3dc4>
   14f28:	ldr	lr, [ip, #32]
   14f2c:	cmp	lr, #0
   14f30:	str	lr, [sp, #48]	; 0x30
   14f34:	beq	14f90 <__assert_fail@plt+0x3dcc>
   14f38:	ldr	lr, [ip, #36]	; 0x24
   14f3c:	mov	ip, #10
   14f40:	cmp	lr, #0
   14f44:	str	lr, [sp, #52]	; 0x34
   14f48:	movweq	ip, #9
   14f4c:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f50:	mov	ip, #0
   14f54:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f58:	mov	ip, #1
   14f5c:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f60:	mov	ip, #2
   14f64:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f68:	mov	ip, #3
   14f6c:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f70:	mov	ip, #4
   14f74:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f78:	mov	ip, #5
   14f7c:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f80:	mov	ip, #6
   14f84:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f88:	mov	ip, #7
   14f8c:	b	14f94 <__assert_fail@plt+0x3dd0>
   14f90:	mov	ip, #8
   14f94:	add	lr, sp, #16
   14f98:	str	ip, [sp, #4]
   14f9c:	str	lr, [sp]
   14fa0:	bl	14a10 <__assert_fail@plt+0x384c>
   14fa4:	mov	sp, fp
   14fa8:	pop	{fp, pc}
   14fac:	push	{fp, lr}
   14fb0:	mov	fp, sp
   14fb4:	movw	r0, #33132	; 0x816c
   14fb8:	movt	r0, #2
   14fbc:	ldr	r1, [r0]
   14fc0:	movw	r0, #30386	; 0x76b2
   14fc4:	movt	r0, #1
   14fc8:	bl	10f30 <fputs_unlocked@plt>
   14fcc:	movw	r1, #31559	; 0x7b47
   14fd0:	mov	r0, #0
   14fd4:	mov	r2, #5
   14fd8:	movt	r1, #1
   14fdc:	bl	10fc0 <dcgettext@plt>
   14fe0:	movw	r2, #31579	; 0x7b5b
   14fe4:	mov	r1, r0
   14fe8:	mov	r0, #1
   14fec:	movt	r2, #1
   14ff0:	bl	110ec <__printf_chk@plt>
   14ff4:	movw	r1, #31601	; 0x7b71
   14ff8:	mov	r0, #0
   14ffc:	mov	r2, #5
   15000:	movt	r1, #1
   15004:	bl	10fc0 <dcgettext@plt>
   15008:	movw	r2, #29958	; 0x7506
   1500c:	movw	r3, #30195	; 0x75f3
   15010:	mov	r1, r0
   15014:	mov	r0, #1
   15018:	movt	r2, #1
   1501c:	movt	r3, #1
   15020:	bl	110ec <__printf_chk@plt>
   15024:	movw	r1, #31621	; 0x7b85
   15028:	mov	r0, #0
   1502c:	mov	r2, #5
   15030:	movt	r1, #1
   15034:	bl	10fc0 <dcgettext@plt>
   15038:	movw	r2, #31660	; 0x7bac
   1503c:	mov	r1, r0
   15040:	mov	r0, #1
   15044:	movt	r2, #1
   15048:	pop	{fp, lr}
   1504c:	b	110ec <__printf_chk@plt>
   15050:	push	{r4, r5, r6, sl, fp, lr}
   15054:	add	fp, sp, #16
   15058:	mov	r4, r2
   1505c:	mov	r5, r1
   15060:	mov	r6, r0
   15064:	bl	16c34 <__assert_fail@plt+0x5a70>
   15068:	cmp	r0, #0
   1506c:	popne	{r4, r5, r6, sl, fp, pc}
   15070:	cmp	r6, #0
   15074:	beq	15088 <__assert_fail@plt+0x3ec4>
   15078:	cmp	r5, #0
   1507c:	cmpne	r4, #0
   15080:	bne	15088 <__assert_fail@plt+0x3ec4>
   15084:	pop	{r4, r5, r6, sl, fp, pc}
   15088:	bl	15628 <__assert_fail@plt+0x4464>
   1508c:	push	{r4, r5, r6, sl, fp, lr}
   15090:	add	fp, sp, #16
   15094:	mov	r4, r2
   15098:	mov	r5, r1
   1509c:	mov	r6, r0
   150a0:	bl	16c34 <__assert_fail@plt+0x5a70>
   150a4:	cmp	r0, #0
   150a8:	popne	{r4, r5, r6, sl, fp, pc}
   150ac:	cmp	r6, #0
   150b0:	beq	150c4 <__assert_fail@plt+0x3f00>
   150b4:	cmp	r5, #0
   150b8:	cmpne	r4, #0
   150bc:	bne	150c4 <__assert_fail@plt+0x3f00>
   150c0:	pop	{r4, r5, r6, sl, fp, pc}
   150c4:	bl	15628 <__assert_fail@plt+0x4464>
   150c8:	push	{fp, lr}
   150cc:	mov	fp, sp
   150d0:	bl	16360 <__assert_fail@plt+0x519c>
   150d4:	cmp	r0, #0
   150d8:	popne	{fp, pc}
   150dc:	bl	15628 <__assert_fail@plt+0x4464>
   150e0:	push	{fp, lr}
   150e4:	mov	fp, sp
   150e8:	bl	16360 <__assert_fail@plt+0x519c>
   150ec:	cmp	r0, #0
   150f0:	popne	{fp, pc}
   150f4:	bl	15628 <__assert_fail@plt+0x4464>
   150f8:	push	{fp, lr}
   150fc:	mov	fp, sp
   15100:	bl	16360 <__assert_fail@plt+0x519c>
   15104:	cmp	r0, #0
   15108:	popne	{fp, pc}
   1510c:	bl	15628 <__assert_fail@plt+0x4464>
   15110:	push	{r4, r5, fp, lr}
   15114:	add	fp, sp, #8
   15118:	mov	r4, r1
   1511c:	mov	r5, r0
   15120:	bl	16390 <__assert_fail@plt+0x51cc>
   15124:	cmp	r0, #0
   15128:	popne	{r4, r5, fp, pc}
   1512c:	cmp	r5, #0
   15130:	beq	15140 <__assert_fail@plt+0x3f7c>
   15134:	cmp	r4, #0
   15138:	bne	15140 <__assert_fail@plt+0x3f7c>
   1513c:	pop	{r4, r5, fp, pc}
   15140:	bl	15628 <__assert_fail@plt+0x4464>
   15144:	push	{fp, lr}
   15148:	mov	fp, sp
   1514c:	cmp	r1, #0
   15150:	orreq	r1, r1, #1
   15154:	bl	16390 <__assert_fail@plt+0x51cc>
   15158:	cmp	r0, #0
   1515c:	popne	{fp, pc}
   15160:	bl	15628 <__assert_fail@plt+0x4464>
   15164:	push	{fp, lr}
   15168:	mov	fp, sp
   1516c:	clz	r3, r2
   15170:	lsr	ip, r3, #5
   15174:	clz	r3, r1
   15178:	lsr	r3, r3, #5
   1517c:	orrs	r3, r3, ip
   15180:	movwne	r1, #1
   15184:	movwne	r2, #1
   15188:	bl	16c34 <__assert_fail@plt+0x5a70>
   1518c:	cmp	r0, #0
   15190:	popne	{fp, pc}
   15194:	bl	15628 <__assert_fail@plt+0x4464>
   15198:	push	{fp, lr}
   1519c:	mov	fp, sp
   151a0:	mov	r2, r1
   151a4:	mov	r1, r0
   151a8:	mov	r0, #0
   151ac:	bl	16c34 <__assert_fail@plt+0x5a70>
   151b0:	cmp	r0, #0
   151b4:	popne	{fp, pc}
   151b8:	bl	15628 <__assert_fail@plt+0x4464>
   151bc:	push	{fp, lr}
   151c0:	mov	fp, sp
   151c4:	mov	r2, r1
   151c8:	mov	r1, r0
   151cc:	clz	r0, r2
   151d0:	clz	r3, r1
   151d4:	lsr	r0, r0, #5
   151d8:	lsr	r3, r3, #5
   151dc:	orrs	r0, r3, r0
   151e0:	movwne	r1, #1
   151e4:	movwne	r2, #1
   151e8:	mov	r0, #0
   151ec:	bl	16c34 <__assert_fail@plt+0x5a70>
   151f0:	cmp	r0, #0
   151f4:	popne	{fp, pc}
   151f8:	bl	15628 <__assert_fail@plt+0x4464>
   151fc:	push	{r4, r5, r6, sl, fp, lr}
   15200:	add	fp, sp, #16
   15204:	ldr	r5, [r1]
   15208:	mov	r4, r1
   1520c:	mov	r6, r0
   15210:	cmp	r0, #0
   15214:	beq	1522c <__assert_fail@plt+0x4068>
   15218:	mov	r0, #1
   1521c:	add	r0, r0, r5, lsr #1
   15220:	adds	r5, r5, r0
   15224:	bcc	15234 <__assert_fail@plt+0x4070>
   15228:	b	15270 <__assert_fail@plt+0x40ac>
   1522c:	cmp	r5, #0
   15230:	movweq	r5, #64	; 0x40
   15234:	mov	r0, r6
   15238:	mov	r1, r5
   1523c:	mov	r2, #1
   15240:	bl	16c34 <__assert_fail@plt+0x5a70>
   15244:	cmp	r5, #0
   15248:	mov	r1, r5
   1524c:	movwne	r1, #1
   15250:	cmp	r0, #0
   15254:	bne	15268 <__assert_fail@plt+0x40a4>
   15258:	clz	r2, r6
   1525c:	lsr	r2, r2, #5
   15260:	orrs	r1, r2, r1
   15264:	bne	15270 <__assert_fail@plt+0x40ac>
   15268:	str	r5, [r4]
   1526c:	pop	{r4, r5, r6, sl, fp, pc}
   15270:	bl	15628 <__assert_fail@plt+0x4464>
   15274:	push	{r4, r5, r6, r7, fp, lr}
   15278:	add	fp, sp, #16
   1527c:	ldr	r5, [r1]
   15280:	mov	r6, r2
   15284:	mov	r4, r1
   15288:	mov	r7, r0
   1528c:	cmp	r0, #0
   15290:	beq	152a8 <__assert_fail@plt+0x40e4>
   15294:	mov	r0, #1
   15298:	add	r0, r0, r5, lsr #1
   1529c:	adds	r5, r5, r0
   152a0:	bcc	152c0 <__assert_fail@plt+0x40fc>
   152a4:	b	152f4 <__assert_fail@plt+0x4130>
   152a8:	cmp	r5, #0
   152ac:	bne	152c0 <__assert_fail@plt+0x40fc>
   152b0:	mov	r0, #64	; 0x40
   152b4:	cmp	r6, #64	; 0x40
   152b8:	udiv	r5, r0, r6
   152bc:	addhi	r5, r5, #1
   152c0:	mov	r0, r7
   152c4:	mov	r1, r5
   152c8:	mov	r2, r6
   152cc:	bl	16c34 <__assert_fail@plt+0x5a70>
   152d0:	cmp	r0, #0
   152d4:	bne	152ec <__assert_fail@plt+0x4128>
   152d8:	cmp	r7, #0
   152dc:	beq	152f4 <__assert_fail@plt+0x4130>
   152e0:	cmp	r6, #0
   152e4:	cmpne	r5, #0
   152e8:	bne	152f4 <__assert_fail@plt+0x4130>
   152ec:	str	r5, [r4]
   152f0:	pop	{r4, r5, r6, r7, fp, pc}
   152f4:	bl	15628 <__assert_fail@plt+0x4464>
   152f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152fc:	add	fp, sp, #24
   15300:	mov	r8, r1
   15304:	ldr	r1, [r1]
   15308:	mov	r5, r0
   1530c:	add	r0, r1, r1, asr #1
   15310:	cmp	r0, r1
   15314:	mvnvs	r0, #-2147483648	; 0x80000000
   15318:	cmp	r0, r3
   1531c:	mov	r7, r0
   15320:	movgt	r7, r3
   15324:	cmn	r3, #1
   15328:	movle	r7, r0
   1532c:	ldr	r0, [fp, #8]
   15330:	cmn	r0, #1
   15334:	ble	1535c <__assert_fail@plt+0x4198>
   15338:	cmp	r0, #0
   1533c:	beq	153b0 <__assert_fail@plt+0x41ec>
   15340:	cmn	r7, #1
   15344:	ble	15384 <__assert_fail@plt+0x41c0>
   15348:	mvn	r4, #-2147483648	; 0x80000000
   1534c:	udiv	r6, r4, r0
   15350:	cmp	r6, r7
   15354:	bge	153b0 <__assert_fail@plt+0x41ec>
   15358:	b	153c0 <__assert_fail@plt+0x41fc>
   1535c:	cmn	r7, #1
   15360:	ble	153a0 <__assert_fail@plt+0x41dc>
   15364:	cmn	r0, #1
   15368:	beq	153b0 <__assert_fail@plt+0x41ec>
   1536c:	mov	r6, #-2147483648	; 0x80000000
   15370:	mvn	r4, #-2147483648	; 0x80000000
   15374:	sdiv	r6, r6, r0
   15378:	cmp	r6, r7
   1537c:	bge	153b0 <__assert_fail@plt+0x41ec>
   15380:	b	153c0 <__assert_fail@plt+0x41fc>
   15384:	beq	153b0 <__assert_fail@plt+0x41ec>
   15388:	mov	r6, #-2147483648	; 0x80000000
   1538c:	mvn	r4, #-2147483648	; 0x80000000
   15390:	sdiv	r6, r6, r7
   15394:	cmp	r6, r0
   15398:	bge	153b0 <__assert_fail@plt+0x41ec>
   1539c:	b	153c0 <__assert_fail@plt+0x41fc>
   153a0:	mvn	r4, #-2147483648	; 0x80000000
   153a4:	sdiv	r6, r4, r0
   153a8:	cmp	r7, r6
   153ac:	blt	153c0 <__assert_fail@plt+0x41fc>
   153b0:	mul	r6, r7, r0
   153b4:	mov	r4, #64	; 0x40
   153b8:	cmp	r6, #63	; 0x3f
   153bc:	bgt	153c8 <__assert_fail@plt+0x4204>
   153c0:	sdiv	r7, r4, r0
   153c4:	mul	r6, r7, r0
   153c8:	cmp	r5, #0
   153cc:	moveq	r4, #0
   153d0:	streq	r4, [r8]
   153d4:	sub	r4, r7, r1
   153d8:	cmp	r4, r2
   153dc:	bge	15488 <__assert_fail@plt+0x42c4>
   153e0:	add	r7, r1, r2
   153e4:	mov	r6, #0
   153e8:	mov	r2, #0
   153ec:	cmp	r7, r3
   153f0:	movwgt	r6, #1
   153f4:	cmn	r3, #1
   153f8:	movwgt	r2, #1
   153fc:	cmp	r7, r1
   15400:	bvs	154bc <__assert_fail@plt+0x42f8>
   15404:	ands	r1, r2, r6
   15408:	bne	154bc <__assert_fail@plt+0x42f8>
   1540c:	cmn	r0, #1
   15410:	ble	15438 <__assert_fail@plt+0x4274>
   15414:	cmp	r0, #0
   15418:	beq	15484 <__assert_fail@plt+0x42c0>
   1541c:	cmn	r7, #1
   15420:	ble	1545c <__assert_fail@plt+0x4298>
   15424:	mvn	r1, #-2147483648	; 0x80000000
   15428:	udiv	r1, r1, r0
   1542c:	cmp	r1, r7
   15430:	bge	15484 <__assert_fail@plt+0x42c0>
   15434:	b	154bc <__assert_fail@plt+0x42f8>
   15438:	cmn	r7, #1
   1543c:	ble	15474 <__assert_fail@plt+0x42b0>
   15440:	cmn	r0, #1
   15444:	beq	15484 <__assert_fail@plt+0x42c0>
   15448:	mov	r1, #-2147483648	; 0x80000000
   1544c:	sdiv	r1, r1, r0
   15450:	cmp	r1, r7
   15454:	bge	15484 <__assert_fail@plt+0x42c0>
   15458:	b	154bc <__assert_fail@plt+0x42f8>
   1545c:	beq	15484 <__assert_fail@plt+0x42c0>
   15460:	mov	r1, #-2147483648	; 0x80000000
   15464:	sdiv	r1, r1, r7
   15468:	cmp	r1, r0
   1546c:	bge	15484 <__assert_fail@plt+0x42c0>
   15470:	b	154bc <__assert_fail@plt+0x42f8>
   15474:	mvn	r1, #-2147483648	; 0x80000000
   15478:	sdiv	r1, r1, r0
   1547c:	cmp	r7, r1
   15480:	blt	154bc <__assert_fail@plt+0x42f8>
   15484:	mul	r6, r7, r0
   15488:	mov	r0, r5
   1548c:	mov	r1, r6
   15490:	bl	16390 <__assert_fail@plt+0x51cc>
   15494:	cmp	r6, #0
   15498:	movwne	r6, #1
   1549c:	cmp	r0, #0
   154a0:	bne	154b4 <__assert_fail@plt+0x42f0>
   154a4:	clz	r1, r5
   154a8:	lsr	r1, r1, #5
   154ac:	orrs	r1, r1, r6
   154b0:	bne	154bc <__assert_fail@plt+0x42f8>
   154b4:	str	r7, [r8]
   154b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154bc:	bl	15628 <__assert_fail@plt+0x4464>
   154c0:	push	{fp, lr}
   154c4:	mov	fp, sp
   154c8:	mov	r1, #1
   154cc:	bl	1630c <__assert_fail@plt+0x5148>
   154d0:	cmp	r0, #0
   154d4:	popne	{fp, pc}
   154d8:	bl	15628 <__assert_fail@plt+0x4464>
   154dc:	push	{fp, lr}
   154e0:	mov	fp, sp
   154e4:	bl	1630c <__assert_fail@plt+0x5148>
   154e8:	cmp	r0, #0
   154ec:	popne	{fp, pc}
   154f0:	bl	15628 <__assert_fail@plt+0x4464>
   154f4:	push	{fp, lr}
   154f8:	mov	fp, sp
   154fc:	mov	r1, #1
   15500:	bl	1630c <__assert_fail@plt+0x5148>
   15504:	cmp	r0, #0
   15508:	popne	{fp, pc}
   1550c:	bl	15628 <__assert_fail@plt+0x4464>
   15510:	push	{fp, lr}
   15514:	mov	fp, sp
   15518:	bl	1630c <__assert_fail@plt+0x5148>
   1551c:	cmp	r0, #0
   15520:	popne	{fp, pc}
   15524:	bl	15628 <__assert_fail@plt+0x4464>
   15528:	push	{r4, r5, r6, sl, fp, lr}
   1552c:	add	fp, sp, #16
   15530:	mov	r5, r0
   15534:	mov	r0, r1
   15538:	mov	r4, r1
   1553c:	bl	16360 <__assert_fail@plt+0x519c>
   15540:	cmp	r0, #0
   15544:	beq	15560 <__assert_fail@plt+0x439c>
   15548:	mov	r1, r5
   1554c:	mov	r2, r4
   15550:	mov	r6, r0
   15554:	bl	10f90 <memcpy@plt>
   15558:	mov	r0, r6
   1555c:	pop	{r4, r5, r6, sl, fp, pc}
   15560:	bl	15628 <__assert_fail@plt+0x4464>
   15564:	push	{r4, r5, r6, sl, fp, lr}
   15568:	add	fp, sp, #16
   1556c:	mov	r5, r0
   15570:	mov	r0, r1
   15574:	mov	r4, r1
   15578:	bl	16360 <__assert_fail@plt+0x519c>
   1557c:	cmp	r0, #0
   15580:	beq	1559c <__assert_fail@plt+0x43d8>
   15584:	mov	r1, r5
   15588:	mov	r2, r4
   1558c:	mov	r6, r0
   15590:	bl	10f90 <memcpy@plt>
   15594:	mov	r0, r6
   15598:	pop	{r4, r5, r6, sl, fp, pc}
   1559c:	bl	15628 <__assert_fail@plt+0x4464>
   155a0:	push	{r4, r5, r6, sl, fp, lr}
   155a4:	add	fp, sp, #16
   155a8:	mov	r5, r0
   155ac:	add	r0, r1, #1
   155b0:	mov	r4, r1
   155b4:	bl	16360 <__assert_fail@plt+0x519c>
   155b8:	cmp	r0, #0
   155bc:	beq	155e4 <__assert_fail@plt+0x4420>
   155c0:	mov	r6, r0
   155c4:	mov	r0, #0
   155c8:	mov	r1, r5
   155cc:	mov	r2, r4
   155d0:	strb	r0, [r6, r4]
   155d4:	mov	r0, r6
   155d8:	bl	10f90 <memcpy@plt>
   155dc:	mov	r0, r6
   155e0:	pop	{r4, r5, r6, sl, fp, pc}
   155e4:	bl	15628 <__assert_fail@plt+0x4464>
   155e8:	push	{r4, r5, r6, sl, fp, lr}
   155ec:	add	fp, sp, #16
   155f0:	mov	r4, r0
   155f4:	bl	11098 <strlen@plt>
   155f8:	add	r5, r0, #1
   155fc:	mov	r0, r5
   15600:	bl	16360 <__assert_fail@plt+0x519c>
   15604:	cmp	r0, #0
   15608:	beq	15624 <__assert_fail@plt+0x4460>
   1560c:	mov	r1, r4
   15610:	mov	r2, r5
   15614:	mov	r6, r0
   15618:	bl	10f90 <memcpy@plt>
   1561c:	mov	r0, r6
   15620:	pop	{r4, r5, r6, sl, fp, pc}
   15624:	bl	15628 <__assert_fail@plt+0x4464>
   15628:	push	{fp, lr}
   1562c:	mov	fp, sp
   15630:	movw	r0, #33028	; 0x8104
   15634:	movw	r1, #31736	; 0x7bf8
   15638:	mov	r2, #5
   1563c:	movt	r0, #2
   15640:	movt	r1, #1
   15644:	ldr	r4, [r0]
   15648:	mov	r0, #0
   1564c:	bl	10fc0 <dcgettext@plt>
   15650:	movw	r2, #31973	; 0x7ce5
   15654:	mov	r3, r0
   15658:	mov	r0, r4
   1565c:	mov	r1, #0
   15660:	movt	r2, #1
   15664:	bl	1102c <error@plt>
   15668:	bl	111ac <abort@plt>
   1566c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15670:	add	fp, sp, #28
   15674:	sub	sp, sp, #44	; 0x2c
   15678:	cmp	r2, #37	; 0x25
   1567c:	bcs	162ec <__assert_fail@plt+0x5128>
   15680:	ldr	sl, [fp, #8]
   15684:	mov	r6, r2
   15688:	mov	r7, r1
   1568c:	mov	r4, r0
   15690:	str	r3, [sp, #36]	; 0x24
   15694:	bl	110b0 <__errno_location@plt>
   15698:	mov	r5, r0
   1569c:	mov	r0, #0
   156a0:	str	r0, [r5]
   156a4:	bl	11080 <__ctype_b_loc@plt>
   156a8:	ldr	r1, [r0]
   156ac:	mov	r2, r4
   156b0:	ldrb	r0, [r2], #1
   156b4:	add	r3, r1, r0, lsl #1
   156b8:	ldrb	r3, [r3, #1]
   156bc:	tst	r3, #32
   156c0:	bne	156b0 <__assert_fail@plt+0x44ec>
   156c4:	sub	r9, fp, #32
   156c8:	cmp	r7, #0
   156cc:	mov	r8, #4
   156d0:	movne	r9, r7
   156d4:	cmp	r0, #45	; 0x2d
   156d8:	beq	162e0 <__assert_fail@plt+0x511c>
   156dc:	mov	r0, r4
   156e0:	mov	r1, r9
   156e4:	mov	r2, r6
   156e8:	mov	r3, #0
   156ec:	bl	10f9c <__strtoull_internal@plt>
   156f0:	mov	r7, r1
   156f4:	ldr	r1, [r9]
   156f8:	cmp	r1, r4
   156fc:	beq	15728 <__assert_fail@plt+0x4564>
   15700:	mov	r6, r0
   15704:	ldr	r0, [r5]
   15708:	cmp	r0, #0
   1570c:	beq	15764 <__assert_fail@plt+0x45a0>
   15710:	cmp	r0, #34	; 0x22
   15714:	bne	162e0 <__assert_fail@plt+0x511c>
   15718:	mov	r8, #1
   1571c:	cmp	sl, #0
   15720:	bne	15770 <__assert_fail@plt+0x45ac>
   15724:	b	162d8 <__assert_fail@plt+0x5114>
   15728:	cmp	sl, #0
   1572c:	beq	162e0 <__assert_fail@plt+0x511c>
   15730:	mov	r5, r1
   15734:	ldrb	r1, [r4]
   15738:	cmp	r1, #0
   1573c:	beq	162e0 <__assert_fail@plt+0x511c>
   15740:	mov	r0, sl
   15744:	bl	110a4 <strchr@plt>
   15748:	cmp	r0, #0
   1574c:	beq	162e0 <__assert_fail@plt+0x511c>
   15750:	mov	r1, r5
   15754:	mov	r8, #0
   15758:	mov	r6, #1
   1575c:	mov	r7, #0
   15760:	b	15770 <__assert_fail@plt+0x45ac>
   15764:	mov	r8, r0
   15768:	cmp	sl, #0
   1576c:	beq	162d8 <__assert_fail@plt+0x5114>
   15770:	ldrb	r4, [r1]
   15774:	cmp	r4, #0
   15778:	beq	162d8 <__assert_fail@plt+0x5114>
   1577c:	str	r1, [sp, #32]
   15780:	mov	r0, sl
   15784:	mov	r1, r4
   15788:	bl	110a4 <strchr@plt>
   1578c:	cmp	r0, #0
   15790:	beq	15a58 <__assert_fail@plt+0x4894>
   15794:	sub	r0, r4, #69	; 0x45
   15798:	mov	r1, #1
   1579c:	mov	r3, #0
   157a0:	mov	r5, #1024	; 0x400
   157a4:	cmp	r0, #47	; 0x2f
   157a8:	str	r1, [sp, #28]
   157ac:	bhi	158b0 <__assert_fail@plt+0x46ec>
   157b0:	add	r1, pc, #0
   157b4:	ldr	pc, [r1, r0, lsl #2]
   157b8:	andeq	r5, r1, r8, ror r8
   157bc:			; <UNDEFINED> instruction: 0x000158b0
   157c0:	andeq	r5, r1, r8, ror r8
   157c4:			; <UNDEFINED> instruction: 0x000158b0
   157c8:			; <UNDEFINED> instruction: 0x000158b0
   157cc:			; <UNDEFINED> instruction: 0x000158b0
   157d0:	andeq	r5, r1, r8, ror r8
   157d4:			; <UNDEFINED> instruction: 0x000158b0
   157d8:	andeq	r5, r1, r8, ror r8
   157dc:			; <UNDEFINED> instruction: 0x000158b0
   157e0:			; <UNDEFINED> instruction: 0x000158b0
   157e4:	andeq	r5, r1, r8, ror r8
   157e8:			; <UNDEFINED> instruction: 0x000158b0
   157ec:			; <UNDEFINED> instruction: 0x000158b0
   157f0:			; <UNDEFINED> instruction: 0x000158b0
   157f4:	andeq	r5, r1, r8, ror r8
   157f8:			; <UNDEFINED> instruction: 0x000158b0
   157fc:			; <UNDEFINED> instruction: 0x000158b0
   15800:			; <UNDEFINED> instruction: 0x000158b0
   15804:			; <UNDEFINED> instruction: 0x000158b0
   15808:	andeq	r5, r1, r8, ror r8
   1580c:	andeq	r5, r1, r8, ror r8
   15810:			; <UNDEFINED> instruction: 0x000158b0
   15814:			; <UNDEFINED> instruction: 0x000158b0
   15818:			; <UNDEFINED> instruction: 0x000158b0
   1581c:			; <UNDEFINED> instruction: 0x000158b0
   15820:			; <UNDEFINED> instruction: 0x000158b0
   15824:			; <UNDEFINED> instruction: 0x000158b0
   15828:			; <UNDEFINED> instruction: 0x000158b0
   1582c:			; <UNDEFINED> instruction: 0x000158b0
   15830:			; <UNDEFINED> instruction: 0x000158b0
   15834:			; <UNDEFINED> instruction: 0x000158b0
   15838:			; <UNDEFINED> instruction: 0x000158b0
   1583c:			; <UNDEFINED> instruction: 0x000158b0
   15840:	andeq	r5, r1, r8, ror r8
   15844:			; <UNDEFINED> instruction: 0x000158b0
   15848:			; <UNDEFINED> instruction: 0x000158b0
   1584c:			; <UNDEFINED> instruction: 0x000158b0
   15850:	andeq	r5, r1, r8, ror r8
   15854:			; <UNDEFINED> instruction: 0x000158b0
   15858:	andeq	r5, r1, r8, ror r8
   1585c:			; <UNDEFINED> instruction: 0x000158b0
   15860:			; <UNDEFINED> instruction: 0x000158b0
   15864:			; <UNDEFINED> instruction: 0x000158b0
   15868:			; <UNDEFINED> instruction: 0x000158b0
   1586c:			; <UNDEFINED> instruction: 0x000158b0
   15870:			; <UNDEFINED> instruction: 0x000158b0
   15874:	andeq	r5, r1, r8, ror r8
   15878:	mov	r0, sl
   1587c:	mov	r1, #48	; 0x30
   15880:	bl	110a4 <strchr@plt>
   15884:	cmp	r0, #0
   15888:	beq	158ac <__assert_fail@plt+0x46e8>
   1588c:	ldr	r1, [sp, #32]
   15890:	ldrb	r0, [r1, #1]
   15894:	cmp	r0, #66	; 0x42
   15898:	cmpne	r0, #68	; 0x44
   1589c:	bne	15a64 <__assert_fail@plt+0x48a0>
   158a0:	mov	r5, #1000	; 0x3e8
   158a4:	mov	r0, #2
   158a8:	str	r0, [sp, #28]
   158ac:	mov	r3, #0
   158b0:	sub	r0, r4, #66	; 0x42
   158b4:	cmp	r0, #53	; 0x35
   158b8:	bhi	15a58 <__assert_fail@plt+0x4894>
   158bc:	add	r1, pc, #0
   158c0:	ldr	pc, [r1, r0, lsl #2]
   158c4:	andeq	r5, r1, r0, ror #27
   158c8:	andeq	r5, r1, r8, asr sl
   158cc:	andeq	r5, r1, r8, asr sl
   158d0:	andeq	r5, r1, r8, lsl #28
   158d4:	andeq	r5, r1, r8, asr sl
   158d8:	muleq	r1, ip, r9
   158dc:	andeq	r5, r1, r8, asr sl
   158e0:	andeq	r5, r1, r8, asr sl
   158e4:	andeq	r5, r1, r8, asr sl
   158e8:	andeq	r5, r1, r8, lsl #21
   158ec:	andeq	r5, r1, r8, asr sl
   158f0:	ldrdeq	r5, [r1], -r0
   158f4:	andeq	r5, r1, r8, asr sl
   158f8:	andeq	r5, r1, r8, asr sl
   158fc:	andeq	r5, r1, r0, ror #30
   15900:	andeq	r5, r1, r8, asr sl
   15904:	andeq	r5, r1, r8, asr sl
   15908:	andeq	r5, r1, r8, asr sl
   1590c:	andeq	r5, r1, ip, asr fp
   15910:	andeq	r5, r1, r8, asr sl
   15914:	andeq	r5, r1, r8, asr sl
   15918:	andeq	r5, r1, r8, asr sl
   1591c:	andeq	r5, r1, r8, asr sl
   15920:	andeq	r6, r1, r8, lsl #1
   15924:	andeq	r5, r1, r4, asr #24
   15928:	andeq	r5, r1, r8, asr sl
   1592c:	andeq	r5, r1, r8, asr sl
   15930:	andeq	r5, r1, r8, asr sl
   15934:	andeq	r5, r1, r8, asr sl
   15938:	andeq	r5, r1, r8, asr sl
   1593c:	andeq	r5, r1, r8, asr sl
   15940:	andeq	r5, r1, r8, asr sl
   15944:	andeq	r6, r1, r0, ror #4
   15948:			; <UNDEFINED> instruction: 0x000162b8
   1594c:	andeq	r5, r1, r8, asr sl
   15950:	andeq	r5, r1, r8, asr sl
   15954:	andeq	r5, r1, r8, asr sl
   15958:	muleq	r1, ip, r9
   1595c:	andeq	r5, r1, r8, asr sl
   15960:	andeq	r5, r1, r8, asr sl
   15964:	andeq	r5, r1, r8, asr sl
   15968:	andeq	r5, r1, r8, lsl #21
   1596c:	andeq	r5, r1, r8, asr sl
   15970:	ldrdeq	r5, [r1], -r0
   15974:	andeq	r5, r1, r8, asr sl
   15978:	andeq	r5, r1, r8, asr sl
   1597c:	andeq	r5, r1, r8, asr sl
   15980:	andeq	r5, r1, r8, asr sl
   15984:	andeq	r5, r1, r8, asr sl
   15988:	andeq	r5, r1, r8, asr sl
   1598c:	andeq	r5, r1, ip, asr fp
   15990:	andeq	r5, r1, r8, asr sl
   15994:	andeq	r5, r1, r8, asr sl
   15998:	muleq	r1, r4, r2
   1599c:	mvn	r0, #0
   159a0:	mvn	r1, #0
   159a4:	mov	r2, r5
   159a8:	mov	sl, r3
   159ac:	bl	17138 <__assert_fail@plt+0x5f74>
   159b0:	subs	r3, r0, r6
   159b4:	mov	lr, #0
   159b8:	umull	r4, r2, r6, r5
   159bc:	str	r1, [sp, #20]
   159c0:	sbcs	r3, r1, r7
   159c4:	mla	ip, r6, sl, r2
   159c8:	mov	r2, r1
   159cc:	movwcc	lr, #1
   159d0:	mla	r7, r7, r5, ip
   159d4:	mov	r2, #0
   159d8:	cmp	lr, #0
   159dc:	mvnne	r4, #0
   159e0:	mvnne	r7, #0
   159e4:	subs	r6, r0, r4
   159e8:	sbcs	r6, r1, r7
   159ec:	movwcc	r2, #1
   159f0:	umull	r3, r6, r4, r5
   159f4:	cmp	r2, #0
   159f8:	str	r6, [sp, #16]
   159fc:	mvnne	r3, #0
   15a00:	cmp	r2, #0
   15a04:	umull	r6, ip, r3, r5
   15a08:	mla	r1, r3, sl, ip
   15a0c:	ldr	ip, [sp, #16]
   15a10:	str	r1, [sp, #12]
   15a14:	mla	r4, r4, sl, ip
   15a18:	mla	r4, r7, r5, r4
   15a1c:	ldr	r7, [sp, #12]
   15a20:	mvnne	r4, #0
   15a24:	subs	r0, r0, r3
   15a28:	ldr	r0, [sp, #20]
   15a2c:	mla	r7, r4, r5, r7
   15a30:	sbcs	r0, r0, r4
   15a34:	mov	r0, #0
   15a38:	movwcc	r0, #1
   15a3c:	cmp	r0, #0
   15a40:	mov	r1, r0
   15a44:	orr	r0, lr, r2
   15a48:	mvnne	r7, #0
   15a4c:	mvnne	r6, #0
   15a50:	orr	r3, r0, r1
   15a54:	b	162b8 <__assert_fail@plt+0x50f4>
   15a58:	ldr	r0, [sp, #36]	; 0x24
   15a5c:	orr	r8, r8, #2
   15a60:	b	162dc <__assert_fail@plt+0x5118>
   15a64:	cmp	r0, #105	; 0x69
   15a68:	mov	r3, #0
   15a6c:	bne	158b0 <__assert_fail@plt+0x46ec>
   15a70:	ldrb	r0, [r1, #2]
   15a74:	mov	r1, #1
   15a78:	cmp	r0, #66	; 0x42
   15a7c:	movweq	r1, #3
   15a80:	str	r1, [sp, #28]
   15a84:	b	158b0 <__assert_fail@plt+0x46ec>
   15a88:	mvn	r0, #0
   15a8c:	mvn	r1, #0
   15a90:	mov	r2, r5
   15a94:	mov	r4, r3
   15a98:	bl	17138 <__assert_fail@plt+0x5f74>
   15a9c:	subs	r0, r0, r6
   15aa0:	mov	r2, #0
   15aa4:	sbcs	r0, r1, r7
   15aa8:	movwcc	r2, #1
   15aac:	umull	r0, r1, r6, r5
   15ab0:	mla	r1, r6, r4, r1
   15ab4:	cmp	r2, #0
   15ab8:	mov	r3, r2
   15abc:	mla	r7, r7, r5, r1
   15ac0:	mvnne	r0, #0
   15ac4:	mvnne	r7, #0
   15ac8:	mov	r6, r0
   15acc:	b	162b8 <__assert_fail@plt+0x50f4>
   15ad0:	mvn	r0, #0
   15ad4:	mvn	r1, #0
   15ad8:	mov	r2, r5
   15adc:	str	r3, [sp, #24]
   15ae0:	bl	17138 <__assert_fail@plt+0x5f74>
   15ae4:	subs	r3, r0, r6
   15ae8:	mov	ip, r0
   15aec:	umull	r4, r0, r6, r5
   15af0:	mov	sl, #0
   15af4:	sbcs	r3, r1, r7
   15af8:	str	r0, [sp, #20]
   15afc:	ldr	r0, [sp, #24]
   15b00:	mov	r3, #0
   15b04:	movwcc	r3, #1
   15b08:	cmp	r3, #0
   15b0c:	mvnne	r4, #0
   15b10:	cmp	r3, #0
   15b14:	umull	lr, r2, r4, r5
   15b18:	mla	r2, r4, r0, r2
   15b1c:	str	r2, [sp, #16]
   15b20:	ldr	r2, [sp, #20]
   15b24:	mla	r6, r6, r0, r2
   15b28:	ldr	r0, [sp, #16]
   15b2c:	mla	r6, r7, r5, r6
   15b30:	mvnne	r6, #0
   15b34:	mla	r7, r6, r5, r0
   15b38:	subs	r0, ip, r4
   15b3c:	sbcs	r0, r1, r6
   15b40:	movwcc	sl, #1
   15b44:	cmp	sl, #0
   15b48:	orr	r3, r3, sl
   15b4c:	mvnne	lr, #0
   15b50:	mvnne	r7, #0
   15b54:	mov	r6, lr
   15b58:	b	162b8 <__assert_fail@plt+0x50f4>
   15b5c:	mvn	r0, #0
   15b60:	mvn	r1, #0
   15b64:	mov	r2, r5
   15b68:	mov	sl, r3
   15b6c:	bl	17138 <__assert_fail@plt+0x5f74>
   15b70:	subs	r3, r0, r6
   15b74:	mov	ip, r1
   15b78:	umull	r2, lr, r6, r5
   15b7c:	str	r0, [sp, #20]
   15b80:	sbcs	r3, r1, r7
   15b84:	mov	r1, #0
   15b88:	mla	r6, r6, sl, lr
   15b8c:	mov	lr, #0
   15b90:	str	ip, [sp, #16]
   15b94:	movwcc	r1, #1
   15b98:	mla	r7, r7, r5, r6
   15b9c:	cmp	r1, #0
   15ba0:	mvnne	r2, #0
   15ba4:	cmp	r1, #0
   15ba8:	umull	r3, r4, r2, r5
   15bac:	mvnne	r7, #0
   15bb0:	mla	r4, r2, sl, r4
   15bb4:	subs	r2, r0, r2
   15bb8:	sbcs	r2, ip, r7
   15bbc:	mla	r4, r7, r5, r4
   15bc0:	movwcc	lr, #1
   15bc4:	mov	r2, #0
   15bc8:	cmp	lr, #0
   15bcc:	mvnne	r3, #0
   15bd0:	mvnne	r4, #0
   15bd4:	subs	r7, r0, r3
   15bd8:	mov	r0, r5
   15bdc:	sbcs	r7, ip, r4
   15be0:	movwcc	r2, #1
   15be4:	umull	r5, r7, r3, r5
   15be8:	cmp	r2, #0
   15bec:	mla	r3, r3, sl, r7
   15bf0:	mvnne	r5, #0
   15bf4:	mla	r3, r4, r0, r3
   15bf8:	cmp	r2, #0
   15bfc:	umull	r6, ip, r5, r0
   15c00:	mvnne	r3, #0
   15c04:	mla	ip, r5, sl, ip
   15c08:	mla	r7, r3, r0, ip
   15c0c:	ldr	r0, [sp, #20]
   15c10:	subs	r0, r0, r5
   15c14:	ldr	r0, [sp, #16]
   15c18:	sbcs	r0, r0, r3
   15c1c:	mov	r0, #0
   15c20:	movwcc	r0, #1
   15c24:	cmp	r0, #0
   15c28:	mov	r3, r0
   15c2c:	orr	r0, r1, lr
   15c30:	orr	r0, r0, r2
   15c34:	mvnne	r7, #0
   15c38:	mvnne	r6, #0
   15c3c:	orr	r3, r0, r3
   15c40:	b	162b8 <__assert_fail@plt+0x50f4>
   15c44:	mvn	r0, #0
   15c48:	mvn	r1, #0
   15c4c:	mov	r2, r5
   15c50:	mov	r4, r3
   15c54:	str	r3, [sp, #24]
   15c58:	bl	17138 <__assert_fail@plt+0x5f74>
   15c5c:	umull	r3, r2, r6, r5
   15c60:	mla	r2, r6, r4, r2
   15c64:	subs	r6, r0, r6
   15c68:	sbcs	r6, r1, r7
   15c6c:	mla	ip, r7, r5, r2
   15c70:	ldr	r2, [sp, #24]
   15c74:	mov	r6, #0
   15c78:	movwcc	r6, #1
   15c7c:	cmp	r6, #0
   15c80:	str	r6, [sp, #20]
   15c84:	mov	r6, #0
   15c88:	mvnne	r3, #0
   15c8c:	mvnne	ip, #0
   15c90:	subs	r4, r0, r3
   15c94:	umull	r7, lr, r3, r5
   15c98:	sbcs	r4, r1, ip
   15c9c:	mla	r3, r3, r2, lr
   15ca0:	movwcc	r6, #1
   15ca4:	cmp	r6, #0
   15ca8:	str	r6, [sp, #16]
   15cac:	mvnne	r7, #0
   15cb0:	cmp	r6, #0
   15cb4:	umull	sl, r4, r7, r5
   15cb8:	mla	r4, r7, r2, r4
   15cbc:	mla	r2, ip, r5, r3
   15cc0:	mov	ip, #0
   15cc4:	mvnne	r2, #0
   15cc8:	subs	r3, r0, r7
   15ccc:	mla	r6, r2, r5, r4
   15cd0:	mov	r4, r0
   15cd4:	sbcs	r2, r1, r2
   15cd8:	mov	r0, #0
   15cdc:	movwcc	r0, #1
   15ce0:	mov	r3, r4
   15ce4:	cmp	r0, #0
   15ce8:	str	r0, [sp, #12]
   15cec:	mov	r0, r1
   15cf0:	str	r3, [sp, #4]
   15cf4:	mvnne	sl, #0
   15cf8:	mvnne	r6, #0
   15cfc:	str	r0, [sp, #8]
   15d00:	subs	r2, r4, sl
   15d04:	ldr	r4, [sp, #24]
   15d08:	sbcs	r2, r1, r6
   15d0c:	movwcc	ip, #1
   15d10:	umull	r7, r2, sl, r5
   15d14:	cmp	ip, #0
   15d18:	mla	r2, sl, r4, r2
   15d1c:	mvnne	r7, #0
   15d20:	cmp	ip, #0
   15d24:	mov	sl, #0
   15d28:	umull	r1, lr, r7, r5
   15d2c:	mla	r2, r6, r5, r2
   15d30:	mvnne	r2, #0
   15d34:	mla	lr, r7, r4, lr
   15d38:	subs	r6, r3, r7
   15d3c:	mla	lr, r2, r5, lr
   15d40:	sbcs	r2, r0, r2
   15d44:	movwcc	sl, #1
   15d48:	mov	r2, #0
   15d4c:	cmp	sl, #0
   15d50:	mvnne	r1, #0
   15d54:	mvnne	lr, #0
   15d58:	subs	r6, r3, r1
   15d5c:	ldr	r3, [sp, #24]
   15d60:	sbcs	r6, r0, lr
   15d64:	umull	r0, r7, r1, r5
   15d68:	movwcc	r2, #1
   15d6c:	cmp	r2, #0
   15d70:	mvnne	r0, #0
   15d74:	mla	r1, r1, r3, r7
   15d78:	cmp	r2, #0
   15d7c:	umull	r6, r4, r0, r5
   15d80:	mla	r1, lr, r5, r1
   15d84:	mla	r4, r0, r3, r4
   15d88:	ldr	r3, [sp, #4]
   15d8c:	mvnne	r1, #0
   15d90:	mla	r7, r1, r5, r4
   15d94:	ldr	r5, [sp, #16]
   15d98:	subs	r0, r3, r0
   15d9c:	ldr	r0, [sp, #8]
   15da0:	sbcs	r0, r0, r1
   15da4:	mov	r0, #0
   15da8:	movwcc	r0, #1
   15dac:	cmp	r0, #0
   15db0:	mov	r1, r0
   15db4:	ldr	r0, [sp, #20]
   15db8:	mvnne	r7, #0
   15dbc:	mvnne	r6, #0
   15dc0:	orr	r0, r0, r5
   15dc4:	ldr	r5, [sp, #12]
   15dc8:	orr	r0, r0, r5
   15dcc:	orr	r0, r0, ip
   15dd0:	orr	r0, r0, sl
   15dd4:	orr	r0, r0, r2
   15dd8:	orr	r0, r0, r1
   15ddc:	b	16258 <__assert_fail@plt+0x5094>
   15de0:	mov	r1, #0
   15de4:	lsl	r2, r7, #10
   15de8:	lsl	r0, r6, #10
   15dec:	lsr	r3, r7, #22
   15df0:	cmp	r1, r7, lsr #22
   15df4:	orr	r2, r2, r6, lsr #22
   15df8:	mvnne	r0, #0
   15dfc:	movwne	r3, #1
   15e00:	cmp	r1, r7, lsr #22
   15e04:	b	16284 <__assert_fail@plt+0x50c0>
   15e08:	mvn	r0, #0
   15e0c:	mvn	r1, #0
   15e10:	mov	r2, r5
   15e14:	mov	sl, r3
   15e18:	bl	17138 <__assert_fail@plt+0x5f74>
   15e1c:	subs	r2, r0, r6
   15e20:	mov	ip, r0
   15e24:	mov	r0, #0
   15e28:	sbcs	r2, r1, r7
   15e2c:	movwcc	r0, #1
   15e30:	umull	r4, r2, r6, r5
   15e34:	cmp	r0, #0
   15e38:	mla	r2, r6, sl, r2
   15e3c:	str	r0, [sp, #20]
   15e40:	mvnne	r4, #0
   15e44:	cmp	r0, #0
   15e48:	mla	r2, r7, r5, r2
   15e4c:	mov	r0, #0
   15e50:	umull	lr, r3, r4, r5
   15e54:	mvnne	r2, #0
   15e58:	mla	r3, r4, sl, r3
   15e5c:	mla	r6, r2, r5, r3
   15e60:	subs	r3, ip, r4
   15e64:	sbcs	r2, r1, r2
   15e68:	mov	r3, r1
   15e6c:	movwcc	r0, #1
   15e70:	str	r3, [sp, #8]
   15e74:	cmp	r0, #0
   15e78:	str	r0, [sp, #16]
   15e7c:	mov	r0, ip
   15e80:	mvnne	lr, #0
   15e84:	mvnne	r6, #0
   15e88:	str	r0, [sp, #12]
   15e8c:	subs	r2, ip, lr
   15e90:	umull	r7, r4, lr, r5
   15e94:	sbcs	r2, r1, r6
   15e98:	mla	r4, lr, sl, r4
   15e9c:	mov	r2, #0
   15ea0:	mla	r6, r6, r5, r4
   15ea4:	mov	r4, #0
   15ea8:	movwcc	r2, #1
   15eac:	cmp	r2, #0
   15eb0:	mvnne	r7, #0
   15eb4:	cmp	r2, #0
   15eb8:	umull	r1, ip, r7, r5
   15ebc:	mvnne	r6, #0
   15ec0:	mla	ip, r7, sl, ip
   15ec4:	subs	r7, r0, r7
   15ec8:	mla	lr, r6, r5, ip
   15ecc:	sbcs	r7, r3, r6
   15ed0:	mov	ip, #0
   15ed4:	movwcc	ip, #1
   15ed8:	cmp	ip, #0
   15edc:	mvnne	r1, #0
   15ee0:	mvnne	lr, #0
   15ee4:	subs	r7, r0, r1
   15ee8:	sbcs	r7, r3, lr
   15eec:	movwcc	r4, #1
   15ef0:	umull	r0, r7, r1, r5
   15ef4:	cmp	r4, #0
   15ef8:	mla	r1, r1, sl, r7
   15efc:	mvnne	r0, #0
   15f00:	mla	r1, lr, r5, r1
   15f04:	cmp	r4, #0
   15f08:	umull	r6, r3, r0, r5
   15f0c:	mvnne	r1, #0
   15f10:	mla	r3, r0, sl, r3
   15f14:	mla	r7, r1, r5, r3
   15f18:	ldr	r3, [sp, #12]
   15f1c:	subs	r0, r3, r0
   15f20:	ldr	r3, [sp, #16]
   15f24:	ldr	r0, [sp, #8]
   15f28:	sbcs	r0, r0, r1
   15f2c:	mov	r0, #0
   15f30:	movwcc	r0, #1
   15f34:	cmp	r0, #0
   15f38:	mov	r1, r0
   15f3c:	ldr	r0, [sp, #20]
   15f40:	mvnne	r7, #0
   15f44:	mvnne	r6, #0
   15f48:	orr	r0, r0, r3
   15f4c:	orr	r0, r0, r2
   15f50:	orr	r0, r0, ip
   15f54:	orr	r0, r0, r4
   15f58:	orr	r3, r0, r1
   15f5c:	b	162b8 <__assert_fail@plt+0x50f4>
   15f60:	mvn	r0, #0
   15f64:	mvn	r1, #0
   15f68:	mov	r2, r5
   15f6c:	mov	sl, r3
   15f70:	bl	17138 <__assert_fail@plt+0x5f74>
   15f74:	umull	r3, r2, r6, r5
   15f78:	mov	lr, r1
   15f7c:	mov	r1, r0
   15f80:	mla	r2, r6, sl, r2
   15f84:	subs	r6, r0, r6
   15f88:	mov	r0, #0
   15f8c:	sbcs	r6, lr, r7
   15f90:	mla	r2, r7, r5, r2
   15f94:	movwcc	r0, #1
   15f98:	cmp	r0, #0
   15f9c:	str	r0, [sp, #20]
   15fa0:	mov	r0, r1
   15fa4:	mvnne	r3, #0
   15fa8:	mvnne	r2, #0
   15fac:	str	r0, [sp, #16]
   15fb0:	subs	r4, r1, r3
   15fb4:	umull	r7, ip, r3, r5
   15fb8:	sbcs	r4, lr, r2
   15fbc:	mla	r3, r3, sl, ip
   15fc0:	mov	ip, #0
   15fc4:	mov	r4, #0
   15fc8:	mla	r2, r2, r5, r3
   15fcc:	movwcc	r4, #1
   15fd0:	cmp	r4, #0
   15fd4:	mvnne	r7, #0
   15fd8:	cmp	r4, #0
   15fdc:	umull	r1, r6, r7, r5
   15fe0:	mvnne	r2, #0
   15fe4:	mla	r6, r7, sl, r6
   15fe8:	mla	r3, r2, r5, r6
   15fec:	subs	r6, r0, r7
   15ff0:	sbcs	r2, lr, r2
   15ff4:	movwcc	ip, #1
   15ff8:	mov	r2, #0
   15ffc:	cmp	ip, #0
   16000:	mvnne	r1, #0
   16004:	mvnne	r3, #0
   16008:	subs	r6, r0, r1
   1600c:	sbcs	r6, lr, r3
   16010:	movwcc	r2, #1
   16014:	umull	r0, r6, r1, r5
   16018:	cmp	r2, #0
   1601c:	str	r6, [sp, #12]
   16020:	mvnne	r0, #0
   16024:	cmp	r2, #0
   16028:	umull	r6, r7, r0, r5
   1602c:	mla	r7, r0, sl, r7
   16030:	str	r7, [sp, #8]
   16034:	ldr	r7, [sp, #12]
   16038:	mla	r1, r1, sl, r7
   1603c:	mla	r1, r3, r5, r1
   16040:	ldr	r3, [sp, #8]
   16044:	mvnne	r1, #0
   16048:	mla	r7, r1, r5, r3
   1604c:	ldr	r3, [sp, #16]
   16050:	subs	r0, r3, r0
   16054:	sbcs	r0, lr, r1
   16058:	mov	r0, #0
   1605c:	movwcc	r0, #1
   16060:	cmp	r0, #0
   16064:	mov	r1, r0
   16068:	ldr	r0, [sp, #20]
   1606c:	mvnne	r7, #0
   16070:	mvnne	r6, #0
   16074:	orr	r0, r0, r4
   16078:	orr	r0, r0, ip
   1607c:	orr	r0, r0, r2
   16080:	orr	r3, r0, r1
   16084:	b	162b8 <__assert_fail@plt+0x50f4>
   16088:	mvn	r0, #0
   1608c:	mvn	r1, #0
   16090:	mov	r2, r5
   16094:	mov	sl, r3
   16098:	bl	17138 <__assert_fail@plt+0x5f74>
   1609c:	mov	lr, r0
   160a0:	subs	r0, r0, r6
   160a4:	mov	r2, #0
   160a8:	mov	ip, r1
   160ac:	str	sl, [sp, #24]
   160b0:	sbcs	r0, r1, r7
   160b4:	umull	r3, r1, r6, r5
   160b8:	str	lr, [sp, #4]
   160bc:	movwcc	r2, #1
   160c0:	mla	r6, r6, sl, r1
   160c4:	mov	r1, #0
   160c8:	cmp	r2, #0
   160cc:	mla	r7, r7, r5, r6
   160d0:	str	r2, [sp, #20]
   160d4:	mvnne	r3, #0
   160d8:	cmp	r2, #0
   160dc:	mov	r2, #0
   160e0:	umull	r0, r4, r3, r5
   160e4:	mvnne	r7, #0
   160e8:	mla	r4, r3, sl, r4
   160ec:	subs	r3, lr, r3
   160f0:	sbcs	r3, ip, r7
   160f4:	mla	r4, r7, r5, r4
   160f8:	movwcc	r1, #1
   160fc:	cmp	r1, #0
   16100:	str	r1, [sp, #16]
   16104:	mvnne	r0, #0
   16108:	mvnne	r4, #0
   1610c:	subs	r3, lr, r0
   16110:	sbcs	r3, ip, r4
   16114:	movwcc	r2, #1
   16118:	umull	r6, r3, r0, r5
   1611c:	cmp	r2, #0
   16120:	mla	r0, r0, sl, r3
   16124:	str	r2, [sp, #12]
   16128:	mvnne	r6, #0
   1612c:	mla	r0, r4, r5, r0
   16130:	cmp	r2, #0
   16134:	ldr	r4, [sp, #24]
   16138:	umull	r1, r7, r6, r5
   1613c:	mvnne	r0, #0
   16140:	subs	r3, lr, r6
   16144:	mla	r7, r6, sl, r7
   16148:	mov	r3, ip
   1614c:	mla	r7, r0, r5, r7
   16150:	sbcs	r0, ip, r0
   16154:	str	r3, [sp]
   16158:	mov	r0, #0
   1615c:	movwcc	r0, #1
   16160:	cmp	r0, #0
   16164:	str	r0, [sp, #8]
   16168:	mvnne	r1, #0
   1616c:	mvnne	r7, #0
   16170:	subs	r0, lr, r1
   16174:	sbcs	r0, ip, r7
   16178:	mov	ip, #0
   1617c:	movwcc	ip, #1
   16180:	umull	r6, r0, r1, r5
   16184:	cmp	ip, #0
   16188:	mla	r1, r1, r4, r0
   1618c:	mov	r0, lr
   16190:	mvnne	r6, #0
   16194:	mla	r1, r7, r5, r1
   16198:	cmp	ip, #0
   1619c:	umull	r2, sl, r6, r5
   161a0:	mvnne	r1, #0
   161a4:	mla	sl, r6, r4, sl
   161a8:	subs	r6, lr, r6
   161ac:	mov	lr, #0
   161b0:	mla	r7, r1, r5, sl
   161b4:	sbcs	r1, r3, r1
   161b8:	movwcc	lr, #1
   161bc:	ldr	r1, [sp, #24]
   161c0:	cmp	lr, #0
   161c4:	mvnne	r2, #0
   161c8:	mvnne	r7, #0
   161cc:	subs	r6, r0, r2
   161d0:	umull	r0, sl, r2, r5
   161d4:	sbcs	r6, r3, r7
   161d8:	mov	r3, #0
   161dc:	mla	r2, r2, r1, sl
   161e0:	movwcc	r3, #1
   161e4:	mla	r2, r7, r5, r2
   161e8:	cmp	r3, #0
   161ec:	mvnne	r0, #0
   161f0:	cmp	r3, #0
   161f4:	umull	r6, r4, r0, r5
   161f8:	mvnne	r2, #0
   161fc:	mla	r4, r0, r1, r4
   16200:	ldr	r1, [sp, #4]
   16204:	mla	r7, r2, r5, r4
   16208:	ldr	r5, [sp, #16]
   1620c:	subs	r0, r1, r0
   16210:	ldr	r0, [sp]
   16214:	sbcs	r0, r0, r2
   16218:	mov	r0, #0
   1621c:	movwcc	r0, #1
   16220:	cmp	r0, #0
   16224:	mov	r2, r0
   16228:	ldr	r0, [sp, #20]
   1622c:	mvnne	r7, #0
   16230:	mvnne	r6, #0
   16234:	orr	r0, r0, r5
   16238:	ldr	r5, [sp, #12]
   1623c:	orr	r0, r0, r5
   16240:	ldr	r5, [sp, #8]
   16244:	orr	r0, r0, r5
   16248:	orr	r0, r0, ip
   1624c:	orr	r0, r0, lr
   16250:	orr	r0, r0, r3
   16254:	orr	r0, r0, r2
   16258:	and	r3, r0, #1
   1625c:	b	162b8 <__assert_fail@plt+0x50f4>
   16260:	mov	r1, #0
   16264:	lsl	r2, r7, #9
   16268:	lsl	r0, r6, #9
   1626c:	lsr	r3, r7, #23
   16270:	cmp	r1, r7, lsr #23
   16274:	orr	r2, r2, r6, lsr #23
   16278:	mvnne	r0, #0
   1627c:	movwne	r3, #1
   16280:	cmp	r1, r7, lsr #23
   16284:	mvnne	r2, #0
   16288:	mov	r6, r0
   1628c:	mov	r7, r2
   16290:	b	162b8 <__assert_fail@plt+0x50f4>
   16294:	lsl	r1, r7, #1
   16298:	lsl	r0, r6, #1
   1629c:	cmp	r7, #0
   162a0:	lsr	r3, r7, #31
   162a4:	orr	r1, r1, r6, lsr #31
   162a8:	mvnlt	r0, #0
   162ac:	mvnlt	r1, #0
   162b0:	mov	r6, r0
   162b4:	mov	r7, r1
   162b8:	ldr	r1, [sp, #32]
   162bc:	ldr	r2, [sp, #28]
   162c0:	orr	r8, r3, r8
   162c4:	add	r0, r1, r2
   162c8:	str	r0, [r9]
   162cc:	ldrb	r0, [r1, r2]
   162d0:	cmp	r0, #0
   162d4:	orrne	r8, r8, #2
   162d8:	ldr	r0, [sp, #36]	; 0x24
   162dc:	strd	r6, [r0]
   162e0:	mov	r0, r8
   162e4:	sub	sp, fp, #28
   162e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162ec:	movw	r0, #31753	; 0x7c09
   162f0:	movw	r1, #31791	; 0x7c2f
   162f4:	movw	r3, #31807	; 0x7c3f
   162f8:	mov	r2, #85	; 0x55
   162fc:	movt	r0, #1
   16300:	movt	r1, #1
   16304:	movt	r3, #1
   16308:	bl	111c4 <__assert_fail@plt>
   1630c:	clz	r2, r1
   16310:	clz	r3, r0
   16314:	lsr	r2, r2, #5
   16318:	lsr	r3, r3, #5
   1631c:	orrs	r2, r3, r2
   16320:	movwne	r1, #1
   16324:	movwne	r0, #1
   16328:	cmp	r1, #0
   1632c:	beq	1635c <__assert_fail@plt+0x5198>
   16330:	mvn	r2, #-2147483648	; 0x80000000
   16334:	udiv	r2, r2, r1
   16338:	cmp	r2, r0
   1633c:	bcs	1635c <__assert_fail@plt+0x5198>
   16340:	push	{fp, lr}
   16344:	mov	fp, sp
   16348:	bl	110b0 <__errno_location@plt>
   1634c:	mov	r1, #12
   16350:	str	r1, [r0]
   16354:	mov	r0, #0
   16358:	pop	{fp, pc}
   1635c:	b	10f24 <calloc@plt>
   16360:	cmp	r0, #0
   16364:	movweq	r0, #1
   16368:	cmn	r0, #1
   1636c:	ble	16374 <__assert_fail@plt+0x51b0>
   16370:	b	11044 <malloc@plt>
   16374:	push	{fp, lr}
   16378:	mov	fp, sp
   1637c:	bl	110b0 <__errno_location@plt>
   16380:	mov	r1, #12
   16384:	str	r1, [r0]
   16388:	mov	r0, #0
   1638c:	pop	{fp, pc}
   16390:	push	{fp, lr}
   16394:	mov	fp, sp
   16398:	cmp	r0, #0
   1639c:	beq	163b8 <__assert_fail@plt+0x51f4>
   163a0:	cmp	r1, #0
   163a4:	beq	163c4 <__assert_fail@plt+0x5200>
   163a8:	cmn	r1, #1
   163ac:	ble	163d0 <__assert_fail@plt+0x520c>
   163b0:	pop	{fp, lr}
   163b4:	b	10fcc <realloc@plt>
   163b8:	mov	r0, r1
   163bc:	pop	{fp, lr}
   163c0:	b	16360 <__assert_fail@plt+0x519c>
   163c4:	bl	120a0 <__assert_fail@plt+0xedc>
   163c8:	mov	r0, #0
   163cc:	pop	{fp, pc}
   163d0:	bl	110b0 <__errno_location@plt>
   163d4:	mov	r1, #12
   163d8:	str	r1, [r0]
   163dc:	mov	r0, #0
   163e0:	pop	{fp, pc}
   163e4:	mov	r0, #1
   163e8:	b	11770 <__assert_fail@plt+0x5ac>
   163ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163f0:	add	fp, sp, #28
   163f4:	sub	sp, sp, #12
   163f8:	mov	r4, r3
   163fc:	mov	r6, r2
   16400:	mov	r5, r1
   16404:	mov	sl, r0
   16408:	bl	11098 <strlen@plt>
   1640c:	ldr	r8, [r5]
   16410:	cmp	r8, #0
   16414:	beq	164d0 <__assert_fail@plt+0x530c>
   16418:	mov	r7, r0
   1641c:	mov	r0, #0
   16420:	add	r9, r5, #4
   16424:	mov	r5, #0
   16428:	str	r6, [sp, #4]
   1642c:	str	r0, [sp]
   16430:	mvn	r0, #0
   16434:	str	r0, [sp, #8]
   16438:	mov	r0, r8
   1643c:	mov	r1, sl
   16440:	mov	r2, r7
   16444:	bl	111a0 <strncmp@plt>
   16448:	cmp	r0, #0
   1644c:	bne	164a4 <__assert_fail@plt+0x52e0>
   16450:	mov	r0, r8
   16454:	bl	11098 <strlen@plt>
   16458:	cmp	r0, r7
   1645c:	beq	164d4 <__assert_fail@plt+0x5310>
   16460:	ldr	r0, [sp, #8]
   16464:	cmn	r0, #1
   16468:	beq	164a0 <__assert_fail@plt+0x52dc>
   1646c:	ldr	r0, [sp, #4]
   16470:	cmp	r0, #0
   16474:	beq	16494 <__assert_fail@plt+0x52d0>
   16478:	ldr	r1, [sp, #8]
   1647c:	mov	r2, r4
   16480:	mla	r0, r1, r4, r0
   16484:	mov	r1, r6
   16488:	bl	10fb4 <memcmp@plt>
   1648c:	cmp	r0, #0
   16490:	beq	164a4 <__assert_fail@plt+0x52e0>
   16494:	mov	r0, #1
   16498:	str	r0, [sp]
   1649c:	b	164a4 <__assert_fail@plt+0x52e0>
   164a0:	str	r5, [sp, #8]
   164a4:	ldr	r8, [r9, r5, lsl #2]
   164a8:	add	r6, r6, r4
   164ac:	add	r5, r5, #1
   164b0:	cmp	r8, #0
   164b4:	bne	16438 <__assert_fail@plt+0x5274>
   164b8:	ldr	r0, [sp]
   164bc:	tst	r0, #1
   164c0:	ldr	r0, [sp, #8]
   164c4:	mvnne	r0, #1
   164c8:	sub	sp, fp, #28
   164cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164d0:	mvn	r5, #0
   164d4:	mov	r0, r5
   164d8:	sub	sp, fp, #28
   164dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e0:	push	{r4, r5, r6, r7, fp, lr}
   164e4:	add	fp, sp, #16
   164e8:	mov	r5, r0
   164ec:	ldr	r0, [r1]
   164f0:	mvn	r4, #0
   164f4:	cmp	r0, #0
   164f8:	beq	16528 <__assert_fail@plt+0x5364>
   164fc:	add	r7, r1, #4
   16500:	mov	r6, #0
   16504:	mov	r1, r5
   16508:	bl	10f48 <strcmp@plt>
   1650c:	cmp	r0, #0
   16510:	moveq	r0, r6
   16514:	popeq	{r4, r5, r6, r7, fp, pc}
   16518:	ldr	r0, [r7, r6, lsl #2]
   1651c:	add	r6, r6, #1
   16520:	cmp	r0, #0
   16524:	bne	16504 <__assert_fail@plt+0x5340>
   16528:	mov	r0, r4
   1652c:	pop	{r4, r5, r6, r7, fp, pc}
   16530:	push	{r4, r5, r6, sl, fp, lr}
   16534:	add	fp, sp, #16
   16538:	sub	sp, sp, #8
   1653c:	mov	r4, r1
   16540:	movw	r1, #31913	; 0x7ca9
   16544:	mov	r5, r0
   16548:	movw	r0, #31886	; 0x7c8e
   1654c:	cmn	r2, #1
   16550:	mov	r2, #5
   16554:	movt	r0, #1
   16558:	movt	r1, #1
   1655c:	moveq	r1, r0
   16560:	mov	r0, #0
   16564:	bl	10fc0 <dcgettext@plt>
   16568:	mov	r6, r0
   1656c:	mov	r0, #0
   16570:	mov	r1, #8
   16574:	mov	r2, r4
   16578:	bl	142fc <__assert_fail@plt+0x3138>
   1657c:	mov	r4, r0
   16580:	mov	r0, #1
   16584:	mov	r1, r5
   16588:	bl	148bc <__assert_fail@plt+0x36f8>
   1658c:	str	r0, [sp]
   16590:	mov	r0, #0
   16594:	mov	r1, #0
   16598:	mov	r2, r6
   1659c:	mov	r3, r4
   165a0:	bl	1102c <error@plt>
   165a4:	sub	sp, fp, #16
   165a8:	pop	{r4, r5, r6, sl, fp, pc}
   165ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165b0:	add	fp, sp, #28
   165b4:	sub	sp, sp, #4
   165b8:	mov	r5, r1
   165bc:	movw	r1, #31942	; 0x7cc6
   165c0:	mov	sl, r2
   165c4:	mov	r7, r0
   165c8:	mov	r0, #0
   165cc:	mov	r2, #5
   165d0:	mov	r8, #0
   165d4:	movt	r1, #1
   165d8:	bl	10fc0 <dcgettext@plt>
   165dc:	movw	r4, #33120	; 0x8160
   165e0:	movt	r4, #2
   165e4:	ldr	r1, [r4]
   165e8:	bl	10f30 <fputs_unlocked@plt>
   165ec:	ldr	r6, [r7]
   165f0:	cmp	r6, #0
   165f4:	beq	16694 <__assert_fail@plt+0x54d0>
   165f8:	add	r9, r7, #4
   165fc:	mov	r7, #0
   16600:	str	sl, [sp]
   16604:	cmp	r8, #0
   16608:	beq	16624 <__assert_fail@plt+0x5460>
   1660c:	mov	r0, r7
   16610:	mov	r1, r5
   16614:	mov	r2, sl
   16618:	bl	10fb4 <memcmp@plt>
   1661c:	cmp	r0, #0
   16620:	beq	16650 <__assert_fail@plt+0x548c>
   16624:	ldr	r7, [r4]
   16628:	mov	r0, r6
   1662c:	bl	148cc <__assert_fail@plt+0x3708>
   16630:	movw	r2, #31963	; 0x7cdb
   16634:	mov	r3, r0
   16638:	mov	r0, r7
   1663c:	mov	r1, #1
   16640:	movt	r2, #1
   16644:	bl	11104 <__fprintf_chk@plt>
   16648:	mov	r7, r5
   1664c:	b	16680 <__assert_fail@plt+0x54bc>
   16650:	mov	sl, r9
   16654:	ldr	r9, [r4]
   16658:	mov	r0, r6
   1665c:	bl	148cc <__assert_fail@plt+0x3708>
   16660:	mov	r3, r0
   16664:	mov	r0, r9
   16668:	mov	r9, sl
   1666c:	ldr	sl, [sp]
   16670:	movw	r2, #31971	; 0x7ce3
   16674:	mov	r1, #1
   16678:	movt	r2, #1
   1667c:	bl	11104 <__fprintf_chk@plt>
   16680:	ldr	r6, [r9, -r8, lsl #2]
   16684:	add	r5, r5, sl
   16688:	sub	r8, r8, #1
   1668c:	cmp	r6, #0
   16690:	bne	16604 <__assert_fail@plt+0x5440>
   16694:	ldr	r0, [r4]
   16698:	ldr	r1, [r0, #20]
   1669c:	ldr	r2, [r0, #24]
   166a0:	cmp	r1, r2
   166a4:	addcc	r2, r1, #1
   166a8:	strcc	r2, [r0, #20]
   166ac:	movcc	r0, #10
   166b0:	strbcc	r0, [r1]
   166b4:	subcc	sp, fp, #28
   166b8:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166bc:	mov	r1, #10
   166c0:	sub	sp, fp, #28
   166c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c8:	b	11134 <__overflow@plt>
   166cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166d0:	add	fp, sp, #28
   166d4:	sub	sp, sp, #20
   166d8:	mov	r9, r0
   166dc:	ldr	r0, [fp, #16]
   166e0:	mov	r8, r3
   166e4:	mov	sl, r2
   166e8:	mov	r7, r1
   166ec:	cmp	r0, #0
   166f0:	beq	167c8 <__assert_fail@plt+0x5604>
   166f4:	mov	r0, r7
   166f8:	str	r9, [sp, #8]
   166fc:	str	r8, [sp, #16]
   16700:	bl	11098 <strlen@plt>
   16704:	ldr	r9, [sl]
   16708:	cmp	r9, #0
   1670c:	beq	16808 <__assert_fail@plt+0x5644>
   16710:	str	sl, [sp, #4]
   16714:	add	r8, sl, #4
   16718:	ldr	sl, [sp, #16]
   1671c:	mov	r4, r0
   16720:	mov	r0, #0
   16724:	mvn	r6, #0
   16728:	mov	r5, #0
   1672c:	str	r0, [sp, #12]
   16730:	mov	r0, r9
   16734:	mov	r1, r7
   16738:	mov	r2, r4
   1673c:	bl	111a0 <strncmp@plt>
   16740:	cmp	r0, #0
   16744:	bne	16794 <__assert_fail@plt+0x55d0>
   16748:	mov	r0, r9
   1674c:	bl	11098 <strlen@plt>
   16750:	cmp	r0, r4
   16754:	beq	16814 <__assert_fail@plt+0x5650>
   16758:	cmn	r6, #1
   1675c:	beq	16790 <__assert_fail@plt+0x55cc>
   16760:	ldr	r0, [sp, #16]
   16764:	cmp	r0, #0
   16768:	beq	16784 <__assert_fail@plt+0x55c0>
   1676c:	ldr	r2, [fp, #8]
   16770:	mov	r1, sl
   16774:	mla	r0, r6, r2, r0
   16778:	bl	10fb4 <memcmp@plt>
   1677c:	cmp	r0, #0
   16780:	beq	16794 <__assert_fail@plt+0x55d0>
   16784:	mov	r0, #1
   16788:	str	r0, [sp, #12]
   1678c:	b	16794 <__assert_fail@plt+0x55d0>
   16790:	mov	r6, r5
   16794:	ldr	r9, [r8, r5, lsl #2]
   16798:	ldr	r0, [fp, #8]
   1679c:	add	r5, r5, #1
   167a0:	add	sl, sl, r0
   167a4:	cmp	r9, #0
   167a8:	bne	16730 <__assert_fail@plt+0x556c>
   167ac:	ldr	r0, [sp, #12]
   167b0:	ldr	r8, [sp, #16]
   167b4:	ldr	sl, [sp, #4]
   167b8:	ldr	r9, [sp, #8]
   167bc:	tst	r0, #1
   167c0:	beq	16824 <__assert_fail@plt+0x5660>
   167c4:	b	16830 <__assert_fail@plt+0x566c>
   167c8:	ldr	r0, [sl]
   167cc:	movw	r4, #31886	; 0x7c8e
   167d0:	movt	r4, #1
   167d4:	cmp	r0, #0
   167d8:	beq	16844 <__assert_fail@plt+0x5680>
   167dc:	add	r5, sl, #4
   167e0:	mov	r6, #0
   167e4:	mov	r1, r7
   167e8:	bl	10f48 <strcmp@plt>
   167ec:	cmp	r0, #0
   167f0:	beq	16824 <__assert_fail@plt+0x5660>
   167f4:	ldr	r0, [r5, r6, lsl #2]
   167f8:	add	r6, r6, #1
   167fc:	cmp	r0, #0
   16800:	bne	167e4 <__assert_fail@plt+0x5620>
   16804:	b	16844 <__assert_fail@plt+0x5680>
   16808:	ldr	r8, [sp, #16]
   1680c:	ldr	r9, [sp, #8]
   16810:	b	1683c <__assert_fail@plt+0x5678>
   16814:	ldr	r8, [sp, #16]
   16818:	ldr	sl, [sp, #4]
   1681c:	ldr	r9, [sp, #8]
   16820:	mov	r6, r5
   16824:	cmn	r6, #1
   16828:	bgt	168ac <__assert_fail@plt+0x56e8>
   1682c:	beq	1683c <__assert_fail@plt+0x5678>
   16830:	movw	r4, #31913	; 0x7ca9
   16834:	movt	r4, #1
   16838:	b	16844 <__assert_fail@plt+0x5680>
   1683c:	movw	r4, #31886	; 0x7c8e
   16840:	movt	r4, #1
   16844:	ldr	r6, [fp, #12]
   16848:	mov	r0, #0
   1684c:	mov	r1, r4
   16850:	mov	r2, #5
   16854:	bl	10fc0 <dcgettext@plt>
   16858:	mov	r4, r0
   1685c:	mov	r0, #0
   16860:	mov	r1, #8
   16864:	mov	r2, r7
   16868:	bl	142fc <__assert_fail@plt+0x3138>
   1686c:	mov	r5, r0
   16870:	mov	r0, #1
   16874:	mov	r1, r9
   16878:	bl	148bc <__assert_fail@plt+0x36f8>
   1687c:	str	r0, [sp]
   16880:	mov	r0, #0
   16884:	mov	r1, #0
   16888:	mov	r2, r4
   1688c:	mov	r3, r5
   16890:	bl	1102c <error@plt>
   16894:	ldr	r2, [fp, #8]
   16898:	mov	r0, sl
   1689c:	mov	r1, r8
   168a0:	bl	165ac <__assert_fail@plt+0x53e8>
   168a4:	blx	r6
   168a8:	mvn	r6, #0
   168ac:	mov	r0, r6
   168b0:	sub	sp, fp, #28
   168b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   168bc:	add	fp, sp, #24
   168c0:	ldr	r6, [r1]
   168c4:	cmp	r6, #0
   168c8:	beq	1692c <__assert_fail@plt+0x5768>
   168cc:	mov	r8, r1
   168d0:	mov	r7, r2
   168d4:	mov	r1, r2
   168d8:	mov	r2, r3
   168dc:	mov	r4, r3
   168e0:	mov	r9, r0
   168e4:	bl	10fb4 <memcmp@plt>
   168e8:	cmp	r0, #0
   168ec:	beq	16924 <__assert_fail@plt+0x5760>
   168f0:	add	r7, r7, r4
   168f4:	add	r5, r8, #4
   168f8:	ldr	r6, [r5]
   168fc:	cmp	r6, #0
   16900:	beq	1692c <__assert_fail@plt+0x5768>
   16904:	mov	r0, r9
   16908:	mov	r1, r7
   1690c:	mov	r2, r4
   16910:	bl	10fb4 <memcmp@plt>
   16914:	add	r7, r7, r4
   16918:	add	r5, r5, #4
   1691c:	cmp	r0, #0
   16920:	bne	168f8 <__assert_fail@plt+0x5734>
   16924:	mov	r0, r6
   16928:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1692c:	mov	r6, #0
   16930:	mov	r0, r6
   16934:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16938:	push	{r4, r5, r6, sl, fp, lr}
   1693c:	add	fp, sp, #16
   16940:	mov	r4, r0
   16944:	bl	11014 <__fpending@plt>
   16948:	ldr	r6, [r4]
   1694c:	mov	r5, r0
   16950:	mov	r0, r4
   16954:	bl	11ef4 <__assert_fail@plt+0xd30>
   16958:	tst	r6, #32
   1695c:	bne	16994 <__assert_fail@plt+0x57d0>
   16960:	cmp	r0, #0
   16964:	mov	r4, r0
   16968:	mvnne	r4, #0
   1696c:	cmp	r5, #0
   16970:	bne	169a0 <__assert_fail@plt+0x57dc>
   16974:	cmp	r0, #0
   16978:	beq	169a0 <__assert_fail@plt+0x57dc>
   1697c:	bl	110b0 <__errno_location@plt>
   16980:	ldr	r0, [r0]
   16984:	subs	r4, r0, #9
   16988:	mvnne	r4, #0
   1698c:	mov	r0, r4
   16990:	pop	{r4, r5, r6, sl, fp, pc}
   16994:	mvn	r4, #0
   16998:	cmp	r0, #0
   1699c:	beq	169a8 <__assert_fail@plt+0x57e4>
   169a0:	mov	r0, r4
   169a4:	pop	{r4, r5, r6, sl, fp, pc}
   169a8:	bl	110b0 <__errno_location@plt>
   169ac:	mov	r1, #0
   169b0:	str	r1, [r0]
   169b4:	mov	r0, r4
   169b8:	pop	{r4, r5, r6, sl, fp, pc}
   169bc:	sub	sp, sp, #8
   169c0:	push	{r4, r5, r6, r7, fp, lr}
   169c4:	add	fp, sp, #16
   169c8:	sub	sp, sp, #8
   169cc:	mov	r5, r0
   169d0:	add	r0, fp, #8
   169d4:	cmp	r1, #11
   169d8:	str	r3, [fp, #12]
   169dc:	str	r2, [fp, #8]
   169e0:	str	r0, [sp, #4]
   169e4:	bhi	16a20 <__assert_fail@plt+0x585c>
   169e8:	mov	r0, #1
   169ec:	movw	r2, #1300	; 0x514
   169f0:	tst	r2, r0, lsl r1
   169f4:	bne	16ae0 <__assert_fail@plt+0x591c>
   169f8:	movw	r2, #2570	; 0xa0a
   169fc:	tst	r2, r0, lsl r1
   16a00:	bne	16a48 <__assert_fail@plt+0x5884>
   16a04:	cmp	r1, #0
   16a08:	bne	16a20 <__assert_fail@plt+0x585c>
   16a0c:	ldr	r0, [sp, #4]
   16a10:	add	r1, r0, #4
   16a14:	str	r1, [sp, #4]
   16a18:	mov	r1, #0
   16a1c:	b	16aec <__assert_fail@plt+0x5928>
   16a20:	sub	r0, r1, #1024	; 0x400
   16a24:	cmp	r0, #10
   16a28:	bhi	16ae0 <__assert_fail@plt+0x591c>
   16a2c:	mov	r2, #1
   16a30:	movw	r3, #645	; 0x285
   16a34:	tst	r3, r2, lsl r0
   16a38:	bne	16ae0 <__assert_fail@plt+0x591c>
   16a3c:	movw	r3, #1282	; 0x502
   16a40:	tst	r3, r2, lsl r0
   16a44:	beq	16a54 <__assert_fail@plt+0x5890>
   16a48:	mov	r0, r5
   16a4c:	bl	11128 <fcntl64@plt>
   16a50:	b	16af8 <__assert_fail@plt+0x5934>
   16a54:	cmp	r0, #6
   16a58:	bne	16ae0 <__assert_fail@plt+0x591c>
   16a5c:	ldr	r0, [sp, #4]
   16a60:	movw	r7, #33464	; 0x82b8
   16a64:	movt	r7, #2
   16a68:	add	r1, r0, #4
   16a6c:	str	r1, [sp, #4]
   16a70:	ldr	r6, [r0]
   16a74:	ldr	r0, [r7]
   16a78:	cmp	r0, #0
   16a7c:	blt	16b1c <__assert_fail@plt+0x5958>
   16a80:	mov	r0, r5
   16a84:	movw	r1, #1030	; 0x406
   16a88:	mov	r2, r6
   16a8c:	bl	11128 <fcntl64@plt>
   16a90:	mov	r4, r0
   16a94:	cmn	r0, #1
   16a98:	bgt	16b10 <__assert_fail@plt+0x594c>
   16a9c:	bl	110b0 <__errno_location@plt>
   16aa0:	ldr	r0, [r0]
   16aa4:	cmp	r0, #22
   16aa8:	bne	16b10 <__assert_fail@plt+0x594c>
   16aac:	mov	r0, r5
   16ab0:	mov	r1, #0
   16ab4:	mov	r2, r6
   16ab8:	bl	11128 <fcntl64@plt>
   16abc:	mov	r4, r0
   16ac0:	cmp	r0, #0
   16ac4:	blt	16afc <__assert_fail@plt+0x5938>
   16ac8:	mvn	r0, #0
   16acc:	str	r0, [r7]
   16ad0:	mov	r0, #1
   16ad4:	cmp	r0, #0
   16ad8:	bne	16b48 <__assert_fail@plt+0x5984>
   16adc:	b	16afc <__assert_fail@plt+0x5938>
   16ae0:	ldr	r0, [sp, #4]
   16ae4:	add	r2, r0, #4
   16ae8:	str	r2, [sp, #4]
   16aec:	ldr	r2, [r0]
   16af0:	mov	r0, r5
   16af4:	bl	11128 <fcntl64@plt>
   16af8:	mov	r4, r0
   16afc:	mov	r0, r4
   16b00:	sub	sp, fp, #16
   16b04:	pop	{r4, r5, r6, r7, fp, lr}
   16b08:	add	sp, sp, #8
   16b0c:	bx	lr
   16b10:	mov	r0, #1
   16b14:	str	r0, [r7]
   16b18:	b	16afc <__assert_fail@plt+0x5938>
   16b1c:	mov	r0, r5
   16b20:	mov	r1, #0
   16b24:	mov	r2, r6
   16b28:	bl	11128 <fcntl64@plt>
   16b2c:	mov	r4, r0
   16b30:	ldr	r0, [r7]
   16b34:	add	r0, r0, #1
   16b38:	clz	r0, r0
   16b3c:	lsr	r0, r0, #5
   16b40:	cmp	r0, #0
   16b44:	beq	16afc <__assert_fail@plt+0x5938>
   16b48:	cmp	r4, #0
   16b4c:	blt	16afc <__assert_fail@plt+0x5938>
   16b50:	mov	r0, r4
   16b54:	mov	r1, #1
   16b58:	bl	11128 <fcntl64@plt>
   16b5c:	cmp	r0, #0
   16b60:	blt	16b7c <__assert_fail@plt+0x59b8>
   16b64:	orr	r2, r0, #1
   16b68:	mov	r0, r4
   16b6c:	mov	r1, #2
   16b70:	bl	11128 <fcntl64@plt>
   16b74:	cmn	r0, #1
   16b78:	bne	16afc <__assert_fail@plt+0x5938>
   16b7c:	bl	110b0 <__errno_location@plt>
   16b80:	ldr	r6, [r0]
   16b84:	mov	r5, r0
   16b88:	mov	r0, r4
   16b8c:	bl	111b8 <close@plt>
   16b90:	str	r6, [r5]
   16b94:	mvn	r4, #0
   16b98:	b	16afc <__assert_fail@plt+0x5938>
   16b9c:	push	{fp, lr}
   16ba0:	mov	fp, sp
   16ba4:	mov	r0, #14
   16ba8:	bl	11158 <nl_langinfo@plt>
   16bac:	movw	r1, #30387	; 0x76b3
   16bb0:	cmp	r0, #0
   16bb4:	movt	r1, #1
   16bb8:	movne	r1, r0
   16bbc:	movw	r0, #31976	; 0x7ce8
   16bc0:	ldrb	r2, [r1]
   16bc4:	movt	r0, #1
   16bc8:	cmp	r2, #0
   16bcc:	movne	r0, r1
   16bd0:	pop	{fp, pc}
   16bd4:	push	{r4, r5, r6, r7, fp, lr}
   16bd8:	add	fp, sp, #16
   16bdc:	sub	sp, sp, #8
   16be0:	add	r5, sp, #4
   16be4:	cmp	r0, #0
   16be8:	mov	r7, r2
   16bec:	mov	r4, r1
   16bf0:	movne	r5, r0
   16bf4:	mov	r0, r5
   16bf8:	bl	11020 <mbrtowc@plt>
   16bfc:	mov	r6, r0
   16c00:	cmp	r7, #0
   16c04:	beq	16c28 <__assert_fail@plt+0x5a64>
   16c08:	cmn	r6, #2
   16c0c:	bcc	16c28 <__assert_fail@plt+0x5a64>
   16c10:	mov	r0, #0
   16c14:	bl	16c70 <__assert_fail@plt+0x5aac>
   16c18:	cmp	r0, #0
   16c1c:	ldrbeq	r0, [r4]
   16c20:	moveq	r6, #1
   16c24:	streq	r0, [r5]
   16c28:	mov	r0, r6
   16c2c:	sub	sp, fp, #16
   16c30:	pop	{r4, r5, r6, r7, fp, pc}
   16c34:	cmp	r2, #0
   16c38:	beq	16c68 <__assert_fail@plt+0x5aa4>
   16c3c:	mvn	r3, #0
   16c40:	udiv	r3, r3, r2
   16c44:	cmp	r3, r1
   16c48:	bcs	16c68 <__assert_fail@plt+0x5aa4>
   16c4c:	push	{fp, lr}
   16c50:	mov	fp, sp
   16c54:	bl	110b0 <__errno_location@plt>
   16c58:	mov	r1, #12
   16c5c:	str	r1, [r0]
   16c60:	mov	r0, #0
   16c64:	pop	{fp, pc}
   16c68:	mul	r1, r2, r1
   16c6c:	b	16390 <__assert_fail@plt+0x51cc>
   16c70:	push	{r4, sl, fp, lr}
   16c74:	add	fp, sp, #8
   16c78:	sub	sp, sp, #264	; 0x108
   16c7c:	add	r1, sp, #7
   16c80:	movw	r2, #257	; 0x101
   16c84:	bl	16cd4 <__assert_fail@plt+0x5b10>
   16c88:	mov	r4, #0
   16c8c:	cmp	r0, #0
   16c90:	bne	16cc8 <__assert_fail@plt+0x5b04>
   16c94:	movw	r1, #31982	; 0x7cee
   16c98:	add	r0, sp, #7
   16c9c:	movt	r1, #1
   16ca0:	bl	10f48 <strcmp@plt>
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cc8 <__assert_fail@plt+0x5b04>
   16cac:	movw	r1, #31984	; 0x7cf0
   16cb0:	add	r0, sp, #7
   16cb4:	movt	r1, #1
   16cb8:	bl	10f48 <strcmp@plt>
   16cbc:	mov	r4, r0
   16cc0:	cmp	r0, #0
   16cc4:	movwne	r4, #1
   16cc8:	mov	r0, r4
   16ccc:	sub	sp, fp, #8
   16cd0:	pop	{r4, sl, fp, pc}
   16cd4:	push	{r4, r5, r6, r7, fp, lr}
   16cd8:	add	fp, sp, #16
   16cdc:	mov	r4, r1
   16ce0:	mov	r1, #0
   16ce4:	mov	r6, r2
   16ce8:	bl	11140 <setlocale@plt>
   16cec:	cmp	r0, #0
   16cf0:	beq	16d20 <__assert_fail@plt+0x5b5c>
   16cf4:	mov	r7, r0
   16cf8:	bl	11098 <strlen@plt>
   16cfc:	cmp	r0, r6
   16d00:	bcs	16d40 <__assert_fail@plt+0x5b7c>
   16d04:	add	r2, r0, #1
   16d08:	mov	r0, r4
   16d0c:	mov	r1, r7
   16d10:	bl	10f90 <memcpy@plt>
   16d14:	mov	r5, #0
   16d18:	mov	r0, r5
   16d1c:	pop	{r4, r5, r6, r7, fp, pc}
   16d20:	cmp	r6, #0
   16d24:	mov	r5, #22
   16d28:	movne	r0, #0
   16d2c:	strbne	r0, [r4]
   16d30:	movne	r0, r5
   16d34:	popne	{r4, r5, r6, r7, fp, pc}
   16d38:	mov	r0, r5
   16d3c:	pop	{r4, r5, r6, r7, fp, pc}
   16d40:	mov	r5, #34	; 0x22
   16d44:	cmp	r6, #0
   16d48:	beq	16d68 <__assert_fail@plt+0x5ba4>
   16d4c:	sub	r6, r6, #1
   16d50:	mov	r0, r4
   16d54:	mov	r1, r7
   16d58:	mov	r2, r6
   16d5c:	bl	10f90 <memcpy@plt>
   16d60:	mov	r0, #0
   16d64:	strb	r0, [r4, r6]
   16d68:	mov	r0, r5
   16d6c:	pop	{r4, r5, r6, r7, fp, pc}
   16d70:	mov	r1, #0
   16d74:	b	11140 <setlocale@plt>
   16d78:	eor	r1, r1, #-2147483648	; 0x80000000
   16d7c:	b	16d84 <__assert_fail@plt+0x5bc0>
   16d80:	eor	r3, r3, #-2147483648	; 0x80000000
   16d84:	push	{r4, r5, lr}
   16d88:	lsl	r4, r1, #1
   16d8c:	lsl	r5, r3, #1
   16d90:	teq	r4, r5
   16d94:	teqeq	r0, r2
   16d98:	orrsne	ip, r4, r0
   16d9c:	orrsne	ip, r5, r2
   16da0:	mvnsne	ip, r4, asr #21
   16da4:	mvnsne	ip, r5, asr #21
   16da8:	beq	16f94 <__assert_fail@plt+0x5dd0>
   16dac:	lsr	r4, r4, #21
   16db0:	rsbs	r5, r4, r5, lsr #21
   16db4:	rsblt	r5, r5, #0
   16db8:	ble	16dd8 <__assert_fail@plt+0x5c14>
   16dbc:	add	r4, r4, r5
   16dc0:	eor	r2, r0, r2
   16dc4:	eor	r3, r1, r3
   16dc8:	eor	r0, r2, r0
   16dcc:	eor	r1, r3, r1
   16dd0:	eor	r2, r0, r2
   16dd4:	eor	r3, r1, r3
   16dd8:	cmp	r5, #54	; 0x36
   16ddc:	pophi	{r4, r5, pc}
   16de0:	tst	r1, #-2147483648	; 0x80000000
   16de4:	lsl	r1, r1, #12
   16de8:	mov	ip, #1048576	; 0x100000
   16dec:	orr	r1, ip, r1, lsr #12
   16df0:	beq	16dfc <__assert_fail@plt+0x5c38>
   16df4:	rsbs	r0, r0, #0
   16df8:	rsc	r1, r1, #0
   16dfc:	tst	r3, #-2147483648	; 0x80000000
   16e00:	lsl	r3, r3, #12
   16e04:	orr	r3, ip, r3, lsr #12
   16e08:	beq	16e14 <__assert_fail@plt+0x5c50>
   16e0c:	rsbs	r2, r2, #0
   16e10:	rsc	r3, r3, #0
   16e14:	teq	r4, r5
   16e18:	beq	16f7c <__assert_fail@plt+0x5db8>
   16e1c:	sub	r4, r4, #1
   16e20:	rsbs	lr, r5, #32
   16e24:	blt	16e40 <__assert_fail@plt+0x5c7c>
   16e28:	lsl	ip, r2, lr
   16e2c:	adds	r0, r0, r2, lsr r5
   16e30:	adc	r1, r1, #0
   16e34:	adds	r0, r0, r3, lsl lr
   16e38:	adcs	r1, r1, r3, asr r5
   16e3c:	b	16e5c <__assert_fail@plt+0x5c98>
   16e40:	sub	r5, r5, #32
   16e44:	add	lr, lr, #32
   16e48:	cmp	r2, #1
   16e4c:	lsl	ip, r3, lr
   16e50:	orrcs	ip, ip, #2
   16e54:	adds	r0, r0, r3, asr r5
   16e58:	adcs	r1, r1, r3, asr #31
   16e5c:	and	r5, r1, #-2147483648	; 0x80000000
   16e60:	bpl	16e70 <__assert_fail@plt+0x5cac>
   16e64:	rsbs	ip, ip, #0
   16e68:	rscs	r0, r0, #0
   16e6c:	rsc	r1, r1, #0
   16e70:	cmp	r1, #1048576	; 0x100000
   16e74:	bcc	16eb4 <__assert_fail@plt+0x5cf0>
   16e78:	cmp	r1, #2097152	; 0x200000
   16e7c:	bcc	16e9c <__assert_fail@plt+0x5cd8>
   16e80:	lsrs	r1, r1, #1
   16e84:	rrxs	r0, r0
   16e88:	rrx	ip, ip
   16e8c:	add	r4, r4, #1
   16e90:	lsl	r2, r4, #21
   16e94:	cmn	r2, #4194304	; 0x400000
   16e98:	bcs	16ff4 <__assert_fail@plt+0x5e30>
   16e9c:	cmp	ip, #-2147483648	; 0x80000000
   16ea0:	lsrseq	ip, r0, #1
   16ea4:	adcs	r0, r0, #0
   16ea8:	adc	r1, r1, r4, lsl #20
   16eac:	orr	r1, r1, r5
   16eb0:	pop	{r4, r5, pc}
   16eb4:	lsls	ip, ip, #1
   16eb8:	adcs	r0, r0, r0
   16ebc:	adc	r1, r1, r1
   16ec0:	tst	r1, #1048576	; 0x100000
   16ec4:	sub	r4, r4, #1
   16ec8:	bne	16e9c <__assert_fail@plt+0x5cd8>
   16ecc:	teq	r1, #0
   16ed0:	moveq	r1, r0
   16ed4:	moveq	r0, #0
   16ed8:	clz	r3, r1
   16edc:	addeq	r3, r3, #32
   16ee0:	sub	r3, r3, #11
   16ee4:	subs	r2, r3, #32
   16ee8:	bge	16f0c <__assert_fail@plt+0x5d48>
   16eec:	adds	r2, r2, #12
   16ef0:	ble	16f08 <__assert_fail@plt+0x5d44>
   16ef4:	add	ip, r2, #20
   16ef8:	rsb	r2, r2, #12
   16efc:	lsl	r0, r1, ip
   16f00:	lsr	r1, r1, r2
   16f04:	b	16f1c <__assert_fail@plt+0x5d58>
   16f08:	add	r2, r2, #20
   16f0c:	rsble	ip, r2, #32
   16f10:	lsl	r1, r1, r2
   16f14:	orrle	r1, r1, r0, lsr ip
   16f18:	lslle	r0, r0, r2
   16f1c:	subs	r4, r4, r3
   16f20:	addge	r1, r1, r4, lsl #20
   16f24:	orrge	r1, r1, r5
   16f28:	popge	{r4, r5, pc}
   16f2c:	mvn	r4, r4
   16f30:	subs	r4, r4, #31
   16f34:	bge	16f70 <__assert_fail@plt+0x5dac>
   16f38:	adds	r4, r4, #12
   16f3c:	bgt	16f58 <__assert_fail@plt+0x5d94>
   16f40:	add	r4, r4, #20
   16f44:	rsb	r2, r4, #32
   16f48:	lsr	r0, r0, r4
   16f4c:	orr	r0, r0, r1, lsl r2
   16f50:	orr	r1, r5, r1, lsr r4
   16f54:	pop	{r4, r5, pc}
   16f58:	rsb	r4, r4, #12
   16f5c:	rsb	r2, r4, #32
   16f60:	lsr	r0, r0, r2
   16f64:	orr	r0, r0, r1, lsl r4
   16f68:	mov	r1, r5
   16f6c:	pop	{r4, r5, pc}
   16f70:	lsr	r0, r1, r4
   16f74:	mov	r1, r5
   16f78:	pop	{r4, r5, pc}
   16f7c:	teq	r4, #0
   16f80:	eor	r3, r3, #1048576	; 0x100000
   16f84:	eoreq	r1, r1, #1048576	; 0x100000
   16f88:	addeq	r4, r4, #1
   16f8c:	subne	r5, r5, #1
   16f90:	b	16e1c <__assert_fail@plt+0x5c58>
   16f94:	mvns	ip, r4, asr #21
   16f98:	mvnsne	ip, r5, asr #21
   16f9c:	beq	17004 <__assert_fail@plt+0x5e40>
   16fa0:	teq	r4, r5
   16fa4:	teqeq	r0, r2
   16fa8:	beq	16fbc <__assert_fail@plt+0x5df8>
   16fac:	orrs	ip, r4, r0
   16fb0:	moveq	r1, r3
   16fb4:	moveq	r0, r2
   16fb8:	pop	{r4, r5, pc}
   16fbc:	teq	r1, r3
   16fc0:	movne	r1, #0
   16fc4:	movne	r0, #0
   16fc8:	popne	{r4, r5, pc}
   16fcc:	lsrs	ip, r4, #21
   16fd0:	bne	16fe4 <__assert_fail@plt+0x5e20>
   16fd4:	lsls	r0, r0, #1
   16fd8:	adcs	r1, r1, r1
   16fdc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16fe0:	pop	{r4, r5, pc}
   16fe4:	adds	r4, r4, #4194304	; 0x400000
   16fe8:	addcc	r1, r1, #1048576	; 0x100000
   16fec:	popcc	{r4, r5, pc}
   16ff0:	and	r5, r1, #-2147483648	; 0x80000000
   16ff4:	orr	r1, r5, #2130706432	; 0x7f000000
   16ff8:	orr	r1, r1, #15728640	; 0xf00000
   16ffc:	mov	r0, #0
   17000:	pop	{r4, r5, pc}
   17004:	mvns	ip, r4, asr #21
   17008:	movne	r1, r3
   1700c:	movne	r0, r2
   17010:	mvnseq	ip, r5, asr #21
   17014:	movne	r3, r1
   17018:	movne	r2, r0
   1701c:	orrs	r4, r0, r1, lsl #12
   17020:	orrseq	r5, r2, r3, lsl #12
   17024:	teqeq	r1, r3
   17028:	orrne	r1, r1, #524288	; 0x80000
   1702c:	pop	{r4, r5, pc}
   17030:	teq	r0, #0
   17034:	moveq	r1, #0
   17038:	bxeq	lr
   1703c:	push	{r4, r5, lr}
   17040:	mov	r4, #1024	; 0x400
   17044:	add	r4, r4, #50	; 0x32
   17048:	mov	r5, #0
   1704c:	mov	r1, #0
   17050:	b	16ecc <__assert_fail@plt+0x5d08>
   17054:	teq	r0, #0
   17058:	moveq	r1, #0
   1705c:	bxeq	lr
   17060:	push	{r4, r5, lr}
   17064:	mov	r4, #1024	; 0x400
   17068:	add	r4, r4, #50	; 0x32
   1706c:	ands	r5, r0, #-2147483648	; 0x80000000
   17070:	rsbmi	r0, r0, #0
   17074:	mov	r1, #0
   17078:	b	16ecc <__assert_fail@plt+0x5d08>
   1707c:	lsls	r2, r0, #1
   17080:	asr	r1, r2, #3
   17084:	rrx	r1, r1
   17088:	lsl	r0, r2, #28
   1708c:	andsne	r3, r2, #-16777216	; 0xff000000
   17090:	teqne	r3, #-16777216	; 0xff000000
   17094:	eorne	r1, r1, #939524096	; 0x38000000
   17098:	bxne	lr
   1709c:	bics	r2, r2, #-16777216	; 0xff000000
   170a0:	bxeq	lr
   170a4:	teq	r3, #-16777216	; 0xff000000
   170a8:	orreq	r1, r1, #524288	; 0x80000
   170ac:	bxeq	lr
   170b0:	push	{r4, r5, lr}
   170b4:	mov	r4, #896	; 0x380
   170b8:	and	r5, r1, #-2147483648	; 0x80000000
   170bc:	bic	r1, r1, #-2147483648	; 0x80000000
   170c0:	b	16ecc <__assert_fail@plt+0x5d08>
   170c4:	orrs	r2, r0, r1
   170c8:	bxeq	lr
   170cc:	push	{r4, r5, lr}
   170d0:	mov	r5, #0
   170d4:	b	170f4 <__assert_fail@plt+0x5f30>
   170d8:	orrs	r2, r0, r1
   170dc:	bxeq	lr
   170e0:	push	{r4, r5, lr}
   170e4:	ands	r5, r1, #-2147483648	; 0x80000000
   170e8:	bpl	170f4 <__assert_fail@plt+0x5f30>
   170ec:	rsbs	r0, r0, #0
   170f0:	rsc	r1, r1, #0
   170f4:	mov	r4, #1024	; 0x400
   170f8:	add	r4, r4, #50	; 0x32
   170fc:	lsrs	ip, r1, #22
   17100:	beq	16e70 <__assert_fail@plt+0x5cac>
   17104:	mov	r2, #3
   17108:	lsrs	ip, ip, #3
   1710c:	addne	r2, r2, #3
   17110:	lsrs	ip, ip, #3
   17114:	addne	r2, r2, #3
   17118:	add	r2, r2, ip, lsr #3
   1711c:	rsb	r3, r2, #32
   17120:	lsl	ip, r0, r3
   17124:	lsr	r0, r0, r2
   17128:	orr	r0, r0, r1, lsl r3
   1712c:	lsr	r1, r1, r2
   17130:	add	r4, r4, r2
   17134:	b	16e70 <__assert_fail@plt+0x5cac>
   17138:	cmp	r3, #0
   1713c:	cmpeq	r2, #0
   17140:	bne	17158 <__assert_fail@plt+0x5f94>
   17144:	cmp	r1, #0
   17148:	cmpeq	r0, #0
   1714c:	mvnne	r1, #0
   17150:	mvnne	r0, #0
   17154:	b	17174 <__assert_fail@plt+0x5fb0>
   17158:	sub	sp, sp, #8
   1715c:	push	{sp, lr}
   17160:	bl	171c8 <__assert_fail@plt+0x6004>
   17164:	ldr	lr, [sp, #4]
   17168:	add	sp, sp, #8
   1716c:	pop	{r2, r3}
   17170:	bx	lr
   17174:	push	{r1, lr}
   17178:	mov	r0, #8
   1717c:	bl	10f3c <raise@plt>
   17180:	pop	{r1, pc}
   17184:	andeq	r0, r0, r0
   17188:	vmov	d6, r0, r1
   1718c:	vldr	d7, [pc, #36]	; 171b8 <__assert_fail@plt+0x5ff4>
   17190:	vldr	d5, [pc, #40]	; 171c0 <__assert_fail@plt+0x5ffc>
   17194:	vmul.f64	d7, d6, d7
   17198:	vcvt.u32.f64	s14, d7
   1719c:	vcvt.f64.u32	d4, s14
   171a0:	vmov	r1, s14
   171a4:	vmls.f64	d6, d4, d5
   171a8:	vcvt.u32.f64	s15, d6
   171ac:	vmov	r0, s15
   171b0:	bx	lr
   171b4:	nop			; (mov r0, r0)
   171b8:	andeq	r0, r0, r0
   171bc:	ldclcc	0, cr0, [r0]
   171c0:	andeq	r0, r0, r0
   171c4:	mvnsmi	r0, r0
   171c8:	cmp	r1, r3
   171cc:	cmpeq	r0, r2
   171d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171d4:	mov	r4, r0
   171d8:	movcc	r0, #0
   171dc:	mov	r5, r1
   171e0:	ldr	lr, [sp, #36]	; 0x24
   171e4:	movcc	r1, r0
   171e8:	bcc	172e4 <__assert_fail@plt+0x6120>
   171ec:	cmp	r3, #0
   171f0:	clzeq	ip, r2
   171f4:	clzne	ip, r3
   171f8:	addeq	ip, ip, #32
   171fc:	cmp	r5, #0
   17200:	clzeq	r1, r4
   17204:	addeq	r1, r1, #32
   17208:	clzne	r1, r5
   1720c:	sub	ip, ip, r1
   17210:	sub	sl, ip, #32
   17214:	lsl	r9, r3, ip
   17218:	rsb	fp, ip, #32
   1721c:	orr	r9, r9, r2, lsl sl
   17220:	orr	r9, r9, r2, lsr fp
   17224:	lsl	r8, r2, ip
   17228:	cmp	r5, r9
   1722c:	cmpeq	r4, r8
   17230:	movcc	r0, #0
   17234:	movcc	r1, r0
   17238:	bcc	17254 <__assert_fail@plt+0x6090>
   1723c:	mov	r0, #1
   17240:	subs	r4, r4, r8
   17244:	lsl	r1, r0, sl
   17248:	orr	r1, r1, r0, lsr fp
   1724c:	lsl	r0, r0, ip
   17250:	sbc	r5, r5, r9
   17254:	cmp	ip, #0
   17258:	beq	172e4 <__assert_fail@plt+0x6120>
   1725c:	lsr	r6, r8, #1
   17260:	orr	r6, r6, r9, lsl #31
   17264:	lsr	r7, r9, #1
   17268:	mov	r2, ip
   1726c:	b	17290 <__assert_fail@plt+0x60cc>
   17270:	subs	r3, r4, r6
   17274:	sbc	r8, r5, r7
   17278:	adds	r3, r3, r3
   1727c:	adc	r8, r8, r8
   17280:	adds	r4, r3, #1
   17284:	adc	r5, r8, #0
   17288:	subs	r2, r2, #1
   1728c:	beq	172ac <__assert_fail@plt+0x60e8>
   17290:	cmp	r5, r7
   17294:	cmpeq	r4, r6
   17298:	bcs	17270 <__assert_fail@plt+0x60ac>
   1729c:	adds	r4, r4, r4
   172a0:	adc	r5, r5, r5
   172a4:	subs	r2, r2, #1
   172a8:	bne	17290 <__assert_fail@plt+0x60cc>
   172ac:	lsr	r3, r4, ip
   172b0:	orr	r3, r3, r5, lsl fp
   172b4:	lsr	r2, r5, ip
   172b8:	orr	r3, r3, r5, lsr sl
   172bc:	adds	r0, r0, r4
   172c0:	mov	r4, r3
   172c4:	lsl	r3, r2, ip
   172c8:	orr	r3, r3, r4, lsl sl
   172cc:	lsl	ip, r4, ip
   172d0:	orr	r3, r3, r4, lsr fp
   172d4:	adc	r1, r1, r5
   172d8:	subs	r0, r0, ip
   172dc:	mov	r5, r2
   172e0:	sbc	r1, r1, r3
   172e4:	cmp	lr, #0
   172e8:	strdne	r4, [lr]
   172ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172f4:	mov	r7, r0
   172f8:	ldr	r6, [pc, #72]	; 17348 <__assert_fail@plt+0x6184>
   172fc:	ldr	r5, [pc, #72]	; 1734c <__assert_fail@plt+0x6188>
   17300:	add	r6, pc, r6
   17304:	add	r5, pc, r5
   17308:	sub	r6, r6, r5
   1730c:	mov	r8, r1
   17310:	mov	r9, r2
   17314:	bl	10ef8 <fdopen@plt-0x20>
   17318:	asrs	r6, r6, #2
   1731c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17320:	mov	r4, #0
   17324:	add	r4, r4, #1
   17328:	ldr	r3, [r5], #4
   1732c:	mov	r2, r9
   17330:	mov	r1, r8
   17334:	mov	r0, r7
   17338:	blx	r3
   1733c:	cmp	r6, r4
   17340:	bne	17324 <__assert_fail@plt+0x6160>
   17344:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17348:	andeq	r0, r1, r4, lsl #24
   1734c:	strdeq	r0, [r1], -ip
   17350:	bx	lr
   17354:	ldr	r3, [pc, #12]	; 17368 <__assert_fail@plt+0x61a4>
   17358:	mov	r1, #0
   1735c:	add	r3, pc, r3
   17360:	ldr	r2, [r3]
   17364:	b	110c8 <__cxa_atexit@plt>
   17368:	muleq	r1, r8, sp

Disassembly of section .fini:

0001736c <.fini>:
   1736c:	push	{r3, lr}
   17370:	pop	{r3, pc}
