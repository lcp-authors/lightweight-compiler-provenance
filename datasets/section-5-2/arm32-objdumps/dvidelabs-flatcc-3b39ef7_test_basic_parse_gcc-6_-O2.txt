
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

00012400 <.init>:
   12400:	push	{r3, lr}
   12404:	bl	12680 <_start@@Base+0x3c>
   12408:	pop	{r3, pc}

Disassembly of section .plt:

0001240c <free@plt-0x14>:
   1240c:	push	{lr}		; (str lr, [sp, #-4]!)
   12410:	ldr	lr, [pc, #4]	; 1241c <free@plt-0x4>
   12414:	add	lr, pc, lr
   12418:	ldr	pc, [lr, #8]!
   1241c:	andeq	ip, r1, r4, ror #23

00012420 <free@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #28, 20	; 0x1c000
   12428:	ldr	pc, [ip, #3044]!	; 0xbe4

0001242c <memcpy@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #28, 20	; 0x1c000
   12434:	ldr	pc, [ip, #3036]!	; 0xbdc

00012438 <memcmp@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #28, 20	; 0x1c000
   12440:	ldr	pc, [ip, #3028]!	; 0xbd4

00012444 <realloc@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #28, 20	; 0x1c000
   1244c:	ldr	pc, [ip, #3020]!	; 0xbcc

00012450 <fwrite@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #28, 20	; 0x1c000
   12458:	ldr	pc, [ip, #3012]!	; 0xbc4

0001245c <malloc@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #28, 20	; 0x1c000
   12464:	ldr	pc, [ip, #3004]!	; 0xbbc

00012468 <__libc_start_main@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #28, 20	; 0x1c000
   12470:	ldr	pc, [ip, #2996]!	; 0xbb4

00012474 <__gmon_start__@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #28, 20	; 0x1c000
   1247c:	ldr	pc, [ip, #2988]!	; 0xbac

00012480 <strlen@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #28, 20	; 0x1c000
   12488:	ldr	pc, [ip, #2980]!	; 0xba4

0001248c <fprintf@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #28, 20	; 0x1c000
   12494:	ldr	pc, [ip, #2972]!	; 0xb9c

00012498 <posix_memalign@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #28, 20	; 0x1c000
   124a0:	ldr	pc, [ip, #2964]!	; 0xb94

000124a4 <memset@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #28, 20	; 0x1c000
   124ac:	ldr	pc, [ip, #2956]!	; 0xb8c

000124b0 <strtod@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #28, 20	; 0x1c000
   124b8:	ldr	pc, [ip, #2948]!	; 0xb84

000124bc <memchr@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #28, 20	; 0x1c000
   124c4:	ldr	pc, [ip, #2940]!	; 0xb7c

000124c8 <abort@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #28, 20	; 0x1c000
   124d0:	ldr	pc, [ip, #2932]!	; 0xb74

000124d4 <__assert_fail@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #28, 20	; 0x1c000
   124dc:	ldr	pc, [ip, #2924]!	; 0xb6c

Disassembly of section .text:

000124e0 <main@@Base-0x104>:
   124e0:	ldr	r3, [pc, #28]	; 12504 <__assert_fail@plt+0x30>
   124e4:	ldr	r1, [pc, #28]	; 12508 <__assert_fail@plt+0x34>
   124e8:	ldr	r0, [pc, #28]	; 1250c <__assert_fail@plt+0x38>
   124ec:	push	{r4, lr}
   124f0:	add	r3, pc, r3
   124f4:	mov	r2, #308	; 0x134
   124f8:	add	r1, pc, r1
   124fc:	add	r0, pc, r0
   12500:	bl	124d4 <__assert_fail@plt>
   12504:	andeq	sl, r0, r4, lsl #25
   12508:	andeq	fp, r0, ip, asr #7
   1250c:	andeq	fp, r0, r0, asr r4
   12510:	ldr	r3, [pc, #32]	; 12538 <__assert_fail@plt+0x64>
   12514:	ldr	r1, [pc, #32]	; 1253c <__assert_fail@plt+0x68>
   12518:	ldr	r0, [pc, #32]	; 12540 <__assert_fail@plt+0x6c>
   1251c:	add	r3, pc, r3
   12520:	push	{r4, lr}
   12524:	add	r3, r3, #16
   12528:	ldr	r2, [pc, #20]	; 12544 <__assert_fail@plt+0x70>
   1252c:	add	r1, pc, r1
   12530:	add	r0, pc, r0
   12534:	bl	124d4 <__assert_fail@plt>
   12538:	andeq	sl, r0, r8, asr ip
   1253c:	muleq	r0, r8, r3
   12540:	andeq	fp, r0, ip, lsl r4
   12544:	andeq	r0, r0, r1, lsr #5
   12548:	ldr	r3, [pc, #32]	; 12570 <__assert_fail@plt+0x9c>
   1254c:	ldr	r1, [pc, #32]	; 12574 <__assert_fail@plt+0xa0>
   12550:	ldr	r0, [pc, #32]	; 12578 <__assert_fail@plt+0xa4>
   12554:	add	r3, pc, r3
   12558:	push	{r4, lr}
   1255c:	add	r3, r3, #28
   12560:	ldr	r2, [pc, #20]	; 1257c <__assert_fail@plt+0xa8>
   12564:	add	r1, pc, r1
   12568:	add	r0, pc, r0
   1256c:	bl	124d4 <__assert_fail@plt>
   12570:	andeq	sl, r0, r0, lsr #24
   12574:	andeq	fp, r0, r0, ror #6
   12578:	andeq	fp, r0, r4, ror #7
   1257c:	andeq	r0, r0, r7, lsl #5
   12580:	ldr	r3, [pc, #32]	; 125a8 <__assert_fail@plt+0xd4>
   12584:	ldr	r1, [pc, #32]	; 125ac <__assert_fail@plt+0xd8>
   12588:	ldr	r0, [pc, #32]	; 125b0 <__assert_fail@plt+0xdc>
   1258c:	add	r3, pc, r3
   12590:	push	{r4, lr}
   12594:	mov	r2, #892	; 0x37c
   12598:	add	r3, r3, #40	; 0x28
   1259c:	add	r1, pc, r1
   125a0:	add	r0, pc, r0
   125a4:	bl	124d4 <__assert_fail@plt>
   125a8:	andeq	sl, r0, r8, ror #23
   125ac:	andeq	fp, r0, r8, lsr #6
   125b0:	andeq	fp, r0, r4, lsl #7
   125b4:	ldr	r3, [pc, #28]	; 125d8 <__assert_fail@plt+0x104>
   125b8:	ldr	r1, [pc, #28]	; 125dc <__assert_fail@plt+0x108>
   125bc:	ldr	r0, [pc, #28]	; 125e0 <__assert_fail@plt+0x10c>
   125c0:	push	{r4, lr}
   125c4:	add	r3, pc, r3
   125c8:	mov	r2, #260	; 0x104
   125cc:	add	r1, pc, r1
   125d0:	add	r0, pc, r0
   125d4:	bl	124d4 <__assert_fail@plt>
   125d8:	andeq	fp, r0, r4, lsr #14
   125dc:	andeq	fp, r0, r8, lsr #30
   125e0:	muleq	r0, r4, pc	; <UNPREDICTABLE>

000125e4 <main@@Base>:
   125e4:	push	{r4, r5, lr}
   125e8:	sub	sp, sp, #244	; 0xf4
   125ec:	add	r5, sp, #8
   125f0:	mvn	r3, #0
   125f4:	mov	r0, r5
   125f8:	ldr	r4, [pc, #60]	; 1263c <main@@Base+0x58>
   125fc:	str	r3, [sp, #4]
   12600:	bl	146d4 <flatcc_builder_init@@Base>
   12604:	ldr	r1, [pc, #52]	; 12640 <main@@Base+0x5c>
   12608:	add	r4, pc, r4
   1260c:	mov	r2, r4
   12610:	ldr	r1, [r4, r1]
   12614:	add	r3, sp, #4
   12618:	add	r2, r1, #644	; 0x284
   1261c:	add	r2, r2, #1
   12620:	mov	r0, r5
   12624:	bl	12770 <test@@Base>
   12628:	mov	r0, r5
   1262c:	bl	1485c <flatcc_builder_clear@@Base>
   12630:	ldr	r0, [sp, #4]
   12634:	add	sp, sp, #244	; 0xf4
   12638:	pop	{r4, r5, pc}
   1263c:	strdeq	ip, [r1], -r0
   12640:	andeq	r0, r0, ip, asr #32

00012644 <_start@@Base>:
   12644:	mov	fp, #0
   12648:	mov	lr, #0
   1264c:	pop	{r1}		; (ldr r1, [sp], #4)
   12650:	mov	r2, sp
   12654:	push	{r2}		; (str r2, [sp, #-4]!)
   12658:	push	{r0}		; (str r0, [sp, #-4]!)
   1265c:	ldr	ip, [pc, #16]	; 12674 <_start@@Base+0x30>
   12660:	push	{ip}		; (str ip, [sp, #-4]!)
   12664:	ldr	r0, [pc, #12]	; 12678 <_start@@Base+0x34>
   12668:	ldr	r3, [pc, #12]	; 1267c <_start@@Base+0x38>
   1266c:	bl	12468 <__libc_start_main@plt>
   12670:	bl	124c8 <abort@plt>
   12674:	andeq	ip, r1, r8, ror lr
   12678:	andeq	r2, r1, r4, ror #11
   1267c:	andeq	ip, r1, r8, lsl lr
   12680:	ldr	r3, [pc, #20]	; 1269c <_start@@Base+0x58>
   12684:	ldr	r2, [pc, #20]	; 126a0 <_start@@Base+0x5c>
   12688:	add	r3, pc, r3
   1268c:	ldr	r2, [r3, r2]
   12690:	cmp	r2, #0
   12694:	bxeq	lr
   12698:	b	12474 <__gmon_start__@plt>
   1269c:	andeq	ip, r1, r0, ror r9
   126a0:	andeq	r0, r0, r8, asr r0
   126a4:	ldr	r3, [pc, #28]	; 126c8 <_start@@Base+0x84>
   126a8:	ldr	r0, [pc, #28]	; 126cc <_start@@Base+0x88>
   126ac:	sub	r3, r3, r0
   126b0:	cmp	r3, #6
   126b4:	bxls	lr
   126b8:	ldr	r3, [pc, #16]	; 126d0 <_start@@Base+0x8c>
   126bc:	cmp	r3, #0
   126c0:	bxeq	lr
   126c4:	bx	r3
   126c8:	andeq	pc, r2, r3, ror #1
   126cc:	andeq	pc, r2, r0, ror #1
   126d0:	andeq	r0, r0, r0
   126d4:	ldr	r1, [pc, #36]	; 12700 <_start@@Base+0xbc>
   126d8:	ldr	r0, [pc, #36]	; 12704 <_start@@Base+0xc0>
   126dc:	sub	r1, r1, r0
   126e0:	asr	r1, r1, #2
   126e4:	add	r1, r1, r1, lsr #31
   126e8:	asrs	r1, r1, #1
   126ec:	bxeq	lr
   126f0:	ldr	r3, [pc, #16]	; 12708 <_start@@Base+0xc4>
   126f4:	cmp	r3, #0
   126f8:	bxeq	lr
   126fc:	bx	r3
   12700:	andeq	pc, r2, r0, ror #1
   12704:	andeq	pc, r2, r0, ror #1
   12708:	andeq	r0, r0, r0
   1270c:	push	{r4, lr}
   12710:	ldr	r4, [pc, #24]	; 12730 <_start@@Base+0xec>
   12714:	ldrb	r3, [r4]
   12718:	cmp	r3, #0
   1271c:	popne	{r4, pc}
   12720:	bl	126a4 <_start@@Base+0x60>
   12724:	mov	r3, #1
   12728:	strb	r3, [r4]
   1272c:	pop	{r4, pc}
   12730:	andeq	pc, r2, r0, ror #1
   12734:	ldr	r0, [pc, #40]	; 12764 <_start@@Base+0x120>
   12738:	ldr	r3, [r0]
   1273c:	cmp	r3, #0
   12740:	bne	12748 <_start@@Base+0x104>
   12744:	b	126d4 <_start@@Base+0x90>
   12748:	ldr	r3, [pc, #24]	; 12768 <_start@@Base+0x124>
   1274c:	cmp	r3, #0
   12750:	beq	12744 <_start@@Base+0x100>
   12754:	push	{r4, lr}
   12758:	blx	r3
   1275c:	pop	{r4, lr}
   12760:	b	126d4 <_start@@Base+0x90>
   12764:	andeq	lr, r2, r4, lsl pc
	...

00012770 <test@@Base>:
   12770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12774:	sub	sp, sp, #204	; 0xcc
   12778:	add	r8, sp, #156	; 0x9c
   1277c:	mov	r6, r1
   12780:	mov	r9, r0
   12784:	mov	r5, r2
   12788:	mov	r1, #0
   1278c:	mov	r2, #44	; 0x2c
   12790:	mov	r0, r8
   12794:	mov	sl, r3
   12798:	bl	124a4 <memset@plt>
   1279c:	ldr	r1, [pc, #1460]	; 12d58 <test@@Base+0x5e8>
   127a0:	mov	r3, #0
   127a4:	mov	r2, r3
   127a8:	mov	ip, #1
   127ac:	mov	r0, r9
   127b0:	add	r1, pc, r1
   127b4:	str	r6, [sp, #160]	; 0xa0
   127b8:	str	ip, [sp, #172]	; 0xac
   127bc:	ldr	fp, [pc, #1432]	; 12d5c <test@@Base+0x5ec>
   127c0:	bl	15014 <flatcc_builder_start_buffer@@Base>
   127c4:	sub	r3, r5, r6
   127c8:	cmp	r3, #1
   127cc:	add	fp, pc, fp
   127d0:	ble	127e4 <test@@Base+0x74>
   127d4:	ldrb	r3, [r6]
   127d8:	cmp	r3, #32
   127dc:	bhi	127f8 <test@@Base+0x88>
   127e0:	beq	128c0 <test@@Base+0x150>
   127e4:	mov	r1, r6
   127e8:	mov	r2, r5
   127ec:	mov	r0, r8
   127f0:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   127f4:	mov	r6, r0
   127f8:	cmp	r5, r6
   127fc:	beq	131c4 <test@@Base+0xa54>
   12800:	bls	12810 <test@@Base+0xa0>
   12804:	ldrb	r3, [r6]
   12808:	cmp	r3, #123	; 0x7b
   1280c:	beq	128d4 <test@@Base+0x164>
   12810:	ldr	r1, [pc, #1352]	; 12d60 <test@@Base+0x5f0>
   12814:	ldr	r3, [pc, #1352]	; 12d64 <test@@Base+0x5f4>
   12818:	mov	r2, #123	; 0x7b
   1281c:	add	r1, pc, r1
   12820:	ldr	fp, [fp, r3]
   12824:	ldr	r0, [fp]
   12828:	bl	1248c <fprintf@plt>
   1282c:	mov	r2, r5
   12830:	mov	r1, r6
   12834:	mov	r0, r8
   12838:	mov	r3, #17
   1283c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   12840:	mov	r4, r0
   12844:	ldr	r0, [sp, #180]	; 0xb4
   12848:	cmp	r0, #0
   1284c:	bne	1287c <test@@Base+0x10c>
   12850:	ldr	r0, [pc, #1296]	; 12d68 <test@@Base+0x5f8>
   12854:	ldr	r3, [fp]
   12858:	mov	r2, #15
   1285c:	mov	r1, #1
   12860:	add	r0, pc, r0
   12864:	bl	12450 <fwrite@plt>
   12868:	ldr	r3, [sp, #180]	; 0xb4
   1286c:	mov	r0, r4
   12870:	str	r3, [sl]
   12874:	add	sp, sp, #204	; 0xcc
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1287c:	ldr	r3, [sp, #160]	; 0xa0
   12880:	ldr	r5, [sp, #192]	; 0xc0
   12884:	ldr	r6, [fp]
   12888:	sub	r5, r5, r3
   1288c:	ldr	r7, [sp, #172]	; 0xac
   12890:	bl	1981c <flatcc_json_parser_error_string@@Base>
   12894:	ldr	r1, [pc, #1232]	; 12d6c <test@@Base+0x5fc>
   12898:	add	r5, r5, #1
   1289c:	mov	r3, r5
   128a0:	mov	r2, r7
   128a4:	add	r1, pc, r1
   128a8:	str	r0, [sp]
   128ac:	mov	r0, r6
   128b0:	bl	1248c <fprintf@plt>
   128b4:	mov	r0, r9
   128b8:	bl	14850 <flatcc_builder_reset@@Base>
   128bc:	b	12868 <test@@Base+0xf8>
   128c0:	ldrb	r3, [r6, #1]
   128c4:	cmp	r3, #32
   128c8:	addhi	r6, r6, #1
   128cc:	bls	127e4 <test@@Base+0x74>
   128d0:	b	127f8 <test@@Base+0x88>
   128d4:	add	r4, r6, #1
   128d8:	sub	r3, r5, r4
   128dc:	cmp	r3, #1
   128e0:	ble	12904 <test@@Base+0x194>
   128e4:	ldrb	r3, [r6, #1]
   128e8:	cmp	r3, #32
   128ec:	bhi	12918 <test@@Base+0x1a8>
   128f0:	bne	12904 <test@@Base+0x194>
   128f4:	ldrb	r3, [r6, #2]
   128f8:	cmp	r3, #32
   128fc:	addhi	r4, r6, #2
   12900:	bhi	12918 <test@@Base+0x1a8>
   12904:	mov	r1, r4
   12908:	mov	r2, r5
   1290c:	mov	r0, r8
   12910:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   12914:	mov	r4, r0
   12918:	cmp	r5, r4
   1291c:	beq	13724 <test@@Base+0xfb4>
   12920:	mov	r1, #11
   12924:	mov	r0, r9
   12928:	bl	15e4c <flatcc_builder_start_table@@Base>
   1292c:	str	sl, [sp, #64]	; 0x40
   12930:	str	fp, [sp, #68]	; 0x44
   12934:	ldrd	sl, [sp, #88]	; 0x58
   12938:	ldrb	r3, [r4]
   1293c:	cmp	r3, #34	; 0x22
   12940:	beq	13364 <test@@Base+0xbf4>
   12944:	cmp	r3, #46	; 0x2e
   12948:	movne	r3, #1
   1294c:	subne	ip, r5, r4
   12950:	strne	r3, [sp, #168]	; 0xa8
   12954:	beq	13478 <test@@Base+0xd08>
   12958:	cmp	ip, #8
   1295c:	bls	12cec <test@@Base+0x57c>
   12960:	ldrb	r2, [r4, #7]
   12964:	mov	r3, #0
   12968:	ldrb	r0, [r4, #6]
   1296c:	lsr	lr, r0, #24
   12970:	lsl	r1, r0, #8
   12974:	str	lr, [sp, #60]	; 0x3c
   12978:	str	r1, [sp, #56]	; 0x38
   1297c:	ldrd	r0, [sp, #56]	; 0x38
   12980:	orr	r0, r0, r2
   12984:	orr	r1, r1, r3
   12988:	mov	r2, r0
   1298c:	mov	r3, r1
   12990:	ldrb	r0, [r4, #5]
   12994:	lsr	lr, r0, #16
   12998:	lsl	r1, r0, #16
   1299c:	str	lr, [sp, #52]	; 0x34
   129a0:	str	r1, [sp, #48]	; 0x30
   129a4:	ldrd	r0, [sp, #48]	; 0x30
   129a8:	orr	r0, r0, r2
   129ac:	orr	r1, r1, r3
   129b0:	mov	r2, r0
   129b4:	mov	r3, r1
   129b8:	ldrb	r0, [r4, #4]
   129bc:	lsr	lr, r0, #8
   129c0:	lsl	r1, r0, #24
   129c4:	str	lr, [sp, #36]	; 0x24
   129c8:	str	r1, [sp, #32]
   129cc:	ldrd	r0, [sp, #32]
   129d0:	orr	r0, r0, r2
   129d4:	orr	r1, r1, r3
   129d8:	mov	r2, r0
   129dc:	mov	r3, r1
   129e0:	ldrb	r1, [r4, #3]
   129e4:	str	r1, [sp, #44]	; 0x2c
   129e8:	mov	r1, #0
   129ec:	str	r1, [sp, #40]	; 0x28
   129f0:	ldrd	r0, [sp, #40]	; 0x28
   129f4:	orr	r0, r0, r2
   129f8:	orr	r1, r1, r3
   129fc:	mov	r2, r0
   12a00:	mov	r3, r1
   12a04:	ldrb	r0, [r4, #2]
   12a08:	lsl	r1, r0, #8
   12a0c:	str	r1, [sp, #28]
   12a10:	mov	r1, #0
   12a14:	str	r1, [sp, #24]
   12a18:	ldrd	r0, [sp, #24]
   12a1c:	orr	r0, r0, r2
   12a20:	orr	r1, r1, r3
   12a24:	mov	r2, r0
   12a28:	mov	r3, r1
   12a2c:	ldrb	r0, [r4, #1]
   12a30:	mov	sl, #0
   12a34:	str	sl, [sp, #16]
   12a38:	orr	r2, r2, sl
   12a3c:	lsl	fp, r0, #16
   12a40:	ldrb	r0, [r4]
   12a44:	orr	r3, r3, fp
   12a48:	cmp	ip, #8
   12a4c:	lsl	r1, r0, #24
   12a50:	str	r1, [sp, #20]
   12a54:	ldrd	r0, [sp, #16]
   12a58:	orr	r0, r0, r2
   12a5c:	orr	r1, r1, r3
   12a60:	strd	r0, [sp, #8]
   12a64:	bgt	12cd0 <test@@Base+0x560>
   12a68:	ldrd	r2, [sp, #8]
   12a6c:	ldr	r0, [pc, #764]	; 12d70 <test@@Base+0x600>
   12a70:	mvn	r1, #0
   12a74:	and	r2, r2, r0
   12a78:	and	r3, r3, r1
   12a7c:	mov	ip, r5
   12a80:	add	r1, pc, #664	; 0x298
   12a84:	ldrd	r0, [r1]
   12a88:	cmp	r3, r1
   12a8c:	cmpeq	r2, r0
   12a90:	bhi	12b10 <test@@Base+0x3a0>
   12a94:	add	r3, pc, #652	; 0x28c
   12a98:	ldrd	r2, [r3]
   12a9c:	ldrd	r0, [sp, #8]
   12aa0:	and	r0, r0, #-16777216	; 0xff000000
   12aa4:	cmp	r1, r3
   12aa8:	cmpeq	r0, r2
   12aac:	bne	13ae4 <test@@Base+0x1374>
   12ab0:	ldr	r3, [sp, #168]	; 0xa8
   12ab4:	add	r1, r4, #5
   12ab8:	cmp	r3, #0
   12abc:	bne	12f84 <test@@Base+0x814>
   12ac0:	cmp	r5, r1
   12ac4:	beq	1337c <test@@Base+0xc0c>
   12ac8:	ldrb	r2, [r4, #5]
   12acc:	cmp	r2, #34	; 0x22
   12ad0:	bne	12af0 <test@@Base+0x380>
   12ad4:	b	133a0 <test@@Base+0xc30>
   12ad8:	add	r1, r3, #1
   12adc:	cmp	r5, r1
   12ae0:	beq	13378 <test@@Base+0xc08>
   12ae4:	ldrb	r2, [r3, #1]
   12ae8:	cmp	r2, #34	; 0x22
   12aec:	beq	133a0 <test@@Base+0xc30>
   12af0:	cmp	r2, #92	; 0x5c
   12af4:	mov	r3, r1
   12af8:	bne	12ad8 <test@@Base+0x368>
   12afc:	sub	r3, r5, r1
   12b00:	cmp	r3, #1
   12b04:	ble	13394 <test@@Base+0xc24>
   12b08:	add	r3, r1, #1
   12b0c:	b	12ad8 <test@@Base+0x368>
   12b10:	add	r7, pc, #536	; 0x218
   12b14:	ldrd	r6, [r7]
   12b18:	ldrd	r0, [sp, #8]
   12b1c:	mov	r0, #0
   12b20:	cmp	r1, r7
   12b24:	cmpeq	r0, r6
   12b28:	bhi	12d74 <test@@Base+0x604>
   12b2c:	ldrd	r0, [sp, #8]
   12b30:	add	r7, pc, #512	; 0x200
   12b34:	ldrd	r6, [r7]
   12b38:	cmp	r1, r7
   12b3c:	cmpeq	r0, r6
   12b40:	bls	131ec <test@@Base+0xa7c>
   12b44:	ldrd	r2, [sp, #8]
   12b48:	add	r1, pc, #496	; 0x1f0
   12b4c:	ldrd	r0, [r1]
   12b50:	cmp	r3, r1
   12b54:	cmpeq	r2, r0
   12b58:	bne	13ae4 <test@@Base+0x1374>
   12b5c:	sub	r3, r5, ip
   12b60:	cmp	r3, #8
   12b64:	bls	13650 <test@@Base+0xee0>
   12b68:	ldrb	r0, [ip, #6]
   12b6c:	mov	r3, #0
   12b70:	lsr	lr, r0, #24
   12b74:	lsl	r1, r0, #8
   12b78:	str	lr, [sp, #132]	; 0x84
   12b7c:	str	r1, [sp, #128]	; 0x80
   12b80:	ldrd	r0, [sp, #128]	; 0x80
   12b84:	orr	r1, r1, r3
   12b88:	mov	r3, r1
   12b8c:	ldrb	r0, [ip, #5]
   12b90:	lsr	lr, r0, #16
   12b94:	lsl	r1, r0, #16
   12b98:	str	lr, [sp, #124]	; 0x7c
   12b9c:	str	r1, [sp, #120]	; 0x78
   12ba0:	ldrd	r0, [sp, #120]	; 0x78
   12ba4:	orr	r1, r1, r3
   12ba8:	mov	r3, r1
   12bac:	ldrb	r0, [ip, #4]
   12bb0:	lsr	lr, r0, #8
   12bb4:	lsl	r1, r0, #24
   12bb8:	str	lr, [sp, #108]	; 0x6c
   12bbc:	str	r1, [sp, #104]	; 0x68
   12bc0:	ldrd	r0, [sp, #104]	; 0x68
   12bc4:	orr	r1, r1, r3
   12bc8:	mov	r3, r1
   12bcc:	ldrb	r1, [ip, #3]
   12bd0:	str	r1, [sp, #116]	; 0x74
   12bd4:	mov	r1, #0
   12bd8:	str	r1, [sp, #112]	; 0x70
   12bdc:	ldrd	r0, [sp, #112]	; 0x70
   12be0:	orr	r1, r1, r3
   12be4:	mov	r3, r1
   12be8:	ldrb	r0, [ip, #2]
   12bec:	lsl	r1, r0, #8
   12bf0:	str	r1, [sp, #100]	; 0x64
   12bf4:	mov	r1, #0
   12bf8:	str	r1, [sp, #96]	; 0x60
   12bfc:	ldrd	r0, [sp, #96]	; 0x60
   12c00:	orr	r1, r1, r3
   12c04:	mov	r3, r1
   12c08:	ldrb	r0, [ip, #1]
   12c0c:	lsl	r1, r0, #16
   12c10:	str	r1, [sp, #84]	; 0x54
   12c14:	mov	r1, #0
   12c18:	str	r1, [sp, #80]	; 0x50
   12c1c:	ldrd	r0, [sp, #80]	; 0x50
   12c20:	orr	r1, r1, r3
   12c24:	mov	r3, r1
   12c28:	ldrb	r0, [ip]
   12c2c:	mov	r2, #0
   12c30:	lsl	r1, r0, #24
   12c34:	str	r1, [sp, #76]	; 0x4c
   12c38:	mov	r1, #0
   12c3c:	str	r1, [sp, #72]	; 0x48
   12c40:	ldrd	r6, [sp, #72]	; 0x48
   12c44:	add	r1, pc, #252	; 0xfc
   12c48:	ldrd	r0, [r1]
   12c4c:	orr	r7, r7, r3
   12c50:	cmp	r7, r1
   12c54:	cmpeq	r2, r0
   12c58:	bls	136b0 <test@@Base+0xf40>
   12c5c:	add	r1, pc, #236	; 0xec
   12c60:	ldrd	r0, [r1]
   12c64:	cmp	r7, r1
   12c68:	cmpeq	r2, r0
   12c6c:	bne	13f20 <test@@Base+0x17b0>
   12c70:	ldr	r3, [sp, #168]	; 0xa8
   12c74:	add	r1, ip, #4
   12c78:	cmp	r3, #0
   12c7c:	bne	1393c <test@@Base+0x11cc>
   12c80:	cmp	r5, r1
   12c84:	beq	13b34 <test@@Base+0x13c4>
   12c88:	ldrb	r2, [ip, #4]
   12c8c:	cmp	r2, #34	; 0x22
   12c90:	bne	12cb0 <test@@Base+0x540>
   12c94:	b	13be0 <test@@Base+0x1470>
   12c98:	add	r1, r3, #1
   12c9c:	cmp	r5, r1
   12ca0:	beq	13b30 <test@@Base+0x13c0>
   12ca4:	ldrb	r2, [r3, #1]
   12ca8:	cmp	r2, #34	; 0x22
   12cac:	beq	13be0 <test@@Base+0x1470>
   12cb0:	cmp	r2, #92	; 0x5c
   12cb4:	mov	r3, r1
   12cb8:	bne	12c98 <test@@Base+0x528>
   12cbc:	sub	r3, r5, r1
   12cc0:	cmp	r3, #1
   12cc4:	ble	13bd4 <test@@Base+0x1464>
   12cc8:	add	r3, r1, #1
   12ccc:	b	12c98 <test@@Base+0x528>
   12cd0:	ldrd	r2, [sp, #8]
   12cd4:	ldr	r0, [pc, #148]	; 12d70 <test@@Base+0x600>
   12cd8:	mvn	r1, #0
   12cdc:	and	r2, r2, r0
   12ce0:	and	r3, r3, r1
   12ce4:	add	ip, r4, #8
   12ce8:	b	12a80 <test@@Base+0x310>
   12cec:	sub	r3, ip, #1
   12cf0:	cmp	r3, #7
   12cf4:	addls	pc, pc, r3, lsl #2
   12cf8:	b	13ae4 <test@@Base+0x1374>
   12cfc:	b	132c4 <test@@Base+0xb54>
   12d00:	b	132dc <test@@Base+0xb6c>
   12d04:	b	1330c <test@@Base+0xb9c>
   12d08:	b	13300 <test@@Base+0xb90>
   12d0c:	b	132f4 <test@@Base+0xb84>
   12d10:	b	132e8 <test@@Base+0xb78>
   12d14:	b	13318 <test@@Base+0xba8>
   12d18:	b	12960 <test@@Base+0x1f0>
   12d1c:	nop			; (mov r0, r0)
   12d20:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12d24:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d28:	strvc	r0, [r0], #-0
   12d2c:			; <UNDEFINED> instruction: 0x66697273
   12d30:			; <UNDEFINED> instruction: 0xffffffff
   12d34:	bvc	1d6df0c <__bss_end__@@Base+0x1d3ee28>
   12d38:	mcrvs	3, 3, r7, cr4, cr15, {0}
   12d3c:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d40:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   12d44:	cmnvc	r5, #-1140850687	; 0xbc000001
   12d48:			; <UNDEFINED> instruction: 0xffffffff
   12d4c:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   12d50:	andeq	r0, r0, r0
   12d54:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   12d58:	andeq	sl, r0, ip, asr r9
   12d5c:	andeq	ip, r1, ip, lsr #16
   12d60:	andeq	sl, r0, r8, lsl #18
   12d64:	andeq	r0, r0, r4, asr r0
   12d68:	andeq	sl, r0, r4, lsl #18
   12d6c:			; <UNDEFINED> instruction: 0x0000a8b4
   12d70:			; <UNDEFINED> instruction: 0xffff0000
   12d74:	add	r3, pc, #500	; 0x1f4
   12d78:	ldrd	r2, [r3]
   12d7c:	cmp	r1, r3
   12d80:	cmpeq	r0, r2
   12d84:	bne	13ae4 <test@@Base+0x1374>
   12d88:	ldr	r3, [sp, #168]	; 0xa8
   12d8c:	add	r1, r4, #4
   12d90:	cmp	r3, #0
   12d94:	beq	13260 <test@@Base+0xaf0>
   12d98:	cmp	r5, r1
   12d9c:	beq	12e08 <test@@Base+0x698>
   12da0:	ldrb	r3, [r4, #4]
   12da4:	cmp	r3, #32
   12da8:	bls	12dec <test@@Base+0x67c>
   12dac:	add	r4, r4, #5
   12db0:	cmp	r3, #46	; 0x2e
   12db4:	cmpne	r3, #95	; 0x5f
   12db8:	sub	r1, r4, #1
   12dbc:	beq	13344 <test@@Base+0xbd4>
   12dc0:	sub	r2, r3, #48	; 0x30
   12dc4:	tst	r3, #128	; 0x80
   12dc8:	uxtb	r2, r2
   12dcc:	bne	13344 <test@@Base+0xbd4>
   12dd0:	orr	r0, r3, #32
   12dd4:	sub	r0, r0, #97	; 0x61
   12dd8:	cmp	r2, #9
   12ddc:	uxtb	r0, r0
   12de0:	bls	13344 <test@@Base+0xbd4>
   12de4:	cmp	r0, #25
   12de8:	bls	13344 <test@@Base+0xbd4>
   12dec:	sub	r3, r5, r1
   12df0:	cmp	r3, #1
   12df4:	ble	12e08 <test@@Base+0x698>
   12df8:	ldrb	r3, [r1]
   12dfc:	cmp	r3, #32
   12e00:	bhi	12e18 <test@@Base+0x6a8>
   12e04:	beq	13788 <test@@Base+0x1018>
   12e08:	mov	r2, r5
   12e0c:	mov	r0, r8
   12e10:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   12e14:	mov	r1, r0
   12e18:	cmp	r5, r1
   12e1c:	beq	13e28 <test@@Base+0x16b8>
   12e20:	bls	13d0c <test@@Base+0x159c>
   12e24:	ldrb	r3, [r1]
   12e28:	cmp	r3, #58	; 0x3a
   12e2c:	bne	13d0c <test@@Base+0x159c>
   12e30:	add	r4, r1, #1
   12e34:	sub	r3, r5, r4
   12e38:	cmp	r3, #1
   12e3c:	ble	12e50 <test@@Base+0x6e0>
   12e40:	ldrb	r3, [r1, #1]
   12e44:	cmp	r3, #32
   12e48:	bhi	12e64 <test@@Base+0x6f4>
   12e4c:	beq	1379c <test@@Base+0x102c>
   12e50:	mov	r1, r4
   12e54:	mov	r2, r5
   12e58:	mov	r0, r8
   12e5c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   12e60:	mov	r4, r0
   12e64:	cmp	r5, r4
   12e68:	beq	13dfc <test@@Base+0x168c>
   12e6c:	ldrb	r3, [r4]
   12e70:	cmp	r3, #34	; 0x22
   12e74:	addeq	r7, r4, #1
   12e78:	beq	12e94 <test@@Base+0x724>
   12e7c:	mov	r1, r4
   12e80:	mov	r3, #16
   12e84:	mov	r2, r5
   12e88:	mov	r0, r8
   12e8c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   12e90:	mov	r7, r0
   12e94:	mov	r2, r5
   12e98:	mov	r1, r7
   12e9c:	mov	r0, r8
   12ea0:	bl	19b20 <flatcc_json_parser_string_part@@Base>
   12ea4:	cmp	r5, r0
   12ea8:	mov	r4, r0
   12eac:	beq	12f5c <test@@Base+0x7ec>
   12eb0:	ldrb	r3, [r0]
   12eb4:	cmp	r3, #34	; 0x22
   12eb8:	beq	134ac <test@@Base+0xd3c>
   12ebc:	mov	r0, r9
   12ec0:	sub	r6, r4, r7
   12ec4:	bl	15ccc <flatcc_builder_start_string@@Base>
   12ec8:	mov	r1, r6
   12ecc:	mov	r0, r9
   12ed0:	bl	157fc <flatcc_builder_extend_string@@Base>
   12ed4:	cmp	r0, #0
   12ed8:	beq	12f5c <test@@Base+0x7ec>
   12edc:	mov	r1, r7
   12ee0:	mov	r2, r6
   12ee4:	bl	1242c <memcpy@plt>
   12ee8:	add	r3, sp, #137	; 0x89
   12eec:	strd	sl, [sp, #88]	; 0x58
   12ef0:	add	r7, sp, #136	; 0x88
   12ef4:	mov	fp, r3
   12ef8:	b	12f0c <test@@Base+0x79c>
   12efc:	bl	1589c <flatcc_builder_append_string@@Base>
   12f00:	ldrb	r3, [r4]
   12f04:	cmp	r3, #34	; 0x22
   12f08:	beq	133ec <test@@Base+0xc7c>
   12f0c:	mov	r1, r4
   12f10:	mov	r3, r7
   12f14:	mov	r2, r5
   12f18:	mov	r0, r8
   12f1c:	bl	1a338 <flatcc_json_parser_string_escape@@Base>
   12f20:	ldrb	r2, [sp, #136]	; 0x88
   12f24:	mov	r1, fp
   12f28:	mov	r6, r0
   12f2c:	mov	r0, r9
   12f30:	bl	1589c <flatcc_builder_append_string@@Base>
   12f34:	mov	r2, r5
   12f38:	mov	r1, r6
   12f3c:	mov	r0, r8
   12f40:	bl	19b20 <flatcc_json_parser_string_part@@Base>
   12f44:	mov	r1, r6
   12f48:	mov	r4, r0
   12f4c:	cmp	r5, r4
   12f50:	sub	r2, r0, r6
   12f54:	mov	r0, r9
   12f58:	bne	12efc <test@@Base+0x78c>
   12f5c:	ldr	fp, [sp, #68]	; 0x44
   12f60:	ldr	r3, [pc, #20]	; 12f7c <test@@Base+0x80c>
   12f64:	ldr	sl, [sp, #64]	; 0x40
   12f68:	ldr	fp, [fp, r3]
   12f6c:	b	12844 <test@@Base+0xd4>
   12f70:	andeq	r0, r0, r0
   12f74:	bvc	1d6e150 <__bss_end__@@Base+0x1d3f06c>
   12f78:	andeq	r9, r0, r8, lsr #31
   12f7c:	andeq	r0, r0, r4, asr r0
   12f80:	andeq	r9, r0, ip, lsr pc
   12f84:	cmp	r5, r1
   12f88:	beq	12ff4 <test@@Base+0x884>
   12f8c:	ldrb	r3, [r4, #5]
   12f90:	cmp	r3, #32
   12f94:	bls	12fd8 <test@@Base+0x868>
   12f98:	add	r4, r4, #6
   12f9c:	cmp	r3, #46	; 0x2e
   12fa0:	cmpne	r3, #95	; 0x5f
   12fa4:	sub	r1, r4, #1
   12fa8:	beq	131a4 <test@@Base+0xa34>
   12fac:	sub	r2, r3, #48	; 0x30
   12fb0:	tst	r3, #128	; 0x80
   12fb4:	uxtb	r2, r2
   12fb8:	bne	131a4 <test@@Base+0xa34>
   12fbc:	orr	r0, r3, #32
   12fc0:	sub	r0, r0, #97	; 0x61
   12fc4:	cmp	r2, #9
   12fc8:	uxtb	r0, r0
   12fcc:	bls	131a4 <test@@Base+0xa34>
   12fd0:	cmp	r0, #25
   12fd4:	bls	131a4 <test@@Base+0xa34>
   12fd8:	sub	r3, r5, r1
   12fdc:	cmp	r3, #1
   12fe0:	ble	12ff4 <test@@Base+0x884>
   12fe4:	ldrb	r3, [r1]
   12fe8:	cmp	r3, #32
   12fec:	bhi	13004 <test@@Base+0x894>
   12ff0:	beq	1344c <test@@Base+0xcdc>
   12ff4:	mov	r2, r5
   12ff8:	mov	r0, r8
   12ffc:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   13000:	mov	r1, r0
   13004:	cmp	r5, r1
   13008:	beq	13cdc <test@@Base+0x156c>
   1300c:	bls	13b10 <test@@Base+0x13a0>
   13010:	ldrb	r3, [r1]
   13014:	cmp	r3, #58	; 0x3a
   13018:	bne	13b10 <test@@Base+0x13a0>
   1301c:	add	r4, r1, #1
   13020:	sub	r3, r5, r4
   13024:	cmp	r3, #1
   13028:	ble	1303c <test@@Base+0x8cc>
   1302c:	ldrb	r3, [r1, #1]
   13030:	cmp	r3, #32
   13034:	bhi	13050 <test@@Base+0x8e0>
   13038:	beq	132b0 <test@@Base+0xb40>
   1303c:	mov	r1, r4
   13040:	mov	r2, r5
   13044:	mov	r0, r8
   13048:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1304c:	mov	r4, r0
   13050:	cmp	r5, r4
   13054:	beq	13d2c <test@@Base+0x15bc>
   13058:	mov	r3, #1
   1305c:	mov	r2, r3
   13060:	mov	r1, #0
   13064:	mov	r0, r9
   13068:	bl	1788c <flatcc_builder_table_add@@Base>
   1306c:	subs	r6, r0, #0
   13070:	beq	12f5c <test@@Base+0x7ec>
   13074:	mov	r0, #0
   13078:	mov	r1, #0
   1307c:	add	r3, sp, #200	; 0xc8
   13080:	strd	r0, [sp, #144]	; 0x90
   13084:	mov	ip, #0
   13088:	add	r0, sp, #144	; 0x90
   1308c:	str	ip, [r3, #-60]!	; 0xffffffc4
   13090:	mov	r2, r5
   13094:	strb	ip, [r6]
   13098:	mov	r1, r4
   1309c:	str	r0, [sp]
   130a0:	mov	r0, r8
   130a4:	bl	1b85c <flatcc_json_parser_integer@@Base>
   130a8:	cmp	r4, r0
   130ac:	beq	12f5c <test@@Base+0x7ec>
   130b0:	ldr	r3, [sp, #140]	; 0x8c
   130b4:	cmp	r3, #0
   130b8:	bne	13460 <test@@Base+0xcf0>
   130bc:	ldrd	r2, [sp, #144]	; 0x90
   130c0:	cmp	r3, #0
   130c4:	cmpeq	r2, #255	; 0xff
   130c8:	strbls	r2, [r6]
   130cc:	bhi	13324 <test@@Base+0xbb4>
   130d0:	sub	r3, r5, r0
   130d4:	cmp	r3, #1
   130d8:	ble	130ec <test@@Base+0x97c>
   130dc:	ldrb	r3, [r0]
   130e0:	cmp	r3, #32
   130e4:	bhi	130fc <test@@Base+0x98c>
   130e8:	beq	133a8 <test@@Base+0xc38>
   130ec:	mov	r1, r0
   130f0:	mov	r2, r5
   130f4:	mov	r0, r8
   130f8:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   130fc:	cmp	r5, r0
   13100:	beq	13ba4 <test@@Base+0x1434>
   13104:	ldrb	r3, [r0]
   13108:	cmp	r3, #44	; 0x2c
   1310c:	bne	13bfc <test@@Base+0x148c>
   13110:	add	r4, r0, #1
   13114:	sub	r3, r5, r4
   13118:	cmp	r3, #1
   1311c:	ble	13130 <test@@Base+0x9c0>
   13120:	ldrb	r3, [r0, #1]
   13124:	cmp	r3, #32
   13128:	bhi	13144 <test@@Base+0x9d4>
   1312c:	beq	133bc <test@@Base+0xc4c>
   13130:	mov	r1, r4
   13134:	mov	r2, r5
   13138:	mov	r0, r8
   1313c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   13140:	mov	r4, r0
   13144:	cmp	r5, r4
   13148:	beq	13c8c <test@@Base+0x151c>
   1314c:	ldrb	r3, [r4]
   13150:	cmp	r3, #125	; 0x7d
   13154:	bne	12938 <test@@Base+0x1c8>
   13158:	cmp	r5, r4
   1315c:	ldr	sl, [sp, #64]	; 0x40
   13160:	ldr	fp, [sp, #68]	; 0x44
   13164:	mov	r7, r4
   13168:	bhi	13c18 <test@@Base+0x14a8>
   1316c:	ldr	r3, [pc, #-504]	; 12f7c <test@@Base+0x80c>
   13170:	ldr	r1, [pc, #-512]	; 12f78 <test@@Base+0x808>
   13174:	mov	r2, #125	; 0x7d
   13178:	ldr	fp, [fp, r3]
   1317c:	add	r1, pc, r1
   13180:	ldr	r0, [fp]
   13184:	bl	1248c <fprintf@plt>
   13188:	mov	r2, r5
   1318c:	mov	r1, r7
   13190:	mov	r0, r8
   13194:	mov	r3, #17
   13198:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1319c:	mov	r4, r0
   131a0:	b	12844 <test@@Base+0xd4>
   131a4:	cmp	r5, r4
   131a8:	mov	r1, r4
   131ac:	beq	13748 <test@@Base+0xfd8>
   131b0:	ldrb	r2, [r4], #1
   131b4:	cmp	r2, #32
   131b8:	bls	13da8 <test@@Base+0x1638>
   131bc:	mov	r3, r2
   131c0:	b	12f9c <test@@Base+0x82c>
   131c4:	ldr	r3, [pc, #-592]	; 12f7c <test@@Base+0x80c>
   131c8:	ldr	r0, [pc, #-592]	; 12f80 <test@@Base+0x810>
   131cc:	mov	r2, #13
   131d0:	ldr	fp, [fp, r3]
   131d4:	mov	r1, #1
   131d8:	add	r0, pc, r0
   131dc:	ldr	r3, [fp]
   131e0:	mov	r4, r5
   131e4:	bl	12450 <fwrite@plt>
   131e8:	b	12844 <test@@Base+0xd4>
   131ec:	add	r1, pc, #988	; 0x3dc
   131f0:	ldrd	r0, [r1]
   131f4:	cmp	r3, r1
   131f8:	cmpeq	r2, r0
   131fc:	bne	13ae4 <test@@Base+0x1374>
   13200:	ldr	r3, [sp, #168]	; 0xa8
   13204:	add	r1, r4, #6
   13208:	cmp	r3, #0
   1320c:	bne	134c4 <test@@Base+0xd54>
   13210:	cmp	r5, r1
   13214:	beq	13770 <test@@Base+0x1000>
   13218:	ldrb	r2, [r4, #6]
   1321c:	cmp	r2, #34	; 0x22
   13220:	bne	13240 <test@@Base+0xad0>
   13224:	b	137bc <test@@Base+0x104c>
   13228:	add	r1, r3, #1
   1322c:	cmp	r5, r1
   13230:	beq	1376c <test@@Base+0xffc>
   13234:	ldrb	r2, [r3, #1]
   13238:	cmp	r2, #34	; 0x22
   1323c:	beq	137bc <test@@Base+0x104c>
   13240:	cmp	r2, #92	; 0x5c
   13244:	mov	r3, r1
   13248:	bne	13228 <test@@Base+0xab8>
   1324c:	sub	r3, r5, r1
   13250:	cmp	r3, #1
   13254:	ble	137b0 <test@@Base+0x1040>
   13258:	add	r3, r1, #1
   1325c:	b	13228 <test@@Base+0xab8>
   13260:	cmp	r5, r1
   13264:	beq	133d4 <test@@Base+0xc64>
   13268:	ldrb	r2, [r4, #4]
   1326c:	cmp	r2, #34	; 0x22
   13270:	bne	13290 <test@@Base+0xb20>
   13274:	b	134a4 <test@@Base+0xd34>
   13278:	add	r1, r3, #1
   1327c:	cmp	r5, r1
   13280:	beq	133d0 <test@@Base+0xc60>
   13284:	ldrb	r2, [r3, #1]
   13288:	cmp	r2, #34	; 0x22
   1328c:	beq	134a4 <test@@Base+0xd34>
   13290:	cmp	r2, #92	; 0x5c
   13294:	mov	r3, r1
   13298:	bne	13278 <test@@Base+0xb08>
   1329c:	sub	r3, r5, r1
   132a0:	cmp	r3, #1
   132a4:	ble	13498 <test@@Base+0xd28>
   132a8:	add	r3, r1, #1
   132ac:	b	13278 <test@@Base+0xb08>
   132b0:	ldrb	r3, [r1, #2]
   132b4:	cmp	r3, #32
   132b8:	addhi	r4, r1, #2
   132bc:	bls	1303c <test@@Base+0x8cc>
   132c0:	b	13050 <test@@Base+0x8e0>
   132c4:	ldrb	r2, [r4]
   132c8:	lsl	r3, r2, #24
   132cc:	str	r3, [sp, #12]
   132d0:	mov	r3, #0
   132d4:	str	r3, [sp, #8]
   132d8:	b	12a68 <test@@Base+0x2f8>
   132dc:	mov	r2, #0
   132e0:	mov	r3, #0
   132e4:	b	12a2c <test@@Base+0x2bc>
   132e8:	mov	r2, #0
   132ec:	mov	r3, #0
   132f0:	b	12990 <test@@Base+0x220>
   132f4:	mov	r2, #0
   132f8:	mov	r3, #0
   132fc:	b	129b8 <test@@Base+0x248>
   13300:	mov	r2, #0
   13304:	mov	r3, #0
   13308:	b	129e0 <test@@Base+0x270>
   1330c:	mov	r2, #0
   13310:	mov	r3, #0
   13314:	b	12a04 <test@@Base+0x294>
   13318:	mov	r2, #0
   1331c:	mov	r3, #0
   13320:	b	12968 <test@@Base+0x1f8>
   13324:	mov	r1, r0
   13328:	mov	r3, #7
   1332c:	mov	r2, r5
   13330:	mov	r0, r8
   13334:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13338:	cmp	r4, r0
   1333c:	bne	130d0 <test@@Base+0x960>
   13340:	b	12f5c <test@@Base+0x7ec>
   13344:	cmp	r5, r4
   13348:	mov	r1, r4
   1334c:	beq	13ac0 <test@@Base+0x1350>
   13350:	ldrb	r2, [r4], #1
   13354:	cmp	r2, #32
   13358:	bls	13e78 <test@@Base+0x1708>
   1335c:	mov	r3, r2
   13360:	b	12db0 <test@@Base+0x640>
   13364:	add	r4, r4, #1
   13368:	mov	r3, #0
   1336c:	sub	ip, r5, r4
   13370:	str	r3, [sp, #168]	; 0xa8
   13374:	b	12958 <test@@Base+0x1e8>
   13378:	mov	r1, r5
   1337c:	mov	r3, #20
   13380:	mov	r2, r5
   13384:	mov	r0, r8
   13388:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1338c:	mov	r1, r0
   13390:	b	12fd8 <test@@Base+0x868>
   13394:	ldrb	r3, [r1]
   13398:	cmp	r3, #34	; 0x22
   1339c:	bne	1337c <test@@Base+0xc0c>
   133a0:	add	r1, r1, #1
   133a4:	b	12fd8 <test@@Base+0x868>
   133a8:	ldrb	r3, [r0, #1]
   133ac:	cmp	r3, #32
   133b0:	addhi	r0, r0, #1
   133b4:	bls	130ec <test@@Base+0x97c>
   133b8:	b	130fc <test@@Base+0x98c>
   133bc:	ldrb	r3, [r0, #2]
   133c0:	cmp	r3, #32
   133c4:	addhi	r4, r0, #2
   133c8:	bls	13130 <test@@Base+0x9c0>
   133cc:	b	13144 <test@@Base+0x9d4>
   133d0:	mov	r1, r5
   133d4:	mov	r3, #20
   133d8:	mov	r2, r5
   133dc:	mov	r0, r8
   133e0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   133e4:	mov	r1, r0
   133e8:	b	12dec <test@@Base+0x67c>
   133ec:	mov	r0, r9
   133f0:	ldrd	sl, [sp, #88]	; 0x58
   133f4:	bl	17750 <flatcc_builder_end_string@@Base>
   133f8:	mov	r6, r0
   133fc:	cmp	r6, #0
   13400:	beq	12f5c <test@@Base+0x7ec>
   13404:	mov	r1, #10
   13408:	mov	r0, r9
   1340c:	bl	17aac <flatcc_builder_table_add_offset@@Base>
   13410:	cmp	r0, #0
   13414:	beq	12f5c <test@@Base+0x7ec>
   13418:	cmp	r4, r5
   1341c:	str	r6, [r0]
   13420:	beq	13434 <test@@Base+0xcc4>
   13424:	ldrb	r3, [r4]
   13428:	cmp	r3, #34	; 0x22
   1342c:	addeq	r0, r4, #1
   13430:	beq	130d0 <test@@Base+0x960>
   13434:	mov	r1, r4
   13438:	mov	r3, #20
   1343c:	mov	r2, r5
   13440:	mov	r0, r8
   13444:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13448:	b	130d0 <test@@Base+0x960>
   1344c:	ldrb	r3, [r1, #1]
   13450:	cmp	r3, #32
   13454:	addhi	r1, r1, #1
   13458:	bls	12ff4 <test@@Base+0x884>
   1345c:	b	13004 <test@@Base+0x894>
   13460:	mov	r1, r0
   13464:	mov	r3, #8
   13468:	mov	r2, r5
   1346c:	mov	r0, r8
   13470:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13474:	b	13338 <test@@Base+0xbc8>
   13478:	mov	r1, r4
   1347c:	mov	r3, #5
   13480:	mov	r2, r5
   13484:	mov	r0, r8
   13488:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1348c:	mov	r4, r0
   13490:	sub	ip, r5, r0
   13494:	b	12958 <test@@Base+0x1e8>
   13498:	ldrb	r3, [r1]
   1349c:	cmp	r3, #34	; 0x22
   134a0:	bne	133d4 <test@@Base+0xc64>
   134a4:	add	r1, r1, #1
   134a8:	b	12dec <test@@Base+0x67c>
   134ac:	sub	r2, r0, r7
   134b0:	mov	r1, r7
   134b4:	mov	r0, r9
   134b8:	bl	175ec <flatcc_builder_create_string@@Base>
   134bc:	mov	r6, r0
   134c0:	b	133fc <test@@Base+0xc8c>
   134c4:	cmp	r5, r1
   134c8:	beq	13534 <test@@Base+0xdc4>
   134cc:	ldrb	r3, [r4, #6]
   134d0:	cmp	r3, #32
   134d4:	bls	13518 <test@@Base+0xda8>
   134d8:	add	r4, r4, #7
   134dc:	cmp	r3, #46	; 0x2e
   134e0:	cmpne	r3, #95	; 0x5f
   134e4:	sub	r1, r4, #1
   134e8:	beq	13630 <test@@Base+0xec0>
   134ec:	sub	r2, r3, #48	; 0x30
   134f0:	tst	r3, #128	; 0x80
   134f4:	uxtb	r2, r2
   134f8:	bne	13630 <test@@Base+0xec0>
   134fc:	orr	r0, r3, #32
   13500:	sub	r0, r0, #97	; 0x61
   13504:	cmp	r2, #9
   13508:	uxtb	r0, r0
   1350c:	bls	13630 <test@@Base+0xec0>
   13510:	cmp	r0, #25
   13514:	bls	13630 <test@@Base+0xec0>
   13518:	sub	r3, r5, r1
   1351c:	cmp	r3, #1
   13520:	ble	13534 <test@@Base+0xdc4>
   13524:	ldrb	r3, [r1]
   13528:	cmp	r3, #32
   1352c:	bhi	13544 <test@@Base+0xdd4>
   13530:	beq	13b68 <test@@Base+0x13f8>
   13534:	mov	r2, r5
   13538:	mov	r0, r8
   1353c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   13540:	mov	r1, r0
   13544:	cmp	r5, r1
   13548:	beq	13e84 <test@@Base+0x1714>
   1354c:	bls	13e58 <test@@Base+0x16e8>
   13550:	ldrb	r3, [r1]
   13554:	cmp	r3, #58	; 0x3a
   13558:	bne	13e58 <test@@Base+0x16e8>
   1355c:	add	r4, r1, #1
   13560:	sub	r3, r5, r4
   13564:	cmp	r3, #1
   13568:	ble	1357c <test@@Base+0xe0c>
   1356c:	ldrb	r3, [r1, #1]
   13570:	cmp	r3, #32
   13574:	bhi	13590 <test@@Base+0xe20>
   13578:	beq	13b7c <test@@Base+0x140c>
   1357c:	mov	r1, r4
   13580:	mov	r2, r5
   13584:	mov	r0, r8
   13588:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1358c:	mov	r4, r0
   13590:	cmp	r5, r4
   13594:	beq	13eb4 <test@@Base+0x1744>
   13598:	mov	r3, #8
   1359c:	mov	r2, r3
   135a0:	mov	r1, #1
   135a4:	mov	r0, r9
   135a8:	bl	1788c <flatcc_builder_table_add@@Base>
   135ac:	subs	r3, r0, #0
   135b0:	beq	12f5c <test@@Base+0x7ec>
   135b4:	mov	r2, r5
   135b8:	mov	r1, r4
   135bc:	mov	r0, r8
   135c0:	bl	1aa5c <flatcc_json_parser_double@@Base>
   135c4:	cmp	r0, r4
   135c8:	bne	130d0 <test@@Base+0x960>
   135cc:	b	12f5c <test@@Base+0x7ec>
   135d0:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   135d4:	cmnvc	r5, #-1140850687	; 0xbc000001
   135d8:	andeq	r0, r0, r0
   135dc:	stfvse	f6, [r5], #-400	; 0xfffffe70
   135e0:	andeq	r9, r0, r0, lsr r1
   135e4:	andeq	r9, r0, ip, asr r1
   135e8:	andeq	r9, r0, ip, lsl #3
   135ec:			; <UNDEFINED> instruction: 0x000091bc
   135f0:	andeq	r9, r0, ip, lsl #4
   135f4:	andeq	r9, r0, ip, lsr #4
   135f8:	andeq	r9, r0, r8, asr #4
   135fc:	andeq	r9, r0, r8, ror r2
   13600:			; <UNDEFINED> instruction: 0x000092b4
   13604:	ldrdeq	r9, [r0], -r4
   13608:	andeq	r9, r0, r0, lsl #6
   1360c:	ldrdeq	r9, [r0], -r0
   13610:	andeq	r9, r0, r0, lsl #8
   13614:	andeq	r9, r0, r0, lsr #8
   13618:	andeq	r9, r0, r0, ror r4
   1361c:			; <UNDEFINED> instruction: 0x000094bc
   13620:	andeq	r9, r0, r8, asr r5
   13624:	strdeq	r9, [r0], -ip
   13628:	ldrdeq	r9, [r0], -ip
   1362c:	andeq	r0, r0, r4, asr r0
   13630:	cmp	r5, r4
   13634:	mov	r1, r4
   13638:	beq	13cb8 <test@@Base+0x1548>
   1363c:	ldrb	r2, [r4], #1
   13640:	cmp	r2, #32
   13644:	bls	13f34 <test@@Base+0x17c4>
   13648:	mov	r3, r2
   1364c:	b	134dc <test@@Base+0xd6c>
   13650:	sub	r3, r3, #1
   13654:	cmp	r3, #7
   13658:	addls	pc, pc, r3, lsl #2
   1365c:	b	13f20 <test@@Base+0x17b0>
   13660:	b	136a8 <test@@Base+0xf38>
   13664:	b	136a0 <test@@Base+0xf30>
   13668:	b	13698 <test@@Base+0xf28>
   1366c:	b	13690 <test@@Base+0xf20>
   13670:	b	13688 <test@@Base+0xf18>
   13674:	b	13680 <test@@Base+0xf10>
   13678:	b	12b68 <test@@Base+0x3f8>
   1367c:	b	12b68 <test@@Base+0x3f8>
   13680:	mov	r3, #0
   13684:	b	12b8c <test@@Base+0x41c>
   13688:	mov	r3, #0
   1368c:	b	12bac <test@@Base+0x43c>
   13690:	mov	r3, #0
   13694:	b	12bcc <test@@Base+0x45c>
   13698:	mov	r3, #0
   1369c:	b	12be8 <test@@Base+0x478>
   136a0:	mov	r3, #0
   136a4:	b	12c08 <test@@Base+0x498>
   136a8:	mov	r3, #0
   136ac:	b	12c28 <test@@Base+0x4b8>
   136b0:	sub	r1, pc, #224	; 0xe0
   136b4:	ldrd	r0, [r1]
   136b8:	cmp	r7, r1
   136bc:	cmpeq	r2, r0
   136c0:	bne	13f20 <test@@Base+0x17b0>
   136c4:	ldr	r3, [sp, #168]	; 0xa8
   136c8:	add	r1, ip, #4
   136cc:	cmp	r3, #0
   136d0:	bne	137c4 <test@@Base+0x1054>
   136d4:	cmp	r5, r1
   136d8:	beq	13b50 <test@@Base+0x13e0>
   136dc:	ldrb	r2, [ip, #4]
   136e0:	cmp	r2, #34	; 0x22
   136e4:	bne	13704 <test@@Base+0xf94>
   136e8:	b	13bf4 <test@@Base+0x1484>
   136ec:	add	r1, r3, #1
   136f0:	cmp	r5, r1
   136f4:	beq	13b4c <test@@Base+0x13dc>
   136f8:	ldrb	r2, [r3, #1]
   136fc:	cmp	r2, #34	; 0x22
   13700:	beq	13bf4 <test@@Base+0x1484>
   13704:	cmp	r2, #92	; 0x5c
   13708:	mov	r3, r1
   1370c:	bne	136ec <test@@Base+0xf7c>
   13710:	sub	r3, r5, r1
   13714:	cmp	r3, #1
   13718:	ble	13be8 <test@@Base+0x1478>
   1371c:	add	r3, r1, #1
   13720:	b	136ec <test@@Base+0xf7c>
   13724:	ldr	r3, [pc, #-256]	; 1362c <test@@Base+0xebc>
   13728:	ldr	r0, [pc, #-264]	; 13628 <test@@Base+0xeb8>
   1372c:	mov	r2, #13
   13730:	ldr	fp, [fp, r3]
   13734:	mov	r1, #1
   13738:	add	r0, pc, r0
   1373c:	ldr	r3, [fp]
   13740:	bl	12450 <fwrite@plt>
   13744:	b	12844 <test@@Base+0xd4>
   13748:	cmp	r3, #46	; 0x2e
   1374c:	mov	r1, r5
   13750:	bne	12ff4 <test@@Base+0x884>
   13754:	mov	r3, #5
   13758:	mov	r2, r5
   1375c:	mov	r0, r8
   13760:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13764:	mov	r1, r0
   13768:	b	12fd8 <test@@Base+0x868>
   1376c:	mov	r1, r5
   13770:	mov	r3, #20
   13774:	mov	r2, r5
   13778:	mov	r0, r8
   1377c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13780:	mov	r1, r0
   13784:	b	13518 <test@@Base+0xda8>
   13788:	ldrb	r3, [r1, #1]
   1378c:	cmp	r3, #32
   13790:	addhi	r1, r1, #1
   13794:	bls	12e08 <test@@Base+0x698>
   13798:	b	12e18 <test@@Base+0x6a8>
   1379c:	ldrb	r3, [r1, #2]
   137a0:	cmp	r3, #32
   137a4:	addhi	r4, r1, #2
   137a8:	bls	12e50 <test@@Base+0x6e0>
   137ac:	b	12e64 <test@@Base+0x6f4>
   137b0:	ldrb	r3, [r1]
   137b4:	cmp	r3, #34	; 0x22
   137b8:	bne	13770 <test@@Base+0x1000>
   137bc:	add	r1, r1, #1
   137c0:	b	13518 <test@@Base+0xda8>
   137c4:	cmp	r5, r1
   137c8:	beq	13834 <test@@Base+0x10c4>
   137cc:	ldrb	r3, [ip, #4]
   137d0:	cmp	r3, #32
   137d4:	bls	13818 <test@@Base+0x10a8>
   137d8:	add	ip, ip, #5
   137dc:	cmp	r3, #46	; 0x2e
   137e0:	cmpne	r3, #95	; 0x5f
   137e4:	sub	r1, ip, #1
   137e8:	beq	1391c <test@@Base+0x11ac>
   137ec:	sub	r2, r3, #48	; 0x30
   137f0:	tst	r3, #128	; 0x80
   137f4:	uxtb	r2, r2
   137f8:	bne	1391c <test@@Base+0x11ac>
   137fc:	orr	r0, r3, #32
   13800:	sub	r0, r0, #97	; 0x61
   13804:	cmp	r2, #9
   13808:	uxtb	r0, r0
   1380c:	bls	1391c <test@@Base+0x11ac>
   13810:	cmp	r0, #25
   13814:	bls	1391c <test@@Base+0x11ac>
   13818:	sub	r3, r5, r1
   1381c:	cmp	r3, #1
   13820:	ble	13834 <test@@Base+0x10c4>
   13824:	ldrb	r3, [r1]
   13828:	cmp	r3, #32
   1382c:	bhi	13844 <test@@Base+0x10d4>
   13830:	beq	13d6c <test@@Base+0x15fc>
   13834:	mov	r2, r5
   13838:	mov	r0, r8
   1383c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   13840:	mov	r1, r0
   13844:	cmp	r5, r1
   13848:	beq	13f40 <test@@Base+0x17d0>
   1384c:	bls	13ee0 <test@@Base+0x1770>
   13850:	ldrb	r3, [r1]
   13854:	cmp	r3, #58	; 0x3a
   13858:	bne	13ee0 <test@@Base+0x1770>
   1385c:	add	r4, r1, #1
   13860:	sub	r3, r5, r4
   13864:	cmp	r3, #1
   13868:	ble	1387c <test@@Base+0x110c>
   1386c:	ldrb	r3, [r1, #1]
   13870:	cmp	r3, #32
   13874:	bhi	13890 <test@@Base+0x1120>
   13878:	beq	13d94 <test@@Base+0x1624>
   1387c:	mov	r1, r4
   13880:	mov	r2, r5
   13884:	mov	r0, r8
   13888:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1388c:	mov	r4, r0
   13890:	cmp	r5, r4
   13894:	beq	13fcc <test@@Base+0x185c>
   13898:	mov	r3, #8
   1389c:	mov	r2, r3
   138a0:	mov	r1, #3
   138a4:	mov	r0, r9
   138a8:	bl	1788c <flatcc_builder_table_add@@Base>
   138ac:	subs	r6, r0, #0
   138b0:	beq	12f5c <test@@Base+0x7ec>
   138b4:	add	r3, sp, #200	; 0xc8
   138b8:	mov	r0, #0
   138bc:	mov	r1, #0
   138c0:	mov	r2, #0
   138c4:	str	r2, [r3, #-60]!	; 0xffffffc4
   138c8:	add	r2, sp, #144	; 0x90
   138cc:	strd	r0, [sp, #144]	; 0x90
   138d0:	strd	r0, [r6]
   138d4:	str	r2, [sp]
   138d8:	mov	r1, r4
   138dc:	mov	r2, r5
   138e0:	mov	r0, r8
   138e4:	bl	1b85c <flatcc_json_parser_integer@@Base>
   138e8:	cmp	r4, r0
   138ec:	beq	12f5c <test@@Base+0x7ec>
   138f0:	ldr	r1, [sp, #140]	; 0x8c
   138f4:	ldrd	r2, [sp, #144]	; 0x90
   138f8:	cmp	r1, #0
   138fc:	beq	13b90 <test@@Base+0x1420>
   13900:	cmp	r3, #-2147483648	; 0x80000000
   13904:	cmpeq	r2, #0
   13908:	bhi	13460 <test@@Base+0xcf0>
   1390c:	rsbs	r2, r2, #0
   13910:	rsc	r3, r3, #0
   13914:	strd	r2, [r6]
   13918:	b	130d0 <test@@Base+0x960>
   1391c:	cmp	r5, ip
   13920:	mov	r1, ip
   13924:	beq	13dd8 <test@@Base+0x1668>
   13928:	ldrb	r2, [ip], #1
   1392c:	cmp	r2, #32
   13930:	bls	13ff8 <test@@Base+0x1888>
   13934:	mov	r3, r2
   13938:	b	137dc <test@@Base+0x106c>
   1393c:	cmp	r5, r1
   13940:	beq	139ac <test@@Base+0x123c>
   13944:	ldrb	r3, [ip, #4]
   13948:	cmp	r3, #32
   1394c:	bls	13990 <test@@Base+0x1220>
   13950:	add	ip, ip, #5
   13954:	cmp	r3, #46	; 0x2e
   13958:	cmpne	r3, #95	; 0x5f
   1395c:	sub	r1, ip, #1
   13960:	beq	13aa0 <test@@Base+0x1330>
   13964:	sub	r2, r3, #48	; 0x30
   13968:	tst	r3, #128	; 0x80
   1396c:	uxtb	r2, r2
   13970:	bne	13aa0 <test@@Base+0x1330>
   13974:	orr	r0, r3, #32
   13978:	sub	r0, r0, #97	; 0x61
   1397c:	cmp	r2, #9
   13980:	uxtb	r0, r0
   13984:	bls	13aa0 <test@@Base+0x1330>
   13988:	cmp	r0, #25
   1398c:	bls	13aa0 <test@@Base+0x1330>
   13990:	sub	r3, r5, r1
   13994:	cmp	r3, #1
   13998:	ble	139ac <test@@Base+0x123c>
   1399c:	ldrb	r3, [r1]
   139a0:	cmp	r3, #32
   139a4:	bhi	139bc <test@@Base+0x124c>
   139a8:	beq	13d58 <test@@Base+0x15e8>
   139ac:	mov	r2, r5
   139b0:	mov	r0, r8
   139b4:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   139b8:	mov	r1, r0
   139bc:	cmp	r5, r1
   139c0:	beq	13f70 <test@@Base+0x1800>
   139c4:	bls	13f00 <test@@Base+0x1790>
   139c8:	ldrb	r3, [r1]
   139cc:	cmp	r3, #58	; 0x3a
   139d0:	bne	13f00 <test@@Base+0x1790>
   139d4:	add	r4, r1, #1
   139d8:	sub	r3, r5, r4
   139dc:	cmp	r3, #1
   139e0:	ble	139f4 <test@@Base+0x1284>
   139e4:	ldrb	r3, [r1, #1]
   139e8:	cmp	r3, #32
   139ec:	bhi	13a08 <test@@Base+0x1298>
   139f0:	beq	13d80 <test@@Base+0x1610>
   139f4:	mov	r1, r4
   139f8:	mov	r2, r5
   139fc:	mov	r0, r8
   13a00:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   13a04:	mov	r4, r0
   13a08:	cmp	r5, r4
   13a0c:	beq	13fa0 <test@@Base+0x1830>
   13a10:	mov	r3, #4
   13a14:	mov	r2, r3
   13a18:	mov	r1, #2
   13a1c:	mov	r0, r9
   13a20:	bl	1788c <flatcc_builder_table_add@@Base>
   13a24:	subs	r3, r0, #0
   13a28:	str	r3, [sp, #88]	; 0x58
   13a2c:	beq	12f5c <test@@Base+0x7ec>
   13a30:	mov	r0, #0
   13a34:	mov	r1, #0
   13a38:	add	r3, sp, #200	; 0xc8
   13a3c:	strd	r0, [sp, #144]	; 0x90
   13a40:	ldr	r1, [sp, #88]	; 0x58
   13a44:	mov	ip, #0
   13a48:	add	r0, sp, #144	; 0x90
   13a4c:	str	ip, [r3, #-60]!	; 0xffffffc4
   13a50:	mov	r2, r5
   13a54:	str	ip, [r1]
   13a58:	str	r0, [sp]
   13a5c:	mov	r1, r4
   13a60:	mov	r0, r8
   13a64:	bl	1b85c <flatcc_json_parser_integer@@Base>
   13a68:	cmp	r4, r0
   13a6c:	beq	12f5c <test@@Base+0x7ec>
   13a70:	ldr	r3, [sp, #140]	; 0x8c
   13a74:	cmp	r3, #0
   13a78:	bne	13460 <test@@Base+0xcf0>
   13a7c:	ldrd	r2, [sp, #144]	; 0x90
   13a80:	mov	r7, #0
   13a84:	mvn	r6, #0
   13a88:	cmp	r3, r7
   13a8c:	cmpeq	r2, r6
   13a90:	bhi	13324 <test@@Base+0xbb4>
   13a94:	ldr	r1, [sp, #88]	; 0x58
   13a98:	str	r2, [r1]
   13a9c:	b	130d0 <test@@Base+0x960>
   13aa0:	cmp	r5, ip
   13aa4:	mov	r1, ip
   13aa8:	beq	13db4 <test@@Base+0x1644>
   13aac:	ldrb	r2, [ip], #1
   13ab0:	cmp	r2, #32
   13ab4:	bls	14004 <test@@Base+0x1894>
   13ab8:	mov	r3, r2
   13abc:	b	13954 <test@@Base+0x11e4>
   13ac0:	cmp	r3, #46	; 0x2e
   13ac4:	mov	r1, r5
   13ac8:	bne	12e08 <test@@Base+0x698>
   13acc:	mov	r3, #5
   13ad0:	mov	r2, r5
   13ad4:	mov	r0, r8
   13ad8:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13adc:	mov	r1, r0
   13ae0:	b	12dec <test@@Base+0x67c>
   13ae4:	ldr	sl, [sp, #64]	; 0x40
   13ae8:	ldr	fp, [sp, #68]	; 0x44
   13aec:	mov	r2, r5
   13af0:	mov	r1, r4
   13af4:	mov	r3, #13
   13af8:	mov	r0, r8
   13afc:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13b00:	ldr	r3, [pc, #-1244]	; 1362c <test@@Base+0xebc>
   13b04:	mov	r4, r0
   13b08:	ldr	fp, [fp, r3]
   13b0c:	b	12844 <test@@Base+0xd4>
   13b10:	mov	r6, r1
   13b14:	ldr	r1, [pc, #-1272]	; 13624 <test@@Base+0xeb4>
   13b18:	ldr	sl, [sp, #64]	; 0x40
   13b1c:	ldr	fp, [sp, #68]	; 0x44
   13b20:	ldr	r3, [pc, #-1276]	; 1362c <test@@Base+0xebc>
   13b24:	mov	r2, #58	; 0x3a
   13b28:	add	r1, pc, r1
   13b2c:	b	12820 <test@@Base+0xb0>
   13b30:	mov	r1, r5
   13b34:	mov	r3, #20
   13b38:	mov	r2, r5
   13b3c:	mov	r0, r8
   13b40:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13b44:	mov	r1, r0
   13b48:	b	13990 <test@@Base+0x1220>
   13b4c:	mov	r1, r5
   13b50:	mov	r3, #20
   13b54:	mov	r2, r5
   13b58:	mov	r0, r8
   13b5c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13b60:	mov	r1, r0
   13b64:	b	13818 <test@@Base+0x10a8>
   13b68:	ldrb	r3, [r1, #1]
   13b6c:	cmp	r3, #32
   13b70:	addhi	r1, r1, #1
   13b74:	bls	13534 <test@@Base+0xdc4>
   13b78:	b	13544 <test@@Base+0xdd4>
   13b7c:	ldrb	r3, [r1, #2]
   13b80:	cmp	r3, #32
   13b84:	addhi	r4, r1, #2
   13b88:	bls	1357c <test@@Base+0xe0c>
   13b8c:	b	13590 <test@@Base+0xe20>
   13b90:	cmp	r2, #0
   13b94:	sbcs	r1, r3, #0
   13b98:	blt	13324 <test@@Base+0xbb4>
   13b9c:	strd	r2, [r6]
   13ba0:	b	130d0 <test@@Base+0x960>
   13ba4:	ldr	fp, [sp, #68]	; 0x44
   13ba8:	ldr	r3, [pc, #-1412]	; 1362c <test@@Base+0xebc>
   13bac:	ldr	r0, [pc, #-1428]	; 13620 <test@@Base+0xeb0>
   13bb0:	mov	r2, #13
   13bb4:	ldr	fp, [fp, r3]
   13bb8:	mov	r1, #1
   13bbc:	add	r0, pc, r0
   13bc0:	ldr	r3, [fp]
   13bc4:	ldr	sl, [sp, #64]	; 0x40
   13bc8:	mov	r4, r5
   13bcc:	bl	12450 <fwrite@plt>
   13bd0:	b	12844 <test@@Base+0xd4>
   13bd4:	ldrb	r3, [r1]
   13bd8:	cmp	r3, #34	; 0x22
   13bdc:	bne	13b34 <test@@Base+0x13c4>
   13be0:	add	r1, r1, #1
   13be4:	b	13990 <test@@Base+0x1220>
   13be8:	ldrb	r3, [r1]
   13bec:	cmp	r3, #34	; 0x22
   13bf0:	bne	13b50 <test@@Base+0x13e0>
   13bf4:	add	r1, r1, #1
   13bf8:	b	13818 <test@@Base+0x10a8>
   13bfc:	cmp	r5, r0
   13c00:	mov	r7, r0
   13c04:	ldr	sl, [sp, #64]	; 0x40
   13c08:	ldr	fp, [sp, #68]	; 0x44
   13c0c:	bls	1316c <test@@Base+0x9fc>
   13c10:	cmp	r3, #125	; 0x7d
   13c14:	bne	1316c <test@@Base+0x9fc>
   13c18:	mov	r0, r9
   13c1c:	bl	16840 <flatcc_builder_end_table@@Base>
   13c20:	add	r4, r7, #1
   13c24:	mov	r1, r0
   13c28:	mov	r0, r9
   13c2c:	bl	150cc <flatcc_builder_end_buffer@@Base>
   13c30:	sub	r3, r5, r4
   13c34:	cmp	r3, #1
   13c38:	ble	13c4c <test@@Base+0x14dc>
   13c3c:	ldrb	r3, [r7, #1]
   13c40:	cmp	r3, #32
   13c44:	bhi	13c60 <test@@Base+0x14f0>
   13c48:	beq	14010 <test@@Base+0x18a0>
   13c4c:	mov	r1, r4
   13c50:	mov	r0, r8
   13c54:	mov	r2, r5
   13c58:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   13c5c:	mov	r4, r0
   13c60:	cmp	r5, r4
   13c64:	ldr	r3, [pc, #-1600]	; 1362c <test@@Base+0xebc>
   13c68:	beq	13b08 <test@@Base+0x1398>
   13c6c:	ldr	fp, [fp, r3]
   13c70:	ldr	r0, [pc, #-1628]	; 1361c <test@@Base+0xeac>
   13c74:	mov	r2, #26
   13c78:	mov	r1, #1
   13c7c:	ldr	r3, [fp]
   13c80:	add	r0, pc, r0
   13c84:	bl	12450 <fwrite@plt>
   13c88:	b	12844 <test@@Base+0xd4>
   13c8c:	ldr	fp, [sp, #68]	; 0x44
   13c90:	ldr	r3, [pc, #-1644]	; 1362c <test@@Base+0xebc>
   13c94:	ldr	r0, [pc, #-1668]	; 13618 <test@@Base+0xea8>
   13c98:	mov	r2, #13
   13c9c:	ldr	fp, [fp, r3]
   13ca0:	mov	r1, #1
   13ca4:	add	r0, pc, r0
   13ca8:	ldr	r3, [fp]
   13cac:	ldr	sl, [sp, #64]	; 0x40
   13cb0:	bl	12450 <fwrite@plt>
   13cb4:	b	12844 <test@@Base+0xd4>
   13cb8:	cmp	r3, #46	; 0x2e
   13cbc:	mov	r1, r5
   13cc0:	bne	13534 <test@@Base+0xdc4>
   13cc4:	mov	r3, #5
   13cc8:	mov	r2, r5
   13ccc:	mov	r0, r8
   13cd0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13cd4:	mov	r1, r0
   13cd8:	b	13518 <test@@Base+0xda8>
   13cdc:	ldr	fp, [sp, #68]	; 0x44
   13ce0:	ldr	r3, [pc, #-1724]	; 1362c <test@@Base+0xebc>
   13ce4:	ldr	r0, [pc, #-1752]	; 13614 <test@@Base+0xea4>
   13ce8:	mov	r2, #13
   13cec:	ldr	fp, [fp, r3]
   13cf0:	mov	r1, #1
   13cf4:	add	r0, pc, r0
   13cf8:	ldr	r3, [fp]
   13cfc:	ldr	sl, [sp, #64]	; 0x40
   13d00:	mov	r4, r5
   13d04:	bl	12450 <fwrite@plt>
   13d08:	b	12844 <test@@Base+0xd4>
   13d0c:	mov	r6, r1
   13d10:	ldr	r1, [pc, #-1800]	; 13610 <test@@Base+0xea0>
   13d14:	ldr	sl, [sp, #64]	; 0x40
   13d18:	ldr	fp, [sp, #68]	; 0x44
   13d1c:	ldr	r3, [pc, #-1784]	; 1362c <test@@Base+0xebc>
   13d20:	mov	r2, #58	; 0x3a
   13d24:	add	r1, pc, r1
   13d28:	b	12820 <test@@Base+0xb0>
   13d2c:	ldr	fp, [sp, #68]	; 0x44
   13d30:	ldr	r3, [pc, #-1804]	; 1362c <test@@Base+0xebc>
   13d34:	ldr	r0, [pc, #-1840]	; 1360c <test@@Base+0xe9c>
   13d38:	mov	r2, #13
   13d3c:	ldr	fp, [fp, r3]
   13d40:	mov	r1, #1
   13d44:	add	r0, pc, r0
   13d48:	ldr	r3, [fp]
   13d4c:	ldr	sl, [sp, #64]	; 0x40
   13d50:	bl	12450 <fwrite@plt>
   13d54:	b	12844 <test@@Base+0xd4>
   13d58:	ldrb	r3, [r1, #1]
   13d5c:	cmp	r3, #32
   13d60:	addhi	r1, r1, #1
   13d64:	bls	139ac <test@@Base+0x123c>
   13d68:	b	139bc <test@@Base+0x124c>
   13d6c:	ldrb	r3, [r1, #1]
   13d70:	cmp	r3, #32
   13d74:	addhi	r1, r1, #1
   13d78:	bls	13834 <test@@Base+0x10c4>
   13d7c:	b	13844 <test@@Base+0x10d4>
   13d80:	ldrb	r3, [r1, #2]
   13d84:	cmp	r3, #32
   13d88:	addhi	r4, r1, #2
   13d8c:	bls	139f4 <test@@Base+0x1284>
   13d90:	b	13a08 <test@@Base+0x1298>
   13d94:	ldrb	r3, [r1, #2]
   13d98:	cmp	r3, #32
   13d9c:	addhi	r4, r1, #2
   13da0:	bls	1387c <test@@Base+0x110c>
   13da4:	b	13890 <test@@Base+0x1120>
   13da8:	cmp	r3, #46	; 0x2e
   13dac:	beq	13754 <test@@Base+0xfe4>
   13db0:	b	12fd8 <test@@Base+0x868>
   13db4:	cmp	r3, #46	; 0x2e
   13db8:	mov	r1, r5
   13dbc:	bne	139ac <test@@Base+0x123c>
   13dc0:	mov	r3, #5
   13dc4:	mov	r2, r5
   13dc8:	mov	r0, r8
   13dcc:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13dd0:	mov	r1, r0
   13dd4:	b	13990 <test@@Base+0x1220>
   13dd8:	cmp	r3, #46	; 0x2e
   13ddc:	mov	r1, r5
   13de0:	bne	13834 <test@@Base+0x10c4>
   13de4:	mov	r3, #5
   13de8:	mov	r2, r5
   13dec:	mov	r0, r8
   13df0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   13df4:	mov	r1, r0
   13df8:	b	13818 <test@@Base+0x10a8>
   13dfc:	ldr	fp, [sp, #68]	; 0x44
   13e00:	ldr	r3, [pc, #-2012]	; 1362c <test@@Base+0xebc>
   13e04:	ldr	r0, [pc, #-2052]	; 13608 <test@@Base+0xe98>
   13e08:	mov	r2, #13
   13e0c:	ldr	fp, [fp, r3]
   13e10:	mov	r1, #1
   13e14:	add	r0, pc, r0
   13e18:	ldr	r3, [fp]
   13e1c:	ldr	sl, [sp, #64]	; 0x40
   13e20:	bl	12450 <fwrite@plt>
   13e24:	b	12844 <test@@Base+0xd4>
   13e28:	ldr	fp, [sp, #68]	; 0x44
   13e2c:	ldr	r3, [pc, #-2056]	; 1362c <test@@Base+0xebc>
   13e30:	ldr	r0, [pc, #-2100]	; 13604 <test@@Base+0xe94>
   13e34:	mov	r2, #13
   13e38:	ldr	fp, [fp, r3]
   13e3c:	mov	r1, #1
   13e40:	add	r0, pc, r0
   13e44:	ldr	r3, [fp]
   13e48:	ldr	sl, [sp, #64]	; 0x40
   13e4c:	mov	r4, r5
   13e50:	bl	12450 <fwrite@plt>
   13e54:	b	12844 <test@@Base+0xd4>
   13e58:	mov	r6, r1
   13e5c:	ldr	r1, [pc, #-2148]	; 13600 <test@@Base+0xe90>
   13e60:	ldr	sl, [sp, #64]	; 0x40
   13e64:	ldr	fp, [sp, #68]	; 0x44
   13e68:	ldr	r3, [pc, #-2116]	; 1362c <test@@Base+0xebc>
   13e6c:	mov	r2, #58	; 0x3a
   13e70:	add	r1, pc, r1
   13e74:	b	12820 <test@@Base+0xb0>
   13e78:	cmp	r3, #46	; 0x2e
   13e7c:	beq	13acc <test@@Base+0x135c>
   13e80:	b	12dec <test@@Base+0x67c>
   13e84:	ldr	fp, [sp, #68]	; 0x44
   13e88:	ldr	r3, [pc, #-2148]	; 1362c <test@@Base+0xebc>
   13e8c:	ldr	r0, [pc, #-2200]	; 135fc <test@@Base+0xe8c>
   13e90:	mov	r2, #13
   13e94:	ldr	fp, [fp, r3]
   13e98:	mov	r1, #1
   13e9c:	add	r0, pc, r0
   13ea0:	ldr	r3, [fp]
   13ea4:	ldr	sl, [sp, #64]	; 0x40
   13ea8:	mov	r4, r5
   13eac:	bl	12450 <fwrite@plt>
   13eb0:	b	12844 <test@@Base+0xd4>
   13eb4:	ldr	fp, [sp, #68]	; 0x44
   13eb8:	ldr	r3, [pc, #-2196]	; 1362c <test@@Base+0xebc>
   13ebc:	ldr	r0, [pc, #-2252]	; 135f8 <test@@Base+0xe88>
   13ec0:	mov	r2, #13
   13ec4:	ldr	fp, [fp, r3]
   13ec8:	mov	r1, #1
   13ecc:	add	r0, pc, r0
   13ed0:	ldr	r3, [fp]
   13ed4:	ldr	sl, [sp, #64]	; 0x40
   13ed8:	bl	12450 <fwrite@plt>
   13edc:	b	12844 <test@@Base+0xd4>
   13ee0:	mov	r6, r1
   13ee4:	ldr	r1, [pc, #-2296]	; 135f4 <test@@Base+0xe84>
   13ee8:	ldr	sl, [sp, #64]	; 0x40
   13eec:	ldr	fp, [sp, #68]	; 0x44
   13ef0:	ldr	r3, [pc, #-2252]	; 1362c <test@@Base+0xebc>
   13ef4:	mov	r2, #58	; 0x3a
   13ef8:	add	r1, pc, r1
   13efc:	b	12820 <test@@Base+0xb0>
   13f00:	mov	r6, r1
   13f04:	ldr	r1, [pc, #-2332]	; 135f0 <test@@Base+0xe80>
   13f08:	ldr	sl, [sp, #64]	; 0x40
   13f0c:	ldr	fp, [sp, #68]	; 0x44
   13f10:	ldr	r3, [pc, #-2284]	; 1362c <test@@Base+0xebc>
   13f14:	mov	r2, #58	; 0x3a
   13f18:	add	r1, pc, r1
   13f1c:	b	12820 <test@@Base+0xb0>
   13f20:	ldr	sl, [sp, #64]	; 0x40
   13f24:	ldr	fp, [sp, #68]	; 0x44
   13f28:	mov	r2, r5
   13f2c:	mov	r1, ip
   13f30:	b	13af4 <test@@Base+0x1384>
   13f34:	cmp	r3, #46	; 0x2e
   13f38:	beq	13cc4 <test@@Base+0x1554>
   13f3c:	b	13518 <test@@Base+0xda8>
   13f40:	ldr	fp, [sp, #68]	; 0x44
   13f44:	ldr	r3, [pc, #-2336]	; 1362c <test@@Base+0xebc>
   13f48:	ldr	r0, [pc, #-2404]	; 135ec <test@@Base+0xe7c>
   13f4c:	mov	r2, #13
   13f50:	ldr	fp, [fp, r3]
   13f54:	mov	r1, #1
   13f58:	add	r0, pc, r0
   13f5c:	ldr	r3, [fp]
   13f60:	ldr	sl, [sp, #64]	; 0x40
   13f64:	mov	r4, r5
   13f68:	bl	12450 <fwrite@plt>
   13f6c:	b	12844 <test@@Base+0xd4>
   13f70:	ldr	fp, [sp, #68]	; 0x44
   13f74:	ldr	r3, [pc, #-2384]	; 1362c <test@@Base+0xebc>
   13f78:	ldr	r0, [pc, #-2456]	; 135e8 <test@@Base+0xe78>
   13f7c:	mov	r2, #13
   13f80:	ldr	fp, [fp, r3]
   13f84:	mov	r1, #1
   13f88:	add	r0, pc, r0
   13f8c:	ldr	r3, [fp]
   13f90:	ldr	sl, [sp, #64]	; 0x40
   13f94:	mov	r4, r5
   13f98:	bl	12450 <fwrite@plt>
   13f9c:	b	12844 <test@@Base+0xd4>
   13fa0:	ldr	fp, [sp, #68]	; 0x44
   13fa4:	ldr	r3, [pc, #-2432]	; 1362c <test@@Base+0xebc>
   13fa8:	ldr	r0, [pc, #-2508]	; 135e4 <test@@Base+0xe74>
   13fac:	mov	r2, #13
   13fb0:	ldr	fp, [fp, r3]
   13fb4:	mov	r1, #1
   13fb8:	add	r0, pc, r0
   13fbc:	ldr	r3, [fp]
   13fc0:	ldr	sl, [sp, #64]	; 0x40
   13fc4:	bl	12450 <fwrite@plt>
   13fc8:	b	12844 <test@@Base+0xd4>
   13fcc:	ldr	fp, [sp, #68]	; 0x44
   13fd0:	ldr	r3, [pc, #-2476]	; 1362c <test@@Base+0xebc>
   13fd4:	ldr	r0, [pc, #-2556]	; 135e0 <test@@Base+0xe70>
   13fd8:	mov	r2, #13
   13fdc:	ldr	fp, [fp, r3]
   13fe0:	mov	r1, #1
   13fe4:	add	r0, pc, r0
   13fe8:	ldr	r3, [fp]
   13fec:	ldr	sl, [sp, #64]	; 0x40
   13ff0:	bl	12450 <fwrite@plt>
   13ff4:	b	12844 <test@@Base+0xd4>
   13ff8:	cmp	r3, #46	; 0x2e
   13ffc:	beq	13de4 <test@@Base+0x1674>
   14000:	b	13818 <test@@Base+0x10a8>
   14004:	cmp	r3, #46	; 0x2e
   14008:	beq	13dc0 <test@@Base+0x1650>
   1400c:	b	13990 <test@@Base+0x1220>
   14010:	ldrb	r3, [r7, #2]
   14014:	cmp	r3, #32
   14018:	addhi	r4, r7, #2
   1401c:	bls	13c4c <test@@Base+0x14dc>
   14020:	b	13c60 <test@@Base+0x14f0>
   14024:	push	{r4, r5, r6, lr}
   14028:	mov	r4, r0
   1402c:	ldr	ip, [r0, #28]
   14030:	sub	sp, sp, #8
   14034:	mov	r3, #1
   14038:	ldr	r0, [r0, #40]	; 0x28
   1403c:	ldr	r6, [r4, #48]	; 0x30
   14040:	mov	r5, r2
   14044:	str	r3, [sp]
   14048:	add	r2, r1, ip
   1404c:	add	r1, r4, #60	; 0x3c
   14050:	blx	r6
   14054:	cmp	r0, #0
   14058:	bne	14090 <test@@Base+0x1920>
   1405c:	ldr	r1, [r4, #28]
   14060:	ldr	r3, [r4, #64]	; 0x40
   14064:	ldr	r2, [r4, #60]	; 0x3c
   14068:	sub	r3, r3, r1
   1406c:	ldr	ip, [r4, #32]
   14070:	cmp	r3, r5
   14074:	movcs	r3, r5
   14078:	add	r2, r2, r1
   1407c:	str	r3, [r4, #24]
   14080:	str	r2, [r4, #16]
   14084:	str	r5, [ip, #4]
   14088:	add	sp, sp, #8
   1408c:	pop	{r4, r5, r6, pc}
   14090:	mvn	r0, #0
   14094:	b	14088 <test@@Base+0x1918>

00014098 <flatcc_builder_default_alloc@@Base>:
   14098:	push	{r4, r5, r6, r7, r8, lr}
   1409c:	subs	r5, r2, #0
   140a0:	mov	r6, r1
   140a4:	bne	140c8 <flatcc_builder_default_alloc@@Base+0x30>
   140a8:	ldr	r0, [r1]
   140ac:	cmp	r0, #0
   140b0:	popeq	{r4, r5, r6, r7, r8, pc}
   140b4:	bl	12420 <free@plt>
   140b8:	str	r5, [r6]
   140bc:	str	r5, [r6, #4]
   140c0:	mov	r0, r5
   140c4:	pop	{r4, r5, r6, r7, r8, pc}
   140c8:	mov	r7, r3
   140cc:	ldr	r3, [sp, #24]
   140d0:	sub	r2, r3, #1
   140d4:	cmp	r2, #6
   140d8:	addls	pc, pc, r2, lsl #2
   140dc:	b	14178 <flatcc_builder_default_alloc@@Base+0xe0>
   140e0:	b	1414c <flatcc_builder_default_alloc@@Base+0xb4>
   140e4:	b	14178 <flatcc_builder_default_alloc@@Base+0xe0>
   140e8:	b	14178 <flatcc_builder_default_alloc@@Base+0xe0>
   140ec:	b	14170 <flatcc_builder_default_alloc@@Base+0xd8>
   140f0:	b	140fc <flatcc_builder_default_alloc@@Base+0x64>
   140f4:	b	14178 <flatcc_builder_default_alloc@@Base+0xe0>
   140f8:	b	14168 <flatcc_builder_default_alloc@@Base+0xd0>
   140fc:	mov	r4, r5
   14100:	ldr	r3, [r6, #4]
   14104:	cmp	r5, r3
   14108:	bhi	14114 <flatcc_builder_default_alloc@@Base+0x7c>
   1410c:	cmp	r4, r3, lsr #1
   14110:	bls	14180 <flatcc_builder_default_alloc@@Base+0xe8>
   14114:	mov	r1, r4
   14118:	ldr	r0, [r6]
   1411c:	bl	12444 <realloc@plt>
   14120:	subs	r5, r0, #0
   14124:	beq	1419c <flatcc_builder_default_alloc@@Base+0x104>
   14128:	cmp	r7, #0
   1412c:	beq	1413c <flatcc_builder_default_alloc@@Base+0xa4>
   14130:	ldr	r0, [r6, #4]
   14134:	cmp	r0, r4
   14138:	bcc	14188 <flatcc_builder_default_alloc@@Base+0xf0>
   1413c:	str	r5, [r6]
   14140:	str	r4, [r6, #4]
   14144:	mov	r0, #0
   14148:	pop	{r4, r5, r6, r7, r8, pc}
   1414c:	mov	r4, #256	; 0x100
   14150:	cmp	r5, r4
   14154:	bls	14100 <flatcc_builder_default_alloc@@Base+0x68>
   14158:	lsl	r4, r4, #1
   1415c:	cmp	r5, r4
   14160:	bhi	14158 <flatcc_builder_default_alloc@@Base+0xc0>
   14164:	b	14100 <flatcc_builder_default_alloc@@Base+0x68>
   14168:	mov	r4, #64	; 0x40
   1416c:	b	14150 <flatcc_builder_default_alloc@@Base+0xb8>
   14170:	mov	r4, #288	; 0x120
   14174:	b	14150 <flatcc_builder_default_alloc@@Base+0xb8>
   14178:	mov	r4, #32
   1417c:	b	14150 <flatcc_builder_default_alloc@@Base+0xb8>
   14180:	mov	r0, #0
   14184:	pop	{r4, r5, r6, r7, r8, pc}
   14188:	sub	r2, r4, r0
   1418c:	mov	r1, #0
   14190:	add	r0, r5, r0
   14194:	bl	124a4 <memset@plt>
   14198:	b	1413c <flatcc_builder_default_alloc@@Base+0xa4>
   1419c:	mvn	r0, #0
   141a0:	pop	{r4, r5, r6, r7, r8, pc}
   141a4:	push	{r4, r5, lr}
   141a8:	cmp	r2, #0
   141ac:	ldr	lr, [pc, #248]	; 142ac <flatcc_builder_default_alloc@@Base+0x214>
   141b0:	sub	sp, sp, #84	; 0x54
   141b4:	mov	ip, r0
   141b8:	add	lr, pc, lr
   141bc:	bne	141cc <flatcc_builder_default_alloc@@Base+0x134>
   141c0:	ldrh	r2, [r0, #132]	; 0x84
   141c4:	cmp	r2, #0
   141c8:	moveq	r2, #1
   141cc:	ldrh	r0, [r1]
   141d0:	cmp	r0, #3
   141d4:	movls	r4, #4
   141d8:	movls	r0, r4
   141dc:	strhls	r4, [r1]
   141e0:	cmp	r2, r0
   141e4:	strhhi	r2, [r1]
   141e8:	cmp	r3, #0
   141ec:	bne	14200 <flatcc_builder_default_alloc@@Base+0x168>
   141f0:	ldr	r4, [ip, #140]	; 0x8c
   141f4:	sub	r2, r2, #1
   141f8:	ands	r3, r2, r4
   141fc:	bne	1420c <flatcc_builder_default_alloc@@Base+0x174>
   14200:	mov	r0, #0
   14204:	add	sp, sp, #84	; 0x54
   14208:	pop	{r4, r5, pc}
   1420c:	ldr	r2, [pc, #156]	; 142b0 <flatcc_builder_default_alloc@@Base+0x218>
   14210:	add	r1, r4, r3
   14214:	str	r3, [sp, #8]
   14218:	ldr	r0, [lr, r2]
   1421c:	cmp	r4, r1
   14220:	mov	r2, #1
   14224:	str	r0, [sp, #16]
   14228:	str	r3, [sp, #20]
   1422c:	str	r1, [ip, #140]	; 0x8c
   14230:	str	r2, [sp, #12]
   14234:	bgt	14284 <flatcc_builder_default_alloc@@Base+0x1ec>
   14238:	ldr	r0, [ip, #36]	; 0x24
   1423c:	add	r1, sp, #16
   14240:	str	r3, [sp]
   14244:	mov	r3, r4
   14248:	ldr	r5, [ip, #44]	; 0x2c
   1424c:	blx	r5
   14250:	cmp	r0, #0
   14254:	bne	14288 <flatcc_builder_default_alloc@@Base+0x1f0>
   14258:	cmn	r4, #1
   1425c:	bne	14200 <flatcc_builder_default_alloc@@Base+0x168>
   14260:	ldr	r3, [pc, #76]	; 142b4 <flatcc_builder_default_alloc@@Base+0x21c>
   14264:	ldr	r1, [pc, #76]	; 142b8 <flatcc_builder_default_alloc@@Base+0x220>
   14268:	ldr	r0, [pc, #76]	; 142bc <flatcc_builder_default_alloc@@Base+0x224>
   1426c:	add	r3, pc, r3
   14270:	ldr	r2, [pc, #72]	; 142c0 <flatcc_builder_default_alloc@@Base+0x228>
   14274:	add	r3, r3, #60	; 0x3c
   14278:	add	r1, pc, r1
   1427c:	add	r0, pc, r0
   14280:	bl	124d4 <__assert_fail@plt>
   14284:	bl	12510 <__assert_fail@plt+0x3c>
   14288:	ldr	r3, [pc, #52]	; 142c4 <flatcc_builder_default_alloc@@Base+0x22c>
   1428c:	ldr	r1, [pc, #52]	; 142c8 <flatcc_builder_default_alloc@@Base+0x230>
   14290:	ldr	r0, [pc, #52]	; 142cc <flatcc_builder_default_alloc@@Base+0x234>
   14294:	add	r3, pc, r3
   14298:	ldr	r2, [pc, #48]	; 142d0 <flatcc_builder_default_alloc@@Base+0x238>
   1429c:	add	r3, r3, #16
   142a0:	add	r1, pc, r1
   142a4:	add	r0, pc, r0
   142a8:	bl	124d4 <__assert_fail@plt>
   142ac:	andeq	sl, r1, r0, asr #28
   142b0:	andeq	r0, r0, r0, asr r0
   142b4:	andeq	r8, r0, r8, lsl #30
   142b8:	andeq	r9, r0, ip, asr #12
   142bc:	ldrdeq	r9, [r0], -r0
   142c0:			; <UNDEFINED> instruction: 0x000002be
   142c4:	andeq	r8, r0, r0, ror #29
   142c8:	andeq	r9, r0, r4, lsr #12
   142cc:	andeq	r9, r0, r8, lsr #13
   142d0:	andeq	r0, r0, r5, lsr #5
   142d4:	push	{r4, r5, r6, r7, lr}
   142d8:	mov	r5, r1
   142dc:	ldr	r1, [r0, #156]	; 0x9c
   142e0:	ldr	r3, [r0, #160]	; 0xa0
   142e4:	add	r2, r1, #1
   142e8:	cmp	r2, r3
   142ec:	sub	sp, sp, #12
   142f0:	mov	r4, r0
   142f4:	str	r2, [r0, #156]	; 0x9c
   142f8:	ble	14368 <flatcc_builder_default_alloc@@Base+0x2d0>
   142fc:	ldr	r3, [r0, #176]	; 0xb0
   14300:	cmp	r3, #0
   14304:	cmpgt	r2, r3
   14308:	movgt	r3, #1
   1430c:	movle	r3, #0
   14310:	bgt	143dc <flatcc_builder_default_alloc@@Base+0x344>
   14314:	add	r1, r1, r1, lsl #3
   14318:	ldr	r0, [r0, #88]	; 0x58
   1431c:	lsl	r6, r1, #2
   14320:	add	r2, r6, #36	; 0x24
   14324:	cmp	r2, r0
   14328:	bhi	143b8 <flatcc_builder_default_alloc@@Base+0x320>
   1432c:	ldr	r3, [r4, #84]	; 0x54
   14330:	add	r3, r3, r6
   14334:	cmp	r3, #0
   14338:	str	r3, [r4, #32]
   1433c:	beq	143dc <flatcc_builder_default_alloc@@Base+0x344>
   14340:	ldr	r2, [r4, #88]	; 0x58
   14344:	ldr	r0, [pc, #152]	; 143e4 <flatcc_builder_default_alloc@@Base+0x34c>
   14348:	ldr	r1, [r4, #176]	; 0xb0
   1434c:	umull	r0, r2, r0, r2
   14350:	lsr	r2, r2, #3
   14354:	cmp	r1, #0
   14358:	cmpgt	r2, r1
   1435c:	str	r2, [r4, #160]	; 0xa0
   14360:	strgt	r1, [r4, #160]	; 0xa0
   14364:	b	14374 <flatcc_builder_default_alloc@@Base+0x2dc>
   14368:	ldr	r3, [r0, #32]
   1436c:	add	r3, r3, #36	; 0x24
   14370:	str	r3, [r0, #32]
   14374:	ldr	r0, [r4, #20]
   14378:	ldr	ip, [r4, #28]
   1437c:	ldrh	lr, [r4, #130]	; 0x82
   14380:	add	r2, r0, ip
   14384:	mov	r1, #0
   14388:	str	r0, [r3, #8]
   1438c:	strh	lr, [r3, #12]
   14390:	add	r2, r2, #7
   14394:	mvn	lr, #3
   14398:	mov	r0, r1
   1439c:	bic	r2, r2, #7
   143a0:	strh	r5, [r4, #130]	; 0x82
   143a4:	stm	r3, {ip, lr}
   143a8:	str	r2, [r4, #28]
   143ac:	str	r1, [r4, #20]
   143b0:	add	sp, sp, #12
   143b4:	pop	{r4, r5, r6, r7, pc}
   143b8:	mov	r1, #4
   143bc:	ldr	r0, [r4, #40]	; 0x28
   143c0:	str	r1, [sp]
   143c4:	add	r1, r4, #84	; 0x54
   143c8:	ldr	r7, [r4, #48]	; 0x30
   143cc:	blx	r7
   143d0:	cmp	r0, #0
   143d4:	beq	1432c <flatcc_builder_default_alloc@@Base+0x294>
   143d8:	bl	124e0 <__assert_fail@plt+0xc>
   143dc:	mvn	r0, #0
   143e0:	b	143b0 <flatcc_builder_default_alloc@@Base+0x318>
   143e4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   143e8:	push	{r4, r5, r6, r7, lr}
   143ec:	mov	r5, r0
   143f0:	ldrh	r0, [r0, #128]	; 0x80
   143f4:	sub	sp, sp, #92	; 0x5c
   143f8:	add	ip, sp, #12
   143fc:	cmp	r0, #3
   14400:	movls	r0, #4
   14404:	strhls	r0, [r5, #128]	; 0x80
   14408:	ldr	r4, [pc, #448]	; 145d0 <flatcc_builder_default_alloc@@Base+0x538>
   1440c:	ldr	r0, [r5, #136]	; 0x88
   14410:	mov	r7, #4
   14414:	mov	r6, #1
   14418:	str	ip, [sp, #24]
   1441c:	lsls	ip, r2, #2
   14420:	add	r4, pc, r4
   14424:	str	r2, [sp, #12]
   14428:	and	lr, r0, #3
   1442c:	str	r7, [sp, #16]
   14430:	str	r7, [sp, #28]
   14434:	str	r6, [sp, #20]
   14438:	beq	14454 <flatcc_builder_default_alloc@@Base+0x3bc>
   1443c:	add	r7, ip, r7
   14440:	mov	r6, #2
   14444:	str	r1, [sp, #32]
   14448:	str	ip, [sp, #36]	; 0x24
   1444c:	str	r7, [sp, #16]
   14450:	str	r6, [sp, #20]
   14454:	cmp	lr, #0
   14458:	beq	14488 <flatcc_builder_default_alloc@@Base+0x3f0>
   1445c:	ldr	ip, [sp, #20]
   14460:	ldr	r6, [pc, #364]	; 145d4 <flatcc_builder_default_alloc@@Base+0x53c>
   14464:	add	ip, ip, #1
   14468:	add	r7, r7, lr
   1446c:	str	r7, [sp, #16]
   14470:	ldr	r6, [r4, r6]
   14474:	add	r4, sp, #88	; 0x58
   14478:	add	r4, r4, ip, lsl #3
   1447c:	str	ip, [sp, #20]
   14480:	str	r6, [r4, #-72]	; 0xffffffb8
   14484:	str	lr, [r4, #-68]	; 0xffffffbc
   14488:	cmp	r2, #0
   1448c:	sub	r4, r0, r7
   14490:	beq	14524 <flatcc_builder_default_alloc@@Base+0x48c>
   14494:	add	r6, r3, r2
   14498:	mvn	ip, #3
   1449c:	mov	r2, r3
   144a0:	b	144d8 <flatcc_builder_default_alloc@@Base+0x440>
   144a4:	sub	r0, ip, r4
   144a8:	add	r0, r0, lr
   144ac:	cmp	r3, #0
   144b0:	str	r0, [r1]
   144b4:	beq	144c4 <flatcc_builder_default_alloc@@Base+0x42c>
   144b8:	ldrb	r0, [r2]
   144bc:	cmp	r0, #0
   144c0:	beq	14584 <flatcc_builder_default_alloc@@Base+0x4ec>
   144c4:	add	r2, r2, #1
   144c8:	cmp	r2, r6
   144cc:	add	r1, r1, #4
   144d0:	sub	ip, ip, #4
   144d4:	beq	1451c <flatcc_builder_default_alloc@@Base+0x484>
   144d8:	ldr	lr, [r1]
   144dc:	cmp	lr, #0
   144e0:	bne	144a4 <flatcc_builder_default_alloc@@Base+0x40c>
   144e4:	cmp	r3, #0
   144e8:	beq	14560 <flatcc_builder_default_alloc@@Base+0x4c8>
   144ec:	ldrb	r0, [r2]
   144f0:	cmp	r0, #0
   144f4:	beq	144c4 <flatcc_builder_default_alloc@@Base+0x42c>
   144f8:	ldr	r3, [pc, #216]	; 145d8 <flatcc_builder_default_alloc@@Base+0x540>
   144fc:	ldr	r1, [pc, #216]	; 145dc <flatcc_builder_default_alloc@@Base+0x544>
   14500:	ldr	r0, [pc, #216]	; 145e0 <flatcc_builder_default_alloc@@Base+0x548>
   14504:	add	r3, pc, r3
   14508:	ldr	r2, [pc, #212]	; 145e4 <flatcc_builder_default_alloc@@Base+0x54c>
   1450c:	add	r3, r3, #76	; 0x4c
   14510:	add	r1, pc, r1
   14514:	add	r0, pc, r0
   14518:	bl	124d4 <__assert_fail@plt>
   1451c:	ldr	r0, [r5, #136]	; 0x88
   14520:	sub	r4, r0, r7
   14524:	cmp	r4, r0
   14528:	bge	145cc <flatcc_builder_default_alloc@@Base+0x534>
   1452c:	ldr	r0, [r5, #36]	; 0x24
   14530:	ldr	r2, [sp, #20]
   14534:	str	r7, [sp]
   14538:	mov	r3, r4
   1453c:	ldr	r6, [r5, #44]	; 0x2c
   14540:	add	r1, sp, #24
   14544:	blx	r6
   14548:	cmp	r0, #0
   1454c:	bne	145a8 <flatcc_builder_default_alloc@@Base+0x510>
   14550:	mov	r0, r4
   14554:	str	r4, [r5, #136]	; 0x88
   14558:	add	sp, sp, #92	; 0x5c
   1455c:	pop	{r4, r5, r6, r7, pc}
   14560:	ldr	r3, [pc, #128]	; 145e8 <flatcc_builder_default_alloc@@Base+0x550>
   14564:	ldr	r1, [pc, #128]	; 145ec <flatcc_builder_default_alloc@@Base+0x554>
   14568:	ldr	r0, [pc, #128]	; 145f0 <flatcc_builder_default_alloc@@Base+0x558>
   1456c:	add	r3, pc, r3
   14570:	ldr	r2, [pc, #124]	; 145f4 <flatcc_builder_default_alloc@@Base+0x55c>
   14574:	add	r3, r3, #76	; 0x4c
   14578:	add	r1, pc, r1
   1457c:	add	r0, pc, r0
   14580:	bl	124d4 <__assert_fail@plt>
   14584:	ldr	r3, [pc, #108]	; 145f8 <flatcc_builder_default_alloc@@Base+0x560>
   14588:	ldr	r1, [pc, #108]	; 145fc <flatcc_builder_default_alloc@@Base+0x564>
   1458c:	ldr	r0, [pc, #108]	; 14600 <flatcc_builder_default_alloc@@Base+0x568>
   14590:	add	r3, pc, r3
   14594:	ldr	r2, [pc, #104]	; 14604 <flatcc_builder_default_alloc@@Base+0x56c>
   14598:	add	r3, r3, #76	; 0x4c
   1459c:	add	r1, pc, r1
   145a0:	add	r0, pc, r0
   145a4:	bl	124d4 <__assert_fail@plt>
   145a8:	ldr	r3, [pc, #88]	; 14608 <flatcc_builder_default_alloc@@Base+0x570>
   145ac:	ldr	r1, [pc, #88]	; 1460c <flatcc_builder_default_alloc@@Base+0x574>
   145b0:	ldr	r0, [pc, #88]	; 14610 <flatcc_builder_default_alloc@@Base+0x578>
   145b4:	add	r3, pc, r3
   145b8:	ldr	r2, [pc, #84]	; 14614 <flatcc_builder_default_alloc@@Base+0x57c>
   145bc:	add	r3, r3, #28
   145c0:	add	r1, pc, r1
   145c4:	add	r0, pc, r0
   145c8:	bl	124d4 <__assert_fail@plt>
   145cc:	bl	12548 <__assert_fail@plt+0x74>
   145d0:	ldrdeq	sl, [r1], -r8
   145d4:	andeq	r0, r0, r0, asr r0
   145d8:	andeq	r8, r0, r0, ror ip
   145dc:			; <UNDEFINED> instruction: 0x000093b4
   145e0:	andeq	r9, r0, ip, lsr r4
   145e4:			; <UNDEFINED> instruction: 0x000005b5
   145e8:	andeq	r8, r0, r8, lsl #24
   145ec:	andeq	r9, r0, ip, asr #6
   145f0:	ldrdeq	r9, [r0], -r0
   145f4:			; <UNDEFINED> instruction: 0x000005b7
   145f8:	andeq	r8, r0, r4, ror #23
   145fc:	andeq	r9, r0, r8, lsr #6
   14600:	andeq	r9, r0, r0, lsr #7
   14604:			; <UNDEFINED> instruction: 0x000005b1
   14608:	andeq	r8, r0, r0, asr #23
   1460c:	andeq	r9, r0, r4, lsl #6
   14610:	andeq	r9, r0, r8, lsl #7
   14614:	andeq	r0, r0, fp, lsl #5

00014618 <flatcc_builder_flush_vtable_cache@@Base>:
   14618:	ldr	r3, [r0, #116]	; 0x74
   1461c:	cmp	r3, #0
   14620:	bxeq	lr
   14624:	ldr	r2, [r0, #96]	; 0x60
   14628:	push	{r4, lr}
   1462c:	mov	r1, #0
   14630:	mov	r4, r0
   14634:	ldr	r0, [r0, #92]	; 0x5c
   14638:	bl	124a4 <memset@plt>
   1463c:	mov	r2, #16
   14640:	mov	r3, #0
   14644:	str	r2, [r4, #124]	; 0x7c
   14648:	str	r3, [r4, #120]	; 0x78
   1464c:	pop	{r4, pc}

00014650 <flatcc_builder_custom_init@@Base>:
   14650:	push	{r4, r5, r6, r7, r8, lr}
   14654:	mov	r6, r1
   14658:	mov	r7, r2
   1465c:	mov	r1, #0
   14660:	mov	r2, #232	; 0xe8
   14664:	mov	r5, r3
   14668:	mov	r4, r0
   1466c:	ldr	r8, [sp, #24]
   14670:	bl	124a4 <memset@plt>
   14674:	ldr	r3, [pc, #76]	; 146c8 <flatcc_builder_custom_init@@Base+0x78>
   14678:	cmp	r6, #0
   1467c:	add	r3, pc, r3
   14680:	beq	146b0 <flatcc_builder_custom_init@@Base+0x60>
   14684:	cmp	r5, #0
   14688:	beq	146a4 <flatcc_builder_custom_init@@Base+0x54>
   1468c:	str	r8, [r4, #40]	; 0x28
   14690:	str	r5, [r4, #48]	; 0x30
   14694:	str	r7, [r4, #36]	; 0x24
   14698:	str	r6, [r4, #44]	; 0x2c
   1469c:	mov	r0, #0
   146a0:	pop	{r4, r5, r6, r7, r8, pc}
   146a4:	ldr	r2, [pc, #32]	; 146cc <flatcc_builder_custom_init@@Base+0x7c>
   146a8:	ldr	r5, [r3, r2]
   146ac:	b	1468c <flatcc_builder_custom_init@@Base+0x3c>
   146b0:	ldr	r2, [pc, #24]	; 146d0 <flatcc_builder_custom_init@@Base+0x80>
   146b4:	mov	r1, #1
   146b8:	str	r1, [r4, #184]	; 0xb8
   146bc:	add	r7, r4, #188	; 0xbc
   146c0:	ldr	r6, [r3, r2]
   146c4:	b	14684 <flatcc_builder_custom_init@@Base+0x34>
   146c8:	andeq	sl, r1, ip, ror r9
   146cc:	andeq	r0, r0, ip, asr r0
   146d0:	andeq	r0, r0, r0, rrx

000146d4 <flatcc_builder_init@@Base>:
   146d4:	push	{lr}		; (str lr, [sp, #-4]!)
   146d8:	sub	sp, sp, #12
   146dc:	mov	r3, #0
   146e0:	str	r3, [sp]
   146e4:	mov	r2, r3
   146e8:	mov	r1, r3
   146ec:	bl	14650 <flatcc_builder_custom_init@@Base>
   146f0:	add	sp, sp, #12
   146f4:	pop	{pc}		; (ldr pc, [sp], #4)

000146f8 <flatcc_builder_custom_reset@@Base>:
   146f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146fc:	add	r7, r0, #52	; 0x34
   14700:	mov	r4, #0
   14704:	sub	sp, sp, #12
   14708:	mov	r5, r0
   1470c:	mov	sl, r1
   14710:	mov	r8, r2
   14714:	mov	r6, r7
   14718:	mov	r9, r4
   1471c:	mov	fp, #1
   14720:	b	14774 <flatcc_builder_custom_reset@@Base+0x7c>
   14724:	cmp	r4, #5
   14728:	cmpne	r8, #0
   1472c:	beq	14758 <flatcc_builder_custom_reset@@Base+0x60>
   14730:	ldr	r0, [r5, #40]	; 0x28
   14734:	mov	r3, fp
   14738:	str	r4, [sp]
   1473c:	mov	r2, #1
   14740:	mov	r1, r6
   14744:	ldr	ip, [r5, #48]	; 0x30
   14748:	blx	ip
   1474c:	cmp	r0, #0
   14750:	bne	14838 <flatcc_builder_custom_reset@@Base+0x140>
   14754:	ldr	r0, [r7, r4, lsl #3]
   14758:	ldr	r2, [r6, #4]
   1475c:	mov	r1, r9
   14760:	bl	124a4 <memset@plt>
   14764:	add	r4, r4, #1
   14768:	cmp	r4, #8
   1476c:	add	r6, r6, #8
   14770:	beq	147b0 <flatcc_builder_custom_reset@@Base+0xb8>
   14774:	ldr	r0, [r7, r4, lsl #3]
   14778:	cmp	r0, #0
   1477c:	bne	14724 <flatcc_builder_custom_reset@@Base+0x2c>
   14780:	ldr	r3, [r6, #4]
   14784:	cmp	r3, #0
   14788:	beq	14764 <flatcc_builder_custom_reset@@Base+0x6c>
   1478c:	ldr	r3, [pc, #172]	; 14840 <flatcc_builder_custom_reset@@Base+0x148>
   14790:	ldr	r1, [pc, #172]	; 14844 <flatcc_builder_custom_reset@@Base+0x14c>
   14794:	ldr	r0, [pc, #172]	; 14848 <flatcc_builder_custom_reset@@Base+0x150>
   14798:	add	r3, pc, r3
   1479c:	ldr	r2, [pc, #168]	; 1484c <flatcc_builder_custom_reset@@Base+0x154>
   147a0:	add	r3, r3, #108	; 0x6c
   147a4:	add	r1, pc, r1
   147a8:	add	r0, pc, r0
   147ac:	bl	124d4 <__assert_fail@plt>
   147b0:	ldr	r2, [r5, #124]	; 0x7c
   147b4:	mov	r3, #0
   147b8:	ldr	r0, [r5, #60]	; 0x3c
   147bc:	cmp	r2, r3
   147c0:	str	r3, [r5, #120]	; 0x78
   147c4:	ldr	r1, [r5, #76]	; 0x4c
   147c8:	movne	r3, #16
   147cc:	ldr	r2, [r5, #52]	; 0x34
   147d0:	str	r0, [r5, #16]
   147d4:	ldr	r0, [r5, #184]	; 0xb8
   147d8:	strne	r3, [r5, #124]	; 0x7c
   147dc:	mov	r3, #0
   147e0:	cmp	sl, #0
   147e4:	strne	r3, [r5, #172]	; 0xac
   147e8:	strne	r3, [r5, #176]	; 0xb0
   147ec:	strne	r3, [r5, #180]	; 0xb4
   147f0:	cmp	r0, #0
   147f4:	stm	r5, {r1, r2}
   147f8:	strh	r3, [r5, #128]	; 0x80
   147fc:	str	r3, [r5, #136]	; 0x88
   14800:	str	r3, [r5, #140]	; 0x8c
   14804:	str	r3, [r5, #156]	; 0x9c
   14808:	str	r3, [r5, #160]	; 0xa0
   1480c:	str	r3, [r5, #20]
   14810:	str	r3, [r5, #24]
   14814:	str	r3, [r5, #148]	; 0x94
   14818:	str	r3, [r5, #152]	; 0x98
   1481c:	str	r3, [r5, #32]
   14820:	beq	14830 <flatcc_builder_custom_reset@@Base+0x138>
   14824:	add	r0, r5, #188	; 0xbc
   14828:	bl	182d4 <flatcc_emitter_reset@@Base>
   1482c:	mov	r0, #0
   14830:	add	sp, sp, #12
   14834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14838:	mvn	r0, #0
   1483c:	b	14830 <flatcc_builder_custom_reset@@Base+0x138>
   14840:	ldrdeq	r8, [r0], -ip
   14844:	andeq	r9, r0, r0, lsr #2
   14848:			; <UNDEFINED> instruction: 0x000091b8
   1484c:			; <UNDEFINED> instruction: 0x000001b2

00014850 <flatcc_builder_reset@@Base>:
   14850:	mov	r2, #0
   14854:	mov	r1, r2
   14858:	b	146f8 <flatcc_builder_custom_reset@@Base>

0001485c <flatcc_builder_clear@@Base>:
   1485c:	push	{r4, r5, r6, r7, r8, lr}
   14860:	mov	r4, #0
   14864:	sub	sp, sp, #8
   14868:	mov	r6, r0
   1486c:	add	r5, r0, #52	; 0x34
   14870:	mov	r8, r4
   14874:	ldr	r0, [r6, #40]	; 0x28
   14878:	mov	r1, r5
   1487c:	str	r4, [sp]
   14880:	mov	r3, r8
   14884:	add	r4, r4, #1
   14888:	ldr	r7, [r6, #48]	; 0x30
   1488c:	mov	r2, #0
   14890:	blx	r7
   14894:	cmp	r4, #8
   14898:	add	r5, r5, #8
   1489c:	bne	14874 <flatcc_builder_clear@@Base+0x18>
   148a0:	ldr	r3, [r6, #184]	; 0xb8
   148a4:	cmp	r3, #0
   148a8:	beq	148b4 <flatcc_builder_clear@@Base+0x58>
   148ac:	add	r0, r6, #188	; 0xbc
   148b0:	bl	18390 <flatcc_emitter_clear@@Base>
   148b4:	mov	r0, r6
   148b8:	mov	r2, #232	; 0xe8
   148bc:	mov	r1, #0
   148c0:	add	sp, sp, #8
   148c4:	pop	{r4, r5, r6, r7, r8, lr}
   148c8:	b	124a4 <memset@plt>

000148cc <flatcc_builder_enter_user_frame_ptr@@Base>:
   148cc:	push	{r4, r5, r6, r7, r8, lr}
   148d0:	add	r4, r1, #3
   148d4:	bic	r4, r4, #3
   148d8:	ldr	r7, [r0, #228]	; 0xe4
   148dc:	add	r4, r4, #4
   148e0:	ldr	r3, [r0, #112]	; 0x70
   148e4:	add	r2, r4, r7
   148e8:	cmp	r2, r3
   148ec:	sub	sp, sp, #8
   148f0:	mov	r6, r0
   148f4:	bhi	1493c <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   148f8:	ldr	r8, [r6, #108]	; 0x6c
   148fc:	adds	r5, r8, r7
   14900:	beq	14964 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   14904:	mov	r2, r4
   14908:	mov	r1, #0
   1490c:	mov	r0, r5
   14910:	bl	124a4 <memset@plt>
   14914:	ldr	r3, [r6, #224]	; 0xe0
   14918:	add	r0, r5, #4
   1491c:	str	r3, [r8, r7]
   14920:	ldr	r3, [r6, #228]	; 0xe4
   14924:	add	r4, r4, r3
   14928:	add	r3, r3, #4
   1492c:	str	r4, [r6, #228]	; 0xe4
   14930:	str	r3, [r6, #224]	; 0xe0
   14934:	add	sp, sp, #8
   14938:	pop	{r4, r5, r6, r7, r8, pc}
   1493c:	mov	r3, #7
   14940:	ldr	r0, [r0, #40]	; 0x28
   14944:	add	r1, r6, #108	; 0x6c
   14948:	str	r3, [sp]
   1494c:	mov	r3, #0
   14950:	ldr	r5, [r6, #48]	; 0x30
   14954:	blx	r5
   14958:	cmp	r0, #0
   1495c:	beq	148f8 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   14960:	bl	124e0 <__assert_fail@plt+0xc>
   14964:	mov	r0, r5
   14968:	b	14934 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

0001496c <flatcc_builder_enter_user_frame@@Base>:
   1496c:	push	{r4, r5, r6, r7, lr}
   14970:	add	r4, r1, #3
   14974:	bic	r4, r4, #3
   14978:	ldr	r6, [r0, #228]	; 0xe4
   1497c:	add	r4, r4, #4
   14980:	ldr	r3, [r0, #112]	; 0x70
   14984:	add	r2, r4, r6
   14988:	cmp	r2, r3
   1498c:	sub	sp, sp, #12
   14990:	mov	r5, r0
   14994:	bhi	149d4 <flatcc_builder_enter_user_frame@@Base+0x68>
   14998:	ldr	r7, [r5, #108]	; 0x6c
   1499c:	adds	r0, r7, r6
   149a0:	beq	149cc <flatcc_builder_enter_user_frame@@Base+0x60>
   149a4:	mov	r2, r4
   149a8:	mov	r1, #0
   149ac:	bl	124a4 <memset@plt>
   149b0:	ldr	r3, [r5, #224]	; 0xe0
   149b4:	str	r3, [r7, r6]
   149b8:	ldr	r0, [r5, #228]	; 0xe4
   149bc:	add	r4, r4, r0
   149c0:	add	r0, r0, #4
   149c4:	str	r4, [r5, #228]	; 0xe4
   149c8:	str	r0, [r5, #224]	; 0xe0
   149cc:	add	sp, sp, #12
   149d0:	pop	{r4, r5, r6, r7, pc}
   149d4:	mov	r3, #7
   149d8:	ldr	r0, [r0, #40]	; 0x28
   149dc:	add	r1, r5, #108	; 0x6c
   149e0:	str	r3, [sp]
   149e4:	mov	r3, #0
   149e8:	ldr	r7, [r5, #48]	; 0x30
   149ec:	blx	r7
   149f0:	cmp	r0, #0
   149f4:	beq	14998 <flatcc_builder_enter_user_frame@@Base+0x2c>
   149f8:	bl	124e0 <__assert_fail@plt+0xc>

000149fc <flatcc_builder_exit_user_frame@@Base>:
   149fc:	ldr	r3, [r0, #224]	; 0xe0
   14a00:	cmp	r3, #0
   14a04:	beq	14a28 <flatcc_builder_exit_user_frame@@Base+0x2c>
   14a08:	ldr	r2, [r0, #108]	; 0x6c
   14a0c:	sub	r1, r3, #4
   14a10:	add	r3, r2, r3
   14a14:	str	r1, [r0, #228]	; 0xe4
   14a18:	ldr	r3, [r3, #-4]
   14a1c:	str	r3, [r0, #224]	; 0xe0
   14a20:	mov	r0, r3
   14a24:	bx	lr
   14a28:	ldr	r3, [pc, #32]	; 14a50 <flatcc_builder_exit_user_frame@@Base+0x54>
   14a2c:	ldr	r1, [pc, #32]	; 14a54 <flatcc_builder_exit_user_frame@@Base+0x58>
   14a30:	ldr	r0, [pc, #32]	; 14a58 <flatcc_builder_exit_user_frame@@Base+0x5c>
   14a34:	add	r3, pc, r3
   14a38:	push	{r4, lr}
   14a3c:	add	r3, r3, #136	; 0x88
   14a40:	ldr	r2, [pc, #20]	; 14a5c <flatcc_builder_exit_user_frame@@Base+0x60>
   14a44:	add	r1, pc, r1
   14a48:	add	r0, pc, r0
   14a4c:	bl	124d4 <__assert_fail@plt>
   14a50:	andeq	r8, r0, r0, asr #14
   14a54:	andeq	r8, r0, r0, lsl #29
   14a58:	andeq	r8, r0, ip, lsr #30
   14a5c:	andeq	r0, r0, lr, lsl r2

00014a60 <flatcc_builder_exit_user_frame_at@@Base>:
   14a60:	ldr	r2, [r0, #224]	; 0xe0
   14a64:	cmp	r2, r1
   14a68:	bcc	14a74 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   14a6c:	str	r1, [r0, #224]	; 0xe0
   14a70:	b	149fc <flatcc_builder_exit_user_frame@@Base>
   14a74:	ldr	r3, [pc, #32]	; 14a9c <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   14a78:	ldr	r1, [pc, #32]	; 14aa0 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   14a7c:	ldr	r0, [pc, #32]	; 14aa4 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   14a80:	add	r3, pc, r3
   14a84:	push	{r4, lr}
   14a88:	add	r3, r3, #168	; 0xa8
   14a8c:	ldr	r2, [pc, #20]	; 14aa8 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   14a90:	add	r1, pc, r1
   14a94:	add	r0, pc, r0
   14a98:	bl	124d4 <__assert_fail@plt>
   14a9c:	strdeq	r8, [r0], -r4
   14aa0:	andeq	r8, r0, r4, lsr lr
   14aa4:	strdeq	r8, [r0], -ip
   14aa8:	andeq	r0, r0, r7, lsr #4

00014aac <flatcc_builder_get_current_user_frame@@Base>:
   14aac:	ldr	r0, [r0, #224]	; 0xe0
   14ab0:	bx	lr

00014ab4 <flatcc_builder_get_user_frame_ptr@@Base>:
   14ab4:	ldr	r0, [r0, #108]	; 0x6c
   14ab8:	add	r0, r0, r1
   14abc:	bx	lr

00014ac0 <flatcc_builder_embed_buffer@@Base>:
   14ac0:	ldr	ip, [r0, #152]	; 0x98
   14ac4:	push	{r4, r5, r6, lr}
   14ac8:	mov	r5, r3
   14acc:	sub	sp, sp, #88	; 0x58
   14ad0:	adds	r3, ip, #0
   14ad4:	movne	r3, #1
   14ad8:	mov	r6, r2
   14adc:	mov	r2, r1
   14ae0:	add	r1, sp, #104	; 0x68
   14ae4:	mov	r4, r0
   14ae8:	bl	141a4 <flatcc_builder_default_alloc@@Base+0x10c>
   14aec:	ldr	ip, [pc, #324]	; 14c38 <flatcc_builder_embed_buffer@@Base+0x178>
   14af0:	add	ip, pc, ip
   14af4:	cmp	r0, #0
   14af8:	bne	14c00 <flatcc_builder_embed_buffer@@Base+0x140>
   14afc:	ldr	r2, [sp, #108]	; 0x6c
   14b00:	ldr	r1, [r4, #136]	; 0x88
   14b04:	ldrh	r3, [sp, #104]	; 0x68
   14b08:	tst	r2, #2
   14b0c:	moveq	lr, #0
   14b10:	movne	lr, #4
   14b14:	sub	r2, r1, r5
   14b18:	sub	r3, r3, #1
   14b1c:	sub	r2, r2, lr
   14b20:	and	r2, r2, r3
   14b24:	ldr	r3, [r4, #152]	; 0x98
   14b28:	str	r0, [sp, #16]
   14b2c:	str	r0, [sp, #20]
   14b30:	cmp	r3, #0
   14b34:	add	r0, r5, r2
   14b38:	str	r0, [sp, #12]
   14b3c:	beq	14b5c <flatcc_builder_embed_buffer@@Base+0x9c>
   14b40:	mov	r3, #4
   14b44:	mov	lr, #1
   14b48:	add	r0, sp, #12
   14b4c:	str	r3, [sp, #16]
   14b50:	str	r3, [sp, #28]
   14b54:	str	r0, [sp, #24]
   14b58:	str	lr, [sp, #20]
   14b5c:	cmp	r5, #0
   14b60:	beq	14b88 <flatcc_builder_embed_buffer@@Base+0xc8>
   14b64:	ldr	r0, [sp, #20]
   14b68:	add	lr, sp, #88	; 0x58
   14b6c:	add	r0, r0, #1
   14b70:	add	r3, r3, r5
   14b74:	add	lr, lr, r0, lsl #3
   14b78:	str	r3, [sp, #16]
   14b7c:	str	r0, [sp, #20]
   14b80:	str	r6, [lr, #-72]	; 0xffffffb8
   14b84:	str	r5, [lr, #-68]	; 0xffffffbc
   14b88:	cmp	r2, #0
   14b8c:	bne	14bd0 <flatcc_builder_embed_buffer@@Base+0x110>
   14b90:	sub	r5, r1, r3
   14b94:	cmp	r1, r5
   14b98:	ble	14c34 <flatcc_builder_embed_buffer@@Base+0x174>
   14b9c:	ldr	r0, [r4, #36]	; 0x24
   14ba0:	ldr	r2, [sp, #20]
   14ba4:	str	r3, [sp]
   14ba8:	add	r1, sp, #24
   14bac:	ldr	r6, [r4, #44]	; 0x2c
   14bb0:	mov	r3, r5
   14bb4:	blx	r6
   14bb8:	cmp	r0, #0
   14bbc:	streq	r5, [r4, #136]	; 0x88
   14bc0:	bne	14c10 <flatcc_builder_embed_buffer@@Base+0x150>
   14bc4:	mov	r0, r5
   14bc8:	add	sp, sp, #88	; 0x58
   14bcc:	pop	{r4, r5, r6, pc}
   14bd0:	ldr	r0, [sp, #20]
   14bd4:	ldr	lr, [pc, #96]	; 14c3c <flatcc_builder_embed_buffer@@Base+0x17c>
   14bd8:	add	r0, r0, #1
   14bdc:	add	r3, r3, r2
   14be0:	str	r3, [sp, #16]
   14be4:	ldr	lr, [ip, lr]
   14be8:	add	ip, sp, #88	; 0x58
   14bec:	add	ip, ip, r0, lsl #3
   14bf0:	str	r0, [sp, #20]
   14bf4:	str	lr, [ip, #-72]	; 0xffffffb8
   14bf8:	str	r2, [ip, #-68]	; 0xffffffbc
   14bfc:	b	14b90 <flatcc_builder_embed_buffer@@Base+0xd0>
   14c00:	mov	r5, #0
   14c04:	mov	r0, r5
   14c08:	add	sp, sp, #88	; 0x58
   14c0c:	pop	{r4, r5, r6, pc}
   14c10:	ldr	r3, [pc, #40]	; 14c40 <flatcc_builder_embed_buffer@@Base+0x180>
   14c14:	ldr	r1, [pc, #40]	; 14c44 <flatcc_builder_embed_buffer@@Base+0x184>
   14c18:	ldr	r0, [pc, #40]	; 14c48 <flatcc_builder_embed_buffer@@Base+0x188>
   14c1c:	add	r3, pc, r3
   14c20:	ldr	r2, [pc, #36]	; 14c4c <flatcc_builder_embed_buffer@@Base+0x18c>
   14c24:	add	r3, r3, #28
   14c28:	add	r1, pc, r1
   14c2c:	add	r0, pc, r0
   14c30:	bl	124d4 <__assert_fail@plt>
   14c34:	bl	12548 <__assert_fail@plt+0x74>
   14c38:	andeq	sl, r1, r8, lsl #10
   14c3c:	andeq	r0, r0, r0, asr r0
   14c40:	andeq	r8, r0, r8, asr r5
   14c44:	muleq	r0, ip, ip
   14c48:	andeq	r8, r0, r0, lsr #26
   14c4c:	andeq	r0, r0, fp, lsl #5

00014c50 <flatcc_builder_create_buffer@@Base>:
   14c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c54:	sub	sp, sp, #100	; 0x64
   14c58:	mov	r5, #0
   14c5c:	ldr	r8, [sp, #140]	; 0x8c
   14c60:	mov	r9, r1
   14c64:	and	r6, r8, #1
   14c68:	mov	r7, r3
   14c6c:	add	r1, sp, #136	; 0x88
   14c70:	mov	r3, r6
   14c74:	str	r5, [sp, #20]
   14c78:	mov	r4, r0
   14c7c:	bl	141a4 <flatcc_builder_default_alloc@@Base+0x10c>
   14c80:	ldr	lr, [pc, #516]	; 14e8c <flatcc_builder_create_buffer@@Base+0x23c>
   14c84:	add	lr, pc, lr
   14c88:	cmp	r0, r5
   14c8c:	bne	14e20 <flatcc_builder_create_buffer@@Base+0x1d0>
   14c90:	ldrh	r3, [r4, #128]	; 0x80
   14c94:	ldrh	r2, [sp, #136]	; 0x88
   14c98:	uxtb	r5, r6
   14c9c:	cmp	r3, r2
   14ca0:	strhcc	r2, [r4, #128]	; 0x80
   14ca4:	cmp	r9, #0
   14ca8:	sub	r2, r2, #1
   14cac:	ldrne	r3, [r9]
   14cb0:	ldreq	r0, [sp, #20]
   14cb4:	ldrne	r0, [r9]
   14cb8:	strne	r3, [sp, #20]
   14cbc:	cmp	r0, #0
   14cc0:	movne	r0, #4
   14cc4:	moveq	r0, #0
   14cc8:	ands	r3, r8, #2
   14ccc:	ldr	r8, [r4, #136]	; 0x88
   14cd0:	bne	14df0 <flatcc_builder_create_buffer@@Base+0x1a0>
   14cd4:	sub	r1, r8, #4
   14cd8:	cmp	r5, #0
   14cdc:	sub	r1, r1, r0
   14ce0:	and	r2, r2, r1
   14ce4:	moveq	r9, #1
   14ce8:	moveq	ip, #4
   14cec:	bne	14dfc <flatcc_builder_create_buffer@@Base+0x1ac>
   14cf0:	add	r1, r3, #1
   14cf4:	add	sl, sp, #96	; 0x60
   14cf8:	add	r1, sl, r1, lsl #3
   14cfc:	mov	fp, #4
   14d00:	add	sl, sp, #12
   14d04:	cmp	r0, #0
   14d08:	str	ip, [sp, #24]
   14d0c:	str	r9, [sp, #28]
   14d10:	str	sl, [r1, #-72]	; 0xffffffb8
   14d14:	str	fp, [r1, #-68]	; 0xffffffbc
   14d18:	beq	14d44 <flatcc_builder_create_buffer@@Base+0xf4>
   14d1c:	add	r9, r9, #1
   14d20:	add	r1, sp, #96	; 0x60
   14d24:	add	r9, r1, r9, lsl #3
   14d28:	add	r3, r3, #2
   14d2c:	add	ip, ip, r0
   14d30:	str	r3, [sp, #28]
   14d34:	add	r3, sp, #20
   14d38:	str	r0, [r9, #-68]	; 0xffffffbc
   14d3c:	str	ip, [sp, #24]
   14d40:	str	r3, [r9, #-72]	; 0xffffffb8
   14d44:	cmp	r2, #0
   14d48:	beq	14d78 <flatcc_builder_create_buffer@@Base+0x128>
   14d4c:	ldr	r3, [sp, #28]
   14d50:	ldr	r1, [pc, #312]	; 14e90 <flatcc_builder_create_buffer@@Base+0x240>
   14d54:	add	r3, r3, #1
   14d58:	add	ip, ip, r2
   14d5c:	str	ip, [sp, #24]
   14d60:	ldr	r0, [lr, r1]
   14d64:	add	r1, sp, #96	; 0x60
   14d68:	add	r1, r1, r3, lsl #3
   14d6c:	str	r3, [sp, #28]
   14d70:	str	r0, [r1, #-72]	; 0xffffffb8
   14d74:	str	r2, [r1, #-68]	; 0xffffffbc
   14d78:	cmp	r5, #0
   14d7c:	sub	r5, r8, ip
   14d80:	mov	r3, r5
   14d84:	beq	14e30 <flatcc_builder_create_buffer@@Base+0x1e0>
   14d88:	cmp	r6, #0
   14d8c:	add	r3, r5, #4
   14d90:	beq	14e30 <flatcc_builder_create_buffer@@Base+0x1e0>
   14d94:	ldr	r2, [r4, #144]	; 0x90
   14d98:	sub	r2, r2, r3
   14d9c:	str	r2, [sp, #16]
   14da0:	sub	r7, r7, r3
   14da4:	cmp	r5, r8
   14da8:	str	r7, [sp, #12]
   14dac:	mov	r6, r5
   14db0:	bge	14e40 <flatcc_builder_create_buffer@@Base+0x1f0>
   14db4:	ldr	r0, [r4, #36]	; 0x24
   14db8:	ldr	r2, [sp, #28]
   14dbc:	str	ip, [sp]
   14dc0:	mov	r3, r5
   14dc4:	ldr	r7, [r4, #44]	; 0x2c
   14dc8:	add	r1, sp, #32
   14dcc:	blx	r7
   14dd0:	cmp	r0, #0
   14dd4:	bne	14e44 <flatcc_builder_create_buffer@@Base+0x1f4>
   14dd8:	cmp	r5, #0
   14ddc:	str	r5, [r4, #136]	; 0x88
   14de0:	beq	14e68 <flatcc_builder_create_buffer@@Base+0x218>
   14de4:	mov	r0, r6
   14de8:	add	sp, sp, #100	; 0x64
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df0:	sub	r3, r8, #8
   14df4:	sub	r3, r3, r0
   14df8:	and	r2, r2, r3
   14dfc:	mov	ip, #4
   14e00:	mov	r3, #1
   14e04:	add	r1, sp, #16
   14e08:	str	ip, [sp, #36]	; 0x24
   14e0c:	str	r1, [sp, #32]
   14e10:	mov	r5, r3
   14e14:	mov	r9, #2
   14e18:	mov	ip, #8
   14e1c:	b	14cf0 <flatcc_builder_create_buffer@@Base+0xa0>
   14e20:	mov	r6, r5
   14e24:	mov	r0, r6
   14e28:	add	sp, sp, #100	; 0x64
   14e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e30:	ldr	r2, [r4, #140]	; 0x8c
   14e34:	sub	r2, r2, r3
   14e38:	str	r2, [sp, #16]
   14e3c:	b	14da0 <flatcc_builder_create_buffer@@Base+0x150>
   14e40:	bl	12548 <__assert_fail@plt+0x74>
   14e44:	ldr	r3, [pc, #72]	; 14e94 <flatcc_builder_create_buffer@@Base+0x244>
   14e48:	ldr	r1, [pc, #72]	; 14e98 <flatcc_builder_create_buffer@@Base+0x248>
   14e4c:	ldr	r0, [pc, #72]	; 14e9c <flatcc_builder_create_buffer@@Base+0x24c>
   14e50:	add	r3, pc, r3
   14e54:	ldr	r2, [pc, #68]	; 14ea0 <flatcc_builder_create_buffer@@Base+0x250>
   14e58:	add	r3, r3, #28
   14e5c:	add	r1, pc, r1
   14e60:	add	r0, pc, r0
   14e64:	bl	124d4 <__assert_fail@plt>
   14e68:	ldr	r3, [pc, #52]	; 14ea4 <flatcc_builder_create_buffer@@Base+0x254>
   14e6c:	ldr	r1, [pc, #52]	; 14ea8 <flatcc_builder_create_buffer@@Base+0x258>
   14e70:	ldr	r0, [pc, #52]	; 14eac <flatcc_builder_create_buffer@@Base+0x25c>
   14e74:	add	r3, pc, r3
   14e78:	mov	r2, #772	; 0x304
   14e7c:	add	r3, r3, #204	; 0xcc
   14e80:	add	r1, pc, r1
   14e84:	add	r0, pc, r0
   14e88:	bl	124d4 <__assert_fail@plt>
   14e8c:	andeq	sl, r1, r4, ror r3
   14e90:	andeq	r0, r0, r0, asr r0
   14e94:	andeq	r8, r0, r4, lsr #6
   14e98:	andeq	r8, r0, r8, ror #20
   14e9c:	andeq	r8, r0, ip, ror #21
   14ea0:	andeq	r0, r0, fp, lsl #5
   14ea4:	andeq	r8, r0, r0, lsl #6
   14ea8:	andeq	r8, r0, r4, asr #20
   14eac:	andeq	r8, r0, r8, asr #21

00014eb0 <flatcc_builder_create_struct@@Base>:
   14eb0:	push	{r4, r5, r6, lr}
   14eb4:	cmp	r3, #0
   14eb8:	ldr	lr, [pc, #300]	; 14fec <flatcc_builder_create_struct@@Base+0x13c>
   14ebc:	sub	sp, sp, #80	; 0x50
   14ec0:	add	lr, pc, lr
   14ec4:	beq	14fc8 <flatcc_builder_create_struct@@Base+0x118>
   14ec8:	mov	r5, r0
   14ecc:	ldrh	r0, [r0, #128]	; 0x80
   14ed0:	ldr	ip, [r5, #136]	; 0x88
   14ed4:	cmp	r0, r3
   14ed8:	strhcc	r3, [r5, #128]	; 0x80
   14edc:	mov	r0, #0
   14ee0:	sub	r3, r3, #1
   14ee4:	sub	r4, ip, r2
   14ee8:	cmp	r2, #0
   14eec:	and	r3, r3, r4
   14ef0:	str	r0, [sp, #8]
   14ef4:	str	r0, [sp, #12]
   14ef8:	bne	14f78 <flatcc_builder_create_struct@@Base+0xc8>
   14efc:	cmp	r3, #0
   14f00:	movne	r6, #1
   14f04:	movne	r1, r2
   14f08:	beq	14fa0 <flatcc_builder_create_struct@@Base+0xf0>
   14f0c:	ldr	r0, [pc, #220]	; 14ff0 <flatcc_builder_create_struct@@Base+0x140>
   14f10:	add	r1, r1, #1
   14f14:	add	r2, r2, r3
   14f18:	add	r4, sp, #80	; 0x50
   14f1c:	add	r1, r4, r1, lsl #3
   14f20:	str	r2, [sp, #8]
   14f24:	sub	r4, ip, r2
   14f28:	ldr	r0, [lr, r0]
   14f2c:	str	r3, [r1, #-68]	; 0xffffffbc
   14f30:	str	r0, [r1, #-72]	; 0xffffffb8
   14f34:	str	r6, [sp, #12]
   14f38:	cmp	ip, r4
   14f3c:	ble	14fa0 <flatcc_builder_create_struct@@Base+0xf0>
   14f40:	ldr	r3, [sp, #12]
   14f44:	ldr	r0, [r5, #36]	; 0x24
   14f48:	add	r1, sp, #16
   14f4c:	str	r2, [sp]
   14f50:	mov	r2, r3
   14f54:	ldr	r6, [r5, #44]	; 0x2c
   14f58:	mov	r3, r4
   14f5c:	blx	r6
   14f60:	cmp	r0, #0
   14f64:	bne	14fa4 <flatcc_builder_create_struct@@Base+0xf4>
   14f68:	mov	r0, r4
   14f6c:	str	r4, [r5, #136]	; 0x88
   14f70:	add	sp, sp, #80	; 0x50
   14f74:	pop	{r4, r5, r6, pc}
   14f78:	cmp	r3, r0
   14f7c:	mov	r0, #1
   14f80:	str	r1, [sp, #16]
   14f84:	str	r2, [sp, #8]
   14f88:	str	r2, [sp, #20]
   14f8c:	str	r0, [sp, #12]
   14f90:	movne	r1, r0
   14f94:	movne	r6, #2
   14f98:	beq	14f38 <flatcc_builder_create_struct@@Base+0x88>
   14f9c:	b	14f0c <flatcc_builder_create_struct@@Base+0x5c>
   14fa0:	bl	12548 <__assert_fail@plt+0x74>
   14fa4:	ldr	r3, [pc, #72]	; 14ff4 <flatcc_builder_create_struct@@Base+0x144>
   14fa8:	ldr	r1, [pc, #72]	; 14ff8 <flatcc_builder_create_struct@@Base+0x148>
   14fac:	ldr	r0, [pc, #72]	; 14ffc <flatcc_builder_create_struct@@Base+0x14c>
   14fb0:	add	r3, pc, r3
   14fb4:	ldr	r2, [pc, #68]	; 15000 <flatcc_builder_create_struct@@Base+0x150>
   14fb8:	add	r3, r3, #28
   14fbc:	add	r1, pc, r1
   14fc0:	add	r0, pc, r0
   14fc4:	bl	124d4 <__assert_fail@plt>
   14fc8:	ldr	r3, [pc, #52]	; 15004 <flatcc_builder_create_struct@@Base+0x154>
   14fcc:	ldr	r1, [pc, #52]	; 15008 <flatcc_builder_create_struct@@Base+0x158>
   14fd0:	ldr	r0, [pc, #52]	; 1500c <flatcc_builder_create_struct@@Base+0x15c>
   14fd4:	add	r3, pc, r3
   14fd8:	ldr	r2, [pc, #48]	; 15010 <flatcc_builder_create_struct@@Base+0x160>
   14fdc:	add	r3, r3, #236	; 0xec
   14fe0:	add	r1, pc, r1
   14fe4:	add	r0, pc, r0
   14fe8:	bl	124d4 <__assert_fail@plt>
   14fec:	andeq	sl, r1, r8, lsr r1
   14ff0:	andeq	r0, r0, r0, asr r0
   14ff4:	andeq	r8, r0, r4, asr #3
   14ff8:	andeq	r8, r0, r8, lsl #18
   14ffc:	andeq	r8, r0, ip, lsl #19
   15000:	andeq	r0, r0, fp, lsl #5
   15004:	andeq	r8, r0, r0, lsr #3
   15008:	andeq	r8, r0, r4, ror #17
   1500c:	andeq	r8, r0, ip, asr #19
   15010:	andeq	r0, r0, pc, lsl #6

00015014 <flatcc_builder_start_buffer@@Base>:
   15014:	push	{r4, r5, r6, r7, r8, lr}
   15018:	mov	r5, r1
   1501c:	ldrh	r1, [r0, #128]	; 0x80
   15020:	mov	r4, r0
   15024:	mov	r7, r2
   15028:	mov	r6, r3
   1502c:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   15030:	ldr	r1, [pc, #140]	; 150c4 <flatcc_builder_start_buffer@@Base+0xb0>
   15034:	add	r1, pc, r1
   15038:	cmp	r0, #0
   1503c:	bne	150bc <flatcc_builder_start_buffer@@Base+0xa8>
   15040:	ldrh	r3, [r4, #132]	; 0x84
   15044:	ldr	ip, [r4, #32]
   15048:	mov	r2, #1
   1504c:	strh	r2, [r4, #128]	; 0x80
   15050:	strh	r3, [ip, #34]	; 0x22
   15054:	ldrh	r3, [r4, #164]	; 0xa4
   15058:	strh	r7, [r4, #132]	; 0x84
   1505c:	cmp	r5, #0
   15060:	strh	r3, [ip, #32]
   15064:	ldr	r3, [r4, #144]	; 0x90
   15068:	strh	r6, [r4, #164]	; 0xa4
   1506c:	str	r3, [ip, #20]
   15070:	ldr	r3, [r4, #152]	; 0x98
   15074:	str	r3, [ip, #28]
   15078:	ldr	r3, [r4, #148]	; 0x94
   1507c:	ldr	lr, [r4, #136]	; 0x88
   15080:	ldr	r2, [r4, #168]	; 0xa8
   15084:	add	r6, r3, #1
   15088:	str	r3, [r4, #152]	; 0x98
   1508c:	str	r6, [r4, #148]	; 0x94
   15090:	str	lr, [r4, #144]	; 0x90
   15094:	str	r2, [ip, #16]
   15098:	beq	150b0 <flatcc_builder_start_buffer@@Base+0x9c>
   1509c:	ldr	r2, [r5]
   150a0:	mov	r3, #1
   150a4:	str	r2, [r4, #168]	; 0xa8
   150a8:	strh	r3, [ip, #14]
   150ac:	pop	{r4, r5, r6, r7, r8, pc}
   150b0:	ldr	r3, [pc, #16]	; 150c8 <flatcc_builder_start_buffer@@Base+0xb4>
   150b4:	ldr	r5, [r1, r3]
   150b8:	b	1509c <flatcc_builder_start_buffer@@Base+0x88>
   150bc:	mvn	r0, #0
   150c0:	pop	{r4, r5, r6, r7, r8, pc}
   150c4:	andeq	r9, r1, r4, asr #31
   150c8:	andeq	r0, r0, r0, asr r0

000150cc <flatcc_builder_end_buffer@@Base>:
   150cc:	ldr	ip, [r0, #32]
   150d0:	ldrh	r2, [r0, #164]	; 0xa4
   150d4:	push	{r4, r5, r6, lr}
   150d8:	mov	r4, r0
   150dc:	ldrh	ip, [ip, #14]
   150e0:	ldr	r0, [r0, #152]	; 0x98
   150e4:	and	r2, r2, #2
   150e8:	cmp	r0, #0
   150ec:	moveq	r0, r2
   150f0:	orrne	r0, r2, #1
   150f4:	cmp	ip, #1
   150f8:	sub	sp, sp, #8
   150fc:	bne	151dc <flatcc_builder_end_buffer@@Base+0x110>
   15100:	ldrh	r2, [r4, #132]	; 0x84
   15104:	ldrh	ip, [r4, #128]	; 0x80
   15108:	mov	r3, r1
   1510c:	add	r1, r4, #168	; 0xa8
   15110:	cmp	r2, ip
   15114:	movhi	ip, r2
   15118:	strhhi	r2, [r4, #128]	; 0x80
   1511c:	str	r0, [sp, #4]
   15120:	str	ip, [sp]
   15124:	mov	r0, r4
   15128:	bl	14c50 <flatcc_builder_create_buffer@@Base>
   1512c:	subs	r5, r0, #0
   15130:	beq	151d0 <flatcc_builder_end_buffer@@Base+0x104>
   15134:	ldr	r3, [r4, #32]
   15138:	ldr	r2, [r4, #20]
   1513c:	mov	r1, #0
   15140:	ldr	ip, [r3, #20]
   15144:	ldr	r0, [r4, #16]
   15148:	str	ip, [r4, #144]	; 0x90
   1514c:	ldr	ip, [r3, #28]
   15150:	str	ip, [r4, #152]	; 0x98
   15154:	ldr	ip, [r3, #16]
   15158:	str	ip, [r4, #168]	; 0xa8
   1515c:	ldrh	r3, [r3, #32]
   15160:	strh	r3, [r4, #164]	; 0xa4
   15164:	bl	124a4 <memset@plt>
   15168:	ldr	r3, [r4, #32]
   1516c:	ldr	r2, [r4, #64]	; 0x40
   15170:	ldrh	lr, [r4, #130]	; 0x82
   15174:	ldr	ip, [r3]
   15178:	ldr	r1, [r3, #4]
   1517c:	ldrh	r0, [r4, #128]	; 0x80
   15180:	sub	r2, r2, ip
   15184:	cmp	r2, r1
   15188:	movcs	r2, r1
   1518c:	cmp	r0, lr
   15190:	ldr	r0, [r4, #60]	; 0x3c
   15194:	ldr	r6, [r3, #8]
   15198:	str	r2, [r4, #24]
   1519c:	add	r2, r0, ip
   151a0:	str	r2, [r4, #16]
   151a4:	str	r6, [r4, #20]
   151a8:	ldr	r2, [r4, #156]	; 0x9c
   151ac:	str	ip, [r4, #28]
   151b0:	str	r1, [r3, #4]
   151b4:	strhcc	lr, [r4, #128]	; 0x80
   151b8:	ldrh	r1, [r3, #12]
   151bc:	sub	r2, r2, #1
   151c0:	sub	r3, r3, #36	; 0x24
   151c4:	str	r2, [r4, #156]	; 0x9c
   151c8:	strh	r1, [r4, #130]	; 0x82
   151cc:	str	r3, [r4, #32]
   151d0:	mov	r0, r5
   151d4:	add	sp, sp, #8
   151d8:	pop	{r4, r5, r6, pc}
   151dc:	ldr	r3, [pc, #28]	; 15200 <flatcc_builder_end_buffer@@Base+0x134>
   151e0:	ldr	r1, [pc, #28]	; 15204 <flatcc_builder_end_buffer@@Base+0x138>
   151e4:	ldr	r0, [pc, #28]	; 15208 <flatcc_builder_end_buffer@@Base+0x13c>
   151e8:	add	r3, pc, r3
   151ec:	ldr	r2, [pc, #24]	; 1520c <flatcc_builder_end_buffer@@Base+0x140>
   151f0:	add	r3, r3, #268	; 0x10c
   151f4:	add	r1, pc, r1
   151f8:	add	r0, pc, r0
   151fc:	bl	124d4 <__assert_fail@plt>
   15200:	andeq	r7, r0, ip, lsl #31
   15204:	ldrdeq	r8, [r0], -r0
   15208:	andeq	r8, r0, r4, asr #15
   1520c:	andeq	r0, r0, r6, asr #6

00015210 <flatcc_builder_start_struct@@Base>:
   15210:	push	{r4, r5, r6, lr}
   15214:	mov	r5, r1
   15218:	mov	r1, r2
   1521c:	mov	r4, r0
   15220:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   15224:	cmp	r0, #0
   15228:	bne	152a8 <flatcc_builder_start_struct@@Base+0x98>
   1522c:	ldr	r2, [r4, #28]
   15230:	ldr	r3, [r4, #64]	; 0x40
   15234:	ldr	r0, [r4, #60]	; 0x3c
   15238:	ldr	ip, [r4, #32]
   1523c:	sub	r3, r3, r2
   15240:	cmn	r3, #4
   15244:	ldr	r6, [r4, #20]
   15248:	add	r0, r0, r2
   1524c:	mov	r2, #2
   15250:	strh	r2, [ip, #14]
   15254:	mvnhi	r2, #3
   15258:	movhi	r3, r2
   1525c:	add	r5, r5, r6
   15260:	strhi	r2, [r4, #24]
   15264:	strls	r3, [r4, #24]
   15268:	mvn	r2, #3
   1526c:	cmp	r5, r3
   15270:	str	r0, [r4, #16]
   15274:	str	r2, [ip, #4]
   15278:	str	r5, [r4, #20]
   1527c:	bcs	15288 <flatcc_builder_start_struct@@Base+0x78>
   15280:	add	r0, r0, r6
   15284:	pop	{r4, r5, r6, pc}
   15288:	add	r1, r5, #1
   1528c:	mov	r0, r4
   15290:	bl	14024 <test@@Base+0x18b4>
   15294:	cmp	r0, #0
   15298:	bne	152a8 <flatcc_builder_start_struct@@Base+0x98>
   1529c:	ldr	r0, [r4, #16]
   152a0:	add	r0, r0, r6
   152a4:	pop	{r4, r5, r6, pc}
   152a8:	mov	r0, #0
   152ac:	pop	{r4, r5, r6, pc}

000152b0 <flatcc_builder_struct_edit@@Base>:
   152b0:	ldr	r0, [r0, #16]
   152b4:	bx	lr

000152b8 <flatcc_builder_end_struct@@Base>:
   152b8:	ldr	r3, [r0, #32]
   152bc:	push	{r4, r5, r6, lr}
   152c0:	ldrh	r3, [r3, #14]
   152c4:	cmp	r3, #2
   152c8:	bne	15368 <flatcc_builder_end_struct@@Base+0xb0>
   152cc:	ldrh	r3, [r0, #130]	; 0x82
   152d0:	ldr	r2, [r0, #20]
   152d4:	ldr	r1, [r0, #16]
   152d8:	mov	r4, r0
   152dc:	bl	14eb0 <flatcc_builder_create_struct@@Base>
   152e0:	subs	r5, r0, #0
   152e4:	beq	15360 <flatcc_builder_end_struct@@Base+0xa8>
   152e8:	ldr	r2, [r4, #20]
   152ec:	mov	r1, #0
   152f0:	ldr	r0, [r4, #16]
   152f4:	bl	124a4 <memset@plt>
   152f8:	ldr	r3, [r4, #32]
   152fc:	ldr	r2, [r4, #64]	; 0x40
   15300:	ldrh	lr, [r4, #130]	; 0x82
   15304:	ldr	ip, [r3]
   15308:	ldr	r1, [r3, #4]
   1530c:	ldrh	r0, [r4, #128]	; 0x80
   15310:	sub	r2, r2, ip
   15314:	cmp	r2, r1
   15318:	movcs	r2, r1
   1531c:	cmp	r0, lr
   15320:	ldr	r0, [r4, #60]	; 0x3c
   15324:	ldr	r6, [r3, #8]
   15328:	str	r2, [r4, #24]
   1532c:	add	r2, r0, ip
   15330:	str	r2, [r4, #16]
   15334:	str	r6, [r4, #20]
   15338:	ldr	r2, [r4, #156]	; 0x9c
   1533c:	str	ip, [r4, #28]
   15340:	str	r1, [r3, #4]
   15344:	strhcc	lr, [r4, #128]	; 0x80
   15348:	ldrh	r1, [r3, #12]
   1534c:	sub	r2, r2, #1
   15350:	sub	r3, r3, #36	; 0x24
   15354:	str	r2, [r4, #156]	; 0x9c
   15358:	strh	r1, [r4, #130]	; 0x82
   1535c:	str	r3, [r4, #32]
   15360:	mov	r0, r5
   15364:	pop	{r4, r5, r6, pc}
   15368:	ldr	r3, [pc, #28]	; 1538c <flatcc_builder_end_struct@@Base+0xd4>
   1536c:	ldr	r1, [pc, #28]	; 15390 <flatcc_builder_end_struct@@Base+0xd8>
   15370:	ldr	r0, [pc, #28]	; 15394 <flatcc_builder_end_struct@@Base+0xdc>
   15374:	add	r3, pc, r3
   15378:	mov	r2, #872	; 0x368
   1537c:	add	r3, r3, #296	; 0x128
   15380:	add	r1, pc, r1
   15384:	add	r0, pc, r0
   15388:	bl	124d4 <__assert_fail@plt>
   1538c:	andeq	r7, r0, r0, lsl #28
   15390:	andeq	r8, r0, r4, asr #10
   15394:	andeq	r8, r0, r4, ror #12

00015398 <flatcc_builder_extend_vector@@Base>:
   15398:	ldr	r2, [r0, #32]
   1539c:	push	{r4, r5, r6, lr}
   153a0:	ldr	r3, [r2, #20]
   153a4:	ldr	r4, [r2, #24]
   153a8:	add	ip, r1, r3
   153ac:	cmp	r3, ip
   153b0:	movls	r3, #0
   153b4:	movhi	r3, #1
   153b8:	cmp	r4, ip
   153bc:	movcs	r4, r3
   153c0:	orrcc	r4, r3, #1
   153c4:	cmp	r4, #0
   153c8:	bne	15418 <flatcc_builder_extend_vector@@Base+0x80>
   153cc:	ldr	lr, [r2, #16]
   153d0:	str	ip, [r2, #20]
   153d4:	ldr	r6, [r0, #20]
   153d8:	ldr	r3, [r0, #24]
   153dc:	mla	r1, lr, r1, r6
   153e0:	mov	r5, r0
   153e4:	cmp	r1, r3
   153e8:	str	r1, [r0, #20]
   153ec:	bcs	153fc <flatcc_builder_extend_vector@@Base+0x64>
   153f0:	ldr	r0, [r5, #16]
   153f4:	add	r0, r0, r6
   153f8:	pop	{r4, r5, r6, pc}
   153fc:	add	r1, r1, #1
   15400:	mvn	r2, #3
   15404:	bl	14024 <test@@Base+0x18b4>
   15408:	cmp	r0, #0
   1540c:	beq	153f0 <flatcc_builder_extend_vector@@Base+0x58>
   15410:	mov	r0, r4
   15414:	pop	{r4, r5, r6, pc}
   15418:	bl	12580 <__assert_fail@plt+0xac>

0001541c <flatcc_builder_vector_push@@Base>:
   1541c:	ldr	r3, [r0, #32]
   15420:	push	{r4, r5, r6, r7, r8, lr}
   15424:	ldrh	r2, [r3, #14]
   15428:	cmp	r2, #4
   1542c:	bne	154d4 <flatcc_builder_vector_push@@Base+0xb8>
   15430:	mov	r6, r1
   15434:	ldr	r2, [r3, #20]
   15438:	ldr	r1, [r3, #24]
   1543c:	cmp	r2, r1
   15440:	bhi	154b0 <flatcc_builder_vector_push@@Base+0x94>
   15444:	add	r2, r2, #1
   15448:	str	r2, [r3, #20]
   1544c:	ldr	r7, [r3, #16]
   15450:	ldr	r5, [r0, #20]
   15454:	ldr	r3, [r0, #24]
   15458:	add	r1, r7, r5
   1545c:	cmp	r1, r3
   15460:	mov	r4, r0
   15464:	str	r1, [r0, #20]
   15468:	bcs	15494 <flatcc_builder_vector_push@@Base+0x78>
   1546c:	ldr	r3, [r4, #16]
   15470:	adds	r3, r3, r5
   15474:	beq	1548c <flatcc_builder_vector_push@@Base+0x70>
   15478:	mov	r0, r3
   1547c:	mov	r2, r7
   15480:	mov	r1, r6
   15484:	bl	1242c <memcpy@plt>
   15488:	mov	r3, r0
   1548c:	mov	r0, r3
   15490:	pop	{r4, r5, r6, r7, r8, pc}
   15494:	add	r1, r1, #1
   15498:	mvn	r2, #3
   1549c:	bl	14024 <test@@Base+0x18b4>
   154a0:	cmp	r0, #0
   154a4:	beq	1546c <flatcc_builder_vector_push@@Base+0x50>
   154a8:	mov	r3, #0
   154ac:	b	1548c <flatcc_builder_vector_push@@Base+0x70>
   154b0:	ldr	r3, [pc, #64]	; 154f8 <flatcc_builder_vector_push@@Base+0xdc>
   154b4:	ldr	r1, [pc, #64]	; 154fc <flatcc_builder_vector_push@@Base+0xe0>
   154b8:	ldr	r0, [pc, #64]	; 15500 <flatcc_builder_vector_push@@Base+0xe4>
   154bc:	add	r3, pc, r3
   154c0:	mov	r2, #908	; 0x38c
   154c4:	add	r3, r3, #324	; 0x144
   154c8:	add	r1, pc, r1
   154cc:	add	r0, pc, r0
   154d0:	bl	124d4 <__assert_fail@plt>
   154d4:	ldr	r3, [pc, #40]	; 15504 <flatcc_builder_vector_push@@Base+0xe8>
   154d8:	ldr	r1, [pc, #40]	; 15508 <flatcc_builder_vector_push@@Base+0xec>
   154dc:	ldr	r0, [pc, #40]	; 1550c <flatcc_builder_vector_push@@Base+0xf0>
   154e0:	add	r3, pc, r3
   154e4:	ldr	r2, [pc, #36]	; 15510 <flatcc_builder_vector_push@@Base+0xf4>
   154e8:	add	r3, r3, #324	; 0x144
   154ec:	add	r1, pc, r1
   154f0:	add	r0, pc, r0
   154f4:	bl	124d4 <__assert_fail@plt>
   154f8:			; <UNDEFINED> instruction: 0x00007cb8
   154fc:	strdeq	r8, [r0], -ip
   15500:	andeq	r8, r0, r4, ror r5
   15504:	muleq	r0, r4, ip
   15508:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1550c:	andeq	r8, r0, r4, lsr #10
   15510:	andeq	r0, r0, fp, lsl #7

00015514 <flatcc_builder_append_vector@@Base>:
   15514:	push	{r4, r5, r6, r7, r8, lr}
   15518:	mov	r7, r1
   1551c:	ldr	r1, [r0, #32]
   15520:	ldrh	r3, [r1, #14]
   15524:	cmp	r3, #4
   15528:	bne	155c8 <flatcc_builder_append_vector@@Base+0xb4>
   1552c:	ldr	r3, [r1, #20]
   15530:	ldr	r4, [r1, #24]
   15534:	add	ip, r2, r3
   15538:	cmp	r3, ip
   1553c:	movls	r3, #0
   15540:	movhi	r3, #1
   15544:	cmp	r4, ip
   15548:	movcs	r4, r3
   1554c:	orrcc	r4, r3, #1
   15550:	cmp	r4, #0
   15554:	bne	155c4 <flatcc_builder_append_vector@@Base+0xb0>
   15558:	ldr	r6, [r1, #16]
   1555c:	str	ip, [r1, #20]
   15560:	ldr	r8, [r0, #20]
   15564:	mul	r6, r6, r2
   15568:	ldr	r3, [r0, #24]
   1556c:	add	r1, r6, r8
   15570:	cmp	r1, r3
   15574:	mov	r5, r0
   15578:	str	r1, [r0, #20]
   1557c:	bcs	155a8 <flatcc_builder_append_vector@@Base+0x94>
   15580:	ldr	r3, [r5, #16]
   15584:	adds	r3, r3, r8
   15588:	beq	155a0 <flatcc_builder_append_vector@@Base+0x8c>
   1558c:	mov	r0, r3
   15590:	mov	r2, r6
   15594:	mov	r1, r7
   15598:	bl	1242c <memcpy@plt>
   1559c:	mov	r3, r0
   155a0:	mov	r0, r3
   155a4:	pop	{r4, r5, r6, r7, r8, pc}
   155a8:	add	r1, r1, #1
   155ac:	mvn	r2, #3
   155b0:	bl	14024 <test@@Base+0x18b4>
   155b4:	cmp	r0, #0
   155b8:	beq	15580 <flatcc_builder_append_vector@@Base+0x6c>
   155bc:	mov	r3, r4
   155c0:	b	155a0 <flatcc_builder_append_vector@@Base+0x8c>
   155c4:	bl	12580 <__assert_fail@plt+0xac>
   155c8:	ldr	r3, [pc, #28]	; 155ec <flatcc_builder_append_vector@@Base+0xd8>
   155cc:	ldr	r1, [pc, #28]	; 155f0 <flatcc_builder_append_vector@@Base+0xdc>
   155d0:	ldr	r0, [pc, #28]	; 155f4 <flatcc_builder_append_vector@@Base+0xe0>
   155d4:	add	r3, pc, r3
   155d8:	ldr	r2, [pc, #24]	; 155f8 <flatcc_builder_append_vector@@Base+0xe4>
   155dc:	add	r3, r3, #352	; 0x160
   155e0:	add	r1, pc, r1
   155e4:	add	r0, pc, r0
   155e8:	bl	124d4 <__assert_fail@plt>
   155ec:	andeq	r7, r0, r0, lsr #23
   155f0:	andeq	r8, r0, r4, ror #5
   155f4:	andeq	r8, r0, r0, lsr r4
   155f8:	muleq	r0, r3, r3

000155fc <flatcc_builder_extend_offset_vector@@Base>:
   155fc:	ldr	ip, [r0, #32]
   15600:	push	{r4, r5, r6, lr}
   15604:	ldr	r3, [ip, #20]
   15608:	adds	r2, r1, r3
   1560c:	movcs	r3, #1
   15610:	movcc	r3, #0
   15614:	cmn	r2, #-1073741823	; 0xc0000001
   15618:	movls	r4, #0
   1561c:	movhi	r4, #1
   15620:	orrs	r4, r3, r4
   15624:	bne	15670 <flatcc_builder_extend_offset_vector@@Base+0x74>
   15628:	str	r2, [ip, #20]
   1562c:	ldr	r6, [r0, #20]
   15630:	ldr	r3, [r0, #24]
   15634:	add	r1, r6, r1, lsl #2
   15638:	cmp	r1, r3
   1563c:	mov	r5, r0
   15640:	str	r1, [r0, #20]
   15644:	bcs	15654 <flatcc_builder_extend_offset_vector@@Base+0x58>
   15648:	ldr	r0, [r5, #16]
   1564c:	add	r0, r0, r6
   15650:	pop	{r4, r5, r6, pc}
   15654:	add	r1, r1, #1
   15658:	mvn	r2, #3
   1565c:	bl	14024 <test@@Base+0x18b4>
   15660:	cmp	r0, #0
   15664:	beq	15648 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   15668:	mov	r0, r4
   1566c:	pop	{r4, r5, r6, pc}
   15670:	bl	12580 <__assert_fail@plt+0xac>

00015674 <flatcc_builder_offset_vector_push@@Base>:
   15674:	ldr	r2, [r0, #32]
   15678:	push	{r4, r5, r6, lr}
   1567c:	ldrh	r3, [r2, #14]
   15680:	cmp	r3, #5
   15684:	bne	156ec <flatcc_builder_offset_vector_push@@Base+0x78>
   15688:	ldr	r3, [r2, #20]
   1568c:	cmn	r3, #-1073741823	; 0xc0000001
   15690:	beq	156e4 <flatcc_builder_offset_vector_push@@Base+0x70>
   15694:	add	r3, r3, #1
   15698:	str	r3, [r2, #20]
   1569c:	ldr	r5, [r0, #20]
   156a0:	ldr	r2, [r0, #24]
   156a4:	add	r3, r5, #4
   156a8:	cmp	r3, r2
   156ac:	mov	r4, r0
   156b0:	mov	r6, r1
   156b4:	str	r3, [r0, #20]
   156b8:	bcs	156d0 <flatcc_builder_offset_vector_push@@Base+0x5c>
   156bc:	ldr	r3, [r4, #16]
   156c0:	adds	r0, r3, r5
   156c4:	beq	15710 <flatcc_builder_offset_vector_push@@Base+0x9c>
   156c8:	str	r6, [r3, r5]
   156cc:	pop	{r4, r5, r6, pc}
   156d0:	mvn	r2, #3
   156d4:	add	r1, r5, #5
   156d8:	bl	14024 <test@@Base+0x18b4>
   156dc:	cmp	r0, #0
   156e0:	beq	156bc <flatcc_builder_offset_vector_push@@Base+0x48>
   156e4:	mov	r0, #0
   156e8:	pop	{r4, r5, r6, pc}
   156ec:	ldr	r3, [pc, #32]	; 15714 <flatcc_builder_offset_vector_push@@Base+0xa0>
   156f0:	ldr	r1, [pc, #32]	; 15718 <flatcc_builder_offset_vector_push@@Base+0xa4>
   156f4:	ldr	r0, [pc, #32]	; 1571c <flatcc_builder_offset_vector_push@@Base+0xa8>
   156f8:	add	r3, pc, r3
   156fc:	ldr	r2, [pc, #28]	; 15720 <flatcc_builder_offset_vector_push@@Base+0xac>
   15700:	add	r3, r3, #384	; 0x180
   15704:	add	r1, pc, r1
   15708:	add	r0, pc, r0
   1570c:	bl	124d4 <__assert_fail@plt>
   15710:	pop	{r4, r5, r6, pc}
   15714:	andeq	r7, r0, ip, ror sl
   15718:	andeq	r8, r0, r0, asr #3
   1571c:	andeq	r8, r0, r8, ror r3
   15720:	andeq	r0, r0, r6, lsr #7

00015724 <flatcc_builder_append_offset_vector@@Base>:
   15724:	ldr	ip, [r0, #32]
   15728:	push	{r4, r5, r6, r7, r8, lr}
   1572c:	ldrh	r3, [ip, #14]
   15730:	cmp	r3, #5
   15734:	bne	157cc <flatcc_builder_append_offset_vector@@Base+0xa8>
   15738:	mov	r6, r1
   1573c:	ldr	r1, [ip, #20]
   15740:	adds	r1, r2, r1
   15744:	movcs	lr, #1
   15748:	movcc	lr, #0
   1574c:	cmn	r1, #-1073741823	; 0xc0000001
   15750:	movls	r3, #0
   15754:	movhi	r3, #1
   15758:	orrs	r8, lr, r3
   1575c:	bne	157c8 <flatcc_builder_append_offset_vector@@Base+0xa4>
   15760:	str	r1, [ip, #20]
   15764:	ldr	r7, [r0, #20]
   15768:	lsl	r4, r2, #2
   1576c:	ldr	r3, [r0, #24]
   15770:	add	r1, r4, r7
   15774:	cmp	r1, r3
   15778:	mov	r5, r0
   1577c:	str	r1, [r0, #20]
   15780:	bcs	157ac <flatcc_builder_append_offset_vector@@Base+0x88>
   15784:	ldr	r3, [r5, #16]
   15788:	adds	r3, r3, r7
   1578c:	beq	157a4 <flatcc_builder_append_offset_vector@@Base+0x80>
   15790:	mov	r0, r3
   15794:	mov	r2, r4
   15798:	mov	r1, r6
   1579c:	bl	1242c <memcpy@plt>
   157a0:	mov	r3, r0
   157a4:	mov	r0, r3
   157a8:	pop	{r4, r5, r6, r7, r8, pc}
   157ac:	add	r1, r1, #1
   157b0:	mvn	r2, #3
   157b4:	bl	14024 <test@@Base+0x18b4>
   157b8:	cmp	r0, #0
   157bc:	beq	15784 <flatcc_builder_append_offset_vector@@Base+0x60>
   157c0:	mov	r3, r8
   157c4:	b	157a4 <flatcc_builder_append_offset_vector@@Base+0x80>
   157c8:	bl	12580 <__assert_fail@plt+0xac>
   157cc:	ldr	r3, [pc, #28]	; 157f0 <flatcc_builder_append_offset_vector@@Base+0xcc>
   157d0:	ldr	r1, [pc, #28]	; 157f4 <flatcc_builder_append_offset_vector@@Base+0xd0>
   157d4:	ldr	r0, [pc, #28]	; 157f8 <flatcc_builder_append_offset_vector@@Base+0xd4>
   157d8:	add	r3, pc, r3
   157dc:	mov	r2, #948	; 0x3b4
   157e0:	add	r3, r3, #420	; 0x1a4
   157e4:	add	r1, pc, r1
   157e8:	add	r0, pc, r0
   157ec:	bl	124d4 <__assert_fail@plt>
   157f0:	muleq	r0, ip, r9
   157f4:	andeq	r8, r0, r0, ror #1
   157f8:	muleq	r0, r8, r2

000157fc <flatcc_builder_extend_string@@Base>:
   157fc:	ldr	r2, [r0, #32]
   15800:	push	{r4, r5, r6, lr}
   15804:	ldrh	r3, [r2, #14]
   15808:	cmp	r3, #6
   1580c:	bne	15868 <flatcc_builder_extend_string@@Base+0x6c>
   15810:	ldr	r3, [r2, #20]
   15814:	adds	r3, r1, r3
   15818:	bcs	15864 <flatcc_builder_extend_string@@Base+0x68>
   1581c:	str	r3, [r2, #20]
   15820:	ldr	r5, [r0, #20]
   15824:	ldr	r3, [r0, #24]
   15828:	add	r1, r1, r5
   1582c:	cmp	r1, r3
   15830:	mov	r4, r0
   15834:	str	r1, [r0, #20]
   15838:	bcs	15848 <flatcc_builder_extend_string@@Base+0x4c>
   1583c:	ldr	r0, [r4, #16]
   15840:	add	r0, r0, r5
   15844:	pop	{r4, r5, r6, pc}
   15848:	add	r1, r1, #1
   1584c:	mvn	r2, #3
   15850:	bl	14024 <test@@Base+0x18b4>
   15854:	cmp	r0, #0
   15858:	beq	1583c <flatcc_builder_extend_string@@Base+0x40>
   1585c:	mov	r0, #0
   15860:	pop	{r4, r5, r6, pc}
   15864:	bl	12580 <__assert_fail@plt+0xac>
   15868:	ldr	r3, [pc, #28]	; 1588c <flatcc_builder_extend_string@@Base+0x90>
   1586c:	ldr	r1, [pc, #28]	; 15890 <flatcc_builder_extend_string@@Base+0x94>
   15870:	ldr	r0, [pc, #28]	; 15894 <flatcc_builder_extend_string@@Base+0x98>
   15874:	add	r3, pc, r3
   15878:	ldr	r2, [pc, #24]	; 15898 <flatcc_builder_extend_string@@Base+0x9c>
   1587c:	add	r3, r3, #456	; 0x1c8
   15880:	add	r1, pc, r1
   15884:	add	r0, pc, r0
   15888:	bl	124d4 <__assert_fail@plt>
   1588c:	andeq	r7, r0, r0, lsl #18
   15890:	andeq	r8, r0, r4, asr #32
   15894:	andeq	r8, r0, r0, lsr r2
   15898:			; <UNDEFINED> instruction: 0x000003bd

0001589c <flatcc_builder_append_string@@Base>:
   1589c:	push	{r4, r5, r6, r7, r8, lr}
   158a0:	mov	r7, r1
   158a4:	ldr	r1, [r0, #32]
   158a8:	ldrh	r3, [r1, #14]
   158ac:	cmp	r3, #6
   158b0:	bne	1592c <flatcc_builder_append_string@@Base+0x90>
   158b4:	ldr	r3, [r1, #20]
   158b8:	mov	r5, r2
   158bc:	adds	r3, r2, r3
   158c0:	bcs	15928 <flatcc_builder_append_string@@Base+0x8c>
   158c4:	str	r3, [r1, #20]
   158c8:	ldr	r6, [r0, #20]
   158cc:	ldr	r3, [r0, #24]
   158d0:	add	r1, r2, r6
   158d4:	cmp	r1, r3
   158d8:	mov	r4, r0
   158dc:	str	r1, [r0, #20]
   158e0:	bcs	1590c <flatcc_builder_append_string@@Base+0x70>
   158e4:	ldr	r3, [r4, #16]
   158e8:	adds	r3, r3, r6
   158ec:	beq	15904 <flatcc_builder_append_string@@Base+0x68>
   158f0:	mov	r0, r3
   158f4:	mov	r2, r5
   158f8:	mov	r1, r7
   158fc:	bl	1242c <memcpy@plt>
   15900:	mov	r3, r0
   15904:	mov	r0, r3
   15908:	pop	{r4, r5, r6, r7, r8, pc}
   1590c:	add	r1, r1, #1
   15910:	mvn	r2, #3
   15914:	bl	14024 <test@@Base+0x18b4>
   15918:	cmp	r0, #0
   1591c:	beq	158e4 <flatcc_builder_append_string@@Base+0x48>
   15920:	mov	r3, #0
   15924:	b	15904 <flatcc_builder_append_string@@Base+0x68>
   15928:	bl	12580 <__assert_fail@plt+0xac>
   1592c:	ldr	r3, [pc, #28]	; 15950 <flatcc_builder_append_string@@Base+0xb4>
   15930:	ldr	r1, [pc, #28]	; 15954 <flatcc_builder_append_string@@Base+0xb8>
   15934:	ldr	r0, [pc, #28]	; 15958 <flatcc_builder_append_string@@Base+0xbc>
   15938:	add	r3, pc, r3
   1593c:	ldr	r2, [pc, #24]	; 1595c <flatcc_builder_append_string@@Base+0xc0>
   15940:	add	r3, r3, #488	; 0x1e8
   15944:	add	r1, pc, r1
   15948:	add	r0, pc, r0
   1594c:	bl	124d4 <__assert_fail@plt>
   15950:	andeq	r7, r0, ip, lsr r8
   15954:	andeq	r7, r0, r0, lsl #31
   15958:	andeq	r8, r0, ip, ror #2
   1595c:	andeq	r0, r0, r6, asr #7

00015960 <flatcc_builder_append_string_str@@Base>:
   15960:	push	{r4, r5, r6, lr}
   15964:	mov	r5, r0
   15968:	mov	r0, r1
   1596c:	mov	r4, r1
   15970:	bl	12480 <strlen@plt>
   15974:	mov	r1, r4
   15978:	mov	r2, r0
   1597c:	mov	r0, r5
   15980:	pop	{r4, r5, r6, lr}
   15984:	b	1589c <flatcc_builder_append_string@@Base>

00015988 <flatcc_builder_append_string_strn@@Base>:
   15988:	push	{r4, r5, r6, lr}
   1598c:	mov	r4, r1
   15990:	mov	r6, r0
   15994:	mov	r1, #0
   15998:	mov	r0, r4
   1599c:	mov	r5, r2
   159a0:	bl	124bc <memchr@plt>
   159a4:	mov	r1, r4
   159a8:	cmp	r0, #0
   159ac:	subne	r5, r0, r4
   159b0:	mov	r2, r5
   159b4:	mov	r0, r6
   159b8:	pop	{r4, r5, r6, lr}
   159bc:	b	1589c <flatcc_builder_append_string@@Base>

000159c0 <flatcc_builder_truncate_vector@@Base>:
   159c0:	ldr	r3, [r0, #32]
   159c4:	push	{r4, lr}
   159c8:	ldrh	r2, [r3, #14]
   159cc:	cmp	r2, #4
   159d0:	bne	15a14 <flatcc_builder_truncate_vector@@Base+0x54>
   159d4:	ldr	ip, [r3, #20]
   159d8:	cmp	ip, r1
   159dc:	bcc	15a38 <flatcc_builder_truncate_vector@@Base+0x78>
   159e0:	ldr	r2, [r3, #16]
   159e4:	sub	ip, ip, r1
   159e8:	str	ip, [r3, #20]
   159ec:	mul	r2, r2, r1
   159f0:	ldr	r3, [r0, #20]
   159f4:	ldr	r1, [r0, #16]
   159f8:	sub	r3, r3, r2
   159fc:	str	r3, [r0, #20]
   15a00:	add	r0, r1, r3
   15a04:	mov	r1, #0
   15a08:	bl	124a4 <memset@plt>
   15a0c:	mov	r0, #0
   15a10:	pop	{r4, pc}
   15a14:	ldr	r3, [pc, #64]	; 15a5c <flatcc_builder_truncate_vector@@Base+0x9c>
   15a18:	ldr	r1, [pc, #64]	; 15a60 <flatcc_builder_truncate_vector@@Base+0xa0>
   15a1c:	ldr	r0, [pc, #64]	; 15a64 <flatcc_builder_truncate_vector@@Base+0xa4>
   15a20:	add	r3, pc, r3
   15a24:	ldr	r2, [pc, #60]	; 15a68 <flatcc_builder_truncate_vector@@Base+0xa8>
   15a28:	add	r3, r3, #520	; 0x208
   15a2c:	add	r1, pc, r1
   15a30:	add	r0, pc, r0
   15a34:	bl	124d4 <__assert_fail@plt>
   15a38:	ldr	r3, [pc, #44]	; 15a6c <flatcc_builder_truncate_vector@@Base+0xac>
   15a3c:	ldr	r1, [pc, #44]	; 15a70 <flatcc_builder_truncate_vector@@Base+0xb0>
   15a40:	ldr	r0, [pc, #44]	; 15a74 <flatcc_builder_truncate_vector@@Base+0xb4>
   15a44:	add	r3, pc, r3
   15a48:	ldr	r2, [pc, #40]	; 15a78 <flatcc_builder_truncate_vector@@Base+0xb8>
   15a4c:	add	r3, r3, #520	; 0x208
   15a50:	add	r1, pc, r1
   15a54:	add	r0, pc, r0
   15a58:	bl	124d4 <__assert_fail@plt>
   15a5c:	andeq	r7, r0, r4, asr r7
   15a60:	muleq	r0, r8, lr
   15a64:	andeq	r7, r0, r4, ror #31
   15a68:	ldrdeq	r0, [r0], -r9
   15a6c:	andeq	r7, r0, r0, lsr r7
   15a70:	andeq	r7, r0, r4, ror lr
   15a74:	andeq	r8, r0, ip, lsl #1
   15a78:	ldrdeq	r0, [r0], -sl

00015a7c <flatcc_builder_truncate_offset_vector@@Base>:
   15a7c:	ldr	r3, [r0, #32]
   15a80:	push	{r4, lr}
   15a84:	ldrh	r2, [r3, #14]
   15a88:	cmp	r2, #5
   15a8c:	bne	15ad0 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   15a90:	ldr	ip, [r3, #20]
   15a94:	cmp	ip, r1
   15a98:	bcc	15af4 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   15a9c:	ldr	r2, [r3, #16]
   15aa0:	sub	ip, ip, r1
   15aa4:	str	ip, [r3, #20]
   15aa8:	mul	r2, r2, r1
   15aac:	ldr	r3, [r0, #20]
   15ab0:	ldr	r1, [r0, #16]
   15ab4:	sub	r3, r3, r2
   15ab8:	str	r3, [r0, #20]
   15abc:	add	r0, r1, r3
   15ac0:	mov	r1, #0
   15ac4:	bl	124a4 <memset@plt>
   15ac8:	mov	r0, #0
   15acc:	pop	{r4, pc}
   15ad0:	ldr	r3, [pc, #64]	; 15b18 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   15ad4:	ldr	r1, [pc, #64]	; 15b1c <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   15ad8:	ldr	r0, [pc, #64]	; 15b20 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   15adc:	add	r3, pc, r3
   15ae0:	ldr	r2, [pc, #60]	; 15b24 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   15ae4:	add	r3, r3, #552	; 0x228
   15ae8:	add	r1, pc, r1
   15aec:	add	r0, pc, r0
   15af0:	bl	124d4 <__assert_fail@plt>
   15af4:	ldr	r3, [pc, #44]	; 15b28 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   15af8:	ldr	r1, [pc, #44]	; 15b2c <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   15afc:	ldr	r0, [pc, #44]	; 15b30 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   15b00:	add	r3, pc, r3
   15b04:	ldr	r2, [pc, #40]	; 15b34 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   15b08:	add	r3, r3, #552	; 0x228
   15b0c:	add	r1, pc, r1
   15b10:	add	r0, pc, r0
   15b14:	bl	124d4 <__assert_fail@plt>
   15b18:	muleq	r0, r8, r6
   15b1c:	ldrdeq	r7, [r0], -ip
   15b20:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   15b24:	andeq	r0, r0, r2, ror #7
   15b28:	andeq	r7, r0, r4, ror r6
   15b2c:			; <UNDEFINED> instruction: 0x00007db8
   15b30:	strdeq	r7, [r0], -r4
   15b34:	andeq	r0, r0, r3, ror #7

00015b38 <flatcc_builder_truncate_string@@Base>:
   15b38:	ldr	r2, [r0, #32]
   15b3c:	push	{r4, lr}
   15b40:	ldrh	r3, [r2, #14]
   15b44:	cmp	r3, #6
   15b48:	bne	15b88 <flatcc_builder_truncate_string@@Base+0x50>
   15b4c:	ldr	r3, [r2, #20]
   15b50:	cmp	r3, r1
   15b54:	bcc	15bac <flatcc_builder_truncate_string@@Base+0x74>
   15b58:	sub	r3, r3, r1
   15b5c:	str	r3, [r2, #20]
   15b60:	ldr	r3, [r0, #20]
   15b64:	ldr	r2, [r0, #16]
   15b68:	sub	r3, r3, r1
   15b6c:	str	r3, [r0, #20]
   15b70:	add	r0, r2, r3
   15b74:	mov	r2, r1
   15b78:	mov	r1, #0
   15b7c:	bl	124a4 <memset@plt>
   15b80:	mov	r0, #0
   15b84:	pop	{r4, pc}
   15b88:	ldr	r3, [pc, #64]	; 15bd0 <flatcc_builder_truncate_string@@Base+0x98>
   15b8c:	ldr	r1, [pc, #64]	; 15bd4 <flatcc_builder_truncate_string@@Base+0x9c>
   15b90:	ldr	r0, [pc, #64]	; 15bd8 <flatcc_builder_truncate_string@@Base+0xa0>
   15b94:	add	r3, pc, r3
   15b98:	ldr	r2, [pc, #60]	; 15bdc <flatcc_builder_truncate_string@@Base+0xa4>
   15b9c:	add	r3, r3, #592	; 0x250
   15ba0:	add	r1, pc, r1
   15ba4:	add	r0, pc, r0
   15ba8:	bl	124d4 <__assert_fail@plt>
   15bac:	ldr	r3, [pc, #44]	; 15be0 <flatcc_builder_truncate_string@@Base+0xa8>
   15bb0:	ldr	r1, [pc, #44]	; 15be4 <flatcc_builder_truncate_string@@Base+0xac>
   15bb4:	ldr	r0, [pc, #44]	; 15be8 <flatcc_builder_truncate_string@@Base+0xb0>
   15bb8:	add	r3, pc, r3
   15bbc:	mov	r2, #1004	; 0x3ec
   15bc0:	add	r3, r3, #592	; 0x250
   15bc4:	add	r1, pc, r1
   15bc8:	add	r0, pc, r0
   15bcc:	bl	124d4 <__assert_fail@plt>
   15bd0:	andeq	r7, r0, r0, ror #11
   15bd4:	andeq	r7, r0, r4, lsr #26
   15bd8:	andeq	r7, r0, r0, lsl pc
   15bdc:	andeq	r0, r0, fp, ror #7
   15be0:			; <UNDEFINED> instruction: 0x000075bc
   15be4:	andeq	r7, r0, r0, lsl #26
   15be8:	andeq	r7, r0, r8, ror pc

00015bec <flatcc_builder_start_vector@@Base>:
   15bec:	cmp	r2, #4
   15bf0:	push	{r4, r5, r6, lr}
   15bf4:	mov	r6, r1
   15bf8:	movcs	r1, r2
   15bfc:	movcc	r1, #4
   15c00:	mov	r5, r3
   15c04:	mov	r4, r0
   15c08:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   15c0c:	cmp	r0, #0
   15c10:	bne	15c5c <flatcc_builder_start_vector@@Base+0x70>
   15c14:	ldr	r2, [r4, #32]
   15c18:	mov	lr, #4
   15c1c:	str	r6, [r2, #16]
   15c20:	str	r0, [r2, #20]
   15c24:	str	r5, [r2, #24]
   15c28:	ldr	ip, [r4, #28]
   15c2c:	ldr	r3, [r4, #64]	; 0x40
   15c30:	ldr	r1, [r4, #60]	; 0x3c
   15c34:	sub	r3, r3, ip
   15c38:	cmn	r3, #4
   15c3c:	mvnhi	r3, #3
   15c40:	strh	lr, [r2, #14]
   15c44:	add	r1, r1, ip
   15c48:	str	r3, [r4, #24]
   15c4c:	mvn	r3, #3
   15c50:	str	r1, [r4, #16]
   15c54:	str	r3, [r2, #4]
   15c58:	pop	{r4, r5, r6, pc}
   15c5c:	mvn	r0, #0
   15c60:	pop	{r4, r5, r6, pc}

00015c64 <flatcc_builder_start_offset_vector@@Base>:
   15c64:	push	{r4, lr}
   15c68:	mov	r1, #4
   15c6c:	mov	r4, r0
   15c70:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   15c74:	cmp	r0, #0
   15c78:	bne	15cc4 <flatcc_builder_start_offset_vector@@Base+0x60>
   15c7c:	ldr	r3, [r4, #32]
   15c80:	mov	r2, #4
   15c84:	mov	lr, #5
   15c88:	str	r0, [r3, #20]
   15c8c:	str	r2, [r3, #16]
   15c90:	ldr	ip, [r4, #28]
   15c94:	ldr	r2, [r4, #64]	; 0x40
   15c98:	ldr	r1, [r4, #60]	; 0x3c
   15c9c:	sub	r2, r2, ip
   15ca0:	cmn	r2, #4
   15ca4:	mvnhi	r2, #3
   15ca8:	strh	lr, [r3, #14]
   15cac:	add	r1, r1, ip
   15cb0:	str	r2, [r4, #24]
   15cb4:	mvn	r2, #3
   15cb8:	str	r1, [r4, #16]
   15cbc:	str	r2, [r3, #4]
   15cc0:	pop	{r4, pc}
   15cc4:	mvn	r0, #0
   15cc8:	pop	{r4, pc}

00015ccc <flatcc_builder_start_string@@Base>:
   15ccc:	push	{r4, lr}
   15cd0:	mov	r1, #1
   15cd4:	mov	r4, r0
   15cd8:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   15cdc:	cmp	r0, #0
   15ce0:	bne	15d2c <flatcc_builder_start_string@@Base+0x60>
   15ce4:	ldr	r3, [r4, #32]
   15ce8:	mov	r2, #1
   15cec:	mov	lr, #6
   15cf0:	str	r0, [r3, #20]
   15cf4:	str	r2, [r3, #16]
   15cf8:	ldr	ip, [r4, #28]
   15cfc:	ldr	r2, [r4, #64]	; 0x40
   15d00:	ldr	r1, [r4, #60]	; 0x3c
   15d04:	sub	r2, r2, ip
   15d08:	cmn	r2, #4
   15d0c:	mvnhi	r2, #3
   15d10:	strh	lr, [r3, #14]
   15d14:	add	r1, r1, ip
   15d18:	str	r2, [r4, #24]
   15d1c:	mvn	r2, #3
   15d20:	str	r1, [r4, #16]
   15d24:	str	r2, [r3, #4]
   15d28:	pop	{r4, pc}
   15d2c:	mvn	r0, #0
   15d30:	pop	{r4, pc}

00015d34 <flatcc_builder_reserve_table@@Base>:
   15d34:	cmp	r1, #0
   15d38:	push	{r4, r5, r6, r7, lr}
   15d3c:	sub	sp, sp, #12
   15d40:	blt	15e18 <flatcc_builder_reserve_table@@Base+0xe4>
   15d44:	ldr	r2, [r0, #32]
   15d48:	add	r1, r1, #2
   15d4c:	mov	r5, r0
   15d50:	ldrh	r6, [r2, #28]
   15d54:	ldr	r3, [r2, #16]
   15d58:	ldr	r0, [r0, #56]	; 0x38
   15d5c:	lsl	r4, r1, #1
   15d60:	add	r6, r3, r6, lsl #1
   15d64:	add	r2, r6, r4
   15d68:	cmp	r2, r0
   15d6c:	bhi	15dc8 <flatcc_builder_reserve_table@@Base+0x94>
   15d70:	ldr	r3, [r5, #52]	; 0x34
   15d74:	adds	r3, r3, r6
   15d78:	streq	r3, [r5, #4]
   15d7c:	mvneq	r0, #0
   15d80:	beq	15dc0 <flatcc_builder_reserve_table@@Base+0x8c>
   15d84:	ldr	r2, [r5, #32]
   15d88:	add	r3, r3, #4
   15d8c:	str	r3, [r5, #4]
   15d90:	ldr	r6, [r2, #20]
   15d94:	ldr	r3, [r5, #80]	; 0x50
   15d98:	add	r2, r4, r6
   15d9c:	sub	r2, r2, #3
   15da0:	cmp	r2, r3
   15da4:	bhi	15df0 <flatcc_builder_reserve_table@@Base+0xbc>
   15da8:	ldr	r3, [r5, #76]	; 0x4c
   15dac:	add	r3, r3, r6
   15db0:	cmp	r3, #0
   15db4:	movne	r0, #0
   15db8:	mvneq	r0, #0
   15dbc:	str	r3, [r5]
   15dc0:	add	sp, sp, #12
   15dc4:	pop	{r4, r5, r6, r7, pc}
   15dc8:	mov	r3, #0
   15dcc:	ldr	r0, [r5, #40]	; 0x28
   15dd0:	add	r1, r5, #52	; 0x34
   15dd4:	str	r3, [sp]
   15dd8:	mov	r3, #1
   15ddc:	ldr	r7, [r5, #48]	; 0x30
   15de0:	blx	r7
   15de4:	cmp	r0, #0
   15de8:	beq	15d70 <flatcc_builder_reserve_table@@Base+0x3c>
   15dec:	bl	124e0 <__assert_fail@plt+0xc>
   15df0:	mov	r3, #3
   15df4:	ldr	r0, [r5, #40]	; 0x28
   15df8:	add	r1, r5, #76	; 0x4c
   15dfc:	str	r3, [sp]
   15e00:	mov	r3, #0
   15e04:	ldr	r4, [r5, #48]	; 0x30
   15e08:	blx	r4
   15e0c:	cmp	r0, #0
   15e10:	beq	15da8 <flatcc_builder_reserve_table@@Base+0x74>
   15e14:	b	15dec <flatcc_builder_reserve_table@@Base+0xb8>
   15e18:	ldr	r3, [pc, #28]	; 15e3c <flatcc_builder_reserve_table@@Base+0x108>
   15e1c:	ldr	r1, [pc, #28]	; 15e40 <flatcc_builder_reserve_table@@Base+0x10c>
   15e20:	ldr	r0, [pc, #28]	; 15e44 <flatcc_builder_reserve_table@@Base+0x110>
   15e24:	add	r3, pc, r3
   15e28:	ldr	r2, [pc, #24]	; 15e48 <flatcc_builder_reserve_table@@Base+0x114>
   15e2c:	add	r3, r3, #624	; 0x270
   15e30:	add	r1, pc, r1
   15e34:	add	r0, pc, r0
   15e38:	bl	124d4 <__assert_fail@plt>
   15e3c:	andeq	r7, r0, r0, asr r3
   15e40:	muleq	r0, r4, sl
   15e44:	andeq	r7, r0, r0, lsr sp
   15e48:	andeq	r0, r0, r9, lsr #8

00015e4c <flatcc_builder_start_table@@Base>:
   15e4c:	push	{r4, r5, r6, r7, r8, lr}
   15e50:	mov	r5, r1
   15e54:	sub	sp, sp, #8
   15e58:	mov	r1, #4
   15e5c:	mov	r4, r0
   15e60:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   15e64:	subs	r7, r0, #0
   15e68:	bne	15fa0 <flatcc_builder_start_table@@Base+0x154>
   15e6c:	ldr	r3, [r4, #52]	; 0x34
   15e70:	ldr	r6, [r4, #4]
   15e74:	ldr	r0, [r4, #32]
   15e78:	sub	r6, r6, r3
   15e7c:	add	r5, r5, #2
   15e80:	str	r6, [r0, #16]
   15e84:	ldr	r1, [r4, #76]	; 0x4c
   15e88:	ldr	r2, [r4]
   15e8c:	lsl	r5, r5, #1
   15e90:	sub	r2, r2, r1
   15e94:	str	r2, [r0, #20]
   15e98:	ldr	r2, [r4, #12]
   15e9c:	ldr	lr, [pc, #268]	; 15fb0 <flatcc_builder_start_table@@Base+0x164>
   15ea0:	str	r2, [r0, #24]
   15ea4:	ldrh	r2, [r4, #8]
   15ea8:	mov	r1, #3
   15eac:	strh	r2, [r0, #28]
   15eb0:	add	r6, r6, r2, lsl #1
   15eb4:	ldr	ip, [r4, #56]	; 0x38
   15eb8:	add	r2, r6, r5
   15ebc:	cmp	r2, ip
   15ec0:	strh	r7, [r4, #8]
   15ec4:	str	lr, [r4, #12]
   15ec8:	strh	r1, [r0, #14]
   15ecc:	bhi	15f50 <flatcc_builder_start_table@@Base+0x104>
   15ed0:	adds	r6, r3, r6
   15ed4:	streq	r6, [r4, #4]
   15ed8:	beq	15fa0 <flatcc_builder_start_table@@Base+0x154>
   15edc:	ldr	r3, [r4, #32]
   15ee0:	add	r6, r6, #4
   15ee4:	str	r6, [r4, #4]
   15ee8:	ldr	r6, [r3, #20]
   15eec:	sub	r2, r5, #3
   15ef0:	ldr	r3, [r4, #80]	; 0x50
   15ef4:	add	r2, r2, r6
   15ef8:	cmp	r2, r3
   15efc:	bhi	15f78 <flatcc_builder_start_table@@Base+0x12c>
   15f00:	ldr	r3, [r4, #76]	; 0x4c
   15f04:	add	r3, r3, r6
   15f08:	cmp	r3, #0
   15f0c:	str	r3, [r4]
   15f10:	beq	15fa0 <flatcc_builder_start_table@@Base+0x154>
   15f14:	ldr	r0, [r4, #28]
   15f18:	ldr	r3, [r4, #64]	; 0x40
   15f1c:	ldr	r2, [pc, #144]	; 15fb4 <flatcc_builder_start_table@@Base+0x168>
   15f20:	sub	r3, r3, r0
   15f24:	ldr	r1, [r4, #60]	; 0x3c
   15f28:	ldr	ip, [r4, #32]
   15f2c:	cmp	r3, r2
   15f30:	add	r1, r1, r0
   15f34:	movcs	r3, r2
   15f38:	str	r1, [r4, #16]
   15f3c:	str	r3, [r4, #24]
   15f40:	mov	r0, r7
   15f44:	str	r2, [ip, #4]
   15f48:	add	sp, sp, #8
   15f4c:	pop	{r4, r5, r6, r7, r8, pc}
   15f50:	ldr	r0, [r4, #40]	; 0x28
   15f54:	mov	r3, #1
   15f58:	str	r7, [sp]
   15f5c:	add	r1, r4, #52	; 0x34
   15f60:	ldr	r8, [r4, #48]	; 0x30
   15f64:	blx	r8
   15f68:	cmp	r0, #0
   15f6c:	bne	15f9c <flatcc_builder_start_table@@Base+0x150>
   15f70:	ldr	r3, [r4, #52]	; 0x34
   15f74:	b	15ed0 <flatcc_builder_start_table@@Base+0x84>
   15f78:	mov	r3, #3
   15f7c:	ldr	r0, [r4, #40]	; 0x28
   15f80:	add	r1, r4, #76	; 0x4c
   15f84:	str	r3, [sp]
   15f88:	mov	r3, #0
   15f8c:	ldr	r5, [r4, #48]	; 0x30
   15f90:	blx	r5
   15f94:	cmp	r0, #0
   15f98:	beq	15f00 <flatcc_builder_start_table@@Base+0xb4>
   15f9c:	bl	124e0 <__assert_fail@plt+0xc>
   15fa0:	mvn	r7, #0
   15fa4:	mov	r0, r7
   15fa8:	add	sp, sp, #8
   15fac:	pop	{r4, r5, r6, r7, r8, pc}
   15fb0:	svccs	0x00693b52
   15fb4:	strdeq	pc, [r0], -ip

00015fb8 <flatcc_builder_create_vtable@@Base>:
   15fb8:	push	{r4, r5, r6, lr}
   15fbc:	sub	sp, sp, #80	; 0x50
   15fc0:	subs	r3, r2, #0
   15fc4:	mov	r2, #0
   15fc8:	mov	r4, r0
   15fcc:	str	r2, [sp, #8]
   15fd0:	str	r2, [sp, #12]
   15fd4:	beq	1604c <flatcc_builder_create_vtable@@Base+0x94>
   15fd8:	ldr	r0, [r0, #152]	; 0x98
   15fdc:	mov	r2, #1
   15fe0:	cmp	r0, #0
   15fe4:	str	r1, [sp, #16]
   15fe8:	str	r3, [sp, #8]
   15fec:	str	r3, [sp, #20]
   15ff0:	str	r2, [sp, #12]
   15ff4:	mov	r1, r3
   15ff8:	beq	16068 <flatcc_builder_create_vtable@@Base+0xb0>
   15ffc:	ldr	r2, [r4, #136]	; 0x88
   16000:	sub	r5, r2, r3
   16004:	cmp	r2, r5
   16008:	ble	16064 <flatcc_builder_create_vtable@@Base+0xac>
   1600c:	ldr	r0, [r4, #36]	; 0x24
   16010:	ldr	r2, [sp, #12]
   16014:	str	r3, [sp]
   16018:	add	r1, sp, #16
   1601c:	ldr	r6, [r4, #44]	; 0x2c
   16020:	mov	r3, r5
   16024:	blx	r6
   16028:	cmp	r0, #0
   1602c:	bne	160dc <flatcc_builder_create_vtable@@Base+0x124>
   16030:	cmp	r5, #0
   16034:	str	r5, [r4, #136]	; 0x88
   16038:	beq	16040 <flatcc_builder_create_vtable@@Base+0x88>
   1603c:	add	r5, r5, #1
   16040:	mov	r0, r5
   16044:	add	sp, sp, #80	; 0x50
   16048:	pop	{r4, r5, r6, pc}
   1604c:	ldr	r3, [r0, #152]	; 0x98
   16050:	cmp	r3, #0
   16054:	bne	16064 <flatcc_builder_create_vtable@@Base+0xac>
   16058:	ldr	r3, [r0, #180]	; 0xb4
   1605c:	cmp	r3, #0
   16060:	beq	160d0 <flatcc_builder_create_vtable@@Base+0x118>
   16064:	bl	12548 <__assert_fail@plt+0x74>
   16068:	ldr	r2, [r4, #180]	; 0xb4
   1606c:	cmp	r2, #0
   16070:	bne	15ffc <flatcc_builder_create_vtable@@Base+0x44>
   16074:	ldr	r5, [r4, #140]	; 0x8c
   16078:	add	r3, r5, r3
   1607c:	cmp	r5, r3
   16080:	str	r3, [r4, #140]	; 0x8c
   16084:	bgt	16100 <flatcc_builder_create_vtable@@Base+0x148>
   16088:	ldr	r0, [r4, #36]	; 0x24
   1608c:	ldr	r2, [sp, #12]
   16090:	str	r1, [sp]
   16094:	mov	r3, r5
   16098:	ldr	r4, [r4, #44]	; 0x2c
   1609c:	add	r1, sp, #16
   160a0:	blx	r4
   160a4:	cmp	r0, #0
   160a8:	beq	1603c <flatcc_builder_create_vtable@@Base+0x84>
   160ac:	ldr	r3, [pc, #80]	; 16104 <flatcc_builder_create_vtable@@Base+0x14c>
   160b0:	ldr	r1, [pc, #80]	; 16108 <flatcc_builder_create_vtable@@Base+0x150>
   160b4:	ldr	r0, [pc, #80]	; 1610c <flatcc_builder_create_vtable@@Base+0x154>
   160b8:	add	r3, pc, r3
   160bc:	ldr	r2, [pc, #76]	; 16110 <flatcc_builder_create_vtable@@Base+0x158>
   160c0:	add	r3, r3, #16
   160c4:	add	r1, pc, r1
   160c8:	add	r0, pc, r0
   160cc:	bl	124d4 <__assert_fail@plt>
   160d0:	ldr	r5, [r4, #140]	; 0x8c
   160d4:	mov	r1, r3
   160d8:	b	16088 <flatcc_builder_create_vtable@@Base+0xd0>
   160dc:	ldr	r3, [pc, #48]	; 16114 <flatcc_builder_create_vtable@@Base+0x15c>
   160e0:	ldr	r1, [pc, #48]	; 16118 <flatcc_builder_create_vtable@@Base+0x160>
   160e4:	ldr	r0, [pc, #48]	; 1611c <flatcc_builder_create_vtable@@Base+0x164>
   160e8:	add	r3, pc, r3
   160ec:	ldr	r2, [pc, #44]	; 16120 <flatcc_builder_create_vtable@@Base+0x168>
   160f0:	add	r3, r3, #28
   160f4:	add	r1, pc, r1
   160f8:	add	r0, pc, r0
   160fc:	bl	124d4 <__assert_fail@plt>
   16100:	bl	12510 <__assert_fail@plt+0x3c>
   16104:	strheq	r7, [r0], -ip
   16108:	andeq	r7, r0, r0, lsl #16
   1610c:	andeq	r7, r0, r4, lsl #17
   16110:	andeq	r0, r0, r5, lsr #5
   16114:	andeq	r7, r0, ip, lsl #1
   16118:	ldrdeq	r7, [r0], -r0
   1611c:	andeq	r7, r0, r4, asr r8
   16120:	andeq	r0, r0, fp, lsl #5

00016124 <flatcc_builder_create_cached_vtable@@Base>:
   16124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16128:	sub	sp, sp, #28
   1612c:	ldr	r4, [r0, #116]	; 0x74
   16130:	mov	sl, r3
   16134:	cmp	r4, #0
   16138:	mov	r8, r0
   1613c:	str	r1, [sp, #8]
   16140:	mov	r7, r2
   16144:	rsbne	r3, r4, #32
   16148:	beq	162a0 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   1614c:	lsr	sl, sl, r3
   16150:	ldr	r3, [r8, #92]	; 0x5c
   16154:	adds	r2, r3, sl, lsl #2
   16158:	str	r3, [sp, #16]
   1615c:	str	r2, [sp, #20]
   16160:	beq	16294 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16164:	ldr	r5, [r3, sl, lsl #2]
   16168:	cmp	r5, #0
   1616c:	beq	16390 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   16170:	mov	r3, #0
   16174:	ldr	fp, [r8, #100]	; 0x64
   16178:	ldr	r6, [r8, #68]	; 0x44
   1617c:	mov	r9, r2
   16180:	str	r3, [sp, #12]
   16184:	b	16198 <flatcc_builder_create_cached_vtable@@Base+0x74>
   16188:	ldr	r5, [r4, #12]
   1618c:	add	r9, r4, #12
   16190:	cmp	r5, #0
   16194:	beq	161e8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   16198:	add	r4, fp, r5
   1619c:	ldr	r2, [r4, #8]
   161a0:	add	r1, r6, r2
   161a4:	ldrh	r2, [r6, r2]
   161a8:	cmp	r2, r7
   161ac:	bne	16188 <flatcc_builder_create_cached_vtable@@Base+0x64>
   161b0:	mov	r2, r7
   161b4:	ldr	r0, [sp, #8]
   161b8:	bl	12438 <memcmp@plt>
   161bc:	cmp	r0, #0
   161c0:	bne	16188 <flatcc_builder_create_cached_vtable@@Base+0x64>
   161c4:	ldr	r1, [r4, #4]
   161c8:	ldr	r2, [r8, #152]	; 0x98
   161cc:	cmp	r1, r2
   161d0:	beq	16264 <flatcc_builder_create_cached_vtable@@Base+0x140>
   161d4:	ldr	r5, [r4, #12]
   161d8:	add	r9, r4, #12
   161dc:	cmp	r5, #0
   161e0:	str	r4, [sp, #12]
   161e4:	bne	16198 <flatcc_builder_create_cached_vtable@@Base+0x74>
   161e8:	ldr	r4, [r8, #124]	; 0x7c
   161ec:	ldr	r3, [r8, #104]	; 0x68
   161f0:	add	r2, r4, #16
   161f4:	cmp	r2, r3
   161f8:	bhi	16368 <flatcc_builder_create_cached_vtable@@Base+0x244>
   161fc:	ldr	r5, [r8, #100]	; 0x64
   16200:	adds	r6, r5, r4
   16204:	beq	16294 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16208:	ldr	r3, [r8, #124]	; 0x7c
   1620c:	ldr	r0, [sp, #16]
   16210:	ldr	r2, [r8, #152]	; 0x98
   16214:	add	r1, r3, #16
   16218:	str	r1, [r8, #124]	; 0x7c
   1621c:	str	r2, [r6, #4]
   16220:	ldr	r1, [r0, sl, lsl #2]
   16224:	mov	r2, r7
   16228:	str	r1, [r6, #12]
   1622c:	str	r3, [r0, sl, lsl #2]
   16230:	ldr	r1, [sp, #8]
   16234:	mov	r0, r8
   16238:	bl	15fb8 <flatcc_builder_create_vtable@@Base>
   1623c:	cmp	r0, #0
   16240:	str	r0, [r5, r4]
   16244:	beq	16294 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16248:	ldr	r3, [sp, #12]
   1624c:	cmp	r3, #0
   16250:	beq	16398 <flatcc_builder_create_cached_vtable@@Base+0x274>
   16254:	ldr	r3, [r3, #8]
   16258:	str	r3, [r6, #8]
   1625c:	add	sp, sp, #28
   16260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16264:	ldr	r3, [sp, #20]
   16268:	cmp	r3, r9
   1626c:	beq	16288 <flatcc_builder_create_cached_vtable@@Base+0x164>
   16270:	ldr	r2, [sp, #16]
   16274:	ldr	r3, [r4, #12]
   16278:	str	r3, [r9]
   1627c:	ldr	r3, [r2, sl, lsl #2]
   16280:	str	r3, [r4, #12]
   16284:	str	r5, [r2, sl, lsl #2]
   16288:	ldr	r0, [r4]
   1628c:	add	sp, sp, #28
   16290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16294:	mov	r0, #0
   16298:	add	sp, sp, #28
   1629c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162a0:	ldr	r3, [r0, #124]	; 0x7c
   162a4:	add	r5, r0, #92	; 0x5c
   162a8:	cmp	r3, #0
   162ac:	bne	16430 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   162b0:	ldr	r3, [r0, #104]	; 0x68
   162b4:	cmp	r3, #15
   162b8:	bls	1633c <flatcc_builder_create_cached_vtable@@Base+0x218>
   162bc:	ldr	r3, [r8, #100]	; 0x64
   162c0:	cmp	r3, #0
   162c4:	beq	16294 <flatcc_builder_create_cached_vtable@@Base+0x170>
   162c8:	mov	r2, #16
   162cc:	mov	r3, #5
   162d0:	str	r2, [r8, #124]	; 0x7c
   162d4:	ldr	r0, [r8, #40]	; 0x28
   162d8:	mov	r1, r5
   162dc:	str	r3, [sp]
   162e0:	mov	r2, #256	; 0x100
   162e4:	ldr	r5, [r8, #48]	; 0x30
   162e8:	mov	r3, #1
   162ec:	blx	r5
   162f0:	cmp	r0, #0
   162f4:	bne	16294 <flatcc_builder_create_cached_vtable@@Base+0x170>
   162f8:	ldr	r1, [r8, #96]	; 0x60
   162fc:	mov	r3, #256	; 0x100
   16300:	b	16308 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16304:	mov	r3, r2
   16308:	lsl	r2, r3, #1
   1630c:	cmp	r2, r1
   16310:	bls	16304 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   16314:	lsr	r3, r3, #2
   16318:	cmp	r3, #1
   1631c:	bls	163f0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16320:	mov	r2, #1
   16324:	add	r4, r4, #1
   16328:	cmp	r3, r2, lsl r4
   1632c:	bhi	16324 <flatcc_builder_create_cached_vtable@@Base+0x200>
   16330:	rsb	r3, r4, #32
   16334:	str	r4, [r8, #116]	; 0x74
   16338:	b	1614c <flatcc_builder_create_cached_vtable@@Base+0x28>
   1633c:	mov	r3, #6
   16340:	ldr	r0, [r0, #40]	; 0x28
   16344:	mov	r2, #16
   16348:	str	r3, [sp]
   1634c:	add	r1, r8, #100	; 0x64
   16350:	ldr	r6, [r8, #48]	; 0x30
   16354:	mov	r3, r4
   16358:	blx	r6
   1635c:	cmp	r0, #0
   16360:	beq	162bc <flatcc_builder_create_cached_vtable@@Base+0x198>
   16364:	b	1641c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   16368:	mov	r3, #6
   1636c:	ldr	r0, [r8, #40]	; 0x28
   16370:	add	r1, r8, #100	; 0x64
   16374:	str	r3, [sp]
   16378:	mov	r3, #0
   1637c:	ldr	r5, [r8, #48]	; 0x30
   16380:	blx	r5
   16384:	cmp	r0, #0
   16388:	beq	161fc <flatcc_builder_create_cached_vtable@@Base+0xd8>
   1638c:	b	1641c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   16390:	str	r5, [sp, #12]
   16394:	b	161e8 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   16398:	ldr	r3, [r8, #172]	; 0xac
   1639c:	ldr	r9, [r8, #120]	; 0x78
   163a0:	cmp	r3, #0
   163a4:	add	r2, r9, r7
   163a8:	beq	163b4 <flatcc_builder_create_cached_vtable@@Base+0x290>
   163ac:	cmp	r3, r2
   163b0:	bcc	16420 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   163b4:	ldr	r3, [r8, #72]	; 0x48
   163b8:	cmp	r3, r2
   163bc:	bcc	163f8 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   163c0:	ldr	r3, [r8, #68]	; 0x44
   163c4:	adds	r0, r3, r9
   163c8:	beq	16454 <flatcc_builder_create_cached_vtable@@Base+0x330>
   163cc:	ldr	r3, [r8, #120]	; 0x78
   163d0:	ldr	r1, [sp, #8]
   163d4:	add	ip, r3, r7
   163d8:	str	r3, [r6, #8]
   163dc:	mov	r2, r7
   163e0:	str	ip, [r8, #120]	; 0x78
   163e4:	bl	1242c <memcpy@plt>
   163e8:	ldr	r0, [r5, r4]
   163ec:	b	1625c <flatcc_builder_create_cached_vtable@@Base+0x138>
   163f0:	mov	r3, #32
   163f4:	b	16334 <flatcc_builder_create_cached_vtable@@Base+0x210>
   163f8:	mov	r3, #2
   163fc:	ldr	r0, [r8, #40]	; 0x28
   16400:	add	r1, r8, #68	; 0x44
   16404:	str	r3, [sp]
   16408:	mov	r3, #0
   1640c:	ldr	sl, [r8, #48]	; 0x30
   16410:	blx	sl
   16414:	cmp	r0, #0
   16418:	beq	163c0 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   1641c:	bl	124e0 <__assert_fail@plt+0xc>
   16420:	mov	r0, r8
   16424:	bl	14618 <flatcc_builder_flush_vtable_cache@@Base>
   16428:	ldr	r0, [r5, r4]
   1642c:	b	1625c <flatcc_builder_create_cached_vtable@@Base+0x138>
   16430:	ldr	r3, [pc, #36]	; 1645c <flatcc_builder_create_cached_vtable@@Base+0x338>
   16434:	ldr	r1, [pc, #36]	; 16460 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   16438:	ldr	r0, [pc, #36]	; 16464 <flatcc_builder_create_cached_vtable@@Base+0x340>
   1643c:	add	r3, pc, r3
   16440:	ldr	r2, [pc, #32]	; 16468 <flatcc_builder_create_cached_vtable@@Base+0x344>
   16444:	add	r3, r3, #656	; 0x290
   16448:	add	r1, pc, r1
   1644c:	add	r0, pc, r0
   16450:	bl	124d4 <__assert_fail@plt>
   16454:	mvn	r0, #0
   16458:	b	1625c <flatcc_builder_create_cached_vtable@@Base+0x138>
   1645c:	andeq	r6, r0, r8, lsr sp
   16460:	andeq	r7, r0, ip, ror r4
   16464:	andeq	r7, r0, r4, lsr #14
   16468:	andeq	r0, r0, r6, asr r1

0001646c <flatcc_builder_create_table@@Base>:
   1646c:	push	{r4, r5, r6, r7, r8, lr}
   16470:	sub	sp, sp, #88	; 0x58
   16474:	ldr	r8, [pc, #436]	; 16630 <flatcc_builder_create_table@@Base+0x1c4>
   16478:	ldr	r4, [sp, #116]	; 0x74
   1647c:	add	r8, pc, r8
   16480:	cmp	r4, #0
   16484:	ldr	lr, [sp, #120]	; 0x78
   16488:	blt	165c0 <flatcc_builder_create_table@@Base+0x154>
   1648c:	tst	lr, #1
   16490:	beq	1660c <flatcc_builder_create_table@@Base+0x1a0>
   16494:	mov	r5, r0
   16498:	ldrh	r0, [r0, #128]	; 0x80
   1649c:	cmp	r3, #4
   164a0:	movcc	r3, #4
   164a4:	ldr	ip, [r5, #136]	; 0x88
   164a8:	cmp	r0, r3
   164ac:	mvn	r0, #3
   164b0:	strhcc	r3, [r5, #128]	; 0x80
   164b4:	sub	r7, ip, r2
   164b8:	sub	r3, r3, #1
   164bc:	sub	r0, r0, r2
   164c0:	and	r7, r7, r3
   164c4:	add	r0, r0, ip
   164c8:	sub	r3, lr, #1
   164cc:	sub	r0, r0, r7
   164d0:	sub	r3, r0, r3
   164d4:	cmp	r4, #0
   164d8:	str	r3, [sp, #12]
   164dc:	beq	16510 <flatcc_builder_create_table@@Base+0xa4>
   164e0:	ldr	ip, [sp, #112]	; 0x70
   164e4:	mvn	r6, #3
   164e8:	add	r4, ip, r4, lsl #1
   164ec:	sub	r6, r6, r0
   164f0:	ldrh	r3, [ip], #2
   164f4:	sub	lr, r6, r3
   164f8:	ldr	r0, [r1, r3]
   164fc:	cmp	r4, ip
   16500:	add	r0, r0, lr
   16504:	str	r0, [r1, r3]
   16508:	bne	164f0 <flatcc_builder_create_table@@Base+0x84>
   1650c:	ldr	ip, [r5, #136]	; 0x88
   16510:	mov	r3, #4
   16514:	mov	lr, #1
   16518:	add	r0, sp, #12
   1651c:	cmp	r2, #0
   16520:	str	r3, [sp, #16]
   16524:	str	r3, [sp, #28]
   16528:	str	r0, [sp, #24]
   1652c:	str	lr, [sp, #20]
   16530:	beq	1654c <flatcc_builder_create_table@@Base+0xe0>
   16534:	add	r3, r2, r3
   16538:	mov	r0, #2
   1653c:	str	r1, [sp, #32]
   16540:	str	r2, [sp, #36]	; 0x24
   16544:	str	r3, [sp, #16]
   16548:	str	r0, [sp, #20]
   1654c:	cmp	r7, #0
   16550:	beq	16580 <flatcc_builder_create_table@@Base+0x114>
   16554:	ldr	r2, [sp, #20]
   16558:	ldr	r1, [pc, #212]	; 16634 <flatcc_builder_create_table@@Base+0x1c8>
   1655c:	add	r2, r2, #1
   16560:	add	r3, r3, r7
   16564:	str	r3, [sp, #16]
   16568:	ldr	r0, [r8, r1]
   1656c:	add	r1, sp, #88	; 0x58
   16570:	add	r1, r1, r2, lsl #3
   16574:	str	r2, [sp, #20]
   16578:	str	r0, [r1, #-72]	; 0xffffffb8
   1657c:	str	r7, [r1, #-68]	; 0xffffffbc
   16580:	sub	r4, ip, r3
   16584:	cmp	r4, ip
   16588:	bge	16608 <flatcc_builder_create_table@@Base+0x19c>
   1658c:	ldr	r0, [r5, #36]	; 0x24
   16590:	ldr	r2, [sp, #20]
   16594:	str	r3, [sp]
   16598:	add	r1, sp, #24
   1659c:	ldr	r6, [r5, #44]	; 0x2c
   165a0:	mov	r3, r4
   165a4:	blx	r6
   165a8:	cmp	r0, #0
   165ac:	bne	165e4 <flatcc_builder_create_table@@Base+0x178>
   165b0:	mov	r0, r4
   165b4:	str	r4, [r5, #136]	; 0x88
   165b8:	add	sp, sp, #88	; 0x58
   165bc:	pop	{r4, r5, r6, r7, r8, pc}
   165c0:	ldr	r3, [pc, #112]	; 16638 <flatcc_builder_create_table@@Base+0x1cc>
   165c4:	ldr	r1, [pc, #112]	; 1663c <flatcc_builder_create_table@@Base+0x1d0>
   165c8:	ldr	r0, [pc, #112]	; 16640 <flatcc_builder_create_table@@Base+0x1d4>
   165cc:	add	r3, pc, r3
   165d0:	ldr	r2, [pc, #108]	; 16644 <flatcc_builder_create_table@@Base+0x1d8>
   165d4:	add	r3, r3, #668	; 0x29c
   165d8:	add	r1, pc, r1
   165dc:	add	r0, pc, r0
   165e0:	bl	124d4 <__assert_fail@plt>
   165e4:	ldr	r3, [pc, #92]	; 16648 <flatcc_builder_create_table@@Base+0x1dc>
   165e8:	ldr	r1, [pc, #92]	; 1664c <flatcc_builder_create_table@@Base+0x1e0>
   165ec:	ldr	r0, [pc, #92]	; 16650 <flatcc_builder_create_table@@Base+0x1e4>
   165f0:	add	r3, pc, r3
   165f4:	ldr	r2, [pc, #88]	; 16654 <flatcc_builder_create_table@@Base+0x1e8>
   165f8:	add	r3, r3, #28
   165fc:	add	r1, pc, r1
   16600:	add	r0, pc, r0
   16604:	bl	124d4 <__assert_fail@plt>
   16608:	bl	12548 <__assert_fail@plt+0x74>
   1660c:	ldr	r3, [pc, #68]	; 16658 <flatcc_builder_create_table@@Base+0x1ec>
   16610:	ldr	r1, [pc, #68]	; 1665c <flatcc_builder_create_table@@Base+0x1f0>
   16614:	ldr	r0, [pc, #68]	; 16660 <flatcc_builder_create_table@@Base+0x1f4>
   16618:	add	r3, pc, r3
   1661c:	ldr	r2, [pc, #64]	; 16664 <flatcc_builder_create_table@@Base+0x1f8>
   16620:	add	r3, r3, #668	; 0x29c
   16624:	add	r1, pc, r1
   16628:	add	r0, pc, r0
   1662c:	bl	124d4 <__assert_fail@plt>
   16630:	andeq	r8, r1, ip, ror fp
   16634:	andeq	r0, r0, r0, asr r0
   16638:	andeq	r6, r0, r8, lsr #23
   1663c:	andeq	r7, r0, ip, ror #5
   16640:	andeq	r7, r0, r4, lsr #11
   16644:	ldrdeq	r0, [r0], -r5
   16648:	andeq	r6, r0, r4, lsl #23
   1664c:	andeq	r7, r0, r8, asr #5
   16650:	andeq	r7, r0, ip, asr #6
   16654:	andeq	r0, r0, fp, lsl #5
   16658:	andeq	r6, r0, ip, asr fp
   1665c:	andeq	r7, r0, r0, lsr #5
   16660:	andeq	r7, r0, ip, ror #10
   16664:	ldrdeq	r0, [r0], -fp

00016668 <flatcc_builder_check_required_field@@Base>:
   16668:	ldr	r3, [r0, #32]
   1666c:	ldrh	r3, [r3, #14]
   16670:	cmp	r3, #3
   16674:	bne	166a0 <flatcc_builder_check_required_field@@Base+0x38>
   16678:	ldrh	r3, [r0, #8]
   1667c:	cmp	r3, r1
   16680:	movls	r0, #0
   16684:	bls	1669c <flatcc_builder_check_required_field@@Base+0x34>
   16688:	ldr	r3, [r0, #4]
   1668c:	lsl	r1, r1, #1
   16690:	ldrh	r0, [r3, r1]
   16694:	adds	r0, r0, #0
   16698:	movne	r0, #1
   1669c:	bx	lr
   166a0:	ldr	r3, [pc, #32]	; 166c8 <flatcc_builder_check_required_field@@Base+0x60>
   166a4:	ldr	r1, [pc, #32]	; 166cc <flatcc_builder_check_required_field@@Base+0x64>
   166a8:	ldr	r0, [pc, #32]	; 166d0 <flatcc_builder_check_required_field@@Base+0x68>
   166ac:	add	r3, pc, r3
   166b0:	push	{r4, lr}
   166b4:	add	r3, r3, #696	; 0x2b8
   166b8:	ldr	r2, [pc, #20]	; 166d4 <flatcc_builder_check_required_field@@Base+0x6c>
   166bc:	add	r1, pc, r1
   166c0:	add	r0, pc, r0
   166c4:	bl	124d4 <__assert_fail@plt>
   166c8:	andeq	r6, r0, r8, asr #21
   166cc:	andeq	r7, r0, r8, lsl #4
   166d0:	andeq	r7, r0, r0, ror #9
   166d4:	strdeq	r0, [r0], -r8

000166d8 <flatcc_builder_check_union_field@@Base>:
   166d8:	ldr	r3, [r0, #32]
   166dc:	ldrh	r3, [r3, #14]
   166e0:	cmp	r3, #3
   166e4:	bne	16760 <flatcc_builder_check_union_field@@Base+0x88>
   166e8:	cmp	r1, #0
   166ec:	beq	16738 <flatcc_builder_check_union_field@@Base+0x60>
   166f0:	ldrh	r3, [r0, #8]
   166f4:	cmp	r3, r1
   166f8:	bls	16738 <flatcc_builder_check_union_field@@Base+0x60>
   166fc:	sub	r1, r1, #-2147483647	; 0x80000001
   16700:	ldr	r3, [r0, #4]
   16704:	lsl	r1, r1, #1
   16708:	ldrh	r2, [r3, r1]
   1670c:	cmp	r2, #0
   16710:	beq	1674c <flatcc_builder_check_union_field@@Base+0x74>
   16714:	ldr	r0, [r0, #16]
   16718:	add	r1, r3, r1
   1671c:	ldrb	r2, [r0, r2]
   16720:	ldrh	r1, [r1, #2]
   16724:	cmp	r2, #0
   16728:	bne	16740 <flatcc_builder_check_union_field@@Base+0x68>
   1672c:	clz	r0, r1
   16730:	lsr	r0, r0, #5
   16734:	bx	lr
   16738:	mov	r0, #0
   1673c:	bx	lr
   16740:	adds	r0, r1, #0
   16744:	movne	r0, #1
   16748:	b	1673c <flatcc_builder_check_union_field@@Base+0x64>
   1674c:	add	r1, r3, r1
   16750:	ldrh	r1, [r1, #2]
   16754:	clz	r0, r1
   16758:	lsr	r0, r0, #5
   1675c:	bx	lr
   16760:	ldr	r3, [pc, #32]	; 16788 <flatcc_builder_check_union_field@@Base+0xb0>
   16764:	ldr	r1, [pc, #32]	; 1678c <flatcc_builder_check_union_field@@Base+0xb4>
   16768:	ldr	r0, [pc, #32]	; 16790 <flatcc_builder_check_union_field@@Base+0xb8>
   1676c:	add	r3, pc, r3
   16770:	push	{r4, lr}
   16774:	add	r3, r3, #732	; 0x2dc
   16778:	ldr	r2, [pc, #20]	; 16794 <flatcc_builder_check_union_field@@Base+0xbc>
   1677c:	add	r1, pc, r1
   16780:	add	r0, pc, r0
   16784:	bl	124d4 <__assert_fail@plt>
   16788:	andeq	r6, r0, r8, lsl #20
   1678c:	andeq	r7, r0, r8, asr #2
   16790:	andeq	r7, r0, r0, lsr #8
   16794:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00016798 <flatcc_builder_check_required@@Base>:
   16798:	ldr	r3, [r0, #32]
   1679c:	ldrh	r3, [r3, #14]
   167a0:	cmp	r3, #3
   167a4:	bne	16808 <flatcc_builder_check_required@@Base+0x70>
   167a8:	ldrh	r3, [r0, #8]
   167ac:	cmp	r3, r2
   167b0:	movlt	r0, #0
   167b4:	blt	16804 <flatcc_builder_check_required@@Base+0x6c>
   167b8:	cmp	r2, #0
   167bc:	ble	16800 <flatcc_builder_check_required@@Base+0x68>
   167c0:	ldrh	r3, [r1]
   167c4:	ldr	ip, [r0, #4]
   167c8:	lsl	r3, r3, #1
   167cc:	ldrh	r0, [ip, r3]
   167d0:	cmp	r0, #0
   167d4:	beq	16804 <flatcc_builder_check_required@@Base+0x6c>
   167d8:	add	r2, r1, r2, lsl #1
   167dc:	add	r1, r1, #2
   167e0:	b	167f8 <flatcc_builder_check_required@@Base+0x60>
   167e4:	ldrh	r3, [r1], #2
   167e8:	lsl	r3, r3, #1
   167ec:	ldrh	r0, [ip, r3]
   167f0:	cmp	r0, #0
   167f4:	beq	16804 <flatcc_builder_check_required@@Base+0x6c>
   167f8:	cmp	r1, r2
   167fc:	bne	167e4 <flatcc_builder_check_required@@Base+0x4c>
   16800:	mov	r0, #1
   16804:	bx	lr
   16808:	ldr	r3, [pc, #32]	; 16830 <flatcc_builder_check_required@@Base+0x98>
   1680c:	ldr	r1, [pc, #32]	; 16834 <flatcc_builder_check_required@@Base+0x9c>
   16810:	ldr	r0, [pc, #32]	; 16838 <flatcc_builder_check_required@@Base+0xa0>
   16814:	add	r3, pc, r3
   16818:	push	{r4, lr}
   1681c:	add	r3, r3, #768	; 0x300
   16820:	ldr	r2, [pc, #20]	; 1683c <flatcc_builder_check_required@@Base+0xa4>
   16824:	add	r1, pc, r1
   16828:	add	r0, pc, r0
   1682c:	bl	124d4 <__assert_fail@plt>
   16830:	andeq	r6, r0, r0, ror #18
   16834:	andeq	r7, r0, r0, lsr #1
   16838:	andeq	r7, r0, r8, ror r3
   1683c:	andeq	r0, r0, r1, lsl r5

00016840 <flatcc_builder_end_table@@Base>:
   16840:	ldr	r3, [r0, #32]
   16844:	push	{r4, r5, r6, r7, lr}
   16848:	sub	sp, sp, #20
   1684c:	ldrh	r3, [r3, #14]
   16850:	cmp	r3, #3
   16854:	bne	169d8 <flatcc_builder_end_table@@Base+0x198>
   16858:	ldrh	r5, [r0, #8]
   1685c:	ldr	r3, [r0, #12]
   16860:	ldr	r1, [pc, #404]	; 169fc <flatcc_builder_end_table@@Base+0x1bc>
   16864:	add	r5, r5, #2
   16868:	ldr	r2, [r0, #20]
   1686c:	lsl	r5, r5, #1
   16870:	add	r2, r2, #4
   16874:	uxth	r5, r5
   16878:	eor	r3, r3, r5
   1687c:	uxth	r2, r2
   16880:	mul	r3, r1, r3
   16884:	ldr	ip, [r0, #4]
   16888:	eor	r3, r3, r2
   1688c:	sub	r6, ip, #4
   16890:	mul	r1, r1, r3
   16894:	strh	r2, [ip, #-2]
   16898:	strh	r5, [ip, #-4]
   1689c:	mov	r3, r1
   168a0:	str	r1, [r0, #12]
   168a4:	mov	r2, r5
   168a8:	mov	r1, r6
   168ac:	mov	r4, r0
   168b0:	bl	16124 <flatcc_builder_create_cached_vtable@@Base>
   168b4:	subs	r7, r0, #0
   168b8:	bne	168cc <flatcc_builder_end_table@@Base+0x8c>
   168bc:	mov	r5, #0
   168c0:	mov	r0, r5
   168c4:	add	sp, sp, #20
   168c8:	pop	{r4, r5, r6, r7, pc}
   168cc:	mov	r2, r5
   168d0:	mov	r1, #0
   168d4:	mov	r0, r6
   168d8:	bl	124a4 <memset@plt>
   168dc:	ldr	r3, [r4, #32]
   168e0:	ldr	ip, [r4, #76]	; 0x4c
   168e4:	ldr	r0, [r4]
   168e8:	ldr	r2, [r3, #20]
   168ec:	ldr	r1, [r4, #16]
   168f0:	add	ip, ip, r2
   168f4:	sub	r0, r0, ip
   168f8:	ldrh	r3, [r4, #130]	; 0x82
   168fc:	asr	r0, r0, #1
   16900:	ldr	r2, [r4, #20]
   16904:	str	r0, [sp, #4]
   16908:	str	r7, [sp, #8]
   1690c:	str	ip, [sp]
   16910:	mov	r0, r4
   16914:	bl	1646c <flatcc_builder_create_table@@Base>
   16918:	subs	r5, r0, #0
   1691c:	beq	168bc <flatcc_builder_end_table@@Base+0x7c>
   16920:	ldr	r3, [r4, #32]
   16924:	ldr	r0, [r4, #52]	; 0x34
   16928:	ldr	ip, [r4, #76]	; 0x4c
   1692c:	ldr	r1, [r3, #24]
   16930:	ldr	r2, [r4, #20]
   16934:	str	r1, [r4, #12]
   16938:	ldrh	lr, [r3, #28]
   1693c:	mov	r1, #0
   16940:	strh	lr, [r4, #8]
   16944:	ldr	lr, [r3, #16]
   16948:	add	r0, r0, lr
   1694c:	str	r0, [r4, #4]
   16950:	ldr	r3, [r3, #20]
   16954:	ldr	r0, [r4, #16]
   16958:	add	r3, ip, r3
   1695c:	str	r3, [r4]
   16960:	bl	124a4 <memset@plt>
   16964:	ldr	r3, [r4, #32]
   16968:	ldr	r2, [r4, #64]	; 0x40
   1696c:	ldrh	lr, [r4, #130]	; 0x82
   16970:	ldr	ip, [r3]
   16974:	ldr	r1, [r3, #4]
   16978:	ldrh	r0, [r4, #128]	; 0x80
   1697c:	sub	r2, r2, ip
   16980:	cmp	r2, r1
   16984:	movcs	r2, r1
   16988:	cmp	r0, lr
   1698c:	ldr	r0, [r4, #60]	; 0x3c
   16990:	ldr	r6, [r3, #8]
   16994:	str	r2, [r4, #24]
   16998:	add	r2, r0, ip
   1699c:	str	r2, [r4, #16]
   169a0:	str	r6, [r4, #20]
   169a4:	ldr	r2, [r4, #156]	; 0x9c
   169a8:	str	ip, [r4, #28]
   169ac:	str	r1, [r3, #4]
   169b0:	strhcc	lr, [r4, #128]	; 0x80
   169b4:	ldrh	r1, [r3, #12]
   169b8:	sub	r2, r2, #1
   169bc:	sub	r3, r3, #36	; 0x24
   169c0:	mov	r0, r5
   169c4:	str	r2, [r4, #156]	; 0x9c
   169c8:	strh	r1, [r4, #130]	; 0x82
   169cc:	str	r3, [r4, #32]
   169d0:	add	sp, sp, #20
   169d4:	pop	{r4, r5, r6, r7, pc}
   169d8:	ldr	r3, [pc, #32]	; 16a00 <flatcc_builder_end_table@@Base+0x1c0>
   169dc:	ldr	r1, [pc, #32]	; 16a04 <flatcc_builder_end_table@@Base+0x1c4>
   169e0:	ldr	r0, [pc, #32]	; 16a08 <flatcc_builder_end_table@@Base+0x1c8>
   169e4:	add	r3, pc, r3
   169e8:	ldr	r2, [pc, #28]	; 16a0c <flatcc_builder_end_table@@Base+0x1cc>
   169ec:	add	r3, r3, #800	; 0x320
   169f0:	add	r1, pc, r1
   169f4:	add	r0, pc, r0
   169f8:	bl	124d4 <__assert_fail@plt>
   169fc:			; <UNDEFINED> instruction: 0x9e3779b1
   16a00:	muleq	r0, r0, r7
   16a04:	ldrdeq	r6, [r0], -r4
   16a08:	andeq	r7, r0, ip, lsr #3
   16a0c:	andeq	r0, r0, r5, lsr #10

00016a10 <flatcc_builder_create_vector@@Base>:
   16a10:	push	{r4, r5, r6, lr}
   16a14:	sub	sp, sp, #88	; 0x58
   16a18:	ldr	lr, [pc, #320]	; 16b60 <flatcc_builder_create_vector@@Base+0x150>
   16a1c:	ldr	ip, [sp, #108]	; 0x6c
   16a20:	mov	r4, r0
   16a24:	cmp	r2, ip
   16a28:	add	lr, pc, lr
   16a2c:	ldrh	r0, [sp, #104]	; 0x68
   16a30:	bhi	16b14 <flatcc_builder_create_vector@@Base+0x104>
   16a34:	ldrh	ip, [r4, #128]	; 0x80
   16a38:	cmp	r0, #4
   16a3c:	mul	r3, r3, r2
   16a40:	movcc	r0, #4
   16a44:	ldr	r6, [r4, #136]	; 0x88
   16a48:	cmp	ip, r0
   16a4c:	strhcc	r0, [r4, #128]	; 0x80
   16a50:	sub	r5, r6, r3
   16a54:	sub	r0, r0, #1
   16a58:	mov	ip, #4
   16a5c:	str	r2, [sp, #12]
   16a60:	and	r0, r0, r5
   16a64:	add	r2, sp, #12
   16a68:	mov	r5, #1
   16a6c:	cmp	r3, #0
   16a70:	str	ip, [sp, #16]
   16a74:	str	ip, [sp, #28]
   16a78:	str	r2, [sp, #24]
   16a7c:	str	r5, [sp, #20]
   16a80:	bne	16af8 <flatcc_builder_create_vector@@Base+0xe8>
   16a84:	cmp	r0, #0
   16a88:	beq	16ab8 <flatcc_builder_create_vector@@Base+0xa8>
   16a8c:	ldr	r3, [sp, #20]
   16a90:	ldr	r2, [pc, #204]	; 16b64 <flatcc_builder_create_vector@@Base+0x154>
   16a94:	add	r3, r3, #1
   16a98:	add	ip, ip, r0
   16a9c:	str	ip, [sp, #16]
   16aa0:	ldr	r1, [lr, r2]
   16aa4:	add	r2, sp, #88	; 0x58
   16aa8:	add	r2, r2, r3, lsl #3
   16aac:	str	r3, [sp, #20]
   16ab0:	str	r1, [r2, #-72]	; 0xffffffb8
   16ab4:	str	r0, [r2, #-68]	; 0xffffffbc
   16ab8:	sub	r5, r6, ip
   16abc:	cmp	r6, r5
   16ac0:	ble	16b5c <flatcc_builder_create_vector@@Base+0x14c>
   16ac4:	ldr	r0, [r4, #36]	; 0x24
   16ac8:	ldr	r2, [sp, #20]
   16acc:	str	ip, [sp]
   16ad0:	mov	r3, r5
   16ad4:	ldr	r6, [r4, #44]	; 0x2c
   16ad8:	add	r1, sp, #24
   16adc:	blx	r6
   16ae0:	cmp	r0, #0
   16ae4:	bne	16b38 <flatcc_builder_create_vector@@Base+0x128>
   16ae8:	mov	r0, r5
   16aec:	str	r5, [r4, #136]	; 0x88
   16af0:	add	sp, sp, #88	; 0x58
   16af4:	pop	{r4, r5, r6, pc}
   16af8:	add	ip, r3, ip
   16afc:	mov	r2, #2
   16b00:	str	r1, [sp, #32]
   16b04:	str	r3, [sp, #36]	; 0x24
   16b08:	str	ip, [sp, #16]
   16b0c:	str	r2, [sp, #20]
   16b10:	b	16a84 <flatcc_builder_create_vector@@Base+0x74>
   16b14:	ldr	r3, [pc, #76]	; 16b68 <flatcc_builder_create_vector@@Base+0x158>
   16b18:	ldr	r1, [pc, #76]	; 16b6c <flatcc_builder_create_vector@@Base+0x15c>
   16b1c:	ldr	r0, [pc, #76]	; 16b70 <flatcc_builder_create_vector@@Base+0x160>
   16b20:	add	r3, pc, r3
   16b24:	ldr	r2, [pc, #72]	; 16b74 <flatcc_builder_create_vector@@Base+0x164>
   16b28:	add	r3, r3, #828	; 0x33c
   16b2c:	add	r1, pc, r1
   16b30:	add	r0, pc, r0
   16b34:	bl	124d4 <__assert_fail@plt>
   16b38:	ldr	r3, [pc, #56]	; 16b78 <flatcc_builder_create_vector@@Base+0x168>
   16b3c:	ldr	r1, [pc, #56]	; 16b7c <flatcc_builder_create_vector@@Base+0x16c>
   16b40:	ldr	r0, [pc, #56]	; 16b80 <flatcc_builder_create_vector@@Base+0x170>
   16b44:	add	r3, pc, r3
   16b48:	ldr	r2, [pc, #52]	; 16b84 <flatcc_builder_create_vector@@Base+0x174>
   16b4c:	add	r3, r3, #28
   16b50:	add	r1, pc, r1
   16b54:	add	r0, pc, r0
   16b58:	bl	124d4 <__assert_fail@plt>
   16b5c:	bl	12548 <__assert_fail@plt+0x74>
   16b60:	ldrdeq	r8, [r1], -r0
   16b64:	andeq	r0, r0, r0, asr r0
   16b68:	andeq	r6, r0, r4, asr r6
   16b6c:	muleq	r0, r8, sp
   16b70:	muleq	r0, ip, r0
   16b74:	andeq	r0, r0, r5, asr r5
   16b78:	andeq	r6, r0, r0, lsr r6
   16b7c:	andeq	r6, r0, r4, ror sp
   16b80:	strdeq	r6, [r0], -r8
   16b84:	andeq	r0, r0, fp, lsl #5

00016b88 <flatcc_builder_end_vector@@Base>:
   16b88:	ldr	r1, [r0, #32]
   16b8c:	push	{r4, r5, r6, lr}
   16b90:	sub	sp, sp, #8
   16b94:	ldrh	r3, [r1, #14]
   16b98:	cmp	r3, #4
   16b9c:	bne	16c50 <flatcc_builder_end_vector@@Base+0xc8>
   16ba0:	ldrh	lr, [r0, #130]	; 0x82
   16ba4:	ldr	ip, [r1, #24]
   16ba8:	ldr	r3, [r1, #16]
   16bac:	ldr	r2, [r1, #20]
   16bb0:	ldr	r1, [r0, #16]
   16bb4:	str	lr, [sp]
   16bb8:	str	ip, [sp, #4]
   16bbc:	mov	r4, r0
   16bc0:	bl	16a10 <flatcc_builder_create_vector@@Base>
   16bc4:	subs	r5, r0, #0
   16bc8:	beq	16c44 <flatcc_builder_end_vector@@Base+0xbc>
   16bcc:	ldr	r2, [r4, #20]
   16bd0:	mov	r1, #0
   16bd4:	ldr	r0, [r4, #16]
   16bd8:	bl	124a4 <memset@plt>
   16bdc:	ldr	r3, [r4, #32]
   16be0:	ldr	r2, [r4, #64]	; 0x40
   16be4:	ldrh	lr, [r4, #130]	; 0x82
   16be8:	ldr	ip, [r3]
   16bec:	ldr	r1, [r3, #4]
   16bf0:	ldrh	r0, [r4, #128]	; 0x80
   16bf4:	sub	r2, r2, ip
   16bf8:	cmp	r2, r1
   16bfc:	movcs	r2, r1
   16c00:	cmp	r0, lr
   16c04:	ldr	r0, [r4, #60]	; 0x3c
   16c08:	ldr	r6, [r3, #8]
   16c0c:	str	r2, [r4, #24]
   16c10:	add	r2, r0, ip
   16c14:	str	r2, [r4, #16]
   16c18:	str	r6, [r4, #20]
   16c1c:	ldr	r2, [r4, #156]	; 0x9c
   16c20:	str	ip, [r4, #28]
   16c24:	str	r1, [r3, #4]
   16c28:	strhcc	lr, [r4, #128]	; 0x80
   16c2c:	ldrh	r1, [r3, #12]
   16c30:	sub	r2, r2, #1
   16c34:	sub	r3, r3, #36	; 0x24
   16c38:	str	r2, [r4, #156]	; 0x9c
   16c3c:	strh	r1, [r4, #130]	; 0x82
   16c40:	str	r3, [r4, #32]
   16c44:	mov	r0, r5
   16c48:	add	sp, sp, #8
   16c4c:	pop	{r4, r5, r6, pc}
   16c50:	ldr	r3, [pc, #28]	; 16c74 <flatcc_builder_end_vector@@Base+0xec>
   16c54:	ldr	r1, [pc, #28]	; 16c78 <flatcc_builder_end_vector@@Base+0xf0>
   16c58:	ldr	r0, [pc, #28]	; 16c7c <flatcc_builder_end_vector@@Base+0xf4>
   16c5c:	add	r3, pc, r3
   16c60:	ldr	r2, [pc, #24]	; 16c80 <flatcc_builder_end_vector@@Base+0xf8>
   16c64:	add	r3, r3, #860	; 0x35c
   16c68:	add	r1, pc, r1
   16c6c:	add	r0, pc, r0
   16c70:	bl	124d4 <__assert_fail@plt>
   16c74:	andeq	r6, r0, r8, lsl r5
   16c78:	andeq	r6, r0, ip, asr ip
   16c7c:	andeq	r6, r0, r8, lsr #27
   16c80:	andeq	r0, r0, r8, ror r5

00016c84 <flatcc_builder_vector_count@@Base>:
   16c84:	ldr	r3, [r0, #32]
   16c88:	ldr	r0, [r3, #20]
   16c8c:	bx	lr

00016c90 <flatcc_builder_vector_edit@@Base>:
   16c90:	ldr	r0, [r0, #16]
   16c94:	bx	lr

00016c98 <flatcc_builder_create_offset_vector_direct@@Base>:
   16c98:	cmn	r2, #-1073741823	; 0xc0000001
   16c9c:	bls	16ca8 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   16ca0:	mov	r0, #0
   16ca4:	bx	lr
   16ca8:	mov	r3, #0
   16cac:	b	143e8 <flatcc_builder_default_alloc@@Base+0x350>

00016cb0 <flatcc_builder_end_offset_vector@@Base>:
   16cb0:	ldr	r3, [r0, #32]
   16cb4:	push	{r4, r5, r6, lr}
   16cb8:	ldrh	r2, [r3, #14]
   16cbc:	cmp	r2, #5
   16cc0:	bne	16d5c <flatcc_builder_end_offset_vector@@Base+0xac>
   16cc4:	ldr	r2, [r3, #20]
   16cc8:	ldr	r1, [r0, #16]
   16ccc:	mov	r4, r0
   16cd0:	bl	16c98 <flatcc_builder_create_offset_vector_direct@@Base>
   16cd4:	subs	r5, r0, #0
   16cd8:	beq	16d54 <flatcc_builder_end_offset_vector@@Base+0xa4>
   16cdc:	ldr	r2, [r4, #20]
   16ce0:	mov	r1, #0
   16ce4:	ldr	r0, [r4, #16]
   16ce8:	bl	124a4 <memset@plt>
   16cec:	ldr	r3, [r4, #32]
   16cf0:	ldr	r2, [r4, #64]	; 0x40
   16cf4:	ldrh	lr, [r4, #130]	; 0x82
   16cf8:	ldr	ip, [r3]
   16cfc:	ldr	r1, [r3, #4]
   16d00:	ldrh	r0, [r4, #128]	; 0x80
   16d04:	sub	r2, r2, ip
   16d08:	cmp	r2, r1
   16d0c:	movcs	r2, r1
   16d10:	cmp	r0, lr
   16d14:	ldr	r0, [r4, #60]	; 0x3c
   16d18:	ldr	r6, [r3, #8]
   16d1c:	str	r2, [r4, #24]
   16d20:	add	r2, r0, ip
   16d24:	str	r2, [r4, #16]
   16d28:	str	r6, [r4, #20]
   16d2c:	ldr	r2, [r4, #156]	; 0x9c
   16d30:	str	ip, [r4, #28]
   16d34:	str	r1, [r3, #4]
   16d38:	strhcc	lr, [r4, #128]	; 0x80
   16d3c:	ldrh	r1, [r3, #12]
   16d40:	sub	r2, r2, #1
   16d44:	sub	r3, r3, #36	; 0x24
   16d48:	str	r2, [r4, #156]	; 0x9c
   16d4c:	strh	r1, [r4, #130]	; 0x82
   16d50:	str	r3, [r4, #32]
   16d54:	mov	r0, r5
   16d58:	pop	{r4, r5, r6, pc}
   16d5c:	ldr	r3, [pc, #28]	; 16d80 <flatcc_builder_end_offset_vector@@Base+0xd0>
   16d60:	ldr	r1, [pc, #28]	; 16d84 <flatcc_builder_end_offset_vector@@Base+0xd4>
   16d64:	ldr	r0, [pc, #28]	; 16d88 <flatcc_builder_end_offset_vector@@Base+0xd8>
   16d68:	add	r3, pc, r3
   16d6c:	ldr	r2, [pc, #24]	; 16d8c <flatcc_builder_end_offset_vector@@Base+0xdc>
   16d70:	add	r3, r3, #888	; 0x378
   16d74:	add	r1, pc, r1
   16d78:	add	r0, pc, r0
   16d7c:	bl	124d4 <__assert_fail@plt>
   16d80:	andeq	r6, r0, ip, lsl #8
   16d84:	andeq	r6, r0, r0, asr fp
   16d88:	andeq	r6, r0, r8, lsl #26
   16d8c:	andeq	r0, r0, r8, asr #11

00016d90 <flatcc_builder_create_offset_vector@@Base>:
   16d90:	push	{r4, r5, r6, lr}
   16d94:	mov	r6, r1
   16d98:	mov	r5, r2
   16d9c:	mov	r4, r0
   16da0:	bl	15c64 <flatcc_builder_start_offset_vector@@Base>
   16da4:	cmp	r0, #0
   16da8:	beq	16db4 <flatcc_builder_create_offset_vector@@Base+0x24>
   16dac:	mov	r0, #0
   16db0:	pop	{r4, r5, r6, pc}
   16db4:	mov	r1, r5
   16db8:	mov	r0, r4
   16dbc:	bl	155fc <flatcc_builder_extend_offset_vector@@Base>
   16dc0:	cmp	r0, #0
   16dc4:	beq	16dac <flatcc_builder_create_offset_vector@@Base+0x1c>
   16dc8:	lsl	r2, r5, #2
   16dcc:	mov	r1, r6
   16dd0:	bl	1242c <memcpy@plt>
   16dd4:	mov	r0, r4
   16dd8:	pop	{r4, r5, r6, lr}
   16ddc:	b	16cb0 <flatcc_builder_end_offset_vector@@Base>

00016de0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16de0:	ldr	r2, [r0, #32]
   16de4:	push	{r4, r5, r6, lr}
   16de8:	ldrh	ip, [r2, #14]
   16dec:	cmp	ip, #5
   16df0:	bne	16ea4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   16df4:	ldr	r2, [r2, #20]
   16df8:	cmn	r2, #-1073741823	; 0xc0000001
   16dfc:	bls	16e0c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   16e00:	mov	r5, #0
   16e04:	mov	r0, r5
   16e08:	pop	{r4, r5, r6, pc}
   16e0c:	mov	r3, r1
   16e10:	ldr	r1, [r0, #16]
   16e14:	mov	r4, r0
   16e18:	bl	143e8 <flatcc_builder_default_alloc@@Base+0x350>
   16e1c:	subs	r5, r0, #0
   16e20:	beq	16e00 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   16e24:	ldr	r2, [r4, #20]
   16e28:	mov	r1, #0
   16e2c:	ldr	r0, [r4, #16]
   16e30:	bl	124a4 <memset@plt>
   16e34:	ldr	r3, [r4, #32]
   16e38:	ldr	r2, [r4, #64]	; 0x40
   16e3c:	ldrh	lr, [r4, #130]	; 0x82
   16e40:	ldr	ip, [r3]
   16e44:	ldr	r1, [r3, #4]
   16e48:	ldrh	r0, [r4, #128]	; 0x80
   16e4c:	sub	r2, r2, ip
   16e50:	cmp	r2, r1
   16e54:	movcs	r2, r1
   16e58:	cmp	r0, lr
   16e5c:	ldr	r0, [r4, #60]	; 0x3c
   16e60:	ldr	r6, [r3, #8]
   16e64:	str	r2, [r4, #24]
   16e68:	add	r2, r0, ip
   16e6c:	str	r2, [r4, #16]
   16e70:	str	r6, [r4, #20]
   16e74:	ldr	r2, [r4, #156]	; 0x9c
   16e78:	str	ip, [r4, #28]
   16e7c:	str	r1, [r3, #4]
   16e80:	strhcc	lr, [r4, #128]	; 0x80
   16e84:	ldrh	r1, [r3, #12]
   16e88:	sub	r2, r2, #1
   16e8c:	sub	r3, r3, #36	; 0x24
   16e90:	str	r2, [r4, #156]	; 0x9c
   16e94:	strh	r1, [r4, #130]	; 0x82
   16e98:	str	r3, [r4, #32]
   16e9c:	mov	r0, r5
   16ea0:	pop	{r4, r5, r6, pc}
   16ea4:	ldr	r3, [pc, #28]	; 16ec8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   16ea8:	ldr	r1, [pc, #28]	; 16ecc <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   16eac:	ldr	r0, [pc, #28]	; 16ed0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   16eb0:	add	r3, pc, r3
   16eb4:	ldr	r2, [pc, #24]	; 16ed4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   16eb8:	add	r3, r3, #924	; 0x39c
   16ebc:	add	r1, pc, r1
   16ec0:	add	r0, pc, r0
   16ec4:	bl	124d4 <__assert_fail@plt>
   16ec8:	andeq	r6, r0, r4, asr #5
   16ecc:	andeq	r6, r0, r8, lsl #20
   16ed0:	andeq	r6, r0, r0, asr #23
   16ed4:	ldrdeq	r0, [r0], -r5

00016ed8 <flatcc_builder_offset_vector_edit@@Base>:
   16ed8:	ldr	r0, [r0, #16]
   16edc:	bx	lr

00016ee0 <flatcc_builder_offset_vector_count@@Base>:
   16ee0:	ldr	r3, [r0, #32]
   16ee4:	ldr	r0, [r3, #20]
   16ee8:	bx	lr

00016eec <flatcc_builder_create_union_vector_direct@@Base>:
   16eec:	push	{r4, r5, r6, r7, r8, lr}
   16ef0:	sub	sp, sp, #8
   16ef4:	mov	r4, r0
   16ef8:	ldr	r5, [sp, #32]
   16efc:	cmn	r5, #-1073741823	; 0xc0000001
   16f00:	bls	16f1c <flatcc_builder_create_union_vector_direct@@Base+0x30>
   16f04:	mov	r3, #0
   16f08:	mov	r0, r4
   16f0c:	str	r3, [r4]
   16f10:	str	r3, [r4, #4]
   16f14:	add	sp, sp, #8
   16f18:	pop	{r4, r5, r6, r7, r8, pc}
   16f1c:	mov	r6, r1
   16f20:	mov	r7, r2
   16f24:	mov	r1, r3
   16f28:	mov	r0, r6
   16f2c:	mov	r3, r2
   16f30:	mov	r2, r5
   16f34:	bl	143e8 <flatcc_builder_default_alloc@@Base+0x350>
   16f38:	subs	r8, r0, #0
   16f3c:	beq	16f04 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   16f40:	mvn	ip, #0
   16f44:	mov	r3, #1
   16f48:	mov	r2, r5
   16f4c:	mov	r1, r7
   16f50:	mov	r0, r6
   16f54:	stm	sp, {r3, ip}
   16f58:	bl	16a10 <flatcc_builder_create_vector@@Base>
   16f5c:	stm	r4, {r0, r8}
   16f60:	mov	r0, r4
   16f64:	add	sp, sp, #8
   16f68:	pop	{r4, r5, r6, r7, r8, pc}

00016f6c <flatcc_builder_create_union_vector@@Base>:
   16f6c:	push	{r4, r5, r6, r7, r8, lr}
   16f70:	mov	r6, r0
   16f74:	sub	sp, sp, #16
   16f78:	mov	r0, r1
   16f7c:	mov	r5, r1
   16f80:	mov	r4, r2
   16f84:	mov	r7, r3
   16f88:	bl	15c64 <flatcc_builder_start_offset_vector@@Base>
   16f8c:	cmp	r0, #0
   16f90:	beq	16fac <flatcc_builder_create_union_vector@@Base+0x40>
   16f94:	mov	r3, #0
   16f98:	mov	r0, r6
   16f9c:	str	r3, [r6]
   16fa0:	str	r3, [r6, #4]
   16fa4:	add	sp, sp, #16
   16fa8:	pop	{r4, r5, r6, r7, r8, pc}
   16fac:	mov	r1, r7
   16fb0:	mov	r0, r5
   16fb4:	bl	155fc <flatcc_builder_extend_offset_vector@@Base>
   16fb8:	cmp	r0, #0
   16fbc:	beq	16f94 <flatcc_builder_create_union_vector@@Base+0x28>
   16fc0:	ldr	r8, [r5, #20]
   16fc4:	ldr	r3, [r5, #24]
   16fc8:	add	r1, r7, r8
   16fcc:	cmp	r1, r3
   16fd0:	str	r1, [r5, #20]
   16fd4:	bcs	170cc <flatcc_builder_create_union_vector@@Base+0x160>
   16fd8:	ldr	r2, [r5, #16]
   16fdc:	adds	r8, r2, r8
   16fe0:	beq	16f94 <flatcc_builder_create_union_vector@@Base+0x28>
   16fe4:	mov	r0, r5
   16fe8:	bl	16ed8 <flatcc_builder_offset_vector_edit@@Base>
   16fec:	cmp	r7, #0
   16ff0:	movne	r1, r4
   16ff4:	subne	lr, r8, #1
   16ff8:	mov	r3, r0
   16ffc:	addne	r2, r1, r7, lsl #3
   17000:	subne	ip, r0, #4
   17004:	beq	17024 <flatcc_builder_create_union_vector@@Base+0xb8>
   17008:	ldrb	r4, [r1]
   1700c:	add	r1, r1, #8
   17010:	strb	r4, [lr, #1]!
   17014:	ldr	r4, [r1, #-4]
   17018:	cmp	r2, r1
   1701c:	str	r4, [ip, #4]!
   17020:	bne	17008 <flatcc_builder_create_union_vector@@Base+0x9c>
   17024:	str	r7, [sp]
   17028:	mov	r2, r8
   1702c:	mov	r1, r5
   17030:	add	r0, sp, #8
   17034:	bl	16eec <flatcc_builder_create_union_vector_direct@@Base>
   17038:	ldr	r2, [r5, #20]
   1703c:	mov	r1, #0
   17040:	ldr	r0, [r5, #16]
   17044:	ldr	r7, [sp, #8]
   17048:	ldr	r4, [sp, #12]
   1704c:	bl	124a4 <memset@plt>
   17050:	ldr	r3, [r5, #32]
   17054:	ldr	r2, [r5, #64]	; 0x40
   17058:	ldrh	lr, [r5, #130]	; 0x82
   1705c:	ldr	ip, [r3]
   17060:	ldr	r1, [r3, #4]
   17064:	ldrh	r0, [r5, #128]	; 0x80
   17068:	sub	r2, r2, ip
   1706c:	cmp	r2, r1
   17070:	movcs	r2, r1
   17074:	cmp	r0, lr
   17078:	ldr	r0, [r5, #60]	; 0x3c
   1707c:	ldr	r8, [r3, #8]
   17080:	str	r2, [r5, #24]
   17084:	add	r2, r0, ip
   17088:	str	r2, [r5, #16]
   1708c:	str	r8, [r5, #20]
   17090:	ldr	r2, [r5, #156]	; 0x9c
   17094:	str	ip, [r5, #28]
   17098:	str	r1, [r3, #4]
   1709c:	strhcc	lr, [r5, #128]	; 0x80
   170a0:	ldrh	r1, [r3, #12]
   170a4:	sub	r2, r2, #1
   170a8:	sub	r3, r3, #36	; 0x24
   170ac:	mov	r0, r6
   170b0:	str	r7, [r6]
   170b4:	str	r4, [r6, #4]
   170b8:	str	r2, [r5, #156]	; 0x9c
   170bc:	strh	r1, [r5, #130]	; 0x82
   170c0:	str	r3, [r5, #32]
   170c4:	add	sp, sp, #16
   170c8:	pop	{r4, r5, r6, r7, r8, pc}
   170cc:	add	r1, r1, #1
   170d0:	mvn	r2, #3
   170d4:	mov	r0, r5
   170d8:	bl	14024 <test@@Base+0x18b4>
   170dc:	cmp	r0, #0
   170e0:	beq	16fd8 <flatcc_builder_create_union_vector@@Base+0x6c>
   170e4:	b	16f94 <flatcc_builder_create_union_vector@@Base+0x28>

000170e8 <flatcc_builder_start_union_vector@@Base>:
   170e8:	push	{r4, lr}
   170ec:	mov	r1, #4
   170f0:	mov	r4, r0
   170f4:	bl	142d4 <flatcc_builder_default_alloc@@Base+0x23c>
   170f8:	cmp	r0, #0
   170fc:	bne	17148 <flatcc_builder_start_union_vector@@Base+0x60>
   17100:	ldr	r3, [r4, #32]
   17104:	mov	r2, #8
   17108:	mov	lr, #7
   1710c:	str	r0, [r3, #20]
   17110:	str	r2, [r3, #16]
   17114:	ldr	ip, [r4, #28]
   17118:	ldr	r2, [r4, #64]	; 0x40
   1711c:	ldr	r1, [r4, #60]	; 0x3c
   17120:	sub	r2, r2, ip
   17124:	cmn	r2, #4
   17128:	mvnhi	r2, #3
   1712c:	strh	lr, [r3, #14]
   17130:	add	r1, r1, ip
   17134:	str	r2, [r4, #24]
   17138:	mvn	r2, #3
   1713c:	str	r1, [r4, #16]
   17140:	str	r2, [r3, #4]
   17144:	pop	{r4, pc}
   17148:	mvn	r0, #0
   1714c:	pop	{r4, pc}

00017150 <flatcc_builder_union_vector_edit@@Base>:
   17150:	ldr	r0, [r0, #16]
   17154:	bx	lr

00017158 <flatcc_builder_union_vector_count@@Base>:
   17158:	ldr	r3, [r0, #32]
   1715c:	ldr	r0, [r3, #20]
   17160:	bx	lr

00017164 <flatcc_builder_end_union_vector@@Base>:
   17164:	ldr	r3, [r1, #32]
   17168:	push	{r4, r5, r6, r7, r8, lr}
   1716c:	sub	sp, sp, #16
   17170:	ldrh	r3, [r3, #14]
   17174:	cmp	r3, #7
   17178:	bne	172d0 <flatcc_builder_end_union_vector@@Base+0x16c>
   1717c:	mov	r5, r0
   17180:	mov	r0, r1
   17184:	mov	r4, r1
   17188:	bl	17158 <flatcc_builder_union_vector_count@@Base>
   1718c:	ldr	r8, [r4, #20]
   17190:	ldr	r3, [r4, #24]
   17194:	lsl	r7, r0, #2
   17198:	add	r1, r7, r0
   1719c:	add	r1, r1, r8
   171a0:	cmp	r1, r3
   171a4:	mov	r6, r0
   171a8:	str	r1, [r4, #20]
   171ac:	bcs	172a0 <flatcc_builder_end_union_vector@@Base+0x13c>
   171b0:	ldr	r3, [r4, #16]
   171b4:	adds	r8, r3, r8
   171b8:	beq	172b8 <flatcc_builder_end_union_vector@@Base+0x154>
   171bc:	mov	r0, r4
   171c0:	bl	17150 <flatcc_builder_union_vector_edit@@Base>
   171c4:	cmp	r6, #0
   171c8:	add	r2, r8, r7
   171cc:	subne	ip, r2, #1
   171d0:	subne	r1, r8, #4
   171d4:	addne	r7, r0, r6, lsl #3
   171d8:	beq	171f8 <flatcc_builder_end_union_vector@@Base+0x94>
   171dc:	ldrb	lr, [r0]
   171e0:	add	r0, r0, #8
   171e4:	strb	lr, [ip, #1]!
   171e8:	ldr	lr, [r0, #-4]
   171ec:	cmp	r0, r7
   171f0:	str	lr, [r1, #4]!
   171f4:	bne	171dc <flatcc_builder_end_union_vector@@Base+0x78>
   171f8:	mov	r3, r8
   171fc:	str	r6, [sp]
   17200:	mov	r1, r4
   17204:	add	r0, sp, #8
   17208:	bl	16eec <flatcc_builder_create_union_vector_direct@@Base>
   1720c:	ldr	r2, [r4, #20]
   17210:	mov	r1, #0
   17214:	ldr	r0, [r4, #16]
   17218:	ldr	r7, [sp, #8]
   1721c:	ldr	r6, [sp, #12]
   17220:	bl	124a4 <memset@plt>
   17224:	ldr	r3, [r4, #32]
   17228:	ldr	r2, [r4, #64]	; 0x40
   1722c:	ldrh	lr, [r4, #130]	; 0x82
   17230:	ldr	ip, [r3]
   17234:	ldr	r1, [r3, #4]
   17238:	ldrh	r0, [r4, #128]	; 0x80
   1723c:	sub	r2, r2, ip
   17240:	cmp	r2, r1
   17244:	movcs	r2, r1
   17248:	cmp	r0, lr
   1724c:	ldr	r0, [r4, #60]	; 0x3c
   17250:	ldr	r8, [r3, #8]
   17254:	str	r2, [r4, #24]
   17258:	add	r2, r0, ip
   1725c:	str	r2, [r4, #16]
   17260:	str	r8, [r4, #20]
   17264:	ldr	r2, [r4, #156]	; 0x9c
   17268:	str	ip, [r4, #28]
   1726c:	str	r1, [r3, #4]
   17270:	strhcc	lr, [r4, #128]	; 0x80
   17274:	ldrh	r1, [r3, #12]
   17278:	sub	r2, r2, #1
   1727c:	sub	r3, r3, #36	; 0x24
   17280:	mov	r0, r5
   17284:	str	r7, [r5]
   17288:	str	r6, [r5, #4]
   1728c:	str	r2, [r4, #156]	; 0x9c
   17290:	strh	r1, [r4, #130]	; 0x82
   17294:	str	r3, [r4, #32]
   17298:	add	sp, sp, #16
   1729c:	pop	{r4, r5, r6, r7, r8, pc}
   172a0:	add	r1, r1, #1
   172a4:	mvn	r2, #3
   172a8:	mov	r0, r4
   172ac:	bl	14024 <test@@Base+0x18b4>
   172b0:	cmp	r0, #0
   172b4:	beq	171b0 <flatcc_builder_end_union_vector@@Base+0x4c>
   172b8:	mov	r3, #0
   172bc:	mov	r0, r5
   172c0:	str	r3, [r5]
   172c4:	str	r3, [r5, #4]
   172c8:	add	sp, sp, #16
   172cc:	pop	{r4, r5, r6, r7, r8, pc}
   172d0:	ldr	r3, [pc, #28]	; 172f4 <flatcc_builder_end_union_vector@@Base+0x190>
   172d4:	ldr	r1, [pc, #28]	; 172f8 <flatcc_builder_end_union_vector@@Base+0x194>
   172d8:	ldr	r0, [pc, #28]	; 172fc <flatcc_builder_end_union_vector@@Base+0x198>
   172dc:	add	r3, pc, r3
   172e0:	ldr	r2, [pc, #24]	; 17300 <flatcc_builder_end_union_vector@@Base+0x19c>
   172e4:	add	r3, r3, #968	; 0x3c8
   172e8:	add	r1, pc, r1
   172ec:	add	r0, pc, r0
   172f0:	bl	124d4 <__assert_fail@plt>
   172f4:	muleq	r0, r8, lr
   172f8:	ldrdeq	r6, [r0], -ip
   172fc:	strdeq	r6, [r0], -r4
   17300:	andeq	r0, r0, r1, asr r6

00017304 <flatcc_builder_extend_union_vector@@Base>:
   17304:	ldr	ip, [r0, #32]
   17308:	push	{r4, r5, r6, lr}
   1730c:	ldr	r3, [ip, #20]
   17310:	adds	r2, r1, r3
   17314:	movcs	r3, #1
   17318:	movcc	r3, #0
   1731c:	cmn	r2, #-536870911	; 0xe0000001
   17320:	movls	r4, #0
   17324:	movhi	r4, #1
   17328:	orrs	r4, r3, r4
   1732c:	bne	17378 <flatcc_builder_extend_union_vector@@Base+0x74>
   17330:	str	r2, [ip, #20]
   17334:	ldr	r6, [r0, #20]
   17338:	ldr	r3, [r0, #24]
   1733c:	add	r1, r6, r1, lsl #3
   17340:	cmp	r1, r3
   17344:	mov	r5, r0
   17348:	str	r1, [r0, #20]
   1734c:	bcs	1735c <flatcc_builder_extend_union_vector@@Base+0x58>
   17350:	ldr	r0, [r5, #16]
   17354:	add	r0, r0, r6
   17358:	pop	{r4, r5, r6, pc}
   1735c:	add	r1, r1, #1
   17360:	mvn	r2, #3
   17364:	bl	14024 <test@@Base+0x18b4>
   17368:	cmp	r0, #0
   1736c:	beq	17350 <flatcc_builder_extend_union_vector@@Base+0x4c>
   17370:	mov	r0, r4
   17374:	pop	{r4, r5, r6, pc}
   17378:	bl	12580 <__assert_fail@plt+0xac>

0001737c <flatcc_builder_truncate_union_vector@@Base>:
   1737c:	ldr	r3, [r0, #32]
   17380:	push	{r4, lr}
   17384:	ldrh	r2, [r3, #14]
   17388:	cmp	r2, #7
   1738c:	bne	173d0 <flatcc_builder_truncate_union_vector@@Base+0x54>
   17390:	ldr	ip, [r3, #20]
   17394:	cmp	ip, r1
   17398:	bcc	173f4 <flatcc_builder_truncate_union_vector@@Base+0x78>
   1739c:	ldr	r2, [r3, #16]
   173a0:	sub	ip, ip, r1
   173a4:	str	ip, [r3, #20]
   173a8:	mul	r2, r2, r1
   173ac:	ldr	r3, [r0, #20]
   173b0:	ldr	r1, [r0, #16]
   173b4:	sub	r3, r3, r2
   173b8:	str	r3, [r0, #20]
   173bc:	add	r0, r1, r3
   173c0:	mov	r1, #0
   173c4:	bl	124a4 <memset@plt>
   173c8:	mov	r0, #0
   173cc:	pop	{r4, pc}
   173d0:	ldr	r3, [pc, #64]	; 17418 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   173d4:	ldr	r1, [pc, #64]	; 1741c <flatcc_builder_truncate_union_vector@@Base+0xa0>
   173d8:	ldr	r0, [pc, #64]	; 17420 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   173dc:	add	r3, pc, r3
   173e0:	ldr	r2, [pc, #60]	; 17424 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   173e4:	add	r3, r3, #1000	; 0x3e8
   173e8:	add	r1, pc, r1
   173ec:	add	r0, pc, r0
   173f0:	bl	124d4 <__assert_fail@plt>
   173f4:	ldr	r3, [pc, #44]	; 17428 <flatcc_builder_truncate_union_vector@@Base+0xac>
   173f8:	ldr	r1, [pc, #44]	; 1742c <flatcc_builder_truncate_union_vector@@Base+0xb0>
   173fc:	ldr	r0, [pc, #44]	; 17430 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   17400:	add	r3, pc, r3
   17404:	ldr	r2, [pc, #40]	; 17434 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   17408:	add	r3, r3, #1000	; 0x3e8
   1740c:	add	r1, pc, r1
   17410:	add	r0, pc, r0
   17414:	bl	124d4 <__assert_fail@plt>
   17418:	muleq	r0, r8, sp
   1741c:	ldrdeq	r6, [r0], -ip
   17420:	strdeq	r6, [r0], -r4
   17424:	andeq	r0, r0, r1, lsl #13
   17428:	andeq	r5, r0, r4, ror sp
   1742c:			; <UNDEFINED> instruction: 0x000064b8
   17430:	strdeq	r6, [r0], -r4
   17434:	andeq	r0, r0, r2, lsl #13

00017438 <flatcc_builder_union_vector_push@@Base>:
   17438:	ldr	ip, [r0, #32]
   1743c:	push	{r4, r5, r6, lr}
   17440:	sub	sp, sp, #8
   17444:	ldrh	r3, [ip, #14]
   17448:	stm	sp, {r1, r2}
   1744c:	cmp	r3, #7
   17450:	bne	174d0 <flatcc_builder_union_vector_push@@Base+0x98>
   17454:	ldr	r3, [ip, #20]
   17458:	cmn	r3, #-536870911	; 0xe0000001
   1745c:	beq	174c0 <flatcc_builder_union_vector_push@@Base+0x88>
   17460:	add	r3, r3, #1
   17464:	str	r3, [ip, #20]
   17468:	ldr	r6, [r0, #20]
   1746c:	ldr	r2, [r0, #24]
   17470:	add	r3, r6, #8
   17474:	cmp	r3, r2
   17478:	mov	r4, r0
   1747c:	mov	r5, sp
   17480:	str	r3, [r0, #20]
   17484:	bcs	174ac <flatcc_builder_union_vector_push@@Base+0x74>
   17488:	ldr	r3, [r4, #16]
   1748c:	adds	r3, r3, r6
   17490:	beq	174f4 <flatcc_builder_union_vector_push@@Base+0xbc>
   17494:	ldm	r5, {r0, r1}
   17498:	mov	r2, r3
   1749c:	stm	r3, {r0, r1}
   174a0:	mov	r0, r2
   174a4:	add	sp, sp, #8
   174a8:	pop	{r4, r5, r6, pc}
   174ac:	mvn	r2, #3
   174b0:	add	r1, r6, #9
   174b4:	bl	14024 <test@@Base+0x18b4>
   174b8:	cmp	r0, #0
   174bc:	beq	17488 <flatcc_builder_union_vector_push@@Base+0x50>
   174c0:	mov	r2, #0
   174c4:	mov	r0, r2
   174c8:	add	sp, sp, #8
   174cc:	pop	{r4, r5, r6, pc}
   174d0:	ldr	r3, [pc, #36]	; 174fc <flatcc_builder_union_vector_push@@Base+0xc4>
   174d4:	ldr	r1, [pc, #36]	; 17500 <flatcc_builder_union_vector_push@@Base+0xc8>
   174d8:	ldr	r0, [pc, #36]	; 17504 <flatcc_builder_union_vector_push@@Base+0xcc>
   174dc:	add	r3, pc, r3
   174e0:	ldr	r2, [pc, #32]	; 17508 <flatcc_builder_union_vector_push@@Base+0xd0>
   174e4:	add	r3, r3, #1040	; 0x410
   174e8:	add	r1, pc, r1
   174ec:	add	r0, pc, r0
   174f0:	bl	124d4 <__assert_fail@plt>
   174f4:	mov	r2, r3
   174f8:	b	174a0 <flatcc_builder_union_vector_push@@Base+0x68>
   174fc:	muleq	r0, r8, ip
   17500:	ldrdeq	r6, [r0], -ip
   17504:	strdeq	r6, [r0], -r4
   17508:	andeq	r0, r0, sp, lsl #13

0001750c <flatcc_builder_append_union_vector@@Base>:
   1750c:	ldr	ip, [r0, #32]
   17510:	push	{r4, r5, r6, r7, r8, lr}
   17514:	ldrh	r3, [ip, #14]
   17518:	cmp	r3, #7
   1751c:	bne	175b4 <flatcc_builder_append_union_vector@@Base+0xa8>
   17520:	mov	r6, r1
   17524:	ldr	r1, [ip, #20]
   17528:	adds	r1, r2, r1
   1752c:	movcs	lr, #1
   17530:	movcc	lr, #0
   17534:	cmn	r1, #-536870911	; 0xe0000001
   17538:	movls	r3, #0
   1753c:	movhi	r3, #1
   17540:	orrs	r8, lr, r3
   17544:	bne	175b0 <flatcc_builder_append_union_vector@@Base+0xa4>
   17548:	str	r1, [ip, #20]
   1754c:	ldr	r7, [r0, #20]
   17550:	lsl	r4, r2, #3
   17554:	ldr	r3, [r0, #24]
   17558:	add	r1, r4, r7
   1755c:	cmp	r1, r3
   17560:	mov	r5, r0
   17564:	str	r1, [r0, #20]
   17568:	bcs	17594 <flatcc_builder_append_union_vector@@Base+0x88>
   1756c:	ldr	r3, [r5, #16]
   17570:	adds	r3, r3, r7
   17574:	beq	1758c <flatcc_builder_append_union_vector@@Base+0x80>
   17578:	mov	r0, r3
   1757c:	mov	r2, r4
   17580:	mov	r1, r6
   17584:	bl	1242c <memcpy@plt>
   17588:	mov	r3, r0
   1758c:	mov	r0, r3
   17590:	pop	{r4, r5, r6, r7, r8, pc}
   17594:	add	r1, r1, #1
   17598:	mvn	r2, #3
   1759c:	bl	14024 <test@@Base+0x18b4>
   175a0:	cmp	r0, #0
   175a4:	beq	1756c <flatcc_builder_append_union_vector@@Base+0x60>
   175a8:	mov	r3, r8
   175ac:	b	1758c <flatcc_builder_append_union_vector@@Base+0x80>
   175b0:	bl	12580 <__assert_fail@plt+0xac>
   175b4:	ldr	r3, [pc, #32]	; 175dc <flatcc_builder_append_union_vector@@Base+0xd0>
   175b8:	ldr	r1, [pc, #32]	; 175e0 <flatcc_builder_append_union_vector@@Base+0xd4>
   175bc:	add	r3, pc, r3
   175c0:	ldr	r0, [pc, #28]	; 175e4 <flatcc_builder_append_union_vector@@Base+0xd8>
   175c4:	add	r3, r3, #1072	; 0x430
   175c8:	ldr	r2, [pc, #24]	; 175e8 <flatcc_builder_append_union_vector@@Base+0xdc>
   175cc:	add	r3, r3, #4
   175d0:	add	r1, pc, r1
   175d4:	add	r0, pc, r0
   175d8:	bl	124d4 <__assert_fail@plt>
   175dc:			; <UNDEFINED> instruction: 0x00005bb8
   175e0:	strdeq	r6, [r0], -r4
   175e4:	andeq	r6, r0, ip, lsl #12
   175e8:	muleq	r0, ip, r6

000175ec <flatcc_builder_create_string@@Base>:
   175ec:	push	{r4, r5, r6, lr}
   175f0:	sub	sp, sp, #88	; 0x58
   175f4:	ldr	lr, [r0, #136]	; 0x88
   175f8:	mov	r4, r0
   175fc:	add	r0, sp, #88	; 0x58
   17600:	cmp	r2, #0
   17604:	sub	r3, lr, r2
   17608:	str	r2, [r0, #-76]!	; 0xffffffb4
   1760c:	sub	r3, r3, #1
   17610:	str	r0, [sp, #24]
   17614:	ldr	r5, [pc, #188]	; 176d8 <flatcc_builder_create_string@@Base+0xec>
   17618:	moveq	r0, #1
   1761c:	strne	r1, [sp, #32]
   17620:	mov	ip, #4
   17624:	moveq	r1, r0
   17628:	movne	r1, #2
   1762c:	and	r3, r3, #3
   17630:	ldr	r0, [pc, #164]	; 176dc <flatcc_builder_create_string@@Base+0xf0>
   17634:	str	ip, [sp, #28]
   17638:	add	r5, pc, r5
   1763c:	addne	ip, r2, ip
   17640:	add	r3, r3, #1
   17644:	add	r1, r1, #1
   17648:	add	ip, ip, r3
   1764c:	add	r6, sp, #88	; 0x58
   17650:	strne	r2, [sp, #36]	; 0x24
   17654:	add	r1, r6, r1, lsl #3
   17658:	str	ip, [sp, #16]
   1765c:	ldr	r0, [r5, r0]
   17660:	sub	r5, lr, ip
   17664:	movne	r2, #3
   17668:	moveq	r2, #2
   1766c:	cmp	lr, r5
   17670:	str	r0, [r1, #-72]	; 0xffffffb8
   17674:	str	r3, [r1, #-68]	; 0xffffffbc
   17678:	str	r2, [sp, #20]
   1767c:	ble	176b0 <flatcc_builder_create_string@@Base+0xc4>
   17680:	ldr	r0, [r4, #36]	; 0x24
   17684:	mov	r3, r5
   17688:	str	ip, [sp]
   1768c:	add	r1, sp, #24
   17690:	ldr	r6, [r4, #44]	; 0x2c
   17694:	blx	r6
   17698:	cmp	r0, #0
   1769c:	bne	176b4 <flatcc_builder_create_string@@Base+0xc8>
   176a0:	mov	r0, r5
   176a4:	str	r5, [r4, #136]	; 0x88
   176a8:	add	sp, sp, #88	; 0x58
   176ac:	pop	{r4, r5, r6, pc}
   176b0:	bl	12548 <__assert_fail@plt+0x74>
   176b4:	ldr	r3, [pc, #36]	; 176e0 <flatcc_builder_create_string@@Base+0xf4>
   176b8:	ldr	r1, [pc, #36]	; 176e4 <flatcc_builder_create_string@@Base+0xf8>
   176bc:	ldr	r0, [pc, #36]	; 176e8 <flatcc_builder_create_string@@Base+0xfc>
   176c0:	add	r3, pc, r3
   176c4:	ldr	r2, [pc, #32]	; 176ec <flatcc_builder_create_string@@Base+0x100>
   176c8:	add	r3, r3, #28
   176cc:	add	r1, pc, r1
   176d0:	add	r0, pc, r0
   176d4:	bl	124d4 <__assert_fail@plt>
   176d8:	andeq	r7, r1, r0, asr #19
   176dc:	andeq	r0, r0, r0, asr r0
   176e0:			; <UNDEFINED> instruction: 0x00005ab4
   176e4:	strdeq	r6, [r0], -r8
   176e8:	andeq	r6, r0, ip, ror r2
   176ec:	andeq	r0, r0, fp, lsl #5

000176f0 <flatcc_builder_create_string_str@@Base>:
   176f0:	push	{r4, r5, r6, lr}
   176f4:	mov	r5, r0
   176f8:	mov	r0, r1
   176fc:	mov	r4, r1
   17700:	bl	12480 <strlen@plt>
   17704:	mov	r1, r4
   17708:	mov	r2, r0
   1770c:	mov	r0, r5
   17710:	pop	{r4, r5, r6, lr}
   17714:	b	175ec <flatcc_builder_create_string@@Base>

00017718 <flatcc_builder_create_string_strn@@Base>:
   17718:	push	{r4, r5, r6, lr}
   1771c:	mov	r4, r1
   17720:	mov	r6, r0
   17724:	mov	r1, #0
   17728:	mov	r0, r4
   1772c:	mov	r5, r2
   17730:	bl	124bc <memchr@plt>
   17734:	mov	r1, r4
   17738:	cmp	r0, #0
   1773c:	subne	r5, r0, r4
   17740:	mov	r2, r5
   17744:	mov	r0, r6
   17748:	pop	{r4, r5, r6, lr}
   1774c:	b	175ec <flatcc_builder_create_string@@Base>

00017750 <flatcc_builder_end_string@@Base>:
   17750:	ldr	r3, [r0, #32]
   17754:	push	{r4, r5, r6, lr}
   17758:	ldrh	r2, [r3, #14]
   1775c:	cmp	r2, #6
   17760:	bne	17830 <flatcc_builder_end_string@@Base+0xe0>
   17764:	ldr	r2, [r3, #20]
   17768:	ldr	r3, [r0, #20]
   1776c:	mov	r4, r0
   17770:	cmp	r2, r3
   17774:	bne	17808 <flatcc_builder_end_string@@Base+0xb8>
   17778:	ldr	r1, [r0, #16]
   1777c:	bl	175ec <flatcc_builder_create_string@@Base>
   17780:	subs	r5, r0, #0
   17784:	beq	17800 <flatcc_builder_end_string@@Base+0xb0>
   17788:	ldr	r2, [r4, #20]
   1778c:	mov	r1, #0
   17790:	ldr	r0, [r4, #16]
   17794:	bl	124a4 <memset@plt>
   17798:	ldr	r3, [r4, #32]
   1779c:	ldr	r2, [r4, #64]	; 0x40
   177a0:	ldrh	lr, [r4, #130]	; 0x82
   177a4:	ldr	ip, [r3]
   177a8:	ldr	r1, [r3, #4]
   177ac:	ldrh	r0, [r4, #128]	; 0x80
   177b0:	sub	r2, r2, ip
   177b4:	cmp	r2, r1
   177b8:	movcs	r2, r1
   177bc:	cmp	r0, lr
   177c0:	ldr	r0, [r4, #60]	; 0x3c
   177c4:	ldr	r6, [r3, #8]
   177c8:	str	r2, [r4, #24]
   177cc:	add	r2, r0, ip
   177d0:	str	r2, [r4, #16]
   177d4:	str	r6, [r4, #20]
   177d8:	ldr	r2, [r4, #156]	; 0x9c
   177dc:	str	ip, [r4, #28]
   177e0:	str	r1, [r3, #4]
   177e4:	strhcc	lr, [r4, #128]	; 0x80
   177e8:	ldrh	r1, [r3, #12]
   177ec:	sub	r2, r2, #1
   177f0:	sub	r3, r3, #36	; 0x24
   177f4:	str	r2, [r4, #156]	; 0x9c
   177f8:	strh	r1, [r4, #130]	; 0x82
   177fc:	str	r3, [r4, #32]
   17800:	mov	r0, r5
   17804:	pop	{r4, r5, r6, pc}
   17808:	ldr	r3, [pc, #72]	; 17858 <flatcc_builder_end_string@@Base+0x108>
   1780c:	ldr	r1, [pc, #72]	; 1785c <flatcc_builder_end_string@@Base+0x10c>
   17810:	add	r3, pc, r3
   17814:	ldr	r0, [pc, #68]	; 17860 <flatcc_builder_end_string@@Base+0x110>
   17818:	add	r3, r3, #1104	; 0x450
   1781c:	ldr	r2, [pc, #64]	; 17864 <flatcc_builder_end_string@@Base+0x114>
   17820:	add	r3, r3, #8
   17824:	add	r1, pc, r1
   17828:	add	r0, pc, r0
   1782c:	bl	124d4 <__assert_fail@plt>
   17830:	ldr	r3, [pc, #48]	; 17868 <flatcc_builder_end_string@@Base+0x118>
   17834:	ldr	r1, [pc, #48]	; 1786c <flatcc_builder_end_string@@Base+0x11c>
   17838:	add	r3, pc, r3
   1783c:	ldr	r0, [pc, #44]	; 17870 <flatcc_builder_end_string@@Base+0x120>
   17840:	add	r3, r3, #1104	; 0x450
   17844:	ldr	r2, [pc, #40]	; 17874 <flatcc_builder_end_string@@Base+0x124>
   17848:	add	r3, r3, #8
   1784c:	add	r1, pc, r1
   17850:	add	r0, pc, r0
   17854:	bl	124d4 <__assert_fail@plt>
   17858:	andeq	r5, r0, r4, ror #18
   1785c:	andeq	r6, r0, r0, lsr #1
   17860:	andeq	r6, r0, ip, ror #7
   17864:	andeq	r0, r0, r5, asr #13
   17868:	andeq	r5, r0, ip, lsr r9
   1786c:	andeq	r6, r0, r8, ror r0
   17870:	andeq	r6, r0, r4, ror #4
   17874:	andeq	r0, r0, r4, asr #13

00017878 <flatcc_builder_string_edit@@Base>:
   17878:	ldr	r0, [r0, #16]
   1787c:	bx	lr

00017880 <flatcc_builder_string_len@@Base>:
   17880:	ldr	r3, [r0, #32]
   17884:	ldr	r0, [r3, #20]
   17888:	bx	lr

0001788c <flatcc_builder_table_add@@Base>:
   1788c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17890:	mov	r4, r0
   17894:	ldr	r0, [r0, #32]
   17898:	ldrh	r0, [r0, #14]
   1789c:	cmp	r0, #3
   178a0:	bne	179b8 <flatcc_builder_table_add@@Base+0x12c>
   178a4:	ldr	r0, [pc, #308]	; 179e0 <flatcc_builder_table_add@@Base+0x154>
   178a8:	cmp	r1, r0
   178ac:	bhi	17990 <flatcc_builder_table_add@@Base+0x104>
   178b0:	ldrh	r0, [r4, #130]	; 0x82
   178b4:	lsl	r8, r1, #1
   178b8:	cmp	r0, r3
   178bc:	ldr	r0, [r4, #4]
   178c0:	strhcc	r3, [r4, #130]	; 0x82
   178c4:	add	lr, r0, r8
   178c8:	ldrh	r7, [r0, r8]
   178cc:	cmp	r7, #0
   178d0:	bne	17968 <flatcc_builder_table_add@@Base+0xdc>
   178d4:	ldr	ip, [r4, #12]
   178d8:	ldr	r9, [pc, #260]	; 179e4 <flatcc_builder_table_add@@Base+0x158>
   178dc:	eor	ip, ip, r1
   178e0:	ldr	r0, [r4, #20]
   178e4:	mul	ip, r9, ip
   178e8:	sub	r6, r3, #1
   178ec:	eor	ip, ip, r2
   178f0:	rsb	r3, r3, #0
   178f4:	add	r6, r6, r0
   178f8:	and	r6, r6, r3
   178fc:	mul	ip, r9, ip
   17900:	ldr	r3, [r4, #24]
   17904:	add	r2, r2, r6
   17908:	cmp	r2, r3
   1790c:	uxth	r5, r1
   17910:	str	ip, [r4, #12]
   17914:	str	r2, [r4, #20]
   17918:	bcs	17940 <flatcc_builder_table_add@@Base+0xb4>
   1791c:	add	r3, r6, #4
   17920:	strh	r3, [lr]
   17924:	ldrh	r3, [r4, #8]
   17928:	ldr	r0, [r4, #16]
   1792c:	cmp	r3, r5
   17930:	addls	r5, r5, #1
   17934:	strhls	r5, [r4, #8]
   17938:	add	r0, r0, r6
   1793c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17940:	add	r1, r2, #1
   17944:	mov	r0, r4
   17948:	ldr	r2, [pc, #152]	; 179e8 <flatcc_builder_table_add@@Base+0x15c>
   1794c:	bl	14024 <test@@Base+0x18b4>
   17950:	cmp	r0, #0
   17954:	ldreq	lr, [r4, #4]
   17958:	addeq	lr, lr, r8
   1795c:	beq	1791c <flatcc_builder_table_add@@Base+0x90>
   17960:	mov	r0, r7
   17964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17968:	ldr	r3, [pc, #124]	; 179ec <flatcc_builder_table_add@@Base+0x160>
   1796c:	ldr	r1, [pc, #124]	; 179f0 <flatcc_builder_table_add@@Base+0x164>
   17970:	add	r3, pc, r3
   17974:	ldr	r0, [pc, #120]	; 179f4 <flatcc_builder_table_add@@Base+0x168>
   17978:	add	r3, r3, #1136	; 0x470
   1797c:	ldr	r2, [pc, #116]	; 179f8 <flatcc_builder_table_add@@Base+0x16c>
   17980:	add	r3, r3, #4
   17984:	add	r1, pc, r1
   17988:	add	r0, pc, r0
   1798c:	bl	124d4 <__assert_fail@plt>
   17990:	ldr	r3, [pc, #100]	; 179fc <flatcc_builder_table_add@@Base+0x170>
   17994:	ldr	r1, [pc, #100]	; 17a00 <flatcc_builder_table_add@@Base+0x174>
   17998:	add	r3, pc, r3
   1799c:	ldr	r0, [pc, #96]	; 17a04 <flatcc_builder_table_add@@Base+0x178>
   179a0:	add	r3, r3, #1136	; 0x470
   179a4:	ldr	r2, [pc, #92]	; 17a08 <flatcc_builder_table_add@@Base+0x17c>
   179a8:	add	r3, r3, #4
   179ac:	add	r1, pc, r1
   179b0:	add	r0, pc, r0
   179b4:	bl	124d4 <__assert_fail@plt>
   179b8:	ldr	r3, [pc, #76]	; 17a0c <flatcc_builder_table_add@@Base+0x180>
   179bc:	ldr	r1, [pc, #76]	; 17a10 <flatcc_builder_table_add@@Base+0x184>
   179c0:	add	r3, pc, r3
   179c4:	ldr	r0, [pc, #72]	; 17a14 <flatcc_builder_table_add@@Base+0x188>
   179c8:	add	r3, r3, #1136	; 0x470
   179cc:	ldr	r2, [pc, #68]	; 17a18 <flatcc_builder_table_add@@Base+0x18c>
   179d0:	add	r3, r3, #4
   179d4:	add	r1, pc, r1
   179d8:	add	r0, pc, r0
   179dc:	bl	124d4 <__assert_fail@plt>
   179e0:	strdeq	r7, [r0], -ip
   179e4:			; <UNDEFINED> instruction: 0x9e3779b1
   179e8:	strdeq	pc, [r0], -ip
   179ec:	andeq	r5, r0, r4, lsl #16
   179f0:	andeq	r5, r0, r0, asr #30
   179f4:	andeq	r5, r0, r4, asr #31
   179f8:	strdeq	r0, [r0], -r8
   179fc:	ldrdeq	r5, [r0], -ip
   17a00:	andeq	r5, r0, r8, lsl pc
   17a04:	andeq	r6, r0, r8, lsl #5
   17a08:	andeq	r0, r0, lr, ror #13
   17a0c:			; <UNDEFINED> instruction: 0x000057b4
   17a10:	strdeq	r5, [r0], -r0
   17a14:	andeq	r6, r0, r8, asr #3
   17a18:	andeq	r0, r0, sp, ror #13

00017a1c <flatcc_builder_table_edit@@Base>:
   17a1c:	ldr	r3, [r0, #32]
   17a20:	ldrh	r3, [r3, #14]
   17a24:	cmp	r3, #3
   17a28:	bne	17a40 <flatcc_builder_table_edit@@Base+0x24>
   17a2c:	ldr	r3, [r0, #20]
   17a30:	ldr	r0, [r0, #16]
   17a34:	sub	r1, r3, r1
   17a38:	add	r0, r0, r1
   17a3c:	bx	lr
   17a40:	ldr	r3, [pc, #32]	; 17a68 <flatcc_builder_table_edit@@Base+0x4c>
   17a44:	ldr	r1, [pc, #32]	; 17a6c <flatcc_builder_table_edit@@Base+0x50>
   17a48:	ldr	r0, [pc, #32]	; 17a70 <flatcc_builder_table_edit@@Base+0x54>
   17a4c:	add	r3, pc, r3
   17a50:	push	{r4, lr}
   17a54:	add	r3, r3, #1168	; 0x490
   17a58:	ldr	r2, [pc, #20]	; 17a74 <flatcc_builder_table_edit@@Base+0x58>
   17a5c:	add	r1, pc, r1
   17a60:	add	r0, pc, r0
   17a64:	bl	124d4 <__assert_fail@plt>
   17a68:	andeq	r5, r0, r8, lsr #14
   17a6c:	andeq	r5, r0, r8, ror #28
   17a70:	andeq	r6, r0, r0, asr #2
   17a74:	andeq	r0, r0, r2, lsl #14

00017a78 <flatcc_builder_table_add_copy@@Base>:
   17a78:	push	{r4, r5, r6, lr}
   17a7c:	mov	r4, r3
   17a80:	mov	r6, r2
   17a84:	ldrh	r3, [sp, #16]
   17a88:	mov	r2, r4
   17a8c:	bl	1788c <flatcc_builder_table_add@@Base>
   17a90:	subs	r5, r0, #0
   17a94:	beq	17aa4 <flatcc_builder_table_add_copy@@Base+0x2c>
   17a98:	mov	r2, r4
   17a9c:	mov	r1, r6
   17aa0:	bl	1242c <memcpy@plt>
   17aa4:	mov	r0, r5
   17aa8:	pop	{r4, r5, r6, pc}

00017aac <flatcc_builder_table_add_offset@@Base>:
   17aac:	ldr	r3, [r0, #32]
   17ab0:	push	{r4, r5, r6, r7, r8, lr}
   17ab4:	ldrh	r3, [r3, #14]
   17ab8:	cmp	r3, #3
   17abc:	bne	17bd4 <flatcc_builder_table_add_offset@@Base+0x128>
   17ac0:	ldr	r3, [pc, #308]	; 17bfc <flatcc_builder_table_add_offset@@Base+0x150>
   17ac4:	cmp	r1, r3
   17ac8:	bhi	17bac <flatcc_builder_table_add_offset@@Base+0x100>
   17acc:	ldr	r3, [r0, #4]
   17ad0:	lsl	r7, r1, #1
   17ad4:	mov	r4, r0
   17ad8:	ldrh	r6, [r3, r7]
   17adc:	add	ip, r3, r7
   17ae0:	cmp	r6, #0
   17ae4:	bne	17b84 <flatcc_builder_table_add_offset@@Base+0xd8>
   17ae8:	ldr	r3, [r0, #12]
   17aec:	ldr	r2, [pc, #268]	; 17c00 <flatcc_builder_table_add_offset@@Base+0x154>
   17af0:	eor	r3, r3, r1
   17af4:	ldr	r5, [r0, #20]
   17af8:	mul	r3, r2, r3
   17afc:	add	r5, r5, #3
   17b00:	eor	r3, r3, #4
   17b04:	bic	r5, r5, #3
   17b08:	mul	r3, r2, r3
   17b0c:	ldr	lr, [r0, #24]
   17b10:	add	r2, r5, #4
   17b14:	cmp	r2, lr
   17b18:	uxth	r8, r1
   17b1c:	str	r3, [r0, #12]
   17b20:	str	r2, [r0, #20]
   17b24:	bhi	17b60 <flatcc_builder_table_add_offset@@Base+0xb4>
   17b28:	uxth	r2, r5
   17b2c:	add	r3, r2, #4
   17b30:	strh	r3, [ip]
   17b34:	ldrh	r3, [r4, #8]
   17b38:	ldr	r0, [r4, #16]
   17b3c:	cmp	r3, r8
   17b40:	ldr	r3, [r4]
   17b44:	addls	r1, r8, #1
   17b48:	strhls	r1, [r4, #8]
   17b4c:	add	r1, r3, #2
   17b50:	str	r1, [r4]
   17b54:	add	r0, r0, r5
   17b58:	strh	r2, [r3]
   17b5c:	pop	{r4, r5, r6, r7, r8, pc}
   17b60:	mov	r1, r2
   17b64:	ldr	r2, [pc, #152]	; 17c04 <flatcc_builder_table_add_offset@@Base+0x158>
   17b68:	bl	14024 <test@@Base+0x18b4>
   17b6c:	cmp	r0, #0
   17b70:	ldreq	ip, [r4, #4]
   17b74:	addeq	ip, ip, r7
   17b78:	beq	17b28 <flatcc_builder_table_add_offset@@Base+0x7c>
   17b7c:	mov	r0, r6
   17b80:	pop	{r4, r5, r6, r7, r8, pc}
   17b84:	ldr	r3, [pc, #124]	; 17c08 <flatcc_builder_table_add_offset@@Base+0x15c>
   17b88:	ldr	r1, [pc, #124]	; 17c0c <flatcc_builder_table_add_offset@@Base+0x160>
   17b8c:	add	r3, pc, r3
   17b90:	ldr	r0, [pc, #120]	; 17c10 <flatcc_builder_table_add_offset@@Base+0x164>
   17b94:	add	r3, r3, #1184	; 0x4a0
   17b98:	ldr	r2, [pc, #116]	; 17c14 <flatcc_builder_table_add_offset@@Base+0x168>
   17b9c:	add	r3, r3, #12
   17ba0:	add	r1, pc, r1
   17ba4:	add	r0, pc, r0
   17ba8:	bl	124d4 <__assert_fail@plt>
   17bac:	ldr	r3, [pc, #100]	; 17c18 <flatcc_builder_table_add_offset@@Base+0x16c>
   17bb0:	ldr	r1, [pc, #100]	; 17c1c <flatcc_builder_table_add_offset@@Base+0x170>
   17bb4:	add	r3, pc, r3
   17bb8:	ldr	r0, [pc, #96]	; 17c20 <flatcc_builder_table_add_offset@@Base+0x174>
   17bbc:	add	r3, r3, #1184	; 0x4a0
   17bc0:	ldr	r2, [pc, #92]	; 17c24 <flatcc_builder_table_add_offset@@Base+0x178>
   17bc4:	add	r3, r3, #12
   17bc8:	add	r1, pc, r1
   17bcc:	add	r0, pc, r0
   17bd0:	bl	124d4 <__assert_fail@plt>
   17bd4:	ldr	r3, [pc, #76]	; 17c28 <flatcc_builder_table_add_offset@@Base+0x17c>
   17bd8:	ldr	r1, [pc, #76]	; 17c2c <flatcc_builder_table_add_offset@@Base+0x180>
   17bdc:	add	r3, pc, r3
   17be0:	ldr	r0, [pc, #72]	; 17c30 <flatcc_builder_table_add_offset@@Base+0x184>
   17be4:	add	r3, r3, #1184	; 0x4a0
   17be8:	ldr	r2, [pc, #68]	; 17c34 <flatcc_builder_table_add_offset@@Base+0x188>
   17bec:	add	r3, r3, #12
   17bf0:	add	r1, pc, r1
   17bf4:	add	r0, pc, r0
   17bf8:	bl	124d4 <__assert_fail@plt>
   17bfc:	strdeq	r7, [r0], -ip
   17c00:			; <UNDEFINED> instruction: 0x9e3779b1
   17c04:	strdeq	pc, [r0], -ip
   17c08:	andeq	r5, r0, r8, ror #11
   17c0c:	andeq	r5, r0, r4, lsr #26
   17c10:	andeq	r5, r0, r8, lsr #27
   17c14:	andeq	r0, r0, fp, lsl r7
   17c18:	andeq	r5, r0, r0, asr #11
   17c1c:	strdeq	r5, [r0], -ip
   17c20:	andeq	r6, r0, ip, rrx
   17c24:	andeq	r0, r0, r4, lsl r7
   17c28:	muleq	r0, r8, r5
   17c2c:	ldrdeq	r5, [r0], -r4
   17c30:	andeq	r5, r0, ip, lsr #31
   17c34:	andeq	r0, r0, r3, lsl r7

00017c38 <flatcc_builder_table_add_union@@Base>:
   17c38:	push	{r4, r5, r6, r7, lr}
   17c3c:	sub	sp, sp, #12
   17c40:	add	ip, sp, #8
   17c44:	stmdb	ip, {r2, r3}
   17c48:	ldr	r3, [r0, #32]
   17c4c:	ldrb	r5, [sp]
   17c50:	ldr	r6, [sp, #4]
   17c54:	ldrh	r3, [r3, #14]
   17c58:	cmp	r3, #3
   17c5c:	bne	17ce4 <flatcc_builder_table_add_union@@Base+0xac>
   17c60:	cmp	r5, #0
   17c64:	mov	r4, r0
   17c68:	mov	r7, r1
   17c6c:	beq	17cb4 <flatcc_builder_table_add_union@@Base+0x7c>
   17c70:	cmp	r6, #0
   17c74:	beq	17c88 <flatcc_builder_table_add_union@@Base+0x50>
   17c78:	bl	17aac <flatcc_builder_table_add_offset@@Base>
   17c7c:	cmp	r0, #0
   17c80:	strne	r6, [r0]
   17c84:	beq	17d34 <flatcc_builder_table_add_union@@Base+0xfc>
   17c88:	mov	r3, #1
   17c8c:	sub	r1, r7, #1
   17c90:	mov	r0, r4
   17c94:	mov	r2, r3
   17c98:	bl	1788c <flatcc_builder_table_add@@Base>
   17c9c:	cmp	r0, #0
   17ca0:	beq	17d0c <flatcc_builder_table_add_union@@Base+0xd4>
   17ca4:	strb	r5, [r0]
   17ca8:	mov	r0, #0
   17cac:	add	sp, sp, #12
   17cb0:	pop	{r4, r5, r6, r7, pc}
   17cb4:	cmp	r6, #0
   17cb8:	beq	17c88 <flatcc_builder_table_add_union@@Base+0x50>
   17cbc:	ldr	r3, [pc, #152]	; 17d5c <flatcc_builder_table_add_union@@Base+0x124>
   17cc0:	ldr	r1, [pc, #152]	; 17d60 <flatcc_builder_table_add_union@@Base+0x128>
   17cc4:	add	r3, pc, r3
   17cc8:	ldr	r0, [pc, #148]	; 17d64 <flatcc_builder_table_add_union@@Base+0x12c>
   17ccc:	add	r3, r3, #1216	; 0x4c0
   17cd0:	ldr	r2, [pc, #144]	; 17d68 <flatcc_builder_table_add_union@@Base+0x130>
   17cd4:	add	r3, r3, #12
   17cd8:	add	r1, pc, r1
   17cdc:	add	r0, pc, r0
   17ce0:	bl	124d4 <__assert_fail@plt>
   17ce4:	ldr	r3, [pc, #128]	; 17d6c <flatcc_builder_table_add_union@@Base+0x134>
   17ce8:	ldr	r1, [pc, #128]	; 17d70 <flatcc_builder_table_add_union@@Base+0x138>
   17cec:	add	r3, pc, r3
   17cf0:	ldr	r0, [pc, #124]	; 17d74 <flatcc_builder_table_add_union@@Base+0x13c>
   17cf4:	add	r3, r3, #1216	; 0x4c0
   17cf8:	ldr	r2, [pc, #120]	; 17d78 <flatcc_builder_table_add_union@@Base+0x140>
   17cfc:	add	r3, r3, #12
   17d00:	add	r1, pc, r1
   17d04:	add	r0, pc, r0
   17d08:	bl	124d4 <__assert_fail@plt>
   17d0c:	ldr	r3, [pc, #104]	; 17d7c <flatcc_builder_table_add_union@@Base+0x144>
   17d10:	ldr	r1, [pc, #104]	; 17d80 <flatcc_builder_table_add_union@@Base+0x148>
   17d14:	add	r3, pc, r3
   17d18:	ldr	r0, [pc, #100]	; 17d84 <flatcc_builder_table_add_union@@Base+0x14c>
   17d1c:	add	r3, r3, #1216	; 0x4c0
   17d20:	ldr	r2, [pc, #96]	; 17d88 <flatcc_builder_table_add_union@@Base+0x150>
   17d24:	add	r3, r3, #12
   17d28:	add	r1, pc, r1
   17d2c:	add	r0, pc, r0
   17d30:	bl	124d4 <__assert_fail@plt>
   17d34:	ldr	r3, [pc, #80]	; 17d8c <flatcc_builder_table_add_union@@Base+0x154>
   17d38:	ldr	r1, [pc, #80]	; 17d90 <flatcc_builder_table_add_union@@Base+0x158>
   17d3c:	add	r3, pc, r3
   17d40:	ldr	r0, [pc, #76]	; 17d94 <flatcc_builder_table_add_union@@Base+0x15c>
   17d44:	add	r3, r3, #1216	; 0x4c0
   17d48:	ldr	r2, [pc, #72]	; 17d98 <flatcc_builder_table_add_union@@Base+0x160>
   17d4c:	add	r3, r3, #12
   17d50:	add	r1, pc, r1
   17d54:	add	r0, pc, r0
   17d58:	bl	124d4 <__assert_fail@plt>
   17d5c:			; <UNDEFINED> instruction: 0x000054b0
   17d60:	andeq	r5, r0, ip, ror #23
   17d64:	andeq	r5, r0, r0, lsr #31
   17d68:	andeq	r0, r0, pc, ror #11
   17d6c:	andeq	r5, r0, r8, lsl #9
   17d70:	andeq	r5, r0, r4, asr #23
   17d74:	muleq	r0, ip, lr
   17d78:	andeq	r0, r0, lr, ror #11
   17d7c:	andeq	r5, r0, r0, ror #8
   17d80:	muleq	r0, ip, fp
   17d84:	andeq	r5, r0, r0, lsl #31
   17d88:	strdeq	r0, [r0], -r6
   17d8c:	andeq	r5, r0, r8, lsr r4
   17d90:	andeq	r5, r0, r4, ror fp
   17d94:	andeq	r5, r0, ip, asr #30
   17d98:	strdeq	r0, [r0], -r2

00017d9c <flatcc_builder_table_add_union_vector@@Base>:
   17d9c:	push	{r4, r5, r6, r7, lr}
   17da0:	sub	sp, sp, #12
   17da4:	add	ip, sp, #8
   17da8:	stmdb	ip, {r2, r3}
   17dac:	ldr	r3, [r0, #32]
   17db0:	ldr	r4, [sp]
   17db4:	ldr	r6, [sp, #4]
   17db8:	ldrh	r3, [r3, #14]
   17dbc:	cmp	r3, #3
   17dc0:	bne	17e64 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   17dc4:	clz	r3, r6
   17dc8:	clz	r2, r4
   17dcc:	lsr	r3, r3, #5
   17dd0:	lsr	r2, r2, #5
   17dd4:	cmp	r2, r3
   17dd8:	beq	17df8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   17ddc:	adds	r4, r4, #0
   17de0:	movne	r4, #1
   17de4:	cmp	r4, r3
   17de8:	mvnne	r0, #0
   17dec:	beq	17e8c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   17df0:	add	sp, sp, #12
   17df4:	pop	{r4, r5, r6, r7, pc}
   17df8:	cmp	r4, #0
   17dfc:	moveq	r0, r4
   17e00:	beq	17df0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   17e04:	mov	r7, r1
   17e08:	sub	r1, r1, #1
   17e0c:	mov	r5, r0
   17e10:	bl	17aac <flatcc_builder_table_add_offset@@Base>
   17e14:	cmp	r0, #0
   17e18:	beq	17eb4 <flatcc_builder_table_add_union_vector@@Base+0x118>
   17e1c:	str	r4, [r0]
   17e20:	mov	r1, r7
   17e24:	mov	r0, r5
   17e28:	bl	17aac <flatcc_builder_table_add_offset@@Base>
   17e2c:	cmp	r0, #0
   17e30:	strne	r6, [r0]
   17e34:	movne	r0, #0
   17e38:	bne	17df0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   17e3c:	ldr	r3, [pc, #152]	; 17edc <flatcc_builder_table_add_union_vector@@Base+0x140>
   17e40:	ldr	r1, [pc, #152]	; 17ee0 <flatcc_builder_table_add_union_vector@@Base+0x144>
   17e44:	add	r3, pc, r3
   17e48:	ldr	r0, [pc, #148]	; 17ee4 <flatcc_builder_table_add_union_vector@@Base+0x148>
   17e4c:	add	r3, r3, #1248	; 0x4e0
   17e50:	ldr	r2, [pc, #144]	; 17ee8 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   17e54:	add	r3, r3, #12
   17e58:	add	r1, pc, r1
   17e5c:	add	r0, pc, r0
   17e60:	bl	124d4 <__assert_fail@plt>
   17e64:	ldr	r3, [pc, #128]	; 17eec <flatcc_builder_table_add_union_vector@@Base+0x150>
   17e68:	ldr	r1, [pc, #128]	; 17ef0 <flatcc_builder_table_add_union_vector@@Base+0x154>
   17e6c:	add	r3, pc, r3
   17e70:	ldr	r0, [pc, #124]	; 17ef4 <flatcc_builder_table_add_union_vector@@Base+0x158>
   17e74:	add	r3, r3, #1248	; 0x4e0
   17e78:	mov	r2, #1536	; 0x600
   17e7c:	add	r3, r3, #12
   17e80:	add	r1, pc, r1
   17e84:	add	r0, pc, r0
   17e88:	bl	124d4 <__assert_fail@plt>
   17e8c:	ldr	r3, [pc, #100]	; 17ef8 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   17e90:	ldr	r1, [pc, #100]	; 17efc <flatcc_builder_table_add_union_vector@@Base+0x160>
   17e94:	add	r3, pc, r3
   17e98:	ldr	r0, [pc, #96]	; 17f00 <flatcc_builder_table_add_union_vector@@Base+0x164>
   17e9c:	add	r3, r3, #1248	; 0x4e0
   17ea0:	ldr	r2, [pc, #92]	; 17f04 <flatcc_builder_table_add_union_vector@@Base+0x168>
   17ea4:	add	r3, r3, #12
   17ea8:	add	r1, pc, r1
   17eac:	add	r0, pc, r0
   17eb0:	bl	124d4 <__assert_fail@plt>
   17eb4:	ldr	r3, [pc, #76]	; 17f08 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   17eb8:	ldr	r1, [pc, #76]	; 17f0c <flatcc_builder_table_add_union_vector@@Base+0x170>
   17ebc:	add	r3, pc, r3
   17ec0:	ldr	r0, [pc, #72]	; 17f10 <flatcc_builder_table_add_union_vector@@Base+0x174>
   17ec4:	add	r3, r3, #1248	; 0x4e0
   17ec8:	ldr	r2, [pc, #68]	; 17f14 <flatcc_builder_table_add_union_vector@@Base+0x178>
   17ecc:	add	r3, r3, #12
   17ed0:	add	r1, pc, r1
   17ed4:	add	r0, pc, r0
   17ed8:	bl	124d4 <__assert_fail@plt>
   17edc:	andeq	r5, r0, r0, lsr r3
   17ee0:	andeq	r5, r0, ip, ror #20
   17ee4:	andeq	r5, r0, r4, asr #28
   17ee8:	andeq	r0, r0, r8, lsl #12
   17eec:	andeq	r5, r0, r8, lsl #6
   17ef0:	andeq	r5, r0, r4, asr #20
   17ef4:	andeq	r5, r0, ip, lsl sp
   17ef8:	andeq	r5, r0, r0, ror #5
   17efc:	andeq	r5, r0, ip, lsl sl
   17f00:	andeq	r5, r0, ip, lsl #28
   17f04:	andeq	r0, r0, r1, lsl #12
   17f08:			; <UNDEFINED> instruction: 0x000052b8
   17f0c:	strdeq	r5, [r0], -r4
   17f10:	andeq	r5, r0, ip, asr #27
   17f14:	andeq	r0, r0, r4, lsl #12

00017f18 <flatcc_builder_push_buffer_alignment@@Base>:
   17f18:	mov	r3, r0
   17f1c:	mov	r2, #4
   17f20:	ldrh	r0, [r0, #128]	; 0x80
   17f24:	strh	r2, [r3, #128]	; 0x80
   17f28:	bx	lr

00017f2c <flatcc_builder_pop_buffer_alignment@@Base>:
   17f2c:	ldrh	r3, [r0, #128]	; 0x80
   17f30:	cmp	r3, r1
   17f34:	strhcc	r1, [r0, #128]	; 0x80
   17f38:	bx	lr

00017f3c <flatcc_builder_get_buffer_alignment@@Base>:
   17f3c:	ldrh	r0, [r0, #128]	; 0x80
   17f40:	bx	lr

00017f44 <flatcc_builder_set_vtable_clustering@@Base>:
   17f44:	clz	r1, r1
   17f48:	lsr	r1, r1, #5
   17f4c:	str	r1, [r0, #180]	; 0xb4
   17f50:	bx	lr

00017f54 <flatcc_builder_set_block_align@@Base>:
   17f54:	strh	r1, [r0, #132]	; 0x84
   17f58:	bx	lr

00017f5c <flatcc_builder_get_level@@Base>:
   17f5c:	ldr	r0, [r0, #156]	; 0x9c
   17f60:	bx	lr

00017f64 <flatcc_builder_set_max_level@@Base>:
   17f64:	ldr	r3, [r0, #160]	; 0xa0
   17f68:	str	r1, [r0, #176]	; 0xb0
   17f6c:	cmp	r1, r3
   17f70:	strgt	r1, [r0, #160]	; 0xa0
   17f74:	bx	lr

00017f78 <flatcc_builder_get_buffer_size@@Base>:
   17f78:	ldr	r2, [r0, #140]	; 0x8c
   17f7c:	ldr	r0, [r0, #136]	; 0x88
   17f80:	sub	r0, r2, r0
   17f84:	bx	lr

00017f88 <flatcc_builder_get_buffer_start@@Base>:
   17f88:	ldr	r0, [r0, #136]	; 0x88
   17f8c:	bx	lr

00017f90 <flatcc_builder_get_buffer_end@@Base>:
   17f90:	ldr	r0, [r0, #140]	; 0x8c
   17f94:	bx	lr

00017f98 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17f98:	str	r1, [r0, #172]	; 0xac
   17f9c:	bx	lr

00017fa0 <flatcc_builder_set_identifier@@Base>:
   17fa0:	ldr	r3, [pc, #32]	; 17fc8 <flatcc_builder_set_identifier@@Base+0x28>
   17fa4:	cmp	r1, #0
   17fa8:	add	r3, pc, r3
   17fac:	beq	17fbc <flatcc_builder_set_identifier@@Base+0x1c>
   17fb0:	ldr	r3, [r1]
   17fb4:	str	r3, [r0, #168]	; 0xa8
   17fb8:	bx	lr
   17fbc:	ldr	r2, [pc, #8]	; 17fcc <flatcc_builder_set_identifier@@Base+0x2c>
   17fc0:	ldr	r1, [r3, r2]
   17fc4:	b	17fb0 <flatcc_builder_set_identifier@@Base+0x10>
   17fc8:	andeq	r7, r1, r0, asr r0
   17fcc:	andeq	r0, r0, r0, asr r0

00017fd0 <flatcc_builder_get_type@@Base>:
   17fd0:	ldr	r0, [r0, #32]
   17fd4:	cmp	r0, #0
   17fd8:	ldrhne	r0, [r0, #14]
   17fdc:	bx	lr

00017fe0 <flatcc_builder_get_type_at@@Base>:
   17fe0:	cmp	r1, #0
   17fe4:	ble	1800c <flatcc_builder_get_type_at@@Base+0x2c>
   17fe8:	ldr	r3, [r0, #156]	; 0x9c
   17fec:	cmp	r1, r3
   17ff0:	bgt	1800c <flatcc_builder_get_type_at@@Base+0x2c>
   17ff4:	sub	r1, r1, r3
   17ff8:	ldr	r3, [r0, #32]
   17ffc:	add	r1, r1, r1, lsl #3
   18000:	add	r1, r3, r1, lsl #2
   18004:	ldrh	r0, [r1, #14]
   18008:	bx	lr
   1800c:	mov	r0, #0
   18010:	bx	lr

00018014 <flatcc_builder_get_direct_buffer@@Base>:
   18014:	ldr	r3, [r0, #184]	; 0xb8
   18018:	cmp	r3, #0
   1801c:	beq	18030 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18020:	ldr	r2, [r0, #188]	; 0xbc
   18024:	ldr	r3, [r0, #192]	; 0xc0
   18028:	cmp	r2, r3
   1802c:	beq	18044 <flatcc_builder_get_direct_buffer@@Base+0x30>
   18030:	cmp	r1, #0
   18034:	movne	r0, #0
   18038:	strne	r0, [r1]
   1803c:	moveq	r0, r1
   18040:	bx	lr
   18044:	cmp	r1, #0
   18048:	ldrne	r3, [r0, #212]	; 0xd4
   1804c:	ldr	r0, [r0, #196]	; 0xc4
   18050:	strne	r3, [r1]
   18054:	bx	lr

00018058 <flatcc_builder_copy_buffer@@Base>:
   18058:	ldr	r3, [r0, #184]	; 0xb8
   1805c:	cmp	r3, #0
   18060:	beq	180a0 <flatcc_builder_copy_buffer@@Base+0x48>
   18064:	push	{r4, lr}
   18068:	add	r0, r0, #188	; 0xbc
   1806c:	bl	18770 <flatcc_emitter_copy_buffer@@Base>
   18070:	cmp	r0, #0
   18074:	popne	{r4, pc}
   18078:	ldr	r3, [pc, #40]	; 180a8 <flatcc_builder_copy_buffer@@Base+0x50>
   1807c:	ldr	r1, [pc, #40]	; 180ac <flatcc_builder_copy_buffer@@Base+0x54>
   18080:	add	r3, pc, r3
   18084:	ldr	r0, [pc, #36]	; 180b0 <flatcc_builder_copy_buffer@@Base+0x58>
   18088:	add	r3, r3, #1296	; 0x510
   1808c:	ldr	r2, [pc, #32]	; 180b4 <flatcc_builder_copy_buffer@@Base+0x5c>
   18090:	add	r3, r3, #4
   18094:	add	r1, pc, r1
   18098:	add	r0, pc, r0
   1809c:	bl	124d4 <__assert_fail@plt>
   180a0:	mov	r0, r3
   180a4:	bx	lr
   180a8:	strdeq	r5, [r0], -r4
   180ac:	andeq	r5, r0, r0, lsr r8
   180b0:	andeq	r5, r0, r8, asr #24
   180b4:	andeq	r0, r0, r6, lsl #15

000180b8 <flatcc_builder_finalize_buffer@@Base>:
   180b8:	push	{r4, r5, r6, lr}
   180bc:	mov	r5, r1
   180c0:	mov	r6, r0
   180c4:	bl	17f78 <flatcc_builder_get_buffer_size@@Base>
   180c8:	cmp	r5, #0
   180cc:	strne	r0, [r5]
   180d0:	mov	r4, r0
   180d4:	bl	1245c <malloc@plt>
   180d8:	subs	r5, r0, #0
   180dc:	beq	18100 <flatcc_builder_finalize_buffer@@Base+0x48>
   180e0:	mov	r2, r4
   180e4:	mov	r0, r6
   180e8:	mov	r1, r5
   180ec:	bl	18058 <flatcc_builder_copy_buffer@@Base>
   180f0:	cmp	r0, #0
   180f4:	beq	18124 <flatcc_builder_finalize_buffer@@Base+0x6c>
   180f8:	mov	r0, r5
   180fc:	pop	{r4, r5, r6, pc}
   18100:	ldr	r3, [pc, #64]	; 18148 <flatcc_builder_finalize_buffer@@Base+0x90>
   18104:	ldr	r1, [pc, #64]	; 1814c <flatcc_builder_finalize_buffer@@Base+0x94>
   18108:	ldr	r0, [pc, #64]	; 18150 <flatcc_builder_finalize_buffer@@Base+0x98>
   1810c:	add	r3, pc, r3
   18110:	ldr	r2, [pc, #60]	; 18154 <flatcc_builder_finalize_buffer@@Base+0x9c>
   18114:	add	r3, r3, #1328	; 0x530
   18118:	add	r1, pc, r1
   1811c:	add	r0, pc, r0
   18120:	bl	124d4 <__assert_fail@plt>
   18124:	ldr	r3, [pc, #44]	; 18158 <flatcc_builder_finalize_buffer@@Base+0xa0>
   18128:	ldr	r1, [pc, #44]	; 1815c <flatcc_builder_finalize_buffer@@Base+0xa4>
   1812c:	ldr	r0, [pc, #44]	; 18160 <flatcc_builder_finalize_buffer@@Base+0xa8>
   18130:	add	r3, pc, r3
   18134:	ldr	r2, [pc, #40]	; 18164 <flatcc_builder_finalize_buffer@@Base+0xac>
   18138:	add	r3, r3, #1328	; 0x530
   1813c:	add	r1, pc, r1
   18140:	add	r0, pc, r0
   18144:	bl	124d4 <__assert_fail@plt>
   18148:	andeq	r5, r0, r8, rrx
   1814c:	andeq	r5, r0, ip, lsr #15
   18150:	andeq	r5, r0, r0, lsr r8
   18154:	muleq	r0, r8, r7
   18158:	andeq	r5, r0, r4, asr #32
   1815c:	andeq	r5, r0, r8, lsl #15
   18160:	andeq	r5, r0, ip, lsl #16
   18164:	muleq	r0, ip, r7

00018168 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18168:	push	{r4, r5, r6, r7, lr}
   1816c:	sub	sp, sp, #12
   18170:	mov	r6, r1
   18174:	mov	r7, r0
   18178:	bl	17f78 <flatcc_builder_get_buffer_size@@Base>
   1817c:	cmp	r6, #0
   18180:	strne	r0, [r6]
   18184:	mov	r4, r0
   18188:	mov	r0, r7
   1818c:	bl	17f3c <flatcc_builder_get_buffer_alignment@@Base>
   18190:	sub	r4, r4, #1
   18194:	mov	r1, r0
   18198:	rsb	r3, r0, #0
   1819c:	add	r4, r4, r0
   181a0:	add	r0, sp, #8
   181a4:	cmp	r1, #4
   181a8:	and	r4, r4, r3
   181ac:	mov	r3, #0
   181b0:	movcc	r1, #4
   181b4:	mov	r2, r4
   181b8:	str	r3, [r0, #-4]!
   181bc:	bl	12498 <posix_memalign@plt>
   181c0:	cmp	r0, #0
   181c4:	beq	181f4 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   181c8:	ldr	r0, [sp, #4]
   181cc:	cmp	r0, #0
   181d0:	beq	181d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   181d4:	bl	12420 <free@plt>
   181d8:	cmp	r6, #0
   181dc:	moveq	r5, r6
   181e0:	movne	r5, #0
   181e4:	strne	r5, [r6]
   181e8:	mov	r0, r5
   181ec:	add	sp, sp, #12
   181f0:	pop	{r4, r5, r6, r7, pc}
   181f4:	ldr	r5, [sp, #4]
   181f8:	cmp	r5, #0
   181fc:	beq	181d8 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18200:	mov	r2, r4
   18204:	mov	r0, r7
   18208:	mov	r1, r5
   1820c:	bl	18058 <flatcc_builder_copy_buffer@@Base>
   18210:	cmp	r0, #0
   18214:	bne	181e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   18218:	mov	r0, r5
   1821c:	b	181d4 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00018220 <flatcc_builder_aligned_alloc@@Base>:
   18220:	push	{r4, lr}
   18224:	sub	sp, sp, #8
   18228:	add	r3, sp, #8
   1822c:	cmp	r0, #4
   18230:	mov	r4, #0
   18234:	mov	r2, r1
   18238:	str	r4, [r3, #-4]!
   1823c:	movcs	r1, r0
   18240:	movcc	r1, #4
   18244:	mov	r0, r3
   18248:	bl	12498 <posix_memalign@plt>
   1824c:	cmp	r0, r4
   18250:	ldr	r0, [sp, #4]
   18254:	beq	18268 <flatcc_builder_aligned_alloc@@Base+0x48>
   18258:	cmp	r0, #0
   1825c:	beq	18268 <flatcc_builder_aligned_alloc@@Base+0x48>
   18260:	bl	12420 <free@plt>
   18264:	mov	r0, r4
   18268:	add	sp, sp, #8
   1826c:	pop	{r4, pc}

00018270 <flatcc_builder_aligned_free@@Base>:
   18270:	b	12420 <free@plt>

00018274 <flatcc_builder_get_emit_context@@Base>:
   18274:	ldr	r0, [r0, #36]	; 0x24
   18278:	bx	lr

0001827c <flatcc_emitter_recycle_page@@Base>:
   1827c:	ldr	r3, [r0]
   18280:	cmp	r3, r1
   18284:	beq	182cc <flatcc_emitter_recycle_page@@Base+0x50>
   18288:	ldr	r2, [r0, #4]
   1828c:	cmp	r1, r2
   18290:	beq	182cc <flatcc_emitter_recycle_page@@Base+0x50>
   18294:	ldr	ip, [r1, #2944]	; 0xb80
   18298:	ldr	r2, [r1, #2948]	; 0xb84
   1829c:	push	{lr}		; (str lr, [sp, #-4]!)
   182a0:	mov	r0, #0
   182a4:	str	r2, [ip, #2948]	; 0xb84
   182a8:	ldr	r2, [r3, #2948]	; 0xb84
   182ac:	ldr	lr, [r1, #2948]	; 0xb84
   182b0:	str	ip, [lr, #2944]	; 0xb80
   182b4:	str	r3, [r1, #2944]	; 0xb80
   182b8:	str	r2, [r1, #2948]	; 0xb84
   182bc:	str	r1, [r2, #2944]	; 0xb80
   182c0:	ldr	r3, [r1, #2944]	; 0xb80
   182c4:	str	r1, [r3, #2948]	; 0xb84
   182c8:	pop	{pc}		; (ldr pc, [sp], #4)
   182cc:	mvn	r0, #0
   182d0:	bx	lr

000182d4 <flatcc_emitter_reset@@Base>:
   182d4:	ldr	r2, [r0]
   182d8:	cmp	r2, #0
   182dc:	bxeq	lr
   182e0:	ldr	r3, [r0, #32]
   182e4:	mov	r1, #1472	; 0x5c0
   182e8:	push	{r4, lr}
   182ec:	cmp	r3, #0
   182f0:	str	r1, [r0, #12]
   182f4:	str	r1, [r0, #20]
   182f8:	ldr	r1, [r0, #24]
   182fc:	add	ip, r2, #1472	; 0x5c0
   18300:	moveq	r3, r1
   18304:	stmib	r0, {r2, ip}
   18308:	str	ip, [r0, #16]
   1830c:	add	ip, r3, r3, lsl #1
   18310:	lsr	r3, r1, #2
   18314:	add	r3, r3, ip, lsr #2
   18318:	ldr	ip, [r0, #28]
   1831c:	ldr	lr, [pc, #104]	; 1838c <flatcc_emitter_reset@@Base+0xb8>
   18320:	cmp	ip, r3, lsl #1
   18324:	mov	r1, #0
   18328:	str	lr, [r2, #2952]	; 0xb88
   1832c:	str	r3, [r0, #32]
   18330:	str	r1, [r0, #24]
   18334:	popls	{r4, pc}
   18338:	ldr	r3, [r2, #2944]	; 0xb80
   1833c:	mov	r4, r0
   18340:	cmp	r2, r3
   18344:	popeq	{r4, pc}
   18348:	ldr	r1, [r3, #2944]	; 0xb80
   1834c:	mov	r0, r3
   18350:	str	r1, [r2, #2944]	; 0xb80
   18354:	ldr	r3, [r3, #2944]	; 0xb80
   18358:	str	r2, [r3, #2948]	; 0xb84
   1835c:	bl	12420 <free@plt>
   18360:	ldr	r3, [r4, #28]
   18364:	ldr	r2, [r4, #32]
   18368:	sub	r3, r3, #2944	; 0xb80
   1836c:	str	r3, [r4, #28]
   18370:	cmp	r3, r2, lsl #1
   18374:	popls	{r4, pc}
   18378:	ldm	r4, {r1, r2}
   1837c:	ldr	r3, [r2, #2944]	; 0xb80
   18380:	cmp	r3, r1
   18384:	bne	18348 <flatcc_emitter_reset@@Base+0x74>
   18388:	pop	{r4, pc}
   1838c:			; <UNDEFINED> instruction: 0xfffffa40

00018390 <flatcc_emitter_clear@@Base>:
   18390:	ldr	r3, [r0]
   18394:	cmp	r3, #0
   18398:	bxeq	lr
   1839c:	ldr	r2, [r3, #2948]	; 0xb84
   183a0:	mov	r1, #0
   183a4:	push	{r4, r5, r6, lr}
   183a8:	mov	r5, r0
   183ac:	str	r1, [r2, #2944]	; 0xb80
   183b0:	ldr	r4, [r3, #2944]	; 0xb80
   183b4:	cmp	r4, r1
   183b8:	bne	183c4 <flatcc_emitter_clear@@Base+0x34>
   183bc:	b	183f4 <flatcc_emitter_clear@@Base+0x64>
   183c0:	mov	r4, r3
   183c4:	ldr	r0, [r4, #2948]	; 0xb84
   183c8:	bl	12420 <free@plt>
   183cc:	ldr	r3, [r4, #2944]	; 0xb80
   183d0:	cmp	r3, #0
   183d4:	bne	183c0 <flatcc_emitter_clear@@Base+0x30>
   183d8:	mov	r0, r4
   183dc:	bl	12420 <free@plt>
   183e0:	mov	r0, r5
   183e4:	mov	r2, #36	; 0x24
   183e8:	mov	r1, #0
   183ec:	pop	{r4, r5, r6, lr}
   183f0:	b	124a4 <memset@plt>
   183f4:	mov	r4, r3
   183f8:	b	183d8 <flatcc_emitter_clear@@Base+0x48>

000183fc <flatcc_emitter@@Base>:
   183fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18400:	sub	sp, sp, #12
   18404:	mov	r4, r0
   18408:	ldr	ip, [sp, #48]	; 0x30
   1840c:	ldr	r0, [r0, #24]
   18410:	cmp	r3, #0
   18414:	add	r0, r0, ip
   18418:	str	r0, [r4, #24]
   1841c:	blt	185e0 <flatcc_emitter@@Base+0x1e4>
   18420:	ldr	r0, [r4, #20]
   18424:	cmp	ip, r0
   18428:	bls	184b4 <flatcc_emitter@@Base+0xb8>
   1842c:	cmp	r2, #0
   18430:	addne	r7, r1, #8
   18434:	movne	r8, r2
   18438:	movne	r9, #2944	; 0xb80
   1843c:	beq	184a8 <flatcc_emitter@@Base+0xac>
   18440:	ldr	r6, [r7, #-4]
   18444:	ldr	sl, [r7, #-8]
   18448:	cmp	r6, #0
   1844c:	beq	1849c <flatcc_emitter@@Base+0xa0>
   18450:	cmp	r0, r6
   18454:	mov	r5, r0
   18458:	bcs	184fc <flatcc_emitter@@Base+0x100>
   1845c:	cmp	r0, #0
   18460:	beq	18508 <flatcc_emitter@@Base+0x10c>
   18464:	sub	r6, r6, r0
   18468:	mov	r1, sl
   1846c:	mov	r2, r5
   18470:	ldr	r0, [r4, #16]
   18474:	bl	1242c <memcpy@plt>
   18478:	ldr	r3, [r4, #16]
   1847c:	ldr	r0, [r4, #20]
   18480:	add	r3, r3, r5
   18484:	sub	r0, r0, r5
   18488:	cmp	r6, #0
   1848c:	add	sl, sl, r5
   18490:	str	r3, [r4, #16]
   18494:	str	r0, [r4, #20]
   18498:	bne	18450 <flatcc_emitter@@Base+0x54>
   1849c:	subs	r8, r8, #1
   184a0:	add	r7, r7, #8
   184a4:	bne	18440 <flatcc_emitter@@Base+0x44>
   184a8:	mov	r0, #0
   184ac:	add	sp, sp, #12
   184b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b4:	ldr	r3, [r4, #16]
   184b8:	sub	r0, r0, ip
   184bc:	add	ip, r3, ip
   184c0:	str	r0, [r4, #20]
   184c4:	str	ip, [r4, #16]
   184c8:	cmp	r2, #0
   184cc:	addne	r4, r1, #8
   184d0:	movne	r7, r2
   184d4:	beq	184a8 <flatcc_emitter@@Base+0xac>
   184d8:	ldmdb	r4, {r1, r2}
   184dc:	mov	r0, r3
   184e0:	bl	1242c <memcpy@plt>
   184e4:	ldr	r2, [r4, #-4]
   184e8:	subs	r7, r7, #1
   184ec:	add	r4, r4, #8
   184f0:	add	r3, r0, r2
   184f4:	bne	184d8 <flatcc_emitter@@Base+0xdc>
   184f8:	b	184a8 <flatcc_emitter@@Base+0xac>
   184fc:	mov	r5, r6
   18500:	mov	r6, #0
   18504:	b	18468 <flatcc_emitter@@Base+0x6c>
   18508:	ldr	fp, [r4, #4]
   1850c:	cmp	fp, #0
   18510:	beq	18580 <flatcc_emitter@@Base+0x184>
   18514:	ldr	r5, [fp, #2944]	; 0xb80
   18518:	ldr	r3, [r4]
   1851c:	cmp	r5, r3
   18520:	beq	18548 <flatcc_emitter@@Base+0x14c>
   18524:	str	r5, [r4, #4]
   18528:	ldr	r3, [r5, #2948]	; 0xb84
   1852c:	mov	r0, r9
   18530:	str	r5, [r4, #16]
   18534:	ldr	r3, [r3, #2952]	; 0xb88
   18538:	str	r9, [r4, #20]
   1853c:	add	r3, r3, #2944	; 0xb80
   18540:	str	r3, [r5, #2952]	; 0xb88
   18544:	b	18450 <flatcc_emitter@@Base+0x54>
   18548:	ldr	r0, [pc, #540]	; 1876c <flatcc_emitter@@Base+0x370>
   1854c:	bl	1245c <malloc@plt>
   18550:	cmp	r0, #0
   18554:	beq	18590 <flatcc_emitter@@Base+0x194>
   18558:	ldr	r3, [r4, #28]
   1855c:	str	r5, [r0, #2944]	; 0xb80
   18560:	add	r3, r3, #2944	; 0xb80
   18564:	str	fp, [r0, #2948]	; 0xb84
   18568:	str	r3, [r4, #28]
   1856c:	str	r0, [r5, #2948]	; 0xb84
   18570:	str	r0, [fp, #2944]	; 0xb80
   18574:	mov	r5, r0
   18578:	str	r0, [r4, #4]
   1857c:	b	18528 <flatcc_emitter@@Base+0x12c>
   18580:	ldr	r0, [pc, #484]	; 1876c <flatcc_emitter@@Base+0x370>
   18584:	bl	1245c <malloc@plt>
   18588:	cmp	r0, #0
   1858c:	bne	1859c <flatcc_emitter@@Base+0x1a0>
   18590:	mvn	r0, #0
   18594:	add	sp, sp, #12
   18598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1859c:	mov	r2, #1472	; 0x5c0
   185a0:	ldr	r3, [r4, #28]
   185a4:	str	r2, [r4, #12]
   185a8:	str	r2, [r4, #20]
   185ac:	sub	r2, r2, #2944	; 0xb80
   185b0:	str	r2, [r0, #2952]	; 0xb88
   185b4:	str	r0, [r4]
   185b8:	add	r3, r3, #2944	; 0xb80
   185bc:	str	r0, [r4, #4]
   185c0:	str	r0, [r0, #2944]	; 0xb80
   185c4:	str	r0, [r0, #2948]	; 0xb84
   185c8:	add	r0, r0, #1472	; 0x5c0
   185cc:	str	r0, [r4, #8]
   185d0:	str	r0, [r4, #16]
   185d4:	str	r3, [r4, #28]
   185d8:	mov	r0, #1472	; 0x5c0
   185dc:	b	18450 <flatcc_emitter@@Base+0x54>
   185e0:	ldr	r0, [r4, #12]
   185e4:	cmp	ip, r0
   185e8:	bls	18668 <flatcc_emitter@@Base+0x26c>
   185ec:	add	r6, r1, r2, lsl #3
   185f0:	mov	r7, r2
   185f4:	mov	r9, #2944	; 0xb80
   185f8:	mov	r8, #0
   185fc:	cmp	r7, #0
   18600:	beq	184a8 <flatcc_emitter@@Base+0xac>
   18604:	ldr	r5, [r6, #-4]
   18608:	ldr	sl, [r6, #-8]
   1860c:	cmp	r5, #0
   18610:	add	sl, sl, r5
   18614:	beq	1865c <flatcc_emitter@@Base+0x260>
   18618:	ldr	r2, [r4, #12]
   1861c:	cmp	r2, r5
   18620:	bcs	18680 <flatcc_emitter@@Base+0x284>
   18624:	cmp	r2, #0
   18628:	beq	18690 <flatcc_emitter@@Base+0x294>
   1862c:	sub	r5, r5, r2
   18630:	mov	r1, r8
   18634:	ldr	r0, [r4, #8]
   18638:	rsb	r3, r2, #0
   1863c:	add	r0, r0, r3
   18640:	add	sl, sl, r3
   18644:	str	r1, [r4, #12]
   18648:	str	r0, [r4, #8]
   1864c:	mov	r1, sl
   18650:	bl	1242c <memcpy@plt>
   18654:	cmp	r5, #0
   18658:	bne	18618 <flatcc_emitter@@Base+0x21c>
   1865c:	sub	r6, r6, #8
   18660:	sub	r7, r7, #1
   18664:	b	185fc <flatcc_emitter@@Base+0x200>
   18668:	ldr	r3, [r4, #8]
   1866c:	sub	r0, r0, ip
   18670:	sub	r3, r3, ip
   18674:	str	r0, [r4, #12]
   18678:	str	r3, [r4, #8]
   1867c:	b	184c8 <flatcc_emitter@@Base+0xcc>
   18680:	sub	r1, r2, r5
   18684:	mov	r2, r5
   18688:	mov	r5, #0
   1868c:	b	18634 <flatcc_emitter@@Base+0x238>
   18690:	ldr	r3, [r4]
   18694:	cmp	r3, #0
   18698:	beq	1871c <flatcc_emitter@@Base+0x320>
   1869c:	ldr	fp, [r3, #2948]	; 0xb84
   186a0:	ldr	r2, [r4, #4]
   186a4:	cmp	fp, r2
   186a8:	beq	186dc <flatcc_emitter@@Base+0x2e0>
   186ac:	ldr	r3, [r3, #2952]	; 0xb88
   186b0:	sub	r3, r3, #2944	; 0xb80
   186b4:	str	r3, [fp, #2952]	; 0xb88
   186b8:	str	fp, [r4]
   186bc:	ldr	r3, [fp, #2944]	; 0xb80
   186c0:	add	r2, fp, #2944	; 0xb80
   186c4:	str	r9, [r4, #12]
   186c8:	ldr	r3, [r3, #2952]	; 0xb88
   186cc:	str	r2, [r4, #8]
   186d0:	sub	r3, r3, #2944	; 0xb80
   186d4:	str	r3, [fp, #2952]	; 0xb88
   186d8:	b	18618 <flatcc_emitter@@Base+0x21c>
   186dc:	ldr	r0, [pc, #136]	; 1876c <flatcc_emitter@@Base+0x370>
   186e0:	str	r3, [sp, #4]
   186e4:	bl	1245c <malloc@plt>
   186e8:	ldr	r3, [sp, #4]
   186ec:	cmp	r0, #0
   186f0:	beq	18590 <flatcc_emitter@@Base+0x194>
   186f4:	ldr	r2, [r4, #28]
   186f8:	str	fp, [r0, #2948]	; 0xb84
   186fc:	add	r2, r2, #2944	; 0xb80
   18700:	str	r3, [r0, #2944]	; 0xb80
   18704:	str	r2, [r4, #28]
   18708:	str	r0, [r3, #2948]	; 0xb84
   1870c:	str	r0, [fp, #2944]	; 0xb80
   18710:	str	r0, [r4]
   18714:	mov	fp, r0
   18718:	b	186bc <flatcc_emitter@@Base+0x2c0>
   1871c:	ldr	r0, [pc, #72]	; 1876c <flatcc_emitter@@Base+0x370>
   18720:	bl	1245c <malloc@plt>
   18724:	cmp	r0, #0
   18728:	beq	18590 <flatcc_emitter@@Base+0x194>
   1872c:	mov	r2, #1472	; 0x5c0
   18730:	ldr	r3, [r4, #28]
   18734:	str	r2, [r4, #12]
   18738:	str	r2, [r4, #20]
   1873c:	sub	r2, r2, #2944	; 0xb80
   18740:	str	r2, [r0, #2952]	; 0xb88
   18744:	str	r0, [r4]
   18748:	add	r3, r3, #2944	; 0xb80
   1874c:	str	r0, [r4, #4]
   18750:	str	r0, [r0, #2944]	; 0xb80
   18754:	str	r0, [r0, #2948]	; 0xb84
   18758:	add	r0, r0, #1472	; 0x5c0
   1875c:	str	r0, [r4, #8]
   18760:	str	r0, [r4, #16]
   18764:	str	r3, [r4, #28]
   18768:	b	18618 <flatcc_emitter@@Base+0x21c>
   1876c:	andeq	r0, r0, ip, lsl #23

00018770 <flatcc_emitter_copy_buffer@@Base>:
   18770:	ldr	ip, [r0, #24]
   18774:	cmp	ip, r2
   18778:	bhi	18814 <flatcc_emitter_copy_buffer@@Base+0xa4>
   1877c:	ldr	r2, [r0]
   18780:	cmp	r2, #0
   18784:	beq	18814 <flatcc_emitter_copy_buffer@@Base+0xa4>
   18788:	mov	r3, r1
   1878c:	ldr	r1, [r0, #4]
   18790:	push	{r4, r5, r6, lr}
   18794:	cmp	r2, r1
   18798:	mov	r5, r0
   1879c:	beq	18820 <flatcc_emitter_copy_buffer@@Base+0xb0>
   187a0:	ldr	r4, [r0, #12]
   187a4:	ldr	r1, [r5, #8]
   187a8:	rsb	r4, r4, #2944	; 0xb80
   187ac:	mov	r2, r4
   187b0:	mov	r0, r3
   187b4:	bl	1242c <memcpy@plt>
   187b8:	ldr	r2, [r5]
   187bc:	ldr	r1, [r5, #4]
   187c0:	add	r3, r0, r4
   187c4:	ldr	r4, [r2, #2944]	; 0xb80
   187c8:	cmp	r4, r1
   187cc:	beq	187f8 <flatcc_emitter_copy_buffer@@Base+0x88>
   187d0:	mov	r6, #2944	; 0xb80
   187d4:	mov	r1, r4
   187d8:	mov	r0, r3
   187dc:	mov	r2, r6
   187e0:	bl	1242c <memcpy@plt>
   187e4:	ldr	r4, [r4, #2944]	; 0xb80
   187e8:	ldr	r1, [r5, #4]
   187ec:	cmp	r1, r4
   187f0:	add	r3, r0, #2944	; 0xb80
   187f4:	bne	187d4 <flatcc_emitter_copy_buffer@@Base+0x64>
   187f8:	ldr	r2, [r5, #20]
   187fc:	mov	r0, r3
   18800:	rsb	r2, r2, #2944	; 0xb80
   18804:	bl	1242c <memcpy@plt>
   18808:	mov	r3, r0
   1880c:	mov	r0, r3
   18810:	pop	{r4, r5, r6, pc}
   18814:	mov	r3, #0
   18818:	mov	r0, r3
   1881c:	bx	lr
   18820:	ldr	r1, [r0, #8]
   18824:	mov	r2, ip
   18828:	mov	r0, r3
   1882c:	bl	1242c <memcpy@plt>
   18830:	mov	r3, r0
   18834:	b	1880c <flatcc_emitter_copy_buffer@@Base+0x9c>

00018838 <grisu3_diy_fp_encode_double@@Base>:
   18838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1883c:	sub	sp, sp, #60	; 0x3c
   18840:	mov	sl, r0
   18844:	ldr	lr, [sp, #96]	; 0x60
   18848:	mov	fp, r1
   1884c:	cmp	lr, #0
   18850:	mov	r6, r3
   18854:	movne	lr, #4
   18858:	orrs	r3, sl, fp
   1885c:	sub	r2, r2, r6
   18860:	beq	18dcc <grisu3_diy_fp_encode_double@@Base+0x594>
   18864:	ldr	r1, [pc, #1380]	; 18dd0 <grisu3_diy_fp_encode_double@@Base+0x598>
   18868:	mov	r0, #0
   1886c:	and	r0, r0, sl
   18870:	and	r1, r1, fp
   18874:	orrs	r3, r0, r1
   18878:	movne	ip, #0
   1887c:	bne	188b8 <grisu3_diy_fp_encode_double@@Base+0x80>
   18880:	mvn	r4, #9
   18884:	lsl	r3, fp, #10
   18888:	lsl	r1, sl, #10
   1888c:	orr	r3, r3, sl, lsr #22
   18890:	mov	sl, r1
   18894:	ldr	r1, [pc, #1332]	; 18dd0 <grisu3_diy_fp_encode_double@@Base+0x598>
   18898:	mov	r0, #0
   1889c:	and	r0, r0, sl
   188a0:	and	r1, r1, r3
   188a4:	mov	fp, r3
   188a8:	orrs	r3, r0, r1
   188ac:	mov	ip, r4
   188b0:	sub	r4, r4, #10
   188b4:	beq	18884 <grisu3_diy_fp_encode_double@@Base+0x4c>
   188b8:	cmp	sl, #0
   188bc:	sbcs	r3, fp, #0
   188c0:	blt	188dc <grisu3_diy_fp_encode_double@@Base+0xa4>
   188c4:	adds	sl, sl, sl
   188c8:	adc	fp, fp, fp
   188cc:	cmp	sl, #0
   188d0:	sbcs	r3, fp, #0
   188d4:	sub	ip, ip, #1
   188d8:	bge	188c4 <grisu3_diy_fp_encode_double@@Base+0x8c>
   188dc:	rsb	r3, ip, #0
   188e0:	cmn	r2, #348	; 0x15c
   188e4:	lsl	r3, lr, r3
   188e8:	str	r3, [sp, #20]
   188ec:	blt	18da8 <grisu3_diy_fp_encode_double@@Base+0x570>
   188f0:	cmp	r2, #348	; 0x15c
   188f4:	bge	18d84 <grisu3_diy_fp_encode_double@@Base+0x54c>
   188f8:	add	r1, r2, #348	; 0x15c
   188fc:	ldr	r3, [pc, #1232]	; 18dd4 <grisu3_diy_fp_encode_double@@Base+0x59c>
   18900:	asr	r1, r1, #3
   18904:	add	r3, pc, r3
   18908:	add	r1, r3, r1, lsl #4
   1890c:	ldrsh	r7, [r1, #66]	; 0x42
   18910:	ldrd	r4, [r1, #56]	; 0x38
   18914:	ldrsh	r1, [r1, #64]	; 0x40
   18918:	cmp	r2, r7
   1891c:	strd	r4, [sp]
   18920:	str	r1, [sp, #40]	; 0x28
   18924:	blt	18d68 <grisu3_diy_fp_encode_double@@Base+0x530>
   18928:	add	r1, r7, #7
   1892c:	cmp	r2, r1
   18930:	bgt	18d4c <grisu3_diy_fp_encode_double@@Base+0x514>
   18934:	cmp	r2, r7
   18938:	beq	18a28 <grisu3_diy_fp_encode_double@@Base+0x1f0>
   1893c:	sub	r2, r2, r7
   18940:	sub	r7, r2, #1
   18944:	cmp	r7, #6
   18948:	bhi	18d2c <grisu3_diy_fp_encode_double@@Base+0x4f4>
   1894c:	ldr	r0, [pc, #1156]	; 18dd8 <grisu3_diy_fp_encode_double@@Base+0x5a0>
   18950:	lsl	r1, r7, #4
   18954:	add	r0, pc, r0
   18958:	mov	r3, #0
   1895c:	ldrd	r4, [r0, r1]
   18960:	add	r1, r0, r1
   18964:	str	r1, [sp, #44]	; 0x2c
   18968:	mov	r8, r4
   1896c:	mov	r0, r4
   18970:	strd	r4, [sp, #24]
   18974:	umull	r4, r5, sl, r5
   18978:	mov	r1, #0
   1897c:	strd	r4, [sp, #32]
   18980:	umull	r4, r5, fp, r8
   18984:	mul	lr, sl, r1
   18988:	mla	r2, fp, r1, r5
   1898c:	mla	lr, r8, r3, lr
   18990:	ldr	r1, [sp, #28]
   18994:	umull	r8, r9, sl, r0
   18998:	ldr	r0, [sp, #36]	; 0x24
   1899c:	strd	r4, [sp, #48]	; 0x30
   189a0:	mla	r3, r1, r3, r0
   189a4:	add	r0, lr, r9
   189a8:	mov	lr, #0
   189ac:	str	r0, [sp, #8]
   189b0:	str	lr, [sp, #12]
   189b4:	mov	r4, r2
   189b8:	mov	r0, r3
   189bc:	ldrd	r2, [sp, #8]
   189c0:	ldr	r8, [sp, #48]	; 0x30
   189c4:	add	r6, r6, #1
   189c8:	adds	r2, r2, r8
   189cc:	adc	r3, r3, #0
   189d0:	adds	r0, r0, r4
   189d4:	ldr	r4, [sp, #28]
   189d8:	adc	r1, lr, lr
   189dc:	adds	r2, r2, #-2147483648	; 0x80000000
   189e0:	umlal	r0, r1, r4, fp
   189e4:	mov	fp, r1
   189e8:	ldr	r1, [sp, #44]	; 0x2c
   189ec:	adc	r3, r3, #0
   189f0:	mov	sl, r0
   189f4:	ldr	r4, [r1, #8]
   189f8:	ldr	r1, [sp, #32]
   189fc:	add	r7, r6, r7
   18a00:	adds	r2, r2, r1
   18a04:	adc	r3, r3, #0
   18a08:	adds	sl, sl, r3
   18a0c:	adc	fp, fp, lr
   18a10:	cmp	r7, #19
   18a14:	add	ip, ip, r4
   18a18:	ldrgt	r3, [sp, #20]
   18a1c:	add	ip, ip, #64	; 0x40
   18a20:	addgt	r3, r3, #4
   18a24:	strgt	r3, [sp, #20]
   18a28:	ldrd	r0, [sp]
   18a2c:	mov	r3, #0
   18a30:	mov	r5, #0
   18a34:	mov	r2, r0
   18a38:	umull	r6, r7, sl, r1
   18a3c:	umull	r8, r9, fp, r2
   18a40:	mul	lr, sl, r3
   18a44:	mla	r9, fp, r3, r9
   18a48:	ldr	r3, [sp, #4]
   18a4c:	umull	r0, r1, sl, r2
   18a50:	mla	r0, r2, r5, lr
   18a54:	mla	lr, r3, r5, r7
   18a58:	add	r2, r0, r1
   18a5c:	adds	r2, r2, r8
   18a60:	mov	r0, lr
   18a64:	ldr	r4, [sp, #4]
   18a68:	mov	lr, #0
   18a6c:	adc	r3, lr, #0
   18a70:	adds	r0, r0, r9
   18a74:	adc	r1, lr, lr
   18a78:	umlal	r0, r1, r4, fp
   18a7c:	adds	r2, r2, #-2147483648	; 0x80000000
   18a80:	adc	r3, r3, #0
   18a84:	adds	r2, r2, r6
   18a88:	adc	r3, r3, #0
   18a8c:	adds	r6, r3, r0
   18a90:	ldr	r3, [sp, #40]	; 0x28
   18a94:	adc	r7, lr, r1
   18a98:	add	ip, ip, r3
   18a9c:	ldr	r3, [sp, #20]
   18aa0:	cmp	r3, lr
   18aa4:	moveq	r2, #8
   18aa8:	movne	r2, #9
   18aac:	orrs	r1, r6, r7
   18ab0:	add	r2, r3, r2
   18ab4:	add	lr, ip, #64	; 0x40
   18ab8:	beq	18dcc <grisu3_diy_fp_encode_double@@Base+0x594>
   18abc:	ldr	r1, [pc, #780]	; 18dd0 <grisu3_diy_fp_encode_double@@Base+0x598>
   18ac0:	mov	r0, #0
   18ac4:	and	r0, r0, r6
   18ac8:	and	r1, r1, r7
   18acc:	orrs	r3, r0, r1
   18ad0:	bne	18d04 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   18ad4:	add	ip, ip, #54	; 0x36
   18ad8:	lsl	r3, r7, #10
   18adc:	lsl	r1, r6, #10
   18ae0:	orr	r3, r3, r6, lsr #22
   18ae4:	mov	r6, r1
   18ae8:	ldr	r1, [pc, #736]	; 18dd0 <grisu3_diy_fp_encode_double@@Base+0x598>
   18aec:	mov	r0, #0
   18af0:	and	r1, r1, r3
   18af4:	and	r0, r0, r6
   18af8:	mov	r7, r3
   18afc:	orrs	r3, r0, r1
   18b00:	mov	r3, ip
   18b04:	sub	ip, ip, #10
   18b08:	beq	18ad8 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   18b0c:	cmp	r6, #0
   18b10:	sbcs	r1, r7, #0
   18b14:	blt	18b30 <grisu3_diy_fp_encode_double@@Base+0x2f8>
   18b18:	adds	r6, r6, r6
   18b1c:	adc	r7, r7, r7
   18b20:	cmp	r6, #0
   18b24:	sbcs	r1, r7, #0
   18b28:	sub	r3, r3, #1
   18b2c:	bge	18b18 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   18b30:	ldr	r0, [pc, #676]	; 18ddc <grisu3_diy_fp_encode_double@@Base+0x5a4>
   18b34:	sub	lr, lr, r3
   18b38:	add	r1, r3, #64	; 0x40
   18b3c:	cmp	r1, r0
   18b40:	lsl	r2, r2, lr
   18b44:	blt	18c88 <grisu3_diy_fp_encode_double@@Base+0x450>
   18b48:	mov	r1, #0
   18b4c:	mov	lr, r1
   18b50:	mov	r0, #4
   18b54:	lsr	r4, r6, lr
   18b58:	rsb	r6, lr, #32
   18b5c:	sub	ip, lr, #32
   18b60:	orr	r4, r4, r7, lsl r6
   18b64:	orr	r4, r4, r7, lsr ip
   18b68:	add	ip, r2, r0
   18b6c:	cmp	lr, ip
   18b70:	add	r3, lr, r3
   18b74:	lsr	r5, r7, lr
   18b78:	blt	18ba0 <grisu3_diy_fp_encode_double@@Base+0x368>
   18b7c:	adds	r4, r4, #1
   18b80:	adc	r5, r5, #0
   18b84:	mov	r6, #0
   18b88:	and	r7, r5, #2097152	; 0x200000
   18b8c:	orrs	lr, r6, r7
   18b90:	beq	18ba0 <grisu3_diy_fp_encode_double@@Base+0x368>
   18b94:	lsrs	r5, r5, #1
   18b98:	rrx	r4, r4
   18b9c:	add	r3, r3, #1
   18ba0:	ldr	r7, [pc, #568]	; 18de0 <grisu3_diy_fp_encode_double@@Base+0x5a8>
   18ba4:	mvn	r6, #0
   18ba8:	cmp	r5, r7
   18bac:	cmpeq	r4, r6
   18bb0:	bls	18bcc <grisu3_diy_fp_encode_double@@Base+0x394>
   18bb4:	lsrs	r5, r5, #1
   18bb8:	rrx	r4, r4
   18bbc:	cmp	r5, r7
   18bc0:	cmpeq	r4, r6
   18bc4:	add	r3, r3, #1
   18bc8:	bhi	18bb4 <grisu3_diy_fp_encode_double@@Base+0x37c>
   18bcc:	ldr	r8, [pc, #528]	; 18de4 <grisu3_diy_fp_encode_double@@Base+0x5ac>
   18bd0:	cmp	r3, r8
   18bd4:	movlt	r8, #0
   18bd8:	movlt	r9, #0
   18bdc:	blt	18c5c <grisu3_diy_fp_encode_double@@Base+0x424>
   18be0:	beq	18c30 <grisu3_diy_fp_encode_double@@Base+0x3f8>
   18be4:	mov	r6, #0
   18be8:	and	r7, r5, #1048576	; 0x100000
   18bec:	orrs	lr, r6, r7
   18bf0:	addne	r3, r3, #1072	; 0x430
   18bf4:	addne	r3, r3, #3
   18bf8:	movne	r8, #0
   18bfc:	lslne	r9, r3, #20
   18c00:	beq	18c1c <grisu3_diy_fp_encode_double@@Base+0x3e4>
   18c04:	b	18c44 <grisu3_diy_fp_encode_double@@Base+0x40c>
   18c08:	mov	r6, #0
   18c0c:	and	r7, r5, #1048576	; 0x100000
   18c10:	orrs	r6, r6, r7
   18c14:	bne	18ce8 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   18c18:	mov	r3, lr
   18c1c:	adds	r4, r4, r4
   18c20:	sub	lr, r3, #1
   18c24:	adc	r5, r5, r5
   18c28:	cmp	lr, r8
   18c2c:	bne	18c08 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   18c30:	mov	r8, #0
   18c34:	and	r9, r5, #1048576	; 0x100000
   18c38:	orrs	r3, r8, r9
   18c3c:	movne	r8, #0
   18c40:	movne	r9, #1048576	; 0x100000
   18c44:	ldr	r7, [pc, #412]	; 18de8 <grisu3_diy_fp_encode_double@@Base+0x5b0>
   18c48:	mvn	r6, #0
   18c4c:	and	r4, r4, r6
   18c50:	and	r5, r5, r7
   18c54:	orr	r8, r8, r4
   18c58:	orr	r9, r9, r5
   18c5c:	ldr	r3, [sp, #100]	; 0x64
   18c60:	cmp	ip, r1
   18c64:	sub	r0, r0, r2
   18c68:	movgt	ip, #0
   18c6c:	movle	ip, #1
   18c70:	cmp	r0, r1
   18c74:	movlt	r0, ip
   18c78:	orrge	r0, ip, #1
   18c7c:	strd	r8, [r3]
   18c80:	add	sp, sp, #60	; 0x3c
   18c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c88:	mvn	r0, #1072	; 0x430
   18c8c:	cmp	r1, r0
   18c90:	blt	18cfc <grisu3_diy_fp_encode_double@@Base+0x4c4>
   18c94:	add	r1, r3, #1136	; 0x470
   18c98:	add	r1, r1, #2
   18c9c:	rsb	lr, r1, #64	; 0x40
   18ca0:	cmp	lr, #60	; 0x3c
   18ca4:	rsbgt	r1, r1, #2
   18ca8:	ble	18d0c <grisu3_diy_fp_encode_double@@Base+0x4d4>
   18cac:	rsb	r0, r1, #32
   18cb0:	lsr	ip, r6, r1
   18cb4:	orr	ip, ip, r7, lsl r0
   18cb8:	sub	r0, r1, #32
   18cbc:	lsr	lr, r7, r1
   18cc0:	orr	ip, ip, r7, lsr r0
   18cc4:	asr	r2, r2, r1
   18cc8:	add	r3, r3, r1
   18ccc:	mov	r1, #0
   18cd0:	mov	r7, lr
   18cd4:	mov	r6, ip
   18cd8:	add	r2, r2, #9
   18cdc:	mov	r0, r1
   18ce0:	mov	lr, #62	; 0x3e
   18ce4:	b	18b54 <grisu3_diy_fp_encode_double@@Base+0x31c>
   18ce8:	add	r3, r3, #1072	; 0x430
   18cec:	add	r3, r3, #2
   18cf0:	mov	r8, #0
   18cf4:	lsl	r9, r3, #20
   18cf8:	b	18c44 <grisu3_diy_fp_encode_double@@Base+0x40c>
   18cfc:	mov	r1, #2
   18d00:	b	18cac <grisu3_diy_fp_encode_double@@Base+0x474>
   18d04:	mov	r3, lr
   18d08:	b	18b0c <grisu3_diy_fp_encode_double@@Base+0x2d4>
   18d0c:	rsb	r1, r1, #63	; 0x3f
   18d10:	mov	ip, #1
   18d14:	mov	r0, #8
   18d18:	lsl	r4, ip, r1
   18d1c:	and	r4, r4, r6
   18d20:	lsl	r0, r0, r1
   18d24:	lsl	r1, r4, #3
   18d28:	b	18b54 <grisu3_diy_fp_encode_double@@Base+0x31c>
   18d2c:	ldr	r1, [pc, #184]	; 18dec <grisu3_diy_fp_encode_double@@Base+0x5b4>
   18d30:	ldr	r0, [pc, #184]	; 18df0 <grisu3_diy_fp_encode_double@@Base+0x5b8>
   18d34:	add	r3, r3, #1440	; 0x5a0
   18d38:	add	r3, r3, #8
   18d3c:	mov	r2, #185	; 0xb9
   18d40:	add	r1, pc, r1
   18d44:	add	r0, pc, r0
   18d48:	bl	124d4 <__assert_fail@plt>
   18d4c:	ldr	r1, [pc, #160]	; 18df4 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   18d50:	ldr	r0, [pc, #160]	; 18df8 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   18d54:	add	r3, r3, #24
   18d58:	mov	r2, #89	; 0x59
   18d5c:	add	r1, pc, r1
   18d60:	add	r0, pc, r0
   18d64:	bl	124d4 <__assert_fail@plt>
   18d68:	ldr	r1, [pc, #140]	; 18dfc <grisu3_diy_fp_encode_double@@Base+0x5c4>
   18d6c:	ldr	r0, [pc, #140]	; 18e00 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   18d70:	add	r3, r3, #24
   18d74:	mov	r2, #88	; 0x58
   18d78:	add	r1, pc, r1
   18d7c:	add	r0, pc, r0
   18d80:	bl	124d4 <__assert_fail@plt>
   18d84:	ldr	r3, [pc, #120]	; 18e04 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   18d88:	ldr	r1, [pc, #120]	; 18e08 <grisu3_diy_fp_encode_double@@Base+0x5d0>
   18d8c:	ldr	r0, [pc, #120]	; 18e0c <grisu3_diy_fp_encode_double@@Base+0x5d4>
   18d90:	add	r3, pc, r3
   18d94:	mov	r2, #81	; 0x51
   18d98:	add	r3, r3, #24
   18d9c:	add	r1, pc, r1
   18da0:	add	r0, pc, r0
   18da4:	bl	124d4 <__assert_fail@plt>
   18da8:	ldr	r3, [pc, #96]	; 18e10 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   18dac:	ldr	r1, [pc, #96]	; 18e14 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   18db0:	ldr	r0, [pc, #96]	; 18e18 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   18db4:	add	r3, pc, r3
   18db8:	mov	r2, #80	; 0x50
   18dbc:	add	r3, r3, #24
   18dc0:	add	r1, pc, r1
   18dc4:	add	r0, pc, r0
   18dc8:	bl	124d4 <__assert_fail@plt>
   18dcc:	bl	125b4 <__assert_fail@plt+0xe0>
   18dd0:			; <UNDEFINED> instruction: 0xffc00000
   18dd4:	andeq	r5, r0, r4, ror #7
   18dd8:	andeq	r6, r1, r4, lsl r7
   18ddc:			; <UNDEFINED> instruction: 0xfffffc0e
   18de0:			; <UNDEFINED> instruction: 0x001fffff
   18de4:			; <UNDEFINED> instruction: 0xfffffbce
   18de8:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   18dec:	andeq	r5, r0, r0, lsr r8
   18df0:	andeq	r5, r0, r4, lsl r9
   18df4:	andeq	r5, r0, r4, lsl r8
   18df8:	ldrdeq	r5, [r0], -ip
   18dfc:	strdeq	r5, [r0], -r8
   18e00:			; <UNDEFINED> instruction: 0x000058b0
   18e04:	andeq	r4, r0, r8, asr pc
   18e08:	ldrdeq	r5, [r0], -r4
   18e0c:	andeq	r5, r0, r0, ror #16
   18e10:	andeq	r4, r0, r4, lsr pc
   18e14:			; <UNDEFINED> instruction: 0x000057b0
   18e18:	andeq	r5, r0, ip, lsl r8
   18e1c:	cmp	r1, #1000	; 0x3e8
   18e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e24:	addle	r1, r1, #1
   18e28:	addgt	lr, r0, #1000	; 0x3e8
   18e2c:	mov	r4, #0
   18e30:	mov	r5, #0
   18e34:	addle	lr, r0, r1
   18e38:	addgt	lr, lr, #1
   18e3c:	cmp	lr, r0
   18e40:	sub	sp, sp, #44	; 0x2c
   18e44:	mov	fp, r2
   18e48:	mov	sl, r0
   18e4c:	strd	r4, [r2]
   18e50:	beq	1938c <grisu3_diy_fp_encode_double@@Base+0xb54>
   18e54:	ldrb	r0, [r0]
   18e58:	cmp	r0, #45	; 0x2d
   18e5c:	movne	r2, #0
   18e60:	movne	r3, sl
   18e64:	strne	r2, [sp, #16]
   18e68:	beq	1921c <grisu3_diy_fp_encode_double@@Base+0x9e4>
   18e6c:	cmp	r0, #48	; 0x30
   18e70:	beq	1923c <grisu3_diy_fp_encode_double@@Base+0xa04>
   18e74:	sub	r2, r0, #49	; 0x31
   18e78:	cmp	r2, #8
   18e7c:	bhi	18f7c <grisu3_diy_fp_encode_double@@Base+0x744>
   18e80:	add	r9, r3, #1
   18e84:	sub	r0, r0, #48	; 0x30
   18e88:	cmp	lr, r9
   18e8c:	asr	r1, r0, #31
   18e90:	beq	197ec <grisu3_diy_fp_encode_double@@Base+0xfb4>
   18e94:	ldrb	ip, [r3, #1]
   18e98:	sub	r3, ip, #48	; 0x30
   18e9c:	cmp	r3, #9
   18ea0:	movhi	r4, r9
   18ea4:	movhi	r9, #0
   18ea8:	bhi	18f0c <grisu3_diy_fp_encode_double@@Base+0x6d4>
   18eac:	add	r5, r9, #1
   18eb0:	mov	r8, #10
   18eb4:	add	r7, pc, #988	; 0x3dc
   18eb8:	ldrd	r6, [r7]
   18ebc:	b	18ed0 <grisu3_diy_fp_encode_double@@Base+0x698>
   18ec0:	cmp	r1, r7
   18ec4:	cmpeq	r0, r6
   18ec8:	bhi	18f98 <grisu3_diy_fp_encode_double@@Base+0x760>
   18ecc:	mov	r5, r3
   18ed0:	umull	r2, r3, r0, r8
   18ed4:	mla	r3, r8, r1, r3
   18ed8:	adds	r0, r2, ip
   18edc:	adc	r1, r3, #0
   18ee0:	subs	r0, r0, #48	; 0x30
   18ee4:	sbc	r1, r1, #0
   18ee8:	cmp	r5, lr
   18eec:	mov	r4, r5
   18ef0:	beq	19620 <grisu3_diy_fp_encode_double@@Base+0xde8>
   18ef4:	ldrb	ip, [r5]
   18ef8:	add	r3, r5, #1
   18efc:	sub	r2, ip, #48	; 0x30
   18f00:	cmp	r2, #9
   18f04:	bls	18ec0 <grisu3_diy_fp_encode_double@@Base+0x688>
   18f08:	sub	r9, r5, r9
   18f0c:	mov	r8, #0
   18f10:	mov	r2, r8
   18f14:	sub	r3, ip, #49	; 0x31
   18f18:	cmp	r3, #8
   18f1c:	bhi	19158 <grisu3_diy_fp_encode_double@@Base+0x920>
   18f20:	add	r6, r4, #1
   18f24:	cmp	lr, r6
   18f28:	add	r5, r2, #1
   18f2c:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   18f30:	ldrb	ip, [r4, #1]
   18f34:	sub	r3, ip, #48	; 0x30
   18f38:	cmp	r3, #9
   18f3c:	bhi	1914c <grisu3_diy_fp_encode_double@@Base+0x914>
   18f40:	sub	r2, r2, r4
   18f44:	add	r4, r4, #2
   18f48:	b	18f5c <grisu3_diy_fp_encode_double@@Base+0x724>
   18f4c:	ldrb	ip, [r4], #1
   18f50:	sub	r3, ip, #48	; 0x30
   18f54:	cmp	r3, #9
   18f58:	bhi	1914c <grisu3_diy_fp_encode_double@@Base+0x914>
   18f5c:	cmp	r4, lr
   18f60:	add	r5, r2, r4
   18f64:	mov	r6, r4
   18f68:	bne	18f4c <grisu3_diy_fp_encode_double@@Base+0x714>
   18f6c:	add	r5, r5, r9
   18f70:	mov	r4, lr
   18f74:	mov	r8, #1
   18f78:	b	18fec <grisu3_diy_fp_encode_double@@Base+0x7b4>
   18f7c:	ldr	r3, [sp, #16]
   18f80:	cmp	r3, #0
   18f84:	moveq	r4, sl
   18f88:	movne	r4, #0
   18f8c:	mov	r0, r4
   18f90:	add	sp, sp, #44	; 0x2c
   18f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f98:	cmp	ip, #52	; 0x34
   18f9c:	movls	r2, #0
   18fa0:	movhi	r2, #1
   18fa4:	adds	r0, r0, r2
   18fa8:	adc	r1, r1, #0
   18fac:	cmp	ip, #48	; 0x30
   18fb0:	sub	r9, r4, r9
   18fb4:	movne	r8, #1
   18fb8:	movne	r2, #0
   18fbc:	beq	18fd4 <grisu3_diy_fp_encode_double@@Base+0x79c>
   18fc0:	b	18f14 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   18fc4:	ldrb	ip, [r3]
   18fc8:	add	r3, r3, #1
   18fcc:	cmp	ip, #48	; 0x30
   18fd0:	bne	19290 <grisu3_diy_fp_encode_double@@Base+0xa58>
   18fd4:	cmp	lr, r3
   18fd8:	mov	r4, r3
   18fdc:	sub	r2, r3, r5
   18fe0:	bne	18fc4 <grisu3_diy_fp_encode_double@@Base+0x78c>
   18fe4:	add	r5, r2, r9
   18fe8:	mov	r8, #1
   18fec:	cmp	lr, r4
   18ff0:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   18ff4:	orrs	r3, r0, r1
   18ff8:	moveq	r2, #1
   18ffc:	movne	r2, #0
   19000:	cmn	r5, #324	; 0x144
   19004:	movge	r3, #0
   19008:	movlt	r3, #1
   1900c:	orrs	r3, r2, r3
   19010:	bne	19128 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   19014:	ldr	r3, [pc, #652]	; 192a8 <grisu3_diy_fp_encode_double@@Base+0xa70>
   19018:	cmp	r5, r3
   1901c:	bgt	192b8 <grisu3_diy_fp_encode_double@@Base+0xa80>
   19020:	ldr	r3, [pc, #644]	; 192ac <grisu3_diy_fp_encode_double@@Base+0xa74>
   19024:	mvn	r2, #0
   19028:	cmp	r1, r3
   1902c:	cmpeq	r0, r2
   19030:	movls	r3, #1
   19034:	movhi	r3, #0
   19038:	cmp	r5, #22
   1903c:	movhi	r3, #0
   19040:	andls	r3, r3, #1
   19044:	cmp	r3, #0
   19048:	beq	193b4 <grisu3_diy_fp_encode_double@@Base+0xb7c>
   1904c:	bl	1cda4 <flatcc_json_parser_table_as_root@@Base+0x350>
   19050:	sub	r9, r5, r9
   19054:	add	r3, r9, #22
   19058:	vmov	d7, r0, r1
   1905c:	cmp	r3, #44	; 0x2c
   19060:	addls	pc, pc, r3, lsl #2
   19064:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19068:	b	19518 <grisu3_diy_fp_encode_double@@Base+0xce0>
   1906c:	b	19524 <grisu3_diy_fp_encode_double@@Base+0xcec>
   19070:	b	1950c <grisu3_diy_fp_encode_double@@Base+0xcd4>
   19074:	b	195e4 <grisu3_diy_fp_encode_double@@Base+0xdac>
   19078:	b	195d8 <grisu3_diy_fp_encode_double@@Base+0xda0>
   1907c:	b	195cc <grisu3_diy_fp_encode_double@@Base+0xd94>
   19080:	b	195c0 <grisu3_diy_fp_encode_double@@Base+0xd88>
   19084:	b	195b4 <grisu3_diy_fp_encode_double@@Base+0xd7c>
   19088:	b	195a8 <grisu3_diy_fp_encode_double@@Base+0xd70>
   1908c:	b	1959c <grisu3_diy_fp_encode_double@@Base+0xd64>
   19090:	b	19590 <grisu3_diy_fp_encode_double@@Base+0xd58>
   19094:	b	19584 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   19098:	b	19578 <grisu3_diy_fp_encode_double@@Base+0xd40>
   1909c:	b	1956c <grisu3_diy_fp_encode_double@@Base+0xd34>
   190a0:	b	19560 <grisu3_diy_fp_encode_double@@Base+0xd28>
   190a4:	b	19554 <grisu3_diy_fp_encode_double@@Base+0xd1c>
   190a8:	b	19548 <grisu3_diy_fp_encode_double@@Base+0xd10>
   190ac:	b	1953c <grisu3_diy_fp_encode_double@@Base+0xd04>
   190b0:	b	19530 <grisu3_diy_fp_encode_double@@Base+0xcf8>
   190b4:	b	19494 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   190b8:	b	19488 <grisu3_diy_fp_encode_double@@Base+0xc50>
   190bc:	b	1947c <grisu3_diy_fp_encode_double@@Base+0xc44>
   190c0:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   190c4:	b	19464 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   190c8:	b	19458 <grisu3_diy_fp_encode_double@@Base+0xc20>
   190cc:	b	1944c <grisu3_diy_fp_encode_double@@Base+0xc14>
   190d0:	b	19440 <grisu3_diy_fp_encode_double@@Base+0xc08>
   190d4:	b	19434 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   190d8:	b	19428 <grisu3_diy_fp_encode_double@@Base+0xbf0>
   190dc:	b	1941c <grisu3_diy_fp_encode_double@@Base+0xbe4>
   190e0:	b	19410 <grisu3_diy_fp_encode_double@@Base+0xbd8>
   190e4:	b	19404 <grisu3_diy_fp_encode_double@@Base+0xbcc>
   190e8:	b	193f8 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   190ec:	b	193ec <grisu3_diy_fp_encode_double@@Base+0xbb4>
   190f0:	b	1911c <grisu3_diy_fp_encode_double@@Base+0x8e4>
   190f4:	b	194f4 <grisu3_diy_fp_encode_double@@Base+0xcbc>
   190f8:	b	194e8 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   190fc:	b	194dc <grisu3_diy_fp_encode_double@@Base+0xca4>
   19100:	b	194d0 <grisu3_diy_fp_encode_double@@Base+0xc98>
   19104:	b	194c4 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   19108:	b	194b8 <grisu3_diy_fp_encode_double@@Base+0xc80>
   1910c:	b	194ac <grisu3_diy_fp_encode_double@@Base+0xc74>
   19110:	b	194a0 <grisu3_diy_fp_encode_double@@Base+0xc68>
   19114:	b	19500 <grisu3_diy_fp_encode_double@@Base+0xcc8>
   19118:	b	19470 <grisu3_diy_fp_encode_double@@Base+0xc38>
   1911c:	vldr	d6, [pc, #380]	; 192a0 <grisu3_diy_fp_encode_double@@Base+0xa68>
   19120:	vmul.f64	d7, d7, d6
   19124:	vstr	d7, [fp]
   19128:	ldr	r3, [sp, #16]
   1912c:	cmp	r3, #0
   19130:	beq	18f8c <grisu3_diy_fp_encode_double@@Base+0x754>
   19134:	vldr	d7, [fp]
   19138:	mov	r0, r4
   1913c:	vneg.f64	d7, d7
   19140:	vstr	d7, [fp]
   19144:	add	sp, sp, #44	; 0x2c
   19148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1914c:	mov	r2, r5
   19150:	mov	r4, r6
   19154:	mov	r8, #1
   19158:	cmp	ip, #46	; 0x2e
   1915c:	beq	192d0 <grisu3_diy_fp_encode_double@@Base+0xa98>
   19160:	cmp	lr, r4
   19164:	add	r5, r2, r9
   19168:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   1916c:	orr	ip, ip, #32
   19170:	cmp	ip, #101	; 0x65
   19174:	bne	18ff4 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   19178:	sub	r3, lr, r4
   1917c:	cmp	r3, #1
   19180:	ble	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   19184:	ldrb	r2, [r4, #1]
   19188:	cmp	r2, #43	; 0x2b
   1918c:	beq	19604 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   19190:	cmp	r2, #45	; 0x2d
   19194:	beq	197c8 <grisu3_diy_fp_encode_double@@Base+0xf90>
   19198:	add	ip, r4, #1
   1919c:	mov	r3, #0
   191a0:	str	r3, [sp, #8]
   191a4:	sub	r2, r2, #48	; 0x30
   191a8:	uxtb	r3, r2
   191ac:	cmp	r3, #9
   191b0:	bhi	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   191b4:	add	r4, ip, #1
   191b8:	cmp	lr, r4
   191bc:	beq	19208 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   191c0:	ldrb	r3, [ip, #1]
   191c4:	sub	r6, r3, #48	; 0x30
   191c8:	cmp	r6, #9
   191cc:	bhi	195f0 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   191d0:	ldr	r7, [pc, #216]	; 192b0 <grisu3_diy_fp_encode_double@@Base+0xa78>
   191d4:	add	ip, ip, #2
   191d8:	b	191ec <grisu3_diy_fp_encode_double@@Base+0x9b4>
   191dc:	ldrb	r3, [ip], #1
   191e0:	sub	r6, r3, #48	; 0x30
   191e4:	cmp	r6, #9
   191e8:	bhi	195f0 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   191ec:	add	r4, r2, r2, lsl #2
   191f0:	cmp	r2, r7
   191f4:	add	r4, r3, r4, lsl #1
   191f8:	suble	r2, r4, #48	; 0x30
   191fc:	cmp	lr, ip
   19200:	mov	r4, ip
   19204:	bne	191dc <grisu3_diy_fp_encode_double@@Base+0x9a4>
   19208:	ldr	r3, [sp, #8]
   1920c:	cmp	r3, #0
   19210:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   19214:	sub	r5, r5, r2
   19218:	b	18fec <grisu3_diy_fp_encode_double@@Base+0x7b4>
   1921c:	add	r3, sl, #1
   19220:	cmp	lr, r3
   19224:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   19228:	ldrb	r0, [sl, #1]
   1922c:	mov	r2, #1
   19230:	str	r2, [sp, #16]
   19234:	cmp	r0, #48	; 0x30
   19238:	bne	18e74 <grisu3_diy_fp_encode_double@@Base+0x63c>
   1923c:	add	r4, r3, #1
   19240:	cmp	lr, r4
   19244:	beq	1939c <grisu3_diy_fp_encode_double@@Base+0xb64>
   19248:	ldrb	ip, [r3, #1]
   1924c:	orr	r2, ip, #32
   19250:	cmp	r2, #120	; 0x78
   19254:	moveq	r4, sl
   19258:	beq	18f8c <grisu3_diy_fp_encode_double@@Base+0x754>
   1925c:	cmp	ip, #48	; 0x30
   19260:	bne	19280 <grisu3_diy_fp_encode_double@@Base+0xa48>
   19264:	add	r3, r3, #2
   19268:	cmp	r3, lr
   1926c:	mov	r4, r3
   19270:	beq	1939c <grisu3_diy_fp_encode_double@@Base+0xb64>
   19274:	ldrb	ip, [r3], #1
   19278:	cmp	ip, #48	; 0x30
   1927c:	beq	19268 <grisu3_diy_fp_encode_double@@Base+0xa30>
   19280:	mov	r9, r4
   19284:	mov	r0, #0
   19288:	mov	r1, #0
   1928c:	b	18e98 <grisu3_diy_fp_encode_double@@Base+0x660>
   19290:	mov	r8, #1
   19294:	b	18f14 <grisu3_diy_fp_encode_double@@Base+0x6dc>
   19298:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1929c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   192a0:	andge	r0, r0, #0
   192a4:	rsbmi	r1, sp, #148, 20	; 0x94000
   192a8:	andeq	r0, r0, r6, lsr r1
   192ac:			; <UNDEFINED> instruction: 0x001fffff
   192b0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   192b4:	svcvc	0x00f00000	; IMB
   192b8:	ldr	r3, [pc, #-12]	; 192b4 <grisu3_diy_fp_encode_double@@Base+0xa7c>
   192bc:	mov	r2, #0
   192c0:	strd	r2, [fp]
   192c4:	b	19128 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   192c8:	mov	r4, #0
   192cc:	b	18f8c <grisu3_diy_fp_encode_double@@Base+0x754>
   192d0:	ldrb	r3, [r4, #1]
   192d4:	add	ip, r4, #1
   192d8:	mov	r5, ip
   192dc:	str	ip, [sp, #20]
   192e0:	sub	ip, r3, #48	; 0x30
   192e4:	cmp	ip, #9
   192e8:	bhi	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   192ec:	cmp	lr, r5
   192f0:	beq	19808 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   192f4:	add	r7, pc, #980	; 0x3d4
   192f8:	ldrd	r6, [r7]
   192fc:	cmp	r1, r7
   19300:	cmpeq	r0, r6
   19304:	bhi	197f8 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   19308:	add	r4, r4, #2
   1930c:	strd	r6, [sp, #8]
   19310:	mov	ip, #10
   19314:	str	r9, [sp, #24]
   19318:	str	r8, [sp, #28]
   1931c:	b	19344 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   19320:	ldrb	r3, [r4]
   19324:	add	r4, r4, #1
   19328:	sub	r5, r3, #48	; 0x30
   1932c:	cmp	r5, #9
   19330:	bhi	19628 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   19334:	ldrd	r8, [sp, #8]
   19338:	cmp	r1, r9
   1933c:	cmpeq	r0, r8
   19340:	bhi	19788 <grisu3_diy_fp_encode_double@@Base+0xf50>
   19344:	umull	r6, r7, r0, ip
   19348:	mla	r7, ip, r1, r7
   1934c:	adds	r0, r6, r3
   19350:	adc	r1, r7, #0
   19354:	subs	r0, r0, #48	; 0x30
   19358:	sbc	r1, r1, #0
   1935c:	cmp	r4, lr
   19360:	sub	r2, r2, #1
   19364:	mov	r6, r4
   19368:	bne	19320 <grisu3_diy_fp_encode_double@@Base+0xae8>
   1936c:	ldr	r3, [sp, #20]
   19370:	ldr	r9, [sp, #24]
   19374:	ldr	r8, [sp, #28]
   19378:	sub	r3, lr, r3
   1937c:	mov	r4, lr
   19380:	add	r9, r9, r3
   19384:	add	r5, r2, r9
   19388:	b	18fec <grisu3_diy_fp_encode_double@@Base+0x7b4>
   1938c:	mov	r4, lr
   19390:	mov	r0, r4
   19394:	add	sp, sp, #44	; 0x2c
   19398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1939c:	mov	r9, #0
   193a0:	mov	r0, #0
   193a4:	mov	r1, #0
   193a8:	mov	r5, r9
   193ac:	mov	r8, #0
   193b0:	b	18fec <grisu3_diy_fp_encode_double@@Base+0x7b4>
   193b4:	stm	sp, {r8, fp}
   193b8:	mov	r3, r9
   193bc:	mov	r2, r5
   193c0:	bl	18838 <grisu3_diy_fp_encode_double@@Base>
   193c4:	cmp	r0, #0
   193c8:	bne	19128 <grisu3_diy_fp_encode_double@@Base+0x8f0>
   193cc:	mov	r0, sl
   193d0:	add	r1, sp, #36	; 0x24
   193d4:	bl	124b0 <strtod@plt>
   193d8:	ldr	r3, [sp, #36]	; 0x24
   193dc:	cmp	r4, r3
   193e0:	movcs	r4, r3
   193e4:	vstr	d0, [fp]
   193e8:	b	18f8c <grisu3_diy_fp_encode_double@@Base+0x754>
   193ec:	vldr	d6, [pc, #740]	; 196d8 <grisu3_diy_fp_encode_double@@Base+0xea0>
   193f0:	vmul.f64	d7, d7, d6
   193f4:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   193f8:	vldr	d6, [pc, #736]	; 196e0 <grisu3_diy_fp_encode_double@@Base+0xea8>
   193fc:	vmul.f64	d7, d7, d6
   19400:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19404:	vldr	d6, [pc, #732]	; 196e8 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   19408:	vmul.f64	d7, d7, d6
   1940c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19410:	vldr	d6, [pc, #728]	; 196f0 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   19414:	vmul.f64	d7, d7, d6
   19418:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1941c:	vldr	d6, [pc, #724]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0xec0>
   19420:	vmul.f64	d7, d7, d6
   19424:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19428:	vldr	d6, [pc, #720]	; 19700 <grisu3_diy_fp_encode_double@@Base+0xec8>
   1942c:	vmul.f64	d7, d7, d6
   19430:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19434:	vldr	d6, [pc, #716]	; 19708 <grisu3_diy_fp_encode_double@@Base+0xed0>
   19438:	vmul.f64	d7, d7, d6
   1943c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19440:	vldr	d6, [pc, #712]	; 19710 <grisu3_diy_fp_encode_double@@Base+0xed8>
   19444:	vmul.f64	d7, d7, d6
   19448:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1944c:	vldr	d6, [pc, #708]	; 19718 <grisu3_diy_fp_encode_double@@Base+0xee0>
   19450:	vmul.f64	d7, d7, d6
   19454:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19458:	vldr	d6, [pc, #704]	; 19720 <grisu3_diy_fp_encode_double@@Base+0xee8>
   1945c:	vmul.f64	d7, d7, d6
   19460:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19464:	vldr	d6, [pc, #700]	; 19728 <grisu3_diy_fp_encode_double@@Base+0xef0>
   19468:	vmul.f64	d7, d7, d6
   1946c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19470:	vldr	d6, [pc, #696]	; 19730 <grisu3_diy_fp_encode_double@@Base+0xef8>
   19474:	vmul.f64	d7, d7, d6
   19478:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1947c:	vldr	d6, [pc, #676]	; 19728 <grisu3_diy_fp_encode_double@@Base+0xef0>
   19480:	vdiv.f64	d7, d7, d6
   19484:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19488:	vldr	d6, [pc, #656]	; 19720 <grisu3_diy_fp_encode_double@@Base+0xee8>
   1948c:	vdiv.f64	d7, d7, d6
   19490:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19494:	vldr	d6, [pc, #636]	; 19718 <grisu3_diy_fp_encode_double@@Base+0xee0>
   19498:	vdiv.f64	d7, d7, d6
   1949c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194a0:	vldr	d6, [pc, #656]	; 19738 <grisu3_diy_fp_encode_double@@Base+0xf00>
   194a4:	vmul.f64	d7, d7, d6
   194a8:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194ac:	vldr	d6, [pc, #652]	; 19740 <grisu3_diy_fp_encode_double@@Base+0xf08>
   194b0:	vmul.f64	d7, d7, d6
   194b4:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194b8:	vldr	d6, [pc, #648]	; 19748 <grisu3_diy_fp_encode_double@@Base+0xf10>
   194bc:	vmul.f64	d7, d7, d6
   194c0:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194c4:	vldr	d6, [pc, #644]	; 19750 <grisu3_diy_fp_encode_double@@Base+0xf18>
   194c8:	vmul.f64	d7, d7, d6
   194cc:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194d0:	vldr	d6, [pc, #640]	; 19758 <grisu3_diy_fp_encode_double@@Base+0xf20>
   194d4:	vmul.f64	d7, d7, d6
   194d8:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194dc:	vldr	d6, [pc, #636]	; 19760 <grisu3_diy_fp_encode_double@@Base+0xf28>
   194e0:	vmul.f64	d7, d7, d6
   194e4:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194e8:	vldr	d6, [pc, #632]	; 19768 <grisu3_diy_fp_encode_double@@Base+0xf30>
   194ec:	vmul.f64	d7, d7, d6
   194f0:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   194f4:	vldr	d6, [pc, #628]	; 19770 <grisu3_diy_fp_encode_double@@Base+0xf38>
   194f8:	vmul.f64	d7, d7, d6
   194fc:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19500:	vldr	d6, [pc, #624]	; 19778 <grisu3_diy_fp_encode_double@@Base+0xf40>
   19504:	vmul.f64	d7, d7, d6
   19508:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1950c:	vldr	d6, [pc, #548]	; 19738 <grisu3_diy_fp_encode_double@@Base+0xf00>
   19510:	vdiv.f64	d7, d7, d6
   19514:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19518:	vldr	d6, [pc, #528]	; 19730 <grisu3_diy_fp_encode_double@@Base+0xef8>
   1951c:	vdiv.f64	d7, d7, d6
   19520:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19524:	vldr	d6, [pc, #588]	; 19778 <grisu3_diy_fp_encode_double@@Base+0xf40>
   19528:	vdiv.f64	d7, d7, d6
   1952c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19530:	vldr	d6, [pc, #472]	; 19710 <grisu3_diy_fp_encode_double@@Base+0xed8>
   19534:	vdiv.f64	d7, d7, d6
   19538:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1953c:	vldr	d6, [pc, #452]	; 19708 <grisu3_diy_fp_encode_double@@Base+0xed0>
   19540:	vdiv.f64	d7, d7, d6
   19544:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19548:	vldr	d6, [pc, #432]	; 19700 <grisu3_diy_fp_encode_double@@Base+0xec8>
   1954c:	vdiv.f64	d7, d7, d6
   19550:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19554:	vldr	d6, [pc, #412]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0xec0>
   19558:	vdiv.f64	d7, d7, d6
   1955c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19560:	vldr	d6, [pc, #392]	; 196f0 <grisu3_diy_fp_encode_double@@Base+0xeb8>
   19564:	vdiv.f64	d7, d7, d6
   19568:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1956c:	vldr	d6, [pc, #372]	; 196e8 <grisu3_diy_fp_encode_double@@Base+0xeb0>
   19570:	vdiv.f64	d7, d7, d6
   19574:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19578:	vldr	d6, [pc, #352]	; 196e0 <grisu3_diy_fp_encode_double@@Base+0xea8>
   1957c:	vdiv.f64	d7, d7, d6
   19580:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19584:	vldr	d6, [pc, #332]	; 196d8 <grisu3_diy_fp_encode_double@@Base+0xea0>
   19588:	vdiv.f64	d7, d7, d6
   1958c:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19590:	vldr	d6, [pc, #488]	; 19780 <grisu3_diy_fp_encode_double@@Base+0xf48>
   19594:	vdiv.f64	d7, d7, d6
   19598:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1959c:	vldr	d6, [pc, #460]	; 19770 <grisu3_diy_fp_encode_double@@Base+0xf38>
   195a0:	vdiv.f64	d7, d7, d6
   195a4:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195a8:	vldr	d6, [pc, #440]	; 19768 <grisu3_diy_fp_encode_double@@Base+0xf30>
   195ac:	vdiv.f64	d7, d7, d6
   195b0:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195b4:	vldr	d6, [pc, #420]	; 19760 <grisu3_diy_fp_encode_double@@Base+0xf28>
   195b8:	vdiv.f64	d7, d7, d6
   195bc:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195c0:	vldr	d6, [pc, #400]	; 19758 <grisu3_diy_fp_encode_double@@Base+0xf20>
   195c4:	vdiv.f64	d7, d7, d6
   195c8:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195cc:	vldr	d6, [pc, #380]	; 19750 <grisu3_diy_fp_encode_double@@Base+0xf18>
   195d0:	vdiv.f64	d7, d7, d6
   195d4:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195d8:	vldr	d6, [pc, #360]	; 19748 <grisu3_diy_fp_encode_double@@Base+0xf10>
   195dc:	vdiv.f64	d7, d7, d6
   195e0:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195e4:	vldr	d6, [pc, #340]	; 19740 <grisu3_diy_fp_encode_double@@Base+0xf08>
   195e8:	vdiv.f64	d7, d7, d6
   195ec:	b	19124 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   195f0:	ldr	r3, [sp, #8]
   195f4:	cmp	r3, #0
   195f8:	bne	19214 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   195fc:	add	r5, r5, r2
   19600:	b	18ff4 <grisu3_diy_fp_encode_double@@Base+0x7bc>
   19604:	add	ip, r4, #2
   19608:	cmp	lr, ip
   1960c:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   19610:	mov	r3, #0
   19614:	ldrb	r2, [r4, #2]
   19618:	str	r3, [sp, #8]
   1961c:	b	191a4 <grisu3_diy_fp_encode_double@@Base+0x96c>
   19620:	sub	r9, lr, r9
   19624:	b	193a8 <grisu3_diy_fp_encode_double@@Base+0xb70>
   19628:	ldr	r3, [sp, #20]
   1962c:	ldr	r9, [sp, #24]
   19630:	sub	r3, r6, r3
   19634:	ldr	r8, [sp, #28]
   19638:	add	r9, r9, r3
   1963c:	ldrb	ip, [r6]
   19640:	cmp	ip, #48	; 0x30
   19644:	bne	197e4 <grisu3_diy_fp_encode_double@@Base+0xfac>
   19648:	sub	r3, r2, r6
   1964c:	add	r6, r6, #1
   19650:	cmp	r6, lr
   19654:	mov	r4, r6
   19658:	add	r2, r3, r6
   1965c:	beq	19384 <grisu3_diy_fp_encode_double@@Base+0xb4c>
   19660:	ldrb	ip, [r6], #1
   19664:	cmp	ip, #48	; 0x30
   19668:	beq	19650 <grisu3_diy_fp_encode_double@@Base+0xe18>
   1966c:	sub	r3, ip, #49	; 0x31
   19670:	cmp	r3, #8
   19674:	bhi	196c8 <grisu3_diy_fp_encode_double@@Base+0xe90>
   19678:	add	r3, r4, #1
   1967c:	cmp	lr, r3
   19680:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   19684:	ldrb	ip, [r4, #1]
   19688:	sub	r5, ip, #48	; 0x30
   1968c:	cmp	r5, #9
   19690:	bhi	196c0 <grisu3_diy_fp_encode_double@@Base+0xe88>
   19694:	add	r3, r4, #2
   19698:	b	196b0 <grisu3_diy_fp_encode_double@@Base+0xe78>
   1969c:	ldrb	ip, [r3]
   196a0:	add	r3, r3, #1
   196a4:	sub	r5, ip, #48	; 0x30
   196a8:	cmp	r5, #9
   196ac:	bhi	196c4 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   196b0:	cmp	r3, lr
   196b4:	mov	r4, r3
   196b8:	bne	1969c <grisu3_diy_fp_encode_double@@Base+0xe64>
   196bc:	b	18fe4 <grisu3_diy_fp_encode_double@@Base+0x7ac>
   196c0:	mov	r4, r3
   196c4:	mov	r8, #1
   196c8:	add	r5, r2, r9
   196cc:	b	1916c <grisu3_diy_fp_encode_double@@Base+0x934>
   196d0:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   196d4:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   196d8:	stmda	r0, {}	; <UNPREDICTABLE>
   196dc:	eorsmi	r4, r7, #7733248	; 0x760000
   196e0:	andcs	r0, r0, r0
   196e4:	andmi	sl, r2, #95	; 0x5f
   196e8:	andeq	r0, r0, r0
   196ec:	bicmi	ip, sp, r5, ror #26
   196f0:	andeq	r0, r0, r0
   196f4:	orrsmi	sp, r7, r4, lsl #15
   196f8:	andeq	r0, r0, r0
   196fc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   19700:	andeq	r0, r0, r0
   19704:	smlawbmi	lr, r0, r4, r8
   19708:	andeq	r0, r0, r0
   1970c:	rscsmi	r6, r8, r0, lsl #20
   19710:	andeq	r0, r0, r0
   19714:	sbcmi	r8, r3, r0, lsl #16
   19718:	andeq	r0, r0, r0
   1971c:	addmi	r4, pc, r0
   19720:	andeq	r0, r0, r0
   19724:	subsmi	r0, r9, r0
   19728:	andeq	r0, r0, r0
   1972c:	eormi	r0, r4, r0
   19730:			; <UNDEFINED> instruction: 0x064dd592
   19734:	strmi	pc, [r0], #207	; 0xcf
   19738:	ldmvc	r5!, {r6, sl, fp, pc}
   1973c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   19740:	addsvs	r3, r1, r0, lsl #26
   19744:	mvnmi	r5, #228, 16	; 0xe40000
   19748:	strbvs	ip, [lr, -r0, lsl #16]
   1974c:			; <UNDEFINED> instruction: 0x43abc16d
   19750:	ldrbhi	sl, [r8]
   19754:	cmnmi	r6, #1459617792	; 0x57000000
   19758:	strbcc	r8, [r0, r0]!
   1975c:	movtmi	ip, #4985	; 0x1379
   19760:	ldrtcs	r0, [r4], -r0
   19764:	movwmi	r6, #52213	; 0xcbf5
   19768:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1976c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   19770:	strb	r0, [r0, #-0]
   19774:	adcmi	r3, r2, #156	; 0x9c
   19778:	usatle	lr, #2, r0, asr #30
   1977c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   19780:	andge	r0, r0, #0
   19784:	rsbmi	r1, sp, #148, 20	; 0x94000
   19788:	ldr	r8, [sp, #28]
   1978c:	ldr	ip, [sp, #20]
   19790:	cmp	r8, #0
   19794:	ldr	r9, [sp, #24]
   19798:	sub	r8, r6, ip
   1979c:	bne	197b4 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   197a0:	cmp	r3, #52	; 0x34
   197a4:	movls	r3, #0
   197a8:	movhi	r3, #1
   197ac:	adds	r0, r0, r3
   197b0:	adc	r1, r1, #0
   197b4:	cmp	lr, r6
   197b8:	add	r9, r9, r8
   197bc:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   197c0:	mov	r8, #1
   197c4:	b	1963c <grisu3_diy_fp_encode_double@@Base+0xe04>
   197c8:	add	ip, r4, #2
   197cc:	cmp	lr, ip
   197d0:	beq	192c8 <grisu3_diy_fp_encode_double@@Base+0xa90>
   197d4:	mov	r3, #1
   197d8:	ldrb	r2, [r4, #2]
   197dc:	str	r3, [sp, #8]
   197e0:	b	191a4 <grisu3_diy_fp_encode_double@@Base+0x96c>
   197e4:	mov	r4, r6
   197e8:	b	1966c <grisu3_diy_fp_encode_double@@Base+0xe34>
   197ec:	mov	r4, lr
   197f0:	mov	r9, #0
   197f4:	b	193a8 <grisu3_diy_fp_encode_double@@Base+0xb70>
   197f8:	cmp	r8, #0
   197fc:	bne	19814 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   19800:	ldr	r6, [sp, #20]
   19804:	b	197a0 <grisu3_diy_fp_encode_double@@Base+0xf68>
   19808:	mov	r4, lr
   1980c:	mov	r3, #0
   19810:	b	19380 <grisu3_diy_fp_encode_double@@Base+0xb48>
   19814:	ldr	r6, [sp, #20]
   19818:	b	1963c <grisu3_diy_fp_encode_double@@Base+0xe04>

0001981c <flatcc_json_parser_error_string@@Base>:
   1981c:	cmp	r0, #34	; 0x22
   19820:	addls	pc, pc, r0, lsl #2
   19824:	b	19a58 <flatcc_json_parser_error_string@@Base+0x23c>
   19828:	b	198b4 <flatcc_json_parser_error_string@@Base+0x98>
   1982c:	b	19a4c <flatcc_json_parser_error_string@@Base+0x230>
   19830:	b	19a40 <flatcc_json_parser_error_string@@Base+0x224>
   19834:	b	19a34 <flatcc_json_parser_error_string@@Base+0x218>
   19838:	b	19a28 <flatcc_json_parser_error_string@@Base+0x20c>
   1983c:	b	19a1c <flatcc_json_parser_error_string@@Base+0x200>
   19840:	b	19a10 <flatcc_json_parser_error_string@@Base+0x1f4>
   19844:	b	19a04 <flatcc_json_parser_error_string@@Base+0x1e8>
   19848:	b	199f8 <flatcc_json_parser_error_string@@Base+0x1dc>
   1984c:	b	199ec <flatcc_json_parser_error_string@@Base+0x1d0>
   19850:	b	199e0 <flatcc_json_parser_error_string@@Base+0x1c4>
   19854:	b	199d4 <flatcc_json_parser_error_string@@Base+0x1b8>
   19858:	b	199c8 <flatcc_json_parser_error_string@@Base+0x1ac>
   1985c:	b	199bc <flatcc_json_parser_error_string@@Base+0x1a0>
   19860:	b	199b0 <flatcc_json_parser_error_string@@Base+0x194>
   19864:	b	199a4 <flatcc_json_parser_error_string@@Base+0x188>
   19868:	b	19998 <flatcc_json_parser_error_string@@Base+0x17c>
   1986c:	b	1998c <flatcc_json_parser_error_string@@Base+0x170>
   19870:	b	19980 <flatcc_json_parser_error_string@@Base+0x164>
   19874:	b	19974 <flatcc_json_parser_error_string@@Base+0x158>
   19878:	b	19968 <flatcc_json_parser_error_string@@Base+0x14c>
   1987c:	b	1995c <flatcc_json_parser_error_string@@Base+0x140>
   19880:	b	19950 <flatcc_json_parser_error_string@@Base+0x134>
   19884:	b	19944 <flatcc_json_parser_error_string@@Base+0x128>
   19888:	b	19938 <flatcc_json_parser_error_string@@Base+0x11c>
   1988c:	b	1992c <flatcc_json_parser_error_string@@Base+0x110>
   19890:	b	19920 <flatcc_json_parser_error_string@@Base+0x104>
   19894:	b	19914 <flatcc_json_parser_error_string@@Base+0xf8>
   19898:	b	19908 <flatcc_json_parser_error_string@@Base+0xec>
   1989c:	b	198fc <flatcc_json_parser_error_string@@Base+0xe0>
   198a0:	b	198f0 <flatcc_json_parser_error_string@@Base+0xd4>
   198a4:	b	198e4 <flatcc_json_parser_error_string@@Base+0xc8>
   198a8:	b	198d8 <flatcc_json_parser_error_string@@Base+0xbc>
   198ac:	b	198cc <flatcc_json_parser_error_string@@Base+0xb0>
   198b0:	b	198c0 <flatcc_json_parser_error_string@@Base+0xa4>
   198b4:	ldr	r0, [pc, #424]	; 19a64 <flatcc_json_parser_error_string@@Base+0x248>
   198b8:	add	r0, pc, r0
   198bc:	bx	lr
   198c0:	ldr	r0, [pc, #416]	; 19a68 <flatcc_json_parser_error_string@@Base+0x24c>
   198c4:	add	r0, pc, r0
   198c8:	bx	lr
   198cc:	ldr	r0, [pc, #408]	; 19a6c <flatcc_json_parser_error_string@@Base+0x250>
   198d0:	add	r0, pc, r0
   198d4:	bx	lr
   198d8:	ldr	r0, [pc, #400]	; 19a70 <flatcc_json_parser_error_string@@Base+0x254>
   198dc:	add	r0, pc, r0
   198e0:	bx	lr
   198e4:	ldr	r0, [pc, #392]	; 19a74 <flatcc_json_parser_error_string@@Base+0x258>
   198e8:	add	r0, pc, r0
   198ec:	bx	lr
   198f0:	ldr	r0, [pc, #384]	; 19a78 <flatcc_json_parser_error_string@@Base+0x25c>
   198f4:	add	r0, pc, r0
   198f8:	bx	lr
   198fc:	ldr	r0, [pc, #376]	; 19a7c <flatcc_json_parser_error_string@@Base+0x260>
   19900:	add	r0, pc, r0
   19904:	bx	lr
   19908:	ldr	r0, [pc, #368]	; 19a80 <flatcc_json_parser_error_string@@Base+0x264>
   1990c:	add	r0, pc, r0
   19910:	bx	lr
   19914:	ldr	r0, [pc, #360]	; 19a84 <flatcc_json_parser_error_string@@Base+0x268>
   19918:	add	r0, pc, r0
   1991c:	bx	lr
   19920:	ldr	r0, [pc, #352]	; 19a88 <flatcc_json_parser_error_string@@Base+0x26c>
   19924:	add	r0, pc, r0
   19928:	bx	lr
   1992c:	ldr	r0, [pc, #344]	; 19a8c <flatcc_json_parser_error_string@@Base+0x270>
   19930:	add	r0, pc, r0
   19934:	bx	lr
   19938:	ldr	r0, [pc, #336]	; 19a90 <flatcc_json_parser_error_string@@Base+0x274>
   1993c:	add	r0, pc, r0
   19940:	bx	lr
   19944:	ldr	r0, [pc, #328]	; 19a94 <flatcc_json_parser_error_string@@Base+0x278>
   19948:	add	r0, pc, r0
   1994c:	bx	lr
   19950:	ldr	r0, [pc, #320]	; 19a98 <flatcc_json_parser_error_string@@Base+0x27c>
   19954:	add	r0, pc, r0
   19958:	bx	lr
   1995c:	ldr	r0, [pc, #312]	; 19a9c <flatcc_json_parser_error_string@@Base+0x280>
   19960:	add	r0, pc, r0
   19964:	bx	lr
   19968:	ldr	r0, [pc, #304]	; 19aa0 <flatcc_json_parser_error_string@@Base+0x284>
   1996c:	add	r0, pc, r0
   19970:	bx	lr
   19974:	ldr	r0, [pc, #296]	; 19aa4 <flatcc_json_parser_error_string@@Base+0x288>
   19978:	add	r0, pc, r0
   1997c:	bx	lr
   19980:	ldr	r0, [pc, #288]	; 19aa8 <flatcc_json_parser_error_string@@Base+0x28c>
   19984:	add	r0, pc, r0
   19988:	bx	lr
   1998c:	ldr	r0, [pc, #280]	; 19aac <flatcc_json_parser_error_string@@Base+0x290>
   19990:	add	r0, pc, r0
   19994:	bx	lr
   19998:	ldr	r0, [pc, #272]	; 19ab0 <flatcc_json_parser_error_string@@Base+0x294>
   1999c:	add	r0, pc, r0
   199a0:	bx	lr
   199a4:	ldr	r0, [pc, #264]	; 19ab4 <flatcc_json_parser_error_string@@Base+0x298>
   199a8:	add	r0, pc, r0
   199ac:	bx	lr
   199b0:	ldr	r0, [pc, #256]	; 19ab8 <flatcc_json_parser_error_string@@Base+0x29c>
   199b4:	add	r0, pc, r0
   199b8:	bx	lr
   199bc:	ldr	r0, [pc, #248]	; 19abc <flatcc_json_parser_error_string@@Base+0x2a0>
   199c0:	add	r0, pc, r0
   199c4:	bx	lr
   199c8:	ldr	r0, [pc, #240]	; 19ac0 <flatcc_json_parser_error_string@@Base+0x2a4>
   199cc:	add	r0, pc, r0
   199d0:	bx	lr
   199d4:	ldr	r0, [pc, #232]	; 19ac4 <flatcc_json_parser_error_string@@Base+0x2a8>
   199d8:	add	r0, pc, r0
   199dc:	bx	lr
   199e0:	ldr	r0, [pc, #224]	; 19ac8 <flatcc_json_parser_error_string@@Base+0x2ac>
   199e4:	add	r0, pc, r0
   199e8:	bx	lr
   199ec:	ldr	r0, [pc, #216]	; 19acc <flatcc_json_parser_error_string@@Base+0x2b0>
   199f0:	add	r0, pc, r0
   199f4:	bx	lr
   199f8:	ldr	r0, [pc, #208]	; 19ad0 <flatcc_json_parser_error_string@@Base+0x2b4>
   199fc:	add	r0, pc, r0
   19a00:	bx	lr
   19a04:	ldr	r0, [pc, #200]	; 19ad4 <flatcc_json_parser_error_string@@Base+0x2b8>
   19a08:	add	r0, pc, r0
   19a0c:	bx	lr
   19a10:	ldr	r0, [pc, #192]	; 19ad8 <flatcc_json_parser_error_string@@Base+0x2bc>
   19a14:	add	r0, pc, r0
   19a18:	bx	lr
   19a1c:	ldr	r0, [pc, #184]	; 19adc <flatcc_json_parser_error_string@@Base+0x2c0>
   19a20:	add	r0, pc, r0
   19a24:	bx	lr
   19a28:	ldr	r0, [pc, #176]	; 19ae0 <flatcc_json_parser_error_string@@Base+0x2c4>
   19a2c:	add	r0, pc, r0
   19a30:	bx	lr
   19a34:	ldr	r0, [pc, #168]	; 19ae4 <flatcc_json_parser_error_string@@Base+0x2c8>
   19a38:	add	r0, pc, r0
   19a3c:	bx	lr
   19a40:	ldr	r0, [pc, #160]	; 19ae8 <flatcc_json_parser_error_string@@Base+0x2cc>
   19a44:	add	r0, pc, r0
   19a48:	bx	lr
   19a4c:	ldr	r0, [pc, #152]	; 19aec <flatcc_json_parser_error_string@@Base+0x2d0>
   19a50:	add	r0, pc, r0
   19a54:	bx	lr
   19a58:	ldr	r0, [pc, #144]	; 19af0 <flatcc_json_parser_error_string@@Base+0x2d4>
   19a5c:	add	r0, pc, r0
   19a60:	bx	lr
   19a64:			; <UNDEFINED> instruction: 0x00004dbc
   19a68:	andeq	r5, r0, r8, asr r0
   19a6c:	andeq	r5, r0, ip, lsr r0
   19a70:	andeq	r5, r0, r4, lsl r0
   19a74:	strdeq	r4, [r0], -r0
   19a78:	andeq	r4, r0, r4, asr #31
   19a7c:	andeq	r4, r0, r0, lsr #31
   19a80:	andeq	r4, r0, r8, ror pc
   19a84:	andeq	r4, r0, r0, asr pc
   19a88:	andeq	r4, r0, r4, lsr #30
   19a8c:	strdeq	r4, [r0], -r8
   19a90:	ldrdeq	r4, [r0], -r8
   19a94:	andeq	r4, r0, r8, lsr #29
   19a98:	andeq	r4, r0, ip, lsl #29
   19a9c:	andeq	r4, r0, r0, ror lr
   19aa0:	andeq	r4, r0, r0, asr lr
   19aa4:	andeq	r4, r0, r4, lsr lr
   19aa8:	andeq	r4, r0, r8, lsl lr
   19aac:	strdeq	r4, [r0], -r8
   19ab0:	ldrdeq	r4, [r0], -ip
   19ab4:			; <UNDEFINED> instruction: 0x00004dbc
   19ab8:	muleq	r0, r4, sp
   19abc:	andeq	r4, r0, r8, ror sp
   19ac0:	andeq	r4, r0, r8, asr sp
   19ac4:	andeq	r4, r0, ip, lsr sp
   19ac8:	andeq	r4, r0, ip, lsl sp
   19acc:	strdeq	r4, [r0], -ip
   19ad0:	andeq	r4, r0, r4, ror #25
   19ad4:	andeq	r4, r0, ip, asr #25
   19ad8:			; <UNDEFINED> instruction: 0x00004cb0
   19adc:	andeq	r4, r0, ip, lsl #25
   19ae0:	andeq	r4, r0, r0, ror ip
   19ae4:	andeq	r4, r0, r4, asr ip
   19ae8:	andeq	r4, r0, r8, lsr ip
   19aec:	andeq	r4, r0, r8, lsr #24
   19af0:	ldrdeq	r4, [r0], -r0

00019af4 <flatcc_json_parser_set_error@@Base>:
   19af4:	ldr	ip, [r0, #24]
   19af8:	cmp	ip, #0
   19afc:	bne	19b18 <flatcc_json_parser_set_error@@Base+0x24>
   19b00:	ldr	ip, [r0, #4]
   19b04:	str	r3, [r0, #24]
   19b08:	sub	r3, r1, ip
   19b0c:	add	r3, r3, #1
   19b10:	str	r1, [r0, #36]	; 0x24
   19b14:	str	r3, [r0, #20]
   19b18:	mov	r0, r2
   19b1c:	bx	lr

00019b20 <flatcc_json_parser_string_part@@Base>:
   19b20:	cmp	r1, r2
   19b24:	beq	19bc4 <flatcc_json_parser_string_part@@Base+0xa4>
   19b28:	ldrb	ip, [r1]
   19b2c:	cmp	ip, #34	; 0x22
   19b30:	cmpne	ip, #31
   19b34:	movhi	r3, #1
   19b38:	movls	r3, #0
   19b3c:	cmp	ip, #92	; 0x5c
   19b40:	moveq	r3, #0
   19b44:	andne	r3, r3, #1
   19b48:	cmp	r3, #0
   19b4c:	beq	19bd0 <flatcc_json_parser_string_part@@Base+0xb0>
   19b50:	add	r3, r1, #1
   19b54:	cmp	r3, r2
   19b58:	mov	r1, r3
   19b5c:	beq	19bc8 <flatcc_json_parser_string_part@@Base+0xa8>
   19b60:	push	{lr}		; (str lr, [sp, #-4]!)
   19b64:	b	19b74 <flatcc_json_parser_string_part@@Base+0x54>
   19b68:	cmp	r3, r2
   19b6c:	mov	r1, r3
   19b70:	beq	19bb8 <flatcc_json_parser_string_part@@Base+0x98>
   19b74:	ldrb	ip, [r3], #1
   19b78:	cmp	ip, #34	; 0x22
   19b7c:	cmpne	ip, #31
   19b80:	movhi	lr, #1
   19b84:	movls	lr, #0
   19b88:	cmp	ip, #92	; 0x5c
   19b8c:	moveq	lr, #0
   19b90:	andne	lr, lr, #1
   19b94:	cmp	lr, #0
   19b98:	bne	19b68 <flatcc_json_parser_string_part@@Base+0x48>
   19b9c:	cmp	ip, #31
   19ba0:	bls	19bac <flatcc_json_parser_string_part@@Base+0x8c>
   19ba4:	mov	r0, r1
   19ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bac:	mov	r3, #17
   19bb0:	pop	{lr}		; (ldr lr, [sp], #4)
   19bb4:	b	19af4 <flatcc_json_parser_set_error@@Base>
   19bb8:	mov	r3, #20
   19bbc:	pop	{lr}		; (ldr lr, [sp], #4)
   19bc0:	b	19af4 <flatcc_json_parser_set_error@@Base>
   19bc4:	mov	r1, r2
   19bc8:	mov	r3, #20
   19bcc:	b	19af4 <flatcc_json_parser_set_error@@Base>
   19bd0:	cmp	ip, #31
   19bd4:	bls	19be0 <flatcc_json_parser_string_part@@Base+0xc0>
   19bd8:	mov	r0, r1
   19bdc:	bx	lr
   19be0:	mov	r3, #17
   19be4:	b	19af4 <flatcc_json_parser_set_error@@Base>

00019be8 <flatcc_json_parser_space_ext@@Base>:
   19be8:	push	{lr}		; (str lr, [sp, #-4]!)
   19bec:	mov	lr, #0
   19bf0:	cmp	r1, r2
   19bf4:	beq	19c24 <flatcc_json_parser_space_ext@@Base+0x3c>
   19bf8:	ldrb	ip, [r1]
   19bfc:	cmp	ip, #32
   19c00:	bne	19c2c <flatcc_json_parser_space_ext@@Base+0x44>
   19c04:	add	r3, r1, #1
   19c08:	b	19c18 <flatcc_json_parser_space_ext@@Base+0x30>
   19c0c:	ldrb	ip, [r3], #1
   19c10:	cmp	ip, #32
   19c14:	bne	19c2c <flatcc_json_parser_space_ext@@Base+0x44>
   19c18:	cmp	r3, r2
   19c1c:	mov	r1, r3
   19c20:	bne	19c0c <flatcc_json_parser_space_ext@@Base+0x24>
   19c24:	mov	r0, r1
   19c28:	pop	{pc}		; (ldr pc, [sp], #4)
   19c2c:	cmp	ip, #32
   19c30:	bhi	19c24 <flatcc_json_parser_space_ext@@Base+0x3c>
   19c34:	sub	ip, ip, #9
   19c38:	cmp	ip, #23
   19c3c:	addls	pc, pc, ip, lsl #2
   19c40:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c44:	b	19cf0 <flatcc_json_parser_space_ext@@Base+0x108>
   19c48:	b	19cc4 <flatcc_json_parser_space_ext@@Base+0xdc>
   19c4c:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c50:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c54:	b	19ca4 <flatcc_json_parser_space_ext@@Base+0xbc>
   19c58:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c5c:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c60:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c64:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c68:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c6c:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c70:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c74:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c78:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c7c:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c80:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c84:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c88:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c8c:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c90:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c94:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c98:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19c9c:	b	19cf8 <flatcc_json_parser_space_ext@@Base+0x110>
   19ca0:	b	19bf0 <flatcc_json_parser_space_ext@@Base+0x8>
   19ca4:	sub	r3, r2, r1
   19ca8:	cmp	r3, #1
   19cac:	movle	r3, lr
   19cb0:	ldrbgt	r3, [r1, #1]
   19cb4:	subgt	r3, r3, #10
   19cb8:	clzgt	r3, r3
   19cbc:	lsrgt	r3, r3, #5
   19cc0:	add	r1, r1, r3
   19cc4:	ldr	r3, [r0, #16]
   19cc8:	add	r1, r1, #1
   19ccc:	add	r3, r3, #1
   19cd0:	str	r1, [r0, #4]
   19cd4:	str	r3, [r0, #16]
   19cd8:	cmp	r2, r1
   19cdc:	beq	19d04 <flatcc_json_parser_space_ext@@Base+0x11c>
   19ce0:	ldrb	ip, [r1]
   19ce4:	cmp	ip, #32
   19ce8:	bls	19c34 <flatcc_json_parser_space_ext@@Base+0x4c>
   19cec:	b	19c24 <flatcc_json_parser_space_ext@@Base+0x3c>
   19cf0:	add	r1, r1, #1
   19cf4:	b	19cd8 <flatcc_json_parser_space_ext@@Base+0xf0>
   19cf8:	mov	r3, #5
   19cfc:	pop	{lr}		; (ldr lr, [sp], #4)
   19d00:	b	19af4 <flatcc_json_parser_set_error@@Base>
   19d04:	mov	r1, r2
   19d08:	b	19c24 <flatcc_json_parser_space_ext@@Base+0x3c>
   19d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d10:	sub	sp, sp, #44	; 0x2c
   19d14:	mov	ip, #0
   19d18:	str	r3, [sp, #16]
   19d1c:	ldr	r3, [sp, #80]	; 0x50
   19d20:	cmp	r1, r2
   19d24:	mov	r6, r1
   19d28:	mov	r5, r2
   19d2c:	strb	ip, [r3]
   19d30:	mov	r8, r0
   19d34:	beq	19edc <flatcc_json_parser_space_ext@@Base+0x2f4>
   19d38:	ldrb	r3, [r1]
   19d3c:	cmp	r3, #34	; 0x22
   19d40:	beq	19e90 <flatcc_json_parser_space_ext@@Base+0x2a8>
   19d44:	cmp	r3, #46	; 0x2e
   19d48:	movne	r3, #1
   19d4c:	strne	r3, [r0, #12]
   19d50:	beq	19eec <flatcc_json_parser_space_ext@@Base+0x304>
   19d54:	add	fp, sp, #24
   19d58:	add	sl, sp, #28
   19d5c:	add	r9, sp, #32
   19d60:	mov	r3, #0
   19d64:	str	r3, [sp, #12]
   19d68:	str	r3, [sp, #20]
   19d6c:	ldr	r3, [sp, #16]
   19d70:	mov	r7, r3
   19d74:	ldr	r4, [r3]
   19d78:	b	19d90 <flatcc_json_parser_space_ext@@Base+0x1a8>
   19d7c:	cmp	r6, r0
   19d80:	bne	19dbc <flatcc_json_parser_space_ext@@Base+0x1d4>
   19d84:	ldr	r4, [r7, #4]!
   19d88:	cmp	r4, #0
   19d8c:	beq	19e34 <flatcc_json_parser_space_ext@@Base+0x24c>
   19d90:	stm	sp, {r9, sl}
   19d94:	mov	r3, fp
   19d98:	mov	r2, r5
   19d9c:	mov	r1, r6
   19da0:	mov	r0, r8
   19da4:	blx	r4
   19da8:	cmp	r5, r0
   19dac:	bne	19d7c <flatcc_json_parser_space_ext@@Base+0x194>
   19db0:	mov	r0, r5
   19db4:	add	sp, sp, #44	; 0x2c
   19db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dbc:	ldr	r3, [sp, #12]
   19dc0:	mov	r4, r0
   19dc4:	cmp	r3, #0
   19dc8:	beq	19dd8 <flatcc_json_parser_space_ext@@Base+0x1f0>
   19dcc:	ldr	r3, [r8, #12]
   19dd0:	cmp	r3, #0
   19dd4:	bne	19f28 <flatcc_json_parser_space_ext@@Base+0x340>
   19dd8:	ldr	r3, [sp, #24]
   19ddc:	cmp	r3, #0
   19de0:	bne	19e58 <flatcc_json_parser_space_ext@@Base+0x270>
   19de4:	ldrd	r2, [sp, #32]
   19de8:	cmp	r3, #0
   19dec:	cmpeq	r2, #255	; 0xff
   19df0:	uxtbls	r3, r2
   19df4:	strls	r3, [sp, #20]
   19df8:	bhi	19e78 <flatcc_json_parser_space_ext@@Base+0x290>
   19dfc:	ldr	r3, [sp, #80]	; 0x50
   19e00:	ldr	r1, [sp, #12]
   19e04:	ldr	r2, [sp, #28]
   19e08:	ldrb	r3, [r3]
   19e0c:	add	r1, r1, #1
   19e10:	str	r1, [sp, #12]
   19e14:	cmp	r2, #0
   19e18:	ldr	r1, [sp, #20]
   19e1c:	ldr	r2, [sp, #80]	; 0x50
   19e20:	add	r3, r1, r3
   19e24:	strb	r3, [r2]
   19e28:	beq	19f20 <flatcc_json_parser_space_ext@@Base+0x338>
   19e2c:	mov	r6, r4
   19e30:	b	19d6c <flatcc_json_parser_space_ext@@Base+0x184>
   19e34:	mov	r2, r5
   19e38:	mov	r1, r6
   19e3c:	mov	r0, r8
   19e40:	mov	r3, #23
   19e44:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19e48:	mov	r5, r0
   19e4c:	mov	r0, r5
   19e50:	add	sp, sp, #44	; 0x2c
   19e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e58:	mov	r3, #8
   19e5c:	mov	r2, r5
   19e60:	mov	r1, r4
   19e64:	mov	r0, r8
   19e68:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19e6c:	cmp	r5, r0
   19e70:	bne	19dfc <flatcc_json_parser_space_ext@@Base+0x214>
   19e74:	b	19db0 <flatcc_json_parser_space_ext@@Base+0x1c8>
   19e78:	mov	r3, #7
   19e7c:	mov	r2, r5
   19e80:	mov	r1, r4
   19e84:	mov	r0, r8
   19e88:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19e8c:	b	19e6c <flatcc_json_parser_space_ext@@Base+0x284>
   19e90:	add	r6, r1, #1
   19e94:	sub	r3, r2, r6
   19e98:	str	ip, [r0, #12]
   19e9c:	cmp	r3, #1
   19ea0:	ble	19eb4 <flatcc_json_parser_space_ext@@Base+0x2cc>
   19ea4:	ldrb	r3, [r6]
   19ea8:	cmp	r3, #32
   19eac:	bhi	19ec8 <flatcc_json_parser_space_ext@@Base+0x2e0>
   19eb0:	beq	19f0c <flatcc_json_parser_space_ext@@Base+0x324>
   19eb4:	mov	r1, r6
   19eb8:	mov	r2, r5
   19ebc:	mov	r0, r8
   19ec0:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   19ec4:	mov	r6, r0
   19ec8:	cmp	r5, r6
   19ecc:	bne	19d54 <flatcc_json_parser_space_ext@@Base+0x16c>
   19ed0:	mov	r0, r5
   19ed4:	add	sp, sp, #44	; 0x2c
   19ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19edc:	ldr	r3, [r0, #12]
   19ee0:	cmp	r3, #0
   19ee4:	beq	19eb4 <flatcc_json_parser_space_ext@@Base+0x2cc>
   19ee8:	b	19db0 <flatcc_json_parser_space_ext@@Base+0x1c8>
   19eec:	mov	r3, #5
   19ef0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19ef4:	ldr	r3, [r8, #12]
   19ef8:	cmp	r3, #0
   19efc:	mov	r6, r0
   19f00:	subeq	r3, r5, r0
   19f04:	beq	19e9c <flatcc_json_parser_space_ext@@Base+0x2b4>
   19f08:	b	19ec8 <flatcc_json_parser_space_ext@@Base+0x2e0>
   19f0c:	ldrb	r3, [r6, #1]
   19f10:	cmp	r3, #32
   19f14:	addhi	r6, r6, #1
   19f18:	bls	19eb4 <flatcc_json_parser_space_ext@@Base+0x2cc>
   19f1c:	b	19ec8 <flatcc_json_parser_space_ext@@Base+0x2e0>
   19f20:	mov	r5, r4
   19f24:	b	19db0 <flatcc_json_parser_space_ext@@Base+0x1c8>
   19f28:	mov	r2, r5
   19f2c:	mov	r1, r4
   19f30:	mov	r0, r8
   19f34:	mov	r3, #14
   19f38:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19f3c:	mov	r5, r0
   19f40:	b	19db0 <flatcc_json_parser_space_ext@@Base+0x1c8>
   19f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f48:	sub	sp, sp, #28
   19f4c:	mov	r9, r3
   19f50:	ldrh	r3, [sp, #68]	; 0x44
   19f54:	mov	ip, #0
   19f58:	mov	r7, r0
   19f5c:	ldr	r0, [r0]
   19f60:	mov	r4, r1
   19f64:	mov	r5, r2
   19f68:	str	ip, [sp, #20]
   19f6c:	str	r3, [sp, #12]
   19f70:	bl	15c64 <flatcc_builder_start_offset_vector@@Base>
   19f74:	cmp	r0, #0
   19f78:	bne	19fd4 <flatcc_json_parser_space_ext@@Base+0x3ec>
   19f7c:	cmp	r4, r5
   19f80:	beq	19f90 <flatcc_json_parser_space_ext@@Base+0x3a8>
   19f84:	ldrb	r3, [r4]
   19f88:	cmp	r3, #91	; 0x5b
   19f8c:	beq	19ff0 <flatcc_json_parser_space_ext@@Base+0x408>
   19f90:	mov	r1, r4
   19f94:	mov	r3, #22
   19f98:	mov	r2, r5
   19f9c:	mov	r0, r7
   19fa0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19fa4:	mov	r6, #0
   19fa8:	mov	r4, r0
   19fac:	ldr	r3, [sp, #64]	; 0x40
   19fb0:	cmp	r3, r6
   19fb4:	beq	1a24c <flatcc_json_parser_space_ext@@Base+0x664>
   19fb8:	mov	r2, r5
   19fbc:	mov	r1, r4
   19fc0:	mov	r0, r7
   19fc4:	mov	r3, #30
   19fc8:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19fcc:	b	19fe8 <flatcc_json_parser_space_ext@@Base+0x400>
   19fd0:	mov	r4, sl
   19fd4:	mov	r2, r5
   19fd8:	mov	r1, r4
   19fdc:	mov	r0, r7
   19fe0:	mov	r3, #33	; 0x21
   19fe4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   19fe8:	add	sp, sp, #28
   19fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ff0:	add	r8, r4, #1
   19ff4:	sub	r3, r5, r8
   19ff8:	cmp	r3, #1
   19ffc:	ble	1a010 <flatcc_json_parser_space_ext@@Base+0x428>
   1a000:	ldrb	r3, [r4, #1]
   1a004:	cmp	r3, #32
   1a008:	bhi	1a024 <flatcc_json_parser_space_ext@@Base+0x43c>
   1a00c:	beq	1a294 <flatcc_json_parser_space_ext@@Base+0x6ac>
   1a010:	mov	r1, r8
   1a014:	mov	r2, r5
   1a018:	mov	r0, r7
   1a01c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a020:	mov	r8, r0
   1a024:	cmp	r5, r8
   1a028:	beq	1a038 <flatcc_json_parser_space_ext@@Base+0x450>
   1a02c:	ldrb	r3, [r8]
   1a030:	cmp	r3, #93	; 0x5d
   1a034:	beq	1a2e0 <flatcc_json_parser_space_ext@@Base+0x6f8>
   1a038:	ldr	r3, [sp, #64]	; 0x40
   1a03c:	cmp	r3, #0
   1a040:	beq	1a1d0 <flatcc_json_parser_space_ext@@Base+0x5e8>
   1a044:	add	sl, sp, #20
   1a048:	mov	r6, #0
   1a04c:	mov	fp, #1
   1a050:	mov	r4, sl
   1a054:	mov	r1, r9
   1a058:	ldr	r0, [r7]
   1a05c:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1a060:	mov	r1, r8
   1a064:	mov	r2, r5
   1a068:	ldr	ip, [sp, #72]	; 0x48
   1a06c:	ldrb	r3, [r0, r6]
   1a070:	str	r4, [sp]
   1a074:	mov	r0, r7
   1a078:	blx	ip
   1a07c:	cmp	r5, r0
   1a080:	mov	sl, r0
   1a084:	beq	1a204 <flatcc_json_parser_space_ext@@Base+0x61c>
   1a088:	mov	r1, fp
   1a08c:	ldr	r0, [r7]
   1a090:	bl	155fc <flatcc_builder_extend_offset_vector@@Base>
   1a094:	cmp	r0, #0
   1a098:	beq	19fd0 <flatcc_json_parser_space_ext@@Base+0x3e8>
   1a09c:	ldr	r3, [sp, #20]
   1a0a0:	sub	r1, r5, sl
   1a0a4:	cmp	r1, #1
   1a0a8:	str	r3, [r0]
   1a0ac:	ble	1a0c0 <flatcc_json_parser_space_ext@@Base+0x4d8>
   1a0b0:	ldrb	r3, [sl]
   1a0b4:	cmp	r3, #32
   1a0b8:	bhi	1a0e0 <flatcc_json_parser_space_ext@@Base+0x4f8>
   1a0bc:	beq	1a154 <flatcc_json_parser_space_ext@@Base+0x56c>
   1a0c0:	mov	r1, sl
   1a0c4:	mov	r2, r5
   1a0c8:	mov	r0, r7
   1a0cc:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a0d0:	mov	sl, r0
   1a0d4:	cmp	r5, sl
   1a0d8:	beq	1a16c <flatcc_json_parser_space_ext@@Base+0x584>
   1a0dc:	ldrb	r3, [sl]
   1a0e0:	cmp	r3, #44	; 0x2c
   1a0e4:	beq	1a178 <flatcc_json_parser_space_ext@@Base+0x590>
   1a0e8:	cmp	r3, #93	; 0x5d
   1a0ec:	mov	r4, sl
   1a0f0:	beq	1a114 <flatcc_json_parser_space_ext@@Base+0x52c>
   1a0f4:	mov	r1, sl
   1a0f8:	mov	r3, #9
   1a0fc:	mov	r2, r5
   1a100:	mov	r0, r7
   1a104:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1a108:	add	r6, r6, #1
   1a10c:	mov	r4, r0
   1a110:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a114:	add	r1, sl, #1
   1a118:	sub	r3, r5, r1
   1a11c:	cmp	r3, #1
   1a120:	ble	1a13c <flatcc_json_parser_space_ext@@Base+0x554>
   1a124:	ldrb	r3, [sl, #1]
   1a128:	cmp	r3, #32
   1a12c:	addhi	r6, r6, #1
   1a130:	movhi	r4, r1
   1a134:	bhi	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a138:	beq	1a1ec <flatcc_json_parser_space_ext@@Base+0x604>
   1a13c:	mov	r2, r5
   1a140:	mov	r0, r7
   1a144:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a148:	mov	r4, r0
   1a14c:	add	r6, r6, #1
   1a150:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a154:	ldrb	r3, [sl, #1]
   1a158:	cmp	r3, #32
   1a15c:	addhi	sl, sl, #1
   1a160:	bls	1a0c0 <flatcc_json_parser_space_ext@@Base+0x4d8>
   1a164:	cmp	r5, sl
   1a168:	bne	1a0dc <flatcc_json_parser_space_ext@@Base+0x4f4>
   1a16c:	mov	r4, sl
   1a170:	add	r6, r6, #1
   1a174:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a178:	add	r8, sl, #1
   1a17c:	sub	r3, r5, r8
   1a180:	cmp	r3, #1
   1a184:	ble	1a198 <flatcc_json_parser_space_ext@@Base+0x5b0>
   1a188:	ldrb	r3, [sl, #1]
   1a18c:	cmp	r3, #32
   1a190:	bhi	1a1ac <flatcc_json_parser_space_ext@@Base+0x5c4>
   1a194:	beq	1a210 <flatcc_json_parser_space_ext@@Base+0x628>
   1a198:	mov	r1, r8
   1a19c:	mov	r2, r5
   1a1a0:	mov	r0, r7
   1a1a4:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a1a8:	mov	r8, r0
   1a1ac:	cmp	r5, r8
   1a1b0:	beq	1a2a8 <flatcc_json_parser_space_ext@@Base+0x6c0>
   1a1b4:	ldrb	r3, [r8]
   1a1b8:	cmp	r3, #93	; 0x5d
   1a1bc:	beq	1a224 <flatcc_json_parser_space_ext@@Base+0x63c>
   1a1c0:	ldr	r3, [sp, #64]	; 0x40
   1a1c4:	add	r6, r6, #1
   1a1c8:	cmp	r3, r6
   1a1cc:	bne	1a054 <flatcc_json_parser_space_ext@@Base+0x46c>
   1a1d0:	mov	r2, r5
   1a1d4:	mov	r1, r8
   1a1d8:	mov	r0, r7
   1a1dc:	mov	r3, #30
   1a1e0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1a1e4:	add	sp, sp, #28
   1a1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1ec:	ldrb	r3, [r4, #2]
   1a1f0:	cmp	r3, #32
   1a1f4:	addhi	r4, r4, #2
   1a1f8:	addhi	r6, r6, #1
   1a1fc:	bls	1a13c <flatcc_json_parser_space_ext@@Base+0x554>
   1a200:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a204:	mov	r0, r5
   1a208:	add	sp, sp, #28
   1a20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a210:	ldrb	r3, [sl, #2]
   1a214:	cmp	r3, #32
   1a218:	addhi	r8, sl, #2
   1a21c:	bls	1a198 <flatcc_json_parser_space_ext@@Base+0x5b0>
   1a220:	b	1a1ac <flatcc_json_parser_space_ext@@Base+0x5c4>
   1a224:	add	r4, r8, #1
   1a228:	sub	r3, r5, r4
   1a22c:	cmp	r3, #1
   1a230:	ble	1a244 <flatcc_json_parser_space_ext@@Base+0x65c>
   1a234:	ldrb	r3, [r8, #1]
   1a238:	cmp	r3, #32
   1a23c:	bhi	1a14c <flatcc_json_parser_space_ext@@Base+0x564>
   1a240:	beq	1a2c8 <flatcc_json_parser_space_ext@@Base+0x6e0>
   1a244:	mov	r1, r4
   1a248:	b	1a13c <flatcc_json_parser_space_ext@@Base+0x554>
   1a24c:	mov	r1, r9
   1a250:	ldr	r0, [r7]
   1a254:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1a258:	mov	r1, r0
   1a25c:	ldr	r0, [r7]
   1a260:	bl	16de0 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1a264:	cmp	r0, #0
   1a268:	str	r0, [sp, #20]
   1a26c:	beq	19fd4 <flatcc_json_parser_space_ext@@Base+0x3ec>
   1a270:	ldr	r1, [sp, #12]
   1a274:	ldr	r0, [r7]
   1a278:	bl	17aac <flatcc_builder_table_add_offset@@Base>
   1a27c:	subs	r3, r0, #0
   1a280:	beq	19fd4 <flatcc_json_parser_space_ext@@Base+0x3ec>
   1a284:	ldr	r2, [sp, #20]
   1a288:	mov	r0, r4
   1a28c:	str	r2, [r3]
   1a290:	b	19fe8 <flatcc_json_parser_space_ext@@Base+0x400>
   1a294:	ldrb	r3, [r4, #2]
   1a298:	cmp	r3, #32
   1a29c:	addhi	r8, r4, #2
   1a2a0:	bls	1a010 <flatcc_json_parser_space_ext@@Base+0x428>
   1a2a4:	b	1a024 <flatcc_json_parser_space_ext@@Base+0x43c>
   1a2a8:	mov	r3, #9
   1a2ac:	mov	r2, r5
   1a2b0:	mov	r1, r5
   1a2b4:	mov	r0, r7
   1a2b8:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1a2bc:	add	r6, r6, #1
   1a2c0:	mov	r4, r0
   1a2c4:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a2c8:	ldrb	r3, [r8, #2]
   1a2cc:	cmp	r3, #32
   1a2d0:	addhi	r4, r8, #2
   1a2d4:	addhi	r6, r6, #1
   1a2d8:	bls	1a244 <flatcc_json_parser_space_ext@@Base+0x65c>
   1a2dc:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a2e0:	add	r4, r8, #1
   1a2e4:	sub	r3, r5, r4
   1a2e8:	cmp	r3, #1
   1a2ec:	ble	1a304 <flatcc_json_parser_space_ext@@Base+0x71c>
   1a2f0:	ldrb	r3, [r8, #1]
   1a2f4:	cmp	r3, #32
   1a2f8:	movhi	r6, #0
   1a2fc:	bhi	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a300:	beq	1a320 <flatcc_json_parser_space_ext@@Base+0x738>
   1a304:	mov	r1, r4
   1a308:	mov	r2, r5
   1a30c:	mov	r0, r7
   1a310:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a314:	mov	r6, #0
   1a318:	mov	r4, r0
   1a31c:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>
   1a320:	ldrb	r3, [r8, #2]
   1a324:	cmp	r3, #32
   1a328:	addhi	r4, r8, #2
   1a32c:	movhi	r6, #0
   1a330:	bls	1a304 <flatcc_json_parser_space_ext@@Base+0x71c>
   1a334:	b	19fac <flatcc_json_parser_space_ext@@Base+0x3c4>

0001a338 <flatcc_json_parser_string_escape@@Base>:
   1a338:	sub	ip, r2, r1
   1a33c:	cmp	ip, #1
   1a340:	ble	1a4d8 <flatcc_json_parser_string_escape@@Base+0x1a0>
   1a344:	push	{r4, r5, lr}
   1a348:	ldrb	lr, [r1]
   1a34c:	cmp	lr, #92	; 0x5c
   1a350:	beq	1a368 <flatcc_json_parser_string_escape@@Base+0x30>
   1a354:	mov	ip, #0
   1a358:	strb	ip, [r3]
   1a35c:	mov	r3, #18
   1a360:	pop	{r4, r5, lr}
   1a364:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1a368:	ldrb	lr, [r1, #1]
   1a36c:	sub	lr, lr, #34	; 0x22
   1a370:	cmp	lr, #86	; 0x56
   1a374:	addls	pc, pc, lr, lsl #2
   1a378:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a37c:	b	1a570 <flatcc_json_parser_string_escape@@Base+0x238>
   1a380:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a384:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a388:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a38c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a390:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a394:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a398:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a39c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3a0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3a4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3a8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3ac:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3b0:	b	1a588 <flatcc_json_parser_string_escape@@Base+0x250>
   1a3b4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3b8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3bc:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3c0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3c4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3c8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3cc:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3d0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3d4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3d8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3dc:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3e0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3e4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3e8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3ec:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3f0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3f4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3f8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a3fc:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a400:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a404:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a408:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a40c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a410:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a414:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a418:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a41c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a420:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a424:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a428:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a42c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a430:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a434:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a438:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a43c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a440:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a444:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a448:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a44c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a450:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a454:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a458:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a45c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a460:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a464:	b	1a5a0 <flatcc_json_parser_string_escape@@Base+0x268>
   1a468:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a46c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a470:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a474:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a478:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a47c:	b	1a5b8 <flatcc_json_parser_string_escape@@Base+0x280>
   1a480:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a484:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a488:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a48c:	b	1a5d0 <flatcc_json_parser_string_escape@@Base+0x298>
   1a490:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a494:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a498:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a49c:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4a0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4a4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4a8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4ac:	b	1a5e8 <flatcc_json_parser_string_escape@@Base+0x2b0>
   1a4b0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4b4:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4b8:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4bc:	b	1a600 <flatcc_json_parser_string_escape@@Base+0x2c8>
   1a4c0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4c4:	b	1a618 <flatcc_json_parser_string_escape@@Base+0x2e0>
   1a4c8:	b	1a630 <flatcc_json_parser_string_escape@@Base+0x2f8>
   1a4cc:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4d0:	b	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4d4:	b	1a4e8 <flatcc_json_parser_string_escape@@Base+0x1b0>
   1a4d8:	mov	ip, #0
   1a4dc:	strb	ip, [r3]
   1a4e0:	mov	r3, #18
   1a4e4:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1a4e8:	cmp	ip, #3
   1a4ec:	mov	ip, #1
   1a4f0:	strb	ip, [r3]
   1a4f4:	ble	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a4f8:	ldrb	ip, [r1, #2]
   1a4fc:	sub	lr, ip, #48	; 0x30
   1a500:	uxtb	r4, lr
   1a504:	cmp	r4, #9
   1a508:	lslls	ip, lr, #4
   1a50c:	uxtbls	ip, ip
   1a510:	bls	1a530 <flatcc_json_parser_string_escape@@Base+0x1f8>
   1a514:	orr	ip, ip, #32
   1a518:	sub	lr, ip, #97	; 0x61
   1a51c:	cmp	lr, #5
   1a520:	bhi	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a524:	sub	ip, ip, #87	; 0x57
   1a528:	lsl	ip, ip, #4
   1a52c:	uxtb	ip, ip
   1a530:	ldrb	lr, [r1, #3]
   1a534:	sub	r4, lr, #48	; 0x30
   1a538:	uxtb	r4, r4
   1a53c:	cmp	r4, #9
   1a540:	orrls	ip, r4, ip
   1a544:	bls	1a564 <flatcc_json_parser_string_escape@@Base+0x22c>
   1a548:	orr	lr, lr, #32
   1a54c:	sub	r4, lr, #97	; 0x61
   1a550:	cmp	r4, #5
   1a554:	bhi	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a558:	sub	lr, lr, #87	; 0x57
   1a55c:	orr	ip, lr, ip
   1a560:	uxtb	ip, ip
   1a564:	strb	ip, [r3, #1]
   1a568:	add	r0, r1, #4
   1a56c:	pop	{r4, r5, pc}
   1a570:	mov	ip, #1
   1a574:	mov	r2, #34	; 0x22
   1a578:	add	r0, r1, #2
   1a57c:	strb	ip, [r3]
   1a580:	strb	r2, [r3, #1]
   1a584:	pop	{r4, r5, pc}
   1a588:	mov	ip, #1
   1a58c:	mov	r2, #47	; 0x2f
   1a590:	add	r0, r1, #2
   1a594:	strb	ip, [r3]
   1a598:	strb	r2, [r3, #1]
   1a59c:	pop	{r4, r5, pc}
   1a5a0:	mov	ip, #1
   1a5a4:	mov	r2, #92	; 0x5c
   1a5a8:	add	r0, r1, #2
   1a5ac:	strb	ip, [r3]
   1a5b0:	strb	r2, [r3, #1]
   1a5b4:	pop	{r4, r5, pc}
   1a5b8:	mov	ip, #1
   1a5bc:	mov	r2, #8
   1a5c0:	add	r0, r1, #2
   1a5c4:	strb	ip, [r3]
   1a5c8:	strb	r2, [r3, #1]
   1a5cc:	pop	{r4, r5, pc}
   1a5d0:	mov	ip, #1
   1a5d4:	mov	r2, #12
   1a5d8:	add	r0, r1, #2
   1a5dc:	strb	ip, [r3]
   1a5e0:	strb	r2, [r3, #1]
   1a5e4:	pop	{r4, r5, pc}
   1a5e8:	mov	ip, #1
   1a5ec:	mov	r2, #10
   1a5f0:	add	r0, r1, #2
   1a5f4:	strb	ip, [r3]
   1a5f8:	strb	r2, [r3, #1]
   1a5fc:	pop	{r4, r5, pc}
   1a600:	mov	ip, #1
   1a604:	mov	r2, #13
   1a608:	add	r0, r1, #2
   1a60c:	strb	ip, [r3]
   1a610:	strb	r2, [r3, #1]
   1a614:	pop	{r4, r5, pc}
   1a618:	mov	ip, #1
   1a61c:	mov	r2, #9
   1a620:	add	r0, r1, #2
   1a624:	strb	ip, [r3]
   1a628:	strb	r2, [r3, #1]
   1a62c:	pop	{r4, r5, pc}
   1a630:	cmp	ip, #5
   1a634:	ble	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a638:	ldrb	ip, [r1, #2]
   1a63c:	sub	lr, ip, #48	; 0x30
   1a640:	uxtb	r4, lr
   1a644:	cmp	r4, #9
   1a648:	lslls	ip, lr, #12
   1a64c:	uxthls	ip, ip
   1a650:	bls	1a670 <flatcc_json_parser_string_escape@@Base+0x338>
   1a654:	orr	ip, ip, #32
   1a658:	sub	lr, ip, #97	; 0x61
   1a65c:	cmp	lr, #5
   1a660:	bhi	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a664:	sub	ip, ip, #87	; 0x57
   1a668:	lsl	ip, ip, #12
   1a66c:	and	ip, ip, #61440	; 0xf000
   1a670:	ldrb	lr, [r1, #3]
   1a674:	sub	r4, lr, #48	; 0x30
   1a678:	uxtb	r5, r4
   1a67c:	cmp	r5, #9
   1a680:	bhi	1a704 <flatcc_json_parser_string_escape@@Base+0x3cc>
   1a684:	uxth	r4, r4
   1a688:	orr	ip, ip, r4, lsl #8
   1a68c:	and	ip, ip, #65280	; 0xff00
   1a690:	ldrb	lr, [r1, #4]
   1a694:	sub	r4, lr, #48	; 0x30
   1a698:	uxtb	r5, r4
   1a69c:	cmp	r5, #9
   1a6a0:	bhi	1a728 <flatcc_json_parser_string_escape@@Base+0x3f0>
   1a6a4:	uxth	r4, r4
   1a6a8:	orr	ip, ip, r4, lsl #4
   1a6ac:	uxth	ip, ip
   1a6b0:	ldrb	lr, [r1, #5]
   1a6b4:	sub	r4, lr, #48	; 0x30
   1a6b8:	uxtb	r5, r4
   1a6bc:	cmp	r5, #9
   1a6c0:	orrls	r2, ip, r4
   1a6c4:	uxthls	r2, r2
   1a6c8:	bls	1a6e8 <flatcc_json_parser_string_escape@@Base+0x3b0>
   1a6cc:	orr	lr, lr, #32
   1a6d0:	sub	r4, lr, #97	; 0x61
   1a6d4:	cmp	r4, #5
   1a6d8:	bhi	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a6dc:	sub	r2, lr, #87	; 0x57
   1a6e0:	orr	r2, ip, r2
   1a6e4:	uxth	r2, r2
   1a6e8:	cmp	r2, #127	; 0x7f
   1a6ec:	bhi	1a74c <flatcc_json_parser_string_escape@@Base+0x414>
   1a6f0:	mov	r0, #1
   1a6f4:	strb	r2, [r3, #1]
   1a6f8:	strb	r0, [r3]
   1a6fc:	add	r0, r1, #6
   1a700:	pop	{r4, r5, pc}
   1a704:	orr	lr, lr, #32
   1a708:	sub	r4, lr, #97	; 0x61
   1a70c:	cmp	r4, #5
   1a710:	bhi	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a714:	sub	lr, lr, #87	; 0x57
   1a718:	uxth	lr, lr
   1a71c:	orr	ip, ip, lr, lsl #8
   1a720:	and	ip, ip, #65280	; 0xff00
   1a724:	b	1a690 <flatcc_json_parser_string_escape@@Base+0x358>
   1a728:	orr	lr, lr, #32
   1a72c:	sub	r4, lr, #97	; 0x61
   1a730:	cmp	r4, #5
   1a734:	bhi	1a354 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a738:	sub	lr, lr, #87	; 0x57
   1a73c:	uxth	lr, lr
   1a740:	orr	ip, ip, lr, lsl #4
   1a744:	uxth	ip, ip
   1a748:	b	1a6b0 <flatcc_json_parser_string_escape@@Base+0x378>
   1a74c:	cmp	r2, #2048	; 0x800
   1a750:	bcs	1a77c <flatcc_json_parser_string_escape@@Base+0x444>
   1a754:	and	r0, r2, #63	; 0x3f
   1a758:	mvn	ip, #63	; 0x3f
   1a75c:	mvn	r0, r0, lsl #25
   1a760:	orr	r2, ip, r2, lsr #6
   1a764:	mvn	r0, r0, lsr #25
   1a768:	mov	ip, #2
   1a76c:	strb	r0, [r3, #2]
   1a770:	strb	r2, [r3, #1]
   1a774:	strb	ip, [r3]
   1a778:	b	1a6fc <flatcc_json_parser_string_escape@@Base+0x3c4>
   1a77c:	lsl	lr, r2, #20
   1a780:	mvn	r4, #127	; 0x7f
   1a784:	and	ip, r2, #63	; 0x3f
   1a788:	mvn	r0, #31
   1a78c:	orr	r2, r0, r2, lsr #12
   1a790:	orr	lr, r4, lr, lsr #26
   1a794:	orr	ip, ip, r4
   1a798:	mov	r0, #3
   1a79c:	strb	lr, [r3, #2]
   1a7a0:	strb	ip, [r3, #3]
   1a7a4:	strb	r2, [r3, #1]
   1a7a8:	strb	r0, [r3]
   1a7ac:	b	1a6fc <flatcc_json_parser_string_escape@@Base+0x3c4>

0001a7b0 <flatcc_json_parser_skip_constant@@Base>:
   1a7b0:	cmp	r1, r2
   1a7b4:	push	{r4, r5, r6, lr}
   1a7b8:	mov	r5, r2
   1a7bc:	beq	1a84c <flatcc_json_parser_skip_constant@@Base+0x9c>
   1a7c0:	mov	r4, r1
   1a7c4:	mov	r6, r0
   1a7c8:	b	1a7d8 <flatcc_json_parser_skip_constant@@Base+0x28>
   1a7cc:	add	r4, r4, #1
   1a7d0:	cmp	r5, r4
   1a7d4:	beq	1a84c <flatcc_json_parser_skip_constant@@Base+0x9c>
   1a7d8:	ldrb	r3, [r4]
   1a7dc:	sub	r2, r3, #95	; 0x5f
   1a7e0:	clz	r2, r2
   1a7e4:	lsr	r2, r2, #5
   1a7e8:	orrs	r2, r2, r3, lsr #7
   1a7ec:	bne	1a7cc <flatcc_json_parser_skip_constant@@Base+0x1c>
   1a7f0:	sub	r2, r3, #48	; 0x30
   1a7f4:	cmp	r3, #46	; 0x2e
   1a7f8:	cmpne	r2, #9
   1a7fc:	bls	1a7cc <flatcc_json_parser_skip_constant@@Base+0x1c>
   1a800:	orr	r2, r3, #32
   1a804:	sub	r2, r2, #97	; 0x61
   1a808:	cmp	r2, #25
   1a80c:	bls	1a7cc <flatcc_json_parser_skip_constant@@Base+0x1c>
   1a810:	sub	r2, r5, r4
   1a814:	cmp	r2, #1
   1a818:	ble	1a828 <flatcc_json_parser_skip_constant@@Base+0x78>
   1a81c:	cmp	r3, #32
   1a820:	bhi	1a854 <flatcc_json_parser_skip_constant@@Base+0xa4>
   1a824:	beq	1a860 <flatcc_json_parser_skip_constant@@Base+0xb0>
   1a828:	mov	r2, r5
   1a82c:	mov	r1, r4
   1a830:	mov	r0, r6
   1a834:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a838:	cmp	r4, r0
   1a83c:	beq	1a854 <flatcc_json_parser_skip_constant@@Base+0xa4>
   1a840:	mov	r4, r0
   1a844:	cmp	r5, r4
   1a848:	bne	1a7d8 <flatcc_json_parser_skip_constant@@Base+0x28>
   1a84c:	mov	r0, r5
   1a850:	pop	{r4, r5, r6, pc}
   1a854:	mov	r5, r4
   1a858:	mov	r0, r5
   1a85c:	pop	{r4, r5, r6, pc}
   1a860:	ldrb	r3, [r4, #1]
   1a864:	cmp	r3, #32
   1a868:	addhi	r0, r4, #1
   1a86c:	bls	1a828 <flatcc_json_parser_skip_constant@@Base+0x78>
   1a870:	b	1a838 <flatcc_json_parser_skip_constant@@Base+0x88>

0001a874 <flatcc_json_parser_match_constant@@Base>:
   1a874:	push	{r4, r5, r6, r7, r8, lr}
   1a878:	sub	lr, r2, r1
   1a87c:	cmp	r3, lr
   1a880:	ldr	r5, [sp, #24]
   1a884:	bge	1a8d4 <flatcc_json_parser_match_constant@@Base+0x60>
   1a888:	mov	r7, r1
   1a88c:	ldr	r1, [r0, #12]
   1a890:	mov	r6, r2
   1a894:	cmp	r1, #0
   1a898:	mov	lr, r0
   1a89c:	add	r4, r7, r3
   1a8a0:	bne	1a8e4 <flatcc_json_parser_match_constant@@Base+0x70>
   1a8a4:	ldrb	r3, [r7, r3]
   1a8a8:	cmp	r3, #32
   1a8ac:	beq	1a970 <flatcc_json_parser_match_constant@@Base+0xfc>
   1a8b0:	cmp	r3, #34	; 0x22
   1a8b4:	beq	1a9b8 <flatcc_json_parser_match_constant@@Base+0x144>
   1a8b8:	cmp	r3, #92	; 0x5c
   1a8bc:	str	r1, [r5]
   1a8c0:	bne	1a968 <flatcc_json_parser_match_constant@@Base+0xf4>
   1a8c4:	mov	r1, r4
   1a8c8:	mov	r3, #18
   1a8cc:	pop	{r4, r5, r6, r7, r8, lr}
   1a8d0:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1a8d4:	mov	r3, #0
   1a8d8:	mov	r0, r1
   1a8dc:	str	r3, [r5]
   1a8e0:	pop	{r4, r5, r6, r7, r8, pc}
   1a8e4:	sub	r2, r2, r4
   1a8e8:	cmp	r2, #1
   1a8ec:	ble	1a900 <flatcc_json_parser_match_constant@@Base+0x8c>
   1a8f0:	ldrb	r3, [r7, r3]
   1a8f4:	cmp	r3, #32
   1a8f8:	bhi	1aa10 <flatcc_json_parser_match_constant@@Base+0x19c>
   1a8fc:	beq	1aa40 <flatcc_json_parser_match_constant@@Base+0x1cc>
   1a900:	mov	r0, lr
   1a904:	mov	r2, r6
   1a908:	mov	r1, r4
   1a90c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a910:	cmp	r6, r0
   1a914:	beq	1aa1c <flatcc_json_parser_match_constant@@Base+0x1a8>
   1a918:	cmp	r4, r0
   1a91c:	beq	1a948 <flatcc_json_parser_match_constant@@Base+0xd4>
   1a920:	ldrb	r3, [r0]
   1a924:	sub	r2, r3, #95	; 0x5f
   1a928:	clz	r2, r2
   1a92c:	lsr	r2, r2, #5
   1a930:	orrs	r2, r2, r3, lsr #7
   1a934:	bne	1aa04 <flatcc_json_parser_match_constant@@Base+0x190>
   1a938:	orr	r3, r3, #32
   1a93c:	sub	r3, r3, #97	; 0x61
   1a940:	cmp	r3, #25
   1a944:	bls	1aa04 <flatcc_json_parser_match_constant@@Base+0x190>
   1a948:	mov	r3, #0
   1a94c:	str	r3, [r5]
   1a950:	ldrb	r3, [r0]
   1a954:	and	r2, r3, #223	; 0xdf
   1a958:	cmp	r3, #44	; 0x2c
   1a95c:	cmpne	r2, #93	; 0x5d
   1a960:	movne	r0, r7
   1a964:	pop	{r4, r5, r6, r7, r8, pc}
   1a968:	mov	r0, r7
   1a96c:	pop	{r4, r5, r6, r7, r8, pc}
   1a970:	add	r3, r4, #1
   1a974:	cmp	r2, r3
   1a978:	beq	1aa54 <flatcc_json_parser_match_constant@@Base+0x1e0>
   1a97c:	ldrb	r1, [r4, #1]
   1a980:	cmp	r1, #32
   1a984:	bne	1a9e8 <flatcc_json_parser_match_constant@@Base+0x174>
   1a988:	add	r3, r4, #2
   1a98c:	b	1a99c <flatcc_json_parser_match_constant@@Base+0x128>
   1a990:	ldrb	r1, [r3], #1
   1a994:	cmp	r1, #32
   1a998:	bne	1a9ec <flatcc_json_parser_match_constant@@Base+0x178>
   1a99c:	cmp	r6, r3
   1a9a0:	mov	r4, r3
   1a9a4:	bne	1a990 <flatcc_json_parser_match_constant@@Base+0x11c>
   1a9a8:	mov	r0, r4
   1a9ac:	mov	r3, #0
   1a9b0:	str	r3, [r5]
   1a9b4:	pop	{r4, r5, r6, r7, r8, pc}
   1a9b8:	add	r0, r4, #1
   1a9bc:	cmn	r0, #1
   1a9c0:	bge	1a9d4 <flatcc_json_parser_match_constant@@Base+0x160>
   1a9c4:	ldrb	r3, [r4, #1]
   1a9c8:	cmp	r3, #32
   1a9cc:	bhi	1a9ac <flatcc_json_parser_match_constant@@Base+0x138>
   1a9d0:	beq	1aa2c <flatcc_json_parser_match_constant@@Base+0x1b8>
   1a9d4:	mov	r1, r0
   1a9d8:	mov	r2, #0
   1a9dc:	mov	r0, lr
   1a9e0:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1a9e4:	b	1a9ac <flatcc_json_parser_match_constant@@Base+0x138>
   1a9e8:	mov	r4, r3
   1a9ec:	cmp	r1, #34	; 0x22
   1a9f0:	beq	1a9b8 <flatcc_json_parser_match_constant@@Base+0x144>
   1a9f4:	mov	r3, #1
   1a9f8:	mov	r0, r4
   1a9fc:	str	r3, [r5]
   1aa00:	pop	{r4, r5, r6, r7, r8, pc}
   1aa04:	mov	r3, #1
   1aa08:	str	r3, [r5]
   1aa0c:	pop	{r4, r5, r6, r7, r8, pc}
   1aa10:	cmp	r4, r6
   1aa14:	movne	r0, r4
   1aa18:	bne	1a948 <flatcc_json_parser_match_constant@@Base+0xd4>
   1aa1c:	mov	r3, #0
   1aa20:	mov	r0, r6
   1aa24:	str	r3, [r5]
   1aa28:	pop	{r4, r5, r6, r7, r8, pc}
   1aa2c:	ldrb	r3, [r4, #2]
   1aa30:	cmp	r3, #32
   1aa34:	addhi	r0, r4, #2
   1aa38:	bls	1a9d4 <flatcc_json_parser_match_constant@@Base+0x160>
   1aa3c:	b	1a9ac <flatcc_json_parser_match_constant@@Base+0x138>
   1aa40:	ldrb	r3, [r4, #1]
   1aa44:	cmp	r3, #32
   1aa48:	addhi	r0, r4, #1
   1aa4c:	bls	1a900 <flatcc_json_parser_match_constant@@Base+0x8c>
   1aa50:	b	1a910 <flatcc_json_parser_match_constant@@Base+0x9c>
   1aa54:	mov	r4, r2
   1aa58:	b	1a9a8 <flatcc_json_parser_match_constant@@Base+0x134>

0001aa5c <flatcc_json_parser_double@@Base>:
   1aa5c:	push	{r4, r5, r6, r7, r8, lr}
   1aa60:	mov	r4, #0
   1aa64:	mov	r5, #0
   1aa68:	cmp	r1, r2
   1aa6c:	strd	r4, [r3]
   1aa70:	beq	1ab04 <flatcc_json_parser_double@@Base+0xa8>
   1aa74:	ldrb	ip, [r1]
   1aa78:	cmp	ip, #45	; 0x2d
   1aa7c:	addeq	ip, r1, #1
   1aa80:	movne	ip, r1
   1aa84:	sub	lr, r2, ip
   1aa88:	cmp	lr, #1
   1aa8c:	ble	1aaa4 <flatcc_json_parser_double@@Base+0x48>
   1aa90:	ldrb	lr, [ip]
   1aa94:	cmp	lr, #46	; 0x2e
   1aa98:	beq	1ab18 <flatcc_json_parser_double@@Base+0xbc>
   1aa9c:	cmp	lr, #48	; 0x30
   1aaa0:	beq	1ab0c <flatcc_json_parser_double@@Base+0xb0>
   1aaa4:	mov	r4, r1
   1aaa8:	mov	r5, r2
   1aaac:	sub	r1, r5, r1
   1aab0:	mov	r7, r0
   1aab4:	mov	r2, r3
   1aab8:	mov	r0, r4
   1aabc:	mov	r6, r3
   1aac0:	bl	18e1c <grisu3_diy_fp_encode_double@@Base+0x5e4>
   1aac4:	cmp	r4, r0
   1aac8:	cmpne	r0, #0
   1aacc:	mov	r1, r0
   1aad0:	bne	1ab04 <flatcc_json_parser_double@@Base+0xa8>
   1aad4:	vldr	d7, [r6]
   1aad8:	vldr	d6, [pc, #72]	; 1ab28 <flatcc_json_parser_double@@Base+0xcc>
   1aadc:	mov	r2, r5
   1aae0:	mov	r1, r4
   1aae4:	vabs.f64	d7, d7
   1aae8:	mov	r0, r7
   1aaec:	vcmp.f64	d7, d6
   1aaf0:	vmrs	APSR_nzcv, fpscr
   1aaf4:	ble	1ab18 <flatcc_json_parser_double@@Base+0xbc>
   1aaf8:	mov	r3, #7
   1aafc:	pop	{r4, r5, r6, r7, r8, lr}
   1ab00:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1ab04:	mov	r0, r1
   1ab08:	pop	{r4, r5, r6, r7, r8, pc}
   1ab0c:	ldrb	ip, [ip, #1]
   1ab10:	cmp	ip, #48	; 0x30
   1ab14:	bne	1aaa4 <flatcc_json_parser_double@@Base+0x48>
   1ab18:	mov	r3, #6
   1ab1c:	pop	{r4, r5, r6, r7, r8, lr}
   1ab20:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1ab24:	nop			; (mov r0, r0)
   1ab28:			; <UNDEFINED> instruction: 0xffffffff
   1ab2c:	svcvc	0x00efffff

0001ab30 <flatcc_json_parser_float@@Base>:
   1ab30:	mov	ip, #0
   1ab34:	cmp	r1, r2
   1ab38:	str	ip, [r3]
   1ab3c:	beq	1ac24 <flatcc_json_parser_float@@Base+0xf4>
   1ab40:	push	{r4, r5, r6, r7, lr}
   1ab44:	mov	r7, r3
   1ab48:	ldrb	ip, [r1]
   1ab4c:	sub	sp, sp, #12
   1ab50:	mov	r6, r0
   1ab54:	cmp	ip, #45	; 0x2d
   1ab58:	addeq	ip, r1, #1
   1ab5c:	movne	ip, r1
   1ab60:	sub	r3, r2, ip
   1ab64:	cmp	r3, #1
   1ab68:	mov	r5, r2
   1ab6c:	mov	r4, r1
   1ab70:	ble	1ab88 <flatcc_json_parser_float@@Base+0x58>
   1ab74:	ldrb	r3, [ip]
   1ab78:	cmp	r3, #46	; 0x2e
   1ab7c:	beq	1abf8 <flatcc_json_parser_float@@Base+0xc8>
   1ab80:	cmp	r3, #48	; 0x30
   1ab84:	beq	1ac14 <flatcc_json_parser_float@@Base+0xe4>
   1ab88:	mov	r2, sp
   1ab8c:	sub	r1, r5, r4
   1ab90:	mov	r0, r4
   1ab94:	bl	18e1c <grisu3_diy_fp_encode_double@@Base+0x5e4>
   1ab98:	vldr	d6, [sp]
   1ab9c:	vldr	s14, [pc, #136]	; 1ac2c <flatcc_json_parser_float@@Base+0xfc>
   1aba0:	vcvt.f32.f64	s15, d6
   1aba4:	vabs.f32	s11, s15
   1aba8:	vstr	s15, [r7]
   1abac:	vcmp.f32	s11, s14
   1abb0:	vmrs	APSR_nzcv, fpscr
   1abb4:	ble	1abec <flatcc_json_parser_float@@Base+0xbc>
   1abb8:	vcmpe.f64	d6, #0.0
   1abbc:	vldr	s15, [pc, #108]	; 1ac30 <flatcc_json_parser_float@@Base+0x100>
   1abc0:	vldr	s14, [pc, #108]	; 1ac34 <flatcc_json_parser_float@@Base+0x104>
   1abc4:	mov	r2, r5
   1abc8:	vmrs	APSR_nzcv, fpscr
   1abcc:	mov	r1, r4
   1abd0:	mov	r0, r6
   1abd4:	mov	r3, #7
   1abd8:	vmovpl.f32	s15, s14
   1abdc:	vstr	s15, [r7]
   1abe0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1abe4:	add	sp, sp, #12
   1abe8:	pop	{r4, r5, r6, r7, pc}
   1abec:	cmp	r4, r0
   1abf0:	cmpne	r0, #0
   1abf4:	bne	1abe4 <flatcc_json_parser_float@@Base+0xb4>
   1abf8:	mov	r2, r5
   1abfc:	mov	r1, r4
   1ac00:	mov	r0, r6
   1ac04:	mov	r3, #6
   1ac08:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1ac0c:	add	sp, sp, #12
   1ac10:	pop	{r4, r5, r6, r7, pc}
   1ac14:	ldrb	r3, [ip, #1]
   1ac18:	cmp	r3, #48	; 0x30
   1ac1c:	bne	1ab88 <flatcc_json_parser_float@@Base+0x58>
   1ac20:	b	1abf8 <flatcc_json_parser_float@@Base+0xc8>
   1ac24:	mov	r0, r1
   1ac28:	bx	lr
   1ac2c:	svcvc	0x007fffff
   1ac30:			; <UNDEFINED> instruction: 0xff800000
   1ac34:	svcvc	0x00800000

0001ac38 <flatcc_json_parser_generic_json@@Base>:
   1ac38:	cmp	r1, r2
   1ac3c:	mov	r3, r1
   1ac40:	beq	1b560 <flatcc_json_parser_generic_json@@Base+0x928>
   1ac44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac48:	mov	r4, r2
   1ac4c:	sub	sp, sp, #532	; 0x214
   1ac50:	ldrb	r2, [r1]
   1ac54:	add	r8, sp, #16
   1ac58:	mov	r6, r0
   1ac5c:	mov	r5, r8
   1ac60:	mov	fp, #125	; 0x7d
   1ac64:	mov	r9, #10
   1ac68:	mov	sl, #9
   1ac6c:	cmp	r5, r8
   1ac70:	beq	1acfc <flatcc_json_parser_generic_json@@Base+0xc4>
   1ac74:	ldrb	r1, [r5, #-1]
   1ac78:	cmp	r1, #125	; 0x7d
   1ac7c:	beq	1b0f8 <flatcc_json_parser_generic_json@@Base+0x4c0>
   1ac80:	cmp	r2, #57	; 0x39
   1ac84:	bls	1ad04 <flatcc_json_parser_generic_json@@Base+0xcc>
   1ac88:	cmp	r2, #91	; 0x5b
   1ac8c:	beq	1b094 <flatcc_json_parser_generic_json@@Base+0x45c>
   1ac90:	cmp	r2, #123	; 0x7b
   1ac94:	bne	1ae2c <flatcc_json_parser_generic_json@@Base+0x1f4>
   1ac98:	add	r2, sp, #528	; 0x210
   1ac9c:	cmp	r5, r2
   1aca0:	beq	1b58c <flatcc_json_parser_generic_json@@Base+0x954>
   1aca4:	add	r1, r3, #1
   1aca8:	sub	r2, r4, r1
   1acac:	cmp	r2, #1
   1acb0:	strb	fp, [r5]
   1acb4:	add	r5, r5, #1
   1acb8:	ble	1acd0 <flatcc_json_parser_generic_json@@Base+0x98>
   1acbc:	ldrb	r2, [r3, #1]
   1acc0:	cmp	r2, #32
   1acc4:	movhi	r3, r1
   1acc8:	bhi	1ace0 <flatcc_json_parser_generic_json@@Base+0xa8>
   1accc:	beq	1b24c <flatcc_json_parser_generic_json@@Base+0x614>
   1acd0:	mov	r2, r4
   1acd4:	mov	r0, r6
   1acd8:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1acdc:	mov	r3, r0
   1ace0:	cmp	r4, r3
   1ace4:	beq	1b3f0 <flatcc_json_parser_generic_json@@Base+0x7b8>
   1ace8:	ldrb	r2, [r3]
   1acec:	cmp	r2, #125	; 0x7d
   1acf0:	bne	1ac6c <flatcc_json_parser_generic_json@@Base+0x34>
   1acf4:	mov	r0, r3
   1acf8:	b	1aebc <flatcc_json_parser_generic_json@@Base+0x284>
   1acfc:	cmp	r2, #57	; 0x39
   1ad00:	bhi	1b22c <flatcc_json_parser_generic_json@@Base+0x5f4>
   1ad04:	cmp	r2, #48	; 0x30
   1ad08:	bcs	1adac <flatcc_json_parser_generic_json@@Base+0x174>
   1ad0c:	cmp	r2, #34	; 0x22
   1ad10:	bne	1ada4 <flatcc_json_parser_generic_json@@Base+0x16c>
   1ad14:	add	ip, r3, #1
   1ad18:	cmp	r4, ip
   1ad1c:	beq	1ad8c <flatcc_json_parser_generic_json@@Base+0x154>
   1ad20:	ldrb	r3, [ip]
   1ad24:	cmp	r3, #34	; 0x22
   1ad28:	addne	r7, sp, #12
   1ad2c:	bne	1ad40 <flatcc_json_parser_generic_json@@Base+0x108>
   1ad30:	b	1b308 <flatcc_json_parser_generic_json@@Base+0x6d0>
   1ad34:	ldrb	r3, [r0]
   1ad38:	cmp	r3, #34	; 0x22
   1ad3c:	beq	1b308 <flatcc_json_parser_generic_json@@Base+0x6d0>
   1ad40:	mov	r1, ip
   1ad44:	mov	r2, r4
   1ad48:	mov	r0, r6
   1ad4c:	bl	19b20 <flatcc_json_parser_string_part@@Base>
   1ad50:	mov	r3, r7
   1ad54:	mov	r2, r4
   1ad58:	mov	ip, r0
   1ad5c:	cmp	r4, ip
   1ad60:	mov	r1, r0
   1ad64:	mov	r0, r6
   1ad68:	beq	1ad78 <flatcc_json_parser_generic_json@@Base+0x140>
   1ad6c:	ldrb	lr, [ip]
   1ad70:	cmp	lr, #34	; 0x22
   1ad74:	beq	1b308 <flatcc_json_parser_generic_json@@Base+0x6d0>
   1ad78:	bl	1a338 <flatcc_json_parser_string_escape@@Base>
   1ad7c:	cmp	r4, r0
   1ad80:	mov	ip, r0
   1ad84:	bne	1ad34 <flatcc_json_parser_generic_json@@Base+0xfc>
   1ad88:	mov	ip, r4
   1ad8c:	mov	r1, ip
   1ad90:	mov	r3, #20
   1ad94:	mov	r2, r4
   1ad98:	mov	r0, r6
   1ad9c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1ada0:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1ada4:	cmp	r2, #45	; 0x2d
   1ada8:	bne	1ae2c <flatcc_json_parser_generic_json@@Base+0x1f4>
   1adac:	cmp	r4, r3
   1adb0:	beq	1b500 <flatcc_json_parser_generic_json@@Base+0x8c8>
   1adb4:	cmp	r2, #45	; 0x2d
   1adb8:	beq	1b3fc <flatcc_json_parser_generic_json@@Base+0x7c4>
   1adbc:	ldrb	r2, [r3]
   1adc0:	cmp	r2, #48	; 0x30
   1adc4:	beq	1b310 <flatcc_json_parser_generic_json@@Base+0x6d8>
   1adc8:	sub	r2, r2, #49	; 0x31
   1adcc:	cmp	r2, #8
   1add0:	bhi	1b4cc <flatcc_json_parser_generic_json@@Base+0x894>
   1add4:	add	r0, r3, #1
   1add8:	cmp	r4, r0
   1addc:	beq	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1ade0:	ldrb	r2, [r3, #1]
   1ade4:	sub	r1, r2, #48	; 0x30
   1ade8:	cmp	r1, #9
   1adec:	bhi	1b320 <flatcc_json_parser_generic_json@@Base+0x6e8>
   1adf0:	add	r3, r3, #2
   1adf4:	b	1ae08 <flatcc_json_parser_generic_json@@Base+0x1d0>
   1adf8:	ldrb	r2, [r3], #1
   1adfc:	sub	r1, r2, #48	; 0x30
   1ae00:	cmp	r1, #9
   1ae04:	bhi	1b320 <flatcc_json_parser_generic_json@@Base+0x6e8>
   1ae08:	cmp	r3, r4
   1ae0c:	mov	r0, r3
   1ae10:	bne	1adf8 <flatcc_json_parser_generic_json@@Base+0x1c0>
   1ae14:	mov	r1, r0
   1ae18:	mov	r3, #6
   1ae1c:	mov	r2, r4
   1ae20:	mov	r0, r6
   1ae24:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1ae28:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1ae2c:	mov	r1, r3
   1ae30:	mov	r2, r4
   1ae34:	mov	r0, r6
   1ae38:	str	r3, [sp, #4]
   1ae3c:	bl	1a7b0 <flatcc_json_parser_skip_constant@@Base>
   1ae40:	ldr	r3, [sp, #4]
   1ae44:	cmp	r0, r3
   1ae48:	beq	1b5bc <flatcc_json_parser_generic_json@@Base+0x984>
   1ae4c:	cmp	r4, r0
   1ae50:	bne	1aebc <flatcc_json_parser_generic_json@@Base+0x284>
   1ae54:	b	1b500 <flatcc_json_parser_generic_json@@Base+0x8c8>
   1ae58:	cmp	r3, #1
   1ae5c:	ble	1ae70 <flatcc_json_parser_generic_json@@Base+0x238>
   1ae60:	ldrb	r3, [r0]
   1ae64:	cmp	r3, #32
   1ae68:	bhi	1ae80 <flatcc_json_parser_generic_json@@Base+0x248>
   1ae6c:	beq	1af68 <flatcc_json_parser_generic_json@@Base+0x330>
   1ae70:	mov	r1, r0
   1ae74:	mov	r2, r4
   1ae78:	mov	r0, r6
   1ae7c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1ae80:	cmp	r4, r0
   1ae84:	beq	1af80 <flatcc_json_parser_generic_json@@Base+0x348>
   1ae88:	ldrb	r3, [r0]
   1ae8c:	cmp	r3, #44	; 0x2c
   1ae90:	beq	1afb4 <flatcc_json_parser_generic_json@@Base+0x37c>
   1ae94:	cmp	r3, #125	; 0x7d
   1ae98:	beq	1af34 <flatcc_json_parser_generic_json@@Base+0x2fc>
   1ae9c:	mov	r1, r0
   1aea0:	mov	r3, r9
   1aea4:	mov	r2, r4
   1aea8:	mov	r0, r6
   1aeac:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1aeb0:	cmp	r4, r0
   1aeb4:	beq	1af80 <flatcc_json_parser_generic_json@@Base+0x348>
   1aeb8:	mov	r5, r7
   1aebc:	cmp	r5, r8
   1aec0:	beq	1afac <flatcc_json_parser_generic_json@@Base+0x374>
   1aec4:	ldrb	r3, [r5, #-1]
   1aec8:	sub	r7, r5, #1
   1aecc:	cmp	r3, #93	; 0x5d
   1aed0:	sub	r3, r4, r0
   1aed4:	bne	1ae58 <flatcc_json_parser_generic_json@@Base+0x220>
   1aed8:	cmp	r3, #1
   1aedc:	ble	1aef0 <flatcc_json_parser_generic_json@@Base+0x2b8>
   1aee0:	ldrb	r3, [r0]
   1aee4:	cmp	r3, #32
   1aee8:	bhi	1af00 <flatcc_json_parser_generic_json@@Base+0x2c8>
   1aeec:	beq	1b000 <flatcc_json_parser_generic_json@@Base+0x3c8>
   1aef0:	mov	r1, r0
   1aef4:	mov	r2, r4
   1aef8:	mov	r0, r6
   1aefc:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1af00:	cmp	r4, r0
   1af04:	beq	1af80 <flatcc_json_parser_generic_json@@Base+0x348>
   1af08:	ldrb	r3, [r0]
   1af0c:	cmp	r3, #44	; 0x2c
   1af10:	beq	1b014 <flatcc_json_parser_generic_json@@Base+0x3dc>
   1af14:	cmp	r3, #93	; 0x5d
   1af18:	beq	1af34 <flatcc_json_parser_generic_json@@Base+0x2fc>
   1af1c:	mov	r1, r0
   1af20:	mov	r3, sl
   1af24:	mov	r2, r4
   1af28:	mov	r0, r6
   1af2c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1af30:	b	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1af34:	add	r1, r0, #1
   1af38:	sub	r3, r4, r1
   1af3c:	cmp	r3, #1
   1af40:	ble	1af58 <flatcc_json_parser_generic_json@@Base+0x320>
   1af44:	ldrb	r3, [r0, #1]
   1af48:	cmp	r3, #32
   1af4c:	movhi	r0, r1
   1af50:	bhi	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1af54:	beq	1b080 <flatcc_json_parser_generic_json@@Base+0x448>
   1af58:	mov	r2, r4
   1af5c:	mov	r0, r6
   1af60:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1af64:	b	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1af68:	ldrb	r3, [r0, #1]
   1af6c:	cmp	r3, #32
   1af70:	addhi	r0, r0, #1
   1af74:	bls	1ae70 <flatcc_json_parser_generic_json@@Base+0x238>
   1af78:	cmp	r4, r0
   1af7c:	bne	1ae88 <flatcc_json_parser_generic_json@@Base+0x250>
   1af80:	mov	r0, r4
   1af84:	cmp	r7, r8
   1af88:	beq	1afac <flatcc_json_parser_generic_json@@Base+0x374>
   1af8c:	ldrb	r3, [r7, #-1]
   1af90:	mov	r0, r6
   1af94:	mov	r2, r4
   1af98:	cmp	r3, #93	; 0x5d
   1af9c:	movne	r3, #10
   1afa0:	moveq	r3, #9
   1afa4:	mov	r1, r4
   1afa8:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1afac:	add	sp, sp, #532	; 0x214
   1afb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afb4:	add	r1, r0, #1
   1afb8:	sub	r3, r4, r1
   1afbc:	cmp	r3, #1
   1afc0:	ble	1afd4 <flatcc_json_parser_generic_json@@Base+0x39c>
   1afc4:	ldrb	r3, [r0, #1]
   1afc8:	cmp	r3, #32
   1afcc:	bhi	1afe4 <flatcc_json_parser_generic_json@@Base+0x3ac>
   1afd0:	beq	1b3b0 <flatcc_json_parser_generic_json@@Base+0x778>
   1afd4:	mov	r2, r4
   1afd8:	mov	r0, r6
   1afdc:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1afe0:	mov	r1, r0
   1afe4:	cmp	r4, r1
   1afe8:	beq	1b4b4 <flatcc_json_parser_generic_json@@Base+0x87c>
   1afec:	ldrb	r2, [r1]
   1aff0:	cmp	r2, #125	; 0x7d
   1aff4:	beq	1b058 <flatcc_json_parser_generic_json@@Base+0x420>
   1aff8:	mov	r3, r1
   1affc:	b	1ac6c <flatcc_json_parser_generic_json@@Base+0x34>
   1b000:	ldrb	r3, [r0, #1]
   1b004:	cmp	r3, #32
   1b008:	addhi	r0, r0, #1
   1b00c:	bls	1aef0 <flatcc_json_parser_generic_json@@Base+0x2b8>
   1b010:	b	1af00 <flatcc_json_parser_generic_json@@Base+0x2c8>
   1b014:	add	r1, r0, #1
   1b018:	sub	r3, r4, r1
   1b01c:	cmp	r3, #1
   1b020:	ble	1b034 <flatcc_json_parser_generic_json@@Base+0x3fc>
   1b024:	ldrb	r3, [r0, #1]
   1b028:	cmp	r3, #32
   1b02c:	bhi	1b044 <flatcc_json_parser_generic_json@@Base+0x40c>
   1b030:	beq	1b238 <flatcc_json_parser_generic_json@@Base+0x600>
   1b034:	mov	r2, r4
   1b038:	mov	r0, r6
   1b03c:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1b040:	mov	r1, r0
   1b044:	cmp	r4, r1
   1b048:	beq	1b548 <flatcc_json_parser_generic_json@@Base+0x910>
   1b04c:	ldrb	r2, [r1]
   1b050:	cmp	r2, #93	; 0x5d
   1b054:	bne	1aff8 <flatcc_json_parser_generic_json@@Base+0x3c0>
   1b058:	add	r0, r1, #1
   1b05c:	sub	r3, r4, r0
   1b060:	cmp	r3, #1
   1b064:	ble	1b078 <flatcc_json_parser_generic_json@@Base+0x440>
   1b068:	ldrb	r3, [r1, #1]
   1b06c:	cmp	r3, #32
   1b070:	bhi	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1b074:	beq	1b534 <flatcc_json_parser_generic_json@@Base+0x8fc>
   1b078:	mov	r1, r0
   1b07c:	b	1af58 <flatcc_json_parser_generic_json@@Base+0x320>
   1b080:	ldrb	r3, [r0, #2]
   1b084:	cmp	r3, #32
   1b088:	addhi	r0, r0, #2
   1b08c:	bls	1af58 <flatcc_json_parser_generic_json@@Base+0x320>
   1b090:	b	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1b094:	add	r2, sp, #528	; 0x210
   1b098:	cmp	r5, r2
   1b09c:	beq	1b58c <flatcc_json_parser_generic_json@@Base+0x954>
   1b0a0:	add	r1, r3, #1
   1b0a4:	sub	r2, r4, r1
   1b0a8:	cmp	r2, #1
   1b0ac:	mov	r2, #93	; 0x5d
   1b0b0:	strb	r2, [r5]
   1b0b4:	add	r5, r5, #1
   1b0b8:	ble	1b0d0 <flatcc_json_parser_generic_json@@Base+0x498>
   1b0bc:	ldrb	r2, [r3, #1]
   1b0c0:	cmp	r2, #32
   1b0c4:	movhi	r3, r1
   1b0c8:	bhi	1b0e0 <flatcc_json_parser_generic_json@@Base+0x4a8>
   1b0cc:	beq	1b260 <flatcc_json_parser_generic_json@@Base+0x628>
   1b0d0:	mov	r2, r4
   1b0d4:	mov	r0, r6
   1b0d8:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1b0dc:	mov	r3, r0
   1b0e0:	cmp	r4, r3
   1b0e4:	beq	1b3f0 <flatcc_json_parser_generic_json@@Base+0x7b8>
   1b0e8:	ldrb	r2, [r3]
   1b0ec:	cmp	r2, #93	; 0x5d
   1b0f0:	bne	1ac6c <flatcc_json_parser_generic_json@@Base+0x34>
   1b0f4:	b	1acf4 <flatcc_json_parser_generic_json@@Base+0xbc>
   1b0f8:	cmp	r2, #34	; 0x22
   1b0fc:	moveq	r2, #0
   1b100:	addeq	r3, r3, #1
   1b104:	streq	r2, [r6, #12]
   1b108:	beq	1b298 <flatcc_json_parser_generic_json@@Base+0x660>
   1b10c:	cmp	r2, #46	; 0x2e
   1b110:	movne	r2, #1
   1b114:	strne	r2, [r6, #12]
   1b118:	beq	1b274 <flatcc_json_parser_generic_json@@Base+0x63c>
   1b11c:	cmp	r4, r3
   1b120:	moveq	r0, r4
   1b124:	beq	1b194 <flatcc_json_parser_generic_json@@Base+0x55c>
   1b128:	ldrb	r2, [r3]
   1b12c:	cmp	r2, #32
   1b130:	addhi	r3, r3, #1
   1b134:	bls	1b604 <flatcc_json_parser_generic_json@@Base+0x9cc>
   1b138:	cmp	r2, #46	; 0x2e
   1b13c:	cmpne	r2, #95	; 0x5f
   1b140:	sub	r0, r3, #1
   1b144:	beq	1b2e8 <flatcc_json_parser_generic_json@@Base+0x6b0>
   1b148:	sub	r1, r2, #48	; 0x30
   1b14c:	tst	r2, #128	; 0x80
   1b150:	uxtb	r1, r1
   1b154:	bne	1b2e8 <flatcc_json_parser_generic_json@@Base+0x6b0>
   1b158:	orr	ip, r2, #32
   1b15c:	sub	ip, ip, #97	; 0x61
   1b160:	cmp	r1, #9
   1b164:	uxtb	ip, ip
   1b168:	bls	1b2e8 <flatcc_json_parser_generic_json@@Base+0x6b0>
   1b16c:	cmp	ip, #25
   1b170:	bls	1b2e8 <flatcc_json_parser_generic_json@@Base+0x6b0>
   1b174:	sub	r3, r4, r0
   1b178:	cmp	r3, #1
   1b17c:	ble	1b194 <flatcc_json_parser_generic_json@@Base+0x55c>
   1b180:	ldrb	r2, [r0]
   1b184:	cmp	r2, #32
   1b188:	bhi	1b1a4 <flatcc_json_parser_generic_json@@Base+0x56c>
   1b18c:	cmp	r2, #32
   1b190:	beq	1b50c <flatcc_json_parser_generic_json@@Base+0x8d4>
   1b194:	mov	r1, r0
   1b198:	mov	r2, r4
   1b19c:	mov	r0, r6
   1b1a0:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1b1a4:	cmp	r4, r0
   1b1a8:	beq	1b5d4 <flatcc_json_parser_generic_json@@Base+0x99c>
   1b1ac:	ldrb	r3, [r0]
   1b1b0:	cmp	r3, #58	; 0x3a
   1b1b4:	bne	1b5ec <flatcc_json_parser_generic_json@@Base+0x9b4>
   1b1b8:	add	r3, r0, #1
   1b1bc:	sub	r2, r4, r3
   1b1c0:	cmp	r2, #1
   1b1c4:	ble	1b1d8 <flatcc_json_parser_generic_json@@Base+0x5a0>
   1b1c8:	ldrb	r2, [r0, #1]
   1b1cc:	cmp	r2, #32
   1b1d0:	bhi	1b1f0 <flatcc_json_parser_generic_json@@Base+0x5b8>
   1b1d4:	beq	1b520 <flatcc_json_parser_generic_json@@Base+0x8e8>
   1b1d8:	mov	r1, r3
   1b1dc:	mov	r2, r4
   1b1e0:	mov	r0, r6
   1b1e4:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1b1e8:	ldrb	r2, [r0]
   1b1ec:	mov	r3, r0
   1b1f0:	cmp	r2, #57	; 0x39
   1b1f4:	bhi	1ac88 <flatcc_json_parser_generic_json@@Base+0x50>
   1b1f8:	cmp	r2, #48	; 0x30
   1b1fc:	bcs	1adac <flatcc_json_parser_generic_json@@Base+0x174>
   1b200:	cmp	r2, #34	; 0x22
   1b204:	bne	1ada4 <flatcc_json_parser_generic_json@@Base+0x16c>
   1b208:	cmp	r3, r4
   1b20c:	bne	1ad14 <flatcc_json_parser_generic_json@@Base+0xdc>
   1b210:	mov	r3, #16
   1b214:	mov	r2, r4
   1b218:	mov	r1, r4
   1b21c:	mov	r0, r6
   1b220:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b224:	mov	ip, r0
   1b228:	b	1ad18 <flatcc_json_parser_generic_json@@Base+0xe0>
   1b22c:	cmp	r2, #91	; 0x5b
   1b230:	bne	1ac90 <flatcc_json_parser_generic_json@@Base+0x58>
   1b234:	b	1b0a0 <flatcc_json_parser_generic_json@@Base+0x468>
   1b238:	ldrb	r3, [r0, #2]
   1b23c:	cmp	r3, #32
   1b240:	addhi	r1, r0, #2
   1b244:	bls	1b034 <flatcc_json_parser_generic_json@@Base+0x3fc>
   1b248:	b	1b044 <flatcc_json_parser_generic_json@@Base+0x40c>
   1b24c:	ldrb	r2, [r3, #2]
   1b250:	cmp	r2, #32
   1b254:	addhi	r3, r3, #2
   1b258:	bls	1acd0 <flatcc_json_parser_generic_json@@Base+0x98>
   1b25c:	b	1ace0 <flatcc_json_parser_generic_json@@Base+0xa8>
   1b260:	ldrb	r2, [r3, #2]
   1b264:	cmp	r2, #32
   1b268:	addhi	r3, r3, #2
   1b26c:	bls	1b0d0 <flatcc_json_parser_generic_json@@Base+0x498>
   1b270:	b	1b0e0 <flatcc_json_parser_generic_json@@Base+0x4a8>
   1b274:	mov	r1, r3
   1b278:	mov	r2, r4
   1b27c:	mov	r3, #5
   1b280:	mov	r0, r6
   1b284:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b288:	ldr	r2, [r6, #12]
   1b28c:	cmp	r2, #0
   1b290:	mov	r3, r0
   1b294:	bne	1b11c <flatcc_json_parser_generic_json@@Base+0x4e4>
   1b298:	cmp	r4, r3
   1b29c:	beq	1b4e4 <flatcc_json_parser_generic_json@@Base+0x8ac>
   1b2a0:	ldrb	r1, [r3]
   1b2a4:	cmp	r1, #34	; 0x22
   1b2a8:	bne	1b2c8 <flatcc_json_parser_generic_json@@Base+0x690>
   1b2ac:	b	1b4f8 <flatcc_json_parser_generic_json@@Base+0x8c0>
   1b2b0:	add	r3, r2, #1
   1b2b4:	cmp	r4, r3
   1b2b8:	beq	1b4e4 <flatcc_json_parser_generic_json@@Base+0x8ac>
   1b2bc:	ldrb	r1, [r2, #1]
   1b2c0:	cmp	r1, #34	; 0x22
   1b2c4:	beq	1b4f8 <flatcc_json_parser_generic_json@@Base+0x8c0>
   1b2c8:	cmp	r1, #92	; 0x5c
   1b2cc:	mov	r2, r3
   1b2d0:	bne	1b2b0 <flatcc_json_parser_generic_json@@Base+0x678>
   1b2d4:	sub	r2, r4, r3
   1b2d8:	cmp	r2, #1
   1b2dc:	ble	1b490 <flatcc_json_parser_generic_json@@Base+0x858>
   1b2e0:	add	r2, r3, #1
   1b2e4:	b	1b2b0 <flatcc_json_parser_generic_json@@Base+0x678>
   1b2e8:	cmp	r4, r3
   1b2ec:	mov	r0, r3
   1b2f0:	beq	1b568 <flatcc_json_parser_generic_json@@Base+0x930>
   1b2f4:	ldrb	r1, [r3], #1
   1b2f8:	cmp	r1, #32
   1b2fc:	bls	1b56c <flatcc_json_parser_generic_json@@Base+0x934>
   1b300:	mov	r2, r1
   1b304:	b	1b138 <flatcc_json_parser_generic_json@@Base+0x500>
   1b308:	add	r0, ip, #1
   1b30c:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b310:	add	r0, r3, #1
   1b314:	cmp	r4, r0
   1b318:	ldrbne	r2, [r3, #1]
   1b31c:	beq	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b320:	cmp	r2, #46	; 0x2e
   1b324:	beq	1b43c <flatcc_json_parser_generic_json@@Base+0x804>
   1b328:	and	r3, r2, #223	; 0xdf
   1b32c:	cmp	r3, #69	; 0x45
   1b330:	bne	1b3c4 <flatcc_json_parser_generic_json@@Base+0x78c>
   1b334:	add	r1, r0, #1
   1b338:	cmp	r4, r1
   1b33c:	beq	1b408 <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b340:	ldrb	r3, [r0, #1]
   1b344:	sub	r2, r3, #43	; 0x2b
   1b348:	tst	r2, #253	; 0xfd
   1b34c:	bne	1b360 <flatcc_json_parser_generic_json@@Base+0x728>
   1b350:	add	r1, r0, #2
   1b354:	cmp	r4, r1
   1b358:	beq	1ae18 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b35c:	ldrb	r3, [r0, #2]
   1b360:	sub	r3, r3, #48	; 0x30
   1b364:	cmp	r3, #9
   1b368:	bhi	1ae18 <flatcc_json_parser_generic_json@@Base+0x1e0>
   1b36c:	add	r0, r1, #1
   1b370:	cmp	r4, r0
   1b374:	beq	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b378:	ldrb	r2, [r1, #1]
   1b37c:	sub	r3, r2, #48	; 0x30
   1b380:	cmp	r3, #9
   1b384:	bhi	1b3c4 <flatcc_json_parser_generic_json@@Base+0x78c>
   1b388:	add	r3, r1, #2
   1b38c:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x768>
   1b390:	ldrb	r2, [r3], #1
   1b394:	sub	r1, r2, #48	; 0x30
   1b398:	cmp	r1, #9
   1b39c:	bhi	1b3c4 <flatcc_json_parser_generic_json@@Base+0x78c>
   1b3a0:	cmp	r4, r3
   1b3a4:	mov	r0, r3
   1b3a8:	bne	1b390 <flatcc_json_parser_generic_json@@Base+0x758>
   1b3ac:	b	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b3b0:	ldrb	r3, [r0, #2]
   1b3b4:	cmp	r3, #32
   1b3b8:	addhi	r1, r0, #2
   1b3bc:	bls	1afd4 <flatcc_json_parser_generic_json@@Base+0x39c>
   1b3c0:	b	1afe4 <flatcc_json_parser_generic_json@@Base+0x3ac>
   1b3c4:	cmp	r2, #32
   1b3c8:	beq	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b3cc:	bls	1b420 <flatcc_json_parser_generic_json@@Base+0x7e8>
   1b3d0:	cmp	r2, #58	; 0x3a
   1b3d4:	beq	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b3d8:	bls	1b4ec <flatcc_json_parser_generic_json@@Base+0x8b4>
   1b3dc:	cmp	r2, #93	; 0x5d
   1b3e0:	beq	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b3e4:	cmp	r2, #125	; 0x7d
   1b3e8:	bne	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b3ec:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b3f0:	mov	r0, r4
   1b3f4:	add	sp, sp, #532	; 0x214
   1b3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3fc:	add	r3, r3, #1
   1b400:	cmp	r4, r3
   1b404:	bne	1adbc <flatcc_json_parser_generic_json@@Base+0x184>
   1b408:	mov	r3, #6
   1b40c:	mov	r2, r4
   1b410:	mov	r1, r4
   1b414:	mov	r0, r6
   1b418:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b41c:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b420:	cmp	r2, #9
   1b424:	bcc	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b428:	cmp	r2, #11
   1b42c:	bls	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b430:	cmp	r2, #13
   1b434:	bne	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b438:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b43c:	ldrb	r3, [r0, #1]
   1b440:	sub	r3, r3, #48	; 0x30
   1b444:	cmp	r3, #9
   1b448:	bhi	1b5a4 <flatcc_json_parser_generic_json@@Base+0x96c>
   1b44c:	add	r3, r0, #2
   1b450:	cmp	r4, r3
   1b454:	beq	1b620 <flatcc_json_parser_generic_json@@Base+0x9e8>
   1b458:	ldrb	r2, [r0, #2]
   1b45c:	sub	r1, r2, #48	; 0x30
   1b460:	cmp	r1, #9
   1b464:	bhi	1b618 <flatcc_json_parser_generic_json@@Base+0x9e0>
   1b468:	add	r3, r0, #3
   1b46c:	b	1b480 <flatcc_json_parser_generic_json@@Base+0x848>
   1b470:	ldrb	r2, [r3], #1
   1b474:	sub	r1, r2, #48	; 0x30
   1b478:	cmp	r1, #9
   1b47c:	bhi	1b328 <flatcc_json_parser_generic_json@@Base+0x6f0>
   1b480:	cmp	r4, r3
   1b484:	mov	r0, r3
   1b488:	bne	1b470 <flatcc_json_parser_generic_json@@Base+0x838>
   1b48c:	b	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b490:	ldrb	r2, [r3]
   1b494:	cmp	r2, #34	; 0x22
   1b498:	beq	1b4f8 <flatcc_json_parser_generic_json@@Base+0x8c0>
   1b49c:	mov	r1, r3
   1b4a0:	mov	r2, r4
   1b4a4:	mov	r3, #20
   1b4a8:	mov	r0, r6
   1b4ac:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b4b0:	b	1b174 <flatcc_json_parser_generic_json@@Base+0x53c>
   1b4b4:	mov	r3, r9
   1b4b8:	mov	r2, r4
   1b4bc:	mov	r1, r4
   1b4c0:	mov	r0, r6
   1b4c4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b4c8:	b	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1b4cc:	mov	r1, r3
   1b4d0:	mov	r2, r4
   1b4d4:	mov	r3, #6
   1b4d8:	mov	r0, r6
   1b4dc:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b4e0:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b4e4:	mov	r3, r4
   1b4e8:	b	1b49c <flatcc_json_parser_generic_json@@Base+0x864>
   1b4ec:	cmp	r2, #44	; 0x2c
   1b4f0:	bne	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>
   1b4f4:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b4f8:	add	r0, r3, #1
   1b4fc:	b	1b174 <flatcc_json_parser_generic_json@@Base+0x53c>
   1b500:	mov	r7, r5
   1b504:	mov	r0, r4
   1b508:	b	1af84 <flatcc_json_parser_generic_json@@Base+0x34c>
   1b50c:	ldrb	r3, [r0, #1]
   1b510:	cmp	r3, #32
   1b514:	addhi	r0, r0, #1
   1b518:	bls	1b194 <flatcc_json_parser_generic_json@@Base+0x55c>
   1b51c:	b	1b1a4 <flatcc_json_parser_generic_json@@Base+0x56c>
   1b520:	ldrb	r2, [r0, #2]
   1b524:	cmp	r2, #32
   1b528:	addhi	r3, r0, #2
   1b52c:	bls	1b1d8 <flatcc_json_parser_generic_json@@Base+0x5a0>
   1b530:	b	1b1f0 <flatcc_json_parser_generic_json@@Base+0x5b8>
   1b534:	ldrb	r3, [r1, #2]
   1b538:	cmp	r3, #32
   1b53c:	addhi	r0, r1, #2
   1b540:	bls	1b078 <flatcc_json_parser_generic_json@@Base+0x440>
   1b544:	b	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1b548:	mov	r3, sl
   1b54c:	mov	r2, r4
   1b550:	mov	r1, r4
   1b554:	mov	r0, r6
   1b558:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b55c:	b	1aeb0 <flatcc_json_parser_generic_json@@Base+0x278>
   1b560:	mov	r0, r1
   1b564:	bx	lr
   1b568:	mov	r0, r4
   1b56c:	cmp	r2, #46	; 0x2e
   1b570:	bne	1b174 <flatcc_json_parser_generic_json@@Base+0x53c>
   1b574:	mov	r1, r0
   1b578:	mov	r3, #5
   1b57c:	mov	r2, r4
   1b580:	mov	r0, r6
   1b584:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b588:	b	1b174 <flatcc_json_parser_generic_json@@Base+0x53c>
   1b58c:	mov	r1, r3
   1b590:	mov	r2, r4
   1b594:	mov	r0, r6
   1b598:	mov	r3, #2
   1b59c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b5a0:	b	1afac <flatcc_json_parser_generic_json@@Base+0x374>
   1b5a4:	add	r1, r0, #1
   1b5a8:	mov	r3, #6
   1b5ac:	mov	r2, r4
   1b5b0:	mov	r0, r6
   1b5b4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b5b8:	b	1ae4c <flatcc_json_parser_generic_json@@Base+0x214>
   1b5bc:	mov	r1, r3
   1b5c0:	mov	r2, r4
   1b5c4:	mov	r0, r6
   1b5c8:	mov	r3, #5
   1b5cc:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b5d0:	b	1afac <flatcc_json_parser_generic_json@@Base+0x374>
   1b5d4:	mov	r0, r6
   1b5d8:	mov	r3, #10
   1b5dc:	mov	r2, r4
   1b5e0:	mov	r1, r4
   1b5e4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b5e8:	b	1afac <flatcc_json_parser_generic_json@@Base+0x374>
   1b5ec:	mov	r1, r0
   1b5f0:	mov	r2, r4
   1b5f4:	mov	r0, r6
   1b5f8:	mov	r3, #4
   1b5fc:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b600:	b	1afac <flatcc_json_parser_generic_json@@Base+0x374>
   1b604:	sub	r1, r4, r3
   1b608:	cmp	r1, #1
   1b60c:	mov	r0, r3
   1b610:	bgt	1b18c <flatcc_json_parser_generic_json@@Base+0x554>
   1b614:	b	1b194 <flatcc_json_parser_generic_json@@Base+0x55c>
   1b618:	mov	r0, r3
   1b61c:	b	1b328 <flatcc_json_parser_generic_json@@Base+0x6f0>
   1b620:	mov	r0, r4
   1b624:	b	1ae14 <flatcc_json_parser_generic_json@@Base+0x1dc>

0001b628 <flatcc_json_parser_unmatched_symbol@@Base>:
   1b628:	ldr	ip, [r0, #8]
   1b62c:	tst	ip, #1
   1b630:	beq	1b704 <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1b634:	push	{r4, r5, r6, lr}
   1b638:	mov	r4, r2
   1b63c:	ldr	r2, [r0, #12]
   1b640:	mov	r5, r0
   1b644:	cmp	r2, #0
   1b648:	mov	r3, r1
   1b64c:	beq	1b70c <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   1b650:	cmp	r1, r4
   1b654:	beq	1b6a4 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   1b658:	ldrb	r1, [r1]
   1b65c:	cmp	r1, #32
   1b660:	bls	1b6a4 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   1b664:	add	r2, r3, #1
   1b668:	cmp	r1, #46	; 0x2e
   1b66c:	cmpne	r1, #95	; 0x5f
   1b670:	sub	r3, r2, #1
   1b674:	beq	1b770 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1b678:	sub	r0, r1, #48	; 0x30
   1b67c:	tst	r1, #128	; 0x80
   1b680:	uxtb	r0, r0
   1b684:	bne	1b770 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1b688:	orr	ip, r1, #32
   1b68c:	sub	ip, ip, #97	; 0x61
   1b690:	cmp	r0, #9
   1b694:	uxtb	ip, ip
   1b698:	bls	1b770 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1b69c:	cmp	ip, #25
   1b6a0:	bls	1b770 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1b6a4:	mov	r6, r4
   1b6a8:	sub	r2, r6, r3
   1b6ac:	cmp	r2, #1
   1b6b0:	ble	1b6c4 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   1b6b4:	ldrb	r2, [r3]
   1b6b8:	cmp	r2, #32
   1b6bc:	bhi	1b6d8 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   1b6c0:	beq	1b790 <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   1b6c4:	mov	r1, r3
   1b6c8:	mov	r2, r4
   1b6cc:	mov	r0, r5
   1b6d0:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1b6d4:	mov	r3, r0
   1b6d8:	cmp	r4, r3
   1b6dc:	beq	1b6ec <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   1b6e0:	ldrb	r2, [r3]
   1b6e4:	cmp	r2, #58	; 0x3a
   1b6e8:	beq	1b800 <flatcc_json_parser_unmatched_symbol@@Base+0x1d8>
   1b6ec:	mov	r2, r4
   1b6f0:	mov	r1, r3
   1b6f4:	mov	r0, r5
   1b6f8:	mov	r3, #4
   1b6fc:	pop	{r4, r5, r6, lr}
   1b700:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1b704:	mov	r3, #13
   1b708:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1b70c:	cmp	r1, r4
   1b710:	beq	1b854 <flatcc_json_parser_unmatched_symbol@@Base+0x22c>
   1b714:	ldrb	r1, [r1]
   1b718:	cmp	r1, #34	; 0x22
   1b71c:	movne	r6, r4
   1b720:	bne	1b740 <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   1b724:	b	1b7cc <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   1b728:	add	r3, r2, #1
   1b72c:	cmp	r4, r3
   1b730:	beq	1b768 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   1b734:	ldrb	r1, [r2, #1]
   1b738:	cmp	r1, #34	; 0x22
   1b73c:	beq	1b7d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1b740:	cmp	r1, #92	; 0x5c
   1b744:	mov	r2, r3
   1b748:	bne	1b728 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1b74c:	sub	r2, r4, r3
   1b750:	cmp	r2, #1
   1b754:	ble	1b7a4 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   1b758:	add	r2, r3, #1
   1b75c:	add	r3, r2, #1
   1b760:	cmp	r4, r3
   1b764:	bne	1b734 <flatcc_json_parser_unmatched_symbol@@Base+0x10c>
   1b768:	mov	r3, r4
   1b76c:	b	1b7b0 <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   1b770:	cmp	r4, r2
   1b774:	mov	r3, r2
   1b778:	beq	1b7d8 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1b77c:	ldrb	r0, [r2], #1
   1b780:	cmp	r0, #32
   1b784:	bls	1b7dc <flatcc_json_parser_unmatched_symbol@@Base+0x1b4>
   1b788:	mov	r1, r0
   1b78c:	b	1b668 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   1b790:	ldrb	r2, [r3, #1]
   1b794:	cmp	r2, #32
   1b798:	addhi	r3, r3, #1
   1b79c:	bls	1b6c4 <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   1b7a0:	b	1b6d8 <flatcc_json_parser_unmatched_symbol@@Base+0xb0>
   1b7a4:	ldrb	r2, [r3]
   1b7a8:	cmp	r2, #34	; 0x22
   1b7ac:	beq	1b7d0 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1b7b0:	mov	r1, r3
   1b7b4:	mov	r2, r4
   1b7b8:	mov	r3, #20
   1b7bc:	mov	r0, r5
   1b7c0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b7c4:	mov	r3, r0
   1b7c8:	b	1b6a8 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   1b7cc:	mov	r6, r4
   1b7d0:	add	r3, r3, #1
   1b7d4:	b	1b6a8 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
   1b7d8:	mov	r3, r4
   1b7dc:	cmp	r1, #46	; 0x2e
   1b7e0:	bne	1b6a4 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   1b7e4:	mov	r1, r3
   1b7e8:	mov	r2, r4
   1b7ec:	mov	r3, #5
   1b7f0:	mov	r0, r5
   1b7f4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b7f8:	mov	r3, r0
   1b7fc:	b	1b6a4 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   1b800:	add	r1, r3, #1
   1b804:	sub	r6, r6, r1
   1b808:	cmp	r6, #1
   1b80c:	ble	1b820 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1b810:	ldrb	r2, [r3, #1]
   1b814:	cmp	r2, #32
   1b818:	bhi	1b830 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1b81c:	beq	1b840 <flatcc_json_parser_unmatched_symbol@@Base+0x218>
   1b820:	mov	r2, r4
   1b824:	mov	r0, r5
   1b828:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1b82c:	mov	r1, r0
   1b830:	mov	r2, r4
   1b834:	mov	r0, r5
   1b838:	pop	{r4, r5, r6, lr}
   1b83c:	b	1ac38 <flatcc_json_parser_generic_json@@Base>
   1b840:	ldrb	r2, [r3, #2]
   1b844:	cmp	r2, #32
   1b848:	addhi	r1, r3, #2
   1b84c:	bls	1b820 <flatcc_json_parser_unmatched_symbol@@Base+0x1f8>
   1b850:	b	1b830 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1b854:	mov	r6, r1
   1b858:	b	1b7b0 <flatcc_json_parser_unmatched_symbol@@Base+0x188>

0001b85c <flatcc_json_parser_integer@@Base>:
   1b85c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b860:	cmp	r1, r2
   1b864:	ldr	r9, [sp, #32]
   1b868:	beq	1b958 <flatcc_json_parser_integer@@Base+0xfc>
   1b86c:	ldrb	ip, [r1]
   1b870:	mov	r8, r0
   1b874:	sub	ip, ip, #45	; 0x2d
   1b878:	clz	ip, ip
   1b87c:	lsr	ip, ip, #5
   1b880:	add	r0, r1, ip
   1b884:	cmp	r2, r0
   1b888:	str	ip, [r3]
   1b88c:	beq	1b964 <flatcc_json_parser_integer@@Base+0x108>
   1b890:	ldrb	r6, [r1, ip]
   1b894:	sub	r3, r6, #48	; 0x30
   1b898:	cmp	r3, #9
   1b89c:	bhi	1b90c <flatcc_json_parser_integer@@Base+0xb0>
   1b8a0:	uxtb	r6, r6
   1b8a4:	mov	r7, #0
   1b8a8:	subs	r6, r6, #48	; 0x30
   1b8ac:	add	r3, r0, #1
   1b8b0:	sbc	r7, r7, #0
   1b8b4:	mov	lr, #10
   1b8b8:	b	1b8f0 <flatcc_json_parser_integer@@Base+0x94>
   1b8bc:	ldrb	ip, [r3], #1
   1b8c0:	sub	sl, ip, #48	; 0x30
   1b8c4:	cmp	sl, #9
   1b8c8:	bhi	1b914 <flatcc_json_parser_integer@@Base+0xb8>
   1b8cc:	subs	r4, r4, #48	; 0x30
   1b8d0:	sbc	r5, r5, #0
   1b8d4:	adds	r4, r4, ip
   1b8d8:	adc	r5, r5, #0
   1b8dc:	cmp	r5, r7
   1b8e0:	cmpeq	r4, r6
   1b8e4:	mov	r7, r5
   1b8e8:	mov	r6, r4
   1b8ec:	bcc	1b944 <flatcc_json_parser_integer@@Base+0xe8>
   1b8f0:	umull	r4, r5, r6, lr
   1b8f4:	cmp	r3, r2
   1b8f8:	mla	r5, lr, r7, r5
   1b8fc:	mov	r0, r3
   1b900:	bne	1b8bc <flatcc_json_parser_integer@@Base+0x60>
   1b904:	strd	r6, [r9]
   1b908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b90c:	mov	r6, #0
   1b910:	mov	r7, #0
   1b914:	cmp	r1, r0
   1b918:	beq	1b960 <flatcc_json_parser_integer@@Base+0x104>
   1b91c:	ldrb	r3, [r0]
   1b920:	and	r1, r3, #223	; 0xdf
   1b924:	cmp	r3, #46	; 0x2e
   1b928:	cmpne	r1, #69	; 0x45
   1b92c:	bne	1b904 <flatcc_json_parser_integer@@Base+0xa8>
   1b930:	mov	r1, r0
   1b934:	mov	r3, #12
   1b938:	mov	r0, r8
   1b93c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b940:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1b944:	mov	r1, r0
   1b948:	mov	r3, #8
   1b94c:	mov	r0, r8
   1b950:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b954:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1b958:	mov	r0, r1
   1b95c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b960:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b964:	mov	r6, #0
   1b968:	mov	r7, #0
   1b96c:	b	1b904 <flatcc_json_parser_integer@@Base+0xa8>

0001b970 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1b970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b974:	sub	sp, sp, #36	; 0x24
   1b978:	mov	r5, r2
   1b97c:	ldr	r8, [sp, #72]	; 0x48
   1b980:	mov	r7, r0
   1b984:	adds	sl, r8, #0
   1b988:	movne	sl, #1
   1b98c:	cmp	r1, r2
   1b990:	mov	r9, r3
   1b994:	beq	1b9a8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38>
   1b998:	ldrb	r3, [r1]
   1b99c:	cmp	r3, #34	; 0x22
   1b9a0:	addeq	r4, r1, #1
   1b9a4:	beq	1b9bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x4c>
   1b9a8:	mov	r3, #16
   1b9ac:	mov	r2, r5
   1b9b0:	mov	r0, r7
   1b9b4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1b9b8:	mov	r4, r0
   1b9bc:	mov	r2, r5
   1b9c0:	mov	r1, r4
   1b9c4:	mov	r0, r7
   1b9c8:	bl	19b20 <flatcc_json_parser_string_part@@Base>
   1b9cc:	cmp	r5, r0
   1b9d0:	mov	r6, r0
   1b9d4:	beq	1b9e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1b9d8:	ldrb	r3, [r0]
   1b9dc:	cmp	r3, #34	; 0x22
   1b9e0:	beq	1ba10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   1b9e4:	mov	ip, #0
   1b9e8:	cmp	r8, ip
   1b9ec:	moveq	r3, #31
   1b9f0:	movne	r3, #32
   1b9f4:	mov	r2, r5
   1b9f8:	mov	r1, r6
   1b9fc:	mov	r0, r7
   1ba00:	str	ip, [r9]
   1ba04:	add	sp, sp, #36	; 0x24
   1ba08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba0c:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1ba10:	sub	fp, r0, r4
   1ba14:	and	r2, fp, #3
   1ba18:	lsr	r3, fp, #2
   1ba1c:	cmp	r2, #2
   1ba20:	add	r3, r3, r3, lsl #1
   1ba24:	str	r3, [sp]
   1ba28:	beq	1bb0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   1ba2c:	cmp	r2, #3
   1ba30:	addeq	r3, r3, #2
   1ba34:	streq	r3, [sp]
   1ba38:	mov	r2, #1
   1ba3c:	mov	r1, r2
   1ba40:	mvn	r3, #0
   1ba44:	ldr	r0, [r7]
   1ba48:	bl	15bec <flatcc_builder_start_vector@@Base>
   1ba4c:	cmp	r0, #0
   1ba50:	bne	1bb1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   1ba54:	ldr	r1, [sp]
   1ba58:	ldr	r0, [r7]
   1ba5c:	bl	15398 <flatcc_builder_extend_vector@@Base>
   1ba60:	subs	r3, r0, #0
   1ba64:	str	r3, [sp, #4]
   1ba68:	beq	1bb1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   1ba6c:	cmp	sl, #1
   1ba70:	bne	1bb68 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   1ba74:	ldr	r3, [pc, #740]	; 1bd60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f0>
   1ba78:	add	r3, pc, r3
   1ba7c:	add	r3, r3, #1472	; 0x5c0
   1ba80:	add	r3, r3, #4
   1ba84:	ldr	r2, [sp]
   1ba88:	mov	ip, fp
   1ba8c:	cmp	r2, #0
   1ba90:	mvneq	r2, #0
   1ba94:	str	r2, [sp, #12]
   1ba98:	mov	sl, r4
   1ba9c:	ldr	r2, [sp, #4]
   1baa0:	str	r2, [sp, #8]
   1baa4:	cmp	ip, #0
   1baa8:	beq	1bc54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e4>
   1baac:	mov	lr, ip
   1bab0:	mov	r1, #0
   1bab4:	ldrb	r2, [sl, r1]
   1bab8:	ldrb	r0, [r3, r2]
   1babc:	add	r2, sp, #32
   1bac0:	add	r2, r2, r1
   1bac4:	cmp	r0, #63	; 0x3f
   1bac8:	strb	r0, [r2, #-4]
   1bacc:	bls	1bb4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1dc>
   1bad0:	cmp	r0, #65	; 0x41
   1bad4:	beq	1bb40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   1bad8:	cmp	r0, #66	; 0x42
   1badc:	movne	r2, r1
   1bae0:	beq	1bb7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   1bae4:	sub	r2, lr, r2
   1bae8:	cmp	r1, #2
   1baec:	beq	1bcb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x344>
   1baf0:	cmp	r1, #3
   1baf4:	beq	1bbf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x280>
   1baf8:	cmp	r1, #0
   1bafc:	beq	1bc44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   1bb00:	sub	r6, fp, ip
   1bb04:	add	r6, r4, r6
   1bb08:	b	1b9e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1bb0c:	ldr	r3, [sp]
   1bb10:	add	r3, r3, #1
   1bb14:	str	r3, [sp]
   1bb18:	b	1ba38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xc8>
   1bb1c:	mov	r3, #0
   1bb20:	str	r3, [r9]
   1bb24:	mov	r2, r5
   1bb28:	mov	r1, r6
   1bb2c:	mov	r0, r7
   1bb30:	mov	r3, #33	; 0x21
   1bb34:	add	sp, sp, #36	; 0x24
   1bb38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb3c:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1bb40:	add	sl, sl, #1
   1bb44:	sub	lr, lr, #1
   1bb48:	sub	r1, r1, #1
   1bb4c:	add	r1, r1, #1
   1bb50:	cmp	r1, #3
   1bb54:	bhi	1bce0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x370>
   1bb58:	cmp	r1, lr
   1bb5c:	bne	1bab4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x144>
   1bb60:	mov	r2, #0
   1bb64:	b	1bae8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   1bb68:	ldr	r3, [pc, #500]	; 1bd64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f4>
   1bb6c:	add	r3, pc, r3
   1bb70:	add	r3, r3, #1728	; 0x6c0
   1bb74:	add	r3, r3, #4
   1bb78:	b	1ba84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x114>
   1bb7c:	add	r2, r1, #1
   1bb80:	cmp	r2, #7
   1bb84:	movls	r0, #1
   1bb88:	movhi	r0, #0
   1bb8c:	cmp	lr, r2
   1bb90:	movls	r0, #0
   1bb94:	cmp	r0, #0
   1bb98:	beq	1bae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   1bb9c:	ldrb	r0, [sl, r2]
   1bba0:	add	sl, sl, r2
   1bba4:	ldrb	r0, [r3, r0]
   1bba8:	sub	r0, r0, #65	; 0x41
   1bbac:	cmp	r0, #1
   1bbb0:	bls	1bbcc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x25c>
   1bbb4:	b	1bae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   1bbb8:	ldrb	r0, [sl, #1]!
   1bbbc:	ldrb	r0, [r3, r0]
   1bbc0:	sub	r0, r0, #65	; 0x41
   1bbc4:	cmp	r0, #1
   1bbc8:	bhi	1bae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   1bbcc:	add	r2, r2, #1
   1bbd0:	cmp	lr, r2
   1bbd4:	movhi	r0, #1
   1bbd8:	movls	r0, #0
   1bbdc:	cmp	r2, #7
   1bbe0:	movhi	r0, #0
   1bbe4:	cmp	r0, #0
   1bbe8:	bne	1bbb8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x248>
   1bbec:	b	1bae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   1bbf0:	ldrb	r1, [sp, #30]
   1bbf4:	ldr	r0, [sp, #12]
   1bbf8:	lsl	r3, r1, #6
   1bbfc:	tst	r3, #192	; 0xc0
   1bc00:	movne	r3, #1
   1bc04:	moveq	r3, #0
   1bc08:	cmp	r0, #1
   1bc0c:	orreq	r3, r3, #1
   1bc10:	cmp	r3, #0
   1bc14:	bne	1bb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   1bc18:	ldrb	r3, [sp, #29]
   1bc1c:	ldrb	r0, [sp, #28]
   1bc20:	lsr	r1, r1, #2
   1bc24:	orr	r1, r1, r3, lsl #4
   1bc28:	lsr	r3, r3, #4
   1bc2c:	orr	r0, r3, r0, lsl #2
   1bc30:	ldr	r3, [sp, #8]
   1bc34:	add	r3, r3, #2
   1bc38:	strb	r1, [r3, #-1]
   1bc3c:	strb	r0, [r3, #-2]
   1bc40:	str	r3, [sp, #8]
   1bc44:	sub	r2, fp, r2
   1bc48:	cmp	fp, r2
   1bc4c:	addne	r6, r4, r2
   1bc50:	bne	1b9e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   1bc54:	ldmib	sp, {r2, r3}
   1bc58:	sub	r1, r3, r2
   1bc5c:	ldr	r3, [sp]
   1bc60:	cmp	r3, r1
   1bc64:	bls	1bc80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x310>
   1bc68:	ldr	r3, [sp]
   1bc6c:	ldr	r0, [r7]
   1bc70:	sub	r1, r3, r1
   1bc74:	bl	159c0 <flatcc_builder_truncate_vector@@Base>
   1bc78:	cmp	r0, #0
   1bc7c:	bne	1bb1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   1bc80:	ldr	r0, [r7]
   1bc84:	bl	16b88 <flatcc_builder_end_vector@@Base>
   1bc88:	cmp	r0, #0
   1bc8c:	str	r0, [r9]
   1bc90:	beq	1bb1c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   1bc94:	ldrb	r3, [r6]
   1bc98:	cmp	r3, #34	; 0x22
   1bc9c:	beq	1bd54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3e4>
   1bca0:	mov	r2, r5
   1bca4:	mov	r1, r6
   1bca8:	mov	r0, r7
   1bcac:	mov	r3, #20
   1bcb0:	b	1ba04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   1bcb4:	ldrb	r3, [sp, #29]
   1bcb8:	lsl	r1, r3, #4
   1bcbc:	tst	r1, #240	; 0xf0
   1bcc0:	bne	1bb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   1bcc4:	ldrb	r1, [sp, #28]
   1bcc8:	lsr	r3, r3, #4
   1bccc:	orr	r3, r3, r1, lsl #2
   1bcd0:	ldr	r1, [sp, #8]
   1bcd4:	strb	r3, [r1], #1
   1bcd8:	str	r1, [sp, #8]
   1bcdc:	b	1bc44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   1bce0:	ldr	r2, [sp, #12]
   1bce4:	cmp	r2, #2
   1bce8:	bls	1bb00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   1bcec:	ldrb	r1, [sp, #30]
   1bcf0:	ldrb	ip, [sp, #29]
   1bcf4:	subs	r2, r2, #3
   1bcf8:	str	r1, [sp, #16]
   1bcfc:	ldrb	r1, [sp, #28]
   1bd00:	str	r2, [sp, #12]
   1bd04:	lsr	r0, ip, #4
   1bd08:	str	r1, [sp, #20]
   1bd0c:	ldr	r2, [sp, #20]
   1bd10:	ldrb	r1, [sp, #31]
   1bd14:	add	sl, sl, #4
   1bd18:	orr	r0, r0, r2, lsl #2
   1bd1c:	ldr	r2, [sp, #16]
   1bd20:	orr	r1, r1, r2, lsl #6
   1bd24:	lsr	r2, r2, #2
   1bd28:	orr	r2, r2, ip, lsl #4
   1bd2c:	sub	ip, lr, #4
   1bd30:	ldr	lr, [sp, #8]
   1bd34:	strb	r2, [lr, #1]
   1bd38:	add	r2, lr, #3
   1bd3c:	strb	r0, [lr]
   1bd40:	strb	r1, [lr, #2]
   1bd44:	str	r2, [sp, #8]
   1bd48:	bne	1baa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   1bd4c:	mov	r2, ip
   1bd50:	b	1bc44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   1bd54:	add	r0, r6, #1
   1bd58:	add	sp, sp, #36	; 0x24
   1bd5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd60:	andeq	r2, r0, r0, ror r2
   1bd64:	andeq	r2, r0, ip, ror r1

0001bd68 <flatcc_json_parser_build_string@@Base>:
   1bd68:	cmp	r1, r2
   1bd6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bd70:	mov	r6, r2
   1bd74:	sub	sp, sp, #8
   1bd78:	mov	r5, r0
   1bd7c:	mov	r8, r3
   1bd80:	beq	1bd94 <flatcc_json_parser_build_string@@Base+0x2c>
   1bd84:	ldrb	r3, [r1]
   1bd88:	cmp	r3, #34	; 0x22
   1bd8c:	addeq	r7, r1, #1
   1bd90:	beq	1bda8 <flatcc_json_parser_build_string@@Base+0x40>
   1bd94:	mov	r3, #16
   1bd98:	mov	r2, r6
   1bd9c:	mov	r0, r5
   1bda0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1bda4:	mov	r7, r0
   1bda8:	mov	r2, r6
   1bdac:	mov	r1, r7
   1bdb0:	mov	r0, r5
   1bdb4:	bl	19b20 <flatcc_json_parser_string_part@@Base>
   1bdb8:	cmp	r6, r0
   1bdbc:	mov	r4, r0
   1bdc0:	beq	1bdd0 <flatcc_json_parser_build_string@@Base+0x68>
   1bdc4:	ldrb	r3, [r0]
   1bdc8:	cmp	r3, #34	; 0x22
   1bdcc:	beq	1bec8 <flatcc_json_parser_build_string@@Base+0x160>
   1bdd0:	ldr	r0, [r5]
   1bdd4:	bl	15ccc <flatcc_builder_start_string@@Base>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1bdf4 <flatcc_json_parser_build_string@@Base+0x8c>
   1bde0:	mov	r3, #0
   1bde4:	str	r3, [r8]
   1bde8:	mov	r0, r4
   1bdec:	add	sp, sp, #8
   1bdf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bdf4:	sub	r2, r4, r7
   1bdf8:	mov	r1, r7
   1bdfc:	ldr	r0, [r5]
   1be00:	bl	1589c <flatcc_builder_append_string@@Base>
   1be04:	cmp	r0, #0
   1be08:	beq	1bde0 <flatcc_json_parser_build_string@@Base+0x78>
   1be0c:	cmp	r6, r4
   1be10:	beq	1bf08 <flatcc_json_parser_build_string@@Base+0x1a0>
   1be14:	ldrb	r3, [r4]
   1be18:	cmp	r3, #34	; 0x22
   1be1c:	beq	1bef0 <flatcc_json_parser_build_string@@Base+0x188>
   1be20:	add	sl, sp, #4
   1be24:	add	r9, sp, #5
   1be28:	b	1be44 <flatcc_json_parser_build_string@@Base+0xdc>
   1be2c:	bl	1589c <flatcc_builder_append_string@@Base>
   1be30:	cmp	r0, #0
   1be34:	beq	1bde0 <flatcc_json_parser_build_string@@Base+0x78>
   1be38:	ldrb	r3, [r4]
   1be3c:	cmp	r3, #34	; 0x22
   1be40:	beq	1bef0 <flatcc_json_parser_build_string@@Base+0x188>
   1be44:	mov	r1, r4
   1be48:	mov	r3, sl
   1be4c:	mov	r2, r6
   1be50:	mov	r0, r5
   1be54:	bl	1a338 <flatcc_json_parser_string_escape@@Base>
   1be58:	ldrb	r2, [sp, #4]
   1be5c:	mov	r1, r9
   1be60:	mov	r7, r0
   1be64:	ldr	r0, [r5]
   1be68:	bl	1589c <flatcc_builder_append_string@@Base>
   1be6c:	mov	r2, r6
   1be70:	mov	r1, r7
   1be74:	cmp	r0, #0
   1be78:	mov	r0, r5
   1be7c:	beq	1bf00 <flatcc_json_parser_build_string@@Base+0x198>
   1be80:	bl	19b20 <flatcc_json_parser_string_part@@Base>
   1be84:	mov	r1, r7
   1be88:	mov	r4, r0
   1be8c:	cmp	r6, r4
   1be90:	sub	r2, r0, r7
   1be94:	ldr	r0, [r5]
   1be98:	bne	1be2c <flatcc_json_parser_build_string@@Base+0xc4>
   1be9c:	bl	17750 <flatcc_builder_end_string@@Base>
   1bea0:	str	r0, [r8]
   1bea4:	mov	r1, r4
   1bea8:	mov	r2, r6
   1beac:	mov	r0, r5
   1beb0:	mov	r3, #20
   1beb4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1beb8:	mov	r4, r0
   1bebc:	mov	r0, r4
   1bec0:	add	sp, sp, #8
   1bec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bec8:	sub	r2, r0, r7
   1becc:	mov	r1, r7
   1bed0:	ldr	r0, [r5]
   1bed4:	bl	175ec <flatcc_builder_create_string@@Base>
   1bed8:	str	r0, [r8]
   1bedc:	ldrb	r3, [r4]
   1bee0:	cmp	r3, #34	; 0x22
   1bee4:	addeq	r4, r4, #1
   1bee8:	bne	1bea4 <flatcc_json_parser_build_string@@Base+0x13c>
   1beec:	b	1bde8 <flatcc_json_parser_build_string@@Base+0x80>
   1bef0:	ldr	r0, [r5]
   1bef4:	bl	17750 <flatcc_builder_end_string@@Base>
   1bef8:	str	r0, [r8]
   1befc:	b	1bedc <flatcc_json_parser_build_string@@Base+0x174>
   1bf00:	mov	r4, r7
   1bf04:	b	1bde0 <flatcc_json_parser_build_string@@Base+0x78>
   1bf08:	ldr	r0, [r5]
   1bf0c:	b	1be9c <flatcc_json_parser_build_string@@Base+0x134>

0001bf10 <flatcc_json_parser_prepare_unions@@Base>:
   1bf10:	push	{r4, r5, r6, r7, r8, lr}
   1bf14:	mov	r5, r0
   1bf18:	add	r0, r3, r3, lsl #1
   1bf1c:	mov	r6, r1
   1bf20:	lsl	r1, r0, #3
   1bf24:	add	r1, r1, #8
   1bf28:	ldr	r0, [r5]
   1bf2c:	ldr	r7, [sp, #24]
   1bf30:	mov	r4, r3
   1bf34:	mov	r8, r2
   1bf38:	bl	1496c <flatcc_builder_enter_user_frame@@Base>
   1bf3c:	cmp	r0, #0
   1bf40:	str	r0, [r7]
   1bf44:	beq	1bf60 <flatcc_json_parser_prepare_unions@@Base+0x50>
   1bf48:	mov	r1, r0
   1bf4c:	ldr	r0, [r5]
   1bf50:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1bf54:	str	r4, [r0]
   1bf58:	mov	r0, r6
   1bf5c:	pop	{r4, r5, r6, r7, r8, pc}
   1bf60:	mov	r2, r8
   1bf64:	mov	r1, r6
   1bf68:	mov	r0, r5
   1bf6c:	mov	r3, #33	; 0x21
   1bf70:	pop	{r4, r5, r6, r7, r8, lr}
   1bf74:	b	19af4 <flatcc_json_parser_set_error@@Base>

0001bf78 <flatcc_json_parser_finalize_unions@@Base>:
   1bf78:	push	{r4, r5, r6, r7, r8, lr}
   1bf7c:	mov	r4, r0
   1bf80:	mov	r6, r1
   1bf84:	ldr	r0, [r0]
   1bf88:	mov	r1, r3
   1bf8c:	mov	r5, r3
   1bf90:	mov	r7, r2
   1bf94:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1bf98:	ldr	r3, [r0, #4]
   1bf9c:	cmp	r3, #0
   1bfa0:	beq	1bfbc <flatcc_json_parser_finalize_unions@@Base+0x44>
   1bfa4:	mov	r1, r6
   1bfa8:	mov	r2, r7
   1bfac:	mov	r3, #27
   1bfb0:	mov	r0, r4
   1bfb4:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1bfb8:	mov	r6, r0
   1bfbc:	mov	r1, r5
   1bfc0:	ldr	r0, [r4]
   1bfc4:	bl	14a60 <flatcc_builder_exit_user_frame_at@@Base>
   1bfc8:	mov	r0, r6
   1bfcc:	pop	{r4, r5, r6, r7, r8, pc}

0001bfd0 <flatcc_json_parser_union@@Base>:
   1bfd0:	push	{r4, r5, r6, r7, r8, lr}
   1bfd4:	sub	sp, sp, #16
   1bfd8:	mov	r5, r0
   1bfdc:	mov	r8, r1
   1bfe0:	ldr	r0, [r0]
   1bfe4:	ldr	r1, [sp, #44]	; 0x2c
   1bfe8:	mov	r4, r3
   1bfec:	mov	r6, r2
   1bff0:	ldrh	r7, [sp, #40]	; 0x28
   1bff4:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1bff8:	add	r4, r4, r4, lsl #1
   1bffc:	add	r4, r0, r4, lsl #3
   1c000:	ldr	r3, [r4, #8]
   1c004:	cmp	r3, #0
   1c008:	beq	1c030 <flatcc_json_parser_union@@Base+0x60>
   1c00c:	mov	r2, r6
   1c010:	mov	r1, r8
   1c014:	mov	r0, r5
   1c018:	mov	r3, #28
   1c01c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c020:	mov	r4, r0
   1c024:	mov	r0, r4
   1c028:	add	sp, sp, #16
   1c02c:	pop	{r4, r5, r6, r7, r8, pc}
   1c030:	ldrb	r3, [r4, #20]
   1c034:	cmp	r3, #0
   1c038:	beq	1c0dc <flatcc_json_parser_union@@Base+0x10c>
   1c03c:	ldrb	r3, [r4, #21]
   1c040:	cmp	r3, #0
   1c044:	strb	r3, [sp, #8]
   1c048:	beq	1c0b8 <flatcc_json_parser_union@@Base+0xe8>
   1c04c:	ldr	r2, [r0, #4]
   1c050:	mov	r1, r8
   1c054:	sub	r2, r2, #1
   1c058:	str	r2, [r0, #4]
   1c05c:	add	r0, sp, #12
   1c060:	str	r0, [sp]
   1c064:	mov	r2, r6
   1c068:	mov	r0, r5
   1c06c:	ldr	ip, [sp, #48]	; 0x30
   1c070:	blx	ip
   1c074:	add	r3, sp, #8
   1c078:	cmp	r6, r0
   1c07c:	mov	r4, r0
   1c080:	beq	1c024 <flatcc_json_parser_union@@Base+0x54>
   1c084:	mov	r1, r7
   1c088:	ldm	r3, {r2, r3}
   1c08c:	ldr	r0, [r5]
   1c090:	bl	17c38 <flatcc_builder_table_add_union@@Base>
   1c094:	cmp	r0, #0
   1c098:	beq	1c024 <flatcc_json_parser_union@@Base+0x54>
   1c09c:	mov	r1, r4
   1c0a0:	mov	r2, r6
   1c0a4:	mov	r0, r5
   1c0a8:	mov	r3, #28
   1c0ac:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c0b0:	mov	r4, r0
   1c0b4:	b	1c024 <flatcc_json_parser_union@@Base+0x54>
   1c0b8:	mov	r2, r6
   1c0bc:	mov	r1, r8
   1c0c0:	mov	r0, r5
   1c0c4:	mov	r3, #25
   1c0c8:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c0cc:	mov	r4, r0
   1c0d0:	mov	r0, r4
   1c0d4:	add	sp, sp, #16
   1c0d8:	pop	{r4, r5, r6, r7, r8, pc}
   1c0dc:	ldr	r3, [r0, #4]
   1c0e0:	ldr	lr, [r5, #16]
   1c0e4:	ldr	ip, [r5, #4]
   1c0e8:	add	r3, r3, #1
   1c0ec:	str	r3, [r0, #4]
   1c0f0:	mov	r2, r6
   1c0f4:	str	lr, [r4, #16]
   1c0f8:	str	ip, [r4, #12]
   1c0fc:	str	r8, [r4, #8]
   1c100:	mov	r1, r8
   1c104:	mov	r0, r5
   1c108:	bl	1ac38 <flatcc_json_parser_generic_json@@Base>
   1c10c:	mov	r4, r0
   1c110:	b	1c024 <flatcc_json_parser_union@@Base+0x54>

0001c114 <flatcc_json_parser_union_type@@Base>:
   1c114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c118:	sub	sp, sp, #36	; 0x24
   1c11c:	mov	r4, r3
   1c120:	ldrh	r3, [sp, #72]	; 0x48
   1c124:	mov	r5, r0
   1c128:	mov	sl, r1
   1c12c:	ldr	r0, [r0]
   1c130:	ldr	r1, [sp, #76]	; 0x4c
   1c134:	str	r3, [sp, #12]
   1c138:	mov	r7, r2
   1c13c:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c140:	add	r4, r4, r4, lsl #1
   1c144:	lsl	r4, r4, #3
   1c148:	add	fp, r0, #8
   1c14c:	add	r6, fp, r4
   1c150:	ldrb	r3, [r6, #12]
   1c154:	cmp	r3, #0
   1c158:	bne	1c264 <flatcc_json_parser_union_type@@Base+0x150>
   1c15c:	mov	r9, r0
   1c160:	mov	r1, #0
   1c164:	mov	r0, #0
   1c168:	mov	r2, #1
   1c16c:	cmp	sl, r7
   1c170:	strb	r2, [r6, #12]
   1c174:	str	r3, [sp, #20]
   1c178:	strd	r0, [sp, #24]
   1c17c:	strb	r3, [r6, #13]
   1c180:	beq	1c288 <flatcc_json_parser_union_type@@Base+0x174>
   1c184:	add	r3, sp, #24
   1c188:	str	r3, [sp]
   1c18c:	mov	r2, r7
   1c190:	add	r3, sp, #20
   1c194:	mov	r1, sl
   1c198:	mov	r0, r5
   1c19c:	bl	1b85c <flatcc_json_parser_integer@@Base>
   1c1a0:	cmp	sl, r0
   1c1a4:	mov	r8, r0
   1c1a8:	beq	1c28c <flatcc_json_parser_union_type@@Base+0x178>
   1c1ac:	ldr	r3, [sp, #20]
   1c1b0:	cmp	r3, #0
   1c1b4:	bne	1c2cc <flatcc_json_parser_union_type@@Base+0x1b8>
   1c1b8:	ldrd	r2, [sp, #24]
   1c1bc:	cmp	r3, #0
   1c1c0:	cmpeq	r2, #255	; 0xff
   1c1c4:	strbls	r2, [r6, #13]
   1c1c8:	bhi	1c308 <flatcc_json_parser_union_type@@Base+0x1f4>
   1c1cc:	ldr	r1, [fp, r4]
   1c1d0:	cmp	r1, #0
   1c1d4:	beq	1c2f0 <flatcc_json_parser_union_type@@Base+0x1dc>
   1c1d8:	ldr	r3, [r9, #4]
   1c1dc:	cmp	r3, #0
   1c1e0:	beq	1c324 <flatcc_json_parser_union_type@@Base+0x210>
   1c1e4:	ldr	r0, [r6, #8]
   1c1e8:	ldr	r2, [r6, #4]
   1c1ec:	sub	r3, r3, #1
   1c1f0:	str	r3, [r9, #4]
   1c1f4:	ldr	sl, [r5, #16]
   1c1f8:	ldr	r9, [r5, #4]
   1c1fc:	str	r0, [r5, #16]
   1c200:	str	r2, [r5, #4]
   1c204:	ldrb	ip, [r6, #13]
   1c208:	add	r4, sp, #32
   1c20c:	add	r2, sp, #28
   1c210:	str	r2, [sp]
   1c214:	mov	r3, ip
   1c218:	strb	ip, [r4, #-8]!
   1c21c:	mov	r2, r7
   1c220:	mov	r0, r5
   1c224:	ldr	ip, [sp, #84]	; 0x54
   1c228:	blx	ip
   1c22c:	cmp	r7, r0
   1c230:	moveq	r8, r7
   1c234:	beq	1c258 <flatcc_json_parser_union_type@@Base+0x144>
   1c238:	ldr	r1, [sp, #12]
   1c23c:	ldm	r4, {r2, r3}
   1c240:	ldr	r0, [r5]
   1c244:	bl	17c38 <flatcc_builder_table_add_union@@Base>
   1c248:	cmp	r0, #0
   1c24c:	streq	sl, [r5, #16]
   1c250:	streq	r9, [r5, #4]
   1c254:	bne	1c2b0 <flatcc_json_parser_union_type@@Base+0x19c>
   1c258:	mov	r0, r8
   1c25c:	add	sp, sp, #36	; 0x24
   1c260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c264:	mov	r2, r7
   1c268:	mov	r1, sl
   1c26c:	mov	r0, r5
   1c270:	mov	r3, #28
   1c274:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c278:	mov	r8, r0
   1c27c:	mov	r0, r8
   1c280:	add	sp, sp, #36	; 0x24
   1c284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c288:	mov	r8, r7
   1c28c:	add	r3, r6, #13
   1c290:	mov	r1, r8
   1c294:	str	r3, [sp]
   1c298:	mov	r2, r7
   1c29c:	ldr	r3, [sp, #80]	; 0x50
   1c2a0:	mov	r0, r5
   1c2a4:	bl	19d0c <flatcc_json_parser_space_ext@@Base+0x124>
   1c2a8:	mov	r8, r0
   1c2ac:	b	1c1cc <flatcc_json_parser_union_type@@Base+0xb8>
   1c2b0:	mov	r1, r8
   1c2b4:	mov	r2, r7
   1c2b8:	mov	r0, r5
   1c2bc:	mov	r3, #28
   1c2c0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c2c4:	mov	r8, r0
   1c2c8:	b	1c258 <flatcc_json_parser_union_type@@Base+0x144>
   1c2cc:	mov	r1, r0
   1c2d0:	mov	r3, #8
   1c2d4:	mov	r2, r7
   1c2d8:	mov	r0, r5
   1c2dc:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c2e0:	mov	r8, r0
   1c2e4:	cmp	sl, r8
   1c2e8:	bne	1c1cc <flatcc_json_parser_union_type@@Base+0xb8>
   1c2ec:	b	1c28c <flatcc_json_parser_union_type@@Base+0x178>
   1c2f0:	ldrb	r2, [r6, #13]
   1c2f4:	ldr	r3, [r9, #4]
   1c2f8:	cmp	r2, #0
   1c2fc:	addne	r3, r3, #1
   1c300:	str	r3, [r9, #4]
   1c304:	b	1c258 <flatcc_json_parser_union_type@@Base+0x144>
   1c308:	mov	r1, r0
   1c30c:	mov	r3, #7
   1c310:	mov	r2, r7
   1c314:	mov	r0, r5
   1c318:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c31c:	mov	r8, r0
   1c320:	b	1c2e4 <flatcc_json_parser_union_type@@Base+0x1d0>
   1c324:	ldr	r3, [pc, #32]	; 1c34c <flatcc_json_parser_union_type@@Base+0x238>
   1c328:	ldr	r1, [pc, #32]	; 1c350 <flatcc_json_parser_union_type@@Base+0x23c>
   1c32c:	add	r3, pc, r3
   1c330:	ldr	r0, [pc, #28]	; 1c354 <flatcc_json_parser_union_type@@Base+0x240>
   1c334:	add	r3, r3, #1984	; 0x7c0
   1c338:	ldr	r2, [pc, #24]	; 1c358 <flatcc_json_parser_union_type@@Base+0x244>
   1c33c:	add	r3, r3, #4
   1c340:	add	r1, pc, r1
   1c344:	add	r0, pc, r0
   1c348:	bl	124d4 <__assert_fail@plt>
   1c34c:			; <UNDEFINED> instruction: 0x000019bc
   1c350:	strdeq	r2, [r0], -r4
   1c354:	andeq	r2, r0, r4, asr r6
   1c358:	andeq	r0, r0, r5, asr #7

0001c35c <flatcc_json_parser_union_vector@@Base>:
   1c35c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c360:	mov	r5, r0
   1c364:	mov	r6, r1
   1c368:	ldr	r0, [r0]
   1c36c:	ldr	r1, [sp, #36]	; 0x24
   1c370:	mov	r4, r3
   1c374:	mov	r9, r2
   1c378:	ldrh	r7, [sp, #32]
   1c37c:	ldr	r8, [sp, #40]	; 0x28
   1c380:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c384:	add	r3, r4, r4, lsl #1
   1c388:	lsl	r3, r3, #3
   1c38c:	add	ip, r0, #8
   1c390:	add	r1, ip, r3
   1c394:	ldr	r2, [ip, r3]
   1c398:	cmp	r2, #0
   1c39c:	beq	1c3b8 <flatcc_json_parser_union_vector@@Base+0x5c>
   1c3a0:	mov	r2, r9
   1c3a4:	mov	r1, r6
   1c3a8:	mov	r0, r5
   1c3ac:	mov	r3, #28
   1c3b0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c3b4:	b	19af4 <flatcc_json_parser_set_error@@Base>
   1c3b8:	ldrb	r2, [r1, #12]
   1c3bc:	cmp	r2, #0
   1c3c0:	beq	1c3f8 <flatcc_json_parser_union_vector@@Base+0x9c>
   1c3c4:	ldr	r3, [r0, #4]
   1c3c8:	mov	r2, r9
   1c3cc:	sub	r3, r3, #1
   1c3d0:	str	r3, [r0, #4]
   1c3d4:	ldr	r3, [r1, #20]
   1c3d8:	str	r8, [sp, #40]	; 0x28
   1c3dc:	str	r7, [sp, #36]	; 0x24
   1c3e0:	ldr	ip, [r1, #16]
   1c3e4:	mov	r0, r5
   1c3e8:	mov	r1, r6
   1c3ec:	str	ip, [sp, #32]
   1c3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c3f4:	b	19f44 <flatcc_json_parser_space_ext@@Base+0x35c>
   1c3f8:	ldr	lr, [r0, #4]
   1c3fc:	ldr	r4, [r5, #16]
   1c400:	add	lr, lr, #1
   1c404:	str	lr, [r0, #4]
   1c408:	ldr	r0, [r5, #4]
   1c40c:	mov	r2, r9
   1c410:	stmib	r1, {r0, r4}
   1c414:	mov	r1, r6
   1c418:	str	r6, [ip, r3]
   1c41c:	mov	r0, r5
   1c420:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c424:	b	1ac38 <flatcc_json_parser_generic_json@@Base>

0001c428 <flatcc_json_parser_union_type_vector@@Base>:
   1c428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c42c:	sub	sp, sp, #60	; 0x3c
   1c430:	mov	r7, r3
   1c434:	ldrh	r3, [sp, #96]	; 0x60
   1c438:	mov	r6, r0
   1c43c:	mov	r5, r1
   1c440:	ldr	r0, [r0]
   1c444:	ldr	r1, [sp, #100]	; 0x64
   1c448:	str	r3, [sp, #28]
   1c44c:	mov	r4, r2
   1c450:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c454:	add	r7, r7, r7, lsl #1
   1c458:	lsl	r3, r7, #3
   1c45c:	str	r3, [sp, #32]
   1c460:	add	r0, r0, #8
   1c464:	add	r3, r0, r3
   1c468:	str	r3, [sp, #24]
   1c46c:	ldrb	r3, [r3, #12]
   1c470:	cmp	r3, #0
   1c474:	bne	1c540 <flatcc_json_parser_union_type_vector@@Base+0x118>
   1c478:	ldr	r3, [sp, #24]
   1c47c:	mov	r2, #1
   1c480:	mov	r1, r2
   1c484:	strb	r2, [r3, #12]
   1c488:	mvn	r3, #0
   1c48c:	ldr	r0, [r6]
   1c490:	bl	15bec <flatcc_builder_start_vector@@Base>
   1c494:	cmp	r0, #0
   1c498:	bne	1c524 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   1c49c:	cmp	r5, r4
   1c4a0:	beq	1c4b0 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1c4a4:	ldrb	r3, [r5]
   1c4a8:	cmp	r3, #91	; 0x5b
   1c4ac:	beq	1c55c <flatcc_json_parser_union_type_vector@@Base+0x134>
   1c4b0:	mov	r1, r5
   1c4b4:	mov	r3, #22
   1c4b8:	mov	r2, r4
   1c4bc:	mov	r0, r6
   1c4c0:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c4c4:	mov	r5, r0
   1c4c8:	ldr	r0, [r6]
   1c4cc:	bl	16c84 <flatcc_builder_vector_count@@Base>
   1c4d0:	ldr	r3, [sp, #24]
   1c4d4:	mov	r1, r0
   1c4d8:	str	r0, [r3, #16]
   1c4dc:	mov	r7, r0
   1c4e0:	ldr	r0, [r6]
   1c4e4:	bl	1496c <flatcc_builder_enter_user_frame@@Base>
   1c4e8:	mov	r1, r0
   1c4ec:	mov	r8, r0
   1c4f0:	ldr	r0, [r6]
   1c4f4:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c4f8:	mov	r9, r0
   1c4fc:	ldr	r0, [r6]
   1c500:	bl	16c90 <flatcc_builder_vector_edit@@Base>
   1c504:	mov	r2, r7
   1c508:	mov	r1, r0
   1c50c:	mov	r0, r9
   1c510:	bl	1242c <memcpy@plt>
   1c514:	ldr	r0, [r6]
   1c518:	bl	16b88 <flatcc_builder_end_vector@@Base>
   1c51c:	subs	r9, r0, #0
   1c520:	bne	1c85c <flatcc_json_parser_union_type_vector@@Base+0x434>
   1c524:	mov	r2, r4
   1c528:	mov	r1, r5
   1c52c:	mov	r0, r6
   1c530:	mov	r3, #33	; 0x21
   1c534:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c538:	add	sp, sp, #60	; 0x3c
   1c53c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c540:	mov	r2, r4
   1c544:	mov	r1, r5
   1c548:	mov	r0, r6
   1c54c:	mov	r3, #28
   1c550:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c554:	add	sp, sp, #60	; 0x3c
   1c558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c55c:	add	r1, r5, #1
   1c560:	sub	r3, r4, r1
   1c564:	cmp	r3, #1
   1c568:	ble	1c580 <flatcc_json_parser_union_type_vector@@Base+0x158>
   1c56c:	ldrb	r3, [r5, #1]
   1c570:	cmp	r3, #32
   1c574:	movhi	r5, r1
   1c578:	bhi	1c590 <flatcc_json_parser_union_type_vector@@Base+0x168>
   1c57c:	beq	1c934 <flatcc_json_parser_union_type_vector@@Base+0x50c>
   1c580:	mov	r2, r4
   1c584:	mov	r0, r6
   1c588:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1c58c:	mov	r5, r0
   1c590:	cmp	r4, r5
   1c594:	beq	1c5a4 <flatcc_json_parser_union_type_vector@@Base+0x17c>
   1c598:	ldrb	r3, [r5]
   1c59c:	cmp	r3, #93	; 0x5d
   1c5a0:	beq	1c7c8 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   1c5a4:	add	fp, sp, #44	; 0x2c
   1c5a8:	str	fp, [sp, #20]
   1c5ac:	ldr	fp, [sp, #112]	; 0x70
   1c5b0:	add	r3, sp, #43	; 0x2b
   1c5b4:	mov	r9, #1
   1c5b8:	mov	r7, #0
   1c5bc:	str	r3, [sp, #36]	; 0x24
   1c5c0:	add	r3, sp, #48	; 0x30
   1c5c4:	str	r3, [sp, #16]
   1c5c8:	mov	r1, r9
   1c5cc:	ldr	r0, [r6]
   1c5d0:	bl	15398 <flatcc_builder_extend_vector@@Base>
   1c5d4:	subs	r8, r0, #0
   1c5d8:	beq	1c524 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   1c5dc:	mov	r2, #0
   1c5e0:	mov	r3, #0
   1c5e4:	cmp	r4, r5
   1c5e8:	strd	r2, [sp, #48]	; 0x30
   1c5ec:	str	r7, [sp, #44]	; 0x2c
   1c5f0:	strb	r7, [sp, #43]	; 0x2b
   1c5f4:	beq	1c72c <flatcc_json_parser_union_type_vector@@Base+0x304>
   1c5f8:	ldr	r3, [sp, #16]
   1c5fc:	mov	r2, r4
   1c600:	str	r3, [sp]
   1c604:	mov	r1, r5
   1c608:	ldr	r3, [sp, #20]
   1c60c:	mov	r0, r6
   1c610:	bl	1b85c <flatcc_json_parser_integer@@Base>
   1c614:	cmp	r0, r5
   1c618:	mov	sl, r0
   1c61c:	beq	1c72c <flatcc_json_parser_union_type_vector@@Base+0x304>
   1c620:	ldr	r3, [sp, #44]	; 0x2c
   1c624:	cmp	r3, #0
   1c628:	bne	1c70c <flatcc_json_parser_union_type_vector@@Base+0x2e4>
   1c62c:	ldrd	r0, [sp, #48]	; 0x30
   1c630:	cmp	r1, #0
   1c634:	cmpeq	r0, #255	; 0xff
   1c638:	uxtbls	r0, r0
   1c63c:	strbls	r0, [sp, #43]	; 0x2b
   1c640:	bhi	1c800 <flatcc_json_parser_union_type_vector@@Base+0x3d8>
   1c644:	blx	fp
   1c648:	cmp	r0, #0
   1c64c:	ldrbne	r2, [sp, #43]	; 0x2b
   1c650:	bne	1c668 <flatcc_json_parser_union_type_vector@@Base+0x240>
   1c654:	ldr	r3, [r6, #8]
   1c658:	tst	r3, #1
   1c65c:	beq	1c844 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   1c660:	mov	r2, r7
   1c664:	strb	r0, [sp, #43]	; 0x2b
   1c668:	sub	r3, r4, sl
   1c66c:	cmp	r3, #1
   1c670:	strb	r2, [r8]
   1c674:	ble	1c688 <flatcc_json_parser_union_type_vector@@Base+0x260>
   1c678:	ldrb	r3, [sl]
   1c67c:	cmp	r3, #32
   1c680:	bhi	1c69c <flatcc_json_parser_union_type_vector@@Base+0x274>
   1c684:	beq	1c760 <flatcc_json_parser_union_type_vector@@Base+0x338>
   1c688:	mov	r1, sl
   1c68c:	mov	r2, r4
   1c690:	mov	r0, r6
   1c694:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1c698:	mov	sl, r0
   1c69c:	cmp	r4, sl
   1c6a0:	beq	1c778 <flatcc_json_parser_union_type_vector@@Base+0x350>
   1c6a4:	ldrb	r3, [sl]
   1c6a8:	cmp	r3, #44	; 0x2c
   1c6ac:	beq	1c780 <flatcc_json_parser_union_type_vector@@Base+0x358>
   1c6b0:	cmp	r3, #93	; 0x5d
   1c6b4:	beq	1c6d4 <flatcc_json_parser_union_type_vector@@Base+0x2ac>
   1c6b8:	mov	r1, sl
   1c6bc:	mov	r3, #9
   1c6c0:	mov	r2, r4
   1c6c4:	mov	r0, r6
   1c6c8:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c6cc:	mov	r5, r0
   1c6d0:	b	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c6d4:	add	r5, sl, #1
   1c6d8:	sub	r3, r4, r5
   1c6dc:	cmp	r3, #1
   1c6e0:	ble	1c6f4 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   1c6e4:	ldrb	r3, [sl, #1]
   1c6e8:	cmp	r3, #32
   1c6ec:	bhi	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c6f0:	beq	1c81c <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   1c6f4:	mov	r1, r5
   1c6f8:	mov	r2, r4
   1c6fc:	mov	r0, r6
   1c700:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1c704:	mov	r5, r0
   1c708:	b	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c70c:	mov	r1, r0
   1c710:	mov	r3, #8
   1c714:	mov	r2, r4
   1c718:	mov	r0, r6
   1c71c:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c720:	mov	sl, r0
   1c724:	cmp	sl, r5
   1c728:	bne	1c758 <flatcc_json_parser_union_type_vector@@Base+0x330>
   1c72c:	ldr	r3, [sp, #36]	; 0x24
   1c730:	mov	r2, r4
   1c734:	str	r3, [sp]
   1c738:	mov	r1, r5
   1c73c:	ldr	r3, [sp, #104]	; 0x68
   1c740:	mov	r0, r6
   1c744:	bl	19d0c <flatcc_json_parser_space_ext@@Base+0x124>
   1c748:	cmp	r4, r0
   1c74c:	cmpne	r0, r5
   1c750:	mov	sl, r0
   1c754:	beq	1c92c <flatcc_json_parser_union_type_vector@@Base+0x504>
   1c758:	ldrb	r0, [sp, #43]	; 0x2b
   1c75c:	b	1c644 <flatcc_json_parser_union_type_vector@@Base+0x21c>
   1c760:	ldrb	r3, [sl, #1]
   1c764:	cmp	r3, #32
   1c768:	addhi	sl, sl, #1
   1c76c:	bls	1c688 <flatcc_json_parser_union_type_vector@@Base+0x260>
   1c770:	cmp	r4, sl
   1c774:	bne	1c6a4 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   1c778:	mov	r5, r4
   1c77c:	b	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c780:	add	r5, sl, #1
   1c784:	sub	r3, r4, r5
   1c788:	cmp	r3, #1
   1c78c:	ble	1c7a0 <flatcc_json_parser_union_type_vector@@Base+0x378>
   1c790:	ldrb	r3, [sl, #1]
   1c794:	cmp	r3, #32
   1c798:	bhi	1c7b4 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   1c79c:	beq	1c830 <flatcc_json_parser_union_type_vector@@Base+0x408>
   1c7a0:	mov	r1, r5
   1c7a4:	mov	r2, r4
   1c7a8:	mov	r0, r6
   1c7ac:	bl	19be8 <flatcc_json_parser_space_ext@@Base>
   1c7b0:	mov	r5, r0
   1c7b4:	cmp	r4, r5
   1c7b8:	beq	1c910 <flatcc_json_parser_union_type_vector@@Base+0x4e8>
   1c7bc:	ldrb	r3, [r5]
   1c7c0:	cmp	r3, #93	; 0x5d
   1c7c4:	bne	1c5c8 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   1c7c8:	add	r1, r5, #1
   1c7cc:	sub	r3, r4, r1
   1c7d0:	cmp	r3, #1
   1c7d4:	ble	1c6f8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   1c7d8:	ldrb	r3, [r5, #1]
   1c7dc:	cmp	r3, #32
   1c7e0:	movhi	r5, r1
   1c7e4:	bhi	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c7e8:	bne	1c6f8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   1c7ec:	ldrb	r3, [r5, #2]
   1c7f0:	cmp	r3, #32
   1c7f4:	addhi	r5, r5, #2
   1c7f8:	bls	1c6f8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   1c7fc:	b	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c800:	mov	r1, sl
   1c804:	mov	r3, #7
   1c808:	mov	r2, r4
   1c80c:	mov	r0, r6
   1c810:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c814:	mov	sl, r0
   1c818:	b	1c724 <flatcc_json_parser_union_type_vector@@Base+0x2fc>
   1c81c:	ldrb	r3, [sl, #2]
   1c820:	cmp	r3, #32
   1c824:	addhi	r5, sl, #2
   1c828:	bls	1c6f4 <flatcc_json_parser_union_type_vector@@Base+0x2cc>
   1c82c:	b	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c830:	ldrb	r3, [sl, #2]
   1c834:	cmp	r3, #32
   1c838:	addhi	r5, sl, #2
   1c83c:	bls	1c7a0 <flatcc_json_parser_union_type_vector@@Base+0x378>
   1c840:	b	1c7b4 <flatcc_json_parser_union_type_vector@@Base+0x38c>
   1c844:	mov	r2, r4
   1c848:	mov	r1, sl
   1c84c:	mov	r0, r6
   1c850:	mov	r3, #15
   1c854:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c858:	b	1c538 <flatcc_json_parser_union_type_vector@@Base+0x110>
   1c85c:	ldr	r3, [sp, #28]
   1c860:	ldr	r0, [r6]
   1c864:	sub	r1, r3, #1
   1c868:	bl	17aac <flatcc_builder_table_add_offset@@Base>
   1c86c:	cmp	r0, #0
   1c870:	beq	1c524 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   1c874:	str	r9, [r0]
   1c878:	ldr	r1, [sp, #100]	; 0x64
   1c87c:	ldr	r0, [r6]
   1c880:	bl	14ab4 <flatcc_builder_get_user_frame_ptr@@Base>
   1c884:	ldr	r1, [sp, #32]
   1c888:	add	r3, r0, #8
   1c88c:	mov	r2, r0
   1c890:	add	r0, r3, r1
   1c894:	ldr	r1, [r3, r1]
   1c898:	ldr	r3, [r2, #4]
   1c89c:	cmp	r1, #0
   1c8a0:	addeq	r3, r3, #1
   1c8a4:	str	r8, [r0, #20]
   1c8a8:	moveq	r0, r5
   1c8ac:	streq	r3, [r2, #4]
   1c8b0:	beq	1c538 <flatcc_json_parser_union_type_vector@@Base+0x110>
   1c8b4:	cmp	r3, #0
   1c8b8:	beq	1c948 <flatcc_json_parser_union_type_vector@@Base+0x520>
   1c8bc:	sub	r3, r3, #1
   1c8c0:	ldmib	r0, {r0, ip}
   1c8c4:	str	r3, [r2, #4]
   1c8c8:	ldr	r2, [sp, #108]	; 0x6c
   1c8cc:	str	r7, [sp]
   1c8d0:	str	r2, [sp, #8]
   1c8d4:	ldr	r2, [sp, #28]
   1c8d8:	mov	r3, r8
   1c8dc:	str	r2, [sp, #4]
   1c8e0:	mov	r2, r4
   1c8e4:	ldr	r8, [r6, #16]
   1c8e8:	ldr	r7, [r6, #4]
   1c8ec:	str	ip, [r6, #16]
   1c8f0:	str	r0, [r6, #4]
   1c8f4:	mov	r0, r6
   1c8f8:	bl	19f44 <flatcc_json_parser_space_ext@@Base+0x35c>
   1c8fc:	cmp	r4, r0
   1c900:	strne	r8, [r6, #16]
   1c904:	strne	r7, [r6, #4]
   1c908:	movne	r0, r5
   1c90c:	b	1c538 <flatcc_json_parser_union_type_vector@@Base+0x110>
   1c910:	mov	r3, #9
   1c914:	mov	r2, r4
   1c918:	mov	r1, r4
   1c91c:	mov	r0, r6
   1c920:	bl	19af4 <flatcc_json_parser_set_error@@Base>
   1c924:	mov	r5, r0
   1c928:	b	1c4c8 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   1c92c:	mov	r5, r0
   1c930:	b	1c524 <flatcc_json_parser_union_type_vector@@Base+0xfc>
   1c934:	ldrb	r3, [r5, #2]
   1c938:	cmp	r3, #32
   1c93c:	addhi	r5, r5, #2
   1c940:	bls	1c580 <flatcc_json_parser_union_type_vector@@Base+0x158>
   1c944:	b	1c590 <flatcc_json_parser_union_type_vector@@Base+0x168>
   1c948:	ldr	r3, [pc, #32]	; 1c970 <flatcc_json_parser_union_type_vector@@Base+0x548>
   1c94c:	ldr	r1, [pc, #32]	; 1c974 <flatcc_json_parser_union_type_vector@@Base+0x54c>
   1c950:	add	r3, pc, r3
   1c954:	ldr	r0, [pc, #28]	; 1c978 <flatcc_json_parser_union_type_vector@@Base+0x550>
   1c958:	add	r3, r3, #2016	; 0x7e0
   1c95c:	ldr	r2, [pc, #24]	; 1c97c <flatcc_json_parser_union_type_vector@@Base+0x554>
   1c960:	add	r3, r3, #4
   1c964:	add	r1, pc, r1
   1c968:	add	r0, pc, r0
   1c96c:	bl	124d4 <__assert_fail@plt>
   1c970:	muleq	r0, r8, r3
   1c974:	ldrdeq	r1, [r0], -r0
   1c978:	andeq	r2, r0, r0, lsr r0
   1c97c:	andeq	r0, r0, r2, ror #8

0001c980 <flatcc_json_parser_struct_as_root@@Base>:
   1c980:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c984:	sub	sp, sp, #52	; 0x34
   1c988:	mov	r5, r2
   1c98c:	ldr	r8, [sp, #80]	; 0x50
   1c990:	mov	r9, r0
   1c994:	ands	r7, r8, #4
   1c998:	movne	r7, #2
   1c99c:	subs	r4, r1, #0
   1c9a0:	addeq	r4, sp, #4
   1c9a4:	mov	r2, #44	; 0x2c
   1c9a8:	mov	r1, #0
   1c9ac:	mov	r0, r4
   1c9b0:	add	r6, r5, r3
   1c9b4:	bl	124a4 <memset@plt>
   1c9b8:	mov	r2, #1
   1c9bc:	str	r2, [r4, #16]
   1c9c0:	str	r6, [r4, #32]
   1c9c4:	str	r9, [r4]
   1c9c8:	stmib	r4, {r5, r8}
   1c9cc:	str	r5, [r4, #28]
   1c9d0:	str	r5, [r4, #36]	; 0x24
   1c9d4:	mov	r3, r7
   1c9d8:	mov	r2, #0
   1c9dc:	ldr	r1, [sp, #84]	; 0x54
   1c9e0:	mov	r0, r9
   1c9e4:	bl	15014 <flatcc_builder_start_buffer@@Base>
   1c9e8:	cmp	r0, #0
   1c9ec:	bne	1ca44 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1c9f0:	mov	r2, r6
   1c9f4:	mov	r3, sp
   1c9f8:	mov	r1, r5
   1c9fc:	mov	r0, r4
   1ca00:	ldr	ip, [sp, #88]	; 0x58
   1ca04:	blx	ip
   1ca08:	ldr	r6, [r4, #24]
   1ca0c:	cmp	r6, #0
   1ca10:	beq	1ca20 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   1ca14:	mov	r0, r6
   1ca18:	add	sp, sp, #52	; 0x34
   1ca1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ca20:	mov	r0, r9
   1ca24:	ldr	r1, [sp]
   1ca28:	bl	150cc <flatcc_builder_end_buffer@@Base>
   1ca2c:	cmp	r0, #0
   1ca30:	beq	1ca44 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1ca34:	mov	r0, r6
   1ca38:	str	r5, [r4, #40]	; 0x28
   1ca3c:	add	sp, sp, #52	; 0x34
   1ca40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ca44:	mvn	r6, #0
   1ca48:	mov	r0, r6
   1ca4c:	add	sp, sp, #52	; 0x34
   1ca50:	pop	{r4, r5, r6, r7, r8, r9, pc}

0001ca54 <flatcc_json_parser_table_as_root@@Base>:
   1ca54:	push	{lr}		; (str lr, [sp, #-4]!)
   1ca58:	pop	{lr}		; (ldr lr, [sp], #4)
   1ca5c:	b	1c980 <flatcc_json_parser_struct_as_root@@Base>
   1ca60:	eor	r1, r1, #-2147483648	; 0x80000000
   1ca64:	b	1ca6c <flatcc_json_parser_table_as_root@@Base+0x18>
   1ca68:	eor	r3, r3, #-2147483648	; 0x80000000
   1ca6c:	push	{r4, r5, lr}
   1ca70:	lsl	r4, r1, #1
   1ca74:	lsl	r5, r3, #1
   1ca78:	teq	r4, r5
   1ca7c:	teqeq	r0, r2
   1ca80:	orrsne	ip, r4, r0
   1ca84:	orrsne	ip, r5, r2
   1ca88:	mvnsne	ip, r4, asr #21
   1ca8c:	mvnsne	ip, r5, asr #21
   1ca90:	beq	1cc7c <flatcc_json_parser_table_as_root@@Base+0x228>
   1ca94:	lsr	r4, r4, #21
   1ca98:	rsbs	r5, r4, r5, lsr #21
   1ca9c:	rsblt	r5, r5, #0
   1caa0:	ble	1cac0 <flatcc_json_parser_table_as_root@@Base+0x6c>
   1caa4:	add	r4, r4, r5
   1caa8:	eor	r2, r0, r2
   1caac:	eor	r3, r1, r3
   1cab0:	eor	r0, r2, r0
   1cab4:	eor	r1, r3, r1
   1cab8:	eor	r2, r0, r2
   1cabc:	eor	r3, r1, r3
   1cac0:	cmp	r5, #54	; 0x36
   1cac4:	pophi	{r4, r5, pc}
   1cac8:	tst	r1, #-2147483648	; 0x80000000
   1cacc:	lsl	r1, r1, #12
   1cad0:	mov	ip, #1048576	; 0x100000
   1cad4:	orr	r1, ip, r1, lsr #12
   1cad8:	beq	1cae4 <flatcc_json_parser_table_as_root@@Base+0x90>
   1cadc:	rsbs	r0, r0, #0
   1cae0:	rsc	r1, r1, #0
   1cae4:	tst	r3, #-2147483648	; 0x80000000
   1cae8:	lsl	r3, r3, #12
   1caec:	orr	r3, ip, r3, lsr #12
   1caf0:	beq	1cafc <flatcc_json_parser_table_as_root@@Base+0xa8>
   1caf4:	rsbs	r2, r2, #0
   1caf8:	rsc	r3, r3, #0
   1cafc:	teq	r4, r5
   1cb00:	beq	1cc64 <flatcc_json_parser_table_as_root@@Base+0x210>
   1cb04:	sub	r4, r4, #1
   1cb08:	rsbs	lr, r5, #32
   1cb0c:	blt	1cb28 <flatcc_json_parser_table_as_root@@Base+0xd4>
   1cb10:	lsl	ip, r2, lr
   1cb14:	adds	r0, r0, r2, lsr r5
   1cb18:	adc	r1, r1, #0
   1cb1c:	adds	r0, r0, r3, lsl lr
   1cb20:	adcs	r1, r1, r3, asr r5
   1cb24:	b	1cb44 <flatcc_json_parser_table_as_root@@Base+0xf0>
   1cb28:	sub	r5, r5, #32
   1cb2c:	add	lr, lr, #32
   1cb30:	cmp	r2, #1
   1cb34:	lsl	ip, r3, lr
   1cb38:	orrcs	ip, ip, #2
   1cb3c:	adds	r0, r0, r3, asr r5
   1cb40:	adcs	r1, r1, r3, asr #31
   1cb44:	and	r5, r1, #-2147483648	; 0x80000000
   1cb48:	bpl	1cb58 <flatcc_json_parser_table_as_root@@Base+0x104>
   1cb4c:	rsbs	ip, ip, #0
   1cb50:	rscs	r0, r0, #0
   1cb54:	rsc	r1, r1, #0
   1cb58:	cmp	r1, #1048576	; 0x100000
   1cb5c:	bcc	1cb9c <flatcc_json_parser_table_as_root@@Base+0x148>
   1cb60:	cmp	r1, #2097152	; 0x200000
   1cb64:	bcc	1cb84 <flatcc_json_parser_table_as_root@@Base+0x130>
   1cb68:	lsrs	r1, r1, #1
   1cb6c:	rrxs	r0, r0
   1cb70:	rrx	ip, ip
   1cb74:	add	r4, r4, #1
   1cb78:	lsl	r2, r4, #21
   1cb7c:	cmn	r2, #4194304	; 0x400000
   1cb80:	bcs	1ccdc <flatcc_json_parser_table_as_root@@Base+0x288>
   1cb84:	cmp	ip, #-2147483648	; 0x80000000
   1cb88:	lsrseq	ip, r0, #1
   1cb8c:	adcs	r0, r0, #0
   1cb90:	adc	r1, r1, r4, lsl #20
   1cb94:	orr	r1, r1, r5
   1cb98:	pop	{r4, r5, pc}
   1cb9c:	lsls	ip, ip, #1
   1cba0:	adcs	r0, r0, r0
   1cba4:	adc	r1, r1, r1
   1cba8:	tst	r1, #1048576	; 0x100000
   1cbac:	sub	r4, r4, #1
   1cbb0:	bne	1cb84 <flatcc_json_parser_table_as_root@@Base+0x130>
   1cbb4:	teq	r1, #0
   1cbb8:	moveq	r1, r0
   1cbbc:	moveq	r0, #0
   1cbc0:	clz	r3, r1
   1cbc4:	addeq	r3, r3, #32
   1cbc8:	sub	r3, r3, #11
   1cbcc:	subs	r2, r3, #32
   1cbd0:	bge	1cbf4 <flatcc_json_parser_table_as_root@@Base+0x1a0>
   1cbd4:	adds	r2, r2, #12
   1cbd8:	ble	1cbf0 <flatcc_json_parser_table_as_root@@Base+0x19c>
   1cbdc:	add	ip, r2, #20
   1cbe0:	rsb	r2, r2, #12
   1cbe4:	lsl	r0, r1, ip
   1cbe8:	lsr	r1, r1, r2
   1cbec:	b	1cc04 <flatcc_json_parser_table_as_root@@Base+0x1b0>
   1cbf0:	add	r2, r2, #20
   1cbf4:	rsble	ip, r2, #32
   1cbf8:	lsl	r1, r1, r2
   1cbfc:	orrle	r1, r1, r0, lsr ip
   1cc00:	lslle	r0, r0, r2
   1cc04:	subs	r4, r4, r3
   1cc08:	addge	r1, r1, r4, lsl #20
   1cc0c:	orrge	r1, r1, r5
   1cc10:	popge	{r4, r5, pc}
   1cc14:	mvn	r4, r4
   1cc18:	subs	r4, r4, #31
   1cc1c:	bge	1cc58 <flatcc_json_parser_table_as_root@@Base+0x204>
   1cc20:	adds	r4, r4, #12
   1cc24:	bgt	1cc40 <flatcc_json_parser_table_as_root@@Base+0x1ec>
   1cc28:	add	r4, r4, #20
   1cc2c:	rsb	r2, r4, #32
   1cc30:	lsr	r0, r0, r4
   1cc34:	orr	r0, r0, r1, lsl r2
   1cc38:	orr	r1, r5, r1, lsr r4
   1cc3c:	pop	{r4, r5, pc}
   1cc40:	rsb	r4, r4, #12
   1cc44:	rsb	r2, r4, #32
   1cc48:	lsr	r0, r0, r2
   1cc4c:	orr	r0, r0, r1, lsl r4
   1cc50:	mov	r1, r5
   1cc54:	pop	{r4, r5, pc}
   1cc58:	lsr	r0, r1, r4
   1cc5c:	mov	r1, r5
   1cc60:	pop	{r4, r5, pc}
   1cc64:	teq	r4, #0
   1cc68:	eor	r3, r3, #1048576	; 0x100000
   1cc6c:	eoreq	r1, r1, #1048576	; 0x100000
   1cc70:	addeq	r4, r4, #1
   1cc74:	subne	r5, r5, #1
   1cc78:	b	1cb04 <flatcc_json_parser_table_as_root@@Base+0xb0>
   1cc7c:	mvns	ip, r4, asr #21
   1cc80:	mvnsne	ip, r5, asr #21
   1cc84:	beq	1ccec <flatcc_json_parser_table_as_root@@Base+0x298>
   1cc88:	teq	r4, r5
   1cc8c:	teqeq	r0, r2
   1cc90:	beq	1cca4 <flatcc_json_parser_table_as_root@@Base+0x250>
   1cc94:	orrs	ip, r4, r0
   1cc98:	moveq	r1, r3
   1cc9c:	moveq	r0, r2
   1cca0:	pop	{r4, r5, pc}
   1cca4:	teq	r1, r3
   1cca8:	movne	r1, #0
   1ccac:	movne	r0, #0
   1ccb0:	popne	{r4, r5, pc}
   1ccb4:	lsrs	ip, r4, #21
   1ccb8:	bne	1cccc <flatcc_json_parser_table_as_root@@Base+0x278>
   1ccbc:	lsls	r0, r0, #1
   1ccc0:	adcs	r1, r1, r1
   1ccc4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ccc8:	pop	{r4, r5, pc}
   1cccc:	adds	r4, r4, #4194304	; 0x400000
   1ccd0:	addcc	r1, r1, #1048576	; 0x100000
   1ccd4:	popcc	{r4, r5, pc}
   1ccd8:	and	r5, r1, #-2147483648	; 0x80000000
   1ccdc:	orr	r1, r5, #2130706432	; 0x7f000000
   1cce0:	orr	r1, r1, #15728640	; 0xf00000
   1cce4:	mov	r0, #0
   1cce8:	pop	{r4, r5, pc}
   1ccec:	mvns	ip, r4, asr #21
   1ccf0:	movne	r1, r3
   1ccf4:	movne	r0, r2
   1ccf8:	mvnseq	ip, r5, asr #21
   1ccfc:	movne	r3, r1
   1cd00:	movne	r2, r0
   1cd04:	orrs	r4, r0, r1, lsl #12
   1cd08:	orrseq	r5, r2, r3, lsl #12
   1cd0c:	teqeq	r1, r3
   1cd10:	orrne	r1, r1, #524288	; 0x80000
   1cd14:	pop	{r4, r5, pc}
   1cd18:	teq	r0, #0
   1cd1c:	moveq	r1, #0
   1cd20:	bxeq	lr
   1cd24:	push	{r4, r5, lr}
   1cd28:	mov	r4, #1024	; 0x400
   1cd2c:	add	r4, r4, #50	; 0x32
   1cd30:	mov	r5, #0
   1cd34:	mov	r1, #0
   1cd38:	b	1cbb4 <flatcc_json_parser_table_as_root@@Base+0x160>
   1cd3c:	teq	r0, #0
   1cd40:	moveq	r1, #0
   1cd44:	bxeq	lr
   1cd48:	push	{r4, r5, lr}
   1cd4c:	mov	r4, #1024	; 0x400
   1cd50:	add	r4, r4, #50	; 0x32
   1cd54:	ands	r5, r0, #-2147483648	; 0x80000000
   1cd58:	rsbmi	r0, r0, #0
   1cd5c:	mov	r1, #0
   1cd60:	b	1cbb4 <flatcc_json_parser_table_as_root@@Base+0x160>
   1cd64:	lsls	r2, r0, #1
   1cd68:	asr	r1, r2, #3
   1cd6c:	rrx	r1, r1
   1cd70:	lsl	r0, r2, #28
   1cd74:	andsne	r3, r2, #-16777216	; 0xff000000
   1cd78:	teqne	r3, #-16777216	; 0xff000000
   1cd7c:	eorne	r1, r1, #939524096	; 0x38000000
   1cd80:	bxne	lr
   1cd84:	teq	r2, #0
   1cd88:	teqne	r3, #-16777216	; 0xff000000
   1cd8c:	bxeq	lr
   1cd90:	push	{r4, r5, lr}
   1cd94:	mov	r4, #896	; 0x380
   1cd98:	and	r5, r1, #-2147483648	; 0x80000000
   1cd9c:	bic	r1, r1, #-2147483648	; 0x80000000
   1cda0:	b	1cbb4 <flatcc_json_parser_table_as_root@@Base+0x160>
   1cda4:	orrs	r2, r0, r1
   1cda8:	bxeq	lr
   1cdac:	push	{r4, r5, lr}
   1cdb0:	mov	r5, #0
   1cdb4:	b	1cdd4 <flatcc_json_parser_table_as_root@@Base+0x380>
   1cdb8:	orrs	r2, r0, r1
   1cdbc:	bxeq	lr
   1cdc0:	push	{r4, r5, lr}
   1cdc4:	ands	r5, r1, #-2147483648	; 0x80000000
   1cdc8:	bpl	1cdd4 <flatcc_json_parser_table_as_root@@Base+0x380>
   1cdcc:	rsbs	r0, r0, #0
   1cdd0:	rsc	r1, r1, #0
   1cdd4:	mov	r4, #1024	; 0x400
   1cdd8:	add	r4, r4, #50	; 0x32
   1cddc:	lsrs	ip, r1, #22
   1cde0:	beq	1cb58 <flatcc_json_parser_table_as_root@@Base+0x104>
   1cde4:	mov	r2, #3
   1cde8:	lsrs	ip, ip, #3
   1cdec:	addne	r2, r2, #3
   1cdf0:	lsrs	ip, ip, #3
   1cdf4:	addne	r2, r2, #3
   1cdf8:	add	r2, r2, ip, lsr #3
   1cdfc:	rsb	r3, r2, #32
   1ce00:	lsl	ip, r0, r3
   1ce04:	lsr	r0, r0, r2
   1ce08:	orr	r0, r0, r1, lsl r3
   1ce0c:	lsr	r1, r1, r2
   1ce10:	add	r4, r4, r2
   1ce14:	b	1cb58 <flatcc_json_parser_table_as_root@@Base+0x104>

0001ce18 <__libc_csu_init@@Base>:
   1ce18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce1c:	mov	r7, r0
   1ce20:	ldr	r6, [pc, #72]	; 1ce70 <__libc_csu_init@@Base+0x58>
   1ce24:	ldr	r5, [pc, #72]	; 1ce74 <__libc_csu_init@@Base+0x5c>
   1ce28:	add	r6, pc, r6
   1ce2c:	add	r5, pc, r5
   1ce30:	sub	r6, r6, r5
   1ce34:	mov	r8, r1
   1ce38:	mov	r9, r2
   1ce3c:	bl	12400 <free@plt-0x20>
   1ce40:	asrs	r6, r6, #2
   1ce44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce48:	mov	r4, #0
   1ce4c:	add	r4, r4, #1
   1ce50:	ldr	r3, [r5], #4
   1ce54:	mov	r2, r9
   1ce58:	mov	r1, r8
   1ce5c:	mov	r0, r7
   1ce60:	blx	r3
   1ce64:	cmp	r6, r4
   1ce68:	bne	1ce4c <__libc_csu_init@@Base+0x34>
   1ce6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce70:	andeq	r2, r1, r0, ror #1
   1ce74:	ldrdeq	r2, [r1], -r8

0001ce78 <__libc_csu_fini@@Base>:
   1ce78:	bx	lr

Disassembly of section .fini:

0001ce7c <.fini>:
   1ce7c:	push	{r3, lr}
   1ce80:	pop	{r3, pc}
