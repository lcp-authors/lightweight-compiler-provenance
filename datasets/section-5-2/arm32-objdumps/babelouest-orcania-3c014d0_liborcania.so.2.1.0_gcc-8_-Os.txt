
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000e24 <.init>:
 e24:	push	{r3, lr}
 e28:	bl	1010 <o_strchr@plt+0x10>
 e2c:	pop	{r3, pc}

Disassembly of section .plt:

00000e30 <strstr@plt-0x14>:
     e30:	push	{lr}		; (str lr, [sp, #-4]!)
     e34:	ldr	lr, [pc, #4]	; e40 <strstr@plt-0x4>
     e38:	add	lr, pc, lr
     e3c:	ldr	pc, [lr, #8]!
     e40:	andeq	r2, r1, r0, asr #3

00000e44 <strstr@plt>:
     e44:	add	ip, pc, #0, 12
     e48:	add	ip, ip, #73728	; 0x12000
     e4c:	ldr	pc, [ip, #448]!	; 0x1c0

00000e50 <pointer_list_get_at@plt>:
     e50:	add	ip, pc, #0, 12
     e54:	add	ip, ip, #73728	; 0x12000
     e58:	ldr	pc, [ip, #440]!	; 0x1b8

00000e5c <o_strncasecmp@plt>:
     e5c:	add	ip, pc, #0, 12
     e60:	add	ip, ip, #73728	; 0x12000
     e64:	ldr	pc, [ip, #432]!	; 0x1b0

00000e68 <strcasestr@plt>:
     e68:	add	ip, pc, #0, 12
     e6c:	add	ip, ip, #73728	; 0x12000
     e70:	ldr	pc, [ip, #424]!	; 0x1a8

00000e74 <strcmp@plt>:
     e74:	add	ip, pc, #0, 12
     e78:	add	ip, ip, #73728	; 0x12000
     e7c:	ldr	pc, [ip, #416]!	; 0x1a0

00000e80 <__cxa_finalize@plt>:
     e80:	add	ip, pc, #0, 12
     e84:	add	ip, ip, #73728	; 0x12000
     e88:	ldr	pc, [ip, #408]!	; 0x198

00000e8c <o_strndup@plt>:
     e8c:	add	ip, pc, #0, 12
     e90:	add	ip, ip, #73728	; 0x12000
     e94:	ldr	pc, [ip, #400]!	; 0x190

00000e98 <trunc@plt>:
     e98:	add	ip, pc, #0, 12
     e9c:	add	ip, ip, #73728	; 0x12000
     ea0:	ldr	pc, [ip, #392]!	; 0x188

00000ea4 <o_free@plt>:
     ea4:	add	ip, pc, #0, 12
     ea8:	add	ip, ip, #73728	; 0x12000
     eac:	ldr	pc, [ip, #384]!	; 0x180

00000eb0 <pointer_list_remove_at@plt>:
     eb0:	add	ip, pc, #0, 12
     eb4:	add	ip, ip, #73728	; 0x12000
     eb8:	ldr	pc, [ip, #376]!	; 0x178

00000ebc <memcpy@plt>:
     ebc:	add	ip, pc, #0, 12
     ec0:	add	ip, ip, #73728	; 0x12000
     ec4:	ldr	pc, [ip, #368]!	; 0x170

00000ec8 <o_strdup@plt>:
     ec8:	add	ip, pc, #0, 12
     ecc:	add	ip, ip, #73728	; 0x12000
     ed0:	ldr	pc, [ip, #360]!	; 0x168

00000ed4 <o_base64_encode@plt>:
     ed4:	add	ip, pc, #0, 12
     ed8:	add	ip, ip, #73728	; 0x12000
     edc:	ldr	pc, [ip, #352]!	; 0x160

00000ee0 <strcasecmp@plt>:
     ee0:	add	ip, pc, #0, 12
     ee4:	add	ip, ip, #73728	; 0x12000
     ee8:	ldr	pc, [ip, #344]!	; 0x158

00000eec <o_strcmp@plt>:
     eec:	add	ip, pc, #0, 12
     ef0:	add	ip, ip, #73728	; 0x12000
     ef4:	ldr	pc, [ip, #336]!	; 0x150

00000ef8 <trimwhitespace@plt>:
     ef8:	add	ip, pc, #0, 12
     efc:	add	ip, ip, #73728	; 0x12000
     f00:	ldr	pc, [ip, #328]!	; 0x148

00000f04 <strcpy@plt>:
     f04:	add	ip, pc, #0, 12
     f08:	add	ip, ip, #73728	; 0x12000
     f0c:	ldr	pc, [ip, #320]!	; 0x140

00000f10 <o_strlen@plt>:
     f10:	add	ip, pc, #0, 12
     f14:	add	ip, ip, #73728	; 0x12000
     f18:	ldr	pc, [ip, #312]!	; 0x138

00000f1c <o_strcasecmp@plt>:
     f1c:	add	ip, pc, #0, 12
     f20:	add	ip, ip, #73728	; 0x12000
     f24:	ldr	pc, [ip, #304]!	; 0x130

00000f28 <o_realloc@plt>:
     f28:	add	ip, pc, #0, 12
     f2c:	add	ip, ip, #73728	; 0x12000
     f30:	ldr	pc, [ip, #296]!	; 0x128

00000f34 <__gmon_start__@plt>:
     f34:	add	ip, pc, #0, 12
     f38:	add	ip, ip, #73728	; 0x12000
     f3c:	ldr	pc, [ip, #288]!	; 0x120

00000f40 <__ctype_b_loc@plt>:
     f40:	add	ip, pc, #0, 12
     f44:	add	ip, ip, #73728	; 0x12000
     f48:	ldr	pc, [ip, #280]!	; 0x118

00000f4c <strlen@plt>:
     f4c:	add	ip, pc, #0, 12
     f50:	add	ip, ip, #73728	; 0x12000
     f54:	ldr	pc, [ip, #272]!	; 0x110

00000f58 <strchr@plt>:
     f58:	add	ip, pc, #0, 12
     f5c:	add	ip, ip, #73728	; 0x12000
     f60:	ldr	pc, [ip, #264]!	; 0x108

00000f64 <strncasecmp@plt>:
     f64:	add	ip, pc, #0, 12
     f68:	add	ip, ip, #73728	; 0x12000
     f6c:	ldr	pc, [ip, #256]!	; 0x100

00000f70 <snprintf@plt>:
     f70:	add	ip, pc, #0, 12
     f74:	add	ip, ip, #73728	; 0x12000
     f78:	ldr	pc, [ip, #248]!	; 0xf8

00000f7c <o_malloc@plt>:
     f7c:	add	ip, pc, #0, 12
     f80:	add	ip, ip, #73728	; 0x12000
     f84:	ldr	pc, [ip, #240]!	; 0xf0

00000f88 <memset@plt>:
     f88:	add	ip, pc, #0, 12
     f8c:	add	ip, ip, #73728	; 0x12000
     f90:	ldr	pc, [ip, #232]!	; 0xe8

00000f94 <strncpy@plt>:
     f94:	add	ip, pc, #0, 12
     f98:	add	ip, ip, #73728	; 0x12000
     f9c:	ldr	pc, [ip, #224]!	; 0xe0

00000fa0 <pointer_list_size@plt>:
     fa0:	add	ip, pc, #0, 12
     fa4:	add	ip, ip, #73728	; 0x12000
     fa8:	ldr	pc, [ip, #216]!	; 0xd8

00000fac <msprintf@plt>:
     fac:	add	ip, pc, #0, 12
     fb0:	add	ip, ip, #73728	; 0x12000
     fb4:	ldr	pc, [ip, #208]!	; 0xd0

00000fb8 <o_base64url_2_base64@plt>:
     fb8:	add	ip, pc, #0, 12
     fbc:	add	ip, ip, #73728	; 0x12000
     fc0:	ldr	pc, [ip, #200]!	; 0xc8

00000fc4 <strrchr@plt>:
     fc4:	add	ip, pc, #0, 12
     fc8:	add	ip, ip, #73728	; 0x12000
     fcc:	ldr	pc, [ip, #192]!	; 0xc0

00000fd0 <o_base64_decode@plt>:
     fd0:	add	ip, pc, #0, 12
     fd4:	add	ip, ip, #73728	; 0x12000
     fd8:	ldr	pc, [ip, #184]!	; 0xb8

00000fdc <vsnprintf@plt>:
     fdc:	add	ip, pc, #0, 12
     fe0:	add	ip, ip, #73728	; 0x12000
     fe4:	ldr	pc, [ip, #176]!	; 0xb0

00000fe8 <o_strncmp@plt>:
     fe8:	add	ip, pc, #0, 12
     fec:	add	ip, ip, #73728	; 0x12000
     ff0:	ldr	pc, [ip, #168]!	; 0xa8

00000ff4 <strncmp@plt>:
     ff4:	add	ip, pc, #0, 12
     ff8:	add	ip, ip, #73728	; 0x12000
     ffc:	ldr	pc, [ip, #160]!	; 0xa0

00001000 <o_strchr@plt>:
    1000:	add	ip, pc, #0, 12
    1004:	add	ip, ip, #73728	; 0x12000
    1008:	ldr	pc, [ip, #152]!	; 0x98

Disassembly of section .text:

00001010 <o_base64_encode@@Base-0x2e4>:
    1010:	ldr	r3, [pc, #20]	; 102c <o_strchr@plt+0x2c>
    1014:	ldr	r2, [pc, #20]	; 1030 <o_strchr@plt+0x30>
    1018:	add	r3, pc, r3
    101c:	ldr	r2, [r3, r2]
    1020:	cmp	r2, #0
    1024:	bxeq	lr
    1028:	b	f34 <__gmon_start__@plt>
    102c:	andeq	r1, r1, r0, ror #31
    1030:	andeq	r0, r0, ip, lsr #1
    1034:	ldr	r0, [pc, #44]	; 1068 <o_strchr@plt+0x68>
    1038:	ldr	r3, [pc, #44]	; 106c <o_strchr@plt+0x6c>
    103c:	add	r0, pc, r0
    1040:	add	r3, pc, r3
    1044:	cmp	r3, r0
    1048:	ldr	r3, [pc, #32]	; 1070 <o_strchr@plt+0x70>
    104c:	add	r3, pc, r3
    1050:	bxeq	lr
    1054:	ldr	r2, [pc, #24]	; 1074 <o_strchr@plt+0x74>
    1058:	ldr	r3, [r3, r2]
    105c:	cmp	r3, #0
    1060:	bxeq	lr
    1064:	bx	r3
    1068:	andeq	r2, r1, r0, lsl #1
    106c:	andeq	r2, r1, ip, ror r0
    1070:	andeq	r1, r1, ip, lsr #31
    1074:	andeq	r0, r0, r8, lsr #1
    1078:	ldr	r0, [pc, #56]	; 10b8 <o_strchr@plt+0xb8>
    107c:	ldr	r3, [pc, #56]	; 10bc <o_strchr@plt+0xbc>
    1080:	add	r0, pc, r0
    1084:	add	r3, pc, r3
    1088:	sub	r1, r3, r0
    108c:	ldr	r3, [pc, #44]	; 10c0 <o_strchr@plt+0xc0>
    1090:	asr	r1, r1, #2
    1094:	add	r3, pc, r3
    1098:	add	r1, r1, r1, lsr #31
    109c:	asrs	r1, r1, #1
    10a0:	bxeq	lr
    10a4:	ldr	r2, [pc, #24]	; 10c4 <o_strchr@plt+0xc4>
    10a8:	ldr	r3, [r3, r2]
    10ac:	cmp	r3, #0
    10b0:	bxeq	lr
    10b4:	bx	r3
    10b8:	andeq	r2, r1, ip, lsr r0
    10bc:	andeq	r2, r1, r8, lsr r0
    10c0:	andeq	r1, r1, r4, ror #30
    10c4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    10c8:	ldr	r3, [pc, #76]	; 111c <o_strchr@plt+0x11c>
    10cc:	ldr	r2, [pc, #76]	; 1120 <o_strchr@plt+0x120>
    10d0:	add	r3, pc, r3
    10d4:	add	r2, pc, r2
    10d8:	ldrb	r3, [r3]
    10dc:	cmp	r3, #0
    10e0:	bxne	lr
    10e4:	ldr	r3, [pc, #56]	; 1124 <o_strchr@plt+0x124>
    10e8:	push	{r4, lr}
    10ec:	ldr	r3, [r2, r3]
    10f0:	cmp	r3, #0
    10f4:	beq	1104 <o_strchr@plt+0x104>
    10f8:	ldr	r3, [pc, #40]	; 1128 <o_strchr@plt+0x128>
    10fc:	ldr	r0, [pc, r3]
    1100:	bl	e80 <__cxa_finalize@plt>
    1104:	bl	1034 <o_strchr@plt+0x34>
    1108:	ldr	r3, [pc, #28]	; 112c <o_strchr@plt+0x12c>
    110c:	mov	r2, #1
    1110:	add	r3, pc, r3
    1114:	strb	r2, [r3]
    1118:	pop	{r4, pc}
    111c:	andeq	r1, r1, ip, ror #31
    1120:	andeq	r1, r1, r4, lsr #30
    1124:	andeq	r0, r0, r4, lsr #1
    1128:			; <UNDEFINED> instruction: 0x00011fb0
    112c:	andeq	r1, r1, ip, lsr #31
    1130:	b	1078 <o_strchr@plt+0x78>
    1134:	andeq	r0, r0, r0
    1138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    113c:	sub	sp, sp, #264	; 0x108
    1140:	mov	r6, r0
    1144:	mov	r5, r1
    1148:	mov	r7, r2
    114c:	mov	r1, #128	; 0x80
    1150:	mov	r2, #256	; 0x100
    1154:	add	r0, sp, #8
    1158:	mov	r8, r3
    115c:	bl	f88 <memset@plt>
    1160:	ldr	r1, [pc, #388]	; 12ec <o_strchr@plt+0x2ec>
    1164:	mov	r3, #0
    1168:	add	r1, pc, r1
    116c:	ldrb	r2, [r1], #1
    1170:	add	r0, sp, #264	; 0x108
    1174:	add	r2, r0, r2
    1178:	strb	r3, [r2, #-256]	; 0xffffff00
    117c:	add	r3, r3, #1
    1180:	cmp	r3, #64	; 0x40
    1184:	bne	116c <o_strchr@plt+0x16c>
    1188:	mov	r4, #0
    118c:	add	r5, r6, r5
    1190:	mov	r9, r6
    1194:	strb	r4, [sp, #69]	; 0x45
    1198:	cmp	r5, r9
    119c:	bne	11b8 <o_strchr@plt+0x1b8>
    11a0:	cmp	r4, #0
    11a4:	bne	11d4 <o_strchr@plt+0x1d4>
    11a8:	mov	r5, #0
    11ac:	mov	r0, r5
    11b0:	add	sp, sp, #264	; 0x108
    11b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    11b8:	ldrb	r3, [r9], #1
    11bc:	add	r2, sp, #264	; 0x108
    11c0:	add	r3, r2, r3
    11c4:	ldrb	r3, [r3, #-256]	; 0xffffff00
    11c8:	cmp	r3, #128	; 0x80
    11cc:	addne	r4, r4, #1
    11d0:	b	1198 <o_strchr@plt+0x198>
    11d4:	ands	r4, r4, #3
    11d8:	bne	11a8 <o_strchr@plt+0x1a8>
    11dc:	ldr	sl, [pc, #268]	; 12f0 <o_strchr@plt+0x2f0>
    11e0:	mov	r5, r4
    11e4:	str	r4, [r8]
    11e8:	add	sl, pc, sl
    11ec:	cmp	r9, r6
    11f0:	beq	12dc <o_strchr@plt+0x2dc>
    11f4:	ldrb	r1, [r6]
    11f8:	mov	r0, sl
    11fc:	bl	1000 <o_strchr@plt>
    1200:	cmp	r0, #0
    1204:	ldrb	r3, [r6]
    1208:	bne	1234 <o_strchr@plt+0x234>
    120c:	cmp	r3, #61	; 0x3d
    1210:	cmpne	r3, #32
    1214:	sub	r1, r3, #9
    1218:	movne	r2, #1
    121c:	moveq	r2, #0
    1220:	cmp	r1, #1
    1224:	movls	r2, #0
    1228:	andhi	r2, r2, #1
    122c:	cmp	r2, #0
    1230:	bne	11a8 <o_strchr@plt+0x1a8>
    1234:	add	r2, sp, #264	; 0x108
    1238:	add	r6, r6, #1
    123c:	add	r2, r2, r3
    1240:	ldrb	r2, [r2, #-256]	; 0xffffff00
    1244:	cmp	r2, #128	; 0x80
    1248:	beq	11ec <o_strchr@plt+0x1ec>
    124c:	cmp	r3, #61	; 0x3d
    1250:	add	r3, sp, #264	; 0x108
    1254:	add	r3, r3, r4
    1258:	add	r4, r4, #1
    125c:	addeq	r5, r5, #1
    1260:	cmp	r4, #4
    1264:	strb	r2, [r3, #-260]	; 0xfffffefc
    1268:	bne	11ec <o_strchr@plt+0x1ec>
    126c:	cmp	r7, #0
    1270:	beq	12a8 <o_strchr@plt+0x2a8>
    1274:	ldrb	r0, [sp, #5]
    1278:	add	r7, r7, #3
    127c:	ldrb	r2, [sp, #4]
    1280:	ldrb	r1, [sp, #6]
    1284:	lsr	r3, r0, #4
    1288:	orr	r3, r3, r2, lsl #2
    128c:	lsr	r2, r1, #2
    1290:	strb	r3, [r7, #-3]
    1294:	ldrb	r3, [sp, #7]
    1298:	orr	r2, r2, r0, lsl #4
    129c:	strb	r2, [r7, #-2]
    12a0:	orr	r3, r3, r1, lsl #6
    12a4:	strb	r3, [r7, #-1]
    12a8:	ldr	r2, [r8]
    12ac:	cmp	r5, #0
    12b0:	add	r3, r2, #3
    12b4:	str	r3, [r8]
    12b8:	beq	12e4 <o_strchr@plt+0x2e4>
    12bc:	cmp	r5, #1
    12c0:	addeq	r2, r2, #2
    12c4:	streq	r2, [r8]
    12c8:	beq	11ac <o_strchr@plt+0x1ac>
    12cc:	cmp	r5, #2
    12d0:	addeq	r2, r2, #1
    12d4:	streq	r2, [r8]
    12d8:	bne	11a8 <o_strchr@plt+0x1a8>
    12dc:	mov	r5, #1
    12e0:	b	11ac <o_strchr@plt+0x1ac>
    12e4:	mov	r4, r5
    12e8:	b	11ec <o_strchr@plt+0x1ec>
    12ec:	andeq	r1, r0, ip, lsl r5
    12f0:	muleq	r0, ip, r4

000012f4 <o_base64_encode@@Base>:
    12f4:	lsl	ip, r1, #2
    12f8:	push	{r4, lr}
    12fc:	mov	lr, #3
    1300:	mov	r4, #72	; 0x48
    1304:	cmp	r0, #0
    1308:	udiv	ip, ip, lr
    130c:	add	lr, ip, #4
    1310:	add	ip, ip, #5
    1314:	udiv	lr, lr, r4
    1318:	add	lr, ip, lr
    131c:	mov	ip, r3
    1320:	clz	r3, r3
    1324:	lsr	r3, r3, #5
    1328:	moveq	r3, #1
    132c:	cmp	r1, lr
    1330:	orrhi	r3, r3, #1
    1334:	cmp	r3, #0
    1338:	bne	14bc <o_base64_encode@@Base+0x1c8>
    133c:	ldr	lr, [pc, #384]	; 14c4 <o_base64_encode@@Base+0x1d0>
    1340:	add	r1, r0, r1
    1344:	str	r3, [ip]
    1348:	add	lr, pc, lr
    134c:	sub	r4, r1, r0
    1350:	cmp	r4, #2
    1354:	bgt	13fc <o_base64_encode@@Base+0x108>
    1358:	cmp	r1, r0
    135c:	beq	13e8 <o_base64_encode@@Base+0xf4>
    1360:	cmp	r2, #0
    1364:	beq	137c <o_base64_encode@@Base+0x88>
    1368:	ldr	r3, [pc, #344]	; 14c8 <o_base64_encode@@Base+0x1d4>
    136c:	ldrb	r1, [r0]
    1370:	add	r3, pc, r3
    1374:	ldrb	r3, [r3, r1, lsr #2]
    1378:	strb	r3, [r2], #1
    137c:	ldr	r3, [ip]
    1380:	cmp	r4, #1
    1384:	add	r3, r3, #1
    1388:	str	r3, [ip]
    138c:	bne	1470 <o_base64_encode@@Base+0x17c>
    1390:	cmp	r2, #0
    1394:	beq	13c4 <o_base64_encode@@Base+0xd0>
    1398:	ldrb	r3, [r0]
    139c:	ldr	r1, [pc, #296]	; 14cc <o_base64_encode@@Base+0x1d8>
    13a0:	lsl	r3, r3, #4
    13a4:	add	r1, pc, r1
    13a8:	and	r3, r3, #48	; 0x30
    13ac:	ldrb	r1, [r1, r3]
    13b0:	mov	r3, r2
    13b4:	strb	r1, [r3], #2
    13b8:	mov	r1, #61	; 0x3d
    13bc:	strb	r1, [r2, #1]
    13c0:	mov	r2, r3
    13c4:	ldr	r3, [ip]
    13c8:	cmp	r2, #0
    13cc:	add	r3, r3, #2
    13d0:	str	r3, [ip]
    13d4:	movne	r3, #61	; 0x3d
    13d8:	strbne	r3, [r2], #1
    13dc:	ldr	r3, [ip]
    13e0:	add	r3, r3, #1
    13e4:	str	r3, [ip]
    13e8:	cmp	r2, #0
    13ec:	mov	r0, #1
    13f0:	movne	r3, #0
    13f4:	strbne	r3, [r2]
    13f8:	pop	{r4, pc}
    13fc:	cmp	r2, #0
    1400:	beq	145c <o_base64_encode@@Base+0x168>
    1404:	ldrb	r3, [r0]
    1408:	add	r2, r2, #4
    140c:	ldrb	r3, [lr, r3, lsr #2]
    1410:	strb	r3, [r2, #-4]
    1414:	ldrb	r3, [r0]
    1418:	ldrb	r4, [r0, #1]
    141c:	lsl	r3, r3, #4
    1420:	and	r3, r3, #48	; 0x30
    1424:	orr	r3, r3, r4, lsr #4
    1428:	ldrb	r3, [lr, r3]
    142c:	strb	r3, [r2, #-3]
    1430:	ldrb	r3, [r0, #1]
    1434:	ldrb	r4, [r0, #2]
    1438:	lsl	r3, r3, #2
    143c:	and	r3, r3, #60	; 0x3c
    1440:	orr	r3, r3, r4, lsr #6
    1444:	ldrb	r3, [lr, r3]
    1448:	strb	r3, [r2, #-2]
    144c:	ldrb	r3, [r0, #2]
    1450:	and	r3, r3, #63	; 0x3f
    1454:	ldrb	r3, [lr, r3]
    1458:	strb	r3, [r2, #-1]
    145c:	ldr	r3, [ip]
    1460:	add	r0, r0, #3
    1464:	add	r3, r3, #4
    1468:	str	r3, [ip]
    146c:	b	134c <o_base64_encode@@Base+0x58>
    1470:	cmp	r2, #0
    1474:	beq	13c4 <o_base64_encode@@Base+0xd0>
    1478:	ldrb	r3, [r0]
    147c:	ldrb	lr, [r0, #1]
    1480:	ldr	r1, [pc, #72]	; 14d0 <o_base64_encode@@Base+0x1dc>
    1484:	lsl	r3, r3, #4
    1488:	and	r3, r3, #48	; 0x30
    148c:	orr	r3, r3, lr, lsr #4
    1490:	mov	lr, r2
    1494:	add	r1, pc, r1
    1498:	ldrb	r3, [r1, r3]
    149c:	strb	r3, [lr], #2
    14a0:	ldrb	r3, [r0, #1]
    14a4:	lsl	r3, r3, #2
    14a8:	and	r3, r3, #60	; 0x3c
    14ac:	ldrb	r3, [r1, r3]
    14b0:	strb	r3, [r2, #1]
    14b4:	mov	r2, lr
    14b8:	b	13c4 <o_base64_encode@@Base+0xd0>
    14bc:	mov	r0, #0
    14c0:	pop	{r4, pc}
    14c4:	andeq	r1, r0, ip, lsr r3
    14c8:	andeq	r1, r0, r4, lsl r3
    14cc:	andeq	r1, r0, r0, ror #5
    14d0:	strdeq	r1, [r0], -r0

000014d4 <o_base64_decode@@Base>:
    14d4:	cmp	r1, #0
    14d8:	clz	ip, r3
    14dc:	lsr	ip, ip, #5
    14e0:	moveq	ip, #1
    14e4:	cmp	r0, #0
    14e8:	moveq	ip, #1
    14ec:	cmp	ip, #0
    14f0:	bne	14f8 <o_base64_decode@@Base+0x24>
    14f4:	b	1138 <o_strchr@plt+0x138>
    14f8:	mov	r0, #0
    14fc:	bx	lr

00001500 <o_base64url_encode@@Base>:
    1500:	push	{r4, r5, r6, lr}
    1504:	subs	r5, r2, #0
    1508:	mov	r4, r3
    150c:	vpush	{d8}
    1510:	beq	15c0 <o_base64url_encode@@Base+0xc0>
    1514:	bl	ed4 <o_base64_encode@plt>
    1518:	cmp	r0, #0
    151c:	bne	152c <o_base64url_encode@@Base+0x2c>
    1520:	mov	r0, #0
    1524:	vpop	{d8}
    1528:	pop	{r4, r5, r6, pc}
    152c:	ldr	r3, [r4]
    1530:	cmp	r3, #1
    1534:	bls	1594 <o_base64url_encode@@Base+0x94>
    1538:	sub	r2, r3, #2
    153c:	ldrb	r1, [r5, r2]
    1540:	cmp	r1, #61	; 0x3d
    1544:	bne	159c <o_base64url_encode@@Base+0x9c>
    1548:	mov	r3, #0
    154c:	strb	r3, [r5, r2]
    1550:	ldr	r3, [r4]
    1554:	sub	r3, r3, #2
    1558:	str	r3, [r4]
    155c:	mov	r3, #0
    1560:	mov	r1, #95	; 0x5f
    1564:	mov	ip, #45	; 0x2d
    1568:	ldr	r2, [r4]
    156c:	cmp	r2, r3
    1570:	bls	1524 <o_base64url_encode@@Base+0x24>
    1574:	ldrb	r2, [r5, r3]
    1578:	cmp	r2, #43	; 0x2b
    157c:	strbeq	ip, [r5, r3]
    1580:	beq	158c <o_base64url_encode@@Base+0x8c>
    1584:	cmp	r2, #47	; 0x2f
    1588:	strbeq	r1, [r5, r3]
    158c:	add	r3, r3, #1
    1590:	b	1568 <o_base64url_encode@@Base+0x68>
    1594:	cmp	r3, #0
    1598:	beq	1524 <o_base64url_encode@@Base+0x24>
    159c:	sub	r3, r3, #1
    15a0:	ldrb	r2, [r5, r3]
    15a4:	cmp	r2, #61	; 0x3d
    15a8:	bne	155c <o_base64url_encode@@Base+0x5c>
    15ac:	mov	r2, #0
    15b0:	strb	r2, [r5, r3]
    15b4:	ldr	r3, [r4]
    15b8:	sub	r3, r3, #1
    15bc:	b	1558 <o_base64url_encode@@Base+0x58>
    15c0:	cmp	r1, #0
    15c4:	cmpne	r3, #0
    15c8:	beq	1520 <o_base64url_encode@@Base+0x20>
    15cc:	vmov	s15, r1
    15d0:	vldr	d6, [pc, #56]	; 1610 <o_base64url_encode@@Base+0x110>
    15d4:	vcvt.f64.u32	d7, s15
    15d8:	vmul.f64	d7, d7, d6
    15dc:	vldr	d6, [pc, #52]	; 1618 <o_base64url_encode@@Base+0x118>
    15e0:	vdiv.f64	d8, d7, d6
    15e4:	vmov.f64	d0, d8
    15e8:	bl	e98 <trunc@plt>
    15ec:	vcmp.f64	d0, d8
    15f0:	mov	r0, #1
    15f4:	vmrs	APSR_nzcv, fpscr
    15f8:	vldrne	d8, [pc, #32]	; 1620 <o_base64url_encode@@Base+0x120>
    15fc:	vaddne.f64	d8, d0, d8
    1600:	vcvt.u32.f64	s16, d8
    1604:	vstr	s16, [r4]
    1608:	b	1524 <o_base64url_encode@@Base+0x24>
    160c:	nop	{0}
    1610:	andeq	r0, r0, r0
    1614:	andsmi	r0, r0, r0
    1618:	andeq	r0, r0, r0
    161c:	andmi	r0, r8, r0
    1620:	andeq	r0, r0, r0
    1624:	svccc	0x00f00000	; IMB

00001628 <o_base64url_2_base64@@Base>:
    1628:	cmp	r0, #0
    162c:	bxeq	lr
    1630:	push	{r4, r5, r6, lr}
    1634:	mov	r5, r3
    1638:	mov	r3, r2
    163c:	mov	r4, r1
    1640:	mov	r2, r1
    1644:	mov	r1, r0
    1648:	mov	r0, r3
    164c:	bl	ebc <memcpy@plt>
    1650:	mov	r3, r0
    1654:	mov	r2, r0
    1658:	str	r4, [r5]
    165c:	add	r1, r4, r0
    1660:	mov	ip, #47	; 0x2f
    1664:	mov	lr, #43	; 0x2b
    1668:	cmp	r1, r2
    166c:	bne	169c <o_base64url_2_base64@@Base+0x74>
    1670:	and	r2, r4, #3
    1674:	cmp	r2, #2
    1678:	bne	16bc <o_base64url_2_base64@@Base+0x94>
    167c:	mov	r2, #61	; 0x3d
    1680:	strb	r2, [r3, r4]
    1684:	strb	r2, [r1, #1]
    1688:	ldr	r3, [r5]
    168c:	add	r3, r3, #2
    1690:	str	r3, [r5]
    1694:	mov	r0, #1
    1698:	pop	{r4, r5, r6, pc}
    169c:	ldrb	r0, [r2]
    16a0:	cmp	r0, #45	; 0x2d
    16a4:	strbeq	lr, [r2]
    16a8:	beq	16b4 <o_base64url_2_base64@@Base+0x8c>
    16ac:	cmp	r0, #95	; 0x5f
    16b0:	strbeq	ip, [r2]
    16b4:	add	r2, r2, #1
    16b8:	b	1668 <o_base64url_2_base64@@Base+0x40>
    16bc:	cmp	r2, #3
    16c0:	bne	1694 <o_base64url_2_base64@@Base+0x6c>
    16c4:	mov	r2, #61	; 0x3d
    16c8:	strb	r2, [r3, r4]
    16cc:	ldr	r3, [r5]
    16d0:	add	r3, r3, #1
    16d4:	b	1690 <o_base64url_2_base64@@Base+0x68>

000016d8 <o_base64url_decode@@Base>:
    16d8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
    16dc:	subs	r8, r0, #0
    16e0:	bne	16f4 <o_base64url_decode@@Base+0x1c>
    16e4:	mov	r4, #0
    16e8:	mov	r0, r4
    16ec:	add	sp, sp, #8
    16f0:	pop	{r4, r5, r6, r7, r8, pc}
    16f4:	add	r0, r1, #3
    16f8:	mov	r7, r3
    16fc:	mov	r6, r2
    1700:	mov	r4, r1
    1704:	bl	f7c <o_malloc@plt>
    1708:	subs	r5, r0, #0
    170c:	beq	16e4 <o_base64url_decode@@Base+0xc>
    1710:	mov	r1, r4
    1714:	add	r3, sp, #4
    1718:	mov	r2, r5
    171c:	mov	r0, r8
    1720:	bl	fb8 <o_base64url_2_base64@plt>
    1724:	cmp	r0, #0
    1728:	moveq	r4, #1
    172c:	beq	1748 <o_base64url_decode@@Base+0x70>
    1730:	mov	r3, r7
    1734:	mov	r2, r6
    1738:	ldr	r1, [sp, #4]
    173c:	mov	r0, r5
    1740:	bl	fd0 <o_base64_decode@plt>
    1744:	mov	r4, r0
    1748:	mov	r0, r5
    174c:	bl	ea4 <o_free@plt>
    1750:	b	16e8 <o_base64url_decode@@Base+0x10>

00001754 <o_base64_2_base64url@@Base>:
    1754:	cmp	r0, #0
    1758:	bxeq	lr
    175c:	push	{r4, r5, r6, lr}
    1760:	mov	r5, r2
    1764:	mov	r4, r1
    1768:	mov	r6, r3
    176c:	mov	r2, r1
    1770:	mov	r1, r0
    1774:	mov	r0, r5
    1778:	bl	ebc <memcpy@plt>
    177c:	mov	r2, r5
    1780:	mov	r1, #95	; 0x5f
    1784:	str	r4, [r6]
    1788:	mov	r0, #45	; 0x2d
    178c:	add	r4, r4, r5
    1790:	cmp	r4, r2
    1794:	bne	17b4 <o_base64_2_base64url@@Base+0x60>
    1798:	ldr	r3, [r6]
    179c:	sub	r3, r3, #1
    17a0:	ldrb	r2, [r5, r3]
    17a4:	cmp	r2, #61	; 0x3d
    17a8:	beq	17d4 <o_base64_2_base64url@@Base+0x80>
    17ac:	mov	r0, #1
    17b0:	pop	{r4, r5, r6, pc}
    17b4:	ldrb	r3, [r2]
    17b8:	cmp	r3, #43	; 0x2b
    17bc:	strbeq	r0, [r2]
    17c0:	beq	17cc <o_base64_2_base64url@@Base+0x78>
    17c4:	cmp	r3, #47	; 0x2f
    17c8:	strbeq	r1, [r2]
    17cc:	add	r2, r2, #1
    17d0:	b	1790 <o_base64_2_base64url@@Base+0x3c>
    17d4:	str	r3, [r6]
    17d8:	b	1798 <o_base64_2_base64url@@Base+0x44>

000017dc <o_malloc@@Base>:
    17dc:	cmp	r0, #0
    17e0:	bxeq	lr
    17e4:	ldr	r3, [pc, #8]	; 17f4 <o_malloc@@Base+0x18>
    17e8:	add	r3, pc, r3
    17ec:	ldr	r3, [r3]
    17f0:	bx	r3
    17f4:	andeq	r1, r1, r8, asr #17

000017f8 <o_realloc@@Base>:
    17f8:	subs	r3, r1, #0
    17fc:	beq	1810 <o_realloc@@Base+0x18>
    1800:	ldr	r3, [pc, #16]	; 1818 <o_realloc@@Base+0x20>
    1804:	add	r3, pc, r3
    1808:	ldr	r3, [r3, #4]
    180c:	bx	r3
    1810:	mov	r0, r3
    1814:	bx	lr
    1818:	andeq	r1, r1, ip, lsr #17

0000181c <o_free@@Base>:
    181c:	cmp	r0, #0
    1820:	bxeq	lr
    1824:	ldr	r3, [pc, #8]	; 1834 <o_free@@Base+0x18>
    1828:	add	r3, pc, r3
    182c:	ldr	r3, [r3, #8]
    1830:	bx	r3
    1834:	andeq	r1, r1, r8, lsl #17

00001838 <o_set_alloc_funcs@@Base>:
    1838:	ldr	r3, [pc, #12]	; 184c <o_set_alloc_funcs@@Base+0x14>
    183c:	add	r3, pc, r3
    1840:	strd	r0, [r3]
    1844:	str	r2, [r3, #8]
    1848:	bx	lr
    184c:	andeq	r1, r1, r4, ror r8

00001850 <o_get_alloc_funcs@@Base>:
    1850:	cmp	r0, #0
    1854:	beq	1868 <o_get_alloc_funcs@@Base+0x18>
    1858:	ldr	r3, [pc, #60]	; 189c <o_get_alloc_funcs@@Base+0x4c>
    185c:	add	r3, pc, r3
    1860:	ldr	r3, [r3]
    1864:	str	r3, [r0]
    1868:	cmp	r1, #0
    186c:	beq	1880 <o_get_alloc_funcs@@Base+0x30>
    1870:	ldr	r3, [pc, #40]	; 18a0 <o_get_alloc_funcs@@Base+0x50>
    1874:	add	r3, pc, r3
    1878:	ldr	r3, [r3, #4]
    187c:	str	r3, [r1]
    1880:	cmp	r2, #0
    1884:	bxeq	lr
    1888:	ldr	r3, [pc, #20]	; 18a4 <o_get_alloc_funcs@@Base+0x54>
    188c:	add	r3, pc, r3
    1890:	ldr	r3, [r3, #8]
    1894:	str	r3, [r2]
    1898:	bx	lr
    189c:	andeq	r1, r1, r4, asr r8
    18a0:	andeq	r1, r1, ip, lsr r8
    18a4:	andeq	r1, r1, r4, lsr #16

000018a8 <msprintf@@Base>:
    18a8:	push	{r0, r1, r2, r3}
    18ac:	push	{r0, r1, r4, r5, r6, lr}
    18b0:	ldr	r4, [sp, #24]
    18b4:	cmp	r4, #0
    18b8:	moveq	r5, r4
    18bc:	beq	1900 <msprintf@@Base+0x58>
    18c0:	add	r3, sp, #28
    18c4:	mov	r1, #0
    18c8:	mov	r2, r4
    18cc:	mov	r0, r1
    18d0:	str	r3, [sp]
    18d4:	str	r3, [sp, #4]
    18d8:	bl	fdc <vsnprintf@plt>
    18dc:	add	r6, r0, #1
    18e0:	mov	r0, r6
    18e4:	bl	f7c <o_malloc@plt>
    18e8:	subs	r5, r0, #0
    18ec:	beq	1900 <msprintf@@Base+0x58>
    18f0:	mov	r2, r4
    18f4:	mov	r1, r6
    18f8:	ldr	r3, [sp, #4]
    18fc:	bl	fdc <vsnprintf@plt>
    1900:	mov	r0, r5
    1904:	add	sp, sp, #8
    1908:	pop	{r4, r5, r6, lr}
    190c:	add	sp, sp, #16
    1910:	bx	lr

00001914 <mstrcatf@@Base>:
    1914:	push	{r1, r2, r3}
    1918:	push	{r0, r1, r4, r5, r6, r7, lr}
    191c:	ldr	r4, [sp, #28]
    1920:	cmp	r4, #0
    1924:	beq	19a4 <mstrcatf@@Base+0x90>
    1928:	add	r3, sp, #32
    192c:	cmp	r0, #0
    1930:	mov	r5, r0
    1934:	mov	r2, r4
    1938:	str	r3, [sp]
    193c:	str	r3, [sp, #4]
    1940:	beq	19b8 <mstrcatf@@Base+0xa4>
    1944:	mov	r1, #0
    1948:	mov	r0, r1
    194c:	bl	fdc <vsnprintf@plt>
    1950:	add	r7, r0, #1
    1954:	mov	r0, r7
    1958:	bl	f7c <o_malloc@plt>
    195c:	subs	r6, r0, #0
    1960:	beq	19a0 <mstrcatf@@Base+0x8c>
    1964:	mov	r2, r4
    1968:	mov	r1, r7
    196c:	ldr	r3, [sp, #4]
    1970:	bl	fdc <vsnprintf@plt>
    1974:	ldr	r0, [pc, #108]	; 19e8 <mstrcatf@@Base+0xd4>
    1978:	mov	r2, r6
    197c:	mov	r1, r5
    1980:	add	r0, pc, r0
    1984:	bl	fac <msprintf@plt>
    1988:	mov	r4, r0
    198c:	mov	r0, r6
    1990:	bl	ea4 <o_free@plt>
    1994:	mov	r6, r4
    1998:	mov	r0, r5
    199c:	bl	ea4 <o_free@plt>
    19a0:	mov	r4, r6
    19a4:	mov	r0, r4
    19a8:	add	sp, sp, #8
    19ac:	pop	{r4, r5, r6, r7, lr}
    19b0:	add	sp, sp, #12
    19b4:	bx	lr
    19b8:	mov	r1, r0
    19bc:	bl	fdc <vsnprintf@plt>
    19c0:	add	r5, r0, #1
    19c4:	mov	r0, r5
    19c8:	bl	f7c <o_malloc@plt>
    19cc:	subs	r6, r0, #0
    19d0:	beq	19a0 <mstrcatf@@Base+0x8c>
    19d4:	mov	r2, r4
    19d8:	mov	r1, r5
    19dc:	ldr	r3, [sp, #4]
    19e0:	bl	fdc <vsnprintf@plt>
    19e4:	b	19a0 <mstrcatf@@Base+0x8c>
    19e8:	andeq	r0, r0, r7, asr #26

000019ec <o_strndup@@Base>:
    19ec:	push	{r4, r5, r6, lr}
    19f0:	subs	r4, r0, #0
    19f4:	beq	1a24 <o_strndup@@Base+0x38>
    19f8:	add	r0, r1, #1
    19fc:	mov	r5, r1
    1a00:	bl	f7c <o_malloc@plt>
    1a04:	mov	r6, r4
    1a08:	subs	r4, r0, #0
    1a0c:	beq	1a24 <o_strndup@@Base+0x38>
    1a10:	mov	r2, r5
    1a14:	mov	r1, r6
    1a18:	bl	ebc <memcpy@plt>
    1a1c:	mov	r3, #0
    1a20:	strb	r3, [r4, r5]
    1a24:	mov	r0, r4
    1a28:	pop	{r4, r5, r6, pc}

00001a2c <o_strdup@@Base>:
    1a2c:	push	{r4, lr}
    1a30:	subs	r4, r0, #0
    1a34:	popeq	{r4, pc}
    1a38:	bl	f4c <strlen@plt>
    1a3c:	mov	r1, r0
    1a40:	mov	r0, r4
    1a44:	pop	{r4, lr}
    1a48:	b	e8c <o_strndup@plt>

00001a4c <str_replace@@Base>:
    1a4c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1a50:	mov	r8, r2
    1a54:	clz	r2, r2
    1a58:	lsr	r2, r2, #5
    1a5c:	cmp	r1, #0
    1a60:	moveq	r2, #1
    1a64:	cmp	r0, #0
    1a68:	movne	r4, r2
    1a6c:	moveq	r4, #1
    1a70:	cmp	r4, #0
    1a74:	beq	1a88 <str_replace@@Base+0x3c>
    1a78:	mov	r9, #0
    1a7c:	mov	r0, r9
    1a80:	add	sp, sp, #8
    1a84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1a88:	mov	sl, r1
    1a8c:	mov	r6, r0
    1a90:	bl	e44 <strstr@plt>
    1a94:	cmp	r0, #0
    1a98:	bne	1aac <str_replace@@Base+0x60>
    1a9c:	mov	r0, r6
    1aa0:	add	sp, sp, #8
    1aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    1aa8:	b	ec8 <o_strdup@plt>
    1aac:	sub	r7, r0, r6
    1ab0:	add	r9, r7, #1
    1ab4:	mov	r0, r9
    1ab8:	bl	f7c <o_malloc@plt>
    1abc:	subs	r5, r0, #0
    1ac0:	beq	1a78 <str_replace@@Base+0x2c>
    1ac4:	mov	r2, r7
    1ac8:	mov	r1, r6
    1acc:	bl	ebc <memcpy@plt>
    1ad0:	mov	r0, r5
    1ad4:	strb	r4, [r5, r7]
    1ad8:	bl	f4c <strlen@plt>
    1adc:	mov	r7, r0
    1ae0:	mov	r0, sl
    1ae4:	bl	f4c <strlen@plt>
    1ae8:	add	r0, r7, r0
    1aec:	mov	r2, r8
    1af0:	add	r0, r6, r0
    1af4:	mov	r1, sl
    1af8:	bl	1a4c <str_replace@@Base>
    1afc:	subs	r6, r0, #0
    1b00:	moveq	r0, r5
    1b04:	beq	1b70 <str_replace@@Base+0x124>
    1b08:	mov	r0, r8
    1b0c:	bl	f4c <strlen@plt>
    1b10:	mov	r7, r0
    1b14:	mov	r0, r6
    1b18:	bl	f4c <strlen@plt>
    1b1c:	add	r7, r7, r0
    1b20:	add	r7, r7, r9
    1b24:	mov	r0, r7
    1b28:	bl	f7c <o_malloc@plt>
    1b2c:	subs	r9, r0, #0
    1b30:	moveq	r0, r5
    1b34:	beq	1b78 <str_replace@@Base+0x12c>
    1b38:	ldr	r2, [pc, #72]	; 1b88 <str_replace@@Base+0x13c>
    1b3c:	mov	r3, r5
    1b40:	mov	r1, r7
    1b44:	str	r8, [sp]
    1b48:	str	r6, [sp, #4]
    1b4c:	add	r2, pc, r2
    1b50:	bl	f70 <snprintf@plt>
    1b54:	cmp	r0, #0
    1b58:	mov	r0, r5
    1b5c:	bge	1b78 <str_replace@@Base+0x12c>
    1b60:	bl	ea4 <o_free@plt>
    1b64:	mov	r0, r6
    1b68:	bl	ea4 <o_free@plt>
    1b6c:	mov	r0, r9
    1b70:	bl	ea4 <o_free@plt>
    1b74:	b	1a78 <str_replace@@Base+0x2c>
    1b78:	bl	ea4 <o_free@plt>
    1b7c:	mov	r0, r6
    1b80:	bl	ea4 <o_free@plt>
    1b84:	b	1a7c <str_replace@@Base+0x30>
    1b88:	andeq	r0, r0, r9, ror fp

00001b8c <o_strcmp@@Base>:
    1b8c:	orrs	r3, r0, r1
    1b90:	beq	1bb8 <o_strcmp@@Base+0x2c>
    1b94:	adds	r3, r0, #0
    1b98:	movne	r3, #1
    1b9c:	cmp	r1, #0
    1ba0:	movne	r3, #0
    1ba4:	cmp	r3, #0
    1ba8:	bne	1bc0 <o_strcmp@@Base+0x34>
    1bac:	cmp	r0, #0
    1bb0:	beq	1bc8 <o_strcmp@@Base+0x3c>
    1bb4:	b	e74 <strcmp@plt>
    1bb8:	mov	r0, r3
    1bbc:	bx	lr
    1bc0:	mvn	r0, #0
    1bc4:	bx	lr
    1bc8:	mov	r0, #1
    1bcc:	bx	lr

00001bd0 <o_strncmp@@Base>:
    1bd0:	orrs	ip, r0, r1
    1bd4:	push	{r4, lr}
    1bd8:	moveq	lr, #1
    1bdc:	movne	lr, #0
    1be0:	cmp	r2, #0
    1be4:	moveq	lr, #1
    1be8:	cmp	lr, #0
    1bec:	bne	1c1c <o_strncmp@@Base+0x4c>
    1bf0:	adds	ip, r0, #0
    1bf4:	mov	r4, r1
    1bf8:	movne	ip, #1
    1bfc:	cmp	r1, #0
    1c00:	movne	ip, #0
    1c04:	cmp	ip, #0
    1c08:	bne	1c24 <o_strncmp@@Base+0x54>
    1c0c:	cmp	r0, #0
    1c10:	beq	1c2c <o_strncmp@@Base+0x5c>
    1c14:	pop	{r4, lr}
    1c18:	b	ff4 <strncmp@plt>
    1c1c:	mov	r0, #0
    1c20:	pop	{r4, pc}
    1c24:	mvn	r0, #0
    1c28:	pop	{r4, pc}
    1c2c:	mov	r0, #1
    1c30:	pop	{r4, pc}

00001c34 <o_strcpy@@Base>:
    1c34:	cmp	r1, #0
    1c38:	cmpne	r0, #0
    1c3c:	beq	1c44 <o_strcpy@@Base+0x10>
    1c40:	b	f04 <strcpy@plt>
    1c44:	mov	r0, #0
    1c48:	bx	lr

00001c4c <o_strncpy@@Base>:
    1c4c:	cmp	r1, #0
    1c50:	cmpne	r0, #0
    1c54:	beq	1c5c <o_strncpy@@Base+0x10>
    1c58:	b	f94 <strncpy@plt>
    1c5c:	mov	r0, #0
    1c60:	bx	lr

00001c64 <o_strcasecmp@@Base>:
    1c64:	orrs	r2, r0, r1
    1c68:	beq	1ca0 <o_strcasecmp@@Base+0x3c>
    1c6c:	adds	r2, r0, #0
    1c70:	movne	r2, #1
    1c74:	cmp	r1, #0
    1c78:	movne	r2, #0
    1c7c:	cmp	r2, #0
    1c80:	bne	1ca8 <o_strcasecmp@@Base+0x44>
    1c84:	adds	r3, r1, #0
    1c88:	movne	r3, #1
    1c8c:	cmp	r0, #0
    1c90:	movne	r3, #0
    1c94:	cmp	r3, #0
    1c98:	bne	1cb0 <o_strcasecmp@@Base+0x4c>
    1c9c:	b	ee0 <strcasecmp@plt>
    1ca0:	mov	r0, r2
    1ca4:	bx	lr
    1ca8:	mvn	r0, #0
    1cac:	bx	lr
    1cb0:	mov	r0, #1
    1cb4:	bx	lr

00001cb8 <o_strncasecmp@@Base>:
    1cb8:	push	{lr}		; (str lr, [sp, #-4]!)
    1cbc:	orrs	lr, r0, r1
    1cc0:	moveq	lr, #1
    1cc4:	movne	lr, #0
    1cc8:	cmp	r2, #0
    1ccc:	moveq	lr, #1
    1cd0:	cmp	lr, #0
    1cd4:	bne	1d10 <o_strncasecmp@@Base+0x58>
    1cd8:	adds	lr, r0, #0
    1cdc:	movne	lr, #1
    1ce0:	cmp	r1, #0
    1ce4:	movne	lr, #0
    1ce8:	cmp	lr, #0
    1cec:	bne	1d18 <o_strncasecmp@@Base+0x60>
    1cf0:	adds	r3, r1, #0
    1cf4:	movne	r3, #1
    1cf8:	cmp	r0, #0
    1cfc:	movne	r3, #0
    1d00:	cmp	r3, #0
    1d04:	bne	1d20 <o_strncasecmp@@Base+0x68>
    1d08:	pop	{lr}		; (ldr lr, [sp], #4)
    1d0c:	b	f64 <strncasecmp@plt>
    1d10:	mov	r0, #0
    1d14:	pop	{pc}		; (ldr pc, [sp], #4)
    1d18:	mvn	r0, #0
    1d1c:	pop	{pc}		; (ldr pc, [sp], #4)
    1d20:	mov	r0, #1
    1d24:	pop	{pc}		; (ldr pc, [sp], #4)

00001d28 <o_strstr@@Base>:
    1d28:	cmp	r1, #0
    1d2c:	cmpne	r0, #0
    1d30:	beq	1d38 <o_strstr@@Base+0x10>
    1d34:	b	e44 <strstr@plt>
    1d38:	mov	r0, #0
    1d3c:	bx	lr

00001d40 <o_strchr@@Base>:
    1d40:	cmp	r0, #0
    1d44:	bxeq	lr
    1d48:	b	f58 <strchr@plt>

00001d4c <o_strrchr@@Base>:
    1d4c:	cmp	r0, #0
    1d50:	bxeq	lr
    1d54:	b	fc4 <strrchr@plt>

00001d58 <o_strnstr@@Base>:
    1d58:	cmp	r1, #0
    1d5c:	cmpne	r0, #0
    1d60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    1d64:	beq	1dd4 <o_strnstr@@Base+0x7c>
    1d68:	mov	r4, r0
    1d6c:	mov	r0, r1
    1d70:	mov	r6, r2
    1d74:	mov	r5, r1
    1d78:	bl	f4c <strlen@plt>
    1d7c:	subs	r9, r0, #0
    1d80:	movne	r8, r4
    1d84:	subne	r6, r6, r9
    1d88:	movne	r7, r8
    1d8c:	bne	1dc4 <o_strnstr@@Base+0x6c>
    1d90:	mov	r0, r4
    1d94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1d98:	ldrb	r2, [r4]
    1d9c:	add	r7, r7, #1
    1da0:	ldrb	r3, [r5]
    1da4:	cmp	r2, r3
    1da8:	bne	1dc4 <o_strnstr@@Base+0x6c>
    1dac:	mov	r2, r9
    1db0:	mov	r1, r5
    1db4:	mov	r0, r4
    1db8:	bl	ff4 <strncmp@plt>
    1dbc:	cmp	r0, #0
    1dc0:	beq	1d90 <o_strnstr@@Base+0x38>
    1dc4:	sub	r3, r7, r8
    1dc8:	mov	r4, r7
    1dcc:	cmp	r6, r3
    1dd0:	bge	1d98 <o_strnstr@@Base+0x40>
    1dd4:	mov	r4, #0
    1dd8:	b	1d90 <o_strnstr@@Base+0x38>

00001ddc <o_strcasestr@@Base>:
    1ddc:	cmp	r1, #0
    1de0:	cmpne	r0, #0
    1de4:	beq	1dec <o_strcasestr@@Base+0x10>
    1de8:	b	e68 <strcasestr@plt>
    1dec:	mov	r0, #0
    1df0:	bx	lr

00001df4 <o_strlen@@Base>:
    1df4:	cmp	r0, #0
    1df8:	bxeq	lr
    1dfc:	b	f4c <strlen@plt>

00001e00 <o_strnchr@@Base>:
    1e00:	cmp	r0, #0
    1e04:	cmpne	r1, #0
    1e08:	bne	1e14 <o_strnchr@@Base+0x14>
    1e0c:	mov	r0, #0
    1e10:	bx	lr
    1e14:	push	{r4, r5, r6, r7, r8, lr}
    1e18:	mov	r4, r0
    1e1c:	mov	r7, r2
    1e20:	add	r5, r1, r0
    1e24:	mov	r6, r0
    1e28:	cmp	r6, r5
    1e2c:	beq	1e44 <o_strnchr@@Base+0x44>
    1e30:	mov	r0, r4
    1e34:	bl	f10 <o_strlen@plt>
    1e38:	sub	r3, r6, r4
    1e3c:	cmp	r0, r3
    1e40:	bhi	1e4c <o_strnchr@@Base+0x4c>
    1e44:	mov	r0, #0
    1e48:	pop	{r4, r5, r6, r7, r8, pc}
    1e4c:	mov	r0, r6
    1e50:	add	r6, r6, #1
    1e54:	ldrb	r3, [r0]
    1e58:	cmp	r3, r7
    1e5c:	bne	1e28 <o_strnchr@@Base+0x28>
    1e60:	pop	{r4, r5, r6, r7, r8, pc}

00001e64 <o_strrnchr@@Base>:
    1e64:	cmp	r0, #0
    1e68:	cmpne	r1, #0
    1e6c:	bne	1e78 <o_strrnchr@@Base+0x14>
    1e70:	mov	r0, #0
    1e74:	bx	lr
    1e78:	push	{r4, r5, r6, r7, r8, lr}
    1e7c:	mov	r5, r0
    1e80:	mov	r6, r1
    1e84:	mov	r7, r2
    1e88:	bl	f10 <o_strlen@plt>
    1e8c:	sub	r4, r0, #1
    1e90:	cmp	r4, #0
    1e94:	blt	1eb0 <o_strrnchr@@Base+0x4c>
    1e98:	mov	r0, r5
    1e9c:	bl	f10 <o_strlen@plt>
    1ea0:	mvn	r3, r4
    1ea4:	add	r0, r3, r0
    1ea8:	cmp	r0, r6
    1eac:	bcc	1eb8 <o_strrnchr@@Base+0x54>
    1eb0:	mov	r0, #0
    1eb4:	pop	{r4, r5, r6, r7, r8, pc}
    1eb8:	ldrb	r3, [r5, r4]
    1ebc:	add	r0, r5, r4
    1ec0:	cmp	r3, r7
    1ec4:	popeq	{r4, r5, r6, r7, r8, pc}
    1ec8:	sub	r4, r4, #1
    1ecc:	b	1e90 <o_strrnchr@@Base+0x2c>

00001ed0 <split_string@@Base>:
    1ed0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ed4:	adds	r4, r1, #0
    1ed8:	movne	r4, #1
    1edc:	cmp	r0, #0
    1ee0:	moveq	r4, #0
    1ee4:	cmp	r4, #0
    1ee8:	beq	1f64 <split_string@@Base+0x94>
    1eec:	cmp	r2, #0
    1ef0:	mov	r5, r2
    1ef4:	movne	r3, #0
    1ef8:	mov	r6, r0
    1efc:	mov	r7, r1
    1f00:	mov	r4, #1
    1f04:	strne	r3, [r2]
    1f08:	mov	r9, #0
    1f0c:	bl	e44 <strstr@plt>
    1f10:	mov	r8, r0
    1f14:	cmp	r8, #0
    1f18:	bne	1f70 <split_string@@Base+0xa0>
    1f1c:	cmp	r5, #0
    1f20:	beq	1f64 <split_string@@Base+0x94>
    1f24:	add	r7, r4, #1
    1f28:	ldr	r0, [r5]
    1f2c:	lsl	r7, r7, #2
    1f30:	mov	r1, r7
    1f34:	bl	f28 <o_realloc@plt>
    1f38:	cmp	r0, #0
    1f3c:	mov	r9, r0
    1f40:	str	r0, [r5]
    1f44:	beq	1f64 <split_string@@Base+0x94>
    1f48:	mov	r0, r6
    1f4c:	sub	sl, r7, #8
    1f50:	bl	ec8 <o_strdup@plt>
    1f54:	ldr	r3, [r5]
    1f58:	str	r0, [r9, sl]
    1f5c:	add	r7, r3, r7
    1f60:	str	r8, [r7, #-4]
    1f64:	mov	r0, r4
    1f68:	add	sp, sp, #12
    1f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f70:	cmp	r5, #0
    1f74:	add	r4, r4, #1
    1f78:	beq	1fc4 <split_string@@Base+0xf4>
    1f7c:	lsl	sl, r4, #2
    1f80:	ldr	r0, [r5]
    1f84:	mov	r1, sl
    1f88:	bl	f28 <o_realloc@plt>
    1f8c:	cmp	r0, #0
    1f90:	mov	fp, r0
    1f94:	str	r0, [r5]
    1f98:	beq	1fc4 <split_string@@Base+0xf4>
    1f9c:	sub	r3, sl, #8
    1fa0:	sub	r1, r8, r6
    1fa4:	mov	r0, r6
    1fa8:	str	r3, [sp, #4]
    1fac:	bl	e8c <o_strndup@plt>
    1fb0:	ldr	r1, [r5]
    1fb4:	ldr	r3, [sp, #4]
    1fb8:	add	r1, r1, sl
    1fbc:	str	r0, [fp, r3]
    1fc0:	str	r9, [r1, #-4]
    1fc4:	mov	r0, r7
    1fc8:	bl	f4c <strlen@plt>
    1fcc:	add	r6, r8, r0
    1fd0:	mov	r1, r7
    1fd4:	mov	r0, r6
    1fd8:	bl	e44 <strstr@plt>
    1fdc:	mov	r8, r0
    1fe0:	b	1f14 <split_string@@Base+0x44>

00001fe4 <free_string_array@@Base>:
    1fe4:	push	{r4, r5, r6, lr}
    1fe8:	subs	r4, r0, #0
    1fec:	subne	r5, r4, #4
    1ff0:	movne	r6, #0
    1ff4:	popeq	{r4, r5, r6, pc}
    1ff8:	ldr	r0, [r5, #4]!
    1ffc:	cmp	r0, #0
    2000:	bne	2010 <free_string_array@@Base+0x2c>
    2004:	mov	r0, r4
    2008:	pop	{r4, r5, r6, lr}
    200c:	b	ea4 <o_free@plt>
    2010:	bl	ea4 <o_free@plt>
    2014:	str	r6, [r5]
    2018:	b	1ff8 <free_string_array@@Base+0x14>

0000201c <string_array_size@@Base>:
    201c:	subs	r3, r0, #0
    2020:	movne	r0, #0
    2024:	bne	2034 <string_array_size@@Base+0x18>
    2028:	mov	r0, r3
    202c:	bx	lr
    2030:	add	r0, r0, #1
    2034:	ldr	r2, [r3, r0, lsl #2]
    2038:	cmp	r2, #0
    203c:	bne	2030 <string_array_size@@Base+0x14>
    2040:	bx	lr

00002044 <string_array_join@@Base>:
    2044:	push	{r4, r5, r6, r7, r8, lr}
    2048:	adds	r4, r1, #0
    204c:	movne	r4, #1
    2050:	cmp	r0, #0
    2054:	moveq	r4, #0
    2058:	cmp	r4, #0
    205c:	beq	2080 <string_array_join@@Base+0x3c>
    2060:	ldr	r7, [pc, #92]	; 20c4 <string_array_join@@Base+0x80>
    2064:	mov	r6, r1
    2068:	sub	r5, r0, #4
    206c:	mov	r4, #0
    2070:	add	r7, pc, r7
    2074:	ldr	r3, [r5, #4]!
    2078:	cmp	r3, #0
    207c:	bne	2088 <string_array_join@@Base+0x44>
    2080:	mov	r0, r4
    2084:	pop	{r4, r5, r6, r7, r8, pc}
    2088:	cmp	r4, #0
    208c:	bne	20a0 <string_array_join@@Base+0x5c>
    2090:	mov	r0, r3
    2094:	bl	ec8 <o_strdup@plt>
    2098:	mov	r4, r0
    209c:	b	2074 <string_array_join@@Base+0x30>
    20a0:	mov	r1, r4
    20a4:	mov	r2, r6
    20a8:	mov	r0, r7
    20ac:	bl	fac <msprintf@plt>
    20b0:	mov	r8, r0
    20b4:	mov	r0, r4
    20b8:	bl	ea4 <o_free@plt>
    20bc:	mov	r4, r8
    20c0:	b	2074 <string_array_join@@Base+0x30>
    20c4:	andeq	r0, r0, r5, asr r6

000020c8 <trimwhitespace@@Base>:
    20c8:	push	{r4, r5, r6, lr}
    20cc:	subs	r4, r0, #0
    20d0:	beq	212c <trimwhitespace@@Base+0x64>
    20d4:	ldrb	r3, [r4]
    20d8:	cmp	r3, #0
    20dc:	beq	212c <trimwhitespace@@Base+0x64>
    20e0:	bl	f40 <__ctype_b_loc@plt>
    20e4:	ldr	r1, [r0]
    20e8:	mov	r5, r0
    20ec:	mov	r3, r4
    20f0:	mov	r4, r3
    20f4:	ldrb	r2, [r3], #1
    20f8:	lsl	r2, r2, #1
    20fc:	ldrh	r2, [r1, r2]
    2100:	tst	r2, #8192	; 0x2000
    2104:	bne	20f0 <trimwhitespace@@Base+0x28>
    2108:	mov	r0, r4
    210c:	bl	f10 <o_strlen@plt>
    2110:	sub	r0, r0, #1
    2114:	add	r0, r4, r0
    2118:	cmp	r4, r0
    211c:	mov	r2, r0
    2120:	bcc	2134 <trimwhitespace@@Base+0x6c>
    2124:	mov	r3, #0
    2128:	strb	r3, [r2, #1]
    212c:	mov	r0, r4
    2130:	pop	{r4, r5, r6, pc}
    2134:	ldrb	r3, [r2]
    2138:	sub	r0, r0, #1
    213c:	ldr	r1, [r5]
    2140:	lsl	r3, r3, #1
    2144:	ldrh	r3, [r1, r3]
    2148:	tst	r3, #8192	; 0x2000
    214c:	bne	2118 <trimwhitespace@@Base+0x50>
    2150:	b	2124 <trimwhitespace@@Base+0x5c>

00002154 <trimcharacter@@Base>:
    2154:	push	{r4, r5, r6, lr}
    2158:	subs	r4, r0, #0
    215c:	beq	21a8 <trimcharacter@@Base+0x54>
    2160:	ldrb	r3, [r4]
    2164:	cmp	r3, #0
    2168:	beq	21a8 <trimcharacter@@Base+0x54>
    216c:	mov	r5, r1
    2170:	mov	r3, r4
    2174:	mov	r4, r3
    2178:	ldrb	r2, [r3], #1
    217c:	cmp	r2, r5
    2180:	beq	2174 <trimcharacter@@Base+0x20>
    2184:	mov	r0, r4
    2188:	bl	f10 <o_strlen@plt>
    218c:	sub	r0, r0, #1
    2190:	add	r0, r4, r0
    2194:	cmp	r4, r0
    2198:	mov	r3, r0
    219c:	bcc	21b0 <trimcharacter@@Base+0x5c>
    21a0:	mov	r2, #0
    21a4:	strb	r2, [r3, #1]
    21a8:	mov	r0, r4
    21ac:	pop	{r4, r5, r6, pc}
    21b0:	ldrb	r2, [r3]
    21b4:	sub	r0, r0, #1
    21b8:	cmp	r2, r5
    21bc:	beq	2194 <trimcharacter@@Base+0x40>
    21c0:	b	21a0 <trimcharacter@@Base+0x4c>

000021c4 <string_array_has_value@@Base>:
    21c4:	cmp	r0, #0
    21c8:	cmpne	r1, #0
    21cc:	bne	21d8 <string_array_has_value@@Base+0x14>
    21d0:	mov	r0, #0
    21d4:	bx	lr
    21d8:	push	{r4, r5, r6, lr}
    21dc:	mov	r5, r1
    21e0:	sub	r4, r0, #4
    21e4:	ldr	r0, [r4, #4]!
    21e8:	cmp	r0, #0
    21ec:	bne	21f8 <string_array_has_value@@Base+0x34>
    21f0:	mov	r0, #0
    21f4:	pop	{r4, r5, r6, pc}
    21f8:	mov	r1, r5
    21fc:	bl	eec <o_strcmp@plt>
    2200:	cmp	r0, #0
    2204:	bne	21e4 <string_array_has_value@@Base+0x20>
    2208:	mov	r0, #1
    220c:	pop	{r4, r5, r6, pc}

00002210 <string_array_has_value_case@@Base>:
    2210:	cmp	r0, #0
    2214:	cmpne	r1, #0
    2218:	bne	2224 <string_array_has_value_case@@Base+0x14>
    221c:	mov	r0, #0
    2220:	bx	lr
    2224:	push	{r4, r5, r6, lr}
    2228:	mov	r5, r1
    222c:	sub	r4, r0, #4
    2230:	ldr	r0, [r4, #4]!
    2234:	cmp	r0, #0
    2238:	bne	2244 <string_array_has_value_case@@Base+0x34>
    223c:	mov	r0, #0
    2240:	pop	{r4, r5, r6, pc}
    2244:	mov	r1, r5
    2248:	bl	f1c <o_strcasecmp@plt>
    224c:	cmp	r0, #0
    2250:	bne	2230 <string_array_has_value_case@@Base+0x20>
    2254:	mov	r0, #1
    2258:	pop	{r4, r5, r6, pc}

0000225c <string_array_has_value_n@@Base>:
    225c:	cmp	r0, #0
    2260:	cmpne	r1, #0
    2264:	bne	2270 <string_array_has_value_n@@Base+0x14>
    2268:	mov	r0, #0
    226c:	bx	lr
    2270:	push	{r4, r5, r6, lr}
    2274:	mov	r5, r1
    2278:	mov	r6, r2
    227c:	sub	r4, r0, #4
    2280:	ldr	r0, [r4, #4]!
    2284:	cmp	r0, #0
    2288:	bne	2294 <string_array_has_value_n@@Base+0x38>
    228c:	mov	r0, #0
    2290:	pop	{r4, r5, r6, pc}
    2294:	mov	r2, r6
    2298:	mov	r1, r5
    229c:	bl	fe8 <o_strncmp@plt>
    22a0:	cmp	r0, #0
    22a4:	bne	2280 <string_array_has_value_n@@Base+0x24>
    22a8:	mov	r0, #1
    22ac:	pop	{r4, r5, r6, pc}

000022b0 <string_array_has_value_ncase@@Base>:
    22b0:	cmp	r0, #0
    22b4:	cmpne	r1, #0
    22b8:	bne	22c4 <string_array_has_value_ncase@@Base+0x14>
    22bc:	mov	r0, #0
    22c0:	bx	lr
    22c4:	push	{r4, r5, r6, lr}
    22c8:	mov	r5, r1
    22cc:	mov	r6, r2
    22d0:	sub	r4, r0, #4
    22d4:	ldr	r0, [r4, #4]!
    22d8:	cmp	r0, #0
    22dc:	bne	22e8 <string_array_has_value_ncase@@Base+0x38>
    22e0:	mov	r0, #0
    22e4:	pop	{r4, r5, r6, pc}
    22e8:	mov	r2, r6
    22ec:	mov	r1, r5
    22f0:	bl	e5c <o_strncasecmp@plt>
    22f4:	cmp	r0, #0
    22f8:	bne	22d4 <string_array_has_value_ncase@@Base+0x24>
    22fc:	mov	r0, #1
    2300:	pop	{r4, r5, r6, pc}

00002304 <string_array_has_trimmed_value@@Base>:
    2304:	push	{r4, r5, r6, r7, r8, lr}
    2308:	adds	r4, r1, #0
    230c:	movne	r4, #1
    2310:	cmp	r0, #0
    2314:	moveq	r4, #0
    2318:	cmp	r4, #0
    231c:	beq	2340 <string_array_has_trimmed_value@@Base+0x3c>
    2320:	mov	r5, r0
    2324:	mov	r0, r1
    2328:	bl	ec8 <o_strdup@plt>
    232c:	subs	r6, r0, #0
    2330:	bne	2348 <string_array_has_trimmed_value@@Base+0x44>
    2334:	mov	r4, #0
    2338:	mov	r0, r6
    233c:	bl	ea4 <o_free@plt>
    2340:	mov	r0, r4
    2344:	pop	{r4, r5, r6, r7, r8, pc}
    2348:	bl	ef8 <trimwhitespace@plt>
    234c:	mov	r7, r0
    2350:	sub	r5, r5, #4
    2354:	mov	r4, #0
    2358:	ldr	r0, [r5, #4]!
    235c:	cmp	r0, #0
    2360:	beq	2338 <string_array_has_trimmed_value@@Base+0x34>
    2364:	cmp	r4, #0
    2368:	bne	2338 <string_array_has_trimmed_value@@Base+0x34>
    236c:	bl	ec8 <o_strdup@plt>
    2370:	subs	r8, r0, #0
    2374:	beq	2334 <string_array_has_trimmed_value@@Base+0x30>
    2378:	bl	ef8 <trimwhitespace@plt>
    237c:	mov	r1, r7
    2380:	bl	eec <o_strcmp@plt>
    2384:	mov	r4, r0
    2388:	mov	r0, r8
    238c:	clz	r4, r4
    2390:	bl	ea4 <o_free@plt>
    2394:	lsr	r4, r4, #5
    2398:	b	2358 <string_array_has_trimmed_value@@Base+0x54>

0000239c <pointer_list_init@@Base>:
    239c:	cmp	r0, #0
    23a0:	movne	r3, #0
    23a4:	strne	r3, [r0]
    23a8:	strne	r3, [r0, #4]
    23ac:	bx	lr

000023b0 <pointer_list_size@@Base>:
    23b0:	cmp	r0, #0
    23b4:	ldrne	r0, [r0]
    23b8:	bx	lr

000023bc <pointer_list_append@@Base>:
    23bc:	cmp	r0, #0
    23c0:	bxeq	lr
    23c4:	push	{r4, r5, r6, lr}
    23c8:	mov	r6, r1
    23cc:	mov	r5, r0
    23d0:	ldr	r1, [r0]
    23d4:	ldr	r0, [r0, #4]
    23d8:	add	r1, r1, #1
    23dc:	lsl	r1, r1, #2
    23e0:	bl	f28 <o_realloc@plt>
    23e4:	cmp	r0, #0
    23e8:	mov	r4, r0
    23ec:	str	r0, [r5, #4]
    23f0:	beq	240c <pointer_list_append@@Base+0x50>
    23f4:	ldr	r3, [r5]
    23f8:	mov	r0, #1
    23fc:	str	r6, [r4, r3, lsl #2]
    2400:	add	r3, r3, #1
    2404:	str	r3, [r5]
    2408:	pop	{r4, r5, r6, pc}
    240c:	bl	ea4 <o_free@plt>
    2410:	mov	r0, r4
    2414:	str	r4, [r5, #4]
    2418:	pop	{r4, r5, r6, pc}

0000241c <pointer_list_get_at@@Base>:
    241c:	cmp	r0, #0
    2420:	bxeq	lr
    2424:	ldr	r3, [r0]
    2428:	cmp	r3, r1
    242c:	ldrhi	r3, [r0, #4]
    2430:	ldrhi	r0, [r3, r1, lsl #2]
    2434:	movls	r0, #0
    2438:	bx	lr

0000243c <pointer_list_remove_at@@Base>:
    243c:	push	{r4, lr}
    2440:	subs	r4, r0, #0
    2444:	beq	2458 <pointer_list_remove_at@@Base+0x1c>
    2448:	ldr	r3, [r4]
    244c:	cmp	r3, r1
    2450:	subhi	r2, r3, #1
    2454:	bhi	2470 <pointer_list_remove_at@@Base+0x34>
    2458:	mov	r0, #0
    245c:	pop	{r4, pc}
    2460:	add	r1, r1, #1
    2464:	ldr	ip, [r0, r1, lsl #2]
    2468:	add	r0, r0, r1, lsl #2
    246c:	str	ip, [r0, #-4]
    2470:	cmp	r2, r1
    2474:	ldr	r0, [r4, #4]
    2478:	bhi	2460 <pointer_list_remove_at@@Base+0x24>
    247c:	cmp	r3, #1
    2480:	bls	24a8 <pointer_list_remove_at@@Base+0x6c>
    2484:	sub	r1, r3, #-1073741823	; 0xc0000001
    2488:	lsl	r1, r1, #2
    248c:	bl	f28 <o_realloc@plt>
    2490:	str	r0, [r4, #4]
    2494:	ldr	r3, [r4]
    2498:	mov	r0, #1
    249c:	sub	r3, r3, #1
    24a0:	str	r3, [r4]
    24a4:	pop	{r4, pc}
    24a8:	bl	ea4 <o_free@plt>
    24ac:	mov	r3, #0
    24b0:	str	r3, [r4, #4]
    24b4:	b	2494 <pointer_list_remove_at@@Base+0x58>

000024b8 <pointer_list_clean@@Base>:
    24b8:	push	{r4, r5, r6, lr}
    24bc:	subs	r5, r0, #0
    24c0:	popeq	{r4, r5, r6, pc}
    24c4:	bl	fa0 <pointer_list_size@plt>
    24c8:	mov	r4, r0
    24cc:	cmp	r4, #0
    24d0:	popeq	{r4, r5, r6, pc}
    24d4:	sub	r4, r4, #1
    24d8:	mov	r0, r5
    24dc:	mov	r1, r4
    24e0:	bl	eb0 <pointer_list_remove_at@plt>
    24e4:	b	24cc <pointer_list_clean@@Base+0x14>

000024e8 <pointer_list_clean_free@@Base>:
    24e8:	push	{r4, r5, r6, lr}
    24ec:	subs	r5, r0, #0
    24f0:	popeq	{r4, r5, r6, pc}
    24f4:	mov	r6, r1
    24f8:	bl	fa0 <pointer_list_size@plt>
    24fc:	mov	r4, r0
    2500:	cmp	r4, #0
    2504:	popeq	{r4, r5, r6, pc}
    2508:	sub	r4, r4, #1
    250c:	mov	r0, r5
    2510:	mov	r1, r4
    2514:	bl	e50 <pointer_list_get_at@plt>
    2518:	blx	r6
    251c:	mov	r1, r4
    2520:	mov	r0, r5
    2524:	bl	eb0 <pointer_list_remove_at@plt>
    2528:	b	2500 <pointer_list_clean_free@@Base+0x18>

0000252c <pointer_list_remove_at_free@@Base>:
    252c:	subs	r3, r0, #0
    2530:	beq	2570 <pointer_list_remove_at_free@@Base+0x44>
    2534:	push	{r4, r5, r6, lr}
    2538:	mov	r5, r1
    253c:	ldr	lr, [r3]
    2540:	cmp	lr, r1
    2544:	bls	2568 <pointer_list_remove_at_free@@Base+0x3c>
    2548:	mov	r4, r3
    254c:	mov	r6, r2
    2550:	bl	e50 <pointer_list_get_at@plt>
    2554:	blx	r6
    2558:	mov	r1, r5
    255c:	mov	r0, r4
    2560:	pop	{r4, r5, r6, lr}
    2564:	b	eb0 <pointer_list_remove_at@plt>
    2568:	mov	r0, #0
    256c:	pop	{r4, r5, r6, pc}
    2570:	mov	r0, #0
    2574:	bx	lr

00002578 <pointer_list_insert_at@@Base>:
    2578:	push	{r4, r5, r6, lr}
    257c:	subs	r4, r0, #0
    2580:	bne	258c <pointer_list_insert_at@@Base+0x14>
    2584:	mov	r0, #0
    2588:	pop	{r4, r5, r6, pc}
    258c:	ldr	r3, [r4]
    2590:	cmp	r3, r2
    2594:	bcc	2584 <pointer_list_insert_at@@Base+0xc>
    2598:	add	r3, r3, #1
    259c:	mov	r6, r1
    25a0:	ldr	r0, [r4, #4]
    25a4:	lsl	r1, r3, #2
    25a8:	mov	r5, r2
    25ac:	bl	f28 <o_realloc@plt>
    25b0:	cmp	r0, #0
    25b4:	str	r0, [r4, #4]
    25b8:	ldrne	r2, [r4]
    25bc:	movne	r3, r2
    25c0:	beq	2584 <pointer_list_insert_at@@Base+0xc>
    25c4:	cmp	r3, r5
    25c8:	ldr	r0, [r4, #4]
    25cc:	bhi	25e4 <pointer_list_insert_at@@Base+0x6c>
    25d0:	add	r2, r2, #1
    25d4:	str	r6, [r0, r5, lsl #2]
    25d8:	mov	r0, #1
    25dc:	str	r2, [r4]
    25e0:	pop	{r4, r5, r6, pc}
    25e4:	add	r1, r0, r3, lsl #2
    25e8:	ldr	r1, [r1, #-4]
    25ec:	str	r1, [r0, r3, lsl #2]
    25f0:	sub	r3, r3, #1
    25f4:	b	25c4 <pointer_list_insert_at@@Base+0x4c>

000025f8 <pointer_list_remove_pointer@@Base>:
    25f8:	cmp	r0, #0
    25fc:	movne	r3, #0
    2600:	ldrne	r2, [r0]
    2604:	bne	2614 <pointer_list_remove_pointer@@Base+0x1c>
    2608:	mov	r0, #0
    260c:	bx	lr
    2610:	add	r3, r3, #1
    2614:	cmp	r2, r3
    2618:	beq	2608 <pointer_list_remove_pointer@@Base+0x10>
    261c:	ldr	ip, [r0, #4]
    2620:	ldr	ip, [ip, r3, lsl #2]
    2624:	cmp	ip, r1
    2628:	bne	2610 <pointer_list_remove_pointer@@Base+0x18>
    262c:	mov	r1, r3
    2630:	b	eb0 <pointer_list_remove_at@plt>

00002634 <pointer_list_remove_pointer_free@@Base>:
    2634:	push	{r4, r5, r6, lr}
    2638:	subs	r5, r0, #0
    263c:	movne	r4, #0
    2640:	ldrne	r3, [r5]
    2644:	bne	2654 <pointer_list_remove_pointer_free@@Base+0x20>
    2648:	mov	r0, #0
    264c:	pop	{r4, r5, r6, pc}
    2650:	add	r4, r4, #1
    2654:	cmp	r3, r4
    2658:	beq	2648 <pointer_list_remove_pointer_free@@Base+0x14>
    265c:	ldr	ip, [r5, #4]
    2660:	ldr	ip, [ip, r4, lsl #2]
    2664:	cmp	ip, r1
    2668:	bne	2650 <pointer_list_remove_pointer_free@@Base+0x1c>
    266c:	mov	r0, r1
    2670:	blx	r2
    2674:	mov	r1, r4
    2678:	mov	r0, r5
    267c:	pop	{r4, r5, r6, lr}
    2680:	b	eb0 <pointer_list_remove_at@plt>

Disassembly of section .fini:

00002684 <.fini>:
    2684:	push	{r3, lr}
    2688:	pop	{r3, pc}
