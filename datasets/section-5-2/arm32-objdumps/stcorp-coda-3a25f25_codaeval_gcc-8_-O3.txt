
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010c78 <.init>:
   10c78:	push	{r3, lr}
   10c7c:	bl	11320 <_start@@Base+0x3c>
   10c80:	pop	{r3, pc}

Disassembly of section .plt:

00010c84 <coda_match_filefilter@plt-0x14>:
   10c84:	push	{lr}		; (str lr, [sp, #-4]!)
   10c88:	ldr	lr, [pc, #4]	; 10c94 <coda_match_filefilter@plt-0x4>
   10c8c:	add	lr, pc, lr
   10c90:	ldr	pc, [lr, #8]!
   10c94:	andeq	r2, r1, ip, ror #6

00010c98 <coda_match_filefilter@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #73728	; 0x12000
   10ca0:	ldr	pc, [ip, #876]!	; 0x36c

00010ca4 <coda_expression_eval_integer@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #73728	; 0x12000
   10cac:	ldr	pc, [ip, #868]!	; 0x364

00010cb0 <strcmp@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #73728	; 0x12000
   10cb8:	ldr	pc, [ip, #860]!	; 0x35c

00010cbc <printf@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #73728	; 0x12000
   10cc4:	ldr	pc, [ip, #852]!	; 0x354

00010cc8 <coda_set_error@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #73728	; 0x12000
   10cd0:	ldr	pc, [ip, #844]!	; 0x34c

00010cd4 <coda_open@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #73728	; 0x12000
   10cdc:	ldr	pc, [ip, #836]!	; 0x344

00010ce0 <free@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #73728	; 0x12000
   10ce8:	ldr	pc, [ip, #828]!	; 0x33c

00010cec <coda_set_definition_path_conditional@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #73728	; 0x12000
   10cf4:	ldr	pc, [ip, #820]!	; 0x334

00010cf8 <coda_set_definition_path@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #73728	; 0x12000
   10d00:	ldr	pc, [ip, #812]!	; 0x32c

00010d04 <fwrite@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #73728	; 0x12000
   10d0c:	ldr	pc, [ip, #804]!	; 0x324

00010d10 <coda_expression_eval_bool@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #73728	; 0x12000
   10d18:	ldr	pc, [ip, #796]!	; 0x31c

00010d1c <coda_cursor_set_product@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #73728	; 0x12000
   10d24:	ldr	pc, [ip, #788]!	; 0x314

00010d28 <coda_done@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #780]!	; 0x30c

00010d34 <puts@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #772]!	; 0x304

00010d40 <__libc_start_main@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #73728	; 0x12000
   10d48:	ldr	pc, [ip, #764]!	; 0x2fc

00010d4c <coda_expression_delete@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #73728	; 0x12000
   10d54:	ldr	pc, [ip, #756]!	; 0x2f4

00010d58 <__gmon_start__@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #73728	; 0x12000
   10d60:	ldr	pc, [ip, #748]!	; 0x2ec

00010d64 <__ctype_b_loc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #73728	; 0x12000
   10d6c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d70 <exit@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #73728	; 0x12000
   10d78:	ldr	pc, [ip, #732]!	; 0x2dc

00010d7c <strlen@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #73728	; 0x12000
   10d84:	ldr	pc, [ip, #724]!	; 0x2d4

00010d88 <fprintf@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #73728	; 0x12000
   10d90:	ldr	pc, [ip, #716]!	; 0x2cc

00010d94 <coda_init@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #73728	; 0x12000
   10d9c:	ldr	pc, [ip, #708]!	; 0x2c4

00010da0 <coda_set_option_perform_conversions@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #73728	; 0x12000
   10da8:	ldr	pc, [ip, #700]!	; 0x2bc

00010dac <coda_expression_eval_string@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #73728	; 0x12000
   10db4:	ldr	pc, [ip, #692]!	; 0x2b4

00010db8 <putchar@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #73728	; 0x12000
   10dc0:	ldr	pc, [ip, #684]!	; 0x2ac

00010dc4 <coda_expression_get_type@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #73728	; 0x12000
   10dcc:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd0 <coda_close@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #73728	; 0x12000
   10dd8:	ldr	pc, [ip, #668]!	; 0x29c

00010ddc <coda_expression_is_constant@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #73728	; 0x12000
   10de4:	ldr	pc, [ip, #660]!	; 0x294

00010de8 <coda_expression_eval_float@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #73728	; 0x12000
   10df0:	ldr	pc, [ip, #652]!	; 0x28c

00010df4 <coda_expression_eval_node@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #73728	; 0x12000
   10dfc:	ldr	pc, [ip, #644]!	; 0x284

00010e00 <coda_errno_to_string@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #73728	; 0x12000
   10e08:	ldr	pc, [ip, #636]!	; 0x27c

00010e0c <coda_expression_get_type_name@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #73728	; 0x12000
   10e14:	ldr	pc, [ip, #628]!	; 0x274

00010e18 <coda_expression_from_string@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #620]!	; 0x26c

00010e24 <coda_get_libcoda_version@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #612]!	; 0x264

00010e30 <coda_get_errno@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #604]!	; 0x25c

00010e3c <abort@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #596]!	; 0x254

00010e48 <coda_str64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #588]!	; 0x24c

00010e54 <__assert_fail@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #580]!	; 0x244

Disassembly of section .text:

00010e60 <main@@Base>:
   10e60:	cmp	r0, #1
   10e64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e68:	strd	r6, [sp, #8]
   10e6c:	strd	r8, [sp, #16]
   10e70:	strd	sl, [sp, #24]
   10e74:	str	lr, [sp, #32]
   10e78:	sub	sp, sp, #28
   10e7c:	beq	10ea4 <main@@Base+0x44>
   10e80:	mov	r6, r1
   10e84:	mov	r5, r0
   10e88:	ldr	r4, [r6, #4]
   10e8c:	movw	r1, #9540	; 0x2544
   10e90:	movt	r1, #1
   10e94:	mov	r0, r4
   10e98:	bl	10cb0 <strcmp@plt>
   10e9c:	cmp	r0, #0
   10ea0:	bne	10eb0 <main@@Base+0x50>
   10ea4:	bl	113d4 <_start@@Base+0xf0>
   10ea8:	mov	r0, #0
   10eac:	bl	10d70 <exit@plt>
   10eb0:	movw	r1, #8480	; 0x2120
   10eb4:	movt	r1, #1
   10eb8:	mov	r0, r4
   10ebc:	bl	10cb0 <strcmp@plt>
   10ec0:	cmp	r0, #0
   10ec4:	beq	10ea4 <main@@Base+0x44>
   10ec8:	movw	r1, #9544	; 0x2548
   10ecc:	movt	r1, #1
   10ed0:	mov	r0, r4
   10ed4:	bl	10cb0 <strcmp@plt>
   10ed8:	cmp	r0, #0
   10edc:	beq	11028 <main@@Base+0x1c8>
   10ee0:	movw	r1, #9548	; 0x254c
   10ee4:	movt	r1, #1
   10ee8:	mov	r0, r4
   10eec:	bl	10cb0 <strcmp@plt>
   10ef0:	cmp	r0, #0
   10ef4:	beq	11028 <main@@Base+0x1c8>
   10ef8:	cmp	r5, #2
   10efc:	ble	11058 <main@@Base+0x1f8>
   10f00:	mov	r0, r4
   10f04:	movw	r1, #9624	; 0x2598
   10f08:	movt	r1, #1
   10f0c:	bl	10cb0 <strcmp@plt>
   10f10:	cmp	r0, #0
   10f14:	beq	110b4 <main@@Base+0x254>
   10f18:	movw	r2, #9628	; 0x259c
   10f1c:	movt	r2, #1
   10f20:	ldr	r0, [r6]
   10f24:	mov	r1, #0
   10f28:	bl	10cec <coda_set_definition_path_conditional@plt>
   10f2c:	cmp	r0, #0
   10f30:	bne	11278 <main@@Base+0x418>
   10f34:	mov	fp, #1
   10f38:	movw	r3, #9672	; 0x25c8
   10f3c:	movt	r3, #1
   10f40:	movw	r8, #9668	; 0x25c4
   10f44:	movt	r8, #1
   10f48:	str	r3, [sp, #12]
   10f4c:	mov	r3, #1
   10f50:	movw	sl, #7760	; 0x1e50
   10f54:	movt	sl, #1
   10f58:	mov	r9, #0
   10f5c:	str	r3, [sp, #16]
   10f60:	b	11004 <main@@Base+0x1a4>
   10f64:	mov	r1, sl
   10f68:	mov	r0, r4
   10f6c:	bl	10cb0 <strcmp@plt>
   10f70:	cmp	r0, #0
   10f74:	beq	11020 <main@@Base+0x1c0>
   10f78:	mov	r0, r4
   10f7c:	ldr	r1, [sp, #12]
   10f80:	bl	10cb0 <strcmp@plt>
   10f84:	cmp	r0, #0
   10f88:	beq	110ac <main@@Base+0x24c>
   10f8c:	movw	r1, #7944	; 0x1f08
   10f90:	movt	r1, #1
   10f94:	mov	r0, r4
   10f98:	bl	10cb0 <strcmp@plt>
   10f9c:	cmp	r0, #0
   10fa0:	beq	110ac <main@@Base+0x24c>
   10fa4:	movw	r1, #9676	; 0x25cc
   10fa8:	movt	r1, #1
   10fac:	mov	r0, r4
   10fb0:	bl	10cb0 <strcmp@plt>
   10fb4:	cmp	r0, #0
   10fb8:	bne	110c4 <main@@Base+0x264>
   10fbc:	add	r2, fp, #1
   10fc0:	cmp	r2, r5
   10fc4:	str	r2, [sp, #20]
   10fc8:	bge	110c4 <main@@Base+0x264>
   10fcc:	add	r7, r6, r7
   10fd0:	ldr	r0, [r7, #4]
   10fd4:	ldrb	r1, [r0]
   10fd8:	cmp	r1, #45	; 0x2d
   10fdc:	beq	110c4 <main@@Base+0x264>
   10fe0:	ldr	r1, [pc, #760]	; 112e0 <main@@Base+0x480>
   10fe4:	bl	10e18 <coda_expression_from_string@plt>
   10fe8:	cmp	r0, #0
   10fec:	ldr	r2, [sp, #20]
   10ff0:	bne	112ac <main@@Base+0x44c>
   10ff4:	mov	fp, r2
   10ff8:	add	fp, fp, #1
   10ffc:	cmp	r5, fp
   11000:	ble	11080 <main@@Base+0x220>
   11004:	ldr	r4, [r6, fp, lsl #2]
   11008:	mov	r1, r8
   1100c:	lsl	r7, fp, #2
   11010:	mov	r0, r4
   11014:	bl	10cb0 <strcmp@plt>
   11018:	cmp	r0, #0
   1101c:	bne	10f64 <main@@Base+0x104>
   11020:	mov	r9, #1
   11024:	b	10ff8 <main@@Base+0x198>
   11028:	bl	10e24 <coda_get_libcoda_version@plt>
   1102c:	mov	r1, r0
   11030:	movw	r0, #9560	; 0x2558
   11034:	movt	r0, #1
   11038:	bl	10cbc <printf@plt>
   1103c:	movw	r0, #9576	; 0x2568
   11040:	movt	r0, #1
   11044:	bl	10d34 <puts@plt>
   11048:	mov	r0, #10
   1104c:	bl	10db8 <putchar@plt>
   11050:	mov	r0, #0
   11054:	bl	10d70 <exit@plt>
   11058:	movw	r2, #9628	; 0x259c
   1105c:	movt	r2, #1
   11060:	ldr	r0, [r6]
   11064:	mov	r1, #0
   11068:	bl	10cec <coda_set_definition_path_conditional@plt>
   1106c:	cmp	r0, #0
   11070:	moveq	fp, #1
   11074:	bne	11278 <main@@Base+0x418>
   11078:	cmp	fp, r5
   1107c:	blt	10f38 <main@@Base+0xd8>
   11080:	movw	r3, #12464	; 0x30b0
   11084:	movt	r3, #2
   11088:	mov	r2, #25
   1108c:	mov	r1, #1
   11090:	ldr	r3, [r3]
   11094:	movw	r0, #9720	; 0x25f8
   11098:	movt	r0, #1
   1109c:	bl	10d04 <fwrite@plt>
   110a0:	bl	113d4 <_start@@Base+0xf0>
   110a4:	mov	r0, #1
   110a8:	bl	10d70 <exit@plt>
   110ac:	str	r0, [sp, #16]
   110b0:	b	10ff8 <main@@Base+0x198>
   110b4:	ldr	r0, [r6, #8]
   110b8:	mov	fp, #3
   110bc:	bl	10cf8 <coda_set_definition_path@plt>
   110c0:	b	11078 <main@@Base+0x218>
   110c4:	ldrb	r2, [r4]
   110c8:	cmp	r2, #45	; 0x2d
   110cc:	beq	11080 <main@@Base+0x220>
   110d0:	movw	r7, #12472	; 0x30b8
   110d4:	movt	r7, #2
   110d8:	mov	r0, r4
   110dc:	add	r1, r7, #4
   110e0:	bl	10e18 <coda_expression_from_string@plt>
   110e4:	cmp	r0, #0
   110e8:	bne	111c8 <main@@Base+0x368>
   110ec:	mov	r1, r7
   110f0:	ldr	r0, [r7, #4]
   110f4:	add	fp, fp, #1
   110f8:	bl	10dc4 <coda_expression_get_type@plt>
   110fc:	cmp	r0, #0
   11100:	bne	11278 <main@@Base+0x418>
   11104:	ldr	r0, [r7]
   11108:	sub	r3, r0, #4
   1110c:	cmp	r3, #1
   11110:	bls	11224 <main@@Base+0x3c4>
   11114:	cmp	r9, #0
   11118:	bne	11150 <main@@Base+0x2f0>
   1111c:	cmp	r5, fp
   11120:	bgt	11188 <main@@Base+0x328>
   11124:	ldr	r3, [r7, #8]
   11128:	cmp	r3, #0
   1112c:	bne	11250 <main@@Base+0x3f0>
   11130:	ldr	r0, [r7, #4]
   11134:	bl	10ddc <coda_expression_is_constant@plt>
   11138:	cmp	r0, #0
   1113c:	beq	111fc <main@@Base+0x39c>
   11140:	mov	r0, r9
   11144:	bl	11598 <_start@@Base+0x2b4>
   11148:	cmp	r0, #0
   1114c:	bne	11278 <main@@Base+0x418>
   11150:	ldr	r0, [r7, #4]
   11154:	bl	10d4c <coda_expression_delete@plt>
   11158:	ldr	r0, [r7, #8]
   1115c:	cmp	r0, #0
   11160:	beq	11168 <main@@Base+0x308>
   11164:	bl	10d4c <coda_expression_delete@plt>
   11168:	mov	r0, #0
   1116c:	add	sp, sp, #28
   11170:	ldrd	r4, [sp]
   11174:	ldrd	r6, [sp, #8]
   11178:	ldrd	r8, [sp, #16]
   1117c:	ldrd	sl, [sp, #24]
   11180:	add	sp, sp, #32
   11184:	pop	{pc}		; (ldr pc, [sp], #4)
   11188:	bl	10d94 <coda_init@plt>
   1118c:	cmp	r0, #0
   11190:	bne	11278 <main@@Base+0x418>
   11194:	ldr	r0, [sp, #16]
   11198:	bl	10da0 <coda_set_option_perform_conversions@plt>
   1119c:	add	r2, r6, fp, lsl #2
   111a0:	sub	r1, r5, fp
   111a4:	mov	r0, r9
   111a8:	movw	r3, #6980	; 0x1b44
   111ac:	movt	r3, #1
   111b0:	str	r9, [sp]
   111b4:	bl	10c98 <coda_match_filefilter@plt>
   111b8:	cmp	r0, #0
   111bc:	bne	11278 <main@@Base+0x418>
   111c0:	bl	10d28 <coda_done@plt>
   111c4:	b	11150 <main@@Base+0x2f0>
   111c8:	movw	r3, #12464	; 0x30b0
   111cc:	movt	r3, #2
   111d0:	ldr	r4, [r3]
   111d4:	bl	10e30 <coda_get_errno@plt>
   111d8:	ldr	r0, [r0]
   111dc:	bl	10e00 <coda_errno_to_string@plt>
   111e0:	mov	r2, r0
   111e4:	movw	r1, #9748	; 0x2614
   111e8:	movt	r1, #1
   111ec:	mov	r0, r4
   111f0:	bl	10d88 <fprintf@plt>
   111f4:	mov	r0, #1
   111f8:	bl	10d70 <exit@plt>
   111fc:	movw	r3, #12464	; 0x30b0
   11200:	movt	r3, #2
   11204:	movw	r0, #9928	; 0x26c8
   11208:	movt	r0, #1
   1120c:	ldr	r3, [r3]
   11210:	mov	r2, #111	; 0x6f
   11214:	mov	r1, #1
   11218:	bl	10d04 <fwrite@plt>
   1121c:	mov	r0, #1
   11220:	bl	10d70 <exit@plt>
   11224:	movw	r3, #12464	; 0x30b0
   11228:	movt	r3, #2
   1122c:	ldr	r4, [r3]
   11230:	bl	10e0c <coda_expression_get_type_name@plt>
   11234:	mov	r2, r0
   11238:	movw	r1, #9780	; 0x2634
   1123c:	movt	r1, #1
   11240:	mov	r0, r4
   11244:	bl	10d88 <fprintf@plt>
   11248:	mov	r0, #1
   1124c:	bl	10d70 <exit@plt>
   11250:	movw	r3, #12464	; 0x30b0
   11254:	movt	r3, #2
   11258:	movw	r0, #9828	; 0x2664
   1125c:	movt	r0, #1
   11260:	ldr	r3, [r3]
   11264:	mov	r2, #96	; 0x60
   11268:	mov	r1, #1
   1126c:	bl	10d04 <fwrite@plt>
   11270:	mov	r0, #1
   11274:	bl	10d70 <exit@plt>
   11278:	movw	r3, #12464	; 0x30b0
   1127c:	movt	r3, #2
   11280:	ldr	r4, [r3]
   11284:	bl	10e30 <coda_get_errno@plt>
   11288:	ldr	r0, [r0]
   1128c:	bl	10e00 <coda_errno_to_string@plt>
   11290:	mov	r2, r0
   11294:	movw	r1, #9656	; 0x25b8
   11298:	movt	r1, #1
   1129c:	mov	r0, r4
   112a0:	bl	10d88 <fprintf@plt>
   112a4:	mov	r0, #1
   112a8:	bl	10d70 <exit@plt>
   112ac:	movw	r3, #12464	; 0x30b0
   112b0:	movt	r3, #2
   112b4:	ldr	r4, [r3]
   112b8:	bl	10e30 <coda_get_errno@plt>
   112bc:	ldr	r0, [r0]
   112c0:	bl	10e00 <coda_errno_to_string@plt>
   112c4:	mov	r2, r0
   112c8:	movw	r1, #9680	; 0x25d0
   112cc:	movt	r1, #1
   112d0:	mov	r0, r4
   112d4:	bl	10d88 <fprintf@plt>
   112d8:	mov	r0, #1
   112dc:	bl	10d70 <exit@plt>
   112e0:	andeq	r3, r2, r0, asr #1

000112e4 <_start@@Base>:
   112e4:	mov	fp, #0
   112e8:	mov	lr, #0
   112ec:	pop	{r1}		; (ldr r1, [sp], #4)
   112f0:	mov	r2, sp
   112f4:	push	{r2}		; (str r2, [sp, #-4]!)
   112f8:	push	{r0}		; (str r0, [sp, #-4]!)
   112fc:	ldr	ip, [pc, #16]	; 11314 <_start@@Base+0x30>
   11300:	push	{ip}		; (str ip, [sp, #-4]!)
   11304:	ldr	r0, [pc, #12]	; 11318 <_start@@Base+0x34>
   11308:	ldr	r3, [pc, #12]	; 1131c <_start@@Base+0x38>
   1130c:	bl	10d40 <__libc_start_main@plt>
   11310:	bl	10e3c <abort@plt>
   11314:	andeq	r1, r1, r8, ror ip
   11318:	andeq	r0, r1, r0, ror #28
   1131c:	andeq	r1, r1, r8, lsl ip
   11320:	ldr	r3, [pc, #20]	; 1133c <_start@@Base+0x58>
   11324:	ldr	r2, [pc, #20]	; 11340 <_start@@Base+0x5c>
   11328:	add	r3, pc, r3
   1132c:	ldr	r2, [r3, r2]
   11330:	cmp	r2, #0
   11334:	bxeq	lr
   11338:	b	10d58 <__gmon_start__@plt>
   1133c:	ldrdeq	r1, [r1], -r0
   11340:	andeq	r0, r0, r4, lsr #1
   11344:	ldr	r0, [pc, #24]	; 11364 <_start@@Base+0x80>
   11348:	ldr	r3, [pc, #24]	; 11368 <_start@@Base+0x84>
   1134c:	cmp	r3, r0
   11350:	bxeq	lr
   11354:	ldr	r3, [pc, #16]	; 1136c <_start@@Base+0x88>
   11358:	cmp	r3, #0
   1135c:	bxeq	lr
   11360:	bx	r3
   11364:	strheq	r3, [r2], -r0
   11368:	strheq	r3, [r2], -r0
   1136c:	andeq	r0, r0, r0
   11370:	ldr	r0, [pc, #36]	; 1139c <_start@@Base+0xb8>
   11374:	ldr	r1, [pc, #36]	; 113a0 <_start@@Base+0xbc>
   11378:	sub	r1, r1, r0
   1137c:	asr	r1, r1, #2
   11380:	add	r1, r1, r1, lsr #31
   11384:	asrs	r1, r1, #1
   11388:	bxeq	lr
   1138c:	ldr	r3, [pc, #16]	; 113a4 <_start@@Base+0xc0>
   11390:	cmp	r3, #0
   11394:	bxeq	lr
   11398:	bx	r3
   1139c:	strheq	r3, [r2], -r0
   113a0:	strheq	r3, [r2], -r0
   113a4:	andeq	r0, r0, r0
   113a8:	push	{r4, lr}
   113ac:	ldr	r4, [pc, #24]	; 113cc <_start@@Base+0xe8>
   113b0:	ldrb	r3, [r4]
   113b4:	cmp	r3, #0
   113b8:	popne	{r4, pc}
   113bc:	bl	11344 <_start@@Base+0x60>
   113c0:	mov	r3, #1
   113c4:	strb	r3, [r4]
   113c8:	pop	{r4, pc}
   113cc:	strheq	r3, [r2], -r4
   113d0:	b	11370 <_start@@Base+0x8c>
   113d4:	movw	r0, #7320	; 0x1c98
   113d8:	movt	r0, #1
   113dc:	str	r4, [sp, #-8]!
   113e0:	str	lr, [sp, #4]
   113e4:	bl	10d34 <puts@plt>
   113e8:	movw	r0, #7328	; 0x1ca0
   113ec:	movt	r0, #1
   113f0:	bl	10d34 <puts@plt>
   113f4:	movw	r0, #7408	; 0x1cf0
   113f8:	movt	r0, #1
   113fc:	bl	10d34 <puts@plt>
   11400:	movw	r0, #7488	; 0x1d40
   11404:	movt	r0, #1
   11408:	bl	10d34 <puts@plt>
   1140c:	movw	r0, #7524	; 0x1d64
   11410:	movt	r0, #1
   11414:	bl	10d34 <puts@plt>
   11418:	movw	r0, #7600	; 0x1db0
   1141c:	movt	r0, #1
   11420:	bl	10d34 <puts@plt>
   11424:	movw	r0, #7676	; 0x1dfc
   11428:	movt	r0, #1
   1142c:	bl	10d34 <puts@plt>
   11430:	mov	r0, #10
   11434:	bl	10db8 <putchar@plt>
   11438:	movw	r0, #7724	; 0x1e2c
   1143c:	movt	r0, #1
   11440:	bl	10d34 <puts@plt>
   11444:	movw	r0, #7744	; 0x1e40
   11448:	movt	r0, #1
   1144c:	bl	10d34 <puts@plt>
   11450:	movw	r0, #7768	; 0x1e58
   11454:	movt	r0, #1
   11458:	bl	10d34 <puts@plt>
   1145c:	movw	r0, #7848	; 0x1ea8
   11460:	movt	r0, #1
   11464:	bl	10d34 <puts@plt>
   11468:	movw	r0, #7928	; 0x1ef8
   1146c:	movt	r0, #1
   11470:	bl	10d34 <puts@plt>
   11474:	movw	r0, #7968	; 0x1f20
   11478:	movt	r0, #1
   1147c:	bl	10d34 <puts@plt>
   11480:	movw	r0, #8028	; 0x1f5c
   11484:	movt	r0, #1
   11488:	bl	10d34 <puts@plt>
   1148c:	movw	r0, #8052	; 0x1f74
   11490:	movt	r0, #1
   11494:	bl	10d34 <puts@plt>
   11498:	movw	r0, #8128	; 0x1fc0
   1149c:	movt	r0, #1
   114a0:	bl	10d34 <puts@plt>
   114a4:	movw	r0, #8204	; 0x200c
   114a8:	movt	r0, #1
   114ac:	bl	10d34 <puts@plt>
   114b0:	movw	r0, #8236	; 0x202c
   114b4:	movt	r0, #1
   114b8:	bl	10d34 <puts@plt>
   114bc:	movw	r0, #8312	; 0x2078
   114c0:	movt	r0, #1
   114c4:	bl	10d34 <puts@plt>
   114c8:	mov	r0, #10
   114cc:	bl	10db8 <putchar@plt>
   114d0:	movw	r0, #8360	; 0x20a8
   114d4:	movt	r0, #1
   114d8:	bl	10d34 <puts@plt>
   114dc:	movw	r0, #8440	; 0x20f8
   114e0:	movt	r0, #1
   114e4:	bl	10d34 <puts@plt>
   114e8:	mov	r0, #10
   114ec:	bl	10db8 <putchar@plt>
   114f0:	movw	r0, #8464	; 0x2110
   114f4:	movt	r0, #1
   114f8:	bl	10d34 <puts@plt>
   114fc:	movw	r0, #8488	; 0x2128
   11500:	movt	r0, #1
   11504:	bl	10d34 <puts@plt>
   11508:	mov	r0, #10
   1150c:	bl	10db8 <putchar@plt>
   11510:	movw	r0, #8520	; 0x2148
   11514:	movt	r0, #1
   11518:	bl	10d34 <puts@plt>
   1151c:	movw	r0, #8548	; 0x2164
   11520:	movt	r0, #1
   11524:	bl	10d34 <puts@plt>
   11528:	mov	r0, #10
   1152c:	bl	10db8 <putchar@plt>
   11530:	movw	r0, #8600	; 0x2198
   11534:	movt	r0, #1
   11538:	bl	10d34 <puts@plt>
   1153c:	movw	r0, #8676	; 0x21e4
   11540:	movt	r0, #1
   11544:	bl	10d34 <puts@plt>
   11548:	movw	r0, #8752	; 0x2230
   1154c:	movt	r0, #1
   11550:	bl	10d34 <puts@plt>
   11554:	movw	r0, #8800	; 0x2260
   11558:	movt	r0, #1
   1155c:	bl	10d34 <puts@plt>
   11560:	movw	r0, #8876	; 0x22ac
   11564:	movt	r0, #1
   11568:	bl	10d34 <puts@plt>
   1156c:	movw	r0, #8952	; 0x22f8
   11570:	movt	r0, #1
   11574:	bl	10d34 <puts@plt>
   11578:	movw	r0, #9016	; 0x2338
   1157c:	movt	r0, #1
   11580:	bl	10d34 <puts@plt>
   11584:	mov	r0, #10
   11588:	ldr	r4, [sp]
   1158c:	ldr	lr, [sp, #4]
   11590:	add	sp, sp, #8
   11594:	b	10db8 <putchar@plt>
   11598:	movw	r3, #12472	; 0x30b8
   1159c:	movt	r3, #2
   115a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   115a4:	ldr	r2, [r3]
   115a8:	strd	r6, [sp, #8]
   115ac:	strd	r8, [sp, #16]
   115b0:	str	sl, [sp, #24]
   115b4:	str	lr, [sp, #28]
   115b8:	sub	sp, sp, #32
   115bc:	cmp	r2, #5
   115c0:	ldrls	pc, [pc, r2, lsl #2]
   115c4:	b	11a24 <_start@@Base+0x740>
   115c8:	andeq	r1, r1, ip, lsr #15
   115cc:	andeq	r1, r1, r8, lsl #16
   115d0:	andeq	r1, r1, r8, lsr r8
   115d4:	andeq	r1, r1, r0, ror #11
   115d8:	andeq	r1, r1, r4, ror #18
   115dc:	andeq	r1, r1, r4, ror #18
   115e0:	mov	ip, #0
   115e4:	mov	r1, r0
   115e8:	ldr	r0, [r3, #4]
   115ec:	mov	r2, sp
   115f0:	add	r3, sp, #8
   115f4:	str	ip, [sp]
   115f8:	bl	10dac <coda_expression_eval_string@plt>
   115fc:	subs	r6, r0, #0
   11600:	bne	119d4 <_start@@Base+0x6f0>
   11604:	ldr	r4, [sp]
   11608:	ldr	r7, [sp, #8]
   1160c:	cmp	r4, #0
   11610:	cmpne	r7, #0
   11614:	beq	11874 <_start@@Base+0x590>
   11618:	cmp	r7, #0
   1161c:	blt	11944 <_start@@Base+0x660>
   11620:	sub	r4, r4, #1
   11624:	movw	r9, #9312	; 0x2460
   11628:	movt	r9, #1
   1162c:	movw	sl, #9308	; 0x245c
   11630:	movt	sl, #1
   11634:	movw	r8, #9304	; 0x2458
   11638:	movt	r8, #1
   1163c:	add	r7, r4, r7
   11640:	ldrb	r5, [r4, #1]!
   11644:	sub	r3, r5, #7
   11648:	cmp	r3, #85	; 0x55
   1164c:	ldrls	pc, [pc, r3, lsl #2]
   11650:	b	1191c <_start@@Base+0x638>
   11654:	andeq	r1, r1, ip, ror #17
   11658:	andeq	r1, r1, ip, lsl #18
   1165c:	strdeq	r1, [r1], -ip
   11660:	ldrdeq	r1, [r1], -ip
   11664:	andeq	r1, r1, ip, asr #17
   11668:			; <UNDEFINED> instruction: 0x000118bc
   1166c:	andeq	r1, r1, ip, lsr #17
   11670:	andeq	r1, r1, ip, lsl r9
   11674:	andeq	r1, r1, ip, lsl r9
   11678:	andeq	r1, r1, ip, lsl r9
   1167c:	andeq	r1, r1, ip, lsl r9
   11680:	andeq	r1, r1, ip, lsl r9
   11684:	andeq	r1, r1, ip, lsl r9
   11688:	andeq	r1, r1, ip, lsl r9
   1168c:	andeq	r1, r1, ip, lsl r9
   11690:	andeq	r1, r1, ip, lsl r9
   11694:	andeq	r1, r1, ip, lsl r9
   11698:	andeq	r1, r1, ip, lsl r9
   1169c:	andeq	r1, r1, ip, lsl r9
   116a0:	andeq	r1, r1, ip, lsl r9
   116a4:	muleq	r1, ip, r8
   116a8:	andeq	r1, r1, ip, lsl r9
   116ac:	andeq	r1, r1, ip, lsl r9
   116b0:	andeq	r1, r1, ip, lsl r9
   116b4:	andeq	r1, r1, ip, lsl r9
   116b8:	andeq	r1, r1, ip, lsl r9
   116bc:	andeq	r1, r1, ip, lsl r9
   116c0:	muleq	r1, r0, r8
   116c4:	andeq	r1, r1, ip, lsl r9
   116c8:	andeq	r1, r1, ip, lsl r9
   116cc:	andeq	r1, r1, ip, lsl r9
   116d0:	andeq	r1, r1, ip, lsl r9
   116d4:	andeq	r1, r1, ip, lsl r9
   116d8:	andeq	r1, r1, ip, lsl r9
   116dc:	andeq	r1, r1, ip, lsl r9
   116e0:	andeq	r1, r1, ip, lsl r9
   116e4:	andeq	r1, r1, ip, lsl r9
   116e8:	andeq	r1, r1, ip, lsl r9
   116ec:	andeq	r1, r1, ip, lsl r9
   116f0:	andeq	r1, r1, ip, lsl r9
   116f4:	andeq	r1, r1, ip, lsl r9
   116f8:	andeq	r1, r1, ip, lsl r9
   116fc:	andeq	r1, r1, ip, lsl r9
   11700:	andeq	r1, r1, ip, lsl r9
   11704:	andeq	r1, r1, ip, lsl r9
   11708:	andeq	r1, r1, ip, lsl r9
   1170c:	andeq	r1, r1, ip, lsl r9
   11710:	andeq	r1, r1, ip, lsl r9
   11714:	andeq	r1, r1, ip, lsl r9
   11718:	andeq	r1, r1, ip, lsl r9
   1171c:	andeq	r1, r1, ip, lsl r9
   11720:	andeq	r1, r1, ip, lsl r9
   11724:	andeq	r1, r1, ip, lsl r9
   11728:	andeq	r1, r1, ip, lsl r9
   1172c:	andeq	r1, r1, ip, lsl r9
   11730:	andeq	r1, r1, ip, lsl r9
   11734:	andeq	r1, r1, ip, lsl r9
   11738:	andeq	r1, r1, ip, lsl r9
   1173c:	andeq	r1, r1, ip, lsl r9
   11740:	andeq	r1, r1, ip, lsl r9
   11744:	andeq	r1, r1, ip, lsl r9
   11748:	andeq	r1, r1, ip, lsl r9
   1174c:	andeq	r1, r1, ip, lsl r9
   11750:	andeq	r1, r1, ip, lsl r9
   11754:	andeq	r1, r1, ip, lsl r9
   11758:	andeq	r1, r1, ip, lsl r9
   1175c:	andeq	r1, r1, ip, lsl r9
   11760:	andeq	r1, r1, ip, lsl r9
   11764:	andeq	r1, r1, ip, lsl r9
   11768:	andeq	r1, r1, ip, lsl r9
   1176c:	andeq	r1, r1, ip, lsl r9
   11770:	andeq	r1, r1, ip, lsl r9
   11774:	andeq	r1, r1, ip, lsl r9
   11778:	andeq	r1, r1, ip, lsl r9
   1177c:	andeq	r1, r1, ip, lsl r9
   11780:	andeq	r1, r1, ip, lsl r9
   11784:	andeq	r1, r1, ip, lsl r9
   11788:	andeq	r1, r1, ip, lsl r9
   1178c:	andeq	r1, r1, ip, lsl r9
   11790:	andeq	r1, r1, ip, lsl r9
   11794:	andeq	r1, r1, ip, lsl r9
   11798:	andeq	r1, r1, ip, lsl r9
   1179c:	andeq	r1, r1, ip, lsl r9
   117a0:	andeq	r1, r1, ip, lsl r9
   117a4:	andeq	r1, r1, ip, lsl r9
   117a8:	andeq	r1, r1, r4, ror #16
   117ac:	mov	r1, r0
   117b0:	add	r2, sp, #8
   117b4:	ldr	r0, [r3, #4]
   117b8:	bl	10d10 <coda_expression_eval_bool@plt>
   117bc:	subs	r6, r0, #0
   117c0:	bne	119fc <_start@@Base+0x718>
   117c4:	ldr	r0, [sp, #8]
   117c8:	movw	r2, #9080	; 0x2378
   117cc:	movt	r2, #1
   117d0:	movw	r3, #9088	; 0x2380
   117d4:	movt	r3, #1
   117d8:	cmp	r0, #0
   117dc:	movne	r0, r2
   117e0:	moveq	r0, r3
   117e4:	bl	10d34 <puts@plt>
   117e8:	mov	r0, r6
   117ec:	add	sp, sp, #32
   117f0:	ldrd	r4, [sp]
   117f4:	ldrd	r6, [sp, #8]
   117f8:	ldrd	r8, [sp, #16]
   117fc:	ldr	sl, [sp, #24]
   11800:	add	sp, sp, #28
   11804:	pop	{pc}		; (ldr pc, [sp], #4)
   11808:	mov	r1, r0
   1180c:	mov	r2, sp
   11810:	ldr	r0, [r3, #4]
   11814:	bl	10ca4 <coda_expression_eval_integer@plt>
   11818:	subs	r6, r0, #0
   1181c:	bne	119ac <_start@@Base+0x6c8>
   11820:	add	r2, sp, #8
   11824:	ldrd	r0, [sp]
   11828:	bl	10e48 <coda_str64@plt>
   1182c:	add	r0, sp, #8
   11830:	bl	10d34 <puts@plt>
   11834:	b	117e8 <_start@@Base+0x504>
   11838:	mov	r1, r0
   1183c:	add	r2, sp, #8
   11840:	ldr	r0, [r3, #4]
   11844:	bl	10de8 <coda_expression_eval_float@plt>
   11848:	subs	r6, r0, #0
   1184c:	bne	11984 <_start@@Base+0x6a0>
   11850:	movw	r0, #9224	; 0x2408
   11854:	movt	r0, #1
   11858:	ldrd	r2, [sp, #8]
   1185c:	bl	10cbc <printf@plt>
   11860:	b	117e8 <_start@@Base+0x504>
   11864:	mov	r0, r8
   11868:	bl	10cbc <printf@plt>
   1186c:	cmp	r7, r4
   11870:	bne	11640 <_start@@Base+0x35c>
   11874:	mov	r0, #10
   11878:	bl	10db8 <putchar@plt>
   1187c:	ldr	r0, [sp]
   11880:	cmp	r0, #0
   11884:	beq	117e8 <_start@@Base+0x504>
   11888:	bl	10ce0 <free@plt>
   1188c:	b	117e8 <_start@@Base+0x504>
   11890:	mov	r0, sl
   11894:	bl	10cbc <printf@plt>
   11898:	b	1186c <_start@@Base+0x588>
   1189c:	movw	r0, #9272	; 0x2438
   118a0:	movt	r0, #1
   118a4:	bl	10cbc <printf@plt>
   118a8:	b	1186c <_start@@Base+0x588>
   118ac:	movw	r0, #9292	; 0x244c
   118b0:	movt	r0, #1
   118b4:	bl	10cbc <printf@plt>
   118b8:	b	1186c <_start@@Base+0x588>
   118bc:	movw	r0, #9284	; 0x2444
   118c0:	movt	r0, #1
   118c4:	bl	10cbc <printf@plt>
   118c8:	b	1186c <_start@@Base+0x588>
   118cc:	movw	r0, #9300	; 0x2454
   118d0:	movt	r0, #1
   118d4:	bl	10cbc <printf@plt>
   118d8:	b	1186c <_start@@Base+0x588>
   118dc:	movw	r0, #9288	; 0x2448
   118e0:	movt	r0, #1
   118e4:	bl	10cbc <printf@plt>
   118e8:	b	1186c <_start@@Base+0x588>
   118ec:	movw	r0, #9276	; 0x243c
   118f0:	movt	r0, #1
   118f4:	bl	10cbc <printf@plt>
   118f8:	b	1186c <_start@@Base+0x588>
   118fc:	movw	r0, #9296	; 0x2450
   11900:	movt	r0, #1
   11904:	bl	10cbc <printf@plt>
   11908:	b	1186c <_start@@Base+0x588>
   1190c:	movw	r0, #9280	; 0x2440
   11910:	movt	r0, #1
   11914:	bl	10cbc <printf@plt>
   11918:	b	1186c <_start@@Base+0x588>
   1191c:	bl	10d64 <__ctype_b_loc@plt>
   11920:	ldr	r2, [r0]
   11924:	lsl	r3, r5, #1
   11928:	ldrh	r3, [r2, r3]
   1192c:	tst	r3, #16384	; 0x4000
   11930:	bne	11958 <_start@@Base+0x674>
   11934:	mov	r1, r5
   11938:	mov	r0, r9
   1193c:	bl	10cbc <printf@plt>
   11940:	b	1186c <_start@@Base+0x588>
   11944:	mov	r0, r4
   11948:	bl	10d7c <strlen@plt>
   1194c:	subs	r7, r0, #0
   11950:	bne	11620 <_start@@Base+0x33c>
   11954:	b	11874 <_start@@Base+0x590>
   11958:	mov	r0, r5
   1195c:	bl	10db8 <putchar@plt>
   11960:	b	1186c <_start@@Base+0x588>
   11964:	movw	r3, #7304	; 0x1c88
   11968:	movt	r3, #1
   1196c:	movw	r1, #9320	; 0x2468
   11970:	movt	r1, #1
   11974:	movw	r0, #9392	; 0x24b0
   11978:	movt	r0, #1
   1197c:	mov	r2, #230	; 0xe6
   11980:	bl	10e54 <__assert_fail@plt>
   11984:	bl	10e30 <coda_get_errno@plt>
   11988:	ldr	r0, [r0]
   1198c:	mvn	r6, #0
   11990:	bl	10e00 <coda_errno_to_string@plt>
   11994:	mov	r2, r0
   11998:	movw	r1, #9176	; 0x23d8
   1199c:	movt	r1, #1
   119a0:	mvn	r0, #400	; 0x190
   119a4:	bl	10cc8 <coda_set_error@plt>
   119a8:	b	117e8 <_start@@Base+0x504>
   119ac:	bl	10e30 <coda_get_errno@plt>
   119b0:	ldr	r0, [r0]
   119b4:	mvn	r6, #0
   119b8:	bl	10e00 <coda_errno_to_string@plt>
   119bc:	mov	r2, r0
   119c0:	movw	r1, #9136	; 0x23b0
   119c4:	movt	r1, #1
   119c8:	mvn	r0, #400	; 0x190
   119cc:	bl	10cc8 <coda_set_error@plt>
   119d0:	b	117e8 <_start@@Base+0x504>
   119d4:	bl	10e30 <coda_get_errno@plt>
   119d8:	ldr	r0, [r0]
   119dc:	mvn	r6, #0
   119e0:	bl	10e00 <coda_errno_to_string@plt>
   119e4:	mov	r2, r0
   119e8:	movw	r1, #9232	; 0x2410
   119ec:	movt	r1, #1
   119f0:	mvn	r0, #400	; 0x190
   119f4:	bl	10cc8 <coda_set_error@plt>
   119f8:	b	117e8 <_start@@Base+0x504>
   119fc:	bl	10e30 <coda_get_errno@plt>
   11a00:	ldr	r0, [r0]
   11a04:	mvn	r6, #0
   11a08:	bl	10e00 <coda_errno_to_string@plt>
   11a0c:	mov	r2, r0
   11a10:	movw	r1, #9096	; 0x2388
   11a14:	movt	r1, #1
   11a18:	mvn	r0, #400	; 0x190
   11a1c:	bl	10cc8 <coda_set_error@plt>
   11a20:	b	117e8 <_start@@Base+0x504>
   11a24:	mov	r6, #0
   11a28:	b	117e8 <_start@@Base+0x504>
   11a2c:	mov	r3, #0
   11a30:	strd	r4, [sp, #-12]!
   11a34:	mov	r5, r0
   11a38:	str	lr, [sp, #8]
   11a3c:	sub	sp, sp, #532	; 0x214
   11a40:	add	r1, sp, #4
   11a44:	str	r3, [sp, #4]
   11a48:	bl	10cd4 <coda_open@plt>
   11a4c:	cmp	r0, #0
   11a50:	movne	r4, #1
   11a54:	beq	11a6c <_start@@Base+0x788>
   11a58:	mov	r0, r4
   11a5c:	add	sp, sp, #532	; 0x214
   11a60:	ldrd	r4, [sp]
   11a64:	add	sp, sp, #8
   11a68:	pop	{pc}		; (ldr pc, [sp], #4)
   11a6c:	add	r0, sp, #8
   11a70:	ldr	r1, [sp, #4]
   11a74:	bl	10d1c <coda_cursor_set_product@plt>
   11a78:	subs	r4, r0, #0
   11a7c:	bne	11afc <_start@@Base+0x818>
   11a80:	movw	r3, #12472	; 0x30b8
   11a84:	movt	r3, #2
   11a88:	ldr	r0, [r3, #8]
   11a8c:	cmp	r0, #0
   11a90:	beq	11aa4 <_start@@Base+0x7c0>
   11a94:	add	r1, sp, #8
   11a98:	bl	10df4 <coda_expression_eval_node@plt>
   11a9c:	cmp	r0, #0
   11aa0:	bne	11b0c <_start@@Base+0x828>
   11aa4:	add	r0, sp, #8
   11aa8:	bl	11598 <_start@@Base+0x2b4>
   11aac:	cmp	r0, #0
   11ab0:	bne	11ac8 <_start@@Base+0x7e4>
   11ab4:	ldr	r0, [sp, #4]
   11ab8:	bl	10dd0 <coda_close@plt>
   11abc:	adds	r4, r0, #0
   11ac0:	movne	r4, #1
   11ac4:	b	11a58 <_start@@Base+0x774>
   11ac8:	movw	r3, #12464	; 0x30b0
   11acc:	movt	r3, #2
   11ad0:	ldr	r4, [r3]
   11ad4:	bl	10e30 <coda_get_errno@plt>
   11ad8:	ldr	r0, [r0]
   11adc:	bl	10e00 <coda_errno_to_string@plt>
   11ae0:	mov	r2, r0
   11ae4:	mov	r3, r5
   11ae8:	movw	r1, #9444	; 0x24e4
   11aec:	movt	r1, #1
   11af0:	mov	r0, r4
   11af4:	bl	10d88 <fprintf@plt>
   11af8:	b	11ab4 <_start@@Base+0x7d0>
   11afc:	ldr	r0, [sp, #4]
   11b00:	mov	r4, #1
   11b04:	bl	10dd0 <coda_close@plt>
   11b08:	b	11a58 <_start@@Base+0x774>
   11b0c:	movw	r3, #12464	; 0x30b0
   11b10:	movt	r3, #2
   11b14:	ldr	r5, [r3]
   11b18:	bl	10e30 <coda_get_errno@plt>
   11b1c:	ldr	r0, [r0]
   11b20:	bl	10e00 <coda_errno_to_string@plt>
   11b24:	mov	r2, r0
   11b28:	movw	r1, #9396	; 0x24b4
   11b2c:	movt	r1, #1
   11b30:	mov	r0, r5
   11b34:	bl	10d88 <fprintf@plt>
   11b38:	ldr	r0, [sp, #4]
   11b3c:	bl	10dd0 <coda_close@plt>
   11b40:	b	11a58 <_start@@Base+0x774>

00011b44 <callback@@Base>:
   11b44:	cmp	r1, #0
   11b48:	mov	ip, r0
   11b4c:	str	r4, [sp, #-8]!
   11b50:	str	lr, [sp, #4]
   11b54:	beq	11b80 <callback@@Base+0x3c>
   11b58:	cmp	r1, #2
   11b5c:	beq	11bdc <callback@@Base+0x98>
   11b60:	cmp	r1, #1
   11b64:	beq	11bac <callback@@Base+0x68>
   11b68:	cmp	r1, #4
   11b6c:	beq	11c08 <callback@@Base+0xc4>
   11b70:	ldr	r4, [sp]
   11b74:	add	sp, sp, #4
   11b78:	mov	r0, #0
   11b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b80:	movw	r0, #12464	; 0x30b0
   11b84:	movt	r0, #2
   11b88:	mov	r3, ip
   11b8c:	movw	r1, #9444	; 0x24e4
   11b90:	movt	r1, #1
   11b94:	ldr	r0, [r0]
   11b98:	bl	10d88 <fprintf@plt>
   11b9c:	ldr	r4, [sp]
   11ba0:	add	sp, sp, #4
   11ba4:	mov	r0, #0
   11ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bac:	movw	r1, #12464	; 0x30b0
   11bb0:	movt	r1, #2
   11bb4:	mov	r3, r2
   11bb8:	mov	r2, r0
   11bbc:	ldr	r0, [r1]
   11bc0:	movw	r1, #9504	; 0x2520
   11bc4:	movt	r1, #1
   11bc8:	bl	10d88 <fprintf@plt>
   11bcc:	ldr	r4, [sp]
   11bd0:	add	sp, sp, #4
   11bd4:	mov	r0, #0
   11bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bdc:	movw	r3, #12464	; 0x30b0
   11be0:	movt	r3, #2
   11be4:	mov	r2, r0
   11be8:	movw	r1, #9464	; 0x24f8
   11bec:	movt	r1, #1
   11bf0:	ldr	r0, [r3]
   11bf4:	bl	10d88 <fprintf@plt>
   11bf8:	ldr	r4, [sp]
   11bfc:	add	sp, sp, #4
   11c00:	mov	r0, #0
   11c04:	pop	{pc}		; (ldr pc, [sp], #4)
   11c08:	ldr	r4, [sp]
   11c0c:	ldr	lr, [sp, #4]
   11c10:	add	sp, sp, #8
   11c14:	b	11a2c <_start@@Base+0x748>

00011c18 <__libc_csu_init@@Base>:
   11c18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c1c:	mov	r7, r0
   11c20:	ldr	r6, [pc, #72]	; 11c70 <__libc_csu_init@@Base+0x58>
   11c24:	ldr	r5, [pc, #72]	; 11c74 <__libc_csu_init@@Base+0x5c>
   11c28:	add	r6, pc, r6
   11c2c:	add	r5, pc, r5
   11c30:	sub	r6, r6, r5
   11c34:	mov	r8, r1
   11c38:	mov	r9, r2
   11c3c:	bl	10c78 <coda_match_filefilter@plt-0x20>
   11c40:	asrs	r6, r6, #2
   11c44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c48:	mov	r4, #0
   11c4c:	add	r4, r4, #1
   11c50:	ldr	r3, [r5], #4
   11c54:	mov	r2, r9
   11c58:	mov	r1, r8
   11c5c:	mov	r0, r7
   11c60:	blx	r3
   11c64:	cmp	r6, r4
   11c68:	bne	11c4c <__libc_csu_init@@Base+0x34>
   11c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c70:	andeq	r1, r1, ip, asr #5
   11c74:	andeq	r1, r1, r4, asr #5

00011c78 <__libc_csu_fini@@Base>:
   11c78:	bx	lr

Disassembly of section .fini:

00011c7c <.fini>:
   11c7c:	push	{r3, lr}
   11c80:	pop	{r3, pc}
