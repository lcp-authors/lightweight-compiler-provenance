
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	10f0c <__assert_fail@plt+0x48>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <calloc@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <calloc@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r4, r1, r0, asr r3

00010cb4 <calloc@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #20, 20	; 0x14000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <strcmp@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #20, 20	; 0x14000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <strtol@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #20, 20	; 0x14000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <printf@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #20, 20	; 0x14000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <fflush@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #20, 20	; 0x14000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <free@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #20, 20	; 0x14000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <ferror@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #20, 20	; 0x14000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <_exit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #20, 20	; 0x14000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <memcpy@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #20, 20	; 0x14000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <mbsinit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #20, 20	; 0x14000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <memcmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #20, 20	; 0x14000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #20, 20	; 0x14000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #20, 20	; 0x14000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <iswprint@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #20, 20	; 0x14000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <fwrite@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #20, 20	; 0x14000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <lseek64@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #20, 20	; 0x14000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <__ctype_get_mb_cur_max@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #20, 20	; 0x14000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <__fpending@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #20, 20	; 0x14000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <mbrtowc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #20, 20	; 0x14000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <error@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #20, 20	; 0x14000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <malloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__libc_start_main@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dbc <__freading@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc8 <__gmon_start__@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #664]!	; 0x298

00010dd4 <getopt_long@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #656]!	; 0x290

00010de0 <__ctype_b_loc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #20, 20	; 0x14000
   10de8:	ldr	pc, [ip, #648]!	; 0x288

00010dec <exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #20, 20	; 0x14000
   10df4:	ldr	pc, [ip, #640]!	; 0x280

00010df8 <strlen@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #20, 20	; 0x14000
   10e00:	ldr	pc, [ip, #632]!	; 0x278

00010e04 <fprintf@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #20, 20	; 0x14000
   10e0c:	ldr	pc, [ip, #624]!	; 0x270

00010e10 <__errno_location@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #20, 20	; 0x14000
   10e18:	ldr	pc, [ip, #616]!	; 0x268

00010e1c <__cxa_atexit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #20, 20	; 0x14000
   10e24:	ldr	pc, [ip, #608]!	; 0x260

00010e28 <memset@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #20, 20	; 0x14000
   10e30:	ldr	pc, [ip, #600]!	; 0x258

00010e34 <fileno@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #20, 20	; 0x14000
   10e3c:	ldr	pc, [ip, #592]!	; 0x250

00010e40 <fclose@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #20, 20	; 0x14000
   10e48:	ldr	pc, [ip, #584]!	; 0x248

00010e4c <fseeko64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #20, 20	; 0x14000
   10e54:	ldr	pc, [ip, #576]!	; 0x240

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #20, 20	; 0x14000
   10e60:	ldr	pc, [ip, #568]!	; 0x238

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #20, 20	; 0x14000
   10e6c:	ldr	pc, [ip, #560]!	; 0x230

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #552]!	; 0x228

00010e7c <fputc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #544]!	; 0x220

00010e88 <putc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #536]!	; 0x218

00010e94 <getdelim@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #528]!	; 0x210

00010ea0 <fputs@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #520]!	; 0x208

00010eac <strncmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #512]!	; 0x200

00010eb8 <abort@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #496]!	; 0x1f0

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	mov	fp, #0
   10ed4:	mov	lr, #0
   10ed8:	pop	{r1}		; (ldr r1, [sp], #4)
   10edc:	mov	r2, sp
   10ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee8:	ldr	ip, [pc, #16]	; 10f00 <__assert_fail@plt+0x3c>
   10eec:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef0:	ldr	r0, [pc, #12]	; 10f04 <__assert_fail@plt+0x40>
   10ef4:	ldr	r3, [pc, #12]	; 10f08 <__assert_fail@plt+0x44>
   10ef8:	bl	10db0 <__libc_start_main@plt>
   10efc:	bl	10eb8 <abort@plt>
   10f00:	andeq	r4, r1, r8, lsr #11
   10f04:	andeq	r0, r1, r0, asr #31
   10f08:	andeq	r4, r1, r8, asr #10
   10f0c:	ldr	r3, [pc, #20]	; 10f28 <__assert_fail@plt+0x64>
   10f10:	ldr	r2, [pc, #20]	; 10f2c <__assert_fail@plt+0x68>
   10f14:	add	r3, pc, r3
   10f18:	ldr	r2, [r3, r2]
   10f1c:	cmp	r2, #0
   10f20:	bxeq	lr
   10f24:	b	10dc8 <__gmon_start__@plt>
   10f28:	andeq	r4, r1, r4, ror #1
   10f2c:	andeq	r0, r0, r0, asr #1
   10f30:	ldr	r0, [pc, #24]	; 10f50 <__assert_fail@plt+0x8c>
   10f34:	ldr	r3, [pc, #24]	; 10f54 <__assert_fail@plt+0x90>
   10f38:	cmp	r3, r0
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0x94>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r5, r2, r8, lsl r1
   10f54:	andeq	r5, r2, r8, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xc4>
   10f60:	ldr	r1, [pc, #36]	; 10f8c <__assert_fail@plt+0xc8>
   10f64:	sub	r1, r1, r0
   10f68:	asr	r1, r1, #2
   10f6c:	add	r1, r1, r1, lsr #31
   10f70:	asrs	r1, r1, #1
   10f74:	bxeq	lr
   10f78:	ldr	r3, [pc, #16]	; 10f90 <__assert_fail@plt+0xcc>
   10f7c:	cmp	r3, #0
   10f80:	bxeq	lr
   10f84:	bx	r3
   10f88:	andeq	r5, r2, r8, lsl r1
   10f8c:	andeq	r5, r2, r8, lsl r1
   10f90:	andeq	r0, r0, r0
   10f94:	push	{r4, lr}
   10f98:	ldr	r4, [pc, #24]	; 10fb8 <__assert_fail@plt+0xf4>
   10f9c:	ldrb	r3, [r4]
   10fa0:	cmp	r3, #0
   10fa4:	popne	{r4, pc}
   10fa8:	bl	10f30 <__assert_fail@plt+0x6c>
   10fac:	mov	r3, #1
   10fb0:	strb	r3, [r4]
   10fb4:	pop	{r4, pc}
   10fb8:	andeq	r5, r2, ip, lsr r1
   10fbc:	b	10f5c <__assert_fail@plt+0x98>
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	add	fp, sp, #28
   10fc8:	sub	sp, sp, #20
   10fcc:	mov	r5, r1
   10fd0:	mov	r9, r0
   10fd4:	ldr	r0, [r1]
   10fd8:	cmp	r0, #0
   10fdc:	movweq	r0, #17872	; 0x45d0
   10fe0:	movteq	r0, #1
   10fe4:	bl	11888 <__assert_fail@plt+0x9c4>
   10fe8:	movw	r0, #6048	; 0x17a0
   10fec:	movt	r0, #1
   10ff0:	bl	145ac <__assert_fail@plt+0x36e8>
   10ff4:	cmp	r0, #0
   10ff8:	bne	11344 <__assert_fail@plt+0x480>
   10ffc:	movw	r0, #1026	; 0x402
   11000:	str	r0, [sp, #12]
   11004:	movw	r0, #1026	; 0x402
   11008:	bl	1396c <__assert_fail@plt+0x2aa8>
   1100c:	str	r0, [sp, #16]
   11010:	movw	r0, #1026	; 0x402
   11014:	bl	1396c <__assert_fail@plt+0x2aa8>
   11018:	mov	sl, r0
   1101c:	mov	r0, #0
   11020:	strb	r0, [sl]
   11024:	mov	r4, #10
   11028:	movw	r2, #17914	; 0x45fa
   1102c:	movt	r2, #1
   11030:	movw	r3, #18400	; 0x47e0
   11034:	movt	r3, #1
   11038:	mov	r8, #0
   1103c:	mov	r1, #0
   11040:	str	r1, [sp, #4]
   11044:	b	11060 <__assert_fail@plt+0x19c>
   11048:	mov	r4, #0
   1104c:	mov	r2, r5
   11050:	mov	r0, #0
   11054:	mov	r3, r9
   11058:	mov	r9, r7
   1105c:	mov	r5, r6
   11060:	str	r0, [sp]
   11064:	mov	r7, r9
   11068:	mov	r0, r9
   1106c:	mov	r6, r5
   11070:	mov	r1, r5
   11074:	mov	r5, r2
   11078:	mov	r9, r3
   1107c:	bl	10dd4 <getopt_long@plt>
   11080:	cmp	r0, #82	; 0x52
   11084:	ble	110c8 <__assert_fail@plt+0x204>
   11088:	cmp	r0, #83	; 0x53
   1108c:	bne	110dc <__assert_fail@plt+0x218>
   11090:	movw	r0, #20792	; 0x5138
   11094:	movt	r0, #2
   11098:	ldr	r0, [r0]
   1109c:	bl	113b0 <__assert_fail@plt+0x4ec>
   110a0:	mov	r8, #1
   110a4:	str	r0, [sp, #4]
   110a8:	cmp	r0, #2
   110ac:	mov	r2, r5
   110b0:	mov	r0, #0
   110b4:	mov	r3, r9
   110b8:	mov	r9, r7
   110bc:	mov	r5, r6
   110c0:	bcc	11060 <__assert_fail@plt+0x19c>
   110c4:	b	11304 <__assert_fail@plt+0x440>
   110c8:	cmn	r0, #1
   110cc:	beq	110f4 <__assert_fail@plt+0x230>
   110d0:	cmp	r0, #48	; 0x30
   110d4:	beq	11048 <__assert_fail@plt+0x184>
   110d8:	b	1133c <__assert_fail@plt+0x478>
   110dc:	cmp	r0, #118	; 0x76
   110e0:	bne	1132c <__assert_fail@plt+0x468>
   110e4:	movw	r0, #17872	; 0x45d0
   110e8:	movt	r0, #1
   110ec:	bl	11664 <__assert_fail@plt+0x7a0>
   110f0:	b	112f4 <__assert_fail@plt+0x430>
   110f4:	movw	r0, #20768	; 0x5120
   110f8:	movt	r0, #2
   110fc:	ldr	r0, [r0]
   11100:	cmp	r0, r7
   11104:	bne	11370 <__assert_fail@plt+0x4ac>
   11108:	cmp	r8, #0
   1110c:	str	r4, [sp, #8]
   11110:	beq	11148 <__assert_fail@plt+0x284>
   11114:	mov	r0, #49	; 0x31
   11118:	ldr	r1, [sp, #4]
   1111c:	cmp	r1, #0
   11120:	movweq	r0, #48	; 0x30
   11124:	movw	r4, #20788	; 0x5134
   11128:	movt	r4, #2
   1112c:	ldr	r1, [r4]
   11130:	bl	10e7c <fputc@plt>
   11134:	ldr	r1, [r4]
   11138:	ldr	r4, [sp, #8]
   1113c:	mov	r0, #0
   11140:	bl	10e7c <fputc@plt>
   11144:	b	11170 <__assert_fail@plt+0x2ac>
   11148:	movw	r0, #20788	; 0x5134
   1114c:	movt	r0, #2
   11150:	ldr	r3, [r0]
   11154:	movw	r0, #18464	; 0x4820
   11158:	movt	r0, #1
   1115c:	mov	r1, #1
   11160:	mov	r2, #10
   11164:	bl	10d5c <fwrite@plt>
   11168:	cmp	r0, #10
   1116c:	bne	1139c <__assert_fail@plt+0x4d8>
   11170:	movw	r0, #20784	; 0x5130
   11174:	movt	r0, #2
   11178:	ldr	r3, [r0]
   1117c:	add	r0, sp, #16
   11180:	add	r1, sp, #12
   11184:	mov	r2, r4
   11188:	bl	10e94 <getdelim@plt>
   1118c:	mov	r1, r0
   11190:	ldr	r0, [sp, #16]
   11194:	cmp	r1, #1
   11198:	blt	112e4 <__assert_fail@plt+0x420>
   1119c:	movw	r9, #1026	; 0x402
   111a0:	mov	r6, #0
   111a4:	sub	r1, r1, #1
   111a8:	ldrb	r2, [r0, r1]
   111ac:	cmp	r4, r2
   111b0:	bne	111c0 <__assert_fail@plt+0x2fc>
   111b4:	mov	r4, #0
   111b8:	strb	r4, [r0, r1]
   111bc:	b	111e8 <__assert_fail@plt+0x324>
   111c0:	mov	r0, #0
   111c4:	movw	r1, #18020	; 0x4664
   111c8:	movt	r1, #1
   111cc:	mov	r2, #5
   111d0:	bl	10d38 <dcgettext@plt>
   111d4:	mov	r2, r0
   111d8:	mov	r0, #0
   111dc:	mov	r1, #0
   111e0:	bl	10d98 <error@plt>
   111e4:	mov	r4, #0
   111e8:	ldr	r1, [sp, #16]
   111ec:	mov	r0, sl
   111f0:	bl	11538 <__assert_fail@plt+0x674>
   111f4:	mov	r7, r0
   111f8:	sub	r5, r0, r6
   111fc:	add	r0, r5, #32768	; 0x8000
   11200:	cmp	r4, r0, lsr #16
   11204:	rsbne	r5, r6, #0
   11208:	movwne	r7, #0
   1120c:	cmp	r8, #0
   11210:	movw	r4, #20788	; 0x5134
   11214:	movt	r4, #2
   11218:	bne	11264 <__assert_fail@plt+0x3a0>
   1121c:	ldr	r1, [r4]
   11220:	add	r0, r5, #127	; 0x7f
   11224:	cmp	r0, #255	; 0xff
   11228:	bcc	11254 <__assert_fail@plt+0x390>
   1122c:	mov	r0, #128	; 0x80
   11230:	bl	10e88 <putc@plt>
   11234:	cmn	r0, #1
   11238:	beq	11300 <__assert_fail@plt+0x43c>
   1123c:	ldr	r1, [r4]
   11240:	mov	r0, r5
   11244:	bl	115d0 <__assert_fail@plt+0x70c>
   11248:	cmp	r0, #0
   1124c:	bne	11264 <__assert_fail@plt+0x3a0>
   11250:	b	11300 <__assert_fail@plt+0x43c>
   11254:	mov	r0, r5
   11258:	bl	10e88 <putc@plt>
   1125c:	cmn	r0, #1
   11260:	beq	11300 <__assert_fail@plt+0x43c>
   11264:	ldr	r0, [sp, #16]
   11268:	add	r0, r0, r7
   1126c:	ldr	r1, [r4]
   11270:	bl	10ea0 <fputs@plt>
   11274:	cmn	r0, #1
   11278:	beq	11300 <__assert_fail@plt+0x43c>
   1127c:	ldr	r1, [r4]
   11280:	mov	r0, #0
   11284:	bl	10e88 <putc@plt>
   11288:	cmn	r0, #1
   1128c:	beq	11300 <__assert_fail@plt+0x43c>
   11290:	ldr	r5, [sp, #16]
   11294:	str	sl, [sp, #16]
   11298:	ldr	r6, [sp, #12]
   1129c:	str	r9, [sp, #12]
   112a0:	movw	r0, #20784	; 0x5130
   112a4:	movt	r0, #2
   112a8:	ldr	r3, [r0]
   112ac:	add	r0, sp, #16
   112b0:	add	r1, sp, #12
   112b4:	ldr	r4, [sp, #8]
   112b8:	mov	r2, r4
   112bc:	bl	10e94 <getdelim@plt>
   112c0:	mov	r1, r0
   112c4:	mov	r8, #0
   112c8:	ldr	r0, [sp, #16]
   112cc:	cmp	r1, #0
   112d0:	mov	sl, r5
   112d4:	mov	r9, r6
   112d8:	mov	r6, r7
   112dc:	bgt	111a4 <__assert_fail@plt+0x2e0>
   112e0:	b	112e8 <__assert_fail@plt+0x424>
   112e4:	mov	r5, sl
   112e8:	bl	13e1c <__assert_fail@plt+0x2f58>
   112ec:	mov	r0, r5
   112f0:	bl	13e1c <__assert_fail@plt+0x2f58>
   112f4:	mov	r0, #0
   112f8:	sub	sp, fp, #28
   112fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11300:	bl	1159c <__assert_fail@plt+0x6d8>
   11304:	movw	r1, #17920	; 0x4600
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	mov	r2, #5
   11314:	bl	10d38 <dcgettext@plt>
   11318:	mov	r2, r0
   1131c:	mov	r0, #1
   11320:	mov	r1, #0
   11324:	ldr	r3, [sp, #4]
   11328:	bl	10d98 <error@plt>
   1132c:	cmp	r0, #104	; 0x68
   11330:	bne	1133c <__assert_fail@plt+0x478>
   11334:	mov	r0, #0
   11338:	bl	11498 <__assert_fail@plt+0x5d4>
   1133c:	mov	r0, #1
   11340:	bl	11498 <__assert_fail@plt+0x5d4>
   11344:	bl	10e10 <__errno_location@plt>
   11348:	ldr	r4, [r0]
   1134c:	movw	r1, #17879	; 0x45d7
   11350:	movt	r1, #1
   11354:	mov	r0, #0
   11358:	mov	r2, #5
   1135c:	bl	10d38 <dcgettext@plt>
   11360:	mov	r2, r0
   11364:	mov	r0, #1
   11368:	mov	r1, r4
   1136c:	bl	10d98 <error@plt>
   11370:	movw	r1, #17963	; 0x462b
   11374:	movt	r1, #1
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	bl	10d38 <dcgettext@plt>
   11384:	mov	r2, r0
   11388:	mov	r0, #0
   1138c:	mov	r1, #0
   11390:	bl	10d98 <error@plt>
   11394:	mov	r0, #1
   11398:	bl	11498 <__assert_fail@plt+0x5d4>
   1139c:	bl	10e10 <__errno_location@plt>
   113a0:	ldr	r4, [r0]
   113a4:	movw	r1, #17985	; 0x4641
   113a8:	movt	r1, #1
   113ac:	b	11354 <__assert_fail@plt+0x490>
   113b0:	push	{r4, r5, fp, lr}
   113b4:	add	fp, sp, #8
   113b8:	sub	sp, sp, #8
   113bc:	mov	r4, r0
   113c0:	bl	10e10 <__errno_location@plt>
   113c4:	mov	r5, r0
   113c8:	mov	r0, #0
   113cc:	str	r0, [r5]
   113d0:	add	r1, sp, #4
   113d4:	mov	r0, r4
   113d8:	mov	r2, #10
   113dc:	bl	10ccc <strtol@plt>
   113e0:	cmp	r0, #0
   113e4:	beq	1141c <__assert_fail@plt+0x558>
   113e8:	add	r1, r0, #-2147483647	; 0x80000001
   113ec:	cmp	r1, #1
   113f0:	bhi	11434 <__assert_fail@plt+0x570>
   113f4:	ldr	r1, [r5]
   113f8:	cmp	r1, #0
   113fc:	beq	11434 <__assert_fail@plt+0x570>
   11400:	movw	r1, #18142	; 0x46de
   11404:	movt	r1, #1
   11408:	mov	r0, #0
   1140c:	mov	r2, #5
   11410:	bl	10d38 <dcgettext@plt>
   11414:	mov	r2, r0
   11418:	b	11464 <__assert_fail@plt+0x5a0>
   1141c:	movw	r1, #20792	; 0x5138
   11420:	movt	r1, #2
   11424:	ldr	r1, [r1]
   11428:	ldr	r2, [sp, #4]
   1142c:	cmp	r2, r1
   11430:	beq	11474 <__assert_fail@plt+0x5b0>
   11434:	ldr	r5, [sp, #4]
   11438:	ldrb	r1, [r5]
   1143c:	cmp	r1, #0
   11440:	subeq	sp, fp, #8
   11444:	popeq	{r4, r5, fp, pc}
   11448:	movw	r1, #18194	; 0x4712
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	mov	r2, #5
   11458:	bl	10d38 <dcgettext@plt>
   1145c:	mov	r2, r0
   11460:	str	r5, [sp]
   11464:	mov	r0, #1
   11468:	mov	r1, #0
   1146c:	mov	r3, r4
   11470:	bl	10d98 <error@plt>
   11474:	movw	r1, #18083	; 0x46a3
   11478:	movt	r1, #1
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	bl	10d38 <dcgettext@plt>
   11488:	mov	r2, r0
   1148c:	mov	r0, #1
   11490:	mov	r1, #0
   11494:	bl	10d98 <error@plt>
   11498:	push	{fp, lr}
   1149c:	mov	fp, sp
   114a0:	mov	r4, r0
   114a4:	cmp	r0, #0
   114a8:	bne	114f8 <__assert_fail@plt+0x634>
   114ac:	movw	r6, #20788	; 0x5134
   114b0:	movt	r6, #2
   114b4:	ldr	r5, [r6]
   114b8:	movw	r1, #18277	; 0x4765
   114bc:	movt	r1, #1
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	bl	10d38 <dcgettext@plt>
   114cc:	mov	r1, r0
   114d0:	movw	r7, #20808	; 0x5148
   114d4:	movt	r7, #2
   114d8:	ldr	r2, [r7]
   114dc:	mov	r0, r5
   114e0:	bl	10e04 <fprintf@plt>
   114e4:	ldr	r0, [r6]
   114e8:	ldr	r1, [r7]
   114ec:	bl	11714 <__assert_fail@plt+0x850>
   114f0:	mov	r0, r4
   114f4:	bl	10dec <exit@plt>
   114f8:	movw	r0, #20776	; 0x5128
   114fc:	movt	r0, #2
   11500:	ldr	r5, [r0]
   11504:	movw	r1, #18238	; 0x473e
   11508:	movt	r1, #1
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	bl	10d38 <dcgettext@plt>
   11518:	mov	r1, r0
   1151c:	movw	r0, #20808	; 0x5148
   11520:	movt	r0, #2
   11524:	ldr	r2, [r0]
   11528:	mov	r0, r5
   1152c:	bl	10e04 <fprintf@plt>
   11530:	mov	r0, r4
   11534:	bl	10dec <exit@plt>
   11538:	ldrb	r3, [r0]
   1153c:	cmp	r3, #0
   11540:	mov	r2, r0
   11544:	beq	11594 <__assert_fail@plt+0x6d0>
   11548:	ldrb	r2, [r1]
   1154c:	cmp	r3, r2
   11550:	mov	r2, r0
   11554:	bne	11594 <__assert_fail@plt+0x6d0>
   11558:	mov	r2, #1
   1155c:	cmn	r2, #-2147483647	; 0x80000001
   11560:	beq	1158c <__assert_fail@plt+0x6c8>
   11564:	ldrb	r3, [r0, r2]
   11568:	add	ip, r2, #1
   1156c:	cmp	r3, #0
   11570:	beq	11584 <__assert_fail@plt+0x6c0>
   11574:	ldrb	r2, [r1, r2]
   11578:	cmp	r3, r2
   1157c:	mov	r2, ip
   11580:	beq	1155c <__assert_fail@plt+0x698>
   11584:	add	r1, r0, ip
   11588:	b	11590 <__assert_fail@plt+0x6cc>
   1158c:	add	r1, r0, r2
   11590:	sub	r2, r1, #1
   11594:	sub	r0, r2, r0
   11598:	bx	lr
   1159c:	push	{fp, lr}
   115a0:	mov	fp, sp
   115a4:	bl	10e10 <__errno_location@plt>
   115a8:	ldr	r4, [r0]
   115ac:	movw	r1, #18323	; 0x4793
   115b0:	movt	r1, #1
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	bl	10d38 <dcgettext@plt>
   115c0:	mov	r2, r0
   115c4:	mov	r0, #1
   115c8:	mov	r1, r4
   115cc:	bl	10d98 <error@plt>
   115d0:	push	{r4, r5, fp, lr}
   115d4:	add	fp, sp, #8
   115d8:	cmp	r0, #32768	; 0x8000
   115dc:	bge	11624 <__assert_fail@plt+0x760>
   115e0:	mov	r5, r0
   115e4:	cmn	r0, #32768	; 0x8000
   115e8:	blt	11644 <__assert_fail@plt+0x780>
   115ec:	mov	r4, r1
   115f0:	asr	r0, r5, #8
   115f4:	bl	10e88 <putc@plt>
   115f8:	cmn	r0, #1
   115fc:	moveq	r0, #0
   11600:	popeq	{r4, r5, fp, pc}
   11604:	mov	r0, r5
   11608:	mov	r1, r4
   1160c:	bl	10e88 <putc@plt>
   11610:	mov	r1, r0
   11614:	add	r0, r0, #1
   11618:	cmn	r1, #1
   1161c:	movwne	r0, #1
   11620:	pop	{r4, r5, fp, pc}
   11624:	movw	r0, #18335	; 0x479f
   11628:	movt	r0, #1
   1162c:	movw	r1, #18349	; 0x47ad
   11630:	movt	r1, #1
   11634:	movw	r3, #18358	; 0x47b6
   11638:	movt	r3, #1
   1163c:	mov	r2, #104	; 0x68
   11640:	bl	10ec4 <__assert_fail@plt>
   11644:	movw	r0, #18385	; 0x47d1
   11648:	movt	r0, #1
   1164c:	movw	r1, #18349	; 0x47ad
   11650:	movt	r1, #1
   11654:	movw	r3, #18358	; 0x47b6
   11658:	movt	r3, #1
   1165c:	mov	r2, #105	; 0x69
   11660:	bl	10ec4 <__assert_fail@plt>
   11664:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11668:	add	fp, sp, #24
   1166c:	sub	sp, sp, #16
   11670:	mov	r8, r0
   11674:	movw	r0, #20776	; 0x5128
   11678:	movt	r0, #2
   1167c:	ldr	r0, [r0]
   11680:	bl	13db4 <__assert_fail@plt+0x2ef0>
   11684:	movw	r0, #20788	; 0x5134
   11688:	movt	r0, #2
   1168c:	ldr	r6, [r0]
   11690:	movw	r0, #20688	; 0x50d0
   11694:	movt	r0, #2
   11698:	ldr	r5, [r0]
   1169c:	mov	r9, #0
   116a0:	movw	r1, #18502	; 0x4846
   116a4:	movt	r1, #1
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	bl	10d38 <dcgettext@plt>
   116b4:	mov	r7, r0
   116b8:	movw	r1, #18517	; 0x4855
   116bc:	movt	r1, #1
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	bl	10d38 <dcgettext@plt>
   116cc:	mov	r4, r0
   116d0:	movw	r1, #18532	; 0x4864
   116d4:	movt	r1, #1
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	bl	10d38 <dcgettext@plt>
   116e4:	str	r7, [sp]
   116e8:	str	r4, [sp, #4]
   116ec:	str	r0, [sp, #8]
   116f0:	str	r9, [sp, #12]
   116f4:	movw	r2, #18488	; 0x4838
   116f8:	movt	r2, #1
   116fc:	mov	r0, r6
   11700:	mov	r1, r8
   11704:	mov	r3, r5
   11708:	bl	13880 <__assert_fail@plt+0x29bc>
   1170c:	sub	sp, fp, #24
   11710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11714:	push	{r4, r5, fp, lr}
   11718:	add	fp, sp, #8
   1171c:	sub	sp, sp, #16
   11720:	mov	r4, r1
   11724:	mov	r5, r0
   11728:	movw	r1, #18545	; 0x4871
   1172c:	movt	r1, #1
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	bl	10d38 <dcgettext@plt>
   1173c:	mov	r1, r0
   11740:	movw	r0, #18837	; 0x4995
   11744:	movt	r0, #1
   11748:	movw	r2, #18790	; 0x4966
   1174c:	movt	r2, #1
   11750:	movw	r3, #18488	; 0x4838
   11754:	movt	r3, #1
   11758:	str	r3, [sp]
   1175c:	str	r2, [sp, #4]
   11760:	str	r0, [sp, #8]
   11764:	movw	r2, #18751	; 0x493f
   11768:	movt	r2, #1
   1176c:	mov	r0, r5
   11770:	mov	r3, r4
   11774:	bl	10e04 <fprintf@plt>
   11778:	sub	sp, fp, #8
   1177c:	pop	{r4, r5, fp, pc}
   11780:	movw	r1, #20800	; 0x5140
   11784:	movt	r1, #2
   11788:	str	r0, [r1]
   1178c:	bx	lr
   11790:	movw	r1, #20804	; 0x5144
   11794:	movt	r1, #2
   11798:	strb	r0, [r1]
   1179c:	bx	lr
   117a0:	push	{r4, r5, r6, sl, fp, lr}
   117a4:	add	fp, sp, #16
   117a8:	sub	sp, sp, #8
   117ac:	movw	r0, #20788	; 0x5134
   117b0:	movt	r0, #2
   117b4:	ldr	r0, [r0]
   117b8:	bl	1432c <__assert_fail@plt+0x3468>
   117bc:	cmp	r0, #0
   117c0:	beq	117e8 <__assert_fail@plt+0x924>
   117c4:	movw	r0, #20804	; 0x5144
   117c8:	movt	r0, #2
   117cc:	ldrb	r0, [r0]
   117d0:	cmp	r0, #0
   117d4:	beq	11808 <__assert_fail@plt+0x944>
   117d8:	bl	10e10 <__errno_location@plt>
   117dc:	ldr	r0, [r0]
   117e0:	cmp	r0, #32
   117e4:	bne	11808 <__assert_fail@plt+0x944>
   117e8:	movw	r0, #20776	; 0x5128
   117ec:	movt	r0, #2
   117f0:	ldr	r0, [r0]
   117f4:	bl	1432c <__assert_fail@plt+0x3468>
   117f8:	cmp	r0, #0
   117fc:	subeq	sp, fp, #16
   11800:	popeq	{r4, r5, r6, sl, fp, pc}
   11804:	b	11878 <__assert_fail@plt+0x9b4>
   11808:	movw	r1, #18323	; 0x4793
   1180c:	movt	r1, #1
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	bl	10d38 <dcgettext@plt>
   1181c:	mov	r4, r0
   11820:	movw	r0, #20800	; 0x5140
   11824:	movt	r0, #2
   11828:	ldr	r6, [r0]
   1182c:	bl	10e10 <__errno_location@plt>
   11830:	ldr	r5, [r0]
   11834:	cmp	r6, #0
   11838:	bne	11854 <__assert_fail@plt+0x990>
   1183c:	movw	r2, #18863	; 0x49af
   11840:	movt	r2, #1
   11844:	mov	r0, #0
   11848:	mov	r1, r5
   1184c:	mov	r3, r4
   11850:	b	11874 <__assert_fail@plt+0x9b0>
   11854:	mov	r0, r6
   11858:	bl	12f70 <__assert_fail@plt+0x20ac>
   1185c:	mov	r3, r0
   11860:	str	r4, [sp]
   11864:	movw	r2, #18859	; 0x49ab
   11868:	movt	r2, #1
   1186c:	mov	r0, #0
   11870:	mov	r1, r5
   11874:	bl	10d98 <error@plt>
   11878:	movw	r0, #20692	; 0x50d4
   1187c:	movt	r0, #2
   11880:	ldr	r0, [r0]
   11884:	bl	10d08 <_exit@plt>
   11888:	push	{r4, r5, fp, lr}
   1188c:	add	fp, sp, #8
   11890:	cmp	r0, #0
   11894:	beq	11928 <__assert_fail@plt+0xa64>
   11898:	mov	r4, r0
   1189c:	mov	r1, #47	; 0x2f
   118a0:	bl	10e64 <strrchr@plt>
   118a4:	cmp	r0, #0
   118a8:	mov	r5, r4
   118ac:	addne	r5, r0, #1
   118b0:	sub	r0, r5, r4
   118b4:	cmp	r0, #7
   118b8:	blt	1190c <__assert_fail@plt+0xa48>
   118bc:	sub	r0, r5, #7
   118c0:	movw	r1, #18922	; 0x49ea
   118c4:	movt	r1, #1
   118c8:	mov	r2, #7
   118cc:	bl	10eac <strncmp@plt>
   118d0:	cmp	r0, #0
   118d4:	bne	1190c <__assert_fail@plt+0xa48>
   118d8:	movw	r1, #18930	; 0x49f2
   118dc:	movt	r1, #1
   118e0:	mov	r0, r5
   118e4:	mov	r2, #3
   118e8:	bl	10eac <strncmp@plt>
   118ec:	cmp	r0, #0
   118f0:	beq	118fc <__assert_fail@plt+0xa38>
   118f4:	mov	r4, r5
   118f8:	b	1190c <__assert_fail@plt+0xa48>
   118fc:	add	r4, r5, #3
   11900:	movw	r0, #20760	; 0x5118
   11904:	movt	r0, #2
   11908:	str	r4, [r0]
   1190c:	movw	r0, #20764	; 0x511c
   11910:	movt	r0, #2
   11914:	str	r4, [r0]
   11918:	movw	r0, #20808	; 0x5148
   1191c:	movt	r0, #2
   11920:	str	r4, [r0]
   11924:	pop	{r4, r5, fp, pc}
   11928:	movw	r0, #20776	; 0x5128
   1192c:	movt	r0, #2
   11930:	ldr	r3, [r0]
   11934:	movw	r0, #18866	; 0x49b2
   11938:	movt	r0, #1
   1193c:	mov	r1, #55	; 0x37
   11940:	mov	r2, #1
   11944:	bl	10d5c <fwrite@plt>
   11948:	bl	10eb8 <abort@plt>
   1194c:	push	{r4, r5, r6, sl, fp, lr}
   11950:	add	fp, sp, #16
   11954:	mov	r4, r0
   11958:	movw	r0, #20816	; 0x5150
   1195c:	movt	r0, #2
   11960:	cmp	r4, #0
   11964:	moveq	r4, r0
   11968:	bl	10e10 <__errno_location@plt>
   1196c:	mov	r5, r0
   11970:	ldr	r6, [r0]
   11974:	mov	r0, r4
   11978:	mov	r1, #48	; 0x30
   1197c:	bl	13c60 <__assert_fail@plt+0x2d9c>
   11980:	str	r6, [r5]
   11984:	pop	{r4, r5, r6, sl, fp, pc}
   11988:	movw	r1, #20816	; 0x5150
   1198c:	movt	r1, #2
   11990:	cmp	r0, #0
   11994:	movne	r1, r0
   11998:	ldr	r0, [r1]
   1199c:	bx	lr
   119a0:	movw	r2, #20816	; 0x5150
   119a4:	movt	r2, #2
   119a8:	cmp	r0, #0
   119ac:	movne	r2, r0
   119b0:	str	r1, [r2]
   119b4:	bx	lr
   119b8:	movw	r3, #20816	; 0x5150
   119bc:	movt	r3, #2
   119c0:	cmp	r0, #0
   119c4:	movne	r3, r0
   119c8:	ubfx	r0, r1, #5, #3
   119cc:	add	r0, r3, r0, lsl #2
   119d0:	ldr	r3, [r0, #8]
   119d4:	and	r1, r1, #31
   119d8:	eor	r2, r2, r3, lsr r1
   119dc:	and	r2, r2, #1
   119e0:	eor	r2, r3, r2, lsl r1
   119e4:	str	r2, [r0, #8]
   119e8:	mov	r0, #1
   119ec:	and	r0, r0, r3, lsr r1
   119f0:	bx	lr
   119f4:	movw	r2, #20816	; 0x5150
   119f8:	movt	r2, #2
   119fc:	cmp	r0, #0
   11a00:	movne	r2, r0
   11a04:	ldr	r0, [r2, #4]
   11a08:	str	r1, [r2, #4]
   11a0c:	bx	lr
   11a10:	movw	r3, #20816	; 0x5150
   11a14:	movt	r3, #2
   11a18:	cmp	r0, #0
   11a1c:	movne	r3, r0
   11a20:	mov	r0, #10
   11a24:	str	r0, [r3]
   11a28:	cmp	r1, #0
   11a2c:	cmpne	r2, #0
   11a30:	bne	11a40 <__assert_fail@plt+0xb7c>
   11a34:	push	{fp, lr}
   11a38:	mov	fp, sp
   11a3c:	bl	10eb8 <abort@plt>
   11a40:	str	r1, [r3, #40]	; 0x28
   11a44:	str	r2, [r3, #44]	; 0x2c
   11a48:	bx	lr
   11a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a50:	add	fp, sp, #28
   11a54:	sub	sp, sp, #20
   11a58:	mov	r8, r3
   11a5c:	mov	r9, r2
   11a60:	mov	sl, r1
   11a64:	mov	r7, r0
   11a68:	ldr	r0, [fp, #8]
   11a6c:	movw	r5, #20816	; 0x5150
   11a70:	movt	r5, #2
   11a74:	cmp	r0, #0
   11a78:	movne	r5, r0
   11a7c:	bl	10e10 <__errno_location@plt>
   11a80:	mov	r4, r0
   11a84:	ldm	r5, {r0, r1}
   11a88:	ldr	r2, [r5, #40]	; 0x28
   11a8c:	ldr	r3, [r5, #44]	; 0x2c
   11a90:	ldr	r6, [r4]
   11a94:	add	r5, r5, #8
   11a98:	stm	sp, {r0, r1, r5}
   11a9c:	str	r2, [sp, #12]
   11aa0:	str	r3, [sp, #16]
   11aa4:	mov	r0, r7
   11aa8:	mov	r1, sl
   11aac:	mov	r2, r9
   11ab0:	mov	r3, r8
   11ab4:	bl	11ac4 <__assert_fail@plt+0xc00>
   11ab8:	str	r6, [r4]
   11abc:	sub	sp, fp, #28
   11ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ac8:	add	fp, sp, #28
   11acc:	sub	sp, sp, #156	; 0x9c
   11ad0:	mov	r9, r3
   11ad4:	str	r2, [fp, #-84]	; 0xffffffac
   11ad8:	mov	r6, r1
   11adc:	mov	r7, r0
   11ae0:	ldr	r0, [fp, #12]
   11ae4:	and	r1, r0, #4
   11ae8:	str	r1, [sp, #32]
   11aec:	and	r1, r0, #1
   11af0:	str	r1, [sp, #36]	; 0x24
   11af4:	ubfx	sl, r0, #1, #1
   11af8:	bl	10d74 <__ctype_get_mb_cur_max@plt>
   11afc:	str	r0, [sp, #40]	; 0x28
   11b00:	ldr	r0, [fp, #24]
   11b04:	str	r0, [sp, #76]	; 0x4c
   11b08:	ldr	r0, [fp, #20]
   11b0c:	str	r0, [sp, #68]	; 0x44
   11b10:	ldr	r0, [fp, #8]
   11b14:	str	r0, [fp, #-60]	; 0xffffffc4
   11b18:	mov	r0, #0
   11b1c:	str	r0, [sp, #72]	; 0x48
   11b20:	mov	r0, #0
   11b24:	str	r0, [sp, #92]	; 0x5c
   11b28:	mov	r0, #0
   11b2c:	str	r0, [fp, #-72]	; 0xffffffb8
   11b30:	mov	r0, #0
   11b34:	mov	r1, #0
   11b38:	str	r1, [fp, #-56]	; 0xffffffc8
   11b3c:	mov	r1, #0
   11b40:	str	r1, [sp, #56]	; 0x38
   11b44:	mov	r5, #1
   11b48:	str	r7, [sp, #80]	; 0x50
   11b4c:	mov	r4, r6
   11b50:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11b54:	cmp	r6, #10
   11b58:	bhi	12ac0 <__assert_fail@plt+0x1bfc>
   11b5c:	add	r1, pc, #20
   11b60:	mov	r8, #0
   11b64:	mov	r2, #1
   11b68:	mov	r3, #0
   11b6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b70:	mov	lr, r9
   11b74:	ldr	pc, [r1, r6, lsl #2]
   11b78:	andeq	r1, r1, r0, asr ip
   11b7c:	andeq	r1, r1, r0, lsl #25
   11b80:	andeq	r1, r1, r0, asr #24
   11b84:	andeq	r1, r1, r8, lsr ip
   11b88:	andeq	r1, r1, r4, ror ip
   11b8c:	ldrdeq	r1, [r1], -r4
   11b90:	andeq	r1, r1, r0, ror #24
   11b94:	andeq	r1, r1, r0, lsr sp
   11b98:	andeq	r1, r1, r4, lsr #23
   11b9c:	andeq	r1, r1, r4, lsr #23
   11ba0:	andeq	r1, r1, ip, asr #23
   11ba4:	movw	r0, #19012	; 0x4a44
   11ba8:	movt	r0, #1
   11bac:	mov	r1, r6
   11bb0:	bl	130cc <__assert_fail@plt+0x2208>
   11bb4:	str	r0, [sp, #68]	; 0x44
   11bb8:	movw	r0, #19014	; 0x4a46
   11bbc:	movt	r0, #1
   11bc0:	mov	r1, r6
   11bc4:	bl	130cc <__assert_fail@plt+0x2208>
   11bc8:	str	r0, [sp, #76]	; 0x4c
   11bcc:	mov	r8, #0
   11bd0:	tst	sl, #1
   11bd4:	bne	11c0c <__assert_fail@plt+0xd48>
   11bd8:	ldr	r0, [sp, #68]	; 0x44
   11bdc:	ldrb	r0, [r0]
   11be0:	cmp	r0, #0
   11be4:	beq	11c0c <__assert_fail@plt+0xd48>
   11be8:	ldr	r1, [sp, #68]	; 0x44
   11bec:	add	r1, r1, #1
   11bf0:	mov	r8, #0
   11bf4:	cmp	r8, r4
   11bf8:	strbcc	r0, [r7, r8]
   11bfc:	ldrb	r0, [r1, r8]
   11c00:	add	r8, r8, #1
   11c04:	cmp	r0, #0
   11c08:	bne	11bf4 <__assert_fail@plt+0xd30>
   11c0c:	ldr	r6, [sp, #76]	; 0x4c
   11c10:	mov	r0, r6
   11c14:	bl	10df8 <strlen@plt>
   11c18:	str	r0, [fp, #-72]	; 0xffffffb8
   11c1c:	str	r6, [sp, #92]	; 0x5c
   11c20:	mov	r2, #1
   11c24:	mov	r3, sl
   11c28:	ldr	ip, [fp, #-84]	; 0xffffffac
   11c2c:	mov	lr, r9
   11c30:	ldr	r6, [fp, #-60]	; 0xffffffc4
   11c34:	b	11d30 <__assert_fail@plt+0xe6c>
   11c38:	mov	r0, #1
   11c3c:	b	11c80 <__assert_fail@plt+0xdbc>
   11c40:	tst	sl, #1
   11c44:	bne	11c80 <__assert_fail@plt+0xdbc>
   11c48:	mov	r2, r0
   11c4c:	b	11ca8 <__assert_fail@plt+0xde4>
   11c50:	mov	r6, #0
   11c54:	mov	r8, #0
   11c58:	mov	r2, r0
   11c5c:	b	11d2c <__assert_fail@plt+0xe68>
   11c60:	mov	r0, #1
   11c64:	str	r0, [fp, #-72]	; 0xffffffb8
   11c68:	mov	r8, #0
   11c6c:	mov	r6, #5
   11c70:	b	11cec <__assert_fail@plt+0xe28>
   11c74:	mov	r2, #1
   11c78:	tst	sl, #1
   11c7c:	beq	11ca8 <__assert_fail@plt+0xde4>
   11c80:	mov	r1, #1
   11c84:	str	r1, [fp, #-72]	; 0xffffffb8
   11c88:	mov	r8, #0
   11c8c:	mov	r6, #2
   11c90:	movw	r1, #19014	; 0x4a46
   11c94:	movt	r1, #1
   11c98:	str	r1, [sp, #92]	; 0x5c
   11c9c:	mov	r2, r0
   11ca0:	mov	r3, #1
   11ca4:	b	11d30 <__assert_fail@plt+0xe6c>
   11ca8:	mov	r8, #1
   11cac:	mov	r6, #2
   11cb0:	cmp	r4, #0
   11cb4:	movne	r0, #39	; 0x27
   11cb8:	strbne	r0, [r7]
   11cbc:	movw	r0, #19014	; 0x4a46
   11cc0:	movt	r0, #1
   11cc4:	str	r0, [sp, #92]	; 0x5c
   11cc8:	mov	r0, #1
   11ccc:	str	r0, [fp, #-72]	; 0xffffffb8
   11cd0:	b	11d2c <__assert_fail@plt+0xe68>
   11cd4:	mov	r6, #5
   11cd8:	tst	sl, #1
   11cdc:	beq	11d04 <__assert_fail@plt+0xe40>
   11ce0:	mov	r0, #1
   11ce4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ce8:	mov	r8, #0
   11cec:	movw	r0, #19010	; 0x4a42
   11cf0:	movt	r0, #1
   11cf4:	str	r0, [sp, #92]	; 0x5c
   11cf8:	mov	r2, #1
   11cfc:	mov	r3, #1
   11d00:	b	11d30 <__assert_fail@plt+0xe6c>
   11d04:	cmp	r4, #0
   11d08:	movne	r0, #34	; 0x22
   11d0c:	strbne	r0, [r7]
   11d10:	mov	r8, #1
   11d14:	movw	r0, #19010	; 0x4a42
   11d18:	movt	r0, #1
   11d1c:	str	r0, [sp, #92]	; 0x5c
   11d20:	mov	r0, #1
   11d24:	str	r0, [fp, #-72]	; 0xffffffb8
   11d28:	mov	r2, #1
   11d2c:	mov	r3, #0
   11d30:	ldr	r0, [fp, #16]
   11d34:	cmp	r0, #0
   11d38:	movwne	r0, #1
   11d3c:	and	r0, r0, r3
   11d40:	str	r0, [fp, #-88]	; 0xffffffa8
   11d44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d48:	cmp	r0, #0
   11d4c:	movwne	r0, #1
   11d50:	and	r1, r0, r3
   11d54:	and	r1, r2, r1
   11d58:	str	r1, [sp, #48]	; 0x30
   11d5c:	str	r6, [fp, #-60]	; 0xffffffc4
   11d60:	subs	r6, r6, #2
   11d64:	clz	r1, r6
   11d68:	lsr	r1, r1, #5
   11d6c:	and	r1, r1, r3
   11d70:	str	r1, [sp, #60]	; 0x3c
   11d74:	str	r6, [fp, #-80]	; 0xffffffb0
   11d78:	mov	r1, r6
   11d7c:	movwne	r1, #1
   11d80:	str	r3, [fp, #-76]	; 0xffffffb4
   11d84:	eor	r3, r3, #1
   11d88:	str	r3, [sp, #88]	; 0x58
   11d8c:	orr	r3, r1, r3
   11d90:	str	r3, [sp, #64]	; 0x40
   11d94:	and	r1, r1, r2
   11d98:	str	r1, [fp, #-68]	; 0xffffffbc
   11d9c:	and	r0, r0, r1
   11da0:	str	r0, [fp, #-64]	; 0xffffffc0
   11da4:	str	r2, [sp, #84]	; 0x54
   11da8:	eor	r0, r2, #1
   11dac:	str	r0, [sp, #52]	; 0x34
   11db0:	mov	r6, #0
   11db4:	cmn	lr, #1
   11db8:	beq	11dc8 <__assert_fail@plt+0xf04>
   11dbc:	cmp	r6, lr
   11dc0:	bne	11dd4 <__assert_fail@plt+0xf10>
   11dc4:	b	12940 <__assert_fail@plt+0x1a7c>
   11dc8:	ldrb	r0, [ip, r6]
   11dcc:	cmp	r0, #0
   11dd0:	beq	12940 <__assert_fail@plt+0x1a7c>
   11dd4:	str	r5, [fp, #-48]	; 0xffffffd0
   11dd8:	mov	sl, #0
   11ddc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11de0:	cmp	r0, #0
   11de4:	beq	11e18 <__assert_fail@plt+0xf54>
   11de8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11dec:	add	r5, r6, r0
   11df0:	cmp	r0, #2
   11df4:	bcc	11e10 <__assert_fail@plt+0xf4c>
   11df8:	cmn	lr, #1
   11dfc:	bne	11e10 <__assert_fail@plt+0xf4c>
   11e00:	mov	r0, ip
   11e04:	bl	10df8 <strlen@plt>
   11e08:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e0c:	mov	lr, r0
   11e10:	cmp	r5, lr
   11e14:	bls	11e24 <__assert_fail@plt+0xf60>
   11e18:	mov	r0, #0
   11e1c:	str	r0, [fp, #-52]	; 0xffffffcc
   11e20:	b	11e70 <__assert_fail@plt+0xfac>
   11e24:	mov	r5, r4
   11e28:	mov	r4, lr
   11e2c:	add	r0, ip, r6
   11e30:	ldr	r1, [sp, #92]	; 0x5c
   11e34:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11e38:	bl	10d2c <memcmp@plt>
   11e3c:	cmp	r0, #0
   11e40:	mov	r1, r0
   11e44:	movwne	r1, #1
   11e48:	ldr	r2, [sp, #88]	; 0x58
   11e4c:	orr	r1, r1, r2
   11e50:	tst	r1, #1
   11e54:	beq	12a04 <__assert_fail@plt+0x1b40>
   11e58:	clz	r0, r0
   11e5c:	lsr	r0, r0, #5
   11e60:	str	r0, [fp, #-52]	; 0xffffffcc
   11e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e68:	mov	lr, r4
   11e6c:	mov	r4, r5
   11e70:	ldrb	r5, [ip, r6]
   11e74:	cmp	r5, #126	; 0x7e
   11e78:	bhi	12234 <__assert_fail@plt+0x1370>
   11e7c:	mov	r9, #1
   11e80:	mov	r2, #110	; 0x6e
   11e84:	mov	r0, #97	; 0x61
   11e88:	add	r3, pc, #4
   11e8c:	mov	r1, #0
   11e90:	ldr	pc, [r3, r5, lsl #2]
   11e94:	andeq	r2, r1, ip, lsr #2
   11e98:	andeq	r2, r1, r4, lsr r2
   11e9c:	andeq	r2, r1, r4, lsr r2
   11ea0:	andeq	r2, r1, r4, lsr r2
   11ea4:	andeq	r2, r1, r4, lsr r2
   11ea8:	andeq	r2, r1, r4, lsr r2
   11eac:	andeq	r2, r1, r4, lsr r2
   11eb0:	strdeq	r2, [r1], -r8
   11eb4:	andeq	r2, r1, ip, lsl #2
   11eb8:	andeq	r2, r1, r4, lsl #2
   11ebc:	andeq	r2, r1, r8, lsl r1
   11ec0:	muleq	r1, ip, r1
   11ec4:	strdeq	r2, [r1], -ip
   11ec8:	andeq	r2, r1, r4, lsl r1
   11ecc:	andeq	r2, r1, r4, lsr r2
   11ed0:	andeq	r2, r1, r4, lsr r2
   11ed4:	andeq	r2, r1, r4, lsr r2
   11ed8:	andeq	r2, r1, r4, lsr r2
   11edc:	andeq	r2, r1, r4, lsr r2
   11ee0:	andeq	r2, r1, r4, lsr r2
   11ee4:	andeq	r2, r1, r4, lsr r2
   11ee8:	andeq	r2, r1, r4, lsr r2
   11eec:	andeq	r2, r1, r4, lsr r2
   11ef0:	andeq	r2, r1, r4, lsr r2
   11ef4:	andeq	r2, r1, r4, lsr r2
   11ef8:	andeq	r2, r1, r4, lsr r2
   11efc:	andeq	r2, r1, r4, lsr r2
   11f00:	andeq	r2, r1, r4, lsr r2
   11f04:	andeq	r2, r1, r4, lsr r2
   11f08:	andeq	r2, r1, r4, lsr r2
   11f0c:	andeq	r2, r1, r4, lsr r2
   11f10:	andeq	r2, r1, r4, lsr r2
   11f14:	andeq	r2, r1, r8, lsr #5
   11f18:	andeq	r2, r1, ip, lsr #5
   11f1c:	andeq	r2, r1, ip, lsr #5
   11f20:	andeq	r2, r1, r4, lsr #1
   11f24:	andeq	r2, r1, ip, lsr #5
   11f28:	muleq	r1, r0, r0
   11f2c:	andeq	r2, r1, ip, lsr #5
   11f30:	andeq	r2, r1, r4, lsr #3
   11f34:	andeq	r2, r1, ip, lsr #5
   11f38:	andeq	r2, r1, ip, lsr #5
   11f3c:	andeq	r2, r1, ip, lsr #5
   11f40:	muleq	r1, r0, r0
   11f44:	muleq	r1, r0, r0
   11f48:	muleq	r1, r0, r0
   11f4c:	muleq	r1, r0, r0
   11f50:	muleq	r1, r0, r0
   11f54:	muleq	r1, r0, r0
   11f58:	muleq	r1, r0, r0
   11f5c:	muleq	r1, r0, r0
   11f60:	muleq	r1, r0, r0
   11f64:	muleq	r1, r0, r0
   11f68:	muleq	r1, r0, r0
   11f6c:	muleq	r1, r0, r0
   11f70:	muleq	r1, r0, r0
   11f74:	muleq	r1, r0, r0
   11f78:	muleq	r1, r0, r0
   11f7c:	muleq	r1, r0, r0
   11f80:	andeq	r2, r1, ip, lsr #5
   11f84:	andeq	r2, r1, ip, lsr #5
   11f88:	andeq	r2, r1, ip, lsr #5
   11f8c:	andeq	r2, r1, ip, lsr #5
   11f90:	andeq	r2, r1, ip, ror #2
   11f94:	andeq	r2, r1, r4, lsr r2
   11f98:	muleq	r1, r0, r0
   11f9c:	muleq	r1, r0, r0
   11fa0:	muleq	r1, r0, r0
   11fa4:	muleq	r1, r0, r0
   11fa8:	muleq	r1, r0, r0
   11fac:	muleq	r1, r0, r0
   11fb0:	muleq	r1, r0, r0
   11fb4:	muleq	r1, r0, r0
   11fb8:	muleq	r1, r0, r0
   11fbc:	muleq	r1, r0, r0
   11fc0:	muleq	r1, r0, r0
   11fc4:	muleq	r1, r0, r0
   11fc8:	muleq	r1, r0, r0
   11fcc:	muleq	r1, r0, r0
   11fd0:	muleq	r1, r0, r0
   11fd4:	muleq	r1, r0, r0
   11fd8:	muleq	r1, r0, r0
   11fdc:	muleq	r1, r0, r0
   11fe0:	muleq	r1, r0, r0
   11fe4:	muleq	r1, r0, r0
   11fe8:	muleq	r1, r0, r0
   11fec:	muleq	r1, r0, r0
   11ff0:	muleq	r1, r0, r0
   11ff4:	muleq	r1, r0, r0
   11ff8:	muleq	r1, r0, r0
   11ffc:	muleq	r1, r0, r0
   12000:	andeq	r2, r1, ip, lsr #5
   12004:	ldrdeq	r2, [r1], -r8
   12008:	muleq	r1, r0, r0
   1200c:	andeq	r2, r1, ip, lsr #5
   12010:	muleq	r1, r0, r0
   12014:	andeq	r2, r1, ip, lsr #5
   12018:	muleq	r1, r0, r0
   1201c:	muleq	r1, r0, r0
   12020:	muleq	r1, r0, r0
   12024:	muleq	r1, r0, r0
   12028:	muleq	r1, r0, r0
   1202c:	muleq	r1, r0, r0
   12030:	muleq	r1, r0, r0
   12034:	muleq	r1, r0, r0
   12038:	muleq	r1, r0, r0
   1203c:	muleq	r1, r0, r0
   12040:	muleq	r1, r0, r0
   12044:	muleq	r1, r0, r0
   12048:	muleq	r1, r0, r0
   1204c:	muleq	r1, r0, r0
   12050:	muleq	r1, r0, r0
   12054:	muleq	r1, r0, r0
   12058:	muleq	r1, r0, r0
   1205c:	muleq	r1, r0, r0
   12060:	muleq	r1, r0, r0
   12064:	muleq	r1, r0, r0
   12068:	muleq	r1, r0, r0
   1206c:	muleq	r1, r0, r0
   12070:	muleq	r1, r0, r0
   12074:	muleq	r1, r0, r0
   12078:	muleq	r1, r0, r0
   1207c:	muleq	r1, r0, r0
   12080:	strheq	r2, [r1], -r8
   12084:	andeq	r2, r1, ip, lsr #5
   12088:	strheq	r2, [r1], -r8
   1208c:	andeq	r2, r1, r4, lsr #1
   12090:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12094:	cmp	r0, #0
   12098:	beq	1230c <__assert_fail@plt+0x1448>
   1209c:	ldr	r0, [fp, #16]
   120a0:	b	12310 <__assert_fail@plt+0x144c>
   120a4:	mov	r9, #0
   120a8:	cmp	r6, #0
   120ac:	beq	122a8 <__assert_fail@plt+0x13e4>
   120b0:	mov	sl, #0
   120b4:	b	12090 <__assert_fail@plt+0x11cc>
   120b8:	mov	r9, #0
   120bc:	cmn	lr, #1
   120c0:	beq	1228c <__assert_fail@plt+0x13c8>
   120c4:	cmp	r6, #0
   120c8:	bne	120b0 <__assert_fail@plt+0x11ec>
   120cc:	cmp	lr, #1
   120d0:	beq	122a8 <__assert_fail@plt+0x13e4>
   120d4:	b	120b0 <__assert_fail@plt+0x11ec>
   120d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   120dc:	cmp	r0, #2
   120e0:	bne	122d4 <__assert_fail@plt+0x1410>
   120e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   120e8:	tst	r0, #1
   120ec:	bne	12a1c <__assert_fail@plt+0x1b58>
   120f0:	mov	sl, #0
   120f4:	mov	r0, #92	; 0x5c
   120f8:	b	122e8 <__assert_fail@plt+0x1424>
   120fc:	mov	r0, #102	; 0x66
   12100:	b	122f8 <__assert_fail@plt+0x1434>
   12104:	mov	r2, #116	; 0x74
   12108:	b	12118 <__assert_fail@plt+0x1254>
   1210c:	mov	r0, #98	; 0x62
   12110:	b	122f8 <__assert_fail@plt+0x1434>
   12114:	mov	r2, #114	; 0x72
   12118:	ldr	r0, [sp, #64]	; 0x40
   1211c:	tst	r0, #1
   12120:	mov	r0, r2
   12124:	bne	122f8 <__assert_fail@plt+0x1434>
   12128:	b	12a1c <__assert_fail@plt+0x1b58>
   1212c:	ldr	r0, [sp, #84]	; 0x54
   12130:	tst	r0, #1
   12134:	beq	123e8 <__assert_fail@plt+0x1524>
   12138:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1213c:	tst	r0, #1
   12140:	bne	12a1c <__assert_fail@plt+0x1b58>
   12144:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12148:	cmp	r0, #2
   1214c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12150:	movwne	r0, #1
   12154:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12158:	orr	r0, r0, r2
   1215c:	tst	r0, #1
   12160:	beq	127dc <__assert_fail@plt+0x1918>
   12164:	mov	r0, r8
   12168:	b	12810 <__assert_fail@plt+0x194c>
   1216c:	mov	sl, #0
   12170:	mov	r5, #63	; 0x3f
   12174:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12178:	cmp	r0, #5
   1217c:	beq	1259c <__assert_fail@plt+0x16d8>
   12180:	cmp	r0, #2
   12184:	bne	1263c <__assert_fail@plt+0x1778>
   12188:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1218c:	tst	r0, #1
   12190:	mov	r9, #0
   12194:	beq	12090 <__assert_fail@plt+0x11cc>
   12198:	b	12a1c <__assert_fail@plt+0x1b58>
   1219c:	mov	r0, #118	; 0x76
   121a0:	b	122f8 <__assert_fail@plt+0x1434>
   121a4:	mov	r5, #39	; 0x27
   121a8:	mov	r0, #1
   121ac:	str	r0, [sp, #56]	; 0x38
   121b0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   121b4:	cmp	r0, #2
   121b8:	bne	12408 <__assert_fail@plt+0x1544>
   121bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121c0:	tst	r0, #1
   121c4:	bne	12a1c <__assert_fail@plt+0x1b58>
   121c8:	ldr	r2, [sp, #72]	; 0x48
   121cc:	cmp	r2, #0
   121d0:	mov	r0, r2
   121d4:	movwne	r0, #1
   121d8:	clz	r1, r4
   121dc:	lsr	r1, r1, #5
   121e0:	orrs	r0, r0, r1
   121e4:	moveq	r2, r4
   121e8:	str	r2, [sp, #72]	; 0x48
   121ec:	moveq	r4, r0
   121f0:	cmp	r8, r4
   121f4:	movcc	r0, #39	; 0x27
   121f8:	strbcc	r0, [r7, r8]
   121fc:	add	r0, r8, #1
   12200:	cmp	r0, r4
   12204:	movcc	r1, #92	; 0x5c
   12208:	strbcc	r1, [r7, r0]
   1220c:	add	r0, r8, #2
   12210:	cmp	r0, r4
   12214:	movcc	r1, #39	; 0x27
   12218:	strbcc	r1, [r7, r0]
   1221c:	add	r8, r8, #3
   12220:	mov	r0, #0
   12224:	str	r0, [fp, #-56]	; 0xffffffc8
   12228:	mov	sl, #0
   1222c:	mov	r9, #1
   12230:	b	12090 <__assert_fail@plt+0x11cc>
   12234:	str	r4, [sp, #24]
   12238:	ldr	r0, [sp, #40]	; 0x28
   1223c:	cmp	r0, #1
   12240:	bne	12410 <__assert_fail@plt+0x154c>
   12244:	str	lr, [sp, #28]
   12248:	bl	10de0 <__ctype_b_loc@plt>
   1224c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12250:	ldr	r0, [r0]
   12254:	add	r0, r0, r5, lsl #1
   12258:	ldrb	r0, [r0, #1]
   1225c:	ubfx	r9, r0, #6, #1
   12260:	mov	r1, #1
   12264:	ldr	r4, [sp, #24]
   12268:	ldr	r0, [sp, #52]	; 0x34
   1226c:	orr	r0, r9, r0
   12270:	mov	r2, r1
   12274:	cmp	r1, #1
   12278:	bhi	12644 <__assert_fail@plt+0x1780>
   1227c:	tst	r0, #1
   12280:	beq	12644 <__assert_fail@plt+0x1780>
   12284:	ldr	lr, [sp, #28]
   12288:	b	12090 <__assert_fail@plt+0x11cc>
   1228c:	cmp	r6, #0
   12290:	ldrbeq	r0, [ip, #1]
   12294:	cmpeq	r0, #0
   12298:	beq	122a8 <__assert_fail@plt+0x13e4>
   1229c:	mvn	lr, #0
   122a0:	mov	sl, #0
   122a4:	b	12090 <__assert_fail@plt+0x11cc>
   122a8:	mov	r1, #1
   122ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   122b0:	cmp	r0, #2
   122b4:	bne	122cc <__assert_fail@plt+0x1408>
   122b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122bc:	tst	r0, #1
   122c0:	mov	r9, r1
   122c4:	beq	12090 <__assert_fail@plt+0x11cc>
   122c8:	b	12a1c <__assert_fail@plt+0x1b58>
   122cc:	mov	r9, r1
   122d0:	b	12090 <__assert_fail@plt+0x11cc>
   122d4:	mov	sl, #0
   122d8:	mov	r0, #92	; 0x5c
   122dc:	ldr	r1, [sp, #48]	; 0x30
   122e0:	cmp	r1, #0
   122e4:	beq	122f8 <__assert_fail@plt+0x1434>
   122e8:	mov	r9, #0
   122ec:	cmp	sl, #0
   122f0:	beq	128a8 <__assert_fail@plt+0x19e4>
   122f4:	b	128e4 <__assert_fail@plt+0x1a20>
   122f8:	mov	r9, #0
   122fc:	ldr	r1, [sp, #84]	; 0x54
   12300:	tst	r1, #1
   12304:	mov	sl, #0
   12308:	bne	12348 <__assert_fail@plt+0x1484>
   1230c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12310:	cmp	r0, #0
   12314:	mov	r0, r5
   12318:	beq	1233c <__assert_fail@plt+0x1478>
   1231c:	ubfx	r0, r5, #5, #3
   12320:	ldr	r1, [fp, #16]
   12324:	ldr	r0, [r1, r0, lsl #2]
   12328:	and	r1, r5, #31
   1232c:	mov	r2, #1
   12330:	tst	r0, r2, lsl r1
   12334:	mov	r0, r5
   12338:	bne	12348 <__assert_fail@plt+0x1484>
   1233c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12340:	cmp	r1, #0
   12344:	beq	128a0 <__assert_fail@plt+0x19dc>
   12348:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1234c:	tst	r1, #1
   12350:	bne	12a1c <__assert_fail@plt+0x1b58>
   12354:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12358:	cmp	r1, #2
   1235c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12360:	movwne	r1, #1
   12364:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12368:	orr	r1, r1, r2
   1236c:	tst	r1, #1
   12370:	beq	1237c <__assert_fail@plt+0x14b8>
   12374:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12378:	b	123b8 <__assert_fail@plt+0x14f4>
   1237c:	cmp	r8, r4
   12380:	movcc	r1, #39	; 0x27
   12384:	strbcc	r1, [r7, r8]
   12388:	add	r1, r8, #1
   1238c:	cmp	r1, r4
   12390:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12394:	movcc	r2, #36	; 0x24
   12398:	strbcc	r2, [r7, r1]
   1239c:	add	r1, r8, #2
   123a0:	cmp	r1, r4
   123a4:	movcc	r2, #39	; 0x27
   123a8:	strbcc	r2, [r7, r1]
   123ac:	add	r8, r8, #3
   123b0:	mov	r1, #1
   123b4:	str	r1, [fp, #-56]	; 0xffffffc8
   123b8:	cmp	r8, r4
   123bc:	movcc	r1, #92	; 0x5c
   123c0:	strbcc	r1, [r7, r8]
   123c4:	add	r8, r8, #1
   123c8:	cmp	r8, r4
   123cc:	strbcc	r0, [r7, r8]
   123d0:	and	r5, r5, r9
   123d4:	add	r8, r8, #1
   123d8:	add	r6, r6, #1
   123dc:	cmn	lr, #1
   123e0:	bne	11dbc <__assert_fail@plt+0xef8>
   123e4:	b	11dc8 <__assert_fail@plt+0xf04>
   123e8:	mov	r9, #0
   123ec:	ldr	r0, [sp, #36]	; 0x24
   123f0:	cmp	r0, #0
   123f4:	mov	sl, #0
   123f8:	mov	r5, #0
   123fc:	beq	1230c <__assert_fail@plt+0x1448>
   12400:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12404:	b	123d8 <__assert_fail@plt+0x1514>
   12408:	mov	r9, #1
   1240c:	b	12090 <__assert_fail@plt+0x11cc>
   12410:	mov	r0, #0
   12414:	str	r0, [fp, #-36]	; 0xffffffdc
   12418:	str	r0, [fp, #-40]	; 0xffffffd8
   1241c:	cmn	lr, #1
   12420:	bne	12434 <__assert_fail@plt+0x1570>
   12424:	mov	r0, ip
   12428:	bl	10df8 <strlen@plt>
   1242c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12430:	mov	lr, r0
   12434:	add	r0, ip, r6
   12438:	str	r0, [sp, #20]
   1243c:	mov	r9, #1
   12440:	mov	r7, #0
   12444:	sub	r4, fp, #40	; 0x28
   12448:	str	lr, [sp, #28]
   1244c:	str	r7, [sp, #44]	; 0x2c
   12450:	add	r7, r7, r6
   12454:	add	r1, ip, r7
   12458:	sub	r2, lr, r7
   1245c:	sub	r0, fp, #44	; 0x2c
   12460:	mov	r3, r4
   12464:	bl	13f18 <__assert_fail@plt+0x3054>
   12468:	cmp	r0, #0
   1246c:	beq	1292c <__assert_fail@plt+0x1a68>
   12470:	cmn	r0, #1
   12474:	beq	128ec <__assert_fail@plt+0x1a28>
   12478:	cmn	r0, #2
   1247c:	ldr	lr, [sp, #28]
   12480:	beq	128f4 <__assert_fail@plt+0x1a30>
   12484:	cmp	r0, #2
   12488:	mov	r1, #0
   1248c:	movwcc	r1, #1
   12490:	ldr	r2, [sp, #60]	; 0x3c
   12494:	eor	r2, r2, #1
   12498:	orrs	r1, r2, r1
   1249c:	ldr	r4, [sp, #24]
   124a0:	bne	12560 <__assert_fail@plt+0x169c>
   124a4:	ldr	r1, [sp, #44]	; 0x2c
   124a8:	ldr	r2, [sp, #20]
   124ac:	add	r1, r2, r1
   124b0:	mov	r2, #1
   124b4:	ldrb	r3, [r1, r2]
   124b8:	sub	r3, r3, #91	; 0x5b
   124bc:	cmp	r3, #33	; 0x21
   124c0:	bhi	12554 <__assert_fail@plt+0x1690>
   124c4:	add	r7, pc, #0
   124c8:	ldr	pc, [r7, r3, lsl #2]
   124cc:	andeq	r2, r1, r4, lsl sl
   124d0:	andeq	r2, r1, r4, lsl sl
   124d4:	andeq	r2, r1, r4, asr r5
   124d8:	andeq	r2, r1, r4, lsl sl
   124dc:	andeq	r2, r1, r4, asr r5
   124e0:	andeq	r2, r1, r4, lsl sl
   124e4:	andeq	r2, r1, r4, asr r5
   124e8:	andeq	r2, r1, r4, asr r5
   124ec:	andeq	r2, r1, r4, asr r5
   124f0:	andeq	r2, r1, r4, asr r5
   124f4:	andeq	r2, r1, r4, asr r5
   124f8:	andeq	r2, r1, r4, asr r5
   124fc:	andeq	r2, r1, r4, asr r5
   12500:	andeq	r2, r1, r4, asr r5
   12504:	andeq	r2, r1, r4, asr r5
   12508:	andeq	r2, r1, r4, asr r5
   1250c:	andeq	r2, r1, r4, asr r5
   12510:	andeq	r2, r1, r4, asr r5
   12514:	andeq	r2, r1, r4, asr r5
   12518:	andeq	r2, r1, r4, asr r5
   1251c:	andeq	r2, r1, r4, asr r5
   12520:	andeq	r2, r1, r4, asr r5
   12524:	andeq	r2, r1, r4, asr r5
   12528:	andeq	r2, r1, r4, asr r5
   1252c:	andeq	r2, r1, r4, asr r5
   12530:	andeq	r2, r1, r4, asr r5
   12534:	andeq	r2, r1, r4, asr r5
   12538:	andeq	r2, r1, r4, asr r5
   1253c:	andeq	r2, r1, r4, asr r5
   12540:	andeq	r2, r1, r4, asr r5
   12544:	andeq	r2, r1, r4, asr r5
   12548:	andeq	r2, r1, r4, asr r5
   1254c:	andeq	r2, r1, r4, asr r5
   12550:	andeq	r2, r1, r4, lsl sl
   12554:	add	r2, r2, #1
   12558:	cmp	r2, r0
   1255c:	bcc	124b4 <__assert_fail@plt+0x15f0>
   12560:	ldr	r7, [sp, #44]	; 0x2c
   12564:	add	r7, r0, r7
   12568:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1256c:	bl	10d50 <iswprint@plt>
   12570:	cmp	r0, #0
   12574:	movwne	r0, #1
   12578:	and	r9, r9, r0
   1257c:	sub	r4, fp, #40	; 0x28
   12580:	mov	r0, r4
   12584:	bl	10d20 <mbsinit@plt>
   12588:	ldr	lr, [sp, #28]
   1258c:	cmp	r0, #0
   12590:	ldr	ip, [fp, #-84]	; 0xffffffac
   12594:	beq	1244c <__assert_fail@plt+0x1588>
   12598:	b	12934 <__assert_fail@plt+0x1a70>
   1259c:	ldr	r0, [sp, #32]
   125a0:	cmp	r0, #0
   125a4:	beq	1263c <__assert_fail@plt+0x1778>
   125a8:	add	r0, r6, #2
   125ac:	cmp	r0, lr
   125b0:	bcs	1263c <__assert_fail@plt+0x1778>
   125b4:	add	r1, ip, r6
   125b8:	ldrb	r1, [r1, #1]
   125bc:	cmp	r1, #63	; 0x3f
   125c0:	bne	1263c <__assert_fail@plt+0x1778>
   125c4:	ldrb	r9, [ip, r0]
   125c8:	sub	r2, r9, #33	; 0x21
   125cc:	cmp	r2, #29
   125d0:	bhi	1263c <__assert_fail@plt+0x1778>
   125d4:	mov	r3, #1
   125d8:	movw	r1, #20929	; 0x51c1
   125dc:	movt	r1, #14336	; 0x3800
   125e0:	tst	r1, r3, lsl r2
   125e4:	beq	1263c <__assert_fail@plt+0x1778>
   125e8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   125ec:	tst	r1, #1
   125f0:	bne	12a1c <__assert_fail@plt+0x1b58>
   125f4:	cmp	r8, r4
   125f8:	movcc	r1, #63	; 0x3f
   125fc:	strbcc	r1, [r7, r8]
   12600:	add	r2, r8, #1
   12604:	cmp	r2, r4
   12608:	movcc	r1, #34	; 0x22
   1260c:	strbcc	r1, [r7, r2]
   12610:	add	r2, r8, #2
   12614:	cmp	r2, r4
   12618:	movcc	r1, #34	; 0x22
   1261c:	strbcc	r1, [r7, r2]
   12620:	add	r2, r8, #3
   12624:	cmp	r2, r4
   12628:	movcc	r1, #63	; 0x3f
   1262c:	strbcc	r1, [r7, r2]
   12630:	add	r8, r8, #4
   12634:	mov	r6, r0
   12638:	mov	r5, r9
   1263c:	mov	r9, #0
   12640:	b	12090 <__assert_fail@plt+0x11cc>
   12644:	add	r1, r2, r6
   12648:	str	r1, [sp, #44]	; 0x2c
   1264c:	add	r1, r6, #1
   12650:	mov	r3, #0
   12654:	ldr	lr, [sp, #28]
   12658:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1265c:	tst	r0, #1
   12660:	bne	12754 <__assert_fail@plt+0x1890>
   12664:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12668:	tst	r2, #1
   1266c:	bne	12a1c <__assert_fail@plt+0x1b58>
   12670:	cmp	r6, #2
   12674:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12678:	movwne	r3, #1
   1267c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12680:	orr	r3, r3, r2
   12684:	tst	r3, #1
   12688:	bne	126c4 <__assert_fail@plt+0x1800>
   1268c:	cmp	r8, r4
   12690:	movcc	r2, #39	; 0x27
   12694:	strbcc	r2, [r7, r8]
   12698:	add	r3, r8, #1
   1269c:	cmp	r3, r4
   126a0:	movcc	r2, #36	; 0x24
   126a4:	strbcc	r2, [r7, r3]
   126a8:	add	r3, r8, #2
   126ac:	cmp	r3, r4
   126b0:	movcc	r2, #39	; 0x27
   126b4:	strbcc	r2, [r7, r3]
   126b8:	add	r8, r8, #3
   126bc:	mov	r2, #1
   126c0:	str	r2, [fp, #-56]	; 0xffffffc8
   126c4:	cmp	r8, r4
   126c8:	movcc	r2, #92	; 0x5c
   126cc:	strbcc	r2, [r7, r8]
   126d0:	add	r3, r8, #1
   126d4:	cmp	r3, r4
   126d8:	bcs	126f8 <__assert_fail@plt+0x1834>
   126dc:	and	r7, r5, #192	; 0xc0
   126e0:	mov	r2, #48	; 0x30
   126e4:	orr	r7, r2, r7, lsr #6
   126e8:	ldr	r6, [sp, #80]	; 0x50
   126ec:	strb	r7, [r6, r3]
   126f0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   126f4:	ldr	r7, [sp, #80]	; 0x50
   126f8:	add	r3, r8, #2
   126fc:	cmp	r3, r4
   12700:	bcs	12720 <__assert_fail@plt+0x185c>
   12704:	lsr	r7, r5, #3
   12708:	mov	r2, #6
   1270c:	bfi	r7, r2, #3, #29
   12710:	ldr	r6, [sp, #80]	; 0x50
   12714:	strb	r7, [r6, r3]
   12718:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1271c:	ldr	r7, [sp, #80]	; 0x50
   12720:	mov	r2, #6
   12724:	bfi	r5, r2, #3, #29
   12728:	add	r8, r8, #3
   1272c:	mov	r3, #1
   12730:	b	12778 <__assert_fail@plt+0x18b4>
   12734:	ldr	r7, [sp, #80]	; 0x50
   12738:	cmp	r8, r4
   1273c:	strbcc	r5, [r7, r8]
   12740:	ldrb	r5, [ip, r1]
   12744:	add	r1, r1, #1
   12748:	add	r8, r8, #1
   1274c:	tst	r0, #1
   12750:	beq	12664 <__assert_fail@plt+0x17a0>
   12754:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12758:	tst	r2, #1
   1275c:	beq	12770 <__assert_fail@plt+0x18ac>
   12760:	cmp	r8, r4
   12764:	movcc	r2, #92	; 0x5c
   12768:	strbcc	r2, [r7, r8]
   1276c:	add	r8, r8, #1
   12770:	mov	r2, #0
   12774:	str	r2, [fp, #-52]	; 0xffffffcc
   12778:	and	sl, r3, #1
   1277c:	ldr	r2, [sp, #44]	; 0x2c
   12780:	cmp	r2, r1
   12784:	bls	12890 <__assert_fail@plt+0x19cc>
   12788:	cmp	sl, #0
   1278c:	movwne	sl, #1
   12790:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12794:	mvn	r7, r2
   12798:	orr	r7, r7, sl
   1279c:	tst	r7, #1
   127a0:	bne	12734 <__assert_fail@plt+0x1870>
   127a4:	cmp	r8, r4
   127a8:	ldrcc	r7, [sp, #80]	; 0x50
   127ac:	movcc	r2, #39	; 0x27
   127b0:	strbcc	r2, [r7, r8]
   127b4:	add	r7, r8, #1
   127b8:	cmp	r7, r4
   127bc:	ldrcc	r6, [sp, #80]	; 0x50
   127c0:	movcc	r2, #39	; 0x27
   127c4:	strbcc	r2, [r6, r7]
   127c8:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   127cc:	add	r8, r8, #2
   127d0:	mov	r2, #0
   127d4:	str	r2, [fp, #-56]	; 0xffffffc8
   127d8:	b	12734 <__assert_fail@plt+0x1870>
   127dc:	cmp	r8, r4
   127e0:	movcc	r0, #39	; 0x27
   127e4:	strbcc	r0, [r7, r8]
   127e8:	add	r0, r8, #1
   127ec:	cmp	r0, r4
   127f0:	movcc	r1, #36	; 0x24
   127f4:	strbcc	r1, [r7, r0]
   127f8:	add	r0, r8, #2
   127fc:	cmp	r0, r4
   12800:	movcc	r1, #39	; 0x27
   12804:	strbcc	r1, [r7, r0]
   12808:	add	r0, r8, #3
   1280c:	mov	r2, #1
   12810:	cmp	r0, r4
   12814:	movcc	r1, #92	; 0x5c
   12818:	strbcc	r1, [r7, r0]
   1281c:	str	r2, [fp, #-56]	; 0xffffffc8
   12820:	add	r8, r0, #1
   12824:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12828:	cmp	r1, #2
   1282c:	beq	12880 <__assert_fail@plt+0x19bc>
   12830:	add	r1, r6, #1
   12834:	mov	r9, #0
   12838:	mov	sl, #1
   1283c:	mov	r5, #48	; 0x30
   12840:	cmp	r1, lr
   12844:	bcs	12090 <__assert_fail@plt+0x11cc>
   12848:	ldrb	r1, [ip, r1]
   1284c:	sub	r1, r1, #48	; 0x30
   12850:	uxtb	r1, r1
   12854:	cmp	r1, #9
   12858:	bhi	12090 <__assert_fail@plt+0x11cc>
   1285c:	cmp	r8, r4
   12860:	movcc	r1, #48	; 0x30
   12864:	strbcc	r1, [r7, r8]
   12868:	add	r1, r0, #2
   1286c:	cmp	r1, r4
   12870:	movcc	r2, #48	; 0x30
   12874:	strbcc	r2, [r7, r1]
   12878:	add	r8, r0, #3
   1287c:	b	12090 <__assert_fail@plt+0x11cc>
   12880:	mov	r0, #48	; 0x30
   12884:	mov	sl, #1
   12888:	mov	r9, #0
   1288c:	b	1233c <__assert_fail@plt+0x1478>
   12890:	sub	r6, r1, #1
   12894:	cmp	sl, #0
   12898:	movwne	sl, #1
   1289c:	mov	r0, r5
   128a0:	cmp	sl, #0
   128a4:	bne	128e4 <__assert_fail@plt+0x1a20>
   128a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   128ac:	tst	r1, #1
   128b0:	beq	128e4 <__assert_fail@plt+0x1a20>
   128b4:	cmp	r8, r4
   128b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   128bc:	movcc	r1, #39	; 0x27
   128c0:	strbcc	r1, [r7, r8]
   128c4:	add	r1, r8, #1
   128c8:	cmp	r1, r4
   128cc:	movcc	r2, #39	; 0x27
   128d0:	strbcc	r2, [r7, r1]
   128d4:	add	r8, r8, #2
   128d8:	mov	r1, #0
   128dc:	str	r1, [fp, #-56]	; 0xffffffc8
   128e0:	b	123c8 <__assert_fail@plt+0x1504>
   128e4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   128e8:	b	123c8 <__assert_fail@plt+0x1504>
   128ec:	mov	r9, #0
   128f0:	b	1292c <__assert_fail@plt+0x1a68>
   128f4:	mov	r9, #0
   128f8:	cmp	r7, lr
   128fc:	bcs	1292c <__assert_fail@plt+0x1a68>
   12900:	ldr	ip, [fp, #-84]	; 0xffffffac
   12904:	ldr	r7, [sp, #44]	; 0x2c
   12908:	ldr	r0, [sp, #20]
   1290c:	ldrb	r0, [r0, r7]
   12910:	cmp	r0, #0
   12914:	beq	12934 <__assert_fail@plt+0x1a70>
   12918:	add	r7, r7, #1
   1291c:	add	r0, r6, r7
   12920:	cmp	r0, lr
   12924:	bcc	12908 <__assert_fail@plt+0x1a44>
   12928:	b	12934 <__assert_fail@plt+0x1a70>
   1292c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12930:	ldr	r7, [sp, #44]	; 0x2c
   12934:	mov	r1, r7
   12938:	ldr	r7, [sp, #80]	; 0x50
   1293c:	b	12264 <__assert_fail@plt+0x13a0>
   12940:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12944:	eor	r0, r1, #2
   12948:	orr	r0, r0, r8
   1294c:	clz	r0, r0
   12950:	lsr	r0, r0, #5
   12954:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12958:	tst	r2, r0
   1295c:	bne	12a1c <__assert_fail@plt+0x1b58>
   12960:	cmp	r1, #2
   12964:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12968:	movwne	r0, #1
   1296c:	orr	r0, r2, r0
   12970:	tst	r0, #1
   12974:	ldreq	r0, [sp, #56]	; 0x38
   12978:	eoreq	r0, r0, #1
   1297c:	tsteq	r0, #1
   12980:	bne	129b4 <__assert_fail@plt+0x1af0>
   12984:	mov	r9, lr
   12988:	tst	r5, #1
   1298c:	bne	12a84 <__assert_fail@plt+0x1bc0>
   12990:	ldr	r0, [sp, #72]	; 0x48
   12994:	cmp	r0, #0
   12998:	beq	129b4 <__assert_fail@plt+0x1af0>
   1299c:	mov	r5, #0
   129a0:	cmp	r4, #0
   129a4:	ldr	r0, [sp, #84]	; 0x54
   129a8:	mov	sl, r2
   129ac:	ldr	r6, [sp, #72]	; 0x48
   129b0:	beq	11b4c <__assert_fail@plt+0xc88>
   129b4:	ldr	r1, [sp, #92]	; 0x5c
   129b8:	clz	r0, r1
   129bc:	lsr	r0, r0, #5
   129c0:	orr	r0, r0, r2
   129c4:	tst	r0, #1
   129c8:	bne	129f4 <__assert_fail@plt+0x1b30>
   129cc:	ldrb	r0, [r1]
   129d0:	cmp	r0, #0
   129d4:	beq	129f4 <__assert_fail@plt+0x1b30>
   129d8:	add	r1, r1, #1
   129dc:	cmp	r8, r4
   129e0:	strbcc	r0, [r7, r8]
   129e4:	add	r8, r8, #1
   129e8:	ldrb	r0, [r1], #1
   129ec:	cmp	r0, #0
   129f0:	bne	129dc <__assert_fail@plt+0x1b18>
   129f4:	cmp	r8, r4
   129f8:	movcc	r0, #0
   129fc:	strbcc	r0, [r7, r8]
   12a00:	b	12a78 <__assert_fail@plt+0x1bb4>
   12a04:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a08:	mov	lr, r4
   12a0c:	mov	r4, r5
   12a10:	b	12a1c <__assert_fail@plt+0x1b58>
   12a14:	ldr	r7, [sp, #80]	; 0x50
   12a18:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a1c:	mov	r0, #0
   12a20:	ldr	r1, [fp, #12]
   12a24:	bic	r1, r1, #2
   12a28:	ldr	r2, [sp, #84]	; 0x54
   12a2c:	tst	r2, #1
   12a30:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12a34:	mov	r2, r3
   12a38:	movwne	r2, #4
   12a3c:	cmp	r3, #2
   12a40:	movne	r2, r3
   12a44:	str	r2, [sp]
   12a48:	str	r1, [sp, #4]
   12a4c:	str	r0, [sp, #8]
   12a50:	ldr	r0, [sp, #68]	; 0x44
   12a54:	str	r0, [sp, #12]
   12a58:	ldr	r0, [sp, #76]	; 0x4c
   12a5c:	str	r0, [sp, #16]
   12a60:	mov	r0, r7
   12a64:	mov	r1, r4
   12a68:	mov	r2, ip
   12a6c:	mov	r3, lr
   12a70:	bl	11ac4 <__assert_fail@plt+0xc00>
   12a74:	mov	r8, r0
   12a78:	mov	r0, r8
   12a7c:	sub	sp, fp, #28
   12a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a84:	mov	r0, #5
   12a88:	str	r0, [sp]
   12a8c:	ldr	r0, [fp, #12]
   12a90:	str	r0, [sp, #4]
   12a94:	ldr	r0, [fp, #16]
   12a98:	str	r0, [sp, #8]
   12a9c:	ldr	r0, [sp, #68]	; 0x44
   12aa0:	str	r0, [sp, #12]
   12aa4:	ldr	r0, [sp, #76]	; 0x4c
   12aa8:	str	r0, [sp, #16]
   12aac:	mov	r0, r7
   12ab0:	ldr	r1, [sp, #72]	; 0x48
   12ab4:	ldr	r2, [fp, #-84]	; 0xffffffac
   12ab8:	mov	r3, r9
   12abc:	b	12a70 <__assert_fail@plt+0x1bac>
   12ac0:	bl	10eb8 <abort@plt>
   12ac4:	mov	r3, r2
   12ac8:	mov	r2, #0
   12acc:	b	12ad0 <__assert_fail@plt+0x1c0c>
   12ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad4:	add	fp, sp, #28
   12ad8:	sub	sp, sp, #36	; 0x24
   12adc:	mov	r4, r2
   12ae0:	str	r2, [sp, #24]
   12ae4:	mov	r5, r1
   12ae8:	mov	r6, r0
   12aec:	str	r0, [sp, #20]
   12af0:	movw	r8, #20816	; 0x5150
   12af4:	movt	r8, #2
   12af8:	cmp	r3, #0
   12afc:	movne	r8, r3
   12b00:	bl	10e10 <__errno_location@plt>
   12b04:	str	r0, [sp, #28]
   12b08:	ldm	r8, {r3, r9}
   12b0c:	ldr	r1, [r8, #40]	; 0x28
   12b10:	ldr	r2, [r8, #44]	; 0x2c
   12b14:	ldr	r7, [r0]
   12b18:	str	r7, [sp, #32]
   12b1c:	add	sl, r8, #8
   12b20:	cmp	r4, #0
   12b24:	orreq	r9, r9, #1
   12b28:	stm	sp, {r3, r9, sl}
   12b2c:	str	r1, [sp, #12]
   12b30:	str	r2, [sp, #16]
   12b34:	mov	r0, #0
   12b38:	mov	r1, #0
   12b3c:	mov	r2, r6
   12b40:	mov	r3, r5
   12b44:	mov	r7, r5
   12b48:	bl	11ac4 <__assert_fail@plt+0xc00>
   12b4c:	mov	r5, r0
   12b50:	add	r4, r0, #1
   12b54:	mov	r0, r4
   12b58:	bl	139a8 <__assert_fail@plt+0x2ae4>
   12b5c:	mov	r6, r0
   12b60:	ldr	r0, [r8]
   12b64:	ldr	r1, [r8, #40]	; 0x28
   12b68:	ldr	r2, [r8, #44]	; 0x2c
   12b6c:	stm	sp, {r0, r9, sl}
   12b70:	str	r1, [sp, #12]
   12b74:	str	r2, [sp, #16]
   12b78:	mov	r0, r6
   12b7c:	mov	r1, r4
   12b80:	ldr	r2, [sp, #20]
   12b84:	mov	r3, r7
   12b88:	bl	11ac4 <__assert_fail@plt+0xc00>
   12b8c:	ldr	r0, [sp, #24]
   12b90:	ldr	r1, [sp, #32]
   12b94:	ldr	r2, [sp, #28]
   12b98:	str	r1, [r2]
   12b9c:	cmp	r0, #0
   12ba0:	strne	r5, [r0]
   12ba4:	mov	r0, r6
   12ba8:	sub	sp, fp, #28
   12bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bb4:	add	fp, sp, #24
   12bb8:	movw	r8, #20696	; 0x50d8
   12bbc:	movt	r8, #2
   12bc0:	ldr	r4, [r8]
   12bc4:	movw	r5, #20700	; 0x50dc
   12bc8:	movt	r5, #2
   12bcc:	ldr	r0, [r5]
   12bd0:	cmp	r0, #2
   12bd4:	blt	12c00 <__assert_fail@plt+0x1d3c>
   12bd8:	add	r7, r4, #12
   12bdc:	mov	r6, #0
   12be0:	ldr	r0, [r7, r6, lsl #3]
   12be4:	bl	13e1c <__assert_fail@plt+0x2f58>
   12be8:	add	r0, r6, #1
   12bec:	ldr	r1, [r5]
   12bf0:	add	r2, r6, #2
   12bf4:	cmp	r2, r1
   12bf8:	mov	r6, r0
   12bfc:	blt	12be0 <__assert_fail@plt+0x1d1c>
   12c00:	ldr	r0, [r4, #4]
   12c04:	movw	r7, #20864	; 0x5180
   12c08:	movt	r7, #2
   12c0c:	cmp	r0, r7
   12c10:	beq	12c28 <__assert_fail@plt+0x1d64>
   12c14:	bl	13e1c <__assert_fail@plt+0x2f58>
   12c18:	movw	r0, #20704	; 0x50e0
   12c1c:	movt	r0, #2
   12c20:	mov	r6, #256	; 0x100
   12c24:	strd	r6, [r0]
   12c28:	movw	r6, #20704	; 0x50e0
   12c2c:	movt	r6, #2
   12c30:	cmp	r4, r6
   12c34:	beq	12c44 <__assert_fail@plt+0x1d80>
   12c38:	mov	r0, r4
   12c3c:	bl	13e1c <__assert_fail@plt+0x2f58>
   12c40:	str	r6, [r8]
   12c44:	mov	r0, #1
   12c48:	str	r0, [r5]
   12c4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c50:	movw	r3, #20816	; 0x5150
   12c54:	movt	r3, #2
   12c58:	mvn	r2, #0
   12c5c:	b	12c60 <__assert_fail@plt+0x1d9c>
   12c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c64:	add	fp, sp, #28
   12c68:	sub	sp, sp, #44	; 0x2c
   12c6c:	mov	r7, r3
   12c70:	str	r2, [sp, #36]	; 0x24
   12c74:	str	r1, [sp, #32]
   12c78:	mov	r5, r0
   12c7c:	bl	10e10 <__errno_location@plt>
   12c80:	cmp	r5, #0
   12c84:	blt	12df0 <__assert_fail@plt+0x1f2c>
   12c88:	cmn	r5, #-2147483647	; 0x80000001
   12c8c:	beq	12df0 <__assert_fail@plt+0x1f2c>
   12c90:	movw	r4, #20696	; 0x50d8
   12c94:	movt	r4, #2
   12c98:	ldr	r6, [r4]
   12c9c:	str	r0, [sp, #28]
   12ca0:	ldr	r0, [r0]
   12ca4:	str	r0, [sp, #24]
   12ca8:	movw	r8, #20700	; 0x50dc
   12cac:	movt	r8, #2
   12cb0:	ldr	r1, [r8]
   12cb4:	cmp	r1, r5
   12cb8:	ble	12cc4 <__assert_fail@plt+0x1e00>
   12cbc:	mov	sl, r6
   12cc0:	b	12d2c <__assert_fail@plt+0x1e68>
   12cc4:	str	r1, [fp, #-32]	; 0xffffffe0
   12cc8:	mov	r0, #8
   12ccc:	str	r0, [sp]
   12cd0:	movw	r9, #20704	; 0x50e0
   12cd4:	movt	r9, #2
   12cd8:	subs	r0, r6, r9
   12cdc:	movne	r0, r6
   12ce0:	add	r2, r5, #1
   12ce4:	sub	r2, r2, r1
   12ce8:	sub	r1, fp, #32
   12cec:	mvn	r3, #-2147483648	; 0x80000000
   12cf0:	bl	13a90 <__assert_fail@plt+0x2bcc>
   12cf4:	mov	sl, r0
   12cf8:	str	r0, [r4]
   12cfc:	cmp	r6, r9
   12d00:	ldrdeq	r0, [r9]
   12d04:	stmeq	sl, {r0, r1}
   12d08:	ldr	r1, [r8]
   12d0c:	add	r0, sl, r1, lsl #3
   12d10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d14:	sub	r1, r2, r1
   12d18:	lsl	r2, r1, #3
   12d1c:	mov	r1, #0
   12d20:	bl	10e28 <memset@plt>
   12d24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d28:	str	r0, [r8]
   12d2c:	mov	r9, sl
   12d30:	ldr	r6, [r9, r5, lsl #3]!
   12d34:	ldr	r4, [r9, #4]!
   12d38:	ldm	r7, {r0, r1}
   12d3c:	ldr	r2, [r7, #40]	; 0x28
   12d40:	ldr	r3, [r7, #44]	; 0x2c
   12d44:	orr	r8, r1, #1
   12d48:	add	r1, r7, #8
   12d4c:	stm	sp, {r0, r8}
   12d50:	str	r1, [sp, #20]
   12d54:	add	r0, sp, #8
   12d58:	stm	r0, {r1, r2, r3}
   12d5c:	mov	r0, r4
   12d60:	mov	r1, r6
   12d64:	ldr	r2, [sp, #32]
   12d68:	ldr	r3, [sp, #36]	; 0x24
   12d6c:	bl	11ac4 <__assert_fail@plt+0xc00>
   12d70:	cmp	r6, r0
   12d74:	bhi	12dd8 <__assert_fail@plt+0x1f14>
   12d78:	add	r6, r0, #1
   12d7c:	str	r6, [sl, r5, lsl #3]
   12d80:	movw	r0, #20864	; 0x5180
   12d84:	movt	r0, #2
   12d88:	cmp	r4, r0
   12d8c:	beq	12d98 <__assert_fail@plt+0x1ed4>
   12d90:	mov	r0, r4
   12d94:	bl	13e1c <__assert_fail@plt+0x2f58>
   12d98:	mov	r0, r6
   12d9c:	bl	139a8 <__assert_fail@plt+0x2ae4>
   12da0:	mov	r4, r0
   12da4:	str	r0, [r9]
   12da8:	ldr	r0, [r7]
   12dac:	ldr	r1, [r7, #40]	; 0x28
   12db0:	ldr	r2, [r7, #44]	; 0x2c
   12db4:	stm	sp, {r0, r8}
   12db8:	ldr	r0, [sp, #20]
   12dbc:	add	r3, sp, #8
   12dc0:	stm	r3, {r0, r1, r2}
   12dc4:	mov	r0, r4
   12dc8:	mov	r1, r6
   12dcc:	ldr	r2, [sp, #32]
   12dd0:	ldr	r3, [sp, #36]	; 0x24
   12dd4:	bl	11ac4 <__assert_fail@plt+0xc00>
   12dd8:	ldr	r0, [sp, #28]
   12ddc:	ldr	r1, [sp, #24]
   12de0:	str	r1, [r0]
   12de4:	mov	r0, r4
   12de8:	sub	sp, fp, #28
   12dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12df0:	bl	10eb8 <abort@plt>
   12df4:	movw	r3, #20816	; 0x5150
   12df8:	movt	r3, #2
   12dfc:	b	12c60 <__assert_fail@plt+0x1d9c>
   12e00:	mov	r1, r0
   12e04:	mov	r0, #0
   12e08:	b	12c50 <__assert_fail@plt+0x1d8c>
   12e0c:	mov	r2, r1
   12e10:	mov	r1, r0
   12e14:	mov	r0, #0
   12e18:	b	12df4 <__assert_fail@plt+0x1f30>
   12e1c:	push	{r4, r5, r6, sl, fp, lr}
   12e20:	add	fp, sp, #16
   12e24:	sub	sp, sp, #48	; 0x30
   12e28:	mov	r4, r2
   12e2c:	mov	r5, r0
   12e30:	mov	r6, sp
   12e34:	mov	r0, r6
   12e38:	bl	12e58 <__assert_fail@plt+0x1f94>
   12e3c:	mov	r0, r5
   12e40:	mov	r1, r4
   12e44:	mvn	r2, #0
   12e48:	mov	r3, r6
   12e4c:	bl	12c60 <__assert_fail@plt+0x1d9c>
   12e50:	sub	sp, fp, #16
   12e54:	pop	{r4, r5, r6, sl, fp, pc}
   12e58:	vmov.i32	q8, #0	; 0x00000000
   12e5c:	mov	r2, #32
   12e60:	mov	r3, r0
   12e64:	vst1.32	{d16-d17}, [r3], r2
   12e68:	vst1.32	{d16-d17}, [r3]
   12e6c:	add	r2, r0, #16
   12e70:	vst1.32	{d16-d17}, [r2]
   12e74:	cmp	r1, #10
   12e78:	strne	r1, [r0]
   12e7c:	bxne	lr
   12e80:	push	{fp, lr}
   12e84:	mov	fp, sp
   12e88:	bl	10eb8 <abort@plt>
   12e8c:	push	{r4, r5, r6, r7, fp, lr}
   12e90:	add	fp, sp, #16
   12e94:	sub	sp, sp, #48	; 0x30
   12e98:	mov	r4, r3
   12e9c:	mov	r5, r2
   12ea0:	mov	r6, r0
   12ea4:	mov	r7, sp
   12ea8:	mov	r0, r7
   12eac:	bl	12e58 <__assert_fail@plt+0x1f94>
   12eb0:	mov	r0, r6
   12eb4:	mov	r1, r5
   12eb8:	mov	r2, r4
   12ebc:	mov	r3, r7
   12ec0:	bl	12c60 <__assert_fail@plt+0x1d9c>
   12ec4:	sub	sp, fp, #16
   12ec8:	pop	{r4, r5, r6, r7, fp, pc}
   12ecc:	mov	r2, r1
   12ed0:	mov	r1, r0
   12ed4:	mov	r0, #0
   12ed8:	b	12e1c <__assert_fail@plt+0x1f58>
   12edc:	mov	r3, r2
   12ee0:	mov	r2, r1
   12ee4:	mov	r1, r0
   12ee8:	mov	r0, #0
   12eec:	b	12e8c <__assert_fail@plt+0x1fc8>
   12ef0:	push	{r4, r5, r6, sl, fp, lr}
   12ef4:	add	fp, sp, #16
   12ef8:	sub	sp, sp, #48	; 0x30
   12efc:	mov	r4, r1
   12f00:	mov	r5, r0
   12f04:	mov	r0, #32
   12f08:	movw	r1, #20816	; 0x5150
   12f0c:	movt	r1, #2
   12f10:	add	r3, r1, #16
   12f14:	vld1.64	{d16-d17}, [r1], r0
   12f18:	mov	r6, sp
   12f1c:	vld1.64	{d18-d19}, [r3]
   12f20:	add	r3, r6, #16
   12f24:	vld1.64	{d20-d21}, [r1]
   12f28:	vst1.64	{d18-d19}, [r3]
   12f2c:	mov	r1, r6
   12f30:	vst1.64	{d16-d17}, [r1], r0
   12f34:	vst1.64	{d20-d21}, [r1]
   12f38:	mov	r0, r6
   12f3c:	mov	r1, r2
   12f40:	mov	r2, #1
   12f44:	bl	119b8 <__assert_fail@plt+0xaf4>
   12f48:	mov	r0, #0
   12f4c:	mov	r1, r5
   12f50:	mov	r2, r4
   12f54:	mov	r3, r6
   12f58:	bl	12c60 <__assert_fail@plt+0x1d9c>
   12f5c:	sub	sp, fp, #16
   12f60:	pop	{r4, r5, r6, sl, fp, pc}
   12f64:	mov	r2, r1
   12f68:	mvn	r1, #0
   12f6c:	b	12ef0 <__assert_fail@plt+0x202c>
   12f70:	mov	r1, #58	; 0x3a
   12f74:	b	12f64 <__assert_fail@plt+0x20a0>
   12f78:	mov	r2, #58	; 0x3a
   12f7c:	b	12ef0 <__assert_fail@plt+0x202c>
   12f80:	push	{r4, r5, r6, sl, fp, lr}
   12f84:	add	fp, sp, #16
   12f88:	sub	sp, sp, #48	; 0x30
   12f8c:	mov	r4, r2
   12f90:	mov	r5, r0
   12f94:	mov	r6, sp
   12f98:	mov	r0, r6
   12f9c:	bl	12e58 <__assert_fail@plt+0x1f94>
   12fa0:	mov	r0, r6
   12fa4:	mov	r1, #58	; 0x3a
   12fa8:	mov	r2, #1
   12fac:	bl	119b8 <__assert_fail@plt+0xaf4>
   12fb0:	mov	r0, r5
   12fb4:	mov	r1, r4
   12fb8:	mvn	r2, #0
   12fbc:	mov	r3, r6
   12fc0:	bl	12c60 <__assert_fail@plt+0x1d9c>
   12fc4:	sub	sp, fp, #16
   12fc8:	pop	{r4, r5, r6, sl, fp, pc}
   12fcc:	push	{fp, lr}
   12fd0:	mov	fp, sp
   12fd4:	sub	sp, sp, #8
   12fd8:	mvn	ip, #0
   12fdc:	str	ip, [sp]
   12fe0:	bl	12fec <__assert_fail@plt+0x2128>
   12fe4:	mov	sp, fp
   12fe8:	pop	{fp, pc}
   12fec:	push	{r4, r5, r6, r7, fp, lr}
   12ff0:	add	fp, sp, #16
   12ff4:	sub	sp, sp, #48	; 0x30
   12ff8:	mov	r7, r3
   12ffc:	mov	r5, r0
   13000:	mov	r0, #32
   13004:	movw	r3, #20816	; 0x5150
   13008:	movt	r3, #2
   1300c:	add	r4, r3, #16
   13010:	vld1.64	{d16-d17}, [r3], r0
   13014:	mov	r6, sp
   13018:	vld1.64	{d18-d19}, [r4]
   1301c:	add	r4, r6, #16
   13020:	vld1.64	{d20-d21}, [r3]
   13024:	vst1.64	{d18-d19}, [r4]
   13028:	mov	r3, r6
   1302c:	vst1.64	{d16-d17}, [r3], r0
   13030:	vst1.64	{d20-d21}, [r3]
   13034:	mov	r0, r6
   13038:	bl	11a10 <__assert_fail@plt+0xb4c>
   1303c:	ldr	r2, [fp, #8]
   13040:	mov	r0, r5
   13044:	mov	r1, r7
   13048:	mov	r3, r6
   1304c:	bl	12c60 <__assert_fail@plt+0x1d9c>
   13050:	sub	sp, fp, #16
   13054:	pop	{r4, r5, r6, r7, fp, pc}
   13058:	mov	r3, r2
   1305c:	mov	r2, r1
   13060:	mov	r1, r0
   13064:	mov	r0, #0
   13068:	b	12fcc <__assert_fail@plt+0x2108>
   1306c:	push	{fp, lr}
   13070:	mov	fp, sp
   13074:	sub	sp, sp, #8
   13078:	mov	ip, r2
   1307c:	mov	r2, r1
   13080:	mov	r1, r0
   13084:	str	r3, [sp]
   13088:	mov	r0, #0
   1308c:	mov	r3, ip
   13090:	bl	12fec <__assert_fail@plt+0x2128>
   13094:	mov	sp, fp
   13098:	pop	{fp, pc}
   1309c:	movw	r3, #20712	; 0x50e8
   130a0:	movt	r3, #2
   130a4:	b	12c60 <__assert_fail@plt+0x1d9c>
   130a8:	mov	r2, r1
   130ac:	mov	r1, r0
   130b0:	mov	r0, #0
   130b4:	b	1309c <__assert_fail@plt+0x21d8>
   130b8:	mvn	r2, #0
   130bc:	b	1309c <__assert_fail@plt+0x21d8>
   130c0:	mov	r1, r0
   130c4:	mov	r0, #0
   130c8:	b	130b8 <__assert_fail@plt+0x21f4>
   130cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130d0:	add	fp, sp, #24
   130d4:	sub	sp, sp, #16
   130d8:	mov	r4, r1
   130dc:	mov	r5, r0
   130e0:	mov	r7, #0
   130e4:	mov	r0, #0
   130e8:	mov	r1, r5
   130ec:	mov	r2, #5
   130f0:	bl	10d38 <dcgettext@plt>
   130f4:	cmp	r0, r5
   130f8:	beq	13104 <__assert_fail@plt+0x2240>
   130fc:	sub	sp, fp, #24
   13100:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13104:	bl	14468 <__assert_fail@plt+0x35a4>
   13108:	mov	r6, r0
   1310c:	mov	r8, #56	; 0x38
   13110:	mov	r0, #45	; 0x2d
   13114:	stm	sp, {r0, r8}
   13118:	str	r7, [sp, #8]
   1311c:	str	r7, [sp, #12]
   13120:	mov	r0, r6
   13124:	mov	r1, #85	; 0x55
   13128:	mov	r2, #84	; 0x54
   1312c:	mov	r3, #70	; 0x46
   13130:	bl	131c8 <__assert_fail@plt+0x2304>
   13134:	cmp	r0, #0
   13138:	beq	13154 <__assert_fail@plt+0x2290>
   1313c:	ldrb	r1, [r5]
   13140:	movw	r2, #19016	; 0x4a48
   13144:	movt	r2, #1
   13148:	movw	r0, #19020	; 0x4a4c
   1314c:	movt	r0, #1
   13150:	b	13198 <__assert_fail@plt+0x22d4>
   13154:	mov	r0, #48	; 0x30
   13158:	mov	r1, #51	; 0x33
   1315c:	str	r8, [sp]
   13160:	stmib	sp, {r0, r1}
   13164:	str	r0, [sp, #12]
   13168:	mov	r0, r6
   1316c:	mov	r1, #71	; 0x47
   13170:	mov	r2, #66	; 0x42
   13174:	mov	r3, #49	; 0x31
   13178:	bl	131c8 <__assert_fail@plt+0x2304>
   1317c:	cmp	r0, #0
   13180:	beq	131a8 <__assert_fail@plt+0x22e4>
   13184:	ldrb	r1, [r5]
   13188:	movw	r2, #19024	; 0x4a50
   1318c:	movt	r2, #1
   13190:	movw	r0, #19028	; 0x4a54
   13194:	movt	r0, #1
   13198:	cmp	r1, #96	; 0x60
   1319c:	moveq	r0, r2
   131a0:	sub	sp, fp, #24
   131a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131a8:	movw	r1, #19010	; 0x4a42
   131ac:	movt	r1, #1
   131b0:	movw	r0, #19014	; 0x4a46
   131b4:	movt	r0, #1
   131b8:	cmp	r4, #9
   131bc:	moveq	r0, r1
   131c0:	sub	sp, fp, #24
   131c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131c8:	push	{r4, r5, r6, r7, fp, lr}
   131cc:	add	fp, sp, #16
   131d0:	sub	sp, sp, #16
   131d4:	mov	r4, r3
   131d8:	mov	r5, r2
   131dc:	mov	r7, r1
   131e0:	mov	r6, r0
   131e4:	mov	r0, r1
   131e8:	bl	142bc <__assert_fail@plt+0x33f8>
   131ec:	ldrb	r1, [r6]
   131f0:	cmp	r0, #0
   131f4:	andne	r1, r1, #223	; 0xdf
   131f8:	mov	r0, #0
   131fc:	cmp	r1, r7
   13200:	bne	13240 <__assert_fail@plt+0x237c>
   13204:	cmp	r7, #0
   13208:	moveq	r0, #1
   1320c:	subeq	sp, fp, #16
   13210:	popeq	{r4, r5, r6, r7, fp, pc}
   13214:	ldr	r0, [fp, #20]
   13218:	ldr	r1, [fp, #16]
   1321c:	ldr	r2, [fp, #12]
   13220:	ldr	r3, [fp, #8]
   13224:	str	r2, [sp]
   13228:	str	r1, [sp, #4]
   1322c:	str	r0, [sp, #8]
   13230:	mov	r0, r6
   13234:	mov	r1, r5
   13238:	mov	r2, r4
   1323c:	bl	13248 <__assert_fail@plt+0x2384>
   13240:	sub	sp, fp, #16
   13244:	pop	{r4, r5, r6, r7, fp, pc}
   13248:	push	{r4, r5, r6, r7, fp, lr}
   1324c:	add	fp, sp, #16
   13250:	sub	sp, sp, #8
   13254:	mov	r4, r3
   13258:	mov	r5, r2
   1325c:	mov	r7, r1
   13260:	mov	r6, r0
   13264:	mov	r0, r1
   13268:	bl	142bc <__assert_fail@plt+0x33f8>
   1326c:	ldrb	r1, [r6, #1]
   13270:	cmp	r0, #0
   13274:	andne	r1, r1, #223	; 0xdf
   13278:	mov	r0, #0
   1327c:	cmp	r1, r7
   13280:	bne	132b8 <__assert_fail@plt+0x23f4>
   13284:	cmp	r7, #0
   13288:	moveq	r0, #1
   1328c:	subeq	sp, fp, #16
   13290:	popeq	{r4, r5, r6, r7, fp, pc}
   13294:	ldr	r0, [fp, #16]
   13298:	ldr	r1, [fp, #12]
   1329c:	ldr	r3, [fp, #8]
   132a0:	str	r1, [sp]
   132a4:	str	r0, [sp, #4]
   132a8:	mov	r0, r6
   132ac:	mov	r1, r5
   132b0:	mov	r2, r4
   132b4:	bl	132c0 <__assert_fail@plt+0x23fc>
   132b8:	sub	sp, fp, #16
   132bc:	pop	{r4, r5, r6, r7, fp, pc}
   132c0:	push	{r4, r5, r6, r7, fp, lr}
   132c4:	add	fp, sp, #16
   132c8:	sub	sp, sp, #8
   132cc:	mov	r4, r3
   132d0:	mov	r5, r2
   132d4:	mov	r7, r1
   132d8:	mov	r6, r0
   132dc:	mov	r0, r1
   132e0:	bl	142bc <__assert_fail@plt+0x33f8>
   132e4:	ldrb	r1, [r6, #2]
   132e8:	cmp	r0, #0
   132ec:	andne	r1, r1, #223	; 0xdf
   132f0:	mov	r0, #0
   132f4:	cmp	r1, r7
   132f8:	bne	13328 <__assert_fail@plt+0x2464>
   132fc:	cmp	r7, #0
   13300:	moveq	r0, #1
   13304:	subeq	sp, fp, #16
   13308:	popeq	{r4, r5, r6, r7, fp, pc}
   1330c:	ldr	r0, [fp, #12]
   13310:	ldr	r3, [fp, #8]
   13314:	str	r0, [sp]
   13318:	mov	r0, r6
   1331c:	mov	r1, r5
   13320:	mov	r2, r4
   13324:	bl	13330 <__assert_fail@plt+0x246c>
   13328:	sub	sp, fp, #16
   1332c:	pop	{r4, r5, r6, r7, fp, pc}
   13330:	push	{r4, r5, r6, r7, fp, lr}
   13334:	add	fp, sp, #16
   13338:	mov	r4, r3
   1333c:	mov	r5, r2
   13340:	mov	r7, r1
   13344:	mov	r6, r0
   13348:	mov	r0, r1
   1334c:	bl	142bc <__assert_fail@plt+0x33f8>
   13350:	ldrb	r1, [r6, #3]
   13354:	ldr	r3, [fp, #8]
   13358:	cmp	r0, #0
   1335c:	andne	r1, r1, #223	; 0xdf
   13360:	mov	r0, #0
   13364:	cmp	r1, r7
   13368:	popne	{r4, r5, r6, r7, fp, pc}
   1336c:	cmp	r7, #0
   13370:	beq	13388 <__assert_fail@plt+0x24c4>
   13374:	mov	r0, r6
   13378:	mov	r1, r5
   1337c:	mov	r2, r4
   13380:	pop	{r4, r5, r6, r7, fp, lr}
   13384:	b	13390 <__assert_fail@plt+0x24cc>
   13388:	mov	r0, #1
   1338c:	pop	{r4, r5, r6, r7, fp, pc}
   13390:	push	{r4, r5, r6, r7, fp, lr}
   13394:	add	fp, sp, #16
   13398:	mov	r4, r3
   1339c:	mov	r5, r2
   133a0:	mov	r7, r1
   133a4:	mov	r6, r0
   133a8:	mov	r0, r1
   133ac:	bl	142bc <__assert_fail@plt+0x33f8>
   133b0:	ldrb	r1, [r6, #4]
   133b4:	cmp	r0, #0
   133b8:	andne	r1, r1, #223	; 0xdf
   133bc:	mov	r0, #0
   133c0:	cmp	r1, r7
   133c4:	popne	{r4, r5, r6, r7, fp, pc}
   133c8:	cmp	r7, #0
   133cc:	beq	133e4 <__assert_fail@plt+0x2520>
   133d0:	mov	r0, r6
   133d4:	mov	r1, r5
   133d8:	mov	r2, r4
   133dc:	pop	{r4, r5, r6, r7, fp, lr}
   133e0:	b	133ec <__assert_fail@plt+0x2528>
   133e4:	mov	r0, #1
   133e8:	pop	{r4, r5, r6, r7, fp, pc}
   133ec:	push	{r4, r5, r6, sl, fp, lr}
   133f0:	add	fp, sp, #16
   133f4:	mov	r4, r2
   133f8:	mov	r6, r1
   133fc:	mov	r5, r0
   13400:	mov	r0, r1
   13404:	bl	142bc <__assert_fail@plt+0x33f8>
   13408:	ldrb	r1, [r5, #5]
   1340c:	cmp	r0, #0
   13410:	andne	r1, r1, #223	; 0xdf
   13414:	mov	r0, #0
   13418:	cmp	r1, r6
   1341c:	popne	{r4, r5, r6, sl, fp, pc}
   13420:	cmp	r6, #0
   13424:	beq	13438 <__assert_fail@plt+0x2574>
   13428:	mov	r0, r5
   1342c:	mov	r1, r4
   13430:	pop	{r4, r5, r6, sl, fp, lr}
   13434:	b	13440 <__assert_fail@plt+0x257c>
   13438:	mov	r0, #1
   1343c:	pop	{r4, r5, r6, sl, fp, pc}
   13440:	push	{r4, r5, fp, lr}
   13444:	add	fp, sp, #8
   13448:	mov	r5, r1
   1344c:	mov	r4, r0
   13450:	mov	r0, r1
   13454:	bl	142bc <__assert_fail@plt+0x33f8>
   13458:	ldrb	r1, [r4, #6]
   1345c:	cmp	r0, #0
   13460:	andne	r1, r1, #223	; 0xdf
   13464:	mov	r0, #0
   13468:	cmp	r1, r5
   1346c:	popne	{r4, r5, fp, pc}
   13470:	cmp	r5, #0
   13474:	beq	13484 <__assert_fail@plt+0x25c0>
   13478:	mov	r0, r4
   1347c:	pop	{r4, r5, fp, lr}
   13480:	b	1348c <__assert_fail@plt+0x25c8>
   13484:	mov	r0, #1
   13488:	pop	{r4, r5, fp, pc}
   1348c:	push	{r4, sl, fp, lr}
   13490:	add	fp, sp, #8
   13494:	mov	r4, r0
   13498:	mov	r0, #0
   1349c:	bl	142bc <__assert_fail@plt+0x33f8>
   134a0:	ldrb	r1, [r4, #7]
   134a4:	cmp	r0, #0
   134a8:	beq	134c0 <__assert_fail@plt+0x25fc>
   134ac:	tst	r1, #223	; 0xdf
   134b0:	moveq	r0, #1
   134b4:	popeq	{r4, sl, fp, pc}
   134b8:	mov	r0, #0
   134bc:	pop	{r4, sl, fp, pc}
   134c0:	cmp	r1, #0
   134c4:	moveq	r0, #1
   134c8:	popeq	{r4, sl, fp, pc}
   134cc:	mov	r0, #0
   134d0:	pop	{r4, sl, fp, pc}
   134d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134d8:	add	fp, sp, #24
   134dc:	sub	sp, sp, #32
   134e0:	mov	r4, r2
   134e4:	mov	r5, r0
   134e8:	ldr	r7, [fp, #12]
   134ec:	ldr	r6, [fp, #8]
   134f0:	cmp	r1, #0
   134f4:	beq	13514 <__assert_fail@plt+0x2650>
   134f8:	mov	r2, r1
   134fc:	str	r3, [sp]
   13500:	movw	r1, #19116	; 0x4aac
   13504:	movt	r1, #1
   13508:	mov	r0, r5
   1350c:	mov	r3, r4
   13510:	b	13524 <__assert_fail@plt+0x2660>
   13514:	movw	r1, #19128	; 0x4ab8
   13518:	movt	r1, #1
   1351c:	mov	r0, r5
   13520:	mov	r2, r4
   13524:	bl	10e04 <fprintf@plt>
   13528:	movw	r1, #19135	; 0x4abf
   1352c:	movt	r1, #1
   13530:	mov	r0, #0
   13534:	mov	r2, #5
   13538:	bl	10d38 <dcgettext@plt>
   1353c:	mov	r2, r0
   13540:	movw	r1, #19831	; 0x4d77
   13544:	movt	r1, #1
   13548:	mov	r0, r5
   1354c:	movw	r3, #2022	; 0x7e6
   13550:	bl	10e04 <fprintf@plt>
   13554:	mov	r0, #10
   13558:	mov	r1, r5
   1355c:	bl	10e7c <fputc@plt>
   13560:	movw	r1, #19139	; 0x4ac3
   13564:	movt	r1, #1
   13568:	mov	r0, #0
   1356c:	mov	r2, #5
   13570:	bl	10d38 <dcgettext@plt>
   13574:	mov	r1, r0
   13578:	movw	r2, #19310	; 0x4b6e
   1357c:	movt	r2, #1
   13580:	mov	r0, r5
   13584:	bl	10e04 <fprintf@plt>
   13588:	mov	r0, #10
   1358c:	mov	r1, r5
   13590:	bl	10e7c <fputc@plt>
   13594:	cmp	r7, #9
   13598:	bhi	135d4 <__assert_fail@plt+0x2710>
   1359c:	add	r0, pc, #0
   135a0:	ldr	pc, [r0, r7, lsl #2]
   135a4:	andeq	r3, r1, ip, asr #11
   135a8:	andeq	r3, r1, r0, ror #11
   135ac:	andeq	r3, r1, ip, lsl #12
   135b0:	andeq	r3, r1, r8, lsr r6
   135b4:	andeq	r3, r1, r0, ror #12
   135b8:	andeq	r3, r1, ip, lsl #13
   135bc:	andeq	r3, r1, r0, asr #13
   135c0:	andeq	r3, r1, r0, lsl #14
   135c4:	muleq	r1, ip, r7
   135c8:	andeq	r3, r1, r4, asr #14
   135cc:	sub	sp, fp, #24
   135d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135d4:	movw	r1, #19663	; 0x4ccf
   135d8:	movt	r1, #1
   135dc:	b	1374c <__assert_fail@plt+0x2888>
   135e0:	movw	r1, #19344	; 0x4b90
   135e4:	movt	r1, #1
   135e8:	mov	r0, #0
   135ec:	mov	r2, #5
   135f0:	bl	10d38 <dcgettext@plt>
   135f4:	mov	r1, r0
   135f8:	ldr	r2, [r6]
   135fc:	mov	r0, r5
   13600:	sub	sp, fp, #24
   13604:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13608:	b	10e04 <fprintf@plt>
   1360c:	movw	r1, #19360	; 0x4ba0
   13610:	movt	r1, #1
   13614:	mov	r0, #0
   13618:	mov	r2, #5
   1361c:	bl	10d38 <dcgettext@plt>
   13620:	mov	r1, r0
   13624:	ldm	r6, {r2, r3}
   13628:	mov	r0, r5
   1362c:	sub	sp, fp, #24
   13630:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13634:	b	10e04 <fprintf@plt>
   13638:	movw	r1, #19383	; 0x4bb7
   1363c:	movt	r1, #1
   13640:	mov	r0, #0
   13644:	mov	r2, #5
   13648:	bl	10d38 <dcgettext@plt>
   1364c:	mov	r1, r0
   13650:	ldm	r6, {r2, r3}
   13654:	ldr	r0, [r6, #8]
   13658:	str	r0, [sp]
   1365c:	b	136f8 <__assert_fail@plt+0x2834>
   13660:	movw	r1, #19411	; 0x4bd3
   13664:	movt	r1, #1
   13668:	mov	r0, #0
   1366c:	mov	r2, #5
   13670:	bl	10d38 <dcgettext@plt>
   13674:	mov	r1, r0
   13678:	ldm	r6, {r2, r3}
   1367c:	ldr	r0, [r6, #8]
   13680:	ldr	r7, [r6, #12]
   13684:	stm	sp, {r0, r7}
   13688:	b	136f8 <__assert_fail@plt+0x2834>
   1368c:	movw	r1, #19443	; 0x4bf3
   13690:	movt	r1, #1
   13694:	mov	r0, #0
   13698:	mov	r2, #5
   1369c:	bl	10d38 <dcgettext@plt>
   136a0:	mov	r1, r0
   136a4:	ldm	r6, {r2, r3}
   136a8:	ldr	r0, [r6, #8]
   136ac:	ldr	r7, [r6, #12]
   136b0:	ldr	r6, [r6, #16]
   136b4:	stm	sp, {r0, r7}
   136b8:	str	r6, [sp, #8]
   136bc:	b	136f8 <__assert_fail@plt+0x2834>
   136c0:	movw	r1, #19479	; 0x4c17
   136c4:	movt	r1, #1
   136c8:	mov	r0, #0
   136cc:	mov	r2, #5
   136d0:	bl	10d38 <dcgettext@plt>
   136d4:	mov	r1, r0
   136d8:	ldm	r6, {r2, r3}
   136dc:	ldr	r0, [r6, #8]
   136e0:	ldr	r7, [r6, #12]
   136e4:	ldr	r4, [r6, #16]
   136e8:	ldr	r6, [r6, #20]
   136ec:	stm	sp, {r0, r7}
   136f0:	str	r4, [sp, #8]
   136f4:	str	r6, [sp, #12]
   136f8:	mov	r0, r5
   136fc:	b	137ec <__assert_fail@plt+0x2928>
   13700:	movw	r1, #19519	; 0x4c3f
   13704:	movt	r1, #1
   13708:	mov	r0, #0
   1370c:	mov	r2, #5
   13710:	bl	10d38 <dcgettext@plt>
   13714:	mov	ip, r0
   13718:	ldm	r6, {r2, r3}
   1371c:	ldr	r0, [r6, #8]
   13720:	ldr	r7, [r6, #12]
   13724:	ldr	r4, [r6, #16]
   13728:	ldr	r1, [r6, #20]
   1372c:	ldr	r6, [r6, #24]
   13730:	stm	sp, {r0, r7}
   13734:	str	r4, [sp, #8]
   13738:	str	r1, [sp, #12]
   1373c:	str	r6, [sp, #16]
   13740:	b	137e4 <__assert_fail@plt+0x2920>
   13744:	movw	r1, #19611	; 0x4c9b
   13748:	movt	r1, #1
   1374c:	mov	r0, #0
   13750:	mov	r2, #5
   13754:	bl	10d38 <dcgettext@plt>
   13758:	mov	ip, r0
   1375c:	ldr	r2, [r6]
   13760:	ldr	r3, [r6, #4]
   13764:	ldr	r0, [r6, #8]
   13768:	ldr	r7, [r6, #12]
   1376c:	ldr	r4, [r6, #16]
   13770:	ldr	r1, [r6, #20]
   13774:	ldr	lr, [r6, #24]
   13778:	ldr	r8, [r6, #28]
   1377c:	ldr	r6, [r6, #32]
   13780:	stm	sp, {r0, r7}
   13784:	str	r4, [sp, #8]
   13788:	str	r1, [sp, #12]
   1378c:	str	lr, [sp, #16]
   13790:	str	r8, [sp, #20]
   13794:	str	r6, [sp, #24]
   13798:	b	137e4 <__assert_fail@plt+0x2920>
   1379c:	movw	r1, #19563	; 0x4c6b
   137a0:	movt	r1, #1
   137a4:	mov	r0, #0
   137a8:	mov	r2, #5
   137ac:	bl	10d38 <dcgettext@plt>
   137b0:	mov	ip, r0
   137b4:	ldm	r6, {r2, r3}
   137b8:	ldr	r0, [r6, #8]
   137bc:	ldr	r7, [r6, #12]
   137c0:	ldr	r4, [r6, #16]
   137c4:	ldr	r1, [r6, #20]
   137c8:	ldr	lr, [r6, #24]
   137cc:	ldr	r6, [r6, #28]
   137d0:	stm	sp, {r0, r7}
   137d4:	str	r4, [sp, #8]
   137d8:	str	r1, [sp, #12]
   137dc:	str	lr, [sp, #16]
   137e0:	str	r6, [sp, #20]
   137e4:	mov	r0, r5
   137e8:	mov	r1, ip
   137ec:	bl	10e04 <fprintf@plt>
   137f0:	sub	sp, fp, #24
   137f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137f8:	push	{r4, sl, fp, lr}
   137fc:	add	fp, sp, #8
   13800:	sub	sp, sp, #8
   13804:	mov	lr, #0
   13808:	ldr	ip, [fp, #8]
   1380c:	ldr	r4, [ip, lr, lsl #2]
   13810:	add	lr, lr, #1
   13814:	cmp	r4, #0
   13818:	bne	1380c <__assert_fail@plt+0x2948>
   1381c:	sub	r4, lr, #1
   13820:	str	ip, [sp]
   13824:	str	r4, [sp, #4]
   13828:	bl	134d4 <__assert_fail@plt+0x2610>
   1382c:	sub	sp, fp, #8
   13830:	pop	{r4, sl, fp, pc}
   13834:	push	{r4, r5, fp, lr}
   13838:	add	fp, sp, #8
   1383c:	sub	sp, sp, #48	; 0x30
   13840:	mov	ip, #0
   13844:	ldr	r4, [fp, #8]
   13848:	add	lr, sp, #8
   1384c:	ldr	r5, [r4]
   13850:	str	r5, [lr, ip, lsl #2]
   13854:	cmp	r5, #0
   13858:	beq	1386c <__assert_fail@plt+0x29a8>
   1385c:	add	ip, ip, #1
   13860:	add	r4, r4, #4
   13864:	cmp	ip, #10
   13868:	bcc	1384c <__assert_fail@plt+0x2988>
   1386c:	str	lr, [sp]
   13870:	str	ip, [sp, #4]
   13874:	bl	134d4 <__assert_fail@plt+0x2610>
   13878:	sub	sp, fp, #8
   1387c:	pop	{r4, r5, fp, pc}
   13880:	push	{fp, lr}
   13884:	mov	fp, sp
   13888:	sub	sp, sp, #8
   1388c:	add	ip, fp, #8
   13890:	str	ip, [sp, #4]
   13894:	str	ip, [sp]
   13898:	bl	13834 <__assert_fail@plt+0x2970>
   1389c:	mov	sp, fp
   138a0:	pop	{fp, pc}
   138a4:	push	{fp, lr}
   138a8:	mov	fp, sp
   138ac:	movw	r0, #20788	; 0x5134
   138b0:	movt	r0, #2
   138b4:	ldr	r1, [r0]
   138b8:	mov	r0, #10
   138bc:	bl	10e7c <fputc@plt>
   138c0:	movw	r1, #19723	; 0x4d0b
   138c4:	movt	r1, #1
   138c8:	mov	r0, #0
   138cc:	mov	r2, #5
   138d0:	bl	10d38 <dcgettext@plt>
   138d4:	movw	r1, #18837	; 0x4995
   138d8:	movt	r1, #1
   138dc:	bl	10cd8 <printf@plt>
   138e0:	movw	r1, #19743	; 0x4d1f
   138e4:	movt	r1, #1
   138e8:	mov	r0, #0
   138ec:	mov	r2, #5
   138f0:	bl	10d38 <dcgettext@plt>
   138f4:	movw	r1, #18488	; 0x4838
   138f8:	movt	r1, #1
   138fc:	movw	r2, #18751	; 0x493f
   13900:	movt	r2, #1
   13904:	bl	10cd8 <printf@plt>
   13908:	movw	r1, #19763	; 0x4d33
   1390c:	movt	r1, #1
   13910:	mov	r0, #0
   13914:	mov	r2, #5
   13918:	bl	10d38 <dcgettext@plt>
   1391c:	movw	r1, #19802	; 0x4d5a
   13920:	movt	r1, #1
   13924:	pop	{fp, lr}
   13928:	b	10cd8 <printf@plt>
   1392c:	b	13930 <__assert_fail@plt+0x2a6c>
   13930:	push	{r4, r5, r6, sl, fp, lr}
   13934:	add	fp, sp, #16
   13938:	mov	r4, r2
   1393c:	mov	r5, r1
   13940:	mov	r6, r0
   13944:	bl	13fcc <__assert_fail@plt+0x3108>
   13948:	cmp	r0, #0
   1394c:	popne	{r4, r5, r6, sl, fp, pc}
   13950:	cmp	r6, #0
   13954:	beq	13968 <__assert_fail@plt+0x2aa4>
   13958:	cmp	r5, #0
   1395c:	cmpne	r4, #0
   13960:	bne	13968 <__assert_fail@plt+0x2aa4>
   13964:	pop	{r4, r5, r6, sl, fp, pc}
   13968:	bl	13d1c <__assert_fail@plt+0x2e58>
   1396c:	push	{fp, lr}
   13970:	mov	fp, sp
   13974:	bl	13ee8 <__assert_fail@plt+0x3024>
   13978:	bl	13980 <__assert_fail@plt+0x2abc>
   1397c:	pop	{fp, pc}
   13980:	cmp	r0, #0
   13984:	bxne	lr
   13988:	push	{fp, lr}
   1398c:	mov	fp, sp
   13990:	bl	13d1c <__assert_fail@plt+0x2e58>
   13994:	push	{fp, lr}
   13998:	mov	fp, sp
   1399c:	bl	14434 <__assert_fail@plt+0x3570>
   139a0:	bl	13980 <__assert_fail@plt+0x2abc>
   139a4:	pop	{fp, pc}
   139a8:	b	1396c <__assert_fail@plt+0x2aa8>
   139ac:	push	{r4, r5, fp, lr}
   139b0:	add	fp, sp, #8
   139b4:	mov	r4, r1
   139b8:	mov	r5, r0
   139bc:	bl	13f78 <__assert_fail@plt+0x30b4>
   139c0:	cmp	r0, #0
   139c4:	popne	{r4, r5, fp, pc}
   139c8:	cmp	r5, #0
   139cc:	beq	139dc <__assert_fail@plt+0x2b18>
   139d0:	cmp	r4, #0
   139d4:	bne	139dc <__assert_fail@plt+0x2b18>
   139d8:	pop	{r4, r5, fp, pc}
   139dc:	bl	13d1c <__assert_fail@plt+0x2e58>
   139e0:	push	{fp, lr}
   139e4:	mov	fp, sp
   139e8:	bl	14438 <__assert_fail@plt+0x3574>
   139ec:	bl	13980 <__assert_fail@plt+0x2abc>
   139f0:	pop	{fp, pc}
   139f4:	push	{fp, lr}
   139f8:	mov	fp, sp
   139fc:	bl	14448 <__assert_fail@plt+0x3584>
   13a00:	bl	13980 <__assert_fail@plt+0x2abc>
   13a04:	pop	{fp, pc}
   13a08:	push	{fp, lr}
   13a0c:	mov	fp, sp
   13a10:	mov	r2, r1
   13a14:	mov	r1, r0
   13a18:	mov	r0, #0
   13a1c:	bl	13930 <__assert_fail@plt+0x2a6c>
   13a20:	pop	{fp, pc}
   13a24:	mov	r2, r1
   13a28:	mov	r1, r0
   13a2c:	mov	r0, #0
   13a30:	b	139f4 <__assert_fail@plt+0x2b30>
   13a34:	mov	r2, #1
   13a38:	b	13a3c <__assert_fail@plt+0x2b78>
   13a3c:	push	{r4, r5, fp, lr}
   13a40:	add	fp, sp, #8
   13a44:	mov	r4, r1
   13a48:	ldr	r5, [r1]
   13a4c:	cmp	r0, #0
   13a50:	beq	13a68 <__assert_fail@plt+0x2ba4>
   13a54:	mov	r1, #1
   13a58:	add	r1, r1, r5, lsr #1
   13a5c:	adds	r5, r5, r1
   13a60:	bcc	13a80 <__assert_fail@plt+0x2bbc>
   13a64:	bl	13d1c <__assert_fail@plt+0x2e58>
   13a68:	cmp	r5, #0
   13a6c:	bne	13a80 <__assert_fail@plt+0x2bbc>
   13a70:	mov	r1, #64	; 0x40
   13a74:	udiv	r5, r1, r2
   13a78:	cmp	r2, #64	; 0x40
   13a7c:	addhi	r5, r5, #1
   13a80:	mov	r1, r5
   13a84:	bl	13930 <__assert_fail@plt+0x2a6c>
   13a88:	str	r5, [r4]
   13a8c:	pop	{r4, r5, fp, pc}
   13a90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a94:	add	fp, sp, #24
   13a98:	mov	r8, r1
   13a9c:	ldr	r6, [r1]
   13aa0:	add	r1, r6, r6, asr #1
   13aa4:	cmp	r1, r6
   13aa8:	mvnvs	r1, #-2147483648	; 0x80000000
   13aac:	cmp	r1, r3
   13ab0:	mov	r5, r1
   13ab4:	movgt	r5, r3
   13ab8:	cmn	r3, #1
   13abc:	movle	r5, r1
   13ac0:	ldr	r4, [fp, #8]
   13ac4:	cmn	r4, #1
   13ac8:	ble	13af0 <__assert_fail@plt+0x2c2c>
   13acc:	cmp	r4, #0
   13ad0:	beq	13b44 <__assert_fail@plt+0x2c80>
   13ad4:	cmn	r5, #1
   13ad8:	ble	13b18 <__assert_fail@plt+0x2c54>
   13adc:	mvn	r7, #-2147483648	; 0x80000000
   13ae0:	udiv	r1, r7, r4
   13ae4:	cmp	r1, r5
   13ae8:	bge	13b44 <__assert_fail@plt+0x2c80>
   13aec:	b	13b54 <__assert_fail@plt+0x2c90>
   13af0:	cmn	r5, #1
   13af4:	ble	13b34 <__assert_fail@plt+0x2c70>
   13af8:	cmn	r4, #1
   13afc:	beq	13b44 <__assert_fail@plt+0x2c80>
   13b00:	mov	r1, #-2147483648	; 0x80000000
   13b04:	sdiv	r1, r1, r4
   13b08:	mvn	r7, #-2147483648	; 0x80000000
   13b0c:	cmp	r1, r5
   13b10:	bge	13b44 <__assert_fail@plt+0x2c80>
   13b14:	b	13b54 <__assert_fail@plt+0x2c90>
   13b18:	beq	13b44 <__assert_fail@plt+0x2c80>
   13b1c:	mov	r1, #-2147483648	; 0x80000000
   13b20:	sdiv	r1, r1, r5
   13b24:	mvn	r7, #-2147483648	; 0x80000000
   13b28:	cmp	r1, r4
   13b2c:	bge	13b44 <__assert_fail@plt+0x2c80>
   13b30:	b	13b54 <__assert_fail@plt+0x2c90>
   13b34:	mvn	r7, #-2147483648	; 0x80000000
   13b38:	sdiv	r1, r7, r4
   13b3c:	cmp	r5, r1
   13b40:	blt	13b54 <__assert_fail@plt+0x2c90>
   13b44:	mul	r1, r5, r4
   13b48:	mov	r7, #64	; 0x40
   13b4c:	cmp	r1, #63	; 0x3f
   13b50:	bgt	13b5c <__assert_fail@plt+0x2c98>
   13b54:	sdiv	r5, r7, r4
   13b58:	mul	r1, r5, r4
   13b5c:	cmp	r0, #0
   13b60:	moveq	r7, #0
   13b64:	streq	r7, [r8]
   13b68:	sub	r7, r5, r6
   13b6c:	cmp	r7, r2
   13b70:	bge	13c1c <__assert_fail@plt+0x2d58>
   13b74:	add	r5, r6, r2
   13b78:	mov	r1, #0
   13b7c:	cmp	r5, r3
   13b80:	mov	r2, #0
   13b84:	movwgt	r2, #1
   13b88:	cmn	r3, #1
   13b8c:	movwgt	r1, #1
   13b90:	cmp	r5, r6
   13b94:	bvs	13c04 <__assert_fail@plt+0x2d40>
   13b98:	ands	r1, r1, r2
   13b9c:	bne	13c04 <__assert_fail@plt+0x2d40>
   13ba0:	cmn	r4, #1
   13ba4:	ble	13bcc <__assert_fail@plt+0x2d08>
   13ba8:	cmp	r4, #0
   13bac:	beq	13c18 <__assert_fail@plt+0x2d54>
   13bb0:	cmn	r5, #1
   13bb4:	ble	13bf0 <__assert_fail@plt+0x2d2c>
   13bb8:	mvn	r1, #-2147483648	; 0x80000000
   13bbc:	udiv	r1, r1, r4
   13bc0:	cmp	r1, r5
   13bc4:	bge	13c18 <__assert_fail@plt+0x2d54>
   13bc8:	b	13c04 <__assert_fail@plt+0x2d40>
   13bcc:	cmn	r5, #1
   13bd0:	ble	13c08 <__assert_fail@plt+0x2d44>
   13bd4:	cmn	r4, #1
   13bd8:	beq	13c18 <__assert_fail@plt+0x2d54>
   13bdc:	mov	r1, #-2147483648	; 0x80000000
   13be0:	sdiv	r1, r1, r4
   13be4:	cmp	r1, r5
   13be8:	bge	13c18 <__assert_fail@plt+0x2d54>
   13bec:	b	13c04 <__assert_fail@plt+0x2d40>
   13bf0:	beq	13c18 <__assert_fail@plt+0x2d54>
   13bf4:	mov	r1, #-2147483648	; 0x80000000
   13bf8:	sdiv	r1, r1, r5
   13bfc:	cmp	r1, r4
   13c00:	bge	13c18 <__assert_fail@plt+0x2d54>
   13c04:	bl	13d1c <__assert_fail@plt+0x2e58>
   13c08:	mvn	r1, #-2147483648	; 0x80000000
   13c0c:	sdiv	r1, r1, r4
   13c10:	cmp	r5, r1
   13c14:	blt	13c04 <__assert_fail@plt+0x2d40>
   13c18:	mul	r1, r5, r4
   13c1c:	bl	139ac <__assert_fail@plt+0x2ae8>
   13c20:	str	r5, [r8]
   13c24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c28:	mov	r1, #1
   13c2c:	b	13c30 <__assert_fail@plt+0x2d6c>
   13c30:	push	{fp, lr}
   13c34:	mov	fp, sp
   13c38:	bl	13d60 <__assert_fail@plt+0x2e9c>
   13c3c:	bl	13980 <__assert_fail@plt+0x2abc>
   13c40:	pop	{fp, pc}
   13c44:	mov	r1, #1
   13c48:	b	13c4c <__assert_fail@plt+0x2d88>
   13c4c:	push	{fp, lr}
   13c50:	mov	fp, sp
   13c54:	bl	14444 <__assert_fail@plt+0x3580>
   13c58:	bl	13980 <__assert_fail@plt+0x2abc>
   13c5c:	pop	{fp, pc}
   13c60:	push	{r4, r5, r6, sl, fp, lr}
   13c64:	add	fp, sp, #16
   13c68:	mov	r4, r1
   13c6c:	mov	r5, r0
   13c70:	mov	r0, r1
   13c74:	bl	1396c <__assert_fail@plt+0x2aa8>
   13c78:	mov	r6, r0
   13c7c:	mov	r1, r5
   13c80:	mov	r2, r4
   13c84:	bl	10d14 <memcpy@plt>
   13c88:	mov	r0, r6
   13c8c:	pop	{r4, r5, r6, sl, fp, pc}
   13c90:	push	{r4, r5, r6, sl, fp, lr}
   13c94:	add	fp, sp, #16
   13c98:	mov	r4, r1
   13c9c:	mov	r5, r0
   13ca0:	mov	r0, r1
   13ca4:	bl	13994 <__assert_fail@plt+0x2ad0>
   13ca8:	mov	r6, r0
   13cac:	mov	r1, r5
   13cb0:	mov	r2, r4
   13cb4:	bl	10d14 <memcpy@plt>
   13cb8:	mov	r0, r6
   13cbc:	pop	{r4, r5, r6, sl, fp, pc}
   13cc0:	push	{r4, r5, r6, sl, fp, lr}
   13cc4:	add	fp, sp, #16
   13cc8:	mov	r4, r1
   13ccc:	mov	r5, r0
   13cd0:	add	r0, r1, #1
   13cd4:	bl	13994 <__assert_fail@plt+0x2ad0>
   13cd8:	mov	r6, r0
   13cdc:	mov	r0, #0
   13ce0:	strb	r0, [r6, r4]
   13ce4:	mov	r0, r6
   13ce8:	mov	r1, r5
   13cec:	mov	r2, r4
   13cf0:	bl	10d14 <memcpy@plt>
   13cf4:	mov	r0, r6
   13cf8:	pop	{r4, r5, r6, sl, fp, pc}
   13cfc:	push	{r4, sl, fp, lr}
   13d00:	add	fp, sp, #8
   13d04:	mov	r4, r0
   13d08:	bl	10df8 <strlen@plt>
   13d0c:	add	r1, r0, #1
   13d10:	mov	r0, r4
   13d14:	pop	{r4, sl, fp, lr}
   13d18:	b	13c60 <__assert_fail@plt+0x2d9c>
   13d1c:	push	{fp, lr}
   13d20:	mov	fp, sp
   13d24:	movw	r0, #20692	; 0x50d4
   13d28:	movt	r0, #2
   13d2c:	ldr	r4, [r0]
   13d30:	movw	r1, #19878	; 0x4da6
   13d34:	movt	r1, #1
   13d38:	mov	r0, #0
   13d3c:	mov	r2, #5
   13d40:	bl	10d38 <dcgettext@plt>
   13d44:	mov	r3, r0
   13d48:	movw	r2, #18863	; 0x49af
   13d4c:	movt	r2, #1
   13d50:	mov	r0, r4
   13d54:	mov	r1, #0
   13d58:	bl	10d98 <error@plt>
   13d5c:	bl	10eb8 <abort@plt>
   13d60:	clz	r2, r1
   13d64:	lsr	r2, r2, #5
   13d68:	clz	r3, r0
   13d6c:	lsr	r3, r3, #5
   13d70:	orrs	r2, r3, r2
   13d74:	movwne	r1, #1
   13d78:	movwne	r0, #1
   13d7c:	cmp	r1, #0
   13d80:	beq	13db0 <__assert_fail@plt+0x2eec>
   13d84:	mvn	r2, #-2147483648	; 0x80000000
   13d88:	udiv	r2, r2, r1
   13d8c:	cmp	r2, r0
   13d90:	bcs	13db0 <__assert_fail@plt+0x2eec>
   13d94:	push	{fp, lr}
   13d98:	mov	fp, sp
   13d9c:	bl	10e10 <__errno_location@plt>
   13da0:	mov	r1, #12
   13da4:	str	r1, [r0]
   13da8:	mov	r0, #0
   13dac:	pop	{fp, pc}
   13db0:	b	10cb4 <calloc@plt>
   13db4:	push	{r4, sl, fp, lr}
   13db8:	add	fp, sp, #8
   13dbc:	mov	r4, r0
   13dc0:	cmp	r0, #0
   13dc4:	beq	13ddc <__assert_fail@plt+0x2f18>
   13dc8:	mov	r0, r4
   13dcc:	bl	10dbc <__freading@plt>
   13dd0:	cmp	r0, #0
   13dd4:	movne	r0, r4
   13dd8:	blne	13de8 <__assert_fail@plt+0x2f24>
   13ddc:	mov	r0, r4
   13de0:	pop	{r4, sl, fp, lr}
   13de4:	b	10ce4 <fflush@plt>
   13de8:	ldrb	r1, [r0, #1]
   13dec:	tst	r1, #1
   13df0:	bxeq	lr
   13df4:	push	{fp, lr}
   13df8:	mov	fp, sp
   13dfc:	sub	sp, sp, #8
   13e00:	mov	r1, #1
   13e04:	str	r1, [sp]
   13e08:	mov	r2, #0
   13e0c:	mov	r3, #0
   13e10:	bl	13e44 <__assert_fail@plt+0x2f80>
   13e14:	mov	sp, fp
   13e18:	pop	{fp, pc}
   13e1c:	push	{r4, r5, r6, sl, fp, lr}
   13e20:	add	fp, sp, #16
   13e24:	mov	r4, r0
   13e28:	bl	10e10 <__errno_location@plt>
   13e2c:	mov	r5, r0
   13e30:	ldr	r6, [r0]
   13e34:	mov	r0, r4
   13e38:	bl	10cf0 <free@plt>
   13e3c:	str	r6, [r5]
   13e40:	pop	{r4, r5, r6, sl, fp, pc}
   13e44:	push	{r4, r5, r6, r7, fp, lr}
   13e48:	add	fp, sp, #16
   13e4c:	sub	sp, sp, #8
   13e50:	mov	r5, r3
   13e54:	mov	r6, r2
   13e58:	mov	r4, r0
   13e5c:	ldr	r0, [r0, #4]
   13e60:	ldr	r1, [r4, #8]
   13e64:	cmp	r1, r0
   13e68:	bne	13e84 <__assert_fail@plt+0x2fc0>
   13e6c:	ldrd	r0, [r4, #16]
   13e70:	cmp	r1, r0
   13e74:	bne	13e84 <__assert_fail@plt+0x2fc0>
   13e78:	ldr	r0, [r4, #36]	; 0x24
   13e7c:	cmp	r0, #0
   13e80:	beq	13e9c <__assert_fail@plt+0x2fd8>
   13e84:	mov	r0, r4
   13e88:	mov	r2, r6
   13e8c:	mov	r3, r5
   13e90:	sub	sp, fp, #16
   13e94:	pop	{r4, r5, r6, r7, fp, lr}
   13e98:	b	10e4c <fseeko64@plt>
   13e9c:	ldr	r7, [fp, #8]
   13ea0:	mov	r0, r4
   13ea4:	bl	10e34 <fileno@plt>
   13ea8:	str	r7, [sp]
   13eac:	mov	r2, r6
   13eb0:	mov	r3, r5
   13eb4:	bl	10d68 <lseek64@plt>
   13eb8:	and	r2, r0, r1
   13ebc:	cmn	r2, #1
   13ec0:	mvneq	r0, #0
   13ec4:	subeq	sp, fp, #16
   13ec8:	popeq	{r4, r5, r6, r7, fp, pc}
   13ecc:	strd	r0, [r4, #80]	; 0x50
   13ed0:	ldr	r0, [r4]
   13ed4:	bic	r0, r0, #16
   13ed8:	str	r0, [r4]
   13edc:	mov	r0, #0
   13ee0:	sub	sp, fp, #16
   13ee4:	pop	{r4, r5, r6, r7, fp, pc}
   13ee8:	cmp	r0, #0
   13eec:	movweq	r0, #1
   13ef0:	cmn	r0, #1
   13ef4:	ble	13efc <__assert_fail@plt+0x3038>
   13ef8:	b	10da4 <malloc@plt>
   13efc:	push	{fp, lr}
   13f00:	mov	fp, sp
   13f04:	bl	10e10 <__errno_location@plt>
   13f08:	mov	r1, #12
   13f0c:	str	r1, [r0]
   13f10:	mov	r0, #0
   13f14:	pop	{fp, pc}
   13f18:	push	{r4, r5, r6, r7, fp, lr}
   13f1c:	add	fp, sp, #16
   13f20:	sub	sp, sp, #8
   13f24:	mov	r7, r2
   13f28:	mov	r4, r1
   13f2c:	add	r5, sp, #4
   13f30:	cmp	r0, #0
   13f34:	movne	r5, r0
   13f38:	mov	r0, r5
   13f3c:	bl	10d8c <mbrtowc@plt>
   13f40:	mov	r6, r0
   13f44:	cmp	r7, #0
   13f48:	beq	13f6c <__assert_fail@plt+0x30a8>
   13f4c:	cmn	r6, #2
   13f50:	bcc	13f6c <__assert_fail@plt+0x30a8>
   13f54:	mov	r0, #0
   13f58:	bl	143b4 <__assert_fail@plt+0x34f0>
   13f5c:	cmp	r0, #0
   13f60:	ldrbeq	r0, [r4]
   13f64:	streq	r0, [r5]
   13f68:	moveq	r6, #1
   13f6c:	mov	r0, r6
   13f70:	sub	sp, fp, #16
   13f74:	pop	{r4, r5, r6, r7, fp, pc}
   13f78:	push	{fp, lr}
   13f7c:	mov	fp, sp
   13f80:	cmp	r0, #0
   13f84:	beq	13fa0 <__assert_fail@plt+0x30dc>
   13f88:	cmp	r1, #0
   13f8c:	beq	13fac <__assert_fail@plt+0x30e8>
   13f90:	cmn	r1, #1
   13f94:	ble	13fb8 <__assert_fail@plt+0x30f4>
   13f98:	pop	{fp, lr}
   13f9c:	b	10d44 <realloc@plt>
   13fa0:	mov	r0, r1
   13fa4:	pop	{fp, lr}
   13fa8:	b	13ee8 <__assert_fail@plt+0x3024>
   13fac:	bl	13e1c <__assert_fail@plt+0x2f58>
   13fb0:	mov	r0, #0
   13fb4:	pop	{fp, pc}
   13fb8:	bl	10e10 <__errno_location@plt>
   13fbc:	mov	r1, #12
   13fc0:	str	r1, [r0]
   13fc4:	mov	r0, #0
   13fc8:	pop	{fp, pc}
   13fcc:	cmp	r2, #0
   13fd0:	beq	14000 <__assert_fail@plt+0x313c>
   13fd4:	mvn	r3, #0
   13fd8:	udiv	r3, r3, r2
   13fdc:	cmp	r3, r1
   13fe0:	bcs	14000 <__assert_fail@plt+0x313c>
   13fe4:	push	{fp, lr}
   13fe8:	mov	fp, sp
   13fec:	bl	10e10 <__errno_location@plt>
   13ff0:	mov	r1, #12
   13ff4:	str	r1, [r0]
   13ff8:	mov	r0, #0
   13ffc:	pop	{fp, pc}
   14000:	mul	r1, r2, r1
   14004:	b	13f78 <__assert_fail@plt+0x30b4>
   14008:	mov	r1, r0
   1400c:	sub	r2, r0, #65	; 0x41
   14010:	mov	r0, #1
   14014:	cmp	r2, #26
   14018:	subcs	r2, r1, #97	; 0x61
   1401c:	cmpcs	r2, #26
   14020:	bcs	14028 <__assert_fail@plt+0x3164>
   14024:	bx	lr
   14028:	sub	r1, r1, #48	; 0x30
   1402c:	cmp	r1, #10
   14030:	movcs	r0, #0
   14034:	bx	lr
   14038:	mov	r1, r0
   1403c:	sub	r2, r0, #65	; 0x41
   14040:	mov	r0, #1
   14044:	cmp	r2, #26
   14048:	subcs	r1, r1, #97	; 0x61
   1404c:	cmpcs	r1, #26
   14050:	movcs	r0, #0
   14054:	bx	lr
   14058:	mov	r1, #0
   1405c:	cmp	r0, #128	; 0x80
   14060:	movwcc	r1, #1
   14064:	mov	r0, r1
   14068:	bx	lr
   1406c:	sub	r1, r0, #9
   14070:	clz	r1, r1
   14074:	lsr	r1, r1, #5
   14078:	sub	r0, r0, #32
   1407c:	clz	r0, r0
   14080:	lsr	r0, r0, #5
   14084:	orr	r0, r0, r1
   14088:	bx	lr
   1408c:	mov	r1, r0
   14090:	mov	r0, #1
   14094:	cmp	r1, #32
   14098:	bxcc	lr
   1409c:	cmp	r1, #127	; 0x7f
   140a0:	movne	r0, #0
   140a4:	bx	lr
   140a8:	sub	r1, r0, #48	; 0x30
   140ac:	mov	r0, #0
   140b0:	cmp	r1, #10
   140b4:	movwcc	r0, #1
   140b8:	bx	lr
   140bc:	sub	r1, r0, #33	; 0x21
   140c0:	mov	r0, #0
   140c4:	cmp	r1, #94	; 0x5e
   140c8:	movwcc	r0, #1
   140cc:	bx	lr
   140d0:	sub	r1, r0, #97	; 0x61
   140d4:	mov	r0, #0
   140d8:	cmp	r1, #26
   140dc:	movwcc	r0, #1
   140e0:	bx	lr
   140e4:	sub	r1, r0, #32
   140e8:	mov	r0, #0
   140ec:	cmp	r1, #95	; 0x5f
   140f0:	movwcc	r0, #1
   140f4:	bx	lr
   140f8:	sub	r1, r0, #33	; 0x21
   140fc:	cmp	r1, #93	; 0x5d
   14100:	bhi	1428c <__assert_fail@plt+0x33c8>
   14104:	mov	r0, #1
   14108:	add	r2, pc, #0
   1410c:	ldr	pc, [r2, r1, lsl #2]
   14110:	andeq	r4, r1, r8, lsl #5
   14114:	andeq	r4, r1, r8, lsl #5
   14118:	andeq	r4, r1, r8, lsl #5
   1411c:	andeq	r4, r1, r8, lsl #5
   14120:	andeq	r4, r1, r8, lsl #5
   14124:	andeq	r4, r1, r8, lsl #5
   14128:	andeq	r4, r1, r8, lsl #5
   1412c:	andeq	r4, r1, r8, lsl #5
   14130:	andeq	r4, r1, r8, lsl #5
   14134:	andeq	r4, r1, r8, lsl #5
   14138:	andeq	r4, r1, r8, lsl #5
   1413c:	andeq	r4, r1, r8, lsl #5
   14140:	andeq	r4, r1, r8, lsl #5
   14144:	andeq	r4, r1, r8, lsl #5
   14148:	andeq	r4, r1, r8, lsl #5
   1414c:	andeq	r4, r1, ip, lsl #5
   14150:	andeq	r4, r1, ip, lsl #5
   14154:	andeq	r4, r1, ip, lsl #5
   14158:	andeq	r4, r1, ip, lsl #5
   1415c:	andeq	r4, r1, ip, lsl #5
   14160:	andeq	r4, r1, ip, lsl #5
   14164:	andeq	r4, r1, ip, lsl #5
   14168:	andeq	r4, r1, ip, lsl #5
   1416c:	andeq	r4, r1, ip, lsl #5
   14170:	andeq	r4, r1, ip, lsl #5
   14174:	andeq	r4, r1, r8, lsl #5
   14178:	andeq	r4, r1, r8, lsl #5
   1417c:	andeq	r4, r1, r8, lsl #5
   14180:	andeq	r4, r1, r8, lsl #5
   14184:	andeq	r4, r1, r8, lsl #5
   14188:	andeq	r4, r1, r8, lsl #5
   1418c:	andeq	r4, r1, r8, lsl #5
   14190:	andeq	r4, r1, ip, lsl #5
   14194:	andeq	r4, r1, ip, lsl #5
   14198:	andeq	r4, r1, ip, lsl #5
   1419c:	andeq	r4, r1, ip, lsl #5
   141a0:	andeq	r4, r1, ip, lsl #5
   141a4:	andeq	r4, r1, ip, lsl #5
   141a8:	andeq	r4, r1, ip, lsl #5
   141ac:	andeq	r4, r1, ip, lsl #5
   141b0:	andeq	r4, r1, ip, lsl #5
   141b4:	andeq	r4, r1, ip, lsl #5
   141b8:	andeq	r4, r1, ip, lsl #5
   141bc:	andeq	r4, r1, ip, lsl #5
   141c0:	andeq	r4, r1, ip, lsl #5
   141c4:	andeq	r4, r1, ip, lsl #5
   141c8:	andeq	r4, r1, ip, lsl #5
   141cc:	andeq	r4, r1, ip, lsl #5
   141d0:	andeq	r4, r1, ip, lsl #5
   141d4:	andeq	r4, r1, ip, lsl #5
   141d8:	andeq	r4, r1, ip, lsl #5
   141dc:	andeq	r4, r1, ip, lsl #5
   141e0:	andeq	r4, r1, ip, lsl #5
   141e4:	andeq	r4, r1, ip, lsl #5
   141e8:	andeq	r4, r1, ip, lsl #5
   141ec:	andeq	r4, r1, ip, lsl #5
   141f0:	andeq	r4, r1, ip, lsl #5
   141f4:	andeq	r4, r1, ip, lsl #5
   141f8:	andeq	r4, r1, r8, lsl #5
   141fc:	andeq	r4, r1, r8, lsl #5
   14200:	andeq	r4, r1, r8, lsl #5
   14204:	andeq	r4, r1, r8, lsl #5
   14208:	andeq	r4, r1, r8, lsl #5
   1420c:	andeq	r4, r1, r8, lsl #5
   14210:	andeq	r4, r1, ip, lsl #5
   14214:	andeq	r4, r1, ip, lsl #5
   14218:	andeq	r4, r1, ip, lsl #5
   1421c:	andeq	r4, r1, ip, lsl #5
   14220:	andeq	r4, r1, ip, lsl #5
   14224:	andeq	r4, r1, ip, lsl #5
   14228:	andeq	r4, r1, ip, lsl #5
   1422c:	andeq	r4, r1, ip, lsl #5
   14230:	andeq	r4, r1, ip, lsl #5
   14234:	andeq	r4, r1, ip, lsl #5
   14238:	andeq	r4, r1, ip, lsl #5
   1423c:	andeq	r4, r1, ip, lsl #5
   14240:	andeq	r4, r1, ip, lsl #5
   14244:	andeq	r4, r1, ip, lsl #5
   14248:	andeq	r4, r1, ip, lsl #5
   1424c:	andeq	r4, r1, ip, lsl #5
   14250:	andeq	r4, r1, ip, lsl #5
   14254:	andeq	r4, r1, ip, lsl #5
   14258:	andeq	r4, r1, ip, lsl #5
   1425c:	andeq	r4, r1, ip, lsl #5
   14260:	andeq	r4, r1, ip, lsl #5
   14264:	andeq	r4, r1, ip, lsl #5
   14268:	andeq	r4, r1, ip, lsl #5
   1426c:	andeq	r4, r1, ip, lsl #5
   14270:	andeq	r4, r1, ip, lsl #5
   14274:	andeq	r4, r1, ip, lsl #5
   14278:	andeq	r4, r1, r8, lsl #5
   1427c:	andeq	r4, r1, r8, lsl #5
   14280:	andeq	r4, r1, r8, lsl #5
   14284:	andeq	r4, r1, r8, lsl #5
   14288:	bx	lr
   1428c:	mov	r0, #0
   14290:	bx	lr
   14294:	sub	r0, r0, #9
   14298:	cmp	r0, #23
   1429c:	movhi	r0, #0
   142a0:	bxhi	lr
   142a4:	bic	r0, r0, #-16777216	; 0xff000000
   142a8:	movw	r1, #31
   142ac:	movt	r1, #128	; 0x80
   142b0:	mov	r2, #1
   142b4:	and	r0, r2, r1, lsr r0
   142b8:	bx	lr
   142bc:	sub	r1, r0, #65	; 0x41
   142c0:	mov	r0, #0
   142c4:	cmp	r1, #26
   142c8:	movwcc	r0, #1
   142cc:	bx	lr
   142d0:	mov	r1, r0
   142d4:	sub	r2, r0, #48	; 0x30
   142d8:	mov	r0, #1
   142dc:	cmp	r2, #22
   142e0:	bhi	142f8 <__assert_fail@plt+0x3434>
   142e4:	mov	ip, #1
   142e8:	movw	r3, #1023	; 0x3ff
   142ec:	movt	r3, #126	; 0x7e
   142f0:	tst	r3, ip, lsl r2
   142f4:	bxne	lr
   142f8:	sub	r1, r1, #97	; 0x61
   142fc:	cmp	r1, #6
   14300:	movcs	r0, #0
   14304:	bxcs	lr
   14308:	bx	lr
   1430c:	sub	r1, r0, #65	; 0x41
   14310:	cmp	r1, #26
   14314:	addcc	r0, r0, #32
   14318:	bx	lr
   1431c:	sub	r1, r0, #97	; 0x61
   14320:	cmp	r1, #26
   14324:	subcc	r0, r0, #32
   14328:	bx	lr
   1432c:	push	{r4, r5, r6, sl, fp, lr}
   14330:	add	fp, sp, #16
   14334:	mov	r4, r0
   14338:	bl	10d80 <__fpending@plt>
   1433c:	mov	r5, r0
   14340:	mov	r0, r4
   14344:	bl	10cfc <ferror@plt>
   14348:	mov	r6, r0
   1434c:	mov	r0, r4
   14350:	bl	10e40 <fclose@plt>
   14354:	cmp	r6, #0
   14358:	beq	14378 <__assert_fail@plt+0x34b4>
   1435c:	mvn	r4, #0
   14360:	cmp	r0, #0
   14364:	bne	143ac <__assert_fail@plt+0x34e8>
   14368:	bl	10e10 <__errno_location@plt>
   1436c:	mov	r1, #0
   14370:	str	r1, [r0]
   14374:	b	143ac <__assert_fail@plt+0x34e8>
   14378:	cmp	r0, #0
   1437c:	mov	r4, r0
   14380:	mvnne	r4, #0
   14384:	cmp	r5, #0
   14388:	bne	143ac <__assert_fail@plt+0x34e8>
   1438c:	cmp	r0, #0
   14390:	beq	143ac <__assert_fail@plt+0x34e8>
   14394:	bl	10e10 <__errno_location@plt>
   14398:	ldr	r0, [r0]
   1439c:	subs	r4, r0, #9
   143a0:	mvnne	r4, #0
   143a4:	mov	r0, r4
   143a8:	pop	{r4, r5, r6, sl, fp, pc}
   143ac:	mov	r0, r4
   143b0:	pop	{r4, r5, r6, sl, fp, pc}
   143b4:	push	{r4, sl, fp, lr}
   143b8:	add	fp, sp, #8
   143bc:	sub	sp, sp, #264	; 0x108
   143c0:	add	r1, sp, #7
   143c4:	movw	r2, #257	; 0x101
   143c8:	bl	144a0 <__assert_fail@plt+0x35dc>
   143cc:	mov	r4, #0
   143d0:	cmp	r0, #0
   143d4:	bne	1440c <__assert_fail@plt+0x3548>
   143d8:	add	r0, sp, #7
   143dc:	movw	r1, #19895	; 0x4db7
   143e0:	movt	r1, #1
   143e4:	bl	10cc0 <strcmp@plt>
   143e8:	cmp	r0, #0
   143ec:	beq	1440c <__assert_fail@plt+0x3548>
   143f0:	add	r0, sp, #7
   143f4:	movw	r1, #19897	; 0x4db9
   143f8:	movt	r1, #1
   143fc:	bl	10cc0 <strcmp@plt>
   14400:	mov	r4, r0
   14404:	cmp	r0, #0
   14408:	movwne	r4, #1
   1440c:	mov	r0, r4
   14410:	sub	sp, fp, #8
   14414:	pop	{r4, sl, fp, pc}
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	bl	10e10 <__errno_location@plt>
   14424:	mov	r1, #12
   14428:	str	r1, [r0]
   1442c:	mov	r0, #0
   14430:	pop	{fp, pc}
   14434:	b	13ee8 <__assert_fail@plt+0x3024>
   14438:	cmp	r1, #0
   1443c:	orreq	r1, r1, #1
   14440:	b	13f78 <__assert_fail@plt+0x30b4>
   14444:	b	13d60 <__assert_fail@plt+0x2e9c>
   14448:	clz	r3, r2
   1444c:	lsr	ip, r3, #5
   14450:	clz	r3, r1
   14454:	lsr	r3, r3, #5
   14458:	orrs	r3, r3, ip
   1445c:	movwne	r1, #1
   14460:	movwne	r2, #1
   14464:	b	13fcc <__assert_fail@plt+0x3108>
   14468:	push	{fp, lr}
   1446c:	mov	fp, sp
   14470:	mov	r0, #14
   14474:	bl	10e70 <nl_langinfo@plt>
   14478:	movw	r1, #18750	; 0x493e
   1447c:	movt	r1, #1
   14480:	cmp	r0, #0
   14484:	movne	r1, r0
   14488:	ldrb	r2, [r1]
   1448c:	movw	r0, #19903	; 0x4dbf
   14490:	movt	r0, #1
   14494:	cmp	r2, #0
   14498:	movne	r0, r1
   1449c:	pop	{fp, pc}
   144a0:	b	144a4 <__assert_fail@plt+0x35e0>
   144a4:	push	{r4, r5, r6, r7, fp, lr}
   144a8:	add	fp, sp, #16
   144ac:	mov	r6, r2
   144b0:	mov	r4, r1
   144b4:	bl	14540 <__assert_fail@plt+0x367c>
   144b8:	cmp	r0, #0
   144bc:	beq	144ec <__assert_fail@plt+0x3628>
   144c0:	mov	r7, r0
   144c4:	bl	10df8 <strlen@plt>
   144c8:	cmp	r0, r6
   144cc:	bcs	1450c <__assert_fail@plt+0x3648>
   144d0:	add	r2, r0, #1
   144d4:	mov	r0, r4
   144d8:	mov	r1, r7
   144dc:	bl	10d14 <memcpy@plt>
   144e0:	mov	r5, #0
   144e4:	mov	r0, r5
   144e8:	pop	{r4, r5, r6, r7, fp, pc}
   144ec:	mov	r5, #22
   144f0:	cmp	r6, #0
   144f4:	movne	r0, #0
   144f8:	strbne	r0, [r4]
   144fc:	movne	r0, r5
   14500:	popne	{r4, r5, r6, r7, fp, pc}
   14504:	mov	r0, r5
   14508:	pop	{r4, r5, r6, r7, fp, pc}
   1450c:	mov	r5, #34	; 0x22
   14510:	cmp	r6, #0
   14514:	beq	14534 <__assert_fail@plt+0x3670>
   14518:	sub	r6, r6, #1
   1451c:	mov	r0, r4
   14520:	mov	r1, r7
   14524:	mov	r2, r6
   14528:	bl	10d14 <memcpy@plt>
   1452c:	mov	r0, #0
   14530:	strb	r0, [r4, r6]
   14534:	mov	r0, r5
   14538:	pop	{r4, r5, r6, r7, fp, pc}
   1453c:	b	14540 <__assert_fail@plt+0x367c>
   14540:	mov	r1, #0
   14544:	b	10e58 <setlocale@plt>
   14548:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1454c:	mov	r7, r0
   14550:	ldr	r6, [pc, #72]	; 145a0 <__assert_fail@plt+0x36dc>
   14554:	ldr	r5, [pc, #72]	; 145a4 <__assert_fail@plt+0x36e0>
   14558:	add	r6, pc, r6
   1455c:	add	r5, pc, r5
   14560:	sub	r6, r6, r5
   14564:	mov	r8, r1
   14568:	mov	r9, r2
   1456c:	bl	10c94 <calloc@plt-0x20>
   14570:	asrs	r6, r6, #2
   14574:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14578:	mov	r4, #0
   1457c:	add	r4, r4, #1
   14580:	ldr	r3, [r5], #4
   14584:	mov	r2, r9
   14588:	mov	r1, r8
   1458c:	mov	r0, r7
   14590:	blx	r3
   14594:	cmp	r6, r4
   14598:	bne	1457c <__assert_fail@plt+0x36b8>
   1459c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145a0:	andeq	r0, r1, ip, lsr #19
   145a4:	andeq	r0, r1, r4, lsr #19
   145a8:	bx	lr
   145ac:	ldr	r3, [pc, #12]	; 145c0 <__assert_fail@plt+0x36fc>
   145b0:	mov	r1, #0
   145b4:	add	r3, pc, r3
   145b8:	ldr	r2, [r3]
   145bc:	b	10e1c <__cxa_atexit@plt>
   145c0:	andeq	r0, r1, r0, lsl fp

Disassembly of section .fini:

000145c4 <.fini>:
   145c4:	push	{r3, lr}
   145c8:	pop	{r3, pc}
