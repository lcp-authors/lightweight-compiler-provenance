
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

000111a0 <.init>:
   111a0:	push	{r3, lr}
   111a4:	bl	1153c <__assert_fail@plt+0x4c>
   111a8:	pop	{r3, pc}

Disassembly of section .plt:

000111ac <fstatfs64@plt-0x14>:
   111ac:	push	{lr}		; (str lr, [sp, #-4]!)
   111b0:	ldr	lr, [pc, #4]	; 111bc <fstatfs64@plt-0x4>
   111b4:	add	lr, pc, lr
   111b8:	ldr	pc, [lr, #8]!
   111bc:	andeq	r9, r1, r4, asr #28

000111c0 <fstatfs64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3652]!	; 0xe44

000111cc <calloc@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3644]!	; 0xe3c

000111d8 <endgrent@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3636]!	; 0xe34

000111e4 <fputs_unlocked@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3628]!	; 0xe2c

000111f0 <raise@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3620]!	; 0xe24

000111fc <strcmp@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3612]!	; 0xe1c

00011208 <getpwuid@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3604]!	; 0xe14

00011214 <fflush@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011220 <memmove@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3588]!	; 0xe04

0001122c <free@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3580]!	; 0xdfc

00011238 <_exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3572]!	; 0xdf4

00011244 <memcpy@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3564]!	; 0xdec

00011250 <mbsinit@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3556]!	; 0xde4

0001125c <stpcpy@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3548]!	; 0xddc

00011268 <dcgettext@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3540]!	; 0xdd4

00011274 <realloc@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011280 <textdomain@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3524]!	; 0xdc4

0001128c <__fxstatat64@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3516]!	; 0xdbc

00011298 <iswprint@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112a4 <__fxstat64@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3500]!	; 0xdac

000112b0 <lseek64@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3492]!	; 0xda4

000112bc <__ctype_get_mb_cur_max@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3484]!	; 0xd9c

000112c8 <__fpending@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3476]!	; 0xd94

000112d4 <ferror_unlocked@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3468]!	; 0xd8c

000112e0 <mbrtowc@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3460]!	; 0xd84

000112ec <error@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3452]!	; 0xd7c

000112f8 <open64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3444]!	; 0xd74

00011304 <malloc@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011310 <__libc_start_main@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3428]!	; 0xd64

0001131c <__freading@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3420]!	; 0xd5c

00011328 <__gmon_start__@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3412]!	; 0xd54

00011334 <getopt_long@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011340 <__ctype_b_loc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3396]!	; 0xd44

0001134c <exit@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3388]!	; 0xd3c

00011358 <bcmp@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3380]!	; 0xd34

00011364 <strlen@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011370 <strchr@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3364]!	; 0xd24

0001137c <openat64@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3356]!	; 0xd1c

00011388 <fchown@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3348]!	; 0xd14

00011394 <__errno_location@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #102400	; 0x19000
   1139c:	ldr	pc, [ip, #3340]!	; 0xd0c

000113a0 <__cxa_atexit@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3332]!	; 0xd04

000113ac <memset@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3324]!	; 0xcfc

000113b8 <__printf_chk@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3316]!	; 0xcf4

000113c4 <fileno@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3308]!	; 0xcec

000113d0 <strtoumax@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3300]!	; 0xce4

000113dc <__fprintf_chk@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3292]!	; 0xcdc

000113e8 <fclose@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3284]!	; 0xcd4

000113f4 <fseeko64@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3276]!	; 0xccc

00011400 <fcntl64@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3268]!	; 0xcc4

0001140c <setlocale@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3260]!	; 0xcbc

00011418 <strrchr@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3252]!	; 0xcb4

00011424 <nl_langinfo@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3244]!	; 0xcac

00011430 <readdir64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3236]!	; 0xca4

0001143c <fdopendir@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3228]!	; 0xc9c

00011448 <dirfd@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3220]!	; 0xc94

00011454 <fchdir@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011460 <qsort@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3204]!	; 0xc84

0001146c <fchownat@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3196]!	; 0xc7c

00011478 <bindtextdomain@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3188]!	; 0xc74

00011484 <__xstat64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011490 <fputs@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3172]!	; 0xc64

0001149c <strncmp@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3164]!	; 0xc5c

000114a8 <abort@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #3156]!	; 0xc54

000114b4 <close@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #3148]!	; 0xc4c

000114c0 <__lxstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #3140]!	; 0xc44

000114cc <closedir@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000114d8 <getgrgid@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #3124]!	; 0xc34

000114e4 <getgrnam@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000114f0 <__assert_fail@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00011500 <.text>:
   11500:	mov	fp, #0
   11504:	mov	lr, #0
   11508:	pop	{r1}		; (ldr r1, [sp], #4)
   1150c:	mov	r2, sp
   11510:	push	{r2}		; (str r2, [sp, #-4]!)
   11514:	push	{r0}		; (str r0, [sp, #-4]!)
   11518:	ldr	ip, [pc, #16]	; 11530 <__assert_fail@plt+0x40>
   1151c:	push	{ip}		; (str ip, [sp, #-4]!)
   11520:	ldr	r0, [pc, #12]	; 11534 <__assert_fail@plt+0x44>
   11524:	ldr	r3, [pc, #12]	; 11538 <__assert_fail@plt+0x48>
   11528:	bl	11310 <__libc_start_main@plt>
   1152c:	bl	114a8 <abort@plt>
   11530:	andeq	r9, r1, ip, lsl #8
   11534:	andeq	r1, r1, r4, lsl #18
   11538:	andeq	r9, r1, ip, lsr #7
   1153c:	ldr	r3, [pc, #20]	; 11558 <__assert_fail@plt+0x68>
   11540:	ldr	r2, [pc, #20]	; 1155c <__assert_fail@plt+0x6c>
   11544:	add	r3, pc, r3
   11548:	ldr	r2, [r3, r2]
   1154c:	cmp	r2, #0
   11550:	bxeq	lr
   11554:	b	11328 <__gmon_start__@plt>
   11558:			; <UNDEFINED> instruction: 0x00019ab4
   1155c:	andeq	r0, r0, r0, lsr #2
   11560:	ldr	r0, [pc, #24]	; 11580 <__assert_fail@plt+0x90>
   11564:	ldr	r3, [pc, #24]	; 11584 <__assert_fail@plt+0x94>
   11568:	cmp	r3, r0
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0x98>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	fp, r2, r8, ror r1
   11584:	andeq	fp, r2, r8, ror r1
   11588:	andeq	r0, r0, r0
   1158c:	ldr	r0, [pc, #36]	; 115b8 <__assert_fail@plt+0xc8>
   11590:	ldr	r1, [pc, #36]	; 115bc <__assert_fail@plt+0xcc>
   11594:	sub	r1, r1, r0
   11598:	asr	r1, r1, #2
   1159c:	add	r1, r1, r1, lsr #31
   115a0:	asrs	r1, r1, #1
   115a4:	bxeq	lr
   115a8:	ldr	r3, [pc, #16]	; 115c0 <__assert_fail@plt+0xd0>
   115ac:	cmp	r3, #0
   115b0:	bxeq	lr
   115b4:	bx	r3
   115b8:	andeq	fp, r2, r8, ror r1
   115bc:	andeq	fp, r2, r8, ror r1
   115c0:	andeq	r0, r0, r0
   115c4:	push	{r4, lr}
   115c8:	ldr	r4, [pc, #24]	; 115e8 <__assert_fail@plt+0xf8>
   115cc:	ldrb	r3, [r4]
   115d0:	cmp	r3, #0
   115d4:	popne	{r4, pc}
   115d8:	bl	11560 <__assert_fail@plt+0x70>
   115dc:	mov	r3, #1
   115e0:	strb	r3, [r4]
   115e4:	pop	{r4, pc}
   115e8:	muleq	r2, r4, r1
   115ec:	b	1158c <__assert_fail@plt+0x9c>
   115f0:	push	{fp, lr}
   115f4:	mov	fp, sp
   115f8:	sub	sp, sp, #56	; 0x38
   115fc:	mov	r8, r0
   11600:	cmp	r0, #0
   11604:	bne	118c4 <__assert_fail@plt+0x3d4>
   11608:	movw	r1, #38067	; 0x94b3
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	movt	r1, #1
   11618:	bl	11268 <dcgettext@plt>
   1161c:	movw	r5, #45496	; 0xb1b8
   11620:	mov	r1, r0
   11624:	mov	r0, #1
   11628:	movt	r5, #2
   1162c:	ldr	r2, [r5]
   11630:	mov	r3, r2
   11634:	bl	113b8 <__printf_chk@plt>
   11638:	movw	r1, #38152	; 0x9508
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	11268 <dcgettext@plt>
   1164c:	movw	r9, #45452	; 0xb18c
   11650:	movt	r9, #2
   11654:	ldr	r1, [r9]
   11658:	bl	111e4 <fputs_unlocked@plt>
   1165c:	movw	r1, #38260	; 0x9574
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	11268 <dcgettext@plt>
   11670:	ldr	r1, [r9]
   11674:	bl	111e4 <fputs_unlocked@plt>
   11678:	movw	r1, #38461	; 0x963d
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #1
   11688:	bl	11268 <dcgettext@plt>
   1168c:	ldr	r1, [r9]
   11690:	bl	111e4 <fputs_unlocked@plt>
   11694:	movw	r1, #38692	; 0x9724
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #1
   116a4:	bl	11268 <dcgettext@plt>
   116a8:	ldr	r1, [r9]
   116ac:	bl	111e4 <fputs_unlocked@plt>
   116b0:	movw	r1, #38811	; 0x979b
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	11268 <dcgettext@plt>
   116c4:	ldr	r1, [r9]
   116c8:	bl	111e4 <fputs_unlocked@plt>
   116cc:	movw	r1, #38939	; 0x981b
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11268 <dcgettext@plt>
   116e0:	ldr	r1, [r9]
   116e4:	bl	111e4 <fputs_unlocked@plt>
   116e8:	movw	r1, #39045	; 0x9885
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11268 <dcgettext@plt>
   116fc:	ldr	r1, [r9]
   11700:	bl	111e4 <fputs_unlocked@plt>
   11704:	movw	r1, #39116	; 0x98cc
   11708:	mov	r0, #0
   1170c:	mov	r2, #5
   11710:	movt	r1, #1
   11714:	bl	11268 <dcgettext@plt>
   11718:	ldr	r1, [r9]
   1171c:	bl	111e4 <fputs_unlocked@plt>
   11720:	movw	r1, #39581	; 0x9a9d
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #1
   11730:	bl	11268 <dcgettext@plt>
   11734:	ldr	r1, [r9]
   11738:	bl	111e4 <fputs_unlocked@plt>
   1173c:	movw	r1, #39626	; 0x9aca
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	11268 <dcgettext@plt>
   11750:	ldr	r1, [r9]
   11754:	bl	111e4 <fputs_unlocked@plt>
   11758:	movw	r1, #39680	; 0x9b00
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	movt	r1, #1
   11768:	bl	11268 <dcgettext@plt>
   1176c:	ldr	r2, [r5]
   11770:	mov	r1, r0
   11774:	mov	r0, #1
   11778:	mov	r3, r2
   1177c:	bl	113b8 <__printf_chk@plt>
   11780:	movw	r0, #40632	; 0x9eb8
   11784:	mov	r6, sp
   11788:	movt	r0, #1
   1178c:	mov	r1, r6
   11790:	ldm	r0!, {r2, r3, r4, r5}
   11794:	stmia	r1!, {r2, r3, r4, r5}
   11798:	ldm	r0!, {r2, r3, r4, r5, r7}
   1179c:	stmia	r1!, {r2, r3, r4, r5, r7}
   117a0:	ldm	r0, {r2, r3, r4, r5, r7}
   117a4:	stm	r1, {r2, r3, r4, r5, r7}
   117a8:	movw	r1, #40009	; 0x9c49
   117ac:	movw	r5, #39813	; 0x9b85
   117b0:	movt	r1, #1
   117b4:	movt	r5, #1
   117b8:	mov	r0, r5
   117bc:	bl	111fc <strcmp@plt>
   117c0:	cmp	r0, #0
   117c4:	ldrne	r1, [r6, #8]!
   117c8:	cmpne	r1, #0
   117cc:	bne	117b8 <__assert_fail@plt+0x2c8>
   117d0:	movw	r1, #40104	; 0x9ca8
   117d4:	ldr	r6, [r6, #4]
   117d8:	mov	r0, #0
   117dc:	mov	r2, #5
   117e0:	movt	r1, #1
   117e4:	bl	11268 <dcgettext@plt>
   117e8:	movw	r2, #39852	; 0x9bac
   117ec:	movw	r3, #40127	; 0x9cbf
   117f0:	mov	r1, r0
   117f4:	mov	r0, #1
   117f8:	movt	r2, #1
   117fc:	movt	r3, #1
   11800:	bl	113b8 <__printf_chk@plt>
   11804:	cmp	r6, #0
   11808:	mov	r0, #5
   1180c:	mov	r1, #0
   11810:	moveq	r6, r5
   11814:	bl	1140c <setlocale@plt>
   11818:	cmp	r0, #0
   1181c:	beq	11854 <__assert_fail@plt+0x364>
   11820:	movw	r1, #40167	; 0x9ce7
   11824:	mov	r2, #3
   11828:	movt	r1, #1
   1182c:	bl	1149c <strncmp@plt>
   11830:	cmp	r0, #0
   11834:	beq	11854 <__assert_fail@plt+0x364>
   11838:	movw	r1, #40171	; 0x9ceb
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	11268 <dcgettext@plt>
   1184c:	ldr	r1, [r9]
   11850:	bl	111e4 <fputs_unlocked@plt>
   11854:	movw	r1, #40242	; 0x9d32
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11268 <dcgettext@plt>
   11868:	movw	r2, #40127	; 0x9cbf
   1186c:	mov	r1, r0
   11870:	mov	r0, #1
   11874:	mov	r3, r5
   11878:	movt	r2, #1
   1187c:	bl	113b8 <__printf_chk@plt>
   11880:	movw	r1, #40269	; 0x9d4d
   11884:	mov	r0, #0
   11888:	mov	r2, #5
   1188c:	movt	r1, #1
   11890:	bl	11268 <dcgettext@plt>
   11894:	mov	r1, r0
   11898:	movw	r0, #40037	; 0x9c65
   1189c:	movw	r3, #39580	; 0x9a9c
   118a0:	cmp	r6, r5
   118a4:	mov	r2, r6
   118a8:	movt	r0, #1
   118ac:	movt	r3, #1
   118b0:	moveq	r3, r0
   118b4:	mov	r0, #1
   118b8:	bl	113b8 <__printf_chk@plt>
   118bc:	mov	r0, r8
   118c0:	bl	1134c <exit@plt>
   118c4:	movw	r0, #45448	; 0xb188
   118c8:	movw	r1, #38028	; 0x948c
   118cc:	mov	r2, #5
   118d0:	movt	r0, #2
   118d4:	movt	r1, #1
   118d8:	ldr	r5, [r0]
   118dc:	mov	r0, #0
   118e0:	bl	11268 <dcgettext@plt>
   118e4:	mov	r2, r0
   118e8:	movw	r0, #45496	; 0xb1b8
   118ec:	mov	r1, #1
   118f0:	movt	r0, #2
   118f4:	ldr	r3, [r0]
   118f8:	mov	r0, r5
   118fc:	bl	113dc <__fprintf_chk@plt>
   11900:	b	118bc <__assert_fail@plt+0x3cc>
   11904:	push	{fp, lr}
   11908:	mov	fp, sp
   1190c:	sub	sp, sp, #144	; 0x90
   11910:	mov	r7, r0
   11914:	ldr	r0, [r1]
   11918:	mov	r4, r1
   1191c:	bl	15e30 <__assert_fail@plt+0x4940>
   11920:	movw	r1, #39580	; 0x9a9c
   11924:	mov	r0, #6
   11928:	movt	r1, #1
   1192c:	bl	1140c <setlocale@plt>
   11930:	movw	r5, #39856	; 0x9bb0
   11934:	movw	r1, #39819	; 0x9b8b
   11938:	movt	r5, #1
   1193c:	movt	r1, #1
   11940:	mov	r0, r5
   11944:	bl	11478 <bindtextdomain@plt>
   11948:	mov	r0, r5
   1194c:	bl	11280 <textdomain@plt>
   11950:	movw	r0, #11200	; 0x2bc0
   11954:	movt	r0, #1
   11958:	bl	19410 <__assert_fail@plt+0x7f20>
   1195c:	sub	r0, fp, #24
   11960:	bl	11dcc <__assert_fail@plt+0x8dc>
   11964:	movw	r5, #39843	; 0x9ba3
   11968:	movw	r6, #40424	; 0x9de8
   1196c:	mov	sl, #0
   11970:	mov	r8, #16
   11974:	mvn	r9, #0
   11978:	movt	r5, #1
   1197c:	movt	r6, #1
   11980:	mov	r0, #0
   11984:	str	r0, [sp, #12]
   11988:	mov	r0, r7
   1198c:	mov	r1, r4
   11990:	mov	r2, r5
   11994:	mov	r3, r6
   11998:	str	sl, [sp]
   1199c:	bl	11334 <getopt_long@plt>
   119a0:	cmp	r0, #103	; 0x67
   119a4:	bgt	119d4 <__assert_fail@plt+0x4e4>
   119a8:	cmp	r0, #81	; 0x51
   119ac:	bgt	11a00 <__assert_fail@plt+0x510>
   119b0:	cmp	r0, #71	; 0x47
   119b4:	ble	11a90 <__assert_fail@plt+0x5a0>
   119b8:	mov	r8, #17
   119bc:	cmp	r0, #72	; 0x48
   119c0:	beq	11988 <__assert_fail@plt+0x498>
   119c4:	cmp	r0, #76	; 0x4c
   119c8:	bne	11a78 <__assert_fail@plt+0x588>
   119cc:	mov	r8, #2
   119d0:	b	11988 <__assert_fail@plt+0x498>
   119d4:	sub	r1, r0, #256	; 0x100
   119d8:	cmp	r1, #3
   119dc:	bhi	11a1c <__assert_fail@plt+0x52c>
   119e0:	add	r0, pc, #0
   119e4:	ldr	pc, [r0, r1, lsl #2]
   119e8:	strdeq	r1, [r1], -r8
   119ec:	andeq	r1, r1, r0, lsl #19
   119f0:	andeq	r1, r1, r8, lsl #21
   119f4:	andeq	r1, r1, ip, lsr #20
   119f8:	mov	r9, #1
   119fc:	b	11988 <__assert_fail@plt+0x498>
   11a00:	cmp	r0, #82	; 0x52
   11a04:	beq	11a48 <__assert_fail@plt+0x558>
   11a08:	cmp	r0, #99	; 0x63
   11a0c:	bne	11a54 <__assert_fail@plt+0x564>
   11a10:	mov	r0, #1
   11a14:	str	r0, [fp, #-24]	; 0xffffffe8
   11a18:	b	11988 <__assert_fail@plt+0x498>
   11a1c:	cmp	r0, #104	; 0x68
   11a20:	bne	11a68 <__assert_fail@plt+0x578>
   11a24:	mov	r9, #0
   11a28:	b	11988 <__assert_fail@plt+0x498>
   11a2c:	movw	r0, #45456	; 0xb190
   11a30:	movw	r1, #45464	; 0xb198
   11a34:	movt	r0, #2
   11a38:	movt	r1, #2
   11a3c:	ldr	r0, [r0]
   11a40:	str	r0, [r1]
   11a44:	b	11988 <__assert_fail@plt+0x498>
   11a48:	mov	r0, #1
   11a4c:	strb	r0, [fp, #-20]	; 0xffffffec
   11a50:	b	11988 <__assert_fail@plt+0x498>
   11a54:	cmp	r0, #102	; 0x66
   11a58:	bne	11c2c <__assert_fail@plt+0x73c>
   11a5c:	mov	r0, #1
   11a60:	strb	r0, [fp, #-11]
   11a64:	b	11988 <__assert_fail@plt+0x498>
   11a68:	cmp	r0, #118	; 0x76
   11a6c:	bne	11c2c <__assert_fail@plt+0x73c>
   11a70:	str	sl, [fp, #-24]	; 0xffffffe8
   11a74:	b	11988 <__assert_fail@plt+0x498>
   11a78:	cmp	r0, #80	; 0x50
   11a7c:	bne	11c2c <__assert_fail@plt+0x73c>
   11a80:	mov	r8, #16
   11a84:	b	11988 <__assert_fail@plt+0x498>
   11a88:	mov	r0, #1
   11a8c:	b	11984 <__assert_fail@plt+0x494>
   11a90:	cmn	r0, #3
   11a94:	beq	11aa8 <__assert_fail@plt+0x5b8>
   11a98:	cmn	r0, #2
   11a9c:	bne	11afc <__assert_fail@plt+0x60c>
   11aa0:	mov	r0, #0
   11aa4:	bl	115f0 <__assert_fail@plt+0x100>
   11aa8:	movw	r0, #45360	; 0xb130
   11aac:	movw	r2, #39882	; 0x9bca
   11ab0:	mov	r1, #0
   11ab4:	movw	r7, #39866	; 0x9bba
   11ab8:	movt	r0, #2
   11abc:	movt	r2, #1
   11ac0:	str	r1, [sp, #8]
   11ac4:	movw	r1, #39813	; 0x9b85
   11ac8:	movt	r7, #1
   11acc:	movt	r1, #1
   11ad0:	ldr	r3, [r0]
   11ad4:	movw	r0, #45452	; 0xb18c
   11ad8:	str	r2, [sp, #4]
   11adc:	movw	r2, #39852	; 0x9bac
   11ae0:	str	r7, [sp]
   11ae4:	movt	r0, #2
   11ae8:	movt	r2, #1
   11aec:	ldr	r0, [r0]
   11af0:	bl	17db4 <__assert_fail@plt+0x68c4>
   11af4:	mov	r0, #0
   11af8:	bl	1134c <exit@plt>
   11afc:	cmn	r0, #1
   11b00:	bne	11c2c <__assert_fail@plt+0x73c>
   11b04:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11b08:	mov	sl, #16
   11b0c:	cmp	r0, #0
   11b10:	bne	11b1c <__assert_fail@plt+0x62c>
   11b14:	mov	r0, r9
   11b18:	b	11b5c <__assert_fail@plt+0x66c>
   11b1c:	cmp	r8, #16
   11b20:	bne	11b54 <__assert_fail@plt+0x664>
   11b24:	mov	r0, #0
   11b28:	cmp	r9, #1
   11b2c:	bne	11b5c <__assert_fail@plt+0x66c>
   11b30:	movw	r1, #39895	; 0x9bd7
   11b34:	mov	r0, #0
   11b38:	mov	r2, #5
   11b3c:	movt	r1, #1
   11b40:	bl	11268 <dcgettext@plt>
   11b44:	mov	r2, r0
   11b48:	mov	r0, #1
   11b4c:	mov	r1, #0
   11b50:	bl	112ec <error@plt>
   11b54:	mov	r0, r9
   11b58:	mov	sl, r8
   11b5c:	cmp	r0, #0
   11b60:	movw	r8, #45440	; 0xb180
   11b64:	mov	r2, #2
   11b68:	movwne	r0, #1
   11b6c:	movt	r8, #2
   11b70:	strb	r0, [fp, #-12]
   11b74:	movw	r0, #45464	; 0xb198
   11b78:	movt	r0, #2
   11b7c:	ldr	r1, [r8]
   11b80:	ldr	r0, [r0]
   11b84:	sub	r3, r7, r1
   11b88:	cmp	r0, #0
   11b8c:	movwne	r2, #1
   11b90:	cmp	r3, r2
   11b94:	bge	11bdc <__assert_fail@plt+0x6ec>
   11b98:	cmp	r1, r7
   11b9c:	bge	11c08 <__assert_fail@plt+0x718>
   11ba0:	movw	r1, #39953	; 0x9c11
   11ba4:	mov	r0, #0
   11ba8:	mov	r2, #5
   11bac:	movt	r1, #1
   11bb0:	bl	11268 <dcgettext@plt>
   11bb4:	mov	r5, r0
   11bb8:	add	r0, r4, r7, lsl #2
   11bbc:	ldr	r0, [r0, #-4]
   11bc0:	bl	1781c <__assert_fail@plt+0x632c>
   11bc4:	mov	r3, r0
   11bc8:	mov	r0, #0
   11bcc:	mov	r1, #0
   11bd0:	mov	r2, r5
   11bd4:	bl	112ec <error@plt>
   11bd8:	b	11c2c <__assert_fail@plt+0x73c>
   11bdc:	cmp	r0, #0
   11be0:	beq	11c34 <__assert_fail@plt+0x744>
   11be4:	add	r1, sp, #16
   11be8:	bl	19428 <__assert_fail@plt+0x7f38>
   11bec:	cmp	r0, #0
   11bf0:	bne	11ce0 <__assert_fail@plt+0x7f0>
   11bf4:	ldr	r6, [sp, #44]	; 0x2c
   11bf8:	mov	r0, r6
   11bfc:	bl	11e14 <__assert_fail@plt+0x924>
   11c00:	str	r0, [fp, #-4]
   11c04:	b	11d20 <__assert_fail@plt+0x830>
   11c08:	movw	r1, #39937	; 0x9c01
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #1
   11c18:	bl	11268 <dcgettext@plt>
   11c1c:	mov	r2, r0
   11c20:	mov	r0, #0
   11c24:	mov	r1, #0
   11c28:	bl	112ec <error@plt>
   11c2c:	mov	r0, #1
   11c30:	bl	115f0 <__assert_fail@plt+0x100>
   11c34:	add	r0, r1, #1
   11c38:	str	r0, [r8]
   11c3c:	mov	r0, #0
   11c40:	ldr	r5, [r4, r1, lsl #2]
   11c44:	ldrb	r1, [r5]
   11c48:	cmp	r1, #0
   11c4c:	beq	11c58 <__assert_fail@plt+0x768>
   11c50:	mov	r0, r5
   11c54:	bl	182b0 <__assert_fail@plt+0x6dc0>
   11c58:	str	r0, [fp, #-4]
   11c5c:	mvn	r6, #0
   11c60:	ldrb	r0, [r5]
   11c64:	cmp	r0, #0
   11c68:	beq	11d20 <__assert_fail@plt+0x830>
   11c6c:	mov	r0, r5
   11c70:	bl	114e4 <getgrnam@plt>
   11c74:	cmp	r0, #0
   11c78:	bne	11d10 <__assert_fail@plt+0x820>
   11c7c:	movw	r0, #39580	; 0x9a9c
   11c80:	add	r3, sp, #16
   11c84:	mov	r1, #0
   11c88:	mov	r2, #10
   11c8c:	movt	r0, #1
   11c90:	str	r0, [sp]
   11c94:	mov	r0, r5
   11c98:	bl	183a8 <__assert_fail@plt+0x6eb8>
   11c9c:	cmp	r0, #0
   11ca0:	ldreq	r0, [sp, #20]
   11ca4:	cmpeq	r0, #0
   11ca8:	beq	11d18 <__assert_fail@plt+0x828>
   11cac:	movw	r1, #40404	; 0x9dd4
   11cb0:	mov	r0, #0
   11cb4:	mov	r2, #5
   11cb8:	movt	r1, #1
   11cbc:	bl	11268 <dcgettext@plt>
   11cc0:	mov	r4, r0
   11cc4:	mov	r0, r5
   11cc8:	bl	1781c <__assert_fail@plt+0x632c>
   11ccc:	mov	r3, r0
   11cd0:	mov	r0, #1
   11cd4:	mov	r1, #0
   11cd8:	mov	r2, r4
   11cdc:	bl	112ec <error@plt>
   11ce0:	bl	11394 <__errno_location@plt>
   11ce4:	movw	r1, #39978	; 0x9c2a
   11ce8:	ldr	r4, [r0]
   11cec:	mov	r0, #0
   11cf0:	mov	r2, #5
   11cf4:	movt	r1, #1
   11cf8:	bl	11268 <dcgettext@plt>
   11cfc:	mov	r5, r0
   11d00:	movw	r0, #45464	; 0xb198
   11d04:	movt	r0, #2
   11d08:	ldr	r1, [r0]
   11d0c:	b	11d7c <__assert_fail@plt+0x88c>
   11d10:	ldr	r6, [r0, #8]
   11d14:	b	11d1c <__assert_fail@plt+0x82c>
   11d18:	ldr	r6, [sp, #16]
   11d1c:	bl	111d8 <endgrent@plt>
   11d20:	ldrb	r0, [fp, #-20]	; 0xffffffec
   11d24:	cmp	r0, #0
   11d28:	beq	11d98 <__assert_fail@plt+0x8a8>
   11d2c:	ldr	r0, [sp, #12]
   11d30:	eor	r0, r0, #1
   11d34:	tst	r0, #1
   11d38:	bne	11d98 <__assert_fail@plt+0x8a8>
   11d3c:	movw	r0, #45472	; 0xb1a0
   11d40:	movt	r0, #2
   11d44:	bl	17968 <__assert_fail@plt+0x6478>
   11d48:	cmp	r0, #0
   11d4c:	str	r0, [fp, #-16]
   11d50:	bne	11d98 <__assert_fail@plt+0x8a8>
   11d54:	bl	11394 <__errno_location@plt>
   11d58:	movw	r1, #39978	; 0x9c2a
   11d5c:	ldr	r4, [r0]
   11d60:	mov	r0, #0
   11d64:	mov	r2, #5
   11d68:	movt	r1, #1
   11d6c:	bl	11268 <dcgettext@plt>
   11d70:	movw	r1, #42823	; 0xa747
   11d74:	mov	r5, r0
   11d78:	movt	r1, #1
   11d7c:	mov	r0, #4
   11d80:	bl	174e4 <__assert_fail@plt+0x5ff4>
   11d84:	mov	r3, r0
   11d88:	mov	r0, #1
   11d8c:	mov	r1, r4
   11d90:	mov	r2, r5
   11d94:	bl	112ec <error@plt>
   11d98:	ldr	r0, [r8]
   11d9c:	mvn	r1, #0
   11da0:	mvn	r2, #0
   11da4:	mov	r3, r6
   11da8:	str	r1, [sp]
   11dac:	str	r1, [sp, #4]
   11db0:	sub	r1, fp, #24
   11db4:	str	r1, [sp, #8]
   11db8:	orr	r1, sl, #1024	; 0x400
   11dbc:	add	r0, r4, r0, lsl #2
   11dc0:	bl	11e94 <__assert_fail@plt+0x9a4>
   11dc4:	eor	r0, r0, #1
   11dc8:	bl	1134c <exit@plt>
   11dcc:	mov	r1, #0
   11dd0:	mov	r2, #2
   11dd4:	str	r1, [r0, #8]
   11dd8:	str	r2, [r0]
   11ddc:	mov	r2, #1
   11de0:	str	r1, [r0, #16]
   11de4:	str	r1, [r0, #20]
   11de8:	strh	r2, [r0, #12]
   11dec:	strb	r1, [r0, #4]
   11df0:	bx	lr
   11df4:	push	{r4, sl, fp, lr}
   11df8:	add	fp, sp, #8
   11dfc:	mov	r4, r0
   11e00:	ldr	r0, [r0, #16]
   11e04:	bl	12ca8 <__assert_fail@plt+0x17b8>
   11e08:	ldr	r0, [r4, #20]
   11e0c:	pop	{r4, sl, fp, lr}
   11e10:	b	12ca8 <__assert_fail@plt+0x17b8>
   11e14:	push	{r4, sl, fp, lr}
   11e18:	add	fp, sp, #8
   11e1c:	sub	sp, sp, #24
   11e20:	mov	r4, r0
   11e24:	bl	114d8 <getgrgid@plt>
   11e28:	cmp	r0, #0
   11e2c:	beq	11e38 <__assert_fail@plt+0x948>
   11e30:	ldr	r0, [r0]
   11e34:	b	11e48 <__assert_fail@plt+0x958>
   11e38:	add	r2, sp, #3
   11e3c:	mov	r0, r4
   11e40:	mov	r1, #0
   11e44:	bl	15d3c <__assert_fail@plt+0x484c>
   11e48:	bl	182b0 <__assert_fail@plt+0x6dc0>
   11e4c:	sub	sp, fp, #8
   11e50:	pop	{r4, sl, fp, pc}
   11e54:	push	{r4, sl, fp, lr}
   11e58:	add	fp, sp, #8
   11e5c:	sub	sp, sp, #24
   11e60:	mov	r4, r0
   11e64:	bl	11208 <getpwuid@plt>
   11e68:	cmp	r0, #0
   11e6c:	beq	11e78 <__assert_fail@plt+0x988>
   11e70:	ldr	r0, [r0]
   11e74:	b	11e88 <__assert_fail@plt+0x998>
   11e78:	add	r2, sp, #3
   11e7c:	mov	r0, r4
   11e80:	mov	r1, #0
   11e84:	bl	15d3c <__assert_fail@plt+0x484c>
   11e88:	bl	182b0 <__assert_fail@plt+0x6dc0>
   11e8c:	sub	sp, fp, #8
   11e90:	pop	{r4, sl, fp, pc}
   11e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e98:	add	fp, sp, #28
   11e9c:	sub	sp, sp, #268	; 0x10c
   11ea0:	str	r3, [sp, #32]
   11ea4:	str	r2, [sp, #40]	; 0x28
   11ea8:	ldr	r2, [fp, #8]
   11eac:	ldr	r3, [fp, #12]
   11eb0:	ldr	r5, [fp, #16]
   11eb4:	and	r3, r3, r2
   11eb8:	mov	r2, #0
   11ebc:	cmn	r3, #1
   11ec0:	str	r3, [sp, #44]	; 0x2c
   11ec4:	bne	11ee8 <__assert_fail@plt+0x9f8>
   11ec8:	ldrb	r3, [r5, #12]
   11ecc:	cmp	r3, #0
   11ed0:	bne	11ee8 <__assert_fail@plt+0x9f8>
   11ed4:	ldr	r2, [r5]
   11ed8:	sub	r2, r2, #2
   11edc:	clz	r2, r2
   11ee0:	lsr	r2, r2, #5
   11ee4:	lsl	r2, r2, #3
   11ee8:	orr	r1, r2, r1
   11eec:	mov	r2, #0
   11ef0:	bl	1832c <__assert_fail@plt+0x6e3c>
   11ef4:	str	r0, [sp, #52]	; 0x34
   11ef8:	bl	135a0 <__assert_fail@plt+0x20b0>
   11efc:	cmp	r0, #0
   11f00:	beq	12a78 <__assert_fail@plt+0x1588>
   11f04:	ldr	r1, [sp, #40]	; 0x28
   11f08:	mov	sl, r0
   11f0c:	movw	r0, #41148	; 0xa0bc
   11f10:	movw	r2, #41123	; 0xa0a3
   11f14:	mov	r8, #1
   11f18:	movt	r0, #1
   11f1c:	movt	r2, #1
   11f20:	cmn	r1, #1
   11f24:	moveq	r2, r0
   11f28:	sub	r0, fp, #136	; 0x88
   11f2c:	add	r0, r0, #96	; 0x60
   11f30:	str	r2, [sp, #12]
   11f34:	str	r0, [sp, #8]
   11f38:	ldrh	r0, [sl, #56]	; 0x38
   11f3c:	ldr	r4, [sl, #24]
   11f40:	ldr	r7, [sl, #28]
   11f44:	add	r9, sl, #64	; 0x40
   11f48:	sub	r0, r0, #1
   11f4c:	cmp	r0, #9
   11f50:	bhi	12148 <__assert_fail@plt+0xc58>
   11f54:	add	r1, pc, #0
   11f58:	ldr	pc, [r1, r0, lsl #2]
   11f5c:	andeq	r1, r1, r4, lsl #31
   11f60:	andeq	r2, r1, r4, ror #1
   11f64:	andeq	r2, r1, r8, asr #2
   11f68:	andeq	r2, r1, r4, asr #32
   11f6c:	andeq	r2, r1, r8, asr #2
   11f70:	andeq	r2, r1, ip, lsr r1
   11f74:	andeq	r2, r1, r8, asr #4
   11f78:	andeq	r2, r1, r8, asr #2
   11f7c:	andeq	r2, r1, r8, asr #2
   11f80:	andeq	r2, r1, r4, ror r0
   11f84:	ldrb	r0, [r5, #4]
   11f88:	cmp	r0, #0
   11f8c:	beq	12148 <__assert_fail@plt+0xc58>
   11f90:	ldr	r0, [r5, #8]
   11f94:	mov	r4, #1
   11f98:	cmp	r0, #0
   11f9c:	beq	12a30 <__assert_fail@plt+0x1540>
   11fa0:	add	r1, sl, #160	; 0xa0
   11fa4:	ldrd	r2, [r0]
   11fa8:	ldrd	r4, [r1]
   11fac:	eor	r1, r5, r3
   11fb0:	eor	r2, r4, r2
   11fb4:	orrs	r1, r2, r1
   11fb8:	bne	122c0 <__assert_fail@plt+0xdd0>
   11fbc:	ldrd	r0, [r0, #8]
   11fc0:	ldrd	r2, [r9]
   11fc4:	ldr	r5, [fp, #16]
   11fc8:	mov	r4, #1
   11fcc:	eor	r1, r3, r1
   11fd0:	eor	r0, r2, r0
   11fd4:	orrs	r0, r0, r1
   11fd8:	bne	12a30 <__assert_fail@plt+0x1540>
   11fdc:	movw	r6, #42823	; 0xa747
   11fe0:	mov	r0, r7
   11fe4:	movt	r6, #1
   11fe8:	mov	r1, r6
   11fec:	bl	111fc <strcmp@plt>
   11ff0:	cmp	r0, #0
   11ff4:	beq	12910 <__assert_fail@plt+0x1420>
   11ff8:	movw	r1, #40766	; 0x9f3e
   11ffc:	mov	r0, #0
   12000:	mov	r2, #5
   12004:	movt	r1, #1
   12008:	bl	11268 <dcgettext@plt>
   1200c:	mov	r4, r0
   12010:	mov	r0, #0
   12014:	mov	r1, #4
   12018:	mov	r2, r7
   1201c:	bl	1743c <__assert_fail@plt+0x5f4c>
   12020:	mov	r5, r0
   12024:	mov	r0, #1
   12028:	mov	r1, #4
   1202c:	mov	r2, r6
   12030:	bl	1743c <__assert_fail@plt+0x5f4c>
   12034:	mov	r3, r5
   12038:	ldr	r5, [fp, #16]
   1203c:	str	r0, [sp]
   12040:	b	12938 <__assert_fail@plt+0x1448>
   12044:	ldrb	r0, [r5, #13]
   12048:	mov	r9, #0
   1204c:	mov	r6, #1
   12050:	str	r7, [sp, #48]	; 0x30
   12054:	cmp	r0, #0
   12058:	bne	12290 <__assert_fail@plt+0xda0>
   1205c:	ldr	r4, [sl, #32]
   12060:	movw	r1, #40890	; 0x9fba
   12064:	mov	r9, #0
   12068:	mov	r0, #0
   1206c:	movt	r1, #1
   12070:	b	120b8 <__assert_fail@plt+0xbc8>
   12074:	ldr	r0, [sl, #48]	; 0x30
   12078:	cmp	r0, #0
   1207c:	bne	1208c <__assert_fail@plt+0xb9c>
   12080:	ldr	r0, [sl, #16]
   12084:	cmp	r0, #0
   12088:	beq	12440 <__assert_fail@plt+0xf50>
   1208c:	ldrb	r0, [r5, #13]
   12090:	mov	r9, #0
   12094:	mov	r6, #1
   12098:	str	r7, [sp, #48]	; 0x30
   1209c:	cmp	r0, #0
   120a0:	bne	12290 <__assert_fail@plt+0xda0>
   120a4:	ldr	r4, [sl, #32]
   120a8:	movw	r1, #40873	; 0x9fa9
   120ac:	mov	r9, #0
   120b0:	mov	r0, #0
   120b4:	movt	r1, #1
   120b8:	mov	r2, #5
   120bc:	bl	11268 <dcgettext@plt>
   120c0:	mov	r5, r0
   120c4:	mov	r0, #4
   120c8:	mov	r1, r7
   120cc:	bl	174e4 <__assert_fail@plt+0x5ff4>
   120d0:	mov	r3, r0
   120d4:	mov	r0, #0
   120d8:	mov	r1, r4
   120dc:	mov	r2, r5
   120e0:	b	1228c <__assert_fail@plt+0xd9c>
   120e4:	ldr	r0, [sp, #52]	; 0x34
   120e8:	mov	r1, sl
   120ec:	bl	18378 <__assert_fail@plt+0x6e88>
   120f0:	cmp	r0, #0
   120f4:	beq	12148 <__assert_fail@plt+0xc58>
   120f8:	movw	r1, #40915	; 0x9fd3
   120fc:	mov	r0, #0
   12100:	mov	r2, #5
   12104:	movt	r1, #1
   12108:	bl	11268 <dcgettext@plt>
   1210c:	mov	r4, r0
   12110:	mov	r0, #0
   12114:	mov	r1, #3
   12118:	mov	r2, r7
   1211c:	bl	17688 <__assert_fail@plt+0x6198>
   12120:	mov	r3, r0
   12124:	mov	r2, r4
   12128:	mov	r0, #0
   1212c:	mov	r1, #0
   12130:	mov	r4, #0
   12134:	bl	112ec <error@plt>
   12138:	b	12a30 <__assert_fail@plt+0x1540>
   1213c:	ldrb	r0, [r5, #4]
   12140:	cmp	r0, #0
   12144:	beq	122c4 <__assert_fail@plt+0xdd4>
   12148:	ldr	r0, [sp, #44]	; 0x2c
   1214c:	cmn	r0, #1
   12150:	bne	1216c <__assert_fail@plt+0xc7c>
   12154:	ldr	r0, [r5]
   12158:	cmp	r0, #2
   1215c:	bne	1216c <__assert_fail@plt+0xc7c>
   12160:	ldr	r0, [r5, #8]
   12164:	cmp	r0, #0
   12168:	beq	122cc <__assert_fail@plt+0xddc>
   1216c:	ldrb	r0, [r5, #12]
   12170:	cmp	r0, #0
   12174:	beq	12214 <__assert_fail@plt+0xd24>
   12178:	ldr	r0, [sl, #80]	; 0x50
   1217c:	and	r0, r0, #61440	; 0xf000
   12180:	cmp	r0, #40960	; 0xa000
   12184:	bne	12214 <__assert_fail@plt+0xd24>
   12188:	ldr	r0, [sp, #52]	; 0x34
   1218c:	add	r9, sp, #56	; 0x38
   12190:	mov	r1, r4
   12194:	mov	r3, #0
   12198:	mov	r2, r9
   1219c:	ldr	r0, [r0, #32]
   121a0:	bl	19458 <__assert_fail@plt+0x7f68>
   121a4:	cmp	r0, #0
   121a8:	beq	12214 <__assert_fail@plt+0xd24>
   121ac:	ldrb	r0, [r5, #13]
   121b0:	mov	r4, #0
   121b4:	mov	r6, #1
   121b8:	str	r7, [sp, #48]	; 0x30
   121bc:	cmp	r0, #0
   121c0:	bne	12208 <__assert_fail@plt+0xd18>
   121c4:	bl	11394 <__errno_location@plt>
   121c8:	movw	r1, #41101	; 0xa08d
   121cc:	ldr	r4, [r0]
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	movt	r1, #1
   121dc:	bl	11268 <dcgettext@plt>
   121e0:	ldr	r1, [sp, #48]	; 0x30
   121e4:	mov	r5, r0
   121e8:	mov	r0, #4
   121ec:	bl	174e4 <__assert_fail@plt+0x5ff4>
   121f0:	mov	r3, r0
   121f4:	mov	r1, r4
   121f8:	mov	r0, #0
   121fc:	mov	r2, r5
   12200:	mov	r4, #0
   12204:	bl	112ec <error@plt>
   12208:	add	r9, sp, #56	; 0x38
   1220c:	mov	r5, #1
   12210:	b	12610 <__assert_fail@plt+0x1120>
   12214:	ldr	r2, [fp, #8]
   12218:	cmn	r2, #1
   1221c:	beq	1229c <__assert_fail@plt+0xdac>
   12220:	ldr	r1, [r9, #24]
   12224:	ldr	r3, [fp, #12]
   12228:	sub	r0, r1, r2
   1222c:	cmn	r3, #1
   12230:	clz	r0, r0
   12234:	lsr	r0, r0, #5
   12238:	beq	122e0 <__assert_fail@plt+0xdf0>
   1223c:	cmp	r1, r2
   12240:	beq	122a8 <__assert_fail@plt+0xdb8>
   12244:	b	122e0 <__assert_fail@plt+0xdf0>
   12248:	ldrb	r0, [r5, #13]
   1224c:	mov	r9, #0
   12250:	mov	r6, #1
   12254:	str	r7, [sp, #48]	; 0x30
   12258:	cmp	r0, #0
   1225c:	bne	12290 <__assert_fail@plt+0xda0>
   12260:	ldr	r4, [sl, #32]
   12264:	mov	r0, #0
   12268:	mov	r1, #3
   1226c:	mov	r2, r7
   12270:	mov	r9, #0
   12274:	bl	17688 <__assert_fail@plt+0x6198>
   12278:	movw	r2, #40419	; 0x9de3
   1227c:	mov	r3, r0
   12280:	mov	r0, #0
   12284:	mov	r1, r4
   12288:	movt	r2, #1
   1228c:	bl	112ec <error@plt>
   12290:	mov	r5, #1
   12294:	mov	r4, #0
   12298:	b	12610 <__assert_fail@plt+0x1120>
   1229c:	ldr	r0, [fp, #12]
   122a0:	cmn	r0, #1
   122a4:	beq	122dc <__assert_fail@plt+0xdec>
   122a8:	ldr	r0, [r9, #28]
   122ac:	ldr	r1, [fp, #12]
   122b0:	sub	r0, r0, r1
   122b4:	clz	r0, r0
   122b8:	lsr	r0, r0, #5
   122bc:	b	122e0 <__assert_fail@plt+0xdf0>
   122c0:	ldr	r5, [fp, #16]
   122c4:	mov	r4, #1
   122c8:	b	12a30 <__assert_fail@plt+0x1540>
   122cc:	ldrb	r0, [r5, #12]
   122d0:	add	r9, sl, #64	; 0x40
   122d4:	cmp	r0, #0
   122d8:	bne	12178 <__assert_fail@plt+0xc88>
   122dc:	mov	r0, #1
   122e0:	ldrh	r1, [sl, #56]	; 0x38
   122e4:	cmp	r1, #6
   122e8:	bhi	12304 <__assert_fail@plt+0xe14>
   122ec:	mov	r2, #1
   122f0:	mov	r3, #86	; 0x56
   122f4:	tst	r3, r2, lsl r1
   122f8:	ldrne	r1, [r5, #8]
   122fc:	cmpne	r1, #0
   12300:	bne	1235c <__assert_fail@plt+0xe6c>
   12304:	cmp	r0, #0
   12308:	str	r7, [sp, #48]	; 0x30
   1230c:	beq	12350 <__assert_fail@plt+0xe60>
   12310:	ldr	r0, [sp, #52]	; 0x34
   12314:	ldr	r6, [r0, #32]
   12318:	ldrb	r0, [r5, #12]
   1231c:	cmp	r0, #0
   12320:	beq	12400 <__assert_fail@plt+0xf10>
   12324:	ldr	r0, [sp, #44]	; 0x2c
   12328:	cmn	r0, #1
   1232c:	beq	124f8 <__assert_fail@plt+0x1008>
   12330:	ldr	r0, [r9, #16]
   12334:	and	r0, r0, #61440	; 0xf000
   12338:	cmp	r0, #32768	; 0x8000
   1233c:	beq	12458 <__assert_fail@plt+0xf68>
   12340:	cmp	r0, #16384	; 0x4000
   12344:	bne	124f8 <__assert_fail@plt+0x1008>
   12348:	mov	r5, #18688	; 0x4900
   1234c:	b	1245c <__assert_fail@plt+0xf6c>
   12350:	mov	r6, #1
   12354:	mov	r5, #1
   12358:	b	1260c <__assert_fail@plt+0x111c>
   1235c:	ldrd	r2, [r1]
   12360:	ldr	r5, [r9, #100]	; 0x64
   12364:	ldr	r6, [r9, #96]	; 0x60
   12368:	eor	r3, r5, r3
   1236c:	ldr	r5, [fp, #16]
   12370:	eor	r2, r6, r2
   12374:	orrs	r2, r2, r3
   12378:	bne	12304 <__assert_fail@plt+0xe14>
   1237c:	ldrd	r2, [r1, #8]
   12380:	ldr	r1, [r9, #4]
   12384:	ldr	r6, [r9]
   12388:	eor	r1, r1, r3
   1238c:	eor	r2, r6, r2
   12390:	orrs	r1, r2, r1
   12394:	bne	12304 <__assert_fail@plt+0xe14>
   12398:	movw	r6, #42823	; 0xa747
   1239c:	mov	r0, r7
   123a0:	movt	r6, #1
   123a4:	mov	r1, r6
   123a8:	bl	111fc <strcmp@plt>
   123ac:	cmp	r0, #0
   123b0:	beq	1286c <__assert_fail@plt+0x137c>
   123b4:	movw	r1, #40766	; 0x9f3e
   123b8:	mov	r0, #0
   123bc:	mov	r2, #5
   123c0:	movt	r1, #1
   123c4:	bl	11268 <dcgettext@plt>
   123c8:	mov	r4, r0
   123cc:	mov	r0, #0
   123d0:	mov	r1, #4
   123d4:	mov	r2, r7
   123d8:	bl	1743c <__assert_fail@plt+0x5f4c>
   123dc:	mov	r5, r0
   123e0:	mov	r0, #1
   123e4:	mov	r1, #4
   123e8:	mov	r2, r6
   123ec:	bl	1743c <__assert_fail@plt+0x5f4c>
   123f0:	mov	r3, r5
   123f4:	ldr	r5, [fp, #16]
   123f8:	str	r0, [sp]
   123fc:	b	12894 <__assert_fail@plt+0x13a4>
   12400:	ldr	r2, [sp, #40]	; 0x28
   12404:	ldr	r3, [sp, #32]
   12408:	mov	r0, #256	; 0x100
   1240c:	mov	r1, r4
   12410:	str	r0, [sp]
   12414:	mov	r0, r6
   12418:	bl	1146c <fchownat@plt>
   1241c:	cmp	r0, #0
   12420:	beq	12604 <__assert_fail@plt+0x1114>
   12424:	bl	11394 <__errno_location@plt>
   12428:	ldr	r0, [r0]
   1242c:	mov	r6, #0
   12430:	cmp	r0, #95	; 0x5f
   12434:	bne	12520 <__assert_fail@plt+0x1030>
   12438:	mov	r5, #0
   1243c:	b	1260c <__assert_fail@plt+0x111c>
   12440:	ldr	r0, [sp, #52]	; 0x34
   12444:	mov	r4, #1
   12448:	mov	r1, sl
   1244c:	mov	r2, #1
   12450:	str	r4, [sl, #16]
   12454:	b	12a2c <__assert_fail@plt+0x153c>
   12458:	mov	r5, #2304	; 0x900
   1245c:	mov	r0, r6
   12460:	mov	r1, r4
   12464:	mov	r2, r5
   12468:	bl	1137c <openat64@plt>
   1246c:	mov	r7, r0
   12470:	cmn	r0, #1
   12474:	ble	124a8 <__assert_fail@plt+0xfb8>
   12478:	mov	r0, r7
   1247c:	sub	r1, fp, #136	; 0x88
   12480:	bl	19438 <__assert_fail@plt+0x7f48>
   12484:	cmp	r0, #0
   12488:	beq	1257c <__assert_fail@plt+0x108c>
   1248c:	bl	11394 <__errno_location@plt>
   12490:	ldr	r5, [r0]
   12494:	mov	r4, r0
   12498:	mov	r0, r7
   1249c:	bl	114b4 <close@plt>
   124a0:	str	r5, [r4]
   124a4:	b	12520 <__assert_fail@plt+0x1030>
   124a8:	bl	11394 <__errno_location@plt>
   124ac:	ldr	r1, [r0]
   124b0:	cmp	r1, #13
   124b4:	bne	12520 <__assert_fail@plt+0x1030>
   124b8:	ldr	r1, [r9, #16]
   124bc:	and	r1, r1, #61440	; 0xf000
   124c0:	cmp	r1, #32768	; 0x8000
   124c4:	bne	124f8 <__assert_fail@plt+0x1008>
   124c8:	str	r0, [sp, #36]	; 0x24
   124cc:	orr	r2, r5, #1
   124d0:	mov	r0, r6
   124d4:	mov	r1, r4
   124d8:	bl	1137c <openat64@plt>
   124dc:	mov	r7, r0
   124e0:	cmn	r0, #1
   124e4:	bgt	12478 <__assert_fail@plt+0xf88>
   124e8:	ldr	r0, [sp, #36]	; 0x24
   124ec:	ldr	r0, [r0]
   124f0:	cmp	r0, #13
   124f4:	bne	12520 <__assert_fail@plt+0x1030>
   124f8:	ldr	r0, [sp, #52]	; 0x34
   124fc:	ldr	r2, [sp, #40]	; 0x28
   12500:	ldr	r3, [sp, #32]
   12504:	mov	r5, #0
   12508:	mov	r1, r4
   1250c:	str	r5, [sp]
   12510:	ldr	r0, [r0, #32]
   12514:	bl	1146c <fchownat@plt>
   12518:	cmp	r0, #0
   1251c:	beq	12608 <__assert_fail@plt+0x1118>
   12520:	ldr	r0, [fp, #16]
   12524:	mov	r5, #0
   12528:	ldrb	r0, [r0, #13]
   1252c:	cmp	r0, #0
   12530:	bne	12574 <__assert_fail@plt+0x1084>
   12534:	bl	11394 <__errno_location@plt>
   12538:	ldr	r1, [sp, #12]
   1253c:	ldr	r4, [r0]
   12540:	mov	r0, #0
   12544:	mov	r2, #5
   12548:	mov	r5, #0
   1254c:	bl	11268 <dcgettext@plt>
   12550:	ldr	r1, [sp, #48]	; 0x30
   12554:	mov	r6, r0
   12558:	mov	r0, #4
   1255c:	bl	174e4 <__assert_fail@plt+0x5ff4>
   12560:	mov	r3, r0
   12564:	mov	r0, #0
   12568:	mov	r1, r4
   1256c:	mov	r2, r6
   12570:	bl	112ec <error@plt>
   12574:	mov	r6, #1
   12578:	b	12294 <__assert_fail@plt+0xda4>
   1257c:	ldr	r0, [sp, #8]
   12580:	ldrd	r2, [r9, #96]	; 0x60
   12584:	ldrd	r0, [r0]
   12588:	eor	r1, r3, r1
   1258c:	eor	r0, r2, r0
   12590:	orrs	r0, r0, r1
   12594:	bne	128ec <__assert_fail@plt+0x13fc>
   12598:	ldrd	r0, [r9]
   1259c:	ldr	r2, [fp, #-136]	; 0xffffff78
   125a0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   125a4:	eor	r1, r1, r3
   125a8:	eor	r0, r0, r2
   125ac:	orrs	r0, r0, r1
   125b0:	bne	128ec <__assert_fail@plt+0x13fc>
   125b4:	ldr	r0, [fp, #8]
   125b8:	cmn	r0, #1
   125bc:	beq	125d0 <__assert_fail@plt+0x10e0>
   125c0:	ldr	r0, [fp, #-112]	; 0xffffff90
   125c4:	ldr	r1, [fp, #8]
   125c8:	cmp	r0, r1
   125cc:	bne	125ec <__assert_fail@plt+0x10fc>
   125d0:	ldr	r0, [fp, #12]
   125d4:	cmn	r0, #1
   125d8:	beq	12a4c <__assert_fail@plt+0x155c>
   125dc:	ldr	r0, [fp, #-108]	; 0xffffff94
   125e0:	ldr	r1, [fp, #12]
   125e4:	cmp	r0, r1
   125e8:	beq	12a4c <__assert_fail@plt+0x155c>
   125ec:	bl	11394 <__errno_location@plt>
   125f0:	ldr	r5, [r0]
   125f4:	mov	r4, r0
   125f8:	mov	r0, r7
   125fc:	bl	114b4 <close@plt>
   12600:	str	r5, [r4]
   12604:	mov	r5, #0
   12608:	mov	r6, #1
   1260c:	mov	r4, #1
   12610:	ldr	r0, [fp, #16]
   12614:	ldr	r1, [r0]
   12618:	cmp	r1, #2
   1261c:	beq	12a10 <__assert_fail@plt+0x1520>
   12620:	eor	r0, r4, #1
   12624:	orrs	r0, r5, r0
   12628:	eorseq	r0, r6, #1
   1262c:	beq	12660 <__assert_fail@plt+0x1170>
   12630:	cmp	r1, #0
   12634:	bne	12a10 <__assert_fail@plt+0x1520>
   12638:	cmp	r6, #0
   1263c:	mov	r5, #1
   12640:	mov	r0, #3
   12644:	movwne	r5, #4
   12648:	cmp	r4, #0
   1264c:	moveq	r5, r0
   12650:	cmp	r9, #0
   12654:	beq	126cc <__assert_fail@plt+0x11dc>
   12658:	ldr	r0, [r9, #24]
   1265c:	b	126b4 <__assert_fail@plt+0x11c4>
   12660:	ldr	r0, [sp, #40]	; 0x28
   12664:	cmn	r0, #1
   12668:	beq	1267c <__assert_fail@plt+0x118c>
   1266c:	ldr	r0, [r9, #24]
   12670:	ldr	r2, [sp, #40]	; 0x28
   12674:	cmp	r0, r2
   12678:	bne	1269c <__assert_fail@plt+0x11ac>
   1267c:	ldr	r0, [sp, #32]
   12680:	cmn	r0, #1
   12684:	beq	12630 <__assert_fail@plt+0x1140>
   12688:	ldr	r0, [r9, #28]
   1268c:	ldr	r2, [sp, #32]
   12690:	cmp	r0, r2
   12694:	beq	12630 <__assert_fail@plt+0x1140>
   12698:	ldr	r0, [r9, #24]
   1269c:	cmp	r6, #0
   126a0:	mov	r5, #1
   126a4:	mov	r1, #3
   126a8:	movwne	r5, #2
   126ac:	cmp	r4, #0
   126b0:	moveq	r5, r1
   126b4:	bl	11e54 <__assert_fail@plt+0x964>
   126b8:	mov	r6, r0
   126bc:	ldr	r0, [r9, #28]
   126c0:	bl	11e14 <__assert_fail@plt+0x924>
   126c4:	mov	r7, r0
   126c8:	b	126d4 <__assert_fail@plt+0x11e4>
   126cc:	mov	r6, #0
   126d0:	mov	r7, #0
   126d4:	cmp	r5, #1
   126d8:	str	r4, [sp, #36]	; 0x24
   126dc:	bne	1271c <__assert_fail@plt+0x122c>
   126e0:	movw	r1, #41169	; 0xa0d1
   126e4:	mov	r0, #0
   126e8:	mov	r2, #5
   126ec:	movt	r1, #1
   126f0:	bl	11268 <dcgettext@plt>
   126f4:	ldr	r1, [sp, #48]	; 0x30
   126f8:	mov	r4, r0
   126fc:	mov	r0, #4
   12700:	bl	174e4 <__assert_fail@plt+0x5ff4>
   12704:	mov	r2, r0
   12708:	mov	r0, #1
   1270c:	mov	r1, r4
   12710:	bl	113b8 <__printf_chk@plt>
   12714:	ldr	r4, [sp, #36]	; 0x24
   12718:	b	12a00 <__assert_fail@plt+0x1510>
   1271c:	ldr	r0, [fp, #16]
   12720:	ldr	r9, [r0, #20]
   12724:	ldr	r4, [r0, #16]
   12728:	mov	r0, r4
   1272c:	mov	r1, r9
   12730:	bl	12b18 <__assert_fail@plt+0x1628>
   12734:	cmp	r4, #0
   12738:	str	r0, [sp, #16]
   1273c:	mov	r0, r4
   12740:	mov	r1, r9
   12744:	str	r6, [sp, #24]
   12748:	str	r7, [sp, #20]
   1274c:	movne	r0, r6
   12750:	cmp	r9, #0
   12754:	movne	r1, r7
   12758:	bl	12b18 <__assert_fail@plt+0x1628>
   1275c:	cmp	r5, #4
   12760:	beq	127b4 <__assert_fail@plt+0x12c4>
   12764:	cmp	r5, #3
   12768:	beq	12790 <__assert_fail@plt+0x12a0>
   1276c:	cmp	r5, #2
   12770:	bne	12b14 <__assert_fail@plt+0x1624>
   12774:	cmp	r4, #0
   12778:	str	r0, [sp, #28]
   1277c:	beq	127dc <__assert_fail@plt+0x12ec>
   12780:	movw	r1, #41225	; 0xa109
   12784:	mov	r0, #0
   12788:	movt	r1, #1
   1278c:	b	127cc <__assert_fail@plt+0x12dc>
   12790:	cmp	r0, #0
   12794:	beq	127f8 <__assert_fail@plt+0x1308>
   12798:	cmp	r4, #0
   1279c:	str	r0, [sp, #28]
   127a0:	beq	128d0 <__assert_fail@plt+0x13e0>
   127a4:	movw	r1, #41329	; 0xa171
   127a8:	mov	r0, #0
   127ac:	movt	r1, #1
   127b0:	b	127cc <__assert_fail@plt+0x12dc>
   127b4:	cmp	r4, #0
   127b8:	str	r0, [sp, #28]
   127bc:	beq	12850 <__assert_fail@plt+0x1360>
   127c0:	movw	r1, #41531	; 0xa23b
   127c4:	mov	r0, #0
   127c8:	movt	r1, #1
   127cc:	mov	r2, #5
   127d0:	bl	11268 <dcgettext@plt>
   127d4:	ldr	r4, [sp, #36]	; 0x24
   127d8:	b	129b8 <__assert_fail@plt+0x14c8>
   127dc:	ldr	r4, [sp, #36]	; 0x24
   127e0:	cmp	r9, #0
   127e4:	mov	r0, #0
   127e8:	beq	12990 <__assert_fail@plt+0x14a0>
   127ec:	movw	r1, #41264	; 0xa130
   127f0:	movt	r1, #1
   127f4:	b	129b0 <__assert_fail@plt+0x14c0>
   127f8:	movw	r0, #41495	; 0xa217
   127fc:	movw	r1, #41421	; 0xa1cd
   12800:	cmp	r9, #0
   12804:	mov	r2, #5
   12808:	movt	r0, #1
   1280c:	movt	r1, #1
   12810:	movne	r1, r0
   12814:	movw	r0, #41455	; 0xa1ef
   12818:	cmp	r4, #0
   1281c:	movt	r0, #1
   12820:	movne	r1, r0
   12824:	mov	r0, #0
   12828:	bl	11268 <dcgettext@plt>
   1282c:	mov	r6, r0
   12830:	mov	r0, #0
   12834:	bl	12ca8 <__assert_fail@plt+0x17b8>
   12838:	ldr	r0, [sp, #16]
   1283c:	ldr	r4, [sp, #36]	; 0x24
   12840:	ldr	r7, [sp, #20]
   12844:	mov	r5, #0
   12848:	str	r0, [sp, #28]
   1284c:	b	129c4 <__assert_fail@plt+0x14d4>
   12850:	ldr	r4, [sp, #36]	; 0x24
   12854:	cmp	r9, #0
   12858:	mov	r0, #0
   1285c:	beq	1299c <__assert_fail@plt+0x14ac>
   12860:	movw	r1, #41563	; 0xa25b
   12864:	movt	r1, #1
   12868:	b	129b0 <__assert_fail@plt+0x14c0>
   1286c:	movw	r1, #40721	; 0x9f11
   12870:	mov	r0, #0
   12874:	mov	r2, #5
   12878:	movt	r1, #1
   1287c:	bl	11268 <dcgettext@plt>
   12880:	mov	r4, r0
   12884:	mov	r0, #4
   12888:	mov	r1, r7
   1288c:	bl	174e4 <__assert_fail@plt+0x5ff4>
   12890:	mov	r3, r0
   12894:	mov	r0, #0
   12898:	mov	r1, #0
   1289c:	mov	r2, r4
   128a0:	bl	112ec <error@plt>
   128a4:	movw	r1, #40824	; 0x9f78
   128a8:	mov	r0, #0
   128ac:	mov	r2, #5
   128b0:	mov	r4, #0
   128b4:	movt	r1, #1
   128b8:	bl	11268 <dcgettext@plt>
   128bc:	mov	r2, r0
   128c0:	mov	r0, #0
   128c4:	mov	r1, #0
   128c8:	bl	112ec <error@plt>
   128cc:	b	12a30 <__assert_fail@plt+0x1540>
   128d0:	ldr	r4, [sp, #36]	; 0x24
   128d4:	cmp	r9, #0
   128d8:	mov	r0, #0
   128dc:	beq	129a8 <__assert_fail@plt+0x14b8>
   128e0:	movw	r1, #41377	; 0xa1a1
   128e4:	movt	r1, #1
   128e8:	b	129b0 <__assert_fail@plt+0x14c0>
   128ec:	bl	11394 <__errno_location@plt>
   128f0:	ldr	r5, [r0]
   128f4:	mov	r4, r0
   128f8:	mov	r0, r7
   128fc:	bl	114b4 <close@plt>
   12900:	str	r5, [r4]
   12904:	mov	r4, #0
   12908:	mov	r6, #1
   1290c:	b	1220c <__assert_fail@plt+0xd1c>
   12910:	movw	r1, #40721	; 0x9f11
   12914:	mov	r0, #0
   12918:	mov	r2, #5
   1291c:	movt	r1, #1
   12920:	bl	11268 <dcgettext@plt>
   12924:	mov	r4, r0
   12928:	mov	r0, #4
   1292c:	mov	r1, r7
   12930:	bl	174e4 <__assert_fail@plt+0x5ff4>
   12934:	mov	r3, r0
   12938:	mov	r0, #0
   1293c:	mov	r1, #0
   12940:	mov	r2, r4
   12944:	bl	112ec <error@plt>
   12948:	movw	r1, #40824	; 0x9f78
   1294c:	mov	r0, #0
   12950:	mov	r2, #5
   12954:	movt	r1, #1
   12958:	bl	11268 <dcgettext@plt>
   1295c:	mov	r2, r0
   12960:	mov	r0, #0
   12964:	mov	r1, #0
   12968:	bl	112ec <error@plt>
   1296c:	ldr	r4, [sp, #52]	; 0x34
   12970:	mov	r1, sl
   12974:	mov	r2, #4
   12978:	mov	r0, r4
   1297c:	bl	14978 <__assert_fail@plt+0x3488>
   12980:	mov	r0, r4
   12984:	mov	r4, #0
   12988:	bl	135a0 <__assert_fail@plt+0x20b0>
   1298c:	b	12a30 <__assert_fail@plt+0x1540>
   12990:	movw	r1, #41299	; 0xa153
   12994:	movt	r1, #1
   12998:	b	129b0 <__assert_fail@plt+0x14c0>
   1299c:	movw	r1, #41591	; 0xa277
   129a0:	movt	r1, #1
   129a4:	b	129b0 <__assert_fail@plt+0x14c0>
   129a8:	movw	r1, #41421	; 0xa1cd
   129ac:	movt	r1, #1
   129b0:	mov	r2, #5
   129b4:	bl	11268 <dcgettext@plt>
   129b8:	mov	r6, r0
   129bc:	ldr	r7, [sp, #20]
   129c0:	ldr	r5, [sp, #16]
   129c4:	ldr	r1, [sp, #48]	; 0x30
   129c8:	mov	r0, #4
   129cc:	bl	174e4 <__assert_fail@plt+0x5ff4>
   129d0:	mov	r1, r6
   129d4:	ldr	r6, [sp, #28]
   129d8:	mov	r2, r0
   129dc:	mov	r0, #1
   129e0:	str	r5, [sp]
   129e4:	mov	r3, r6
   129e8:	bl	113b8 <__printf_chk@plt>
   129ec:	mov	r0, r6
   129f0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   129f4:	mov	r0, r5
   129f8:	bl	12ca8 <__assert_fail@plt+0x17b8>
   129fc:	ldr	r6, [sp, #24]
   12a00:	mov	r0, r6
   12a04:	bl	12ca8 <__assert_fail@plt+0x17b8>
   12a08:	mov	r0, r7
   12a0c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   12a10:	ldr	r5, [fp, #16]
   12a14:	ldrb	r0, [r5, #4]
   12a18:	cmp	r0, #0
   12a1c:	bne	12a30 <__assert_fail@plt+0x1540>
   12a20:	ldr	r0, [sp, #52]	; 0x34
   12a24:	mov	r1, sl
   12a28:	mov	r2, #4
   12a2c:	bl	14978 <__assert_fail@plt+0x3488>
   12a30:	ldr	r0, [sp, #52]	; 0x34
   12a34:	and	r8, r8, r4
   12a38:	bl	135a0 <__assert_fail@plt+0x20b0>
   12a3c:	mov	sl, r0
   12a40:	cmp	r0, #0
   12a44:	bne	11f38 <__assert_fail@plt+0xa48>
   12a48:	b	12a7c <__assert_fail@plt+0x158c>
   12a4c:	ldr	r1, [sp, #40]	; 0x28
   12a50:	ldr	r2, [sp, #32]
   12a54:	mov	r0, r7
   12a58:	bl	11388 <fchown@plt>
   12a5c:	cmp	r0, #0
   12a60:	bne	1248c <__assert_fail@plt+0xf9c>
   12a64:	mov	r0, r7
   12a68:	bl	114b4 <close@plt>
   12a6c:	cmp	r0, #0
   12a70:	bne	12520 <__assert_fail@plt+0x1030>
   12a74:	b	12604 <__assert_fail@plt+0x1114>
   12a78:	mov	r8, #1
   12a7c:	bl	11394 <__errno_location@plt>
   12a80:	ldr	r4, [r0]
   12a84:	mov	r5, r0
   12a88:	cmp	r4, #0
   12a8c:	beq	12acc <__assert_fail@plt+0x15dc>
   12a90:	ldr	r0, [fp, #16]
   12a94:	mov	r8, #0
   12a98:	ldrb	r0, [r0, #13]
   12a9c:	cmp	r0, #0
   12aa0:	bne	12acc <__assert_fail@plt+0x15dc>
   12aa4:	movw	r1, #40688	; 0x9ef0
   12aa8:	mov	r0, #0
   12aac:	mov	r2, #5
   12ab0:	mov	r8, #0
   12ab4:	movt	r1, #1
   12ab8:	bl	11268 <dcgettext@plt>
   12abc:	mov	r2, r0
   12ac0:	mov	r0, #0
   12ac4:	mov	r1, r4
   12ac8:	bl	112ec <error@plt>
   12acc:	ldr	r0, [sp, #52]	; 0x34
   12ad0:	bl	13418 <__assert_fail@plt+0x1f28>
   12ad4:	cmp	r0, #0
   12ad8:	beq	12b08 <__assert_fail@plt+0x1618>
   12adc:	movw	r1, #40704	; 0x9f00
   12ae0:	ldr	r4, [r5]
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	mov	r8, #0
   12af0:	movt	r1, #1
   12af4:	bl	11268 <dcgettext@plt>
   12af8:	mov	r2, r0
   12afc:	mov	r0, #0
   12b00:	mov	r1, r4
   12b04:	bl	112ec <error@plt>
   12b08:	mov	r0, r8
   12b0c:	sub	sp, fp, #28
   12b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b14:	bl	114a8 <abort@plt>
   12b18:	push	{r4, r5, r6, sl, fp, lr}
   12b1c:	add	fp, sp, #16
   12b20:	mov	r4, r1
   12b24:	cmp	r0, #0
   12b28:	beq	12b78 <__assert_fail@plt+0x1688>
   12b2c:	mov	r5, r0
   12b30:	cmp	r4, #0
   12b34:	beq	12b88 <__assert_fail@plt+0x1698>
   12b38:	mov	r0, r5
   12b3c:	bl	11364 <strlen@plt>
   12b40:	mov	r6, r0
   12b44:	mov	r0, r4
   12b48:	bl	11364 <strlen@plt>
   12b4c:	add	r0, r6, r0
   12b50:	add	r0, r0, #2
   12b54:	bl	17ebc <__assert_fail@plt+0x69cc>
   12b58:	mov	r1, r5
   12b5c:	mov	r6, r0
   12b60:	bl	1125c <stpcpy@plt>
   12b64:	mov	r1, #58	; 0x3a
   12b68:	strh	r1, [r0], #1
   12b6c:	mov	r1, r4
   12b70:	bl	1125c <stpcpy@plt>
   12b74:	b	12b98 <__assert_fail@plt+0x16a8>
   12b78:	cmp	r4, #0
   12b7c:	beq	12b94 <__assert_fail@plt+0x16a4>
   12b80:	mov	r0, r4
   12b84:	b	12b8c <__assert_fail@plt+0x169c>
   12b88:	mov	r0, r5
   12b8c:	pop	{r4, r5, r6, sl, fp, lr}
   12b90:	b	182b0 <__assert_fail@plt+0x6dc0>
   12b94:	mov	r6, #0
   12b98:	mov	r0, r6
   12b9c:	pop	{r4, r5, r6, sl, fp, pc}
   12ba0:	movw	r1, #45488	; 0xb1b0
   12ba4:	movt	r1, #2
   12ba8:	str	r0, [r1]
   12bac:	bx	lr
   12bb0:	movw	r1, #45492	; 0xb1b4
   12bb4:	movt	r1, #2
   12bb8:	strb	r0, [r1]
   12bbc:	bx	lr
   12bc0:	push	{r4, r5, r6, sl, fp, lr}
   12bc4:	add	fp, sp, #16
   12bc8:	sub	sp, sp, #8
   12bcc:	movw	r0, #45452	; 0xb18c
   12bd0:	movt	r0, #2
   12bd4:	ldr	r0, [r0]
   12bd8:	bl	18b38 <__assert_fail@plt+0x7648>
   12bdc:	cmp	r0, #0
   12be0:	beq	12c08 <__assert_fail@plt+0x1718>
   12be4:	movw	r0, #45492	; 0xb1b4
   12be8:	movt	r0, #2
   12bec:	ldrb	r0, [r0]
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c28 <__assert_fail@plt+0x1738>
   12bf8:	bl	11394 <__errno_location@plt>
   12bfc:	ldr	r0, [r0]
   12c00:	cmp	r0, #32
   12c04:	bne	12c28 <__assert_fail@plt+0x1738>
   12c08:	movw	r0, #45448	; 0xb188
   12c0c:	movt	r0, #2
   12c10:	ldr	r0, [r0]
   12c14:	bl	18b38 <__assert_fail@plt+0x7648>
   12c18:	cmp	r0, #0
   12c1c:	subeq	sp, fp, #16
   12c20:	popeq	{r4, r5, r6, sl, fp, pc}
   12c24:	b	12c98 <__assert_fail@plt+0x17a8>
   12c28:	movw	r1, #41632	; 0xa2a0
   12c2c:	mov	r0, #0
   12c30:	mov	r2, #5
   12c34:	movt	r1, #1
   12c38:	bl	11268 <dcgettext@plt>
   12c3c:	mov	r4, r0
   12c40:	movw	r0, #45488	; 0xb1b0
   12c44:	movt	r0, #2
   12c48:	ldr	r6, [r0]
   12c4c:	bl	11394 <__errno_location@plt>
   12c50:	ldr	r5, [r0]
   12c54:	cmp	r6, #0
   12c58:	bne	12c74 <__assert_fail@plt+0x1784>
   12c5c:	movw	r2, #40419	; 0x9de3
   12c60:	mov	r0, #0
   12c64:	mov	r1, r5
   12c68:	mov	r3, r4
   12c6c:	movt	r2, #1
   12c70:	b	12c94 <__assert_fail@plt+0x17a4>
   12c74:	mov	r0, r6
   12c78:	bl	175dc <__assert_fail@plt+0x60ec>
   12c7c:	movw	r2, #41644	; 0xa2ac
   12c80:	mov	r3, r0
   12c84:	str	r4, [sp]
   12c88:	mov	r0, #0
   12c8c:	mov	r1, r5
   12c90:	movt	r2, #1
   12c94:	bl	112ec <error@plt>
   12c98:	movw	r0, #45364	; 0xb134
   12c9c:	movt	r0, #2
   12ca0:	ldr	r0, [r0]
   12ca4:	bl	11238 <_exit@plt>
   12ca8:	push	{r4, r5, r6, sl, fp, lr}
   12cac:	add	fp, sp, #16
   12cb0:	mov	r4, r0
   12cb4:	bl	11394 <__errno_location@plt>
   12cb8:	ldr	r6, [r0]
   12cbc:	mov	r5, r0
   12cc0:	mov	r0, r4
   12cc4:	bl	1122c <free@plt>
   12cc8:	str	r6, [r5]
   12ccc:	pop	{r4, r5, r6, sl, fp, pc}
   12cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cd4:	add	fp, sp, #28
   12cd8:	sub	sp, sp, #12
   12cdc:	cmp	r1, #4096	; 0x1000
   12ce0:	bcs	12cfc <__assert_fail@plt+0x180c>
   12ce4:	mov	r6, r0
   12ce8:	and	r0, r1, #516	; 0x204
   12cec:	mov	r5, r1
   12cf0:	cmp	r0, #516	; 0x204
   12cf4:	tstne	r5, #18
   12cf8:	bne	12d18 <__assert_fail@plt+0x1828>
   12cfc:	bl	11394 <__errno_location@plt>
   12d00:	mov	r1, #22
   12d04:	str	r1, [r0]
   12d08:	mov	r8, #0
   12d0c:	mov	r0, r8
   12d10:	sub	sp, fp, #28
   12d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d18:	mov	r0, #1
   12d1c:	mov	r1, #96	; 0x60
   12d20:	mov	r9, r2
   12d24:	bl	18a64 <__assert_fail@plt+0x7574>
   12d28:	cmp	r0, #0
   12d2c:	beq	12d08 <__assert_fail@plt+0x1818>
   12d30:	mov	r8, r0
   12d34:	mvn	r0, #99	; 0x63
   12d38:	tst	r5, #2
   12d3c:	mov	r1, r5
   12d40:	str	r0, [r8, #32]
   12d44:	bic	r0, r5, #516	; 0x204
   12d48:	str	r9, [r8, #44]	; 0x2c
   12d4c:	orrne	r1, r0, #4
   12d50:	str	r1, [r8, #48]	; 0x30
   12d54:	ldr	r0, [r6]
   12d58:	cmp	r0, #0
   12d5c:	beq	12d90 <__assert_fail@plt+0x18a0>
   12d60:	add	r4, r6, #4
   12d64:	mov	r7, #0
   12d68:	bl	11364 <strlen@plt>
   12d6c:	cmp	r0, r7
   12d70:	movhi	r7, r0
   12d74:	ldr	r0, [r4], #4
   12d78:	cmp	r0, #0
   12d7c:	bne	12d68 <__assert_fail@plt+0x1878>
   12d80:	add	r1, r7, #1
   12d84:	cmp	r1, #4096	; 0x1000
   12d88:	movls	r1, #4096	; 0x1000
   12d8c:	b	12d94 <__assert_fail@plt+0x18a4>
   12d90:	mov	r1, #4096	; 0x1000
   12d94:	mov	r0, r8
   12d98:	bl	12ff8 <__assert_fail@plt+0x1b08>
   12d9c:	cmp	r0, #0
   12da0:	beq	12fec <__assert_fail@plt+0x1afc>
   12da4:	ldr	r0, [r6]
   12da8:	cmp	r0, #0
   12dac:	beq	12ddc <__assert_fail@plt+0x18ec>
   12db0:	movw	r1, #39580	; 0x9a9c
   12db4:	mov	r0, r8
   12db8:	mov	r2, #0
   12dbc:	movt	r1, #1
   12dc0:	bl	1306c <__assert_fail@plt+0x1b7c>
   12dc4:	cmp	r0, #0
   12dc8:	beq	12fe4 <__assert_fail@plt+0x1af4>
   12dcc:	mov	r4, r0
   12dd0:	mvn	r0, #0
   12dd4:	str	r0, [r4, #48]	; 0x30
   12dd8:	b	12de0 <__assert_fail@plt+0x18f0>
   12ddc:	mov	r4, #0
   12de0:	cmp	r9, #0
   12de4:	beq	12df4 <__assert_fail@plt+0x1904>
   12de8:	ldrb	r0, [r8, #49]	; 0x31
   12dec:	ubfx	r0, r0, #2, #1
   12df0:	b	12df8 <__assert_fail@plt+0x1908>
   12df4:	mov	r0, #1
   12df8:	ldr	r7, [r6]
   12dfc:	cmp	r7, #0
   12e00:	beq	12f20 <__assert_fail@plt+0x1a30>
   12e04:	eor	r0, r0, #1
   12e08:	and	r1, r5, #2048	; 0x800
   12e0c:	mov	sl, #0
   12e10:	mov	r5, #0
   12e14:	str	r0, [sp, #4]
   12e18:	mov	r0, #0
   12e1c:	str	r1, [sp, #8]
   12e20:	str	r0, [sp]
   12e24:	mov	r0, r7
   12e28:	bl	11364 <strlen@plt>
   12e2c:	mov	r2, r0
   12e30:	ldr	r0, [sp, #8]
   12e34:	cmp	r0, #0
   12e38:	bne	12e70 <__assert_fail@plt+0x1980>
   12e3c:	cmp	r2, #3
   12e40:	bcc	12e70 <__assert_fail@plt+0x1980>
   12e44:	add	r0, r2, r7
   12e48:	ldrb	r0, [r0, #-1]
   12e4c:	cmp	r0, #47	; 0x2f
   12e50:	bne	12e70 <__assert_fail@plt+0x1980>
   12e54:	sub	r0, r7, #2
   12e58:	ldrb	r1, [r0, r2]
   12e5c:	cmp	r1, #47	; 0x2f
   12e60:	bne	12e70 <__assert_fail@plt+0x1980>
   12e64:	sub	r2, r2, #1
   12e68:	cmp	r2, #1
   12e6c:	bhi	12e58 <__assert_fail@plt+0x1968>
   12e70:	mov	r0, r8
   12e74:	mov	r1, r7
   12e78:	bl	1306c <__assert_fail@plt+0x1b7c>
   12e7c:	cmp	r0, #0
   12e80:	beq	12fd4 <__assert_fail@plt+0x1ae4>
   12e84:	mov	r1, #0
   12e88:	ldr	r2, [sp, #4]
   12e8c:	str	r4, [r0, #4]
   12e90:	mov	r7, r0
   12e94:	str	r1, [r0, #48]	; 0x30
   12e98:	add	r0, r0, #168	; 0xa8
   12e9c:	str	r0, [r7, #24]
   12ea0:	clz	r0, sl
   12ea4:	lsr	r0, r0, #5
   12ea8:	orrs	r0, r2, r0
   12eac:	bne	12ec0 <__assert_fail@plt+0x19d0>
   12eb0:	mov	r0, #2
   12eb4:	strd	r0, [r7, #112]	; 0x70
   12eb8:	mov	r0, #11
   12ebc:	b	12ed4 <__assert_fail@plt+0x19e4>
   12ec0:	mov	r0, r8
   12ec4:	mov	r1, r7
   12ec8:	mov	r2, #0
   12ecc:	bl	130ec <__assert_fail@plt+0x1bfc>
   12ed0:	mov	r1, #0
   12ed4:	cmp	r9, #0
   12ed8:	strh	r0, [r7, #56]	; 0x38
   12edc:	beq	12eec <__assert_fail@plt+0x19fc>
   12ee0:	str	sl, [r7, #8]
   12ee4:	mov	sl, r7
   12ee8:	b	12f04 <__assert_fail@plt+0x1a14>
   12eec:	cmp	sl, #0
   12ef0:	str	r1, [r7, #8]
   12ef4:	beq	12f18 <__assert_fail@plt+0x1a28>
   12ef8:	ldr	r0, [sp]
   12efc:	str	r7, [sp]
   12f00:	str	r7, [r0, #8]
   12f04:	ldr	r7, [r6, #4]!
   12f08:	add	r5, r5, #1
   12f0c:	cmp	r7, #0
   12f10:	bne	12e24 <__assert_fail@plt+0x1934>
   12f14:	b	12f28 <__assert_fail@plt+0x1a38>
   12f18:	str	r7, [sp]
   12f1c:	b	12ee4 <__assert_fail@plt+0x19f4>
   12f20:	mov	sl, #0
   12f24:	b	12f4c <__assert_fail@plt+0x1a5c>
   12f28:	cmp	r9, #0
   12f2c:	beq	12f4c <__assert_fail@plt+0x1a5c>
   12f30:	cmp	r5, #2
   12f34:	bcc	12f4c <__assert_fail@plt+0x1a5c>
   12f38:	mov	r0, r8
   12f3c:	mov	r1, sl
   12f40:	mov	r2, r5
   12f44:	bl	13228 <__assert_fail@plt+0x1d38>
   12f48:	mov	sl, r0
   12f4c:	movw	r1, #39580	; 0x9a9c
   12f50:	mov	r0, r8
   12f54:	mov	r2, #0
   12f58:	movt	r1, #1
   12f5c:	bl	1306c <__assert_fail@plt+0x1b7c>
   12f60:	cmp	r0, #0
   12f64:	str	r0, [r8]
   12f68:	beq	12fd4 <__assert_fail@plt+0x1ae4>
   12f6c:	mov	r1, #9
   12f70:	strh	r1, [r0, #56]	; 0x38
   12f74:	mov	r1, #1
   12f78:	str	sl, [r0, #8]
   12f7c:	str	r1, [r0, #48]	; 0x30
   12f80:	mov	r0, r8
   12f84:	bl	1331c <__assert_fail@plt+0x1e2c>
   12f88:	cmp	r0, #0
   12f8c:	beq	12fd4 <__assert_fail@plt+0x1ae4>
   12f90:	ldrh	r0, [r8, #48]	; 0x30
   12f94:	tst	r0, #516	; 0x204
   12f98:	bne	12fc4 <__assert_fail@plt+0x1ad4>
   12f9c:	movw	r1, #41652	; 0xa2b4
   12fa0:	mov	r0, r8
   12fa4:	movt	r1, #1
   12fa8:	bl	133a8 <__assert_fail@plt+0x1eb8>
   12fac:	cmn	r0, #1
   12fb0:	str	r0, [r8, #28]
   12fb4:	bgt	12fc4 <__assert_fail@plt+0x1ad4>
   12fb8:	ldr	r0, [r8, #48]	; 0x30
   12fbc:	orr	r0, r0, #4
   12fc0:	str	r0, [r8, #48]	; 0x30
   12fc4:	add	r0, r8, #60	; 0x3c
   12fc8:	mvn	r1, #0
   12fcc:	bl	15c6c <__assert_fail@plt+0x477c>
   12fd0:	b	12d0c <__assert_fail@plt+0x181c>
   12fd4:	mov	r0, sl
   12fd8:	bl	133d8 <__assert_fail@plt+0x1ee8>
   12fdc:	mov	r0, r4
   12fe0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   12fe4:	ldr	r0, [r8, #24]
   12fe8:	bl	12ca8 <__assert_fail@plt+0x17b8>
   12fec:	mov	r0, r8
   12ff0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   12ff4:	b	12d08 <__assert_fail@plt+0x1818>
   12ff8:	push	{r4, r5, fp, lr}
   12ffc:	add	fp, sp, #8
   13000:	mov	r4, r0
   13004:	ldr	r0, [r0, #36]	; 0x24
   13008:	add	r1, r1, #256	; 0x100
   1300c:	adds	r1, r1, r0
   13010:	bcc	13034 <__assert_fail@plt+0x1b44>
   13014:	ldr	r0, [r4, #24]
   13018:	bl	12ca8 <__assert_fail@plt+0x17b8>
   1301c:	mov	r5, #0
   13020:	str	r5, [r4, #24]
   13024:	bl	11394 <__errno_location@plt>
   13028:	mov	r1, #36	; 0x24
   1302c:	str	r1, [r0]
   13030:	b	13064 <__assert_fail@plt+0x1b74>
   13034:	str	r1, [r4, #36]	; 0x24
   13038:	ldr	r0, [r4, #24]
   1303c:	bl	18ae8 <__assert_fail@plt+0x75f8>
   13040:	cmp	r0, #0
   13044:	beq	13054 <__assert_fail@plt+0x1b64>
   13048:	mov	r5, #1
   1304c:	str	r0, [r4, #24]
   13050:	b	13064 <__assert_fail@plt+0x1b74>
   13054:	ldr	r0, [r4, #24]
   13058:	bl	12ca8 <__assert_fail@plt+0x17b8>
   1305c:	mov	r5, #0
   13060:	str	r5, [r4, #24]
   13064:	mov	r0, r5
   13068:	pop	{r4, r5, fp, pc}
   1306c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13070:	add	fp, sp, #24
   13074:	mov	r5, r0
   13078:	add	r0, r2, #176	; 0xb0
   1307c:	mov	r6, r2
   13080:	mov	r8, r1
   13084:	bic	r0, r0, #7
   13088:	bl	18ab8 <__assert_fail@plt+0x75c8>
   1308c:	cmp	r0, #0
   13090:	beq	130e0 <__assert_fail@plt+0x1bf0>
   13094:	add	r7, r0, #168	; 0xa8
   13098:	mov	r4, r0
   1309c:	mov	r1, r8
   130a0:	mov	r2, r6
   130a4:	mov	r0, r7
   130a8:	bl	11244 <memcpy@plt>
   130ac:	mov	r0, #0
   130b0:	mov	r2, #196608	; 0x30000
   130b4:	strb	r0, [r7, r6]
   130b8:	str	r6, [r4, #52]	; 0x34
   130bc:	str	r5, [r4, #44]	; 0x2c
   130c0:	ldr	r1, [r5, #24]
   130c4:	str	r0, [r4, #12]
   130c8:	str	r0, [r4, #16]
   130cc:	str	r0, [r4, #20]
   130d0:	str	r2, [r4, #58]	; 0x3a
   130d4:	str	r1, [r4, #28]
   130d8:	str	r0, [r4, #32]
   130dc:	b	130e4 <__assert_fail@plt+0x1bf4>
   130e0:	mov	r4, #0
   130e4:	mov	r0, r4
   130e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130ec:	push	{r4, r5, r6, sl, fp, lr}
   130f0:	add	fp, sp, #16
   130f4:	mov	r4, r1
   130f8:	ldr	r1, [r0, #48]	; 0x30
   130fc:	ldr	r3, [r4, #48]	; 0x30
   13100:	add	r5, r4, #64	; 0x40
   13104:	cmp	r3, #0
   13108:	andeq	r3, r1, #1
   1310c:	orreq	r2, r3, r2
   13110:	cmp	r2, #0
   13114:	andseq	r1, r1, #2
   13118:	beq	13168 <__assert_fail@plt+0x1c78>
   1311c:	ldr	r0, [r4, #24]
   13120:	mov	r1, r5
   13124:	bl	19428 <__assert_fail@plt+0x7f38>
   13128:	cmp	r0, #0
   1312c:	beq	131ac <__assert_fail@plt+0x1cbc>
   13130:	bl	11394 <__errno_location@plt>
   13134:	mov	r6, r0
   13138:	ldr	r0, [r0]
   1313c:	cmp	r0, #2
   13140:	bne	13190 <__assert_fail@plt+0x1ca0>
   13144:	ldr	r0, [r4, #24]
   13148:	mov	r1, r5
   1314c:	bl	19448 <__assert_fail@plt+0x7f58>
   13150:	cmp	r0, #0
   13154:	bne	1318c <__assert_fail@plt+0x1c9c>
   13158:	mov	r0, #0
   1315c:	str	r0, [r6]
   13160:	mov	r0, #13
   13164:	pop	{r4, r5, r6, sl, fp, pc}
   13168:	ldr	r1, [r4, #24]
   1316c:	ldr	r0, [r0, #32]
   13170:	mov	r2, r5
   13174:	mov	r3, #256	; 0x100
   13178:	bl	19458 <__assert_fail@plt+0x7f68>
   1317c:	cmp	r0, #0
   13180:	beq	131ac <__assert_fail@plt+0x1cbc>
   13184:	bl	11394 <__errno_location@plt>
   13188:	mov	r6, r0
   1318c:	ldr	r0, [r6]
   13190:	str	r0, [r4, #32]
   13194:	mov	r0, r5
   13198:	mov	r1, #0
   1319c:	mov	r2, #104	; 0x68
   131a0:	bl	113ac <memset@plt>
   131a4:	mov	r0, #10
   131a8:	pop	{r4, r5, r6, sl, fp, pc}
   131ac:	ldr	r0, [r4, #80]	; 0x50
   131b0:	and	r0, r0, #61440	; 0xf000
   131b4:	cmp	r0, #40960	; 0xa000
   131b8:	beq	13210 <__assert_fail@plt+0x1d20>
   131bc:	cmp	r0, #32768	; 0x8000
   131c0:	beq	13218 <__assert_fail@plt+0x1d28>
   131c4:	cmp	r0, #16384	; 0x4000
   131c8:	bne	13220 <__assert_fail@plt+0x1d30>
   131cc:	ldrb	r1, [r4, #168]	; 0xa8
   131d0:	mov	r0, #1
   131d4:	cmp	r1, #46	; 0x2e
   131d8:	bne	13224 <__assert_fail@plt+0x1d34>
   131dc:	ldrb	r1, [r4, #169]	; 0xa9
   131e0:	cmp	r1, #0
   131e4:	beq	131fc <__assert_fail@plt+0x1d0c>
   131e8:	cmp	r1, #46	; 0x2e
   131ec:	bne	13224 <__assert_fail@plt+0x1d34>
   131f0:	ldrb	r1, [r4, #170]	; 0xaa
   131f4:	cmp	r1, #0
   131f8:	popne	{r4, r5, r6, sl, fp, pc}
   131fc:	ldr	r1, [r4, #48]	; 0x30
   13200:	mov	r0, #5
   13204:	cmp	r1, #0
   13208:	movweq	r0, #1
   1320c:	pop	{r4, r5, r6, sl, fp, pc}
   13210:	mov	r0, #12
   13214:	pop	{r4, r5, r6, sl, fp, pc}
   13218:	mov	r0, #8
   1321c:	pop	{r4, r5, r6, sl, fp, pc}
   13220:	mov	r0, #3
   13224:	pop	{r4, r5, r6, sl, fp, pc}
   13228:	push	{r4, r5, r6, r7, fp, lr}
   1322c:	add	fp, sp, #16
   13230:	mov	r6, r0
   13234:	ldr	r7, [r0, #44]	; 0x2c
   13238:	ldr	r0, [r0, #40]	; 0x28
   1323c:	mov	r5, r2
   13240:	mov	r4, r1
   13244:	cmp	r0, r2
   13248:	bcs	13278 <__assert_fail@plt+0x1d88>
   1324c:	add	r1, r5, #40	; 0x28
   13250:	cmn	r1, #-1073741823	; 0xc0000001
   13254:	str	r1, [r6, #40]	; 0x28
   13258:	bhi	132ec <__assert_fail@plt+0x1dfc>
   1325c:	ldr	r0, [r6, #8]
   13260:	lsl	r1, r1, #2
   13264:	bl	18ae8 <__assert_fail@plt+0x75f8>
   13268:	cmp	r0, #0
   1326c:	beq	132ec <__assert_fail@plt+0x1dfc>
   13270:	str	r0, [r6, #8]
   13274:	b	1327c <__assert_fail@plt+0x1d8c>
   13278:	ldr	r0, [r6, #8]
   1327c:	cmp	r4, #0
   13280:	beq	13298 <__assert_fail@plt+0x1da8>
   13284:	str	r4, [r0], #4
   13288:	ldr	r4, [r4, #8]
   1328c:	cmp	r4, #0
   13290:	bne	13284 <__assert_fail@plt+0x1d94>
   13294:	ldr	r0, [r6, #8]
   13298:	mov	r1, r5
   1329c:	mov	r2, #4
   132a0:	mov	r3, r7
   132a4:	bl	11460 <qsort@plt>
   132a8:	ldr	r0, [r6, #8]
   132ac:	cmp	r5, #1
   132b0:	ldr	r4, [r0]
   132b4:	mov	r1, r4
   132b8:	beq	1330c <__assert_fail@plt+0x1e1c>
   132bc:	ldr	r1, [r0, #4]!
   132c0:	str	r1, [r4, #8]
   132c4:	subs	r1, r5, #2
   132c8:	beq	13304 <__assert_fail@plt+0x1e14>
   132cc:	mov	r2, r0
   132d0:	ldr	r3, [r2, #4]!
   132d4:	ldr	r0, [r0]
   132d8:	subs	r1, r1, #1
   132dc:	str	r3, [r0, #8]
   132e0:	mov	r0, r2
   132e4:	bne	132d0 <__assert_fail@plt+0x1de0>
   132e8:	b	13308 <__assert_fail@plt+0x1e18>
   132ec:	ldr	r0, [r6, #8]
   132f0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   132f4:	mov	r0, #0
   132f8:	str	r0, [r6, #40]	; 0x28
   132fc:	str	r0, [r6, #8]
   13300:	b	13314 <__assert_fail@plt+0x1e24>
   13304:	mov	r2, r0
   13308:	ldr	r1, [r2]
   1330c:	mov	r0, #0
   13310:	str	r0, [r1, #8]
   13314:	mov	r0, r4
   13318:	pop	{r4, r5, r6, r7, fp, pc}
   1331c:	push	{r4, r5, fp, lr}
   13320:	add	fp, sp, #8
   13324:	sub	sp, sp, #8
   13328:	mov	r4, r0
   1332c:	ldrh	r0, [r0, #48]	; 0x30
   13330:	movw	r1, #258	; 0x102
   13334:	tst	r0, r1
   13338:	beq	13378 <__assert_fail@plt+0x1e88>
   1333c:	movw	r0, #11432	; 0x2ca8
   13340:	movw	r2, #19216	; 0x4b10
   13344:	movw	r3, #19248	; 0x4b30
   13348:	mov	r1, #0
   1334c:	mov	r5, #0
   13350:	movt	r0, #1
   13354:	movt	r2, #1
   13358:	movt	r3, #1
   1335c:	str	r0, [sp]
   13360:	mov	r0, #31
   13364:	bl	1519c <__assert_fail@plt+0x3cac>
   13368:	cmp	r0, #0
   1336c:	str	r0, [r4, #56]	; 0x38
   13370:	movne	r5, #1
   13374:	b	1339c <__assert_fail@plt+0x1eac>
   13378:	mov	r0, #32
   1337c:	bl	18ab8 <__assert_fail@plt+0x75c8>
   13380:	cmp	r0, #0
   13384:	str	r0, [r4, #56]	; 0x38
   13388:	beq	13398 <__assert_fail@plt+0x1ea8>
   1338c:	bl	18bb8 <__assert_fail@plt+0x76c8>
   13390:	mov	r5, #1
   13394:	b	1339c <__assert_fail@plt+0x1eac>
   13398:	mov	r5, #0
   1339c:	mov	r0, r5
   133a0:	sub	sp, fp, #8
   133a4:	pop	{r4, r5, fp, pc}
   133a8:	ldr	r3, [r0, #48]	; 0x30
   133ac:	mov	r2, #32768	; 0x8000
   133b0:	and	r2, r2, r3, lsl #11
   133b4:	tst	r3, #512	; 0x200
   133b8:	orr	r2, r2, #18688	; 0x4900
   133bc:	orr	r2, r2, #524288	; 0x80000
   133c0:	bne	133d0 <__assert_fail@plt+0x1ee0>
   133c4:	mov	r0, r1
   133c8:	mov	r1, r2
   133cc:	b	18f18 <__assert_fail@plt+0x7a28>
   133d0:	ldr	r0, [r0, #32]
   133d4:	b	15d98 <__assert_fail@plt+0x48a8>
   133d8:	push	{r4, r6, r7, sl, fp, lr}
   133dc:	add	fp, sp, #16
   133e0:	cmp	r0, #0
   133e4:	beq	13414 <__assert_fail@plt+0x1f24>
   133e8:	mov	r4, r0
   133ec:	ldrd	r6, [r4, #8]
   133f0:	cmp	r7, #0
   133f4:	beq	13400 <__assert_fail@plt+0x1f10>
   133f8:	mov	r0, r7
   133fc:	bl	114cc <closedir@plt>
   13400:	mov	r0, r4
   13404:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13408:	cmp	r6, #0
   1340c:	mov	r4, r6
   13410:	bne	133ec <__assert_fail@plt+0x1efc>
   13414:	pop	{r4, r6, r7, sl, fp, pc}
   13418:	push	{r4, r5, fp, lr}
   1341c:	add	fp, sp, #8
   13420:	mov	r4, r0
   13424:	ldr	r0, [r0]
   13428:	cmp	r0, #0
   1342c:	beq	1346c <__assert_fail@plt+0x1f7c>
   13430:	ldr	r1, [r0, #48]	; 0x30
   13434:	cmp	r1, #0
   13438:	bmi	13460 <__assert_fail@plt+0x1f70>
   1343c:	ldr	r5, [r0, #8]
   13440:	cmp	r5, #0
   13444:	ldreq	r5, [r0, #4]
   13448:	bl	12ca8 <__assert_fail@plt+0x17b8>
   1344c:	ldr	r0, [r5, #48]	; 0x30
   13450:	cmn	r0, #1
   13454:	mov	r0, r5
   13458:	bgt	1343c <__assert_fail@plt+0x1f4c>
   1345c:	b	13464 <__assert_fail@plt+0x1f74>
   13460:	mov	r5, r0
   13464:	mov	r0, r5
   13468:	bl	12ca8 <__assert_fail@plt+0x17b8>
   1346c:	ldr	r0, [r4, #4]
   13470:	cmp	r0, #0
   13474:	blne	133d8 <__assert_fail@plt+0x1ee8>
   13478:	ldr	r0, [r4, #8]
   1347c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13480:	ldr	r0, [r4, #24]
   13484:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13488:	ldr	r0, [r4, #48]	; 0x30
   1348c:	tst	r0, #512	; 0x200
   13490:	bne	134bc <__assert_fail@plt+0x1fcc>
   13494:	mov	r5, #0
   13498:	tst	r0, #4
   1349c:	bne	134f8 <__assert_fail@plt+0x2008>
   134a0:	ldr	r0, [r4, #28]
   134a4:	bl	11454 <fchdir@plt>
   134a8:	cmp	r0, #0
   134ac:	beq	134d4 <__assert_fail@plt+0x1fe4>
   134b0:	bl	11394 <__errno_location@plt>
   134b4:	ldr	r5, [r0]
   134b8:	b	134d8 <__assert_fail@plt+0x1fe8>
   134bc:	ldr	r0, [r4, #32]
   134c0:	mov	r5, #0
   134c4:	cmp	r0, #0
   134c8:	bmi	134f8 <__assert_fail@plt+0x2008>
   134cc:	bl	114b4 <close@plt>
   134d0:	b	134e8 <__assert_fail@plt+0x1ff8>
   134d4:	mov	r5, #0
   134d8:	ldr	r0, [r4, #28]
   134dc:	bl	114b4 <close@plt>
   134e0:	cmp	r5, #0
   134e4:	bne	134f8 <__assert_fail@plt+0x2008>
   134e8:	cmp	r0, #0
   134ec:	beq	134f8 <__assert_fail@plt+0x2008>
   134f0:	bl	11394 <__errno_location@plt>
   134f4:	ldr	r5, [r0]
   134f8:	add	r0, r4, #60	; 0x3c
   134fc:	bl	13540 <__assert_fail@plt+0x2050>
   13500:	ldr	r0, [r4, #52]	; 0x34
   13504:	cmp	r0, #0
   13508:	beq	13510 <__assert_fail@plt+0x2020>
   1350c:	bl	154c8 <__assert_fail@plt+0x3fd8>
   13510:	mov	r0, r4
   13514:	bl	13578 <__assert_fail@plt+0x2088>
   13518:	mov	r0, r4
   1351c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13520:	cmp	r5, #0
   13524:	beq	13538 <__assert_fail@plt+0x2048>
   13528:	bl	11394 <__errno_location@plt>
   1352c:	str	r5, [r0]
   13530:	mvn	r0, #0
   13534:	pop	{r4, r5, fp, pc}
   13538:	mov	r0, #0
   1353c:	pop	{r4, r5, fp, pc}
   13540:	push	{r4, sl, fp, lr}
   13544:	add	fp, sp, #8
   13548:	mov	r4, r0
   1354c:	bl	15c90 <__assert_fail@plt+0x47a0>
   13550:	cmp	r0, #0
   13554:	bne	13574 <__assert_fail@plt+0x2084>
   13558:	mov	r0, r4
   1355c:	bl	15ce4 <__assert_fail@plt+0x47f4>
   13560:	cmp	r0, #0
   13564:	bmi	1356c <__assert_fail@plt+0x207c>
   13568:	bl	114b4 <close@plt>
   1356c:	mov	r0, r4
   13570:	b	1354c <__assert_fail@plt+0x205c>
   13574:	pop	{r4, sl, fp, pc}
   13578:	ldrh	r1, [r0, #48]	; 0x30
   1357c:	movw	r2, #258	; 0x102
   13580:	tst	r1, r2
   13584:	beq	13598 <__assert_fail@plt+0x20a8>
   13588:	ldr	r0, [r0, #56]	; 0x38
   1358c:	cmp	r0, #0
   13590:	bxeq	lr
   13594:	b	154c8 <__assert_fail@plt+0x3fd8>
   13598:	ldr	r0, [r0, #56]	; 0x38
   1359c:	b	12ca8 <__assert_fail@plt+0x17b8>
   135a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135a4:	add	fp, sp, #24
   135a8:	ldr	r6, [r0]
   135ac:	mov	r5, #0
   135b0:	cmp	r6, #0
   135b4:	beq	13ba4 <__assert_fail@plt+0x26b4>
   135b8:	ldr	r1, [r0, #48]	; 0x30
   135bc:	mov	r4, r0
   135c0:	tst	r1, #8192	; 0x2000
   135c4:	bne	13ba4 <__assert_fail@plt+0x26b4>
   135c8:	ldrh	r0, [r6, #60]	; 0x3c
   135cc:	mov	r2, #3
   135d0:	strh	r2, [r6, #60]	; 0x3c
   135d4:	cmp	r0, #1
   135d8:	beq	13648 <__assert_fail@plt+0x2158>
   135dc:	cmp	r0, #2
   135e0:	bne	13660 <__assert_fail@plt+0x2170>
   135e4:	ldrh	r2, [r6, #56]	; 0x38
   135e8:	bic	r3, r2, #1
   135ec:	cmp	r3, #12
   135f0:	bne	13664 <__assert_fail@plt+0x2174>
   135f4:	mov	r0, r4
   135f8:	mov	r1, r6
   135fc:	mov	r2, #1
   13600:	bl	130ec <__assert_fail@plt+0x1bfc>
   13604:	cmp	r0, #1
   13608:	strh	r0, [r6, #56]	; 0x38
   1360c:	bne	139f8 <__assert_fail@plt+0x2508>
   13610:	ldrb	r0, [r4, #48]	; 0x30
   13614:	tst	r0, #4
   13618:	bne	139f8 <__assert_fail@plt+0x2508>
   1361c:	movw	r1, #41652	; 0xa2b4
   13620:	mov	r0, r4
   13624:	movt	r1, #1
   13628:	bl	133a8 <__assert_fail@plt+0x1eb8>
   1362c:	cmn	r0, #1
   13630:	str	r0, [r6, #36]	; 0x24
   13634:	ble	139e4 <__assert_fail@plt+0x24f4>
   13638:	ldrh	r0, [r6, #58]	; 0x3a
   1363c:	orr	r0, r0, #2
   13640:	strh	r0, [r6, #58]	; 0x3a
   13644:	b	139f8 <__assert_fail@plt+0x2508>
   13648:	mov	r0, r4
   1364c:	mov	r1, r6
   13650:	mov	r2, #0
   13654:	bl	130ec <__assert_fail@plt+0x1bfc>
   13658:	strh	r0, [r6, #56]	; 0x38
   1365c:	b	136b4 <__assert_fail@plt+0x21c4>
   13660:	ldrh	r2, [r6, #56]	; 0x38
   13664:	cmp	r2, #1
   13668:	bne	136bc <__assert_fail@plt+0x21cc>
   1366c:	cmp	r0, #4
   13670:	bne	1374c <__assert_fail@plt+0x225c>
   13674:	ldrb	r0, [r6, #58]	; 0x3a
   13678:	tst	r0, #2
   1367c:	beq	13688 <__assert_fail@plt+0x2198>
   13680:	ldr	r0, [r6, #36]	; 0x24
   13684:	bl	114b4 <close@plt>
   13688:	ldr	r0, [r4, #4]
   1368c:	cmp	r0, #0
   13690:	beq	136a0 <__assert_fail@plt+0x21b0>
   13694:	bl	133d8 <__assert_fail@plt+0x1ee8>
   13698:	mov	r0, #0
   1369c:	str	r0, [r4, #4]
   136a0:	mov	r0, #6
   136a4:	strh	r0, [r6, #56]	; 0x38
   136a8:	mov	r0, r4
   136ac:	mov	r1, r6
   136b0:	bl	13bb0 <__assert_fail@plt+0x26c0>
   136b4:	mov	r5, r6
   136b8:	b	13ba4 <__assert_fail@plt+0x26b4>
   136bc:	ldr	r5, [r6, #8]
   136c0:	cmp	r5, #0
   136c4:	beq	137e4 <__assert_fail@plt+0x22f4>
   136c8:	mov	r0, r6
   136cc:	str	r5, [r4]
   136d0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   136d4:	ldr	r0, [r5, #48]	; 0x30
   136d8:	cmp	r0, #0
   136dc:	beq	13830 <__assert_fail@plt+0x2340>
   136e0:	ldrh	r0, [r5, #60]	; 0x3c
   136e4:	mov	r6, r5
   136e8:	cmp	r0, #4
   136ec:	beq	136bc <__assert_fail@plt+0x21cc>
   136f0:	cmp	r0, #2
   136f4:	bne	13a8c <__assert_fail@plt+0x259c>
   136f8:	mov	r0, r4
   136fc:	mov	r1, r5
   13700:	mov	r2, #1
   13704:	bl	130ec <__assert_fail@plt+0x1bfc>
   13708:	cmp	r0, #1
   1370c:	strh	r0, [r5, #56]	; 0x38
   13710:	bne	13a84 <__assert_fail@plt+0x2594>
   13714:	ldrb	r0, [r4, #48]	; 0x30
   13718:	tst	r0, #4
   1371c:	bne	13a84 <__assert_fail@plt+0x2594>
   13720:	movw	r1, #41652	; 0xa2b4
   13724:	mov	r0, r4
   13728:	movt	r1, #1
   1372c:	bl	133a8 <__assert_fail@plt+0x1eb8>
   13730:	cmn	r0, #1
   13734:	str	r0, [r5, #36]	; 0x24
   13738:	ble	13a70 <__assert_fail@plt+0x2580>
   1373c:	ldrh	r0, [r5, #58]	; 0x3a
   13740:	orr	r0, r0, #2
   13744:	strh	r0, [r5, #58]	; 0x3a
   13748:	b	13a84 <__assert_fail@plt+0x2594>
   1374c:	tst	r1, #64	; 0x40
   13750:	beq	13774 <__assert_fail@plt+0x2284>
   13754:	ldr	r0, [r4, #16]
   13758:	ldr	r2, [r6, #64]	; 0x40
   1375c:	ldr	r3, [r4, #20]
   13760:	ldr	r5, [r6, #68]	; 0x44
   13764:	eor	r3, r5, r3
   13768:	eor	r0, r2, r0
   1376c:	orrs	r0, r0, r3
   13770:	bne	13674 <__assert_fail@plt+0x2184>
   13774:	ldr	r0, [r4, #4]
   13778:	cmp	r0, #0
   1377c:	beq	138f0 <__assert_fail@plt+0x2400>
   13780:	tst	r1, #4096	; 0x1000
   13784:	bne	138dc <__assert_fail@plt+0x23ec>
   13788:	ldr	r3, [r6, #24]
   1378c:	mov	r0, r4
   13790:	mov	r1, r6
   13794:	mvn	r2, #0
   13798:	bl	13c88 <__assert_fail@plt+0x2798>
   1379c:	cmp	r0, #0
   137a0:	beq	13908 <__assert_fail@plt+0x2418>
   137a4:	bl	11394 <__errno_location@plt>
   137a8:	ldr	r0, [r0]
   137ac:	str	r0, [r6, #32]
   137b0:	ldrh	r0, [r6, #58]	; 0x3a
   137b4:	orr	r0, r0, #1
   137b8:	strh	r0, [r6, #58]	; 0x3a
   137bc:	ldr	r0, [r4, #4]
   137c0:	cmp	r0, #0
   137c4:	beq	13908 <__assert_fail@plt+0x2418>
   137c8:	ldmib	r0, {r1, r2}
   137cc:	cmp	r2, #0
   137d0:	ldr	r1, [r1, #24]
   137d4:	str	r1, [r0, #24]
   137d8:	mov	r0, r2
   137dc:	bne	137c8 <__assert_fail@plt+0x22d8>
   137e0:	b	13908 <__assert_fail@plt+0x2418>
   137e4:	ldr	r5, [r6, #4]
   137e8:	ldr	r0, [r5, #12]
   137ec:	cmp	r0, #0
   137f0:	beq	13958 <__assert_fail@plt+0x2468>
   137f4:	str	r5, [r4]
   137f8:	ldr	r1, [r5, #40]	; 0x28
   137fc:	ldr	r0, [r4, #24]
   13800:	mov	r5, #0
   13804:	strb	r5, [r0, r1]
   13808:	mov	r0, r4
   1380c:	mov	r1, #3
   13810:	bl	13e68 <__assert_fail@plt+0x2978>
   13814:	cmp	r0, #0
   13818:	beq	13948 <__assert_fail@plt+0x2458>
   1381c:	mov	r7, r0
   13820:	mov	r0, r6
   13824:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13828:	mov	r5, r7
   1382c:	b	13a8c <__assert_fail@plt+0x259c>
   13830:	mov	r0, r4
   13834:	bl	147f8 <__assert_fail@plt+0x3308>
   13838:	cmp	r0, #0
   1383c:	beq	13854 <__assert_fail@plt+0x2364>
   13840:	ldr	r0, [r4, #48]	; 0x30
   13844:	mov	r5, #0
   13848:	orr	r0, r0, #8192	; 0x2000
   1384c:	str	r0, [r4, #48]	; 0x30
   13850:	b	13ba4 <__assert_fail@plt+0x26b4>
   13854:	mov	r0, r4
   13858:	bl	13578 <__assert_fail@plt+0x2088>
   1385c:	ldr	r1, [r5, #52]	; 0x34
   13860:	add	r6, r5, #168	; 0xa8
   13864:	str	r1, [r5, #40]	; 0x28
   13868:	add	r2, r1, #1
   1386c:	mov	r1, r6
   13870:	ldr	r0, [r4, #24]
   13874:	bl	11220 <memmove@plt>
   13878:	mov	r0, r6
   1387c:	mov	r1, #47	; 0x2f
   13880:	bl	11418 <strrchr@plt>
   13884:	cmp	r0, #0
   13888:	beq	138c4 <__assert_fail@plt+0x23d4>
   1388c:	cmp	r0, r6
   13890:	bne	138a0 <__assert_fail@plt+0x23b0>
   13894:	ldrb	r1, [r5, #169]	; 0xa9
   13898:	cmp	r1, #0
   1389c:	beq	138c4 <__assert_fail@plt+0x23d4>
   138a0:	add	r7, r0, #1
   138a4:	mov	r0, r7
   138a8:	bl	11364 <strlen@plt>
   138ac:	mov	r8, r0
   138b0:	add	r2, r0, #1
   138b4:	mov	r0, r6
   138b8:	mov	r1, r7
   138bc:	bl	11220 <memmove@plt>
   138c0:	str	r8, [r5, #52]	; 0x34
   138c4:	ldr	r0, [r4, #24]
   138c8:	str	r0, [r5, #24]
   138cc:	str	r0, [r5, #28]
   138d0:	mov	r0, r4
   138d4:	bl	1331c <__assert_fail@plt+0x1e2c>
   138d8:	b	13ac8 <__assert_fail@plt+0x25d8>
   138dc:	bic	r1, r1, #4096	; 0x1000
   138e0:	str	r1, [r4, #48]	; 0x30
   138e4:	bl	133d8 <__assert_fail@plt+0x1ee8>
   138e8:	mov	r0, #0
   138ec:	str	r0, [r4, #4]
   138f0:	mov	r0, r4
   138f4:	mov	r1, #3
   138f8:	bl	13e68 <__assert_fail@plt+0x2978>
   138fc:	cmp	r0, #0
   13900:	str	r0, [r4, #4]
   13904:	beq	13918 <__assert_fail@plt+0x2428>
   13908:	ldr	r5, [r4, #4]
   1390c:	mov	r0, #0
   13910:	str	r0, [r4, #4]
   13914:	b	13a8c <__assert_fail@plt+0x259c>
   13918:	ldrb	r0, [r4, #49]	; 0x31
   1391c:	mov	r5, #0
   13920:	tst	r0, #32
   13924:	bne	13ba4 <__assert_fail@plt+0x26b4>
   13928:	ldr	r0, [r6, #32]
   1392c:	cmp	r0, #0
   13930:	beq	136a8 <__assert_fail@plt+0x21b8>
   13934:	ldrh	r0, [r6, #56]	; 0x38
   13938:	cmp	r0, #4
   1393c:	beq	136a8 <__assert_fail@plt+0x21b8>
   13940:	mov	r0, #7
   13944:	b	136a4 <__assert_fail@plt+0x21b4>
   13948:	ldrb	r0, [r4, #49]	; 0x31
   1394c:	tst	r0, #32
   13950:	bne	13ba4 <__assert_fail@plt+0x26b4>
   13954:	ldr	r5, [r6, #4]
   13958:	mov	r0, r6
   1395c:	str	r5, [r4]
   13960:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13964:	ldr	r0, [r5, #48]	; 0x30
   13968:	cmn	r0, #1
   1396c:	beq	139c8 <__assert_fail@plt+0x24d8>
   13970:	ldrh	r0, [r5, #56]	; 0x38
   13974:	cmp	r0, #11
   13978:	beq	13bac <__assert_fail@plt+0x26bc>
   1397c:	ldr	r0, [r5, #40]	; 0x28
   13980:	ldr	r1, [r4, #24]
   13984:	mov	r2, #0
   13988:	strb	r2, [r1, r0]
   1398c:	ldr	r0, [r5, #48]	; 0x30
   13990:	cmp	r0, #0
   13994:	beq	13a00 <__assert_fail@plt+0x2510>
   13998:	ldrh	r0, [r5, #58]	; 0x3a
   1399c:	tst	r0, #2
   139a0:	bne	13a2c <__assert_fail@plt+0x253c>
   139a4:	tst	r0, #1
   139a8:	bne	13b68 <__assert_fail@plt+0x2678>
   139ac:	ldr	r1, [r5, #4]
   139b0:	movw	r3, #41651	; 0xa2b3
   139b4:	mov	r0, r4
   139b8:	mvn	r2, #0
   139bc:	movt	r3, #1
   139c0:	bl	13c88 <__assert_fail@plt+0x2798>
   139c4:	b	13a08 <__assert_fail@plt+0x2518>
   139c8:	mov	r0, r5
   139cc:	bl	12ca8 <__assert_fail@plt+0x17b8>
   139d0:	bl	11394 <__errno_location@plt>
   139d4:	mov	r5, #0
   139d8:	str	r5, [r0]
   139dc:	str	r5, [r4]
   139e0:	b	13ba4 <__assert_fail@plt+0x26b4>
   139e4:	bl	11394 <__errno_location@plt>
   139e8:	ldr	r0, [r0]
   139ec:	mov	r1, #7
   139f0:	strh	r1, [r6, #56]	; 0x38
   139f4:	str	r0, [r6, #32]
   139f8:	mov	r5, r6
   139fc:	b	13ac8 <__assert_fail@plt+0x25d8>
   13a00:	mov	r0, r4
   13a04:	bl	147f8 <__assert_fail@plt+0x3308>
   13a08:	cmp	r0, #0
   13a0c:	beq	13b68 <__assert_fail@plt+0x2678>
   13a10:	bl	11394 <__errno_location@plt>
   13a14:	ldr	r0, [r0]
   13a18:	str	r0, [r5, #32]
   13a1c:	ldr	r0, [r4, #48]	; 0x30
   13a20:	orr	r0, r0, #8192	; 0x2000
   13a24:	str	r0, [r4, #48]	; 0x30
   13a28:	b	13b68 <__assert_fail@plt+0x2678>
   13a2c:	ldr	r0, [r4, #48]	; 0x30
   13a30:	tst	r0, #4
   13a34:	bne	13b60 <__assert_fail@plt+0x2670>
   13a38:	ldr	r1, [r5, #36]	; 0x24
   13a3c:	tst	r0, #512	; 0x200
   13a40:	bne	13b54 <__assert_fail@plt+0x2664>
   13a44:	mov	r0, r1
   13a48:	bl	11454 <fchdir@plt>
   13a4c:	cmp	r0, #0
   13a50:	beq	13b60 <__assert_fail@plt+0x2670>
   13a54:	bl	11394 <__errno_location@plt>
   13a58:	ldr	r0, [r0]
   13a5c:	str	r0, [r5, #32]
   13a60:	ldr	r0, [r4, #48]	; 0x30
   13a64:	orr	r0, r0, #8192	; 0x2000
   13a68:	str	r0, [r4, #48]	; 0x30
   13a6c:	b	13b60 <__assert_fail@plt+0x2670>
   13a70:	bl	11394 <__errno_location@plt>
   13a74:	ldr	r0, [r0]
   13a78:	mov	r1, #7
   13a7c:	strh	r1, [r5, #56]	; 0x38
   13a80:	str	r0, [r5, #32]
   13a84:	mov	r0, #3
   13a88:	strh	r0, [r5, #60]	; 0x3c
   13a8c:	ldr	r0, [r5, #4]
   13a90:	ldr	r1, [r0, #28]
   13a94:	ldr	r0, [r0, #40]	; 0x28
   13a98:	sub	r2, r0, #1
   13a9c:	ldrb	r1, [r1, r2]
   13aa0:	cmp	r1, #47	; 0x2f
   13aa4:	ldr	r1, [r4, #24]
   13aa8:	moveq	r0, r2
   13aac:	mov	r2, #47	; 0x2f
   13ab0:	strb	r2, [r1, r0]!
   13ab4:	ldr	r2, [r5, #52]	; 0x34
   13ab8:	add	r0, r1, #1
   13abc:	add	r1, r5, #168	; 0xa8
   13ac0:	add	r2, r2, #1
   13ac4:	bl	11220 <memmove@plt>
   13ac8:	str	r5, [r4]
   13acc:	ldrh	r0, [r5, #56]	; 0x38
   13ad0:	cmp	r0, #11
   13ad4:	bne	13b0c <__assert_fail@plt+0x261c>
   13ad8:	add	r0, r5, #112	; 0x70
   13adc:	ldrd	r0, [r0]
   13ae0:	eor	r2, r0, #1
   13ae4:	orrs	r2, r2, r1
   13ae8:	beq	13ba4 <__assert_fail@plt+0x26b4>
   13aec:	eor	r0, r0, #2
   13af0:	orrs	r0, r0, r1
   13af4:	bne	13bac <__assert_fail@plt+0x26bc>
   13af8:	mov	r0, r4
   13afc:	mov	r1, r5
   13b00:	mov	r2, #0
   13b04:	bl	130ec <__assert_fail@plt+0x1bfc>
   13b08:	strh	r0, [r5, #56]	; 0x38
   13b0c:	cmp	r0, #1
   13b10:	bne	13ba4 <__assert_fail@plt+0x26b4>
   13b14:	ldr	r0, [r5, #48]	; 0x30
   13b18:	cmp	r0, #0
   13b1c:	bne	13b2c <__assert_fail@plt+0x263c>
   13b20:	add	r0, r5, #64	; 0x40
   13b24:	ldrd	r0, [r0]
   13b28:	strd	r0, [r4, #16]
   13b2c:	mov	r0, r4
   13b30:	mov	r1, r5
   13b34:	bl	14854 <__assert_fail@plt+0x3364>
   13b38:	cmp	r0, #0
   13b3c:	bne	13ba4 <__assert_fail@plt+0x26b4>
   13b40:	bl	11394 <__errno_location@plt>
   13b44:	mov	r1, #12
   13b48:	mov	r5, #0
   13b4c:	str	r1, [r0]
   13b50:	b	13ba4 <__assert_fail@plt+0x26b4>
   13b54:	mov	r0, r4
   13b58:	mov	r2, #1
   13b5c:	bl	14910 <__assert_fail@plt+0x3420>
   13b60:	ldr	r0, [r5, #36]	; 0x24
   13b64:	bl	114b4 <close@plt>
   13b68:	ldrh	r0, [r5, #56]	; 0x38
   13b6c:	cmp	r0, #2
   13b70:	beq	13b98 <__assert_fail@plt+0x26a8>
   13b74:	ldr	r0, [r5, #32]
   13b78:	mov	r1, #7
   13b7c:	cmp	r0, #0
   13b80:	movweq	r1, #6
   13b84:	strh	r1, [r5, #56]	; 0x38
   13b88:	bne	13b98 <__assert_fail@plt+0x26a8>
   13b8c:	mov	r0, r4
   13b90:	mov	r1, r5
   13b94:	bl	13bb0 <__assert_fail@plt+0x26c0>
   13b98:	ldrb	r0, [r4, #49]	; 0x31
   13b9c:	tst	r0, #32
   13ba0:	movne	r5, #0
   13ba4:	mov	r0, r5
   13ba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bac:	bl	114a8 <abort@plt>
   13bb0:	push	{r4, r5, r7, sl, fp, lr}
   13bb4:	add	fp, sp, #16
   13bb8:	sub	sp, sp, #24
   13bbc:	ldrh	r2, [r0, #48]	; 0x30
   13bc0:	movw	r3, #258	; 0x102
   13bc4:	add	lr, r1, #64	; 0x40
   13bc8:	add	r4, r1, #160	; 0xa0
   13bcc:	tst	r2, r3
   13bd0:	beq	13c08 <__assert_fail@plt+0x2718>
   13bd4:	ldrd	r2, [lr]
   13bd8:	mov	r1, sp
   13bdc:	stm	sp, {r2, r3}
   13be0:	ldrd	r2, [r4]
   13be4:	str	r3, [sp, #12]
   13be8:	str	r2, [sp, #8]
   13bec:	ldr	r0, [r0, #56]	; 0x38
   13bf0:	bl	15b58 <__assert_fail@plt+0x4668>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c84 <__assert_fail@plt+0x2794>
   13bfc:	bl	12ca8 <__assert_fail@plt+0x17b8>
   13c00:	sub	sp, fp, #16
   13c04:	pop	{r4, r5, r7, sl, fp, pc}
   13c08:	ldr	r1, [r1, #4]
   13c0c:	cmp	r1, #0
   13c10:	beq	13c00 <__assert_fail@plt+0x2710>
   13c14:	ldr	r2, [r1, #48]	; 0x30
   13c18:	cmp	r2, #0
   13c1c:	bmi	13c00 <__assert_fail@plt+0x2710>
   13c20:	ldr	ip, [r0, #56]	; 0x38
   13c24:	ldrd	r2, [ip, #16]
   13c28:	orrs	r2, r2, r3
   13c2c:	beq	13c84 <__assert_fail@plt+0x2794>
   13c30:	ldrd	r2, [r4]
   13c34:	ldrd	r4, [ip]
   13c38:	eor	r3, r5, r3
   13c3c:	eor	r2, r4, r2
   13c40:	orrs	r2, r2, r3
   13c44:	bne	13c00 <__assert_fail@plt+0x2710>
   13c48:	add	r3, ip, #8
   13c4c:	ldm	lr, {r2, r5}
   13c50:	ldm	r3, {r4, r7}
   13c54:	eor	r7, r7, r5
   13c58:	eor	r2, r4, r2
   13c5c:	orrs	r2, r2, r7
   13c60:	bne	13c00 <__assert_fail@plt+0x2710>
   13c64:	add	r2, r1, #64	; 0x40
   13c68:	add	r1, r1, #160	; 0xa0
   13c6c:	ldm	r2, {r2, r5}
   13c70:	stm	r3, {r2, r5}
   13c74:	ldr	r0, [r0, #56]	; 0x38
   13c78:	ldrd	r2, [r1]
   13c7c:	strd	r2, [r0]
   13c80:	b	13c00 <__assert_fail@plt+0x2710>
   13c84:	bl	114a8 <abort@plt>
   13c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c8c:	add	fp, sp, #28
   13c90:	sub	sp, sp, #108	; 0x6c
   13c94:	mov	r7, r3
   13c98:	mov	r4, r2
   13c9c:	mov	r8, r1
   13ca0:	mov	sl, r0
   13ca4:	cmp	r3, #0
   13ca8:	beq	13ccc <__assert_fail@plt+0x27dc>
   13cac:	movw	r1, #41651	; 0xa2b3
   13cb0:	mov	r0, r7
   13cb4:	movt	r1, #1
   13cb8:	bl	111fc <strcmp@plt>
   13cbc:	cmp	r0, #0
   13cc0:	mov	r6, r0
   13cc4:	movwne	r6, #1
   13cc8:	b	13cd0 <__assert_fail@plt+0x27e0>
   13ccc:	mov	r6, #1
   13cd0:	ldr	r0, [sl, #48]	; 0x30
   13cd4:	tst	r0, #4
   13cd8:	bne	13d30 <__assert_fail@plt+0x2840>
   13cdc:	cmn	r4, #1
   13ce0:	mov	r1, #0
   13ce4:	mov	r9, #0
   13ce8:	movwgt	r1, #1
   13cec:	orrs	r1, r1, r6
   13cf0:	bne	13d50 <__assert_fail@plt+0x2860>
   13cf4:	ands	r0, r0, #512	; 0x200
   13cf8:	beq	13d50 <__assert_fail@plt+0x2860>
   13cfc:	add	r4, sl, #60	; 0x3c
   13d00:	mov	r0, r4
   13d04:	bl	15c90 <__assert_fail@plt+0x47a0>
   13d08:	cmp	r0, #0
   13d0c:	bne	13d58 <__assert_fail@plt+0x2868>
   13d10:	mov	r0, r4
   13d14:	bl	15ce4 <__assert_fail@plt+0x47f4>
   13d18:	cmn	r0, #1
   13d1c:	ble	13d58 <__assert_fail@plt+0x2868>
   13d20:	mov	r4, r0
   13d24:	mov	r9, #0
   13d28:	mov	r7, #0
   13d2c:	b	13d74 <__assert_fail@plt+0x2884>
   13d30:	mov	r5, #0
   13d34:	cmp	r4, #0
   13d38:	bmi	13e5c <__assert_fail@plt+0x296c>
   13d3c:	ands	r0, r0, #512	; 0x200
   13d40:	beq	13e5c <__assert_fail@plt+0x296c>
   13d44:	mov	r0, r4
   13d48:	bl	114b4 <close@plt>
   13d4c:	b	13e5c <__assert_fail@plt+0x296c>
   13d50:	cmn	r4, #1
   13d54:	bgt	13d74 <__assert_fail@plt+0x2884>
   13d58:	mov	r0, sl
   13d5c:	mov	r1, r7
   13d60:	bl	133a8 <__assert_fail@plt+0x1eb8>
   13d64:	cmp	r0, #0
   13d68:	bmi	13e0c <__assert_fail@plt+0x291c>
   13d6c:	mov	r4, r0
   13d70:	mov	r9, #1
   13d74:	ldr	r5, [sl, #48]	; 0x30
   13d78:	tst	r5, #2
   13d7c:	bne	13da0 <__assert_fail@plt+0x28b0>
   13d80:	cmp	r7, #0
   13d84:	beq	13df4 <__assert_fail@plt+0x2904>
   13d88:	movw	r1, #41651	; 0xa2b3
   13d8c:	mov	r0, r7
   13d90:	movt	r1, #1
   13d94:	bl	111fc <strcmp@plt>
   13d98:	cmp	r0, #0
   13d9c:	bne	13df4 <__assert_fail@plt+0x2904>
   13da0:	mov	r1, sp
   13da4:	mov	r0, r4
   13da8:	bl	19438 <__assert_fail@plt+0x7f48>
   13dac:	cmp	r0, #0
   13db0:	bne	13e38 <__assert_fail@plt+0x2948>
   13db4:	add	r0, r8, #64	; 0x40
   13db8:	ldm	sp, {r2, r3}
   13dbc:	ldrd	r0, [r0]
   13dc0:	eor	r1, r1, r3
   13dc4:	eor	r0, r0, r2
   13dc8:	orrs	r0, r0, r1
   13dcc:	bne	13e2c <__assert_fail@plt+0x293c>
   13dd0:	add	r0, r8, #160	; 0xa0
   13dd4:	ldr	r2, [sp, #96]	; 0x60
   13dd8:	ldr	r3, [sp, #100]	; 0x64
   13ddc:	ldrd	r0, [r0]
   13de0:	eor	r1, r1, r3
   13de4:	eor	r0, r0, r2
   13de8:	orrs	r0, r0, r1
   13dec:	bne	13e2c <__assert_fail@plt+0x293c>
   13df0:	ldr	r5, [sl, #48]	; 0x30
   13df4:	tst	r5, #512	; 0x200
   13df8:	bne	13e14 <__assert_fail@plt+0x2924>
   13dfc:	mov	r0, r4
   13e00:	bl	11454 <fchdir@plt>
   13e04:	mov	r5, r0
   13e08:	b	13e3c <__assert_fail@plt+0x294c>
   13e0c:	mvn	r5, #0
   13e10:	b	13e5c <__assert_fail@plt+0x296c>
   13e14:	mov	r0, sl
   13e18:	mov	r1, r4
   13e1c:	mov	r2, r6
   13e20:	bl	14910 <__assert_fail@plt+0x3420>
   13e24:	mov	r5, #0
   13e28:	b	13e5c <__assert_fail@plt+0x296c>
   13e2c:	bl	11394 <__errno_location@plt>
   13e30:	mov	r1, #2
   13e34:	str	r1, [r0]
   13e38:	mvn	r5, #0
   13e3c:	cmp	r9, #0
   13e40:	beq	13e5c <__assert_fail@plt+0x296c>
   13e44:	bl	11394 <__errno_location@plt>
   13e48:	ldr	r7, [r0]
   13e4c:	mov	r6, r0
   13e50:	mov	r0, r4
   13e54:	bl	114b4 <close@plt>
   13e58:	str	r7, [r6]
   13e5c:	mov	r0, r5
   13e60:	sub	sp, fp, #28
   13e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e6c:	add	fp, sp, #28
   13e70:	sub	sp, sp, #68	; 0x44
   13e74:	ldr	sl, [r0]
   13e78:	mov	r4, r1
   13e7c:	str	r0, [fp, #-36]	; 0xffffffdc
   13e80:	ldr	r9, [sl, #12]
   13e84:	cmp	r9, #0
   13e88:	beq	13ecc <__assert_fail@plt+0x29dc>
   13e8c:	mov	r0, r9
   13e90:	bl	11448 <dirfd@plt>
   13e94:	cmn	r0, #1
   13e98:	str	r0, [fp, #-32]	; 0xffffffe0
   13e9c:	ble	13f04 <__assert_fail@plt+0x2a14>
   13ea0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13ea4:	mov	ip, #0
   13ea8:	mov	r1, r7
   13eac:	ldr	r0, [r1, #44]!	; 0x2c
   13eb0:	str	r1, [sp, #24]
   13eb4:	mvn	r1, #0
   13eb8:	cmp	r0, #0
   13ebc:	movweq	r1, #34464	; 0x86a0
   13ec0:	movteq	r1, #1
   13ec4:	str	r1, [sp, #32]
   13ec8:	b	1416c <__assert_fail@plt+0x2c7c>
   13ecc:	ldr	r3, [r0, #48]	; 0x30
   13ed0:	mov	r2, r0
   13ed4:	mvn	r0, #99	; 0x63
   13ed8:	and	r1, r3, #516	; 0x204
   13edc:	cmp	r1, #512	; 0x200
   13ee0:	ldr	r1, [sl, #24]
   13ee4:	ldreq	r0, [r2, #32]
   13ee8:	mov	r2, #0
   13eec:	tst	r3, #16
   13ef0:	beq	13f24 <__assert_fail@plt+0x2a34>
   13ef4:	tst	r3, #1
   13ef8:	bne	13f18 <__assert_fail@plt+0x2a28>
   13efc:	mov	r2, #32768	; 0x8000
   13f00:	b	13f24 <__assert_fail@plt+0x2a34>
   13f04:	ldr	r0, [sl, #12]
   13f08:	bl	114cc <closedir@plt>
   13f0c:	mov	r5, #0
   13f10:	str	r5, [sl, #12]
   13f14:	b	13f64 <__assert_fail@plt+0x2a74>
   13f18:	ldr	r3, [sl, #48]	; 0x30
   13f1c:	cmp	r3, #0
   13f20:	movne	r2, #32768	; 0x8000
   13f24:	sub	r3, fp, #32
   13f28:	bl	15dd0 <__assert_fail@plt+0x48e0>
   13f2c:	cmp	r0, #0
   13f30:	str	r0, [sl, #12]
   13f34:	beq	13f60 <__assert_fail@plt+0x2a70>
   13f38:	ldrh	r0, [sl, #56]	; 0x38
   13f3c:	cmp	r0, #11
   13f40:	bne	13f84 <__assert_fail@plt+0x2a94>
   13f44:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13f48:	mov	r1, sl
   13f4c:	mov	r2, #0
   13f50:	mov	r0, r7
   13f54:	bl	130ec <__assert_fail@plt+0x1bfc>
   13f58:	strh	r0, [sl, #56]	; 0x38
   13f5c:	b	13fcc <__assert_fail@plt+0x2adc>
   13f60:	mov	r5, #0
   13f64:	cmp	r4, #3
   13f68:	bne	147ec <__assert_fail@plt+0x32fc>
   13f6c:	mov	r0, #4
   13f70:	strh	r0, [sl, #56]	; 0x38
   13f74:	bl	11394 <__errno_location@plt>
   13f78:	ldr	r0, [r0]
   13f7c:	str	r0, [sl, #32]
   13f80:	b	147ec <__assert_fail@plt+0x32fc>
   13f84:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13f88:	ldrb	r0, [r7, #49]	; 0x31
   13f8c:	tst	r0, #1
   13f90:	beq	13fcc <__assert_fail@plt+0x2adc>
   13f94:	mov	r0, r7
   13f98:	mov	r1, sl
   13f9c:	bl	13bb0 <__assert_fail@plt+0x26c0>
   13fa0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13fa4:	mov	r1, sl
   13fa8:	mov	r2, #0
   13fac:	mov	r5, #0
   13fb0:	bl	130ec <__assert_fail@plt+0x1bfc>
   13fb4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13fb8:	mov	r1, sl
   13fbc:	bl	14854 <__assert_fail@plt+0x3364>
   13fc0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13fc4:	cmp	r0, #0
   13fc8:	beq	14070 <__assert_fail@plt+0x2b80>
   13fcc:	mov	r1, r7
   13fd0:	ldr	r0, [r1, #44]!	; 0x2c
   13fd4:	str	r1, [sp, #24]
   13fd8:	mvn	r1, #0
   13fdc:	cmp	r0, #0
   13fe0:	movweq	r1, #34464	; 0x86a0
   13fe4:	movteq	r1, #1
   13fe8:	cmp	r4, #2
   13fec:	str	r1, [sp, #32]
   13ff0:	bne	14010 <__assert_fail@plt+0x2b20>
   13ff4:	mov	ip, #1
   13ff8:	cmp	r4, #3
   13ffc:	bne	1416c <__assert_fail@plt+0x2c7c>
   14000:	sub	r0, r4, #3
   14004:	mov	r8, r4
   14008:	mov	r5, #0
   1400c:	b	140a4 <__assert_fail@plt+0x2bb4>
   14010:	ldr	r0, [r7, #48]	; 0x30
   14014:	and	r0, r0, #56	; 0x38
   14018:	cmp	r0, #24
   1401c:	bne	14098 <__assert_fail@plt+0x2ba8>
   14020:	ldr	r0, [sl, #84]	; 0x54
   14024:	cmp	r0, #2
   14028:	bne	14098 <__assert_fail@plt+0x2ba8>
   1402c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14030:	mov	r0, sl
   14034:	bl	14bb0 <__assert_fail@plt+0x36c0>
   14038:	movw	r1, #26984	; 0x6968
   1403c:	cmp	r0, r1
   14040:	ble	14080 <__assert_fail@plt+0x2b90>
   14044:	movw	r1, #26985	; 0x6969
   14048:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1404c:	cmp	r0, r1
   14050:	movwne	r1, #16719	; 0x414f
   14054:	movtne	r1, #21318	; 0x5346
   14058:	cmpne	r0, r1
   1405c:	beq	14098 <__assert_fail@plt+0x2ba8>
   14060:	movw	r1, #40864	; 0x9fa0
   14064:	cmp	r0, r1
   14068:	beq	14098 <__assert_fail@plt+0x2ba8>
   1406c:	b	13ff4 <__assert_fail@plt+0x2b04>
   14070:	bl	11394 <__errno_location@plt>
   14074:	mov	r1, #12
   14078:	str	r1, [r0]
   1407c:	b	147ec <__assert_fail@plt+0x32fc>
   14080:	movw	r1, #19778	; 0x4d42
   14084:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14088:	movt	r1, #65363	; 0xff53
   1408c:	cmp	r0, r1
   14090:	cmpne	r0, #0
   14094:	bne	13ff4 <__assert_fail@plt+0x2b04>
   14098:	sub	r0, r4, #3
   1409c:	mov	r8, r4
   140a0:	mov	r5, #1
   140a4:	clz	r0, r0
   140a8:	lsr	r4, r0, #5
   140ac:	ldrb	r0, [r7, #49]	; 0x31
   140b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   140b4:	tst	r0, #2
   140b8:	beq	140d8 <__assert_fail@plt+0x2be8>
   140bc:	mov	r0, r2
   140c0:	movw	r1, #1030	; 0x406
   140c4:	mov	r2, #3
   140c8:	bl	18d40 <__assert_fail@plt+0x7850>
   140cc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140d0:	mov	r2, r0
   140d4:	str	r0, [fp, #-32]	; 0xffffffe0
   140d8:	cmp	r2, #0
   140dc:	bmi	140fc <__assert_fail@plt+0x2c0c>
   140e0:	mov	r0, r7
   140e4:	mov	r1, sl
   140e8:	mov	r3, #0
   140ec:	bl	13c88 <__assert_fail@plt+0x2798>
   140f0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140f4:	cmp	r0, #0
   140f8:	beq	14164 <__assert_fail@plt+0x2c74>
   140fc:	and	r0, r4, r5
   14100:	cmp	r0, #1
   14104:	bne	14114 <__assert_fail@plt+0x2c24>
   14108:	bl	11394 <__errno_location@plt>
   1410c:	ldr	r0, [r0]
   14110:	str	r0, [sl, #32]
   14114:	ldrh	r0, [sl, #58]	; 0x3a
   14118:	orr	r0, r0, #1
   1411c:	strh	r0, [sl, #58]	; 0x3a
   14120:	ldr	r0, [sl, #12]
   14124:	bl	114cc <closedir@plt>
   14128:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1412c:	mov	r4, #0
   14130:	str	r4, [sl, #12]
   14134:	ldrb	r0, [r7, #49]	; 0x31
   14138:	tst	r0, #2
   1413c:	beq	14154 <__assert_fail@plt+0x2c64>
   14140:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14144:	cmp	r0, #0
   14148:	bmi	14154 <__assert_fail@plt+0x2c64>
   1414c:	bl	114b4 <close@plt>
   14150:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14154:	str	r4, [sl, #12]
   14158:	mov	ip, #1
   1415c:	mov	r4, r8
   14160:	b	1416c <__assert_fail@plt+0x2c7c>
   14164:	mov	r4, r8
   14168:	mov	ip, #0
   1416c:	ldr	r0, [sl, #40]	; 0x28
   14170:	ldr	r1, [sl, #28]
   14174:	mov	r5, #0
   14178:	str	r4, [sp, #12]
   1417c:	sub	r2, r0, #1
   14180:	ldrb	r1, [r1, r2]
   14184:	cmp	r1, #47	; 0x2f
   14188:	ldrb	r1, [r7, #48]	; 0x30
   1418c:	moveq	r0, r2
   14190:	tst	r1, #4
   14194:	mov	r1, #0
   14198:	str	r1, [sp, #40]	; 0x28
   1419c:	beq	141b4 <__assert_fail@plt+0x2cc4>
   141a0:	ldr	r1, [r7, #24]
   141a4:	mov	r2, #47	; 0x2f
   141a8:	strb	r2, [r1, r0]!
   141ac:	add	r1, r1, #1
   141b0:	str	r1, [sp, #40]	; 0x28
   141b4:	ldr	r4, [sl, #12]
   141b8:	add	r1, r0, #1
   141bc:	str	r1, [sp, #48]	; 0x30
   141c0:	cmp	r4, #0
   141c4:	beq	14508 <__assert_fail@plt+0x3018>
   141c8:	ldr	r0, [sl, #48]	; 0x30
   141cc:	str	ip, [sp, #4]
   141d0:	str	r9, [sp, #8]
   141d4:	add	r0, r0, #1
   141d8:	str	r0, [sp, #28]
   141dc:	ldr	r0, [r7, #36]	; 0x24
   141e0:	sub	r0, r0, r1
   141e4:	str	r0, [fp, #-44]	; 0xffffffd4
   141e8:	bl	11394 <__errno_location@plt>
   141ec:	str	r0, [sp, #36]	; 0x24
   141f0:	mov	r0, #0
   141f4:	mov	r1, #0
   141f8:	mov	r5, #0
   141fc:	mov	r8, #0
   14200:	mov	r9, #0
   14204:	str	r0, [sp, #20]
   14208:	mov	r0, #0
   1420c:	str	r0, [sp, #16]
   14210:	ldr	r0, [sp, #36]	; 0x24
   14214:	str	r5, [fp, #-40]	; 0xffffffd8
   14218:	mov	r5, sl
   1421c:	str	r1, [r0]
   14220:	mov	r0, r4
   14224:	bl	11430 <readdir64@plt>
   14228:	cmp	r0, #0
   1422c:	beq	14564 <__assert_fail@plt+0x3074>
   14230:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14234:	mov	sl, r0
   14238:	ldrb	r0, [r7, #48]	; 0x30
   1423c:	tst	r0, #32
   14240:	bne	14270 <__assert_fail@plt+0x2d80>
   14244:	ldrb	r0, [sl, #19]
   14248:	cmp	r0, #46	; 0x2e
   1424c:	bne	14270 <__assert_fail@plt+0x2d80>
   14250:	ldrb	r0, [sl, #20]
   14254:	cmp	r0, #0
   14258:	beq	144ac <__assert_fail@plt+0x2fbc>
   1425c:	cmp	r0, #46	; 0x2e
   14260:	bne	14270 <__assert_fail@plt+0x2d80>
   14264:	ldrb	r0, [sl, #21]
   14268:	cmp	r0, #0
   1426c:	beq	144ac <__assert_fail@plt+0x2fbc>
   14270:	add	r6, sl, #19
   14274:	str	r9, [sp, #44]	; 0x2c
   14278:	mov	r0, r6
   1427c:	bl	11364 <strlen@plt>
   14280:	mov	r4, r0
   14284:	mov	r0, r7
   14288:	mov	r1, r6
   1428c:	mov	r2, r4
   14290:	bl	1306c <__assert_fail@plt+0x1b7c>
   14294:	mov	r9, r0
   14298:	cmp	r0, #0
   1429c:	beq	1451c <__assert_fail@plt+0x302c>
   142a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   142a4:	cmp	r4, r0
   142a8:	bcs	142bc <__assert_fail@plt+0x2dcc>
   142ac:	ldr	r2, [sp, #48]	; 0x30
   142b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   142b4:	add	r4, r4, r2
   142b8:	b	1431c <__assert_fail@plt+0x2e2c>
   142bc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   142c0:	ldr	r0, [sp, #48]	; 0x30
   142c4:	ldr	r6, [r7, #24]
   142c8:	add	r4, r4, r0
   142cc:	mov	r0, r7
   142d0:	add	r1, r4, #1
   142d4:	bl	12ff8 <__assert_fail@plt+0x1b08>
   142d8:	cmp	r0, #0
   142dc:	beq	1451c <__assert_fail@plt+0x302c>
   142e0:	ldr	r0, [r7, #24]
   142e4:	cmp	r6, r0
   142e8:	beq	14310 <__assert_fail@plt+0x2e20>
   142ec:	ldrb	r1, [r7, #48]	; 0x30
   142f0:	ldr	r2, [sp, #48]	; 0x30
   142f4:	tst	r1, #4
   142f8:	ldr	r1, [sp, #40]	; 0x28
   142fc:	addne	r1, r0, r2
   14300:	mov	r0, #1
   14304:	str	r1, [sp, #40]	; 0x28
   14308:	str	r0, [sp, #16]
   1430c:	b	14314 <__assert_fail@plt+0x2e24>
   14310:	ldr	r2, [sp, #48]	; 0x30
   14314:	ldr	r0, [r7, #36]	; 0x24
   14318:	sub	r0, r0, r2
   1431c:	cmp	r4, r2
   14320:	bcc	145c0 <__assert_fail@plt+0x30d0>
   14324:	ldr	r1, [sp, #28]
   14328:	str	r0, [fp, #-44]	; 0xffffffd4
   1432c:	add	r0, r9, #160	; 0xa0
   14330:	str	r1, [r9, #48]	; 0x30
   14334:	ldr	r1, [r7]
   14338:	str	r4, [r9, #40]	; 0x28
   1433c:	str	r1, [r9, #4]
   14340:	ldrd	r2, [sl]
   14344:	strd	r2, [r0]
   14348:	ldrb	r0, [r7, #48]	; 0x30
   1434c:	tst	r0, #4
   14350:	bne	14360 <__assert_fail@plt+0x2e70>
   14354:	add	r0, r9, #168	; 0xa8
   14358:	str	r0, [r9, #24]
   1435c:	b	14380 <__assert_fail@plt+0x2e90>
   14360:	ldr	r0, [r9, #28]
   14364:	ldr	r2, [r9, #52]	; 0x34
   14368:	add	r1, r9, #168	; 0xa8
   1436c:	str	r0, [r9, #24]
   14370:	ldr	r0, [sp, #40]	; 0x28
   14374:	add	r2, r2, #1
   14378:	bl	11220 <memmove@plt>
   1437c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14380:	ldr	r0, [r7, #44]	; 0x2c
   14384:	ldr	r2, [r7, #48]	; 0x30
   14388:	cmp	r0, #0
   1438c:	beq	143c0 <__assert_fail@plt+0x2ed0>
   14390:	ands	r0, r2, #1024	; 0x400
   14394:	bne	143c0 <__assert_fail@plt+0x2ed0>
   14398:	mov	r0, r7
   1439c:	mov	r1, r9
   143a0:	mov	r2, #0
   143a4:	bl	130ec <__assert_fail@plt+0x1bfc>
   143a8:	mov	sl, r5
   143ac:	ldr	r7, [fp, #-36]	; 0xffffffdc
   143b0:	ldr	r5, [fp, #-40]	; 0xffffffd8
   143b4:	mov	r1, #0
   143b8:	strh	r0, [r9, #56]	; 0x38
   143bc:	b	14440 <__assert_fail@plt+0x2f50>
   143c0:	ldrb	r3, [sl, #18]
   143c4:	mov	r0, #0
   143c8:	tst	r2, #8
   143cc:	mov	r1, #0
   143d0:	beq	143f4 <__assert_fail@plt+0x2f04>
   143d4:	orr	r1, r3, #4
   143d8:	cmp	r1, #4
   143dc:	mov	r1, #0
   143e0:	beq	143f4 <__assert_fail@plt+0x2f04>
   143e4:	eor	r1, r3, #10
   143e8:	and	r2, r2, #16
   143ec:	orrs	r1, r2, r1
   143f0:	movwne	r1, #1
   143f4:	mov	r6, #11
   143f8:	mov	sl, r5
   143fc:	sub	r3, r3, #1
   14400:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14404:	add	r2, r9, #112	; 0x70
   14408:	strh	r6, [r9, #56]	; 0x38
   1440c:	uxtb	r6, r3
   14410:	cmp	r6, #11
   14414:	bhi	14428 <__assert_fail@plt+0x2f38>
   14418:	sxtb	r0, r3
   1441c:	movw	r3, #41656	; 0xa2b8
   14420:	movt	r3, #1
   14424:	ldr	r0, [r3, r0, lsl #2]
   14428:	cmp	r1, #0
   1442c:	str	r0, [r9, #80]	; 0x50
   14430:	mov	r0, #2
   14434:	mov	r1, #0
   14438:	movwne	r0, #1
   1443c:	strd	r0, [r2]
   14440:	cmp	r5, #0
   14444:	str	r1, [r9, #8]
   14448:	mov	r4, r9
   1444c:	ldrne	r0, [sp, #44]	; 0x2c
   14450:	movne	r4, r5
   14454:	strne	r9, [r0, #8]
   14458:	movw	r0, #10000	; 0x2710
   1445c:	cmp	r8, r0
   14460:	bne	144d8 <__assert_fail@plt+0x2fe8>
   14464:	ldr	r0, [sp, #24]
   14468:	ldr	r0, [r0]
   1446c:	cmp	r0, #0
   14470:	bne	144d8 <__assert_fail@plt+0x2fe8>
   14474:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14478:	mov	r0, sl
   1447c:	bl	14bb0 <__assert_fail@plt+0x36c0>
   14480:	mov	r1, #0
   14484:	str	r1, [sp, #20]
   14488:	movw	r1, #19778	; 0x4d42
   1448c:	movt	r1, #65363	; 0xff53
   14490:	cmp	r0, r1
   14494:	movwne	r1, #26985	; 0x6969
   14498:	cmpne	r0, r1
   1449c:	bne	144bc <__assert_fail@plt+0x2fcc>
   144a0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   144a4:	mov	r1, #0
   144a8:	b	144d8 <__assert_fail@plt+0x2fe8>
   144ac:	mov	sl, r5
   144b0:	ldr	r5, [fp, #-40]	; 0xffffffd8
   144b4:	mov	r1, #0
   144b8:	b	144ec <__assert_fail@plt+0x2ffc>
   144bc:	movw	r1, #6548	; 0x1994
   144c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   144c4:	movt	r1, #258	; 0x102
   144c8:	cmp	r0, r1
   144cc:	mov	r1, #0
   144d0:	movne	r0, #1
   144d4:	strne	r0, [sp, #20]
   144d8:	ldr	r0, [sp, #32]
   144dc:	add	r8, r8, #1
   144e0:	cmp	r0, r8
   144e4:	bls	14608 <__assert_fail@plt+0x3118>
   144e8:	mov	r5, r4
   144ec:	ldr	r4, [sl, #12]
   144f0:	cmp	r4, #0
   144f4:	bne	14210 <__assert_fail@plt+0x2d20>
   144f8:	ldr	r0, [sp, #16]
   144fc:	ldr	r4, [sp, #12]
   14500:	ldr	r9, [sp, #8]
   14504:	b	145b4 <__assert_fail@plt+0x30c4>
   14508:	ldr	r4, [sp, #12]
   1450c:	mov	r8, #0
   14510:	mov	r0, #0
   14514:	str	r0, [sp, #20]
   14518:	b	146b0 <__assert_fail@plt+0x31c0>
   1451c:	ldr	r6, [sp, #36]	; 0x24
   14520:	mov	r0, r9
   14524:	ldr	r4, [r6]
   14528:	bl	12ca8 <__assert_fail@plt+0x17b8>
   1452c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14530:	bl	133d8 <__assert_fail@plt+0x1ee8>
   14534:	ldr	r0, [r5, #12]
   14538:	mov	r8, r5
   1453c:	bl	114cc <closedir@plt>
   14540:	mov	r0, #7
   14544:	strh	r0, [r5, #56]	; 0x38
   14548:	mov	r5, #0
   1454c:	str	r5, [r8, #12]
   14550:	ldr	r0, [r7, #48]	; 0x30
   14554:	orr	r0, r0, #8192	; 0x2000
   14558:	str	r0, [r7, #48]	; 0x30
   1455c:	str	r4, [r6]
   14560:	b	147ec <__assert_fail@plt+0x32fc>
   14564:	ldr	r0, [sp, #36]	; 0x24
   14568:	ldr	r9, [sp, #8]
   1456c:	mov	sl, r5
   14570:	ldr	r0, [r0]
   14574:	cmp	r0, #0
   14578:	beq	14590 <__assert_fail@plt+0x30a0>
   1457c:	str	r0, [sl, #32]
   14580:	orrs	r0, r9, r8
   14584:	mov	r0, #4
   14588:	movwne	r0, #7
   1458c:	strh	r0, [sl, #56]	; 0x38
   14590:	ldr	r0, [sl, #12]
   14594:	ldr	r4, [sp, #12]
   14598:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1459c:	cmp	r0, #0
   145a0:	beq	145b0 <__assert_fail@plt+0x30c0>
   145a4:	bl	114cc <closedir@plt>
   145a8:	mov	r0, #0
   145ac:	str	r0, [sl, #12]
   145b0:	ldr	r0, [sp, #16]
   145b4:	tst	r0, #1
   145b8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   145bc:	b	1461c <__assert_fail@plt+0x312c>
   145c0:	mov	r0, r9
   145c4:	bl	12ca8 <__assert_fail@plt+0x17b8>
   145c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   145cc:	bl	133d8 <__assert_fail@plt+0x1ee8>
   145d0:	ldr	r0, [r5, #12]
   145d4:	mov	r8, r5
   145d8:	bl	114cc <closedir@plt>
   145dc:	mov	r0, #7
   145e0:	ldr	r1, [sp, #36]	; 0x24
   145e4:	strh	r0, [r5, #56]	; 0x38
   145e8:	mov	r5, #0
   145ec:	str	r5, [r8, #12]
   145f0:	ldr	r0, [r7, #48]	; 0x30
   145f4:	orr	r0, r0, #8192	; 0x2000
   145f8:	str	r0, [r7, #48]	; 0x30
   145fc:	mov	r0, #36	; 0x24
   14600:	str	r0, [r1]
   14604:	b	147ec <__assert_fail@plt+0x32fc>
   14608:	ldr	r0, [sp, #16]
   1460c:	mov	r5, r4
   14610:	ldr	r4, [sp, #12]
   14614:	ldr	r9, [sp, #8]
   14618:	tst	r0, #1
   1461c:	ldr	ip, [sp, #4]
   14620:	beq	146b0 <__assert_fail@plt+0x31c0>
   14624:	ldr	r1, [r7, #4]
   14628:	ldr	r0, [r7, #24]
   1462c:	cmp	r1, #0
   14630:	beq	14660 <__assert_fail@plt+0x3170>
   14634:	ldr	r2, [r1, #24]
   14638:	add	r3, r1, #168	; 0xa8
   1463c:	cmp	r2, r3
   14640:	beq	14654 <__assert_fail@plt+0x3164>
   14644:	ldr	r3, [r1, #28]
   14648:	sub	r2, r2, r3
   1464c:	add	r2, r0, r2
   14650:	str	r2, [r1, #24]
   14654:	str	r0, [r1, #28]
   14658:	ldr	r1, [r1, #8]
   1465c:	b	1462c <__assert_fail@plt+0x313c>
   14660:	ldr	r1, [r5, #48]	; 0x30
   14664:	cmp	r1, #0
   14668:	bmi	146b0 <__assert_fail@plt+0x31c0>
   1466c:	mov	r1, r5
   14670:	ldr	r2, [r1, #24]
   14674:	add	r3, r1, #168	; 0xa8
   14678:	cmp	r2, r3
   1467c:	beq	14690 <__assert_fail@plt+0x31a0>
   14680:	ldr	r3, [r1, #28]
   14684:	sub	r2, r2, r3
   14688:	add	r2, r0, r2
   1468c:	str	r2, [r1, #24]
   14690:	str	r0, [r1, #28]
   14694:	ldr	r2, [r1, #8]
   14698:	cmp	r2, #0
   1469c:	ldreq	r2, [r1, #4]
   146a0:	ldr	r1, [r2, #48]	; 0x30
   146a4:	cmn	r1, #1
   146a8:	mov	r1, r2
   146ac:	bgt	14670 <__assert_fail@plt+0x3180>
   146b0:	ldrb	r0, [r7, #48]	; 0x30
   146b4:	tst	r0, #4
   146b8:	beq	146e4 <__assert_fail@plt+0x31f4>
   146bc:	ldr	r2, [sp, #40]	; 0x28
   146c0:	ldr	r0, [r7, #36]	; 0x24
   146c4:	ldr	r3, [sp, #48]	; 0x30
   146c8:	cmp	r3, r0
   146cc:	sub	r1, r2, #1
   146d0:	mov	r0, #0
   146d4:	moveq	r2, r1
   146d8:	cmp	r8, #0
   146dc:	moveq	r2, r1
   146e0:	strb	r0, [r2]
   146e4:	cmp	r9, #0
   146e8:	movwne	r9, #1
   146ec:	orrs	r0, r9, ip
   146f0:	beq	1471c <__assert_fail@plt+0x322c>
   146f4:	cmp	r8, #0
   146f8:	bne	14750 <__assert_fail@plt+0x3260>
   146fc:	cmp	r4, #3
   14700:	bne	147e0 <__assert_fail@plt+0x32f0>
   14704:	ldrh	r0, [sl, #56]	; 0x38
   14708:	cmp	r0, #4
   1470c:	cmpne	r0, #7
   14710:	movne	r0, #6
   14714:	strhne	r0, [sl, #56]	; 0x38
   14718:	b	147e0 <__assert_fail@plt+0x32f0>
   1471c:	cmp	r4, #1
   14720:	cmpne	r8, #0
   14724:	bne	14750 <__assert_fail@plt+0x3260>
   14728:	ldr	r0, [sl, #48]	; 0x30
   1472c:	cmp	r0, #0
   14730:	beq	147b8 <__assert_fail@plt+0x32c8>
   14734:	ldr	r1, [sl, #4]
   14738:	movw	r3, #41651	; 0xa2b3
   1473c:	mov	r0, r7
   14740:	mvn	r2, #0
   14744:	movt	r3, #1
   14748:	bl	13c88 <__assert_fail@plt+0x2798>
   1474c:	b	147c0 <__assert_fail@plt+0x32d0>
   14750:	ldr	r0, [sp, #20]
   14754:	tst	r0, #1
   14758:	beq	14788 <__assert_fail@plt+0x3298>
   1475c:	movw	r0, #19320	; 0x4b78
   14760:	mov	r1, r5
   14764:	mov	r2, r8
   14768:	movt	r0, #1
   1476c:	str	r0, [r7, #44]	; 0x2c
   14770:	mov	r0, r7
   14774:	bl	13228 <__assert_fail@plt+0x1d38>
   14778:	mov	r5, r0
   1477c:	mov	r0, #0
   14780:	str	r0, [r7, #44]	; 0x2c
   14784:	b	147ec <__assert_fail@plt+0x32fc>
   14788:	cmp	r8, #2
   1478c:	bcc	147ec <__assert_fail@plt+0x32fc>
   14790:	ldr	r0, [sp, #24]
   14794:	ldr	r0, [r0]
   14798:	cmp	r0, #0
   1479c:	beq	147ec <__assert_fail@plt+0x32fc>
   147a0:	mov	r0, r7
   147a4:	mov	r1, r5
   147a8:	mov	r2, r8
   147ac:	bl	13228 <__assert_fail@plt+0x1d38>
   147b0:	mov	r5, r0
   147b4:	b	147ec <__assert_fail@plt+0x32fc>
   147b8:	mov	r0, r7
   147bc:	bl	147f8 <__assert_fail@plt+0x3308>
   147c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   147c4:	cmp	r0, #0
   147c8:	beq	146f4 <__assert_fail@plt+0x3204>
   147cc:	mov	r0, #7
   147d0:	strh	r0, [sl, #56]	; 0x38
   147d4:	ldr	r0, [r7, #48]	; 0x30
   147d8:	orr	r0, r0, #8192	; 0x2000
   147dc:	str	r0, [r7, #48]	; 0x30
   147e0:	mov	r0, r5
   147e4:	bl	133d8 <__assert_fail@plt+0x1ee8>
   147e8:	mov	r5, #0
   147ec:	mov	r0, r5
   147f0:	sub	sp, fp, #28
   147f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f8:	push	{r4, r5, fp, lr}
   147fc:	add	fp, sp, #8
   14800:	mov	r4, r0
   14804:	ldr	r0, [r0, #48]	; 0x30
   14808:	mov	r5, #0
   1480c:	tst	r0, #4
   14810:	bne	14844 <__assert_fail@plt+0x3354>
   14814:	tst	r0, #512	; 0x200
   14818:	bne	14834 <__assert_fail@plt+0x3344>
   1481c:	ldr	r0, [r4, #28]
   14820:	bl	11454 <fchdir@plt>
   14824:	cmp	r0, #0
   14828:	mov	r5, r0
   1482c:	movwne	r5, #1
   14830:	b	14844 <__assert_fail@plt+0x3354>
   14834:	mov	r0, r4
   14838:	mvn	r1, #99	; 0x63
   1483c:	mov	r2, #1
   14840:	bl	14910 <__assert_fail@plt+0x3420>
   14844:	add	r0, r4, #60	; 0x3c
   14848:	bl	13540 <__assert_fail@plt+0x2050>
   1484c:	mov	r0, r5
   14850:	pop	{r4, r5, fp, pc}
   14854:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14858:	add	fp, sp, #24
   1485c:	mov	r6, r0
   14860:	ldrh	r0, [r0, #48]	; 0x30
   14864:	mov	r4, r1
   14868:	add	r5, r1, #64	; 0x40
   1486c:	movw	r1, #258	; 0x102
   14870:	tst	r0, r1
   14874:	beq	148e8 <__assert_fail@plt+0x33f8>
   14878:	mov	r0, #24
   1487c:	bl	18ab8 <__assert_fail@plt+0x75c8>
   14880:	mov	r8, #0
   14884:	cmp	r0, #0
   14888:	beq	14908 <__assert_fail@plt+0x3418>
   1488c:	ldrd	r2, [r5]
   14890:	mov	r7, r0
   14894:	add	r0, r4, #160	; 0xa0
   14898:	stm	r7, {r2, r3}
   1489c:	add	r2, r7, #8
   148a0:	ldrd	r0, [r0]
   148a4:	stm	r2, {r0, r1, r4}
   148a8:	mov	r1, r7
   148ac:	ldr	r0, [r6, #56]	; 0x38
   148b0:	bl	15b18 <__assert_fail@plt+0x4628>
   148b4:	cmp	r0, r7
   148b8:	beq	148e0 <__assert_fail@plt+0x33f0>
   148bc:	mov	r5, r0
   148c0:	mov	r0, r7
   148c4:	bl	12ca8 <__assert_fail@plt+0x17b8>
   148c8:	cmp	r5, #0
   148cc:	beq	14908 <__assert_fail@plt+0x3418>
   148d0:	ldr	r0, [r5, #16]
   148d4:	mov	r1, #2
   148d8:	strh	r1, [r4, #56]	; 0x38
   148dc:	str	r0, [r4]
   148e0:	mov	r8, #1
   148e4:	b	14908 <__assert_fail@plt+0x3418>
   148e8:	ldr	r0, [r6, #56]	; 0x38
   148ec:	mov	r1, r5
   148f0:	bl	18bd4 <__assert_fail@plt+0x76e4>
   148f4:	cmp	r0, #0
   148f8:	mov	r8, #1
   148fc:	movne	r0, #2
   14900:	strhne	r0, [r4, #56]	; 0x38
   14904:	strne	r4, [r4]
   14908:	mov	r0, r8
   1490c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14910:	push	{r4, r5, fp, lr}
   14914:	add	fp, sp, #8
   14918:	mov	r4, r1
   1491c:	ldr	r1, [r0, #32]
   14920:	mov	r5, r0
   14924:	cmp	r1, r4
   14928:	bne	14934 <__assert_fail@plt+0x3444>
   1492c:	cmn	r1, #100	; 0x64
   14930:	bne	14974 <__assert_fail@plt+0x3484>
   14934:	cmp	r2, #0
   14938:	beq	14950 <__assert_fail@plt+0x3460>
   1493c:	add	r0, r5, #60	; 0x3c
   14940:	bl	15c98 <__assert_fail@plt+0x47a8>
   14944:	cmp	r0, #0
   14948:	bpl	14968 <__assert_fail@plt+0x3478>
   1494c:	b	1496c <__assert_fail@plt+0x347c>
   14950:	cmp	r1, #0
   14954:	bmi	1496c <__assert_fail@plt+0x347c>
   14958:	ldr	r0, [r5, #48]	; 0x30
   1495c:	ands	r0, r0, #4
   14960:	bne	1496c <__assert_fail@plt+0x347c>
   14964:	mov	r0, r1
   14968:	bl	114b4 <close@plt>
   1496c:	str	r4, [r5, #32]
   14970:	pop	{r4, r5, fp, pc}
   14974:	bl	114a8 <abort@plt>
   14978:	push	{fp, lr}
   1497c:	mov	fp, sp
   14980:	cmp	r2, #5
   14984:	bcc	1499c <__assert_fail@plt+0x34ac>
   14988:	bl	11394 <__errno_location@plt>
   1498c:	mov	r1, #22
   14990:	str	r1, [r0]
   14994:	mov	r0, #1
   14998:	pop	{fp, pc}
   1499c:	mov	r0, #0
   149a0:	strh	r2, [r1, #60]	; 0x3c
   149a4:	pop	{fp, pc}
   149a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149ac:	add	fp, sp, #28
   149b0:	sub	sp, sp, #4
   149b4:	mov	r5, r0
   149b8:	mvn	r0, #4096	; 0x1000
   149bc:	tst	r1, r0
   149c0:	beq	149d8 <__assert_fail@plt+0x34e8>
   149c4:	bl	11394 <__errno_location@plt>
   149c8:	mov	r1, #22
   149cc:	mov	r4, #0
   149d0:	str	r1, [r0]
   149d4:	b	14ad4 <__assert_fail@plt+0x35e4>
   149d8:	ldr	r6, [r5]
   149dc:	mov	r7, r1
   149e0:	bl	11394 <__errno_location@plt>
   149e4:	mov	r4, #0
   149e8:	mov	sl, r0
   149ec:	str	r4, [r0]
   149f0:	ldrb	r0, [r5, #49]	; 0x31
   149f4:	tst	r0, #32
   149f8:	bne	14ad4 <__assert_fail@plt+0x35e4>
   149fc:	ldrh	r0, [r6, #56]	; 0x38
   14a00:	cmp	r0, #1
   14a04:	beq	14a14 <__assert_fail@plt+0x3524>
   14a08:	cmp	r0, #9
   14a0c:	ldreq	r4, [r6, #8]
   14a10:	b	14ad4 <__assert_fail@plt+0x35e4>
   14a14:	ldr	r0, [r5, #4]
   14a18:	cmp	r0, #0
   14a1c:	blne	133d8 <__assert_fail@plt+0x1ee8>
   14a20:	mov	r9, #1
   14a24:	cmp	r7, #4096	; 0x1000
   14a28:	bne	14a3c <__assert_fail@plt+0x354c>
   14a2c:	ldr	r0, [r5, #48]	; 0x30
   14a30:	mov	r9, #2
   14a34:	orr	r0, r0, #4096	; 0x1000
   14a38:	str	r0, [r5, #48]	; 0x30
   14a3c:	ldr	r0, [r6, #48]	; 0x30
   14a40:	cmp	r0, #0
   14a44:	bne	14ac0 <__assert_fail@plt+0x35d0>
   14a48:	ldr	r0, [r6, #24]
   14a4c:	ldrb	r0, [r0]
   14a50:	cmp	r0, #47	; 0x2f
   14a54:	beq	14ac0 <__assert_fail@plt+0x35d0>
   14a58:	ldrb	r0, [r5, #48]	; 0x30
   14a5c:	tst	r0, #4
   14a60:	bne	14ac0 <__assert_fail@plt+0x35d0>
   14a64:	movw	r1, #41652	; 0xa2b4
   14a68:	mov	r0, r5
   14a6c:	movt	r1, #1
   14a70:	bl	133a8 <__assert_fail@plt+0x1eb8>
   14a74:	cmn	r0, #1
   14a78:	ble	14ae0 <__assert_fail@plt+0x35f0>
   14a7c:	mov	r8, r0
   14a80:	mov	r0, r5
   14a84:	mov	r1, r9
   14a88:	bl	13e68 <__assert_fail@plt+0x2978>
   14a8c:	str	r0, [r5, #4]
   14a90:	ldrb	r0, [r5, #49]	; 0x31
   14a94:	tst	r0, #2
   14a98:	bne	14aec <__assert_fail@plt+0x35fc>
   14a9c:	mov	r0, r8
   14aa0:	bl	11454 <fchdir@plt>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14b00 <__assert_fail@plt+0x3610>
   14aac:	ldr	r5, [sl]
   14ab0:	mov	r0, r8
   14ab4:	bl	114b4 <close@plt>
   14ab8:	str	r5, [sl]
   14abc:	b	14ad4 <__assert_fail@plt+0x35e4>
   14ac0:	mov	r0, r5
   14ac4:	mov	r1, r9
   14ac8:	bl	13e68 <__assert_fail@plt+0x2978>
   14acc:	mov	r4, r0
   14ad0:	str	r0, [r5, #4]
   14ad4:	mov	r0, r4
   14ad8:	sub	sp, fp, #28
   14adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae0:	mov	r4, #0
   14ae4:	str	r4, [r5, #4]
   14ae8:	b	14ad4 <__assert_fail@plt+0x35e4>
   14aec:	mov	r0, r5
   14af0:	mov	r1, r8
   14af4:	mov	r2, #1
   14af8:	bl	14910 <__assert_fail@plt+0x3420>
   14afc:	b	14b08 <__assert_fail@plt+0x3618>
   14b00:	mov	r0, r8
   14b04:	bl	114b4 <close@plt>
   14b08:	ldr	r4, [r5, #4]
   14b0c:	b	14ad4 <__assert_fail@plt+0x35e4>
   14b10:	push	{fp, lr}
   14b14:	mov	fp, sp
   14b18:	mov	r2, r1
   14b1c:	ldrd	r0, [r0, #8]
   14b20:	mov	r3, #0
   14b24:	bl	19238 <__assert_fail@plt+0x7d48>
   14b28:	mov	r0, r2
   14b2c:	pop	{fp, pc}
   14b30:	push	{r4, r5, fp, lr}
   14b34:	add	fp, sp, #8
   14b38:	ldrd	r2, [r1, #8]
   14b3c:	ldrd	r4, [r0, #8]
   14b40:	eor	r3, r5, r3
   14b44:	eor	r2, r4, r2
   14b48:	orrs	r2, r2, r3
   14b4c:	mov	r2, #0
   14b50:	bne	14b70 <__assert_fail@plt+0x3680>
   14b54:	ldrd	r2, [r1]
   14b58:	ldrd	r0, [r0]
   14b5c:	eor	r1, r1, r3
   14b60:	eor	r0, r0, r2
   14b64:	orr	r0, r0, r1
   14b68:	clz	r0, r0
   14b6c:	lsr	r2, r0, #5
   14b70:	mov	r0, r2
   14b74:	pop	{r4, r5, fp, pc}
   14b78:	push	{r4, r5, fp, lr}
   14b7c:	add	fp, sp, #8
   14b80:	ldr	r0, [r0]
   14b84:	ldrd	r2, [r0, #160]	; 0xa0
   14b88:	ldr	r0, [r1]
   14b8c:	ldrd	r4, [r0, #160]	; 0xa0
   14b90:	mov	r0, #0
   14b94:	subs	r1, r4, r2
   14b98:	sbcs	r1, r5, r3
   14b9c:	movwcc	r0, #1
   14ba0:	subs	r1, r2, r4
   14ba4:	sbcs	r1, r3, r5
   14ba8:	subcc	r0, r0, #1
   14bac:	pop	{r4, r5, fp, pc}
   14bb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14bb4:	add	fp, sp, #24
   14bb8:	sub	sp, sp, #96	; 0x60
   14bbc:	ldr	r7, [r0, #44]	; 0x2c
   14bc0:	mov	r4, r0
   14bc4:	mov	r5, #0
   14bc8:	ldrb	r0, [r7, #49]	; 0x31
   14bcc:	tst	r0, #2
   14bd0:	beq	14cc4 <__assert_fail@plt+0x37d4>
   14bd4:	ldr	r6, [r7, #52]	; 0x34
   14bd8:	mov	r9, r1
   14bdc:	cmp	r6, #0
   14be0:	bne	14c20 <__assert_fail@plt+0x3730>
   14be4:	movw	r0, #11432	; 0x2ca8
   14be8:	movw	r2, #19664	; 0x4cd0
   14bec:	movw	r3, #19696	; 0x4cf0
   14bf0:	mov	r1, #0
   14bf4:	mov	r8, #0
   14bf8:	movt	r0, #1
   14bfc:	movt	r2, #1
   14c00:	movt	r3, #1
   14c04:	str	r0, [sp]
   14c08:	mov	r0, #13
   14c0c:	bl	1519c <__assert_fail@plt+0x3cac>
   14c10:	mov	r6, r0
   14c14:	cmp	r0, #0
   14c18:	str	r0, [r7, #52]	; 0x34
   14c1c:	beq	14c50 <__assert_fail@plt+0x3760>
   14c20:	ldrd	r0, [r4, #64]	; 0x40
   14c24:	str	r1, [sp, #12]
   14c28:	str	r0, [sp, #8]
   14c2c:	add	r1, sp, #8
   14c30:	mov	r0, r6
   14c34:	bl	14ee8 <__assert_fail@plt+0x39f8>
   14c38:	cmp	r0, #0
   14c3c:	beq	14c48 <__assert_fail@plt+0x3758>
   14c40:	ldr	r5, [r0, #8]
   14c44:	b	14cc4 <__assert_fail@plt+0x37d4>
   14c48:	mov	r8, #1
   14c4c:	b	14c54 <__assert_fail@plt+0x3764>
   14c50:	mov	r6, #0
   14c54:	cmp	r9, #0
   14c58:	bmi	14cc4 <__assert_fail@plt+0x37d4>
   14c5c:	add	r1, sp, #8
   14c60:	mov	r0, r9
   14c64:	bl	111c0 <fstatfs64@plt>
   14c68:	cmp	r0, #0
   14c6c:	bne	14cc4 <__assert_fail@plt+0x37d4>
   14c70:	cmp	r8, #0
   14c74:	beq	14cc0 <__assert_fail@plt+0x37d0>
   14c78:	mov	r0, #16
   14c7c:	bl	18ab8 <__assert_fail@plt+0x75c8>
   14c80:	cmp	r0, #0
   14c84:	beq	14cc0 <__assert_fail@plt+0x37d0>
   14c88:	mov	r5, r0
   14c8c:	ldrd	r0, [r4, #64]	; 0x40
   14c90:	ldr	r2, [sp, #8]
   14c94:	stm	r5, {r0, r1, r2}
   14c98:	mov	r0, r6
   14c9c:	mov	r1, r5
   14ca0:	bl	15b18 <__assert_fail@plt+0x4628>
   14ca4:	cmp	r0, #0
   14ca8:	beq	14cb8 <__assert_fail@plt+0x37c8>
   14cac:	cmp	r0, r5
   14cb0:	beq	14cc0 <__assert_fail@plt+0x37d0>
   14cb4:	bl	114a8 <abort@plt>
   14cb8:	mov	r0, r5
   14cbc:	bl	12ca8 <__assert_fail@plt+0x17b8>
   14cc0:	ldr	r5, [sp, #8]
   14cc4:	mov	r0, r5
   14cc8:	sub	sp, fp, #24
   14ccc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14cd0:	push	{fp, lr}
   14cd4:	mov	fp, sp
   14cd8:	mov	r2, r1
   14cdc:	ldrd	r0, [r0]
   14ce0:	mov	r3, #0
   14ce4:	bl	19238 <__assert_fail@plt+0x7d48>
   14ce8:	mov	r0, r2
   14cec:	pop	{fp, pc}
   14cf0:	ldrd	r2, [r1]
   14cf4:	ldrd	r0, [r0]
   14cf8:	eor	r1, r1, r3
   14cfc:	eor	r0, r0, r2
   14d00:	orr	r0, r0, r1
   14d04:	clz	r0, r0
   14d08:	lsr	r0, r0, #5
   14d0c:	bx	lr
   14d10:	ldr	r0, [r0, #8]
   14d14:	bx	lr
   14d18:	ldr	r0, [r0, #12]
   14d1c:	bx	lr
   14d20:	ldr	r0, [r0, #16]
   14d24:	bx	lr
   14d28:	ldm	r0, {r2, ip}
   14d2c:	mov	r0, #0
   14d30:	cmp	r2, ip
   14d34:	bxcs	lr
   14d38:	mov	r0, #0
   14d3c:	ldr	r1, [r2]
   14d40:	cmp	r1, #0
   14d44:	beq	14d68 <__assert_fail@plt+0x3878>
   14d48:	mov	r3, #0
   14d4c:	mov	r1, r2
   14d50:	ldr	r1, [r1, #4]
   14d54:	add	r3, r3, #1
   14d58:	cmp	r1, #0
   14d5c:	bne	14d50 <__assert_fail@plt+0x3860>
   14d60:	cmp	r3, r0
   14d64:	movhi	r0, r3
   14d68:	add	r2, r2, #8
   14d6c:	cmp	r2, ip
   14d70:	bcc	14d3c <__assert_fail@plt+0x384c>
   14d74:	bx	lr
   14d78:	push	{fp, lr}
   14d7c:	mov	fp, sp
   14d80:	ldm	r0, {r3, ip}
   14d84:	mov	lr, #0
   14d88:	mov	r1, #0
   14d8c:	cmp	r3, ip
   14d90:	bcs	14dcc <__assert_fail@plt+0x38dc>
   14d94:	mov	r1, #0
   14d98:	mov	lr, #0
   14d9c:	ldr	r2, [r3]
   14da0:	cmp	r2, #0
   14da4:	beq	14dc0 <__assert_fail@plt+0x38d0>
   14da8:	mov	r2, r3
   14dac:	ldr	r2, [r2, #4]
   14db0:	add	r1, r1, #1
   14db4:	cmp	r2, #0
   14db8:	bne	14dac <__assert_fail@plt+0x38bc>
   14dbc:	add	lr, lr, #1
   14dc0:	add	r3, r3, #8
   14dc4:	cmp	r3, ip
   14dc8:	bcc	14d9c <__assert_fail@plt+0x38ac>
   14dcc:	ldr	r2, [r0, #12]
   14dd0:	cmp	lr, r2
   14dd4:	bne	14dec <__assert_fail@plt+0x38fc>
   14dd8:	ldr	r2, [r0, #16]
   14ddc:	mov	r0, #1
   14de0:	cmp	r1, r2
   14de4:	movne	r0, #0
   14de8:	pop	{fp, pc}
   14dec:	mov	r0, #0
   14df0:	pop	{fp, pc}
   14df4:	nop	{0}
   14df8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14dfc:	add	fp, sp, #24
   14e00:	sub	sp, sp, #8
   14e04:	ldr	r6, [r0]
   14e08:	ldmib	r0, {r2, r7, r8}
   14e0c:	ldr	r3, [r0, #16]
   14e10:	mov	r4, r1
   14e14:	mov	r5, #0
   14e18:	cmp	r6, r2
   14e1c:	bcs	14e5c <__assert_fail@plt+0x396c>
   14e20:	mov	r5, #0
   14e24:	ldr	r0, [r6]
   14e28:	cmp	r0, #0
   14e2c:	beq	14e50 <__assert_fail@plt+0x3960>
   14e30:	mov	r0, #0
   14e34:	mov	r1, r6
   14e38:	ldr	r1, [r1, #4]
   14e3c:	add	r0, r0, #1
   14e40:	cmp	r1, #0
   14e44:	bne	14e38 <__assert_fail@plt+0x3948>
   14e48:	cmp	r0, r5
   14e4c:	movhi	r5, r0
   14e50:	add	r6, r6, #8
   14e54:	cmp	r6, r2
   14e58:	bcc	14e24 <__assert_fail@plt+0x3934>
   14e5c:	movw	r2, #41704	; 0xa2e8
   14e60:	mov	r0, r4
   14e64:	mov	r1, #1
   14e68:	movt	r2, #1
   14e6c:	bl	113dc <__fprintf_chk@plt>
   14e70:	movw	r2, #41728	; 0xa300
   14e74:	mov	r0, r4
   14e78:	mov	r1, #1
   14e7c:	mov	r3, r7
   14e80:	movt	r2, #1
   14e84:	bl	113dc <__fprintf_chk@plt>
   14e88:	vmov	s0, r8
   14e8c:	vldr	d16, [pc, #76]	; 14ee0 <__assert_fail@plt+0x39f0>
   14e90:	movw	r2, #41752	; 0xa318
   14e94:	mov	r0, r4
   14e98:	mov	r1, #1
   14e9c:	mov	r3, r8
   14ea0:	movt	r2, #1
   14ea4:	vcvt.f64.u32	d17, s0
   14ea8:	vmov	s0, r7
   14eac:	vcvt.f64.u32	d18, s0
   14eb0:	vmul.f64	d16, d17, d16
   14eb4:	vdiv.f64	d16, d16, d18
   14eb8:	vstr	d16, [sp]
   14ebc:	bl	113dc <__fprintf_chk@plt>
   14ec0:	movw	r2, #41785	; 0xa339
   14ec4:	mov	r0, r4
   14ec8:	mov	r1, #1
   14ecc:	mov	r3, r5
   14ed0:	movt	r2, #1
   14ed4:	sub	sp, fp, #24
   14ed8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14edc:	b	113dc <__fprintf_chk@plt>
   14ee0:	andeq	r0, r0, r0
   14ee4:	subsmi	r0, r9, r0
   14ee8:	push	{r4, r5, r6, r7, fp, lr}
   14eec:	add	fp, sp, #16
   14ef0:	mov	r4, r1
   14ef4:	ldr	r1, [r0, #8]
   14ef8:	ldr	r2, [r0, #24]
   14efc:	mov	r5, r0
   14f00:	mov	r0, r4
   14f04:	blx	r2
   14f08:	ldr	r1, [r5, #8]
   14f0c:	cmp	r0, r1
   14f10:	bcs	14f70 <__assert_fail@plt+0x3a80>
   14f14:	ldr	r7, [r5]
   14f18:	mov	r6, #0
   14f1c:	ldr	r1, [r7, r0, lsl #3]!
   14f20:	cmp	r1, #0
   14f24:	cmpne	r7, #0
   14f28:	bne	14f58 <__assert_fail@plt+0x3a68>
   14f2c:	mov	r0, r6
   14f30:	pop	{r4, r5, r6, r7, fp, pc}
   14f34:	ldr	r2, [r5, #28]
   14f38:	mov	r0, r4
   14f3c:	blx	r2
   14f40:	cmp	r0, #0
   14f44:	bne	14f68 <__assert_fail@plt+0x3a78>
   14f48:	ldr	r7, [r7, #4]
   14f4c:	cmp	r7, #0
   14f50:	beq	14f2c <__assert_fail@plt+0x3a3c>
   14f54:	ldr	r1, [r7]
   14f58:	cmp	r1, r4
   14f5c:	bne	14f34 <__assert_fail@plt+0x3a44>
   14f60:	mov	r6, r4
   14f64:	b	14f2c <__assert_fail@plt+0x3a3c>
   14f68:	ldr	r6, [r7]
   14f6c:	b	14f2c <__assert_fail@plt+0x3a3c>
   14f70:	bl	114a8 <abort@plt>
   14f74:	push	{fp, lr}
   14f78:	mov	fp, sp
   14f7c:	ldr	r1, [r0, #16]
   14f80:	cmp	r1, #0
   14f84:	beq	14fa4 <__assert_fail@plt+0x3ab4>
   14f88:	ldm	r0, {r1, r2}
   14f8c:	cmp	r1, r2
   14f90:	bcs	14fac <__assert_fail@plt+0x3abc>
   14f94:	ldr	r0, [r1], #8
   14f98:	cmp	r0, #0
   14f9c:	beq	14f8c <__assert_fail@plt+0x3a9c>
   14fa0:	pop	{fp, pc}
   14fa4:	mov	r0, #0
   14fa8:	pop	{fp, pc}
   14fac:	bl	114a8 <abort@plt>
   14fb0:	push	{r4, r5, fp, lr}
   14fb4:	add	fp, sp, #8
   14fb8:	mov	r5, r1
   14fbc:	ldr	r1, [r0, #8]
   14fc0:	ldr	r2, [r0, #24]
   14fc4:	mov	r4, r0
   14fc8:	mov	r0, r5
   14fcc:	blx	r2
   14fd0:	ldr	r1, [r4, #8]
   14fd4:	cmp	r0, r1
   14fd8:	bcs	1503c <__assert_fail@plt+0x3b4c>
   14fdc:	ldr	r1, [r4]
   14fe0:	add	r2, r1, r0, lsl #3
   14fe4:	ldr	r3, [r2]
   14fe8:	ldr	r2, [r2, #4]
   14fec:	cmp	r3, r5
   14ff0:	beq	15000 <__assert_fail@plt+0x3b10>
   14ff4:	cmp	r2, #0
   14ff8:	bne	14fe4 <__assert_fail@plt+0x3af4>
   14ffc:	b	15010 <__assert_fail@plt+0x3b20>
   15000:	cmp	r2, #0
   15004:	beq	15010 <__assert_fail@plt+0x3b20>
   15008:	ldr	r0, [r2]
   1500c:	pop	{r4, r5, fp, pc}
   15010:	ldr	r2, [r4, #4]
   15014:	add	r0, r1, r0, lsl #3
   15018:	add	r1, r0, #8
   1501c:	cmp	r1, r2
   15020:	bcs	15034 <__assert_fail@plt+0x3b44>
   15024:	ldr	r0, [r1], #8
   15028:	cmp	r0, #0
   1502c:	beq	1501c <__assert_fail@plt+0x3b2c>
   15030:	pop	{r4, r5, fp, pc}
   15034:	mov	r0, #0
   15038:	pop	{r4, r5, fp, pc}
   1503c:	bl	114a8 <abort@plt>
   15040:	push	{r4, r5, fp, lr}
   15044:	add	fp, sp, #8
   15048:	ldm	r0, {r5, lr}
   1504c:	mov	ip, r0
   15050:	mov	r0, #0
   15054:	cmp	r5, lr
   15058:	popcs	{r4, r5, fp, pc}
   1505c:	mov	r0, #0
   15060:	ldr	r3, [r5]
   15064:	cmp	r3, #0
   15068:	cmpne	r5, #0
   1506c:	bne	15080 <__assert_fail@plt+0x3b90>
   15070:	add	r5, r5, #8
   15074:	cmp	r5, lr
   15078:	bcc	15060 <__assert_fail@plt+0x3b70>
   1507c:	b	150ac <__assert_fail@plt+0x3bbc>
   15080:	mov	r3, r5
   15084:	cmp	r0, r2
   15088:	bcs	150ac <__assert_fail@plt+0x3bbc>
   1508c:	ldr	r4, [r3]
   15090:	str	r4, [r1, r0, lsl #2]
   15094:	add	r0, r0, #1
   15098:	ldr	r3, [r3, #4]
   1509c:	cmp	r3, #0
   150a0:	bne	15084 <__assert_fail@plt+0x3b94>
   150a4:	ldr	lr, [ip, #4]
   150a8:	b	15070 <__assert_fail@plt+0x3b80>
   150ac:	pop	{r4, r5, fp, pc}
   150b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150b4:	add	fp, sp, #24
   150b8:	mov	r5, r1
   150bc:	ldr	r4, [r0]
   150c0:	ldr	r1, [r0, #4]
   150c4:	mov	r6, #0
   150c8:	cmp	r4, r1
   150cc:	bcs	15140 <__assert_fail@plt+0x3c50>
   150d0:	mov	r9, r2
   150d4:	mov	r8, r0
   150d8:	mov	r6, #0
   150dc:	ldr	r0, [r4]
   150e0:	cmp	r0, #0
   150e4:	cmpne	r4, #0
   150e8:	bne	150fc <__assert_fail@plt+0x3c0c>
   150ec:	add	r4, r4, #8
   150f0:	cmp	r4, r1
   150f4:	bcc	150dc <__assert_fail@plt+0x3bec>
   150f8:	b	15140 <__assert_fail@plt+0x3c50>
   150fc:	mov	r1, r9
   15100:	blx	r5
   15104:	cmp	r0, #0
   15108:	beq	15140 <__assert_fail@plt+0x3c50>
   1510c:	mov	r7, r4
   15110:	ldr	r7, [r7, #4]
   15114:	add	r6, r6, #1
   15118:	cmp	r7, #0
   1511c:	beq	15138 <__assert_fail@plt+0x3c48>
   15120:	ldr	r0, [r7]
   15124:	mov	r1, r9
   15128:	blx	r5
   1512c:	cmp	r0, #0
   15130:	bne	15110 <__assert_fail@plt+0x3c20>
   15134:	b	15140 <__assert_fail@plt+0x3c50>
   15138:	ldr	r1, [r8, #4]
   1513c:	b	150ec <__assert_fail@plt+0x3bfc>
   15140:	mov	r0, r6
   15144:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15148:	ldrb	r2, [r0]
   1514c:	cmp	r2, #0
   15150:	moveq	r0, #0
   15154:	bxeq	lr
   15158:	add	r3, r0, #1
   1515c:	mov	r0, #0
   15160:	rsb	r0, r0, r0, lsl #5
   15164:	uxtab	r0, r0, r2
   15168:	udiv	r2, r0, r1
   1516c:	mls	r0, r2, r1, r0
   15170:	ldrb	r2, [r3], #1
   15174:	cmp	r2, #0
   15178:	bne	15160 <__assert_fail@plt+0x3c70>
   1517c:	bx	lr
   15180:	movw	r1, #41816	; 0xa358
   15184:	movt	r1, #1
   15188:	vld1.32	{d16-d17}, [r1]!
   1518c:	ldr	r1, [r1]
   15190:	vst1.32	{d16-d17}, [r0]!
   15194:	str	r1, [r0]
   15198:	bx	lr
   1519c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151a0:	add	fp, sp, #28
   151a4:	sub	sp, sp, #4
   151a8:	movw	sl, #21136	; 0x5290
   151ac:	cmp	r3, #0
   151b0:	movw	r5, #21116	; 0x527c
   151b4:	mov	r8, r0
   151b8:	mov	r0, #40	; 0x28
   151bc:	mov	r7, r1
   151c0:	movt	sl, #1
   151c4:	movne	sl, r3
   151c8:	cmp	r2, #0
   151cc:	movt	r5, #1
   151d0:	movne	r5, r2
   151d4:	bl	18ab8 <__assert_fail@plt+0x75c8>
   151d8:	mov	r9, #0
   151dc:	cmp	r0, #0
   151e0:	beq	15270 <__assert_fail@plt+0x3d80>
   151e4:	movw	r6, #41816	; 0xa358
   151e8:	cmp	r7, #0
   151ec:	mov	r4, r0
   151f0:	movt	r6, #1
   151f4:	movne	r6, r7
   151f8:	str	r6, [r0, #20]
   151fc:	bl	152a0 <__assert_fail@plt+0x3db0>
   15200:	cmp	r0, #0
   15204:	beq	15268 <__assert_fail@plt+0x3d78>
   15208:	mov	r0, r8
   1520c:	mov	r1, r6
   15210:	bl	1534c <__assert_fail@plt+0x3e5c>
   15214:	cmp	r0, #0
   15218:	str	r0, [r4, #8]
   1521c:	beq	15268 <__assert_fail@plt+0x3d78>
   15220:	mov	r1, #8
   15224:	bl	18a64 <__assert_fail@plt+0x7574>
   15228:	cmp	r0, #0
   1522c:	str	r0, [r4]
   15230:	beq	15268 <__assert_fail@plt+0x3d78>
   15234:	ldr	r1, [fp, #8]
   15238:	mov	r2, #0
   1523c:	str	r5, [r4, #24]
   15240:	str	sl, [r4, #28]
   15244:	mov	r9, r4
   15248:	str	r1, [r4, #32]
   1524c:	str	r2, [r4, #36]	; 0x24
   15250:	str	r2, [r4, #12]
   15254:	str	r2, [r4, #16]
   15258:	ldr	r1, [r4, #8]
   1525c:	add	r0, r0, r1, lsl #3
   15260:	str	r0, [r4, #4]
   15264:	b	15270 <__assert_fail@plt+0x3d80>
   15268:	mov	r0, r4
   1526c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   15270:	mov	r0, r9
   15274:	sub	sp, fp, #28
   15278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1527c:	ror	r2, r0, #3
   15280:	udiv	r2, r2, r1
   15284:	mul	r1, r2, r1
   15288:	rsb	r0, r1, r0, ror #3
   1528c:	bx	lr
   15290:	sub	r0, r0, r1
   15294:	clz	r0, r0
   15298:	lsr	r0, r0, #5
   1529c:	bx	lr
   152a0:	ldr	r3, [r0, #20]
   152a4:	movw	r2, #41816	; 0xa358
   152a8:	mov	r1, r0
   152ac:	mov	r0, #1
   152b0:	movt	r2, #1
   152b4:	cmp	r3, r2
   152b8:	beq	1533c <__assert_fail@plt+0x3e4c>
   152bc:	vldr	s2, [pc, #124]	; 15340 <__assert_fail@plt+0x3e50>
   152c0:	vldr	s0, [r3, #8]
   152c4:	vcmpe.f32	s0, s2
   152c8:	vmrs	APSR_nzcv, fpscr
   152cc:	ble	15334 <__assert_fail@plt+0x3e44>
   152d0:	vldr	s4, [pc, #108]	; 15344 <__assert_fail@plt+0x3e54>
   152d4:	vcmpe.f32	s0, s4
   152d8:	vmrs	APSR_nzcv, fpscr
   152dc:	bpl	15334 <__assert_fail@plt+0x3e44>
   152e0:	vldr	s4, [pc, #96]	; 15348 <__assert_fail@plt+0x3e58>
   152e4:	vldr	s6, [r3, #12]
   152e8:	vcmpe.f32	s6, s4
   152ec:	vmrs	APSR_nzcv, fpscr
   152f0:	ble	15334 <__assert_fail@plt+0x3e44>
   152f4:	vldr	s4, [r3]
   152f8:	vcmpe.f32	s4, #0.0
   152fc:	vmrs	APSR_nzcv, fpscr
   15300:	blt	15334 <__assert_fail@plt+0x3e44>
   15304:	vadd.f32	s2, s4, s2
   15308:	vcmpe.f32	s2, s0
   1530c:	vmrs	APSR_nzcv, fpscr
   15310:	bpl	15334 <__assert_fail@plt+0x3e44>
   15314:	vldr	s0, [r3, #4]
   15318:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1531c:	vcmpe.f32	s0, s4
   15320:	vmrs	APSR_nzcv, fpscr
   15324:	bhi	15334 <__assert_fail@plt+0x3e44>
   15328:	vcmpe.f32	s2, s0
   1532c:	vmrs	APSR_nzcv, fpscr
   15330:	bxmi	lr
   15334:	mov	r0, #0
   15338:	str	r2, [r1, #20]
   1533c:	bx	lr
   15340:	stclcc	12, cr12, [ip, #820]	; 0x334
   15344:	svccc	0x00666666
   15348:	svccc	0x008ccccd
   1534c:	ldrb	r2, [r1, #16]
   15350:	cmp	r2, #0
   15354:	bne	15384 <__assert_fail@plt+0x3e94>
   15358:	vmov	s2, r0
   1535c:	vldr	s0, [r1, #8]
   15360:	vldr	s4, [pc, #156]	; 15404 <__assert_fail@plt+0x3f14>
   15364:	mov	r0, #0
   15368:	vcvt.f32.u32	s2, s2
   1536c:	vdiv.f32	s2, s2, s0
   15370:	vcmpe.f32	s2, s4
   15374:	vcvt.u32.f32	s0, s2
   15378:	vmrs	APSR_nzcv, fpscr
   1537c:	bxge	lr
   15380:	vmov	r0, s0
   15384:	cmp	r0, #10
   15388:	movls	r0, #10
   1538c:	orr	r0, r0, #1
   15390:	cmn	r0, #1
   15394:	beq	153f0 <__assert_fail@plt+0x3f00>
   15398:	mov	r1, #3
   1539c:	cmp	r0, #10
   153a0:	bcc	153d8 <__assert_fail@plt+0x3ee8>
   153a4:	mov	r1, #3
   153a8:	mov	ip, #9
   153ac:	mov	r2, #12
   153b0:	udiv	r3, r0, r1
   153b4:	mls	r3, r3, r1, r0
   153b8:	cmp	r3, #0
   153bc:	beq	153d8 <__assert_fail@plt+0x3ee8>
   153c0:	add	r3, ip, r2
   153c4:	add	r2, r2, #8
   153c8:	add	r1, r1, #2
   153cc:	add	ip, r3, #4
   153d0:	cmp	ip, r0
   153d4:	bcc	153b0 <__assert_fail@plt+0x3ec0>
   153d8:	udiv	r2, r0, r1
   153dc:	mls	r1, r2, r1, r0
   153e0:	cmp	r1, #0
   153e4:	bne	153f8 <__assert_fail@plt+0x3f08>
   153e8:	add	r0, r0, #2
   153ec:	b	15390 <__assert_fail@plt+0x3ea0>
   153f0:	mov	r0, #0
   153f4:	bx	lr
   153f8:	cmp	r0, #536870912	; 0x20000000
   153fc:	movcs	r0, #0
   15400:	bx	lr
   15404:	svcmi	0x00800000
   15408:	push	{r4, r5, r6, r7, fp, lr}
   1540c:	add	fp, sp, #16
   15410:	mov	r4, r0
   15414:	ldr	r5, [r0]
   15418:	ldr	r0, [r0, #4]
   1541c:	cmp	r5, r0
   15420:	bcs	154b8 <__assert_fail@plt+0x3fc8>
   15424:	mov	r6, #0
   15428:	ldr	r1, [r5]
   1542c:	cmp	r1, #0
   15430:	beq	154ac <__assert_fail@plt+0x3fbc>
   15434:	ldr	r1, [r4, #32]
   15438:	ldr	r7, [r5, #4]
   1543c:	cmp	r1, #0
   15440:	mov	r0, r1
   15444:	movwne	r0, #1
   15448:	cmp	r7, #0
   1544c:	beq	15490 <__assert_fail@plt+0x3fa0>
   15450:	tst	r0, #1
   15454:	beq	15464 <__assert_fail@plt+0x3f74>
   15458:	ldr	r0, [r7]
   1545c:	blx	r1
   15460:	ldr	r1, [r4, #32]
   15464:	str	r6, [r7]
   15468:	cmp	r1, #0
   1546c:	ldr	r2, [r7, #4]
   15470:	ldr	r0, [r4, #36]	; 0x24
   15474:	str	r0, [r7, #4]
   15478:	mov	r0, r1
   1547c:	str	r7, [r4, #36]	; 0x24
   15480:	movwne	r0, #1
   15484:	cmp	r2, #0
   15488:	mov	r7, r2
   1548c:	bne	15450 <__assert_fail@plt+0x3f60>
   15490:	cmp	r0, #0
   15494:	beq	154a0 <__assert_fail@plt+0x3fb0>
   15498:	ldr	r0, [r5]
   1549c:	blx	r1
   154a0:	str	r6, [r5]
   154a4:	str	r6, [r5, #4]
   154a8:	ldr	r0, [r4, #4]
   154ac:	add	r5, r5, #8
   154b0:	cmp	r5, r0
   154b4:	bcc	15428 <__assert_fail@plt+0x3f38>
   154b8:	mov	r0, #0
   154bc:	str	r0, [r4, #12]
   154c0:	str	r0, [r4, #16]
   154c4:	pop	{r4, r5, r6, r7, fp, pc}
   154c8:	push	{r4, r5, r6, sl, fp, lr}
   154cc:	add	fp, sp, #16
   154d0:	mov	r4, r0
   154d4:	ldr	r0, [r0, #32]
   154d8:	cmp	r0, #0
   154dc:	beq	15540 <__assert_fail@plt+0x4050>
   154e0:	ldr	r0, [r4, #16]
   154e4:	cmp	r0, #0
   154e8:	beq	15540 <__assert_fail@plt+0x4050>
   154ec:	ldr	r5, [r4]
   154f0:	ldr	r1, [r4, #4]
   154f4:	cmp	r5, r1
   154f8:	bcs	15540 <__assert_fail@plt+0x4050>
   154fc:	ldr	r0, [r5]
   15500:	cmp	r0, #0
   15504:	cmpne	r5, #0
   15508:	beq	15538 <__assert_fail@plt+0x4048>
   1550c:	ldr	r1, [r4, #32]
   15510:	blx	r1
   15514:	ldr	r6, [r5, #4]
   15518:	cmp	r6, #0
   1551c:	beq	15534 <__assert_fail@plt+0x4044>
   15520:	ldr	r1, [r4, #32]
   15524:	ldr	r0, [r6]
   15528:	blx	r1
   1552c:	ldr	r6, [r6, #4]
   15530:	b	15518 <__assert_fail@plt+0x4028>
   15534:	ldr	r1, [r4, #4]
   15538:	add	r5, r5, #8
   1553c:	b	154f4 <__assert_fail@plt+0x4004>
   15540:	ldr	r5, [r4]
   15544:	ldr	r1, [r4, #4]
   15548:	cmp	r5, r1
   1554c:	bcs	1557c <__assert_fail@plt+0x408c>
   15550:	ldr	r0, [r5, #4]
   15554:	cmp	r0, #0
   15558:	beq	15574 <__assert_fail@plt+0x4084>
   1555c:	ldr	r6, [r0, #4]
   15560:	bl	12ca8 <__assert_fail@plt+0x17b8>
   15564:	cmp	r6, #0
   15568:	mov	r0, r6
   1556c:	bne	1555c <__assert_fail@plt+0x406c>
   15570:	ldr	r1, [r4, #4]
   15574:	add	r5, r5, #8
   15578:	b	15548 <__assert_fail@plt+0x4058>
   1557c:	ldr	r0, [r4, #36]	; 0x24
   15580:	cmp	r0, #0
   15584:	beq	1559c <__assert_fail@plt+0x40ac>
   15588:	ldr	r5, [r0, #4]
   1558c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   15590:	cmp	r5, #0
   15594:	mov	r0, r5
   15598:	bne	15588 <__assert_fail@plt+0x4098>
   1559c:	ldr	r0, [r4]
   155a0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   155a4:	mov	r0, r4
   155a8:	pop	{r4, r5, r6, sl, fp, lr}
   155ac:	b	12ca8 <__assert_fail@plt+0x17b8>
   155b0:	push	{r4, r5, r6, r7, fp, lr}
   155b4:	add	fp, sp, #16
   155b8:	sub	sp, sp, #40	; 0x28
   155bc:	mov	r7, r0
   155c0:	mov	r2, r1
   155c4:	mov	r4, r0
   155c8:	ldr	r1, [r7, #20]!
   155cc:	mov	r0, r2
   155d0:	bl	1534c <__assert_fail@plt+0x3e5c>
   155d4:	mov	r5, #0
   155d8:	cmp	r0, #0
   155dc:	beq	15670 <__assert_fail@plt+0x4180>
   155e0:	mov	r6, r0
   155e4:	ldr	r0, [r4, #8]
   155e8:	cmp	r6, r0
   155ec:	beq	1566c <__assert_fail@plt+0x417c>
   155f0:	mov	r0, r6
   155f4:	mov	r1, #8
   155f8:	bl	18a64 <__assert_fail@plt+0x7574>
   155fc:	cmp	r0, #0
   15600:	str	r0, [sp]
   15604:	beq	15670 <__assert_fail@plt+0x4180>
   15608:	add	r0, r0, r6, lsl #3
   1560c:	mov	r1, #0
   15610:	mov	r5, sp
   15614:	mov	r2, #0
   15618:	str	r1, [sp, #16]
   1561c:	str	r1, [sp, #12]
   15620:	str	r6, [sp, #8]
   15624:	mov	r1, r4
   15628:	str	r0, [sp, #4]
   1562c:	add	r0, r5, #20
   15630:	vld1.32	{d16-d17}, [r7]
   15634:	vst1.32	{d16-d17}, [r0]
   15638:	ldr	r0, [r4, #36]	; 0x24
   1563c:	str	r0, [sp, #36]	; 0x24
   15640:	mov	r0, r5
   15644:	bl	156c8 <__assert_fail@plt+0x41d8>
   15648:	cmp	r0, #0
   1564c:	beq	1567c <__assert_fail@plt+0x418c>
   15650:	ldr	r0, [r4]
   15654:	bl	12ca8 <__assert_fail@plt+0x17b8>
   15658:	mov	r0, #36	; 0x24
   1565c:	vld1.32	{d16-d17}, [r5], r0
   15660:	vst1.32	{d16-d17}, [r4], r0
   15664:	ldr	r0, [r5]
   15668:	str	r0, [r4]
   1566c:	mov	r5, #1
   15670:	mov	r0, r5
   15674:	sub	sp, fp, #16
   15678:	pop	{r4, r5, r6, r7, fp, pc}
   1567c:	ldr	r0, [sp, #36]	; 0x24
   15680:	mov	r1, sp
   15684:	mov	r2, #1
   15688:	str	r0, [r4, #36]	; 0x24
   1568c:	mov	r0, r4
   15690:	bl	156c8 <__assert_fail@plt+0x41d8>
   15694:	cmp	r0, #0
   15698:	beq	156c4 <__assert_fail@plt+0x41d4>
   1569c:	mov	r1, sp
   156a0:	mov	r0, r4
   156a4:	mov	r2, #0
   156a8:	mov	r5, #0
   156ac:	bl	156c8 <__assert_fail@plt+0x41d8>
   156b0:	cmp	r0, #0
   156b4:	beq	156c4 <__assert_fail@plt+0x41d4>
   156b8:	ldr	r0, [sp]
   156bc:	bl	12ca8 <__assert_fail@plt+0x17b8>
   156c0:	b	15670 <__assert_fail@plt+0x4180>
   156c4:	bl	114a8 <abort@plt>
   156c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156cc:	add	fp, sp, #28
   156d0:	sub	sp, sp, #12
   156d4:	ldr	sl, [r1]
   156d8:	str	r1, [sp, #8]
   156dc:	ldr	r1, [r1, #4]
   156e0:	mov	r7, r0
   156e4:	mov	r0, #1
   156e8:	str	r2, [sp, #4]
   156ec:	cmp	sl, r1
   156f0:	bcs	15844 <__assert_fail@plt+0x4354>
   156f4:	add	r8, r7, #36	; 0x24
   156f8:	mov	r9, #0
   156fc:	ldr	r4, [sl]
   15700:	cmp	r4, #0
   15704:	beq	1582c <__assert_fail@plt+0x433c>
   15708:	ldr	r5, [sl, #4]
   1570c:	cmp	r5, #0
   15710:	beq	15788 <__assert_fail@plt+0x4298>
   15714:	ldr	r1, [r7, #8]
   15718:	ldr	r4, [r5]
   1571c:	ldr	r2, [r7, #24]
   15720:	mov	r0, r4
   15724:	blx	r2
   15728:	ldr	r1, [r7, #8]
   1572c:	cmp	r0, r1
   15730:	bcs	15854 <__assert_fail@plt+0x4364>
   15734:	ldr	r3, [r7]
   15738:	ldr	r2, [r5, #4]
   1573c:	ldr	r6, [r3, r0, lsl #3]
   15740:	cmp	r6, #0
   15744:	beq	15754 <__assert_fail@plt+0x4264>
   15748:	add	r0, r3, r0, lsl #3
   1574c:	add	r0, r0, #4
   15750:	b	1576c <__assert_fail@plt+0x427c>
   15754:	str	r4, [r3, r0, lsl #3]
   15758:	ldr	r0, [r7, #12]
   1575c:	add	r0, r0, #1
   15760:	str	r0, [r7, #12]
   15764:	mov	r0, r8
   15768:	str	r9, [r5]
   1576c:	ldr	r3, [r0]
   15770:	cmp	r2, #0
   15774:	str	r3, [r5, #4]
   15778:	str	r5, [r0]
   1577c:	mov	r5, r2
   15780:	bne	15718 <__assert_fail@plt+0x4228>
   15784:	ldr	r4, [sl]
   15788:	ldr	r0, [sp, #4]
   1578c:	str	r9, [sl, #4]
   15790:	cmp	r0, #0
   15794:	bne	1582c <__assert_fail@plt+0x433c>
   15798:	ldr	r1, [r7, #8]
   1579c:	ldr	r2, [r7, #24]
   157a0:	mov	r0, r4
   157a4:	blx	r2
   157a8:	mov	r5, r0
   157ac:	ldr	r0, [r7, #8]
   157b0:	cmp	r5, r0
   157b4:	bcs	15854 <__assert_fail@plt+0x4364>
   157b8:	ldr	r6, [r7]
   157bc:	ldr	r0, [r6, r5, lsl #3]
   157c0:	cmp	r0, #0
   157c4:	beq	157e0 <__assert_fail@plt+0x42f0>
   157c8:	ldr	r0, [r8]
   157cc:	cmp	r0, #0
   157d0:	beq	157f4 <__assert_fail@plt+0x4304>
   157d4:	ldr	r1, [r0, #4]
   157d8:	str	r1, [r8]
   157dc:	b	15804 <__assert_fail@plt+0x4314>
   157e0:	str	r4, [r6, r5, lsl #3]
   157e4:	ldr	r0, [r7, #12]
   157e8:	add	r0, r0, #1
   157ec:	str	r0, [r7, #12]
   157f0:	b	15818 <__assert_fail@plt+0x4328>
   157f4:	mov	r0, #8
   157f8:	bl	18ab8 <__assert_fail@plt+0x75c8>
   157fc:	cmp	r0, #0
   15800:	beq	1584c <__assert_fail@plt+0x435c>
   15804:	add	r1, r6, r5, lsl #3
   15808:	str	r4, [r0]
   1580c:	ldr	r2, [r1, #4]
   15810:	str	r2, [r0, #4]
   15814:	str	r0, [r1, #4]
   15818:	ldr	r1, [sp, #8]
   1581c:	str	r9, [sl]
   15820:	ldr	r0, [r1, #12]
   15824:	sub	r0, r0, #1
   15828:	str	r0, [r1, #12]
   1582c:	ldr	r0, [sp, #8]
   15830:	add	sl, sl, #8
   15834:	ldr	r0, [r0, #4]
   15838:	cmp	sl, r0
   1583c:	bcc	156fc <__assert_fail@plt+0x420c>
   15840:	mov	r0, #1
   15844:	sub	sp, fp, #28
   15848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1584c:	mov	r0, #0
   15850:	b	15844 <__assert_fail@plt+0x4354>
   15854:	bl	114a8 <abort@plt>
   15858:	push	{r4, r5, r6, r7, fp, lr}
   1585c:	add	fp, sp, #16
   15860:	sub	sp, sp, #8
   15864:	cmp	r1, #0
   15868:	beq	159e0 <__assert_fail@plt+0x44f0>
   1586c:	mov	r7, r2
   15870:	add	r2, sp, #4
   15874:	mov	r3, #0
   15878:	mov	r5, r1
   1587c:	mov	r4, r0
   15880:	mov	r6, #0
   15884:	bl	159e8 <__assert_fail@plt+0x44f8>
   15888:	cmp	r0, #0
   1588c:	beq	1589c <__assert_fail@plt+0x43ac>
   15890:	cmp	r7, #0
   15894:	strne	r0, [r7]
   15898:	b	159cc <__assert_fail@plt+0x44dc>
   1589c:	vldr	s0, [r4, #8]
   158a0:	ldr	r0, [r4, #20]
   158a4:	vldr	s2, [r4, #12]
   158a8:	vldr	s4, [r0, #8]
   158ac:	vcvt.f32.u32	s0, s0
   158b0:	vcvt.f32.u32	s2, s2
   158b4:	vmul.f32	s0, s4, s0
   158b8:	vcmpe.f32	s0, s2
   158bc:	vmrs	APSR_nzcv, fpscr
   158c0:	bpl	15954 <__assert_fail@plt+0x4464>
   158c4:	mov	r0, r4
   158c8:	bl	152a0 <__assert_fail@plt+0x3db0>
   158cc:	vldr	s0, [r4, #8]
   158d0:	ldr	r0, [r4, #20]
   158d4:	vldr	s4, [r4, #12]
   158d8:	vcvt.f32.u32	s2, s0
   158dc:	vldr	s0, [r0, #8]
   158e0:	vcvt.f32.u32	s4, s4
   158e4:	vmul.f32	s6, s0, s2
   158e8:	vcmpe.f32	s6, s4
   158ec:	vmrs	APSR_nzcv, fpscr
   158f0:	bpl	15954 <__assert_fail@plt+0x4464>
   158f4:	vldr	s4, [r0, #12]
   158f8:	ldrb	r0, [r0, #16]
   158fc:	mvn	r6, #0
   15900:	cmp	r0, #0
   15904:	vmul.f32	s2, s4, s2
   15908:	vldr	s4, [pc, #212]	; 159e4 <__assert_fail@plt+0x44f4>
   1590c:	vmul.f32	s0, s0, s2
   15910:	vseleq.f32	s0, s0, s2
   15914:	vcmpe.f32	s0, s4
   15918:	vmrs	APSR_nzcv, fpscr
   1591c:	bge	159cc <__assert_fail@plt+0x44dc>
   15920:	vcvt.u32.f32	s0, s0
   15924:	mov	r0, r4
   15928:	vmov	r1, s0
   1592c:	bl	155b0 <__assert_fail@plt+0x40c0>
   15930:	cmp	r0, #0
   15934:	beq	159cc <__assert_fail@plt+0x44dc>
   15938:	add	r2, sp, #4
   1593c:	mov	r0, r4
   15940:	mov	r1, r5
   15944:	mov	r3, #0
   15948:	bl	159e8 <__assert_fail@plt+0x44f8>
   1594c:	cmp	r0, #0
   15950:	bne	159e0 <__assert_fail@plt+0x44f0>
   15954:	ldr	r6, [sp, #4]
   15958:	ldr	r0, [r6]
   1595c:	cmp	r0, #0
   15960:	beq	1597c <__assert_fail@plt+0x448c>
   15964:	ldr	r0, [r4, #36]	; 0x24
   15968:	cmp	r0, #0
   1596c:	beq	1599c <__assert_fail@plt+0x44ac>
   15970:	ldr	r1, [r0, #4]
   15974:	str	r1, [r4, #36]	; 0x24
   15978:	b	159ac <__assert_fail@plt+0x44bc>
   1597c:	str	r5, [r6]
   15980:	ldr	r0, [r4, #12]
   15984:	ldr	r1, [r4, #16]
   15988:	add	r0, r0, #1
   1598c:	add	r1, r1, #1
   15990:	str	r0, [r4, #12]
   15994:	str	r1, [r4, #16]
   15998:	b	159c8 <__assert_fail@plt+0x44d8>
   1599c:	mov	r0, #8
   159a0:	bl	18ab8 <__assert_fail@plt+0x75c8>
   159a4:	cmp	r0, #0
   159a8:	beq	159d8 <__assert_fail@plt+0x44e8>
   159ac:	str	r5, [r0]
   159b0:	ldr	r1, [r6, #4]
   159b4:	str	r1, [r0, #4]
   159b8:	str	r0, [r6, #4]
   159bc:	ldr	r0, [r4, #16]
   159c0:	add	r0, r0, #1
   159c4:	str	r0, [r4, #16]
   159c8:	mov	r6, #1
   159cc:	mov	r0, r6
   159d0:	sub	sp, fp, #16
   159d4:	pop	{r4, r5, r6, r7, fp, pc}
   159d8:	mvn	r6, #0
   159dc:	b	159cc <__assert_fail@plt+0x44dc>
   159e0:	bl	114a8 <abort@plt>
   159e4:	svcmi	0x00800000
   159e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159ec:	add	fp, sp, #24
   159f0:	mov	r7, r2
   159f4:	mov	r4, r1
   159f8:	ldr	r1, [r0, #8]
   159fc:	ldr	r2, [r0, #24]
   15a00:	mov	r5, r0
   15a04:	mov	r8, r3
   15a08:	mov	r0, r4
   15a0c:	blx	r2
   15a10:	ldr	r1, [r5, #8]
   15a14:	cmp	r0, r1
   15a18:	bcs	15b14 <__assert_fail@plt+0x4624>
   15a1c:	ldr	r1, [r5]
   15a20:	add	r6, r1, r0, lsl #3
   15a24:	str	r6, [r7]
   15a28:	ldr	r1, [r1, r0, lsl #3]
   15a2c:	cmp	r1, #0
   15a30:	beq	15ac8 <__assert_fail@plt+0x45d8>
   15a34:	cmp	r1, r4
   15a38:	beq	15a54 <__assert_fail@plt+0x4564>
   15a3c:	ldr	r2, [r5, #28]
   15a40:	mov	r0, r4
   15a44:	blx	r2
   15a48:	cmp	r0, #0
   15a4c:	beq	15a88 <__assert_fail@plt+0x4598>
   15a50:	ldr	r4, [r6]
   15a54:	cmp	r8, #0
   15a58:	beq	15acc <__assert_fail@plt+0x45dc>
   15a5c:	ldr	r0, [r6, #4]
   15a60:	cmp	r0, #0
   15a64:	beq	15ad4 <__assert_fail@plt+0x45e4>
   15a68:	ldm	r0, {r1, r2}
   15a6c:	stm	r6, {r1, r2}
   15a70:	mov	r1, #0
   15a74:	str	r1, [r0]
   15a78:	ldr	r1, [r5, #36]	; 0x24
   15a7c:	str	r1, [r0, #4]
   15a80:	str	r0, [r5, #36]	; 0x24
   15a84:	b	15acc <__assert_fail@plt+0x45dc>
   15a88:	ldr	r0, [r6, #4]!
   15a8c:	cmp	r0, #0
   15a90:	beq	15ac8 <__assert_fail@plt+0x45d8>
   15a94:	ldr	r1, [r0]
   15a98:	cmp	r1, r4
   15a9c:	beq	15ae0 <__assert_fail@plt+0x45f0>
   15aa0:	ldr	r2, [r5, #28]
   15aa4:	mov	r0, r4
   15aa8:	blx	r2
   15aac:	ldr	r1, [r6]
   15ab0:	cmp	r0, #0
   15ab4:	bne	15ae8 <__assert_fail@plt+0x45f8>
   15ab8:	ldr	r0, [r1, #4]!
   15abc:	mov	r6, r1
   15ac0:	cmp	r0, #0
   15ac4:	bne	15a94 <__assert_fail@plt+0x45a4>
   15ac8:	mov	r4, #0
   15acc:	mov	r0, r4
   15ad0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ad4:	mov	r0, #0
   15ad8:	str	r0, [r6]
   15adc:	b	15acc <__assert_fail@plt+0x45dc>
   15ae0:	mov	r1, r0
   15ae4:	b	15aec <__assert_fail@plt+0x45fc>
   15ae8:	ldr	r4, [r1]
   15aec:	cmp	r8, #0
   15af0:	beq	15acc <__assert_fail@plt+0x45dc>
   15af4:	ldr	r0, [r1, #4]
   15af8:	str	r0, [r6]
   15afc:	mov	r0, #0
   15b00:	str	r0, [r1]
   15b04:	ldr	r0, [r5, #36]	; 0x24
   15b08:	str	r0, [r1, #4]
   15b0c:	str	r1, [r5, #36]	; 0x24
   15b10:	b	15acc <__assert_fail@plt+0x45dc>
   15b14:	bl	114a8 <abort@plt>
   15b18:	push	{r4, sl, fp, lr}
   15b1c:	add	fp, sp, #8
   15b20:	sub	sp, sp, #8
   15b24:	add	r2, sp, #4
   15b28:	mov	r4, r1
   15b2c:	bl	15858 <__assert_fail@plt+0x4368>
   15b30:	cmn	r0, #1
   15b34:	beq	15b48 <__assert_fail@plt+0x4658>
   15b38:	ldr	r1, [sp, #4]
   15b3c:	cmp	r0, #0
   15b40:	moveq	r4, r1
   15b44:	b	15b4c <__assert_fail@plt+0x465c>
   15b48:	mov	r4, #0
   15b4c:	mov	r0, r4
   15b50:	sub	sp, fp, #8
   15b54:	pop	{r4, sl, fp, pc}
   15b58:	push	{r4, r5, r6, sl, fp, lr}
   15b5c:	add	fp, sp, #16
   15b60:	sub	sp, sp, #8
   15b64:	add	r2, sp, #4
   15b68:	mov	r3, #1
   15b6c:	mov	r4, r0
   15b70:	bl	159e8 <__assert_fail@plt+0x44f8>
   15b74:	mov	r5, r0
   15b78:	cmp	r0, #0
   15b7c:	beq	15c5c <__assert_fail@plt+0x476c>
   15b80:	ldr	r0, [r4, #16]
   15b84:	sub	r0, r0, #1
   15b88:	str	r0, [r4, #16]
   15b8c:	ldr	r0, [sp, #4]
   15b90:	ldr	r0, [r0]
   15b94:	cmp	r0, #0
   15b98:	bne	15c5c <__assert_fail@plt+0x476c>
   15b9c:	ldr	r0, [r4, #12]
   15ba0:	vldr	s0, [r4, #8]
   15ba4:	sub	r0, r0, #1
   15ba8:	str	r0, [r4, #12]
   15bac:	vmov	s4, r0
   15bb0:	ldr	r1, [r4, #20]
   15bb4:	vldr	s2, [r1]
   15bb8:	vcvt.f32.u32	s0, s0
   15bbc:	vcvt.f32.u32	s4, s4
   15bc0:	vmul.f32	s0, s2, s0
   15bc4:	vcmpe.f32	s0, s4
   15bc8:	vmrs	APSR_nzcv, fpscr
   15bcc:	ble	15c5c <__assert_fail@plt+0x476c>
   15bd0:	mov	r0, r4
   15bd4:	bl	152a0 <__assert_fail@plt+0x3db0>
   15bd8:	vldr	s0, [r4, #8]
   15bdc:	ldr	r0, [r4, #20]
   15be0:	vldr	s2, [r4, #12]
   15be4:	vcvt.f32.u32	s0, s0
   15be8:	vldr	s4, [r0]
   15bec:	vcvt.f32.u32	s2, s2
   15bf0:	vmul.f32	s4, s4, s0
   15bf4:	vcmpe.f32	s4, s2
   15bf8:	vmrs	APSR_nzcv, fpscr
   15bfc:	ble	15c5c <__assert_fail@plt+0x476c>
   15c00:	vldr	s2, [r0, #4]
   15c04:	ldrb	r1, [r0, #16]
   15c08:	cmp	r1, #0
   15c0c:	vmul.f32	s0, s2, s0
   15c10:	bne	15c1c <__assert_fail@plt+0x472c>
   15c14:	vldr	s2, [r0, #8]
   15c18:	vmul.f32	s0, s0, s2
   15c1c:	vcvt.u32.f32	s0, s0
   15c20:	mov	r0, r4
   15c24:	vmov	r1, s0
   15c28:	bl	155b0 <__assert_fail@plt+0x40c0>
   15c2c:	cmp	r0, #0
   15c30:	bne	15c5c <__assert_fail@plt+0x476c>
   15c34:	ldr	r0, [r4, #36]	; 0x24
   15c38:	cmp	r0, #0
   15c3c:	beq	15c54 <__assert_fail@plt+0x4764>
   15c40:	ldr	r6, [r0, #4]
   15c44:	bl	12ca8 <__assert_fail@plt+0x17b8>
   15c48:	cmp	r6, #0
   15c4c:	mov	r0, r6
   15c50:	bne	15c40 <__assert_fail@plt+0x4750>
   15c54:	mov	r0, #0
   15c58:	str	r0, [r4, #36]	; 0x24
   15c5c:	mov	r0, r5
   15c60:	sub	sp, fp, #16
   15c64:	pop	{r4, r5, r6, sl, fp, pc}
   15c68:	b	15b58 <__assert_fail@plt+0x4668>
   15c6c:	vdup.32	q8, r1
   15c70:	mov	r2, #0
   15c74:	str	r2, [r0, #20]
   15c78:	str	r2, [r0, #24]
   15c7c:	mov	r2, #1
   15c80:	strb	r2, [r0, #28]
   15c84:	vst1.32	{d16-d17}, [r0]!
   15c88:	str	r1, [r0]
   15c8c:	bx	lr
   15c90:	ldrb	r0, [r0, #28]
   15c94:	bx	lr
   15c98:	push	{fp, lr}
   15c9c:	mov	fp, sp
   15ca0:	ldrb	r3, [r0, #28]
   15ca4:	ldr	r2, [r0, #20]
   15ca8:	eor	lr, r3, #1
   15cac:	add	r2, r2, lr
   15cb0:	and	r3, r2, #3
   15cb4:	ldr	ip, [r0, r3, lsl #2]
   15cb8:	str	r1, [r0, r3, lsl #2]
   15cbc:	str	r3, [r0, #20]
   15cc0:	ldr	r1, [r0, #24]
   15cc4:	cmp	r3, r1
   15cc8:	addeq	r1, r2, lr
   15ccc:	andeq	r1, r1, #3
   15cd0:	streq	r1, [r0, #24]
   15cd4:	mov	r1, #0
   15cd8:	strb	r1, [r0, #28]
   15cdc:	mov	r0, ip
   15ce0:	pop	{fp, pc}
   15ce4:	push	{fp, lr}
   15ce8:	mov	fp, sp
   15cec:	ldrb	r1, [r0, #28]
   15cf0:	cmp	r1, #0
   15cf4:	bne	15d38 <__assert_fail@plt+0x4848>
   15cf8:	ldr	r3, [r0, #20]
   15cfc:	ldr	r2, [r0, #16]
   15d00:	ldr	r1, [r0, r3, lsl #2]
   15d04:	str	r2, [r0, r3, lsl #2]
   15d08:	ldr	r2, [r0, #20]
   15d0c:	ldr	r3, [r0, #24]
   15d10:	cmp	r2, r3
   15d14:	bne	15d24 <__assert_fail@plt+0x4834>
   15d18:	mov	r2, #1
   15d1c:	strb	r2, [r0, #28]
   15d20:	b	15d30 <__assert_fail@plt+0x4840>
   15d24:	sub	r2, r2, #1
   15d28:	and	r2, r2, #3
   15d2c:	str	r2, [r0, #20]
   15d30:	mov	r0, r1
   15d34:	pop	{fp, pc}
   15d38:	bl	114a8 <abort@plt>
   15d3c:	push	{r4, r5, r6, sl, fp, lr}
   15d40:	add	fp, sp, #16
   15d44:	mov	r5, r0
   15d48:	mov	r0, #0
   15d4c:	mov	r4, r1
   15d50:	add	r6, r2, #19
   15d54:	strb	r0, [r2, #20]
   15d58:	mov	r0, r5
   15d5c:	mov	r1, r4
   15d60:	mov	r2, #10
   15d64:	mov	r3, #0
   15d68:	bl	19238 <__assert_fail@plt+0x7d48>
   15d6c:	add	r2, r0, r0, lsl #2
   15d70:	sub	r2, r5, r2, lsl #1
   15d74:	orr	r2, r2, #48	; 0x30
   15d78:	strb	r2, [r6], #-1
   15d7c:	rsbs	r2, r5, #9
   15d80:	mov	r5, r0
   15d84:	rscs	r2, r4, #0
   15d88:	mov	r4, r1
   15d8c:	bcc	15d58 <__assert_fail@plt+0x4868>
   15d90:	add	r0, r6, #1
   15d94:	pop	{r4, r5, r6, sl, fp, pc}
   15d98:	sub	sp, sp, #4
   15d9c:	push	{fp, lr}
   15da0:	mov	fp, sp
   15da4:	sub	sp, sp, #4
   15da8:	str	r3, [fp, #8]
   15dac:	tst	r2, #64	; 0x40
   15db0:	mov	r3, #0
   15db4:	ldrne	r3, [fp, #8]
   15db8:	bl	1137c <openat64@plt>
   15dbc:	bl	179b4 <__assert_fail@plt+0x64c4>
   15dc0:	mov	sp, fp
   15dc4:	pop	{fp, lr}
   15dc8:	add	sp, sp, #4
   15dcc:	bx	lr
   15dd0:	push	{r4, r5, r6, sl, fp, lr}
   15dd4:	add	fp, sp, #16
   15dd8:	orr	r2, r2, #18688	; 0x4900
   15ddc:	mov	r4, r3
   15de0:	orr	r2, r2, #524288	; 0x80000
   15de4:	bl	15d98 <__assert_fail@plt+0x48a8>
   15de8:	mov	r5, r0
   15dec:	mov	r0, #0
   15df0:	cmp	r5, #0
   15df4:	bmi	15e2c <__assert_fail@plt+0x493c>
   15df8:	mov	r0, r5
   15dfc:	bl	1143c <fdopendir@plt>
   15e00:	cmp	r0, #0
   15e04:	beq	15e10 <__assert_fail@plt+0x4920>
   15e08:	str	r5, [r4]
   15e0c:	pop	{r4, r5, r6, sl, fp, pc}
   15e10:	bl	11394 <__errno_location@plt>
   15e14:	ldr	r6, [r0]
   15e18:	mov	r4, r0
   15e1c:	mov	r0, r5
   15e20:	bl	114b4 <close@plt>
   15e24:	mov	r0, #0
   15e28:	str	r6, [r4]
   15e2c:	pop	{r4, r5, r6, sl, fp, pc}
   15e30:	push	{r4, r5, fp, lr}
   15e34:	add	fp, sp, #8
   15e38:	cmp	r0, #0
   15e3c:	beq	15ed0 <__assert_fail@plt+0x49e0>
   15e40:	mov	r1, #47	; 0x2f
   15e44:	mov	r4, r0
   15e48:	bl	11418 <strrchr@plt>
   15e4c:	cmp	r0, #0
   15e50:	mov	r5, r4
   15e54:	addne	r5, r0, #1
   15e58:	sub	r0, r5, r4
   15e5c:	cmp	r0, #7
   15e60:	blt	15eb4 <__assert_fail@plt+0x49c4>
   15e64:	movw	r1, #41892	; 0xa3a4
   15e68:	sub	r0, r5, #7
   15e6c:	mov	r2, #7
   15e70:	movt	r1, #1
   15e74:	bl	1149c <strncmp@plt>
   15e78:	cmp	r0, #0
   15e7c:	bne	15eb4 <__assert_fail@plt+0x49c4>
   15e80:	movw	r1, #41900	; 0xa3ac
   15e84:	mov	r0, r5
   15e88:	mov	r2, #3
   15e8c:	movt	r1, #1
   15e90:	bl	1149c <strncmp@plt>
   15e94:	cmp	r0, #0
   15e98:	beq	15ea4 <__assert_fail@plt+0x49b4>
   15e9c:	mov	r4, r5
   15ea0:	b	15eb4 <__assert_fail@plt+0x49c4>
   15ea4:	movw	r0, #45432	; 0xb178
   15ea8:	add	r4, r5, #3
   15eac:	movt	r0, #2
   15eb0:	str	r4, [r0]
   15eb4:	movw	r0, #45436	; 0xb17c
   15eb8:	movt	r0, #2
   15ebc:	str	r4, [r0]
   15ec0:	movw	r0, #45496	; 0xb1b8
   15ec4:	movt	r0, #2
   15ec8:	str	r4, [r0]
   15ecc:	pop	{r4, r5, fp, pc}
   15ed0:	movw	r0, #45448	; 0xb188
   15ed4:	movt	r0, #2
   15ed8:	ldr	r1, [r0]
   15edc:	movw	r0, #41836	; 0xa36c
   15ee0:	movt	r0, #1
   15ee4:	bl	11490 <fputs@plt>
   15ee8:	bl	114a8 <abort@plt>
   15eec:	push	{r4, r5, r6, sl, fp, lr}
   15ef0:	add	fp, sp, #16
   15ef4:	mov	r4, r0
   15ef8:	movw	r0, #45504	; 0xb1c0
   15efc:	movt	r0, #2
   15f00:	cmp	r4, #0
   15f04:	moveq	r4, r0
   15f08:	bl	11394 <__errno_location@plt>
   15f0c:	ldr	r6, [r0]
   15f10:	mov	r5, r0
   15f14:	mov	r0, r4
   15f18:	mov	r1, #48	; 0x30
   15f1c:	bl	1820c <__assert_fail@plt+0x6d1c>
   15f20:	str	r6, [r5]
   15f24:	pop	{r4, r5, r6, sl, fp, pc}
   15f28:	movw	r1, #45504	; 0xb1c0
   15f2c:	cmp	r0, #0
   15f30:	movt	r1, #2
   15f34:	movne	r1, r0
   15f38:	ldr	r0, [r1]
   15f3c:	bx	lr
   15f40:	movw	r2, #45504	; 0xb1c0
   15f44:	cmp	r0, #0
   15f48:	movt	r2, #2
   15f4c:	movne	r2, r0
   15f50:	str	r1, [r2]
   15f54:	bx	lr
   15f58:	movw	r3, #45504	; 0xb1c0
   15f5c:	cmp	r0, #0
   15f60:	and	r2, r2, #1
   15f64:	movt	r3, #2
   15f68:	movne	r3, r0
   15f6c:	ubfx	r0, r1, #5, #3
   15f70:	and	r1, r1, #31
   15f74:	add	ip, r3, r0, lsl #2
   15f78:	mov	r0, #1
   15f7c:	ldr	r3, [ip, #8]
   15f80:	and	r0, r0, r3, lsr r1
   15f84:	eor	r2, r0, r2
   15f88:	eor	r1, r3, r2, lsl r1
   15f8c:	str	r1, [ip, #8]
   15f90:	bx	lr
   15f94:	movw	r2, #45504	; 0xb1c0
   15f98:	cmp	r0, #0
   15f9c:	movt	r2, #2
   15fa0:	movne	r2, r0
   15fa4:	ldr	r0, [r2, #4]
   15fa8:	str	r1, [r2, #4]
   15fac:	bx	lr
   15fb0:	push	{fp, lr}
   15fb4:	mov	fp, sp
   15fb8:	movw	r3, #45504	; 0xb1c0
   15fbc:	cmp	r0, #0
   15fc0:	movt	r3, #2
   15fc4:	movne	r3, r0
   15fc8:	cmp	r1, #0
   15fcc:	mov	r0, #10
   15fd0:	cmpne	r2, #0
   15fd4:	str	r0, [r3]
   15fd8:	bne	15fe0 <__assert_fail@plt+0x4af0>
   15fdc:	bl	114a8 <abort@plt>
   15fe0:	str	r1, [r3, #40]	; 0x28
   15fe4:	str	r2, [r3, #44]	; 0x2c
   15fe8:	pop	{fp, pc}
   15fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff0:	add	fp, sp, #28
   15ff4:	sub	sp, sp, #20
   15ff8:	mov	r7, r0
   15ffc:	ldr	r0, [fp, #8]
   16000:	movw	r5, #45504	; 0xb1c0
   16004:	mov	r8, r3
   16008:	mov	r9, r2
   1600c:	mov	sl, r1
   16010:	movt	r5, #2
   16014:	cmp	r0, #0
   16018:	movne	r5, r0
   1601c:	bl	11394 <__errno_location@plt>
   16020:	ldr	r2, [r5, #40]	; 0x28
   16024:	ldr	r3, [r5, #44]	; 0x2c
   16028:	mov	r4, r0
   1602c:	ldm	r5, {r0, r1}
   16030:	add	r5, r5, #8
   16034:	ldr	r6, [r4]
   16038:	stm	sp, {r0, r1, r5}
   1603c:	mov	r0, r7
   16040:	mov	r1, sl
   16044:	str	r2, [sp, #12]
   16048:	str	r3, [sp, #16]
   1604c:	mov	r2, r9
   16050:	mov	r3, r8
   16054:	bl	16064 <__assert_fail@plt+0x4b74>
   16058:	str	r6, [r4]
   1605c:	sub	sp, fp, #28
   16060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16068:	add	fp, sp, #28
   1606c:	sub	sp, sp, #156	; 0x9c
   16070:	mov	r5, r0
   16074:	add	r0, r2, #1
   16078:	mov	r6, r1
   1607c:	mov	sl, r3
   16080:	str	r2, [fp, #-80]	; 0xffffffb0
   16084:	str	r0, [sp, #72]	; 0x48
   16088:	ldr	r0, [fp, #12]
   1608c:	and	r1, r0, #1
   16090:	str	r1, [sp, #32]
   16094:	and	r1, r0, #4
   16098:	str	r1, [sp, #28]
   1609c:	ubfx	r9, r0, #1, #1
   160a0:	bl	112bc <__ctype_get_mb_cur_max@plt>
   160a4:	str	r0, [sp, #40]	; 0x28
   160a8:	ldr	r0, [fp, #24]
   160ac:	ldr	r7, [fp, #8]
   160b0:	mov	r1, #0
   160b4:	mov	lr, #0
   160b8:	str	r5, [fp, #-84]	; 0xffffffac
   160bc:	str	r1, [sp, #60]	; 0x3c
   160c0:	mov	r1, #1
   160c4:	str	r1, [fp, #-48]	; 0xffffffd0
   160c8:	str	r0, [sp, #80]	; 0x50
   160cc:	ldr	r0, [fp, #20]
   160d0:	str	r0, [sp, #76]	; 0x4c
   160d4:	mov	r0, #0
   160d8:	str	r0, [sp, #56]	; 0x38
   160dc:	mov	r0, #0
   160e0:	str	r0, [fp, #-88]	; 0xffffffa8
   160e4:	mov	r0, #0
   160e8:	str	r0, [fp, #-72]	; 0xffffffb8
   160ec:	mov	r0, #0
   160f0:	cmp	r7, #10
   160f4:	bhi	170d0 <__assert_fail@plt+0x5be0>
   160f8:	add	r1, pc, #24
   160fc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16100:	mov	ip, r6
   16104:	mov	r8, #0
   16108:	mov	r2, #1
   1610c:	mov	r6, #0
   16110:	mov	r3, sl
   16114:	ldr	pc, [r1, r7, lsl #2]
   16118:	andeq	r6, r1, r4, lsl #4
   1611c:	andeq	r6, r1, r8, asr r2
   16120:	andeq	r6, r1, r8, lsl r2
   16124:	strdeq	r6, [r1], -ip
   16128:	andeq	r6, r1, ip, asr #4
   1612c:	andeq	r6, r1, r0, lsl #5
   16130:	andeq	r6, r1, r8, lsr #4
   16134:	andeq	r6, r1, r4, lsl #6
   16138:	andeq	r6, r1, r4, asr #2
   1613c:	andeq	r6, r1, r4, asr #2
   16140:	andeq	r6, r1, r4, lsl #3
   16144:	movw	r0, #41982	; 0xa3fe
   16148:	mov	r1, r7
   1614c:	mov	r6, r5
   16150:	mov	r4, ip
   16154:	mov	r5, lr
   16158:	movt	r0, #1
   1615c:	bl	17834 <__assert_fail@plt+0x6344>
   16160:	str	r0, [sp, #76]	; 0x4c
   16164:	movw	r0, #41984	; 0xa400
   16168:	mov	r1, r7
   1616c:	movt	r0, #1
   16170:	bl	17834 <__assert_fail@plt+0x6344>
   16174:	mov	lr, r5
   16178:	mov	r5, r6
   1617c:	mov	ip, r4
   16180:	str	r0, [sp, #80]	; 0x50
   16184:	mov	r8, #0
   16188:	tst	r9, #1
   1618c:	str	lr, [sp, #44]	; 0x2c
   16190:	bne	161c8 <__assert_fail@plt+0x4cd8>
   16194:	ldr	r0, [sp, #76]	; 0x4c
   16198:	ldrb	r0, [r0]
   1619c:	cmp	r0, #0
   161a0:	beq	161c8 <__assert_fail@plt+0x4cd8>
   161a4:	ldr	r1, [sp, #76]	; 0x4c
   161a8:	mov	r8, #0
   161ac:	add	r1, r1, #1
   161b0:	cmp	r8, ip
   161b4:	strbcc	r0, [r5, r8]
   161b8:	ldrb	r0, [r1, r8]
   161bc:	add	r8, r8, #1
   161c0:	cmp	r0, #0
   161c4:	bne	161b0 <__assert_fail@plt+0x4cc0>
   161c8:	ldr	r6, [sp, #80]	; 0x50
   161cc:	mov	r4, ip
   161d0:	mov	r0, r6
   161d4:	bl	11364 <strlen@plt>
   161d8:	mov	ip, r4
   161dc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   161e0:	ldr	lr, [sp, #44]	; 0x2c
   161e4:	str	r6, [fp, #-88]	; 0xffffffa8
   161e8:	str	r0, [fp, #-72]	; 0xffffffb8
   161ec:	mov	r2, #1
   161f0:	mov	r6, r9
   161f4:	mov	r3, sl
   161f8:	b	16304 <__assert_fail@plt+0x4e14>
   161fc:	mov	r0, #1
   16200:	b	16258 <__assert_fail@plt+0x4d68>
   16204:	mov	r7, #0
   16208:	mov	r8, #0
   1620c:	mov	r2, r0
   16210:	mov	r6, #0
   16214:	b	16304 <__assert_fail@plt+0x4e14>
   16218:	tst	r9, #1
   1621c:	bne	16258 <__assert_fail@plt+0x4d68>
   16220:	mov	r2, r0
   16224:	b	162b0 <__assert_fail@plt+0x4dc0>
   16228:	mov	r0, #1
   1622c:	mov	r8, #0
   16230:	mov	r7, #5
   16234:	mov	r2, #1
   16238:	str	r0, [fp, #-72]	; 0xffffffb8
   1623c:	movw	r0, #41980	; 0xa3fc
   16240:	movt	r0, #1
   16244:	str	r0, [fp, #-88]	; 0xffffffa8
   16248:	b	16278 <__assert_fail@plt+0x4d88>
   1624c:	mov	r2, #1
   16250:	tst	r9, #1
   16254:	beq	162b0 <__assert_fail@plt+0x4dc0>
   16258:	mov	r1, #1
   1625c:	mov	r8, #0
   16260:	mov	r7, #2
   16264:	mov	r2, r0
   16268:	str	r1, [fp, #-72]	; 0xffffffb8
   1626c:	movw	r1, #41984	; 0xa400
   16270:	movt	r1, #1
   16274:	str	r1, [fp, #-88]	; 0xffffffa8
   16278:	mov	r6, #1
   1627c:	b	16304 <__assert_fail@plt+0x4e14>
   16280:	tst	r9, #1
   16284:	beq	162d4 <__assert_fail@plt+0x4de4>
   16288:	mov	r0, #1
   1628c:	mov	r8, #0
   16290:	mov	r2, #1
   16294:	mov	r6, #1
   16298:	mov	r7, #5
   1629c:	str	r0, [fp, #-72]	; 0xffffffb8
   162a0:	movw	r0, #41980	; 0xa3fc
   162a4:	movt	r0, #1
   162a8:	str	r0, [fp, #-88]	; 0xffffffa8
   162ac:	b	16304 <__assert_fail@plt+0x4e14>
   162b0:	cmp	ip, #0
   162b4:	mov	r8, #1
   162b8:	mov	r6, #0
   162bc:	mov	r7, #2
   162c0:	movne	r0, #39	; 0x27
   162c4:	strbne	r0, [r5]
   162c8:	movw	r0, #41984	; 0xa400
   162cc:	movt	r0, #1
   162d0:	b	162f8 <__assert_fail@plt+0x4e08>
   162d4:	cmp	ip, #0
   162d8:	mov	r8, #1
   162dc:	mov	r2, #1
   162e0:	mov	r7, #5
   162e4:	mov	r6, #0
   162e8:	movne	r0, #34	; 0x22
   162ec:	strbne	r0, [r5]
   162f0:	movw	r0, #41980	; 0xa3fc
   162f4:	movt	r0, #1
   162f8:	str	r0, [fp, #-88]	; 0xffffffa8
   162fc:	mov	r0, #1
   16300:	str	r0, [fp, #-72]	; 0xffffffb8
   16304:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16308:	str	r7, [fp, #-68]	; 0xffffffbc
   1630c:	str	r6, [fp, #-76]	; 0xffffffb4
   16310:	str	r2, [sp, #84]	; 0x54
   16314:	cmp	r0, #0
   16318:	movwne	r0, #1
   1631c:	and	r1, r0, r6
   16320:	and	r1, r2, r1
   16324:	str	r1, [sp, #48]	; 0x30
   16328:	sub	r1, r7, #2
   1632c:	clz	r1, r1
   16330:	lsr	r1, r1, #5
   16334:	and	r1, r1, r6
   16338:	str	r1, [sp, #64]	; 0x40
   1633c:	subs	r1, r7, #2
   16340:	eor	r7, r6, #1
   16344:	movwne	r1, #1
   16348:	str	r7, [sp, #92]	; 0x5c
   1634c:	orr	r7, r1, r7
   16350:	and	r1, r1, r2
   16354:	and	r0, r0, r1
   16358:	str	r7, [sp, #68]	; 0x44
   1635c:	mov	r7, #0
   16360:	str	r0, [fp, #-60]	; 0xffffffc4
   16364:	orr	r0, r1, r6
   16368:	ldr	r1, [fp, #16]
   1636c:	eor	r0, r0, #1
   16370:	clz	r1, r1
   16374:	lsr	r1, r1, #5
   16378:	orr	r0, r1, r0
   1637c:	str	r0, [fp, #-64]	; 0xffffffc0
   16380:	eor	r0, r2, #1
   16384:	str	r0, [sp, #52]	; 0x34
   16388:	cmn	r3, #1
   1638c:	beq	1639c <__assert_fail@plt+0x4eac>
   16390:	cmp	r7, r3
   16394:	bne	163a8 <__assert_fail@plt+0x4eb8>
   16398:	b	16f04 <__assert_fail@plt+0x5a14>
   1639c:	ldrb	r0, [r4, r7]
   163a0:	cmp	r0, #0
   163a4:	beq	16f0c <__assert_fail@plt+0x5a1c>
   163a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   163ac:	cmp	r0, #0
   163b0:	beq	163f8 <__assert_fail@plt+0x4f08>
   163b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   163b8:	add	r5, r7, r0
   163bc:	cmp	r0, #2
   163c0:	bcc	1640c <__assert_fail@plt+0x4f1c>
   163c4:	mov	r0, #0
   163c8:	cmn	r3, #1
   163cc:	str	r0, [fp, #-56]	; 0xffffffc8
   163d0:	bne	16414 <__assert_fail@plt+0x4f24>
   163d4:	mov	r0, r4
   163d8:	mov	r4, ip
   163dc:	mov	r6, lr
   163e0:	bl	11364 <strlen@plt>
   163e4:	mov	ip, r4
   163e8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   163ec:	mov	lr, r6
   163f0:	mov	r3, r0
   163f4:	b	16414 <__assert_fail@plt+0x4f24>
   163f8:	mov	r0, #0
   163fc:	mov	sl, r3
   16400:	str	r0, [fp, #-56]	; 0xffffffc8
   16404:	mov	r0, #0
   16408:	b	16480 <__assert_fail@plt+0x4f90>
   1640c:	mov	r0, #0
   16410:	str	r0, [fp, #-56]	; 0xffffffc8
   16414:	cmp	r5, r3
   16418:	bls	1642c <__assert_fail@plt+0x4f3c>
   1641c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16420:	mov	r0, #0
   16424:	mov	sl, r3
   16428:	b	16480 <__assert_fail@plt+0x4f90>
   1642c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16430:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16434:	add	r0, r4, r7
   16438:	mov	r5, lr
   1643c:	mov	r6, ip
   16440:	mov	sl, r3
   16444:	bl	11358 <bcmp@plt>
   16448:	ldr	r2, [sp, #92]	; 0x5c
   1644c:	cmp	r0, #0
   16450:	ldr	r3, [fp, #-84]	; 0xffffffac
   16454:	mov	r1, r0
   16458:	movwne	r1, #1
   1645c:	orr	r1, r1, r2
   16460:	tst	r1, #1
   16464:	beq	16f90 <__assert_fail@plt+0x5aa0>
   16468:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1646c:	clz	r0, r0
   16470:	mov	lr, r5
   16474:	mov	ip, r6
   16478:	mov	r5, r3
   1647c:	lsr	r0, r0, #5
   16480:	str	r0, [fp, #-52]	; 0xffffffcc
   16484:	ldrb	r6, [r4, r7]
   16488:	cmp	r6, #126	; 0x7e
   1648c:	bhi	169b4 <__assert_fail@plt+0x54c4>
   16490:	add	r3, pc, #16
   16494:	mov	r9, #1
   16498:	mov	r2, #110	; 0x6e
   1649c:	mov	r0, #97	; 0x61
   164a0:	mov	r1, #0
   164a4:	ldr	pc, [r3, r6, lsl #2]
   164a8:	andeq	r6, r1, r8, lsl r8
   164ac:			; <UNDEFINED> instruction: 0x000169b4
   164b0:			; <UNDEFINED> instruction: 0x000169b4
   164b4:			; <UNDEFINED> instruction: 0x000169b4
   164b8:			; <UNDEFINED> instruction: 0x000169b4
   164bc:			; <UNDEFINED> instruction: 0x000169b4
   164c0:			; <UNDEFINED> instruction: 0x000169b4
   164c4:	andeq	r6, r1, r4, lsr sl
   164c8:	strdeq	r6, [r1], -r8
   164cc:	strdeq	r6, [r1], -r0
   164d0:	andeq	r6, r1, r4, lsl #16
   164d4:	andeq	r6, r1, ip, lsl r9
   164d8:	andeq	r6, r1, r8, ror #15
   164dc:	andeq	r6, r1, r0, lsl #16
   164e0:			; <UNDEFINED> instruction: 0x000169b4
   164e4:			; <UNDEFINED> instruction: 0x000169b4
   164e8:			; <UNDEFINED> instruction: 0x000169b4
   164ec:			; <UNDEFINED> instruction: 0x000169b4
   164f0:			; <UNDEFINED> instruction: 0x000169b4
   164f4:			; <UNDEFINED> instruction: 0x000169b4
   164f8:			; <UNDEFINED> instruction: 0x000169b4
   164fc:			; <UNDEFINED> instruction: 0x000169b4
   16500:			; <UNDEFINED> instruction: 0x000169b4
   16504:			; <UNDEFINED> instruction: 0x000169b4
   16508:			; <UNDEFINED> instruction: 0x000169b4
   1650c:			; <UNDEFINED> instruction: 0x000169b4
   16510:			; <UNDEFINED> instruction: 0x000169b4
   16514:			; <UNDEFINED> instruction: 0x000169b4
   16518:			; <UNDEFINED> instruction: 0x000169b4
   1651c:			; <UNDEFINED> instruction: 0x000169b4
   16520:			; <UNDEFINED> instruction: 0x000169b4
   16524:			; <UNDEFINED> instruction: 0x000169b4
   16528:	muleq	r1, r8, r7
   1652c:	muleq	r1, ip, r7
   16530:	muleq	r1, ip, r7
   16534:	andeq	r6, r1, r0, lsl #15
   16538:	muleq	r1, ip, r7
   1653c:	andeq	r6, r1, r4, lsr #13
   16540:	muleq	r1, ip, r7
   16544:	andeq	r6, r1, r4, lsr #18
   16548:	muleq	r1, ip, r7
   1654c:	muleq	r1, ip, r7
   16550:	muleq	r1, ip, r7
   16554:	andeq	r6, r1, r4, lsr #13
   16558:	andeq	r6, r1, r4, lsr #13
   1655c:	andeq	r6, r1, r4, lsr #13
   16560:	andeq	r6, r1, r4, lsr #13
   16564:	andeq	r6, r1, r4, lsr #13
   16568:	andeq	r6, r1, r4, lsr #13
   1656c:	andeq	r6, r1, r4, lsr #13
   16570:	andeq	r6, r1, r4, lsr #13
   16574:	andeq	r6, r1, r4, lsr #13
   16578:	andeq	r6, r1, r4, lsr #13
   1657c:	andeq	r6, r1, r4, lsr #13
   16580:	andeq	r6, r1, r4, lsr #13
   16584:	andeq	r6, r1, r4, lsr #13
   16588:	andeq	r6, r1, r4, lsr #13
   1658c:	andeq	r6, r1, r4, lsr #13
   16590:	andeq	r6, r1, r4, lsr #13
   16594:	muleq	r1, ip, r7
   16598:	muleq	r1, ip, r7
   1659c:	muleq	r1, ip, r7
   165a0:	muleq	r1, ip, r7
   165a4:	strdeq	r6, [r1], -r0
   165a8:			; <UNDEFINED> instruction: 0x000169b4
   165ac:	andeq	r6, r1, r4, lsr #13
   165b0:	andeq	r6, r1, r4, lsr #13
   165b4:	andeq	r6, r1, r4, lsr #13
   165b8:	andeq	r6, r1, r4, lsr #13
   165bc:	andeq	r6, r1, r4, lsr #13
   165c0:	andeq	r6, r1, r4, lsr #13
   165c4:	andeq	r6, r1, r4, lsr #13
   165c8:	andeq	r6, r1, r4, lsr #13
   165cc:	andeq	r6, r1, r4, lsr #13
   165d0:	andeq	r6, r1, r4, lsr #13
   165d4:	andeq	r6, r1, r4, lsr #13
   165d8:	andeq	r6, r1, r4, lsr #13
   165dc:	andeq	r6, r1, r4, lsr #13
   165e0:	andeq	r6, r1, r4, lsr #13
   165e4:	andeq	r6, r1, r4, lsr #13
   165e8:	andeq	r6, r1, r4, lsr #13
   165ec:	andeq	r6, r1, r4, lsr #13
   165f0:	andeq	r6, r1, r4, lsr #13
   165f4:	andeq	r6, r1, r4, lsr #13
   165f8:	andeq	r6, r1, r4, lsr #13
   165fc:	andeq	r6, r1, r4, lsr #13
   16600:	andeq	r6, r1, r4, lsr #13
   16604:	andeq	r6, r1, r4, lsr #13
   16608:	andeq	r6, r1, r4, lsr #13
   1660c:	andeq	r6, r1, r4, lsr #13
   16610:	andeq	r6, r1, r4, lsr #13
   16614:	muleq	r1, ip, r7
   16618:	andeq	r6, r1, r4, asr #15
   1661c:	andeq	r6, r1, r4, lsr #13
   16620:	muleq	r1, ip, r7
   16624:	andeq	r6, r1, r4, lsr #13
   16628:	muleq	r1, ip, r7
   1662c:	andeq	r6, r1, r4, lsr #13
   16630:	andeq	r6, r1, r4, lsr #13
   16634:	andeq	r6, r1, r4, lsr #13
   16638:	andeq	r6, r1, r4, lsr #13
   1663c:	andeq	r6, r1, r4, lsr #13
   16640:	andeq	r6, r1, r4, lsr #13
   16644:	andeq	r6, r1, r4, lsr #13
   16648:	andeq	r6, r1, r4, lsr #13
   1664c:	andeq	r6, r1, r4, lsr #13
   16650:	andeq	r6, r1, r4, lsr #13
   16654:	andeq	r6, r1, r4, lsr #13
   16658:	andeq	r6, r1, r4, lsr #13
   1665c:	andeq	r6, r1, r4, lsr #13
   16660:	andeq	r6, r1, r4, lsr #13
   16664:	andeq	r6, r1, r4, lsr #13
   16668:	andeq	r6, r1, r4, lsr #13
   1666c:	andeq	r6, r1, r4, lsr #13
   16670:	andeq	r6, r1, r4, lsr #13
   16674:	andeq	r6, r1, r4, lsr #13
   16678:	andeq	r6, r1, r4, lsr #13
   1667c:	andeq	r6, r1, r4, lsr #13
   16680:	andeq	r6, r1, r4, lsr #13
   16684:	andeq	r6, r1, r4, lsr #13
   16688:	andeq	r6, r1, r4, lsr #13
   1668c:	andeq	r6, r1, r4, lsr #13
   16690:	andeq	r6, r1, r4, lsr #13
   16694:	andeq	r6, r1, r8, asr r7
   16698:	muleq	r1, ip, r7
   1669c:	andeq	r6, r1, r8, asr r7
   166a0:	andeq	r6, r1, r0, lsl #15
   166a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166a8:	tst	r0, #1
   166ac:	bne	166d8 <__assert_fail@plt+0x51e8>
   166b0:	ldr	r1, [fp, #16]
   166b4:	ubfx	r0, r6, #5, #3
   166b8:	mov	r2, #1
   166bc:	ldr	r0, [r1, r0, lsl #2]
   166c0:	and	r1, r6, #31
   166c4:	tst	r0, r2, lsl r1
   166c8:	beq	166d8 <__assert_fail@plt+0x51e8>
   166cc:	mov	r0, r6
   166d0:	mov	r1, r9
   166d4:	b	166ec <__assert_fail@plt+0x51fc>
   166d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   166dc:	mov	r1, r9
   166e0:	cmp	r0, #0
   166e4:	mov	r0, r6
   166e8:	beq	16e38 <__assert_fail@plt+0x5948>
   166ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   166f0:	tst	r2, #1
   166f4:	bne	16fd4 <__assert_fail@plt+0x5ae4>
   166f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   166fc:	subs	r2, r2, #2
   16700:	movwne	r2, #1
   16704:	orr	r2, r2, lr
   16708:	tst	r2, #1
   1670c:	bne	16744 <__assert_fail@plt+0x5254>
   16710:	cmp	r8, ip
   16714:	mov	lr, #1
   16718:	movcc	r2, #39	; 0x27
   1671c:	strbcc	r2, [r5, r8]
   16720:	add	r2, r8, #1
   16724:	cmp	r2, ip
   16728:	movcc	r3, #36	; 0x24
   1672c:	strbcc	r3, [r5, r2]
   16730:	add	r2, r8, #2
   16734:	add	r8, r8, #3
   16738:	cmp	r2, ip
   1673c:	movcc	r3, #39	; 0x27
   16740:	strbcc	r3, [r5, r2]
   16744:	cmp	r8, ip
   16748:	movcc	r2, #92	; 0x5c
   1674c:	strbcc	r2, [r5, r8]
   16750:	add	r8, r8, #1
   16754:	b	16e78 <__assert_fail@plt+0x5988>
   16758:	cmp	sl, #1
   1675c:	beq	16780 <__assert_fail@plt+0x5290>
   16760:	mov	r9, #0
   16764:	cmn	sl, #1
   16768:	bne	1678c <__assert_fail@plt+0x529c>
   1676c:	ldrb	r0, [r4, #1]
   16770:	cmp	r0, #0
   16774:	beq	16780 <__assert_fail@plt+0x5290>
   16778:	mvn	sl, #0
   1677c:	b	1678c <__assert_fail@plt+0x529c>
   16780:	mov	r9, #0
   16784:	cmp	r7, #0
   16788:	beq	16798 <__assert_fail@plt+0x52a8>
   1678c:	mov	r0, #0
   16790:	str	r0, [fp, #-56]	; 0xffffffc8
   16794:	b	166a4 <__assert_fail@plt+0x51b4>
   16798:	mov	r1, #1
   1679c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167a0:	cmp	r0, #2
   167a4:	bne	167bc <__assert_fail@plt+0x52cc>
   167a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   167ac:	mov	r9, r1
   167b0:	tst	r0, #1
   167b4:	beq	166a4 <__assert_fail@plt+0x51b4>
   167b8:	b	16fd4 <__assert_fail@plt+0x5ae4>
   167bc:	mov	r9, r1
   167c0:	b	166a4 <__assert_fail@plt+0x51b4>
   167c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167c8:	cmp	r0, #2
   167cc:	bne	16a10 <__assert_fail@plt+0x5520>
   167d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   167d4:	tst	r0, #1
   167d8:	bne	16fd4 <__assert_fail@plt+0x5ae4>
   167dc:	mov	r0, #0
   167e0:	str	r0, [fp, #-56]	; 0xffffffc8
   167e4:	b	16a28 <__assert_fail@plt+0x5538>
   167e8:	mov	r0, #102	; 0x66
   167ec:	b	16a34 <__assert_fail@plt+0x5544>
   167f0:	mov	r2, #116	; 0x74
   167f4:	b	16804 <__assert_fail@plt+0x5314>
   167f8:	mov	r0, #98	; 0x62
   167fc:	b	16a34 <__assert_fail@plt+0x5544>
   16800:	mov	r2, #114	; 0x72
   16804:	ldr	r0, [sp, #68]	; 0x44
   16808:	tst	r0, #1
   1680c:	mov	r0, r2
   16810:	bne	16a34 <__assert_fail@plt+0x5544>
   16814:	b	16fd4 <__assert_fail@plt+0x5ae4>
   16818:	ldr	r0, [sp, #84]	; 0x54
   1681c:	tst	r0, #1
   16820:	beq	16a54 <__assert_fail@plt+0x5564>
   16824:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16828:	tst	r0, #1
   1682c:	bne	170c0 <__assert_fail@plt+0x5bd0>
   16830:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16834:	mov	r2, sl
   16838:	subs	r0, r0, #2
   1683c:	movwne	r0, #1
   16840:	orr	r0, r0, lr
   16844:	tst	r0, #1
   16848:	bne	16880 <__assert_fail@plt+0x5390>
   1684c:	cmp	r8, ip
   16850:	mov	lr, #1
   16854:	movcc	r0, #39	; 0x27
   16858:	strbcc	r0, [r5, r8]
   1685c:	add	r0, r8, #1
   16860:	cmp	r0, ip
   16864:	movcc	r1, #36	; 0x24
   16868:	strbcc	r1, [r5, r0]
   1686c:	add	r0, r8, #2
   16870:	add	r8, r8, #3
   16874:	cmp	r0, ip
   16878:	movcc	r1, #39	; 0x27
   1687c:	strbcc	r1, [r5, r0]
   16880:	mov	r1, #1
   16884:	cmp	r8, ip
   16888:	mov	r9, #0
   1688c:	mov	r6, #48	; 0x30
   16890:	str	r1, [fp, #-56]	; 0xffffffc8
   16894:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16898:	movcc	r0, #92	; 0x5c
   1689c:	strbcc	r0, [r5, r8]
   168a0:	add	r0, r8, #1
   168a4:	cmp	r1, #2
   168a8:	beq	16bb0 <__assert_fail@plt+0x56c0>
   168ac:	add	r1, r7, #1
   168b0:	cmp	r1, r2
   168b4:	bcs	16bb0 <__assert_fail@plt+0x56c0>
   168b8:	ldrb	r1, [r4, r1]
   168bc:	sub	r1, r1, #48	; 0x30
   168c0:	uxtb	r1, r1
   168c4:	cmp	r1, #9
   168c8:	bhi	16bb0 <__assert_fail@plt+0x56c0>
   168cc:	cmp	r0, ip
   168d0:	movcc	r1, #48	; 0x30
   168d4:	strbcc	r1, [r5, r0]
   168d8:	add	r0, r8, #2
   168dc:	add	r8, r8, #3
   168e0:	cmp	r0, ip
   168e4:	movcc	r1, #48	; 0x30
   168e8:	strbcc	r1, [r5, r0]
   168ec:	b	166a4 <__assert_fail@plt+0x51b4>
   168f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168f4:	mov	r6, #63	; 0x3f
   168f8:	cmp	r0, #5
   168fc:	beq	16bb8 <__assert_fail@plt+0x56c8>
   16900:	mov	r1, #0
   16904:	cmp	r0, #2
   16908:	str	r1, [fp, #-56]	; 0xffffffc8
   1690c:	bne	16c6c <__assert_fail@plt+0x577c>
   16910:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16914:	mov	r9, #0
   16918:	b	167b0 <__assert_fail@plt+0x52c0>
   1691c:	mov	r0, #118	; 0x76
   16920:	b	16a34 <__assert_fail@plt+0x5544>
   16924:	mov	r0, #1
   16928:	mov	r6, #39	; 0x27
   1692c:	str	r0, [sp, #60]	; 0x3c
   16930:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16934:	cmp	r0, #2
   16938:	bne	169ac <__assert_fail@plt+0x54bc>
   1693c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16940:	tst	r0, #1
   16944:	bne	16fd4 <__assert_fail@plt+0x5ae4>
   16948:	ldr	r2, [sp, #56]	; 0x38
   1694c:	clz	r1, ip
   16950:	mov	lr, #0
   16954:	lsr	r1, r1, #5
   16958:	cmp	r2, #0
   1695c:	mov	r0, r2
   16960:	movwne	r0, #1
   16964:	orrs	r0, r0, r1
   16968:	moveq	r2, ip
   1696c:	moveq	ip, r0
   16970:	cmp	r8, ip
   16974:	str	r2, [sp, #56]	; 0x38
   16978:	movcc	r0, #39	; 0x27
   1697c:	strbcc	r0, [r5, r8]
   16980:	add	r0, r8, #1
   16984:	cmp	r0, ip
   16988:	movcc	r1, #92	; 0x5c
   1698c:	strbcc	r1, [r5, r0]
   16990:	add	r0, r8, #2
   16994:	add	r8, r8, #3
   16998:	cmp	r0, ip
   1699c:	movcc	r1, #39	; 0x27
   169a0:	strbcc	r1, [r5, r0]
   169a4:	mov	r0, #0
   169a8:	str	r0, [fp, #-56]	; 0xffffffc8
   169ac:	mov	r9, #1
   169b0:	b	166a4 <__assert_fail@plt+0x51b4>
   169b4:	ldr	r0, [sp, #40]	; 0x28
   169b8:	str	lr, [sp, #44]	; 0x2c
   169bc:	str	ip, [sp, #88]	; 0x58
   169c0:	cmp	r0, #1
   169c4:	bne	16a74 <__assert_fail@plt+0x5584>
   169c8:	str	sl, [sp, #36]	; 0x24
   169cc:	bl	11340 <__ctype_b_loc@plt>
   169d0:	ldr	r0, [r0]
   169d4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   169d8:	mov	r1, #1
   169dc:	add	r0, r0, r6, lsl #1
   169e0:	ldrb	r0, [r0, #1]
   169e4:	ubfx	r9, r0, #6, #1
   169e8:	ldr	r0, [sp, #52]	; 0x34
   169ec:	ldr	lr, [sp, #44]	; 0x2c
   169f0:	cmp	r1, #1
   169f4:	orr	r3, r9, r0
   169f8:	bhi	16c74 <__assert_fail@plt+0x5784>
   169fc:	tst	r3, #1
   16a00:	beq	16c74 <__assert_fail@plt+0x5784>
   16a04:	ldr	sl, [sp, #36]	; 0x24
   16a08:	ldr	ip, [sp, #88]	; 0x58
   16a0c:	b	166a4 <__assert_fail@plt+0x51b4>
   16a10:	ldr	r1, [sp, #48]	; 0x30
   16a14:	mov	r0, #0
   16a18:	str	r0, [fp, #-56]	; 0xffffffc8
   16a1c:	mov	r0, #92	; 0x5c
   16a20:	cmp	r1, #0
   16a24:	beq	16a34 <__assert_fail@plt+0x5544>
   16a28:	mov	r6, #92	; 0x5c
   16a2c:	mov	r9, #0
   16a30:	b	16e38 <__assert_fail@plt+0x5948>
   16a34:	mov	r1, #0
   16a38:	mov	r9, #0
   16a3c:	str	r1, [fp, #-56]	; 0xffffffc8
   16a40:	ldr	r1, [sp, #84]	; 0x54
   16a44:	tst	r1, #1
   16a48:	mov	r1, #0
   16a4c:	beq	166a4 <__assert_fail@plt+0x51b4>
   16a50:	b	166ec <__assert_fail@plt+0x51fc>
   16a54:	ldr	r0, [sp, #32]
   16a58:	mov	r6, #0
   16a5c:	mov	r9, #0
   16a60:	cmp	r0, #0
   16a64:	mov	r0, #0
   16a68:	str	r0, [fp, #-56]	; 0xffffffc8
   16a6c:	beq	166a4 <__assert_fail@plt+0x51b4>
   16a70:	b	16e90 <__assert_fail@plt+0x59a0>
   16a74:	mov	r0, #0
   16a78:	cmn	sl, #1
   16a7c:	sub	r3, fp, #40	; 0x28
   16a80:	str	r0, [fp, #-36]	; 0xffffffdc
   16a84:	str	r0, [fp, #-40]	; 0xffffffd8
   16a88:	bne	16aa0 <__assert_fail@plt+0x55b0>
   16a8c:	mov	r0, r4
   16a90:	bl	11364 <strlen@plt>
   16a94:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16a98:	sub	r3, fp, #40	; 0x28
   16a9c:	mov	sl, r0
   16aa0:	ldr	r0, [sp, #72]	; 0x48
   16aa4:	mov	r9, #1
   16aa8:	mov	r1, #0
   16aac:	str	sl, [sp, #36]	; 0x24
   16ab0:	add	r0, r0, r7
   16ab4:	str	r0, [sp, #20]
   16ab8:	add	r0, r1, r7
   16abc:	str	r1, [sp, #24]
   16ac0:	add	r1, r4, r0
   16ac4:	mov	r4, r0
   16ac8:	sub	r2, sl, r0
   16acc:	sub	r0, fp, #44	; 0x2c
   16ad0:	bl	1908c <__assert_fail@plt+0x7b9c>
   16ad4:	cmp	r0, #0
   16ad8:	beq	16ee4 <__assert_fail@plt+0x59f4>
   16adc:	cmn	r0, #1
   16ae0:	beq	16e9c <__assert_fail@plt+0x59ac>
   16ae4:	ldr	r2, [sp, #36]	; 0x24
   16ae8:	cmn	r0, #2
   16aec:	beq	16ea4 <__assert_fail@plt+0x59b4>
   16af0:	ldr	r2, [sp, #64]	; 0x40
   16af4:	ldr	ip, [sp, #88]	; 0x58
   16af8:	ldr	r4, [sp, #84]	; 0x54
   16afc:	ldr	lr, [fp, #-48]	; 0xffffffd0
   16b00:	cmp	r0, #2
   16b04:	mov	r1, #0
   16b08:	movwcc	r1, #1
   16b0c:	eor	r2, r2, #1
   16b10:	orrs	r1, r2, r1
   16b14:	bne	16b64 <__assert_fail@plt+0x5674>
   16b18:	ldr	r1, [sp, #24]
   16b1c:	ldr	r2, [sp, #20]
   16b20:	add	r1, r2, r1
   16b24:	sub	r2, r0, #1
   16b28:	ldrb	r3, [r1]
   16b2c:	sub	r5, r3, #94	; 0x5e
   16b30:	cmp	r5, #30
   16b34:	bhi	16b4c <__assert_fail@plt+0x565c>
   16b38:	mov	r4, #1
   16b3c:	mov	sl, #1073741829	; 0x40000005
   16b40:	tst	sl, r4, lsl r5
   16b44:	ldr	r4, [sp, #84]	; 0x54
   16b48:	bne	16fac <__assert_fail@plt+0x5abc>
   16b4c:	sub	r3, r3, #91	; 0x5b
   16b50:	cmp	r3, #2
   16b54:	bcc	16fac <__assert_fail@plt+0x5abc>
   16b58:	add	r1, r1, #1
   16b5c:	subs	r2, r2, #1
   16b60:	bne	16b28 <__assert_fail@plt+0x5638>
   16b64:	ldr	r5, [sp, #24]
   16b68:	str	lr, [fp, #-48]	; 0xffffffd0
   16b6c:	add	r5, r0, r5
   16b70:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16b74:	bl	11298 <iswprint@plt>
   16b78:	cmp	r0, #0
   16b7c:	sub	r4, fp, #40	; 0x28
   16b80:	movwne	r0, #1
   16b84:	and	r9, r9, r0
   16b88:	mov	r0, r4
   16b8c:	bl	11250 <mbsinit@plt>
   16b90:	mov	r1, r5
   16b94:	mov	r3, r4
   16b98:	ldr	sl, [sp, #36]	; 0x24
   16b9c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16ba0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16ba4:	cmp	r0, #0
   16ba8:	beq	16ab8 <__assert_fail@plt+0x55c8>
   16bac:	b	169e8 <__assert_fail@plt+0x54f8>
   16bb0:	mov	r8, r0
   16bb4:	b	166a4 <__assert_fail@plt+0x51b4>
   16bb8:	mov	r0, #0
   16bbc:	str	r0, [fp, #-56]	; 0xffffffc8
   16bc0:	ldr	r0, [sp, #28]
   16bc4:	cmp	r0, #0
   16bc8:	beq	16c6c <__assert_fail@plt+0x577c>
   16bcc:	add	r0, r7, #2
   16bd0:	mov	r1, sl
   16bd4:	cmp	r0, sl
   16bd8:	bcs	16c6c <__assert_fail@plt+0x577c>
   16bdc:	add	r1, r7, r4
   16be0:	ldrb	r1, [r1, #1]
   16be4:	cmp	r1, #63	; 0x3f
   16be8:	bne	16c6c <__assert_fail@plt+0x577c>
   16bec:	ldrb	r9, [r4, r0]
   16bf0:	sub	r2, r9, #33	; 0x21
   16bf4:	cmp	r2, #29
   16bf8:	bhi	16c6c <__assert_fail@plt+0x577c>
   16bfc:	mov	r1, r4
   16c00:	movw	r4, #20929	; 0x51c1
   16c04:	mov	r3, #1
   16c08:	movt	r4, #14336	; 0x3800
   16c0c:	tst	r4, r3, lsl r2
   16c10:	beq	16ef8 <__assert_fail@plt+0x5a08>
   16c14:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16c18:	tst	r2, #1
   16c1c:	bne	170c8 <__assert_fail@plt+0x5bd8>
   16c20:	cmp	r8, ip
   16c24:	mov	r4, r1
   16c28:	mov	r7, r0
   16c2c:	mov	r6, r9
   16c30:	movcc	r2, #63	; 0x3f
   16c34:	strbcc	r2, [r5, r8]
   16c38:	add	r2, r8, #1
   16c3c:	cmp	r2, ip
   16c40:	movcc	r3, #34	; 0x22
   16c44:	strbcc	r3, [r5, r2]
   16c48:	add	r2, r8, #2
   16c4c:	cmp	r2, ip
   16c50:	movcc	r3, #34	; 0x22
   16c54:	strbcc	r3, [r5, r2]
   16c58:	add	r2, r8, #3
   16c5c:	add	r8, r8, #4
   16c60:	cmp	r2, ip
   16c64:	movcc	r3, #63	; 0x3f
   16c68:	strbcc	r3, [r5, r2]
   16c6c:	mov	r9, #0
   16c70:	b	166a4 <__assert_fail@plt+0x51b4>
   16c74:	ldr	sl, [sp, #36]	; 0x24
   16c78:	add	r0, r1, r7
   16c7c:	mov	r2, #0
   16c80:	str	r3, [sp, #24]
   16c84:	str	r0, [fp, #-56]	; 0xffffffc8
   16c88:	tst	r3, #1
   16c8c:	beq	16cb8 <__assert_fail@plt+0x57c8>
   16c90:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16c94:	tst	r0, #1
   16c98:	beq	16d80 <__assert_fail@plt+0x5890>
   16c9c:	ldr	r1, [sp, #88]	; 0x58
   16ca0:	mov	r0, r3
   16ca4:	cmp	r8, r1
   16ca8:	movcc	r1, #92	; 0x5c
   16cac:	strbcc	r1, [r5, r8]
   16cb0:	add	r8, r8, #1
   16cb4:	b	16d84 <__assert_fail@plt+0x5894>
   16cb8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16cbc:	tst	r1, #1
   16cc0:	bne	16fd0 <__assert_fail@plt+0x5ae0>
   16cc4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16cc8:	subs	r2, r1, #2
   16ccc:	movwne	r2, #1
   16cd0:	orr	r2, r2, lr
   16cd4:	tst	r2, #1
   16cd8:	bne	16d1c <__assert_fail@plt+0x582c>
   16cdc:	ldr	r1, [sp, #88]	; 0x58
   16ce0:	add	r2, r8, #1
   16ce4:	mov	lr, #1
   16ce8:	cmp	r8, r1
   16cec:	movcc	r1, #39	; 0x27
   16cf0:	strbcc	r1, [r5, r8]
   16cf4:	ldr	r1, [sp, #88]	; 0x58
   16cf8:	cmp	r2, r1
   16cfc:	movcc	r1, #36	; 0x24
   16d00:	strbcc	r1, [r5, r2]
   16d04:	ldr	r1, [sp, #88]	; 0x58
   16d08:	add	r2, r8, #2
   16d0c:	add	r8, r8, #3
   16d10:	cmp	r2, r1
   16d14:	movcc	r1, #39	; 0x27
   16d18:	strbcc	r1, [r5, r2]
   16d1c:	ldr	r1, [sp, #88]	; 0x58
   16d20:	add	r2, r8, #1
   16d24:	mov	r0, r3
   16d28:	cmp	r8, r1
   16d2c:	movcc	r1, #92	; 0x5c
   16d30:	strbcc	r1, [r5, r8]
   16d34:	ldr	r1, [sp, #88]	; 0x58
   16d38:	cmp	r2, r1
   16d3c:	bcs	16d50 <__assert_fail@plt+0x5860>
   16d40:	uxtb	r3, r6
   16d44:	mov	r1, #48	; 0x30
   16d48:	orr	r3, r1, r3, lsr #6
   16d4c:	strb	r3, [r5, r2]
   16d50:	ldr	r1, [sp, #88]	; 0x58
   16d54:	add	r2, r8, #2
   16d58:	add	r8, r8, #3
   16d5c:	cmp	r2, r1
   16d60:	lsrcc	r3, r6, #3
   16d64:	movcc	r1, #6
   16d68:	bficc	r3, r1, #3, #29
   16d6c:	mov	r1, #6
   16d70:	bfi	r6, r1, #3, #29
   16d74:	strbcc	r3, [r5, r2]
   16d78:	mov	r2, #1
   16d7c:	b	16d8c <__assert_fail@plt+0x589c>
   16d80:	mov	r0, r3
   16d84:	mov	r1, #0
   16d88:	str	r1, [fp, #-52]	; 0xffffffcc
   16d8c:	mov	ip, r2
   16d90:	and	r1, r2, #1
   16d94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d98:	add	r3, r7, #1
   16d9c:	cmp	r2, r3
   16da0:	bls	16e28 <__assert_fail@plt+0x5938>
   16da4:	cmp	r1, #0
   16da8:	mvn	r5, lr
   16dac:	movwne	r1, #1
   16db0:	orr	r5, r5, r1
   16db4:	tst	r5, #1
   16db8:	bne	16dfc <__assert_fail@plt+0x590c>
   16dbc:	ldr	r1, [sp, #88]	; 0x58
   16dc0:	ldr	r5, [fp, #-84]	; 0xffffffac
   16dc4:	mov	r2, r4
   16dc8:	ldr	r4, [sp, #88]	; 0x58
   16dcc:	ldr	r0, [sp, #24]
   16dd0:	mov	lr, #0
   16dd4:	cmp	r8, r1
   16dd8:	movcc	r1, #39	; 0x27
   16ddc:	strbcc	r1, [r5, r8]
   16de0:	add	r1, r8, #1
   16de4:	add	r8, r8, #2
   16de8:	cmp	r1, r4
   16dec:	movcc	r4, #39	; 0x27
   16df0:	strbcc	r4, [r5, r1]
   16df4:	mov	r4, r2
   16df8:	b	16e00 <__assert_fail@plt+0x5910>
   16dfc:	ldr	r5, [fp, #-84]	; 0xffffffac
   16e00:	ldr	r1, [sp, #88]	; 0x58
   16e04:	mov	r2, ip
   16e08:	cmp	r8, r1
   16e0c:	ldr	r1, [sp, #72]	; 0x48
   16e10:	strbcc	r6, [r5, r8]
   16e14:	add	r8, r8, #1
   16e18:	ldrb	r6, [r1, r7]
   16e1c:	mov	r7, r3
   16e20:	mov	r3, r0
   16e24:	b	16c88 <__assert_fail@plt+0x5798>
   16e28:	ldr	ip, [sp, #88]	; 0x58
   16e2c:	cmp	r1, #0
   16e30:	movwne	r1, #1
   16e34:	str	r1, [fp, #-56]	; 0xffffffc8
   16e38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16e3c:	cmp	r0, #0
   16e40:	bne	16e70 <__assert_fail@plt+0x5980>
   16e44:	tst	lr, #1
   16e48:	beq	16e70 <__assert_fail@plt+0x5980>
   16e4c:	cmp	r8, ip
   16e50:	mov	lr, #0
   16e54:	movcc	r0, #39	; 0x27
   16e58:	strbcc	r0, [r5, r8]
   16e5c:	add	r0, r8, #1
   16e60:	add	r8, r8, #2
   16e64:	cmp	r0, ip
   16e68:	movcc	r1, #39	; 0x27
   16e6c:	strbcc	r1, [r5, r0]
   16e70:	mov	r1, r9
   16e74:	mov	r0, r6
   16e78:	cmp	r8, ip
   16e7c:	strbcc	r0, [r5, r8]
   16e80:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16e84:	add	r8, r8, #1
   16e88:	and	r0, r0, r1
   16e8c:	str	r0, [fp, #-48]	; 0xffffffd0
   16e90:	mov	r3, sl
   16e94:	add	r7, r7, #1
   16e98:	b	16388 <__assert_fail@plt+0x4e98>
   16e9c:	mov	r9, #0
   16ea0:	b	16ee4 <__assert_fail@plt+0x59f4>
   16ea4:	mov	r9, #0
   16ea8:	cmp	r2, r4
   16eac:	bls	16ee4 <__assert_fail@plt+0x59f4>
   16eb0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16eb4:	ldr	r1, [sp, #24]
   16eb8:	add	r0, r4, r7
   16ebc:	mov	r3, r1
   16ec0:	ldrb	r1, [r0, r1]
   16ec4:	cmp	r1, #0
   16ec8:	beq	16ef0 <__assert_fail@plt+0x5a00>
   16ecc:	add	r3, r3, #1
   16ed0:	add	r1, r7, r3
   16ed4:	cmp	r1, r2
   16ed8:	mov	r1, r3
   16edc:	bcc	16ebc <__assert_fail@plt+0x59cc>
   16ee0:	b	169e8 <__assert_fail@plt+0x54f8>
   16ee4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16ee8:	ldr	r1, [sp, #24]
   16eec:	b	169e8 <__assert_fail@plt+0x54f8>
   16ef0:	mov	r1, r3
   16ef4:	b	169e8 <__assert_fail@plt+0x54f8>
   16ef8:	mov	r9, #0
   16efc:	mov	r4, r1
   16f00:	b	166a4 <__assert_fail@plt+0x51b4>
   16f04:	mov	sl, r7
   16f08:	b	16f10 <__assert_fail@plt+0x5a20>
   16f0c:	mvn	sl, #0
   16f10:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16f14:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16f18:	eor	r0, r1, #2
   16f1c:	orr	r0, r0, r8
   16f20:	clz	r0, r0
   16f24:	lsr	r0, r0, #5
   16f28:	tst	r2, r0
   16f2c:	bne	16fd4 <__assert_fail@plt+0x5ae4>
   16f30:	subs	r0, r1, #2
   16f34:	movwne	r0, #1
   16f38:	orr	r0, r2, r0
   16f3c:	tst	r0, #1
   16f40:	ldreq	r0, [sp, #60]	; 0x3c
   16f44:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   16f48:	eoreq	r0, r0, #1
   16f4c:	tsteq	r0, #1
   16f50:	bne	17068 <__assert_fail@plt+0x5b78>
   16f54:	tst	r1, #1
   16f58:	bne	17034 <__assert_fail@plt+0x5b44>
   16f5c:	ldr	r6, [sp, #56]	; 0x38
   16f60:	mov	r9, #0
   16f64:	cmp	r6, #0
   16f68:	beq	17060 <__assert_fail@plt+0x5b70>
   16f6c:	ldr	r0, [sp, #84]	; 0x54
   16f70:	mov	r1, #0
   16f74:	mov	r7, #2
   16f78:	cmp	ip, #0
   16f7c:	str	r1, [fp, #-48]	; 0xffffffd0
   16f80:	mov	r1, #0
   16f84:	str	r1, [fp, #-76]	; 0xffffffb4
   16f88:	beq	160f0 <__assert_fail@plt+0x4c00>
   16f8c:	b	17068 <__assert_fail@plt+0x5b78>
   16f90:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16f94:	ldr	r1, [fp, #12]
   16f98:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16f9c:	mov	r5, r3
   16fa0:	mov	ip, r6
   16fa4:	mov	r3, sl
   16fa8:	b	16ff8 <__assert_fail@plt+0x5b08>
   16fac:	tst	r4, #1
   16fb0:	ldr	r5, [fp, #-84]	; 0xffffffac
   16fb4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16fb8:	ldr	r1, [fp, #12]
   16fbc:	ldr	r3, [sp, #36]	; 0x24
   16fc0:	mov	r0, #2
   16fc4:	movwne	r0, #4
   16fc8:	mov	r2, r0
   16fcc:	b	16ff8 <__assert_fail@plt+0x5b08>
   16fd0:	ldr	ip, [sp, #88]	; 0x58
   16fd4:	ldr	r1, [sp, #84]	; 0x54
   16fd8:	mov	r0, #2
   16fdc:	tst	r1, #1
   16fe0:	movwne	r0, #4
   16fe4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16fe8:	ldr	r1, [fp, #12]
   16fec:	mov	r3, sl
   16ff0:	cmp	r2, #2
   16ff4:	moveq	r2, r0
   16ff8:	mov	r0, #0
   16ffc:	bic	r1, r1, #2
   17000:	str	r2, [sp]
   17004:	mov	r2, r4
   17008:	str	r0, [sp, #8]
   1700c:	ldr	r0, [sp, #76]	; 0x4c
   17010:	str	r1, [sp, #4]
   17014:	mov	r1, ip
   17018:	str	r0, [sp, #12]
   1701c:	ldr	r0, [sp, #80]	; 0x50
   17020:	str	r0, [sp, #16]
   17024:	mov	r0, r5
   17028:	bl	16064 <__assert_fail@plt+0x4b74>
   1702c:	mov	r8, r0
   17030:	b	170b4 <__assert_fail@plt+0x5bc4>
   17034:	mov	r0, #5
   17038:	ldr	r1, [sp, #56]	; 0x38
   1703c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17040:	mov	r3, sl
   17044:	str	r0, [sp]
   17048:	ldr	r0, [fp, #12]
   1704c:	str	r0, [sp, #4]
   17050:	ldr	r0, [fp, #16]
   17054:	str	r0, [sp, #8]
   17058:	ldr	r0, [sp, #76]	; 0x4c
   1705c:	b	17018 <__assert_fail@plt+0x5b28>
   17060:	mov	r0, #0
   17064:	str	r0, [fp, #-76]	; 0xffffffb4
   17068:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1706c:	cmp	r1, #0
   17070:	beq	170a8 <__assert_fail@plt+0x5bb8>
   17074:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17078:	tst	r0, #1
   1707c:	bne	170a8 <__assert_fail@plt+0x5bb8>
   17080:	ldrb	r0, [r1]
   17084:	cmp	r0, #0
   17088:	beq	170a8 <__assert_fail@plt+0x5bb8>
   1708c:	add	r1, r1, #1
   17090:	cmp	r8, ip
   17094:	strbcc	r0, [r5, r8]
   17098:	add	r8, r8, #1
   1709c:	ldrb	r0, [r1], #1
   170a0:	cmp	r0, #0
   170a4:	bne	17090 <__assert_fail@plt+0x5ba0>
   170a8:	cmp	r8, ip
   170ac:	movcc	r0, #0
   170b0:	strbcc	r0, [r5, r8]
   170b4:	mov	r0, r8
   170b8:	sub	sp, fp, #28
   170bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c0:	mov	r0, #4
   170c4:	b	16fe4 <__assert_fail@plt+0x5af4>
   170c8:	mov	r4, r1
   170cc:	b	16fd4 <__assert_fail@plt+0x5ae4>
   170d0:	bl	114a8 <abort@plt>
   170d4:	mov	r3, r2
   170d8:	mov	r2, #0
   170dc:	b	170e0 <__assert_fail@plt+0x5bf0>
   170e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170e4:	add	fp, sp, #28
   170e8:	sub	sp, sp, #36	; 0x24
   170ec:	movw	r8, #45504	; 0xb1c0
   170f0:	cmp	r3, #0
   170f4:	mov	r4, r2
   170f8:	str	r2, [sp, #24]
   170fc:	mov	r5, r1
   17100:	mov	r6, r0
   17104:	str	r0, [sp, #20]
   17108:	movt	r8, #2
   1710c:	movne	r8, r3
   17110:	bl	11394 <__errno_location@plt>
   17114:	str	r0, [sp, #28]
   17118:	ldr	r1, [r8, #40]	; 0x28
   1711c:	ldr	r2, [r8, #44]	; 0x2c
   17120:	ldr	r7, [r0]
   17124:	cmp	r4, #0
   17128:	add	sl, r8, #8
   1712c:	mov	r0, #0
   17130:	ldm	r8, {r3, r9}
   17134:	orreq	r9, r9, #1
   17138:	stm	sp, {r3, r9, sl}
   1713c:	str	r1, [sp, #12]
   17140:	str	r2, [sp, #16]
   17144:	mov	r1, #0
   17148:	mov	r2, r6
   1714c:	mov	r3, r5
   17150:	str	r7, [sp, #32]
   17154:	mov	r7, r5
   17158:	bl	16064 <__assert_fail@plt+0x4b74>
   1715c:	add	r4, r0, #1
   17160:	mov	r5, r0
   17164:	mov	r0, r4
   17168:	bl	17eec <__assert_fail@plt+0x69fc>
   1716c:	mov	r6, r0
   17170:	ldr	r0, [r8]
   17174:	ldr	r2, [r8, #44]	; 0x2c
   17178:	ldr	r1, [r8, #40]	; 0x28
   1717c:	mov	r3, r7
   17180:	stm	sp, {r0, r9, sl}
   17184:	str	r2, [sp, #16]
   17188:	ldr	r2, [sp, #20]
   1718c:	str	r1, [sp, #12]
   17190:	mov	r0, r6
   17194:	mov	r1, r4
   17198:	bl	16064 <__assert_fail@plt+0x4b74>
   1719c:	ldr	r0, [sp, #24]
   171a0:	ldr	r1, [sp, #32]
   171a4:	ldr	r2, [sp, #28]
   171a8:	cmp	r0, #0
   171ac:	str	r1, [r2]
   171b0:	strne	r5, [r0]
   171b4:	mov	r0, r6
   171b8:	sub	sp, fp, #28
   171bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   171c4:	add	fp, sp, #24
   171c8:	movw	r5, #45372	; 0xb13c
   171cc:	movw	r8, #45368	; 0xb138
   171d0:	movt	r5, #2
   171d4:	movt	r8, #2
   171d8:	ldr	r0, [r5]
   171dc:	ldr	r4, [r8]
   171e0:	cmp	r0, #2
   171e4:	blt	17210 <__assert_fail@plt+0x5d20>
   171e8:	add	r7, r4, #12
   171ec:	mov	r6, #0
   171f0:	ldr	r0, [r7, r6, lsl #3]
   171f4:	bl	12ca8 <__assert_fail@plt+0x17b8>
   171f8:	ldr	r1, [r5]
   171fc:	add	r2, r6, #2
   17200:	add	r0, r6, #1
   17204:	mov	r6, r0
   17208:	cmp	r2, r1
   1720c:	blt	171f0 <__assert_fail@plt+0x5d00>
   17210:	ldr	r0, [r4, #4]
   17214:	movw	r9, #45552	; 0xb1f0
   17218:	movw	r7, #45376	; 0xb140
   1721c:	movt	r9, #2
   17220:	movt	r7, #2
   17224:	cmp	r0, r9
   17228:	beq	17238 <__assert_fail@plt+0x5d48>
   1722c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   17230:	mov	r0, #256	; 0x100
   17234:	stm	r7, {r0, r9}
   17238:	cmp	r4, r7
   1723c:	beq	1724c <__assert_fail@plt+0x5d5c>
   17240:	mov	r0, r4
   17244:	bl	12ca8 <__assert_fail@plt+0x17b8>
   17248:	str	r7, [r8]
   1724c:	mov	r0, #1
   17250:	str	r0, [r5]
   17254:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17258:	movw	r3, #45504	; 0xb1c0
   1725c:	mvn	r2, #0
   17260:	movt	r3, #2
   17264:	b	17268 <__assert_fail@plt+0x5d78>
   17268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1726c:	add	fp, sp, #28
   17270:	sub	sp, sp, #44	; 0x2c
   17274:	mov	r7, r3
   17278:	str	r2, [sp, #36]	; 0x24
   1727c:	str	r1, [sp, #32]
   17280:	mov	r5, r0
   17284:	bl	11394 <__errno_location@plt>
   17288:	cmp	r5, #0
   1728c:	bmi	173fc <__assert_fail@plt+0x5f0c>
   17290:	cmn	r5, #-2147483647	; 0x80000001
   17294:	beq	173fc <__assert_fail@plt+0x5f0c>
   17298:	movw	r8, #45372	; 0xb13c
   1729c:	movw	r4, #45368	; 0xb138
   172a0:	str	r0, [sp, #28]
   172a4:	ldr	r0, [r0]
   172a8:	movt	r8, #2
   172ac:	movt	r4, #2
   172b0:	ldr	r1, [r8]
   172b4:	ldr	r6, [r4]
   172b8:	str	r0, [sp, #24]
   172bc:	cmp	r1, r5
   172c0:	ble	172cc <__assert_fail@plt+0x5ddc>
   172c4:	mov	sl, r6
   172c8:	b	17338 <__assert_fail@plt+0x5e48>
   172cc:	movw	r9, #45376	; 0xb140
   172d0:	mov	r0, #8
   172d4:	str	r1, [fp, #-32]	; 0xffffffe0
   172d8:	sub	r1, r5, r1
   172dc:	mvn	r3, #-2147483648	; 0x80000000
   172e0:	movt	r9, #2
   172e4:	str	r0, [sp]
   172e8:	add	r2, r1, #1
   172ec:	sub	r1, fp, #32
   172f0:	subs	r0, r6, r9
   172f4:	movne	r0, r6
   172f8:	bl	1801c <__assert_fail@plt+0x6b2c>
   172fc:	mov	sl, r0
   17300:	cmp	r6, r9
   17304:	str	r0, [r4]
   17308:	bne	17314 <__assert_fail@plt+0x5e24>
   1730c:	ldrd	r0, [r9]
   17310:	stm	sl, {r0, r1}
   17314:	ldr	r1, [r8]
   17318:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1731c:	add	r0, sl, r1, lsl #3
   17320:	sub	r1, r2, r1
   17324:	lsl	r2, r1, #3
   17328:	mov	r1, #0
   1732c:	bl	113ac <memset@plt>
   17330:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17334:	str	r0, [r8]
   17338:	mov	r9, sl
   1733c:	ldm	r7, {r0, r1}
   17340:	orr	r8, r1, #1
   17344:	add	r1, r7, #8
   17348:	ldr	r2, [r7, #40]	; 0x28
   1734c:	ldr	r3, [r7, #44]	; 0x2c
   17350:	ldr	r6, [r9, r5, lsl #3]!
   17354:	str	r1, [sp, #20]
   17358:	ldr	r4, [r9, #4]!
   1735c:	stm	sp, {r0, r8}
   17360:	add	r0, sp, #8
   17364:	stm	r0, {r1, r2, r3}
   17368:	ldr	r2, [sp, #32]
   1736c:	ldr	r3, [sp, #36]	; 0x24
   17370:	mov	r1, r6
   17374:	mov	r0, r4
   17378:	bl	16064 <__assert_fail@plt+0x4b74>
   1737c:	cmp	r6, r0
   17380:	bhi	173e4 <__assert_fail@plt+0x5ef4>
   17384:	add	r6, r0, #1
   17388:	movw	r0, #45552	; 0xb1f0
   1738c:	movt	r0, #2
   17390:	str	r6, [sl, r5, lsl #3]
   17394:	cmp	r4, r0
   17398:	beq	173a4 <__assert_fail@plt+0x5eb4>
   1739c:	mov	r0, r4
   173a0:	bl	12ca8 <__assert_fail@plt+0x17b8>
   173a4:	mov	r0, r6
   173a8:	bl	17eec <__assert_fail@plt+0x69fc>
   173ac:	str	r0, [r9]
   173b0:	mov	r4, r0
   173b4:	add	r3, sp, #8
   173b8:	ldr	r0, [r7]
   173bc:	ldr	r1, [r7, #40]	; 0x28
   173c0:	ldr	r2, [r7, #44]	; 0x2c
   173c4:	stm	sp, {r0, r8}
   173c8:	ldr	r0, [sp, #20]
   173cc:	stm	r3, {r0, r1, r2}
   173d0:	ldr	r2, [sp, #32]
   173d4:	ldr	r3, [sp, #36]	; 0x24
   173d8:	mov	r0, r4
   173dc:	mov	r1, r6
   173e0:	bl	16064 <__assert_fail@plt+0x4b74>
   173e4:	ldr	r0, [sp, #28]
   173e8:	ldr	r1, [sp, #24]
   173ec:	str	r1, [r0]
   173f0:	mov	r0, r4
   173f4:	sub	sp, fp, #28
   173f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173fc:	bl	114a8 <abort@plt>
   17400:	movw	r3, #45504	; 0xb1c0
   17404:	movt	r3, #2
   17408:	b	17268 <__assert_fail@plt+0x5d78>
   1740c:	movw	r3, #45504	; 0xb1c0
   17410:	mov	r1, r0
   17414:	mov	r0, #0
   17418:	mvn	r2, #0
   1741c:	movt	r3, #2
   17420:	b	17268 <__assert_fail@plt+0x5d78>
   17424:	movw	r3, #45504	; 0xb1c0
   17428:	mov	r2, r1
   1742c:	mov	r1, r0
   17430:	mov	r0, #0
   17434:	movt	r3, #2
   17438:	b	17268 <__assert_fail@plt+0x5d78>
   1743c:	push	{fp, lr}
   17440:	mov	fp, sp
   17444:	sub	sp, sp, #48	; 0x30
   17448:	vmov.i32	q8, #0	; 0x00000000
   1744c:	mov	ip, #32
   17450:	mov	r3, sp
   17454:	mov	lr, r2
   17458:	cmp	r1, #10
   1745c:	add	r2, r3, #16
   17460:	vst1.64	{d16-d17}, [r3], ip
   17464:	vst1.64	{d16-d17}, [r2]
   17468:	vst1.64	{d16-d17}, [r3]
   1746c:	beq	1748c <__assert_fail@plt+0x5f9c>
   17470:	str	r1, [sp]
   17474:	mov	r3, sp
   17478:	mov	r1, lr
   1747c:	mvn	r2, #0
   17480:	bl	17268 <__assert_fail@plt+0x5d78>
   17484:	mov	sp, fp
   17488:	pop	{fp, pc}
   1748c:	bl	114a8 <abort@plt>
   17490:	push	{r4, sl, fp, lr}
   17494:	add	fp, sp, #8
   17498:	sub	sp, sp, #48	; 0x30
   1749c:	vmov.i32	q8, #0	; 0x00000000
   174a0:	mov	ip, r3
   174a4:	mov	r3, sp
   174a8:	mov	lr, #32
   174ac:	cmp	r1, #10
   174b0:	add	r4, r3, #16
   174b4:	vst1.64	{d16-d17}, [r3], lr
   174b8:	vst1.64	{d16-d17}, [r4]
   174bc:	vst1.64	{d16-d17}, [r3]
   174c0:	beq	174e0 <__assert_fail@plt+0x5ff0>
   174c4:	str	r1, [sp]
   174c8:	mov	r1, r2
   174cc:	mov	r3, sp
   174d0:	mov	r2, ip
   174d4:	bl	17268 <__assert_fail@plt+0x5d78>
   174d8:	sub	sp, fp, #8
   174dc:	pop	{r4, sl, fp, pc}
   174e0:	bl	114a8 <abort@plt>
   174e4:	mov	r2, r1
   174e8:	mov	r1, r0
   174ec:	mov	r0, #0
   174f0:	b	1743c <__assert_fail@plt+0x5f4c>
   174f4:	mov	r3, r2
   174f8:	mov	r2, r1
   174fc:	mov	r1, r0
   17500:	mov	r0, #0
   17504:	b	17490 <__assert_fail@plt+0x5fa0>
   17508:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1750c:	add	fp, sp, #24
   17510:	sub	sp, sp, #48	; 0x30
   17514:	movw	r8, #45504	; 0xb1c0
   17518:	mov	lr, r0
   1751c:	mov	r3, sp
   17520:	mov	ip, r1
   17524:	movt	r8, #2
   17528:	mov	r1, r3
   1752c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   17530:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17534:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17538:	stm	r1, {r0, r4, r5, r6, r7, r9}
   1753c:	ubfx	r0, r2, #5, #3
   17540:	and	r2, r2, #31
   17544:	mov	r4, #1
   17548:	add	r0, r3, r0, lsl #2
   1754c:	ldr	r1, [r0, #8]
   17550:	bic	r4, r4, r1, lsr r2
   17554:	eor	r1, r1, r4, lsl r2
   17558:	mov	r2, ip
   1755c:	str	r1, [r0, #8]
   17560:	mov	r0, #0
   17564:	mov	r1, lr
   17568:	bl	17268 <__assert_fail@plt+0x5d78>
   1756c:	sub	sp, fp, #24
   17570:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17574:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17578:	add	fp, sp, #24
   1757c:	sub	sp, sp, #48	; 0x30
   17580:	movw	lr, #45504	; 0xb1c0
   17584:	mov	ip, r0
   17588:	mov	r3, sp
   1758c:	movt	lr, #2
   17590:	mov	r2, r3
   17594:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   17598:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1759c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   175a0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   175a4:	ubfx	r0, r1, #5, #3
   175a8:	and	r1, r1, #31
   175ac:	mov	r7, #1
   175b0:	add	r0, r3, r0, lsl #2
   175b4:	ldr	r2, [r0, #8]
   175b8:	bic	r7, r7, r2, lsr r1
   175bc:	eor	r1, r2, r7, lsl r1
   175c0:	mvn	r2, #0
   175c4:	str	r1, [r0, #8]
   175c8:	mov	r0, #0
   175cc:	mov	r1, ip
   175d0:	bl	17268 <__assert_fail@plt+0x5d78>
   175d4:	sub	sp, fp, #24
   175d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175dc:	push	{r4, r5, r6, r7, fp, lr}
   175e0:	add	fp, sp, #16
   175e4:	sub	sp, sp, #48	; 0x30
   175e8:	movw	lr, #45504	; 0xb1c0
   175ec:	mov	ip, r0
   175f0:	mov	r3, sp
   175f4:	movt	lr, #2
   175f8:	mov	r2, r3
   175fc:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17600:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17604:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17608:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1760c:	mov	r1, ip
   17610:	mvn	r2, #0
   17614:	ldr	r0, [sp, #12]
   17618:	orr	r0, r0, #67108864	; 0x4000000
   1761c:	str	r0, [sp, #12]
   17620:	mov	r0, #0
   17624:	bl	17268 <__assert_fail@plt+0x5d78>
   17628:	sub	sp, fp, #16
   1762c:	pop	{r4, r5, r6, r7, fp, pc}
   17630:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17634:	add	fp, sp, #24
   17638:	sub	sp, sp, #48	; 0x30
   1763c:	movw	r8, #45504	; 0xb1c0
   17640:	mov	ip, r1
   17644:	mov	lr, r0
   17648:	mov	r3, sp
   1764c:	movt	r8, #2
   17650:	mov	r2, r3
   17654:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   17658:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1765c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   17660:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17664:	mov	r1, lr
   17668:	mov	r2, ip
   1766c:	ldr	r0, [sp, #12]
   17670:	orr	r0, r0, #67108864	; 0x4000000
   17674:	str	r0, [sp, #12]
   17678:	mov	r0, #0
   1767c:	bl	17268 <__assert_fail@plt+0x5d78>
   17680:	sub	sp, fp, #24
   17684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17688:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1768c:	add	fp, sp, #24
   17690:	sub	sp, sp, #96	; 0x60
   17694:	vmov.i32	q8, #0	; 0x00000000
   17698:	mov	lr, sp
   1769c:	mov	ip, r2
   176a0:	cmp	r1, #10
   176a4:	add	r3, lr, #16
   176a8:	mov	r2, lr
   176ac:	vst1.64	{d16-d17}, [r3]
   176b0:	mov	r3, #28
   176b4:	vst1.64	{d16-d17}, [r2], r3
   176b8:	vst1.32	{d16-d17}, [r2]
   176bc:	beq	176fc <__assert_fail@plt+0x620c>
   176c0:	str	r1, [sp, #48]	; 0x30
   176c4:	add	r3, sp, #48	; 0x30
   176c8:	ldm	lr!, {r2, r4, r5, r6, r7}
   176cc:	add	r1, r3, #4
   176d0:	stmia	r1!, {r2, r4, r5, r6, r7}
   176d4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   176d8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   176dc:	mvn	r2, #0
   176e0:	ldr	r1, [sp, #60]	; 0x3c
   176e4:	orr	r1, r1, #67108864	; 0x4000000
   176e8:	str	r1, [sp, #60]	; 0x3c
   176ec:	mov	r1, ip
   176f0:	bl	17268 <__assert_fail@plt+0x5d78>
   176f4:	sub	sp, fp, #24
   176f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   176fc:	bl	114a8 <abort@plt>
   17700:	push	{fp, lr}
   17704:	mov	fp, sp
   17708:	sub	sp, sp, #8
   1770c:	mvn	ip, #0
   17710:	str	ip, [sp]
   17714:	bl	17720 <__assert_fail@plt+0x6230>
   17718:	mov	sp, fp
   1771c:	pop	{fp, pc}
   17720:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17724:	add	fp, sp, #24
   17728:	sub	sp, sp, #48	; 0x30
   1772c:	movw	ip, #45504	; 0xb1c0
   17730:	mov	lr, r3
   17734:	mov	r3, sp
   17738:	cmp	r1, #0
   1773c:	movt	ip, #2
   17740:	cmpne	r2, #0
   17744:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17748:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1774c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   17750:	stm	r3, {r4, r5, r6, r7, r8, r9}
   17754:	mov	r3, #10
   17758:	str	r3, [sp]
   1775c:	bne	17764 <__assert_fail@plt+0x6274>
   17760:	bl	114a8 <abort@plt>
   17764:	ldr	ip, [fp, #8]
   17768:	str	r2, [sp, #44]	; 0x2c
   1776c:	str	r1, [sp, #40]	; 0x28
   17770:	mov	r3, sp
   17774:	mov	r1, lr
   17778:	mov	r2, ip
   1777c:	bl	17268 <__assert_fail@plt+0x5d78>
   17780:	sub	sp, fp, #24
   17784:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17788:	push	{fp, lr}
   1778c:	mov	fp, sp
   17790:	sub	sp, sp, #8
   17794:	mov	r3, r2
   17798:	mov	r2, r1
   1779c:	mov	r1, r0
   177a0:	mvn	r0, #0
   177a4:	str	r0, [sp]
   177a8:	mov	r0, #0
   177ac:	bl	17720 <__assert_fail@plt+0x6230>
   177b0:	mov	sp, fp
   177b4:	pop	{fp, pc}
   177b8:	push	{fp, lr}
   177bc:	mov	fp, sp
   177c0:	sub	sp, sp, #8
   177c4:	mov	ip, r2
   177c8:	mov	r2, r1
   177cc:	mov	r1, r0
   177d0:	str	r3, [sp]
   177d4:	mov	r0, #0
   177d8:	mov	r3, ip
   177dc:	bl	17720 <__assert_fail@plt+0x6230>
   177e0:	mov	sp, fp
   177e4:	pop	{fp, pc}
   177e8:	movw	r3, #45384	; 0xb148
   177ec:	movt	r3, #2
   177f0:	b	17268 <__assert_fail@plt+0x5d78>
   177f4:	movw	r3, #45384	; 0xb148
   177f8:	mov	r2, r1
   177fc:	mov	r1, r0
   17800:	mov	r0, #0
   17804:	movt	r3, #2
   17808:	b	17268 <__assert_fail@plt+0x5d78>
   1780c:	movw	r3, #45384	; 0xb148
   17810:	mvn	r2, #0
   17814:	movt	r3, #2
   17818:	b	17268 <__assert_fail@plt+0x5d78>
   1781c:	movw	r3, #45384	; 0xb148
   17820:	mov	r1, r0
   17824:	mov	r0, #0
   17828:	mvn	r2, #0
   1782c:	movt	r3, #2
   17830:	b	17268 <__assert_fail@plt+0x5d78>
   17834:	push	{r4, r5, fp, lr}
   17838:	add	fp, sp, #8
   1783c:	mov	r5, r0
   17840:	mov	r4, r1
   17844:	mov	r0, #0
   17848:	mov	r2, #5
   1784c:	mov	r1, r5
   17850:	bl	11268 <dcgettext@plt>
   17854:	cmp	r0, r5
   17858:	popne	{r4, r5, fp, pc}
   1785c:	bl	19054 <__assert_fail@plt+0x7b64>
   17860:	ldrb	r1, [r0]
   17864:	and	r1, r1, #223	; 0xdf
   17868:	cmp	r1, #71	; 0x47
   1786c:	beq	178d4 <__assert_fail@plt+0x63e4>
   17870:	cmp	r1, #85	; 0x55
   17874:	bne	1792c <__assert_fail@plt+0x643c>
   17878:	ldrb	r1, [r0, #1]
   1787c:	and	r1, r1, #223	; 0xdf
   17880:	cmp	r1, #84	; 0x54
   17884:	bne	1792c <__assert_fail@plt+0x643c>
   17888:	ldrb	r1, [r0, #2]
   1788c:	and	r1, r1, #223	; 0xdf
   17890:	cmp	r1, #70	; 0x46
   17894:	bne	1792c <__assert_fail@plt+0x643c>
   17898:	ldrb	r1, [r0, #3]
   1789c:	cmp	r1, #45	; 0x2d
   178a0:	bne	1792c <__assert_fail@plt+0x643c>
   178a4:	ldrb	r1, [r0, #4]
   178a8:	cmp	r1, #56	; 0x38
   178ac:	bne	1792c <__assert_fail@plt+0x643c>
   178b0:	ldrb	r0, [r0, #5]
   178b4:	cmp	r0, #0
   178b8:	bne	1792c <__assert_fail@plt+0x643c>
   178bc:	ldrb	r1, [r5]
   178c0:	movw	r2, #41986	; 0xa402
   178c4:	movw	r0, #41990	; 0xa406
   178c8:	movt	r2, #1
   178cc:	movt	r0, #1
   178d0:	b	1795c <__assert_fail@plt+0x646c>
   178d4:	ldrb	r1, [r0, #1]
   178d8:	and	r1, r1, #223	; 0xdf
   178dc:	cmp	r1, #66	; 0x42
   178e0:	bne	1792c <__assert_fail@plt+0x643c>
   178e4:	ldrb	r1, [r0, #2]
   178e8:	cmp	r1, #49	; 0x31
   178ec:	bne	1792c <__assert_fail@plt+0x643c>
   178f0:	ldrb	r1, [r0, #3]
   178f4:	cmp	r1, #56	; 0x38
   178f8:	bne	1792c <__assert_fail@plt+0x643c>
   178fc:	ldrb	r1, [r0, #4]
   17900:	cmp	r1, #48	; 0x30
   17904:	bne	1792c <__assert_fail@plt+0x643c>
   17908:	ldrb	r1, [r0, #5]
   1790c:	cmp	r1, #51	; 0x33
   17910:	bne	1792c <__assert_fail@plt+0x643c>
   17914:	ldrb	r1, [r0, #6]
   17918:	cmp	r1, #48	; 0x30
   1791c:	bne	1792c <__assert_fail@plt+0x643c>
   17920:	ldrb	r0, [r0, #7]
   17924:	cmp	r0, #0
   17928:	beq	17948 <__assert_fail@plt+0x6458>
   1792c:	movw	r1, #41980	; 0xa3fc
   17930:	movw	r0, #41984	; 0xa400
   17934:	cmp	r4, #9
   17938:	movt	r1, #1
   1793c:	movt	r0, #1
   17940:	moveq	r0, r1
   17944:	pop	{r4, r5, fp, pc}
   17948:	ldrb	r1, [r5]
   1794c:	movw	r2, #41994	; 0xa40a
   17950:	movw	r0, #41998	; 0xa40e
   17954:	movt	r2, #1
   17958:	movt	r0, #1
   1795c:	cmp	r1, #96	; 0x60
   17960:	moveq	r0, r2
   17964:	pop	{r4, r5, fp, pc}
   17968:	push	{r4, sl, fp, lr}
   1796c:	add	fp, sp, #8
   17970:	sub	sp, sp, #104	; 0x68
   17974:	mov	r4, r0
   17978:	movw	r0, #42823	; 0xa747
   1797c:	mov	r1, sp
   17980:	movt	r0, #1
   17984:	bl	19448 <__assert_fail@plt+0x7f58>
   17988:	mov	r1, r0
   1798c:	mov	r0, #0
   17990:	cmp	r1, #0
   17994:	bne	179ac <__assert_fail@plt+0x64bc>
   17998:	ldr	r0, [sp, #96]	; 0x60
   1799c:	ldr	r1, [sp, #100]	; 0x64
   179a0:	ldm	sp, {r2, r3}
   179a4:	stm	r4, {r0, r1, r2, r3}
   179a8:	mov	r0, r4
   179ac:	sub	sp, fp, #8
   179b0:	pop	{r4, sl, fp, pc}
   179b4:	push	{r4, r5, r6, r7, fp, lr}
   179b8:	add	fp, sp, #16
   179bc:	mov	r4, r0
   179c0:	cmp	r0, #2
   179c4:	bhi	179f4 <__assert_fail@plt+0x6504>
   179c8:	mov	r0, r4
   179cc:	bl	1912c <__assert_fail@plt+0x7c3c>
   179d0:	mov	r5, r0
   179d4:	bl	11394 <__errno_location@plt>
   179d8:	ldr	r7, [r0]
   179dc:	mov	r6, r0
   179e0:	mov	r0, r4
   179e4:	bl	114b4 <close@plt>
   179e8:	mov	r0, r5
   179ec:	str	r7, [r6]
   179f0:	pop	{r4, r5, r6, r7, fp, pc}
   179f4:	mov	r0, r4
   179f8:	pop	{r4, r5, r6, r7, fp, pc}
   179fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a00:	add	fp, sp, #24
   17a04:	sub	sp, sp, #32
   17a08:	ldr	r6, [fp, #12]
   17a0c:	ldr	r7, [fp, #8]
   17a10:	mov	r4, r2
   17a14:	mov	r8, r0
   17a18:	cmp	r1, #0
   17a1c:	beq	17a44 <__assert_fail@plt+0x6554>
   17a20:	movw	r2, #42088	; 0xa468
   17a24:	mov	r5, r1
   17a28:	str	r3, [sp, #4]
   17a2c:	str	r4, [sp]
   17a30:	mov	r0, r8
   17a34:	mov	r1, #1
   17a38:	movt	r2, #1
   17a3c:	mov	r3, r5
   17a40:	b	17a5c <__assert_fail@plt+0x656c>
   17a44:	movw	r2, #42100	; 0xa474
   17a48:	str	r3, [sp]
   17a4c:	mov	r0, r8
   17a50:	mov	r1, #1
   17a54:	mov	r3, r4
   17a58:	movt	r2, #1
   17a5c:	bl	113dc <__fprintf_chk@plt>
   17a60:	movw	r1, #42107	; 0xa47b
   17a64:	mov	r0, #0
   17a68:	mov	r2, #5
   17a6c:	movt	r1, #1
   17a70:	bl	11268 <dcgettext@plt>
   17a74:	movw	r2, #42825	; 0xa749
   17a78:	mov	r3, r0
   17a7c:	movw	r0, #2022	; 0x7e6
   17a80:	mov	r1, #1
   17a84:	movt	r2, #1
   17a88:	str	r0, [sp]
   17a8c:	mov	r0, r8
   17a90:	bl	113dc <__fprintf_chk@plt>
   17a94:	movw	r4, #39579	; 0x9a9b
   17a98:	mov	r1, r8
   17a9c:	movt	r4, #1
   17aa0:	mov	r0, r4
   17aa4:	bl	111e4 <fputs_unlocked@plt>
   17aa8:	movw	r1, #42111	; 0xa47f
   17aac:	mov	r0, #0
   17ab0:	mov	r2, #5
   17ab4:	movt	r1, #1
   17ab8:	bl	11268 <dcgettext@plt>
   17abc:	movw	r3, #42282	; 0xa52a
   17ac0:	mov	r2, r0
   17ac4:	mov	r0, r8
   17ac8:	mov	r1, #1
   17acc:	movt	r3, #1
   17ad0:	bl	113dc <__fprintf_chk@plt>
   17ad4:	mov	r0, r4
   17ad8:	mov	r1, r8
   17adc:	bl	111e4 <fputs_unlocked@plt>
   17ae0:	cmp	r6, #9
   17ae4:	bhi	17b48 <__assert_fail@plt+0x6658>
   17ae8:	add	r0, pc, #0
   17aec:	ldr	pc, [r0, r6, lsl #2]
   17af0:	andeq	r7, r1, r0, lsr #26
   17af4:	andeq	r7, r1, r8, lsl fp
   17af8:	andeq	r7, r1, r4, asr fp
   17afc:	andeq	r7, r1, ip, ror fp
   17b00:	andeq	r7, r1, r4, lsr #23
   17b04:	andeq	r7, r1, ip, asr #23
   17b08:	strdeq	r7, [r1], -r4
   17b0c:	andeq	r7, r1, ip, lsr #24
   17b10:	andeq	r7, r1, ip, asr #25
   17b14:	andeq	r7, r1, r4, ror ip
   17b18:	movw	r1, #42316	; 0xa54c
   17b1c:	mov	r0, #0
   17b20:	mov	r2, #5
   17b24:	movt	r1, #1
   17b28:	bl	11268 <dcgettext@plt>
   17b2c:	ldr	r3, [r7]
   17b30:	mov	r2, r0
   17b34:	mov	r0, r8
   17b38:	mov	r1, #1
   17b3c:	sub	sp, fp, #24
   17b40:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b44:	b	113dc <__fprintf_chk@plt>
   17b48:	movw	r1, #42635	; 0xa68b
   17b4c:	movt	r1, #1
   17b50:	b	17c7c <__assert_fail@plt+0x678c>
   17b54:	movw	r1, #42332	; 0xa55c
   17b58:	mov	r0, #0
   17b5c:	mov	r2, #5
   17b60:	movt	r1, #1
   17b64:	bl	11268 <dcgettext@plt>
   17b68:	mov	r2, r0
   17b6c:	ldr	r3, [r7]
   17b70:	ldr	r0, [r7, #4]
   17b74:	str	r0, [sp]
   17b78:	b	17c68 <__assert_fail@plt+0x6778>
   17b7c:	movw	r1, #42355	; 0xa573
   17b80:	mov	r0, #0
   17b84:	mov	r2, #5
   17b88:	movt	r1, #1
   17b8c:	bl	11268 <dcgettext@plt>
   17b90:	mov	r2, r0
   17b94:	ldr	r3, [r7]
   17b98:	ldmib	r7, {r0, r1}
   17b9c:	stm	sp, {r0, r1}
   17ba0:	b	17c68 <__assert_fail@plt+0x6778>
   17ba4:	movw	r1, #42383	; 0xa58f
   17ba8:	mov	r0, #0
   17bac:	mov	r2, #5
   17bb0:	movt	r1, #1
   17bb4:	bl	11268 <dcgettext@plt>
   17bb8:	ldr	r3, [r7]
   17bbc:	mov	r2, r0
   17bc0:	ldmib	r7, {r0, r1, r7}
   17bc4:	stm	sp, {r0, r1, r7}
   17bc8:	b	17c68 <__assert_fail@plt+0x6778>
   17bcc:	movw	r1, #42415	; 0xa5af
   17bd0:	mov	r0, #0
   17bd4:	mov	r2, #5
   17bd8:	movt	r1, #1
   17bdc:	bl	11268 <dcgettext@plt>
   17be0:	ldr	r3, [r7]
   17be4:	mov	r2, r0
   17be8:	ldmib	r7, {r0, r1, r6, r7}
   17bec:	stm	sp, {r0, r1, r6, r7}
   17bf0:	b	17c68 <__assert_fail@plt+0x6778>
   17bf4:	movw	r1, #42451	; 0xa5d3
   17bf8:	mov	r0, #0
   17bfc:	mov	r2, #5
   17c00:	movt	r1, #1
   17c04:	bl	11268 <dcgettext@plt>
   17c08:	mov	r2, r0
   17c0c:	ldr	r3, [r7]
   17c10:	ldmib	r7, {r0, r1, r6}
   17c14:	ldr	r5, [r7, #16]
   17c18:	ldr	r7, [r7, #20]
   17c1c:	stm	sp, {r0, r1, r6}
   17c20:	str	r5, [sp, #12]
   17c24:	str	r7, [sp, #16]
   17c28:	b	17c68 <__assert_fail@plt+0x6778>
   17c2c:	movw	r1, #42491	; 0xa5fb
   17c30:	mov	r0, #0
   17c34:	mov	r2, #5
   17c38:	movt	r1, #1
   17c3c:	bl	11268 <dcgettext@plt>
   17c40:	mov	r2, r0
   17c44:	ldr	r3, [r7]
   17c48:	ldmib	r7, {r0, r1, r6}
   17c4c:	ldr	r5, [r7, #16]
   17c50:	ldr	r4, [r7, #20]
   17c54:	ldr	r7, [r7, #24]
   17c58:	stm	sp, {r0, r1, r6}
   17c5c:	str	r5, [sp, #12]
   17c60:	str	r4, [sp, #16]
   17c64:	str	r7, [sp, #20]
   17c68:	mov	r0, r8
   17c6c:	mov	r1, #1
   17c70:	b	17d1c <__assert_fail@plt+0x682c>
   17c74:	movw	r1, #42583	; 0xa657
   17c78:	movt	r1, #1
   17c7c:	mov	r0, #0
   17c80:	mov	r2, #5
   17c84:	bl	11268 <dcgettext@plt>
   17c88:	mov	ip, r0
   17c8c:	ldr	r3, [r7]
   17c90:	ldr	r0, [r7, #4]
   17c94:	ldr	r1, [r7, #8]
   17c98:	ldr	r6, [r7, #12]
   17c9c:	ldr	r5, [r7, #16]
   17ca0:	ldr	r4, [r7, #20]
   17ca4:	ldr	r2, [r7, #24]
   17ca8:	ldr	lr, [r7, #28]
   17cac:	ldr	r7, [r7, #32]
   17cb0:	stm	sp, {r0, r1, r6}
   17cb4:	str	r5, [sp, #12]
   17cb8:	str	r4, [sp, #16]
   17cbc:	str	r2, [sp, #20]
   17cc0:	str	lr, [sp, #24]
   17cc4:	str	r7, [sp, #28]
   17cc8:	b	17d10 <__assert_fail@plt+0x6820>
   17ccc:	movw	r1, #42535	; 0xa627
   17cd0:	mov	r0, #0
   17cd4:	mov	r2, #5
   17cd8:	movt	r1, #1
   17cdc:	bl	11268 <dcgettext@plt>
   17ce0:	mov	ip, r0
   17ce4:	ldr	r3, [r7]
   17ce8:	ldmib	r7, {r0, r1, r6}
   17cec:	ldr	r5, [r7, #16]
   17cf0:	ldr	r4, [r7, #20]
   17cf4:	ldr	r2, [r7, #24]
   17cf8:	ldr	r7, [r7, #28]
   17cfc:	stm	sp, {r0, r1, r6}
   17d00:	str	r5, [sp, #12]
   17d04:	str	r4, [sp, #16]
   17d08:	str	r2, [sp, #20]
   17d0c:	str	r7, [sp, #24]
   17d10:	mov	r0, r8
   17d14:	mov	r1, #1
   17d18:	mov	r2, ip
   17d1c:	bl	113dc <__fprintf_chk@plt>
   17d20:	sub	sp, fp, #24
   17d24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d28:	push	{r4, sl, fp, lr}
   17d2c:	add	fp, sp, #8
   17d30:	sub	sp, sp, #8
   17d34:	ldr	ip, [fp, #8]
   17d38:	mov	lr, #0
   17d3c:	ldr	r4, [ip, lr, lsl #2]
   17d40:	add	lr, lr, #1
   17d44:	cmp	r4, #0
   17d48:	bne	17d3c <__assert_fail@plt+0x684c>
   17d4c:	sub	r4, lr, #1
   17d50:	str	ip, [sp]
   17d54:	str	r4, [sp, #4]
   17d58:	bl	179fc <__assert_fail@plt+0x650c>
   17d5c:	sub	sp, fp, #8
   17d60:	pop	{r4, sl, fp, pc}
   17d64:	push	{r4, r5, fp, lr}
   17d68:	add	fp, sp, #8
   17d6c:	sub	sp, sp, #48	; 0x30
   17d70:	ldr	r4, [fp, #8]
   17d74:	mov	ip, #0
   17d78:	add	lr, sp, #8
   17d7c:	ldr	r5, [r4]
   17d80:	cmp	r5, #0
   17d84:	str	r5, [lr, ip, lsl #2]
   17d88:	beq	17da0 <__assert_fail@plt+0x68b0>
   17d8c:	add	ip, ip, #1
   17d90:	add	r4, r4, #4
   17d94:	cmp	ip, #10
   17d98:	bne	17d7c <__assert_fail@plt+0x688c>
   17d9c:	mov	ip, #10
   17da0:	str	lr, [sp]
   17da4:	str	ip, [sp, #4]
   17da8:	bl	179fc <__assert_fail@plt+0x650c>
   17dac:	sub	sp, fp, #8
   17db0:	pop	{r4, r5, fp, pc}
   17db4:	push	{fp, lr}
   17db8:	mov	fp, sp
   17dbc:	sub	sp, sp, #8
   17dc0:	add	ip, fp, #8
   17dc4:	str	ip, [sp, #4]
   17dc8:	str	ip, [sp]
   17dcc:	bl	17d64 <__assert_fail@plt+0x6874>
   17dd0:	mov	sp, fp
   17dd4:	pop	{fp, pc}
   17dd8:	push	{fp, lr}
   17ddc:	mov	fp, sp
   17de0:	movw	r0, #45452	; 0xb18c
   17de4:	movt	r0, #2
   17de8:	ldr	r1, [r0]
   17dec:	movw	r0, #39579	; 0x9a9b
   17df0:	movt	r0, #1
   17df4:	bl	111e4 <fputs_unlocked@plt>
   17df8:	movw	r1, #42695	; 0xa6c7
   17dfc:	mov	r0, #0
   17e00:	mov	r2, #5
   17e04:	movt	r1, #1
   17e08:	bl	11268 <dcgettext@plt>
   17e0c:	movw	r2, #42715	; 0xa6db
   17e10:	mov	r1, r0
   17e14:	mov	r0, #1
   17e18:	movt	r2, #1
   17e1c:	bl	113b8 <__printf_chk@plt>
   17e20:	movw	r1, #42737	; 0xa6f1
   17e24:	mov	r0, #0
   17e28:	mov	r2, #5
   17e2c:	movt	r1, #1
   17e30:	bl	11268 <dcgettext@plt>
   17e34:	movw	r2, #39852	; 0x9bac
   17e38:	movw	r3, #40127	; 0x9cbf
   17e3c:	mov	r1, r0
   17e40:	mov	r0, #1
   17e44:	movt	r2, #1
   17e48:	movt	r3, #1
   17e4c:	bl	113b8 <__printf_chk@plt>
   17e50:	movw	r1, #42757	; 0xa705
   17e54:	mov	r0, #0
   17e58:	mov	r2, #5
   17e5c:	movt	r1, #1
   17e60:	bl	11268 <dcgettext@plt>
   17e64:	movw	r2, #42796	; 0xa72c
   17e68:	mov	r1, r0
   17e6c:	mov	r0, #1
   17e70:	movt	r2, #1
   17e74:	pop	{fp, lr}
   17e78:	b	113b8 <__printf_chk@plt>
   17e7c:	b	17e80 <__assert_fail@plt+0x6990>
   17e80:	push	{r4, r5, r6, sl, fp, lr}
   17e84:	add	fp, sp, #16
   17e88:	mov	r4, r2
   17e8c:	mov	r5, r1
   17e90:	mov	r6, r0
   17e94:	bl	190f0 <__assert_fail@plt+0x7c00>
   17e98:	cmp	r0, #0
   17e9c:	popne	{r4, r5, r6, sl, fp, pc}
   17ea0:	cmp	r6, #0
   17ea4:	beq	17eb8 <__assert_fail@plt+0x69c8>
   17ea8:	cmp	r5, #0
   17eac:	cmpne	r4, #0
   17eb0:	bne	17eb8 <__assert_fail@plt+0x69c8>
   17eb4:	pop	{r4, r5, r6, sl, fp, pc}
   17eb8:	bl	182e8 <__assert_fail@plt+0x6df8>
   17ebc:	push	{fp, lr}
   17ec0:	mov	fp, sp
   17ec4:	bl	18ab8 <__assert_fail@plt+0x75c8>
   17ec8:	cmp	r0, #0
   17ecc:	popne	{fp, pc}
   17ed0:	bl	182e8 <__assert_fail@plt+0x6df8>
   17ed4:	push	{fp, lr}
   17ed8:	mov	fp, sp
   17edc:	bl	18ab8 <__assert_fail@plt+0x75c8>
   17ee0:	cmp	r0, #0
   17ee4:	popne	{fp, pc}
   17ee8:	bl	182e8 <__assert_fail@plt+0x6df8>
   17eec:	push	{fp, lr}
   17ef0:	mov	fp, sp
   17ef4:	bl	18ab8 <__assert_fail@plt+0x75c8>
   17ef8:	cmp	r0, #0
   17efc:	popne	{fp, pc}
   17f00:	bl	182e8 <__assert_fail@plt+0x6df8>
   17f04:	push	{r4, r5, fp, lr}
   17f08:	add	fp, sp, #8
   17f0c:	mov	r4, r1
   17f10:	mov	r5, r0
   17f14:	bl	18ae8 <__assert_fail@plt+0x75f8>
   17f18:	cmp	r0, #0
   17f1c:	popne	{r4, r5, fp, pc}
   17f20:	cmp	r5, #0
   17f24:	beq	17f34 <__assert_fail@plt+0x6a44>
   17f28:	cmp	r4, #0
   17f2c:	bne	17f34 <__assert_fail@plt+0x6a44>
   17f30:	pop	{r4, r5, fp, pc}
   17f34:	bl	182e8 <__assert_fail@plt+0x6df8>
   17f38:	push	{fp, lr}
   17f3c:	mov	fp, sp
   17f40:	cmp	r1, #0
   17f44:	orreq	r1, r1, #1
   17f48:	bl	18ae8 <__assert_fail@plt+0x75f8>
   17f4c:	cmp	r0, #0
   17f50:	popne	{fp, pc}
   17f54:	bl	182e8 <__assert_fail@plt+0x6df8>
   17f58:	push	{fp, lr}
   17f5c:	mov	fp, sp
   17f60:	clz	r3, r2
   17f64:	lsr	ip, r3, #5
   17f68:	clz	r3, r1
   17f6c:	lsr	r3, r3, #5
   17f70:	orrs	r3, r3, ip
   17f74:	movwne	r1, #1
   17f78:	movwne	r2, #1
   17f7c:	bl	190f0 <__assert_fail@plt+0x7c00>
   17f80:	cmp	r0, #0
   17f84:	popne	{fp, pc}
   17f88:	bl	182e8 <__assert_fail@plt+0x6df8>
   17f8c:	push	{fp, lr}
   17f90:	mov	fp, sp
   17f94:	mov	r2, r1
   17f98:	mov	r1, r0
   17f9c:	mov	r0, #0
   17fa0:	bl	190f0 <__assert_fail@plt+0x7c00>
   17fa4:	cmp	r0, #0
   17fa8:	popne	{fp, pc}
   17fac:	bl	182e8 <__assert_fail@plt+0x6df8>
   17fb0:	mov	r2, r1
   17fb4:	mov	r1, r0
   17fb8:	mov	r0, #0
   17fbc:	b	17f58 <__assert_fail@plt+0x6a68>
   17fc0:	mov	r2, #1
   17fc4:	b	17fc8 <__assert_fail@plt+0x6ad8>
   17fc8:	push	{r4, r5, fp, lr}
   17fcc:	add	fp, sp, #8
   17fd0:	ldr	r5, [r1]
   17fd4:	mov	r4, r1
   17fd8:	cmp	r0, #0
   17fdc:	beq	17ff4 <__assert_fail@plt+0x6b04>
   17fe0:	mov	r1, #1
   17fe4:	add	r1, r1, r5, lsr #1
   17fe8:	adds	r5, r5, r1
   17fec:	bcc	1800c <__assert_fail@plt+0x6b1c>
   17ff0:	bl	182e8 <__assert_fail@plt+0x6df8>
   17ff4:	cmp	r5, #0
   17ff8:	bne	1800c <__assert_fail@plt+0x6b1c>
   17ffc:	mov	r1, #64	; 0x40
   18000:	cmp	r2, #64	; 0x40
   18004:	udiv	r5, r1, r2
   18008:	addhi	r5, r5, #1
   1800c:	mov	r1, r5
   18010:	bl	17e80 <__assert_fail@plt+0x6990>
   18014:	str	r5, [r4]
   18018:	pop	{r4, r5, fp, pc}
   1801c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18020:	add	fp, sp, #24
   18024:	ldr	r6, [r1]
   18028:	mov	r8, r1
   1802c:	ldr	r4, [fp, #8]
   18030:	add	r1, r6, r6, asr #1
   18034:	cmp	r1, r6
   18038:	mvnvs	r1, #-2147483648	; 0x80000000
   1803c:	cmp	r1, r3
   18040:	mov	r5, r1
   18044:	movgt	r5, r3
   18048:	cmn	r3, #1
   1804c:	movle	r5, r1
   18050:	cmn	r4, #1
   18054:	ble	18074 <__assert_fail@plt+0x6b84>
   18058:	cmp	r4, #0
   1805c:	beq	180c8 <__assert_fail@plt+0x6bd8>
   18060:	cmn	r5, #1
   18064:	ble	1809c <__assert_fail@plt+0x6bac>
   18068:	mvn	r7, #-2147483648	; 0x80000000
   1806c:	udiv	r1, r7, r4
   18070:	b	18090 <__assert_fail@plt+0x6ba0>
   18074:	cmn	r5, #1
   18078:	ble	180b8 <__assert_fail@plt+0x6bc8>
   1807c:	cmn	r4, #1
   18080:	beq	180c8 <__assert_fail@plt+0x6bd8>
   18084:	mov	r1, #-2147483648	; 0x80000000
   18088:	mvn	r7, #-2147483648	; 0x80000000
   1808c:	sdiv	r1, r1, r4
   18090:	cmp	r1, r5
   18094:	bge	180c8 <__assert_fail@plt+0x6bd8>
   18098:	b	180d8 <__assert_fail@plt+0x6be8>
   1809c:	beq	180c8 <__assert_fail@plt+0x6bd8>
   180a0:	mov	r1, #-2147483648	; 0x80000000
   180a4:	mvn	r7, #-2147483648	; 0x80000000
   180a8:	sdiv	r1, r1, r5
   180ac:	cmp	r1, r4
   180b0:	bge	180c8 <__assert_fail@plt+0x6bd8>
   180b4:	b	180d8 <__assert_fail@plt+0x6be8>
   180b8:	mvn	r7, #-2147483648	; 0x80000000
   180bc:	sdiv	r1, r7, r4
   180c0:	cmp	r5, r1
   180c4:	blt	180d8 <__assert_fail@plt+0x6be8>
   180c8:	mul	r1, r5, r4
   180cc:	mov	r7, #64	; 0x40
   180d0:	cmp	r1, #63	; 0x3f
   180d4:	bgt	180e0 <__assert_fail@plt+0x6bf0>
   180d8:	sdiv	r5, r7, r4
   180dc:	mul	r1, r5, r4
   180e0:	cmp	r0, #0
   180e4:	moveq	r7, #0
   180e8:	streq	r7, [r8]
   180ec:	sub	r7, r5, r6
   180f0:	cmp	r7, r2
   180f4:	bge	18198 <__assert_fail@plt+0x6ca8>
   180f8:	add	r5, r6, r2
   180fc:	mov	r2, #0
   18100:	mov	r1, #0
   18104:	cmp	r5, r3
   18108:	movwgt	r2, #1
   1810c:	cmn	r3, #1
   18110:	movwgt	r1, #1
   18114:	cmp	r5, r6
   18118:	bvs	18180 <__assert_fail@plt+0x6c90>
   1811c:	ands	r1, r1, r2
   18120:	bne	18180 <__assert_fail@plt+0x6c90>
   18124:	cmn	r4, #1
   18128:	ble	18148 <__assert_fail@plt+0x6c58>
   1812c:	cmp	r4, #0
   18130:	beq	18194 <__assert_fail@plt+0x6ca4>
   18134:	cmn	r5, #1
   18138:	ble	1816c <__assert_fail@plt+0x6c7c>
   1813c:	mvn	r1, #-2147483648	; 0x80000000
   18140:	udiv	r1, r1, r4
   18144:	b	18160 <__assert_fail@plt+0x6c70>
   18148:	cmn	r5, #1
   1814c:	ble	18184 <__assert_fail@plt+0x6c94>
   18150:	cmn	r4, #1
   18154:	beq	18194 <__assert_fail@plt+0x6ca4>
   18158:	mov	r1, #-2147483648	; 0x80000000
   1815c:	sdiv	r1, r1, r4
   18160:	cmp	r1, r5
   18164:	bge	18194 <__assert_fail@plt+0x6ca4>
   18168:	b	18180 <__assert_fail@plt+0x6c90>
   1816c:	beq	18194 <__assert_fail@plt+0x6ca4>
   18170:	mov	r1, #-2147483648	; 0x80000000
   18174:	sdiv	r1, r1, r5
   18178:	cmp	r1, r4
   1817c:	bge	18194 <__assert_fail@plt+0x6ca4>
   18180:	bl	182e8 <__assert_fail@plt+0x6df8>
   18184:	mvn	r1, #-2147483648	; 0x80000000
   18188:	sdiv	r1, r1, r4
   1818c:	cmp	r5, r1
   18190:	blt	18180 <__assert_fail@plt+0x6c90>
   18194:	mul	r1, r5, r4
   18198:	bl	17f04 <__assert_fail@plt+0x6a14>
   1819c:	str	r5, [r8]
   181a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   181a4:	push	{fp, lr}
   181a8:	mov	fp, sp
   181ac:	mov	r1, #1
   181b0:	bl	18a64 <__assert_fail@plt+0x7574>
   181b4:	cmp	r0, #0
   181b8:	popne	{fp, pc}
   181bc:	bl	182e8 <__assert_fail@plt+0x6df8>
   181c0:	push	{fp, lr}
   181c4:	mov	fp, sp
   181c8:	bl	18a64 <__assert_fail@plt+0x7574>
   181cc:	cmp	r0, #0
   181d0:	popne	{fp, pc}
   181d4:	bl	182e8 <__assert_fail@plt+0x6df8>
   181d8:	push	{fp, lr}
   181dc:	mov	fp, sp
   181e0:	mov	r1, #1
   181e4:	bl	18a64 <__assert_fail@plt+0x7574>
   181e8:	cmp	r0, #0
   181ec:	popne	{fp, pc}
   181f0:	bl	182e8 <__assert_fail@plt+0x6df8>
   181f4:	push	{fp, lr}
   181f8:	mov	fp, sp
   181fc:	bl	18a64 <__assert_fail@plt+0x7574>
   18200:	cmp	r0, #0
   18204:	popne	{fp, pc}
   18208:	bl	182e8 <__assert_fail@plt+0x6df8>
   1820c:	push	{r4, r5, fp, lr}
   18210:	add	fp, sp, #8
   18214:	mov	r5, r0
   18218:	mov	r0, r1
   1821c:	mov	r4, r1
   18220:	bl	18ab8 <__assert_fail@plt+0x75c8>
   18224:	cmp	r0, #0
   18228:	beq	1823c <__assert_fail@plt+0x6d4c>
   1822c:	mov	r1, r5
   18230:	mov	r2, r4
   18234:	pop	{r4, r5, fp, lr}
   18238:	b	11244 <memcpy@plt>
   1823c:	bl	182e8 <__assert_fail@plt+0x6df8>
   18240:	push	{r4, r5, fp, lr}
   18244:	add	fp, sp, #8
   18248:	mov	r5, r0
   1824c:	mov	r0, r1
   18250:	mov	r4, r1
   18254:	bl	18ab8 <__assert_fail@plt+0x75c8>
   18258:	cmp	r0, #0
   1825c:	beq	18270 <__assert_fail@plt+0x6d80>
   18260:	mov	r1, r5
   18264:	mov	r2, r4
   18268:	pop	{r4, r5, fp, lr}
   1826c:	b	11244 <memcpy@plt>
   18270:	bl	182e8 <__assert_fail@plt+0x6df8>
   18274:	push	{r4, r5, fp, lr}
   18278:	add	fp, sp, #8
   1827c:	mov	r5, r0
   18280:	add	r0, r1, #1
   18284:	mov	r4, r1
   18288:	bl	18ab8 <__assert_fail@plt+0x75c8>
   1828c:	cmp	r0, #0
   18290:	beq	182ac <__assert_fail@plt+0x6dbc>
   18294:	mov	r1, #0
   18298:	mov	r2, r4
   1829c:	strb	r1, [r0, r4]
   182a0:	mov	r1, r5
   182a4:	pop	{r4, r5, fp, lr}
   182a8:	b	11244 <memcpy@plt>
   182ac:	bl	182e8 <__assert_fail@plt+0x6df8>
   182b0:	push	{r4, r5, fp, lr}
   182b4:	add	fp, sp, #8
   182b8:	mov	r4, r0
   182bc:	bl	11364 <strlen@plt>
   182c0:	add	r5, r0, #1
   182c4:	mov	r0, r5
   182c8:	bl	18ab8 <__assert_fail@plt+0x75c8>
   182cc:	cmp	r0, #0
   182d0:	beq	182e4 <__assert_fail@plt+0x6df4>
   182d4:	mov	r1, r4
   182d8:	mov	r2, r5
   182dc:	pop	{r4, r5, fp, lr}
   182e0:	b	11244 <memcpy@plt>
   182e4:	bl	182e8 <__assert_fail@plt+0x6df8>
   182e8:	push	{fp, lr}
   182ec:	mov	fp, sp
   182f0:	movw	r0, #45364	; 0xb134
   182f4:	movw	r1, #42872	; 0xa778
   182f8:	mov	r2, #5
   182fc:	movt	r0, #2
   18300:	movt	r1, #1
   18304:	ldr	r4, [r0]
   18308:	mov	r0, #0
   1830c:	bl	11268 <dcgettext@plt>
   18310:	movw	r2, #40419	; 0x9de3
   18314:	mov	r3, r0
   18318:	mov	r0, r4
   1831c:	mov	r1, #0
   18320:	movt	r2, #1
   18324:	bl	112ec <error@plt>
   18328:	bl	114a8 <abort@plt>
   1832c:	push	{fp, lr}
   18330:	mov	fp, sp
   18334:	orr	r1, r1, #512	; 0x200
   18338:	bl	12cd0 <__assert_fail@plt+0x17e0>
   1833c:	cmp	r0, #0
   18340:	popne	{fp, pc}
   18344:	bl	11394 <__errno_location@plt>
   18348:	ldr	r0, [r0]
   1834c:	cmp	r0, #22
   18350:	bne	18374 <__assert_fail@plt+0x6e84>
   18354:	movw	r0, #42889	; 0xa789
   18358:	movw	r1, #42905	; 0xa799
   1835c:	movw	r3, #42916	; 0xa7a4
   18360:	mov	r2, #41	; 0x29
   18364:	movt	r0, #1
   18368:	movt	r1, #1
   1836c:	movt	r3, #1
   18370:	bl	114f0 <__assert_fail@plt>
   18374:	bl	182e8 <__assert_fail@plt+0x6df8>
   18378:	ldr	r0, [r0, #48]	; 0x30
   1837c:	and	r0, r0, #17
   18380:	cmp	r0, #16
   18384:	moveq	r0, #1
   18388:	bxeq	lr
   1838c:	cmp	r0, #17
   18390:	movne	r0, #0
   18394:	bxne	lr
   18398:	ldr	r0, [r1, #48]	; 0x30
   1839c:	cmp	r0, #0
   183a0:	movwne	r0, #1
   183a4:	bx	lr
   183a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183ac:	add	fp, sp, #28
   183b0:	sub	sp, sp, #20
   183b4:	cmp	r2, #37	; 0x25
   183b8:	bcs	18a44 <__assert_fail@plt+0x7554>
   183bc:	mov	r8, r3
   183c0:	mov	r5, r2
   183c4:	mov	r6, r1
   183c8:	mov	r4, r0
   183cc:	bl	11394 <__errno_location@plt>
   183d0:	mov	r7, r0
   183d4:	mov	r0, #0
   183d8:	str	r0, [r7]
   183dc:	bl	11340 <__ctype_b_loc@plt>
   183e0:	ldr	r1, [r0]
   183e4:	mov	r2, r4
   183e8:	ldrb	r0, [r2], #1
   183ec:	add	r3, r1, r0, lsl #1
   183f0:	ldrb	r3, [r3, #1]
   183f4:	tst	r3, #32
   183f8:	bne	183e8 <__assert_fail@plt+0x6ef8>
   183fc:	cmp	r6, #0
   18400:	add	sl, sp, #16
   18404:	movne	sl, r6
   18408:	mov	r6, #4
   1840c:	cmp	r0, #45	; 0x2d
   18410:	beq	18a38 <__assert_fail@plt+0x7548>
   18414:	mov	r0, r4
   18418:	mov	r1, sl
   1841c:	mov	r2, r5
   18420:	str	r8, [sp, #12]
   18424:	bl	113d0 <strtoumax@plt>
   18428:	ldr	r5, [sl]
   1842c:	cmp	r5, r4
   18430:	beq	18458 <__assert_fail@plt+0x6f68>
   18434:	mov	r8, r0
   18438:	ldr	r0, [r7]
   1843c:	mov	r9, r1
   18440:	cmp	r0, #0
   18444:	beq	1848c <__assert_fail@plt+0x6f9c>
   18448:	cmp	r0, #34	; 0x22
   1844c:	bne	18a38 <__assert_fail@plt+0x7548>
   18450:	mov	r6, #1
   18454:	b	18490 <__assert_fail@plt+0x6fa0>
   18458:	ldr	r0, [fp, #8]
   1845c:	cmp	r0, #0
   18460:	beq	18a38 <__assert_fail@plt+0x7548>
   18464:	ldrb	r1, [r4]
   18468:	cmp	r1, #0
   1846c:	beq	18a38 <__assert_fail@plt+0x7548>
   18470:	bl	11370 <strchr@plt>
   18474:	cmp	r0, #0
   18478:	beq	18a38 <__assert_fail@plt+0x7548>
   1847c:	mov	r6, #0
   18480:	mov	r8, #1
   18484:	mov	r9, #0
   18488:	b	1849c <__assert_fail@plt+0x6fac>
   1848c:	mov	r6, r0
   18490:	ldr	r0, [fp, #8]
   18494:	cmp	r0, #0
   18498:	beq	18a30 <__assert_fail@plt+0x7540>
   1849c:	ldrb	r7, [r5]
   184a0:	cmp	r7, #0
   184a4:	beq	18a30 <__assert_fail@plt+0x7540>
   184a8:	ldr	r0, [fp, #8]
   184ac:	mov	r1, r7
   184b0:	bl	11370 <strchr@plt>
   184b4:	cmp	r0, #0
   184b8:	beq	185c0 <__assert_fail@plt+0x70d0>
   184bc:	sub	r0, r7, #69	; 0x45
   184c0:	mov	r1, #1
   184c4:	mov	r3, #0
   184c8:	mov	r4, #1024	; 0x400
   184cc:	cmp	r0, #21
   184d0:	str	r1, [sp, #8]
   184d4:	bhi	184ec <__assert_fail@plt+0x6ffc>
   184d8:	movw	r2, #35141	; 0x8945
   184dc:	mov	r1, #1
   184e0:	movt	r2, #48	; 0x30
   184e4:	tst	r2, r1, lsl r0
   184e8:	bne	18508 <__assert_fail@plt+0x7018>
   184ec:	sub	r0, r7, #103	; 0x67
   184f0:	cmp	r0, #13
   184f4:	bhi	1853c <__assert_fail@plt+0x704c>
   184f8:	mov	r1, #1
   184fc:	movw	r2, #8273	; 0x2051
   18500:	tst	r2, r1, lsl r0
   18504:	beq	1853c <__assert_fail@plt+0x704c>
   18508:	ldr	r0, [fp, #8]
   1850c:	mov	r1, #48	; 0x30
   18510:	bl	11370 <strchr@plt>
   18514:	cmp	r0, #0
   18518:	beq	18538 <__assert_fail@plt+0x7048>
   1851c:	ldrb	r0, [r5, #1]
   18520:	cmp	r0, #66	; 0x42
   18524:	cmpne	r0, #68	; 0x44
   18528:	bne	18650 <__assert_fail@plt+0x7160>
   1852c:	mov	r4, #1000	; 0x3e8
   18530:	mov	r0, #2
   18534:	str	r0, [sp, #8]
   18538:	mov	r3, #0
   1853c:	cmp	r7, #89	; 0x59
   18540:	stm	sp, {r5, r6}
   18544:	bgt	185cc <__assert_fail@plt+0x70dc>
   18548:	sub	r0, r7, #66	; 0x42
   1854c:	cmp	r0, #14
   18550:	bhi	18674 <__assert_fail@plt+0x7184>
   18554:	add	r1, pc, #0
   18558:	ldr	pc, [r1, r0, lsl #2]
   1855c:	muleq	r1, r8, r5
   18560:	andeq	r8, r1, r4, lsr #18
   18564:	andeq	r8, r1, r4, lsr #18
   18568:	andeq	r8, r1, r8, lsr r9
   1856c:	andeq	r8, r1, r4, lsr #18
   18570:	andeq	r8, r1, r8, lsr #14
   18574:	andeq	r8, r1, r4, lsr #18
   18578:	andeq	r8, r1, r4, lsr #18
   1857c:	andeq	r8, r1, r4, lsr #18
   18580:	muleq	r1, r4, r7
   18584:	andeq	r8, r1, r4, lsr #18
   18588:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1858c:	andeq	r8, r1, r4, lsr #18
   18590:	andeq	r8, r1, r4, lsr #18
   18594:	andeq	r8, r1, r4, lsr #19
   18598:	mov	r1, #0
   1859c:	lsl	r3, r9, #10
   185a0:	lsl	r0, r8, #10
   185a4:	lsr	r2, r9, #22
   185a8:	cmp	r1, r9, lsr #22
   185ac:	orr	r3, r3, r8, lsr #22
   185b0:	mvnne	r0, #0
   185b4:	movwne	r2, #1
   185b8:	cmp	r1, r9, lsr #22
   185bc:	b	18640 <__assert_fail@plt+0x7150>
   185c0:	ldr	r0, [sp, #12]
   185c4:	orr	r6, r6, #2
   185c8:	b	18a34 <__assert_fail@plt+0x7544>
   185cc:	cmp	r7, #115	; 0x73
   185d0:	bgt	186f0 <__assert_fail@plt+0x7200>
   185d4:	sub	r0, r7, #98	; 0x62
   185d8:	cmp	r0, #11
   185dc:	bhi	188b0 <__assert_fail@plt+0x73c0>
   185e0:	add	r1, pc, #4
   185e4:	mov	r2, #0
   185e8:	ldr	pc, [r1, r0, lsl #2]
   185ec:	andeq	r8, r1, ip, lsl r6
   185f0:	andeq	r8, r1, ip, lsl #20
   185f4:	andeq	r8, r1, r4, lsr #18
   185f8:	andeq	r8, r1, r4, lsr #18
   185fc:	andeq	r8, r1, r4, lsr #18
   18600:	andeq	r8, r1, r8, lsr #14
   18604:	andeq	r8, r1, r4, lsr #18
   18608:	andeq	r8, r1, r4, lsr #18
   1860c:	andeq	r8, r1, r4, lsr #18
   18610:	muleq	r1, r4, r7
   18614:	andeq	r8, r1, r4, lsr #18
   18618:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1861c:	mov	r1, #0
   18620:	lsl	r3, r9, #9
   18624:	lsl	r0, r8, #9
   18628:	lsr	r2, r9, #23
   1862c:	cmp	r1, r9, lsr #23
   18630:	orr	r3, r3, r8, lsr #23
   18634:	mvnne	r0, #0
   18638:	movwne	r2, #1
   1863c:	cmp	r1, r9, lsr #23
   18640:	mvnne	r3, #0
   18644:	mov	r8, r0
   18648:	mov	r9, r3
   1864c:	b	18a0c <__assert_fail@plt+0x751c>
   18650:	cmp	r0, #105	; 0x69
   18654:	mov	r3, #0
   18658:	bne	1853c <__assert_fail@plt+0x704c>
   1865c:	ldrb	r0, [r5, #2]
   18660:	mov	r1, #1
   18664:	cmp	r0, #66	; 0x42
   18668:	movweq	r1, #3
   1866c:	str	r1, [sp, #8]
   18670:	b	1853c <__assert_fail@plt+0x704c>
   18674:	cmp	r7, #84	; 0x54
   18678:	beq	18844 <__assert_fail@plt+0x7354>
   1867c:	cmp	r7, #89	; 0x59
   18680:	bne	18924 <__assert_fail@plt+0x7434>
   18684:	mvn	r0, #0
   18688:	mvn	r1, #0
   1868c:	mov	r2, r4
   18690:	mov	r5, r3
   18694:	bl	19238 <__assert_fail@plt+0x7d48>
   18698:	mov	ip, r5
   1869c:	mvn	lr, #0
   186a0:	mov	r2, #0
   186a4:	mvn	r3, #7
   186a8:	mov	r5, r8
   186ac:	mov	r7, r9
   186b0:	umull	r8, r6, r5, r4
   186b4:	mvn	r9, #0
   186b8:	mla	r6, r5, ip, r6
   186bc:	subs	r5, r0, r5
   186c0:	sbcs	r5, r1, r7
   186c4:	mov	r5, #0
   186c8:	movwcc	r5, #1
   186cc:	cmp	r5, #0
   186d0:	mlaeq	r9, r7, r4, r6
   186d4:	movne	r8, lr
   186d8:	orrne	r2, r2, #1
   186dc:	adds	r3, r3, #1
   186e0:	mov	r5, r8
   186e4:	mov	r7, r9
   186e8:	bcc	186b0 <__assert_fail@plt+0x71c0>
   186ec:	b	18a0c <__assert_fail@plt+0x751c>
   186f0:	cmp	r7, #116	; 0x74
   186f4:	beq	18844 <__assert_fail@plt+0x7354>
   186f8:	cmp	r7, #119	; 0x77
   186fc:	bne	18924 <__assert_fail@plt+0x7434>
   18700:	lsl	r1, r9, #1
   18704:	cmp	r9, #0
   18708:	lsl	r0, r8, #1
   1870c:	lsr	r2, r9, #31
   18710:	orr	r1, r1, r8, lsr #31
   18714:	mvnmi	r0, #0
   18718:	mvnmi	r1, #0
   1871c:	mov	r8, r0
   18720:	mov	r9, r1
   18724:	b	18a0c <__assert_fail@plt+0x751c>
   18728:	mvn	r0, #0
   1872c:	mvn	r1, #0
   18730:	mov	r2, r4
   18734:	mov	r5, r3
   18738:	bl	19238 <__assert_fail@plt+0x7d48>
   1873c:	mov	ip, r5
   18740:	mvn	lr, #0
   18744:	mov	r2, #0
   18748:	mvn	r3, #2
   1874c:	mov	r6, r8
   18750:	mov	r5, r9
   18754:	umull	r8, r7, r6, r4
   18758:	mvn	r9, #0
   1875c:	mla	r7, r6, ip, r7
   18760:	subs	r6, r0, r6
   18764:	sbcs	r6, r1, r5
   18768:	mov	r6, #0
   1876c:	movwcc	r6, #1
   18770:	cmp	r6, #0
   18774:	mlaeq	r9, r5, r4, r7
   18778:	movne	r8, lr
   1877c:	orrne	r2, r2, #1
   18780:	adds	r3, r3, #1
   18784:	mov	r6, r8
   18788:	mov	r5, r9
   1878c:	bcc	18754 <__assert_fail@plt+0x7264>
   18790:	b	18a0c <__assert_fail@plt+0x751c>
   18794:	mvn	r0, #0
   18798:	mvn	r1, #0
   1879c:	mov	r2, r4
   187a0:	mov	r5, r3
   187a4:	bl	19238 <__assert_fail@plt+0x7d48>
   187a8:	subs	r0, r0, r8
   187ac:	mov	r2, #0
   187b0:	sbcs	r0, r1, r9
   187b4:	umull	r0, r1, r8, r4
   187b8:	movwcc	r2, #1
   187bc:	cmp	r2, #0
   187c0:	mla	r1, r8, r5, r1
   187c4:	mvnne	r0, #0
   187c8:	mla	r9, r9, r4, r1
   187cc:	mvnne	r9, #0
   187d0:	mov	r8, r0
   187d4:	b	18a0c <__assert_fail@plt+0x751c>
   187d8:	mvn	r0, #0
   187dc:	mvn	r1, #0
   187e0:	mov	r2, r4
   187e4:	mov	r5, r3
   187e8:	bl	19238 <__assert_fail@plt+0x7d48>
   187ec:	mov	ip, r5
   187f0:	mvn	lr, #0
   187f4:	mov	r2, #0
   187f8:	mvn	r3, #1
   187fc:	mov	r6, r8
   18800:	mov	r5, r9
   18804:	umull	r8, r7, r6, r4
   18808:	mvn	r9, #0
   1880c:	mla	r7, r6, ip, r7
   18810:	subs	r6, r0, r6
   18814:	sbcs	r6, r1, r5
   18818:	mov	r6, #0
   1881c:	movwcc	r6, #1
   18820:	cmp	r6, #0
   18824:	mlaeq	r9, r5, r4, r7
   18828:	movne	r8, lr
   1882c:	orrne	r2, r2, #1
   18830:	adds	r3, r3, #1
   18834:	mov	r6, r8
   18838:	mov	r5, r9
   1883c:	bcc	18804 <__assert_fail@plt+0x7314>
   18840:	b	18a0c <__assert_fail@plt+0x751c>
   18844:	mvn	r0, #0
   18848:	mvn	r1, #0
   1884c:	mov	r2, r4
   18850:	mov	r5, r3
   18854:	bl	19238 <__assert_fail@plt+0x7d48>
   18858:	mov	ip, r5
   1885c:	mvn	lr, #0
   18860:	mov	r2, #0
   18864:	mvn	r3, #3
   18868:	mov	r6, r8
   1886c:	mov	r5, r9
   18870:	umull	r8, r7, r6, r4
   18874:	mvn	r9, #0
   18878:	mla	r7, r6, ip, r7
   1887c:	subs	r6, r0, r6
   18880:	sbcs	r6, r1, r5
   18884:	mov	r6, #0
   18888:	movwcc	r6, #1
   1888c:	cmp	r6, #0
   18890:	mlaeq	r9, r5, r4, r7
   18894:	movne	r8, lr
   18898:	orrne	r2, r2, #1
   1889c:	adds	r3, r3, #1
   188a0:	mov	r6, r8
   188a4:	mov	r5, r9
   188a8:	bcc	18870 <__assert_fail@plt+0x7380>
   188ac:	b	18a0c <__assert_fail@plt+0x751c>
   188b0:	cmp	r7, #90	; 0x5a
   188b4:	bne	18924 <__assert_fail@plt+0x7434>
   188b8:	mvn	r0, #0
   188bc:	mvn	r1, #0
   188c0:	mov	r2, r4
   188c4:	mov	r5, r3
   188c8:	bl	19238 <__assert_fail@plt+0x7d48>
   188cc:	mov	ip, r5
   188d0:	mvn	lr, #0
   188d4:	mov	r2, #0
   188d8:	mvn	r3, #6
   188dc:	mov	r5, r8
   188e0:	mov	r7, r9
   188e4:	umull	r8, r6, r5, r4
   188e8:	mvn	r9, #0
   188ec:	mla	r6, r5, ip, r6
   188f0:	subs	r5, r0, r5
   188f4:	sbcs	r5, r1, r7
   188f8:	mov	r5, #0
   188fc:	movwcc	r5, #1
   18900:	cmp	r5, #0
   18904:	mlaeq	r9, r7, r4, r6
   18908:	movne	r8, lr
   1890c:	orrne	r2, r2, #1
   18910:	adds	r3, r3, #1
   18914:	mov	r5, r8
   18918:	mov	r7, r9
   1891c:	bcc	188e4 <__assert_fail@plt+0x73f4>
   18920:	b	18a0c <__assert_fail@plt+0x751c>
   18924:	ldr	r0, [sp, #12]
   18928:	strd	r8, [r0]
   1892c:	ldr	r6, [sp, #4]
   18930:	orr	r6, r6, #2
   18934:	b	18a38 <__assert_fail@plt+0x7548>
   18938:	mvn	r0, #0
   1893c:	mvn	r1, #0
   18940:	mov	r2, r4
   18944:	mov	r5, r3
   18948:	bl	19238 <__assert_fail@plt+0x7d48>
   1894c:	mov	ip, r5
   18950:	mvn	lr, #0
   18954:	mov	r2, #0
   18958:	mvn	r3, #5
   1895c:	mov	r5, r8
   18960:	mov	r7, r9
   18964:	umull	r8, r6, r5, r4
   18968:	mvn	r9, #0
   1896c:	mla	r6, r5, ip, r6
   18970:	subs	r5, r0, r5
   18974:	sbcs	r5, r1, r7
   18978:	mov	r5, #0
   1897c:	movwcc	r5, #1
   18980:	cmp	r5, #0
   18984:	mlaeq	r9, r7, r4, r6
   18988:	movne	r8, lr
   1898c:	orrne	r2, r2, #1
   18990:	adds	r3, r3, #1
   18994:	mov	r5, r8
   18998:	mov	r7, r9
   1899c:	bcc	18964 <__assert_fail@plt+0x7474>
   189a0:	b	18a0c <__assert_fail@plt+0x751c>
   189a4:	mvn	r0, #0
   189a8:	mvn	r1, #0
   189ac:	mov	r2, r4
   189b0:	mov	r5, r3
   189b4:	bl	19238 <__assert_fail@plt+0x7d48>
   189b8:	mov	ip, r5
   189bc:	mvn	lr, #0
   189c0:	mov	r2, #0
   189c4:	mvn	r3, #4
   189c8:	mov	r5, r8
   189cc:	mov	r7, r9
   189d0:	umull	r8, r6, r5, r4
   189d4:	mvn	r9, #0
   189d8:	mla	r6, r5, ip, r6
   189dc:	subs	r5, r0, r5
   189e0:	sbcs	r5, r1, r7
   189e4:	mov	r5, #0
   189e8:	movwcc	r5, #1
   189ec:	cmp	r5, #0
   189f0:	mlaeq	r9, r7, r4, r6
   189f4:	movne	r8, lr
   189f8:	orrne	r2, r2, #1
   189fc:	adds	r3, r3, #1
   18a00:	mov	r5, r8
   18a04:	mov	r7, r9
   18a08:	bcc	189d0 <__assert_fail@plt+0x74e0>
   18a0c:	ldr	r1, [sp]
   18a10:	ldr	r3, [sp, #8]
   18a14:	ldr	r6, [sp, #4]
   18a18:	add	r0, r1, r3
   18a1c:	orr	r6, r2, r6
   18a20:	str	r0, [sl]
   18a24:	ldrb	r0, [r1, r3]
   18a28:	cmp	r0, #0
   18a2c:	orrne	r6, r6, #2
   18a30:	ldr	r0, [sp, #12]
   18a34:	strd	r8, [r0]
   18a38:	mov	r0, r6
   18a3c:	sub	sp, fp, #28
   18a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a44:	movw	r0, #42994	; 0xa7f2
   18a48:	movw	r1, #43032	; 0xa818
   18a4c:	movw	r3, #43048	; 0xa828
   18a50:	mov	r2, #85	; 0x55
   18a54:	movt	r0, #1
   18a58:	movt	r1, #1
   18a5c:	movt	r3, #1
   18a60:	bl	114f0 <__assert_fail@plt>
   18a64:	clz	r2, r1
   18a68:	clz	r3, r0
   18a6c:	lsr	r2, r2, #5
   18a70:	lsr	r3, r3, #5
   18a74:	orrs	r2, r3, r2
   18a78:	movwne	r1, #1
   18a7c:	movwne	r0, #1
   18a80:	cmp	r1, #0
   18a84:	beq	18ab4 <__assert_fail@plt+0x75c4>
   18a88:	mvn	r2, #-2147483648	; 0x80000000
   18a8c:	udiv	r2, r2, r1
   18a90:	cmp	r2, r0
   18a94:	bcs	18ab4 <__assert_fail@plt+0x75c4>
   18a98:	push	{fp, lr}
   18a9c:	mov	fp, sp
   18aa0:	bl	11394 <__errno_location@plt>
   18aa4:	mov	r1, #12
   18aa8:	str	r1, [r0]
   18aac:	mov	r0, #0
   18ab0:	pop	{fp, pc}
   18ab4:	b	111cc <calloc@plt>
   18ab8:	cmp	r0, #0
   18abc:	movweq	r0, #1
   18ac0:	cmn	r0, #1
   18ac4:	ble	18acc <__assert_fail@plt+0x75dc>
   18ac8:	b	11304 <malloc@plt>
   18acc:	push	{fp, lr}
   18ad0:	mov	fp, sp
   18ad4:	bl	11394 <__errno_location@plt>
   18ad8:	mov	r1, #12
   18adc:	str	r1, [r0]
   18ae0:	mov	r0, #0
   18ae4:	pop	{fp, pc}
   18ae8:	push	{fp, lr}
   18aec:	mov	fp, sp
   18af0:	cmp	r0, #0
   18af4:	beq	18b10 <__assert_fail@plt+0x7620>
   18af8:	cmp	r1, #0
   18afc:	beq	18b1c <__assert_fail@plt+0x762c>
   18b00:	cmn	r1, #1
   18b04:	ble	18b24 <__assert_fail@plt+0x7634>
   18b08:	pop	{fp, lr}
   18b0c:	b	11274 <realloc@plt>
   18b10:	mov	r0, r1
   18b14:	pop	{fp, lr}
   18b18:	b	18ab8 <__assert_fail@plt+0x75c8>
   18b1c:	bl	12ca8 <__assert_fail@plt+0x17b8>
   18b20:	b	18b30 <__assert_fail@plt+0x7640>
   18b24:	bl	11394 <__errno_location@plt>
   18b28:	mov	r1, #12
   18b2c:	str	r1, [r0]
   18b30:	mov	r0, #0
   18b34:	pop	{fp, pc}
   18b38:	push	{r4, r5, r6, sl, fp, lr}
   18b3c:	add	fp, sp, #16
   18b40:	mov	r4, r0
   18b44:	bl	112c8 <__fpending@plt>
   18b48:	mov	r5, r0
   18b4c:	mov	r0, r4
   18b50:	bl	112d4 <ferror_unlocked@plt>
   18b54:	mov	r6, r0
   18b58:	mov	r0, r4
   18b5c:	bl	18ca4 <__assert_fail@plt+0x77b4>
   18b60:	cmp	r6, #0
   18b64:	beq	18b84 <__assert_fail@plt+0x7694>
   18b68:	mvn	r4, #0
   18b6c:	cmp	r0, #0
   18b70:	bne	18bb0 <__assert_fail@plt+0x76c0>
   18b74:	bl	11394 <__errno_location@plt>
   18b78:	mov	r1, #0
   18b7c:	str	r1, [r0]
   18b80:	b	18bb0 <__assert_fail@plt+0x76c0>
   18b84:	cmp	r0, #0
   18b88:	mov	r4, r0
   18b8c:	mvnne	r4, #0
   18b90:	cmp	r5, #0
   18b94:	bne	18bb0 <__assert_fail@plt+0x76c0>
   18b98:	cmp	r0, #0
   18b9c:	beq	18bb0 <__assert_fail@plt+0x76c0>
   18ba0:	bl	11394 <__errno_location@plt>
   18ba4:	ldr	r0, [r0]
   18ba8:	subs	r4, r0, #9
   18bac:	mvnne	r4, #0
   18bb0:	mov	r0, r4
   18bb4:	pop	{r4, r5, r6, sl, fp, pc}
   18bb8:	movw	r2, #62998	; 0xf616
   18bbc:	mov	r1, #0
   18bc0:	movt	r2, #149	; 0x95
   18bc4:	str	r1, [r0, #16]
   18bc8:	str	r1, [r0, #20]
   18bcc:	str	r2, [r0, #24]
   18bd0:	bx	lr
   18bd4:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   18bd8:	add	fp, sp, #24
   18bdc:	ldr	r2, [r0, #24]
   18be0:	movw	r3, #62998	; 0xf616
   18be4:	movt	r3, #149	; 0x95
   18be8:	cmp	r2, r3
   18bec:	bne	18c84 <__assert_fail@plt+0x7794>
   18bf0:	add	r3, r0, #16
   18bf4:	add	ip, r0, #8
   18bf8:	ldrd	r4, [r3]
   18bfc:	orrs	r2, r4, r5
   18c00:	beq	18c3c <__assert_fail@plt+0x774c>
   18c04:	ldr	r6, [r1, #96]	; 0x60
   18c08:	ldr	r9, [r1, #100]	; 0x64
   18c0c:	ldm	r0, {r2, r7}
   18c10:	eor	r7, r9, r7
   18c14:	eor	r2, r6, r2
   18c18:	orrs	r2, r2, r7
   18c1c:	bne	18c3c <__assert_fail@plt+0x774c>
   18c20:	ldm	ip, {r2, r7}
   18c24:	ldm	r1, {r6, r9}
   18c28:	eor	r7, r9, r7
   18c2c:	eor	r2, r6, r2
   18c30:	orrs	r2, r2, r7
   18c34:	mov	r2, #1
   18c38:	beq	18c7c <__assert_fail@plt+0x778c>
   18c3c:	adds	r6, r4, #1
   18c40:	adc	r7, r5, #0
   18c44:	and	r2, r6, r4
   18c48:	strd	r6, [r3]
   18c4c:	and	r3, r7, r5
   18c50:	orrs	r2, r2, r3
   18c54:	mov	r2, #0
   18c58:	bne	18c7c <__assert_fail@plt+0x778c>
   18c5c:	orrs	r3, r6, r7
   18c60:	beq	18c78 <__assert_fail@plt+0x7788>
   18c64:	ldrd	r4, [r1]
   18c68:	strd	r4, [ip]
   18c6c:	ldrd	r4, [r1, #96]	; 0x60
   18c70:	strd	r4, [r0]
   18c74:	b	18c7c <__assert_fail@plt+0x778c>
   18c78:	mov	r2, #1
   18c7c:	mov	r0, r2
   18c80:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   18c84:	movw	r0, #43127	; 0xa877
   18c88:	movw	r1, #43151	; 0xa88f
   18c8c:	movw	r3, #43169	; 0xa8a1
   18c90:	mov	r2, #60	; 0x3c
   18c94:	movt	r0, #1
   18c98:	movt	r1, #1
   18c9c:	movt	r3, #1
   18ca0:	bl	114f0 <__assert_fail@plt>
   18ca4:	push	{r4, r5, r6, sl, fp, lr}
   18ca8:	add	fp, sp, #16
   18cac:	sub	sp, sp, #8
   18cb0:	mov	r4, r0
   18cb4:	bl	113c4 <fileno@plt>
   18cb8:	cmn	r0, #1
   18cbc:	ble	18d30 <__assert_fail@plt+0x7840>
   18cc0:	mov	r0, r4
   18cc4:	bl	1131c <__freading@plt>
   18cc8:	cmp	r0, #0
   18ccc:	beq	18cf8 <__assert_fail@plt+0x7808>
   18cd0:	mov	r0, r4
   18cd4:	bl	113c4 <fileno@plt>
   18cd8:	mov	r1, #1
   18cdc:	mov	r2, #0
   18ce0:	mov	r3, #0
   18ce4:	str	r1, [sp]
   18ce8:	bl	112b0 <lseek64@plt>
   18cec:	and	r0, r0, r1
   18cf0:	cmn	r0, #1
   18cf4:	beq	18d30 <__assert_fail@plt+0x7840>
   18cf8:	mov	r0, r4
   18cfc:	bl	18f54 <__assert_fail@plt+0x7a64>
   18d00:	cmp	r0, #0
   18d04:	beq	18d30 <__assert_fail@plt+0x7840>
   18d08:	bl	11394 <__errno_location@plt>
   18d0c:	ldr	r6, [r0]
   18d10:	mov	r5, r0
   18d14:	mov	r0, r4
   18d18:	bl	113e8 <fclose@plt>
   18d1c:	cmp	r6, #0
   18d20:	strne	r6, [r5]
   18d24:	mvnne	r0, #0
   18d28:	sub	sp, fp, #16
   18d2c:	pop	{r4, r5, r6, sl, fp, pc}
   18d30:	mov	r0, r4
   18d34:	sub	sp, fp, #16
   18d38:	pop	{r4, r5, r6, sl, fp, lr}
   18d3c:	b	113e8 <fclose@plt>
   18d40:	sub	sp, sp, #8
   18d44:	push	{r4, r5, r6, r7, fp, lr}
   18d48:	add	fp, sp, #16
   18d4c:	sub	sp, sp, #8
   18d50:	mov	r5, r0
   18d54:	add	r0, fp, #8
   18d58:	cmp	r1, #11
   18d5c:	str	r2, [fp, #8]
   18d60:	str	r3, [fp, #12]
   18d64:	str	r0, [sp, #4]
   18d68:	bhi	18da4 <__assert_fail@plt+0x78b4>
   18d6c:	mov	r0, #1
   18d70:	movw	r2, #1300	; 0x514
   18d74:	tst	r2, r0, lsl r1
   18d78:	bne	18e5c <__assert_fail@plt+0x796c>
   18d7c:	movw	r2, #2570	; 0xa0a
   18d80:	tst	r2, r0, lsl r1
   18d84:	bne	18dcc <__assert_fail@plt+0x78dc>
   18d88:	cmp	r1, #0
   18d8c:	bne	18da4 <__assert_fail@plt+0x78b4>
   18d90:	ldr	r0, [sp, #4]
   18d94:	add	r1, r0, #4
   18d98:	str	r1, [sp, #4]
   18d9c:	mov	r1, #0
   18da0:	b	18e68 <__assert_fail@plt+0x7978>
   18da4:	sub	r0, r1, #1024	; 0x400
   18da8:	cmp	r0, #10
   18dac:	bhi	18e5c <__assert_fail@plt+0x796c>
   18db0:	mov	r2, #1
   18db4:	movw	r3, #645	; 0x285
   18db8:	tst	r3, r2, lsl r0
   18dbc:	bne	18e5c <__assert_fail@plt+0x796c>
   18dc0:	movw	r3, #1282	; 0x502
   18dc4:	tst	r3, r2, lsl r0
   18dc8:	beq	18dd8 <__assert_fail@plt+0x78e8>
   18dcc:	mov	r0, r5
   18dd0:	bl	11400 <fcntl64@plt>
   18dd4:	b	18e74 <__assert_fail@plt+0x7984>
   18dd8:	cmp	r0, #6
   18ddc:	bne	18e5c <__assert_fail@plt+0x796c>
   18de0:	ldr	r0, [sp, #4]
   18de4:	movw	r7, #45808	; 0xb2f0
   18de8:	movt	r7, #2
   18dec:	add	r1, r0, #4
   18df0:	str	r1, [sp, #4]
   18df4:	ldr	r6, [r0]
   18df8:	ldr	r0, [r7]
   18dfc:	cmp	r0, #0
   18e00:	bmi	18e98 <__assert_fail@plt+0x79a8>
   18e04:	mov	r0, r5
   18e08:	movw	r1, #1030	; 0x406
   18e0c:	mov	r2, r6
   18e10:	bl	11400 <fcntl64@plt>
   18e14:	mov	r4, r0
   18e18:	cmn	r0, #1
   18e1c:	bgt	18e8c <__assert_fail@plt+0x799c>
   18e20:	bl	11394 <__errno_location@plt>
   18e24:	ldr	r0, [r0]
   18e28:	cmp	r0, #22
   18e2c:	bne	18e8c <__assert_fail@plt+0x799c>
   18e30:	mov	r0, r5
   18e34:	mov	r1, #0
   18e38:	mov	r2, r6
   18e3c:	bl	11400 <fcntl64@plt>
   18e40:	mov	r4, r0
   18e44:	cmp	r0, #0
   18e48:	bmi	18e78 <__assert_fail@plt+0x7988>
   18e4c:	mvn	r0, #0
   18e50:	str	r0, [r7]
   18e54:	mov	r0, #1
   18e58:	b	18ebc <__assert_fail@plt+0x79cc>
   18e5c:	ldr	r0, [sp, #4]
   18e60:	add	r2, r0, #4
   18e64:	str	r2, [sp, #4]
   18e68:	ldr	r2, [r0]
   18e6c:	mov	r0, r5
   18e70:	bl	11400 <fcntl64@plt>
   18e74:	mov	r4, r0
   18e78:	mov	r0, r4
   18e7c:	sub	sp, fp, #16
   18e80:	pop	{r4, r5, r6, r7, fp, lr}
   18e84:	add	sp, sp, #8
   18e88:	bx	lr
   18e8c:	mov	r0, #1
   18e90:	str	r0, [r7]
   18e94:	b	18e78 <__assert_fail@plt+0x7988>
   18e98:	mov	r0, r5
   18e9c:	mov	r1, #0
   18ea0:	mov	r2, r6
   18ea4:	bl	11400 <fcntl64@plt>
   18ea8:	mov	r4, r0
   18eac:	ldr	r0, [r7]
   18eb0:	add	r0, r0, #1
   18eb4:	clz	r0, r0
   18eb8:	lsr	r0, r0, #5
   18ebc:	cmp	r0, #0
   18ec0:	beq	18e78 <__assert_fail@plt+0x7988>
   18ec4:	cmp	r4, #0
   18ec8:	bmi	18e78 <__assert_fail@plt+0x7988>
   18ecc:	mov	r0, r4
   18ed0:	mov	r1, #1
   18ed4:	bl	11400 <fcntl64@plt>
   18ed8:	cmp	r0, #0
   18edc:	bmi	18ef8 <__assert_fail@plt+0x7a08>
   18ee0:	orr	r2, r0, #1
   18ee4:	mov	r0, r4
   18ee8:	mov	r1, #2
   18eec:	bl	11400 <fcntl64@plt>
   18ef0:	cmn	r0, #1
   18ef4:	bne	18e78 <__assert_fail@plt+0x7988>
   18ef8:	bl	11394 <__errno_location@plt>
   18efc:	ldr	r6, [r0]
   18f00:	mov	r5, r0
   18f04:	mov	r0, r4
   18f08:	bl	114b4 <close@plt>
   18f0c:	str	r6, [r5]
   18f10:	mvn	r4, #0
   18f14:	b	18e78 <__assert_fail@plt+0x7988>
   18f18:	sub	sp, sp, #8
   18f1c:	push	{fp, lr}
   18f20:	mov	fp, sp
   18f24:	sub	sp, sp, #8
   18f28:	str	r2, [fp, #8]
   18f2c:	str	r3, [fp, #12]
   18f30:	tst	r1, #64	; 0x40
   18f34:	mov	r2, #0
   18f38:	ldrne	r2, [fp, #8]
   18f3c:	bl	112f8 <open64@plt>
   18f40:	bl	179b4 <__assert_fail@plt+0x64c4>
   18f44:	mov	sp, fp
   18f48:	pop	{fp, lr}
   18f4c:	add	sp, sp, #8
   18f50:	bx	lr
   18f54:	push	{r4, sl, fp, lr}
   18f58:	add	fp, sp, #8
   18f5c:	sub	sp, sp, #8
   18f60:	mov	r4, r0
   18f64:	cmp	r0, #0
   18f68:	beq	18fa0 <__assert_fail@plt+0x7ab0>
   18f6c:	mov	r0, r4
   18f70:	bl	1131c <__freading@plt>
   18f74:	cmp	r0, #0
   18f78:	beq	18fa0 <__assert_fail@plt+0x7ab0>
   18f7c:	ldrb	r0, [r4, #1]
   18f80:	tst	r0, #1
   18f84:	beq	18fa0 <__assert_fail@plt+0x7ab0>
   18f88:	mov	r0, #1
   18f8c:	mov	r2, #0
   18f90:	mov	r3, #0
   18f94:	str	r0, [sp]
   18f98:	mov	r0, r4
   18f9c:	bl	18fb0 <__assert_fail@plt+0x7ac0>
   18fa0:	mov	r0, r4
   18fa4:	sub	sp, fp, #8
   18fa8:	pop	{r4, sl, fp, lr}
   18fac:	b	11214 <fflush@plt>
   18fb0:	push	{r4, r5, r6, r7, fp, lr}
   18fb4:	add	fp, sp, #16
   18fb8:	sub	sp, sp, #8
   18fbc:	mov	r4, r0
   18fc0:	ldr	r0, [r0, #4]
   18fc4:	mov	r5, r3
   18fc8:	mov	r6, r2
   18fcc:	ldr	r1, [r4, #8]
   18fd0:	cmp	r1, r0
   18fd4:	bne	18ff0 <__assert_fail@plt+0x7b00>
   18fd8:	ldrd	r0, [r4, #16]
   18fdc:	cmp	r1, r0
   18fe0:	bne	18ff0 <__assert_fail@plt+0x7b00>
   18fe4:	ldr	r0, [r4, #36]	; 0x24
   18fe8:	cmp	r0, #0
   18fec:	beq	19008 <__assert_fail@plt+0x7b18>
   18ff0:	mov	r0, r4
   18ff4:	mov	r2, r6
   18ff8:	mov	r3, r5
   18ffc:	sub	sp, fp, #16
   19000:	pop	{r4, r5, r6, r7, fp, lr}
   19004:	b	113f4 <fseeko64@plt>
   19008:	ldr	r7, [fp, #8]
   1900c:	mov	r0, r4
   19010:	bl	113c4 <fileno@plt>
   19014:	mov	r2, r6
   19018:	mov	r3, r5
   1901c:	str	r7, [sp]
   19020:	bl	112b0 <lseek64@plt>
   19024:	and	r2, r0, r1
   19028:	cmn	r2, #1
   1902c:	beq	19048 <__assert_fail@plt+0x7b58>
   19030:	strd	r0, [r4, #80]	; 0x50
   19034:	ldr	r0, [r4]
   19038:	bic	r0, r0, #16
   1903c:	str	r0, [r4]
   19040:	mov	r0, #0
   19044:	b	1904c <__assert_fail@plt+0x7b5c>
   19048:	mvn	r0, #0
   1904c:	sub	sp, fp, #16
   19050:	pop	{r4, r5, r6, r7, fp, pc}
   19054:	push	{fp, lr}
   19058:	mov	fp, sp
   1905c:	mov	r0, #14
   19060:	bl	11424 <nl_langinfo@plt>
   19064:	movw	r1, #39580	; 0x9a9c
   19068:	cmp	r0, #0
   1906c:	movt	r1, #1
   19070:	movne	r1, r0
   19074:	movw	r0, #43236	; 0xa8e4
   19078:	ldrb	r2, [r1]
   1907c:	movt	r0, #1
   19080:	cmp	r2, #0
   19084:	movne	r0, r1
   19088:	pop	{fp, pc}
   1908c:	push	{r4, r5, r6, r7, fp, lr}
   19090:	add	fp, sp, #16
   19094:	sub	sp, sp, #8
   19098:	cmp	r0, #0
   1909c:	add	r5, sp, #4
   190a0:	mov	r7, r2
   190a4:	mov	r4, r1
   190a8:	movne	r5, r0
   190ac:	mov	r0, r5
   190b0:	bl	112e0 <mbrtowc@plt>
   190b4:	mov	r6, r0
   190b8:	cmp	r7, #0
   190bc:	beq	190e4 <__assert_fail@plt+0x7bf4>
   190c0:	cmn	r6, #2
   190c4:	bcc	190e4 <__assert_fail@plt+0x7bf4>
   190c8:	mov	r0, #0
   190cc:	bl	19138 <__assert_fail@plt+0x7c48>
   190d0:	cmp	r0, #0
   190d4:	bne	190e4 <__assert_fail@plt+0x7bf4>
   190d8:	ldrb	r0, [r4]
   190dc:	mov	r6, #1
   190e0:	str	r0, [r5]
   190e4:	mov	r0, r6
   190e8:	sub	sp, fp, #16
   190ec:	pop	{r4, r5, r6, r7, fp, pc}
   190f0:	cmp	r2, #0
   190f4:	beq	19124 <__assert_fail@plt+0x7c34>
   190f8:	mvn	r3, #0
   190fc:	udiv	r3, r3, r2
   19100:	cmp	r3, r1
   19104:	bcs	19124 <__assert_fail@plt+0x7c34>
   19108:	push	{fp, lr}
   1910c:	mov	fp, sp
   19110:	bl	11394 <__errno_location@plt>
   19114:	mov	r1, #12
   19118:	str	r1, [r0]
   1911c:	mov	r0, #0
   19120:	pop	{fp, pc}
   19124:	mul	r1, r2, r1
   19128:	b	18ae8 <__assert_fail@plt+0x75f8>
   1912c:	mov	r1, #0
   19130:	mov	r2, #3
   19134:	b	18d40 <__assert_fail@plt+0x7850>
   19138:	push	{r4, sl, fp, lr}
   1913c:	add	fp, sp, #8
   19140:	sub	sp, sp, #264	; 0x108
   19144:	add	r1, sp, #7
   19148:	movw	r2, #257	; 0x101
   1914c:	bl	191a4 <__assert_fail@plt+0x7cb4>
   19150:	mov	r4, #0
   19154:	cmp	r0, #0
   19158:	bne	19198 <__assert_fail@plt+0x7ca8>
   1915c:	movw	r1, #43242	; 0xa8ea
   19160:	add	r0, sp, #7
   19164:	mov	r2, #2
   19168:	movt	r1, #1
   1916c:	bl	11358 <bcmp@plt>
   19170:	cmp	r0, #0
   19174:	beq	19198 <__assert_fail@plt+0x7ca8>
   19178:	movw	r1, #43244	; 0xa8ec
   1917c:	add	r0, sp, #7
   19180:	mov	r2, #6
   19184:	movt	r1, #1
   19188:	bl	11358 <bcmp@plt>
   1918c:	cmp	r0, #0
   19190:	mov	r4, r0
   19194:	movwne	r4, #1
   19198:	mov	r0, r4
   1919c:	sub	sp, fp, #8
   191a0:	pop	{r4, sl, fp, pc}
   191a4:	push	{r4, r5, r6, r7, fp, lr}
   191a8:	add	fp, sp, #16
   191ac:	mov	r4, r1
   191b0:	mov	r1, #0
   191b4:	mov	r6, r2
   191b8:	bl	1140c <setlocale@plt>
   191bc:	cmp	r0, #0
   191c0:	beq	191ec <__assert_fail@plt+0x7cfc>
   191c4:	mov	r7, r0
   191c8:	bl	11364 <strlen@plt>
   191cc:	cmp	r0, r6
   191d0:	bcs	19200 <__assert_fail@plt+0x7d10>
   191d4:	add	r2, r0, #1
   191d8:	mov	r0, r4
   191dc:	mov	r1, r7
   191e0:	bl	11244 <memcpy@plt>
   191e4:	mov	r5, #0
   191e8:	b	19228 <__assert_fail@plt+0x7d38>
   191ec:	cmp	r6, #0
   191f0:	mov	r5, #22
   191f4:	movne	r0, #0
   191f8:	strbne	r0, [r4]
   191fc:	b	19228 <__assert_fail@plt+0x7d38>
   19200:	mov	r5, #34	; 0x22
   19204:	cmp	r6, #0
   19208:	beq	19228 <__assert_fail@plt+0x7d38>
   1920c:	sub	r6, r6, #1
   19210:	mov	r0, r4
   19214:	mov	r1, r7
   19218:	mov	r2, r6
   1921c:	bl	11244 <memcpy@plt>
   19220:	mov	r0, #0
   19224:	strb	r0, [r4, r6]
   19228:	mov	r0, r5
   1922c:	pop	{r4, r5, r6, r7, fp, pc}
   19230:	mov	r1, #0
   19234:	b	1140c <setlocale@plt>
   19238:	cmp	r3, #0
   1923c:	cmpeq	r2, #0
   19240:	bne	19258 <__assert_fail@plt+0x7d68>
   19244:	cmp	r1, #0
   19248:	cmpeq	r0, #0
   1924c:	mvnne	r1, #0
   19250:	mvnne	r0, #0
   19254:	b	19274 <__assert_fail@plt+0x7d84>
   19258:	sub	sp, sp, #8
   1925c:	push	{sp, lr}
   19260:	bl	19284 <__assert_fail@plt+0x7d94>
   19264:	ldr	lr, [sp, #4]
   19268:	add	sp, sp, #8
   1926c:	pop	{r2, r3}
   19270:	bx	lr
   19274:	push	{r1, lr}
   19278:	mov	r0, #8
   1927c:	bl	111f0 <raise@plt>
   19280:	pop	{r1, pc}
   19284:	cmp	r1, r3
   19288:	cmpeq	r0, r2
   1928c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19290:	mov	r4, r0
   19294:	movcc	r0, #0
   19298:	mov	r5, r1
   1929c:	ldr	lr, [sp, #36]	; 0x24
   192a0:	movcc	r1, r0
   192a4:	bcc	193a0 <__assert_fail@plt+0x7eb0>
   192a8:	cmp	r3, #0
   192ac:	clzeq	ip, r2
   192b0:	clzne	ip, r3
   192b4:	addeq	ip, ip, #32
   192b8:	cmp	r5, #0
   192bc:	clzeq	r1, r4
   192c0:	addeq	r1, r1, #32
   192c4:	clzne	r1, r5
   192c8:	sub	ip, ip, r1
   192cc:	sub	sl, ip, #32
   192d0:	lsl	r9, r3, ip
   192d4:	rsb	fp, ip, #32
   192d8:	orr	r9, r9, r2, lsl sl
   192dc:	orr	r9, r9, r2, lsr fp
   192e0:	lsl	r8, r2, ip
   192e4:	cmp	r5, r9
   192e8:	cmpeq	r4, r8
   192ec:	movcc	r0, #0
   192f0:	movcc	r1, r0
   192f4:	bcc	19310 <__assert_fail@plt+0x7e20>
   192f8:	mov	r0, #1
   192fc:	subs	r4, r4, r8
   19300:	lsl	r1, r0, sl
   19304:	orr	r1, r1, r0, lsr fp
   19308:	lsl	r0, r0, ip
   1930c:	sbc	r5, r5, r9
   19310:	cmp	ip, #0
   19314:	beq	193a0 <__assert_fail@plt+0x7eb0>
   19318:	lsr	r6, r8, #1
   1931c:	orr	r6, r6, r9, lsl #31
   19320:	lsr	r7, r9, #1
   19324:	mov	r2, ip
   19328:	b	1934c <__assert_fail@plt+0x7e5c>
   1932c:	subs	r3, r4, r6
   19330:	sbc	r8, r5, r7
   19334:	adds	r3, r3, r3
   19338:	adc	r8, r8, r8
   1933c:	adds	r4, r3, #1
   19340:	adc	r5, r8, #0
   19344:	subs	r2, r2, #1
   19348:	beq	19368 <__assert_fail@plt+0x7e78>
   1934c:	cmp	r5, r7
   19350:	cmpeq	r4, r6
   19354:	bcs	1932c <__assert_fail@plt+0x7e3c>
   19358:	adds	r4, r4, r4
   1935c:	adc	r5, r5, r5
   19360:	subs	r2, r2, #1
   19364:	bne	1934c <__assert_fail@plt+0x7e5c>
   19368:	lsr	r3, r4, ip
   1936c:	orr	r3, r3, r5, lsl fp
   19370:	lsr	r2, r5, ip
   19374:	orr	r3, r3, r5, lsr sl
   19378:	adds	r0, r0, r4
   1937c:	mov	r4, r3
   19380:	lsl	r3, r2, ip
   19384:	orr	r3, r3, r4, lsl sl
   19388:	lsl	ip, r4, ip
   1938c:	orr	r3, r3, r4, lsr fp
   19390:	adc	r1, r1, r5
   19394:	subs	r0, r0, ip
   19398:	mov	r5, r2
   1939c:	sbc	r1, r1, r3
   193a0:	cmp	lr, #0
   193a4:	strdne	r4, [lr]
   193a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193b0:	mov	r7, r0
   193b4:	ldr	r6, [pc, #72]	; 19404 <__assert_fail@plt+0x7f14>
   193b8:	ldr	r5, [pc, #72]	; 19408 <__assert_fail@plt+0x7f18>
   193bc:	add	r6, pc, r6
   193c0:	add	r5, pc, r5
   193c4:	sub	r6, r6, r5
   193c8:	mov	r8, r1
   193cc:	mov	r9, r2
   193d0:	bl	111a0 <fstatfs64@plt-0x20>
   193d4:	asrs	r6, r6, #2
   193d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   193dc:	mov	r4, #0
   193e0:	add	r4, r4, #1
   193e4:	ldr	r3, [r5], #4
   193e8:	mov	r2, r9
   193ec:	mov	r1, r8
   193f0:	mov	r0, r7
   193f4:	blx	r3
   193f8:	cmp	r6, r4
   193fc:	bne	193e0 <__assert_fail@plt+0x7ef0>
   19400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19404:	andeq	r1, r1, r8, asr #22
   19408:	andeq	r1, r1, r0, asr #22
   1940c:	bx	lr
   19410:	ldr	r3, [pc, #12]	; 19424 <__assert_fail@plt+0x7f34>
   19414:	mov	r1, #0
   19418:	add	r3, pc, r3
   1941c:	ldr	r2, [r3]
   19420:	b	113a0 <__cxa_atexit@plt>
   19424:	andeq	r1, r1, ip, lsl #26
   19428:	mov	r2, r1
   1942c:	mov	r1, r0
   19430:	mov	r0, #3
   19434:	b	11484 <__xstat64@plt>
   19438:	mov	r2, r1
   1943c:	mov	r1, r0
   19440:	mov	r0, #3
   19444:	b	112a4 <__fxstat64@plt>
   19448:	mov	r2, r1
   1944c:	mov	r1, r0
   19450:	mov	r0, #3
   19454:	b	114c0 <__lxstat64@plt>
   19458:	push	{lr}		; (str lr, [sp, #-4]!)
   1945c:	sub	sp, sp, #12
   19460:	str	r3, [sp]
   19464:	mov	r3, r2
   19468:	mov	r2, r1
   1946c:	mov	r1, r0
   19470:	mov	r0, #3
   19474:	bl	1128c <__fxstatat64@plt>
   19478:	add	sp, sp, #12
   1947c:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019480 <.fini>:
   19480:	push	{r3, lr}
   19484:	pop	{r3, pc}
