
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010e0c <.init>:
   10e0c:	push	{r3, lr}
   10e10:	bl	11030 <_start@@Base+0x3c>
   10e14:	pop	{r3, pc}

Disassembly of section .plt:

00010e18 <coda_match_filefilter@plt-0x14>:
   10e18:	push	{lr}		; (str lr, [sp, #-4]!)
   10e1c:	ldr	lr, [pc, #4]	; 10e28 <coda_match_filefilter@plt-0x4>
   10e20:	add	lr, pc, lr
   10e24:	ldr	pc, [lr, #8]!
   10e28:	ldrdeq	r2, [r1], -r8

00010e2c <coda_match_filefilter@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #73728	; 0x12000
   10e34:	ldr	pc, [ip, #472]!	; 0x1d8

00010e38 <coda_expression_eval_integer@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #73728	; 0x12000
   10e40:	ldr	pc, [ip, #464]!	; 0x1d0

00010e44 <strcmp@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #73728	; 0x12000
   10e4c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e50 <printf@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #73728	; 0x12000
   10e58:	ldr	pc, [ip, #448]!	; 0x1c0

00010e5c <coda_set_error@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #73728	; 0x12000
   10e64:	ldr	pc, [ip, #440]!	; 0x1b8

00010e68 <coda_open@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #73728	; 0x12000
   10e70:	ldr	pc, [ip, #432]!	; 0x1b0

00010e74 <free@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #73728	; 0x12000
   10e7c:	ldr	pc, [ip, #424]!	; 0x1a8

00010e80 <coda_set_definition_path_conditional@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #73728	; 0x12000
   10e88:	ldr	pc, [ip, #416]!	; 0x1a0

00010e8c <coda_set_definition_path@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #73728	; 0x12000
   10e94:	ldr	pc, [ip, #408]!	; 0x198

00010e98 <fwrite@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #73728	; 0x12000
   10ea0:	ldr	pc, [ip, #400]!	; 0x190

00010ea4 <coda_expression_eval_bool@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #73728	; 0x12000
   10eac:	ldr	pc, [ip, #392]!	; 0x188

00010eb0 <coda_cursor_set_product@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #73728	; 0x12000
   10eb8:	ldr	pc, [ip, #384]!	; 0x180

00010ebc <coda_done@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #73728	; 0x12000
   10ec4:	ldr	pc, [ip, #376]!	; 0x178

00010ec8 <puts@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #73728	; 0x12000
   10ed0:	ldr	pc, [ip, #368]!	; 0x170

00010ed4 <__libc_start_main@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #73728	; 0x12000
   10edc:	ldr	pc, [ip, #360]!	; 0x168

00010ee0 <coda_expression_delete@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #73728	; 0x12000
   10ee8:	ldr	pc, [ip, #352]!	; 0x160

00010eec <__gmon_start__@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #73728	; 0x12000
   10ef4:	ldr	pc, [ip, #344]!	; 0x158

00010ef8 <__ctype_b_loc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #73728	; 0x12000
   10f00:	ldr	pc, [ip, #336]!	; 0x150

00010f04 <exit@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #73728	; 0x12000
   10f0c:	ldr	pc, [ip, #328]!	; 0x148

00010f10 <strlen@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #73728	; 0x12000
   10f18:	ldr	pc, [ip, #320]!	; 0x140

00010f1c <fprintf@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #73728	; 0x12000
   10f24:	ldr	pc, [ip, #312]!	; 0x138

00010f28 <coda_init@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #73728	; 0x12000
   10f30:	ldr	pc, [ip, #304]!	; 0x130

00010f34 <coda_set_option_perform_conversions@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #73728	; 0x12000
   10f3c:	ldr	pc, [ip, #296]!	; 0x128

00010f40 <coda_expression_eval_string@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #73728	; 0x12000
   10f48:	ldr	pc, [ip, #288]!	; 0x120

00010f4c <putchar@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #73728	; 0x12000
   10f54:	ldr	pc, [ip, #280]!	; 0x118

00010f58 <coda_expression_get_type@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #73728	; 0x12000
   10f60:	ldr	pc, [ip, #272]!	; 0x110

00010f64 <coda_close@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #73728	; 0x12000
   10f6c:	ldr	pc, [ip, #264]!	; 0x108

00010f70 <coda_expression_is_constant@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #73728	; 0x12000
   10f78:	ldr	pc, [ip, #256]!	; 0x100

00010f7c <coda_expression_eval_float@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #73728	; 0x12000
   10f84:	ldr	pc, [ip, #248]!	; 0xf8

00010f88 <coda_expression_eval_node@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #73728	; 0x12000
   10f90:	ldr	pc, [ip, #240]!	; 0xf0

00010f94 <coda_errno_to_string@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #73728	; 0x12000
   10f9c:	ldr	pc, [ip, #232]!	; 0xe8

00010fa0 <coda_expression_get_type_name@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #73728	; 0x12000
   10fa8:	ldr	pc, [ip, #224]!	; 0xe0

00010fac <coda_expression_from_string@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #73728	; 0x12000
   10fb4:	ldr	pc, [ip, #216]!	; 0xd8

00010fb8 <coda_get_libcoda_version@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #73728	; 0x12000
   10fc0:	ldr	pc, [ip, #208]!	; 0xd0

00010fc4 <coda_get_errno@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #73728	; 0x12000
   10fcc:	ldr	pc, [ip, #200]!	; 0xc8

00010fd0 <abort@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #73728	; 0x12000
   10fd8:	ldr	pc, [ip, #192]!	; 0xc0

00010fdc <coda_str64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #73728	; 0x12000
   10fe4:	ldr	pc, [ip, #184]!	; 0xb8

00010fe8 <__assert_fail@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #73728	; 0x12000
   10ff0:	ldr	pc, [ip, #176]!	; 0xb0

Disassembly of section .text:

00010ff4 <_start@@Base>:
   10ff4:	mov	fp, #0
   10ff8:	mov	lr, #0
   10ffc:	pop	{r1}		; (ldr r1, [sp], #4)
   11000:	mov	r2, sp
   11004:	push	{r2}		; (str r2, [sp, #-4]!)
   11008:	push	{r0}		; (str r0, [sp, #-4]!)
   1100c:	ldr	ip, [pc, #16]	; 11024 <_start@@Base+0x30>
   11010:	push	{ip}		; (str ip, [sp, #-4]!)
   11014:	ldr	r0, [pc, #12]	; 11028 <_start@@Base+0x34>
   11018:	ldr	r3, [pc, #12]	; 1102c <_start@@Base+0x38>
   1101c:	bl	10ed4 <__libc_start_main@plt>
   11020:	bl	10fd0 <abort@plt>
   11024:			; <UNDEFINED> instruction: 0x00011ebc
   11028:			; <UNDEFINED> instruction: 0x000112b4
   1102c:	andeq	r1, r1, ip, asr lr
   11030:	ldr	r3, [pc, #20]	; 1104c <_start@@Base+0x58>
   11034:	ldr	r2, [pc, #20]	; 11050 <_start@@Base+0x5c>
   11038:	add	r3, pc, r3
   1103c:	ldr	r2, [r3, r2]
   11040:	cmp	r2, #0
   11044:	bxeq	lr
   11048:	b	10eec <__gmon_start__@plt>
   1104c:	andeq	r1, r1, r0, asr #31
   11050:	andeq	r0, r0, r8, lsr #1
   11054:	ldr	r0, [pc, #24]	; 11074 <_start@@Base+0x80>
   11058:	ldr	r3, [pc, #24]	; 11078 <_start@@Base+0x84>
   1105c:	cmp	r3, r0
   11060:	bxeq	lr
   11064:	ldr	r3, [pc, #16]	; 1107c <_start@@Base+0x88>
   11068:	cmp	r3, #0
   1106c:	bxeq	lr
   11070:	bx	r3
   11074:	strheq	r3, [r2], -r8
   11078:	strheq	r3, [r2], -r8
   1107c:	andeq	r0, r0, r0
   11080:	ldr	r0, [pc, #36]	; 110ac <_start@@Base+0xb8>
   11084:	ldr	r1, [pc, #36]	; 110b0 <_start@@Base+0xbc>
   11088:	sub	r1, r1, r0
   1108c:	asr	r1, r1, #2
   11090:	add	r1, r1, r1, lsr #31
   11094:	asrs	r1, r1, #1
   11098:	bxeq	lr
   1109c:	ldr	r3, [pc, #16]	; 110b4 <_start@@Base+0xc0>
   110a0:	cmp	r3, #0
   110a4:	bxeq	lr
   110a8:	bx	r3
   110ac:	strheq	r3, [r2], -r8
   110b0:	strheq	r3, [r2], -r8
   110b4:	andeq	r0, r0, r0
   110b8:	push	{r4, lr}
   110bc:	ldr	r4, [pc, #24]	; 110dc <_start@@Base+0xe8>
   110c0:	ldrb	r3, [r4]
   110c4:	cmp	r3, #0
   110c8:	popne	{r4, pc}
   110cc:	bl	11054 <_start@@Base+0x60>
   110d0:	mov	r3, #1
   110d4:	strb	r3, [r4]
   110d8:	pop	{r4, pc}
   110dc:	strheq	r3, [r2], -r8
   110e0:	b	11080 <_start@@Base+0x8c>

000110e4 <callback@@Base>:
   110e4:	push	{r4, r5, r6, r7, fp, lr}
   110e8:	add	fp, sp, #16
   110ec:	sub	sp, sp, #528	; 0x210
   110f0:	mov	r5, #0
   110f4:	cmp	r1, #4
   110f8:	bhi	1120c <callback@@Base+0x128>
   110fc:	mov	r4, r0
   11100:	add	r0, pc, #8
   11104:	mov	r3, r2
   11108:	ldr	r1, [r0, r1, lsl #2]
   1110c:	add	pc, r0, r1
   11110:	muleq	r0, ip, r0
   11114:	andeq	r0, r0, r0, asr #1
   11118:	andeq	r0, r0, r0, ror #1
   1111c:	strdeq	r0, [r0], -ip
   11120:	andeq	r0, r0, r4, lsl r0
   11124:	mov	r0, #0
   11128:	sub	r1, fp, #20
   1112c:	str	r0, [fp, #-20]	; 0xffffffec
   11130:	mov	r0, r4
   11134:	bl	10e68 <coda_open@plt>
   11138:	mov	r5, #1
   1113c:	cmp	r0, #0
   11140:	bne	1120c <callback@@Base+0x128>
   11144:	ldr	r1, [fp, #-20]	; 0xffffffec
   11148:	mov	r0, sp
   1114c:	bl	10eb0 <coda_cursor_set_product@plt>
   11150:	cmp	r0, #0
   11154:	beq	11164 <callback@@Base+0x80>
   11158:	ldr	r0, [fp, #-20]	; 0xffffffec
   1115c:	bl	10f64 <coda_close@plt>
   11160:	b	1120c <callback@@Base+0x128>
   11164:	ldr	r0, [pc, #308]	; 112a0 <callback@@Base+0x1bc>
   11168:	ldr	r0, [pc, r0]
   1116c:	cmp	r0, #0
   11170:	beq	11184 <callback@@Base+0xa0>
   11174:	mov	r1, sp
   11178:	bl	10f88 <coda_expression_eval_node@plt>
   1117c:	cmp	r0, #0
   11180:	bne	1124c <callback@@Base+0x168>
   11184:	mov	r0, sp
   11188:	bl	11738 <main@@Base+0x484>
   1118c:	cmp	r0, #0
   11190:	bne	11218 <callback@@Base+0x134>
   11194:	ldr	r0, [fp, #-20]	; 0xffffffec
   11198:	bl	10f64 <coda_close@plt>
   1119c:	cmp	r0, #0
   111a0:	mov	r5, r0
   111a4:	movwne	r5, #1
   111a8:	b	1120c <callback@@Base+0x128>
   111ac:	ldr	r0, [pc, #212]	; 11288 <callback@@Base+0x1a4>
   111b0:	mov	r2, r3
   111b4:	mov	r3, r4
   111b8:	ldr	r0, [pc, r0]
   111bc:	ldr	r0, [r0]
   111c0:	ldr	r1, [pc, #196]	; 1128c <callback@@Base+0x1a8>
   111c4:	add	r1, pc, r1
   111c8:	bl	10f1c <fprintf@plt>
   111cc:	b	1120c <callback@@Base+0x128>
   111d0:	ldr	r0, [pc, #192]	; 11298 <callback@@Base+0x1b4>
   111d4:	mov	r2, r4
   111d8:	ldr	r0, [pc, r0]
   111dc:	ldr	r0, [r0]
   111e0:	ldr	r1, [pc, #180]	; 1129c <callback@@Base+0x1b8>
   111e4:	add	r1, pc, r1
   111e8:	bl	10f1c <fprintf@plt>
   111ec:	b	1120c <callback@@Base+0x128>
   111f0:	ldr	r0, [pc, #152]	; 11290 <callback@@Base+0x1ac>
   111f4:	mov	r2, r4
   111f8:	ldr	r0, [pc, r0]
   111fc:	ldr	r0, [r0]
   11200:	ldr	r1, [pc, #140]	; 11294 <callback@@Base+0x1b0>
   11204:	add	r1, pc, r1
   11208:	bl	10f1c <fprintf@plt>
   1120c:	mov	r0, r5
   11210:	sub	sp, fp, #16
   11214:	pop	{r4, r5, r6, r7, fp, pc}
   11218:	ldr	r0, [pc, #140]	; 112ac <callback@@Base+0x1c8>
   1121c:	ldr	r0, [pc, r0]
   11220:	ldr	r5, [r0]
   11224:	bl	10fc4 <coda_get_errno@plt>
   11228:	ldr	r0, [r0]
   1122c:	bl	10f94 <coda_errno_to_string@plt>
   11230:	ldr	r1, [pc, #120]	; 112b0 <callback@@Base+0x1cc>
   11234:	mov	r2, r0
   11238:	mov	r0, r5
   1123c:	mov	r3, r4
   11240:	add	r1, pc, r1
   11244:	bl	10f1c <fprintf@plt>
   11248:	b	11194 <callback@@Base+0xb0>
   1124c:	ldr	r0, [pc, #80]	; 112a4 <callback@@Base+0x1c0>
   11250:	ldr	r0, [pc, r0]
   11254:	ldr	r4, [r0]
   11258:	bl	10fc4 <coda_get_errno@plt>
   1125c:	ldr	r0, [r0]
   11260:	bl	10f94 <coda_errno_to_string@plt>
   11264:	ldr	r1, [pc, #60]	; 112a8 <callback@@Base+0x1c4>
   11268:	mov	r2, r0
   1126c:	mov	r0, r4
   11270:	add	r1, pc, r1
   11274:	bl	10f1c <fprintf@plt>
   11278:	ldr	r0, [fp, #-20]	; 0xffffffec
   1127c:	bl	10f64 <coda_close@plt>
   11280:	mov	r5, #0
   11284:	b	1120c <callback@@Base+0x128>
   11288:	andeq	r1, r1, r4, ror #29
   1128c:	andeq	r0, r0, r0, lsl #26
   11290:	andeq	r1, r1, r4, lsr #29
   11294:	ldrdeq	r0, [r0], -r2
   11298:	andeq	r1, r1, r4, asr #29
   1129c:	andeq	r0, r0, r8, lsl sp
   112a0:	andeq	r1, r1, ip, asr #30
   112a4:	andeq	r1, r1, ip, asr #28
   112a8:	andeq	r0, r0, r6, asr #28
   112ac:	andeq	r1, r1, r0, lsl #29
   112b0:	andeq	r0, r0, r4, lsl #25

000112b4 <main@@Base>:
   112b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112b8:	add	fp, sp, #28
   112bc:	sub	sp, sp, #12
   112c0:	cmp	r0, #1
   112c4:	beq	115e0 <main@@Base+0x32c>
   112c8:	mov	r4, r1
   112cc:	ldr	r6, [r1, #4]
   112d0:	ldr	r1, [pc, #980]	; 116ac <main@@Base+0x3f8>
   112d4:	mov	r5, r0
   112d8:	add	r1, pc, r1
   112dc:	mov	r0, r6
   112e0:	bl	10e44 <strcmp@plt>
   112e4:	cmp	r0, #0
   112e8:	beq	115e0 <main@@Base+0x32c>
   112ec:	ldr	r1, [pc, #956]	; 116b0 <main@@Base+0x3fc>
   112f0:	mov	r0, r6
   112f4:	add	r1, pc, r1
   112f8:	bl	10e44 <strcmp@plt>
   112fc:	cmp	r0, #0
   11300:	beq	115e0 <main@@Base+0x32c>
   11304:	ldr	r1, [pc, #936]	; 116b4 <main@@Base+0x400>
   11308:	mov	r0, r6
   1130c:	add	r1, pc, r1
   11310:	bl	10e44 <strcmp@plt>
   11314:	cmp	r0, #0
   11318:	beq	11614 <main@@Base+0x360>
   1131c:	ldr	r1, [pc, #916]	; 116b8 <main@@Base+0x404>
   11320:	mov	r0, r6
   11324:	add	r1, pc, r1
   11328:	bl	10e44 <strcmp@plt>
   1132c:	cmp	r0, #0
   11330:	beq	11614 <main@@Base+0x360>
   11334:	cmp	r5, #3
   11338:	blt	11354 <main@@Base+0xa0>
   1133c:	ldr	r1, [pc, #888]	; 116bc <main@@Base+0x408>
   11340:	mov	r0, r6
   11344:	add	r1, pc, r1
   11348:	bl	10e44 <strcmp@plt>
   1134c:	cmp	r0, #0
   11350:	beq	1150c <main@@Base+0x258>
   11354:	ldr	r0, [r4]
   11358:	ldr	r2, [pc, #876]	; 116cc <main@@Base+0x418>
   1135c:	mov	r1, #0
   11360:	add	r2, pc, r2
   11364:	bl	10e80 <coda_set_definition_path_conditional@plt>
   11368:	mov	r6, #1
   1136c:	cmp	r0, #0
   11370:	bne	115ec <main@@Base+0x338>
   11374:	cmp	r6, r5
   11378:	bge	11520 <main@@Base+0x26c>
   1137c:	mov	r0, #1
   11380:	mov	r8, #0
   11384:	str	r0, [sp, #8]
   11388:	ldr	r7, [pc, #816]	; 116c0 <main@@Base+0x40c>
   1138c:	add	r7, pc, r7
   11390:	b	113a8 <main@@Base+0xf4>
   11394:	mov	r8, #1
   11398:	mov	r9, r6
   1139c:	add	r6, r9, #1
   113a0:	cmp	r6, r5
   113a4:	bge	11520 <main@@Base+0x26c>
   113a8:	ldr	sl, [r4, r6, lsl #2]
   113ac:	mov	r1, r7
   113b0:	mov	r0, sl
   113b4:	bl	10e44 <strcmp@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	11394 <main@@Base+0xe0>
   113c0:	ldr	r1, [pc, #784]	; 116d8 <main@@Base+0x424>
   113c4:	mov	r0, sl
   113c8:	add	r1, pc, r1
   113cc:	bl	10e44 <strcmp@plt>
   113d0:	cmp	r0, #0
   113d4:	beq	11394 <main@@Base+0xe0>
   113d8:	ldr	r1, [pc, #764]	; 116dc <main@@Base+0x428>
   113dc:	mov	r0, sl
   113e0:	add	r1, pc, r1
   113e4:	bl	10e44 <strcmp@plt>
   113e8:	cmp	r0, #0
   113ec:	beq	11454 <main@@Base+0x1a0>
   113f0:	ldr	r1, [pc, #744]	; 116e0 <main@@Base+0x42c>
   113f4:	mov	r0, sl
   113f8:	add	r1, pc, r1
   113fc:	bl	10e44 <strcmp@plt>
   11400:	cmp	r0, #0
   11404:	beq	11454 <main@@Base+0x1a0>
   11408:	ldr	r1, [pc, #724]	; 116e4 <main@@Base+0x430>
   1140c:	mov	r0, sl
   11410:	add	r1, pc, r1
   11414:	bl	10e44 <strcmp@plt>
   11418:	cmp	r0, #0
   1141c:	bne	11460 <main@@Base+0x1ac>
   11420:	add	r9, r6, #1
   11424:	cmp	r9, r5
   11428:	bge	11460 <main@@Base+0x1ac>
   1142c:	ldr	r0, [r4, r9, lsl #2]
   11430:	ldrb	r1, [r0]
   11434:	cmp	r1, #45	; 0x2d
   11438:	beq	11460 <main@@Base+0x1ac>
   1143c:	ldr	r1, [pc, #676]	; 116e8 <main@@Base+0x434>
   11440:	add	r1, pc, r1
   11444:	bl	10fac <coda_expression_from_string@plt>
   11448:	cmp	r0, #0
   1144c:	beq	1139c <main@@Base+0xe8>
   11450:	b	115ac <main@@Base+0x2f8>
   11454:	mov	r0, #0
   11458:	str	r0, [sp, #8]
   1145c:	b	11398 <main@@Base+0xe4>
   11460:	ldrb	r0, [sl]
   11464:	cmp	r0, #45	; 0x2d
   11468:	beq	11520 <main@@Base+0x26c>
   1146c:	ldr	r1, [pc, #640]	; 116f4 <main@@Base+0x440>
   11470:	mov	r0, sl
   11474:	add	r1, pc, r1
   11478:	bl	10fac <coda_expression_from_string@plt>
   1147c:	cmp	r0, #0
   11480:	bne	11620 <main@@Base+0x36c>
   11484:	ldr	r0, [pc, #628]	; 11700 <main@@Base+0x44c>
   11488:	ldr	r0, [pc, r0]
   1148c:	ldr	r1, [pc, #624]	; 11704 <main@@Base+0x450>
   11490:	add	r1, pc, r1
   11494:	bl	10f58 <coda_expression_get_type@plt>
   11498:	cmp	r0, #0
   1149c:	bne	115ec <main@@Base+0x338>
   114a0:	ldr	r0, [pc, #608]	; 11708 <main@@Base+0x454>
   114a4:	ldr	r0, [pc, r0]
   114a8:	orr	r1, r0, #1
   114ac:	cmp	r1, #5
   114b0:	beq	11648 <main@@Base+0x394>
   114b4:	cmp	r8, #0
   114b8:	bne	11580 <main@@Base+0x2cc>
   114bc:	add	r6, r6, #1
   114c0:	cmp	r6, r5
   114c4:	bge	1154c <main@@Base+0x298>
   114c8:	bl	10f28 <coda_init@plt>
   114cc:	cmp	r0, #0
   114d0:	bne	115ec <main@@Base+0x338>
   114d4:	ldr	r0, [sp, #8]
   114d8:	bl	10f34 <coda_set_option_perform_conversions@plt>
   114dc:	mov	r0, #0
   114e0:	add	r2, r4, r6, lsl #2
   114e4:	sub	r1, r5, r6
   114e8:	str	r0, [sp]
   114ec:	mov	r0, #0
   114f0:	ldr	r3, [pc, #540]	; 11714 <main@@Base+0x460>
   114f4:	ldr	r3, [pc, r3]
   114f8:	bl	10e2c <coda_match_filefilter@plt>
   114fc:	cmp	r0, #0
   11500:	bne	115ec <main@@Base+0x338>
   11504:	bl	10ebc <coda_done@plt>
   11508:	b	11580 <main@@Base+0x2cc>
   1150c:	ldr	r0, [r4, #8]
   11510:	bl	10e8c <coda_set_definition_path@plt>
   11514:	mov	r6, #3
   11518:	cmp	r6, r5
   1151c:	blt	1137c <main@@Base+0xc8>
   11520:	ldr	r0, [pc, #412]	; 116c4 <main@@Base+0x410>
   11524:	mov	r1, #25
   11528:	mov	r2, #1
   1152c:	ldr	r0, [pc, r0]
   11530:	ldr	r3, [r0]
   11534:	ldr	r0, [pc, #396]	; 116c8 <main@@Base+0x414>
   11538:	add	r0, pc, r0
   1153c:	bl	10e98 <fwrite@plt>
   11540:	bl	11be4 <main@@Base+0x930>
   11544:	mov	r0, #1
   11548:	bl	10f04 <exit@plt>
   1154c:	ldr	r0, [pc, #452]	; 11718 <main@@Base+0x464>
   11550:	ldr	r0, [pc, r0]
   11554:	cmp	r0, #0
   11558:	bne	11668 <main@@Base+0x3b4>
   1155c:	ldr	r0, [pc, #448]	; 11724 <main@@Base+0x470>
   11560:	ldr	r0, [pc, r0]
   11564:	bl	10f70 <coda_expression_is_constant@plt>
   11568:	cmp	r0, #0
   1156c:	beq	11684 <main@@Base+0x3d0>
   11570:	mov	r0, #0
   11574:	bl	11738 <main@@Base+0x484>
   11578:	cmp	r0, #0
   1157c:	bne	115ec <main@@Base+0x338>
   11580:	ldr	r0, [pc, #424]	; 11730 <main@@Base+0x47c>
   11584:	ldr	r0, [pc, r0]
   11588:	bl	10ee0 <coda_expression_delete@plt>
   1158c:	ldr	r0, [pc, #416]	; 11734 <main@@Base+0x480>
   11590:	ldr	r0, [pc, r0]
   11594:	cmp	r0, #0
   11598:	beq	115a0 <main@@Base+0x2ec>
   1159c:	bl	10ee0 <coda_expression_delete@plt>
   115a0:	mov	r0, #0
   115a4:	sub	sp, fp, #28
   115a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115ac:	ldr	r0, [pc, #312]	; 116ec <main@@Base+0x438>
   115b0:	ldr	r0, [pc, r0]
   115b4:	ldr	r4, [r0]
   115b8:	bl	10fc4 <coda_get_errno@plt>
   115bc:	ldr	r0, [r0]
   115c0:	bl	10f94 <coda_errno_to_string@plt>
   115c4:	ldr	r1, [pc, #292]	; 116f0 <main@@Base+0x43c>
   115c8:	mov	r2, r0
   115cc:	add	r1, pc, r1
   115d0:	mov	r0, r4
   115d4:	bl	10f1c <fprintf@plt>
   115d8:	mov	r0, #1
   115dc:	bl	10f04 <exit@plt>
   115e0:	bl	11be4 <main@@Base+0x930>
   115e4:	mov	r0, #0
   115e8:	bl	10f04 <exit@plt>
   115ec:	ldr	r0, [pc, #220]	; 116d0 <main@@Base+0x41c>
   115f0:	ldr	r0, [pc, r0]
   115f4:	ldr	r4, [r0]
   115f8:	bl	10fc4 <coda_get_errno@plt>
   115fc:	ldr	r0, [r0]
   11600:	bl	10f94 <coda_errno_to_string@plt>
   11604:	ldr	r1, [pc, #200]	; 116d4 <main@@Base+0x420>
   11608:	mov	r2, r0
   1160c:	add	r1, pc, r1
   11610:	b	115d0 <main@@Base+0x31c>
   11614:	bl	11e20 <main@@Base+0xb6c>
   11618:	mov	r0, #0
   1161c:	bl	10f04 <exit@plt>
   11620:	ldr	r0, [pc, #208]	; 116f8 <main@@Base+0x444>
   11624:	ldr	r0, [pc, r0]
   11628:	ldr	r4, [r0]
   1162c:	bl	10fc4 <coda_get_errno@plt>
   11630:	ldr	r0, [r0]
   11634:	bl	10f94 <coda_errno_to_string@plt>
   11638:	ldr	r1, [pc, #188]	; 116fc <main@@Base+0x448>
   1163c:	mov	r2, r0
   11640:	add	r1, pc, r1
   11644:	b	115d0 <main@@Base+0x31c>
   11648:	ldr	r1, [pc, #188]	; 1170c <main@@Base+0x458>
   1164c:	ldr	r1, [pc, r1]
   11650:	ldr	r4, [r1]
   11654:	bl	10fa0 <coda_expression_get_type_name@plt>
   11658:	ldr	r1, [pc, #176]	; 11710 <main@@Base+0x45c>
   1165c:	mov	r2, r0
   11660:	add	r1, pc, r1
   11664:	b	115d0 <main@@Base+0x31c>
   11668:	ldr	r0, [pc, #172]	; 1171c <main@@Base+0x468>
   1166c:	mov	r1, #96	; 0x60
   11670:	ldr	r0, [pc, r0]
   11674:	ldr	r3, [r0]
   11678:	ldr	r0, [pc, #160]	; 11720 <main@@Base+0x46c>
   1167c:	add	r0, pc, r0
   11680:	b	1169c <main@@Base+0x3e8>
   11684:	ldr	r0, [pc, #156]	; 11728 <main@@Base+0x474>
   11688:	mov	r1, #111	; 0x6f
   1168c:	ldr	r0, [pc, r0]
   11690:	ldr	r3, [r0]
   11694:	ldr	r0, [pc, #144]	; 1172c <main@@Base+0x478>
   11698:	add	r0, pc, r0
   1169c:	mov	r2, #1
   116a0:	bl	10e98 <fwrite@plt>
   116a4:	mov	r0, #1
   116a8:	bl	10f04 <exit@plt>
   116ac:	andeq	r0, r0, r8, asr #24
   116b0:	andeq	r1, r0, sp, asr #7
   116b4:	andeq	r0, r0, r7, lsl ip
   116b8:	ldrdeq	r1, [r0], -r3
   116bc:	andeq	r0, r0, r2, ror #23
   116c0:	andeq	r0, r0, r2, asr #23
   116c4:	andeq	r1, r1, r0, ror fp
   116c8:	andeq	r0, r0, r4, asr #20
   116cc:	andeq	r0, r0, r9, asr #23
   116d0:	andeq	r1, r1, ip, lsr #21
   116d4:	andeq	r0, r0, r7, lsr r9
   116d8:	andeq	r1, r0, r4, lsr r0
   116dc:	andeq	r0, r0, r1, ror fp
   116e0:	strheq	r1, [r0], -ip
   116e4:	andeq	r0, r0, r4, asr #22
   116e8:	andeq	r1, r1, r4, ror ip
   116ec:	andeq	r1, r1, ip, ror #21
   116f0:	andeq	r0, r0, fp, lsl #19
   116f4:	andeq	r1, r1, r4, asr #24
   116f8:	andeq	r1, r1, r8, ror sl
   116fc:	andeq	r0, r0, r6, asr r9
   11700:	andeq	r1, r1, r0, lsr ip
   11704:	andeq	r1, r1, ip, lsr #24
   11708:	andeq	r1, r1, r8, lsl ip
   1170c:	andeq	r1, r1, r0, asr sl
   11710:	andeq	r0, r0, r6, asr r9
   11714:			; <UNDEFINED> instruction: 0x00011bb0
   11718:	andeq	r1, r1, r4, ror #22
   1171c:	andeq	r1, r1, ip, lsr #20
   11720:	andeq	r0, r0, r9, ror #18
   11724:	andeq	r1, r1, r8, asr fp
   11728:	andeq	r1, r1, r0, lsl sl
   1172c:	andeq	r0, r0, lr, lsr #19
   11730:	andeq	r1, r1, r4, lsr fp
   11734:	andeq	r1, r1, r4, lsr #22
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	add	fp, sp, #28
   11740:	sub	sp, sp, #36	; 0x24
   11744:	mov	r1, r0
   11748:	ldr	r0, [pc, #1068]	; 11b7c <main@@Base+0x8c8>
   1174c:	mov	r4, #0
   11750:	ldr	r0, [pc, r0]
   11754:	cmp	r0, #5
   11758:	bhi	11b50 <main@@Base+0x89c>
   1175c:	add	r2, pc, #4
   11760:	ldr	r0, [r2, r0, lsl #2]
   11764:	add	pc, r2, r0
   11768:	andeq	r0, r0, r8, lsl r0
   1176c:	andeq	r0, r0, ip, asr #32
   11770:	andeq	r0, r0, r0, lsl #1
   11774:	strheq	r0, [r0], -r4
   11778:	strdeq	r0, [r0], -r4
   1177c:	strdeq	r0, [r0], -r4
   11780:	ldr	r0, [pc, #1016]	; 11b80 <main@@Base+0x8cc>
   11784:	mov	r2, sp
   11788:	ldr	r0, [pc, r0]
   1178c:	bl	10ea4 <coda_expression_eval_bool@plt>
   11790:	cmp	r0, #0
   11794:	beq	11868 <main@@Base+0x5b4>
   11798:	bl	10fc4 <coda_get_errno@plt>
   1179c:	ldr	r0, [r0]
   117a0:	bl	10f94 <coda_errno_to_string@plt>
   117a4:	ldr	r1, [pc, #984]	; 11b84 <main@@Base+0x8d0>
   117a8:	mov	r2, r0
   117ac:	add	r1, pc, r1
   117b0:	b	11858 <main@@Base+0x5a4>
   117b4:	ldr	r0, [pc, #972]	; 11b88 <main@@Base+0x8d4>
   117b8:	add	r2, sp, #24
   117bc:	ldr	r0, [pc, r0]
   117c0:	bl	10e38 <coda_expression_eval_integer@plt>
   117c4:	cmp	r0, #0
   117c8:	beq	11888 <main@@Base+0x5d4>
   117cc:	bl	10fc4 <coda_get_errno@plt>
   117d0:	ldr	r0, [r0]
   117d4:	bl	10f94 <coda_errno_to_string@plt>
   117d8:	ldr	r1, [pc, #940]	; 11b8c <main@@Base+0x8d8>
   117dc:	mov	r2, r0
   117e0:	add	r1, pc, r1
   117e4:	b	11858 <main@@Base+0x5a4>
   117e8:	ldr	r0, [pc, #928]	; 11b90 <main@@Base+0x8dc>
   117ec:	mov	r2, sp
   117f0:	ldr	r0, [pc, r0]
   117f4:	bl	10f7c <coda_expression_eval_float@plt>
   117f8:	cmp	r0, #0
   117fc:	beq	118a8 <main@@Base+0x5f4>
   11800:	bl	10fc4 <coda_get_errno@plt>
   11804:	ldr	r0, [r0]
   11808:	bl	10f94 <coda_errno_to_string@plt>
   1180c:	ldr	r1, [pc, #896]	; 11b94 <main@@Base+0x8e0>
   11810:	mov	r2, r0
   11814:	add	r1, pc, r1
   11818:	b	11858 <main@@Base+0x5a4>
   1181c:	mov	r0, #0
   11820:	mov	r2, sp
   11824:	add	r3, sp, #24
   11828:	str	r0, [sp]
   1182c:	ldr	r0, [pc, #872]	; 11b9c <main@@Base+0x8e8>
   11830:	ldr	r0, [pc, r0]
   11834:	bl	10f40 <coda_expression_eval_string@plt>
   11838:	cmp	r0, #0
   1183c:	beq	118c0 <main@@Base+0x60c>
   11840:	bl	10fc4 <coda_get_errno@plt>
   11844:	ldr	r0, [r0]
   11848:	bl	10f94 <coda_errno_to_string@plt>
   1184c:	ldr	r1, [pc, #844]	; 11ba0 <main@@Base+0x8ec>
   11850:	mov	r2, r0
   11854:	add	r1, pc, r1
   11858:	mvn	r0, #400	; 0x190
   1185c:	bl	10e5c <coda_set_error@plt>
   11860:	mvn	r4, #0
   11864:	b	11b50 <main@@Base+0x89c>
   11868:	ldr	r1, [sp]
   1186c:	ldr	r2, [pc, #872]	; 11bdc <main@@Base+0x928>
   11870:	ldr	r0, [pc, #872]	; 11be0 <main@@Base+0x92c>
   11874:	add	r2, pc, r2
   11878:	cmp	r1, #0
   1187c:	add	r0, pc, r0
   11880:	moveq	r0, r2
   11884:	b	118a0 <main@@Base+0x5ec>
   11888:	ldr	r0, [sp, #24]
   1188c:	ldr	r1, [sp, #28]
   11890:	mov	r5, sp
   11894:	mov	r2, r5
   11898:	bl	10fdc <coda_str64@plt>
   1189c:	mov	r0, r5
   118a0:	bl	10ec8 <puts@plt>
   118a4:	b	11b50 <main@@Base+0x89c>
   118a8:	vldr	d16, [sp]
   118ac:	ldr	r0, [pc, #740]	; 11b98 <main@@Base+0x8e4>
   118b0:	add	r0, pc, r0
   118b4:	vmov	r2, r3, d16
   118b8:	bl	10e50 <printf@plt>
   118bc:	b	11b50 <main@@Base+0x89c>
   118c0:	ldr	r4, [sp]
   118c4:	cmp	r4, #0
   118c8:	ldrne	r5, [sp, #24]
   118cc:	cmpne	r5, #0
   118d0:	beq	11b34 <main@@Base+0x880>
   118d4:	cmn	r5, #1
   118d8:	bgt	118f0 <main@@Base+0x63c>
   118dc:	mov	r0, r4
   118e0:	bl	10f10 <strlen@plt>
   118e4:	mov	r5, r0
   118e8:	cmp	r0, #1
   118ec:	blt	11b34 <main@@Base+0x880>
   118f0:	ldr	sl, [pc, #684]	; 11ba4 <main@@Base+0x8f0>
   118f4:	ldr	r7, [pc, #684]	; 11ba8 <main@@Base+0x8f4>
   118f8:	ldr	r6, [pc, #684]	; 11bac <main@@Base+0x8f8>
   118fc:	ldr	r8, [pc, #684]	; 11bb0 <main@@Base+0x8fc>
   11900:	add	sl, pc, sl
   11904:	add	r7, pc, r7
   11908:	add	r6, pc, r6
   1190c:	add	r8, pc, r8
   11910:	ldrb	r9, [r4]
   11914:	sub	r0, r9, #7
   11918:	cmp	r0, #85	; 0x55
   1191c:	bhi	11ac8 <main@@Base+0x814>
   11920:	add	r1, pc, #4
   11924:	ldr	r0, [r1, r0, lsl #2]
   11928:	add	pc, r1, r0
   1192c:	andeq	r0, r0, r8, asr r1
   11930:	andeq	r0, r0, r4, ror #2
   11934:	andeq	r0, r0, r0, ror r1
   11938:	andeq	r0, r0, ip, ror r1
   1193c:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11940:	andeq	r0, r0, r8, lsl #3
   11944:	muleq	r0, r4, r1
   11948:	muleq	r0, ip, r1
   1194c:	muleq	r0, ip, r1
   11950:	muleq	r0, ip, r1
   11954:	muleq	r0, ip, r1
   11958:	muleq	r0, ip, r1
   1195c:	muleq	r0, ip, r1
   11960:	muleq	r0, ip, r1
   11964:	muleq	r0, ip, r1
   11968:	muleq	r0, ip, r1
   1196c:	muleq	r0, ip, r1
   11970:	muleq	r0, ip, r1
   11974:	muleq	r0, ip, r1
   11978:	muleq	r0, ip, r1
   1197c:	andeq	r0, r0, r8, asr #3
   11980:	muleq	r0, ip, r1
   11984:	muleq	r0, ip, r1
   11988:	muleq	r0, ip, r1
   1198c:	muleq	r0, ip, r1
   11990:	muleq	r0, ip, r1
   11994:	muleq	r0, ip, r1
   11998:	ldrdeq	r0, [r0], -ip
   1199c:	muleq	r0, ip, r1
   119a0:	muleq	r0, ip, r1
   119a4:	muleq	r0, ip, r1
   119a8:	muleq	r0, ip, r1
   119ac:	muleq	r0, ip, r1
   119b0:	muleq	r0, ip, r1
   119b4:	muleq	r0, ip, r1
   119b8:	muleq	r0, ip, r1
   119bc:	muleq	r0, ip, r1
   119c0:	muleq	r0, ip, r1
   119c4:	muleq	r0, ip, r1
   119c8:	muleq	r0, ip, r1
   119cc:	muleq	r0, ip, r1
   119d0:	muleq	r0, ip, r1
   119d4:	muleq	r0, ip, r1
   119d8:	muleq	r0, ip, r1
   119dc:	muleq	r0, ip, r1
   119e0:	muleq	r0, ip, r1
   119e4:	muleq	r0, ip, r1
   119e8:	muleq	r0, ip, r1
   119ec:	muleq	r0, ip, r1
   119f0:	muleq	r0, ip, r1
   119f4:	muleq	r0, ip, r1
   119f8:	muleq	r0, ip, r1
   119fc:	muleq	r0, ip, r1
   11a00:	muleq	r0, ip, r1
   11a04:	muleq	r0, ip, r1
   11a08:	muleq	r0, ip, r1
   11a0c:	muleq	r0, ip, r1
   11a10:	muleq	r0, ip, r1
   11a14:	muleq	r0, ip, r1
   11a18:	muleq	r0, ip, r1
   11a1c:	muleq	r0, ip, r1
   11a20:	muleq	r0, ip, r1
   11a24:	muleq	r0, ip, r1
   11a28:	muleq	r0, ip, r1
   11a2c:	muleq	r0, ip, r1
   11a30:	muleq	r0, ip, r1
   11a34:	muleq	r0, ip, r1
   11a38:	muleq	r0, ip, r1
   11a3c:	muleq	r0, ip, r1
   11a40:	muleq	r0, ip, r1
   11a44:	muleq	r0, ip, r1
   11a48:	muleq	r0, ip, r1
   11a4c:	muleq	r0, ip, r1
   11a50:	muleq	r0, ip, r1
   11a54:	muleq	r0, ip, r1
   11a58:	muleq	r0, ip, r1
   11a5c:	muleq	r0, ip, r1
   11a60:	muleq	r0, ip, r1
   11a64:	muleq	r0, ip, r1
   11a68:	muleq	r0, ip, r1
   11a6c:	muleq	r0, ip, r1
   11a70:	muleq	r0, ip, r1
   11a74:	muleq	r0, ip, r1
   11a78:	muleq	r0, ip, r1
   11a7c:	muleq	r0, ip, r1
   11a80:	andeq	r0, r0, r4, ror #3
   11a84:	ldr	r0, [pc, #296]	; 11bb4 <main@@Base+0x900>
   11a88:	add	r0, pc, r0
   11a8c:	b	11b14 <main@@Base+0x860>
   11a90:	ldr	r0, [pc, #288]	; 11bb8 <main@@Base+0x904>
   11a94:	add	r0, pc, r0
   11a98:	b	11b14 <main@@Base+0x860>
   11a9c:	ldr	r0, [pc, #288]	; 11bc4 <main@@Base+0x910>
   11aa0:	add	r0, pc, r0
   11aa4:	b	11b14 <main@@Base+0x860>
   11aa8:	ldr	r0, [pc, #272]	; 11bc0 <main@@Base+0x90c>
   11aac:	add	r0, pc, r0
   11ab0:	b	11b14 <main@@Base+0x860>
   11ab4:	ldr	r0, [pc, #256]	; 11bbc <main@@Base+0x908>
   11ab8:	add	r0, pc, r0
   11abc:	b	11b14 <main@@Base+0x860>
   11ac0:	mov	r0, sl
   11ac4:	b	11b14 <main@@Base+0x860>
   11ac8:	bl	10ef8 <__ctype_b_loc@plt>
   11acc:	ldr	r0, [r0]
   11ad0:	add	r0, r0, r9, lsl #1
   11ad4:	ldrb	r0, [r0, #1]
   11ad8:	tst	r0, #64	; 0x40
   11adc:	bne	11b28 <main@@Base+0x874>
   11ae0:	ldr	r0, [pc, #228]	; 11bcc <main@@Base+0x918>
   11ae4:	mov	r1, r9
   11ae8:	add	r0, pc, r0
   11aec:	bl	10e50 <printf@plt>
   11af0:	b	11b18 <main@@Base+0x864>
   11af4:	mov	r0, r7
   11af8:	b	11b14 <main@@Base+0x860>
   11afc:	ldr	r0, [pc, #196]	; 11bc8 <main@@Base+0x914>
   11b00:	add	r0, pc, r0
   11b04:	b	11b14 <main@@Base+0x860>
   11b08:	mov	r0, r6
   11b0c:	b	11b14 <main@@Base+0x860>
   11b10:	mov	r0, r8
   11b14:	bl	10e50 <printf@plt>
   11b18:	add	r4, r4, #1
   11b1c:	subs	r5, r5, #1
   11b20:	bne	11910 <main@@Base+0x65c>
   11b24:	b	11b34 <main@@Base+0x880>
   11b28:	mov	r0, r9
   11b2c:	bl	10f4c <putchar@plt>
   11b30:	b	11b18 <main@@Base+0x864>
   11b34:	mov	r0, #10
   11b38:	bl	10f4c <putchar@plt>
   11b3c:	ldr	r0, [sp]
   11b40:	cmp	r0, #0
   11b44:	beq	11b4c <main@@Base+0x898>
   11b48:	bl	10e74 <free@plt>
   11b4c:	mov	r4, #0
   11b50:	mov	r0, r4
   11b54:	sub	sp, fp, #28
   11b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b5c:	ldr	r0, [pc, #108]	; 11bd0 <main@@Base+0x91c>
   11b60:	ldr	r1, [pc, #108]	; 11bd4 <main@@Base+0x920>
   11b64:	ldr	r3, [pc, #108]	; 11bd8 <main@@Base+0x924>
   11b68:	mov	r2, #230	; 0xe6
   11b6c:	add	r0, pc, r0
   11b70:	add	r1, pc, r1
   11b74:	add	r3, pc, r3
   11b78:	bl	10fe8 <__assert_fail@plt>
   11b7c:	andeq	r1, r1, ip, ror #18
   11b80:	andeq	r1, r1, r0, lsr r9
   11b84:	andeq	r0, r0, r6, asr #18
   11b88:	strdeq	r1, [r1], -ip
   11b8c:	andeq	r0, r0, r5, asr #18
   11b90:	andeq	r1, r1, r8, asr #17
   11b94:	andeq	r0, r0, r9, lsr r9
   11b98:	andeq	r0, r0, ip, asr #17
   11b9c:	andeq	r1, r1, r8, lsl #17
   11ba0:	andeq	r0, r0, pc, lsr #18
   11ba4:	andeq	r0, r0, sl, lsr r9
   11ba8:	andeq	r0, r0, r7, lsr #18
   11bac:	andeq	r0, r0, lr, lsr r9
   11bb0:	andeq	r0, r0, r7, lsr r9
   11bb4:	andeq	r0, r0, r6, lsr #15
   11bb8:	muleq	r0, sp, r7
   11bbc:	andeq	r0, r0, ip, ror r7
   11bc0:	andeq	r0, r0, fp, lsl #15
   11bc4:	muleq	r0, sp, r7
   11bc8:	andeq	r0, r0, r0, asr #14
   11bcc:	andeq	r0, r0, r1, ror #14
   11bd0:	andeq	r0, r0, lr, lsr r6
   11bd4:	andeq	r0, r0, ip, lsr r6
   11bd8:	muleq	r0, r4, r6
   11bdc:	andeq	r0, r0, fp, lsr #17
   11be0:	muleq	r0, lr, r8
   11be4:	push	{fp, lr}
   11be8:	mov	fp, sp
   11bec:	ldr	r0, [pc, #428]	; 11da0 <main@@Base+0xaec>
   11bf0:	add	r0, pc, r0
   11bf4:	bl	10ec8 <puts@plt>
   11bf8:	ldr	r0, [pc, #420]	; 11da4 <main@@Base+0xaf0>
   11bfc:	add	r0, pc, r0
   11c00:	bl	10ec8 <puts@plt>
   11c04:	ldr	r0, [pc, #412]	; 11da8 <main@@Base+0xaf4>
   11c08:	add	r0, pc, r0
   11c0c:	bl	10ec8 <puts@plt>
   11c10:	ldr	r0, [pc, #404]	; 11dac <main@@Base+0xaf8>
   11c14:	add	r0, pc, r0
   11c18:	bl	10ec8 <puts@plt>
   11c1c:	ldr	r0, [pc, #396]	; 11db0 <main@@Base+0xafc>
   11c20:	add	r0, pc, r0
   11c24:	bl	10ec8 <puts@plt>
   11c28:	ldr	r0, [pc, #388]	; 11db4 <main@@Base+0xb00>
   11c2c:	add	r0, pc, r0
   11c30:	bl	10ec8 <puts@plt>
   11c34:	ldr	r0, [pc, #380]	; 11db8 <main@@Base+0xb04>
   11c38:	add	r0, pc, r0
   11c3c:	bl	10ec8 <puts@plt>
   11c40:	mov	r0, #10
   11c44:	bl	10f4c <putchar@plt>
   11c48:	ldr	r0, [pc, #364]	; 11dbc <main@@Base+0xb08>
   11c4c:	add	r0, pc, r0
   11c50:	bl	10ec8 <puts@plt>
   11c54:	ldr	r0, [pc, #356]	; 11dc0 <main@@Base+0xb0c>
   11c58:	add	r0, pc, r0
   11c5c:	bl	10ec8 <puts@plt>
   11c60:	ldr	r0, [pc, #348]	; 11dc4 <main@@Base+0xb10>
   11c64:	add	r0, pc, r0
   11c68:	bl	10ec8 <puts@plt>
   11c6c:	ldr	r0, [pc, #340]	; 11dc8 <main@@Base+0xb14>
   11c70:	add	r0, pc, r0
   11c74:	bl	10ec8 <puts@plt>
   11c78:	ldr	r0, [pc, #332]	; 11dcc <main@@Base+0xb18>
   11c7c:	add	r0, pc, r0
   11c80:	bl	10ec8 <puts@plt>
   11c84:	ldr	r0, [pc, #324]	; 11dd0 <main@@Base+0xb1c>
   11c88:	add	r0, pc, r0
   11c8c:	bl	10ec8 <puts@plt>
   11c90:	ldr	r0, [pc, #316]	; 11dd4 <main@@Base+0xb20>
   11c94:	add	r0, pc, r0
   11c98:	bl	10ec8 <puts@plt>
   11c9c:	ldr	r0, [pc, #308]	; 11dd8 <main@@Base+0xb24>
   11ca0:	add	r0, pc, r0
   11ca4:	bl	10ec8 <puts@plt>
   11ca8:	ldr	r0, [pc, #300]	; 11ddc <main@@Base+0xb28>
   11cac:	add	r0, pc, r0
   11cb0:	bl	10ec8 <puts@plt>
   11cb4:	ldr	r0, [pc, #292]	; 11de0 <main@@Base+0xb2c>
   11cb8:	add	r0, pc, r0
   11cbc:	bl	10ec8 <puts@plt>
   11cc0:	ldr	r0, [pc, #284]	; 11de4 <main@@Base+0xb30>
   11cc4:	add	r0, pc, r0
   11cc8:	bl	10ec8 <puts@plt>
   11ccc:	ldr	r0, [pc, #276]	; 11de8 <main@@Base+0xb34>
   11cd0:	add	r0, pc, r0
   11cd4:	bl	10ec8 <puts@plt>
   11cd8:	mov	r0, #10
   11cdc:	bl	10f4c <putchar@plt>
   11ce0:	ldr	r0, [pc, #260]	; 11dec <main@@Base+0xb38>
   11ce4:	add	r0, pc, r0
   11ce8:	bl	10ec8 <puts@plt>
   11cec:	ldr	r0, [pc, #252]	; 11df0 <main@@Base+0xb3c>
   11cf0:	add	r0, pc, r0
   11cf4:	bl	10ec8 <puts@plt>
   11cf8:	mov	r0, #10
   11cfc:	bl	10f4c <putchar@plt>
   11d00:	ldr	r0, [pc, #236]	; 11df4 <main@@Base+0xb40>
   11d04:	add	r0, pc, r0
   11d08:	bl	10ec8 <puts@plt>
   11d0c:	ldr	r0, [pc, #228]	; 11df8 <main@@Base+0xb44>
   11d10:	add	r0, pc, r0
   11d14:	bl	10ec8 <puts@plt>
   11d18:	mov	r0, #10
   11d1c:	bl	10f4c <putchar@plt>
   11d20:	ldr	r0, [pc, #212]	; 11dfc <main@@Base+0xb48>
   11d24:	add	r0, pc, r0
   11d28:	bl	10ec8 <puts@plt>
   11d2c:	ldr	r0, [pc, #204]	; 11e00 <main@@Base+0xb4c>
   11d30:	add	r0, pc, r0
   11d34:	bl	10ec8 <puts@plt>
   11d38:	mov	r0, #10
   11d3c:	bl	10f4c <putchar@plt>
   11d40:	ldr	r0, [pc, #188]	; 11e04 <main@@Base+0xb50>
   11d44:	add	r0, pc, r0
   11d48:	bl	10ec8 <puts@plt>
   11d4c:	ldr	r0, [pc, #180]	; 11e08 <main@@Base+0xb54>
   11d50:	add	r0, pc, r0
   11d54:	bl	10ec8 <puts@plt>
   11d58:	ldr	r0, [pc, #172]	; 11e0c <main@@Base+0xb58>
   11d5c:	add	r0, pc, r0
   11d60:	bl	10ec8 <puts@plt>
   11d64:	ldr	r0, [pc, #164]	; 11e10 <main@@Base+0xb5c>
   11d68:	add	r0, pc, r0
   11d6c:	bl	10ec8 <puts@plt>
   11d70:	ldr	r0, [pc, #156]	; 11e14 <main@@Base+0xb60>
   11d74:	add	r0, pc, r0
   11d78:	bl	10ec8 <puts@plt>
   11d7c:	ldr	r0, [pc, #148]	; 11e18 <main@@Base+0xb64>
   11d80:	add	r0, pc, r0
   11d84:	bl	10ec8 <puts@plt>
   11d88:	ldr	r0, [pc, #140]	; 11e1c <main@@Base+0xb68>
   11d8c:	add	r0, pc, r0
   11d90:	bl	10ec8 <puts@plt>
   11d94:	mov	r0, #10
   11d98:	pop	{fp, lr}
   11d9c:	b	10f4c <putchar@plt>
   11da0:	andeq	r0, r0, pc, asr r6
   11da4:	andeq	r0, r0, sl, asr r6
   11da8:	muleq	r0, ip, r6
   11dac:	ldrdeq	r0, [r0], -lr
   11db0:	strdeq	r0, [r0], -r6
   11db4:	andeq	r0, r0, r4, lsr r7
   11db8:	andeq	r0, r0, r3, ror r7
   11dbc:	andeq	r0, r0, pc, lsl #15
   11dc0:	muleq	r0, r4, r7
   11dc4:	andeq	r0, r0, r0, lsr #15
   11dc8:	andeq	r0, r0, r4, ror #15
   11dcc:	andeq	r0, r0, r8, lsr #16
   11dd0:	andeq	r0, r0, r2, asr #16
   11dd4:	andeq	r0, r0, r0, ror r8
   11dd8:	andeq	r0, r0, ip, ror r8
   11ddc:			; <UNDEFINED> instruction: 0x000008ba
   11de0:	strdeq	r0, [r0], -r9
   11de4:	andeq	r0, r0, fp, lsl #18
   11de8:	andeq	r0, r0, fp, asr #18
   11dec:	andeq	r0, r0, r6, ror #18
   11df0:	andeq	r0, r0, sl, lsr #19
   11df4:	andeq	r0, r0, sp, lsr #19
   11df8:			; <UNDEFINED> instruction: 0x000009b8
   11dfc:	andeq	r0, r0, r2, asr #19
   11e00:	ldrdeq	r0, [r0], -r1
   11e04:	andeq	r0, r0, pc, ror #19
   11e08:	andeq	r0, r0, sp, lsr #20
   11e0c:	andeq	r0, r0, fp, ror #20
   11e10:	andeq	r0, r0, sp, lsl #21
   11e14:	andeq	r0, r0, sl, asr #21
   11e18:	andeq	r0, r0, r7, lsl #22
   11e1c:	andeq	r0, r0, sl, lsr fp
   11e20:	push	{fp, lr}
   11e24:	mov	fp, sp
   11e28:	bl	10fb8 <coda_get_libcoda_version@plt>
   11e2c:	mov	r1, r0
   11e30:	ldr	r0, [pc, #28]	; 11e54 <main@@Base+0xba0>
   11e34:	add	r0, pc, r0
   11e38:	bl	10e50 <printf@plt>
   11e3c:	ldr	r0, [pc, #20]	; 11e58 <main@@Base+0xba4>
   11e40:	add	r0, pc, r0
   11e44:	bl	10ec8 <puts@plt>
   11e48:	mov	r0, #10
   11e4c:	pop	{fp, lr}
   11e50:	b	10f4c <putchar@plt>
   11e54:			; <UNDEFINED> instruction: 0x000002b1
   11e58:	andeq	r0, r0, r6, asr #21

00011e5c <__libc_csu_init@@Base>:
   11e5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e60:	mov	r7, r0
   11e64:	ldr	r6, [pc, #72]	; 11eb4 <__libc_csu_init@@Base+0x58>
   11e68:	ldr	r5, [pc, #72]	; 11eb8 <__libc_csu_init@@Base+0x5c>
   11e6c:	add	r6, pc, r6
   11e70:	add	r5, pc, r5
   11e74:	sub	r6, r6, r5
   11e78:	mov	r8, r1
   11e7c:	mov	r9, r2
   11e80:	bl	10e0c <coda_match_filefilter@plt-0x20>
   11e84:	asrs	r6, r6, #2
   11e88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e8c:	mov	r4, #0
   11e90:	add	r4, r4, #1
   11e94:	ldr	r3, [r5], #4
   11e98:	mov	r2, r9
   11e9c:	mov	r1, r8
   11ea0:	mov	r0, r7
   11ea4:	blx	r3
   11ea8:	cmp	r6, r4
   11eac:	bne	11e90 <__libc_csu_init@@Base+0x34>
   11eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11eb4:	andeq	r1, r1, r0, lsl #1
   11eb8:	andeq	r1, r1, r8, ror r0

00011ebc <__libc_csu_fini@@Base>:
   11ebc:	bx	lr

Disassembly of section .fini:

00011ec0 <.fini>:
   11ec0:	push	{r3, lr}
   11ec4:	pop	{r3, pc}
