
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010b8c <.init>:
   10b8c:	push	{r3, lr}
   10b90:	bl	111f0 <_start@@Base+0x3c>
   10b94:	pop	{r3, pc}

Disassembly of section .plt:

00010b98 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10b98:	push	{lr}		; (str lr, [sp, #-4]!)
   10b9c:	ldr	lr, [pc, #4]	; 10ba8 <coda_set_option_perform_boundary_checks@plt-0x4>
   10ba0:	add	lr, pc, lr
   10ba4:	ldr	pc, [lr, #8]!
   10ba8:	andeq	r1, r1, r8, asr r4

00010bac <coda_set_option_perform_boundary_checks@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #69632	; 0x11000
   10bb4:	ldr	pc, [ip, #1112]!	; 0x458

00010bb8 <strcmp@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #69632	; 0x11000
   10bc0:	ldr	pc, [ip, #1104]!	; 0x450

00010bc4 <printf@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #69632	; 0x11000
   10bcc:	ldr	pc, [ip, #1096]!	; 0x448

00010bd0 <coda_set_error@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #69632	; 0x11000
   10bd8:	ldr	pc, [ip, #1088]!	; 0x440

00010bdc <coda_open@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #69632	; 0x11000
   10be4:	ldr	pc, [ip, #1080]!	; 0x438

00010be8 <fflush@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #69632	; 0x11000
   10bf0:	ldr	pc, [ip, #1072]!	; 0x430

00010bf4 <coda_set_option_use_mmap@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #69632	; 0x11000
   10bfc:	ldr	pc, [ip, #1064]!	; 0x428

00010c00 <coda_cursor_print_path@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #69632	; 0x11000
   10c08:	ldr	pc, [ip, #1056]!	; 0x420

00010c0c <coda_set_definition_path_conditional@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #69632	; 0x11000
   10c14:	ldr	pc, [ip, #1048]!	; 0x418

00010c18 <coda_set_definition_path@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #69632	; 0x11000
   10c20:	ldr	pc, [ip, #1040]!	; 0x410

00010c24 <coda_recognize_file@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #69632	; 0x11000
   10c2c:	ldr	pc, [ip, #1032]!	; 0x408

00010c30 <fwrite@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #69632	; 0x11000
   10c38:	ldr	pc, [ip, #1024]!	; 0x400

00010c3c <coda_type_get_format_name@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #69632	; 0x11000
   10c44:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c48 <coda_done@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #69632	; 0x11000
   10c50:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c54 <puts@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #69632	; 0x11000
   10c5c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c60 <coda_product_check@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #69632	; 0x11000
   10c68:	ldr	pc, [ip, #992]!	; 0x3e0

00010c6c <__libc_start_main@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #69632	; 0x11000
   10c74:	ldr	pc, [ip, #984]!	; 0x3d8

00010c78 <__gmon_start__@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #69632	; 0x11000
   10c80:	ldr	pc, [ip, #976]!	; 0x3d0

00010c84 <exit@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #69632	; 0x11000
   10c8c:	ldr	pc, [ip, #968]!	; 0x3c8

00010c90 <fprintf@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #69632	; 0x11000
   10c98:	ldr	pc, [ip, #960]!	; 0x3c0

00010c9c <coda_init@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #69632	; 0x11000
   10ca4:	ldr	pc, [ip, #952]!	; 0x3b8

00010ca8 <ungetc@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #69632	; 0x11000
   10cb0:	ldr	pc, [ip, #944]!	; 0x3b0

00010cb4 <coda_set_option_perform_conversions@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #69632	; 0x11000
   10cbc:	ldr	pc, [ip, #936]!	; 0x3a8

00010cc0 <putchar@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #69632	; 0x11000
   10cc8:	ldr	pc, [ip, #928]!	; 0x3a0

00010ccc <coda_close@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #69632	; 0x11000
   10cd4:	ldr	pc, [ip, #920]!	; 0x398

00010cd8 <coda_errno_to_string@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #69632	; 0x11000
   10ce0:	ldr	pc, [ip, #912]!	; 0x390

00010ce4 <coda_get_libcoda_version@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #69632	; 0x11000
   10cec:	ldr	pc, [ip, #904]!	; 0x388

00010cf0 <coda_get_errno@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #69632	; 0x11000
   10cf8:	ldr	pc, [ip, #896]!	; 0x380

00010cfc <abort@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #69632	; 0x11000
   10d04:	ldr	pc, [ip, #888]!	; 0x378

00010d08 <getc@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #69632	; 0x11000
   10d10:	ldr	pc, [ip, #880]!	; 0x370

00010d14 <__assert_fail@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #69632	; 0x11000
   10d1c:	ldr	pc, [ip, #872]!	; 0x368

Disassembly of section .text:

00010d20 <main@@Base>:
   10d20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d24:	mov	r4, #0
   10d28:	movw	r5, #8368	; 0x20b0
   10d2c:	movt	r5, #2
   10d30:	strd	r6, [sp, #8]
   10d34:	movw	r6, #8372	; 0x20b4
   10d38:	movt	r6, #2
   10d3c:	movw	r7, #8360	; 0x20a8
   10d40:	movt	r7, #2
   10d44:	cmp	r0, #1
   10d48:	strd	r8, [sp, #16]
   10d4c:	strd	sl, [sp, #24]
   10d50:	str	lr, [sp, #32]
   10d54:	sub	sp, sp, #1024	; 0x400
   10d58:	sub	sp, sp, #12
   10d5c:	str	r4, [r5]
   10d60:	str	r4, [r6]
   10d64:	str	r4, [r7]
   10d68:	beq	10d90 <main@@Base+0x70>
   10d6c:	mov	sl, r1
   10d70:	mov	r8, r0
   10d74:	ldr	r9, [sl, #4]
   10d78:	movw	r1, #7628	; 0x1dcc
   10d7c:	movt	r1, #1
   10d80:	mov	r0, r9
   10d84:	bl	10bb8 <strcmp@plt>
   10d88:	cmp	r0, r4
   10d8c:	bne	10d9c <main@@Base+0x7c>
   10d90:	bl	112a4 <_start@@Base+0xf0>
   10d94:	mov	r0, #0
   10d98:	bl	10c84 <exit@plt>
   10d9c:	movw	r1, #7632	; 0x1dd0
   10da0:	movt	r1, #1
   10da4:	mov	r0, r9
   10da8:	bl	10bb8 <strcmp@plt>
   10dac:	cmp	r0, r4
   10db0:	beq	10d90 <main@@Base+0x70>
   10db4:	movw	r1, #7640	; 0x1dd8
   10db8:	movt	r1, #1
   10dbc:	mov	r0, r9
   10dc0:	bl	10bb8 <strcmp@plt>
   10dc4:	cmp	r0, #0
   10dc8:	beq	10f3c <main@@Base+0x21c>
   10dcc:	movw	r1, #7644	; 0x1ddc
   10dd0:	movt	r1, #1
   10dd4:	mov	r0, r9
   10dd8:	bl	10bb8 <strcmp@plt>
   10ddc:	cmp	r0, #0
   10de0:	beq	10f3c <main@@Base+0x21c>
   10de4:	cmp	r8, #2
   10de8:	ble	10f6c <main@@Base+0x24c>
   10dec:	mov	r0, r9
   10df0:	movw	r1, #7728	; 0x1e30
   10df4:	movt	r1, #1
   10df8:	bl	10bb8 <strcmp@plt>
   10dfc:	cmp	r0, #0
   10e00:	beq	11038 <main@@Base+0x318>
   10e04:	mov	r1, r4
   10e08:	movw	r2, #7732	; 0x1e34
   10e0c:	movt	r2, #1
   10e10:	ldr	r0, [sl]
   10e14:	bl	10c0c <coda_set_definition_path_conditional@plt>
   10e18:	cmp	r0, #0
   10e1c:	bne	110b4 <main@@Base+0x394>
   10e20:	mov	r4, #1
   10e24:	movw	r1, #7776	; 0x1e60
   10e28:	movt	r1, #1
   10e2c:	add	fp, sl, r4, lsl #2
   10e30:	mov	r3, #1
   10e34:	movw	r2, #6600	; 0x19c8
   10e38:	movt	r2, #1
   10e3c:	str	r1, [sp]
   10e40:	movw	r1, #6456	; 0x1938
   10e44:	movt	r1, #1
   10e48:	str	r1, [sp, #4]
   10e4c:	movw	r1, #7780	; 0x1e64
   10e50:	movt	r1, #1
   10e54:	str	r3, [sp, #8]
   10e58:	movw	r3, #7772	; 0x1e5c
   10e5c:	movt	r3, #1
   10e60:	str	r1, [sp, #12]
   10e64:	movw	r1, #6196	; 0x1834
   10e68:	movt	r1, #1
   10e6c:	str	sl, [sp, #16]
   10e70:	mov	sl, r2
   10e74:	str	r7, [sp, #20]
   10e78:	mov	r7, r3
   10e7c:	str	r1, [sp, #24]
   10e80:	movw	r1, #6696	; 0x1a28
   10e84:	movt	r1, #1
   10e88:	str	r1, [sp, #28]
   10e8c:	b	10f18 <main@@Base+0x1f8>
   10e90:	mov	r1, sl
   10e94:	mov	r0, r9
   10e98:	bl	10bb8 <strcmp@plt>
   10e9c:	cmp	r0, #0
   10ea0:	beq	10f30 <main@@Base+0x210>
   10ea4:	mov	r0, r9
   10ea8:	ldr	r1, [sp]
   10eac:	bl	10bb8 <strcmp@plt>
   10eb0:	cmp	r0, #0
   10eb4:	beq	11014 <main@@Base+0x2f4>
   10eb8:	mov	r0, r9
   10ebc:	ldr	r1, [sp, #4]
   10ec0:	bl	10bb8 <strcmp@plt>
   10ec4:	cmp	r0, #0
   10ec8:	beq	11014 <main@@Base+0x2f4>
   10ecc:	mov	r0, r9
   10ed0:	ldr	r1, [sp, #12]
   10ed4:	bl	10bb8 <strcmp@plt>
   10ed8:	cmp	r0, #0
   10edc:	beq	11028 <main@@Base+0x308>
   10ee0:	mov	r0, r9
   10ee4:	ldr	r1, [sp, #24]
   10ee8:	bl	10bb8 <strcmp@plt>
   10eec:	cmp	r0, #0
   10ef0:	beq	11028 <main@@Base+0x308>
   10ef4:	mov	r0, r9
   10ef8:	ldr	r1, [sp, #28]
   10efc:	bl	10bb8 <strcmp@plt>
   10f00:	cmp	r0, #0
   10f04:	bne	11048 <main@@Base+0x328>
   10f08:	str	r0, [sp, #8]
   10f0c:	add	r4, r4, #1
   10f10:	cmp	r8, r4
   10f14:	ble	11020 <main@@Base+0x300>
   10f18:	ldr	r9, [fp], #4
   10f1c:	mov	r1, r7
   10f20:	mov	r0, r9
   10f24:	bl	10bb8 <strcmp@plt>
   10f28:	cmp	r0, #0
   10f2c:	bne	10e90 <main@@Base+0x170>
   10f30:	mov	r3, #1
   10f34:	str	r3, [r5]
   10f38:	b	10f0c <main@@Base+0x1ec>
   10f3c:	bl	10ce4 <coda_get_libcoda_version@plt>
   10f40:	mov	r1, r0
   10f44:	movw	r0, #7656	; 0x1de8
   10f48:	movt	r0, #1
   10f4c:	bl	10bc4 <printf@plt>
   10f50:	movw	r0, #7680	; 0x1e00
   10f54:	movt	r0, #1
   10f58:	bl	10c54 <puts@plt>
   10f5c:	mov	r0, #10
   10f60:	bl	10cc0 <putchar@plt>
   10f64:	mov	r0, #0
   10f68:	bl	10c84 <exit@plt>
   10f6c:	mov	r1, r4
   10f70:	movw	r2, #7732	; 0x1e34
   10f74:	movt	r2, #1
   10f78:	ldr	r0, [sl]
   10f7c:	bl	10c0c <coda_set_definition_path_conditional@plt>
   10f80:	cmp	r0, #0
   10f84:	moveq	r4, #1
   10f88:	bne	110b4 <main@@Base+0x394>
   10f8c:	cmp	r8, r4
   10f90:	movle	r3, #1
   10f94:	strle	r3, [sp, #8]
   10f98:	bgt	10e24 <main@@Base+0x104>
   10f9c:	bl	10c9c <coda_init@plt>
   10fa0:	subs	r5, r0, #0
   10fa4:	bne	110b4 <main@@Base+0x394>
   10fa8:	bl	10bac <coda_set_option_perform_boundary_checks@plt>
   10fac:	mov	r0, r5
   10fb0:	bl	10cb4 <coda_set_option_perform_conversions@plt>
   10fb4:	ldr	r0, [sp, #8]
   10fb8:	bl	10bf4 <coda_set_option_use_mmap@plt>
   10fbc:	b	10fd4 <main@@Base+0x2b4>
   10fc0:	ldr	r0, [sl, r4, lsl #2]
   10fc4:	add	r4, r4, #1
   10fc8:	bl	11430 <_start@@Base+0x27c>
   10fcc:	mov	r0, #0
   10fd0:	bl	10be8 <fflush@plt>
   10fd4:	cmp	r4, r8
   10fd8:	blt	10fc0 <main@@Base+0x2a0>
   10fdc:	bl	10c48 <coda_done@plt>
   10fe0:	movw	r3, #8364	; 0x20ac
   10fe4:	movt	r3, #2
   10fe8:	ldr	r0, [r3]
   10fec:	cmp	r0, #0
   10ff0:	bne	110e8 <main@@Base+0x3c8>
   10ff4:	add	sp, sp, #1024	; 0x400
   10ff8:	add	sp, sp, #12
   10ffc:	ldrd	r4, [sp]
   11000:	ldrd	r6, [sp, #8]
   11004:	ldrd	r8, [sp, #16]
   11008:	ldrd	sl, [sp, #24]
   1100c:	add	sp, sp, #32
   11010:	pop	{pc}		; (ldr pc, [sp], #4)
   11014:	mov	r3, #1
   11018:	str	r3, [r6]
   1101c:	b	10f0c <main@@Base+0x1ec>
   11020:	ldr	sl, [sp, #16]
   11024:	b	10f9c <main@@Base+0x27c>
   11028:	ldr	r3, [sp, #20]
   1102c:	mov	r2, #1
   11030:	str	r2, [r3]
   11034:	b	10f0c <main@@Base+0x1ec>
   11038:	ldr	r0, [sl, #8]
   1103c:	mov	r4, #3
   11040:	bl	10c18 <coda_set_definition_path@plt>
   11044:	b	10f8c <main@@Base+0x26c>
   11048:	movw	r1, #7784	; 0x1e68
   1104c:	movt	r1, #1
   11050:	mov	r0, r9
   11054:	bl	10bb8 <strcmp@plt>
   11058:	cmp	r0, #0
   1105c:	ldr	sl, [sp, #16]
   11060:	bne	11070 <main@@Base+0x350>
   11064:	sub	r3, r8, #1
   11068:	cmp	r3, r4
   1106c:	beq	110a8 <main@@Base+0x388>
   11070:	ldrb	r3, [r9]
   11074:	cmp	r3, #45	; 0x2d
   11078:	bne	10f9c <main@@Base+0x27c>
   1107c:	movw	r3, #8344	; 0x2098
   11080:	movt	r3, #2
   11084:	mov	r2, #25
   11088:	mov	r1, #1
   1108c:	ldr	r3, [r3]
   11090:	movw	r0, #7788	; 0x1e6c
   11094:	movt	r0, #1
   11098:	bl	10c30 <fwrite@plt>
   1109c:	bl	112a4 <_start@@Base+0xf0>
   110a0:	mov	r0, #1
   110a4:	bl	10c84 <exit@plt>
   110a8:	bl	10c9c <coda_init@plt>
   110ac:	cmp	r0, #0
   110b0:	beq	110f0 <main@@Base+0x3d0>
   110b4:	movw	r3, #8344	; 0x2098
   110b8:	movt	r3, #2
   110bc:	ldr	r4, [r3]
   110c0:	bl	10cf0 <coda_get_errno@plt>
   110c4:	ldr	r0, [r0]
   110c8:	bl	10cd8 <coda_errno_to_string@plt>
   110cc:	mov	r2, r0
   110d0:	movw	r1, #7760	; 0x1e50
   110d4:	movt	r1, #1
   110d8:	mov	r0, r4
   110dc:	bl	10c90 <fprintf@plt>
   110e0:	mov	r0, #1
   110e4:	bl	10c84 <exit@plt>
   110e8:	mov	r0, #1
   110ec:	bl	10c84 <exit@plt>
   110f0:	mov	r0, #0
   110f4:	movw	r5, #8352	; 0x20a0
   110f8:	movt	r5, #2
   110fc:	bl	10bac <coda_set_option_perform_boundary_checks@plt>
   11100:	mov	r0, #0
   11104:	mov	r6, r0
   11108:	bl	10cb4 <coda_set_option_perform_conversions@plt>
   1110c:	ldr	r0, [sp, #8]
   11110:	bl	10bf4 <coda_set_option_use_mmap@plt>
   11114:	mov	r4, #0
   11118:	b	11138 <main@@Base+0x418>
   1111c:	cmp	r0, #10
   11120:	beq	11168 <main@@Base+0x448>
   11124:	add	r3, sp, #32
   11128:	strb	r0, [r3, r4]
   1112c:	add	r4, r4, #1
   11130:	cmp	r4, #1000	; 0x3e8
   11134:	beq	11194 <main@@Base+0x474>
   11138:	ldr	r0, [r5]
   1113c:	bl	10d08 <getc@plt>
   11140:	uxtb	r0, r0
   11144:	cmp	r0, #13
   11148:	bne	1111c <main@@Base+0x3fc>
   1114c:	ldr	r0, [r5]
   11150:	bl	10d08 <getc@plt>
   11154:	uxtb	r0, r0
   11158:	cmp	r0, #10
   1115c:	beq	11168 <main@@Base+0x448>
   11160:	ldr	r1, [r5]
   11164:	bl	10ca8 <ungetc@plt>
   11168:	add	r3, sp, #1024	; 0x400
   1116c:	cmp	r4, #0
   11170:	add	r3, r3, #8
   11174:	add	r3, r3, r4
   11178:	strb	r6, [r3, #-1000]	; 0xfffffc18
   1117c:	beq	11114 <main@@Base+0x3f4>
   11180:	add	r0, sp, #32
   11184:	bl	11430 <_start@@Base+0x27c>
   11188:	mov	r0, #0
   1118c:	bl	10be8 <fflush@plt>
   11190:	b	11114 <main@@Base+0x3f4>
   11194:	movw	r3, #6016	; 0x1780
   11198:	movt	r3, #1
   1119c:	movw	r1, #7816	; 0x1e88
   111a0:	movt	r1, #1
   111a4:	movw	r0, #7888	; 0x1ed0
   111a8:	movt	r0, #1
   111ac:	mov	r2, #316	; 0x13c
   111b0:	bl	10d14 <__assert_fail@plt>

000111b4 <_start@@Base>:
   111b4:	mov	fp, #0
   111b8:	mov	lr, #0
   111bc:	pop	{r1}		; (ldr r1, [sp], #4)
   111c0:	mov	r2, sp
   111c4:	push	{r2}		; (str r2, [sp, #-4]!)
   111c8:	push	{r0}		; (str r0, [sp, #-4]!)
   111cc:	ldr	ip, [pc, #16]	; 111e4 <_start@@Base+0x30>
   111d0:	push	{ip}		; (str ip, [sp, #-4]!)
   111d4:	ldr	r0, [pc, #12]	; 111e8 <_start@@Base+0x34>
   111d8:	ldr	r3, [pc, #12]	; 111ec <_start@@Base+0x38>
   111dc:	bl	10c6c <__libc_start_main@plt>
   111e0:	bl	10cfc <abort@plt>
   111e4:	andeq	r1, r1, r0, ror r7
   111e8:	andeq	r0, r1, r0, lsr #26
   111ec:	andeq	r1, r1, r0, lsl r7
   111f0:	ldr	r3, [pc, #20]	; 1120c <_start@@Base+0x58>
   111f4:	ldr	r2, [pc, #20]	; 11210 <_start@@Base+0x5c>
   111f8:	add	r3, pc, r3
   111fc:	ldr	r2, [r3, r2]
   11200:	cmp	r2, #0
   11204:	bxeq	lr
   11208:	b	10c78 <__gmon_start__@plt>
   1120c:	andeq	r0, r1, r0, lsl #28
   11210:	andeq	r0, r0, r8, lsl #1
   11214:	ldr	r0, [pc, #24]	; 11234 <_start@@Base+0x80>
   11218:	ldr	r3, [pc, #24]	; 11238 <_start@@Base+0x84>
   1121c:	cmp	r3, r0
   11220:	bxeq	lr
   11224:	ldr	r3, [pc, #16]	; 1123c <_start@@Base+0x88>
   11228:	cmp	r3, #0
   1122c:	bxeq	lr
   11230:	bx	r3
   11234:	muleq	r2, r4, r0
   11238:	muleq	r2, r4, r0
   1123c:	andeq	r0, r0, r0
   11240:	ldr	r0, [pc, #36]	; 1126c <_start@@Base+0xb8>
   11244:	ldr	r1, [pc, #36]	; 11270 <_start@@Base+0xbc>
   11248:	sub	r1, r1, r0
   1124c:	asr	r1, r1, #2
   11250:	add	r1, r1, r1, lsr #31
   11254:	asrs	r1, r1, #1
   11258:	bxeq	lr
   1125c:	ldr	r3, [pc, #16]	; 11274 <_start@@Base+0xc0>
   11260:	cmp	r3, #0
   11264:	bxeq	lr
   11268:	bx	r3
   1126c:	muleq	r2, r4, r0
   11270:	muleq	r2, r4, r0
   11274:	andeq	r0, r0, r0
   11278:	push	{r4, lr}
   1127c:	ldr	r4, [pc, #24]	; 1129c <_start@@Base+0xe8>
   11280:	ldrb	r3, [r4]
   11284:	cmp	r3, #0
   11288:	popne	{r4, pc}
   1128c:	bl	11214 <_start@@Base+0x60>
   11290:	mov	r3, #1
   11294:	strb	r3, [r4]
   11298:	pop	{r4, pc}
   1129c:	andeq	r2, r2, r4, lsr #1
   112a0:	b	11240 <_start@@Base+0x8c>
   112a4:	movw	r0, #6024	; 0x1788
   112a8:	movt	r0, #1
   112ac:	str	r4, [sp, #-8]!
   112b0:	str	lr, [sp, #4]
   112b4:	bl	10c54 <puts@plt>
   112b8:	movw	r0, #6032	; 0x1790
   112bc:	movt	r0, #1
   112c0:	bl	10c54 <puts@plt>
   112c4:	movw	r0, #6088	; 0x17c8
   112c8:	movt	r0, #1
   112cc:	bl	10c54 <puts@plt>
   112d0:	movw	r0, #6160	; 0x1810
   112d4:	movt	r0, #1
   112d8:	bl	10c54 <puts@plt>
   112dc:	movw	r0, #6180	; 0x1824
   112e0:	movt	r0, #1
   112e4:	bl	10c54 <puts@plt>
   112e8:	movw	r0, #6212	; 0x1844
   112ec:	movt	r0, #1
   112f0:	bl	10c54 <puts@plt>
   112f4:	movw	r0, #6292	; 0x1894
   112f8:	movt	r0, #1
   112fc:	bl	10c54 <puts@plt>
   11300:	movw	r0, #6364	; 0x18dc
   11304:	movt	r0, #1
   11308:	bl	10c54 <puts@plt>
   1130c:	movw	r0, #6440	; 0x1928
   11310:	movt	r0, #1
   11314:	bl	10c54 <puts@plt>
   11318:	movw	r0, #6464	; 0x1940
   1131c:	movt	r0, #1
   11320:	bl	10c54 <puts@plt>
   11324:	movw	r0, #6528	; 0x1980
   11328:	movt	r0, #1
   1132c:	bl	10c54 <puts@plt>
   11330:	movw	r0, #6584	; 0x19b8
   11334:	movt	r0, #1
   11338:	bl	10c54 <puts@plt>
   1133c:	movw	r0, #6612	; 0x19d4
   11340:	movt	r0, #1
   11344:	bl	10c54 <puts@plt>
   11348:	movw	r0, #6684	; 0x1a1c
   1134c:	movt	r0, #1
   11350:	bl	10c54 <puts@plt>
   11354:	movw	r0, #6708	; 0x1a34
   11358:	movt	r0, #1
   1135c:	bl	10c54 <puts@plt>
   11360:	mov	r0, #10
   11364:	bl	10cc0 <putchar@plt>
   11368:	movw	r0, #6772	; 0x1a74
   1136c:	movt	r0, #1
   11370:	bl	10c54 <puts@plt>
   11374:	movw	r0, #6852	; 0x1ac4
   11378:	movt	r0, #1
   1137c:	bl	10c54 <puts@plt>
   11380:	mov	r0, #10
   11384:	bl	10cc0 <putchar@plt>
   11388:	movw	r0, #6880	; 0x1ae0
   1138c:	movt	r0, #1
   11390:	bl	10c54 <puts@plt>
   11394:	movw	r0, #6908	; 0x1afc
   11398:	movt	r0, #1
   1139c:	bl	10c54 <puts@plt>
   113a0:	mov	r0, #10
   113a4:	bl	10cc0 <putchar@plt>
   113a8:	movw	r0, #6940	; 0x1b1c
   113ac:	movt	r0, #1
   113b0:	bl	10c54 <puts@plt>
   113b4:	movw	r0, #6968	; 0x1b38
   113b8:	movt	r0, #1
   113bc:	bl	10c54 <puts@plt>
   113c0:	mov	r0, #10
   113c4:	bl	10cc0 <putchar@plt>
   113c8:	movw	r0, #7020	; 0x1b6c
   113cc:	movt	r0, #1
   113d0:	bl	10c54 <puts@plt>
   113d4:	movw	r0, #7100	; 0x1bbc
   113d8:	movt	r0, #1
   113dc:	bl	10c54 <puts@plt>
   113e0:	movw	r0, #7176	; 0x1c08
   113e4:	movt	r0, #1
   113e8:	bl	10c54 <puts@plt>
   113ec:	movw	r0, #7220	; 0x1c34
   113f0:	movt	r0, #1
   113f4:	bl	10c54 <puts@plt>
   113f8:	movw	r0, #7296	; 0x1c80
   113fc:	movt	r0, #1
   11400:	bl	10c54 <puts@plt>
   11404:	movw	r0, #7368	; 0x1cc8
   11408:	movt	r0, #1
   1140c:	bl	10c54 <puts@plt>
   11410:	movw	r0, #7432	; 0x1d08
   11414:	movt	r0, #1
   11418:	bl	10c54 <puts@plt>
   1141c:	mov	r0, #10
   11420:	ldr	r4, [sp]
   11424:	ldr	lr, [sp, #4]
   11428:	add	sp, sp, #8
   1142c:	b	10cc0 <putchar@plt>
   11430:	str	r4, [sp, #-8]!
   11434:	mov	r4, r0
   11438:	str	lr, [sp, #4]
   1143c:	sub	sp, sp, #40	; 0x28
   11440:	bl	10c54 <puts@plt>
   11444:	add	ip, sp, #28
   11448:	add	r2, sp, #24
   1144c:	mov	r0, r4
   11450:	add	r3, sp, #20
   11454:	add	r1, sp, #32
   11458:	stm	sp, {r2, ip}
   1145c:	add	r2, sp, #16
   11460:	bl	10c24 <coda_recognize_file@plt>
   11464:	cmp	r0, #0
   11468:	bne	115b0 <_start@@Base+0x3fc>
   1146c:	movw	r3, #8360	; 0x20a8
   11470:	movt	r3, #2
   11474:	ldr	r3, [r3]
   11478:	cmp	r3, #0
   1147c:	beq	11498 <_start@@Base+0x2e4>
   11480:	ldr	r3, [sp, #20]
   11484:	cmp	r3, #0
   11488:	beq	11614 <_start@@Base+0x460>
   1148c:	ldr	r3, [sp, #24]
   11490:	cmp	r3, #0
   11494:	beq	11614 <_start@@Base+0x460>
   11498:	movw	r3, #8368	; 0x20b0
   1149c:	movt	r3, #2
   114a0:	ldr	r3, [r3]
   114a4:	cmp	r3, #0
   114a8:	bne	11564 <_start@@Base+0x3b0>
   114ac:	mov	r0, r4
   114b0:	add	r1, sp, #12
   114b4:	bl	10bdc <coda_open@plt>
   114b8:	cmp	r0, #0
   114bc:	bne	11518 <_start@@Base+0x364>
   114c0:	movw	r3, #8372	; 0x20b4
   114c4:	movt	r3, #2
   114c8:	ldr	r0, [sp, #12]
   114cc:	movw	r2, #5808	; 0x16b0
   114d0:	movt	r2, #1
   114d4:	ldr	r1, [r3]
   114d8:	mov	r3, #0
   114dc:	clz	r1, r1
   114e0:	lsr	r1, r1, #5
   114e4:	bl	10c60 <coda_product_check@plt>
   114e8:	cmp	r0, #0
   114ec:	bne	1166c <_start@@Base+0x4b8>
   114f0:	ldr	r0, [sp, #12]
   114f4:	bl	10ccc <coda_close@plt>
   114f8:	cmp	r0, #0
   114fc:	bne	115f8 <_start@@Base+0x444>
   11500:	mov	r0, #10
   11504:	bl	10cc0 <putchar@plt>
   11508:	add	sp, sp, #40	; 0x28
   1150c:	ldr	r4, [sp]
   11510:	add	sp, sp, #4
   11514:	pop	{pc}		; (ldr pc, [sp], #4)
   11518:	bl	10cf0 <coda_get_errno@plt>
   1151c:	ldr	r3, [r0]
   11520:	cmn	r3, #21
   11524:	beq	11640 <_start@@Base+0x48c>
   11528:	bl	10cf0 <coda_get_errno@plt>
   1152c:	ldr	r0, [r0]
   11530:	bl	10cd8 <coda_errno_to_string@plt>
   11534:	mov	r1, r0
   11538:	movw	r0, #7496	; 0x1d48
   1153c:	movt	r0, #1
   11540:	bl	10bc4 <printf@plt>
   11544:	mov	r2, #1
   11548:	movw	r3, #8364	; 0x20ac
   1154c:	movt	r3, #2
   11550:	str	r2, [r3]
   11554:	add	sp, sp, #40	; 0x28
   11558:	ldr	r4, [sp]
   1155c:	add	sp, sp, #4
   11560:	pop	{pc}		; (ldr pc, [sp], #4)
   11564:	ldr	r0, [sp, #16]
   11568:	bl	10c3c <coda_type_get_format_name@plt>
   1156c:	mov	r1, r0
   11570:	movw	r0, #7556	; 0x1d84
   11574:	movt	r0, #1
   11578:	bl	10bc4 <printf@plt>
   1157c:	ldr	r1, [sp, #20]
   11580:	cmp	r1, #0
   11584:	beq	115a4 <_start@@Base+0x3f0>
   11588:	ldr	r2, [sp, #24]
   1158c:	cmp	r2, #0
   11590:	beq	115a4 <_start@@Base+0x3f0>
   11594:	movw	r0, #7580	; 0x1d9c
   11598:	movt	r0, #1
   1159c:	ldr	r3, [sp, #28]
   115a0:	bl	10bc4 <printf@plt>
   115a4:	mov	r0, #10
   115a8:	bl	10cc0 <putchar@plt>
   115ac:	b	114ac <_start@@Base+0x2f8>
   115b0:	bl	10cf0 <coda_get_errno@plt>
   115b4:	ldr	r0, [r0]
   115b8:	bl	10cd8 <coda_errno_to_string@plt>
   115bc:	mov	r1, r0
   115c0:	movw	r0, #7496	; 0x1d48
   115c4:	movt	r0, #1
   115c8:	bl	10bc4 <printf@plt>
   115cc:	mov	r1, #0
   115d0:	mov	r0, r1
   115d4:	bl	10bd0 <coda_set_error@plt>
   115d8:	mov	r2, #1
   115dc:	movw	r3, #8364	; 0x20ac
   115e0:	movt	r3, #2
   115e4:	str	r2, [r3]
   115e8:	add	sp, sp, #40	; 0x28
   115ec:	ldr	r4, [sp]
   115f0:	add	sp, sp, #4
   115f4:	pop	{pc}		; (ldr pc, [sp], #4)
   115f8:	bl	10cf0 <coda_get_errno@plt>
   115fc:	ldr	r0, [r0]
   11600:	bl	10cd8 <coda_errno_to_string@plt>
   11604:	mov	r1, r0
   11608:	movw	r0, #7592	; 0x1da8
   1160c:	movt	r0, #1
   11610:	b	11540 <_start@@Base+0x38c>
   11614:	movw	r0, #7512	; 0x1d58
   11618:	movt	r0, #1
   1161c:	bl	10c54 <puts@plt>
   11620:	mov	r2, #1
   11624:	movw	r3, #8364	; 0x20ac
   11628:	movt	r3, #2
   1162c:	str	r2, [r3]
   11630:	add	sp, sp, #40	; 0x28
   11634:	ldr	r4, [sp]
   11638:	add	sp, sp, #4
   1163c:	pop	{pc}		; (ldr pc, [sp], #4)
   11640:	mov	r0, #0
   11644:	bl	10bf4 <coda_set_option_use_mmap@plt>
   11648:	add	r1, sp, #12
   1164c:	mov	r0, r4
   11650:	bl	10bdc <coda_open@plt>
   11654:	mov	r4, r0
   11658:	mov	r0, #1
   1165c:	bl	10bf4 <coda_set_option_use_mmap@plt>
   11660:	cmp	r4, #0
   11664:	bne	11528 <_start@@Base+0x374>
   11668:	b	114c0 <_start@@Base+0x30c>
   1166c:	bl	10cf0 <coda_get_errno@plt>
   11670:	ldr	r0, [r0]
   11674:	bl	10cd8 <coda_errno_to_string@plt>
   11678:	mov	r1, r0
   1167c:	movw	r0, #7496	; 0x1d48
   11680:	movt	r0, #1
   11684:	bl	10bc4 <printf@plt>
   11688:	mov	r2, #1
   1168c:	movw	r3, #8364	; 0x20ac
   11690:	movt	r3, #2
   11694:	ldr	r0, [sp, #12]
   11698:	str	r2, [r3]
   1169c:	bl	10ccc <coda_close@plt>
   116a0:	add	sp, sp, #40	; 0x28
   116a4:	ldr	r4, [sp]
   116a8:	add	sp, sp, #4
   116ac:	pop	{pc}		; (ldr pc, [sp], #4)
   116b0:	str	r4, [sp, #-8]!
   116b4:	mov	r4, r0
   116b8:	movw	r0, #7608	; 0x1db8
   116bc:	movt	r0, #1
   116c0:	str	lr, [sp, #4]
   116c4:	bl	10bc4 <printf@plt>
   116c8:	cmp	r4, #0
   116cc:	beq	116ec <_start@@Base+0x538>
   116d0:	movw	r0, #7620	; 0x1dc4
   116d4:	movt	r0, #1
   116d8:	bl	10bc4 <printf@plt>
   116dc:	movw	r1, #3012	; 0xbc4
   116e0:	movt	r1, #1
   116e4:	mov	r0, r4
   116e8:	bl	10c00 <coda_cursor_print_path@plt>
   116ec:	mov	r0, #10
   116f0:	bl	10cc0 <putchar@plt>
   116f4:	movw	r3, #8364	; 0x20ac
   116f8:	movt	r3, #2
   116fc:	ldr	r4, [sp]
   11700:	mov	r2, #1
   11704:	add	sp, sp, #4
   11708:	str	r2, [r3]
   1170c:	pop	{pc}		; (ldr pc, [sp], #4)

00011710 <__libc_csu_init@@Base>:
   11710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11714:	mov	r7, r0
   11718:	ldr	r6, [pc, #72]	; 11768 <__libc_csu_init@@Base+0x58>
   1171c:	ldr	r5, [pc, #72]	; 1176c <__libc_csu_init@@Base+0x5c>
   11720:	add	r6, pc, r6
   11724:	add	r5, pc, r5
   11728:	sub	r6, r6, r5
   1172c:	mov	r8, r1
   11730:	mov	r9, r2
   11734:	bl	10b8c <coda_set_option_perform_boundary_checks@plt-0x20>
   11738:	asrs	r6, r6, #2
   1173c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11740:	mov	r4, #0
   11744:	add	r4, r4, #1
   11748:	ldr	r3, [r5], #4
   1174c:	mov	r2, r9
   11750:	mov	r1, r8
   11754:	mov	r0, r7
   11758:	blx	r3
   1175c:	cmp	r6, r4
   11760:	bne	11744 <__libc_csu_init@@Base+0x34>
   11764:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11768:	ldrdeq	r0, [r1], -r4
   1176c:	andeq	r0, r1, ip, asr #15

00011770 <__libc_csu_fini@@Base>:
   11770:	bx	lr

Disassembly of section .fini:

00011774 <.fini>:
   11774:	push	{r3, lr}
   11778:	pop	{r3, pc}
