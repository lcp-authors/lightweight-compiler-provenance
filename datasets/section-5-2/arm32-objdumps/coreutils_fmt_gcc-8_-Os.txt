
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010cb4 <.init>:
   10cb4:	push	{r3, lr}
   10cb8:	bl	11448 <__assert_fail@plt+0x504>
   10cbc:	pop	{r3, pc}

Disassembly of section .plt:

00010cc0 <calloc@plt-0x14>:
   10cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc4:	ldr	lr, [pc, #4]	; 10cd0 <calloc@plt-0x4>
   10cc8:	add	lr, pc, lr
   10ccc:	ldr	pc, [lr, #8]!
   10cd0:	andeq	r5, r1, r0, lsr r3

00010cd4 <calloc@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #816]!	; 0x330

00010ce0 <fputs_unlocked@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #808]!	; 0x328

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #800]!	; 0x320

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #792]!	; 0x318

00010d04 <fflush@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #784]!	; 0x310

00010d10 <__memmove_chk@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #776]!	; 0x308

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #768]!	; 0x300

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #760]!	; 0x2f8

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d40 <mbsinit@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #744]!	; 0x2e8

00010d4c <fwrite_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #736]!	; 0x2e0

00010d58 <memcmp@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #728]!	; 0x2d8

00010d64 <fputc_unlocked@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d70 <getc_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #712]!	; 0x2c8

00010d7c <dcgettext@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #704]!	; 0x2c0

00010d88 <realloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #696]!	; 0x2b8

00010d94 <textdomain@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #688]!	; 0x2b0

00010da0 <iswprint@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dac <lseek64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #672]!	; 0x2a0

00010db8 <__ctype_get_mb_cur_max@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #664]!	; 0x298

00010dc4 <__fpending@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #656]!	; 0x290

00010dd0 <ferror_unlocked@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #648]!	; 0x288

00010ddc <mbrtowc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #640]!	; 0x280

00010de8 <error@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #632]!	; 0x278

00010df4 <malloc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #624]!	; 0x270

00010e00 <__libc_start_main@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #616]!	; 0x268

00010e0c <__freading@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #608]!	; 0x260

00010e18 <__gmon_start__@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #600]!	; 0x258

00010e24 <getopt_long@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #592]!	; 0x250

00010e30 <__ctype_b_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #584]!	; 0x248

00010e3c <exit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #576]!	; 0x240

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #568]!	; 0x238

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #560]!	; 0x230

00010e60 <__errno_location@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #552]!	; 0x228

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #544]!	; 0x220

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #536]!	; 0x218

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #528]!	; 0x210

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #520]!	; 0x208

00010e9c <strtoumax@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #512]!	; 0x200

00010ea8 <__fprintf_chk@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #504]!	; 0x1f8

00010eb4 <fclose@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #496]!	; 0x1f0

00010ec0 <fseeko64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #488]!	; 0x1e8

00010ecc <setlocale@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #480]!	; 0x1e0

00010ed8 <strrchr@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #472]!	; 0x1d8

00010ee4 <nl_langinfo@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #464]!	; 0x1d0

00010ef0 <clearerr_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #456]!	; 0x1c8

00010efc <fopen64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #448]!	; 0x1c0

00010f08 <bindtextdomain@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #440]!	; 0x1b8

00010f14 <fputs@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #432]!	; 0x1b0

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #424]!	; 0x1a8

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #416]!	; 0x1a0

00010f38 <putchar_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #408]!	; 0x198

00010f44 <__assert_fail@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #400]!	; 0x190

Disassembly of section .text:

00010f50 <.text>:
   10f50:	push	{r4, lr}
   10f54:	bl	10e60 <__errno_location@plt>
   10f58:	mov	r3, #12
   10f5c:	str	r3, [r0]
   10f60:	mov	r0, #0
   10f64:	pop	{r4, pc}
   10f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f6c:	mov	r6, r0
   10f70:	sub	sp, sp, #36	; 0x24
   10f74:	mov	r5, r1
   10f78:	mov	r7, #0
   10f7c:	ldr	r9, [pc, #1072]	; 113b4 <__assert_fail@plt+0x470>
   10f80:	ldr	r0, [r1]
   10f84:	bl	12634 <__assert_fail@plt+0x16f0>
   10f88:	mov	r0, #6
   10f8c:	ldr	r4, [pc, #1060]	; 113b8 <__assert_fail@plt+0x474>
   10f90:	mov	r1, r9
   10f94:	bl	10ecc <setlocale@plt>
   10f98:	ldr	r1, [pc, #1052]	; 113bc <__assert_fail@plt+0x478>
   10f9c:	ldr	r0, [pc, #1052]	; 113c0 <__assert_fail@plt+0x47c>
   10fa0:	bl	10f08 <bindtextdomain@plt>
   10fa4:	ldr	r0, [pc, #1044]	; 113c0 <__assert_fail@plt+0x47c>
   10fa8:	bl	10d94 <textdomain@plt>
   10fac:	ldr	r0, [pc, #1040]	; 113c4 <__assert_fail@plt+0x480>
   10fb0:	bl	14d04 <__assert_fail@plt+0x3dc0>
   10fb4:	mov	r3, #75	; 0x4b
   10fb8:	cmp	r6, #1
   10fbc:	str	r7, [r4, #8]
   10fc0:	str	r3, [r4, #20]
   10fc4:	str	r7, [r4, #44]	; 0x2c
   10fc8:	str	r7, [r4, #48]	; 0x30
   10fcc:	str	r9, [r4, #52]	; 0x34
   10fd0:	strb	r7, [r4, #64]	; 0x40
   10fd4:	strb	r7, [r4, #65]	; 0x41
   10fd8:	strb	r7, [r4, #66]	; 0x42
   10fdc:	strb	r7, [r4, #67]	; 0x43
   10fe0:	ble	11014 <__assert_fail@plt+0xd0>
   10fe4:	ldr	r3, [r5, #4]
   10fe8:	ldrb	r2, [r3]
   10fec:	cmp	r2, #45	; 0x2d
   10ff0:	bne	11014 <__assert_fail@plt+0xd0>
   10ff4:	ldrb	r2, [r3, #1]
   10ff8:	sub	r2, r2, #48	; 0x30
   10ffc:	cmp	r2, #9
   11000:	bhi	11014 <__assert_fail@plt+0xd0>
   11004:	add	r7, r3, #1
   11008:	ldr	r3, [r5]
   1100c:	sub	r6, r6, #1
   11010:	str	r3, [r5, #4]!
   11014:	mov	sl, #0
   11018:	ldr	fp, [pc, #936]	; 113c8 <__assert_fail@plt+0x484>
   1101c:	b	110d4 <__assert_fail@plt+0x190>
   11020:	cmp	r3, #112	; 0x70
   11024:	beq	11210 <__assert_fail@plt+0x2cc>
   11028:	bgt	11094 <__assert_fail@plt+0x150>
   1102c:	cmn	r3, #2
   11030:	beq	11284 <__assert_fail@plt+0x340>
   11034:	bgt	1107c <__assert_fail@plt+0x138>
   11038:	cmn	r3, #3
   1103c:	beq	1128c <__assert_fail@plt+0x348>
   11040:	sub	r2, r3, #48	; 0x30
   11044:	cmp	r2, #9
   11048:	bhi	11074 <__assert_fail@plt+0x130>
   1104c:	mov	r2, #5
   11050:	ldr	r1, [pc, #884]	; 113cc <__assert_fail@plt+0x488>
   11054:	mov	r0, #0
   11058:	str	r3, [sp, #28]
   1105c:	bl	10d7c <dcgettext@plt>
   11060:	mov	r1, #0
   11064:	mov	r2, r0
   11068:	ldr	r3, [sp, #28]
   1106c:	mov	r0, r1
   11070:	bl	10de8 <error@plt>
   11074:	mov	r0, #1
   11078:	bl	120ec <__assert_fail@plt+0x11a8>
   1107c:	cmp	r3, #99	; 0x63
   11080:	beq	110cc <__assert_fail@plt+0x188>
   11084:	cmp	r3, #103	; 0x67
   11088:	bne	11040 <__assert_fail@plt+0xfc>
   1108c:	ldr	sl, [fp]
   11090:	b	110d4 <__assert_fail@plt+0x190>
   11094:	cmp	r3, #116	; 0x74
   11098:	beq	111f8 <__assert_fail@plt+0x2b4>
   1109c:	bgt	110b4 <__assert_fail@plt+0x170>
   110a0:	cmp	r3, #115	; 0x73
   110a4:	bne	11040 <__assert_fail@plt+0xfc>
   110a8:	mov	r3, #1
   110ac:	strb	r3, [r4, #64]	; 0x40
   110b0:	b	110d4 <__assert_fail@plt+0x190>
   110b4:	cmp	r3, #117	; 0x75
   110b8:	beq	11204 <__assert_fail@plt+0x2c0>
   110bc:	cmp	r3, #119	; 0x77
   110c0:	bne	11040 <__assert_fail@plt+0xfc>
   110c4:	ldr	r7, [fp]
   110c8:	b	110d4 <__assert_fail@plt+0x190>
   110cc:	mov	r3, #1
   110d0:	strb	r3, [r4, #65]	; 0x41
   110d4:	mov	r8, #0
   110d8:	ldr	r3, [pc, #752]	; 113d0 <__assert_fail@plt+0x48c>
   110dc:	mov	r1, r5
   110e0:	mov	r0, r6
   110e4:	ldr	r2, [pc, #744]	; 113d4 <__assert_fail@plt+0x490>
   110e8:	str	r8, [sp]
   110ec:	bl	10e24 <getopt_long@plt>
   110f0:	cmn	r0, #1
   110f4:	mov	r3, r0
   110f8:	bne	11020 <__assert_fail@plt+0xdc>
   110fc:	cmp	r7, r8
   11100:	beq	11140 <__assert_fail@plt+0x1fc>
   11104:	mov	r2, #5
   11108:	ldr	r1, [pc, #712]	; 113d8 <__assert_fail@plt+0x494>
   1110c:	mov	r0, r8
   11110:	bl	10d7c <dcgettext@plt>
   11114:	movw	r2, #2500	; 0x9c4
   11118:	mov	r3, #0
   1111c:	strd	r2, [sp]
   11120:	mov	r2, #0
   11124:	mov	r3, #0
   11128:	str	r9, [sp, #8]
   1112c:	str	r0, [sp, #12]
   11130:	mov	r0, r7
   11134:	str	r8, [sp, #16]
   11138:	bl	14534 <__assert_fail@plt+0x35f0>
   1113c:	str	r0, [r4, #20]
   11140:	cmp	sl, #0
   11144:	ldr	r8, [r4, #20]
   11148:	beq	112b8 <__assert_fail@plt+0x374>
   1114c:	mov	r2, #5
   11150:	ldr	r1, [pc, #640]	; 113d8 <__assert_fail@plt+0x494>
   11154:	mov	r0, #0
   11158:	bl	10d7c <dcgettext@plt>
   1115c:	str	r9, [sp, #8]
   11160:	asr	r9, r8, #31
   11164:	mov	r3, #0
   11168:	mov	r2, #0
   1116c:	strd	r8, [sp]
   11170:	str	r0, [sp, #12]
   11174:	mov	r0, sl
   11178:	str	r3, [sp, #16]
   1117c:	mov	r3, #0
   11180:	bl	14534 <__assert_fail@plt+0x35f0>
   11184:	cmp	r7, #0
   11188:	str	r0, [r4, #32]
   1118c:	addeq	r0, r0, #10
   11190:	streq	r0, [r4, #20]
   11194:	ldr	r7, [pc, #576]	; 113dc <__assert_fail@plt+0x498>
   11198:	ldr	r3, [r7]
   1119c:	cmp	r3, r6
   111a0:	bne	113a4 <__assert_fail@plt+0x460>
   111a4:	ldr	r3, [pc, #564]	; 113e0 <__assert_fail@plt+0x49c>
   111a8:	ldr	r1, [pc, #564]	; 113e4 <__assert_fail@plt+0x4a0>
   111ac:	ldr	r0, [r3]
   111b0:	bl	11d88 <__assert_fail@plt+0xe44>
   111b4:	mov	r4, r0
   111b8:	ldr	r3, [pc, #544]	; 113e0 <__assert_fail@plt+0x49c>
   111bc:	ldr	r0, [r3]
   111c0:	bl	124a4 <__assert_fail@plt+0x1560>
   111c4:	cmp	r0, #0
   111c8:	beq	11324 <__assert_fail@plt+0x3e0>
   111cc:	bl	10e60 <__errno_location@plt>
   111d0:	ldr	r4, [r0]
   111d4:	mov	r2, #5
   111d8:	mov	r0, #0
   111dc:	ldr	r1, [pc, #516]	; 113e8 <__assert_fail@plt+0x4a4>
   111e0:	bl	10d7c <dcgettext@plt>
   111e4:	mov	r3, r0
   111e8:	ldr	r2, [pc, #508]	; 113ec <__assert_fail@plt+0x4a8>
   111ec:	mov	r0, #1
   111f0:	mov	r1, r4
   111f4:	bl	10de8 <error@plt>
   111f8:	mov	r3, #1
   111fc:	strb	r3, [r4, #66]	; 0x42
   11200:	b	110d4 <__assert_fail@plt+0x190>
   11204:	mov	r3, #1
   11208:	strb	r3, [r4, #67]	; 0x43
   1120c:	b	110d4 <__assert_fail@plt+0x190>
   11210:	ldr	r1, [fp]
   11214:	mov	r2, r8
   11218:	str	r8, [r4, #48]	; 0x30
   1121c:	mov	r3, r1
   11220:	mov	r8, r3
   11224:	sub	r0, r3, r1
   11228:	ldrb	ip, [r3], #1
   1122c:	cmp	ip, #32
   11230:	beq	1127c <__assert_fail@plt+0x338>
   11234:	cmp	r2, #0
   11238:	str	r8, [r4, #52]	; 0x34
   1123c:	strne	r0, [r4, #48]	; 0x30
   11240:	mov	r0, r8
   11244:	bl	10e48 <strlen@plt>
   11248:	str	r0, [r4, #8]
   1124c:	add	r0, r8, r0
   11250:	cmp	r8, r0
   11254:	mov	r3, r0
   11258:	bcs	11268 <__assert_fail@plt+0x324>
   1125c:	ldrb	r2, [r0, #-1]!
   11260:	cmp	r2, #32
   11264:	beq	11250 <__assert_fail@plt+0x30c>
   11268:	mov	r2, #0
   1126c:	sub	r8, r3, r8
   11270:	strb	r2, [r3]
   11274:	str	r8, [r4, #44]	; 0x2c
   11278:	b	110d4 <__assert_fail@plt+0x190>
   1127c:	mov	r2, #1
   11280:	b	11220 <__assert_fail@plt+0x2dc>
   11284:	mov	r0, r8
   11288:	b	11078 <__assert_fail@plt+0x134>
   1128c:	ldr	r3, [pc, #348]	; 113f0 <__assert_fail@plt+0x4ac>
   11290:	ldr	r0, [pc, #348]	; 113f4 <__assert_fail@plt+0x4b0>
   11294:	ldr	r2, [pc, #348]	; 113f8 <__assert_fail@plt+0x4b4>
   11298:	stm	sp, {r3, r8}
   1129c:	ldr	r3, [pc, #344]	; 113fc <__assert_fail@plt+0x4b8>
   112a0:	ldr	r1, [pc, #344]	; 11400 <__assert_fail@plt+0x4bc>
   112a4:	ldr	r0, [r0]
   112a8:	ldr	r3, [r3]
   112ac:	bl	14080 <__assert_fail@plt+0x313c>
   112b0:	mov	r0, r8
   112b4:	bl	10e3c <exit@plt>
   112b8:	mov	r3, #187	; 0xbb
   112bc:	mov	r2, #200	; 0xc8
   112c0:	mul	r3, r3, r8
   112c4:	sdiv	r3, r3, r2
   112c8:	str	r3, [r4, #32]
   112cc:	b	11194 <__assert_fail@plt+0x250>
   112d0:	ldr	sl, [r5, r3, lsl #2]
   112d4:	ldr	r1, [pc, #264]	; 113e4 <__assert_fail@plt+0x4a0>
   112d8:	mov	r0, sl
   112dc:	bl	10cec <strcmp@plt>
   112e0:	cmp	r0, #0
   112e4:	bne	11334 <__assert_fail@plt+0x3f0>
   112e8:	ldr	r3, [pc, #240]	; 113e0 <__assert_fail@plt+0x49c>
   112ec:	mov	r1, sl
   112f0:	mov	r9, #1
   112f4:	ldr	r0, [r3]
   112f8:	bl	11d88 <__assert_fail@plt+0xe44>
   112fc:	and	r4, r4, r0
   11300:	uxtb	r4, r4
   11304:	ldr	r3, [r7]
   11308:	add	r3, r3, #1
   1130c:	str	r3, [r7]
   11310:	ldr	r3, [r7]
   11314:	cmp	r3, r6
   11318:	blt	112d0 <__assert_fail@plt+0x38c>
   1131c:	cmp	r9, #0
   11320:	bne	111b8 <__assert_fail@plt+0x274>
   11324:	eor	r0, r4, #1
   11328:	uxtb	r0, r0
   1132c:	add	sp, sp, #36	; 0x24
   11330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11334:	ldr	r1, [pc, #200]	; 11404 <__assert_fail@plt+0x4c0>
   11338:	mov	r0, sl
   1133c:	bl	10efc <fopen64@plt>
   11340:	subs	r8, r0, #0
   11344:	beq	1135c <__assert_fail@plt+0x418>
   11348:	mov	r1, sl
   1134c:	bl	11d88 <__assert_fail@plt+0xe44>
   11350:	and	r4, r4, r0
   11354:	uxtb	r4, r4
   11358:	b	11304 <__assert_fail@plt+0x3c0>
   1135c:	bl	10e60 <__errno_location@plt>
   11360:	mov	r1, fp
   11364:	mov	r2, #5
   11368:	ldr	r4, [r0]
   1136c:	mov	r0, r8
   11370:	bl	10d7c <dcgettext@plt>
   11374:	mov	r2, r0
   11378:	mov	r1, sl
   1137c:	mov	r0, #4
   11380:	str	r2, [sp, #28]
   11384:	bl	13a50 <__assert_fail@plt+0x2b0c>
   11388:	mov	r3, r0
   1138c:	mov	r1, r4
   11390:	ldr	r2, [sp, #28]
   11394:	mov	r0, r8
   11398:	mov	r4, r8
   1139c:	bl	10de8 <error@plt>
   113a0:	b	11304 <__assert_fail@plt+0x3c0>
   113a4:	mov	r9, #0
   113a8:	mov	r4, #1
   113ac:	ldr	fp, [pc, #84]	; 11408 <__assert_fail@plt+0x4c4>
   113b0:	b	11310 <__assert_fail@plt+0x3cc>
   113b4:	andeq	r5, r1, fp, lsl r3
   113b8:	andeq	r6, r2, r0, ror #2
   113bc:	andeq	r5, r1, ip, lsl r3
   113c0:	andeq	r5, r1, r9, ror r2
   113c4:	muleq	r1, ip, r3
   113c8:	andeq	r6, r2, r8, asr r1
   113cc:	andeq	r5, r1, r4, lsr r3
   113d0:	andeq	r4, r1, r0, ror sp
   113d4:	andeq	r5, r1, r0, lsr #7
   113d8:			; <UNDEFINED> instruction: 0x000153b5
   113dc:	andeq	r6, r2, r0, asr #2
   113e0:	andeq	r6, r2, r0, asr r1
   113e4:	andeq	r5, r1, sl, lsl #10
   113e8:	ldrdeq	r5, [r1], -lr
   113ec:	andeq	r5, r1, r5, asr #9
   113f0:	muleq	r1, r2, r3
   113f4:	andeq	r6, r2, r4, asr r1
   113f8:	andeq	r5, r1, r5, ror r2
   113fc:	andeq	r6, r2, ip, ror #1
   11400:	andeq	r4, r1, r6, asr #28
   11404:	andeq	r4, r1, r4, asr #28
   11408:	andeq	r5, r1, r3, asr #7
   1140c:	mov	fp, #0
   11410:	mov	lr, #0
   11414:	pop	{r1}		; (ldr r1, [sp], #4)
   11418:	mov	r2, sp
   1141c:	push	{r2}		; (str r2, [sp, #-4]!)
   11420:	push	{r0}		; (str r0, [sp, #-4]!)
   11424:	ldr	ip, [pc, #16]	; 1143c <__assert_fail@plt+0x4f8>
   11428:	push	{ip}		; (str ip, [sp, #-4]!)
   1142c:	ldr	r0, [pc, #12]	; 11440 <__assert_fail@plt+0x4fc>
   11430:	ldr	r3, [pc, #12]	; 11444 <__assert_fail@plt+0x500>
   11434:	bl	10e00 <__libc_start_main@plt>
   11438:	bl	10f2c <abort@plt>
   1143c:	andeq	r4, r1, r0, lsl #26
   11440:	andeq	r0, r1, r8, ror #30
   11444:	andeq	r4, r1, r0, lsr #25
   11448:	ldr	r3, [pc, #20]	; 11464 <__assert_fail@plt+0x520>
   1144c:	ldr	r2, [pc, #20]	; 11468 <__assert_fail@plt+0x524>
   11450:	add	r3, pc, r3
   11454:	ldr	r2, [r3, r2]
   11458:	cmp	r2, #0
   1145c:	bxeq	lr
   11460:	b	10e18 <__gmon_start__@plt>
   11464:	andeq	r4, r1, r8, lsr #23
   11468:	andeq	r0, r0, r0, ror #1
   1146c:	ldr	r0, [pc, #24]	; 1148c <__assert_fail@plt+0x548>
   11470:	ldr	r3, [pc, #24]	; 11490 <__assert_fail@plt+0x54c>
   11474:	cmp	r3, r0
   11478:	bxeq	lr
   1147c:	ldr	r3, [pc, #16]	; 11494 <__assert_fail@plt+0x550>
   11480:	cmp	r3, #0
   11484:	bxeq	lr
   11488:	bx	r3
   1148c:	andeq	r6, r2, r4, lsr r1
   11490:	andeq	r6, r2, r4, lsr r1
   11494:	andeq	r0, r0, r0
   11498:	ldr	r0, [pc, #36]	; 114c4 <__assert_fail@plt+0x580>
   1149c:	ldr	r1, [pc, #36]	; 114c8 <__assert_fail@plt+0x584>
   114a0:	sub	r1, r1, r0
   114a4:	asr	r1, r1, #2
   114a8:	add	r1, r1, r1, lsr #31
   114ac:	asrs	r1, r1, #1
   114b0:	bxeq	lr
   114b4:	ldr	r3, [pc, #16]	; 114cc <__assert_fail@plt+0x588>
   114b8:	cmp	r3, #0
   114bc:	bxeq	lr
   114c0:	bx	r3
   114c4:	andeq	r6, r2, r4, lsr r1
   114c8:	andeq	r6, r2, r4, lsr r1
   114cc:	andeq	r0, r0, r0
   114d0:	push	{r4, lr}
   114d4:	ldr	r4, [pc, #24]	; 114f4 <__assert_fail@plt+0x5b0>
   114d8:	ldrb	r3, [r4]
   114dc:	cmp	r3, #0
   114e0:	popne	{r4, pc}
   114e4:	bl	1146c <__assert_fail@plt+0x528>
   114e8:	mov	r3, #1
   114ec:	strb	r3, [r4]
   114f0:	pop	{r4, pc}
   114f4:	andeq	r6, r2, ip, asr r1
   114f8:	b	11498 <__assert_fail@plt+0x554>
   114fc:	ldr	r2, [pc, #60]	; 11540 <__assert_fail@plt+0x5fc>
   11500:	ldr	r3, [r2]
   11504:	ldr	r1, [r2, #4]
   11508:	cmp	r3, r1
   1150c:	bne	11538 <__assert_fail@plt+0x5f4>
   11510:	ldr	r1, [r2, #8]
   11514:	ldr	r2, [r2, #12]
   11518:	add	r3, r3, r1
   1151c:	cmp	r3, r2
   11520:	bgt	11538 <__assert_fail@plt+0x5f4>
   11524:	cmp	r0, #10
   11528:	cmnne	r0, #1
   1152c:	movne	r0, #1
   11530:	moveq	r0, #0
   11534:	bx	lr
   11538:	mov	r0, #0
   1153c:	bx	lr
   11540:	andeq	r6, r2, r0, ror #2
   11544:	ldr	r2, [pc, #428]	; 116f8 <__assert_fail@plt+0x7b4>
   11548:	mov	r3, #0
   1154c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11550:	sub	sp, sp, #20
   11554:	mov	r7, #100	; 0x64
   11558:	ldr	r5, [pc, #412]	; 116fc <__assert_fail@plt+0x7b8>
   1155c:	ldr	ip, [r2, #16]
   11560:	ldr	r1, [r2, #24]
   11564:	add	sl, r5, #28
   11568:	ldr	fp, [pc, #400]	; 11700 <__assert_fail@plt+0x7bc>
   1156c:	str	r3, [ip, #20]
   11570:	ldr	r3, [ip, #4]
   11574:	ldr	r8, [r2, #20]
   11578:	ldr	r9, [r2, #36]	; 0x24
   1157c:	str	r1, [sp, #8]
   11580:	ldr	r1, [r2, #28]
   11584:	str	r3, [sp]
   11588:	sub	r3, ip, #28
   1158c:	str	r8, [ip, #4]
   11590:	str	r1, [sp, #4]
   11594:	ldr	r1, [r2, #32]
   11598:	str	r1, [sp, #12]
   1159c:	cmp	r3, r5
   115a0:	bcs	115b4 <__assert_fail@plt+0x670>
   115a4:	ldr	r3, [sp]
   115a8:	str	r3, [ip, #4]
   115ac:	add	sp, sp, #20
   115b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b4:	ldrne	r2, [sp, #8]
   115b8:	mov	r1, r3
   115bc:	mvn	r4, #-2147483648	; 0x80000000
   115c0:	ldreq	r2, [sp, #4]
   115c4:	ldr	r6, [r3, #4]
   115c8:	add	r2, r6, r2
   115cc:	add	r1, r1, #28
   115d0:	cmp	ip, r1
   115d4:	moveq	r0, #0
   115d8:	beq	1160c <__assert_fail@plt+0x6c8>
   115dc:	ldr	r0, [sp, #12]
   115e0:	ldr	lr, [r1, #24]
   115e4:	sub	r0, r0, r2
   115e8:	mul	r0, r0, r0
   115ec:	cmp	ip, lr
   115f0:	mul	r0, r7, r0
   115f4:	beq	1160c <__assert_fail@plt+0x6c8>
   115f8:	ldr	lr, [r1, #16]
   115fc:	sub	lr, r2, lr
   11600:	mul	lr, lr, lr
   11604:	mul	lr, r7, lr
   11608:	add	r0, r0, lr, asr #1
   1160c:	ldr	lr, [r1, #20]
   11610:	cmp	r3, r5
   11614:	add	r0, r0, lr
   11618:	bne	11630 <__assert_fail@plt+0x6ec>
   1161c:	cmp	r9, #0
   11620:	subgt	lr, r2, r9
   11624:	mulgt	lr, lr, lr
   11628:	mulgt	lr, r7, lr
   1162c:	addgt	r0, r0, lr, asr #1
   11630:	cmp	r0, r4
   11634:	movlt	r4, r0
   11638:	strlt	r2, [r3, #16]
   1163c:	strlt	r1, [r3, #24]
   11640:	cmp	ip, r1
   11644:	beq	11660 <__assert_fail@plt+0x71c>
   11648:	ldr	r0, [r1, #-20]	; 0xffffffec
   1164c:	ldr	lr, [r1, #4]
   11650:	add	r0, r0, lr
   11654:	add	r2, r2, r0
   11658:	cmp	r8, r2
   1165c:	bgt	115cc <__assert_fail@plt+0x688>
   11660:	cmp	r3, r5
   11664:	bls	116f0 <__assert_fail@plt+0x7ac>
   11668:	ldrb	r2, [r3, #-16]
   1166c:	tst	r2, #2
   11670:	beq	116b4 <__assert_fail@plt+0x770>
   11674:	tst	r2, #8
   11678:	movne	r2, #2400	; 0x960
   1167c:	moveq	r2, fp
   11680:	ldrb	r1, [r3, #12]
   11684:	tst	r1, #1
   11688:	subne	r2, r2, #1600	; 0x640
   1168c:	bne	116a4 <__assert_fail@plt+0x760>
   11690:	tst	r1, #8
   11694:	addne	r6, r6, #2
   11698:	movwne	r1, #22500	; 0x57e4
   1169c:	sdivne	r6, r1, r6
   116a0:	addne	r2, r2, r6
   116a4:	add	r4, r4, r2
   116a8:	sub	r3, r3, #28
   116ac:	str	r4, [r3, #48]	; 0x30
   116b0:	b	1159c <__assert_fail@plt+0x658>
   116b4:	tst	r2, #4
   116b8:	movwne	r2, #3300	; 0xce4
   116bc:	bne	11680 <__assert_fail@plt+0x73c>
   116c0:	cmp	r3, sl
   116c4:	bls	116f0 <__assert_fail@plt+0x7ac>
   116c8:	ldrb	r2, [r3, #-44]	; 0xffffffd4
   116cc:	tst	r2, #8
   116d0:	beq	116f0 <__assert_fail@plt+0x7ac>
   116d4:	ldr	r1, [r3, #-24]	; 0xffffffe8
   116d8:	movw	r2, #40000	; 0x9c40
   116dc:	add	r1, r1, #2
   116e0:	sdiv	r2, r2, r1
   116e4:	add	r2, r2, #4864	; 0x1300
   116e8:	add	r2, r2, #36	; 0x24
   116ec:	b	11680 <__assert_fail@plt+0x73c>
   116f0:	movw	r2, #4900	; 0x1324
   116f4:	b	11680 <__assert_fail@plt+0x73c>
   116f8:	andeq	r6, r2, r0, ror #2
   116fc:	andeq	r6, r2, r8, lsr #3
   11700:	andeq	r9, r5, r4, ror #2
   11704:	push	{r4, r5, r6, lr}
   11708:	mov	r5, r0
   1170c:	mov	r6, #1
   11710:	mov	r0, r1
   11714:	ldr	r4, [pc, #64]	; 1175c <__assert_fail@plt+0x818>
   11718:	cmp	r0, #32
   1171c:	ldreq	r3, [r4, #12]
   11720:	addeq	r3, r3, #1
   11724:	beq	1174c <__assert_fail@plt+0x808>
   11728:	cmp	r0, #9
   1172c:	popne	{r4, r5, r6, pc}
   11730:	strb	r6, [r4, #40]	; 0x28
   11734:	ldr	r3, [r4, #12]
   11738:	add	r2, r3, #7
   1173c:	cmp	r3, #0
   11740:	movlt	r3, r2
   11744:	bic	r3, r3, #7
   11748:	add	r3, r3, #8
   1174c:	mov	r0, r5
   11750:	str	r3, [r4, #12]
   11754:	bl	10d70 <getc_unlocked@plt>
   11758:	b	11718 <__assert_fail@plt+0x7d4>
   1175c:	andeq	r6, r2, r0, ror #2
   11760:	push	{r4, r5, r6, lr}
   11764:	mov	r3, #0
   11768:	mov	r6, r0
   1176c:	ldr	r4, [pc, #132]	; 117f8 <__assert_fail@plt+0x8b4>
   11770:	str	r3, [r4, #12]
   11774:	bl	10d70 <getc_unlocked@plt>
   11778:	mov	r1, r0
   1177c:	mov	r0, r6
   11780:	bl	11704 <__assert_fail@plt+0x7c0>
   11784:	ldr	r3, [r4, #44]	; 0x2c
   11788:	cmp	r3, #0
   1178c:	bne	117a8 <__assert_fail@plt+0x864>
   11790:	ldr	r2, [r4, #12]
   11794:	ldr	r3, [r4, #48]	; 0x30
   11798:	cmp	r2, r3
   1179c:	strle	r2, [r4]
   117a0:	strgt	r3, [r4]
   117a4:	pop	{r4, r5, r6, pc}
   117a8:	mov	r5, r4
   117ac:	ldr	r3, [r4, #12]
   117b0:	ldr	r4, [r4, #52]	; 0x34
   117b4:	str	r3, [r5]
   117b8:	sub	r4, r4, #1
   117bc:	ldrb	r3, [r4, #1]!
   117c0:	cmp	r3, #0
   117c4:	bne	117d8 <__assert_fail@plt+0x894>
   117c8:	mov	r1, r0
   117cc:	mov	r0, r6
   117d0:	pop	{r4, r5, r6, lr}
   117d4:	b	11704 <__assert_fail@plt+0x7c0>
   117d8:	cmp	r3, r0
   117dc:	popne	{r4, r5, r6, pc}
   117e0:	mov	r0, r6
   117e4:	ldr	r3, [r5, #12]
   117e8:	add	r3, r3, #1
   117ec:	str	r3, [r5, #12]
   117f0:	bl	10d70 <getc_unlocked@plt>
   117f4:	b	117bc <__assert_fail@plt+0x878>
   117f8:	andeq	r6, r2, r0, ror #2
   117fc:	push	{r4, r5, r6, lr}
   11800:	ldr	r4, [pc, #132]	; 1188c <__assert_fail@plt+0x948>
   11804:	ldrb	r2, [r4, #40]	; 0x28
   11808:	ldr	r3, [r4, #56]	; 0x38
   1180c:	cmp	r2, #0
   11810:	add	r6, r3, r0
   11814:	beq	11834 <__assert_fail@plt+0x8f0>
   11818:	cmp	r6, #0
   1181c:	add	r5, r6, #7
   11820:	movge	r5, r6
   11824:	add	r3, r3, #1
   11828:	bic	r5, r5, #7
   1182c:	cmp	r3, r5
   11830:	blt	1187c <__assert_fail@plt+0x938>
   11834:	ldr	r3, [r4, #56]	; 0x38
   11838:	cmp	r3, r6
   1183c:	popge	{r4, r5, r6, pc}
   11840:	mov	r0, #32
   11844:	bl	10f38 <putchar_unlocked@plt>
   11848:	ldr	r3, [r4, #56]	; 0x38
   1184c:	add	r3, r3, #1
   11850:	str	r3, [r4, #56]	; 0x38
   11854:	b	11834 <__assert_fail@plt+0x8f0>
   11858:	mov	r0, #9
   1185c:	bl	10f38 <putchar_unlocked@plt>
   11860:	ldr	r3, [r4, #56]	; 0x38
   11864:	add	r2, r3, #7
   11868:	cmp	r3, #0
   1186c:	movlt	r3, r2
   11870:	bic	r3, r3, #7
   11874:	add	r3, r3, #8
   11878:	str	r3, [r4, #56]	; 0x38
   1187c:	ldr	r3, [r4, #56]	; 0x38
   11880:	cmp	r3, r5
   11884:	blt	11858 <__assert_fail@plt+0x914>
   11888:	b	11834 <__assert_fail@plt+0x8f0>
   1188c:	andeq	r6, r2, r0, ror #2
   11890:	push	{r4, r5, r6, lr}
   11894:	mov	r5, r0
   11898:	ldm	r0, {r4, r6}
   1189c:	add	r6, r4, r6
   118a0:	cmp	r4, r6
   118a4:	bne	118c0 <__assert_fail@plt+0x97c>
   118a8:	ldr	r2, [pc, #28]	; 118cc <__assert_fail@plt+0x988>
   118ac:	ldr	r3, [r5, #4]
   118b0:	ldr	r1, [r2, #56]	; 0x38
   118b4:	add	r3, r3, r1
   118b8:	str	r3, [r2, #56]	; 0x38
   118bc:	pop	{r4, r5, r6, pc}
   118c0:	ldrb	r0, [r4], #1
   118c4:	bl	10f38 <putchar_unlocked@plt>
   118c8:	b	118a0 <__assert_fail@plt+0x95c>
   118cc:	andeq	r6, r2, r0, ror #2
   118d0:	push	{r4, r5, r6, r7, r8, lr}
   118d4:	mov	r3, #0
   118d8:	mov	r6, r0
   118dc:	mov	r7, r0
   118e0:	mov	r4, r1
   118e4:	ldr	r5, [pc, #144]	; 1197c <__assert_fail@plt+0xa38>
   118e8:	ldr	r0, [r5, #4]
   118ec:	str	r3, [r5, #56]	; 0x38
   118f0:	bl	117fc <__assert_fail@plt+0x8b8>
   118f4:	ldr	r3, [pc, #132]	; 11980 <__assert_fail@plt+0xa3c>
   118f8:	ldr	r0, [r5, #52]	; 0x34
   118fc:	ldr	r1, [r3]
   11900:	bl	10ce0 <fputs_unlocked@plt>
   11904:	ldr	r3, [r5, #44]	; 0x2c
   11908:	ldr	r0, [r5, #56]	; 0x38
   1190c:	add	r0, r0, r3
   11910:	str	r0, [r5, #56]	; 0x38
   11914:	sub	r0, r4, r0
   11918:	bl	117fc <__assert_fail@plt+0x8b8>
   1191c:	ldr	r4, [r6, #24]
   11920:	sub	r8, r4, #28
   11924:	cmp	r7, r8
   11928:	bne	11964 <__assert_fail@plt+0xa20>
   1192c:	sub	r4, r4, r6
   11930:	ldr	r0, [pc, #76]	; 11984 <__assert_fail@plt+0xa40>
   11934:	sub	r4, r4, #28
   11938:	lsr	r4, r4, #2
   1193c:	mul	r4, r0, r4
   11940:	mov	r0, #28
   11944:	bic	r4, r4, #-1073741824	; 0xc0000000
   11948:	mla	r0, r0, r4, r6
   1194c:	bl	11890 <__assert_fail@plt+0x94c>
   11950:	ldr	r3, [r5, #56]	; 0x38
   11954:	mov	r0, #10
   11958:	str	r3, [r5, #36]	; 0x24
   1195c:	pop	{r4, r5, r6, r7, r8, lr}
   11960:	b	10f38 <putchar_unlocked@plt>
   11964:	mov	r0, r7
   11968:	add	r7, r7, #28
   1196c:	bl	11890 <__assert_fail@plt+0x94c>
   11970:	ldr	r0, [r7, #-20]	; 0xffffffec
   11974:	bl	117fc <__assert_fail@plt+0x8b8>
   11978:	b	11924 <__assert_fail@plt+0x9e0>
   1197c:	andeq	r6, r2, r0, ror #2
   11980:	andeq	r6, r2, r4, asr r1
   11984:			; <UNDEFINED> instruction: 0x36db6db7
   11988:	push	{r4, r5, r6, lr}
   1198c:	mov	r6, r0
   11990:	ldr	r5, [pc, #32]	; 119b8 <__assert_fail@plt+0xa74>
   11994:	ldr	r4, [pc, #32]	; 119bc <__assert_fail@plt+0xa78>
   11998:	ldr	r1, [r5, #28]
   1199c:	mov	r0, r4
   119a0:	bl	118d0 <__assert_fail@plt+0x98c>
   119a4:	ldr	r4, [r4, #24]
   119a8:	cmp	r4, r6
   119ac:	popeq	{r4, r5, r6, pc}
   119b0:	ldr	r1, [r5, #24]
   119b4:	b	1199c <__assert_fail@plt+0xa58>
   119b8:	andeq	r6, r2, r0, ror #2
   119bc:	andeq	r6, r2, r8, lsr #3
   119c0:	push	{r4, r5, r6, r7, r8, lr}
   119c4:	ldr	r5, [pc, #264]	; 11ad4 <__assert_fail@plt+0xb90>
   119c8:	ldr	r4, [pc, #264]	; 11ad8 <__assert_fail@plt+0xb94>
   119cc:	ldr	r8, [r5, #16]
   119d0:	cmp	r8, r4
   119d4:	bne	11a00 <__assert_fail@plt+0xabc>
   119d8:	ldr	r4, [pc, #252]	; 11adc <__assert_fail@plt+0xb98>
   119dc:	mov	r1, #1
   119e0:	ldr	r3, [pc, #248]	; 11ae0 <__assert_fail@plt+0xb9c>
   119e4:	ldr	r2, [r5, #60]	; 0x3c
   119e8:	mov	r0, r4
   119ec:	ldr	r3, [r3]
   119f0:	sub	r2, r2, r4
   119f4:	bl	10d4c <fwrite_unlocked@plt>
   119f8:	str	r4, [r5, #60]	; 0x3c
   119fc:	pop	{r4, r5, r6, r7, r8, pc}
   11a00:	mov	r6, r4
   11a04:	mov	r7, r5
   11a08:	bl	11544 <__assert_fail@plt+0x600>
   11a0c:	ldr	r3, [r6, #24]
   11a10:	mov	r4, r8
   11a14:	mvn	r2, #-2147483648	; 0x80000000
   11a18:	cmp	r8, r3
   11a1c:	bne	11a94 <__assert_fail@plt+0xb50>
   11a20:	mov	r0, r4
   11a24:	ldr	r5, [pc, #176]	; 11adc <__assert_fail@plt+0xb98>
   11a28:	bl	11988 <__assert_fail@plt+0xa44>
   11a2c:	ldr	r1, [r4]
   11a30:	movw	r3, #5000	; 0x1388
   11a34:	ldr	r8, [r7, #60]	; 0x3c
   11a38:	mov	r0, r5
   11a3c:	sub	r2, r8, r1
   11a40:	bl	10d10 <__memmove_chk@plt>
   11a44:	ldr	r3, [r4]
   11a48:	mov	r2, r4
   11a4c:	sub	r3, r5, r3
   11a50:	ldr	r5, [r7, #16]
   11a54:	add	r8, r8, r3
   11a58:	str	r8, [r7, #60]	; 0x3c
   11a5c:	cmp	r5, r2
   11a60:	add	r1, r2, #28
   11a64:	bcs	11ac0 <__assert_fail@plt+0xb7c>
   11a68:	sub	r2, r5, r4
   11a6c:	mov	r1, r4
   11a70:	ldr	r0, [pc, #96]	; 11ad8 <__assert_fail@plt+0xb94>
   11a74:	sub	r4, r4, r6
   11a78:	bic	r2, r2, #3
   11a7c:	sub	r4, r5, r4
   11a80:	movw	r3, #28000	; 0x6d60
   11a84:	add	r2, r2, #28
   11a88:	bl	10d10 <__memmove_chk@plt>
   11a8c:	str	r4, [r7, #16]
   11a90:	pop	{r4, r5, r6, r7, r8, pc}
   11a94:	ldr	r1, [r3, #20]
   11a98:	ldr	r0, [r3, #24]
   11a9c:	ldr	ip, [r0, #20]
   11aa0:	sub	r1, r1, ip
   11aa4:	cmp	r1, r2
   11aa8:	movlt	r2, r1
   11aac:	movlt	r4, r3
   11ab0:	cmn	r2, #-2147483638	; 0x8000000a
   11ab4:	mov	r3, r0
   11ab8:	addle	r2, r2, #9
   11abc:	b	11a18 <__assert_fail@plt+0xad4>
   11ac0:	ldr	r2, [r1, #-28]	; 0xffffffe4
   11ac4:	add	r2, r2, r3
   11ac8:	str	r2, [r1, #-28]	; 0xffffffe4
   11acc:	mov	r2, r1
   11ad0:	b	11a5c <__assert_fail@plt+0xb18>
   11ad4:	andeq	r6, r2, r0, ror #2
   11ad8:	andeq	r6, r2, r8, lsr #3
   11adc:	andeq	ip, r2, r8, lsl #30
   11ae0:	andeq	r6, r2, r4, asr r1
   11ae4:	ldr	r3, [pc, #136]	; 11b74 <__assert_fail@plt+0xc30>
   11ae8:	ldrb	r2, [r3, #64]	; 0x40
   11aec:	cmp	r2, #0
   11af0:	mov	r2, r3
   11af4:	beq	11b04 <__assert_fail@plt+0xbc0>
   11af8:	ldr	r2, [r3, #28]
   11afc:	str	r2, [r3, #24]
   11b00:	bx	lr
   11b04:	ldrb	r1, [r3, #65]	; 0x41
   11b08:	cmp	r1, #0
   11b0c:	beq	11b24 <__assert_fail@plt+0xbe0>
   11b10:	cmp	r0, #0
   11b14:	ldrne	r3, [r3, #12]
   11b18:	ldreq	r3, [r2, #28]
   11b1c:	str	r3, [r2, #24]
   11b20:	bx	lr
   11b24:	ldrb	ip, [r3, #66]	; 0x42
   11b28:	ldr	r1, [r3, #28]
   11b2c:	cmp	ip, #0
   11b30:	beq	11b6c <__assert_fail@plt+0xc28>
   11b34:	cmp	r0, #0
   11b38:	beq	11b50 <__assert_fail@plt+0xc0c>
   11b3c:	ldr	r0, [r3, #12]
   11b40:	cmp	r0, r1
   11b44:	beq	11b50 <__assert_fail@plt+0xc0c>
   11b48:	str	r0, [r3, #24]
   11b4c:	bx	lr
   11b50:	ldr	r3, [r2, #24]
   11b54:	cmp	r1, r3
   11b58:	bxne	lr
   11b5c:	cmp	r1, #0
   11b60:	moveq	r3, #3
   11b64:	movne	r3, #0
   11b68:	b	11b1c <__assert_fail@plt+0xbd8>
   11b6c:	str	r1, [r3, #24]
   11b70:	bx	lr
   11b74:	andeq	r6, r2, r0, ror #2
   11b78:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b7c:	mov	r9, r0
   11b80:	mov	r4, r1
   11b84:	ldr	sl, [pc, #484]	; 11d70 <__assert_fail@plt+0xe2c>
   11b88:	mov	r5, sl
   11b8c:	ldr	r3, [sl, #16]
   11b90:	ldr	r2, [sl, #60]	; 0x3c
   11b94:	str	r2, [r3]
   11b98:	ldr	r2, [pc, #468]	; 11d74 <__assert_fail@plt+0xe30>
   11b9c:	ldr	r3, [r5, #60]	; 0x3c
   11ba0:	cmp	r3, r2
   11ba4:	bne	11bb4 <__assert_fail@plt+0xc70>
   11ba8:	mov	r0, #1
   11bac:	bl	11ae4 <__assert_fail@plt+0xba0>
   11bb0:	bl	119c0 <__assert_fail@plt+0xa7c>
   11bb4:	ldr	r3, [r5, #60]	; 0x3c
   11bb8:	mov	r0, r9
   11bbc:	add	r2, r3, #1
   11bc0:	strb	r4, [r3]
   11bc4:	str	r2, [r5, #60]	; 0x3c
   11bc8:	bl	10d70 <getc_unlocked@plt>
   11bcc:	mov	r4, r0
   11bd0:	bl	10e30 <__ctype_b_loc@plt>
   11bd4:	cmn	r4, #1
   11bd8:	ldr	r2, [r0]
   11bdc:	beq	11bf0 <__assert_fail@plt+0xcac>
   11be0:	lsl	r3, r4, #1
   11be4:	ldrh	r3, [r2, r3]
   11be8:	tst	r3, #8192	; 0x2000
   11bec:	beq	11b98 <__assert_fail@plt+0xc54>
   11bf0:	ldr	r8, [r5, #12]
   11bf4:	str	r2, [sp, #4]
   11bf8:	ldr	r6, [r5, #16]
   11bfc:	ldr	r7, [r5, #60]	; 0x3c
   11c00:	ldr	r0, [pc, #368]	; 11d78 <__assert_fail@plt+0xe34>
   11c04:	ldr	fp, [r6]
   11c08:	sub	r3, r7, fp
   11c0c:	add	r8, r3, r8
   11c10:	str	r3, [r6, #4]
   11c14:	add	r3, fp, r3
   11c18:	ldrb	r3, [r3, #-1]
   11c1c:	str	r8, [r5, #12]
   11c20:	ldrb	r1, [fp]
   11c24:	str	r3, [sp]
   11c28:	bl	10e54 <strchr@plt>
   11c2c:	ldr	r3, [sp]
   11c30:	adds	r0, r0, #0
   11c34:	movne	r0, #1
   11c38:	ldr	r2, [sp, #4]
   11c3c:	ldrb	r1, [r6, #12]
   11c40:	lsl	r3, r3, #1
   11c44:	ldrh	r2, [r2, r3]
   11c48:	bfi	r1, r0, #0, #1
   11c4c:	mov	r3, r1
   11c50:	ubfx	r2, r2, #2, #1
   11c54:	bfi	r3, r2, #2, #1
   11c58:	ldr	r2, [pc, #284]	; 11d7c <__assert_fail@plt+0xe38>
   11c5c:	strb	r3, [r6, #12]
   11c60:	ldrb	r3, [r7, #-1]!
   11c64:	cmp	fp, r7
   11c68:	bcs	11c8c <__assert_fail@plt+0xd48>
   11c6c:	mov	r1, r3
   11c70:	mov	r0, r2
   11c74:	str	r3, [sp]
   11c78:	bl	10e54 <strchr@plt>
   11c7c:	cmp	r0, #0
   11c80:	ldr	r2, [pc, #244]	; 11d7c <__assert_fail@plt+0xe38>
   11c84:	ldr	r3, [sp]
   11c88:	bne	11c60 <__assert_fail@plt+0xd1c>
   11c8c:	mov	r1, r3
   11c90:	ldr	r0, [pc, #232]	; 11d80 <__assert_fail@plt+0xe3c>
   11c94:	bl	10e54 <strchr@plt>
   11c98:	ldrb	r3, [r6, #12]
   11c9c:	adds	r0, r0, #0
   11ca0:	mov	r1, r4
   11ca4:	movne	r0, #1
   11ca8:	bfi	r3, r0, #1, #1
   11cac:	mov	r0, r9
   11cb0:	strb	r3, [r6, #12]
   11cb4:	bl	11704 <__assert_fail@plt+0x7c0>
   11cb8:	ldr	r1, [r5, #12]
   11cbc:	cmn	r0, #1
   11cc0:	mov	r4, r0
   11cc4:	ldr	r2, [r5, #16]
   11cc8:	sub	r1, r1, r8
   11ccc:	moveq	r8, #1
   11cd0:	str	r1, [r2, #8]
   11cd4:	beq	11cf8 <__assert_fail@plt+0xdb4>
   11cd8:	ldrb	r3, [r2, #12]
   11cdc:	ands	r8, r3, #2
   11ce0:	beq	11cf8 <__assert_fail@plt+0xdb4>
   11ce4:	cmp	r1, #1
   11ce8:	movle	r8, #0
   11cec:	movgt	r8, #1
   11cf0:	cmp	r0, #10
   11cf4:	orreq	r8, r8, #1
   11cf8:	ldrb	r3, [r2, #12]
   11cfc:	cmn	r4, #1
   11d00:	cmpne	r4, #10
   11d04:	bfi	r3, r8, #3, #1
   11d08:	strb	r3, [r2, #12]
   11d0c:	beq	11d1c <__assert_fail@plt+0xdd8>
   11d10:	ldrb	r3, [r5, #67]	; 0x43
   11d14:	cmp	r3, #0
   11d18:	beq	11d30 <__assert_fail@plt+0xdec>
   11d1c:	ldrb	r3, [r2, #12]
   11d20:	tst	r3, #8
   11d24:	movne	r3, #2
   11d28:	moveq	r3, #1
   11d2c:	str	r3, [r2, #8]
   11d30:	ldr	r3, [pc, #76]	; 11d84 <__assert_fail@plt+0xe40>
   11d34:	cmp	r2, r3
   11d38:	bne	11d48 <__assert_fail@plt+0xe04>
   11d3c:	mov	r0, #1
   11d40:	bl	11ae4 <__assert_fail@plt+0xba0>
   11d44:	bl	119c0 <__assert_fail@plt+0xa7c>
   11d48:	ldr	r3, [r5, #16]
   11d4c:	cmp	r4, #10
   11d50:	cmnne	r4, #1
   11d54:	add	r3, r3, #28
   11d58:	str	r3, [r5, #16]
   11d5c:	bne	11b8c <__assert_fail@plt+0xc48>
   11d60:	mov	r0, r9
   11d64:	add	sp, sp, #12
   11d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d6c:	b	11760 <__assert_fail@plt+0x81c>
   11d70:	andeq	r6, r2, r0, ror #2
   11d74:	muleq	r2, r0, r2
   11d78:	andeq	r4, r1, r0, lsl lr
   11d7c:	andeq	r4, r1, r6, lsl lr
   11d80:	andeq	r4, r1, fp, lsl lr
   11d84:	ldrdeq	ip, [r2], -r0
   11d88:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d8c:	mov	r6, r0
   11d90:	mov	r7, #0
   11d94:	mov	r8, r1
   11d98:	mov	r1, #2
   11d9c:	ldr	r4, [pc, #804]	; 120c8 <__assert_fail@plt+0x1184>
   11da0:	bl	12474 <__assert_fail@plt+0x1530>
   11da4:	ldr	r9, [pc, #800]	; 120cc <__assert_fail@plt+0x1188>
   11da8:	mov	r0, r6
   11dac:	str	r7, [r4, #24]
   11db0:	strb	r7, [r4, #40]	; 0x28
   11db4:	bl	11760 <__assert_fail@plt+0x81c>
   11db8:	str	r0, [r4, #68]	; 0x44
   11dbc:	ldr	r5, [r4, #68]	; 0x44
   11dc0:	str	r7, [r4, #36]	; 0x24
   11dc4:	cmn	r5, #1
   11dc8:	cmpne	r5, #10
   11dcc:	ldr	r0, [r4]
   11dd0:	ldr	r3, [r4, #12]
   11dd4:	beq	11e94 <__assert_fail@plt+0xf50>
   11dd8:	ldr	r2, [r4, #48]	; 0x30
   11ddc:	cmp	r0, r2
   11de0:	blt	11e94 <__assert_fail@plt+0xf50>
   11de4:	ldr	r2, [r4, #8]
   11de8:	add	r2, r0, r2
   11dec:	cmp	r2, r3
   11df0:	bgt	11e94 <__assert_fail@plt+0xf50>
   11df4:	mov	r1, r5
   11df8:	str	r0, [r4, #4]
   11dfc:	mov	r0, r6
   11e00:	str	r3, [r4, #28]
   11e04:	ldr	r3, [pc, #708]	; 120d0 <__assert_fail@plt+0x118c>
   11e08:	str	r9, [r4, #16]
   11e0c:	str	r3, [r4, #60]	; 0x3c
   11e10:	bl	11b78 <__assert_fail@plt+0xc34>
   11e14:	mov	r5, r0
   11e18:	bl	114fc <__assert_fail@plt+0x5b8>
   11e1c:	bl	11ae4 <__assert_fail@plt+0xba0>
   11e20:	ldrb	r3, [r4, #64]	; 0x40
   11e24:	cmp	r3, #0
   11e28:	bne	11e74 <__assert_fail@plt+0xf30>
   11e2c:	ldrb	sl, [r4, #65]	; 0x41
   11e30:	mov	r0, r5
   11e34:	bl	114fc <__assert_fail@plt+0x5b8>
   11e38:	cmp	sl, #0
   11e3c:	beq	11ffc <__assert_fail@plt+0x10b8>
   11e40:	cmp	r0, #0
   11e44:	beq	11e74 <__assert_fail@plt+0xf30>
   11e48:	mov	r1, r5
   11e4c:	mov	r0, r6
   11e50:	bl	11b78 <__assert_fail@plt+0xc34>
   11e54:	mov	r5, r0
   11e58:	bl	114fc <__assert_fail@plt+0x5b8>
   11e5c:	cmp	r0, #0
   11e60:	beq	11e74 <__assert_fail@plt+0xf30>
   11e64:	ldr	r2, [r4, #12]
   11e68:	ldr	r3, [r4, #24]
   11e6c:	cmp	r2, r3
   11e70:	beq	11e48 <__assert_fail@plt+0xf04>
   11e74:	ldr	sl, [r4, #16]
   11e78:	cmp	sl, r9
   11e7c:	bhi	12084 <__assert_fail@plt+0x1140>
   11e80:	ldr	r3, [pc, #588]	; 120d4 <__assert_fail@plt+0x1190>
   11e84:	movw	r2, #623	; 0x26f
   11e88:	ldr	r1, [pc, #584]	; 120d8 <__assert_fail@plt+0x1194>
   11e8c:	ldr	r0, [pc, #584]	; 120dc <__assert_fail@plt+0x1198>
   11e90:	bl	10f44 <__assert_fail@plt>
   11e94:	cmp	r5, #10
   11e98:	cmnne	r5, #1
   11e9c:	str	r7, [r4, #56]	; 0x38
   11ea0:	movne	sl, #1
   11ea4:	moveq	sl, #0
   11ea8:	cmp	r0, r3
   11eac:	blt	11eb8 <__assert_fail@plt+0xf74>
   11eb0:	cmp	sl, #0
   11eb4:	beq	11efc <__assert_fail@plt+0xfb8>
   11eb8:	bl	117fc <__assert_fail@plt+0x8b8>
   11ebc:	ldr	fp, [r4, #52]	; 0x34
   11ec0:	sub	fp, fp, #1
   11ec4:	ldr	r2, [r4, #12]
   11ec8:	ldr	r3, [r4, #56]	; 0x38
   11ecc:	cmp	r3, r2
   11ed0:	beq	11ee0 <__assert_fail@plt+0xf9c>
   11ed4:	ldrb	r0, [fp, #1]!
   11ed8:	cmp	r0, #0
   11edc:	bne	11f1c <__assert_fail@plt+0xfd8>
   11ee0:	cmp	sl, #0
   11ee4:	beq	11f30 <__assert_fail@plt+0xfec>
   11ee8:	sub	r0, r2, r3
   11eec:	bl	117fc <__assert_fail@plt+0x8b8>
   11ef0:	cmp	r5, #10
   11ef4:	cmnne	r5, #1
   11ef8:	bne	11fe4 <__assert_fail@plt+0x10a0>
   11efc:	cmn	r5, #1
   11f00:	beq	11f54 <__assert_fail@plt+0x1010>
   11f04:	mov	r0, #10
   11f08:	bl	10f38 <putchar_unlocked@plt>
   11f0c:	mov	r0, r6
   11f10:	bl	11760 <__assert_fail@plt+0x81c>
   11f14:	mov	r5, r0
   11f18:	b	11dc4 <__assert_fail@plt+0xe80>
   11f1c:	bl	10f38 <putchar_unlocked@plt>
   11f20:	ldr	r3, [r4, #56]	; 0x38
   11f24:	add	r3, r3, #1
   11f28:	str	r3, [r4, #56]	; 0x38
   11f2c:	b	11ec4 <__assert_fail@plt+0xf80>
   11f30:	cmn	r5, #1
   11f34:	bne	11f04 <__assert_fail@plt+0xfc0>
   11f38:	ldr	r3, [r4]
   11f3c:	ldr	r1, [r4, #44]	; 0x2c
   11f40:	add	r3, r3, r1
   11f44:	cmp	r2, r3
   11f48:	blt	11f54 <__assert_fail@plt+0x1010>
   11f4c:	mov	r0, #10
   11f50:	bl	10f38 <putchar_unlocked@plt>
   11f54:	mvn	r3, #0
   11f58:	mov	r0, r6
   11f5c:	str	r3, [r4, #68]	; 0x44
   11f60:	bl	10dd0 <ferror_unlocked@plt>
   11f64:	ldr	r3, [pc, #372]	; 120e0 <__assert_fail@plt+0x119c>
   11f68:	mov	r5, r0
   11f6c:	clz	r0, r0
   11f70:	lsr	r0, r0, #5
   11f74:	rsb	r4, r0, #0
   11f78:	ldr	r3, [r3]
   11f7c:	cmp	r3, r6
   11f80:	bne	120a4 <__assert_fail@plt+0x1160>
   11f84:	mov	r0, r6
   11f88:	bl	10ef0 <clearerr_unlocked@plt>
   11f8c:	cmp	r4, #0
   11f90:	blt	11fd8 <__assert_fail@plt+0x1094>
   11f94:	ldrne	r5, [pc, #328]	; 120e4 <__assert_fail@plt+0x11a0>
   11f98:	bne	11fb4 <__assert_fail@plt+0x1070>
   11f9c:	mov	r2, #5
   11fa0:	mov	r0, #0
   11fa4:	ldr	r1, [pc, #316]	; 120e8 <__assert_fail@plt+0x11a4>
   11fa8:	mov	r4, #0
   11fac:	bl	10d7c <dcgettext@plt>
   11fb0:	mov	r5, r0
   11fb4:	mov	r2, r8
   11fb8:	mov	r1, #3
   11fbc:	mov	r0, #0
   11fc0:	bl	13af4 <__assert_fail@plt+0x2bb0>
   11fc4:	mov	r3, r0
   11fc8:	mov	r2, r5
   11fcc:	mov	r1, r4
   11fd0:	mov	r0, #0
   11fd4:	bl	10de8 <error@plt>
   11fd8:	lsr	r0, r4, #31
   11fdc:	add	sp, sp, #4
   11fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fe4:	mov	r0, r5
   11fe8:	bl	10f38 <putchar_unlocked@plt>
   11fec:	mov	r0, r6
   11ff0:	bl	10d70 <getc_unlocked@plt>
   11ff4:	mov	r5, r0
   11ff8:	b	11ef0 <__assert_fail@plt+0xfac>
   11ffc:	ldrb	r3, [r4, #66]	; 0x42
   12000:	cmp	r3, #0
   12004:	beq	12060 <__assert_fail@plt+0x111c>
   12008:	cmp	r0, #0
   1200c:	beq	11e74 <__assert_fail@plt+0xf30>
   12010:	ldr	r2, [r4, #12]
   12014:	ldr	r3, [r4, #28]
   12018:	cmp	r2, r3
   1201c:	beq	11e74 <__assert_fail@plt+0xf30>
   12020:	mov	r1, r5
   12024:	mov	r0, r6
   12028:	bl	11b78 <__assert_fail@plt+0xc34>
   1202c:	mov	r5, r0
   12030:	bl	114fc <__assert_fail@plt+0x5b8>
   12034:	cmp	r0, #0
   12038:	beq	11e74 <__assert_fail@plt+0xf30>
   1203c:	ldr	r2, [r4, #12]
   12040:	ldr	r3, [r4, #24]
   12044:	cmp	r2, r3
   12048:	beq	12020 <__assert_fail@plt+0x10dc>
   1204c:	b	11e74 <__assert_fail@plt+0xf30>
   12050:	mov	r1, r5
   12054:	mov	r0, r6
   12058:	bl	11b78 <__assert_fail@plt+0xc34>
   1205c:	mov	r5, r0
   12060:	mov	r0, r5
   12064:	bl	114fc <__assert_fail@plt+0x5b8>
   12068:	cmp	r0, #0
   1206c:	beq	11e74 <__assert_fail@plt+0xf30>
   12070:	ldr	r2, [r4, #12]
   12074:	ldr	r3, [r4, #24]
   12078:	cmp	r2, r3
   1207c:	beq	12050 <__assert_fail@plt+0x110c>
   12080:	b	11e74 <__assert_fail@plt+0xf30>
   12084:	ldrb	r3, [sl, #-16]
   12088:	str	r5, [r4, #68]	; 0x44
   1208c:	orr	r3, r3, #10
   12090:	strb	r3, [sl, #-16]
   12094:	bl	11544 <__assert_fail@plt+0x600>
   12098:	mov	r0, sl
   1209c:	bl	11988 <__assert_fail@plt+0xa44>
   120a0:	b	11dbc <__assert_fail@plt+0xe78>
   120a4:	mov	r0, r6
   120a8:	bl	124a4 <__assert_fail@plt+0x1560>
   120ac:	cmp	r0, #0
   120b0:	beq	11f8c <__assert_fail@plt+0x1048>
   120b4:	cmp	r5, #0
   120b8:	bne	11f9c <__assert_fail@plt+0x1058>
   120bc:	bl	10e60 <__errno_location@plt>
   120c0:	ldr	r4, [r0]
   120c4:	b	11f8c <__assert_fail@plt+0x1048>
   120c8:	andeq	r6, r2, r0, ror #2
   120cc:	andeq	r6, r2, r8, lsr #3
   120d0:	andeq	ip, r2, r8, lsl #30
   120d4:	andeq	r4, r1, r8, lsr #26
   120d8:	andeq	r4, r1, pc, lsl lr
   120dc:	andeq	r4, r1, r9, lsr #28
   120e0:	andeq	r6, r2, r0, asr r1
   120e4:	andeq	r5, r1, r5, asr #9
   120e8:	andeq	r4, r1, fp, lsr lr
   120ec:	subs	r5, r0, #0
   120f0:	push	{r7, lr}
   120f4:	sub	sp, sp, #56	; 0x38
   120f8:	ldr	r4, [pc, #544]	; 12320 <__assert_fail@plt+0x13dc>
   120fc:	beq	12134 <__assert_fail@plt+0x11f0>
   12100:	mov	r2, #5
   12104:	mov	r0, #0
   12108:	ldr	r3, [pc, #532]	; 12324 <__assert_fail@plt+0x13e0>
   1210c:	ldr	r1, [pc, #532]	; 12328 <__assert_fail@plt+0x13e4>
   12110:	ldr	r6, [r3]
   12114:	bl	10d7c <dcgettext@plt>
   12118:	mov	r2, r0
   1211c:	mov	r1, #1
   12120:	ldr	r3, [r4]
   12124:	mov	r0, r6
   12128:	bl	10ea8 <__fprintf_chk@plt>
   1212c:	mov	r0, r5
   12130:	bl	10e3c <exit@plt>
   12134:	mov	r2, #5
   12138:	ldr	r1, [pc, #492]	; 1232c <__assert_fail@plt+0x13e8>
   1213c:	mov	r6, sp
   12140:	bl	10d7c <dcgettext@plt>
   12144:	ldr	r2, [r4]
   12148:	mov	r1, r0
   1214c:	mov	r0, #1
   12150:	bl	10e84 <__printf_chk@plt>
   12154:	ldr	r4, [pc, #468]	; 12330 <__assert_fail@plt+0x13ec>
   12158:	mov	r2, #5
   1215c:	mov	r0, r5
   12160:	ldr	r1, [pc, #460]	; 12334 <__assert_fail@plt+0x13f0>
   12164:	bl	10d7c <dcgettext@plt>
   12168:	ldr	r7, [pc, #456]	; 12338 <__assert_fail@plt+0x13f4>
   1216c:	ldr	r1, [r4]
   12170:	bl	10ce0 <fputs_unlocked@plt>
   12174:	mov	r2, #5
   12178:	ldr	r1, [pc, #444]	; 1233c <__assert_fail@plt+0x13f8>
   1217c:	mov	r0, r5
   12180:	bl	10d7c <dcgettext@plt>
   12184:	ldr	r1, [r4]
   12188:	bl	10ce0 <fputs_unlocked@plt>
   1218c:	mov	r2, #5
   12190:	ldr	r1, [pc, #424]	; 12340 <__assert_fail@plt+0x13fc>
   12194:	mov	r0, r5
   12198:	bl	10d7c <dcgettext@plt>
   1219c:	ldr	r1, [r4]
   121a0:	bl	10ce0 <fputs_unlocked@plt>
   121a4:	mov	r2, #5
   121a8:	ldr	r1, [pc, #404]	; 12344 <__assert_fail@plt+0x1400>
   121ac:	mov	r0, r5
   121b0:	bl	10d7c <dcgettext@plt>
   121b4:	ldr	r1, [r4]
   121b8:	bl	10ce0 <fputs_unlocked@plt>
   121bc:	mov	r2, #5
   121c0:	ldr	r1, [pc, #384]	; 12348 <__assert_fail@plt+0x1404>
   121c4:	mov	r0, r5
   121c8:	bl	10d7c <dcgettext@plt>
   121cc:	ldr	r1, [r4]
   121d0:	bl	10ce0 <fputs_unlocked@plt>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #364]	; 1234c <__assert_fail@plt+0x1408>
   121dc:	mov	r0, r5
   121e0:	bl	10d7c <dcgettext@plt>
   121e4:	ldr	r1, [r4]
   121e8:	bl	10ce0 <fputs_unlocked@plt>
   121ec:	mov	r2, #5
   121f0:	ldr	r1, [pc, #344]	; 12350 <__assert_fail@plt+0x140c>
   121f4:	mov	r0, r5
   121f8:	bl	10d7c <dcgettext@plt>
   121fc:	ldr	r1, [r4]
   12200:	bl	10ce0 <fputs_unlocked@plt>
   12204:	ldr	lr, [pc, #328]	; 12354 <__assert_fail@plt+0x1410>
   12208:	mov	ip, sp
   1220c:	ldm	lr!, {r0, r1, r2, r3}
   12210:	stmia	ip!, {r0, r1, r2, r3}
   12214:	ldm	lr!, {r0, r1, r2, r3}
   12218:	stmia	ip!, {r0, r1, r2, r3}
   1221c:	ldm	lr!, {r0, r1, r2, r3}
   12220:	stmia	ip!, {r0, r1, r2, r3}
   12224:	ldm	lr, {r0, r1}
   12228:	stm	ip, {r0, r1}
   1222c:	ldr	r1, [r6]
   12230:	cmp	r1, #0
   12234:	bne	122d8 <__assert_fail@plt+0x1394>
   12238:	ldr	r6, [r6, #4]
   1223c:	mov	r2, #5
   12240:	mov	r0, #0
   12244:	ldr	r7, [pc, #236]	; 12338 <__assert_fail@plt+0x13f4>
   12248:	ldr	r1, [pc, #264]	; 12358 <__assert_fail@plt+0x1414>
   1224c:	cmp	r6, #0
   12250:	moveq	r6, r7
   12254:	bl	10d7c <dcgettext@plt>
   12258:	mov	r1, r0
   1225c:	ldr	r3, [pc, #248]	; 1235c <__assert_fail@plt+0x1418>
   12260:	mov	r0, #1
   12264:	ldr	r2, [pc, #244]	; 12360 <__assert_fail@plt+0x141c>
   12268:	bl	10e84 <__printf_chk@plt>
   1226c:	mov	r1, #0
   12270:	mov	r0, #5
   12274:	bl	10ecc <setlocale@plt>
   12278:	cmp	r0, #0
   1227c:	bne	122f0 <__assert_fail@plt+0x13ac>
   12280:	mov	r2, #5
   12284:	ldr	r1, [pc, #216]	; 12364 <__assert_fail@plt+0x1420>
   12288:	mov	r0, #0
   1228c:	bl	10d7c <dcgettext@plt>
   12290:	mov	r1, r0
   12294:	ldr	r3, [pc, #156]	; 12338 <__assert_fail@plt+0x13f4>
   12298:	mov	r0, #1
   1229c:	ldr	r2, [pc, #184]	; 1235c <__assert_fail@plt+0x1418>
   122a0:	bl	10e84 <__printf_chk@plt>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #184]	; 12368 <__assert_fail@plt+0x1424>
   122ac:	mov	r0, #0
   122b0:	bl	10d7c <dcgettext@plt>
   122b4:	ldr	r2, [pc, #176]	; 1236c <__assert_fail@plt+0x1428>
   122b8:	cmp	r6, r7
   122bc:	mov	r1, r0
   122c0:	mov	r0, #1
   122c4:	ldr	r3, [pc, #164]	; 12370 <__assert_fail@plt+0x142c>
   122c8:	moveq	r3, r2
   122cc:	mov	r2, r6
   122d0:	bl	10e84 <__printf_chk@plt>
   122d4:	b	1212c <__assert_fail@plt+0x11e8>
   122d8:	mov	r0, r7
   122dc:	bl	10cec <strcmp@plt>
   122e0:	cmp	r0, #0
   122e4:	beq	12238 <__assert_fail@plt+0x12f4>
   122e8:	add	r6, r6, #8
   122ec:	b	1222c <__assert_fail@plt+0x12e8>
   122f0:	mov	r2, #3
   122f4:	ldr	r1, [pc, #120]	; 12374 <__assert_fail@plt+0x1430>
   122f8:	bl	10f20 <strncmp@plt>
   122fc:	cmp	r0, #0
   12300:	beq	12280 <__assert_fail@plt+0x133c>
   12304:	mov	r2, #5
   12308:	ldr	r1, [pc, #104]	; 12378 <__assert_fail@plt+0x1434>
   1230c:	mov	r0, #0
   12310:	bl	10d7c <dcgettext@plt>
   12314:	ldr	r1, [r4]
   12318:	bl	10ce0 <fputs_unlocked@plt>
   1231c:	b	12280 <__assert_fail@plt+0x133c>
   12320:	muleq	r2, r8, r2
   12324:	andeq	r6, r2, r8, asr #2
   12328:	andeq	r4, r1, sl, asr #28
   1232c:	andeq	r4, r1, r1, ror lr
   12330:	andeq	r6, r2, r4, asr r1
   12334:	muleq	r1, fp, lr
   12338:	andeq	r4, r1, r6, asr #28
   1233c:	andeq	r4, r1, ip, lsl pc
   12340:	andeq	r4, r1, r4, asr pc
   12344:	muleq	r1, pc, pc	; <UNPREDICTABLE>
   12348:	strheq	r5, [r1], -r5	; <UNPREDICTABLE>
   1234c:	ldrdeq	r5, [r1], -r3
   12350:	andeq	r5, r1, r0, lsl #4
   12354:	andeq	r4, r1, r8, lsr sp
   12358:	andeq	r5, r1, r6, lsr r2
   1235c:	andeq	r5, r1, sp, asr #4
   12360:	andeq	r5, r1, r5, ror r2
   12364:	andeq	r5, r1, lr, asr #5
   12368:	andeq	r5, r1, r9, ror #5
   1236c:	andeq	r5, r1, r1, lsl r4
   12370:	andeq	r5, r1, fp, lsl r3
   12374:	andeq	r5, r1, r3, lsl #5
   12378:	andeq	r5, r1, r7, lsl #5
   1237c:	ldr	r3, [pc, #4]	; 12388 <__assert_fail@plt+0x1444>
   12380:	str	r0, [r3]
   12384:	bx	lr
   12388:	muleq	r2, r0, r2
   1238c:	ldr	r3, [pc, #4]	; 12398 <__assert_fail@plt+0x1454>
   12390:	strb	r0, [r3, #4]
   12394:	bx	lr
   12398:	muleq	r2, r0, r2
   1239c:	ldr	r3, [pc, #176]	; 12454 <__assert_fail@plt+0x1510>
   123a0:	push	{r0, r1, r4, r5, r6, lr}
   123a4:	ldr	r0, [r3]
   123a8:	bl	14a28 <__assert_fail@plt+0x3ae4>
   123ac:	cmp	r0, #0
   123b0:	beq	12438 <__assert_fail@plt+0x14f4>
   123b4:	ldr	r4, [pc, #156]	; 12458 <__assert_fail@plt+0x1514>
   123b8:	bl	10e60 <__errno_location@plt>
   123bc:	mov	r5, r0
   123c0:	ldrb	r6, [r4, #4]
   123c4:	cmp	r6, #0
   123c8:	beq	123d8 <__assert_fail@plt+0x1494>
   123cc:	ldr	r3, [r0]
   123d0:	cmp	r3, #32
   123d4:	beq	12438 <__assert_fail@plt+0x14f4>
   123d8:	mov	r2, #5
   123dc:	ldr	r1, [pc, #120]	; 1245c <__assert_fail@plt+0x1518>
   123e0:	mov	r0, #0
   123e4:	bl	10d7c <dcgettext@plt>
   123e8:	mov	r6, r0
   123ec:	ldr	r0, [r4]
   123f0:	cmp	r0, #0
   123f4:	beq	12424 <__assert_fail@plt+0x14e0>
   123f8:	ldr	r4, [r5]
   123fc:	bl	13ae4 <__assert_fail@plt+0x2ba0>
   12400:	mov	r3, r0
   12404:	ldr	r2, [pc, #84]	; 12460 <__assert_fail@plt+0x151c>
   12408:	mov	r0, #0
   1240c:	str	r6, [sp]
   12410:	mov	r1, r4
   12414:	bl	10de8 <error@plt>
   12418:	ldr	r3, [pc, #68]	; 12464 <__assert_fail@plt+0x1520>
   1241c:	ldr	r0, [r3]
   12420:	bl	10d28 <_exit@plt>
   12424:	mov	r3, r6
   12428:	ldr	r2, [pc, #56]	; 12468 <__assert_fail@plt+0x1524>
   1242c:	ldr	r1, [r5]
   12430:	bl	10de8 <error@plt>
   12434:	b	12418 <__assert_fail@plt+0x14d4>
   12438:	ldr	r3, [pc, #44]	; 1246c <__assert_fail@plt+0x1528>
   1243c:	ldr	r0, [r3]
   12440:	bl	14a28 <__assert_fail@plt+0x3ae4>
   12444:	cmp	r0, #0
   12448:	bne	12418 <__assert_fail@plt+0x14d4>
   1244c:	add	sp, sp, #8
   12450:	pop	{r4, r5, r6, pc}
   12454:	andeq	r6, r2, r4, asr r1
   12458:	muleq	r2, r0, r2
   1245c:			; <UNDEFINED> instruction: 0x000154b5
   12460:	andeq	r5, r1, r1, asr #9
   12464:	strdeq	r6, [r2], -r0
   12468:	andeq	r5, r1, r5, asr #9
   1246c:	andeq	r6, r2, r8, asr #2
   12470:	b	10cf8 <posix_fadvise64@plt>
   12474:	cmp	r0, #0
   12478:	bxeq	lr
   1247c:	push	{r0, r1, r2, r3, r4, lr}
   12480:	mov	r4, r1
   12484:	bl	10e90 <fileno@plt>
   12488:	mov	r2, #0
   1248c:	mov	r3, #0
   12490:	strd	r2, [sp]
   12494:	str	r4, [sp, #8]
   12498:	bl	10cf8 <posix_fadvise64@plt>
   1249c:	add	sp, sp, #16
   124a0:	pop	{r4, pc}
   124a4:	push	{r0, r1, r2, r4, r5, lr}
   124a8:	mov	r4, r0
   124ac:	bl	10e90 <fileno@plt>
   124b0:	cmp	r0, #0
   124b4:	mov	r0, r4
   124b8:	bge	124c8 <__assert_fail@plt+0x1584>
   124bc:	add	sp, sp, #12
   124c0:	pop	{r4, r5, lr}
   124c4:	b	10eb4 <fclose@plt>
   124c8:	bl	10e0c <__freading@plt>
   124cc:	cmp	r0, #0
   124d0:	bne	1250c <__assert_fail@plt+0x15c8>
   124d4:	mov	r0, r4
   124d8:	bl	1254c <__assert_fail@plt+0x1608>
   124dc:	cmp	r0, #0
   124e0:	bne	12540 <__assert_fail@plt+0x15fc>
   124e4:	mov	r5, #0
   124e8:	mov	r0, r4
   124ec:	bl	10eb4 <fclose@plt>
   124f0:	cmp	r5, #0
   124f4:	beq	12504 <__assert_fail@plt+0x15c0>
   124f8:	bl	10e60 <__errno_location@plt>
   124fc:	str	r5, [r0]
   12500:	mvn	r0, #0
   12504:	add	sp, sp, #12
   12508:	pop	{r4, r5, pc}
   1250c:	mov	r0, r4
   12510:	bl	10e90 <fileno@plt>
   12514:	mov	r3, #1
   12518:	mov	r2, #0
   1251c:	str	r3, [sp]
   12520:	mov	r3, #0
   12524:	bl	10dac <lseek64@plt>
   12528:	mvn	r3, #0
   1252c:	mvn	r2, #0
   12530:	cmp	r1, r3
   12534:	cmpeq	r0, r2
   12538:	bne	124d4 <__assert_fail@plt+0x1590>
   1253c:	b	124e4 <__assert_fail@plt+0x15a0>
   12540:	bl	10e60 <__errno_location@plt>
   12544:	ldr	r5, [r0]
   12548:	b	124e8 <__assert_fail@plt+0x15a4>
   1254c:	push	{r0, r1, r4, lr}
   12550:	subs	r4, r0, #0
   12554:	bne	12568 <__assert_fail@plt+0x1624>
   12558:	mov	r0, r4
   1255c:	add	sp, sp, #8
   12560:	pop	{r4, lr}
   12564:	b	10d04 <fflush@plt>
   12568:	bl	10e0c <__freading@plt>
   1256c:	cmp	r0, #0
   12570:	beq	12558 <__assert_fail@plt+0x1614>
   12574:	ldr	r3, [r4]
   12578:	tst	r3, #256	; 0x100
   1257c:	beq	12558 <__assert_fail@plt+0x1614>
   12580:	mov	r3, #1
   12584:	mov	r2, #0
   12588:	mov	r0, r4
   1258c:	str	r3, [sp]
   12590:	mov	r3, #0
   12594:	bl	1259c <__assert_fail@plt+0x1658>
   12598:	b	12558 <__assert_fail@plt+0x1614>
   1259c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   125a0:	mov	r4, r0
   125a4:	ldmib	r0, {ip, lr}
   125a8:	ldr	r8, [sp, #32]
   125ac:	cmp	lr, ip
   125b0:	bne	12620 <__assert_fail@plt+0x16dc>
   125b4:	ldr	ip, [r0, #16]
   125b8:	ldr	lr, [r0, #20]
   125bc:	cmp	lr, ip
   125c0:	bne	12620 <__assert_fail@plt+0x16dc>
   125c4:	ldr	r5, [r0, #36]	; 0x24
   125c8:	cmp	r5, #0
   125cc:	bne	12620 <__assert_fail@plt+0x16dc>
   125d0:	mov	r6, r2
   125d4:	mov	r7, r3
   125d8:	bl	10e90 <fileno@plt>
   125dc:	mov	r2, r6
   125e0:	mov	r3, r7
   125e4:	str	r8, [sp]
   125e8:	bl	10dac <lseek64@plt>
   125ec:	mvn	r3, #0
   125f0:	mvn	r2, #0
   125f4:	cmp	r1, r3
   125f8:	cmpeq	r0, r2
   125fc:	mvneq	r0, #0
   12600:	beq	12618 <__assert_fail@plt+0x16d4>
   12604:	ldr	r3, [r4]
   12608:	strd	r0, [r4, #80]	; 0x50
   1260c:	mov	r0, r5
   12610:	bic	r3, r3, #16
   12614:	str	r3, [r4]
   12618:	add	sp, sp, #8
   1261c:	pop	{r4, r5, r6, r7, r8, pc}
   12620:	mov	r0, r4
   12624:	str	r8, [sp, #32]
   12628:	add	sp, sp, #8
   1262c:	pop	{r4, r5, r6, r7, r8, lr}
   12630:	b	10ec0 <fseeko64@plt>
   12634:	push	{r4, r5, r6, lr}
   12638:	subs	r4, r0, #0
   1263c:	bne	12654 <__assert_fail@plt+0x1710>
   12640:	ldr	r3, [pc, #124]	; 126c4 <__assert_fail@plt+0x1780>
   12644:	ldr	r0, [pc, #124]	; 126c8 <__assert_fail@plt+0x1784>
   12648:	ldr	r1, [r3]
   1264c:	bl	10f14 <fputs@plt>
   12650:	bl	10f2c <abort@plt>
   12654:	mov	r1, #47	; 0x2f
   12658:	bl	10ed8 <strrchr@plt>
   1265c:	subs	r6, r0, #0
   12660:	beq	126b0 <__assert_fail@plt+0x176c>
   12664:	add	r5, r6, #1
   12668:	sub	r3, r5, r4
   1266c:	cmp	r3, #6
   12670:	ble	126b0 <__assert_fail@plt+0x176c>
   12674:	mov	r2, #7
   12678:	ldr	r1, [pc, #76]	; 126cc <__assert_fail@plt+0x1788>
   1267c:	sub	r0, r6, #6
   12680:	bl	10f20 <strncmp@plt>
   12684:	cmp	r0, #0
   12688:	bne	126b0 <__assert_fail@plt+0x176c>
   1268c:	mov	r2, #3
   12690:	ldr	r1, [pc, #56]	; 126d0 <__assert_fail@plt+0x178c>
   12694:	mov	r0, r5
   12698:	bl	10f20 <strncmp@plt>
   1269c:	cmp	r0, #0
   126a0:	ldreq	r3, [pc, #44]	; 126d4 <__assert_fail@plt+0x1790>
   126a4:	addeq	r4, r6, #4
   126a8:	movne	r4, r5
   126ac:	streq	r4, [r3]
   126b0:	ldr	r3, [pc, #32]	; 126d8 <__assert_fail@plt+0x1794>
   126b4:	str	r4, [r3]
   126b8:	ldr	r3, [pc, #28]	; 126dc <__assert_fail@plt+0x1798>
   126bc:	str	r4, [r3]
   126c0:	pop	{r4, r5, r6, pc}
   126c4:	andeq	r6, r2, r8, asr #2
   126c8:	andeq	r5, r1, r8, asr #9
   126cc:	andeq	r5, r1, r0, lsl #10
   126d0:	andeq	r5, r1, r8, lsl #10
   126d4:	andeq	r6, r2, r8, lsr r1
   126d8:	muleq	r2, r8, r2
   126dc:	andeq	r6, r2, ip, lsr r1
   126e0:	push	{r4, lr}
   126e4:	mov	r2, #48	; 0x30
   126e8:	mov	r4, r1
   126ec:	mov	r1, #0
   126f0:	bl	10e78 <memset@plt>
   126f4:	cmp	r4, #10
   126f8:	bne	12700 <__assert_fail@plt+0x17bc>
   126fc:	bl	10f2c <abort@plt>
   12700:	str	r4, [r0]
   12704:	pop	{r4, pc}
   12708:	push	{r4, r5, r6, lr}
   1270c:	mov	r2, #5
   12710:	mov	r6, r0
   12714:	mov	r5, r1
   12718:	mov	r1, r0
   1271c:	mov	r0, #0
   12720:	bl	10d7c <dcgettext@plt>
   12724:	cmp	r6, r0
   12728:	mov	r4, r0
   1272c:	bne	1279c <__assert_fail@plt+0x1858>
   12730:	bl	14b10 <__assert_fail@plt+0x3bcc>
   12734:	ldrb	r3, [r0]
   12738:	bic	r3, r3, #32
   1273c:	cmp	r3, #85	; 0x55
   12740:	bne	127a4 <__assert_fail@plt+0x1860>
   12744:	ldrb	r3, [r0, #1]
   12748:	bic	r3, r3, #32
   1274c:	cmp	r3, #84	; 0x54
   12750:	bne	12814 <__assert_fail@plt+0x18d0>
   12754:	ldrb	r3, [r0, #2]
   12758:	bic	r3, r3, #32
   1275c:	cmp	r3, #70	; 0x46
   12760:	bne	12814 <__assert_fail@plt+0x18d0>
   12764:	ldrb	r3, [r0, #3]
   12768:	cmp	r3, #45	; 0x2d
   1276c:	bne	12814 <__assert_fail@plt+0x18d0>
   12770:	ldrb	r3, [r0, #4]
   12774:	cmp	r3, #56	; 0x38
   12778:	bne	12814 <__assert_fail@plt+0x18d0>
   1277c:	ldrb	r3, [r0, #5]
   12780:	cmp	r3, #0
   12784:	bne	12814 <__assert_fail@plt+0x18d0>
   12788:	ldrb	r2, [r4]
   1278c:	ldr	r3, [pc, #144]	; 12824 <__assert_fail@plt+0x18e0>
   12790:	ldr	r4, [pc, #144]	; 12828 <__assert_fail@plt+0x18e4>
   12794:	cmp	r2, #96	; 0x60
   12798:	movne	r4, r3
   1279c:	mov	r0, r4
   127a0:	pop	{r4, r5, r6, pc}
   127a4:	cmp	r3, #71	; 0x47
   127a8:	bne	12814 <__assert_fail@plt+0x18d0>
   127ac:	ldrb	r3, [r0, #1]
   127b0:	bic	r3, r3, #32
   127b4:	cmp	r3, #66	; 0x42
   127b8:	bne	12814 <__assert_fail@plt+0x18d0>
   127bc:	ldrb	r3, [r0, #2]
   127c0:	cmp	r3, #49	; 0x31
   127c4:	bne	12814 <__assert_fail@plt+0x18d0>
   127c8:	ldrb	r3, [r0, #3]
   127cc:	cmp	r3, #56	; 0x38
   127d0:	bne	12814 <__assert_fail@plt+0x18d0>
   127d4:	ldrb	r3, [r0, #4]
   127d8:	cmp	r3, #48	; 0x30
   127dc:	bne	12814 <__assert_fail@plt+0x18d0>
   127e0:	ldrb	r3, [r0, #5]
   127e4:	cmp	r3, #51	; 0x33
   127e8:	bne	12814 <__assert_fail@plt+0x18d0>
   127ec:	ldrb	r3, [r0, #6]
   127f0:	cmp	r3, #48	; 0x30
   127f4:	bne	12814 <__assert_fail@plt+0x18d0>
   127f8:	ldrb	r3, [r0, #7]
   127fc:	cmp	r3, #0
   12800:	bne	12814 <__assert_fail@plt+0x18d0>
   12804:	ldrb	r2, [r4]
   12808:	ldr	r3, [pc, #28]	; 1282c <__assert_fail@plt+0x18e8>
   1280c:	ldr	r4, [pc, #28]	; 12830 <__assert_fail@plt+0x18ec>
   12810:	b	12794 <__assert_fail@plt+0x1850>
   12814:	ldr	r4, [pc, #24]	; 12834 <__assert_fail@plt+0x18f0>
   12818:	cmp	r5, #9
   1281c:	ldr	r3, [pc, #20]	; 12838 <__assert_fail@plt+0x18f4>
   12820:	b	12798 <__assert_fail@plt+0x1854>
   12824:	andeq	r5, r1, r0, ror #10
   12828:	andeq	r5, r1, fp, ror #10
   1282c:	andeq	r5, r1, r4, ror #10
   12830:	andeq	r5, r1, r7, ror #10
   12834:	andeq	r4, r1, r9, lsl lr
   12838:	andeq	r5, r1, pc, ror #10
   1283c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12840:	sub	sp, sp, #108	; 0x6c
   12844:	mov	r8, r0
   12848:	mov	r5, r1
   1284c:	mov	r6, #0
   12850:	str	r3, [sp, #40]	; 0x28
   12854:	str	r2, [sp, #48]	; 0x30
   12858:	ldr	sl, [sp, #144]	; 0x90
   1285c:	bl	10db8 <__ctype_get_mb_cur_max@plt>
   12860:	ldr	r3, [sp, #148]	; 0x94
   12864:	str	r6, [sp, #24]
   12868:	str	r6, [sp, #32]
   1286c:	str	r6, [sp, #44]	; 0x2c
   12870:	str	r6, [sp, #52]	; 0x34
   12874:	ubfx	r7, r3, #1, #1
   12878:	mov	r3, #1
   1287c:	str	r6, [sp, #60]	; 0x3c
   12880:	str	r3, [sp, #72]	; 0x48
   12884:	str	r0, [sp, #76]	; 0x4c
   12888:	cmp	sl, #10
   1288c:	ldrls	pc, [pc, sl, lsl #2]
   12890:	b	12ad4 <__assert_fail@plt+0x1b90>
   12894:	andeq	r2, r1, r0, asr #17
   12898:	andeq	r2, r1, ip, ror #21
   1289c:	andeq	r2, r1, r0, ror sl
   128a0:	andeq	r2, r1, r8, lsl #21
   128a4:	andeq	r2, r1, r8, asr sl
   128a8:			; <UNDEFINED> instruction: 0x000129b0
   128ac:	muleq	r1, r0, r9
   128b0:	ldrdeq	r2, [r1], -r8
   128b4:	andeq	r2, r1, r0, ror #19
   128b8:	andeq	r2, r1, r0, ror #19
   128bc:	andeq	r2, r1, r0, ror #19
   128c0:	mov	r4, sl
   128c4:	mov	r7, #0
   128c8:	mov	r9, r5
   128cc:	mov	r3, #0
   128d0:	str	r6, [sp, #68]	; 0x44
   128d4:	str	r3, [sp, #28]
   128d8:	ldr	r3, [sp, #40]	; 0x28
   128dc:	cmn	r3, #1
   128e0:	bne	13480 <__assert_fail@plt+0x253c>
   128e4:	ldr	r2, [sp, #28]
   128e8:	ldr	r3, [sp, #48]	; 0x30
   128ec:	ldrb	r3, [r3, r2]
   128f0:	adds	r3, r3, #0
   128f4:	movne	r3, #1
   128f8:	str	r3, [sp, #36]	; 0x24
   128fc:	ldr	r3, [sp, #36]	; 0x24
   12900:	cmp	r3, #0
   12904:	bne	12b10 <__assert_fail@plt+0x1bcc>
   12908:	sub	r3, sl, #2
   1290c:	cmp	r4, #0
   12910:	clz	r3, r3
   12914:	movne	r2, #0
   12918:	lsr	r3, r3, #5
   1291c:	andeq	r2, r3, r7
   12920:	cmp	r2, #0
   12924:	bne	12cd4 <__assert_fail@plt+0x1d90>
   12928:	eor	r7, r7, #1
   1292c:	ands	r3, r3, r7
   12930:	beq	134f8 <__assert_fail@plt+0x25b4>
   12934:	ldr	r2, [sp, #68]	; 0x44
   12938:	cmp	r2, #0
   1293c:	beq	134c0 <__assert_fail@plt+0x257c>
   12940:	ldr	r3, [sp, #72]	; 0x48
   12944:	cmp	r3, #0
   12948:	beq	13494 <__assert_fail@plt+0x2550>
   1294c:	ldr	r2, [sp, #48]	; 0x30
   12950:	ldr	r3, [sp, #160]	; 0xa0
   12954:	ldr	r1, [sp, #60]	; 0x3c
   12958:	str	r3, [sp, #16]
   1295c:	ldr	r3, [sp, #156]	; 0x9c
   12960:	str	r3, [sp, #12]
   12964:	ldr	r3, [sp, #152]	; 0x98
   12968:	str	r3, [sp, #8]
   1296c:	ldr	r3, [sp, #148]	; 0x94
   12970:	str	r3, [sp, #4]
   12974:	mov	r3, #5
   12978:	str	r3, [sp]
   1297c:	ldr	r3, [sp, #40]	; 0x28
   12980:	mov	r0, r8
   12984:	bl	1283c <__assert_fail@plt+0x18f8>
   12988:	mov	r4, r0
   1298c:	b	134ec <__assert_fail@plt+0x25a8>
   12990:	ldr	r3, [pc, #2948]	; 1351c <__assert_fail@plt+0x25d8>
   12994:	mov	r7, #1
   12998:	mov	r4, #0
   1299c:	mov	sl, #5
   129a0:	str	r7, [sp, #24]
   129a4:	str	r7, [sp, #32]
   129a8:	str	r3, [sp, #44]	; 0x2c
   129ac:	b	128c8 <__assert_fail@plt+0x1984>
   129b0:	cmp	r7, #0
   129b4:	bne	12af8 <__assert_fail@plt+0x1bb4>
   129b8:	cmp	r5, #0
   129bc:	mov	r4, #1
   129c0:	movne	r3, #34	; 0x22
   129c4:	strbne	r3, [r8]
   129c8:	mov	r3, #1
   129cc:	str	r3, [sp, #24]
   129d0:	str	r3, [sp, #32]
   129d4:	ldr	r3, [pc, #2880]	; 1351c <__assert_fail@plt+0x25d8>
   129d8:	str	r3, [sp, #44]	; 0x2c
   129dc:	b	128c8 <__assert_fail@plt+0x1984>
   129e0:	cmp	sl, #10
   129e4:	beq	12a08 <__assert_fail@plt+0x1ac4>
   129e8:	mov	r1, sl
   129ec:	ldr	r0, [pc, #2860]	; 13520 <__assert_fail@plt+0x25dc>
   129f0:	bl	12708 <__assert_fail@plt+0x17c4>
   129f4:	mov	r1, sl
   129f8:	str	r0, [sp, #156]	; 0x9c
   129fc:	ldr	r0, [pc, #2848]	; 13524 <__assert_fail@plt+0x25e0>
   12a00:	bl	12708 <__assert_fail@plt+0x17c4>
   12a04:	str	r0, [sp, #160]	; 0xa0
   12a08:	cmp	r7, #0
   12a0c:	moveq	r4, r7
   12a10:	beq	12a28 <__assert_fail@plt+0x1ae4>
   12a14:	mov	r4, #0
   12a18:	b	12a38 <__assert_fail@plt+0x1af4>
   12a1c:	cmp	r5, r4
   12a20:	strbhi	r3, [r8, r4]
   12a24:	add	r4, r4, #1
   12a28:	ldr	r3, [sp, #156]	; 0x9c
   12a2c:	ldrb	r3, [r3, r4]
   12a30:	cmp	r3, #0
   12a34:	bne	12a1c <__assert_fail@plt+0x1ad8>
   12a38:	ldr	r0, [sp, #160]	; 0xa0
   12a3c:	bl	10e48 <strlen@plt>
   12a40:	ldr	r3, [sp, #160]	; 0xa0
   12a44:	str	r0, [sp, #32]
   12a48:	str	r3, [sp, #44]	; 0x2c
   12a4c:	mov	r3, #1
   12a50:	str	r3, [sp, #24]
   12a54:	b	128c8 <__assert_fail@plt+0x1984>
   12a58:	mov	r3, #1
   12a5c:	cmp	r7, #0
   12a60:	streq	r3, [sp, #24]
   12a64:	beq	12aa8 <__assert_fail@plt+0x1b64>
   12a68:	str	r3, [sp, #32]
   12a6c:	b	12a94 <__assert_fail@plt+0x1b50>
   12a70:	cmp	r7, #0
   12a74:	beq	12aa8 <__assert_fail@plt+0x1b64>
   12a78:	mov	r3, #1
   12a7c:	str	r3, [sp, #32]
   12a80:	ldr	r3, [pc, #2716]	; 13524 <__assert_fail@plt+0x25e0>
   12a84:	b	12b08 <__assert_fail@plt+0x1bc4>
   12a88:	mov	r7, #1
   12a8c:	str	r7, [sp, #24]
   12a90:	str	r7, [sp, #32]
   12a94:	ldr	r3, [pc, #2696]	; 13524 <__assert_fail@plt+0x25e0>
   12a98:	mov	r4, #0
   12a9c:	str	r3, [sp, #44]	; 0x2c
   12aa0:	mov	sl, #2
   12aa4:	b	128c8 <__assert_fail@plt+0x1984>
   12aa8:	cmp	r5, #0
   12aac:	movne	r3, #39	; 0x27
   12ab0:	movne	r7, #0
   12ab4:	strbne	r3, [r8]
   12ab8:	moveq	r7, r5
   12abc:	mov	r3, #1
   12ac0:	mov	r4, #1
   12ac4:	str	r3, [sp, #32]
   12ac8:	ldr	r3, [pc, #2644]	; 13524 <__assert_fail@plt+0x25e0>
   12acc:	str	r3, [sp, #44]	; 0x2c
   12ad0:	b	12aa0 <__assert_fail@plt+0x1b5c>
   12ad4:	bl	10f2c <abort@plt>
   12ad8:	mov	r3, #1
   12adc:	mov	r7, #0
   12ae0:	str	r3, [sp, #24]
   12ae4:	mov	r4, #0
   12ae8:	b	128c8 <__assert_fail@plt+0x1984>
   12aec:	mov	r7, #1
   12af0:	str	sl, [sp, #32]
   12af4:	b	12a94 <__assert_fail@plt+0x1b50>
   12af8:	mov	r3, #1
   12afc:	str	r7, [sp, #24]
   12b00:	str	r3, [sp, #32]
   12b04:	ldr	r3, [pc, #2576]	; 1351c <__assert_fail@plt+0x25d8>
   12b08:	str	r3, [sp, #44]	; 0x2c
   12b0c:	b	12ae4 <__assert_fail@plt+0x1ba0>
   12b10:	ldr	fp, [sp, #24]
   12b14:	ldr	r3, [sp, #32]
   12b18:	cmp	sl, #2
   12b1c:	moveq	fp, #0
   12b20:	andne	fp, fp, #1
   12b24:	adds	r5, r3, #0
   12b28:	movne	r5, #1
   12b2c:	ands	r3, fp, r5
   12b30:	str	r3, [sp, #64]	; 0x40
   12b34:	beq	12c04 <__assert_fail@plt+0x1cc0>
   12b38:	ldr	r3, [sp, #28]
   12b3c:	ldr	r2, [sp, #32]
   12b40:	cmp	r2, #1
   12b44:	add	r6, r3, r2
   12b48:	mov	r3, r2
   12b4c:	ldr	r2, [sp, #40]	; 0x28
   12b50:	movls	r3, #0
   12b54:	movhi	r3, #1
   12b58:	cmn	r2, #1
   12b5c:	movne	r3, #0
   12b60:	cmp	r3, #0
   12b64:	beq	12b74 <__assert_fail@plt+0x1c30>
   12b68:	ldr	r0, [sp, #48]	; 0x30
   12b6c:	bl	10e48 <strlen@plt>
   12b70:	str	r0, [sp, #40]	; 0x28
   12b74:	ldr	r3, [sp, #40]	; 0x28
   12b78:	cmp	r6, r3
   12b7c:	bhi	12bfc <__assert_fail@plt+0x1cb8>
   12b80:	ldr	r0, [sp, #28]
   12b84:	ldr	r2, [sp, #32]
   12b88:	ldr	r3, [sp, #48]	; 0x30
   12b8c:	ldr	r1, [sp, #44]	; 0x2c
   12b90:	add	r0, r3, r0
   12b94:	bl	10d58 <memcmp@plt>
   12b98:	cmp	r0, #0
   12b9c:	bne	12bfc <__assert_fail@plt+0x1cb8>
   12ba0:	cmp	r7, #0
   12ba4:	beq	12c04 <__assert_fail@plt+0x1cc0>
   12ba8:	str	r7, [sp, #24]
   12bac:	ldr	r3, [sp, #24]
   12bb0:	mov	r1, r9
   12bb4:	ldr	r2, [sp, #48]	; 0x30
   12bb8:	cmp	sl, #2
   12bbc:	movne	r3, #0
   12bc0:	andeq	r3, r3, #1
   12bc4:	cmp	r3, #0
   12bc8:	ldr	r3, [sp, #160]	; 0xa0
   12bcc:	movne	sl, #4
   12bd0:	str	sl, [sp]
   12bd4:	str	r3, [sp, #16]
   12bd8:	ldr	r3, [sp, #156]	; 0x9c
   12bdc:	str	r3, [sp, #12]
   12be0:	mov	r3, #0
   12be4:	str	r3, [sp, #8]
   12be8:	ldr	r3, [sp, #148]	; 0x94
   12bec:	bic	r3, r3, #2
   12bf0:	str	r3, [sp, #4]
   12bf4:	ldr	r3, [sp, #40]	; 0x28
   12bf8:	b	12980 <__assert_fail@plt+0x1a3c>
   12bfc:	mov	r3, #0
   12c00:	str	r3, [sp, #64]	; 0x40
   12c04:	ldr	r2, [sp, #28]
   12c08:	ldr	r3, [sp, #48]	; 0x30
   12c0c:	add	r3, r3, r2
   12c10:	str	r3, [sp, #80]	; 0x50
   12c14:	ldr	r3, [sp, #48]	; 0x30
   12c18:	ldrb	r6, [r3, r2]
   12c1c:	cmp	r6, #58	; 0x3a
   12c20:	bhi	12d84 <__assert_fail@plt+0x1e40>
   12c24:	cmp	r6, #43	; 0x2b
   12c28:	bcs	12f44 <__assert_fail@plt+0x2000>
   12c2c:	cmp	r6, #32
   12c30:	beq	12f98 <__assert_fail@plt+0x2054>
   12c34:	bhi	12cdc <__assert_fail@plt+0x1d98>
   12c38:	cmp	r6, #9
   12c3c:	beq	13140 <__assert_fail@plt+0x21fc>
   12c40:	bhi	12ca0 <__assert_fail@plt+0x1d5c>
   12c44:	cmp	r6, #7
   12c48:	beq	13150 <__assert_fail@plt+0x220c>
   12c4c:	bhi	1316c <__assert_fail@plt+0x2228>
   12c50:	cmp	r6, #0
   12c54:	beq	12fb4 <__assert_fail@plt+0x2070>
   12c58:	ldr	r3, [sp, #76]	; 0x4c
   12c5c:	cmp	r3, #1
   12c60:	bne	131b8 <__assert_fail@plt+0x2274>
   12c64:	bl	10e30 <__ctype_b_loc@plt>
   12c68:	ldr	r2, [r0]
   12c6c:	sxth	r3, r6
   12c70:	lsl	r3, r3, #1
   12c74:	ldrh	r5, [r2, r3]
   12c78:	ldr	r3, [sp, #76]	; 0x4c
   12c7c:	ubfx	r5, r5, #14, #1
   12c80:	str	r3, [sp, #56]	; 0x38
   12c84:	ldr	r3, [sp, #24]
   12c88:	eor	fp, r5, #1
   12c8c:	and	fp, fp, r3
   12c90:	ands	fp, fp, #255	; 0xff
   12c94:	beq	12e74 <__assert_fail@plt+0x1f30>
   12c98:	mov	r5, #0
   12c9c:	b	13264 <__assert_fail@plt+0x2320>
   12ca0:	cmp	r6, #11
   12ca4:	beq	13174 <__assert_fail@plt+0x2230>
   12ca8:	bcc	13148 <__assert_fail@plt+0x2204>
   12cac:	cmp	r6, #12
   12cb0:	beq	1317c <__assert_fail@plt+0x2238>
   12cb4:	cmp	r6, #13
   12cb8:	moveq	r3, #114	; 0x72
   12cbc:	bne	12c58 <__assert_fail@plt+0x1d14>
   12cc0:	cmp	sl, #2
   12cc4:	movne	r2, #0
   12cc8:	andeq	r2, r7, #1
   12ccc:	cmp	r2, #0
   12cd0:	beq	13154 <__assert_fail@plt+0x2210>
   12cd4:	mov	sl, #2
   12cd8:	b	12bac <__assert_fail@plt+0x1c68>
   12cdc:	cmp	r6, #37	; 0x25
   12ce0:	beq	12f44 <__assert_fail@plt+0x2000>
   12ce4:	bhi	12cf8 <__assert_fail@plt+0x1db4>
   12ce8:	cmp	r6, #35	; 0x23
   12cec:	beq	12f8c <__assert_fail@plt+0x2048>
   12cf0:	mov	r5, #0
   12cf4:	b	12f9c <__assert_fail@plt+0x2058>
   12cf8:	cmp	r6, #39	; 0x27
   12cfc:	bne	12cf0 <__assert_fail@plt+0x1dac>
   12d00:	cmp	sl, #2
   12d04:	ldrne	r5, [sp, #36]	; 0x24
   12d08:	movne	r3, r5
   12d0c:	strne	r3, [sp, #68]	; 0x44
   12d10:	bne	13090 <__assert_fail@plt+0x214c>
   12d14:	cmp	r7, #0
   12d18:	bne	12bac <__assert_fail@plt+0x1c68>
   12d1c:	ldr	r3, [sp, #60]	; 0x3c
   12d20:	cmp	r9, #0
   12d24:	clz	r3, r3
   12d28:	lsr	r3, r3, #5
   12d2c:	moveq	r3, #0
   12d30:	cmp	r3, #0
   12d34:	strne	r9, [sp, #60]	; 0x3c
   12d38:	movne	r9, #0
   12d3c:	bne	12d4c <__assert_fail@plt+0x1e08>
   12d40:	cmp	r9, r4
   12d44:	movhi	r3, #39	; 0x27
   12d48:	strbhi	r3, [r8, r4]
   12d4c:	add	r3, r4, #1
   12d50:	ldr	r5, [sp, #36]	; 0x24
   12d54:	mov	fp, #0
   12d58:	cmp	r3, r9
   12d5c:	movcc	r2, #92	; 0x5c
   12d60:	str	fp, [sp, #52]	; 0x34
   12d64:	strbcc	r2, [r8, r3]
   12d68:	add	r3, r4, #2
   12d6c:	add	r4, r4, #3
   12d70:	cmp	r3, r9
   12d74:	str	r5, [sp, #68]	; 0x44
   12d78:	movcc	r2, #39	; 0x27
   12d7c:	strbcc	r2, [r8, r3]
   12d80:	b	12e74 <__assert_fail@plt+0x1f30>
   12d84:	cmp	r6, #94	; 0x5e
   12d88:	beq	12cf0 <__assert_fail@plt+0x1dac>
   12d8c:	bhi	12f4c <__assert_fail@plt+0x2008>
   12d90:	cmp	r6, #90	; 0x5a
   12d94:	bhi	12f38 <__assert_fail@plt+0x1ff4>
   12d98:	cmp	r6, #65	; 0x41
   12d9c:	bcs	12f44 <__assert_fail@plt+0x2000>
   12da0:	cmp	r6, #62	; 0x3e
   12da4:	bls	12cf0 <__assert_fail@plt+0x1dac>
   12da8:	cmp	r6, #63	; 0x3f
   12dac:	bne	12c58 <__assert_fail@plt+0x1d14>
   12db0:	cmp	sl, #2
   12db4:	beq	13098 <__assert_fail@plt+0x2154>
   12db8:	cmp	sl, #5
   12dbc:	movne	fp, #0
   12dc0:	bne	13468 <__assert_fail@plt+0x2524>
   12dc4:	ldr	r3, [sp, #148]	; 0x94
   12dc8:	tst	r3, #4
   12dcc:	beq	130a0 <__assert_fail@plt+0x215c>
   12dd0:	ldr	r3, [sp, #28]
   12dd4:	add	r2, r3, #2
   12dd8:	ldr	r3, [sp, #40]	; 0x28
   12ddc:	cmp	r2, r3
   12de0:	bcs	130a0 <__assert_fail@plt+0x215c>
   12de4:	ldr	r1, [sp, #28]
   12de8:	ldr	r3, [sp, #48]	; 0x30
   12dec:	add	r3, r3, r1
   12df0:	ldrb	r1, [r3, #1]
   12df4:	cmp	r1, #63	; 0x3f
   12df8:	bne	130a0 <__assert_fail@plt+0x215c>
   12dfc:	ldr	r3, [sp, #48]	; 0x30
   12e00:	ldrb	r6, [r3, r2]
   12e04:	sub	r3, r6, #33	; 0x21
   12e08:	uxtb	r3, r3
   12e0c:	cmp	r3, #29
   12e10:	bhi	13470 <__assert_fail@plt+0x252c>
   12e14:	ldr	r0, [pc, #1804]	; 13528 <__assert_fail@plt+0x25e4>
   12e18:	mov	r5, #1
   12e1c:	ands	r5, r0, r5, lsl r3
   12e20:	beq	13478 <__assert_fail@plt+0x2534>
   12e24:	cmp	r7, #0
   12e28:	bne	12bac <__assert_fail@plt+0x1c68>
   12e2c:	cmp	r9, r4
   12e30:	add	r3, r4, #1
   12e34:	str	r2, [sp, #28]
   12e38:	mov	r5, #0
   12e3c:	strbhi	r1, [r8, r4]
   12e40:	cmp	r9, r3
   12e44:	mov	fp, r5
   12e48:	movhi	r1, #34	; 0x22
   12e4c:	strbhi	r1, [r8, r3]
   12e50:	add	r3, r4, #2
   12e54:	cmp	r9, r3
   12e58:	movhi	r1, #34	; 0x22
   12e5c:	strbhi	r1, [r8, r3]
   12e60:	add	r3, r4, #3
   12e64:	add	r4, r4, #4
   12e68:	cmp	r9, r3
   12e6c:	movhi	r1, #63	; 0x3f
   12e70:	strbhi	r1, [r8, r3]
   12e74:	ldr	r3, [sp, #24]
   12e78:	eor	r3, r3, #1
   12e7c:	cmp	sl, #2
   12e80:	orreq	r3, r3, #1
   12e84:	eor	r3, r3, #1
   12e88:	orr	r3, r7, r3
   12e8c:	tst	r3, #255	; 0xff
   12e90:	beq	12ebc <__assert_fail@plt+0x1f78>
   12e94:	ldr	r3, [sp, #152]	; 0x98
   12e98:	cmp	r3, #0
   12e9c:	beq	12ebc <__assert_fail@plt+0x1f78>
   12ea0:	ldr	r1, [sp, #152]	; 0x98
   12ea4:	ubfx	r2, r6, #5, #8
   12ea8:	and	r3, r6, #31
   12eac:	ldr	r2, [r1, r2, lsl #2]
   12eb0:	lsr	r3, r2, r3
   12eb4:	tst	r3, #1
   12eb8:	bne	12ec8 <__assert_fail@plt+0x1f84>
   12ebc:	ldr	r3, [sp, #64]	; 0x40
   12ec0:	cmp	r3, #0
   12ec4:	beq	130c0 <__assert_fail@plt+0x217c>
   12ec8:	sub	r3, sl, #2
   12ecc:	cmp	r7, #0
   12ed0:	clz	r3, r3
   12ed4:	lsr	r3, r3, #5
   12ed8:	bne	12bac <__assert_fail@plt+0x1c68>
   12edc:	ldr	r2, [sp, #52]	; 0x34
   12ee0:	eor	r2, r2, #1
   12ee4:	ands	r3, r3, r2
   12ee8:	beq	12f20 <__assert_fail@plt+0x1fdc>
   12eec:	cmp	r9, r4
   12ef0:	str	r3, [sp, #52]	; 0x34
   12ef4:	movhi	r2, #39	; 0x27
   12ef8:	strbhi	r2, [r8, r4]
   12efc:	add	r2, r4, #1
   12f00:	cmp	r9, r2
   12f04:	movhi	r1, #36	; 0x24
   12f08:	strbhi	r1, [r8, r2]
   12f0c:	add	r2, r4, #2
   12f10:	add	r4, r4, #3
   12f14:	cmp	r9, r2
   12f18:	movhi	r1, #39	; 0x27
   12f1c:	strbhi	r1, [r8, r2]
   12f20:	cmp	r9, r4
   12f24:	ldr	fp, [sp, #36]	; 0x24
   12f28:	movhi	r3, #92	; 0x5c
   12f2c:	strbhi	r3, [r8, r4]
   12f30:	add	r4, r4, #1
   12f34:	b	130c0 <__assert_fail@plt+0x217c>
   12f38:	cmp	r6, #92	; 0x5c
   12f3c:	beq	130a8 <__assert_fail@plt+0x2164>
   12f40:	bls	12cf0 <__assert_fail@plt+0x1dac>
   12f44:	ldr	r5, [sp, #36]	; 0x24
   12f48:	b	13090 <__assert_fail@plt+0x214c>
   12f4c:	cmp	r6, #122	; 0x7a
   12f50:	bhi	12f70 <__assert_fail@plt+0x202c>
   12f54:	cmp	r6, #97	; 0x61
   12f58:	bcs	12f44 <__assert_fail@plt+0x2000>
   12f5c:	cmp	r6, #95	; 0x5f
   12f60:	beq	12f44 <__assert_fail@plt+0x2000>
   12f64:	cmp	r6, #96	; 0x60
   12f68:	bne	12c58 <__assert_fail@plt+0x1d14>
   12f6c:	b	12cf0 <__assert_fail@plt+0x1dac>
   12f70:	cmp	r6, #124	; 0x7c
   12f74:	beq	12cf0 <__assert_fail@plt+0x1dac>
   12f78:	bcc	13184 <__assert_fail@plt+0x2240>
   12f7c:	cmp	r6, #125	; 0x7d
   12f80:	beq	13184 <__assert_fail@plt+0x2240>
   12f84:	cmp	r6, #126	; 0x7e
   12f88:	bne	12c58 <__assert_fail@plt+0x1d14>
   12f8c:	ldr	r3, [sp, #28]
   12f90:	cmp	r3, #0
   12f94:	bne	130a0 <__assert_fail@plt+0x215c>
   12f98:	ldr	r5, [sp, #36]	; 0x24
   12f9c:	cmp	sl, #2
   12fa0:	movne	fp, #0
   12fa4:	andeq	fp, r7, #1
   12fa8:	cmp	fp, #0
   12fac:	beq	12e74 <__assert_fail@plt+0x1f30>
   12fb0:	b	12cd4 <__assert_fail@plt+0x1d90>
   12fb4:	ldr	r3, [sp, #24]
   12fb8:	cmp	r3, #0
   12fbc:	beq	13084 <__assert_fail@plt+0x2140>
   12fc0:	sub	r2, sl, #2
   12fc4:	cmp	r7, #0
   12fc8:	clz	r2, r2
   12fcc:	lsr	r2, r2, #5
   12fd0:	bne	12ba8 <__assert_fail@plt+0x1c64>
   12fd4:	ldr	r3, [sp, #52]	; 0x34
   12fd8:	eor	r3, r3, #1
   12fdc:	ands	r2, r2, r3
   12fe0:	moveq	r3, r4
   12fe4:	beq	1301c <__assert_fail@plt+0x20d8>
   12fe8:	cmp	r9, r4
   12fec:	str	r2, [sp, #52]	; 0x34
   12ff0:	movhi	r3, #39	; 0x27
   12ff4:	strbhi	r3, [r8, r4]
   12ff8:	add	r3, r4, #1
   12ffc:	cmp	r9, r3
   13000:	movhi	r1, #36	; 0x24
   13004:	strbhi	r1, [r8, r3]
   13008:	add	r3, r4, #2
   1300c:	cmp	r9, r3
   13010:	movhi	r1, #39	; 0x27
   13014:	strbhi	r1, [r8, r3]
   13018:	add	r3, r4, #3
   1301c:	cmp	r9, r3
   13020:	add	r4, r3, #1
   13024:	movhi	r2, #92	; 0x5c
   13028:	strbhi	r2, [r8, r3]
   1302c:	cmp	fp, #0
   13030:	beq	13458 <__assert_fail@plt+0x2514>
   13034:	ldr	r2, [sp, #28]
   13038:	ldr	r1, [sp, #40]	; 0x28
   1303c:	add	r2, r2, #1
   13040:	cmp	r2, r1
   13044:	bcs	1307c <__assert_fail@plt+0x2138>
   13048:	ldr	r1, [sp, #48]	; 0x30
   1304c:	mov	r6, #48	; 0x30
   13050:	ldrb	r2, [r1, r2]
   13054:	sub	r2, r2, #48	; 0x30
   13058:	cmp	r2, #9
   1305c:	bhi	13468 <__assert_fail@plt+0x2524>
   13060:	cmp	r9, r4
   13064:	add	r2, r3, #2
   13068:	strbhi	r6, [r8, r4]
   1306c:	cmp	r9, r2
   13070:	add	r4, r3, #3
   13074:	movhi	r1, #48	; 0x30
   13078:	strbhi	r1, [r8, r2]
   1307c:	mov	r5, #0
   13080:	b	13460 <__assert_fail@plt+0x251c>
   13084:	ldr	r3, [sp, #148]	; 0x94
   13088:	ands	r5, r3, #1
   1308c:	bne	13114 <__assert_fail@plt+0x21d0>
   13090:	mov	fp, #0
   13094:	b	12e74 <__assert_fail@plt+0x1f30>
   13098:	cmp	r7, #0
   1309c:	bne	12bac <__assert_fail@plt+0x1c68>
   130a0:	mov	r5, #0
   130a4:	b	13090 <__assert_fail@plt+0x214c>
   130a8:	cmp	sl, #2
   130ac:	bne	13120 <__assert_fail@plt+0x21dc>
   130b0:	cmp	r7, #0
   130b4:	bne	12bac <__assert_fail@plt+0x1c68>
   130b8:	mov	r5, r7
   130bc:	mov	fp, r7
   130c0:	ldr	r3, [sp, #52]	; 0x34
   130c4:	eor	fp, fp, #1
   130c8:	tst	r3, fp
   130cc:	beq	130f8 <__assert_fail@plt+0x21b4>
   130d0:	cmp	r9, r4
   130d4:	movhi	r3, #39	; 0x27
   130d8:	strbhi	r3, [r8, r4]
   130dc:	add	r3, r4, #1
   130e0:	add	r4, r4, #2
   130e4:	cmp	r9, r3
   130e8:	movhi	r2, #39	; 0x27
   130ec:	strbhi	r2, [r8, r3]
   130f0:	mov	r3, #0
   130f4:	str	r3, [sp, #52]	; 0x34
   130f8:	cmp	r9, r4
   130fc:	ldr	r3, [sp, #72]	; 0x48
   13100:	strbhi	r6, [r8, r4]
   13104:	cmp	r5, #0
   13108:	add	r4, r4, #1
   1310c:	moveq	r3, #0
   13110:	str	r3, [sp, #72]	; 0x48
   13114:	ldr	r3, [sp, #28]
   13118:	add	r3, r3, #1
   1311c:	b	128d4 <__assert_fail@plt+0x1990>
   13120:	ldr	r3, [sp, #24]
   13124:	and	r3, r3, r7
   13128:	tst	r5, r3
   1312c:	moveq	r3, r6
   13130:	beq	12cc0 <__assert_fail@plt+0x1d7c>
   13134:	mov	fp, #0
   13138:	mov	r5, fp
   1313c:	b	130c0 <__assert_fail@plt+0x217c>
   13140:	mov	r3, #116	; 0x74
   13144:	b	12cc0 <__assert_fail@plt+0x1d7c>
   13148:	mov	r3, #110	; 0x6e
   1314c:	b	12cc0 <__assert_fail@plt+0x1d7c>
   13150:	mov	r3, #97	; 0x61
   13154:	ldr	r2, [sp, #24]
   13158:	cmp	r2, #0
   1315c:	beq	130a0 <__assert_fail@plt+0x215c>
   13160:	mov	r6, r3
   13164:	mov	r5, #0
   13168:	b	12ec8 <__assert_fail@plt+0x1f84>
   1316c:	mov	r3, #98	; 0x62
   13170:	b	13154 <__assert_fail@plt+0x2210>
   13174:	mov	r3, #118	; 0x76
   13178:	b	13154 <__assert_fail@plt+0x2210>
   1317c:	mov	r3, #102	; 0x66
   13180:	b	13154 <__assert_fail@plt+0x2210>
   13184:	ldr	r3, [sp, #40]	; 0x28
   13188:	cmn	r3, #1
   1318c:	bne	131ac <__assert_fail@plt+0x2268>
   13190:	ldr	r3, [sp, #48]	; 0x30
   13194:	ldrb	r3, [r3, #1]
   13198:	adds	r3, r3, #0
   1319c:	movne	r3, #1
   131a0:	cmp	r3, #0
   131a4:	bne	130a0 <__assert_fail@plt+0x215c>
   131a8:	b	12f8c <__assert_fail@plt+0x2048>
   131ac:	ldr	r3, [sp, #40]	; 0x28
   131b0:	subs	r3, r3, #1
   131b4:	b	1319c <__assert_fail@plt+0x2258>
   131b8:	mov	r3, #0
   131bc:	mov	r2, #0
   131c0:	strd	r2, [sp, #96]	; 0x60
   131c4:	ldr	r3, [sp, #40]	; 0x28
   131c8:	cmn	r3, #1
   131cc:	bne	131dc <__assert_fail@plt+0x2298>
   131d0:	ldr	r0, [sp, #48]	; 0x30
   131d4:	bl	10e48 <strlen@plt>
   131d8:	str	r0, [sp, #40]	; 0x28
   131dc:	ldr	r5, [sp, #36]	; 0x24
   131e0:	mov	r3, #0
   131e4:	str	r3, [sp, #56]	; 0x38
   131e8:	ldr	r3, [sp, #28]
   131ec:	add	r0, sp, #92	; 0x5c
   131f0:	ldr	r1, [sp, #40]	; 0x28
   131f4:	ldr	r2, [sp, #56]	; 0x38
   131f8:	add	r2, r3, r2
   131fc:	ldr	r3, [sp, #48]	; 0x30
   13200:	add	fp, r3, r2
   13204:	sub	r2, r1, r2
   13208:	add	r3, sp, #96	; 0x60
   1320c:	mov	r1, fp
   13210:	bl	14b44 <__assert_fail@plt+0x3c00>
   13214:	subs	r2, r0, #0
   13218:	beq	13258 <__assert_fail@plt+0x2314>
   1321c:	cmn	r2, #1
   13220:	beq	1342c <__assert_fail@plt+0x24e8>
   13224:	cmn	r2, #2
   13228:	bne	1339c <__assert_fail@plt+0x2458>
   1322c:	ldr	r3, [sp, #28]
   13230:	ldr	r2, [sp, #56]	; 0x38
   13234:	add	r3, r3, r2
   13238:	ldr	r2, [sp, #40]	; 0x28
   1323c:	cmp	r2, r3
   13240:	bls	1342c <__assert_fail@plt+0x24e8>
   13244:	ldr	r2, [sp, #56]	; 0x38
   13248:	ldr	r3, [sp, #80]	; 0x50
   1324c:	ldrb	r5, [r3, r2]
   13250:	cmp	r5, #0
   13254:	bne	1338c <__assert_fail@plt+0x2448>
   13258:	ldr	r3, [sp, #56]	; 0x38
   1325c:	cmp	r3, #1
   13260:	bls	12c84 <__assert_fail@plt+0x1d40>
   13264:	ldr	r3, [sp, #28]
   13268:	mov	fp, #0
   1326c:	mov	ip, #92	; 0x5c
   13270:	ldr	r2, [sp, #56]	; 0x38
   13274:	add	r3, r3, r2
   13278:	ldr	r2, [sp, #24]
   1327c:	str	r3, [sp, #36]	; 0x24
   13280:	eor	r3, r5, #1
   13284:	and	r3, r3, r2
   13288:	mov	r2, #39	; 0x27
   1328c:	uxtb	r3, r3
   13290:	cmp	r3, #0
   13294:	beq	13434 <__assert_fail@plt+0x24f0>
   13298:	sub	r0, sl, #2
   1329c:	cmp	r7, #0
   132a0:	clz	r0, r0
   132a4:	lsr	r0, r0, #5
   132a8:	bne	12ba8 <__assert_fail@plt+0x1c64>
   132ac:	ldr	r1, [sp, #52]	; 0x34
   132b0:	eor	r1, r1, #1
   132b4:	ands	r1, r0, r1
   132b8:	beq	132e8 <__assert_fail@plt+0x23a4>
   132bc:	cmp	r9, r4
   132c0:	add	r0, r4, #1
   132c4:	str	r1, [sp, #52]	; 0x34
   132c8:	strbhi	r2, [r8, r4]
   132cc:	cmp	r9, r0
   132d0:	movhi	lr, #36	; 0x24
   132d4:	strbhi	lr, [r8, r0]
   132d8:	add	r0, r4, #2
   132dc:	add	r4, r4, #3
   132e0:	cmp	r9, r0
   132e4:	strbhi	r2, [r8, r0]
   132e8:	cmp	r9, r4
   132ec:	add	r0, r4, #1
   132f0:	mov	fp, r3
   132f4:	strbhi	ip, [r8, r4]
   132f8:	cmp	r9, r0
   132fc:	lsrhi	r1, r6, #6
   13300:	addhi	r1, r1, #48	; 0x30
   13304:	strbhi	r1, [r8, r0]
   13308:	add	r0, r4, #2
   1330c:	add	r4, r4, #3
   13310:	cmp	r9, r0
   13314:	ubfxhi	r1, r6, #3, #3
   13318:	and	r6, r6, #7
   1331c:	add	r6, r6, #48	; 0x30
   13320:	addhi	r1, r1, #48	; 0x30
   13324:	strbhi	r1, [r8, r0]
   13328:	eor	r0, fp, #1
   1332c:	ldr	r1, [sp, #28]
   13330:	ldr	lr, [sp, #52]	; 0x34
   13334:	add	r1, r1, #1
   13338:	and	r0, r0, lr
   1333c:	ldr	lr, [sp, #36]	; 0x24
   13340:	cmp	r1, lr
   13344:	bcs	130c0 <__assert_fail@plt+0x217c>
   13348:	cmp	r0, #0
   1334c:	beq	13370 <__assert_fail@plt+0x242c>
   13350:	cmp	r9, r4
   13354:	add	r0, r4, #1
   13358:	strbhi	r2, [r8, r4]
   1335c:	cmp	r9, r0
   13360:	add	r4, r4, #2
   13364:	strbhi	r2, [r8, r0]
   13368:	mov	r0, #0
   1336c:	str	r0, [sp, #52]	; 0x34
   13370:	ldr	r0, [sp, #48]	; 0x30
   13374:	cmp	r9, r4
   13378:	str	r1, [sp, #28]
   1337c:	strbhi	r6, [r8, r4]
   13380:	add	r4, r4, #1
   13384:	ldrb	r6, [r0, r1]
   13388:	b	13290 <__assert_fail@plt+0x234c>
   1338c:	ldr	r3, [sp, #56]	; 0x38
   13390:	add	r3, r3, #1
   13394:	str	r3, [sp, #56]	; 0x38
   13398:	b	1322c <__assert_fail@plt+0x22e8>
   1339c:	cmp	sl, #2
   133a0:	movne	r3, #0
   133a4:	andeq	r3, r7, #1
   133a8:	cmp	r3, #0
   133ac:	movne	r1, #1
   133b0:	bne	1340c <__assert_fail@plt+0x24c8>
   133b4:	ldr	r0, [sp, #92]	; 0x5c
   133b8:	str	r2, [sp, #84]	; 0x54
   133bc:	bl	10da0 <iswprint@plt>
   133c0:	ldr	r3, [sp, #56]	; 0x38
   133c4:	cmp	r0, #0
   133c8:	add	r0, sp, #96	; 0x60
   133cc:	moveq	r5, #0
   133d0:	ldr	r2, [sp, #84]	; 0x54
   133d4:	add	r3, r3, r2
   133d8:	str	r3, [sp, #56]	; 0x38
   133dc:	bl	10d40 <mbsinit@plt>
   133e0:	cmp	r0, #0
   133e4:	beq	131e8 <__assert_fail@plt+0x22a4>
   133e8:	b	13258 <__assert_fail@plt+0x2314>
   133ec:	ldrb	r3, [fp, #1]!
   133f0:	cmp	r3, #94	; 0x5e
   133f4:	beq	12cd4 <__assert_fail@plt+0x1d90>
   133f8:	bhi	13418 <__assert_fail@plt+0x24d4>
   133fc:	sub	r3, r3, #91	; 0x5b
   13400:	cmp	r3, #1
   13404:	bls	12cd4 <__assert_fail@plt+0x1d90>
   13408:	add	r1, r1, #1
   1340c:	cmp	r1, r2
   13410:	bne	133ec <__assert_fail@plt+0x24a8>
   13414:	b	133b4 <__assert_fail@plt+0x2470>
   13418:	cmp	r3, #96	; 0x60
   1341c:	beq	12cd4 <__assert_fail@plt+0x1d90>
   13420:	cmp	r3, #124	; 0x7c
   13424:	bne	13408 <__assert_fail@plt+0x24c4>
   13428:	b	12cd4 <__assert_fail@plt+0x1d90>
   1342c:	mov	r5, #0
   13430:	b	13258 <__assert_fail@plt+0x2314>
   13434:	ldr	r1, [sp, #64]	; 0x40
   13438:	cmp	r1, #0
   1343c:	beq	13328 <__assert_fail@plt+0x23e4>
   13440:	cmp	r9, r4
   13444:	mov	r1, #0
   13448:	strbhi	ip, [r8, r4]
   1344c:	add	r4, r4, #1
   13450:	str	r1, [sp, #64]	; 0x40
   13454:	b	13328 <__assert_fail@plt+0x23e4>
   13458:	mov	r5, fp
   1345c:	ldr	fp, [sp, #24]
   13460:	mov	r6, #48	; 0x30
   13464:	b	12e74 <__assert_fail@plt+0x1f30>
   13468:	mov	r5, #0
   1346c:	b	12e74 <__assert_fail@plt+0x1f30>
   13470:	mov	r6, r1
   13474:	b	130a0 <__assert_fail@plt+0x215c>
   13478:	mov	r6, r1
   1347c:	b	13090 <__assert_fail@plt+0x214c>
   13480:	ldr	r2, [sp, #28]
   13484:	ldr	r3, [sp, #40]	; 0x28
   13488:	subs	r3, r3, r2
   1348c:	movne	r3, #1
   13490:	b	128f8 <__assert_fail@plt+0x19b4>
   13494:	ldr	r3, [sp, #60]	; 0x3c
   13498:	mov	sl, #2
   1349c:	ldr	r7, [sp, #72]	; 0x48
   134a0:	adds	r6, r3, #0
   134a4:	mov	r5, r3
   134a8:	movne	r6, #1
   134ac:	cmp	r9, #0
   134b0:	movne	r6, #0
   134b4:	cmp	r6, #0
   134b8:	bne	12888 <__assert_fail@plt+0x1944>
   134bc:	ldr	r3, [sp, #68]	; 0x44
   134c0:	ldr	r2, [sp, #44]	; 0x2c
   134c4:	cmp	r2, #0
   134c8:	moveq	r3, #0
   134cc:	andne	r3, r3, #1
   134d0:	cmp	r3, #0
   134d4:	movne	r3, r2
   134d8:	subne	r3, r3, #1
   134dc:	bne	1350c <__assert_fail@plt+0x25c8>
   134e0:	cmp	r9, r4
   134e4:	movhi	r3, #0
   134e8:	strbhi	r3, [r8, r4]
   134ec:	mov	r0, r4
   134f0:	add	sp, sp, #108	; 0x6c
   134f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134f8:	mov	r3, r7
   134fc:	b	134c0 <__assert_fail@plt+0x257c>
   13500:	cmp	r9, r4
   13504:	strbhi	r2, [r8, r4]
   13508:	add	r4, r4, #1
   1350c:	ldrb	r2, [r3, #1]!
   13510:	cmp	r2, #0
   13514:	bne	13500 <__assert_fail@plt+0x25bc>
   13518:	b	134e0 <__assert_fail@plt+0x259c>
   1351c:	andeq	r4, r1, r9, lsl lr
   13520:	andeq	r5, r1, r1, ror r5
   13524:	andeq	r5, r1, pc, ror #10
   13528:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1352c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13530:	sub	sp, sp, #52	; 0x34
   13534:	mov	r6, r0
   13538:	mov	r5, r3
   1353c:	mov	r8, r1
   13540:	mov	r9, r2
   13544:	bl	10e60 <__errno_location@plt>
   13548:	ldr	r3, [r0]
   1354c:	cmn	r6, #-2147483647	; 0x80000001
   13550:	str	r0, [sp, #24]
   13554:	ldr	r7, [pc, #368]	; 136cc <__assert_fail@plt+0x2788>
   13558:	str	r3, [sp, #32]
   1355c:	movne	r3, #0
   13560:	moveq	r3, #1
   13564:	orrs	r3, r3, r6, lsr #31
   13568:	ldr	r4, [r7]
   1356c:	beq	13574 <__assert_fail@plt+0x2630>
   13570:	bl	10f2c <abort@plt>
   13574:	ldr	r2, [r7, #4]
   13578:	cmp	r2, r6
   1357c:	bgt	135ec <__assert_fail@plt+0x26a8>
   13580:	add	sl, r7, #8
   13584:	mov	r3, #8
   13588:	cmp	r4, sl
   1358c:	add	r1, sp, #44	; 0x2c
   13590:	str	r2, [sp, #44]	; 0x2c
   13594:	sub	r2, r6, r2
   13598:	movne	r0, r4
   1359c:	moveq	r0, #0
   135a0:	add	r2, r2, #1
   135a4:	str	r3, [sp]
   135a8:	mvn	r3, #-2147483648	; 0x80000000
   135ac:	bl	14280 <__assert_fail@plt+0x333c>
   135b0:	cmp	r4, sl
   135b4:	mov	fp, r0
   135b8:	str	r0, [r7]
   135bc:	ldmeq	r4, {r0, r1}
   135c0:	mov	r4, fp
   135c4:	ldr	r2, [sp, #44]	; 0x2c
   135c8:	stmeq	fp, {r0, r1}
   135cc:	mov	r1, #0
   135d0:	ldr	r0, [r7, #4]
   135d4:	sub	r2, r2, r0
   135d8:	add	r0, fp, r0, lsl #3
   135dc:	lsl	r2, r2, #3
   135e0:	bl	10e78 <memset@plt>
   135e4:	ldr	r3, [sp, #44]	; 0x2c
   135e8:	str	r3, [r7, #4]
   135ec:	ldr	r3, [r5, #4]
   135f0:	add	sl, r4, r6, lsl #3
   135f4:	mov	r2, r8
   135f8:	ldr	fp, [r4, r6, lsl #3]
   135fc:	ldr	r7, [sl, #4]
   13600:	orr	r3, r3, #1
   13604:	str	r3, [sp, #28]
   13608:	add	r3, r5, #8
   1360c:	mov	r1, fp
   13610:	str	r3, [sp, #36]	; 0x24
   13614:	mov	r0, r7
   13618:	ldr	r3, [r5, #44]	; 0x2c
   1361c:	str	r3, [sp, #16]
   13620:	ldr	r3, [r5, #40]	; 0x28
   13624:	str	r3, [sp, #12]
   13628:	add	r3, r5, #8
   1362c:	str	r3, [sp, #8]
   13630:	ldr	r3, [sp, #28]
   13634:	str	r3, [sp, #4]
   13638:	ldr	r3, [r5]
   1363c:	str	r3, [sp]
   13640:	mov	r3, r9
   13644:	bl	1283c <__assert_fail@plt+0x18f8>
   13648:	cmp	fp, r0
   1364c:	bhi	136b4 <__assert_fail@plt+0x2770>
   13650:	ldr	r3, [pc, #120]	; 136d0 <__assert_fail@plt+0x278c>
   13654:	add	fp, r0, #1
   13658:	str	fp, [r4, r6, lsl #3]
   1365c:	cmp	r7, r3
   13660:	beq	1366c <__assert_fail@plt+0x2728>
   13664:	mov	r0, r7
   13668:	bl	14a98 <__assert_fail@plt+0x3b54>
   1366c:	mov	r0, fp
   13670:	bl	14170 <__assert_fail@plt+0x322c>
   13674:	ldr	r3, [r5, #44]	; 0x2c
   13678:	mov	r2, r8
   1367c:	mov	r1, fp
   13680:	str	r0, [sl, #4]
   13684:	mov	r7, r0
   13688:	str	r3, [sp, #16]
   1368c:	ldr	r3, [r5, #40]	; 0x28
   13690:	str	r3, [sp, #12]
   13694:	add	r3, r5, #8
   13698:	str	r3, [sp, #8]
   1369c:	ldr	r3, [sp, #28]
   136a0:	str	r3, [sp, #4]
   136a4:	ldr	r3, [r5]
   136a8:	str	r3, [sp]
   136ac:	mov	r3, r9
   136b0:	bl	1283c <__assert_fail@plt+0x18f8>
   136b4:	ldr	r3, [sp, #24]
   136b8:	mov	r0, r7
   136bc:	ldr	r2, [sp, #32]
   136c0:	str	r2, [r3]
   136c4:	add	sp, sp, #52	; 0x34
   136c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136cc:	strdeq	r6, [r2], -r4
   136d0:	muleq	r2, ip, r2
   136d4:	push	{r4, r5, r6, lr}
   136d8:	mov	r5, r0
   136dc:	bl	10e60 <__errno_location@plt>
   136e0:	mov	r4, r0
   136e4:	cmp	r5, #0
   136e8:	ldr	r0, [pc, #20]	; 13704 <__assert_fail@plt+0x27c0>
   136ec:	mov	r1, #48	; 0x30
   136f0:	movne	r0, r5
   136f4:	ldr	r6, [r4]
   136f8:	bl	14370 <__assert_fail@plt+0x342c>
   136fc:	str	r6, [r4]
   13700:	pop	{r4, r5, r6, pc}
   13704:	muleq	r2, ip, r3
   13708:	ldr	r3, [pc, #12]	; 1371c <__assert_fail@plt+0x27d8>
   1370c:	cmp	r0, #0
   13710:	moveq	r0, r3
   13714:	ldr	r0, [r0]
   13718:	bx	lr
   1371c:	muleq	r2, ip, r3
   13720:	ldr	r3, [pc, #12]	; 13734 <__assert_fail@plt+0x27f0>
   13724:	cmp	r0, #0
   13728:	moveq	r0, r3
   1372c:	str	r1, [r0]
   13730:	bx	lr
   13734:	muleq	r2, ip, r3
   13738:	ldr	r3, [pc, #52]	; 13774 <__assert_fail@plt+0x2830>
   1373c:	cmp	r0, #0
   13740:	push	{lr}		; (str lr, [sp, #-4]!)
   13744:	lsr	lr, r1, #5
   13748:	and	r1, r1, #31
   1374c:	moveq	r0, r3
   13750:	add	r3, r0, #8
   13754:	ldr	ip, [r3, lr, lsl #2]
   13758:	lsr	r0, ip, r1
   1375c:	eor	r2, r2, r0
   13760:	and	r0, r0, #1
   13764:	and	r2, r2, #1
   13768:	eor	r1, ip, r2, lsl r1
   1376c:	str	r1, [r3, lr, lsl #2]
   13770:	pop	{pc}		; (ldr pc, [sp], #4)
   13774:	muleq	r2, ip, r3
   13778:	ldr	r3, [pc, #16]	; 13790 <__assert_fail@plt+0x284c>
   1377c:	cmp	r0, #0
   13780:	movne	r3, r0
   13784:	ldr	r0, [r3, #4]
   13788:	str	r1, [r3, #4]
   1378c:	bx	lr
   13790:	muleq	r2, ip, r3
   13794:	ldr	r3, [pc, #44]	; 137c8 <__assert_fail@plt+0x2884>
   13798:	cmp	r0, #0
   1379c:	moveq	r0, r3
   137a0:	mov	r3, #10
   137a4:	cmp	r2, #0
   137a8:	cmpne	r1, #0
   137ac:	str	r3, [r0]
   137b0:	bne	137bc <__assert_fail@plt+0x2878>
   137b4:	push	{r4, lr}
   137b8:	bl	10f2c <abort@plt>
   137bc:	str	r1, [r0, #40]	; 0x28
   137c0:	str	r2, [r0, #44]	; 0x2c
   137c4:	bx	lr
   137c8:	muleq	r2, ip, r3
   137cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137d0:	sub	sp, sp, #24
   137d4:	mov	sl, r3
   137d8:	mov	r7, r0
   137dc:	mov	r8, r1
   137e0:	mov	r9, r2
   137e4:	ldr	r4, [sp, #56]	; 0x38
   137e8:	ldr	r3, [pc, #88]	; 13848 <__assert_fail@plt+0x2904>
   137ec:	cmp	r4, #0
   137f0:	moveq	r4, r3
   137f4:	bl	10e60 <__errno_location@plt>
   137f8:	ldr	r3, [r4, #44]	; 0x2c
   137fc:	mov	r5, r0
   13800:	mov	r2, r9
   13804:	mov	r1, r8
   13808:	mov	r0, r7
   1380c:	ldr	r6, [r5]
   13810:	str	r3, [sp, #16]
   13814:	ldr	r3, [r4, #40]	; 0x28
   13818:	str	r3, [sp, #12]
   1381c:	add	r3, r4, #8
   13820:	str	r3, [sp, #8]
   13824:	ldr	r3, [r4, #4]
   13828:	str	r3, [sp, #4]
   1382c:	ldr	r3, [r4]
   13830:	str	r3, [sp]
   13834:	mov	r3, sl
   13838:	bl	1283c <__assert_fail@plt+0x18f8>
   1383c:	str	r6, [r5]
   13840:	add	sp, sp, #24
   13844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13848:	muleq	r2, ip, r3
   1384c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13850:	cmp	r3, #0
   13854:	sub	sp, sp, #44	; 0x2c
   13858:	mov	r6, r2
   1385c:	mov	sl, r1
   13860:	mov	r9, r0
   13864:	ldr	r4, [pc, #176]	; 1391c <__assert_fail@plt+0x29d8>
   13868:	movne	r4, r3
   1386c:	bl	10e60 <__errno_location@plt>
   13870:	ldr	r3, [r0]
   13874:	mov	r1, #0
   13878:	mov	r2, r9
   1387c:	mov	r8, r0
   13880:	mov	r0, r1
   13884:	ldr	r5, [r4, #4]
   13888:	add	fp, r4, #8
   1388c:	str	r3, [sp, #28]
   13890:	ldr	r3, [r4, #44]	; 0x2c
   13894:	cmp	r6, #0
   13898:	orreq	r5, r5, #1
   1389c:	str	r3, [sp, #16]
   138a0:	ldr	r3, [r4, #40]	; 0x28
   138a4:	stmib	sp, {r5, fp}
   138a8:	str	r3, [sp, #12]
   138ac:	ldr	r3, [r4]
   138b0:	str	r3, [sp]
   138b4:	mov	r3, sl
   138b8:	bl	1283c <__assert_fail@plt+0x18f8>
   138bc:	add	r1, r0, #1
   138c0:	mov	r7, r0
   138c4:	mov	r0, r1
   138c8:	str	r1, [sp, #36]	; 0x24
   138cc:	bl	14170 <__assert_fail@plt+0x322c>
   138d0:	ldr	r3, [r4, #44]	; 0x2c
   138d4:	mov	r2, r9
   138d8:	ldr	r1, [sp, #36]	; 0x24
   138dc:	str	r3, [sp, #16]
   138e0:	ldr	r3, [r4, #40]	; 0x28
   138e4:	stmib	sp, {r5, fp}
   138e8:	str	r0, [sp, #32]
   138ec:	str	r3, [sp, #12]
   138f0:	ldr	r3, [r4]
   138f4:	str	r3, [sp]
   138f8:	mov	r3, sl
   138fc:	bl	1283c <__assert_fail@plt+0x18f8>
   13900:	ldr	r3, [sp, #28]
   13904:	cmp	r6, #0
   13908:	ldr	r0, [sp, #32]
   1390c:	str	r3, [r8]
   13910:	strne	r7, [r6]
   13914:	add	sp, sp, #44	; 0x2c
   13918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1391c:	muleq	r2, ip, r3
   13920:	mov	r3, r2
   13924:	mov	r2, #0
   13928:	b	1384c <__assert_fail@plt+0x2908>
   1392c:	push	{r4, r5, r6, r7, r8, lr}
   13930:	mov	r6, #1
   13934:	ldr	r4, [pc, #100]	; 139a0 <__assert_fail@plt+0x2a5c>
   13938:	ldr	r5, [r4]
   1393c:	add	r7, r5, #4
   13940:	ldr	r3, [r4, #4]
   13944:	cmp	r3, r6
   13948:	bgt	13990 <__assert_fail@plt+0x2a4c>
   1394c:	ldr	r6, [pc, #80]	; 139a4 <__assert_fail@plt+0x2a60>
   13950:	ldr	r0, [r5, #4]
   13954:	cmp	r0, r6
   13958:	beq	1396c <__assert_fail@plt+0x2a28>
   1395c:	bl	14a98 <__assert_fail@plt+0x3b54>
   13960:	mov	r3, #256	; 0x100
   13964:	str	r3, [r4, #8]
   13968:	str	r6, [r4, #12]
   1396c:	ldr	r6, [pc, #52]	; 139a8 <__assert_fail@plt+0x2a64>
   13970:	cmp	r5, r6
   13974:	beq	13984 <__assert_fail@plt+0x2a40>
   13978:	mov	r0, r5
   1397c:	bl	14a98 <__assert_fail@plt+0x3b54>
   13980:	str	r6, [r4]
   13984:	mov	r3, #1
   13988:	str	r3, [r4, #4]
   1398c:	pop	{r4, r5, r6, r7, r8, pc}
   13990:	ldr	r0, [r7, r6, lsl #3]
   13994:	add	r6, r6, #1
   13998:	bl	14a98 <__assert_fail@plt+0x3b54>
   1399c:	b	13940 <__assert_fail@plt+0x29fc>
   139a0:	strdeq	r6, [r2], -r4
   139a4:	muleq	r2, ip, r2
   139a8:	strdeq	r6, [r2], -ip
   139ac:	ldr	r3, [pc, #4]	; 139b8 <__assert_fail@plt+0x2a74>
   139b0:	mvn	r2, #0
   139b4:	b	1352c <__assert_fail@plt+0x25e8>
   139b8:	muleq	r2, ip, r3
   139bc:	ldr	r3, [pc]	; 139c4 <__assert_fail@plt+0x2a80>
   139c0:	b	1352c <__assert_fail@plt+0x25e8>
   139c4:	muleq	r2, ip, r3
   139c8:	mov	r1, r0
   139cc:	mov	r0, #0
   139d0:	b	139ac <__assert_fail@plt+0x2a68>
   139d4:	mov	r2, r1
   139d8:	mov	r1, r0
   139dc:	mov	r0, #0
   139e0:	b	139bc <__assert_fail@plt+0x2a78>
   139e4:	push	{r4, r5, lr}
   139e8:	sub	sp, sp, #52	; 0x34
   139ec:	mov	r5, r2
   139f0:	mov	r4, r0
   139f4:	mov	r0, sp
   139f8:	bl	126e0 <__assert_fail@plt+0x179c>
   139fc:	mov	r3, sp
   13a00:	mvn	r2, #0
   13a04:	mov	r1, r5
   13a08:	mov	r0, r4
   13a0c:	bl	1352c <__assert_fail@plt+0x25e8>
   13a10:	add	sp, sp, #52	; 0x34
   13a14:	pop	{r4, r5, pc}
   13a18:	push	{r4, r5, r6, lr}
   13a1c:	sub	sp, sp, #48	; 0x30
   13a20:	mov	r5, r2
   13a24:	mov	r6, r3
   13a28:	mov	r4, r0
   13a2c:	mov	r0, sp
   13a30:	bl	126e0 <__assert_fail@plt+0x179c>
   13a34:	mov	r3, sp
   13a38:	mov	r2, r6
   13a3c:	mov	r1, r5
   13a40:	mov	r0, r4
   13a44:	bl	1352c <__assert_fail@plt+0x25e8>
   13a48:	add	sp, sp, #48	; 0x30
   13a4c:	pop	{r4, r5, r6, pc}
   13a50:	mov	r2, r1
   13a54:	mov	r1, r0
   13a58:	mov	r0, #0
   13a5c:	b	139e4 <__assert_fail@plt+0x2aa0>
   13a60:	mov	r3, r2
   13a64:	mov	r2, r1
   13a68:	mov	r1, r0
   13a6c:	mov	r0, #0
   13a70:	b	13a18 <__assert_fail@plt+0x2ad4>
   13a74:	push	{r4, r5, r6, lr}
   13a78:	mov	r4, r0
   13a7c:	mov	r5, r1
   13a80:	mov	r6, r2
   13a84:	sub	sp, sp, #48	; 0x30
   13a88:	mov	ip, sp
   13a8c:	ldr	lr, [pc, #64]	; 13ad4 <__assert_fail@plt+0x2b90>
   13a90:	ldm	lr!, {r0, r1, r2, r3}
   13a94:	stmia	ip!, {r0, r1, r2, r3}
   13a98:	ldm	lr!, {r0, r1, r2, r3}
   13a9c:	stmia	ip!, {r0, r1, r2, r3}
   13aa0:	ldm	lr, {r0, r1, r2, r3}
   13aa4:	stm	ip, {r0, r1, r2, r3}
   13aa8:	mov	r1, r6
   13aac:	mov	r2, #1
   13ab0:	mov	r0, sp
   13ab4:	bl	13738 <__assert_fail@plt+0x27f4>
   13ab8:	mov	r3, sp
   13abc:	mov	r2, r5
   13ac0:	mov	r1, r4
   13ac4:	mov	r0, #0
   13ac8:	bl	1352c <__assert_fail@plt+0x25e8>
   13acc:	add	sp, sp, #48	; 0x30
   13ad0:	pop	{r4, r5, r6, pc}
   13ad4:	muleq	r2, ip, r3
   13ad8:	mov	r2, r1
   13adc:	mvn	r1, #0
   13ae0:	b	13a74 <__assert_fail@plt+0x2b30>
   13ae4:	mov	r1, #58	; 0x3a
   13ae8:	b	13ad8 <__assert_fail@plt+0x2b94>
   13aec:	mov	r2, #58	; 0x3a
   13af0:	b	13a74 <__assert_fail@plt+0x2b30>
   13af4:	push	{r4, r5, lr}
   13af8:	sub	sp, sp, #100	; 0x64
   13afc:	mov	r4, r0
   13b00:	mov	r0, sp
   13b04:	mov	r5, r2
   13b08:	bl	126e0 <__assert_fail@plt+0x179c>
   13b0c:	mov	ip, sp
   13b10:	add	lr, sp, #48	; 0x30
   13b14:	ldm	ip!, {r0, r1, r2, r3}
   13b18:	stmia	lr!, {r0, r1, r2, r3}
   13b1c:	ldm	ip!, {r0, r1, r2, r3}
   13b20:	stmia	lr!, {r0, r1, r2, r3}
   13b24:	ldm	ip, {r0, r1, r2, r3}
   13b28:	stm	lr, {r0, r1, r2, r3}
   13b2c:	mov	r2, #1
   13b30:	mov	r1, #58	; 0x3a
   13b34:	add	r0, sp, #48	; 0x30
   13b38:	bl	13738 <__assert_fail@plt+0x27f4>
   13b3c:	add	r3, sp, #48	; 0x30
   13b40:	mvn	r2, #0
   13b44:	mov	r1, r5
   13b48:	mov	r0, r4
   13b4c:	bl	1352c <__assert_fail@plt+0x25e8>
   13b50:	add	sp, sp, #100	; 0x64
   13b54:	pop	{r4, r5, pc}
   13b58:	push	{r4, r5, r6, r7, lr}
   13b5c:	mov	r4, r0
   13b60:	mov	r6, r1
   13b64:	mov	r7, r2
   13b68:	mov	r5, r3
   13b6c:	sub	sp, sp, #52	; 0x34
   13b70:	ldr	lr, [pc, #68]	; 13bbc <__assert_fail@plt+0x2c78>
   13b74:	mov	ip, sp
   13b78:	ldm	lr!, {r0, r1, r2, r3}
   13b7c:	stmia	ip!, {r0, r1, r2, r3}
   13b80:	ldm	lr!, {r0, r1, r2, r3}
   13b84:	stmia	ip!, {r0, r1, r2, r3}
   13b88:	ldm	lr, {r0, r1, r2, r3}
   13b8c:	stm	ip, {r0, r1, r2, r3}
   13b90:	mov	r2, r7
   13b94:	mov	r1, r6
   13b98:	mov	r0, sp
   13b9c:	bl	13794 <__assert_fail@plt+0x2850>
   13ba0:	ldr	r2, [sp, #72]	; 0x48
   13ba4:	mov	r3, sp
   13ba8:	mov	r1, r5
   13bac:	mov	r0, r4
   13bb0:	bl	1352c <__assert_fail@plt+0x25e8>
   13bb4:	add	sp, sp, #52	; 0x34
   13bb8:	pop	{r4, r5, r6, r7, pc}
   13bbc:	muleq	r2, ip, r3
   13bc0:	mvn	ip, #0
   13bc4:	push	{r0, r1, r2, lr}
   13bc8:	str	ip, [sp]
   13bcc:	bl	13b58 <__assert_fail@plt+0x2c14>
   13bd0:	add	sp, sp, #12
   13bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   13bd8:	mov	r3, r2
   13bdc:	mov	r2, r1
   13be0:	mov	r1, r0
   13be4:	mov	r0, #0
   13be8:	b	13bc0 <__assert_fail@plt+0x2c7c>
   13bec:	push	{r0, r1, r2, lr}
   13bf0:	str	r3, [sp]
   13bf4:	mov	r3, r2
   13bf8:	mov	r2, r1
   13bfc:	mov	r1, r0
   13c00:	mov	r0, #0
   13c04:	bl	13b58 <__assert_fail@plt+0x2c14>
   13c08:	add	sp, sp, #12
   13c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c10:	ldr	r3, [pc]	; 13c18 <__assert_fail@plt+0x2cd4>
   13c14:	b	1352c <__assert_fail@plt+0x25e8>
   13c18:	andeq	r6, r2, r4, lsl #2
   13c1c:	mov	r2, r1
   13c20:	mov	r1, r0
   13c24:	mov	r0, #0
   13c28:	b	13c10 <__assert_fail@plt+0x2ccc>
   13c2c:	mvn	r2, #0
   13c30:	b	13c10 <__assert_fail@plt+0x2ccc>
   13c34:	mov	r1, r0
   13c38:	mov	r0, #0
   13c3c:	b	13c2c <__assert_fail@plt+0x2ce8>
   13c40:	push	{r4, r5, r6, lr}
   13c44:	cmp	r1, #0
   13c48:	sub	sp, sp, #32
   13c4c:	mov	r5, r0
   13c50:	ldr	r4, [sp, #48]	; 0x30
   13c54:	ldr	r6, [sp, #52]	; 0x34
   13c58:	beq	13d0c <__assert_fail@plt+0x2dc8>
   13c5c:	strd	r2, [sp]
   13c60:	mov	r3, r1
   13c64:	mov	r1, #1
   13c68:	ldr	r2, [pc, #856]	; 13fc8 <__assert_fail@plt+0x3084>
   13c6c:	bl	10ea8 <__fprintf_chk@plt>
   13c70:	mov	r2, #5
   13c74:	ldr	r1, [pc, #848]	; 13fcc <__assert_fail@plt+0x3088>
   13c78:	mov	r0, #0
   13c7c:	bl	10d7c <dcgettext@plt>
   13c80:	movw	r3, #2022	; 0x7e6
   13c84:	ldr	r2, [pc, #836]	; 13fd0 <__assert_fail@plt+0x308c>
   13c88:	mov	r1, #1
   13c8c:	str	r3, [sp]
   13c90:	mov	r3, r0
   13c94:	mov	r0, r5
   13c98:	bl	10ea8 <__fprintf_chk@plt>
   13c9c:	mov	r1, r5
   13ca0:	mov	r0, #10
   13ca4:	bl	10d64 <fputc_unlocked@plt>
   13ca8:	mov	r2, #5
   13cac:	ldr	r1, [pc, #800]	; 13fd4 <__assert_fail@plt+0x3090>
   13cb0:	mov	r0, #0
   13cb4:	bl	10d7c <dcgettext@plt>
   13cb8:	mov	r2, r0
   13cbc:	mov	r1, #1
   13cc0:	ldr	r3, [pc, #784]	; 13fd8 <__assert_fail@plt+0x3094>
   13cc4:	mov	r0, r5
   13cc8:	bl	10ea8 <__fprintf_chk@plt>
   13ccc:	mov	r1, r5
   13cd0:	mov	r0, #10
   13cd4:	bl	10d64 <fputc_unlocked@plt>
   13cd8:	cmp	r6, #9
   13cdc:	ldrls	pc, [pc, r6, lsl #2]
   13ce0:	b	13fbc <__assert_fail@plt+0x3078>
   13ce4:	strdeq	r3, [r1], -ip
   13ce8:	andeq	r3, r1, r4, lsr #26
   13cec:	andeq	r3, r1, r0, asr sp
   13cf0:	andeq	r3, r1, r4, lsl #27
   13cf4:	andeq	r3, r1, r0, asr #27
   13cf8:	andeq	r3, r1, r4, lsl #28
   13cfc:	andeq	r3, r1, ip, asr #28
   13d00:	muleq	r1, ip, lr
   13d04:	strdeq	r3, [r1], -r4
   13d08:	andeq	r3, r1, r4, asr pc
   13d0c:	mov	r1, #1
   13d10:	str	r3, [sp]
   13d14:	mov	r3, r2
   13d18:	ldr	r2, [pc, #700]	; 13fdc <__assert_fail@plt+0x3098>
   13d1c:	bl	10ea8 <__fprintf_chk@plt>
   13d20:	b	13c70 <__assert_fail@plt+0x2d2c>
   13d24:	mov	r2, #5
   13d28:	ldr	r1, [pc, #688]	; 13fe0 <__assert_fail@plt+0x309c>
   13d2c:	mov	r0, #0
   13d30:	bl	10d7c <dcgettext@plt>
   13d34:	ldr	r3, [r4]
   13d38:	mov	r2, r0
   13d3c:	mov	r1, #1
   13d40:	mov	r0, r5
   13d44:	add	sp, sp, #32
   13d48:	pop	{r4, r5, r6, lr}
   13d4c:	b	10ea8 <__fprintf_chk@plt>
   13d50:	mov	r2, #5
   13d54:	ldr	r1, [pc, #648]	; 13fe4 <__assert_fail@plt+0x30a0>
   13d58:	mov	r0, #0
   13d5c:	bl	10d7c <dcgettext@plt>
   13d60:	ldr	r3, [r4, #4]
   13d64:	mov	r2, r0
   13d68:	mov	r1, #1
   13d6c:	mov	r0, r5
   13d70:	str	r3, [sp, #48]	; 0x30
   13d74:	ldr	r3, [r4]
   13d78:	add	sp, sp, #32
   13d7c:	pop	{r4, r5, r6, lr}
   13d80:	b	10ea8 <__fprintf_chk@plt>
   13d84:	mov	r2, #5
   13d88:	ldr	r1, [pc, #600]	; 13fe8 <__assert_fail@plt+0x30a4>
   13d8c:	mov	r0, #0
   13d90:	bl	10d7c <dcgettext@plt>
   13d94:	ldr	r3, [r4, #8]
   13d98:	mov	r2, r0
   13d9c:	mov	r1, #1
   13da0:	mov	r0, r5
   13da4:	str	r3, [sp, #52]	; 0x34
   13da8:	ldr	r3, [r4, #4]
   13dac:	str	r3, [sp, #48]	; 0x30
   13db0:	ldr	r3, [r4]
   13db4:	add	sp, sp, #32
   13db8:	pop	{r4, r5, r6, lr}
   13dbc:	b	10ea8 <__fprintf_chk@plt>
   13dc0:	mov	r2, #5
   13dc4:	ldr	r1, [pc, #544]	; 13fec <__assert_fail@plt+0x30a8>
   13dc8:	mov	r0, #0
   13dcc:	bl	10d7c <dcgettext@plt>
   13dd0:	ldr	r3, [r4, #12]
   13dd4:	mov	r2, r0
   13dd8:	mov	r1, #1
   13ddc:	mov	r0, r5
   13de0:	str	r3, [sp, #8]
   13de4:	ldr	r3, [r4, #8]
   13de8:	str	r3, [sp, #4]
   13dec:	ldr	r3, [r4, #4]
   13df0:	str	r3, [sp]
   13df4:	ldr	r3, [r4]
   13df8:	bl	10ea8 <__fprintf_chk@plt>
   13dfc:	add	sp, sp, #32
   13e00:	pop	{r4, r5, r6, pc}
   13e04:	mov	r2, #5
   13e08:	ldr	r1, [pc, #480]	; 13ff0 <__assert_fail@plt+0x30ac>
   13e0c:	mov	r0, #0
   13e10:	bl	10d7c <dcgettext@plt>
   13e14:	ldr	r3, [r4, #16]
   13e18:	mov	r2, r0
   13e1c:	mov	r1, #1
   13e20:	mov	r0, r5
   13e24:	str	r3, [sp, #12]
   13e28:	ldr	r3, [r4, #12]
   13e2c:	str	r3, [sp, #8]
   13e30:	ldr	r3, [r4, #8]
   13e34:	str	r3, [sp, #4]
   13e38:	ldr	r3, [r4, #4]
   13e3c:	str	r3, [sp]
   13e40:	ldr	r3, [r4]
   13e44:	bl	10ea8 <__fprintf_chk@plt>
   13e48:	b	13dfc <__assert_fail@plt+0x2eb8>
   13e4c:	mov	r2, #5
   13e50:	ldr	r1, [pc, #412]	; 13ff4 <__assert_fail@plt+0x30b0>
   13e54:	mov	r0, #0
   13e58:	bl	10d7c <dcgettext@plt>
   13e5c:	ldr	r3, [r4, #20]
   13e60:	mov	r2, r0
   13e64:	mov	r1, #1
   13e68:	mov	r0, r5
   13e6c:	str	r3, [sp, #16]
   13e70:	ldr	r3, [r4, #16]
   13e74:	str	r3, [sp, #12]
   13e78:	ldr	r3, [r4, #12]
   13e7c:	str	r3, [sp, #8]
   13e80:	ldr	r3, [r4, #8]
   13e84:	str	r3, [sp, #4]
   13e88:	ldr	r3, [r4, #4]
   13e8c:	str	r3, [sp]
   13e90:	ldr	r3, [r4]
   13e94:	bl	10ea8 <__fprintf_chk@plt>
   13e98:	b	13dfc <__assert_fail@plt+0x2eb8>
   13e9c:	mov	r2, #5
   13ea0:	ldr	r1, [pc, #336]	; 13ff8 <__assert_fail@plt+0x30b4>
   13ea4:	mov	r0, #0
   13ea8:	bl	10d7c <dcgettext@plt>
   13eac:	ldr	r3, [r4, #24]
   13eb0:	mov	r2, r0
   13eb4:	mov	r1, #1
   13eb8:	mov	r0, r5
   13ebc:	str	r3, [sp, #20]
   13ec0:	ldr	r3, [r4, #20]
   13ec4:	str	r3, [sp, #16]
   13ec8:	ldr	r3, [r4, #16]
   13ecc:	str	r3, [sp, #12]
   13ed0:	ldr	r3, [r4, #12]
   13ed4:	str	r3, [sp, #8]
   13ed8:	ldr	r3, [r4, #8]
   13edc:	str	r3, [sp, #4]
   13ee0:	ldr	r3, [r4, #4]
   13ee4:	str	r3, [sp]
   13ee8:	ldr	r3, [r4]
   13eec:	bl	10ea8 <__fprintf_chk@plt>
   13ef0:	b	13dfc <__assert_fail@plt+0x2eb8>
   13ef4:	mov	r2, #5
   13ef8:	ldr	r1, [pc, #252]	; 13ffc <__assert_fail@plt+0x30b8>
   13efc:	mov	r0, #0
   13f00:	bl	10d7c <dcgettext@plt>
   13f04:	ldr	r3, [r4, #28]
   13f08:	mov	r2, r0
   13f0c:	mov	r1, #1
   13f10:	mov	r0, r5
   13f14:	str	r3, [sp, #24]
   13f18:	ldr	r3, [r4, #24]
   13f1c:	str	r3, [sp, #20]
   13f20:	ldr	r3, [r4, #20]
   13f24:	str	r3, [sp, #16]
   13f28:	ldr	r3, [r4, #16]
   13f2c:	str	r3, [sp, #12]
   13f30:	ldr	r3, [r4, #12]
   13f34:	str	r3, [sp, #8]
   13f38:	ldr	r3, [r4, #8]
   13f3c:	str	r3, [sp, #4]
   13f40:	ldr	r3, [r4, #4]
   13f44:	str	r3, [sp]
   13f48:	ldr	r3, [r4]
   13f4c:	bl	10ea8 <__fprintf_chk@plt>
   13f50:	b	13dfc <__assert_fail@plt+0x2eb8>
   13f54:	ldr	r1, [pc, #164]	; 14000 <__assert_fail@plt+0x30bc>
   13f58:	mov	r2, #5
   13f5c:	mov	r0, #0
   13f60:	bl	10d7c <dcgettext@plt>
   13f64:	ldr	r3, [r4, #32]
   13f68:	mov	r2, r0
   13f6c:	mov	r1, #1
   13f70:	mov	r0, r5
   13f74:	str	r3, [sp, #28]
   13f78:	ldr	r3, [r4, #28]
   13f7c:	str	r3, [sp, #24]
   13f80:	ldr	r3, [r4, #24]
   13f84:	str	r3, [sp, #20]
   13f88:	ldr	r3, [r4, #20]
   13f8c:	str	r3, [sp, #16]
   13f90:	ldr	r3, [r4, #16]
   13f94:	str	r3, [sp, #12]
   13f98:	ldr	r3, [r4, #12]
   13f9c:	str	r3, [sp, #8]
   13fa0:	ldr	r3, [r4, #8]
   13fa4:	str	r3, [sp, #4]
   13fa8:	ldr	r3, [r4, #4]
   13fac:	str	r3, [sp]
   13fb0:	ldr	r3, [r4]
   13fb4:	bl	10ea8 <__fprintf_chk@plt>
   13fb8:	b	13dfc <__assert_fail@plt+0x2eb8>
   13fbc:	mov	r2, #5
   13fc0:	ldr	r1, [pc, #60]	; 14004 <__assert_fail@plt+0x30c0>
   13fc4:	b	13f5c <__assert_fail@plt+0x3018>
   13fc8:			; <UNDEFINED> instruction: 0x000155bf
   13fcc:	ldrdeq	r5, [r1], -r2
   13fd0:	andeq	r5, r1, r0, lsr #17
   13fd4:	ldrdeq	r5, [r1], -r6
   13fd8:	andeq	r5, r1, r1, lsl #13
   13fdc:	andeq	r5, r1, fp, asr #11
   13fe0:	andeq	r5, r1, r3, lsr #13
   13fe4:			; <UNDEFINED> instruction: 0x000156b3
   13fe8:	andeq	r5, r1, sl, asr #13
   13fec:	andeq	r5, r1, r6, ror #13
   13ff0:	andeq	r5, r1, r6, lsl #14
   13ff4:	andeq	r5, r1, sl, lsr #14
   13ff8:	andeq	r5, r1, r2, asr r7
   13ffc:	andeq	r5, r1, lr, ror r7
   14000:	andeq	r5, r1, lr, lsr #15
   14004:	andeq	r5, r1, r2, ror #15
   14008:	push	{r0, r1, r4, lr}
   1400c:	mov	ip, #0
   14010:	ldr	lr, [sp, #16]
   14014:	ldr	r4, [lr, ip, lsl #2]
   14018:	cmp	r4, #0
   1401c:	bne	14034 <__assert_fail@plt+0x30f0>
   14020:	str	lr, [sp]
   14024:	str	ip, [sp, #4]
   14028:	bl	13c40 <__assert_fail@plt+0x2cfc>
   1402c:	add	sp, sp, #8
   14030:	pop	{r4, pc}
   14034:	add	ip, ip, #1
   14038:	b	14014 <__assert_fail@plt+0x30d0>
   1403c:	push	{r4, r5, r6, lr}
   14040:	sub	sp, sp, #48	; 0x30
   14044:	mov	ip, #0
   14048:	add	lr, sp, #8
   1404c:	mov	r5, lr
   14050:	ldr	r6, [sp, #64]	; 0x40
   14054:	ldr	r4, [r6, ip, lsl #2]
   14058:	cmp	r4, #0
   1405c:	str	r4, [lr], #4
   14060:	beq	14070 <__assert_fail@plt+0x312c>
   14064:	add	ip, ip, #1
   14068:	cmp	ip, #10
   1406c:	bne	14054 <__assert_fail@plt+0x3110>
   14070:	stm	sp, {r5, ip}
   14074:	bl	13c40 <__assert_fail@plt+0x2cfc>
   14078:	add	sp, sp, #48	; 0x30
   1407c:	pop	{r4, r5, r6, pc}
   14080:	push	{r3}		; (str r3, [sp, #-4]!)
   14084:	push	{r0, r1, r2, r3, lr}
   14088:	add	r3, sp, #24
   1408c:	str	r3, [sp]
   14090:	str	r3, [sp, #12]
   14094:	ldr	r3, [sp, #20]
   14098:	bl	1403c <__assert_fail@plt+0x30f8>
   1409c:	add	sp, sp, #16
   140a0:	pop	{lr}		; (ldr lr, [sp], #4)
   140a4:	add	sp, sp, #4
   140a8:	bx	lr
   140ac:	ldr	r3, [pc, #116]	; 14128 <__assert_fail@plt+0x31e4>
   140b0:	mov	r0, #10
   140b4:	push	{r4, lr}
   140b8:	ldr	r1, [r3]
   140bc:	bl	10d64 <fputc_unlocked@plt>
   140c0:	mov	r2, #5
   140c4:	ldr	r1, [pc, #96]	; 1412c <__assert_fail@plt+0x31e8>
   140c8:	mov	r0, #0
   140cc:	bl	10d7c <dcgettext@plt>
   140d0:	mov	r1, r0
   140d4:	ldr	r2, [pc, #84]	; 14130 <__assert_fail@plt+0x31ec>
   140d8:	mov	r0, #1
   140dc:	bl	10e84 <__printf_chk@plt>
   140e0:	mov	r2, #5
   140e4:	ldr	r1, [pc, #72]	; 14134 <__assert_fail@plt+0x31f0>
   140e8:	mov	r0, #0
   140ec:	bl	10d7c <dcgettext@plt>
   140f0:	mov	r1, r0
   140f4:	ldr	r3, [pc, #60]	; 14138 <__assert_fail@plt+0x31f4>
   140f8:	mov	r0, #1
   140fc:	ldr	r2, [pc, #56]	; 1413c <__assert_fail@plt+0x31f8>
   14100:	bl	10e84 <__printf_chk@plt>
   14104:	mov	r2, #5
   14108:	ldr	r1, [pc, #48]	; 14140 <__assert_fail@plt+0x31fc>
   1410c:	mov	r0, #0
   14110:	bl	10d7c <dcgettext@plt>
   14114:	mov	r1, r0
   14118:	ldr	r2, [pc, #36]	; 14144 <__assert_fail@plt+0x3200>
   1411c:	mov	r0, #1
   14120:	pop	{r4, lr}
   14124:	b	10e84 <__printf_chk@plt>
   14128:	andeq	r6, r2, r4, asr r1
   1412c:	andeq	r5, r1, lr, lsl r8
   14130:	andeq	r5, r1, r2, lsr r8
   14134:	andeq	r5, r1, r8, asr #16
   14138:	andeq	r5, r1, sp, asr #4
   1413c:	andeq	r5, r1, r5, ror r2
   14140:	andeq	r5, r1, ip, asr r8
   14144:	andeq	r5, r1, r3, lsl #17
   14148:	push	{r4, lr}
   1414c:	bl	149b8 <__assert_fail@plt+0x3a74>
   14150:	cmp	r0, #0
   14154:	popne	{r4, pc}
   14158:	bl	14400 <__assert_fail@plt+0x34bc>
   1415c:	push	{r4, lr}
   14160:	bl	149b8 <__assert_fail@plt+0x3a74>
   14164:	cmp	r0, #0
   14168:	popne	{r4, pc}
   1416c:	bl	14400 <__assert_fail@plt+0x34bc>
   14170:	b	14148 <__assert_fail@plt+0x3204>
   14174:	push	{r4, r5, r6, lr}
   14178:	mov	r5, r0
   1417c:	mov	r4, r1
   14180:	bl	149e4 <__assert_fail@plt+0x3aa0>
   14184:	cmp	r0, #0
   14188:	popne	{r4, r5, r6, pc}
   1418c:	adds	r4, r4, #0
   14190:	movne	r4, #1
   14194:	cmp	r5, #0
   14198:	moveq	r4, #1
   1419c:	cmp	r4, #0
   141a0:	popeq	{r4, r5, r6, pc}
   141a4:	bl	14400 <__assert_fail@plt+0x34bc>
   141a8:	push	{r4, lr}
   141ac:	bl	14aec <__assert_fail@plt+0x3ba8>
   141b0:	cmp	r0, #0
   141b4:	popne	{r4, pc}
   141b8:	bl	14400 <__assert_fail@plt+0x34bc>
   141bc:	push	{r4, r5, r6, lr}
   141c0:	mov	r6, r0
   141c4:	mov	r5, r1
   141c8:	mov	r4, r2
   141cc:	bl	14b94 <__assert_fail@plt+0x3c50>
   141d0:	cmp	r0, #0
   141d4:	popne	{r4, r5, r6, pc}
   141d8:	cmp	r6, #0
   141dc:	beq	141ec <__assert_fail@plt+0x32a8>
   141e0:	cmp	r5, #0
   141e4:	cmpne	r4, #0
   141e8:	popeq	{r4, r5, r6, pc}
   141ec:	bl	14400 <__assert_fail@plt+0x34bc>
   141f0:	b	141bc <__assert_fail@plt+0x3278>
   141f4:	push	{r4, lr}
   141f8:	bl	14afc <__assert_fail@plt+0x3bb8>
   141fc:	cmp	r0, #0
   14200:	popne	{r4, pc}
   14204:	bl	14400 <__assert_fail@plt+0x34bc>
   14208:	mov	r2, r1
   1420c:	mov	r1, r0
   14210:	mov	r0, #0
   14214:	b	141bc <__assert_fail@plt+0x3278>
   14218:	mov	r2, r1
   1421c:	mov	r1, r0
   14220:	mov	r0, #0
   14224:	b	141f4 <__assert_fail@plt+0x32b0>
   14228:	cmp	r0, #0
   1422c:	push	{r4, r5, r6, lr}
   14230:	mov	r5, r1
   14234:	ldr	r4, [r1]
   14238:	bne	14264 <__assert_fail@plt+0x3320>
   1423c:	cmp	r4, #0
   14240:	bne	14254 <__assert_fail@plt+0x3310>
   14244:	mov	r4, #64	; 0x40
   14248:	udiv	r4, r4, r2
   1424c:	cmp	r2, #64	; 0x40
   14250:	addhi	r4, r4, #1
   14254:	mov	r1, r4
   14258:	bl	141bc <__assert_fail@plt+0x3278>
   1425c:	str	r4, [r5]
   14260:	pop	{r4, r5, r6, pc}
   14264:	lsr	r3, r4, #1
   14268:	add	r3, r3, #1
   1426c:	adds	r4, r4, r3
   14270:	bcc	14254 <__assert_fail@plt+0x3310>
   14274:	bl	14400 <__assert_fail@plt+0x34bc>
   14278:	mov	r2, #1
   1427c:	b	14228 <__assert_fail@plt+0x32e4>
   14280:	ldr	ip, [r1]
   14284:	push	{r4, r5, r6, r7, r8, lr}
   14288:	mov	r5, r1
   1428c:	mvn	r8, r3
   14290:	lsr	r8, r8, #31
   14294:	ldr	lr, [sp, #24]
   14298:	asr	r1, ip, #1
   1429c:	adds	r4, ip, r1
   142a0:	mvnvs	r4, #-2147483648	; 0x80000000
   142a4:	cmp	r3, r4
   142a8:	movge	r1, #0
   142ac:	andlt	r1, r8, #1
   142b0:	cmp	r1, #0
   142b4:	movne	r4, r3
   142b8:	smull	r6, r7, r4, lr
   142bc:	cmp	r7, r6, asr #31
   142c0:	bne	142d8 <__assert_fail@plt+0x3394>
   142c4:	cmp	r6, #63	; 0x3f
   142c8:	mov	r1, r6
   142cc:	bgt	142e8 <__assert_fail@plt+0x33a4>
   142d0:	mov	r1, #64	; 0x40
   142d4:	b	142dc <__assert_fail@plt+0x3398>
   142d8:	mvn	r1, #-2147483648	; 0x80000000
   142dc:	sdiv	r4, r1, lr
   142e0:	mls	r6, lr, r4, r1
   142e4:	sub	r1, r1, r6
   142e8:	cmp	r0, #0
   142ec:	sub	r6, r4, ip
   142f0:	streq	r0, [r5]
   142f4:	cmp	r6, r2
   142f8:	bge	1432c <__assert_fail@plt+0x33e8>
   142fc:	adds	r4, ip, r2
   14300:	bvs	14328 <__assert_fail@plt+0x33e4>
   14304:	cmp	r4, r3
   14308:	movle	r3, #0
   1430c:	andgt	r3, r8, #1
   14310:	cmp	r3, #0
   14314:	bne	14328 <__assert_fail@plt+0x33e4>
   14318:	smull	r2, r3, r4, lr
   1431c:	cmp	r3, r2, asr #31
   14320:	mov	r1, r2
   14324:	beq	1432c <__assert_fail@plt+0x33e8>
   14328:	bl	14400 <__assert_fail@plt+0x34bc>
   1432c:	bl	14174 <__assert_fail@plt+0x3230>
   14330:	str	r4, [r5]
   14334:	pop	{r4, r5, r6, r7, r8, pc}
   14338:	push	{r4, lr}
   1433c:	bl	14964 <__assert_fail@plt+0x3a20>
   14340:	cmp	r0, #0
   14344:	popne	{r4, pc}
   14348:	bl	14400 <__assert_fail@plt+0x34bc>
   1434c:	mov	r1, #1
   14350:	b	14338 <__assert_fail@plt+0x33f4>
   14354:	push	{r4, lr}
   14358:	bl	14964 <__assert_fail@plt+0x3a20>
   1435c:	cmp	r0, #0
   14360:	popne	{r4, pc}
   14364:	bl	14400 <__assert_fail@plt+0x34bc>
   14368:	mov	r1, #1
   1436c:	b	14354 <__assert_fail@plt+0x3410>
   14370:	push	{r4, r5, r6, lr}
   14374:	mov	r4, r1
   14378:	mov	r5, r0
   1437c:	mov	r0, r1
   14380:	bl	14148 <__assert_fail@plt+0x3204>
   14384:	mov	r2, r4
   14388:	mov	r1, r5
   1438c:	pop	{r4, r5, r6, lr}
   14390:	b	10d34 <memcpy@plt>
   14394:	push	{r4, r5, r6, lr}
   14398:	mov	r4, r1
   1439c:	mov	r5, r0
   143a0:	mov	r0, r1
   143a4:	bl	1415c <__assert_fail@plt+0x3218>
   143a8:	mov	r2, r4
   143ac:	mov	r1, r5
   143b0:	pop	{r4, r5, r6, lr}
   143b4:	b	10d34 <memcpy@plt>
   143b8:	push	{r4, r5, r6, lr}
   143bc:	mov	r5, r0
   143c0:	add	r0, r1, #1
   143c4:	mov	r4, r1
   143c8:	bl	1415c <__assert_fail@plt+0x3218>
   143cc:	mov	r2, #0
   143d0:	mov	r1, r5
   143d4:	strb	r2, [r0, r4]
   143d8:	mov	r2, r4
   143dc:	pop	{r4, r5, r6, lr}
   143e0:	b	10d34 <memcpy@plt>
   143e4:	push	{r4, lr}
   143e8:	mov	r4, r0
   143ec:	bl	10e48 <strlen@plt>
   143f0:	add	r1, r0, #1
   143f4:	mov	r0, r4
   143f8:	pop	{r4, lr}
   143fc:	b	14370 <__assert_fail@plt+0x342c>
   14400:	ldr	r3, [pc, #44]	; 14434 <__assert_fail@plt+0x34f0>
   14404:	mov	r2, #5
   14408:	mov	r0, #0
   1440c:	push	{r4, lr}
   14410:	ldr	r1, [pc, #32]	; 14438 <__assert_fail@plt+0x34f4>
   14414:	ldr	r4, [r3]
   14418:	bl	10d7c <dcgettext@plt>
   1441c:	mov	r3, r0
   14420:	ldr	r2, [pc, #20]	; 1443c <__assert_fail@plt+0x34f8>
   14424:	mov	r1, #0
   14428:	mov	r0, r4
   1442c:	bl	10de8 <error@plt>
   14430:	bl	10f2c <abort@plt>
   14434:	strdeq	r6, [r2], -r0
   14438:	andeq	r5, r1, pc, asr #17
   1443c:	andeq	r5, r1, r5, asr #9
   14440:	push	{r4, r5, r6, r7, r8, r9, lr}
   14444:	sub	sp, sp, #20
   14448:	mov	r9, r3
   1444c:	mov	r8, r2
   14450:	mov	r2, r1
   14454:	mov	r1, #0
   14458:	mov	r7, r0
   1445c:	ldr	r3, [sp, #56]	; 0x38
   14460:	ldr	r6, [sp, #64]	; 0x40
   14464:	str	r3, [sp]
   14468:	add	r3, sp, #8
   1446c:	bl	145d0 <__assert_fail@plt+0x368c>
   14470:	subs	r4, r0, #0
   14474:	bne	14504 <__assert_fail@plt+0x35c0>
   14478:	ldrd	r4, [sp, #8]
   1447c:	ldrd	r2, [sp, #48]	; 0x30
   14480:	cmp	r5, r9
   14484:	cmpeq	r4, r8
   14488:	movcc	r1, #1
   1448c:	movcs	r1, #0
   14490:	cmp	r5, r3
   14494:	cmpeq	r4, r2
   14498:	movls	r3, r1
   1449c:	orrhi	r3, r1, #1
   144a0:	cmp	r3, #0
   144a4:	beq	14520 <__assert_fail@plt+0x35dc>
   144a8:	bl	10e60 <__errno_location@plt>
   144ac:	mov	r3, #0
   144b0:	mvn	r2, #-1073741824	; 0xc0000000
   144b4:	cmp	r5, r3
   144b8:	cmpeq	r4, r2
   144bc:	movls	r3, #34	; 0x22
   144c0:	bls	144c8 <__assert_fail@plt+0x3584>
   144c4:	mov	r3, #75	; 0x4b
   144c8:	str	r3, [r0]
   144cc:	cmp	r6, #0
   144d0:	moveq	r6, #1
   144d4:	bl	10e60 <__errno_location@plt>
   144d8:	ldr	r4, [r0]
   144dc:	mov	r0, r7
   144e0:	cmp	r4, #22
   144e4:	moveq	r4, #0
   144e8:	bl	13c34 <__assert_fail@plt+0x2cf0>
   144ec:	ldr	r2, [pc, #60]	; 14530 <__assert_fail@plt+0x35ec>
   144f0:	mov	r1, r4
   144f4:	str	r0, [sp]
   144f8:	mov	r0, r6
   144fc:	ldr	r3, [sp, #60]	; 0x3c
   14500:	bl	10de8 <error@plt>
   14504:	bl	10e60 <__errno_location@plt>
   14508:	cmp	r4, #1
   1450c:	beq	144c4 <__assert_fail@plt+0x3580>
   14510:	cmp	r4, #3
   14514:	bne	144cc <__assert_fail@plt+0x3588>
   14518:	mov	r3, #0
   1451c:	b	144c8 <__assert_fail@plt+0x3584>
   14520:	mov	r0, r4
   14524:	mov	r1, r5
   14528:	add	sp, sp, #20
   1452c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14530:	andeq	r5, r1, r1, asr #9
   14534:	mov	r1, #10
   14538:	b	14440 <__assert_fail@plt+0x34fc>
   1453c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14540:	mov	ip, r0
   14544:	asr	fp, r1, #31
   14548:	mov	r0, #0
   1454c:	mov	lr, r0
   14550:	subs	r2, r2, #1
   14554:	bcs	14560 <__assert_fail@plt+0x361c>
   14558:	add	sp, sp, #12
   1455c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14560:	ldrd	r8, [ip]
   14564:	mov	r3, #0
   14568:	cmp	r9, r3
   1456c:	umulleq	r8, r9, r8, r1
   14570:	moveq	r6, r8
   14574:	moveq	r4, r9
   14578:	beq	145b0 <__assert_fail@plt+0x366c>
   1457c:	umull	r4, r5, r8, r1
   14580:	strd	r4, [sp]
   14584:	mov	r5, lr
   14588:	ldr	r4, [sp, #4]
   1458c:	umlal	r4, r5, r9, r1
   14590:	cmp	r5, #0
   14594:	ldrne	r3, [sp, #4]
   14598:	mulne	r4, r1, r9
   1459c:	ldreq	r6, [sp]
   145a0:	mlane	r4, r8, fp, r4
   145a4:	ldrne	r6, [sp]
   145a8:	addne	r4, r4, r3
   145ac:	movne	r3, #1
   145b0:	cmp	r3, #0
   145b4:	mvnne	r6, #0
   145b8:	movne	r3, #1
   145bc:	movne	r4, r6
   145c0:	orr	r0, r0, r3
   145c4:	str	r6, [ip]
   145c8:	str	r4, [ip, #4]
   145cc:	b	14550 <__assert_fail@plt+0x360c>
   145d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d4:	cmp	r2, #36	; 0x24
   145d8:	sub	sp, sp, #20
   145dc:	ldr	r5, [sp, #56]	; 0x38
   145e0:	bls	145f8 <__assert_fail@plt+0x36b4>
   145e4:	ldr	r3, [pc, #876]	; 14958 <__assert_fail@plt+0x3a14>
   145e8:	mov	r2, #85	; 0x55
   145ec:	ldr	r1, [pc, #872]	; 1495c <__assert_fail@plt+0x3a18>
   145f0:	ldr	r0, [pc, #872]	; 14960 <__assert_fail@plt+0x3a1c>
   145f4:	bl	10f44 <__assert_fail@plt>
   145f8:	cmp	r1, #0
   145fc:	mov	r6, r1
   14600:	mov	r8, r0
   14604:	mov	fp, r2
   14608:	mov	r7, r3
   1460c:	addeq	r6, sp, #4
   14610:	bl	10e60 <__errno_location@plt>
   14614:	mov	r3, #0
   14618:	mov	sl, r0
   1461c:	str	r3, [r0]
   14620:	bl	10e30 <__ctype_b_loc@plt>
   14624:	ldrb	r9, [r8]
   14628:	mov	r3, r8
   1462c:	ldr	r1, [r0]
   14630:	lsl	r2, r9, #1
   14634:	ldrh	r4, [r1, r2]
   14638:	ands	r4, r4, #8192	; 0x2000
   1463c:	bne	14658 <__assert_fail@plt+0x3714>
   14640:	cmp	r9, #45	; 0x2d
   14644:	bne	14660 <__assert_fail@plt+0x371c>
   14648:	mov	r4, #4
   1464c:	mov	r0, r4
   14650:	add	sp, sp, #20
   14654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14658:	ldrb	r9, [r3, #1]!
   1465c:	b	14630 <__assert_fail@plt+0x36ec>
   14660:	mov	r2, fp
   14664:	mov	r1, r6
   14668:	mov	r0, r8
   1466c:	bl	10e9c <strtoumax@plt>
   14670:	ldr	r9, [r6]
   14674:	strd	r0, [sp, #8]
   14678:	cmp	r9, r8
   1467c:	bne	146e0 <__assert_fail@plt+0x379c>
   14680:	cmp	r5, #0
   14684:	beq	14648 <__assert_fail@plt+0x3704>
   14688:	ldrb	r1, [r8]
   1468c:	cmp	r1, #0
   14690:	beq	14648 <__assert_fail@plt+0x3704>
   14694:	mov	r0, r5
   14698:	bl	10e54 <strchr@plt>
   1469c:	cmp	r0, #0
   146a0:	movne	r2, #1
   146a4:	movne	r3, #0
   146a8:	strdne	r2, [sp, #8]
   146ac:	beq	14648 <__assert_fail@plt+0x3704>
   146b0:	ldrb	r8, [r9]
   146b4:	cmp	r8, #0
   146b8:	beq	14910 <__assert_fail@plt+0x39cc>
   146bc:	mov	r1, r8
   146c0:	mov	r0, r5
   146c4:	bl	10e54 <strchr@plt>
   146c8:	cmp	r0, #0
   146cc:	bne	14708 <__assert_fail@plt+0x37c4>
   146d0:	ldrd	r2, [sp, #8]
   146d4:	orr	r4, r4, #2
   146d8:	strd	r2, [r7]
   146dc:	b	1464c <__assert_fail@plt+0x3708>
   146e0:	ldr	r4, [sl]
   146e4:	cmp	r4, #0
   146e8:	beq	146f8 <__assert_fail@plt+0x37b4>
   146ec:	cmp	r4, #34	; 0x22
   146f0:	bne	14648 <__assert_fail@plt+0x3704>
   146f4:	mov	r4, #1
   146f8:	cmp	r5, #0
   146fc:	strdeq	r0, [r7]
   14700:	bne	146b0 <__assert_fail@plt+0x376c>
   14704:	b	1464c <__assert_fail@plt+0x3708>
   14708:	cmp	r8, #84	; 0x54
   1470c:	beq	14760 <__assert_fail@plt+0x381c>
   14710:	bhi	14748 <__assert_fail@plt+0x3804>
   14714:	cmp	r8, #75	; 0x4b
   14718:	beq	14760 <__assert_fail@plt+0x381c>
   1471c:	bhi	14738 <__assert_fail@plt+0x37f4>
   14720:	cmp	r8, #69	; 0x45
   14724:	beq	14760 <__assert_fail@plt+0x381c>
   14728:	cmp	r8, #71	; 0x47
   1472c:	beq	14760 <__assert_fail@plt+0x381c>
   14730:	mov	r5, #1
   14734:	b	14818 <__assert_fail@plt+0x38d4>
   14738:	cmp	r8, #77	; 0x4d
   1473c:	beq	14760 <__assert_fail@plt+0x381c>
   14740:	cmp	r8, #80	; 0x50
   14744:	b	1472c <__assert_fail@plt+0x37e8>
   14748:	cmp	r8, #103	; 0x67
   1474c:	beq	14760 <__assert_fail@plt+0x381c>
   14750:	bhi	147f0 <__assert_fail@plt+0x38ac>
   14754:	sub	r3, r8, #89	; 0x59
   14758:	cmp	r3, #1
   1475c:	bhi	14730 <__assert_fail@plt+0x37ec>
   14760:	mov	r1, #48	; 0x30
   14764:	mov	r0, r5
   14768:	bl	10e54 <strchr@plt>
   1476c:	cmp	r0, #0
   14770:	beq	14730 <__assert_fail@plt+0x37ec>
   14774:	ldrb	r3, [r9, #1]
   14778:	cmp	r3, #68	; 0x44
   1477c:	moveq	r5, #2
   14780:	moveq	r1, #1000	; 0x3e8
   14784:	beq	147a4 <__assert_fail@plt+0x3860>
   14788:	cmp	r3, #105	; 0x69
   1478c:	beq	14808 <__assert_fail@plt+0x38c4>
   14790:	cmp	r3, #66	; 0x42
   14794:	moveq	r5, #2
   14798:	movne	r5, #1
   1479c:	moveq	r1, #1000	; 0x3e8
   147a0:	movne	r1, #1024	; 0x400
   147a4:	cmp	r8, #89	; 0x59
   147a8:	beq	14940 <__assert_fail@plt+0x39fc>
   147ac:	bhi	14840 <__assert_fail@plt+0x38fc>
   147b0:	cmp	r8, #75	; 0x4b
   147b4:	beq	14880 <__assert_fail@plt+0x393c>
   147b8:	bhi	14820 <__assert_fail@plt+0x38dc>
   147bc:	cmp	r8, #69	; 0x45
   147c0:	beq	1491c <__assert_fail@plt+0x39d8>
   147c4:	cmp	r8, #71	; 0x47
   147c8:	beq	14928 <__assert_fail@plt+0x39e4>
   147cc:	cmp	r8, #66	; 0x42
   147d0:	bne	146d0 <__assert_fail@plt+0x378c>
   147d4:	ldr	r3, [sp, #8]
   147d8:	ldr	r1, [sp, #12]
   147dc:	lsl	r2, r1, #10
   147e0:	lsr	r0, r1, #22
   147e4:	orr	r2, r2, r3, lsr #22
   147e8:	lsl	r3, r3, #10
   147ec:	b	148cc <__assert_fail@plt+0x3988>
   147f0:	cmp	r8, #109	; 0x6d
   147f4:	beq	14760 <__assert_fail@plt+0x381c>
   147f8:	cmp	r8, #116	; 0x74
   147fc:	beq	14760 <__assert_fail@plt+0x381c>
   14800:	cmp	r8, #107	; 0x6b
   14804:	b	1472c <__assert_fail@plt+0x37e8>
   14808:	ldrb	r3, [r9, #2]
   1480c:	cmp	r3, #66	; 0x42
   14810:	movne	r5, #1
   14814:	moveq	r5, #3
   14818:	mov	r1, #1024	; 0x400
   1481c:	b	147a4 <__assert_fail@plt+0x3860>
   14820:	cmp	r8, #80	; 0x50
   14824:	beq	14930 <__assert_fail@plt+0x39ec>
   14828:	cmp	r8, #84	; 0x54
   1482c:	beq	14938 <__assert_fail@plt+0x39f4>
   14830:	cmp	r8, #77	; 0x4d
   14834:	bne	146d0 <__assert_fail@plt+0x378c>
   14838:	mov	r2, #2
   1483c:	b	14920 <__assert_fail@plt+0x39dc>
   14840:	cmp	r8, #103	; 0x67
   14844:	beq	14928 <__assert_fail@plt+0x39e4>
   14848:	bhi	1486c <__assert_fail@plt+0x3928>
   1484c:	cmp	r8, #98	; 0x62
   14850:	beq	148b4 <__assert_fail@plt+0x3970>
   14854:	cmp	r8, #99	; 0x63
   14858:	beq	14950 <__assert_fail@plt+0x3a0c>
   1485c:	cmp	r8, #90	; 0x5a
   14860:	bne	146d0 <__assert_fail@plt+0x378c>
   14864:	mov	r2, #7
   14868:	b	14920 <__assert_fail@plt+0x39dc>
   1486c:	cmp	r8, #109	; 0x6d
   14870:	beq	14838 <__assert_fail@plt+0x38f4>
   14874:	bhi	14888 <__assert_fail@plt+0x3944>
   14878:	cmp	r8, #107	; 0x6b
   1487c:	bne	146d0 <__assert_fail@plt+0x378c>
   14880:	mov	r2, #1
   14884:	b	14920 <__assert_fail@plt+0x39dc>
   14888:	cmp	r8, #116	; 0x74
   1488c:	beq	14938 <__assert_fail@plt+0x39f4>
   14890:	cmp	r8, #119	; 0x77
   14894:	bne	146d0 <__assert_fail@plt+0x378c>
   14898:	ldr	r3, [sp, #8]
   1489c:	ldr	r2, [sp, #12]
   148a0:	ldr	r0, [sp, #12]
   148a4:	adds	r3, r3, r3
   148a8:	adc	r2, r2, r2
   148ac:	lsr	r0, r0, #31
   148b0:	b	148cc <__assert_fail@plt+0x3988>
   148b4:	ldr	r3, [sp, #8]
   148b8:	ldr	r1, [sp, #12]
   148bc:	lsl	r2, r1, #9
   148c0:	lsr	r0, r1, #23
   148c4:	orr	r2, r2, r3, lsr #23
   148c8:	lsl	r3, r3, #9
   148cc:	adds	r0, r0, #0
   148d0:	movne	r0, #1
   148d4:	cmp	r0, #0
   148d8:	streq	r3, [sp, #8]
   148dc:	streq	r2, [sp, #12]
   148e0:	beq	148f4 <__assert_fail@plt+0x39b0>
   148e4:	mvn	r2, #0
   148e8:	mvn	r3, #0
   148ec:	mov	r0, #1
   148f0:	strd	r2, [sp, #8]
   148f4:	ldr	r3, [r6]
   148f8:	orr	r4, r4, r0
   148fc:	add	r2, r3, r5
   14900:	str	r2, [r6]
   14904:	ldrb	r3, [r3, r5]
   14908:	cmp	r3, #0
   1490c:	orrne	r4, r4, #2
   14910:	ldrd	r2, [sp, #8]
   14914:	strd	r2, [r7]
   14918:	b	1464c <__assert_fail@plt+0x3708>
   1491c:	mov	r2, #6
   14920:	add	r0, sp, #8
   14924:	b	14948 <__assert_fail@plt+0x3a04>
   14928:	mov	r2, #3
   1492c:	b	14920 <__assert_fail@plt+0x39dc>
   14930:	mov	r2, #5
   14934:	b	14920 <__assert_fail@plt+0x39dc>
   14938:	mov	r2, #4
   1493c:	b	14920 <__assert_fail@plt+0x39dc>
   14940:	mov	r2, #8
   14944:	add	r0, sp, r2
   14948:	bl	1453c <__assert_fail@plt+0x35f8>
   1494c:	b	148f4 <__assert_fail@plt+0x39b0>
   14950:	mov	r0, #0
   14954:	b	148f4 <__assert_fail@plt+0x39b0>
   14958:	andeq	r5, r1, r0, ror #17
   1495c:	andeq	r5, r1, fp, ror #17
   14960:	strdeq	r5, [r1], -r9
   14964:	cmp	r1, #0
   14968:	cmpne	r0, #0
   1496c:	beq	149a4 <__assert_fail@plt+0x3a60>
   14970:	push	{r4, r5, r6, lr}
   14974:	umull	r4, r5, r0, r1
   14978:	adds	r3, r5, #0
   1497c:	movne	r3, #1
   14980:	cmp	r4, #0
   14984:	blt	14990 <__assert_fail@plt+0x3a4c>
   14988:	cmp	r3, #0
   1498c:	beq	149b0 <__assert_fail@plt+0x3a6c>
   14990:	bl	10e60 <__errno_location@plt>
   14994:	mov	r3, #12
   14998:	str	r3, [r0]
   1499c:	mov	r0, #0
   149a0:	pop	{r4, r5, r6, pc}
   149a4:	mov	r1, #1
   149a8:	mov	r0, r1
   149ac:	b	10cd4 <calloc@plt>
   149b0:	pop	{r4, r5, r6, lr}
   149b4:	b	149ac <__assert_fail@plt+0x3a68>
   149b8:	cmp	r0, #0
   149bc:	beq	149dc <__assert_fail@plt+0x3a98>
   149c0:	bge	149e0 <__assert_fail@plt+0x3a9c>
   149c4:	push	{r4, lr}
   149c8:	bl	10e60 <__errno_location@plt>
   149cc:	mov	r3, #12
   149d0:	str	r3, [r0]
   149d4:	mov	r0, #0
   149d8:	pop	{r4, pc}
   149dc:	mov	r0, #1
   149e0:	b	10df4 <malloc@plt>
   149e4:	cmp	r0, #0
   149e8:	bne	149f4 <__assert_fail@plt+0x3ab0>
   149ec:	mov	r0, r1
   149f0:	b	149b8 <__assert_fail@plt+0x3a74>
   149f4:	cmp	r1, #0
   149f8:	push	{r4, lr}
   149fc:	bne	14a0c <__assert_fail@plt+0x3ac8>
   14a00:	bl	14a98 <__assert_fail@plt+0x3b54>
   14a04:	mov	r0, #0
   14a08:	pop	{r4, pc}
   14a0c:	blt	14a18 <__assert_fail@plt+0x3ad4>
   14a10:	pop	{r4, lr}
   14a14:	b	10d88 <realloc@plt>
   14a18:	bl	10e60 <__errno_location@plt>
   14a1c:	mov	r3, #12
   14a20:	str	r3, [r0]
   14a24:	b	14a04 <__assert_fail@plt+0x3ac0>
   14a28:	push	{r4, r5, r6, lr}
   14a2c:	mov	r4, r0
   14a30:	bl	10dc4 <__fpending@plt>
   14a34:	mov	r5, r0
   14a38:	mov	r0, r4
   14a3c:	bl	10dd0 <ferror_unlocked@plt>
   14a40:	mov	r6, r0
   14a44:	mov	r0, r4
   14a48:	bl	124a4 <__assert_fail@plt+0x1560>
   14a4c:	cmp	r6, #0
   14a50:	mov	r4, r0
   14a54:	bne	14a80 <__assert_fail@plt+0x3b3c>
   14a58:	cmp	r0, #0
   14a5c:	beq	14a78 <__assert_fail@plt+0x3b34>
   14a60:	cmp	r5, #0
   14a64:	bne	14a90 <__assert_fail@plt+0x3b4c>
   14a68:	bl	10e60 <__errno_location@plt>
   14a6c:	ldr	r4, [r0]
   14a70:	subs	r4, r4, #9
   14a74:	mvnne	r4, #0
   14a78:	mov	r0, r4
   14a7c:	pop	{r4, r5, r6, pc}
   14a80:	cmp	r0, #0
   14a84:	bne	14a90 <__assert_fail@plt+0x3b4c>
   14a88:	bl	10e60 <__errno_location@plt>
   14a8c:	str	r4, [r0]
   14a90:	mvn	r4, #0
   14a94:	b	14a78 <__assert_fail@plt+0x3b34>
   14a98:	push	{r0, r1, r2, r4, r5, lr}
   14a9c:	mov	r5, r0
   14aa0:	bl	10e60 <__errno_location@plt>
   14aa4:	mov	r4, r0
   14aa8:	mov	r0, r5
   14aac:	ldr	r3, [r4]
   14ab0:	str	r3, [sp]
   14ab4:	str	r3, [sp, #4]
   14ab8:	mov	r3, #0
   14abc:	str	r3, [r4]
   14ac0:	bl	10d1c <free@plt>
   14ac4:	ldr	r3, [r4]
   14ac8:	add	r2, sp, #8
   14acc:	clz	r3, r3
   14ad0:	lsr	r3, r3, #5
   14ad4:	add	r3, r2, r3, lsl #2
   14ad8:	ldr	r3, [r3, #-8]
   14adc:	str	r3, [r4]
   14ae0:	add	sp, sp, #12
   14ae4:	pop	{r4, r5, pc}
   14ae8:	b	149b8 <__assert_fail@plt+0x3a74>
   14aec:	cmp	r1, #0
   14af0:	orreq	r1, r1, #1
   14af4:	b	149e4 <__assert_fail@plt+0x3aa0>
   14af8:	b	14964 <__assert_fail@plt+0x3a20>
   14afc:	cmp	r2, #0
   14b00:	cmpne	r1, #0
   14b04:	moveq	r2, #1
   14b08:	moveq	r1, r2
   14b0c:	b	14b94 <__assert_fail@plt+0x3c50>
   14b10:	push	{r4, lr}
   14b14:	mov	r0, #14
   14b18:	bl	10ee4 <nl_langinfo@plt>
   14b1c:	cmp	r0, #0
   14b20:	beq	14b38 <__assert_fail@plt+0x3bf4>
   14b24:	ldrb	r2, [r0]
   14b28:	ldr	r3, [pc, #16]	; 14b40 <__assert_fail@plt+0x3bfc>
   14b2c:	cmp	r2, #0
   14b30:	moveq	r0, r3
   14b34:	pop	{r4, pc}
   14b38:	ldr	r0, [pc]	; 14b40 <__assert_fail@plt+0x3bfc>
   14b3c:	pop	{r4, pc}
   14b40:	andeq	r5, r1, pc, lsl r9
   14b44:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14b48:	subs	r5, r0, #0
   14b4c:	mov	r7, r2
   14b50:	addeq	r5, sp, #4
   14b54:	mov	r6, r1
   14b58:	mov	r0, r5
   14b5c:	bl	10ddc <mbrtowc@plt>
   14b60:	cmp	r7, #0
   14b64:	cmnne	r0, #3
   14b68:	mov	r4, r0
   14b6c:	bls	14b88 <__assert_fail@plt+0x3c44>
   14b70:	mov	r0, #0
   14b74:	bl	14bc0 <__assert_fail@plt+0x3c7c>
   14b78:	cmp	r0, #0
   14b7c:	ldrbeq	r3, [r6]
   14b80:	moveq	r4, #1
   14b84:	streq	r3, [r5]
   14b88:	mov	r0, r4
   14b8c:	add	sp, sp, #12
   14b90:	pop	{r4, r5, r6, r7, pc}
   14b94:	umull	r2, r3, r1, r2
   14b98:	cmp	r3, #0
   14b9c:	bne	14ba8 <__assert_fail@plt+0x3c64>
   14ba0:	mov	r1, r2
   14ba4:	b	149e4 <__assert_fail@plt+0x3aa0>
   14ba8:	push	{r4, lr}
   14bac:	bl	10e60 <__errno_location@plt>
   14bb0:	mov	r3, #12
   14bb4:	str	r3, [r0]
   14bb8:	mov	r0, #0
   14bbc:	pop	{r4, pc}
   14bc0:	push	{lr}		; (str lr, [sp, #-4]!)
   14bc4:	sub	sp, sp, #268	; 0x10c
   14bc8:	movw	r2, #257	; 0x101
   14bcc:	add	r1, sp, #4
   14bd0:	bl	14c1c <__assert_fail@plt+0x3cd8>
   14bd4:	cmp	r0, #0
   14bd8:	movne	r0, #0
   14bdc:	bne	14c0c <__assert_fail@plt+0x3cc8>
   14be0:	ldr	r1, [pc, #44]	; 14c14 <__assert_fail@plt+0x3cd0>
   14be4:	add	r0, sp, #4
   14be8:	bl	10cec <strcmp@plt>
   14bec:	cmp	r0, #0
   14bf0:	beq	14c08 <__assert_fail@plt+0x3cc4>
   14bf4:	ldr	r1, [pc, #28]	; 14c18 <__assert_fail@plt+0x3cd4>
   14bf8:	add	r0, sp, #4
   14bfc:	bl	10cec <strcmp@plt>
   14c00:	adds	r0, r0, #0
   14c04:	movne	r0, #1
   14c08:	and	r0, r0, #1
   14c0c:	add	sp, sp, #268	; 0x10c
   14c10:	pop	{pc}		; (ldr pc, [sp], #4)
   14c14:	andeq	r5, r1, r5, lsr #18
   14c18:	andeq	r5, r1, r7, lsr #18
   14c1c:	push	{r4, r5, r6, lr}
   14c20:	mov	r5, r1
   14c24:	mov	r1, #0
   14c28:	mov	r4, r2
   14c2c:	bl	10ecc <setlocale@plt>
   14c30:	subs	r6, r0, #0
   14c34:	bne	14c48 <__assert_fail@plt+0x3d04>
   14c38:	cmp	r4, #0
   14c3c:	mov	r0, #22
   14c40:	strbne	r6, [r5]
   14c44:	pop	{r4, r5, r6, pc}
   14c48:	bl	10e48 <strlen@plt>
   14c4c:	cmp	r4, r0
   14c50:	bls	14c6c <__assert_fail@plt+0x3d28>
   14c54:	add	r2, r0, #1
   14c58:	mov	r1, r6
   14c5c:	mov	r0, r5
   14c60:	bl	10d34 <memcpy@plt>
   14c64:	mov	r0, #0
   14c68:	pop	{r4, r5, r6, pc}
   14c6c:	cmp	r4, #0
   14c70:	beq	14c90 <__assert_fail@plt+0x3d4c>
   14c74:	sub	r4, r4, #1
   14c78:	mov	r1, r6
   14c7c:	mov	r2, r4
   14c80:	mov	r0, r5
   14c84:	bl	10d34 <memcpy@plt>
   14c88:	mov	r3, #0
   14c8c:	strb	r3, [r5, r4]
   14c90:	mov	r0, #34	; 0x22
   14c94:	pop	{r4, r5, r6, pc}
   14c98:	mov	r1, #0
   14c9c:	b	10ecc <setlocale@plt>
   14ca0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ca4:	mov	r7, r0
   14ca8:	ldr	r6, [pc, #72]	; 14cf8 <__assert_fail@plt+0x3db4>
   14cac:	ldr	r5, [pc, #72]	; 14cfc <__assert_fail@plt+0x3db8>
   14cb0:	add	r6, pc, r6
   14cb4:	add	r5, pc, r5
   14cb8:	sub	r6, r6, r5
   14cbc:	mov	r8, r1
   14cc0:	mov	r9, r2
   14cc4:	bl	10cb4 <calloc@plt-0x20>
   14cc8:	asrs	r6, r6, #2
   14ccc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cd0:	mov	r4, #0
   14cd4:	add	r4, r4, #1
   14cd8:	ldr	r3, [r5], #4
   14cdc:	mov	r2, r9
   14ce0:	mov	r1, r8
   14ce4:	mov	r0, r7
   14ce8:	blx	r3
   14cec:	cmp	r6, r4
   14cf0:	bne	14cd4 <__assert_fail@plt+0x3d90>
   14cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cf8:	andeq	r1, r1, ip, asr r2
   14cfc:	andeq	r1, r1, r4, asr r2
   14d00:	bx	lr
   14d04:	ldr	r3, [pc, #12]	; 14d18 <__assert_fail@plt+0x3dd4>
   14d08:	mov	r1, #0
   14d0c:	add	r3, pc, r3
   14d10:	ldr	r2, [r3]
   14d14:	b	10e6c <__cxa_atexit@plt>
   14d18:	ldrdeq	r1, [r1], -r4

Disassembly of section .fini:

00014d1c <.fini>:
   14d1c:	push	{r3, lr}
   14d20:	pop	{r3, pc}
