
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000ff8 <.init>:
     ff8:	push	{r3, lr}
     ffc:	bl	1150 <o_strchr@plt+0xc>
    1000:	pop	{r3, pc}

Disassembly of section .plt:

00001004 <strstr@plt-0x14>:
    1004:	push	{lr}		; (str lr, [sp, #-4]!)
    1008:	ldr	lr, [pc, #4]	; 1014 <strstr@plt-0x4>
    100c:	add	lr, pc, lr
    1010:	ldr	pc, [lr, #8]!
    1014:	andeq	r1, r1, ip, ror #31

00001018 <strstr@plt>:
    1018:	add	ip, pc, #0, 12
    101c:	add	ip, ip, #69632	; 0x11000
    1020:	ldr	pc, [ip, #4076]!	; 0xfec

00001024 <strcasestr@plt>:
    1024:	add	ip, pc, #0, 12
    1028:	add	ip, ip, #69632	; 0x11000
    102c:	ldr	pc, [ip, #4068]!	; 0xfe4

00001030 <strcmp@plt>:
    1030:	add	ip, pc, #0, 12
    1034:	add	ip, ip, #69632	; 0x11000
    1038:	ldr	pc, [ip, #4060]!	; 0xfdc

0000103c <__cxa_finalize@plt>:
    103c:	add	ip, pc, #0, 12
    1040:	add	ip, ip, #69632	; 0x11000
    1044:	ldr	pc, [ip, #4052]!	; 0xfd4

00001048 <o_free@plt>:
    1048:	add	ip, pc, #0, 12
    104c:	add	ip, ip, #69632	; 0x11000
    1050:	ldr	pc, [ip, #4044]!	; 0xfcc

00001054 <memcpy@plt>:
    1054:	add	ip, pc, #0, 12
    1058:	add	ip, ip, #69632	; 0x11000
    105c:	ldr	pc, [ip, #4036]!	; 0xfc4

00001060 <o_base64_encode@plt>:
    1060:	add	ip, pc, #0, 12
    1064:	add	ip, ip, #69632	; 0x11000
    1068:	ldr	pc, [ip, #4028]!	; 0xfbc

0000106c <strcasecmp@plt>:
    106c:	add	ip, pc, #0, 12
    1070:	add	ip, ip, #69632	; 0x11000
    1074:	ldr	pc, [ip, #4020]!	; 0xfb4

00001078 <strcpy@plt>:
    1078:	add	ip, pc, #0, 12
    107c:	add	ip, ip, #69632	; 0x11000
    1080:	ldr	pc, [ip, #4012]!	; 0xfac

00001084 <o_realloc@plt>:
    1084:	add	ip, pc, #0, 12
    1088:	add	ip, ip, #69632	; 0x11000
    108c:	ldr	pc, [ip, #4004]!	; 0xfa4

00001090 <str_replace@plt>:
    1090:	add	ip, pc, #0, 12
    1094:	add	ip, ip, #69632	; 0x11000
    1098:	ldr	pc, [ip, #3996]!	; 0xf9c

0000109c <__gmon_start__@plt>:
    109c:	add	ip, pc, #0, 12
    10a0:	add	ip, ip, #69632	; 0x11000
    10a4:	ldr	pc, [ip, #3988]!	; 0xf94

000010a8 <__ctype_b_loc@plt>:
    10a8:	add	ip, pc, #0, 12
    10ac:	add	ip, ip, #69632	; 0x11000
    10b0:	ldr	pc, [ip, #3980]!	; 0xf8c

000010b4 <strlen@plt>:
    10b4:	add	ip, pc, #0, 12
    10b8:	add	ip, ip, #69632	; 0x11000
    10bc:	ldr	pc, [ip, #3972]!	; 0xf84

000010c0 <strchr@plt>:
    10c0:	add	ip, pc, #0, 12
    10c4:	add	ip, ip, #69632	; 0x11000
    10c8:	ldr	pc, [ip, #3964]!	; 0xf7c

000010cc <strncasecmp@plt>:
    10cc:	add	ip, pc, #0, 12
    10d0:	add	ip, ip, #69632	; 0x11000
    10d4:	ldr	pc, [ip, #3956]!	; 0xf74

000010d8 <snprintf@plt>:
    10d8:	add	ip, pc, #0, 12
    10dc:	add	ip, ip, #69632	; 0x11000
    10e0:	ldr	pc, [ip, #3948]!	; 0xf6c

000010e4 <o_malloc@plt>:
    10e4:	add	ip, pc, #0, 12
    10e8:	add	ip, ip, #69632	; 0x11000
    10ec:	ldr	pc, [ip, #3940]!	; 0xf64

000010f0 <memset@plt>:
    10f0:	add	ip, pc, #0, 12
    10f4:	add	ip, ip, #69632	; 0x11000
    10f8:	ldr	pc, [ip, #3932]!	; 0xf5c

000010fc <strncpy@plt>:
    10fc:	add	ip, pc, #0, 12
    1100:	add	ip, ip, #69632	; 0x11000
    1104:	ldr	pc, [ip, #3924]!	; 0xf54

00001108 <msprintf@plt>:
    1108:	add	ip, pc, #0, 12
    110c:	add	ip, ip, #69632	; 0x11000
    1110:	ldr	pc, [ip, #3916]!	; 0xf4c

00001114 <strrchr@plt>:
    1114:	add	ip, pc, #0, 12
    1118:	add	ip, ip, #69632	; 0x11000
    111c:	ldr	pc, [ip, #3908]!	; 0xf44

00001120 <o_base64_decode@plt>:
    1120:	add	ip, pc, #0, 12
    1124:	add	ip, ip, #69632	; 0x11000
    1128:	ldr	pc, [ip, #3900]!	; 0xf3c

0000112c <vsnprintf@plt>:
    112c:	add	ip, pc, #0, 12
    1130:	add	ip, ip, #69632	; 0x11000
    1134:	ldr	pc, [ip, #3892]!	; 0xf34

00001138 <strncmp@plt>:
    1138:	add	ip, pc, #0, 12
    113c:	add	ip, ip, #69632	; 0x11000
    1140:	ldr	pc, [ip, #3884]!	; 0xf2c

00001144 <o_strchr@plt>:
    1144:	add	ip, pc, #0, 12
    1148:	add	ip, ip, #69632	; 0x11000
    114c:	ldr	pc, [ip, #3876]!	; 0xf24

Disassembly of section .text:

00001150 <o_base64_encode@@Base-0x124>:
    1150:	ldr	r3, [pc, #20]	; 116c <o_strchr@plt+0x28>
    1154:	ldr	r2, [pc, #20]	; 1170 <o_strchr@plt+0x2c>
    1158:	add	r3, pc, r3
    115c:	ldr	r2, [r3, r2]
    1160:	cmp	r2, #0
    1164:	bxeq	lr
    1168:	b	109c <__gmon_start__@plt>
    116c:	andeq	r1, r1, r0, lsr #29
    1170:	andeq	r0, r0, ip, ror r0
    1174:	ldr	r0, [pc, #44]	; 11a8 <o_strchr@plt+0x64>
    1178:	ldr	r3, [pc, #44]	; 11ac <o_strchr@plt+0x68>
    117c:	add	r0, pc, r0
    1180:	add	r3, pc, r3
    1184:	cmp	r3, r0
    1188:	ldr	r3, [pc, #32]	; 11b0 <o_strchr@plt+0x6c>
    118c:	add	r3, pc, r3
    1190:	bxeq	lr
    1194:	ldr	r2, [pc, #24]	; 11b4 <o_strchr@plt+0x70>
    1198:	ldr	r3, [r3, r2]
    119c:	cmp	r3, #0
    11a0:	bxeq	lr
    11a4:	bx	r3
    11a8:	andeq	r1, r1, r0, lsl pc
    11ac:	andeq	r1, r1, ip, lsl #30
    11b0:	andeq	r1, r1, ip, ror #28
    11b4:	andeq	r0, r0, r8, ror r0
    11b8:	ldr	r0, [pc, #56]	; 11f8 <o_strchr@plt+0xb4>
    11bc:	ldr	r3, [pc, #56]	; 11fc <o_strchr@plt+0xb8>
    11c0:	add	r0, pc, r0
    11c4:	add	r3, pc, r3
    11c8:	sub	r1, r3, r0
    11cc:	ldr	r3, [pc, #44]	; 1200 <o_strchr@plt+0xbc>
    11d0:	asr	r1, r1, #2
    11d4:	add	r3, pc, r3
    11d8:	add	r1, r1, r1, lsr #31
    11dc:	asrs	r1, r1, #1
    11e0:	bxeq	lr
    11e4:	ldr	r2, [pc, #24]	; 1204 <o_strchr@plt+0xc0>
    11e8:	ldr	r3, [r3, r2]
    11ec:	cmp	r3, #0
    11f0:	bxeq	lr
    11f4:	bx	r3
    11f8:	andeq	r1, r1, ip, asr #29
    11fc:	andeq	r1, r1, r8, asr #29
    1200:	andeq	r1, r1, r4, lsr #28
    1204:	andeq	r0, r0, r0, lsl #1
    1208:	ldr	r3, [pc, #76]	; 125c <o_strchr@plt+0x118>
    120c:	ldr	r2, [pc, #76]	; 1260 <o_strchr@plt+0x11c>
    1210:	add	r3, pc, r3
    1214:	add	r2, pc, r2
    1218:	ldrb	r3, [r3]
    121c:	cmp	r3, #0
    1220:	bxne	lr
    1224:	ldr	r3, [pc, #56]	; 1264 <o_strchr@plt+0x120>
    1228:	push	{r4, lr}
    122c:	ldr	r3, [r2, r3]
    1230:	cmp	r3, #0
    1234:	beq	1244 <o_strchr@plt+0x100>
    1238:	ldr	r3, [pc, #40]	; 1268 <o_strchr@plt+0x124>
    123c:	ldr	r0, [pc, r3]
    1240:	bl	103c <__cxa_finalize@plt>
    1244:	bl	1174 <o_strchr@plt+0x30>
    1248:	ldr	r3, [pc, #28]	; 126c <o_strchr@plt+0x128>
    124c:	mov	r2, #1
    1250:	add	r3, pc, r3
    1254:	strb	r2, [r3]
    1258:	pop	{r4, pc}
    125c:	andeq	r1, r1, ip, ror lr
    1260:	andeq	r1, r1, r4, ror #27
    1264:	andeq	r0, r0, r4, ror r0
    1268:	andeq	r1, r1, r0, asr #28
    126c:	andeq	r1, r1, ip, lsr lr
    1270:	b	11b8 <o_strchr@plt+0x74>

00001274 <o_base64_encode@@Base>:
    1274:	push	{r4, r5, r6, sl, fp, lr}
    1278:	add	fp, sp, #16
    127c:	cmp	r3, #0
    1280:	mov	ip, #0
    1284:	cmpne	r0, #0
    1288:	beq	1458 <o_base64_encode@@Base+0x1e4>
    128c:	movw	r4, #43691	; 0xaaab
    1290:	lsl	r5, r1, #2
    1294:	movt	r4, #43690	; 0xaaaa
    1298:	umull	r5, r4, r5, r4
    129c:	mov	r5, #4
    12a0:	add	lr, r5, r4, lsr #1
    12a4:	movw	r5, #36409	; 0x8e39
    12a8:	lsr	r4, r4, #1
    12ac:	movt	r5, #14563	; 0x38e3
    12b0:	umull	r5, lr, lr, r5
    12b4:	add	r5, r4, lr, lsr #4
    12b8:	add	r5, r5, #5
    12bc:	cmp	r5, r1
    12c0:	bcc	1458 <o_base64_encode@@Base+0x1e4>
    12c4:	mov	ip, #0
    12c8:	cmp	r1, #3
    12cc:	str	ip, [r3]
    12d0:	blt	138c <o_base64_encode@@Base+0x118>
    12d4:	ldr	r5, [pc, #388]	; 1460 <o_base64_encode@@Base+0x1ec>
    12d8:	add	r6, r0, r1
    12dc:	mov	ip, #0
    12e0:	add	r5, pc, r5
    12e4:	cmp	r2, #0
    12e8:	mov	lr, #0
    12ec:	beq	1344 <o_base64_encode@@Base+0xd0>
    12f0:	ldrb	r1, [r0]
    12f4:	add	lr, r2, #4
    12f8:	ldrb	r1, [r5, r1, lsr #2]
    12fc:	strb	r1, [r2]
    1300:	ldrb	r4, [r0, #1]
    1304:	ldrb	r1, [r0]
    1308:	lsr	r4, r4, #4
    130c:	bfi	r4, r1, #4, #2
    1310:	ldrb	r1, [r5, r4]
    1314:	strb	r1, [r2, #1]
    1318:	ldrb	r4, [r0, #2]
    131c:	ldrb	r1, [r0, #1]
    1320:	lsr	r4, r4, #6
    1324:	bfi	r4, r1, #2, #4
    1328:	ldrb	r1, [r5, r4]
    132c:	strb	r1, [r2, #2]
    1330:	ldrb	r1, [r0, #2]
    1334:	and	r1, r1, #63	; 0x3f
    1338:	ldrb	r1, [r5, r1]
    133c:	strb	r1, [r2, #3]
    1340:	ldr	ip, [r3]
    1344:	add	r0, r0, #3
    1348:	add	ip, ip, #4
    134c:	mov	r2, lr
    1350:	sub	r1, r6, r0
    1354:	str	ip, [r3]
    1358:	cmp	r1, #2
    135c:	bgt	12e4 <o_base64_encode@@Base+0x70>
    1360:	cmp	r1, #0
    1364:	beq	1448 <o_base64_encode@@Base+0x1d4>
    1368:	cmp	lr, #0
    136c:	beq	139c <o_base64_encode@@Base+0x128>
    1370:	ldrb	r2, [r0]
    1374:	ldr	r6, [pc, #232]	; 1464 <o_base64_encode@@Base+0x1f0>
    1378:	add	r6, pc, r6
    137c:	ldrb	r2, [r6, r2, lsr #2]
    1380:	strb	r2, [lr], #1
    1384:	ldr	ip, [r3]
    1388:	b	13a0 <o_base64_encode@@Base+0x12c>
    138c:	mov	lr, r2
    1390:	cmp	r1, #0
    1394:	bne	1368 <o_base64_encode@@Base+0xf4>
    1398:	b	1448 <o_base64_encode@@Base+0x1d4>
    139c:	mov	lr, #0
    13a0:	add	r2, ip, #1
    13a4:	cmp	r1, #1
    13a8:	str	r2, [r3]
    13ac:	bne	13dc <o_base64_encode@@Base+0x168>
    13b0:	cmp	lr, #0
    13b4:	beq	1434 <o_base64_encode@@Base+0x1c0>
    13b8:	mov	r1, #61	; 0x3d
    13bc:	ldrb	r0, [r0]
    13c0:	strb	r1, [lr, #1]
    13c4:	ldr	r1, [pc, #156]	; 1468 <o_base64_encode@@Base+0x1f4>
    13c8:	and	r0, r0, #3
    13cc:	add	r1, pc, r1
    13d0:	ldrb	r0, [r1, r0, lsl #4]
    13d4:	strb	r0, [lr]
    13d8:	b	1414 <o_base64_encode@@Base+0x1a0>
    13dc:	cmp	lr, #0
    13e0:	beq	1434 <o_base64_encode@@Base+0x1c0>
    13e4:	ldrb	r2, [r0, #1]
    13e8:	ldrb	r1, [r0]
    13ec:	lsr	r2, r2, #4
    13f0:	bfi	r2, r1, #4, #2
    13f4:	ldr	r1, [pc, #112]	; 146c <o_base64_encode@@Base+0x1f8>
    13f8:	add	r1, pc, r1
    13fc:	ldrb	r2, [r1, r2]
    1400:	strb	r2, [lr]
    1404:	ldrb	r0, [r0, #1]
    1408:	and	r0, r0, #15
    140c:	ldrb	r0, [r1, r0, lsl #2]
    1410:	strb	r0, [lr, #1]
    1414:	ldr	r0, [r3]
    1418:	add	r0, r0, #2
    141c:	str	r0, [r3]
    1420:	mov	r0, #61	; 0x3d
    1424:	strb	r0, [lr, #2]
    1428:	add	lr, lr, #3
    142c:	ldr	r0, [r3]
    1430:	b	1440 <o_base64_encode@@Base+0x1cc>
    1434:	add	r0, ip, #3
    1438:	mov	lr, #0
    143c:	str	r0, [r3]
    1440:	add	r0, r0, #1
    1444:	str	r0, [r3]
    1448:	cmp	lr, #0
    144c:	mov	ip, #1
    1450:	movne	r0, #0
    1454:	strbne	r0, [lr]
    1458:	mov	r0, ip
    145c:	pop	{r4, r5, r6, sl, fp, pc}
    1460:	andeq	r1, r0, r4, lsr #22
    1464:	andeq	r1, r0, ip, lsl #21
    1468:	andeq	r1, r0, r8, lsr sl
    146c:	andeq	r1, r0, ip, lsl #20

00001470 <o_base64_decode@@Base>:
    1470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1474:	add	fp, sp, #28
    1478:	sub	sp, sp, #268	; 0x10c
    147c:	mov	r6, r0
    1480:	mov	r0, #0
    1484:	cmp	r6, #0
    1488:	beq	14a0 <o_base64_decode@@Base+0x30>
    148c:	cmp	r1, #0
    1490:	mov	r5, r1
    1494:	movne	r7, r3
    1498:	cmpne	r3, #0
    149c:	bne	14a8 <o_base64_decode@@Base+0x38>
    14a0:	sub	sp, fp, #28
    14a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14a8:	add	r4, sp, #8
    14ac:	mov	sl, r2
    14b0:	mov	r1, #128	; 0x80
    14b4:	mov	r2, #256	; 0x100
    14b8:	mov	r0, r4
    14bc:	bl	10f0 <memset@plt>
    14c0:	ldr	r1, [pc, #376]	; 1640 <o_base64_decode@@Base+0x1d0>
    14c4:	mov	r0, #0
    14c8:	add	r1, pc, r1
    14cc:	ldrb	r2, [r1, r0]
    14d0:	strb	r0, [r4, r2]
    14d4:	add	r0, r0, #1
    14d8:	cmp	r0, #64	; 0x40
    14dc:	bne	14cc <o_base64_decode@@Base+0x5c>
    14e0:	mov	r1, #0
    14e4:	mov	r0, #0
    14e8:	strb	r1, [sp, #69]	; 0x45
    14ec:	ldrb	r2, [r6, r0]
    14f0:	add	r0, r0, #1
    14f4:	ldrb	r2, [r4, r2]
    14f8:	cmp	r2, #128	; 0x80
    14fc:	addne	r1, r1, #1
    1500:	cmp	r5, r0
    1504:	bne	14ec <o_base64_decode@@Base+0x7c>
    1508:	mov	r0, #0
    150c:	cmp	r1, #0
    1510:	beq	14a0 <o_base64_decode@@Base+0x30>
    1514:	ands	r1, r1, #3
    1518:	bne	14a0 <o_base64_decode@@Base+0x30>
    151c:	mov	r8, #0
    1520:	str	r7, [sp]
    1524:	mov	r9, #0
    1528:	str	r8, [r7]
    152c:	mov	r7, #0
    1530:	ldrb	r1, [r6, r9]
    1534:	ldr	r0, [pc, #264]	; 1644 <o_base64_decode@@Base+0x1d4>
    1538:	add	r0, pc, r0
    153c:	bl	1144 <o_strchr@plt>
    1540:	ldrb	r1, [r6, r9]
    1544:	cmp	r0, #0
    1548:	bne	1564 <o_base64_decode@@Base+0xf4>
    154c:	sub	r0, r1, #9
    1550:	cmp	r0, #2
    1554:	bcc	1564 <o_base64_decode@@Base+0xf4>
    1558:	cmp	r1, #61	; 0x3d
    155c:	cmpne	r1, #32
    1560:	bne	160c <o_base64_decode@@Base+0x19c>
    1564:	ldrb	r0, [r4, r1]
    1568:	cmp	r0, #128	; 0x80
    156c:	beq	15f4 <o_base64_decode@@Base+0x184>
    1570:	add	r2, sp, #4
    1574:	cmp	r1, #61	; 0x3d
    1578:	strb	r0, [r2, r7]
    157c:	add	r7, r7, #1
    1580:	addeq	r8, r8, #1
    1584:	cmp	r7, #4
    1588:	bne	15f4 <o_base64_decode@@Base+0x184>
    158c:	mov	r0, #0
    1590:	cmp	sl, #0
    1594:	mov	r2, #0
    1598:	beq	15d4 <o_base64_decode@@Base+0x164>
    159c:	ldrb	r2, [sp, #5]
    15a0:	ldrb	r1, [sp, #4]
    15a4:	lsr	r3, r2, #4
    15a8:	orr	r1, r3, r1, lsl #2
    15ac:	strb	r1, [sl]
    15b0:	ldrb	r1, [sp, #6]
    15b4:	lsr	r1, r1, #2
    15b8:	orr	r1, r1, r2, lsl #4
    15bc:	strb	r1, [sl, #1]
    15c0:	ldrb	r1, [sp, #6]
    15c4:	ldrb	r2, [sp, #7]
    15c8:	orr	r1, r2, r1, lsl #6
    15cc:	add	r2, sl, #3
    15d0:	strb	r1, [sl, #2]
    15d4:	ldr	r7, [sp]
    15d8:	cmp	r8, #0
    15dc:	ldr	r1, [r7]
    15e0:	add	r3, r1, #3
    15e4:	str	r3, [r7]
    15e8:	bne	1618 <o_base64_decode@@Base+0x1a8>
    15ec:	mov	sl, r2
    15f0:	mov	r7, r8
    15f4:	add	r9, r9, #1
    15f8:	cmp	r9, r5
    15fc:	bcc	1530 <o_base64_decode@@Base+0xc0>
    1600:	mov	r0, #1
    1604:	sub	sp, fp, #28
    1608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    160c:	mov	r0, #0
    1610:	sub	sp, fp, #28
    1614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	cmp	r8, #2
    161c:	beq	1634 <o_base64_decode@@Base+0x1c4>
    1620:	cmp	r8, #1
    1624:	bne	14a0 <o_base64_decode@@Base+0x30>
    1628:	add	r0, r1, #2
    162c:	str	r0, [r7]
    1630:	b	1600 <o_base64_decode@@Base+0x190>
    1634:	add	r0, r1, #1
    1638:	str	r0, [r7]
    163c:	b	1600 <o_base64_decode@@Base+0x190>
    1640:	andeq	r1, r0, ip, lsr r9
    1644:	andeq	r1, r0, ip, asr #17

00001648 <o_base64url_encode@@Base>:
    1648:	push	{r4, r5, fp, lr}
    164c:	add	fp, sp, #8
    1650:	mov	r4, r3
    1654:	cmp	r2, #0
    1658:	beq	1698 <o_base64url_encode@@Base+0x50>
    165c:	mov	r3, r4
    1660:	mov	r5, r2
    1664:	bl	1060 <o_base64_encode@plt>
    1668:	cmp	r0, #0
    166c:	moveq	r0, #0
    1670:	popeq	{r4, r5, fp, pc}
    1674:	ldr	r2, [r4]
    1678:	cmp	r2, #2
    167c:	bcc	16e8 <o_base64url_encode@@Base+0xa0>
    1680:	add	r1, r5, r2
    1684:	mvn	r3, #1
    1688:	ldrb	ip, [r1, #-2]!
    168c:	cmp	ip, #61	; 0x3d
    1690:	bne	16f0 <o_base64url_encode@@Base+0xa8>
    1694:	b	1704 <o_base64url_encode@@Base+0xbc>
    1698:	cmp	r1, #0
    169c:	mov	r0, #0
    16a0:	cmpne	r4, #0
    16a4:	beq	1754 <o_base64url_encode@@Base+0x10c>
    16a8:	vmov	s0, r1
    16ac:	vmov.f64	d16, #16	; 0x40800000  4.0
    16b0:	vmov.f64	d18, #8	; 0x40400000  3.0
    16b4:	mov	r0, #1
    16b8:	vcvt.f64.u32	d17, s0
    16bc:	vmul.f64	d16, d17, d16
    16c0:	vmov.f64	d17, #112	; 0x3f800000  1.0
    16c4:	vdiv.f64	d16, d16, d18
    16c8:	vrintm.f64	d18, d16
    16cc:	vcmp.f64	d16, d18
    16d0:	vadd.f64	d17, d18, d17
    16d4:	vmrs	APSR_nzcv, fpscr
    16d8:	vseleq.f64	d16, d16, d17
    16dc:	vcvt.u32.f64	s0, d16
    16e0:	vstr	s0, [r4]
    16e4:	pop	{r4, r5, fp, pc}
    16e8:	cmp	r2, #0
    16ec:	beq	1754 <o_base64url_encode@@Base+0x10c>
    16f0:	add	r1, r5, r2
    16f4:	mvn	r3, #0
    16f8:	ldrb	r2, [r1, #-1]!
    16fc:	cmp	r2, #61	; 0x3d
    1700:	bne	171c <o_base64url_encode@@Base+0xd4>
    1704:	mov	r2, #0
    1708:	strb	r2, [r1]
    170c:	ldr	r1, [r4]
    1710:	adds	r1, r1, r3
    1714:	str	r1, [r4]
    1718:	popeq	{r4, r5, fp, pc}
    171c:	mov	r1, #0
    1720:	ldrb	r2, [r5, r1]
    1724:	cmp	r2, #43	; 0x2b
    1728:	beq	173c <o_base64url_encode@@Base+0xf4>
    172c:	cmp	r2, #47	; 0x2f
    1730:	bne	1744 <o_base64url_encode@@Base+0xfc>
    1734:	mov	r2, #95	; 0x5f
    1738:	b	1740 <o_base64url_encode@@Base+0xf8>
    173c:	mov	r2, #45	; 0x2d
    1740:	strb	r2, [r5, r1]
    1744:	ldr	r2, [r4]
    1748:	add	r1, r1, #1
    174c:	cmp	r1, r2
    1750:	bcc	1720 <o_base64url_encode@@Base+0xd8>
    1754:	pop	{r4, r5, fp, pc}

00001758 <o_base64url_decode@@Base>:
    1758:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    175c:	add	fp, sp, #24
    1760:	cmp	r0, #0
    1764:	beq	1800 <o_base64url_decode@@Base+0xa8>
    1768:	mov	r4, r0
    176c:	add	r0, r1, #3
    1770:	mov	r8, r3
    1774:	mov	r5, r2
    1778:	mov	r6, r1
    177c:	bl	10e4 <o_malloc@plt>
    1780:	cmp	r0, #0
    1784:	beq	1800 <o_base64url_decode@@Base+0xa8>
    1788:	mov	r1, r4
    178c:	mov	r2, r6
    1790:	mov	r7, r0
    1794:	bl	1054 <memcpy@plt>
    1798:	cmp	r6, #0
    179c:	beq	17d8 <o_base64url_decode@@Base+0x80>
    17a0:	mov	r0, r7
    17a4:	mov	r1, r6
    17a8:	ldrb	r2, [r0]
    17ac:	cmp	r2, #45	; 0x2d
    17b0:	beq	17c4 <o_base64url_decode@@Base+0x6c>
    17b4:	cmp	r2, #95	; 0x5f
    17b8:	bne	17cc <o_base64url_decode@@Base+0x74>
    17bc:	mov	r2, #47	; 0x2f
    17c0:	b	17c8 <o_base64url_decode@@Base+0x70>
    17c4:	mov	r2, #43	; 0x2b
    17c8:	strb	r2, [r0]
    17cc:	add	r0, r0, #1
    17d0:	subs	r1, r1, #1
    17d4:	bne	17a8 <o_base64url_decode@@Base+0x50>
    17d8:	and	r0, r6, #3
    17dc:	cmp	r0, #3
    17e0:	beq	1808 <o_base64url_decode@@Base+0xb0>
    17e4:	cmp	r0, #2
    17e8:	bne	181c <o_base64url_decode@@Base+0xc4>
    17ec:	mov	r0, #61	; 0x3d
    17f0:	add	r1, r6, #1
    17f4:	strb	r0, [r7, r6]
    17f8:	mov	r0, #2
    17fc:	b	1810 <o_base64url_decode@@Base+0xb8>
    1800:	mov	r0, #0
    1804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    1808:	mov	r0, #1
    180c:	mov	r1, r6
    1810:	mov	r2, #61	; 0x3d
    1814:	add	r6, r0, r6
    1818:	strb	r2, [r7, r1]
    181c:	mov	r0, r7
    1820:	mov	r1, r6
    1824:	mov	r2, r5
    1828:	mov	r3, r8
    182c:	bl	1120 <o_base64_decode@plt>
    1830:	mov	r4, r0
    1834:	mov	r0, r7
    1838:	bl	1048 <o_free@plt>
    183c:	mov	r0, r4
    1840:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00001844 <o_base64url_2_base64@@Base>:
    1844:	push	{r4, r5, r6, sl, fp, lr}
    1848:	add	fp, sp, #16
    184c:	cmp	r0, #0
    1850:	moveq	r0, #0
    1854:	popeq	{r4, r5, r6, sl, fp, pc}
    1858:	mov	r6, r1
    185c:	mov	r1, r0
    1860:	mov	r5, r2
    1864:	mov	r0, r2
    1868:	mov	r4, r3
    186c:	mov	r2, r6
    1870:	bl	1054 <memcpy@plt>
    1874:	cmp	r6, #0
    1878:	str	r6, [r4]
    187c:	beq	18b8 <o_base64url_2_base64@@Base+0x74>
    1880:	mov	r0, r6
    1884:	mov	r1, r5
    1888:	ldrb	r2, [r1]
    188c:	cmp	r2, #45	; 0x2d
    1890:	beq	18a4 <o_base64url_2_base64@@Base+0x60>
    1894:	cmp	r2, #95	; 0x5f
    1898:	bne	18ac <o_base64url_2_base64@@Base+0x68>
    189c:	mov	r2, #47	; 0x2f
    18a0:	b	18a8 <o_base64url_2_base64@@Base+0x64>
    18a4:	mov	r2, #43	; 0x2b
    18a8:	strb	r2, [r1]
    18ac:	subs	r0, r0, #1
    18b0:	add	r1, r1, #1
    18b4:	bne	1888 <o_base64url_2_base64@@Base+0x44>
    18b8:	and	r1, r6, #3
    18bc:	mov	r0, #1
    18c0:	cmp	r1, #3
    18c4:	beq	18ec <o_base64url_2_base64@@Base+0xa8>
    18c8:	cmp	r1, #2
    18cc:	popne	{r4, r5, r6, sl, fp, pc}
    18d0:	add	r1, r5, r6
    18d4:	movw	r2, #15677	; 0x3d3d
    18d8:	strh	r2, [r1]
    18dc:	ldr	r1, [r4]
    18e0:	add	r1, r1, #2
    18e4:	str	r1, [r4]
    18e8:	pop	{r4, r5, r6, sl, fp, pc}
    18ec:	mov	r1, #61	; 0x3d
    18f0:	strb	r1, [r5, r6]
    18f4:	ldr	r1, [r4]
    18f8:	add	r1, r1, #1
    18fc:	str	r1, [r4]
    1900:	pop	{r4, r5, r6, sl, fp, pc}

00001904 <o_base64_2_base64url@@Base>:
    1904:	push	{r4, r5, r6, sl, fp, lr}
    1908:	add	fp, sp, #16
    190c:	cmp	r0, #0
    1910:	beq	197c <o_base64_2_base64url@@Base+0x78>
    1914:	mov	r6, r1
    1918:	mov	r1, r0
    191c:	mov	r5, r2
    1920:	mov	r0, r2
    1924:	mov	r4, r3
    1928:	mov	r2, r6
    192c:	bl	1054 <memcpy@plt>
    1930:	cmp	r6, #0
    1934:	str	r6, [r4]
    1938:	beq	1984 <o_base64_2_base64url@@Base+0x80>
    193c:	mov	r0, r5
    1940:	ldrb	r1, [r0]
    1944:	cmp	r1, #43	; 0x2b
    1948:	beq	195c <o_base64_2_base64url@@Base+0x58>
    194c:	cmp	r1, #47	; 0x2f
    1950:	bne	1964 <o_base64_2_base64url@@Base+0x60>
    1954:	mov	r1, #95	; 0x5f
    1958:	b	1960 <o_base64_2_base64url@@Base+0x5c>
    195c:	mov	r1, #45	; 0x2d
    1960:	strb	r1, [r0]
    1964:	subs	r6, r6, #1
    1968:	add	r0, r0, #1
    196c:	bne	1940 <o_base64_2_base64url@@Base+0x3c>
    1970:	ldr	r0, [r4]
    1974:	sub	r1, r0, #1
    1978:	b	1988 <o_base64_2_base64url@@Base+0x84>
    197c:	mov	r0, #0
    1980:	pop	{r4, r5, r6, sl, fp, pc}
    1984:	mvn	r1, #0
    1988:	ldrb	r2, [r5, r1]
    198c:	mov	r0, #1
    1990:	cmp	r2, #61	; 0x3d
    1994:	popne	{r4, r5, r6, sl, fp, pc}
    1998:	sub	r2, r5, #1
    199c:	str	r1, [r4]
    19a0:	ldrb	r3, [r2, r1]
    19a4:	sub	r1, r1, #1
    19a8:	cmp	r3, #61	; 0x3d
    19ac:	beq	199c <o_base64_2_base64url@@Base+0x98>
    19b0:	pop	{r4, r5, r6, sl, fp, pc}

000019b4 <o_malloc@@Base>:
    19b4:	cmp	r0, #0
    19b8:	moveq	r0, #0
    19bc:	bxeq	lr
    19c0:	ldr	r1, [pc, #4]	; 19cc <o_malloc@@Base+0x18>
    19c4:	ldr	r1, [pc, r1]
    19c8:	bx	r1
    19cc:			; <UNDEFINED> instruction: 0x000116bc

000019d0 <o_realloc@@Base>:
    19d0:	cmp	r1, #0
    19d4:	moveq	r0, #0
    19d8:	bxeq	lr
    19dc:	ldr	r2, [pc, #4]	; 19e8 <o_realloc@@Base+0x18>
    19e0:	ldr	r2, [pc, r2]
    19e4:	bx	r2
    19e8:	andeq	r1, r1, r4, lsr #13

000019ec <o_free@@Base>:
    19ec:	cmp	r0, #0
    19f0:	bxeq	lr
    19f4:	ldr	r1, [pc, #4]	; 1a00 <o_free@@Base+0x14>
    19f8:	ldr	r1, [pc, r1]
    19fc:	bx	r1
    1a00:	muleq	r1, r0, r6

00001a04 <o_set_alloc_funcs@@Base>:
    1a04:	ldr	r3, [pc, #32]	; 1a2c <o_set_alloc_funcs@@Base+0x28>
    1a08:	add	r3, pc, r3
    1a0c:	str	r1, [r3]
    1a10:	ldr	r1, [pc, #24]	; 1a30 <o_set_alloc_funcs@@Base+0x2c>
    1a14:	add	r1, pc, r1
    1a18:	str	r0, [r1]
    1a1c:	ldr	r0, [pc, #16]	; 1a34 <o_set_alloc_funcs@@Base+0x30>
    1a20:	add	r0, pc, r0
    1a24:	str	r2, [r0]
    1a28:	bx	lr
    1a2c:	andeq	r1, r1, ip, ror r6
    1a30:	andeq	r1, r1, ip, ror #12
    1a34:	andeq	r1, r1, r8, ror #12

00001a38 <o_get_alloc_funcs@@Base>:
    1a38:	cmp	r0, #0
    1a3c:	ldrne	r3, [pc, #40]	; 1a6c <o_get_alloc_funcs@@Base+0x34>
    1a40:	ldrne	r3, [pc, r3]
    1a44:	strne	r3, [r0]
    1a48:	cmp	r1, #0
    1a4c:	ldrne	r0, [pc, #28]	; 1a70 <o_get_alloc_funcs@@Base+0x38>
    1a50:	ldrne	r0, [pc, r0]
    1a54:	strne	r0, [r1]
    1a58:	cmp	r2, #0
    1a5c:	ldrne	r0, [pc, #16]	; 1a74 <o_get_alloc_funcs@@Base+0x3c>
    1a60:	ldrne	r0, [pc, r0]
    1a64:	strne	r0, [r2]
    1a68:	bx	lr
    1a6c:	andeq	r1, r1, r0, asr #12
    1a70:	andeq	r1, r1, r4, lsr r6
    1a74:	andeq	r1, r1, r8, lsr #12

00001a78 <str_replace@@Base>:
    1a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a7c:	add	fp, sp, #28
    1a80:	sub	sp, sp, #12
    1a84:	mov	r4, #0
    1a88:	cmp	r0, #0
    1a8c:	beq	1aa4 <str_replace@@Base+0x2c>
    1a90:	cmp	r1, #0
    1a94:	mov	r6, r1
    1a98:	movne	sl, r2
    1a9c:	cmpne	r2, #0
    1aa0:	bne	1ab0 <str_replace@@Base+0x38>
    1aa4:	mov	r0, r4
    1aa8:	sub	sp, fp, #28
    1aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab0:	mov	r1, r6
    1ab4:	mov	r7, r0
    1ab8:	bl	1018 <strstr@plt>
    1abc:	cmp	r0, #0
    1ac0:	beq	1b90 <str_replace@@Base+0x118>
    1ac4:	sub	r5, r0, r7
    1ac8:	add	r9, r5, #1
    1acc:	mov	r0, r9
    1ad0:	bl	10e4 <o_malloc@plt>
    1ad4:	cmp	r0, #0
    1ad8:	beq	1aa4 <str_replace@@Base+0x2c>
    1adc:	mov	r1, r7
    1ae0:	mov	r2, r5
    1ae4:	mov	r8, r0
    1ae8:	bl	1054 <memcpy@plt>
    1aec:	mov	r4, #0
    1af0:	mov	r0, r8
    1af4:	strb	r4, [r8, r5]
    1af8:	bl	10b4 <strlen@plt>
    1afc:	add	r5, r7, r0
    1b00:	mov	r0, r6
    1b04:	bl	10b4 <strlen@plt>
    1b08:	add	r0, r5, r0
    1b0c:	mov	r1, r6
    1b10:	mov	r2, sl
    1b14:	bl	1090 <str_replace@plt>
    1b18:	cmp	r0, #0
    1b1c:	beq	1bcc <str_replace@@Base+0x154>
    1b20:	mov	r6, r0
    1b24:	mov	r0, sl
    1b28:	bl	10b4 <strlen@plt>
    1b2c:	add	r4, r9, r0
    1b30:	mov	r0, r6
    1b34:	bl	10b4 <strlen@plt>
    1b38:	add	r5, r4, r0
    1b3c:	mov	r0, r5
    1b40:	bl	10e4 <o_malloc@plt>
    1b44:	cmp	r0, #0
    1b48:	beq	1bd8 <str_replace@@Base+0x160>
    1b4c:	str	sl, [sp]
    1b50:	str	r6, [sp, #4]
    1b54:	mov	r1, r5
    1b58:	mov	r3, r8
    1b5c:	mov	r4, r0
    1b60:	ldr	r2, [pc, #136]	; 1bf0 <str_replace@@Base+0x178>
    1b64:	add	r2, pc, r2
    1b68:	bl	10d8 <snprintf@plt>
    1b6c:	mov	r5, r0
    1b70:	mov	r0, r8
    1b74:	bl	1048 <o_free@plt>
    1b78:	mov	r0, r6
    1b7c:	bl	1048 <o_free@plt>
    1b80:	cmn	r5, #1
    1b84:	bgt	1aa4 <str_replace@@Base+0x2c>
    1b88:	mov	r0, r4
    1b8c:	b	1be4 <str_replace@@Base+0x16c>
    1b90:	mov	r0, r7
    1b94:	bl	10b4 <strlen@plt>
    1b98:	mov	r5, r0
    1b9c:	add	r0, r0, #1
    1ba0:	bl	10e4 <o_malloc@plt>
    1ba4:	cmp	r0, #0
    1ba8:	beq	1aa4 <str_replace@@Base+0x2c>
    1bac:	mov	r1, r7
    1bb0:	mov	r2, r5
    1bb4:	mov	r6, r0
    1bb8:	bl	1054 <memcpy@plt>
    1bbc:	mov	r0, #0
    1bc0:	mov	r4, r6
    1bc4:	strb	r0, [r6, r5]
    1bc8:	b	1aa4 <str_replace@@Base+0x2c>
    1bcc:	mov	r0, r8
    1bd0:	bl	1048 <o_free@plt>
    1bd4:	b	1aa4 <str_replace@@Base+0x2c>
    1bd8:	mov	r0, r8
    1bdc:	bl	1048 <o_free@plt>
    1be0:	mov	r0, r6
    1be4:	bl	1048 <o_free@plt>
    1be8:	mov	r4, #0
    1bec:	b	1aa4 <str_replace@@Base+0x2c>
    1bf0:	andeq	r1, r0, r1, ror #5

00001bf4 <o_strdup@@Base>:
    1bf4:	push	{r4, r5, r6, r7, fp, lr}
    1bf8:	add	fp, sp, #16
    1bfc:	mov	r5, #0
    1c00:	cmp	r0, #0
    1c04:	beq	1c40 <o_strdup@@Base+0x4c>
    1c08:	mov	r4, r0
    1c0c:	bl	10b4 <strlen@plt>
    1c10:	mov	r6, r0
    1c14:	add	r0, r0, #1
    1c18:	bl	10e4 <o_malloc@plt>
    1c1c:	cmp	r0, #0
    1c20:	beq	1c40 <o_strdup@@Base+0x4c>
    1c24:	mov	r1, r4
    1c28:	mov	r2, r6
    1c2c:	mov	r7, r0
    1c30:	bl	1054 <memcpy@plt>
    1c34:	mov	r0, #0
    1c38:	mov	r5, r7
    1c3c:	strb	r0, [r7, r6]
    1c40:	mov	r0, r5
    1c44:	pop	{r4, r5, r6, r7, fp, pc}

00001c48 <msprintf@@Base>:
    1c48:	sub	sp, sp, #12
    1c4c:	push	{r4, r5, r6, r7, fp, lr}
    1c50:	add	fp, sp, #16
    1c54:	sub	sp, sp, #12
    1c58:	add	ip, fp, #8
    1c5c:	cmp	r0, #0
    1c60:	stm	ip, {r1, r2, r3}
    1c64:	beq	1cbc <msprintf@@Base+0x74>
    1c68:	mov	r4, r0
    1c6c:	add	r3, fp, #8
    1c70:	mov	r0, #0
    1c74:	mov	r1, #0
    1c78:	mov	r5, #0
    1c7c:	mov	r2, r4
    1c80:	str	r3, [sp, #4]
    1c84:	str	r3, [sp, #8]
    1c88:	bl	112c <vsnprintf@plt>
    1c8c:	add	r6, r0, #1
    1c90:	mov	r0, r6
    1c94:	bl	10e4 <o_malloc@plt>
    1c98:	cmp	r0, #0
    1c9c:	beq	1cc0 <msprintf@@Base+0x78>
    1ca0:	ldr	r3, [sp, #4]
    1ca4:	mov	r1, r6
    1ca8:	mov	r2, r4
    1cac:	mov	r7, r0
    1cb0:	bl	112c <vsnprintf@plt>
    1cb4:	mov	r5, r7
    1cb8:	b	1cc0 <msprintf@@Base+0x78>
    1cbc:	mov	r5, #0
    1cc0:	mov	r0, r5
    1cc4:	sub	sp, fp, #16
    1cc8:	pop	{r4, r5, r6, r7, fp, lr}
    1ccc:	add	sp, sp, #12
    1cd0:	bx	lr

00001cd4 <mstrcatf@@Base>:
    1cd4:	sub	sp, sp, #8
    1cd8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1cdc:	add	fp, sp, #24
    1ce0:	sub	sp, sp, #8
    1ce4:	cmp	r1, #0
    1ce8:	str	r3, [fp, #12]
    1cec:	str	r2, [fp, #8]
    1cf0:	beq	1d7c <mstrcatf@@Base+0xa8>
    1cf4:	mov	r5, r1
    1cf8:	add	r3, fp, #8
    1cfc:	mov	r8, r0
    1d00:	mov	r0, #0
    1d04:	mov	r1, #0
    1d08:	mov	r6, #0
    1d0c:	mov	r2, r5
    1d10:	str	r3, [sp]
    1d14:	str	r3, [sp, #4]
    1d18:	bl	112c <vsnprintf@plt>
    1d1c:	add	r4, r0, #1
    1d20:	mov	r0, r4
    1d24:	bl	10e4 <o_malloc@plt>
    1d28:	mov	r7, r0
    1d2c:	cmp	r8, #0
    1d30:	beq	1d84 <mstrcatf@@Base+0xb0>
    1d34:	cmp	r7, #0
    1d38:	beq	1da4 <mstrcatf@@Base+0xd0>
    1d3c:	ldr	r3, [sp]
    1d40:	mov	r0, r7
    1d44:	mov	r1, r4
    1d48:	mov	r2, r5
    1d4c:	bl	112c <vsnprintf@plt>
    1d50:	ldr	r0, [pc, #96]	; 1db8 <mstrcatf@@Base+0xe4>
    1d54:	mov	r1, r8
    1d58:	mov	r2, r7
    1d5c:	add	r0, pc, r0
    1d60:	bl	1108 <msprintf@plt>
    1d64:	mov	r6, r0
    1d68:	mov	r0, r7
    1d6c:	bl	1048 <o_free@plt>
    1d70:	mov	r0, r8
    1d74:	bl	1048 <o_free@plt>
    1d78:	b	1da4 <mstrcatf@@Base+0xd0>
    1d7c:	mov	r6, #0
    1d80:	b	1da4 <mstrcatf@@Base+0xd0>
    1d84:	cmp	r7, #0
    1d88:	beq	1da0 <mstrcatf@@Base+0xcc>
    1d8c:	ldr	r3, [sp]
    1d90:	mov	r0, r7
    1d94:	mov	r1, r4
    1d98:	mov	r2, r5
    1d9c:	bl	112c <vsnprintf@plt>
    1da0:	mov	r6, r7
    1da4:	mov	r0, r6
    1da8:	sub	sp, fp, #24
    1dac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    1db0:	add	sp, sp, #8
    1db4:	bx	lr
    1db8:	andeq	r1, r0, fp, ror #1

00001dbc <o_strndup@@Base>:
    1dbc:	push	{r4, r5, r6, r7, fp, lr}
    1dc0:	add	fp, sp, #16
    1dc4:	mov	r5, #0
    1dc8:	cmp	r0, #0
    1dcc:	beq	1e04 <o_strndup@@Base+0x48>
    1dd0:	mov	r6, r0
    1dd4:	add	r0, r1, #1
    1dd8:	mov	r4, r1
    1ddc:	bl	10e4 <o_malloc@plt>
    1de0:	cmp	r0, #0
    1de4:	beq	1e04 <o_strndup@@Base+0x48>
    1de8:	mov	r1, r6
    1dec:	mov	r2, r4
    1df0:	mov	r7, r0
    1df4:	bl	1054 <memcpy@plt>
    1df8:	mov	r0, #0
    1dfc:	mov	r5, r7
    1e00:	strb	r0, [r7, r4]
    1e04:	mov	r0, r5
    1e08:	pop	{r4, r5, r6, r7, fp, pc}

00001e0c <o_strcmp@@Base>:
    1e0c:	orrs	r2, r0, r1
    1e10:	mov	r2, #0
    1e14:	beq	1e38 <o_strcmp@@Base+0x2c>
    1e18:	cmp	r1, #0
    1e1c:	mov	r2, #1
    1e20:	mov	r3, #1
    1e24:	mvneq	r2, #0
    1e28:	cmp	r0, #0
    1e2c:	moveq	r2, r3
    1e30:	cmpne	r1, #0
    1e34:	bne	1e40 <o_strcmp@@Base+0x34>
    1e38:	mov	r0, r2
    1e3c:	bx	lr
    1e40:	b	1030 <strcmp@plt>

00001e44 <o_strncmp@@Base>:
    1e44:	mov	r3, r0
    1e48:	orrs	r0, r0, r1
    1e4c:	mov	r0, #0
    1e50:	cmpne	r2, #0
    1e54:	bne	1e5c <o_strncmp@@Base+0x18>
    1e58:	bx	lr
    1e5c:	cmp	r1, #0
    1e60:	mov	r0, #1
    1e64:	mov	ip, #1
    1e68:	mvneq	r0, #0
    1e6c:	cmp	r3, #0
    1e70:	moveq	r0, ip
    1e74:	cmpne	r1, #0
    1e78:	bxeq	lr
    1e7c:	mov	r0, r3
    1e80:	b	1138 <strncmp@plt>

00001e84 <o_strcpy@@Base>:
    1e84:	cmp	r0, #0
    1e88:	cmpne	r1, #0
    1e8c:	bne	1e98 <o_strcpy@@Base+0x14>
    1e90:	mov	r0, #0
    1e94:	bx	lr
    1e98:	b	1078 <strcpy@plt>

00001e9c <o_strncpy@@Base>:
    1e9c:	cmp	r0, #0
    1ea0:	cmpne	r1, #0
    1ea4:	bne	1eb0 <o_strncpy@@Base+0x14>
    1ea8:	mov	r0, #0
    1eac:	bx	lr
    1eb0:	b	10fc <strncpy@plt>

00001eb4 <o_strcasecmp@@Base>:
    1eb4:	orrs	r2, r0, r1
    1eb8:	mov	r2, #0
    1ebc:	beq	1ee8 <o_strcasecmp@@Base+0x34>
    1ec0:	cmp	r0, #0
    1ec4:	beq	1ed4 <o_strcasecmp@@Base+0x20>
    1ec8:	mvn	r2, #0
    1ecc:	cmp	r1, #0
    1ed0:	beq	1ee8 <o_strcasecmp@@Base+0x34>
    1ed4:	cmp	r0, #0
    1ed8:	bne	1ef0 <o_strcasecmp@@Base+0x3c>
    1edc:	mov	r2, #1
    1ee0:	cmp	r1, #0
    1ee4:	beq	1ef0 <o_strcasecmp@@Base+0x3c>
    1ee8:	mov	r0, r2
    1eec:	bx	lr
    1ef0:	b	106c <strcasecmp@plt>

00001ef4 <o_strncasecmp@@Base>:
    1ef4:	orrs	r3, r0, r1
    1ef8:	mov	r3, #0
    1efc:	cmpne	r2, #0
    1f00:	bne	1f0c <o_strncasecmp@@Base+0x18>
    1f04:	mov	r0, r3
    1f08:	bx	lr
    1f0c:	cmp	r0, #0
    1f10:	beq	1f20 <o_strncasecmp@@Base+0x2c>
    1f14:	mvn	r3, #0
    1f18:	cmp	r1, #0
    1f1c:	beq	1f04 <o_strncasecmp@@Base+0x10>
    1f20:	cmp	r0, #0
    1f24:	bne	1f34 <o_strncasecmp@@Base+0x40>
    1f28:	mov	r3, #1
    1f2c:	cmp	r1, #0
    1f30:	bne	1f04 <o_strncasecmp@@Base+0x10>
    1f34:	b	10cc <strncasecmp@plt>

00001f38 <o_strstr@@Base>:
    1f38:	cmp	r0, #0
    1f3c:	cmpne	r1, #0
    1f40:	bne	1f4c <o_strstr@@Base+0x14>
    1f44:	mov	r0, #0
    1f48:	bx	lr
    1f4c:	b	1018 <strstr@plt>

00001f50 <o_strchr@@Base>:
    1f50:	cmp	r0, #0
    1f54:	moveq	r0, #0
    1f58:	bxeq	lr
    1f5c:	b	10c0 <strchr@plt>

00001f60 <o_strnchr@@Base>:
    1f60:	push	{r4, r5, r6, sl, fp, lr}
    1f64:	add	fp, sp, #16
    1f68:	mov	r5, r0
    1f6c:	mov	r0, #0
    1f70:	cmp	r5, #0
    1f74:	movne	r6, r1
    1f78:	cmpne	r1, #0
    1f7c:	bne	1f84 <o_strnchr@@Base+0x24>
    1f80:	pop	{r4, r5, r6, sl, fp, pc}
    1f84:	mov	r0, r5
    1f88:	mov	r4, r2
    1f8c:	bl	10b4 <strlen@plt>
    1f90:	mov	r1, r0
    1f94:	mov	r0, #0
    1f98:	mov	r2, #0
    1f9c:	cmp	r2, r1
    1fa0:	popcs	{r4, r5, r6, sl, fp, pc}
    1fa4:	ldrb	r3, [r5, r2]
    1fa8:	cmp	r3, r4
    1fac:	beq	1fc0 <o_strnchr@@Base+0x60>
    1fb0:	add	r2, r2, #1
    1fb4:	cmp	r2, r6
    1fb8:	bcc	1f9c <o_strnchr@@Base+0x3c>
    1fbc:	b	1f80 <o_strnchr@@Base+0x20>
    1fc0:	add	r0, r5, r2
    1fc4:	pop	{r4, r5, r6, sl, fp, pc}

00001fc8 <o_strlen@@Base>:
    1fc8:	cmp	r0, #0
    1fcc:	moveq	r0, #0
    1fd0:	bxeq	lr
    1fd4:	b	10b4 <strlen@plt>

00001fd8 <o_strrchr@@Base>:
    1fd8:	cmp	r0, #0
    1fdc:	moveq	r0, #0
    1fe0:	bxeq	lr
    1fe4:	b	1114 <strrchr@plt>

00001fe8 <o_strrnchr@@Base>:
    1fe8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1fec:	add	fp, sp, #24
    1ff0:	cmp	r0, #0
    1ff4:	mov	r8, #0
    1ff8:	movne	r7, r1
    1ffc:	cmpne	r1, #0
    2000:	bne	200c <o_strrnchr@@Base+0x24>
    2004:	mov	r0, r8
    2008:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    200c:	mov	r9, r2
    2010:	mov	r6, r0
    2014:	bl	10b4 <strlen@plt>
    2018:	sub	r5, r0, #1
    201c:	rsb	r4, r0, #0
    2020:	cmp	r5, #0
    2024:	blt	2004 <o_strrnchr@@Base+0x1c>
    2028:	mov	r0, r6
    202c:	bl	10b4 <strlen@plt>
    2030:	add	r0, r0, r4
    2034:	cmp	r0, r7
    2038:	bcs	2004 <o_strrnchr@@Base+0x1c>
    203c:	ldrb	r0, [r6, r5]
    2040:	sub	r5, r5, #1
    2044:	add	r4, r4, #1
    2048:	cmp	r0, r9
    204c:	bne	2020 <o_strrnchr@@Base+0x38>
    2050:	sub	r8, r6, r4
    2054:	mov	r0, r8
    2058:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000205c <o_strnstr@@Base>:
    205c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2060:	add	fp, sp, #28
    2064:	sub	sp, sp, #4
    2068:	cmp	r0, #0
    206c:	mov	r9, #0
    2070:	movne	r8, r1
    2074:	cmpne	r1, #0
    2078:	bne	2088 <o_strnstr@@Base+0x2c>
    207c:	mov	r0, r9
    2080:	sub	sp, fp, #28
    2084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2088:	mov	r4, r0
    208c:	mov	r0, r8
    2090:	mov	r5, r2
    2094:	bl	10b4 <strlen@plt>
    2098:	cmp	r0, #0
    209c:	beq	20f4 <o_strnstr@@Base+0x98>
    20a0:	sub	r7, r5, r0
    20a4:	mov	sl, r0
    20a8:	cmp	r7, #0
    20ac:	blt	207c <o_strnstr@@Base+0x20>
    20b0:	ldrb	r6, [r8]
    20b4:	mov	r5, #0
    20b8:	mov	r0, r4
    20bc:	ldrb	r1, [r0, r5]!
    20c0:	cmp	r1, r6
    20c4:	bne	20dc <o_strnstr@@Base+0x80>
    20c8:	mov	r1, r8
    20cc:	mov	r2, sl
    20d0:	bl	1138 <strncmp@plt>
    20d4:	cmp	r0, #0
    20d8:	beq	20fc <o_strnstr@@Base+0xa0>
    20dc:	add	r0, r5, #1
    20e0:	cmp	r5, r7
    20e4:	mov	r5, r0
    20e8:	blt	20b8 <o_strnstr@@Base+0x5c>
    20ec:	mov	r9, #0
    20f0:	b	207c <o_strnstr@@Base+0x20>
    20f4:	mov	r9, r4
    20f8:	b	207c <o_strnstr@@Base+0x20>
    20fc:	add	r9, r4, r5
    2100:	b	207c <o_strnstr@@Base+0x20>

00002104 <o_strcasestr@@Base>:
    2104:	cmp	r0, #0
    2108:	cmpne	r1, #0
    210c:	bne	2118 <o_strcasestr@@Base+0x14>
    2110:	mov	r0, #0
    2114:	bx	lr
    2118:	b	1024 <strcasestr@plt>

0000211c <split_string@@Base>:
    211c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2120:	add	fp, sp, #28
    2124:	sub	sp, sp, #4
    2128:	cmp	r0, #0
    212c:	mov	r5, #0
    2130:	movne	r4, r1
    2134:	cmpne	r1, #0
    2138:	bne	2148 <split_string@@Base+0x2c>
    213c:	mov	r0, r5
    2140:	sub	sp, fp, #28
    2144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2148:	cmp	r2, #0
    214c:	mov	r6, r0
    2150:	mov	r9, r2
    2154:	mov	r1, r4
    2158:	movne	r0, #0
    215c:	strne	r0, [r9]
    2160:	mov	r0, r6
    2164:	bl	1018 <strstr@plt>
    2168:	cmp	r0, #0
    216c:	beq	222c <split_string@@Base+0x110>
    2170:	mov	r7, r0
    2174:	mov	r5, #1
    2178:	str	r4, [sp]
    217c:	cmp	r9, #0
    2180:	beq	21f8 <split_string@@Base+0xdc>
    2184:	mov	r0, #4
    2188:	add	r1, r0, r5, lsl #2
    218c:	ldr	r0, [r9]
    2190:	bl	1084 <o_realloc@plt>
    2194:	cmp	r0, #0
    2198:	str	r0, [r9]
    219c:	beq	21f8 <split_string@@Base+0xdc>
    21a0:	mov	r8, #0
    21a4:	cmp	r6, #0
    21a8:	beq	21dc <split_string@@Base+0xc0>
    21ac:	sub	sl, r7, r6
    21b0:	add	r0, sl, #1
    21b4:	bl	10e4 <o_malloc@plt>
    21b8:	cmp	r0, #0
    21bc:	beq	21dc <split_string@@Base+0xc0>
    21c0:	mov	r1, r6
    21c4:	mov	r2, sl
    21c8:	mov	r4, r0
    21cc:	bl	1054 <memcpy@plt>
    21d0:	mov	r0, #0
    21d4:	mov	r8, r4
    21d8:	strb	r0, [r4, sl]
    21dc:	ldr	r0, [r9]
    21e0:	ldr	r4, [sp]
    21e4:	mov	r1, #0
    21e8:	add	r0, r0, r5, lsl #2
    21ec:	str	r8, [r0, #-4]
    21f0:	ldr	r0, [r9]
    21f4:	str	r1, [r0, r5, lsl #2]
    21f8:	mov	r0, r4
    21fc:	bl	10b4 <strlen@plt>
    2200:	add	r6, r7, r0
    2204:	mov	r1, r4
    2208:	mov	r0, r6
    220c:	bl	1018 <strstr@plt>
    2210:	mov	r7, r0
    2214:	add	r5, r5, #1
    2218:	cmp	r0, #0
    221c:	bne	217c <split_string@@Base+0x60>
    2220:	cmp	r9, #0
    2224:	bne	2238 <split_string@@Base+0x11c>
    2228:	b	213c <split_string@@Base+0x20>
    222c:	mov	r5, #1
    2230:	cmp	r9, #0
    2234:	beq	213c <split_string@@Base+0x20>
    2238:	mov	r0, #4
    223c:	add	r1, r0, r5, lsl #2
    2240:	ldr	r0, [r9]
    2244:	bl	1084 <o_realloc@plt>
    2248:	cmp	r0, #0
    224c:	str	r0, [r9]
    2250:	beq	213c <split_string@@Base+0x20>
    2254:	mov	r8, #0
    2258:	cmp	r6, #0
    225c:	mov	r0, #0
    2260:	beq	22a4 <split_string@@Base+0x188>
    2264:	mov	r0, r6
    2268:	bl	10b4 <strlen@plt>
    226c:	mov	r7, r0
    2270:	add	r0, r0, #1
    2274:	bl	10e4 <o_malloc@plt>
    2278:	mov	r4, r0
    227c:	cmp	r0, #0
    2280:	mov	r0, #0
    2284:	beq	22a4 <split_string@@Base+0x188>
    2288:	mov	r0, r4
    228c:	mov	r1, r6
    2290:	mov	r2, r7
    2294:	bl	1054 <memcpy@plt>
    2298:	mov	r0, #0
    229c:	strb	r0, [r4, r7]
    22a0:	mov	r0, r4
    22a4:	ldr	r1, [r9]
    22a8:	add	r1, r1, r5, lsl #2
    22ac:	str	r0, [r1, #-4]
    22b0:	ldr	r0, [r9]
    22b4:	str	r8, [r0, r5, lsl #2]
    22b8:	b	213c <split_string@@Base+0x20>

000022bc <free_string_array@@Base>:
    22bc:	cmp	r0, #0
    22c0:	bxeq	lr
    22c4:	push	{r4, r5, r6, sl, fp, lr}
    22c8:	add	fp, sp, #16
    22cc:	mov	r4, r0
    22d0:	ldr	r0, [r0]
    22d4:	cmp	r0, #0
    22d8:	beq	22f8 <free_string_array@@Base+0x3c>
    22dc:	add	r5, r4, #4
    22e0:	mov	r6, #0
    22e4:	bl	1048 <o_free@plt>
    22e8:	str	r6, [r5, #-4]
    22ec:	ldr	r0, [r5], #4
    22f0:	cmp	r0, #0
    22f4:	bne	22e4 <free_string_array@@Base+0x28>
    22f8:	mov	r0, r4
    22fc:	pop	{r4, r5, r6, sl, fp, lr}
    2300:	b	1048 <o_free@plt>

00002304 <string_array_size@@Base>:
    2304:	cmp	r0, #0
    2308:	moveq	r0, #0
    230c:	bxeq	lr
    2310:	mov	r1, #0
    2314:	ldr	r2, [r0, r1, lsl #2]
    2318:	add	r1, r1, #1
    231c:	cmp	r2, #0
    2320:	bne	2314 <string_array_size@@Base+0x10>
    2324:	sub	r0, r1, #1
    2328:	bx	lr

0000232c <string_array_join@@Base>:
    232c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2330:	add	fp, sp, #28
    2334:	sub	sp, sp, #4
    2338:	mov	r5, #0
    233c:	cmp	r0, #0
    2340:	beq	23e0 <string_array_join@@Base+0xb4>
    2344:	cmp	r1, #0
    2348:	mov	r9, r1
    234c:	ldrne	r7, [r0]
    2350:	cmpne	r7, #0
    2354:	beq	23e0 <string_array_join@@Base+0xb4>
    2358:	ldr	r8, [pc, #140]	; 23ec <string_array_join@@Base+0xc0>
    235c:	add	r4, r0, #4
    2360:	mov	sl, #0
    2364:	mov	r5, #0
    2368:	add	r8, pc, r8
    236c:	cmp	r5, #0
    2370:	beq	239c <string_array_join@@Base+0x70>
    2374:	mov	r0, r8
    2378:	mov	r1, r5
    237c:	mov	r2, r9
    2380:	mov	r3, r7
    2384:	bl	1108 <msprintf@plt>
    2388:	mov	r6, r0
    238c:	mov	r0, r5
    2390:	bl	1048 <o_free@plt>
    2394:	mov	r5, r6
    2398:	b	23d4 <string_array_join@@Base+0xa8>
    239c:	mov	r0, r7
    23a0:	bl	10b4 <strlen@plt>
    23a4:	mov	r6, r0
    23a8:	add	r0, r0, #1
    23ac:	bl	10e4 <o_malloc@plt>
    23b0:	cmp	r0, #0
    23b4:	beq	23d0 <string_array_join@@Base+0xa4>
    23b8:	mov	r1, r7
    23bc:	mov	r2, r6
    23c0:	mov	r5, r0
    23c4:	bl	1054 <memcpy@plt>
    23c8:	strb	sl, [r5, r6]
    23cc:	b	23d4 <string_array_join@@Base+0xa8>
    23d0:	mov	r5, #0
    23d4:	ldr	r7, [r4], #4
    23d8:	cmp	r7, #0
    23dc:	bne	236c <string_array_join@@Base+0x40>
    23e0:	mov	r0, r5
    23e4:	sub	sp, fp, #28
    23e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23ec:	ldrdeq	r0, [r0], -sp

000023f0 <trimwhitespace@@Base>:
    23f0:	push	{r4, r5, r6, sl, fp, lr}
    23f4:	add	fp, sp, #16
    23f8:	cmp	r0, #0
    23fc:	moveq	r4, #0
    2400:	moveq	r0, r4
    2404:	popeq	{r4, r5, r6, sl, fp, pc}
    2408:	ldrb	r6, [r0]
    240c:	mov	r4, r0
    2410:	cmp	r6, #0
    2414:	beq	2478 <trimwhitespace@@Base+0x88>
    2418:	bl	10a8 <__ctype_b_loc@plt>
    241c:	ldr	r5, [r0]
    2420:	add	r0, r5, r6, lsl #1
    2424:	b	2430 <trimwhitespace@@Base+0x40>
    2428:	ldrb	r0, [r4, #1]!
    242c:	add	r0, r5, r0, lsl #1
    2430:	ldrb	r0, [r0, #1]
    2434:	tst	r0, #32
    2438:	bne	2428 <trimwhitespace@@Base+0x38>
    243c:	mov	r0, r4
    2440:	bl	10b4 <strlen@plt>
    2444:	add	r0, r4, r0
    2448:	sub	r1, r0, #1
    244c:	mov	r0, r1
    2450:	cmp	r1, r4
    2454:	bls	2470 <trimwhitespace@@Base+0x80>
    2458:	mov	r1, r0
    245c:	ldrb	r2, [r1], #-1
    2460:	add	r2, r5, r2, lsl #1
    2464:	ldrb	r2, [r2, #1]
    2468:	tst	r2, #32
    246c:	bne	244c <trimwhitespace@@Base+0x5c>
    2470:	mov	r1, #0
    2474:	strb	r1, [r0, #1]
    2478:	mov	r0, r4
    247c:	pop	{r4, r5, r6, sl, fp, pc}

00002480 <trimcharacter@@Base>:
    2480:	push	{r4, r5, fp, lr}
    2484:	add	fp, sp, #8
    2488:	cmp	r0, #0
    248c:	moveq	r4, #0
    2490:	moveq	r0, r4
    2494:	popeq	{r4, r5, fp, pc}
    2498:	mov	r4, r0
    249c:	ldrb	r0, [r0]
    24a0:	cmp	r0, #0
    24a4:	beq	24f4 <trimcharacter@@Base+0x74>
    24a8:	mov	r5, r1
    24ac:	cmp	r0, r5
    24b0:	bne	24c0 <trimcharacter@@Base+0x40>
    24b4:	ldrb	r0, [r4, #1]!
    24b8:	cmp	r0, r5
    24bc:	beq	24b4 <trimcharacter@@Base+0x34>
    24c0:	mov	r0, r4
    24c4:	bl	10b4 <strlen@plt>
    24c8:	add	r0, r4, r0
    24cc:	sub	r1, r0, #1
    24d0:	mov	r0, r1
    24d4:	cmp	r1, r4
    24d8:	bls	24ec <trimcharacter@@Base+0x6c>
    24dc:	mov	r1, r0
    24e0:	ldrb	r2, [r1], #-1
    24e4:	cmp	r2, r5
    24e8:	beq	24d0 <trimcharacter@@Base+0x50>
    24ec:	mov	r1, #0
    24f0:	strb	r1, [r0, #1]
    24f4:	mov	r0, r4
    24f8:	pop	{r4, r5, fp, pc}

000024fc <string_array_has_value@@Base>:
    24fc:	push	{r4, r5, r6, sl, fp, lr}
    2500:	add	fp, sp, #16
    2504:	cmp	r0, #0
    2508:	mov	r4, #0
    250c:	movne	r5, r1
    2510:	cmpne	r1, #0
    2514:	bne	2520 <string_array_has_value@@Base+0x24>
    2518:	mov	r0, r4
    251c:	pop	{r4, r5, r6, sl, fp, pc}
    2520:	mov	r1, r0
    2524:	ldr	r0, [r0]
    2528:	cmp	r0, #0
    252c:	beq	2518 <string_array_has_value@@Base+0x1c>
    2530:	add	r6, r1, #4
    2534:	mov	r1, r5
    2538:	bl	1030 <strcmp@plt>
    253c:	cmp	r0, #0
    2540:	beq	2554 <string_array_has_value@@Base+0x58>
    2544:	ldr	r0, [r6], #4
    2548:	cmp	r0, #0
    254c:	bne	2534 <string_array_has_value@@Base+0x38>
    2550:	b	2518 <string_array_has_value@@Base+0x1c>
    2554:	mov	r4, #1
    2558:	mov	r0, r4
    255c:	pop	{r4, r5, r6, sl, fp, pc}

00002560 <string_array_has_value_case@@Base>:
    2560:	push	{r4, r5, r6, sl, fp, lr}
    2564:	add	fp, sp, #16
    2568:	cmp	r0, #0
    256c:	mov	r4, #0
    2570:	movne	r5, r1
    2574:	cmpne	r1, #0
    2578:	bne	2584 <string_array_has_value_case@@Base+0x24>
    257c:	mov	r0, r4
    2580:	pop	{r4, r5, r6, sl, fp, pc}
    2584:	mov	r1, r0
    2588:	ldr	r0, [r0]
    258c:	cmp	r0, #0
    2590:	beq	257c <string_array_has_value_case@@Base+0x1c>
    2594:	add	r6, r1, #4
    2598:	mov	r1, r5
    259c:	bl	106c <strcasecmp@plt>
    25a0:	cmp	r0, #0
    25a4:	beq	25b8 <string_array_has_value_case@@Base+0x58>
    25a8:	ldr	r0, [r6], #4
    25ac:	cmp	r0, #0
    25b0:	bne	2598 <string_array_has_value_case@@Base+0x38>
    25b4:	b	257c <string_array_has_value_case@@Base+0x1c>
    25b8:	mov	r4, #1
    25bc:	mov	r0, r4
    25c0:	pop	{r4, r5, r6, sl, fp, pc}

000025c4 <string_array_has_value_n@@Base>:
    25c4:	push	{r4, r5, r6, r7, fp, lr}
    25c8:	add	fp, sp, #16
    25cc:	cmp	r0, #0
    25d0:	movne	r5, r1
    25d4:	cmpne	r1, #0
    25d8:	bne	25e8 <string_array_has_value_n@@Base+0x24>
    25dc:	mov	r6, #0
    25e0:	mov	r0, r6
    25e4:	pop	{r4, r5, r6, r7, fp, pc}
    25e8:	mov	r1, r0
    25ec:	ldr	r0, [r0]
    25f0:	cmp	r0, #0
    25f4:	beq	25dc <string_array_has_value_n@@Base+0x18>
    25f8:	mov	r4, r2
    25fc:	add	r7, r1, #4
    2600:	mov	r6, #1
    2604:	cmp	r4, #0
    2608:	beq	25e0 <string_array_has_value_n@@Base+0x1c>
    260c:	mov	r1, r5
    2610:	mov	r2, r4
    2614:	bl	1138 <strncmp@plt>
    2618:	cmp	r0, #0
    261c:	beq	25e0 <string_array_has_value_n@@Base+0x1c>
    2620:	ldr	r0, [r7], #4
    2624:	cmp	r0, #0
    2628:	bne	2604 <string_array_has_value_n@@Base+0x40>
    262c:	b	25dc <string_array_has_value_n@@Base+0x18>

00002630 <string_array_has_value_ncase@@Base>:
    2630:	push	{r4, r5, r6, r7, fp, lr}
    2634:	add	fp, sp, #16
    2638:	cmp	r0, #0
    263c:	movne	r5, r1
    2640:	cmpne	r1, #0
    2644:	bne	2654 <string_array_has_value_ncase@@Base+0x24>
    2648:	mov	r6, #0
    264c:	mov	r0, r6
    2650:	pop	{r4, r5, r6, r7, fp, pc}
    2654:	mov	r1, r0
    2658:	ldr	r0, [r0]
    265c:	cmp	r0, #0
    2660:	beq	2648 <string_array_has_value_ncase@@Base+0x18>
    2664:	mov	r4, r2
    2668:	add	r7, r1, #4
    266c:	mov	r6, #1
    2670:	cmp	r4, #0
    2674:	beq	264c <string_array_has_value_ncase@@Base+0x1c>
    2678:	mov	r1, r5
    267c:	mov	r2, r4
    2680:	bl	10cc <strncasecmp@plt>
    2684:	cmp	r0, #0
    2688:	beq	264c <string_array_has_value_ncase@@Base+0x1c>
    268c:	ldr	r0, [r7], #4
    2690:	cmp	r0, #0
    2694:	bne	2670 <string_array_has_value_ncase@@Base+0x40>
    2698:	b	2648 <string_array_has_value_ncase@@Base+0x18>

0000269c <string_array_has_trimmed_value@@Base>:
    269c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    26a0:	add	fp, sp, #28
    26a4:	sub	sp, sp, #12
    26a8:	cmp	r0, #0
    26ac:	mov	sl, #0
    26b0:	str	r0, [sp, #8]
    26b4:	movne	r4, r1
    26b8:	cmpne	r1, #0
    26bc:	beq	288c <string_array_has_trimmed_value@@Base+0x1f0>
    26c0:	mov	r0, r4
    26c4:	bl	10b4 <strlen@plt>
    26c8:	mov	r6, r0
    26cc:	add	r0, r0, #1
    26d0:	bl	10e4 <o_malloc@plt>
    26d4:	mov	r5, r0
    26d8:	cmp	r0, #0
    26dc:	beq	2880 <string_array_has_trimmed_value@@Base+0x1e4>
    26e0:	mov	r0, r5
    26e4:	mov	r1, r4
    26e8:	mov	r2, r6
    26ec:	bl	1054 <memcpy@plt>
    26f0:	mov	sl, #0
    26f4:	mov	r7, r5
    26f8:	strb	sl, [r5, r6]
    26fc:	ldrb	r6, [r5]
    2700:	cmp	r6, #0
    2704:	beq	2778 <string_array_has_trimmed_value@@Base+0xdc>
    2708:	bl	10a8 <__ctype_b_loc@plt>
    270c:	ldr	r4, [r0]
    2710:	mov	r7, r5
    2714:	add	r0, r4, r6, lsl #1
    2718:	ldrb	r0, [r0, #1]
    271c:	tst	r0, #32
    2720:	beq	273c <string_array_has_trimmed_value@@Base+0xa0>
    2724:	mov	r7, r5
    2728:	ldrb	r0, [r7, #1]!
    272c:	add	r0, r4, r0, lsl #1
    2730:	ldrb	r0, [r0, #1]
    2734:	tst	r0, #32
    2738:	bne	2728 <string_array_has_trimmed_value@@Base+0x8c>
    273c:	mov	r0, r7
    2740:	bl	10b4 <strlen@plt>
    2744:	add	r0, r7, r0
    2748:	sub	r1, r0, #1
    274c:	mov	r0, r1
    2750:	cmp	r1, r7
    2754:	bls	2770 <string_array_has_trimmed_value@@Base+0xd4>
    2758:	mov	r1, r0
    275c:	ldrb	r2, [r1], #-1
    2760:	add	r2, r4, r2, lsl #1
    2764:	ldrb	r2, [r2, #1]
    2768:	tst	r2, #32
    276c:	bne	274c <string_array_has_trimmed_value@@Base+0xb0>
    2770:	mov	r1, #0
    2774:	strb	r1, [r0, #1]
    2778:	ldr	r0, [sp, #8]
    277c:	ldr	r6, [r0]
    2780:	cmp	r6, #0
    2784:	beq	2884 <string_array_has_trimmed_value@@Base+0x1e8>
    2788:	mov	sl, #0
    278c:	mov	r8, #0
    2790:	str	r5, [sp, #4]
    2794:	mov	r0, r6
    2798:	bl	10b4 <strlen@plt>
    279c:	mov	r5, r0
    27a0:	add	r0, r0, #1
    27a4:	bl	10e4 <o_malloc@plt>
    27a8:	cmp	r0, #0
    27ac:	beq	2878 <string_array_has_trimmed_value@@Base+0x1dc>
    27b0:	mov	r1, r6
    27b4:	mov	r2, r5
    27b8:	mov	r4, r0
    27bc:	bl	1054 <memcpy@plt>
    27c0:	strb	sl, [r4, r5]
    27c4:	mov	r6, r4
    27c8:	ldrb	r9, [r4]
    27cc:	cmp	r9, #0
    27d0:	beq	2840 <string_array_has_trimmed_value@@Base+0x1a4>
    27d4:	bl	10a8 <__ctype_b_loc@plt>
    27d8:	ldr	r5, [r0]
    27dc:	mov	r6, r4
    27e0:	add	r0, r5, r9, lsl #1
    27e4:	ldrb	r0, [r0, #1]
    27e8:	tst	r0, #32
    27ec:	beq	2808 <string_array_has_trimmed_value@@Base+0x16c>
    27f0:	mov	r6, r4
    27f4:	ldrb	r0, [r6, #1]!
    27f8:	add	r0, r5, r0, lsl #1
    27fc:	ldrb	r0, [r0, #1]
    2800:	tst	r0, #32
    2804:	bne	27f4 <string_array_has_trimmed_value@@Base+0x158>
    2808:	mov	r0, r6
    280c:	bl	10b4 <strlen@plt>
    2810:	add	r0, r6, r0
    2814:	sub	r1, r0, #1
    2818:	mov	r0, r1
    281c:	cmp	r1, r6
    2820:	bls	283c <string_array_has_trimmed_value@@Base+0x1a0>
    2824:	mov	r1, r0
    2828:	ldrb	r2, [r1], #-1
    282c:	add	r2, r5, r2, lsl #1
    2830:	ldrb	r2, [r2, #1]
    2834:	tst	r2, #32
    2838:	bne	2818 <string_array_has_trimmed_value@@Base+0x17c>
    283c:	strb	sl, [r0, #1]
    2840:	mov	r0, r6
    2844:	mov	r1, r7
    2848:	bl	1030 <strcmp@plt>
    284c:	mov	r5, r0
    2850:	mov	r0, r4
    2854:	bl	1048 <o_free@plt>
    2858:	ldr	r0, [sp, #8]
    285c:	add	r8, r8, #1
    2860:	ldr	r6, [r0, r8, lsl #2]
    2864:	cmp	r6, #0
    2868:	cmpne	r5, #0
    286c:	bne	2794 <string_array_has_trimmed_value@@Base+0xf8>
    2870:	clz	r0, r5
    2874:	lsr	sl, r0, #5
    2878:	ldr	r5, [sp, #4]
    287c:	b	2884 <string_array_has_trimmed_value@@Base+0x1e8>
    2880:	mov	sl, #0
    2884:	mov	r0, r5
    2888:	bl	1048 <o_free@plt>
    288c:	mov	r0, sl
    2890:	sub	sp, fp, #28
    2894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002898 <pointer_list_init@@Base>:
    2898:	cmp	r0, #0
    289c:	movne	r1, #0
    28a0:	strne	r1, [r0]
    28a4:	strne	r1, [r0, #4]
    28a8:	bx	lr

000028ac <pointer_list_clean@@Base>:
    28ac:	push	{r4, r5, r6, r7, fp, lr}
    28b0:	add	fp, sp, #16
    28b4:	cmp	r0, #0
    28b8:	beq	2950 <pointer_list_clean@@Base+0xa4>
    28bc:	ldr	lr, [r0]
    28c0:	mov	r4, r0
    28c4:	cmp	lr, #0
    28c8:	popeq	{r4, r5, r6, r7, fp, pc}
    28cc:	lsl	r7, lr, #2
    28d0:	mov	r0, lr
    28d4:	sub	r6, r0, #1
    28d8:	cmp	lr, r6
    28dc:	bls	2940 <pointer_list_clean@@Base+0x94>
    28e0:	sub	ip, lr, #1
    28e4:	cmp	ip, r6
    28e8:	bls	2910 <pointer_list_clean@@Base+0x64>
    28ec:	mov	r3, lr
    28f0:	mov	r5, r7
    28f4:	ldr	r2, [r4, #4]
    28f8:	sub	r3, r3, #1
    28fc:	cmp	r0, r3
    2900:	ldr	r1, [r2, r5]!
    2904:	add	r5, r5, #4
    2908:	str	r1, [r2, #-4]
    290c:	bne	28f4 <pointer_list_clean@@Base+0x48>
    2910:	ldr	r0, [r4, #4]
    2914:	cmp	lr, #2
    2918:	bcc	2928 <pointer_list_clean@@Base+0x7c>
    291c:	lsl	r1, ip, #2
    2920:	bl	1084 <o_realloc@plt>
    2924:	b	2930 <pointer_list_clean@@Base+0x84>
    2928:	bl	1048 <o_free@plt>
    292c:	mov	r0, #0
    2930:	str	r0, [r4, #4]
    2934:	ldr	r0, [r4]
    2938:	sub	lr, r0, #1
    293c:	str	lr, [r4]
    2940:	sub	r7, r7, #4
    2944:	cmp	r6, #0
    2948:	mov	r0, r6
    294c:	bne	28d4 <pointer_list_clean@@Base+0x28>
    2950:	pop	{r4, r5, r6, r7, fp, pc}

00002954 <pointer_list_size@@Base>:
    2954:	cmp	r0, #0
    2958:	ldrne	r0, [r0]
    295c:	moveq	r0, #0
    2960:	bx	lr

00002964 <pointer_list_remove_at@@Base>:
    2964:	push	{r4, sl, fp, lr}
    2968:	add	fp, sp, #8
    296c:	mov	r4, r0
    2970:	mov	r0, #0
    2974:	cmp	r4, #0
    2978:	ldrne	ip, [r4]
    297c:	cmpne	ip, r1
    2980:	bhi	2988 <pointer_list_remove_at@@Base+0x24>
    2984:	pop	{r4, sl, fp, pc}
    2988:	sub	r3, ip, #1
    298c:	cmp	r3, r1
    2990:	bls	29b0 <pointer_list_remove_at@@Base+0x4c>
    2994:	ldr	r0, [r4, #4]
    2998:	add	r2, r0, r1, lsl #2
    299c:	ldr	r2, [r2, #4]
    29a0:	str	r2, [r0, r1, lsl #2]
    29a4:	add	r1, r1, #1
    29a8:	cmp	r3, r1
    29ac:	bne	2994 <pointer_list_remove_at@@Base+0x30>
    29b0:	ldr	r0, [r4, #4]
    29b4:	cmp	ip, #2
    29b8:	bcc	29c8 <pointer_list_remove_at@@Base+0x64>
    29bc:	lsl	r1, r3, #2
    29c0:	bl	1084 <o_realloc@plt>
    29c4:	b	29d0 <pointer_list_remove_at@@Base+0x6c>
    29c8:	bl	1048 <o_free@plt>
    29cc:	mov	r0, #0
    29d0:	str	r0, [r4, #4]
    29d4:	ldr	r0, [r4]
    29d8:	sub	r0, r0, #1
    29dc:	str	r0, [r4]
    29e0:	mov	r0, #1
    29e4:	pop	{r4, sl, fp, pc}

000029e8 <pointer_list_clean_free@@Base>:
    29e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    29ec:	add	fp, sp, #24
    29f0:	cmp	r0, #0
    29f4:	beq	2aa8 <pointer_list_clean_free@@Base+0xc0>
    29f8:	mov	r8, r1
    29fc:	ldr	r1, [r0]
    2a00:	mov	r5, r0
    2a04:	cmp	r1, #0
    2a08:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    2a0c:	lsl	r9, r1, #2
    2a10:	mov	r7, r1
    2a14:	sub	r4, r7, #1
    2a18:	mov	r0, #0
    2a1c:	cmp	r1, r4
    2a20:	ldrhi	r0, [r5, #4]
    2a24:	ldrhi	r0, [r0, r4, lsl #2]
    2a28:	blx	r8
    2a2c:	ldr	r1, [r5]
    2a30:	cmp	r1, r4
    2a34:	bls	2a98 <pointer_list_clean_free@@Base+0xb0>
    2a38:	sub	ip, r1, #1
    2a3c:	cmp	ip, r4
    2a40:	bls	2a68 <pointer_list_clean_free@@Base+0x80>
    2a44:	mov	r0, r1
    2a48:	mov	r3, r9
    2a4c:	ldr	r2, [r5, #4]
    2a50:	sub	r0, r0, #1
    2a54:	cmp	r7, r0
    2a58:	ldr	r6, [r2, r3]!
    2a5c:	add	r3, r3, #4
    2a60:	str	r6, [r2, #-4]
    2a64:	bne	2a4c <pointer_list_clean_free@@Base+0x64>
    2a68:	ldr	r0, [r5, #4]
    2a6c:	cmp	r1, #2
    2a70:	bcc	2a80 <pointer_list_clean_free@@Base+0x98>
    2a74:	lsl	r1, ip, #2
    2a78:	bl	1084 <o_realloc@plt>
    2a7c:	b	2a88 <pointer_list_clean_free@@Base+0xa0>
    2a80:	bl	1048 <o_free@plt>
    2a84:	mov	r0, #0
    2a88:	str	r0, [r5, #4]
    2a8c:	ldr	r0, [r5]
    2a90:	sub	r1, r0, #1
    2a94:	str	r1, [r5]
    2a98:	sub	r9, r9, #4
    2a9c:	cmp	r4, #0
    2aa0:	mov	r7, r4
    2aa4:	bne	2a14 <pointer_list_clean_free@@Base+0x2c>
    2aa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00002aac <pointer_list_get_at@@Base>:
    2aac:	mov	r2, r0
    2ab0:	mov	r0, #0
    2ab4:	cmp	r2, #0
    2ab8:	bxeq	lr
    2abc:	ldr	r3, [r2]
    2ac0:	cmp	r3, r1
    2ac4:	ldrhi	r0, [r2, #4]
    2ac8:	ldrhi	r0, [r0, r1, lsl #2]
    2acc:	bx	lr

00002ad0 <pointer_list_append@@Base>:
    2ad0:	push	{r4, r5, fp, lr}
    2ad4:	add	fp, sp, #8
    2ad8:	cmp	r0, #0
    2adc:	moveq	r5, #0
    2ae0:	moveq	r0, r5
    2ae4:	popeq	{r4, r5, fp, pc}
    2ae8:	mov	r5, r1
    2aec:	ldr	r1, [r0]
    2af0:	mov	r4, r0
    2af4:	ldr	r0, [r0, #4]
    2af8:	mov	r2, #4
    2afc:	add	r1, r2, r1, lsl #2
    2b00:	bl	1084 <o_realloc@plt>
    2b04:	cmp	r0, #0
    2b08:	str	r0, [r4, #4]
    2b0c:	beq	2b2c <pointer_list_append@@Base+0x5c>
    2b10:	ldr	r1, [r4]
    2b14:	str	r5, [r0, r1, lsl #2]
    2b18:	add	r0, r1, #1
    2b1c:	mov	r5, #1
    2b20:	str	r0, [r4]
    2b24:	mov	r0, r5
    2b28:	pop	{r4, r5, fp, pc}
    2b2c:	mov	r0, #0
    2b30:	mov	r5, #0
    2b34:	bl	1048 <o_free@plt>
    2b38:	mov	r0, r5
    2b3c:	str	r5, [r4, #4]
    2b40:	pop	{r4, r5, fp, pc}

00002b44 <pointer_list_remove_at_free@@Base>:
    2b44:	push	{r4, r5, r6, sl, fp, lr}
    2b48:	add	fp, sp, #16
    2b4c:	mov	r6, #0
    2b50:	cmp	r0, #0
    2b54:	beq	2be0 <pointer_list_remove_at_free@@Base+0x9c>
    2b58:	mov	r4, r0
    2b5c:	ldr	r0, [r0]
    2b60:	mov	r5, r1
    2b64:	cmp	r0, r1
    2b68:	bls	2be0 <pointer_list_remove_at_free@@Base+0x9c>
    2b6c:	ldr	r0, [r4, #4]
    2b70:	ldr	r0, [r0, r5, lsl #2]
    2b74:	blx	r2
    2b78:	ldr	r1, [r4]
    2b7c:	cmp	r1, r5
    2b80:	bls	2be0 <pointer_list_remove_at_free@@Base+0x9c>
    2b84:	sub	r2, r1, #1
    2b88:	cmp	r2, r5
    2b8c:	bls	2bac <pointer_list_remove_at_free@@Base+0x68>
    2b90:	ldr	r0, [r4, #4]
    2b94:	add	r3, r0, r5, lsl #2
    2b98:	ldr	r3, [r3, #4]
    2b9c:	str	r3, [r0, r5, lsl #2]
    2ba0:	add	r5, r5, #1
    2ba4:	cmp	r2, r5
    2ba8:	bne	2b90 <pointer_list_remove_at_free@@Base+0x4c>
    2bac:	ldr	r0, [r4, #4]
    2bb0:	cmp	r1, #2
    2bb4:	bcc	2bc4 <pointer_list_remove_at_free@@Base+0x80>
    2bb8:	lsl	r1, r2, #2
    2bbc:	bl	1084 <o_realloc@plt>
    2bc0:	b	2bcc <pointer_list_remove_at_free@@Base+0x88>
    2bc4:	bl	1048 <o_free@plt>
    2bc8:	mov	r0, #0
    2bcc:	str	r0, [r4, #4]
    2bd0:	mov	r6, #1
    2bd4:	ldr	r0, [r4]
    2bd8:	sub	r0, r0, #1
    2bdc:	str	r0, [r4]
    2be0:	mov	r0, r6
    2be4:	pop	{r4, r5, r6, sl, fp, pc}

00002be8 <pointer_list_insert_at@@Base>:
    2be8:	push	{r4, r5, r6, r7, fp, lr}
    2bec:	add	fp, sp, #16
    2bf0:	mov	r7, #0
    2bf4:	cmp	r0, #0
    2bf8:	beq	2c6c <pointer_list_insert_at@@Base+0x84>
    2bfc:	mov	r4, r0
    2c00:	ldr	r0, [r0]
    2c04:	mov	r5, r2
    2c08:	cmp	r0, r2
    2c0c:	bcc	2c6c <pointer_list_insert_at@@Base+0x84>
    2c10:	mov	r6, r1
    2c14:	mov	r1, #4
    2c18:	add	r1, r1, r0, lsl #2
    2c1c:	ldr	r0, [r4, #4]
    2c20:	bl	1084 <o_realloc@plt>
    2c24:	cmp	r0, #0
    2c28:	str	r0, [r4, #4]
    2c2c:	beq	2c6c <pointer_list_insert_at@@Base+0x84>
    2c30:	ldr	r1, [r4]
    2c34:	cmp	r1, r5
    2c38:	bls	2c5c <pointer_list_insert_at@@Base+0x74>
    2c3c:	mov	r2, r1
    2c40:	add	r3, r0, r2, lsl #2
    2c44:	ldr	r3, [r3, #-4]
    2c48:	str	r3, [r0, r2, lsl #2]
    2c4c:	sub	r2, r2, #1
    2c50:	ldr	r0, [r4, #4]
    2c54:	cmp	r2, r5
    2c58:	bhi	2c40 <pointer_list_insert_at@@Base+0x58>
    2c5c:	str	r6, [r0, r5, lsl #2]
    2c60:	add	r0, r1, #1
    2c64:	mov	r7, #1
    2c68:	str	r0, [r4]
    2c6c:	mov	r0, r7
    2c70:	pop	{r4, r5, r6, r7, fp, pc}

00002c74 <pointer_list_remove_pointer@@Base>:
    2c74:	push	{r4, r5, fp, lr}
    2c78:	add	fp, sp, #8
    2c7c:	mov	r5, r0
    2c80:	mov	r0, #0
    2c84:	cmp	r5, #0
    2c88:	ldrne	r2, [r5]
    2c8c:	cmpne	r2, #0
    2c90:	bne	2c98 <pointer_list_remove_pointer@@Base+0x24>
    2c94:	pop	{r4, r5, fp, pc}
    2c98:	ldr	r0, [r5, #4]
    2c9c:	mov	r3, #0
    2ca0:	ldr	r4, [r0, r3, lsl #2]
    2ca4:	cmp	r4, r1
    2ca8:	beq	2cc0 <pointer_list_remove_pointer@@Base+0x4c>
    2cac:	add	r3, r3, #1
    2cb0:	cmp	r3, r2
    2cb4:	bcc	2ca0 <pointer_list_remove_pointer@@Base+0x2c>
    2cb8:	mov	r0, #0
    2cbc:	pop	{r4, r5, fp, pc}
    2cc0:	sub	ip, r2, #1
    2cc4:	cmp	ip, r3
    2cc8:	bls	2d0c <pointer_list_remove_pointer@@Base+0x98>
    2ccc:	add	r4, r0, r3, lsl #2
    2cd0:	ldr	r4, [r4, #4]
    2cd4:	str	r4, [r0, r3, lsl #2]
    2cd8:	sub	r0, r2, #2
    2cdc:	cmp	r0, r3
    2ce0:	beq	2d08 <pointer_list_remove_pointer@@Base+0x94>
    2ce4:	rsb	r0, r3, #0
    2ce8:	rsb	r3, r2, #2
    2cec:	ldr	r4, [r5, #4]
    2cf0:	sub	r4, r4, r0, lsl #2
    2cf4:	sub	r0, r0, #1
    2cf8:	ldr	r1, [r4, #8]
    2cfc:	cmp	r3, r0
    2d00:	str	r1, [r4, #4]
    2d04:	bne	2cec <pointer_list_remove_pointer@@Base+0x78>
    2d08:	ldr	r0, [r5, #4]
    2d0c:	cmp	r2, #2
    2d10:	bcc	2d20 <pointer_list_remove_pointer@@Base+0xac>
    2d14:	lsl	r1, ip, #2
    2d18:	bl	1084 <o_realloc@plt>
    2d1c:	b	2d28 <pointer_list_remove_pointer@@Base+0xb4>
    2d20:	bl	1048 <o_free@plt>
    2d24:	mov	r0, #0
    2d28:	str	r0, [r5, #4]
    2d2c:	ldr	r0, [r5]
    2d30:	sub	r0, r0, #1
    2d34:	str	r0, [r5]
    2d38:	mov	r0, #1
    2d3c:	pop	{r4, r5, fp, pc}

00002d40 <pointer_list_remove_pointer_free@@Base>:
    2d40:	push	{r4, r5, r6, sl, fp, lr}
    2d44:	add	fp, sp, #16
    2d48:	mov	r6, r0
    2d4c:	mov	r0, #0
    2d50:	cmp	r6, #0
    2d54:	ldrne	r3, [r6]
    2d58:	cmpne	r3, #0
    2d5c:	bne	2d64 <pointer_list_remove_pointer_free@@Base+0x24>
    2d60:	pop	{r4, r5, r6, sl, fp, pc}
    2d64:	ldr	r0, [r6, #4]
    2d68:	mov	r5, #0
    2d6c:	ldr	r4, [r0, r5, lsl #2]
    2d70:	cmp	r4, r1
    2d74:	beq	2d8c <pointer_list_remove_pointer_free@@Base+0x4c>
    2d78:	add	r5, r5, #1
    2d7c:	cmp	r5, r3
    2d80:	bcc	2d6c <pointer_list_remove_pointer_free@@Base+0x2c>
    2d84:	mov	r0, #0
    2d88:	pop	{r4, r5, r6, sl, fp, pc}
    2d8c:	mov	r0, r1
    2d90:	blx	r2
    2d94:	ldr	r1, [r6]
    2d98:	mov	r0, #0
    2d9c:	cmp	r1, r5
    2da0:	popls	{r4, r5, r6, sl, fp, pc}
    2da4:	sub	r2, r1, #1
    2da8:	cmp	r2, r5
    2dac:	bls	2dcc <pointer_list_remove_pointer_free@@Base+0x8c>
    2db0:	ldr	r0, [r6, #4]
    2db4:	add	r3, r0, r5, lsl #2
    2db8:	ldr	r3, [r3, #4]
    2dbc:	str	r3, [r0, r5, lsl #2]
    2dc0:	add	r5, r5, #1
    2dc4:	cmp	r2, r5
    2dc8:	bne	2db0 <pointer_list_remove_pointer_free@@Base+0x70>
    2dcc:	ldr	r0, [r6, #4]
    2dd0:	cmp	r1, #2
    2dd4:	bcc	2de4 <pointer_list_remove_pointer_free@@Base+0xa4>
    2dd8:	lsl	r1, r2, #2
    2ddc:	bl	1084 <o_realloc@plt>
    2de0:	b	2dec <pointer_list_remove_pointer_free@@Base+0xac>
    2de4:	bl	1048 <o_free@plt>
    2de8:	mov	r0, #0
    2dec:	str	r0, [r6, #4]
    2df0:	ldr	r0, [r6]
    2df4:	sub	r0, r0, #1
    2df8:	str	r0, [r6]
    2dfc:	mov	r0, #1
    2e00:	pop	{r4, r5, r6, sl, fp, pc}

Disassembly of section .fini:

00002e04 <.fini>:
    2e04:	push	{r3, lr}
    2e08:	pop	{r3, pc}
