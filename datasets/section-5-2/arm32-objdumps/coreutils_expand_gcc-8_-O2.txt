
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c1c <.init>:
   10c1c:	push	{r3, lr}
   10c20:	bl	112b4 <__assert_fail@plt+0x42c>
   10c24:	pop	{r3, pc}

Disassembly of section .plt:

00010c28 <calloc@plt-0x14>:
   10c28:	push	{lr}		; (str lr, [sp, #-4]!)
   10c2c:	ldr	lr, [pc, #4]	; 10c38 <calloc@plt-0x4>
   10c30:	add	lr, pc, lr
   10c34:	ldr	pc, [lr, #8]!
   10c38:	andeq	r6, r1, r8, asr #7

00010c3c <calloc@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #968]!	; 0x3c8

00010c48 <fputs_unlocked@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #960]!	; 0x3c0

00010c54 <raise@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #944]!	; 0x3b0

00010c6c <posix_fadvise64@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #936]!	; 0x3a8

00010c78 <fflush@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #928]!	; 0x3a0

00010c84 <free@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #920]!	; 0x398

00010c90 <_exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #912]!	; 0x390

00010c9c <memcpy@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #904]!	; 0x388

00010ca8 <mbsinit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #896]!	; 0x380

00010cb4 <memcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #888]!	; 0x378

00010cc0 <fputc_unlocked@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #880]!	; 0x370

00010ccc <dcgettext@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #872]!	; 0x368

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #864]!	; 0x360

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #856]!	; 0x358

00010cf0 <iswprint@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #848]!	; 0x350

00010cfc <fwrite@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #840]!	; 0x348

00010d08 <lseek64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #832]!	; 0x340

00010d14 <__ctype_get_mb_cur_max@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #824]!	; 0x338

00010d20 <__fpending@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #816]!	; 0x330

00010d2c <mbrtowc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #808]!	; 0x328

00010d38 <error@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #800]!	; 0x320

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #792]!	; 0x318

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #784]!	; 0x310

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #776]!	; 0x308

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #768]!	; 0x300

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d80 <__ctype_b_loc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #752]!	; 0x2f0

00010d8c <exit@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #744]!	; 0x2e8

00010d98 <strlen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #736]!	; 0x2e0

00010da4 <__errno_location@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #728]!	; 0x2d8

00010db0 <__cxa_atexit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dbc <memset@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc8 <__printf_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd4 <fileno@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #696]!	; 0x2b8

00010de0 <__fprintf_chk@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dec <fclose@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #680]!	; 0x2a8

00010df8 <fseeko64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #672]!	; 0x2a0

00010e04 <__uflow@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #664]!	; 0x298

00010e10 <__overflow@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #656]!	; 0x290

00010e1c <setlocale@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #648]!	; 0x288

00010e28 <strrchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #640]!	; 0x280

00010e34 <nl_langinfo@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #632]!	; 0x278

00010e40 <clearerr_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #624]!	; 0x270

00010e4c <fopen64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #616]!	; 0x268

00010e58 <bindtextdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #608]!	; 0x260

00010e64 <strncmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #600]!	; 0x258

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #592]!	; 0x250

00010e7c <strspn@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #584]!	; 0x248

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e9c:	mov	r5, r1
   10ea0:	mov	r4, #0
   10ea4:	strd	r6, [sp, #8]
   10ea8:	mov	r6, r0
   10eac:	movw	r7, #29008	; 0x7150
   10eb0:	movt	r7, #2
   10eb4:	strd	r8, [sp, #16]
   10eb8:	strd	sl, [sp, #24]
   10ebc:	movw	sl, #29072	; 0x7190
   10ec0:	movt	sl, #2
   10ec4:	str	lr, [sp, #32]
   10ec8:	sub	sp, sp, #20
   10ecc:	ldr	r0, [r1]
   10ed0:	bl	12504 <__assert_fail@plt+0x167c>
   10ed4:	movw	r1, #22772	; 0x58f4
   10ed8:	movt	r1, #1
   10edc:	ldr	r8, [pc, #908]	; 11270 <__assert_fail@plt+0x3e8>
   10ee0:	mov	r0, #6
   10ee4:	bl	10e1c <setlocale@plt>
   10ee8:	movw	r1, #23428	; 0x5b84
   10eec:	movt	r1, #1
   10ef0:	movw	r0, #23260	; 0x5adc
   10ef4:	movt	r0, #1
   10ef8:	bl	10e58 <bindtextdomain@plt>
   10efc:	movw	r0, #23260	; 0x5adc
   10f00:	movt	r0, #1
   10f04:	bl	10ce4 <textdomain@plt>
   10f08:	movw	r0, #8576	; 0x2180
   10f0c:	movt	r0, #1
   10f10:	bl	157d4 <__assert_fail@plt+0x494c>
   10f14:	mov	r3, #1
   10f18:	strb	r3, [sl]
   10f1c:	mov	r3, r8
   10f20:	ldr	r2, [pc, #844]	; 11274 <__assert_fail@plt+0x3ec>
   10f24:	mov	r1, r5
   10f28:	mov	r0, r6
   10f2c:	str	r4, [sp]
   10f30:	bl	10d74 <getopt_long@plt>
   10f34:	cmn	r0, #1
   10f38:	mov	r3, r0
   10f3c:	beq	10fec <__assert_fail@plt+0x164>
   10f40:	cmp	r3, #57	; 0x39
   10f44:	bgt	10f98 <__assert_fail@plt+0x110>
   10f48:	cmp	r3, #48	; 0x30
   10f4c:	bge	10fcc <__assert_fail@plt+0x144>
   10f50:	cmn	r3, #3
   10f54:	bne	10fa8 <__assert_fail@plt+0x120>
   10f58:	movw	r2, #23452	; 0x5b9c
   10f5c:	movt	r2, #1
   10f60:	movw	r3, #28904	; 0x70e8
   10f64:	movt	r3, #2
   10f68:	movw	r0, #29004	; 0x714c
   10f6c:	movt	r0, #2
   10f70:	stm	sp, {r2, r4}
   10f74:	movw	r1, #22692	; 0x58a4
   10f78:	movt	r1, #1
   10f7c:	ldr	r0, [r0]
   10f80:	movw	r2, #23256	; 0x5ad8
   10f84:	movt	r2, #1
   10f88:	ldr	r3, [r3]
   10f8c:	bl	14c90 <__assert_fail@plt+0x3e08>
   10f90:	mov	r0, #0
   10f94:	bl	10d8c <exit@plt>
   10f98:	cmp	r3, #105	; 0x69
   10f9c:	bne	10fb8 <__assert_fail@plt+0x130>
   10fa0:	strb	r4, [sl]
   10fa4:	b	10f1c <__assert_fail@plt+0x94>
   10fa8:	cmn	r3, #2
   10fac:	bne	11244 <__assert_fail@plt+0x3bc>
   10fb0:	mov	r0, #0
   10fb4:	bl	11368 <__assert_fail@plt+0x4e0>
   10fb8:	cmp	r3, #116	; 0x74
   10fbc:	bne	11244 <__assert_fail@plt+0x3bc>
   10fc0:	ldr	r0, [r7]
   10fc4:	bl	118cc <__assert_fail@plt+0xa44>
   10fc8:	b	10f1c <__assert_fail@plt+0x94>
   10fcc:	ldr	r2, [r7]
   10fd0:	cmp	r2, #0
   10fd4:	subne	r0, r2, #1
   10fd8:	addeq	r0, sp, #12
   10fdc:	strbeq	r3, [sp, #12]
   10fe0:	strbeq	r2, [sp, #13]
   10fe4:	bl	118cc <__assert_fail@plt+0xa44>
   10fe8:	b	10f1c <__assert_fail@plt+0x94>
   10fec:	bl	11c18 <__assert_fail@plt+0xd90>
   10ff0:	movw	r3, #28984	; 0x7138
   10ff4:	movt	r3, #2
   10ff8:	ldr	r0, [r3]
   10ffc:	cmp	r0, r6
   11000:	addlt	r0, r5, r0, lsl #2
   11004:	movge	r0, #0
   11008:	bl	11ec4 <__assert_fail@plt+0x103c>
   1100c:	mov	r0, #0
   11010:	bl	11eec <__assert_fail@plt+0x1064>
   11014:	subs	r7, r0, #0
   11018:	beq	110e8 <__assert_fail@plt+0x260>
   1101c:	movw	fp, #29004	; 0x714c
   11020:	movt	fp, #2
   11024:	mov	r2, #0
   11028:	mov	r4, #0
   1102c:	mov	r5, #0
   11030:	mov	r8, #1
   11034:	str	r2, [sp, #12]
   11038:	b	11064 <__assert_fail@plt+0x1dc>
   1103c:	ldr	r0, [fp]
   11040:	ldr	r2, [r0, #20]
   11044:	ldr	r1, [r0, #24]
   11048:	cmp	r2, r1
   1104c:	addcc	r1, r2, #1
   11050:	strcc	r1, [r0, #20]
   11054:	strbcc	r6, [r2]
   11058:	bcs	1115c <__assert_fail@plt+0x2d4>
   1105c:	cmp	r6, #10
   11060:	beq	11024 <__assert_fail@plt+0x19c>
   11064:	ldr	r2, [r7, #4]
   11068:	ldr	r1, [r7, #8]
   1106c:	cmp	r2, r1
   11070:	bcs	11114 <__assert_fail@plt+0x28c>
   11074:	add	r1, r2, #1
   11078:	str	r1, [r7, #4]
   1107c:	ldrb	r6, [r2]
   11080:	cmp	r8, #0
   11084:	beq	1103c <__assert_fail@plt+0x1b4>
   11088:	cmp	r6, #9
   1108c:	beq	11198 <__assert_fail@plt+0x310>
   11090:	cmp	r6, #8
   11094:	bne	1113c <__assert_fail@plt+0x2b4>
   11098:	ldr	r3, [sp, #12]
   1109c:	orrs	r2, r4, r5
   110a0:	movne	r2, #1
   110a4:	moveq	r2, #0
   110a8:	subs	r4, r4, r2
   110ac:	mov	r2, #0
   110b0:	sbc	r5, r5, r2
   110b4:	cmp	r3, r2
   110b8:	subne	r3, r3, #1
   110bc:	str	r3, [sp, #12]
   110c0:	ldrb	r8, [sl]
   110c4:	cmp	r8, #0
   110c8:	bne	1103c <__assert_fail@plt+0x1b4>
   110cc:	bl	10d80 <__ctype_b_loc@plt>
   110d0:	ldr	r2, [r0]
   110d4:	lsl	r3, r6, #1
   110d8:	ldrh	r3, [r2, r3]
   110dc:	and	r8, r3, #1
   110e0:	cmp	r6, #0
   110e4:	bge	1103c <__assert_fail@plt+0x1b4>
   110e8:	bl	120b4 <__assert_fail@plt+0x122c>
   110ec:	movw	r3, #29068	; 0x718c
   110f0:	movt	r3, #2
   110f4:	ldr	r0, [r3]
   110f8:	add	sp, sp, #20
   110fc:	ldrd	r4, [sp]
   11100:	ldrd	r6, [sp, #8]
   11104:	ldrd	r8, [sp, #16]
   11108:	ldrd	sl, [sp, #24]
   1110c:	add	sp, sp, #32
   11110:	pop	{pc}		; (ldr pc, [sp], #4)
   11114:	mov	r0, r7
   11118:	bl	10e04 <__uflow@plt>
   1111c:	subs	r6, r0, #0
   11120:	bge	11080 <__assert_fail@plt+0x1f8>
   11124:	mov	r0, r7
   11128:	bl	11eec <__assert_fail@plt+0x1064>
   1112c:	subs	r7, r0, #0
   11130:	bne	11064 <__assert_fail@plt+0x1dc>
   11134:	cmp	r8, #0
   11138:	beq	110e8 <__assert_fail@plt+0x260>
   1113c:	adds	r4, r4, #1
   11140:	adc	r5, r5, #0
   11144:	orrs	r3, r4, r5
   11148:	beq	1124c <__assert_fail@plt+0x3c4>
   1114c:	ldrb	r8, [sl]
   11150:	cmp	r8, #0
   11154:	bne	110e0 <__assert_fail@plt+0x258>
   11158:	b	110cc <__assert_fail@plt+0x244>
   1115c:	uxtb	r1, r6
   11160:	bl	10e10 <__overflow@plt>
   11164:	cmp	r0, #0
   11168:	bge	1105c <__assert_fail@plt+0x1d4>
   1116c:	bl	10da4 <__errno_location@plt>
   11170:	ldr	r4, [r0]
   11174:	mov	r2, #5
   11178:	movw	r1, #23492	; 0x5bc4
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	bl	10ccc <dcgettext@plt>
   11188:	mov	r2, r0
   1118c:	mov	r0, #1
   11190:	mov	r1, r4
   11194:	bl	10d38 <error@plt>
   11198:	add	r3, sp, #11
   1119c:	add	r2, sp, #12
   111a0:	mov	r0, r4
   111a4:	mov	r1, r5
   111a8:	bl	11d68 <__assert_fail@plt+0xee0>
   111ac:	mov	r9, r1
   111b0:	ldrb	r1, [sp, #11]
   111b4:	mov	r8, r0
   111b8:	cmp	r1, #0
   111bc:	beq	111ec <__assert_fail@plt+0x364>
   111c0:	adds	r2, r4, #1
   111c4:	mvn	r1, #0
   111c8:	adc	r3, r5, #0
   111cc:	mvn	r0, #0
   111d0:	cmp	r5, r1
   111d4:	cmpeq	r4, r0
   111d8:	beq	1124c <__assert_fail@plt+0x3c4>
   111dc:	mov	r4, r2
   111e0:	mov	r5, r3
   111e4:	mov	r6, #32
   111e8:	b	110c0 <__assert_fail@plt+0x238>
   111ec:	cmp	r5, r9
   111f0:	cmpeq	r4, r8
   111f4:	bhi	1124c <__assert_fail@plt+0x3c4>
   111f8:	mov	r6, #32
   111fc:	adds	r4, r4, #1
   11200:	adc	r5, r5, #0
   11204:	cmp	r9, r5
   11208:	cmpeq	r8, r4
   1120c:	bls	111e4 <__assert_fail@plt+0x35c>
   11210:	ldr	r0, [fp]
   11214:	ldr	r1, [r0, #20]
   11218:	ldr	ip, [r0, #24]
   1121c:	cmp	r1, ip
   11220:	addcc	ip, r1, #1
   11224:	strcc	ip, [r0, #20]
   11228:	strbcc	r6, [r1]
   1122c:	bcc	111fc <__assert_fail@plt+0x374>
   11230:	mov	r1, #32
   11234:	bl	10e10 <__overflow@plt>
   11238:	cmp	r0, #0
   1123c:	bge	111fc <__assert_fail@plt+0x374>
   11240:	b	1116c <__assert_fail@plt+0x2e4>
   11244:	mov	r0, #1
   11248:	bl	11368 <__assert_fail@plt+0x4e0>
   1124c:	mov	r2, #5
   11250:	movw	r1, #23468	; 0x5bac
   11254:	movt	r1, #1
   11258:	mov	r0, #0
   1125c:	bl	10ccc <dcgettext@plt>
   11260:	mov	r2, r0
   11264:	mov	r1, #0
   11268:	mov	r0, #1
   1126c:	bl	10d38 <error@plt>
   11270:	andeq	r5, r1, r0, lsr r8
   11274:	andeq	r5, r1, r0, lsl #17
   11278:	mov	fp, #0
   1127c:	mov	lr, #0
   11280:	pop	{r1}		; (ldr r1, [sp], #4)
   11284:	mov	r2, sp
   11288:	push	{r2}		; (str r2, [sp, #-4]!)
   1128c:	push	{r0}		; (str r0, [sp, #-4]!)
   11290:	ldr	ip, [pc, #16]	; 112a8 <__assert_fail@plt+0x420>
   11294:	push	{ip}		; (str ip, [sp, #-4]!)
   11298:	ldr	r0, [pc, #12]	; 112ac <__assert_fail@plt+0x424>
   1129c:	ldr	r3, [pc, #12]	; 112b0 <__assert_fail@plt+0x428>
   112a0:	bl	10d50 <__libc_start_main@plt>
   112a4:	bl	10e70 <abort@plt>
   112a8:	ldrdeq	r5, [r1], -r0
   112ac:	muleq	r1, r8, lr
   112b0:	andeq	r5, r1, r0, ror r7
   112b4:	ldr	r3, [pc, #20]	; 112d0 <__assert_fail@plt+0x448>
   112b8:	ldr	r2, [pc, #20]	; 112d4 <__assert_fail@plt+0x44c>
   112bc:	add	r3, pc, r3
   112c0:	ldr	r2, [r3, r2]
   112c4:	cmp	r2, #0
   112c8:	bxeq	lr
   112cc:	b	10d68 <__gmon_start__@plt>
   112d0:	andeq	r5, r1, ip, lsr sp
   112d4:	ldrdeq	r0, [r0], -r4
   112d8:	ldr	r0, [pc, #24]	; 112f8 <__assert_fail@plt+0x470>
   112dc:	ldr	r3, [pc, #24]	; 112fc <__assert_fail@plt+0x474>
   112e0:	cmp	r3, r0
   112e4:	bxeq	lr
   112e8:	ldr	r3, [pc, #16]	; 11300 <__assert_fail@plt+0x478>
   112ec:	cmp	r3, #0
   112f0:	bxeq	lr
   112f4:	bx	r3
   112f8:	andeq	r7, r2, r0, lsr r1
   112fc:	andeq	r7, r2, r0, lsr r1
   11300:	andeq	r0, r0, r0
   11304:	ldr	r0, [pc, #36]	; 11330 <__assert_fail@plt+0x4a8>
   11308:	ldr	r1, [pc, #36]	; 11334 <__assert_fail@plt+0x4ac>
   1130c:	sub	r1, r1, r0
   11310:	asr	r1, r1, #2
   11314:	add	r1, r1, r1, lsr #31
   11318:	asrs	r1, r1, #1
   1131c:	bxeq	lr
   11320:	ldr	r3, [pc, #16]	; 11338 <__assert_fail@plt+0x4b0>
   11324:	cmp	r3, #0
   11328:	bxeq	lr
   1132c:	bx	r3
   11330:	andeq	r7, r2, r0, lsr r1
   11334:	andeq	r7, r2, r0, lsr r1
   11338:	andeq	r0, r0, r0
   1133c:	push	{r4, lr}
   11340:	ldr	r4, [pc, #24]	; 11360 <__assert_fail@plt+0x4d8>
   11344:	ldrb	r3, [r4]
   11348:	cmp	r3, #0
   1134c:	popne	{r4, pc}
   11350:	bl	112d8 <__assert_fail@plt+0x450>
   11354:	mov	r3, #1
   11358:	strb	r3, [r4]
   1135c:	pop	{r4, pc}
   11360:	andeq	r7, r2, r4, asr r1
   11364:	b	11304 <__assert_fail@plt+0x47c>
   11368:	subs	r6, r0, #0
   1136c:	str	r7, [sp, #-8]!
   11370:	str	lr, [sp, #4]
   11374:	sub	sp, sp, #56	; 0x38
   11378:	beq	113c0 <__assert_fail@plt+0x538>
   1137c:	movw	r3, #28992	; 0x7140
   11380:	movt	r3, #2
   11384:	ldr	r4, [r3]
   11388:	mov	r2, #5
   1138c:	movw	r1, #22700	; 0x58ac
   11390:	movt	r1, #1
   11394:	mov	r0, #0
   11398:	bl	10ccc <dcgettext@plt>
   1139c:	movw	r3, #29084	; 0x719c
   113a0:	movt	r3, #2
   113a4:	mov	r2, r0
   113a8:	mov	r1, #1
   113ac:	ldr	r3, [r3]
   113b0:	mov	r0, r4
   113b4:	bl	10de0 <__fprintf_chk@plt>
   113b8:	mov	r0, r6
   113bc:	bl	10d8c <exit@plt>
   113c0:	mov	r2, #5
   113c4:	movw	r1, #22740	; 0x58d4
   113c8:	movt	r1, #1
   113cc:	movw	r7, #29004	; 0x714c
   113d0:	movt	r7, #2
   113d4:	bl	10ccc <dcgettext@plt>
   113d8:	movw	r3, #29084	; 0x719c
   113dc:	movt	r3, #2
   113e0:	mov	r1, r0
   113e4:	mov	r0, #1
   113e8:	ldr	r2, [r3]
   113ec:	bl	10dc8 <__printf_chk@plt>
   113f0:	mov	r2, #5
   113f4:	movw	r1, #22776	; 0x58f8
   113f8:	movt	r1, #1
   113fc:	mov	r0, r6
   11400:	bl	10ccc <dcgettext@plt>
   11404:	ldr	r1, [r7]
   11408:	bl	10c48 <fputs_unlocked@plt>
   1140c:	mov	r2, #5
   11410:	movw	r1, #22844	; 0x593c
   11414:	movt	r1, #1
   11418:	mov	r0, r6
   1141c:	bl	10ccc <dcgettext@plt>
   11420:	ldr	r1, [r7]
   11424:	bl	10c48 <fputs_unlocked@plt>
   11428:	mov	r2, #5
   1142c:	movw	r1, #22900	; 0x5974
   11430:	movt	r1, #1
   11434:	mov	r0, r6
   11438:	bl	10ccc <dcgettext@plt>
   1143c:	ldr	r1, [r7]
   11440:	bl	10c48 <fputs_unlocked@plt>
   11444:	mov	r2, #5
   11448:	movw	r1, #22976	; 0x59c0
   1144c:	movt	r1, #1
   11450:	mov	r0, r6
   11454:	bl	10ccc <dcgettext@plt>
   11458:	ldr	r1, [r7]
   1145c:	bl	10c48 <fputs_unlocked@plt>
   11460:	bl	1210c <__assert_fail@plt+0x1284>
   11464:	mov	r2, #5
   11468:	movw	r1, #23088	; 0x5a30
   1146c:	movt	r1, #1
   11470:	mov	r0, r6
   11474:	bl	10ccc <dcgettext@plt>
   11478:	ldr	r1, [r7]
   1147c:	bl	10c48 <fputs_unlocked@plt>
   11480:	mov	r2, #5
   11484:	movw	r1, #23136	; 0x5a60
   11488:	movt	r1, #1
   1148c:	mov	r0, r6
   11490:	bl	10ccc <dcgettext@plt>
   11494:	ldr	r1, [r7]
   11498:	bl	10c48 <fputs_unlocked@plt>
   1149c:	movw	lr, #22520	; 0x57f8
   114a0:	movt	lr, #1
   114a4:	ldr	ip, [lr]
   114a8:	ldr	r4, [lr, #4]
   114ac:	ldrd	r8, [lr, #8]
   114b0:	subs	r1, ip, #0
   114b4:	str	ip, [sp]
   114b8:	ldrd	r2, [lr, #16]
   114bc:	str	r4, [sp, #4]
   114c0:	ldrd	r4, [lr, #24]
   114c4:	strd	r8, [sp, #8]
   114c8:	ldrd	r8, [lr, #32]
   114cc:	strd	r2, [sp, #16]
   114d0:	ldrd	r2, [lr, #40]	; 0x28
   114d4:	strd	r4, [sp, #24]
   114d8:	ldrd	r4, [lr, #48]	; 0x30
   114dc:	strd	r8, [sp, #32]
   114e0:	strd	r2, [sp, #40]	; 0x28
   114e4:	strd	r4, [sp, #48]	; 0x30
   114e8:	movwne	r5, #22692	; 0x58a4
   114ec:	mov	r4, sp
   114f0:	movtne	r5, #1
   114f4:	bne	115ec <__assert_fail@plt+0x764>
   114f8:	ldr	r4, [r4, #4]
   114fc:	movw	r1, #23192	; 0x5a98
   11500:	movt	r1, #1
   11504:	mov	r2, #5
   11508:	cmp	r4, #0
   1150c:	beq	11600 <__assert_fail@plt+0x778>
   11510:	mov	r0, #0
   11514:	bl	10ccc <dcgettext@plt>
   11518:	mov	r1, r0
   1151c:	movw	r3, #23216	; 0x5ab0
   11520:	movt	r3, #1
   11524:	movw	r2, #23256	; 0x5ad8
   11528:	movt	r2, #1
   1152c:	mov	r0, #1
   11530:	bl	10dc8 <__printf_chk@plt>
   11534:	mov	r1, #0
   11538:	mov	r0, #5
   1153c:	bl	10e1c <setlocale@plt>
   11540:	cmp	r0, #0
   11544:	movweq	r5, #22692	; 0x58a4
   11548:	movteq	r5, #1
   1154c:	beq	11570 <__assert_fail@plt+0x6e8>
   11550:	movw	r1, #23272	; 0x5ae8
   11554:	movt	r1, #1
   11558:	mov	r2, #3
   1155c:	movw	r5, #22692	; 0x58a4
   11560:	movt	r5, #1
   11564:	bl	10e64 <strncmp@plt>
   11568:	cmp	r0, #0
   1156c:	bne	116b8 <__assert_fail@plt+0x830>
   11570:	mov	r2, #5
   11574:	movw	r1, #23348	; 0x5b34
   11578:	movt	r1, #1
   1157c:	mov	r0, #0
   11580:	bl	10ccc <dcgettext@plt>
   11584:	mov	r1, r0
   11588:	movw	r3, #22692	; 0x58a4
   1158c:	movt	r3, #1
   11590:	movw	r2, #23216	; 0x5ab0
   11594:	movt	r2, #1
   11598:	mov	r0, #1
   1159c:	bl	10dc8 <__printf_chk@plt>
   115a0:	mov	r2, #5
   115a4:	movw	r1, #23376	; 0x5b50
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10ccc <dcgettext@plt>
   115b4:	movw	r2, #23512	; 0x5bd8
   115b8:	movt	r2, #1
   115bc:	cmp	r4, r5
   115c0:	movw	r3, #22772	; 0x58f4
   115c4:	movt	r3, #1
   115c8:	mov	r1, r0
   115cc:	moveq	r3, r2
   115d0:	mov	r2, r4
   115d4:	mov	r0, #1
   115d8:	bl	10dc8 <__printf_chk@plt>
   115dc:	b	113b8 <__assert_fail@plt+0x530>
   115e0:	ldr	r1, [r4, #8]!
   115e4:	cmp	r1, #0
   115e8:	beq	114f8 <__assert_fail@plt+0x670>
   115ec:	mov	r0, r5
   115f0:	bl	10c60 <strcmp@plt>
   115f4:	cmp	r0, #0
   115f8:	bne	115e0 <__assert_fail@plt+0x758>
   115fc:	b	114f8 <__assert_fail@plt+0x670>
   11600:	mov	r0, r4
   11604:	bl	10ccc <dcgettext@plt>
   11608:	mov	r1, r0
   1160c:	movw	r3, #23216	; 0x5ab0
   11610:	movt	r3, #1
   11614:	movw	r2, #23256	; 0x5ad8
   11618:	movt	r2, #1
   1161c:	mov	r0, #1
   11620:	bl	10dc8 <__printf_chk@plt>
   11624:	mov	r1, r4
   11628:	mov	r0, #5
   1162c:	bl	10e1c <setlocale@plt>
   11630:	cmp	r0, #0
   11634:	beq	11650 <__assert_fail@plt+0x7c8>
   11638:	movw	r1, #23272	; 0x5ae8
   1163c:	movt	r1, #1
   11640:	mov	r2, #3
   11644:	bl	10e64 <strncmp@plt>
   11648:	cmp	r0, #0
   1164c:	bne	116ac <__assert_fail@plt+0x824>
   11650:	mov	r2, #5
   11654:	movw	r1, #23348	; 0x5b34
   11658:	movt	r1, #1
   1165c:	mov	r0, #0
   11660:	bl	10ccc <dcgettext@plt>
   11664:	mov	r1, r0
   11668:	movw	r3, #22692	; 0x58a4
   1166c:	movt	r3, #1
   11670:	movw	r2, #23216	; 0x5ab0
   11674:	movt	r2, #1
   11678:	mov	r0, #1
   1167c:	bl	10dc8 <__printf_chk@plt>
   11680:	movw	r1, #23376	; 0x5b50
   11684:	movt	r1, #1
   11688:	mov	r2, #5
   1168c:	mov	r0, #0
   11690:	bl	10ccc <dcgettext@plt>
   11694:	movw	r4, #22692	; 0x58a4
   11698:	movt	r4, #1
   1169c:	movw	r3, #23512	; 0x5bd8
   116a0:	movt	r3, #1
   116a4:	mov	r1, r0
   116a8:	b	115d0 <__assert_fail@plt+0x748>
   116ac:	movw	r5, #22692	; 0x58a4
   116b0:	movt	r5, #1
   116b4:	mov	r4, r5
   116b8:	mov	r2, #5
   116bc:	movw	r1, #23276	; 0x5aec
   116c0:	movt	r1, #1
   116c4:	mov	r0, #0
   116c8:	bl	10ccc <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	10c48 <fputs_unlocked@plt>
   116d4:	b	11570 <__assert_fail@plt+0x6e8>
   116d8:	str	r4, [sp, #-16]!
   116dc:	movw	r4, #29016	; 0x7158
   116e0:	movt	r4, #2
   116e4:	ldrd	r2, [r4]
   116e8:	strd	r6, [sp, #4]
   116ec:	mov	r6, r0
   116f0:	mov	r7, r1
   116f4:	str	lr, [sp, #12]
   116f8:	orrs	r3, r2, r3
   116fc:	moveq	r0, #1
   11700:	bne	11718 <__assert_fail@plt+0x890>
   11704:	strd	r6, [r4]
   11708:	ldr	r4, [sp]
   1170c:	ldrd	r6, [sp, #4]
   11710:	add	sp, sp, #12
   11714:	pop	{pc}		; (ldr pc, [sp], #4)
   11718:	mov	r2, #5
   1171c:	movw	r1, #23656	; 0x5c68
   11720:	movt	r1, #1
   11724:	mov	r0, #0
   11728:	bl	10ccc <dcgettext@plt>
   1172c:	mov	r1, #0
   11730:	mov	r2, r0
   11734:	mov	r0, r1
   11738:	bl	10d38 <error@plt>
   1173c:	mov	r0, #0
   11740:	b	11704 <__assert_fail@plt+0x87c>
   11744:	str	r4, [sp, #-16]!
   11748:	movw	r4, #29016	; 0x7158
   1174c:	movt	r4, #2
   11750:	ldrd	r2, [r4, #8]
   11754:	strd	r6, [sp, #4]
   11758:	mov	r6, r0
   1175c:	mov	r7, r1
   11760:	str	lr, [sp, #12]
   11764:	orrs	r3, r2, r3
   11768:	moveq	r0, #1
   1176c:	bne	11784 <__assert_fail@plt+0x8fc>
   11770:	strd	r6, [r4, #8]
   11774:	ldr	r4, [sp]
   11778:	ldrd	r6, [sp, #4]
   1177c:	add	sp, sp, #12
   11780:	pop	{pc}		; (ldr pc, [sp], #4)
   11784:	mov	r2, #5
   11788:	movw	r1, #23704	; 0x5c98
   1178c:	movt	r1, #1
   11790:	mov	r0, #0
   11794:	bl	10ccc <dcgettext@plt>
   11798:	mov	r1, #0
   1179c:	mov	r2, r0
   117a0:	mov	r0, r1
   117a4:	bl	10d38 <error@plt>
   117a8:	mov	r0, #0
   117ac:	b	11770 <__assert_fail@plt+0x8e8>
   117b0:	str	r4, [sp, #-32]!	; 0xffffffe0
   117b4:	movw	r4, #29016	; 0x7158
   117b8:	movt	r4, #2
   117bc:	ldr	r3, [r4, #16]
   117c0:	strd	r6, [sp, #4]
   117c4:	mov	r6, r0
   117c8:	mov	r7, r1
   117cc:	strd	r8, [sp, #12]
   117d0:	strd	sl, [sp, #20]
   117d4:	str	lr, [sp, #28]
   117d8:	cmp	r3, #0
   117dc:	ldrd	r0, [r4, #20]
   117e0:	beq	1182c <__assert_fail@plt+0x9a4>
   117e4:	sub	r2, r3, #-536870911	; 0xe0000001
   117e8:	lsl	r2, r2, #3
   117ec:	ldrd	sl, [r0, r2]
   117f0:	cmp	fp, r7
   117f4:	cmpeq	sl, r6
   117f8:	bls	118bc <__assert_fail@plt+0xa34>
   117fc:	cmp	r3, r1
   11800:	beq	1189c <__assert_fail@plt+0xa14>
   11804:	add	r3, r3, #1
   11808:	add	r2, r0, r2
   1180c:	strd	r6, [r2, #8]
   11810:	str	r3, [r4, #16]
   11814:	ldr	r4, [sp]
   11818:	ldrd	r6, [sp, #4]
   1181c:	ldrd	r8, [sp, #12]
   11820:	ldrd	sl, [sp, #20]
   11824:	add	sp, sp, #28
   11828:	pop	{pc}		; (ldr pc, [sp], #4)
   1182c:	mov	r8, r6
   11830:	mov	r9, r7
   11834:	cmp	r3, r1
   11838:	beq	118a4 <__assert_fail@plt+0xa1c>
   1183c:	ldr	r2, [r4, #28]
   11840:	lsl	r1, r3, #3
   11844:	add	r3, r3, #1
   11848:	str	r3, [r4, #16]
   1184c:	mov	r3, #0
   11850:	cmp	r3, r9
   11854:	strd	r6, [r0, r1]
   11858:	cmpeq	r2, r8
   1185c:	bcs	11814 <__assert_fail@plt+0x98c>
   11860:	mov	r3, #0
   11864:	mvn	r2, #0
   11868:	cmp	r9, r3
   1186c:	cmpeq	r8, r2
   11870:	strls	r8, [r4, #28]
   11874:	bls	11814 <__assert_fail@plt+0x98c>
   11878:	mov	r2, #5
   1187c:	movw	r1, #23752	; 0x5cc8
   11880:	movt	r1, #1
   11884:	mov	r0, #0
   11888:	bl	10ccc <dcgettext@plt>
   1188c:	mov	r2, r0
   11890:	mov	r1, #0
   11894:	mov	r0, #1
   11898:	bl	10d38 <error@plt>
   1189c:	mov	r8, #0
   118a0:	mov	r9, #0
   118a4:	mov	r2, #8
   118a8:	ldr	r1, [pc, #24]	; 118c8 <__assert_fail@plt+0xa40>
   118ac:	bl	14f28 <__assert_fail@plt+0x40a0>
   118b0:	str	r0, [r4, #20]
   118b4:	ldr	r3, [r4, #16]
   118b8:	b	1183c <__assert_fail@plt+0x9b4>
   118bc:	subs	r8, r6, sl
   118c0:	sbc	r9, r7, fp
   118c4:	b	11834 <__assert_fail@plt+0x9ac>
   118c8:	andeq	r7, r2, r0, ror r1
   118cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   118d0:	strd	r6, [sp, #8]
   118d4:	strd	r8, [sp, #16]
   118d8:	strd	sl, [sp, #24]
   118dc:	str	lr, [sp, #32]
   118e0:	sub	sp, sp, #20
   118e4:	ldrb	fp, [r0]
   118e8:	cmp	fp, #0
   118ec:	beq	119e8 <__assert_fail@plt+0xb60>
   118f0:	mov	r2, #0
   118f4:	mov	r3, #0
   118f8:	mov	r9, #0
   118fc:	mov	r4, r0
   11900:	mov	r8, r9
   11904:	mov	r7, r9
   11908:	strd	r2, [sp]
   1190c:	mov	r6, r9
   11910:	mov	sl, #1
   11914:	b	11978 <__assert_fail@plt+0xaf0>
   11918:	bl	10d80 <__ctype_b_loc@plt>
   1191c:	ldr	r2, [r0]
   11920:	lsl	r3, fp, #1
   11924:	ldrh	r5, [r2, r3]
   11928:	ands	r5, r5, #1
   1192c:	bne	11980 <__assert_fail@plt+0xaf8>
   11930:	cmp	fp, #47	; 0x2f
   11934:	beq	11a04 <__assert_fail@plt+0xb7c>
   11938:	cmp	fp, #43	; 0x2b
   1193c:	beq	11a78 <__assert_fail@plt+0xbf0>
   11940:	sub	fp, fp, #48	; 0x30
   11944:	cmp	fp, #9
   11948:	bhi	11bd4 <__assert_fail@plt+0xd4c>
   1194c:	cmp	r6, #0
   11950:	bne	11acc <__assert_fail@plt+0xc44>
   11954:	asr	r3, fp, #31
   11958:	mov	r2, fp
   1195c:	mov	r9, r4
   11960:	mov	r6, #1
   11964:	strd	r2, [sp]
   11968:	ldrb	fp, [r4, #1]
   1196c:	add	r4, r4, #1
   11970:	cmp	fp, #0
   11974:	beq	119bc <__assert_fail@plt+0xb34>
   11978:	cmp	fp, #44	; 0x2c
   1197c:	bne	11918 <__assert_fail@plt+0xa90>
   11980:	cmp	r6, #0
   11984:	beq	11968 <__assert_fail@plt+0xae0>
   11988:	cmp	r7, #0
   1198c:	ldrd	r0, [sp]
   11990:	bne	11a68 <__assert_fail@plt+0xbe0>
   11994:	cmp	r8, #0
   11998:	beq	11a58 <__assert_fail@plt+0xbd0>
   1199c:	bl	11744 <__assert_fail@plt+0x8bc>
   119a0:	subs	r8, r0, #0
   119a4:	beq	11c08 <__assert_fail@plt+0xd80>
   119a8:	ldrb	fp, [r4, #1]
   119ac:	mov	r6, #0
   119b0:	add	r4, r4, #1
   119b4:	cmp	fp, #0
   119b8:	bne	11978 <__assert_fail@plt+0xaf0>
   119bc:	tst	r6, sl
   119c0:	beq	119e0 <__assert_fail@plt+0xb58>
   119c4:	cmp	r7, #0
   119c8:	ldrd	r0, [sp]
   119cc:	bne	11bc0 <__assert_fail@plt+0xd38>
   119d0:	cmp	r8, #0
   119d4:	beq	11ba0 <__assert_fail@plt+0xd18>
   119d8:	bl	11744 <__assert_fail@plt+0x8bc>
   119dc:	mov	sl, r0
   119e0:	cmp	sl, #0
   119e4:	beq	11c08 <__assert_fail@plt+0xd80>
   119e8:	add	sp, sp, #20
   119ec:	ldrd	r4, [sp]
   119f0:	ldrd	r6, [sp, #8]
   119f4:	ldrd	r8, [sp, #16]
   119f8:	ldrd	sl, [sp, #24]
   119fc:	add	sp, sp, #32
   11a00:	pop	{pc}		; (ldr pc, [sp], #4)
   11a04:	cmp	r6, #0
   11a08:	moveq	r8, r6
   11a0c:	moveq	r7, #1
   11a10:	beq	11968 <__assert_fail@plt+0xae0>
   11a14:	mov	r2, #5
   11a18:	movw	r1, #23776	; 0x5ce0
   11a1c:	movt	r1, #1
   11a20:	mov	r0, r5
   11a24:	bl	10ccc <dcgettext@plt>
   11a28:	mov	r7, r0
   11a2c:	mov	r0, r4
   11a30:	bl	147f4 <__assert_fail@plt+0x396c>
   11a34:	mov	r3, r0
   11a38:	mov	r2, r7
   11a3c:	mov	r1, r5
   11a40:	mov	r0, r5
   11a44:	mov	sl, r5
   11a48:	mov	r7, r6
   11a4c:	bl	10d38 <error@plt>
   11a50:	mov	r8, r5
   11a54:	b	11968 <__assert_fail@plt+0xae0>
   11a58:	mov	r7, r8
   11a5c:	mov	r6, r8
   11a60:	bl	117b0 <__assert_fail@plt+0x928>
   11a64:	b	11968 <__assert_fail@plt+0xae0>
   11a68:	bl	116d8 <__assert_fail@plt+0x850>
   11a6c:	subs	r7, r0, #0
   11a70:	bne	119a8 <__assert_fail@plt+0xb20>
   11a74:	b	11c08 <__assert_fail@plt+0xd80>
   11a78:	cmp	r6, #0
   11a7c:	moveq	r7, r6
   11a80:	moveq	r8, #1
   11a84:	beq	11968 <__assert_fail@plt+0xae0>
   11a88:	mov	r2, #5
   11a8c:	movw	r1, #23820	; 0x5d0c
   11a90:	movt	r1, #1
   11a94:	mov	r0, r5
   11a98:	bl	10ccc <dcgettext@plt>
   11a9c:	mov	r7, r0
   11aa0:	mov	r0, r4
   11aa4:	bl	147f4 <__assert_fail@plt+0x396c>
   11aa8:	mov	r3, r0
   11aac:	mov	r2, r7
   11ab0:	mov	r1, r5
   11ab4:	mov	r0, r5
   11ab8:	mov	sl, r5
   11abc:	mov	r8, r6
   11ac0:	bl	10d38 <error@plt>
   11ac4:	mov	r7, r5
   11ac8:	b	11968 <__assert_fail@plt+0xae0>
   11acc:	add	r1, pc, #316	; 0x13c
   11ad0:	ldrd	r0, [r1]
   11ad4:	ldrd	r2, [sp]
   11ad8:	cmp	r3, r1
   11adc:	cmpeq	r2, r0
   11ae0:	bls	11b54 <__assert_fail@plt+0xccc>
   11ae4:	movw	r1, #23864	; 0x5d38
   11ae8:	movt	r1, #1
   11aec:	mov	r0, r9
   11af0:	mov	sl, #0
   11af4:	bl	10e7c <strspn@plt>
   11af8:	mov	r1, r0
   11afc:	mov	r4, r0
   11b00:	mov	r0, r9
   11b04:	sub	r4, r4, #1
   11b08:	bl	151a0 <__assert_fail@plt+0x4318>
   11b0c:	mov	r5, r0
   11b10:	mov	r2, #5
   11b14:	movw	r1, #23876	; 0x5d44
   11b18:	movt	r1, #1
   11b1c:	mov	r0, sl
   11b20:	add	r4, r9, r4
   11b24:	bl	10ccc <dcgettext@plt>
   11b28:	mov	fp, r0
   11b2c:	mov	r0, r5
   11b30:	bl	147f4 <__assert_fail@plt+0x396c>
   11b34:	mov	r3, r0
   11b38:	mov	r2, fp
   11b3c:	mov	r1, sl
   11b40:	mov	r0, sl
   11b44:	bl	10d38 <error@plt>
   11b48:	mov	r0, r5
   11b4c:	bl	123d4 <__assert_fail@plt+0x154c>
   11b50:	b	11968 <__assert_fail@plt+0xae0>
   11b54:	mov	r0, r2
   11b58:	lsl	r2, r3, #2
   11b5c:	mov	r1, r3
   11b60:	lsl	r3, r0, #2
   11b64:	orr	r2, r2, r0, lsr #30
   11b68:	adds	r3, r3, r0
   11b6c:	adc	r2, r2, r1
   11b70:	adds	r3, r3, r3
   11b74:	str	r3, [sp, #8]
   11b78:	adc	r3, r2, r2
   11b7c:	str	r3, [sp, #12]
   11b80:	ldrd	r2, [sp, #8]
   11b84:	adds	r2, r2, fp
   11b88:	adc	r3, r3, fp, asr #31
   11b8c:	cmp	r3, r1
   11b90:	cmpeq	r2, r0
   11b94:	bcc	11ae4 <__assert_fail@plt+0xc5c>
   11b98:	strd	r2, [sp]
   11b9c:	b	11968 <__assert_fail@plt+0xae0>
   11ba0:	add	sp, sp, #20
   11ba4:	ldrd	r4, [sp]
   11ba8:	ldrd	r6, [sp, #8]
   11bac:	ldrd	r8, [sp, #16]
   11bb0:	ldrd	sl, [sp, #24]
   11bb4:	ldr	lr, [sp, #32]
   11bb8:	add	sp, sp, #36	; 0x24
   11bbc:	b	117b0 <__assert_fail@plt+0x928>
   11bc0:	bl	116d8 <__assert_fail@plt+0x850>
   11bc4:	mov	sl, r0
   11bc8:	cmp	sl, #0
   11bcc:	bne	119e8 <__assert_fail@plt+0xb60>
   11bd0:	b	11c08 <__assert_fail@plt+0xd80>
   11bd4:	mov	r2, #5
   11bd8:	movw	r1, #23904	; 0x5d60
   11bdc:	movt	r1, #1
   11be0:	mov	r0, r5
   11be4:	bl	10ccc <dcgettext@plt>
   11be8:	mov	r6, r0
   11bec:	mov	r0, r4
   11bf0:	bl	147f4 <__assert_fail@plt+0x396c>
   11bf4:	mov	r3, r0
   11bf8:	mov	r2, r6
   11bfc:	mov	r1, r5
   11c00:	mov	r0, r5
   11c04:	bl	10d38 <error@plt>
   11c08:	mov	r0, #1
   11c0c:	bl	10d8c <exit@plt>
   11c10:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c14:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11c18:	movw	r3, #29016	; 0x7158
   11c1c:	movt	r3, #2
   11c20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11c24:	ldr	ip, [r3, #16]
   11c28:	ldr	r2, [r3, #20]
   11c2c:	strd	r6, [sp, #8]
   11c30:	str	r8, [sp, #16]
   11c34:	cmp	ip, #0
   11c38:	str	lr, [sp, #20]
   11c3c:	beq	11d1c <__assert_fail@plt+0xe94>
   11c40:	ldrd	r4, [r2]
   11c44:	orrs	r1, r4, r5
   11c48:	mov	r0, r4
   11c4c:	mov	r1, r5
   11c50:	movne	lr, #0
   11c54:	bne	11c7c <__assert_fail@plt+0xdf4>
   11c58:	b	11d5c <__assert_fail@plt+0xed4>
   11c5c:	ldrd	r6, [r2, #8]!
   11c60:	orrs	r8, r6, r7
   11c64:	beq	11d5c <__assert_fail@plt+0xed4>
   11c68:	cmp	r1, r7
   11c6c:	cmpeq	r0, r6
   11c70:	bcs	11d50 <__assert_fail@plt+0xec8>
   11c74:	mov	r0, r6
   11c78:	mov	r1, r7
   11c7c:	add	lr, lr, #1
   11c80:	cmp	ip, lr
   11c84:	bne	11c5c <__assert_fail@plt+0xdd4>
   11c88:	ldrd	r6, [r3, #8]
   11c8c:	orrs	r2, r6, r7
   11c90:	beq	11ca0 <__assert_fail@plt+0xe18>
   11c94:	ldrd	r0, [r3]
   11c98:	orrs	r2, r0, r1
   11c9c:	bne	11cf8 <__assert_fail@plt+0xe70>
   11ca0:	cmp	ip, #1
   11ca4:	beq	11cc8 <__assert_fail@plt+0xe40>
   11ca8:	mov	r0, #0
   11cac:	mov	r1, #0
   11cb0:	strd	r0, [r3, #32]
   11cb4:	ldrd	r4, [sp]
   11cb8:	ldrd	r6, [sp, #8]
   11cbc:	ldr	r8, [sp, #16]
   11cc0:	add	sp, sp, #20
   11cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   11cc8:	ldr	ip, [r3]
   11ccc:	ldr	r2, [r3, #4]
   11cd0:	orr	r0, r6, ip
   11cd4:	orr	r1, r7, r2
   11cd8:	orrs	r2, r0, r1
   11cdc:	strdeq	r4, [r3, #32]
   11ce0:	bne	11ca8 <__assert_fail@plt+0xe20>
   11ce4:	b	11cb4 <__assert_fail@plt+0xe2c>
   11ce8:	orrs	r2, r0, r1
   11cec:	moveq	r2, r4
   11cf0:	moveq	r0, r4
   11cf4:	beq	11d38 <__assert_fail@plt+0xeb0>
   11cf8:	movw	r1, #24000	; 0x5dc0
   11cfc:	movt	r1, #1
   11d00:	mov	r2, #5
   11d04:	mov	r0, #0
   11d08:	bl	10ccc <dcgettext@plt>
   11d0c:	mov	r2, r0
   11d10:	mov	r1, #0
   11d14:	mov	r0, #1
   11d18:	bl	10d38 <error@plt>
   11d1c:	ldrd	r0, [r3]
   11d20:	ldrd	r4, [r3, #8]
   11d24:	orrs	r2, r4, r5
   11d28:	bne	11ce8 <__assert_fail@plt+0xe60>
   11d2c:	orrs	r2, r0, r1
   11d30:	beq	11d48 <__assert_fail@plt+0xec0>
   11d34:	mov	r2, r0
   11d38:	str	r2, [r3, #28]
   11d3c:	str	r0, [r3, #32]
   11d40:	str	ip, [r3, #36]	; 0x24
   11d44:	b	11cb4 <__assert_fail@plt+0xe2c>
   11d48:	mov	r0, #8
   11d4c:	b	11d34 <__assert_fail@plt+0xeac>
   11d50:	movw	r1, #23972	; 0x5da4
   11d54:	movt	r1, #1
   11d58:	b	11d00 <__assert_fail@plt+0xe78>
   11d5c:	movw	r1, #23948	; 0x5d8c
   11d60:	movt	r1, #1
   11d64:	b	11d00 <__assert_fail@plt+0xe78>
   11d68:	movw	ip, #29016	; 0x7158
   11d6c:	movt	ip, #2
   11d70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d74:	strd	r6, [sp, #8]
   11d78:	strd	r8, [sp, #16]
   11d7c:	ldrd	r8, [ip, #32]
   11d80:	str	lr, [sp, #32]
   11d84:	mov	lr, #0
   11d88:	strd	sl, [sp, #24]
   11d8c:	sub	sp, sp, #4
   11d90:	mov	sl, r0
   11d94:	strb	lr, [r3]
   11d98:	mov	fp, r1
   11d9c:	orrs	lr, r8, r9
   11da0:	bne	11e40 <__assert_fail@plt+0xfb8>
   11da4:	ldr	r1, [r2]
   11da8:	ldr	lr, [ip, #16]
   11dac:	cmp	lr, r1
   11db0:	bls	11dfc <__assert_fail@plt+0xf74>
   11db4:	ldr	r0, [ip, #20]
   11db8:	lsl	r8, r1, #3
   11dbc:	ldrd	r4, [r0, r8]
   11dc0:	add	r0, r0, r8
   11dc4:	cmp	fp, r5
   11dc8:	cmpeq	sl, r4
   11dcc:	addcs	r1, r1, #1
   11dd0:	bcs	11dec <__assert_fail@plt+0xf64>
   11dd4:	b	11e1c <__assert_fail@plt+0xf94>
   11dd8:	ldrd	r4, [r0, #8]!
   11ddc:	cmp	fp, r5
   11de0:	cmpeq	sl, r4
   11de4:	bcc	11e60 <__assert_fail@plt+0xfd8>
   11de8:	mov	r1, r8
   11dec:	cmp	lr, r1
   11df0:	add	r8, r1, #1
   11df4:	bne	11dd8 <__assert_fail@plt+0xf50>
   11df8:	str	lr, [r2]
   11dfc:	ldrd	r0, [ip]
   11e00:	orrs	r2, r0, r1
   11e04:	bne	11e9c <__assert_fail@plt+0x1014>
   11e08:	ldrd	r4, [ip, #8]
   11e0c:	orrs	r2, r4, r5
   11e10:	moveq	r2, #1
   11e14:	strbeq	r2, [r3]
   11e18:	bne	11e68 <__assert_fail@plt+0xfe0>
   11e1c:	mov	r0, r4
   11e20:	mov	r1, r5
   11e24:	add	sp, sp, #4
   11e28:	ldrd	r4, [sp]
   11e2c:	ldrd	r6, [sp, #8]
   11e30:	ldrd	r8, [sp, #16]
   11e34:	ldrd	sl, [sp, #24]
   11e38:	add	sp, sp, #32
   11e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e40:	adds	r6, r8, r0
   11e44:	mov	r2, r8
   11e48:	mov	r3, r9
   11e4c:	adc	r7, r9, r1
   11e50:	bl	155fc <__assert_fail@plt+0x4774>
   11e54:	subs	r4, r6, r2
   11e58:	sbc	r5, r7, r3
   11e5c:	b	11e1c <__assert_fail@plt+0xf94>
   11e60:	str	r1, [r2]
   11e64:	b	11e1c <__assert_fail@plt+0xf94>
   11e68:	ldr	r1, [ip, #20]
   11e6c:	adds	r8, r4, sl
   11e70:	mov	r2, r4
   11e74:	adc	r9, r5, fp
   11e78:	mov	r3, r5
   11e7c:	add	lr, r1, lr, lsl #3
   11e80:	ldrd	r0, [lr, #-8]
   11e84:	subs	r0, sl, r0
   11e88:	sbc	r1, fp, r1
   11e8c:	bl	155fc <__assert_fail@plt+0x4774>
   11e90:	subs	r4, r8, r2
   11e94:	sbc	r5, r9, r3
   11e98:	b	11e1c <__assert_fail@plt+0xf94>
   11e9c:	adds	r8, r0, sl
   11ea0:	mov	r2, r0
   11ea4:	adc	r9, r1, fp
   11ea8:	mov	r3, r1
   11eac:	mov	r0, sl
   11eb0:	mov	r1, fp
   11eb4:	bl	155fc <__assert_fail@plt+0x4774>
   11eb8:	subs	r4, r8, r2
   11ebc:	sbc	r5, r9, r3
   11ec0:	b	11e1c <__assert_fail@plt+0xf94>
   11ec4:	movw	r3, #28896	; 0x70e0
   11ec8:	movt	r3, #2
   11ecc:	cmp	r0, #0
   11ed0:	mov	r2, #0
   11ed4:	moveq	r0, r3
   11ed8:	movw	r3, #29016	; 0x7158
   11edc:	movt	r3, #2
   11ee0:	strb	r2, [r3, #40]	; 0x28
   11ee4:	str	r0, [r3, #44]	; 0x2c
   11ee8:	bx	lr
   11eec:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11ef0:	movw	r5, #29016	; 0x7158
   11ef4:	movt	r5, #2
   11ef8:	strd	r6, [sp, #8]
   11efc:	subs	r6, r0, #0
   11f00:	strd	r8, [sp, #16]
   11f04:	str	sl, [sp, #24]
   11f08:	str	lr, [sp, #28]
   11f0c:	beq	11f94 <__assert_fail@plt+0x110c>
   11f10:	ldr	r4, [r5, #48]	; 0x30
   11f14:	cmp	r4, #0
   11f18:	beq	12094 <__assert_fail@plt+0x120c>
   11f1c:	bl	10da4 <__errno_location@plt>
   11f20:	ldr	r3, [r6]
   11f24:	mov	r7, r0
   11f28:	movw	r1, #24080	; 0x5e10
   11f2c:	movt	r1, #1
   11f30:	mov	r0, r4
   11f34:	ldr	r4, [r7]
   11f38:	tst	r3, #32
   11f3c:	moveq	r4, #0
   11f40:	bl	10c60 <strcmp@plt>
   11f44:	cmp	r0, #0
   11f48:	mov	r0, r6
   11f4c:	beq	1208c <__assert_fail@plt+0x1204>
   11f50:	bl	122c0 <__assert_fail@plt+0x1438>
   11f54:	cmp	r0, #0
   11f58:	ldrne	r4, [r7]
   11f5c:	cmp	r4, #0
   11f60:	beq	11f94 <__assert_fail@plt+0x110c>
   11f64:	mov	r1, #3
   11f68:	mov	r0, #0
   11f6c:	ldr	r2, [r5, #48]	; 0x30
   11f70:	bl	1461c <__assert_fail@plt+0x3794>
   11f74:	mov	r3, r0
   11f78:	mov	r1, r4
   11f7c:	movw	r2, #23944	; 0x5d88
   11f80:	movt	r2, #1
   11f84:	mov	r0, #0
   11f88:	bl	10d38 <error@plt>
   11f8c:	mov	r3, #1
   11f90:	str	r3, [r5, #52]	; 0x34
   11f94:	ldr	r3, [r5, #44]	; 0x2c
   11f98:	ldr	r4, [r3]
   11f9c:	add	r3, r3, #4
   11fa0:	str	r3, [r5, #44]	; 0x2c
   11fa4:	cmp	r4, #0
   11fa8:	beq	1206c <__assert_fail@plt+0x11e4>
   11fac:	movw	r7, #24080	; 0x5e10
   11fb0:	movt	r7, #1
   11fb4:	movw	r9, #24084	; 0x5e14
   11fb8:	movt	r9, #1
   11fbc:	movw	r8, #29000	; 0x7148
   11fc0:	movt	r8, #2
   11fc4:	b	1202c <__assert_fail@plt+0x11a4>
   11fc8:	ldr	r6, [r8]
   11fcc:	mov	r3, #1
   11fd0:	strb	r3, [r5, #40]	; 0x28
   11fd4:	cmp	r6, #0
   11fd8:	bne	12058 <__assert_fail@plt+0x11d0>
   11fdc:	bl	10da4 <__errno_location@plt>
   11fe0:	ldr	sl, [r0]
   11fe4:	mov	r2, r4
   11fe8:	mov	r1, #3
   11fec:	mov	r0, r6
   11ff0:	bl	1461c <__assert_fail@plt+0x3794>
   11ff4:	mov	r3, r0
   11ff8:	movw	r2, #23944	; 0x5d88
   11ffc:	movt	r2, #1
   12000:	mov	r0, r6
   12004:	mov	r1, sl
   12008:	bl	10d38 <error@plt>
   1200c:	ldr	r3, [r5, #44]	; 0x2c
   12010:	mov	r2, #1
   12014:	ldr	r4, [r3]
   12018:	add	r3, r3, #4
   1201c:	str	r3, [r5, #44]	; 0x2c
   12020:	str	r2, [r5, #52]	; 0x34
   12024:	cmp	r4, #0
   12028:	beq	1206c <__assert_fail@plt+0x11e4>
   1202c:	mov	r1, r7
   12030:	mov	r0, r4
   12034:	bl	10c60 <strcmp@plt>
   12038:	cmp	r0, #0
   1203c:	beq	11fc8 <__assert_fail@plt+0x1140>
   12040:	mov	r1, r9
   12044:	mov	r0, r4
   12048:	bl	10e4c <fopen64@plt>
   1204c:	mov	r6, r0
   12050:	cmp	r6, #0
   12054:	beq	11fdc <__assert_fail@plt+0x1154>
   12058:	mov	r1, #2
   1205c:	mov	r0, r6
   12060:	str	r4, [r5, #48]	; 0x30
   12064:	bl	12270 <__assert_fail@plt+0x13e8>
   12068:	b	12070 <__assert_fail@plt+0x11e8>
   1206c:	mov	r6, #0
   12070:	mov	r0, r6
   12074:	ldrd	r4, [sp]
   12078:	ldrd	r6, [sp, #8]
   1207c:	ldrd	r8, [sp, #16]
   12080:	ldr	sl, [sp, #24]
   12084:	add	sp, sp, #28
   12088:	pop	{pc}		; (ldr pc, [sp], #4)
   1208c:	bl	10e40 <clearerr_unlocked@plt>
   12090:	b	11f5c <__assert_fail@plt+0x10d4>
   12094:	movw	r3, #23644	; 0x5c5c
   12098:	movt	r3, #1
   1209c:	movw	r1, #24048	; 0x5df0
   120a0:	movt	r1, #1
   120a4:	movw	r0, #24068	; 0x5e04
   120a8:	movt	r0, #1
   120ac:	mov	r2, #340	; 0x154
   120b0:	bl	10e88 <__assert_fail@plt>
   120b4:	movw	r3, #29016	; 0x7158
   120b8:	movt	r3, #2
   120bc:	ldrb	r3, [r3, #40]	; 0x28
   120c0:	cmp	r3, #0
   120c4:	bxeq	lr
   120c8:	movw	r3, #29000	; 0x7148
   120cc:	movt	r3, #2
   120d0:	str	r4, [sp, #-8]!
   120d4:	ldr	r0, [r3]
   120d8:	str	lr, [sp, #4]
   120dc:	bl	122c0 <__assert_fail@plt+0x1438>
   120e0:	cmp	r0, #0
   120e4:	bne	120f4 <__assert_fail@plt+0x126c>
   120e8:	ldr	r4, [sp]
   120ec:	add	sp, sp, #4
   120f0:	pop	{pc}		; (ldr pc, [sp], #4)
   120f4:	bl	10da4 <__errno_location@plt>
   120f8:	movw	r2, #24080	; 0x5e10
   120fc:	movt	r2, #1
   12100:	ldr	r1, [r0]
   12104:	mov	r0, #1
   12108:	bl	10d38 <error@plt>
   1210c:	mov	r2, #5
   12110:	movw	r1, #24088	; 0x5e18
   12114:	movt	r1, #1
   12118:	mov	r0, #0
   1211c:	str	r4, [sp, #-8]!
   12120:	movw	r4, #29004	; 0x714c
   12124:	movt	r4, #2
   12128:	str	lr, [sp, #4]
   1212c:	bl	10ccc <dcgettext@plt>
   12130:	ldr	r1, [r4]
   12134:	bl	10c48 <fputs_unlocked@plt>
   12138:	movw	r1, #24152	; 0x5e58
   1213c:	movt	r1, #1
   12140:	mov	r2, #5
   12144:	mov	r0, #0
   12148:	bl	10ccc <dcgettext@plt>
   1214c:	ldr	r1, [r4]
   12150:	ldr	r4, [sp]
   12154:	ldr	lr, [sp, #4]
   12158:	add	sp, sp, #8
   1215c:	b	10c48 <fputs_unlocked@plt>
   12160:	movw	r3, #29076	; 0x7194
   12164:	movt	r3, #2
   12168:	str	r0, [r3]
   1216c:	bx	lr
   12170:	movw	r3, #29076	; 0x7194
   12174:	movt	r3, #2
   12178:	strb	r0, [r3, #4]
   1217c:	bx	lr
   12180:	movw	r3, #29004	; 0x714c
   12184:	movt	r3, #2
   12188:	strd	r4, [sp, #-16]!
   1218c:	ldr	r0, [r3]
   12190:	str	r6, [sp, #8]
   12194:	str	lr, [sp, #12]
   12198:	sub	sp, sp, #8
   1219c:	bl	15364 <__assert_fail@plt+0x44dc>
   121a0:	cmp	r0, #0
   121a4:	beq	121d0 <__assert_fail@plt+0x1348>
   121a8:	movw	r4, #29076	; 0x7194
   121ac:	movt	r4, #2
   121b0:	ldrb	r6, [r4, #4]
   121b4:	bl	10da4 <__errno_location@plt>
   121b8:	mov	r5, r0
   121bc:	cmp	r6, #0
   121c0:	beq	121fc <__assert_fail@plt+0x1374>
   121c4:	ldr	r3, [r0]
   121c8:	cmp	r3, #32
   121cc:	bne	121fc <__assert_fail@plt+0x1374>
   121d0:	movw	r3, #28992	; 0x7140
   121d4:	movt	r3, #2
   121d8:	ldr	r0, [r3]
   121dc:	bl	15364 <__assert_fail@plt+0x44dc>
   121e0:	cmp	r0, #0
   121e4:	bne	12244 <__assert_fail@plt+0x13bc>
   121e8:	add	sp, sp, #8
   121ec:	ldrd	r4, [sp]
   121f0:	ldr	r6, [sp, #8]
   121f4:	add	sp, sp, #12
   121f8:	pop	{pc}		; (ldr pc, [sp], #4)
   121fc:	movw	r1, #23492	; 0x5bc4
   12200:	movt	r1, #1
   12204:	mov	r2, #5
   12208:	mov	r0, #0
   1220c:	bl	10ccc <dcgettext@plt>
   12210:	mov	r6, r0
   12214:	ldr	r0, [r4]
   12218:	cmp	r0, #0
   1221c:	beq	12254 <__assert_fail@plt+0x13cc>
   12220:	ldr	r4, [r5]
   12224:	bl	14608 <__assert_fail@plt+0x3780>
   12228:	mov	r3, r0
   1222c:	movw	r2, #24536	; 0x5fd8
   12230:	movt	r2, #1
   12234:	mov	r0, #0
   12238:	str	r6, [sp]
   1223c:	mov	r1, r4
   12240:	bl	10d38 <error@plt>
   12244:	movw	r3, #28908	; 0x70ec
   12248:	movt	r3, #2
   1224c:	ldr	r0, [r3]
   12250:	bl	10c90 <_exit@plt>
   12254:	mov	r3, r6
   12258:	movw	r2, #23944	; 0x5d88
   1225c:	movt	r2, #1
   12260:	ldr	r1, [r5]
   12264:	bl	10d38 <error@plt>
   12268:	b	12244 <__assert_fail@plt+0x13bc>
   1226c:	b	10c6c <posix_fadvise64@plt>
   12270:	cmp	r0, #0
   12274:	bxeq	lr
   12278:	str	r4, [sp, #-16]!
   1227c:	mov	r4, r1
   12280:	strd	r6, [sp, #4]
   12284:	mov	r6, #0
   12288:	mov	r7, #0
   1228c:	str	lr, [sp, #12]
   12290:	sub	sp, sp, #16
   12294:	bl	10dd4 <fileno@plt>
   12298:	mov	r2, r6
   1229c:	mov	r3, r7
   122a0:	strd	r6, [sp]
   122a4:	str	r4, [sp, #8]
   122a8:	bl	10c6c <posix_fadvise64@plt>
   122ac:	add	sp, sp, #16
   122b0:	ldr	r4, [sp]
   122b4:	ldrd	r6, [sp, #4]
   122b8:	add	sp, sp, #12
   122bc:	pop	{pc}		; (ldr pc, [sp], #4)
   122c0:	strd	r4, [sp, #-12]!
   122c4:	mov	r4, r0
   122c8:	str	lr, [sp, #8]
   122cc:	sub	sp, sp, #12
   122d0:	bl	10dd4 <fileno@plt>
   122d4:	cmp	r0, #0
   122d8:	mov	r0, r4
   122dc:	blt	12360 <__assert_fail@plt+0x14d8>
   122e0:	bl	10d5c <__freading@plt>
   122e4:	cmp	r0, #0
   122e8:	bne	1232c <__assert_fail@plt+0x14a4>
   122ec:	mov	r0, r4
   122f0:	bl	12374 <__assert_fail@plt+0x14ec>
   122f4:	cmp	r0, #0
   122f8:	beq	1235c <__assert_fail@plt+0x14d4>
   122fc:	bl	10da4 <__errno_location@plt>
   12300:	mov	r5, r0
   12304:	mov	r0, r4
   12308:	ldr	r4, [r5]
   1230c:	bl	10dec <fclose@plt>
   12310:	cmp	r4, #0
   12314:	mvnne	r0, #0
   12318:	strne	r4, [r5]
   1231c:	add	sp, sp, #12
   12320:	ldrd	r4, [sp]
   12324:	add	sp, sp, #8
   12328:	pop	{pc}		; (ldr pc, [sp], #4)
   1232c:	mov	r0, r4
   12330:	bl	10dd4 <fileno@plt>
   12334:	mov	r1, #1
   12338:	mov	r2, #0
   1233c:	mov	r3, #0
   12340:	str	r1, [sp]
   12344:	bl	10d08 <lseek64@plt>
   12348:	mvn	r3, #0
   1234c:	mvn	r2, #0
   12350:	cmp	r1, r3
   12354:	cmpeq	r0, r2
   12358:	bne	122ec <__assert_fail@plt+0x1464>
   1235c:	mov	r0, r4
   12360:	add	sp, sp, #12
   12364:	ldrd	r4, [sp]
   12368:	ldr	lr, [sp, #8]
   1236c:	add	sp, sp, #12
   12370:	b	10dec <fclose@plt>
   12374:	str	r4, [sp, #-8]!
   12378:	subs	r4, r0, #0
   1237c:	str	lr, [sp, #4]
   12380:	sub	sp, sp, #8
   12384:	beq	123a0 <__assert_fail@plt+0x1518>
   12388:	bl	10d5c <__freading@plt>
   1238c:	cmp	r0, #0
   12390:	beq	123a0 <__assert_fail@plt+0x1518>
   12394:	ldr	r3, [r4]
   12398:	tst	r3, #256	; 0x100
   1239c:	bne	123b8 <__assert_fail@plt+0x1530>
   123a0:	mov	r0, r4
   123a4:	add	sp, sp, #8
   123a8:	ldr	r4, [sp]
   123ac:	ldr	lr, [sp, #4]
   123b0:	add	sp, sp, #8
   123b4:	b	10c78 <fflush@plt>
   123b8:	mov	r1, #1
   123bc:	mov	r2, #0
   123c0:	mov	r3, #0
   123c4:	mov	r0, r4
   123c8:	str	r1, [sp]
   123cc:	bl	12434 <__assert_fail@plt+0x15ac>
   123d0:	b	123a0 <__assert_fail@plt+0x1518>
   123d4:	strd	r4, [sp, #-12]!
   123d8:	mov	r5, r0
   123dc:	str	lr, [sp, #8]
   123e0:	sub	sp, sp, #12
   123e4:	bl	10da4 <__errno_location@plt>
   123e8:	mov	r4, r0
   123ec:	mov	r2, #0
   123f0:	ldr	r3, [r4]
   123f4:	mov	r0, r5
   123f8:	str	r2, [r4]
   123fc:	str	r3, [sp]
   12400:	str	r3, [sp, #4]
   12404:	bl	10c84 <free@plt>
   12408:	ldr	r3, [r4]
   1240c:	add	r2, sp, #8
   12410:	clz	r3, r3
   12414:	lsr	r3, r3, #5
   12418:	add	r3, r2, r3, lsl #2
   1241c:	ldr	r3, [r3, #-8]
   12420:	str	r3, [r4]
   12424:	add	sp, sp, #12
   12428:	ldrd	r4, [sp]
   1242c:	add	sp, sp, #8
   12430:	pop	{pc}		; (ldr pc, [sp], #4)
   12434:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12438:	mov	r4, r0
   1243c:	ldr	ip, [r0, #4]
   12440:	strd	r6, [sp, #8]
   12444:	str	lr, [sp, #20]
   12448:	ldr	lr, [r0, #8]
   1244c:	str	r8, [sp, #16]
   12450:	sub	sp, sp, #8
   12454:	ldr	r5, [sp, #32]
   12458:	cmp	lr, ip
   1245c:	beq	12484 <__assert_fail@plt+0x15fc>
   12460:	mov	r0, r4
   12464:	str	r5, [sp, #32]
   12468:	add	sp, sp, #8
   1246c:	ldrd	r4, [sp]
   12470:	ldrd	r6, [sp, #8]
   12474:	ldr	r8, [sp, #16]
   12478:	ldr	lr, [sp, #20]
   1247c:	add	sp, sp, #24
   12480:	b	10df8 <fseeko64@plt>
   12484:	ldr	ip, [r0, #16]
   12488:	ldr	lr, [r0, #20]
   1248c:	cmp	lr, ip
   12490:	bne	12460 <__assert_fail@plt+0x15d8>
   12494:	ldr	r8, [r0, #36]	; 0x24
   12498:	cmp	r8, #0
   1249c:	bne	12460 <__assert_fail@plt+0x15d8>
   124a0:	mov	r6, r2
   124a4:	mov	r7, r3
   124a8:	bl	10dd4 <fileno@plt>
   124ac:	mov	r2, r6
   124b0:	mov	r3, r7
   124b4:	str	r5, [sp]
   124b8:	bl	10d08 <lseek64@plt>
   124bc:	mvn	r3, #0
   124c0:	mvn	r2, #0
   124c4:	cmp	r1, r3
   124c8:	cmpeq	r0, r2
   124cc:	beq	124fc <__assert_fail@plt+0x1674>
   124d0:	ldr	r3, [r4]
   124d4:	strd	r0, [r4, #80]	; 0x50
   124d8:	bic	r3, r3, #16
   124dc:	str	r3, [r4]
   124e0:	mov	r0, r8
   124e4:	add	sp, sp, #8
   124e8:	ldrd	r4, [sp]
   124ec:	ldrd	r6, [sp, #8]
   124f0:	ldr	r8, [sp, #16]
   124f4:	add	sp, sp, #20
   124f8:	pop	{pc}		; (ldr pc, [sp], #4)
   124fc:	mvn	r8, #0
   12500:	b	124e0 <__assert_fail@plt+0x1658>
   12504:	strd	r4, [sp, #-16]!
   12508:	subs	r4, r0, #0
   1250c:	str	r6, [sp, #8]
   12510:	str	lr, [sp, #12]
   12514:	beq	125ac <__assert_fail@plt+0x1724>
   12518:	mov	r1, #47	; 0x2f
   1251c:	bl	10e28 <strrchr@plt>
   12520:	subs	r5, r0, #0
   12524:	beq	12584 <__assert_fail@plt+0x16fc>
   12528:	add	r6, r5, #1
   1252c:	sub	r3, r6, r4
   12530:	cmp	r3, #6
   12534:	ble	12584 <__assert_fail@plt+0x16fc>
   12538:	movw	r1, #24600	; 0x6018
   1253c:	movt	r1, #1
   12540:	mov	r2, #7
   12544:	sub	r0, r5, #6
   12548:	bl	10e64 <strncmp@plt>
   1254c:	cmp	r0, #0
   12550:	bne	12584 <__assert_fail@plt+0x16fc>
   12554:	movw	r1, #24608	; 0x6020
   12558:	movt	r1, #1
   1255c:	mov	r2, #3
   12560:	mov	r0, r6
   12564:	bl	10e64 <strncmp@plt>
   12568:	cmp	r0, #0
   1256c:	movne	r4, r6
   12570:	bne	12584 <__assert_fail@plt+0x16fc>
   12574:	add	r4, r5, #4
   12578:	movw	r3, #28976	; 0x7130
   1257c:	movt	r3, #2
   12580:	str	r4, [r3]
   12584:	movw	r2, #29084	; 0x719c
   12588:	movt	r2, #2
   1258c:	ldr	r6, [sp, #8]
   12590:	movw	r3, #28980	; 0x7134
   12594:	movt	r3, #2
   12598:	str	r4, [r2]
   1259c:	str	r4, [r3]
   125a0:	ldrd	r4, [sp]
   125a4:	add	sp, sp, #12
   125a8:	pop	{pc}		; (ldr pc, [sp], #4)
   125ac:	movw	r3, #28992	; 0x7140
   125b0:	movt	r3, #2
   125b4:	movw	r0, #24544	; 0x5fe0
   125b8:	movt	r0, #1
   125bc:	ldr	r3, [r3]
   125c0:	mov	r2, #55	; 0x37
   125c4:	mov	r1, #1
   125c8:	bl	10cfc <fwrite@plt>
   125cc:	bl	10e70 <abort@plt>
   125d0:	strd	r4, [sp, #-16]!
   125d4:	mov	r4, #0
   125d8:	mov	r5, #0
   125dc:	cmp	r1, #10
   125e0:	str	r6, [sp, #8]
   125e4:	strd	r4, [r0]
   125e8:	strd	r4, [r0, #8]
   125ec:	str	lr, [sp, #12]
   125f0:	strd	r4, [r0, #16]
   125f4:	strd	r4, [r0, #24]
   125f8:	strd	r4, [r0, #32]
   125fc:	strd	r4, [r0, #40]	; 0x28
   12600:	beq	12618 <__assert_fail@plt+0x1790>
   12604:	ldrd	r4, [sp]
   12608:	str	r1, [r0]
   1260c:	ldr	r6, [sp, #8]
   12610:	add	sp, sp, #12
   12614:	pop	{pc}		; (ldr pc, [sp], #4)
   12618:	bl	10e70 <abort@plt>
   1261c:	mov	r2, #5
   12620:	strd	r4, [sp, #-16]!
   12624:	mov	r5, r0
   12628:	str	r6, [sp, #8]
   1262c:	mov	r6, r1
   12630:	mov	r1, r0
   12634:	mov	r0, #0
   12638:	str	lr, [sp, #12]
   1263c:	bl	10ccc <dcgettext@plt>
   12640:	cmp	r5, r0
   12644:	mov	r4, r0
   12648:	beq	12660 <__assert_fail@plt+0x17d8>
   1264c:	mov	r0, r4
   12650:	ldrd	r4, [sp]
   12654:	ldr	r6, [sp, #8]
   12658:	add	sp, sp, #12
   1265c:	pop	{pc}		; (ldr pc, [sp], #4)
   12660:	bl	153ec <__assert_fail@plt+0x4564>
   12664:	ldrb	r3, [r0]
   12668:	bic	r3, r3, #32
   1266c:	cmp	r3, #85	; 0x55
   12670:	bne	126d8 <__assert_fail@plt+0x1850>
   12674:	ldrb	r3, [r0, #1]
   12678:	bic	r3, r3, #32
   1267c:	cmp	r3, #84	; 0x54
   12680:	bne	12758 <__assert_fail@plt+0x18d0>
   12684:	ldrb	r3, [r0, #2]
   12688:	bic	r3, r3, #32
   1268c:	cmp	r3, #70	; 0x46
   12690:	bne	12758 <__assert_fail@plt+0x18d0>
   12694:	ldrb	r3, [r0, #3]
   12698:	cmp	r3, #45	; 0x2d
   1269c:	bne	12758 <__assert_fail@plt+0x18d0>
   126a0:	ldrb	r3, [r0, #4]
   126a4:	cmp	r3, #56	; 0x38
   126a8:	bne	12758 <__assert_fail@plt+0x18d0>
   126ac:	ldrb	r3, [r0, #5]
   126b0:	cmp	r3, #0
   126b4:	bne	12758 <__assert_fail@plt+0x18d0>
   126b8:	ldrb	r2, [r4]
   126bc:	movw	r3, #24700	; 0x607c
   126c0:	movt	r3, #1
   126c4:	movw	r4, #24712	; 0x6088
   126c8:	movt	r4, #1
   126cc:	cmp	r2, #96	; 0x60
   126d0:	movne	r4, r3
   126d4:	b	1264c <__assert_fail@plt+0x17c4>
   126d8:	cmp	r3, #71	; 0x47
   126dc:	bne	12758 <__assert_fail@plt+0x18d0>
   126e0:	ldrb	r3, [r0, #1]
   126e4:	bic	r3, r3, #32
   126e8:	cmp	r3, #66	; 0x42
   126ec:	bne	12758 <__assert_fail@plt+0x18d0>
   126f0:	ldrb	r3, [r0, #2]
   126f4:	cmp	r3, #49	; 0x31
   126f8:	bne	12758 <__assert_fail@plt+0x18d0>
   126fc:	ldrb	r3, [r0, #3]
   12700:	cmp	r3, #56	; 0x38
   12704:	bne	12758 <__assert_fail@plt+0x18d0>
   12708:	ldrb	r3, [r0, #4]
   1270c:	cmp	r3, #48	; 0x30
   12710:	bne	12758 <__assert_fail@plt+0x18d0>
   12714:	ldrb	r3, [r0, #5]
   12718:	cmp	r3, #51	; 0x33
   1271c:	bne	12758 <__assert_fail@plt+0x18d0>
   12720:	ldrb	r3, [r0, #6]
   12724:	cmp	r3, #48	; 0x30
   12728:	bne	12758 <__assert_fail@plt+0x18d0>
   1272c:	ldrb	r3, [r0, #7]
   12730:	cmp	r3, #0
   12734:	bne	12758 <__assert_fail@plt+0x18d0>
   12738:	ldrb	r2, [r4]
   1273c:	movw	r3, #24704	; 0x6080
   12740:	movt	r3, #1
   12744:	movw	r4, #24708	; 0x6084
   12748:	movt	r4, #1
   1274c:	cmp	r2, #96	; 0x60
   12750:	movne	r4, r3
   12754:	b	1264c <__assert_fail@plt+0x17c4>
   12758:	movw	r3, #24716	; 0x608c
   1275c:	movt	r3, #1
   12760:	cmp	r6, #9
   12764:	movw	r4, #24696	; 0x6078
   12768:	movt	r4, #1
   1276c:	movne	r4, r3
   12770:	b	1264c <__assert_fail@plt+0x17c4>
   12774:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12778:	strd	r6, [sp, #8]
   1277c:	strd	r8, [sp, #16]
   12780:	strd	sl, [sp, #24]
   12784:	mov	fp, r0
   12788:	mov	sl, r1
   1278c:	str	lr, [sp, #32]
   12790:	sub	sp, sp, #116	; 0x74
   12794:	ldr	r8, [sp, #152]	; 0x98
   12798:	str	r3, [sp, #28]
   1279c:	ldr	r3, [sp, #156]	; 0x9c
   127a0:	str	r2, [sp, #32]
   127a4:	and	r4, r3, #2
   127a8:	ubfx	r3, r3, #1, #1
   127ac:	str	r3, [sp, #44]	; 0x2c
   127b0:	bl	10d14 <__ctype_get_mb_cur_max@plt>
   127b4:	str	r0, [sp, #64]	; 0x40
   127b8:	cmp	r8, #10
   127bc:	ldrls	pc, [pc, r8, lsl #2]
   127c0:	b	13f30 <__assert_fail@plt+0x30a8>
   127c4:	andeq	r2, r1, r8, asr #23
   127c8:	andeq	r2, r1, r4, ror #24
   127cc:	andeq	r3, r1, r0, asr #4
   127d0:	andeq	r2, r1, r4, lsl #25
   127d4:	andeq	r2, r1, ip, lsr #22
   127d8:	andeq	r2, r1, r8, ror fp
   127dc:	strdeq	r2, [r1], -r8
   127e0:	andeq	r2, r1, r4, lsr ip
   127e4:	strdeq	r2, [r1], -r0
   127e8:	strdeq	r2, [r1], -r0
   127ec:	strdeq	r2, [r1], -r0
   127f0:	cmp	r8, #10
   127f4:	beq	12820 <__assert_fail@plt+0x1998>
   127f8:	mov	r1, r8
   127fc:	movw	r0, #24720	; 0x6090
   12800:	movt	r0, #1
   12804:	bl	1261c <__assert_fail@plt+0x1794>
   12808:	mov	r1, r8
   1280c:	str	r0, [sp, #164]	; 0xa4
   12810:	movw	r0, #24716	; 0x608c
   12814:	movt	r0, #1
   12818:	bl	1261c <__assert_fail@plt+0x1794>
   1281c:	str	r0, [sp, #168]	; 0xa8
   12820:	cmp	r4, #0
   12824:	movne	r4, #0
   12828:	beq	13c0c <__assert_fail@plt+0x2d84>
   1282c:	mov	r3, #1
   12830:	mov	r5, #0
   12834:	ldr	r0, [sp, #168]	; 0xa8
   12838:	str	r3, [sp, #36]	; 0x24
   1283c:	str	r3, [sp, #40]	; 0x28
   12840:	str	r5, [sp, #68]	; 0x44
   12844:	bl	10d98 <strlen@plt>
   12848:	ldr	r3, [sp, #168]	; 0xa8
   1284c:	str	r5, [sp, #48]	; 0x30
   12850:	str	r0, [sp, #56]	; 0x38
   12854:	str	r3, [sp, #60]	; 0x3c
   12858:	str	r5, [sp, #72]	; 0x48
   1285c:	str	r8, [sp, #152]	; 0x98
   12860:	mov	r8, fp
   12864:	mov	r9, #0
   12868:	ldr	fp, [sp, #152]	; 0x98
   1286c:	ldr	r3, [sp, #28]
   12870:	cmn	r3, #1
   12874:	beq	12dd4 <__assert_fail@plt+0x1f4c>
   12878:	ldr	r3, [sp, #28]
   1287c:	subs	r6, r3, r9
   12880:	movne	r6, #1
   12884:	cmp	r6, #0
   12888:	beq	12dec <__assert_fail@plt+0x1f64>
   1288c:	ldr	r0, [sp, #32]
   12890:	ldr	r7, [sp, #40]	; 0x28
   12894:	add	r3, r0, r9
   12898:	cmp	fp, #2
   1289c:	moveq	r7, #0
   128a0:	andne	r7, r7, #1
   128a4:	str	r3, [sp, #52]	; 0x34
   128a8:	cmp	r7, #0
   128ac:	beq	13288 <__assert_fail@plt+0x2400>
   128b0:	ldr	r2, [sp, #56]	; 0x38
   128b4:	cmp	r2, #0
   128b8:	beq	13524 <__assert_fail@plt+0x269c>
   128bc:	ldr	r1, [sp, #28]
   128c0:	cmp	r2, #1
   128c4:	mov	r3, r2
   128c8:	movls	r3, #0
   128cc:	movhi	r3, #1
   128d0:	add	r5, r9, r2
   128d4:	cmn	r1, #1
   128d8:	movne	r3, #0
   128dc:	cmp	r3, #0
   128e0:	beq	128ec <__assert_fail@plt+0x1a64>
   128e4:	bl	10d98 <strlen@plt>
   128e8:	str	r0, [sp, #28]
   128ec:	ldr	r3, [sp, #28]
   128f0:	cmp	r5, r3
   128f4:	bhi	13524 <__assert_fail@plt+0x269c>
   128f8:	ldr	r0, [sp, #52]	; 0x34
   128fc:	ldr	r2, [sp, #56]	; 0x38
   12900:	ldr	r1, [sp, #60]	; 0x3c
   12904:	bl	10cb4 <memcmp@plt>
   12908:	cmp	r0, #0
   1290c:	bne	13524 <__assert_fail@plt+0x269c>
   12910:	ldr	r3, [sp, #44]	; 0x2c
   12914:	cmp	r3, #0
   12918:	bne	13e54 <__assert_fail@plt+0x2fcc>
   1291c:	ldr	r3, [sp, #52]	; 0x34
   12920:	ldrb	r5, [r3]
   12924:	cmp	r5, #126	; 0x7e
   12928:	ldrls	pc, [pc, r5, lsl #2]
   1292c:	b	131e4 <__assert_fail@plt+0x235c>
   12930:	andeq	r3, r1, r8, ror #1
   12934:	andeq	r3, r1, r4, ror #3
   12938:	andeq	r3, r1, r4, ror #3
   1293c:	andeq	r3, r1, r4, ror #3
   12940:	andeq	r3, r1, r4, ror #3
   12944:	andeq	r3, r1, r4, ror #3
   12948:	andeq	r3, r1, r4, ror #3
   1294c:	strheq	r3, [r1], -ip
   12950:	strheq	r3, [r1], -r4
   12954:	strdeq	r2, [r1], -ip
   12958:	andeq	r3, r1, r8, lsr #1
   1295c:	strdeq	r2, [r1], -r4
   12960:	andeq	r3, r1, r4, lsl #1
   12964:	ldrdeq	r3, [r1], -r0
   12968:	andeq	r3, r1, r4, ror #3
   1296c:	andeq	r3, r1, r4, ror #3
   12970:	andeq	r3, r1, r4, ror #3
   12974:	andeq	r3, r1, r4, ror #3
   12978:	andeq	r3, r1, r4, ror #3
   1297c:	andeq	r3, r1, r4, ror #3
   12980:	andeq	r3, r1, r4, ror #3
   12984:	andeq	r3, r1, r4, ror #3
   12988:	andeq	r3, r1, r4, ror #3
   1298c:	andeq	r3, r1, r4, ror #3
   12990:	andeq	r3, r1, r4, ror #3
   12994:	andeq	r3, r1, r4, ror #3
   12998:	andeq	r3, r1, r4, ror #3
   1299c:	andeq	r3, r1, r4, ror #3
   129a0:	andeq	r3, r1, r4, ror #3
   129a4:	andeq	r3, r1, r4, ror #3
   129a8:	andeq	r3, r1, r4, ror #3
   129ac:	andeq	r3, r1, r4, ror #3
   129b0:	andeq	r3, r1, r0, asr #3
   129b4:	andeq	r3, r1, r8, asr #1
   129b8:	andeq	r3, r1, r8, asr #1
   129bc:	andeq	r3, r1, r4, lsr #3
   129c0:	andeq	r3, r1, r8, asr #1
   129c4:	ldrdeq	r3, [r1], -r8
   129c8:	andeq	r3, r1, r8, asr #1
   129cc:	andeq	r2, r1, r4, lsr #30
   129d0:	andeq	r3, r1, r8, asr #1
   129d4:	andeq	r3, r1, r8, asr #1
   129d8:	andeq	r3, r1, r8, asr #1
   129dc:	ldrdeq	r3, [r1], -r8
   129e0:	ldrdeq	r3, [r1], -r8
   129e4:	ldrdeq	r3, [r1], -r8
   129e8:	ldrdeq	r3, [r1], -r8
   129ec:	ldrdeq	r3, [r1], -r8
   129f0:	ldrdeq	r3, [r1], -r8
   129f4:	ldrdeq	r3, [r1], -r8
   129f8:	ldrdeq	r3, [r1], -r8
   129fc:	ldrdeq	r3, [r1], -r8
   12a00:	ldrdeq	r3, [r1], -r8
   12a04:	ldrdeq	r3, [r1], -r8
   12a08:	ldrdeq	r3, [r1], -r8
   12a0c:	ldrdeq	r3, [r1], -r8
   12a10:	ldrdeq	r3, [r1], -r8
   12a14:	ldrdeq	r3, [r1], -r8
   12a18:	ldrdeq	r3, [r1], -r8
   12a1c:	andeq	r3, r1, r8, asr #1
   12a20:	andeq	r3, r1, r8, asr #1
   12a24:	andeq	r3, r1, r8, asr #1
   12a28:	andeq	r3, r1, r8, asr #1
   12a2c:	strdeq	r2, [r1], -r8
   12a30:	andeq	r3, r1, r4, ror #3
   12a34:	ldrdeq	r3, [r1], -r8
   12a38:	ldrdeq	r3, [r1], -r8
   12a3c:	ldrdeq	r3, [r1], -r8
   12a40:	ldrdeq	r3, [r1], -r8
   12a44:	ldrdeq	r3, [r1], -r8
   12a48:	ldrdeq	r3, [r1], -r8
   12a4c:	ldrdeq	r3, [r1], -r8
   12a50:	ldrdeq	r3, [r1], -r8
   12a54:	ldrdeq	r3, [r1], -r8
   12a58:	ldrdeq	r3, [r1], -r8
   12a5c:	ldrdeq	r3, [r1], -r8
   12a60:	ldrdeq	r3, [r1], -r8
   12a64:	ldrdeq	r3, [r1], -r8
   12a68:	ldrdeq	r3, [r1], -r8
   12a6c:	ldrdeq	r3, [r1], -r8
   12a70:	ldrdeq	r3, [r1], -r8
   12a74:	ldrdeq	r3, [r1], -r8
   12a78:	ldrdeq	r3, [r1], -r8
   12a7c:	ldrdeq	r3, [r1], -r8
   12a80:	ldrdeq	r3, [r1], -r8
   12a84:	ldrdeq	r3, [r1], -r8
   12a88:	ldrdeq	r3, [r1], -r8
   12a8c:	ldrdeq	r3, [r1], -r8
   12a90:	ldrdeq	r3, [r1], -r8
   12a94:	ldrdeq	r3, [r1], -r8
   12a98:	ldrdeq	r3, [r1], -r8
   12a9c:	andeq	r3, r1, r8, asr #1
   12aa0:	andeq	r2, r1, r0, lsr #29
   12aa4:	ldrdeq	r3, [r1], -r8
   12aa8:	andeq	r3, r1, r8, asr #1
   12aac:	ldrdeq	r3, [r1], -r8
   12ab0:	andeq	r3, r1, r8, asr #1
   12ab4:	ldrdeq	r3, [r1], -r8
   12ab8:	ldrdeq	r3, [r1], -r8
   12abc:	ldrdeq	r3, [r1], -r8
   12ac0:	ldrdeq	r3, [r1], -r8
   12ac4:	ldrdeq	r3, [r1], -r8
   12ac8:	ldrdeq	r3, [r1], -r8
   12acc:	ldrdeq	r3, [r1], -r8
   12ad0:	ldrdeq	r3, [r1], -r8
   12ad4:	ldrdeq	r3, [r1], -r8
   12ad8:	ldrdeq	r3, [r1], -r8
   12adc:	ldrdeq	r3, [r1], -r8
   12ae0:	ldrdeq	r3, [r1], -r8
   12ae4:	ldrdeq	r3, [r1], -r8
   12ae8:	ldrdeq	r3, [r1], -r8
   12aec:	ldrdeq	r3, [r1], -r8
   12af0:	ldrdeq	r3, [r1], -r8
   12af4:	ldrdeq	r3, [r1], -r8
   12af8:	ldrdeq	r3, [r1], -r8
   12afc:	ldrdeq	r3, [r1], -r8
   12b00:	ldrdeq	r3, [r1], -r8
   12b04:	ldrdeq	r3, [r1], -r8
   12b08:	ldrdeq	r3, [r1], -r8
   12b0c:	ldrdeq	r3, [r1], -r8
   12b10:	ldrdeq	r3, [r1], -r8
   12b14:	ldrdeq	r3, [r1], -r8
   12b18:	ldrdeq	r3, [r1], -r8
   12b1c:	andeq	r2, r1, r4, asr #25
   12b20:	andeq	r3, r1, r8, asr #1
   12b24:	andeq	r2, r1, r4, asr #25
   12b28:	andeq	r3, r1, r4, lsr #3
   12b2c:	cmp	r4, #0
   12b30:	moveq	r3, #1
   12b34:	streq	r3, [sp, #40]	; 0x28
   12b38:	beq	1324c <__assert_fail@plt+0x23c4>
   12b3c:	mov	r3, #0
   12b40:	mov	r2, #1
   12b44:	mov	r4, r3
   12b48:	str	r2, [sp, #36]	; 0x24
   12b4c:	str	r2, [sp, #44]	; 0x2c
   12b50:	str	r2, [sp, #56]	; 0x38
   12b54:	str	r3, [sp, #68]	; 0x44
   12b58:	movw	r3, #24716	; 0x608c
   12b5c:	movt	r3, #1
   12b60:	str	r4, [sp, #40]	; 0x28
   12b64:	mov	r8, #2
   12b68:	str	r4, [sp, #48]	; 0x30
   12b6c:	str	r3, [sp, #60]	; 0x3c
   12b70:	str	r4, [sp, #72]	; 0x48
   12b74:	b	1285c <__assert_fail@plt+0x19d4>
   12b78:	cmp	r4, #0
   12b7c:	bne	13dc8 <__assert_fail@plt+0x2f40>
   12b80:	cmp	sl, #0
   12b84:	beq	13b88 <__assert_fail@plt+0x2d00>
   12b88:	mov	r3, #34	; 0x22
   12b8c:	mov	r1, r4
   12b90:	mov	r2, #1
   12b94:	strb	r3, [fp]
   12b98:	movw	r3, #24696	; 0x6078
   12b9c:	movt	r3, #1
   12ba0:	mov	r4, r2
   12ba4:	str	r2, [sp, #36]	; 0x24
   12ba8:	str	r2, [sp, #40]	; 0x28
   12bac:	str	r1, [sp, #44]	; 0x2c
   12bb0:	str	r1, [sp, #48]	; 0x30
   12bb4:	str	r2, [sp, #56]	; 0x38
   12bb8:	str	r3, [sp, #60]	; 0x3c
   12bbc:	str	r1, [sp, #68]	; 0x44
   12bc0:	str	r1, [sp, #72]	; 0x48
   12bc4:	b	1285c <__assert_fail@plt+0x19d4>
   12bc8:	mov	r3, #0
   12bcc:	mov	r4, r8
   12bd0:	str	r3, [sp, #40]	; 0x28
   12bd4:	str	r3, [sp, #44]	; 0x2c
   12bd8:	str	r3, [sp, #48]	; 0x30
   12bdc:	str	r8, [sp, #56]	; 0x38
   12be0:	str	r3, [sp, #60]	; 0x3c
   12be4:	str	r3, [sp, #68]	; 0x44
   12be8:	mov	r3, #1
   12bec:	str	r3, [sp, #36]	; 0x24
   12bf0:	str	r8, [sp, #72]	; 0x48
   12bf4:	b	1285c <__assert_fail@plt+0x19d4>
   12bf8:	mov	r3, #1
   12bfc:	mov	r2, #0
   12c00:	mov	r4, r2
   12c04:	mov	r8, #5
   12c08:	str	r3, [sp, #36]	; 0x24
   12c0c:	str	r3, [sp, #40]	; 0x28
   12c10:	str	r3, [sp, #44]	; 0x2c
   12c14:	str	r2, [sp, #48]	; 0x30
   12c18:	str	r3, [sp, #56]	; 0x38
   12c1c:	movw	r3, #24696	; 0x6078
   12c20:	movt	r3, #1
   12c24:	str	r3, [sp, #60]	; 0x3c
   12c28:	str	r2, [sp, #68]	; 0x44
   12c2c:	str	r2, [sp, #72]	; 0x48
   12c30:	b	1285c <__assert_fail@plt+0x19d4>
   12c34:	mov	r3, #0
   12c38:	mov	r2, #1
   12c3c:	mov	r4, r3
   12c40:	str	r2, [sp, #36]	; 0x24
   12c44:	str	r2, [sp, #40]	; 0x28
   12c48:	str	r3, [sp, #44]	; 0x2c
   12c4c:	str	r3, [sp, #48]	; 0x30
   12c50:	str	r3, [sp, #56]	; 0x38
   12c54:	str	r3, [sp, #60]	; 0x3c
   12c58:	str	r3, [sp, #68]	; 0x44
   12c5c:	str	r3, [sp, #72]	; 0x48
   12c60:	b	1285c <__assert_fail@plt+0x19d4>
   12c64:	mov	r2, #1
   12c68:	mov	r3, #0
   12c6c:	mov	r4, r3
   12c70:	str	r2, [sp, #36]	; 0x24
   12c74:	str	r2, [sp, #44]	; 0x2c
   12c78:	str	r8, [sp, #56]	; 0x38
   12c7c:	str	r3, [sp, #68]	; 0x44
   12c80:	b	12b58 <__assert_fail@plt+0x1cd0>
   12c84:	mov	r3, #1
   12c88:	mov	r2, #0
   12c8c:	mov	r4, r2
   12c90:	mov	r8, #2
   12c94:	str	r3, [sp, #36]	; 0x24
   12c98:	str	r3, [sp, #40]	; 0x28
   12c9c:	str	r3, [sp, #44]	; 0x2c
   12ca0:	str	r2, [sp, #48]	; 0x30
   12ca4:	str	r3, [sp, #56]	; 0x38
   12ca8:	movw	r3, #24716	; 0x608c
   12cac:	movt	r3, #1
   12cb0:	str	r3, [sp, #60]	; 0x3c
   12cb4:	str	r2, [sp, #68]	; 0x44
   12cb8:	str	r2, [sp, #72]	; 0x48
   12cbc:	b	1285c <__assert_fail@plt+0x19d4>
   12cc0:	mov	r7, #0
   12cc4:	ldr	r3, [sp, #28]
   12cc8:	cmn	r3, #1
   12ccc:	beq	137a4 <__assert_fail@plt+0x291c>
   12cd0:	ldr	r3, [sp, #28]
   12cd4:	subs	r2, r3, #1
   12cd8:	movne	r2, #1
   12cdc:	sub	r3, fp, #2
   12ce0:	cmp	r2, #0
   12ce4:	clz	r3, r3
   12ce8:	lsr	r3, r3, #5
   12cec:	bne	12cf8 <__assert_fail@plt+0x1e70>
   12cf0:	cmp	r9, #0
   12cf4:	beq	13504 <__assert_fail@plt+0x267c>
   12cf8:	mov	r6, #0
   12cfc:	ldr	r2, [sp, #40]	; 0x28
   12d00:	eor	r2, r2, #1
   12d04:	orrs	r3, r3, r2
   12d08:	bne	12ee0 <__assert_fail@plt+0x2058>
   12d0c:	ldr	r2, [sp, #160]	; 0xa0
   12d10:	cmp	r2, #0
   12d14:	beq	12d34 <__assert_fail@plt+0x1eac>
   12d18:	ldr	r0, [sp, #160]	; 0xa0
   12d1c:	ubfx	r1, r5, #5, #8
   12d20:	and	r2, r5, #31
   12d24:	ldr	r1, [r0, r1, lsl #2]
   12d28:	lsr	r2, r1, r2
   12d2c:	tst	r2, #1
   12d30:	bne	12d3c <__assert_fail@plt+0x1eb4>
   12d34:	cmp	r7, #0
   12d38:	beq	12fac <__assert_fail@plt+0x2124>
   12d3c:	ldr	r2, [sp, #44]	; 0x2c
   12d40:	sub	r3, fp, #2
   12d44:	clz	r3, r3
   12d48:	lsr	r3, r3, #5
   12d4c:	cmp	r2, #0
   12d50:	bne	13af8 <__assert_fail@plt+0x2c70>
   12d54:	ldr	r2, [sp, #48]	; 0x30
   12d58:	eor	r2, r2, #1
   12d5c:	ands	r3, r3, r2
   12d60:	beq	12d98 <__assert_fail@plt+0x1f10>
   12d64:	cmp	sl, r4
   12d68:	str	r3, [sp, #48]	; 0x30
   12d6c:	movhi	r2, #39	; 0x27
   12d70:	strbhi	r2, [r8, r4]
   12d74:	add	r2, r4, #1
   12d78:	cmp	sl, r2
   12d7c:	movhi	r1, #36	; 0x24
   12d80:	strbhi	r1, [r8, r2]
   12d84:	add	r2, r4, #2
   12d88:	add	r4, r4, #3
   12d8c:	cmp	sl, r2
   12d90:	movhi	r1, #39	; 0x27
   12d94:	strbhi	r1, [r8, r2]
   12d98:	cmp	r4, sl
   12d9c:	add	r9, r9, #1
   12da0:	movcc	r3, #92	; 0x5c
   12da4:	strbcc	r3, [r8, r4]
   12da8:	add	r4, r4, #1
   12dac:	cmp	r4, sl
   12db0:	ldr	r3, [sp, #36]	; 0x24
   12db4:	strbcc	r5, [r8, r4]
   12db8:	cmp	r6, #0
   12dbc:	add	r4, r4, #1
   12dc0:	moveq	r3, #0
   12dc4:	str	r3, [sp, #36]	; 0x24
   12dc8:	ldr	r3, [sp, #28]
   12dcc:	cmn	r3, #1
   12dd0:	bne	12878 <__assert_fail@plt+0x19f0>
   12dd4:	ldr	r3, [sp, #32]
   12dd8:	ldrb	r6, [r3, r9]
   12ddc:	adds	r6, r6, #0
   12de0:	movne	r6, #1
   12de4:	cmp	r6, #0
   12de8:	bne	1288c <__assert_fail@plt+0x1a04>
   12dec:	str	fp, [sp, #152]	; 0x98
   12df0:	mov	fp, r8
   12df4:	cmp	r4, #0
   12df8:	ldr	r1, [sp, #44]	; 0x2c
   12dfc:	movne	r3, #0
   12e00:	ldr	r8, [sp, #152]	; 0x98
   12e04:	sub	r2, r8, #2
   12e08:	clz	r2, r2
   12e0c:	lsr	r2, r2, #5
   12e10:	andeq	r3, r2, r1
   12e14:	cmp	r3, #0
   12e18:	bne	13ed4 <__assert_fail@plt+0x304c>
   12e1c:	eor	r3, r1, #1
   12e20:	ands	r2, r2, r3
   12e24:	beq	13e00 <__assert_fail@plt+0x2f78>
   12e28:	ldr	r3, [sp, #68]	; 0x44
   12e2c:	cmp	r3, #0
   12e30:	beq	13e04 <__assert_fail@plt+0x2f7c>
   12e34:	ldr	r3, [sp, #36]	; 0x24
   12e38:	cmp	r3, #0
   12e3c:	bne	13e90 <__assert_fail@plt+0x3008>
   12e40:	ldr	r3, [sp, #72]	; 0x48
   12e44:	adds	r3, r3, #0
   12e48:	movne	r3, #1
   12e4c:	cmp	sl, #0
   12e50:	movne	r3, #0
   12e54:	cmp	r3, #0
   12e58:	ldreq	r2, [sp, #68]	; 0x44
   12e5c:	beq	13e04 <__assert_fail@plt+0x2f7c>
   12e60:	ldr	r2, [sp, #72]	; 0x48
   12e64:	str	r3, [sp, #68]	; 0x44
   12e68:	movw	r3, #24716	; 0x608c
   12e6c:	movt	r3, #1
   12e70:	mov	r1, #39	; 0x27
   12e74:	mov	r4, #1
   12e78:	ldr	sl, [sp, #72]	; 0x48
   12e7c:	mov	r8, #2
   12e80:	str	r3, [sp, #60]	; 0x3c
   12e84:	mov	r3, #0
   12e88:	strb	r1, [fp]
   12e8c:	str	r3, [sp, #44]	; 0x2c
   12e90:	str	r4, [sp, #56]	; 0x38
   12e94:	str	r2, [sp, #72]	; 0x48
   12e98:	b	1285c <__assert_fail@plt+0x19d4>
   12e9c:	mov	r7, #0
   12ea0:	cmp	fp, #2
   12ea4:	beq	13784 <__assert_fail@plt+0x28fc>
   12ea8:	ldr	r2, [sp, #40]	; 0x28
   12eac:	ldr	r3, [sp, #56]	; 0x38
   12eb0:	ldr	r1, [sp, #44]	; 0x2c
   12eb4:	cmp	r3, #0
   12eb8:	moveq	r3, #0
   12ebc:	andne	r3, r2, r1
   12ec0:	cmp	r3, #0
   12ec4:	moveq	r5, #92	; 0x5c
   12ec8:	moveq	r3, r5
   12ecc:	bne	13790 <__assert_fail@plt+0x2908>
   12ed0:	ldr	r2, [sp, #40]	; 0x28
   12ed4:	cmp	r2, #0
   12ed8:	bne	13bcc <__assert_fail@plt+0x2d44>
   12edc:	mov	r6, #0
   12ee0:	ldr	r3, [sp, #44]	; 0x2c
   12ee4:	cmp	r3, #0
   12ee8:	beq	1377c <__assert_fail@plt+0x28f4>
   12eec:	mov	r3, #0
   12ef0:	b	12d0c <__assert_fail@plt+0x1e84>
   12ef4:	mov	r7, #0
   12ef8:	cmp	fp, #2
   12efc:	beq	137f4 <__assert_fail@plt+0x296c>
   12f00:	cmp	fp, #5
   12f04:	beq	137b8 <__assert_fail@plt+0x2930>
   12f08:	sub	r3, fp, #2
   12f0c:	mov	r6, #0
   12f10:	clz	r3, r3
   12f14:	mov	r5, #63	; 0x3f
   12f18:	lsr	r3, r3, #5
   12f1c:	b	12cfc <__assert_fail@plt+0x1e74>
   12f20:	mov	r7, #0
   12f24:	cmp	fp, #2
   12f28:	movne	r3, #0
   12f2c:	movne	r5, #39	; 0x27
   12f30:	strne	r6, [sp, #68]	; 0x44
   12f34:	bne	12cfc <__assert_fail@plt+0x1e74>
   12f38:	ldr	r3, [sp, #44]	; 0x2c
   12f3c:	cmp	r3, #0
   12f40:	bne	13bfc <__assert_fail@plt+0x2d74>
   12f44:	ldr	r3, [sp, #72]	; 0x48
   12f48:	cmp	sl, #0
   12f4c:	clz	r3, r3
   12f50:	lsr	r3, r3, #5
   12f54:	moveq	r3, #0
   12f58:	cmp	r3, #0
   12f5c:	bne	13b28 <__assert_fail@plt+0x2ca0>
   12f60:	cmp	sl, r4
   12f64:	movhi	r3, #39	; 0x27
   12f68:	strbhi	r3, [r8, r4]
   12f6c:	add	r3, r4, #1
   12f70:	cmp	sl, r3
   12f74:	movhi	r2, #92	; 0x5c
   12f78:	strbhi	r2, [r8, r3]
   12f7c:	add	r3, r4, #2
   12f80:	cmp	sl, r3
   12f84:	bls	12f90 <__assert_fail@plt+0x2108>
   12f88:	mov	r2, #39	; 0x27
   12f8c:	strb	r2, [r8, r3]
   12f90:	mov	r3, #0
   12f94:	cmp	r7, #0
   12f98:	add	r4, r4, #3
   12f9c:	mov	r5, #39	; 0x27
   12fa0:	str	r3, [sp, #48]	; 0x30
   12fa4:	str	r6, [sp, #68]	; 0x44
   12fa8:	bne	12d3c <__assert_fail@plt+0x1eb4>
   12fac:	ldr	r2, [sp, #48]	; 0x30
   12fb0:	eor	r3, r3, #1
   12fb4:	add	r9, r9, #1
   12fb8:	and	r3, r3, r2
   12fbc:	uxtb	r3, r3
   12fc0:	cmp	r3, #0
   12fc4:	beq	12dac <__assert_fail@plt+0x1f24>
   12fc8:	cmp	sl, r4
   12fcc:	movhi	r3, #39	; 0x27
   12fd0:	strbhi	r3, [r8, r4]
   12fd4:	add	r3, r4, #1
   12fd8:	add	r4, r4, #2
   12fdc:	cmp	sl, r3
   12fe0:	movhi	r2, #39	; 0x27
   12fe4:	strbhi	r2, [r8, r3]
   12fe8:	mov	r3, #0
   12fec:	str	r3, [sp, #48]	; 0x30
   12ff0:	b	12dac <__assert_fail@plt+0x1f24>
   12ff4:	mov	r3, #118	; 0x76
   12ff8:	b	12ed0 <__assert_fail@plt+0x2048>
   12ffc:	mov	r3, #116	; 0x74
   13000:	ldr	r2, [sp, #44]	; 0x2c
   13004:	cmp	fp, #2
   13008:	movne	r2, #0
   1300c:	andeq	r2, r2, #1
   13010:	cmp	r2, #0
   13014:	beq	12ed0 <__assert_fail@plt+0x2048>
   13018:	mov	fp, r8
   1301c:	mov	r8, #2
   13020:	ldr	r3, [sp, #40]	; 0x28
   13024:	cmp	r3, #0
   13028:	movne	r8, #4
   1302c:	mov	lr, #0
   13030:	mov	r0, fp
   13034:	ldr	r2, [sp, #32]
   13038:	ldr	r3, [sp, #156]	; 0x9c
   1303c:	ldr	r1, [sp, #164]	; 0xa4
   13040:	bic	ip, r3, #2
   13044:	ldr	r3, [sp, #28]
   13048:	stm	sp, {r8, ip, lr}
   1304c:	ldr	ip, [sp, #168]	; 0xa8
   13050:	str	r1, [sp, #12]
   13054:	mov	r1, sl
   13058:	str	ip, [sp, #16]
   1305c:	bl	12774 <__assert_fail@plt+0x18ec>
   13060:	mov	r4, r0
   13064:	mov	r0, r4
   13068:	add	sp, sp, #116	; 0x74
   1306c:	ldrd	r4, [sp]
   13070:	ldrd	r6, [sp, #8]
   13074:	ldrd	r8, [sp, #16]
   13078:	ldrd	sl, [sp, #24]
   1307c:	add	sp, sp, #32
   13080:	pop	{pc}		; (ldr pc, [sp], #4)
   13084:	mov	r5, #102	; 0x66
   13088:	ldr	r2, [sp, #44]	; 0x2c
   1308c:	sub	r3, fp, #2
   13090:	clz	r3, r3
   13094:	lsr	r3, r3, #5
   13098:	cmp	r2, #0
   1309c:	bne	13af8 <__assert_fail@plt+0x2c70>
   130a0:	mov	r6, r2
   130a4:	b	12d98 <__assert_fail@plt+0x1f10>
   130a8:	mov	r5, #110	; 0x6e
   130ac:	mov	r6, #0
   130b0:	b	12d3c <__assert_fail@plt+0x1eb4>
   130b4:	mov	r5, #98	; 0x62
   130b8:	b	13088 <__assert_fail@plt+0x2200>
   130bc:	mov	r5, #97	; 0x61
   130c0:	b	13088 <__assert_fail@plt+0x2200>
   130c4:	mov	r7, #0
   130c8:	mov	r6, #0
   130cc:	b	12eec <__assert_fail@plt+0x2064>
   130d0:	mov	r5, #114	; 0x72
   130d4:	b	130ac <__assert_fail@plt+0x2224>
   130d8:	ldr	r3, [sp, #44]	; 0x2c
   130dc:	cmp	r3, #0
   130e0:	bne	13e70 <__assert_fail@plt+0x2fe8>
   130e4:	mov	r7, r3
   130e8:	ldr	r3, [sp, #48]	; 0x30
   130ec:	sub	r2, fp, #2
   130f0:	clz	r2, r2
   130f4:	lsr	r2, r2, #5
   130f8:	eor	r3, r3, #1
   130fc:	ands	r3, r2, r3
   13100:	beq	13b14 <__assert_fail@plt+0x2c8c>
   13104:	cmp	sl, r4
   13108:	movhi	r1, #39	; 0x27
   1310c:	strbhi	r1, [r8, r4]
   13110:	add	r1, r4, #1
   13114:	cmp	sl, r1
   13118:	movhi	r0, #36	; 0x24
   1311c:	strbhi	r0, [r8, r1]
   13120:	add	r1, r4, #2
   13124:	cmp	sl, r1
   13128:	movhi	r0, #39	; 0x27
   1312c:	strbhi	r0, [r8, r1]
   13130:	add	r1, r4, #3
   13134:	cmp	sl, r1
   13138:	bls	13b6c <__assert_fail@plt+0x2ce4>
   1313c:	mov	r4, r1
   13140:	mov	r1, #92	; 0x5c
   13144:	mov	r0, r4
   13148:	str	r3, [sp, #48]	; 0x30
   1314c:	strb	r1, [r8, r4]
   13150:	cmp	fp, #2
   13154:	add	r4, r4, #1
   13158:	beq	13bbc <__assert_fail@plt+0x2d34>
   1315c:	ldr	r1, [sp, #28]
   13160:	add	r3, r9, #1
   13164:	cmp	r3, r1
   13168:	bcs	13180 <__assert_fail@plt+0x22f8>
   1316c:	ldr	r1, [sp, #32]
   13170:	ldrb	r3, [r1, r3]
   13174:	sub	r3, r3, #48	; 0x30
   13178:	cmp	r3, #9
   1317c:	bls	13bd4 <__assert_fail@plt+0x2d4c>
   13180:	mov	r5, #48	; 0x30
   13184:	ldr	r3, [sp, #40]	; 0x28
   13188:	eor	r3, r3, #1
   1318c:	orrs	r2, r2, r3
   13190:	mov	r3, r6
   13194:	moveq	r6, r2
   13198:	beq	12d0c <__assert_fail@plt+0x1e84>
   1319c:	mov	r6, #0
   131a0:	b	12d34 <__assert_fail@plt+0x1eac>
   131a4:	cmp	r9, #0
   131a8:	mov	r2, r7
   131ac:	bne	1374c <__assert_fail@plt+0x28c4>
   131b0:	mov	r6, r7
   131b4:	mov	r3, r9
   131b8:	mov	r7, r2
   131bc:	b	12cfc <__assert_fail@plt+0x1e74>
   131c0:	mov	r2, r7
   131c4:	mov	r6, r7
   131c8:	mov	r3, #0
   131cc:	mov	r7, r2
   131d0:	mov	r5, #32
   131d4:	b	12cfc <__assert_fail@plt+0x1e74>
   131d8:	mov	r6, r7
   131dc:	b	12eec <__assert_fail@plt+0x2064>
   131e0:	mov	r7, #0
   131e4:	ldr	r3, [sp, #64]	; 0x40
   131e8:	cmp	r3, #1
   131ec:	bne	1380c <__assert_fail@plt+0x2984>
   131f0:	bl	10d80 <__ctype_b_loc@plt>
   131f4:	ldr	r2, [r0]
   131f8:	sxth	r3, r5
   131fc:	lsl	r3, r3, #1
   13200:	ldr	r1, [sp, #64]	; 0x40
   13204:	ldrh	r3, [r2, r3]
   13208:	mov	ip, r1
   1320c:	and	r3, r3, #16384	; 0x4000
   13210:	cmp	r3, #0
   13214:	ldr	r3, [sp, #40]	; 0x28
   13218:	movne	r6, #1
   1321c:	moveq	r6, #0
   13220:	movne	r2, #0
   13224:	andeq	r2, r3, #1
   13228:	cmp	r2, #0
   1322c:	bne	13b54 <__assert_fail@plt+0x2ccc>
   13230:	sub	r3, fp, #2
   13234:	clz	r3, r3
   13238:	lsr	r3, r3, #5
   1323c:	b	12cfc <__assert_fail@plt+0x1e74>
   13240:	cmp	r4, #0
   13244:	bne	13ee4 <__assert_fail@plt+0x305c>
   13248:	str	r4, [sp, #40]	; 0x28
   1324c:	cmp	sl, #0
   13250:	bne	13f14 <__assert_fail@plt+0x308c>
   13254:	mov	r3, #1
   13258:	movw	r2, #24716	; 0x608c
   1325c:	movt	r2, #1
   13260:	mov	r4, r3
   13264:	mov	r8, #2
   13268:	str	r3, [sp, #36]	; 0x24
   1326c:	str	sl, [sp, #44]	; 0x2c
   13270:	str	sl, [sp, #48]	; 0x30
   13274:	str	r3, [sp, #56]	; 0x38
   13278:	str	r2, [sp, #60]	; 0x3c
   1327c:	str	sl, [sp, #68]	; 0x44
   13280:	str	sl, [sp, #72]	; 0x48
   13284:	b	1285c <__assert_fail@plt+0x19d4>
   13288:	ldr	r3, [sp, #32]
   1328c:	ldrb	r5, [r3, r9]
   13290:	cmp	r5, #126	; 0x7e
   13294:	ldrls	pc, [pc, r5, lsl #2]
   13298:	b	131e4 <__assert_fail@plt+0x235c>
   1329c:	andeq	r3, r1, r0, asr #9
   132a0:	andeq	r3, r1, r4, ror #3
   132a4:	andeq	r3, r1, r4, ror #3
   132a8:	andeq	r3, r1, r4, ror #3
   132ac:	andeq	r3, r1, r4, ror #3
   132b0:	andeq	r3, r1, r4, ror #3
   132b4:	andeq	r3, r1, r4, ror #3
   132b8:			; <UNDEFINED> instruction: 0x000134b8
   132bc:			; <UNDEFINED> instruction: 0x000134b0
   132c0:	strdeq	r2, [r1], -ip
   132c4:	andeq	r3, r1, r8, lsr #9
   132c8:	strdeq	r2, [r1], -r4
   132cc:	andeq	r3, r1, r0, lsr #9
   132d0:	muleq	r1, r8, r4
   132d4:	andeq	r3, r1, r4, ror #3
   132d8:	andeq	r3, r1, r4, ror #3
   132dc:	andeq	r3, r1, r4, ror #3
   132e0:	andeq	r3, r1, r4, ror #3
   132e4:	andeq	r3, r1, r4, ror #3
   132e8:	andeq	r3, r1, r4, ror #3
   132ec:	andeq	r3, r1, r4, ror #3
   132f0:	andeq	r3, r1, r4, ror #3
   132f4:	andeq	r3, r1, r4, ror #3
   132f8:	andeq	r3, r1, r4, ror #3
   132fc:	andeq	r3, r1, r4, ror #3
   13300:	andeq	r3, r1, r4, ror #3
   13304:	andeq	r3, r1, r4, ror #3
   13308:	andeq	r3, r1, r4, ror #3
   1330c:	andeq	r3, r1, r4, ror #3
   13310:	andeq	r3, r1, r4, ror #3
   13314:	andeq	r3, r1, r4, ror #3
   13318:	andeq	r3, r1, r4, ror #3
   1331c:	andeq	r3, r1, r4, lsl r5
   13320:	strdeq	r3, [r1], -r4
   13324:	strdeq	r3, [r1], -r4
   13328:	andeq	r3, r1, r4, ror #9
   1332c:	strdeq	r3, [r1], -r4
   13330:	andeq	r3, r1, r0, lsr r2
   13334:	strdeq	r3, [r1], -r4
   13338:	andeq	r2, r1, r4, lsr #30
   1333c:	strdeq	r3, [r1], -r4
   13340:	strdeq	r3, [r1], -r4
   13344:	strdeq	r3, [r1], -r4
   13348:	andeq	r3, r1, r0, lsr r2
   1334c:	andeq	r3, r1, r0, lsr r2
   13350:	andeq	r3, r1, r0, lsr r2
   13354:	andeq	r3, r1, r0, lsr r2
   13358:	andeq	r3, r1, r0, lsr r2
   1335c:	andeq	r3, r1, r0, lsr r2
   13360:	andeq	r3, r1, r0, lsr r2
   13364:	andeq	r3, r1, r0, lsr r2
   13368:	andeq	r3, r1, r0, lsr r2
   1336c:	andeq	r3, r1, r0, lsr r2
   13370:	andeq	r3, r1, r0, lsr r2
   13374:	andeq	r3, r1, r0, lsr r2
   13378:	andeq	r3, r1, r0, lsr r2
   1337c:	andeq	r3, r1, r0, lsr r2
   13380:	andeq	r3, r1, r0, lsr r2
   13384:	andeq	r3, r1, r0, lsr r2
   13388:	strdeq	r3, [r1], -r4
   1338c:	strdeq	r3, [r1], -r4
   13390:	strdeq	r3, [r1], -r4
   13394:	strdeq	r3, [r1], -r4
   13398:	strdeq	r2, [r1], -r8
   1339c:	andeq	r3, r1, r4, ror #3
   133a0:	andeq	r3, r1, r0, lsr r2
   133a4:	andeq	r3, r1, r0, lsr r2
   133a8:	andeq	r3, r1, r0, lsr r2
   133ac:	andeq	r3, r1, r0, lsr r2
   133b0:	andeq	r3, r1, r0, lsr r2
   133b4:	andeq	r3, r1, r0, lsr r2
   133b8:	andeq	r3, r1, r0, lsr r2
   133bc:	andeq	r3, r1, r0, lsr r2
   133c0:	andeq	r3, r1, r0, lsr r2
   133c4:	andeq	r3, r1, r0, lsr r2
   133c8:	andeq	r3, r1, r0, lsr r2
   133cc:	andeq	r3, r1, r0, lsr r2
   133d0:	andeq	r3, r1, r0, lsr r2
   133d4:	andeq	r3, r1, r0, lsr r2
   133d8:	andeq	r3, r1, r0, lsr r2
   133dc:	andeq	r3, r1, r0, lsr r2
   133e0:	andeq	r3, r1, r0, lsr r2
   133e4:	andeq	r3, r1, r0, lsr r2
   133e8:	andeq	r3, r1, r0, lsr r2
   133ec:	andeq	r3, r1, r0, lsr r2
   133f0:	andeq	r3, r1, r0, lsr r2
   133f4:	andeq	r3, r1, r0, lsr r2
   133f8:	andeq	r3, r1, r0, lsr r2
   133fc:	andeq	r3, r1, r0, lsr r2
   13400:	andeq	r3, r1, r0, lsr r2
   13404:	andeq	r3, r1, r0, lsr r2
   13408:	strdeq	r3, [r1], -r4
   1340c:	andeq	r2, r1, r0, lsr #29
   13410:	andeq	r3, r1, r0, lsr r2
   13414:	strdeq	r3, [r1], -r4
   13418:	andeq	r3, r1, r0, lsr r2
   1341c:	strdeq	r3, [r1], -r4
   13420:	andeq	r3, r1, r0, lsr r2
   13424:	andeq	r3, r1, r0, lsr r2
   13428:	andeq	r3, r1, r0, lsr r2
   1342c:	andeq	r3, r1, r0, lsr r2
   13430:	andeq	r3, r1, r0, lsr r2
   13434:	andeq	r3, r1, r0, lsr r2
   13438:	andeq	r3, r1, r0, lsr r2
   1343c:	andeq	r3, r1, r0, lsr r2
   13440:	andeq	r3, r1, r0, lsr r2
   13444:	andeq	r3, r1, r0, lsr r2
   13448:	andeq	r3, r1, r0, lsr r2
   1344c:	andeq	r3, r1, r0, lsr r2
   13450:	andeq	r3, r1, r0, lsr r2
   13454:	andeq	r3, r1, r0, lsr r2
   13458:	andeq	r3, r1, r0, lsr r2
   1345c:	andeq	r3, r1, r0, lsr r2
   13460:	andeq	r3, r1, r0, lsr r2
   13464:	andeq	r3, r1, r0, lsr r2
   13468:	andeq	r3, r1, r0, lsr r2
   1346c:	andeq	r3, r1, r0, lsr r2
   13470:	andeq	r3, r1, r0, lsr r2
   13474:	andeq	r3, r1, r0, lsr r2
   13478:	andeq	r3, r1, r0, lsr r2
   1347c:	andeq	r3, r1, r0, lsr r2
   13480:	andeq	r3, r1, r0, lsr r2
   13484:	andeq	r3, r1, r0, lsr r2
   13488:	andeq	r2, r1, r4, asr #25
   1348c:	strdeq	r3, [r1], -r4
   13490:	andeq	r2, r1, r4, asr #25
   13494:	andeq	r3, r1, r4, ror #9
   13498:	mov	r3, #114	; 0x72
   1349c:	b	13000 <__assert_fail@plt+0x2178>
   134a0:	mov	r3, #102	; 0x66
   134a4:	b	12ed0 <__assert_fail@plt+0x2048>
   134a8:	mov	r3, #110	; 0x6e
   134ac:	b	13000 <__assert_fail@plt+0x2178>
   134b0:	mov	r3, #98	; 0x62
   134b4:	b	12ed0 <__assert_fail@plt+0x2048>
   134b8:	mov	r3, #97	; 0x61
   134bc:	b	12ed0 <__assert_fail@plt+0x2048>
   134c0:	ldr	r3, [sp, #40]	; 0x28
   134c4:	cmp	r3, #0
   134c8:	bne	130d8 <__assert_fail@plt+0x2250>
   134cc:	ldr	r3, [sp, #156]	; 0x9c
   134d0:	tst	r3, #1
   134d4:	addne	r9, r9, #1
   134d8:	bne	1286c <__assert_fail@plt+0x19e4>
   134dc:	ldr	r7, [sp, #40]	; 0x28
   134e0:	b	12edc <__assert_fail@plt+0x2054>
   134e4:	sub	r3, fp, #2
   134e8:	clz	r3, r3
   134ec:	lsr	r3, r3, #5
   134f0:	b	12cf0 <__assert_fail@plt+0x1e68>
   134f4:	sub	r3, fp, #2
   134f8:	mov	r6, #0
   134fc:	clz	r3, r3
   13500:	lsr	r3, r3, #5
   13504:	ldr	r2, [sp, #44]	; 0x2c
   13508:	tst	r2, r3
   1350c:	beq	12cfc <__assert_fail@plt+0x1e74>
   13510:	b	13018 <__assert_fail@plt+0x2190>
   13514:	sub	r3, fp, #2
   13518:	clz	r3, r3
   1351c:	lsr	r3, r3, #5
   13520:	b	13504 <__assert_fail@plt+0x267c>
   13524:	ldr	r3, [sp, #52]	; 0x34
   13528:	ldrb	r5, [r3]
   1352c:	cmp	r5, #126	; 0x7e
   13530:	ldrls	pc, [pc, r5, lsl #2]
   13534:	b	131e0 <__assert_fail@plt+0x2358>
   13538:	ldrdeq	r3, [r1], -r8
   1353c:	andeq	r3, r1, r0, ror #3
   13540:	andeq	r3, r1, r0, ror #3
   13544:	andeq	r3, r1, r0, ror #3
   13548:	andeq	r3, r1, r0, ror #3
   1354c:	andeq	r3, r1, r0, ror #3
   13550:	andeq	r3, r1, r0, ror #3
   13554:	strheq	r3, [r1], -ip
   13558:	strheq	r3, [r1], -r4
   1355c:	andeq	r3, r1, r0, ror r7
   13560:	andeq	r3, r1, r8, lsr #1
   13564:	andeq	r3, r1, r4, ror #14
   13568:	andeq	r3, r1, r4, lsl #1
   1356c:	ldrdeq	r3, [r1], -r0
   13570:	andeq	r3, r1, r0, ror #3
   13574:	andeq	r3, r1, r0, ror #3
   13578:	andeq	r3, r1, r0, ror #3
   1357c:	andeq	r3, r1, r0, ror #3
   13580:	andeq	r3, r1, r0, ror #3
   13584:	andeq	r3, r1, r0, ror #3
   13588:	andeq	r3, r1, r0, ror #3
   1358c:	andeq	r3, r1, r0, ror #3
   13590:	andeq	r3, r1, r0, ror #3
   13594:	andeq	r3, r1, r0, ror #3
   13598:	andeq	r3, r1, r0, ror #3
   1359c:	andeq	r3, r1, r0, ror #3
   135a0:	andeq	r3, r1, r0, ror #3
   135a4:	andeq	r3, r1, r0, ror #3
   135a8:	andeq	r3, r1, r0, ror #3
   135ac:	andeq	r3, r1, r0, ror #3
   135b0:	andeq	r3, r1, r0, ror #3
   135b4:	andeq	r3, r1, r0, ror #3
   135b8:	andeq	r3, r1, ip, asr r7
   135bc:	andeq	r3, r1, r4, asr #1
   135c0:	andeq	r3, r1, r4, asr #1
   135c4:	andeq	r3, r1, r0, asr #14
   135c8:	andeq	r3, r1, r4, asr #1
   135cc:	andeq	r3, r1, r4, lsr r7
   135d0:	andeq	r3, r1, r4, asr #1
   135d4:	andeq	r2, r1, r0, lsr #30
   135d8:	andeq	r3, r1, r4, asr #1
   135dc:	andeq	r3, r1, r4, asr #1
   135e0:	andeq	r3, r1, r4, asr #1
   135e4:	andeq	r3, r1, r4, lsr r7
   135e8:	andeq	r3, r1, r4, lsr r7
   135ec:	andeq	r3, r1, r4, lsr r7
   135f0:	andeq	r3, r1, r4, lsr r7
   135f4:	andeq	r3, r1, r4, lsr r7
   135f8:	andeq	r3, r1, r4, lsr r7
   135fc:	andeq	r3, r1, r4, lsr r7
   13600:	andeq	r3, r1, r4, lsr r7
   13604:	andeq	r3, r1, r4, lsr r7
   13608:	andeq	r3, r1, r4, lsr r7
   1360c:	andeq	r3, r1, r4, lsr r7
   13610:	andeq	r3, r1, r4, lsr r7
   13614:	andeq	r3, r1, r4, lsr r7
   13618:	andeq	r3, r1, r4, lsr r7
   1361c:	andeq	r3, r1, r4, lsr r7
   13620:	andeq	r3, r1, r4, lsr r7
   13624:	andeq	r3, r1, r4, asr #1
   13628:	andeq	r3, r1, r4, asr #1
   1362c:	andeq	r3, r1, r4, asr #1
   13630:	andeq	r3, r1, r4, asr #1
   13634:	strdeq	r2, [r1], -r4
   13638:	andeq	r3, r1, r0, ror #3
   1363c:	andeq	r3, r1, r4, lsr r7
   13640:	andeq	r3, r1, r4, lsr r7
   13644:	andeq	r3, r1, r4, lsr r7
   13648:	andeq	r3, r1, r4, lsr r7
   1364c:	andeq	r3, r1, r4, lsr r7
   13650:	andeq	r3, r1, r4, lsr r7
   13654:	andeq	r3, r1, r4, lsr r7
   13658:	andeq	r3, r1, r4, lsr r7
   1365c:	andeq	r3, r1, r4, lsr r7
   13660:	andeq	r3, r1, r4, lsr r7
   13664:	andeq	r3, r1, r4, lsr r7
   13668:	andeq	r3, r1, r4, lsr r7
   1366c:	andeq	r3, r1, r4, lsr r7
   13670:	andeq	r3, r1, r4, lsr r7
   13674:	andeq	r3, r1, r4, lsr r7
   13678:	andeq	r3, r1, r4, lsr r7
   1367c:	andeq	r3, r1, r4, lsr r7
   13680:	andeq	r3, r1, r4, lsr r7
   13684:	andeq	r3, r1, r4, lsr r7
   13688:	andeq	r3, r1, r4, lsr r7
   1368c:	andeq	r3, r1, r4, lsr r7
   13690:	andeq	r3, r1, r4, lsr r7
   13694:	andeq	r3, r1, r4, lsr r7
   13698:	andeq	r3, r1, r4, lsr r7
   1369c:	andeq	r3, r1, r4, lsr r7
   136a0:	andeq	r3, r1, r4, lsr r7
   136a4:	andeq	r3, r1, r4, asr #1
   136a8:	muleq	r1, ip, lr
   136ac:	andeq	r3, r1, r4, lsr r7
   136b0:	andeq	r3, r1, r4, asr #1
   136b4:	andeq	r3, r1, r4, lsr r7
   136b8:	andeq	r3, r1, r4, asr #1
   136bc:	andeq	r3, r1, r4, lsr r7
   136c0:	andeq	r3, r1, r4, lsr r7
   136c4:	andeq	r3, r1, r4, lsr r7
   136c8:	andeq	r3, r1, r4, lsr r7
   136cc:	andeq	r3, r1, r4, lsr r7
   136d0:	andeq	r3, r1, r4, lsr r7
   136d4:	andeq	r3, r1, r4, lsr r7
   136d8:	andeq	r3, r1, r4, lsr r7
   136dc:	andeq	r3, r1, r4, lsr r7
   136e0:	andeq	r3, r1, r4, lsr r7
   136e4:	andeq	r3, r1, r4, lsr r7
   136e8:	andeq	r3, r1, r4, lsr r7
   136ec:	andeq	r3, r1, r4, lsr r7
   136f0:	andeq	r3, r1, r4, lsr r7
   136f4:	andeq	r3, r1, r4, lsr r7
   136f8:	andeq	r3, r1, r4, lsr r7
   136fc:	andeq	r3, r1, r4, lsr r7
   13700:	andeq	r3, r1, r4, lsr r7
   13704:	andeq	r3, r1, r4, lsr r7
   13708:	andeq	r3, r1, r4, lsr r7
   1370c:	andeq	r3, r1, r4, lsr r7
   13710:	andeq	r3, r1, r4, lsr r7
   13714:	andeq	r3, r1, r4, lsr r7
   13718:	andeq	r3, r1, r4, lsr r7
   1371c:	andeq	r3, r1, r4, lsr r7
   13720:	andeq	r3, r1, r4, lsr r7
   13724:	andeq	r2, r1, r0, asr #25
   13728:	andeq	r3, r1, r4, asr #1
   1372c:	andeq	r2, r1, r0, asr #25
   13730:	andeq	r3, r1, r0, asr #14
   13734:	mov	r6, r7
   13738:	mov	r7, #0
   1373c:	b	12eec <__assert_fail@plt+0x2064>
   13740:	cmp	r9, #0
   13744:	mov	r2, #0
   13748:	beq	131b0 <__assert_fail@plt+0x2328>
   1374c:	mov	r6, #0
   13750:	mov	r7, r2
   13754:	mov	r3, r6
   13758:	b	12d0c <__assert_fail@plt+0x1e84>
   1375c:	mov	r2, #0
   13760:	b	131c4 <__assert_fail@plt+0x233c>
   13764:	mov	r7, #0
   13768:	mov	r3, #118	; 0x76
   1376c:	b	12ed0 <__assert_fail@plt+0x2048>
   13770:	mov	r7, #0
   13774:	mov	r3, #116	; 0x74
   13778:	b	13000 <__assert_fail@plt+0x2178>
   1377c:	ldr	r3, [sp, #44]	; 0x2c
   13780:	b	12d34 <__assert_fail@plt+0x1eac>
   13784:	ldr	r3, [sp, #44]	; 0x2c
   13788:	cmp	r3, #0
   1378c:	bne	13bfc <__assert_fail@plt+0x2d74>
   13790:	add	r9, r9, #1
   13794:	mov	r6, #0
   13798:	ldr	r3, [sp, #48]	; 0x30
   1379c:	mov	r5, #92	; 0x5c
   137a0:	b	12fc0 <__assert_fail@plt+0x2138>
   137a4:	ldr	r3, [sp, #32]
   137a8:	ldrb	r2, [r3, #1]
   137ac:	adds	r2, r2, #0
   137b0:	movne	r2, #1
   137b4:	b	12cdc <__assert_fail@plt+0x1e54>
   137b8:	ldr	r3, [sp, #156]	; 0x9c
   137bc:	ands	r3, r3, #4
   137c0:	beq	137e8 <__assert_fail@plt+0x2960>
   137c4:	ldr	r2, [sp, #28]
   137c8:	add	r3, r9, #2
   137cc:	cmp	r3, r2
   137d0:	bcs	137e4 <__assert_fail@plt+0x295c>
   137d4:	ldr	r2, [sp, #52]	; 0x34
   137d8:	ldrb	r5, [r2, #1]
   137dc:	cmp	r5, #63	; 0x3f
   137e0:	beq	13c60 <__assert_fail@plt+0x2dd8>
   137e4:	mov	r3, #0
   137e8:	mov	r5, #63	; 0x3f
   137ec:	mov	r6, r3
   137f0:	b	12cfc <__assert_fail@plt+0x1e74>
   137f4:	ldr	r3, [sp, #44]	; 0x2c
   137f8:	cmp	r3, #0
   137fc:	bne	13bfc <__assert_fail@plt+0x2d74>
   13800:	mov	r6, r3
   13804:	mov	r5, #63	; 0x3f
   13808:	b	12d34 <__assert_fail@plt+0x1eac>
   1380c:	ldr	r1, [sp, #28]
   13810:	mov	r2, #0
   13814:	mov	r3, #0
   13818:	strd	r2, [sp, #104]	; 0x68
   1381c:	cmn	r1, #1
   13820:	bne	13830 <__assert_fail@plt+0x29a8>
   13824:	ldr	r0, [sp, #32]
   13828:	bl	10d98 <strlen@plt>
   1382c:	str	r0, [sp, #28]
   13830:	str	r8, [sp, #76]	; 0x4c
   13834:	mov	r3, #0
   13838:	str	sl, [sp, #80]	; 0x50
   1383c:	ldr	sl, [sp, #32]
   13840:	str	r5, [sp, #84]	; 0x54
   13844:	mov	r5, r3
   13848:	ldr	r8, [sp, #44]	; 0x2c
   1384c:	str	r7, [sp, #88]	; 0x58
   13850:	str	r4, [sp, #92]	; 0x5c
   13854:	ldr	r2, [sp, #28]
   13858:	add	r4, r9, r5
   1385c:	add	r3, sp, #104	; 0x68
   13860:	add	r7, sl, r4
   13864:	add	r0, sp, #100	; 0x64
   13868:	mov	r1, r7
   1386c:	sub	r2, r2, r4
   13870:	bl	15438 <__assert_fail@plt+0x45b0>
   13874:	subs	r1, r0, #0
   13878:	beq	138c4 <__assert_fail@plt+0x2a3c>
   1387c:	cmn	r1, #1
   13880:	beq	13c3c <__assert_fail@plt+0x2db4>
   13884:	cmn	r1, #2
   13888:	beq	13d5c <__assert_fail@plt+0x2ed4>
   1388c:	cmp	fp, #2
   13890:	movne	r3, #0
   13894:	andeq	r3, r8, #1
   13898:	cmp	r3, #0
   1389c:	bne	13a28 <__assert_fail@plt+0x2ba0>
   138a0:	ldr	r0, [sp, #100]	; 0x64
   138a4:	add	r5, r5, r1
   138a8:	bl	10cf0 <iswprint@plt>
   138ac:	cmp	r0, #0
   138b0:	add	r0, sp, #104	; 0x68
   138b4:	moveq	r6, #0
   138b8:	bl	10ca8 <mbsinit@plt>
   138bc:	cmp	r0, #0
   138c0:	beq	13854 <__assert_fail@plt+0x29cc>
   138c4:	ldr	r3, [sp, #40]	; 0x28
   138c8:	mov	ip, r5
   138cc:	eor	r2, r6, #1
   138d0:	ldr	r8, [sp, #76]	; 0x4c
   138d4:	ldr	sl, [sp, #80]	; 0x50
   138d8:	and	r2, r2, r3
   138dc:	ldr	r5, [sp, #84]	; 0x54
   138e0:	ldr	r7, [sp, #88]	; 0x58
   138e4:	ldr	r4, [sp, #92]	; 0x5c
   138e8:	cmp	ip, #1
   138ec:	bls	13228 <__assert_fail@plt+0x23a0>
   138f0:	add	r1, ip, r9
   138f4:	mov	r0, #39	; 0x27
   138f8:	ldr	lr, [sp, #52]	; 0x34
   138fc:	mov	ip, #0
   13900:	str	r6, [sp, #52]	; 0x34
   13904:	ldr	r6, [sp, #48]	; 0x30
   13908:	b	139c4 <__assert_fail@plt+0x2b3c>
   1390c:	ldr	ip, [sp, #44]	; 0x2c
   13910:	sub	r3, fp, #2
   13914:	clz	r3, r3
   13918:	lsr	r3, r3, #5
   1391c:	cmp	ip, #0
   13920:	bne	13b34 <__assert_fail@plt+0x2cac>
   13924:	eor	ip, r6, #1
   13928:	ands	r3, r3, ip
   1392c:	beq	1395c <__assert_fail@plt+0x2ad4>
   13930:	cmp	sl, r4
   13934:	add	ip, r4, #1
   13938:	strbhi	r0, [r8, r4]
   1393c:	cmp	sl, ip
   13940:	movhi	r6, #36	; 0x24
   13944:	strbhi	r6, [r8, ip]
   13948:	add	ip, r4, #2
   1394c:	mov	r6, r3
   13950:	cmp	sl, ip
   13954:	add	r4, r4, #3
   13958:	strbhi	r0, [r8, ip]
   1395c:	cmp	sl, r4
   13960:	movhi	r3, #92	; 0x5c
   13964:	strbhi	r3, [r8, r4]
   13968:	add	r3, r4, #1
   1396c:	cmp	sl, r3
   13970:	bls	13980 <__assert_fail@plt+0x2af8>
   13974:	lsr	ip, r5, #6
   13978:	add	ip, ip, #48	; 0x30
   1397c:	strb	ip, [r8, r3]
   13980:	add	r3, r4, #2
   13984:	cmp	sl, r3
   13988:	bls	13998 <__assert_fail@plt+0x2b10>
   1398c:	ubfx	ip, r5, #3, #3
   13990:	add	ip, ip, #48	; 0x30
   13994:	strb	ip, [r8, r3]
   13998:	add	r9, r9, #1
   1399c:	and	r5, r5, #7
   139a0:	cmp	r9, r1
   139a4:	add	r5, r5, #48	; 0x30
   139a8:	add	r4, r4, #3
   139ac:	bcs	13b60 <__assert_fail@plt+0x2cd8>
   139b0:	mov	ip, r2
   139b4:	cmp	sl, r4
   139b8:	strbhi	r5, [r8, r4]
   139bc:	add	r4, r4, #1
   139c0:	ldrb	r5, [lr, #1]!
   139c4:	cmp	r2, #0
   139c8:	bne	1390c <__assert_fail@plt+0x2a84>
   139cc:	eor	r3, ip, #1
   139d0:	cmp	r7, #0
   139d4:	and	r3, r3, r6
   139d8:	uxtb	r3, r3
   139dc:	beq	139f0 <__assert_fail@plt+0x2b68>
   139e0:	cmp	sl, r4
   139e4:	movhi	r7, #92	; 0x5c
   139e8:	strbhi	r7, [r8, r4]
   139ec:	add	r4, r4, #1
   139f0:	add	r9, r9, #1
   139f4:	cmp	r9, r1
   139f8:	bcs	13b48 <__assert_fail@plt+0x2cc0>
   139fc:	cmp	r3, #0
   13a00:	beq	13b80 <__assert_fail@plt+0x2cf8>
   13a04:	cmp	sl, r4
   13a08:	add	r3, r4, #1
   13a0c:	mov	r7, #0
   13a10:	strbhi	r0, [r8, r4]
   13a14:	cmp	sl, r3
   13a18:	add	r4, r4, #2
   13a1c:	mov	r6, r7
   13a20:	strbhi	r0, [r8, r3]
   13a24:	b	139b4 <__assert_fail@plt+0x2b2c>
   13a28:	cmp	r1, #1
   13a2c:	beq	138a0 <__assert_fail@plt+0x2a18>
   13a30:	add	r2, r4, #1
   13a34:	add	r3, sl, r1
   13a38:	add	r2, sl, r2
   13a3c:	add	r4, r3, r4
   13a40:	ldrb	r3, [r2], #1
   13a44:	sub	r3, r3, #91	; 0x5b
   13a48:	cmp	r3, #33	; 0x21
   13a4c:	ldrls	pc, [pc, r3, lsl #2]
   13a50:	b	13adc <__assert_fail@plt+0x2c54>
   13a54:	andeq	r3, r1, r8, ror #21
   13a58:	andeq	r3, r1, r8, ror #21
   13a5c:	ldrdeq	r3, [r1], -ip
   13a60:	andeq	r3, r1, r8, ror #21
   13a64:	ldrdeq	r3, [r1], -ip
   13a68:	andeq	r3, r1, r8, ror #21
   13a6c:	ldrdeq	r3, [r1], -ip
   13a70:	ldrdeq	r3, [r1], -ip
   13a74:	ldrdeq	r3, [r1], -ip
   13a78:	ldrdeq	r3, [r1], -ip
   13a7c:	ldrdeq	r3, [r1], -ip
   13a80:	ldrdeq	r3, [r1], -ip
   13a84:	ldrdeq	r3, [r1], -ip
   13a88:	ldrdeq	r3, [r1], -ip
   13a8c:	ldrdeq	r3, [r1], -ip
   13a90:	ldrdeq	r3, [r1], -ip
   13a94:	ldrdeq	r3, [r1], -ip
   13a98:	ldrdeq	r3, [r1], -ip
   13a9c:	ldrdeq	r3, [r1], -ip
   13aa0:	ldrdeq	r3, [r1], -ip
   13aa4:	ldrdeq	r3, [r1], -ip
   13aa8:	ldrdeq	r3, [r1], -ip
   13aac:	ldrdeq	r3, [r1], -ip
   13ab0:	ldrdeq	r3, [r1], -ip
   13ab4:	ldrdeq	r3, [r1], -ip
   13ab8:	ldrdeq	r3, [r1], -ip
   13abc:	ldrdeq	r3, [r1], -ip
   13ac0:	ldrdeq	r3, [r1], -ip
   13ac4:	ldrdeq	r3, [r1], -ip
   13ac8:	ldrdeq	r3, [r1], -ip
   13acc:	ldrdeq	r3, [r1], -ip
   13ad0:	ldrdeq	r3, [r1], -ip
   13ad4:	ldrdeq	r3, [r1], -ip
   13ad8:	andeq	r3, r1, r8, ror #21
   13adc:	cmp	r4, r2
   13ae0:	bne	13a40 <__assert_fail@plt+0x2bb8>
   13ae4:	b	138a0 <__assert_fail@plt+0x2a18>
   13ae8:	mov	r8, #2
   13aec:	ldr	fp, [sp, #76]	; 0x4c
   13af0:	ldr	sl, [sp, #80]	; 0x50
   13af4:	b	13020 <__assert_fail@plt+0x2198>
   13af8:	ldr	r2, [sp, #40]	; 0x28
   13afc:	str	fp, [sp, #152]	; 0x98
   13b00:	mov	fp, r8
   13b04:	ldr	r8, [sp, #152]	; 0x98
   13b08:	and	r2, r2, r3
   13b0c:	str	r2, [sp, #40]	; 0x28
   13b10:	b	13020 <__assert_fail@plt+0x2198>
   13b14:	cmp	sl, r4
   13b18:	movls	r0, r4
   13b1c:	bls	13150 <__assert_fail@plt+0x22c8>
   13b20:	ldr	r3, [sp, #48]	; 0x30
   13b24:	b	13140 <__assert_fail@plt+0x22b8>
   13b28:	str	sl, [sp, #72]	; 0x48
   13b2c:	ldr	sl, [sp, #44]	; 0x2c
   13b30:	b	12f90 <__assert_fail@plt+0x2108>
   13b34:	str	r3, [sp, #40]	; 0x28
   13b38:	str	fp, [sp, #152]	; 0x98
   13b3c:	mov	fp, r8
   13b40:	ldr	r8, [sp, #152]	; 0x98
   13b44:	b	13020 <__assert_fail@plt+0x2198>
   13b48:	str	r6, [sp, #48]	; 0x30
   13b4c:	ldr	r6, [sp, #52]	; 0x34
   13b50:	b	12fc0 <__assert_fail@plt+0x2138>
   13b54:	mov	r6, #0
   13b58:	ldr	r2, [sp, #40]	; 0x28
   13b5c:	b	138f0 <__assert_fail@plt+0x2a68>
   13b60:	str	r6, [sp, #48]	; 0x30
   13b64:	ldr	r6, [sp, #52]	; 0x34
   13b68:	b	12dac <__assert_fail@plt+0x1f24>
   13b6c:	add	r4, r4, #4
   13b70:	mov	r6, #0
   13b74:	str	r3, [sp, #48]	; 0x30
   13b78:	mov	r5, #48	; 0x30
   13b7c:	b	12d34 <__assert_fail@plt+0x1eac>
   13b80:	mov	r7, r3
   13b84:	b	139b4 <__assert_fail@plt+0x2b2c>
   13b88:	mov	r3, #1
   13b8c:	movw	r2, #24696	; 0x6078
   13b90:	movt	r2, #1
   13b94:	mov	r4, r3
   13b98:	str	r3, [sp, #36]	; 0x24
   13b9c:	str	r3, [sp, #40]	; 0x28
   13ba0:	str	sl, [sp, #44]	; 0x2c
   13ba4:	str	sl, [sp, #48]	; 0x30
   13ba8:	str	r3, [sp, #56]	; 0x38
   13bac:	str	r2, [sp, #60]	; 0x3c
   13bb0:	str	sl, [sp, #68]	; 0x44
   13bb4:	str	sl, [sp, #72]	; 0x48
   13bb8:	b	1285c <__assert_fail@plt+0x19d4>
   13bbc:	mov	r3, r6
   13bc0:	mov	r5, #48	; 0x30
   13bc4:	mov	r6, #0
   13bc8:	b	12d34 <__assert_fail@plt+0x1eac>
   13bcc:	mov	r5, r3
   13bd0:	b	130ac <__assert_fail@plt+0x2224>
   13bd4:	cmp	sl, r4
   13bd8:	mov	r5, #48	; 0x30
   13bdc:	movhi	r3, #48	; 0x30
   13be0:	strbhi	r3, [r8, r4]
   13be4:	add	r3, r0, #2
   13be8:	add	r4, r0, #3
   13bec:	cmp	sl, r3
   13bf0:	movhi	r1, #48	; 0x30
   13bf4:	strbhi	r1, [r8, r3]
   13bf8:	b	13184 <__assert_fail@plt+0x22fc>
   13bfc:	str	fp, [sp, #152]	; 0x98
   13c00:	mov	fp, r8
   13c04:	ldr	r8, [sp, #152]	; 0x98
   13c08:	b	13020 <__assert_fail@plt+0x2198>
   13c0c:	ldr	r3, [sp, #164]	; 0xa4
   13c10:	ldrb	r3, [r3]
   13c14:	cmp	r3, #0
   13c18:	beq	1282c <__assert_fail@plt+0x19a4>
   13c1c:	ldr	r2, [sp, #164]	; 0xa4
   13c20:	cmp	sl, r4
   13c24:	strbhi	r3, [fp, r4]
   13c28:	add	r4, r4, #1
   13c2c:	ldrb	r3, [r2, #1]!
   13c30:	cmp	r3, #0
   13c34:	bne	13c20 <__assert_fail@plt+0x2d98>
   13c38:	b	1282c <__assert_fail@plt+0x19a4>
   13c3c:	mov	ip, r5
   13c40:	mov	r6, #0
   13c44:	ldr	r2, [sp, #40]	; 0x28
   13c48:	ldr	r8, [sp, #76]	; 0x4c
   13c4c:	ldr	sl, [sp, #80]	; 0x50
   13c50:	ldr	r5, [sp, #84]	; 0x54
   13c54:	ldr	r7, [sp, #88]	; 0x58
   13c58:	ldr	r4, [sp, #92]	; 0x5c
   13c5c:	b	138e8 <__assert_fail@plt+0x2a60>
   13c60:	ldr	r2, [sp, #32]
   13c64:	ldrb	r1, [r2, r3]
   13c68:	sub	r2, r1, #33	; 0x21
   13c6c:	cmp	r2, #29
   13c70:	ldrls	pc, [pc, r2, lsl #2]
   13c74:	b	13d50 <__assert_fail@plt+0x2ec8>
   13c78:	strdeq	r3, [r1], -r0
   13c7c:	andeq	r3, r1, r0, asr sp
   13c80:	andeq	r3, r1, r0, asr sp
   13c84:	andeq	r3, r1, r0, asr sp
   13c88:	andeq	r3, r1, r0, asr sp
   13c8c:	andeq	r3, r1, r0, asr sp
   13c90:	strdeq	r3, [r1], -r0
   13c94:	strdeq	r3, [r1], -r0
   13c98:	strdeq	r3, [r1], -r0
   13c9c:	andeq	r3, r1, r0, asr sp
   13ca0:	andeq	r3, r1, r0, asr sp
   13ca4:	andeq	r3, r1, r0, asr sp
   13ca8:	strdeq	r3, [r1], -r0
   13cac:	andeq	r3, r1, r0, asr sp
   13cb0:	strdeq	r3, [r1], -r0
   13cb4:	andeq	r3, r1, r0, asr sp
   13cb8:	andeq	r3, r1, r0, asr sp
   13cbc:	andeq	r3, r1, r0, asr sp
   13cc0:	andeq	r3, r1, r0, asr sp
   13cc4:	andeq	r3, r1, r0, asr sp
   13cc8:	andeq	r3, r1, r0, asr sp
   13ccc:	andeq	r3, r1, r0, asr sp
   13cd0:	andeq	r3, r1, r0, asr sp
   13cd4:	andeq	r3, r1, r0, asr sp
   13cd8:	andeq	r3, r1, r0, asr sp
   13cdc:	andeq	r3, r1, r0, asr sp
   13ce0:	andeq	r3, r1, r0, asr sp
   13ce4:	strdeq	r3, [r1], -r0
   13ce8:	strdeq	r3, [r1], -r0
   13cec:	strdeq	r3, [r1], -r0
   13cf0:	ldr	r2, [sp, #44]	; 0x2c
   13cf4:	cmp	r2, #0
   13cf8:	bne	13e54 <__assert_fail@plt+0x2fcc>
   13cfc:	cmp	sl, r4
   13d00:	mov	r5, r1
   13d04:	movhi	r2, #63	; 0x3f
   13d08:	mov	r9, r3
   13d0c:	strbhi	r2, [r8, r4]
   13d10:	add	r2, r4, #1
   13d14:	cmp	sl, r2
   13d18:	movhi	r0, #34	; 0x22
   13d1c:	strbhi	r0, [r8, r2]
   13d20:	add	r2, r4, #2
   13d24:	cmp	sl, r2
   13d28:	movhi	r0, #34	; 0x22
   13d2c:	strbhi	r0, [r8, r2]
   13d30:	add	r2, r4, #3
   13d34:	add	r4, r4, #4
   13d38:	cmp	sl, r2
   13d3c:	movhi	r0, #63	; 0x3f
   13d40:	strbhi	r0, [r8, r2]
   13d44:	mov	r2, #0
   13d48:	mov	r6, r2
   13d4c:	b	13184 <__assert_fail@plt+0x22fc>
   13d50:	mov	r3, #0
   13d54:	mov	r6, r3
   13d58:	b	12cfc <__assert_fail@plt+0x1e74>
   13d5c:	ldr	r0, [sp, #28]
   13d60:	mov	r1, r4
   13d64:	mov	r2, r7
   13d68:	mov	r3, r5
   13d6c:	mov	ip, r5
   13d70:	ldr	r8, [sp, #76]	; 0x4c
   13d74:	ldr	sl, [sp, #80]	; 0x50
   13d78:	cmp	r1, r0
   13d7c:	ldr	r5, [sp, #84]	; 0x54
   13d80:	ldr	r7, [sp, #88]	; 0x58
   13d84:	ldr	r4, [sp, #92]	; 0x5c
   13d88:	bcs	13dbc <__assert_fail@plt+0x2f34>
   13d8c:	ldrb	r6, [r2]
   13d90:	cmp	r6, #0
   13d94:	bne	13da8 <__assert_fail@plt+0x2f20>
   13d98:	b	13edc <__assert_fail@plt+0x3054>
   13d9c:	ldrb	r6, [r2, #1]!
   13da0:	cmp	r6, #0
   13da4:	beq	13e64 <__assert_fail@plt+0x2fdc>
   13da8:	add	r3, r3, #1
   13dac:	add	r1, r9, r3
   13db0:	cmp	r1, r0
   13db4:	bcc	13d9c <__assert_fail@plt+0x2f14>
   13db8:	mov	ip, r3
   13dbc:	mov	r6, #0
   13dc0:	ldr	r2, [sp, #40]	; 0x28
   13dc4:	b	138e8 <__assert_fail@plt+0x2a60>
   13dc8:	mov	r3, #1
   13dcc:	mov	r2, #0
   13dd0:	mov	r4, r2
   13dd4:	str	r3, [sp, #36]	; 0x24
   13dd8:	str	r3, [sp, #40]	; 0x28
   13ddc:	str	r3, [sp, #44]	; 0x2c
   13de0:	str	r2, [sp, #48]	; 0x30
   13de4:	str	r3, [sp, #56]	; 0x38
   13de8:	movw	r3, #24696	; 0x6078
   13dec:	movt	r3, #1
   13df0:	str	r3, [sp, #60]	; 0x3c
   13df4:	str	r2, [sp, #68]	; 0x44
   13df8:	str	r2, [sp, #72]	; 0x48
   13dfc:	b	1285c <__assert_fail@plt+0x19d4>
   13e00:	mov	r2, r3
   13e04:	ldr	r3, [sp, #60]	; 0x3c
   13e08:	cmp	r3, #0
   13e0c:	moveq	r2, #0
   13e10:	andne	r2, r2, #1
   13e14:	cmp	r2, #0
   13e18:	beq	13e44 <__assert_fail@plt+0x2fbc>
   13e1c:	mov	r2, r3
   13e20:	ldrb	r3, [r3]
   13e24:	cmp	r3, #0
   13e28:	beq	13e44 <__assert_fail@plt+0x2fbc>
   13e2c:	cmp	sl, r4
   13e30:	strbhi	r3, [fp, r4]
   13e34:	add	r4, r4, #1
   13e38:	ldrb	r3, [r2, #1]!
   13e3c:	cmp	r3, #0
   13e40:	bne	13e2c <__assert_fail@plt+0x2fa4>
   13e44:	cmp	sl, r4
   13e48:	movhi	r3, #0
   13e4c:	strbhi	r3, [fp, r4]
   13e50:	b	13064 <__assert_fail@plt+0x21dc>
   13e54:	str	fp, [sp, #152]	; 0x98
   13e58:	mov	fp, r8
   13e5c:	ldr	r8, [sp, #152]	; 0x98
   13e60:	b	1302c <__assert_fail@plt+0x21a4>
   13e64:	mov	ip, r3
   13e68:	ldr	r2, [sp, #40]	; 0x28
   13e6c:	b	138e8 <__assert_fail@plt+0x2a60>
   13e70:	str	fp, [sp, #152]	; 0x98
   13e74:	mov	fp, r8
   13e78:	ldr	r8, [sp, #152]	; 0x98
   13e7c:	sub	r3, r8, #2
   13e80:	clz	r3, r3
   13e84:	lsr	r3, r3, #5
   13e88:	str	r3, [sp, #40]	; 0x28
   13e8c:	b	13020 <__assert_fail@plt+0x2198>
   13e90:	mov	ip, #5
   13e94:	ldr	r3, [sp, #28]
   13e98:	str	ip, [sp]
   13e9c:	ldr	r2, [sp, #156]	; 0x9c
   13ea0:	ldr	ip, [sp, #164]	; 0xa4
   13ea4:	ldr	r0, [sp, #160]	; 0xa0
   13ea8:	str	r2, [sp, #4]
   13eac:	ldr	r2, [sp, #32]
   13eb0:	ldr	r1, [sp, #72]	; 0x48
   13eb4:	str	ip, [sp, #12]
   13eb8:	ldr	ip, [sp, #168]	; 0xa8
   13ebc:	str	r0, [sp, #8]
   13ec0:	mov	r0, fp
   13ec4:	str	ip, [sp, #16]
   13ec8:	bl	12774 <__assert_fail@plt+0x18ec>
   13ecc:	mov	r4, r0
   13ed0:	b	13064 <__assert_fail@plt+0x21dc>
   13ed4:	mov	r8, #2
   13ed8:	b	13020 <__assert_fail@plt+0x2198>
   13edc:	ldr	r2, [sp, #40]	; 0x28
   13ee0:	b	138e8 <__assert_fail@plt+0x2a60>
   13ee4:	mov	r3, #0
   13ee8:	mov	r2, #1
   13eec:	mov	r4, r3
   13ef0:	strd	r2, [sp, #36]	; 0x24
   13ef4:	strd	r2, [sp, #44]	; 0x2c
   13ef8:	str	r2, [sp, #56]	; 0x38
   13efc:	str	r3, [sp, #68]	; 0x44
   13f00:	str	r3, [sp, #72]	; 0x48
   13f04:	movw	r3, #24716	; 0x608c
   13f08:	movt	r3, #1
   13f0c:	str	r3, [sp, #60]	; 0x3c
   13f10:	b	1285c <__assert_fail@plt+0x19d4>
   13f14:	mov	r3, #0
   13f18:	mov	r1, #1
   13f1c:	mov	r2, r3
   13f20:	str	r1, [sp, #36]	; 0x24
   13f24:	str	r3, [sp, #48]	; 0x30
   13f28:	str	sl, [sp, #72]	; 0x48
   13f2c:	b	12e64 <__assert_fail@plt+0x1fdc>
   13f30:	bl	10e70 <abort@plt>
   13f34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f38:	mov	r4, r0
   13f3c:	mov	r5, r3
   13f40:	strd	r6, [sp, #8]
   13f44:	movw	r7, #28912	; 0x70f0
   13f48:	movt	r7, #2
   13f4c:	strd	r8, [sp, #16]
   13f50:	strd	sl, [sp, #24]
   13f54:	mov	sl, r1
   13f58:	mov	fp, r2
   13f5c:	str	lr, [sp, #32]
   13f60:	sub	sp, sp, #60	; 0x3c
   13f64:	bl	10da4 <__errno_location@plt>
   13f68:	mov	r8, r0
   13f6c:	cmn	r4, #-2147483647	; 0x80000001
   13f70:	ldr	r6, [r7]
   13f74:	movne	r0, #0
   13f78:	moveq	r0, #1
   13f7c:	ldr	r3, [r8]
   13f80:	orrs	r0, r0, r4, lsr #31
   13f84:	str	r3, [sp, #28]
   13f88:	bne	14118 <__assert_fail@plt+0x3290>
   13f8c:	ldr	r3, [r7, #4]
   13f90:	cmp	r3, r4
   13f94:	bgt	13ff4 <__assert_fail@plt+0x316c>
   13f98:	add	r1, r7, #8
   13f9c:	sub	r2, r4, r3
   13fa0:	str	r3, [sp, #52]	; 0x34
   13fa4:	cmp	r6, r1
   13fa8:	add	r2, r2, #1
   13fac:	beq	140f0 <__assert_fail@plt+0x3268>
   13fb0:	mov	r1, #8
   13fb4:	mov	r0, r6
   13fb8:	mvn	r3, #-2147483648	; 0x80000000
   13fbc:	str	r1, [sp]
   13fc0:	add	r1, sp, #52	; 0x34
   13fc4:	bl	14f98 <__assert_fail@plt+0x4110>
   13fc8:	mov	r6, r0
   13fcc:	str	r0, [r7]
   13fd0:	ldr	r0, [r7, #4]
   13fd4:	mov	r1, #0
   13fd8:	ldr	r2, [sp, #52]	; 0x34
   13fdc:	sub	r2, r2, r0
   13fe0:	add	r0, r6, r0, lsl #3
   13fe4:	lsl	r2, r2, #3
   13fe8:	bl	10dbc <memset@plt>
   13fec:	ldr	r3, [sp, #52]	; 0x34
   13ff0:	str	r3, [r7, #4]
   13ff4:	ldr	r1, [r5, #4]
   13ff8:	add	r0, r6, r4, lsl #3
   13ffc:	add	ip, r5, #8
   14000:	mov	r3, fp
   14004:	mov	r2, sl
   14008:	ldr	r7, [r0, #4]
   1400c:	str	r0, [sp, #36]	; 0x24
   14010:	str	ip, [sp, #40]	; 0x28
   14014:	orr	r0, r1, #1
   14018:	ldr	r9, [r6, r4, lsl #3]
   1401c:	str	ip, [sp, #8]
   14020:	ldr	lr, [r5, #44]	; 0x2c
   14024:	str	r0, [sp, #4]
   14028:	ldr	ip, [r5]
   1402c:	mov	r1, r9
   14030:	str	ip, [sp, #32]
   14034:	ldr	ip, [r5, #40]	; 0x28
   14038:	str	ip, [sp, #12]
   1403c:	ldr	ip, [sp, #32]
   14040:	str	lr, [sp, #16]
   14044:	str	r0, [sp, #44]	; 0x2c
   14048:	mov	r0, r7
   1404c:	str	ip, [sp]
   14050:	bl	12774 <__assert_fail@plt+0x18ec>
   14054:	cmp	r9, r0
   14058:	bhi	140c8 <__assert_fail@plt+0x3240>
   1405c:	add	r9, r0, #1
   14060:	movw	r3, #29088	; 0x71a0
   14064:	movt	r3, #2
   14068:	cmp	r7, r3
   1406c:	str	r9, [r6, r4, lsl #3]
   14070:	beq	1407c <__assert_fail@plt+0x31f4>
   14074:	mov	r0, r7
   14078:	bl	123d4 <__assert_fail@plt+0x154c>
   1407c:	mov	r0, r9
   14080:	bl	14de8 <__assert_fail@plt+0x3f60>
   14084:	ldr	ip, [r5]
   14088:	mov	r3, fp
   1408c:	mov	r2, sl
   14090:	mov	r1, r9
   14094:	mov	r7, r0
   14098:	ldr	lr, [sp, #36]	; 0x24
   1409c:	ldr	r4, [r5, #40]	; 0x28
   140a0:	str	r0, [lr, #4]
   140a4:	ldr	lr, [r5, #44]	; 0x2c
   140a8:	str	ip, [sp]
   140ac:	ldr	ip, [sp, #44]	; 0x2c
   140b0:	str	ip, [sp, #4]
   140b4:	ldr	ip, [sp, #40]	; 0x28
   140b8:	str	r4, [sp, #12]
   140bc:	str	lr, [sp, #16]
   140c0:	str	ip, [sp, #8]
   140c4:	bl	12774 <__assert_fail@plt+0x18ec>
   140c8:	ldr	r3, [sp, #28]
   140cc:	mov	r0, r7
   140d0:	str	r3, [r8]
   140d4:	add	sp, sp, #60	; 0x3c
   140d8:	ldrd	r4, [sp]
   140dc:	ldrd	r6, [sp, #8]
   140e0:	ldrd	r8, [sp, #16]
   140e4:	ldrd	sl, [sp, #24]
   140e8:	add	sp, sp, #32
   140ec:	pop	{pc}		; (ldr pc, [sp], #4)
   140f0:	mov	r1, #8
   140f4:	mvn	r3, #-2147483648	; 0x80000000
   140f8:	str	r1, [sp]
   140fc:	add	r1, sp, #52	; 0x34
   14100:	bl	14f98 <__assert_fail@plt+0x4110>
   14104:	ldrd	r2, [r7, #8]
   14108:	mov	r6, r0
   1410c:	str	r0, [r7]
   14110:	strd	r2, [r0]
   14114:	b	13fd0 <__assert_fail@plt+0x3148>
   14118:	bl	10e70 <abort@plt>
   1411c:	strd	r4, [sp, #-16]!
   14120:	mov	r5, r0
   14124:	str	r6, [sp, #8]
   14128:	str	lr, [sp, #12]
   1412c:	bl	10da4 <__errno_location@plt>
   14130:	mov	r4, r0
   14134:	cmp	r5, #0
   14138:	ldr	r0, [pc, #32]	; 14160 <__assert_fail@plt+0x32d8>
   1413c:	mov	r1, #48	; 0x30
   14140:	movne	r0, r5
   14144:	ldr	r6, [r4]
   14148:	bl	15110 <__assert_fail@plt+0x4288>
   1414c:	str	r6, [r4]
   14150:	ldrd	r4, [sp]
   14154:	ldr	r6, [sp, #8]
   14158:	add	sp, sp, #12
   1415c:	pop	{pc}		; (ldr pc, [sp], #4)
   14160:	andeq	r7, r2, r0, lsr #5
   14164:	ldr	r3, [pc, #12]	; 14178 <__assert_fail@plt+0x32f0>
   14168:	cmp	r0, #0
   1416c:	moveq	r0, r3
   14170:	ldr	r0, [r0]
   14174:	bx	lr
   14178:	andeq	r7, r2, r0, lsr #5
   1417c:	ldr	r3, [pc, #12]	; 14190 <__assert_fail@plt+0x3308>
   14180:	cmp	r0, #0
   14184:	moveq	r0, r3
   14188:	str	r1, [r0]
   1418c:	bx	lr
   14190:	andeq	r7, r2, r0, lsr #5
   14194:	ldr	r3, [pc, #52]	; 141d0 <__assert_fail@plt+0x3348>
   14198:	cmp	r0, #0
   1419c:	push	{lr}		; (str lr, [sp, #-4]!)
   141a0:	lsr	lr, r1, #5
   141a4:	and	r1, r1, #31
   141a8:	moveq	r0, r3
   141ac:	add	r3, r0, #8
   141b0:	ldr	ip, [r3, lr, lsl #2]
   141b4:	lsr	r0, ip, r1
   141b8:	eor	r2, r2, r0
   141bc:	and	r0, r0, #1
   141c0:	and	r2, r2, #1
   141c4:	eor	r1, ip, r2, lsl r1
   141c8:	str	r1, [r3, lr, lsl #2]
   141cc:	pop	{pc}		; (ldr pc, [sp], #4)
   141d0:	andeq	r7, r2, r0, lsr #5
   141d4:	ldr	r3, [pc, #16]	; 141ec <__assert_fail@plt+0x3364>
   141d8:	cmp	r0, #0
   141dc:	movne	r3, r0
   141e0:	ldr	r0, [r3, #4]
   141e4:	str	r1, [r3, #4]
   141e8:	bx	lr
   141ec:	andeq	r7, r2, r0, lsr #5
   141f0:	ldr	r3, [pc, #48]	; 14228 <__assert_fail@plt+0x33a0>
   141f4:	cmp	r0, #0
   141f8:	mov	ip, #10
   141fc:	moveq	r0, r3
   14200:	cmp	r2, #0
   14204:	cmpne	r1, #0
   14208:	str	ip, [r0]
   1420c:	beq	1421c <__assert_fail@plt+0x3394>
   14210:	str	r1, [r0, #40]	; 0x28
   14214:	str	r2, [r0, #44]	; 0x2c
   14218:	bx	lr
   1421c:	str	r4, [sp, #-8]!
   14220:	str	lr, [sp, #4]
   14224:	bl	10e70 <abort@plt>
   14228:	andeq	r7, r2, r0, lsr #5
   1422c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14230:	strd	r6, [sp, #8]
   14234:	mov	r7, r0
   14238:	mov	r6, r1
   1423c:	strd	r8, [sp, #16]
   14240:	mov	r8, r2
   14244:	mov	r9, r3
   14248:	str	lr, [sp, #24]
   1424c:	sub	sp, sp, #28
   14250:	ldr	r4, [sp, #56]	; 0x38
   14254:	ldr	ip, [pc, #104]	; 142c4 <__assert_fail@plt+0x343c>
   14258:	cmp	r4, #0
   1425c:	moveq	r4, ip
   14260:	bl	10da4 <__errno_location@plt>
   14264:	ldr	ip, [r4, #44]	; 0x2c
   14268:	mov	r5, r0
   1426c:	mov	r1, r6
   14270:	add	lr, r4, #8
   14274:	mov	r3, r9
   14278:	ldr	r6, [r5]
   1427c:	mov	r2, r8
   14280:	mov	r0, r7
   14284:	str	ip, [sp, #16]
   14288:	ldr	ip, [r4, #40]	; 0x28
   1428c:	str	lr, [sp, #8]
   14290:	str	ip, [sp, #12]
   14294:	ldr	ip, [r4, #4]
   14298:	str	ip, [sp, #4]
   1429c:	ldr	ip, [r4]
   142a0:	str	ip, [sp]
   142a4:	bl	12774 <__assert_fail@plt+0x18ec>
   142a8:	str	r6, [r5]
   142ac:	add	sp, sp, #28
   142b0:	ldrd	r4, [sp]
   142b4:	ldrd	r6, [sp, #8]
   142b8:	ldrd	r8, [sp, #16]
   142bc:	add	sp, sp, #24
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	andeq	r7, r2, r0, lsr #5
   142c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   142cc:	cmp	r3, #0
   142d0:	ldr	r4, [pc, #220]	; 143b4 <__assert_fail@plt+0x352c>
   142d4:	movne	r4, r3
   142d8:	strd	r6, [sp, #8]
   142dc:	mov	r6, r2
   142e0:	strd	r8, [sp, #16]
   142e4:	mov	r9, r0
   142e8:	strd	sl, [sp, #24]
   142ec:	mov	sl, r1
   142f0:	str	lr, [sp, #32]
   142f4:	sub	sp, sp, #44	; 0x2c
   142f8:	bl	10da4 <__errno_location@plt>
   142fc:	ldr	r5, [r4, #4]
   14300:	mov	r7, r0
   14304:	mov	r1, #0
   14308:	add	r8, r4, #8
   1430c:	mov	r3, sl
   14310:	ldr	ip, [r4, #44]	; 0x2c
   14314:	mov	r2, r9
   14318:	mov	r0, r1
   1431c:	ldr	lr, [r7]
   14320:	cmp	r6, r1
   14324:	orreq	r5, r5, #1
   14328:	str	ip, [sp, #16]
   1432c:	ldr	ip, [r4, #40]	; 0x28
   14330:	stmib	sp, {r5, r8, ip}
   14334:	ldr	ip, [r4]
   14338:	str	lr, [sp, #28]
   1433c:	str	ip, [sp]
   14340:	bl	12774 <__assert_fail@plt+0x18ec>
   14344:	add	r1, r0, #1
   14348:	mov	fp, r0
   1434c:	mov	r0, r1
   14350:	str	r1, [sp, #36]	; 0x24
   14354:	bl	14de8 <__assert_fail@plt+0x3f60>
   14358:	ldr	ip, [r4, #44]	; 0x2c
   1435c:	mov	r3, sl
   14360:	mov	r2, r9
   14364:	ldr	r1, [sp, #36]	; 0x24
   14368:	str	ip, [sp, #16]
   1436c:	ldr	ip, [r4, #40]	; 0x28
   14370:	str	r0, [sp, #32]
   14374:	stmib	sp, {r5, r8, ip}
   14378:	ldr	ip, [r4]
   1437c:	str	ip, [sp]
   14380:	bl	12774 <__assert_fail@plt+0x18ec>
   14384:	ldr	lr, [sp, #28]
   14388:	cmp	r6, #0
   1438c:	ldr	r0, [sp, #32]
   14390:	str	lr, [r7]
   14394:	strne	fp, [r6]
   14398:	add	sp, sp, #44	; 0x2c
   1439c:	ldrd	r4, [sp]
   143a0:	ldrd	r6, [sp, #8]
   143a4:	ldrd	r8, [sp, #16]
   143a8:	ldrd	sl, [sp, #24]
   143ac:	add	sp, sp, #32
   143b0:	pop	{pc}		; (ldr pc, [sp], #4)
   143b4:	andeq	r7, r2, r0, lsr #5
   143b8:	mov	r3, r2
   143bc:	mov	r2, #0
   143c0:	b	142c8 <__assert_fail@plt+0x3440>
   143c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143c8:	movw	r5, #28912	; 0x70f0
   143cc:	movt	r5, #2
   143d0:	ldr	r3, [r5, #4]
   143d4:	strd	r6, [sp, #8]
   143d8:	str	r8, [sp, #16]
   143dc:	str	lr, [sp, #20]
   143e0:	ldr	r7, [r5]
   143e4:	cmp	r3, #1
   143e8:	ble	1440c <__assert_fail@plt+0x3584>
   143ec:	mov	r4, #1
   143f0:	add	r6, r7, #4
   143f4:	ldr	r0, [r6, r4, lsl #3]
   143f8:	add	r4, r4, #1
   143fc:	bl	123d4 <__assert_fail@plt+0x154c>
   14400:	ldr	r3, [r5, #4]
   14404:	cmp	r3, r4
   14408:	bgt	143f4 <__assert_fail@plt+0x356c>
   1440c:	ldr	r0, [r7, #4]
   14410:	movw	r4, #29088	; 0x71a0
   14414:	movt	r4, #2
   14418:	cmp	r0, r4
   1441c:	beq	14430 <__assert_fail@plt+0x35a8>
   14420:	bl	123d4 <__assert_fail@plt+0x154c>
   14424:	mov	r3, #256	; 0x100
   14428:	str	r3, [r5, #8]
   1442c:	str	r4, [r5, #12]
   14430:	ldr	r4, [pc, #44]	; 14464 <__assert_fail@plt+0x35dc>
   14434:	cmp	r7, r4
   14438:	beq	14448 <__assert_fail@plt+0x35c0>
   1443c:	mov	r0, r7
   14440:	bl	123d4 <__assert_fail@plt+0x154c>
   14444:	str	r4, [r5]
   14448:	mov	r3, #1
   1444c:	ldrd	r6, [sp, #8]
   14450:	str	r3, [r5, #4]
   14454:	ldrd	r4, [sp]
   14458:	ldr	r8, [sp, #16]
   1445c:	add	sp, sp, #20
   14460:	pop	{pc}		; (ldr pc, [sp], #4)
   14464:	strdeq	r7, [r2], -r8
   14468:	ldr	r3, [pc, #4]	; 14474 <__assert_fail@plt+0x35ec>
   1446c:	mvn	r2, #0
   14470:	b	13f34 <__assert_fail@plt+0x30ac>
   14474:	andeq	r7, r2, r0, lsr #5
   14478:	ldr	r3, [pc]	; 14480 <__assert_fail@plt+0x35f8>
   1447c:	b	13f34 <__assert_fail@plt+0x30ac>
   14480:	andeq	r7, r2, r0, lsr #5
   14484:	mov	r1, r0
   14488:	ldr	r3, [pc, #8]	; 14498 <__assert_fail@plt+0x3610>
   1448c:	mvn	r2, #0
   14490:	mov	r0, #0
   14494:	b	13f34 <__assert_fail@plt+0x30ac>
   14498:	andeq	r7, r2, r0, lsr #5
   1449c:	mov	r2, r1
   144a0:	ldr	r3, [pc, #8]	; 144b0 <__assert_fail@plt+0x3628>
   144a4:	mov	r1, r0
   144a8:	mov	r0, #0
   144ac:	b	13f34 <__assert_fail@plt+0x30ac>
   144b0:	andeq	r7, r2, r0, lsr #5
   144b4:	strd	r4, [sp, #-12]!
   144b8:	mov	r5, r2
   144bc:	mov	r4, r0
   144c0:	str	lr, [sp, #8]
   144c4:	sub	sp, sp, #52	; 0x34
   144c8:	mov	r0, sp
   144cc:	bl	125d0 <__assert_fail@plt+0x1748>
   144d0:	mov	r3, sp
   144d4:	mov	r1, r5
   144d8:	mov	r0, r4
   144dc:	mvn	r2, #0
   144e0:	bl	13f34 <__assert_fail@plt+0x30ac>
   144e4:	add	sp, sp, #52	; 0x34
   144e8:	ldrd	r4, [sp]
   144ec:	add	sp, sp, #8
   144f0:	pop	{pc}		; (ldr pc, [sp], #4)
   144f4:	strd	r4, [sp, #-16]!
   144f8:	mov	r5, r2
   144fc:	mov	r4, r0
   14500:	str	r6, [sp, #8]
   14504:	mov	r6, r3
   14508:	str	lr, [sp, #12]
   1450c:	sub	sp, sp, #48	; 0x30
   14510:	mov	r0, sp
   14514:	bl	125d0 <__assert_fail@plt+0x1748>
   14518:	mov	r3, sp
   1451c:	mov	r2, r6
   14520:	mov	r1, r5
   14524:	mov	r0, r4
   14528:	bl	13f34 <__assert_fail@plt+0x30ac>
   1452c:	add	sp, sp, #48	; 0x30
   14530:	ldrd	r4, [sp]
   14534:	ldr	r6, [sp, #8]
   14538:	add	sp, sp, #12
   1453c:	pop	{pc}		; (ldr pc, [sp], #4)
   14540:	mov	r2, r1
   14544:	mov	r1, r0
   14548:	mov	r0, #0
   1454c:	b	144b4 <__assert_fail@plt+0x362c>
   14550:	mov	r3, r2
   14554:	mov	r2, r1
   14558:	mov	r1, r0
   1455c:	mov	r0, #0
   14560:	b	144f4 <__assert_fail@plt+0x366c>
   14564:	ldr	ip, [pc, #140]	; 145f8 <__assert_fail@plt+0x3770>
   14568:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1456c:	ldrd	r4, [ip]
   14570:	strd	r6, [sp, #8]
   14574:	ldrd	r6, [ip, #8]
   14578:	strd	r8, [sp, #16]
   1457c:	lsr	r9, r2, #5
   14580:	str	lr, [sp, #24]
   14584:	sub	sp, sp, #52	; 0x34
   14588:	and	lr, r2, #31
   1458c:	add	r8, sp, #8
   14590:	mov	r2, r1
   14594:	strd	r4, [sp]
   14598:	mov	r1, r0
   1459c:	mov	r3, sp
   145a0:	strd	r6, [sp, #8]
   145a4:	mov	r0, #0
   145a8:	ldrd	r4, [ip, #16]
   145ac:	ldrd	r6, [ip, #24]
   145b0:	strd	r4, [sp, #16]
   145b4:	ldrd	r4, [ip, #32]
   145b8:	strd	r6, [sp, #24]
   145bc:	ldrd	r6, [ip, #40]	; 0x28
   145c0:	strd	r4, [sp, #32]
   145c4:	strd	r6, [sp, #40]	; 0x28
   145c8:	ldr	ip, [r8, r9, lsl #2]
   145cc:	mvn	r4, ip, lsr lr
   145d0:	and	r4, r4, #1
   145d4:	eor	lr, ip, r4, lsl lr
   145d8:	str	lr, [r8, r9, lsl #2]
   145dc:	bl	13f34 <__assert_fail@plt+0x30ac>
   145e0:	add	sp, sp, #52	; 0x34
   145e4:	ldrd	r4, [sp]
   145e8:	ldrd	r6, [sp, #8]
   145ec:	ldrd	r8, [sp, #16]
   145f0:	add	sp, sp, #24
   145f4:	pop	{pc}		; (ldr pc, [sp], #4)
   145f8:	andeq	r7, r2, r0, lsr #5
   145fc:	mov	r2, r1
   14600:	mvn	r1, #0
   14604:	b	14564 <__assert_fail@plt+0x36dc>
   14608:	mov	r2, #58	; 0x3a
   1460c:	mvn	r1, #0
   14610:	b	14564 <__assert_fail@plt+0x36dc>
   14614:	mov	r2, #58	; 0x3a
   14618:	b	14564 <__assert_fail@plt+0x36dc>
   1461c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14620:	strd	r6, [sp, #8]
   14624:	mov	r6, r0
   14628:	mov	r7, r2
   1462c:	str	lr, [sp, #16]
   14630:	sub	sp, sp, #100	; 0x64
   14634:	mov	r0, sp
   14638:	bl	125d0 <__assert_fail@plt+0x1748>
   1463c:	ldrd	r4, [sp, #8]
   14640:	mov	r1, r7
   14644:	mov	r0, r6
   14648:	add	r3, sp, #48	; 0x30
   1464c:	mvn	r2, #0
   14650:	ldrd	r6, [sp]
   14654:	strd	r4, [sp, #56]	; 0x38
   14658:	ldrd	r4, [sp, #16]
   1465c:	strd	r6, [sp, #48]	; 0x30
   14660:	ldrd	r6, [sp, #32]
   14664:	ldr	lr, [sp, #60]	; 0x3c
   14668:	strd	r4, [sp, #64]	; 0x40
   1466c:	ldrd	r4, [sp, #24]
   14670:	mvn	ip, lr
   14674:	and	ip, ip, #67108864	; 0x4000000
   14678:	strd	r4, [sp, #72]	; 0x48
   1467c:	eor	ip, ip, lr
   14680:	ldrd	r4, [sp, #40]	; 0x28
   14684:	str	ip, [sp, #60]	; 0x3c
   14688:	strd	r6, [sp, #80]	; 0x50
   1468c:	strd	r4, [sp, #88]	; 0x58
   14690:	bl	13f34 <__assert_fail@plt+0x30ac>
   14694:	add	sp, sp, #100	; 0x64
   14698:	ldrd	r4, [sp]
   1469c:	ldrd	r6, [sp, #8]
   146a0:	add	sp, sp, #16
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	ldr	ip, [pc, #156]	; 1474c <__assert_fail@plt+0x38c4>
   146ac:	cmp	r2, #0
   146b0:	cmpne	r1, #0
   146b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   146b8:	strd	r6, [sp, #8]
   146bc:	mov	r6, r2
   146c0:	str	r8, [sp, #16]
   146c4:	mov	r8, r3
   146c8:	strd	sl, [sp, #20]
   146cc:	ldrd	r4, [ip]
   146d0:	str	lr, [sp, #28]
   146d4:	sub	sp, sp, #48	; 0x30
   146d8:	mov	lr, #10
   146dc:	ldrd	r2, [ip, #8]
   146e0:	ldrd	sl, [ip, #16]
   146e4:	strd	r4, [sp]
   146e8:	ldrd	r4, [ip, #32]
   146ec:	str	lr, [sp]
   146f0:	strd	r2, [sp, #8]
   146f4:	strd	sl, [sp, #16]
   146f8:	ldrd	r2, [ip, #24]
   146fc:	ldrd	sl, [ip, #40]	; 0x28
   14700:	strd	r2, [sp, #24]
   14704:	strd	r4, [sp, #32]
   14708:	strd	sl, [sp, #40]	; 0x28
   1470c:	beq	14748 <__assert_fail@plt+0x38c0>
   14710:	ldr	r2, [sp, #80]	; 0x50
   14714:	mov	r7, r1
   14718:	mov	r3, sp
   1471c:	mov	r1, r8
   14720:	str	r7, [sp, #40]	; 0x28
   14724:	str	r6, [sp, #44]	; 0x2c
   14728:	bl	13f34 <__assert_fail@plt+0x30ac>
   1472c:	add	sp, sp, #48	; 0x30
   14730:	ldrd	r4, [sp]
   14734:	ldrd	r6, [sp, #8]
   14738:	ldr	r8, [sp, #16]
   1473c:	ldrd	sl, [sp, #20]
   14740:	add	sp, sp, #28
   14744:	pop	{pc}		; (ldr pc, [sp], #4)
   14748:	bl	10e70 <abort@plt>
   1474c:	andeq	r7, r2, r0, lsr #5
   14750:	mvn	ip, #0
   14754:	push	{lr}		; (str lr, [sp, #-4]!)
   14758:	sub	sp, sp, #12
   1475c:	str	ip, [sp]
   14760:	bl	146a8 <__assert_fail@plt+0x3820>
   14764:	add	sp, sp, #12
   14768:	pop	{pc}		; (ldr pc, [sp], #4)
   1476c:	mvn	ip, #0
   14770:	push	{lr}		; (str lr, [sp, #-4]!)
   14774:	sub	sp, sp, #12
   14778:	mov	r3, r2
   1477c:	mov	r2, r1
   14780:	mov	r1, r0
   14784:	mov	r0, #0
   14788:	str	ip, [sp]
   1478c:	bl	146a8 <__assert_fail@plt+0x3820>
   14790:	add	sp, sp, #12
   14794:	pop	{pc}		; (ldr pc, [sp], #4)
   14798:	push	{lr}		; (str lr, [sp, #-4]!)
   1479c:	sub	sp, sp, #12
   147a0:	str	r3, [sp]
   147a4:	mov	r3, r2
   147a8:	mov	r2, r1
   147ac:	mov	r1, r0
   147b0:	mov	r0, #0
   147b4:	bl	146a8 <__assert_fail@plt+0x3820>
   147b8:	add	sp, sp, #12
   147bc:	pop	{pc}		; (ldr pc, [sp], #4)
   147c0:	ldr	r3, [pc]	; 147c8 <__assert_fail@plt+0x3940>
   147c4:	b	13f34 <__assert_fail@plt+0x30ac>
   147c8:	andeq	r7, r2, r0, lsl #2
   147cc:	mov	r2, r1
   147d0:	ldr	r3, [pc, #8]	; 147e0 <__assert_fail@plt+0x3958>
   147d4:	mov	r1, r0
   147d8:	mov	r0, #0
   147dc:	b	13f34 <__assert_fail@plt+0x30ac>
   147e0:	andeq	r7, r2, r0, lsl #2
   147e4:	ldr	r3, [pc, #4]	; 147f0 <__assert_fail@plt+0x3968>
   147e8:	mvn	r2, #0
   147ec:	b	13f34 <__assert_fail@plt+0x30ac>
   147f0:	andeq	r7, r2, r0, lsl #2
   147f4:	mov	r1, r0
   147f8:	ldr	r3, [pc, #8]	; 14808 <__assert_fail@plt+0x3980>
   147fc:	mvn	r2, #0
   14800:	mov	r0, #0
   14804:	b	13f34 <__assert_fail@plt+0x30ac>
   14808:	andeq	r7, r2, r0, lsl #2
   1480c:	cmp	r1, #0
   14810:	strd	r4, [sp, #-16]!
   14814:	mov	ip, r3
   14818:	str	r6, [sp, #8]
   1481c:	mov	r4, r0
   14820:	str	lr, [sp, #12]
   14824:	sub	sp, sp, #32
   14828:	ldr	r5, [sp, #48]	; 0x30
   1482c:	ldr	r6, [sp, #52]	; 0x34
   14830:	beq	14974 <__assert_fail@plt+0x3aec>
   14834:	mov	r3, r1
   14838:	mov	r1, #1
   1483c:	stm	sp, {r2, ip}
   14840:	movw	r2, #24828	; 0x60fc
   14844:	movt	r2, #1
   14848:	bl	10de0 <__fprintf_chk@plt>
   1484c:	mov	r2, #5
   14850:	movw	r1, #24848	; 0x6110
   14854:	movt	r1, #1
   14858:	mov	r0, #0
   1485c:	bl	10ccc <dcgettext@plt>
   14860:	movw	ip, #2022	; 0x7e6
   14864:	mov	r3, r0
   14868:	mov	r1, #1
   1486c:	movw	r2, #25576	; 0x63e8
   14870:	movt	r2, #1
   14874:	mov	r0, r4
   14878:	str	ip, [sp]
   1487c:	bl	10de0 <__fprintf_chk@plt>
   14880:	mov	r1, r4
   14884:	mov	r0, #10
   14888:	bl	10cc0 <fputc_unlocked@plt>
   1488c:	mov	r2, #5
   14890:	movw	r1, #24852	; 0x6114
   14894:	movt	r1, #1
   14898:	mov	r0, #0
   1489c:	bl	10ccc <dcgettext@plt>
   148a0:	mov	r2, r0
   148a4:	mov	r1, #1
   148a8:	movw	r3, #25024	; 0x61c0
   148ac:	movt	r3, #1
   148b0:	mov	r0, r4
   148b4:	bl	10de0 <__fprintf_chk@plt>
   148b8:	mov	r1, r4
   148bc:	mov	r0, #10
   148c0:	bl	10cc0 <fputc_unlocked@plt>
   148c4:	cmp	r6, #9
   148c8:	ldrls	pc, [pc, r6, lsl #2]
   148cc:	b	14be0 <__assert_fail@plt+0x3d58>
   148d0:	andeq	r4, r1, r0, ror #18
   148d4:	muleq	r1, r0, r9
   148d8:	andeq	r4, r1, ip, asr #19
   148dc:	andeq	r4, r1, ip, lsl #20
   148e0:	andeq	r4, r1, r4, asr sl
   148e4:	andeq	r4, r1, ip, lsl #21
   148e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148ec:	andeq	r4, r1, r8, lsr #22
   148f0:	andeq	r4, r1, r0, lsl #23
   148f4:	strdeq	r4, [r1], -r8
   148f8:	movw	r1, #25328	; 0x62f0
   148fc:	movt	r1, #1
   14900:	mov	r2, #5
   14904:	mov	r0, #0
   14908:	bl	10ccc <dcgettext@plt>
   1490c:	ldr	lr, [r5, #4]
   14910:	mov	r2, r0
   14914:	mov	r1, #1
   14918:	mov	r0, r4
   1491c:	ldr	r3, [r5, #8]
   14920:	ldr	ip, [r5, #32]
   14924:	str	lr, [sp]
   14928:	ldr	lr, [r5, #12]
   1492c:	str	ip, [sp, #28]
   14930:	ldr	ip, [r5, #28]
   14934:	str	r3, [sp, #4]
   14938:	ldr	r3, [r5, #16]
   1493c:	str	lr, [sp, #8]
   14940:	ldr	lr, [r5, #20]
   14944:	str	ip, [sp, #24]
   14948:	ldr	ip, [r5, #24]
   1494c:	str	r3, [sp, #12]
   14950:	ldr	r3, [r5]
   14954:	str	lr, [sp, #16]
   14958:	str	ip, [sp, #20]
   1495c:	bl	10de0 <__fprintf_chk@plt>
   14960:	add	sp, sp, #32
   14964:	ldrd	r4, [sp]
   14968:	ldr	r6, [sp, #8]
   1496c:	add	sp, sp, #12
   14970:	pop	{pc}		; (ldr pc, [sp], #4)
   14974:	mov	r3, r2
   14978:	mov	r1, #1
   1497c:	str	ip, [sp]
   14980:	movw	r2, #24840	; 0x6108
   14984:	movt	r2, #1
   14988:	bl	10de0 <__fprintf_chk@plt>
   1498c:	b	1484c <__assert_fail@plt+0x39c4>
   14990:	mov	r2, #5
   14994:	movw	r1, #25060	; 0x61e4
   14998:	movt	r1, #1
   1499c:	mov	r0, #0
   149a0:	bl	10ccc <dcgettext@plt>
   149a4:	ldr	r3, [r5]
   149a8:	mov	r2, r0
   149ac:	mov	r1, #1
   149b0:	mov	r0, r4
   149b4:	add	sp, sp, #32
   149b8:	ldrd	r4, [sp]
   149bc:	ldr	r6, [sp, #8]
   149c0:	ldr	lr, [sp, #12]
   149c4:	add	sp, sp, #16
   149c8:	b	10de0 <__fprintf_chk@plt>
   149cc:	mov	r2, #5
   149d0:	movw	r1, #25076	; 0x61f4
   149d4:	movt	r1, #1
   149d8:	mov	r0, #0
   149dc:	bl	10ccc <dcgettext@plt>
   149e0:	ldm	r5, {r3, ip}
   149e4:	mov	r2, r0
   149e8:	mov	r1, #1
   149ec:	mov	r0, r4
   149f0:	str	ip, [sp, #48]	; 0x30
   149f4:	add	sp, sp, #32
   149f8:	ldrd	r4, [sp]
   149fc:	ldr	r6, [sp, #8]
   14a00:	ldr	lr, [sp, #12]
   14a04:	add	sp, sp, #16
   14a08:	b	10de0 <__fprintf_chk@plt>
   14a0c:	mov	r2, #5
   14a10:	movw	r1, #25100	; 0x620c
   14a14:	movt	r1, #1
   14a18:	mov	r0, #0
   14a1c:	bl	10ccc <dcgettext@plt>
   14a20:	ldm	r5, {r3, lr}
   14a24:	mov	r2, r0
   14a28:	mov	r1, #1
   14a2c:	mov	r0, r4
   14a30:	ldr	ip, [r5, #8]
   14a34:	str	lr, [sp, #48]	; 0x30
   14a38:	str	ip, [sp, #52]	; 0x34
   14a3c:	add	sp, sp, #32
   14a40:	ldrd	r4, [sp]
   14a44:	ldr	r6, [sp, #8]
   14a48:	ldr	lr, [sp, #12]
   14a4c:	add	sp, sp, #16
   14a50:	b	10de0 <__fprintf_chk@plt>
   14a54:	mov	r2, #5
   14a58:	movw	r1, #25128	; 0x6228
   14a5c:	movt	r1, #1
   14a60:	mov	r0, #0
   14a64:	bl	10ccc <dcgettext@plt>
   14a68:	ldmib	r5, {r3, ip, lr}
   14a6c:	mov	r2, r0
   14a70:	mov	r1, #1
   14a74:	mov	r0, r4
   14a78:	str	r3, [sp]
   14a7c:	ldr	r3, [r5]
   14a80:	stmib	sp, {ip, lr}
   14a84:	bl	10de0 <__fprintf_chk@plt>
   14a88:	b	14960 <__assert_fail@plt+0x3ad8>
   14a8c:	mov	r2, #5
   14a90:	movw	r1, #25160	; 0x6248
   14a94:	movt	r1, #1
   14a98:	mov	r0, #0
   14a9c:	bl	10ccc <dcgettext@plt>
   14aa0:	ldmib	r5, {ip, lr}
   14aa4:	mov	r2, r0
   14aa8:	mov	r1, #1
   14aac:	mov	r0, r4
   14ab0:	ldr	r3, [r5, #16]
   14ab4:	str	ip, [sp]
   14ab8:	ldr	ip, [r5, #12]
   14abc:	str	r3, [sp, #12]
   14ac0:	ldr	r3, [r5]
   14ac4:	str	lr, [sp, #4]
   14ac8:	str	ip, [sp, #8]
   14acc:	bl	10de0 <__fprintf_chk@plt>
   14ad0:	b	14960 <__assert_fail@plt+0x3ad8>
   14ad4:	mov	r2, #5
   14ad8:	movw	r1, #25196	; 0x626c
   14adc:	movt	r1, #1
   14ae0:	mov	r0, #0
   14ae4:	bl	10ccc <dcgettext@plt>
   14ae8:	ldr	lr, [r5, #4]
   14aec:	mov	r2, r0
   14af0:	mov	r1, #1
   14af4:	mov	r0, r4
   14af8:	ldr	r3, [r5, #8]
   14afc:	ldr	ip, [r5, #20]
   14b00:	str	lr, [sp]
   14b04:	ldr	lr, [r5, #12]
   14b08:	str	ip, [sp, #16]
   14b0c:	ldr	ip, [r5, #16]
   14b10:	str	r3, [sp, #4]
   14b14:	ldr	r3, [r5]
   14b18:	str	lr, [sp, #8]
   14b1c:	str	ip, [sp, #12]
   14b20:	bl	10de0 <__fprintf_chk@plt>
   14b24:	b	14960 <__assert_fail@plt+0x3ad8>
   14b28:	mov	r2, #5
   14b2c:	movw	r1, #25236	; 0x6294
   14b30:	movt	r1, #1
   14b34:	mov	r0, #0
   14b38:	bl	10ccc <dcgettext@plt>
   14b3c:	ldmib	r5, {r3, ip}
   14b40:	mov	r2, r0
   14b44:	mov	r1, #1
   14b48:	mov	r0, r4
   14b4c:	ldr	lr, [r5, #24]
   14b50:	str	r3, [sp]
   14b54:	ldr	r3, [r5, #12]
   14b58:	str	lr, [sp, #20]
   14b5c:	ldr	lr, [r5, #20]
   14b60:	str	ip, [sp, #4]
   14b64:	ldr	ip, [r5, #16]
   14b68:	str	r3, [sp, #8]
   14b6c:	ldr	r3, [r5]
   14b70:	str	ip, [sp, #12]
   14b74:	str	lr, [sp, #16]
   14b78:	bl	10de0 <__fprintf_chk@plt>
   14b7c:	b	14960 <__assert_fail@plt+0x3ad8>
   14b80:	mov	r2, #5
   14b84:	movw	r1, #25280	; 0x62c0
   14b88:	movt	r1, #1
   14b8c:	mov	r0, #0
   14b90:	bl	10ccc <dcgettext@plt>
   14b94:	ldmib	r5, {ip, lr}
   14b98:	mov	r2, r0
   14b9c:	mov	r1, #1
   14ba0:	mov	r0, r4
   14ba4:	ldr	r3, [r5, #28]
   14ba8:	str	ip, [sp]
   14bac:	ldr	ip, [r5, #12]
   14bb0:	str	r3, [sp, #24]
   14bb4:	ldr	r3, [r5, #24]
   14bb8:	str	lr, [sp, #4]
   14bbc:	ldr	lr, [r5, #16]
   14bc0:	str	ip, [sp, #8]
   14bc4:	ldr	ip, [r5, #20]
   14bc8:	str	r3, [sp, #20]
   14bcc:	ldr	r3, [r5]
   14bd0:	str	lr, [sp, #12]
   14bd4:	str	ip, [sp, #16]
   14bd8:	bl	10de0 <__fprintf_chk@plt>
   14bdc:	b	14960 <__assert_fail@plt+0x3ad8>
   14be0:	movw	r1, #25380	; 0x6324
   14be4:	movt	r1, #1
   14be8:	b	14900 <__assert_fail@plt+0x3a78>
   14bec:	strd	r4, [sp, #-12]!
   14bf0:	str	lr, [sp, #8]
   14bf4:	sub	sp, sp, #12
   14bf8:	ldr	r5, [sp, #24]
   14bfc:	ldr	ip, [r5]
   14c00:	cmp	ip, #0
   14c04:	beq	14c20 <__assert_fail@plt+0x3d98>
   14c08:	mov	lr, r5
   14c0c:	mov	ip, #0
   14c10:	ldr	r4, [lr, #4]!
   14c14:	add	ip, ip, #1
   14c18:	cmp	r4, #0
   14c1c:	bne	14c10 <__assert_fail@plt+0x3d88>
   14c20:	stm	sp, {r5, ip}
   14c24:	bl	1480c <__assert_fail@plt+0x3984>
   14c28:	add	sp, sp, #12
   14c2c:	ldrd	r4, [sp]
   14c30:	add	sp, sp, #8
   14c34:	pop	{pc}		; (ldr pc, [sp], #4)
   14c38:	strd	r4, [sp, #-16]!
   14c3c:	mov	ip, #0
   14c40:	str	r6, [sp, #8]
   14c44:	str	lr, [sp, #12]
   14c48:	sub	sp, sp, #48	; 0x30
   14c4c:	ldr	r5, [sp, #64]	; 0x40
   14c50:	add	r6, sp, #8
   14c54:	mov	r4, r6
   14c58:	ldr	lr, [r5], #4
   14c5c:	cmp	lr, #0
   14c60:	str	lr, [r4], #4
   14c64:	beq	14c74 <__assert_fail@plt+0x3dec>
   14c68:	add	ip, ip, #1
   14c6c:	cmp	ip, #10
   14c70:	bne	14c58 <__assert_fail@plt+0x3dd0>
   14c74:	stm	sp, {r6, ip}
   14c78:	bl	1480c <__assert_fail@plt+0x3984>
   14c7c:	add	sp, sp, #48	; 0x30
   14c80:	ldrd	r4, [sp]
   14c84:	ldr	r6, [sp, #8]
   14c88:	add	sp, sp, #12
   14c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c90:	push	{r3}		; (str r3, [sp, #-4]!)
   14c94:	mov	ip, #0
   14c98:	strd	r4, [sp, #-12]!
   14c9c:	str	lr, [sp, #8]
   14ca0:	sub	sp, sp, #56	; 0x38
   14ca4:	add	r3, sp, #72	; 0x48
   14ca8:	add	r5, sp, #16
   14cac:	mov	r4, r3
   14cb0:	mov	lr, r5
   14cb4:	str	r3, [sp, #12]
   14cb8:	ldr	r3, [r4], #4
   14cbc:	cmp	r3, #0
   14cc0:	str	r3, [lr], #4
   14cc4:	beq	14cd4 <__assert_fail@plt+0x3e4c>
   14cc8:	add	ip, ip, #1
   14ccc:	cmp	ip, #10
   14cd0:	bne	14cb8 <__assert_fail@plt+0x3e30>
   14cd4:	ldr	r3, [sp, #68]	; 0x44
   14cd8:	stm	sp, {r5, ip}
   14cdc:	bl	1480c <__assert_fail@plt+0x3984>
   14ce0:	add	sp, sp, #56	; 0x38
   14ce4:	ldrd	r4, [sp]
   14ce8:	ldr	lr, [sp, #8]
   14cec:	add	sp, sp, #12
   14cf0:	add	sp, sp, #4
   14cf4:	bx	lr
   14cf8:	movw	r3, #29004	; 0x714c
   14cfc:	movt	r3, #2
   14d00:	str	r4, [sp, #-8]!
   14d04:	mov	r0, #10
   14d08:	ldr	r1, [r3]
   14d0c:	str	lr, [sp, #4]
   14d10:	bl	10cc0 <fputc_unlocked@plt>
   14d14:	mov	r2, #5
   14d18:	movw	r1, #25440	; 0x6360
   14d1c:	movt	r1, #1
   14d20:	mov	r0, #0
   14d24:	bl	10ccc <dcgettext@plt>
   14d28:	mov	r1, r0
   14d2c:	movw	r2, #25460	; 0x6374
   14d30:	movt	r2, #1
   14d34:	mov	r0, #1
   14d38:	bl	10dc8 <__printf_chk@plt>
   14d3c:	mov	r2, #5
   14d40:	movw	r1, #25484	; 0x638c
   14d44:	movt	r1, #1
   14d48:	mov	r0, #0
   14d4c:	bl	10ccc <dcgettext@plt>
   14d50:	mov	r1, r0
   14d54:	movw	r3, #23216	; 0x5ab0
   14d58:	movt	r3, #1
   14d5c:	movw	r2, #23256	; 0x5ad8
   14d60:	movt	r2, #1
   14d64:	mov	r0, #1
   14d68:	bl	10dc8 <__printf_chk@plt>
   14d6c:	mov	r2, #5
   14d70:	movw	r1, #25504	; 0x63a0
   14d74:	movt	r1, #1
   14d78:	mov	r0, #0
   14d7c:	bl	10ccc <dcgettext@plt>
   14d80:	mov	r1, r0
   14d84:	movw	r2, #25544	; 0x63c8
   14d88:	movt	r2, #1
   14d8c:	mov	r0, #1
   14d90:	ldr	r4, [sp]
   14d94:	ldr	lr, [sp, #4]
   14d98:	add	sp, sp, #8
   14d9c:	b	10dc8 <__printf_chk@plt>
   14da0:	str	r4, [sp, #-8]!
   14da4:	str	lr, [sp, #4]
   14da8:	bl	152d0 <__assert_fail@plt+0x4448>
   14dac:	cmp	r0, #0
   14db0:	beq	14dc0 <__assert_fail@plt+0x3f38>
   14db4:	ldr	r4, [sp]
   14db8:	add	sp, sp, #4
   14dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc0:	bl	15218 <__assert_fail@plt+0x4390>
   14dc4:	str	r4, [sp, #-8]!
   14dc8:	str	lr, [sp, #4]
   14dcc:	bl	152d0 <__assert_fail@plt+0x4448>
   14dd0:	cmp	r0, #0
   14dd4:	beq	14de4 <__assert_fail@plt+0x3f5c>
   14dd8:	ldr	r4, [sp]
   14ddc:	add	sp, sp, #4
   14de0:	pop	{pc}		; (ldr pc, [sp], #4)
   14de4:	bl	15218 <__assert_fail@plt+0x4390>
   14de8:	str	r4, [sp, #-8]!
   14dec:	str	lr, [sp, #4]
   14df0:	bl	152d0 <__assert_fail@plt+0x4448>
   14df4:	cmp	r0, #0
   14df8:	beq	14e08 <__assert_fail@plt+0x3f80>
   14dfc:	ldr	r4, [sp]
   14e00:	add	sp, sp, #4
   14e04:	pop	{pc}		; (ldr pc, [sp], #4)
   14e08:	bl	15218 <__assert_fail@plt+0x4390>
   14e0c:	strd	r4, [sp, #-16]!
   14e10:	mov	r5, r0
   14e14:	mov	r4, r1
   14e18:	str	r6, [sp, #8]
   14e1c:	str	lr, [sp, #12]
   14e20:	bl	1530c <__assert_fail@plt+0x4484>
   14e24:	cmp	r0, #0
   14e28:	beq	14e3c <__assert_fail@plt+0x3fb4>
   14e2c:	ldrd	r4, [sp]
   14e30:	ldr	r6, [sp, #8]
   14e34:	add	sp, sp, #12
   14e38:	pop	{pc}		; (ldr pc, [sp], #4)
   14e3c:	adds	r4, r4, #0
   14e40:	movne	r4, #1
   14e44:	cmp	r5, #0
   14e48:	moveq	r4, #1
   14e4c:	cmp	r4, #0
   14e50:	beq	14e2c <__assert_fail@plt+0x3fa4>
   14e54:	bl	15218 <__assert_fail@plt+0x4390>
   14e58:	cmp	r1, #0
   14e5c:	orreq	r1, r1, #1
   14e60:	str	r4, [sp, #-8]!
   14e64:	str	lr, [sp, #4]
   14e68:	bl	1530c <__assert_fail@plt+0x4484>
   14e6c:	cmp	r0, #0
   14e70:	beq	14e80 <__assert_fail@plt+0x3ff8>
   14e74:	ldr	r4, [sp]
   14e78:	add	sp, sp, #4
   14e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e80:	bl	15218 <__assert_fail@plt+0x4390>
   14e84:	strd	r4, [sp, #-16]!
   14e88:	mov	r4, r0
   14e8c:	mov	r5, r2
   14e90:	str	r6, [sp, #8]
   14e94:	mov	r6, r1
   14e98:	str	lr, [sp, #12]
   14e9c:	bl	154a8 <__assert_fail@plt+0x4620>
   14ea0:	cmp	r0, #0
   14ea4:	beq	14eb8 <__assert_fail@plt+0x4030>
   14ea8:	ldrd	r4, [sp]
   14eac:	ldr	r6, [sp, #8]
   14eb0:	add	sp, sp, #12
   14eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14eb8:	cmp	r4, #0
   14ebc:	beq	14ecc <__assert_fail@plt+0x4044>
   14ec0:	cmp	r6, #0
   14ec4:	cmpne	r5, #0
   14ec8:	beq	14ea8 <__assert_fail@plt+0x4020>
   14ecc:	bl	15218 <__assert_fail@plt+0x4390>
   14ed0:	b	14e84 <__assert_fail@plt+0x3ffc>
   14ed4:	cmp	r2, #0
   14ed8:	cmpne	r1, #0
   14edc:	str	r4, [sp, #-8]!
   14ee0:	moveq	r2, #1
   14ee4:	str	lr, [sp, #4]
   14ee8:	moveq	r1, r2
   14eec:	bl	154a8 <__assert_fail@plt+0x4620>
   14ef0:	cmp	r0, #0
   14ef4:	beq	14f04 <__assert_fail@plt+0x407c>
   14ef8:	ldr	r4, [sp]
   14efc:	add	sp, sp, #4
   14f00:	pop	{pc}		; (ldr pc, [sp], #4)
   14f04:	bl	15218 <__assert_fail@plt+0x4390>
   14f08:	mov	r2, r1
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #0
   14f14:	b	14e84 <__assert_fail@plt+0x3ffc>
   14f18:	mov	r2, r1
   14f1c:	mov	r1, r0
   14f20:	mov	r0, #0
   14f24:	b	14ed4 <__assert_fail@plt+0x404c>
   14f28:	cmp	r0, #0
   14f2c:	strd	r4, [sp, #-16]!
   14f30:	mov	r5, r1
   14f34:	ldr	r4, [r1]
   14f38:	str	r6, [sp, #8]
   14f3c:	str	lr, [sp, #12]
   14f40:	beq	14f70 <__assert_fail@plt+0x40e8>
   14f44:	lsr	r3, r4, #1
   14f48:	add	r3, r3, #1
   14f4c:	adds	r4, r4, r3
   14f50:	bcs	14f8c <__assert_fail@plt+0x4104>
   14f54:	mov	r1, r4
   14f58:	bl	14e84 <__assert_fail@plt+0x3ffc>
   14f5c:	ldr	r6, [sp, #8]
   14f60:	str	r4, [r5]
   14f64:	ldrd	r4, [sp]
   14f68:	add	sp, sp, #12
   14f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f70:	cmp	r4, #0
   14f74:	bne	14f54 <__assert_fail@plt+0x40cc>
   14f78:	mov	r4, #64	; 0x40
   14f7c:	udiv	r4, r4, r2
   14f80:	cmp	r2, #64	; 0x40
   14f84:	addhi	r4, r4, #1
   14f88:	b	14f54 <__assert_fail@plt+0x40cc>
   14f8c:	bl	15218 <__assert_fail@plt+0x4390>
   14f90:	mov	r2, #1
   14f94:	b	14f28 <__assert_fail@plt+0x40a0>
   14f98:	ldr	ip, [r1]
   14f9c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14fa0:	mov	r5, r1
   14fa4:	strd	r6, [sp, #8]
   14fa8:	str	lr, [sp, #28]
   14fac:	strd	r8, [sp, #16]
   14fb0:	asr	lr, ip, #1
   14fb4:	ldr	r8, [sp, #32]
   14fb8:	str	sl, [sp, #24]
   14fbc:	adds	r4, ip, lr
   14fc0:	mvn	lr, r3
   14fc4:	lsr	lr, lr, #31
   14fc8:	mvnvs	r4, #-2147483648	; 0x80000000
   14fcc:	cmp	r3, r4
   14fd0:	movge	r1, #0
   14fd4:	andlt	r1, lr, #1
   14fd8:	cmp	r1, #0
   14fdc:	movne	r4, r3
   14fe0:	smull	r6, r7, r4, r8
   14fe4:	cmp	r7, r6, asr #31
   14fe8:	bne	15070 <__assert_fail@plt+0x41e8>
   14fec:	cmp	r6, #63	; 0x3f
   14ff0:	mov	r1, r6
   14ff4:	ble	15058 <__assert_fail@plt+0x41d0>
   14ff8:	cmp	r0, #0
   14ffc:	sub	r6, r4, ip
   15000:	streq	r0, [r5]
   15004:	cmp	r6, r2
   15008:	bge	15038 <__assert_fail@plt+0x41b0>
   1500c:	adds	r4, ip, r2
   15010:	bvs	1506c <__assert_fail@plt+0x41e4>
   15014:	cmp	r4, r3
   15018:	movle	r3, #0
   1501c:	andgt	r3, lr, #1
   15020:	cmp	r3, #0
   15024:	bne	1506c <__assert_fail@plt+0x41e4>
   15028:	smull	r8, r9, r4, r8
   1502c:	cmp	r9, r8, asr #31
   15030:	mov	r1, r8
   15034:	bne	1506c <__assert_fail@plt+0x41e4>
   15038:	bl	14e0c <__assert_fail@plt+0x3f84>
   1503c:	ldrd	r6, [sp, #8]
   15040:	ldrd	r8, [sp, #16]
   15044:	ldr	sl, [sp, #24]
   15048:	str	r4, [r5]
   1504c:	ldrd	r4, [sp]
   15050:	add	sp, sp, #28
   15054:	pop	{pc}		; (ldr pc, [sp], #4)
   15058:	mov	r6, #64	; 0x40
   1505c:	sdiv	r4, r6, r8
   15060:	mls	r1, r8, r4, r6
   15064:	sub	r1, r6, r1
   15068:	b	14ff8 <__assert_fail@plt+0x4170>
   1506c:	bl	15218 <__assert_fail@plt+0x4390>
   15070:	mvn	r6, #-2147483648	; 0x80000000
   15074:	b	1505c <__assert_fail@plt+0x41d4>
   15078:	mov	r1, #1
   1507c:	str	r4, [sp, #-8]!
   15080:	str	lr, [sp, #4]
   15084:	bl	1525c <__assert_fail@plt+0x43d4>
   15088:	cmp	r0, #0
   1508c:	beq	1509c <__assert_fail@plt+0x4214>
   15090:	ldr	r4, [sp]
   15094:	add	sp, sp, #4
   15098:	pop	{pc}		; (ldr pc, [sp], #4)
   1509c:	bl	15218 <__assert_fail@plt+0x4390>
   150a0:	mov	r1, #1
   150a4:	str	r4, [sp, #-8]!
   150a8:	str	lr, [sp, #4]
   150ac:	bl	1525c <__assert_fail@plt+0x43d4>
   150b0:	cmp	r0, #0
   150b4:	beq	150c4 <__assert_fail@plt+0x423c>
   150b8:	ldr	r4, [sp]
   150bc:	add	sp, sp, #4
   150c0:	pop	{pc}		; (ldr pc, [sp], #4)
   150c4:	bl	15218 <__assert_fail@plt+0x4390>
   150c8:	str	r4, [sp, #-8]!
   150cc:	str	lr, [sp, #4]
   150d0:	bl	1525c <__assert_fail@plt+0x43d4>
   150d4:	cmp	r0, #0
   150d8:	beq	150e8 <__assert_fail@plt+0x4260>
   150dc:	ldr	r4, [sp]
   150e0:	add	sp, sp, #4
   150e4:	pop	{pc}		; (ldr pc, [sp], #4)
   150e8:	bl	15218 <__assert_fail@plt+0x4390>
   150ec:	str	r4, [sp, #-8]!
   150f0:	str	lr, [sp, #4]
   150f4:	bl	1525c <__assert_fail@plt+0x43d4>
   150f8:	cmp	r0, #0
   150fc:	beq	1510c <__assert_fail@plt+0x4284>
   15100:	ldr	r4, [sp]
   15104:	add	sp, sp, #4
   15108:	pop	{pc}		; (ldr pc, [sp], #4)
   1510c:	bl	15218 <__assert_fail@plt+0x4390>
   15110:	strd	r4, [sp, #-16]!
   15114:	mov	r4, r1
   15118:	str	r6, [sp, #8]
   1511c:	mov	r6, r0
   15120:	mov	r0, r1
   15124:	str	lr, [sp, #12]
   15128:	bl	152d0 <__assert_fail@plt+0x4448>
   1512c:	subs	r5, r0, #0
   15130:	beq	15154 <__assert_fail@plt+0x42cc>
   15134:	mov	r2, r4
   15138:	mov	r1, r6
   1513c:	bl	10c9c <memcpy@plt>
   15140:	mov	r0, r5
   15144:	ldrd	r4, [sp]
   15148:	ldr	r6, [sp, #8]
   1514c:	add	sp, sp, #12
   15150:	pop	{pc}		; (ldr pc, [sp], #4)
   15154:	bl	15218 <__assert_fail@plt+0x4390>
   15158:	strd	r4, [sp, #-16]!
   1515c:	mov	r4, r1
   15160:	str	r6, [sp, #8]
   15164:	mov	r6, r0
   15168:	mov	r0, r1
   1516c:	str	lr, [sp, #12]
   15170:	bl	152d0 <__assert_fail@plt+0x4448>
   15174:	subs	r5, r0, #0
   15178:	beq	1519c <__assert_fail@plt+0x4314>
   1517c:	mov	r2, r4
   15180:	mov	r1, r6
   15184:	bl	10c9c <memcpy@plt>
   15188:	mov	r0, r5
   1518c:	ldrd	r4, [sp]
   15190:	ldr	r6, [sp, #8]
   15194:	add	sp, sp, #12
   15198:	pop	{pc}		; (ldr pc, [sp], #4)
   1519c:	bl	15218 <__assert_fail@plt+0x4390>
   151a0:	strd	r4, [sp, #-16]!
   151a4:	mov	r4, r1
   151a8:	str	r6, [sp, #8]
   151ac:	mov	r6, r0
   151b0:	add	r0, r1, #1
   151b4:	str	lr, [sp, #12]
   151b8:	bl	152d0 <__assert_fail@plt+0x4448>
   151bc:	subs	r5, r0, #0
   151c0:	beq	151ec <__assert_fail@plt+0x4364>
   151c4:	mov	r3, #0
   151c8:	mov	r1, r6
   151cc:	mov	r2, r4
   151d0:	strb	r3, [r5, r4]
   151d4:	bl	10c9c <memcpy@plt>
   151d8:	mov	r0, r5
   151dc:	ldrd	r4, [sp]
   151e0:	ldr	r6, [sp, #8]
   151e4:	add	sp, sp, #12
   151e8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ec:	bl	15218 <__assert_fail@plt+0x4390>
   151f0:	str	r4, [sp, #-8]!
   151f4:	mov	r4, r0
   151f8:	str	lr, [sp, #4]
   151fc:	bl	10d98 <strlen@plt>
   15200:	add	r1, r0, #1
   15204:	mov	r0, r4
   15208:	ldr	r4, [sp]
   1520c:	ldr	lr, [sp, #4]
   15210:	add	sp, sp, #8
   15214:	b	15110 <__assert_fail@plt+0x4288>
   15218:	movw	r3, #28908	; 0x70ec
   1521c:	movt	r3, #2
   15220:	str	r4, [sp, #-8]!
   15224:	ldr	r4, [r3]
   15228:	mov	r2, #5
   1522c:	movw	r1, #25624	; 0x6418
   15230:	movt	r1, #1
   15234:	mov	r0, #0
   15238:	str	lr, [sp, #4]
   1523c:	bl	10ccc <dcgettext@plt>
   15240:	mov	r3, r0
   15244:	movw	r2, #23944	; 0x5d88
   15248:	movt	r2, #1
   1524c:	mov	r1, #0
   15250:	mov	r0, r4
   15254:	bl	10d38 <error@plt>
   15258:	bl	10e70 <abort@plt>
   1525c:	cmp	r1, #0
   15260:	cmpne	r0, #0
   15264:	beq	152b0 <__assert_fail@plt+0x4428>
   15268:	strd	r4, [sp, #-16]!
   1526c:	umull	r4, r5, r0, r1
   15270:	str	r6, [sp, #8]
   15274:	str	lr, [sp, #12]
   15278:	adds	r3, r5, #0
   1527c:	movne	r3, #1
   15280:	cmp	r4, #0
   15284:	blt	15290 <__assert_fail@plt+0x4408>
   15288:	cmp	r3, #0
   1528c:	beq	152bc <__assert_fail@plt+0x4434>
   15290:	bl	10da4 <__errno_location@plt>
   15294:	mov	r3, #12
   15298:	ldrd	r4, [sp]
   1529c:	ldr	r6, [sp, #8]
   152a0:	add	sp, sp, #12
   152a4:	str	r3, [r0]
   152a8:	mov	r0, #0
   152ac:	pop	{pc}		; (ldr pc, [sp], #4)
   152b0:	mov	r1, #1
   152b4:	mov	r0, r1
   152b8:	b	10c3c <calloc@plt>
   152bc:	ldrd	r4, [sp]
   152c0:	ldr	r6, [sp, #8]
   152c4:	ldr	lr, [sp, #12]
   152c8:	add	sp, sp, #16
   152cc:	b	10c3c <calloc@plt>
   152d0:	cmp	r0, #0
   152d4:	beq	152e0 <__assert_fail@plt+0x4458>
   152d8:	blt	152e8 <__assert_fail@plt+0x4460>
   152dc:	b	10d44 <malloc@plt>
   152e0:	mov	r0, #1
   152e4:	b	10d44 <malloc@plt>
   152e8:	str	r4, [sp, #-8]!
   152ec:	str	lr, [sp, #4]
   152f0:	bl	10da4 <__errno_location@plt>
   152f4:	mov	r3, #12
   152f8:	ldr	r4, [sp]
   152fc:	add	sp, sp, #4
   15300:	str	r3, [r0]
   15304:	mov	r0, #0
   15308:	pop	{pc}		; (ldr pc, [sp], #4)
   1530c:	cmp	r0, #0
   15310:	beq	15338 <__assert_fail@plt+0x44b0>
   15314:	cmp	r1, #0
   15318:	str	r4, [sp, #-8]!
   1531c:	str	lr, [sp, #4]
   15320:	beq	15340 <__assert_fail@plt+0x44b8>
   15324:	blt	15354 <__assert_fail@plt+0x44cc>
   15328:	ldr	r4, [sp]
   1532c:	ldr	lr, [sp, #4]
   15330:	add	sp, sp, #8
   15334:	b	10cd8 <realloc@plt>
   15338:	mov	r0, r1
   1533c:	b	152d0 <__assert_fail@plt+0x4448>
   15340:	bl	123d4 <__assert_fail@plt+0x154c>
   15344:	ldr	r4, [sp]
   15348:	add	sp, sp, #4
   1534c:	mov	r0, #0
   15350:	pop	{pc}		; (ldr pc, [sp], #4)
   15354:	bl	10da4 <__errno_location@plt>
   15358:	mov	r3, #12
   1535c:	str	r3, [r0]
   15360:	b	15344 <__assert_fail@plt+0x44bc>
   15364:	strd	r4, [sp, #-16]!
   15368:	mov	r4, r0
   1536c:	str	r6, [sp, #8]
   15370:	str	lr, [sp, #12]
   15374:	bl	10d20 <__fpending@plt>
   15378:	ldr	r5, [r4]
   1537c:	mov	r6, r0
   15380:	mov	r0, r4
   15384:	bl	122c0 <__assert_fail@plt+0x1438>
   15388:	mov	r4, r0
   1538c:	and	r5, r5, #32
   15390:	cmp	r5, #0
   15394:	bne	153cc <__assert_fail@plt+0x4544>
   15398:	cmp	r0, #0
   1539c:	beq	153b8 <__assert_fail@plt+0x4530>
   153a0:	cmp	r6, #0
   153a4:	bne	153e4 <__assert_fail@plt+0x455c>
   153a8:	bl	10da4 <__errno_location@plt>
   153ac:	ldr	r4, [r0]
   153b0:	subs	r4, r4, #9
   153b4:	mvnne	r4, #0
   153b8:	mov	r0, r4
   153bc:	ldrd	r4, [sp]
   153c0:	ldr	r6, [sp, #8]
   153c4:	add	sp, sp, #12
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	cmp	r0, #0
   153d0:	bne	153e4 <__assert_fail@plt+0x455c>
   153d4:	bl	10da4 <__errno_location@plt>
   153d8:	str	r4, [r0]
   153dc:	mvn	r4, #0
   153e0:	b	153b8 <__assert_fail@plt+0x4530>
   153e4:	mvn	r4, #0
   153e8:	b	153b8 <__assert_fail@plt+0x4530>
   153ec:	mov	r0, #14
   153f0:	str	r4, [sp, #-8]!
   153f4:	str	lr, [sp, #4]
   153f8:	bl	10e34 <nl_langinfo@plt>
   153fc:	cmp	r0, #0
   15400:	beq	15424 <__assert_fail@plt+0x459c>
   15404:	ldrb	r2, [r0]
   15408:	movw	r3, #25644	; 0x642c
   1540c:	movt	r3, #1
   15410:	ldr	r4, [sp]
   15414:	add	sp, sp, #4
   15418:	cmp	r2, #0
   1541c:	moveq	r0, r3
   15420:	pop	{pc}		; (ldr pc, [sp], #4)
   15424:	ldr	r4, [sp]
   15428:	add	sp, sp, #4
   1542c:	movw	r0, #25644	; 0x642c
   15430:	movt	r0, #1
   15434:	pop	{pc}		; (ldr pc, [sp], #4)
   15438:	strd	r4, [sp, #-20]!	; 0xffffffec
   1543c:	mov	r5, r2
   15440:	strd	r6, [sp, #8]
   15444:	subs	r6, r0, #0
   15448:	mov	r7, r1
   1544c:	str	lr, [sp, #16]
   15450:	sub	sp, sp, #12
   15454:	addeq	r6, sp, #4
   15458:	mov	r0, r6
   1545c:	bl	10d2c <mbrtowc@plt>
   15460:	cmp	r5, #0
   15464:	cmnne	r0, #3
   15468:	mov	r4, r0
   1546c:	bhi	15488 <__assert_fail@plt+0x4600>
   15470:	mov	r0, r4
   15474:	add	sp, sp, #12
   15478:	ldrd	r4, [sp]
   1547c:	ldrd	r6, [sp, #8]
   15480:	add	sp, sp, #16
   15484:	pop	{pc}		; (ldr pc, [sp], #4)
   15488:	mov	r0, #0
   1548c:	bl	154e0 <__assert_fail@plt+0x4658>
   15490:	cmp	r0, #0
   15494:	bne	15470 <__assert_fail@plt+0x45e8>
   15498:	ldrb	r3, [r7]
   1549c:	mov	r4, #1
   154a0:	str	r3, [r6]
   154a4:	b	15470 <__assert_fail@plt+0x45e8>
   154a8:	umull	r2, r3, r1, r2
   154ac:	cmp	r3, #0
   154b0:	bne	154bc <__assert_fail@plt+0x4634>
   154b4:	mov	r1, r2
   154b8:	b	1530c <__assert_fail@plt+0x4484>
   154bc:	str	r4, [sp, #-8]!
   154c0:	str	lr, [sp, #4]
   154c4:	bl	10da4 <__errno_location@plt>
   154c8:	mov	r3, #12
   154cc:	ldr	r4, [sp]
   154d0:	add	sp, sp, #4
   154d4:	str	r3, [r0]
   154d8:	mov	r0, #0
   154dc:	pop	{pc}		; (ldr pc, [sp], #4)
   154e0:	push	{lr}		; (str lr, [sp, #-4]!)
   154e4:	sub	sp, sp, #268	; 0x10c
   154e8:	movw	r2, #257	; 0x101
   154ec:	add	r1, sp, #4
   154f0:	bl	15538 <__assert_fail@plt+0x46b0>
   154f4:	cmp	r0, #0
   154f8:	movne	r0, #0
   154fc:	bne	15530 <__assert_fail@plt+0x46a8>
   15500:	movw	r1, #25652	; 0x6434
   15504:	movt	r1, #1
   15508:	add	r0, sp, #4
   1550c:	bl	10c60 <strcmp@plt>
   15510:	cmp	r0, #0
   15514:	beq	15530 <__assert_fail@plt+0x46a8>
   15518:	add	r0, sp, #4
   1551c:	movw	r1, #25656	; 0x6438
   15520:	movt	r1, #1
   15524:	bl	10c60 <strcmp@plt>
   15528:	adds	r0, r0, #0
   1552c:	movne	r0, #1
   15530:	add	sp, sp, #268	; 0x10c
   15534:	pop	{pc}		; (ldr pc, [sp], #4)
   15538:	strd	r4, [sp, #-16]!
   1553c:	mov	r5, r1
   15540:	mov	r1, #0
   15544:	mov	r4, r2
   15548:	str	r6, [sp, #8]
   1554c:	str	lr, [sp, #12]
   15550:	bl	10e1c <setlocale@plt>
   15554:	subs	r6, r0, #0
   15558:	beq	155d8 <__assert_fail@plt+0x4750>
   1555c:	bl	10d98 <strlen@plt>
   15560:	cmp	r4, r0
   15564:	bhi	15584 <__assert_fail@plt+0x46fc>
   15568:	cmp	r4, #0
   1556c:	moveq	r0, #34	; 0x22
   15570:	bne	155a8 <__assert_fail@plt+0x4720>
   15574:	ldrd	r4, [sp]
   15578:	ldr	r6, [sp, #8]
   1557c:	add	sp, sp, #12
   15580:	pop	{pc}		; (ldr pc, [sp], #4)
   15584:	add	r2, r0, #1
   15588:	mov	r1, r6
   1558c:	mov	r0, r5
   15590:	bl	10c9c <memcpy@plt>
   15594:	ldrd	r4, [sp]
   15598:	mov	r0, #0
   1559c:	ldr	r6, [sp, #8]
   155a0:	add	sp, sp, #12
   155a4:	pop	{pc}		; (ldr pc, [sp], #4)
   155a8:	sub	r4, r4, #1
   155ac:	mov	r1, r6
   155b0:	mov	r2, r4
   155b4:	mov	r0, r5
   155b8:	bl	10c9c <memcpy@plt>
   155bc:	mov	r3, #0
   155c0:	mov	r0, #34	; 0x22
   155c4:	strb	r3, [r5, r4]
   155c8:	ldrd	r4, [sp]
   155cc:	ldr	r6, [sp, #8]
   155d0:	add	sp, sp, #12
   155d4:	pop	{pc}		; (ldr pc, [sp], #4)
   155d8:	cmp	r4, #0
   155dc:	mov	r0, #22
   155e0:	strbne	r6, [r5]
   155e4:	ldrd	r4, [sp]
   155e8:	ldr	r6, [sp, #8]
   155ec:	add	sp, sp, #12
   155f0:	pop	{pc}		; (ldr pc, [sp], #4)
   155f4:	mov	r1, #0
   155f8:	b	10e1c <setlocale@plt>
   155fc:	cmp	r3, #0
   15600:	cmpeq	r2, #0
   15604:	bne	1561c <__assert_fail@plt+0x4794>
   15608:	cmp	r1, #0
   1560c:	cmpeq	r0, #0
   15610:	mvnne	r1, #0
   15614:	mvnne	r0, #0
   15618:	b	15638 <__assert_fail@plt+0x47b0>
   1561c:	sub	sp, sp, #8
   15620:	push	{sp, lr}
   15624:	bl	15648 <__assert_fail@plt+0x47c0>
   15628:	ldr	lr, [sp, #4]
   1562c:	add	sp, sp, #8
   15630:	pop	{r2, r3}
   15634:	bx	lr
   15638:	push	{r1, lr}
   1563c:	mov	r0, #8
   15640:	bl	10c54 <raise@plt>
   15644:	pop	{r1, pc}
   15648:	cmp	r1, r3
   1564c:	cmpeq	r0, r2
   15650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15654:	mov	r4, r0
   15658:	movcc	r0, #0
   1565c:	mov	r5, r1
   15660:	ldr	lr, [sp, #36]	; 0x24
   15664:	movcc	r1, r0
   15668:	bcc	15764 <__assert_fail@plt+0x48dc>
   1566c:	cmp	r3, #0
   15670:	clzeq	ip, r2
   15674:	clzne	ip, r3
   15678:	addeq	ip, ip, #32
   1567c:	cmp	r5, #0
   15680:	clzeq	r1, r4
   15684:	addeq	r1, r1, #32
   15688:	clzne	r1, r5
   1568c:	sub	ip, ip, r1
   15690:	sub	sl, ip, #32
   15694:	lsl	r9, r3, ip
   15698:	rsb	fp, ip, #32
   1569c:	orr	r9, r9, r2, lsl sl
   156a0:	orr	r9, r9, r2, lsr fp
   156a4:	lsl	r8, r2, ip
   156a8:	cmp	r5, r9
   156ac:	cmpeq	r4, r8
   156b0:	movcc	r0, #0
   156b4:	movcc	r1, r0
   156b8:	bcc	156d4 <__assert_fail@plt+0x484c>
   156bc:	mov	r0, #1
   156c0:	subs	r4, r4, r8
   156c4:	lsl	r1, r0, sl
   156c8:	orr	r1, r1, r0, lsr fp
   156cc:	lsl	r0, r0, ip
   156d0:	sbc	r5, r5, r9
   156d4:	cmp	ip, #0
   156d8:	beq	15764 <__assert_fail@plt+0x48dc>
   156dc:	lsr	r6, r8, #1
   156e0:	orr	r6, r6, r9, lsl #31
   156e4:	lsr	r7, r9, #1
   156e8:	mov	r2, ip
   156ec:	b	15710 <__assert_fail@plt+0x4888>
   156f0:	subs	r3, r4, r6
   156f4:	sbc	r8, r5, r7
   156f8:	adds	r3, r3, r3
   156fc:	adc	r8, r8, r8
   15700:	adds	r4, r3, #1
   15704:	adc	r5, r8, #0
   15708:	subs	r2, r2, #1
   1570c:	beq	1572c <__assert_fail@plt+0x48a4>
   15710:	cmp	r5, r7
   15714:	cmpeq	r4, r6
   15718:	bcs	156f0 <__assert_fail@plt+0x4868>
   1571c:	adds	r4, r4, r4
   15720:	adc	r5, r5, r5
   15724:	subs	r2, r2, #1
   15728:	bne	15710 <__assert_fail@plt+0x4888>
   1572c:	lsr	r3, r4, ip
   15730:	orr	r3, r3, r5, lsl fp
   15734:	lsr	r2, r5, ip
   15738:	orr	r3, r3, r5, lsr sl
   1573c:	adds	r0, r0, r4
   15740:	mov	r4, r3
   15744:	lsl	r3, r2, ip
   15748:	orr	r3, r3, r4, lsl sl
   1574c:	lsl	ip, r4, ip
   15750:	orr	r3, r3, r4, lsr fp
   15754:	adc	r1, r1, r5
   15758:	subs	r0, r0, ip
   1575c:	mov	r5, r2
   15760:	sbc	r1, r1, r3
   15764:	cmp	lr, #0
   15768:	strdne	r4, [lr]
   1576c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15770:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15774:	mov	r7, r0
   15778:	ldr	r6, [pc, #72]	; 157c8 <__assert_fail@plt+0x4940>
   1577c:	ldr	r5, [pc, #72]	; 157cc <__assert_fail@plt+0x4944>
   15780:	add	r6, pc, r6
   15784:	add	r5, pc, r5
   15788:	sub	r6, r6, r5
   1578c:	mov	r8, r1
   15790:	mov	r9, r2
   15794:	bl	10c1c <calloc@plt-0x20>
   15798:	asrs	r6, r6, #2
   1579c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   157a0:	mov	r4, #0
   157a4:	add	r4, r4, #1
   157a8:	ldr	r3, [r5], #4
   157ac:	mov	r2, r9
   157b0:	mov	r1, r8
   157b4:	mov	r0, r7
   157b8:	blx	r3
   157bc:	cmp	r6, r4
   157c0:	bne	157a4 <__assert_fail@plt+0x491c>
   157c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157c8:	andeq	r1, r1, ip, lsl #15
   157cc:	andeq	r1, r1, r4, lsl #15
   157d0:	bx	lr
   157d4:	ldr	r3, [pc, #12]	; 157e8 <__assert_fail@plt+0x4960>
   157d8:	mov	r1, #0
   157dc:	add	r3, pc, r3
   157e0:	ldr	r2, [r3]
   157e4:	b	10db0 <__cxa_atexit@plt>
   157e8:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

000157ec <.fini>:
   157ec:	push	{r3, lr}
   157f0:	pop	{r3, pc}
