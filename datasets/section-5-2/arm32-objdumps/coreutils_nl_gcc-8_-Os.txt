
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010fb4 <.init>:
   10fb4:	push	{r3, lr}
   10fb8:	bl	1195c <__assert_fail@plt+0x658>
   10fbc:	pop	{r3, pc}

Disassembly of section .plt:

00010fc0 <pthread_mutex_unlock@plt-0x14>:
   10fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fc4:	ldr	lr, [pc, #4]	; 10fd0 <pthread_mutex_unlock@plt-0x4>
   10fc8:	add	lr, pc, lr
   10fcc:	ldr	pc, [lr, #8]!
   10fd0:	andeq	r0, r2, r0, lsr r0

00010fd4 <pthread_mutex_unlock@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #32, 20	; 0x20000
   10fdc:	ldr	pc, [ip, #48]!	; 0x30

00010fe0 <calloc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #32, 20	; 0x20000
   10fe8:	ldr	pc, [ip, #40]!	; 0x28

00010fec <fputs_unlocked@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #32, 20	; 0x20000
   10ff4:	ldr	pc, [ip, #32]!

00010ff8 <wctype@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #32, 20	; 0x20000
   11000:	ldr	pc, [ip, #24]!

00011004 <wcrtomb@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #32, 20	; 0x20000
   1100c:	ldr	pc, [ip, #16]!

00011010 <iswctype@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #32, 20	; 0x20000
   11018:	ldr	pc, [ip, #8]!

0001101c <strcmp@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #32, 20	; 0x20000
   11024:	ldr	pc, [ip, #0]!

00011028 <posix_fadvise64@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #126976	; 0x1f000
   11030:	ldr	pc, [ip, #4088]!	; 0xff8

00011034 <pthread_mutex_destroy@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #126976	; 0x1f000
   1103c:	ldr	pc, [ip, #4080]!	; 0xff0

00011040 <fflush@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #126976	; 0x1f000
   11048:	ldr	pc, [ip, #4072]!	; 0xfe8

0001104c <memmove@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #126976	; 0x1f000
   11054:	ldr	pc, [ip, #4064]!	; 0xfe0

00011058 <free@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #126976	; 0x1f000
   11060:	ldr	pc, [ip, #4056]!	; 0xfd8

00011064 <pthread_mutex_lock@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #126976	; 0x1f000
   1106c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011070 <_exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #126976	; 0x1f000
   11078:	ldr	pc, [ip, #4040]!	; 0xfc8

0001107c <memcpy@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #126976	; 0x1f000
   11084:	ldr	pc, [ip, #4032]!	; 0xfc0

00011088 <tolower@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #126976	; 0x1f000
   11090:	ldr	pc, [ip, #4024]!	; 0xfb8

00011094 <pthread_mutex_init@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #126976	; 0x1f000
   1109c:	ldr	pc, [ip, #4016]!	; 0xfb0

000110a0 <towlower@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #126976	; 0x1f000
   110a8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110ac <mbsinit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #126976	; 0x1f000
   110b4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110b8 <fwrite_unlocked@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #126976	; 0x1f000
   110c0:	ldr	pc, [ip, #3992]!	; 0xf98

000110c4 <memcmp@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #126976	; 0x1f000
   110cc:	ldr	pc, [ip, #3984]!	; 0xf90

000110d0 <stpcpy@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #126976	; 0x1f000
   110d8:	ldr	pc, [ip, #3976]!	; 0xf88

000110dc <fputc_unlocked@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #126976	; 0x1f000
   110e4:	ldr	pc, [ip, #3968]!	; 0xf80

000110e8 <getc_unlocked@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #126976	; 0x1f000
   110f0:	ldr	pc, [ip, #3960]!	; 0xf78

000110f4 <dcgettext@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #126976	; 0x1f000
   110fc:	ldr	pc, [ip, #3952]!	; 0xf70

00011100 <realloc@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #3944]!	; 0xf68

0001110c <textdomain@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #3936]!	; 0xf60

00011118 <iswprint@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #3928]!	; 0xf58

00011124 <lseek64@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #3920]!	; 0xf50

00011130 <__ctype_get_mb_cur_max@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #126976	; 0x1f000
   11138:	ldr	pc, [ip, #3912]!	; 0xf48

0001113c <strcpy@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #126976	; 0x1f000
   11144:	ldr	pc, [ip, #3904]!	; 0xf40

00011148 <__fpending@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #126976	; 0x1f000
   11150:	ldr	pc, [ip, #3896]!	; 0xf38

00011154 <ferror_unlocked@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #126976	; 0x1f000
   1115c:	ldr	pc, [ip, #3888]!	; 0xf30

00011160 <mbrtowc@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #126976	; 0x1f000
   11168:	ldr	pc, [ip, #3880]!	; 0xf28

0001116c <error@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #126976	; 0x1f000
   11174:	ldr	pc, [ip, #3872]!	; 0xf20

00011178 <malloc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #126976	; 0x1f000
   11180:	ldr	pc, [ip, #3864]!	; 0xf18

00011184 <__libc_start_main@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #126976	; 0x1f000
   1118c:	ldr	pc, [ip, #3856]!	; 0xf10

00011190 <__freading@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #126976	; 0x1f000
   11198:	ldr	pc, [ip, #3848]!	; 0xf08

0001119c <__gmon_start__@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #126976	; 0x1f000
   111a4:	ldr	pc, [ip, #3840]!	; 0xf00

000111a8 <getopt_long@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #126976	; 0x1f000
   111b0:	ldr	pc, [ip, #3832]!	; 0xef8

000111b4 <__ctype_b_loc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #126976	; 0x1f000
   111bc:	ldr	pc, [ip, #3824]!	; 0xef0

000111c0 <exit@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #126976	; 0x1f000
   111c8:	ldr	pc, [ip, #3816]!	; 0xee8

000111cc <strlen@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #126976	; 0x1f000
   111d4:	ldr	pc, [ip, #3808]!	; 0xee0

000111d8 <strchr@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #126976	; 0x1f000
   111e0:	ldr	pc, [ip, #3800]!	; 0xed8

000111e4 <__errno_location@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #126976	; 0x1f000
   111ec:	ldr	pc, [ip, #3792]!	; 0xed0

000111f0 <iswalnum@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #126976	; 0x1f000
   111f8:	ldr	pc, [ip, #3784]!	; 0xec8

000111fc <__cxa_atexit@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #126976	; 0x1f000
   11204:	ldr	pc, [ip, #3776]!	; 0xec0

00011208 <memset@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #126976	; 0x1f000
   11210:	ldr	pc, [ip, #3768]!	; 0xeb8

00011214 <btowc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #126976	; 0x1f000
   1121c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011220 <__printf_chk@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #126976	; 0x1f000
   11228:	ldr	pc, [ip, #3752]!	; 0xea8

0001122c <fileno@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #126976	; 0x1f000
   11234:	ldr	pc, [ip, #3744]!	; 0xea0

00011238 <__fprintf_chk@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #126976	; 0x1f000
   11240:	ldr	pc, [ip, #3736]!	; 0xe98

00011244 <strtoimax@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #126976	; 0x1f000
   1124c:	ldr	pc, [ip, #3728]!	; 0xe90

00011250 <fclose@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #126976	; 0x1f000
   11258:	ldr	pc, [ip, #3720]!	; 0xe88

0001125c <fseeko64@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #126976	; 0x1f000
   11264:	ldr	pc, [ip, #3712]!	; 0xe80

00011268 <setlocale@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #126976	; 0x1f000
   11270:	ldr	pc, [ip, #3704]!	; 0xe78

00011274 <toupper@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #126976	; 0x1f000
   1127c:	ldr	pc, [ip, #3696]!	; 0xe70

00011280 <strrchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #126976	; 0x1f000
   11288:	ldr	pc, [ip, #3688]!	; 0xe68

0001128c <nl_langinfo@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #126976	; 0x1f000
   11294:	ldr	pc, [ip, #3680]!	; 0xe60

00011298 <clearerr_unlocked@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #126976	; 0x1f000
   112a0:	ldr	pc, [ip, #3672]!	; 0xe58

000112a4 <fopen64@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #126976	; 0x1f000
   112ac:	ldr	pc, [ip, #3664]!	; 0xe50

000112b0 <bindtextdomain@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3656]!	; 0xe48

000112bc <towupper@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3648]!	; 0xe40

000112c8 <fputs@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3640]!	; 0xe38

000112d4 <strncmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3632]!	; 0xe30

000112e0 <abort@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3624]!	; 0xe28

000112ec <feof_unlocked@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3616]!	; 0xe20

000112f8 <putchar_unlocked@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3608]!	; 0xe18

00011304 <__assert_fail@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3600]!	; 0xe10

Disassembly of section .text:

00011310 <.text>:
   11310:	push	{r4, lr}
   11314:	bl	111e4 <__errno_location@plt>
   11318:	mov	r3, #12
   1131c:	str	r3, [r0]
   11320:	mov	r0, #0
   11324:	pop	{r4, pc}
   11328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1132c:	mov	r8, r0
   11330:	sub	sp, sp, #36	; 0x24
   11334:	mov	r9, r1
   11338:	mov	r4, #1
   1133c:	ldr	r0, [r1]
   11340:	bl	1257c <__assert_fail@plt+0x1278>
   11344:	ldr	r1, [pc, #1332]	; 11880 <__assert_fail@plt+0x57c>
   11348:	mov	r0, #6
   1134c:	bl	11268 <setlocale@plt>
   11350:	ldr	r5, [pc, #1324]	; 11884 <__assert_fail@plt+0x580>
   11354:	ldr	r1, [pc, #1324]	; 11888 <__assert_fail@plt+0x584>
   11358:	ldr	r0, [pc, #1324]	; 1188c <__assert_fail@plt+0x588>
   1135c:	bl	112b0 <bindtextdomain@plt>
   11360:	ldr	fp, [pc, #1320]	; 11890 <__assert_fail@plt+0x58c>
   11364:	ldr	r6, [pc, #1320]	; 11894 <__assert_fail@plt+0x590>
   11368:	ldr	r0, [pc, #1308]	; 1188c <__assert_fail@plt+0x588>
   1136c:	bl	1110c <textdomain@plt>
   11370:	ldr	r0, [pc, #1312]	; 11898 <__assert_fail@plt+0x594>
   11374:	bl	1fbfc <__assert_fail@plt+0xe8f8>
   11378:	mov	r3, #0
   1137c:	strb	r3, [r5, #9]
   11380:	mov	r7, #0
   11384:	ldr	sl, [pc, #1296]	; 1189c <__assert_fail@plt+0x598>
   11388:	b	113dc <__assert_fail@plt+0xd8>
   1138c:	cmp	r0, #105	; 0x69
   11390:	beq	11558 <__assert_fail@plt+0x254>
   11394:	bgt	1140c <__assert_fail@plt+0x108>
   11398:	cmp	r0, #98	; 0x62
   1139c:	beq	114c4 <__assert_fail@plt+0x1c0>
   113a0:	bgt	113c0 <__assert_fail@plt+0xbc>
   113a4:	cmn	r0, #3
   113a8:	beq	116fc <__assert_fail@plt+0x3f8>
   113ac:	cmn	r0, #2
   113b0:	mov	r4, #0
   113b4:	bne	113dc <__assert_fail@plt+0xd8>
   113b8:	mov	r0, r4
   113bc:	bl	11ed0 <__assert_fail@plt+0xbcc>
   113c0:	cmp	r0, #102	; 0x66
   113c4:	beq	114e8 <__assert_fail@plt+0x1e4>
   113c8:	cmp	r0, #104	; 0x68
   113cc:	beq	11478 <__assert_fail@plt+0x174>
   113d0:	cmp	r0, #100	; 0x64
   113d4:	beq	116b0 <__assert_fail@plt+0x3ac>
   113d8:	mov	r4, #0
   113dc:	mov	r3, fp
   113e0:	mov	r2, sl
   113e4:	str	r7, [sp]
   113e8:	mov	r1, r9
   113ec:	mov	r0, r8
   113f0:	bl	111a8 <getopt_long@plt>
   113f4:	cmn	r0, #1
   113f8:	bne	1138c <__assert_fail@plt+0x88>
   113fc:	cmp	r4, #0
   11400:	bne	11730 <__assert_fail@plt+0x42c>
   11404:	mov	r0, #1
   11408:	b	113bc <__assert_fail@plt+0xb8>
   1140c:	cmp	r0, #112	; 0x70
   11410:	beq	115a4 <__assert_fail@plt+0x2a0>
   11414:	bgt	11450 <__assert_fail@plt+0x14c>
   11418:	cmp	r0, #108	; 0x6c
   1141c:	beq	115b0 <__assert_fail@plt+0x2ac>
   11420:	cmp	r0, #110	; 0x6e
   11424:	bne	113d8 <__assert_fail@plt+0xd4>
   11428:	ldr	r7, [r6]
   1142c:	ldr	r1, [pc, #1132]	; 118a0 <__assert_fail@plt+0x59c>
   11430:	mov	r0, r7
   11434:	bl	1101c <strcmp@plt>
   11438:	cmp	r0, #0
   1143c:	bne	11648 <__assert_fail@plt+0x344>
   11440:	ldr	r3, [pc, #1116]	; 118a4 <__assert_fail@plt+0x5a0>
   11444:	ldr	r2, [pc, #1116]	; 118a8 <__assert_fail@plt+0x5a4>
   11448:	str	r2, [r3, #20]
   1144c:	b	11380 <__assert_fail@plt+0x7c>
   11450:	cmp	r0, #118	; 0x76
   11454:	beq	1150c <__assert_fail@plt+0x208>
   11458:	cmp	r0, #119	; 0x77
   1145c:	beq	115fc <__assert_fail@plt+0x2f8>
   11460:	cmp	r0, #115	; 0x73
   11464:	bne	113d8 <__assert_fail@plt+0xd4>
   11468:	ldr	r3, [pc, #1076]	; 118a4 <__assert_fail@plt+0x5a0>
   1146c:	ldr	r2, [r6]
   11470:	str	r2, [r3, #24]
   11474:	b	11380 <__assert_fail@plt+0x7c>
   11478:	ldr	r2, [pc, #1068]	; 118ac <__assert_fail@plt+0x5a8>
   1147c:	ldr	r0, [pc, #1068]	; 118b0 <__assert_fail@plt+0x5ac>
   11480:	sub	r1, r2, #44	; 0x2c
   11484:	bl	11a10 <__assert_fail@plt+0x70c>
   11488:	subs	r7, r0, #0
   1148c:	moveq	r2, #5
   11490:	ldreq	r1, [pc, #1052]	; 118b4 <__assert_fail@plt+0x5b0>
   11494:	bne	11380 <__assert_fail@plt+0x7c>
   11498:	bl	110f4 <dcgettext@plt>
   1149c:	mov	r4, r0
   114a0:	ldr	r0, [r6]
   114a4:	bl	13b7c <__assert_fail@plt+0x2878>
   114a8:	mov	r3, r0
   114ac:	mov	r2, r4
   114b0:	mov	r1, r7
   114b4:	mov	r0, r7
   114b8:	bl	1116c <error@plt>
   114bc:	mov	r4, #0
   114c0:	b	11380 <__assert_fail@plt+0x7c>
   114c4:	ldr	r2, [pc, #1004]	; 118b8 <__assert_fail@plt+0x5b4>
   114c8:	ldr	r0, [pc, #1004]	; 118bc <__assert_fail@plt+0x5b8>
   114cc:	sub	r1, r2, #332	; 0x14c
   114d0:	bl	11a10 <__assert_fail@plt+0x70c>
   114d4:	subs	r7, r0, #0
   114d8:	bne	11380 <__assert_fail@plt+0x7c>
   114dc:	mov	r2, #5
   114e0:	ldr	r1, [pc, #984]	; 118c0 <__assert_fail@plt+0x5bc>
   114e4:	b	11498 <__assert_fail@plt+0x194>
   114e8:	ldr	r2, [pc, #980]	; 118c4 <__assert_fail@plt+0x5c0>
   114ec:	ldr	r0, [pc, #980]	; 118c8 <__assert_fail@plt+0x5c4>
   114f0:	sub	r1, r2, #620	; 0x26c
   114f4:	bl	11a10 <__assert_fail@plt+0x70c>
   114f8:	subs	r7, r0, #0
   114fc:	moveq	r2, #5
   11500:	ldreq	r1, [pc, #964]	; 118cc <__assert_fail@plt+0x5c8>
   11504:	bne	11380 <__assert_fail@plt+0x7c>
   11508:	b	11498 <__assert_fail@plt+0x194>
   1150c:	mov	r2, #5
   11510:	ldr	r1, [pc, #952]	; 118d0 <__assert_fail@plt+0x5cc>
   11514:	mov	r0, #0
   11518:	ldr	sl, [r6]
   1151c:	bl	110f4 <dcgettext@plt>
   11520:	ldr	r3, [pc, #856]	; 11880 <__assert_fail@plt+0x57c>
   11524:	mvn	r2, #0
   11528:	str	r3, [sp, #8]
   1152c:	mvn	r3, #-2147483648	; 0x80000000
   11530:	str	r0, [sp, #12]
   11534:	mov	r0, sl
   11538:	strd	r2, [sp]
   1153c:	mov	r3, #-2147483648	; 0x80000000
   11540:	mov	r2, #0
   11544:	str	r7, [sp, #16]
   11548:	bl	1f2a0 <__assert_fail@plt+0xdf9c>
   1154c:	ldr	r3, [pc, #848]	; 118a4 <__assert_fail@plt+0x5a0>
   11550:	strd	r0, [r3, #8]
   11554:	b	11380 <__assert_fail@plt+0x7c>
   11558:	mov	r2, #5
   1155c:	ldr	r1, [pc, #880]	; 118d4 <__assert_fail@plt+0x5d0>
   11560:	mov	r0, #0
   11564:	ldr	sl, [r6]
   11568:	bl	110f4 <dcgettext@plt>
   1156c:	ldr	r3, [pc, #780]	; 11880 <__assert_fail@plt+0x57c>
   11570:	mvn	r2, #0
   11574:	str	r3, [sp, #8]
   11578:	mvn	r3, #-2147483648	; 0x80000000
   1157c:	str	r0, [sp, #12]
   11580:	mov	r0, sl
   11584:	strd	r2, [sp]
   11588:	mov	r3, #-2147483648	; 0x80000000
   1158c:	mov	r2, #0
   11590:	str	r7, [sp, #16]
   11594:	bl	1f2a0 <__assert_fail@plt+0xdf9c>
   11598:	ldr	r3, [pc, #772]	; 118a4 <__assert_fail@plt+0x5a0>
   1159c:	strd	r0, [r3, #32]
   115a0:	b	11380 <__assert_fail@plt+0x7c>
   115a4:	ldr	r3, [pc, #760]	; 118a4 <__assert_fail@plt+0x5a0>
   115a8:	strb	r7, [r3]
   115ac:	b	11380 <__assert_fail@plt+0x7c>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #796]	; 118d8 <__assert_fail@plt+0x5d4>
   115b8:	mov	r0, #0
   115bc:	ldr	sl, [r6]
   115c0:	bl	110f4 <dcgettext@plt>
   115c4:	ldr	r3, [pc, #692]	; 11880 <__assert_fail@plt+0x57c>
   115c8:	mvn	r2, #0
   115cc:	str	r3, [sp, #8]
   115d0:	mvn	r3, #-2147483648	; 0x80000000
   115d4:	str	r0, [sp, #12]
   115d8:	mov	r0, sl
   115dc:	strd	r2, [sp]
   115e0:	mov	r3, #0
   115e4:	mov	r2, #1
   115e8:	str	r7, [sp, #16]
   115ec:	bl	1f2a0 <__assert_fail@plt+0xdf9c>
   115f0:	ldr	r3, [pc, #684]	; 118a4 <__assert_fail@plt+0x5a0>
   115f4:	strd	r0, [r3, #56]	; 0x38
   115f8:	b	11380 <__assert_fail@plt+0x7c>
   115fc:	mov	r2, #5
   11600:	ldr	r1, [pc, #724]	; 118dc <__assert_fail@plt+0x5d8>
   11604:	mov	r0, #0
   11608:	ldr	sl, [r6]
   1160c:	bl	110f4 <dcgettext@plt>
   11610:	ldr	r3, [pc, #616]	; 11880 <__assert_fail@plt+0x57c>
   11614:	mvn	r2, #-2147483648	; 0x80000000
   11618:	str	r3, [sp, #8]
   1161c:	mov	r3, #0
   11620:	str	r0, [sp, #12]
   11624:	mov	r0, sl
   11628:	strd	r2, [sp]
   1162c:	mov	r3, #0
   11630:	mov	r2, #1
   11634:	str	r7, [sp, #16]
   11638:	bl	1f2a0 <__assert_fail@plt+0xdf9c>
   1163c:	ldr	r3, [pc, #608]	; 118a4 <__assert_fail@plt+0x5a0>
   11640:	str	r0, [r3, #16]
   11644:	b	11380 <__assert_fail@plt+0x7c>
   11648:	ldr	r1, [pc, #656]	; 118e0 <__assert_fail@plt+0x5dc>
   1164c:	mov	r0, r7
   11650:	bl	1101c <strcmp@plt>
   11654:	cmp	r0, #0
   11658:	ldreq	r3, [pc, #580]	; 118a4 <__assert_fail@plt+0x5a0>
   1165c:	ldreq	r2, [pc, #640]	; 118e4 <__assert_fail@plt+0x5e0>
   11660:	beq	11448 <__assert_fail@plt+0x144>
   11664:	ldr	r1, [pc, #636]	; 118e8 <__assert_fail@plt+0x5e4>
   11668:	mov	r0, r7
   1166c:	bl	1101c <strcmp@plt>
   11670:	cmp	r0, #0
   11674:	ldreq	r3, [pc, #552]	; 118a4 <__assert_fail@plt+0x5a0>
   11678:	ldreq	r2, [pc, #620]	; 118ec <__assert_fail@plt+0x5e8>
   1167c:	beq	11448 <__assert_fail@plt+0x144>
   11680:	mov	r2, #5
   11684:	ldr	r1, [pc, #612]	; 118f0 <__assert_fail@plt+0x5ec>
   11688:	mov	r0, #0
   1168c:	bl	110f4 <dcgettext@plt>
   11690:	mov	r4, r0
   11694:	ldr	r0, [r6]
   11698:	bl	13b7c <__assert_fail@plt+0x2878>
   1169c:	mov	r1, #0
   116a0:	mov	r3, r0
   116a4:	mov	r2, r4
   116a8:	mov	r0, r1
   116ac:	b	114b8 <__assert_fail@plt+0x1b4>
   116b0:	ldr	r7, [r6]
   116b4:	mov	r0, r7
   116b8:	bl	111cc <strlen@plt>
   116bc:	ldr	r3, [pc, #480]	; 118a4 <__assert_fail@plt+0x5a0>
   116c0:	sub	r0, r0, #1
   116c4:	cmp	r0, #1
   116c8:	ldrls	r2, [r3, #40]	; 0x28
   116cc:	bls	116e8 <__assert_fail@plt+0x3e4>
   116d0:	str	r7, [r3, #40]	; 0x28
   116d4:	b	11380 <__assert_fail@plt+0x7c>
   116d8:	add	r1, r3, #1
   116dc:	str	r1, [r6]
   116e0:	ldrb	r3, [r3]
   116e4:	strb	r3, [r2], #1
   116e8:	ldr	r3, [r6]
   116ec:	ldrb	r1, [r3]
   116f0:	cmp	r1, #0
   116f4:	bne	116d8 <__assert_fail@plt+0x3d4>
   116f8:	b	11380 <__assert_fail@plt+0x7c>
   116fc:	ldr	r3, [pc, #496]	; 118f4 <__assert_fail@plt+0x5f0>
   11700:	ldr	r0, [pc, #496]	; 118f8 <__assert_fail@plt+0x5f4>
   11704:	ldr	r2, [pc, #496]	; 118fc <__assert_fail@plt+0x5f8>
   11708:	stmib	sp, {r3, r7}
   1170c:	ldr	r3, [pc, #492]	; 11900 <__assert_fail@plt+0x5fc>
   11710:	ldr	r1, [pc, #492]	; 11904 <__assert_fail@plt+0x600>
   11714:	str	r3, [sp]
   11718:	ldr	r3, [pc, #488]	; 11908 <__assert_fail@plt+0x604>
   1171c:	ldr	r0, [r0]
   11720:	ldr	r3, [r3]
   11724:	bl	1eddc <__assert_fail@plt+0xdad8>
   11728:	mov	r0, #0
   1172c:	bl	111c0 <exit@plt>
   11730:	ldr	r6, [pc, #364]	; 118a4 <__assert_fail@plt+0x5a0>
   11734:	ldr	r0, [r6, #40]	; 0x28
   11738:	bl	111cc <strlen@plt>
   1173c:	lsl	r2, r0, #1
   11740:	mov	fp, r0
   11744:	add	r0, r2, r0
   11748:	str	r2, [sp, #28]
   1174c:	str	r0, [r5, #28]
   11750:	add	r0, r0, #1
   11754:	bl	1eea4 <__assert_fail@plt+0xdba0>
   11758:	ldr	sl, [r6, #40]	; 0x28
   1175c:	str	r0, [sp, #24]
   11760:	str	r0, [r5, #32]
   11764:	mov	r1, sl
   11768:	bl	110d0 <stpcpy@plt>
   1176c:	mov	r1, sl
   11770:	bl	110d0 <stpcpy@plt>
   11774:	mov	r1, sl
   11778:	bl	1113c <strcpy@plt>
   1177c:	ldr	r3, [sp, #24]
   11780:	str	fp, [r5, #24]
   11784:	ldr	r2, [sp, #28]
   11788:	ldr	r0, [pc, #380]	; 1190c <__assert_fail@plt+0x608>
   1178c:	add	sl, r3, fp
   11790:	str	r2, [r5, #36]	; 0x24
   11794:	str	sl, [r5, #40]	; 0x28
   11798:	add	sl, sl, fp
   1179c:	str	sl, [r5, #44]	; 0x2c
   117a0:	bl	12488 <__assert_fail@plt+0x1184>
   117a4:	ldr	r0, [r6, #24]
   117a8:	bl	111cc <strlen@plt>
   117ac:	mov	sl, r0
   117b0:	ldr	r0, [r6, #16]
   117b4:	add	r0, r0, #1
   117b8:	add	r0, r0, sl
   117bc:	bl	1eea4 <__assert_fail@plt+0xdba0>
   117c0:	ldr	r2, [r6, #16]
   117c4:	mov	r1, #32
   117c8:	str	r0, [r5, #160]	; 0xa0
   117cc:	add	sl, sl, r2
   117d0:	mov	r2, sl
   117d4:	bl	11208 <memset@plt>
   117d8:	ldrd	r2, [r6, #8]
   117dc:	strb	r7, [r0, sl]
   117e0:	strd	r2, [r5]
   117e4:	ldr	r3, [r6, #48]	; 0x30
   117e8:	ldr	r6, [pc, #288]	; 11910 <__assert_fail@plt+0x60c>
   117ec:	str	r3, [r5, #48]	; 0x30
   117f0:	ldr	r3, [pc, #284]	; 11914 <__assert_fail@plt+0x610>
   117f4:	str	r3, [r5, #52]	; 0x34
   117f8:	ldr	r3, [r6]
   117fc:	cmp	r3, r8
   11800:	bne	11860 <__assert_fail@plt+0x55c>
   11804:	ldr	r0, [pc, #268]	; 11918 <__assert_fail@plt+0x614>
   11808:	bl	11b84 <__assert_fail@plt+0x880>
   1180c:	mov	r4, r0
   11810:	ldrb	r3, [r5, #9]
   11814:	cmp	r3, #0
   11818:	beq	11870 <__assert_fail@plt+0x56c>
   1181c:	ldr	r3, [pc, #248]	; 1191c <__assert_fail@plt+0x618>
   11820:	ldr	r0, [r3]
   11824:	bl	122f8 <__assert_fail@plt+0xff4>
   11828:	cmn	r0, #1
   1182c:	bne	11870 <__assert_fail@plt+0x56c>
   11830:	bl	111e4 <__errno_location@plt>
   11834:	ldr	r2, [pc, #220]	; 11918 <__assert_fail@plt+0x614>
   11838:	ldr	r1, [r0]
   1183c:	mov	r0, #1
   11840:	bl	1116c <error@plt>
   11844:	ldr	r0, [r9, r3, lsl #2]
   11848:	bl	11b84 <__assert_fail@plt+0x880>
   1184c:	ldr	r3, [r6]
   11850:	and	r4, r4, r0
   11854:	uxtb	r4, r4
   11858:	add	r3, r3, #1
   1185c:	str	r3, [r6]
   11860:	ldr	r3, [r6]
   11864:	cmp	r3, r8
   11868:	blt	11844 <__assert_fail@plt+0x540>
   1186c:	b	11810 <__assert_fail@plt+0x50c>
   11870:	eor	r0, r4, #1
   11874:	uxtb	r0, r0
   11878:	add	sp, sp, #36	; 0x24
   1187c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11880:	andeq	r0, r2, r6, lsl r8
   11884:	andeq	r1, r3, r8, ror #3
   11888:	muleq	r2, sp, r5
   1188c:	strdeq	r0, [r2], -sl
   11890:	andeq	pc, r1, r4, ror ip	; <UNPREDICTABLE>
   11894:	andeq	r1, r3, r0, ror #3
   11898:	strdeq	r2, [r1], -r0
   1189c:	andeq	r0, r2, r3, ror #13
   118a0:	muleq	r2, sl, r6
   118a4:	andeq	r1, r3, r0, lsr r1
   118a8:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   118ac:	andeq	r1, r3, ip, lsl #5
   118b0:	andeq	r1, r3, r4, ror #2
   118b4:			; <UNDEFINED> instruction: 0x000205b5
   118b8:	andeq	r1, r3, ip, lsl #7
   118bc:	andeq	r1, r3, r0, ror #2
   118c0:	ldrdeq	r0, [r2], -r8
   118c4:	andeq	r1, r3, ip, lsl #9
   118c8:	andeq	r1, r3, ip, asr r1
   118cc:	strdeq	r0, [r2], -r9
   118d0:	andeq	r0, r2, ip, lsl r6
   118d4:	andeq	r0, r2, r9, lsr r6
   118d8:	andeq	r0, r2, r7, asr r6
   118dc:	andeq	r0, r2, sl, ror r6
   118e0:	muleq	r2, sp, r6
   118e4:	andeq	pc, r1, r1, ror #24
   118e8:	andeq	r0, r2, r0, lsr #13
   118ec:	andeq	pc, r1, r9, ror #24
   118f0:	andeq	r0, r2, r3, lsr #13
   118f4:	andeq	r0, r2, r5, asr #13
   118f8:	ldrdeq	r1, [r3], -ip
   118fc:	strdeq	r0, [r2], -r6
   11900:	ldrdeq	r0, [r2], -r5
   11904:	andeq	pc, r1, ip, lsl #27
   11908:	andeq	r1, r3, r4, ror r1
   1190c:	strdeq	r1, [r3], -r4
   11910:	andeq	r1, r3, r8, asr #3
   11914:	andeq	r1, r3, r0, asr #4
   11918:	andeq	r0, r2, fp, ror r8
   1191c:	ldrdeq	r1, [r3], -r8
   11920:	mov	fp, #0
   11924:	mov	lr, #0
   11928:	pop	{r1}		; (ldr r1, [sp], #4)
   1192c:	mov	r2, sp
   11930:	push	{r2}		; (str r2, [sp, #-4]!)
   11934:	push	{r0}		; (str r0, [sp, #-4]!)
   11938:	ldr	ip, [pc, #16]	; 11950 <__assert_fail@plt+0x64c>
   1193c:	push	{ip}		; (str ip, [sp, #-4]!)
   11940:	ldr	r0, [pc, #12]	; 11954 <__assert_fail@plt+0x650>
   11944:	ldr	r3, [pc, #12]	; 11958 <__assert_fail@plt+0x654>
   11948:	bl	11184 <__libc_start_main@plt>
   1194c:	bl	112e0 <abort@plt>
   11950:	strdeq	pc, [r1], -r8
   11954:	andeq	r1, r1, r8, lsr #6
   11958:	muleq	r1, r8, fp
   1195c:	ldr	r3, [pc, #20]	; 11978 <__assert_fail@plt+0x674>
   11960:	ldr	r2, [pc, #20]	; 1197c <__assert_fail@plt+0x678>
   11964:	add	r3, pc, r3
   11968:	ldr	r2, [r3, r2]
   1196c:	cmp	r2, #0
   11970:	bxeq	lr
   11974:	b	1119c <__gmon_start__@plt>
   11978:	muleq	r1, r4, r6
   1197c:	andeq	r0, r0, r0, lsr #2
   11980:	ldr	r0, [pc, #24]	; 119a0 <__assert_fail@plt+0x69c>
   11984:	ldr	r3, [pc, #24]	; 119a4 <__assert_fail@plt+0x6a0>
   11988:	cmp	r3, r0
   1198c:	bxeq	lr
   11990:	ldr	r3, [pc, #16]	; 119a8 <__assert_fail@plt+0x6a4>
   11994:	cmp	r3, #0
   11998:	bxeq	lr
   1199c:	bx	r3
   119a0:			; <UNDEFINED> instruction: 0x000311bc
   119a4:			; <UNDEFINED> instruction: 0x000311bc
   119a8:	andeq	r0, r0, r0
   119ac:	ldr	r0, [pc, #36]	; 119d8 <__assert_fail@plt+0x6d4>
   119b0:	ldr	r1, [pc, #36]	; 119dc <__assert_fail@plt+0x6d8>
   119b4:	sub	r1, r1, r0
   119b8:	asr	r1, r1, #2
   119bc:	add	r1, r1, r1, lsr #31
   119c0:	asrs	r1, r1, #1
   119c4:	bxeq	lr
   119c8:	ldr	r3, [pc, #16]	; 119e0 <__assert_fail@plt+0x6dc>
   119cc:	cmp	r3, #0
   119d0:	bxeq	lr
   119d4:	bx	r3
   119d8:			; <UNDEFINED> instruction: 0x000311bc
   119dc:			; <UNDEFINED> instruction: 0x000311bc
   119e0:	andeq	r0, r0, r0
   119e4:	push	{r4, lr}
   119e8:	ldr	r4, [pc, #24]	; 11a08 <__assert_fail@plt+0x704>
   119ec:	ldrb	r3, [r4]
   119f0:	cmp	r3, #0
   119f4:	popne	{r4, pc}
   119f8:	bl	11980 <__assert_fail@plt+0x67c>
   119fc:	mov	r3, #1
   11a00:	strb	r3, [r4]
   11a04:	pop	{r4, pc}
   11a08:	andeq	r1, r3, r4, ror #3
   11a0c:	b	119ac <__assert_fail@plt+0x6a8>
   11a10:	push	{r4, r5, r6, lr}
   11a14:	ldr	lr, [pc, #160]	; 11abc <__assert_fail@plt+0x7b8>
   11a18:	ldr	r3, [lr]
   11a1c:	ldrb	ip, [r3]
   11a20:	cmp	ip, #110	; 0x6e
   11a24:	beq	11a34 <__assert_fail@plt+0x730>
   11a28:	bhi	11a40 <__assert_fail@plt+0x73c>
   11a2c:	cmp	ip, #97	; 0x61
   11a30:	bne	11ab4 <__assert_fail@plt+0x7b0>
   11a34:	str	r3, [r0]
   11a38:	mov	r0, #1
   11a3c:	pop	{r4, r5, r6, pc}
   11a40:	cmp	ip, #112	; 0x70
   11a44:	beq	11a50 <__assert_fail@plt+0x74c>
   11a48:	cmp	ip, #116	; 0x74
   11a4c:	b	11a30 <__assert_fail@plt+0x72c>
   11a50:	mov	r4, r1
   11a54:	add	r1, r3, #1
   11a58:	mov	r5, #0
   11a5c:	str	r1, [lr]
   11a60:	str	r3, [r0]
   11a64:	ldr	r6, [lr]
   11a68:	str	r5, [r4]
   11a6c:	ldr	r3, [pc, #76]	; 11ac0 <__assert_fail@plt+0x7bc>
   11a70:	str	r2, [r4, #16]
   11a74:	movw	r2, #710	; 0x2c6
   11a78:	str	r5, [r4, #4]
   11a7c:	mov	r0, r6
   11a80:	str	r5, [r4, #20]
   11a84:	str	r2, [r3]
   11a88:	bl	111cc <strlen@plt>
   11a8c:	mov	r1, r0
   11a90:	mov	r2, r4
   11a94:	mov	r0, r6
   11a98:	bl	1e0b0 <__assert_fail@plt+0xcdac>
   11a9c:	subs	r3, r0, #0
   11aa0:	beq	11a38 <__assert_fail@plt+0x734>
   11aa4:	ldr	r2, [pc, #24]	; 11ac4 <__assert_fail@plt+0x7c0>
   11aa8:	mov	r1, r5
   11aac:	mov	r0, #1
   11ab0:	bl	1116c <error@plt>
   11ab4:	mov	r0, #0
   11ab8:	pop	{r4, r5, r6, pc}
   11abc:	andeq	r1, r3, r0, ror #3
   11ac0:	andeq	r1, r3, r8, asr #13
   11ac4:	ldrdeq	r0, [r2], -r5
   11ac8:	ldr	r2, [pc, #32]	; 11af0 <__assert_fail@plt+0x7ec>
   11acc:	ldrb	r3, [r2]
   11ad0:	cmp	r3, #0
   11ad4:	bxeq	lr
   11ad8:	ldr	r3, [pc, #20]	; 11af4 <__assert_fail@plt+0x7f0>
   11adc:	ldrd	r0, [r2, #8]
   11ae0:	mov	r2, #0
   11ae4:	strd	r0, [r3]
   11ae8:	strb	r2, [r3, #8]
   11aec:	bx	lr
   11af0:	andeq	r1, r3, r0, lsr r1
   11af4:	andeq	r1, r3, r8, ror #3
   11af8:	push	{r4, r5, r6, r7, lr}
   11afc:	sub	sp, sp, #20
   11b00:	ldr	r4, [pc, #112]	; 11b78 <__assert_fail@plt+0x874>
   11b04:	ldrb	r3, [r4, #8]
   11b08:	cmp	r3, #0
   11b0c:	beq	11b30 <__assert_fail@plt+0x82c>
   11b10:	mov	r2, #5
   11b14:	ldr	r1, [pc, #96]	; 11b7c <__assert_fail@plt+0x878>
   11b18:	mov	r0, #0
   11b1c:	bl	110f4 <dcgettext@plt>
   11b20:	mov	r2, r0
   11b24:	mov	r1, #0
   11b28:	mov	r0, #1
   11b2c:	bl	1116c <error@plt>
   11b30:	ldr	r5, [pc, #72]	; 11b80 <__assert_fail@plt+0x87c>
   11b34:	mov	r0, #1
   11b38:	ldr	r1, [r5, #20]
   11b3c:	ldr	r3, [r5, #24]
   11b40:	str	r3, [sp, #8]
   11b44:	ldrd	r2, [r4]
   11b48:	strd	r2, [sp]
   11b4c:	ldr	r2, [r5, #16]
   11b50:	bl	11220 <__printf_chk@plt>
   11b54:	ldrd	r2, [r4]
   11b58:	ldrd	r0, [r5, #32]
   11b5c:	adds	r6, r2, r0
   11b60:	adcs	r7, r3, r1
   11b64:	movvs	r3, #1
   11b68:	strd	r6, [r4]
   11b6c:	strbvs	r3, [r4, #8]
   11b70:	add	sp, sp, #20
   11b74:	pop	{r4, r5, r6, r7, pc}
   11b78:	andeq	r1, r3, r8, ror #3
   11b7c:	andeq	pc, r1, r4, asr sp	; <UNPREDICTABLE>
   11b80:	andeq	r1, r3, r0, lsr r1
   11b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b88:	sub	sp, sp, #28
   11b8c:	mov	r8, r0
   11b90:	ldr	r1, [pc, #776]	; 11ea0 <__assert_fail@plt+0xb9c>
   11b94:	bl	1101c <strcmp@plt>
   11b98:	mov	r4, r0
   11b9c:	bl	111e4 <__errno_location@plt>
   11ba0:	cmp	r4, #0
   11ba4:	mov	r9, r0
   11ba8:	bne	11c34 <__assert_fail@plt+0x930>
   11bac:	ldr	r3, [pc, #752]	; 11ea4 <__assert_fail@plt+0xba0>
   11bb0:	mov	r2, #1
   11bb4:	strb	r2, [r3, #9]
   11bb8:	ldr	r3, [pc, #744]	; 11ea8 <__assert_fail@plt+0xba4>
   11bbc:	ldr	r5, [r3]
   11bc0:	mov	r1, #2
   11bc4:	mov	r0, r5
   11bc8:	ldr	r4, [pc, #724]	; 11ea4 <__assert_fail@plt+0xba0>
   11bcc:	bl	122c8 <__assert_fail@plt+0xfc4>
   11bd0:	ldr	r7, [pc, #724]	; 11eac <__assert_fail@plt+0xba8>
   11bd4:	mov	r1, r5
   11bd8:	ldr	r0, [pc, #720]	; 11eb0 <__assert_fail@plt+0xbac>
   11bdc:	bl	1256c <__assert_fail@plt+0x1268>
   11be0:	cmp	r0, #0
   11be4:	bne	11c78 <__assert_fail@plt+0x974>
   11be8:	mov	r0, r5
   11bec:	ldr	r4, [r9]
   11bf0:	bl	11154 <ferror_unlocked@plt>
   11bf4:	cmp	r0, #0
   11bf8:	ldr	r1, [pc, #672]	; 11ea0 <__assert_fail@plt+0xb9c>
   11bfc:	mov	r0, r8
   11c00:	moveq	r4, #0
   11c04:	bl	1101c <strcmp@plt>
   11c08:	cmp	r0, #0
   11c0c:	mov	r0, r5
   11c10:	bne	11e84 <__assert_fail@plt+0xb80>
   11c14:	bl	11298 <clearerr_unlocked@plt>
   11c18:	cmp	r4, #0
   11c1c:	moveq	r0, #1
   11c20:	beq	11c70 <__assert_fail@plt+0x96c>
   11c24:	mov	r2, r8
   11c28:	mov	r1, #3
   11c2c:	mov	r0, #0
   11c30:	b	11c54 <__assert_fail@plt+0x950>
   11c34:	ldr	r1, [pc, #632]	; 11eb4 <__assert_fail@plt+0xbb0>
   11c38:	mov	r0, r8
   11c3c:	bl	112a4 <fopen64@plt>
   11c40:	subs	r5, r0, #0
   11c44:	moveq	r2, r8
   11c48:	moveq	r1, #3
   11c4c:	ldreq	r4, [r9]
   11c50:	bne	11bc0 <__assert_fail@plt+0x8bc>
   11c54:	bl	13a3c <__assert_fail@plt+0x2738>
   11c58:	mov	r3, r0
   11c5c:	ldr	r2, [pc, #596]	; 11eb8 <__assert_fail@plt+0xbb4>
   11c60:	mov	r0, #0
   11c64:	mov	r1, r4
   11c68:	bl	1116c <error@plt>
   11c6c:	mov	r0, #0
   11c70:	add	sp, sp, #28
   11c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c78:	ldr	r3, [r4, #16]
   11c7c:	sub	r6, r3, #1
   11c80:	str	r3, [sp, #16]
   11c84:	cmp	r6, #1
   11c88:	bls	11d68 <__assert_fail@plt+0xa64>
   11c8c:	ldr	r3, [r4, #24]
   11c90:	cmp	r3, #1
   11c94:	str	r3, [sp, #20]
   11c98:	bls	11d68 <__assert_fail@plt+0xa64>
   11c9c:	ldr	fp, [pc, #536]	; 11ebc <__assert_fail@plt+0xbb8>
   11ca0:	mov	r2, #2
   11ca4:	ldr	sl, [r4, #20]
   11ca8:	ldr	r1, [fp, #40]	; 0x28
   11cac:	mov	r0, sl
   11cb0:	bl	110c4 <memcmp@plt>
   11cb4:	cmp	r0, #0
   11cb8:	bne	11d68 <__assert_fail@plt+0xa64>
   11cbc:	ldr	r2, [r4, #28]
   11cc0:	cmp	r6, r2
   11cc4:	bne	11ce0 <__assert_fail@plt+0x9dc>
   11cc8:	mov	r2, r6
   11ccc:	mov	r0, sl
   11cd0:	ldr	r1, [r4, #32]
   11cd4:	bl	110c4 <memcmp@plt>
   11cd8:	cmp	r0, #0
   11cdc:	beq	11d58 <__assert_fail@plt+0xa54>
   11ce0:	ldr	r2, [r4, #36]	; 0x24
   11ce4:	cmp	r6, r2
   11ce8:	bne	11d04 <__assert_fail@plt+0xa00>
   11cec:	mov	r2, r6
   11cf0:	mov	r0, sl
   11cf4:	ldr	r1, [r4, #40]	; 0x28
   11cf8:	bl	110c4 <memcmp@plt>
   11cfc:	cmp	r0, #0
   11d00:	beq	11d48 <__assert_fail@plt+0xa44>
   11d04:	ldr	r3, [sp, #20]
   11d08:	cmp	r6, r3
   11d0c:	bne	11d68 <__assert_fail@plt+0xa64>
   11d10:	mov	r2, r6
   11d14:	mov	r0, sl
   11d18:	ldr	r1, [r4, #44]	; 0x2c
   11d1c:	bl	110c4 <memcmp@plt>
   11d20:	cmp	r0, #0
   11d24:	bne	11d68 <__assert_fail@plt+0xa64>
   11d28:	ldr	r3, [fp, #44]	; 0x2c
   11d2c:	str	r3, [r4, #48]	; 0x30
   11d30:	ldr	r3, [pc, #392]	; 11ec0 <__assert_fail@plt+0xbbc>
   11d34:	str	r3, [r4, #52]	; 0x34
   11d38:	bl	11ac8 <__assert_fail@plt+0x7c4>
   11d3c:	mov	r0, #10
   11d40:	bl	112f8 <putchar_unlocked@plt>
   11d44:	b	11bd4 <__assert_fail@plt+0x8d0>
   11d48:	ldr	r3, [fp, #48]	; 0x30
   11d4c:	str	r3, [r4, #48]	; 0x30
   11d50:	ldr	r3, [pc, #364]	; 11ec4 <__assert_fail@plt+0xbc0>
   11d54:	b	11d34 <__assert_fail@plt+0xa30>
   11d58:	ldr	r3, [fp, #52]	; 0x34
   11d5c:	str	r3, [r4, #48]	; 0x30
   11d60:	ldr	r3, [pc, #352]	; 11ec8 <__assert_fail@plt+0xbc4>
   11d64:	b	11d34 <__assert_fail@plt+0xa30>
   11d68:	ldr	r3, [r4, #48]	; 0x30
   11d6c:	ldrb	r3, [r3]
   11d70:	cmp	r3, #110	; 0x6e
   11d74:	beq	11e20 <__assert_fail@plt+0xb1c>
   11d78:	bhi	11d9c <__assert_fail@plt+0xa98>
   11d7c:	cmp	r3, #97	; 0x61
   11d80:	beq	11dc0 <__assert_fail@plt+0xabc>
   11d84:	mov	r1, #1
   11d88:	ldr	r3, [r7]
   11d8c:	ldr	r2, [r4, #16]
   11d90:	ldr	r0, [r4, #20]
   11d94:	bl	110b8 <fwrite_unlocked@plt>
   11d98:	b	11bd4 <__assert_fail@plt+0x8d0>
   11d9c:	cmp	r3, #112	; 0x70
   11da0:	beq	11e30 <__assert_fail@plt+0xb2c>
   11da4:	cmp	r3, #116	; 0x74
   11da8:	bne	11d84 <__assert_fail@plt+0xa80>
   11dac:	ldr	r3, [sp, #16]
   11db0:	cmp	r3, #1
   11db4:	ble	11e20 <__assert_fail@plt+0xb1c>
   11db8:	bl	11af8 <__assert_fail@plt+0x7f4>
   11dbc:	b	11d84 <__assert_fail@plt+0xa80>
   11dc0:	ldr	r3, [pc, #244]	; 11ebc <__assert_fail@plt+0xbb8>
   11dc4:	ldrd	r0, [r3, #56]	; 0x38
   11dc8:	cmp	r0, #2
   11dcc:	sbcs	r3, r1, #0
   11dd0:	blt	11db8 <__assert_fail@plt+0xab4>
   11dd4:	ldr	r3, [sp, #16]
   11dd8:	cmp	r3, #1
   11ddc:	ble	11df4 <__assert_fail@plt+0xaf0>
   11de0:	bl	11af8 <__assert_fail@plt+0x7f4>
   11de4:	mov	r2, #0
   11de8:	mov	r3, #0
   11dec:	strd	r2, [r4, #152]	; 0x98
   11df0:	b	11d84 <__assert_fail@plt+0xa80>
   11df4:	ldr	r3, [r4, #152]	; 0x98
   11df8:	ldr	r2, [r4, #156]	; 0x9c
   11dfc:	adds	r3, r3, #1
   11e00:	str	r3, [sp, #8]
   11e04:	adc	r3, r2, #0
   11e08:	str	r3, [sp, #12]
   11e0c:	ldrd	r2, [sp, #8]
   11e10:	cmp	r1, r3
   11e14:	strd	r2, [r4, #152]	; 0x98
   11e18:	cmpeq	r0, r2
   11e1c:	beq	11de0 <__assert_fail@plt+0xadc>
   11e20:	ldr	r1, [r7]
   11e24:	ldr	r0, [r4, #160]	; 0xa0
   11e28:	bl	10fec <fputs_unlocked@plt>
   11e2c:	b	11d84 <__assert_fail@plt+0xa80>
   11e30:	mov	sl, #0
   11e34:	mov	r2, r6
   11e38:	mov	r3, sl
   11e3c:	stm	sp, {r6, sl}
   11e40:	ldr	r1, [r4, #20]
   11e44:	ldr	r0, [r4, #52]	; 0x34
   11e48:	bl	1e8ac <__assert_fail@plt+0xd5a8>
   11e4c:	cmn	r0, #2
   11e50:	beq	11e60 <__assert_fail@plt+0xb5c>
   11e54:	cmn	r0, #1
   11e58:	beq	11e20 <__assert_fail@plt+0xb1c>
   11e5c:	b	11db8 <__assert_fail@plt+0xab4>
   11e60:	ldr	r4, [r9]
   11e64:	mov	r2, #5
   11e68:	mov	r0, sl
   11e6c:	ldr	r1, [pc, #88]	; 11ecc <__assert_fail@plt+0xbc8>
   11e70:	bl	110f4 <dcgettext@plt>
   11e74:	mov	r2, r0
   11e78:	mov	r0, #1
   11e7c:	mov	r1, r4
   11e80:	bl	1116c <error@plt>
   11e84:	bl	122f8 <__assert_fail@plt+0xff4>
   11e88:	cmp	r0, #0
   11e8c:	beq	11c18 <__assert_fail@plt+0x914>
   11e90:	cmp	r4, #0
   11e94:	bne	11c24 <__assert_fail@plt+0x920>
   11e98:	ldr	r4, [r9]
   11e9c:	b	11c18 <__assert_fail@plt+0x914>
   11ea0:	andeq	r0, r2, fp, ror r8
   11ea4:	andeq	r1, r3, r8, ror #3
   11ea8:	ldrdeq	r1, [r3], -r8
   11eac:	ldrdeq	r1, [r3], -ip
   11eb0:	strdeq	r1, [r3], -r4
   11eb4:	andeq	r0, r2, r7, lsr r6
   11eb8:	ldrdeq	r0, [r2], -r5
   11ebc:	andeq	r1, r3, r0, lsr r1
   11ec0:	andeq	r1, r3, r0, lsr #4
   11ec4:	andeq	r1, r3, r0, asr #4
   11ec8:	andeq	r1, r3, r0, ror #4
   11ecc:	andeq	pc, r1, r9, ror #26
   11ed0:	subs	r5, r0, #0
   11ed4:	push	{r7, lr}
   11ed8:	sub	sp, sp, #56	; 0x38
   11edc:	ldr	r4, [pc, #640]	; 12164 <__assert_fail@plt+0xe60>
   11ee0:	beq	11f18 <__assert_fail@plt+0xc14>
   11ee4:	mov	r2, #5
   11ee8:	mov	r0, #0
   11eec:	ldr	r3, [pc, #628]	; 12168 <__assert_fail@plt+0xe64>
   11ef0:	ldr	r1, [pc, #628]	; 1216c <__assert_fail@plt+0xe68>
   11ef4:	ldr	r6, [r3]
   11ef8:	bl	110f4 <dcgettext@plt>
   11efc:	mov	r2, r0
   11f00:	mov	r1, #1
   11f04:	ldr	r3, [r4]
   11f08:	mov	r0, r6
   11f0c:	bl	11238 <__fprintf_chk@plt>
   11f10:	mov	r0, r5
   11f14:	bl	111c0 <exit@plt>
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #588]	; 12170 <__assert_fail@plt+0xe6c>
   11f20:	mov	r6, sp
   11f24:	bl	110f4 <dcgettext@plt>
   11f28:	ldr	r2, [r4]
   11f2c:	mov	r1, r0
   11f30:	mov	r0, #1
   11f34:	bl	11220 <__printf_chk@plt>
   11f38:	ldr	r4, [pc, #564]	; 12174 <__assert_fail@plt+0xe70>
   11f3c:	mov	r2, #5
   11f40:	mov	r0, r5
   11f44:	ldr	r1, [pc, #556]	; 12178 <__assert_fail@plt+0xe74>
   11f48:	bl	110f4 <dcgettext@plt>
   11f4c:	ldr	r7, [pc, #552]	; 1217c <__assert_fail@plt+0xe78>
   11f50:	ldr	r1, [r4]
   11f54:	bl	10fec <fputs_unlocked@plt>
   11f58:	mov	r2, #5
   11f5c:	ldr	r1, [pc, #540]	; 12180 <__assert_fail@plt+0xe7c>
   11f60:	mov	r0, r5
   11f64:	bl	110f4 <dcgettext@plt>
   11f68:	ldr	r1, [r4]
   11f6c:	bl	10fec <fputs_unlocked@plt>
   11f70:	mov	r2, #5
   11f74:	ldr	r1, [pc, #520]	; 12184 <__assert_fail@plt+0xe80>
   11f78:	mov	r0, r5
   11f7c:	bl	110f4 <dcgettext@plt>
   11f80:	ldr	r1, [r4]
   11f84:	bl	10fec <fputs_unlocked@plt>
   11f88:	mov	r2, #5
   11f8c:	ldr	r1, [pc, #500]	; 12188 <__assert_fail@plt+0xe84>
   11f90:	mov	r0, r5
   11f94:	bl	110f4 <dcgettext@plt>
   11f98:	ldr	r1, [r4]
   11f9c:	bl	10fec <fputs_unlocked@plt>
   11fa0:	mov	r2, #5
   11fa4:	ldr	r1, [pc, #480]	; 1218c <__assert_fail@plt+0xe88>
   11fa8:	mov	r0, r5
   11fac:	bl	110f4 <dcgettext@plt>
   11fb0:	ldr	r1, [r4]
   11fb4:	bl	10fec <fputs_unlocked@plt>
   11fb8:	mov	r2, #5
   11fbc:	ldr	r1, [pc, #460]	; 12190 <__assert_fail@plt+0xe8c>
   11fc0:	mov	r0, r5
   11fc4:	bl	110f4 <dcgettext@plt>
   11fc8:	ldr	r1, [r4]
   11fcc:	bl	10fec <fputs_unlocked@plt>
   11fd0:	mov	r2, #5
   11fd4:	ldr	r1, [pc, #440]	; 12194 <__assert_fail@plt+0xe90>
   11fd8:	mov	r0, r5
   11fdc:	bl	110f4 <dcgettext@plt>
   11fe0:	ldr	r1, [r4]
   11fe4:	bl	10fec <fputs_unlocked@plt>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #420]	; 12198 <__assert_fail@plt+0xe94>
   11ff0:	mov	r0, r5
   11ff4:	bl	110f4 <dcgettext@plt>
   11ff8:	ldr	r1, [r4]
   11ffc:	bl	10fec <fputs_unlocked@plt>
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #400]	; 1219c <__assert_fail@plt+0xe98>
   12008:	mov	r0, r5
   1200c:	bl	110f4 <dcgettext@plt>
   12010:	ldr	r1, [r4]
   12014:	bl	10fec <fputs_unlocked@plt>
   12018:	mov	r2, #5
   1201c:	ldr	r1, [pc, #380]	; 121a0 <__assert_fail@plt+0xe9c>
   12020:	mov	r0, r5
   12024:	bl	110f4 <dcgettext@plt>
   12028:	ldr	r1, [r4]
   1202c:	bl	10fec <fputs_unlocked@plt>
   12030:	mov	r2, #5
   12034:	ldr	r1, [pc, #360]	; 121a4 <__assert_fail@plt+0xea0>
   12038:	mov	r0, r5
   1203c:	bl	110f4 <dcgettext@plt>
   12040:	ldr	r1, [r4]
   12044:	bl	10fec <fputs_unlocked@plt>
   12048:	ldr	lr, [pc, #344]	; 121a8 <__assert_fail@plt+0xea4>
   1204c:	mov	ip, sp
   12050:	ldm	lr!, {r0, r1, r2, r3}
   12054:	stmia	ip!, {r0, r1, r2, r3}
   12058:	ldm	lr!, {r0, r1, r2, r3}
   1205c:	stmia	ip!, {r0, r1, r2, r3}
   12060:	ldm	lr!, {r0, r1, r2, r3}
   12064:	stmia	ip!, {r0, r1, r2, r3}
   12068:	ldm	lr, {r0, r1}
   1206c:	stm	ip, {r0, r1}
   12070:	ldr	r1, [r6]
   12074:	cmp	r1, #0
   12078:	bne	1211c <__assert_fail@plt+0xe18>
   1207c:	ldr	r6, [r6, #4]
   12080:	mov	r2, #5
   12084:	mov	r0, #0
   12088:	ldr	r7, [pc, #236]	; 1217c <__assert_fail@plt+0xe78>
   1208c:	ldr	r1, [pc, #280]	; 121ac <__assert_fail@plt+0xea8>
   12090:	cmp	r6, #0
   12094:	moveq	r6, r7
   12098:	bl	110f4 <dcgettext@plt>
   1209c:	mov	r1, r0
   120a0:	ldr	r3, [pc, #264]	; 121b0 <__assert_fail@plt+0xeac>
   120a4:	mov	r0, #1
   120a8:	ldr	r2, [pc, #260]	; 121b4 <__assert_fail@plt+0xeb0>
   120ac:	bl	11220 <__printf_chk@plt>
   120b0:	mov	r1, #0
   120b4:	mov	r0, #5
   120b8:	bl	11268 <setlocale@plt>
   120bc:	cmp	r0, #0
   120c0:	bne	12134 <__assert_fail@plt+0xe30>
   120c4:	mov	r2, #5
   120c8:	ldr	r1, [pc, #232]	; 121b8 <__assert_fail@plt+0xeb4>
   120cc:	mov	r0, #0
   120d0:	bl	110f4 <dcgettext@plt>
   120d4:	mov	r1, r0
   120d8:	ldr	r3, [pc, #156]	; 1217c <__assert_fail@plt+0xe78>
   120dc:	mov	r0, #1
   120e0:	ldr	r2, [pc, #200]	; 121b0 <__assert_fail@plt+0xeac>
   120e4:	bl	11220 <__printf_chk@plt>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #200]	; 121bc <__assert_fail@plt+0xeb8>
   120f0:	mov	r0, #0
   120f4:	bl	110f4 <dcgettext@plt>
   120f8:	ldr	r2, [pc, #192]	; 121c0 <__assert_fail@plt+0xebc>
   120fc:	cmp	r6, r7
   12100:	mov	r1, r0
   12104:	mov	r0, #1
   12108:	ldr	r3, [pc, #180]	; 121c4 <__assert_fail@plt+0xec0>
   1210c:	moveq	r3, r2
   12110:	mov	r2, r6
   12114:	bl	11220 <__printf_chk@plt>
   12118:	b	11f10 <__assert_fail@plt+0xc0c>
   1211c:	mov	r0, r7
   12120:	bl	1101c <strcmp@plt>
   12124:	cmp	r0, #0
   12128:	beq	1207c <__assert_fail@plt+0xd78>
   1212c:	add	r6, r6, #8
   12130:	b	12070 <__assert_fail@plt+0xd6c>
   12134:	mov	r2, #3
   12138:	ldr	r1, [pc, #136]	; 121c8 <__assert_fail@plt+0xec4>
   1213c:	bl	112d4 <strncmp@plt>
   12140:	cmp	r0, #0
   12144:	beq	120c4 <__assert_fail@plt+0xdc0>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #120]	; 121cc <__assert_fail@plt+0xec8>
   12150:	mov	r0, #0
   12154:	bl	110f4 <dcgettext@plt>
   12158:	ldr	r1, [r4]
   1215c:	bl	10fec <fputs_unlocked@plt>
   12160:	b	120c4 <__assert_fail@plt+0xdc0>
   12164:	muleq	r3, r4, r5
   12168:	ldrdeq	r1, [r3], -r0
   1216c:	andeq	pc, r1, pc, lsl #27
   12170:			; <UNDEFINED> instruction: 0x0001fdb6
   12174:	ldrdeq	r1, [r3], -ip
   12178:	ldrdeq	pc, [r1], -r7
   1217c:	andeq	pc, r1, ip, lsl #27
   12180:	andeq	pc, r1, r5, lsl lr	; <UNPREDICTABLE>
   12184:	andeq	pc, r1, sp, asr #28
   12188:	muleq	r1, r8, lr
   1218c:	andeq	pc, r1, sl, ror #30
   12190:	andeq	r0, r2, r5, lsr #2
   12194:			; <UNDEFINED> instruction: 0x000201b4
   12198:	andeq	r0, r2, r1, ror #3
   1219c:	andeq	r0, r2, r7, lsl r2
   121a0:	andeq	r0, r2, sl, asr r3
   121a4:	andeq	r0, r2, r4, lsr #8
   121a8:	andeq	pc, r1, r0, lsr #24
   121ac:			; <UNDEFINED> instruction: 0x000204b7
   121b0:	andeq	r0, r2, lr, asr #9
   121b4:	strdeq	r0, [r2], -r6
   121b8:	andeq	r0, r2, pc, asr #10
   121bc:	andeq	r0, r2, sl, ror #10
   121c0:	andeq	r0, r2, r5, lsl r7
   121c4:	andeq	r0, r2, r6, lsl r8
   121c8:	andeq	r0, r2, r4, lsl #10
   121cc:	andeq	r0, r2, r8, lsl #10
   121d0:	ldr	r3, [pc, #4]	; 121dc <__assert_fail@plt+0xed8>
   121d4:	str	r0, [r3]
   121d8:	bx	lr
   121dc:	andeq	r1, r3, ip, lsl #11
   121e0:	ldr	r3, [pc, #4]	; 121ec <__assert_fail@plt+0xee8>
   121e4:	strb	r0, [r3, #4]
   121e8:	bx	lr
   121ec:	andeq	r1, r3, ip, lsl #11
   121f0:	ldr	r3, [pc, #176]	; 122a8 <__assert_fail@plt+0xfa4>
   121f4:	push	{r0, r1, r4, r5, r6, lr}
   121f8:	ldr	r0, [r3]
   121fc:	bl	1f880 <__assert_fail@plt+0xe57c>
   12200:	cmp	r0, #0
   12204:	beq	1228c <__assert_fail@plt+0xf88>
   12208:	ldr	r4, [pc, #156]	; 122ac <__assert_fail@plt+0xfa8>
   1220c:	bl	111e4 <__errno_location@plt>
   12210:	mov	r5, r0
   12214:	ldrb	r6, [r4, #4]
   12218:	cmp	r6, #0
   1221c:	beq	1222c <__assert_fail@plt+0xf28>
   12220:	ldr	r3, [r0]
   12224:	cmp	r3, #32
   12228:	beq	1228c <__assert_fail@plt+0xf88>
   1222c:	mov	r2, #5
   12230:	ldr	r1, [pc, #120]	; 122b0 <__assert_fail@plt+0xfac>
   12234:	mov	r0, #0
   12238:	bl	110f4 <dcgettext@plt>
   1223c:	mov	r6, r0
   12240:	ldr	r0, [r4]
   12244:	cmp	r0, #0
   12248:	beq	12278 <__assert_fail@plt+0xf74>
   1224c:	ldr	r4, [r5]
   12250:	bl	13a2c <__assert_fail@plt+0x2728>
   12254:	mov	r3, r0
   12258:	ldr	r2, [pc, #84]	; 122b4 <__assert_fail@plt+0xfb0>
   1225c:	mov	r0, #0
   12260:	str	r6, [sp]
   12264:	mov	r1, r4
   12268:	bl	1116c <error@plt>
   1226c:	ldr	r3, [pc, #68]	; 122b8 <__assert_fail@plt+0xfb4>
   12270:	ldr	r0, [r3]
   12274:	bl	11070 <_exit@plt>
   12278:	mov	r3, r6
   1227c:	ldr	r2, [pc, #56]	; 122bc <__assert_fail@plt+0xfb8>
   12280:	ldr	r1, [r5]
   12284:	bl	1116c <error@plt>
   12288:	b	1226c <__assert_fail@plt+0xf68>
   1228c:	ldr	r3, [pc, #44]	; 122c0 <__assert_fail@plt+0xfbc>
   12290:	ldr	r0, [r3]
   12294:	bl	1f880 <__assert_fail@plt+0xe57c>
   12298:	cmp	r0, #0
   1229c:	bne	1226c <__assert_fail@plt+0xf68>
   122a0:	add	sp, sp, #8
   122a4:	pop	{r4, r5, r6, pc}
   122a8:	ldrdeq	r1, [r3], -ip
   122ac:	andeq	r1, r3, ip, lsl #11
   122b0:	andeq	r0, r2, r6, lsr #16
   122b4:	andeq	r0, r2, r2, lsr r8
   122b8:	andeq	r1, r3, r8, ror r1
   122bc:	ldrdeq	r0, [r2], -r5
   122c0:	ldrdeq	r1, [r3], -r0
   122c4:	b	11028 <posix_fadvise64@plt>
   122c8:	cmp	r0, #0
   122cc:	bxeq	lr
   122d0:	push	{r0, r1, r2, r3, r4, lr}
   122d4:	mov	r4, r1
   122d8:	bl	1122c <fileno@plt>
   122dc:	mov	r2, #0
   122e0:	mov	r3, #0
   122e4:	strd	r2, [sp]
   122e8:	str	r4, [sp, #8]
   122ec:	bl	11028 <posix_fadvise64@plt>
   122f0:	add	sp, sp, #16
   122f4:	pop	{r4, pc}
   122f8:	push	{r0, r1, r2, r4, r5, lr}
   122fc:	mov	r4, r0
   12300:	bl	1122c <fileno@plt>
   12304:	cmp	r0, #0
   12308:	mov	r0, r4
   1230c:	bge	1231c <__assert_fail@plt+0x1018>
   12310:	add	sp, sp, #12
   12314:	pop	{r4, r5, lr}
   12318:	b	11250 <fclose@plt>
   1231c:	bl	11190 <__freading@plt>
   12320:	cmp	r0, #0
   12324:	bne	12360 <__assert_fail@plt+0x105c>
   12328:	mov	r0, r4
   1232c:	bl	123a0 <__assert_fail@plt+0x109c>
   12330:	cmp	r0, #0
   12334:	bne	12394 <__assert_fail@plt+0x1090>
   12338:	mov	r5, #0
   1233c:	mov	r0, r4
   12340:	bl	11250 <fclose@plt>
   12344:	cmp	r5, #0
   12348:	beq	12358 <__assert_fail@plt+0x1054>
   1234c:	bl	111e4 <__errno_location@plt>
   12350:	str	r5, [r0]
   12354:	mvn	r0, #0
   12358:	add	sp, sp, #12
   1235c:	pop	{r4, r5, pc}
   12360:	mov	r0, r4
   12364:	bl	1122c <fileno@plt>
   12368:	mov	r3, #1
   1236c:	mov	r2, #0
   12370:	str	r3, [sp]
   12374:	mov	r3, #0
   12378:	bl	11124 <lseek64@plt>
   1237c:	mvn	r3, #0
   12380:	mvn	r2, #0
   12384:	cmp	r1, r3
   12388:	cmpeq	r0, r2
   1238c:	bne	12328 <__assert_fail@plt+0x1024>
   12390:	b	12338 <__assert_fail@plt+0x1034>
   12394:	bl	111e4 <__errno_location@plt>
   12398:	ldr	r5, [r0]
   1239c:	b	1233c <__assert_fail@plt+0x1038>
   123a0:	push	{r0, r1, r4, lr}
   123a4:	subs	r4, r0, #0
   123a8:	bne	123bc <__assert_fail@plt+0x10b8>
   123ac:	mov	r0, r4
   123b0:	add	sp, sp, #8
   123b4:	pop	{r4, lr}
   123b8:	b	11040 <fflush@plt>
   123bc:	bl	11190 <__freading@plt>
   123c0:	cmp	r0, #0
   123c4:	beq	123ac <__assert_fail@plt+0x10a8>
   123c8:	ldr	r3, [r4]
   123cc:	tst	r3, #256	; 0x100
   123d0:	beq	123ac <__assert_fail@plt+0x10a8>
   123d4:	mov	r3, #1
   123d8:	mov	r2, #0
   123dc:	mov	r0, r4
   123e0:	str	r3, [sp]
   123e4:	mov	r3, #0
   123e8:	bl	123f0 <__assert_fail@plt+0x10ec>
   123ec:	b	123ac <__assert_fail@plt+0x10a8>
   123f0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   123f4:	mov	r4, r0
   123f8:	ldmib	r0, {ip, lr}
   123fc:	ldr	r8, [sp, #32]
   12400:	cmp	lr, ip
   12404:	bne	12474 <__assert_fail@plt+0x1170>
   12408:	ldr	ip, [r0, #16]
   1240c:	ldr	lr, [r0, #20]
   12410:	cmp	lr, ip
   12414:	bne	12474 <__assert_fail@plt+0x1170>
   12418:	ldr	r5, [r0, #36]	; 0x24
   1241c:	cmp	r5, #0
   12420:	bne	12474 <__assert_fail@plt+0x1170>
   12424:	mov	r6, r2
   12428:	mov	r7, r3
   1242c:	bl	1122c <fileno@plt>
   12430:	mov	r2, r6
   12434:	mov	r3, r7
   12438:	str	r8, [sp]
   1243c:	bl	11124 <lseek64@plt>
   12440:	mvn	r3, #0
   12444:	mvn	r2, #0
   12448:	cmp	r1, r3
   1244c:	cmpeq	r0, r2
   12450:	mvneq	r0, #0
   12454:	beq	1246c <__assert_fail@plt+0x1168>
   12458:	ldr	r3, [r4]
   1245c:	strd	r0, [r4, #80]	; 0x50
   12460:	mov	r0, r5
   12464:	bic	r3, r3, #16
   12468:	str	r3, [r4]
   1246c:	add	sp, sp, #8
   12470:	pop	{r4, r5, r6, r7, r8, pc}
   12474:	mov	r0, r4
   12478:	str	r8, [sp, #32]
   1247c:	add	sp, sp, #8
   12480:	pop	{r4, r5, r6, r7, r8, lr}
   12484:	b	1125c <fseeko64@plt>
   12488:	mov	r3, #0
   1248c:	str	r3, [r0]
   12490:	str	r3, [r0, #4]
   12494:	str	r3, [r0, #8]
   12498:	bx	lr
   1249c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124a0:	mov	r5, r0
   124a4:	mov	sl, r1
   124a8:	mov	r9, r2
   124ac:	ldr	r7, [r0]
   124b0:	ldr	r6, [r0, #8]
   124b4:	mov	r0, r1
   124b8:	bl	112ec <feof_unlocked@plt>
   124bc:	cmp	r0, #0
   124c0:	moveq	fp, #1
   124c4:	add	r7, r6, r7
   124c8:	moveq	r4, r6
   124cc:	beq	124e0 <__assert_fail@plt+0x11dc>
   124d0:	mov	r5, #0
   124d4:	mov	r0, r5
   124d8:	add	sp, sp, #12
   124dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124e0:	mov	r0, sl
   124e4:	bl	110e8 <getc_unlocked@plt>
   124e8:	cmn	r0, #1
   124ec:	mov	r8, r0
   124f0:	bne	1251c <__assert_fail@plt+0x1218>
   124f4:	cmp	r6, r4
   124f8:	beq	124d0 <__assert_fail@plt+0x11cc>
   124fc:	mov	r0, sl
   12500:	bl	11154 <ferror_unlocked@plt>
   12504:	cmp	r0, #0
   12508:	bne	124d0 <__assert_fail@plt+0x11cc>
   1250c:	ldrb	r3, [r4, #-1]
   12510:	cmp	r3, r9
   12514:	beq	12560 <__assert_fail@plt+0x125c>
   12518:	mov	r8, r9
   1251c:	cmp	r4, r7
   12520:	bne	12554 <__assert_fail@plt+0x1250>
   12524:	mov	r0, r6
   12528:	mvn	r3, #0
   1252c:	ldr	r4, [r5]
   12530:	mov	r2, #1
   12534:	mov	r1, r5
   12538:	str	fp, [sp]
   1253c:	bl	1efdc <__assert_fail@plt+0xdcd8>
   12540:	ldr	r7, [r5]
   12544:	mov	r6, r0
   12548:	str	r0, [r5, #8]
   1254c:	add	r4, r0, r4
   12550:	add	r7, r0, r7
   12554:	cmp	r9, r8
   12558:	strb	r8, [r4], #1
   1255c:	bne	124e0 <__assert_fail@plt+0x11dc>
   12560:	sub	r4, r4, r6
   12564:	str	r4, [r5, #4]
   12568:	b	124d4 <__assert_fail@plt+0x11d0>
   1256c:	mov	r2, #10
   12570:	b	1249c <__assert_fail@plt+0x1198>
   12574:	ldr	r0, [r0, #8]
   12578:	b	1f990 <__assert_fail@plt+0xe68c>
   1257c:	push	{r4, r5, r6, lr}
   12580:	subs	r4, r0, #0
   12584:	bne	1259c <__assert_fail@plt+0x1298>
   12588:	ldr	r3, [pc, #124]	; 1260c <__assert_fail@plt+0x1308>
   1258c:	ldr	r0, [pc, #124]	; 12610 <__assert_fail@plt+0x130c>
   12590:	ldr	r1, [r3]
   12594:	bl	112c8 <fputs@plt>
   12598:	bl	112e0 <abort@plt>
   1259c:	mov	r1, #47	; 0x2f
   125a0:	bl	11280 <strrchr@plt>
   125a4:	subs	r6, r0, #0
   125a8:	beq	125f8 <__assert_fail@plt+0x12f4>
   125ac:	add	r5, r6, #1
   125b0:	sub	r3, r5, r4
   125b4:	cmp	r3, #6
   125b8:	ble	125f8 <__assert_fail@plt+0x12f4>
   125bc:	mov	r2, #7
   125c0:	ldr	r1, [pc, #76]	; 12614 <__assert_fail@plt+0x1310>
   125c4:	sub	r0, r6, #6
   125c8:	bl	112d4 <strncmp@plt>
   125cc:	cmp	r0, #0
   125d0:	bne	125f8 <__assert_fail@plt+0x12f4>
   125d4:	mov	r2, #3
   125d8:	ldr	r1, [pc, #56]	; 12618 <__assert_fail@plt+0x1314>
   125dc:	mov	r0, r5
   125e0:	bl	112d4 <strncmp@plt>
   125e4:	cmp	r0, #0
   125e8:	ldreq	r3, [pc, #44]	; 1261c <__assert_fail@plt+0x1318>
   125ec:	addeq	r4, r6, #4
   125f0:	movne	r4, r5
   125f4:	streq	r4, [r3]
   125f8:	ldr	r3, [pc, #32]	; 12620 <__assert_fail@plt+0x131c>
   125fc:	str	r4, [r3]
   12600:	ldr	r3, [pc, #28]	; 12624 <__assert_fail@plt+0x1320>
   12604:	str	r4, [r3]
   12608:	pop	{r4, r5, r6, pc}
   1260c:	ldrdeq	r1, [r3], -r0
   12610:	andeq	r0, r2, r9, lsr r8
   12614:	andeq	r0, r2, r1, ror r8
   12618:	andeq	r0, r2, r9, ror r8
   1261c:	andeq	r1, r3, r0, asr #3
   12620:	muleq	r3, r4, r5
   12624:	andeq	r1, r3, r4, asr #3
   12628:	push	{r4, lr}
   1262c:	mov	r2, #48	; 0x30
   12630:	mov	r4, r1
   12634:	mov	r1, #0
   12638:	bl	11208 <memset@plt>
   1263c:	cmp	r4, #10
   12640:	bne	12648 <__assert_fail@plt+0x1344>
   12644:	bl	112e0 <abort@plt>
   12648:	str	r4, [r0]
   1264c:	pop	{r4, pc}
   12650:	push	{r4, r5, r6, lr}
   12654:	mov	r2, #5
   12658:	mov	r6, r0
   1265c:	mov	r5, r1
   12660:	mov	r1, r0
   12664:	mov	r0, #0
   12668:	bl	110f4 <dcgettext@plt>
   1266c:	cmp	r6, r0
   12670:	mov	r4, r0
   12674:	bne	126e4 <__assert_fail@plt+0x13e0>
   12678:	bl	1fa08 <__assert_fail@plt+0xe704>
   1267c:	ldrb	r3, [r0]
   12680:	bic	r3, r3, #32
   12684:	cmp	r3, #85	; 0x55
   12688:	bne	126ec <__assert_fail@plt+0x13e8>
   1268c:	ldrb	r3, [r0, #1]
   12690:	bic	r3, r3, #32
   12694:	cmp	r3, #84	; 0x54
   12698:	bne	1275c <__assert_fail@plt+0x1458>
   1269c:	ldrb	r3, [r0, #2]
   126a0:	bic	r3, r3, #32
   126a4:	cmp	r3, #70	; 0x46
   126a8:	bne	1275c <__assert_fail@plt+0x1458>
   126ac:	ldrb	r3, [r0, #3]
   126b0:	cmp	r3, #45	; 0x2d
   126b4:	bne	1275c <__assert_fail@plt+0x1458>
   126b8:	ldrb	r3, [r0, #4]
   126bc:	cmp	r3, #56	; 0x38
   126c0:	bne	1275c <__assert_fail@plt+0x1458>
   126c4:	ldrb	r3, [r0, #5]
   126c8:	cmp	r3, #0
   126cc:	bne	1275c <__assert_fail@plt+0x1458>
   126d0:	ldrb	r2, [r4]
   126d4:	ldr	r3, [pc, #144]	; 1276c <__assert_fail@plt+0x1468>
   126d8:	ldr	r4, [pc, #144]	; 12770 <__assert_fail@plt+0x146c>
   126dc:	cmp	r2, #96	; 0x60
   126e0:	movne	r4, r3
   126e4:	mov	r0, r4
   126e8:	pop	{r4, r5, r6, pc}
   126ec:	cmp	r3, #71	; 0x47
   126f0:	bne	1275c <__assert_fail@plt+0x1458>
   126f4:	ldrb	r3, [r0, #1]
   126f8:	bic	r3, r3, #32
   126fc:	cmp	r3, #66	; 0x42
   12700:	bne	1275c <__assert_fail@plt+0x1458>
   12704:	ldrb	r3, [r0, #2]
   12708:	cmp	r3, #49	; 0x31
   1270c:	bne	1275c <__assert_fail@plt+0x1458>
   12710:	ldrb	r3, [r0, #3]
   12714:	cmp	r3, #56	; 0x38
   12718:	bne	1275c <__assert_fail@plt+0x1458>
   1271c:	ldrb	r3, [r0, #4]
   12720:	cmp	r3, #48	; 0x30
   12724:	bne	1275c <__assert_fail@plt+0x1458>
   12728:	ldrb	r3, [r0, #5]
   1272c:	cmp	r3, #51	; 0x33
   12730:	bne	1275c <__assert_fail@plt+0x1458>
   12734:	ldrb	r3, [r0, #6]
   12738:	cmp	r3, #48	; 0x30
   1273c:	bne	1275c <__assert_fail@plt+0x1458>
   12740:	ldrb	r3, [r0, #7]
   12744:	cmp	r3, #0
   12748:	bne	1275c <__assert_fail@plt+0x1458>
   1274c:	ldrb	r2, [r4]
   12750:	ldr	r3, [pc, #28]	; 12774 <__assert_fail@plt+0x1470>
   12754:	ldr	r4, [pc, #28]	; 12778 <__assert_fail@plt+0x1474>
   12758:	b	126dc <__assert_fail@plt+0x13d8>
   1275c:	ldr	r4, [pc, #24]	; 1277c <__assert_fail@plt+0x1478>
   12760:	cmp	r5, #9
   12764:	ldr	r3, [pc, #20]	; 12780 <__assert_fail@plt+0x147c>
   12768:	b	126e0 <__assert_fail@plt+0x13dc>
   1276c:	ldrdeq	r0, [r2], -r6
   12770:	andeq	r0, r2, r1, ror #17
   12774:	ldrdeq	r0, [r2], -sl
   12778:	ldrdeq	r0, [r2], -sp
   1277c:	ldrdeq	r0, [r2], -r4
   12780:	andeq	r0, r2, r5, ror #17
   12784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12788:	sub	sp, sp, #108	; 0x6c
   1278c:	mov	r8, r0
   12790:	mov	r5, r1
   12794:	mov	r6, #0
   12798:	str	r3, [sp, #40]	; 0x28
   1279c:	str	r2, [sp, #48]	; 0x30
   127a0:	ldr	sl, [sp, #144]	; 0x90
   127a4:	bl	11130 <__ctype_get_mb_cur_max@plt>
   127a8:	ldr	r3, [sp, #148]	; 0x94
   127ac:	str	r6, [sp, #24]
   127b0:	str	r6, [sp, #32]
   127b4:	str	r6, [sp, #44]	; 0x2c
   127b8:	str	r6, [sp, #52]	; 0x34
   127bc:	ubfx	r7, r3, #1, #1
   127c0:	mov	r3, #1
   127c4:	str	r6, [sp, #60]	; 0x3c
   127c8:	str	r3, [sp, #72]	; 0x48
   127cc:	str	r0, [sp, #76]	; 0x4c
   127d0:	cmp	sl, #10
   127d4:	ldrls	pc, [pc, sl, lsl #2]
   127d8:	b	12a1c <__assert_fail@plt+0x1718>
   127dc:	andeq	r2, r1, r8, lsl #16
   127e0:	andeq	r2, r1, r4, lsr sl
   127e4:			; <UNDEFINED> instruction: 0x000129b8
   127e8:	ldrdeq	r2, [r1], -r0
   127ec:	andeq	r2, r1, r0, lsr #19
   127f0:	strdeq	r2, [r1], -r8
   127f4:	ldrdeq	r2, [r1], -r8
   127f8:	andeq	r2, r1, r0, lsr #20
   127fc:	andeq	r2, r1, r8, lsr #18
   12800:	andeq	r2, r1, r8, lsr #18
   12804:	andeq	r2, r1, r8, lsr #18
   12808:	mov	r4, sl
   1280c:	mov	r7, #0
   12810:	mov	r9, r5
   12814:	mov	r3, #0
   12818:	str	r6, [sp, #68]	; 0x44
   1281c:	str	r3, [sp, #28]
   12820:	ldr	r3, [sp, #40]	; 0x28
   12824:	cmn	r3, #1
   12828:	bne	133c8 <__assert_fail@plt+0x20c4>
   1282c:	ldr	r2, [sp, #28]
   12830:	ldr	r3, [sp, #48]	; 0x30
   12834:	ldrb	r3, [r3, r2]
   12838:	adds	r3, r3, #0
   1283c:	movne	r3, #1
   12840:	str	r3, [sp, #36]	; 0x24
   12844:	ldr	r3, [sp, #36]	; 0x24
   12848:	cmp	r3, #0
   1284c:	bne	12a58 <__assert_fail@plt+0x1754>
   12850:	sub	r3, sl, #2
   12854:	cmp	r4, #0
   12858:	clz	r3, r3
   1285c:	movne	r2, #0
   12860:	lsr	r3, r3, #5
   12864:	andeq	r2, r3, r7
   12868:	cmp	r2, #0
   1286c:	bne	12c1c <__assert_fail@plt+0x1918>
   12870:	eor	r7, r7, #1
   12874:	ands	r3, r3, r7
   12878:	beq	13440 <__assert_fail@plt+0x213c>
   1287c:	ldr	r2, [sp, #68]	; 0x44
   12880:	cmp	r2, #0
   12884:	beq	13408 <__assert_fail@plt+0x2104>
   12888:	ldr	r3, [sp, #72]	; 0x48
   1288c:	cmp	r3, #0
   12890:	beq	133dc <__assert_fail@plt+0x20d8>
   12894:	ldr	r2, [sp, #48]	; 0x30
   12898:	ldr	r3, [sp, #160]	; 0xa0
   1289c:	ldr	r1, [sp, #60]	; 0x3c
   128a0:	str	r3, [sp, #16]
   128a4:	ldr	r3, [sp, #156]	; 0x9c
   128a8:	str	r3, [sp, #12]
   128ac:	ldr	r3, [sp, #152]	; 0x98
   128b0:	str	r3, [sp, #8]
   128b4:	ldr	r3, [sp, #148]	; 0x94
   128b8:	str	r3, [sp, #4]
   128bc:	mov	r3, #5
   128c0:	str	r3, [sp]
   128c4:	ldr	r3, [sp, #40]	; 0x28
   128c8:	mov	r0, r8
   128cc:	bl	12784 <__assert_fail@plt+0x1480>
   128d0:	mov	r4, r0
   128d4:	b	13434 <__assert_fail@plt+0x2130>
   128d8:	ldr	r3, [pc, #2948]	; 13464 <__assert_fail@plt+0x2160>
   128dc:	mov	r7, #1
   128e0:	mov	r4, #0
   128e4:	mov	sl, #5
   128e8:	str	r7, [sp, #24]
   128ec:	str	r7, [sp, #32]
   128f0:	str	r3, [sp, #44]	; 0x2c
   128f4:	b	12810 <__assert_fail@plt+0x150c>
   128f8:	cmp	r7, #0
   128fc:	bne	12a40 <__assert_fail@plt+0x173c>
   12900:	cmp	r5, #0
   12904:	mov	r4, #1
   12908:	movne	r3, #34	; 0x22
   1290c:	strbne	r3, [r8]
   12910:	mov	r3, #1
   12914:	str	r3, [sp, #24]
   12918:	str	r3, [sp, #32]
   1291c:	ldr	r3, [pc, #2880]	; 13464 <__assert_fail@plt+0x2160>
   12920:	str	r3, [sp, #44]	; 0x2c
   12924:	b	12810 <__assert_fail@plt+0x150c>
   12928:	cmp	sl, #10
   1292c:	beq	12950 <__assert_fail@plt+0x164c>
   12930:	mov	r1, sl
   12934:	ldr	r0, [pc, #2860]	; 13468 <__assert_fail@plt+0x2164>
   12938:	bl	12650 <__assert_fail@plt+0x134c>
   1293c:	mov	r1, sl
   12940:	str	r0, [sp, #156]	; 0x9c
   12944:	ldr	r0, [pc, #2848]	; 1346c <__assert_fail@plt+0x2168>
   12948:	bl	12650 <__assert_fail@plt+0x134c>
   1294c:	str	r0, [sp, #160]	; 0xa0
   12950:	cmp	r7, #0
   12954:	moveq	r4, r7
   12958:	beq	12970 <__assert_fail@plt+0x166c>
   1295c:	mov	r4, #0
   12960:	b	12980 <__assert_fail@plt+0x167c>
   12964:	cmp	r5, r4
   12968:	strbhi	r3, [r8, r4]
   1296c:	add	r4, r4, #1
   12970:	ldr	r3, [sp, #156]	; 0x9c
   12974:	ldrb	r3, [r3, r4]
   12978:	cmp	r3, #0
   1297c:	bne	12964 <__assert_fail@plt+0x1660>
   12980:	ldr	r0, [sp, #160]	; 0xa0
   12984:	bl	111cc <strlen@plt>
   12988:	ldr	r3, [sp, #160]	; 0xa0
   1298c:	str	r0, [sp, #32]
   12990:	str	r3, [sp, #44]	; 0x2c
   12994:	mov	r3, #1
   12998:	str	r3, [sp, #24]
   1299c:	b	12810 <__assert_fail@plt+0x150c>
   129a0:	mov	r3, #1
   129a4:	cmp	r7, #0
   129a8:	streq	r3, [sp, #24]
   129ac:	beq	129f0 <__assert_fail@plt+0x16ec>
   129b0:	str	r3, [sp, #32]
   129b4:	b	129dc <__assert_fail@plt+0x16d8>
   129b8:	cmp	r7, #0
   129bc:	beq	129f0 <__assert_fail@plt+0x16ec>
   129c0:	mov	r3, #1
   129c4:	str	r3, [sp, #32]
   129c8:	ldr	r3, [pc, #2716]	; 1346c <__assert_fail@plt+0x2168>
   129cc:	b	12a50 <__assert_fail@plt+0x174c>
   129d0:	mov	r7, #1
   129d4:	str	r7, [sp, #24]
   129d8:	str	r7, [sp, #32]
   129dc:	ldr	r3, [pc, #2696]	; 1346c <__assert_fail@plt+0x2168>
   129e0:	mov	r4, #0
   129e4:	str	r3, [sp, #44]	; 0x2c
   129e8:	mov	sl, #2
   129ec:	b	12810 <__assert_fail@plt+0x150c>
   129f0:	cmp	r5, #0
   129f4:	movne	r3, #39	; 0x27
   129f8:	movne	r7, #0
   129fc:	strbne	r3, [r8]
   12a00:	moveq	r7, r5
   12a04:	mov	r3, #1
   12a08:	mov	r4, #1
   12a0c:	str	r3, [sp, #32]
   12a10:	ldr	r3, [pc, #2644]	; 1346c <__assert_fail@plt+0x2168>
   12a14:	str	r3, [sp, #44]	; 0x2c
   12a18:	b	129e8 <__assert_fail@plt+0x16e4>
   12a1c:	bl	112e0 <abort@plt>
   12a20:	mov	r3, #1
   12a24:	mov	r7, #0
   12a28:	str	r3, [sp, #24]
   12a2c:	mov	r4, #0
   12a30:	b	12810 <__assert_fail@plt+0x150c>
   12a34:	mov	r7, #1
   12a38:	str	sl, [sp, #32]
   12a3c:	b	129dc <__assert_fail@plt+0x16d8>
   12a40:	mov	r3, #1
   12a44:	str	r7, [sp, #24]
   12a48:	str	r3, [sp, #32]
   12a4c:	ldr	r3, [pc, #2576]	; 13464 <__assert_fail@plt+0x2160>
   12a50:	str	r3, [sp, #44]	; 0x2c
   12a54:	b	12a2c <__assert_fail@plt+0x1728>
   12a58:	ldr	fp, [sp, #24]
   12a5c:	ldr	r3, [sp, #32]
   12a60:	cmp	sl, #2
   12a64:	moveq	fp, #0
   12a68:	andne	fp, fp, #1
   12a6c:	adds	r5, r3, #0
   12a70:	movne	r5, #1
   12a74:	ands	r3, fp, r5
   12a78:	str	r3, [sp, #64]	; 0x40
   12a7c:	beq	12b4c <__assert_fail@plt+0x1848>
   12a80:	ldr	r3, [sp, #28]
   12a84:	ldr	r2, [sp, #32]
   12a88:	cmp	r2, #1
   12a8c:	add	r6, r3, r2
   12a90:	mov	r3, r2
   12a94:	ldr	r2, [sp, #40]	; 0x28
   12a98:	movls	r3, #0
   12a9c:	movhi	r3, #1
   12aa0:	cmn	r2, #1
   12aa4:	movne	r3, #0
   12aa8:	cmp	r3, #0
   12aac:	beq	12abc <__assert_fail@plt+0x17b8>
   12ab0:	ldr	r0, [sp, #48]	; 0x30
   12ab4:	bl	111cc <strlen@plt>
   12ab8:	str	r0, [sp, #40]	; 0x28
   12abc:	ldr	r3, [sp, #40]	; 0x28
   12ac0:	cmp	r6, r3
   12ac4:	bhi	12b44 <__assert_fail@plt+0x1840>
   12ac8:	ldr	r0, [sp, #28]
   12acc:	ldr	r2, [sp, #32]
   12ad0:	ldr	r3, [sp, #48]	; 0x30
   12ad4:	ldr	r1, [sp, #44]	; 0x2c
   12ad8:	add	r0, r3, r0
   12adc:	bl	110c4 <memcmp@plt>
   12ae0:	cmp	r0, #0
   12ae4:	bne	12b44 <__assert_fail@plt+0x1840>
   12ae8:	cmp	r7, #0
   12aec:	beq	12b4c <__assert_fail@plt+0x1848>
   12af0:	str	r7, [sp, #24]
   12af4:	ldr	r3, [sp, #24]
   12af8:	mov	r1, r9
   12afc:	ldr	r2, [sp, #48]	; 0x30
   12b00:	cmp	sl, #2
   12b04:	movne	r3, #0
   12b08:	andeq	r3, r3, #1
   12b0c:	cmp	r3, #0
   12b10:	ldr	r3, [sp, #160]	; 0xa0
   12b14:	movne	sl, #4
   12b18:	str	sl, [sp]
   12b1c:	str	r3, [sp, #16]
   12b20:	ldr	r3, [sp, #156]	; 0x9c
   12b24:	str	r3, [sp, #12]
   12b28:	mov	r3, #0
   12b2c:	str	r3, [sp, #8]
   12b30:	ldr	r3, [sp, #148]	; 0x94
   12b34:	bic	r3, r3, #2
   12b38:	str	r3, [sp, #4]
   12b3c:	ldr	r3, [sp, #40]	; 0x28
   12b40:	b	128c8 <__assert_fail@plt+0x15c4>
   12b44:	mov	r3, #0
   12b48:	str	r3, [sp, #64]	; 0x40
   12b4c:	ldr	r2, [sp, #28]
   12b50:	ldr	r3, [sp, #48]	; 0x30
   12b54:	add	r3, r3, r2
   12b58:	str	r3, [sp, #80]	; 0x50
   12b5c:	ldr	r3, [sp, #48]	; 0x30
   12b60:	ldrb	r6, [r3, r2]
   12b64:	cmp	r6, #58	; 0x3a
   12b68:	bhi	12ccc <__assert_fail@plt+0x19c8>
   12b6c:	cmp	r6, #43	; 0x2b
   12b70:	bcs	12e8c <__assert_fail@plt+0x1b88>
   12b74:	cmp	r6, #32
   12b78:	beq	12ee0 <__assert_fail@plt+0x1bdc>
   12b7c:	bhi	12c24 <__assert_fail@plt+0x1920>
   12b80:	cmp	r6, #9
   12b84:	beq	13088 <__assert_fail@plt+0x1d84>
   12b88:	bhi	12be8 <__assert_fail@plt+0x18e4>
   12b8c:	cmp	r6, #7
   12b90:	beq	13098 <__assert_fail@plt+0x1d94>
   12b94:	bhi	130b4 <__assert_fail@plt+0x1db0>
   12b98:	cmp	r6, #0
   12b9c:	beq	12efc <__assert_fail@plt+0x1bf8>
   12ba0:	ldr	r3, [sp, #76]	; 0x4c
   12ba4:	cmp	r3, #1
   12ba8:	bne	13100 <__assert_fail@plt+0x1dfc>
   12bac:	bl	111b4 <__ctype_b_loc@plt>
   12bb0:	ldr	r2, [r0]
   12bb4:	sxth	r3, r6
   12bb8:	lsl	r3, r3, #1
   12bbc:	ldrh	r5, [r2, r3]
   12bc0:	ldr	r3, [sp, #76]	; 0x4c
   12bc4:	ubfx	r5, r5, #14, #1
   12bc8:	str	r3, [sp, #56]	; 0x38
   12bcc:	ldr	r3, [sp, #24]
   12bd0:	eor	fp, r5, #1
   12bd4:	and	fp, fp, r3
   12bd8:	ands	fp, fp, #255	; 0xff
   12bdc:	beq	12dbc <__assert_fail@plt+0x1ab8>
   12be0:	mov	r5, #0
   12be4:	b	131ac <__assert_fail@plt+0x1ea8>
   12be8:	cmp	r6, #11
   12bec:	beq	130bc <__assert_fail@plt+0x1db8>
   12bf0:	bcc	13090 <__assert_fail@plt+0x1d8c>
   12bf4:	cmp	r6, #12
   12bf8:	beq	130c4 <__assert_fail@plt+0x1dc0>
   12bfc:	cmp	r6, #13
   12c00:	moveq	r3, #114	; 0x72
   12c04:	bne	12ba0 <__assert_fail@plt+0x189c>
   12c08:	cmp	sl, #2
   12c0c:	movne	r2, #0
   12c10:	andeq	r2, r7, #1
   12c14:	cmp	r2, #0
   12c18:	beq	1309c <__assert_fail@plt+0x1d98>
   12c1c:	mov	sl, #2
   12c20:	b	12af4 <__assert_fail@plt+0x17f0>
   12c24:	cmp	r6, #37	; 0x25
   12c28:	beq	12e8c <__assert_fail@plt+0x1b88>
   12c2c:	bhi	12c40 <__assert_fail@plt+0x193c>
   12c30:	cmp	r6, #35	; 0x23
   12c34:	beq	12ed4 <__assert_fail@plt+0x1bd0>
   12c38:	mov	r5, #0
   12c3c:	b	12ee4 <__assert_fail@plt+0x1be0>
   12c40:	cmp	r6, #39	; 0x27
   12c44:	bne	12c38 <__assert_fail@plt+0x1934>
   12c48:	cmp	sl, #2
   12c4c:	ldrne	r5, [sp, #36]	; 0x24
   12c50:	movne	r3, r5
   12c54:	strne	r3, [sp, #68]	; 0x44
   12c58:	bne	12fd8 <__assert_fail@plt+0x1cd4>
   12c5c:	cmp	r7, #0
   12c60:	bne	12af4 <__assert_fail@plt+0x17f0>
   12c64:	ldr	r3, [sp, #60]	; 0x3c
   12c68:	cmp	r9, #0
   12c6c:	clz	r3, r3
   12c70:	lsr	r3, r3, #5
   12c74:	moveq	r3, #0
   12c78:	cmp	r3, #0
   12c7c:	strne	r9, [sp, #60]	; 0x3c
   12c80:	movne	r9, #0
   12c84:	bne	12c94 <__assert_fail@plt+0x1990>
   12c88:	cmp	r9, r4
   12c8c:	movhi	r3, #39	; 0x27
   12c90:	strbhi	r3, [r8, r4]
   12c94:	add	r3, r4, #1
   12c98:	ldr	r5, [sp, #36]	; 0x24
   12c9c:	mov	fp, #0
   12ca0:	cmp	r3, r9
   12ca4:	movcc	r2, #92	; 0x5c
   12ca8:	str	fp, [sp, #52]	; 0x34
   12cac:	strbcc	r2, [r8, r3]
   12cb0:	add	r3, r4, #2
   12cb4:	add	r4, r4, #3
   12cb8:	cmp	r3, r9
   12cbc:	str	r5, [sp, #68]	; 0x44
   12cc0:	movcc	r2, #39	; 0x27
   12cc4:	strbcc	r2, [r8, r3]
   12cc8:	b	12dbc <__assert_fail@plt+0x1ab8>
   12ccc:	cmp	r6, #94	; 0x5e
   12cd0:	beq	12c38 <__assert_fail@plt+0x1934>
   12cd4:	bhi	12e94 <__assert_fail@plt+0x1b90>
   12cd8:	cmp	r6, #90	; 0x5a
   12cdc:	bhi	12e80 <__assert_fail@plt+0x1b7c>
   12ce0:	cmp	r6, #65	; 0x41
   12ce4:	bcs	12e8c <__assert_fail@plt+0x1b88>
   12ce8:	cmp	r6, #62	; 0x3e
   12cec:	bls	12c38 <__assert_fail@plt+0x1934>
   12cf0:	cmp	r6, #63	; 0x3f
   12cf4:	bne	12ba0 <__assert_fail@plt+0x189c>
   12cf8:	cmp	sl, #2
   12cfc:	beq	12fe0 <__assert_fail@plt+0x1cdc>
   12d00:	cmp	sl, #5
   12d04:	movne	fp, #0
   12d08:	bne	133b0 <__assert_fail@plt+0x20ac>
   12d0c:	ldr	r3, [sp, #148]	; 0x94
   12d10:	tst	r3, #4
   12d14:	beq	12fe8 <__assert_fail@plt+0x1ce4>
   12d18:	ldr	r3, [sp, #28]
   12d1c:	add	r2, r3, #2
   12d20:	ldr	r3, [sp, #40]	; 0x28
   12d24:	cmp	r2, r3
   12d28:	bcs	12fe8 <__assert_fail@plt+0x1ce4>
   12d2c:	ldr	r1, [sp, #28]
   12d30:	ldr	r3, [sp, #48]	; 0x30
   12d34:	add	r3, r3, r1
   12d38:	ldrb	r1, [r3, #1]
   12d3c:	cmp	r1, #63	; 0x3f
   12d40:	bne	12fe8 <__assert_fail@plt+0x1ce4>
   12d44:	ldr	r3, [sp, #48]	; 0x30
   12d48:	ldrb	r6, [r3, r2]
   12d4c:	sub	r3, r6, #33	; 0x21
   12d50:	uxtb	r3, r3
   12d54:	cmp	r3, #29
   12d58:	bhi	133b8 <__assert_fail@plt+0x20b4>
   12d5c:	ldr	r0, [pc, #1804]	; 13470 <__assert_fail@plt+0x216c>
   12d60:	mov	r5, #1
   12d64:	ands	r5, r0, r5, lsl r3
   12d68:	beq	133c0 <__assert_fail@plt+0x20bc>
   12d6c:	cmp	r7, #0
   12d70:	bne	12af4 <__assert_fail@plt+0x17f0>
   12d74:	cmp	r9, r4
   12d78:	add	r3, r4, #1
   12d7c:	str	r2, [sp, #28]
   12d80:	mov	r5, #0
   12d84:	strbhi	r1, [r8, r4]
   12d88:	cmp	r9, r3
   12d8c:	mov	fp, r5
   12d90:	movhi	r1, #34	; 0x22
   12d94:	strbhi	r1, [r8, r3]
   12d98:	add	r3, r4, #2
   12d9c:	cmp	r9, r3
   12da0:	movhi	r1, #34	; 0x22
   12da4:	strbhi	r1, [r8, r3]
   12da8:	add	r3, r4, #3
   12dac:	add	r4, r4, #4
   12db0:	cmp	r9, r3
   12db4:	movhi	r1, #63	; 0x3f
   12db8:	strbhi	r1, [r8, r3]
   12dbc:	ldr	r3, [sp, #24]
   12dc0:	eor	r3, r3, #1
   12dc4:	cmp	sl, #2
   12dc8:	orreq	r3, r3, #1
   12dcc:	eor	r3, r3, #1
   12dd0:	orr	r3, r7, r3
   12dd4:	tst	r3, #255	; 0xff
   12dd8:	beq	12e04 <__assert_fail@plt+0x1b00>
   12ddc:	ldr	r3, [sp, #152]	; 0x98
   12de0:	cmp	r3, #0
   12de4:	beq	12e04 <__assert_fail@plt+0x1b00>
   12de8:	ldr	r1, [sp, #152]	; 0x98
   12dec:	ubfx	r2, r6, #5, #8
   12df0:	and	r3, r6, #31
   12df4:	ldr	r2, [r1, r2, lsl #2]
   12df8:	lsr	r3, r2, r3
   12dfc:	tst	r3, #1
   12e00:	bne	12e10 <__assert_fail@plt+0x1b0c>
   12e04:	ldr	r3, [sp, #64]	; 0x40
   12e08:	cmp	r3, #0
   12e0c:	beq	13008 <__assert_fail@plt+0x1d04>
   12e10:	sub	r3, sl, #2
   12e14:	cmp	r7, #0
   12e18:	clz	r3, r3
   12e1c:	lsr	r3, r3, #5
   12e20:	bne	12af4 <__assert_fail@plt+0x17f0>
   12e24:	ldr	r2, [sp, #52]	; 0x34
   12e28:	eor	r2, r2, #1
   12e2c:	ands	r3, r3, r2
   12e30:	beq	12e68 <__assert_fail@plt+0x1b64>
   12e34:	cmp	r9, r4
   12e38:	str	r3, [sp, #52]	; 0x34
   12e3c:	movhi	r2, #39	; 0x27
   12e40:	strbhi	r2, [r8, r4]
   12e44:	add	r2, r4, #1
   12e48:	cmp	r9, r2
   12e4c:	movhi	r1, #36	; 0x24
   12e50:	strbhi	r1, [r8, r2]
   12e54:	add	r2, r4, #2
   12e58:	add	r4, r4, #3
   12e5c:	cmp	r9, r2
   12e60:	movhi	r1, #39	; 0x27
   12e64:	strbhi	r1, [r8, r2]
   12e68:	cmp	r9, r4
   12e6c:	ldr	fp, [sp, #36]	; 0x24
   12e70:	movhi	r3, #92	; 0x5c
   12e74:	strbhi	r3, [r8, r4]
   12e78:	add	r4, r4, #1
   12e7c:	b	13008 <__assert_fail@plt+0x1d04>
   12e80:	cmp	r6, #92	; 0x5c
   12e84:	beq	12ff0 <__assert_fail@plt+0x1cec>
   12e88:	bls	12c38 <__assert_fail@plt+0x1934>
   12e8c:	ldr	r5, [sp, #36]	; 0x24
   12e90:	b	12fd8 <__assert_fail@plt+0x1cd4>
   12e94:	cmp	r6, #122	; 0x7a
   12e98:	bhi	12eb8 <__assert_fail@plt+0x1bb4>
   12e9c:	cmp	r6, #97	; 0x61
   12ea0:	bcs	12e8c <__assert_fail@plt+0x1b88>
   12ea4:	cmp	r6, #95	; 0x5f
   12ea8:	beq	12e8c <__assert_fail@plt+0x1b88>
   12eac:	cmp	r6, #96	; 0x60
   12eb0:	bne	12ba0 <__assert_fail@plt+0x189c>
   12eb4:	b	12c38 <__assert_fail@plt+0x1934>
   12eb8:	cmp	r6, #124	; 0x7c
   12ebc:	beq	12c38 <__assert_fail@plt+0x1934>
   12ec0:	bcc	130cc <__assert_fail@plt+0x1dc8>
   12ec4:	cmp	r6, #125	; 0x7d
   12ec8:	beq	130cc <__assert_fail@plt+0x1dc8>
   12ecc:	cmp	r6, #126	; 0x7e
   12ed0:	bne	12ba0 <__assert_fail@plt+0x189c>
   12ed4:	ldr	r3, [sp, #28]
   12ed8:	cmp	r3, #0
   12edc:	bne	12fe8 <__assert_fail@plt+0x1ce4>
   12ee0:	ldr	r5, [sp, #36]	; 0x24
   12ee4:	cmp	sl, #2
   12ee8:	movne	fp, #0
   12eec:	andeq	fp, r7, #1
   12ef0:	cmp	fp, #0
   12ef4:	beq	12dbc <__assert_fail@plt+0x1ab8>
   12ef8:	b	12c1c <__assert_fail@plt+0x1918>
   12efc:	ldr	r3, [sp, #24]
   12f00:	cmp	r3, #0
   12f04:	beq	12fcc <__assert_fail@plt+0x1cc8>
   12f08:	sub	r2, sl, #2
   12f0c:	cmp	r7, #0
   12f10:	clz	r2, r2
   12f14:	lsr	r2, r2, #5
   12f18:	bne	12af0 <__assert_fail@plt+0x17ec>
   12f1c:	ldr	r3, [sp, #52]	; 0x34
   12f20:	eor	r3, r3, #1
   12f24:	ands	r2, r2, r3
   12f28:	moveq	r3, r4
   12f2c:	beq	12f64 <__assert_fail@plt+0x1c60>
   12f30:	cmp	r9, r4
   12f34:	str	r2, [sp, #52]	; 0x34
   12f38:	movhi	r3, #39	; 0x27
   12f3c:	strbhi	r3, [r8, r4]
   12f40:	add	r3, r4, #1
   12f44:	cmp	r9, r3
   12f48:	movhi	r1, #36	; 0x24
   12f4c:	strbhi	r1, [r8, r3]
   12f50:	add	r3, r4, #2
   12f54:	cmp	r9, r3
   12f58:	movhi	r1, #39	; 0x27
   12f5c:	strbhi	r1, [r8, r3]
   12f60:	add	r3, r4, #3
   12f64:	cmp	r9, r3
   12f68:	add	r4, r3, #1
   12f6c:	movhi	r2, #92	; 0x5c
   12f70:	strbhi	r2, [r8, r3]
   12f74:	cmp	fp, #0
   12f78:	beq	133a0 <__assert_fail@plt+0x209c>
   12f7c:	ldr	r2, [sp, #28]
   12f80:	ldr	r1, [sp, #40]	; 0x28
   12f84:	add	r2, r2, #1
   12f88:	cmp	r2, r1
   12f8c:	bcs	12fc4 <__assert_fail@plt+0x1cc0>
   12f90:	ldr	r1, [sp, #48]	; 0x30
   12f94:	mov	r6, #48	; 0x30
   12f98:	ldrb	r2, [r1, r2]
   12f9c:	sub	r2, r2, #48	; 0x30
   12fa0:	cmp	r2, #9
   12fa4:	bhi	133b0 <__assert_fail@plt+0x20ac>
   12fa8:	cmp	r9, r4
   12fac:	add	r2, r3, #2
   12fb0:	strbhi	r6, [r8, r4]
   12fb4:	cmp	r9, r2
   12fb8:	add	r4, r3, #3
   12fbc:	movhi	r1, #48	; 0x30
   12fc0:	strbhi	r1, [r8, r2]
   12fc4:	mov	r5, #0
   12fc8:	b	133a8 <__assert_fail@plt+0x20a4>
   12fcc:	ldr	r3, [sp, #148]	; 0x94
   12fd0:	ands	r5, r3, #1
   12fd4:	bne	1305c <__assert_fail@plt+0x1d58>
   12fd8:	mov	fp, #0
   12fdc:	b	12dbc <__assert_fail@plt+0x1ab8>
   12fe0:	cmp	r7, #0
   12fe4:	bne	12af4 <__assert_fail@plt+0x17f0>
   12fe8:	mov	r5, #0
   12fec:	b	12fd8 <__assert_fail@plt+0x1cd4>
   12ff0:	cmp	sl, #2
   12ff4:	bne	13068 <__assert_fail@plt+0x1d64>
   12ff8:	cmp	r7, #0
   12ffc:	bne	12af4 <__assert_fail@plt+0x17f0>
   13000:	mov	r5, r7
   13004:	mov	fp, r7
   13008:	ldr	r3, [sp, #52]	; 0x34
   1300c:	eor	fp, fp, #1
   13010:	tst	r3, fp
   13014:	beq	13040 <__assert_fail@plt+0x1d3c>
   13018:	cmp	r9, r4
   1301c:	movhi	r3, #39	; 0x27
   13020:	strbhi	r3, [r8, r4]
   13024:	add	r3, r4, #1
   13028:	add	r4, r4, #2
   1302c:	cmp	r9, r3
   13030:	movhi	r2, #39	; 0x27
   13034:	strbhi	r2, [r8, r3]
   13038:	mov	r3, #0
   1303c:	str	r3, [sp, #52]	; 0x34
   13040:	cmp	r9, r4
   13044:	ldr	r3, [sp, #72]	; 0x48
   13048:	strbhi	r6, [r8, r4]
   1304c:	cmp	r5, #0
   13050:	add	r4, r4, #1
   13054:	moveq	r3, #0
   13058:	str	r3, [sp, #72]	; 0x48
   1305c:	ldr	r3, [sp, #28]
   13060:	add	r3, r3, #1
   13064:	b	1281c <__assert_fail@plt+0x1518>
   13068:	ldr	r3, [sp, #24]
   1306c:	and	r3, r3, r7
   13070:	tst	r5, r3
   13074:	moveq	r3, r6
   13078:	beq	12c08 <__assert_fail@plt+0x1904>
   1307c:	mov	fp, #0
   13080:	mov	r5, fp
   13084:	b	13008 <__assert_fail@plt+0x1d04>
   13088:	mov	r3, #116	; 0x74
   1308c:	b	12c08 <__assert_fail@plt+0x1904>
   13090:	mov	r3, #110	; 0x6e
   13094:	b	12c08 <__assert_fail@plt+0x1904>
   13098:	mov	r3, #97	; 0x61
   1309c:	ldr	r2, [sp, #24]
   130a0:	cmp	r2, #0
   130a4:	beq	12fe8 <__assert_fail@plt+0x1ce4>
   130a8:	mov	r6, r3
   130ac:	mov	r5, #0
   130b0:	b	12e10 <__assert_fail@plt+0x1b0c>
   130b4:	mov	r3, #98	; 0x62
   130b8:	b	1309c <__assert_fail@plt+0x1d98>
   130bc:	mov	r3, #118	; 0x76
   130c0:	b	1309c <__assert_fail@plt+0x1d98>
   130c4:	mov	r3, #102	; 0x66
   130c8:	b	1309c <__assert_fail@plt+0x1d98>
   130cc:	ldr	r3, [sp, #40]	; 0x28
   130d0:	cmn	r3, #1
   130d4:	bne	130f4 <__assert_fail@plt+0x1df0>
   130d8:	ldr	r3, [sp, #48]	; 0x30
   130dc:	ldrb	r3, [r3, #1]
   130e0:	adds	r3, r3, #0
   130e4:	movne	r3, #1
   130e8:	cmp	r3, #0
   130ec:	bne	12fe8 <__assert_fail@plt+0x1ce4>
   130f0:	b	12ed4 <__assert_fail@plt+0x1bd0>
   130f4:	ldr	r3, [sp, #40]	; 0x28
   130f8:	subs	r3, r3, #1
   130fc:	b	130e4 <__assert_fail@plt+0x1de0>
   13100:	mov	r3, #0
   13104:	mov	r2, #0
   13108:	strd	r2, [sp, #96]	; 0x60
   1310c:	ldr	r3, [sp, #40]	; 0x28
   13110:	cmn	r3, #1
   13114:	bne	13124 <__assert_fail@plt+0x1e20>
   13118:	ldr	r0, [sp, #48]	; 0x30
   1311c:	bl	111cc <strlen@plt>
   13120:	str	r0, [sp, #40]	; 0x28
   13124:	ldr	r5, [sp, #36]	; 0x24
   13128:	mov	r3, #0
   1312c:	str	r3, [sp, #56]	; 0x38
   13130:	ldr	r3, [sp, #28]
   13134:	add	r0, sp, #92	; 0x5c
   13138:	ldr	r1, [sp, #40]	; 0x28
   1313c:	ldr	r2, [sp, #56]	; 0x38
   13140:	add	r2, r3, r2
   13144:	ldr	r3, [sp, #48]	; 0x30
   13148:	add	fp, r3, r2
   1314c:	sub	r2, r1, r2
   13150:	add	r3, sp, #96	; 0x60
   13154:	mov	r1, fp
   13158:	bl	1fa3c <__assert_fail@plt+0xe738>
   1315c:	subs	r2, r0, #0
   13160:	beq	131a0 <__assert_fail@plt+0x1e9c>
   13164:	cmn	r2, #1
   13168:	beq	13374 <__assert_fail@plt+0x2070>
   1316c:	cmn	r2, #2
   13170:	bne	132e4 <__assert_fail@plt+0x1fe0>
   13174:	ldr	r3, [sp, #28]
   13178:	ldr	r2, [sp, #56]	; 0x38
   1317c:	add	r3, r3, r2
   13180:	ldr	r2, [sp, #40]	; 0x28
   13184:	cmp	r2, r3
   13188:	bls	13374 <__assert_fail@plt+0x2070>
   1318c:	ldr	r2, [sp, #56]	; 0x38
   13190:	ldr	r3, [sp, #80]	; 0x50
   13194:	ldrb	r5, [r3, r2]
   13198:	cmp	r5, #0
   1319c:	bne	132d4 <__assert_fail@plt+0x1fd0>
   131a0:	ldr	r3, [sp, #56]	; 0x38
   131a4:	cmp	r3, #1
   131a8:	bls	12bcc <__assert_fail@plt+0x18c8>
   131ac:	ldr	r3, [sp, #28]
   131b0:	mov	fp, #0
   131b4:	mov	ip, #92	; 0x5c
   131b8:	ldr	r2, [sp, #56]	; 0x38
   131bc:	add	r3, r3, r2
   131c0:	ldr	r2, [sp, #24]
   131c4:	str	r3, [sp, #36]	; 0x24
   131c8:	eor	r3, r5, #1
   131cc:	and	r3, r3, r2
   131d0:	mov	r2, #39	; 0x27
   131d4:	uxtb	r3, r3
   131d8:	cmp	r3, #0
   131dc:	beq	1337c <__assert_fail@plt+0x2078>
   131e0:	sub	r0, sl, #2
   131e4:	cmp	r7, #0
   131e8:	clz	r0, r0
   131ec:	lsr	r0, r0, #5
   131f0:	bne	12af0 <__assert_fail@plt+0x17ec>
   131f4:	ldr	r1, [sp, #52]	; 0x34
   131f8:	eor	r1, r1, #1
   131fc:	ands	r1, r0, r1
   13200:	beq	13230 <__assert_fail@plt+0x1f2c>
   13204:	cmp	r9, r4
   13208:	add	r0, r4, #1
   1320c:	str	r1, [sp, #52]	; 0x34
   13210:	strbhi	r2, [r8, r4]
   13214:	cmp	r9, r0
   13218:	movhi	lr, #36	; 0x24
   1321c:	strbhi	lr, [r8, r0]
   13220:	add	r0, r4, #2
   13224:	add	r4, r4, #3
   13228:	cmp	r9, r0
   1322c:	strbhi	r2, [r8, r0]
   13230:	cmp	r9, r4
   13234:	add	r0, r4, #1
   13238:	mov	fp, r3
   1323c:	strbhi	ip, [r8, r4]
   13240:	cmp	r9, r0
   13244:	lsrhi	r1, r6, #6
   13248:	addhi	r1, r1, #48	; 0x30
   1324c:	strbhi	r1, [r8, r0]
   13250:	add	r0, r4, #2
   13254:	add	r4, r4, #3
   13258:	cmp	r9, r0
   1325c:	ubfxhi	r1, r6, #3, #3
   13260:	and	r6, r6, #7
   13264:	add	r6, r6, #48	; 0x30
   13268:	addhi	r1, r1, #48	; 0x30
   1326c:	strbhi	r1, [r8, r0]
   13270:	eor	r0, fp, #1
   13274:	ldr	r1, [sp, #28]
   13278:	ldr	lr, [sp, #52]	; 0x34
   1327c:	add	r1, r1, #1
   13280:	and	r0, r0, lr
   13284:	ldr	lr, [sp, #36]	; 0x24
   13288:	cmp	r1, lr
   1328c:	bcs	13008 <__assert_fail@plt+0x1d04>
   13290:	cmp	r0, #0
   13294:	beq	132b8 <__assert_fail@plt+0x1fb4>
   13298:	cmp	r9, r4
   1329c:	add	r0, r4, #1
   132a0:	strbhi	r2, [r8, r4]
   132a4:	cmp	r9, r0
   132a8:	add	r4, r4, #2
   132ac:	strbhi	r2, [r8, r0]
   132b0:	mov	r0, #0
   132b4:	str	r0, [sp, #52]	; 0x34
   132b8:	ldr	r0, [sp, #48]	; 0x30
   132bc:	cmp	r9, r4
   132c0:	str	r1, [sp, #28]
   132c4:	strbhi	r6, [r8, r4]
   132c8:	add	r4, r4, #1
   132cc:	ldrb	r6, [r0, r1]
   132d0:	b	131d8 <__assert_fail@plt+0x1ed4>
   132d4:	ldr	r3, [sp, #56]	; 0x38
   132d8:	add	r3, r3, #1
   132dc:	str	r3, [sp, #56]	; 0x38
   132e0:	b	13174 <__assert_fail@plt+0x1e70>
   132e4:	cmp	sl, #2
   132e8:	movne	r3, #0
   132ec:	andeq	r3, r7, #1
   132f0:	cmp	r3, #0
   132f4:	movne	r1, #1
   132f8:	bne	13354 <__assert_fail@plt+0x2050>
   132fc:	ldr	r0, [sp, #92]	; 0x5c
   13300:	str	r2, [sp, #84]	; 0x54
   13304:	bl	11118 <iswprint@plt>
   13308:	ldr	r3, [sp, #56]	; 0x38
   1330c:	cmp	r0, #0
   13310:	add	r0, sp, #96	; 0x60
   13314:	moveq	r5, #0
   13318:	ldr	r2, [sp, #84]	; 0x54
   1331c:	add	r3, r3, r2
   13320:	str	r3, [sp, #56]	; 0x38
   13324:	bl	110ac <mbsinit@plt>
   13328:	cmp	r0, #0
   1332c:	beq	13130 <__assert_fail@plt+0x1e2c>
   13330:	b	131a0 <__assert_fail@plt+0x1e9c>
   13334:	ldrb	r3, [fp, #1]!
   13338:	cmp	r3, #94	; 0x5e
   1333c:	beq	12c1c <__assert_fail@plt+0x1918>
   13340:	bhi	13360 <__assert_fail@plt+0x205c>
   13344:	sub	r3, r3, #91	; 0x5b
   13348:	cmp	r3, #1
   1334c:	bls	12c1c <__assert_fail@plt+0x1918>
   13350:	add	r1, r1, #1
   13354:	cmp	r1, r2
   13358:	bne	13334 <__assert_fail@plt+0x2030>
   1335c:	b	132fc <__assert_fail@plt+0x1ff8>
   13360:	cmp	r3, #96	; 0x60
   13364:	beq	12c1c <__assert_fail@plt+0x1918>
   13368:	cmp	r3, #124	; 0x7c
   1336c:	bne	13350 <__assert_fail@plt+0x204c>
   13370:	b	12c1c <__assert_fail@plt+0x1918>
   13374:	mov	r5, #0
   13378:	b	131a0 <__assert_fail@plt+0x1e9c>
   1337c:	ldr	r1, [sp, #64]	; 0x40
   13380:	cmp	r1, #0
   13384:	beq	13270 <__assert_fail@plt+0x1f6c>
   13388:	cmp	r9, r4
   1338c:	mov	r1, #0
   13390:	strbhi	ip, [r8, r4]
   13394:	add	r4, r4, #1
   13398:	str	r1, [sp, #64]	; 0x40
   1339c:	b	13270 <__assert_fail@plt+0x1f6c>
   133a0:	mov	r5, fp
   133a4:	ldr	fp, [sp, #24]
   133a8:	mov	r6, #48	; 0x30
   133ac:	b	12dbc <__assert_fail@plt+0x1ab8>
   133b0:	mov	r5, #0
   133b4:	b	12dbc <__assert_fail@plt+0x1ab8>
   133b8:	mov	r6, r1
   133bc:	b	12fe8 <__assert_fail@plt+0x1ce4>
   133c0:	mov	r6, r1
   133c4:	b	12fd8 <__assert_fail@plt+0x1cd4>
   133c8:	ldr	r2, [sp, #28]
   133cc:	ldr	r3, [sp, #40]	; 0x28
   133d0:	subs	r3, r3, r2
   133d4:	movne	r3, #1
   133d8:	b	12840 <__assert_fail@plt+0x153c>
   133dc:	ldr	r3, [sp, #60]	; 0x3c
   133e0:	mov	sl, #2
   133e4:	ldr	r7, [sp, #72]	; 0x48
   133e8:	adds	r6, r3, #0
   133ec:	mov	r5, r3
   133f0:	movne	r6, #1
   133f4:	cmp	r9, #0
   133f8:	movne	r6, #0
   133fc:	cmp	r6, #0
   13400:	bne	127d0 <__assert_fail@plt+0x14cc>
   13404:	ldr	r3, [sp, #68]	; 0x44
   13408:	ldr	r2, [sp, #44]	; 0x2c
   1340c:	cmp	r2, #0
   13410:	moveq	r3, #0
   13414:	andne	r3, r3, #1
   13418:	cmp	r3, #0
   1341c:	movne	r3, r2
   13420:	subne	r3, r3, #1
   13424:	bne	13454 <__assert_fail@plt+0x2150>
   13428:	cmp	r9, r4
   1342c:	movhi	r3, #0
   13430:	strbhi	r3, [r8, r4]
   13434:	mov	r0, r4
   13438:	add	sp, sp, #108	; 0x6c
   1343c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13440:	mov	r3, r7
   13444:	b	13408 <__assert_fail@plt+0x2104>
   13448:	cmp	r9, r4
   1344c:	strbhi	r2, [r8, r4]
   13450:	add	r4, r4, #1
   13454:	ldrb	r2, [r3, #1]!
   13458:	cmp	r2, #0
   1345c:	bne	13448 <__assert_fail@plt+0x2144>
   13460:	b	13428 <__assert_fail@plt+0x2124>
   13464:	ldrdeq	r0, [r2], -r4
   13468:	andeq	r0, r2, r7, ror #17
   1346c:	andeq	r0, r2, r5, ror #17
   13470:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13478:	sub	sp, sp, #52	; 0x34
   1347c:	mov	r6, r0
   13480:	mov	r5, r3
   13484:	mov	r8, r1
   13488:	mov	r9, r2
   1348c:	bl	111e4 <__errno_location@plt>
   13490:	ldr	r3, [r0]
   13494:	cmn	r6, #-2147483647	; 0x80000001
   13498:	str	r0, [sp, #24]
   1349c:	ldr	r7, [pc, #368]	; 13614 <__assert_fail@plt+0x2310>
   134a0:	str	r3, [sp, #32]
   134a4:	movne	r3, #0
   134a8:	moveq	r3, #1
   134ac:	orrs	r3, r3, r6, lsr #31
   134b0:	ldr	r4, [r7]
   134b4:	beq	134bc <__assert_fail@plt+0x21b8>
   134b8:	bl	112e0 <abort@plt>
   134bc:	ldr	r2, [r7, #4]
   134c0:	cmp	r2, r6
   134c4:	bgt	13534 <__assert_fail@plt+0x2230>
   134c8:	add	sl, r7, #8
   134cc:	mov	r3, #8
   134d0:	cmp	r4, sl
   134d4:	add	r1, sp, #44	; 0x2c
   134d8:	str	r2, [sp, #44]	; 0x2c
   134dc:	sub	r2, r6, r2
   134e0:	movne	r0, r4
   134e4:	moveq	r0, #0
   134e8:	add	r2, r2, #1
   134ec:	str	r3, [sp]
   134f0:	mvn	r3, #-2147483648	; 0x80000000
   134f4:	bl	1efdc <__assert_fail@plt+0xdcd8>
   134f8:	cmp	r4, sl
   134fc:	mov	fp, r0
   13500:	str	r0, [r7]
   13504:	ldmeq	r4, {r0, r1}
   13508:	mov	r4, fp
   1350c:	ldr	r2, [sp, #44]	; 0x2c
   13510:	stmeq	fp, {r0, r1}
   13514:	mov	r1, #0
   13518:	ldr	r0, [r7, #4]
   1351c:	sub	r2, r2, r0
   13520:	add	r0, fp, r0, lsl #3
   13524:	lsl	r2, r2, #3
   13528:	bl	11208 <memset@plt>
   1352c:	ldr	r3, [sp, #44]	; 0x2c
   13530:	str	r3, [r7, #4]
   13534:	ldr	r3, [r5, #4]
   13538:	add	sl, r4, r6, lsl #3
   1353c:	mov	r2, r8
   13540:	ldr	fp, [r4, r6, lsl #3]
   13544:	ldr	r7, [sl, #4]
   13548:	orr	r3, r3, #1
   1354c:	str	r3, [sp, #28]
   13550:	add	r3, r5, #8
   13554:	mov	r1, fp
   13558:	str	r3, [sp, #36]	; 0x24
   1355c:	mov	r0, r7
   13560:	ldr	r3, [r5, #44]	; 0x2c
   13564:	str	r3, [sp, #16]
   13568:	ldr	r3, [r5, #40]	; 0x28
   1356c:	str	r3, [sp, #12]
   13570:	add	r3, r5, #8
   13574:	str	r3, [sp, #8]
   13578:	ldr	r3, [sp, #28]
   1357c:	str	r3, [sp, #4]
   13580:	ldr	r3, [r5]
   13584:	str	r3, [sp]
   13588:	mov	r3, r9
   1358c:	bl	12784 <__assert_fail@plt+0x1480>
   13590:	cmp	fp, r0
   13594:	bhi	135fc <__assert_fail@plt+0x22f8>
   13598:	ldr	r3, [pc, #120]	; 13618 <__assert_fail@plt+0x2314>
   1359c:	add	fp, r0, #1
   135a0:	str	fp, [r4, r6, lsl #3]
   135a4:	cmp	r7, r3
   135a8:	beq	135b4 <__assert_fail@plt+0x22b0>
   135ac:	mov	r0, r7
   135b0:	bl	1f990 <__assert_fail@plt+0xe68c>
   135b4:	mov	r0, fp
   135b8:	bl	1eecc <__assert_fail@plt+0xdbc8>
   135bc:	ldr	r3, [r5, #44]	; 0x2c
   135c0:	mov	r2, r8
   135c4:	mov	r1, fp
   135c8:	str	r0, [sl, #4]
   135cc:	mov	r7, r0
   135d0:	str	r3, [sp, #16]
   135d4:	ldr	r3, [r5, #40]	; 0x28
   135d8:	str	r3, [sp, #12]
   135dc:	add	r3, r5, #8
   135e0:	str	r3, [sp, #8]
   135e4:	ldr	r3, [sp, #28]
   135e8:	str	r3, [sp, #4]
   135ec:	ldr	r3, [r5]
   135f0:	str	r3, [sp]
   135f4:	mov	r3, r9
   135f8:	bl	12784 <__assert_fail@plt+0x1480>
   135fc:	ldr	r3, [sp, #24]
   13600:	mov	r0, r7
   13604:	ldr	r2, [sp, #32]
   13608:	str	r2, [r3]
   1360c:	add	sp, sp, #52	; 0x34
   13610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13614:	andeq	r1, r3, ip, ror r1
   13618:	muleq	r3, r8, r5
   1361c:	push	{r4, r5, r6, lr}
   13620:	mov	r5, r0
   13624:	bl	111e4 <__errno_location@plt>
   13628:	mov	r4, r0
   1362c:	cmp	r5, #0
   13630:	ldr	r0, [pc, #20]	; 1364c <__assert_fail@plt+0x2348>
   13634:	mov	r1, #48	; 0x30
   13638:	movne	r0, r5
   1363c:	ldr	r6, [r4]
   13640:	bl	1f0cc <__assert_fail@plt+0xddc8>
   13644:	str	r6, [r4]
   13648:	pop	{r4, r5, r6, pc}
   1364c:	muleq	r3, r8, r6
   13650:	ldr	r3, [pc, #12]	; 13664 <__assert_fail@plt+0x2360>
   13654:	cmp	r0, #0
   13658:	moveq	r0, r3
   1365c:	ldr	r0, [r0]
   13660:	bx	lr
   13664:	muleq	r3, r8, r6
   13668:	ldr	r3, [pc, #12]	; 1367c <__assert_fail@plt+0x2378>
   1366c:	cmp	r0, #0
   13670:	moveq	r0, r3
   13674:	str	r1, [r0]
   13678:	bx	lr
   1367c:	muleq	r3, r8, r6
   13680:	ldr	r3, [pc, #52]	; 136bc <__assert_fail@plt+0x23b8>
   13684:	cmp	r0, #0
   13688:	push	{lr}		; (str lr, [sp, #-4]!)
   1368c:	lsr	lr, r1, #5
   13690:	and	r1, r1, #31
   13694:	moveq	r0, r3
   13698:	add	r3, r0, #8
   1369c:	ldr	ip, [r3, lr, lsl #2]
   136a0:	lsr	r0, ip, r1
   136a4:	eor	r2, r2, r0
   136a8:	and	r0, r0, #1
   136ac:	and	r2, r2, #1
   136b0:	eor	r1, ip, r2, lsl r1
   136b4:	str	r1, [r3, lr, lsl #2]
   136b8:	pop	{pc}		; (ldr pc, [sp], #4)
   136bc:	muleq	r3, r8, r6
   136c0:	ldr	r3, [pc, #16]	; 136d8 <__assert_fail@plt+0x23d4>
   136c4:	cmp	r0, #0
   136c8:	movne	r3, r0
   136cc:	ldr	r0, [r3, #4]
   136d0:	str	r1, [r3, #4]
   136d4:	bx	lr
   136d8:	muleq	r3, r8, r6
   136dc:	ldr	r3, [pc, #44]	; 13710 <__assert_fail@plt+0x240c>
   136e0:	cmp	r0, #0
   136e4:	moveq	r0, r3
   136e8:	mov	r3, #10
   136ec:	cmp	r2, #0
   136f0:	cmpne	r1, #0
   136f4:	str	r3, [r0]
   136f8:	bne	13704 <__assert_fail@plt+0x2400>
   136fc:	push	{r4, lr}
   13700:	bl	112e0 <abort@plt>
   13704:	str	r1, [r0, #40]	; 0x28
   13708:	str	r2, [r0, #44]	; 0x2c
   1370c:	bx	lr
   13710:	muleq	r3, r8, r6
   13714:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13718:	sub	sp, sp, #24
   1371c:	mov	sl, r3
   13720:	mov	r7, r0
   13724:	mov	r8, r1
   13728:	mov	r9, r2
   1372c:	ldr	r4, [sp, #56]	; 0x38
   13730:	ldr	r3, [pc, #88]	; 13790 <__assert_fail@plt+0x248c>
   13734:	cmp	r4, #0
   13738:	moveq	r4, r3
   1373c:	bl	111e4 <__errno_location@plt>
   13740:	ldr	r3, [r4, #44]	; 0x2c
   13744:	mov	r5, r0
   13748:	mov	r2, r9
   1374c:	mov	r1, r8
   13750:	mov	r0, r7
   13754:	ldr	r6, [r5]
   13758:	str	r3, [sp, #16]
   1375c:	ldr	r3, [r4, #40]	; 0x28
   13760:	str	r3, [sp, #12]
   13764:	add	r3, r4, #8
   13768:	str	r3, [sp, #8]
   1376c:	ldr	r3, [r4, #4]
   13770:	str	r3, [sp, #4]
   13774:	ldr	r3, [r4]
   13778:	str	r3, [sp]
   1377c:	mov	r3, sl
   13780:	bl	12784 <__assert_fail@plt+0x1480>
   13784:	str	r6, [r5]
   13788:	add	sp, sp, #24
   1378c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13790:	muleq	r3, r8, r6
   13794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13798:	cmp	r3, #0
   1379c:	sub	sp, sp, #44	; 0x2c
   137a0:	mov	r6, r2
   137a4:	mov	sl, r1
   137a8:	mov	r9, r0
   137ac:	ldr	r4, [pc, #176]	; 13864 <__assert_fail@plt+0x2560>
   137b0:	movne	r4, r3
   137b4:	bl	111e4 <__errno_location@plt>
   137b8:	ldr	r3, [r0]
   137bc:	mov	r1, #0
   137c0:	mov	r2, r9
   137c4:	mov	r8, r0
   137c8:	mov	r0, r1
   137cc:	ldr	r5, [r4, #4]
   137d0:	add	fp, r4, #8
   137d4:	str	r3, [sp, #28]
   137d8:	ldr	r3, [r4, #44]	; 0x2c
   137dc:	cmp	r6, #0
   137e0:	orreq	r5, r5, #1
   137e4:	str	r3, [sp, #16]
   137e8:	ldr	r3, [r4, #40]	; 0x28
   137ec:	stmib	sp, {r5, fp}
   137f0:	str	r3, [sp, #12]
   137f4:	ldr	r3, [r4]
   137f8:	str	r3, [sp]
   137fc:	mov	r3, sl
   13800:	bl	12784 <__assert_fail@plt+0x1480>
   13804:	add	r1, r0, #1
   13808:	mov	r7, r0
   1380c:	mov	r0, r1
   13810:	str	r1, [sp, #36]	; 0x24
   13814:	bl	1eecc <__assert_fail@plt+0xdbc8>
   13818:	ldr	r3, [r4, #44]	; 0x2c
   1381c:	mov	r2, r9
   13820:	ldr	r1, [sp, #36]	; 0x24
   13824:	str	r3, [sp, #16]
   13828:	ldr	r3, [r4, #40]	; 0x28
   1382c:	stmib	sp, {r5, fp}
   13830:	str	r0, [sp, #32]
   13834:	str	r3, [sp, #12]
   13838:	ldr	r3, [r4]
   1383c:	str	r3, [sp]
   13840:	mov	r3, sl
   13844:	bl	12784 <__assert_fail@plt+0x1480>
   13848:	ldr	r3, [sp, #28]
   1384c:	cmp	r6, #0
   13850:	ldr	r0, [sp, #32]
   13854:	str	r3, [r8]
   13858:	strne	r7, [r6]
   1385c:	add	sp, sp, #44	; 0x2c
   13860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13864:	muleq	r3, r8, r6
   13868:	mov	r3, r2
   1386c:	mov	r2, #0
   13870:	b	13794 <__assert_fail@plt+0x2490>
   13874:	push	{r4, r5, r6, r7, r8, lr}
   13878:	mov	r6, #1
   1387c:	ldr	r4, [pc, #100]	; 138e8 <__assert_fail@plt+0x25e4>
   13880:	ldr	r5, [r4]
   13884:	add	r7, r5, #4
   13888:	ldr	r3, [r4, #4]
   1388c:	cmp	r3, r6
   13890:	bgt	138d8 <__assert_fail@plt+0x25d4>
   13894:	ldr	r6, [pc, #80]	; 138ec <__assert_fail@plt+0x25e8>
   13898:	ldr	r0, [r5, #4]
   1389c:	cmp	r0, r6
   138a0:	beq	138b4 <__assert_fail@plt+0x25b0>
   138a4:	bl	1f990 <__assert_fail@plt+0xe68c>
   138a8:	mov	r3, #256	; 0x100
   138ac:	str	r3, [r4, #8]
   138b0:	str	r6, [r4, #12]
   138b4:	ldr	r6, [pc, #52]	; 138f0 <__assert_fail@plt+0x25ec>
   138b8:	cmp	r5, r6
   138bc:	beq	138cc <__assert_fail@plt+0x25c8>
   138c0:	mov	r0, r5
   138c4:	bl	1f990 <__assert_fail@plt+0xe68c>
   138c8:	str	r6, [r4]
   138cc:	mov	r3, #1
   138d0:	str	r3, [r4, #4]
   138d4:	pop	{r4, r5, r6, r7, r8, pc}
   138d8:	ldr	r0, [r7, r6, lsl #3]
   138dc:	add	r6, r6, #1
   138e0:	bl	1f990 <__assert_fail@plt+0xe68c>
   138e4:	b	13888 <__assert_fail@plt+0x2584>
   138e8:	andeq	r1, r3, ip, ror r1
   138ec:	muleq	r3, r8, r5
   138f0:	andeq	r1, r3, r4, lsl #3
   138f4:	ldr	r3, [pc, #4]	; 13900 <__assert_fail@plt+0x25fc>
   138f8:	mvn	r2, #0
   138fc:	b	13474 <__assert_fail@plt+0x2170>
   13900:	muleq	r3, r8, r6
   13904:	ldr	r3, [pc]	; 1390c <__assert_fail@plt+0x2608>
   13908:	b	13474 <__assert_fail@plt+0x2170>
   1390c:	muleq	r3, r8, r6
   13910:	mov	r1, r0
   13914:	mov	r0, #0
   13918:	b	138f4 <__assert_fail@plt+0x25f0>
   1391c:	mov	r2, r1
   13920:	mov	r1, r0
   13924:	mov	r0, #0
   13928:	b	13904 <__assert_fail@plt+0x2600>
   1392c:	push	{r4, r5, lr}
   13930:	sub	sp, sp, #52	; 0x34
   13934:	mov	r5, r2
   13938:	mov	r4, r0
   1393c:	mov	r0, sp
   13940:	bl	12628 <__assert_fail@plt+0x1324>
   13944:	mov	r3, sp
   13948:	mvn	r2, #0
   1394c:	mov	r1, r5
   13950:	mov	r0, r4
   13954:	bl	13474 <__assert_fail@plt+0x2170>
   13958:	add	sp, sp, #52	; 0x34
   1395c:	pop	{r4, r5, pc}
   13960:	push	{r4, r5, r6, lr}
   13964:	sub	sp, sp, #48	; 0x30
   13968:	mov	r5, r2
   1396c:	mov	r6, r3
   13970:	mov	r4, r0
   13974:	mov	r0, sp
   13978:	bl	12628 <__assert_fail@plt+0x1324>
   1397c:	mov	r3, sp
   13980:	mov	r2, r6
   13984:	mov	r1, r5
   13988:	mov	r0, r4
   1398c:	bl	13474 <__assert_fail@plt+0x2170>
   13990:	add	sp, sp, #48	; 0x30
   13994:	pop	{r4, r5, r6, pc}
   13998:	mov	r2, r1
   1399c:	mov	r1, r0
   139a0:	mov	r0, #0
   139a4:	b	1392c <__assert_fail@plt+0x2628>
   139a8:	mov	r3, r2
   139ac:	mov	r2, r1
   139b0:	mov	r1, r0
   139b4:	mov	r0, #0
   139b8:	b	13960 <__assert_fail@plt+0x265c>
   139bc:	push	{r4, r5, r6, lr}
   139c0:	mov	r4, r0
   139c4:	mov	r5, r1
   139c8:	mov	r6, r2
   139cc:	sub	sp, sp, #48	; 0x30
   139d0:	mov	ip, sp
   139d4:	ldr	lr, [pc, #64]	; 13a1c <__assert_fail@plt+0x2718>
   139d8:	ldm	lr!, {r0, r1, r2, r3}
   139dc:	stmia	ip!, {r0, r1, r2, r3}
   139e0:	ldm	lr!, {r0, r1, r2, r3}
   139e4:	stmia	ip!, {r0, r1, r2, r3}
   139e8:	ldm	lr, {r0, r1, r2, r3}
   139ec:	stm	ip, {r0, r1, r2, r3}
   139f0:	mov	r1, r6
   139f4:	mov	r2, #1
   139f8:	mov	r0, sp
   139fc:	bl	13680 <__assert_fail@plt+0x237c>
   13a00:	mov	r3, sp
   13a04:	mov	r2, r5
   13a08:	mov	r1, r4
   13a0c:	mov	r0, #0
   13a10:	bl	13474 <__assert_fail@plt+0x2170>
   13a14:	add	sp, sp, #48	; 0x30
   13a18:	pop	{r4, r5, r6, pc}
   13a1c:	muleq	r3, r8, r6
   13a20:	mov	r2, r1
   13a24:	mvn	r1, #0
   13a28:	b	139bc <__assert_fail@plt+0x26b8>
   13a2c:	mov	r1, #58	; 0x3a
   13a30:	b	13a20 <__assert_fail@plt+0x271c>
   13a34:	mov	r2, #58	; 0x3a
   13a38:	b	139bc <__assert_fail@plt+0x26b8>
   13a3c:	push	{r4, r5, lr}
   13a40:	sub	sp, sp, #100	; 0x64
   13a44:	mov	r4, r0
   13a48:	mov	r0, sp
   13a4c:	mov	r5, r2
   13a50:	bl	12628 <__assert_fail@plt+0x1324>
   13a54:	mov	ip, sp
   13a58:	add	lr, sp, #48	; 0x30
   13a5c:	ldm	ip!, {r0, r1, r2, r3}
   13a60:	stmia	lr!, {r0, r1, r2, r3}
   13a64:	ldm	ip!, {r0, r1, r2, r3}
   13a68:	stmia	lr!, {r0, r1, r2, r3}
   13a6c:	ldm	ip, {r0, r1, r2, r3}
   13a70:	stm	lr, {r0, r1, r2, r3}
   13a74:	mov	r2, #1
   13a78:	mov	r1, #58	; 0x3a
   13a7c:	add	r0, sp, #48	; 0x30
   13a80:	bl	13680 <__assert_fail@plt+0x237c>
   13a84:	add	r3, sp, #48	; 0x30
   13a88:	mvn	r2, #0
   13a8c:	mov	r1, r5
   13a90:	mov	r0, r4
   13a94:	bl	13474 <__assert_fail@plt+0x2170>
   13a98:	add	sp, sp, #100	; 0x64
   13a9c:	pop	{r4, r5, pc}
   13aa0:	push	{r4, r5, r6, r7, lr}
   13aa4:	mov	r4, r0
   13aa8:	mov	r6, r1
   13aac:	mov	r7, r2
   13ab0:	mov	r5, r3
   13ab4:	sub	sp, sp, #52	; 0x34
   13ab8:	ldr	lr, [pc, #68]	; 13b04 <__assert_fail@plt+0x2800>
   13abc:	mov	ip, sp
   13ac0:	ldm	lr!, {r0, r1, r2, r3}
   13ac4:	stmia	ip!, {r0, r1, r2, r3}
   13ac8:	ldm	lr!, {r0, r1, r2, r3}
   13acc:	stmia	ip!, {r0, r1, r2, r3}
   13ad0:	ldm	lr, {r0, r1, r2, r3}
   13ad4:	stm	ip, {r0, r1, r2, r3}
   13ad8:	mov	r2, r7
   13adc:	mov	r1, r6
   13ae0:	mov	r0, sp
   13ae4:	bl	136dc <__assert_fail@plt+0x23d8>
   13ae8:	ldr	r2, [sp, #72]	; 0x48
   13aec:	mov	r3, sp
   13af0:	mov	r1, r5
   13af4:	mov	r0, r4
   13af8:	bl	13474 <__assert_fail@plt+0x2170>
   13afc:	add	sp, sp, #52	; 0x34
   13b00:	pop	{r4, r5, r6, r7, pc}
   13b04:	muleq	r3, r8, r6
   13b08:	mvn	ip, #0
   13b0c:	push	{r0, r1, r2, lr}
   13b10:	str	ip, [sp]
   13b14:	bl	13aa0 <__assert_fail@plt+0x279c>
   13b18:	add	sp, sp, #12
   13b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b20:	mov	r3, r2
   13b24:	mov	r2, r1
   13b28:	mov	r1, r0
   13b2c:	mov	r0, #0
   13b30:	b	13b08 <__assert_fail@plt+0x2804>
   13b34:	push	{r0, r1, r2, lr}
   13b38:	str	r3, [sp]
   13b3c:	mov	r3, r2
   13b40:	mov	r2, r1
   13b44:	mov	r1, r0
   13b48:	mov	r0, #0
   13b4c:	bl	13aa0 <__assert_fail@plt+0x279c>
   13b50:	add	sp, sp, #12
   13b54:	pop	{pc}		; (ldr pc, [sp], #4)
   13b58:	ldr	r3, [pc]	; 13b60 <__assert_fail@plt+0x285c>
   13b5c:	b	13474 <__assert_fail@plt+0x2170>
   13b60:	andeq	r1, r3, ip, lsl #3
   13b64:	mov	r2, r1
   13b68:	mov	r1, r0
   13b6c:	mov	r0, #0
   13b70:	b	13b58 <__assert_fail@plt+0x2854>
   13b74:	mvn	r2, #0
   13b78:	b	13b58 <__assert_fail@plt+0x2854>
   13b7c:	mov	r1, r0
   13b80:	mov	r0, #0
   13b84:	b	13b74 <__assert_fail@plt+0x2870>
   13b88:	cmp	r1, #0
   13b8c:	add	r3, r1, #31
   13b90:	movge	r3, r1
   13b94:	rsbs	r2, r1, #0
   13b98:	asr	r3, r3, #5
   13b9c:	and	r2, r2, #31
   13ba0:	and	r1, r1, #31
   13ba4:	rsbpl	r1, r2, #0
   13ba8:	mov	ip, #1
   13bac:	ldr	r2, [r0, r3, lsl #2]
   13bb0:	orr	r1, r2, ip, lsl r1
   13bb4:	str	r1, [r0, r3, lsl #2]
   13bb8:	bx	lr
   13bbc:	asr	r3, r1, #5
   13bc0:	and	r1, r1, #31
   13bc4:	ldr	r0, [r0, r3, lsl #2]
   13bc8:	lsr	r0, r0, r1
   13bcc:	and	r0, r0, #1
   13bd0:	bx	lr
   13bd4:	sub	r3, r0, #4
   13bd8:	add	r0, r0, #28
   13bdc:	ldr	r2, [r3, #4]!
   13be0:	mvn	r2, r2
   13be4:	cmp	r3, r0
   13be8:	str	r2, [r3]
   13bec:	bne	13bdc <__assert_fail@plt+0x28d8>
   13bf0:	bx	lr
   13bf4:	sub	r3, r0, #4
   13bf8:	sub	r1, r1, #4
   13bfc:	add	r0, r0, #28
   13c00:	ldr	r2, [r3, #4]!
   13c04:	ldr	ip, [r1, #4]!
   13c08:	cmp	r3, r0
   13c0c:	orr	r2, r2, ip
   13c10:	str	r2, [r3]
   13c14:	bne	13c00 <__assert_fail@plt+0x28fc>
   13c18:	bx	lr
   13c1c:	sub	r3, r0, #4
   13c20:	sub	r1, r1, #4
   13c24:	add	r0, r0, #28
   13c28:	ldr	r2, [r3, #4]!
   13c2c:	ldr	ip, [r1, #4]!
   13c30:	cmp	r3, r0
   13c34:	and	r2, r2, ip
   13c38:	str	r2, [r3]
   13c3c:	bne	13c28 <__assert_fail@plt+0x2924>
   13c40:	bx	lr
   13c44:	ldr	r3, [r0, #80]	; 0x50
   13c48:	cmp	r3, #1
   13c4c:	ldreq	r3, [r0, #4]
   13c50:	ldrne	r3, [r0, #8]
   13c54:	ldrbeq	r0, [r3, r1]
   13c58:	ldrne	r0, [r3, r1, lsl #2]
   13c5c:	bx	lr
   13c60:	ldr	r3, [r0, #36]	; 0x24
   13c64:	ldr	r2, [r0, #48]	; 0x30
   13c68:	cmp	r3, r2
   13c6c:	movlt	r2, r3
   13c70:	ldr	r3, [r0, #28]
   13c74:	cmp	r3, r2
   13c78:	blt	13c88 <__assert_fail@plt+0x2984>
   13c7c:	str	r3, [r0, #28]
   13c80:	str	r3, [r0, #32]
   13c84:	bx	lr
   13c88:	ldr	r1, [r0]
   13c8c:	ldr	ip, [r0, #24]
   13c90:	add	r1, r1, r3
   13c94:	ldrb	r1, [r1, ip]
   13c98:	ldr	ip, [r0, #64]	; 0x40
   13c9c:	ldrb	ip, [ip, r1]
   13ca0:	ldr	r1, [r0, #4]
   13ca4:	strb	ip, [r1, r3]
   13ca8:	add	r3, r3, #1
   13cac:	b	13c74 <__assert_fail@plt+0x2970>
   13cb0:	mov	r2, r1
   13cb4:	clz	r1, r1
   13cb8:	lsr	r1, r1, #5
   13cbc:	cmp	r0, #0
   13cc0:	moveq	r1, #1
   13cc4:	cmp	r1, #0
   13cc8:	bne	13cec <__assert_fail@plt+0x29e8>
   13ccc:	ldr	r3, [r0, #4]
   13cd0:	ldr	ip, [r2, #4]
   13cd4:	cmp	r3, ip
   13cd8:	bne	13cf0 <__assert_fail@plt+0x29ec>
   13cdc:	subs	r3, r3, #1
   13ce0:	bpl	13cf8 <__assert_fail@plt+0x29f4>
   13ce4:	mov	r1, #1
   13ce8:	b	13cf0 <__assert_fail@plt+0x29ec>
   13cec:	mov	r1, #0
   13cf0:	mov	r0, r1
   13cf4:	bx	lr
   13cf8:	push	{lr}		; (str lr, [sp, #-4]!)
   13cfc:	ldr	lr, [r0, #8]
   13d00:	ldr	ip, [r2, #8]
   13d04:	ldr	lr, [lr, r3, lsl #2]
   13d08:	ldr	ip, [ip, r3, lsl #2]
   13d0c:	cmp	lr, ip
   13d10:	bne	13d20 <__assert_fail@plt+0x2a1c>
   13d14:	subs	r3, r3, #1
   13d18:	bpl	13cfc <__assert_fail@plt+0x29f8>
   13d1c:	mov	r1, #1
   13d20:	mov	r0, r1
   13d24:	pop	{pc}		; (ldr pc, [sp], #4)
   13d28:	ldr	r3, [r0, #4]
   13d2c:	cmp	r3, #0
   13d30:	ble	13d5c <__assert_fail@plt+0x2a58>
   13d34:	sub	r3, r3, #1
   13d38:	ldr	ip, [r0, #8]
   13d3c:	mov	r0, #0
   13d40:	cmp	r0, r3
   13d44:	bcc	13d64 <__assert_fail@plt+0x2a60>
   13d48:	ldr	r3, [ip, r0, lsl #2]
   13d4c:	cmp	r3, r1
   13d50:	bne	13d5c <__assert_fail@plt+0x2a58>
   13d54:	add	r0, r0, #1
   13d58:	bx	lr
   13d5c:	mov	r0, #0
   13d60:	bx	lr
   13d64:	push	{lr}		; (str lr, [sp, #-4]!)
   13d68:	add	r2, r0, r3
   13d6c:	lsr	r2, r2, #1
   13d70:	ldr	lr, [ip, r2, lsl #2]
   13d74:	cmp	lr, r1
   13d78:	addlt	r0, r2, #1
   13d7c:	movge	r3, r2
   13d80:	cmp	r0, r3
   13d84:	bcc	13d68 <__assert_fail@plt+0x2a64>
   13d88:	ldr	r3, [ip, r0, lsl #2]
   13d8c:	cmp	r3, r1
   13d90:	addeq	r0, r0, #1
   13d94:	movne	r0, #0
   13d98:	pop	{pc}		; (ldr pc, [sp], #4)
   13d9c:	push	{r4, r5, r6, lr}
   13da0:	mov	r4, r0
   13da4:	mov	r5, r1
   13da8:	mov	r6, r2
   13dac:	ldr	r3, [r4, #4]
   13db0:	cmp	r3, #0
   13db4:	bne	13e0c <__assert_fail@plt+0x2b08>
   13db8:	ldr	r3, [r4, #8]
   13dbc:	cmp	r3, #0
   13dc0:	bne	13e0c <__assert_fail@plt+0x2b08>
   13dc4:	mov	r1, r4
   13dc8:	mov	r0, r6
   13dcc:	blx	r5
   13dd0:	cmp	r0, #0
   13dd4:	popne	{r4, r5, r6, pc}
   13dd8:	ldr	r1, [r4]
   13ddc:	cmp	r1, #0
   13de0:	popeq	{r4, r5, r6, pc}
   13de4:	ldr	r3, [r1, #8]
   13de8:	sub	r4, r3, r4
   13dec:	cmp	r3, #0
   13df0:	clz	r4, r4
   13df4:	moveq	r2, #1
   13df8:	lsr	r4, r4, #5
   13dfc:	movne	r2, r4
   13e00:	mov	r4, r1
   13e04:	cmp	r2, #0
   13e08:	bne	13dc4 <__assert_fail@plt+0x2ac0>
   13e0c:	mov	r4, r3
   13e10:	b	13dac <__assert_fail@plt+0x2aa8>
   13e14:	ldr	r3, [r1, #40]	; 0x28
   13e18:	ldr	ip, [r1, #56]	; 0x38
   13e1c:	cmp	ip, r3
   13e20:	bgt	13e38 <__assert_fail@plt+0x2b34>
   13e24:	mov	r3, #2
   13e28:	strb	r3, [r0, #4]
   13e2c:	mov	r3, #0
   13e30:	mov	r0, r3
   13e34:	bx	lr
   13e38:	push	{r4, lr}
   13e3c:	ldr	lr, [r1, #4]
   13e40:	ldr	r4, [r1, #80]	; 0x50
   13e44:	ldrb	ip, [lr, r3]
   13e48:	cmp	r4, #1
   13e4c:	strb	ip, [r0]
   13e50:	ble	13e7c <__assert_fail@plt+0x2b78>
   13e54:	ldr	r4, [r1, #28]
   13e58:	cmp	r3, r4
   13e5c:	beq	13e7c <__assert_fail@plt+0x2b78>
   13e60:	ldr	r4, [r1, #8]
   13e64:	ldr	r4, [r4, r3, lsl #2]
   13e68:	cmn	r4, #1
   13e6c:	bne	13e7c <__assert_fail@plt+0x2b78>
   13e70:	mov	r3, #1
   13e74:	strb	r3, [r0, #4]
   13e78:	b	13f08 <__assert_fail@plt+0x2c04>
   13e7c:	cmp	ip, #92	; 0x5c
   13e80:	bne	13ea8 <__assert_fail@plt+0x2ba4>
   13e84:	tst	r2, #1
   13e88:	beq	13e70 <__assert_fail@plt+0x2b6c>
   13e8c:	ldr	r2, [r1, #48]	; 0x30
   13e90:	add	r3, r3, #1
   13e94:	cmp	r3, r2
   13e98:	strlt	r3, [r1, #40]	; 0x28
   13e9c:	ldrblt	r3, [lr, r3]
   13ea0:	strblt	r3, [r0]
   13ea4:	b	13e70 <__assert_fail@plt+0x2b6c>
   13ea8:	cmp	ip, #91	; 0x5b
   13eac:	bne	13f20 <__assert_fail@plt+0x2c1c>
   13eb0:	ldr	r1, [r1, #48]	; 0x30
   13eb4:	add	ip, r3, #1
   13eb8:	cmp	ip, r1
   13ebc:	bge	13ee8 <__assert_fail@plt+0x2be4>
   13ec0:	add	r3, lr, r3
   13ec4:	ldrb	r3, [r3, #1]
   13ec8:	cmp	r3, #58	; 0x3a
   13ecc:	strb	r3, [r0]
   13ed0:	beq	13f10 <__assert_fail@plt+0x2c0c>
   13ed4:	cmp	r3, #61	; 0x3d
   13ed8:	beq	13efc <__assert_fail@plt+0x2bf8>
   13edc:	cmp	r3, #46	; 0x2e
   13ee0:	moveq	r3, #26
   13ee4:	beq	13f00 <__assert_fail@plt+0x2bfc>
   13ee8:	mov	r3, #1
   13eec:	mov	r2, #91	; 0x5b
   13ef0:	strb	r2, [r0]
   13ef4:	strb	r3, [r0, #4]
   13ef8:	b	13f08 <__assert_fail@plt+0x2c04>
   13efc:	mov	r3, #28
   13f00:	strb	r3, [r0, #4]
   13f04:	mov	r3, #2
   13f08:	mov	r0, r3
   13f0c:	pop	{r4, pc}
   13f10:	tst	r2, #4
   13f14:	beq	13ee8 <__assert_fail@plt+0x2be4>
   13f18:	mov	r3, #30
   13f1c:	b	13f00 <__assert_fail@plt+0x2bfc>
   13f20:	cmp	ip, #93	; 0x5d
   13f24:	beq	13f4c <__assert_fail@plt+0x2c48>
   13f28:	cmp	ip, #94	; 0x5e
   13f2c:	moveq	r3, #25
   13f30:	beq	13f40 <__assert_fail@plt+0x2c3c>
   13f34:	cmp	ip, #45	; 0x2d
   13f38:	moveq	r3, #22
   13f3c:	bne	13e70 <__assert_fail@plt+0x2b6c>
   13f40:	strb	r3, [r0, #4]
   13f44:	mov	r3, #1
   13f48:	b	13f08 <__assert_fail@plt+0x2c04>
   13f4c:	mov	r3, #21
   13f50:	b	13f40 <__assert_fail@plt+0x2c3c>
   13f54:	ldrb	r3, [r1, #24]
   13f58:	cmp	r3, #17
   13f5c:	bne	13f74 <__assert_fail@plt+0x2c70>
   13f60:	ldr	r3, [r1, #20]
   13f64:	cmp	r0, r3
   13f68:	ldrbeq	r3, [r1, #26]
   13f6c:	orreq	r3, r3, #8
   13f70:	strbeq	r3, [r1, #26]
   13f74:	mov	r0, #0
   13f78:	bx	lr
   13f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f80:	sub	sp, sp, #36	; 0x24
   13f84:	mov	r6, r2
   13f88:	mov	r9, #12
   13f8c:	mov	fp, r0
   13f90:	mov	r4, r1
   13f94:	mov	r8, #0
   13f98:	ldr	sl, [r0, #84]	; 0x54
   13f9c:	str	r3, [sp, #12]
   13fa0:	ldr	r2, [sp, #12]
   13fa4:	ldr	r3, [sl, #24]
   13fa8:	mla	r9, r9, r2, r3
   13fac:	mov	r3, #1
   13fb0:	ldr	r2, [sp, #72]	; 0x48
   13fb4:	lsl	r3, r3, r6
   13fb8:	str	r3, [sp, #8]
   13fbc:	mvn	r3, r3
   13fc0:	str	r3, [sp, #20]
   13fc4:	mov	r3, #24
   13fc8:	mla	r3, r2, r3, r3
   13fcc:	str	r3, [sp, #28]
   13fd0:	ldr	r3, [r9, #4]
   13fd4:	cmp	r3, r8
   13fd8:	asrle	r0, r4, #1
   13fdc:	ble	14080 <__assert_fail@plt+0x2d7c>
   13fe0:	ldr	r3, [r9, #8]
   13fe4:	ldr	r7, [r3, r8, lsl #2]
   13fe8:	ldr	r3, [sl]
   13fec:	add	r2, r3, r7, lsl #3
   13ff0:	ldrb	r2, [r2, #4]
   13ff4:	cmp	r2, #8
   13ff8:	beq	140f8 <__assert_fail@plt+0x2df4>
   13ffc:	cmp	r2, #9
   14000:	beq	14110 <__assert_fail@plt+0x2e0c>
   14004:	cmp	r2, #4
   14008:	bne	140f0 <__assert_fail@plt+0x2dec>
   1400c:	ldr	r3, [sp, #72]	; 0x48
   14010:	cmn	r3, #1
   14014:	beq	140f0 <__assert_fail@plt+0x2dec>
   14018:	mov	r3, #12
   1401c:	ldr	r5, [fp, #116]	; 0x74
   14020:	mul	r3, r3, r7
   14024:	str	r3, [sp, #16]
   14028:	ldr	r3, [sp, #28]
   1402c:	add	r5, r5, r3
   14030:	and	r3, r4, #2
   14034:	str	r3, [sp, #24]
   14038:	ldr	r3, [r5, #-24]	; 0xffffffe8
   1403c:	cmp	r3, r7
   14040:	bne	140e0 <__assert_fail@plt+0x2ddc>
   14044:	cmp	r6, #31
   14048:	bgt	1405c <__assert_fail@plt+0x2d58>
   1404c:	ldr	r3, [r5, #-8]
   14050:	ldr	r2, [sp, #8]
   14054:	tst	r2, r3
   14058:	beq	140e0 <__assert_fail@plt+0x2ddc>
   1405c:	ldr	r2, [sp, #16]
   14060:	ldr	r3, [sl, #20]
   14064:	add	r3, r3, r2
   14068:	ldr	r2, [sp, #12]
   1406c:	ldr	r3, [r3, #8]
   14070:	ldr	r3, [r3]
   14074:	cmp	r2, r3
   14078:	bne	14088 <__assert_fail@plt+0x2d84>
   1407c:	sbfx	r0, r4, #0, #1
   14080:	add	sp, sp, #36	; 0x24
   14084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14088:	ldr	r2, [sp, #72]	; 0x48
   1408c:	mov	r1, r4
   14090:	mov	r0, fp
   14094:	str	r2, [sp]
   14098:	mov	r2, r6
   1409c:	bl	13f7c <__assert_fail@plt+0x2c78>
   140a0:	cmn	r0, #1
   140a4:	bne	140b0 <__assert_fail@plt+0x2dac>
   140a8:	mvn	r0, #0
   140ac:	b	14080 <__assert_fail@plt+0x2d7c>
   140b0:	cmp	r0, #0
   140b4:	bne	140cc <__assert_fail@plt+0x2dc8>
   140b8:	ldr	r3, [sp, #24]
   140bc:	cmp	r3, #0
   140c0:	beq	140cc <__assert_fail@plt+0x2dc8>
   140c4:	mov	r0, #0
   140c8:	b	14080 <__assert_fail@plt+0x2d7c>
   140cc:	cmp	r6, #31
   140d0:	ldrle	r3, [r5, #-8]
   140d4:	ldrle	r2, [sp, #20]
   140d8:	andle	r3, r3, r2
   140dc:	strle	r3, [r5, #-8]
   140e0:	add	r5, r5, #24
   140e4:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   140e8:	cmp	r3, #0
   140ec:	bne	14038 <__assert_fail@plt+0x2d34>
   140f0:	add	r8, r8, #1
   140f4:	b	13fd0 <__assert_fail@plt+0x2ccc>
   140f8:	tst	r4, #1
   140fc:	beq	140f0 <__assert_fail@plt+0x2dec>
   14100:	ldr	r3, [r3, r7, lsl #3]
   14104:	cmp	r3, r6
   14108:	bne	140f0 <__assert_fail@plt+0x2dec>
   1410c:	b	140a8 <__assert_fail@plt+0x2da4>
   14110:	tst	r4, #2
   14114:	beq	140f0 <__assert_fail@plt+0x2dec>
   14118:	ldr	r3, [r3, r7, lsl #3]
   1411c:	cmp	r3, r6
   14120:	bne	140f0 <__assert_fail@plt+0x2dec>
   14124:	b	140c4 <__assert_fail@plt+0x2dc0>
   14128:	push	{r4, r5, lr}
   1412c:	mov	lr, #24
   14130:	ldr	r5, [r0, #116]	; 0x74
   14134:	ldr	ip, [sp, #12]
   14138:	ldr	r4, [sp, #16]
   1413c:	mla	r1, lr, r1, r5
   14140:	ldr	lr, [r1, #8]
   14144:	cmp	lr, ip
   14148:	bgt	14180 <__assert_fail@plt+0x2e7c>
   1414c:	ldr	r1, [r1, #12]
   14150:	cmp	r1, ip
   14154:	blt	1418c <__assert_fail@plt+0x2e88>
   14158:	cmp	r1, ip
   1415c:	moveq	r1, #2
   14160:	movne	r1, #0
   14164:	cmp	lr, ip
   14168:	orreq	r1, r1, #1
   1416c:	cmp	r1, #0
   14170:	beq	14184 <__assert_fail@plt+0x2e80>
   14174:	str	r4, [sp, #12]
   14178:	pop	{r4, r5, lr}
   1417c:	b	13f7c <__assert_fail@plt+0x2c78>
   14180:	mvn	r1, #0
   14184:	mov	r0, r1
   14188:	pop	{r4, r5, pc}
   1418c:	mov	r1, #1
   14190:	b	14184 <__assert_fail@plt+0x2e80>
   14194:	push	{r4, r5, lr}
   14198:	mov	r3, #0
   1419c:	mov	r5, #24
   141a0:	ldr	r4, [r0, #108]	; 0x6c
   141a4:	mov	ip, r4
   141a8:	cmp	ip, r3
   141ac:	bgt	141dc <__assert_fail@plt+0x2ed8>
   141b0:	cmp	r4, r3
   141b4:	mvnle	r3, #0
   141b8:	ble	141d4 <__assert_fail@plt+0x2ed0>
   141bc:	ldr	r0, [r0, #116]	; 0x74
   141c0:	mov	r2, #24
   141c4:	mla	r2, r2, r3, r0
   141c8:	ldr	r2, [r2, #4]
   141cc:	cmp	r2, r1
   141d0:	mvnne	r3, #0
   141d4:	mov	r0, r3
   141d8:	pop	{r4, r5, pc}
   141dc:	ldr	lr, [r0, #116]	; 0x74
   141e0:	add	r2, ip, r3
   141e4:	asr	r2, r2, #1
   141e8:	mla	lr, r5, r2, lr
   141ec:	ldr	lr, [lr, #4]
   141f0:	cmp	lr, r1
   141f4:	addlt	r3, r2, #1
   141f8:	movge	ip, r2
   141fc:	b	141a8 <__assert_fail@plt+0x2ea4>
   14200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14204:	mov	r6, r1
   14208:	sub	sp, sp, #20
   1420c:	mov	r1, r3
   14210:	mov	r5, r0
   14214:	mov	sl, r2
   14218:	mov	r7, r3
   1421c:	ldr	r9, [r0, #84]	; 0x54
   14220:	mov	r4, #0
   14224:	bl	14194 <__assert_fail@plt+0x2e90>
   14228:	str	r0, [sp, #8]
   1422c:	mov	r0, r5
   14230:	ldr	r1, [sp, #60]	; 0x3c
   14234:	bl	14194 <__assert_fail@plt+0x2e90>
   14238:	str	r0, [sp, #12]
   1423c:	ldr	r3, [r6, #4]
   14240:	cmp	r3, r4
   14244:	bgt	14254 <__assert_fail@plt+0x2f50>
   14248:	mov	r0, #0
   1424c:	add	sp, sp, #20
   14250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14254:	ldr	r3, [r6, #8]
   14258:	mov	r0, r5
   1425c:	ldr	r2, [r5, #116]	; 0x74
   14260:	ldr	r1, [r3, r4, lsl #2]
   14264:	mov	r3, #24
   14268:	mul	r3, r3, r1
   1426c:	ldr	r2, [r2, r3]
   14270:	ldr	r3, [r9]
   14274:	ldr	r8, [r3, r2, lsl #3]
   14278:	str	r7, [sp]
   1427c:	ldr	r3, [sp, #8]
   14280:	mov	r2, r8
   14284:	str	r3, [sp, #4]
   14288:	mov	r3, sl
   1428c:	bl	14128 <__assert_fail@plt+0x2e24>
   14290:	ldr	r3, [sp, #12]
   14294:	mov	fp, r0
   14298:	mov	r2, r8
   1429c:	mov	r0, r5
   142a0:	ldr	r1, [r6, #8]
   142a4:	str	r3, [sp, #4]
   142a8:	ldr	r3, [sp, #60]	; 0x3c
   142ac:	str	r3, [sp]
   142b0:	ldr	r1, [r1, r4, lsl #2]
   142b4:	ldr	r3, [sp, #56]	; 0x38
   142b8:	bl	14128 <__assert_fail@plt+0x2e24>
   142bc:	cmp	fp, r0
   142c0:	addeq	r4, r4, #1
   142c4:	beq	1423c <__assert_fail@plt+0x2f38>
   142c8:	mov	r0, #1
   142cc:	b	1424c <__assert_fail@plt+0x2f48>
   142d0:	ldr	r3, [r0, #80]	; 0x50
   142d4:	push	{r4, r5, r6, lr}
   142d8:	mov	r4, r0
   142dc:	mov	r5, r1
   142e0:	cmp	r3, #1
   142e4:	ble	14334 <__assert_fail@plt+0x3030>
   142e8:	cmn	r1, #-1073741823	; 0xc0000001
   142ec:	bls	142f8 <__assert_fail@plt+0x2ff4>
   142f0:	mov	r0, #12
   142f4:	pop	{r4, r5, r6, pc}
   142f8:	lsl	r6, r1, #2
   142fc:	ldr	r0, [r0, #8]
   14300:	mov	r1, r6
   14304:	bl	1f83c <__assert_fail@plt+0xe538>
   14308:	cmp	r0, #0
   1430c:	beq	142f0 <__assert_fail@plt+0x2fec>
   14310:	str	r0, [r4, #8]
   14314:	ldr	r0, [r4, #12]
   14318:	cmp	r0, #0
   1431c:	beq	14334 <__assert_fail@plt+0x3030>
   14320:	mov	r1, r6
   14324:	bl	1f83c <__assert_fail@plt+0xe538>
   14328:	cmp	r0, #0
   1432c:	beq	142f0 <__assert_fail@plt+0x2fec>
   14330:	str	r0, [r4, #12]
   14334:	ldrb	r3, [r4, #75]	; 0x4b
   14338:	cmp	r3, #0
   1433c:	beq	14358 <__assert_fail@plt+0x3054>
   14340:	mov	r1, r5
   14344:	ldr	r0, [r4, #4]
   14348:	bl	1f83c <__assert_fail@plt+0xe538>
   1434c:	cmp	r0, #0
   14350:	beq	142f0 <__assert_fail@plt+0x2fec>
   14354:	str	r0, [r4, #4]
   14358:	mov	r0, #0
   1435c:	str	r5, [r4, #36]	; 0x24
   14360:	pop	{r4, r5, r6, pc}
   14364:	push	{r4, r5, r6, lr}
   14368:	mov	r5, r1
   1436c:	mov	r4, r0
   14370:	ldm	r0, {r1, r3}
   14374:	cmp	r1, r3
   14378:	bne	143a0 <__assert_fail@plt+0x309c>
   1437c:	add	r1, r1, #1
   14380:	ldr	r0, [r0, #8]
   14384:	lsl	r3, r1, #1
   14388:	lsl	r1, r1, #3
   1438c:	str	r3, [r4]
   14390:	bl	1f83c <__assert_fail@plt+0xe538>
   14394:	cmp	r0, #0
   14398:	popeq	{r4, r5, r6, pc}
   1439c:	str	r0, [r4, #8]
   143a0:	ldr	r3, [r4, #4]
   143a4:	mov	r0, #1
   143a8:	ldr	r2, [r4, #8]
   143ac:	add	r1, r3, #1
   143b0:	str	r1, [r4, #4]
   143b4:	str	r5, [r2, r3, lsl #2]
   143b8:	pop	{r4, r5, r6, pc}
   143bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143c0:	mov	r9, r3
   143c4:	mov	r4, r0
   143c8:	mov	r7, r1
   143cc:	mov	r8, r2
   143d0:	ldr	r3, [r0, #64]	; 0x40
   143d4:	cmp	r3, #31
   143d8:	bne	14400 <__assert_fail@plt+0x30fc>
   143dc:	mov	r0, #996	; 0x3e4
   143e0:	bl	1f810 <__assert_fail@plt+0xe50c>
   143e4:	subs	r5, r0, #0
   143e8:	beq	14468 <__assert_fail@plt+0x3164>
   143ec:	ldr	r3, [r4, #56]	; 0x38
   143f0:	str	r0, [r4, #56]	; 0x38
   143f4:	str	r3, [r0]
   143f8:	mov	r3, #0
   143fc:	str	r3, [r4, #64]	; 0x40
   14400:	ldr	r6, [r4, #56]	; 0x38
   14404:	mov	r2, #0
   14408:	cmp	r7, r2
   1440c:	ldr	ip, [r4, #64]	; 0x40
   14410:	add	r3, ip, #1
   14414:	lsl	ip, ip, #5
   14418:	add	lr, r6, ip
   1441c:	str	r3, [r4, #64]	; 0x40
   14420:	add	r5, ip, #4
   14424:	add	r3, lr, #24
   14428:	add	ip, ip, #16
   1442c:	stmib	lr, {r2, r7, r8}
   14430:	add	ip, r6, ip
   14434:	add	r5, r6, r5
   14438:	ldm	r9, {r0, r1}
   1443c:	stm	r3, {r0, r1}
   14440:	ldrb	r3, [ip, #14]
   14444:	bic	r3, r3, #12
   14448:	strb	r3, [ip, #14]
   1444c:	mvn	r3, #0
   14450:	str	r2, [lr, #16]
   14454:	str	r2, [lr, #20]
   14458:	str	r3, [lr, #32]
   1445c:	strne	r5, [r7]
   14460:	cmp	r8, #0
   14464:	strne	r5, [r8]
   14468:	mov	r0, r5
   1446c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14470:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14474:	mov	r5, r0
   14478:	mov	r7, r1
   1447c:	add	r6, sp, #4
   14480:	ldr	r4, [r0]
   14484:	mov	r2, #0
   14488:	add	r3, r5, #20
   1448c:	mov	r1, r2
   14490:	mov	r0, r7
   14494:	bl	143bc <__assert_fail@plt+0x30b8>
   14498:	cmp	r0, #0
   1449c:	str	r0, [r6]
   144a0:	beq	14500 <__assert_fail@plt+0x31fc>
   144a4:	str	r4, [r0]
   144a8:	ldr	r4, [r6]
   144ac:	ldrb	r3, [r4, #26]
   144b0:	orr	r3, r3, #4
   144b4:	strb	r3, [r4, #26]
   144b8:	ldr	r3, [r5, #4]
   144bc:	cmp	r3, #0
   144c0:	addne	r6, r4, #4
   144c4:	bne	144e0 <__assert_fail@plt+0x31dc>
   144c8:	ldr	r2, [r5, #8]
   144cc:	cmp	r2, r3
   144d0:	cmpne	r2, #0
   144d4:	beq	144e8 <__assert_fail@plt+0x31e4>
   144d8:	add	r6, r4, #8
   144dc:	mov	r3, r2
   144e0:	mov	r5, r3
   144e4:	b	14484 <__assert_fail@plt+0x3180>
   144e8:	ldr	r2, [r5]
   144ec:	mov	r3, r5
   144f0:	ldr	r4, [r4]
   144f4:	cmp	r2, #0
   144f8:	bne	14508 <__assert_fail@plt+0x3204>
   144fc:	ldr	r0, [sp, #4]
   14500:	add	sp, sp, #12
   14504:	pop	{r4, r5, r6, r7, pc}
   14508:	mov	r5, r2
   1450c:	b	144c8 <__assert_fail@plt+0x31c4>
   14510:	push	{r0, r1, r2, r4, r5, lr}
   14514:	mov	r4, #0
   14518:	mov	r5, #0
   1451c:	strd	r4, [sp]
   14520:	strb	r3, [sp, #4]
   14524:	mov	r3, sp
   14528:	bl	143bc <__assert_fail@plt+0x30b8>
   1452c:	add	sp, sp, #12
   14530:	pop	{r4, r5, pc}
   14534:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14538:	ldr	r4, [r2, #4]
   1453c:	ldr	r9, [r1]
   14540:	ldrb	r1, [r1, #28]
   14544:	adds	r3, r4, #0
   14548:	movne	r3, #1
   1454c:	ands	r3, r3, r1, lsr #4
   14550:	beq	14570 <__assert_fail@plt+0x326c>
   14554:	ldr	r1, [r2, #20]
   14558:	cmp	r1, #31
   1455c:	bgt	14608 <__assert_fail@plt+0x3304>
   14560:	ldr	r3, [r9, #80]	; 0x50
   14564:	lsr	r3, r3, r1
   14568:	tst	r3, #1
   1456c:	beq	14608 <__assert_fail@plt+0x3304>
   14570:	mov	sl, r2
   14574:	mov	r2, #0
   14578:	mov	r1, r2
   1457c:	mov	r3, #8
   14580:	mov	r6, r0
   14584:	mov	r0, r9
   14588:	bl	14510 <__assert_fail@plt+0x320c>
   1458c:	mov	r2, #0
   14590:	mov	r8, r0
   14594:	mov	r3, #9
   14598:	mov	r1, r2
   1459c:	mov	r0, r9
   145a0:	bl	14510 <__assert_fail@plt+0x320c>
   145a4:	cmp	r4, #0
   145a8:	mov	r5, r0
   145ac:	moveq	r7, r0
   145b0:	beq	145cc <__assert_fail@plt+0x32c8>
   145b4:	mov	r2, r0
   145b8:	mov	r3, #16
   145bc:	mov	r1, r4
   145c0:	mov	r0, r9
   145c4:	bl	14510 <__assert_fail@plt+0x320c>
   145c8:	mov	r7, r0
   145cc:	mov	r3, #16
   145d0:	mov	r2, r7
   145d4:	mov	r1, r8
   145d8:	mov	r0, r9
   145dc:	bl	14510 <__assert_fail@plt+0x320c>
   145e0:	cmp	r7, #0
   145e4:	cmpne	r0, #0
   145e8:	mov	r4, r0
   145ec:	beq	145fc <__assert_fail@plt+0x32f8>
   145f0:	cmp	r5, #0
   145f4:	cmpne	r8, #0
   145f8:	bne	14610 <__assert_fail@plt+0x330c>
   145fc:	mov	r3, #12
   14600:	mov	r4, #0
   14604:	str	r3, [r6]
   14608:	mov	r0, r4
   1460c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14610:	ldr	r3, [sl, #20]
   14614:	str	r3, [r5, #20]
   14618:	str	r3, [r8, #20]
   1461c:	ldrb	r3, [sl, #26]
   14620:	ldrb	r2, [r5, #26]
   14624:	ubfx	r3, r3, #3, #1
   14628:	bfi	r2, r3, #3, #1
   1462c:	strb	r2, [r5, #26]
   14630:	ldrb	r2, [r8, #26]
   14634:	bfi	r2, r3, #3, #1
   14638:	strb	r2, [r8, #26]
   1463c:	b	14608 <__assert_fail@plt+0x3304>
   14640:	push	{r0, r1, r2, r4, r5, lr}
   14644:	mov	r3, #0
   14648:	mov	r5, r0
   1464c:	mov	r4, r1
   14650:	ldr	r2, [r1, #4]
   14654:	str	r3, [sp, #4]
   14658:	cmp	r2, r3
   1465c:	beq	14684 <__assert_fail@plt+0x3380>
   14660:	ldrb	r3, [r2, #24]
   14664:	cmp	r3, #17
   14668:	bne	14684 <__assert_fail@plt+0x3380>
   1466c:	mov	r1, r0
   14670:	add	r0, sp, #4
   14674:	bl	14534 <__assert_fail@plt+0x3230>
   14678:	cmp	r0, #0
   1467c:	str	r0, [r4, #4]
   14680:	strne	r4, [r0]
   14684:	ldr	r2, [r4, #8]
   14688:	cmp	r2, #0
   1468c:	beq	146b4 <__assert_fail@plt+0x33b0>
   14690:	ldrb	r3, [r2, #24]
   14694:	cmp	r3, #17
   14698:	bne	146b4 <__assert_fail@plt+0x33b0>
   1469c:	mov	r1, r5
   146a0:	add	r0, sp, #4
   146a4:	bl	14534 <__assert_fail@plt+0x3230>
   146a8:	cmp	r0, #0
   146ac:	str	r0, [r4, #8]
   146b0:	strne	r4, [r0]
   146b4:	ldr	r0, [sp, #4]
   146b8:	add	sp, sp, #12
   146bc:	pop	{r4, r5, pc}
   146c0:	mov	r3, #1
   146c4:	push	{r4, r5, r6, lr}
   146c8:	mov	r4, r0
   146cc:	mov	r5, r1
   146d0:	str	r3, [r0]
   146d4:	str	r3, [r0, #4]
   146d8:	mov	r0, #4
   146dc:	bl	1f810 <__assert_fail@plt+0xe50c>
   146e0:	cmp	r0, #0
   146e4:	str	r0, [r4, #8]
   146e8:	streq	r0, [r4]
   146ec:	streq	r0, [r4, #4]
   146f0:	moveq	r0, #12
   146f4:	strne	r5, [r0]
   146f8:	movne	r0, #0
   146fc:	pop	{r4, r5, r6, pc}
   14700:	push	{r4, lr}
   14704:	mov	r3, #0
   14708:	mov	r4, r0
   1470c:	lsl	r0, r1, #2
   14710:	stm	r4, {r1, r3}
   14714:	bl	1f810 <__assert_fail@plt+0xe50c>
   14718:	cmp	r0, #0
   1471c:	str	r0, [r4, #8]
   14720:	moveq	r0, #12
   14724:	movne	r0, #0
   14728:	pop	{r4, pc}
   1472c:	mov	r2, #32
   14730:	mov	r1, #0
   14734:	b	11208 <memset@plt>
   14738:	push	{r4, r5, r6, r7, r8, lr}
   1473c:	sub	sp, sp, #80	; 0x50
   14740:	mov	r4, r0
   14744:	add	r7, sp, #8
   14748:	add	r6, r0, #16
   1474c:	ldr	r5, [r0, #28]
   14750:	ldr	r8, [r0, #36]	; 0x24
   14754:	ldr	r3, [r0, #48]	; 0x30
   14758:	cmp	r8, r3
   1475c:	movge	r8, r3
   14760:	cmp	r5, r8
   14764:	bge	1487c <__assert_fail@plt+0x3578>
   14768:	ldr	r3, [r4, #64]	; 0x40
   1476c:	sub	r2, r8, r5
   14770:	ldm	r6, {r0, r1}
   14774:	cmp	r3, #0
   14778:	stm	r7, {r0, r1}
   1477c:	beq	14860 <__assert_fail@plt+0x355c>
   14780:	mov	r3, #0
   14784:	add	r1, sp, #16
   14788:	b	147bc <__assert_fail@plt+0x34b8>
   1478c:	ldr	r0, [r4]
   14790:	ldr	ip, [r4, #24]
   14794:	add	r0, r0, r5
   14798:	add	r0, r0, r3
   1479c:	ldrb	r0, [r0, ip]
   147a0:	ldr	ip, [r4, #64]	; 0x40
   147a4:	ldrb	ip, [ip, r0]
   147a8:	ldr	r0, [r4, #4]
   147ac:	add	r0, r0, r3
   147b0:	strb	ip, [r0, r5]
   147b4:	strb	ip, [r1, r3]
   147b8:	add	r3, r3, #1
   147bc:	ldr	r0, [r4, #80]	; 0x50
   147c0:	cmp	r2, r0
   147c4:	movlt	r0, r2
   147c8:	cmp	r0, r3
   147cc:	bgt	1478c <__assert_fail@plt+0x3488>
   147d0:	mov	r3, r6
   147d4:	add	r0, sp, #4
   147d8:	bl	1fa3c <__assert_fail@plt+0xe738>
   147dc:	sub	r3, r0, #1
   147e0:	cmn	r3, #3
   147e4:	bhi	14800 <__assert_fail@plt+0x34fc>
   147e8:	cmn	r0, #2
   147ec:	bne	14830 <__assert_fail@plt+0x352c>
   147f0:	ldr	r2, [r4, #36]	; 0x24
   147f4:	ldr	r3, [r4, #48]	; 0x30
   147f8:	cmp	r2, r3
   147fc:	blt	14874 <__assert_fail@plt+0x3570>
   14800:	ldr	r3, [r4]
   14804:	ldr	r2, [r4, #24]
   14808:	ldm	r7, {r0, r1}
   1480c:	add	r3, r3, r5
   14810:	ldrb	r3, [r3, r2]
   14814:	ldr	r2, [r4, #64]	; 0x40
   14818:	str	r3, [sp, #4]
   1481c:	cmp	r2, #0
   14820:	ldrbne	r3, [r2, r3]
   14824:	stm	r6, {r0, r1}
   14828:	mov	r0, #1
   1482c:	strne	r3, [sp, #4]
   14830:	ldr	r3, [sp, #4]
   14834:	add	r0, r5, r0
   14838:	mvn	r1, #0
   1483c:	ldr	r2, [r4, #8]
   14840:	str	r3, [r2, r5, lsl #2]
   14844:	add	r3, r5, #1
   14848:	cmp	r3, r0
   1484c:	mov	r5, r3
   14850:	bge	14760 <__assert_fail@plt+0x345c>
   14854:	str	r1, [r2, r3, lsl #2]
   14858:	add	r3, r3, #1
   1485c:	b	14848 <__assert_fail@plt+0x3544>
   14860:	ldr	r1, [r4, #24]
   14864:	add	r3, r5, r1
   14868:	ldr	r1, [r4]
   1486c:	add	r1, r1, r3
   14870:	b	147d0 <__assert_fail@plt+0x34cc>
   14874:	ldm	r7, {r0, r1}
   14878:	stm	r6, {r0, r1}
   1487c:	str	r5, [r4, #28]
   14880:	str	r5, [r4, #32]
   14884:	add	sp, sp, #80	; 0x50
   14888:	pop	{r4, r5, r6, r7, r8, pc}
   1488c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14890:	mov	r4, r0
   14894:	sub	sp, sp, #100	; 0x64
   14898:	ldr	r5, [r0, #28]
   1489c:	ldr	r7, [r0, #36]	; 0x24
   148a0:	ldr	r3, [r0, #48]	; 0x30
   148a4:	cmp	r7, r3
   148a8:	movge	r7, r3
   148ac:	ldrb	r3, [r0, #74]	; 0x4a
   148b0:	cmp	r3, #0
   148b4:	bne	148d8 <__assert_fail@plt+0x35d4>
   148b8:	ldr	r3, [r0, #64]	; 0x40
   148bc:	cmp	r3, #0
   148c0:	bne	148d8 <__assert_fail@plt+0x35d4>
   148c4:	ldrb	r3, [r0, #76]	; 0x4c
   148c8:	cmp	r3, #0
   148cc:	addeq	r6, r0, #16
   148d0:	addeq	r8, sp, #24
   148d4:	beq	1493c <__assert_fail@plt+0x3638>
   148d8:	mov	r6, r5
   148dc:	ldr	r5, [r4, #32]
   148e0:	cmp	r6, r7
   148e4:	blt	149ec <__assert_fail@plt+0x36e8>
   148e8:	b	14abc <__assert_fail@plt+0x37b8>
   148ec:	ldr	fp, [r4]
   148f0:	str	r5, [sp, #4]
   148f4:	ldr	sl, [r4, #24]
   148f8:	add	r3, fp, sl
   148fc:	ldrb	r9, [r3, r5]
   14900:	tst	r9, #128	; 0x80
   14904:	bne	14948 <__assert_fail@plt+0x3644>
   14908:	mov	r0, r6
   1490c:	bl	110ac <mbsinit@plt>
   14910:	cmp	r0, #0
   14914:	beq	14948 <__assert_fail@plt+0x3644>
   14918:	mov	r0, r9
   1491c:	bl	112bc <towupper@plt>
   14920:	bics	r3, r0, #127	; 0x7f
   14924:	bne	14948 <__assert_fail@plt+0x3644>
   14928:	ldr	r3, [r4, #4]
   1492c:	strb	r0, [r3, r5]
   14930:	ldr	r3, [r4, #8]
   14934:	str	r0, [r3, r5, lsl #2]
   14938:	add	r5, r5, #1
   1493c:	cmp	r5, r7
   14940:	blt	148ec <__assert_fail@plt+0x35e8>
   14944:	b	14b28 <__assert_fail@plt+0x3824>
   14948:	ldm	r6, {r0, r1}
   1494c:	mov	r3, r6
   14950:	sub	r2, r7, r5
   14954:	stm	r8, {r0, r1}
   14958:	add	r1, sl, r5
   1495c:	add	r0, sp, #20
   14960:	add	r1, fp, r1
   14964:	bl	1fa3c <__assert_fail@plt+0xe738>
   14968:	sub	r3, r0, #1
   1496c:	mov	sl, r0
   14970:	cmn	r3, #4
   14974:	bhi	14ae0 <__assert_fail@plt+0x37dc>
   14978:	ldr	fp, [sp, #20]
   1497c:	mov	r0, fp
   14980:	bl	112bc <towupper@plt>
   14984:	cmp	fp, r0
   14988:	mov	r9, r0
   1498c:	beq	14ac4 <__assert_fail@plt+0x37c0>
   14990:	mov	r1, r0
   14994:	mov	r2, r8
   14998:	add	r0, sp, #32
   1499c:	bl	11004 <wcrtomb@plt>
   149a0:	cmp	sl, r0
   149a4:	bne	149e8 <__assert_fail@plt+0x36e4>
   149a8:	ldr	r0, [r4, #4]
   149ac:	mov	r2, sl
   149b0:	add	r1, sp, #32
   149b4:	add	r0, r0, r5
   149b8:	add	sl, sl, r5
   149bc:	bl	1107c <memcpy@plt>
   149c0:	ldr	r2, [r4, #8]
   149c4:	add	r3, r5, #1
   149c8:	mvn	r1, #0
   149cc:	str	r9, [r2, r5, lsl #2]
   149d0:	cmp	r3, sl
   149d4:	mov	r5, r3
   149d8:	bge	1493c <__assert_fail@plt+0x3638>
   149dc:	str	r1, [r2, r3, lsl #2]
   149e0:	add	r3, r3, #1
   149e4:	b	149d0 <__assert_fail@plt+0x36cc>
   149e8:	mov	r6, r5
   149ec:	add	r3, r4, #16
   149f0:	ldr	ip, [r4, #64]	; 0x40
   149f4:	add	sl, sp, #24
   149f8:	sub	r2, r7, r6
   149fc:	ldm	r3, {r0, r1}
   14a00:	str	r3, [sp, #4]
   14a04:	cmp	ip, #0
   14a08:	stm	sl, {r0, r1}
   14a0c:	beq	14b60 <__assert_fail@plt+0x385c>
   14a10:	ldr	r0, [r4, #80]	; 0x50
   14a14:	mov	r3, #0
   14a18:	add	r9, sp, #32
   14a1c:	cmp	r2, r0
   14a20:	movlt	r0, r2
   14a24:	cmp	r0, r3
   14a28:	bgt	14b3c <__assert_fail@plt+0x3838>
   14a2c:	mov	r1, r9
   14a30:	add	r0, sp, #20
   14a34:	ldr	r3, [sp, #4]
   14a38:	bl	1fa3c <__assert_fail@plt+0xe738>
   14a3c:	sub	r3, r0, #1
   14a40:	mov	r8, r0
   14a44:	cmn	r3, #4
   14a48:	str	r3, [sp, #8]
   14a4c:	bhi	14ce4 <__assert_fail@plt+0x39e0>
   14a50:	ldr	r3, [sp, #20]
   14a54:	mov	r0, r3
   14a58:	str	r3, [sp, #12]
   14a5c:	bl	112bc <towupper@plt>
   14a60:	ldr	r3, [sp, #12]
   14a64:	mov	fp, r0
   14a68:	cmp	r3, r0
   14a6c:	beq	14c70 <__assert_fail@plt+0x396c>
   14a70:	mov	r1, r0
   14a74:	mov	r2, sl
   14a78:	add	r0, sp, #32
   14a7c:	bl	11004 <wcrtomb@plt>
   14a80:	cmp	r8, r0
   14a84:	mov	r3, r0
   14a88:	moveq	r2, r8
   14a8c:	addeq	r1, sp, #32
   14a90:	ldreq	r0, [r4, #4]
   14a94:	beq	14c7c <__assert_fail@plt+0x3978>
   14a98:	cmn	r3, #1
   14a9c:	beq	14c70 <__assert_fail@plt+0x396c>
   14aa0:	ldr	r0, [r4, #36]	; 0x24
   14aa4:	add	r9, r6, r3
   14aa8:	cmp	r9, r0
   14aac:	bls	14b74 <__assert_fail@plt+0x3870>
   14ab0:	ldm	sl, {r0, r1}
   14ab4:	ldr	r3, [sp, #4]
   14ab8:	stm	r3, {r0, r1}
   14abc:	str	r6, [r4, #28]
   14ac0:	b	14b2c <__assert_fail@plt+0x3828>
   14ac4:	ldr	r1, [r4]
   14ac8:	mov	r2, sl
   14acc:	ldr	r3, [r4, #24]
   14ad0:	ldr	r0, [r4, #4]
   14ad4:	add	r3, r5, r3
   14ad8:	add	r1, r1, r3
   14adc:	b	149b4 <__assert_fail@plt+0x36b0>
   14ae0:	cmn	r3, #3
   14ae4:	bne	14af8 <__assert_fail@plt+0x37f4>
   14ae8:	ldr	r2, [r4, #36]	; 0x24
   14aec:	ldr	r3, [r4, #48]	; 0x30
   14af0:	cmp	r2, r3
   14af4:	blt	14b20 <__assert_fail@plt+0x381c>
   14af8:	ldr	r3, [r4, #4]
   14afc:	cmn	sl, #1
   14b00:	ldr	r2, [sp, #4]
   14b04:	strb	r9, [r3, r5]
   14b08:	add	r5, r5, #1
   14b0c:	ldr	r3, [r4, #8]
   14b10:	str	r9, [r3, r2, lsl #2]
   14b14:	ldmeq	r8, {r0, r1}
   14b18:	stmeq	r6, {r0, r1}
   14b1c:	b	1493c <__assert_fail@plt+0x3638>
   14b20:	ldm	r8, {r0, r1}
   14b24:	stm	r6, {r0, r1}
   14b28:	str	r5, [r4, #28]
   14b2c:	mov	r0, #0
   14b30:	str	r5, [r4, #32]
   14b34:	add	sp, sp, #100	; 0x64
   14b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b3c:	ldr	r1, [r4]
   14b40:	ldr	lr, [r4, #24]
   14b44:	add	r1, r1, r5
   14b48:	add	r1, r1, r3
   14b4c:	ldrb	r1, [r1, lr]
   14b50:	ldrb	r1, [ip, r1]
   14b54:	strb	r1, [r9, r3]
   14b58:	add	r3, r3, #1
   14b5c:	b	14a24 <__assert_fail@plt+0x3720>
   14b60:	ldr	r9, [r4, #24]
   14b64:	add	r3, r5, r9
   14b68:	ldr	r9, [r4]
   14b6c:	add	r9, r9, r3
   14b70:	b	14a2c <__assert_fail@plt+0x3728>
   14b74:	ldr	r2, [r4, #12]
   14b78:	cmp	r2, #0
   14b7c:	bne	14ba0 <__assert_fail@plt+0x389c>
   14b80:	lsl	r0, r0, #2
   14b84:	str	r3, [sp, #4]
   14b88:	bl	1f810 <__assert_fail@plt+0xe50c>
   14b8c:	cmp	r0, #0
   14b90:	str	r0, [r4, #12]
   14b94:	moveq	r0, #12
   14b98:	ldr	r3, [sp, #4]
   14b9c:	beq	14b34 <__assert_fail@plt+0x3830>
   14ba0:	ldrb	r2, [r4, #76]	; 0x4c
   14ba4:	cmp	r2, #0
   14ba8:	beq	14c3c <__assert_fail@plt+0x3938>
   14bac:	ldr	r0, [r4, #4]
   14bb0:	mov	r2, r3
   14bb4:	add	r1, sp, #32
   14bb8:	str	r3, [sp, #4]
   14bbc:	add	r0, r0, r6
   14bc0:	bl	1107c <memcpy@plt>
   14bc4:	ldr	r1, [r4, #8]
   14bc8:	lsl	r2, r6, #2
   14bcc:	mvn	lr, #0
   14bd0:	ldr	r0, [r4, #12]
   14bd4:	ldr	r3, [sp, #4]
   14bd8:	str	fp, [r1, r6, lsl #2]
   14bdc:	add	r1, r1, r2
   14be0:	str	r5, [r0, r6, lsl #2]
   14be4:	add	r0, r0, r2
   14be8:	mov	r2, #1
   14bec:	cmp	r2, r3
   14bf0:	bcc	14c50 <__assert_fail@plt+0x394c>
   14bf4:	ldr	r7, [r4, #48]	; 0x30
   14bf8:	sub	r3, r3, r8
   14bfc:	mov	r6, r9
   14c00:	ldr	r2, [r4, #52]	; 0x34
   14c04:	add	r7, r3, r7
   14c08:	cmp	r2, r5
   14c0c:	add	r5, r5, r8
   14c10:	str	r7, [r4, #48]	; 0x30
   14c14:	ldrgt	r2, [r4, #56]	; 0x38
   14c18:	addgt	r3, r2, r3
   14c1c:	strgt	r3, [r4, #56]	; 0x38
   14c20:	ldr	r3, [r4, #36]	; 0x24
   14c24:	cmp	r7, r3
   14c28:	movge	r7, r3
   14c2c:	b	148e0 <__assert_fail@plt+0x35dc>
   14c30:	ldr	r1, [r4, #12]
   14c34:	str	r2, [r1, r2, lsl #2]
   14c38:	add	r2, r2, #1
   14c3c:	cmp	r2, r6
   14c40:	bne	14c30 <__assert_fail@plt+0x392c>
   14c44:	mov	r2, #1
   14c48:	strb	r2, [r4, #76]	; 0x4c
   14c4c:	b	14bac <__assert_fail@plt+0x38a8>
   14c50:	ldr	ip, [sp, #8]
   14c54:	cmp	r2, r8
   14c58:	movcc	ip, r2
   14c5c:	add	r2, r2, #1
   14c60:	add	ip, r5, ip
   14c64:	str	ip, [r0, #4]!
   14c68:	str	lr, [r1, #4]!
   14c6c:	b	14bec <__assert_fail@plt+0x38e8>
   14c70:	ldr	r0, [r4, #4]
   14c74:	mov	r2, r8
   14c78:	mov	r1, r9
   14c7c:	add	r0, r0, r6
   14c80:	bl	1107c <memcpy@plt>
   14c84:	ldrb	r3, [r4, #76]	; 0x4c
   14c88:	cmp	r3, #0
   14c8c:	bne	14cc0 <__assert_fail@plt+0x39bc>
   14c90:	ldr	r2, [r4, #8]
   14c94:	add	r5, r5, r8
   14c98:	add	r3, r6, #1
   14c9c:	add	r8, r8, r6
   14ca0:	mvn	r1, #0
   14ca4:	str	fp, [r2, r6, lsl #2]
   14ca8:	cmp	r3, r8
   14cac:	mov	r6, r3
   14cb0:	bge	148e0 <__assert_fail@plt+0x35dc>
   14cb4:	str	r1, [r2, r3, lsl #2]
   14cb8:	add	r3, r3, #1
   14cbc:	b	14ca8 <__assert_fail@plt+0x39a4>
   14cc0:	ldr	r2, [r4, #12]
   14cc4:	mov	r3, #0
   14cc8:	add	r2, r2, r6, lsl #2
   14ccc:	add	r1, r5, r3
   14cd0:	add	r3, r3, #1
   14cd4:	cmp	r8, r3
   14cd8:	str	r1, [r2], #4
   14cdc:	bne	14ccc <__assert_fail@plt+0x39c8>
   14ce0:	b	14c90 <__assert_fail@plt+0x398c>
   14ce4:	sub	r3, r0, #1
   14ce8:	cmn	r3, #3
   14cec:	bne	14d00 <__assert_fail@plt+0x39fc>
   14cf0:	ldr	r2, [r4, #36]	; 0x24
   14cf4:	ldr	r3, [r4, #48]	; 0x30
   14cf8:	cmp	r2, r3
   14cfc:	blt	14ab0 <__assert_fail@plt+0x37ac>
   14d00:	ldr	r3, [r4]
   14d04:	ldr	r2, [r4, #24]
   14d08:	add	r3, r3, r5
   14d0c:	ldrb	r3, [r3, r2]
   14d10:	ldr	r2, [r4, #64]	; 0x40
   14d14:	cmp	r2, #0
   14d18:	ldrbne	r3, [r2, r3]
   14d1c:	ldr	r2, [r4, #4]
   14d20:	strb	r3, [r2, r6]
   14d24:	lsl	r2, r6, #2
   14d28:	ldrb	r1, [r4, #76]	; 0x4c
   14d2c:	cmp	r1, #0
   14d30:	ldrne	r1, [r4, #12]
   14d34:	strne	r5, [r1, r6, lsl #2]
   14d38:	cmn	r8, #1
   14d3c:	add	r5, r5, #1
   14d40:	ldr	r1, [r4, #8]
   14d44:	add	r6, r6, #1
   14d48:	str	r3, [r1, r2]
   14d4c:	ldreq	r3, [sp, #4]
   14d50:	ldmeq	sl, {r0, r1}
   14d54:	stmeq	r3, {r0, r1}
   14d58:	b	148e0 <__assert_fail@plt+0x35dc>
   14d5c:	push	{r4, r5, r6, lr}
   14d60:	mov	r4, r0
   14d64:	ldr	r5, [r0, #28]
   14d68:	ldr	r3, [r0, #36]	; 0x24
   14d6c:	ldr	r6, [r0, #48]	; 0x30
   14d70:	cmp	r3, r6
   14d74:	movlt	r6, r3
   14d78:	cmp	r5, r6
   14d7c:	blt	14d8c <__assert_fail@plt+0x3a88>
   14d80:	str	r5, [r4, #28]
   14d84:	str	r5, [r4, #32]
   14d88:	pop	{r4, r5, r6, pc}
   14d8c:	ldr	r3, [r4]
   14d90:	ldr	r2, [r4, #24]
   14d94:	add	r3, r3, r5
   14d98:	ldrb	r0, [r3, r2]
   14d9c:	ldr	r3, [r4, #64]	; 0x40
   14da0:	cmp	r3, #0
   14da4:	ldrbne	r0, [r3, r0]
   14da8:	bl	11274 <toupper@plt>
   14dac:	ldr	r3, [r4, #4]
   14db0:	strb	r0, [r3, r5]
   14db4:	add	r5, r5, #1
   14db8:	b	14d78 <__assert_fail@plt+0x3a74>
   14dbc:	ldr	r3, [r0, #36]	; 0x24
   14dc0:	push	{r4, r5, r6, lr}
   14dc4:	cmn	r3, #-536870910	; 0xe0000002
   14dc8:	bls	14dd8 <__assert_fail@plt+0x3ad4>
   14dcc:	mov	r5, #12
   14dd0:	mov	r0, r5
   14dd4:	pop	{r4, r5, r6, pc}
   14dd8:	ldr	r2, [r0, #48]	; 0x30
   14ddc:	lsl	r3, r3, #1
   14de0:	mov	r4, r0
   14de4:	cmp	r3, r2
   14de8:	movge	r3, r2
   14dec:	cmp	r3, r1
   14df0:	movge	r1, r3
   14df4:	bl	142d0 <__assert_fail@plt+0x2fcc>
   14df8:	subs	r5, r0, #0
   14dfc:	bne	14dd0 <__assert_fail@plt+0x3acc>
   14e00:	ldr	r0, [r4, #100]	; 0x64
   14e04:	cmp	r0, #0
   14e08:	beq	14e28 <__assert_fail@plt+0x3b24>
   14e0c:	ldr	r1, [r4, #36]	; 0x24
   14e10:	add	r1, r1, #1
   14e14:	lsl	r1, r1, #2
   14e18:	bl	1f83c <__assert_fail@plt+0xe538>
   14e1c:	cmp	r0, #0
   14e20:	beq	14dcc <__assert_fail@plt+0x3ac8>
   14e24:	str	r0, [r4, #100]	; 0x64
   14e28:	ldrb	r2, [r4, #72]	; 0x48
   14e2c:	ldr	r3, [r4, #80]	; 0x50
   14e30:	cmp	r2, #0
   14e34:	beq	14e54 <__assert_fail@plt+0x3b50>
   14e38:	cmp	r3, #1
   14e3c:	mov	r0, r4
   14e40:	ble	14e4c <__assert_fail@plt+0x3b48>
   14e44:	pop	{r4, r5, r6, lr}
   14e48:	b	1488c <__assert_fail@plt+0x3588>
   14e4c:	bl	14d5c <__assert_fail@plt+0x3a58>
   14e50:	b	14dd0 <__assert_fail@plt+0x3acc>
   14e54:	cmp	r3, #1
   14e58:	ble	14e68 <__assert_fail@plt+0x3b64>
   14e5c:	mov	r0, r4
   14e60:	bl	14738 <__assert_fail@plt+0x3434>
   14e64:	b	14dd0 <__assert_fail@plt+0x3acc>
   14e68:	ldr	r3, [r4, #64]	; 0x40
   14e6c:	cmp	r3, #0
   14e70:	beq	14dd0 <__assert_fail@plt+0x3acc>
   14e74:	mov	r0, r4
   14e78:	bl	13c60 <__assert_fail@plt+0x295c>
   14e7c:	b	14dd0 <__assert_fail@plt+0x3acc>
   14e80:	push	{r4, lr}
   14e84:	mov	r4, r0
   14e88:	ldr	r0, [r0]
   14e8c:	bl	1f990 <__assert_fail@plt+0xe68c>
   14e90:	ldr	r0, [r4, #4]
   14e94:	bl	1f990 <__assert_fail@plt+0xe68c>
   14e98:	ldr	r0, [r4, #8]
   14e9c:	bl	1f990 <__assert_fail@plt+0xe68c>
   14ea0:	ldr	r0, [r4, #12]
   14ea4:	bl	1f990 <__assert_fail@plt+0xe68c>
   14ea8:	mov	r0, r4
   14eac:	pop	{r4, lr}
   14eb0:	b	1f990 <__assert_fail@plt+0xe68c>
   14eb4:	ldr	r3, [pc, #36]	; 14ee0 <__assert_fail@plt+0x3bdc>
   14eb8:	ldr	r2, [r0, #4]
   14ebc:	and	r3, r3, r2
   14ec0:	cmp	r3, #6
   14ec4:	bne	14ed0 <__assert_fail@plt+0x3bcc>
   14ec8:	ldr	r0, [r0]
   14ecc:	b	14e80 <__assert_fail@plt+0x3b7c>
   14ed0:	cmp	r3, #3
   14ed4:	bxne	lr
   14ed8:	ldr	r0, [r0]
   14edc:	b	1f990 <__assert_fail@plt+0xe68c>
   14ee0:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   14ee4:	add	r0, r1, #20
   14ee8:	push	{r4, lr}
   14eec:	bl	14eb4 <__assert_fail@plt+0x3bb0>
   14ef0:	mov	r0, #0
   14ef4:	pop	{r4, pc}
   14ef8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14efc:	mov	r7, sp
   14f00:	mov	r4, r0
   14f04:	ldr	r6, [r0, #4]
   14f08:	stm	r7, {r1, r2}
   14f0c:	ldr	r3, [r0, #8]
   14f10:	ldrb	r5, [sp, #4]
   14f14:	cmp	r3, r6
   14f18:	bcc	14fec <__assert_fail@plt+0x3ce8>
   14f1c:	ldr	r3, [pc, #372]	; 15098 <__assert_fail@plt+0x3d94>
   14f20:	lsl	r8, r6, #1
   14f24:	cmp	r8, r3
   14f28:	bls	14f38 <__assert_fail@plt+0x3c34>
   14f2c:	mvn	r0, #0
   14f30:	add	sp, sp, #12
   14f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f38:	lsl	r1, r6, #4
   14f3c:	ldr	r0, [r0]
   14f40:	bl	1f83c <__assert_fail@plt+0xe538>
   14f44:	cmp	r0, #0
   14f48:	beq	14f2c <__assert_fail@plt+0x3c28>
   14f4c:	lsl	r9, r6, #3
   14f50:	str	r0, [r4]
   14f54:	ldr	r0, [r4, #12]
   14f58:	mov	r1, r9
   14f5c:	bl	1f83c <__assert_fail@plt+0xe538>
   14f60:	mov	sl, r0
   14f64:	mov	r1, r9
   14f68:	ldr	r0, [r4, #16]
   14f6c:	bl	1f83c <__assert_fail@plt+0xe538>
   14f70:	mov	r3, #24
   14f74:	mov	r9, r0
   14f78:	ldr	r0, [r4, #20]
   14f7c:	mul	r6, r3, r6
   14f80:	mov	r1, r6
   14f84:	bl	1f83c <__assert_fail@plt+0xe538>
   14f88:	mov	fp, r0
   14f8c:	mov	r1, r6
   14f90:	ldr	r0, [r4, #24]
   14f94:	bl	1f83c <__assert_fail@plt+0xe538>
   14f98:	cmp	r9, #0
   14f9c:	cmpne	sl, #0
   14fa0:	mov	r6, r0
   14fa4:	beq	14fb4 <__assert_fail@plt+0x3cb0>
   14fa8:	cmp	r0, #0
   14fac:	cmpne	fp, #0
   14fb0:	bne	14fd8 <__assert_fail@plt+0x3cd4>
   14fb4:	mov	r0, sl
   14fb8:	bl	1f990 <__assert_fail@plt+0xe68c>
   14fbc:	mov	r0, r9
   14fc0:	bl	1f990 <__assert_fail@plt+0xe68c>
   14fc4:	mov	r0, fp
   14fc8:	bl	1f990 <__assert_fail@plt+0xe68c>
   14fcc:	mov	r0, r6
   14fd0:	bl	1f990 <__assert_fail@plt+0xe68c>
   14fd4:	b	14f2c <__assert_fail@plt+0x3c28>
   14fd8:	str	r8, [r4, #4]
   14fdc:	str	sl, [r4, #12]
   14fe0:	str	r9, [r4, #16]
   14fe4:	str	fp, [r4, #20]
   14fe8:	str	r0, [r4, #24]
   14fec:	ldr	r3, [r4]
   14ff0:	cmp	r5, #5
   14ff4:	ldr	r2, [r4, #8]
   14ff8:	ldm	r7, {r0, r1}
   14ffc:	add	r3, r3, r2, lsl #3
   15000:	stm	r3, {r0, r1}
   15004:	bfc	r1, #8, #10
   15008:	str	r1, [r3, #4]
   1500c:	bne	15088 <__assert_fail@plt+0x3d84>
   15010:	ldr	r5, [r4, #92]	; 0x5c
   15014:	cmp	r5, #1
   15018:	movle	r5, #0
   1501c:	movgt	r5, #1
   15020:	ldrb	r1, [r3, #6]
   15024:	bfi	r1, r5, #4, #1
   15028:	strb	r1, [r3, #6]
   1502c:	mvn	r1, #0
   15030:	ldr	r3, [r4, #12]
   15034:	ldr	ip, [r4, #20]
   15038:	str	r1, [r3, r2, lsl #2]
   1503c:	mov	r2, #12
   15040:	mov	r3, #0
   15044:	ldr	r1, [r4, #8]
   15048:	mul	r1, r2, r1
   1504c:	add	r0, ip, r1
   15050:	str	r3, [ip, r1]
   15054:	str	r3, [r0, #4]
   15058:	str	r3, [r0, #8]
   1505c:	ldr	r1, [r4, #8]
   15060:	ldr	r0, [r4, #24]
   15064:	mul	r2, r2, r1
   15068:	add	r1, r0, r2
   1506c:	str	r3, [r0, r2]
   15070:	str	r3, [r1, #4]
   15074:	str	r3, [r1, #8]
   15078:	ldr	r0, [r4, #8]
   1507c:	add	r3, r0, #1
   15080:	str	r3, [r4, #8]
   15084:	b	14f30 <__assert_fail@plt+0x3c2c>
   15088:	sub	r5, r5, #6
   1508c:	clz	r5, r5
   15090:	lsr	r5, r5, #5
   15094:	b	15020 <__assert_fail@plt+0x3d1c>
   15098:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1509c:	ldr	r3, [r0]
   150a0:	push	{r4, r5, r6, r7, r8, lr}
   150a4:	lsl	r7, r1, #3
   150a8:	mov	r6, r1
   150ac:	mov	r4, r2
   150b0:	mov	r5, r0
   150b4:	add	r3, r3, r7
   150b8:	ldm	r3, {r1, r2}
   150bc:	bl	14ef8 <__assert_fail@plt+0x3bf4>
   150c0:	cmn	r0, #1
   150c4:	popeq	{r4, r5, r6, r7, r8, pc}
   150c8:	ubfx	r2, r4, #0, #10
   150cc:	ldr	ip, [r5]
   150d0:	add	r1, ip, r0, lsl #3
   150d4:	add	ip, ip, r7
   150d8:	ldr	r3, [r1, #4]
   150dc:	bfi	r3, r2, #8, #10
   150e0:	str	r3, [r1, #4]
   150e4:	ldr	ip, [ip, #4]
   150e8:	ubfx	ip, ip, #8, #10
   150ec:	orr	r2, r2, ip
   150f0:	bfi	r3, r2, #8, #10
   150f4:	str	r3, [r1, #4]
   150f8:	ubfx	r3, r3, #16, #8
   150fc:	orr	r3, r3, #4
   15100:	strb	r3, [r1, #6]
   15104:	ldr	r3, [r5, #16]
   15108:	str	r6, [r3, r0, lsl #2]
   1510c:	pop	{r4, r5, r6, r7, r8, pc}
   15110:	push	{r4, lr}
   15114:	mov	r4, r0
   15118:	ldr	r0, [r0, #24]
   1511c:	bl	1f990 <__assert_fail@plt+0xe68c>
   15120:	ldr	r0, [r4, #36]	; 0x24
   15124:	bl	1f990 <__assert_fail@plt+0xe68c>
   15128:	ldr	r3, [r4, #40]	; 0x28
   1512c:	add	r2, r4, #4
   15130:	cmp	r3, r2
   15134:	beq	15148 <__assert_fail@plt+0x3e44>
   15138:	ldr	r0, [r3, #8]
   1513c:	bl	1f990 <__assert_fail@plt+0xe68c>
   15140:	ldr	r0, [r4, #40]	; 0x28
   15144:	bl	1f990 <__assert_fail@plt+0xe68c>
   15148:	ldr	r0, [r4, #12]
   1514c:	bl	1f990 <__assert_fail@plt+0xe68c>
   15150:	ldr	r0, [r4, #48]	; 0x30
   15154:	bl	1f990 <__assert_fail@plt+0xe68c>
   15158:	ldr	r0, [r4, #44]	; 0x2c
   1515c:	bl	1f990 <__assert_fail@plt+0xe68c>
   15160:	mov	r0, r4
   15164:	pop	{r4, lr}
   15168:	b	1f990 <__assert_fail@plt+0xe68c>
   1516c:	push	{r4, lr}
   15170:	mov	r4, r0
   15174:	ldr	r0, [r0, #8]
   15178:	bl	1f990 <__assert_fail@plt+0xe68c>
   1517c:	ldr	r0, [r4, #12]
   15180:	bl	1f990 <__assert_fail@plt+0xe68c>
   15184:	ldrb	r3, [r4, #75]	; 0x4b
   15188:	cmp	r3, #0
   1518c:	popeq	{r4, pc}
   15190:	ldr	r0, [r4, #4]
   15194:	pop	{r4, lr}
   15198:	b	1f990 <__assert_fail@plt+0xe68c>
   1519c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151a0:	mov	r4, #0
   151a4:	mov	r6, r0
   151a8:	mov	r8, r4
   151ac:	ldr	r3, [r6, #124]	; 0x7c
   151b0:	cmp	r3, r4
   151b4:	bgt	151c4 <__assert_fail@plt+0x3ec0>
   151b8:	str	r8, [r6, #108]	; 0x6c
   151bc:	str	r8, [r6, #124]	; 0x7c
   151c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151c4:	ldr	r3, [r6, #132]	; 0x84
   151c8:	mov	r7, #0
   151cc:	ldr	r5, [r3, r4, lsl #2]
   151d0:	ldr	r3, [r5, #16]
   151d4:	ldr	r0, [r5, #20]
   151d8:	cmp	r3, r7
   151dc:	bgt	15210 <__assert_fail@plt+0x3f0c>
   151e0:	bl	1f990 <__assert_fail@plt+0xe68c>
   151e4:	ldr	r3, [r5, #8]
   151e8:	cmp	r3, #0
   151ec:	beq	15200 <__assert_fail@plt+0x3efc>
   151f0:	ldr	r0, [r3, #8]
   151f4:	bl	1f990 <__assert_fail@plt+0xe68c>
   151f8:	ldr	r0, [r5, #8]
   151fc:	bl	1f990 <__assert_fail@plt+0xe68c>
   15200:	mov	r0, r5
   15204:	add	r4, r4, #1
   15208:	bl	1f990 <__assert_fail@plt+0xe68c>
   1520c:	b	151ac <__assert_fail@plt+0x3ea8>
   15210:	ldr	r9, [r0, r7, lsl #2]
   15214:	add	r7, r7, #1
   15218:	ldr	r0, [r9, #16]
   1521c:	bl	1f990 <__assert_fail@plt+0xe68c>
   15220:	mov	r0, r9
   15224:	bl	1f990 <__assert_fail@plt+0xe68c>
   15228:	b	151d0 <__assert_fail@plt+0x3ecc>
   1522c:	push	{r4, r5, r6, lr}
   15230:	add	r5, r0, #12
   15234:	mov	r4, r0
   15238:	ldr	r0, [r0, #8]
   1523c:	cmp	r0, r5
   15240:	beq	15248 <__assert_fail@plt+0x3f44>
   15244:	bl	1f990 <__assert_fail@plt+0xe68c>
   15248:	mov	r3, #0
   1524c:	str	r3, [r4]
   15250:	mov	r3, #16
   15254:	str	r5, [r4, #8]
   15258:	str	r3, [r4, #4]
   1525c:	pop	{r4, r5, r6, pc}
   15260:	mov	r3, r1
   15264:	ldr	r2, [r1, #28]
   15268:	ldrb	r1, [r1, #24]
   1526c:	sub	r1, r1, #2
   15270:	cmp	r1, #14
   15274:	ldrls	pc, [pc, r1, lsl #2]
   15278:	b	1538c <__assert_fail@plt+0x4088>
   1527c:	muleq	r1, ip, r3
   15280:	andeq	r5, r1, ip, lsl #7
   15284:	andeq	r5, r1, r8, ror #6
   15288:	andeq	r5, r1, ip, lsl #7
   1528c:	andeq	r5, r1, ip, lsl #7
   15290:	andeq	r5, r1, ip, lsl #7
   15294:	andeq	r5, r1, r0, asr r3
   15298:	andeq	r5, r1, r0, asr r3
   1529c:			; <UNDEFINED> instruction: 0x000152b8
   152a0:			; <UNDEFINED> instruction: 0x000152b8
   152a4:	andeq	r5, r1, r0, asr r3
   152a8:	andeq	r5, r1, ip, lsl #7
   152ac:	andeq	r5, r1, ip, lsl #7
   152b0:	andeq	r5, r1, ip, lsl #7
   152b4:	muleq	r1, ip, r3
   152b8:	ldrb	r1, [r0, #88]	; 0x58
   152bc:	push	{r4, r5, r6, r7, r8, lr}
   152c0:	mov	r4, #12
   152c4:	mov	r8, #2
   152c8:	mul	r2, r4, r2
   152cc:	orr	r1, r1, #1
   152d0:	strb	r1, [r0, #88]	; 0x58
   152d4:	ldr	r1, [r3, #4]
   152d8:	cmp	r1, #0
   152dc:	ldreq	r1, [r3, #16]
   152e0:	ldrne	r1, [r1, #12]
   152e4:	ldr	r5, [r1, #28]
   152e8:	ldr	r1, [r3, #8]
   152ec:	cmp	r1, #0
   152f0:	ldrne	r3, [r1, #12]
   152f4:	ldreq	r3, [r3, #16]
   152f8:	ldr	r6, [r3, #28]
   152fc:	ldr	r3, [r0, #20]
   15300:	mov	r0, #8
   15304:	str	r8, [r3, r2]
   15308:	add	r7, r3, r2
   1530c:	bl	1f810 <__assert_fail@plt+0xe50c>
   15310:	cmp	r0, #0
   15314:	str	r0, [r7, #8]
   15318:	bne	15324 <__assert_fail@plt+0x4020>
   1531c:	mov	r0, r4
   15320:	pop	{r4, r5, r6, r7, r8, pc}
   15324:	cmp	r5, r6
   15328:	moveq	r3, #1
   1532c:	streq	r3, [r7, #4]
   15330:	streq	r5, [r0]
   15334:	beq	15348 <__assert_fail@plt+0x4044>
   15338:	str	r8, [r7, #4]
   1533c:	stmlt	r0, {r5, r6}
   15340:	strge	r6, [r0]
   15344:	strge	r5, [r0, #4]
   15348:	mov	r0, #0
   1534c:	pop	{r4, r5, r6, r7, r8, pc}
   15350:	ldr	r1, [r3, #16]
   15354:	ldr	r3, [r0, #20]
   15358:	ldr	r1, [r1, #28]
   1535c:	mov	r0, #12
   15360:	mla	r0, r0, r2, r3
   15364:	b	146c0 <__assert_fail@plt+0x33bc>
   15368:	ldr	r1, [r3, #16]
   1536c:	ldr	ip, [r0, #12]
   15370:	ldr	r1, [r1, #28]
   15374:	str	r1, [ip, r2, lsl #2]
   15378:	ldrb	r3, [r3, #24]
   1537c:	cmp	r3, #4
   15380:	bne	1539c <__assert_fail@plt+0x4098>
   15384:	ldr	r3, [r0, #20]
   15388:	b	1535c <__assert_fail@plt+0x4058>
   1538c:	ldr	r3, [r3, #16]
   15390:	ldr	r1, [r3, #28]
   15394:	ldr	r3, [r0, #12]
   15398:	str	r1, [r3, r2, lsl #2]
   1539c:	mov	r0, #0
   153a0:	bx	lr
   153a4:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a8:	mov	r4, r0
   153ac:	mov	r8, r1
   153b0:	mov	r7, r2
   153b4:	mov	r5, #0
   153b8:	ldr	r9, [r0, #84]	; 0x54
   153bc:	ldr	r3, [r8, #4]
   153c0:	cmp	r3, r5
   153c4:	movle	r0, #0
   153c8:	ble	15430 <__assert_fail@plt+0x412c>
   153cc:	ldr	r3, [r8, #8]
   153d0:	ldr	r6, [r3, r5, lsl #2]
   153d4:	ldr	r3, [r9]
   153d8:	add	r2, r3, r6, lsl #3
   153dc:	ldrb	r2, [r2, #4]
   153e0:	cmp	r2, #8
   153e4:	bne	1547c <__assert_fail@plt+0x4178>
   153e8:	ldr	r2, [r3, r6, lsl #3]
   153ec:	cmp	r2, #31
   153f0:	bgt	1547c <__assert_fail@plt+0x4178>
   153f4:	ldr	r3, [r9, #80]	; 0x50
   153f8:	lsr	r3, r3, r2
   153fc:	tst	r3, #1
   15400:	beq	1547c <__assert_fail@plt+0x4178>
   15404:	ldr	r3, [r4, #124]	; 0x7c
   15408:	ldr	r1, [r4, #128]	; 0x80
   1540c:	ldr	r0, [r4, #132]	; 0x84
   15410:	cmp	r1, r3
   15414:	bne	15440 <__assert_fail@plt+0x413c>
   15418:	lsl	sl, r1, #1
   1541c:	lsl	r1, r1, #3
   15420:	bl	1f83c <__assert_fail@plt+0xe538>
   15424:	cmp	r0, #0
   15428:	bne	15438 <__assert_fail@plt+0x4134>
   1542c:	mov	r0, #12
   15430:	add	sp, sp, #4
   15434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15438:	str	sl, [r4, #128]	; 0x80
   1543c:	str	r0, [r4, #132]	; 0x84
   15440:	mov	r1, #24
   15444:	mov	r0, #1
   15448:	ldr	fp, [r4, #124]	; 0x7c
   1544c:	ldr	sl, [r4, #132]	; 0x84
   15450:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   15454:	ldr	r3, [r4, #124]	; 0x7c
   15458:	ldr	r2, [r4, #132]	; 0x84
   1545c:	str	r0, [sl, fp, lsl #2]
   15460:	ldr	r2, [r2, r3, lsl #2]
   15464:	cmp	r2, #0
   15468:	beq	1542c <__assert_fail@plt+0x4128>
   1546c:	add	r3, r3, #1
   15470:	str	r6, [r2, #4]
   15474:	str	r3, [r4, #124]	; 0x7c
   15478:	str	r7, [r2]
   1547c:	add	r5, r5, #1
   15480:	b	153bc <__assert_fail@plt+0x40b8>
   15484:	ldr	r3, [r0, #36]	; 0x24
   15488:	push	{r4, r5, r6, lr}
   1548c:	mov	r4, r0
   15490:	mov	r5, r1
   15494:	ldr	r6, [r0, #104]	; 0x68
   15498:	cmp	r3, r1
   1549c:	bgt	154ac <__assert_fail@plt+0x41a8>
   154a0:	ldr	r2, [r0, #48]	; 0x30
   154a4:	cmp	r3, r2
   154a8:	blt	154d4 <__assert_fail@plt+0x41d0>
   154ac:	ldr	r3, [r4, #28]
   154b0:	cmp	r3, r5
   154b4:	ble	154c8 <__assert_fail@plt+0x41c4>
   154b8:	cmp	r6, r5
   154bc:	blt	154ec <__assert_fail@plt+0x41e8>
   154c0:	mov	r0, #0
   154c4:	pop	{r4, r5, r6, pc}
   154c8:	ldr	r2, [r4, #48]	; 0x30
   154cc:	cmp	r3, r2
   154d0:	bge	154b8 <__assert_fail@plt+0x41b4>
   154d4:	add	r1, r5, #1
   154d8:	mov	r0, r4
   154dc:	bl	14dbc <__assert_fail@plt+0x3ab8>
   154e0:	cmp	r0, #0
   154e4:	beq	154b8 <__assert_fail@plt+0x41b4>
   154e8:	pop	{r4, r5, r6, pc}
   154ec:	ldr	r0, [r4, #100]	; 0x64
   154f0:	sub	r2, r5, r6
   154f4:	add	r6, r6, #1
   154f8:	lsl	r2, r2, #2
   154fc:	mov	r1, #0
   15500:	add	r0, r0, r6, lsl #2
   15504:	bl	11208 <memset@plt>
   15508:	str	r5, [r4, #104]	; 0x68
   1550c:	b	154c0 <__assert_fail@plt+0x41bc>
   15510:	push	{r4, r5, r6, r7, r8, lr}
   15514:	subs	r4, r0, #0
   15518:	ldr	r7, [sp, #28]
   1551c:	beq	155b0 <__assert_fail@plt+0x42ac>
   15520:	ldr	r5, [r4]
   15524:	cmp	r5, #0
   15528:	beq	155b0 <__assert_fail@plt+0x42ac>
   1552c:	mov	r0, r3
   15530:	sub	r5, r5, #1
   15534:	lsl	r6, r2, #3
   15538:	mov	r3, #24
   1553c:	str	r5, [r4]
   15540:	mov	r2, r6
   15544:	mul	r5, r3, r5
   15548:	ldr	r3, [r4, #8]
   1554c:	add	ip, r3, r5
   15550:	ldr	r3, [r3, r5]
   15554:	str	r3, [r1]
   15558:	ldr	r1, [ip, #8]
   1555c:	bl	1107c <memcpy@plt>
   15560:	ldr	r3, [r4, #8]
   15564:	mov	r2, r6
   15568:	ldr	r0, [sp, #24]
   1556c:	add	r3, r3, r5
   15570:	ldr	r1, [r3, #8]
   15574:	add	r1, r1, r6
   15578:	bl	1107c <memcpy@plt>
   1557c:	ldr	r0, [r7, #8]
   15580:	bl	1f990 <__assert_fail@plt+0xe68c>
   15584:	ldr	r3, [r4, #8]
   15588:	add	r3, r3, r5
   1558c:	ldr	r0, [r3, #8]
   15590:	bl	1f990 <__assert_fail@plt+0xe68c>
   15594:	ldr	r3, [r4, #8]
   15598:	add	r5, r3, r5
   1559c:	add	r3, r5, #12
   155a0:	ldm	r3, {r0, r1, r2}
   155a4:	stm	r7, {r0, r1, r2}
   155a8:	ldr	r0, [r5, #4]
   155ac:	pop	{r4, r5, r6, r7, r8, pc}
   155b0:	mvn	r0, #0
   155b4:	pop	{r4, r5, r6, r7, r8, pc}
   155b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155bc:	mov	r9, r3
   155c0:	mov	r5, r0
   155c4:	mov	r4, r1
   155c8:	mov	r8, r2
   155cc:	ldr	r6, [sp, #32]
   155d0:	ldr	r3, [sp, #36]	; 0x24
   155d4:	tst	r3, #4194304	; 0x400000
   155d8:	beq	1560c <__assert_fail@plt+0x4308>
   155dc:	mov	r0, r6
   155e0:	ldr	r1, [pc, #1720]	; 15ca0 <__assert_fail@plt+0x499c>
   155e4:	bl	1101c <strcmp@plt>
   155e8:	cmp	r0, #0
   155ec:	ldreq	r6, [pc, #1712]	; 15ca4 <__assert_fail@plt+0x49a0>
   155f0:	beq	1560c <__assert_fail@plt+0x4308>
   155f4:	mov	r0, r6
   155f8:	ldr	r1, [pc, #1704]	; 15ca8 <__assert_fail@plt+0x49a4>
   155fc:	bl	1101c <strcmp@plt>
   15600:	ldr	r3, [pc, #1692]	; 15ca4 <__assert_fail@plt+0x49a0>
   15604:	cmp	r0, #0
   15608:	moveq	r6, r3
   1560c:	ldr	r7, [r9]
   15610:	ldr	r3, [r8, #36]	; 0x24
   15614:	cmp	r7, r3
   15618:	bne	15640 <__assert_fail@plt+0x433c>
   1561c:	lsl	r7, r7, #1
   15620:	ldr	r0, [r8, #12]
   15624:	add	r7, r7, #1
   15628:	lsl	r1, r7, #2
   1562c:	bl	1f83c <__assert_fail@plt+0xe538>
   15630:	cmp	r0, #0
   15634:	beq	15c90 <__assert_fail@plt+0x498c>
   15638:	str	r0, [r8, #12]
   1563c:	str	r7, [r9]
   15640:	ldr	r9, [r8, #12]
   15644:	mov	r0, r6
   15648:	ldr	r7, [r8, #36]	; 0x24
   1564c:	add	r3, r7, #1
   15650:	str	r3, [r8, #36]	; 0x24
   15654:	bl	10ff8 <wctype@plt>
   15658:	ldr	r1, [pc, #1612]	; 15cac <__assert_fail@plt+0x49a8>
   1565c:	str	r0, [r9, r7, lsl #2]
   15660:	mov	r0, r6
   15664:	bl	1101c <strcmp@plt>
   15668:	subs	r7, r0, #0
   1566c:	bne	156e4 <__assert_fail@plt+0x43e0>
   15670:	bl	111b4 <__ctype_b_loc@plt>
   15674:	cmp	r5, #0
   15678:	mov	r6, r0
   1567c:	beq	156b4 <__assert_fail@plt+0x43b0>
   15680:	ldr	r2, [r6]
   15684:	lsl	r3, r7, #1
   15688:	ldrh	r3, [r2, r3]
   1568c:	tst	r3, #8
   15690:	beq	156a0 <__assert_fail@plt+0x439c>
   15694:	ldrb	r1, [r5, r7]
   15698:	mov	r0, r4
   1569c:	bl	13b88 <__assert_fail@plt+0x2884>
   156a0:	add	r7, r7, #1
   156a4:	cmp	r7, #256	; 0x100
   156a8:	bne	15680 <__assert_fail@plt+0x437c>
   156ac:	mov	r0, #0
   156b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156b4:	ldr	r2, [r6]
   156b8:	lsl	r3, r7, #1
   156bc:	ldrh	r3, [r2, r3]
   156c0:	tst	r3, #8
   156c4:	beq	156d4 <__assert_fail@plt+0x43d0>
   156c8:	mov	r1, r7
   156cc:	mov	r0, r4
   156d0:	bl	13b88 <__assert_fail@plt+0x2884>
   156d4:	add	r7, r7, #1
   156d8:	cmp	r7, #256	; 0x100
   156dc:	bne	156b4 <__assert_fail@plt+0x43b0>
   156e0:	b	156ac <__assert_fail@plt+0x43a8>
   156e4:	ldr	r1, [pc, #1476]	; 15cb0 <__assert_fail@plt+0x49ac>
   156e8:	mov	r0, r6
   156ec:	bl	1101c <strcmp@plt>
   156f0:	subs	r7, r0, #0
   156f4:	bne	15768 <__assert_fail@plt+0x4464>
   156f8:	bl	111b4 <__ctype_b_loc@plt>
   156fc:	cmp	r5, #0
   15700:	mov	r6, r0
   15704:	beq	15738 <__assert_fail@plt+0x4434>
   15708:	ldr	r2, [r6]
   1570c:	lsl	r3, r7, #1
   15710:	ldrh	r3, [r2, r3]
   15714:	tst	r3, #2
   15718:	beq	15728 <__assert_fail@plt+0x4424>
   1571c:	ldrb	r1, [r5, r7]
   15720:	mov	r0, r4
   15724:	bl	13b88 <__assert_fail@plt+0x2884>
   15728:	add	r7, r7, #1
   1572c:	cmp	r7, #256	; 0x100
   15730:	bne	15708 <__assert_fail@plt+0x4404>
   15734:	b	156ac <__assert_fail@plt+0x43a8>
   15738:	ldr	r2, [r6]
   1573c:	lsl	r3, r7, #1
   15740:	ldrh	r3, [r2, r3]
   15744:	tst	r3, #2
   15748:	beq	15758 <__assert_fail@plt+0x4454>
   1574c:	mov	r1, r7
   15750:	mov	r0, r4
   15754:	bl	13b88 <__assert_fail@plt+0x2884>
   15758:	add	r7, r7, #1
   1575c:	cmp	r7, #256	; 0x100
   15760:	bne	15738 <__assert_fail@plt+0x4434>
   15764:	b	156ac <__assert_fail@plt+0x43a8>
   15768:	ldr	r1, [pc, #1336]	; 15ca8 <__assert_fail@plt+0x49a4>
   1576c:	mov	r0, r6
   15770:	bl	1101c <strcmp@plt>
   15774:	subs	r7, r0, #0
   15778:	bne	157ec <__assert_fail@plt+0x44e8>
   1577c:	bl	111b4 <__ctype_b_loc@plt>
   15780:	cmp	r5, #0
   15784:	mov	r6, r0
   15788:	beq	157bc <__assert_fail@plt+0x44b8>
   1578c:	ldr	r2, [r6]
   15790:	lsl	r3, r7, #1
   15794:	ldrh	r3, [r2, r3]
   15798:	tst	r3, #512	; 0x200
   1579c:	beq	157ac <__assert_fail@plt+0x44a8>
   157a0:	ldrb	r1, [r5, r7]
   157a4:	mov	r0, r4
   157a8:	bl	13b88 <__assert_fail@plt+0x2884>
   157ac:	add	r7, r7, #1
   157b0:	cmp	r7, #256	; 0x100
   157b4:	bne	1578c <__assert_fail@plt+0x4488>
   157b8:	b	156ac <__assert_fail@plt+0x43a8>
   157bc:	ldr	r2, [r6]
   157c0:	lsl	r3, r7, #1
   157c4:	ldrh	r3, [r2, r3]
   157c8:	tst	r3, #512	; 0x200
   157cc:	beq	157dc <__assert_fail@plt+0x44d8>
   157d0:	mov	r1, r7
   157d4:	mov	r0, r4
   157d8:	bl	13b88 <__assert_fail@plt+0x2884>
   157dc:	add	r7, r7, #1
   157e0:	cmp	r7, #256	; 0x100
   157e4:	bne	157bc <__assert_fail@plt+0x44b8>
   157e8:	b	156ac <__assert_fail@plt+0x43a8>
   157ec:	ldr	r1, [pc, #1216]	; 15cb4 <__assert_fail@plt+0x49b0>
   157f0:	mov	r0, r6
   157f4:	bl	1101c <strcmp@plt>
   157f8:	subs	r7, r0, #0
   157fc:	bne	15870 <__assert_fail@plt+0x456c>
   15800:	bl	111b4 <__ctype_b_loc@plt>
   15804:	cmp	r5, #0
   15808:	mov	r6, r0
   1580c:	beq	15840 <__assert_fail@plt+0x453c>
   15810:	ldr	r2, [r6]
   15814:	lsl	r3, r7, #1
   15818:	ldrh	r3, [r2, r3]
   1581c:	tst	r3, #8192	; 0x2000
   15820:	beq	15830 <__assert_fail@plt+0x452c>
   15824:	ldrb	r1, [r5, r7]
   15828:	mov	r0, r4
   1582c:	bl	13b88 <__assert_fail@plt+0x2884>
   15830:	add	r7, r7, #1
   15834:	cmp	r7, #256	; 0x100
   15838:	bne	15810 <__assert_fail@plt+0x450c>
   1583c:	b	156ac <__assert_fail@plt+0x43a8>
   15840:	ldr	r2, [r6]
   15844:	lsl	r3, r7, #1
   15848:	ldrh	r3, [r2, r3]
   1584c:	tst	r3, #8192	; 0x2000
   15850:	beq	15860 <__assert_fail@plt+0x455c>
   15854:	mov	r1, r7
   15858:	mov	r0, r4
   1585c:	bl	13b88 <__assert_fail@plt+0x2884>
   15860:	add	r7, r7, #1
   15864:	cmp	r7, #256	; 0x100
   15868:	bne	15840 <__assert_fail@plt+0x453c>
   1586c:	b	156ac <__assert_fail@plt+0x43a8>
   15870:	ldr	r1, [pc, #1068]	; 15ca4 <__assert_fail@plt+0x49a0>
   15874:	mov	r0, r6
   15878:	bl	1101c <strcmp@plt>
   1587c:	subs	r7, r0, #0
   15880:	bne	158f4 <__assert_fail@plt+0x45f0>
   15884:	bl	111b4 <__ctype_b_loc@plt>
   15888:	cmp	r5, #0
   1588c:	mov	r6, r0
   15890:	beq	158c4 <__assert_fail@plt+0x45c0>
   15894:	ldr	r2, [r6]
   15898:	lsl	r3, r7, #1
   1589c:	ldrh	r3, [r2, r3]
   158a0:	tst	r3, #1024	; 0x400
   158a4:	beq	158b4 <__assert_fail@plt+0x45b0>
   158a8:	ldrb	r1, [r5, r7]
   158ac:	mov	r0, r4
   158b0:	bl	13b88 <__assert_fail@plt+0x2884>
   158b4:	add	r7, r7, #1
   158b8:	cmp	r7, #256	; 0x100
   158bc:	bne	15894 <__assert_fail@plt+0x4590>
   158c0:	b	156ac <__assert_fail@plt+0x43a8>
   158c4:	ldr	r2, [r6]
   158c8:	lsl	r3, r7, #1
   158cc:	ldrh	r3, [r2, r3]
   158d0:	tst	r3, #1024	; 0x400
   158d4:	beq	158e4 <__assert_fail@plt+0x45e0>
   158d8:	mov	r1, r7
   158dc:	mov	r0, r4
   158e0:	bl	13b88 <__assert_fail@plt+0x2884>
   158e4:	add	r7, r7, #1
   158e8:	cmp	r7, #256	; 0x100
   158ec:	bne	158c4 <__assert_fail@plt+0x45c0>
   158f0:	b	156ac <__assert_fail@plt+0x43a8>
   158f4:	ldr	r1, [pc, #956]	; 15cb8 <__assert_fail@plt+0x49b4>
   158f8:	mov	r0, r6
   158fc:	bl	1101c <strcmp@plt>
   15900:	subs	r7, r0, #0
   15904:	bne	15978 <__assert_fail@plt+0x4674>
   15908:	bl	111b4 <__ctype_b_loc@plt>
   1590c:	cmp	r5, #0
   15910:	mov	r6, r0
   15914:	beq	15948 <__assert_fail@plt+0x4644>
   15918:	ldr	r2, [r6]
   1591c:	lsl	r3, r7, #1
   15920:	ldrh	r3, [r2, r3]
   15924:	tst	r3, #2048	; 0x800
   15928:	beq	15938 <__assert_fail@plt+0x4634>
   1592c:	ldrb	r1, [r5, r7]
   15930:	mov	r0, r4
   15934:	bl	13b88 <__assert_fail@plt+0x2884>
   15938:	add	r7, r7, #1
   1593c:	cmp	r7, #256	; 0x100
   15940:	bne	15918 <__assert_fail@plt+0x4614>
   15944:	b	156ac <__assert_fail@plt+0x43a8>
   15948:	ldr	r2, [r6]
   1594c:	lsl	r3, r7, #1
   15950:	ldrh	r3, [r2, r3]
   15954:	tst	r3, #2048	; 0x800
   15958:	beq	15968 <__assert_fail@plt+0x4664>
   1595c:	mov	r1, r7
   15960:	mov	r0, r4
   15964:	bl	13b88 <__assert_fail@plt+0x2884>
   15968:	add	r7, r7, #1
   1596c:	cmp	r7, #256	; 0x100
   15970:	bne	15948 <__assert_fail@plt+0x4644>
   15974:	b	156ac <__assert_fail@plt+0x43a8>
   15978:	ldr	r1, [pc, #828]	; 15cbc <__assert_fail@plt+0x49b8>
   1597c:	mov	r0, r6
   15980:	bl	1101c <strcmp@plt>
   15984:	subs	r7, r0, #0
   15988:	bne	159fc <__assert_fail@plt+0x46f8>
   1598c:	bl	111b4 <__ctype_b_loc@plt>
   15990:	cmp	r5, #0
   15994:	mov	r6, r0
   15998:	beq	159cc <__assert_fail@plt+0x46c8>
   1599c:	ldr	r2, [r6]
   159a0:	lsl	r3, r7, #1
   159a4:	ldrh	r3, [r2, r3]
   159a8:	tst	r3, #16384	; 0x4000
   159ac:	beq	159bc <__assert_fail@plt+0x46b8>
   159b0:	ldrb	r1, [r5, r7]
   159b4:	mov	r0, r4
   159b8:	bl	13b88 <__assert_fail@plt+0x2884>
   159bc:	add	r7, r7, #1
   159c0:	cmp	r7, #256	; 0x100
   159c4:	bne	1599c <__assert_fail@plt+0x4698>
   159c8:	b	156ac <__assert_fail@plt+0x43a8>
   159cc:	ldr	r2, [r6]
   159d0:	lsl	r3, r7, #1
   159d4:	ldrh	r3, [r2, r3]
   159d8:	tst	r3, #16384	; 0x4000
   159dc:	beq	159ec <__assert_fail@plt+0x46e8>
   159e0:	mov	r1, r7
   159e4:	mov	r0, r4
   159e8:	bl	13b88 <__assert_fail@plt+0x2884>
   159ec:	add	r7, r7, #1
   159f0:	cmp	r7, #256	; 0x100
   159f4:	bne	159cc <__assert_fail@plt+0x46c8>
   159f8:	b	156ac <__assert_fail@plt+0x43a8>
   159fc:	ldr	r1, [pc, #668]	; 15ca0 <__assert_fail@plt+0x499c>
   15a00:	mov	r0, r6
   15a04:	bl	1101c <strcmp@plt>
   15a08:	subs	r7, r0, #0
   15a0c:	bne	15a80 <__assert_fail@plt+0x477c>
   15a10:	bl	111b4 <__ctype_b_loc@plt>
   15a14:	cmp	r5, #0
   15a18:	mov	r6, r0
   15a1c:	beq	15a50 <__assert_fail@plt+0x474c>
   15a20:	ldr	r2, [r6]
   15a24:	lsl	r3, r7, #1
   15a28:	ldrh	r3, [r2, r3]
   15a2c:	tst	r3, #256	; 0x100
   15a30:	beq	15a40 <__assert_fail@plt+0x473c>
   15a34:	ldrb	r1, [r5, r7]
   15a38:	mov	r0, r4
   15a3c:	bl	13b88 <__assert_fail@plt+0x2884>
   15a40:	add	r7, r7, #1
   15a44:	cmp	r7, #256	; 0x100
   15a48:	bne	15a20 <__assert_fail@plt+0x471c>
   15a4c:	b	156ac <__assert_fail@plt+0x43a8>
   15a50:	ldr	r2, [r6]
   15a54:	lsl	r3, r7, #1
   15a58:	ldrh	r3, [r2, r3]
   15a5c:	tst	r3, #256	; 0x100
   15a60:	beq	15a70 <__assert_fail@plt+0x476c>
   15a64:	mov	r1, r7
   15a68:	mov	r0, r4
   15a6c:	bl	13b88 <__assert_fail@plt+0x2884>
   15a70:	add	r7, r7, #1
   15a74:	cmp	r7, #256	; 0x100
   15a78:	bne	15a50 <__assert_fail@plt+0x474c>
   15a7c:	b	156ac <__assert_fail@plt+0x43a8>
   15a80:	ldr	r1, [pc, #568]	; 15cc0 <__assert_fail@plt+0x49bc>
   15a84:	mov	r0, r6
   15a88:	bl	1101c <strcmp@plt>
   15a8c:	subs	r7, r0, #0
   15a90:	bne	15b04 <__assert_fail@plt+0x4800>
   15a94:	bl	111b4 <__ctype_b_loc@plt>
   15a98:	cmp	r5, #0
   15a9c:	mov	r6, r0
   15aa0:	beq	15ad4 <__assert_fail@plt+0x47d0>
   15aa4:	ldr	r2, [r6]
   15aa8:	lsl	r3, r7, #1
   15aac:	ldrh	r3, [r2, r3]
   15ab0:	tst	r3, #1
   15ab4:	beq	15ac4 <__assert_fail@plt+0x47c0>
   15ab8:	ldrb	r1, [r5, r7]
   15abc:	mov	r0, r4
   15ac0:	bl	13b88 <__assert_fail@plt+0x2884>
   15ac4:	add	r7, r7, #1
   15ac8:	cmp	r7, #256	; 0x100
   15acc:	bne	15aa4 <__assert_fail@plt+0x47a0>
   15ad0:	b	156ac <__assert_fail@plt+0x43a8>
   15ad4:	ldr	r2, [r6]
   15ad8:	lsl	r3, r7, #1
   15adc:	ldrh	r3, [r2, r3]
   15ae0:	tst	r3, #1
   15ae4:	beq	15af4 <__assert_fail@plt+0x47f0>
   15ae8:	mov	r1, r7
   15aec:	mov	r0, r4
   15af0:	bl	13b88 <__assert_fail@plt+0x2884>
   15af4:	add	r7, r7, #1
   15af8:	cmp	r7, #256	; 0x100
   15afc:	bne	15ad4 <__assert_fail@plt+0x47d0>
   15b00:	b	156ac <__assert_fail@plt+0x43a8>
   15b04:	ldr	r1, [pc, #440]	; 15cc4 <__assert_fail@plt+0x49c0>
   15b08:	mov	r0, r6
   15b0c:	bl	1101c <strcmp@plt>
   15b10:	subs	r7, r0, #0
   15b14:	bne	15b88 <__assert_fail@plt+0x4884>
   15b18:	bl	111b4 <__ctype_b_loc@plt>
   15b1c:	cmp	r5, #0
   15b20:	mov	r6, r0
   15b24:	beq	15b58 <__assert_fail@plt+0x4854>
   15b28:	ldr	r2, [r6]
   15b2c:	lsl	r3, r7, #1
   15b30:	ldrsh	r3, [r2, r3]
   15b34:	cmp	r3, #0
   15b38:	bge	15b48 <__assert_fail@plt+0x4844>
   15b3c:	ldrb	r1, [r5, r7]
   15b40:	mov	r0, r4
   15b44:	bl	13b88 <__assert_fail@plt+0x2884>
   15b48:	add	r7, r7, #1
   15b4c:	cmp	r7, #256	; 0x100
   15b50:	bne	15b28 <__assert_fail@plt+0x4824>
   15b54:	b	156ac <__assert_fail@plt+0x43a8>
   15b58:	ldr	r2, [r6]
   15b5c:	lsl	r3, r7, #1
   15b60:	ldrsh	r3, [r2, r3]
   15b64:	cmp	r3, #0
   15b68:	bge	15b78 <__assert_fail@plt+0x4874>
   15b6c:	mov	r1, r7
   15b70:	mov	r0, r4
   15b74:	bl	13b88 <__assert_fail@plt+0x2884>
   15b78:	add	r7, r7, #1
   15b7c:	cmp	r7, #256	; 0x100
   15b80:	bne	15b58 <__assert_fail@plt+0x4854>
   15b84:	b	156ac <__assert_fail@plt+0x43a8>
   15b88:	ldr	r1, [pc, #312]	; 15cc8 <__assert_fail@plt+0x49c4>
   15b8c:	mov	r0, r6
   15b90:	bl	1101c <strcmp@plt>
   15b94:	subs	r7, r0, #0
   15b98:	bne	15c0c <__assert_fail@plt+0x4908>
   15b9c:	bl	111b4 <__ctype_b_loc@plt>
   15ba0:	cmp	r5, #0
   15ba4:	mov	r6, r0
   15ba8:	beq	15bdc <__assert_fail@plt+0x48d8>
   15bac:	ldr	r2, [r6]
   15bb0:	lsl	r3, r7, #1
   15bb4:	ldrh	r3, [r2, r3]
   15bb8:	tst	r3, #4
   15bbc:	beq	15bcc <__assert_fail@plt+0x48c8>
   15bc0:	ldrb	r1, [r5, r7]
   15bc4:	mov	r0, r4
   15bc8:	bl	13b88 <__assert_fail@plt+0x2884>
   15bcc:	add	r7, r7, #1
   15bd0:	cmp	r7, #256	; 0x100
   15bd4:	bne	15bac <__assert_fail@plt+0x48a8>
   15bd8:	b	156ac <__assert_fail@plt+0x43a8>
   15bdc:	ldr	r2, [r6]
   15be0:	lsl	r3, r7, #1
   15be4:	ldrh	r3, [r2, r3]
   15be8:	tst	r3, #4
   15bec:	beq	15bfc <__assert_fail@plt+0x48f8>
   15bf0:	mov	r1, r7
   15bf4:	mov	r0, r4
   15bf8:	bl	13b88 <__assert_fail@plt+0x2884>
   15bfc:	add	r7, r7, #1
   15c00:	cmp	r7, #256	; 0x100
   15c04:	bne	15bdc <__assert_fail@plt+0x48d8>
   15c08:	b	156ac <__assert_fail@plt+0x43a8>
   15c0c:	mov	r0, r6
   15c10:	ldr	r1, [pc, #180]	; 15ccc <__assert_fail@plt+0x49c8>
   15c14:	bl	1101c <strcmp@plt>
   15c18:	subs	r6, r0, #0
   15c1c:	bne	15c98 <__assert_fail@plt+0x4994>
   15c20:	bl	111b4 <__ctype_b_loc@plt>
   15c24:	cmp	r5, #0
   15c28:	mov	r7, r0
   15c2c:	beq	15c60 <__assert_fail@plt+0x495c>
   15c30:	ldr	r2, [r7]
   15c34:	lsl	r3, r6, #1
   15c38:	ldrh	r3, [r2, r3]
   15c3c:	tst	r3, #4096	; 0x1000
   15c40:	beq	15c50 <__assert_fail@plt+0x494c>
   15c44:	ldrb	r1, [r5, r6]
   15c48:	mov	r0, r4
   15c4c:	bl	13b88 <__assert_fail@plt+0x2884>
   15c50:	add	r6, r6, #1
   15c54:	cmp	r6, #256	; 0x100
   15c58:	bne	15c30 <__assert_fail@plt+0x492c>
   15c5c:	b	156ac <__assert_fail@plt+0x43a8>
   15c60:	ldr	r2, [r7]
   15c64:	lsl	r3, r6, #1
   15c68:	ldrh	r3, [r2, r3]
   15c6c:	tst	r3, #4096	; 0x1000
   15c70:	beq	15c80 <__assert_fail@plt+0x497c>
   15c74:	mov	r1, r6
   15c78:	mov	r0, r4
   15c7c:	bl	13b88 <__assert_fail@plt+0x2884>
   15c80:	add	r6, r6, #1
   15c84:	cmp	r6, #256	; 0x100
   15c88:	bne	15c60 <__assert_fail@plt+0x495c>
   15c8c:	b	156ac <__assert_fail@plt+0x43a8>
   15c90:	mov	r0, #12
   15c94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c98:	mov	r0, #4
   15c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ca0:	andeq	r0, r2, r2, lsr #22
   15ca4:	andeq	r0, r2, ip, lsl fp
   15ca8:	andeq	r0, r2, r8, lsr #22
   15cac:	andeq	r0, r2, lr, lsr #22
   15cb0:	andeq	r0, r2, r4, lsr fp
   15cb4:	andeq	r0, r2, sl, lsr fp
   15cb8:	andeq	r0, r2, r9, asr fp
   15cbc:	andeq	r0, r2, r0, asr #22
   15cc0:	andeq	r0, r2, r6, asr #22
   15cc4:	andeq	r0, r2, ip, asr #22
   15cc8:	andeq	r0, r2, r2, asr fp
   15ccc:	andeq	r0, r2, r8, asr fp
   15cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd4:	mov	r9, #0
   15cd8:	sub	sp, sp, #36	; 0x24
   15cdc:	mov	r6, r0
   15ce0:	mov	fp, r1
   15ce4:	mov	r0, #32
   15ce8:	mov	r1, #1
   15cec:	ldr	r7, [sp, #76]	; 0x4c
   15cf0:	mov	r8, r3
   15cf4:	str	r2, [sp, #12]
   15cf8:	ldrb	sl, [sp, #72]	; 0x48
   15cfc:	str	r9, [sp, #20]
   15d00:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   15d04:	subs	r4, r0, #0
   15d08:	moveq	r3, #12
   15d0c:	streq	r3, [r7]
   15d10:	beq	15e50 <__assert_fail@plt+0x4b4c>
   15d14:	mov	r1, #1
   15d18:	mov	r0, #40	; 0x28
   15d1c:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   15d20:	subs	r5, r0, #0
   15d24:	bne	15d3c <__assert_fail@plt+0x4a38>
   15d28:	mov	r0, r4
   15d2c:	bl	1f990 <__assert_fail@plt+0xe68c>
   15d30:	mov	r3, #12
   15d34:	str	r3, [r7]
   15d38:	b	15d88 <__assert_fail@plt+0x4a84>
   15d3c:	ldrb	r3, [r5, #16]
   15d40:	mov	r0, fp
   15d44:	mov	r2, r5
   15d48:	mov	r1, r4
   15d4c:	bfi	r3, sl, #0, #1
   15d50:	strb	r3, [r5, #16]
   15d54:	ldr	r3, [sp, #12]
   15d58:	str	r3, [sp]
   15d5c:	add	r3, sp, #20
   15d60:	str	r9, [sp, #4]
   15d64:	bl	155b8 <__assert_fail@plt+0x42b4>
   15d68:	subs	fp, r0, #0
   15d6c:	subeq	r8, r8, #1
   15d70:	beq	15d98 <__assert_fail@plt+0x4a94>
   15d74:	mov	r0, r4
   15d78:	bl	1f990 <__assert_fail@plt+0xe68c>
   15d7c:	mov	r0, r5
   15d80:	bl	14e80 <__assert_fail@plt+0x3b7c>
   15d84:	str	fp, [r7]
   15d88:	mov	r4, #0
   15d8c:	b	15e50 <__assert_fail@plt+0x4b4c>
   15d90:	mov	r0, r4
   15d94:	bl	13b88 <__assert_fail@plt+0x2884>
   15d98:	ldrb	r1, [r8, #1]!
   15d9c:	cmp	r1, #0
   15da0:	bne	15d90 <__assert_fail@plt+0x4a8c>
   15da4:	cmp	sl, #0
   15da8:	beq	15db4 <__assert_fail@plt+0x4ab0>
   15dac:	mov	r0, r4
   15db0:	bl	13bd4 <__assert_fail@plt+0x28d0>
   15db4:	ldr	r3, [r6, #92]	; 0x5c
   15db8:	cmp	r3, #1
   15dbc:	ble	15dcc <__assert_fail@plt+0x4ac8>
   15dc0:	mov	r0, r4
   15dc4:	ldr	r1, [r6, #60]	; 0x3c
   15dc8:	bl	13c1c <__assert_fail@plt+0x2918>
   15dcc:	mov	r8, #0
   15dd0:	mov	r3, #3
   15dd4:	str	r4, [sp, #24]
   15dd8:	mov	r2, r8
   15ddc:	mov	r1, r8
   15de0:	mov	r0, r6
   15de4:	str	r8, [sp, #28]
   15de8:	strb	r3, [sp, #28]
   15dec:	add	r3, sp, #24
   15df0:	bl	143bc <__assert_fail@plt+0x30b8>
   15df4:	subs	r9, r0, #0
   15df8:	beq	15e6c <__assert_fail@plt+0x4b68>
   15dfc:	ldr	r3, [r6, #92]	; 0x5c
   15e00:	cmp	r3, #1
   15e04:	ble	15e5c <__assert_fail@plt+0x4b58>
   15e08:	mov	r3, #6
   15e0c:	mov	r2, r8
   15e10:	str	r5, [sp, #24]
   15e14:	mov	r1, r8
   15e18:	mov	r0, r6
   15e1c:	strb	r3, [sp, #28]
   15e20:	ldrb	r3, [r6, #88]	; 0x58
   15e24:	orr	r3, r3, #2
   15e28:	strb	r3, [r6, #88]	; 0x58
   15e2c:	add	r3, sp, #24
   15e30:	bl	143bc <__assert_fail@plt+0x30b8>
   15e34:	subs	r2, r0, #0
   15e38:	beq	15e6c <__assert_fail@plt+0x4b68>
   15e3c:	mov	r3, #10
   15e40:	mov	r1, r9
   15e44:	mov	r0, r6
   15e48:	bl	14510 <__assert_fail@plt+0x320c>
   15e4c:	mov	r4, r0
   15e50:	mov	r0, r4
   15e54:	add	sp, sp, #36	; 0x24
   15e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5c:	mov	r0, r5
   15e60:	mov	r4, r9
   15e64:	bl	14e80 <__assert_fail@plt+0x3b7c>
   15e68:	b	15e50 <__assert_fail@plt+0x4b4c>
   15e6c:	mov	r0, r4
   15e70:	bl	1f990 <__assert_fail@plt+0xe68c>
   15e74:	mov	r0, r5
   15e78:	bl	14e80 <__assert_fail@plt+0x3b7c>
   15e7c:	b	15d30 <__assert_fail@plt+0x4a2c>
   15e80:	ldr	r2, [r0, #80]	; 0x50
   15e84:	cmp	r2, #1
   15e88:	beq	15ea0 <__assert_fail@plt+0x4b9c>
   15e8c:	ldr	ip, [r0, #28]
   15e90:	add	r3, r1, #1
   15e94:	sub	r2, r3, r1
   15e98:	cmp	ip, r3
   15e9c:	bgt	15ea8 <__assert_fail@plt+0x4ba4>
   15ea0:	mov	r0, r2
   15ea4:	bx	lr
   15ea8:	push	{lr}		; (str lr, [sp, #-4]!)
   15eac:	ldr	lr, [r0, #8]
   15eb0:	ldr	lr, [lr, r3, lsl #2]
   15eb4:	add	r3, r3, #1
   15eb8:	cmn	lr, #1
   15ebc:	bne	15ecc <__assert_fail@plt+0x4bc8>
   15ec0:	cmp	ip, r3
   15ec4:	sub	r2, r3, r1
   15ec8:	bgt	15eac <__assert_fail@plt+0x4ba8>
   15ecc:	mov	r0, r2
   15ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ed4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ed8:	ldr	r9, [r0]
   15edc:	add	ip, r9, r1, lsl #3
   15ee0:	ldrb	r5, [ip, #4]
   15ee4:	cmp	r5, #7
   15ee8:	bne	15fd4 <__assert_fail@plt+0x4cd0>
   15eec:	ldr	r0, [r2, #4]
   15ef0:	ldrb	ip, [r0, r3]
   15ef4:	add	r1, r0, r3
   15ef8:	cmp	ip, #193	; 0xc1
   15efc:	bls	15f2c <__assert_fail@plt+0x4c28>
   15f00:	ldr	r0, [r2, #48]	; 0x30
   15f04:	add	r2, r3, #1
   15f08:	cmp	r2, r0
   15f0c:	bge	15f2c <__assert_fail@plt+0x4c28>
   15f10:	cmp	ip, #223	; 0xdf
   15f14:	ldrb	r2, [r1, #1]
   15f18:	bhi	15f38 <__assert_fail@plt+0x4c34>
   15f1c:	eor	r2, r2, #128	; 0x80
   15f20:	cmp	r2, #63	; 0x3f
   15f24:	movls	r4, #2
   15f28:	bls	15f30 <__assert_fail@plt+0x4c2c>
   15f2c:	mov	r4, #0
   15f30:	mov	r0, r4
   15f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f38:	cmp	ip, #239	; 0xef
   15f3c:	bhi	15f80 <__assert_fail@plt+0x4c7c>
   15f40:	cmp	r2, #159	; 0x9f
   15f44:	cmpls	ip, #224	; 0xe0
   15f48:	movne	r4, #3
   15f4c:	beq	15f2c <__assert_fail@plt+0x4c28>
   15f50:	add	r3, r4, r3
   15f54:	cmp	r0, r3
   15f58:	blt	15f2c <__assert_fail@plt+0x4c28>
   15f5c:	mov	r3, #1
   15f60:	ldrb	r2, [r1, #1]!
   15f64:	eor	r2, r2, #128	; 0x80
   15f68:	cmp	r2, #63	; 0x3f
   15f6c:	bhi	15f2c <__assert_fail@plt+0x4c28>
   15f70:	add	r3, r3, #1
   15f74:	cmp	r4, r3
   15f78:	bne	15f60 <__assert_fail@plt+0x4c5c>
   15f7c:	b	15f30 <__assert_fail@plt+0x4c2c>
   15f80:	cmp	ip, #247	; 0xf7
   15f84:	bhi	15f9c <__assert_fail@plt+0x4c98>
   15f88:	cmp	r2, #143	; 0x8f
   15f8c:	cmpls	ip, #240	; 0xf0
   15f90:	movne	r4, #4
   15f94:	bne	15f50 <__assert_fail@plt+0x4c4c>
   15f98:	b	15f2c <__assert_fail@plt+0x4c28>
   15f9c:	cmp	ip, #251	; 0xfb
   15fa0:	bhi	15fb8 <__assert_fail@plt+0x4cb4>
   15fa4:	cmp	r2, #135	; 0x87
   15fa8:	cmpls	ip, #248	; 0xf8
   15fac:	movne	r4, #5
   15fb0:	bne	15f50 <__assert_fail@plt+0x4c4c>
   15fb4:	b	15f2c <__assert_fail@plt+0x4c28>
   15fb8:	cmp	ip, #253	; 0xfd
   15fbc:	bhi	15f2c <__assert_fail@plt+0x4c28>
   15fc0:	cmp	r2, #131	; 0x83
   15fc4:	cmpls	ip, #252	; 0xfc
   15fc8:	beq	15f2c <__assert_fail@plt+0x4c28>
   15fcc:	mov	r4, #6
   15fd0:	b	15f50 <__assert_fail@plt+0x4c4c>
   15fd4:	mov	r7, r1
   15fd8:	mov	sl, r0
   15fdc:	mov	r1, r3
   15fe0:	mov	r0, r2
   15fe4:	mov	r6, r3
   15fe8:	mov	r8, r2
   15fec:	bl	15e80 <__assert_fail@plt+0x4b7c>
   15ff0:	cmp	r5, #5
   15ff4:	mov	r4, r0
   15ff8:	bne	1603c <__assert_fail@plt+0x4d38>
   15ffc:	cmp	r0, #1
   16000:	ble	15f2c <__assert_fail@plt+0x4c28>
   16004:	ldr	r3, [sl, #128]	; 0x80
   16008:	tst	r3, #64	; 0x40
   1600c:	bne	16020 <__assert_fail@plt+0x4d1c>
   16010:	ldr	r2, [r8, #4]
   16014:	ldrb	r2, [r2, r6]
   16018:	cmp	r2, #10
   1601c:	beq	15f2c <__assert_fail@plt+0x4c28>
   16020:	tst	r3, #128	; 0x80
   16024:	beq	15f30 <__assert_fail@plt+0x4c2c>
   16028:	ldr	r3, [r8, #4]
   1602c:	ldrb	r3, [r3, r6]
   16030:	cmp	r3, #0
   16034:	beq	15f2c <__assert_fail@plt+0x4c28>
   16038:	b	15f30 <__assert_fail@plt+0x4c2c>
   1603c:	sub	r3, r5, #6
   16040:	cmp	r0, #1
   16044:	clz	r3, r3
   16048:	lsr	r3, r3, #5
   1604c:	movle	r3, #0
   16050:	cmp	r3, #0
   16054:	beq	15f2c <__assert_fail@plt+0x4c28>
   16058:	ldr	r7, [r9, r7, lsl #3]
   1605c:	ldr	r2, [r7, #20]
   16060:	ldr	r3, [r7, #32]
   16064:	cmp	r3, #0
   16068:	bne	16078 <__assert_fail@plt+0x4d74>
   1606c:	ldr	r5, [r7, #36]	; 0x24
   16070:	orrs	r5, r2, r5
   16074:	beq	160a4 <__assert_fail@plt+0x4da0>
   16078:	mov	r1, r6
   1607c:	mov	r0, r8
   16080:	bl	13c44 <__assert_fail@plt+0x2940>
   16084:	mov	r5, r0
   16088:	mov	r3, #0
   1608c:	cmp	r3, r2
   16090:	blt	160d4 <__assert_fail@plt+0x4dd0>
   16094:	mov	r6, #0
   16098:	ldr	r3, [r7, #36]	; 0x24
   1609c:	cmp	r3, r6
   160a0:	bgt	160ec <__assert_fail@plt+0x4de8>
   160a4:	ldr	r2, [r7, #32]
   160a8:	mov	r3, #0
   160ac:	cmp	r2, r3
   160b0:	bgt	1610c <__assert_fail@plt+0x4e08>
   160b4:	mov	r3, #0
   160b8:	ldrb	r2, [r7, #16]
   160bc:	tst	r2, #1
   160c0:	moveq	r4, r3
   160c4:	beq	15f30 <__assert_fail@plt+0x4c2c>
   160c8:	cmp	r3, #0
   160cc:	bne	15f2c <__assert_fail@plt+0x4c28>
   160d0:	b	15f30 <__assert_fail@plt+0x4c2c>
   160d4:	ldr	r1, [r7]
   160d8:	ldr	r1, [r1, r3, lsl #2]
   160dc:	cmp	r1, r5
   160e0:	beq	16134 <__assert_fail@plt+0x4e30>
   160e4:	add	r3, r3, #1
   160e8:	b	1608c <__assert_fail@plt+0x4d88>
   160ec:	ldr	r3, [r7, #12]
   160f0:	mov	r0, r5
   160f4:	ldr	r1, [r3, r6, lsl #2]
   160f8:	bl	11010 <iswctype@plt>
   160fc:	cmp	r0, #0
   16100:	bne	16134 <__assert_fail@plt+0x4e30>
   16104:	add	r6, r6, #1
   16108:	b	16098 <__assert_fail@plt+0x4d94>
   1610c:	ldr	r1, [r7, #4]
   16110:	ldr	r1, [r1, r3, lsl #2]
   16114:	cmp	r1, r5
   16118:	bhi	1612c <__assert_fail@plt+0x4e28>
   1611c:	ldr	r1, [r7, #8]
   16120:	ldr	r1, [r1, r3, lsl #2]
   16124:	cmp	r1, r5
   16128:	bcs	16134 <__assert_fail@plt+0x4e30>
   1612c:	add	r3, r3, #1
   16130:	b	160ac <__assert_fail@plt+0x4da8>
   16134:	mov	r3, r4
   16138:	b	160b8 <__assert_fail@plt+0x4db4>
   1613c:	cmp	r1, #0
   16140:	bxlt	lr
   16144:	ldr	r3, [r0, #4]
   16148:	cmp	r3, r1
   1614c:	subgt	r3, r3, #1
   16150:	strgt	r3, [r0, #4]
   16154:	bxle	lr
   16158:	ldr	r3, [r0, #4]
   1615c:	cmp	r1, r3
   16160:	bxge	lr
   16164:	add	r1, r1, #1
   16168:	ldr	r3, [r0, #8]
   1616c:	ldr	r2, [r3, r1, lsl #2]
   16170:	add	r3, r3, r1, lsl #2
   16174:	str	r2, [r3, #-4]
   16178:	b	16158 <__assert_fail@plt+0x4e54>
   1617c:	ldrb	r3, [r1, #24]
   16180:	cmp	r3, #4
   16184:	bne	161b8 <__assert_fail@plt+0x4eb4>
   16188:	ldr	r3, [r0, #132]	; 0x84
   1618c:	cmp	r3, #0
   16190:	beq	161b0 <__assert_fail@plt+0x4eac>
   16194:	ldr	r2, [r1, #20]
   16198:	ldr	r2, [r3, r2, lsl #2]
   1619c:	ldr	r3, [r0, #80]	; 0x50
   161a0:	str	r2, [r1, #20]
   161a4:	mov	r1, #1
   161a8:	orr	r3, r3, r1, lsl r2
   161ac:	str	r3, [r0, #80]	; 0x50
   161b0:	mov	r0, #0
   161b4:	bx	lr
   161b8:	cmp	r3, #17
   161bc:	bne	161b0 <__assert_fail@plt+0x4eac>
   161c0:	ldr	r3, [r1, #4]
   161c4:	cmp	r3, #0
   161c8:	beq	161b0 <__assert_fail@plt+0x4eac>
   161cc:	ldrb	r2, [r3, #24]
   161d0:	cmp	r2, #17
   161d4:	bne	161b0 <__assert_fail@plt+0x4eac>
   161d8:	ldr	r2, [r3, #20]
   161dc:	ldr	r3, [r3, #4]
   161e0:	cmp	r3, #0
   161e4:	str	r3, [r1, #4]
   161e8:	strne	r1, [r3]
   161ec:	cmp	r2, #31
   161f0:	ldr	r1, [r1, #20]
   161f4:	ldr	r3, [r0, #132]	; 0x84
   161f8:	ldr	r1, [r3, r1, lsl #2]
   161fc:	str	r1, [r3, r2, lsl #2]
   16200:	bgt	161b0 <__assert_fail@plt+0x4eac>
   16204:	ldr	r3, [r0, #80]	; 0x50
   16208:	mov	r1, #1
   1620c:	bic	r3, r3, r1, lsl r2
   16210:	b	161ac <__assert_fail@plt+0x4ea8>
   16214:	ldrb	r3, [r1, #24]
   16218:	ldr	r2, [r1, #4]
   1621c:	cmp	r3, #11
   16220:	streq	r1, [r2, #16]
   16224:	beq	16248 <__assert_fail@plt+0x4f44>
   16228:	cmp	r3, #16
   1622c:	ldr	r3, [r1, #8]
   16230:	beq	16250 <__assert_fail@plt+0x4f4c>
   16234:	cmp	r2, #0
   16238:	ldrne	r0, [r1, #16]
   1623c:	strne	r0, [r2, #16]
   16240:	cmp	r3, #0
   16244:	bne	16258 <__assert_fail@plt+0x4f54>
   16248:	mov	r0, #0
   1624c:	bx	lr
   16250:	ldr	r0, [r3, #12]
   16254:	str	r0, [r2, #16]
   16258:	ldr	r2, [r1, #16]
   1625c:	str	r2, [r3, #16]
   16260:	b	16248 <__assert_fail@plt+0x4f44>
   16264:	push	{r4, r5, r6, lr}
   16268:	mov	r4, r0
   1626c:	mov	r5, r1
   16270:	mov	r6, r2
   16274:	mov	r1, r4
   16278:	mov	r0, r6
   1627c:	blx	r5
   16280:	cmp	r0, #0
   16284:	popne	{r4, r5, r6, pc}
   16288:	ldr	r3, [r4, #4]
   1628c:	cmp	r3, #0
   16290:	moveq	r1, r0
   16294:	beq	162b4 <__assert_fail@plt+0x4fb0>
   16298:	mov	r4, r3
   1629c:	b	16274 <__assert_fail@plt+0x4f70>
   162a0:	ldr	r3, [r4]
   162a4:	mov	r1, r4
   162a8:	cmp	r3, #0
   162ac:	popeq	{r4, r5, r6, pc}
   162b0:	mov	r4, r3
   162b4:	ldr	r3, [r4, #8]
   162b8:	cmp	r3, #0
   162bc:	cmpne	r3, r1
   162c0:	beq	162a0 <__assert_fail@plt+0x4f9c>
   162c4:	b	16298 <__assert_fail@plt+0x4f94>
   162c8:	ldr	r3, [r1, #4]
   162cc:	cmp	r3, #0
   162d0:	beq	16424 <__assert_fail@plt+0x5120>
   162d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   162d8:	ldr	r4, [r2, #4]
   162dc:	cmp	r4, #0
   162e0:	beq	16408 <__assert_fail@plt+0x5104>
   162e4:	mov	r6, r2
   162e8:	ldr	r2, [r0, #4]
   162ec:	add	r3, r3, r4
   162f0:	mov	r7, r1
   162f4:	mov	r5, r0
   162f8:	ldr	r4, [r0]
   162fc:	add	r2, r3, r2
   16300:	cmp	r2, r4
   16304:	ble	1632c <__assert_fail@plt+0x5028>
   16308:	add	r4, r3, r4
   1630c:	ldr	r0, [r0, #8]
   16310:	lsl	r1, r4, #2
   16314:	bl	1f83c <__assert_fail@plt+0xe538>
   16318:	cmp	r0, #0
   1631c:	moveq	r3, #12
   16320:	beq	1640c <__assert_fail@plt+0x5108>
   16324:	str	r4, [r5]
   16328:	str	r0, [r5, #8]
   1632c:	ldr	r2, [r5, #4]
   16330:	ldmib	r7, {r3, r4}
   16334:	ldmib	r6, {r0, r8}
   16338:	add	ip, r2, r3
   1633c:	sub	r3, r3, #1
   16340:	sub	r2, r2, #1
   16344:	add	ip, ip, r0
   16348:	sub	r0, r0, #1
   1634c:	ldr	lr, [r8, r0, lsl #2]
   16350:	ldr	r1, [r4, r3, lsl #2]
   16354:	cmp	r1, lr
   16358:	ldreq	lr, [r5, #8]
   1635c:	beq	16370 <__assert_fail@plt+0x506c>
   16360:	blt	16398 <__assert_fail@plt+0x5094>
   16364:	subs	r3, r3, #1
   16368:	b	1639c <__assert_fail@plt+0x5098>
   1636c:	sub	r2, r2, #1
   16370:	cmp	r2, #0
   16374:	blt	16388 <__assert_fail@plt+0x5084>
   16378:	ldr	r9, [lr, r2, lsl #2]
   1637c:	cmp	r1, r9
   16380:	blt	1636c <__assert_fail@plt+0x5068>
   16384:	beq	16390 <__assert_fail@plt+0x508c>
   16388:	sub	ip, ip, #1
   1638c:	str	r1, [lr, ip, lsl #2]
   16390:	subs	r3, r3, #1
   16394:	bmi	163a0 <__assert_fail@plt+0x509c>
   16398:	subs	r0, r0, #1
   1639c:	bpl	1634c <__assert_fail@plt+0x5048>
   163a0:	ldr	r1, [r5, #4]
   163a4:	ldr	r2, [r7, #4]
   163a8:	ldr	r0, [r6, #4]
   163ac:	sub	r3, r1, #1
   163b0:	add	r2, r1, r2
   163b4:	add	r2, r2, r0
   163b8:	ldr	r0, [r5, #8]
   163bc:	sub	lr, r2, #1
   163c0:	sub	r2, r2, ip
   163c4:	add	r1, r1, r2
   163c8:	cmp	r3, #0
   163cc:	cmpge	r2, #0
   163d0:	str	r1, [r5, #4]
   163d4:	ble	163fc <__assert_fail@plt+0x50f8>
   163d8:	ldr	r5, [r0, lr, lsl #2]
   163dc:	add	r1, r3, r2
   163e0:	ldr	r4, [r0, r3, lsl #2]
   163e4:	cmp	r5, r4
   163e8:	ble	16414 <__assert_fail@plt+0x5110>
   163ec:	subs	r2, r2, #1
   163f0:	sub	lr, lr, #1
   163f4:	str	r5, [r0, r1, lsl #2]
   163f8:	bne	163d8 <__assert_fail@plt+0x50d4>
   163fc:	lsl	r2, r2, #2
   16400:	add	r1, r0, ip, lsl #2
   16404:	bl	1107c <memcpy@plt>
   16408:	mov	r3, #0
   1640c:	mov	r0, r3
   16410:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16414:	subs	r3, r3, #1
   16418:	str	r4, [r0, r1, lsl #2]
   1641c:	bcs	163d8 <__assert_fail@plt+0x50d4>
   16420:	b	163fc <__assert_fail@plt+0x50f8>
   16424:	mov	r0, r3
   16428:	bx	lr
   1642c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16430:	mov	r7, r1
   16434:	mov	r9, r0
   16438:	mov	r5, r1
   1643c:	mov	r4, r2
   16440:	str	r2, [r7], #16
   16444:	mov	r0, r7
   16448:	ldr	r1, [r1, #8]
   1644c:	bl	14700 <__assert_fail@plt+0x33fc>
   16450:	subs	r8, r0, #0
   16454:	moveq	r6, r8
   16458:	beq	16488 <__assert_fail@plt+0x5184>
   1645c:	mov	r8, #12
   16460:	mov	r0, r8
   16464:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16468:	ldr	r3, [r5, #12]
   1646c:	ldr	r1, [r3, r6, lsl #2]
   16470:	ldr	r3, [r9]
   16474:	add	r3, r3, r1, lsl #3
   16478:	ldrb	r3, [r3, #4]
   1647c:	tst	r3, #8
   16480:	beq	164f8 <__assert_fail@plt+0x51f4>
   16484:	add	r6, r6, #1
   16488:	ldr	r3, [r5, #8]
   1648c:	cmp	r3, r6
   16490:	bgt	16468 <__assert_fail@plt+0x5164>
   16494:	ldr	r7, [r9, #32]
   16498:	ldr	r3, [r9, #68]	; 0x44
   1649c:	and	r4, r4, r3
   164a0:	mov	r3, #12
   164a4:	mul	r4, r3, r4
   164a8:	add	r6, r7, r4
   164ac:	ldr	r1, [r7, r4]
   164b0:	ldr	r3, [r6, #4]
   164b4:	cmp	r3, r1
   164b8:	bgt	164e0 <__assert_fail@plt+0x51dc>
   164bc:	add	r1, r1, #1
   164c0:	ldr	r0, [r6, #8]
   164c4:	lsl	r9, r1, #1
   164c8:	lsl	r1, r1, #3
   164cc:	bl	1f83c <__assert_fail@plt+0xe538>
   164d0:	cmp	r0, #0
   164d4:	beq	1645c <__assert_fail@plt+0x5158>
   164d8:	str	r9, [r6, #4]
   164dc:	str	r0, [r6, #8]
   164e0:	ldr	r3, [r7, r4]
   164e4:	ldr	r2, [r6, #8]
   164e8:	add	r1, r3, #1
   164ec:	str	r1, [r7, r4]
   164f0:	str	r5, [r2, r3, lsl #2]
   164f4:	b	16460 <__assert_fail@plt+0x515c>
   164f8:	mov	r0, r7
   164fc:	bl	14364 <__assert_fail@plt+0x3060>
   16500:	cmp	r0, #0
   16504:	bne	16484 <__assert_fail@plt+0x5180>
   16508:	b	1645c <__assert_fail@plt+0x5158>
   1650c:	ldr	r3, [r1, #4]
   16510:	cmp	r3, #0
   16514:	str	r3, [r0, #4]
   16518:	ble	1656c <__assert_fail@plt+0x5268>
   1651c:	push	{r4, r5, r6, lr}
   16520:	mov	r4, r0
   16524:	lsl	r0, r3, #2
   16528:	mov	r5, r1
   1652c:	str	r3, [r4]
   16530:	bl	1f810 <__assert_fail@plt+0xe50c>
   16534:	cmp	r0, #0
   16538:	mov	r3, r0
   1653c:	str	r0, [r4, #8]
   16540:	bne	16554 <__assert_fail@plt+0x5250>
   16544:	mov	r0, #12
   16548:	str	r3, [r4]
   1654c:	str	r3, [r4, #4]
   16550:	pop	{r4, r5, r6, pc}
   16554:	ldr	r2, [r5, #4]
   16558:	ldr	r1, [r5, #8]
   1655c:	lsl	r2, r2, #2
   16560:	bl	1107c <memcpy@plt>
   16564:	mov	r0, #0
   16568:	pop	{r4, r5, r6, pc}
   1656c:	mov	r3, #0
   16570:	str	r3, [r0]
   16574:	str	r3, [r0, #4]
   16578:	str	r3, [r0, #8]
   1657c:	mov	r0, r3
   16580:	bx	lr
   16584:	cmp	r1, #0
   16588:	beq	1662c <__assert_fail@plt+0x5328>
   1658c:	ldr	r3, [r1, #4]
   16590:	cmp	r2, #0
   16594:	cmpne	r3, #0
   16598:	ble	16620 <__assert_fail@plt+0x531c>
   1659c:	ldr	ip, [r2, #4]
   165a0:	cmp	ip, #0
   165a4:	ble	16628 <__assert_fail@plt+0x5324>
   165a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165ac:	mov	r7, r0
   165b0:	add	r0, r3, ip
   165b4:	mov	r9, r1
   165b8:	mov	r8, r2
   165bc:	str	r0, [r7]
   165c0:	lsl	r0, r0, #2
   165c4:	bl	1f810 <__assert_fail@plt+0xe50c>
   165c8:	cmp	r0, #0
   165cc:	mov	lr, r0
   165d0:	str	r0, [r7, #8]
   165d4:	beq	1668c <__assert_fail@plt+0x5388>
   165d8:	ldr	r5, [r8, #4]
   165dc:	mov	ip, #0
   165e0:	mov	r3, ip
   165e4:	mov	r6, ip
   165e8:	ldr	r2, [r9, #4]
   165ec:	cmp	r2, r6
   165f0:	mov	r4, ip
   165f4:	ble	16694 <__assert_fail@plt+0x5390>
   165f8:	ldr	sl, [r9, #8]
   165fc:	cmp	r5, r3
   16600:	add	r0, lr, ip, lsl #2
   16604:	add	r1, sl, r6, lsl #2
   16608:	bgt	1665c <__assert_fail@plt+0x5358>
   1660c:	sub	r6, r2, r6
   16610:	lsl	r2, r6, #2
   16614:	add	r4, r4, r6
   16618:	bl	1107c <memcpy@plt>
   1661c:	b	166b8 <__assert_fail@plt+0x53b4>
   16620:	cmp	r3, #0
   16624:	ble	1662c <__assert_fail@plt+0x5328>
   16628:	b	1650c <__assert_fail@plt+0x5208>
   1662c:	cmp	r2, #0
   16630:	beq	16644 <__assert_fail@plt+0x5340>
   16634:	ldr	r3, [r2, #4]
   16638:	cmp	r3, #0
   1663c:	movgt	r1, r2
   16640:	bgt	16628 <__assert_fail@plt+0x5324>
   16644:	mov	r3, #0
   16648:	str	r3, [r0]
   1664c:	str	r3, [r0, #4]
   16650:	str	r3, [r0, #8]
   16654:	mov	r0, r3
   16658:	bx	lr
   1665c:	ldr	r0, [r8, #8]
   16660:	ldr	r1, [sl, r6, lsl #2]
   16664:	ldr	r0, [r0, r3, lsl #2]
   16668:	cmp	r1, r0
   1666c:	addgt	r3, r3, #1
   16670:	strgt	r0, [lr, ip, lsl #2]
   16674:	bgt	16684 <__assert_fail@plt+0x5380>
   16678:	addeq	r3, r3, #1
   1667c:	add	r6, r6, #1
   16680:	str	r1, [lr, ip, lsl #2]
   16684:	add	ip, ip, #1
   16688:	b	165ec <__assert_fail@plt+0x52e8>
   1668c:	mov	r0, #12
   16690:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16694:	cmp	r5, r3
   16698:	ble	166b8 <__assert_fail@plt+0x53b4>
   1669c:	ldr	r1, [r8, #8]
   166a0:	sub	r5, r5, r3
   166a4:	add	r0, lr, r4, lsl #2
   166a8:	lsl	r2, r5, #2
   166ac:	add	r4, r4, r5
   166b0:	add	r1, r1, r3, lsl #2
   166b4:	bl	1107c <memcpy@plt>
   166b8:	mov	r0, #0
   166bc:	str	r4, [r7, #4]
   166c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c8:	mov	ip, #0
   166cc:	sub	sp, sp, #20
   166d0:	ldr	r4, [r2, #4]
   166d4:	str	ip, [r0]
   166d8:	cmp	r4, ip
   166dc:	addne	r9, r4, r3
   166e0:	bne	16700 <__assert_fail@plt+0x53fc>
   166e4:	mov	r0, r4
   166e8:	add	sp, sp, #20
   166ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166f0:	ldr	lr, [r2, #8]
   166f4:	ldr	lr, [lr, ip, lsl #2]
   166f8:	add	ip, ip, #1
   166fc:	add	r9, r9, lr
   16700:	cmp	r4, ip
   16704:	bgt	166f0 <__assert_fail@plt+0x53ec>
   16708:	mov	r5, r3
   1670c:	ldr	r3, [r1, #68]	; 0x44
   16710:	mov	r6, r2
   16714:	mov	r8, r1
   16718:	mov	r7, #0
   1671c:	str	r0, [sp, #8]
   16720:	and	r2, r9, r3
   16724:	mov	r3, #12
   16728:	mul	r3, r3, r2
   1672c:	ldr	r2, [r1, #32]
   16730:	ldr	fp, [r2, r3]
   16734:	add	sl, r2, r3
   16738:	cmp	fp, r7
   1673c:	bgt	16788 <__assert_fail@plt+0x5484>
   16740:	mov	r1, #1
   16744:	mov	r0, #56	; 0x38
   16748:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1674c:	subs	r4, r0, #0
   16750:	beq	16774 <__assert_fail@plt+0x5470>
   16754:	add	sl, r4, #4
   16758:	mov	r1, r6
   1675c:	mov	r0, sl
   16760:	bl	1650c <__assert_fail@plt+0x5208>
   16764:	subs	r3, r0, #0
   16768:	beq	167c8 <__assert_fail@plt+0x54c4>
   1676c:	mov	r0, r4
   16770:	bl	1f990 <__assert_fail@plt+0xe68c>
   16774:	ldr	r2, [sp, #8]
   16778:	mov	r3, #12
   1677c:	mov	r4, #0
   16780:	str	r3, [r2]
   16784:	b	166e4 <__assert_fail@plt+0x53e0>
   16788:	ldr	r3, [sl, #8]
   1678c:	ldr	r4, [r3, r7, lsl #2]
   16790:	ldr	r3, [r4]
   16794:	cmp	r3, r9
   16798:	bne	167c0 <__assert_fail@plt+0x54bc>
   1679c:	ldrb	r3, [r4, #52]	; 0x34
   167a0:	and	r3, r3, #15
   167a4:	cmp	r3, r5
   167a8:	bne	167c0 <__assert_fail@plt+0x54bc>
   167ac:	mov	r1, r6
   167b0:	ldr	r0, [r4, #40]	; 0x28
   167b4:	bl	13cb0 <__assert_fail@plt+0x29ac>
   167b8:	cmp	r0, #0
   167bc:	bne	166e4 <__assert_fail@plt+0x53e0>
   167c0:	add	r7, r7, #1
   167c4:	b	16738 <__assert_fail@plt+0x5434>
   167c8:	ldrb	r2, [r4, #52]	; 0x34
   167cc:	mov	fp, r3
   167d0:	str	sl, [r4, #40]	; 0x28
   167d4:	bfi	r2, r5, #0, #4
   167d8:	strb	r2, [r4, #52]	; 0x34
   167dc:	and	r2, r5, #4
   167e0:	str	r2, [sp]
   167e4:	and	r2, r5, #2
   167e8:	and	r5, r5, #1
   167ec:	str	r2, [sp, #4]
   167f0:	ldr	r1, [r6, #4]
   167f4:	cmp	fp, r1
   167f8:	blt	16818 <__assert_fail@plt+0x5514>
   167fc:	mov	r2, r9
   16800:	mov	r1, r4
   16804:	mov	r0, r8
   16808:	bl	1642c <__assert_fail@plt+0x5128>
   1680c:	cmp	r0, #0
   16810:	beq	166e4 <__assert_fail@plt+0x53e0>
   16814:	b	168a4 <__assert_fail@plt+0x55a0>
   16818:	ldr	r1, [r6, #8]
   1681c:	ldr	r0, [r8]
   16820:	ldr	r1, [r1, fp, lsl #2]
   16824:	add	r0, r0, r1, lsl #3
   16828:	ldr	r7, [r0, #4]
   1682c:	ldrb	ip, [r0, #4]
   16830:	ubfx	r7, r7, #8, #10
   16834:	cmp	ip, #1
   16838:	cmpeq	r7, #0
   1683c:	beq	16930 <__assert_fail@plt+0x562c>
   16840:	ldrb	r1, [r4, #52]	; 0x34
   16844:	cmp	ip, #2
   16848:	ldrb	r0, [r0, #6]
   1684c:	ubfx	lr, r1, #5, #1
   16850:	ubfx	r0, r0, #4, #1
   16854:	orr	r0, lr, r0
   16858:	bfi	r1, r0, #5, #1
   1685c:	strb	r1, [r4, #52]	; 0x34
   16860:	uxtbeq	r1, r1
   16864:	orreq	r1, r1, #16
   16868:	beq	1687c <__assert_fail@plt+0x5578>
   1686c:	cmp	ip, #4
   16870:	bne	16880 <__assert_fail@plt+0x557c>
   16874:	ldrb	r1, [r4, #52]	; 0x34
   16878:	orr	r1, r1, #64	; 0x40
   1687c:	strb	r1, [r4, #52]	; 0x34
   16880:	cmp	r7, #0
   16884:	beq	16930 <__assert_fail@plt+0x562c>
   16888:	ldr	r1, [r4, #40]	; 0x28
   1688c:	cmp	sl, r1
   16890:	bne	168d0 <__assert_fail@plt+0x55cc>
   16894:	mov	r0, #12
   16898:	bl	1f810 <__assert_fail@plt+0xe50c>
   1689c:	subs	r3, r0, #0
   168a0:	bne	168b0 <__assert_fail@plt+0x55ac>
   168a4:	mov	r0, r4
   168a8:	bl	15110 <__assert_fail@plt+0x3e0c>
   168ac:	b	16774 <__assert_fail@plt+0x5470>
   168b0:	mov	r1, r6
   168b4:	str	r3, [r4, #40]	; 0x28
   168b8:	bl	1650c <__assert_fail@plt+0x5208>
   168bc:	subs	r3, r0, #0
   168c0:	bne	168a4 <__assert_fail@plt+0x55a0>
   168c4:	ldrb	r1, [r4, #52]	; 0x34
   168c8:	orr	r1, r1, #128	; 0x80
   168cc:	strb	r1, [r4, #52]	; 0x34
   168d0:	tst	r7, #1
   168d4:	beq	168e0 <__assert_fail@plt+0x55dc>
   168d8:	cmp	r5, #0
   168dc:	beq	16918 <__assert_fail@plt+0x5614>
   168e0:	tst	r7, #2
   168e4:	beq	168f0 <__assert_fail@plt+0x55ec>
   168e8:	cmp	r5, #0
   168ec:	bne	16918 <__assert_fail@plt+0x5614>
   168f0:	tst	r7, #16
   168f4:	beq	16904 <__assert_fail@plt+0x5600>
   168f8:	ldr	r2, [sp, #4]
   168fc:	cmp	r2, #0
   16900:	beq	16918 <__assert_fail@plt+0x5614>
   16904:	tst	r7, #64	; 0x40
   16908:	beq	16930 <__assert_fail@plt+0x562c>
   1690c:	ldr	r2, [sp]
   16910:	cmp	r2, #0
   16914:	bne	16930 <__assert_fail@plt+0x562c>
   16918:	sub	r1, fp, r3
   1691c:	mov	r0, sl
   16920:	str	r3, [sp, #12]
   16924:	bl	1613c <__assert_fail@plt+0x4e38>
   16928:	ldr	r3, [sp, #12]
   1692c:	add	r3, r3, #1
   16930:	add	fp, fp, #1
   16934:	b	167f0 <__assert_fail@plt+0x54ec>
   16938:	ldrb	r3, [r1, #24]
   1693c:	cmp	r3, #16
   16940:	bne	16960 <__assert_fail@plt+0x565c>
   16944:	ldr	r3, [r1, #4]
   16948:	mov	r0, #0
   1694c:	ldr	r2, [r3, #12]
   16950:	ldr	r3, [r3, #28]
   16954:	str	r2, [r1, #12]
   16958:	str	r3, [r1, #28]
   1695c:	bx	lr
   16960:	push	{r4, r5, r6, lr}
   16964:	mov	r4, r1
   16968:	add	r3, r1, #20
   1696c:	mov	r5, r0
   16970:	ldm	r3, {r1, r2}
   16974:	str	r4, [r4, #12]
   16978:	bl	14ef8 <__assert_fail@plt+0x3bf4>
   1697c:	cmn	r0, #1
   16980:	str	r0, [r4, #28]
   16984:	beq	169b4 <__assert_fail@plt+0x56b0>
   16988:	ldrb	r3, [r4, #24]
   1698c:	cmp	r3, #12
   16990:	bne	169ac <__assert_fail@plt+0x56a8>
   16994:	ldr	r3, [r5]
   16998:	ldr	r2, [r4, #20]
   1699c:	add	r0, r3, r0, lsl #3
   169a0:	ldr	r3, [r0, #4]
   169a4:	bfi	r3, r2, #8, #10
   169a8:	str	r3, [r0, #4]
   169ac:	mov	r0, #0
   169b0:	pop	{r4, r5, r6, pc}
   169b4:	mov	r0, #12
   169b8:	pop	{r4, r5, r6, pc}
   169bc:	ldr	r3, [r0]
   169c0:	push	{r4, r5, r6, r7, r8, lr}
   169c4:	mov	r4, r0
   169c8:	cmp	r3, #0
   169cc:	movne	r5, #0
   169d0:	bne	16a60 <__assert_fail@plt+0x575c>
   169d4:	ldr	r0, [r4, #12]
   169d8:	mov	r5, #0
   169dc:	mov	r6, #12
   169e0:	bl	1f990 <__assert_fail@plt+0xe68c>
   169e4:	ldr	r3, [r4, #8]
   169e8:	cmp	r3, r5
   169ec:	bhi	16a70 <__assert_fail@plt+0x576c>
   169f0:	ldr	r0, [r4, #20]
   169f4:	bl	1f990 <__assert_fail@plt+0xe68c>
   169f8:	ldr	r0, [r4, #24]
   169fc:	bl	1f990 <__assert_fail@plt+0xe68c>
   16a00:	ldr	r0, [r4, #28]
   16a04:	bl	1f990 <__assert_fail@plt+0xe68c>
   16a08:	ldr	r0, [r4]
   16a0c:	bl	1f990 <__assert_fail@plt+0xe68c>
   16a10:	ldr	r3, [r4, #32]
   16a14:	cmp	r3, #0
   16a18:	movne	r5, #0
   16a1c:	movne	r8, #12
   16a20:	bne	16ae0 <__assert_fail@plt+0x57dc>
   16a24:	ldr	r0, [r4, #32]
   16a28:	bl	1f990 <__assert_fail@plt+0xe68c>
   16a2c:	ldr	r3, [pc, #216]	; 16b0c <__assert_fail@plt+0x5808>
   16a30:	ldr	r0, [r4, #60]	; 0x3c
   16a34:	cmp	r0, r3
   16a38:	bne	16b04 <__assert_fail@plt+0x5800>
   16a3c:	ldr	r0, [r4, #132]	; 0x84
   16a40:	bl	1f990 <__assert_fail@plt+0xe68c>
   16a44:	mov	r0, r4
   16a48:	pop	{r4, r5, r6, r7, r8, lr}
   16a4c:	b	1f990 <__assert_fail@plt+0xe68c>
   16a50:	ldr	r0, [r4]
   16a54:	add	r0, r0, r5, lsl #3
   16a58:	add	r5, r5, #1
   16a5c:	bl	14eb4 <__assert_fail@plt+0x3bb0>
   16a60:	ldr	r3, [r4, #8]
   16a64:	cmp	r3, r5
   16a68:	bhi	16a50 <__assert_fail@plt+0x574c>
   16a6c:	b	169d4 <__assert_fail@plt+0x56d0>
   16a70:	ldr	r3, [r4, #24]
   16a74:	cmp	r3, #0
   16a78:	beq	16a88 <__assert_fail@plt+0x5784>
   16a7c:	mla	r3, r6, r5, r3
   16a80:	ldr	r0, [r3, #8]
   16a84:	bl	1f990 <__assert_fail@plt+0xe68c>
   16a88:	ldr	r3, [r4, #28]
   16a8c:	cmp	r3, #0
   16a90:	beq	16aa0 <__assert_fail@plt+0x579c>
   16a94:	mla	r3, r6, r5, r3
   16a98:	ldr	r0, [r3, #8]
   16a9c:	bl	1f990 <__assert_fail@plt+0xe68c>
   16aa0:	ldr	r3, [r4, #20]
   16aa4:	cmp	r3, #0
   16aa8:	beq	16ab8 <__assert_fail@plt+0x57b4>
   16aac:	mla	r3, r6, r5, r3
   16ab0:	ldr	r0, [r3, #8]
   16ab4:	bl	1f990 <__assert_fail@plt+0xe68c>
   16ab8:	add	r5, r5, #1
   16abc:	b	169e4 <__assert_fail@plt+0x56e0>
   16ac0:	mla	r6, r8, r5, r6
   16ac4:	mov	r7, #0
   16ac8:	ldr	r3, [r6]
   16acc:	ldr	r0, [r6, #8]
   16ad0:	cmp	r7, r3
   16ad4:	blt	16af4 <__assert_fail@plt+0x57f0>
   16ad8:	add	r5, r5, #1
   16adc:	bl	1f990 <__assert_fail@plt+0xe68c>
   16ae0:	ldr	r6, [r4, #32]
   16ae4:	ldr	r3, [r4, #68]	; 0x44
   16ae8:	cmp	r5, r3
   16aec:	bls	16ac0 <__assert_fail@plt+0x57bc>
   16af0:	b	16a24 <__assert_fail@plt+0x5720>
   16af4:	ldr	r0, [r0, r7, lsl #2]
   16af8:	add	r7, r7, #1
   16afc:	bl	15110 <__assert_fail@plt+0x3e0c>
   16b00:	b	16ac8 <__assert_fail@plt+0x57c4>
   16b04:	bl	1f990 <__assert_fail@plt+0xe68c>
   16b08:	b	16a3c <__assert_fail@plt+0x5738>
   16b0c:	andeq	r0, r2, r8, lsr r9
   16b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b14:	mov	r9, #12
   16b18:	sub	sp, sp, #28
   16b1c:	mov	r4, #0
   16b20:	mov	r8, r0
   16b24:	mov	fp, r1
   16b28:	mov	r7, r2
   16b2c:	ldr	r5, [r0, #28]
   16b30:	str	r3, [sp]
   16b34:	str	r4, [sp, #12]
   16b38:	str	r4, [sp, #16]
   16b3c:	str	r4, [sp, #20]
   16b40:	mla	r5, r9, r1, r5
   16b44:	ldr	r3, [r5, #4]
   16b48:	cmp	r3, r4
   16b4c:	bgt	16b70 <__assert_fail@plt+0x586c>
   16b50:	mov	r4, #0
   16b54:	ldr	r3, [r5, #4]
   16b58:	cmp	r3, r4
   16b5c:	bgt	16c4c <__assert_fail@plt+0x5948>
   16b60:	ldr	r0, [sp, #20]
   16b64:	mov	r6, #0
   16b68:	bl	1f990 <__assert_fail@plt+0xe68c>
   16b6c:	b	16c38 <__assert_fail@plt+0x5934>
   16b70:	ldr	r3, [r5, #8]
   16b74:	ldr	r6, [r3, r4, lsl #2]
   16b78:	cmp	fp, r6
   16b7c:	beq	16c44 <__assert_fail@plt+0x5940>
   16b80:	ldr	r3, [r8]
   16b84:	add	r3, r3, r6, lsl #3
   16b88:	ldrb	r3, [r3, #4]
   16b8c:	tst	r3, #8
   16b90:	beq	16c44 <__assert_fail@plt+0x5940>
   16b94:	ldr	r3, [r8, #20]
   16b98:	mul	r6, r9, r6
   16b9c:	mov	r0, r5
   16ba0:	add	r3, r3, r6
   16ba4:	ldr	r1, [r3, #8]
   16ba8:	ldr	r3, [r3, #4]
   16bac:	ldr	r2, [r1]
   16bb0:	cmp	r3, #1
   16bb4:	ldrgt	sl, [r1, #4]
   16bb8:	mvnle	sl, #0
   16bbc:	mov	r1, r2
   16bc0:	str	r2, [sp, #4]
   16bc4:	bl	13d28 <__assert_fail@plt+0x2a24>
   16bc8:	cmp	r0, #0
   16bcc:	bne	16be8 <__assert_fail@plt+0x58e4>
   16bd0:	ldr	r2, [sp, #4]
   16bd4:	mov	r0, r7
   16bd8:	mov	r1, r2
   16bdc:	bl	13d28 <__assert_fail@plt+0x2a24>
   16be0:	cmp	r0, #0
   16be4:	bne	16c14 <__assert_fail@plt+0x5910>
   16be8:	cmp	sl, #0
   16bec:	ble	16c44 <__assert_fail@plt+0x5940>
   16bf0:	mov	r1, sl
   16bf4:	mov	r0, r5
   16bf8:	bl	13d28 <__assert_fail@plt+0x2a24>
   16bfc:	cmp	r0, #0
   16c00:	bne	16c44 <__assert_fail@plt+0x5940>
   16c04:	mov	r0, r7
   16c08:	bl	13d28 <__assert_fail@plt+0x2a24>
   16c0c:	cmp	r0, #0
   16c10:	beq	16c44 <__assert_fail@plt+0x5940>
   16c14:	ldr	r2, [r8, #28]
   16c18:	add	r0, sp, #12
   16c1c:	ldr	r1, [sp]
   16c20:	add	r2, r2, r6
   16c24:	bl	162c8 <__assert_fail@plt+0x4fc4>
   16c28:	subs	r6, r0, #0
   16c2c:	beq	16c44 <__assert_fail@plt+0x5940>
   16c30:	ldr	r0, [sp, #20]
   16c34:	bl	1f990 <__assert_fail@plt+0xe68c>
   16c38:	mov	r0, r6
   16c3c:	add	sp, sp, #28
   16c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c44:	add	r4, r4, #1
   16c48:	b	16b44 <__assert_fail@plt+0x5840>
   16c4c:	ldr	r3, [r5, #8]
   16c50:	add	r0, sp, #12
   16c54:	ldr	r6, [r3, r4, lsl #2]
   16c58:	mov	r1, r6
   16c5c:	bl	13d28 <__assert_fail@plt+0x2a24>
   16c60:	cmp	r0, #0
   16c64:	bne	16c7c <__assert_fail@plt+0x5978>
   16c68:	mov	r0, r7
   16c6c:	bl	13d28 <__assert_fail@plt+0x2a24>
   16c70:	sub	r1, r0, #1
   16c74:	mov	r0, r7
   16c78:	bl	1613c <__assert_fail@plt+0x4e38>
   16c7c:	add	r4, r4, #1
   16c80:	b	16b54 <__assert_fail@plt+0x5850>
   16c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c88:	mov	r7, r0
   16c8c:	sub	sp, sp, #300	; 0x12c
   16c90:	mov	fp, r1
   16c94:	mov	r4, r2
   16c98:	ldr	r5, [r0]
   16c9c:	ldr	r3, [r5, #92]	; 0x5c
   16ca0:	cmp	r3, #1
   16ca4:	mov	r3, #0
   16ca8:	ldreq	r6, [r0, #12]
   16cac:	movne	r6, #0
   16cb0:	str	r3, [sp, #4]
   16cb4:	str	r3, [sp, #8]
   16cb8:	str	r3, [sp, #12]
   16cbc:	ubfxeq	r6, r6, #22, #1
   16cc0:	ldr	r2, [sp, #4]
   16cc4:	ldr	r3, [fp, #8]
   16cc8:	cmp	r3, r2
   16ccc:	ble	16fc8 <__assert_fail@plt+0x5cc4>
   16cd0:	ldr	r2, [sp, #4]
   16cd4:	ldr	r3, [fp, #12]
   16cd8:	ldr	sl, [r3, r2, lsl #2]
   16cdc:	ldr	r3, [r5]
   16ce0:	lsl	r9, sl, #3
   16ce4:	add	r2, r3, r9
   16ce8:	ldrb	r8, [r2, #4]
   16cec:	cmp	r8, #1
   16cf0:	bne	16ddc <__assert_fail@plt+0x5ad8>
   16cf4:	ldrb	r0, [r3, sl, lsl #3]
   16cf8:	cmp	r6, #0
   16cfc:	strb	r8, [r4, r0]
   16d00:	beq	16d0c <__assert_fail@plt+0x5a08>
   16d04:	bl	11088 <tolower@plt>
   16d08:	strb	r8, [r4, r0]
   16d0c:	ldr	r3, [r7, #12]
   16d10:	tst	r3, #4194304	; 0x400000
   16d14:	beq	16dc0 <__assert_fail@plt+0x5abc>
   16d18:	ldr	r3, [r5, #92]	; 0x5c
   16d1c:	cmp	r3, #1
   16d20:	ble	16dc0 <__assert_fail@plt+0x5abc>
   16d24:	ldr	r3, [r5]
   16d28:	add	r8, sp, #41	; 0x29
   16d2c:	ldr	r1, [pc, #668]	; 16fd0 <__assert_fail@plt+0x5ccc>
   16d30:	ldrb	r3, [r3, r9]
   16d34:	strb	r3, [sp, #40]	; 0x28
   16d38:	ldr	r3, [r5, #8]
   16d3c:	add	sl, sl, #1
   16d40:	cmp	r3, sl
   16d44:	bls	16d68 <__assert_fail@plt+0x5a64>
   16d48:	ldr	r2, [r5]
   16d4c:	add	r3, r2, sl, lsl #3
   16d50:	ldr	r3, [r3, #4]
   16d54:	bic	r3, r3, #-16777216	; 0xff000000
   16d58:	bic	r3, r3, #14614528	; 0xdf0000
   16d5c:	bic	r3, r3, #65280	; 0xff00
   16d60:	cmp	r3, r1
   16d64:	beq	16dd0 <__assert_fail@plt+0x5acc>
   16d68:	mov	r3, #0
   16d6c:	add	r9, sp, #40	; 0x28
   16d70:	sub	r8, r8, r9
   16d74:	mov	r1, r9
   16d78:	mov	r2, r8
   16d7c:	add	r0, sp, #28
   16d80:	str	r3, [sp, #32]
   16d84:	str	r3, [sp, #36]	; 0x24
   16d88:	add	r3, sp, #32
   16d8c:	bl	1fa3c <__assert_fail@plt+0xe738>
   16d90:	cmp	r8, r0
   16d94:	bne	16dc0 <__assert_fail@plt+0x5abc>
   16d98:	ldr	r0, [sp, #28]
   16d9c:	bl	110a0 <towlower@plt>
   16da0:	mov	r1, r0
   16da4:	add	r2, sp, #32
   16da8:	mov	r0, r9
   16dac:	bl	11004 <wcrtomb@plt>
   16db0:	cmn	r0, #1
   16db4:	ldrbne	r3, [sp, #40]	; 0x28
   16db8:	movne	r2, #1
   16dbc:	strbne	r2, [r4, r3]
   16dc0:	ldr	r3, [sp, #4]
   16dc4:	add	r3, r3, #1
   16dc8:	str	r3, [sp, #4]
   16dcc:	b	16cc0 <__assert_fail@plt+0x59bc>
   16dd0:	ldrb	r3, [r2, sl, lsl #3]
   16dd4:	strb	r3, [r8], #1
   16dd8:	b	16d38 <__assert_fail@plt+0x5a34>
   16ddc:	cmp	r8, #3
   16de0:	bne	16e58 <__assert_fail@plt+0x5b54>
   16de4:	mov	r8, #0
   16de8:	mov	r2, #1
   16dec:	ldr	r1, [r5]
   16df0:	lsl	r3, r8, #3
   16df4:	mov	sl, #0
   16df8:	ldr	r1, [r1, r9]
   16dfc:	ldr	r1, [r1, r8]
   16e00:	lsr	r0, r1, sl
   16e04:	tst	r0, #1
   16e08:	beq	16e38 <__assert_fail@plt+0x5b34>
   16e0c:	cmp	r6, #0
   16e10:	strb	r2, [r4, r3]
   16e14:	beq	16e38 <__assert_fail@plt+0x5b34>
   16e18:	mov	r0, r3
   16e1c:	str	r3, [sp, #16]
   16e20:	str	r1, [sp, #20]
   16e24:	bl	11088 <tolower@plt>
   16e28:	ldr	r3, [sp, #16]
   16e2c:	mov	r2, #1
   16e30:	ldr	r1, [sp, #20]
   16e34:	strb	r2, [r4, r0]
   16e38:	add	sl, sl, #1
   16e3c:	add	r3, r3, #1
   16e40:	cmp	sl, #32
   16e44:	bne	16e00 <__assert_fail@plt+0x5afc>
   16e48:	add	r8, r8, #4
   16e4c:	cmp	r8, #32
   16e50:	bne	16dec <__assert_fail@plt+0x5ae8>
   16e54:	b	16dc0 <__assert_fail@plt+0x5abc>
   16e58:	cmp	r8, #6
   16e5c:	bne	16f94 <__assert_fail@plt+0x5c90>
   16e60:	ldr	sl, [r3, r9]
   16e64:	ldr	r3, [r5, #92]	; 0x5c
   16e68:	cmp	r3, #1
   16e6c:	ble	16f8c <__assert_fail@plt+0x5c88>
   16e70:	ldr	r3, [sl, #36]	; 0x24
   16e74:	cmp	r3, #0
   16e78:	bne	16e94 <__assert_fail@plt+0x5b90>
   16e7c:	ldrb	r3, [sl, #16]
   16e80:	tst	r3, #1
   16e84:	bne	16e94 <__assert_fail@plt+0x5b90>
   16e88:	ldr	r8, [sl, #32]
   16e8c:	cmp	r8, #0
   16e90:	beq	16f7c <__assert_fail@plt+0x5c78>
   16e94:	mov	r3, #0
   16e98:	strb	r3, [sp, #32]
   16e9c:	ldr	r3, [sp, #8]
   16ea0:	mov	r2, #1
   16ea4:	add	r1, sp, #32
   16ea8:	mov	r0, #0
   16eac:	str	r3, [sp, #40]	; 0x28
   16eb0:	ldr	r3, [sp, #12]
   16eb4:	str	r3, [sp, #44]	; 0x2c
   16eb8:	add	r3, sp, #40	; 0x28
   16ebc:	bl	1fa3c <__assert_fail@plt+0xe738>
   16ec0:	ldrb	r3, [sp, #32]
   16ec4:	cmn	r0, #2
   16ec8:	moveq	r2, #1
   16ecc:	strbeq	r2, [r4, r3]
   16ed0:	add	r3, r3, #1
   16ed4:	uxtb	r3, r3
   16ed8:	cmp	r3, #0
   16edc:	strb	r3, [sp, #32]
   16ee0:	bne	16e9c <__assert_fail@plt+0x5b98>
   16ee4:	b	16dc0 <__assert_fail@plt+0x5abc>
   16ee8:	mov	r3, #0
   16eec:	add	r2, sp, #32
   16ef0:	lsl	r9, r8, #2
   16ef4:	add	r0, sp, #40	; 0x28
   16ef8:	str	r3, [sp, #32]
   16efc:	str	r3, [sp, #36]	; 0x24
   16f00:	ldr	r3, [sl]
   16f04:	ldr	r1, [r3, r8, lsl #2]
   16f08:	bl	11004 <wcrtomb@plt>
   16f0c:	cmn	r0, #1
   16f10:	beq	16f34 <__assert_fail@plt+0x5c30>
   16f14:	ldrb	r0, [sp, #40]	; 0x28
   16f18:	mov	r3, #1
   16f1c:	cmp	r6, #0
   16f20:	strb	r3, [r4, r0]
   16f24:	beq	16f34 <__assert_fail@plt+0x5c30>
   16f28:	bl	11088 <tolower@plt>
   16f2c:	mov	r3, #1
   16f30:	strb	r3, [r4, r0]
   16f34:	ldr	r3, [r7, #12]
   16f38:	tst	r3, #4194304	; 0x400000
   16f3c:	beq	16f78 <__assert_fail@plt+0x5c74>
   16f40:	ldr	r3, [r5, #92]	; 0x5c
   16f44:	cmp	r3, #1
   16f48:	ble	16f78 <__assert_fail@plt+0x5c74>
   16f4c:	ldr	r3, [sl]
   16f50:	ldr	r0, [r3, r9]
   16f54:	bl	110a0 <towlower@plt>
   16f58:	mov	r1, r0
   16f5c:	add	r2, sp, #32
   16f60:	add	r0, sp, #40	; 0x28
   16f64:	bl	11004 <wcrtomb@plt>
   16f68:	cmn	r0, #1
   16f6c:	ldrbne	r3, [sp, #40]	; 0x28
   16f70:	movne	r2, #1
   16f74:	strbne	r2, [r4, r3]
   16f78:	add	r8, r8, #1
   16f7c:	ldr	r3, [sl, #20]
   16f80:	cmp	r3, r8
   16f84:	bgt	16ee8 <__assert_fail@plt+0x5be4>
   16f88:	b	16dc0 <__assert_fail@plt+0x5abc>
   16f8c:	mov	r8, #0
   16f90:	b	16f7c <__assert_fail@plt+0x5c78>
   16f94:	and	r3, r8, #253	; 0xfd
   16f98:	cmp	r3, #5
   16f9c:	beq	16fa8 <__assert_fail@plt+0x5ca4>
   16fa0:	cmp	r8, #2
   16fa4:	bne	16dc0 <__assert_fail@plt+0x5abc>
   16fa8:	mov	r2, #256	; 0x100
   16fac:	mov	r1, #1
   16fb0:	mov	r0, r4
   16fb4:	bl	11208 <memset@plt>
   16fb8:	cmp	r8, #2
   16fbc:	ldrbeq	r3, [r7, #28]
   16fc0:	orreq	r3, r3, #1
   16fc4:	strbeq	r3, [r7, #28]
   16fc8:	add	sp, sp, #300	; 0x12c
   16fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fd0:	eoreq	r0, r0, r1
   16fd4:	push	{r4, r5, r6, r7, r8, lr}
   16fd8:	subs	r4, r0, #0
   16fdc:	movne	r5, #0
   16fe0:	movne	r7, #24
   16fe4:	bne	17014 <__assert_fail@plt+0x5d10>
   16fe8:	mov	r0, #0
   16fec:	pop	{r4, r5, r6, r7, r8, pc}
   16ff0:	mul	r6, r7, r5
   16ff4:	add	r5, r5, #1
   16ff8:	add	r0, r0, r6
   16ffc:	ldr	r0, [r0, #20]
   17000:	bl	1f990 <__assert_fail@plt+0xe68c>
   17004:	ldr	r3, [r4, #8]
   17008:	add	r3, r3, r6
   1700c:	ldr	r0, [r3, #8]
   17010:	bl	1f990 <__assert_fail@plt+0xe68c>
   17014:	ldr	r3, [r4]
   17018:	ldr	r0, [r4, #8]
   1701c:	cmp	r5, r3
   17020:	blt	16ff0 <__assert_fail@plt+0x5cec>
   17024:	bl	1f990 <__assert_fail@plt+0xe68c>
   17028:	b	16fe8 <__assert_fail@plt+0x5ce4>
   1702c:	ldr	r3, [r0]
   17030:	push	{r4, r5, r6, lr}
   17034:	cmp	r3, #0
   17038:	bne	1704c <__assert_fail@plt+0x5d48>
   1703c:	bl	146c0 <__assert_fail@plt+0x33bc>
   17040:	clz	r0, r0
   17044:	lsr	r0, r0, #5
   17048:	pop	{r4, r5, r6, pc}
   1704c:	ldr	r2, [r0, #4]
   17050:	mov	r4, r0
   17054:	mov	r5, r1
   17058:	ldr	r0, [r0, #8]
   1705c:	cmp	r2, #0
   17060:	streq	r1, [r0]
   17064:	beq	170d8 <__assert_fail@plt+0x5dd4>
   17068:	cmp	r3, r2
   1706c:	bne	1708c <__assert_fail@plt+0x5d88>
   17070:	lsl	r2, r3, #1
   17074:	lsl	r1, r3, #3
   17078:	str	r2, [r4]
   1707c:	bl	1f83c <__assert_fail@plt+0xe538>
   17080:	cmp	r0, #0
   17084:	popeq	{r4, r5, r6, pc}
   17088:	str	r0, [r4, #8]
   1708c:	ldr	r2, [r4, #4]
   17090:	ldr	r1, [r4, #8]
   17094:	ldr	r3, [r1]
   17098:	cmp	r5, r3
   1709c:	lsl	r3, r2, #2
   170a0:	add	r3, r1, r3
   170a4:	blt	170c0 <__assert_fail@plt+0x5dbc>
   170a8:	ldr	r0, [r3, #-4]
   170ac:	cmp	r5, r0
   170b0:	bge	170d4 <__assert_fail@plt+0x5dd0>
   170b4:	sub	r2, r2, #1
   170b8:	str	r0, [r3], #-4
   170bc:	b	170a8 <__assert_fail@plt+0x5da4>
   170c0:	mov	r0, r2
   170c4:	cmp	r0, #0
   170c8:	bgt	170ec <__assert_fail@plt+0x5de8>
   170cc:	cmp	r2, #0
   170d0:	subge	r2, r2, r2
   170d4:	str	r5, [r1, r2, lsl #2]
   170d8:	ldr	r3, [r4, #4]
   170dc:	mov	r0, #1
   170e0:	add	r3, r3, #1
   170e4:	str	r3, [r4, #4]
   170e8:	pop	{r4, r5, r6, pc}
   170ec:	ldr	ip, [r3, #-4]
   170f0:	sub	r0, r0, #1
   170f4:	str	ip, [r3], #-4
   170f8:	b	170c4 <__assert_fail@plt+0x5dc0>
   170fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17100:	sub	sp, sp, #20
   17104:	mov	r4, r0
   17108:	mov	r7, r1
   1710c:	mov	fp, r2
   17110:	mov	r9, #12
   17114:	mov	sl, #0
   17118:	ldr	r6, [sp, #56]	; 0x38
   1711c:	str	r3, [sp, #8]
   17120:	ldr	ip, [r4]
   17124:	ldr	r0, [r4, #20]
   17128:	add	r1, ip, r7, lsl #3
   1712c:	ldrb	lr, [r1, #4]
   17130:	cmp	lr, #4
   17134:	bne	171ac <__assert_fail@plt+0x5ea8>
   17138:	ldr	r1, [r4, #12]
   1713c:	mul	r8, r9, fp
   17140:	mov	r2, r6
   17144:	str	fp, [sp, #12]
   17148:	add	r0, r0, r8
   1714c:	ldr	r5, [r1, r7, lsl #2]
   17150:	str	sl, [r0, #4]
   17154:	mov	r0, r4
   17158:	mov	r1, r5
   1715c:	bl	1509c <__assert_fail@plt+0x3d98>
   17160:	cmn	r0, #1
   17164:	mov	fp, r0
   17168:	ldr	r3, [sp, #12]
   1716c:	bne	17180 <__assert_fail@plt+0x5e7c>
   17170:	mov	r3, #12
   17174:	mov	r0, r3
   17178:	add	sp, sp, #20
   1717c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17180:	ldr	r1, [r4, #12]
   17184:	ldr	r0, [r1, r7, lsl #2]
   17188:	str	r0, [r1, r3, lsl #2]
   1718c:	ldr	r0, [r4, #20]
   17190:	mov	r1, fp
   17194:	add	r0, r0, r8
   17198:	bl	1702c <__assert_fail@plt+0x5d28>
   1719c:	cmp	r0, #0
   171a0:	beq	17170 <__assert_fail@plt+0x5e6c>
   171a4:	mov	r7, r5
   171a8:	b	17120 <__assert_fail@plt+0x5e1c>
   171ac:	mul	r3, r9, r7
   171b0:	add	lr, r0, r3
   171b4:	str	r3, [sp, #12]
   171b8:	ldr	r3, [lr, #4]
   171bc:	cmp	r3, #0
   171c0:	bne	171d4 <__assert_fail@plt+0x5ed0>
   171c4:	ldr	r1, [r4, #12]
   171c8:	ldr	r0, [r1, r7, lsl #2]
   171cc:	str	r0, [r1, fp, lsl #2]
   171d0:	b	17174 <__assert_fail@plt+0x5e70>
   171d4:	mul	r8, r9, fp
   171d8:	ldr	lr, [lr, #8]
   171dc:	cmp	r3, #1
   171e0:	ldrne	r1, [r4, #8]
   171e4:	add	r0, r0, r8
   171e8:	ldr	r5, [lr]
   171ec:	str	sl, [r0, #4]
   171f0:	bne	17278 <__assert_fail@plt+0x5f74>
   171f4:	ldr	r3, [sp, #8]
   171f8:	cmp	r7, fp
   171fc:	sub	r3, r7, r3
   17200:	clz	r3, r3
   17204:	lsr	r3, r3, #5
   17208:	moveq	r3, #0
   1720c:	cmp	r3, #0
   17210:	beq	1722c <__assert_fail@plt+0x5f28>
   17214:	mov	r1, r5
   17218:	bl	1702c <__assert_fail@plt+0x5d28>
   1721c:	cmp	r0, #0
   17220:	movne	r3, #0
   17224:	bne	17174 <__assert_fail@plt+0x5e70>
   17228:	b	17170 <__assert_fail@plt+0x5e6c>
   1722c:	ldr	r3, [r1, #4]
   17230:	ubfx	r3, r3, #8, #10
   17234:	orr	r6, r6, r3
   17238:	mov	r2, r6
   1723c:	mov	r1, r5
   17240:	mov	r0, r4
   17244:	bl	1509c <__assert_fail@plt+0x3d98>
   17248:	cmn	r0, #1
   1724c:	mov	fp, r0
   17250:	bne	1718c <__assert_fail@plt+0x5e88>
   17254:	b	17170 <__assert_fail@plt+0x5e6c>
   17258:	ldr	r2, [r4, #16]
   1725c:	ldr	r2, [r2, r1, lsl #2]
   17260:	cmp	r2, r5
   17264:	bne	17278 <__assert_fail@plt+0x5f74>
   17268:	ldr	r3, [r3, #4]
   1726c:	ubfx	r3, r3, #8, #10
   17270:	cmp	r6, r3
   17274:	beq	17304 <__assert_fail@plt+0x6000>
   17278:	sub	r1, r1, #1
   1727c:	add	r3, ip, r1, lsl #3
   17280:	cmp	r1, #0
   17284:	movle	r2, #0
   17288:	movgt	r2, #1
   1728c:	ldrb	lr, [r3, #6]
   17290:	ands	r2, r2, lr, lsr #2
   17294:	bne	17258 <__assert_fail@plt+0x5f54>
   17298:	mov	r2, r6
   1729c:	mov	r1, r5
   172a0:	mov	r0, r4
   172a4:	bl	1509c <__assert_fail@plt+0x3d98>
   172a8:	cmn	r0, #1
   172ac:	mov	r7, r0
   172b0:	beq	17170 <__assert_fail@plt+0x5e6c>
   172b4:	ldr	r0, [r4, #20]
   172b8:	mov	r1, r7
   172bc:	add	r0, r0, r8
   172c0:	bl	1702c <__assert_fail@plt+0x5d28>
   172c4:	cmp	r0, #0
   172c8:	beq	17170 <__assert_fail@plt+0x5e6c>
   172cc:	mov	r2, r7
   172d0:	mov	r1, r5
   172d4:	str	r6, [sp]
   172d8:	mov	r0, r4
   172dc:	ldr	r3, [sp, #8]
   172e0:	bl	170fc <__assert_fail@plt+0x5df8>
   172e4:	subs	r3, r0, #0
   172e8:	bne	17174 <__assert_fail@plt+0x5e70>
   172ec:	ldr	r2, [sp, #12]
   172f0:	ldr	r3, [r4, #20]
   172f4:	add	r3, r3, r2
   172f8:	ldr	r3, [r3, #8]
   172fc:	ldr	r5, [r3, #4]
   17300:	b	17238 <__assert_fail@plt+0x5f34>
   17304:	bl	1702c <__assert_fail@plt+0x5d28>
   17308:	cmp	r0, #0
   1730c:	bne	172ec <__assert_fail@plt+0x5fe8>
   17310:	b	17170 <__assert_fail@plt+0x5e6c>
   17314:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17318:	mov	r6, r0
   1731c:	mov	r5, r1
   17320:	mov	r4, r2
   17324:	mov	r8, r3
   17328:	mov	r9, #12
   1732c:	ldr	r7, [sp, #40]	; 0x28
   17330:	mov	r1, r4
   17334:	mov	r0, r5
   17338:	bl	13d28 <__assert_fail@plt+0x2a24>
   1733c:	cmp	r0, #0
   17340:	beq	1734c <__assert_fail@plt+0x6048>
   17344:	mov	r0, #0
   17348:	b	1738c <__assert_fail@plt+0x6088>
   1734c:	ldr	r3, [r6]
   17350:	add	r2, r3, r4, lsl #3
   17354:	ldrb	r2, [r2, #4]
   17358:	cmp	r2, r7
   1735c:	bne	17394 <__assert_fail@plt+0x6090>
   17360:	ldr	r3, [r3, r4, lsl #3]
   17364:	cmp	r3, r8
   17368:	bne	17394 <__assert_fail@plt+0x6090>
   1736c:	cmp	r7, #9
   17370:	bne	17344 <__assert_fail@plt+0x6040>
   17374:	mov	r1, r4
   17378:	mov	r0, r5
   1737c:	bl	1702c <__assert_fail@plt+0x5d28>
   17380:	cmp	r0, #0
   17384:	bne	17344 <__assert_fail@plt+0x6040>
   17388:	mov	r0, #12
   1738c:	add	sp, sp, #12
   17390:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17394:	mov	r1, r4
   17398:	mov	r0, r5
   1739c:	bl	1702c <__assert_fail@plt+0x5d28>
   173a0:	cmp	r0, #0
   173a4:	beq	17388 <__assert_fail@plt+0x6084>
   173a8:	ldr	r3, [r6, #20]
   173ac:	mul	r4, r9, r4
   173b0:	add	r3, r3, r4
   173b4:	ldr	r2, [r3, #4]
   173b8:	cmp	r2, #0
   173bc:	beq	17344 <__assert_fail@plt+0x6040>
   173c0:	cmp	r2, #2
   173c4:	beq	173dc <__assert_fail@plt+0x60d8>
   173c8:	ldr	r2, [r6, #20]
   173cc:	add	r4, r2, r4
   173d0:	ldr	r3, [r4, #8]
   173d4:	ldr	r4, [r3]
   173d8:	b	17330 <__assert_fail@plt+0x602c>
   173dc:	ldr	r2, [r3, #8]
   173e0:	mov	r1, r5
   173e4:	mov	r0, r6
   173e8:	mov	r3, r8
   173ec:	str	r7, [sp]
   173f0:	ldr	r2, [r2, #4]
   173f4:	bl	17314 <__assert_fail@plt+0x6010>
   173f8:	cmp	r0, #0
   173fc:	beq	173c8 <__assert_fail@plt+0x60c4>
   17400:	b	1738c <__assert_fail@plt+0x6088>
   17404:	push	{r4, r5, r6, r7, r8, lr}
   17408:	subs	r7, r1, #0
   1740c:	bne	17418 <__assert_fail@plt+0x6114>
   17410:	mov	r5, #0
   17414:	b	1748c <__assert_fail@plt+0x6188>
   17418:	ldr	r3, [r7, #4]
   1741c:	cmp	r3, #0
   17420:	beq	17410 <__assert_fail@plt+0x610c>
   17424:	ldm	r0, {r1, r2}
   17428:	mov	r4, r0
   1742c:	add	r2, r2, r3, lsl #1
   17430:	cmp	r1, r2
   17434:	bge	17460 <__assert_fail@plt+0x615c>
   17438:	add	r1, r3, r1
   1743c:	ldr	r0, [r0, #8]
   17440:	lsl	r5, r1, #1
   17444:	lsl	r1, r1, #3
   17448:	bl	1f83c <__assert_fail@plt+0xe538>
   1744c:	cmp	r0, #0
   17450:	moveq	r5, #12
   17454:	beq	1748c <__assert_fail@plt+0x6188>
   17458:	str	r5, [r4]
   1745c:	str	r0, [r4, #8]
   17460:	ldr	r5, [r4, #4]
   17464:	ldr	r2, [r7, #4]
   17468:	cmp	r5, #0
   1746c:	addne	r6, r5, r2, lsl #1
   17470:	bne	174ac <__assert_fail@plt+0x61a8>
   17474:	ldr	r1, [r7, #8]
   17478:	str	r2, [r4, #4]
   1747c:	ldr	r2, [r7, #4]
   17480:	ldr	r0, [r4, #8]
   17484:	lsl	r2, r2, #2
   17488:	bl	1107c <memcpy@plt>
   1748c:	mov	r0, r5
   17490:	pop	{r4, r5, r6, r7, r8, pc}
   17494:	ldr	r3, [r4, #8]
   17498:	ldr	r1, [r7, #8]
   1749c:	ldr	r0, [r3, r5, lsl #2]
   174a0:	ldr	r1, [r1, r2, lsl #2]
   174a4:	cmp	r0, r1
   174a8:	bne	174b8 <__assert_fail@plt+0x61b4>
   174ac:	sub	r2, r2, #1
   174b0:	sub	r5, r5, #1
   174b4:	b	174c8 <__assert_fail@plt+0x61c4>
   174b8:	bge	174b0 <__assert_fail@plt+0x61ac>
   174bc:	sub	r6, r6, #1
   174c0:	sub	r2, r2, #1
   174c4:	str	r1, [r3, r6, lsl #2]
   174c8:	cmp	r2, #0
   174cc:	cmpge	r5, #0
   174d0:	bge	17494 <__assert_fail@plt+0x6190>
   174d4:	cmp	r2, #0
   174d8:	blt	174f8 <__assert_fail@plt+0x61f4>
   174dc:	ldr	r0, [r4, #8]
   174e0:	add	r2, r2, #1
   174e4:	sub	r6, r6, r2
   174e8:	lsl	r2, r2, #2
   174ec:	ldr	r1, [r7, #8]
   174f0:	add	r0, r0, r6, lsl #2
   174f4:	bl	1107c <memcpy@plt>
   174f8:	ldr	r1, [r4, #4]
   174fc:	ldr	r2, [r7, #4]
   17500:	add	r2, r1, r2, lsl #1
   17504:	sub	ip, r2, #1
   17508:	subs	r2, r2, r6
   1750c:	beq	17410 <__assert_fail@plt+0x610c>
   17510:	ldr	r0, [r4, #8]
   17514:	sub	r3, r1, #1
   17518:	add	r1, r1, r2
   1751c:	str	r1, [r4, #4]
   17520:	ldr	r4, [r0, ip, lsl #2]
   17524:	add	r1, r3, r2
   17528:	ldr	lr, [r0, r3, lsl #2]
   1752c:	cmp	r4, lr
   17530:	ble	17548 <__assert_fail@plt+0x6244>
   17534:	subs	r2, r2, #1
   17538:	sub	ip, ip, #1
   1753c:	str	r4, [r0, r1, lsl #2]
   17540:	bne	17520 <__assert_fail@plt+0x621c>
   17544:	b	17410 <__assert_fail@plt+0x610c>
   17548:	subs	r3, r3, #1
   1754c:	str	lr, [r0, r1, lsl #2]
   17550:	bpl	17520 <__assert_fail@plt+0x621c>
   17554:	lsl	r2, r2, #2
   17558:	add	r1, r0, r6, lsl #2
   1755c:	bl	1107c <memcpy@plt>
   17560:	b	17410 <__assert_fail@plt+0x610c>
   17564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17568:	sub	sp, sp, #44	; 0x2c
   1756c:	mov	r6, #12
   17570:	mov	r4, r1
   17574:	add	r5, sp, #16
   17578:	mul	r6, r6, r2
   1757c:	mov	r7, r2
   17580:	str	r0, [sp, #8]
   17584:	mov	r0, r5
   17588:	str	r3, [sp, #12]
   1758c:	ldr	r3, [r1, #20]
   17590:	add	r3, r3, r6
   17594:	ldr	r1, [r3, #4]
   17598:	add	r1, r1, #1
   1759c:	bl	14700 <__assert_fail@plt+0x33fc>
   175a0:	subs	r9, r0, #0
   175a4:	bne	176d4 <__assert_fail@plt+0x63d0>
   175a8:	ldr	r3, [sp, #20]
   175ac:	lsl	r8, r7, #3
   175b0:	ldr	r1, [pc, #404]	; 1774c <__assert_fail@plt+0x6448>
   175b4:	add	r2, r3, #1
   175b8:	str	r2, [sp, #20]
   175bc:	ldr	r2, [sp, #24]
   175c0:	str	r7, [r2, r3, lsl #2]
   175c4:	mvn	r2, #0
   175c8:	ldr	r3, [r4, #24]
   175cc:	add	r3, r3, r6
   175d0:	str	r2, [r3, #4]
   175d4:	ldr	r2, [r4]
   175d8:	add	r3, r2, r8
   175dc:	ldr	r3, [r3, #4]
   175e0:	and	r1, r1, r3
   175e4:	cmp	r1, #0
   175e8:	bne	17614 <__assert_fail@plt+0x6310>
   175ec:	ldr	r3, [r4]
   175f0:	add	r8, r3, r8
   175f4:	ldrb	r3, [r8, #4]
   175f8:	tst	r3, #8
   175fc:	bne	1773c <__assert_fail@plt+0x6438>
   17600:	ldr	r3, [r4, #24]
   17604:	ldm	r5, {r0, r1, r2}
   17608:	add	r6, r3, r6
   1760c:	stm	r6, {r0, r1, r2}
   17610:	b	176c8 <__assert_fail@plt+0x63c4>
   17614:	ldr	r1, [r4, #20]
   17618:	add	r1, r1, r6
   1761c:	ldr	r0, [r1, #4]
   17620:	cmp	r0, #0
   17624:	beq	175ec <__assert_fail@plt+0x62e8>
   17628:	ldr	r1, [r1, #8]
   1762c:	ldr	r1, [r1]
   17630:	add	r2, r2, r1, lsl #3
   17634:	ldrb	r2, [r2, #6]
   17638:	tst	r2, #4
   1763c:	bne	175ec <__assert_fail@plt+0x62e8>
   17640:	ubfx	r3, r3, #8, #10
   17644:	mov	r0, r4
   17648:	mov	r2, r7
   1764c:	mov	r1, r7
   17650:	str	r3, [sp]
   17654:	mov	r3, r7
   17658:	bl	170fc <__assert_fail@plt+0x5df8>
   1765c:	cmp	r0, #0
   17660:	beq	175ec <__assert_fail@plt+0x62e8>
   17664:	mov	r9, r0
   17668:	b	176d4 <__assert_fail@plt+0x63d0>
   1766c:	ldr	r3, [r3, #8]
   17670:	ldr	r2, [r3, r7, lsl #2]
   17674:	mov	r3, #12
   17678:	mul	fp, r3, r2
   1767c:	add	r1, r1, fp
   17680:	ldr	r3, [r1, #4]
   17684:	cmn	r3, #1
   17688:	bne	176e0 <__assert_fail@plt+0x63dc>
   1768c:	mov	sl, #1
   17690:	add	r7, r7, #1
   17694:	ldr	r3, [r4, #20]
   17698:	ldr	r1, [r4, #24]
   1769c:	add	r3, r3, r6
   176a0:	ldr	r2, [r3, #4]
   176a4:	cmp	r2, r7
   176a8:	bgt	1766c <__assert_fail@plt+0x6368>
   176ac:	ldr	r3, [sp, #12]
   176b0:	add	r1, r1, r6
   176b4:	eor	r3, r3, #1
   176b8:	tst	sl, r3
   176bc:	movne	r3, #0
   176c0:	strne	r3, [r1, #4]
   176c4:	beq	17600 <__assert_fail@plt+0x62fc>
   176c8:	ldm	r5, {r0, r1, r2}
   176cc:	ldr	r3, [sp, #8]
   176d0:	stm	r3, {r0, r1, r2}
   176d4:	mov	r0, r9
   176d8:	add	sp, sp, #44	; 0x2c
   176dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e0:	cmp	r3, #0
   176e4:	bne	17730 <__assert_fail@plt+0x642c>
   176e8:	mov	r1, r4
   176ec:	mov	r0, r8
   176f0:	bl	17564 <__assert_fail@plt+0x6260>
   176f4:	cmp	r0, #0
   176f8:	bne	17664 <__assert_fail@plt+0x6360>
   176fc:	mov	r1, r8
   17700:	mov	r0, r5
   17704:	bl	17404 <__assert_fail@plt+0x6100>
   17708:	cmp	r0, #0
   1770c:	bne	17664 <__assert_fail@plt+0x6360>
   17710:	ldr	r3, [r4, #24]
   17714:	add	fp, r3, fp
   17718:	ldr	r3, [fp, #4]
   1771c:	cmp	r3, #0
   17720:	bne	17690 <__assert_fail@plt+0x638c>
   17724:	ldr	r0, [sp, #36]	; 0x24
   17728:	bl	1f990 <__assert_fail@plt+0xe68c>
   1772c:	b	1768c <__assert_fail@plt+0x6388>
   17730:	ldm	r1, {r0, r1, r2}
   17734:	stm	r8, {r0, r1, r2}
   17738:	b	176fc <__assert_fail@plt+0x63f8>
   1773c:	mov	r7, #0
   17740:	add	r8, sp, #28
   17744:	mov	sl, r7
   17748:	b	17694 <__assert_fail@plt+0x6390>
   1774c:	andeq	pc, r3, r0, lsl #30
   17750:	cmp	r1, #0
   17754:	push	{r4, r5, r6, lr}
   17758:	mov	r4, r0
   1775c:	bge	17768 <__assert_fail@plt+0x6464>
   17760:	ldr	r0, [r4, #60]	; 0x3c
   17764:	pop	{r4, r5, r6, pc}
   17768:	ldr	r3, [r0, #48]	; 0x30
   1776c:	cmp	r3, r1
   17770:	bne	17784 <__assert_fail@plt+0x6480>
   17774:	tst	r2, #2
   17778:	movne	r0, #8
   1777c:	moveq	r0, #10
   17780:	pop	{r4, r5, r6, pc}
   17784:	ldr	r3, [r0, #80]	; 0x50
   17788:	cmp	r3, #1
   1778c:	ldrgt	r3, [r0, #8]
   17790:	bgt	177c4 <__assert_fail@plt+0x64c0>
   17794:	ldr	r3, [r0, #4]
   17798:	ldr	r0, [r0, #68]	; 0x44
   1779c:	ldrb	r2, [r3, r1]
   177a0:	mov	r1, r2
   177a4:	bl	13bbc <__assert_fail@plt+0x28b8>
   177a8:	cmp	r0, #0
   177ac:	bne	17828 <__assert_fail@plt+0x6524>
   177b0:	cmp	r2, #10
   177b4:	popne	{r4, r5, r6, pc}
   177b8:	b	1780c <__assert_fail@plt+0x6508>
   177bc:	subs	r1, r1, #1
   177c0:	bcc	17760 <__assert_fail@plt+0x645c>
   177c4:	ldr	r5, [r3, r1, lsl #2]
   177c8:	cmn	r5, #1
   177cc:	beq	177bc <__assert_fail@plt+0x64b8>
   177d0:	ldrb	r3, [r4, #78]	; 0x4e
   177d4:	cmp	r3, #0
   177d8:	beq	17804 <__assert_fail@plt+0x6500>
   177dc:	mov	r0, r5
   177e0:	bl	111f0 <iswalnum@plt>
   177e4:	sub	r3, r5, #95	; 0x5f
   177e8:	cmp	r0, #0
   177ec:	clz	r3, r3
   177f0:	movne	r0, #1
   177f4:	lsr	r3, r3, #5
   177f8:	moveq	r0, r3
   177fc:	cmp	r0, #0
   17800:	bne	17828 <__assert_fail@plt+0x6524>
   17804:	cmp	r5, #10
   17808:	bne	17820 <__assert_fail@plt+0x651c>
   1780c:	ldrb	r3, [r4, #77]	; 0x4d
   17810:	cmp	r3, #0
   17814:	moveq	r0, #0
   17818:	movne	r0, #2
   1781c:	pop	{r4, r5, r6, pc}
   17820:	mov	r0, #0
   17824:	pop	{r4, r5, r6, pc}
   17828:	mov	r0, #1
   1782c:	pop	{r4, r5, r6, pc}
   17830:	ldr	r3, [r0, #4]
   17834:	push	{r4, r5, r6, lr}
   17838:	mov	r4, r1
   1783c:	mov	r5, r0
   17840:	mov	r6, r2
   17844:	ldrb	r1, [r3, r2]
   17848:	ldrb	r3, [r4, #4]
   1784c:	sub	r3, r3, #1
   17850:	cmp	r3, #6
   17854:	ldrls	pc, [pc, r3, lsl #2]
   17858:	b	1793c <__assert_fail@plt+0x6638>
   1785c:	andeq	r7, r1, r8, ror r8
   17860:	andeq	r7, r1, ip, lsr r9
   17864:	andeq	r7, r1, ip, ror #17
   17868:	andeq	r7, r1, ip, lsr r9
   1786c:	andeq	r7, r1, r8, lsl #18
   17870:	andeq	r7, r1, ip, lsr r9
   17874:	andeq	r7, r1, r0, lsl #18
   17878:	ldrb	r3, [r4]
   1787c:	cmp	r3, r1
   17880:	bne	1793c <__assert_fail@plt+0x6638>
   17884:	ldr	r3, [pc, #192]	; 1794c <__assert_fail@plt+0x6648>
   17888:	ldr	r4, [r4, #4]
   1788c:	and	r3, r3, r4
   17890:	cmp	r3, #0
   17894:	beq	17944 <__assert_fail@plt+0x6640>
   17898:	mov	r1, r6
   1789c:	mov	r0, r5
   178a0:	ldr	r2, [r5, #88]	; 0x58
   178a4:	bl	17750 <__assert_fail@plt+0x644c>
   178a8:	ubfx	r3, r4, #8, #10
   178ac:	tst	r3, #4
   178b0:	beq	178bc <__assert_fail@plt+0x65b8>
   178b4:	ands	r1, r0, #1
   178b8:	beq	1793c <__assert_fail@plt+0x6638>
   178bc:	tst	r3, #8
   178c0:	beq	178cc <__assert_fail@plt+0x65c8>
   178c4:	tst	r0, #1
   178c8:	bne	1793c <__assert_fail@plt+0x6638>
   178cc:	tst	r3, #32
   178d0:	beq	178dc <__assert_fail@plt+0x65d8>
   178d4:	ands	r1, r0, #2
   178d8:	beq	1793c <__assert_fail@plt+0x6638>
   178dc:	tst	r3, #128	; 0x80
   178e0:	beq	17944 <__assert_fail@plt+0x6640>
   178e4:	ubfx	r0, r0, #3, #1
   178e8:	pop	{r4, r5, r6, pc}
   178ec:	ldr	r0, [r4]
   178f0:	bl	13bbc <__assert_fail@plt+0x28b8>
   178f4:	cmp	r0, #0
   178f8:	bne	17884 <__assert_fail@plt+0x6580>
   178fc:	pop	{r4, r5, r6, pc}
   17900:	tst	r1, #128	; 0x80
   17904:	bne	1793c <__assert_fail@plt+0x6638>
   17908:	cmp	r1, #10
   1790c:	bne	17924 <__assert_fail@plt+0x6620>
   17910:	ldr	r3, [r5, #84]	; 0x54
   17914:	ldr	r0, [r3, #128]	; 0x80
   17918:	ands	r0, r0, #64	; 0x40
   1791c:	bne	17884 <__assert_fail@plt+0x6580>
   17920:	pop	{r4, r5, r6, pc}
   17924:	cmp	r1, #0
   17928:	bne	17884 <__assert_fail@plt+0x6580>
   1792c:	ldr	r3, [r5, #84]	; 0x54
   17930:	ldr	r3, [r3, #128]	; 0x80
   17934:	tst	r3, #128	; 0x80
   17938:	beq	17884 <__assert_fail@plt+0x6580>
   1793c:	mov	r0, #0
   17940:	pop	{r4, r5, r6, pc}
   17944:	mov	r0, #1
   17948:	pop	{r4, r5, r6, pc}
   1794c:	andeq	pc, r3, r0, lsl #30
   17950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17954:	mov	r4, r0
   17958:	sub	sp, sp, #28
   1795c:	mov	r6, r1
   17960:	mov	sl, r2
   17964:	ldr	r5, [r0, #24]
   17968:	cmp	r5, r1
   1796c:	suble	r5, r1, r5
   17970:	ble	179d0 <__assert_fail@plt+0x66cc>
   17974:	ldr	r3, [r0, #80]	; 0x50
   17978:	mov	r5, r1
   1797c:	cmp	r3, #1
   17980:	movgt	r3, #0
   17984:	movgt	r2, #0
   17988:	strdgt	r2, [r0, #16]
   1798c:	tst	sl, #1
   17990:	ldr	r3, [r0, #44]	; 0x2c
   17994:	str	r3, [r0, #48]	; 0x30
   17998:	ldr	r3, [r0, #52]	; 0x34
   1799c:	str	r3, [r0, #56]	; 0x38
   179a0:	mov	r3, #0
   179a4:	str	r3, [r0, #24]
   179a8:	str	r3, [r0, #28]
   179ac:	str	r3, [r0, #32]
   179b0:	strb	r3, [r0, #76]	; 0x4c
   179b4:	movne	r3, #4
   179b8:	moveq	r3, #6
   179bc:	str	r3, [r0, #60]	; 0x3c
   179c0:	ldrb	r3, [r0, #75]	; 0x4b
   179c4:	cmp	r3, #0
   179c8:	ldreq	r3, [r0]
   179cc:	streq	r3, [r0, #4]
   179d0:	cmp	r5, #0
   179d4:	beq	17ad4 <__assert_fail@plt+0x67d0>
   179d8:	ldrb	r3, [r4, #76]	; 0x4c
   179dc:	ldr	r2, [r4, #32]
   179e0:	ldr	r8, [r4, #28]
   179e4:	cmp	r2, r5
   179e8:	ble	17c78 <__assert_fail@plt+0x6974>
   179ec:	cmp	r3, #0
   179f0:	beq	17c08 <__assert_fail@plt+0x6904>
   179f4:	ldr	r9, [r4, #12]
   179f8:	mov	r3, r8
   179fc:	mov	r2, #0
   17a00:	add	r7, r2, r3
   17a04:	add	r7, r7, r7, lsr #31
   17a08:	asr	r7, r7, #1
   17a0c:	ldr	r1, [r9, r7, lsl #2]
   17a10:	cmp	r1, r5
   17a14:	bgt	17b20 <__assert_fail@plt+0x681c>
   17a18:	bge	17a30 <__assert_fail@plt+0x672c>
   17a1c:	add	r2, r7, #1
   17a20:	cmp	r2, r3
   17a24:	blt	17a00 <__assert_fail@plt+0x66fc>
   17a28:	cmp	r1, r5
   17a2c:	addlt	r7, r7, #1
   17a30:	mov	r2, sl
   17a34:	sub	r1, r7, #1
   17a38:	mov	r0, r4
   17a3c:	bl	17750 <__assert_fail@plt+0x644c>
   17a40:	sub	r3, r5, r7
   17a44:	cmp	r5, r8
   17a48:	str	r0, [r4, #60]	; 0x3c
   17a4c:	clz	r3, r3
   17a50:	lsr	r3, r3, #5
   17a54:	movge	r3, #0
   17a58:	cmp	r3, #0
   17a5c:	beq	17b44 <__assert_fail@plt+0x6840>
   17a60:	ldr	r3, [r9, r7, lsl #2]
   17a64:	cmp	r3, r5
   17a68:	bne	17b44 <__assert_fail@plt+0x6840>
   17a6c:	ldr	r0, [r4, #8]
   17a70:	lsl	r7, r5, #2
   17a74:	sub	r2, r8, r5
   17a78:	lsl	r2, r2, #2
   17a7c:	add	r1, r0, r7
   17a80:	bl	1104c <memmove@plt>
   17a84:	ldr	r0, [r4, #4]
   17a88:	ldr	r2, [r4, #28]
   17a8c:	add	r1, r0, r5
   17a90:	sub	r2, r2, r5
   17a94:	bl	1104c <memmove@plt>
   17a98:	ldr	r3, [r4, #28]
   17a9c:	sub	r3, r3, r5
   17aa0:	str	r3, [r4, #28]
   17aa4:	ldr	r3, [r4, #32]
   17aa8:	sub	r3, r3, r5
   17aac:	str	r3, [r4, #32]
   17ab0:	mov	r3, #0
   17ab4:	ldr	r2, [r4, #28]
   17ab8:	cmp	r2, r3
   17abc:	bgt	17b28 <__assert_fail@plt+0x6824>
   17ac0:	ldrb	r3, [r4, #75]	; 0x4b
   17ac4:	cmp	r3, #0
   17ac8:	ldreq	r3, [r4, #4]
   17acc:	addeq	r3, r3, r5
   17ad0:	streq	r3, [r4, #4]
   17ad4:	ldr	r3, [r4, #48]	; 0x30
   17ad8:	str	r6, [r4, #24]
   17adc:	ldr	r2, [r4, #56]	; 0x38
   17ae0:	sub	r3, r3, r5
   17ae4:	sub	r5, r2, r5
   17ae8:	ldr	r2, [r4, #80]	; 0x50
   17aec:	str	r3, [r4, #48]	; 0x30
   17af0:	str	r5, [r4, #56]	; 0x38
   17af4:	cmp	r2, #1
   17af8:	ble	17f4c <__assert_fail@plt+0x6c48>
   17afc:	ldrb	r3, [r4, #72]	; 0x48
   17b00:	mov	r0, r4
   17b04:	cmp	r3, #0
   17b08:	beq	17f3c <__assert_fail@plt+0x6c38>
   17b0c:	bl	1488c <__assert_fail@plt+0x3588>
   17b10:	cmp	r0, #0
   17b14:	beq	17f40 <__assert_fail@plt+0x6c3c>
   17b18:	add	sp, sp, #28
   17b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b20:	mov	r3, r7
   17b24:	b	17a20 <__assert_fail@plt+0x671c>
   17b28:	ldr	r1, [r4, #12]
   17b2c:	ldr	r2, [r1, r7]
   17b30:	add	r7, r7, #4
   17b34:	sub	r2, r2, r5
   17b38:	str	r2, [r1, r3, lsl #2]
   17b3c:	add	r3, r3, #1
   17b40:	b	17ab4 <__assert_fail@plt+0x67b0>
   17b44:	ldr	r3, [r4, #44]	; 0x2c
   17b48:	sub	r3, r3, r6
   17b4c:	add	r3, r3, r5
   17b50:	str	r3, [r4, #48]	; 0x30
   17b54:	ldr	r3, [r4, #52]	; 0x34
   17b58:	sub	r3, r3, r6
   17b5c:	add	r3, r3, r5
   17b60:	str	r3, [r4, #56]	; 0x38
   17b64:	mov	r3, #0
   17b68:	strb	r3, [r4, #76]	; 0x4c
   17b6c:	add	r3, r9, r7, lsl #2
   17b70:	cmp	r7, #0
   17b74:	ble	17b84 <__assert_fail@plt+0x6880>
   17b78:	ldr	r2, [r3, #-4]!
   17b7c:	cmp	r2, r5
   17b80:	beq	17bb4 <__assert_fail@plt+0x68b0>
   17b84:	cmp	r7, r8
   17b88:	blt	17bbc <__assert_fail@plt+0x68b8>
   17b8c:	moveq	r3, #0
   17b90:	streq	r3, [r4, #28]
   17b94:	beq	17bac <__assert_fail@plt+0x68a8>
   17b98:	ldr	r3, [r9, r7, lsl #2]
   17b9c:	sub	r3, r3, r5
   17ba0:	cmp	r3, #0
   17ba4:	str	r3, [r4, #28]
   17ba8:	bne	17bfc <__assert_fail@plt+0x68f8>
   17bac:	ldr	r3, [r4, #28]
   17bb0:	b	17c70 <__assert_fail@plt+0x696c>
   17bb4:	sub	r7, r7, #1
   17bb8:	b	17b70 <__assert_fail@plt+0x686c>
   17bbc:	ldr	r3, [r4, #8]
   17bc0:	ldr	r3, [r3, r7, lsl #2]
   17bc4:	cmn	r3, #1
   17bc8:	bne	17b98 <__assert_fail@plt+0x6894>
   17bcc:	add	r7, r7, #1
   17bd0:	b	17b84 <__assert_fail@plt+0x6880>
   17bd4:	ldr	r2, [r4, #8]
   17bd8:	str	r1, [r2, r3, lsl #2]
   17bdc:	add	r3, r3, #1
   17be0:	ldr	r2, [r4, #28]
   17be4:	cmp	r2, r3
   17be8:	bgt	17bd4 <__assert_fail@plt+0x68d0>
   17bec:	mov	r1, #255	; 0xff
   17bf0:	ldr	r0, [r4, #4]
   17bf4:	bl	11208 <memset@plt>
   17bf8:	b	17bac <__assert_fail@plt+0x68a8>
   17bfc:	mov	r3, #0
   17c00:	mvn	r1, #0
   17c04:	b	17be0 <__assert_fail@plt+0x68dc>
   17c08:	mov	r2, sl
   17c0c:	sub	r1, r5, #1
   17c10:	mov	r0, r4
   17c14:	bl	17750 <__assert_fail@plt+0x644c>
   17c18:	ldr	r3, [r4, #80]	; 0x50
   17c1c:	str	r0, [r4, #60]	; 0x3c
   17c20:	cmp	r3, #1
   17c24:	ble	17c3c <__assert_fail@plt+0x6938>
   17c28:	ldr	r0, [r4, #8]
   17c2c:	sub	r2, r8, r5
   17c30:	lsl	r2, r2, #2
   17c34:	add	r1, r0, r5, lsl #2
   17c38:	bl	1104c <memmove@plt>
   17c3c:	ldrb	r3, [r4, #75]	; 0x4b
   17c40:	cmp	r3, #0
   17c44:	beq	17c5c <__assert_fail@plt+0x6958>
   17c48:	ldr	r0, [r4, #4]
   17c4c:	ldr	r2, [r4, #28]
   17c50:	add	r1, r0, r5
   17c54:	sub	r2, r2, r5
   17c58:	bl	1104c <memmove@plt>
   17c5c:	ldr	r3, [r4, #28]
   17c60:	sub	r3, r3, r5
   17c64:	str	r3, [r4, #28]
   17c68:	ldr	r3, [r4, #32]
   17c6c:	sub	r3, r3, r5
   17c70:	str	r3, [r4, #32]
   17c74:	b	17ac0 <__assert_fail@plt+0x67bc>
   17c78:	cmp	r3, #0
   17c7c:	beq	17ca8 <__assert_fail@plt+0x69a4>
   17c80:	ldr	r3, [r4, #44]	; 0x2c
   17c84:	sub	r3, r3, r6
   17c88:	add	r3, r3, r5
   17c8c:	str	r3, [r4, #48]	; 0x30
   17c90:	ldr	r3, [r4, #52]	; 0x34
   17c94:	sub	r3, r3, r6
   17c98:	add	r3, r3, r5
   17c9c:	str	r3, [r4, #56]	; 0x38
   17ca0:	mov	r3, #0
   17ca4:	strb	r3, [r4, #76]	; 0x4c
   17ca8:	mov	r1, #0
   17cac:	ldr	r7, [r4, #24]
   17cb0:	ldr	r3, [r4, #80]	; 0x50
   17cb4:	str	r1, [r4, #28]
   17cb8:	cmp	r3, #1
   17cbc:	ble	17ee4 <__assert_fail@plt+0x6be0>
   17cc0:	ldrb	r2, [r4, #73]	; 0x49
   17cc4:	cmp	r2, r1
   17cc8:	beq	17d98 <__assert_fail@plt+0x6a94>
   17ccc:	ldr	r2, [r4]
   17cd0:	sub	r3, r5, r3
   17cd4:	add	r7, r2, r7
   17cd8:	add	r3, r7, r3
   17cdc:	cmp	r2, r3
   17ce0:	movcs	r3, r2
   17ce4:	sub	r2, r5, #1
   17ce8:	add	r2, r7, r2
   17cec:	cmp	r2, r3
   17cf0:	mov	r9, r2
   17cf4:	bcc	17d98 <__assert_fail@plt+0x6a94>
   17cf8:	mov	r2, r9
   17cfc:	ldrb	r1, [r2], #-1
   17d00:	and	r1, r1, #192	; 0xc0
   17d04:	cmp	r1, #128	; 0x80
   17d08:	beq	17cec <__assert_fail@plt+0x69e8>
   17d0c:	ldr	r2, [r4, #48]	; 0x30
   17d10:	ldr	r0, [r4, #64]	; 0x40
   17d14:	add	r2, r7, r2
   17d18:	sub	r2, r2, r9
   17d1c:	cmp	r0, #0
   17d20:	moveq	ip, r9
   17d24:	beq	17d44 <__assert_fail@plt+0x6a40>
   17d28:	cmp	r2, #6
   17d2c:	add	r1, sp, #8
   17d30:	movlt	r3, r2
   17d34:	movge	r3, #6
   17d38:	subs	r3, r3, #1
   17d3c:	bpl	17df0 <__assert_fail@plt+0x6aec>
   17d40:	mov	ip, r1
   17d44:	mov	r0, #0
   17d48:	mov	r1, #0
   17d4c:	add	r3, sp, #16
   17d50:	add	r7, r7, r5
   17d54:	strd	r0, [sp, #16]
   17d58:	mov	r1, ip
   17d5c:	add	r0, sp, #4
   17d60:	sub	r9, r7, r9
   17d64:	bl	1fa3c <__assert_fail@plt+0xe738>
   17d68:	cmp	r9, r0
   17d6c:	bhi	17d98 <__assert_fail@plt+0x6a94>
   17d70:	cmn	r0, #3
   17d74:	bhi	17d98 <__assert_fail@plt+0x6a94>
   17d78:	ldr	fp, [sp, #4]
   17d7c:	mov	r2, #0
   17d80:	mov	r3, #0
   17d84:	sub	r0, r0, r9
   17d88:	strd	r2, [r4, #16]
   17d8c:	str	r0, [r4, #28]
   17d90:	cmn	fp, #1
   17d94:	bne	17e68 <__assert_fail@plt+0x6b64>
   17d98:	ldr	r7, [r4, #24]
   17d9c:	mvn	fp, #0
   17da0:	add	r9, r4, #16
   17da4:	ldr	r3, [r4, #32]
   17da8:	add	r7, r7, r3
   17dac:	cmp	r6, r7
   17db0:	bgt	17e00 <__assert_fail@plt+0x6afc>
   17db4:	sub	r7, r7, r6
   17db8:	cmn	fp, #1
   17dbc:	str	r7, [r4, #28]
   17dc0:	bne	17e68 <__assert_fail@plt+0x6b64>
   17dc4:	mov	r2, sl
   17dc8:	sub	r1, r8, #1
   17dcc:	mov	r0, r4
   17dd0:	bl	17750 <__assert_fail@plt+0x644c>
   17dd4:	str	r0, [r4, #60]	; 0x3c
   17dd8:	ldr	r3, [r4, #28]
   17ddc:	cmp	r3, #0
   17de0:	beq	17bac <__assert_fail@plt+0x68a8>
   17de4:	mov	r3, #0
   17de8:	mvn	r1, #0
   17dec:	b	17ec8 <__assert_fail@plt+0x6bc4>
   17df0:	ldrb	ip, [r9, r3]
   17df4:	ldrb	ip, [r0, ip]
   17df8:	strb	ip, [r1, r3]
   17dfc:	b	17d38 <__assert_fail@plt+0x6a34>
   17e00:	ldm	r9, {r0, r1}
   17e04:	add	r3, sp, #16
   17e08:	ldr	fp, [r4, #44]	; 0x2c
   17e0c:	stm	r3, {r0, r1}
   17e10:	mov	r3, r9
   17e14:	add	r0, sp, #8
   17e18:	ldr	r1, [r4]
   17e1c:	sub	fp, fp, r7
   17e20:	mov	r2, fp
   17e24:	add	r1, r1, r7
   17e28:	bl	1fa3c <__assert_fail@plt+0xe738>
   17e2c:	sub	r3, r0, #1
   17e30:	cmn	r3, #4
   17e34:	ldrls	fp, [sp, #8]
   17e38:	bls	17e60 <__assert_fail@plt+0x6b5c>
   17e3c:	cmp	fp, #0
   17e40:	cmpne	r0, #0
   17e44:	ldrne	r3, [r4]
   17e48:	moveq	fp, #0
   17e4c:	ldrbne	fp, [r3, r7]
   17e50:	add	r3, sp, #16
   17e54:	ldm	r3, {r0, r1}
   17e58:	stm	r9, {r0, r1}
   17e5c:	mov	r0, #1
   17e60:	add	r7, r7, r0
   17e64:	b	17dac <__assert_fail@plt+0x6aa8>
   17e68:	ldrb	r3, [r4, #78]	; 0x4e
   17e6c:	cmp	r3, #0
   17e70:	beq	17e98 <__assert_fail@plt+0x6b94>
   17e74:	mov	r0, fp
   17e78:	bl	111f0 <iswalnum@plt>
   17e7c:	subs	r3, fp, #95	; 0x5f
   17e80:	movne	r3, #1
   17e84:	cmp	r0, #0
   17e88:	movne	r3, #0
   17e8c:	cmp	r3, #0
   17e90:	moveq	r3, #1
   17e94:	beq	17eb4 <__assert_fail@plt+0x6bb0>
   17e98:	cmp	fp, #10
   17e9c:	movne	r3, #0
   17ea0:	bne	17eb4 <__assert_fail@plt+0x6bb0>
   17ea4:	ldrb	r3, [r4, #77]	; 0x4d
   17ea8:	cmp	r3, #0
   17eac:	moveq	r3, #0
   17eb0:	movne	r3, #2
   17eb4:	str	r3, [r4, #60]	; 0x3c
   17eb8:	b	17dd8 <__assert_fail@plt+0x6ad4>
   17ebc:	ldr	r2, [r4, #8]
   17ec0:	str	r1, [r2, r3, lsl #2]
   17ec4:	add	r3, r3, #1
   17ec8:	ldr	r2, [r4, #28]
   17ecc:	cmp	r2, r3
   17ed0:	bgt	17ebc <__assert_fail@plt+0x6bb8>
   17ed4:	ldrb	r3, [r4, #75]	; 0x4b
   17ed8:	cmp	r3, #0
   17edc:	beq	17bac <__assert_fail@plt+0x68a8>
   17ee0:	b	17bec <__assert_fail@plt+0x68e8>
   17ee4:	ldr	r3, [r4]
   17ee8:	ldr	r0, [r4, #68]	; 0x44
   17eec:	add	r3, r3, r5
   17ef0:	add	r7, r3, r7
   17ef4:	ldr	r3, [r4, #64]	; 0x40
   17ef8:	ldrb	r2, [r7, #-1]
   17efc:	str	r1, [r4, #32]
   17f00:	cmp	r3, #0
   17f04:	ldrbne	r2, [r3, r2]
   17f08:	mov	r1, r2
   17f0c:	bl	13bbc <__assert_fail@plt+0x28b8>
   17f10:	cmp	r0, #0
   17f14:	movne	r0, #1
   17f18:	bne	17f34 <__assert_fail@plt+0x6c30>
   17f1c:	cmp	r2, #10
   17f20:	bne	17f34 <__assert_fail@plt+0x6c30>
   17f24:	ldrb	r3, [r4, #77]	; 0x4d
   17f28:	cmp	r3, #0
   17f2c:	moveq	r0, #0
   17f30:	movne	r0, #2
   17f34:	str	r0, [r4, #60]	; 0x3c
   17f38:	b	17ac0 <__assert_fail@plt+0x67bc>
   17f3c:	bl	14738 <__assert_fail@plt+0x3434>
   17f40:	mov	r0, #0
   17f44:	str	r0, [r4, #40]	; 0x28
   17f48:	b	17b18 <__assert_fail@plt+0x6814>
   17f4c:	ldrb	r2, [r4, #75]	; 0x4b
   17f50:	cmp	r2, #0
   17f54:	streq	r3, [r4, #28]
   17f58:	beq	17f40 <__assert_fail@plt+0x6c3c>
   17f5c:	ldrb	r3, [r4, #72]	; 0x48
   17f60:	cmp	r3, #0
   17f64:	beq	17f74 <__assert_fail@plt+0x6c70>
   17f68:	mov	r0, r4
   17f6c:	bl	14d5c <__assert_fail@plt+0x3a58>
   17f70:	b	17f40 <__assert_fail@plt+0x6c3c>
   17f74:	ldr	r3, [r4, #64]	; 0x40
   17f78:	cmp	r3, #0
   17f7c:	beq	17f40 <__assert_fail@plt+0x6c3c>
   17f80:	mov	r0, r4
   17f84:	bl	13c60 <__assert_fail@plt+0x295c>
   17f88:	b	17f40 <__assert_fail@plt+0x6c3c>
   17f8c:	push	{r4, r5, r6, r7, r8, lr}
   17f90:	mov	r5, r1
   17f94:	mov	r1, r2
   17f98:	mov	r4, r0
   17f9c:	ldr	r2, [r0, #88]	; 0x58
   17fa0:	bl	17750 <__assert_fail@plt+0x644c>
   17fa4:	ldr	lr, [r5, #8]
   17fa8:	mov	ip, #0
   17fac:	and	r6, r0, #8
   17fb0:	and	r7, r0, #2
   17fb4:	and	r1, r0, #1
   17fb8:	cmp	lr, ip
   17fbc:	bgt	17fc8 <__assert_fail@plt+0x6cc4>
   17fc0:	mov	r0, #0
   17fc4:	pop	{r4, r5, r6, r7, r8, pc}
   17fc8:	ldr	r3, [r5, #12]
   17fcc:	ldr	r0, [r3, ip, lsl #2]
   17fd0:	ldr	r3, [r4, #84]	; 0x54
   17fd4:	ldr	r2, [r3]
   17fd8:	add	r2, r2, r0, lsl #3
   17fdc:	ldr	r3, [r2, #4]
   17fe0:	ldrb	r2, [r2, #4]
   17fe4:	ubfx	r3, r3, #8, #10
   17fe8:	cmp	r2, #2
   17fec:	bne	18038 <__assert_fail@plt+0x6d34>
   17ff0:	cmp	r3, #0
   17ff4:	popeq	{r4, r5, r6, r7, r8, pc}
   17ff8:	tst	r3, #4
   17ffc:	beq	18008 <__assert_fail@plt+0x6d04>
   18000:	cmp	r1, #0
   18004:	beq	18038 <__assert_fail@plt+0x6d34>
   18008:	tst	r3, #8
   1800c:	beq	18018 <__assert_fail@plt+0x6d14>
   18010:	cmp	r1, #0
   18014:	bne	18038 <__assert_fail@plt+0x6d34>
   18018:	tst	r3, #32
   1801c:	beq	18028 <__assert_fail@plt+0x6d24>
   18020:	cmp	r7, #0
   18024:	beq	18038 <__assert_fail@plt+0x6d34>
   18028:	tst	r3, #128	; 0x80
   1802c:	popeq	{r4, r5, r6, r7, r8, pc}
   18030:	cmp	r6, #0
   18034:	popne	{r4, r5, r6, r7, r8, pc}
   18038:	add	ip, ip, #1
   1803c:	b	17fb8 <__assert_fail@plt+0x6cb4>
   18040:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18044:	ldr	r8, [r1, #40]	; 0x28
   18048:	ldr	r3, [r1, #56]	; 0x38
   1804c:	cmp	r3, r8
   18050:	movle	r3, #2
   18054:	strble	r3, [r0, #4]
   18058:	movle	r0, #0
   1805c:	ble	18230 <__assert_fail@plt+0x6f2c>
   18060:	ldrb	r3, [r0, #6]
   18064:	ldr	sl, [r1, #4]
   18068:	bic	r3, r3, #96	; 0x60
   1806c:	ldrb	r6, [sl, r8]
   18070:	strb	r3, [r0, #6]
   18074:	ldr	r3, [r1, #80]	; 0x50
   18078:	strb	r6, [r0]
   1807c:	cmp	r3, #1
   18080:	ble	180c0 <__assert_fail@plt+0x6dbc>
   18084:	ldr	ip, [r1, #28]
   18088:	cmp	r8, ip
   1808c:	beq	180c0 <__assert_fail@plt+0x6dbc>
   18090:	ldr	ip, [r1, #8]
   18094:	ldr	ip, [ip, r8, lsl #2]
   18098:	cmn	ip, #1
   1809c:	bne	180c0 <__assert_fail@plt+0x6dbc>
   180a0:	ldr	r3, [r0, #4]
   180a4:	bic	r3, r3, #2097152	; 0x200000
   180a8:	bic	r3, r3, #255	; 0xff
   180ac:	orr	r3, r3, #2097152	; 0x200000
   180b0:	orr	r3, r3, #1
   180b4:	str	r3, [r0, #4]
   180b8:	mov	r0, #1
   180bc:	b	18230 <__assert_fail@plt+0x6f2c>
   180c0:	cmp	r6, #92	; 0x5c
   180c4:	mov	r4, r2
   180c8:	mov	r7, r1
   180cc:	mov	r5, r0
   180d0:	bne	18408 <__assert_fail@plt+0x7104>
   180d4:	ldr	r2, [r7, #48]	; 0x30
   180d8:	add	r1, r8, #1
   180dc:	cmp	r1, r2
   180e0:	movge	r3, #36	; 0x24
   180e4:	bge	18534 <__assert_fail@plt+0x7230>
   180e8:	ldrb	r2, [r7, #75]	; 0x4b
   180ec:	cmp	r2, #0
   180f0:	bne	180fc <__assert_fail@plt+0x6df8>
   180f4:	ldrb	r6, [sl, r1]
   180f8:	b	1816c <__assert_fail@plt+0x6e68>
   180fc:	cmp	r3, #1
   18100:	ble	18138 <__assert_fail@plt+0x6e34>
   18104:	ldr	r2, [r7, #8]
   18108:	lsl	r0, r1, #2
   1810c:	ldr	ip, [r2, r1, lsl #2]
   18110:	cmn	ip, #1
   18114:	beq	180f4 <__assert_fail@plt+0x6df0>
   18118:	ldr	ip, [r7, #28]
   1811c:	add	r8, r8, #2
   18120:	cmp	ip, r8
   18124:	beq	18138 <__assert_fail@plt+0x6e34>
   18128:	add	r2, r2, r0
   1812c:	ldr	r2, [r2, #4]
   18130:	cmn	r2, #1
   18134:	beq	180f4 <__assert_fail@plt+0x6df0>
   18138:	ldrb	r0, [r7, #76]	; 0x4c
   1813c:	ldr	lr, [r7, #24]
   18140:	cmp	r0, #0
   18144:	ldrne	r2, [r7, #12]
   18148:	moveq	ip, r1
   1814c:	ldrne	ip, [r2, r1, lsl #2]
   18150:	cmp	r0, #0
   18154:	ldr	r2, [r7]
   18158:	add	r2, r2, ip
   1815c:	ldrb	r6, [r2, lr]
   18160:	beq	1816c <__assert_fail@plt+0x6e68>
   18164:	tst	r6, #128	; 0x80
   18168:	bne	180f4 <__assert_fail@plt+0x6df0>
   1816c:	mov	r2, #1
   18170:	ldrb	r8, [r5, #6]
   18174:	cmp	r3, r2
   18178:	strb	r6, [r5]
   1817c:	strb	r2, [r5, #4]
   18180:	ble	181e4 <__assert_fail@plt+0x6ee0>
   18184:	mov	r0, r7
   18188:	bl	13c44 <__assert_fail@plt+0x2940>
   1818c:	mov	r7, r0
   18190:	bl	111f0 <iswalnum@plt>
   18194:	adds	r0, r0, #0
   18198:	movne	r0, #1
   1819c:	cmp	r7, #95	; 0x5f
   181a0:	orreq	r0, r0, #1
   181a4:	bfi	r8, r0, #6, #1
   181a8:	cmp	r6, #66	; 0x42
   181ac:	strb	r8, [r5, #6]
   181b0:	beq	18354 <__assert_fail@plt+0x7050>
   181b4:	bhi	1826c <__assert_fail@plt+0x6f68>
   181b8:	cmp	r6, #57	; 0x39
   181bc:	bhi	18238 <__assert_fail@plt+0x6f34>
   181c0:	cmp	r6, #49	; 0x31
   181c4:	bcs	18320 <__assert_fail@plt+0x701c>
   181c8:	cmp	r6, #40	; 0x28
   181cc:	beq	183bc <__assert_fail@plt+0x70b8>
   181d0:	bhi	18208 <__assert_fail@plt+0x6f04>
   181d4:	cmp	r6, #39	; 0x27
   181d8:	beq	183a4 <__assert_fail@plt+0x70a0>
   181dc:	mov	r0, #2
   181e0:	b	18230 <__assert_fail@plt+0x6f2c>
   181e4:	bl	111b4 <__ctype_b_loc@plt>
   181e8:	ldr	r2, [r0]
   181ec:	lsl	r3, r6, #1
   181f0:	ldrh	r3, [r2, r3]
   181f4:	ubfx	r3, r3, #3, #1
   181f8:	cmp	r6, #95	; 0x5f
   181fc:	orreq	r3, r3, #1
   18200:	bfi	r8, r3, #6, #1
   18204:	b	181a8 <__assert_fail@plt+0x6ea4>
   18208:	cmp	r6, #41	; 0x29
   1820c:	beq	183cc <__assert_fail@plt+0x70c8>
   18210:	cmp	r6, #43	; 0x2b
   18214:	bne	181dc <__assert_fail@plt+0x6ed8>
   18218:	movw	r0, #1026	; 0x402
   1821c:	and	r0, r4, r0
   18220:	cmp	r0, #2
   18224:	moveq	r3, #18
   18228:	bne	181dc <__assert_fail@plt+0x6ed8>
   1822c:	strb	r3, [r5, #4]
   18230:	add	sp, sp, #12
   18234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18238:	cmp	r6, #62	; 0x3e
   1823c:	beq	1833c <__assert_fail@plt+0x7038>
   18240:	cmp	r6, #63	; 0x3f
   18244:	beq	183dc <__assert_fail@plt+0x70d8>
   18248:	cmp	r6, #60	; 0x3c
   1824c:	bne	181dc <__assert_fail@plt+0x6ed8>
   18250:	tst	r4, #524288	; 0x80000
   18254:	moveq	r3, #12
   18258:	strbeq	r3, [r5, #4]
   1825c:	moveq	r3, #6
   18260:	bne	181dc <__assert_fail@plt+0x6ed8>
   18264:	str	r3, [r5]
   18268:	b	181dc <__assert_fail@plt+0x6ed8>
   1826c:	cmp	r6, #115	; 0x73
   18270:	beq	1837c <__assert_fail@plt+0x7078>
   18274:	bhi	182c4 <__assert_fail@plt+0x6fc0>
   18278:	cmp	r6, #87	; 0x57
   1827c:	beq	1836c <__assert_fail@plt+0x7068>
   18280:	bhi	1829c <__assert_fail@plt+0x6f98>
   18284:	cmp	r6, #83	; 0x53
   18288:	bne	181dc <__assert_fail@plt+0x6ed8>
   1828c:	tst	r4, #524288	; 0x80000
   18290:	moveq	r3, #35	; 0x23
   18294:	beq	18318 <__assert_fail@plt+0x7014>
   18298:	b	181dc <__assert_fail@plt+0x6ed8>
   1829c:	cmp	r6, #96	; 0x60
   182a0:	beq	1838c <__assert_fail@plt+0x7088>
   182a4:	cmp	r6, #98	; 0x62
   182a8:	bne	181dc <__assert_fail@plt+0x6ed8>
   182ac:	tst	r4, #524288	; 0x80000
   182b0:	moveq	r3, #12
   182b4:	strbeq	r3, [r5, #4]
   182b8:	moveq	r3, #256	; 0x100
   182bc:	beq	18264 <__assert_fail@plt+0x6f60>
   182c0:	b	181dc <__assert_fail@plt+0x6ed8>
   182c4:	cmp	r6, #123	; 0x7b
   182c8:	beq	183f4 <__assert_fail@plt+0x70f0>
   182cc:	bhi	182e8 <__assert_fail@plt+0x6fe4>
   182d0:	cmp	r6, #119	; 0x77
   182d4:	bne	181dc <__assert_fail@plt+0x6ed8>
   182d8:	tst	r4, #524288	; 0x80000
   182dc:	moveq	r3, #32
   182e0:	beq	18318 <__assert_fail@plt+0x7014>
   182e4:	b	181dc <__assert_fail@plt+0x6ed8>
   182e8:	cmp	r6, #124	; 0x7c
   182ec:	beq	1830c <__assert_fail@plt+0x7008>
   182f0:	cmp	r6, #125	; 0x7d
   182f4:	bne	181dc <__assert_fail@plt+0x6ed8>
   182f8:	and	r4, r4, #4608	; 0x1200
   182fc:	cmp	r4, #512	; 0x200
   18300:	bne	181dc <__assert_fail@plt+0x6ed8>
   18304:	mov	r3, #24
   18308:	b	18318 <__assert_fail@plt+0x7014>
   1830c:	tst	r4, #33792	; 0x8400
   18310:	moveq	r3, #10
   18314:	bne	181dc <__assert_fail@plt+0x6ed8>
   18318:	strb	r3, [r5, #4]
   1831c:	b	181dc <__assert_fail@plt+0x6ed8>
   18320:	tst	r4, #16384	; 0x4000
   18324:	bne	181dc <__assert_fail@plt+0x6ed8>
   18328:	mov	r3, #4
   1832c:	sub	r6, r6, #49	; 0x31
   18330:	str	r6, [r5]
   18334:	strb	r3, [r5, #4]
   18338:	b	181dc <__assert_fail@plt+0x6ed8>
   1833c:	tst	r4, #524288	; 0x80000
   18340:	moveq	r3, #12
   18344:	strbeq	r3, [r5, #4]
   18348:	moveq	r3, #9
   1834c:	beq	18264 <__assert_fail@plt+0x6f60>
   18350:	b	181dc <__assert_fail@plt+0x6ed8>
   18354:	tst	r4, #524288	; 0x80000
   18358:	moveq	r3, #12
   1835c:	strbeq	r3, [r5, #4]
   18360:	moveq	r3, #512	; 0x200
   18364:	beq	18264 <__assert_fail@plt+0x6f60>
   18368:	b	181dc <__assert_fail@plt+0x6ed8>
   1836c:	tst	r4, #524288	; 0x80000
   18370:	moveq	r3, #33	; 0x21
   18374:	beq	18318 <__assert_fail@plt+0x7014>
   18378:	b	181dc <__assert_fail@plt+0x6ed8>
   1837c:	tst	r4, #524288	; 0x80000
   18380:	moveq	r3, #34	; 0x22
   18384:	beq	18318 <__assert_fail@plt+0x7014>
   18388:	b	181dc <__assert_fail@plt+0x6ed8>
   1838c:	tst	r4, #524288	; 0x80000
   18390:	moveq	r3, #12
   18394:	strbeq	r3, [r5, #4]
   18398:	moveq	r3, #64	; 0x40
   1839c:	beq	18264 <__assert_fail@plt+0x6f60>
   183a0:	b	181dc <__assert_fail@plt+0x6ed8>
   183a4:	tst	r4, #524288	; 0x80000
   183a8:	bne	181dc <__assert_fail@plt+0x6ed8>
   183ac:	mov	r3, #12
   183b0:	strb	r3, [r5, #4]
   183b4:	mov	r3, #128	; 0x80
   183b8:	b	18264 <__assert_fail@plt+0x6f60>
   183bc:	tst	r4, #8192	; 0x2000
   183c0:	moveq	r3, #8
   183c4:	beq	18318 <__assert_fail@plt+0x7014>
   183c8:	b	181dc <__assert_fail@plt+0x6ed8>
   183cc:	tst	r4, #8192	; 0x2000
   183d0:	moveq	r3, #9
   183d4:	beq	18318 <__assert_fail@plt+0x7014>
   183d8:	b	181dc <__assert_fail@plt+0x6ed8>
   183dc:	movw	r0, #1026	; 0x402
   183e0:	and	r0, r4, r0
   183e4:	cmp	r0, #2
   183e8:	bne	181dc <__assert_fail@plt+0x6ed8>
   183ec:	mov	r3, #19
   183f0:	b	1822c <__assert_fail@plt+0x6f28>
   183f4:	and	r4, r4, #4608	; 0x1200
   183f8:	cmp	r4, #512	; 0x200
   183fc:	moveq	r3, #23
   18400:	bne	181dc <__assert_fail@plt+0x6ed8>
   18404:	b	18318 <__assert_fail@plt+0x7014>
   18408:	mov	r2, #1
   1840c:	ldrb	r9, [r0, #6]
   18410:	cmp	r3, r2
   18414:	strb	r2, [r0, #4]
   18418:	ble	184c8 <__assert_fail@plt+0x71c4>
   1841c:	mov	r1, r8
   18420:	mov	r0, r7
   18424:	bl	13c44 <__assert_fail@plt+0x2940>
   18428:	mov	fp, r0
   1842c:	bl	111f0 <iswalnum@plt>
   18430:	adds	r0, r0, #0
   18434:	movne	r0, #1
   18438:	cmp	fp, #95	; 0x5f
   1843c:	orreq	r0, r0, #1
   18440:	bfi	r9, r0, #6, #1
   18444:	cmp	r6, #46	; 0x2e
   18448:	strb	r9, [r5, #6]
   1844c:	beq	185d8 <__assert_fail@plt+0x72d4>
   18450:	bhi	18514 <__assert_fail@plt+0x7210>
   18454:	cmp	r6, #40	; 0x28
   18458:	beq	185b8 <__assert_fail@plt+0x72b4>
   1845c:	bhi	184ec <__assert_fail@plt+0x71e8>
   18460:	cmp	r6, #10
   18464:	beq	18568 <__assert_fail@plt+0x7264>
   18468:	cmp	r6, #36	; 0x24
   1846c:	bne	180b8 <__assert_fail@plt+0x6db4>
   18470:	tst	r4, #8
   18474:	bne	184b8 <__assert_fail@plt+0x71b4>
   18478:	ldr	r3, [r7, #48]	; 0x30
   1847c:	add	r8, r8, #1
   18480:	cmp	r8, r3
   18484:	beq	184b8 <__assert_fail@plt+0x71b4>
   18488:	mov	r2, r4
   1848c:	mov	r1, r7
   18490:	str	r8, [r7, #40]	; 0x28
   18494:	mov	r0, sp
   18498:	bl	18040 <__assert_fail@plt+0x6d3c>
   1849c:	ldr	r3, [r7, #40]	; 0x28
   184a0:	sub	r3, r3, #1
   184a4:	str	r3, [r7, #40]	; 0x28
   184a8:	ldrb	r3, [sp, #4]
   184ac:	sub	r3, r3, #9
   184b0:	cmp	r3, #1
   184b4:	bhi	180b8 <__assert_fail@plt+0x6db4>
   184b8:	mov	r3, #12
   184bc:	strb	r3, [r5, #4]
   184c0:	mov	r3, #32
   184c4:	b	1862c <__assert_fail@plt+0x7328>
   184c8:	bl	111b4 <__ctype_b_loc@plt>
   184cc:	ldr	r2, [r0]
   184d0:	lsl	r3, r6, #1
   184d4:	ldrh	r3, [r2, r3]
   184d8:	ubfx	r3, r3, #3, #1
   184dc:	cmp	r6, #95	; 0x5f
   184e0:	orreq	r3, r3, #1
   184e4:	bfi	r9, r3, #6, #1
   184e8:	b	18444 <__assert_fail@plt+0x7140>
   184ec:	cmp	r6, #42	; 0x2a
   184f0:	beq	18588 <__assert_fail@plt+0x7284>
   184f4:	bcc	185c8 <__assert_fail@plt+0x72c4>
   184f8:	cmp	r6, #43	; 0x2b
   184fc:	bne	180b8 <__assert_fail@plt+0x6db4>
   18500:	movw	r3, #1026	; 0x402
   18504:	tst	r4, r3
   18508:	moveq	r3, #18
   1850c:	beq	18534 <__assert_fail@plt+0x7230>
   18510:	b	180b8 <__assert_fail@plt+0x6db4>
   18514:	cmp	r6, #94	; 0x5e
   18518:	beq	185e0 <__assert_fail@plt+0x72dc>
   1851c:	bhi	1853c <__assert_fail@plt+0x7238>
   18520:	cmp	r6, #63	; 0x3f
   18524:	beq	18590 <__assert_fail@plt+0x728c>
   18528:	cmp	r6, #91	; 0x5b
   1852c:	moveq	r3, #20
   18530:	bne	180b8 <__assert_fail@plt+0x6db4>
   18534:	strb	r3, [r5, #4]
   18538:	b	180b8 <__assert_fail@plt+0x6db4>
   1853c:	cmp	r6, #124	; 0x7c
   18540:	beq	18578 <__assert_fail@plt+0x7274>
   18544:	cmp	r6, #125	; 0x7d
   18548:	beq	185a4 <__assert_fail@plt+0x72a0>
   1854c:	cmp	r6, #123	; 0x7b
   18550:	bne	180b8 <__assert_fail@plt+0x6db4>
   18554:	and	r4, r4, #4608	; 0x1200
   18558:	cmp	r4, #4608	; 0x1200
   1855c:	moveq	r3, #23
   18560:	bne	180b8 <__assert_fail@plt+0x6db4>
   18564:	b	18534 <__assert_fail@plt+0x7230>
   18568:	tst	r4, #2048	; 0x800
   1856c:	beq	180b8 <__assert_fail@plt+0x6db4>
   18570:	mov	r3, #10
   18574:	b	18534 <__assert_fail@plt+0x7230>
   18578:	and	r4, r4, #33792	; 0x8400
   1857c:	cmp	r4, #32768	; 0x8000
   18580:	bne	180b8 <__assert_fail@plt+0x6db4>
   18584:	b	18570 <__assert_fail@plt+0x726c>
   18588:	mov	r3, #11
   1858c:	b	18534 <__assert_fail@plt+0x7230>
   18590:	movw	r3, #1026	; 0x402
   18594:	tst	r4, r3
   18598:	moveq	r3, #19
   1859c:	beq	18534 <__assert_fail@plt+0x7230>
   185a0:	b	180b8 <__assert_fail@plt+0x6db4>
   185a4:	and	r4, r4, #4608	; 0x1200
   185a8:	cmp	r4, #4608	; 0x1200
   185ac:	moveq	r3, #24
   185b0:	bne	180b8 <__assert_fail@plt+0x6db4>
   185b4:	b	18534 <__assert_fail@plt+0x7230>
   185b8:	tst	r4, #8192	; 0x2000
   185bc:	movne	r3, #8
   185c0:	bne	18534 <__assert_fail@plt+0x7230>
   185c4:	b	180b8 <__assert_fail@plt+0x6db4>
   185c8:	tst	r4, #8192	; 0x2000
   185cc:	movne	r3, #9
   185d0:	bne	18534 <__assert_fail@plt+0x7230>
   185d4:	b	180b8 <__assert_fail@plt+0x6db4>
   185d8:	mov	r3, #5
   185dc:	b	18534 <__assert_fail@plt+0x7230>
   185e0:	ldr	r3, [pc, #76]	; 18634 <__assert_fail@plt+0x7330>
   185e4:	tst	r4, r3
   185e8:	moveq	r3, #1
   185ec:	movne	r3, #0
   185f0:	cmp	r8, #0
   185f4:	moveq	r3, #0
   185f8:	cmp	r3, #0
   185fc:	beq	18620 <__assert_fail@plt+0x731c>
   18600:	add	r8, sl, r8
   18604:	eor	r4, r4, #2048	; 0x800
   18608:	ldrb	r2, [r8, #-1]
   1860c:	ubfx	r4, r4, #11, #1
   18610:	cmp	r2, #10
   18614:	orrne	r4, r4, #1
   18618:	cmp	r4, #0
   1861c:	bne	180b8 <__assert_fail@plt+0x6db4>
   18620:	mov	r3, #12
   18624:	strb	r3, [r5, #4]
   18628:	mov	r3, #16
   1862c:	str	r3, [r5]
   18630:	b	180b8 <__assert_fail@plt+0x6db4>
   18634:	addeq	r0, r0, r8
   18638:	push	{r4, lr}
   1863c:	mov	r4, r1
   18640:	bl	18040 <__assert_fail@plt+0x6d3c>
   18644:	ldr	r3, [r4, #40]	; 0x28
   18648:	add	r0, r3, r0
   1864c:	str	r0, [r4, #40]	; 0x28
   18650:	pop	{r4, pc}
   18654:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18658:	mov	r8, r0
   1865c:	mov	r5, r1
   18660:	mov	r9, r2
   18664:	mvn	r4, #0
   18668:	mov	r7, #10
   1866c:	movw	r6, #32816	; 0x8030
   18670:	mov	r2, r9
   18674:	mov	r1, r8
   18678:	mov	r0, r5
   1867c:	bl	18638 <__assert_fail@plt+0x7334>
   18680:	ldrb	r2, [r5, #4]
   18684:	ldrb	r3, [r5]
   18688:	cmp	r2, #2
   1868c:	beq	186f0 <__assert_fail@plt+0x73ec>
   18690:	cmp	r3, #44	; 0x2c
   18694:	cmpne	r2, #24
   18698:	beq	186f4 <__assert_fail@plt+0x73f0>
   1869c:	cmp	r2, #1
   186a0:	bne	186e8 <__assert_fail@plt+0x73e4>
   186a4:	sub	r1, r3, #48	; 0x30
   186a8:	uxtb	r0, r1
   186ac:	cmp	r0, #9
   186b0:	movhi	r2, #0
   186b4:	movls	r2, #1
   186b8:	cmn	r4, #2
   186bc:	moveq	r2, #0
   186c0:	cmp	r2, #0
   186c4:	beq	186e8 <__assert_fail@plt+0x73e4>
   186c8:	cmn	r4, #1
   186cc:	moveq	r4, r1
   186d0:	beq	18670 <__assert_fail@plt+0x736c>
   186d4:	mla	r4, r7, r4, r3
   186d8:	cmp	r4, r6
   186dc:	movge	r4, r6
   186e0:	sub	r4, r4, #48	; 0x30
   186e4:	b	18670 <__assert_fail@plt+0x736c>
   186e8:	mvn	r4, #1
   186ec:	b	18670 <__assert_fail@plt+0x736c>
   186f0:	mvn	r4, #1
   186f4:	mov	r0, r4
   186f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   186fc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18700:	mov	r6, r0
   18704:	mov	r4, r1
   18708:	mov	r0, r1
   1870c:	mov	r7, r2
   18710:	mov	r8, r3
   18714:	ldr	r5, [r1, #40]	; 0x28
   18718:	mov	r1, r5
   1871c:	bl	15e80 <__assert_fail@plt+0x4b7c>
   18720:	cmp	r0, #1
   18724:	ble	18754 <__assert_fail@plt+0x7450>
   18728:	mov	r3, #1
   1872c:	mov	r2, r0
   18730:	mov	r0, r4
   18734:	str	r3, [r6]
   18738:	bl	13c44 <__assert_fail@plt+0x2940>
   1873c:	add	r5, r5, r2
   18740:	str	r0, [r6, #4]
   18744:	mov	r0, #0
   18748:	str	r5, [r4, #40]	; 0x28
   1874c:	add	sp, sp, #8
   18750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18754:	ldrb	r2, [r7, #4]
   18758:	add	r5, r5, r8
   1875c:	str	r5, [r4, #40]	; 0x28
   18760:	and	r3, r2, #251	; 0xfb
   18764:	cmp	r2, #28
   18768:	cmpne	r3, #26
   1876c:	bne	188b4 <__assert_fail@plt+0x75b0>
   18770:	ldr	r3, [r4, #56]	; 0x38
   18774:	cmp	r5, r3
   18778:	ldrblt	sl, [r7]
   1877c:	movlt	r9, #0
   18780:	blt	18824 <__assert_fail@plt+0x7520>
   18784:	mov	r0, #7
   18788:	b	1874c <__assert_fail@plt+0x7448>
   1878c:	ldrb	r3, [r4, #76]	; 0x4c
   18790:	cmp	r3, #0
   18794:	beq	18850 <__assert_fail@plt+0x754c>
   18798:	ldr	r3, [r4, #28]
   1879c:	cmp	r5, r3
   187a0:	beq	187b4 <__assert_fail@plt+0x74b0>
   187a4:	ldr	r3, [r4, #8]
   187a8:	ldr	r3, [r3, r5, lsl #2]
   187ac:	cmn	r3, #1
   187b0:	beq	18840 <__assert_fail@plt+0x753c>
   187b4:	ldr	r3, [r4]
   187b8:	ldr	r2, [r4, #12]
   187bc:	ldr	r1, [r2, r5, lsl #2]
   187c0:	ldr	r2, [r4, #24]
   187c4:	add	r3, r3, r1
   187c8:	ldrb	r8, [r3, r2]
   187cc:	tst	r8, #128	; 0x80
   187d0:	bne	18840 <__assert_fail@plt+0x753c>
   187d4:	mov	r1, r5
   187d8:	mov	r0, r4
   187dc:	bl	15e80 <__assert_fail@plt+0x4b7c>
   187e0:	add	r0, r5, r0
   187e4:	str	r0, [r4, #40]	; 0x28
   187e8:	ldr	r3, [r4, #40]	; 0x28
   187ec:	ldr	r2, [r4, #56]	; 0x38
   187f0:	cmp	r2, r3
   187f4:	ble	18784 <__assert_fail@plt+0x7480>
   187f8:	cmp	sl, r8
   187fc:	ldr	r2, [r6, #4]
   18800:	bne	18814 <__assert_fail@plt+0x7510>
   18804:	ldr	r1, [r4, #4]
   18808:	ldrb	r1, [r1, r3]
   1880c:	cmp	r1, #93	; 0x5d
   18810:	beq	1886c <__assert_fail@plt+0x7568>
   18814:	strb	r8, [r2, r9]
   18818:	add	r9, r9, #1
   1881c:	cmp	r9, #32
   18820:	beq	18784 <__assert_fail@plt+0x7480>
   18824:	ldrb	r3, [r7, #4]
   18828:	ldr	r5, [r4, #40]	; 0x28
   1882c:	cmp	r3, #30
   18830:	bne	18840 <__assert_fail@plt+0x753c>
   18834:	ldrb	r3, [r4, #75]	; 0x4b
   18838:	cmp	r3, #0
   1883c:	bne	1878c <__assert_fail@plt+0x7488>
   18840:	add	r2, r5, #1
   18844:	ldr	r3, [r4, #4]
   18848:	str	r2, [r4, #40]	; 0x28
   1884c:	b	18864 <__assert_fail@plt+0x7560>
   18850:	ldr	r0, [r4]
   18854:	add	r2, r5, #1
   18858:	ldr	r3, [r4, #24]
   1885c:	str	r2, [r4, #40]	; 0x28
   18860:	add	r5, r0, r5
   18864:	ldrb	r8, [r3, r5]
   18868:	b	187e8 <__assert_fail@plt+0x74e4>
   1886c:	add	r3, r3, #1
   18870:	mov	r0, #0
   18874:	str	r3, [r4, #40]	; 0x28
   18878:	strb	r0, [r2, r9]
   1887c:	ldrb	r3, [r7, #4]
   18880:	cmp	r3, #28
   18884:	beq	188a4 <__assert_fail@plt+0x75a0>
   18888:	cmp	r3, #30
   1888c:	beq	188ac <__assert_fail@plt+0x75a8>
   18890:	cmp	r3, #26
   18894:	moveq	r3, #3
   18898:	bne	1874c <__assert_fail@plt+0x7448>
   1889c:	str	r3, [r6]
   188a0:	b	1874c <__assert_fail@plt+0x7448>
   188a4:	mov	r3, #2
   188a8:	b	1889c <__assert_fail@plt+0x7598>
   188ac:	mov	r3, #4
   188b0:	b	1889c <__assert_fail@plt+0x7598>
   188b4:	ldrb	r3, [sp, #44]	; 0x2c
   188b8:	cmp	r2, #22
   188bc:	orrne	r3, r3, #1
   188c0:	cmp	r3, #0
   188c4:	bne	188e8 <__assert_fail@plt+0x75e4>
   188c8:	mov	r1, r4
   188cc:	mov	r0, sp
   188d0:	ldr	r2, [sp, #40]	; 0x28
   188d4:	bl	13e14 <__assert_fail@plt+0x2b10>
   188d8:	ldrb	r3, [sp, #4]
   188dc:	cmp	r3, #21
   188e0:	movne	r0, #11
   188e4:	bne	1874c <__assert_fail@plt+0x7448>
   188e8:	ldrb	r3, [r7]
   188ec:	mov	r0, #0
   188f0:	str	r0, [r6]
   188f4:	strb	r3, [r6, #4]
   188f8:	b	1874c <__assert_fail@plt+0x7448>
   188fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18900:	mov	fp, #0
   18904:	sub	sp, sp, #14400	; 0x3840
   18908:	sub	sp, sp, #4
   1890c:	mov	sl, r0
   18910:	add	r0, sp, #64	; 0x40
   18914:	mov	r9, r1
   18918:	str	fp, [r1, #44]	; 0x2c
   1891c:	str	fp, [r1, #48]	; 0x30
   18920:	bl	1472c <__assert_fail@plt+0x3428>
   18924:	str	fp, [sp, #4]
   18928:	ldr	r2, [sp, #4]
   1892c:	ldr	r3, [r9, #8]
   18930:	cmp	r2, r3
   18934:	blt	18968 <__assert_fail@plt+0x7664>
   18938:	cmp	fp, #0
   1893c:	bgt	18d88 <__assert_fail@plt+0x7a84>
   18940:	bne	18d70 <__assert_fail@plt+0x7a6c>
   18944:	mov	r1, #256	; 0x100
   18948:	mov	r0, #4
   1894c:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   18950:	str	r0, [r9, #44]	; 0x2c
   18954:	adds	r0, r0, #0
   18958:	movne	r0, #1
   1895c:	add	sp, sp, #14400	; 0x3840
   18960:	add	sp, sp, #4
   18964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18968:	ldr	r3, [sp, #4]
   1896c:	ldr	r2, [sp, #4]
   18970:	lsl	r3, r3, #2
   18974:	str	r3, [sp, #12]
   18978:	ldr	r3, [r9, #12]
   1897c:	ldr	r2, [r3, r2, lsl #2]
   18980:	ldr	r3, [sl]
   18984:	add	r1, r3, r2, lsl #3
   18988:	ldrb	r5, [r1, #4]
   1898c:	str	r1, [sp, #8]
   18990:	ldr	r4, [r1, #4]
   18994:	cmp	r5, #1
   18998:	ubfx	r4, r4, #8, #10
   1899c:	bne	189f4 <__assert_fail@plt+0x76f0>
   189a0:	ldrb	r1, [r3, r2, lsl #3]
   189a4:	add	r0, sp, #64	; 0x40
   189a8:	bl	13b88 <__assert_fail@plt+0x2884>
   189ac:	cmp	r4, #0
   189b0:	beq	18a94 <__assert_fail@plt+0x7790>
   189b4:	tst	r4, #32
   189b8:	beq	189e0 <__assert_fail@plt+0x76dc>
   189bc:	ldr	r6, [sp, #64]	; 0x40
   189c0:	add	r0, sp, #64	; 0x40
   189c4:	bl	1472c <__assert_fail@plt+0x3428>
   189c8:	and	r6, r6, #1024	; 0x400
   189cc:	cmp	r6, #0
   189d0:	beq	18b10 <__assert_fail@plt+0x780c>
   189d4:	ldr	r3, [sp, #64]	; 0x40
   189d8:	orr	r3, r3, #1024	; 0x400
   189dc:	str	r3, [sp, #64]	; 0x40
   189e0:	tst	r4, #128	; 0x80
   189e4:	beq	18a84 <__assert_fail@plt+0x7780>
   189e8:	add	r0, sp, #64	; 0x40
   189ec:	bl	1472c <__assert_fail@plt+0x3428>
   189f0:	b	18b10 <__assert_fail@plt+0x780c>
   189f4:	cmp	r5, #3
   189f8:	bne	18a0c <__assert_fail@plt+0x7708>
   189fc:	add	r0, sp, #64	; 0x40
   18a00:	ldr	r1, [r3, r2, lsl #3]
   18a04:	bl	13bf4 <__assert_fail@plt+0x28f0>
   18a08:	b	189ac <__assert_fail@plt+0x76a8>
   18a0c:	cmp	r5, #5
   18a10:	bne	18a68 <__assert_fail@plt+0x7764>
   18a14:	ldr	r3, [sl, #92]	; 0x5c
   18a18:	cmp	r3, #1
   18a1c:	ble	18a54 <__assert_fail@plt+0x7750>
   18a20:	add	r0, sp, #64	; 0x40
   18a24:	ldr	r1, [sl, #60]	; 0x3c
   18a28:	bl	13bf4 <__assert_fail@plt+0x28f0>
   18a2c:	ldr	r2, [sl, #128]	; 0x80
   18a30:	tst	r2, #64	; 0x40
   18a34:	ldreq	r3, [sp, #64]	; 0x40
   18a38:	biceq	r3, r3, #1024	; 0x400
   18a3c:	streq	r3, [sp, #64]	; 0x40
   18a40:	tst	r2, #128	; 0x80
   18a44:	ldrne	r3, [sp, #64]	; 0x40
   18a48:	bicne	r3, r3, #1
   18a4c:	strne	r3, [sp, #64]	; 0x40
   18a50:	b	189ac <__assert_fail@plt+0x76a8>
   18a54:	mov	r2, #32
   18a58:	mvn	r1, #0
   18a5c:	add	r0, sp, #64	; 0x40
   18a60:	bl	11208 <memset@plt>
   18a64:	b	18a2c <__assert_fail@plt+0x7728>
   18a68:	cmp	r5, #7
   18a6c:	bne	18b10 <__assert_fail@plt+0x780c>
   18a70:	mvn	r2, #0
   18a74:	mvn	r3, #0
   18a78:	strd	r2, [sp, #64]	; 0x40
   18a7c:	strd	r2, [sp, #72]	; 0x48
   18a80:	b	18a2c <__assert_fail@plt+0x7728>
   18a84:	tst	r4, #4
   18a88:	bne	18aa4 <__assert_fail@plt+0x77a0>
   18a8c:	tst	r4, #8
   18a90:	bne	18b48 <__assert_fail@plt+0x7844>
   18a94:	add	r4, sp, #6208	; 0x1840
   18a98:	mov	r6, #0
   18a9c:	add	r4, r4, #28
   18aa0:	b	18d04 <__assert_fail@plt+0x7a00>
   18aa4:	cmp	r5, #1
   18aa8:	bne	18abc <__assert_fail@plt+0x77b8>
   18aac:	ldr	r3, [sp, #8]
   18ab0:	ldrb	r3, [r3, #6]
   18ab4:	tst	r3, #64	; 0x40
   18ab8:	beq	189e8 <__assert_fail@plt+0x76e4>
   18abc:	ldr	r3, [sl, #92]	; 0x5c
   18ac0:	add	r2, sl, #96	; 0x60
   18ac4:	cmp	r3, #1
   18ac8:	add	r3, sp, #64	; 0x40
   18acc:	ble	18b20 <__assert_fail@plt+0x781c>
   18ad0:	ldr	ip, [sl, #60]	; 0x3c
   18ad4:	add	lr, sl, #128	; 0x80
   18ad8:	mov	r0, #0
   18adc:	sub	ip, ip, #4
   18ae0:	ldr	r1, [ip, #4]!
   18ae4:	ldr	r6, [r2], #4
   18ae8:	ldr	r7, [r3]
   18aec:	mvn	r1, r1
   18af0:	orr	r1, r1, r6
   18af4:	cmp	lr, r2
   18af8:	and	r1, r1, r7
   18afc:	orr	r0, r0, r1
   18b00:	str	r1, [r3], #4
   18b04:	bne	18ae0 <__assert_fail@plt+0x77dc>
   18b08:	cmp	r0, #0
   18b0c:	bne	18a8c <__assert_fail@plt+0x7788>
   18b10:	ldr	r3, [sp, #4]
   18b14:	add	r3, r3, #1
   18b18:	str	r3, [sp, #4]
   18b1c:	b	18928 <__assert_fail@plt+0x7624>
   18b20:	add	ip, sl, #128	; 0x80
   18b24:	mov	r0, #0
   18b28:	ldr	lr, [r2], #4
   18b2c:	ldr	r1, [r3]
   18b30:	cmp	r2, ip
   18b34:	and	r1, r1, lr
   18b38:	orr	r0, r0, r1
   18b3c:	str	r1, [r3], #4
   18b40:	bne	18b28 <__assert_fail@plt+0x7824>
   18b44:	b	18b08 <__assert_fail@plt+0x7804>
   18b48:	cmp	r5, #1
   18b4c:	bne	18b60 <__assert_fail@plt+0x785c>
   18b50:	ldr	r3, [sp, #8]
   18b54:	ldrb	r3, [r3, #6]
   18b58:	tst	r3, #64	; 0x40
   18b5c:	bne	189e8 <__assert_fail@plt+0x76e4>
   18b60:	ldr	r3, [sl, #92]	; 0x5c
   18b64:	add	r2, sl, #96	; 0x60
   18b68:	cmp	r3, #1
   18b6c:	add	r3, sp, #64	; 0x40
   18b70:	ble	18bb4 <__assert_fail@plt+0x78b0>
   18b74:	ldr	r0, [sl, #60]	; 0x3c
   18b78:	add	lr, sl, #128	; 0x80
   18b7c:	mov	r1, #0
   18b80:	sub	r0, r0, #4
   18b84:	ldr	ip, [r2], #4
   18b88:	ldr	r4, [r0, #4]!
   18b8c:	ldr	r6, [r3]
   18b90:	cmp	lr, r2
   18b94:	and	ip, ip, r4
   18b98:	bic	ip, r6, ip
   18b9c:	orr	r1, r1, ip
   18ba0:	str	ip, [r3], #4
   18ba4:	bne	18b84 <__assert_fail@plt+0x7880>
   18ba8:	cmp	r1, #0
   18bac:	beq	18b10 <__assert_fail@plt+0x780c>
   18bb0:	b	18a94 <__assert_fail@plt+0x7790>
   18bb4:	add	ip, sl, #128	; 0x80
   18bb8:	mov	r1, #0
   18bbc:	ldr	lr, [r2], #4
   18bc0:	ldr	r0, [r3]
   18bc4:	cmp	r2, ip
   18bc8:	bic	r0, r0, lr
   18bcc:	orr	r1, r1, r0
   18bd0:	str	r0, [r3], #4
   18bd4:	bne	18bbc <__assert_fail@plt+0x78b8>
   18bd8:	b	18ba8 <__assert_fail@plt+0x78a4>
   18bdc:	cmp	r5, #1
   18be0:	sub	r0, r4, #28
   18be4:	bne	18bfc <__assert_fail@plt+0x78f8>
   18be8:	ldr	r3, [sp, #8]
   18bec:	ldrb	r1, [r3]
   18bf0:	bl	13bbc <__assert_fail@plt+0x28b8>
   18bf4:	cmp	r0, #0
   18bf8:	beq	18cfc <__assert_fail@plt+0x79f8>
   18bfc:	add	r1, sp, #64	; 0x40
   18c00:	sub	r2, r4, #32
   18c04:	add	lr, sp, #1088	; 0x440
   18c08:	mov	ip, r2
   18c0c:	mov	r7, r1
   18c10:	mov	r0, #0
   18c14:	ldr	r8, [ip, #4]!
   18c18:	ldr	r3, [r7], #4
   18c1c:	cmp	r4, ip
   18c20:	and	r3, r3, r8
   18c24:	orr	r0, r0, r3
   18c28:	str	r3, [lr], #4
   18c2c:	bne	18c14 <__assert_fail@plt+0x7910>
   18c30:	cmp	r0, #0
   18c34:	beq	18cfc <__assert_fail@plt+0x79f8>
   18c38:	mov	r7, #0
   18c3c:	add	r8, sp, #2112	; 0x840
   18c40:	mov	r0, r7
   18c44:	ldr	ip, [r2, #4]!
   18c48:	ldr	r3, [r1]
   18c4c:	cmp	r4, r2
   18c50:	bic	lr, ip, r3
   18c54:	bic	r3, r3, ip
   18c58:	orr	r0, r0, lr
   18c5c:	orr	r7, r7, r3
   18c60:	str	lr, [r8], #4
   18c64:	str	r3, [r1], #4
   18c68:	bne	18c44 <__assert_fail@plt+0x7940>
   18c6c:	mov	r3, #12
   18c70:	add	r2, sp, #3136	; 0xc40
   18c74:	cmp	r0, #0
   18c78:	mla	r8, r3, r6, r2
   18c7c:	beq	18cd8 <__assert_fail@plt+0x79d4>
   18c80:	add	r2, sp, #14400	; 0x3840
   18c84:	add	lr, sp, #2112	; 0x840
   18c88:	add	ip, r2, fp, lsl #5
   18c8c:	ldm	lr!, {r0, r1, r2, r3}
   18c90:	sub	ip, ip, #8192	; 0x2000
   18c94:	stmia	ip!, {r0, r1, r2, r3}
   18c98:	ldm	lr, {r0, r1, r2, r3}
   18c9c:	add	lr, sp, #1088	; 0x440
   18ca0:	stm	ip, {r0, r1, r2, r3}
   18ca4:	sub	ip, r4, #28
   18ca8:	ldm	lr!, {r0, r1, r2, r3}
   18cac:	stmia	ip!, {r0, r1, r2, r3}
   18cb0:	ldm	lr, {r0, r1, r2, r3}
   18cb4:	stm	ip, {r0, r1, r2, r3}
   18cb8:	mov	r3, #12
   18cbc:	add	r2, sp, #3136	; 0xc40
   18cc0:	mov	r1, r8
   18cc4:	mla	r0, r3, fp, r2
   18cc8:	bl	1650c <__assert_fail@plt+0x5208>
   18ccc:	cmp	r0, #0
   18cd0:	bne	18d5c <__assert_fail@plt+0x7a58>
   18cd4:	add	fp, fp, #1
   18cd8:	ldr	r3, [r9, #12]
   18cdc:	mov	r0, r8
   18ce0:	ldr	r2, [sp, #12]
   18ce4:	ldr	r1, [r3, r2]
   18ce8:	bl	1702c <__assert_fail@plt+0x5d28>
   18cec:	cmp	r0, #0
   18cf0:	beq	18d5c <__assert_fail@plt+0x7a58>
   18cf4:	cmp	r7, #0
   18cf8:	beq	18d0c <__assert_fail@plt+0x7a08>
   18cfc:	add	r6, r6, #1
   18d00:	add	r4, r4, #32
   18d04:	cmp	r6, fp
   18d08:	blt	18bdc <__assert_fail@plt+0x78d8>
   18d0c:	cmp	r6, fp
   18d10:	bne	18b10 <__assert_fail@plt+0x780c>
   18d14:	add	r3, sp, #14400	; 0x3840
   18d18:	add	lr, sp, #64	; 0x40
   18d1c:	add	ip, r3, fp, lsl #5
   18d20:	ldm	lr!, {r0, r1, r2, r3}
   18d24:	sub	ip, ip, #8192	; 0x2000
   18d28:	stmia	ip!, {r0, r1, r2, r3}
   18d2c:	ldm	lr, {r0, r1, r2, r3}
   18d30:	stm	ip, {r0, r1, r2, r3}
   18d34:	ldr	r3, [r9, #12]
   18d38:	ldr	r2, [sp, #12]
   18d3c:	ldr	r1, [r3, r2]
   18d40:	mov	r3, #12
   18d44:	add	r2, sp, #3136	; 0xc40
   18d48:	mla	r0, r3, fp, r2
   18d4c:	bl	146c0 <__assert_fail@plt+0x33bc>
   18d50:	cmp	r0, #0
   18d54:	addeq	fp, fp, #1
   18d58:	beq	189e8 <__assert_fail@plt+0x76e4>
   18d5c:	add	r5, sp, #3136	; 0xc40
   18d60:	mov	r4, #0
   18d64:	cmp	r4, fp
   18d68:	add	r5, r5, #12
   18d6c:	blt	18d78 <__assert_fail@plt+0x7a74>
   18d70:	mov	r0, #0
   18d74:	b	1895c <__assert_fail@plt+0x7658>
   18d78:	ldr	r0, [r5, #-4]
   18d7c:	add	r4, r4, #1
   18d80:	bl	1f990 <__assert_fail@plt+0xe68c>
   18d84:	b	18d64 <__assert_fail@plt+0x7a60>
   18d88:	add	r1, fp, #1
   18d8c:	add	r0, sp, #20
   18d90:	bl	14700 <__assert_fail@plt+0x33fc>
   18d94:	add	r4, sp, #2112	; 0x840
   18d98:	cmp	r0, #0
   18d9c:	str	r0, [r4, #-2096]	; 0xfffff7d0
   18da0:	mov	r6, r0
   18da4:	beq	18dd4 <__assert_fail@plt+0x7ad0>
   18da8:	ldr	r0, [sp, #28]
   18dac:	add	r5, sp, #3136	; 0xc40
   18db0:	mov	r4, #0
   18db4:	bl	1f990 <__assert_fail@plt+0xe68c>
   18db8:	add	r4, r4, #1
   18dbc:	ldr	r0, [r5, #8]
   18dc0:	add	r5, r5, #12
   18dc4:	bl	1f990 <__assert_fail@plt+0xe68c>
   18dc8:	cmp	r4, fp
   18dcc:	bne	18db8 <__assert_fail@plt+0x7ab4>
   18dd0:	b	18d70 <__assert_fail@plt+0x7a6c>
   18dd4:	add	r0, sp, #32
   18dd8:	mov	r5, r6
   18ddc:	bl	1472c <__assert_fail@plt+0x3428>
   18de0:	add	r3, sp, #3136	; 0xc40
   18de4:	str	r6, [sp, #4]
   18de8:	mov	r8, r3
   18dec:	str	r3, [sp, #8]
   18df0:	mov	r3, #0
   18df4:	mov	r7, r3
   18df8:	str	r3, [r4, #-2088]	; 0xfffff7d8
   18dfc:	ldr	r3, [r8, #4]
   18e00:	cmp	r3, r7
   18e04:	bgt	18e9c <__assert_fail@plt+0x7b98>
   18e08:	mov	r3, #0
   18e0c:	add	r2, sp, #20
   18e10:	mov	r1, sl
   18e14:	add	r0, sp, #16
   18e18:	bl	166c4 <__assert_fail@plt+0x53c0>
   18e1c:	add	r3, sp, #64	; 0x40
   18e20:	cmp	r0, #0
   18e24:	mov	r7, r0
   18e28:	str	r0, [r3, r5, lsl #2]
   18e2c:	bne	18e3c <__assert_fail@plt+0x7b38>
   18e30:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   18e34:	cmp	r3, #0
   18e38:	bne	18da8 <__assert_fail@plt+0x7aa4>
   18e3c:	ldrsb	r3, [r7, #52]	; 0x34
   18e40:	cmp	r3, #0
   18e44:	addge	r3, sp, #1088	; 0x440
   18e48:	strge	r7, [r4, r5, lsl #2]
   18e4c:	strge	r7, [r3, r5, lsl #2]
   18e50:	bge	18f14 <__assert_fail@plt+0x7c10>
   18e54:	mov	r3, #1
   18e58:	add	r2, sp, #20
   18e5c:	mov	r1, sl
   18e60:	add	r0, sp, #16
   18e64:	bl	166c4 <__assert_fail@plt+0x53c0>
   18e68:	add	r3, sp, #1088	; 0x440
   18e6c:	cmp	r0, #0
   18e70:	str	r0, [r3, r5, lsl #2]
   18e74:	bne	18ee0 <__assert_fail@plt+0x7bdc>
   18e78:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   18e7c:	cmp	r3, #0
   18e80:	bne	18da8 <__assert_fail@plt+0x7aa4>
   18e84:	ldr	r3, [sl, #92]	; 0x5c
   18e88:	cmp	r3, #2
   18e8c:	ldr	r3, [sp, #4]
   18e90:	movge	r3, #1
   18e94:	str	r3, [sp, #4]
   18e98:	b	18ee8 <__assert_fail@plt+0x7be4>
   18e9c:	ldr	r3, [r8, #8]
   18ea0:	ldr	r2, [r3, r7, lsl #2]
   18ea4:	ldr	r3, [sl, #12]
   18ea8:	ldr	r3, [r3, r2, lsl #2]
   18eac:	cmn	r3, #1
   18eb0:	bne	18ebc <__assert_fail@plt+0x7bb8>
   18eb4:	add	r7, r7, #1
   18eb8:	b	18dfc <__assert_fail@plt+0x7af8>
   18ebc:	ldr	r1, [sl, #24]
   18ec0:	mov	r2, #12
   18ec4:	add	r0, sp, #20
   18ec8:	mla	r1, r2, r3, r1
   18ecc:	bl	17404 <__assert_fail@plt+0x6100>
   18ed0:	cmp	r0, #0
   18ed4:	str	r0, [r4, #-2096]	; 0xfffff7d0
   18ed8:	beq	18eb4 <__assert_fail@plt+0x7bb0>
   18edc:	b	18da8 <__assert_fail@plt+0x7aa4>
   18ee0:	cmp	r7, r0
   18ee4:	bne	18e84 <__assert_fail@plt+0x7b80>
   18ee8:	mov	r3, #2
   18eec:	add	r2, sp, #20
   18ef0:	mov	r1, sl
   18ef4:	add	r0, sp, #16
   18ef8:	bl	166c4 <__assert_fail@plt+0x53c0>
   18efc:	cmp	r0, #0
   18f00:	str	r0, [r4, r5, lsl #2]
   18f04:	bne	18f14 <__assert_fail@plt+0x7c10>
   18f08:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   18f0c:	cmp	r3, #0
   18f10:	bne	18da8 <__assert_fail@plt+0x7aa4>
   18f14:	add	r7, sp, #6208	; 0x1840
   18f18:	add	r0, sp, #32
   18f1c:	add	r1, r7, r5, lsl #5
   18f20:	add	r5, r5, #1
   18f24:	add	r8, r8, #12
   18f28:	bl	13bf4 <__assert_fail@plt+0x28f0>
   18f2c:	cmp	r5, fp
   18f30:	bne	18df0 <__assert_fail@plt+0x7aec>
   18f34:	ldr	r3, [sp, #4]
   18f38:	cmp	r3, #0
   18f3c:	bne	19050 <__assert_fail@plt+0x7d4c>
   18f40:	mov	r1, #256	; 0x100
   18f44:	mov	r0, #4
   18f48:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   18f4c:	cmp	r0, #0
   18f50:	mov	r2, r0
   18f54:	str	r0, [r9, #44]	; 0x2c
   18f58:	beq	18da8 <__assert_fail@plt+0x7aa4>
   18f5c:	ldr	r0, [sp, #4]
   18f60:	add	r1, sp, #32
   18f64:	mov	r5, r7
   18f68:	add	r9, sl, #96	; 0x60
   18f6c:	ldr	ip, [r1], #4
   18f70:	add	r4, r2, r0, lsl #7
   18f74:	mov	lr, #1
   18f78:	cmp	ip, #0
   18f7c:	bne	19000 <__assert_fail@plt+0x7cfc>
   18f80:	add	r0, r0, #1
   18f84:	add	r5, r5, #4
   18f88:	cmp	r0, #8
   18f8c:	bne	18f6c <__assert_fail@plt+0x7c68>
   18f90:	add	r5, sp, #2112	; 0x840
   18f94:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   18f98:	tst	r3, #1024	; 0x400
   18f9c:	beq	18fcc <__assert_fail@plt+0x7cc8>
   18fa0:	mov	r4, #0
   18fa4:	mov	r1, #10
   18fa8:	mov	r0, r7
   18fac:	bl	13bbc <__assert_fail@plt+0x28b8>
   18fb0:	cmp	r0, #0
   18fb4:	beq	190e8 <__assert_fail@plt+0x7de4>
   18fb8:	ldr	r1, [sp, #4]
   18fbc:	ldr	r3, [r5, r4, lsl #2]
   18fc0:	cmp	r1, #0
   18fc4:	strne	r3, [r2, #1064]	; 0x428
   18fc8:	str	r3, [r2, #40]	; 0x28
   18fcc:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   18fd0:	bl	1f990 <__assert_fail@plt+0xe68c>
   18fd4:	ldr	r3, [sp, #8]
   18fd8:	add	r6, r6, #1
   18fdc:	ldr	r0, [r3, #8]
   18fe0:	bl	1f990 <__assert_fail@plt+0xe68c>
   18fe4:	ldr	r3, [sp, #8]
   18fe8:	cmp	r6, fp
   18fec:	add	r3, r3, #12
   18ff0:	str	r3, [sp, #8]
   18ff4:	bne	18fd4 <__assert_fail@plt+0x7cd0>
   18ff8:	mov	r0, #1
   18ffc:	b	1895c <__assert_fail@plt+0x7658>
   19000:	tst	ip, #1
   19004:	beq	19040 <__assert_fail@plt+0x7d3c>
   19008:	mov	r3, #0
   1900c:	b	19014 <__assert_fail@plt+0x7d10>
   19010:	add	r3, r3, #1
   19014:	ldr	sl, [r5, r3, lsl #5]
   19018:	tst	lr, sl
   1901c:	beq	19010 <__assert_fail@plt+0x7d0c>
   19020:	ldr	sl, [r9, r0, lsl #2]
   19024:	lsl	r3, r3, #2
   19028:	add	r8, sp, #2112	; 0x840
   1902c:	add	r3, r8, r3
   19030:	tst	lr, sl
   19034:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   19038:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1903c:	str	r3, [r4]
   19040:	lsl	lr, lr, #1
   19044:	add	r4, r4, #4
   19048:	lsr	ip, ip, #1
   1904c:	b	18f78 <__assert_fail@plt+0x7c74>
   19050:	mov	r1, #512	; 0x200
   19054:	mov	r0, #4
   19058:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1905c:	cmp	r0, #0
   19060:	mov	r2, r0
   19064:	str	r0, [r9, #48]	; 0x30
   19068:	beq	18da8 <__assert_fail@plt+0x7aa4>
   1906c:	add	r3, sp, #32
   19070:	add	r9, r0, #1024	; 0x400
   19074:	mov	r4, r7
   19078:	ldr	ip, [r3], #4
   1907c:	mov	lr, r0
   19080:	mov	r5, #1
   19084:	cmp	ip, #0
   19088:	bne	190a0 <__assert_fail@plt+0x7d9c>
   1908c:	add	r0, r0, #128	; 0x80
   19090:	add	r4, r4, #4
   19094:	cmp	r0, r9
   19098:	bne	19078 <__assert_fail@plt+0x7d74>
   1909c:	b	18f90 <__assert_fail@plt+0x7c8c>
   190a0:	tst	ip, #1
   190a4:	beq	190d8 <__assert_fail@plt+0x7dd4>
   190a8:	mov	r1, #0
   190ac:	b	190b4 <__assert_fail@plt+0x7db0>
   190b0:	add	r1, r1, #1
   190b4:	ldr	sl, [r4, r1, lsl #5]
   190b8:	tst	r5, sl
   190bc:	beq	190b0 <__assert_fail@plt+0x7dac>
   190c0:	add	r8, sp, #2112	; 0x840
   190c4:	add	r1, r8, r1, lsl #2
   190c8:	ldr	sl, [r1, #-2048]	; 0xfffff800
   190cc:	str	sl, [lr]
   190d0:	ldr	r1, [r1, #-1024]	; 0xfffffc00
   190d4:	str	r1, [lr, #1024]	; 0x400
   190d8:	lsl	r5, r5, #1
   190dc:	add	lr, lr, #4
   190e0:	lsr	ip, ip, #1
   190e4:	b	19084 <__assert_fail@plt+0x7d80>
   190e8:	add	r4, r4, #1
   190ec:	add	r7, r7, #32
   190f0:	cmp	r4, fp
   190f4:	bne	18fa4 <__assert_fail@plt+0x7ca0>
   190f8:	b	18fcc <__assert_fail@plt+0x7cc8>
   190fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19100:	sub	sp, sp, #28
   19104:	mov	r8, r0
   19108:	add	r5, sp, #12
   1910c:	mov	r4, r1
   19110:	mov	r0, r5
   19114:	mov	r9, r2
   19118:	ldr	r1, [r1, #4]
   1911c:	mov	sl, r3
   19120:	bl	14700 <__assert_fail@plt+0x33fc>
   19124:	subs	r6, r0, #0
   19128:	moveq	r7, r6
   1912c:	beq	191d0 <__assert_fail@plt+0x7ecc>
   19130:	mov	r0, r6
   19134:	add	sp, sp, #28
   19138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1913c:	ldr	r2, [r0, r7, lsl #2]
   19140:	mov	r3, #12
   19144:	ldr	r1, [r8, #24]
   19148:	mla	r1, r3, r2, r1
   1914c:	mov	r3, #0
   19150:	ldr	lr, [r1, #4]
   19154:	cmp	r3, lr
   19158:	blt	1917c <__assert_fail@plt+0x7e78>
   1915c:	mov	r0, r5
   19160:	bl	17404 <__assert_fail@plt+0x6100>
   19164:	subs	fp, r0, #0
   19168:	beq	191cc <__assert_fail@plt+0x7ec8>
   1916c:	ldr	r0, [sp, #20]
   19170:	mov	r6, fp
   19174:	bl	1f990 <__assert_fail@plt+0xe68c>
   19178:	b	19130 <__assert_fail@plt+0x7e2c>
   1917c:	ldr	r0, [r1, #8]
   19180:	ldr	ip, [r8]
   19184:	ldr	r0, [r0, r3, lsl #2]
   19188:	add	fp, ip, r0, lsl #3
   1918c:	ldrb	fp, [fp, #4]
   19190:	cmp	sl, fp
   19194:	bne	191a4 <__assert_fail@plt+0x7ea0>
   19198:	ldr	ip, [ip, r0, lsl #3]
   1919c:	cmp	r9, ip
   191a0:	beq	191ac <__assert_fail@plt+0x7ea8>
   191a4:	add	r3, r3, #1
   191a8:	b	19154 <__assert_fail@plt+0x7e50>
   191ac:	cmn	r0, #1
   191b0:	beq	1915c <__assert_fail@plt+0x7e58>
   191b4:	mov	r3, r9
   191b8:	mov	r1, r5
   191bc:	str	sl, [sp]
   191c0:	mov	r0, r8
   191c4:	bl	17314 <__assert_fail@plt+0x6010>
   191c8:	b	19164 <__assert_fail@plt+0x7e60>
   191cc:	add	r7, r7, #1
   191d0:	ldr	r3, [r4, #4]
   191d4:	ldr	r0, [r4, #8]
   191d8:	cmp	r3, r7
   191dc:	bgt	1913c <__assert_fail@plt+0x7e38>
   191e0:	bl	1f990 <__assert_fail@plt+0xe68c>
   191e4:	ldm	r5, {r0, r1, r2}
   191e8:	stm	r4, {r0, r1, r2}
   191ec:	b	19130 <__assert_fail@plt+0x7e2c>
   191f0:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191f4:	mov	r3, #0
   191f8:	ldr	r4, [r2, #4]
   191fc:	str	r3, [r0]
   19200:	cmp	r4, r3
   19204:	movne	r7, r4
   19208:	bne	19228 <__assert_fail@plt+0x7f24>
   1920c:	mov	r0, r4
   19210:	add	sp, sp, #4
   19214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19218:	ldr	ip, [r2, #8]
   1921c:	ldr	ip, [ip, r3, lsl #2]
   19220:	add	r3, r3, #1
   19224:	add	r7, r7, ip
   19228:	cmp	r4, r3
   1922c:	bgt	19218 <__assert_fail@plt+0x7f14>
   19230:	ldr	r3, [r1, #68]	; 0x44
   19234:	mov	r5, r2
   19238:	mov	r6, r1
   1923c:	mov	r8, r0
   19240:	mov	r9, #0
   19244:	and	r2, r7, r3
   19248:	mov	r3, #12
   1924c:	mul	r3, r3, r2
   19250:	ldr	r2, [r1, #32]
   19254:	ldr	sl, [r2, r3]
   19258:	add	fp, r2, r3
   1925c:	cmp	sl, r9
   19260:	bgt	192a8 <__assert_fail@plt+0x7fa4>
   19264:	mov	r1, #1
   19268:	mov	r0, #56	; 0x38
   1926c:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   19270:	subs	r4, r0, #0
   19274:	beq	19298 <__assert_fail@plt+0x7f94>
   19278:	add	r9, r4, #4
   1927c:	mov	r1, r5
   19280:	mov	r0, r9
   19284:	bl	1650c <__assert_fail@plt+0x5208>
   19288:	cmp	r0, #0
   1928c:	beq	192d8 <__assert_fail@plt+0x7fd4>
   19290:	mov	r0, r4
   19294:	bl	1f990 <__assert_fail@plt+0xe68c>
   19298:	mov	r3, #12
   1929c:	mov	r4, #0
   192a0:	str	r3, [r8]
   192a4:	b	1920c <__assert_fail@plt+0x7f08>
   192a8:	ldr	r3, [fp, #8]
   192ac:	ldr	r4, [r3, r9, lsl #2]
   192b0:	ldr	r3, [r4]
   192b4:	cmp	r3, r7
   192b8:	bne	192d0 <__assert_fail@plt+0x7fcc>
   192bc:	mov	r1, r5
   192c0:	add	r0, r4, #4
   192c4:	bl	13cb0 <__assert_fail@plt+0x29ac>
   192c8:	cmp	r0, #0
   192cc:	bne	1920c <__assert_fail@plt+0x7f08>
   192d0:	add	r9, r9, #1
   192d4:	b	1925c <__assert_fail@plt+0x7f58>
   192d8:	ldr	r1, [pc, #188]	; 1939c <__assert_fail@plt+0x8098>
   192dc:	str	r9, [r4, #40]	; 0x28
   192e0:	ldr	lr, [r5, #4]
   192e4:	cmp	r0, lr
   192e8:	blt	19310 <__assert_fail@plt+0x800c>
   192ec:	mov	r2, r7
   192f0:	mov	r1, r4
   192f4:	mov	r0, r6
   192f8:	bl	1642c <__assert_fail@plt+0x5128>
   192fc:	cmp	r0, #0
   19300:	beq	1920c <__assert_fail@plt+0x7f08>
   19304:	mov	r0, r4
   19308:	bl	15110 <__assert_fail@plt+0x3e0c>
   1930c:	b	19298 <__assert_fail@plt+0x7f94>
   19310:	ldr	r3, [r5, #8]
   19314:	ldr	r2, [r3, r0, lsl #2]
   19318:	ldr	r3, [r6]
   1931c:	add	r3, r3, r2, lsl #3
   19320:	ldrb	r2, [r3, #4]
   19324:	cmp	r2, #1
   19328:	bne	19338 <__assert_fail@plt+0x8034>
   1932c:	ldr	ip, [r3, #4]
   19330:	tst	r1, ip
   19334:	beq	19394 <__assert_fail@plt+0x8090>
   19338:	ldrb	sl, [r3, #6]
   1933c:	cmp	r2, #2
   19340:	ldrb	ip, [r4, #52]	; 0x34
   19344:	ubfx	sl, sl, #4, #1
   19348:	ubfx	r9, ip, #5, #1
   1934c:	orr	r9, r9, sl
   19350:	bfi	ip, r9, #5, #1
   19354:	uxtbeq	r3, ip
   19358:	orreq	r3, r3, #16
   1935c:	strb	ip, [r4, #52]	; 0x34
   19360:	beq	19390 <__assert_fail@plt+0x808c>
   19364:	cmp	r2, #4
   19368:	ldrbeq	r3, [r4, #52]	; 0x34
   1936c:	orreq	r3, r3, #64	; 0x40
   19370:	beq	19390 <__assert_fail@plt+0x808c>
   19374:	cmp	r2, #12
   19378:	beq	19388 <__assert_fail@plt+0x8084>
   1937c:	ldr	r3, [r3, #4]
   19380:	tst	r1, r3
   19384:	beq	19394 <__assert_fail@plt+0x8090>
   19388:	ldrb	r3, [r4, #52]	; 0x34
   1938c:	orr	r3, r3, #128	; 0x80
   19390:	strb	r3, [r4, #52]	; 0x34
   19394:	add	r0, r0, #1
   19398:	b	192e4 <__assert_fail@plt+0x7fe0>
   1939c:	andeq	pc, r3, r0, lsl #30
   193a0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   193a4:	mov	r7, r0
   193a8:	mov	r5, r1
   193ac:	mov	r8, r2
   193b0:	mov	r6, r3
   193b4:	mov	r4, #0
   193b8:	cmp	r4, r6
   193bc:	blt	193cc <__assert_fail@plt+0x80c8>
   193c0:	mov	r0, #0
   193c4:	add	sp, sp, #16
   193c8:	pop	{r4, r5, r6, r7, r8, pc}
   193cc:	ldr	r1, [r5, r4, lsl #2]
   193d0:	ldr	r2, [r8, r4, lsl #2]
   193d4:	cmp	r1, #0
   193d8:	streq	r2, [r5, r4, lsl #2]
   193dc:	beq	1942c <__assert_fail@plt+0x8128>
   193e0:	cmp	r2, #0
   193e4:	beq	1942c <__assert_fail@plt+0x8128>
   193e8:	add	r2, r2, #4
   193ec:	add	r1, r1, #4
   193f0:	add	r0, sp, #4
   193f4:	bl	16584 <__assert_fail@plt+0x5280>
   193f8:	cmp	r0, #0
   193fc:	str	r0, [sp]
   19400:	bne	193c4 <__assert_fail@plt+0x80c0>
   19404:	add	r2, sp, #4
   19408:	mov	r1, r7
   1940c:	mov	r0, sp
   19410:	bl	191f0 <__assert_fail@plt+0x7eec>
   19414:	str	r0, [r5, r4, lsl #2]
   19418:	ldr	r0, [sp, #12]
   1941c:	bl	1f990 <__assert_fail@plt+0xe68c>
   19420:	ldr	r0, [sp]
   19424:	cmp	r0, #0
   19428:	bne	193c4 <__assert_fail@plt+0x80c0>
   1942c:	add	r4, r4, #1
   19430:	b	193b8 <__assert_fail@plt+0x80b4>
   19434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19438:	sub	sp, sp, #36	; 0x24
   1943c:	mov	r8, r1
   19440:	mov	r1, r2
   19444:	mov	r6, r0
   19448:	mov	r9, r2
   1944c:	str	r3, [sp, #4]
   19450:	bl	14194 <__assert_fail@plt+0x2e90>
   19454:	cmn	r0, #1
   19458:	bne	19468 <__assert_fail@plt+0x8164>
   1945c:	mov	r0, #0
   19460:	add	sp, sp, #36	; 0x24
   19464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19468:	mov	r3, #24
   1946c:	ldr	r7, [r6, #84]	; 0x54
   19470:	mla	r3, r0, r3, r3
   19474:	str	r3, [sp, #8]
   19478:	ldr	r3, [sp, #8]
   1947c:	mov	fp, #12
   19480:	ldr	r4, [r6, #116]	; 0x74
   19484:	add	r4, r4, r3
   19488:	ldr	sl, [r4, #-24]	; 0xffffffe8
   1948c:	mov	r0, r8
   19490:	mov	r1, sl
   19494:	bl	13d28 <__assert_fail@plt+0x2a24>
   19498:	cmp	r0, #0
   1949c:	beq	195e8 <__assert_fail@plt+0x82e4>
   194a0:	ldr	r2, [r4, #-16]
   194a4:	ldr	r5, [r4, #-12]
   194a8:	add	r5, r9, r5
   194ac:	sub	r5, r5, r2
   194b0:	cmp	r9, r5
   194b4:	bne	19540 <__assert_fail@plt+0x823c>
   194b8:	ldr	r2, [r7, #20]
   194bc:	mov	r0, r8
   194c0:	mla	r3, fp, sl, r2
   194c4:	ldr	r3, [r3, #8]
   194c8:	ldr	r5, [r3]
   194cc:	mov	r1, r5
   194d0:	bl	13d28 <__assert_fail@plt+0x2a24>
   194d4:	cmp	r0, #0
   194d8:	bne	195e8 <__assert_fail@plt+0x82e4>
   194dc:	add	r0, sp, #20
   194e0:	bl	146c0 <__assert_fail@plt+0x33bc>
   194e4:	add	r1, sp, #20
   194e8:	str	r0, [sp, #16]
   194ec:	mov	r0, r7
   194f0:	ldr	r2, [sp, #4]
   194f4:	ldr	r3, [sp, #72]	; 0x48
   194f8:	bl	190fc <__assert_fail@plt+0x7df8>
   194fc:	mov	r4, r0
   19500:	add	r1, sp, #20
   19504:	mov	r0, r8
   19508:	bl	17404 <__assert_fail@plt+0x6100>
   1950c:	mov	r5, r0
   19510:	ldr	r0, [sp, #28]
   19514:	bl	1f990 <__assert_fail@plt+0xe68c>
   19518:	ldr	r0, [sp, #16]
   1951c:	orr	r3, r4, r5
   19520:	orrs	r3, r3, r0
   19524:	beq	19478 <__assert_fail@plt+0x8174>
   19528:	cmp	r0, #0
   1952c:	bne	19460 <__assert_fail@plt+0x815c>
   19530:	cmp	r4, #0
   19534:	movne	r0, r4
   19538:	moveq	r0, r5
   1953c:	b	19460 <__assert_fail@plt+0x815c>
   19540:	ldr	r3, [r6, #100]	; 0x64
   19544:	ldr	r2, [r7, #12]
   19548:	ldr	r3, [r3, r5, lsl #2]
   1954c:	ldr	sl, [r2, sl, lsl #2]
   19550:	cmp	r3, #0
   19554:	beq	19614 <__assert_fail@plt+0x8310>
   19558:	add	r3, r3, #4
   1955c:	mov	r1, sl
   19560:	mov	r0, r3
   19564:	str	r3, [sp, #12]
   19568:	bl	13d28 <__assert_fail@plt+0x2a24>
   1956c:	cmp	r0, #0
   19570:	bne	195e8 <__assert_fail@plt+0x82e4>
   19574:	ldr	r3, [sp, #12]
   19578:	add	r0, sp, #20
   1957c:	mov	r1, r3
   19580:	bl	1650c <__assert_fail@plt+0x5208>
   19584:	mov	r1, sl
   19588:	str	r0, [sp, #16]
   1958c:	add	r0, sp, #20
   19590:	bl	1702c <__assert_fail@plt+0x5d28>
   19594:	ldr	r3, [sp, #16]
   19598:	eor	r0, r0, #1
   1959c:	cmp	r3, #0
   195a0:	orrne	r0, r0, #1
   195a4:	tst	r0, #255	; 0xff
   195a8:	bne	195fc <__assert_fail@plt+0x82f8>
   195ac:	ldr	sl, [r6, #100]	; 0x64
   195b0:	add	r2, sp, #20
   195b4:	mov	r1, r7
   195b8:	add	r0, sp, #16
   195bc:	bl	191f0 <__assert_fail@plt+0x7eec>
   195c0:	str	r0, [sl, r5, lsl #2]
   195c4:	ldr	r0, [sp, #28]
   195c8:	bl	1f990 <__assert_fail@plt+0xe68c>
   195cc:	ldr	r3, [r6, #100]	; 0x64
   195d0:	ldr	r3, [r3, r5, lsl #2]
   195d4:	cmp	r3, #0
   195d8:	bne	195e8 <__assert_fail@plt+0x82e4>
   195dc:	ldr	r0, [sp, #16]
   195e0:	cmp	r0, #0
   195e4:	bne	19460 <__assert_fail@plt+0x815c>
   195e8:	add	r4, r4, #24
   195ec:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   195f0:	cmp	r3, #0
   195f4:	bne	19488 <__assert_fail@plt+0x8184>
   195f8:	b	1945c <__assert_fail@plt+0x8158>
   195fc:	ldr	r0, [sp, #28]
   19600:	bl	1f990 <__assert_fail@plt+0xe68c>
   19604:	ldr	r0, [sp, #16]
   19608:	cmp	r0, #0
   1960c:	moveq	r0, #12
   19610:	b	19460 <__assert_fail@plt+0x815c>
   19614:	mov	r1, sl
   19618:	add	r0, sp, #20
   1961c:	bl	146c0 <__assert_fail@plt+0x33bc>
   19620:	cmp	r0, #0
   19624:	str	r0, [sp, #16]
   19628:	beq	195ac <__assert_fail@plt+0x82a8>
   1962c:	b	19460 <__assert_fail@plt+0x815c>
   19630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	mov	r9, r3
   19638:	sub	sp, sp, #84	; 0x54
   1963c:	mov	sl, #0
   19640:	mov	r4, r0
   19644:	mov	r7, r1
   19648:	mov	r6, r2
   1964c:	ldr	r3, [r0, #84]	; 0x54
   19650:	ldr	r5, [r0, #120]	; 0x78
   19654:	ldr	r8, [r1, #4]
   19658:	str	r3, [sp, #12]
   1965c:	ldr	r3, [r3]
   19660:	str	sl, [sp, #48]	; 0x30
   19664:	ldr	r3, [r3, r2, lsl #3]
   19668:	str	r3, [sp, #16]
   1966c:	ldr	r3, [sp, #124]	; 0x7c
   19670:	add	r5, r3, r5
   19674:	cmp	r5, r8
   19678:	blt	196d4 <__assert_fail@plt+0x83d0>
   1967c:	mvn	r3, #-2147483648	; 0x80000000
   19680:	add	r5, r5, #1
   19684:	sub	r3, r3, r8
   19688:	cmp	r3, r5
   1968c:	bge	1969c <__assert_fail@plt+0x8398>
   19690:	mov	r0, #12
   19694:	add	sp, sp, #84	; 0x54
   19698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1969c:	add	fp, r8, r5
   196a0:	cmn	fp, #-1073741823	; 0xc0000001
   196a4:	bhi	19690 <__assert_fail@plt+0x838c>
   196a8:	lsl	r1, fp, #2
   196ac:	ldr	r0, [r7, #8]
   196b0:	bl	1f83c <__assert_fail@plt+0xe538>
   196b4:	cmp	r0, #0
   196b8:	beq	19690 <__assert_fail@plt+0x838c>
   196bc:	lsl	r2, r5, #2
   196c0:	mov	r1, sl
   196c4:	str	fp, [r7, #4]
   196c8:	str	r0, [r7, #8]
   196cc:	add	r0, r0, r8, lsl #2
   196d0:	bl	11208 <memset@plt>
   196d4:	ldr	r5, [r7]
   196d8:	mov	r0, r4
   196dc:	ldr	r3, [r4, #100]	; 0x64
   196e0:	ldr	sl, [r7, #8]
   196e4:	cmp	r5, #0
   196e8:	moveq	r5, r9
   196ec:	ldr	r2, [r4, #88]	; 0x58
   196f0:	str	r3, [sp, #32]
   196f4:	sub	r1, r5, #1
   196f8:	ldr	r3, [r4, #40]	; 0x28
   196fc:	str	r5, [r4, #40]	; 0x28
   19700:	str	sl, [r4, #100]	; 0x64
   19704:	str	r3, [sp, #36]	; 0x24
   19708:	bl	17750 <__assert_fail@plt+0x644c>
   1970c:	cmp	r5, r9
   19710:	mov	r8, r0
   19714:	bne	19790 <__assert_fail@plt+0x848c>
   19718:	mov	r1, r6
   1971c:	add	r0, sp, #56	; 0x38
   19720:	bl	146c0 <__assert_fail@plt+0x33bc>
   19724:	cmp	r0, #0
   19728:	str	r0, [sp, #48]	; 0x30
   1972c:	bne	19694 <__assert_fail@plt+0x8390>
   19730:	add	r1, sp, #56	; 0x38
   19734:	ldr	r0, [sp, #12]
   19738:	ldr	r2, [sp, #16]
   1973c:	ldr	r3, [sp, #128]	; 0x80
   19740:	bl	190fc <__assert_fail@plt+0x7df8>
   19744:	cmp	r0, #0
   19748:	str	r0, [sp, #48]	; 0x30
   1974c:	bne	19880 <__assert_fail@plt+0x857c>
   19750:	ldr	r3, [sp, #60]	; 0x3c
   19754:	cmp	r3, #0
   19758:	bne	19858 <__assert_fail@plt+0x8554>
   1975c:	mov	r3, r8
   19760:	add	r2, sp, #56	; 0x38
   19764:	ldr	r1, [sp, #12]
   19768:	add	r0, sp, #48	; 0x30
   1976c:	bl	166c4 <__assert_fail@plt+0x53c0>
   19770:	subs	r6, r0, #0
   19774:	bne	19784 <__assert_fail@plt+0x8480>
   19778:	ldr	r3, [sp, #48]	; 0x30
   1977c:	cmp	r3, #0
   19780:	bne	19880 <__assert_fail@plt+0x857c>
   19784:	ldr	r3, [r4, #100]	; 0x64
   19788:	str	r6, [r3, r5, lsl #2]
   1978c:	b	197cc <__assert_fail@plt+0x84c8>
   19790:	ldr	r6, [sl, r5, lsl #2]
   19794:	cmp	r6, #0
   19798:	beq	1983c <__assert_fail@plt+0x8538>
   1979c:	ldrb	r3, [r6, #52]	; 0x34
   197a0:	tst	r3, #64	; 0x40
   197a4:	beq	1983c <__assert_fail@plt+0x8538>
   197a8:	add	r1, r6, #4
   197ac:	add	r0, sp, #56	; 0x38
   197b0:	bl	1650c <__assert_fail@plt+0x5208>
   197b4:	cmp	r0, #0
   197b8:	str	r0, [sp, #48]	; 0x30
   197bc:	bne	19694 <__assert_fail@plt+0x8390>
   197c0:	ldrb	r3, [r6, #52]	; 0x34
   197c4:	tst	r3, #64	; 0x40
   197c8:	bne	19750 <__assert_fail@plt+0x844c>
   197cc:	mov	fp, #0
   197d0:	mov	r8, fp
   197d4:	ldr	r3, [sp, #124]	; 0x7c
   197d8:	cmp	r5, r3
   197dc:	bge	197ec <__assert_fail@plt+0x84e8>
   197e0:	ldr	r3, [r4, #120]	; 0x78
   197e4:	cmp	r3, fp
   197e8:	bge	19890 <__assert_fail@plt+0x858c>
   197ec:	ldr	r0, [sp, #64]	; 0x40
   197f0:	bl	1f990 <__assert_fail@plt+0xe68c>
   197f4:	ldr	r3, [r4, #100]	; 0x64
   197f8:	ldr	r2, [sp, #124]	; 0x7c
   197fc:	ldr	r0, [r3, r2, lsl #2]
   19800:	str	r5, [r7]
   19804:	ldr	r3, [sp, #32]
   19808:	cmp	r0, #0
   1980c:	addne	r0, r0, #4
   19810:	str	r3, [r4, #100]	; 0x64
   19814:	cmp	r0, #0
   19818:	ldr	r3, [sp, #36]	; 0x24
   1981c:	moveq	r0, #1
   19820:	str	r3, [r4, #40]	; 0x28
   19824:	beq	19694 <__assert_fail@plt+0x8390>
   19828:	ldr	r1, [sp, #120]	; 0x78
   1982c:	bl	13d28 <__assert_fail@plt+0x2a24>
   19830:	clz	r0, r0
   19834:	lsr	r0, r0, #5
   19838:	b	19694 <__assert_fail@plt+0x8390>
   1983c:	mov	r3, #0
   19840:	cmp	r6, r3
   19844:	str	r3, [sp, #56]	; 0x38
   19848:	str	r3, [sp, #60]	; 0x3c
   1984c:	str	r3, [sp, #64]	; 0x40
   19850:	bne	197c0 <__assert_fail@plt+0x84bc>
   19854:	b	197cc <__assert_fail@plt+0x84c8>
   19858:	ldr	r3, [sp, #128]	; 0x80
   1985c:	mov	r2, r5
   19860:	add	r1, sp, #56	; 0x38
   19864:	mov	r0, r4
   19868:	str	r3, [sp]
   1986c:	ldr	r3, [sp, #16]
   19870:	bl	19434 <__assert_fail@plt+0x8130>
   19874:	cmp	r0, #0
   19878:	str	r0, [sp, #48]	; 0x30
   1987c:	beq	1975c <__assert_fail@plt+0x8458>
   19880:	ldr	r0, [sp, #64]	; 0x40
   19884:	bl	1f990 <__assert_fail@plt+0xe68c>
   19888:	ldr	r0, [sp, #48]	; 0x30
   1988c:	b	19694 <__assert_fail@plt+0x8390>
   19890:	add	r3, r5, #1
   19894:	add	r2, r5, #1
   19898:	str	r3, [sp, #40]	; 0x28
   1989c:	ldr	r3, [r4, #100]	; 0x64
   198a0:	str	r8, [sp, #60]	; 0x3c
   198a4:	ldr	r1, [r3, r2, lsl #2]
   198a8:	cmp	r1, #0
   198ac:	beq	198c8 <__assert_fail@plt+0x85c4>
   198b0:	add	r1, r1, #4
   198b4:	add	r0, sp, #56	; 0x38
   198b8:	bl	17404 <__assert_fail@plt+0x6100>
   198bc:	cmp	r0, #0
   198c0:	str	r0, [sp, #48]	; 0x30
   198c4:	bne	19880 <__assert_fail@plt+0x857c>
   198c8:	cmp	r6, #0
   198cc:	beq	199e0 <__assert_fail@plt+0x86dc>
   198d0:	ldr	sl, [r4, #84]	; 0x54
   198d4:	add	r3, sp, #68	; 0x44
   198d8:	mov	r2, #0
   198dc:	str	r2, [sp, #20]
   198e0:	str	r3, [sp, #28]
   198e4:	str	r8, [sp, #52]	; 0x34
   198e8:	str	r8, [sp, #68]	; 0x44
   198ec:	str	r8, [sp, #72]	; 0x48
   198f0:	str	r8, [sp, #76]	; 0x4c
   198f4:	ldr	r3, [r6, #20]
   198f8:	ldr	r2, [sp, #20]
   198fc:	cmp	r2, r3
   19900:	blt	19914 <__assert_fail@plt+0x8610>
   19904:	ldr	r0, [sp, #76]	; 0x4c
   19908:	bl	1f990 <__assert_fail@plt+0xe68c>
   1990c:	str	r8, [sp, #48]	; 0x30
   19910:	b	199e0 <__assert_fail@plt+0x86dc>
   19914:	ldr	r2, [sp, #20]
   19918:	ldr	r3, [r6, #24]
   1991c:	ldr	r3, [r3, r2, lsl #2]
   19920:	lsl	r9, r3, #3
   19924:	str	r3, [sp, #24]
   19928:	ldr	r3, [sl]
   1992c:	add	r3, r3, r9
   19930:	ldrb	r3, [r3, #6]
   19934:	tst	r3, #16
   19938:	bne	19968 <__assert_fail@plt+0x8664>
   1993c:	ldr	r1, [sl]
   19940:	mov	r2, r5
   19944:	mov	r0, r4
   19948:	add	r1, r1, r9
   1994c:	bl	17830 <__assert_fail@plt+0x652c>
   19950:	cmp	r0, #0
   19954:	bne	19ae8 <__assert_fail@plt+0x87e4>
   19958:	ldr	r3, [sp, #20]
   1995c:	add	r3, r3, #1
   19960:	str	r3, [sp, #20]
   19964:	b	198f4 <__assert_fail@plt+0x85f0>
   19968:	mov	r3, r5
   1996c:	mov	r2, r4
   19970:	ldr	r1, [sp, #24]
   19974:	mov	r0, sl
   19978:	bl	15ed4 <__assert_fail@plt+0x4bd0>
   1997c:	cmp	r0, #1
   19980:	ble	19b18 <__assert_fail@plt+0x8814>
   19984:	ldr	r3, [sl, #12]
   19988:	add	r9, r5, r0
   1998c:	ldr	r2, [sp, #24]
   19990:	ldr	r3, [r3, r2, lsl #2]
   19994:	ldr	r2, [r4, #100]	; 0x64
   19998:	ldr	r1, [r2, r9, lsl #2]
   1999c:	str	r8, [sp, #72]	; 0x48
   199a0:	cmp	r1, #0
   199a4:	beq	19a90 <__assert_fail@plt+0x878c>
   199a8:	add	r1, r1, #4
   199ac:	ldr	r0, [sp, #28]
   199b0:	str	r3, [sp, #44]	; 0x2c
   199b4:	bl	17404 <__assert_fail@plt+0x6100>
   199b8:	cmp	r0, #0
   199bc:	str	r0, [sp, #52]	; 0x34
   199c0:	ldr	r3, [sp, #44]	; 0x2c
   199c4:	beq	19a90 <__assert_fail@plt+0x878c>
   199c8:	ldr	r0, [sp, #76]	; 0x4c
   199cc:	bl	1f990 <__assert_fail@plt+0xe68c>
   199d0:	ldr	r3, [sp, #52]	; 0x34
   199d4:	cmp	r3, #0
   199d8:	str	r3, [sp, #48]	; 0x30
   199dc:	bne	19880 <__assert_fail@plt+0x857c>
   199e0:	ldr	r3, [sp, #60]	; 0x3c
   199e4:	add	r9, r5, #1
   199e8:	cmp	r3, #0
   199ec:	beq	19a38 <__assert_fail@plt+0x8734>
   199f0:	add	r1, sp, #56	; 0x38
   199f4:	ldr	r0, [sp, #12]
   199f8:	ldr	r2, [sp, #16]
   199fc:	ldr	r3, [sp, #128]	; 0x80
   19a00:	bl	190fc <__assert_fail@plt+0x7df8>
   19a04:	cmp	r0, #0
   19a08:	str	r0, [sp, #48]	; 0x30
   19a0c:	bne	19880 <__assert_fail@plt+0x857c>
   19a10:	ldr	r3, [sp, #128]	; 0x80
   19a14:	mov	r2, r9
   19a18:	add	r1, sp, #56	; 0x38
   19a1c:	mov	r0, r4
   19a20:	str	r3, [sp]
   19a24:	ldr	r3, [sp, #16]
   19a28:	bl	19434 <__assert_fail@plt+0x8130>
   19a2c:	cmp	r0, #0
   19a30:	str	r0, [sp, #48]	; 0x30
   19a34:	bne	19880 <__assert_fail@plt+0x857c>
   19a38:	mov	r1, r5
   19a3c:	mov	r0, r4
   19a40:	ldr	r2, [r4, #88]	; 0x58
   19a44:	bl	17750 <__assert_fail@plt+0x644c>
   19a48:	mov	r3, r0
   19a4c:	add	r2, sp, #56	; 0x38
   19a50:	ldr	r1, [sp, #12]
   19a54:	add	r0, sp, #48	; 0x30
   19a58:	bl	166c4 <__assert_fail@plt+0x53c0>
   19a5c:	subs	r6, r0, #0
   19a60:	bne	19a70 <__assert_fail@plt+0x876c>
   19a64:	ldr	r3, [sp, #48]	; 0x30
   19a68:	cmp	r3, #0
   19a6c:	bne	19880 <__assert_fail@plt+0x857c>
   19a70:	ldr	r2, [sp, #40]	; 0x28
   19a74:	cmp	r6, #0
   19a78:	addeq	fp, fp, #1
   19a7c:	ldr	r3, [r4, #100]	; 0x64
   19a80:	str	r6, [r3, r2, lsl #2]
   19a84:	movne	fp, #0
   19a88:	mov	r5, r9
   19a8c:	b	197d4 <__assert_fail@plt+0x84d0>
   19a90:	mov	r1, r3
   19a94:	ldr	r0, [sp, #28]
   19a98:	bl	1702c <__assert_fail@plt+0x5d28>
   19a9c:	cmp	r0, #0
   19aa0:	bne	19ab8 <__assert_fail@plt+0x87b4>
   19aa4:	ldr	r0, [sp, #76]	; 0x4c
   19aa8:	bl	1f990 <__assert_fail@plt+0xe68c>
   19aac:	mov	r3, #12
   19ab0:	str	r3, [sp, #48]	; 0x30
   19ab4:	b	19880 <__assert_fail@plt+0x857c>
   19ab8:	ldr	r3, [r4, #100]	; 0x64
   19abc:	mov	r1, sl
   19ac0:	add	r0, sp, #52	; 0x34
   19ac4:	ldr	r2, [sp, #28]
   19ac8:	str	r3, [sp, #44]	; 0x2c
   19acc:	bl	191f0 <__assert_fail@plt+0x7eec>
   19ad0:	ldr	r3, [sp, #44]	; 0x2c
   19ad4:	str	r0, [r3, r9, lsl #2]
   19ad8:	ldr	r3, [r4, #100]	; 0x64
   19adc:	ldr	r3, [r3, r9, lsl #2]
   19ae0:	cmp	r3, #0
   19ae4:	beq	19b08 <__assert_fail@plt+0x8804>
   19ae8:	ldr	r3, [sl, #12]
   19aec:	add	r0, sp, #56	; 0x38
   19af0:	ldr	r2, [sp, #24]
   19af4:	ldr	r1, [r3, r2, lsl #2]
   19af8:	bl	1702c <__assert_fail@plt+0x5d28>
   19afc:	cmp	r0, #0
   19b00:	bne	19958 <__assert_fail@plt+0x8654>
   19b04:	b	19aa4 <__assert_fail@plt+0x87a0>
   19b08:	ldr	r3, [sp, #52]	; 0x34
   19b0c:	cmp	r3, #0
   19b10:	beq	19ae8 <__assert_fail@plt+0x87e4>
   19b14:	b	199c8 <__assert_fail@plt+0x86c4>
   19b18:	cmp	r0, #0
   19b1c:	beq	1993c <__assert_fail@plt+0x8638>
   19b20:	b	19ae8 <__assert_fail@plt+0x87e4>
   19b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b28:	sub	sp, sp, #20
   19b2c:	mov	r9, r3
   19b30:	mov	r3, #8
   19b34:	mov	r8, r1
   19b38:	mov	r7, r2
   19b3c:	add	r1, r2, #8
   19b40:	ldr	r5, [sp, #56]	; 0x38
   19b44:	mov	r4, r0
   19b48:	str	r9, [sp]
   19b4c:	str	r5, [sp, #4]
   19b50:	str	r3, [sp, #8]
   19b54:	ldrd	r2, [r2]
   19b58:	bl	19630 <__assert_fail@plt+0x832c>
   19b5c:	subs	fp, r0, #0
   19b60:	bne	19b9c <__assert_fail@plt+0x8898>
   19b64:	ldrd	r2, [r4, #108]	; 0x6c
   19b68:	ldr	sl, [r8]
   19b6c:	ldr	r6, [r7, #4]
   19b70:	cmp	r2, r3
   19b74:	blt	19bd4 <__assert_fail@plt+0x88d0>
   19b78:	mov	r1, #48	; 0x30
   19b7c:	ldr	r0, [r4, #116]	; 0x74
   19b80:	mul	r1, r1, r3
   19b84:	bl	1f83c <__assert_fail@plt+0xe538>
   19b88:	subs	r3, r0, #0
   19b8c:	bne	19ba8 <__assert_fail@plt+0x88a4>
   19b90:	ldr	r0, [r4, #116]	; 0x74
   19b94:	mov	fp, #12
   19b98:	bl	1f990 <__assert_fail@plt+0xe68c>
   19b9c:	mov	r0, fp
   19ba0:	add	sp, sp, #20
   19ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ba8:	ldr	ip, [r4, #108]	; 0x6c
   19bac:	mov	r0, #24
   19bb0:	mov	r1, fp
   19bb4:	str	r3, [r4, #116]	; 0x74
   19bb8:	ldr	r2, [r4, #112]	; 0x70
   19bbc:	mul	r2, r0, r2
   19bc0:	mla	r0, r0, ip, r3
   19bc4:	bl	11208 <memset@plt>
   19bc8:	ldr	r3, [r4, #112]	; 0x70
   19bcc:	lsl	r3, r3, #1
   19bd0:	str	r3, [r4, #112]	; 0x70
   19bd4:	ldr	r2, [r4, #108]	; 0x6c
   19bd8:	mov	r1, #24
   19bdc:	ldr	r0, [r4, #116]	; 0x74
   19be0:	cmp	r2, #0
   19be4:	mul	r1, r1, r2
   19be8:	ble	19c04 <__assert_fail@plt+0x8900>
   19bec:	sub	r3, r1, #24
   19bf0:	add	r3, r0, r3
   19bf4:	ldr	ip, [r3, #4]
   19bf8:	cmp	r5, ip
   19bfc:	moveq	ip, #1
   19c00:	strbeq	ip, [r3, #20]
   19c04:	cmp	sl, r6
   19c08:	add	r3, r0, r1
   19c0c:	str	r9, [r0, r1]
   19c10:	add	r2, r2, #1
   19c14:	movne	r1, #0
   19c18:	mvneq	r1, #0
   19c1c:	stmib	r3, {r5, sl}
   19c20:	mov	r0, r4
   19c24:	str	r6, [r3, #12]
   19c28:	sub	r6, r6, sl
   19c2c:	str	r1, [r3, #16]
   19c30:	str	r2, [r4, #108]	; 0x6c
   19c34:	mov	r2, #0
   19c38:	strb	r2, [r3, #20]
   19c3c:	ldr	r3, [r4, #120]	; 0x78
   19c40:	ldr	r1, [r7, #4]
   19c44:	cmp	r3, r6
   19c48:	add	r5, r5, r1
   19c4c:	strlt	r6, [r4, #120]	; 0x78
   19c50:	ldr	r1, [r8]
   19c54:	sub	r1, r5, r1
   19c58:	add	sp, sp, #20
   19c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c60:	b	15484 <__assert_fail@plt+0x4180>
   19c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c68:	sub	sp, sp, #84	; 0x54
   19c6c:	mov	r4, r0
   19c70:	ldr	r9, [r0, #40]	; 0x28
   19c74:	str	r1, [sp, #56]	; 0x38
   19c78:	ldr	sl, [r0, #84]	; 0x54
   19c7c:	lsl	r3, r9, #2
   19c80:	str	r3, [sp, #44]	; 0x2c
   19c84:	mov	r3, #0
   19c88:	str	r3, [sp, #20]
   19c8c:	ldr	r2, [sp, #20]
   19c90:	ldr	r3, [sp, #56]	; 0x38
   19c94:	ldr	r3, [r3, #4]
   19c98:	cmp	r3, r2
   19c9c:	movle	r3, #0
   19ca0:	ble	1a0f8 <__assert_fail@plt+0x8df4>
   19ca4:	ldr	r2, [sp, #20]
   19ca8:	ldr	r3, [sp, #56]	; 0x38
   19cac:	ldr	r3, [r3, #8]
   19cb0:	ldr	r3, [r3, r2, lsl #2]
   19cb4:	str	r3, [sp, #16]
   19cb8:	ldr	r3, [sl]
   19cbc:	ldr	r2, [sp, #16]
   19cc0:	add	r3, r3, r2, lsl #3
   19cc4:	ldrb	r2, [r3, #4]
   19cc8:	cmp	r2, #4
   19ccc:	beq	19cdc <__assert_fail@plt+0x89d8>
   19cd0:	ldr	r3, [sp, #20]
   19cd4:	add	r3, r3, #1
   19cd8:	b	19c88 <__assert_fail@plt+0x8984>
   19cdc:	ldr	r5, [r3, #4]
   19ce0:	ldr	r3, [pc, #1400]	; 1a260 <__assert_fail@plt+0x8f5c>
   19ce4:	and	r3, r3, r5
   19ce8:	cmp	r3, #0
   19cec:	beq	19d44 <__assert_fail@plt+0x8a40>
   19cf0:	mov	r1, r9
   19cf4:	mov	r0, r4
   19cf8:	ldr	r2, [r4, #88]	; 0x58
   19cfc:	bl	17750 <__assert_fail@plt+0x644c>
   19d00:	ubfx	r3, r5, #8, #10
   19d04:	tst	r3, #4
   19d08:	beq	19d14 <__assert_fail@plt+0x8a10>
   19d0c:	tst	r0, #1
   19d10:	beq	19cd0 <__assert_fail@plt+0x89cc>
   19d14:	tst	r3, #8
   19d18:	beq	19d24 <__assert_fail@plt+0x8a20>
   19d1c:	tst	r0, #1
   19d20:	bne	19cd0 <__assert_fail@plt+0x89cc>
   19d24:	tst	r3, #32
   19d28:	beq	19d34 <__assert_fail@plt+0x8a30>
   19d2c:	tst	r0, #2
   19d30:	beq	19cd0 <__assert_fail@plt+0x89cc>
   19d34:	tst	r3, #128	; 0x80
   19d38:	beq	19d44 <__assert_fail@plt+0x8a40>
   19d3c:	tst	r0, #8
   19d40:	beq	19cd0 <__assert_fail@plt+0x89cc>
   19d44:	ldr	r3, [r4, #108]	; 0x6c
   19d48:	mov	r1, r9
   19d4c:	mov	r0, r4
   19d50:	str	r3, [sp, #24]
   19d54:	bl	14194 <__assert_fail@plt+0x2e90>
   19d58:	cmn	r0, #1
   19d5c:	beq	19df4 <__assert_fail@plt+0x8af0>
   19d60:	mov	r3, #24
   19d64:	mla	r3, r0, r3, r3
   19d68:	ldr	r0, [r4, #116]	; 0x74
   19d6c:	add	r0, r0, r3
   19d70:	ldr	r3, [r0, #-24]	; 0xffffffe8
   19d74:	ldr	r2, [sp, #16]
   19d78:	cmp	r2, r3
   19d7c:	bne	19de4 <__assert_fail@plt+0x8ae0>
   19d80:	mov	r3, #0
   19d84:	ldr	r2, [sp, #16]
   19d88:	str	r3, [sp, #64]	; 0x40
   19d8c:	ldr	r3, [sp, #16]
   19d90:	lsl	r3, r3, #2
   19d94:	str	r3, [sp, #28]
   19d98:	mov	r3, #12
   19d9c:	mul	fp, r3, r2
   19da0:	ldr	r2, [sp, #24]
   19da4:	ldr	r3, [r4, #108]	; 0x6c
   19da8:	cmp	r3, r2
   19dac:	ble	19cd0 <__assert_fail@plt+0x89cc>
   19db0:	ldr	r2, [sp, #24]
   19db4:	mov	r3, #24
   19db8:	ldr	r1, [r4, #116]	; 0x74
   19dbc:	mul	r3, r3, r2
   19dc0:	add	r2, r1, r3
   19dc4:	ldr	r3, [r1, r3]
   19dc8:	ldr	r1, [sp, #16]
   19dcc:	cmp	r3, r1
   19dd0:	beq	1a100 <__assert_fail@plt+0x8dfc>
   19dd4:	ldr	r3, [sp, #24]
   19dd8:	add	r3, r3, #1
   19ddc:	str	r3, [sp, #24]
   19de0:	b	19da0 <__assert_fail@plt+0x8a9c>
   19de4:	add	r0, r0, #24
   19de8:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   19dec:	cmp	r3, #0
   19df0:	bne	19d70 <__assert_fail@plt+0x8a6c>
   19df4:	ldr	r2, [sp, #16]
   19df8:	ldr	r3, [r4, #84]	; 0x54
   19dfc:	ldr	r7, [r4, #4]
   19e00:	str	r3, [sp, #36]	; 0x24
   19e04:	ldr	r3, [r3]
   19e08:	ldr	r3, [r3, r2, lsl #3]
   19e0c:	str	r3, [sp, #48]	; 0x30
   19e10:	mov	r3, #0
   19e14:	str	r3, [sp, #28]
   19e18:	ldr	r2, [sp, #28]
   19e1c:	ldr	r3, [r4, #124]	; 0x7c
   19e20:	cmp	r2, r3
   19e24:	bge	19d80 <__assert_fail@plt+0x8a7c>
   19e28:	ldr	r2, [sp, #28]
   19e2c:	ldr	r3, [r4, #132]	; 0x84
   19e30:	ldr	r5, [r3, r2, lsl #2]
   19e34:	ldr	r3, [sp, #36]	; 0x24
   19e38:	ldr	r2, [r5, #4]
   19e3c:	ldr	r3, [r3]
   19e40:	ldr	r3, [r3, r2, lsl #3]
   19e44:	ldr	r2, [sp, #48]	; 0x30
   19e48:	cmp	r2, r3
   19e4c:	moveq	fp, r9
   19e50:	moveq	r8, #0
   19e54:	ldreq	r6, [r5]
   19e58:	beq	19f9c <__assert_fail@plt+0x8c98>
   19e5c:	ldr	r3, [sp, #28]
   19e60:	add	r3, r3, #1
   19e64:	b	19e14 <__assert_fail@plt+0x8b10>
   19e68:	ldr	r3, [r4, #28]
   19e6c:	add	r1, r2, fp
   19e70:	cmp	r3, r1
   19e74:	bge	19ea8 <__assert_fail@plt+0x8ba4>
   19e78:	str	r2, [sp, #60]	; 0x3c
   19e7c:	ldr	r2, [sp, #32]
   19e80:	ldr	r3, [r4, #48]	; 0x30
   19e84:	cmp	r3, r2
   19e88:	blt	19ebc <__assert_fail@plt+0x8bb8>
   19e8c:	mov	r1, r2
   19e90:	mov	r0, r4
   19e94:	bl	15484 <__assert_fail@plt+0x4180>
   19e98:	cmp	r0, #0
   19e9c:	bne	19ff4 <__assert_fail@plt+0x8cf0>
   19ea0:	ldr	r7, [r4, #4]
   19ea4:	ldr	r2, [sp, #60]	; 0x3c
   19ea8:	add	r1, r7, r6
   19eac:	add	r0, r7, fp
   19eb0:	bl	110c4 <memcmp@plt>
   19eb4:	cmp	r0, #0
   19eb8:	beq	19fd0 <__assert_fail@plt+0x8ccc>
   19ebc:	ldr	r3, [r5, #16]
   19ec0:	cmp	r8, r3
   19ec4:	blt	19e5c <__assert_fail@plt+0x8b58>
   19ec8:	cmp	r8, #0
   19ecc:	ble	19ed4 <__assert_fail@plt+0x8bd0>
   19ed0:	add	r6, r6, #1
   19ed4:	cmp	r9, r6
   19ed8:	blt	19e5c <__assert_fail@plt+0x8b58>
   19edc:	ldr	r3, [r5]
   19ee0:	sub	r3, r6, r3
   19ee4:	cmp	r3, #0
   19ee8:	ble	19f38 <__assert_fail@plt+0x8c34>
   19eec:	ldr	r3, [r4, #28]
   19ef0:	cmp	r3, fp
   19ef4:	bgt	19f1c <__assert_fail@plt+0x8c18>
   19ef8:	ldr	r3, [r4, #48]	; 0x30
   19efc:	cmp	fp, r3
   19f00:	bge	19e5c <__assert_fail@plt+0x8b58>
   19f04:	add	r1, fp, #1
   19f08:	mov	r0, r4
   19f0c:	bl	14dbc <__assert_fail@plt+0x3ab8>
   19f10:	cmp	r0, #0
   19f14:	bne	19ff4 <__assert_fail@plt+0x8cf0>
   19f18:	ldr	r7, [r4, #4]
   19f1c:	add	r3, r7, r6
   19f20:	add	r2, fp, #1
   19f24:	ldrb	r1, [r7, fp]
   19f28:	ldrb	r3, [r3, #-1]
   19f2c:	cmp	r1, r3
   19f30:	bne	19e5c <__assert_fail@plt+0x8b58>
   19f34:	mov	fp, r2
   19f38:	ldr	r3, [r4, #100]	; 0x64
   19f3c:	ldr	r2, [r3, r6, lsl #2]
   19f40:	cmp	r2, #0
   19f44:	movne	r3, #0
   19f48:	ldrne	r0, [r2, #8]
   19f4c:	beq	19ed0 <__assert_fail@plt+0x8bcc>
   19f50:	cmp	r3, r0
   19f54:	bge	19ed0 <__assert_fail@plt+0x8bcc>
   19f58:	ldr	r1, [r2, #12]
   19f5c:	ldr	r8, [r1, r3, lsl #2]
   19f60:	ldr	r1, [sp, #36]	; 0x24
   19f64:	ldr	r1, [r1]
   19f68:	add	ip, r1, r8, lsl #3
   19f6c:	ldrb	ip, [ip, #4]
   19f70:	cmp	ip, #9
   19f74:	bne	19f88 <__assert_fail@plt+0x8c84>
   19f78:	ldr	r1, [r1, r8, lsl #3]
   19f7c:	ldr	ip, [sp, #48]	; 0x30
   19f80:	cmp	ip, r1
   19f84:	beq	1a004 <__assert_fail@plt+0x8d00>
   19f88:	add	r3, r3, #1
   19f8c:	b	19f50 <__assert_fail@plt+0x8c4c>
   19f90:	ldr	fp, [sp, #32]
   19f94:	add	r8, r8, #1
   19f98:	ldr	r6, [sp, #40]	; 0x28
   19f9c:	ldr	r3, [r5, #16]
   19fa0:	cmp	r8, r3
   19fa4:	bge	19ebc <__assert_fail@plt+0x8bb8>
   19fa8:	ldr	r3, [r5, #20]
   19fac:	ldr	r3, [r3, r8, lsl #2]
   19fb0:	str	r3, [sp, #52]	; 0x34
   19fb4:	ldr	r3, [r3, #4]
   19fb8:	sub	r2, r3, r6
   19fbc:	str	r3, [sp, #40]	; 0x28
   19fc0:	add	r3, r2, fp
   19fc4:	cmp	r2, #0
   19fc8:	str	r3, [sp, #32]
   19fcc:	bgt	19e68 <__assert_fail@plt+0x8b64>
   19fd0:	mov	r1, r5
   19fd4:	mov	r0, r4
   19fd8:	str	r9, [sp]
   19fdc:	ldr	r3, [sp, #16]
   19fe0:	ldr	r2, [sp, #52]	; 0x34
   19fe4:	bl	19b24 <__assert_fail@plt+0x8820>
   19fe8:	cmp	r0, #1
   19fec:	ldr	r7, [r4, #4]
   19ff0:	bls	19f90 <__assert_fail@plt+0x8c8c>
   19ff4:	str	r0, [sp, #64]	; 0x40
   19ff8:	ldr	r0, [sp, #64]	; 0x40
   19ffc:	add	sp, sp, #84	; 0x54
   1a000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a004:	cmn	r8, #1
   1a008:	beq	19ed0 <__assert_fail@plt+0x8bcc>
   1a00c:	ldr	r3, [r5, #8]
   1a010:	cmp	r3, #0
   1a014:	beq	1a0d4 <__assert_fail@plt+0x8dd0>
   1a018:	mov	r3, #9
   1a01c:	mov	r0, r4
   1a020:	str	r8, [sp]
   1a024:	str	r6, [sp, #4]
   1a028:	str	r3, [sp, #8]
   1a02c:	ldr	r3, [r5]
   1a030:	ldr	r2, [r5, #4]
   1a034:	ldr	r1, [r5, #8]
   1a038:	bl	19630 <__assert_fail@plt+0x832c>
   1a03c:	cmp	r0, #1
   1a040:	beq	19ed0 <__assert_fail@plt+0x8bcc>
   1a044:	cmp	r0, #0
   1a048:	bne	19ff4 <__assert_fail@plt+0x8cf0>
   1a04c:	ldr	r3, [r5, #12]
   1a050:	ldr	r7, [r5, #16]
   1a054:	cmp	r7, r3
   1a058:	bne	1a080 <__assert_fail@plt+0x8d7c>
   1a05c:	lsl	r7, r7, #1
   1a060:	ldr	r0, [r5, #20]
   1a064:	add	r7, r7, #1
   1a068:	lsl	r1, r7, #2
   1a06c:	bl	1f83c <__assert_fail@plt+0xe538>
   1a070:	cmp	r0, #0
   1a074:	beq	1a0f4 <__assert_fail@plt+0x8df0>
   1a078:	str	r7, [r5, #12]
   1a07c:	str	r0, [r5, #20]
   1a080:	mov	r1, #20
   1a084:	mov	r0, #1
   1a088:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1a08c:	subs	r2, r0, #0
   1a090:	beq	1a0f4 <__assert_fail@plt+0x8df0>
   1a094:	ldr	r3, [r5, #16]
   1a098:	mov	r0, r4
   1a09c:	ldr	r1, [r5, #20]
   1a0a0:	str	r2, [r1, r3, lsl #2]
   1a0a4:	add	r3, r3, #1
   1a0a8:	mov	r1, r5
   1a0ac:	str	r8, [r2]
   1a0b0:	str	r6, [r2, #4]
   1a0b4:	str	r3, [r5, #16]
   1a0b8:	str	r9, [sp]
   1a0bc:	ldr	r3, [sp, #16]
   1a0c0:	bl	19b24 <__assert_fail@plt+0x8820>
   1a0c4:	cmp	r0, #1
   1a0c8:	ldr	r7, [r4, #4]
   1a0cc:	bls	19ed0 <__assert_fail@plt+0x8bcc>
   1a0d0:	b	19ff4 <__assert_fail@plt+0x8cf0>
   1a0d4:	ldr	r1, [r5]
   1a0d8:	mov	r0, #12
   1a0dc:	sub	r1, r6, r1
   1a0e0:	add	r1, r1, #1
   1a0e4:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1a0e8:	cmp	r0, #0
   1a0ec:	str	r0, [r5, #8]
   1a0f0:	bne	1a018 <__assert_fail@plt+0x8d14>
   1a0f4:	mov	r3, #12
   1a0f8:	str	r3, [sp, #64]	; 0x40
   1a0fc:	b	19ff8 <__assert_fail@plt+0x8cf4>
   1a100:	ldr	r3, [r2, #4]
   1a104:	cmp	r3, r9
   1a108:	bne	19dd4 <__assert_fail@plt+0x8ad0>
   1a10c:	ldr	r3, [r2, #8]
   1a110:	mov	r0, r4
   1a114:	ldr	r5, [r2, #12]
   1a118:	ldr	r6, [sl, #24]
   1a11c:	subs	r2, r5, r3
   1a120:	add	r5, r5, r9
   1a124:	ldrne	r1, [sp, #28]
   1a128:	sub	r5, r5, r3
   1a12c:	str	r2, [sp, #32]
   1a130:	ldreq	r2, [sl, #20]
   1a134:	ldrne	r2, [sl, #12]
   1a138:	addeq	r2, r2, fp
   1a13c:	ldreq	r2, [r2, #8]
   1a140:	ldrne	r2, [r2, r1]
   1a144:	mov	r1, #12
   1a148:	ldreq	r2, [r2]
   1a14c:	mla	r6, r1, r2, r6
   1a150:	sub	r1, r5, #1
   1a154:	ldr	r2, [r4, #88]	; 0x58
   1a158:	bl	17750 <__assert_fail@plt+0x644c>
   1a15c:	ldr	r2, [sp, #44]	; 0x2c
   1a160:	mov	r3, r0
   1a164:	ldr	r8, [r4, #100]	; 0x64
   1a168:	ldr	r7, [r8, r2]
   1a16c:	ldr	r1, [r8, r5, lsl #2]
   1a170:	cmp	r7, #0
   1a174:	ldrne	r7, [r7, #8]
   1a178:	cmp	r1, #0
   1a17c:	bne	1a20c <__assert_fail@plt+0x8f08>
   1a180:	mov	r2, r6
   1a184:	mov	r1, sl
   1a188:	add	r0, sp, #64	; 0x40
   1a18c:	bl	166c4 <__assert_fail@plt+0x53c0>
   1a190:	str	r0, [r8, r5, lsl #2]
   1a194:	ldr	r3, [r4, #100]	; 0x64
   1a198:	ldr	r3, [r3, r5, lsl #2]
   1a19c:	cmp	r3, #0
   1a1a0:	bne	1a1b0 <__assert_fail@plt+0x8eac>
   1a1a4:	ldr	r3, [sp, #64]	; 0x40
   1a1a8:	cmp	r3, #0
   1a1ac:	bne	19ff8 <__assert_fail@plt+0x8cf4>
   1a1b0:	ldr	r3, [sp, #32]
   1a1b4:	cmp	r3, #0
   1a1b8:	bne	19dd4 <__assert_fail@plt+0x8ad0>
   1a1bc:	ldr	r2, [sp, #44]	; 0x2c
   1a1c0:	ldr	r3, [r4, #100]	; 0x64
   1a1c4:	ldr	r3, [r3, r2]
   1a1c8:	ldr	r3, [r3, #8]
   1a1cc:	cmp	r3, r7
   1a1d0:	ble	19dd4 <__assert_fail@plt+0x8ad0>
   1a1d4:	mov	r2, r9
   1a1d8:	mov	r1, r6
   1a1dc:	mov	r0, r4
   1a1e0:	bl	153a4 <__assert_fail@plt+0x40a0>
   1a1e4:	cmp	r0, #0
   1a1e8:	str	r0, [sp, #64]	; 0x40
   1a1ec:	bne	19ff8 <__assert_fail@plt+0x8cf4>
   1a1f0:	mov	r1, r6
   1a1f4:	mov	r0, r4
   1a1f8:	bl	19c64 <__assert_fail@plt+0x8960>
   1a1fc:	cmp	r0, #0
   1a200:	str	r0, [sp, #64]	; 0x40
   1a204:	beq	19dd4 <__assert_fail@plt+0x8ad0>
   1a208:	b	19ff8 <__assert_fail@plt+0x8cf4>
   1a20c:	mov	r2, r6
   1a210:	add	r0, sp, #68	; 0x44
   1a214:	ldr	r1, [r1, #40]	; 0x28
   1a218:	str	r3, [sp, #36]	; 0x24
   1a21c:	bl	16584 <__assert_fail@plt+0x5280>
   1a220:	cmp	r0, #0
   1a224:	str	r0, [sp, #64]	; 0x40
   1a228:	ldr	r3, [sp, #36]	; 0x24
   1a22c:	beq	1a23c <__assert_fail@plt+0x8f38>
   1a230:	ldr	r0, [sp, #76]	; 0x4c
   1a234:	bl	1f990 <__assert_fail@plt+0xe68c>
   1a238:	b	19ff8 <__assert_fail@plt+0x8cf4>
   1a23c:	ldr	r8, [r4, #100]	; 0x64
   1a240:	add	r2, sp, #68	; 0x44
   1a244:	mov	r1, sl
   1a248:	add	r0, sp, #64	; 0x40
   1a24c:	bl	166c4 <__assert_fail@plt+0x53c0>
   1a250:	str	r0, [r8, r5, lsl #2]
   1a254:	ldr	r0, [sp, #76]	; 0x4c
   1a258:	bl	1f990 <__assert_fail@plt+0xe68c>
   1a25c:	b	1a194 <__assert_fail@plt+0x8e90>
   1a260:	andeq	pc, r3, r0, lsl #30
   1a264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a268:	mov	r4, r2
   1a26c:	sub	sp, sp, #20
   1a270:	mov	r8, r0
   1a274:	mov	r5, r1
   1a278:	ldr	r6, [r1, #40]	; 0x28
   1a27c:	ldr	sl, [r1, #84]	; 0x54
   1a280:	ldr	r2, [r1, #104]	; 0x68
   1a284:	ldr	r3, [r1, #100]	; 0x64
   1a288:	cmp	r2, r6
   1a28c:	strlt	r4, [r3, r6, lsl #2]
   1a290:	strlt	r6, [r1, #104]	; 0x68
   1a294:	blt	1a334 <__assert_fail@plt+0x9030>
   1a298:	ldr	r2, [r3, r6, lsl #2]
   1a29c:	cmp	r2, #0
   1a2a0:	streq	r4, [r3, r6, lsl #2]
   1a2a4:	beq	1a334 <__assert_fail@plt+0x9030>
   1a2a8:	cmp	r4, #0
   1a2ac:	add	r7, sp, #4
   1a2b0:	ldr	r2, [r2, #40]	; 0x28
   1a2b4:	beq	1a2e4 <__assert_fail@plt+0x8fe0>
   1a2b8:	ldr	r9, [r4, #40]	; 0x28
   1a2bc:	mov	r0, r7
   1a2c0:	mov	r1, r9
   1a2c4:	bl	16584 <__assert_fail@plt+0x5280>
   1a2c8:	cmp	r0, #0
   1a2cc:	str	r0, [r8]
   1a2d0:	beq	1a2f0 <__assert_fail@plt+0x8fec>
   1a2d4:	mov	r4, #0
   1a2d8:	mov	r0, r4
   1a2dc:	add	sp, sp, #20
   1a2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2e4:	ldm	r2, {r0, r1, r2}
   1a2e8:	mov	r9, r4
   1a2ec:	stm	r7, {r0, r1, r2}
   1a2f0:	mov	r0, r5
   1a2f4:	ldr	r1, [r5, #40]	; 0x28
   1a2f8:	ldr	r2, [r5, #88]	; 0x58
   1a2fc:	sub	r1, r1, #1
   1a300:	bl	17750 <__assert_fail@plt+0x644c>
   1a304:	ldr	fp, [r5, #100]	; 0x64
   1a308:	mov	r3, r0
   1a30c:	mov	r2, r7
   1a310:	mov	r1, sl
   1a314:	mov	r0, r8
   1a318:	bl	166c4 <__assert_fail@plt+0x53c0>
   1a31c:	cmp	r9, #0
   1a320:	mov	r4, r0
   1a324:	str	r0, [fp, r6, lsl #2]
   1a328:	beq	1a334 <__assert_fail@plt+0x9030>
   1a32c:	ldr	r0, [sp, #12]
   1a330:	bl	1f990 <__assert_fail@plt+0xe68c>
   1a334:	ldr	r3, [sl, #76]	; 0x4c
   1a338:	cmp	r3, #0
   1a33c:	beq	1a2d8 <__assert_fail@plt+0x8fd4>
   1a340:	cmp	r4, #0
   1a344:	beq	1a2d4 <__assert_fail@plt+0x8fd0>
   1a348:	add	r7, r4, #4
   1a34c:	mov	r2, r6
   1a350:	mov	r1, r7
   1a354:	mov	r0, r5
   1a358:	bl	153a4 <__assert_fail@plt+0x40a0>
   1a35c:	cmp	r0, #0
   1a360:	str	r0, [r8]
   1a364:	bne	1a2d4 <__assert_fail@plt+0x8fd0>
   1a368:	ldrb	r3, [r4, #52]	; 0x34
   1a36c:	tst	r3, #64	; 0x40
   1a370:	beq	1a2d8 <__assert_fail@plt+0x8fd4>
   1a374:	mov	r1, r7
   1a378:	mov	r0, r5
   1a37c:	bl	19c64 <__assert_fail@plt+0x8960>
   1a380:	cmp	r0, #0
   1a384:	str	r0, [r8]
   1a388:	bne	1a2d4 <__assert_fail@plt+0x8fd0>
   1a38c:	ldr	r3, [r5, #100]	; 0x64
   1a390:	ldr	r4, [r3, r6, lsl #2]
   1a394:	b	1a2d8 <__assert_fail@plt+0x8fd4>
   1a398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a39c:	mov	r4, r3
   1a3a0:	sub	sp, sp, #84	; 0x54
   1a3a4:	mov	r3, #0
   1a3a8:	mov	r5, r2
   1a3ac:	mov	r7, r0
   1a3b0:	mov	r6, r1
   1a3b4:	str	r3, [sp, #48]	; 0x30
   1a3b8:	lsl	r3, r2, #2
   1a3bc:	ldr	r8, [r0, #84]	; 0x54
   1a3c0:	str	r3, [sp, #24]
   1a3c4:	ldr	r3, [r0, #100]	; 0x64
   1a3c8:	ldr	fp, [r3, r2, lsl #2]
   1a3cc:	ldr	r3, [r4, #4]
   1a3d0:	cmp	fp, #0
   1a3d4:	addne	fp, fp, #4
   1a3d8:	cmp	r3, #0
   1a3dc:	ldreq	r2, [r1]
   1a3e0:	streq	r3, [r2, r5, lsl #2]
   1a3e4:	beq	1a6dc <__assert_fail@plt+0x93d8>
   1a3e8:	cmp	fp, #0
   1a3ec:	bne	1a420 <__assert_fail@plt+0x911c>
   1a3f0:	mov	r2, r4
   1a3f4:	mov	r1, r8
   1a3f8:	ldr	r9, [r6]
   1a3fc:	add	r0, sp, #48	; 0x30
   1a400:	bl	191f0 <__assert_fail@plt+0x7eec>
   1a404:	ldr	r3, [sp, #48]	; 0x30
   1a408:	str	r0, [r9, r5, lsl #2]
   1a40c:	cmp	r3, #0
   1a410:	beq	1a6dc <__assert_fail@plt+0x93d8>
   1a414:	mov	r0, r3
   1a418:	add	sp, sp, #84	; 0x54
   1a41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a420:	mov	r3, #0
   1a424:	mov	r2, r4
   1a428:	mov	r1, r8
   1a42c:	add	r0, sp, #52	; 0x34
   1a430:	str	r3, [sp, #52]	; 0x34
   1a434:	bl	191f0 <__assert_fail@plt+0x7eec>
   1a438:	ldr	r3, [sp, #52]	; 0x34
   1a43c:	cmp	r3, #0
   1a440:	bne	1a468 <__assert_fail@plt+0x9164>
   1a444:	ldr	r3, [r0, #28]
   1a448:	add	sl, r0, #28
   1a44c:	cmp	r3, #0
   1a450:	beq	1a4a4 <__assert_fail@plt+0x91a0>
   1a454:	mov	r2, sl
   1a458:	mov	r1, fp
   1a45c:	mov	r0, r4
   1a460:	bl	162c8 <__assert_fail@plt+0x4fc4>
   1a464:	mov	r3, r0
   1a468:	cmp	r3, #0
   1a46c:	str	r3, [sp, #48]	; 0x30
   1a470:	bne	1a414 <__assert_fail@plt+0x9110>
   1a474:	ldr	r2, [r6, #20]
   1a478:	cmp	r2, #0
   1a47c:	ldrne	r2, [r7, #116]	; 0x74
   1a480:	strne	r2, [sp, #16]
   1a484:	beq	1a3f0 <__assert_fail@plt+0x90ec>
   1a488:	str	r3, [sp, #12]
   1a48c:	ldr	r2, [sp, #12]
   1a490:	ldr	r3, [r6, #20]
   1a494:	cmp	r2, r3
   1a498:	blt	1a504 <__assert_fail@plt+0x9200>
   1a49c:	mov	r3, #0
   1a4a0:	b	1a5f0 <__assert_fail@plt+0x92ec>
   1a4a4:	mov	r0, sl
   1a4a8:	ldr	r1, [r4, #4]
   1a4ac:	bl	14700 <__assert_fail@plt+0x33fc>
   1a4b0:	cmp	r0, #0
   1a4b4:	mov	r9, r0
   1a4b8:	str	r0, [sp, #52]	; 0x34
   1a4bc:	movne	r3, #12
   1a4c0:	bne	1a414 <__assert_fail@plt+0x9110>
   1a4c4:	ldr	r3, [r4, #4]
   1a4c8:	mov	r2, #12
   1a4cc:	cmp	r9, r3
   1a4d0:	bge	1a454 <__assert_fail@plt+0x9150>
   1a4d4:	ldr	r3, [r4, #8]
   1a4d8:	mov	r0, sl
   1a4dc:	ldr	r1, [r3, r9, lsl #2]
   1a4e0:	ldr	r3, [r8, #28]
   1a4e4:	mla	r1, r2, r1, r3
   1a4e8:	bl	17404 <__assert_fail@plt+0x6100>
   1a4ec:	cmp	r0, #0
   1a4f0:	str	r0, [sp, #52]	; 0x34
   1a4f4:	addeq	r9, r9, #1
   1a4f8:	beq	1a4c4 <__assert_fail@plt+0x91c0>
   1a4fc:	mov	r3, #12
   1a500:	b	1a468 <__assert_fail@plt+0x9164>
   1a504:	ldr	r2, [sp, #12]
   1a508:	ldr	r3, [r6, #24]
   1a50c:	ldr	r3, [r3, r2, lsl #2]
   1a510:	mov	r2, #24
   1a514:	mul	r3, r2, r3
   1a518:	ldr	r2, [sp, #16]
   1a51c:	add	r2, r2, r3
   1a520:	ldr	r1, [r2, #8]
   1a524:	cmp	r5, r1
   1a528:	bgt	1a538 <__assert_fail@plt+0x9234>
   1a52c:	ldr	r3, [sp, #12]
   1a530:	add	r3, r3, #1
   1a534:	b	1a488 <__assert_fail@plt+0x9184>
   1a538:	ldr	r1, [r2, #4]
   1a53c:	cmp	r5, r1
   1a540:	bgt	1a52c <__assert_fail@plt+0x9228>
   1a544:	ldr	r1, [sp, #16]
   1a548:	ldr	r0, [r8]
   1a54c:	ldr	r3, [r1, r3]
   1a550:	ldr	r9, [r0, r3, lsl #3]
   1a554:	ldr	r3, [r2, #12]
   1a558:	cmp	r5, r3
   1a55c:	movne	sl, #0
   1a560:	bne	1a6a4 <__assert_fail@plt+0x93a0>
   1a564:	ldr	lr, [r4, #4]
   1a568:	mvn	sl, #0
   1a56c:	mov	r2, #0
   1a570:	mov	r1, sl
   1a574:	cmp	r2, lr
   1a578:	blt	1a594 <__assert_fail@plt+0x9290>
   1a57c:	cmp	r1, #0
   1a580:	bge	1a5d8 <__assert_fail@plt+0x92d4>
   1a584:	cmp	sl, #0
   1a588:	blt	1a52c <__assert_fail@plt+0x9228>
   1a58c:	mov	r9, #0
   1a590:	b	1a670 <__assert_fail@plt+0x936c>
   1a594:	ldr	r3, [r4, #8]
   1a598:	ldr	r3, [r3, r2, lsl #2]
   1a59c:	add	ip, r0, r3, lsl #3
   1a5a0:	ldrb	ip, [ip, #4]
   1a5a4:	cmp	ip, #8
   1a5a8:	bne	1a5c0 <__assert_fail@plt+0x92bc>
   1a5ac:	ldr	ip, [r0, r3, lsl #3]
   1a5b0:	cmp	r9, ip
   1a5b4:	moveq	r1, r3
   1a5b8:	add	r2, r2, #1
   1a5bc:	b	1a574 <__assert_fail@plt+0x9270>
   1a5c0:	cmp	ip, #9
   1a5c4:	bne	1a5b8 <__assert_fail@plt+0x92b4>
   1a5c8:	ldr	ip, [r0, r3, lsl #3]
   1a5cc:	cmp	r9, ip
   1a5d0:	moveq	sl, r3
   1a5d4:	b	1a5b8 <__assert_fail@plt+0x92b4>
   1a5d8:	mov	r3, fp
   1a5dc:	mov	r2, r4
   1a5e0:	mov	r0, r8
   1a5e4:	bl	16b10 <__assert_fail@plt+0x580c>
   1a5e8:	subs	r3, r0, #0
   1a5ec:	beq	1a584 <__assert_fail@plt+0x9280>
   1a5f0:	cmp	r3, #0
   1a5f4:	str	r3, [sp, #48]	; 0x30
   1a5f8:	beq	1a3f0 <__assert_fail@plt+0x90ec>
   1a5fc:	b	1a414 <__assert_fail@plt+0x9110>
   1a600:	ldr	r3, [r4, #8]
   1a604:	mov	r1, sl
   1a608:	ldr	r0, [r8, #28]
   1a60c:	ldr	r3, [r3, r9, lsl #2]
   1a610:	str	r3, [sp, #20]
   1a614:	mov	r3, #12
   1a618:	ldr	r2, [sp, #20]
   1a61c:	mul	r3, r3, r2
   1a620:	add	r0, r0, r3
   1a624:	str	r3, [sp, #28]
   1a628:	bl	13d28 <__assert_fail@plt+0x2a24>
   1a62c:	cmp	r0, #0
   1a630:	bne	1a66c <__assert_fail@plt+0x9368>
   1a634:	ldr	r0, [r8, #24]
   1a638:	ldr	r3, [sp, #28]
   1a63c:	add	r0, r0, r3
   1a640:	bl	13d28 <__assert_fail@plt+0x2a24>
   1a644:	cmp	r0, #0
   1a648:	bne	1a66c <__assert_fail@plt+0x9368>
   1a64c:	mov	r3, fp
   1a650:	mov	r2, r4
   1a654:	ldr	r1, [sp, #20]
   1a658:	mov	r0, r8
   1a65c:	bl	16b10 <__assert_fail@plt+0x580c>
   1a660:	subs	r3, r0, #0
   1a664:	bne	1a5f0 <__assert_fail@plt+0x92ec>
   1a668:	sub	r9, r9, #1
   1a66c:	add	r9, r9, #1
   1a670:	ldr	r3, [r4, #4]
   1a674:	cmp	r9, r3
   1a678:	blt	1a600 <__assert_fail@plt+0x92fc>
   1a67c:	b	1a52c <__assert_fail@plt+0x9228>
   1a680:	ldr	r3, [r4, #8]
   1a684:	ldr	r2, [r8]
   1a688:	ldr	r1, [r3, sl, lsl #2]
   1a68c:	add	r3, r2, r1, lsl #3
   1a690:	ldrb	r3, [r3, #4]
   1a694:	sub	r3, r3, #8
   1a698:	cmp	r3, #1
   1a69c:	bls	1a6b4 <__assert_fail@plt+0x93b0>
   1a6a0:	add	sl, sl, #1
   1a6a4:	ldr	r3, [r4, #4]
   1a6a8:	cmp	sl, r3
   1a6ac:	blt	1a680 <__assert_fail@plt+0x937c>
   1a6b0:	b	1a52c <__assert_fail@plt+0x9228>
   1a6b4:	ldr	r3, [r2, r1, lsl #3]
   1a6b8:	cmp	r9, r3
   1a6bc:	bne	1a6a0 <__assert_fail@plt+0x939c>
   1a6c0:	mov	r3, fp
   1a6c4:	mov	r2, r4
   1a6c8:	mov	r0, r8
   1a6cc:	bl	16b10 <__assert_fail@plt+0x580c>
   1a6d0:	subs	r3, r0, #0
   1a6d4:	beq	1a6a0 <__assert_fail@plt+0x939c>
   1a6d8:	b	1a5f0 <__assert_fail@plt+0x92ec>
   1a6dc:	cmp	fp, #0
   1a6e0:	moveq	r3, fp
   1a6e4:	beq	1a414 <__assert_fail@plt+0x9110>
   1a6e8:	ldr	r3, [r7, #100]	; 0x64
   1a6ec:	ldr	r3, [r3, r5, lsl #2]
   1a6f0:	ldrb	r3, [r3, #52]	; 0x34
   1a6f4:	ands	r3, r3, #64	; 0x40
   1a6f8:	beq	1a414 <__assert_fail@plt+0x9110>
   1a6fc:	mov	r1, r5
   1a700:	mov	r0, r7
   1a704:	bl	14194 <__assert_fail@plt+0x2e90>
   1a708:	cmn	r0, #1
   1a70c:	mov	r2, #0
   1a710:	str	r0, [sp, #16]
   1a714:	mov	r3, r0
   1a718:	moveq	r3, r2
   1a71c:	beq	1a414 <__assert_fail@plt+0x9110>
   1a720:	ldr	r1, [sp, #16]
   1a724:	mov	r3, #24
   1a728:	str	r2, [sp, #12]
   1a72c:	ldr	sl, [r7, #84]	; 0x54
   1a730:	str	r2, [sp, #52]	; 0x34
   1a734:	mul	r3, r3, r1
   1a738:	str	r3, [sp, #28]
   1a73c:	add	r3, r6, #16
   1a740:	str	r3, [sp, #20]
   1a744:	ldr	r3, [fp, #4]
   1a748:	ldr	r2, [sp, #12]
   1a74c:	cmp	r2, r3
   1a750:	movge	r3, #0
   1a754:	bge	1a890 <__assert_fail@plt+0x958c>
   1a758:	ldr	r3, [fp, #8]
   1a75c:	ldr	r2, [sp, #12]
   1a760:	ldr	r8, [r3, r2, lsl #2]
   1a764:	ldr	r3, [sl]
   1a768:	ldr	r2, [r6, #8]
   1a76c:	add	r3, r3, r8, lsl #3
   1a770:	cmp	r8, r2
   1a774:	ldrb	r3, [r3, #4]
   1a778:	bne	1a798 <__assert_fail@plt+0x9494>
   1a77c:	ldr	r2, [r6, #12]
   1a780:	cmp	r5, r2
   1a784:	bne	1a798 <__assert_fail@plt+0x9494>
   1a788:	ldr	r3, [sp, #12]
   1a78c:	add	r3, r3, #1
   1a790:	str	r3, [sp, #12]
   1a794:	b	1a744 <__assert_fail@plt+0x9440>
   1a798:	cmp	r3, #4
   1a79c:	bne	1a788 <__assert_fail@plt+0x9484>
   1a7a0:	ldr	r4, [r7, #116]	; 0x74
   1a7a4:	ldr	r3, [sp, #28]
   1a7a8:	ldr	r9, [sp, #16]
   1a7ac:	add	r4, r4, r3
   1a7b0:	mov	r3, #12
   1a7b4:	mul	r3, r3, r8
   1a7b8:	str	r3, [sp, #36]	; 0x24
   1a7bc:	lsl	r3, r8, #2
   1a7c0:	str	r3, [sp, #32]
   1a7c4:	ldr	r3, [r4]
   1a7c8:	cmp	r8, r3
   1a7cc:	bne	1a940 <__assert_fail@plt+0x963c>
   1a7d0:	ldrd	r2, [r4, #8]
   1a7d4:	sub	r3, r3, r2
   1a7d8:	cmp	r3, #0
   1a7dc:	add	r2, r5, r3
   1a7e0:	ldreq	r1, [sp, #36]	; 0x24
   1a7e4:	ldreq	r3, [sl, #20]
   1a7e8:	ldrne	r1, [sp, #32]
   1a7ec:	ldrne	r3, [sl, #12]
   1a7f0:	addeq	r3, r3, r1
   1a7f4:	ldreq	r3, [r3, #8]
   1a7f8:	ldrne	r3, [r3, r1]
   1a7fc:	ldr	r1, [r6, #12]
   1a800:	ldreq	r3, [r3]
   1a804:	cmp	r2, r1
   1a808:	bgt	1a940 <__assert_fail@plt+0x963c>
   1a80c:	ldr	r1, [r6]
   1a810:	str	r2, [sp, #44]	; 0x2c
   1a814:	ldr	r0, [r1, r2, lsl #2]
   1a818:	cmp	r0, #0
   1a81c:	beq	1a940 <__assert_fail@plt+0x963c>
   1a820:	mov	r1, r3
   1a824:	add	r0, r0, #4
   1a828:	str	r3, [sp, #40]	; 0x28
   1a82c:	bl	13d28 <__assert_fail@plt+0x2a24>
   1a830:	cmp	r0, #0
   1a834:	beq	1a940 <__assert_fail@plt+0x963c>
   1a838:	mov	r0, r7
   1a83c:	ldr	r1, [sp, #20]
   1a840:	ldr	r3, [sp, #40]	; 0x28
   1a844:	ldr	r2, [sp, #44]	; 0x2c
   1a848:	str	r3, [sp]
   1a84c:	mov	r3, r5
   1a850:	str	r2, [sp, #4]
   1a854:	mov	r2, r8
   1a858:	bl	14200 <__assert_fail@plt+0x2efc>
   1a85c:	cmp	r0, #0
   1a860:	bne	1a940 <__assert_fail@plt+0x963c>
   1a864:	ldr	r3, [sp, #52]	; 0x34
   1a868:	cmp	r3, #0
   1a86c:	beq	1a8b0 <__assert_fail@plt+0x95ac>
   1a870:	mov	r1, r9
   1a874:	add	r0, sp, #68	; 0x44
   1a878:	str	r8, [sp, #60]	; 0x3c
   1a87c:	str	r5, [sp, #64]	; 0x40
   1a880:	bl	1702c <__assert_fail@plt+0x5d28>
   1a884:	cmp	r0, #0
   1a888:	bne	1a8e4 <__assert_fail@plt+0x95e0>
   1a88c:	mov	r3, #12
   1a890:	ldr	r2, [sp, #52]	; 0x34
   1a894:	cmp	r2, #0
   1a898:	beq	1a414 <__assert_fail@plt+0x9110>
   1a89c:	ldr	r0, [sp, #76]	; 0x4c
   1a8a0:	str	r3, [sp, #12]
   1a8a4:	bl	1f990 <__assert_fail@plt+0xe68c>
   1a8a8:	ldr	r3, [sp, #12]
   1a8ac:	b	1a414 <__assert_fail@plt+0x9110>
   1a8b0:	mov	lr, r6
   1a8b4:	add	ip, sp, #52	; 0x34
   1a8b8:	ldm	lr!, {r0, r1, r2, r3}
   1a8bc:	stmia	ip!, {r0, r1, r2, r3}
   1a8c0:	ldr	r3, [sp, #20]
   1a8c4:	ldm	r3, {r0, r1, r2}
   1a8c8:	stm	ip, {r0, r1, r2}
   1a8cc:	mov	r1, r3
   1a8d0:	add	r0, sp, #68	; 0x44
   1a8d4:	bl	1650c <__assert_fail@plt+0x5208>
   1a8d8:	subs	r3, r0, #0
   1a8dc:	beq	1a870 <__assert_fail@plt+0x956c>
   1a8e0:	b	1a890 <__assert_fail@plt+0x958c>
   1a8e4:	ldr	r2, [sp, #24]
   1a8e8:	add	r1, sp, #52	; 0x34
   1a8ec:	mov	r0, r7
   1a8f0:	ldr	r3, [sp, #52]	; 0x34
   1a8f4:	ldr	r4, [r3, r2]
   1a8f8:	bl	1a978 <__assert_fail@plt+0x9674>
   1a8fc:	subs	r3, r0, #0
   1a900:	bne	1a890 <__assert_fail@plt+0x958c>
   1a904:	ldr	r1, [r6, #4]
   1a908:	cmp	r1, #0
   1a90c:	bne	1a95c <__assert_fail@plt+0x9658>
   1a910:	ldr	r2, [sp, #24]
   1a914:	mov	r1, r9
   1a918:	add	r0, sp, #68	; 0x44
   1a91c:	ldr	r3, [sp, #52]	; 0x34
   1a920:	str	r4, [r3, r2]
   1a924:	mov	r4, #24
   1a928:	bl	13d28 <__assert_fail@plt+0x2a24>
   1a92c:	sub	r1, r0, #1
   1a930:	add	r0, sp, #68	; 0x44
   1a934:	bl	1613c <__assert_fail@plt+0x4e38>
   1a938:	ldr	r3, [r7, #116]	; 0x74
   1a93c:	mla	r4, r4, r9, r3
   1a940:	ldrb	r3, [r4, #20]
   1a944:	add	r9, r9, #1
   1a948:	add	r2, r4, #24
   1a94c:	cmp	r3, #0
   1a950:	beq	1a788 <__assert_fail@plt+0x9484>
   1a954:	mov	r4, r2
   1a958:	b	1a7c4 <__assert_fail@plt+0x94c0>
   1a95c:	add	r3, r5, #1
   1a960:	mov	r0, sl
   1a964:	ldr	r2, [sp, #52]	; 0x34
   1a968:	bl	193a0 <__assert_fail@plt+0x809c>
   1a96c:	subs	r3, r0, #0
   1a970:	beq	1a910 <__assert_fail@plt+0x960c>
   1a974:	b	1a890 <__assert_fail@plt+0x958c>
   1a978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a97c:	sub	sp, sp, #52	; 0x34
   1a980:	mov	r6, r0
   1a984:	mov	r5, r1
   1a988:	add	r0, sp, #36	; 0x24
   1a98c:	ldr	r4, [r1, #12]
   1a990:	ldr	r1, [r1, #8]
   1a994:	bl	146c0 <__assert_fail@plt+0x33bc>
   1a998:	subs	r8, r0, #0
   1a99c:	bne	1a9d0 <__assert_fail@plt+0x96cc>
   1a9a0:	add	r3, sp, #36	; 0x24
   1a9a4:	mov	r2, r4
   1a9a8:	mov	r1, r5
   1a9ac:	mov	r0, r6
   1a9b0:	bl	1a398 <__assert_fail@plt+0x9094>
   1a9b4:	subs	r8, r0, #0
   1a9b8:	addeq	r3, r5, #16
   1a9bc:	moveq	fp, r8
   1a9c0:	streq	r3, [sp, #28]
   1a9c4:	beq	1ab98 <__assert_fail@plt+0x9894>
   1a9c8:	ldr	r0, [sp, #44]	; 0x2c
   1a9cc:	bl	1f990 <__assert_fail@plt+0xe68c>
   1a9d0:	mov	r0, r8
   1a9d4:	add	sp, sp, #52	; 0x34
   1a9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9dc:	mov	r3, #0
   1a9e0:	ldr	r2, [sp, #16]
   1a9e4:	sub	r4, r4, #1
   1a9e8:	str	r3, [sp, #40]	; 0x28
   1a9ec:	ldr	r3, [r6, #100]	; 0x64
   1a9f0:	add	r3, r3, r2
   1a9f4:	ldr	sl, [r3, #-4]
   1a9f8:	cmp	sl, #0
   1a9fc:	movne	r3, #0
   1aa00:	ldrne	r9, [r6, #84]	; 0x54
   1aa04:	bne	1aa80 <__assert_fail@plt+0x977c>
   1aa08:	add	r3, sp, #36	; 0x24
   1aa0c:	mov	r2, r4
   1aa10:	mov	r1, r5
   1aa14:	mov	r0, r6
   1aa18:	bl	1a398 <__assert_fail@plt+0x9094>
   1aa1c:	cmp	r0, #0
   1aa20:	beq	1ab98 <__assert_fail@plt+0x9894>
   1aa24:	mov	r8, r0
   1aa28:	b	1a9c8 <__assert_fail@plt+0x96c4>
   1aa2c:	ldr	r2, [sp, #12]
   1aa30:	ldr	r3, [sl, #24]
   1aa34:	ldr	r7, [r3, r2, lsl #2]
   1aa38:	lsl	r3, r7, #3
   1aa3c:	lsl	r2, r7, #3
   1aa40:	str	r3, [sp, #20]
   1aa44:	ldr	r3, [r9]
   1aa48:	add	r3, r3, r2
   1aa4c:	ldrb	r3, [r3, #6]
   1aa50:	tst	r3, #16
   1aa54:	bne	1aa98 <__assert_fail@plt+0x9794>
   1aa58:	ldr	r1, [r9]
   1aa5c:	lsl	r3, r7, #3
   1aa60:	mov	r2, r4
   1aa64:	mov	r0, r6
   1aa68:	add	r1, r1, r3
   1aa6c:	bl	17830 <__assert_fail@plt+0x652c>
   1aa70:	cmp	r0, #0
   1aa74:	bne	1ab38 <__assert_fail@plt+0x9834>
   1aa78:	ldr	r3, [sp, #12]
   1aa7c:	add	r3, r3, #1
   1aa80:	str	r3, [sp, #12]
   1aa84:	ldr	r2, [sp, #12]
   1aa88:	ldr	r3, [sl, #20]
   1aa8c:	cmp	r2, r3
   1aa90:	blt	1aa2c <__assert_fail@plt+0x9728>
   1aa94:	b	1aa08 <__assert_fail@plt+0x9704>
   1aa98:	ldr	r3, [r5, #12]
   1aa9c:	mov	r2, r6
   1aaa0:	mov	r1, r7
   1aaa4:	str	r3, [sp, #24]
   1aaa8:	ldr	r3, [r6, #84]	; 0x54
   1aaac:	str	r3, [sp, #20]
   1aab0:	mov	r3, r4
   1aab4:	ldr	r0, [sp, #20]
   1aab8:	bl	15ed4 <__assert_fail@plt+0x4bd0>
   1aabc:	subs	r3, r0, #0
   1aac0:	ble	1ab30 <__assert_fail@plt+0x982c>
   1aac4:	ldr	r1, [sp, #24]
   1aac8:	add	r2, r4, r3
   1aacc:	cmp	r1, r2
   1aad0:	blt	1ab08 <__assert_fail@plt+0x9804>
   1aad4:	ldr	r1, [r5]
   1aad8:	str	r3, [sp, #24]
   1aadc:	ldr	r0, [r1, r2, lsl #2]
   1aae0:	cmp	r0, #0
   1aae4:	beq	1aa58 <__assert_fail@plt+0x9754>
   1aae8:	ldr	r3, [sp, #20]
   1aaec:	add	r0, r0, #4
   1aaf0:	ldr	r2, [r3, #12]
   1aaf4:	ldr	r1, [r2, r7, lsl #2]
   1aaf8:	bl	13d28 <__assert_fail@plt+0x2a24>
   1aafc:	cmp	r0, #0
   1ab00:	ldrne	r3, [sp, #24]
   1ab04:	beq	1aa58 <__assert_fail@plt+0x9754>
   1ab08:	ldr	r2, [r5, #20]
   1ab0c:	cmp	r2, #0
   1ab10:	bne	1ab6c <__assert_fail@plt+0x9868>
   1ab14:	mov	r1, r7
   1ab18:	add	r0, sp, #36	; 0x24
   1ab1c:	bl	1702c <__assert_fail@plt+0x5d28>
   1ab20:	cmp	r0, #0
   1ab24:	bne	1aa78 <__assert_fail@plt+0x9774>
   1ab28:	mov	r8, #12
   1ab2c:	b	1a9c8 <__assert_fail@plt+0x96c4>
   1ab30:	beq	1aa58 <__assert_fail@plt+0x9754>
   1ab34:	b	1ab08 <__assert_fail@plt+0x9804>
   1ab38:	ldr	r3, [r5]
   1ab3c:	ldr	r2, [sp, #16]
   1ab40:	ldr	r0, [r3, r2]
   1ab44:	cmp	r0, #0
   1ab48:	beq	1aa78 <__assert_fail@plt+0x9774>
   1ab4c:	ldr	r3, [r9, #12]
   1ab50:	add	r0, r0, #4
   1ab54:	ldr	r1, [r3, r7, lsl #2]
   1ab58:	bl	13d28 <__assert_fail@plt+0x2a24>
   1ab5c:	cmp	r0, #0
   1ab60:	beq	1aa78 <__assert_fail@plt+0x9774>
   1ab64:	mov	r3, #1
   1ab68:	b	1ab08 <__assert_fail@plt+0x9804>
   1ab6c:	ldr	r2, [r9, #12]
   1ab70:	add	r3, r4, r3
   1ab74:	mov	r0, r6
   1ab78:	str	r7, [sp]
   1ab7c:	str	r4, [sp, #4]
   1ab80:	ldr	r1, [sp, #28]
   1ab84:	ldr	r2, [r2, r7, lsl #2]
   1ab88:	bl	14200 <__assert_fail@plt+0x2efc>
   1ab8c:	cmp	r0, #0
   1ab90:	beq	1ab14 <__assert_fail@plt+0x9810>
   1ab94:	b	1aa78 <__assert_fail@plt+0x9774>
   1ab98:	cmp	r4, #0
   1ab9c:	ble	1a9c8 <__assert_fail@plt+0x96c4>
   1aba0:	ldr	r0, [r5]
   1aba4:	lsl	r3, r4, #2
   1aba8:	str	r3, [sp, #16]
   1abac:	ldr	r3, [r0, r4, lsl #2]
   1abb0:	cmp	r3, #0
   1abb4:	ldr	r3, [r6, #120]	; 0x78
   1abb8:	addeq	fp, fp, #1
   1abbc:	movne	fp, #0
   1abc0:	cmp	r3, fp
   1abc4:	bge	1a9dc <__assert_fail@plt+0x96d8>
   1abc8:	mov	r1, #0
   1abcc:	ldr	r2, [sp, #16]
   1abd0:	bl	11208 <memset@plt>
   1abd4:	b	1a9c8 <__assert_fail@plt+0x96c4>
   1abd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abdc:	sub	sp, sp, #412	; 0x19c
   1abe0:	mov	sl, r0
   1abe4:	add	r4, sp, #448	; 0x1c0
   1abe8:	mov	r7, r3
   1abec:	str	r2, [sp, #24]
   1abf0:	mov	r2, #136	; 0x88
   1abf4:	str	r1, [sp, #40]	; 0x28
   1abf8:	mov	r1, #0
   1abfc:	ldr	fp, [r0]
   1ac00:	add	r0, sp, #132	; 0x84
   1ac04:	ldm	r4, {r4, r6, r8}
   1ac08:	ldr	r5, [sp, #460]	; 0x1cc
   1ac0c:	bl	11208 <memset@plt>
   1ac10:	ldr	r3, [sl, #16]
   1ac14:	cmp	r3, #0
   1ac18:	str	r3, [sp, #16]
   1ac1c:	str	fp, [sp, #216]	; 0xd8
   1ac20:	beq	1ac48 <__assert_fail@plt+0x9944>
   1ac24:	ldrb	r2, [sl, #28]
   1ac28:	subs	r3, r7, r4
   1ac2c:	movne	r3, #1
   1ac30:	ands	r3, r3, r2, lsr #3
   1ac34:	beq	1ac44 <__assert_fail@plt+0x9940>
   1ac38:	tst	r2, #1
   1ac3c:	ldr	r3, [sp, #16]
   1ac40:	movne	r3, #0
   1ac44:	str	r3, [sp, #16]
   1ac48:	ldr	r3, [sl, #24]
   1ac4c:	cmp	r3, r8
   1ac50:	subcc	r2, r8, #1
   1ac54:	movcs	r3, #0
   1ac58:	subcc	r3, r2, r3
   1ac5c:	str	r3, [sp, #56]	; 0x38
   1ac60:	ldr	r3, [sl, #8]
   1ac64:	cmp	r3, #0
   1ac68:	beq	1c1bc <__assert_fail@plt+0xaeb8>
   1ac6c:	ldr	r1, [fp, #36]	; 0x24
   1ac70:	cmp	r1, #0
   1ac74:	beq	1c1bc <__assert_fail@plt+0xaeb8>
   1ac78:	ldr	r2, [fp, #40]	; 0x28
   1ac7c:	cmp	r2, #0
   1ac80:	beq	1c1bc <__assert_fail@plt+0xaeb8>
   1ac84:	ldr	r3, [fp, #44]	; 0x2c
   1ac88:	cmp	r3, #0
   1ac8c:	beq	1c1bc <__assert_fail@plt+0xaeb8>
   1ac90:	ldr	r0, [fp, #48]	; 0x30
   1ac94:	cmp	r0, #0
   1ac98:	beq	1c1bc <__assert_fail@plt+0xaeb8>
   1ac9c:	ldr	r1, [r1, #8]
   1aca0:	cmp	r1, #0
   1aca4:	bne	1ace8 <__assert_fail@plt+0x99e4>
   1aca8:	ldr	r2, [r2, #8]
   1acac:	cmp	r2, #0
   1acb0:	bne	1ace8 <__assert_fail@plt+0x99e4>
   1acb4:	ldr	r3, [r3, #8]
   1acb8:	cmp	r3, #0
   1acbc:	beq	1accc <__assert_fail@plt+0x99c8>
   1acc0:	ldrsb	r3, [sl, #28]
   1acc4:	cmp	r3, #0
   1acc8:	blt	1ace8 <__assert_fail@plt+0x99e4>
   1accc:	adds	r4, r4, #0
   1acd0:	movne	r4, #1
   1acd4:	cmp	r7, #0
   1acd8:	moveq	r4, #0
   1acdc:	cmp	r4, #0
   1ace0:	bne	1c1bc <__assert_fail@plt+0xaeb8>
   1ace4:	mov	r7, r4
   1ace8:	ldr	r3, [sp, #56]	; 0x38
   1acec:	subs	r3, r8, r3
   1acf0:	str	r3, [sp, #8]
   1acf4:	movne	r3, #1
   1acf8:	bne	1ad08 <__assert_fail@plt+0x9a04>
   1acfc:	ldr	r3, [fp, #76]	; 0x4c
   1ad00:	adds	r3, r3, #0
   1ad04:	movne	r3, #1
   1ad08:	str	r3, [sp, #36]	; 0x24
   1ad0c:	ldr	ip, [sp, #40]	; 0x28
   1ad10:	ldr	r2, [sl, #12]
   1ad14:	ldr	r3, [sl, #20]
   1ad18:	ldr	r0, [fp, #92]	; 0x5c
   1ad1c:	ldr	r1, [sp, #24]
   1ad20:	str	ip, [sp, #132]	; 0x84
   1ad24:	ldr	ip, [sp, #24]
   1ad28:	str	r3, [sp, #20]
   1ad2c:	ldr	r3, [fp, #8]
   1ad30:	add	r1, r1, #1
   1ad34:	str	ip, [sp, #176]	; 0xb0
   1ad38:	str	ip, [sp, #180]	; 0xb4
   1ad3c:	ldr	ip, [sp, #20]
   1ad40:	add	r3, r3, #1
   1ad44:	cmp	r3, r0
   1ad48:	movlt	r3, r0
   1ad4c:	str	ip, [sp, #196]	; 0xc4
   1ad50:	and	ip, r2, #4194304	; 0x400000
   1ad54:	ubfx	r2, r2, #22, #1
   1ad58:	str	r0, [sp, #212]	; 0xd4
   1ad5c:	strb	r2, [sp, #204]	; 0xcc
   1ad60:	ldr	r2, [sp, #20]
   1ad64:	orrs	r2, r2, ip
   1ad68:	movne	r2, #1
   1ad6c:	moveq	r2, #0
   1ad70:	cmp	r3, r1
   1ad74:	strb	r2, [sp, #207]	; 0xcf
   1ad78:	movlt	r1, r3
   1ad7c:	ldrb	r2, [fp, #88]	; 0x58
   1ad80:	ubfx	r0, r2, #2, #1
   1ad84:	ubfx	r2, r2, #3, #1
   1ad88:	strb	r0, [sp, #205]	; 0xcd
   1ad8c:	add	r0, sp, #132	; 0x84
   1ad90:	strb	r2, [sp, #206]	; 0xce
   1ad94:	ldr	r2, [sp, #24]
   1ad98:	str	r2, [sp, #184]	; 0xb8
   1ad9c:	str	r2, [sp, #188]	; 0xbc
   1ada0:	bl	142d0 <__assert_fail@plt+0x2fcc>
   1ada4:	cmp	r0, #0
   1ada8:	bne	1be98 <__assert_fail@plt+0xab94>
   1adac:	add	r3, fp, #96	; 0x60
   1adb0:	str	r3, [sp, #200]	; 0xc8
   1adb4:	ldrb	r3, [fp, #88]	; 0x58
   1adb8:	ubfx	r3, r3, #4, #1
   1adbc:	strb	r3, [sp, #210]	; 0xd2
   1adc0:	ldrb	r3, [sp, #207]	; 0xcf
   1adc4:	cmp	r3, #0
   1adc8:	ldrne	r2, [sp, #136]	; 0x88
   1adcc:	ldreq	r2, [sp, #40]	; 0x28
   1add0:	cmp	r3, #0
   1add4:	movne	r3, #0
   1add8:	str	r2, [sp, #136]	; 0x88
   1addc:	bne	1adf0 <__assert_fail@plt+0x9aec>
   1ade0:	ldr	r3, [fp, #92]	; 0x5c
   1ade4:	cmp	r3, #1
   1ade8:	ldr	r3, [sp, #24]
   1adec:	movgt	r3, #0
   1adf0:	str	r3, [sp, #160]	; 0xa0
   1adf4:	str	r3, [sp, #164]	; 0xa4
   1adf8:	ldrb	r3, [sl, #28]
   1adfc:	str	r6, [sp, #184]	; 0xb8
   1ae00:	str	r6, [sp, #188]	; 0xbc
   1ae04:	ubfx	r3, r3, #7, #1
   1ae08:	strb	r3, [sp, #209]	; 0xd1
   1ae0c:	ldr	r8, [fp, #76]	; 0x4c
   1ae10:	ldr	r3, [sp, #464]	; 0x1d0
   1ae14:	lsl	r6, r8, #1
   1ae18:	str	r3, [sp, #220]	; 0xdc
   1ae1c:	mvn	r3, #0
   1ae20:	cmp	r6, #0
   1ae24:	str	r3, [sp, #224]	; 0xe0
   1ae28:	bgt	1aeb0 <__assert_fail@plt+0x9bac>
   1ae2c:	mov	r3, #1
   1ae30:	str	r6, [sp, #244]	; 0xf4
   1ae34:	str	r3, [sp, #252]	; 0xfc
   1ae38:	ldr	r3, [sp, #8]
   1ae3c:	str	r6, [sp, #260]	; 0x104
   1ae40:	cmp	r3, #1
   1ae44:	bhi	1aef4 <__assert_fail@plt+0x9bf0>
   1ae48:	ldrb	r3, [fp, #88]	; 0x58
   1ae4c:	tst	r3, #2
   1ae50:	bne	1aef4 <__assert_fail@plt+0x9bf0>
   1ae54:	ldr	r3, [sp, #464]	; 0x1d0
   1ae58:	str	r7, [sp, #100]	; 0x64
   1ae5c:	tst	r3, #1
   1ae60:	movne	r3, #4
   1ae64:	moveq	r3, #6
   1ae68:	cmp	r7, r4
   1ae6c:	str	r3, [sp, #192]	; 0xc0
   1ae70:	mvngt	r3, #0
   1ae74:	movle	r3, #1
   1ae78:	str	r3, [sp, #76]	; 0x4c
   1ae7c:	movlt	r3, r7
   1ae80:	movge	r3, r4
   1ae84:	str	r3, [sp, #60]	; 0x3c
   1ae88:	movge	r3, r7
   1ae8c:	movlt	r3, r4
   1ae90:	str	r3, [sp, #28]
   1ae94:	ldr	r3, [fp, #92]	; 0x5c
   1ae98:	str	r3, [sp, #72]	; 0x48
   1ae9c:	ldr	r3, [sp, #16]
   1aea0:	cmp	r3, #0
   1aea4:	bne	1af1c <__assert_fail@plt+0x9c18>
   1aea8:	mov	r3, #8
   1aeac:	b	1af60 <__assert_fail@plt+0x9c5c>
   1aeb0:	ldr	r3, [pc, #4072]	; 1bea0 <__assert_fail@plt+0xab9c>
   1aeb4:	cmp	r6, r3
   1aeb8:	ble	1aec4 <__assert_fail@plt+0x9bc0>
   1aebc:	mov	r3, #12
   1aec0:	b	1b048 <__assert_fail@plt+0x9d44>
   1aec4:	mov	r0, #24
   1aec8:	mul	r0, r0, r6
   1aecc:	bl	1f810 <__assert_fail@plt+0xe50c>
   1aed0:	str	r0, [sp, #248]	; 0xf8
   1aed4:	lsl	r0, r8, #3
   1aed8:	bl	1f810 <__assert_fail@plt+0xe50c>
   1aedc:	ldr	r3, [sp, #248]	; 0xf8
   1aee0:	str	r0, [sp, #264]	; 0x108
   1aee4:	cmp	r0, #0
   1aee8:	cmpne	r3, #0
   1aeec:	bne	1ae2c <__assert_fail@plt+0x9b28>
   1aef0:	b	1aebc <__assert_fail@plt+0x9bb8>
   1aef4:	ldr	r0, [sp, #168]	; 0xa8
   1aef8:	cmn	r0, #-1073741822	; 0xc0000002
   1aefc:	bhi	1aebc <__assert_fail@plt+0x9bb8>
   1af00:	add	r0, r0, #1
   1af04:	lsl	r0, r0, #2
   1af08:	bl	1f810 <__assert_fail@plt+0xe50c>
   1af0c:	cmp	r0, #0
   1af10:	str	r0, [sp, #232]	; 0xe8
   1af14:	bne	1ae54 <__assert_fail@plt+0x9b50>
   1af18:	b	1aebc <__assert_fail@plt+0x9bb8>
   1af1c:	ldr	r3, [sp, #72]	; 0x48
   1af20:	cmp	r3, #1
   1af24:	moveq	r3, #4
   1af28:	beq	1af44 <__assert_fail@plt+0x9c40>
   1af2c:	ldr	r3, [sl, #12]
   1af30:	ldr	r2, [sp, #20]
   1af34:	and	r3, r3, #4194304	; 0x400000
   1af38:	orrs	r3, r2, r3
   1af3c:	moveq	r3, #4
   1af40:	movne	r3, #0
   1af44:	ldr	r1, [sp, #20]
   1af48:	cmp	r7, r4
   1af4c:	movle	r2, #2
   1af50:	movgt	r2, #0
   1af54:	cmp	r1, #0
   1af58:	orrne	r3, r3, #1
   1af5c:	orr	r3, r3, r2
   1af60:	cmp	r7, r4
   1af64:	str	r3, [sp, #80]	; 0x50
   1af68:	add	r3, sp, #408	; 0x198
   1af6c:	suble	r3, r3, #308	; 0x134
   1af70:	movgt	r3, #0
   1af74:	str	r3, [sp, #84]	; 0x54
   1af78:	adds	r3, r3, #0
   1af7c:	movne	r3, #1
   1af80:	str	r3, [sp, #88]	; 0x58
   1af84:	ldr	r2, [sp, #28]
   1af88:	ldr	r1, [sp, #60]	; 0x3c
   1af8c:	ldr	r3, [sp, #100]	; 0x64
   1af90:	cmp	r3, r2
   1af94:	movle	r2, #0
   1af98:	movgt	r2, #1
   1af9c:	cmp	r3, r1
   1afa0:	orrlt	r2, r2, #1
   1afa4:	cmp	r2, #0
   1afa8:	str	r2, [sp, #32]
   1afac:	bne	1b044 <__assert_fail@plt+0x9d40>
   1afb0:	ldr	r2, [sp, #80]	; 0x50
   1afb4:	sub	r2, r2, #4
   1afb8:	cmp	r2, #4
   1afbc:	ldrls	pc, [pc, r2, lsl #2]
   1afc0:	b	1b160 <__assert_fail@plt+0x9e5c>
   1afc4:	andeq	fp, r1, r4, asr #1
   1afc8:	andeq	fp, r1, r4, asr #1
   1afcc:	andeq	fp, r1, ip, lsl #1
   1afd0:	ldrdeq	sl, [r1], -r8
   1afd4:	andeq	fp, r1, r0, lsl #4
   1afd8:	mov	r2, #0
   1afdc:	ldr	r0, [sp, #28]
   1afe0:	mov	r1, r3
   1afe4:	cmp	r0, r3
   1afe8:	bgt	1b0ec <__assert_fail@plt+0x9de8>
   1afec:	cmp	r2, #0
   1aff0:	strne	r3, [sp, #100]	; 0x64
   1aff4:	ldr	r2, [sp, #28]
   1aff8:	ldr	r3, [sp, #100]	; 0x64
   1affc:	cmp	r3, r2
   1b000:	bne	1b200 <__assert_fail@plt+0x9efc>
   1b004:	mov	r3, r2
   1b008:	ldr	r1, [sp, #20]
   1b00c:	ldr	r2, [sp, #24]
   1b010:	cmp	r3, r2
   1b014:	ldrlt	r3, [sp, #40]	; 0x28
   1b018:	movge	r3, #0
   1b01c:	ldrlt	r2, [sp, #28]
   1b020:	ldrblt	r3, [r3, r2]
   1b024:	cmp	r1, #0
   1b028:	mov	r2, r3
   1b02c:	movne	r2, r1
   1b030:	ldrbne	r2, [r2, r3]
   1b034:	ldr	r3, [sp, #16]
   1b038:	ldrb	r3, [r3, r2]
   1b03c:	cmp	r3, #0
   1b040:	bne	1b200 <__assert_fail@plt+0x9efc>
   1b044:	mov	r3, #1
   1b048:	str	r3, [sp, #12]
   1b04c:	ldr	r0, [sp, #232]	; 0xe8
   1b050:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b054:	ldr	r3, [fp, #76]	; 0x4c
   1b058:	cmp	r3, #0
   1b05c:	beq	1b078 <__assert_fail@plt+0x9d74>
   1b060:	add	r0, sp, #132	; 0x84
   1b064:	bl	1519c <__assert_fail@plt+0x3e98>
   1b068:	ldr	r0, [sp, #264]	; 0x108
   1b06c:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b070:	ldr	r0, [sp, #248]	; 0xf8
   1b074:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b078:	add	r0, sp, #132	; 0x84
   1b07c:	bl	1516c <__assert_fail@plt+0x3e68>
   1b080:	ldr	r0, [sp, #12]
   1b084:	add	sp, sp, #412	; 0x19c
   1b088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b08c:	mov	r2, #0
   1b090:	ldr	r0, [sp, #28]
   1b094:	mov	r1, r3
   1b098:	cmp	r0, r3
   1b09c:	ble	1afec <__assert_fail@plt+0x9ce8>
   1b0a0:	ldr	ip, [sp, #16]
   1b0a4:	ldr	r0, [sp, #40]	; 0x28
   1b0a8:	ldrb	r0, [r0, r3]
   1b0ac:	add	r3, r3, #1
   1b0b0:	ldrb	r0, [ip, r0]
   1b0b4:	cmp	r0, #0
   1b0b8:	bne	1b110 <__assert_fail@plt+0x9e0c>
   1b0bc:	mov	r2, #1
   1b0c0:	b	1b090 <__assert_fail@plt+0x9d8c>
   1b0c4:	mov	r2, #0
   1b0c8:	ldr	r1, [sp, #60]	; 0x3c
   1b0cc:	mov	ip, r3
   1b0d0:	cmp	r1, r3
   1b0d4:	ble	1b11c <__assert_fail@plt+0x9e18>
   1b0d8:	cmp	r2, #0
   1b0dc:	strne	r3, [sp, #100]	; 0x64
   1b0e0:	b	1b044 <__assert_fail@plt+0x9d40>
   1b0e4:	mov	r2, #1
   1b0e8:	b	1afdc <__assert_fail@plt+0x9cd8>
   1b0ec:	ldr	ip, [sp, #20]
   1b0f0:	ldr	r0, [sp, #40]	; 0x28
   1b0f4:	ldrb	r0, [r0, r3]
   1b0f8:	add	r3, r3, #1
   1b0fc:	ldrb	r0, [ip, r0]
   1b100:	ldr	ip, [sp, #16]
   1b104:	ldrb	r0, [ip, r0]
   1b108:	cmp	r0, #0
   1b10c:	beq	1b0e4 <__assert_fail@plt+0x9de0>
   1b110:	cmp	r2, #0
   1b114:	strne	r1, [sp, #100]	; 0x64
   1b118:	b	1aff4 <__assert_fail@plt+0x9cf0>
   1b11c:	ldr	lr, [sp, #20]
   1b120:	ldr	r1, [sp, #24]
   1b124:	cmp	r1, r3
   1b128:	ldrgt	r1, [sp, #40]	; 0x28
   1b12c:	movle	r1, #0
   1b130:	ldrbgt	r1, [r1, r3]
   1b134:	cmp	lr, #0
   1b138:	sub	r3, r3, #1
   1b13c:	mov	r0, r1
   1b140:	movne	r0, lr
   1b144:	ldrbne	r0, [r0, r1]
   1b148:	ldr	r1, [sp, #16]
   1b14c:	ldrb	r1, [r1, r0]
   1b150:	cmp	r1, #0
   1b154:	bne	1b1f8 <__assert_fail@plt+0x9ef4>
   1b158:	mov	r2, #1
   1b15c:	b	1b0c8 <__assert_fail@plt+0x9dc4>
   1b160:	ldr	r4, [sp, #100]	; 0x64
   1b164:	ldr	r3, [sp, #156]	; 0x9c
   1b168:	ldr	r2, [sp, #164]	; 0xa4
   1b16c:	sub	r3, r4, r3
   1b170:	cmp	r2, r3
   1b174:	bhi	1b19c <__assert_fail@plt+0x9e98>
   1b178:	mov	r1, r4
   1b17c:	add	r0, sp, #132	; 0x84
   1b180:	ldr	r2, [sp, #464]	; 0x1d0
   1b184:	bl	17950 <__assert_fail@plt+0x664c>
   1b188:	subs	r3, r0, #0
   1b18c:	str	r3, [sp, #12]
   1b190:	bne	1b04c <__assert_fail@plt+0x9d48>
   1b194:	ldr	r3, [sp, #156]	; 0x9c
   1b198:	sub	r3, r4, r3
   1b19c:	ldr	r2, [sp, #160]	; 0xa0
   1b1a0:	cmp	r2, r3
   1b1a4:	ldrhi	r2, [sp, #136]	; 0x88
   1b1a8:	movls	r3, #0
   1b1ac:	ldrbhi	r3, [r2, r3]
   1b1b0:	ldr	r2, [sp, #16]
   1b1b4:	ldrb	r3, [r2, r3]
   1b1b8:	cmp	r3, #0
   1b1bc:	bne	1b200 <__assert_fail@plt+0x9efc>
   1b1c0:	ldr	r2, [sp, #60]	; 0x3c
   1b1c4:	ldr	r3, [sp, #76]	; 0x4c
   1b1c8:	add	r4, r4, r3
   1b1cc:	ldr	r3, [sp, #28]
   1b1d0:	str	r4, [sp, #100]	; 0x64
   1b1d4:	cmp	r4, r3
   1b1d8:	movle	r3, #0
   1b1dc:	movgt	r3, #1
   1b1e0:	cmp	r4, r2
   1b1e4:	movge	r4, r3
   1b1e8:	orrlt	r4, r3, #1
   1b1ec:	cmp	r4, #0
   1b1f0:	beq	1b160 <__assert_fail@plt+0x9e5c>
   1b1f4:	b	1b044 <__assert_fail@plt+0x9d40>
   1b1f8:	cmp	r2, #0
   1b1fc:	strne	ip, [sp, #100]	; 0x64
   1b200:	add	r0, sp, #132	; 0x84
   1b204:	ldr	r1, [sp, #100]	; 0x64
   1b208:	ldr	r2, [sp, #464]	; 0x1d0
   1b20c:	bl	17950 <__assert_fail@plt+0x664c>
   1b210:	subs	r3, r0, #0
   1b214:	str	r3, [sp, #12]
   1b218:	bne	1b04c <__assert_fail@plt+0x9d48>
   1b21c:	ldr	r3, [sp, #72]	; 0x48
   1b220:	cmp	r3, #1
   1b224:	beq	1b244 <__assert_fail@plt+0x9f40>
   1b228:	ldr	r3, [sp, #160]	; 0xa0
   1b22c:	cmp	r3, #0
   1b230:	beq	1b244 <__assert_fail@plt+0x9f40>
   1b234:	ldr	r3, [sp, #140]	; 0x8c
   1b238:	ldr	r3, [r3]
   1b23c:	cmn	r3, #1
   1b240:	beq	1b350 <__assert_fail@plt+0xa04c>
   1b244:	mov	r3, #0
   1b248:	ldr	r9, [sp, #172]	; 0xac
   1b24c:	ldr	r4, [sp, #216]	; 0xd8
   1b250:	ldr	r6, [r4, #36]	; 0x24
   1b254:	str	r3, [sp, #108]	; 0x6c
   1b258:	str	r3, [sp, #236]	; 0xec
   1b25c:	str	r3, [sp, #240]	; 0xf0
   1b260:	str	r3, [sp, #252]	; 0xfc
   1b264:	ldrsb	r3, [r6, #52]	; 0x34
   1b268:	cmp	r3, #0
   1b26c:	bge	1b2d8 <__assert_fail@plt+0x9fd4>
   1b270:	sub	r1, r9, #1
   1b274:	add	r0, sp, #132	; 0x84
   1b278:	ldr	r2, [sp, #220]	; 0xdc
   1b27c:	bl	17750 <__assert_fail@plt+0x644c>
   1b280:	tst	r0, #1
   1b284:	mov	r3, r0
   1b288:	ldrne	r6, [r4, #40]	; 0x28
   1b28c:	bne	1b2d0 <__assert_fail@plt+0x9fcc>
   1b290:	cmp	r0, #0
   1b294:	beq	1b2d8 <__assert_fail@plt+0x9fd4>
   1b298:	and	r2, r0, #6
   1b29c:	cmp	r2, #6
   1b2a0:	ldreq	r6, [r4, #48]	; 0x30
   1b2a4:	beq	1b2d0 <__assert_fail@plt+0x9fcc>
   1b2a8:	tst	r0, #2
   1b2ac:	ldrne	r6, [r4, #44]	; 0x2c
   1b2b0:	bne	1b2d0 <__assert_fail@plt+0x9fcc>
   1b2b4:	tst	r0, #4
   1b2b8:	beq	1b2d8 <__assert_fail@plt+0x9fd4>
   1b2bc:	mov	r1, r4
   1b2c0:	add	r0, sp, #108	; 0x6c
   1b2c4:	ldr	r2, [r6, #40]	; 0x28
   1b2c8:	bl	166c4 <__assert_fail@plt+0x53c0>
   1b2cc:	mov	r6, r0
   1b2d0:	cmp	r6, #0
   1b2d4:	beq	1aebc <__assert_fail@plt+0x9bb8>
   1b2d8:	ldr	r3, [sp, #232]	; 0xe8
   1b2dc:	cmp	r3, #0
   1b2e0:	beq	1b364 <__assert_fail@plt+0xa060>
   1b2e4:	str	r6, [r3, r9, lsl #2]
   1b2e8:	ldr	r3, [r4, #76]	; 0x4c
   1b2ec:	cmp	r3, #0
   1b2f0:	beq	1b364 <__assert_fail@plt+0xa060>
   1b2f4:	add	r7, r6, #4
   1b2f8:	mov	r2, #0
   1b2fc:	mov	r1, r7
   1b300:	add	r0, sp, #132	; 0x84
   1b304:	bl	153a4 <__assert_fail@plt+0x40a0>
   1b308:	cmp	r0, #0
   1b30c:	mov	r4, r0
   1b310:	str	r0, [sp, #108]	; 0x6c
   1b314:	bne	1b340 <__assert_fail@plt+0xa03c>
   1b318:	ldrb	r3, [r6, #52]	; 0x34
   1b31c:	tst	r3, #64	; 0x40
   1b320:	beq	1b36c <__assert_fail@plt+0xa068>
   1b324:	mov	r1, r7
   1b328:	add	r0, sp, #132	; 0x84
   1b32c:	bl	19c64 <__assert_fail@plt+0x8960>
   1b330:	cmp	r0, #0
   1b334:	mov	r4, r0
   1b338:	str	r0, [sp, #108]	; 0x6c
   1b33c:	beq	1b36c <__assert_fail@plt+0xa068>
   1b340:	cmn	r4, #1
   1b344:	bne	1b7f4 <__assert_fail@plt+0xa4f0>
   1b348:	add	r0, sp, #132	; 0x84
   1b34c:	bl	1519c <__assert_fail@plt+0x3e98>
   1b350:	ldr	r2, [sp, #76]	; 0x4c
   1b354:	ldr	r3, [sp, #100]	; 0x64
   1b358:	add	r3, r3, r2
   1b35c:	str	r3, [sp, #100]	; 0x64
   1b360:	b	1af84 <__assert_fail@plt+0x9c80>
   1b364:	ldr	r3, [sp, #88]	; 0x58
   1b368:	str	r3, [sp, #32]
   1b36c:	ldrb	r3, [r6, #52]	; 0x34
   1b370:	ubfx	r3, r3, #4, #1
   1b374:	cmp	r3, #0
   1b378:	streq	r3, [sp, #44]	; 0x2c
   1b37c:	beq	1b7ec <__assert_fail@plt+0xa4e8>
   1b380:	ldrsb	r3, [r6, #52]	; 0x34
   1b384:	cmp	r3, #0
   1b388:	bge	1b3a8 <__assert_fail@plt+0xa0a4>
   1b38c:	mov	r2, r9
   1b390:	mov	r1, r6
   1b394:	add	r0, sp, #132	; 0x84
   1b398:	bl	17f8c <__assert_fail@plt+0x6c88>
   1b39c:	subs	r3, r0, #0
   1b3a0:	str	r3, [sp, #44]	; 0x2c
   1b3a4:	beq	1b7ec <__assert_fail@plt+0xa4e8>
   1b3a8:	ldr	r3, [sp, #36]	; 0x24
   1b3ac:	mov	r4, r9
   1b3b0:	cmp	r3, #0
   1b3b4:	ldrne	r3, [sp, #36]	; 0x24
   1b3b8:	strne	r3, [sp, #44]	; 0x2c
   1b3bc:	beq	1b340 <__assert_fail@plt+0xa03c>
   1b3c0:	ldr	r3, [sp, #84]	; 0x54
   1b3c4:	str	r3, [sp, #48]	; 0x30
   1b3c8:	ldr	r1, [sp, #172]	; 0xac
   1b3cc:	ldr	r3, [sp, #188]	; 0xbc
   1b3d0:	cmp	r1, r3
   1b3d4:	bge	1b4d8 <__assert_fail@plt+0xa1d4>
   1b3d8:	add	r3, r1, #1
   1b3dc:	add	r2, r1, #1
   1b3e0:	str	r3, [sp, #64]	; 0x40
   1b3e4:	ldr	r3, [sp, #168]	; 0xa8
   1b3e8:	cmp	r2, r3
   1b3ec:	blt	1b3fc <__assert_fail@plt+0xa0f8>
   1b3f0:	ldr	r2, [sp, #180]	; 0xb4
   1b3f4:	cmp	r3, r2
   1b3f8:	blt	1b418 <__assert_fail@plt+0xa114>
   1b3fc:	ldr	r3, [sp, #160]	; 0xa0
   1b400:	add	r2, r1, #1
   1b404:	cmp	r2, r3
   1b408:	blt	1b430 <__assert_fail@plt+0xa12c>
   1b40c:	ldr	r2, [sp, #180]	; 0xb4
   1b410:	cmp	r3, r2
   1b414:	bge	1b430 <__assert_fail@plt+0xa12c>
   1b418:	add	r1, r1, #2
   1b41c:	add	r0, sp, #132	; 0x84
   1b420:	bl	14dbc <__assert_fail@plt+0x3ab8>
   1b424:	cmp	r0, #0
   1b428:	str	r0, [sp, #108]	; 0x6c
   1b42c:	bne	1aebc <__assert_fail@plt+0x9bb8>
   1b430:	ldrb	r3, [r6, #52]	; 0x34
   1b434:	tst	r3, #32
   1b438:	bne	1b4f4 <__assert_fail@plt+0xa1f0>
   1b43c:	ldr	r3, [sp, #172]	; 0xac
   1b440:	add	r2, r3, #1
   1b444:	str	r2, [sp, #172]	; 0xac
   1b448:	ldr	r2, [sp, #136]	; 0x88
   1b44c:	ldrb	r8, [r2, r3]
   1b450:	ldr	r3, [r6, #44]	; 0x2c
   1b454:	cmp	r3, #0
   1b458:	beq	1b6cc <__assert_fail@plt+0xa3c8>
   1b45c:	ldr	r7, [r3, r8, lsl #2]
   1b460:	ldr	r3, [sp, #232]	; 0xe8
   1b464:	cmp	r3, #0
   1b468:	beq	1b480 <__assert_fail@plt+0xa17c>
   1b46c:	mov	r2, r7
   1b470:	add	r1, sp, #132	; 0x84
   1b474:	add	r0, sp, #108	; 0x6c
   1b478:	bl	1a264 <__assert_fail@plt+0x8f60>
   1b47c:	mov	r7, r0
   1b480:	cmp	r7, #0
   1b484:	bne	1b75c <__assert_fail@plt+0xa458>
   1b488:	ldr	r2, [sp, #108]	; 0x6c
   1b48c:	ldr	r3, [sp, #232]	; 0xe8
   1b490:	cmp	r2, #0
   1b494:	bne	1aebc <__assert_fail@plt+0x9bb8>
   1b498:	cmp	r3, #0
   1b49c:	beq	1b4d8 <__assert_fail@plt+0xa1d4>
   1b4a0:	ldr	r3, [sp, #36]	; 0x24
   1b4a4:	ldr	r2, [sp, #44]	; 0x2c
   1b4a8:	eor	r3, r3, #1
   1b4ac:	tst	r2, r3
   1b4b0:	bne	1b4d8 <__assert_fail@plt+0xa1d4>
   1b4b4:	ldr	r3, [sp, #172]	; 0xac
   1b4b8:	mov	r2, #0
   1b4bc:	ldr	r0, [sp, #232]	; 0xe8
   1b4c0:	ldr	ip, [sp, #236]	; 0xec
   1b4c4:	add	r1, r3, #1
   1b4c8:	cmp	ip, r1
   1b4cc:	bge	1b71c <__assert_fail@plt+0xa418>
   1b4d0:	cmp	r2, #0
   1b4d4:	strne	r3, [sp, #172]	; 0xac
   1b4d8:	ldr	r3, [sp, #48]	; 0x30
   1b4dc:	cmp	r3, #0
   1b4e0:	ldrne	r3, [r3]
   1b4e4:	ldrne	r2, [sp, #48]	; 0x30
   1b4e8:	addne	r3, r3, r9
   1b4ec:	strne	r3, [r2]
   1b4f0:	b	1b340 <__assert_fail@plt+0xa03c>
   1b4f4:	ldr	r8, [sp, #216]	; 0xd8
   1b4f8:	mov	r3, #0
   1b4fc:	str	r3, [sp, #52]	; 0x34
   1b500:	ldr	r3, [r6, #8]
   1b504:	ldr	r2, [sp, #52]	; 0x34
   1b508:	cmp	r2, r3
   1b50c:	movge	r0, #0
   1b510:	bge	1b6b8 <__assert_fail@plt+0xa3b4>
   1b514:	ldr	r3, [r6, #12]
   1b518:	ldr	r2, [sp, #52]	; 0x34
   1b51c:	ldr	r3, [r3, r2, lsl #2]
   1b520:	str	r3, [sp, #68]	; 0x44
   1b524:	ldr	r3, [r8]
   1b528:	ldr	r2, [sp, #68]	; 0x44
   1b52c:	add	r3, r3, r2, lsl #3
   1b530:	ldrb	r2, [r3, #6]
   1b534:	tst	r2, #16
   1b538:	beq	1b690 <__assert_fail@plt+0xa38c>
   1b53c:	ldr	r7, [r3, #4]
   1b540:	ldr	r3, [pc, #2396]	; 1bea4 <__assert_fail@plt+0xaba0>
   1b544:	ldr	r2, [sp, #172]	; 0xac
   1b548:	tst	r3, r7
   1b54c:	str	r2, [sp, #92]	; 0x5c
   1b550:	beq	1b5a8 <__assert_fail@plt+0xa2a4>
   1b554:	ubfx	r7, r7, #8, #10
   1b558:	add	r0, sp, #132	; 0x84
   1b55c:	ldr	r1, [sp, #92]	; 0x5c
   1b560:	ldr	r2, [sp, #220]	; 0xdc
   1b564:	bl	17750 <__assert_fail@plt+0x644c>
   1b568:	tst	r7, #4
   1b56c:	beq	1b578 <__assert_fail@plt+0xa274>
   1b570:	tst	r0, #1
   1b574:	beq	1b690 <__assert_fail@plt+0xa38c>
   1b578:	tst	r7, #8
   1b57c:	beq	1b588 <__assert_fail@plt+0xa284>
   1b580:	tst	r0, #1
   1b584:	bne	1b690 <__assert_fail@plt+0xa38c>
   1b588:	tst	r7, #32
   1b58c:	beq	1b598 <__assert_fail@plt+0xa294>
   1b590:	tst	r0, #2
   1b594:	beq	1b690 <__assert_fail@plt+0xa38c>
   1b598:	tst	r7, #128	; 0x80
   1b59c:	beq	1b5a8 <__assert_fail@plt+0xa2a4>
   1b5a0:	tst	r0, #8
   1b5a4:	beq	1b690 <__assert_fail@plt+0xa38c>
   1b5a8:	add	r2, sp, #132	; 0x84
   1b5ac:	mov	r0, r8
   1b5b0:	ldr	r1, [sp, #68]	; 0x44
   1b5b4:	ldr	r3, [sp, #92]	; 0x5c
   1b5b8:	bl	15ed4 <__assert_fail@plt+0x4bd0>
   1b5bc:	cmp	r0, #0
   1b5c0:	beq	1b690 <__assert_fail@plt+0xa38c>
   1b5c4:	ldr	r7, [sp, #172]	; 0xac
   1b5c8:	ldr	r3, [sp, #252]	; 0xfc
   1b5cc:	add	r7, r0, r7
   1b5d0:	mov	r1, r7
   1b5d4:	cmp	r3, r0
   1b5d8:	strge	r3, [sp, #252]	; 0xfc
   1b5dc:	strlt	r0, [sp, #252]	; 0xfc
   1b5e0:	add	r0, sp, #132	; 0x84
   1b5e4:	bl	15484 <__assert_fail@plt+0x4180>
   1b5e8:	cmp	r0, #0
   1b5ec:	str	r0, [sp, #120]	; 0x78
   1b5f0:	bne	1b6b8 <__assert_fail@plt+0xa3b4>
   1b5f4:	ldr	r3, [r8, #12]
   1b5f8:	mov	r1, #12
   1b5fc:	ldr	r2, [sp, #68]	; 0x44
   1b600:	ldr	r2, [r3, r2, lsl #2]
   1b604:	ldr	r3, [r8, #24]
   1b608:	mla	r2, r1, r2, r3
   1b60c:	ldr	r3, [sp, #232]	; 0xe8
   1b610:	ldr	r3, [r3, r7, lsl #2]
   1b614:	cmp	r3, #0
   1b618:	str	r3, [sp, #68]	; 0x44
   1b61c:	add	r3, sp, #268	; 0x10c
   1b620:	bne	1b69c <__assert_fail@plt+0xa398>
   1b624:	ldm	r2, {r0, r1, r2}
   1b628:	stm	r3, {r0, r1, r2}
   1b62c:	sub	r1, r7, #1
   1b630:	add	r0, sp, #132	; 0x84
   1b634:	ldr	r2, [sp, #220]	; 0xdc
   1b638:	bl	17750 <__assert_fail@plt+0x644c>
   1b63c:	ldr	r3, [sp, #232]	; 0xe8
   1b640:	add	r2, sp, #268	; 0x10c
   1b644:	mov	r1, r8
   1b648:	str	r3, [sp, #92]	; 0x5c
   1b64c:	mov	r3, r0
   1b650:	add	r0, sp, #120	; 0x78
   1b654:	bl	166c4 <__assert_fail@plt+0x53c0>
   1b658:	ldr	r3, [sp, #92]	; 0x5c
   1b65c:	str	r0, [r3, r7, lsl #2]
   1b660:	ldr	r3, [sp, #68]	; 0x44
   1b664:	cmp	r3, #0
   1b668:	beq	1b674 <__assert_fail@plt+0xa370>
   1b66c:	ldr	r0, [sp, #276]	; 0x114
   1b670:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b674:	ldr	r3, [sp, #232]	; 0xe8
   1b678:	ldr	r3, [r3, r7, lsl #2]
   1b67c:	cmp	r3, #0
   1b680:	bne	1b690 <__assert_fail@plt+0xa38c>
   1b684:	ldr	r0, [sp, #120]	; 0x78
   1b688:	cmp	r0, #0
   1b68c:	bne	1b6b8 <__assert_fail@plt+0xa3b4>
   1b690:	ldr	r3, [sp, #52]	; 0x34
   1b694:	add	r3, r3, #1
   1b698:	b	1b4fc <__assert_fail@plt+0xa1f8>
   1b69c:	ldr	r1, [sp, #68]	; 0x44
   1b6a0:	mov	r0, r3
   1b6a4:	ldr	r1, [r1, #40]	; 0x28
   1b6a8:	bl	16584 <__assert_fail@plt+0x5280>
   1b6ac:	cmp	r0, #0
   1b6b0:	str	r0, [sp, #120]	; 0x78
   1b6b4:	beq	1b62c <__assert_fail@plt+0xa328>
   1b6b8:	cmp	r0, #0
   1b6bc:	str	r0, [sp, #108]	; 0x6c
   1b6c0:	beq	1b43c <__assert_fail@plt+0xa138>
   1b6c4:	mov	r7, #0
   1b6c8:	b	1b460 <__assert_fail@plt+0xa15c>
   1b6cc:	ldr	r7, [r6, #48]	; 0x30
   1b6d0:	cmp	r7, #0
   1b6d4:	beq	1b6fc <__assert_fail@plt+0xa3f8>
   1b6d8:	ldr	r1, [sp, #172]	; 0xac
   1b6dc:	add	r0, sp, #132	; 0x84
   1b6e0:	ldr	r2, [sp, #220]	; 0xdc
   1b6e4:	sub	r1, r1, #1
   1b6e8:	bl	17750 <__assert_fail@plt+0x644c>
   1b6ec:	tst	r0, #1
   1b6f0:	addne	r8, r8, #256	; 0x100
   1b6f4:	ldr	r7, [r7, r8, lsl #2]
   1b6f8:	b	1b460 <__assert_fail@plt+0xa15c>
   1b6fc:	mov	r1, r6
   1b700:	ldr	r0, [sp, #216]	; 0xd8
   1b704:	bl	188fc <__assert_fail@plt+0x75f8>
   1b708:	cmp	r0, #0
   1b70c:	bne	1b450 <__assert_fail@plt+0xa14c>
   1b710:	mov	r3, #12
   1b714:	str	r3, [sp, #108]	; 0x6c
   1b718:	b	1b460 <__assert_fail@plt+0xa15c>
   1b71c:	mov	r3, r1
   1b720:	ldr	r1, [r0, r1, lsl #2]
   1b724:	mov	r2, #1
   1b728:	cmp	r1, #0
   1b72c:	beq	1b4c4 <__assert_fail@plt+0xa1c0>
   1b730:	mov	r2, #0
   1b734:	add	r1, sp, #132	; 0x84
   1b738:	str	r3, [sp, #172]	; 0xac
   1b73c:	add	r0, sp, #108	; 0x6c
   1b740:	bl	1a264 <__assert_fail@plt+0x8f60>
   1b744:	ldr	r3, [sp, #108]	; 0x6c
   1b748:	mov	r7, r0
   1b74c:	cmp	r3, #0
   1b750:	bne	1b7e0 <__assert_fail@plt+0xa4dc>
   1b754:	cmp	r0, #0
   1b758:	beq	1b4b4 <__assert_fail@plt+0xa1b0>
   1b75c:	ldr	r3, [sp, #32]
   1b760:	cmp	r6, r7
   1b764:	movne	r3, #0
   1b768:	andeq	r3, r3, #1
   1b76c:	str	r3, [sp, #32]
   1b770:	ldr	r2, [sp, #32]
   1b774:	ldr	r3, [sp, #64]	; 0x40
   1b778:	cmp	r2, #0
   1b77c:	moveq	r3, r9
   1b780:	str	r3, [sp, #64]	; 0x40
   1b784:	ldrb	r3, [r7, #52]	; 0x34
   1b788:	tst	r3, #16
   1b78c:	beq	1b7d4 <__assert_fail@plt+0xa4d0>
   1b790:	tst	r3, #128	; 0x80
   1b794:	ldr	r6, [sp, #172]	; 0xac
   1b798:	beq	1b7b4 <__assert_fail@plt+0xa4b0>
   1b79c:	mov	r2, r6
   1b7a0:	mov	r1, r7
   1b7a4:	add	r0, sp, #132	; 0x84
   1b7a8:	bl	17f8c <__assert_fail@plt+0x6c88>
   1b7ac:	cmp	r0, #0
   1b7b0:	beq	1b7d4 <__assert_fail@plt+0xa4d0>
   1b7b4:	ldr	r3, [sp, #36]	; 0x24
   1b7b8:	mov	r4, r6
   1b7bc:	cmp	r3, #0
   1b7c0:	beq	1b340 <__assert_fail@plt+0xa03c>
   1b7c4:	ldr	r3, [sp, #36]	; 0x24
   1b7c8:	str	r3, [sp, #44]	; 0x2c
   1b7cc:	mov	r3, #0
   1b7d0:	str	r3, [sp, #48]	; 0x30
   1b7d4:	mov	r6, r7
   1b7d8:	ldr	r9, [sp, #64]	; 0x40
   1b7dc:	b	1b3c8 <__assert_fail@plt+0xa0c4>
   1b7e0:	cmp	r0, #0
   1b7e4:	bne	1b75c <__assert_fail@plt+0xa458>
   1b7e8:	b	1b4d8 <__assert_fail@plt+0xa1d4>
   1b7ec:	mvn	r4, #0
   1b7f0:	b	1b3c0 <__assert_fail@plt+0xa0bc>
   1b7f4:	cmn	r4, #2
   1b7f8:	beq	1aebc <__assert_fail@plt+0x9bb8>
   1b7fc:	ldr	r2, [sp, #8]
   1b800:	str	r4, [sp, #224]	; 0xe0
   1b804:	ldrb	r3, [sl, #28]
   1b808:	cmp	r2, #1
   1b80c:	movls	r2, #0
   1b810:	movhi	r2, #1
   1b814:	eor	r3, r3, #16
   1b818:	ands	r6, r2, r3, lsr #4
   1b81c:	bne	1b82c <__assert_fail@plt+0xa528>
   1b820:	ldr	r3, [fp, #76]	; 0x4c
   1b824:	cmp	r3, #0
   1b828:	beq	1b858 <__assert_fail@plt+0xa554>
   1b82c:	ldr	r3, [sp, #232]	; 0xe8
   1b830:	mov	r2, r4
   1b834:	add	r0, sp, #132	; 0x84
   1b838:	ldr	r1, [r3, r4, lsl #2]
   1b83c:	bl	17f8c <__assert_fail@plt+0x6c88>
   1b840:	cmp	r6, #0
   1b844:	str	r0, [sp, #228]	; 0xe4
   1b848:	beq	1b858 <__assert_fail@plt+0xa554>
   1b84c:	ldrb	r3, [fp, #88]	; 0x58
   1b850:	tst	r3, #1
   1b854:	bne	1b864 <__assert_fail@plt+0xa560>
   1b858:	ldr	r3, [fp, #76]	; 0x4c
   1b85c:	cmp	r3, #0
   1b860:	beq	1c1d4 <__assert_fail@plt+0xaed0>
   1b864:	ldr	r3, [sp, #216]	; 0xd8
   1b868:	cmn	r4, #-1073741822	; 0xc0000002
   1b86c:	ldr	r8, [sp, #228]	; 0xe4
   1b870:	str	r3, [sp, #32]
   1b874:	bhi	1aebc <__assert_fail@plt+0x9bb8>
   1b878:	add	r9, r4, #1
   1b87c:	lsl	r9, r9, #2
   1b880:	mov	r0, r9
   1b884:	bl	1f810 <__assert_fail@plt+0xe50c>
   1b888:	subs	r7, r0, #0
   1b88c:	beq	1b9f0 <__assert_fail@plt+0xa6ec>
   1b890:	ldr	r3, [sp, #32]
   1b894:	ldr	r6, [r3, #76]	; 0x4c
   1b898:	cmp	r6, #0
   1b89c:	beq	1b988 <__assert_fail@plt+0xa684>
   1b8a0:	mov	r0, r9
   1b8a4:	bl	1f810 <__assert_fail@plt+0xe50c>
   1b8a8:	subs	r6, r0, #0
   1b8ac:	beq	1b9f4 <__assert_fail@plt+0xa6f0>
   1b8b0:	add	r3, r4, #1
   1b8b4:	mov	r1, #0
   1b8b8:	lsl	r2, r3, #2
   1b8bc:	mov	r0, r6
   1b8c0:	str	r3, [sp, #44]	; 0x2c
   1b8c4:	bl	11208 <memset@plt>
   1b8c8:	mov	r3, #0
   1b8cc:	add	r1, sp, #268	; 0x10c
   1b8d0:	str	r7, [sp, #268]	; 0x10c
   1b8d4:	add	r0, sp, #132	; 0x84
   1b8d8:	str	r6, [sp, #272]	; 0x110
   1b8dc:	str	r8, [sp, #276]	; 0x114
   1b8e0:	str	r4, [sp, #280]	; 0x118
   1b8e4:	str	r3, [sp, #284]	; 0x11c
   1b8e8:	str	r3, [sp, #288]	; 0x120
   1b8ec:	str	r3, [sp, #292]	; 0x124
   1b8f0:	bl	1a978 <__assert_fail@plt+0x9674>
   1b8f4:	mov	r9, r0
   1b8f8:	ldr	r0, [sp, #292]	; 0x124
   1b8fc:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b900:	cmp	r9, #0
   1b904:	bne	1b9f8 <__assert_fail@plt+0xa6f4>
   1b908:	ldr	r2, [r7]
   1b90c:	ldr	r3, [sp, #44]	; 0x2c
   1b910:	cmp	r2, #0
   1b914:	bne	1b95c <__assert_fail@plt+0xa658>
   1b918:	ldr	r2, [r6]
   1b91c:	cmp	r2, #0
   1b920:	bne	1b95c <__assert_fail@plt+0xa658>
   1b924:	ldr	r2, [sp, #232]	; 0xe8
   1b928:	subs	r4, r4, #1
   1b92c:	bcc	1ba20 <__assert_fail@plt+0xa71c>
   1b930:	ldr	r1, [r2, r4, lsl #2]
   1b934:	cmp	r1, #0
   1b938:	beq	1b928 <__assert_fail@plt+0xa624>
   1b93c:	ldrb	r3, [r1, #52]	; 0x34
   1b940:	tst	r3, #16
   1b944:	beq	1b928 <__assert_fail@plt+0xa624>
   1b948:	mov	r2, r4
   1b94c:	add	r0, sp, #132	; 0x84
   1b950:	bl	17f8c <__assert_fail@plt+0x6c88>
   1b954:	mov	r8, r0
   1b958:	b	1b8b0 <__assert_fail@plt+0xa5ac>
   1b95c:	mov	r2, r6
   1b960:	mov	r1, r7
   1b964:	ldr	r0, [sp, #32]
   1b968:	bl	193a0 <__assert_fail@plt+0x809c>
   1b96c:	mov	r9, r0
   1b970:	mov	r0, r6
   1b974:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b978:	cmp	r9, #0
   1b97c:	beq	1b9d0 <__assert_fail@plt+0xa6cc>
   1b980:	mov	r6, #0
   1b984:	b	1b9f8 <__assert_fail@plt+0xa6f4>
   1b988:	add	r1, sp, #268	; 0x10c
   1b98c:	add	r0, sp, #132	; 0x84
   1b990:	str	r7, [sp, #268]	; 0x10c
   1b994:	str	r6, [sp, #272]	; 0x110
   1b998:	str	r8, [sp, #276]	; 0x114
   1b99c:	str	r4, [sp, #280]	; 0x118
   1b9a0:	str	r6, [sp, #284]	; 0x11c
   1b9a4:	str	r6, [sp, #288]	; 0x120
   1b9a8:	str	r6, [sp, #292]	; 0x124
   1b9ac:	bl	1a978 <__assert_fail@plt+0x9674>
   1b9b0:	mov	r9, r0
   1b9b4:	ldr	r0, [sp, #292]	; 0x124
   1b9b8:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b9bc:	cmp	r9, #0
   1b9c0:	bne	1b9f8 <__assert_fail@plt+0xa6f4>
   1b9c4:	ldr	r6, [r7]
   1b9c8:	cmp	r6, #0
   1b9cc:	beq	1ba20 <__assert_fail@plt+0xa71c>
   1b9d0:	ldr	r0, [sp, #232]	; 0xe8
   1b9d4:	bl	1f990 <__assert_fail@plt+0xe68c>
   1b9d8:	str	r4, [sp, #224]	; 0xe0
   1b9dc:	str	r7, [sp, #232]	; 0xe8
   1b9e0:	mov	r7, #0
   1b9e4:	mov	r9, r7
   1b9e8:	str	r8, [sp, #228]	; 0xe4
   1b9ec:	b	1b980 <__assert_fail@plt+0xa67c>
   1b9f0:	mov	r6, r7
   1b9f4:	mov	r9, #12
   1b9f8:	mov	r0, r7
   1b9fc:	bl	1f990 <__assert_fail@plt+0xe68c>
   1ba00:	mov	r0, r6
   1ba04:	bl	1f990 <__assert_fail@plt+0xe68c>
   1ba08:	cmp	r9, #0
   1ba0c:	beq	1c1d4 <__assert_fail@plt+0xaed0>
   1ba10:	cmp	r9, #1
   1ba14:	beq	1b348 <__assert_fail@plt+0xa044>
   1ba18:	str	r9, [sp, #12]
   1ba1c:	b	1b04c <__assert_fail@plt+0x9d48>
   1ba20:	mov	r9, #1
   1ba24:	b	1b9f8 <__assert_fail@plt+0xa6f4>
   1ba28:	str	r2, [r1, r3, lsl #3]
   1ba2c:	str	r2, [r5, r3, lsl #3]
   1ba30:	add	r3, r3, #1
   1ba34:	ldr	r0, [sp, #8]
   1ba38:	cmp	r3, r0
   1ba3c:	bne	1ba28 <__assert_fail@plt+0xa724>
   1ba40:	mov	r3, #0
   1ba44:	subs	r2, r0, #1
   1ba48:	movne	r2, #1
   1ba4c:	str	r3, [r5]
   1ba50:	ldr	r3, [sp, #224]	; 0xe0
   1ba54:	str	r3, [r5, #4]
   1ba58:	ldrb	r3, [sl, #28]
   1ba5c:	eor	r3, r3, #16
   1ba60:	ands	r3, r2, r3, lsr #4
   1ba64:	beq	1c0b4 <__assert_fail@plt+0xadb0>
   1ba68:	ldrb	r4, [fp, #88]	; 0x58
   1ba6c:	ands	r4, r4, #1
   1ba70:	beq	1ba84 <__assert_fail@plt+0xa780>
   1ba74:	ldr	r4, [fp, #76]	; 0x4c
   1ba78:	cmp	r4, #0
   1ba7c:	movle	r4, #0
   1ba80:	movgt	r4, #1
   1ba84:	ldr	r3, [sl]
   1ba88:	mov	r2, #2
   1ba8c:	add	r7, sp, #280	; 0x118
   1ba90:	cmp	r4, #0
   1ba94:	str	r3, [sp, #16]
   1ba98:	mov	r3, #0
   1ba9c:	str	r2, [sp, #124]	; 0x7c
   1baa0:	str	r3, [sp, #120]	; 0x78
   1baa4:	str	r3, [sp, #128]	; 0x80
   1baa8:	str	r3, [sp, #268]	; 0x10c
   1baac:	mov	r3, #16
   1bab0:	str	r7, [sp, #276]	; 0x114
   1bab4:	str	r3, [sp, #272]	; 0x110
   1bab8:	beq	1bad4 <__assert_fail@plt+0xa7d0>
   1babc:	mov	r0, #48	; 0x30
   1bac0:	bl	1f810 <__assert_fail@plt+0xe50c>
   1bac4:	cmp	r0, #0
   1bac8:	str	r0, [sp, #128]	; 0x80
   1bacc:	addne	r4, sp, #120	; 0x78
   1bad0:	beq	1aebc <__assert_fail@plt+0x9bb8>
   1bad4:	ldr	r2, [sp, #8]
   1bad8:	ldr	r3, [sp, #16]
   1badc:	ldr	r6, [r3, #72]	; 0x48
   1bae0:	mov	r3, #0
   1bae4:	str	r3, [sp, #108]	; 0x6c
   1bae8:	str	r3, [sp, #112]	; 0x70
   1baec:	str	r3, [sp, #116]	; 0x74
   1baf0:	ldr	r3, [sp, #268]	; 0x10c
   1baf4:	cmp	r2, r3
   1baf8:	ldrls	r3, [sp, #8]
   1bafc:	strls	r3, [sp, #268]	; 0x10c
   1bb00:	bls	1bb58 <__assert_fail@plt+0xa854>
   1bb04:	mov	r3, #8
   1bb08:	mov	r2, r7
   1bb0c:	ldr	r1, [sp, #8]
   1bb10:	add	r0, sp, #268	; 0x10c
   1bb14:	bl	1f8f0 <__assert_fail@plt+0xe5ec>
   1bb18:	cmp	r0, #0
   1bb1c:	bne	1bb58 <__assert_fail@plt+0xa854>
   1bb20:	ldr	r0, [sp, #276]	; 0x114
   1bb24:	cmp	r0, r7
   1bb28:	beq	1bb30 <__assert_fail@plt+0xa82c>
   1bb2c:	bl	1f990 <__assert_fail@plt+0xe68c>
   1bb30:	mov	r3, #0
   1bb34:	str	r3, [sp, #268]	; 0x10c
   1bb38:	mvn	r3, #0
   1bb3c:	str	r7, [sp, #276]	; 0x114
   1bb40:	str	r3, [sp, #272]	; 0x110
   1bb44:	add	r0, sp, #268	; 0x10c
   1bb48:	bl	1522c <__assert_fail@plt+0x3f28>
   1bb4c:	mov	r0, r4
   1bb50:	bl	16fd4 <__assert_fail@plt+0x5cd0>
   1bb54:	b	1aebc <__assert_fail@plt+0x9bb8>
   1bb58:	ldr	r3, [sp, #8]
   1bb5c:	mov	r1, r5
   1bb60:	ldr	r7, [sp, #276]	; 0x114
   1bb64:	lsl	r8, r3, #3
   1bb68:	mov	r0, r7
   1bb6c:	mov	r2, r8
   1bb70:	bl	1107c <memcpy@plt>
   1bb74:	mov	r2, r5
   1bb78:	ldr	r3, [r2], #4
   1bb7c:	str	r2, [sp, #28]
   1bb80:	str	r3, [sp, #104]	; 0x68
   1bb84:	ldr	r3, [sp, #8]
   1bb88:	lsl	r3, r3, #4
   1bb8c:	str	r3, [sp, #24]
   1bb90:	ldr	r3, [r5, #4]
   1bb94:	ldr	r2, [sp, #104]	; 0x68
   1bb98:	cmp	r2, r3
   1bb9c:	bgt	1be78 <__assert_fail@plt+0xab74>
   1bba0:	ldr	r3, [sp, #16]
   1bba4:	lsl	r0, r6, #3
   1bba8:	ldr	r3, [r3]
   1bbac:	add	r1, r3, r0
   1bbb0:	ldrb	ip, [r1, #4]
   1bbb4:	cmp	ip, #8
   1bbb8:	bne	1bdfc <__assert_fail@plt+0xaaf8>
   1bbbc:	ldr	r3, [r3, r6, lsl #3]
   1bbc0:	ldr	r1, [sp, #8]
   1bbc4:	add	r3, r3, #1
   1bbc8:	cmp	r1, r3
   1bbcc:	ble	1bbe0 <__assert_fail@plt+0xa8dc>
   1bbd0:	add	r1, r5, r3, lsl #3
   1bbd4:	str	r2, [r5, r3, lsl #3]
   1bbd8:	mvn	r3, #0
   1bbdc:	str	r3, [r1, #4]
   1bbe0:	ldr	r2, [r5, #4]
   1bbe4:	ldr	r3, [sp, #104]	; 0x68
   1bbe8:	cmp	r2, r3
   1bbec:	bne	1bbfc <__assert_fail@plt+0xa8f8>
   1bbf0:	ldr	r3, [sp, #228]	; 0xe4
   1bbf4:	cmp	r6, r3
   1bbf8:	beq	1be70 <__assert_fail@plt+0xab6c>
   1bbfc:	cmp	r4, #0
   1bc00:	beq	1bc60 <__assert_fail@plt+0xa95c>
   1bc04:	mov	r1, r6
   1bc08:	add	r0, sp, #108	; 0x6c
   1bc0c:	bl	13d28 <__assert_fail@plt+0x2a24>
   1bc10:	cmp	r0, #0
   1bc14:	beq	1bc60 <__assert_fail@plt+0xa95c>
   1bc18:	mov	r3, #0
   1bc1c:	ldr	r2, [r5, r3, lsl #3]
   1bc20:	cmp	r2, #0
   1bc24:	blt	1bea8 <__assert_fail@plt+0xaba4>
   1bc28:	ldr	r2, [sp, #28]
   1bc2c:	ldr	r2, [r2, r3, lsl #3]
   1bc30:	cmn	r2, #1
   1bc34:	bne	1bea8 <__assert_fail@plt+0xaba4>
   1bc38:	add	r3, sp, #108	; 0x6c
   1bc3c:	add	r1, sp, #104	; 0x68
   1bc40:	str	r7, [sp]
   1bc44:	mov	r0, r4
   1bc48:	ldr	r2, [sp, #8]
   1bc4c:	str	r3, [sp, #4]
   1bc50:	mov	r3, r5
   1bc54:	bl	15510 <__assert_fail@plt+0x420c>
   1bc58:	subs	r6, r0, #0
   1bc5c:	blt	1be78 <__assert_fail@plt+0xab74>
   1bc60:	ldr	r9, [sp, #216]	; 0xd8
   1bc64:	lsl	sl, r6, #3
   1bc68:	str	r6, [sp, #20]
   1bc6c:	ldr	r3, [r9]
   1bc70:	add	r1, r3, sl
   1bc74:	ldrb	r2, [r1, #4]
   1bc78:	tst	r2, #8
   1bc7c:	beq	1bee4 <__assert_fail@plt+0xabe0>
   1bc80:	ldr	r2, [sp, #104]	; 0x68
   1bc84:	mov	r1, r6
   1bc88:	add	r0, sp, #108	; 0x6c
   1bc8c:	ldr	r3, [sp, #232]	; 0xe8
   1bc90:	ldr	sl, [r3, r2, lsl #2]
   1bc94:	mov	r2, #12
   1bc98:	add	r3, sl, #4
   1bc9c:	str	r3, [sp, #20]
   1bca0:	ldr	r3, [r9, #20]
   1bca4:	mla	sl, r2, r6, r3
   1bca8:	bl	13d28 <__assert_fail@plt+0x2a24>
   1bcac:	cmp	r0, #0
   1bcb0:	beq	1bebc <__assert_fail@plt+0xabb8>
   1bcb4:	ldr	r2, [sl, #4]
   1bcb8:	mov	r3, #0
   1bcbc:	mvn	r6, #0
   1bcc0:	cmp	r3, r2
   1bcc4:	bge	1bde8 <__assert_fail@plt+0xaae4>
   1bcc8:	ldr	r1, [sl, #8]
   1bccc:	str	r3, [sp, #32]
   1bcd0:	ldr	r0, [sp, #20]
   1bcd4:	str	r2, [sp, #36]	; 0x24
   1bcd8:	ldr	r9, [r1, r3, lsl #2]
   1bcdc:	mov	r1, r9
   1bce0:	bl	13d28 <__assert_fail@plt+0x2a24>
   1bce4:	cmp	r0, #0
   1bce8:	ldr	r3, [sp, #32]
   1bcec:	ldr	r2, [sp, #36]	; 0x24
   1bcf0:	beq	1bedc <__assert_fail@plt+0xabd8>
   1bcf4:	cmn	r6, #1
   1bcf8:	beq	1bed8 <__assert_fail@plt+0xabd4>
   1bcfc:	mov	r1, r6
   1bd00:	add	r0, sp, #108	; 0x6c
   1bd04:	bl	13d28 <__assert_fail@plt+0x2a24>
   1bd08:	cmp	r0, #0
   1bd0c:	bne	1c0ac <__assert_fail@plt+0xada8>
   1bd10:	cmp	r4, #0
   1bd14:	beq	1bde8 <__assert_fail@plt+0xaae4>
   1bd18:	ldr	sl, [r4]
   1bd1c:	ldr	r3, [sp, #104]	; 0x68
   1bd20:	ldr	r2, [r4, #4]
   1bd24:	str	r3, [sp, #20]
   1bd28:	add	r3, sl, #1
   1bd2c:	cmp	r3, r2
   1bd30:	str	r3, [r4]
   1bd34:	bne	1bd60 <__assert_fail@plt+0xaa5c>
   1bd38:	mov	r1, #48	; 0x30
   1bd3c:	ldr	r0, [r4, #8]
   1bd40:	mul	r1, r1, r3
   1bd44:	bl	1f83c <__assert_fail@plt+0xe538>
   1bd48:	cmp	r0, #0
   1bd4c:	beq	1becc <__assert_fail@plt+0xabc8>
   1bd50:	ldr	r3, [r4, #4]
   1bd54:	str	r0, [r4, #8]
   1bd58:	lsl	r3, r3, #1
   1bd5c:	str	r3, [r4, #4]
   1bd60:	mov	r0, #24
   1bd64:	ldr	r2, [r4, #8]
   1bd68:	mul	sl, r0, sl
   1bd6c:	ldr	r1, [sp, #20]
   1bd70:	ldr	r0, [sp, #24]
   1bd74:	add	r3, r2, sl
   1bd78:	str	r1, [r2, sl]
   1bd7c:	str	r9, [r3, #4]
   1bd80:	str	r3, [sp, #20]
   1bd84:	bl	1f810 <__assert_fail@plt+0xe50c>
   1bd88:	ldr	r3, [sp, #20]
   1bd8c:	str	r0, [r3, #8]
   1bd90:	ldr	r3, [r4, #8]
   1bd94:	add	r3, r3, sl
   1bd98:	ldr	r0, [r3, #8]
   1bd9c:	cmp	r0, #0
   1bda0:	beq	1becc <__assert_fail@plt+0xabc8>
   1bda4:	mov	r2, r8
   1bda8:	mov	r1, r5
   1bdac:	bl	1107c <memcpy@plt>
   1bdb0:	ldr	r3, [r4, #8]
   1bdb4:	mov	r2, r8
   1bdb8:	mov	r1, r7
   1bdbc:	add	r3, r3, sl
   1bdc0:	ldr	r0, [r3, #8]
   1bdc4:	add	r0, r0, r8
   1bdc8:	bl	1107c <memcpy@plt>
   1bdcc:	ldr	r0, [r4, #8]
   1bdd0:	add	r1, sp, #108	; 0x6c
   1bdd4:	add	r0, r0, sl
   1bdd8:	add	r0, r0, #12
   1bddc:	bl	1650c <__assert_fail@plt+0x5208>
   1bde0:	cmp	r0, #0
   1bde4:	bne	1becc <__assert_fail@plt+0xabc8>
   1bde8:	cmp	r6, #0
   1bdec:	bge	1bb90 <__assert_fail@plt+0xa88c>
   1bdf0:	cmn	r6, #2
   1bdf4:	bne	1bf2c <__assert_fail@plt+0xac28>
   1bdf8:	b	1becc <__assert_fail@plt+0xabc8>
   1bdfc:	cmp	ip, #9
   1be00:	bne	1bbe0 <__assert_fail@plt+0xa8dc>
   1be04:	ldr	r3, [r3, r0]
   1be08:	ldr	r0, [sp, #8]
   1be0c:	add	r3, r3, #1
   1be10:	cmp	r0, r3
   1be14:	ble	1bbe0 <__assert_fail@plt+0xa8dc>
   1be18:	ldr	ip, [r5, r3, lsl #3]
   1be1c:	add	r0, r5, r3, lsl #3
   1be20:	cmp	r2, ip
   1be24:	ble	1be40 <__assert_fail@plt+0xab3c>
   1be28:	mov	r1, r5
   1be2c:	str	r2, [r0, #4]
   1be30:	mov	r2, r8
   1be34:	mov	r0, r7
   1be38:	bl	1107c <memcpy@plt>
   1be3c:	b	1bbe0 <__assert_fail@plt+0xa8dc>
   1be40:	ldrb	r1, [r1, #6]
   1be44:	tst	r1, #8
   1be48:	beq	1be68 <__assert_fail@plt+0xab64>
   1be4c:	ldr	r3, [r7, r3, lsl #3]
   1be50:	cmn	r3, #1
   1be54:	beq	1be68 <__assert_fail@plt+0xab64>
   1be58:	mov	r2, r8
   1be5c:	mov	r1, r7
   1be60:	mov	r0, r5
   1be64:	b	1be38 <__assert_fail@plt+0xab34>
   1be68:	str	r2, [r0, #4]
   1be6c:	b	1bbe0 <__assert_fail@plt+0xa8dc>
   1be70:	cmp	r4, #0
   1be74:	bne	1bc18 <__assert_fail@plt+0xa914>
   1be78:	ldr	r0, [sp, #116]	; 0x74
   1be7c:	bl	1f990 <__assert_fail@plt+0xe68c>
   1be80:	add	r0, sp, #268	; 0x10c
   1be84:	bl	1522c <__assert_fail@plt+0x3f28>
   1be88:	mov	r0, r4
   1be8c:	bl	16fd4 <__assert_fail@plt+0x5cd0>
   1be90:	cmp	r0, #0
   1be94:	beq	1c0b4 <__assert_fail@plt+0xadb0>
   1be98:	str	r0, [sp, #12]
   1be9c:	b	1b04c <__assert_fail@plt+0x9d48>
   1bea0:	beq	feac6950 <optarg@@GLIBC_2.4+0xfea95770>
   1bea4:	andeq	pc, r3, r0, lsl #30
   1bea8:	ldr	r2, [sp, #8]
   1beac:	add	r3, r3, #1
   1beb0:	cmp	r2, r3
   1beb4:	bne	1bc1c <__assert_fail@plt+0xa918>
   1beb8:	b	1be78 <__assert_fail@plt+0xab74>
   1bebc:	add	r0, sp, #108	; 0x6c
   1bec0:	bl	1702c <__assert_fail@plt+0x5d28>
   1bec4:	cmp	r0, #0
   1bec8:	bne	1bcb4 <__assert_fail@plt+0xa9b0>
   1becc:	ldr	r0, [sp, #116]	; 0x74
   1bed0:	bl	1f990 <__assert_fail@plt+0xe68c>
   1bed4:	b	1bb44 <__assert_fail@plt+0xa840>
   1bed8:	mov	r6, r9
   1bedc:	add	r3, r3, #1
   1bee0:	b	1bcc0 <__assert_fail@plt+0xa9bc>
   1bee4:	ldrb	r1, [r1, #6]
   1bee8:	tst	r1, #16
   1beec:	beq	1bf70 <__assert_fail@plt+0xac6c>
   1bef0:	add	r2, sp, #132	; 0x84
   1bef4:	mov	r0, r9
   1bef8:	ldr	r1, [sp, #20]
   1befc:	ldr	r3, [sp, #104]	; 0x68
   1bf00:	bl	15ed4 <__assert_fail@plt+0x4bd0>
   1bf04:	subs	r3, r0, #0
   1bf08:	bne	1bff4 <__assert_fail@plt+0xacf0>
   1bf0c:	ldr	r1, [r9]
   1bf10:	add	r0, sp, #132	; 0x84
   1bf14:	ldr	r2, [sp, #104]	; 0x68
   1bf18:	add	r1, r1, sl
   1bf1c:	bl	17830 <__assert_fail@plt+0x652c>
   1bf20:	cmp	r0, #0
   1bf24:	movne	r3, #0
   1bf28:	bne	1bff4 <__assert_fail@plt+0xacf0>
   1bf2c:	add	r3, sp, #108	; 0x6c
   1bf30:	add	r1, sp, #104	; 0x68
   1bf34:	str	r7, [sp]
   1bf38:	mov	r0, r4
   1bf3c:	ldr	r2, [sp, #8]
   1bf40:	str	r3, [sp, #4]
   1bf44:	mov	r3, r5
   1bf48:	bl	15510 <__assert_fail@plt+0x420c>
   1bf4c:	subs	r6, r0, #0
   1bf50:	bge	1bb90 <__assert_fail@plt+0xa88c>
   1bf54:	ldr	r0, [sp, #116]	; 0x74
   1bf58:	bl	1f990 <__assert_fail@plt+0xe68c>
   1bf5c:	add	r0, sp, #268	; 0x10c
   1bf60:	bl	1522c <__assert_fail@plt+0x3f28>
   1bf64:	mov	r0, r4
   1bf68:	bl	16fd4 <__assert_fail@plt+0x5cd0>
   1bf6c:	b	1b044 <__assert_fail@plt+0x9d40>
   1bf70:	cmp	r2, #4
   1bf74:	bne	1bf0c <__assert_fail@plt+0xac08>
   1bf78:	ldr	r3, [r3, sl]
   1bf7c:	ldr	r2, [sp, #8]
   1bf80:	add	r3, r3, #1
   1bf84:	cmp	r2, r3
   1bf88:	ble	1c1c8 <__assert_fail@plt+0xaec4>
   1bf8c:	add	r2, r5, r3, lsl #3
   1bf90:	ldr	r0, [r5, r3, lsl #3]
   1bf94:	cmp	r4, #0
   1bf98:	ldr	r2, [r2, #4]
   1bf9c:	sub	r3, r2, r0
   1bfa0:	beq	1c058 <__assert_fail@plt+0xad54>
   1bfa4:	cmn	r0, #1
   1bfa8:	beq	1bf2c <__assert_fail@plt+0xac28>
   1bfac:	cmn	r2, #1
   1bfb0:	beq	1bf2c <__assert_fail@plt+0xac28>
   1bfb4:	cmp	r3, #0
   1bfb8:	beq	1c060 <__assert_fail@plt+0xad5c>
   1bfbc:	ldr	r1, [sp, #104]	; 0x68
   1bfc0:	ldr	ip, [sp, #136]	; 0x88
   1bfc4:	ldr	r2, [sp, #160]	; 0xa0
   1bfc8:	sub	r2, r2, r1
   1bfcc:	cmp	r3, r2
   1bfd0:	bgt	1bf2c <__assert_fail@plt+0xac28>
   1bfd4:	mov	r2, r3
   1bfd8:	add	r1, ip, r1
   1bfdc:	str	r3, [sp, #32]
   1bfe0:	add	r0, ip, r0
   1bfe4:	bl	110c4 <memcmp@plt>
   1bfe8:	cmp	r0, #0
   1bfec:	ldr	r3, [sp, #32]
   1bff0:	bne	1bf2c <__assert_fail@plt+0xac28>
   1bff4:	ldr	r2, [r9, #12]
   1bff8:	cmp	r3, #0
   1bffc:	ldr	r1, [sp, #20]
   1c000:	ldr	r6, [r2, r1, lsl #2]
   1c004:	ldr	r2, [sp, #104]	; 0x68
   1c008:	addeq	r3, r2, #1
   1c00c:	addne	r3, r2, r3
   1c010:	cmp	r4, #0
   1c014:	str	r3, [sp, #104]	; 0x68
   1c018:	beq	1c04c <__assert_fail@plt+0xad48>
   1c01c:	ldr	r2, [sp, #224]	; 0xe0
   1c020:	cmp	r3, r2
   1c024:	bgt	1bf2c <__assert_fail@plt+0xac28>
   1c028:	ldr	r2, [sp, #232]	; 0xe8
   1c02c:	ldr	r0, [r2, r3, lsl #2]
   1c030:	cmp	r0, #0
   1c034:	beq	1bf2c <__assert_fail@plt+0xac28>
   1c038:	mov	r1, r6
   1c03c:	add	r0, r0, #4
   1c040:	bl	13d28 <__assert_fail@plt+0x2a24>
   1c044:	cmp	r0, #0
   1c048:	beq	1bf2c <__assert_fail@plt+0xac28>
   1c04c:	mov	r3, #0
   1c050:	str	r3, [sp, #112]	; 0x70
   1c054:	b	1bde8 <__assert_fail@plt+0xaae4>
   1c058:	cmp	r3, #0
   1c05c:	bne	1bff4 <__assert_fail@plt+0xacf0>
   1c060:	mov	r1, r6
   1c064:	add	r0, sp, #108	; 0x6c
   1c068:	bl	1702c <__assert_fail@plt+0x5d28>
   1c06c:	cmp	r0, #0
   1c070:	beq	1becc <__assert_fail@plt+0xabc8>
   1c074:	ldr	r2, [r9, #20]
   1c078:	mov	r3, #12
   1c07c:	mla	r6, r3, r6, r2
   1c080:	ldr	r2, [sp, #104]	; 0x68
   1c084:	ldr	r3, [r6, #8]
   1c088:	ldr	r6, [r3]
   1c08c:	ldr	r3, [sp, #232]	; 0xe8
   1c090:	mov	r1, r6
   1c094:	ldr	r0, [r3, r2, lsl #2]
   1c098:	add	r0, r0, #4
   1c09c:	bl	13d28 <__assert_fail@plt+0x2a24>
   1c0a0:	cmp	r0, #0
   1c0a4:	beq	1bf0c <__assert_fail@plt+0xac08>
   1c0a8:	b	1bde8 <__assert_fail@plt+0xaae4>
   1c0ac:	mov	r6, r9
   1c0b0:	b	1bde8 <__assert_fail@plt+0xaae4>
   1c0b4:	ldrb	r6, [sp, #208]	; 0xd0
   1c0b8:	mov	r2, r5
   1c0bc:	mov	r3, #0
   1c0c0:	ldr	r0, [sp, #100]	; 0x64
   1c0c4:	ldr	lr, [sp, #144]	; 0x90
   1c0c8:	ldr	r4, [sp, #160]	; 0xa0
   1c0cc:	ldr	ip, [sp, #164]	; 0xa4
   1c0d0:	ldr	r1, [r5, r3, lsl #3]
   1c0d4:	cmn	r1, #1
   1c0d8:	beq	1c120 <__assert_fail@plt+0xae1c>
   1c0dc:	cmp	r6, #0
   1c0e0:	beq	1c108 <__assert_fail@plt+0xae04>
   1c0e4:	cmp	r1, r4
   1c0e8:	ldrne	r1, [lr, r1, lsl #2]
   1c0ec:	moveq	r1, ip
   1c0f0:	str	r1, [r5, r3, lsl #3]
   1c0f4:	ldr	r1, [r2, #4]
   1c0f8:	cmp	r4, r1
   1c0fc:	ldrne	r1, [lr, r1, lsl #2]
   1c100:	moveq	r1, ip
   1c104:	str	r1, [r2, #4]
   1c108:	ldr	r1, [r5, r3, lsl #3]
   1c10c:	add	r1, r1, r0
   1c110:	str	r1, [r5, r3, lsl #3]
   1c114:	ldr	r1, [r2, #4]
   1c118:	add	r1, r1, r0
   1c11c:	str	r1, [r2, #4]
   1c120:	ldr	r1, [sp, #8]
   1c124:	add	r3, r3, #1
   1c128:	add	r2, r2, #8
   1c12c:	cmp	r3, r1
   1c130:	bne	1c0d0 <__assert_fail@plt+0xadcc>
   1c134:	ldr	r3, [sp, #8]
   1c138:	mov	r2, #0
   1c13c:	mvn	r1, #0
   1c140:	add	r3, r5, r3, lsl #3
   1c144:	ldr	r0, [sp, #56]	; 0x38
   1c148:	add	r3, r3, #8
   1c14c:	cmp	r2, r0
   1c150:	blt	1c1ac <__assert_fail@plt+0xaea8>
   1c154:	ldr	r3, [fp, #132]	; 0x84
   1c158:	cmp	r3, #0
   1c15c:	movne	r0, #0
   1c160:	addne	ip, r5, #4
   1c164:	beq	1b04c <__assert_fail@plt+0x9d48>
   1c168:	ldr	r1, [sp, #8]
   1c16c:	add	r2, r0, #1
   1c170:	cmp	r2, r1
   1c174:	beq	1b04c <__assert_fail@plt+0x9d48>
   1c178:	ldr	r1, [r3]
   1c17c:	cmp	r1, r0
   1c180:	beq	1c1a0 <__assert_fail@plt+0xae9c>
   1c184:	add	r1, r1, #1
   1c188:	ldr	r1, [r5, r1, lsl #3]
   1c18c:	str	r1, [r5, r2, lsl #3]
   1c190:	ldr	r1, [r3]
   1c194:	add	r1, r5, r1, lsl #3
   1c198:	ldr	r1, [r1, #12]
   1c19c:	str	r1, [ip, r2, lsl #3]
   1c1a0:	add	r3, r3, #4
   1c1a4:	mov	r0, r2
   1c1a8:	b	1c168 <__assert_fail@plt+0xae64>
   1c1ac:	add	r2, r2, #1
   1c1b0:	str	r1, [r3, #-8]
   1c1b4:	str	r1, [r3, #-4]
   1c1b8:	b	1c144 <__assert_fail@plt+0xae40>
   1c1bc:	mov	r3, #1
   1c1c0:	str	r3, [sp, #12]
   1c1c4:	b	1b080 <__assert_fail@plt+0x9d7c>
   1c1c8:	cmp	r4, #0
   1c1cc:	beq	1c060 <__assert_fail@plt+0xad5c>
   1c1d0:	b	1bf2c <__assert_fail@plt+0xac28>
   1c1d4:	ldr	r3, [sp, #8]
   1c1d8:	cmp	r3, #0
   1c1dc:	movne	r3, #1
   1c1e0:	addne	r1, r5, #4
   1c1e4:	mvnne	r2, #0
   1c1e8:	bne	1ba34 <__assert_fail@plt+0xa730>
   1c1ec:	b	1b04c <__assert_fail@plt+0x9d48>
   1c1f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1f4:	sub	sp, sp, #148	; 0x94
   1c1f8:	mov	fp, r0
   1c1fc:	mov	r6, r1
   1c200:	mov	r5, r2
   1c204:	and	r7, r3, #16777216	; 0x1000000
   1c208:	and	r8, r3, #32
   1c20c:	ldr	sl, [sp, #188]	; 0xbc
   1c210:	and	r9, r3, #16
   1c214:	str	r3, [sp, #8]
   1c218:	ldrb	r3, [r5, #4]
   1c21c:	ldr	r4, [r6]
   1c220:	sub	r2, r3, #1
   1c224:	cmp	r2, #35	; 0x23
   1c228:	ldrls	pc, [pc, r2, lsl #2]
   1c22c:	b	1cec8 <__assert_fail@plt+0xbbc4>
   1c230:	andeq	ip, r1, r0, asr #5
   1c234:	andeq	ip, r1, ip, ror #9
   1c238:	andeq	ip, r1, r8, asr #29
   1c23c:	andeq	ip, r1, r0, lsr #23
   1c240:	andeq	ip, r1, ip, lsr lr
   1c244:	andeq	ip, r1, r8, asr #29
   1c248:	andeq	ip, r1, r8, asr #29
   1c24c:	andeq	ip, r1, ip, lsl #8
   1c250:	andeq	ip, r1, ip, lsr ip
   1c254:	andeq	ip, r1, ip, ror #9
   1c258:	andeq	ip, r1, r0, lsl ip
   1c25c:	andeq	ip, r1, r4, lsl #25
   1c260:	andeq	ip, r1, r8, asr #29
   1c264:	andeq	ip, r1, r8, asr #29
   1c268:	andeq	ip, r1, r8, asr #29
   1c26c:	andeq	ip, r1, r8, asr #29
   1c270:	andeq	ip, r1, r8, asr #29
   1c274:	andeq	ip, r1, r0, lsl ip
   1c278:	andeq	ip, r1, r0, lsl ip
   1c27c:	strdeq	ip, [r1], -r4
   1c280:	andeq	ip, r1, r8, asr #29
   1c284:	andeq	ip, r1, r8, asr #29
   1c288:	andeq	ip, r1, r0, lsl #24
   1c28c:	andeq	ip, r1, ip, asr ip
   1c290:	andeq	ip, r1, r8, asr #29
   1c294:	andeq	ip, r1, r8, asr #29
   1c298:	andeq	ip, r1, r8, asr #29
   1c29c:	andeq	ip, r1, r8, asr #29
   1c2a0:	andeq	ip, r1, r8, asr #29
   1c2a4:	andeq	ip, r1, r8, asr #29
   1c2a8:	andeq	ip, r1, r8, asr #29
   1c2ac:	andeq	ip, r1, r8, ror #28
   1c2b0:	andeq	ip, r1, r8, ror #28
   1c2b4:	andeq	ip, r1, ip, lsr #29
   1c2b8:	andeq	ip, r1, ip, lsr #29
   1c2bc:	andeq	ip, r1, r8, asr #29
   1c2c0:	mov	r2, #0
   1c2c4:	mov	r3, r5
   1c2c8:	mov	r1, r2
   1c2cc:	mov	r0, r4
   1c2d0:	bl	143bc <__assert_fail@plt+0x30b8>
   1c2d4:	subs	r6, r0, #0
   1c2d8:	bne	1c2e8 <__assert_fail@plt+0xafe4>
   1c2dc:	mov	r3, #12
   1c2e0:	str	r3, [sl]
   1c2e4:	b	1c4ec <__assert_fail@plt+0xb1e8>
   1c2e8:	ldr	r3, [r4, #92]	; 0x5c
   1c2ec:	cmp	r3, #1
   1c2f0:	bgt	1c3dc <__assert_fail@plt+0xb0d8>
   1c2f4:	mov	r1, fp
   1c2f8:	mov	r0, r5
   1c2fc:	ldr	r2, [sp, #8]
   1c300:	bl	18638 <__assert_fail@plt+0x7334>
   1c304:	ldrb	r3, [r5, #4]
   1c308:	cmp	r3, #23
   1c30c:	bhi	1cc50 <__assert_fail@plt+0xb94c>
   1c310:	ldr	r2, [pc, #3904]	; 1d258 <__assert_fail@plt+0xbf54>
   1c314:	sub	r9, r3, #18
   1c318:	clz	r9, r9
   1c31c:	lsr	r9, r9, #5
   1c320:	mvn	r8, r2, lsr r3
   1c324:	ands	r8, r8, #1
   1c328:	bne	1cc50 <__assert_fail@plt+0xb94c>
   1c32c:	ldr	r2, [fp, #40]	; 0x28
   1c330:	cmp	r3, #23
   1c334:	ldm	r5, {r0, r1}
   1c338:	str	r2, [sp, #12]
   1c33c:	add	r2, sp, #112	; 0x70
   1c340:	stm	r2, {r0, r1}
   1c344:	bne	1d01c <__assert_fail@plt+0xbd18>
   1c348:	mov	r1, r5
   1c34c:	mov	r0, fp
   1c350:	ldr	r2, [sp, #8]
   1c354:	bl	18654 <__assert_fail@plt+0x7350>
   1c358:	cmn	r0, #1
   1c35c:	mov	r9, r0
   1c360:	bne	1ced0 <__assert_fail@plt+0xbbcc>
   1c364:	ldrb	r3, [r5, #4]
   1c368:	cmp	r3, #1
   1c36c:	bne	1c380 <__assert_fail@plt+0xb07c>
   1c370:	ldrb	r3, [r5]
   1c374:	cmp	r3, #44	; 0x2c
   1c378:	moveq	r9, r8
   1c37c:	beq	1cf3c <__assert_fail@plt+0xbc38>
   1c380:	mov	r3, #10
   1c384:	mov	r7, #0
   1c388:	str	r3, [sl]
   1c38c:	b	1cf04 <__assert_fail@plt+0xbc00>
   1c390:	mov	r1, fp
   1c394:	mov	r0, r5
   1c398:	ldr	r2, [sp, #8]
   1c39c:	bl	18638 <__assert_fail@plt+0x7334>
   1c3a0:	mov	r2, #0
   1c3a4:	mov	r3, r5
   1c3a8:	mov	r1, r2
   1c3ac:	mov	r0, r4
   1c3b0:	bl	143bc <__assert_fail@plt+0x30b8>
   1c3b4:	mov	r7, r0
   1c3b8:	mov	r2, r0
   1c3bc:	mov	r1, r6
   1c3c0:	mov	r3, #16
   1c3c4:	mov	r0, r4
   1c3c8:	bl	14510 <__assert_fail@plt+0x320c>
   1c3cc:	cmp	r0, #0
   1c3d0:	cmpne	r7, #0
   1c3d4:	mov	r6, r0
   1c3d8:	beq	1c2dc <__assert_fail@plt+0xafd8>
   1c3dc:	ldr	r3, [fp, #40]	; 0x28
   1c3e0:	ldr	r2, [fp, #56]	; 0x38
   1c3e4:	cmp	r2, r3
   1c3e8:	ble	1c2f4 <__assert_fail@plt+0xaff0>
   1c3ec:	ldr	r2, [fp, #28]
   1c3f0:	cmp	r3, r2
   1c3f4:	beq	1c2f4 <__assert_fail@plt+0xaff0>
   1c3f8:	ldr	r2, [fp, #8]
   1c3fc:	ldr	r3, [r2, r3, lsl #2]
   1c400:	cmn	r3, #1
   1c404:	beq	1c390 <__assert_fail@plt+0xb08c>
   1c408:	b	1c2f4 <__assert_fail@plt+0xaff0>
   1c40c:	ldr	r7, [r6, #24]
   1c410:	mov	r1, fp
   1c414:	mov	r0, r5
   1c418:	add	r3, r7, #1
   1c41c:	str	r3, [r6, #24]
   1c420:	ldr	r3, [sp, #8]
   1c424:	orr	r2, r3, #8388608	; 0x800000
   1c428:	bl	18638 <__assert_fail@plt+0x7334>
   1c42c:	ldrb	r3, [r5, #4]
   1c430:	cmp	r3, #9
   1c434:	moveq	r1, #0
   1c438:	beq	1c498 <__assert_fail@plt+0xb194>
   1c43c:	ldr	r3, [sp, #184]	; 0xb8
   1c440:	mov	r2, r5
   1c444:	mov	r1, r6
   1c448:	mov	r0, fp
   1c44c:	add	r3, r3, #1
   1c450:	stm	sp, {r3, sl}
   1c454:	ldr	r3, [sp, #8]
   1c458:	bl	1d3c8 <__assert_fail@plt+0xc0c4>
   1c45c:	ldr	r2, [sl]
   1c460:	mov	r1, r0
   1c464:	cmp	r2, #0
   1c468:	bne	1c490 <__assert_fail@plt+0xb18c>
   1c46c:	ldrb	r3, [r5, #4]
   1c470:	cmp	r3, #9
   1c474:	beq	1c498 <__assert_fail@plt+0xb194>
   1c478:	cmp	r0, #0
   1c47c:	beq	1c488 <__assert_fail@plt+0xb184>
   1c480:	ldr	r1, [pc, #3540]	; 1d25c <__assert_fail@plt+0xbf58>
   1c484:	bl	13d9c <__assert_fail@plt+0x2a98>
   1c488:	mov	r3, #8
   1c48c:	str	r3, [sl]
   1c490:	mov	r6, #0
   1c494:	b	1c4d0 <__assert_fail@plt+0xb1cc>
   1c498:	cmp	r7, #8
   1c49c:	mov	r0, r4
   1c4a0:	ldrls	r3, [r4, #84]	; 0x54
   1c4a4:	movls	r2, #1
   1c4a8:	orrls	r3, r3, r2, lsl r7
   1c4ac:	mov	r2, #0
   1c4b0:	strls	r3, [r4, #84]	; 0x54
   1c4b4:	mov	r3, #17
   1c4b8:	bl	14510 <__assert_fail@plt+0x320c>
   1c4bc:	subs	r6, r0, #0
   1c4c0:	strne	r7, [r6, #20]
   1c4c4:	bne	1c4d0 <__assert_fail@plt+0xb1cc>
   1c4c8:	mov	r3, #12
   1c4cc:	str	r3, [sl]
   1c4d0:	ldr	r2, [sl]
   1c4d4:	clz	r3, r6
   1c4d8:	lsr	r3, r3, #5
   1c4dc:	cmp	r2, #0
   1c4e0:	moveq	r3, #0
   1c4e4:	cmp	r3, #0
   1c4e8:	beq	1c2f4 <__assert_fail@plt+0xaff0>
   1c4ec:	mov	r6, #0
   1c4f0:	b	1cc50 <__assert_fail@plt+0xb94c>
   1c4f4:	mov	r6, #0
   1c4f8:	mov	r1, #1
   1c4fc:	mov	r0, #32
   1c500:	str	r6, [sp, #52]	; 0x34
   1c504:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1c508:	mov	r1, #1
   1c50c:	str	r0, [sp, #12]
   1c510:	mov	r0, #40	; 0x28
   1c514:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1c518:	ldr	r3, [sp, #12]
   1c51c:	mov	r7, r0
   1c520:	clz	r0, r0
   1c524:	lsr	r0, r0, #5
   1c528:	cmp	r3, r6
   1c52c:	movne	r8, r0
   1c530:	moveq	r8, #1
   1c534:	cmp	r8, r6
   1c538:	beq	1c550 <__assert_fail@plt+0xb24c>
   1c53c:	mov	r0, r3
   1c540:	bl	1f990 <__assert_fail@plt+0xe68c>
   1c544:	mov	r0, r7
   1c548:	bl	1f990 <__assert_fail@plt+0xe68c>
   1c54c:	b	1c4c8 <__assert_fail@plt+0xb1c4>
   1c550:	mov	r1, fp
   1c554:	mov	r0, r5
   1c558:	ldr	r2, [sp, #8]
   1c55c:	bl	13e14 <__assert_fail@plt+0x2b10>
   1c560:	ldrb	r3, [r5, #4]
   1c564:	str	r0, [sp, #20]
   1c568:	cmp	r3, #2
   1c56c:	bne	1c57c <__assert_fail@plt+0xb278>
   1c570:	mov	r3, #2
   1c574:	str	r3, [sl]
   1c578:	b	1c64c <__assert_fail@plt+0xb348>
   1c57c:	cmp	r3, #25
   1c580:	strne	r8, [sp, #32]
   1c584:	bne	1c5e4 <__assert_fail@plt+0xb2e0>
   1c588:	ldrb	r3, [r7, #16]
   1c58c:	orr	r3, r3, #1
   1c590:	strb	r3, [r7, #16]
   1c594:	ldr	r3, [sp, #8]
   1c598:	tst	r3, #256	; 0x100
   1c59c:	beq	1c5ac <__assert_fail@plt+0xb2a8>
   1c5a0:	mov	r1, #10
   1c5a4:	ldr	r0, [sp, #12]
   1c5a8:	bl	13b88 <__assert_fail@plt+0x2884>
   1c5ac:	ldr	r2, [sp, #20]
   1c5b0:	mov	r1, fp
   1c5b4:	mov	r0, r5
   1c5b8:	ldr	r3, [fp, #40]	; 0x28
   1c5bc:	add	r3, r3, r2
   1c5c0:	ldr	r2, [sp, #8]
   1c5c4:	str	r3, [fp, #40]	; 0x28
   1c5c8:	bl	13e14 <__assert_fail@plt+0x2b10>
   1c5cc:	ldrb	r3, [r5, #4]
   1c5d0:	str	r0, [sp, #20]
   1c5d4:	cmp	r3, #2
   1c5d8:	movne	r3, #1
   1c5dc:	strne	r3, [sp, #32]
   1c5e0:	beq	1c570 <__assert_fail@plt+0xb26c>
   1c5e4:	ldrb	r3, [r5, #4]
   1c5e8:	mov	r2, #0
   1c5ec:	cmp	r3, #21
   1c5f0:	moveq	r3, #1
   1c5f4:	strbeq	r3, [r5, #4]
   1c5f8:	mov	r3, #0
   1c5fc:	strd	r2, [sp, #24]
   1c600:	mov	r3, #1
   1c604:	ldr	r2, [sp, #8]
   1c608:	ubfx	r2, r2, #16, #1
   1c60c:	str	r2, [sp, #36]	; 0x24
   1c610:	str	r3, [sp, #4]
   1c614:	add	r2, sp, #80	; 0x50
   1c618:	mov	r6, #3
   1c61c:	ldr	r3, [sp, #8]
   1c620:	mov	r1, fp
   1c624:	add	r0, sp, #56	; 0x38
   1c628:	str	r2, [sp, #60]	; 0x3c
   1c62c:	mov	r2, r5
   1c630:	str	r3, [sp]
   1c634:	ldr	r3, [sp, #20]
   1c638:	str	r6, [sp, #56]	; 0x38
   1c63c:	bl	186fc <__assert_fail@plt+0x73f8>
   1c640:	cmp	r0, #0
   1c644:	beq	1c660 <__assert_fail@plt+0xb35c>
   1c648:	str	r0, [sl]
   1c64c:	ldr	r0, [sp, #12]
   1c650:	bl	1f990 <__assert_fail@plt+0xe68c>
   1c654:	mov	r0, r7
   1c658:	bl	14e80 <__assert_fail@plt+0x3b7c>
   1c65c:	b	1c490 <__assert_fail@plt+0xb18c>
   1c660:	mov	r1, fp
   1c664:	mov	r0, r5
   1c668:	ldr	r2, [sp, #8]
   1c66c:	bl	13e14 <__assert_fail@plt+0x2b10>
   1c670:	ldr	r3, [sp, #56]	; 0x38
   1c674:	str	r0, [sp, #20]
   1c678:	sub	r3, r3, #2
   1c67c:	bics	r3, r3, #2
   1c680:	beq	1c730 <__assert_fail@plt+0xb42c>
   1c684:	ldrb	r3, [r5, #4]
   1c688:	cmp	r3, #2
   1c68c:	bne	1c698 <__assert_fail@plt+0xb394>
   1c690:	mov	r3, #7
   1c694:	b	1c574 <__assert_fail@plt+0xb270>
   1c698:	cmp	r3, #22
   1c69c:	bne	1c730 <__assert_fail@plt+0xb42c>
   1c6a0:	ldr	r2, [sp, #20]
   1c6a4:	mov	r1, fp
   1c6a8:	add	r0, sp, #72	; 0x48
   1c6ac:	ldr	r3, [fp, #40]	; 0x28
   1c6b0:	add	r3, r3, r2
   1c6b4:	ldr	r2, [sp, #8]
   1c6b8:	str	r3, [fp, #40]	; 0x28
   1c6bc:	bl	13e14 <__assert_fail@plt+0x2b10>
   1c6c0:	ldrb	r2, [sp, #76]	; 0x4c
   1c6c4:	mov	r3, r0
   1c6c8:	cmp	r2, #2
   1c6cc:	beq	1c690 <__assert_fail@plt+0xb38c>
   1c6d0:	cmp	r2, #21
   1c6d4:	beq	1c718 <__assert_fail@plt+0xb414>
   1c6d8:	add	r2, sp, #112	; 0x70
   1c6dc:	mov	r1, fp
   1c6e0:	str	r6, [sp, #64]	; 0x40
   1c6e4:	add	r0, sp, #64	; 0x40
   1c6e8:	str	r2, [sp, #68]	; 0x44
   1c6ec:	mov	r2, #1
   1c6f0:	str	r2, [sp, #4]
   1c6f4:	ldr	r2, [sp, #8]
   1c6f8:	str	r2, [sp]
   1c6fc:	add	r2, sp, #72	; 0x48
   1c700:	bl	186fc <__assert_fail@plt+0x73f8>
   1c704:	subs	r3, r0, #0
   1c708:	str	r3, [sp, #16]
   1c70c:	beq	1c754 <__assert_fail@plt+0xb450>
   1c710:	ldr	r3, [sp, #16]
   1c714:	b	1c574 <__assert_fail@plt+0xb270>
   1c718:	ldr	r2, [sp, #20]
   1c71c:	ldr	r3, [fp, #40]	; 0x28
   1c720:	sub	r3, r3, r2
   1c724:	str	r3, [fp, #40]	; 0x28
   1c728:	mov	r3, #1
   1c72c:	strb	r3, [r5, #4]
   1c730:	ldr	r3, [sp, #56]	; 0x38
   1c734:	cmp	r3, #4
   1c738:	ldrls	pc, [pc, r3, lsl #2]
   1c73c:	b	1ca4c <__assert_fail@plt+0xb748>
   1c740:	andeq	ip, r1, r4, lsr #19
   1c744:	andeq	ip, r1, ip, asr #19
   1c748:	andeq	ip, r1, ip, lsl sl
   1c74c:	andeq	ip, r1, ip, lsl sl
   1c750:	andeq	ip, r1, ip, asr #20
   1c754:	mov	r1, fp
   1c758:	mov	r0, r5
   1c75c:	ldr	r2, [sp, #8]
   1c760:	bl	13e14 <__assert_fail@plt+0x2b10>
   1c764:	ldr	r2, [sp, #56]	; 0x38
   1c768:	str	r0, [sp, #20]
   1c76c:	sub	r3, r2, #2
   1c770:	bics	r3, r3, #2
   1c774:	beq	1c99c <__assert_fail@plt+0xb698>
   1c778:	ldr	r8, [sp, #64]	; 0x40
   1c77c:	sub	r3, r8, #2
   1c780:	bics	r3, r3, #2
   1c784:	beq	1c99c <__assert_fail@plt+0xb698>
   1c788:	cmp	r2, #3
   1c78c:	moveq	r9, #1
   1c790:	movne	r9, #0
   1c794:	bne	1c7b8 <__assert_fail@plt+0xb4b4>
   1c798:	ldr	r0, [sp, #60]	; 0x3c
   1c79c:	str	r2, [sp, #40]	; 0x28
   1c7a0:	bl	111cc <strlen@plt>
   1c7a4:	cmp	r0, #1
   1c7a8:	ldr	r2, [sp, #40]	; 0x28
   1c7ac:	bls	1d230 <__assert_fail@plt+0xbf2c>
   1c7b0:	mov	r3, #3
   1c7b4:	b	1c8f4 <__assert_fail@plt+0xb5f0>
   1c7b8:	cmp	r8, #3
   1c7bc:	bne	1d23c <__assert_fail@plt+0xbf38>
   1c7c0:	ldr	r0, [sp, #68]	; 0x44
   1c7c4:	str	r2, [sp, #40]	; 0x28
   1c7c8:	bl	111cc <strlen@plt>
   1c7cc:	cmp	r0, #1
   1c7d0:	bhi	1c7b0 <__assert_fail@plt+0xb4ac>
   1c7d4:	ldr	r2, [sp, #40]	; 0x28
   1c7d8:	cmp	r2, #0
   1c7dc:	bne	1c8fc <__assert_fail@plt+0xb5f8>
   1c7e0:	ldrb	r6, [sp, #60]	; 0x3c
   1c7e4:	cmp	r8, #0
   1c7e8:	bne	1c920 <__assert_fail@plt+0xb61c>
   1c7ec:	ldrb	r8, [sp, #68]	; 0x44
   1c7f0:	cmp	r2, #0
   1c7f4:	moveq	r9, #1
   1c7f8:	cmp	r9, #0
   1c7fc:	ldreq	r6, [sp, #60]	; 0x3c
   1c800:	beq	1c81c <__assert_fail@plt+0xb518>
   1c804:	ldr	r3, [r4, #92]	; 0x5c
   1c808:	cmp	r3, #1
   1c80c:	ble	1c81c <__assert_fail@plt+0xb518>
   1c810:	mov	r0, r6
   1c814:	bl	11214 <btowc@plt>
   1c818:	mov	r6, r0
   1c81c:	ldr	r3, [sp, #64]	; 0x40
   1c820:	cmp	r3, #3
   1c824:	cmpne	r3, #0
   1c828:	ldrne	r8, [sp, #68]	; 0x44
   1c82c:	bne	1c848 <__assert_fail@plt+0xb544>
   1c830:	ldr	r3, [r4, #92]	; 0x5c
   1c834:	cmp	r3, #1
   1c838:	ble	1c848 <__assert_fail@plt+0xb544>
   1c83c:	mov	r0, r8
   1c840:	bl	11214 <btowc@plt>
   1c844:	mov	r8, r0
   1c848:	cmn	r6, #1
   1c84c:	cmnne	r8, #1
   1c850:	beq	1c7b0 <__assert_fail@plt+0xb4ac>
   1c854:	ldr	r3, [sp, #36]	; 0x24
   1c858:	cmp	r6, r8
   1c85c:	movls	r3, #0
   1c860:	andhi	r3, r3, #1
   1c864:	cmp	r3, #0
   1c868:	bne	1c99c <__assert_fail@plt+0xb698>
   1c86c:	ldr	r3, [r4, #92]	; 0x5c
   1c870:	cmp	r3, #1
   1c874:	ble	1c950 <__assert_fail@plt+0xb64c>
   1c878:	ldr	r2, [sp, #28]
   1c87c:	ldr	r3, [r7, #32]
   1c880:	cmp	r3, r2
   1c884:	bne	1c930 <__assert_fail@plt+0xb62c>
   1c888:	lsl	r9, r2, #1
   1c88c:	ldr	r0, [r7, #4]
   1c890:	add	r9, r9, #1
   1c894:	lsl	r3, r9, #2
   1c898:	mov	r1, r3
   1c89c:	str	r3, [sp, #44]	; 0x2c
   1c8a0:	bl	1f83c <__assert_fail@plt+0xe538>
   1c8a4:	ldr	r3, [sp, #44]	; 0x2c
   1c8a8:	mov	r2, r0
   1c8ac:	ldr	r0, [r7, #8]
   1c8b0:	str	r2, [sp, #40]	; 0x28
   1c8b4:	mov	r1, r3
   1c8b8:	bl	1f83c <__assert_fail@plt+0xe538>
   1c8bc:	ldr	r2, [sp, #40]	; 0x28
   1c8c0:	mov	r3, r0
   1c8c4:	cmp	r0, #0
   1c8c8:	cmpne	r2, #0
   1c8cc:	strdne	r2, [r7, #4]
   1c8d0:	strne	r9, [sp, #28]
   1c8d4:	bne	1c930 <__assert_fail@plt+0xb62c>
   1c8d8:	mov	r0, r2
   1c8dc:	str	r3, [sp, #16]
   1c8e0:	bl	1f990 <__assert_fail@plt+0xe68c>
   1c8e4:	ldr	r3, [sp, #16]
   1c8e8:	mov	r0, r3
   1c8ec:	bl	1f990 <__assert_fail@plt+0xe68c>
   1c8f0:	mov	r3, #12
   1c8f4:	str	r3, [sp, #16]
   1c8f8:	b	1c988 <__assert_fail@plt+0xb684>
   1c8fc:	cmp	r2, #3
   1c900:	bne	1c910 <__assert_fail@plt+0xb60c>
   1c904:	ldr	r3, [sp, #60]	; 0x3c
   1c908:	ldrb	r6, [r3]
   1c90c:	b	1c7e4 <__assert_fail@plt+0xb4e0>
   1c910:	mov	r6, #0
   1c914:	ldr	r3, [sp, #68]	; 0x44
   1c918:	ldrb	r8, [r3]
   1c91c:	b	1c7f0 <__assert_fail@plt+0xb4ec>
   1c920:	cmp	r8, #3
   1c924:	beq	1c914 <__assert_fail@plt+0xb610>
   1c928:	mov	r8, #0
   1c92c:	b	1c7f0 <__assert_fail@plt+0xb4ec>
   1c930:	ldr	r3, [r7, #4]
   1c934:	ldr	r2, [r7, #32]
   1c938:	str	r6, [r3, r2, lsl #2]
   1c93c:	ldr	r2, [r7, #8]
   1c940:	ldr	r3, [r7, #32]
   1c944:	add	r1, r3, #1
   1c948:	str	r1, [r7, #32]
   1c94c:	str	r8, [r2, r3, lsl #2]
   1c950:	mov	r9, #0
   1c954:	cmp	r6, r9
   1c958:	movhi	r3, #0
   1c95c:	movls	r3, #1
   1c960:	cmp	r8, r9
   1c964:	movcc	r3, #0
   1c968:	cmp	r3, #0
   1c96c:	beq	1c97c <__assert_fail@plt+0xb678>
   1c970:	mov	r1, r9
   1c974:	ldr	r0, [sp, #12]
   1c978:	bl	13b88 <__assert_fail@plt+0x2884>
   1c97c:	add	r9, r9, #1
   1c980:	cmp	r9, #256	; 0x100
   1c984:	bne	1c954 <__assert_fail@plt+0xb650>
   1c988:	ldr	r3, [sp, #16]
   1c98c:	cmp	r3, #0
   1c990:	str	r3, [sl]
   1c994:	beq	1c9b0 <__assert_fail@plt+0xb6ac>
   1c998:	b	1c64c <__assert_fail@plt+0xb348>
   1c99c:	mov	r3, #11
   1c9a0:	b	1c8f4 <__assert_fail@plt+0xb5f0>
   1c9a4:	ldrb	r1, [sp, #60]	; 0x3c
   1c9a8:	ldr	r0, [sp, #12]
   1c9ac:	bl	13b88 <__assert_fail@plt+0x2884>
   1c9b0:	ldrb	r3, [r5, #4]
   1c9b4:	cmp	r3, #2
   1c9b8:	beq	1c690 <__assert_fail@plt+0xb38c>
   1c9bc:	cmp	r3, #21
   1c9c0:	beq	1ca7c <__assert_fail@plt+0xb778>
   1c9c4:	mov	r3, #0
   1c9c8:	b	1c610 <__assert_fail@plt+0xb30c>
   1c9cc:	ldr	r3, [r7, #20]
   1c9d0:	ldr	r2, [sp, #24]
   1c9d4:	cmp	r3, r2
   1c9d8:	bne	1ca00 <__assert_fail@plt+0xb6fc>
   1c9dc:	lsl	r3, r2, #1
   1c9e0:	ldr	r0, [r7]
   1c9e4:	add	r3, r3, #1
   1c9e8:	lsl	r1, r3, #2
   1c9ec:	str	r3, [sp, #24]
   1c9f0:	bl	1f83c <__assert_fail@plt+0xe538>
   1c9f4:	cmp	r0, #0
   1c9f8:	beq	1d228 <__assert_fail@plt+0xbf24>
   1c9fc:	str	r0, [r7]
   1ca00:	ldr	r2, [r7]
   1ca04:	ldr	r3, [r7, #20]
   1ca08:	add	r1, r3, #1
   1ca0c:	str	r1, [r7, #20]
   1ca10:	ldr	r1, [sp, #60]	; 0x3c
   1ca14:	str	r1, [r2, r3, lsl #2]
   1ca18:	b	1c9b0 <__assert_fail@plt+0xb6ac>
   1ca1c:	ldr	r6, [sp, #60]	; 0x3c
   1ca20:	mov	r0, r6
   1ca24:	bl	111cc <strlen@plt>
   1ca28:	cmp	r0, #1
   1ca2c:	movne	r3, #3
   1ca30:	bne	1c574 <__assert_fail@plt+0xb270>
   1ca34:	ldrb	r1, [r6]
   1ca38:	ldr	r0, [sp, #12]
   1ca3c:	bl	13b88 <__assert_fail@plt+0x2884>
   1ca40:	mov	r3, #0
   1ca44:	str	r3, [sl]
   1ca48:	b	1c9b0 <__assert_fail@plt+0xb6ac>
   1ca4c:	ldr	r3, [sp, #8]
   1ca50:	mov	r2, r7
   1ca54:	ldr	r0, [fp, #64]	; 0x40
   1ca58:	ldr	r1, [sp, #12]
   1ca5c:	str	r3, [sp, #4]
   1ca60:	ldr	r3, [sp, #60]	; 0x3c
   1ca64:	str	r3, [sp]
   1ca68:	add	r3, sp, #52	; 0x34
   1ca6c:	bl	155b8 <__assert_fail@plt+0x42b4>
   1ca70:	cmp	r0, #0
   1ca74:	str	r0, [sl]
   1ca78:	b	1c994 <__assert_fail@plt+0xb690>
   1ca7c:	ldr	r2, [sp, #20]
   1ca80:	ldr	r3, [fp, #40]	; 0x28
   1ca84:	add	r3, r3, r2
   1ca88:	str	r3, [fp, #40]	; 0x28
   1ca8c:	ldr	r3, [sp, #32]
   1ca90:	cmp	r3, #0
   1ca94:	beq	1caa0 <__assert_fail@plt+0xb79c>
   1ca98:	ldr	r0, [sp, #12]
   1ca9c:	bl	13bd4 <__assert_fail@plt+0x28d0>
   1caa0:	ldr	r3, [r4, #92]	; 0x5c
   1caa4:	cmp	r3, #1
   1caa8:	ble	1cab8 <__assert_fail@plt+0xb7b4>
   1caac:	ldr	r0, [sp, #12]
   1cab0:	ldr	r1, [r4, #60]	; 0x3c
   1cab4:	bl	13c1c <__assert_fail@plt+0x2918>
   1cab8:	ldr	r3, [r7, #20]
   1cabc:	cmp	r3, #0
   1cac0:	bne	1cb0c <__assert_fail@plt+0xb808>
   1cac4:	ldr	r3, [r7, #24]
   1cac8:	cmp	r3, #0
   1cacc:	bne	1cb0c <__assert_fail@plt+0xb808>
   1cad0:	ldr	r3, [r7, #28]
   1cad4:	cmp	r3, #0
   1cad8:	bne	1cb0c <__assert_fail@plt+0xb808>
   1cadc:	ldr	r3, [r7, #32]
   1cae0:	cmp	r3, #0
   1cae4:	bne	1cb0c <__assert_fail@plt+0xb808>
   1cae8:	ldr	r3, [r4, #92]	; 0x5c
   1caec:	cmp	r3, #1
   1caf0:	ble	1cb70 <__assert_fail@plt+0xb86c>
   1caf4:	ldr	r3, [r7, #36]	; 0x24
   1caf8:	cmp	r3, #0
   1cafc:	bne	1cb0c <__assert_fail@plt+0xb808>
   1cb00:	ldrb	r3, [r7, #16]
   1cb04:	tst	r3, #1
   1cb08:	beq	1cb70 <__assert_fail@plt+0xb86c>
   1cb0c:	ldrb	r3, [r4, #88]	; 0x58
   1cb10:	mov	r2, #0
   1cb14:	mov	r0, r4
   1cb18:	mov	r1, r2
   1cb1c:	orr	r3, r3, #2
   1cb20:	strb	r3, [r4, #88]	; 0x58
   1cb24:	mov	r3, #6
   1cb28:	str	r7, [sp, #112]	; 0x70
   1cb2c:	strb	r3, [sp, #116]	; 0x74
   1cb30:	add	r3, sp, #112	; 0x70
   1cb34:	bl	143bc <__assert_fail@plt+0x30b8>
   1cb38:	subs	r6, r0, #0
   1cb3c:	beq	1d228 <__assert_fail@plt+0xbf24>
   1cb40:	ldr	r3, [sp, #12]
   1cb44:	ldr	r2, [sp, #12]
   1cb48:	sub	r3, r3, #4
   1cb4c:	add	r2, r2, #28
   1cb50:	ldr	r1, [r3, #4]!
   1cb54:	cmp	r1, #0
   1cb58:	bne	1d1e4 <__assert_fail@plt+0xbee0>
   1cb5c:	cmp	r2, r3
   1cb60:	bne	1cb50 <__assert_fail@plt+0xb84c>
   1cb64:	ldr	r0, [sp, #12]
   1cb68:	bl	1f990 <__assert_fail@plt+0xe68c>
   1cb6c:	b	1c4d0 <__assert_fail@plt+0xb1cc>
   1cb70:	mov	r0, r7
   1cb74:	bl	14e80 <__assert_fail@plt+0x3b7c>
   1cb78:	mov	r3, #3
   1cb7c:	mov	r2, #0
   1cb80:	mov	r1, r2
   1cb84:	mov	r0, r4
   1cb88:	strb	r3, [sp, #116]	; 0x74
   1cb8c:	ldr	r3, [sp, #12]
   1cb90:	str	r3, [sp, #112]	; 0x70
   1cb94:	add	r3, sp, #112	; 0x70
   1cb98:	bl	143bc <__assert_fail@plt+0x30b8>
   1cb9c:	b	1d220 <__assert_fail@plt+0xbf1c>
   1cba0:	ldr	r2, [r5]
   1cba4:	mov	r3, #1
   1cba8:	ldr	r6, [r4, #84]	; 0x54
   1cbac:	lsl	r3, r3, r2
   1cbb0:	ands	r6, r3, r6
   1cbb4:	moveq	r3, #6
   1cbb8:	beq	1cc4c <__assert_fail@plt+0xb948>
   1cbbc:	ldr	r2, [r4, #80]	; 0x50
   1cbc0:	mov	r0, r4
   1cbc4:	orr	r3, r2, r3
   1cbc8:	mov	r2, #0
   1cbcc:	mov	r1, r2
   1cbd0:	str	r3, [r4, #80]	; 0x50
   1cbd4:	mov	r3, r5
   1cbd8:	bl	143bc <__assert_fail@plt+0x30b8>
   1cbdc:	subs	r6, r0, #0
   1cbe0:	ldrne	r3, [r4, #76]	; 0x4c
   1cbe4:	addne	r3, r3, #1
   1cbe8:	strne	r3, [r4, #76]	; 0x4c
   1cbec:	beq	1c2dc <__assert_fail@plt+0xafd8>
   1cbf0:	ldrb	r3, [r4, #88]	; 0x58
   1cbf4:	orr	r3, r3, #2
   1cbf8:	strb	r3, [r4, #88]	; 0x58
   1cbfc:	b	1c2f4 <__assert_fail@plt+0xaff0>
   1cc00:	cmp	r7, #0
   1cc04:	beq	1cc10 <__assert_fail@plt+0xb90c>
   1cc08:	mov	r3, #13
   1cc0c:	b	1c2e0 <__assert_fail@plt+0xafdc>
   1cc10:	cmp	r8, #0
   1cc14:	bne	1cc08 <__assert_fail@plt+0xb904>
   1cc18:	cmp	r9, #0
   1cc1c:	beq	1cc34 <__assert_fail@plt+0xb930>
   1cc20:	mov	r1, fp
   1cc24:	mov	r0, r5
   1cc28:	ldr	r2, [sp, #8]
   1cc2c:	bl	18638 <__assert_fail@plt+0x7334>
   1cc30:	b	1c218 <__assert_fail@plt+0xaf14>
   1cc34:	cmp	r3, #9
   1cc38:	bne	1cc5c <__assert_fail@plt+0xb958>
   1cc3c:	ldr	r3, [sp, #8]
   1cc40:	ands	r6, r3, #131072	; 0x20000
   1cc44:	bne	1cc5c <__assert_fail@plt+0xb958>
   1cc48:	mov	r3, #16
   1cc4c:	str	r3, [sl]
   1cc50:	mov	r0, r6
   1cc54:	add	sp, sp, #148	; 0x94
   1cc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc5c:	mov	r3, #1
   1cc60:	mov	r2, #0
   1cc64:	mov	r1, r2
   1cc68:	mov	r0, r4
   1cc6c:	strb	r3, [r5, #4]
   1cc70:	mov	r3, r5
   1cc74:	bl	143bc <__assert_fail@plt+0x30b8>
   1cc78:	subs	r6, r0, #0
   1cc7c:	bne	1c2f4 <__assert_fail@plt+0xaff0>
   1cc80:	b	1c2dc <__assert_fail@plt+0xafd8>
   1cc84:	ldr	r3, [r5]
   1cc88:	movw	r2, #783	; 0x30f
   1cc8c:	tst	r2, r3
   1cc90:	beq	1ccdc <__assert_fail@plt+0xb9d8>
   1cc94:	ldrb	r3, [r4, #88]	; 0x58
   1cc98:	ands	r7, r3, #16
   1cc9c:	bne	1ccdc <__assert_fail@plt+0xb9d8>
   1cca0:	orr	r3, r3, #16
   1cca4:	ands	r1, r3, #8
   1cca8:	strb	r3, [r4, #88]	; 0x58
   1ccac:	bne	1cdcc <__assert_fail@plt+0xbac8>
   1ccb0:	ldr	r2, [pc, #1448]	; 1d260 <__assert_fail@plt+0xbf5c>
   1ccb4:	mvn	r6, #2013265921	; 0x78000001
   1ccb8:	mvn	r7, #-134217727	; 0xf8000001
   1ccbc:	tst	r3, #4
   1ccc0:	str	r1, [r4, #96]	; 0x60
   1ccc4:	str	r2, [r4, #100]	; 0x64
   1ccc8:	strd	r6, [r4, #104]	; 0x68
   1cccc:	beq	1cdec <__assert_fail@plt+0xbae8>
   1ccd0:	mov	r2, #16
   1ccd4:	add	r0, r4, #112	; 0x70
   1ccd8:	bl	11208 <memset@plt>
   1ccdc:	ldr	r3, [r5]
   1cce0:	sub	r2, r3, #256	; 0x100
   1cce4:	bics	r2, r2, #256	; 0x100
   1cce8:	bne	1ce1c <__assert_fail@plt+0xbb18>
   1ccec:	cmp	r3, #256	; 0x100
   1ccf0:	bne	1cdf8 <__assert_fail@plt+0xbaf4>
   1ccf4:	mov	r3, #6
   1ccf8:	mov	r1, r2
   1ccfc:	mov	r0, r4
   1cd00:	str	r3, [r5]
   1cd04:	mov	r3, r5
   1cd08:	bl	143bc <__assert_fail@plt+0x30b8>
   1cd0c:	mov	r7, r0
   1cd10:	mov	r3, #9
   1cd14:	mov	r2, #0
   1cd18:	mov	r0, r4
   1cd1c:	str	r3, [r5]
   1cd20:	mov	r1, r2
   1cd24:	mov	r3, r5
   1cd28:	bl	143bc <__assert_fail@plt+0x30b8>
   1cd2c:	mov	r6, r0
   1cd30:	mov	r2, r0
   1cd34:	mov	r3, #10
   1cd38:	mov	r1, r7
   1cd3c:	mov	r0, r4
   1cd40:	bl	14510 <__assert_fail@plt+0x320c>
   1cd44:	clz	r2, r6
   1cd48:	cmp	r7, #0
   1cd4c:	lsr	r2, r2, #5
   1cd50:	moveq	r2, #1
   1cd54:	cmp	r0, #0
   1cd58:	moveq	r2, #1
   1cd5c:	mov	r6, r0
   1cd60:	cmp	r2, #0
   1cd64:	bne	1c2dc <__assert_fail@plt+0xafd8>
   1cd68:	mov	r1, fp
   1cd6c:	mov	r0, r5
   1cd70:	ldr	r2, [sp, #8]
   1cd74:	bl	18638 <__assert_fail@plt+0x7334>
   1cd78:	b	1cc50 <__assert_fail@plt+0xb94c>
   1cd7c:	ldrh	r8, [r0], #2
   1cd80:	add	r1, r2, r7
   1cd84:	ubfx	r8, r8, #3, #1
   1cd88:	cmp	r1, #95	; 0x5f
   1cd8c:	movne	r1, r8
   1cd90:	orreq	r1, r8, #1
   1cd94:	cmp	r1, #0
   1cd98:	ldrne	r1, [r3]
   1cd9c:	orrne	r1, r1, r6, lsl r2
   1cda0:	add	r2, r2, #1
   1cda4:	strne	r1, [r3]
   1cda8:	cmp	r2, #32
   1cdac:	bne	1cd7c <__assert_fail@plt+0xba78>
   1cdb0:	add	r3, r3, #4
   1cdb4:	add	r7, r7, #32
   1cdb8:	cmp	lr, r3
   1cdbc:	beq	1ccdc <__assert_fail@plt+0xb9d8>
   1cdc0:	add	r0, ip, r7, lsl #1
   1cdc4:	mov	r2, #0
   1cdc8:	b	1cd7c <__assert_fail@plt+0xba78>
   1cdcc:	mov	r6, r7
   1cdd0:	bl	111b4 <__ctype_b_loc@plt>
   1cdd4:	add	r3, r6, #24
   1cdd8:	add	lr, r4, #128	; 0x80
   1cddc:	ldr	ip, [r0]
   1cde0:	add	r3, r4, r3, lsl #2
   1cde4:	mov	r6, #1
   1cde8:	b	1cdc0 <__assert_fail@plt+0xbabc>
   1cdec:	mov	r7, #128	; 0x80
   1cdf0:	mov	r6, #4
   1cdf4:	b	1cdd0 <__assert_fail@plt+0xbacc>
   1cdf8:	mov	r3, #5
   1cdfc:	mov	r1, r2
   1ce00:	mov	r0, r4
   1ce04:	str	r3, [r5]
   1ce08:	mov	r3, r5
   1ce0c:	bl	143bc <__assert_fail@plt+0x30b8>
   1ce10:	mov	r7, r0
   1ce14:	mov	r3, #10
   1ce18:	b	1cd14 <__assert_fail@plt+0xba10>
   1ce1c:	mov	r2, #0
   1ce20:	mov	r3, r5
   1ce24:	mov	r1, r2
   1ce28:	mov	r0, r4
   1ce2c:	bl	143bc <__assert_fail@plt+0x30b8>
   1ce30:	subs	r6, r0, #0
   1ce34:	bne	1cd68 <__assert_fail@plt+0xba64>
   1ce38:	b	1c2dc <__assert_fail@plt+0xafd8>
   1ce3c:	mov	r2, #0
   1ce40:	mov	r3, r5
   1ce44:	mov	r1, r2
   1ce48:	mov	r0, r4
   1ce4c:	bl	143bc <__assert_fail@plt+0x30b8>
   1ce50:	subs	r6, r0, #0
   1ce54:	beq	1c2dc <__assert_fail@plt+0xafd8>
   1ce58:	ldr	r3, [r4, #92]	; 0x5c
   1ce5c:	cmp	r3, #1
   1ce60:	bgt	1cbf0 <__assert_fail@plt+0xb8ec>
   1ce64:	b	1c2f4 <__assert_fail@plt+0xaff0>
   1ce68:	sub	r3, r3, #33	; 0x21
   1ce6c:	ldr	r2, [pc, #1008]	; 1d264 <__assert_fail@plt+0xbf60>
   1ce70:	clz	r3, r3
   1ce74:	lsr	r3, r3, #5
   1ce78:	stm	sp, {r3, sl}
   1ce7c:	ldr	r3, [pc, #996]	; 1d268 <__assert_fail@plt+0xbf64>
   1ce80:	mov	r0, r4
   1ce84:	ldr	r1, [fp, #64]	; 0x40
   1ce88:	bl	15cd0 <__assert_fail@plt+0x49cc>
   1ce8c:	ldr	r3, [sl]
   1ce90:	mov	r6, r0
   1ce94:	clz	r0, r0
   1ce98:	lsr	r0, r0, #5
   1ce9c:	cmp	r3, #0
   1cea0:	moveq	r0, #0
   1cea4:	cmp	r0, #0
   1cea8:	b	1c4e8 <__assert_fail@plt+0xb1e4>
   1ceac:	sub	r3, r3, #35	; 0x23
   1ceb0:	ldr	r2, [pc, #948]	; 1d26c <__assert_fail@plt+0xbf68>
   1ceb4:	clz	r3, r3
   1ceb8:	lsr	r3, r3, #5
   1cebc:	stm	sp, {r3, sl}
   1cec0:	ldr	r3, [pc, #936]	; 1d270 <__assert_fail@plt+0xbf6c>
   1cec4:	b	1ce80 <__assert_fail@plt+0xbb7c>
   1cec8:	mov	r3, #5
   1cecc:	b	1c2e0 <__assert_fail@plt+0xafdc>
   1ced0:	cmn	r0, #2
   1ced4:	bne	1cf3c <__assert_fail@plt+0xbc38>
   1ced8:	cmn	r9, #2
   1cedc:	cmnne	r8, #2
   1cee0:	bne	1cfa4 <__assert_fail@plt+0xbca0>
   1cee4:	ldr	r3, [sp, #8]
   1cee8:	ands	r7, r3, #2097152	; 0x200000
   1ceec:	bne	1cf80 <__assert_fail@plt+0xbc7c>
   1cef0:	ldrb	r3, [r5, #4]
   1cef4:	cmp	r3, #2
   1cef8:	moveq	r3, #9
   1cefc:	streq	r3, [sl]
   1cf00:	bne	1c380 <__assert_fail@plt+0xb07c>
   1cf04:	ldr	r3, [sl]
   1cf08:	clz	r2, r7
   1cf0c:	lsr	r2, r2, #5
   1cf10:	cmp	r3, #0
   1cf14:	moveq	r2, #0
   1cf18:	cmp	r2, #0
   1cf1c:	beq	1d1a8 <__assert_fail@plt+0xbea4>
   1cf20:	cmp	r6, #0
   1cf24:	beq	1c4ec <__assert_fail@plt+0xb1e8>
   1cf28:	mov	r2, #0
   1cf2c:	ldr	r1, [pc, #808]	; 1d25c <__assert_fail@plt+0xbf58>
   1cf30:	mov	r0, r6
   1cf34:	bl	13d9c <__assert_fail@plt+0x2a98>
   1cf38:	b	1c4ec <__assert_fail@plt+0xb1e8>
   1cf3c:	ldrb	r3, [r5, #4]
   1cf40:	cmp	r3, #24
   1cf44:	moveq	r8, r9
   1cf48:	beq	1ced8 <__assert_fail@plt+0xbbd4>
   1cf4c:	cmp	r3, #1
   1cf50:	bne	1cf78 <__assert_fail@plt+0xbc74>
   1cf54:	ldrb	r3, [r5]
   1cf58:	cmp	r3, #44	; 0x2c
   1cf5c:	bne	1cf78 <__assert_fail@plt+0xbc74>
   1cf60:	mov	r1, r5
   1cf64:	mov	r0, fp
   1cf68:	ldr	r2, [sp, #8]
   1cf6c:	bl	18654 <__assert_fail@plt+0x7350>
   1cf70:	mov	r8, r0
   1cf74:	b	1ced8 <__assert_fail@plt+0xbbd4>
   1cf78:	mvn	r8, #1
   1cf7c:	b	1ced8 <__assert_fail@plt+0xbbd4>
   1cf80:	ldr	r3, [sp, #12]
   1cf84:	str	r3, [fp, #40]	; 0x28
   1cf88:	add	r3, sp, #112	; 0x70
   1cf8c:	ldm	r3, {r0, r1}
   1cf90:	mov	r3, #1
   1cf94:	stm	r5, {r0, r1}
   1cf98:	strb	r3, [r5, #4]
   1cf9c:	mov	r7, r6
   1cfa0:	b	1cf04 <__assert_fail@plt+0xbc00>
   1cfa4:	cmn	r8, #1
   1cfa8:	cmpne	r9, r8
   1cfac:	bgt	1c380 <__assert_fail@plt+0xb07c>
   1cfb0:	ldrb	r3, [r5, #4]
   1cfb4:	cmp	r3, #24
   1cfb8:	bne	1c380 <__assert_fail@plt+0xb07c>
   1cfbc:	cmn	r8, #1
   1cfc0:	movw	r3, #32767	; 0x7fff
   1cfc4:	bne	1d014 <__assert_fail@plt+0xbd10>
   1cfc8:	cmp	r9, r3
   1cfcc:	movle	r3, #0
   1cfd0:	movgt	r3, #1
   1cfd4:	cmp	r3, #0
   1cfd8:	movne	r3, #15
   1cfdc:	bne	1c384 <__assert_fail@plt+0xb080>
   1cfe0:	mov	r1, fp
   1cfe4:	mov	r0, r5
   1cfe8:	ldr	r2, [sp, #8]
   1cfec:	bl	18638 <__assert_fail@plt+0x7334>
   1cff0:	cmp	r6, #0
   1cff4:	beq	1cf9c <__assert_fail@plt+0xbc98>
   1cff8:	orrs	r7, r9, r8
   1cffc:	bne	1d02c <__assert_fail@plt+0xbd28>
   1d000:	mov	r2, r7
   1d004:	ldr	r1, [pc, #592]	; 1d25c <__assert_fail@plt+0xbf58>
   1d008:	mov	r0, r6
   1d00c:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d010:	b	1cf04 <__assert_fail@plt+0xbc00>
   1d014:	cmp	r8, r3
   1d018:	b	1cfcc <__assert_fail@plt+0xbcc8>
   1d01c:	cmp	r3, #19
   1d020:	moveq	r8, #1
   1d024:	mvnne	r8, #0
   1d028:	b	1cfe0 <__assert_fail@plt+0xbcdc>
   1d02c:	cmp	r9, #0
   1d030:	movle	r3, #0
   1d034:	strle	r6, [sp, #12]
   1d038:	strle	r3, [sp, #16]
   1d03c:	ble	1d0c4 <__assert_fail@plt+0xbdc0>
   1d040:	mov	r7, r6
   1d044:	mov	r3, #2
   1d048:	str	r6, [sp, #12]
   1d04c:	b	1d090 <__assert_fail@plt+0xbd8c>
   1d050:	mov	r1, r4
   1d054:	ldr	r0, [sp, #12]
   1d058:	bl	14470 <__assert_fail@plt+0x316c>
   1d05c:	mov	r2, r0
   1d060:	mov	r3, #16
   1d064:	str	r0, [sp, #12]
   1d068:	mov	r1, r7
   1d06c:	mov	r0, r4
   1d070:	bl	14510 <__assert_fail@plt+0x320c>
   1d074:	ldr	r3, [sp, #12]
   1d078:	mov	r7, r0
   1d07c:	cmp	r0, #0
   1d080:	cmpne	r3, #0
   1d084:	beq	1d110 <__assert_fail@plt+0xbe0c>
   1d088:	ldr	r3, [sp, #16]
   1d08c:	add	r3, r3, #1
   1d090:	str	r3, [sp, #16]
   1d094:	ldr	r3, [sp, #16]
   1d098:	cmp	r9, r3
   1d09c:	bge	1d050 <__assert_fail@plt+0xbd4c>
   1d0a0:	cmp	r9, r8
   1d0a4:	beq	1cf04 <__assert_fail@plt+0xbc00>
   1d0a8:	mov	r1, r4
   1d0ac:	ldr	r0, [sp, #12]
   1d0b0:	bl	14470 <__assert_fail@plt+0x316c>
   1d0b4:	subs	r3, r0, #0
   1d0b8:	str	r3, [sp, #12]
   1d0bc:	beq	1d110 <__assert_fail@plt+0xbe0c>
   1d0c0:	str	r7, [sp, #16]
   1d0c4:	ldr	r3, [sp, #12]
   1d0c8:	ldrb	r3, [r3, #24]
   1d0cc:	cmp	r3, #17
   1d0d0:	bne	1d0e8 <__assert_fail@plt+0xbde4>
   1d0d4:	ldr	r3, [sp, #12]
   1d0d8:	ldr	r1, [pc, #404]	; 1d274 <__assert_fail@plt+0xbf70>
   1d0dc:	mov	r0, r3
   1d0e0:	ldr	r2, [r3, #20]
   1d0e4:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d0e8:	cmn	r8, #1
   1d0ec:	mov	r2, #0
   1d0f0:	ldr	r1, [sp, #12]
   1d0f4:	moveq	r3, #11
   1d0f8:	movne	r3, #10
   1d0fc:	mov	r0, r4
   1d100:	bl	14510 <__assert_fail@plt+0x320c>
   1d104:	subs	r7, r0, #0
   1d108:	addne	r9, r9, #2
   1d10c:	bne	1d178 <__assert_fail@plt+0xbe74>
   1d110:	mov	r3, #12
   1d114:	b	1c384 <__assert_fail@plt+0xb080>
   1d118:	mov	r1, r4
   1d11c:	ldr	r0, [sp, #12]
   1d120:	bl	14470 <__assert_fail@plt+0x316c>
   1d124:	mov	r2, r0
   1d128:	mov	r3, #16
   1d12c:	str	r0, [sp, #12]
   1d130:	mov	r1, r7
   1d134:	mov	r0, r4
   1d138:	bl	14510 <__assert_fail@plt+0x320c>
   1d13c:	ldr	r3, [sp, #12]
   1d140:	mov	r1, r0
   1d144:	clz	r0, r0
   1d148:	lsr	r0, r0, #5
   1d14c:	cmp	r3, #0
   1d150:	movne	r2, r0
   1d154:	moveq	r2, #1
   1d158:	cmp	r2, #0
   1d15c:	bne	1d110 <__assert_fail@plt+0xbe0c>
   1d160:	mov	r3, #10
   1d164:	mov	r0, r4
   1d168:	bl	14510 <__assert_fail@plt+0x320c>
   1d16c:	subs	r7, r0, #0
   1d170:	beq	1d110 <__assert_fail@plt+0xbe0c>
   1d174:	add	r9, r9, #1
   1d178:	cmp	r8, r9
   1d17c:	bge	1d118 <__assert_fail@plt+0xbe14>
   1d180:	ldr	r3, [sp, #16]
   1d184:	cmp	r3, #0
   1d188:	beq	1cf04 <__assert_fail@plt+0xbc00>
   1d18c:	mov	r2, r7
   1d190:	mov	r3, #16
   1d194:	ldr	r1, [sp, #16]
   1d198:	mov	r0, r4
   1d19c:	bl	14510 <__assert_fail@plt+0x320c>
   1d1a0:	mov	r7, r0
   1d1a4:	b	1cf04 <__assert_fail@plt+0xbc00>
   1d1a8:	ldr	r3, [sp, #8]
   1d1ac:	tst	r3, #16777216	; 0x1000000
   1d1b0:	beq	1d1dc <__assert_fail@plt+0xbed8>
   1d1b4:	ldrb	r3, [r5, #4]
   1d1b8:	cmp	r3, #23
   1d1bc:	cmpne	r3, #11
   1d1c0:	bne	1d1dc <__assert_fail@plt+0xbed8>
   1d1c4:	cmp	r7, #0
   1d1c8:	beq	1cc08 <__assert_fail@plt+0xb904>
   1d1cc:	ldr	r1, [pc, #136]	; 1d25c <__assert_fail@plt+0xbf58>
   1d1d0:	mov	r0, r7
   1d1d4:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d1d8:	b	1cc08 <__assert_fail@plt+0xb904>
   1d1dc:	mov	r6, r7
   1d1e0:	b	1c304 <__assert_fail@plt+0xb000>
   1d1e4:	mov	r3, #3
   1d1e8:	mov	r2, #0
   1d1ec:	mov	r1, r2
   1d1f0:	mov	r0, r4
   1d1f4:	strb	r3, [sp, #116]	; 0x74
   1d1f8:	ldr	r3, [sp, #12]
   1d1fc:	str	r3, [sp, #112]	; 0x70
   1d200:	add	r3, sp, #112	; 0x70
   1d204:	bl	143bc <__assert_fail@plt+0x30b8>
   1d208:	subs	r1, r0, #0
   1d20c:	beq	1d228 <__assert_fail@plt+0xbf24>
   1d210:	mov	r3, #10
   1d214:	mov	r2, r6
   1d218:	mov	r0, r4
   1d21c:	bl	14510 <__assert_fail@plt+0x320c>
   1d220:	subs	r6, r0, #0
   1d224:	bne	1c4d0 <__assert_fail@plt+0xb1cc>
   1d228:	mov	r3, #12
   1d22c:	b	1c574 <__assert_fail@plt+0xb270>
   1d230:	cmp	r8, #3
   1d234:	bne	1c904 <__assert_fail@plt+0xb600>
   1d238:	b	1c7c0 <__assert_fail@plt+0xb4bc>
   1d23c:	cmp	r2, #0
   1d240:	beq	1c7e0 <__assert_fail@plt+0xb4dc>
   1d244:	cmp	r8, #0
   1d248:	movne	r6, #0
   1d24c:	bne	1c928 <__assert_fail@plt+0xb624>
   1d250:	mov	r6, r8
   1d254:	b	1c7ec <__assert_fail@plt+0xb4e8>
   1d258:	addeq	r0, ip, r0, lsl #16
   1d25c:	andeq	r4, r1, r4, ror #29
   1d260:	mvnseq	r0, #0
   1d264:	andeq	r0, r2, lr, lsr #22
   1d268:	andeq	r0, r2, r6, lsl #10
   1d26c:	andeq	r0, r2, sl, lsr fp
   1d270:	andeq	r0, r2, r6, lsl r8
   1d274:	andeq	r3, r1, r4, asr pc
   1d278:	ldr	ip, [r1]
   1d27c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d280:	sub	sp, sp, #20
   1d284:	mov	fp, r3
   1d288:	mov	sl, r0
   1d28c:	mov	r7, r1
   1d290:	mov	r8, r2
   1d294:	ldr	r5, [sp, #60]	; 0x3c
   1d298:	str	ip, [sp, #12]
   1d29c:	ldr	ip, [sp, #56]	; 0x38
   1d2a0:	str	ip, [sp]
   1d2a4:	str	r5, [sp, #4]
   1d2a8:	bl	1c1f0 <__assert_fail@plt+0xaeec>
   1d2ac:	ldr	r3, [r5]
   1d2b0:	mov	r4, r0
   1d2b4:	clz	r0, r0
   1d2b8:	lsr	r0, r0, #5
   1d2bc:	cmp	r3, #0
   1d2c0:	moveq	r0, #0
   1d2c4:	cmp	r0, #0
   1d2c8:	beq	1d338 <__assert_fail@plt+0xc034>
   1d2cc:	mov	r4, #0
   1d2d0:	mov	r0, r4
   1d2d4:	add	sp, sp, #20
   1d2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2dc:	cmp	r4, #0
   1d2e0:	cmpne	r6, #0
   1d2e4:	beq	1d330 <__assert_fail@plt+0xc02c>
   1d2e8:	mov	r3, #16
   1d2ec:	mov	r2, r6
   1d2f0:	ldr	r0, [sp, #12]
   1d2f4:	mov	r1, r4
   1d2f8:	bl	14510 <__assert_fail@plt+0x320c>
   1d2fc:	subs	r9, r0, #0
   1d300:	bne	1d3bc <__assert_fail@plt+0xc0b8>
   1d304:	mov	r2, r9
   1d308:	ldr	r1, [pc, #180]	; 1d3c4 <__assert_fail@plt+0xc0c0>
   1d30c:	mov	r0, r6
   1d310:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d314:	mov	r2, r9
   1d318:	ldr	r1, [pc, #164]	; 1d3c4 <__assert_fail@plt+0xc0c0>
   1d31c:	mov	r0, r4
   1d320:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d324:	mov	r2, #12
   1d328:	str	r2, [r5]
   1d32c:	b	1d2cc <__assert_fail@plt+0xbfc8>
   1d330:	cmp	r4, #0
   1d334:	moveq	r4, r6
   1d338:	ldrb	r2, [r8, #4]
   1d33c:	and	r3, r2, #247	; 0xf7
   1d340:	cmp	r3, #2
   1d344:	beq	1d2d0 <__assert_fail@plt+0xbfcc>
   1d348:	ldr	r3, [sp, #56]	; 0x38
   1d34c:	clz	r3, r3
   1d350:	lsr	r3, r3, #5
   1d354:	cmp	r2, #9
   1d358:	orrne	r3, r3, #1
   1d35c:	cmp	r3, #0
   1d360:	beq	1d2d0 <__assert_fail@plt+0xbfcc>
   1d364:	ldr	r3, [sp, #56]	; 0x38
   1d368:	mov	r2, r8
   1d36c:	mov	r1, r7
   1d370:	mov	r0, sl
   1d374:	stm	sp, {r3, r5}
   1d378:	mov	r3, fp
   1d37c:	bl	1c1f0 <__assert_fail@plt+0xaeec>
   1d380:	ldr	r3, [r5]
   1d384:	mov	r6, r0
   1d388:	clz	r0, r0
   1d38c:	lsr	r0, r0, #5
   1d390:	cmp	r3, #0
   1d394:	moveq	r0, #0
   1d398:	cmp	r0, #0
   1d39c:	beq	1d2dc <__assert_fail@plt+0xbfd8>
   1d3a0:	cmp	r4, #0
   1d3a4:	beq	1d2cc <__assert_fail@plt+0xbfc8>
   1d3a8:	mov	r2, #0
   1d3ac:	ldr	r1, [pc, #16]	; 1d3c4 <__assert_fail@plt+0xc0c0>
   1d3b0:	mov	r0, r4
   1d3b4:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d3b8:	b	1d2cc <__assert_fail@plt+0xbfc8>
   1d3bc:	mov	r4, r9
   1d3c0:	b	1d338 <__assert_fail@plt+0xc034>
   1d3c4:	andeq	r4, r1, r4, ror #29
   1d3c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3cc:	sub	sp, sp, #20
   1d3d0:	mov	sl, r3
   1d3d4:	mov	r8, r0
   1d3d8:	mov	r9, r1
   1d3dc:	mov	r7, r2
   1d3e0:	ldr	r5, [r1]
   1d3e4:	ldr	r6, [sp, #60]	; 0x3c
   1d3e8:	ldr	ip, [r5, #84]	; 0x54
   1d3ec:	stmib	sp, {r6, ip}
   1d3f0:	ldr	ip, [sp, #56]	; 0x38
   1d3f4:	str	ip, [sp]
   1d3f8:	bl	1d278 <__assert_fail@plt+0xbf74>
   1d3fc:	ldr	r3, [r6]
   1d400:	mov	r4, r0
   1d404:	clz	r0, r0
   1d408:	lsr	r0, r0, #5
   1d40c:	cmp	r3, #0
   1d410:	moveq	r0, #0
   1d414:	cmp	r0, #0
   1d418:	orreq	r3, sl, #8388608	; 0x800000
   1d41c:	streq	r3, [sp, #12]
   1d420:	beq	1d46c <__assert_fail@plt+0xc168>
   1d424:	mov	r4, #0
   1d428:	mov	r0, r4
   1d42c:	add	sp, sp, #20
   1d430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d434:	ldr	r3, [r5, #84]	; 0x54
   1d438:	orr	fp, r3, fp
   1d43c:	str	fp, [r5, #84]	; 0x54
   1d440:	mov	r1, r4
   1d444:	mov	r3, #10
   1d448:	mov	r0, r5
   1d44c:	bl	14510 <__assert_fail@plt+0x320c>
   1d450:	subs	r4, r0, #0
   1d454:	bne	1d46c <__assert_fail@plt+0xc168>
   1d458:	mov	r3, #12
   1d45c:	str	r3, [r6]
   1d460:	b	1d428 <__assert_fail@plt+0xc124>
   1d464:	mov	r2, #0
   1d468:	b	1d440 <__assert_fail@plt+0xc13c>
   1d46c:	ldrb	r3, [r7, #4]
   1d470:	cmp	r3, #10
   1d474:	bne	1d428 <__assert_fail@plt+0xc124>
   1d478:	mov	r1, r8
   1d47c:	mov	r0, r7
   1d480:	ldr	r2, [sp, #12]
   1d484:	bl	18638 <__assert_fail@plt+0x7334>
   1d488:	ldrb	r3, [r7, #4]
   1d48c:	and	r2, r3, #247	; 0xf7
   1d490:	cmp	r2, #2
   1d494:	beq	1d464 <__assert_fail@plt+0xc160>
   1d498:	ldr	r2, [sp, #56]	; 0x38
   1d49c:	clz	r2, r2
   1d4a0:	lsr	r2, r2, #5
   1d4a4:	cmp	r3, #9
   1d4a8:	orrne	r2, r2, #1
   1d4ac:	cmp	r2, #0
   1d4b0:	beq	1d440 <__assert_fail@plt+0xc13c>
   1d4b4:	ldr	r3, [sp, #8]
   1d4b8:	mov	r2, r7
   1d4bc:	mov	r1, r9
   1d4c0:	mov	r0, r8
   1d4c4:	ldr	fp, [r5, #84]	; 0x54
   1d4c8:	str	r3, [r5, #84]	; 0x54
   1d4cc:	ldr	r3, [sp, #56]	; 0x38
   1d4d0:	str	r3, [sp]
   1d4d4:	mov	r3, sl
   1d4d8:	str	r6, [sp, #4]
   1d4dc:	bl	1d278 <__assert_fail@plt+0xbf74>
   1d4e0:	ldr	r3, [r6]
   1d4e4:	mov	r2, r0
   1d4e8:	clz	r0, r0
   1d4ec:	lsr	r0, r0, #5
   1d4f0:	cmp	r3, #0
   1d4f4:	moveq	r0, #0
   1d4f8:	cmp	r0, #0
   1d4fc:	beq	1d434 <__assert_fail@plt+0xc130>
   1d500:	cmp	r4, #0
   1d504:	beq	1d424 <__assert_fail@plt+0xc120>
   1d508:	mov	r2, #0
   1d50c:	ldr	r1, [pc, #8]	; 1d51c <__assert_fail@plt+0xc218>
   1d510:	mov	r0, r4
   1d514:	bl	13d9c <__assert_fail@plt+0x2a98>
   1d518:	b	1d424 <__assert_fail@plt+0xc120>
   1d51c:	andeq	r4, r1, r4, ror #29
   1d520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d524:	mov	r8, r3
   1d528:	sub	sp, sp, #132	; 0x84
   1d52c:	mov	r3, #0
   1d530:	mov	r6, r0
   1d534:	mov	r9, r1
   1d538:	mov	r5, r2
   1d53c:	str	r3, [r0, #8]
   1d540:	str	r3, [sp, #24]
   1d544:	str	r3, [r0, #24]
   1d548:	ldrb	r3, [r0, #28]
   1d54c:	str	r8, [r0, #12]
   1d550:	ldr	r4, [r0]
   1d554:	bic	r3, r3, #111	; 0x6f
   1d558:	strb	r3, [r0, #28]
   1d55c:	ldr	r3, [r0, #4]
   1d560:	cmp	r3, #159	; 0x9f
   1d564:	bhi	1d588 <__assert_fail@plt+0xc284>
   1d568:	mov	r0, r4
   1d56c:	mov	r1, #160	; 0xa0
   1d570:	bl	1f83c <__assert_fail@plt+0xe538>
   1d574:	subs	r4, r0, #0
   1d578:	beq	1e07c <__assert_fail@plt+0xcd78>
   1d57c:	mov	r3, #160	; 0xa0
   1d580:	str	r4, [r6]
   1d584:	str	r3, [r6, #4]
   1d588:	mov	r2, #160	; 0xa0
   1d58c:	mov	r1, #0
   1d590:	mov	r0, r4
   1d594:	str	r2, [r6, #8]
   1d598:	bl	11208 <memset@plt>
   1d59c:	mov	r3, #31
   1d5a0:	str	r3, [r4, #64]	; 0x40
   1d5a4:	ldr	r3, [pc, #2780]	; 1e088 <__assert_fail@plt+0xcd84>
   1d5a8:	cmp	r5, r3
   1d5ac:	bhi	1d720 <__assert_fail@plt+0xc41c>
   1d5b0:	add	sl, r5, #1
   1d5b4:	mov	r7, #1
   1d5b8:	lsl	r0, sl, #3
   1d5bc:	str	sl, [r4, #4]
   1d5c0:	bl	1f810 <__assert_fail@plt+0xe50c>
   1d5c4:	str	r0, [r4]
   1d5c8:	cmp	r5, r7
   1d5cc:	lslcs	r7, r7, #1
   1d5d0:	bcs	1d5c8 <__assert_fail@plt+0xc2c4>
   1d5d4:	mov	r1, r7
   1d5d8:	mov	r0, #12
   1d5dc:	sub	r7, r7, #1
   1d5e0:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1d5e4:	str	r0, [r4, #32]
   1d5e8:	str	r7, [r4, #68]	; 0x44
   1d5ec:	bl	11130 <__ctype_get_mb_cur_max@plt>
   1d5f0:	str	r0, [r4, #92]	; 0x5c
   1d5f4:	mov	r0, #14
   1d5f8:	bl	1128c <nl_langinfo@plt>
   1d5fc:	ldrb	r3, [r0]
   1d600:	and	r3, r3, #223	; 0xdf
   1d604:	cmp	r3, #85	; 0x55
   1d608:	bne	1d658 <__assert_fail@plt+0xc354>
   1d60c:	ldrb	r3, [r0, #1]
   1d610:	and	r3, r3, #223	; 0xdf
   1d614:	cmp	r3, #84	; 0x54
   1d618:	bne	1d658 <__assert_fail@plt+0xc354>
   1d61c:	ldrb	r3, [r0, #2]
   1d620:	and	r3, r3, #223	; 0xdf
   1d624:	cmp	r3, #70	; 0x46
   1d628:	bne	1d658 <__assert_fail@plt+0xc354>
   1d62c:	ldrb	r3, [r0, #3]
   1d630:	ldr	r1, [pc, #2644]	; 1e08c <__assert_fail@plt+0xcd88>
   1d634:	cmp	r3, #45	; 0x2d
   1d638:	moveq	r3, #4
   1d63c:	movne	r3, #3
   1d640:	add	r0, r0, r3
   1d644:	bl	1101c <strcmp@plt>
   1d648:	cmp	r0, #0
   1d64c:	ldrbeq	r3, [r4, #88]	; 0x58
   1d650:	orreq	r3, r3, #4
   1d654:	strbeq	r3, [r4, #88]	; 0x58
   1d658:	ldrb	r3, [r4, #88]	; 0x58
   1d65c:	bfc	r3, #3, #1
   1d660:	strb	r3, [r4, #88]	; 0x58
   1d664:	ldr	r3, [r4, #92]	; 0x5c
   1d668:	cmp	r3, #1
   1d66c:	ble	1d708 <__assert_fail@plt+0xc404>
   1d670:	ldrb	r7, [r4, #88]	; 0x58
   1d674:	ands	r7, r7, #4
   1d678:	ldrne	r3, [pc, #2576]	; 1e090 <__assert_fail@plt+0xcd8c>
   1d67c:	strne	r3, [r4, #60]	; 0x3c
   1d680:	bne	1d708 <__assert_fail@plt+0xc404>
   1d684:	mov	r1, #1
   1d688:	mov	r0, #32
   1d68c:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1d690:	cmp	r0, #0
   1d694:	str	r0, [r4, #60]	; 0x3c
   1d698:	beq	1d720 <__assert_fail@plt+0xc41c>
   1d69c:	lsl	r2, r7, #3
   1d6a0:	mov	fp, #0
   1d6a4:	add	r3, fp, r2
   1d6a8:	mov	r0, r3
   1d6ac:	str	r3, [sp, #12]
   1d6b0:	str	r2, [sp, #16]
   1d6b4:	bl	11214 <btowc@plt>
   1d6b8:	cmn	r0, #1
   1d6bc:	ldr	r3, [sp, #12]
   1d6c0:	mov	r1, #1
   1d6c4:	ldrne	lr, [r4, #60]	; 0x3c
   1d6c8:	ldr	r2, [sp, #16]
   1d6cc:	ldrne	ip, [lr, r7]
   1d6d0:	orrne	ip, ip, r1, lsl fp
   1d6d4:	strne	ip, [lr, r7]
   1d6d8:	bics	ip, r3, #127	; 0x7f
   1d6dc:	bne	1d6f0 <__assert_fail@plt+0xc3ec>
   1d6e0:	cmp	r0, r3
   1d6e4:	ldrbne	r3, [r4, #88]	; 0x58
   1d6e8:	orrne	r3, r3, #8
   1d6ec:	strbne	r3, [r4, #88]	; 0x58
   1d6f0:	add	fp, fp, #1
   1d6f4:	cmp	fp, #32
   1d6f8:	bne	1d6a4 <__assert_fail@plt+0xc3a0>
   1d6fc:	add	r7, r7, #4
   1d700:	cmp	r7, #32
   1d704:	bne	1d69c <__assert_fail@plt+0xc398>
   1d708:	ldr	r3, [r4]
   1d70c:	cmp	r3, #0
   1d710:	beq	1d720 <__assert_fail@plt+0xc41c>
   1d714:	ldr	r3, [r4, #32]
   1d718:	cmp	r3, #0
   1d71c:	bne	1d740 <__assert_fail@plt+0xc43c>
   1d720:	mov	r3, #12
   1d724:	str	r3, [sp, #24]
   1d728:	mov	r0, r4
   1d72c:	bl	169bc <__assert_fail@plt+0x56b8>
   1d730:	mov	r3, #0
   1d734:	str	r3, [r6]
   1d738:	str	r3, [r6, #4]
   1d73c:	b	1dcf4 <__assert_fail@plt+0xc9f0>
   1d740:	ldr	r2, [pc, #2380]	; 1e094 <__assert_fail@plt+0xcd90>
   1d744:	mov	r3, #0
   1d748:	ldr	r1, [pc, #2376]	; 1e098 <__assert_fail@plt+0xcd94>
   1d74c:	str	r3, [sp, #24]
   1d750:	mov	r3, #1
   1d754:	cmp	r2, #0
   1d758:	moveq	r3, r2
   1d75c:	mov	r2, #1
   1d760:	cmp	r1, #0
   1d764:	moveq	r2, r1
   1d768:	orr	r3, r3, r2
   1d76c:	ands	r3, r3, #255	; 0xff
   1d770:	str	r3, [sp, #16]
   1d774:	beq	1d798 <__assert_fail@plt+0xc494>
   1d778:	mov	r1, #0
   1d77c:	add	r0, r4, #136	; 0x88
   1d780:	bl	11094 <pthread_mutex_init@plt>
   1d784:	cmp	r0, #0
   1d788:	bne	1d720 <__assert_fail@plt+0xc41c>
   1d78c:	ldr	r3, [sp, #24]
   1d790:	cmp	r3, #0
   1d794:	bne	1d728 <__assert_fail@plt+0xc424>
   1d798:	ldr	r3, [r6, #20]
   1d79c:	and	r7, r8, #4194304	; 0x400000
   1d7a0:	mov	r2, #76	; 0x4c
   1d7a4:	mov	r1, #0
   1d7a8:	add	r0, sp, #48	; 0x30
   1d7ac:	orr	fp, r3, r7
   1d7b0:	str	r3, [sp, #12]
   1d7b4:	bl	11208 <memset@plt>
   1d7b8:	ldr	r3, [sp, #12]
   1d7bc:	str	r9, [sp, #44]	; 0x2c
   1d7c0:	str	r5, [sp, #88]	; 0x58
   1d7c4:	str	r5, [sp, #92]	; 0x5c
   1d7c8:	str	r5, [sp, #96]	; 0x60
   1d7cc:	str	r5, [sp, #100]	; 0x64
   1d7d0:	str	r3, [sp, #108]	; 0x6c
   1d7d4:	adds	r3, r7, #0
   1d7d8:	movne	r3, #1
   1d7dc:	strb	r3, [sp, #116]	; 0x74
   1d7e0:	adds	r3, fp, #0
   1d7e4:	movne	r3, #1
   1d7e8:	cmp	r5, #0
   1d7ec:	strb	r3, [sp, #119]	; 0x77
   1d7f0:	ldr	r3, [r4, #92]	; 0x5c
   1d7f4:	str	r3, [sp, #124]	; 0x7c
   1d7f8:	ldrb	r3, [r4, #88]	; 0x58
   1d7fc:	ubfx	r2, r3, #2, #1
   1d800:	ubfx	r3, r3, #3, #1
   1d804:	strb	r2, [sp, #117]	; 0x75
   1d808:	strb	r3, [sp, #118]	; 0x76
   1d80c:	bne	1d880 <__assert_fail@plt+0xc57c>
   1d810:	ldrb	r3, [sp, #119]	; 0x77
   1d814:	cmp	r3, #0
   1d818:	ldr	r3, [r4, #92]	; 0x5c
   1d81c:	ldrne	r9, [sp, #48]	; 0x30
   1d820:	cmp	r7, #0
   1d824:	str	r9, [sp, #48]	; 0x30
   1d828:	beq	1d9b4 <__assert_fail@plt+0xc6b0>
   1d82c:	cmp	r3, #1
   1d830:	ble	1d8ec <__assert_fail@plt+0xc5e8>
   1d834:	add	r0, sp, #44	; 0x2c
   1d838:	bl	1488c <__assert_fail@plt+0x3588>
   1d83c:	cmp	r0, #0
   1d840:	bne	1d894 <__assert_fail@plt+0xc590>
   1d844:	ldr	r3, [sp, #76]	; 0x4c
   1d848:	cmp	r5, r3
   1d84c:	ble	1d894 <__assert_fail@plt+0xc590>
   1d850:	ldr	r3, [sp, #72]	; 0x48
   1d854:	ldr	r2, [r4, #92]	; 0x5c
   1d858:	ldr	r1, [sp, #80]	; 0x50
   1d85c:	add	r3, r3, r2
   1d860:	cmp	r1, r3
   1d864:	bgt	1d894 <__assert_fail@plt+0xc590>
   1d868:	lsl	r1, r1, #1
   1d86c:	add	r0, sp, #44	; 0x2c
   1d870:	bl	142d0 <__assert_fail@plt+0x2fcc>
   1d874:	cmp	r0, #0
   1d878:	beq	1d834 <__assert_fail@plt+0xc530>
   1d87c:	b	1d894 <__assert_fail@plt+0xc590>
   1d880:	mov	r1, sl
   1d884:	add	r0, sp, #44	; 0x2c
   1d888:	bl	142d0 <__assert_fail@plt+0x2fcc>
   1d88c:	cmp	r0, #0
   1d890:	beq	1d810 <__assert_fail@plt+0xc50c>
   1d894:	cmp	r0, #0
   1d898:	str	r0, [sp, #24]
   1d89c:	beq	1d8fc <__assert_fail@plt+0xc5f8>
   1d8a0:	ldr	r7, [r6]
   1d8a4:	ldr	r5, [r7, #56]	; 0x38
   1d8a8:	cmp	r5, #0
   1d8ac:	bne	1d9ec <__assert_fail@plt+0xc6e8>
   1d8b0:	mov	r3, #31
   1d8b4:	str	r5, [r7, #52]	; 0x34
   1d8b8:	str	r5, [r7, #56]	; 0x38
   1d8bc:	str	r3, [r7, #64]	; 0x40
   1d8c0:	ldr	r0, [r7, #16]
   1d8c4:	bl	1f990 <__assert_fail@plt+0xe68c>
   1d8c8:	add	r0, sp, #44	; 0x2c
   1d8cc:	str	r5, [r7, #16]
   1d8d0:	bl	1516c <__assert_fail@plt+0x3e68>
   1d8d4:	ldr	r3, [sp, #16]
   1d8d8:	cmp	r3, #0
   1d8dc:	beq	1d728 <__assert_fail@plt+0xc424>
   1d8e0:	add	r0, r4, #136	; 0x88
   1d8e4:	bl	11034 <pthread_mutex_destroy@plt>
   1d8e8:	b	1d728 <__assert_fail@plt+0xc424>
   1d8ec:	add	r0, sp, #44	; 0x2c
   1d8f0:	bl	14d5c <__assert_fail@plt+0x3a58>
   1d8f4:	mov	r3, #0
   1d8f8:	str	r3, [sp, #24]
   1d8fc:	ldr	r9, [r6]
   1d900:	mov	r5, #0
   1d904:	orr	r2, r8, #8388608	; 0x800000
   1d908:	add	r1, sp, #44	; 0x2c
   1d90c:	add	r0, sp, #32
   1d910:	str	r5, [r6, #24]
   1d914:	str	r8, [r9, #128]	; 0x80
   1d918:	bl	18638 <__assert_fail@plt+0x7334>
   1d91c:	add	r3, sp, #24
   1d920:	add	r2, sp, #32
   1d924:	str	r5, [sp]
   1d928:	mov	r1, r6
   1d92c:	add	r0, sp, #44	; 0x2c
   1d930:	str	r3, [sp, #4]
   1d934:	mov	r3, r8
   1d938:	bl	1d3c8 <__assert_fail@plt+0xc0c4>
   1d93c:	ldr	r2, [sp, #24]
   1d940:	mov	sl, r0
   1d944:	clz	r0, r0
   1d948:	lsr	r0, r0, #5
   1d94c:	cmp	r2, r5
   1d950:	movne	r2, r0
   1d954:	moveq	r2, r5
   1d958:	cmp	r2, r5
   1d95c:	bne	1da00 <__assert_fail@plt+0xc6fc>
   1d960:	mov	r3, #2
   1d964:	mov	r1, r2
   1d968:	mov	r0, r9
   1d96c:	bl	14510 <__assert_fail@plt+0x320c>
   1d970:	cmp	sl, r5
   1d974:	mov	r8, r0
   1d978:	beq	1d990 <__assert_fail@plt+0xc68c>
   1d97c:	mov	r3, #16
   1d980:	mov	r2, r8
   1d984:	mov	r1, sl
   1d988:	mov	r0, r9
   1d98c:	bl	14510 <__assert_fail@plt+0x320c>
   1d990:	cmp	r0, #0
   1d994:	cmpne	r8, #0
   1d998:	ldr	r5, [r6]
   1d99c:	bne	1da08 <__assert_fail@plt+0xc704>
   1d9a0:	mov	r3, #12
   1d9a4:	str	r3, [sp, #24]
   1d9a8:	mov	r3, #0
   1d9ac:	str	r3, [r4, #52]	; 0x34
   1d9b0:	b	1d8a0 <__assert_fail@plt+0xc59c>
   1d9b4:	cmp	r3, #1
   1d9b8:	ble	1d9cc <__assert_fail@plt+0xc6c8>
   1d9bc:	add	r0, sp, #44	; 0x2c
   1d9c0:	bl	14738 <__assert_fail@plt+0x3434>
   1d9c4:	str	r7, [sp, #24]
   1d9c8:	b	1d8fc <__assert_fail@plt+0xc5f8>
   1d9cc:	cmp	fp, #0
   1d9d0:	ldreq	r3, [sp, #80]	; 0x50
   1d9d4:	streq	r3, [sp, #72]	; 0x48
   1d9d8:	streq	r3, [sp, #76]	; 0x4c
   1d9dc:	beq	1d9c4 <__assert_fail@plt+0xc6c0>
   1d9e0:	add	r0, sp, #44	; 0x2c
   1d9e4:	bl	13c60 <__assert_fail@plt+0x295c>
   1d9e8:	b	1d9c4 <__assert_fail@plt+0xc6c0>
   1d9ec:	ldr	r8, [r5]
   1d9f0:	mov	r0, r5
   1d9f4:	bl	1f990 <__assert_fail@plt+0xe68c>
   1d9f8:	mov	r5, r8
   1d9fc:	b	1d8a8 <__assert_fail@plt+0xc5a4>
   1da00:	str	r5, [r4, #52]	; 0x34
   1da04:	b	1d8a0 <__assert_fail@plt+0xc59c>
   1da08:	str	r0, [r4, #52]	; 0x34
   1da0c:	mov	r8, #12
   1da10:	ldr	r0, [r5, #4]
   1da14:	lsl	r0, r0, #2
   1da18:	bl	1f810 <__assert_fail@plt+0xe50c>
   1da1c:	str	r0, [r5, #12]
   1da20:	ldr	r0, [r5, #4]
   1da24:	lsl	r0, r0, #2
   1da28:	bl	1f810 <__assert_fail@plt+0xe50c>
   1da2c:	str	r0, [r5, #16]
   1da30:	ldr	r0, [r5, #4]
   1da34:	mul	r0, r8, r0
   1da38:	bl	1f810 <__assert_fail@plt+0xe50c>
   1da3c:	str	r0, [r5, #20]
   1da40:	ldr	r0, [r5, #4]
   1da44:	mul	r0, r8, r0
   1da48:	bl	1f810 <__assert_fail@plt+0xe50c>
   1da4c:	ldr	r3, [r5, #12]
   1da50:	str	r0, [r5, #24]
   1da54:	cmp	r3, #0
   1da58:	bne	1da68 <__assert_fail@plt+0xc764>
   1da5c:	mov	r3, #12
   1da60:	str	r3, [sp, #24]
   1da64:	b	1d8a0 <__assert_fail@plt+0xc59c>
   1da68:	ldr	r3, [r5, #16]
   1da6c:	cmp	r3, #0
   1da70:	beq	1da5c <__assert_fail@plt+0xc758>
   1da74:	ldr	r3, [r5, #20]
   1da78:	clz	r0, r0
   1da7c:	lsr	r0, r0, #5
   1da80:	cmp	r3, #0
   1da84:	moveq	r0, #1
   1da88:	cmp	r0, #0
   1da8c:	str	r0, [sp, #12]
   1da90:	bne	1da5c <__assert_fail@plt+0xc758>
   1da94:	ldr	r0, [r6, #24]
   1da98:	lsl	r0, r0, #2
   1da9c:	bl	1f810 <__assert_fail@plt+0xe50c>
   1daa0:	cmp	r0, #0
   1daa4:	str	r0, [r5, #132]	; 0x84
   1daa8:	ldrne	r2, [r6, #24]
   1daac:	ldrne	r3, [sp, #12]
   1dab0:	bne	1db84 <__assert_fail@plt+0xc880>
   1dab4:	mov	r2, r6
   1dab8:	ldr	r1, [pc, #1500]	; 1e09c <__assert_fail@plt+0xcd98>
   1dabc:	ldr	r0, [r5, #52]	; 0x34
   1dac0:	bl	13d9c <__assert_fail@plt+0x2a98>
   1dac4:	subs	r8, r0, #0
   1dac8:	bne	1db6c <__assert_fail@plt+0xc868>
   1dacc:	mov	r2, r5
   1dad0:	ldr	r1, [pc, #1480]	; 1e0a0 <__assert_fail@plt+0xcd9c>
   1dad4:	ldr	r0, [r5, #52]	; 0x34
   1dad8:	bl	13d9c <__assert_fail@plt+0x2a98>
   1dadc:	subs	r8, r0, #0
   1dae0:	bne	1db6c <__assert_fail@plt+0xc868>
   1dae4:	mov	r2, r5
   1dae8:	ldr	r1, [pc, #1460]	; 1e0a4 <__assert_fail@plt+0xcda0>
   1daec:	ldr	r0, [r5, #52]	; 0x34
   1daf0:	bl	16264 <__assert_fail@plt+0x4f60>
   1daf4:	mov	r2, r5
   1daf8:	ldr	r1, [pc, #1448]	; 1e0a8 <__assert_fail@plt+0xcda4>
   1dafc:	ldr	r0, [r5, #52]	; 0x34
   1db00:	bl	16264 <__assert_fail@plt+0x4f60>
   1db04:	subs	r8, r0, #0
   1db08:	bne	1db6c <__assert_fail@plt+0xc868>
   1db0c:	mov	sl, r8
   1db10:	mov	r9, r8
   1db14:	ldr	r3, [r5, #8]
   1db18:	cmp	r3, r9
   1db1c:	bne	1db30 <__assert_fail@plt+0xc82c>
   1db20:	cmp	sl, #0
   1db24:	beq	1dc00 <__assert_fail@plt+0xc8fc>
   1db28:	mov	sl, #0
   1db2c:	mov	r9, sl
   1db30:	mov	r3, #12
   1db34:	mul	fp, r3, r9
   1db38:	ldr	r3, [r5, #24]
   1db3c:	add	r3, r3, fp
   1db40:	ldr	r3, [r3, #4]
   1db44:	cmp	r3, #0
   1db48:	bne	1dbf8 <__assert_fail@plt+0xc8f4>
   1db4c:	mov	r3, #1
   1db50:	mov	r2, r9
   1db54:	mov	r1, r5
   1db58:	add	r0, sp, #32
   1db5c:	bl	17564 <__assert_fail@plt+0x6260>
   1db60:	cmp	r0, #0
   1db64:	beq	1dbd8 <__assert_fail@plt+0xc8d4>
   1db68:	mov	r8, r0
   1db6c:	cmp	r8, #0
   1db70:	str	r8, [sp, #24]
   1db74:	beq	1dc1c <__assert_fail@plt+0xc918>
   1db78:	b	1d8a0 <__assert_fail@plt+0xc59c>
   1db7c:	str	r3, [r0, r3, lsl #2]
   1db80:	add	r3, r3, #1
   1db84:	cmp	r3, r2
   1db88:	bne	1db7c <__assert_fail@plt+0xc878>
   1db8c:	mov	r2, r5
   1db90:	ldr	r1, [pc, #1300]	; 1e0ac <__assert_fail@plt+0xcda8>
   1db94:	ldr	r0, [r5, #52]	; 0x34
   1db98:	bl	16264 <__assert_fail@plt+0x4f60>
   1db9c:	ldr	r2, [r6, #24]
   1dba0:	mov	r3, #0
   1dba4:	cmp	r3, r2
   1dba8:	bne	1dbc0 <__assert_fail@plt+0xc8bc>
   1dbac:	ldr	r0, [r5, #132]	; 0x84
   1dbb0:	bl	1f990 <__assert_fail@plt+0xe68c>
   1dbb4:	mov	r3, #0
   1dbb8:	str	r3, [r5, #132]	; 0x84
   1dbbc:	b	1dab4 <__assert_fail@plt+0xc7b0>
   1dbc0:	ldr	r1, [r5, #132]	; 0x84
   1dbc4:	ldr	r1, [r1, r3, lsl #2]
   1dbc8:	cmp	r1, r3
   1dbcc:	bne	1dab4 <__assert_fail@plt+0xc7b0>
   1dbd0:	add	r3, r3, #1
   1dbd4:	b	1dba4 <__assert_fail@plt+0xc8a0>
   1dbd8:	ldr	r3, [r5, #24]
   1dbdc:	add	fp, r3, fp
   1dbe0:	ldr	r3, [fp, #4]
   1dbe4:	cmp	r3, #0
   1dbe8:	bne	1dbf8 <__assert_fail@plt+0xc8f4>
   1dbec:	ldr	r0, [sp, #40]	; 0x28
   1dbf0:	mov	sl, #1
   1dbf4:	bl	1f990 <__assert_fail@plt+0xe68c>
   1dbf8:	add	r9, r9, #1
   1dbfc:	b	1db14 <__assert_fail@plt+0xc810>
   1dc00:	ldrb	r3, [r6, #28]
   1dc04:	tst	r3, #16
   1dc08:	beq	1dcfc <__assert_fail@plt+0xc9f8>
   1dc0c:	ldr	r3, [r5, #76]	; 0x4c
   1dc10:	cmp	r3, #0
   1dc14:	streq	r3, [sp, #24]
   1dc18:	bne	1dd14 <__assert_fail@plt+0xca10>
   1dc1c:	ldrb	r3, [r4, #88]	; 0x58
   1dc20:	clz	r7, r7
   1dc24:	lsr	r7, r7, #5
   1dc28:	ands	r7, r7, r3, lsr #2
   1dc2c:	beq	1dc44 <__assert_fail@plt+0xc940>
   1dc30:	ldr	r3, [r6, #20]
   1dc34:	cmp	r3, #0
   1dc38:	moveq	r2, r3
   1dc3c:	ldreq	ip, [r4, #8]
   1dc40:	beq	1de34 <__assert_fail@plt+0xcb30>
   1dc44:	mov	r8, #12
   1dc48:	add	r0, sp, #32
   1dc4c:	ldr	r1, [r4, #24]
   1dc50:	ldr	r3, [r4, #52]	; 0x34
   1dc54:	ldr	r3, [r3, #12]
   1dc58:	ldr	r3, [r3, #28]
   1dc5c:	mla	r1, r8, r3, r1
   1dc60:	str	r3, [r4, #72]	; 0x48
   1dc64:	bl	1650c <__assert_fail@plt+0x5208>
   1dc68:	cmp	r0, #0
   1dc6c:	mov	r5, r0
   1dc70:	str	r0, [sp, #28]
   1dc74:	bne	1dcb0 <__assert_fail@plt+0xc9ac>
   1dc78:	ldr	r3, [r4, #76]	; 0x4c
   1dc7c:	cmp	r3, #0
   1dc80:	movgt	r7, r0
   1dc84:	addgt	r9, sp, #32
   1dc88:	bgt	1df58 <__assert_fail@plt+0xcc54>
   1dc8c:	mov	r3, #0
   1dc90:	add	r2, sp, #32
   1dc94:	mov	r1, r4
   1dc98:	add	r0, sp, #28
   1dc9c:	bl	166c4 <__assert_fail@plt+0x53c0>
   1dca0:	cmp	r0, #0
   1dca4:	str	r0, [r4, #36]	; 0x24
   1dca8:	bne	1dfe0 <__assert_fail@plt+0xccdc>
   1dcac:	ldr	r5, [sp, #28]
   1dcb0:	str	r5, [sp, #24]
   1dcb4:	ldr	r7, [r6]
   1dcb8:	ldr	r5, [r7, #56]	; 0x38
   1dcbc:	cmp	r5, #0
   1dcc0:	bne	1e068 <__assert_fail@plt+0xcd64>
   1dcc4:	mov	r3, #31
   1dcc8:	str	r5, [r7, #52]	; 0x34
   1dccc:	str	r5, [r7, #56]	; 0x38
   1dcd0:	str	r3, [r7, #64]	; 0x40
   1dcd4:	ldr	r0, [r7, #16]
   1dcd8:	bl	1f990 <__assert_fail@plt+0xe68c>
   1dcdc:	add	r0, sp, #44	; 0x2c
   1dce0:	str	r5, [r7, #16]
   1dce4:	bl	1516c <__assert_fail@plt+0x3e68>
   1dce8:	ldr	r3, [sp, #24]
   1dcec:	cmp	r3, #0
   1dcf0:	bne	1d8d4 <__assert_fail@plt+0xc5d0>
   1dcf4:	ldr	r0, [sp, #24]
   1dcf8:	b	1e080 <__assert_fail@plt+0xcd7c>
   1dcfc:	ldr	r3, [r6, #24]
   1dd00:	cmp	r3, #0
   1dd04:	beq	1dc0c <__assert_fail@plt+0xc908>
   1dd08:	ldrb	r3, [r5, #88]	; 0x58
   1dd0c:	tst	r3, #1
   1dd10:	beq	1dc0c <__assert_fail@plt+0xc908>
   1dd14:	mov	sl, #12
   1dd18:	mul	r0, sl, r9
   1dd1c:	bl	1f810 <__assert_fail@plt+0xe50c>
   1dd20:	cmp	r0, #0
   1dd24:	str	r0, [r5, #28]
   1dd28:	movne	r3, #0
   1dd2c:	movne	ip, r3
   1dd30:	beq	1da5c <__assert_fail@plt+0xc758>
   1dd34:	ldr	r2, [r5, #8]
   1dd38:	cmp	r2, r3
   1dd3c:	bhi	1dd84 <__assert_fail@plt+0xca80>
   1dd40:	mov	r9, #0
   1dd44:	mov	r2, #12
   1dd48:	ldr	r3, [r5, #8]
   1dd4c:	cmp	r3, r9
   1dd50:	bls	1db6c <__assert_fail@plt+0xc868>
   1dd54:	ldr	r3, [r5, #24]
   1dd58:	mul	fp, r2, r9
   1dd5c:	mov	sl, #0
   1dd60:	add	r3, r3, fp
   1dd64:	ldr	r3, [r3, #8]
   1dd68:	ldr	r1, [r5, #24]
   1dd6c:	add	r1, r1, fp
   1dd70:	ldr	r1, [r1, #4]
   1dd74:	cmp	sl, r1
   1dd78:	blt	1dda4 <__assert_fail@plt+0xcaa0>
   1dd7c:	add	r9, r9, #1
   1dd80:	b	1dd48 <__assert_fail@plt+0xca44>
   1dd84:	ldr	r0, [r5, #28]
   1dd88:	mul	r1, sl, r3
   1dd8c:	add	r3, r3, #1
   1dd90:	add	r2, r0, r1
   1dd94:	str	ip, [r0, r1]
   1dd98:	str	ip, [r2, #4]
   1dd9c:	str	ip, [r2, #8]
   1dda0:	b	1dd34 <__assert_fail@plt+0xca30>
   1dda4:	ldr	ip, [r3, sl, lsl #2]
   1dda8:	mov	r1, r9
   1ddac:	str	r3, [sp, #20]
   1ddb0:	ldr	r0, [r5, #28]
   1ddb4:	mla	r0, r2, ip, r0
   1ddb8:	bl	14364 <__assert_fail@plt+0x3060>
   1ddbc:	cmp	r0, #0
   1ddc0:	beq	1ddd4 <__assert_fail@plt+0xcad0>
   1ddc4:	add	sl, sl, #1
   1ddc8:	mov	r2, #12
   1ddcc:	ldr	r3, [sp, #20]
   1ddd0:	b	1dd68 <__assert_fail@plt+0xca64>
   1ddd4:	mov	r8, #12
   1ddd8:	b	1db6c <__assert_fail@plt+0xc868>
   1dddc:	ldr	r1, [r4]
   1dde0:	lsl	lr, r2, #3
   1dde4:	add	r0, r1, lr
   1dde8:	ldrb	r0, [r0, #4]
   1ddec:	sub	r0, r0, #1
   1ddf0:	cmp	r0, #11
   1ddf4:	ldrls	pc, [pc, r0, lsl #2]
   1ddf8:	b	1dedc <__assert_fail@plt+0xcbd8>
   1ddfc:	andeq	sp, r1, r4, ror lr
   1de00:	andeq	sp, r1, r0, lsr lr
   1de04:			; <UNDEFINED> instruction: 0x0001deb8
   1de08:	andeq	sp, r1, r0, lsr lr
   1de0c:	andeq	sp, r1, ip, lsr #28
   1de10:	andeq	sp, r1, r4, asr #24
   1de14:	ldrdeq	sp, [r1], -ip
   1de18:	andeq	sp, r1, r0, lsr lr
   1de1c:	andeq	sp, r1, r0, lsr lr
   1de20:	andeq	sp, r1, r0, lsr lr
   1de24:	andeq	sp, r1, r0, lsr lr
   1de28:	andeq	sp, r1, ip, lsl #29
   1de2c:	mov	r3, r7
   1de30:	add	r2, r2, #1
   1de34:	cmp	r2, ip
   1de38:	bne	1dddc <__assert_fail@plt+0xcad8>
   1de3c:	ldr	r2, [sp, #12]
   1de40:	orr	r0, r2, r3
   1de44:	tst	r0, #255	; 0xff
   1de48:	bne	1df28 <__assert_fail@plt+0xcc24>
   1de4c:	mov	r2, #1
   1de50:	ldr	r1, [r4, #76]	; 0x4c
   1de54:	str	r2, [r4, #92]	; 0x5c
   1de58:	ldrb	r2, [r4, #88]	; 0x58
   1de5c:	cmp	r1, #0
   1de60:	orrgt	r3, r3, #1
   1de64:	and	r2, r2, #251	; 0xfb
   1de68:	bfi	r2, r3, #1, #1
   1de6c:	strb	r2, [r4, #88]	; 0x58
   1de70:	b	1dc44 <__assert_fail@plt+0xc940>
   1de74:	ldrsb	r1, [r1, lr]
   1de78:	ldr	r0, [sp, #12]
   1de7c:	cmp	r1, #0
   1de80:	movlt	r0, r7
   1de84:	str	r0, [sp, #12]
   1de88:	b	1de30 <__assert_fail@plt+0xcb2c>
   1de8c:	ldr	r1, [r1, r2, lsl #3]
   1de90:	cmp	r1, #32
   1de94:	beq	1de30 <__assert_fail@plt+0xcb2c>
   1de98:	bhi	1dea8 <__assert_fail@plt+0xcba4>
   1de9c:	cmp	r1, #16
   1dea0:	beq	1de30 <__assert_fail@plt+0xcb2c>
   1dea4:	b	1dc44 <__assert_fail@plt+0xc940>
   1dea8:	cmp	r1, #64	; 0x40
   1deac:	beq	1de30 <__assert_fail@plt+0xcb2c>
   1deb0:	cmp	r1, #128	; 0x80
   1deb4:	b	1dea0 <__assert_fail@plt+0xcb9c>
   1deb8:	ldr	r1, [r1, r2, lsl #3]
   1debc:	add	r0, r1, #12
   1dec0:	add	r1, r1, #28
   1dec4:	ldr	lr, [r0, #4]!
   1dec8:	cmp	lr, #0
   1decc:	bne	1dc44 <__assert_fail@plt+0xc940>
   1ded0:	cmp	r1, r0
   1ded4:	bne	1dec4 <__assert_fail@plt+0xcbc0>
   1ded8:	b	1de30 <__assert_fail@plt+0xcb2c>
   1dedc:	bl	112e0 <abort@plt>
   1dee0:	ldr	r5, [r4]
   1dee4:	lsl	lr, r2, #3
   1dee8:	add	r1, r5, lr
   1deec:	ldrb	r0, [r1, #4]
   1def0:	cmp	r0, #1
   1def4:	bne	1df1c <__assert_fail@plt+0xcc18>
   1def8:	ldrsb	r0, [r5, lr]
   1defc:	cmp	r0, #0
   1df00:	ldrblt	r0, [r1, #6]
   1df04:	bfclt	r0, #5, #1
   1df08:	strblt	r0, [r1, #6]
   1df0c:	add	r2, r2, #1
   1df10:	cmp	r2, ip
   1df14:	bne	1dee0 <__assert_fail@plt+0xcbdc>
   1df18:	b	1de4c <__assert_fail@plt+0xcb48>
   1df1c:	cmp	r0, #5
   1df20:	strbeq	r7, [r1, #4]
   1df24:	b	1df0c <__assert_fail@plt+0xcc08>
   1df28:	mov	r2, #0
   1df2c:	mov	r7, #7
   1df30:	b	1df10 <__assert_fail@plt+0xcc0c>
   1df34:	ldr	r0, [sp, #40]	; 0x28
   1df38:	ldr	r1, [r4]
   1df3c:	ldr	r3, [r0, r7, lsl #2]
   1df40:	add	ip, r1, r3, lsl #3
   1df44:	ldrb	r2, [ip, #4]
   1df48:	cmp	r2, #4
   1df4c:	moveq	r2, #0
   1df50:	beq	1df90 <__assert_fail@plt+0xcc8c>
   1df54:	add	r7, r7, #1
   1df58:	ldr	fp, [sp, #36]	; 0x24
   1df5c:	cmp	r7, fp
   1df60:	blt	1df34 <__assert_fail@plt+0xcc30>
   1df64:	b	1dc8c <__assert_fail@plt+0xc988>
   1df68:	ldr	lr, [r0, r2, lsl #2]
   1df6c:	add	sl, r1, lr, lsl #3
   1df70:	ldrb	sl, [sl, #4]
   1df74:	cmp	sl, #9
   1df78:	bne	1df8c <__assert_fail@plt+0xcc88>
   1df7c:	ldr	sl, [r1, lr, lsl #3]
   1df80:	ldr	lr, [ip]
   1df84:	cmp	sl, lr
   1df88:	beq	1df9c <__assert_fail@plt+0xcc98>
   1df8c:	add	r2, r2, #1
   1df90:	cmp	r2, fp
   1df94:	blt	1df68 <__assert_fail@plt+0xcc64>
   1df98:	beq	1df54 <__assert_fail@plt+0xcc50>
   1df9c:	ldr	r2, [r4, #20]
   1dfa0:	mov	r0, r9
   1dfa4:	mla	r3, r8, r3, r2
   1dfa8:	ldr	r3, [r3, #8]
   1dfac:	ldr	sl, [r3]
   1dfb0:	mov	r1, sl
   1dfb4:	bl	13d28 <__assert_fail@plt+0x2a24>
   1dfb8:	cmp	r0, #0
   1dfbc:	bne	1df54 <__assert_fail@plt+0xcc50>
   1dfc0:	ldr	r1, [r4, #24]
   1dfc4:	mov	r0, r9
   1dfc8:	mla	r1, r8, sl, r1
   1dfcc:	bl	17404 <__assert_fail@plt+0x6100>
   1dfd0:	subs	r7, r0, #0
   1dfd4:	beq	1df54 <__assert_fail@plt+0xcc50>
   1dfd8:	mov	r5, r7
   1dfdc:	b	1dcb0 <__assert_fail@plt+0xc9ac>
   1dfe0:	ldrsb	r3, [r0, #52]	; 0x34
   1dfe4:	cmp	r3, #0
   1dfe8:	strge	r0, [r4, #40]	; 0x28
   1dfec:	strge	r0, [r4, #44]	; 0x2c
   1dff0:	strge	r0, [r4, #48]	; 0x30
   1dff4:	bge	1e05c <__assert_fail@plt+0xcd58>
   1dff8:	mov	r3, #1
   1dffc:	add	r2, sp, #32
   1e000:	mov	r1, r4
   1e004:	add	r0, sp, #28
   1e008:	bl	166c4 <__assert_fail@plt+0x53c0>
   1e00c:	mov	r3, #2
   1e010:	add	r2, sp, #32
   1e014:	str	r0, [r4, #40]	; 0x28
   1e018:	mov	r1, r4
   1e01c:	add	r0, sp, #28
   1e020:	bl	166c4 <__assert_fail@plt+0x53c0>
   1e024:	mov	r3, #6
   1e028:	add	r2, sp, #32
   1e02c:	str	r0, [r4, #44]	; 0x2c
   1e030:	mov	r1, r4
   1e034:	add	r0, sp, #28
   1e038:	bl	166c4 <__assert_fail@plt+0x53c0>
   1e03c:	ldr	r3, [r4, #40]	; 0x28
   1e040:	str	r0, [r4, #48]	; 0x30
   1e044:	cmp	r3, #0
   1e048:	beq	1dcac <__assert_fail@plt+0xc9a8>
   1e04c:	ldr	r3, [r4, #44]	; 0x2c
   1e050:	cmp	r0, #0
   1e054:	cmpne	r3, #0
   1e058:	beq	1dcac <__assert_fail@plt+0xc9a8>
   1e05c:	ldr	r0, [sp, #40]	; 0x28
   1e060:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e064:	b	1dcb0 <__assert_fail@plt+0xc9ac>
   1e068:	ldr	r8, [r5]
   1e06c:	mov	r0, r5
   1e070:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e074:	mov	r5, r8
   1e078:	b	1dcbc <__assert_fail@plt+0xc9b8>
   1e07c:	mov	r0, #12
   1e080:	add	sp, sp, #132	; 0x84
   1e084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e088:	beq	feac8b34 <optarg@@GLIBC_2.4+0xfea97954>
   1e08c:	andeq	r0, r2, pc, asr fp
   1e090:	andeq	r0, r2, r8, lsr r9
	...
   1e09c:	andeq	r4, r1, r0, asr #12
   1e0a0:	andeq	r6, r1, r8, lsr r9
   1e0a4:	andeq	r6, r1, r4, lsl r2
   1e0a8:	andeq	r5, r1, r0, ror #4
   1e0ac:	andeq	r6, r1, ip, ror r1
   1e0b0:	ldr	r3, [pc, #92]	; 1e114 <__assert_fail@plt+0xce10>
   1e0b4:	mov	ip, r2
   1e0b8:	push	{r4, lr}
   1e0bc:	ldrb	r2, [r2, #28]
   1e0c0:	ldr	r3, [r3]
   1e0c4:	ubfx	lr, r3, #25, #1
   1e0c8:	bfi	r2, lr, #4, #1
   1e0cc:	mvn	r2, r2, lsl #25
   1e0d0:	mvn	r2, r2, lsr #25
   1e0d4:	strb	r2, [ip, #28]
   1e0d8:	mov	r2, r1
   1e0dc:	mov	r1, r0
   1e0e0:	mov	r0, ip
   1e0e4:	bl	1d520 <__assert_fail@plt+0xc21c>
   1e0e8:	subs	r2, r0, #0
   1e0ec:	popeq	{r4, pc}
   1e0f0:	mov	r0, #0
   1e0f4:	pop	{r4, lr}
   1e0f8:	ldr	r3, [pc, #24]	; 1e118 <__assert_fail@plt+0xce14>
   1e0fc:	add	r1, r3, #32
   1e100:	add	r3, r3, r2, lsl #2
   1e104:	mov	r2, #5
   1e108:	ldr	r3, [r3, #416]	; 0x1a0
   1e10c:	add	r1, r1, r3
   1e110:	b	110f4 <dcgettext@plt>
   1e114:	andeq	r1, r3, r8, asr #13
   1e118:	andeq	r0, r2, r8, lsr r9
   1e11c:	ldr	r3, [pc, #12]	; 1e130 <__assert_fail@plt+0xce2c>
   1e120:	ldr	r2, [r3]
   1e124:	str	r0, [r3]
   1e128:	mov	r0, r2
   1e12c:	bx	lr
   1e130:	andeq	r1, r3, r8, asr #13
   1e134:	push	{r4, r5, r6, lr}
   1e138:	mov	r2, #256	; 0x100
   1e13c:	mov	r4, r0
   1e140:	mov	r1, #0
   1e144:	ldr	r5, [r0]
   1e148:	ldr	r6, [r0, #16]
   1e14c:	mov	r0, r6
   1e150:	bl	11208 <memset@plt>
   1e154:	mov	r2, r6
   1e158:	mov	r0, r4
   1e15c:	ldr	r1, [r5, #36]	; 0x24
   1e160:	bl	16c84 <__assert_fail@plt+0x5980>
   1e164:	ldr	r3, [r5, #36]	; 0x24
   1e168:	ldr	r1, [r5, #40]	; 0x28
   1e16c:	cmp	r3, r1
   1e170:	beq	1e180 <__assert_fail@plt+0xce7c>
   1e174:	mov	r2, r6
   1e178:	mov	r0, r4
   1e17c:	bl	16c84 <__assert_fail@plt+0x5980>
   1e180:	ldr	r3, [r5, #36]	; 0x24
   1e184:	ldr	r1, [r5, #44]	; 0x2c
   1e188:	cmp	r3, r1
   1e18c:	beq	1e19c <__assert_fail@plt+0xce98>
   1e190:	mov	r2, r6
   1e194:	mov	r0, r4
   1e198:	bl	16c84 <__assert_fail@plt+0x5980>
   1e19c:	ldr	r3, [r5, #36]	; 0x24
   1e1a0:	ldr	r1, [r5, #48]	; 0x30
   1e1a4:	cmp	r3, r1
   1e1a8:	beq	1e1b8 <__assert_fail@plt+0xceb4>
   1e1ac:	mov	r2, r6
   1e1b0:	mov	r0, r4
   1e1b4:	bl	16c84 <__assert_fail@plt+0x5980>
   1e1b8:	ldrb	r3, [r4, #28]
   1e1bc:	mov	r0, #0
   1e1c0:	orr	r3, r3, #8
   1e1c4:	strb	r3, [r4, #28]
   1e1c8:	pop	{r4, r5, r6, pc}
   1e1cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1d0:	sub	sp, sp, #44	; 0x2c
   1e1d4:	cmp	r3, r2
   1e1d8:	ldr	lr, [r0]
   1e1dc:	ldr	ip, [sp, #80]	; 0x50
   1e1e0:	ldr	r4, [sp, #88]	; 0x58
   1e1e4:	str	lr, [sp, #24]
   1e1e8:	movle	lr, #0
   1e1ec:	movgt	lr, #1
   1e1f0:	orrs	lr, lr, r3, lsr #31
   1e1f4:	add	r6, r3, ip
   1e1f8:	mvnne	r4, #0
   1e1fc:	bne	1e368 <__assert_fail@plt+0xd064>
   1e200:	cmp	r6, r2
   1e204:	bgt	1e374 <__assert_fail@plt+0xd070>
   1e208:	cmp	ip, #0
   1e20c:	cmpge	r3, r6
   1e210:	movgt	lr, #1
   1e214:	movle	lr, #0
   1e218:	bgt	1e374 <__assert_fail@plt+0xd070>
   1e21c:	cmp	r6, #0
   1e220:	movlt	r6, lr
   1e224:	blt	1e23c <__assert_fail@plt+0xcf38>
   1e228:	cmp	r3, r6
   1e22c:	movgt	lr, #0
   1e230:	movle	lr, #1
   1e234:	ands	ip, lr, ip, lsr #31
   1e238:	movne	r6, #0
   1e23c:	ldr	lr, [pc, #672]	; 1e4e4 <__assert_fail@plt+0xd1e0>
   1e240:	mov	ip, #1
   1e244:	mov	r8, r3
   1e248:	mov	r9, r1
   1e24c:	mov	r7, r0
   1e250:	str	r2, [sp, #32]
   1e254:	ldr	r5, [pc, #652]	; 1e4e8 <__assert_fail@plt+0xd1e4>
   1e258:	cmp	lr, #0
   1e25c:	moveq	ip, lr
   1e260:	mov	lr, #1
   1e264:	cmp	r5, #0
   1e268:	moveq	lr, r5
   1e26c:	orr	ip, ip, lr
   1e270:	ands	r3, ip, #255	; 0xff
   1e274:	str	r3, [sp, #28]
   1e278:	beq	1e288 <__assert_fail@plt+0xcf84>
   1e27c:	ldr	r3, [sp, #24]
   1e280:	add	r0, r3, #136	; 0x88
   1e284:	bl	11064 <pthread_mutex_lock@plt>
   1e288:	ldrb	r2, [r7, #28]
   1e28c:	cmp	r6, r8
   1e290:	ubfx	fp, r2, #5, #2
   1e294:	ble	1e2b4 <__assert_fail@plt+0xcfb0>
   1e298:	ldr	r1, [r7, #16]
   1e29c:	cmp	r1, #0
   1e2a0:	beq	1e2b4 <__assert_fail@plt+0xcfb0>
   1e2a4:	tst	r2, #8
   1e2a8:	bne	1e2b4 <__assert_fail@plt+0xcfb0>
   1e2ac:	mov	r0, r7
   1e2b0:	bl	1e134 <__assert_fail@plt+0xce30>
   1e2b4:	ldrb	r1, [r7, #28]
   1e2b8:	ubfx	r2, r1, #4, #1
   1e2bc:	cmp	r4, #0
   1e2c0:	orreq	r2, r2, #1
   1e2c4:	ands	r2, r2, #255	; 0xff
   1e2c8:	movne	r5, #1
   1e2cc:	movne	r4, #0
   1e2d0:	bne	1e2fc <__assert_fail@plt+0xcff8>
   1e2d4:	and	r1, r1, #6
   1e2d8:	ldr	r5, [r7, #24]
   1e2dc:	cmp	r1, #4
   1e2e0:	bne	1e37c <__assert_fail@plt+0xd078>
   1e2e4:	ldr	r1, [r4]
   1e2e8:	cmp	r5, r1
   1e2ec:	bcc	1e37c <__assert_fail@plt+0xd078>
   1e2f0:	subs	r5, r1, #0
   1e2f4:	movle	r5, #1
   1e2f8:	movle	r4, r2
   1e2fc:	lsl	r0, r5, #3
   1e300:	bl	1f810 <__assert_fail@plt+0xe50c>
   1e304:	subs	sl, r0, #0
   1e308:	mvneq	r4, #1
   1e30c:	beq	1e350 <__assert_fail@plt+0xd04c>
   1e310:	ldr	r2, [sp, #84]	; 0x54
   1e314:	mov	r1, r9
   1e318:	mov	r3, r8
   1e31c:	mov	r0, r7
   1e320:	str	r6, [sp]
   1e324:	stmib	sp, {r2, r5, sl, fp}
   1e328:	ldr	r2, [sp, #32]
   1e32c:	bl	1abd8 <__assert_fail@plt+0x98d4>
   1e330:	subs	r9, r0, #0
   1e334:	beq	1e384 <__assert_fail@plt+0xd080>
   1e338:	cmp	r9, #1
   1e33c:	mvneq	r4, #0
   1e340:	beq	1e348 <__assert_fail@plt+0xd044>
   1e344:	mvn	r4, #1
   1e348:	mov	r0, sl
   1e34c:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e350:	ldr	r3, [sp, #28]
   1e354:	cmp	r3, #0
   1e358:	beq	1e368 <__assert_fail@plt+0xd064>
   1e35c:	ldr	r3, [sp, #24]
   1e360:	add	r0, r3, #136	; 0x88
   1e364:	bl	10fd4 <pthread_mutex_unlock@plt>
   1e368:	mov	r0, r4
   1e36c:	add	sp, sp, #44	; 0x2c
   1e370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e374:	mov	r6, r2
   1e378:	b	1e23c <__assert_fail@plt+0xcf38>
   1e37c:	add	r5, r5, #1
   1e380:	b	1e2fc <__assert_fail@plt+0xcff8>
   1e384:	cmp	r4, #0
   1e388:	bne	1e3a4 <__assert_fail@plt+0xd0a0>
   1e38c:	ldrb	r3, [sp, #92]	; 0x5c
   1e390:	ldr	r4, [sl]
   1e394:	cmp	r3, #0
   1e398:	ldrne	r4, [sl, #4]
   1e39c:	subne	r4, r4, r8
   1e3a0:	b	1e348 <__assert_fail@plt+0xd044>
   1e3a4:	ldrb	r6, [r7, #28]
   1e3a8:	add	fp, r5, #1
   1e3ac:	ubfx	r6, r6, #1, #2
   1e3b0:	cmp	r6, #0
   1e3b4:	bne	1e41c <__assert_fail@plt+0xd118>
   1e3b8:	lsl	r6, fp, #2
   1e3bc:	mov	r0, r6
   1e3c0:	bl	1f810 <__assert_fail@plt+0xe50c>
   1e3c4:	cmp	r0, #0
   1e3c8:	str	r0, [r4, #4]
   1e3cc:	bne	1e3f0 <__assert_fail@plt+0xd0ec>
   1e3d0:	mov	r6, #0
   1e3d4:	ldrb	r3, [r7, #28]
   1e3d8:	bfi	r3, r6, #1, #2
   1e3dc:	strb	r3, [r7, #28]
   1e3e0:	and	r3, r3, #6
   1e3e4:	cmp	r3, #0
   1e3e8:	bne	1e38c <__assert_fail@plt+0xd088>
   1e3ec:	b	1e344 <__assert_fail@plt+0xd040>
   1e3f0:	mov	r0, r6
   1e3f4:	bl	1f810 <__assert_fail@plt+0xe50c>
   1e3f8:	cmp	r0, #0
   1e3fc:	mov	r6, r0
   1e400:	str	r0, [r4, #8]
   1e404:	movne	r6, #1
   1e408:	strne	fp, [r4]
   1e40c:	bne	1e48c <__assert_fail@plt+0xd188>
   1e410:	ldr	r0, [r4, #4]
   1e414:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e418:	b	1e3d4 <__assert_fail@plt+0xd0d0>
   1e41c:	cmp	r6, #1
   1e420:	movne	r6, #2
   1e424:	bne	1e48c <__assert_fail@plt+0xd188>
   1e428:	ldr	r3, [r4]
   1e42c:	cmp	r3, fp
   1e430:	bcs	1e48c <__assert_fail@plt+0xd188>
   1e434:	lsl	r2, fp, #2
   1e438:	ldr	r0, [r4, #4]
   1e43c:	mov	r1, r2
   1e440:	str	r2, [sp, #36]	; 0x24
   1e444:	bl	1f83c <__assert_fail@plt+0xe538>
   1e448:	subs	r3, r0, #0
   1e44c:	str	r3, [sp, #32]
   1e450:	beq	1e3d0 <__assert_fail@plt+0xd0cc>
   1e454:	ldr	r2, [sp, #36]	; 0x24
   1e458:	ldr	r0, [r4, #8]
   1e45c:	mov	r1, r2
   1e460:	bl	1f83c <__assert_fail@plt+0xe538>
   1e464:	ldr	r3, [sp, #32]
   1e468:	subs	r2, r0, #0
   1e46c:	strne	fp, [r4]
   1e470:	strne	r2, [r4, #8]
   1e474:	strne	r3, [r4, #4]
   1e478:	bne	1e48c <__assert_fail@plt+0xd188>
   1e47c:	mov	r0, r3
   1e480:	str	r2, [sp, #32]
   1e484:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e488:	b	1e3d0 <__assert_fail@plt+0xd0cc>
   1e48c:	add	r3, sl, #4
   1e490:	cmp	r5, r9
   1e494:	bgt	1e4c4 <__assert_fail@plt+0xd1c0>
   1e498:	bic	r5, r5, r5, asr #31
   1e49c:	mvn	r3, #0
   1e4a0:	ldr	r2, [r4]
   1e4a4:	cmp	r5, r2
   1e4a8:	bcs	1e3d4 <__assert_fail@plt+0xd0d0>
   1e4ac:	ldr	r2, [r4, #8]
   1e4b0:	str	r3, [r2, r5, lsl #2]
   1e4b4:	ldr	r2, [r4, #4]
   1e4b8:	str	r3, [r2, r5, lsl #2]
   1e4bc:	add	r5, r5, #1
   1e4c0:	b	1e4a0 <__assert_fail@plt+0xd19c>
   1e4c4:	ldr	r1, [sl, r9, lsl #3]
   1e4c8:	ldr	r2, [r4, #4]
   1e4cc:	str	r1, [r2, r9, lsl #2]
   1e4d0:	ldr	r1, [r3, r9, lsl #3]
   1e4d4:	ldr	r2, [r4, #8]
   1e4d8:	str	r1, [r2, r9, lsl #2]
   1e4dc:	add	r9, r9, #1
   1e4e0:	b	1e490 <__assert_fail@plt+0xd18c>
	...
   1e4ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4f0:	sub	sp, sp, #20
   1e4f4:	mov	sl, r3
   1e4f8:	ldr	r5, [sp, #56]	; 0x38
   1e4fc:	ldr	r9, [sp, #72]	; 0x48
   1e500:	orr	r3, r5, r2
   1e504:	orrs	r3, r3, r9
   1e508:	bpl	1e51c <__assert_fail@plt+0xd218>
   1e50c:	mvn	r4, #1
   1e510:	mov	r0, r4
   1e514:	add	sp, sp, #20
   1e518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e51c:	adds	r8, r2, r5
   1e520:	mov	r4, r2
   1e524:	bvs	1e50c <__assert_fail@plt+0xd208>
   1e528:	cmp	r5, #0
   1e52c:	mov	fp, r0
   1e530:	mov	r7, r1
   1e534:	beq	1e5b8 <__assert_fail@plt+0xd2b4>
   1e538:	cmp	r2, #0
   1e53c:	moveq	r7, sl
   1e540:	moveq	r6, r2
   1e544:	beq	1e578 <__assert_fail@plt+0xd274>
   1e548:	mov	r0, r8
   1e54c:	bl	1f810 <__assert_fail@plt+0xe50c>
   1e550:	subs	r6, r0, #0
   1e554:	beq	1e50c <__assert_fail@plt+0xd208>
   1e558:	mov	r1, r7
   1e55c:	mov	r2, r4
   1e560:	bl	1107c <memcpy@plt>
   1e564:	mov	r7, r6
   1e568:	mov	r2, r5
   1e56c:	mov	r1, sl
   1e570:	add	r0, r6, r4
   1e574:	bl	1107c <memcpy@plt>
   1e578:	ldrb	r3, [sp, #76]	; 0x4c
   1e57c:	mov	r2, r8
   1e580:	mov	r1, r7
   1e584:	mov	r0, fp
   1e588:	str	r9, [sp, #4]
   1e58c:	str	r3, [sp, #12]
   1e590:	ldr	r3, [sp, #68]	; 0x44
   1e594:	str	r3, [sp, #8]
   1e598:	ldr	r3, [sp, #64]	; 0x40
   1e59c:	str	r3, [sp]
   1e5a0:	ldr	r3, [sp, #60]	; 0x3c
   1e5a4:	bl	1e1cc <__assert_fail@plt+0xcec8>
   1e5a8:	mov	r4, r0
   1e5ac:	mov	r0, r6
   1e5b0:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e5b4:	b	1e510 <__assert_fail@plt+0xd20c>
   1e5b8:	mov	r6, r5
   1e5bc:	b	1e578 <__assert_fail@plt+0xd274>
   1e5c0:	push	{r4, r5, r6, r7, r8, lr}
   1e5c4:	mov	r3, #0
   1e5c8:	tst	r2, #1
   1e5cc:	mov	r4, r0
   1e5d0:	mov	r7, r1
   1e5d4:	mov	r6, r2
   1e5d8:	ldr	r5, [pc, #184]	; 1e698 <__assert_fail@plt+0xd394>
   1e5dc:	str	r3, [r0]
   1e5e0:	str	r3, [r0, #4]
   1e5e4:	str	r3, [r0, #8]
   1e5e8:	mov	r0, #256	; 0x100
   1e5ec:	ldr	r8, [pc, #168]	; 1e69c <__assert_fail@plt+0xd398>
   1e5f0:	movne	r8, r5
   1e5f4:	bl	1f810 <__assert_fail@plt+0xe50c>
   1e5f8:	cmp	r0, #0
   1e5fc:	str	r0, [r4, #16]
   1e600:	moveq	r5, #12
   1e604:	beq	1e678 <__assert_fail@plt+0xd374>
   1e608:	ldrb	r3, [r4, #28]
   1e60c:	ands	r2, r6, #4
   1e610:	lsl	r5, r6, #21
   1e614:	movne	r2, #1
   1e618:	ubfx	r6, r6, #3, #1
   1e61c:	mov	r0, r7
   1e620:	and	r5, r5, #4194304	; 0x400000
   1e624:	orr	r5, r5, r8
   1e628:	bicne	r5, r5, #64	; 0x40
   1e62c:	bfi	r3, r2, #7, #1
   1e630:	orrne	r5, r5, #256	; 0x100
   1e634:	bfi	r3, r6, #4, #1
   1e638:	strb	r3, [r4, #28]
   1e63c:	mov	r3, #0
   1e640:	str	r3, [r4, #20]
   1e644:	bl	111cc <strlen@plt>
   1e648:	mov	r2, r0
   1e64c:	mov	r3, r5
   1e650:	mov	r1, r7
   1e654:	mov	r0, r4
   1e658:	bl	1d520 <__assert_fail@plt+0xc21c>
   1e65c:	cmp	r0, #16
   1e660:	mov	r5, r0
   1e664:	beq	1e680 <__assert_fail@plt+0xd37c>
   1e668:	cmp	r0, #0
   1e66c:	bne	1e684 <__assert_fail@plt+0xd380>
   1e670:	mov	r0, r4
   1e674:	bl	1e134 <__assert_fail@plt+0xce30>
   1e678:	mov	r0, r5
   1e67c:	pop	{r4, r5, r6, r7, r8, pc}
   1e680:	mov	r5, #8
   1e684:	ldr	r0, [r4, #16]
   1e688:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e68c:	mov	r3, #0
   1e690:	str	r3, [r4, #16]
   1e694:	b	1e678 <__assert_fail@plt+0xd374>
   1e698:	strdeq	fp, [r3], -ip
   1e69c:	smlabteq	r1, r6, r2, r0
   1e6a0:	cmp	r0, #16
   1e6a4:	push	{r4, r5, r6, r7, r8, lr}
   1e6a8:	bls	1e6b0 <__assert_fail@plt+0xd3ac>
   1e6ac:	bl	112e0 <abort@plt>
   1e6b0:	mov	r4, r3
   1e6b4:	ldr	r3, [pc, #88]	; 1e714 <__assert_fail@plt+0xd410>
   1e6b8:	mov	r6, r2
   1e6bc:	mov	r2, #5
   1e6c0:	add	r1, r3, #32
   1e6c4:	add	r3, r3, r0, lsl #2
   1e6c8:	mov	r0, #0
   1e6cc:	ldr	r3, [r3, #416]	; 0x1a0
   1e6d0:	add	r1, r1, r3
   1e6d4:	bl	110f4 <dcgettext@plt>
   1e6d8:	mov	r7, r0
   1e6dc:	bl	111cc <strlen@plt>
   1e6e0:	cmp	r4, #0
   1e6e4:	add	r5, r0, #1
   1e6e8:	beq	1e70c <__assert_fail@plt+0xd408>
   1e6ec:	cmp	r5, r4
   1e6f0:	mov	r1, r7
   1e6f4:	subhi	r2, r4, #1
   1e6f8:	movhi	r3, #0
   1e6fc:	movls	r2, r5
   1e700:	mov	r0, r6
   1e704:	strbhi	r3, [r6, r2]
   1e708:	bl	1107c <memcpy@plt>
   1e70c:	mov	r0, r5
   1e710:	pop	{r4, r5, r6, r7, r8, pc}
   1e714:	andeq	r0, r2, r8, lsr r9
   1e718:	push	{r4, r5, r6, lr}
   1e71c:	mov	r4, r0
   1e720:	ldr	r5, [r0]
   1e724:	cmp	r5, #0
   1e728:	beq	1e768 <__assert_fail@plt+0xd464>
   1e72c:	ldr	r2, [pc, #92]	; 1e790 <__assert_fail@plt+0xd48c>
   1e730:	mov	r3, #1
   1e734:	ldr	r1, [pc, #88]	; 1e794 <__assert_fail@plt+0xd490>
   1e738:	cmp	r2, #0
   1e73c:	moveq	r3, r2
   1e740:	mov	r2, #1
   1e744:	cmp	r1, #0
   1e748:	moveq	r2, r1
   1e74c:	orr	r3, r3, r2
   1e750:	tst	r3, #1
   1e754:	beq	1e760 <__assert_fail@plt+0xd45c>
   1e758:	add	r0, r5, #136	; 0x88
   1e75c:	bl	11034 <pthread_mutex_destroy@plt>
   1e760:	mov	r0, r5
   1e764:	bl	169bc <__assert_fail@plt+0x56b8>
   1e768:	mov	r5, #0
   1e76c:	ldr	r0, [r4, #16]
   1e770:	str	r5, [r4]
   1e774:	str	r5, [r4, #4]
   1e778:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e77c:	str	r5, [r4, #16]
   1e780:	ldr	r0, [r4, #20]
   1e784:	bl	1f990 <__assert_fail@plt+0xe68c>
   1e788:	str	r5, [r4, #20]
   1e78c:	pop	{r4, r5, r6, pc}
	...
   1e798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e79c:	sub	sp, sp, #36	; 0x24
   1e7a0:	ldr	r9, [sp, #72]	; 0x48
   1e7a4:	bics	ip, r9, #7
   1e7a8:	movne	r0, #2
   1e7ac:	bne	1e870 <__assert_fail@plt+0xd56c>
   1e7b0:	ands	fp, r9, #4
   1e7b4:	mov	r8, r3
   1e7b8:	str	r2, [sp, #28]
   1e7bc:	mov	r7, r1
   1e7c0:	mov	r6, r0
   1e7c4:	ldrne	fp, [r3]
   1e7c8:	ldrne	r5, [r3, #4]
   1e7cc:	bne	1e7dc <__assert_fail@plt+0xd4d8>
   1e7d0:	mov	r0, r1
   1e7d4:	bl	111cc <strlen@plt>
   1e7d8:	mov	r5, r0
   1e7dc:	ldr	r2, [pc, #148]	; 1e878 <__assert_fail@plt+0xd574>
   1e7e0:	mov	r4, #1
   1e7e4:	ldr	r1, [pc, #144]	; 1e87c <__assert_fail@plt+0xd578>
   1e7e8:	ldr	sl, [r6]
   1e7ec:	cmp	r2, #0
   1e7f0:	moveq	r4, r2
   1e7f4:	mov	r2, #1
   1e7f8:	cmp	r1, #0
   1e7fc:	moveq	r2, r1
   1e800:	orr	r4, r4, r2
   1e804:	ands	r4, r4, #255	; 0xff
   1e808:	beq	1e814 <__assert_fail@plt+0xd510>
   1e80c:	add	r0, sl, #136	; 0x88
   1e810:	bl	11064 <pthread_mutex_lock@plt>
   1e814:	ldrb	r2, [r6, #28]
   1e818:	mov	r1, r7
   1e81c:	mov	r0, r6
   1e820:	str	r5, [sp]
   1e824:	str	r5, [sp, #4]
   1e828:	str	r9, [sp, #16]
   1e82c:	tst	r2, #16
   1e830:	ldreq	r3, [sp, #28]
   1e834:	movne	r2, #0
   1e838:	streq	r8, [sp, #12]
   1e83c:	strne	r2, [sp, #8]
   1e840:	strne	r2, [sp, #12]
   1e844:	mov	r2, r5
   1e848:	streq	r3, [sp, #8]
   1e84c:	mov	r3, fp
   1e850:	bl	1abd8 <__assert_fail@plt+0x98d4>
   1e854:	cmp	r4, #0
   1e858:	mov	r5, r0
   1e85c:	beq	1e868 <__assert_fail@plt+0xd564>
   1e860:	add	r0, sl, #136	; 0x88
   1e864:	bl	10fd4 <pthread_mutex_unlock@plt>
   1e868:	adds	r0, r5, #0
   1e86c:	movne	r0, #1
   1e870:	add	sp, sp, #36	; 0x24
   1e874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1e880:	mov	ip, #1
   1e884:	push	{r0, r1, r2, r3, r4, lr}
   1e888:	str	r2, [sp, #4]
   1e88c:	str	ip, [sp, #12]
   1e890:	ldr	ip, [sp, #24]
   1e894:	str	ip, [sp, #8]
   1e898:	mov	ip, #0
   1e89c:	str	ip, [sp]
   1e8a0:	bl	1e1cc <__assert_fail@plt+0xcec8>
   1e8a4:	add	sp, sp, #20
   1e8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8ac:	mov	ip, #0
   1e8b0:	push	{r0, r1, r2, r3, r4, lr}
   1e8b4:	str	r2, [sp, #4]
   1e8b8:	str	ip, [sp, #12]
   1e8bc:	ldr	ip, [sp, #28]
   1e8c0:	str	ip, [sp, #8]
   1e8c4:	ldr	ip, [sp, #24]
   1e8c8:	str	ip, [sp]
   1e8cc:	bl	1e1cc <__assert_fail@plt+0xcec8>
   1e8d0:	add	sp, sp, #20
   1e8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8d8:	mov	ip, #1
   1e8dc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e8e0:	str	ip, [sp, #20]
   1e8e4:	ldr	ip, [sp, #44]	; 0x2c
   1e8e8:	str	ip, [sp, #16]
   1e8ec:	ldr	ip, [sp, #40]	; 0x28
   1e8f0:	str	ip, [sp, #12]
   1e8f4:	mov	ip, #0
   1e8f8:	str	ip, [sp, #8]
   1e8fc:	ldr	ip, [sp, #36]	; 0x24
   1e900:	str	ip, [sp, #4]
   1e904:	ldr	ip, [sp, #32]
   1e908:	str	ip, [sp]
   1e90c:	bl	1e4ec <__assert_fail@plt+0xd1e8>
   1e910:	add	sp, sp, #28
   1e914:	pop	{pc}		; (ldr pc, [sp], #4)
   1e918:	mov	ip, #0
   1e91c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1e920:	str	ip, [sp, #20]
   1e924:	ldr	ip, [sp, #48]	; 0x30
   1e928:	str	ip, [sp, #16]
   1e92c:	ldr	ip, [sp, #44]	; 0x2c
   1e930:	str	ip, [sp, #12]
   1e934:	ldr	ip, [sp, #40]	; 0x28
   1e938:	str	ip, [sp, #8]
   1e93c:	ldr	ip, [sp, #36]	; 0x24
   1e940:	str	ip, [sp, #4]
   1e944:	ldr	ip, [sp, #32]
   1e948:	str	ip, [sp]
   1e94c:	bl	1e4ec <__assert_fail@plt+0xd1e8>
   1e950:	add	sp, sp, #28
   1e954:	pop	{pc}		; (ldr pc, [sp], #4)
   1e958:	cmp	r2, #0
   1e95c:	ldrb	ip, [r0, #28]
   1e960:	beq	1e984 <__assert_fail@plt+0xd680>
   1e964:	push	{lr}		; (str lr, [sp, #-4]!)
   1e968:	mov	lr, #1
   1e96c:	bfi	ip, lr, #1, #2
   1e970:	strb	ip, [r0, #28]
   1e974:	strd	r2, [r1]
   1e978:	ldr	r3, [sp, #4]
   1e97c:	str	r3, [r1, #8]
   1e980:	pop	{pc}		; (ldr pc, [sp], #4)
   1e984:	bfi	ip, r2, #1, #2
   1e988:	strb	ip, [r0, #28]
   1e98c:	str	r2, [r1]
   1e990:	str	r2, [r1, #4]
   1e994:	str	r2, [r1, #8]
   1e998:	bx	lr
   1e99c:	push	{r4, r5, r6, lr}
   1e9a0:	cmp	r1, #0
   1e9a4:	sub	sp, sp, #32
   1e9a8:	mov	r5, r0
   1e9ac:	ldr	r4, [sp, #48]	; 0x30
   1e9b0:	ldr	r6, [sp, #52]	; 0x34
   1e9b4:	beq	1ea68 <__assert_fail@plt+0xd764>
   1e9b8:	strd	r2, [sp]
   1e9bc:	mov	r3, r1
   1e9c0:	mov	r1, #1
   1e9c4:	ldr	r2, [pc, #856]	; 1ed24 <__assert_fail@plt+0xda20>
   1e9c8:	bl	11238 <__fprintf_chk@plt>
   1e9cc:	mov	r2, #5
   1e9d0:	ldr	r1, [pc, #848]	; 1ed28 <__assert_fail@plt+0xda24>
   1e9d4:	mov	r0, #0
   1e9d8:	bl	110f4 <dcgettext@plt>
   1e9dc:	movw	r3, #2022	; 0x7e6
   1e9e0:	ldr	r2, [pc, #836]	; 1ed2c <__assert_fail@plt+0xda28>
   1e9e4:	mov	r1, #1
   1e9e8:	str	r3, [sp]
   1e9ec:	mov	r3, r0
   1e9f0:	mov	r0, r5
   1e9f4:	bl	11238 <__fprintf_chk@plt>
   1e9f8:	mov	r1, r5
   1e9fc:	mov	r0, #10
   1ea00:	bl	110dc <fputc_unlocked@plt>
   1ea04:	mov	r2, #5
   1ea08:	ldr	r1, [pc, #800]	; 1ed30 <__assert_fail@plt+0xda2c>
   1ea0c:	mov	r0, #0
   1ea10:	bl	110f4 <dcgettext@plt>
   1ea14:	mov	r2, r0
   1ea18:	mov	r1, #1
   1ea1c:	ldr	r3, [pc, #784]	; 1ed34 <__assert_fail@plt+0xda30>
   1ea20:	mov	r0, r5
   1ea24:	bl	11238 <__fprintf_chk@plt>
   1ea28:	mov	r1, r5
   1ea2c:	mov	r0, #10
   1ea30:	bl	110dc <fputc_unlocked@plt>
   1ea34:	cmp	r6, #9
   1ea38:	ldrls	pc, [pc, r6, lsl #2]
   1ea3c:	b	1ed18 <__assert_fail@plt+0xda14>
   1ea40:	andeq	lr, r1, r8, asr fp
   1ea44:	andeq	lr, r1, r0, lsl #21
   1ea48:	andeq	lr, r1, ip, lsr #21
   1ea4c:	andeq	lr, r1, r0, ror #21
   1ea50:	andeq	lr, r1, ip, lsl fp
   1ea54:	andeq	lr, r1, r0, ror #22
   1ea58:	andeq	lr, r1, r8, lsr #23
   1ea5c:	strdeq	lr, [r1], -r8
   1ea60:	andeq	lr, r1, r0, asr ip
   1ea64:			; <UNDEFINED> instruction: 0x0001ecb0
   1ea68:	mov	r1, #1
   1ea6c:	str	r3, [sp]
   1ea70:	mov	r3, r2
   1ea74:	ldr	r2, [pc, #700]	; 1ed38 <__assert_fail@plt+0xda34>
   1ea78:	bl	11238 <__fprintf_chk@plt>
   1ea7c:	b	1e9cc <__assert_fail@plt+0xd6c8>
   1ea80:	mov	r2, #5
   1ea84:	ldr	r1, [pc, #688]	; 1ed3c <__assert_fail@plt+0xda38>
   1ea88:	mov	r0, #0
   1ea8c:	bl	110f4 <dcgettext@plt>
   1ea90:	ldr	r3, [r4]
   1ea94:	mov	r2, r0
   1ea98:	mov	r1, #1
   1ea9c:	mov	r0, r5
   1eaa0:	add	sp, sp, #32
   1eaa4:	pop	{r4, r5, r6, lr}
   1eaa8:	b	11238 <__fprintf_chk@plt>
   1eaac:	mov	r2, #5
   1eab0:	ldr	r1, [pc, #648]	; 1ed40 <__assert_fail@plt+0xda3c>
   1eab4:	mov	r0, #0
   1eab8:	bl	110f4 <dcgettext@plt>
   1eabc:	ldr	r3, [r4, #4]
   1eac0:	mov	r2, r0
   1eac4:	mov	r1, #1
   1eac8:	mov	r0, r5
   1eacc:	str	r3, [sp, #48]	; 0x30
   1ead0:	ldr	r3, [r4]
   1ead4:	add	sp, sp, #32
   1ead8:	pop	{r4, r5, r6, lr}
   1eadc:	b	11238 <__fprintf_chk@plt>
   1eae0:	mov	r2, #5
   1eae4:	ldr	r1, [pc, #600]	; 1ed44 <__assert_fail@plt+0xda40>
   1eae8:	mov	r0, #0
   1eaec:	bl	110f4 <dcgettext@plt>
   1eaf0:	ldr	r3, [r4, #8]
   1eaf4:	mov	r2, r0
   1eaf8:	mov	r1, #1
   1eafc:	mov	r0, r5
   1eb00:	str	r3, [sp, #52]	; 0x34
   1eb04:	ldr	r3, [r4, #4]
   1eb08:	str	r3, [sp, #48]	; 0x30
   1eb0c:	ldr	r3, [r4]
   1eb10:	add	sp, sp, #32
   1eb14:	pop	{r4, r5, r6, lr}
   1eb18:	b	11238 <__fprintf_chk@plt>
   1eb1c:	mov	r2, #5
   1eb20:	ldr	r1, [pc, #544]	; 1ed48 <__assert_fail@plt+0xda44>
   1eb24:	mov	r0, #0
   1eb28:	bl	110f4 <dcgettext@plt>
   1eb2c:	ldr	r3, [r4, #12]
   1eb30:	mov	r2, r0
   1eb34:	mov	r1, #1
   1eb38:	mov	r0, r5
   1eb3c:	str	r3, [sp, #8]
   1eb40:	ldr	r3, [r4, #8]
   1eb44:	str	r3, [sp, #4]
   1eb48:	ldr	r3, [r4, #4]
   1eb4c:	str	r3, [sp]
   1eb50:	ldr	r3, [r4]
   1eb54:	bl	11238 <__fprintf_chk@plt>
   1eb58:	add	sp, sp, #32
   1eb5c:	pop	{r4, r5, r6, pc}
   1eb60:	mov	r2, #5
   1eb64:	ldr	r1, [pc, #480]	; 1ed4c <__assert_fail@plt+0xda48>
   1eb68:	mov	r0, #0
   1eb6c:	bl	110f4 <dcgettext@plt>
   1eb70:	ldr	r3, [r4, #16]
   1eb74:	mov	r2, r0
   1eb78:	mov	r1, #1
   1eb7c:	mov	r0, r5
   1eb80:	str	r3, [sp, #12]
   1eb84:	ldr	r3, [r4, #12]
   1eb88:	str	r3, [sp, #8]
   1eb8c:	ldr	r3, [r4, #8]
   1eb90:	str	r3, [sp, #4]
   1eb94:	ldr	r3, [r4, #4]
   1eb98:	str	r3, [sp]
   1eb9c:	ldr	r3, [r4]
   1eba0:	bl	11238 <__fprintf_chk@plt>
   1eba4:	b	1eb58 <__assert_fail@plt+0xd854>
   1eba8:	mov	r2, #5
   1ebac:	ldr	r1, [pc, #412]	; 1ed50 <__assert_fail@plt+0xda4c>
   1ebb0:	mov	r0, #0
   1ebb4:	bl	110f4 <dcgettext@plt>
   1ebb8:	ldr	r3, [r4, #20]
   1ebbc:	mov	r2, r0
   1ebc0:	mov	r1, #1
   1ebc4:	mov	r0, r5
   1ebc8:	str	r3, [sp, #16]
   1ebcc:	ldr	r3, [r4, #16]
   1ebd0:	str	r3, [sp, #12]
   1ebd4:	ldr	r3, [r4, #12]
   1ebd8:	str	r3, [sp, #8]
   1ebdc:	ldr	r3, [r4, #8]
   1ebe0:	str	r3, [sp, #4]
   1ebe4:	ldr	r3, [r4, #4]
   1ebe8:	str	r3, [sp]
   1ebec:	ldr	r3, [r4]
   1ebf0:	bl	11238 <__fprintf_chk@plt>
   1ebf4:	b	1eb58 <__assert_fail@plt+0xd854>
   1ebf8:	mov	r2, #5
   1ebfc:	ldr	r1, [pc, #336]	; 1ed54 <__assert_fail@plt+0xda50>
   1ec00:	mov	r0, #0
   1ec04:	bl	110f4 <dcgettext@plt>
   1ec08:	ldr	r3, [r4, #24]
   1ec0c:	mov	r2, r0
   1ec10:	mov	r1, #1
   1ec14:	mov	r0, r5
   1ec18:	str	r3, [sp, #20]
   1ec1c:	ldr	r3, [r4, #20]
   1ec20:	str	r3, [sp, #16]
   1ec24:	ldr	r3, [r4, #16]
   1ec28:	str	r3, [sp, #12]
   1ec2c:	ldr	r3, [r4, #12]
   1ec30:	str	r3, [sp, #8]
   1ec34:	ldr	r3, [r4, #8]
   1ec38:	str	r3, [sp, #4]
   1ec3c:	ldr	r3, [r4, #4]
   1ec40:	str	r3, [sp]
   1ec44:	ldr	r3, [r4]
   1ec48:	bl	11238 <__fprintf_chk@plt>
   1ec4c:	b	1eb58 <__assert_fail@plt+0xd854>
   1ec50:	mov	r2, #5
   1ec54:	ldr	r1, [pc, #252]	; 1ed58 <__assert_fail@plt+0xda54>
   1ec58:	mov	r0, #0
   1ec5c:	bl	110f4 <dcgettext@plt>
   1ec60:	ldr	r3, [r4, #28]
   1ec64:	mov	r2, r0
   1ec68:	mov	r1, #1
   1ec6c:	mov	r0, r5
   1ec70:	str	r3, [sp, #24]
   1ec74:	ldr	r3, [r4, #24]
   1ec78:	str	r3, [sp, #20]
   1ec7c:	ldr	r3, [r4, #20]
   1ec80:	str	r3, [sp, #16]
   1ec84:	ldr	r3, [r4, #16]
   1ec88:	str	r3, [sp, #12]
   1ec8c:	ldr	r3, [r4, #12]
   1ec90:	str	r3, [sp, #8]
   1ec94:	ldr	r3, [r4, #8]
   1ec98:	str	r3, [sp, #4]
   1ec9c:	ldr	r3, [r4, #4]
   1eca0:	str	r3, [sp]
   1eca4:	ldr	r3, [r4]
   1eca8:	bl	11238 <__fprintf_chk@plt>
   1ecac:	b	1eb58 <__assert_fail@plt+0xd854>
   1ecb0:	ldr	r1, [pc, #164]	; 1ed5c <__assert_fail@plt+0xda58>
   1ecb4:	mov	r2, #5
   1ecb8:	mov	r0, #0
   1ecbc:	bl	110f4 <dcgettext@plt>
   1ecc0:	ldr	r3, [r4, #32]
   1ecc4:	mov	r2, r0
   1ecc8:	mov	r1, #1
   1eccc:	mov	r0, r5
   1ecd0:	str	r3, [sp, #28]
   1ecd4:	ldr	r3, [r4, #28]
   1ecd8:	str	r3, [sp, #24]
   1ecdc:	ldr	r3, [r4, #24]
   1ece0:	str	r3, [sp, #20]
   1ece4:	ldr	r3, [r4, #20]
   1ece8:	str	r3, [sp, #16]
   1ecec:	ldr	r3, [r4, #16]
   1ecf0:	str	r3, [sp, #12]
   1ecf4:	ldr	r3, [r4, #12]
   1ecf8:	str	r3, [sp, #8]
   1ecfc:	ldr	r3, [r4, #8]
   1ed00:	str	r3, [sp, #4]
   1ed04:	ldr	r3, [r4, #4]
   1ed08:	str	r3, [sp]
   1ed0c:	ldr	r3, [r4]
   1ed10:	bl	11238 <__fprintf_chk@plt>
   1ed14:	b	1eb58 <__assert_fail@plt+0xd854>
   1ed18:	mov	r2, #5
   1ed1c:	ldr	r1, [pc, #60]	; 1ed60 <__assert_fail@plt+0xda5c>
   1ed20:	b	1ecb8 <__assert_fail@plt+0xd9b4>
   1ed24:	andeq	r0, r2, r1, ror #22
   1ed28:	andeq	r0, r2, r4, ror fp
   1ed2c:	andeq	r0, r2, r2, asr #28
   1ed30:	andeq	r0, r2, r8, ror fp
   1ed34:	andeq	r0, r2, r3, lsr #24
   1ed38:	andeq	r0, r2, sp, ror #22
   1ed3c:	andeq	r0, r2, r5, asr #24
   1ed40:	andeq	r0, r2, r5, asr ip
   1ed44:	andeq	r0, r2, ip, ror #24
   1ed48:	andeq	r0, r2, r8, lsl #25
   1ed4c:	andeq	r0, r2, r8, lsr #25
   1ed50:	andeq	r0, r2, ip, asr #25
   1ed54:	strdeq	r0, [r2], -r4
   1ed58:	andeq	r0, r2, r0, lsr #26
   1ed5c:	andeq	r0, r2, r0, asr sp
   1ed60:	andeq	r0, r2, r4, lsl #27
   1ed64:	push	{r0, r1, r4, lr}
   1ed68:	mov	ip, #0
   1ed6c:	ldr	lr, [sp, #16]
   1ed70:	ldr	r4, [lr, ip, lsl #2]
   1ed74:	cmp	r4, #0
   1ed78:	bne	1ed90 <__assert_fail@plt+0xda8c>
   1ed7c:	str	lr, [sp]
   1ed80:	str	ip, [sp, #4]
   1ed84:	bl	1e99c <__assert_fail@plt+0xd698>
   1ed88:	add	sp, sp, #8
   1ed8c:	pop	{r4, pc}
   1ed90:	add	ip, ip, #1
   1ed94:	b	1ed70 <__assert_fail@plt+0xda6c>
   1ed98:	push	{r4, r5, r6, lr}
   1ed9c:	sub	sp, sp, #48	; 0x30
   1eda0:	mov	ip, #0
   1eda4:	add	lr, sp, #8
   1eda8:	mov	r5, lr
   1edac:	ldr	r6, [sp, #64]	; 0x40
   1edb0:	ldr	r4, [r6, ip, lsl #2]
   1edb4:	cmp	r4, #0
   1edb8:	str	r4, [lr], #4
   1edbc:	beq	1edcc <__assert_fail@plt+0xdac8>
   1edc0:	add	ip, ip, #1
   1edc4:	cmp	ip, #10
   1edc8:	bne	1edb0 <__assert_fail@plt+0xdaac>
   1edcc:	stm	sp, {r5, ip}
   1edd0:	bl	1e99c <__assert_fail@plt+0xd698>
   1edd4:	add	sp, sp, #48	; 0x30
   1edd8:	pop	{r4, r5, r6, pc}
   1eddc:	push	{r3}		; (str r3, [sp, #-4]!)
   1ede0:	push	{r0, r1, r2, r3, lr}
   1ede4:	add	r3, sp, #24
   1ede8:	str	r3, [sp]
   1edec:	str	r3, [sp, #12]
   1edf0:	ldr	r3, [sp, #20]
   1edf4:	bl	1ed98 <__assert_fail@plt+0xda94>
   1edf8:	add	sp, sp, #16
   1edfc:	pop	{lr}		; (ldr lr, [sp], #4)
   1ee00:	add	sp, sp, #4
   1ee04:	bx	lr
   1ee08:	ldr	r3, [pc, #116]	; 1ee84 <__assert_fail@plt+0xdb80>
   1ee0c:	mov	r0, #10
   1ee10:	push	{r4, lr}
   1ee14:	ldr	r1, [r3]
   1ee18:	bl	110dc <fputc_unlocked@plt>
   1ee1c:	mov	r2, #5
   1ee20:	ldr	r1, [pc, #96]	; 1ee88 <__assert_fail@plt+0xdb84>
   1ee24:	mov	r0, #0
   1ee28:	bl	110f4 <dcgettext@plt>
   1ee2c:	mov	r1, r0
   1ee30:	ldr	r2, [pc, #84]	; 1ee8c <__assert_fail@plt+0xdb88>
   1ee34:	mov	r0, #1
   1ee38:	bl	11220 <__printf_chk@plt>
   1ee3c:	mov	r2, #5
   1ee40:	ldr	r1, [pc, #72]	; 1ee90 <__assert_fail@plt+0xdb8c>
   1ee44:	mov	r0, #0
   1ee48:	bl	110f4 <dcgettext@plt>
   1ee4c:	mov	r1, r0
   1ee50:	ldr	r3, [pc, #60]	; 1ee94 <__assert_fail@plt+0xdb90>
   1ee54:	mov	r0, #1
   1ee58:	ldr	r2, [pc, #56]	; 1ee98 <__assert_fail@plt+0xdb94>
   1ee5c:	bl	11220 <__printf_chk@plt>
   1ee60:	mov	r2, #5
   1ee64:	ldr	r1, [pc, #48]	; 1ee9c <__assert_fail@plt+0xdb98>
   1ee68:	mov	r0, #0
   1ee6c:	bl	110f4 <dcgettext@plt>
   1ee70:	mov	r1, r0
   1ee74:	ldr	r2, [pc, #36]	; 1eea0 <__assert_fail@plt+0xdb9c>
   1ee78:	mov	r0, #1
   1ee7c:	pop	{r4, lr}
   1ee80:	b	11220 <__printf_chk@plt>
   1ee84:	ldrdeq	r1, [r3], -ip
   1ee88:	andeq	r0, r2, r0, asr #27
   1ee8c:	ldrdeq	r0, [r2], -r4
   1ee90:	andeq	r0, r2, sl, ror #27
   1ee94:	andeq	r0, r2, lr, asr #9
   1ee98:	strdeq	r0, [r2], -r6
   1ee9c:	strdeq	r0, [r2], -lr
   1eea0:	andeq	r0, r2, r5, lsr #28
   1eea4:	push	{r4, lr}
   1eea8:	bl	1f810 <__assert_fail@plt+0xe50c>
   1eeac:	cmp	r0, #0
   1eeb0:	popne	{r4, pc}
   1eeb4:	bl	1f15c <__assert_fail@plt+0xde58>
   1eeb8:	push	{r4, lr}
   1eebc:	bl	1f810 <__assert_fail@plt+0xe50c>
   1eec0:	cmp	r0, #0
   1eec4:	popne	{r4, pc}
   1eec8:	bl	1f15c <__assert_fail@plt+0xde58>
   1eecc:	b	1eea4 <__assert_fail@plt+0xdba0>
   1eed0:	push	{r4, r5, r6, lr}
   1eed4:	mov	r5, r0
   1eed8:	mov	r4, r1
   1eedc:	bl	1f83c <__assert_fail@plt+0xe538>
   1eee0:	cmp	r0, #0
   1eee4:	popne	{r4, r5, r6, pc}
   1eee8:	adds	r4, r4, #0
   1eeec:	movne	r4, #1
   1eef0:	cmp	r5, #0
   1eef4:	moveq	r4, #1
   1eef8:	cmp	r4, #0
   1eefc:	popeq	{r4, r5, r6, pc}
   1ef00:	bl	1f15c <__assert_fail@plt+0xde58>
   1ef04:	push	{r4, lr}
   1ef08:	bl	1f9e4 <__assert_fail@plt+0xe6e0>
   1ef0c:	cmp	r0, #0
   1ef10:	popne	{r4, pc}
   1ef14:	bl	1f15c <__assert_fail@plt+0xde58>
   1ef18:	push	{r4, r5, r6, lr}
   1ef1c:	mov	r6, r0
   1ef20:	mov	r5, r1
   1ef24:	mov	r4, r2
   1ef28:	bl	1fa8c <__assert_fail@plt+0xe788>
   1ef2c:	cmp	r0, #0
   1ef30:	popne	{r4, r5, r6, pc}
   1ef34:	cmp	r6, #0
   1ef38:	beq	1ef48 <__assert_fail@plt+0xdc44>
   1ef3c:	cmp	r5, #0
   1ef40:	cmpne	r4, #0
   1ef44:	popeq	{r4, r5, r6, pc}
   1ef48:	bl	1f15c <__assert_fail@plt+0xde58>
   1ef4c:	b	1ef18 <__assert_fail@plt+0xdc14>
   1ef50:	push	{r4, lr}
   1ef54:	bl	1f9f4 <__assert_fail@plt+0xe6f0>
   1ef58:	cmp	r0, #0
   1ef5c:	popne	{r4, pc}
   1ef60:	bl	1f15c <__assert_fail@plt+0xde58>
   1ef64:	mov	r2, r1
   1ef68:	mov	r1, r0
   1ef6c:	mov	r0, #0
   1ef70:	b	1ef18 <__assert_fail@plt+0xdc14>
   1ef74:	mov	r2, r1
   1ef78:	mov	r1, r0
   1ef7c:	mov	r0, #0
   1ef80:	b	1ef50 <__assert_fail@plt+0xdc4c>
   1ef84:	cmp	r0, #0
   1ef88:	push	{r4, r5, r6, lr}
   1ef8c:	mov	r5, r1
   1ef90:	ldr	r4, [r1]
   1ef94:	bne	1efc0 <__assert_fail@plt+0xdcbc>
   1ef98:	cmp	r4, #0
   1ef9c:	bne	1efb0 <__assert_fail@plt+0xdcac>
   1efa0:	mov	r4, #64	; 0x40
   1efa4:	udiv	r4, r4, r2
   1efa8:	cmp	r2, #64	; 0x40
   1efac:	addhi	r4, r4, #1
   1efb0:	mov	r1, r4
   1efb4:	bl	1ef18 <__assert_fail@plt+0xdc14>
   1efb8:	str	r4, [r5]
   1efbc:	pop	{r4, r5, r6, pc}
   1efc0:	lsr	r3, r4, #1
   1efc4:	add	r3, r3, #1
   1efc8:	adds	r4, r4, r3
   1efcc:	bcc	1efb0 <__assert_fail@plt+0xdcac>
   1efd0:	bl	1f15c <__assert_fail@plt+0xde58>
   1efd4:	mov	r2, #1
   1efd8:	b	1ef84 <__assert_fail@plt+0xdc80>
   1efdc:	ldr	ip, [r1]
   1efe0:	push	{r4, r5, r6, r7, r8, lr}
   1efe4:	mov	r5, r1
   1efe8:	mvn	r8, r3
   1efec:	lsr	r8, r8, #31
   1eff0:	ldr	lr, [sp, #24]
   1eff4:	asr	r1, ip, #1
   1eff8:	adds	r4, ip, r1
   1effc:	mvnvs	r4, #-2147483648	; 0x80000000
   1f000:	cmp	r3, r4
   1f004:	movge	r1, #0
   1f008:	andlt	r1, r8, #1
   1f00c:	cmp	r1, #0
   1f010:	movne	r4, r3
   1f014:	smull	r6, r7, r4, lr
   1f018:	cmp	r7, r6, asr #31
   1f01c:	bne	1f034 <__assert_fail@plt+0xdd30>
   1f020:	cmp	r6, #63	; 0x3f
   1f024:	mov	r1, r6
   1f028:	bgt	1f044 <__assert_fail@plt+0xdd40>
   1f02c:	mov	r1, #64	; 0x40
   1f030:	b	1f038 <__assert_fail@plt+0xdd34>
   1f034:	mvn	r1, #-2147483648	; 0x80000000
   1f038:	sdiv	r4, r1, lr
   1f03c:	mls	r6, lr, r4, r1
   1f040:	sub	r1, r1, r6
   1f044:	cmp	r0, #0
   1f048:	sub	r6, r4, ip
   1f04c:	streq	r0, [r5]
   1f050:	cmp	r6, r2
   1f054:	bge	1f088 <__assert_fail@plt+0xdd84>
   1f058:	adds	r4, ip, r2
   1f05c:	bvs	1f084 <__assert_fail@plt+0xdd80>
   1f060:	cmp	r4, r3
   1f064:	movle	r3, #0
   1f068:	andgt	r3, r8, #1
   1f06c:	cmp	r3, #0
   1f070:	bne	1f084 <__assert_fail@plt+0xdd80>
   1f074:	smull	r2, r3, r4, lr
   1f078:	cmp	r3, r2, asr #31
   1f07c:	mov	r1, r2
   1f080:	beq	1f088 <__assert_fail@plt+0xdd84>
   1f084:	bl	1f15c <__assert_fail@plt+0xde58>
   1f088:	bl	1eed0 <__assert_fail@plt+0xdbcc>
   1f08c:	str	r4, [r5]
   1f090:	pop	{r4, r5, r6, r7, r8, pc}
   1f094:	push	{r4, lr}
   1f098:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1f09c:	cmp	r0, #0
   1f0a0:	popne	{r4, pc}
   1f0a4:	bl	1f15c <__assert_fail@plt+0xde58>
   1f0a8:	mov	r1, #1
   1f0ac:	b	1f094 <__assert_fail@plt+0xdd90>
   1f0b0:	push	{r4, lr}
   1f0b4:	bl	1f7bc <__assert_fail@plt+0xe4b8>
   1f0b8:	cmp	r0, #0
   1f0bc:	popne	{r4, pc}
   1f0c0:	bl	1f15c <__assert_fail@plt+0xde58>
   1f0c4:	mov	r1, #1
   1f0c8:	b	1f0b0 <__assert_fail@plt+0xddac>
   1f0cc:	push	{r4, r5, r6, lr}
   1f0d0:	mov	r4, r1
   1f0d4:	mov	r5, r0
   1f0d8:	mov	r0, r1
   1f0dc:	bl	1eea4 <__assert_fail@plt+0xdba0>
   1f0e0:	mov	r2, r4
   1f0e4:	mov	r1, r5
   1f0e8:	pop	{r4, r5, r6, lr}
   1f0ec:	b	1107c <memcpy@plt>
   1f0f0:	push	{r4, r5, r6, lr}
   1f0f4:	mov	r4, r1
   1f0f8:	mov	r5, r0
   1f0fc:	mov	r0, r1
   1f100:	bl	1eeb8 <__assert_fail@plt+0xdbb4>
   1f104:	mov	r2, r4
   1f108:	mov	r1, r5
   1f10c:	pop	{r4, r5, r6, lr}
   1f110:	b	1107c <memcpy@plt>
   1f114:	push	{r4, r5, r6, lr}
   1f118:	mov	r5, r0
   1f11c:	add	r0, r1, #1
   1f120:	mov	r4, r1
   1f124:	bl	1eeb8 <__assert_fail@plt+0xdbb4>
   1f128:	mov	r2, #0
   1f12c:	mov	r1, r5
   1f130:	strb	r2, [r0, r4]
   1f134:	mov	r2, r4
   1f138:	pop	{r4, r5, r6, lr}
   1f13c:	b	1107c <memcpy@plt>
   1f140:	push	{r4, lr}
   1f144:	mov	r4, r0
   1f148:	bl	111cc <strlen@plt>
   1f14c:	add	r1, r0, #1
   1f150:	mov	r0, r4
   1f154:	pop	{r4, lr}
   1f158:	b	1f0cc <__assert_fail@plt+0xddc8>
   1f15c:	ldr	r3, [pc, #44]	; 1f190 <__assert_fail@plt+0xde8c>
   1f160:	mov	r2, #5
   1f164:	mov	r0, #0
   1f168:	push	{r4, lr}
   1f16c:	ldr	r1, [pc, #32]	; 1f194 <__assert_fail@plt+0xde90>
   1f170:	ldr	r4, [r3]
   1f174:	bl	110f4 <dcgettext@plt>
   1f178:	mov	r3, r0
   1f17c:	ldr	r2, [pc, #20]	; 1f198 <__assert_fail@plt+0xde94>
   1f180:	mov	r1, #0
   1f184:	mov	r0, r4
   1f188:	bl	1116c <error@plt>
   1f18c:	bl	112e0 <abort@plt>
   1f190:	andeq	r1, r3, r8, ror r1
   1f194:	andeq	r0, r2, r1, ror lr
   1f198:	ldrdeq	r0, [r2], -r5
   1f19c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f1a0:	sub	sp, sp, #20
   1f1a4:	mov	r9, r3
   1f1a8:	mov	r8, r2
   1f1ac:	mov	r2, r1
   1f1b0:	mov	r1, #0
   1f1b4:	mov	r7, r0
   1f1b8:	ldr	r3, [sp, #56]	; 0x38
   1f1bc:	ldr	r6, [sp, #64]	; 0x40
   1f1c0:	str	r3, [sp]
   1f1c4:	add	r3, sp, #8
   1f1c8:	bl	1f36c <__assert_fail@plt+0xe068>
   1f1cc:	subs	r4, r0, #0
   1f1d0:	bne	1f26c <__assert_fail@plt+0xdf68>
   1f1d4:	ldrd	r4, [sp, #8]
   1f1d8:	cmp	r4, r8
   1f1dc:	sbcs	r3, r5, r9
   1f1e0:	ldrd	r2, [sp, #48]	; 0x30
   1f1e4:	movlt	r1, #1
   1f1e8:	movge	r1, #0
   1f1ec:	cmp	r2, r4
   1f1f0:	sbcs	r3, r3, r5
   1f1f4:	movge	r3, r1
   1f1f8:	orrlt	r3, r1, #1
   1f1fc:	cmp	r3, #0
   1f200:	beq	1f28c <__assert_fail@plt+0xdf88>
   1f204:	bl	111e4 <__errno_location@plt>
   1f208:	cmp	r4, #1073741824	; 0x40000000
   1f20c:	sbcs	r3, r5, #0
   1f210:	mov	r3, #75	; 0x4b
   1f214:	blt	1f254 <__assert_fail@plt+0xdf50>
   1f218:	str	r3, [r0]
   1f21c:	cmp	r6, #0
   1f220:	moveq	r6, #1
   1f224:	bl	111e4 <__errno_location@plt>
   1f228:	ldr	r4, [r0]
   1f22c:	mov	r0, r7
   1f230:	cmp	r4, #22
   1f234:	moveq	r4, #0
   1f238:	bl	13b7c <__assert_fail@plt+0x2878>
   1f23c:	ldr	r2, [pc, #88]	; 1f29c <__assert_fail@plt+0xdf98>
   1f240:	mov	r1, r4
   1f244:	str	r0, [sp]
   1f248:	mov	r0, r6
   1f24c:	ldr	r3, [sp, #60]	; 0x3c
   1f250:	bl	1116c <error@plt>
   1f254:	mov	r8, #-1073741824	; 0xc0000000
   1f258:	mvn	r9, #0
   1f25c:	cmp	r4, r8
   1f260:	sbcs	r2, r5, r9
   1f264:	movge	r3, #34	; 0x22
   1f268:	b	1f218 <__assert_fail@plt+0xdf14>
   1f26c:	bl	111e4 <__errno_location@plt>
   1f270:	cmp	r4, #1
   1f274:	moveq	r3, #75	; 0x4b
   1f278:	beq	1f218 <__assert_fail@plt+0xdf14>
   1f27c:	cmp	r4, #3
   1f280:	bne	1f21c <__assert_fail@plt+0xdf18>
   1f284:	mov	r3, #0
   1f288:	b	1f218 <__assert_fail@plt+0xdf14>
   1f28c:	mov	r0, r4
   1f290:	mov	r1, r5
   1f294:	add	sp, sp, #20
   1f298:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f29c:	andeq	r0, r2, r2, lsr r8
   1f2a0:	mov	r1, #10
   1f2a4:	b	1f19c <__assert_fail@plt+0xde98>
   1f2a8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2ac:	mov	r3, #0
   1f2b0:	asr	r5, r1, #31
   1f2b4:	mov	r4, r1
   1f2b8:	mov	ip, r3
   1f2bc:	strd	r4, [sp]
   1f2c0:	subs	r2, r2, #1
   1f2c4:	bcs	1f2d4 <__assert_fail@plt+0xdfd0>
   1f2c8:	mov	r0, r3
   1f2cc:	add	sp, sp, #12
   1f2d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2d4:	ldrd	r4, [r0]
   1f2d8:	mov	lr, #0
   1f2dc:	cmp	r5, r4, asr #31
   1f2e0:	smulleq	r8, r9, r4, r1
   1f2e4:	moveq	r6, r8
   1f2e8:	moveq	sl, r9
   1f2ec:	beq	1f334 <__assert_fail@plt+0xe030>
   1f2f0:	cmp	r5, #0
   1f2f4:	umull	r8, r9, r4, r1
   1f2f8:	umull	r6, r7, r1, r5
   1f2fc:	bge	1f308 <__assert_fail@plt+0xe004>
   1f300:	subs	r6, r6, ip
   1f304:	sbc	r7, r7, r1
   1f308:	adds	sl, r6, r9
   1f30c:	mov	fp, #0
   1f310:	adc	fp, r7, fp
   1f314:	cmp	fp, sl, asr #31
   1f318:	ldrne	lr, [sp, #4]
   1f31c:	moveq	r6, r8
   1f320:	umullne	r6, r7, r4, r1
   1f324:	mulne	sl, r4, lr
   1f328:	movne	lr, #1
   1f32c:	mlane	sl, r1, r5, sl
   1f330:	addne	sl, sl, r7
   1f334:	cmp	lr, #0
   1f338:	beq	1f364 <__assert_fail@plt+0xe060>
   1f33c:	cmp	r4, #0
   1f340:	sbcs	lr, r5, #0
   1f344:	mov	lr, #1
   1f348:	mvnge	r4, #0
   1f34c:	mvnge	r5, #-2147483648	; 0x80000000
   1f350:	movlt	r4, #0
   1f354:	movlt	r5, #-2147483648	; 0x80000000
   1f358:	strd	r4, [r0]
   1f35c:	orr	r3, r3, lr
   1f360:	b	1f2c0 <__assert_fail@plt+0xdfbc>
   1f364:	stm	r0, {r6, sl}
   1f368:	b	1f35c <__assert_fail@plt+0xe058>
   1f36c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f370:	cmp	r2, #36	; 0x24
   1f374:	sub	sp, sp, #20
   1f378:	ldr	r5, [sp, #56]	; 0x38
   1f37c:	bls	1f394 <__assert_fail@plt+0xe090>
   1f380:	ldr	r3, [pc, #1064]	; 1f7b0 <__assert_fail@plt+0xe4ac>
   1f384:	mov	r2, #85	; 0x55
   1f388:	ldr	r1, [pc, #1060]	; 1f7b4 <__assert_fail@plt+0xe4b0>
   1f38c:	ldr	r0, [pc, #1060]	; 1f7b8 <__assert_fail@plt+0xe4b4>
   1f390:	bl	11304 <__assert_fail@plt>
   1f394:	cmp	r1, #0
   1f398:	mov	r6, r1
   1f39c:	mov	r8, r0
   1f3a0:	addeq	r6, sp, #4
   1f3a4:	mov	r9, r2
   1f3a8:	mov	r7, r3
   1f3ac:	bl	111e4 <__errno_location@plt>
   1f3b0:	mov	sl, r0
   1f3b4:	mov	r4, #0
   1f3b8:	mov	r2, r9
   1f3bc:	mov	r1, r6
   1f3c0:	mov	r0, r8
   1f3c4:	str	r4, [sl]
   1f3c8:	bl	11244 <strtoimax@plt>
   1f3cc:	ldr	r9, [r6]
   1f3d0:	strd	r0, [sp, #8]
   1f3d4:	cmp	r9, r8
   1f3d8:	bne	1f414 <__assert_fail@plt+0xe110>
   1f3dc:	cmp	r5, r4
   1f3e0:	beq	1f40c <__assert_fail@plt+0xe108>
   1f3e4:	ldrb	r1, [r8]
   1f3e8:	cmp	r1, r4
   1f3ec:	beq	1f40c <__assert_fail@plt+0xe108>
   1f3f0:	mov	r0, r5
   1f3f4:	bl	111d8 <strchr@plt>
   1f3f8:	cmp	r0, r4
   1f3fc:	movne	r2, #1
   1f400:	movne	r3, #0
   1f404:	strdne	r2, [sp, #8]
   1f408:	bne	1f438 <__assert_fail@plt+0xe134>
   1f40c:	mov	r4, #4
   1f410:	b	1f464 <__assert_fail@plt+0xe160>
   1f414:	ldr	r4, [sl]
   1f418:	cmp	r4, #0
   1f41c:	beq	1f42c <__assert_fail@plt+0xe128>
   1f420:	cmp	r4, #34	; 0x22
   1f424:	bne	1f40c <__assert_fail@plt+0xe108>
   1f428:	mov	r4, #1
   1f42c:	cmp	r5, #0
   1f430:	strdeq	r0, [r7]
   1f434:	beq	1f464 <__assert_fail@plt+0xe160>
   1f438:	ldrb	r8, [r9]
   1f43c:	cmp	r8, #0
   1f440:	beq	1f754 <__assert_fail@plt+0xe450>
   1f444:	mov	r1, r8
   1f448:	mov	r0, r5
   1f44c:	bl	111d8 <strchr@plt>
   1f450:	cmp	r0, #0
   1f454:	bne	1f470 <__assert_fail@plt+0xe16c>
   1f458:	ldrd	r2, [sp, #8]
   1f45c:	orr	r4, r4, #2
   1f460:	strd	r2, [r7]
   1f464:	mov	r0, r4
   1f468:	add	sp, sp, #20
   1f46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f470:	cmp	r8, #84	; 0x54
   1f474:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f478:	bhi	1f4b0 <__assert_fail@plt+0xe1ac>
   1f47c:	cmp	r8, #75	; 0x4b
   1f480:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f484:	bhi	1f4a0 <__assert_fail@plt+0xe19c>
   1f488:	cmp	r8, #69	; 0x45
   1f48c:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f490:	cmp	r8, #71	; 0x47
   1f494:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f498:	mov	r5, #1
   1f49c:	b	1f5c4 <__assert_fail@plt+0xe2c0>
   1f4a0:	cmp	r8, #77	; 0x4d
   1f4a4:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f4a8:	cmp	r8, #80	; 0x50
   1f4ac:	b	1f494 <__assert_fail@plt+0xe190>
   1f4b0:	cmp	r8, #103	; 0x67
   1f4b4:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f4b8:	bhi	1f59c <__assert_fail@plt+0xe298>
   1f4bc:	sub	r3, r8, #89	; 0x59
   1f4c0:	cmp	r3, #1
   1f4c4:	bhi	1f498 <__assert_fail@plt+0xe194>
   1f4c8:	mov	r1, #48	; 0x30
   1f4cc:	mov	r0, r5
   1f4d0:	bl	111d8 <strchr@plt>
   1f4d4:	cmp	r0, #0
   1f4d8:	beq	1f498 <__assert_fail@plt+0xe194>
   1f4dc:	ldrb	r3, [r9, #1]
   1f4e0:	cmp	r3, #68	; 0x44
   1f4e4:	moveq	r5, #2
   1f4e8:	moveq	r1, #1000	; 0x3e8
   1f4ec:	beq	1f50c <__assert_fail@plt+0xe208>
   1f4f0:	cmp	r3, #105	; 0x69
   1f4f4:	beq	1f5b4 <__assert_fail@plt+0xe2b0>
   1f4f8:	cmp	r3, #66	; 0x42
   1f4fc:	moveq	r5, #2
   1f500:	movne	r5, #1
   1f504:	moveq	r1, #1000	; 0x3e8
   1f508:	movne	r1, #1024	; 0x400
   1f50c:	cmp	r8, #89	; 0x59
   1f510:	beq	1f798 <__assert_fail@plt+0xe494>
   1f514:	bhi	1f5ec <__assert_fail@plt+0xe2e8>
   1f518:	cmp	r8, #75	; 0x4b
   1f51c:	beq	1f62c <__assert_fail@plt+0xe328>
   1f520:	bhi	1f5cc <__assert_fail@plt+0xe2c8>
   1f524:	cmp	r8, #69	; 0x45
   1f528:	beq	1f774 <__assert_fail@plt+0xe470>
   1f52c:	cmp	r8, #71	; 0x47
   1f530:	beq	1f780 <__assert_fail@plt+0xe47c>
   1f534:	cmp	r8, #66	; 0x42
   1f538:	bne	1f458 <__assert_fail@plt+0xe154>
   1f53c:	ldrd	r2, [sp, #8]
   1f540:	mov	r0, #0
   1f544:	cmp	r3, r2, asr #31
   1f548:	lsleq	r1, r3, #10
   1f54c:	lsleq	r8, r2, #10
   1f550:	orreq	r1, r1, r2, lsr #22
   1f554:	beq	1f70c <__assert_fail@plt+0xe408>
   1f558:	mov	r1, #1024	; 0x400
   1f55c:	cmp	r3, #0
   1f560:	lsr	sl, r2, #22
   1f564:	lsl	lr, r2, #10
   1f568:	umull	r8, r9, r1, r3
   1f56c:	bge	1f578 <__assert_fail@plt+0xe274>
   1f570:	subs	r8, r8, r0
   1f574:	sbc	r9, r9, r1
   1f578:	adds	r1, r8, sl
   1f57c:	mov	ip, #0
   1f580:	adc	ip, r9, ip
   1f584:	cmp	ip, r1, asr #31
   1f588:	beq	1f708 <__assert_fail@plt+0xe404>
   1f58c:	lsl	r1, r3, #10
   1f590:	lsl	r8, r2, #10
   1f594:	orr	r1, r1, r2, lsr #22
   1f598:	b	1f76c <__assert_fail@plt+0xe468>
   1f59c:	cmp	r8, #109	; 0x6d
   1f5a0:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f5a4:	cmp	r8, #116	; 0x74
   1f5a8:	beq	1f4c8 <__assert_fail@plt+0xe1c4>
   1f5ac:	cmp	r8, #107	; 0x6b
   1f5b0:	b	1f494 <__assert_fail@plt+0xe190>
   1f5b4:	ldrb	r3, [r9, #2]
   1f5b8:	cmp	r3, #66	; 0x42
   1f5bc:	movne	r5, #1
   1f5c0:	moveq	r5, #3
   1f5c4:	mov	r1, #1024	; 0x400
   1f5c8:	b	1f50c <__assert_fail@plt+0xe208>
   1f5cc:	cmp	r8, #80	; 0x50
   1f5d0:	beq	1f788 <__assert_fail@plt+0xe484>
   1f5d4:	cmp	r8, #84	; 0x54
   1f5d8:	beq	1f790 <__assert_fail@plt+0xe48c>
   1f5dc:	cmp	r8, #77	; 0x4d
   1f5e0:	bne	1f458 <__assert_fail@plt+0xe154>
   1f5e4:	mov	r2, #2
   1f5e8:	b	1f778 <__assert_fail@plt+0xe474>
   1f5ec:	cmp	r8, #103	; 0x67
   1f5f0:	beq	1f780 <__assert_fail@plt+0xe47c>
   1f5f4:	bhi	1f618 <__assert_fail@plt+0xe314>
   1f5f8:	cmp	r8, #98	; 0x62
   1f5fc:	beq	1f6b8 <__assert_fail@plt+0xe3b4>
   1f600:	cmp	r8, #99	; 0x63
   1f604:	beq	1f7a8 <__assert_fail@plt+0xe4a4>
   1f608:	cmp	r8, #90	; 0x5a
   1f60c:	bne	1f458 <__assert_fail@plt+0xe154>
   1f610:	mov	r2, #7
   1f614:	b	1f778 <__assert_fail@plt+0xe474>
   1f618:	cmp	r8, #109	; 0x6d
   1f61c:	beq	1f5e4 <__assert_fail@plt+0xe2e0>
   1f620:	bhi	1f634 <__assert_fail@plt+0xe330>
   1f624:	cmp	r8, #107	; 0x6b
   1f628:	bne	1f458 <__assert_fail@plt+0xe154>
   1f62c:	mov	r2, #1
   1f630:	b	1f778 <__assert_fail@plt+0xe474>
   1f634:	cmp	r8, #116	; 0x74
   1f638:	beq	1f790 <__assert_fail@plt+0xe48c>
   1f63c:	cmp	r8, #119	; 0x77
   1f640:	bne	1f458 <__assert_fail@plt+0xe154>
   1f644:	ldrd	r2, [sp, #8]
   1f648:	mov	r0, #0
   1f64c:	adds	ip, r2, r2
   1f650:	adc	r1, r3, r3
   1f654:	cmp	r3, r2, asr #31
   1f658:	beq	1f6a4 <__assert_fail@plt+0xe3a0>
   1f65c:	mov	r9, #0
   1f660:	adds	ip, r2, r2
   1f664:	mov	r1, #2
   1f668:	adc	sl, r9, r9
   1f66c:	cmp	r3, #0
   1f670:	umull	r8, r9, r1, r3
   1f674:	bge	1f684 <__assert_fail@plt+0xe380>
   1f678:	mov	lr, #0
   1f67c:	subs	r8, r8, lr
   1f680:	sbc	r9, r9, r1
   1f684:	adds	r1, r8, sl
   1f688:	mov	lr, #0
   1f68c:	adc	lr, r9, lr
   1f690:	cmp	lr, r1, asr #31
   1f694:	beq	1f6a4 <__assert_fail@plt+0xe3a0>
   1f698:	adds	ip, r2, r2
   1f69c:	mov	r0, #1
   1f6a0:	adc	r1, r3, r3
   1f6a4:	cmp	r0, #0
   1f6a8:	streq	ip, [sp, #8]
   1f6ac:	bne	1f718 <__assert_fail@plt+0xe414>
   1f6b0:	str	r1, [sp, #12]
   1f6b4:	b	1f738 <__assert_fail@plt+0xe434>
   1f6b8:	ldrd	r2, [sp, #8]
   1f6bc:	mov	r0, #0
   1f6c0:	cmp	r3, r2, asr #31
   1f6c4:	lsleq	r1, r3, #9
   1f6c8:	lsleq	r8, r2, #9
   1f6cc:	orreq	r1, r1, r2, lsr #23
   1f6d0:	beq	1f70c <__assert_fail@plt+0xe408>
   1f6d4:	mov	r1, #512	; 0x200
   1f6d8:	cmp	r3, #0
   1f6dc:	lsr	sl, r2, #23
   1f6e0:	lsl	lr, r2, #9
   1f6e4:	umull	r8, r9, r1, r3
   1f6e8:	bge	1f6f4 <__assert_fail@plt+0xe3f0>
   1f6ec:	subs	r8, r8, r0
   1f6f0:	sbc	r9, r9, r1
   1f6f4:	adds	r1, r8, sl
   1f6f8:	mov	ip, #0
   1f6fc:	adc	ip, r9, ip
   1f700:	cmp	ip, r1, asr #31
   1f704:	bne	1f760 <__assert_fail@plt+0xe45c>
   1f708:	mov	r8, lr
   1f70c:	cmp	r0, #0
   1f710:	streq	r8, [sp, #8]
   1f714:	beq	1f6b0 <__assert_fail@plt+0xe3ac>
   1f718:	cmp	r2, #0
   1f71c:	mov	r0, #1
   1f720:	sbcs	r3, r3, #0
   1f724:	mvnge	r2, #0
   1f728:	mvnge	r3, #-2147483648	; 0x80000000
   1f72c:	movlt	r2, #0
   1f730:	movlt	r3, #-2147483648	; 0x80000000
   1f734:	strd	r2, [sp, #8]
   1f738:	ldr	r3, [r6]
   1f73c:	orr	r4, r4, r0
   1f740:	add	r2, r3, r5
   1f744:	str	r2, [r6]
   1f748:	ldrb	r3, [r3, r5]
   1f74c:	cmp	r3, #0
   1f750:	orrne	r4, r4, #2
   1f754:	ldrd	r2, [sp, #8]
   1f758:	strd	r2, [r7]
   1f75c:	b	1f464 <__assert_fail@plt+0xe160>
   1f760:	lsl	r1, r3, #9
   1f764:	lsl	r8, r2, #9
   1f768:	orr	r1, r1, r2, lsr #23
   1f76c:	mov	r0, #1
   1f770:	b	1f70c <__assert_fail@plt+0xe408>
   1f774:	mov	r2, #6
   1f778:	add	r0, sp, #8
   1f77c:	b	1f7a0 <__assert_fail@plt+0xe49c>
   1f780:	mov	r2, #3
   1f784:	b	1f778 <__assert_fail@plt+0xe474>
   1f788:	mov	r2, #5
   1f78c:	b	1f778 <__assert_fail@plt+0xe474>
   1f790:	mov	r2, #4
   1f794:	b	1f778 <__assert_fail@plt+0xe474>
   1f798:	mov	r2, #8
   1f79c:	add	r0, sp, r2
   1f7a0:	bl	1f2a8 <__assert_fail@plt+0xdfa4>
   1f7a4:	b	1f738 <__assert_fail@plt+0xe434>
   1f7a8:	mov	r0, #0
   1f7ac:	b	1f738 <__assert_fail@plt+0xe434>
   1f7b0:	andeq	r0, r2, r2, lsl #29
   1f7b4:	andeq	r0, r2, sp, lsl #29
   1f7b8:	muleq	r2, fp, lr
   1f7bc:	cmp	r1, #0
   1f7c0:	cmpne	r0, #0
   1f7c4:	beq	1f7fc <__assert_fail@plt+0xe4f8>
   1f7c8:	push	{r4, r5, r6, lr}
   1f7cc:	umull	r4, r5, r0, r1
   1f7d0:	adds	r3, r5, #0
   1f7d4:	movne	r3, #1
   1f7d8:	cmp	r4, #0
   1f7dc:	blt	1f7e8 <__assert_fail@plt+0xe4e4>
   1f7e0:	cmp	r3, #0
   1f7e4:	beq	1f808 <__assert_fail@plt+0xe504>
   1f7e8:	bl	111e4 <__errno_location@plt>
   1f7ec:	mov	r3, #12
   1f7f0:	str	r3, [r0]
   1f7f4:	mov	r0, #0
   1f7f8:	pop	{r4, r5, r6, pc}
   1f7fc:	mov	r1, #1
   1f800:	mov	r0, r1
   1f804:	b	10fe0 <calloc@plt>
   1f808:	pop	{r4, r5, r6, lr}
   1f80c:	b	1f804 <__assert_fail@plt+0xe500>
   1f810:	cmp	r0, #0
   1f814:	beq	1f834 <__assert_fail@plt+0xe530>
   1f818:	bge	1f838 <__assert_fail@plt+0xe534>
   1f81c:	push	{r4, lr}
   1f820:	bl	111e4 <__errno_location@plt>
   1f824:	mov	r3, #12
   1f828:	str	r3, [r0]
   1f82c:	mov	r0, #0
   1f830:	pop	{r4, pc}
   1f834:	mov	r0, #1
   1f838:	b	11178 <malloc@plt>
   1f83c:	cmp	r0, #0
   1f840:	bne	1f84c <__assert_fail@plt+0xe548>
   1f844:	mov	r0, r1
   1f848:	b	1f810 <__assert_fail@plt+0xe50c>
   1f84c:	cmp	r1, #0
   1f850:	push	{r4, lr}
   1f854:	bne	1f864 <__assert_fail@plt+0xe560>
   1f858:	bl	1f990 <__assert_fail@plt+0xe68c>
   1f85c:	mov	r0, #0
   1f860:	pop	{r4, pc}
   1f864:	blt	1f870 <__assert_fail@plt+0xe56c>
   1f868:	pop	{r4, lr}
   1f86c:	b	11100 <realloc@plt>
   1f870:	bl	111e4 <__errno_location@plt>
   1f874:	mov	r3, #12
   1f878:	str	r3, [r0]
   1f87c:	b	1f85c <__assert_fail@plt+0xe558>
   1f880:	push	{r4, r5, r6, lr}
   1f884:	mov	r4, r0
   1f888:	bl	11148 <__fpending@plt>
   1f88c:	mov	r5, r0
   1f890:	mov	r0, r4
   1f894:	bl	11154 <ferror_unlocked@plt>
   1f898:	mov	r6, r0
   1f89c:	mov	r0, r4
   1f8a0:	bl	122f8 <__assert_fail@plt+0xff4>
   1f8a4:	cmp	r6, #0
   1f8a8:	mov	r4, r0
   1f8ac:	bne	1f8d8 <__assert_fail@plt+0xe5d4>
   1f8b0:	cmp	r0, #0
   1f8b4:	beq	1f8d0 <__assert_fail@plt+0xe5cc>
   1f8b8:	cmp	r5, #0
   1f8bc:	bne	1f8e8 <__assert_fail@plt+0xe5e4>
   1f8c0:	bl	111e4 <__errno_location@plt>
   1f8c4:	ldr	r4, [r0]
   1f8c8:	subs	r4, r4, #9
   1f8cc:	mvnne	r4, #0
   1f8d0:	mov	r0, r4
   1f8d4:	pop	{r4, r5, r6, pc}
   1f8d8:	cmp	r0, #0
   1f8dc:	bne	1f8e8 <__assert_fail@plt+0xe5e4>
   1f8e0:	bl	111e4 <__errno_location@plt>
   1f8e4:	str	r4, [r0]
   1f8e8:	mvn	r4, #0
   1f8ec:	b	1f8d0 <__assert_fail@plt+0xe5cc>
   1f8f0:	ldr	ip, [r0, #4]
   1f8f4:	cmp	ip, r1
   1f8f8:	bcc	1f908 <__assert_fail@plt+0xe604>
   1f8fc:	str	r1, [r0]
   1f900:	mov	r0, #1
   1f904:	bx	lr
   1f908:	push	{r4, r5, r6, r7, r8, lr}
   1f90c:	umull	r6, r7, r1, r3
   1f910:	mov	r8, r3
   1f914:	mov	r5, r1
   1f918:	mov	r4, r0
   1f91c:	cmp	r7, #0
   1f920:	bne	1f968 <__assert_fail@plt+0xe664>
   1f924:	ldr	r0, [r0, #8]
   1f928:	cmp	r0, r2
   1f92c:	bne	1f97c <__assert_fail@plt+0xe678>
   1f930:	mov	r0, r6
   1f934:	bl	1f810 <__assert_fail@plt+0xe50c>
   1f938:	subs	r6, r0, #0
   1f93c:	beq	1f974 <__assert_fail@plt+0xe670>
   1f940:	ldr	r1, [r4, #8]
   1f944:	cmp	r1, #0
   1f948:	beq	1f958 <__assert_fail@plt+0xe654>
   1f94c:	ldr	r2, [r4]
   1f950:	mul	r2, r2, r8
   1f954:	bl	1107c <memcpy@plt>
   1f958:	mov	r0, #1
   1f95c:	str	r5, [r4]
   1f960:	stmib	r4, {r5, r6}
   1f964:	pop	{r4, r5, r6, r7, r8, pc}
   1f968:	bl	111e4 <__errno_location@plt>
   1f96c:	mov	r3, #12
   1f970:	str	r3, [r0]
   1f974:	mov	r0, #0
   1f978:	pop	{r4, r5, r6, r7, r8, pc}
   1f97c:	mov	r1, r6
   1f980:	bl	1f83c <__assert_fail@plt+0xe538>
   1f984:	subs	r6, r0, #0
   1f988:	bne	1f958 <__assert_fail@plt+0xe654>
   1f98c:	b	1f974 <__assert_fail@plt+0xe670>
   1f990:	push	{r0, r1, r2, r4, r5, lr}
   1f994:	mov	r5, r0
   1f998:	bl	111e4 <__errno_location@plt>
   1f99c:	mov	r4, r0
   1f9a0:	mov	r0, r5
   1f9a4:	ldr	r3, [r4]
   1f9a8:	str	r3, [sp]
   1f9ac:	str	r3, [sp, #4]
   1f9b0:	mov	r3, #0
   1f9b4:	str	r3, [r4]
   1f9b8:	bl	11058 <free@plt>
   1f9bc:	ldr	r3, [r4]
   1f9c0:	add	r2, sp, #8
   1f9c4:	clz	r3, r3
   1f9c8:	lsr	r3, r3, #5
   1f9cc:	add	r3, r2, r3, lsl #2
   1f9d0:	ldr	r3, [r3, #-8]
   1f9d4:	str	r3, [r4]
   1f9d8:	add	sp, sp, #12
   1f9dc:	pop	{r4, r5, pc}
   1f9e0:	b	1f810 <__assert_fail@plt+0xe50c>
   1f9e4:	cmp	r1, #0
   1f9e8:	orreq	r1, r1, #1
   1f9ec:	b	1f83c <__assert_fail@plt+0xe538>
   1f9f0:	b	1f7bc <__assert_fail@plt+0xe4b8>
   1f9f4:	cmp	r2, #0
   1f9f8:	cmpne	r1, #0
   1f9fc:	moveq	r2, #1
   1fa00:	moveq	r1, r2
   1fa04:	b	1fa8c <__assert_fail@plt+0xe788>
   1fa08:	push	{r4, lr}
   1fa0c:	mov	r0, #14
   1fa10:	bl	1128c <nl_langinfo@plt>
   1fa14:	cmp	r0, #0
   1fa18:	beq	1fa30 <__assert_fail@plt+0xe72c>
   1fa1c:	ldrb	r2, [r0]
   1fa20:	ldr	r3, [pc, #16]	; 1fa38 <__assert_fail@plt+0xe734>
   1fa24:	cmp	r2, #0
   1fa28:	moveq	r0, r3
   1fa2c:	pop	{r4, pc}
   1fa30:	ldr	r0, [pc]	; 1fa38 <__assert_fail@plt+0xe734>
   1fa34:	pop	{r4, pc}
   1fa38:	andeq	r0, r2, r1, asr #29
   1fa3c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fa40:	subs	r5, r0, #0
   1fa44:	mov	r7, r2
   1fa48:	addeq	r5, sp, #4
   1fa4c:	mov	r6, r1
   1fa50:	mov	r0, r5
   1fa54:	bl	11160 <mbrtowc@plt>
   1fa58:	cmp	r7, #0
   1fa5c:	cmnne	r0, #3
   1fa60:	mov	r4, r0
   1fa64:	bls	1fa80 <__assert_fail@plt+0xe77c>
   1fa68:	mov	r0, #0
   1fa6c:	bl	1fab8 <__assert_fail@plt+0xe7b4>
   1fa70:	cmp	r0, #0
   1fa74:	ldrbeq	r3, [r6]
   1fa78:	moveq	r4, #1
   1fa7c:	streq	r3, [r5]
   1fa80:	mov	r0, r4
   1fa84:	add	sp, sp, #12
   1fa88:	pop	{r4, r5, r6, r7, pc}
   1fa8c:	umull	r2, r3, r1, r2
   1fa90:	cmp	r3, #0
   1fa94:	bne	1faa0 <__assert_fail@plt+0xe79c>
   1fa98:	mov	r1, r2
   1fa9c:	b	1f83c <__assert_fail@plt+0xe538>
   1faa0:	push	{r4, lr}
   1faa4:	bl	111e4 <__errno_location@plt>
   1faa8:	mov	r3, #12
   1faac:	str	r3, [r0]
   1fab0:	mov	r0, #0
   1fab4:	pop	{r4, pc}
   1fab8:	push	{lr}		; (str lr, [sp, #-4]!)
   1fabc:	sub	sp, sp, #268	; 0x10c
   1fac0:	movw	r2, #257	; 0x101
   1fac4:	add	r1, sp, #4
   1fac8:	bl	1fb14 <__assert_fail@plt+0xe810>
   1facc:	cmp	r0, #0
   1fad0:	movne	r0, #0
   1fad4:	bne	1fb04 <__assert_fail@plt+0xe800>
   1fad8:	ldr	r1, [pc, #44]	; 1fb0c <__assert_fail@plt+0xe808>
   1fadc:	add	r0, sp, #4
   1fae0:	bl	1101c <strcmp@plt>
   1fae4:	cmp	r0, #0
   1fae8:	beq	1fb00 <__assert_fail@plt+0xe7fc>
   1faec:	ldr	r1, [pc, #28]	; 1fb10 <__assert_fail@plt+0xe80c>
   1faf0:	add	r0, sp, #4
   1faf4:	bl	1101c <strcmp@plt>
   1faf8:	adds	r0, r0, #0
   1fafc:	movne	r0, #1
   1fb00:	and	r0, r0, #1
   1fb04:	add	sp, sp, #268	; 0x10c
   1fb08:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb0c:	andeq	r0, r2, r7, asr #29
   1fb10:	andeq	r0, r2, r9, asr #29
   1fb14:	push	{r4, r5, r6, lr}
   1fb18:	mov	r5, r1
   1fb1c:	mov	r1, #0
   1fb20:	mov	r4, r2
   1fb24:	bl	11268 <setlocale@plt>
   1fb28:	subs	r6, r0, #0
   1fb2c:	bne	1fb40 <__assert_fail@plt+0xe83c>
   1fb30:	cmp	r4, #0
   1fb34:	mov	r0, #22
   1fb38:	strbne	r6, [r5]
   1fb3c:	pop	{r4, r5, r6, pc}
   1fb40:	bl	111cc <strlen@plt>
   1fb44:	cmp	r4, r0
   1fb48:	bls	1fb64 <__assert_fail@plt+0xe860>
   1fb4c:	add	r2, r0, #1
   1fb50:	mov	r1, r6
   1fb54:	mov	r0, r5
   1fb58:	bl	1107c <memcpy@plt>
   1fb5c:	mov	r0, #0
   1fb60:	pop	{r4, r5, r6, pc}
   1fb64:	cmp	r4, #0
   1fb68:	beq	1fb88 <__assert_fail@plt+0xe884>
   1fb6c:	sub	r4, r4, #1
   1fb70:	mov	r1, r6
   1fb74:	mov	r2, r4
   1fb78:	mov	r0, r5
   1fb7c:	bl	1107c <memcpy@plt>
   1fb80:	mov	r3, #0
   1fb84:	strb	r3, [r5, r4]
   1fb88:	mov	r0, #34	; 0x22
   1fb8c:	pop	{r4, r5, r6, pc}
   1fb90:	mov	r1, #0
   1fb94:	b	11268 <setlocale@plt>
   1fb98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fb9c:	mov	r7, r0
   1fba0:	ldr	r6, [pc, #72]	; 1fbf0 <__assert_fail@plt+0xe8ec>
   1fba4:	ldr	r5, [pc, #72]	; 1fbf4 <__assert_fail@plt+0xe8f0>
   1fba8:	add	r6, pc, r6
   1fbac:	add	r5, pc, r5
   1fbb0:	sub	r6, r6, r5
   1fbb4:	mov	r8, r1
   1fbb8:	mov	r9, r2
   1fbbc:	bl	10fb4 <pthread_mutex_unlock@plt-0x20>
   1fbc0:	asrs	r6, r6, #2
   1fbc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fbc8:	mov	r4, #0
   1fbcc:	add	r4, r4, #1
   1fbd0:	ldr	r3, [r5], #4
   1fbd4:	mov	r2, r9
   1fbd8:	mov	r1, r8
   1fbdc:	mov	r0, r7
   1fbe0:	blx	r3
   1fbe4:	cmp	r6, r4
   1fbe8:	bne	1fbcc <__assert_fail@plt+0xe8c8>
   1fbec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fbf0:	andeq	r1, r1, r4, ror #6
   1fbf4:	andeq	r1, r1, ip, asr r3
   1fbf8:	bx	lr
   1fbfc:	ldr	r3, [pc, #12]	; 1fc10 <__assert_fail@plt+0xe90c>
   1fc00:	mov	r1, #0
   1fc04:	add	r3, pc, r3
   1fc08:	ldr	r2, [r3]
   1fc0c:	b	111fc <__cxa_atexit@plt>
   1fc10:	andeq	r1, r1, r0, lsr #10

Disassembly of section .fini:

0001fc14 <.fini>:
   1fc14:	push	{r3, lr}
   1fc18:	pop	{r3, pc}
