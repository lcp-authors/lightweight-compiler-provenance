
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11f3c <__assert_fail@plt+0xd90>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <fstatfs64@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <fstatfs64@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	sl, r1, ip, asr #2

00010eb8 <fstatfs64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #106496	; 0x1a000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #106496	; 0x1a000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #106496	; 0x1a000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #106496	; 0x1a000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #106496	; 0x1a000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <fflush@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #106496	; 0x1a000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <memmove@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #106496	; 0x1a000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <memcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <fputc_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <__fxstatat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <iswprint@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__fxstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fwrite@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <lseek64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__ctype_get_mb_cur_max@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <__fpending@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <mbrtowc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <error@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <malloc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__libc_start_main@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__freading@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__gmon_start__@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <getopt_long@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <__ctype_b_loc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <openat64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <fchmodat@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <__errno_location@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__sprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <__cxa_atexit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #28]!

0001108c <memset@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #20]!

00011098 <__printf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fileno@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <__fprintf_chk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <fclose@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <fseeko64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <fcntl64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <readdir64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <fdopendir@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <dirfd@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <fchdir@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <qsort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <umask@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

00011158 <chmod@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3980]!	; 0xf8c

00011164 <__xstat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3972]!	; 0xf84

00011170 <strncmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3964]!	; 0xf7c

0001117c <abort@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3956]!	; 0xf74

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3948]!	; 0xf6c

00011194 <__lxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3940]!	; 0xf64

000111a0 <closedir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3932]!	; 0xf5c

000111ac <__assert_fail@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111b8 <.text>:
   111b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111bc:	sub	sp, sp, #164	; 0xa4
   111c0:	add	r9, sp, #160	; 0xa0
   111c4:	mov	r6, #0
   111c8:	mov	r5, r0
   111cc:	ldr	r0, [r1]
   111d0:	mov	r4, r1
   111d4:	str	r6, [r9, #-120]!	; 0xffffff88
   111d8:	bl	15e44 <__assert_fail@plt+0x4c98>
   111dc:	ldr	r1, [pc, #3180]	; 11e50 <__assert_fail@plt+0xca4>
   111e0:	mov	r0, #6
   111e4:	bl	110e0 <setlocale@plt>
   111e8:	ldr	fp, [pc, #3172]	; 11e54 <__assert_fail@plt+0xca8>
   111ec:	ldr	r1, [pc, #3172]	; 11e58 <__assert_fail@plt+0xcac>
   111f0:	ldr	r0, [pc, #3172]	; 11e5c <__assert_fail@plt+0xcb0>
   111f4:	bl	11140 <bindtextdomain@plt>
   111f8:	ldr	r0, [pc, #3164]	; 11e5c <__assert_fail@plt+0xcb0>
   111fc:	bl	10f6c <textdomain@plt>
   11200:	ldr	r0, [pc, #3160]	; 11e60 <__assert_fail@plt+0xcb4>
   11204:	str	r6, [sp, #20]
   11208:	str	r6, [sp, #16]
   1120c:	str	r6, [sp, #24]
   11210:	mov	r8, r6
   11214:	bl	19708 <__assert_fail@plt+0x855c>
   11218:	ldr	r7, [pc, #3140]	; 11e64 <__assert_fail@plt+0xcb8>
   1121c:	strb	r6, [fp]
   11220:	strb	r6, [fp, #1]
   11224:	strb	r6, [fp, #2]
   11228:	ldr	r6, [pc, #3128]	; 11e68 <__assert_fail@plt+0xcbc>
   1122c:	mov	sl, #0
   11230:	str	sl, [sp]
   11234:	mov	r3, r7
   11238:	mov	r2, r6
   1123c:	mov	r1, r4
   11240:	mov	r0, r5
   11244:	bl	11020 <getopt_long@plt>
   11248:	cmn	r0, #1
   1124c:	beq	11424 <__assert_fail@plt+0x278>
   11250:	cmp	r0, #99	; 0x63
   11254:	beq	113d8 <__assert_fail@plt+0x22c>
   11258:	ble	11298 <__assert_fail@plt+0xec>
   1125c:	cmp	r0, #118	; 0x76
   11260:	beq	113e8 <__assert_fail@plt+0x23c>
   11264:	ble	11334 <__assert_fail@plt+0x188>
   11268:	cmp	r0, #256	; 0x100
   1126c:	beq	113f4 <__assert_fail@plt+0x248>
   11270:	ble	1146c <__assert_fail@plt+0x2c0>
   11274:	ldr	r3, [pc, #3056]	; 11e6c <__assert_fail@plt+0xcc0>
   11278:	cmp	r0, r3
   1127c:	beq	112fc <__assert_fail@plt+0x150>
   11280:	add	r3, r3, #1
   11284:	cmp	r0, r3
   11288:	bne	1132c <__assert_fail@plt+0x180>
   1128c:	ldr	r3, [pc, #3036]	; 11e70 <__assert_fail@plt+0xcc4>
   11290:	ldr	r8, [r3]
   11294:	b	1122c <__assert_fail@plt+0x80>
   11298:	cmp	r0, #55	; 0x37
   1129c:	bgt	11308 <__assert_fail@plt+0x15c>
   112a0:	cmp	r0, #48	; 0x30
   112a4:	bge	11358 <__assert_fail@plt+0x1ac>
   112a8:	cmn	r0, #2
   112ac:	beq	112f4 <__assert_fail@plt+0x148>
   112b0:	bgt	1145c <__assert_fail@plt+0x2b0>
   112b4:	cmn	r0, #3
   112b8:	bne	1132c <__assert_fail@plt+0x180>
   112bc:	ldr	r3, [pc, #2992]	; 11e74 <__assert_fail@plt+0xcc8>
   112c0:	ldr	r0, [pc, #2992]	; 11e78 <__assert_fail@plt+0xccc>
   112c4:	ldr	r1, [pc, #2992]	; 11e7c <__assert_fail@plt+0xcd0>
   112c8:	ldr	r2, [pc, #2992]	; 11e80 <__assert_fail@plt+0xcd4>
   112cc:	str	sl, [sp, #8]
   112d0:	ldr	r0, [r0]
   112d4:	ldr	r3, [r3]
   112d8:	str	r1, [sp, #4]
   112dc:	str	r2, [sp]
   112e0:	ldr	r1, [pc, #2972]	; 11e84 <__assert_fail@plt+0xcd8>
   112e4:	ldr	r2, [pc, #2972]	; 11e88 <__assert_fail@plt+0xcdc>
   112e8:	bl	181cc <__assert_fail@plt+0x7020>
   112ec:	mov	r0, sl
   112f0:	bl	11038 <exit@plt>
   112f4:	mov	r0, sl
   112f8:	bl	12028 <__assert_fail@plt+0xe7c>
   112fc:	mov	r3, #1
   11300:	str	r3, [sp, #20]
   11304:	b	1122c <__assert_fail@plt+0x80>
   11308:	cmp	r0, #82	; 0x52
   1130c:	moveq	r3, #1
   11310:	strbeq	r3, [fp, #2]
   11314:	beq	1122c <__assert_fail@plt+0x80>
   11318:	ble	11478 <__assert_fail@plt+0x2cc>
   1131c:	cmp	r0, #88	; 0x58
   11320:	beq	11358 <__assert_fail@plt+0x1ac>
   11324:	cmp	r0, #97	; 0x61
   11328:	beq	11358 <__assert_fail@plt+0x1ac>
   1132c:	mov	r0, #1
   11330:	bl	12028 <__assert_fail@plt+0xe7c>
   11334:	cmp	r0, #111	; 0x6f
   11338:	beq	11358 <__assert_fail@plt+0x1ac>
   1133c:	bgt	11484 <__assert_fail@plt+0x2d8>
   11340:	cmp	r0, #102	; 0x66
   11344:	moveq	r3, #1
   11348:	strbeq	r3, [fp, #1]
   1134c:	beq	1122c <__assert_fail@plt+0x80>
   11350:	cmp	r0, #103	; 0x67
   11354:	bne	1132c <__assert_fail@plt+0x180>
   11358:	ldr	r3, [pc, #2860]	; 11e8c <__assert_fail@plt+0xce0>
   1135c:	ldr	r1, [sp, #16]
   11360:	ldr	r3, [r3]
   11364:	mov	r2, r1
   11368:	sub	r3, r3, #-1073741823	; 0xc0000001
   1136c:	cmp	r1, #0
   11370:	addne	r2, r2, #1
   11374:	ldr	r3, [r4, r3, lsl #2]
   11378:	mov	sl, r2
   1137c:	mov	r0, r3
   11380:	str	r2, [sp, #28]
   11384:	str	r3, [sp, #32]
   11388:	bl	11044 <strlen@plt>
   1138c:	ldr	r1, [sp, #40]	; 0x28
   11390:	ldr	r3, [sp, #32]
   11394:	add	sl, r0, sl
   11398:	cmp	sl, r1
   1139c:	mov	r2, r0
   113a0:	bcs	113fc <__assert_fail@plt+0x250>
   113a4:	mov	r1, r3
   113a8:	ldr	lr, [sp, #16]
   113ac:	ldr	r3, [sp, #24]
   113b0:	ldr	r0, [sp, #28]
   113b4:	mov	ip, #44	; 0x2c
   113b8:	add	r0, r3, r0
   113bc:	strb	ip, [r3, lr]
   113c0:	add	r2, r2, #1
   113c4:	bl	10f24 <memcpy@plt>
   113c8:	mov	r3, #1
   113cc:	str	sl, [sp, #16]
   113d0:	strb	r3, [fp]
   113d4:	b	1122c <__assert_fail@plt+0x80>
   113d8:	ldr	r2, [pc, #2736]	; 11e90 <__assert_fail@plt+0xce4>
   113dc:	mov	r3, #1
   113e0:	str	r3, [r2]
   113e4:	b	1122c <__assert_fail@plt+0x80>
   113e8:	ldr	r3, [pc, #2720]	; 11e90 <__assert_fail@plt+0xce4>
   113ec:	str	sl, [r3]
   113f0:	b	1122c <__assert_fail@plt+0x80>
   113f4:	str	sl, [sp, #20]
   113f8:	b	1122c <__assert_fail@plt+0x80>
   113fc:	str	r0, [sp, #36]	; 0x24
   11400:	add	ip, sl, #1
   11404:	ldr	r0, [sp, #24]
   11408:	mov	r1, r9
   1140c:	str	ip, [sp, #40]	; 0x28
   11410:	bl	1844c <__assert_fail@plt+0x72a0>
   11414:	ldr	r2, [sp, #36]	; 0x24
   11418:	ldr	r3, [sp, #32]
   1141c:	str	r0, [sp, #24]
   11420:	b	113a4 <__assert_fail@plt+0x1f8>
   11424:	cmp	r8, sl
   11428:	ldr	r3, [sp, #24]
   1142c:	beq	119c8 <__assert_fail@plt+0x81c>
   11430:	cmp	r3, sl
   11434:	beq	11490 <__assert_fail@plt+0x2e4>
   11438:	mov	r2, #5
   1143c:	ldr	r1, [pc, #2640]	; 11e94 <__assert_fail@plt+0xce8>
   11440:	mov	r0, sl
   11444:	bl	10f54 <dcgettext@plt>
   11448:	mov	r1, sl
   1144c:	mov	r2, r0
   11450:	mov	r0, sl
   11454:	bl	10fd8 <error@plt>
   11458:	b	1132c <__assert_fail@plt+0x180>
   1145c:	sub	r0, r0, #43	; 0x2b
   11460:	cmp	r0, #1
   11464:	bhi	1132c <__assert_fail@plt+0x180>
   11468:	b	11358 <__assert_fail@plt+0x1ac>
   1146c:	cmp	r0, #120	; 0x78
   11470:	bgt	1132c <__assert_fail@plt+0x180>
   11474:	b	11358 <__assert_fail@plt+0x1ac>
   11478:	cmp	r0, #61	; 0x3d
   1147c:	bne	1132c <__assert_fail@plt+0x180>
   11480:	b	11358 <__assert_fail@plt+0x1ac>
   11484:	cmp	r0, #114	; 0x72
   11488:	blt	1132c <__assert_fail@plt+0x180>
   1148c:	b	11358 <__assert_fail@plt+0x1ac>
   11490:	ldr	r6, [pc, #2548]	; 11e8c <__assert_fail@plt+0xce0>
   11494:	ldr	r3, [r6]
   11498:	cmp	r5, r3
   1149c:	ble	11954 <__assert_fail@plt+0x7a8>
   114a0:	mov	r0, r8
   114a4:	bl	15c28 <__assert_fail@plt+0x4a7c>
   114a8:	cmp	r0, #0
   114ac:	str	r0, [fp, #28]
   114b0:	beq	11d34 <__assert_fail@plt+0xb88>
   114b4:	ldrb	r3, [fp, #2]
   114b8:	ldr	r2, [sp, #20]
   114bc:	ands	r3, r2, r3
   114c0:	streq	r3, [fp, #24]
   114c4:	bne	11bb0 <__assert_fail@plt+0xa04>
   114c8:	ldr	r0, [r6]
   114cc:	mov	r2, #0
   114d0:	ldr	r1, [pc, #2496]	; 11e98 <__assert_fail@plt+0xcec>
   114d4:	add	r0, r4, r0, lsl #2
   114d8:	bl	18850 <__assert_fail@plt+0x76a4>
   114dc:	ldr	sl, [pc, #2476]	; 11e90 <__assert_fail@plt+0xce4>
   114e0:	add	r3, sp, #45	; 0x2d
   114e4:	mov	r9, #1
   114e8:	str	r3, [sp, #28]
   114ec:	add	r3, sp, #57	; 0x39
   114f0:	str	r3, [sp, #32]
   114f4:	mov	r8, r0
   114f8:	mov	r0, r8
   114fc:	bl	13fd4 <__assert_fail@plt+0x2e28>
   11500:	subs	r4, r0, #0
   11504:	beq	11a2c <__assert_fail@plt+0x880>
   11508:	ldrh	r3, [r4, #56]	; 0x38
   1150c:	ldr	r6, [r4, #28]
   11510:	ldr	r5, [r4, #24]
   11514:	sub	r3, r3, #2
   11518:	cmp	r3, #11
   1151c:	ldrls	pc, [pc, r3, lsl #2]
   11520:	b	115f0 <__assert_fail@plt+0x444>
   11524:	ldrdeq	r1, [r1], -ip
   11528:	strdeq	r1, [r1], -r0
   1152c:	andeq	r1, r1, r0, ror #10
   11530:	strdeq	r1, [r1], -r0
   11534:	andeq	r1, r1, r4, asr r5
   11538:	ldrdeq	r1, [r1], -r8
   1153c:	strdeq	r1, [r1], -r0
   11540:	strdeq	r1, [r1], -r0
   11544:	andeq	r1, r1, r8, ror r8
   11548:	strdeq	r1, [r1], -r0
   1154c:	strdeq	r1, [r1], -r0
   11550:	andeq	r1, r1, r8, lsr #16
   11554:	mov	r5, #1
   11558:	and	r9, r9, r5
   1155c:	b	114f8 <__assert_fail@plt+0x34c>
   11560:	ldrb	r5, [fp, #1]
   11564:	cmp	r5, #0
   11568:	moveq	r2, #5
   1156c:	ldreq	r1, [pc, #2344]	; 11e9c <__assert_fail@plt+0xcf0>
   11570:	beq	118a4 <__assert_fail@plt+0x6f8>
   11574:	ldr	r3, [sl]
   11578:	cmp	r3, #2
   1157c:	beq	115bc <__assert_fail@plt+0x410>
   11580:	ldr	r3, [sl]
   11584:	cmp	r3, #0
   11588:	bne	115bc <__assert_fail@plt+0x410>
   1158c:	mov	r1, r6
   11590:	mov	r0, #4
   11594:	bl	17ac4 <__assert_fail@plt+0x6918>
   11598:	mov	r2, #5
   1159c:	ldr	r1, [pc, #2300]	; 11ea0 <__assert_fail@plt+0xcf4>
   115a0:	mov	r5, r0
   115a4:	mov	r0, #0
   115a8:	bl	10f54 <dcgettext@plt>
   115ac:	mov	r2, r5
   115b0:	mov	r1, r0
   115b4:	mov	r0, #1
   115b8:	bl	11098 <__printf_chk@plt>
   115bc:	mov	r5, #0
   115c0:	ldrb	r3, [fp, #2]
   115c4:	cmp	r3, #0
   115c8:	beq	1191c <__assert_fail@plt+0x770>
   115cc:	cmp	r5, #1
   115d0:	movls	r5, #0
   115d4:	movhi	r5, #1
   115d8:	b	11558 <__assert_fail@plt+0x3ac>
   115dc:	mov	r1, r4
   115e0:	mov	r0, r8
   115e4:	bl	18898 <__assert_fail@plt+0x76ec>
   115e8:	cmp	r0, #0
   115ec:	bne	11b48 <__assert_fail@plt+0x99c>
   115f0:	ldr	ip, [fp, #24]
   115f4:	cmp	ip, #0
   115f8:	beq	11610 <__assert_fail@plt+0x464>
   115fc:	ldrd	r0, [r4, #160]	; 0xa0
   11600:	ldrd	r2, [ip]
   11604:	cmp	r1, r3
   11608:	cmpeq	r0, r2
   1160c:	beq	11ab0 <__assert_fail@plt+0x904>
   11610:	ldr	r3, [r4, #80]	; 0x50
   11614:	mov	r0, r3
   11618:	str	r3, [sp, #16]
   1161c:	and	r3, r3, #61440	; 0xf000
   11620:	cmp	r3, #40960	; 0xa000
   11624:	mov	r1, r3
   11628:	str	r3, [sp, #24]
   1162c:	beq	11978 <__assert_fail@plt+0x7cc>
   11630:	mov	r7, #0
   11634:	str	r7, [sp]
   11638:	ldr	r3, [fp, #28]
   1163c:	ldr	r2, [fp, #4]
   11640:	sub	r1, r1, #16384	; 0x4000
   11644:	clz	r1, r1
   11648:	lsr	r1, r1, #5
   1164c:	bl	15c88 <__assert_fail@plt+0x4adc>
   11650:	mov	r3, r7
   11654:	mov	r1, r5
   11658:	mov	r2, r0
   1165c:	str	r0, [sp, #20]
   11660:	ldr	r0, [r8, #32]
   11664:	bl	12488 <__assert_fail@plt+0x12dc>
   11668:	cmp	r0, #0
   1166c:	bne	11a90 <__assert_fail@plt+0x8e4>
   11670:	ldr	r3, [sl]
   11674:	cmp	r3, #2
   11678:	moveq	r5, #4
   1167c:	beq	11770 <__assert_fail@plt+0x5c4>
   11680:	ldr	r3, [sp, #20]
   11684:	tst	r3, #3584	; 0xe00
   11688:	beq	11d2c <__assert_fail@plt+0xb80>
   1168c:	str	r0, [sp]
   11690:	mov	r2, r5
   11694:	add	r3, sp, #56	; 0x38
   11698:	ldr	r1, [r8, #32]
   1169c:	mov	r0, #3
   116a0:	bl	10f78 <__fxstatat64@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	11c84 <__assert_fail@plt+0xad8>
   116ac:	ldrb	r5, [fp, #1]
   116b0:	cmp	r5, #0
   116b4:	bne	116f4 <__assert_fail@plt+0x548>
   116b8:	bl	11068 <__errno_location@plt>
   116bc:	mov	r2, #5
   116c0:	ldr	r1, [pc, #2012]	; 11ea4 <__assert_fail@plt+0xcf8>
   116c4:	ldr	r7, [r0]
   116c8:	mov	r0, r5
   116cc:	bl	10f54 <dcgettext@plt>
   116d0:	mov	r1, r6
   116d4:	str	r0, [sp, #36]	; 0x24
   116d8:	mov	r0, #4
   116dc:	bl	17ac4 <__assert_fail@plt+0x6918>
   116e0:	ldr	r2, [sp, #36]	; 0x24
   116e4:	mov	r1, r7
   116e8:	mov	r3, r0
   116ec:	mov	r0, r5
   116f0:	bl	10fd8 <error@plt>
   116f4:	ldr	r3, [sl]
   116f8:	cmp	r3, #0
   116fc:	movne	r5, #3
   11700:	bne	11770 <__assert_fail@plt+0x5c4>
   11704:	mov	r1, r6
   11708:	mov	r0, #4
   1170c:	bl	17ac4 <__assert_fail@plt+0x6918>
   11710:	add	r1, sp, #44	; 0x2c
   11714:	mov	r5, #0
   11718:	mov	r7, r0
   1171c:	ldr	r0, [sp, #20]
   11720:	bl	125b0 <__assert_fail@plt+0x1404>
   11724:	add	r1, sp, #56	; 0x38
   11728:	ldr	r0, [sp, #16]
   1172c:	strb	r5, [sp, #54]	; 0x36
   11730:	bl	125b0 <__assert_fail@plt+0x1404>
   11734:	mov	r0, r5
   11738:	mov	r2, #5
   1173c:	ldr	r1, [pc, #1892]	; 11ea8 <__assert_fail@plt+0xcfc>
   11740:	strb	r5, [sp, #66]	; 0x42
   11744:	bl	10f54 <dcgettext@plt>
   11748:	ldr	r3, [sp, #20]
   1174c:	ldr	r2, [sp, #28]
   11750:	mov	r5, #3
   11754:	lsl	r3, r3, #20
   11758:	str	r2, [sp]
   1175c:	lsr	r3, r3, #20
   11760:	mov	r2, r7
   11764:	mov	r1, r0
   11768:	mov	r0, #1
   1176c:	bl	11098 <__printf_chk@plt>
   11770:	ldrb	r3, [fp]
   11774:	cmp	r3, #0
   11778:	beq	115c0 <__assert_fail@plt+0x414>
   1177c:	ldr	r3, [sp, #24]
   11780:	mov	r7, #0
   11784:	str	r7, [sp]
   11788:	sub	r1, r3, #16384	; 0x4000
   1178c:	mov	r2, r7
   11790:	clz	r1, r1
   11794:	ldr	r0, [sp, #16]
   11798:	lsr	r1, r1, #5
   1179c:	ldr	r3, [fp, #28]
   117a0:	bl	15c88 <__assert_fail@plt+0x4adc>
   117a4:	ldr	r2, [sp, #20]
   117a8:	bics	r2, r2, r0
   117ac:	beq	115c0 <__assert_fail@plt+0x414>
   117b0:	str	r0, [sp, #16]
   117b4:	add	r1, sp, #44	; 0x2c
   117b8:	ldr	r0, [sp, #20]
   117bc:	bl	125b0 <__assert_fail@plt+0x1404>
   117c0:	ldr	r3, [sp, #16]
   117c4:	add	r1, sp, #56	; 0x38
   117c8:	mov	r0, r3
   117cc:	bl	125b0 <__assert_fail@plt+0x1404>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #1744]	; 11eac <__assert_fail@plt+0xd00>
   117d8:	mov	r0, r7
   117dc:	strb	r7, [sp, #66]	; 0x42
   117e0:	strb	r7, [sp, #54]	; 0x36
   117e4:	bl	10f54 <dcgettext@plt>
   117e8:	mov	r2, r6
   117ec:	mov	r1, #3
   117f0:	mov	r5, r0
   117f4:	mov	r0, r7
   117f8:	bl	17b80 <__assert_fail@plt+0x69d4>
   117fc:	ldr	r3, [sp, #32]
   11800:	mov	r2, r5
   11804:	str	r3, [sp, #4]
   11808:	ldr	r3, [sp, #28]
   1180c:	mov	r1, r7
   11810:	str	r3, [sp]
   11814:	mov	r5, #1
   11818:	mov	r3, r0
   1181c:	mov	r0, r7
   11820:	bl	10fd8 <error@plt>
   11824:	b	115c0 <__assert_fail@plt+0x414>
   11828:	ldrb	r5, [fp, #1]
   1182c:	cmp	r5, #0
   11830:	bne	11574 <__assert_fail@plt+0x3c8>
   11834:	mov	r2, #5
   11838:	ldr	r1, [pc, #1648]	; 11eb0 <__assert_fail@plt+0xd04>
   1183c:	mov	r0, r5
   11840:	bl	10f54 <dcgettext@plt>
   11844:	mov	r1, r6
   11848:	mov	r7, r0
   1184c:	mov	r0, #4
   11850:	bl	17ac4 <__assert_fail@plt+0x6918>
   11854:	mov	r2, r7
   11858:	mov	r1, r5
   1185c:	mov	r3, r0
   11860:	mov	r0, r5
   11864:	bl	10fd8 <error@plt>
   11868:	ldr	r3, [sl]
   1186c:	cmp	r3, #2
   11870:	bne	11580 <__assert_fail@plt+0x3d4>
   11874:	b	115bc <__assert_fail@plt+0x410>
   11878:	ldr	r3, [r4, #48]	; 0x30
   1187c:	cmp	r3, #0
   11880:	bne	11890 <__assert_fail@plt+0x6e4>
   11884:	ldr	r3, [r4, #16]
   11888:	cmp	r3, #0
   1188c:	beq	11c04 <__assert_fail@plt+0xa58>
   11890:	ldrb	r5, [fp, #1]
   11894:	cmp	r5, #0
   11898:	moveq	r2, #5
   1189c:	ldreq	r1, [pc, #1552]	; 11eb4 <__assert_fail@plt+0xd08>
   118a0:	bne	11ddc <__assert_fail@plt+0xc30>
   118a4:	mov	r0, r5
   118a8:	ldr	r7, [r4, #32]
   118ac:	bl	10f54 <dcgettext@plt>
   118b0:	mov	r1, r6
   118b4:	str	r0, [sp, #16]
   118b8:	mov	r0, #4
   118bc:	bl	17ac4 <__assert_fail@plt+0x6918>
   118c0:	ldr	r2, [sp, #16]
   118c4:	mov	r1, r7
   118c8:	mov	r3, r0
   118cc:	mov	r0, r5
   118d0:	bl	10fd8 <error@plt>
   118d4:	b	11574 <__assert_fail@plt+0x3c8>
   118d8:	ldrb	r5, [fp, #1]
   118dc:	cmp	r5, #0
   118e0:	bne	11574 <__assert_fail@plt+0x3c8>
   118e4:	mov	r2, r6
   118e8:	mov	r1, #3
   118ec:	mov	r0, r5
   118f0:	ldr	r7, [r4, #32]
   118f4:	bl	17b80 <__assert_fail@plt+0x69d4>
   118f8:	mov	r1, r7
   118fc:	ldr	r2, [pc, #1460]	; 11eb8 <__assert_fail@plt+0xd0c>
   11900:	mov	r3, r0
   11904:	mov	r0, r5
   11908:	bl	10fd8 <error@plt>
   1190c:	ldr	r3, [sl]
   11910:	cmp	r3, #2
   11914:	bne	11580 <__assert_fail@plt+0x3d4>
   11918:	b	115bc <__assert_fail@plt+0x410>
   1191c:	mov	r1, r4
   11920:	mov	r2, #4
   11924:	mov	r0, r8
   11928:	bl	1468c <__assert_fail@plt+0x34e0>
   1192c:	b	115cc <__assert_fail@plt+0x420>
   11930:	ldr	r2, [r6]
   11934:	add	r3, r2, #1
   11938:	ldr	r2, [r4, r2, lsl #2]
   1193c:	cmp	r5, r3
   11940:	str	r3, [r6]
   11944:	str	r2, [sp, #24]
   11948:	bgt	11b88 <__assert_fail@plt+0x9dc>
   1194c:	cmp	r2, #0
   11950:	bne	119e0 <__assert_fail@plt+0x834>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #1372]	; 11ebc <__assert_fail@plt+0xd10>
   1195c:	mov	r0, #0
   11960:	bl	10f54 <dcgettext@plt>
   11964:	mov	r1, #0
   11968:	mov	r2, r0
   1196c:	mov	r0, r1
   11970:	bl	10fd8 <error@plt>
   11974:	b	1132c <__assert_fail@plt+0x180>
   11978:	ldr	r5, [sl]
   1197c:	cmp	r5, #2
   11980:	beq	115c0 <__assert_fail@plt+0x414>
   11984:	cmp	r5, #0
   11988:	movne	r5, #2
   1198c:	bne	115c0 <__assert_fail@plt+0x414>
   11990:	mov	r1, r6
   11994:	mov	r0, #4
   11998:	bl	17ac4 <__assert_fail@plt+0x6918>
   1199c:	mov	r2, #5
   119a0:	ldr	r1, [pc, #1304]	; 11ec0 <__assert_fail@plt+0xd14>
   119a4:	mov	r6, r0
   119a8:	mov	r0, r5
   119ac:	bl	10f54 <dcgettext@plt>
   119b0:	mov	r2, r6
   119b4:	mov	r5, #2
   119b8:	mov	r1, r0
   119bc:	mov	r0, #1
   119c0:	bl	11098 <__printf_chk@plt>
   119c4:	b	115c0 <__assert_fail@plt+0x414>
   119c8:	cmp	r3, #0
   119cc:	ldr	r6, [pc, #1208]	; 11e8c <__assert_fail@plt+0xce0>
   119d0:	beq	11930 <__assert_fail@plt+0x784>
   119d4:	ldr	r3, [r6]
   119d8:	cmp	r5, r3
   119dc:	bgt	11b88 <__assert_fail@plt+0x9dc>
   119e0:	sub	r3, r3, #-1073741823	; 0xc0000001
   119e4:	ldr	r2, [sp, #24]
   119e8:	ldr	r3, [r4, r3, lsl #2]
   119ec:	cmp	r3, r2
   119f0:	bne	11954 <__assert_fail@plt+0x7a8>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #1220]	; 11ec4 <__assert_fail@plt+0xd18>
   119fc:	mov	r0, #0
   11a00:	bl	10f54 <dcgettext@plt>
   11a04:	sub	r5, r5, #-1073741823	; 0xc0000001
   11a08:	mov	r6, r0
   11a0c:	ldr	r0, [r4, r5, lsl #2]
   11a10:	bl	17d04 <__assert_fail@plt+0x6b58>
   11a14:	mov	r1, #0
   11a18:	mov	r2, r6
   11a1c:	mov	r3, r0
   11a20:	mov	r0, r1
   11a24:	bl	10fd8 <error@plt>
   11a28:	b	1132c <__assert_fail@plt+0x180>
   11a2c:	bl	11068 <__errno_location@plt>
   11a30:	ldr	r6, [r0]
   11a34:	mov	r5, r0
   11a38:	cmp	r6, #0
   11a3c:	beq	11a50 <__assert_fail@plt+0x8a4>
   11a40:	ldrb	r9, [fp, #1]
   11a44:	cmp	r9, #0
   11a48:	movne	r9, r4
   11a4c:	beq	11c60 <__assert_fail@plt+0xab4>
   11a50:	mov	r0, r8
   11a54:	bl	13e74 <__assert_fail@plt+0x2cc8>
   11a58:	cmp	r0, #0
   11a5c:	beq	11a88 <__assert_fail@plt+0x8dc>
   11a60:	mov	r2, #5
   11a64:	ldr	r1, [pc, #1116]	; 11ec8 <__assert_fail@plt+0xd1c>
   11a68:	mov	r0, #0
   11a6c:	ldr	r4, [r5]
   11a70:	bl	10f54 <dcgettext@plt>
   11a74:	mov	r1, r4
   11a78:	mov	r9, #0
   11a7c:	mov	r2, r0
   11a80:	mov	r0, #0
   11a84:	bl	10fd8 <error@plt>
   11a88:	eor	r0, r9, #1
   11a8c:	bl	11038 <exit@plt>
   11a90:	ldrb	r5, [fp, #1]
   11a94:	cmp	r5, #0
   11a98:	beq	11c20 <__assert_fail@plt+0xa74>
   11a9c:	ldr	r5, [sl]
   11aa0:	cmp	r5, #2
   11aa4:	bne	11df4 <__assert_fail@plt+0xc48>
   11aa8:	mov	r5, #1
   11aac:	b	115c0 <__assert_fail@plt+0x414>
   11ab0:	ldrd	r2, [r4, #64]	; 0x40
   11ab4:	ldrd	r0, [ip, #8]
   11ab8:	cmp	r3, r1
   11abc:	cmpeq	r2, r0
   11ac0:	bne	11610 <__assert_fail@plt+0x464>
   11ac4:	ldr	r1, [pc, #1024]	; 11ecc <__assert_fail@plt+0xd20>
   11ac8:	mov	r0, r6
   11acc:	bl	10ee8 <strcmp@plt>
   11ad0:	mov	r2, #5
   11ad4:	subs	r5, r0, #0
   11ad8:	bne	11d58 <__assert_fail@plt+0xbac>
   11adc:	ldr	r1, [pc, #1004]	; 11ed0 <__assert_fail@plt+0xd24>
   11ae0:	bl	10f54 <dcgettext@plt>
   11ae4:	mov	r1, r6
   11ae8:	mov	r7, r0
   11aec:	mov	r0, #4
   11af0:	bl	17ac4 <__assert_fail@plt+0x6918>
   11af4:	mov	r2, r7
   11af8:	mov	r1, r5
   11afc:	mov	r3, r0
   11b00:	mov	r0, r5
   11b04:	bl	10fd8 <error@plt>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #960]	; 11ed4 <__assert_fail@plt+0xd28>
   11b10:	mov	r0, #0
   11b14:	bl	10f54 <dcgettext@plt>
   11b18:	mov	r1, #0
   11b1c:	mov	r5, #0
   11b20:	mov	r2, r0
   11b24:	mov	r0, r1
   11b28:	bl	10fd8 <error@plt>
   11b2c:	mov	r1, r4
   11b30:	mov	r2, #4
   11b34:	mov	r0, r8
   11b38:	bl	1468c <__assert_fail@plt+0x34e0>
   11b3c:	mov	r0, r8
   11b40:	bl	13fd4 <__assert_fail@plt+0x2e28>
   11b44:	b	11558 <__assert_fail@plt+0x3ac>
   11b48:	mov	r2, #5
   11b4c:	ldr	r1, [pc, #900]	; 11ed8 <__assert_fail@plt+0xd2c>
   11b50:	mov	r0, #0
   11b54:	bl	10f54 <dcgettext@plt>
   11b58:	mov	r2, r6
   11b5c:	mov	r1, #3
   11b60:	mov	r5, #0
   11b64:	mov	r4, r0
   11b68:	mov	r0, #0
   11b6c:	bl	17b80 <__assert_fail@plt+0x69d4>
   11b70:	mov	r1, #0
   11b74:	mov	r2, r4
   11b78:	mov	r3, r0
   11b7c:	mov	r0, r1
   11b80:	bl	10fd8 <error@plt>
   11b84:	b	11558 <__assert_fail@plt+0x3ac>
   11b88:	ldr	r0, [sp, #24]
   11b8c:	bl	15898 <__assert_fail@plt+0x46ec>
   11b90:	cmp	r0, #0
   11b94:	mov	r5, r0
   11b98:	str	r0, [fp, #28]
   11b9c:	beq	11da8 <__assert_fail@plt+0xbfc>
   11ba0:	mov	r0, #0
   11ba4:	bl	1114c <umask@plt>
   11ba8:	str	r0, [fp, #4]
   11bac:	b	114b4 <__assert_fail@plt+0x308>
   11bb0:	ldr	r0, [pc, #804]	; 11edc <__assert_fail@plt+0xd30>
   11bb4:	bl	17d1c <__assert_fail@plt+0x6b70>
   11bb8:	cmp	r0, #0
   11bbc:	mov	r5, r0
   11bc0:	str	r0, [fp, #24]
   11bc4:	bne	114c8 <__assert_fail@plt+0x31c>
   11bc8:	bl	11068 <__errno_location@plt>
   11bcc:	ldr	r1, [pc, #780]	; 11ee0 <__assert_fail@plt+0xd34>
   11bd0:	mov	r2, #5
   11bd4:	ldr	r4, [r0]
   11bd8:	mov	r0, r5
   11bdc:	bl	10f54 <dcgettext@plt>
   11be0:	ldr	r1, [pc, #740]	; 11ecc <__assert_fail@plt+0xd20>
   11be4:	mov	r5, r0
   11be8:	mov	r0, #4
   11bec:	bl	17ac4 <__assert_fail@plt+0x6918>
   11bf0:	mov	r2, r5
   11bf4:	mov	r1, r4
   11bf8:	mov	r3, r0
   11bfc:	mov	r0, #1
   11c00:	bl	10fd8 <error@plt>
   11c04:	mov	r5, #1
   11c08:	str	r5, [r4, #16]
   11c0c:	mov	r1, r4
   11c10:	mov	r2, r5
   11c14:	mov	r0, r8
   11c18:	bl	1468c <__assert_fail@plt+0x34e0>
   11c1c:	b	11558 <__assert_fail@plt+0x3ac>
   11c20:	bl	11068 <__errno_location@plt>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #692]	; 11ee4 <__assert_fail@plt+0xd38>
   11c2c:	ldr	r7, [r0]
   11c30:	mov	r0, r5
   11c34:	bl	10f54 <dcgettext@plt>
   11c38:	mov	r1, r6
   11c3c:	str	r0, [sp, #36]	; 0x24
   11c40:	mov	r0, #4
   11c44:	bl	17ac4 <__assert_fail@plt+0x6918>
   11c48:	ldr	r2, [sp, #36]	; 0x24
   11c4c:	mov	r1, r7
   11c50:	mov	r3, r0
   11c54:	mov	r0, r5
   11c58:	bl	10fd8 <error@plt>
   11c5c:	b	11a9c <__assert_fail@plt+0x8f0>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #636]	; 11ee8 <__assert_fail@plt+0xd3c>
   11c68:	mov	r0, r9
   11c6c:	bl	10f54 <dcgettext@plt>
   11c70:	mov	r1, r6
   11c74:	mov	r2, r0
   11c78:	mov	r0, r9
   11c7c:	bl	10fd8 <error@plt>
   11c80:	b	11a50 <__assert_fail@plt+0x8a4>
   11c84:	ldr	r3, [sp, #72]	; 0x48
   11c88:	ldr	r2, [sp, #16]
   11c8c:	eor	r3, r3, r2
   11c90:	ldr	r2, [pc, #596]	; 11eec <__assert_fail@plt+0xd40>
   11c94:	tst	r3, r2
   11c98:	beq	116f4 <__assert_fail@plt+0x548>
   11c9c:	mov	r1, r6
   11ca0:	mov	r0, #4
   11ca4:	bl	17ac4 <__assert_fail@plt+0x6918>
   11ca8:	add	r1, sp, #44	; 0x2c
   11cac:	mov	r5, #0
   11cb0:	mov	r7, r0
   11cb4:	ldr	r0, [sp, #20]
   11cb8:	bl	125b0 <__assert_fail@plt+0x1404>
   11cbc:	add	r1, sp, #56	; 0x38
   11cc0:	ldr	r0, [sp, #16]
   11cc4:	strb	r5, [sp, #54]	; 0x36
   11cc8:	bl	125b0 <__assert_fail@plt+0x1404>
   11ccc:	mov	r0, r5
   11cd0:	mov	r2, #5
   11cd4:	ldr	r1, [pc, #532]	; 11ef0 <__assert_fail@plt+0xd44>
   11cd8:	strb	r5, [sp, #66]	; 0x42
   11cdc:	bl	10f54 <dcgettext@plt>
   11ce0:	ldr	r3, [sp, #20]
   11ce4:	mov	r5, #4
   11ce8:	lsl	r3, r3, #20
   11cec:	lsr	r3, r3, #20
   11cf0:	str	r3, [sp, #4]
   11cf4:	ldr	r3, [sp, #16]
   11cf8:	add	lr, sp, #45	; 0x2d
   11cfc:	add	ip, sp, #57	; 0x39
   11d00:	lsl	r3, r3, #20
   11d04:	mov	r1, r0
   11d08:	mov	r2, r7
   11d0c:	str	lr, [sp, #8]
   11d10:	str	ip, [sp]
   11d14:	lsr	r3, r3, #20
   11d18:	mov	r0, #1
   11d1c:	bl	11098 <__printf_chk@plt>
   11d20:	cmp	r5, #2
   11d24:	bls	115c0 <__assert_fail@plt+0x414>
   11d28:	b	11770 <__assert_fail@plt+0x5c4>
   11d2c:	ldr	r3, [sp, #20]
   11d30:	b	11c88 <__assert_fail@plt+0xadc>
   11d34:	bl	11068 <__errno_location@plt>
   11d38:	ldr	r1, [pc, #416]	; 11ee0 <__assert_fail@plt+0xd34>
   11d3c:	mov	r2, #5
   11d40:	ldr	r4, [r0]
   11d44:	ldr	r0, [sp, #24]
   11d48:	bl	10f54 <dcgettext@plt>
   11d4c:	mov	r1, r8
   11d50:	mov	r5, r0
   11d54:	b	11be8 <__assert_fail@plt+0xa3c>
   11d58:	ldr	r1, [pc, #404]	; 11ef4 <__assert_fail@plt+0xd48>
   11d5c:	mov	r0, #0
   11d60:	bl	10f54 <dcgettext@plt>
   11d64:	mov	r2, r6
   11d68:	mov	r1, #4
   11d6c:	mov	r5, r0
   11d70:	mov	r0, #0
   11d74:	bl	17a58 <__assert_fail@plt+0x68ac>
   11d78:	ldr	r2, [pc, #332]	; 11ecc <__assert_fail@plt+0xd20>
   11d7c:	mov	r1, #4
   11d80:	mov	r6, r0
   11d84:	mov	r0, #1
   11d88:	bl	17a58 <__assert_fail@plt+0x68ac>
   11d8c:	mov	r1, #0
   11d90:	mov	r3, r6
   11d94:	mov	r2, r5
   11d98:	str	r0, [sp]
   11d9c:	mov	r0, r1
   11da0:	bl	10fd8 <error@plt>
   11da4:	b	11b08 <__assert_fail@plt+0x95c>
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #324]	; 11ef8 <__assert_fail@plt+0xd4c>
   11db0:	bl	10f54 <dcgettext@plt>
   11db4:	mov	r4, r0
   11db8:	ldr	r0, [sp, #24]
   11dbc:	bl	17d04 <__assert_fail@plt+0x6b58>
   11dc0:	mov	r2, r4
   11dc4:	mov	r1, r5
   11dc8:	mov	r3, r0
   11dcc:	mov	r0, r5
   11dd0:	bl	10fd8 <error@plt>
   11dd4:	mov	r0, #1
   11dd8:	bl	12028 <__assert_fail@plt+0xe7c>
   11ddc:	ldr	r3, [sl]
   11de0:	cmp	r3, #2
   11de4:	beq	115bc <__assert_fail@plt+0x410>
   11de8:	cmp	r3, #0
   11dec:	beq	1158c <__assert_fail@plt+0x3e0>
   11df0:	b	115bc <__assert_fail@plt+0x410>
   11df4:	cmp	r5, #0
   11df8:	bne	11aa8 <__assert_fail@plt+0x8fc>
   11dfc:	mov	r1, r6
   11e00:	mov	r0, #4
   11e04:	bl	17ac4 <__assert_fail@plt+0x6918>
   11e08:	add	r1, sp, #44	; 0x2c
   11e0c:	mov	r7, r0
   11e10:	ldr	r0, [sp, #20]
   11e14:	bl	125b0 <__assert_fail@plt+0x1404>
   11e18:	add	r1, sp, #56	; 0x38
   11e1c:	ldr	r0, [sp, #16]
   11e20:	strb	r5, [sp, #54]	; 0x36
   11e24:	bl	125b0 <__assert_fail@plt+0x1404>
   11e28:	mov	r0, r5
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #196]	; 11efc <__assert_fail@plt+0xd50>
   11e34:	strb	r5, [sp, #66]	; 0x42
   11e38:	bl	10f54 <dcgettext@plt>
   11e3c:	ldr	r3, [sp, #20]
   11e40:	mov	r5, #1
   11e44:	lsl	r3, r3, #20
   11e48:	lsr	r3, r3, #20
   11e4c:	b	11cf0 <__assert_fail@plt+0xb44>
   11e50:	andeq	r9, r1, r4, lsr r9
   11e54:	andeq	fp, r2, r8, lsl #3
   11e58:	andeq	r9, r1, ip, lsr #25
   11e5c:	andeq	r9, r1, r4, lsl #24
   11e60:	andeq	r2, r1, r4, lsr #7
   11e64:	andeq	r9, r1, r4, ror #14
   11e68:	andeq	r9, r1, r4, ror #25
   11e6c:	andeq	r0, r0, r1, lsl #2
   11e70:	andeq	fp, r2, r0, lsl #3
   11e74:	andeq	fp, r2, ip, lsl r1
   11e78:	andeq	fp, r2, ip, ror r1
   11e7c:	andeq	r9, r1, r4, asr #25
   11e80:	ldrdeq	r9, [r1], -r4
   11e84:	andeq	r9, r1, r4, lsl r8
   11e88:	andeq	r9, r1, r0, lsl #24
   11e8c:	andeq	fp, r2, r0, ror r1
   11e90:	andeq	fp, r2, r8, lsl r1
   11e94:	andeq	r9, r1, r8, lsr #26
   11e98:	andeq	r0, r0, r1, lsl r4
   11e9c:	ldrdeq	r9, [r1], -ip
   11ea0:	strdeq	r9, [r1], -r0
   11ea4:	ldrdeq	r9, [r1], -r0
   11ea8:	strheq	sl, [r1], -r4
   11eac:	andeq	sl, r1, ip
   11eb0:	strdeq	r9, [r1], -r8
   11eb4:	andeq	r9, r1, r8, asr #27
   11eb8:	ldrdeq	sl, [r1], -r0
   11ebc:	andeq	r9, r1, r4, asr sp
   11ec0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11ec4:	andeq	r9, r1, r4, ror #26
   11ec8:	andeq	sl, r1, r0, lsr r0
   11ecc:			; <UNDEFINED> instruction: 0x00019db4
   11ed0:	ldrdeq	r9, [r1], -ip
   11ed4:	andeq	r9, r1, r8, asr #30
   11ed8:	andeq	r9, r1, r0, lsr #28
   11edc:	muleq	r2, r0, r1
   11ee0:	andeq	r9, r1, r0, lsl #27
   11ee4:	andeq	r9, r1, ip, ror pc
   11ee8:			; <UNDEFINED> instruction: 0x00019db8
   11eec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11ef0:	andeq	sl, r1, r0, lsl #1
   11ef4:	andeq	r9, r1, ip, lsl #30
   11ef8:	andeq	r9, r1, r0, lsr #27
   11efc:	andeq	sl, r1, r4, asr #32
   11f00:	mov	fp, #0
   11f04:	mov	lr, #0
   11f08:	pop	{r1}		; (ldr r1, [sp], #4)
   11f0c:	mov	r2, sp
   11f10:	push	{r2}		; (str r2, [sp, #-4]!)
   11f14:	push	{r0}		; (str r0, [sp, #-4]!)
   11f18:	ldr	ip, [pc, #16]	; 11f30 <__assert_fail@plt+0xd84>
   11f1c:	push	{ip}		; (str ip, [sp, #-4]!)
   11f20:	ldr	r0, [pc, #12]	; 11f34 <__assert_fail@plt+0xd88>
   11f24:	ldr	r3, [pc, #12]	; 11f38 <__assert_fail@plt+0xd8c>
   11f28:	bl	10ffc <__libc_start_main@plt>
   11f2c:	bl	1117c <abort@plt>
   11f30:	andeq	r9, r1, r4, lsl #14
   11f34:			; <UNDEFINED> instruction: 0x000111b8
   11f38:	andeq	r9, r1, r4, lsr #13
   11f3c:	ldr	r3, [pc, #20]	; 11f58 <__assert_fail@plt+0xdac>
   11f40:	ldr	r2, [pc, #20]	; 11f5c <__assert_fail@plt+0xdb0>
   11f44:	add	r3, pc, r3
   11f48:	ldr	r2, [r3, r2]
   11f4c:	cmp	r2, #0
   11f50:	bxeq	lr
   11f54:	b	11014 <__gmon_start__@plt>
   11f58:	strheq	r9, [r1], -r4
   11f5c:	andeq	r0, r0, ip, lsl #2
   11f60:	ldr	r3, [pc, #28]	; 11f84 <__assert_fail@plt+0xdd8>
   11f64:	ldr	r0, [pc, #28]	; 11f88 <__assert_fail@plt+0xddc>
   11f68:	sub	r3, r3, r0
   11f6c:	cmp	r3, #6
   11f70:	bxls	lr
   11f74:	ldr	r3, [pc, #16]	; 11f8c <__assert_fail@plt+0xde0>
   11f78:	cmp	r3, #0
   11f7c:	bxeq	lr
   11f80:	bx	r3
   11f84:	andeq	fp, r2, r7, ror #2
   11f88:	andeq	fp, r2, r4, ror #2
   11f8c:	andeq	r0, r0, r0
   11f90:	ldr	r1, [pc, #36]	; 11fbc <__assert_fail@plt+0xe10>
   11f94:	ldr	r0, [pc, #36]	; 11fc0 <__assert_fail@plt+0xe14>
   11f98:	sub	r1, r1, r0
   11f9c:	asr	r1, r1, #2
   11fa0:	add	r1, r1, r1, lsr #31
   11fa4:	asrs	r1, r1, #1
   11fa8:	bxeq	lr
   11fac:	ldr	r3, [pc, #16]	; 11fc4 <__assert_fail@plt+0xe18>
   11fb0:	cmp	r3, #0
   11fb4:	bxeq	lr
   11fb8:	bx	r3
   11fbc:	andeq	fp, r2, r4, ror #2
   11fc0:	andeq	fp, r2, r4, ror #2
   11fc4:	andeq	r0, r0, r0
   11fc8:	push	{r4, lr}
   11fcc:	ldr	r4, [pc, #24]	; 11fec <__assert_fail@plt+0xe40>
   11fd0:	ldrb	r3, [r4]
   11fd4:	cmp	r3, #0
   11fd8:	popne	{r4, pc}
   11fdc:	bl	11f60 <__assert_fail@plt+0xdb4>
   11fe0:	mov	r3, #1
   11fe4:	strb	r3, [r4]
   11fe8:	pop	{r4, pc}
   11fec:	andeq	fp, r2, r4, lsl #3
   11ff0:	ldr	r0, [pc, #40]	; 12020 <__assert_fail@plt+0xe74>
   11ff4:	ldr	r3, [r0]
   11ff8:	cmp	r3, #0
   11ffc:	bne	12004 <__assert_fail@plt+0xe58>
   12000:	b	11f90 <__assert_fail@plt+0xde4>
   12004:	ldr	r3, [pc, #24]	; 12024 <__assert_fail@plt+0xe78>
   12008:	cmp	r3, #0
   1200c:	beq	12000 <__assert_fail@plt+0xe54>
   12010:	push	{r4, lr}
   12014:	blx	r3
   12018:	pop	{r4, lr}
   1201c:	b	11f90 <__assert_fail@plt+0xde4>
   12020:	andeq	sl, r2, r4, lsl pc
   12024:	andeq	r0, r0, r0
   12028:	subs	r5, r0, #0
   1202c:	push	{r7, lr}
   12030:	sub	sp, sp, #64	; 0x40
   12034:	beq	12070 <__assert_fail@plt+0xec4>
   12038:	ldr	r3, [pc, #740]	; 12324 <__assert_fail@plt+0x1178>
   1203c:	mov	r2, #5
   12040:	ldr	r1, [pc, #736]	; 12328 <__assert_fail@plt+0x117c>
   12044:	mov	r0, #0
   12048:	ldr	r4, [r3]
   1204c:	bl	10f54 <dcgettext@plt>
   12050:	ldr	r3, [pc, #724]	; 1232c <__assert_fail@plt+0x1180>
   12054:	mov	r1, #1
   12058:	ldr	r3, [r3]
   1205c:	mov	r2, r0
   12060:	mov	r0, r4
   12064:	bl	110b0 <__fprintf_chk@plt>
   12068:	mov	r0, r5
   1206c:	bl	11038 <exit@plt>
   12070:	mov	r2, #5
   12074:	ldr	r1, [pc, #692]	; 12330 <__assert_fail@plt+0x1184>
   12078:	bl	10f54 <dcgettext@plt>
   1207c:	ldr	r3, [pc, #680]	; 1232c <__assert_fail@plt+0x1180>
   12080:	ldr	r7, [pc, #684]	; 12334 <__assert_fail@plt+0x1188>
   12084:	ldr	r4, [pc, #684]	; 12338 <__assert_fail@plt+0x118c>
   12088:	ldr	r3, [r3]
   1208c:	mov	r2, r3
   12090:	str	r3, [sp]
   12094:	mov	r1, r0
   12098:	mov	r0, #1
   1209c:	bl	11098 <__printf_chk@plt>
   120a0:	mov	r2, #5
   120a4:	ldr	r1, [pc, #656]	; 1233c <__assert_fail@plt+0x1190>
   120a8:	mov	r0, r5
   120ac:	bl	10f54 <dcgettext@plt>
   120b0:	ldr	r1, [r7]
   120b4:	bl	10ed0 <fputs_unlocked@plt>
   120b8:	mov	r2, #5
   120bc:	ldr	r1, [pc, #636]	; 12340 <__assert_fail@plt+0x1194>
   120c0:	mov	r0, r5
   120c4:	bl	10f54 <dcgettext@plt>
   120c8:	ldr	r1, [r7]
   120cc:	bl	10ed0 <fputs_unlocked@plt>
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #616]	; 12344 <__assert_fail@plt+0x1198>
   120d8:	mov	r0, r5
   120dc:	bl	10f54 <dcgettext@plt>
   120e0:	ldr	r1, [r7]
   120e4:	bl	10ed0 <fputs_unlocked@plt>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #596]	; 12348 <__assert_fail@plt+0x119c>
   120f0:	mov	r0, r5
   120f4:	bl	10f54 <dcgettext@plt>
   120f8:	ldr	r1, [r7]
   120fc:	bl	10ed0 <fputs_unlocked@plt>
   12100:	mov	r2, #5
   12104:	ldr	r1, [pc, #576]	; 1234c <__assert_fail@plt+0x11a0>
   12108:	mov	r0, r5
   1210c:	bl	10f54 <dcgettext@plt>
   12110:	ldr	r1, [r7]
   12114:	bl	10ed0 <fputs_unlocked@plt>
   12118:	mov	r2, #5
   1211c:	ldr	r1, [pc, #556]	; 12350 <__assert_fail@plt+0x11a4>
   12120:	mov	r0, r5
   12124:	bl	10f54 <dcgettext@plt>
   12128:	ldr	r1, [r7]
   1212c:	bl	10ed0 <fputs_unlocked@plt>
   12130:	mov	r2, #5
   12134:	ldr	r1, [pc, #536]	; 12354 <__assert_fail@plt+0x11a8>
   12138:	mov	r0, r5
   1213c:	bl	10f54 <dcgettext@plt>
   12140:	ldr	r1, [r7]
   12144:	bl	10ed0 <fputs_unlocked@plt>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #516]	; 12358 <__assert_fail@plt+0x11ac>
   12150:	mov	r0, r5
   12154:	bl	10f54 <dcgettext@plt>
   12158:	ldr	r1, [r7]
   1215c:	bl	10ed0 <fputs_unlocked@plt>
   12160:	ldm	r4!, {r0, r1, r2, r3}
   12164:	add	lr, sp, #8
   12168:	stmia	lr!, {r0, r1, r2, r3}
   1216c:	ldm	r4!, {r0, r1, r2, r3}
   12170:	ldr	ip, [sp, #8]
   12174:	stmia	lr!, {r0, r1, r2, r3}
   12178:	cmp	ip, #0
   1217c:	ldm	r4!, {r0, r1, r2, r3}
   12180:	stmia	lr!, {r0, r1, r2, r3}
   12184:	ldm	r4, {r0, r1}
   12188:	addeq	r4, sp, #8
   1218c:	stm	lr, {r0, r1}
   12190:	beq	121c0 <__assert_fail@plt+0x1014>
   12194:	ldr	r6, [pc, #448]	; 1235c <__assert_fail@plt+0x11b0>
   12198:	add	r4, sp, #8
   1219c:	b	121ac <__assert_fail@plt+0x1000>
   121a0:	ldr	ip, [r4, #8]!
   121a4:	cmp	ip, #0
   121a8:	beq	121c0 <__assert_fail@plt+0x1014>
   121ac:	mov	r1, ip
   121b0:	mov	r0, r6
   121b4:	bl	10ee8 <strcmp@plt>
   121b8:	cmp	r0, #0
   121bc:	bne	121a0 <__assert_fail@plt+0xff4>
   121c0:	ldr	r4, [r4, #4]
   121c4:	mov	r2, #5
   121c8:	cmp	r4, #0
   121cc:	ldr	r1, [pc, #396]	; 12360 <__assert_fail@plt+0x11b4>
   121d0:	beq	12278 <__assert_fail@plt+0x10cc>
   121d4:	mov	r0, #0
   121d8:	bl	10f54 <dcgettext@plt>
   121dc:	ldr	r3, [pc, #384]	; 12364 <__assert_fail@plt+0x11b8>
   121e0:	ldr	r2, [pc, #384]	; 12368 <__assert_fail@plt+0x11bc>
   121e4:	mov	r1, r0
   121e8:	mov	r0, #1
   121ec:	bl	11098 <__printf_chk@plt>
   121f0:	mov	r1, #0
   121f4:	mov	r0, #5
   121f8:	bl	110e0 <setlocale@plt>
   121fc:	cmp	r0, #0
   12200:	ldreq	r6, [pc, #340]	; 1235c <__assert_fail@plt+0x11b0>
   12204:	beq	12220 <__assert_fail@plt+0x1074>
   12208:	mov	r2, #3
   1220c:	ldr	r1, [pc, #344]	; 1236c <__assert_fail@plt+0x11c0>
   12210:	bl	11170 <strncmp@plt>
   12214:	ldr	r6, [pc, #320]	; 1235c <__assert_fail@plt+0x11b0>
   12218:	cmp	r0, #0
   1221c:	bne	12308 <__assert_fail@plt+0x115c>
   12220:	mov	r2, #5
   12224:	ldr	r1, [pc, #324]	; 12370 <__assert_fail@plt+0x11c4>
   12228:	mov	r0, #0
   1222c:	bl	10f54 <dcgettext@plt>
   12230:	ldr	r3, [pc, #292]	; 1235c <__assert_fail@plt+0x11b0>
   12234:	ldr	r2, [pc, #296]	; 12364 <__assert_fail@plt+0x11b8>
   12238:	mov	r1, r0
   1223c:	mov	r0, #1
   12240:	bl	11098 <__printf_chk@plt>
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #292]	; 12374 <__assert_fail@plt+0x11c8>
   1224c:	mov	r0, #0
   12250:	bl	10f54 <dcgettext@plt>
   12254:	ldr	r2, [pc, #284]	; 12378 <__assert_fail@plt+0x11cc>
   12258:	cmp	r4, r6
   1225c:	ldr	r3, [pc, #280]	; 1237c <__assert_fail@plt+0x11d0>
   12260:	movne	r3, r2
   12264:	mov	r1, r0
   12268:	mov	r2, r4
   1226c:	mov	r0, #1
   12270:	bl	11098 <__printf_chk@plt>
   12274:	b	12068 <__assert_fail@plt+0xebc>
   12278:	mov	r0, r4
   1227c:	bl	10f54 <dcgettext@plt>
   12280:	ldr	r3, [pc, #220]	; 12364 <__assert_fail@plt+0x11b8>
   12284:	ldr	r2, [pc, #220]	; 12368 <__assert_fail@plt+0x11bc>
   12288:	mov	r1, r0
   1228c:	mov	r0, #1
   12290:	bl	11098 <__printf_chk@plt>
   12294:	mov	r1, r4
   12298:	mov	r0, #5
   1229c:	bl	110e0 <setlocale@plt>
   122a0:	cmp	r0, #0
   122a4:	beq	122bc <__assert_fail@plt+0x1110>
   122a8:	mov	r2, #3
   122ac:	ldr	r1, [pc, #184]	; 1236c <__assert_fail@plt+0x11c0>
   122b0:	bl	11170 <strncmp@plt>
   122b4:	cmp	r0, #0
   122b8:	bne	12300 <__assert_fail@plt+0x1154>
   122bc:	mov	r2, #5
   122c0:	ldr	r1, [pc, #168]	; 12370 <__assert_fail@plt+0x11c4>
   122c4:	mov	r0, #0
   122c8:	bl	10f54 <dcgettext@plt>
   122cc:	ldr	r3, [pc, #136]	; 1235c <__assert_fail@plt+0x11b0>
   122d0:	ldr	r2, [pc, #140]	; 12364 <__assert_fail@plt+0x11b8>
   122d4:	mov	r4, r3
   122d8:	mov	r1, r0
   122dc:	mov	r0, #1
   122e0:	bl	11098 <__printf_chk@plt>
   122e4:	ldr	r1, [pc, #136]	; 12374 <__assert_fail@plt+0x11c8>
   122e8:	mov	r2, #5
   122ec:	mov	r0, #0
   122f0:	bl	10f54 <dcgettext@plt>
   122f4:	ldr	r3, [pc, #128]	; 1237c <__assert_fail@plt+0x11d0>
   122f8:	mov	r1, r0
   122fc:	b	12268 <__assert_fail@plt+0x10bc>
   12300:	ldr	r6, [pc, #84]	; 1235c <__assert_fail@plt+0x11b0>
   12304:	mov	r4, r6
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #108]	; 12380 <__assert_fail@plt+0x11d4>
   12310:	mov	r0, #0
   12314:	bl	10f54 <dcgettext@plt>
   12318:	ldr	r1, [r7]
   1231c:	bl	10ed0 <fputs_unlocked@plt>
   12320:	b	12220 <__assert_fail@plt+0x1074>
   12324:	andeq	fp, r2, r8, ror r1
   12328:	andeq	r9, r1, ip, lsl r8
   1232c:			; <UNDEFINED> instruction: 0x0002b1b0
   12330:	andeq	r9, r1, r4, asr #16
   12334:	andeq	fp, r2, ip, ror r1
   12338:	andeq	r9, r1, ip, lsr #14
   1233c:	andeq	r9, r1, ip, asr #17
   12340:	andeq	r9, r1, r8, lsr r9
   12344:	andeq	r9, r1, r4, lsl #20
   12348:	andeq	r9, r1, r4, lsl #21
   1234c:	andeq	r9, r1, r8, asr #21
   12350:	andeq	r9, r1, ip, lsl #22
   12354:	andeq	r9, r1, ip, lsr fp
   12358:	andeq	r9, r1, r4, ror fp
   1235c:	andeq	r9, r1, r4, lsl r8
   12360:	andeq	r9, r1, r0, asr #23
   12364:	ldrdeq	r9, [r1], -r8
   12368:	andeq	r9, r1, r0, lsl #24
   1236c:	andeq	r9, r1, r0, lsl ip
   12370:	andeq	r9, r1, ip, asr ip
   12374:	andeq	r9, r1, r8, ror ip
   12378:	andeq	r9, r1, r4, lsr r9
   1237c:	andeq	sl, r1, r0, ror #1
   12380:	andeq	r9, r1, r4, lsl ip
   12384:	ldr	r3, [pc, #4]	; 12390 <__assert_fail@plt+0x11e4>
   12388:	str	r0, [r3]
   1238c:	bx	lr
   12390:	andeq	fp, r2, r8, lsr #3
   12394:	ldr	r3, [pc, #4]	; 123a0 <__assert_fail@plt+0x11f4>
   12398:	strb	r0, [r3, #4]
   1239c:	bx	lr
   123a0:	andeq	fp, r2, r8, lsr #3
   123a4:	ldr	r3, [pc, #192]	; 1246c <__assert_fail@plt+0x12c0>
   123a8:	push	{r4, r5, r6, lr}
   123ac:	sub	sp, sp, #8
   123b0:	ldr	r0, [r3]
   123b4:	bl	189a0 <__assert_fail@plt+0x77f4>
   123b8:	cmp	r0, #0
   123bc:	beq	123e0 <__assert_fail@plt+0x1234>
   123c0:	ldr	r4, [pc, #168]	; 12470 <__assert_fail@plt+0x12c4>
   123c4:	ldrb	r3, [r4, #4]
   123c8:	cmp	r3, #0
   123cc:	beq	123fc <__assert_fail@plt+0x1250>
   123d0:	bl	11068 <__errno_location@plt>
   123d4:	ldr	r3, [r0]
   123d8:	cmp	r3, #32
   123dc:	bne	123fc <__assert_fail@plt+0x1250>
   123e0:	ldr	r3, [pc, #140]	; 12474 <__assert_fail@plt+0x12c8>
   123e4:	ldr	r0, [r3]
   123e8:	bl	189a0 <__assert_fail@plt+0x77f4>
   123ec:	cmp	r0, #0
   123f0:	bne	12444 <__assert_fail@plt+0x1298>
   123f4:	add	sp, sp, #8
   123f8:	pop	{r4, r5, r6, pc}
   123fc:	mov	r2, #5
   12400:	ldr	r1, [pc, #112]	; 12478 <__assert_fail@plt+0x12cc>
   12404:	mov	r0, #0
   12408:	bl	10f54 <dcgettext@plt>
   1240c:	ldr	r4, [r4]
   12410:	cmp	r4, #0
   12414:	mov	r5, r0
   12418:	beq	12450 <__assert_fail@plt+0x12a4>
   1241c:	bl	11068 <__errno_location@plt>
   12420:	ldr	r6, [r0]
   12424:	mov	r0, r4
   12428:	bl	17b6c <__assert_fail@plt+0x69c0>
   1242c:	mov	r1, r6
   12430:	str	r5, [sp]
   12434:	ldr	r2, [pc, #64]	; 1247c <__assert_fail@plt+0x12d0>
   12438:	mov	r3, r0
   1243c:	mov	r0, #0
   12440:	bl	10fd8 <error@plt>
   12444:	ldr	r3, [pc, #52]	; 12480 <__assert_fail@plt+0x12d4>
   12448:	ldr	r0, [r3]
   1244c:	bl	10f18 <_exit@plt>
   12450:	bl	11068 <__errno_location@plt>
   12454:	mov	r3, r5
   12458:	ldr	r2, [pc, #36]	; 12484 <__assert_fail@plt+0x12d8>
   1245c:	ldr	r1, [r0]
   12460:	mov	r0, r4
   12464:	bl	10fd8 <error@plt>
   12468:	b	12444 <__assert_fail@plt+0x1298>
   1246c:	andeq	fp, r2, ip, ror r1
   12470:	andeq	fp, r2, r8, lsr #3
   12474:	andeq	fp, r2, r8, ror r1
   12478:	andeq	sl, r1, r0, asr #3
   1247c:	andeq	sl, r1, ip, asr #3
   12480:	andeq	fp, r2, r0, lsr #2
   12484:	ldrdeq	sl, [r1], -r0
   12488:	cmp	r3, #256	; 0x100
   1248c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12490:	mov	r6, r2
   12494:	sub	sp, sp, #144	; 0x90
   12498:	mov	r7, r0
   1249c:	mov	r8, r1
   124a0:	movne	r4, r3
   124a4:	beq	124cc <__assert_fail@plt+0x1320>
   124a8:	mov	r3, r4
   124ac:	mov	r2, r6
   124b0:	mov	r1, r8
   124b4:	mov	r0, r7
   124b8:	bl	1105c <fchmodat@plt>
   124bc:	mov	r5, r0
   124c0:	mov	r0, r5
   124c4:	add	sp, sp, #144	; 0x90
   124c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124cc:	mov	r2, #2654208	; 0x288000
   124d0:	bl	11050 <openat64@plt>
   124d4:	subs	r5, r0, #0
   124d8:	blt	124c0 <__assert_fail@plt+0x1314>
   124dc:	mov	r3, #4096	; 0x1000
   124e0:	str	r3, [sp]
   124e4:	ldr	r2, [pc, #188]	; 125a8 <__assert_fail@plt+0x13fc>
   124e8:	add	r3, sp, #40	; 0x28
   124ec:	mov	r1, r5
   124f0:	mov	r0, #3
   124f4:	bl	10f78 <__fxstatat64@plt>
   124f8:	subs	r4, r0, #0
   124fc:	bne	1256c <__assert_fail@plt+0x13c0>
   12500:	ldr	r3, [sp, #56]	; 0x38
   12504:	and	r3, r3, #61440	; 0xf000
   12508:	cmp	r3, #40960	; 0xa000
   1250c:	beq	1258c <__assert_fail@plt+0x13e0>
   12510:	ldr	r3, [pc, #148]	; 125ac <__assert_fail@plt+0x1400>
   12514:	mov	r2, #26
   12518:	str	r5, [sp]
   1251c:	mov	r1, #1
   12520:	add	r0, sp, #12
   12524:	bl	11074 <__sprintf_chk@plt>
   12528:	mov	r1, r6
   1252c:	add	r0, sp, #12
   12530:	bl	11158 <chmod@plt>
   12534:	mov	r9, r0
   12538:	bl	11068 <__errno_location@plt>
   1253c:	mov	sl, r0
   12540:	mov	r0, r5
   12544:	ldr	r5, [sl]
   12548:	bl	11188 <close@plt>
   1254c:	cmp	r9, #0
   12550:	moveq	r5, r9
   12554:	beq	124c0 <__assert_fail@plt+0x1314>
   12558:	cmp	r5, #2
   1255c:	beq	124a8 <__assert_fail@plt+0x12fc>
   12560:	str	r5, [sl]
   12564:	mov	r5, r9
   12568:	b	124c0 <__assert_fail@plt+0x1314>
   1256c:	bl	11068 <__errno_location@plt>
   12570:	mov	r4, r0
   12574:	mov	r0, r5
   12578:	ldr	r6, [r4]
   1257c:	mvn	r5, #0
   12580:	bl	11188 <close@plt>
   12584:	str	r6, [r4]
   12588:	b	124c0 <__assert_fail@plt+0x1314>
   1258c:	mov	r0, r5
   12590:	bl	11188 <close@plt>
   12594:	bl	11068 <__errno_location@plt>
   12598:	mov	r3, #95	; 0x5f
   1259c:	mvn	r5, #0
   125a0:	str	r3, [r0]
   125a4:	b	124c0 <__assert_fail@plt+0x1314>
   125a8:	andeq	r9, r1, r4, lsr r9
   125ac:	ldrdeq	sl, [r1], -r4
   125b0:	and	r3, r0, #61440	; 0xf000
   125b4:	cmp	r3, #32768	; 0x8000
   125b8:	moveq	r3, #45	; 0x2d
   125bc:	beq	12608 <__assert_fail@plt+0x145c>
   125c0:	cmp	r3, #16384	; 0x4000
   125c4:	moveq	r3, #100	; 0x64
   125c8:	beq	12608 <__assert_fail@plt+0x145c>
   125cc:	cmp	r3, #24576	; 0x6000
   125d0:	moveq	r3, #98	; 0x62
   125d4:	beq	12608 <__assert_fail@plt+0x145c>
   125d8:	cmp	r3, #8192	; 0x2000
   125dc:	moveq	r3, #99	; 0x63
   125e0:	beq	12608 <__assert_fail@plt+0x145c>
   125e4:	cmp	r3, #40960	; 0xa000
   125e8:	moveq	r3, #108	; 0x6c
   125ec:	beq	12608 <__assert_fail@plt+0x145c>
   125f0:	cmp	r3, #4096	; 0x1000
   125f4:	moveq	r3, #112	; 0x70
   125f8:	beq	12608 <__assert_fail@plt+0x145c>
   125fc:	cmp	r3, #49152	; 0xc000
   12600:	moveq	r3, #115	; 0x73
   12604:	movne	r3, #63	; 0x3f
   12608:	tst	r0, #256	; 0x100
   1260c:	movne	ip, #114	; 0x72
   12610:	moveq	ip, #45	; 0x2d
   12614:	tst	r0, #128	; 0x80
   12618:	movne	r2, #119	; 0x77
   1261c:	moveq	r2, #45	; 0x2d
   12620:	tst	r0, #2048	; 0x800
   12624:	strb	r3, [r1]
   12628:	strb	ip, [r1, #1]
   1262c:	strb	r2, [r1, #2]
   12630:	beq	126c8 <__assert_fail@plt+0x151c>
   12634:	tst	r0, #64	; 0x40
   12638:	movne	ip, #115	; 0x73
   1263c:	moveq	ip, #83	; 0x53
   12640:	tst	r0, #32
   12644:	movne	r2, #114	; 0x72
   12648:	moveq	r2, #45	; 0x2d
   1264c:	tst	r0, #16
   12650:	movne	r3, #119	; 0x77
   12654:	moveq	r3, #45	; 0x2d
   12658:	tst	r0, #1024	; 0x400
   1265c:	strb	ip, [r1, #3]
   12660:	strb	r2, [r1, #4]
   12664:	strb	r3, [r1, #5]
   12668:	beq	126e8 <__assert_fail@plt+0x153c>
   1266c:	tst	r0, #8
   12670:	movne	ip, #115	; 0x73
   12674:	moveq	ip, #83	; 0x53
   12678:	tst	r0, #4
   1267c:	movne	r2, #114	; 0x72
   12680:	moveq	r2, #45	; 0x2d
   12684:	tst	r0, #2
   12688:	movne	r3, #119	; 0x77
   1268c:	moveq	r3, #45	; 0x2d
   12690:	tst	r0, #512	; 0x200
   12694:	strb	ip, [r1, #6]
   12698:	strb	r2, [r1, #7]
   1269c:	strb	r3, [r1, #8]
   126a0:	beq	126d8 <__assert_fail@plt+0x152c>
   126a4:	tst	r0, #1
   126a8:	movne	r0, #116	; 0x74
   126ac:	moveq	r0, #84	; 0x54
   126b0:	mov	r2, #32
   126b4:	mov	r3, #0
   126b8:	strb	r0, [r1, #9]
   126bc:	strb	r2, [r1, #10]
   126c0:	strb	r3, [r1, #11]
   126c4:	bx	lr
   126c8:	tst	r0, #64	; 0x40
   126cc:	movne	ip, #120	; 0x78
   126d0:	moveq	ip, #45	; 0x2d
   126d4:	b	12640 <__assert_fail@plt+0x1494>
   126d8:	tst	r0, #1
   126dc:	movne	r0, #120	; 0x78
   126e0:	moveq	r0, #45	; 0x2d
   126e4:	b	126b0 <__assert_fail@plt+0x1504>
   126e8:	tst	r0, #8
   126ec:	movne	ip, #120	; 0x78
   126f0:	moveq	ip, #45	; 0x2d
   126f4:	b	12678 <__assert_fail@plt+0x14cc>
   126f8:	ldr	r0, [r0, #16]
   126fc:	b	125b0 <__assert_fail@plt+0x1404>
   12700:	ldrd	r2, [r1, #8]
   12704:	push	{r4, r5}
   12708:	ldrd	r4, [r0, #8]
   1270c:	cmp	r5, r3
   12710:	cmpeq	r4, r2
   12714:	movne	r0, #0
   12718:	beq	12724 <__assert_fail@plt+0x1578>
   1271c:	pop	{r4, r5}
   12720:	bx	lr
   12724:	ldrd	r4, [r0]
   12728:	ldrd	r2, [r1]
   1272c:	cmp	r5, r3
   12730:	cmpeq	r4, r2
   12734:	moveq	r0, #1
   12738:	movne	r0, #0
   1273c:	pop	{r4, r5}
   12740:	bx	lr
   12744:	push	{r4, lr}
   12748:	mov	r2, r1
   1274c:	mov	r3, #0
   12750:	ldrd	r0, [r0, #8]
   12754:	bl	19530 <__assert_fail@plt+0x8384>
   12758:	mov	r0, r2
   1275c:	pop	{r4, pc}
   12760:	push	{r4, lr}
   12764:	mov	r2, r1
   12768:	mov	r3, #0
   1276c:	ldrd	r0, [r0]
   12770:	bl	19530 <__assert_fail@plt+0x8384>
   12774:	mov	r0, r2
   12778:	pop	{r4, pc}
   1277c:	push	{r4, r5}
   12780:	ldrd	r2, [r1]
   12784:	ldrd	r4, [r0]
   12788:	cmp	r5, r3
   1278c:	cmpeq	r4, r2
   12790:	moveq	r0, #1
   12794:	movne	r0, #0
   12798:	pop	{r4, r5}
   1279c:	bx	lr
   127a0:	ldr	r2, [r0]
   127a4:	ldr	r3, [r1]
   127a8:	ldrd	r0, [r2, #160]	; 0xa0
   127ac:	ldrd	r2, [r3, #160]	; 0xa0
   127b0:	cmp	r1, r3
   127b4:	cmpeq	r0, r2
   127b8:	movhi	r0, #1
   127bc:	movls	r0, #0
   127c0:	movcc	r3, #1
   127c4:	movcs	r3, #0
   127c8:	sub	r0, r0, r3
   127cc:	bx	lr
   127d0:	ldr	r3, [r0, #40]	; 0x28
   127d4:	push	{r4, r5, r6, r7, r8, lr}
   127d8:	cmp	r3, r2
   127dc:	mov	r6, r0
   127e0:	mov	r5, r2
   127e4:	mov	r4, r1
   127e8:	ldr	r7, [r0, #44]	; 0x2c
   127ec:	bcc	12864 <__assert_fail@plt+0x16b8>
   127f0:	ldr	r0, [r0, #8]
   127f4:	cmp	r4, #0
   127f8:	movne	r2, r0
   127fc:	beq	12810 <__assert_fail@plt+0x1664>
   12800:	str	r4, [r2], #4
   12804:	ldr	r4, [r4, #8]
   12808:	cmp	r4, #0
   1280c:	bne	12800 <__assert_fail@plt+0x1654>
   12810:	mov	r3, r7
   12814:	mov	r2, #4
   12818:	mov	r1, r5
   1281c:	bl	11134 <qsort@plt>
   12820:	ldr	lr, [r6, #8]
   12824:	subs	r3, r5, #1
   12828:	ldr	r0, [lr]
   1282c:	beq	128a8 <__assert_fail@plt+0x16fc>
   12830:	mov	r2, lr
   12834:	mov	ip, r0
   12838:	b	12840 <__assert_fail@plt+0x1694>
   1283c:	ldr	ip, [r2, #4]!
   12840:	ldr	r1, [r2, #4]
   12844:	subs	r3, r3, #1
   12848:	str	r1, [ip, #8]
   1284c:	bne	1283c <__assert_fail@plt+0x1690>
   12850:	add	r5, lr, r5, lsl #2
   12854:	ldr	r2, [r5, #-4]
   12858:	mov	r3, #0
   1285c:	str	r3, [r2, #8]
   12860:	pop	{r4, r5, r6, r7, r8, pc}
   12864:	add	r1, r2, #40	; 0x28
   12868:	cmn	r1, #-1073741823	; 0xc0000001
   1286c:	str	r1, [r0, #40]	; 0x28
   12870:	bhi	1288c <__assert_fail@plt+0x16e0>
   12874:	lsl	r1, r1, #2
   12878:	ldr	r0, [r0, #8]
   1287c:	bl	18944 <__assert_fail@plt+0x7798>
   12880:	cmp	r0, #0
   12884:	strne	r0, [r6, #8]
   12888:	bne	127f4 <__assert_fail@plt+0x1648>
   1288c:	ldr	r0, [r6, #8]
   12890:	bl	18e18 <__assert_fail@plt+0x7c6c>
   12894:	mov	r3, #0
   12898:	mov	r0, r4
   1289c:	str	r3, [r6, #8]
   128a0:	str	r3, [r6, #40]	; 0x28
   128a4:	pop	{r4, r5, r6, r7, r8, pc}
   128a8:	mov	r2, r0
   128ac:	b	12858 <__assert_fail@plt+0x16ac>
   128b0:	add	r3, r2, #176	; 0xb0
   128b4:	push	{r4, r5, r6, r7, r8, lr}
   128b8:	mov	r6, r0
   128bc:	bic	r0, r3, #7
   128c0:	mov	r5, r2
   128c4:	mov	r7, r1
   128c8:	bl	18918 <__assert_fail@plt+0x776c>
   128cc:	subs	r4, r0, #0
   128d0:	beq	1291c <__assert_fail@plt+0x1770>
   128d4:	mov	r1, r7
   128d8:	mov	r2, r5
   128dc:	add	r0, r4, #168	; 0xa8
   128e0:	bl	10f24 <memcpy@plt>
   128e4:	add	r0, r4, r5
   128e8:	ldr	r1, [r6, #24]
   128ec:	mov	r3, #0
   128f0:	mov	r2, #3
   128f4:	strb	r3, [r0, #168]	; 0xa8
   128f8:	str	r3, [r4, #32]
   128fc:	str	r3, [r4, #12]
   12900:	strh	r3, [r4, #58]	; 0x3a
   12904:	str	r3, [r4, #16]
   12908:	str	r3, [r4, #20]
   1290c:	str	r5, [r4, #52]	; 0x34
   12910:	str	r6, [r4, #44]	; 0x2c
   12914:	str	r1, [r4, #28]
   12918:	strh	r2, [r4, #60]	; 0x3c
   1291c:	mov	r0, r4
   12920:	pop	{r4, r5, r6, r7, r8, pc}
   12924:	push	{r4, r5, r6, lr}
   12928:	subs	r4, r0, #0
   1292c:	popeq	{r4, r5, r6, pc}
   12930:	ldr	r3, [r4, #12]
   12934:	ldr	r5, [r4, #8]
   12938:	subs	r0, r3, #0
   1293c:	beq	12944 <__assert_fail@plt+0x1798>
   12940:	bl	111a0 <closedir@plt>
   12944:	mov	r0, r4
   12948:	bl	18e18 <__assert_fail@plt+0x7c6c>
   1294c:	subs	r4, r5, #0
   12950:	bne	12930 <__assert_fail@plt+0x1784>
   12954:	pop	{r4, r5, r6, pc}
   12958:	push	{r4, lr}
   1295c:	mov	r4, r0
   12960:	b	12970 <__assert_fail@plt+0x17c4>
   12964:	bl	15850 <__assert_fail@plt+0x46a4>
   12968:	cmp	r0, #0
   1296c:	bge	12988 <__assert_fail@plt+0x17dc>
   12970:	mov	r0, r4
   12974:	bl	15804 <__assert_fail@plt+0x4658>
   12978:	cmp	r0, #0
   1297c:	mov	r0, r4
   12980:	beq	12964 <__assert_fail@plt+0x17b8>
   12984:	pop	{r4, pc}
   12988:	bl	11188 <close@plt>
   1298c:	b	12970 <__assert_fail@plt+0x17c4>
   12990:	push	{r4, r5, r6, r7, lr}
   12994:	sub	sp, sp, #100	; 0x64
   12998:	ldr	r4, [r0, #44]	; 0x2c
   1299c:	ldr	r3, [r4, #48]	; 0x30
   129a0:	tst	r3, #512	; 0x200
   129a4:	beq	12a18 <__assert_fail@plt+0x186c>
   129a8:	ldr	r6, [r4, #52]	; 0x34
   129ac:	mov	r7, r1
   129b0:	cmp	r6, #0
   129b4:	mov	r5, r0
   129b8:	beq	129e4 <__assert_fail@plt+0x1838>
   129bc:	ldrd	r2, [r5, #64]	; 0x40
   129c0:	add	r1, sp, #96	; 0x60
   129c4:	mov	r0, r6
   129c8:	strd	r2, [r1, #-88]!	; 0xffffffa8
   129cc:	bl	14e00 <__assert_fail@plt+0x3c54>
   129d0:	cmp	r0, #0
   129d4:	beq	12a10 <__assert_fail@plt+0x1864>
   129d8:	ldr	r0, [r0, #8]
   129dc:	add	sp, sp, #100	; 0x64
   129e0:	pop	{r4, r5, r6, r7, pc}
   129e4:	ldr	r3, [pc, #168]	; 12a94 <__assert_fail@plt+0x18e8>
   129e8:	mov	r1, r6
   129ec:	str	r3, [sp]
   129f0:	ldr	r2, [pc, #160]	; 12a98 <__assert_fail@plt+0x18ec>
   129f4:	ldr	r3, [pc, #160]	; 12a9c <__assert_fail@plt+0x18f0>
   129f8:	mov	r0, #13
   129fc:	bl	150a0 <__assert_fail@plt+0x3ef4>
   12a00:	cmp	r0, #0
   12a04:	mov	r6, r0
   12a08:	str	r0, [r4, #52]	; 0x34
   12a0c:	bne	129bc <__assert_fail@plt+0x1810>
   12a10:	cmp	r7, #0
   12a14:	bge	12a24 <__assert_fail@plt+0x1878>
   12a18:	mov	r0, #0
   12a1c:	add	sp, sp, #100	; 0x64
   12a20:	pop	{r4, r5, r6, r7, pc}
   12a24:	mov	r0, r7
   12a28:	add	r1, sp, #8
   12a2c:	bl	10eb8 <fstatfs64@plt>
   12a30:	cmp	r0, #0
   12a34:	bne	12a18 <__assert_fail@plt+0x186c>
   12a38:	cmp	r6, #0
   12a3c:	beq	12a88 <__assert_fail@plt+0x18dc>
   12a40:	mov	r0, #16
   12a44:	bl	18918 <__assert_fail@plt+0x776c>
   12a48:	subs	r4, r0, #0
   12a4c:	beq	12a88 <__assert_fail@plt+0x18dc>
   12a50:	ldrd	r2, [r5, #64]	; 0x40
   12a54:	ldr	r1, [sp, #8]
   12a58:	mov	r0, r6
   12a5c:	str	r1, [r4, #8]
   12a60:	strd	r2, [r4]
   12a64:	mov	r1, r4
   12a68:	bl	15694 <__assert_fail@plt+0x44e8>
   12a6c:	cmp	r0, #0
   12a70:	beq	12a80 <__assert_fail@plt+0x18d4>
   12a74:	cmp	r4, r0
   12a78:	beq	12a88 <__assert_fail@plt+0x18dc>
   12a7c:	bl	1117c <abort@plt>
   12a80:	mov	r0, r4
   12a84:	bl	18e18 <__assert_fail@plt+0x7c6c>
   12a88:	ldr	r0, [sp, #8]
   12a8c:	add	sp, sp, #100	; 0x64
   12a90:	pop	{r4, r5, r6, r7, pc}
   12a94:	andeq	r8, r1, r8, lsl lr
   12a98:	andeq	r2, r1, r0, ror #14
   12a9c:	andeq	r2, r1, ip, ror r7
   12aa0:	push	{r4, r5, r6, lr}
   12aa4:	mov	r5, r1
   12aa8:	ldr	r1, [r0, #32]
   12aac:	cmn	r1, #100	; 0x64
   12ab0:	sub	r3, r1, r5
   12ab4:	clz	r3, r3
   12ab8:	lsr	r3, r3, #5
   12abc:	moveq	r3, #0
   12ac0:	cmp	r3, #0
   12ac4:	bne	12b1c <__assert_fail@plt+0x1970>
   12ac8:	cmp	r2, #0
   12acc:	mov	r4, r0
   12ad0:	bne	12b04 <__assert_fail@plt+0x1958>
   12ad4:	ldr	r3, [r0, #48]	; 0x30
   12ad8:	lsr	r3, r3, #2
   12adc:	eor	r3, r3, #1
   12ae0:	cmp	r1, #0
   12ae4:	movlt	r3, #0
   12ae8:	andge	r3, r3, #1
   12aec:	cmp	r3, #0
   12af0:	beq	12afc <__assert_fail@plt+0x1950>
   12af4:	mov	r0, r1
   12af8:	bl	11188 <close@plt>
   12afc:	str	r5, [r4, #32]
   12b00:	pop	{r4, r5, r6, pc}
   12b04:	add	r0, r0, #60	; 0x3c
   12b08:	bl	1580c <__assert_fail@plt+0x4660>
   12b0c:	cmp	r0, #0
   12b10:	bge	12af8 <__assert_fail@plt+0x194c>
   12b14:	str	r5, [r4, #32]
   12b18:	pop	{r4, r5, r6, pc}
   12b1c:	bl	1117c <abort@plt>
   12b20:	ldr	r3, [r0, #48]	; 0x30
   12b24:	push	{r4, r5, r6, lr}
   12b28:	ands	r5, r3, #4
   12b2c:	mov	r4, r0
   12b30:	movne	r5, #0
   12b34:	bne	12b50 <__assert_fail@plt+0x19a4>
   12b38:	tst	r3, #512	; 0x200
   12b3c:	bne	12b60 <__assert_fail@plt+0x19b4>
   12b40:	ldr	r0, [r0, #28]
   12b44:	bl	11128 <fchdir@plt>
   12b48:	adds	r5, r0, #0
   12b4c:	movne	r5, #1
   12b50:	add	r0, r4, #60	; 0x3c
   12b54:	bl	12958 <__assert_fail@plt+0x17ac>
   12b58:	mov	r0, r5
   12b5c:	pop	{r4, r5, r6, pc}
   12b60:	mov	r2, #1
   12b64:	mvn	r1, #99	; 0x63
   12b68:	bl	12aa0 <__assert_fail@plt+0x18f4>
   12b6c:	b	12b50 <__assert_fail@plt+0x19a4>
   12b70:	push	{r4, r5, r6, lr}
   12b74:	mov	r4, r2
   12b78:	ldr	r2, [r2, #48]	; 0x30
   12b7c:	sub	sp, sp, #8
   12b80:	cmp	r2, #0
   12b84:	add	r5, r4, #64	; 0x40
   12b88:	bne	12be0 <__assert_fail@plt+0x1a34>
   12b8c:	tst	r1, #1
   12b90:	beq	12be0 <__assert_fail@plt+0x1a34>
   12b94:	mov	r2, r5
   12b98:	ldr	r1, [r4, #24]
   12b9c:	mov	r0, #3
   12ba0:	bl	11164 <__xstat64@plt>
   12ba4:	cmp	r0, #0
   12ba8:	beq	12c1c <__assert_fail@plt+0x1a70>
   12bac:	bl	11068 <__errno_location@plt>
   12bb0:	ldr	r3, [r0]
   12bb4:	mov	r6, r0
   12bb8:	cmp	r3, #2
   12bbc:	beq	12c94 <__assert_fail@plt+0x1ae8>
   12bc0:	str	r3, [r4, #32]
   12bc4:	mov	r0, r5
   12bc8:	mov	r2, #104	; 0x68
   12bcc:	mov	r1, #0
   12bd0:	bl	1108c <memset@plt>
   12bd4:	mov	r0, #10
   12bd8:	add	sp, sp, #8
   12bdc:	pop	{r4, r5, r6, pc}
   12be0:	lsl	r1, r1, #30
   12be4:	orrs	r3, r3, r1, lsr #31
   12be8:	bne	12b94 <__assert_fail@plt+0x19e8>
   12bec:	mov	r3, #256	; 0x100
   12bf0:	ldr	r2, [r4, #24]
   12bf4:	mov	r1, r0
   12bf8:	str	r3, [sp]
   12bfc:	mov	r0, #3
   12c00:	mov	r3, r5
   12c04:	bl	10f78 <__fxstatat64@plt>
   12c08:	cmp	r0, #0
   12c0c:	beq	12c1c <__assert_fail@plt+0x1a70>
   12c10:	bl	11068 <__errno_location@plt>
   12c14:	ldr	r3, [r0]
   12c18:	b	12bc0 <__assert_fail@plt+0x1a14>
   12c1c:	ldr	r0, [r4, #80]	; 0x50
   12c20:	and	r0, r0, #61440	; 0xf000
   12c24:	cmp	r0, #16384	; 0x4000
   12c28:	beq	12c4c <__assert_fail@plt+0x1aa0>
   12c2c:	cmp	r0, #40960	; 0xa000
   12c30:	moveq	r0, #12
   12c34:	beq	12bd8 <__assert_fail@plt+0x1a2c>
   12c38:	cmp	r0, #32768	; 0x8000
   12c3c:	movne	r0, #3
   12c40:	moveq	r0, #8
   12c44:	add	sp, sp, #8
   12c48:	pop	{r4, r5, r6, pc}
   12c4c:	ldrb	r3, [r4, #168]	; 0xa8
   12c50:	cmp	r3, #46	; 0x2e
   12c54:	beq	12c60 <__assert_fail@plt+0x1ab4>
   12c58:	mov	r0, #1
   12c5c:	b	12bd8 <__assert_fail@plt+0x1a2c>
   12c60:	ldrb	r3, [r4, #169]	; 0xa9
   12c64:	cmp	r3, #0
   12c68:	beq	12c80 <__assert_fail@plt+0x1ad4>
   12c6c:	ldr	r3, [r4, #168]	; 0xa8
   12c70:	bic	r3, r3, #-16777216	; 0xff000000
   12c74:	bic	r3, r3, #255	; 0xff
   12c78:	cmp	r3, #11776	; 0x2e00
   12c7c:	bne	12c58 <__assert_fail@plt+0x1aac>
   12c80:	ldr	r0, [r4, #48]	; 0x30
   12c84:	cmp	r0, #0
   12c88:	movne	r0, #5
   12c8c:	moveq	r0, #1
   12c90:	b	12bd8 <__assert_fail@plt+0x1a2c>
   12c94:	mov	r2, r5
   12c98:	ldr	r1, [r4, #24]
   12c9c:	mov	r0, #3
   12ca0:	bl	11194 <__lxstat64@plt>
   12ca4:	cmp	r0, #0
   12ca8:	streq	r0, [r6]
   12cac:	moveq	r0, #13
   12cb0:	beq	12bd8 <__assert_fail@plt+0x1a2c>
   12cb4:	ldr	r3, [r6]
   12cb8:	b	12bc0 <__assert_fail@plt+0x1a14>
   12cbc:	push	{r4, r5, r6, lr}
   12cc0:	mov	r5, r0
   12cc4:	ldr	r0, [r1]
   12cc8:	add	r3, r0, #256	; 0x100
   12ccc:	add	r2, r3, r2
   12cd0:	cmp	r0, r2
   12cd4:	bhi	12d00 <__assert_fail@plt+0x1b54>
   12cd8:	str	r2, [r1]
   12cdc:	ldr	r0, [r5]
   12ce0:	mov	r1, r2
   12ce4:	bl	18944 <__assert_fail@plt+0x7798>
   12ce8:	subs	r4, r0, #0
   12cec:	movne	r3, #1
   12cf0:	strne	r4, [r5]
   12cf4:	beq	12d28 <__assert_fail@plt+0x1b7c>
   12cf8:	mov	r0, r3
   12cfc:	pop	{r4, r5, r6, pc}
   12d00:	ldr	r0, [r5]
   12d04:	mov	r4, #0
   12d08:	bl	18e18 <__assert_fail@plt+0x7c6c>
   12d0c:	str	r4, [r5]
   12d10:	bl	11068 <__errno_location@plt>
   12d14:	mov	r2, #36	; 0x24
   12d18:	mov	r3, r4
   12d1c:	str	r2, [r0]
   12d20:	mov	r0, r3
   12d24:	pop	{r4, r5, r6, pc}
   12d28:	ldr	r0, [r5]
   12d2c:	bl	18e18 <__assert_fail@plt+0x7c6c>
   12d30:	str	r4, [r5]
   12d34:	mov	r3, r4
   12d38:	b	12cf8 <__assert_fail@plt+0x1b4c>
   12d3c:	ldr	r3, [pc, #104]	; 12dac <__assert_fail@plt+0x1c00>
   12d40:	push	{r4, lr}
   12d44:	and	r3, r3, r0
   12d48:	cmp	r3, #0
   12d4c:	sub	sp, sp, #8
   12d50:	mov	r4, r1
   12d54:	beq	12d88 <__assert_fail@plt+0x1bdc>
   12d58:	ldr	r2, [pc, #80]	; 12db0 <__assert_fail@plt+0x1c04>
   12d5c:	ldr	r3, [pc, #80]	; 12db4 <__assert_fail@plt+0x1c08>
   12d60:	str	r2, [sp]
   12d64:	mov	r1, #0
   12d68:	ldr	r2, [pc, #72]	; 12db8 <__assert_fail@plt+0x1c0c>
   12d6c:	mov	r0, #31
   12d70:	bl	150a0 <__assert_fail@plt+0x3ef4>
   12d74:	str	r0, [r4]
   12d78:	adds	r0, r0, #0
   12d7c:	movne	r0, #1
   12d80:	add	sp, sp, #8
   12d84:	pop	{r4, pc}
   12d88:	mov	r0, #32
   12d8c:	bl	18918 <__assert_fail@plt+0x776c>
   12d90:	cmp	r0, #0
   12d94:	str	r0, [r4]
   12d98:	beq	12d80 <__assert_fail@plt+0x1bd4>
   12d9c:	bl	18a1c <__assert_fail@plt+0x7870>
   12da0:	mov	r0, #1
   12da4:	add	sp, sp, #8
   12da8:	pop	{r4, pc}
   12dac:	andeq	r0, r0, r2, lsl #2
   12db0:	andeq	r8, r1, r8, lsl lr
   12db4:	andeq	r2, r1, r0, lsl #14
   12db8:	andeq	r2, r1, r4, asr #14
   12dbc:	ldr	ip, [pc, #44]	; 12df0 <__assert_fail@plt+0x1c44>
   12dc0:	tst	r1, #16
   12dc4:	ldr	r3, [pc, #40]	; 12df4 <__assert_fail@plt+0x1c48>
   12dc8:	moveq	r3, ip
   12dcc:	tst	r1, #512	; 0x200
   12dd0:	mov	ip, r2
   12dd4:	bne	12de4 <__assert_fail@plt+0x1c38>
   12dd8:	mov	r1, r3
   12ddc:	mov	r0, r2
   12de0:	b	18d80 <__assert_fail@plt+0x7bd4>
   12de4:	mov	r2, r3
   12de8:	mov	r1, ip
   12dec:	b	15db8 <__assert_fail@plt+0x4c0c>
   12df0:	andeq	r4, r8, r0, lsl #18
   12df4:	andeq	ip, r8, r0, lsl #18
   12df8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12dfc:	subs	sl, r3, #0
   12e00:	sub	sp, sp, #104	; 0x68
   12e04:	mov	r5, r0
   12e08:	mov	r6, r1
   12e0c:	mov	r4, r2
   12e10:	ldr	r9, [r0, #48]	; 0x30
   12e14:	beq	12e68 <__assert_fail@plt+0x1cbc>
   12e18:	ldr	r1, [pc, #432]	; 12fd0 <__assert_fail@plt+0x1e24>
   12e1c:	mov	r0, sl
   12e20:	bl	10ee8 <strcmp@plt>
   12e24:	cmp	r0, #0
   12e28:	bne	12e68 <__assert_fail@plt+0x1cbc>
   12e2c:	tst	r9, #4
   12e30:	bne	12e70 <__assert_fail@plt+0x1cc4>
   12e34:	cmp	r4, #0
   12e38:	bge	12fbc <__assert_fail@plt+0x1e10>
   12e3c:	tst	r9, #512	; 0x200
   12e40:	bne	12f5c <__assert_fail@plt+0x1db0>
   12e44:	mov	r8, #1
   12e48:	mov	r1, r9
   12e4c:	mov	r2, sl
   12e50:	ldr	r0, [r5, #32]
   12e54:	bl	12dbc <__assert_fail@plt+0x1c10>
   12e58:	subs	r7, r0, #0
   12e5c:	blt	12fb4 <__assert_fail@plt+0x1e08>
   12e60:	ldr	r9, [r5, #48]	; 0x30
   12e64:	b	12ea4 <__assert_fail@plt+0x1cf8>
   12e68:	ands	r8, r9, #4
   12e6c:	beq	12e98 <__assert_fail@plt+0x1cec>
   12e70:	mvn	r3, r4
   12e74:	lsr	r3, r3, #31
   12e78:	ands	r9, r3, r9, lsr #9
   12e7c:	beq	12e8c <__assert_fail@plt+0x1ce0>
   12e80:	mov	r0, r4
   12e84:	bl	11188 <close@plt>
   12e88:	mov	r9, #0
   12e8c:	mov	r0, r9
   12e90:	add	sp, sp, #104	; 0x68
   12e94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e98:	cmp	r4, #0
   12e9c:	movge	r7, r4
   12ea0:	blt	12e48 <__assert_fail@plt+0x1c9c>
   12ea4:	tst	r9, #2
   12ea8:	bne	12ec8 <__assert_fail@plt+0x1d1c>
   12eac:	cmp	sl, #0
   12eb0:	beq	12f20 <__assert_fail@plt+0x1d74>
   12eb4:	mov	r0, sl
   12eb8:	ldr	r1, [pc, #272]	; 12fd0 <__assert_fail@plt+0x1e24>
   12ebc:	bl	10ee8 <strcmp@plt>
   12ec0:	cmp	r0, #0
   12ec4:	bne	12f20 <__assert_fail@plt+0x1d74>
   12ec8:	mov	r2, sp
   12ecc:	mov	r1, r7
   12ed0:	mov	r0, #3
   12ed4:	bl	10f90 <__fxstat64@plt>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f38 <__assert_fail@plt+0x1d8c>
   12ee0:	mvn	r9, #0
   12ee4:	cmp	r4, #0
   12ee8:	bge	12e8c <__assert_fail@plt+0x1ce0>
   12eec:	bl	11068 <__errno_location@plt>
   12ef0:	mov	r4, r0
   12ef4:	mov	r0, r7
   12ef8:	ldr	r5, [r4]
   12efc:	bl	11188 <close@plt>
   12f00:	str	r5, [r4]
   12f04:	b	12e8c <__assert_fail@plt+0x1ce0>
   12f08:	ldrd	r0, [r6, #160]	; 0xa0
   12f0c:	ldrd	r2, [sp, #96]	; 0x60
   12f10:	cmp	r1, r3
   12f14:	cmpeq	r0, r2
   12f18:	bne	12f4c <__assert_fail@plt+0x1da0>
   12f1c:	ldr	r9, [r5, #48]	; 0x30
   12f20:	tst	r9, #512	; 0x200
   12f24:	bne	12f98 <__assert_fail@plt+0x1dec>
   12f28:	mov	r0, r7
   12f2c:	bl	11128 <fchdir@plt>
   12f30:	mov	r9, r0
   12f34:	b	12ee4 <__assert_fail@plt+0x1d38>
   12f38:	ldrd	r0, [r6, #64]	; 0x40
   12f3c:	ldrd	r2, [sp]
   12f40:	cmp	r1, r3
   12f44:	cmpeq	r0, r2
   12f48:	beq	12f08 <__assert_fail@plt+0x1d5c>
   12f4c:	bl	11068 <__errno_location@plt>
   12f50:	mov	r3, #2
   12f54:	str	r3, [r0]
   12f58:	b	12ee0 <__assert_fail@plt+0x1d34>
   12f5c:	add	r7, r5, #60	; 0x3c
   12f60:	mov	r0, r7
   12f64:	bl	15804 <__assert_fail@plt+0x4658>
   12f68:	subs	r8, r0, #0
   12f6c:	bne	12e48 <__assert_fail@plt+0x1c9c>
   12f70:	mov	r0, r7
   12f74:	bl	15850 <__assert_fail@plt+0x46a4>
   12f78:	ldr	r9, [r5, #48]	; 0x30
   12f7c:	subs	r7, r0, #0
   12f80:	blt	12e44 <__assert_fail@plt+0x1c98>
   12f84:	tst	r9, #2
   12f88:	mov	r4, r7
   12f8c:	mov	r8, #1
   12f90:	beq	12f20 <__assert_fail@plt+0x1d74>
   12f94:	b	12ec8 <__assert_fail@plt+0x1d1c>
   12f98:	eor	r2, r8, #1
   12f9c:	mov	r1, r7
   12fa0:	uxtb	r2, r2
   12fa4:	mov	r0, r5
   12fa8:	bl	12aa0 <__assert_fail@plt+0x18f4>
   12fac:	mov	r9, #0
   12fb0:	b	12e8c <__assert_fail@plt+0x1ce0>
   12fb4:	mvn	r9, #0
   12fb8:	b	12e8c <__assert_fail@plt+0x1ce0>
   12fbc:	tst	r9, #2
   12fc0:	mov	r7, r4
   12fc4:	mov	r8, #1
   12fc8:	beq	12eb4 <__assert_fail@plt+0x1d08>
   12fcc:	b	12ec8 <__assert_fail@plt+0x1d1c>
   12fd0:	andeq	sl, r1, r8, lsl r2
   12fd4:	ldr	r3, [pc, #164]	; 13080 <__assert_fail@plt+0x1ed4>
   12fd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12fdc:	and	r3, r3, r0
   12fe0:	cmp	r3, #0
   12fe4:	mov	sl, r1
   12fe8:	mov	r8, r2
   12fec:	beq	13054 <__assert_fail@plt+0x1ea8>
   12ff0:	mov	r0, #24
   12ff4:	bl	18918 <__assert_fail@plt+0x776c>
   12ff8:	subs	r9, r0, #0
   12ffc:	beq	13078 <__assert_fail@plt+0x1ecc>
   13000:	ldrd	r4, [r8, #160]	; 0xa0
   13004:	ldrd	r6, [r8, #64]	; 0x40
   13008:	str	r8, [r9, #16]
   1300c:	strd	r4, [r9, #8]
   13010:	ldr	r0, [sl]
   13014:	strd	r6, [r9]
   13018:	mov	r1, r9
   1301c:	bl	15694 <__assert_fail@plt+0x44e8>
   13020:	cmp	r9, r0
   13024:	mov	r4, r0
   13028:	beq	1304c <__assert_fail@plt+0x1ea0>
   1302c:	mov	r0, r9
   13030:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13034:	cmp	r4, #0
   13038:	beq	13078 <__assert_fail@plt+0x1ecc>
   1303c:	ldr	r2, [r4, #16]
   13040:	mov	r3, #2
   13044:	str	r2, [r8]
   13048:	strh	r3, [r8, #56]	; 0x38
   1304c:	mov	r0, #1
   13050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13054:	ldr	r0, [r1]
   13058:	add	r1, r2, #64	; 0x40
   1305c:	bl	18a40 <__assert_fail@plt+0x7894>
   13060:	cmp	r0, #0
   13064:	beq	1304c <__assert_fail@plt+0x1ea0>
   13068:	mov	r3, #2
   1306c:	str	r8, [r8]
   13070:	strh	r3, [r8, #56]	; 0x38
   13074:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13078:	mov	r0, #0
   1307c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13080:	andeq	r0, r0, r2, lsl #2
   13084:	ldr	r3, [pc, #172]	; 13138 <__assert_fail@plt+0x1f8c>
   13088:	push	{r4, r5, lr}
   1308c:	and	r3, r3, r0
   13090:	cmp	r3, #0
   13094:	sub	sp, sp, #28
   13098:	bne	130e0 <__assert_fail@plt+0x1f34>
   1309c:	ldr	r3, [r2, #4]
   130a0:	cmp	r3, #0
   130a4:	beq	130d8 <__assert_fail@plt+0x1f2c>
   130a8:	ldr	r0, [r3, #48]	; 0x30
   130ac:	cmp	r0, #0
   130b0:	blt	130d8 <__assert_fail@plt+0x1f2c>
   130b4:	ldr	ip, [r1]
   130b8:	ldrd	r0, [ip, #16]
   130bc:	orrs	r1, r0, r1
   130c0:	beq	13134 <__assert_fail@plt+0x1f88>
   130c4:	ldrd	r4, [ip]
   130c8:	ldrd	r0, [r2, #160]	; 0xa0
   130cc:	cmp	r5, r1
   130d0:	cmpeq	r4, r0
   130d4:	beq	13110 <__assert_fail@plt+0x1f64>
   130d8:	add	sp, sp, #28
   130dc:	pop	{r4, r5, pc}
   130e0:	ldrd	r4, [r2, #64]	; 0x40
   130e4:	ldrd	r2, [r2, #160]	; 0xa0
   130e8:	ldr	r0, [r1]
   130ec:	mov	r1, sp
   130f0:	strd	r4, [sp]
   130f4:	strd	r2, [sp, #8]
   130f8:	bl	156cc <__assert_fail@plt+0x4520>
   130fc:	cmp	r0, #0
   13100:	beq	13134 <__assert_fail@plt+0x1f88>
   13104:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13108:	add	sp, sp, #28
   1310c:	pop	{r4, r5, pc}
   13110:	ldrd	r0, [ip, #8]
   13114:	ldrd	r4, [r2, #64]	; 0x40
   13118:	cmp	r1, r5
   1311c:	cmpeq	r0, r4
   13120:	ldrdeq	r0, [r3, #64]	; 0x40
   13124:	ldrdeq	r2, [r3, #160]	; 0xa0
   13128:	strdeq	r0, [ip, #8]
   1312c:	strdeq	r2, [ip]
   13130:	b	130d8 <__assert_fail@plt+0x1f2c>
   13134:	bl	1117c <abort@plt>
   13138:	andeq	r0, r0, r2, lsl #2
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	sub	sp, sp, #68	; 0x44
   13144:	ldr	sl, [r0]
   13148:	mov	r5, r0
   1314c:	str	r1, [sp, #40]	; 0x28
   13150:	ldr	r3, [sl, #12]
   13154:	cmp	r3, #0
   13158:	str	r3, [sp, #44]	; 0x2c
   1315c:	beq	13520 <__assert_fail@plt+0x2374>
   13160:	mov	r0, r3
   13164:	bl	1111c <dirfd@plt>
   13168:	cmp	r0, #0
   1316c:	str	r0, [sp, #60]	; 0x3c
   13170:	blt	138fc <__assert_fail@plt+0x2750>
   13174:	ldr	r3, [r5, #44]	; 0x2c
   13178:	cmp	r3, #0
   1317c:	beq	13a98 <__assert_fail@plt+0x28ec>
   13180:	mvn	r3, #0
   13184:	str	r3, [sp, #20]
   13188:	ldr	r0, [r5, #48]	; 0x30
   1318c:	mov	r3, #1
   13190:	str	r3, [sp, #52]	; 0x34
   13194:	ldr	r3, [sl, #40]	; 0x28
   13198:	ldr	r2, [sl, #28]
   1319c:	mov	r1, r3
   131a0:	sub	r3, r3, #1
   131a4:	str	sl, [sp, #12]
   131a8:	ldrb	r2, [r2, r3]
   131ac:	cmp	r2, #47	; 0x2f
   131b0:	moveq	r1, r3
   131b4:	ands	r0, r0, #4
   131b8:	mov	r2, r1
   131bc:	ldrne	r3, [r5, #24]
   131c0:	movne	r0, r2
   131c4:	str	r1, [sp, #32]
   131c8:	addne	r2, r3, r2
   131cc:	movne	r1, #47	; 0x2f
   131d0:	strbne	r1, [r3, r0]
   131d4:	addne	r3, r2, #1
   131d8:	ldr	r2, [sp, #32]
   131dc:	strne	r3, [sp, #28]
   131e0:	add	r2, r2, #1
   131e4:	ldr	r3, [sl, #48]	; 0x30
   131e8:	ldr	fp, [r5, #36]	; 0x24
   131ec:	mov	r1, r2
   131f0:	str	r2, [sp, #8]
   131f4:	sub	r1, fp, r1
   131f8:	mov	r2, #0
   131fc:	add	r3, r3, #1
   13200:	streq	r0, [sp, #28]
   13204:	str	r2, [sp, #48]	; 0x30
   13208:	str	r1, [sp, #16]
   1320c:	str	r3, [sp, #24]
   13210:	str	r2, [sp, #36]	; 0x24
   13214:	mov	r7, r2
   13218:	str	r2, [sp, #4]
   1321c:	mov	r8, r2
   13220:	mov	sl, r2
   13224:	b	132a4 <__assert_fail@plt+0x20f8>
   13228:	tst	r3, #251	; 0xfb
   1322c:	beq	13378 <__assert_fail@plt+0x21cc>
   13230:	lsr	r2, r2, #4
   13234:	cmp	r3, #10
   13238:	orrne	r2, r2, #1
   1323c:	tst	r2, #1
   13240:	beq	13648 <__assert_fail@plt+0x249c>
   13244:	sub	r3, r3, #1
   13248:	mov	r2, #11
   1324c:	cmp	r3, #11
   13250:	strh	r2, [r4, #56]	; 0x38
   13254:	bhi	13a88 <__assert_fail@plt+0x28dc>
   13258:	ldr	r2, [pc, #2128]	; 13ab0 <__assert_fail@plt+0x2904>
   1325c:	ldr	r1, [r2, r3, lsl #2]
   13260:	mov	r2, #1
   13264:	mov	r3, #0
   13268:	str	r1, [r4, #80]	; 0x50
   1326c:	strd	r2, [r4, #112]	; 0x70
   13270:	ldr	r3, [sp, #4]
   13274:	str	r8, [r4, #8]
   13278:	cmp	r3, #0
   1327c:	ldr	r3, [pc, #2096]	; 13ab4 <__assert_fail@plt+0x2908>
   13280:	strne	r4, [sl, #8]
   13284:	streq	r4, [sp, #4]
   13288:	cmp	r7, r3
   1328c:	beq	13490 <__assert_fail@plt+0x22e4>
   13290:	ldr	r3, [sp, #20]
   13294:	add	r7, r7, #1
   13298:	cmp	r7, r3
   1329c:	bcs	138c4 <__assert_fail@plt+0x2718>
   132a0:	mov	sl, r4
   132a4:	ldr	r3, [sp, #12]
   132a8:	ldr	r4, [r3, #12]
   132ac:	cmp	r4, #0
   132b0:	beq	13718 <__assert_fail@plt+0x256c>
   132b4:	bl	11068 <__errno_location@plt>
   132b8:	mov	r9, r0
   132bc:	mov	r0, r4
   132c0:	str	r8, [r9]
   132c4:	bl	11104 <readdir64@plt>
   132c8:	subs	fp, r0, #0
   132cc:	beq	137f0 <__assert_fail@plt+0x2644>
   132d0:	ldr	r2, [r5, #48]	; 0x30
   132d4:	tst	r2, #32
   132d8:	bne	132e8 <__assert_fail@plt+0x213c>
   132dc:	ldrb	r2, [fp, #19]
   132e0:	cmp	r2, #46	; 0x2e
   132e4:	beq	134f8 <__assert_fail@plt+0x234c>
   132e8:	add	r4, fp, #19
   132ec:	mov	r0, r4
   132f0:	bl	11044 <strlen@plt>
   132f4:	mov	r1, r4
   132f8:	mov	r2, r0
   132fc:	mov	r6, r0
   13300:	mov	r0, r5
   13304:	bl	128b0 <__assert_fail@plt+0x1704>
   13308:	subs	r4, r0, #0
   1330c:	beq	136c8 <__assert_fail@plt+0x251c>
   13310:	ldr	r3, [sp, #16]
   13314:	cmp	r3, r6
   13318:	bls	133b0 <__assert_fail@plt+0x2204>
   1331c:	ldr	r3, [sp, #8]
   13320:	adds	r6, r3, r6
   13324:	bcs	1341c <__assert_fail@plt+0x2270>
   13328:	ldrd	r0, [fp]
   1332c:	ldr	r2, [r5, #48]	; 0x30
   13330:	ldr	ip, [r5]
   13334:	tst	r2, #4
   13338:	ldr	r3, [sp, #24]
   1333c:	strd	r0, [r4, #160]	; 0xa0
   13340:	addeq	r1, r4, #168	; 0xa8
   13344:	str	r3, [r4, #48]	; 0x30
   13348:	str	ip, [r4, #4]
   1334c:	str	r6, [r4, #40]	; 0x28
   13350:	streq	r1, [r4, #24]
   13354:	bne	1346c <__assert_fail@plt+0x22c0>
   13358:	ldr	r1, [r5, #44]	; 0x2c
   1335c:	cmp	r1, #0
   13360:	beq	1336c <__assert_fail@plt+0x21c0>
   13364:	tst	r2, #1024	; 0x400
   13368:	beq	134dc <__assert_fail@plt+0x2330>
   1336c:	tst	r2, #8
   13370:	ldrb	r3, [fp, #18]
   13374:	bne	13228 <__assert_fail@plt+0x207c>
   13378:	sub	r3, r3, #1
   1337c:	cmp	r3, #11
   13380:	mov	r2, #11
   13384:	strh	r2, [r4, #56]	; 0x38
   13388:	strhi	r8, [r4, #80]	; 0x50
   1338c:	movhi	r2, #2
   13390:	movhi	r3, #0
   13394:	bhi	1326c <__assert_fail@plt+0x20c0>
   13398:	ldr	r2, [pc, #1808]	; 13ab0 <__assert_fail@plt+0x2904>
   1339c:	ldr	r1, [r2, r3, lsl #2]
   133a0:	mov	r2, #2
   133a4:	mov	r3, #0
   133a8:	str	r1, [r4, #80]	; 0x50
   133ac:	b	1326c <__assert_fail@plt+0x20c0>
   133b0:	ldr	r3, [sp, #32]
   133b4:	add	r1, r5, #36	; 0x24
   133b8:	add	r2, r3, #2
   133bc:	ldr	r3, [r5, #24]
   133c0:	add	r2, r2, r6
   133c4:	add	r0, r5, #24
   133c8:	str	r3, [sp, #16]
   133cc:	bl	12cbc <__assert_fail@plt+0x1b10>
   133d0:	cmp	r0, #0
   133d4:	beq	136c8 <__assert_fail@plt+0x251c>
   133d8:	ldr	r2, [r5, #24]
   133dc:	ldr	r3, [sp, #16]
   133e0:	cmp	r3, r2
   133e4:	beq	13518 <__assert_fail@plt+0x236c>
   133e8:	ldr	r1, [r5, #48]	; 0x30
   133ec:	tst	r1, #4
   133f0:	ldrne	r3, [sp, #8]
   133f4:	addne	r3, r2, r3
   133f8:	strne	r3, [sp, #28]
   133fc:	ldr	r3, [r5, #36]	; 0x24
   13400:	ldr	r2, [sp, #8]
   13404:	str	r0, [sp, #36]	; 0x24
   13408:	sub	r3, r3, r2
   1340c:	str	r3, [sp, #16]
   13410:	ldr	r3, [sp, #8]
   13414:	adds	r6, r3, r6
   13418:	bcc	13328 <__assert_fail@plt+0x217c>
   1341c:	ldr	sl, [sp, #12]
   13420:	mov	r0, r4
   13424:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13428:	ldr	r0, [sp, #4]
   1342c:	bl	12924 <__assert_fail@plt+0x1778>
   13430:	ldr	r0, [sl, #12]
   13434:	bl	111a0 <closedir@plt>
   13438:	ldr	r3, [r5, #48]	; 0x30
   1343c:	mov	r2, #0
   13440:	orr	r3, r3, #8192	; 0x2000
   13444:	mov	r0, #7
   13448:	mov	r1, #36	; 0x24
   1344c:	str	r2, [sp, #4]
   13450:	strh	r0, [sl, #56]	; 0x38
   13454:	str	r2, [sl, #12]
   13458:	ldr	r0, [sp, #4]
   1345c:	str	r3, [r5, #48]	; 0x30
   13460:	str	r1, [r9]
   13464:	add	sp, sp, #68	; 0x44
   13468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1346c:	ldr	r1, [r4, #28]
   13470:	ldr	r2, [r4, #52]	; 0x34
   13474:	str	r1, [r4, #24]
   13478:	add	r2, r2, #1
   1347c:	add	r1, r4, #168	; 0xa8
   13480:	ldr	r0, [sp, #28]
   13484:	bl	10f00 <memmove@plt>
   13488:	ldr	r2, [r5, #48]	; 0x30
   1348c:	b	13358 <__assert_fail@plt+0x21ac>
   13490:	ldr	r3, [r5, #44]	; 0x2c
   13494:	cmp	r3, #0
   13498:	bne	13290 <__assert_fail@plt+0x20e4>
   1349c:	ldr	r1, [sp, #60]	; 0x3c
   134a0:	ldr	r0, [sp, #12]
   134a4:	bl	12990 <__assert_fail@plt+0x17e4>
   134a8:	ldr	r3, [pc, #1544]	; 13ab8 <__assert_fail@plt+0x290c>
   134ac:	cmp	r0, r3
   134b0:	beq	134d4 <__assert_fail@plt+0x2328>
   134b4:	ldr	r3, [pc, #1536]	; 13abc <__assert_fail@plt+0x2910>
   134b8:	cmp	r0, r3
   134bc:	beq	134d4 <__assert_fail@plt+0x2328>
   134c0:	ldr	r3, [pc, #1528]	; 13ac0 <__assert_fail@plt+0x2914>
   134c4:	cmp	r0, r3
   134c8:	movne	r3, #1
   134cc:	strne	r3, [sp, #48]	; 0x30
   134d0:	bne	13290 <__assert_fail@plt+0x20e4>
   134d4:	str	r8, [sp, #48]	; 0x30
   134d8:	b	13290 <__assert_fail@plt+0x20e4>
   134dc:	mov	r1, r2
   134e0:	mov	r3, r8
   134e4:	mov	r2, r4
   134e8:	ldr	r0, [r5, #32]
   134ec:	bl	12b70 <__assert_fail@plt+0x19c4>
   134f0:	strh	r0, [r4, #56]	; 0x38
   134f4:	b	13270 <__assert_fail@plt+0x20c4>
   134f8:	ldrb	r2, [fp, #20]
   134fc:	cmp	r2, #0
   13500:	beq	13510 <__assert_fail@plt+0x2364>
   13504:	ldrh	r2, [fp, #20]
   13508:	cmp	r2, #46	; 0x2e
   1350c:	bne	132e8 <__assert_fail@plt+0x213c>
   13510:	mov	r4, sl
   13514:	b	132a0 <__assert_fail@plt+0x20f4>
   13518:	ldr	r0, [sp, #36]	; 0x24
   1351c:	b	133fc <__assert_fail@plt+0x2250>
   13520:	ldr	r3, [r0, #48]	; 0x30
   13524:	ldr	r1, [sl, #24]
   13528:	and	r2, r3, #516	; 0x204
   1352c:	cmp	r2, #512	; 0x200
   13530:	mvnne	r0, #99	; 0x63
   13534:	ldreq	r0, [r0, #32]
   13538:	ands	r2, r3, #16
   1353c:	bne	13658 <__assert_fail@plt+0x24ac>
   13540:	add	r3, sp, #60	; 0x3c
   13544:	bl	15df0 <__assert_fail@plt+0x4c44>
   13548:	cmp	r0, #0
   1354c:	mov	r4, r0
   13550:	str	r0, [sl, #12]
   13554:	beq	139b0 <__assert_fail@plt+0x2804>
   13558:	ldrh	r3, [sl, #56]	; 0x38
   1355c:	cmp	r3, #11
   13560:	beq	139d8 <__assert_fail@plt+0x282c>
   13564:	ldr	r0, [r5, #48]	; 0x30
   13568:	tst	r0, #256	; 0x100
   1356c:	bne	13678 <__assert_fail@plt+0x24cc>
   13570:	ldr	r2, [r5, #44]	; 0x2c
   13574:	ldr	r3, [pc, #1352]	; 13ac4 <__assert_fail@plt+0x2918>
   13578:	cmp	r2, #0
   1357c:	mvnne	r3, #0
   13580:	str	r3, [sp, #20]
   13584:	ldr	r3, [sp, #40]	; 0x28
   13588:	cmp	r3, #2
   1358c:	beq	1396c <__assert_fail@plt+0x27c0>
   13590:	ldr	r3, [r5, #48]	; 0x30
   13594:	and	r3, r3, #56	; 0x38
   13598:	cmp	r3, #24
   1359c:	beq	139f4 <__assert_fail@plt+0x2848>
   135a0:	ldr	r3, [sp, #40]	; 0x28
   135a4:	mov	r4, #1
   135a8:	sub	r6, r3, #3
   135ac:	clz	r6, r6
   135b0:	lsr	r6, r6, #5
   135b4:	ldr	r3, [r5, #48]	; 0x30
   135b8:	tst	r3, #512	; 0x200
   135bc:	bne	13994 <__assert_fail@plt+0x27e8>
   135c0:	ldr	r2, [sp, #60]	; 0x3c
   135c4:	cmp	r2, #0
   135c8:	blt	135e4 <__assert_fail@plt+0x2438>
   135cc:	mov	r3, #0
   135d0:	mov	r1, sl
   135d4:	mov	r0, r5
   135d8:	bl	12df8 <__assert_fail@plt+0x1c4c>
   135dc:	cmp	r0, #0
   135e0:	beq	13188 <__assert_fail@plt+0x1fdc>
   135e4:	tst	r4, r6
   135e8:	beq	135f8 <__assert_fail@plt+0x244c>
   135ec:	bl	11068 <__errno_location@plt>
   135f0:	ldr	r3, [r0]
   135f4:	str	r3, [sl, #32]
   135f8:	ldrh	r3, [sl, #58]	; 0x3a
   135fc:	ldr	r0, [sl, #12]
   13600:	orr	r3, r3, #1
   13604:	strh	r3, [sl, #58]	; 0x3a
   13608:	bl	111a0 <closedir@plt>
   1360c:	ldr	r0, [r5, #48]	; 0x30
   13610:	mov	r3, #0
   13614:	tst	r0, #512	; 0x200
   13618:	str	r3, [sl, #12]
   1361c:	beq	13638 <__assert_fail@plt+0x248c>
   13620:	ldr	r3, [sp, #60]	; 0x3c
   13624:	cmp	r3, #0
   13628:	blt	13638 <__assert_fail@plt+0x248c>
   1362c:	mov	r0, r3
   13630:	bl	11188 <close@plt>
   13634:	ldr	r0, [r5, #48]	; 0x30
   13638:	mov	r3, #0
   1363c:	str	r3, [sl, #12]
   13640:	str	r3, [sp, #52]	; 0x34
   13644:	b	13194 <__assert_fail@plt+0x1fe8>
   13648:	mov	r3, #11
   1364c:	strh	r3, [r4, #56]	; 0x38
   13650:	mov	r3, #9
   13654:	b	13398 <__assert_fail@plt+0x21ec>
   13658:	tst	r3, #1
   1365c:	moveq	r2, #32768	; 0x8000
   13660:	beq	13540 <__assert_fail@plt+0x2394>
   13664:	ldr	r2, [sl, #48]	; 0x30
   13668:	cmp	r2, #0
   1366c:	movne	r2, #32768	; 0x8000
   13670:	moveq	r2, #0
   13674:	b	13540 <__assert_fail@plt+0x2394>
   13678:	add	r4, r5, #56	; 0x38
   1367c:	mov	r1, r4
   13680:	mov	r2, sl
   13684:	bl	13084 <__assert_fail@plt+0x1ed8>
   13688:	mov	r3, #0
   1368c:	mov	r2, sl
   13690:	ldr	r1, [r5, #48]	; 0x30
   13694:	ldr	r0, [r5, #32]
   13698:	bl	12b70 <__assert_fail@plt+0x19c4>
   1369c:	mov	r1, r4
   136a0:	mov	r2, sl
   136a4:	ldr	r0, [r5, #48]	; 0x30
   136a8:	bl	12fd4 <__assert_fail@plt+0x1e28>
   136ac:	subs	r4, r0, #0
   136b0:	bne	13570 <__assert_fail@plt+0x23c4>
   136b4:	bl	11068 <__errno_location@plt>
   136b8:	mov	r3, #12
   136bc:	str	r4, [sp, #4]
   136c0:	str	r3, [r0]
   136c4:	b	1370c <__assert_fail@plt+0x2560>
   136c8:	ldr	sl, [sp, #12]
   136cc:	mov	r0, r4
   136d0:	ldr	r4, [r9]
   136d4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   136d8:	ldr	r0, [sp, #4]
   136dc:	bl	12924 <__assert_fail@plt+0x1778>
   136e0:	ldr	r0, [sl, #12]
   136e4:	bl	111a0 <closedir@plt>
   136e8:	ldr	r3, [r5, #48]	; 0x30
   136ec:	mov	r2, #0
   136f0:	orr	r3, r3, #8192	; 0x2000
   136f4:	mov	r1, #7
   136f8:	str	r2, [sl, #12]
   136fc:	strh	r1, [sl, #56]	; 0x38
   13700:	str	r2, [sp, #4]
   13704:	str	r3, [r5, #48]	; 0x30
   13708:	str	r4, [r9]
   1370c:	ldr	r0, [sp, #4]
   13710:	add	sp, sp, #68	; 0x44
   13714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13718:	mov	sl, r3
   1371c:	ldr	r3, [sp, #36]	; 0x24
   13720:	cmp	r3, #0
   13724:	bne	13840 <__assert_fail@plt+0x2694>
   13728:	ldr	r3, [r5, #48]	; 0x30
   1372c:	tst	r3, #4
   13730:	beq	1375c <__assert_fail@plt+0x25b0>
   13734:	ldr	r3, [r5, #36]	; 0x24
   13738:	ldr	r2, [sp, #8]
   1373c:	cmp	r7, #0
   13740:	cmpne	r3, r2
   13744:	ldreq	r3, [sp, #28]
   13748:	subeq	r3, r3, #1
   1374c:	streq	r3, [sp, #28]
   13750:	ldr	r2, [sp, #28]
   13754:	mov	r3, #0
   13758:	strb	r3, [r2]
   1375c:	ldr	r3, [sp, #52]	; 0x34
   13760:	ldr	r2, [sp, #44]	; 0x2c
   13764:	cmp	r2, #0
   13768:	movne	r3, #0
   1376c:	andeq	r3, r3, #1
   13770:	cmp	r3, #0
   13774:	beq	137ac <__assert_fail@plt+0x2600>
   13778:	ldr	r3, [sp, #40]	; 0x28
   1377c:	cmp	r7, #0
   13780:	cmpne	r3, #1
   13784:	bne	137b4 <__assert_fail@plt+0x2608>
   13788:	ldr	r3, [sl, #48]	; 0x30
   1378c:	cmp	r3, #0
   13790:	bne	1392c <__assert_fail@plt+0x2780>
   13794:	mov	r0, r5
   13798:	bl	12b20 <__assert_fail@plt+0x1974>
   1379c:	adds	r0, r0, #0
   137a0:	movne	r0, #1
   137a4:	cmp	r0, #0
   137a8:	bne	13a4c <__assert_fail@plt+0x28a0>
   137ac:	cmp	r7, #0
   137b0:	beq	1394c <__assert_fail@plt+0x27a0>
   137b4:	ldr	r3, [sp, #48]	; 0x30
   137b8:	cmp	r3, #0
   137bc:	bne	138cc <__assert_fail@plt+0x2720>
   137c0:	ldr	r3, [r5, #44]	; 0x2c
   137c4:	cmp	r3, #0
   137c8:	cmpne	r7, #1
   137cc:	bls	1370c <__assert_fail@plt+0x2560>
   137d0:	mov	r2, r7
   137d4:	ldr	r1, [sp, #4]
   137d8:	mov	r0, r5
   137dc:	bl	127d0 <__assert_fail@plt+0x1624>
   137e0:	str	r0, [sp, #4]
   137e4:	ldr	r0, [sp, #4]
   137e8:	add	sp, sp, #68	; 0x44
   137ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137f0:	ldr	r3, [r9]
   137f4:	ldr	sl, [sp, #12]
   137f8:	cmp	r3, #0
   137fc:	beq	1381c <__assert_fail@plt+0x2670>
   13800:	ldr	r2, [sp, #44]	; 0x2c
   13804:	str	r3, [sl, #32]
   13808:	cmp	r7, #0
   1380c:	cmpeq	r2, #0
   13810:	moveq	r2, #4
   13814:	movne	r2, #7
   13818:	strh	r2, [sl, #56]	; 0x38
   1381c:	ldr	r0, [sl, #12]
   13820:	cmp	r0, #0
   13824:	beq	1371c <__assert_fail@plt+0x2570>
   13828:	bl	111a0 <closedir@plt>
   1382c:	mov	r3, #0
   13830:	str	r3, [sl, #12]
   13834:	ldr	r3, [sp, #36]	; 0x24
   13838:	cmp	r3, #0
   1383c:	beq	13728 <__assert_fail@plt+0x257c>
   13840:	ldr	r1, [r5, #4]
   13844:	ldr	r0, [r5, #24]
   13848:	cmp	r1, #0
   1384c:	beq	1387c <__assert_fail@plt+0x26d0>
   13850:	ldr	r3, [r1, #24]
   13854:	add	r2, r1, #168	; 0xa8
   13858:	cmp	r3, r2
   1385c:	ldrne	r2, [r1, #28]
   13860:	str	r0, [r1, #28]
   13864:	subne	r3, r3, r2
   13868:	addne	r3, r0, r3
   1386c:	strne	r3, [r1, #24]
   13870:	ldr	r1, [r1, #8]
   13874:	cmp	r1, #0
   13878:	bne	13850 <__assert_fail@plt+0x26a4>
   1387c:	ldr	r3, [sp, #4]
   13880:	b	138b0 <__assert_fail@plt+0x2704>
   13884:	ldr	r2, [r3, #24]
   13888:	cmp	r2, r1
   1388c:	ldrne	r1, [r3, #28]
   13890:	str	r0, [r3, #28]
   13894:	subne	r2, r2, r1
   13898:	addne	r2, r0, r2
   1389c:	strne	r2, [r3, #24]
   138a0:	ldr	r2, [r3, #8]
   138a4:	cmp	r2, #0
   138a8:	ldreq	r2, [r3, #4]
   138ac:	mov	r3, r2
   138b0:	ldr	r2, [r3, #48]	; 0x30
   138b4:	add	r1, r3, #168	; 0xa8
   138b8:	cmp	r2, #0
   138bc:	bge	13884 <__assert_fail@plt+0x26d8>
   138c0:	b	13728 <__assert_fail@plt+0x257c>
   138c4:	ldr	sl, [sp, #12]
   138c8:	b	1371c <__assert_fail@plt+0x2570>
   138cc:	ldr	r3, [pc, #500]	; 13ac8 <__assert_fail@plt+0x291c>
   138d0:	mov	r2, r7
   138d4:	str	r3, [r5, #44]	; 0x2c
   138d8:	ldr	r1, [sp, #4]
   138dc:	mov	r0, r5
   138e0:	bl	127d0 <__assert_fail@plt+0x1624>
   138e4:	mov	r3, #0
   138e8:	str	r3, [r5, #44]	; 0x2c
   138ec:	str	r0, [sp, #4]
   138f0:	ldr	r0, [sp, #4]
   138f4:	add	sp, sp, #68	; 0x44
   138f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138fc:	ldr	r0, [sl, #12]
   13900:	bl	111a0 <closedir@plt>
   13904:	ldr	r3, [sp, #40]	; 0x28
   13908:	mov	r4, #0
   1390c:	cmp	r3, #3
   13910:	str	r4, [sl, #12]
   13914:	beq	139bc <__assert_fail@plt+0x2810>
   13918:	mov	r3, #0
   1391c:	str	r3, [sp, #4]
   13920:	ldr	r0, [sp, #4]
   13924:	add	sp, sp, #68	; 0x44
   13928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1392c:	ldr	r3, [pc, #408]	; 13acc <__assert_fail@plt+0x2920>
   13930:	mvn	r2, #0
   13934:	ldr	r1, [sl, #4]
   13938:	mov	r0, r5
   1393c:	bl	12df8 <__assert_fail@plt+0x1c4c>
   13940:	adds	r0, r0, #0
   13944:	movne	r0, #1
   13948:	b	137a4 <__assert_fail@plt+0x25f8>
   1394c:	ldr	r3, [sp, #40]	; 0x28
   13950:	cmp	r3, #3
   13954:	beq	1397c <__assert_fail@plt+0x27d0>
   13958:	ldr	r0, [sp, #4]
   1395c:	bl	12924 <__assert_fail@plt+0x1778>
   13960:	mov	r3, #0
   13964:	str	r3, [sp, #4]
   13968:	b	1370c <__assert_fail@plt+0x2560>
   1396c:	mov	r3, #0
   13970:	str	r3, [sp, #52]	; 0x34
   13974:	ldr	r0, [r5, #48]	; 0x30
   13978:	b	13194 <__assert_fail@plt+0x1fe8>
   1397c:	ldrh	r3, [sl, #56]	; 0x38
   13980:	cmp	r3, #4
   13984:	cmpne	r3, #7
   13988:	movne	r3, #6
   1398c:	strhne	r3, [sl, #56]	; 0x38
   13990:	b	13958 <__assert_fail@plt+0x27ac>
   13994:	mov	r2, #3
   13998:	ldr	r1, [pc, #304]	; 13ad0 <__assert_fail@plt+0x2924>
   1399c:	ldr	r0, [sp, #60]	; 0x3c
   139a0:	bl	18bac <__assert_fail@plt+0x7a00>
   139a4:	mov	r2, r0
   139a8:	str	r0, [sp, #60]	; 0x3c
   139ac:	b	135c4 <__assert_fail@plt+0x2418>
   139b0:	ldr	r3, [sp, #40]	; 0x28
   139b4:	cmp	r3, #3
   139b8:	bne	13918 <__assert_fail@plt+0x276c>
   139bc:	mov	r3, #4
   139c0:	strh	r3, [sl, #56]	; 0x38
   139c4:	bl	11068 <__errno_location@plt>
   139c8:	str	r4, [sp, #4]
   139cc:	ldr	r3, [r0]
   139d0:	str	r3, [sl, #32]
   139d4:	b	1370c <__assert_fail@plt+0x2560>
   139d8:	mov	r3, #0
   139dc:	mov	r2, sl
   139e0:	ldr	r1, [r5, #48]	; 0x30
   139e4:	ldr	r0, [r5, #32]
   139e8:	bl	12b70 <__assert_fail@plt+0x19c4>
   139ec:	strh	r0, [sl, #56]	; 0x38
   139f0:	b	13570 <__assert_fail@plt+0x23c4>
   139f4:	ldr	r3, [sl, #84]	; 0x54
   139f8:	cmp	r3, #2
   139fc:	bne	135a0 <__assert_fail@plt+0x23f4>
   13a00:	ldr	r1, [sp, #60]	; 0x3c
   13a04:	mov	r0, sl
   13a08:	bl	12990 <__assert_fail@plt+0x17e4>
   13a0c:	ldr	r3, [pc, #164]	; 13ab8 <__assert_fail@plt+0x290c>
   13a10:	cmp	r0, r3
   13a14:	beq	135a0 <__assert_fail@plt+0x23f4>
   13a18:	bgt	13a6c <__assert_fail@plt+0x28c0>
   13a1c:	ldr	r3, [pc, #156]	; 13ac0 <__assert_fail@plt+0x2914>
   13a20:	cmp	r0, r3
   13a24:	beq	135a0 <__assert_fail@plt+0x23f4>
   13a28:	cmp	r0, #0
   13a2c:	beq	135a0 <__assert_fail@plt+0x23f4>
   13a30:	ldr	r3, [sp, #40]	; 0x28
   13a34:	cmp	r3, #3
   13a38:	moveq	r6, #1
   13a3c:	movne	r6, #0
   13a40:	bne	1396c <__assert_fail@plt+0x27c0>
   13a44:	mov	r4, #0
   13a48:	b	135b4 <__assert_fail@plt+0x2408>
   13a4c:	ldr	r3, [r5, #48]	; 0x30
   13a50:	mov	r2, #7
   13a54:	orr	r3, r3, #8192	; 0x2000
   13a58:	strh	r2, [sl, #56]	; 0x38
   13a5c:	ldr	r0, [sp, #4]
   13a60:	str	r3, [r5, #48]	; 0x30
   13a64:	bl	12924 <__assert_fail@plt+0x1778>
   13a68:	b	13918 <__assert_fail@plt+0x276c>
   13a6c:	ldr	r3, [pc, #96]	; 13ad4 <__assert_fail@plt+0x2928>
   13a70:	cmp	r0, r3
   13a74:	beq	135a0 <__assert_fail@plt+0x23f4>
   13a78:	ldr	r3, [pc, #88]	; 13ad8 <__assert_fail@plt+0x292c>
   13a7c:	cmp	r0, r3
   13a80:	bne	13a30 <__assert_fail@plt+0x2884>
   13a84:	b	135a0 <__assert_fail@plt+0x23f4>
   13a88:	str	r8, [r4, #80]	; 0x50
   13a8c:	mov	r2, #1
   13a90:	mov	r3, #0
   13a94:	b	1326c <__assert_fail@plt+0x20c0>
   13a98:	ldr	r3, [pc, #36]	; 13ac4 <__assert_fail@plt+0x2918>
   13a9c:	ldr	r0, [r5, #48]	; 0x30
   13aa0:	str	r3, [sp, #20]
   13aa4:	mov	r3, #1
   13aa8:	str	r3, [sp, #52]	; 0x34
   13aac:	b	13194 <__assert_fail@plt+0x1fe8>
   13ab0:	andeq	sl, r1, r8, ror #3
   13ab4:	andeq	r2, r0, r0, lsl r7
   13ab8:	andeq	r6, r0, r9, ror #18
   13abc:			; <UNDEFINED> instruction: 0x01021994
   13ac0:			; <UNDEFINED> instruction: 0xff534d42
   13ac4:	andeq	r8, r1, r0, lsr #13
   13ac8:	andeq	r2, r1, r0, lsr #15
   13acc:	andeq	sl, r1, r8, lsl r2
   13ad0:	andeq	r0, r0, r6, lsl #8
   13ad4:	andeq	r9, r0, r0, lsr #31
   13ad8:	movtpl	r4, #24911	; 0x614f
   13adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ae0:	bic	r5, r1, #4080	; 0xff0
   13ae4:	bic	r5, r5, #15
   13ae8:	cmp	r5, #0
   13aec:	sub	sp, sp, #20
   13af0:	bne	13e28 <__assert_fail@plt+0x2c7c>
   13af4:	and	r3, r1, #516	; 0x204
   13af8:	cmp	r3, #516	; 0x204
   13afc:	mov	r6, r1
   13b00:	beq	13dc8 <__assert_fail@plt+0x2c1c>
   13b04:	ands	r5, r1, #18
   13b08:	beq	13dc8 <__assert_fail@plt+0x2c1c>
   13b0c:	mov	r7, r0
   13b10:	mov	r1, #96	; 0x60
   13b14:	mov	r0, #1
   13b18:	mov	r9, r2
   13b1c:	bl	188d0 <__assert_fail@plt+0x7724>
   13b20:	subs	r5, r0, #0
   13b24:	beq	13d70 <__assert_fail@plt+0x2bc4>
   13b28:	tst	r6, #2
   13b2c:	bicne	r3, r6, #512	; 0x200
   13b30:	orrne	r3, r3, #4
   13b34:	strne	r3, [r5, #48]	; 0x30
   13b38:	ldr	r3, [r7]
   13b3c:	streq	r6, [r5, #48]	; 0x30
   13b40:	mvn	r2, #99	; 0x63
   13b44:	cmp	r3, #0
   13b48:	str	r9, [r5, #44]	; 0x2c
   13b4c:	str	r2, [r5, #32]
   13b50:	beq	13e5c <__assert_fail@plt+0x2cb0>
   13b54:	mov	r8, r7
   13b58:	mov	r4, #0
   13b5c:	mov	r0, r3
   13b60:	bl	11044 <strlen@plt>
   13b64:	ldr	r3, [r8, #4]!
   13b68:	cmp	r4, r0
   13b6c:	movcc	r4, r0
   13b70:	cmp	r3, #0
   13b74:	bne	13b5c <__assert_fail@plt+0x29b0>
   13b78:	add	r2, r4, #1
   13b7c:	cmp	r2, #4096	; 0x1000
   13b80:	movcc	r2, #4096	; 0x1000
   13b84:	add	r1, r5, #36	; 0x24
   13b88:	add	r0, r5, #24
   13b8c:	bl	12cbc <__assert_fail@plt+0x1b10>
   13b90:	subs	r3, r0, #0
   13b94:	str	r3, [sp, #4]
   13b98:	beq	13db0 <__assert_fail@plt+0x2c04>
   13b9c:	ldr	r4, [r7]
   13ba0:	cmp	r4, #0
   13ba4:	beq	13de0 <__assert_fail@plt+0x2c34>
   13ba8:	mov	r2, #0
   13bac:	ldr	r1, [pc, #696]	; 13e6c <__assert_fail@plt+0x2cc0>
   13bb0:	mov	r0, r5
   13bb4:	bl	128b0 <__assert_fail@plt+0x1704>
   13bb8:	subs	fp, r0, #0
   13bbc:	beq	13da8 <__assert_fail@plt+0x2bfc>
   13bc0:	mvn	r3, #0
   13bc4:	cmp	r9, #0
   13bc8:	str	r3, [fp, #48]	; 0x30
   13bcc:	ldr	r4, [r7]
   13bd0:	beq	13be4 <__assert_fail@plt+0x2a38>
   13bd4:	ldr	r3, [r5, #48]	; 0x30
   13bd8:	lsr	r3, r3, #10
   13bdc:	and	r3, r3, #1
   13be0:	str	r3, [sp, #4]
   13be4:	cmp	r4, #0
   13be8:	beq	13e64 <__assert_fail@plt+0x2cb8>
   13bec:	lsr	r6, r6, #11
   13bf0:	mov	r3, #0
   13bf4:	eor	r6, r6, #1
   13bf8:	mov	sl, r3
   13bfc:	str	r3, [sp, #12]
   13c00:	and	r3, r6, #1
   13c04:	str	r3, [sp, #8]
   13c08:	mov	r8, sl
   13c0c:	mov	r6, sl
   13c10:	b	13c48 <__assert_fail@plt+0x2a9c>
   13c14:	mov	r3, #11
   13c18:	strh	r3, [r4, #56]	; 0x38
   13c1c:	mov	r2, #2
   13c20:	mov	r3, #0
   13c24:	cmp	r9, #0
   13c28:	strd	r2, [r4, #112]	; 0x70
   13c2c:	beq	13cdc <__assert_fail@plt+0x2b30>
   13c30:	str	r6, [r4, #8]
   13c34:	mov	r6, r4
   13c38:	ldr	r4, [r7, #4]!
   13c3c:	add	r8, r8, #1
   13c40:	cmp	r4, #0
   13c44:	beq	13d08 <__assert_fail@plt+0x2b5c>
   13c48:	mov	r0, r4
   13c4c:	bl	11044 <strlen@plt>
   13c50:	ldr	r3, [sp, #8]
   13c54:	cmp	r0, #2
   13c58:	movls	r3, #0
   13c5c:	andhi	r3, r3, #1
   13c60:	cmp	r3, #0
   13c64:	mov	r2, r0
   13c68:	beq	13c80 <__assert_fail@plt+0x2ad4>
   13c6c:	sub	r1, r0, #1
   13c70:	add	r3, r4, r1
   13c74:	ldrb	r1, [r4, r1]
   13c78:	cmp	r1, #47	; 0x2f
   13c7c:	beq	13d7c <__assert_fail@plt+0x2bd0>
   13c80:	mov	r1, r4
   13c84:	mov	r0, r5
   13c88:	bl	128b0 <__assert_fail@plt+0x1704>
   13c8c:	subs	r4, r0, #0
   13c90:	beq	13d98 <__assert_fail@plt+0x2bec>
   13c94:	ldr	r3, [sp, #4]
   13c98:	str	sl, [r4, #48]	; 0x30
   13c9c:	cmp	r6, #0
   13ca0:	moveq	r3, #0
   13ca4:	andne	r3, r3, #1
   13ca8:	cmp	r3, #0
   13cac:	add	r3, r4, #168	; 0xa8
   13cb0:	str	fp, [r4, #4]
   13cb4:	str	r3, [r4, #24]
   13cb8:	bne	13c14 <__assert_fail@plt+0x2a68>
   13cbc:	mov	r3, sl
   13cc0:	mov	r2, r4
   13cc4:	ldr	r1, [r5, #48]	; 0x30
   13cc8:	ldr	r0, [r5, #32]
   13ccc:	bl	12b70 <__assert_fail@plt+0x19c4>
   13cd0:	cmp	r9, #0
   13cd4:	strh	r0, [r4, #56]	; 0x38
   13cd8:	bne	13c30 <__assert_fail@plt+0x2a84>
   13cdc:	cmp	r6, #0
   13ce0:	str	r9, [r4, #8]
   13ce4:	ldrne	r3, [sp, #12]
   13ce8:	streq	r4, [sp, #12]
   13cec:	strne	r4, [sp, #12]
   13cf0:	strne	r4, [r3, #8]
   13cf4:	moveq	r6, r4
   13cf8:	ldr	r4, [r7, #4]!
   13cfc:	add	r8, r8, #1
   13d00:	cmp	r4, #0
   13d04:	bne	13c48 <__assert_fail@plt+0x2a9c>
   13d08:	cmp	r9, #0
   13d0c:	cmpne	r8, #1
   13d10:	bhi	13e44 <__assert_fail@plt+0x2c98>
   13d14:	mov	r2, #0
   13d18:	ldr	r1, [pc, #332]	; 13e6c <__assert_fail@plt+0x2cc0>
   13d1c:	mov	r0, r5
   13d20:	bl	128b0 <__assert_fail@plt+0x1704>
   13d24:	cmp	r0, #0
   13d28:	str	r0, [r5]
   13d2c:	beq	13d98 <__assert_fail@plt+0x2bec>
   13d30:	mov	r2, #1
   13d34:	mov	r3, #9
   13d38:	str	r6, [r0, #8]
   13d3c:	str	r2, [r0, #48]	; 0x30
   13d40:	strh	r3, [r0, #56]	; 0x38
   13d44:	add	r1, r5, #56	; 0x38
   13d48:	ldr	r0, [r5, #48]	; 0x30
   13d4c:	bl	12d3c <__assert_fail@plt+0x1b90>
   13d50:	cmp	r0, #0
   13d54:	beq	13d98 <__assert_fail@plt+0x2bec>
   13d58:	ldr	r1, [r5, #48]	; 0x30
   13d5c:	tst	r1, #516	; 0x204
   13d60:	beq	13df8 <__assert_fail@plt+0x2c4c>
   13d64:	mvn	r1, #0
   13d68:	add	r0, r5, #60	; 0x3c
   13d6c:	bl	157d8 <__assert_fail@plt+0x462c>
   13d70:	mov	r0, r5
   13d74:	add	sp, sp, #20
   13d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d7c:	ldrb	r1, [r3, #-1]!
   13d80:	cmp	r1, #47	; 0x2f
   13d84:	bne	13c80 <__assert_fail@plt+0x2ad4>
   13d88:	sub	r2, r2, #1
   13d8c:	cmp	r2, #1
   13d90:	bne	13d7c <__assert_fail@plt+0x2bd0>
   13d94:	b	13c80 <__assert_fail@plt+0x2ad4>
   13d98:	mov	r0, r6
   13d9c:	bl	12924 <__assert_fail@plt+0x1778>
   13da0:	mov	r0, fp
   13da4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13da8:	ldr	r0, [r5, #24]
   13dac:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13db0:	mov	r0, r5
   13db4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13db8:	mov	r5, #0
   13dbc:	mov	r0, r5
   13dc0:	add	sp, sp, #20
   13dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc8:	bl	11068 <__errno_location@plt>
   13dcc:	mov	r3, #22
   13dd0:	str	r3, [r0]
   13dd4:	mov	r0, r5
   13dd8:	add	sp, sp, #20
   13ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13de0:	cmp	r9, #0
   13de4:	movne	fp, r4
   13de8:	bne	13bd4 <__assert_fail@plt+0x2a28>
   13dec:	mov	fp, r9
   13df0:	mov	r6, r9
   13df4:	b	13d14 <__assert_fail@plt+0x2b68>
   13df8:	ldr	r2, [pc, #112]	; 13e70 <__assert_fail@plt+0x2cc4>
   13dfc:	ldr	r0, [r5, #32]
   13e00:	bl	12dbc <__assert_fail@plt+0x1c10>
   13e04:	mvn	r1, #0
   13e08:	cmp	r0, #0
   13e0c:	str	r0, [r5, #28]
   13e10:	ldrlt	r3, [r5, #48]	; 0x30
   13e14:	add	r0, r5, #60	; 0x3c
   13e18:	orrlt	r3, r3, #4
   13e1c:	strlt	r3, [r5, #48]	; 0x30
   13e20:	bl	157d8 <__assert_fail@plt+0x462c>
   13e24:	b	13d70 <__assert_fail@plt+0x2bc4>
   13e28:	bl	11068 <__errno_location@plt>
   13e2c:	mov	r5, #0
   13e30:	mov	r3, #22
   13e34:	str	r3, [r0]
   13e38:	mov	r0, r5
   13e3c:	add	sp, sp, #20
   13e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e44:	mov	r1, r6
   13e48:	mov	r2, r8
   13e4c:	mov	r0, r5
   13e50:	bl	127d0 <__assert_fail@plt+0x1624>
   13e54:	mov	r6, r0
   13e58:	b	13d14 <__assert_fail@plt+0x2b68>
   13e5c:	mov	r2, #4096	; 0x1000
   13e60:	b	13b84 <__assert_fail@plt+0x29d8>
   13e64:	mov	r6, r4
   13e68:	b	13d14 <__assert_fail@plt+0x2b68>
   13e6c:	andeq	r9, r1, r4, lsr r9
   13e70:	andeq	sl, r1, ip, lsl r2
   13e74:	ldr	r3, [r0]
   13e78:	push	{r4, r5, r6, lr}
   13e7c:	cmp	r3, #0
   13e80:	mov	r5, r0
   13e84:	beq	13ec0 <__assert_fail@plt+0x2d14>
   13e88:	ldr	r2, [r3, #48]	; 0x30
   13e8c:	cmp	r2, #0
   13e90:	blt	13fb0 <__assert_fail@plt+0x2e04>
   13e94:	ldr	r4, [r3, #8]
   13e98:	mov	r0, r3
   13e9c:	cmp	r4, #0
   13ea0:	ldreq	r4, [r3, #4]
   13ea4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13ea8:	mov	r3, r4
   13eac:	ldr	r2, [r4, #48]	; 0x30
   13eb0:	cmp	r2, #0
   13eb4:	bge	13e94 <__assert_fail@plt+0x2ce8>
   13eb8:	mov	r0, r4
   13ebc:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13ec0:	ldr	r0, [r5, #4]
   13ec4:	cmp	r0, #0
   13ec8:	beq	13ed0 <__assert_fail@plt+0x2d24>
   13ecc:	bl	12924 <__assert_fail@plt+0x1778>
   13ed0:	ldr	r0, [r5, #8]
   13ed4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13ed8:	ldr	r0, [r5, #24]
   13edc:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13ee0:	ldr	r3, [r5, #48]	; 0x30
   13ee4:	tst	r3, #512	; 0x200
   13ee8:	beq	13f5c <__assert_fail@plt+0x2db0>
   13eec:	ldr	r0, [r5, #32]
   13ef0:	cmp	r0, #0
   13ef4:	blt	13f04 <__assert_fail@plt+0x2d58>
   13ef8:	bl	11188 <close@plt>
   13efc:	cmp	r0, #0
   13f00:	bne	13f9c <__assert_fail@plt+0x2df0>
   13f04:	mov	r4, #0
   13f08:	add	r0, r5, #60	; 0x3c
   13f0c:	bl	12958 <__assert_fail@plt+0x17ac>
   13f10:	ldr	r0, [r5, #52]	; 0x34
   13f14:	cmp	r0, #0
   13f18:	beq	13f20 <__assert_fail@plt+0x2d74>
   13f1c:	bl	1529c <__assert_fail@plt+0x40f0>
   13f20:	ldr	r2, [r5, #48]	; 0x30
   13f24:	ldr	r3, [pc, #164]	; 13fd0 <__assert_fail@plt+0x2e24>
   13f28:	ldr	r0, [r5, #56]	; 0x38
   13f2c:	and	r3, r3, r2
   13f30:	cmp	r3, #0
   13f34:	beq	13fa8 <__assert_fail@plt+0x2dfc>
   13f38:	cmp	r0, #0
   13f3c:	beq	13f44 <__assert_fail@plt+0x2d98>
   13f40:	bl	1529c <__assert_fail@plt+0x40f0>
   13f44:	mov	r0, r5
   13f48:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13f4c:	cmp	r4, #0
   13f50:	bne	13fc0 <__assert_fail@plt+0x2e14>
   13f54:	mov	r0, r4
   13f58:	pop	{r4, r5, r6, pc}
   13f5c:	tst	r3, #4
   13f60:	bne	13f04 <__assert_fail@plt+0x2d58>
   13f64:	ldr	r0, [r5, #28]
   13f68:	bl	11128 <fchdir@plt>
   13f6c:	cmp	r0, #0
   13f70:	beq	13fb8 <__assert_fail@plt+0x2e0c>
   13f74:	bl	11068 <__errno_location@plt>
   13f78:	ldr	r4, [r0]
   13f7c:	ldr	r0, [r5, #28]
   13f80:	bl	11188 <close@plt>
   13f84:	clz	r3, r4
   13f88:	lsr	r3, r3, #5
   13f8c:	cmp	r0, #0
   13f90:	moveq	r3, #0
   13f94:	cmp	r3, #0
   13f98:	beq	13f08 <__assert_fail@plt+0x2d5c>
   13f9c:	bl	11068 <__errno_location@plt>
   13fa0:	ldr	r4, [r0]
   13fa4:	b	13f08 <__assert_fail@plt+0x2d5c>
   13fa8:	bl	18e18 <__assert_fail@plt+0x7c6c>
   13fac:	b	13f44 <__assert_fail@plt+0x2d98>
   13fb0:	mov	r4, r3
   13fb4:	b	13eb8 <__assert_fail@plt+0x2d0c>
   13fb8:	ldr	r0, [r5, #28]
   13fbc:	b	13ef8 <__assert_fail@plt+0x2d4c>
   13fc0:	bl	11068 <__errno_location@plt>
   13fc4:	str	r4, [r0]
   13fc8:	mvn	r4, #0
   13fcc:	b	13f54 <__assert_fail@plt+0x2da8>
   13fd0:	andeq	r0, r0, r2, lsl #2
   13fd4:	push	{r4, r5, r6, r7, r8, lr}
   13fd8:	ldr	r5, [r0]
   13fdc:	cmp	r5, #0
   13fe0:	beq	14114 <__assert_fail@plt+0x2f68>
   13fe4:	ldr	r1, [r0, #48]	; 0x30
   13fe8:	ands	r3, r1, #8192	; 0x2000
   13fec:	bne	14114 <__assert_fail@plt+0x2f68>
   13ff0:	ldrh	r2, [r5, #60]	; 0x3c
   13ff4:	mov	r8, r0
   13ff8:	mov	r0, #3
   13ffc:	cmp	r2, #1
   14000:	strh	r0, [r5, #60]	; 0x3c
   14004:	beq	14380 <__assert_fail@plt+0x31d4>
   14008:	cmp	r2, #2
   1400c:	ldrh	r3, [r5, #56]	; 0x38
   14010:	beq	14120 <__assert_fail@plt+0x2f74>
   14014:	cmp	r3, #1
   14018:	bne	14050 <__assert_fail@plt+0x2ea4>
   1401c:	cmp	r2, #4
   14020:	bne	14134 <__assert_fail@plt+0x2f88>
   14024:	b	14150 <__assert_fail@plt+0x2fa4>
   14028:	mov	r0, r5
   1402c:	str	r4, [r8]
   14030:	bl	18e18 <__assert_fail@plt+0x7c6c>
   14034:	ldr	r5, [r4, #48]	; 0x30
   14038:	cmp	r5, #0
   1403c:	beq	14198 <__assert_fail@plt+0x2fec>
   14040:	ldrh	r3, [r4, #60]	; 0x3c
   14044:	mov	r5, r4
   14048:	cmp	r3, #4
   1404c:	bne	14294 <__assert_fail@plt+0x30e8>
   14050:	ldr	r4, [r5, #8]
   14054:	cmp	r4, #0
   14058:	bne	14028 <__assert_fail@plt+0x2e7c>
   1405c:	ldr	r4, [r5, #4]
   14060:	ldr	r3, [r4, #12]
   14064:	cmp	r3, #0
   14068:	bne	14510 <__assert_fail@plt+0x3364>
   1406c:	str	r4, [r8]
   14070:	mov	r0, r5
   14074:	bl	18e18 <__assert_fail@plt+0x7c6c>
   14078:	ldr	r3, [r4, #48]	; 0x30
   1407c:	cmn	r3, #1
   14080:	beq	1444c <__assert_fail@plt+0x32a0>
   14084:	ldrh	r3, [r4, #56]	; 0x38
   14088:	cmp	r3, #11
   1408c:	beq	14308 <__assert_fail@plt+0x315c>
   14090:	ldr	r3, [r4, #40]	; 0x28
   14094:	ldr	r2, [r8, #24]
   14098:	mov	r1, #0
   1409c:	strb	r1, [r2, r3]
   140a0:	ldr	r3, [r4, #48]	; 0x30
   140a4:	cmp	r3, r1
   140a8:	beq	143d8 <__assert_fail@plt+0x322c>
   140ac:	ldrh	r3, [r4, #58]	; 0x3a
   140b0:	tst	r3, #2
   140b4:	beq	14398 <__assert_fail@plt+0x31ec>
   140b8:	ldr	r3, [r8, #48]	; 0x30
   140bc:	tst	r3, #4
   140c0:	beq	143fc <__assert_fail@plt+0x3250>
   140c4:	ldr	r0, [r4, #36]	; 0x24
   140c8:	bl	11188 <close@plt>
   140cc:	ldr	r3, [r8, #48]	; 0x30
   140d0:	ldrh	r2, [r4, #56]	; 0x38
   140d4:	cmp	r2, #2
   140d8:	beq	1410c <__assert_fail@plt+0x2f60>
   140dc:	ldr	r2, [r4, #32]
   140e0:	cmp	r2, #0
   140e4:	movne	r2, #7
   140e8:	strhne	r2, [r4, #56]	; 0x38
   140ec:	bne	1410c <__assert_fail@plt+0x2f60>
   140f0:	mov	r2, #6
   140f4:	mov	r0, r3
   140f8:	strh	r2, [r4, #56]	; 0x38
   140fc:	add	r1, r8, #56	; 0x38
   14100:	mov	r2, r4
   14104:	bl	13084 <__assert_fail@plt+0x1ed8>
   14108:	ldr	r3, [r8, #48]	; 0x30
   1410c:	tst	r3, #8192	; 0x2000
   14110:	beq	14190 <__assert_fail@plt+0x2fe4>
   14114:	mov	r4, #0
   14118:	mov	r0, r4
   1411c:	pop	{r4, r5, r6, r7, r8, pc}
   14120:	sub	r2, r3, #12
   14124:	cmp	r2, #1
   14128:	bls	14418 <__assert_fail@plt+0x326c>
   1412c:	cmp	r3, #1
   14130:	bne	14050 <__assert_fail@plt+0x2ea4>
   14134:	tst	r1, #64	; 0x40
   14138:	beq	1430c <__assert_fail@plt+0x3160>
   1413c:	ldrd	r6, [r5, #64]	; 0x40
   14140:	ldrd	r2, [r8, #16]
   14144:	cmp	r7, r3
   14148:	cmpeq	r6, r2
   1414c:	beq	1430c <__assert_fail@plt+0x3160>
   14150:	ldrh	r3, [r5, #58]	; 0x3a
   14154:	tst	r3, #2
   14158:	bne	14504 <__assert_fail@plt+0x3358>
   1415c:	ldr	r0, [r8, #4]
   14160:	cmp	r0, #0
   14164:	beq	14174 <__assert_fail@plt+0x2fc8>
   14168:	bl	12924 <__assert_fail@plt+0x1778>
   1416c:	mov	r3, #0
   14170:	str	r3, [r8, #4]
   14174:	mov	r3, #6
   14178:	strh	r3, [r5, #56]	; 0x38
   1417c:	mov	r2, r5
   14180:	add	r1, r8, #56	; 0x38
   14184:	ldr	r0, [r8, #48]	; 0x30
   14188:	mov	r4, r5
   1418c:	bl	13084 <__assert_fail@plt+0x1ed8>
   14190:	mov	r0, r4
   14194:	pop	{r4, r5, r6, r7, r8, pc}
   14198:	mov	r0, r8
   1419c:	bl	12b20 <__assert_fail@plt+0x1974>
   141a0:	cmp	r0, #0
   141a4:	bne	144f0 <__assert_fail@plt+0x3344>
   141a8:	ldr	r2, [r8, #48]	; 0x30
   141ac:	ldr	r3, [pc, #1228]	; 14680 <__assert_fail@plt+0x34d4>
   141b0:	ldr	r0, [r8, #56]	; 0x38
   141b4:	and	r3, r3, r2
   141b8:	cmp	r3, #0
   141bc:	beq	1446c <__assert_fail@plt+0x32c0>
   141c0:	cmp	r0, #0
   141c4:	beq	141cc <__assert_fail@plt+0x3020>
   141c8:	bl	1529c <__assert_fail@plt+0x40f0>
   141cc:	ldr	r2, [r4, #52]	; 0x34
   141d0:	add	r6, r4, #168	; 0xa8
   141d4:	str	r2, [r4, #40]	; 0x28
   141d8:	mov	r1, r6
   141dc:	add	r2, r2, #1
   141e0:	ldr	r0, [r8, #24]
   141e4:	bl	10f00 <memmove@plt>
   141e8:	mov	r0, r6
   141ec:	mov	r1, #47	; 0x2f
   141f0:	bl	110ec <strrchr@plt>
   141f4:	cmp	r0, #0
   141f8:	beq	14228 <__assert_fail@plt+0x307c>
   141fc:	cmp	r6, r0
   14200:	beq	144e0 <__assert_fail@plt+0x3334>
   14204:	add	r5, r0, #1
   14208:	mov	r0, r5
   1420c:	bl	11044 <strlen@plt>
   14210:	mov	r1, r5
   14214:	mov	r7, r0
   14218:	add	r2, r7, #1
   1421c:	mov	r0, r6
   14220:	bl	10f00 <memmove@plt>
   14224:	str	r7, [r4, #52]	; 0x34
   14228:	ldr	r3, [r8, #24]
   1422c:	add	r1, r8, #56	; 0x38
   14230:	str	r3, [r4, #28]
   14234:	str	r3, [r4, #24]
   14238:	ldr	r0, [r8, #48]	; 0x30
   1423c:	bl	12d3c <__assert_fail@plt+0x1b90>
   14240:	ldrh	r3, [r4, #56]	; 0x38
   14244:	cmp	r3, #11
   14248:	str	r4, [r8]
   1424c:	beq	142ec <__assert_fail@plt+0x3140>
   14250:	cmp	r3, #1
   14254:	bne	14190 <__assert_fail@plt+0x2fe4>
   14258:	ldr	r3, [r4, #48]	; 0x30
   1425c:	cmp	r3, #0
   14260:	ldrdeq	r2, [r4, #64]	; 0x40
   14264:	strdeq	r2, [r8, #16]
   14268:	mov	r2, r4
   1426c:	add	r1, r8, #56	; 0x38
   14270:	ldr	r0, [r8, #48]	; 0x30
   14274:	bl	12fd4 <__assert_fail@plt+0x1e28>
   14278:	subs	r5, r0, #0
   1427c:	bne	14190 <__assert_fail@plt+0x2fe4>
   14280:	bl	11068 <__errno_location@plt>
   14284:	mov	r3, #12
   14288:	mov	r4, r5
   1428c:	str	r3, [r0]
   14290:	b	14190 <__assert_fail@plt+0x2fe4>
   14294:	cmp	r3, #2
   14298:	beq	14544 <__assert_fail@plt+0x3398>
   1429c:	ldr	r3, [r4, #4]
   142a0:	mov	ip, #47	; 0x2f
   142a4:	ldr	r2, [r8, #24]
   142a8:	ldr	r0, [r3, #40]	; 0x28
   142ac:	ldr	lr, [r3, #28]
   142b0:	sub	r3, r0, #1
   142b4:	add	r1, r4, #168	; 0xa8
   142b8:	ldrb	lr, [lr, r3]
   142bc:	cmp	lr, ip
   142c0:	movne	r3, r0
   142c4:	add	r0, r2, r3
   142c8:	strb	ip, [r2, r3]
   142cc:	ldr	r2, [r4, #52]	; 0x34
   142d0:	add	r0, r0, #1
   142d4:	add	r2, r2, #1
   142d8:	bl	10f00 <memmove@plt>
   142dc:	ldrh	r3, [r4, #56]	; 0x38
   142e0:	str	r4, [r8]
   142e4:	cmp	r3, #11
   142e8:	bne	14250 <__assert_fail@plt+0x30a4>
   142ec:	ldrd	r2, [r4, #112]	; 0x70
   142f0:	cmp	r3, #0
   142f4:	cmpeq	r2, #2
   142f8:	beq	14570 <__assert_fail@plt+0x33c4>
   142fc:	cmp	r3, #0
   14300:	cmpeq	r2, #1
   14304:	beq	14190 <__assert_fail@plt+0x2fe4>
   14308:	bl	1117c <abort@plt>
   1430c:	ldr	r0, [r8, #4]
   14310:	cmp	r0, #0
   14314:	beq	14488 <__assert_fail@plt+0x32dc>
   14318:	tst	r1, #4096	; 0x1000
   1431c:	bne	14474 <__assert_fail@plt+0x32c8>
   14320:	ldr	r3, [r5, #24]
   14324:	mvn	r2, #0
   14328:	mov	r1, r5
   1432c:	mov	r0, r8
   14330:	bl	12df8 <__assert_fail@plt+0x1c4c>
   14334:	cmp	r0, #0
   14338:	beq	143ec <__assert_fail@plt+0x3240>
   1433c:	bl	11068 <__errno_location@plt>
   14340:	ldrh	r3, [r5, #58]	; 0x3a
   14344:	ldr	r4, [r8, #4]
   14348:	orr	r3, r3, #1
   1434c:	cmp	r4, #0
   14350:	ldr	r2, [r0]
   14354:	strh	r3, [r5, #58]	; 0x3a
   14358:	str	r2, [r5, #32]
   1435c:	beq	143f0 <__assert_fail@plt+0x3244>
   14360:	mov	r3, r4
   14364:	ldr	r2, [r3, #4]
   14368:	ldr	r2, [r2, #24]
   1436c:	str	r2, [r3, #24]
   14370:	ldr	r3, [r3, #8]
   14374:	cmp	r3, #0
   14378:	bne	14364 <__assert_fail@plt+0x31b8>
   1437c:	b	143f0 <__assert_fail@plt+0x3244>
   14380:	ldr	r0, [r8, #32]
   14384:	mov	r2, r5
   14388:	bl	12b70 <__assert_fail@plt+0x19c4>
   1438c:	mov	r4, r5
   14390:	strh	r0, [r5, #56]	; 0x38
   14394:	b	14190 <__assert_fail@plt+0x2fe4>
   14398:	tst	r3, #1
   1439c:	bne	140cc <__assert_fail@plt+0x2f20>
   143a0:	ldr	r3, [pc, #732]	; 14684 <__assert_fail@plt+0x34d8>
   143a4:	mvn	r2, #0
   143a8:	ldr	r1, [r4, #4]
   143ac:	mov	r0, r8
   143b0:	bl	12df8 <__assert_fail@plt+0x1c4c>
   143b4:	cmp	r0, #0
   143b8:	beq	140cc <__assert_fail@plt+0x2f20>
   143bc:	bl	11068 <__errno_location@plt>
   143c0:	ldr	r3, [r8, #48]	; 0x30
   143c4:	orr	r3, r3, #8192	; 0x2000
   143c8:	ldr	r2, [r0]
   143cc:	str	r2, [r4, #32]
   143d0:	str	r3, [r8, #48]	; 0x30
   143d4:	b	140d0 <__assert_fail@plt+0x2f24>
   143d8:	mov	r0, r8
   143dc:	bl	12b20 <__assert_fail@plt+0x1974>
   143e0:	cmp	r0, #0
   143e4:	bne	143bc <__assert_fail@plt+0x3210>
   143e8:	b	140cc <__assert_fail@plt+0x2f20>
   143ec:	ldr	r4, [r8, #4]
   143f0:	mov	r3, #0
   143f4:	str	r3, [r8, #4]
   143f8:	b	1429c <__assert_fail@plt+0x30f0>
   143fc:	tst	r3, #512	; 0x200
   14400:	beq	14590 <__assert_fail@plt+0x33e4>
   14404:	mov	r2, #1
   14408:	ldr	r1, [r4, #36]	; 0x24
   1440c:	mov	r0, r8
   14410:	bl	12aa0 <__assert_fail@plt+0x18f4>
   14414:	b	140c4 <__assert_fail@plt+0x2f18>
   14418:	mov	r3, #1
   1441c:	mov	r2, r5
   14420:	ldr	r0, [r8, #32]
   14424:	bl	12b70 <__assert_fail@plt+0x19c4>
   14428:	cmp	r0, #1
   1442c:	mov	r3, r0
   14430:	strh	r0, [r5, #56]	; 0x38
   14434:	beq	145d0 <__assert_fail@plt+0x3424>
   14438:	cmp	r0, #11
   1443c:	mov	r4, r5
   14440:	str	r5, [r8]
   14444:	bne	14190 <__assert_fail@plt+0x2fe4>
   14448:	b	142ec <__assert_fail@plt+0x3140>
   1444c:	mov	r0, r4
   14450:	bl	18e18 <__assert_fail@plt+0x7c6c>
   14454:	bl	11068 <__errno_location@plt>
   14458:	mov	r3, #0
   1445c:	mov	r4, r3
   14460:	str	r3, [r0]
   14464:	str	r3, [r8]
   14468:	b	14190 <__assert_fail@plt+0x2fe4>
   1446c:	bl	18e18 <__assert_fail@plt+0x7c6c>
   14470:	b	141cc <__assert_fail@plt+0x3020>
   14474:	bic	r1, r1, #4096	; 0x1000
   14478:	str	r1, [r8, #48]	; 0x30
   1447c:	bl	12924 <__assert_fail@plt+0x1778>
   14480:	mov	r3, #0
   14484:	str	r3, [r8, #4]
   14488:	mov	r1, #3
   1448c:	mov	r0, r8
   14490:	bl	1313c <__assert_fail@plt+0x1f90>
   14494:	cmp	r0, #0
   14498:	mov	r4, r0
   1449c:	str	r0, [r8, #4]
   144a0:	bne	143f0 <__assert_fail@plt+0x3244>
   144a4:	ldr	r0, [r8, #48]	; 0x30
   144a8:	tst	r0, #8192	; 0x2000
   144ac:	bne	14114 <__assert_fail@plt+0x2f68>
   144b0:	ldr	r3, [r5, #32]
   144b4:	cmp	r3, #0
   144b8:	beq	144cc <__assert_fail@plt+0x3320>
   144bc:	ldrh	r3, [r5, #56]	; 0x38
   144c0:	cmp	r3, #4
   144c4:	movne	r3, #7
   144c8:	strhne	r3, [r5, #56]	; 0x38
   144cc:	add	r1, r8, #56	; 0x38
   144d0:	mov	r2, r5
   144d4:	bl	13084 <__assert_fail@plt+0x1ed8>
   144d8:	mov	r4, r5
   144dc:	b	14190 <__assert_fail@plt+0x2fe4>
   144e0:	ldrb	r3, [r4, #169]	; 0xa9
   144e4:	cmp	r3, #0
   144e8:	bne	14204 <__assert_fail@plt+0x3058>
   144ec:	b	14228 <__assert_fail@plt+0x307c>
   144f0:	ldr	r3, [r8, #48]	; 0x30
   144f4:	mov	r4, r5
   144f8:	orr	r3, r3, #8192	; 0x2000
   144fc:	str	r3, [r8, #48]	; 0x30
   14500:	b	14190 <__assert_fail@plt+0x2fe4>
   14504:	ldr	r0, [r5, #36]	; 0x24
   14508:	bl	11188 <close@plt>
   1450c:	b	1415c <__assert_fail@plt+0x2fb0>
   14510:	ldr	r3, [r4, #40]	; 0x28
   14514:	ldr	r2, [r8, #24]
   14518:	mov	r0, #0
   1451c:	str	r4, [r8]
   14520:	mov	r1, #3
   14524:	strb	r0, [r2, r3]
   14528:	mov	r0, r8
   1452c:	bl	1313c <__assert_fail@plt+0x1f90>
   14530:	subs	r4, r0, #0
   14534:	beq	145bc <__assert_fail@plt+0x3410>
   14538:	mov	r0, r5
   1453c:	bl	18e18 <__assert_fail@plt+0x7c6c>
   14540:	b	1429c <__assert_fail@plt+0x30f0>
   14544:	mov	r3, #1
   14548:	mov	r2, r4
   1454c:	ldr	r1, [r8, #48]	; 0x30
   14550:	ldr	r0, [r8, #32]
   14554:	bl	12b70 <__assert_fail@plt+0x19c4>
   14558:	cmp	r0, #1
   1455c:	strh	r0, [r4, #56]	; 0x38
   14560:	beq	145e8 <__assert_fail@plt+0x343c>
   14564:	mov	r3, #3
   14568:	strh	r3, [r4, #60]	; 0x3c
   1456c:	b	1429c <__assert_fail@plt+0x30f0>
   14570:	mov	r3, #0
   14574:	mov	r2, r4
   14578:	ldr	r1, [r8, #48]	; 0x30
   1457c:	ldr	r0, [r8, #32]
   14580:	bl	12b70 <__assert_fail@plt+0x19c4>
   14584:	mov	r3, r0
   14588:	strh	r0, [r4, #56]	; 0x38
   1458c:	b	14250 <__assert_fail@plt+0x30a4>
   14590:	ldr	r0, [r4, #36]	; 0x24
   14594:	bl	11128 <fchdir@plt>
   14598:	cmp	r0, #0
   1459c:	beq	140c4 <__assert_fail@plt+0x2f18>
   145a0:	bl	11068 <__errno_location@plt>
   145a4:	ldr	r3, [r8, #48]	; 0x30
   145a8:	orr	r3, r3, #8192	; 0x2000
   145ac:	ldr	r2, [r0]
   145b0:	str	r2, [r4, #32]
   145b4:	str	r3, [r8, #48]	; 0x30
   145b8:	b	140c4 <__assert_fail@plt+0x2f18>
   145bc:	ldr	r3, [r8, #48]	; 0x30
   145c0:	tst	r3, #8192	; 0x2000
   145c4:	bne	14114 <__assert_fail@plt+0x2f68>
   145c8:	ldr	r4, [r5, #4]
   145cc:	b	1406c <__assert_fail@plt+0x2ec0>
   145d0:	ldr	r1, [r8, #48]	; 0x30
   145d4:	tst	r1, #4
   145d8:	beq	1461c <__assert_fail@plt+0x3470>
   145dc:	str	r5, [r8]
   145e0:	mov	r4, r5
   145e4:	b	14250 <__assert_fail@plt+0x30a4>
   145e8:	ldr	r1, [r8, #48]	; 0x30
   145ec:	tst	r1, #4
   145f0:	bne	14564 <__assert_fail@plt+0x33b8>
   145f4:	ldr	r2, [pc, #140]	; 14688 <__assert_fail@plt+0x34dc>
   145f8:	ldr	r0, [r8, #32]
   145fc:	bl	12dbc <__assert_fail@plt+0x1c10>
   14600:	cmp	r0, #0
   14604:	str	r0, [r4, #36]	; 0x24
   14608:	blt	1464c <__assert_fail@plt+0x34a0>
   1460c:	ldrh	r3, [r4, #58]	; 0x3a
   14610:	orr	r3, r3, #2
   14614:	strh	r3, [r4, #58]	; 0x3a
   14618:	b	14564 <__assert_fail@plt+0x33b8>
   1461c:	ldr	r2, [pc, #100]	; 14688 <__assert_fail@plt+0x34dc>
   14620:	ldr	r0, [r8, #32]
   14624:	bl	12dbc <__assert_fail@plt+0x1c10>
   14628:	cmp	r0, #0
   1462c:	str	r0, [r5, #36]	; 0x24
   14630:	blt	14664 <__assert_fail@plt+0x34b8>
   14634:	ldrh	r2, [r5, #58]	; 0x3a
   14638:	ldrh	r3, [r5, #56]	; 0x38
   1463c:	mov	r4, r5
   14640:	orr	r2, r2, #2
   14644:	strh	r2, [r5, #58]	; 0x3a
   14648:	b	14244 <__assert_fail@plt+0x3098>
   1464c:	bl	11068 <__errno_location@plt>
   14650:	mov	r2, #7
   14654:	ldr	r3, [r0]
   14658:	strh	r2, [r4, #56]	; 0x38
   1465c:	str	r3, [r4, #32]
   14660:	b	14564 <__assert_fail@plt+0x33b8>
   14664:	bl	11068 <__errno_location@plt>
   14668:	mov	r2, #7
   1466c:	mov	r3, r2
   14670:	ldr	r1, [r0]
   14674:	strh	r2, [r5, #56]	; 0x38
   14678:	str	r1, [r5, #32]
   1467c:	b	145dc <__assert_fail@plt+0x3430>
   14680:	andeq	r0, r0, r2, lsl #2
   14684:	andeq	sl, r1, r8, lsl r2
   14688:	andeq	sl, r1, ip, lsl r2
   1468c:	cmp	r2, #4
   14690:	bhi	146a4 <__assert_fail@plt+0x34f8>
   14694:	mov	r3, #0
   14698:	strh	r2, [r1, #60]	; 0x3c
   1469c:	mov	r0, r3
   146a0:	bx	lr
   146a4:	push	{r4, lr}
   146a8:	bl	11068 <__errno_location@plt>
   146ac:	mov	r2, #22
   146b0:	mov	r3, #1
   146b4:	str	r2, [r0]
   146b8:	mov	r0, r3
   146bc:	pop	{r4, pc}
   146c0:	push	{r4, r5, r6, r7, r8, lr}
   146c4:	bics	r8, r1, #4096	; 0x1000
   146c8:	bne	147c8 <__assert_fail@plt+0x361c>
   146cc:	mov	r5, r0
   146d0:	mov	r4, r1
   146d4:	bl	11068 <__errno_location@plt>
   146d8:	ldr	r6, [r5]
   146dc:	str	r8, [r0]
   146e0:	ldr	r3, [r5, #48]	; 0x30
   146e4:	mov	r7, r0
   146e8:	ands	r3, r3, #8192	; 0x2000
   146ec:	bne	147e0 <__assert_fail@plt+0x3634>
   146f0:	ldrh	r2, [r6, #56]	; 0x38
   146f4:	cmp	r2, #9
   146f8:	ldreq	r3, [r6, #8]
   146fc:	beq	1476c <__assert_fail@plt+0x35c0>
   14700:	cmp	r2, #1
   14704:	bne	1476c <__assert_fail@plt+0x35c0>
   14708:	ldr	r0, [r5, #4]
   1470c:	cmp	r0, #0
   14710:	beq	14718 <__assert_fail@plt+0x356c>
   14714:	bl	12924 <__assert_fail@plt+0x1778>
   14718:	cmp	r4, #4096	; 0x1000
   1471c:	moveq	r8, #2
   14720:	ldreq	r3, [r5, #48]	; 0x30
   14724:	movne	r8, #1
   14728:	orreq	r3, r3, #4096	; 0x1000
   1472c:	streq	r3, [r5, #48]	; 0x30
   14730:	ldr	r3, [r6, #48]	; 0x30
   14734:	cmp	r3, #0
   14738:	bne	14758 <__assert_fail@plt+0x35ac>
   1473c:	ldr	r3, [r6, #24]
   14740:	ldrb	r3, [r3]
   14744:	cmp	r3, #47	; 0x2f
   14748:	beq	14758 <__assert_fail@plt+0x35ac>
   1474c:	ldr	r1, [r5, #48]	; 0x30
   14750:	ands	r4, r1, #4
   14754:	beq	14774 <__assert_fail@plt+0x35c8>
   14758:	mov	r1, r8
   1475c:	mov	r0, r5
   14760:	bl	1313c <__assert_fail@plt+0x1f90>
   14764:	mov	r3, r0
   14768:	str	r0, [r5, #4]
   1476c:	mov	r0, r3
   14770:	pop	{r4, r5, r6, r7, r8, pc}
   14774:	ldr	r2, [pc, #160]	; 1481c <__assert_fail@plt+0x3670>
   14778:	ldr	r0, [r5, #32]
   1477c:	bl	12dbc <__assert_fail@plt+0x1c10>
   14780:	subs	r6, r0, #0
   14784:	strlt	r4, [r5, #4]
   14788:	movlt	r3, r4
   1478c:	blt	1476c <__assert_fail@plt+0x35c0>
   14790:	mov	r1, r8
   14794:	mov	r0, r5
   14798:	bl	1313c <__assert_fail@plt+0x1f90>
   1479c:	ldr	r3, [r5, #48]	; 0x30
   147a0:	ands	r4, r3, #512	; 0x200
   147a4:	str	r0, [r5, #4]
   147a8:	beq	147e8 <__assert_fail@plt+0x363c>
   147ac:	mov	r1, r6
   147b0:	mov	r2, #1
   147b4:	mov	r0, r5
   147b8:	bl	12aa0 <__assert_fail@plt+0x18f4>
   147bc:	ldr	r3, [r5, #4]
   147c0:	mov	r0, r3
   147c4:	pop	{r4, r5, r6, r7, r8, pc}
   147c8:	bl	11068 <__errno_location@plt>
   147cc:	mov	r2, #22
   147d0:	mov	r3, #0
   147d4:	str	r2, [r0]
   147d8:	mov	r0, r3
   147dc:	pop	{r4, r5, r6, r7, r8, pc}
   147e0:	mov	r3, r8
   147e4:	b	1476c <__assert_fail@plt+0x35c0>
   147e8:	mov	r0, r6
   147ec:	bl	11128 <fchdir@plt>
   147f0:	cmp	r0, #0
   147f4:	bne	14804 <__assert_fail@plt+0x3658>
   147f8:	mov	r0, r6
   147fc:	bl	11188 <close@plt>
   14800:	b	147bc <__assert_fail@plt+0x3610>
   14804:	ldr	r5, [r7]
   14808:	mov	r0, r6
   1480c:	bl	11188 <close@plt>
   14810:	str	r5, [r7]
   14814:	mov	r3, r4
   14818:	b	1476c <__assert_fail@plt+0x35c0>
   1481c:	andeq	sl, r1, ip, lsl r2
   14820:	cmp	r0, #10
   14824:	movcc	r0, #10
   14828:	push	{r4, r5, r6, r7, r8, lr}
   1482c:	orr	r7, r0, #1
   14830:	cmn	r7, #1
   14834:	ldrne	r8, [pc, #132]	; 148c0 <__assert_fail@plt+0x3714>
   14838:	beq	148b0 <__assert_fail@plt+0x3704>
   1483c:	cmp	r7, #9
   14840:	bls	148b8 <__assert_fail@plt+0x370c>
   14844:	umull	r2, r3, r8, r7
   14848:	lsr	r3, r3, #1
   1484c:	add	r3, r3, r3, lsl #1
   14850:	cmp	r7, r3
   14854:	beq	148a4 <__assert_fail@plt+0x36f8>
   14858:	mov	r6, #16
   1485c:	mov	r5, #9
   14860:	mov	r4, #3
   14864:	b	14878 <__assert_fail@plt+0x36cc>
   14868:	bl	192d0 <__assert_fail@plt+0x8124>
   1486c:	add	r6, r6, #8
   14870:	cmp	r1, #0
   14874:	beq	148a4 <__assert_fail@plt+0x36f8>
   14878:	add	r5, r5, r6
   1487c:	add	r4, r4, #2
   14880:	cmp	r5, r7
   14884:	mov	r0, r7
   14888:	mov	r1, r4
   1488c:	bcc	14868 <__assert_fail@plt+0x36bc>
   14890:	mov	r1, r4
   14894:	mov	r0, r7
   14898:	bl	192d0 <__assert_fail@plt+0x8124>
   1489c:	cmp	r1, #0
   148a0:	bne	148b0 <__assert_fail@plt+0x3704>
   148a4:	add	r7, r7, #2
   148a8:	cmn	r7, #1
   148ac:	bne	1483c <__assert_fail@plt+0x3690>
   148b0:	mov	r0, r7
   148b4:	pop	{r4, r5, r6, r7, r8, pc}
   148b8:	mov	r4, #3
   148bc:	b	14890 <__assert_fail@plt+0x36e4>
   148c0:	bge	feabf374 <optarg@@GLIBC_2.4+0xfea941f4>
   148c4:	push	{r4, lr}
   148c8:	ror	r0, r0, #3
   148cc:	bl	192d0 <__assert_fail@plt+0x8124>
   148d0:	mov	r0, r1
   148d4:	pop	{r4, pc}
   148d8:	sub	r0, r1, r0
   148dc:	clz	r0, r0
   148e0:	lsr	r0, r0, #5
   148e4:	bx	lr
   148e8:	push	{r4, lr}
   148ec:	mov	r4, r0
   148f0:	mov	r0, r1
   148f4:	ldr	r3, [r4, #24]
   148f8:	ldr	r1, [r4, #8]
   148fc:	blx	r3
   14900:	ldr	r3, [r4, #8]
   14904:	cmp	r0, r3
   14908:	bcs	14918 <__assert_fail@plt+0x376c>
   1490c:	ldr	r3, [r4]
   14910:	add	r0, r3, r0, lsl #3
   14914:	pop	{r4, pc}
   14918:	bl	1117c <abort@plt>
   1491c:	push	{r4, r5, r6, r7, r8, lr}
   14920:	mov	r7, r2
   14924:	mov	r8, r3
   14928:	mov	r6, r0
   1492c:	mov	r5, r1
   14930:	bl	148e8 <__assert_fail@plt+0x373c>
   14934:	str	r0, [r7]
   14938:	ldr	r3, [r0]
   1493c:	cmp	r3, #0
   14940:	beq	149d8 <__assert_fail@plt+0x382c>
   14944:	cmp	r5, r3
   14948:	mov	r4, r0
   1494c:	beq	1496c <__assert_fail@plt+0x37c0>
   14950:	mov	r1, r3
   14954:	mov	r0, r5
   14958:	ldr	r3, [r6, #28]
   1495c:	blx	r3
   14960:	cmp	r0, #0
   14964:	beq	149cc <__assert_fail@plt+0x3820>
   14968:	ldr	r3, [r4]
   1496c:	cmp	r8, #0
   14970:	beq	1499c <__assert_fail@plt+0x37f0>
   14974:	ldr	r2, [r4, #4]
   14978:	cmp	r2, #0
   1497c:	movne	ip, #0
   14980:	ldmne	r2, {r0, r1}
   14984:	streq	r2, [r4]
   14988:	stmne	r4, {r0, r1}
   1498c:	strne	ip, [r2]
   14990:	ldrne	r1, [r6, #36]	; 0x24
   14994:	strne	r1, [r2, #4]
   14998:	strne	r2, [r6, #36]	; 0x24
   1499c:	mov	r0, r3
   149a0:	pop	{r4, r5, r6, r7, r8, pc}
   149a4:	ldr	r3, [r2]
   149a8:	cmp	r5, r3
   149ac:	beq	149ec <__assert_fail@plt+0x3840>
   149b0:	mov	r1, r3
   149b4:	mov	r0, r5
   149b8:	ldr	r3, [r6, #28]
   149bc:	blx	r3
   149c0:	cmp	r0, #0
   149c4:	bne	149e4 <__assert_fail@plt+0x3838>
   149c8:	ldr	r4, [r4, #4]
   149cc:	ldr	r2, [r4, #4]
   149d0:	cmp	r2, #0
   149d4:	bne	149a4 <__assert_fail@plt+0x37f8>
   149d8:	mov	r3, #0
   149dc:	mov	r0, r3
   149e0:	pop	{r4, r5, r6, r7, r8, pc}
   149e4:	ldr	r2, [r4, #4]
   149e8:	ldr	r3, [r2]
   149ec:	cmp	r8, #0
   149f0:	beq	1499c <__assert_fail@plt+0x37f0>
   149f4:	ldr	r0, [r2, #4]
   149f8:	mov	r1, #0
   149fc:	str	r0, [r4, #4]
   14a00:	str	r1, [r2]
   14a04:	ldr	r1, [r6, #36]	; 0x24
   14a08:	mov	r0, r3
   14a0c:	str	r1, [r2, #4]
   14a10:	str	r2, [r6, #36]	; 0x24
   14a14:	pop	{r4, r5, r6, r7, r8, pc}
   14a18:	ldr	r2, [pc, #164]	; 14ac4 <__assert_fail@plt+0x3918>
   14a1c:	ldr	r3, [r0]
   14a20:	cmp	r3, r2
   14a24:	beq	14aac <__assert_fail@plt+0x3900>
   14a28:	vldr	s15, [r3, #8]
   14a2c:	vldr	s14, [pc, #128]	; 14ab4 <__assert_fail@plt+0x3908>
   14a30:	vcmpe.f32	s15, s14
   14a34:	vmrs	APSR_nzcv, fpscr
   14a38:	ble	14aa0 <__assert_fail@plt+0x38f4>
   14a3c:	vldr	s13, [pc, #116]	; 14ab8 <__assert_fail@plt+0x390c>
   14a40:	vcmpe.f32	s15, s13
   14a44:	vmrs	APSR_nzcv, fpscr
   14a48:	bpl	14aa0 <__assert_fail@plt+0x38f4>
   14a4c:	vldr	s13, [pc, #104]	; 14abc <__assert_fail@plt+0x3910>
   14a50:	vldr	s12, [r3, #12]
   14a54:	vcmpe.f32	s12, s13
   14a58:	vmrs	APSR_nzcv, fpscr
   14a5c:	ble	14aa0 <__assert_fail@plt+0x38f4>
   14a60:	vldr	s13, [r3]
   14a64:	vcmpe.f32	s13, #0.0
   14a68:	vmrs	APSR_nzcv, fpscr
   14a6c:	blt	14aa0 <__assert_fail@plt+0x38f4>
   14a70:	vadd.f32	s14, s13, s14
   14a74:	vldr	s13, [r3, #4]
   14a78:	vcmpe.f32	s14, s13
   14a7c:	vmrs	APSR_nzcv, fpscr
   14a80:	bpl	14aa0 <__assert_fail@plt+0x38f4>
   14a84:	vldr	s12, [pc, #52]	; 14ac0 <__assert_fail@plt+0x3914>
   14a88:	vcmpe.f32	s13, s12
   14a8c:	vmrs	APSR_nzcv, fpscr
   14a90:	bhi	14aa0 <__assert_fail@plt+0x38f4>
   14a94:	vcmpe.f32	s15, s14
   14a98:	vmrs	APSR_nzcv, fpscr
   14a9c:	bgt	14aac <__assert_fail@plt+0x3900>
   14aa0:	str	r2, [r0]
   14aa4:	mov	r0, #0
   14aa8:	bx	lr
   14aac:	mov	r0, #1
   14ab0:	bx	lr
   14ab4:	stclcc	12, cr12, [ip, #820]	; 0x334
   14ab8:	svccc	0x00666666
   14abc:	svccc	0x008ccccd
   14ac0:	svccc	0x00800000
   14ac4:	andeq	sl, r1, r0, lsr #4
   14ac8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	ldm	r1, {r6, ip}
   14ad0:	cmp	r6, ip
   14ad4:	bcs	14b90 <__assert_fail@plt+0x39e4>
   14ad8:	mov	sl, r2
   14adc:	mov	r5, r0
   14ae0:	mov	r8, r1
   14ae4:	add	r6, r6, #8
   14ae8:	mov	r9, #0
   14aec:	ldr	fp, [r6, #-8]
   14af0:	mov	r7, r6
   14af4:	cmp	fp, #0
   14af8:	beq	14b84 <__assert_fail@plt+0x39d8>
   14afc:	ldr	r4, [r6, #-4]
   14b00:	cmp	r4, #0
   14b04:	bne	14b24 <__assert_fail@plt+0x3978>
   14b08:	b	14b74 <__assert_fail@plt+0x39c8>
   14b0c:	ldr	r3, [r0, #4]
   14b10:	cmp	r2, #0
   14b14:	str	r3, [r4, #4]
   14b18:	str	r4, [r0, #4]
   14b1c:	mov	r4, r2
   14b20:	beq	14b70 <__assert_fail@plt+0x39c4>
   14b24:	ldr	fp, [r4]
   14b28:	mov	r0, r5
   14b2c:	mov	r1, fp
   14b30:	bl	148e8 <__assert_fail@plt+0x373c>
   14b34:	ldr	r2, [r4, #4]
   14b38:	ldr	r1, [r0]
   14b3c:	cmp	r1, #0
   14b40:	bne	14b0c <__assert_fail@plt+0x3960>
   14b44:	ldr	ip, [r5, #12]
   14b48:	str	fp, [r0]
   14b4c:	add	r3, ip, #1
   14b50:	str	r3, [r5, #12]
   14b54:	str	r1, [r4]
   14b58:	ldr	r3, [r5, #36]	; 0x24
   14b5c:	cmp	r2, #0
   14b60:	str	r3, [r4, #4]
   14b64:	str	r4, [r5, #36]	; 0x24
   14b68:	mov	r4, r2
   14b6c:	bne	14b24 <__assert_fail@plt+0x3978>
   14b70:	ldr	fp, [r6, #-8]
   14b74:	cmp	sl, #0
   14b78:	str	r9, [r6, #-4]
   14b7c:	beq	14b98 <__assert_fail@plt+0x39ec>
   14b80:	ldr	ip, [r8, #4]
   14b84:	cmp	ip, r7
   14b88:	add	r6, r6, #8
   14b8c:	bhi	14aec <__assert_fail@plt+0x3940>
   14b90:	mov	r0, #1
   14b94:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b98:	mov	r1, fp
   14b9c:	mov	r0, r5
   14ba0:	bl	148e8 <__assert_fail@plt+0x373c>
   14ba4:	ldr	r2, [r0]
   14ba8:	mov	r4, r0
   14bac:	cmp	r2, #0
   14bb0:	beq	14bfc <__assert_fail@plt+0x3a50>
   14bb4:	ldr	r0, [r5, #36]	; 0x24
   14bb8:	cmp	r0, #0
   14bbc:	beq	14c10 <__assert_fail@plt+0x3a64>
   14bc0:	ldr	r2, [r0, #4]
   14bc4:	str	r2, [r5, #36]	; 0x24
   14bc8:	ldr	r2, [r4, #4]
   14bcc:	str	fp, [r0]
   14bd0:	str	r2, [r0, #4]
   14bd4:	str	r0, [r4, #4]
   14bd8:	str	r9, [r6, #-8]
   14bdc:	ldr	r3, [r8, #12]
   14be0:	ldr	ip, [r8, #4]
   14be4:	sub	r3, r3, #1
   14be8:	cmp	ip, r7
   14bec:	str	r3, [r8, #12]
   14bf0:	add	r6, r6, #8
   14bf4:	bhi	14aec <__assert_fail@plt+0x3940>
   14bf8:	b	14b90 <__assert_fail@plt+0x39e4>
   14bfc:	ldr	r2, [r5, #12]
   14c00:	str	fp, [r0]
   14c04:	add	r3, r2, #1
   14c08:	str	r3, [r5, #12]
   14c0c:	b	14bd8 <__assert_fail@plt+0x3a2c>
   14c10:	mov	r0, #8
   14c14:	bl	18918 <__assert_fail@plt+0x776c>
   14c18:	cmp	r0, #0
   14c1c:	bne	14bc8 <__assert_fail@plt+0x3a1c>
   14c20:	mov	r0, sl
   14c24:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c28:	ldr	r0, [r0, #8]
   14c2c:	bx	lr
   14c30:	ldr	r0, [r0, #12]
   14c34:	bx	lr
   14c38:	ldr	r0, [r0, #16]
   14c3c:	bx	lr
   14c40:	ldm	r0, {r1, ip}
   14c44:	mov	r0, #0
   14c48:	cmp	r1, ip
   14c4c:	bcs	14c94 <__assert_fail@plt+0x3ae8>
   14c50:	ldr	r3, [r1]
   14c54:	cmp	r3, #0
   14c58:	beq	14c84 <__assert_fail@plt+0x3ad8>
   14c5c:	ldr	r3, [r1, #4]
   14c60:	mov	r2, #1
   14c64:	cmp	r3, #0
   14c68:	beq	14c7c <__assert_fail@plt+0x3ad0>
   14c6c:	ldr	r3, [r3, #4]
   14c70:	add	r2, r2, #1
   14c74:	cmp	r3, #0
   14c78:	bne	14c6c <__assert_fail@plt+0x3ac0>
   14c7c:	cmp	r0, r2
   14c80:	movcc	r0, r2
   14c84:	add	r1, r1, #8
   14c88:	cmp	r1, ip
   14c8c:	bcc	14c50 <__assert_fail@plt+0x3aa4>
   14c90:	bx	lr
   14c94:	bx	lr
   14c98:	push	{lr}		; (str lr, [sp, #-4]!)
   14c9c:	mov	r2, #0
   14ca0:	ldm	r0, {r1, lr}
   14ca4:	mov	ip, r2
   14ca8:	cmp	r1, lr
   14cac:	bcs	14cec <__assert_fail@plt+0x3b40>
   14cb0:	ldr	r3, [r1]
   14cb4:	cmp	r3, #0
   14cb8:	beq	14ce0 <__assert_fail@plt+0x3b34>
   14cbc:	ldr	r3, [r1, #4]
   14cc0:	add	ip, ip, #1
   14cc4:	cmp	r3, #0
   14cc8:	add	r2, r2, #1
   14ccc:	beq	14ce0 <__assert_fail@plt+0x3b34>
   14cd0:	ldr	r3, [r3, #4]
   14cd4:	add	r2, r2, #1
   14cd8:	cmp	r3, #0
   14cdc:	bne	14cd0 <__assert_fail@plt+0x3b24>
   14ce0:	add	r1, r1, #8
   14ce4:	cmp	r1, lr
   14ce8:	bcc	14cb0 <__assert_fail@plt+0x3b04>
   14cec:	ldr	r3, [r0, #12]
   14cf0:	cmp	r3, ip
   14cf4:	ldreq	r0, [r0, #16]
   14cf8:	subeq	r0, r0, r2
   14cfc:	clzeq	r0, r0
   14d00:	lsreq	r0, r0, #5
   14d04:	movne	r0, #0
   14d08:	pop	{pc}		; (ldr pc, [sp], #4)
   14d0c:	push	{r4, r5, r6, r7, lr}
   14d10:	mov	r5, r1
   14d14:	ldm	r0, {ip, lr}
   14d18:	sub	sp, sp, #12
   14d1c:	ldr	r3, [r0, #16]
   14d20:	cmp	ip, lr
   14d24:	mov	r4, #0
   14d28:	ldr	r6, [r0, #8]
   14d2c:	ldr	r7, [r0, #12]
   14d30:	bcs	14d74 <__assert_fail@plt+0x3bc8>
   14d34:	ldr	r2, [ip]
   14d38:	cmp	r2, #0
   14d3c:	beq	14d68 <__assert_fail@plt+0x3bbc>
   14d40:	ldr	r2, [ip, #4]
   14d44:	mov	r1, #1
   14d48:	cmp	r2, #0
   14d4c:	beq	14d60 <__assert_fail@plt+0x3bb4>
   14d50:	ldr	r2, [r2, #4]
   14d54:	add	r1, r1, #1
   14d58:	cmp	r2, #0
   14d5c:	bne	14d50 <__assert_fail@plt+0x3ba4>
   14d60:	cmp	r4, r1
   14d64:	movcc	r4, r1
   14d68:	add	ip, ip, #8
   14d6c:	cmp	ip, lr
   14d70:	bcc	14d34 <__assert_fail@plt+0x3b88>
   14d74:	ldr	r2, [pc, #116]	; 14df0 <__assert_fail@plt+0x3c44>
   14d78:	mov	r1, #1
   14d7c:	mov	r0, r5
   14d80:	bl	110b0 <__fprintf_chk@plt>
   14d84:	mov	r3, r6
   14d88:	ldr	r2, [pc, #100]	; 14df4 <__assert_fail@plt+0x3c48>
   14d8c:	mov	r1, #1
   14d90:	mov	r0, r5
   14d94:	bl	110b0 <__fprintf_chk@plt>
   14d98:	vmov	s15, r7
   14d9c:	vldr	d5, [pc, #68]	; 14de8 <__assert_fail@plt+0x3c3c>
   14da0:	mov	r3, r7
   14da4:	ldr	r2, [pc, #76]	; 14df8 <__assert_fail@plt+0x3c4c>
   14da8:	vcvt.f64.u32	d6, s15
   14dac:	vmov	s15, r6
   14db0:	mov	r1, #1
   14db4:	mov	r0, r5
   14db8:	vcvt.f64.u32	d7, s15
   14dbc:	vmul.f64	d6, d6, d5
   14dc0:	vdiv.f64	d5, d6, d7
   14dc4:	vstr	d5, [sp]
   14dc8:	bl	110b0 <__fprintf_chk@plt>
   14dcc:	mov	r3, r4
   14dd0:	mov	r0, r5
   14dd4:	ldr	r2, [pc, #32]	; 14dfc <__assert_fail@plt+0x3c50>
   14dd8:	mov	r1, #1
   14ddc:	add	sp, sp, #12
   14de0:	pop	{r4, r5, r6, r7, lr}
   14de4:	b	110b0 <__fprintf_chk@plt>
   14de8:	andeq	r0, r0, r0
   14dec:	subsmi	r0, r9, r0
   14df0:	andeq	sl, r1, r4, lsr r2
   14df4:	andeq	sl, r1, ip, asr #4
   14df8:	andeq	sl, r1, r4, ror #4
   14dfc:	andeq	sl, r1, r8, lsl #5
   14e00:	push	{r4, r5, r6, lr}
   14e04:	mov	r6, r0
   14e08:	mov	r5, r1
   14e0c:	bl	148e8 <__assert_fail@plt+0x373c>
   14e10:	ldr	r3, [r0]
   14e14:	cmp	r3, #0
   14e18:	movne	r4, r0
   14e1c:	bne	14e28 <__assert_fail@plt+0x3c7c>
   14e20:	b	14e54 <__assert_fail@plt+0x3ca8>
   14e24:	ldr	r3, [r4]
   14e28:	cmp	r5, r3
   14e2c:	mov	r1, r3
   14e30:	mov	r0, r5
   14e34:	beq	14e5c <__assert_fail@plt+0x3cb0>
   14e38:	ldr	r3, [r6, #28]
   14e3c:	blx	r3
   14e40:	cmp	r0, #0
   14e44:	bne	14e64 <__assert_fail@plt+0x3cb8>
   14e48:	ldr	r4, [r4, #4]
   14e4c:	cmp	r4, #0
   14e50:	bne	14e24 <__assert_fail@plt+0x3c78>
   14e54:	mov	r0, #0
   14e58:	pop	{r4, r5, r6, pc}
   14e5c:	mov	r0, r5
   14e60:	pop	{r4, r5, r6, pc}
   14e64:	ldr	r0, [r4]
   14e68:	pop	{r4, r5, r6, pc}
   14e6c:	ldr	r3, [r0, #16]
   14e70:	cmp	r3, #0
   14e74:	beq	14ea8 <__assert_fail@plt+0x3cfc>
   14e78:	ldr	r3, [r0]
   14e7c:	ldr	r2, [r0, #4]
   14e80:	cmp	r3, r2
   14e84:	bcc	14e98 <__assert_fail@plt+0x3cec>
   14e88:	b	14eb0 <__assert_fail@plt+0x3d04>
   14e8c:	add	r3, r3, #8
   14e90:	cmp	r3, r2
   14e94:	bcs	14eb0 <__assert_fail@plt+0x3d04>
   14e98:	ldr	r0, [r3]
   14e9c:	cmp	r0, #0
   14ea0:	beq	14e8c <__assert_fail@plt+0x3ce0>
   14ea4:	bx	lr
   14ea8:	mov	r0, r3
   14eac:	bx	lr
   14eb0:	push	{r4, lr}
   14eb4:	bl	1117c <abort@plt>
   14eb8:	push	{r4, r5, r6, lr}
   14ebc:	mov	r5, r0
   14ec0:	mov	r4, r1
   14ec4:	bl	148e8 <__assert_fail@plt+0x373c>
   14ec8:	mov	r2, r0
   14ecc:	mov	r3, r0
   14ed0:	b	14edc <__assert_fail@plt+0x3d30>
   14ed4:	cmp	r3, #0
   14ed8:	beq	14ef0 <__assert_fail@plt+0x3d44>
   14edc:	ldm	r3, {r1, r3}
   14ee0:	cmp	r4, r1
   14ee4:	bne	14ed4 <__assert_fail@plt+0x3d28>
   14ee8:	cmp	r3, #0
   14eec:	bne	14f18 <__assert_fail@plt+0x3d6c>
   14ef0:	ldr	r3, [r5, #4]
   14ef4:	b	14f04 <__assert_fail@plt+0x3d58>
   14ef8:	ldr	r0, [r2]
   14efc:	cmp	r0, #0
   14f00:	popne	{r4, r5, r6, pc}
   14f04:	add	r2, r2, #8
   14f08:	cmp	r2, r3
   14f0c:	bcc	14ef8 <__assert_fail@plt+0x3d4c>
   14f10:	mov	r0, #0
   14f14:	pop	{r4, r5, r6, pc}
   14f18:	ldr	r0, [r3]
   14f1c:	pop	{r4, r5, r6, pc}
   14f20:	push	{r4, r5, r6, lr}
   14f24:	ldm	r0, {r5, lr}
   14f28:	cmp	r5, lr
   14f2c:	bcs	14fb0 <__assert_fail@plt+0x3e04>
   14f30:	add	r5, r5, #8
   14f34:	mov	ip, #0
   14f38:	ldr	r3, [r5, #-8]
   14f3c:	mov	r6, r5
   14f40:	cmp	r3, #0
   14f44:	beq	14f90 <__assert_fail@plt+0x3de4>
   14f48:	cmp	r2, ip
   14f4c:	bls	14f9c <__assert_fail@plt+0x3df0>
   14f50:	str	r3, [r1, ip, lsl #2]
   14f54:	ldr	r3, [r5, #-4]
   14f58:	add	r4, ip, #1
   14f5c:	cmp	r3, #0
   14f60:	add	lr, r1, ip, lsl #2
   14f64:	beq	14fa4 <__assert_fail@plt+0x3df8>
   14f68:	mov	ip, r4
   14f6c:	cmp	r2, ip
   14f70:	beq	14f9c <__assert_fail@plt+0x3df0>
   14f74:	ldr	r4, [r3]
   14f78:	add	ip, ip, #1
   14f7c:	str	r4, [lr, #4]!
   14f80:	ldr	r3, [r3, #4]
   14f84:	cmp	r3, #0
   14f88:	bne	14f6c <__assert_fail@plt+0x3dc0>
   14f8c:	ldr	lr, [r0, #4]
   14f90:	cmp	lr, r6
   14f94:	add	r5, r5, #8
   14f98:	bhi	14f38 <__assert_fail@plt+0x3d8c>
   14f9c:	mov	r0, ip
   14fa0:	pop	{r4, r5, r6, pc}
   14fa4:	ldr	lr, [r0, #4]
   14fa8:	mov	ip, r4
   14fac:	b	14f90 <__assert_fail@plt+0x3de4>
   14fb0:	mov	ip, #0
   14fb4:	b	14f9c <__assert_fail@plt+0x3df0>
   14fb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14fbc:	ldr	r3, [r0, #4]
   14fc0:	ldr	r8, [r0]
   14fc4:	cmp	r8, r3
   14fc8:	bcs	1502c <__assert_fail@plt+0x3e80>
   14fcc:	mov	r7, r2
   14fd0:	mov	r6, r1
   14fd4:	mov	r9, r0
   14fd8:	mov	r5, #0
   14fdc:	ldr	r0, [r8]
   14fe0:	cmp	r0, #0
   14fe4:	beq	15018 <__assert_fail@plt+0x3e6c>
   14fe8:	mov	r4, r8
   14fec:	b	14ff4 <__assert_fail@plt+0x3e48>
   14ff0:	ldr	r0, [r4]
   14ff4:	mov	r1, r7
   14ff8:	blx	r6
   14ffc:	cmp	r0, #0
   15000:	beq	15024 <__assert_fail@plt+0x3e78>
   15004:	ldr	r4, [r4, #4]
   15008:	add	r5, r5, #1
   1500c:	cmp	r4, #0
   15010:	bne	14ff0 <__assert_fail@plt+0x3e44>
   15014:	ldr	r3, [r9, #4]
   15018:	add	r8, r8, #8
   1501c:	cmp	r3, r8
   15020:	bhi	14fdc <__assert_fail@plt+0x3e30>
   15024:	mov	r0, r5
   15028:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1502c:	mov	r5, #0
   15030:	b	15024 <__assert_fail@plt+0x3e78>
   15034:	push	{r4, r5, r6, lr}
   15038:	mov	r4, r0
   1503c:	ldrb	r0, [r0]
   15040:	cmp	r0, #0
   15044:	beq	15074 <__assert_fail@plt+0x3ec8>
   15048:	mov	r5, r1
   1504c:	mov	r1, #0
   15050:	rsb	r1, r1, r1, lsl #5
   15054:	add	r0, r1, r0
   15058:	mov	r1, r5
   1505c:	bl	192d0 <__assert_fail@plt+0x8124>
   15060:	ldrb	r0, [r4, #1]!
   15064:	cmp	r0, #0
   15068:	bne	15050 <__assert_fail@plt+0x3ea4>
   1506c:	mov	r0, r1
   15070:	pop	{r4, r5, r6, pc}
   15074:	mov	r1, r0
   15078:	b	1506c <__assert_fail@plt+0x3ec0>
   1507c:	push	{lr}		; (str lr, [sp, #-4]!)
   15080:	mov	ip, r0
   15084:	ldr	lr, [pc, #16]	; 1509c <__assert_fail@plt+0x3ef0>
   15088:	ldm	lr!, {r0, r1, r2, r3}
   1508c:	ldr	lr, [lr]
   15090:	stmia	ip!, {r0, r1, r2, r3}
   15094:	str	lr, [ip]
   15098:	pop	{pc}		; (ldr pc, [sp], #4)
   1509c:	andeq	sl, r1, r0, lsr #4
   150a0:	push	{r4, r5, r6, r7, lr}
   150a4:	sub	sp, sp, #12
   150a8:	cmp	r2, #0
   150ac:	str	r0, [sp, #4]
   150b0:	ldr	r6, [pc, #304]	; 151e8 <__assert_fail@plt+0x403c>
   150b4:	mov	r0, #40	; 0x28
   150b8:	movne	r6, r2
   150bc:	cmp	r3, #0
   150c0:	ldr	r7, [pc, #292]	; 151ec <__assert_fail@plt+0x4040>
   150c4:	mov	r5, r1
   150c8:	movne	r7, r3
   150cc:	bl	18918 <__assert_fail@plt+0x776c>
   150d0:	subs	r4, r0, #0
   150d4:	beq	1516c <__assert_fail@plt+0x3fc0>
   150d8:	cmp	r5, #0
   150dc:	beq	151c0 <__assert_fail@plt+0x4014>
   150e0:	mov	r0, r4
   150e4:	str	r5, [r0, #20]!
   150e8:	bl	14a18 <__assert_fail@plt+0x386c>
   150ec:	cmp	r0, #0
   150f0:	beq	151a8 <__assert_fail@plt+0x3ffc>
   150f4:	ldrb	r3, [r5, #16]
   150f8:	cmp	r3, #0
   150fc:	beq	15178 <__assert_fail@plt+0x3fcc>
   15100:	ldr	r0, [sp, #4]
   15104:	bl	14820 <__assert_fail@plt+0x3674>
   15108:	lsrs	r2, r0, #30
   1510c:	movne	r5, #1
   15110:	moveq	r5, #0
   15114:	tst	r0, #536870912	; 0x20000000
   15118:	bne	151a0 <__assert_fail@plt+0x3ff4>
   1511c:	cmp	r5, #0
   15120:	bne	151a0 <__assert_fail@plt+0x3ff4>
   15124:	cmp	r0, #0
   15128:	str	r0, [r4, #8]
   1512c:	beq	151a8 <__assert_fail@plt+0x3ffc>
   15130:	mov	r1, #8
   15134:	bl	188d0 <__assert_fail@plt+0x7724>
   15138:	cmp	r0, #0
   1513c:	str	r0, [r4]
   15140:	beq	151a8 <__assert_fail@plt+0x3ffc>
   15144:	ldr	r3, [r4, #8]
   15148:	str	r5, [r4, #12]
   1514c:	str	r5, [r4, #16]
   15150:	add	r0, r0, r3, lsl #3
   15154:	ldr	r3, [sp, #32]
   15158:	str	r6, [r4, #24]
   1515c:	str	r7, [r4, #28]
   15160:	str	r3, [r4, #32]
   15164:	str	r5, [r4, #36]	; 0x24
   15168:	str	r0, [r4, #4]
   1516c:	mov	r0, r4
   15170:	add	sp, sp, #12
   15174:	pop	{r4, r5, r6, r7, pc}
   15178:	vldr	s12, [r5, #8]
   1517c:	vldr	s15, [sp, #4]
   15180:	vldr	s14, [pc, #88]	; 151e0 <__assert_fail@plt+0x4034>
   15184:	vcvt.f32.u32	s13, s15
   15188:	vdiv.f32	s15, s13, s12
   1518c:	vcmpe.f32	s15, s14
   15190:	vmrs	APSR_nzcv, fpscr
   15194:	vcvtlt.u32.f32	s15, s15
   15198:	vstrlt	s15, [sp, #4]
   1519c:	blt	15100 <__assert_fail@plt+0x3f54>
   151a0:	mov	r3, #0
   151a4:	str	r3, [r4, #8]
   151a8:	mov	r0, r4
   151ac:	bl	18e18 <__assert_fail@plt+0x7c6c>
   151b0:	mov	r4, #0
   151b4:	mov	r0, r4
   151b8:	add	sp, sp, #12
   151bc:	pop	{r4, r5, r6, r7, pc}
   151c0:	ldr	r3, [pc, #40]	; 151f0 <__assert_fail@plt+0x4044>
   151c4:	mov	r0, r4
   151c8:	str	r3, [r0, #20]!
   151cc:	bl	14a18 <__assert_fail@plt+0x386c>
   151d0:	cmp	r0, #0
   151d4:	vldrne	s12, [pc, #8]	; 151e4 <__assert_fail@plt+0x4038>
   151d8:	bne	1517c <__assert_fail@plt+0x3fd0>
   151dc:	b	151a8 <__assert_fail@plt+0x3ffc>
   151e0:	svcmi	0x00800000
   151e4:	svccc	0x004ccccd
   151e8:	andeq	r4, r1, r4, asr #17
   151ec:	ldrdeq	r4, [r1], -r8
   151f0:	andeq	sl, r1, r0, lsr #4
   151f4:	push	{r4, r5, r6, r7, r8, lr}
   151f8:	mov	r5, r0
   151fc:	ldr	r7, [r0]
   15200:	ldr	r3, [r0, #4]
   15204:	cmp	r7, r3
   15208:	addcc	r7, r7, #8
   1520c:	movcc	r6, #0
   15210:	bcs	1528c <__assert_fail@plt+0x40e0>
   15214:	ldr	r2, [r7, #-8]
   15218:	mov	r8, r7
   1521c:	cmp	r2, #0
   15220:	beq	15280 <__assert_fail@plt+0x40d4>
   15224:	ldr	r4, [r7, #-4]
   15228:	ldr	r2, [r5, #32]
   1522c:	cmp	r4, #0
   15230:	beq	15264 <__assert_fail@plt+0x40b8>
   15234:	cmp	r2, #0
   15238:	beq	15248 <__assert_fail@plt+0x409c>
   1523c:	ldr	r0, [r4]
   15240:	blx	r2
   15244:	ldr	r2, [r5, #32]
   15248:	ldr	r3, [r4, #4]
   1524c:	ldr	r1, [r5, #36]	; 0x24
   15250:	str	r6, [r4]
   15254:	str	r1, [r4, #4]
   15258:	str	r4, [r5, #36]	; 0x24
   1525c:	subs	r4, r3, #0
   15260:	bne	15234 <__assert_fail@plt+0x4088>
   15264:	cmp	r2, #0
   15268:	beq	15274 <__assert_fail@plt+0x40c8>
   1526c:	ldr	r0, [r7, #-8]
   15270:	blx	r2
   15274:	str	r6, [r7, #-8]
   15278:	str	r6, [r7, #-4]
   1527c:	ldr	r3, [r5, #4]
   15280:	cmp	r3, r8
   15284:	add	r7, r7, #8
   15288:	bhi	15214 <__assert_fail@plt+0x4068>
   1528c:	mov	r3, #0
   15290:	str	r3, [r5, #12]
   15294:	str	r3, [r5, #16]
   15298:	pop	{r4, r5, r6, r7, r8, pc}
   1529c:	ldr	r3, [r0, #32]
   152a0:	push	{r4, r5, r6, lr}
   152a4:	cmp	r3, #0
   152a8:	mov	r5, r0
   152ac:	beq	1530c <__assert_fail@plt+0x4160>
   152b0:	ldr	r3, [r0, #16]
   152b4:	cmp	r3, #0
   152b8:	beq	1530c <__assert_fail@plt+0x4160>
   152bc:	ldr	r6, [r0]
   152c0:	ldr	r3, [r0, #4]
   152c4:	cmp	r6, r3
   152c8:	bcs	15348 <__assert_fail@plt+0x419c>
   152cc:	ldr	r0, [r6]
   152d0:	cmp	r0, #0
   152d4:	movne	r4, r6
   152d8:	bne	152e4 <__assert_fail@plt+0x4138>
   152dc:	b	152fc <__assert_fail@plt+0x4150>
   152e0:	ldr	r0, [r4]
   152e4:	ldr	r3, [r5, #32]
   152e8:	blx	r3
   152ec:	ldr	r4, [r4, #4]
   152f0:	cmp	r4, #0
   152f4:	bne	152e0 <__assert_fail@plt+0x4134>
   152f8:	ldr	r3, [r5, #4]
   152fc:	add	r6, r6, #8
   15300:	cmp	r3, r6
   15304:	bhi	152cc <__assert_fail@plt+0x4120>
   15308:	b	15310 <__assert_fail@plt+0x4164>
   1530c:	ldr	r3, [r5, #4]
   15310:	ldr	r6, [r5]
   15314:	cmp	r3, r6
   15318:	bls	15348 <__assert_fail@plt+0x419c>
   1531c:	ldr	r0, [r6, #4]
   15320:	cmp	r0, #0
   15324:	beq	1533c <__assert_fail@plt+0x4190>
   15328:	ldr	r4, [r0, #4]
   1532c:	bl	18e18 <__assert_fail@plt+0x7c6c>
   15330:	subs	r0, r4, #0
   15334:	bne	15328 <__assert_fail@plt+0x417c>
   15338:	ldr	r3, [r5, #4]
   1533c:	add	r6, r6, #8
   15340:	cmp	r3, r6
   15344:	bhi	1531c <__assert_fail@plt+0x4170>
   15348:	ldr	r0, [r5, #36]	; 0x24
   1534c:	cmp	r0, #0
   15350:	beq	15364 <__assert_fail@plt+0x41b8>
   15354:	ldr	r4, [r0, #4]
   15358:	bl	18e18 <__assert_fail@plt+0x7c6c>
   1535c:	subs	r0, r4, #0
   15360:	bne	15354 <__assert_fail@plt+0x41a8>
   15364:	ldr	r0, [r5]
   15368:	bl	18e18 <__assert_fail@plt+0x7c6c>
   1536c:	mov	r0, r5
   15370:	pop	{r4, r5, r6, lr}
   15374:	b	18e18 <__assert_fail@plt+0x7c6c>
   15378:	ldr	r3, [r0, #20]
   1537c:	push	{r4, r5, r6, r7, lr}
   15380:	sub	sp, sp, #52	; 0x34
   15384:	ldrb	r2, [r3, #16]
   15388:	mov	r5, r0
   1538c:	str	r1, [sp, #4]
   15390:	cmp	r2, #0
   15394:	bne	153c0 <__assert_fail@plt+0x4214>
   15398:	vmov	s15, r1
   1539c:	vldr	s13, [r3, #8]
   153a0:	vldr	s14, [pc, #352]	; 15508 <__assert_fail@plt+0x435c>
   153a4:	vcvt.f32.u32	s12, s15
   153a8:	vdiv.f32	s15, s12, s13
   153ac:	vcmpe.f32	s15, s14
   153b0:	vmrs	APSR_nzcv, fpscr
   153b4:	bge	154c4 <__assert_fail@plt+0x4318>
   153b8:	vcvt.u32.f32	s15, s15
   153bc:	vstr	s15, [sp, #4]
   153c0:	ldr	r0, [sp, #4]
   153c4:	bl	14820 <__assert_fail@plt+0x3674>
   153c8:	lsrs	r3, r0, #30
   153cc:	movne	r2, #1
   153d0:	moveq	r2, #0
   153d4:	tst	r0, #536870912	; 0x20000000
   153d8:	movne	r2, #1
   153dc:	cmp	r0, #0
   153e0:	movne	r4, r2
   153e4:	orreq	r4, r2, #1
   153e8:	cmp	r4, #0
   153ec:	mov	r6, r0
   153f0:	bne	154c4 <__assert_fail@plt+0x4318>
   153f4:	ldr	r3, [r5, #8]
   153f8:	cmp	r3, r0
   153fc:	beq	154b4 <__assert_fail@plt+0x4308>
   15400:	mov	r1, #8
   15404:	bl	188d0 <__assert_fail@plt+0x7724>
   15408:	cmp	r0, #0
   1540c:	str	r0, [sp, #8]
   15410:	beq	154c4 <__assert_fail@plt+0x4318>
   15414:	ldr	r1, [r5, #24]
   15418:	ldr	r7, [r5, #20]
   1541c:	ldr	lr, [r5, #28]
   15420:	ldr	ip, [r5, #32]
   15424:	add	r0, r0, r6, lsl #3
   15428:	ldr	r3, [r5, #36]	; 0x24
   1542c:	str	r0, [sp, #12]
   15430:	mov	r2, r4
   15434:	str	r1, [sp, #32]
   15438:	add	r0, sp, #8
   1543c:	mov	r1, r5
   15440:	str	r4, [sp, #20]
   15444:	str	r4, [sp, #24]
   15448:	str	r6, [sp, #16]
   1544c:	str	r7, [sp, #28]
   15450:	str	lr, [sp, #36]	; 0x24
   15454:	str	ip, [sp, #40]	; 0x28
   15458:	str	r3, [sp, #44]	; 0x2c
   1545c:	bl	14ac8 <__assert_fail@plt+0x391c>
   15460:	subs	r4, r0, #0
   15464:	bne	154d4 <__assert_fail@plt+0x4328>
   15468:	ldr	r3, [sp, #44]	; 0x2c
   1546c:	mov	r2, #1
   15470:	str	r3, [r5, #36]	; 0x24
   15474:	add	r1, sp, #8
   15478:	mov	r0, r5
   1547c:	bl	14ac8 <__assert_fail@plt+0x391c>
   15480:	cmp	r0, #0
   15484:	beq	15504 <__assert_fail@plt+0x4358>
   15488:	add	r1, sp, #8
   1548c:	mov	r0, r5
   15490:	mov	r2, r4
   15494:	bl	14ac8 <__assert_fail@plt+0x391c>
   15498:	cmp	r0, #0
   1549c:	beq	15504 <__assert_fail@plt+0x4358>
   154a0:	ldr	r0, [sp, #8]
   154a4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   154a8:	mov	r0, r4
   154ac:	add	sp, sp, #52	; 0x34
   154b0:	pop	{r4, r5, r6, r7, pc}
   154b4:	mov	r4, #1
   154b8:	mov	r0, r4
   154bc:	add	sp, sp, #52	; 0x34
   154c0:	pop	{r4, r5, r6, r7, pc}
   154c4:	mov	r4, #0
   154c8:	mov	r0, r4
   154cc:	add	sp, sp, #52	; 0x34
   154d0:	pop	{r4, r5, r6, r7, pc}
   154d4:	ldr	r0, [r5]
   154d8:	bl	18e18 <__assert_fail@plt+0x7c6c>
   154dc:	add	r0, sp, #12
   154e0:	ldr	ip, [sp, #8]
   154e4:	ldm	r0, {r0, r1, r2}
   154e8:	ldr	r3, [sp, #44]	; 0x2c
   154ec:	str	ip, [r5]
   154f0:	stmib	r5, {r0, r1, r2}
   154f4:	mov	r0, r4
   154f8:	str	r3, [r5, #36]	; 0x24
   154fc:	add	sp, sp, #52	; 0x34
   15500:	pop	{r4, r5, r6, r7, pc}
   15504:	bl	1117c <abort@plt>
   15508:	svcmi	0x00800000
   1550c:	push	{r4, r5, r6, lr}
   15510:	subs	r6, r1, #0
   15514:	sub	sp, sp, #8
   15518:	beq	1564c <__assert_fail@plt+0x44a0>
   1551c:	mov	r4, r2
   15520:	mov	r3, #0
   15524:	add	r2, sp, #4
   15528:	mov	r5, r0
   1552c:	bl	1491c <__assert_fail@plt+0x3770>
   15530:	cmp	r0, #0
   15534:	beq	15550 <__assert_fail@plt+0x43a4>
   15538:	cmp	r4, #0
   1553c:	moveq	r0, r4
   15540:	strne	r0, [r4]
   15544:	movne	r0, #0
   15548:	add	sp, sp, #8
   1554c:	pop	{r4, r5, r6, pc}
   15550:	vldr	s15, [r5, #8]
   15554:	ldr	r3, [r5, #20]
   15558:	vldr	s14, [r5, #12]
   1555c:	vcvt.f32.u32	s15, s15
   15560:	vldr	s13, [r3, #8]
   15564:	vcvt.f32.u32	s14, s14
   15568:	vmul.f32	s15, s15, s13
   1556c:	vcmpe.f32	s14, s15
   15570:	vmrs	APSR_nzcv, fpscr
   15574:	bgt	155c4 <__assert_fail@plt+0x4418>
   15578:	ldr	r2, [sp, #4]
   1557c:	ldr	r3, [r2]
   15580:	cmp	r3, #0
   15584:	beq	15650 <__assert_fail@plt+0x44a4>
   15588:	ldr	r3, [r5, #36]	; 0x24
   1558c:	cmp	r3, #0
   15590:	beq	15674 <__assert_fail@plt+0x44c8>
   15594:	ldr	r1, [r3, #4]
   15598:	str	r1, [r5, #36]	; 0x24
   1559c:	ldr	r1, [r5, #16]
   155a0:	ldr	r0, [r2, #4]
   155a4:	add	r1, r1, #1
   155a8:	str	r0, [r3, #4]
   155ac:	str	r6, [r3]
   155b0:	mov	r0, #1
   155b4:	str	r3, [r2, #4]
   155b8:	str	r1, [r5, #16]
   155bc:	add	sp, sp, #8
   155c0:	pop	{r4, r5, r6, pc}
   155c4:	add	r0, r5, #20
   155c8:	bl	14a18 <__assert_fail@plt+0x386c>
   155cc:	vldr	s15, [r5, #8]
   155d0:	ldr	r3, [r5, #20]
   155d4:	vldr	s14, [r5, #12]
   155d8:	vcvt.f32.u32	s15, s15
   155dc:	vldr	s13, [r3, #8]
   155e0:	vcvt.f32.u32	s14, s14
   155e4:	vmul.f32	s12, s13, s15
   155e8:	vcmpe.f32	s14, s12
   155ec:	vmrs	APSR_nzcv, fpscr
   155f0:	ble	15578 <__assert_fail@plt+0x43cc>
   155f4:	vldr	s14, [r3, #12]
   155f8:	ldrb	r2, [r3, #16]
   155fc:	vmul.f32	s15, s15, s14
   15600:	cmp	r2, #0
   15604:	vldr	s14, [pc, #132]	; 15690 <__assert_fail@plt+0x44e4>
   15608:	vmuleq.f32	s15, s15, s13
   1560c:	vcmpe.f32	s15, s14
   15610:	vmrs	APSR_nzcv, fpscr
   15614:	bge	15688 <__assert_fail@plt+0x44dc>
   15618:	vcvt.u32.f32	s15, s15
   1561c:	mov	r0, r5
   15620:	vmov	r1, s15
   15624:	bl	15378 <__assert_fail@plt+0x41cc>
   15628:	cmp	r0, #0
   1562c:	beq	15688 <__assert_fail@plt+0x44dc>
   15630:	add	r2, sp, #4
   15634:	mov	r3, #0
   15638:	mov	r1, r6
   1563c:	mov	r0, r5
   15640:	bl	1491c <__assert_fail@plt+0x3770>
   15644:	cmp	r0, #0
   15648:	beq	15578 <__assert_fail@plt+0x43cc>
   1564c:	bl	1117c <abort@plt>
   15650:	ldr	r1, [r5, #16]
   15654:	ldr	r3, [r5, #12]
   15658:	add	r1, r1, #1
   1565c:	add	r3, r3, #1
   15660:	str	r6, [r2]
   15664:	mov	r0, #1
   15668:	str	r1, [r5, #16]
   1566c:	str	r3, [r5, #12]
   15670:	b	15548 <__assert_fail@plt+0x439c>
   15674:	mov	r0, #8
   15678:	bl	18918 <__assert_fail@plt+0x776c>
   1567c:	subs	r3, r0, #0
   15680:	ldrne	r2, [sp, #4]
   15684:	bne	1559c <__assert_fail@plt+0x43f0>
   15688:	mvn	r0, #0
   1568c:	b	15548 <__assert_fail@plt+0x439c>
   15690:	svcmi	0x00800000
   15694:	push	{r4, lr}
   15698:	sub	sp, sp, #8
   1569c:	add	r2, sp, #4
   156a0:	mov	r4, r1
   156a4:	bl	1550c <__assert_fail@plt+0x4360>
   156a8:	cmn	r0, #1
   156ac:	beq	156c4 <__assert_fail@plt+0x4518>
   156b0:	cmp	r0, #0
   156b4:	movne	r0, r4
   156b8:	ldreq	r0, [sp, #4]
   156bc:	add	sp, sp, #8
   156c0:	pop	{r4, pc}
   156c4:	mov	r0, #0
   156c8:	b	156bc <__assert_fail@plt+0x4510>
   156cc:	push	{r4, r5, r6, lr}
   156d0:	sub	sp, sp, #8
   156d4:	mov	r3, #1
   156d8:	add	r2, sp, #4
   156dc:	mov	r4, r0
   156e0:	bl	1491c <__assert_fail@plt+0x3770>
   156e4:	subs	r5, r0, #0
   156e8:	beq	15708 <__assert_fail@plt+0x455c>
   156ec:	ldr	r2, [sp, #4]
   156f0:	ldr	r3, [r4, #16]
   156f4:	ldr	r2, [r2]
   156f8:	sub	r3, r3, #1
   156fc:	cmp	r2, #0
   15700:	str	r3, [r4, #16]
   15704:	beq	15714 <__assert_fail@plt+0x4568>
   15708:	mov	r0, r5
   1570c:	add	sp, sp, #8
   15710:	pop	{r4, r5, r6, pc}
   15714:	vldr	s15, [r4, #8]
   15718:	ldr	r3, [r4, #12]
   1571c:	ldr	r2, [r4, #20]
   15720:	sub	r3, r3, #1
   15724:	vcvt.f32.u32	s14, s15
   15728:	vldr	s13, [r2]
   1572c:	vmov	s15, r3
   15730:	str	r3, [r4, #12]
   15734:	vcvt.f32.u32	s15, s15
   15738:	vmul.f32	s14, s14, s13
   1573c:	vcmpe.f32	s15, s14
   15740:	vmrs	APSR_nzcv, fpscr
   15744:	bpl	15708 <__assert_fail@plt+0x455c>
   15748:	add	r0, r4, #20
   1574c:	bl	14a18 <__assert_fail@plt+0x386c>
   15750:	vldr	s15, [r4, #8]
   15754:	ldr	r3, [r4, #20]
   15758:	vldr	s13, [r4, #12]
   1575c:	vcvt.f32.u32	s15, s15
   15760:	vldr	s14, [r3]
   15764:	vcvt.f32.u32	s13, s13
   15768:	vmul.f32	s14, s15, s14
   1576c:	vcmpe.f32	s13, s14
   15770:	vmrs	APSR_nzcv, fpscr
   15774:	bpl	15708 <__assert_fail@plt+0x455c>
   15778:	ldrb	r2, [r3, #16]
   1577c:	mov	r0, r4
   15780:	cmp	r2, #0
   15784:	vldreq	s13, [r3, #4]
   15788:	vldrne	s14, [r3, #4]
   1578c:	vldreq	s14, [r3, #8]
   15790:	vmuleq.f32	s15, s15, s13
   15794:	vmul.f32	s15, s15, s14
   15798:	vcvt.u32.f32	s15, s15
   1579c:	vmov	r1, s15
   157a0:	bl	15378 <__assert_fail@plt+0x41cc>
   157a4:	cmp	r0, #0
   157a8:	bne	15708 <__assert_fail@plt+0x455c>
   157ac:	ldr	r0, [r4, #36]	; 0x24
   157b0:	cmp	r0, #0
   157b4:	beq	157c8 <__assert_fail@plt+0x461c>
   157b8:	ldr	r6, [r0, #4]
   157bc:	bl	18e18 <__assert_fail@plt+0x7c6c>
   157c0:	subs	r0, r6, #0
   157c4:	bne	157b8 <__assert_fail@plt+0x460c>
   157c8:	mov	r3, #0
   157cc:	str	r3, [r4, #36]	; 0x24
   157d0:	b	15708 <__assert_fail@plt+0x455c>
   157d4:	b	156cc <__assert_fail@plt+0x4520>
   157d8:	mov	r3, #0
   157dc:	mov	r2, #1
   157e0:	str	r1, [r0]
   157e4:	str	r1, [r0, #4]
   157e8:	str	r1, [r0, #8]
   157ec:	str	r1, [r0, #12]
   157f0:	str	r1, [r0, #16]
   157f4:	strb	r2, [r0, #28]
   157f8:	str	r3, [r0, #20]
   157fc:	str	r3, [r0, #24]
   15800:	bx	lr
   15804:	ldrb	r0, [r0, #28]
   15808:	bx	lr
   1580c:	ldrb	ip, [r0, #28]
   15810:	ldr	r3, [r0, #20]
   15814:	mov	r2, r0
   15818:	eor	ip, ip, #1
   1581c:	add	r3, ip, r3
   15820:	and	r3, r3, #3
   15824:	ldr	r0, [r0, r3, lsl #2]
   15828:	str	r1, [r2, r3, lsl #2]
   1582c:	ldr	r1, [r2, #24]
   15830:	str	r3, [r2, #20]
   15834:	cmp	r3, r1
   15838:	addeq	r3, ip, r3
   1583c:	andeq	r3, r3, #3
   15840:	streq	r3, [r2, #24]
   15844:	mov	r3, #0
   15848:	strb	r3, [r2, #28]
   1584c:	bx	lr
   15850:	ldrb	r3, [r0, #28]
   15854:	cmp	r3, #0
   15858:	bne	15890 <__assert_fail@plt+0x46e4>
   1585c:	ldr	r3, [r0, #20]
   15860:	ldr	r1, [r0, #16]
   15864:	ldr	r2, [r0, r3, lsl #2]
   15868:	str	r1, [r0, r3, lsl #2]
   1586c:	ldr	r1, [r0, #24]
   15870:	cmp	r3, r1
   15874:	addne	r3, r3, #3
   15878:	moveq	r3, #1
   1587c:	andne	r3, r3, #3
   15880:	strbeq	r3, [r0, #28]
   15884:	strne	r3, [r0, #20]
   15888:	mov	r0, r2
   1588c:	bx	lr
   15890:	push	{r4, lr}
   15894:	bl	1117c <abort@plt>
   15898:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1589c:	mov	r4, r0
   158a0:	ldrb	r3, [r0]
   158a4:	sub	r2, r3, #48	; 0x30
   158a8:	cmp	r2, #7
   158ac:	bls	15944 <__assert_fail@plt+0x4798>
   158b0:	cmp	r3, #0
   158b4:	moveq	r0, #1
   158b8:	beq	158e8 <__assert_fail@plt+0x473c>
   158bc:	mov	r1, r4
   158c0:	mov	r0, #1
   158c4:	and	r2, r3, #239	; 0xef
   158c8:	cmp	r3, #43	; 0x2b
   158cc:	cmpne	r2, #45	; 0x2d
   158d0:	ldrb	r3, [r1, #1]!
   158d4:	moveq	r2, #1
   158d8:	movne	r2, #0
   158dc:	cmp	r3, #0
   158e0:	add	r0, r0, r2
   158e4:	bne	158c4 <__assert_fail@plt+0x4718>
   158e8:	mov	r1, #16
   158ec:	ldr	r6, [pc, #816]	; 15c24 <__assert_fail@plt+0x4a78>
   158f0:	bl	183b0 <__assert_fail@plt+0x7204>
   158f4:	mov	r8, #3
   158f8:	mov	ip, #0
   158fc:	mov	r9, #1
   15900:	mov	sl, #2
   15904:	mov	fp, #0
   15908:	ldrb	r5, [r4]
   1590c:	mov	r1, r4
   15910:	add	r4, r4, #1
   15914:	cmp	r5, #97	; 0x61
   15918:	beq	15b8c <__assert_fail@plt+0x49e0>
   1591c:	bls	1598c <__assert_fail@plt+0x47e0>
   15920:	cmp	r5, #111	; 0x6f
   15924:	beq	15b94 <__assert_fail@plt+0x49e8>
   15928:	cmp	r5, #117	; 0x75
   1592c:	beq	15984 <__assert_fail@plt+0x47d8>
   15930:	cmp	r5, #103	; 0x67
   15934:	beq	15ba0 <__assert_fail@plt+0x49f4>
   15938:	bl	18e18 <__assert_fail@plt+0x7c6c>
   1593c:	mov	r0, #0
   15940:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15944:	add	r1, r0, #1
   15948:	mov	r5, #0
   1594c:	ldr	ip, [pc, #720]	; 15c24 <__assert_fail@plt+0x4a78>
   15950:	b	15968 <__assert_fail@plt+0x47bc>
   15954:	ldrb	r3, [r2], #1
   15958:	sub	r0, r3, #48	; 0x30
   1595c:	cmp	r0, #7
   15960:	bhi	15bac <__assert_fail@plt+0x4a00>
   15964:	mov	r1, r2
   15968:	add	r5, r3, r5, lsl #3
   1596c:	sub	r5, r5, #48	; 0x30
   15970:	cmp	r5, ip
   15974:	mov	r2, r1
   15978:	bls	15954 <__assert_fail@plt+0x47a8>
   1597c:	mov	r0, #0
   15980:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15984:	orr	fp, fp, #2496	; 0x9c0
   15988:	b	15908 <__assert_fail@plt+0x475c>
   1598c:	cmp	r5, #45	; 0x2d
   15990:	beq	159a4 <__assert_fail@plt+0x47f8>
   15994:	cmp	r5, #61	; 0x3d
   15998:	beq	159a4 <__assert_fail@plt+0x47f8>
   1599c:	cmp	r5, #43	; 0x2b
   159a0:	bne	15938 <__assert_fail@plt+0x478c>
   159a4:	add	r7, ip, #1
   159a8:	add	ip, r0, ip, lsl #4
   159ac:	b	15a0c <__assert_fail@plt+0x4860>
   159b0:	cmp	r3, #111	; 0x6f
   159b4:	beq	15b78 <__assert_fail@plt+0x49cc>
   159b8:	cmp	r3, #117	; 0x75
   159bc:	bne	15aa4 <__assert_fail@plt+0x48f8>
   159c0:	ldrb	r3, [r1, #2]
   159c4:	mov	r4, r8
   159c8:	add	r1, r1, #2
   159cc:	mov	r2, #448	; 0x1c0
   159d0:	cmp	fp, #0
   159d4:	strb	r5, [ip]
   159d8:	str	r2, [ip, #8]
   159dc:	mov	r5, r3
   159e0:	andne	r2, r2, fp
   159e4:	strb	r4, [ip, #1]
   159e8:	str	fp, [ip, #4]
   159ec:	and	lr, r3, #239	; 0xef
   159f0:	cmp	r3, #43	; 0x2b
   159f4:	cmpne	lr, #45	; 0x2d
   159f8:	str	r2, [ip, #12]
   159fc:	add	r2, r7, #1
   15a00:	add	ip, ip, #16
   15a04:	bne	15c00 <__assert_fail@plt+0x4a54>
   15a08:	mov	r7, r2
   15a0c:	ldrb	r3, [r1, #1]
   15a10:	add	r2, r1, #1
   15a14:	cmp	r3, #103	; 0x67
   15a18:	beq	15a90 <__assert_fail@plt+0x48e4>
   15a1c:	bhi	159b0 <__assert_fail@plt+0x4804>
   15a20:	sub	lr, r3, #48	; 0x30
   15a24:	cmp	lr, #7
   15a28:	addls	lr, r1, #2
   15a2c:	movls	r2, #0
   15a30:	bhi	15aa4 <__assert_fail@plt+0x48f8>
   15a34:	add	r2, r3, r2, lsl #3
   15a38:	sub	r2, r2, #48	; 0x30
   15a3c:	cmp	r2, r6
   15a40:	mov	r1, lr
   15a44:	bhi	15938 <__assert_fail@plt+0x478c>
   15a48:	ldrb	r3, [lr]
   15a4c:	add	lr, lr, #1
   15a50:	sub	r4, r3, #48	; 0x30
   15a54:	cmp	r4, #7
   15a58:	bls	15a34 <__assert_fail@plt+0x4888>
   15a5c:	cmp	fp, #0
   15a60:	bne	15938 <__assert_fail@plt+0x478c>
   15a64:	cmp	r3, #0
   15a68:	cmpne	r3, #44	; 0x2c
   15a6c:	bne	15938 <__assert_fail@plt+0x478c>
   15a70:	ldr	fp, [pc, #428]	; 15c24 <__assert_fail@plt+0x4a78>
   15a74:	strb	r5, [ip]
   15a78:	str	r2, [ip, #8]
   15a7c:	strb	r9, [ip, #1]
   15a80:	str	r6, [ip, #4]
   15a84:	mov	r2, fp
   15a88:	mov	r5, r3
   15a8c:	b	159ec <__assert_fail@plt+0x4840>
   15a90:	ldrb	r3, [r1, #2]
   15a94:	mov	r4, r8
   15a98:	add	r1, r1, #2
   15a9c:	mov	r2, #56	; 0x38
   15aa0:	b	159d0 <__assert_fail@plt+0x4824>
   15aa4:	mov	r1, r2
   15aa8:	mov	r4, r9
   15aac:	mov	r2, #0
   15ab0:	sub	lr, r3, #88	; 0x58
   15ab4:	cmp	lr, #32
   15ab8:	ldrls	pc, [pc, lr, lsl #2]
   15abc:	b	159d0 <__assert_fail@plt+0x4824>
   15ac0:	andeq	r5, r1, r4, asr #22
   15ac4:	ldrdeq	r5, [r1], -r0
   15ac8:	ldrdeq	r5, [r1], -r0
   15acc:	ldrdeq	r5, [r1], -r0
   15ad0:	ldrdeq	r5, [r1], -r0
   15ad4:	ldrdeq	r5, [r1], -r0
   15ad8:	ldrdeq	r5, [r1], -r0
   15adc:	ldrdeq	r5, [r1], -r0
   15ae0:	ldrdeq	r5, [r1], -r0
   15ae4:	ldrdeq	r5, [r1], -r0
   15ae8:	ldrdeq	r5, [r1], -r0
   15aec:	ldrdeq	r5, [r1], -r0
   15af0:	ldrdeq	r5, [r1], -r0
   15af4:	ldrdeq	r5, [r1], -r0
   15af8:	ldrdeq	r5, [r1], -r0
   15afc:	ldrdeq	r5, [r1], -r0
   15b00:	ldrdeq	r5, [r1], -r0
   15b04:	ldrdeq	r5, [r1], -r0
   15b08:	ldrdeq	r5, [r1], -r0
   15b0c:	ldrdeq	r5, [r1], -r0
   15b10:	ldrdeq	r5, [r1], -r0
   15b14:	ldrdeq	r5, [r1], -r0
   15b18:	ldrdeq	r5, [r1], -r0
   15b1c:	ldrdeq	r5, [r1], -r0
   15b20:	ldrdeq	r5, [r1], -r0
   15b24:	ldrdeq	r5, [r1], -r0
   15b28:	andeq	r5, r1, r0, ror fp
   15b2c:	andeq	r5, r1, r8, ror #22
   15b30:	andeq	r5, r1, r0, ror #22
   15b34:	ldrdeq	r5, [r1], -r0
   15b38:	ldrdeq	r5, [r1], -r0
   15b3c:	andeq	r5, r1, r8, asr fp
   15b40:	andeq	r5, r1, r0, asr fp
   15b44:	mov	r4, sl
   15b48:	ldrb	r3, [r1, #1]!
   15b4c:	b	15ab0 <__assert_fail@plt+0x4904>
   15b50:	orr	r2, r2, #73	; 0x49
   15b54:	b	15b48 <__assert_fail@plt+0x499c>
   15b58:	orr	r2, r2, #146	; 0x92
   15b5c:	b	15b48 <__assert_fail@plt+0x499c>
   15b60:	orr	r2, r2, #512	; 0x200
   15b64:	b	15b48 <__assert_fail@plt+0x499c>
   15b68:	orr	r2, r2, #3072	; 0xc00
   15b6c:	b	15b48 <__assert_fail@plt+0x499c>
   15b70:	orr	r2, r2, #292	; 0x124
   15b74:	b	15b48 <__assert_fail@plt+0x499c>
   15b78:	ldrb	r3, [r1, #2]
   15b7c:	mov	r4, r8
   15b80:	add	r1, r1, #2
   15b84:	mov	r2, #7
   15b88:	b	159d0 <__assert_fail@plt+0x4824>
   15b8c:	ldr	fp, [pc, #144]	; 15c24 <__assert_fail@plt+0x4a78>
   15b90:	b	15908 <__assert_fail@plt+0x475c>
   15b94:	orr	fp, fp, #516	; 0x204
   15b98:	orr	fp, fp, #3
   15b9c:	b	15908 <__assert_fail@plt+0x475c>
   15ba0:	orr	fp, fp, #1072	; 0x430
   15ba4:	orr	fp, fp, #8
   15ba8:	b	15908 <__assert_fail@plt+0x475c>
   15bac:	cmp	r3, #0
   15bb0:	bne	1597c <__assert_fail@plt+0x47d0>
   15bb4:	sub	r1, r1, r4
   15bb8:	cmp	r1, #4
   15bbc:	andle	r4, r5, #3072	; 0xc00
   15bc0:	mov	r0, #32
   15bc4:	mvnle	r4, r4, lsr #10
   15bc8:	ldrgt	r4, [pc, #84]	; 15c24 <__assert_fail@plt+0x4a78>
   15bcc:	mvnle	r4, r4, lsl #10
   15bd0:	bl	182c8 <__assert_fail@plt+0x711c>
   15bd4:	ldr	r2, [pc, #72]	; 15c24 <__assert_fail@plt+0x4a78>
   15bd8:	mov	ip, #61	; 0x3d
   15bdc:	mov	r1, #1
   15be0:	mov	r3, #0
   15be4:	str	r5, [r0, #8]
   15be8:	str	r4, [r0, #12]
   15bec:	strb	ip, [r0]
   15bf0:	strb	r1, [r0, #1]
   15bf4:	str	r2, [r0, #4]
   15bf8:	strb	r3, [r0, #17]
   15bfc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c00:	cmp	r3, #44	; 0x2c
   15c04:	addeq	r4, r1, #1
   15c08:	moveq	ip, r7
   15c0c:	beq	15904 <__assert_fail@plt+0x4758>
   15c10:	cmp	r3, #0
   15c14:	bne	15938 <__assert_fail@plt+0x478c>
   15c18:	add	r7, r0, r7, lsl #4
   15c1c:	strb	r3, [r7, #1]
   15c20:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c24:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15c28:	push	{r4, r5, lr}
   15c2c:	sub	sp, sp, #108	; 0x6c
   15c30:	mov	r1, r0
   15c34:	mov	r2, sp
   15c38:	mov	r0, #3
   15c3c:	bl	11164 <__xstat64@plt>
   15c40:	subs	r4, r0, #0
   15c44:	movne	r0, #0
   15c48:	bne	15c7c <__assert_fail@plt+0x4ad0>
   15c4c:	mov	r0, #32
   15c50:	ldr	r5, [sp, #16]
   15c54:	bl	182c8 <__assert_fail@plt+0x711c>
   15c58:	ldr	r3, [pc, #36]	; 15c84 <__assert_fail@plt+0x4ad8>
   15c5c:	mov	r1, #61	; 0x3d
   15c60:	mov	r2, #1
   15c64:	str	r5, [r0, #8]
   15c68:	strb	r4, [r0, #17]
   15c6c:	strb	r1, [r0]
   15c70:	strb	r2, [r0, #1]
   15c74:	str	r3, [r0, #4]
   15c78:	str	r3, [r0, #12]
   15c7c:	add	sp, sp, #108	; 0x6c
   15c80:	pop	{r4, r5, pc}
   15c84:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c8c:	ldrb	r8, [r3, #1]
   15c90:	ldr	r6, [pc, #284]	; 15db4 <__assert_fail@plt+0x4c08>
   15c94:	ldr	r7, [sp, #32]
   15c98:	cmp	r8, #0
   15c9c:	and	r0, r0, r6
   15ca0:	beq	15dac <__assert_fail@plt+0x4c00>
   15ca4:	cmp	r1, #0
   15ca8:	add	r3, r3, #16
   15cac:	mvn	r2, r2
   15cb0:	movne	r5, #3072	; 0xc00
   15cb4:	moveq	r5, #0
   15cb8:	mov	r4, #0
   15cbc:	b	15d40 <__assert_fail@plt+0x4b94>
   15cc0:	cmp	r8, #3
   15cc4:	bne	15cfc <__assert_fail@plt+0x4b50>
   15cc8:	and	ip, ip, r0
   15ccc:	tst	ip, #292	; 0x124
   15cd0:	movne	r8, #292	; 0x124
   15cd4:	moveq	r8, #0
   15cd8:	tst	ip, #146	; 0x92
   15cdc:	movne	sl, #146	; 0x92
   15ce0:	moveq	sl, #0
   15ce4:	tst	ip, #73	; 0x49
   15ce8:	orr	sl, r8, sl
   15cec:	movne	r8, #73	; 0x49
   15cf0:	moveq	r8, #0
   15cf4:	orr	r8, r8, sl
   15cf8:	orr	ip, r8, ip
   15cfc:	ldrb	r8, [r3, #-16]
   15d00:	cmp	lr, #0
   15d04:	movne	sl, lr
   15d08:	moveq	sl, r2
   15d0c:	bic	ip, ip, r9
   15d10:	cmp	r8, #45	; 0x2d
   15d14:	and	ip, ip, sl
   15d18:	beq	15da0 <__assert_fail@plt+0x4bf4>
   15d1c:	cmp	r8, #61	; 0x3d
   15d20:	beq	15d68 <__assert_fail@plt+0x4bbc>
   15d24:	cmp	r8, #43	; 0x2b
   15d28:	orreq	r4, r4, ip
   15d2c:	orreq	r0, r0, ip
   15d30:	add	r3, r3, #16
   15d34:	ldrb	r8, [r3, #-15]
   15d38:	cmp	r8, #0
   15d3c:	beq	15d94 <__assert_fail@plt+0x4be8>
   15d40:	ldr	lr, [r3, #-4]
   15d44:	cmp	r8, #2
   15d48:	bic	r9, r5, lr
   15d4c:	ldr	ip, [r3, #-8]
   15d50:	ldr	lr, [r3, #-12]
   15d54:	bne	15cc0 <__assert_fail@plt+0x4b14>
   15d58:	and	r8, r0, #73	; 0x49
   15d5c:	orrs	r8, r8, r1
   15d60:	orrne	ip, ip, #73	; 0x49
   15d64:	b	15cfc <__assert_fail@plt+0x4b50>
   15d68:	add	r3, r3, #16
   15d6c:	cmp	lr, #0
   15d70:	ldrb	r8, [r3, #-15]
   15d74:	mvnne	lr, lr
   15d78:	orr	lr, lr, r9
   15d7c:	and	r0, r0, lr
   15d80:	cmp	r8, #0
   15d84:	bic	lr, r6, lr
   15d88:	orr	r0, ip, r0
   15d8c:	orr	r4, r4, lr
   15d90:	bne	15d40 <__assert_fail@plt+0x4b94>
   15d94:	cmp	r7, #0
   15d98:	strne	r4, [r7]
   15d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15da0:	orr	r4, r4, ip
   15da4:	bic	r0, r0, ip
   15da8:	b	15d30 <__assert_fail@plt+0x4b84>
   15dac:	mov	r4, r8
   15db0:	b	15d94 <__assert_fail@plt+0x4be8>
   15db4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15db8:	push	{r2, r3}
   15dbc:	push	{lr}		; (str lr, [sp, #-4]!)
   15dc0:	sub	sp, sp, #12
   15dc4:	ldr	r2, [sp, #16]
   15dc8:	ands	r3, r2, #64	; 0x40
   15dcc:	addne	r3, sp, #20
   15dd0:	strne	r3, [sp, #4]
   15dd4:	ldrne	r3, [sp, #20]
   15dd8:	bl	11050 <openat64@plt>
   15ddc:	bl	17d6c <__assert_fail@plt+0x6bc0>
   15de0:	add	sp, sp, #12
   15de4:	pop	{lr}		; (ldr lr, [sp], #4)
   15de8:	add	sp, sp, #8
   15dec:	bx	lr
   15df0:	orr	r2, r2, #540672	; 0x84000
   15df4:	push	{r4, r5, r6, lr}
   15df8:	orr	r2, r2, #2304	; 0x900
   15dfc:	mov	r6, r3
   15e00:	bl	15db8 <__assert_fail@plt+0x4c0c>
   15e04:	subs	r5, r0, #0
   15e08:	blt	15e3c <__assert_fail@plt+0x4c90>
   15e0c:	bl	11110 <fdopendir@plt>
   15e10:	subs	r4, r0, #0
   15e14:	beq	15e24 <__assert_fail@plt+0x4c78>
   15e18:	str	r5, [r6]
   15e1c:	mov	r0, r4
   15e20:	pop	{r4, r5, r6, pc}
   15e24:	bl	11068 <__errno_location@plt>
   15e28:	mov	r6, r0
   15e2c:	mov	r0, r5
   15e30:	ldr	r5, [r6]
   15e34:	bl	11188 <close@plt>
   15e38:	b	15e18 <__assert_fail@plt+0x4c6c>
   15e3c:	mov	r4, #0
   15e40:	b	15e1c <__assert_fail@plt+0x4c70>
   15e44:	push	{r4, r5, r6, lr}
   15e48:	subs	r4, r0, #0
   15e4c:	beq	15ec0 <__assert_fail@plt+0x4d14>
   15e50:	mov	r1, #47	; 0x2f
   15e54:	bl	110ec <strrchr@plt>
   15e58:	subs	r5, r0, #0
   15e5c:	beq	15eac <__assert_fail@plt+0x4d00>
   15e60:	add	r6, r5, #1
   15e64:	sub	r3, r6, r4
   15e68:	cmp	r3, #6
   15e6c:	ble	15eac <__assert_fail@plt+0x4d00>
   15e70:	mov	r2, #7
   15e74:	ldr	r1, [pc, #96]	; 15edc <__assert_fail@plt+0x4d30>
   15e78:	sub	r0, r5, #6
   15e7c:	bl	11170 <strncmp@plt>
   15e80:	cmp	r0, #0
   15e84:	bne	15eac <__assert_fail@plt+0x4d00>
   15e88:	mov	r2, #3
   15e8c:	ldr	r1, [pc, #76]	; 15ee0 <__assert_fail@plt+0x4d34>
   15e90:	mov	r0, r6
   15e94:	bl	11170 <strncmp@plt>
   15e98:	cmp	r0, #0
   15e9c:	movne	r4, r6
   15ea0:	ldreq	r3, [pc, #60]	; 15ee4 <__assert_fail@plt+0x4d38>
   15ea4:	addeq	r4, r5, #4
   15ea8:	streq	r4, [r3]
   15eac:	ldr	r2, [pc, #52]	; 15ee8 <__assert_fail@plt+0x4d3c>
   15eb0:	ldr	r3, [pc, #52]	; 15eec <__assert_fail@plt+0x4d40>
   15eb4:	str	r4, [r2]
   15eb8:	str	r4, [r3]
   15ebc:	pop	{r4, r5, r6, pc}
   15ec0:	ldr	r3, [pc, #40]	; 15ef0 <__assert_fail@plt+0x4d44>
   15ec4:	mov	r2, #55	; 0x37
   15ec8:	mov	r1, #1
   15ecc:	ldr	r3, [r3]
   15ed0:	ldr	r0, [pc, #28]	; 15ef4 <__assert_fail@plt+0x4d48>
   15ed4:	bl	10f9c <fwrite@plt>
   15ed8:	bl	1117c <abort@plt>
   15edc:	ldrdeq	sl, [r1], -r8
   15ee0:	andeq	sl, r1, r0, ror #5
   15ee4:	andeq	fp, r2, r8, ror #2
   15ee8:			; <UNDEFINED> instruction: 0x0002b1b0
   15eec:	andeq	fp, r2, ip, ror #2
   15ef0:	andeq	fp, r2, r8, ror r1
   15ef4:	andeq	sl, r1, r0, lsr #5
   15ef8:	push	{r4, r5, r6, lr}
   15efc:	mov	r2, #48	; 0x30
   15f00:	mov	r4, r1
   15f04:	mov	r1, #0
   15f08:	mov	r5, r0
   15f0c:	bl	1108c <memset@plt>
   15f10:	cmp	r4, #10
   15f14:	beq	15f24 <__assert_fail@plt+0x4d78>
   15f18:	str	r4, [r5]
   15f1c:	mov	r0, r5
   15f20:	pop	{r4, r5, r6, pc}
   15f24:	bl	1117c <abort@plt>
   15f28:	push	{r4, r5, r6, lr}
   15f2c:	mov	r4, r0
   15f30:	mov	r5, r1
   15f34:	bl	18f10 <__assert_fail@plt+0x7d64>
   15f38:	ldrb	r3, [r0]
   15f3c:	bic	r3, r3, #32
   15f40:	cmp	r3, #85	; 0x55
   15f44:	bne	15fa4 <__assert_fail@plt+0x4df8>
   15f48:	ldrb	r3, [r0, #1]
   15f4c:	bic	r3, r3, #32
   15f50:	cmp	r3, #84	; 0x54
   15f54:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15f58:	ldrb	r3, [r0, #2]
   15f5c:	bic	r3, r3, #32
   15f60:	cmp	r3, #70	; 0x46
   15f64:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15f68:	ldrb	r3, [r0, #3]
   15f6c:	cmp	r3, #45	; 0x2d
   15f70:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15f74:	ldrb	r3, [r0, #4]
   15f78:	cmp	r3, #56	; 0x38
   15f7c:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15f80:	ldrb	r3, [r0, #5]
   15f84:	cmp	r3, #0
   15f88:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15f8c:	ldrb	r2, [r4]
   15f90:	ldr	r3, [pc, #152]	; 16030 <__assert_fail@plt+0x4e84>
   15f94:	ldr	r0, [pc, #152]	; 16034 <__assert_fail@plt+0x4e88>
   15f98:	cmp	r2, #96	; 0x60
   15f9c:	movne	r0, r3
   15fa0:	pop	{r4, r5, r6, pc}
   15fa4:	cmp	r3, #71	; 0x47
   15fa8:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15fac:	ldrb	r3, [r0, #1]
   15fb0:	bic	r3, r3, #32
   15fb4:	cmp	r3, #66	; 0x42
   15fb8:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15fbc:	ldrb	r3, [r0, #2]
   15fc0:	cmp	r3, #49	; 0x31
   15fc4:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15fc8:	ldrb	r3, [r0, #3]
   15fcc:	cmp	r3, #56	; 0x38
   15fd0:	bne	15fe0 <__assert_fail@plt+0x4e34>
   15fd4:	ldrb	r3, [r0, #4]
   15fd8:	cmp	r3, #48	; 0x30
   15fdc:	beq	15ff4 <__assert_fail@plt+0x4e48>
   15fe0:	ldr	r3, [pc, #80]	; 16038 <__assert_fail@plt+0x4e8c>
   15fe4:	cmp	r5, #9
   15fe8:	ldr	r0, [pc, #76]	; 1603c <__assert_fail@plt+0x4e90>
   15fec:	movne	r0, r3
   15ff0:	pop	{r4, r5, r6, pc}
   15ff4:	ldrb	r3, [r0, #5]
   15ff8:	cmp	r3, #51	; 0x33
   15ffc:	bne	15fe0 <__assert_fail@plt+0x4e34>
   16000:	ldrb	r3, [r0, #6]
   16004:	cmp	r3, #48	; 0x30
   16008:	bne	15fe0 <__assert_fail@plt+0x4e34>
   1600c:	ldrb	r3, [r0, #7]
   16010:	cmp	r3, #0
   16014:	bne	15fe0 <__assert_fail@plt+0x4e34>
   16018:	ldrb	r2, [r4]
   1601c:	ldr	r3, [pc, #28]	; 16040 <__assert_fail@plt+0x4e94>
   16020:	ldr	r0, [pc, #28]	; 16044 <__assert_fail@plt+0x4e98>
   16024:	cmp	r2, #96	; 0x60
   16028:	movne	r0, r3
   1602c:	pop	{r4, r5, r6, pc}
   16030:	andeq	sl, r1, ip, lsr r3
   16034:	andeq	sl, r1, r8, lsr r3
   16038:	andeq	sl, r1, ip, asr #6
   1603c:	andeq	sl, r1, r8, asr #6
   16040:	andeq	sl, r1, r4, asr #6
   16044:	andeq	sl, r1, r0, asr #6
   16048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1604c:	sub	sp, sp, #116	; 0x74
   16050:	mov	sl, r0
   16054:	str	r3, [sp, #24]
   16058:	mov	r3, #1
   1605c:	mov	r8, r1
   16060:	str	r2, [sp, #56]	; 0x38
   16064:	str	r3, [sp, #36]	; 0x24
   16068:	bl	10fb4 <__ctype_get_mb_cur_max@plt>
   1606c:	ldr	r3, [sp, #156]	; 0x9c
   16070:	mov	fp, r8
   16074:	mov	r2, #0
   16078:	lsr	r3, r3, #1
   1607c:	and	r3, r3, #1
   16080:	str	r2, [sp, #68]	; 0x44
   16084:	str	r3, [sp, #28]
   16088:	str	r2, [sp, #40]	; 0x28
   1608c:	str	r2, [sp, #44]	; 0x2c
   16090:	str	r2, [sp, #52]	; 0x34
   16094:	str	r2, [sp, #64]	; 0x40
   16098:	str	r2, [sp, #72]	; 0x48
   1609c:	str	sl, [sp, #32]
   160a0:	str	r0, [sp, #76]	; 0x4c
   160a4:	ldr	r3, [sp, #152]	; 0x98
   160a8:	cmp	r3, #10
   160ac:	ldrls	pc, [pc, r3, lsl #2]
   160b0:	b	17270 <__assert_fail@plt+0x60c4>
   160b4:	andeq	r6, r1, r0, ror #1
   160b8:	andeq	r6, r1, r8, asr #7
   160bc:	andeq	r6, r1, ip, ror #7
   160c0:	andeq	r6, r1, r0, lsl r4
   160c4:	andeq	r6, r1, ip, lsr r5
   160c8:	andeq	r6, r1, r0, lsl r5
   160cc:	andeq	r6, r1, r8, ror #9
   160d0:	andeq	r6, r1, r4, lsr #8
   160d4:	andeq	r6, r1, ip, lsr r4
   160d8:	andeq	r6, r1, ip, lsr r4
   160dc:	andeq	r6, r1, ip, lsr r4
   160e0:	mov	r3, #0
   160e4:	mov	r7, r3
   160e8:	str	r3, [sp, #28]
   160ec:	ldr	r3, [sp, #44]	; 0x2c
   160f0:	mov	sl, #0
   160f4:	eor	r3, r3, #1
   160f8:	str	r3, [sp, #60]	; 0x3c
   160fc:	ldr	r3, [sp, #24]
   16100:	cmn	r3, #1
   16104:	beq	16668 <__assert_fail@plt+0x54bc>
   16108:	ldr	r3, [sp, #24]
   1610c:	subs	r5, r3, sl
   16110:	movne	r5, #1
   16114:	cmp	r5, #0
   16118:	beq	16680 <__assert_fail@plt+0x54d4>
   1611c:	ldr	r3, [sp, #152]	; 0x98
   16120:	ldr	r8, [sp, #44]	; 0x2c
   16124:	cmp	r3, #2
   16128:	moveq	r8, #0
   1612c:	andne	r8, r8, #1
   16130:	ldr	r3, [sp, #52]	; 0x34
   16134:	adds	r9, r3, #0
   16138:	movne	r9, #1
   1613c:	ands	r6, r9, r8
   16140:	beq	16ae8 <__assert_fail@plt+0x593c>
   16144:	ldr	r2, [sp, #52]	; 0x34
   16148:	ldr	r1, [sp, #24]
   1614c:	cmp	r2, #1
   16150:	mov	r3, r2
   16154:	movls	r3, #0
   16158:	movhi	r3, #1
   1615c:	cmn	r1, #1
   16160:	movne	r3, #0
   16164:	cmp	r3, #0
   16168:	add	r4, sl, r2
   1616c:	beq	1617c <__assert_fail@plt+0x4fd0>
   16170:	ldr	r0, [sp, #56]	; 0x38
   16174:	bl	11044 <strlen@plt>
   16178:	str	r0, [sp, #24]
   1617c:	ldr	r3, [sp, #24]
   16180:	cmp	r3, r4
   16184:	ldr	r3, [sp, #56]	; 0x38
   16188:	add	r3, r3, sl
   1618c:	str	r3, [sp, #48]	; 0x30
   16190:	bcc	16af4 <__assert_fail@plt+0x5948>
   16194:	mov	r0, r3
   16198:	ldr	r2, [sp, #52]	; 0x34
   1619c:	ldr	r1, [sp, #64]	; 0x40
   161a0:	bl	10f3c <memcmp@plt>
   161a4:	cmp	r0, #0
   161a8:	bne	16af4 <__assert_fail@plt+0x5948>
   161ac:	ldr	r3, [sp, #28]
   161b0:	cmp	r3, #0
   161b4:	bne	17370 <__assert_fail@plt+0x61c4>
   161b8:	ldr	r3, [sp, #48]	; 0x30
   161bc:	ldrb	r4, [r3]
   161c0:	cmp	r4, #126	; 0x7e
   161c4:	ldrls	pc, [pc, r4, lsl #2]
   161c8:	b	16a88 <__assert_fail@plt+0x58dc>
   161cc:	andeq	r6, r1, ip, lsr #17
   161d0:	andeq	r6, r1, r8, lsl #21
   161d4:	andeq	r6, r1, r8, lsl #21
   161d8:	andeq	r6, r1, r8, lsl #21
   161dc:	andeq	r6, r1, r8, lsl #21
   161e0:	andeq	r6, r1, r8, lsl #21
   161e4:	andeq	r6, r1, r8, lsl #21
   161e8:	muleq	r1, r0, r8
   161ec:	andeq	r6, r1, r4, ror r8
   161f0:	andeq	r6, r1, r0, ror sl
   161f4:	ldrdeq	r6, [r1], -r4
   161f8:			; <UNDEFINED> instruction: 0x000167b8
   161fc:	andeq	r6, r1, ip, asr #20
   16200:	andeq	r6, r1, r8, lsr #20
   16204:	andeq	r6, r1, r8, lsl #21
   16208:	andeq	r6, r1, r8, lsl #21
   1620c:	andeq	r6, r1, r8, lsl #21
   16210:	andeq	r6, r1, r8, lsl #21
   16214:	andeq	r6, r1, r8, lsl #21
   16218:	andeq	r6, r1, r8, lsl #21
   1621c:	andeq	r6, r1, r8, lsl #21
   16220:	andeq	r6, r1, r8, lsl #21
   16224:	andeq	r6, r1, r8, lsl #21
   16228:	andeq	r6, r1, r8, lsl #21
   1622c:	andeq	r6, r1, r8, lsl #21
   16230:	andeq	r6, r1, r8, lsl #21
   16234:	andeq	r6, r1, r8, lsl #21
   16238:	andeq	r6, r1, r8, lsl #21
   1623c:	andeq	r6, r1, r8, lsl #21
   16240:	andeq	r6, r1, r8, lsl #21
   16244:	andeq	r6, r1, r8, lsl #21
   16248:	andeq	r6, r1, r8, lsl #21
   1624c:	andeq	r6, r1, r8, ror #20
   16250:	muleq	r1, ip, r9
   16254:	muleq	r1, ip, r9
   16258:	andeq	r6, r1, ip, lsr #11
   1625c:	muleq	r1, ip, r9
   16260:	andeq	r6, r1, r4, lsr sl
   16264:	muleq	r1, ip, r9
   16268:	andeq	r6, r1, r8, lsl #20
   1626c:	muleq	r1, ip, r9
   16270:	muleq	r1, ip, r9
   16274:	muleq	r1, ip, r9
   16278:	andeq	r6, r1, r4, lsr sl
   1627c:	andeq	r6, r1, r4, lsr sl
   16280:	andeq	r6, r1, r4, lsr sl
   16284:	andeq	r6, r1, r4, lsr sl
   16288:	andeq	r6, r1, r4, lsr sl
   1628c:	andeq	r6, r1, r4, lsr sl
   16290:	andeq	r6, r1, r4, lsr sl
   16294:	andeq	r6, r1, r4, lsr sl
   16298:	andeq	r6, r1, r4, lsr sl
   1629c:	andeq	r6, r1, r4, lsr sl
   162a0:	andeq	r6, r1, r4, lsr sl
   162a4:	andeq	r6, r1, r4, lsr sl
   162a8:	andeq	r6, r1, r4, lsr sl
   162ac:	andeq	r6, r1, r4, lsr sl
   162b0:	andeq	r6, r1, r4, lsr sl
   162b4:	andeq	r6, r1, r4, lsr sl
   162b8:	muleq	r1, ip, r9
   162bc:	muleq	r1, ip, r9
   162c0:	muleq	r1, ip, r9
   162c4:	muleq	r1, ip, r9
   162c8:	ldrdeq	r6, [r1], -r8
   162cc:	andeq	r6, r1, r8, lsl #21
   162d0:	andeq	r6, r1, r4, lsr sl
   162d4:	andeq	r6, r1, r4, lsr sl
   162d8:	andeq	r6, r1, r4, lsr sl
   162dc:	andeq	r6, r1, r4, lsr sl
   162e0:	andeq	r6, r1, r4, lsr sl
   162e4:	andeq	r6, r1, r4, lsr sl
   162e8:	andeq	r6, r1, r4, lsr sl
   162ec:	andeq	r6, r1, r4, lsr sl
   162f0:	andeq	r6, r1, r4, lsr sl
   162f4:	andeq	r6, r1, r4, lsr sl
   162f8:	andeq	r6, r1, r4, lsr sl
   162fc:	andeq	r6, r1, r4, lsr sl
   16300:	andeq	r6, r1, r4, lsr sl
   16304:	andeq	r6, r1, r4, lsr sl
   16308:	andeq	r6, r1, r4, lsr sl
   1630c:	andeq	r6, r1, r4, lsr sl
   16310:	andeq	r6, r1, r4, lsr sl
   16314:	andeq	r6, r1, r4, lsr sl
   16318:	andeq	r6, r1, r4, lsr sl
   1631c:	andeq	r6, r1, r4, lsr sl
   16320:	andeq	r6, r1, r4, lsr sl
   16324:	andeq	r6, r1, r4, lsr sl
   16328:	andeq	r6, r1, r4, lsr sl
   1632c:	andeq	r6, r1, r4, lsr sl
   16330:	andeq	r6, r1, r4, lsr sl
   16334:	andeq	r6, r1, r4, lsr sl
   16338:	muleq	r1, ip, r9
   1633c:	strdeq	r6, [r1], -r8
   16340:	andeq	r6, r1, r4, lsr sl
   16344:	muleq	r1, ip, r9
   16348:	andeq	r6, r1, r4, lsr sl
   1634c:	muleq	r1, ip, r9
   16350:	andeq	r6, r1, r4, lsr sl
   16354:	andeq	r6, r1, r4, lsr sl
   16358:	andeq	r6, r1, r4, lsr sl
   1635c:	andeq	r6, r1, r4, lsr sl
   16360:	andeq	r6, r1, r4, lsr sl
   16364:	andeq	r6, r1, r4, lsr sl
   16368:	andeq	r6, r1, r4, lsr sl
   1636c:	andeq	r6, r1, r4, lsr sl
   16370:	andeq	r6, r1, r4, lsr sl
   16374:	andeq	r6, r1, r4, lsr sl
   16378:	andeq	r6, r1, r4, lsr sl
   1637c:	andeq	r6, r1, r4, lsr sl
   16380:	andeq	r6, r1, r4, lsr sl
   16384:	andeq	r6, r1, r4, lsr sl
   16388:	andeq	r6, r1, r4, lsr sl
   1638c:	andeq	r6, r1, r4, lsr sl
   16390:	andeq	r6, r1, r4, lsr sl
   16394:	andeq	r6, r1, r4, lsr sl
   16398:	andeq	r6, r1, r4, lsr sl
   1639c:	andeq	r6, r1, r4, lsr sl
   163a0:	andeq	r6, r1, r4, lsr sl
   163a4:	andeq	r6, r1, r4, lsr sl
   163a8:	andeq	r6, r1, r4, lsr sl
   163ac:	andeq	r6, r1, r4, lsr sl
   163b0:	andeq	r6, r1, r4, lsr sl
   163b4:	andeq	r6, r1, r4, lsr sl
   163b8:	andeq	r6, r1, ip, lsl #11
   163bc:	muleq	r1, ip, r9
   163c0:	andeq	r6, r1, ip, lsl #11
   163c4:	andeq	r6, r1, ip, lsr #11
   163c8:	mov	r3, #1
   163cc:	str	r3, [sp, #28]
   163d0:	str	r3, [sp, #52]	; 0x34
   163d4:	ldr	r3, [pc, #4000]	; 1737c <__assert_fail@plt+0x61d0>
   163d8:	mov	r7, #0
   163dc:	str	r3, [sp, #64]	; 0x40
   163e0:	mov	r3, #2
   163e4:	str	r3, [sp, #152]	; 0x98
   163e8:	b	160ec <__assert_fail@plt+0x4f40>
   163ec:	ldr	r3, [sp, #28]
   163f0:	cmp	r3, #0
   163f4:	beq	16550 <__assert_fail@plt+0x53a4>
   163f8:	mov	r3, #1
   163fc:	str	r3, [sp, #52]	; 0x34
   16400:	ldr	r3, [pc, #3956]	; 1737c <__assert_fail@plt+0x61d0>
   16404:	mov	r7, #0
   16408:	str	r3, [sp, #64]	; 0x40
   1640c:	b	160ec <__assert_fail@plt+0x4f40>
   16410:	mov	r3, #1
   16414:	str	r3, [sp, #44]	; 0x2c
   16418:	str	r3, [sp, #52]	; 0x34
   1641c:	str	r3, [sp, #28]
   16420:	b	163d4 <__assert_fail@plt+0x5228>
   16424:	mov	r3, #0
   16428:	str	r3, [sp, #28]
   1642c:	mov	r3, #1
   16430:	str	r3, [sp, #44]	; 0x2c
   16434:	mov	r7, #0
   16438:	b	160ec <__assert_fail@plt+0x4f40>
   1643c:	ldr	r3, [sp, #152]	; 0x98
   16440:	cmp	r3, #10
   16444:	beq	16488 <__assert_fail@plt+0x52dc>
   16448:	mov	r2, #5
   1644c:	ldr	r1, [pc, #3884]	; 17380 <__assert_fail@plt+0x61d4>
   16450:	mov	r0, #0
   16454:	bl	10f54 <dcgettext@plt>
   16458:	ldr	r2, [pc, #3872]	; 17380 <__assert_fail@plt+0x61d4>
   1645c:	cmp	r0, r2
   16460:	str	r0, [sp, #164]	; 0xa4
   16464:	beq	1746c <__assert_fail@plt+0x62c0>
   16468:	mov	r2, #5
   1646c:	ldr	r1, [pc, #3848]	; 1737c <__assert_fail@plt+0x61d0>
   16470:	mov	r0, #0
   16474:	bl	10f54 <dcgettext@plt>
   16478:	ldr	r2, [pc, #3836]	; 1737c <__assert_fail@plt+0x61d0>
   1647c:	cmp	r0, r2
   16480:	str	r0, [sp, #168]	; 0xa8
   16484:	beq	1745c <__assert_fail@plt+0x62b0>
   16488:	ldr	r7, [sp, #28]
   1648c:	cmp	r7, #0
   16490:	movne	r7, #0
   16494:	bne	164c8 <__assert_fail@plt+0x531c>
   16498:	ldr	r3, [sp, #164]	; 0xa4
   1649c:	ldrb	r3, [r3]
   164a0:	cmp	r3, #0
   164a4:	beq	1747c <__assert_fail@plt+0x62d0>
   164a8:	ldr	r2, [sp, #164]	; 0xa4
   164ac:	ldr	r1, [sp, #32]
   164b0:	cmp	fp, r7
   164b4:	strbhi	r3, [r1, r7]
   164b8:	ldrb	r3, [r2, #1]!
   164bc:	add	r7, r7, #1
   164c0:	cmp	r3, #0
   164c4:	bne	164b0 <__assert_fail@plt+0x5304>
   164c8:	ldr	r0, [sp, #168]	; 0xa8
   164cc:	bl	11044 <strlen@plt>
   164d0:	ldr	r3, [sp, #168]	; 0xa8
   164d4:	str	r3, [sp, #64]	; 0x40
   164d8:	mov	r3, #1
   164dc:	str	r3, [sp, #44]	; 0x2c
   164e0:	str	r0, [sp, #52]	; 0x34
   164e4:	b	160ec <__assert_fail@plt+0x4f40>
   164e8:	mov	r3, #1
   164ec:	str	r3, [sp, #44]	; 0x2c
   164f0:	str	r3, [sp, #52]	; 0x34
   164f4:	str	r3, [sp, #28]
   164f8:	ldr	r3, [pc, #3716]	; 17384 <__assert_fail@plt+0x61d8>
   164fc:	mov	r7, #0
   16500:	str	r3, [sp, #64]	; 0x40
   16504:	mov	r3, #5
   16508:	str	r3, [sp, #152]	; 0x98
   1650c:	b	160ec <__assert_fail@plt+0x4f40>
   16510:	ldr	r3, [sp, #28]
   16514:	cmp	r3, #0
   16518:	beq	17218 <__assert_fail@plt+0x606c>
   1651c:	ldr	r3, [sp, #28]
   16520:	mov	r7, #0
   16524:	str	r3, [sp, #44]	; 0x2c
   16528:	mov	r3, #1
   1652c:	str	r3, [sp, #52]	; 0x34
   16530:	ldr	r3, [pc, #3660]	; 17384 <__assert_fail@plt+0x61d8>
   16534:	str	r3, [sp, #64]	; 0x40
   16538:	b	160ec <__assert_fail@plt+0x4f40>
   1653c:	ldr	r3, [sp, #28]
   16540:	cmp	r3, #0
   16544:	mov	r3, #1
   16548:	streq	r3, [sp, #44]	; 0x2c
   1654c:	bne	163d0 <__assert_fail@plt+0x5224>
   16550:	cmp	fp, #0
   16554:	beq	17248 <__assert_fail@plt+0x609c>
   16558:	ldr	r3, [sp, #32]
   1655c:	mov	r2, #39	; 0x27
   16560:	mov	r7, #1
   16564:	strb	r2, [r3]
   16568:	mov	r3, #0
   1656c:	str	r3, [sp, #28]
   16570:	mov	r3, #1
   16574:	str	r3, [sp, #52]	; 0x34
   16578:	ldr	r3, [pc, #3580]	; 1737c <__assert_fail@plt+0x61d0>
   1657c:	str	r3, [sp, #64]	; 0x40
   16580:	mov	r3, #2
   16584:	str	r3, [sp, #152]	; 0x98
   16588:	b	160ec <__assert_fail@plt+0x4f40>
   1658c:	ldr	r3, [sp, #24]
   16590:	cmn	r3, #1
   16594:	beq	171ac <__assert_fail@plt+0x6000>
   16598:	ldr	r3, [sp, #24]
   1659c:	subs	r3, r3, #1
   165a0:	movne	r3, #1
   165a4:	cmp	r3, #0
   165a8:	bne	165b4 <__assert_fail@plt+0x5408>
   165ac:	cmp	sl, #0
   165b0:	beq	169a0 <__assert_fail@plt+0x57f4>
   165b4:	ldr	r3, [sp, #152]	; 0x98
   165b8:	mov	r5, #0
   165bc:	sub	r2, r3, #2
   165c0:	mov	r8, r5
   165c4:	clz	r2, r2
   165c8:	lsr	r2, r2, #5
   165cc:	ldr	r3, [sp, #60]	; 0x3c
   165d0:	ldr	r1, [sp, #28]
   165d4:	orr	r3, r2, r3
   165d8:	eor	r3, r3, #1
   165dc:	orr	r3, r1, r3
   165e0:	tst	r3, #255	; 0xff
   165e4:	bne	16d10 <__assert_fail@plt+0x5b64>
   165e8:	cmp	r6, #0
   165ec:	bne	1673c <__assert_fail@plt+0x5590>
   165f0:	ldr	r3, [sp, #40]	; 0x28
   165f4:	eor	r8, r8, #1
   165f8:	and	r8, r8, r3
   165fc:	add	sl, sl, #1
   16600:	uxtb	r6, r8
   16604:	cmp	r6, #0
   16608:	beq	1663c <__assert_fail@plt+0x5490>
   1660c:	cmp	fp, r7
   16610:	movhi	r2, #39	; 0x27
   16614:	ldrhi	r3, [sp, #32]
   16618:	strbhi	r2, [r3, r7]
   1661c:	add	r3, r7, #1
   16620:	cmp	fp, r3
   16624:	movhi	r1, #39	; 0x27
   16628:	ldrhi	r2, [sp, #32]
   1662c:	add	r7, r7, #2
   16630:	strbhi	r1, [r2, r3]
   16634:	mov	r3, #0
   16638:	str	r3, [sp, #40]	; 0x28
   1663c:	cmp	r7, fp
   16640:	ldrcc	r3, [sp, #32]
   16644:	strbcc	r4, [r3, r7]
   16648:	ldr	r3, [sp, #36]	; 0x24
   1664c:	cmp	r5, #0
   16650:	moveq	r3, #0
   16654:	str	r3, [sp, #36]	; 0x24
   16658:	ldr	r3, [sp, #24]
   1665c:	add	r7, r7, #1
   16660:	cmn	r3, #1
   16664:	bne	16108 <__assert_fail@plt+0x4f5c>
   16668:	ldr	r3, [sp, #56]	; 0x38
   1666c:	ldrb	r5, [r3, sl]
   16670:	adds	r5, r5, #0
   16674:	movne	r5, #1
   16678:	cmp	r5, #0
   1667c:	bne	1611c <__assert_fail@plt+0x4f70>
   16680:	ldr	r3, [sp, #152]	; 0x98
   16684:	ldr	r1, [sp, #28]
   16688:	sub	r3, r3, #2
   1668c:	clz	r3, r3
   16690:	lsr	r3, r3, #5
   16694:	and	r9, r1, r3
   16698:	cmp	r7, #0
   1669c:	movne	r2, #0
   166a0:	andeq	r2, r9, #1
   166a4:	cmp	r2, #0
   166a8:	bne	17084 <__assert_fail@plt+0x5ed8>
   166ac:	eor	r2, r1, #1
   166b0:	ands	r3, r3, r2
   166b4:	beq	17540 <__assert_fail@plt+0x6394>
   166b8:	ldr	r2, [sp, #68]	; 0x44
   166bc:	cmp	r2, #0
   166c0:	beq	1752c <__assert_fail@plt+0x6380>
   166c4:	ldr	r3, [sp, #36]	; 0x24
   166c8:	cmp	r3, #0
   166cc:	bne	174e4 <__assert_fail@plt+0x6338>
   166d0:	ldr	r2, [sp, #72]	; 0x48
   166d4:	clz	r3, fp
   166d8:	cmp	r2, #0
   166dc:	lsr	r3, r3, #5
   166e0:	moveq	r3, #0
   166e4:	cmp	r3, #0
   166e8:	beq	17484 <__assert_fail@plt+0x62d8>
   166ec:	str	r3, [sp, #68]	; 0x44
   166f0:	ldr	fp, [sp, #72]	; 0x48
   166f4:	b	160a4 <__assert_fail@plt+0x4ef8>
   166f8:	ldr	r3, [sp, #152]	; 0x98
   166fc:	cmp	r3, #2
   16700:	beq	16d54 <__assert_fail@plt+0x5ba8>
   16704:	ldr	r3, [sp, #44]	; 0x2c
   16708:	ldr	r2, [sp, #28]
   1670c:	and	r2, r3, r2
   16710:	ands	r2, r9, r2
   16714:	bne	16d60 <__assert_fail@plt+0x5bb4>
   16718:	mov	r4, #92	; 0x5c
   1671c:	mov	r3, r4
   16720:	ldr	r1, [sp, #44]	; 0x2c
   16724:	cmp	r1, #0
   16728:	moveq	r5, #0
   1672c:	moveq	r8, r1
   16730:	beq	165cc <__assert_fail@plt+0x5420>
   16734:	mov	r4, r3
   16738:	mov	r5, #0
   1673c:	ldr	r3, [sp, #28]
   16740:	cmp	r3, #0
   16744:	bne	16d48 <__assert_fail@plt+0x5b9c>
   16748:	ldr	r3, [sp, #40]	; 0x28
   1674c:	eor	r9, r3, #1
   16750:	and	r9, r9, r2
   16754:	ands	r9, r9, #255	; 0xff
   16758:	beq	1679c <__assert_fail@plt+0x55f0>
   1675c:	cmp	fp, r7
   16760:	movhi	r2, #39	; 0x27
   16764:	ldrhi	r3, [sp, #32]
   16768:	str	r9, [sp, #40]	; 0x28
   1676c:	strbhi	r2, [r3, r7]
   16770:	add	r3, r7, #1
   16774:	cmp	fp, r3
   16778:	movhi	r1, #36	; 0x24
   1677c:	ldrhi	r2, [sp, #32]
   16780:	strbhi	r1, [r2, r3]
   16784:	add	r3, r7, #2
   16788:	cmp	fp, r3
   1678c:	add	r7, r7, #3
   16790:	ldrhi	r2, [sp, #32]
   16794:	movhi	r1, #39	; 0x27
   16798:	strbhi	r1, [r2, r3]
   1679c:	cmp	fp, r7
   167a0:	movhi	r2, #92	; 0x5c
   167a4:	ldrhi	r3, [sp, #32]
   167a8:	add	sl, sl, #1
   167ac:	strbhi	r2, [r3, r7]
   167b0:	add	r7, r7, #1
   167b4:	b	1663c <__assert_fail@plt+0x5490>
   167b8:	ldr	r3, [sp, #152]	; 0x98
   167bc:	mov	r4, #11
   167c0:	sub	r2, r3, #2
   167c4:	mov	r3, #118	; 0x76
   167c8:	clz	r2, r2
   167cc:	lsr	r2, r2, #5
   167d0:	b	16720 <__assert_fail@plt+0x5574>
   167d4:	mov	r4, #10
   167d8:	mov	r3, #110	; 0x6e
   167dc:	ldr	r2, [sp, #152]	; 0x98
   167e0:	ldr	r1, [sp, #28]
   167e4:	sub	r2, r2, #2
   167e8:	clz	r2, r2
   167ec:	lsr	r2, r2, #5
   167f0:	ands	r1, r1, r2
   167f4:	beq	16720 <__assert_fail@plt+0x5574>
   167f8:	ldr	sl, [sp, #32]
   167fc:	mov	r8, fp
   16800:	mov	r2, r1
   16804:	mov	r3, #2
   16808:	str	r3, [sp, #152]	; 0x98
   1680c:	ldr	r9, [sp, #44]	; 0x2c
   16810:	ldr	r3, [sp, #152]	; 0x98
   16814:	and	r9, r9, r2
   16818:	tst	r9, #255	; 0xff
   1681c:	movne	r3, #4
   16820:	str	r3, [sp, #152]	; 0x98
   16824:	ldr	r3, [sp, #156]	; 0x9c
   16828:	mov	ip, #0
   1682c:	bic	r3, r3, #2
   16830:	str	r3, [sp, #4]
   16834:	ldr	r3, [sp, #168]	; 0xa8
   16838:	ldr	r2, [sp, #56]	; 0x38
   1683c:	str	r3, [sp, #16]
   16840:	ldr	r3, [sp, #164]	; 0xa4
   16844:	mov	r1, r8
   16848:	str	r3, [sp, #12]
   1684c:	ldr	r3, [sp, #152]	; 0x98
   16850:	mov	r0, sl
   16854:	str	r3, [sp]
   16858:	str	ip, [sp, #8]
   1685c:	ldr	r3, [sp, #24]
   16860:	bl	16048 <__assert_fail@plt+0x4e9c>
   16864:	mov	fp, r0
   16868:	mov	r0, fp
   1686c:	add	sp, sp, #116	; 0x74
   16870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16874:	ldr	r3, [sp, #152]	; 0x98
   16878:	mov	r4, #8
   1687c:	sub	r2, r3, #2
   16880:	mov	r3, #98	; 0x62
   16884:	clz	r2, r2
   16888:	lsr	r2, r2, #5
   1688c:	b	16720 <__assert_fail@plt+0x5574>
   16890:	ldr	r3, [sp, #152]	; 0x98
   16894:	mov	r4, #7
   16898:	sub	r2, r3, #2
   1689c:	mov	r3, #97	; 0x61
   168a0:	clz	r2, r2
   168a4:	lsr	r2, r2, #5
   168a8:	b	16720 <__assert_fail@plt+0x5574>
   168ac:	ldr	r3, [sp, #44]	; 0x2c
   168b0:	cmp	r3, #0
   168b4:	beq	17098 <__assert_fail@plt+0x5eec>
   168b8:	ldr	r3, [sp, #28]
   168bc:	cmp	r3, #0
   168c0:	bne	17370 <__assert_fail@plt+0x61c4>
   168c4:	ldr	r3, [sp, #152]	; 0x98
   168c8:	sub	r2, r3, #2
   168cc:	ldr	r3, [sp, #40]	; 0x28
   168d0:	clz	r2, r2
   168d4:	eor	r3, r3, #1
   168d8:	lsr	r2, r2, #5
   168dc:	ands	r3, r2, r3
   168e0:	moveq	r1, r7
   168e4:	beq	16928 <__assert_fail@plt+0x577c>
   168e8:	cmp	fp, r7
   168ec:	movhi	r0, #39	; 0x27
   168f0:	ldrhi	r1, [sp, #32]
   168f4:	str	r3, [sp, #40]	; 0x28
   168f8:	strbhi	r0, [r1, r7]
   168fc:	add	r1, r7, #1
   16900:	cmp	fp, r1
   16904:	movhi	ip, #36	; 0x24
   16908:	ldrhi	r0, [sp, #32]
   1690c:	strbhi	ip, [r0, r1]
   16910:	add	r1, r7, #2
   16914:	cmp	fp, r1
   16918:	movhi	ip, #39	; 0x27
   1691c:	ldrhi	r0, [sp, #32]
   16920:	strbhi	ip, [r0, r1]
   16924:	add	r1, r7, #3
   16928:	cmp	fp, r1
   1692c:	movhi	r0, #92	; 0x5c
   16930:	ldrhi	r3, [sp, #32]
   16934:	add	r7, r1, #1
   16938:	strbhi	r0, [r3, r1]
   1693c:	cmp	r8, #0
   16940:	beq	17284 <__assert_fail@plt+0x60d8>
   16944:	ldr	r0, [sp, #24]
   16948:	add	r3, sl, #1
   1694c:	cmp	r3, r0
   16950:	bcs	171c0 <__assert_fail@plt+0x6014>
   16954:	ldr	r0, [sp, #56]	; 0x38
   16958:	ldrb	r3, [r0, r3]
   1695c:	sub	r3, r3, #48	; 0x30
   16960:	cmp	r3, #9
   16964:	bhi	171c0 <__assert_fail@plt+0x6014>
   16968:	cmp	fp, r7
   1696c:	movhi	r3, #48	; 0x30
   16970:	ldrhi	r0, [sp, #32]
   16974:	ldr	r5, [sp, #28]
   16978:	mov	r4, #48	; 0x30
   1697c:	strbhi	r3, [r0, r7]
   16980:	add	r3, r1, #2
   16984:	cmp	fp, r3
   16988:	movhi	r0, #48	; 0x30
   1698c:	ldrhi	ip, [sp, #32]
   16990:	add	r7, r1, #3
   16994:	strbhi	r0, [ip, r3]
   16998:	b	165cc <__assert_fail@plt+0x5420>
   1699c:	mov	r5, #0
   169a0:	ldr	r3, [sp, #152]	; 0x98
   169a4:	sub	r2, r3, #2
   169a8:	ldr	r3, [sp, #28]
   169ac:	clz	r2, r2
   169b0:	lsr	r2, r2, #5
   169b4:	ands	r8, r3, r2
   169b8:	beq	165cc <__assert_fail@plt+0x5420>
   169bc:	mov	r3, r8
   169c0:	mov	r2, r3
   169c4:	mov	r3, #2
   169c8:	ldr	sl, [sp, #32]
   169cc:	mov	r8, fp
   169d0:	str	r3, [sp, #152]	; 0x98
   169d4:	b	1680c <__assert_fail@plt+0x5660>
   169d8:	ldr	r3, [sp, #152]	; 0x98
   169dc:	cmp	r3, #2
   169e0:	beq	17104 <__assert_fail@plt+0x5f58>
   169e4:	cmp	r3, #5
   169e8:	beq	170c4 <__assert_fail@plt+0x5f18>
   169ec:	mov	r5, #0
   169f0:	sub	r2, r3, #2
   169f4:	mov	r8, r5
   169f8:	clz	r2, r2
   169fc:	mov	r4, #63	; 0x3f
   16a00:	lsr	r2, r2, #5
   16a04:	b	165cc <__assert_fail@plt+0x5420>
   16a08:	ldr	r3, [sp, #152]	; 0x98
   16a0c:	cmp	r3, #2
   16a10:	beq	17124 <__assert_fail@plt+0x5f78>
   16a14:	mov	r2, #0
   16a18:	str	r5, [sp, #68]	; 0x44
   16a1c:	mov	r8, r2
   16a20:	mov	r4, #39	; 0x27
   16a24:	b	165cc <__assert_fail@plt+0x5420>
   16a28:	mov	r4, #13
   16a2c:	mov	r3, #114	; 0x72
   16a30:	b	167dc <__assert_fail@plt+0x5630>
   16a34:	ldr	r3, [sp, #152]	; 0x98
   16a38:	mov	r8, #0
   16a3c:	sub	r2, r3, #2
   16a40:	clz	r2, r2
   16a44:	lsr	r2, r2, #5
   16a48:	b	165cc <__assert_fail@plt+0x5420>
   16a4c:	ldr	r3, [sp, #152]	; 0x98
   16a50:	mov	r4, #12
   16a54:	sub	r2, r3, #2
   16a58:	mov	r3, #102	; 0x66
   16a5c:	clz	r2, r2
   16a60:	lsr	r2, r2, #5
   16a64:	b	16720 <__assert_fail@plt+0x5574>
   16a68:	mov	r5, r6
   16a6c:	b	169a0 <__assert_fail@plt+0x57f4>
   16a70:	ldr	r3, [sp, #152]	; 0x98
   16a74:	sub	r2, r3, #2
   16a78:	mov	r3, #116	; 0x74
   16a7c:	clz	r2, r2
   16a80:	lsr	r2, r2, #5
   16a84:	b	16720 <__assert_fail@plt+0x5574>
   16a88:	ldr	r8, [sp, #76]	; 0x4c
   16a8c:	cmp	r8, #1
   16a90:	bne	16f40 <__assert_fail@plt+0x5d94>
   16a94:	bl	1102c <__ctype_b_loc@plt>
   16a98:	sxth	r3, r4
   16a9c:	mov	ip, r8
   16aa0:	lsl	r3, r3, #1
   16aa4:	ldr	r2, [r0]
   16aa8:	ldrh	r3, [r2, r3]
   16aac:	and	r3, r3, #16384	; 0x4000
   16ab0:	cmp	r3, #0
   16ab4:	movne	r5, #1
   16ab8:	moveq	r5, #0
   16abc:	moveq	r3, #1
   16ac0:	movne	r3, #0
   16ac4:	ldr	r2, [sp, #44]	; 0x2c
   16ac8:	and	r3, r3, r2
   16acc:	ands	r8, r3, #255	; 0xff
   16ad0:	bne	16dd4 <__assert_fail@plt+0x5c28>
   16ad4:	ldr	r3, [sp, #152]	; 0x98
   16ad8:	sub	r2, r3, #2
   16adc:	clz	r2, r2
   16ae0:	lsr	r2, r2, #5
   16ae4:	b	165cc <__assert_fail@plt+0x5420>
   16ae8:	ldr	r3, [sp, #56]	; 0x38
   16aec:	add	r3, r3, sl
   16af0:	str	r3, [sp, #48]	; 0x30
   16af4:	ldr	r3, [sp, #48]	; 0x30
   16af8:	mov	r6, #0
   16afc:	ldrb	r4, [r3]
   16b00:	cmp	r4, #126	; 0x7e
   16b04:	ldrls	pc, [pc, r4, lsl #2]
   16b08:	b	16a88 <__assert_fail@plt+0x58dc>
   16b0c:	andeq	r6, r1, ip, lsr #17
   16b10:	andeq	r6, r1, r8, lsl #21
   16b14:	andeq	r6, r1, r8, lsl #21
   16b18:	andeq	r6, r1, r8, lsl #21
   16b1c:	andeq	r6, r1, r8, lsl #21
   16b20:	andeq	r6, r1, r8, lsl #21
   16b24:	andeq	r6, r1, r8, lsl #21
   16b28:	muleq	r1, r0, r8
   16b2c:	andeq	r6, r1, r4, ror r8
   16b30:	andeq	r6, r1, r8, lsl #26
   16b34:	ldrdeq	r6, [r1], -r4
   16b38:			; <UNDEFINED> instruction: 0x000167b8
   16b3c:	andeq	r6, r1, ip, asr #20
   16b40:	andeq	r6, r1, r8, lsr #20
   16b44:	andeq	r6, r1, r8, lsl #21
   16b48:	andeq	r6, r1, r8, lsl #21
   16b4c:	andeq	r6, r1, r8, lsl #21
   16b50:	andeq	r6, r1, r8, lsl #21
   16b54:	andeq	r6, r1, r8, lsl #21
   16b58:	andeq	r6, r1, r8, lsl #21
   16b5c:	andeq	r6, r1, r8, lsl #21
   16b60:	andeq	r6, r1, r8, lsl #21
   16b64:	andeq	r6, r1, r8, lsl #21
   16b68:	andeq	r6, r1, r8, lsl #21
   16b6c:	andeq	r6, r1, r8, lsl #21
   16b70:	andeq	r6, r1, r8, lsl #21
   16b74:	andeq	r6, r1, r8, lsl #21
   16b78:	andeq	r6, r1, r8, lsl #21
   16b7c:	andeq	r6, r1, r8, lsl #21
   16b80:	andeq	r6, r1, r8, lsl #21
   16b84:	andeq	r6, r1, r8, lsl #21
   16b88:	andeq	r6, r1, r8, lsl #21
   16b8c:	andeq	r6, r1, r0, lsr #19
   16b90:	muleq	r1, ip, r9
   16b94:	muleq	r1, ip, r9
   16b98:	andeq	r6, r1, ip, lsr #11
   16b9c:	muleq	r1, ip, r9
   16ba0:	andeq	r6, r1, r4, lsr sl
   16ba4:	muleq	r1, ip, r9
   16ba8:	andeq	r6, r1, r8, lsl #20
   16bac:	muleq	r1, ip, r9
   16bb0:	muleq	r1, ip, r9
   16bb4:	muleq	r1, ip, r9
   16bb8:	andeq	r6, r1, r4, lsr sl
   16bbc:	andeq	r6, r1, r4, lsr sl
   16bc0:	andeq	r6, r1, r4, lsr sl
   16bc4:	andeq	r6, r1, r4, lsr sl
   16bc8:	andeq	r6, r1, r4, lsr sl
   16bcc:	andeq	r6, r1, r4, lsr sl
   16bd0:	andeq	r6, r1, r4, lsr sl
   16bd4:	andeq	r6, r1, r4, lsr sl
   16bd8:	andeq	r6, r1, r4, lsr sl
   16bdc:	andeq	r6, r1, r4, lsr sl
   16be0:	andeq	r6, r1, r4, lsr sl
   16be4:	andeq	r6, r1, r4, lsr sl
   16be8:	andeq	r6, r1, r4, lsr sl
   16bec:	andeq	r6, r1, r4, lsr sl
   16bf0:	andeq	r6, r1, r4, lsr sl
   16bf4:	andeq	r6, r1, r4, lsr sl
   16bf8:	muleq	r1, ip, r9
   16bfc:	muleq	r1, ip, r9
   16c00:	muleq	r1, ip, r9
   16c04:	muleq	r1, ip, r9
   16c08:	ldrdeq	r6, [r1], -r8
   16c0c:	andeq	r6, r1, r8, lsl #21
   16c10:	andeq	r6, r1, r4, lsr sl
   16c14:	andeq	r6, r1, r4, lsr sl
   16c18:	andeq	r6, r1, r4, lsr sl
   16c1c:	andeq	r6, r1, r4, lsr sl
   16c20:	andeq	r6, r1, r4, lsr sl
   16c24:	andeq	r6, r1, r4, lsr sl
   16c28:	andeq	r6, r1, r4, lsr sl
   16c2c:	andeq	r6, r1, r4, lsr sl
   16c30:	andeq	r6, r1, r4, lsr sl
   16c34:	andeq	r6, r1, r4, lsr sl
   16c38:	andeq	r6, r1, r4, lsr sl
   16c3c:	andeq	r6, r1, r4, lsr sl
   16c40:	andeq	r6, r1, r4, lsr sl
   16c44:	andeq	r6, r1, r4, lsr sl
   16c48:	andeq	r6, r1, r4, lsr sl
   16c4c:	andeq	r6, r1, r4, lsr sl
   16c50:	andeq	r6, r1, r4, lsr sl
   16c54:	andeq	r6, r1, r4, lsr sl
   16c58:	andeq	r6, r1, r4, lsr sl
   16c5c:	andeq	r6, r1, r4, lsr sl
   16c60:	andeq	r6, r1, r4, lsr sl
   16c64:	andeq	r6, r1, r4, lsr sl
   16c68:	andeq	r6, r1, r4, lsr sl
   16c6c:	andeq	r6, r1, r4, lsr sl
   16c70:	andeq	r6, r1, r4, lsr sl
   16c74:	andeq	r6, r1, r4, lsr sl
   16c78:	muleq	r1, ip, r9
   16c7c:	strdeq	r6, [r1], -r8
   16c80:	andeq	r6, r1, r4, lsr sl
   16c84:	muleq	r1, ip, r9
   16c88:	andeq	r6, r1, r4, lsr sl
   16c8c:	muleq	r1, ip, r9
   16c90:	andeq	r6, r1, r4, lsr sl
   16c94:	andeq	r6, r1, r4, lsr sl
   16c98:	andeq	r6, r1, r4, lsr sl
   16c9c:	andeq	r6, r1, r4, lsr sl
   16ca0:	andeq	r6, r1, r4, lsr sl
   16ca4:	andeq	r6, r1, r4, lsr sl
   16ca8:	andeq	r6, r1, r4, lsr sl
   16cac:	andeq	r6, r1, r4, lsr sl
   16cb0:	andeq	r6, r1, r4, lsr sl
   16cb4:	andeq	r6, r1, r4, lsr sl
   16cb8:	andeq	r6, r1, r4, lsr sl
   16cbc:	andeq	r6, r1, r4, lsr sl
   16cc0:	andeq	r6, r1, r4, lsr sl
   16cc4:	andeq	r6, r1, r4, lsr sl
   16cc8:	andeq	r6, r1, r4, lsr sl
   16ccc:	andeq	r6, r1, r4, lsr sl
   16cd0:	andeq	r6, r1, r4, lsr sl
   16cd4:	andeq	r6, r1, r4, lsr sl
   16cd8:	andeq	r6, r1, r4, lsr sl
   16cdc:	andeq	r6, r1, r4, lsr sl
   16ce0:	andeq	r6, r1, r4, lsr sl
   16ce4:	andeq	r6, r1, r4, lsr sl
   16ce8:	andeq	r6, r1, r4, lsr sl
   16cec:	andeq	r6, r1, r4, lsr sl
   16cf0:	andeq	r6, r1, r4, lsr sl
   16cf4:	andeq	r6, r1, r4, lsr sl
   16cf8:	andeq	r6, r1, ip, lsl #11
   16cfc:	muleq	r1, ip, r9
   16d00:	andeq	r6, r1, ip, lsl #11
   16d04:	andeq	r6, r1, ip, lsr #11
   16d08:	mov	r3, #116	; 0x74
   16d0c:	b	167dc <__assert_fail@plt+0x5630>
   16d10:	ldr	r3, [sp, #160]	; 0xa0
   16d14:	cmp	r3, #0
   16d18:	beq	165e8 <__assert_fail@plt+0x543c>
   16d1c:	lsr	r3, r4, #5
   16d20:	ldr	r0, [sp, #160]	; 0xa0
   16d24:	uxtb	r3, r3
   16d28:	and	r1, r4, #31
   16d2c:	ldr	r0, [r0, r3, lsl #2]
   16d30:	lsr	r3, r0, r1
   16d34:	tst	r3, #1
   16d38:	beq	165e8 <__assert_fail@plt+0x543c>
   16d3c:	ldr	r3, [sp, #28]
   16d40:	cmp	r3, #0
   16d44:	beq	16748 <__assert_fail@plt+0x559c>
   16d48:	ldr	sl, [sp, #32]
   16d4c:	mov	r8, fp
   16d50:	b	1680c <__assert_fail@plt+0x5660>
   16d54:	ldr	r3, [sp, #28]
   16d58:	cmp	r3, #0
   16d5c:	bne	172b0 <__assert_fail@plt+0x6104>
   16d60:	add	sl, sl, #1
   16d64:	ldr	r6, [sp, #40]	; 0x28
   16d68:	mov	r5, #0
   16d6c:	mov	r4, #92	; 0x5c
   16d70:	b	16604 <__assert_fail@plt+0x5458>
   16d74:	cmp	r9, r8
   16d78:	bne	16fe8 <__assert_fail@plt+0x5e3c>
   16d7c:	ldr	r0, [sp, #100]	; 0x64
   16d80:	bl	10f84 <iswprint@plt>
   16d84:	add	r5, r5, r4
   16d88:	cmp	r0, #0
   16d8c:	add	r0, sp, #104	; 0x68
   16d90:	moveq	r6, #0
   16d94:	bl	10f30 <mbsinit@plt>
   16d98:	cmp	r0, #0
   16d9c:	beq	16f7c <__assert_fail@plt+0x5dd0>
   16da0:	mov	r2, r6
   16da4:	mov	ip, r5
   16da8:	eor	r5, r2, #1
   16dac:	ldr	r4, [sp, #80]	; 0x50
   16db0:	ldr	r6, [sp, #84]	; 0x54
   16db4:	ldr	r7, [sp, #88]	; 0x58
   16db8:	uxtb	r5, r5
   16dbc:	cmp	ip, #1
   16dc0:	bls	172c0 <__assert_fail@plt+0x6114>
   16dc4:	ldr	r3, [sp, #44]	; 0x2c
   16dc8:	and	r8, r3, r5
   16dcc:	mov	r5, r2
   16dd0:	uxtb	r8, r8
   16dd4:	add	r2, sl, ip
   16dd8:	ldr	r0, [sp, #48]	; 0x30
   16ddc:	mov	r1, #0
   16de0:	str	r5, [sp, #48]	; 0x30
   16de4:	ldr	r9, [sp, #28]
   16de8:	ldr	ip, [sp, #40]	; 0x28
   16dec:	ldr	r3, [sp, #32]
   16df0:	ldr	r5, [sp, #152]	; 0x98
   16df4:	b	16eb0 <__assert_fail@plt+0x5d04>
   16df8:	cmp	r9, #0
   16dfc:	bne	171d4 <__assert_fail@plt+0x6028>
   16e00:	eor	r1, ip, #1
   16e04:	cmp	r5, #2
   16e08:	movne	r1, #0
   16e0c:	andeq	r1, r1, #1
   16e10:	cmp	r1, #0
   16e14:	beq	16e4c <__assert_fail@plt+0x5ca0>
   16e18:	cmp	fp, r7
   16e1c:	movhi	ip, #39	; 0x27
   16e20:	strbhi	ip, [r3, r7]
   16e24:	add	ip, r7, #1
   16e28:	cmp	fp, ip
   16e2c:	movhi	lr, #36	; 0x24
   16e30:	strbhi	lr, [r3, ip]
   16e34:	add	ip, r7, #2
   16e38:	cmp	fp, ip
   16e3c:	movhi	lr, #39	; 0x27
   16e40:	strbhi	lr, [r3, ip]
   16e44:	add	r7, r7, #3
   16e48:	mov	ip, r1
   16e4c:	cmp	fp, r7
   16e50:	movhi	r1, #92	; 0x5c
   16e54:	strbhi	r1, [r3, r7]
   16e58:	add	r1, r7, #1
   16e5c:	cmp	fp, r1
   16e60:	lsrhi	lr, r4, #6
   16e64:	addhi	lr, lr, #48	; 0x30
   16e68:	strbhi	lr, [r3, r1]
   16e6c:	add	lr, r7, #2
   16e70:	cmp	fp, lr
   16e74:	lsrhi	r1, r4, #3
   16e78:	andhi	r1, r1, #7
   16e7c:	addhi	r1, r1, #48	; 0x30
   16e80:	add	sl, sl, #1
   16e84:	strbhi	r1, [r3, lr]
   16e88:	and	r4, r4, #7
   16e8c:	cmp	r2, sl
   16e90:	add	r4, r4, #48	; 0x30
   16e94:	add	r7, r7, #3
   16e98:	bls	171f8 <__assert_fail@plt+0x604c>
   16e9c:	mov	r1, r8
   16ea0:	cmp	fp, r7
   16ea4:	strbhi	r4, [r3, r7]
   16ea8:	ldrb	r4, [r0, #1]!
   16eac:	add	r7, r7, #1
   16eb0:	cmp	r8, #0
   16eb4:	bne	16df8 <__assert_fail@plt+0x5c4c>
   16eb8:	cmp	r6, #0
   16ebc:	bne	16f0c <__assert_fail@plt+0x5d60>
   16ec0:	eor	r6, r1, #1
   16ec4:	and	r6, r6, ip
   16ec8:	add	sl, sl, #1
   16ecc:	cmp	r2, sl
   16ed0:	uxtb	r6, r6
   16ed4:	bls	16f34 <__assert_fail@plt+0x5d88>
   16ed8:	cmp	r6, #0
   16edc:	beq	16ea0 <__assert_fail@plt+0x5cf4>
   16ee0:	cmp	fp, r7
   16ee4:	movhi	ip, #39	; 0x27
   16ee8:	strbhi	ip, [r3, r7]
   16eec:	add	ip, r7, #1
   16ef0:	cmp	fp, ip
   16ef4:	movhi	lr, #39	; 0x27
   16ef8:	strbhi	lr, [r3, ip]
   16efc:	add	r7, r7, #2
   16f00:	mov	r6, r8
   16f04:	mov	ip, r8
   16f08:	b	16ea0 <__assert_fail@plt+0x5cf4>
   16f0c:	cmp	fp, r7
   16f10:	eor	r6, r1, #1
   16f14:	movhi	lr, #92	; 0x5c
   16f18:	and	r6, r6, ip
   16f1c:	add	sl, sl, #1
   16f20:	strbhi	lr, [r3, r7]
   16f24:	cmp	r2, sl
   16f28:	add	r7, r7, #1
   16f2c:	uxtb	r6, r6
   16f30:	bhi	16ed8 <__assert_fail@plt+0x5d2c>
   16f34:	str	ip, [sp, #40]	; 0x28
   16f38:	ldr	r5, [sp, #48]	; 0x30
   16f3c:	b	16604 <__assert_fail@plt+0x5458>
   16f40:	ldr	r3, [sp, #24]
   16f44:	cmn	r3, #1
   16f48:	mov	r3, #0
   16f4c:	str	r3, [sp, #104]	; 0x68
   16f50:	str	r3, [sp, #108]	; 0x6c
   16f54:	beq	17274 <__assert_fail@plt+0x60c8>
   16f58:	mov	r2, r5
   16f5c:	mov	r3, #0
   16f60:	str	r7, [sp, #88]	; 0x58
   16f64:	ldr	r7, [sp, #152]	; 0x98
   16f68:	str	r5, [sp, #92]	; 0x5c
   16f6c:	str	r6, [sp, #84]	; 0x54
   16f70:	mov	r5, r3
   16f74:	mov	r6, r2
   16f78:	str	r4, [sp, #80]	; 0x50
   16f7c:	ldr	r3, [sp, #56]	; 0x38
   16f80:	add	r9, sl, r5
   16f84:	add	r8, r3, r9
   16f88:	ldr	r3, [sp, #24]
   16f8c:	mov	r1, r8
   16f90:	sub	r2, r3, r9
   16f94:	add	r0, sp, #100	; 0x64
   16f98:	add	r3, sp, #104	; 0x68
   16f9c:	bl	18f44 <__assert_fail@plt+0x7d98>
   16fa0:	subs	r4, r0, #0
   16fa4:	beq	1734c <__assert_fail@plt+0x61a0>
   16fa8:	cmn	r4, #1
   16fac:	beq	1732c <__assert_fail@plt+0x6180>
   16fb0:	cmn	r4, #2
   16fb4:	beq	172cc <__assert_fail@plt+0x6120>
   16fb8:	ldr	r2, [sp, #28]
   16fbc:	cmp	r7, #2
   16fc0:	movne	r2, #0
   16fc4:	andeq	r2, r2, #1
   16fc8:	cmp	r2, #0
   16fcc:	beq	16d7c <__assert_fail@plt+0x5bd0>
   16fd0:	cmp	r4, #1
   16fd4:	beq	16d7c <__assert_fail@plt+0x5bd0>
   16fd8:	sub	r3, r4, #1
   16fdc:	add	r9, r3, r9
   16fe0:	ldr	r3, [sp, #56]	; 0x38
   16fe4:	add	r9, r3, r9
   16fe8:	ldrb	r3, [r8, #1]!
   16fec:	sub	r3, r3, #91	; 0x5b
   16ff0:	cmp	r3, #33	; 0x21
   16ff4:	ldrls	pc, [pc, r3, lsl #2]
   16ff8:	b	16d74 <__assert_fail@plt+0x5bc8>
   16ffc:	andeq	r7, r1, r4, lsl #1
   17000:	andeq	r7, r1, r4, lsl #1
   17004:	andeq	r6, r1, r4, ror sp
   17008:	andeq	r7, r1, r4, lsl #1
   1700c:	andeq	r6, r1, r4, ror sp
   17010:	andeq	r7, r1, r4, lsl #1
   17014:	andeq	r6, r1, r4, ror sp
   17018:	andeq	r6, r1, r4, ror sp
   1701c:	andeq	r6, r1, r4, ror sp
   17020:	andeq	r6, r1, r4, ror sp
   17024:	andeq	r6, r1, r4, ror sp
   17028:	andeq	r6, r1, r4, ror sp
   1702c:	andeq	r6, r1, r4, ror sp
   17030:	andeq	r6, r1, r4, ror sp
   17034:	andeq	r6, r1, r4, ror sp
   17038:	andeq	r6, r1, r4, ror sp
   1703c:	andeq	r6, r1, r4, ror sp
   17040:	andeq	r6, r1, r4, ror sp
   17044:	andeq	r6, r1, r4, ror sp
   17048:	andeq	r6, r1, r4, ror sp
   1704c:	andeq	r6, r1, r4, ror sp
   17050:	andeq	r6, r1, r4, ror sp
   17054:	andeq	r6, r1, r4, ror sp
   17058:	andeq	r6, r1, r4, ror sp
   1705c:	andeq	r6, r1, r4, ror sp
   17060:	andeq	r6, r1, r4, ror sp
   17064:	andeq	r6, r1, r4, ror sp
   17068:	andeq	r6, r1, r4, ror sp
   1706c:	andeq	r6, r1, r4, ror sp
   17070:	andeq	r6, r1, r4, ror sp
   17074:	andeq	r6, r1, r4, ror sp
   17078:	andeq	r6, r1, r4, ror sp
   1707c:	andeq	r6, r1, r4, ror sp
   17080:	andeq	r7, r1, r4, lsl #1
   17084:	mov	r3, #2
   17088:	ldr	sl, [sp, #32]
   1708c:	mov	r8, fp
   17090:	str	r3, [sp, #152]	; 0x98
   17094:	b	1680c <__assert_fail@plt+0x5660>
   17098:	ldr	r3, [sp, #156]	; 0x9c
   1709c:	tst	r3, #1
   170a0:	bne	171cc <__assert_fail@plt+0x6020>
   170a4:	ldr	r3, [sp, #152]	; 0x98
   170a8:	ldr	r4, [sp, #44]	; 0x2c
   170ac:	sub	r2, r3, #2
   170b0:	mov	r5, #0
   170b4:	clz	r2, r2
   170b8:	mov	r8, r4
   170bc:	lsr	r2, r2, #5
   170c0:	b	165cc <__assert_fail@plt+0x5420>
   170c4:	ldr	r3, [sp, #156]	; 0x9c
   170c8:	ands	r9, r3, #4
   170cc:	beq	17204 <__assert_fail@plt+0x6058>
   170d0:	ldr	r2, [sp, #24]
   170d4:	add	r3, sl, #2
   170d8:	cmp	r3, r2
   170dc:	bcs	170f0 <__assert_fail@plt+0x5f44>
   170e0:	ldr	r2, [sp, #48]	; 0x30
   170e4:	ldrb	r4, [r2, #1]
   170e8:	cmp	r4, #63	; 0x3f
   170ec:	beq	1738c <__assert_fail@plt+0x61e0>
   170f0:	mov	r2, #0
   170f4:	mov	r8, r2
   170f8:	mov	r5, r2
   170fc:	mov	r4, #63	; 0x3f
   17100:	b	165cc <__assert_fail@plt+0x5420>
   17104:	ldr	r3, [sp, #28]
   17108:	cmp	r3, #0
   1710c:	bne	17430 <__assert_fail@plt+0x6284>
   17110:	mov	r2, r5
   17114:	mov	r8, r3
   17118:	mov	r5, #0
   1711c:	mov	r4, #63	; 0x3f
   17120:	b	165cc <__assert_fail@plt+0x5420>
   17124:	ldr	r3, [sp, #28]
   17128:	cmp	r3, #0
   1712c:	bne	17430 <__assert_fail@plt+0x6284>
   17130:	ldr	r2, [sp, #72]	; 0x48
   17134:	adds	r3, fp, #0
   17138:	movne	r3, #1
   1713c:	cmp	r2, #0
   17140:	movne	r3, #0
   17144:	cmp	r3, #0
   17148:	strne	fp, [sp, #72]	; 0x48
   1714c:	movne	fp, #0
   17150:	bne	1718c <__assert_fail@plt+0x5fe0>
   17154:	cmp	fp, r7
   17158:	movhi	r2, #39	; 0x27
   1715c:	ldrhi	r3, [sp, #32]
   17160:	strbhi	r2, [r3, r7]
   17164:	add	r3, r7, #1
   17168:	cmp	fp, r3
   1716c:	movhi	r1, #92	; 0x5c
   17170:	ldrhi	r2, [sp, #32]
   17174:	strbhi	r1, [r2, r3]
   17178:	add	r3, r7, #2
   1717c:	cmp	fp, r3
   17180:	movhi	r1, #39	; 0x27
   17184:	ldrhi	r2, [sp, #32]
   17188:	strbhi	r1, [r2, r3]
   1718c:	ldr	r3, [sp, #28]
   17190:	add	r7, r7, #3
   17194:	mov	r2, r5
   17198:	mov	r8, r3
   1719c:	str	r5, [sp, #68]	; 0x44
   171a0:	str	r3, [sp, #40]	; 0x28
   171a4:	mov	r4, #39	; 0x27
   171a8:	b	165cc <__assert_fail@plt+0x5420>
   171ac:	ldr	r3, [sp, #56]	; 0x38
   171b0:	ldrb	r3, [r3, #1]
   171b4:	adds	r3, r3, #0
   171b8:	movne	r3, #1
   171bc:	b	165a4 <__assert_fail@plt+0x53f8>
   171c0:	ldr	r5, [sp, #28]
   171c4:	mov	r4, #48	; 0x30
   171c8:	b	165cc <__assert_fail@plt+0x5420>
   171cc:	add	sl, sl, #1
   171d0:	b	160fc <__assert_fail@plt+0x4f50>
   171d4:	mov	sl, r3
   171d8:	ldr	r3, [sp, #28]
   171dc:	mov	r8, fp
   171e0:	str	r3, [sp, #44]	; 0x2c
   171e4:	ldr	r3, [sp, #152]	; 0x98
   171e8:	sub	r2, r3, #2
   171ec:	clz	r2, r2
   171f0:	lsr	r2, r2, #5
   171f4:	b	1680c <__assert_fail@plt+0x5660>
   171f8:	str	ip, [sp, #40]	; 0x28
   171fc:	ldr	r5, [sp, #48]	; 0x30
   17200:	b	1663c <__assert_fail@plt+0x5490>
   17204:	mov	r2, r9
   17208:	mov	r8, r9
   1720c:	mov	r5, #0
   17210:	mov	r4, #63	; 0x3f
   17214:	b	165cc <__assert_fail@plt+0x5420>
   17218:	cmp	fp, #0
   1721c:	beq	17294 <__assert_fail@plt+0x60e8>
   17220:	ldr	r1, [sp, #32]
   17224:	mov	r3, #34	; 0x22
   17228:	mov	r2, #1
   1722c:	strb	r3, [r1]
   17230:	ldr	r3, [pc, #332]	; 17384 <__assert_fail@plt+0x61d8>
   17234:	str	r2, [sp, #52]	; 0x34
   17238:	mov	r7, r2
   1723c:	str	r2, [sp, #44]	; 0x2c
   17240:	str	r3, [sp, #64]	; 0x40
   17244:	b	160ec <__assert_fail@plt+0x4f40>
   17248:	ldr	r3, [pc, #300]	; 1737c <__assert_fail@plt+0x61d0>
   1724c:	str	r3, [sp, #64]	; 0x40
   17250:	mov	r3, #0
   17254:	str	r3, [sp, #28]
   17258:	mov	r3, #1
   1725c:	str	r3, [sp, #52]	; 0x34
   17260:	mov	r7, r3
   17264:	mov	r3, #2
   17268:	str	r3, [sp, #152]	; 0x98
   1726c:	b	160ec <__assert_fail@plt+0x4f40>
   17270:	bl	1117c <abort@plt>
   17274:	ldr	r0, [sp, #56]	; 0x38
   17278:	bl	11044 <strlen@plt>
   1727c:	str	r0, [sp, #24]
   17280:	b	16f58 <__assert_fail@plt+0x5dac>
   17284:	mov	r5, r8
   17288:	mov	r4, #48	; 0x30
   1728c:	ldr	r8, [sp, #44]	; 0x2c
   17290:	b	165cc <__assert_fail@plt+0x5420>
   17294:	mov	r3, #1
   17298:	str	r3, [sp, #52]	; 0x34
   1729c:	mov	r7, r3
   172a0:	str	r3, [sp, #44]	; 0x2c
   172a4:	ldr	r3, [pc, #216]	; 17384 <__assert_fail@plt+0x61d8>
   172a8:	str	r3, [sp, #64]	; 0x40
   172ac:	b	160ec <__assert_fail@plt+0x4f40>
   172b0:	ldr	sl, [sp, #32]
   172b4:	mov	r8, fp
   172b8:	mov	r2, r3
   172bc:	b	1680c <__assert_fail@plt+0x5660>
   172c0:	mov	r3, r5
   172c4:	mov	r5, r2
   172c8:	b	16ac4 <__assert_fail@plt+0x5918>
   172cc:	ldr	r1, [sp, #24]
   172d0:	mov	r2, r5
   172d4:	cmp	r1, r9
   172d8:	mov	ip, r5
   172dc:	ldr	r4, [sp, #80]	; 0x50
   172e0:	ldr	r5, [sp, #92]	; 0x5c
   172e4:	ldr	r6, [sp, #84]	; 0x54
   172e8:	ldr	r7, [sp, #88]	; 0x58
   172ec:	bls	17320 <__assert_fail@plt+0x6174>
   172f0:	ldrb	r3, [r8]
   172f4:	cmp	r3, #0
   172f8:	bne	1730c <__assert_fail@plt+0x6160>
   172fc:	b	17324 <__assert_fail@plt+0x6178>
   17300:	ldrb	r3, [r8, #1]!
   17304:	cmp	r3, #0
   17308:	beq	17424 <__assert_fail@plt+0x6278>
   1730c:	add	r2, r2, #1
   17310:	add	r3, sl, r2
   17314:	cmp	r1, r3
   17318:	bhi	17300 <__assert_fail@plt+0x6154>
   1731c:	mov	ip, r2
   17320:	mov	r3, #0
   17324:	mov	r2, r3
   17328:	b	16dbc <__assert_fail@plt+0x5c10>
   1732c:	mov	r3, #0
   17330:	mov	ip, r5
   17334:	ldr	r4, [sp, #80]	; 0x50
   17338:	ldr	r5, [sp, #92]	; 0x5c
   1733c:	ldr	r6, [sp, #84]	; 0x54
   17340:	ldr	r7, [sp, #88]	; 0x58
   17344:	mov	r2, r3
   17348:	b	16dbc <__assert_fail@plt+0x5c10>
   1734c:	mov	r3, r6
   17350:	mov	ip, r5
   17354:	eor	r5, r3, #1
   17358:	mov	r2, r6
   1735c:	ldr	r4, [sp, #80]	; 0x50
   17360:	ldr	r6, [sp, #84]	; 0x54
   17364:	ldr	r7, [sp, #88]	; 0x58
   17368:	uxtb	r5, r5
   1736c:	b	16dbc <__assert_fail@plt+0x5c10>
   17370:	ldr	sl, [sp, #32]
   17374:	mov	r8, fp
   17378:	b	171e0 <__assert_fail@plt+0x6034>
   1737c:	andeq	sl, r1, ip, asr #6
   17380:	andeq	sl, r1, r0, asr r3
   17384:	andeq	sl, r1, r8, asr #6
   17388:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1738c:	ldr	r2, [sp, #56]	; 0x38
   17390:	ldrb	r1, [r2, r3]
   17394:	sub	r2, r1, #33	; 0x21
   17398:	uxtb	r2, r2
   1739c:	cmp	r2, #29
   173a0:	bhi	17440 <__assert_fail@plt+0x6294>
   173a4:	ldr	r0, [pc, #-36]	; 17388 <__assert_fail@plt+0x61dc>
   173a8:	mov	ip, #1
   173ac:	ands	r2, r0, ip, lsl r2
   173b0:	beq	17450 <__assert_fail@plt+0x62a4>
   173b4:	ldr	r2, [sp, #28]
   173b8:	cmp	r2, #0
   173bc:	bne	17550 <__assert_fail@plt+0x63a4>
   173c0:	cmp	fp, r7
   173c4:	ldr	r8, [sp, #28]
   173c8:	ldrhi	r2, [sp, #32]
   173cc:	mov	sl, r3
   173d0:	mov	r5, r8
   173d4:	strbhi	r4, [r2, r7]
   173d8:	add	r2, r7, #1
   173dc:	cmp	fp, r2
   173e0:	movhi	r0, #34	; 0x22
   173e4:	ldrhi	ip, [sp, #32]
   173e8:	mov	r4, r1
   173ec:	strbhi	r0, [ip, r2]
   173f0:	add	r2, r7, #2
   173f4:	cmp	fp, r2
   173f8:	movhi	r0, #34	; 0x22
   173fc:	ldrhi	ip, [sp, #32]
   17400:	strbhi	r0, [ip, r2]
   17404:	add	r2, r7, #3
   17408:	cmp	fp, r2
   1740c:	movhi	r0, #63	; 0x3f
   17410:	ldrhi	ip, [sp, #32]
   17414:	add	r7, r7, #4
   17418:	strbhi	r0, [ip, r2]
   1741c:	mov	r2, r8
   17420:	b	165cc <__assert_fail@plt+0x5420>
   17424:	mov	ip, r2
   17428:	mov	r2, r3
   1742c:	b	16dbc <__assert_fail@plt+0x5c10>
   17430:	ldr	sl, [sp, #32]
   17434:	mov	r8, fp
   17438:	ldr	r2, [sp, #28]
   1743c:	b	1680c <__assert_fail@plt+0x5660>
   17440:	mov	r2, #0
   17444:	mov	r8, r2
   17448:	mov	r5, r2
   1744c:	b	165cc <__assert_fail@plt+0x5420>
   17450:	mov	r8, r2
   17454:	mov	r5, #0
   17458:	b	165cc <__assert_fail@plt+0x5420>
   1745c:	ldr	r1, [sp, #152]	; 0x98
   17460:	bl	15f28 <__assert_fail@plt+0x4d7c>
   17464:	str	r0, [sp, #168]	; 0xa8
   17468:	b	16488 <__assert_fail@plt+0x52dc>
   1746c:	ldr	r1, [sp, #152]	; 0x98
   17470:	bl	15f28 <__assert_fail@plt+0x4d7c>
   17474:	str	r0, [sp, #164]	; 0xa4
   17478:	b	16468 <__assert_fail@plt+0x52bc>
   1747c:	ldr	r7, [sp, #28]
   17480:	b	164c8 <__assert_fail@plt+0x531c>
   17484:	ldr	sl, [sp, #32]
   17488:	ldr	r2, [sp, #68]	; 0x44
   1748c:	mov	r8, fp
   17490:	mov	fp, r7
   17494:	ldr	r3, [sp, #64]	; 0x40
   17498:	cmp	r3, #0
   1749c:	moveq	r2, #0
   174a0:	andne	r2, r2, #1
   174a4:	cmp	r2, #0
   174a8:	beq	174d4 <__assert_fail@plt+0x6328>
   174ac:	mov	r2, r3
   174b0:	ldrb	r3, [r3]
   174b4:	cmp	r3, #0
   174b8:	beq	174d4 <__assert_fail@plt+0x6328>
   174bc:	cmp	r8, fp
   174c0:	strbhi	r3, [sl, fp]
   174c4:	ldrb	r3, [r2, #1]!
   174c8:	add	fp, fp, #1
   174cc:	cmp	r3, #0
   174d0:	bne	174bc <__assert_fail@plt+0x6310>
   174d4:	cmp	r8, fp
   174d8:	movhi	r3, #0
   174dc:	strbhi	r3, [sl, fp]
   174e0:	b	16868 <__assert_fail@plt+0x56bc>
   174e4:	ldr	r3, [sp, #168]	; 0xa8
   174e8:	ldr	sl, [sp, #32]
   174ec:	str	r3, [sp, #16]
   174f0:	ldr	r3, [sp, #164]	; 0xa4
   174f4:	mov	ip, #5
   174f8:	str	r3, [sp, #12]
   174fc:	ldr	r3, [sp, #160]	; 0xa0
   17500:	ldr	r2, [sp, #56]	; 0x38
   17504:	str	r3, [sp, #8]
   17508:	ldr	r3, [sp, #156]	; 0x9c
   1750c:	ldr	r1, [sp, #72]	; 0x48
   17510:	str	r3, [sp, #4]
   17514:	mov	r0, sl
   17518:	ldr	r3, [sp, #24]
   1751c:	str	ip, [sp]
   17520:	bl	16048 <__assert_fail@plt+0x4e9c>
   17524:	mov	fp, r0
   17528:	b	16868 <__assert_fail@plt+0x56bc>
   1752c:	mov	r8, fp
   17530:	ldr	sl, [sp, #32]
   17534:	mov	fp, r7
   17538:	mov	r2, r3
   1753c:	b	17494 <__assert_fail@plt+0x62e8>
   17540:	mov	r8, fp
   17544:	ldr	sl, [sp, #32]
   17548:	mov	fp, r7
   1754c:	b	17494 <__assert_fail@plt+0x62e8>
   17550:	ldr	sl, [sp, #32]
   17554:	mov	r8, fp
   17558:	b	16824 <__assert_fail@plt+0x5678>
   1755c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17560:	sub	sp, sp, #52	; 0x34
   17564:	mov	r4, r0
   17568:	mov	r5, r3
   1756c:	mov	sl, r1
   17570:	mov	fp, r2
   17574:	bl	11068 <__errno_location@plt>
   17578:	ldr	r7, [pc, #412]	; 1771c <__assert_fail@plt+0x6570>
   1757c:	cmn	r4, #-2147483647	; 0x80000001
   17580:	ldr	r6, [r7]
   17584:	mov	r8, r0
   17588:	movne	r0, #0
   1758c:	moveq	r0, #1
   17590:	ldr	r3, [r8]
   17594:	orrs	r0, r0, r4, lsr #31
   17598:	str	r3, [sp, #24]
   1759c:	bne	17718 <__assert_fail@plt+0x656c>
   175a0:	ldr	r2, [r7, #4]
   175a4:	cmp	r4, r2
   175a8:	blt	17608 <__assert_fail@plt+0x645c>
   175ac:	add	r9, r7, #8
   175b0:	cmp	r6, r9
   175b4:	str	r2, [sp, #44]	; 0x2c
   175b8:	beq	176e8 <__assert_fail@plt+0x653c>
   175bc:	mov	r3, #8
   175c0:	sub	r2, r4, r2
   175c4:	mov	r0, r6
   175c8:	str	r3, [sp]
   175cc:	add	r2, r2, #1
   175d0:	mvn	r3, #-2147483648	; 0x80000000
   175d4:	add	r1, sp, #44	; 0x2c
   175d8:	bl	18454 <__assert_fail@plt+0x72a8>
   175dc:	mov	r6, r0
   175e0:	str	r0, [r7]
   175e4:	ldr	r0, [r7, #4]
   175e8:	ldr	r2, [sp, #44]	; 0x2c
   175ec:	mov	r1, #0
   175f0:	sub	r2, r2, r0
   175f4:	add	r0, r6, r0, lsl #3
   175f8:	lsl	r2, r2, #3
   175fc:	bl	1108c <memset@plt>
   17600:	ldr	r3, [sp, #44]	; 0x2c
   17604:	str	r3, [r7, #4]
   17608:	add	r3, r6, r4, lsl #3
   1760c:	ldr	r1, [r5, #4]
   17610:	ldr	r7, [r3, #4]
   17614:	ldr	r9, [r6, r4, lsl #3]
   17618:	ldr	r2, [r5, #40]	; 0x28
   1761c:	ldr	ip, [r5, #44]	; 0x2c
   17620:	add	r0, r5, #8
   17624:	str	r3, [sp, #28]
   17628:	ldr	r3, [r5]
   1762c:	orr	r1, r1, #1
   17630:	mov	lr, r0
   17634:	str	r1, [sp, #32]
   17638:	str	r0, [sp, #36]	; 0x24
   1763c:	str	r1, [sp, #4]
   17640:	str	r2, [sp, #12]
   17644:	str	r3, [sp]
   17648:	mov	r0, r7
   1764c:	mov	r1, r9
   17650:	str	ip, [sp, #16]
   17654:	str	lr, [sp, #8]
   17658:	mov	r3, fp
   1765c:	mov	r2, sl
   17660:	bl	16048 <__assert_fail@plt+0x4e9c>
   17664:	cmp	r9, r0
   17668:	bhi	176d4 <__assert_fail@plt+0x6528>
   1766c:	ldr	r3, [pc, #172]	; 17720 <__assert_fail@plt+0x6574>
   17670:	add	r9, r0, #1
   17674:	cmp	r7, r3
   17678:	str	r9, [r6, r4, lsl #3]
   1767c:	beq	17688 <__assert_fail@plt+0x64dc>
   17680:	mov	r0, r7
   17684:	bl	18e18 <__assert_fail@plt+0x7c6c>
   17688:	mov	r0, r9
   1768c:	bl	182f0 <__assert_fail@plt+0x7144>
   17690:	ldr	lr, [sp, #28]
   17694:	ldr	ip, [r5, #44]	; 0x2c
   17698:	ldr	r4, [r5, #40]	; 0x28
   1769c:	mov	r3, fp
   176a0:	mov	r2, sl
   176a4:	mov	r1, r9
   176a8:	str	r0, [lr, #4]
   176ac:	ldr	lr, [r5]
   176b0:	ldr	r5, [sp, #36]	; 0x24
   176b4:	str	ip, [sp, #16]
   176b8:	str	r5, [sp, #8]
   176bc:	ldr	r5, [sp, #32]
   176c0:	str	r4, [sp, #12]
   176c4:	str	r5, [sp, #4]
   176c8:	str	lr, [sp]
   176cc:	mov	r7, r0
   176d0:	bl	16048 <__assert_fail@plt+0x4e9c>
   176d4:	ldr	r3, [sp, #24]
   176d8:	mov	r0, r7
   176dc:	str	r3, [r8]
   176e0:	add	sp, sp, #52	; 0x34
   176e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e8:	mov	r3, #8
   176ec:	sub	r2, r4, r2
   176f0:	str	r3, [sp]
   176f4:	add	r1, sp, #44	; 0x2c
   176f8:	add	r2, r2, #1
   176fc:	mvn	r3, #-2147483648	; 0x80000000
   17700:	bl	18454 <__assert_fail@plt+0x72a8>
   17704:	mov	r6, r0
   17708:	ldm	r9, {r0, r1}
   1770c:	str	r6, [r7]
   17710:	stm	r6, {r0, r1}
   17714:	b	175e4 <__assert_fail@plt+0x6438>
   17718:	bl	1117c <abort@plt>
   1771c:	andeq	fp, r2, r4, lsr #2
   17720:			; <UNDEFINED> instruction: 0x0002b1b4
   17724:	push	{r4, r5, r6, lr}
   17728:	mov	r5, r0
   1772c:	bl	11068 <__errno_location@plt>
   17730:	cmp	r5, #0
   17734:	mov	r1, #48	; 0x30
   17738:	mov	r4, r0
   1773c:	ldr	r0, [pc, #16]	; 17754 <__assert_fail@plt+0x65a8>
   17740:	ldr	r6, [r4]
   17744:	movne	r0, r5
   17748:	bl	18750 <__assert_fail@plt+0x75a4>
   1774c:	str	r6, [r4]
   17750:	pop	{r4, r5, r6, pc}
   17754:			; <UNDEFINED> instruction: 0x0002b2b4
   17758:	ldr	r3, [pc, #12]	; 1776c <__assert_fail@plt+0x65c0>
   1775c:	cmp	r0, #0
   17760:	moveq	r0, r3
   17764:	ldr	r0, [r0]
   17768:	bx	lr
   1776c:			; <UNDEFINED> instruction: 0x0002b2b4
   17770:	ldr	r3, [pc, #12]	; 17784 <__assert_fail@plt+0x65d8>
   17774:	cmp	r0, #0
   17778:	moveq	r0, r3
   1777c:	str	r1, [r0]
   17780:	bx	lr
   17784:			; <UNDEFINED> instruction: 0x0002b2b4
   17788:	ldr	r3, [pc, #52]	; 177c4 <__assert_fail@plt+0x6618>
   1778c:	cmp	r0, #0
   17790:	moveq	r0, r3
   17794:	add	r3, r0, #8
   17798:	push	{lr}		; (str lr, [sp, #-4]!)
   1779c:	lsr	lr, r1, #5
   177a0:	and	r1, r1, #31
   177a4:	ldr	ip, [r3, lr, lsl #2]
   177a8:	lsr	r0, ip, r1
   177ac:	eor	r2, r2, r0
   177b0:	and	r2, r2, #1
   177b4:	and	r0, r0, #1
   177b8:	eor	r1, ip, r2, lsl r1
   177bc:	str	r1, [r3, lr, lsl #2]
   177c0:	pop	{pc}		; (ldr pc, [sp], #4)
   177c4:			; <UNDEFINED> instruction: 0x0002b2b4
   177c8:	ldr	r3, [pc, #16]	; 177e0 <__assert_fail@plt+0x6634>
   177cc:	cmp	r0, #0
   177d0:	movne	r3, r0
   177d4:	ldr	r0, [r3, #4]
   177d8:	str	r1, [r3, #4]
   177dc:	bx	lr
   177e0:			; <UNDEFINED> instruction: 0x0002b2b4
   177e4:	ldr	r3, [pc, #44]	; 17818 <__assert_fail@plt+0x666c>
   177e8:	cmp	r0, #0
   177ec:	moveq	r0, r3
   177f0:	mov	ip, #10
   177f4:	cmp	r2, #0
   177f8:	cmpne	r1, #0
   177fc:	str	ip, [r0]
   17800:	beq	17810 <__assert_fail@plt+0x6664>
   17804:	str	r1, [r0, #40]	; 0x28
   17808:	str	r2, [r0, #44]	; 0x2c
   1780c:	bx	lr
   17810:	push	{r4, lr}
   17814:	bl	1117c <abort@plt>
   17818:			; <UNDEFINED> instruction: 0x0002b2b4
   1781c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17820:	sub	sp, sp, #24
   17824:	ldr	ip, [pc, #108]	; 17898 <__assert_fail@plt+0x66ec>
   17828:	ldr	r4, [sp, #56]	; 0x38
   1782c:	mov	r9, r2
   17830:	cmp	r4, #0
   17834:	moveq	r4, ip
   17838:	mov	sl, r3
   1783c:	mov	r7, r0
   17840:	mov	r8, r1
   17844:	bl	11068 <__errno_location@plt>
   17848:	ldr	r3, [r4, #44]	; 0x2c
   1784c:	mov	r1, r8
   17850:	ldr	r6, [r0]
   17854:	str	r3, [sp, #16]
   17858:	ldr	r2, [r4, #40]	; 0x28
   1785c:	add	r3, r4, #8
   17860:	str	r3, [sp, #8]
   17864:	str	r2, [sp, #12]
   17868:	ldr	r2, [r4, #4]
   1786c:	mov	r5, r0
   17870:	str	r2, [sp, #4]
   17874:	ldr	ip, [r4]
   17878:	mov	r3, sl
   1787c:	mov	r2, r9
   17880:	mov	r0, r7
   17884:	str	ip, [sp]
   17888:	bl	16048 <__assert_fail@plt+0x4e9c>
   1788c:	str	r6, [r5]
   17890:	add	sp, sp, #24
   17894:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17898:			; <UNDEFINED> instruction: 0x0002b2b4
   1789c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178a0:	cmp	r3, #0
   178a4:	sub	sp, sp, #44	; 0x2c
   178a8:	ldr	r4, [pc, #192]	; 17970 <__assert_fail@plt+0x67c4>
   178ac:	mov	r6, r2
   178b0:	movne	r4, r3
   178b4:	mov	r9, r1
   178b8:	mov	r8, r0
   178bc:	bl	11068 <__errno_location@plt>
   178c0:	ldr	r3, [r4, #44]	; 0x2c
   178c4:	ldr	r5, [r4, #4]
   178c8:	add	sl, r4, #8
   178cc:	cmp	r6, #0
   178d0:	orreq	r5, r5, #1
   178d4:	mov	r1, #0
   178d8:	ldr	r2, [r0]
   178dc:	str	r3, [sp, #16]
   178e0:	ldr	r3, [r4, #40]	; 0x28
   178e4:	stmib	sp, {r5, sl}
   178e8:	str	r3, [sp, #12]
   178ec:	ldr	r3, [r4]
   178f0:	mov	r7, r0
   178f4:	str	r2, [sp, #28]
   178f8:	str	r3, [sp]
   178fc:	mov	r2, r8
   17900:	mov	r3, r9
   17904:	mov	r0, r1
   17908:	bl	16048 <__assert_fail@plt+0x4e9c>
   1790c:	add	r1, r0, #1
   17910:	mov	fp, r0
   17914:	mov	r0, r1
   17918:	str	r1, [sp, #36]	; 0x24
   1791c:	bl	182f0 <__assert_fail@plt+0x7144>
   17920:	ldr	r3, [r4, #44]	; 0x2c
   17924:	mov	r2, r8
   17928:	str	r3, [sp, #16]
   1792c:	ldr	r3, [r4, #40]	; 0x28
   17930:	str	r5, [sp, #4]
   17934:	str	r3, [sp, #12]
   17938:	str	sl, [sp, #8]
   1793c:	ldr	ip, [r4]
   17940:	ldr	r1, [sp, #36]	; 0x24
   17944:	mov	r3, r9
   17948:	str	ip, [sp]
   1794c:	str	r0, [sp, #32]
   17950:	bl	16048 <__assert_fail@plt+0x4e9c>
   17954:	ldr	r2, [sp, #28]
   17958:	cmp	r6, #0
   1795c:	str	r2, [r7]
   17960:	ldr	r0, [sp, #32]
   17964:	strne	fp, [r6]
   17968:	add	sp, sp, #44	; 0x2c
   1796c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17970:			; <UNDEFINED> instruction: 0x0002b2b4
   17974:	mov	r3, r2
   17978:	mov	r2, #0
   1797c:	b	1789c <__assert_fail@plt+0x66f0>
   17980:	push	{r4, r5, r6, r7, r8, lr}
   17984:	ldr	r6, [pc, #116]	; 17a00 <__assert_fail@plt+0x6854>
   17988:	ldr	r3, [r6, #4]
   1798c:	ldr	r7, [r6]
   17990:	cmp	r3, #1
   17994:	movgt	r5, r7
   17998:	movgt	r4, #1
   1799c:	ble	179bc <__assert_fail@plt+0x6810>
   179a0:	ldr	r0, [r5, #12]
   179a4:	bl	18e18 <__assert_fail@plt+0x7c6c>
   179a8:	ldr	r3, [r6, #4]
   179ac:	add	r4, r4, #1
   179b0:	cmp	r3, r4
   179b4:	add	r5, r5, #8
   179b8:	bgt	179a0 <__assert_fail@plt+0x67f4>
   179bc:	ldr	r0, [r7, #4]
   179c0:	ldr	r4, [pc, #60]	; 17a04 <__assert_fail@plt+0x6858>
   179c4:	cmp	r0, r4
   179c8:	beq	179dc <__assert_fail@plt+0x6830>
   179cc:	bl	18e18 <__assert_fail@plt+0x7c6c>
   179d0:	mov	r3, #256	; 0x100
   179d4:	str	r4, [r6, #12]
   179d8:	str	r3, [r6, #8]
   179dc:	ldr	r4, [pc, #36]	; 17a08 <__assert_fail@plt+0x685c>
   179e0:	cmp	r7, r4
   179e4:	beq	179f4 <__assert_fail@plt+0x6848>
   179e8:	mov	r0, r7
   179ec:	bl	18e18 <__assert_fail@plt+0x7c6c>
   179f0:	str	r4, [r6]
   179f4:	mov	r3, #1
   179f8:	str	r3, [r6, #4]
   179fc:	pop	{r4, r5, r6, r7, r8, pc}
   17a00:	andeq	fp, r2, r4, lsr #2
   17a04:			; <UNDEFINED> instruction: 0x0002b1b4
   17a08:	andeq	fp, r2, ip, lsr #2
   17a0c:	ldr	r3, [pc, #4]	; 17a18 <__assert_fail@plt+0x686c>
   17a10:	mvn	r2, #0
   17a14:	b	1755c <__assert_fail@plt+0x63b0>
   17a18:			; <UNDEFINED> instruction: 0x0002b2b4
   17a1c:	ldr	r3, [pc]	; 17a24 <__assert_fail@plt+0x6878>
   17a20:	b	1755c <__assert_fail@plt+0x63b0>
   17a24:			; <UNDEFINED> instruction: 0x0002b2b4
   17a28:	mov	r1, r0
   17a2c:	ldr	r3, [pc, #8]	; 17a3c <__assert_fail@plt+0x6890>
   17a30:	mvn	r2, #0
   17a34:	mov	r0, #0
   17a38:	b	1755c <__assert_fail@plt+0x63b0>
   17a3c:			; <UNDEFINED> instruction: 0x0002b2b4
   17a40:	mov	r2, r1
   17a44:	ldr	r3, [pc, #8]	; 17a54 <__assert_fail@plt+0x68a8>
   17a48:	mov	r1, r0
   17a4c:	mov	r0, #0
   17a50:	b	1755c <__assert_fail@plt+0x63b0>
   17a54:			; <UNDEFINED> instruction: 0x0002b2b4
   17a58:	push	{r4, r5, lr}
   17a5c:	sub	sp, sp, #52	; 0x34
   17a60:	mov	r5, r2
   17a64:	mov	r4, r0
   17a68:	mov	r0, sp
   17a6c:	bl	15ef8 <__assert_fail@plt+0x4d4c>
   17a70:	mov	r3, sp
   17a74:	mov	r1, r5
   17a78:	mov	r0, r4
   17a7c:	mvn	r2, #0
   17a80:	bl	1755c <__assert_fail@plt+0x63b0>
   17a84:	add	sp, sp, #52	; 0x34
   17a88:	pop	{r4, r5, pc}
   17a8c:	push	{r4, r5, r6, lr}
   17a90:	sub	sp, sp, #48	; 0x30
   17a94:	mov	r5, r2
   17a98:	mov	r6, r3
   17a9c:	mov	r4, r0
   17aa0:	mov	r0, sp
   17aa4:	bl	15ef8 <__assert_fail@plt+0x4d4c>
   17aa8:	mov	r3, sp
   17aac:	mov	r2, r6
   17ab0:	mov	r1, r5
   17ab4:	mov	r0, r4
   17ab8:	bl	1755c <__assert_fail@plt+0x63b0>
   17abc:	add	sp, sp, #48	; 0x30
   17ac0:	pop	{r4, r5, r6, pc}
   17ac4:	mov	r2, r1
   17ac8:	mov	r1, r0
   17acc:	mov	r0, #0
   17ad0:	b	17a58 <__assert_fail@plt+0x68ac>
   17ad4:	mov	r3, r2
   17ad8:	mov	r2, r1
   17adc:	mov	r1, r0
   17ae0:	mov	r0, #0
   17ae4:	b	17a8c <__assert_fail@plt+0x68e0>
   17ae8:	push	{r4, r5, r6, r7, r8, lr}
   17aec:	mov	r7, r0
   17af0:	ldr	lr, [pc, #100]	; 17b5c <__assert_fail@plt+0x69b0>
   17af4:	mov	r8, r1
   17af8:	mov	r4, r2
   17afc:	ldm	lr!, {r0, r1, r2, r3}
   17b00:	sub	sp, sp, #48	; 0x30
   17b04:	mov	ip, sp
   17b08:	lsr	r5, r4, #5
   17b0c:	stmia	ip!, {r0, r1, r2, r3}
   17b10:	add	r6, sp, #8
   17b14:	ldm	lr!, {r0, r1, r2, r3}
   17b18:	and	r4, r4, #31
   17b1c:	stmia	ip!, {r0, r1, r2, r3}
   17b20:	ldm	lr, {r0, r1, r2, r3}
   17b24:	stm	ip, {r0, r1, r2, r3}
   17b28:	mov	r2, r8
   17b2c:	ldr	lr, [r6, r5, lsl #2]
   17b30:	mov	r1, r7
   17b34:	mov	r3, sp
   17b38:	lsr	ip, lr, r4
   17b3c:	eor	ip, ip, #1
   17b40:	and	ip, ip, #1
   17b44:	mov	r0, #0
   17b48:	eor	r4, lr, ip, lsl r4
   17b4c:	str	r4, [r6, r5, lsl #2]
   17b50:	bl	1755c <__assert_fail@plt+0x63b0>
   17b54:	add	sp, sp, #48	; 0x30
   17b58:	pop	{r4, r5, r6, r7, r8, pc}
   17b5c:			; <UNDEFINED> instruction: 0x0002b2b4
   17b60:	mov	r2, r1
   17b64:	mvn	r1, #0
   17b68:	b	17ae8 <__assert_fail@plt+0x693c>
   17b6c:	mov	r2, #58	; 0x3a
   17b70:	mvn	r1, #0
   17b74:	b	17ae8 <__assert_fail@plt+0x693c>
   17b78:	mov	r2, #58	; 0x3a
   17b7c:	b	17ae8 <__assert_fail@plt+0x693c>
   17b80:	push	{r4, r5, r6, r7, lr}
   17b84:	sub	sp, sp, #100	; 0x64
   17b88:	mov	r6, r0
   17b8c:	mov	r0, sp
   17b90:	mov	r7, r2
   17b94:	bl	15ef8 <__assert_fail@plt+0x4d4c>
   17b98:	mov	ip, sp
   17b9c:	add	lr, sp, #48	; 0x30
   17ba0:	ldm	ip!, {r0, r1, r2, r3}
   17ba4:	stmia	lr!, {r0, r1, r2, r3}
   17ba8:	ldm	ip!, {r0, r1, r2, r3}
   17bac:	ldr	r5, [sp, #60]	; 0x3c
   17bb0:	stmia	lr!, {r0, r1, r2, r3}
   17bb4:	mvn	r4, r5
   17bb8:	ldm	ip, {r0, r1, r2, r3}
   17bbc:	and	ip, r4, #67108864	; 0x4000000
   17bc0:	eor	ip, ip, r5
   17bc4:	str	ip, [sp, #60]	; 0x3c
   17bc8:	stm	lr, {r0, r1, r2, r3}
   17bcc:	mov	r1, r7
   17bd0:	mov	r0, r6
   17bd4:	add	r3, sp, #48	; 0x30
   17bd8:	mvn	r2, #0
   17bdc:	bl	1755c <__assert_fail@plt+0x63b0>
   17be0:	add	sp, sp, #100	; 0x64
   17be4:	pop	{r4, r5, r6, r7, pc}
   17be8:	push	{r4, r5, r6, r7, r8, lr}
   17bec:	mov	r5, r1
   17bf0:	ldr	lr, [pc, #100]	; 17c5c <__assert_fail@plt+0x6ab0>
   17bf4:	mov	r4, r2
   17bf8:	mov	r7, r0
   17bfc:	mov	r8, r3
   17c00:	ldm	lr!, {r0, r1, r2, r3}
   17c04:	sub	sp, sp, #48	; 0x30
   17c08:	mov	ip, sp
   17c0c:	mov	r6, #10
   17c10:	stmia	ip!, {r0, r1, r2, r3}
   17c14:	cmp	r4, #0
   17c18:	cmpne	r5, #0
   17c1c:	ldm	lr!, {r0, r1, r2, r3}
   17c20:	str	r6, [sp]
   17c24:	stmia	ip!, {r0, r1, r2, r3}
   17c28:	ldm	lr, {r0, r1, r2, r3}
   17c2c:	stm	ip, {r0, r1, r2, r3}
   17c30:	beq	17c58 <__assert_fail@plt+0x6aac>
   17c34:	mov	r3, sp
   17c38:	mov	r1, r8
   17c3c:	mov	r0, r7
   17c40:	ldr	r2, [sp, #72]	; 0x48
   17c44:	str	r5, [sp, #40]	; 0x28
   17c48:	str	r4, [sp, #44]	; 0x2c
   17c4c:	bl	1755c <__assert_fail@plt+0x63b0>
   17c50:	add	sp, sp, #48	; 0x30
   17c54:	pop	{r4, r5, r6, r7, r8, pc}
   17c58:	bl	1117c <abort@plt>
   17c5c:			; <UNDEFINED> instruction: 0x0002b2b4
   17c60:	push	{lr}		; (str lr, [sp, #-4]!)
   17c64:	sub	sp, sp, #12
   17c68:	mvn	ip, #0
   17c6c:	str	ip, [sp]
   17c70:	bl	17be8 <__assert_fail@plt+0x6a3c>
   17c74:	add	sp, sp, #12
   17c78:	pop	{pc}		; (ldr pc, [sp], #4)
   17c7c:	push	{lr}		; (str lr, [sp, #-4]!)
   17c80:	sub	sp, sp, #12
   17c84:	mvn	ip, #0
   17c88:	mov	r3, r2
   17c8c:	str	ip, [sp]
   17c90:	mov	r2, r1
   17c94:	mov	r1, r0
   17c98:	mov	r0, #0
   17c9c:	bl	17be8 <__assert_fail@plt+0x6a3c>
   17ca0:	add	sp, sp, #12
   17ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ca8:	push	{lr}		; (str lr, [sp, #-4]!)
   17cac:	sub	sp, sp, #12
   17cb0:	str	r3, [sp]
   17cb4:	mov	r3, r2
   17cb8:	mov	r2, r1
   17cbc:	mov	r1, r0
   17cc0:	mov	r0, #0
   17cc4:	bl	17be8 <__assert_fail@plt+0x6a3c>
   17cc8:	add	sp, sp, #12
   17ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd0:	ldr	r3, [pc]	; 17cd8 <__assert_fail@plt+0x6b2c>
   17cd4:	b	1755c <__assert_fail@plt+0x63b0>
   17cd8:	andeq	fp, r2, r4, lsr r1
   17cdc:	mov	r2, r1
   17ce0:	ldr	r3, [pc, #8]	; 17cf0 <__assert_fail@plt+0x6b44>
   17ce4:	mov	r1, r0
   17ce8:	mov	r0, #0
   17cec:	b	1755c <__assert_fail@plt+0x63b0>
   17cf0:	andeq	fp, r2, r4, lsr r1
   17cf4:	ldr	r3, [pc, #4]	; 17d00 <__assert_fail@plt+0x6b54>
   17cf8:	mvn	r2, #0
   17cfc:	b	1755c <__assert_fail@plt+0x63b0>
   17d00:	andeq	fp, r2, r4, lsr r1
   17d04:	mov	r1, r0
   17d08:	ldr	r3, [pc, #8]	; 17d18 <__assert_fail@plt+0x6b6c>
   17d0c:	mvn	r2, #0
   17d10:	mov	r0, #0
   17d14:	b	1755c <__assert_fail@plt+0x63b0>
   17d18:	andeq	fp, r2, r4, lsr r1
   17d1c:	push	{r4, r6, r7, lr}
   17d20:	sub	sp, sp, #104	; 0x68
   17d24:	mov	r4, r0
   17d28:	mov	r2, sp
   17d2c:	ldr	r1, [pc, #52]	; 17d68 <__assert_fail@plt+0x6bbc>
   17d30:	mov	r0, #3
   17d34:	bl	11194 <__lxstat64@plt>
   17d38:	cmp	r0, #0
   17d3c:	bne	17d5c <__assert_fail@plt+0x6bb0>
   17d40:	ldrd	r6, [sp, #96]	; 0x60
   17d44:	ldrd	r2, [sp]
   17d48:	mov	r0, r4
   17d4c:	strd	r6, [r4]
   17d50:	strd	r2, [r4, #8]
   17d54:	add	sp, sp, #104	; 0x68
   17d58:	pop	{r4, r6, r7, pc}
   17d5c:	mov	r0, #0
   17d60:	add	sp, sp, #104	; 0x68
   17d64:	pop	{r4, r6, r7, pc}
   17d68:			; <UNDEFINED> instruction: 0x00019db4
   17d6c:	cmp	r0, #2
   17d70:	push	{r4, r5, r6, r7, r8, lr}
   17d74:	mov	r4, r0
   17d78:	bhi	17da0 <__assert_fail@plt+0x6bf4>
   17d7c:	bl	18fe4 <__assert_fail@plt+0x7e38>
   17d80:	mov	r7, r0
   17d84:	bl	11068 <__errno_location@plt>
   17d88:	mov	r5, r0
   17d8c:	mov	r0, r4
   17d90:	ldr	r6, [r5]
   17d94:	mov	r4, r7
   17d98:	bl	11188 <close@plt>
   17d9c:	str	r6, [r5]
   17da0:	mov	r0, r4
   17da4:	pop	{r4, r5, r6, r7, r8, pc}
   17da8:	push	{r4, r5, r6, lr}
   17dac:	sub	sp, sp, #32
   17db0:	cmp	r1, #0
   17db4:	mov	r4, r0
   17db8:	ldr	r5, [sp, #48]	; 0x30
   17dbc:	ldr	r6, [sp, #52]	; 0x34
   17dc0:	beq	180d8 <__assert_fail@plt+0x6f2c>
   17dc4:	stm	sp, {r2, r3}
   17dc8:	mov	r3, r1
   17dcc:	ldr	r2, [pc, #808]	; 180fc <__assert_fail@plt+0x6f50>
   17dd0:	mov	r1, #1
   17dd4:	bl	110b0 <__fprintf_chk@plt>
   17dd8:	mov	r2, #5
   17ddc:	ldr	r1, [pc, #796]	; 18100 <__assert_fail@plt+0x6f54>
   17de0:	mov	r0, #0
   17de4:	bl	10f54 <dcgettext@plt>
   17de8:	ldr	r3, [pc, #788]	; 18104 <__assert_fail@plt+0x6f58>
   17dec:	ldr	r2, [pc, #788]	; 18108 <__assert_fail@plt+0x6f5c>
   17df0:	str	r3, [sp]
   17df4:	mov	r1, #1
   17df8:	mov	r3, r0
   17dfc:	mov	r0, r4
   17e00:	bl	110b0 <__fprintf_chk@plt>
   17e04:	mov	r1, r4
   17e08:	mov	r0, #10
   17e0c:	bl	10f48 <fputc_unlocked@plt>
   17e10:	mov	r2, #5
   17e14:	ldr	r1, [pc, #752]	; 1810c <__assert_fail@plt+0x6f60>
   17e18:	mov	r0, #0
   17e1c:	bl	10f54 <dcgettext@plt>
   17e20:	mov	r1, #1
   17e24:	ldr	r3, [pc, #740]	; 18110 <__assert_fail@plt+0x6f64>
   17e28:	mov	r2, r0
   17e2c:	mov	r0, r4
   17e30:	bl	110b0 <__fprintf_chk@plt>
   17e34:	mov	r1, r4
   17e38:	mov	r0, #10
   17e3c:	bl	10f48 <fputc_unlocked@plt>
   17e40:	cmp	r6, #9
   17e44:	ldrls	pc, [pc, r6, lsl #2]
   17e48:	b	180f0 <__assert_fail@plt+0x6f44>
   17e4c:	ldrdeq	r7, [r1], -r0
   17e50:	ldrdeq	r7, [r1], -r8
   17e54:	andeq	r7, r1, r4, lsl #30
   17e58:	andeq	r7, r1, r8, lsr pc
   17e5c:	andeq	r7, r1, r4, ror pc
   17e60:			; <UNDEFINED> instruction: 0x00017fb0
   17e64:	andeq	r7, r1, ip, ror #31
   17e68:	andeq	r8, r1, r0, lsr r0
   17e6c:	andeq	r8, r1, r0, lsl #1
   17e70:	andeq	r7, r1, r4, ror lr
   17e74:	ldr	r1, [pc, #664]	; 18114 <__assert_fail@plt+0x6f68>
   17e78:	mov	r2, #5
   17e7c:	mov	r0, #0
   17e80:	bl	10f54 <dcgettext@plt>
   17e84:	ldr	ip, [r5, #32]
   17e88:	ldr	r1, [r5, #28]
   17e8c:	ldr	r2, [r5, #24]
   17e90:	ldr	r3, [r5]
   17e94:	ldr	r6, [r5, #20]
   17e98:	str	ip, [sp, #28]
   17e9c:	ldr	lr, [r5, #16]
   17ea0:	str	r1, [sp, #24]
   17ea4:	ldr	ip, [r5, #12]
   17ea8:	str	r2, [sp, #20]
   17eac:	ldr	r1, [r5, #8]
   17eb0:	ldr	r2, [r5, #4]
   17eb4:	str	r6, [sp, #16]
   17eb8:	stmib	sp, {r1, ip, lr}
   17ebc:	mov	r1, #1
   17ec0:	str	r2, [sp]
   17ec4:	mov	r2, r0
   17ec8:	mov	r0, r4
   17ecc:	bl	110b0 <__fprintf_chk@plt>
   17ed0:	add	sp, sp, #32
   17ed4:	pop	{r4, r5, r6, pc}
   17ed8:	mov	r2, #5
   17edc:	ldr	r1, [pc, #564]	; 18118 <__assert_fail@plt+0x6f6c>
   17ee0:	mov	r0, #0
   17ee4:	bl	10f54 <dcgettext@plt>
   17ee8:	ldr	r3, [r5]
   17eec:	mov	r1, #1
   17ef0:	mov	r2, r0
   17ef4:	mov	r0, r4
   17ef8:	add	sp, sp, #32
   17efc:	pop	{r4, r5, r6, lr}
   17f00:	b	110b0 <__fprintf_chk@plt>
   17f04:	mov	r2, #5
   17f08:	ldr	r1, [pc, #524]	; 1811c <__assert_fail@plt+0x6f70>
   17f0c:	mov	r0, #0
   17f10:	bl	10f54 <dcgettext@plt>
   17f14:	ldr	r2, [r5, #4]
   17f18:	ldr	r3, [r5]
   17f1c:	mov	r1, #1
   17f20:	str	r2, [sp, #48]	; 0x30
   17f24:	mov	r2, r0
   17f28:	mov	r0, r4
   17f2c:	add	sp, sp, #32
   17f30:	pop	{r4, r5, r6, lr}
   17f34:	b	110b0 <__fprintf_chk@plt>
   17f38:	mov	r2, #5
   17f3c:	ldr	r1, [pc, #476]	; 18120 <__assert_fail@plt+0x6f74>
   17f40:	mov	r0, #0
   17f44:	bl	10f54 <dcgettext@plt>
   17f48:	ldr	r1, [r5, #8]
   17f4c:	ldr	r2, [r5, #4]
   17f50:	ldr	r3, [r5]
   17f54:	str	r1, [sp, #52]	; 0x34
   17f58:	str	r2, [sp, #48]	; 0x30
   17f5c:	mov	r1, #1
   17f60:	mov	r2, r0
   17f64:	mov	r0, r4
   17f68:	add	sp, sp, #32
   17f6c:	pop	{r4, r5, r6, lr}
   17f70:	b	110b0 <__fprintf_chk@plt>
   17f74:	mov	r2, #5
   17f78:	ldr	r1, [pc, #420]	; 18124 <__assert_fail@plt+0x6f78>
   17f7c:	mov	r0, #0
   17f80:	bl	10f54 <dcgettext@plt>
   17f84:	ldr	r1, [r5, #8]
   17f88:	ldr	ip, [r5, #12]
   17f8c:	ldr	r2, [r5, #4]
   17f90:	ldr	r3, [r5]
   17f94:	stmib	sp, {r1, ip}
   17f98:	str	r2, [sp]
   17f9c:	mov	r1, #1
   17fa0:	mov	r2, r0
   17fa4:	mov	r0, r4
   17fa8:	bl	110b0 <__fprintf_chk@plt>
   17fac:	b	17ed0 <__assert_fail@plt+0x6d24>
   17fb0:	mov	r2, #5
   17fb4:	ldr	r1, [pc, #364]	; 18128 <__assert_fail@plt+0x6f7c>
   17fb8:	mov	r0, #0
   17fbc:	bl	10f54 <dcgettext@plt>
   17fc0:	add	r1, r5, #8
   17fc4:	ldr	r2, [r5, #4]
   17fc8:	ldm	r1, {r1, ip, lr}
   17fcc:	ldr	r3, [r5]
   17fd0:	str	r2, [sp]
   17fd4:	stmib	sp, {r1, ip, lr}
   17fd8:	mov	r1, #1
   17fdc:	mov	r2, r0
   17fe0:	mov	r0, r4
   17fe4:	bl	110b0 <__fprintf_chk@plt>
   17fe8:	b	17ed0 <__assert_fail@plt+0x6d24>
   17fec:	mov	r2, #5
   17ff0:	ldr	r1, [pc, #308]	; 1812c <__assert_fail@plt+0x6f80>
   17ff4:	mov	r0, #0
   17ff8:	bl	10f54 <dcgettext@plt>
   17ffc:	add	r1, r5, #8
   18000:	ldr	r2, [r5, #4]
   18004:	ldm	r1, {r1, ip, lr}
   18008:	ldr	r6, [r5, #20]
   1800c:	ldr	r3, [r5]
   18010:	stmib	sp, {r1, ip, lr}
   18014:	mov	r1, #1
   18018:	str	r2, [sp]
   1801c:	str	r6, [sp, #16]
   18020:	mov	r2, r0
   18024:	mov	r0, r4
   18028:	bl	110b0 <__fprintf_chk@plt>
   1802c:	b	17ed0 <__assert_fail@plt+0x6d24>
   18030:	mov	r2, #5
   18034:	ldr	r1, [pc, #244]	; 18130 <__assert_fail@plt+0x6f84>
   18038:	mov	r0, #0
   1803c:	bl	10f54 <dcgettext@plt>
   18040:	ldr	r2, [r5, #24]
   18044:	ldr	r3, [r5]
   18048:	ldr	r6, [r5, #20]
   1804c:	ldr	lr, [r5, #16]
   18050:	ldr	ip, [r5, #12]
   18054:	str	r2, [sp, #20]
   18058:	ldr	r1, [r5, #8]
   1805c:	ldr	r2, [r5, #4]
   18060:	str	r6, [sp, #16]
   18064:	stmib	sp, {r1, ip, lr}
   18068:	mov	r1, #1
   1806c:	str	r2, [sp]
   18070:	mov	r2, r0
   18074:	mov	r0, r4
   18078:	bl	110b0 <__fprintf_chk@plt>
   1807c:	b	17ed0 <__assert_fail@plt+0x6d24>
   18080:	mov	r2, #5
   18084:	ldr	r1, [pc, #168]	; 18134 <__assert_fail@plt+0x6f88>
   18088:	mov	r0, #0
   1808c:	bl	10f54 <dcgettext@plt>
   18090:	ldr	r1, [r5, #28]
   18094:	ldr	r2, [r5, #24]
   18098:	ldr	r3, [r5]
   1809c:	ldr	r6, [r5, #20]
   180a0:	ldr	lr, [r5, #16]
   180a4:	str	r1, [sp, #24]
   180a8:	ldr	ip, [r5, #12]
   180ac:	str	r2, [sp, #20]
   180b0:	ldr	r1, [r5, #8]
   180b4:	ldr	r2, [r5, #4]
   180b8:	str	r6, [sp, #16]
   180bc:	stmib	sp, {r1, ip, lr}
   180c0:	mov	r1, #1
   180c4:	str	r2, [sp]
   180c8:	mov	r2, r0
   180cc:	mov	r0, r4
   180d0:	bl	110b0 <__fprintf_chk@plt>
   180d4:	b	17ed0 <__assert_fail@plt+0x6d24>
   180d8:	str	r3, [sp]
   180dc:	mov	r1, #1
   180e0:	mov	r3, r2
   180e4:	ldr	r2, [pc, #76]	; 18138 <__assert_fail@plt+0x6f8c>
   180e8:	bl	110b0 <__fprintf_chk@plt>
   180ec:	b	17dd8 <__assert_fail@plt+0x6c2c>
   180f0:	mov	r2, #5
   180f4:	ldr	r1, [pc, #64]	; 1813c <__assert_fail@plt+0x6f90>
   180f8:	b	17e7c <__assert_fail@plt+0x6cd0>
   180fc:			; <UNDEFINED> instruction: 0x0001a3b8
   18100:	andeq	sl, r1, ip, asr #7
   18104:	andeq	r0, r0, r6, ror #15
   18108:	andeq	sl, r1, r4, lsr #13
   1810c:	ldrdeq	sl, [r1], -r0
   18110:	andeq	sl, r1, ip, ror r4
   18114:	andeq	sl, r1, ip, lsr #11
   18118:	andeq	sl, r1, r0, lsr #9
   1811c:			; <UNDEFINED> instruction: 0x0001a4b0
   18120:	andeq	sl, r1, r8, asr #9
   18124:	andeq	sl, r1, r4, ror #9
   18128:	andeq	sl, r1, r4, lsl #10
   1812c:	andeq	sl, r1, r8, lsr #10
   18130:	andeq	sl, r1, r0, asr r5
   18134:	andeq	sl, r1, ip, ror r5
   18138:	andeq	sl, r1, r4, asr #7
   1813c:	andeq	sl, r1, r0, ror #11
   18140:	push	{r4, r5, lr}
   18144:	sub	sp, sp, #12
   18148:	ldr	r5, [sp, #24]
   1814c:	ldr	ip, [r5]
   18150:	cmp	ip, #0
   18154:	beq	18170 <__assert_fail@plt+0x6fc4>
   18158:	mov	lr, r5
   1815c:	mov	ip, #0
   18160:	ldr	r4, [lr, #4]!
   18164:	add	ip, ip, #1
   18168:	cmp	r4, #0
   1816c:	bne	18160 <__assert_fail@plt+0x6fb4>
   18170:	stm	sp, {r5, ip}
   18174:	bl	17da8 <__assert_fail@plt+0x6bfc>
   18178:	add	sp, sp, #12
   1817c:	pop	{r4, r5, pc}
   18180:	push	{r4, r5, lr}
   18184:	sub	sp, sp, #52	; 0x34
   18188:	add	r5, sp, #4
   1818c:	ldr	r4, [sp, #64]	; 0x40
   18190:	mov	ip, #0
   18194:	sub	r4, r4, #4
   18198:	ldr	lr, [r4, #4]!
   1819c:	cmp	lr, #0
   181a0:	str	lr, [r5, #4]!
   181a4:	beq	181b4 <__assert_fail@plt+0x7008>
   181a8:	add	ip, ip, #1
   181ac:	cmp	ip, #10
   181b0:	bne	18198 <__assert_fail@plt+0x6fec>
   181b4:	add	lr, sp, #8
   181b8:	str	ip, [sp, #4]
   181bc:	str	lr, [sp]
   181c0:	bl	17da8 <__assert_fail@plt+0x6bfc>
   181c4:	add	sp, sp, #52	; 0x34
   181c8:	pop	{r4, r5, pc}
   181cc:	push	{r3}		; (str r3, [sp, #-4]!)
   181d0:	push	{r4, lr}
   181d4:	sub	sp, sp, #60	; 0x3c
   181d8:	add	lr, sp, #56	; 0x38
   181dc:	add	r3, sp, #72	; 0x48
   181e0:	str	r3, [lr, #-44]!	; 0xffffffd4
   181e4:	add	r4, sp, #68	; 0x44
   181e8:	mov	r3, #0
   181ec:	ldr	ip, [r4, #4]!
   181f0:	cmp	ip, #0
   181f4:	str	ip, [lr, #4]!
   181f8:	beq	18208 <__assert_fail@plt+0x705c>
   181fc:	add	r3, r3, #1
   18200:	cmp	r3, #10
   18204:	bne	181ec <__assert_fail@plt+0x7040>
   18208:	add	ip, sp, #16
   1820c:	str	r3, [sp, #4]
   18210:	str	ip, [sp]
   18214:	ldr	r3, [sp, #68]	; 0x44
   18218:	bl	17da8 <__assert_fail@plt+0x6bfc>
   1821c:	add	sp, sp, #60	; 0x3c
   18220:	pop	{r4, lr}
   18224:	add	sp, sp, #4
   18228:	bx	lr
   1822c:	ldr	r3, [pc, #116]	; 182a8 <__assert_fail@plt+0x70fc>
   18230:	push	{r4, lr}
   18234:	mov	r0, #10
   18238:	ldr	r1, [r3]
   1823c:	bl	10f48 <fputc_unlocked@plt>
   18240:	mov	r2, #5
   18244:	ldr	r1, [pc, #96]	; 182ac <__assert_fail@plt+0x7100>
   18248:	mov	r0, #0
   1824c:	bl	10f54 <dcgettext@plt>
   18250:	ldr	r2, [pc, #88]	; 182b0 <__assert_fail@plt+0x7104>
   18254:	mov	r1, r0
   18258:	mov	r0, #1
   1825c:	bl	11098 <__printf_chk@plt>
   18260:	mov	r2, #5
   18264:	ldr	r1, [pc, #72]	; 182b4 <__assert_fail@plt+0x7108>
   18268:	mov	r0, #0
   1826c:	bl	10f54 <dcgettext@plt>
   18270:	ldr	r3, [pc, #64]	; 182b8 <__assert_fail@plt+0x710c>
   18274:	ldr	r2, [pc, #64]	; 182bc <__assert_fail@plt+0x7110>
   18278:	mov	r1, r0
   1827c:	mov	r0, #1
   18280:	bl	11098 <__printf_chk@plt>
   18284:	mov	r2, #5
   18288:	ldr	r1, [pc, #48]	; 182c0 <__assert_fail@plt+0x7114>
   1828c:	mov	r0, #0
   18290:	bl	10f54 <dcgettext@plt>
   18294:	ldr	r2, [pc, #40]	; 182c4 <__assert_fail@plt+0x7118>
   18298:	pop	{r4, lr}
   1829c:	mov	r1, r0
   182a0:	mov	r0, #1
   182a4:	b	11098 <__printf_chk@plt>
   182a8:	andeq	fp, r2, ip, ror r1
   182ac:	andeq	sl, r1, ip, lsl r6
   182b0:	andeq	sl, r1, r0, lsr r6
   182b4:	andeq	sl, r1, r8, asr #12
   182b8:	ldrdeq	r9, [r1], -r8
   182bc:	andeq	r9, r1, r0, lsl #24
   182c0:	andeq	sl, r1, ip, asr r6
   182c4:	andeq	sl, r1, r4, lsl #13
   182c8:	push	{r4, lr}
   182cc:	bl	18918 <__assert_fail@plt+0x776c>
   182d0:	cmp	r0, #0
   182d4:	popne	{r4, pc}
   182d8:	bl	18810 <__assert_fail@plt+0x7664>
   182dc:	push	{r4, lr}
   182e0:	bl	18918 <__assert_fail@plt+0x776c>
   182e4:	cmp	r0, #0
   182e8:	popne	{r4, pc}
   182ec:	bl	18810 <__assert_fail@plt+0x7664>
   182f0:	push	{r4, lr}
   182f4:	bl	18918 <__assert_fail@plt+0x776c>
   182f8:	cmp	r0, #0
   182fc:	popne	{r4, pc}
   18300:	bl	18810 <__assert_fail@plt+0x7664>
   18304:	push	{r4, r5, r6, lr}
   18308:	mov	r5, r0
   1830c:	mov	r4, r1
   18310:	bl	18944 <__assert_fail@plt+0x7798>
   18314:	cmp	r0, #0
   18318:	popne	{r4, r5, r6, pc}
   1831c:	adds	r4, r4, #0
   18320:	movne	r4, #1
   18324:	cmp	r5, #0
   18328:	orreq	r4, r4, #1
   1832c:	cmp	r4, #0
   18330:	popeq	{r4, r5, r6, pc}
   18334:	bl	18810 <__assert_fail@plt+0x7664>
   18338:	push	{r4, lr}
   1833c:	cmp	r1, #0
   18340:	orreq	r1, r1, #1
   18344:	bl	18944 <__assert_fail@plt+0x7798>
   18348:	cmp	r0, #0
   1834c:	popne	{r4, pc}
   18350:	bl	18810 <__assert_fail@plt+0x7664>
   18354:	push	{r4, r5, r6, lr}
   18358:	mov	r6, r0
   1835c:	mov	r5, r1
   18360:	mov	r4, r2
   18364:	bl	18f98 <__assert_fail@plt+0x7dec>
   18368:	cmp	r0, #0
   1836c:	popne	{r4, r5, r6, pc}
   18370:	cmp	r6, #0
   18374:	beq	18384 <__assert_fail@plt+0x71d8>
   18378:	cmp	r5, #0
   1837c:	cmpne	r4, #0
   18380:	popeq	{r4, r5, r6, pc}
   18384:	bl	18810 <__assert_fail@plt+0x7664>
   18388:	b	18354 <__assert_fail@plt+0x71a8>
   1838c:	cmp	r2, #0
   18390:	cmpne	r1, #0
   18394:	moveq	r2, #1
   18398:	moveq	r1, r2
   1839c:	push	{r4, lr}
   183a0:	bl	18f98 <__assert_fail@plt+0x7dec>
   183a4:	cmp	r0, #0
   183a8:	popne	{r4, pc}
   183ac:	bl	18810 <__assert_fail@plt+0x7664>
   183b0:	mov	r2, r1
   183b4:	mov	r1, r0
   183b8:	mov	r0, #0
   183bc:	b	18354 <__assert_fail@plt+0x71a8>
   183c0:	mov	r2, r1
   183c4:	mov	r1, r0
   183c8:	mov	r0, #0
   183cc:	b	1838c <__assert_fail@plt+0x71e0>
   183d0:	push	{r4, r5, r6, lr}
   183d4:	subs	r6, r0, #0
   183d8:	sub	sp, sp, #8
   183dc:	mov	r5, r1
   183e0:	ldr	r4, [r1]
   183e4:	beq	18420 <__assert_fail@plt+0x7274>
   183e8:	lsr	r1, r4, #1
   183ec:	add	r3, r1, #1
   183f0:	mvn	r3, r3
   183f4:	cmp	r4, r3
   183f8:	bhi	1841c <__assert_fail@plt+0x7270>
   183fc:	add	r4, r4, #1
   18400:	add	r4, r4, r1
   18404:	mov	r0, r6
   18408:	mov	r1, r4
   1840c:	bl	18354 <__assert_fail@plt+0x71a8>
   18410:	str	r4, [r5]
   18414:	add	sp, sp, #8
   18418:	pop	{r4, r5, r6, pc}
   1841c:	bl	18810 <__assert_fail@plt+0x7664>
   18420:	cmp	r4, #0
   18424:	bne	18404 <__assert_fail@plt+0x7258>
   18428:	mov	r1, r2
   1842c:	mov	r0, #64	; 0x40
   18430:	str	r2, [sp, #4]
   18434:	bl	190e4 <__assert_fail@plt+0x7f38>
   18438:	ldr	r2, [sp, #4]
   1843c:	cmp	r0, #0
   18440:	movne	r4, r0
   18444:	addeq	r4, r0, #1
   18448:	b	18404 <__assert_fail@plt+0x7258>
   1844c:	mov	r2, #1
   18450:	b	183d0 <__assert_fail@plt+0x7224>
   18454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18458:	sub	sp, sp, #12
   1845c:	ldr	r6, [r1]
   18460:	mov	sl, r1
   18464:	mov	r9, r0
   18468:	asrs	r4, r6, #1
   1846c:	mov	r5, r2
   18470:	mov	fp, r3
   18474:	ldr	r7, [sp, #48]	; 0x30
   18478:	bmi	185e4 <__assert_fail@plt+0x7438>
   1847c:	mvn	r3, #-2147483648	; 0x80000000
   18480:	sub	r3, r3, r4
   18484:	cmp	r6, r3
   18488:	movle	r3, #0
   1848c:	movgt	r3, #1
   18490:	mvn	r8, fp
   18494:	cmp	r3, #0
   18498:	addeq	r4, r4, r6
   1849c:	mvnne	r4, #-2147483648	; 0x80000000
   184a0:	lsr	r8, r8, #31
   184a4:	cmp	fp, r4
   184a8:	movge	r3, #0
   184ac:	andlt	r3, r8, #1
   184b0:	cmp	r3, #0
   184b4:	beq	1859c <__assert_fail@plt+0x73f0>
   184b8:	cmp	r7, #0
   184bc:	blt	1866c <__assert_fail@plt+0x74c0>
   184c0:	bne	18664 <__assert_fail@plt+0x74b8>
   184c4:	mov	r2, #64	; 0x40
   184c8:	mov	r1, r7
   184cc:	mov	r0, r2
   184d0:	str	r2, [sp, #4]
   184d4:	bl	192f0 <__assert_fail@plt+0x8144>
   184d8:	ldr	r2, [sp, #4]
   184dc:	mov	r1, r7
   184e0:	mov	r4, r0
   184e4:	mov	r0, r2
   184e8:	bl	19510 <__assert_fail@plt+0x8364>
   184ec:	ldr	r2, [sp, #4]
   184f0:	sub	r1, r2, r1
   184f4:	cmp	r9, #0
   184f8:	sub	r3, r4, r6
   184fc:	streq	r9, [sl]
   18500:	cmp	r3, r5
   18504:	bge	18588 <__assert_fail@plt+0x73dc>
   18508:	cmp	r5, #0
   1850c:	blt	185f8 <__assert_fail@plt+0x744c>
   18510:	cmp	r6, #0
   18514:	blt	18534 <__assert_fail@plt+0x7388>
   18518:	mvn	r3, #-2147483648	; 0x80000000
   1851c:	sub	r3, r3, r5
   18520:	cmp	r6, r3
   18524:	movle	r3, #0
   18528:	movgt	r3, #1
   1852c:	cmp	r3, #0
   18530:	bne	186f4 <__assert_fail@plt+0x7548>
   18534:	add	r5, r6, r5
   18538:	cmp	fp, r5
   1853c:	movge	r8, #0
   18540:	andlt	r8, r8, #1
   18544:	cmp	r8, #0
   18548:	mov	r4, r5
   1854c:	bne	186f4 <__assert_fail@plt+0x7548>
   18550:	cmp	r7, #0
   18554:	blt	1860c <__assert_fail@plt+0x7460>
   18558:	beq	18584 <__assert_fail@plt+0x73d8>
   1855c:	cmp	r5, #0
   18560:	blt	186b4 <__assert_fail@plt+0x7508>
   18564:	mov	r1, r7
   18568:	mvn	r0, #-2147483648	; 0x80000000
   1856c:	bl	192f0 <__assert_fail@plt+0x8144>
   18570:	cmp	r5, r0
   18574:	movle	r0, #0
   18578:	movgt	r0, #1
   1857c:	cmp	r0, #0
   18580:	bne	186f4 <__assert_fail@plt+0x7548>
   18584:	mul	r1, r5, r7
   18588:	mov	r0, r9
   1858c:	bl	18304 <__assert_fail@plt+0x7158>
   18590:	str	r4, [sl]
   18594:	add	sp, sp, #12
   18598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1859c:	cmp	r7, #0
   185a0:	blt	18638 <__assert_fail@plt+0x748c>
   185a4:	beq	184c4 <__assert_fail@plt+0x7318>
   185a8:	cmp	r4, #0
   185ac:	blt	18674 <__assert_fail@plt+0x74c8>
   185b0:	mov	r1, r7
   185b4:	mvn	r0, #-2147483648	; 0x80000000
   185b8:	bl	192f0 <__assert_fail@plt+0x8144>
   185bc:	cmp	r0, r4
   185c0:	movge	r0, #0
   185c4:	movlt	r0, #1
   185c8:	cmp	r0, #0
   185cc:	mvnne	r2, #-2147483648	; 0x80000000
   185d0:	bne	184c8 <__assert_fail@plt+0x731c>
   185d4:	mul	r1, r7, r4
   185d8:	cmp	r1, #63	; 0x3f
   185dc:	bgt	184f4 <__assert_fail@plt+0x7348>
   185e0:	b	184c4 <__assert_fail@plt+0x7318>
   185e4:	rsb	r3, r4, #-2147483648	; 0x80000000
   185e8:	cmp	r6, r3
   185ec:	movge	r3, #0
   185f0:	movlt	r3, #1
   185f4:	b	18490 <__assert_fail@plt+0x72e4>
   185f8:	rsb	r3, r5, #-2147483648	; 0x80000000
   185fc:	cmp	r6, r3
   18600:	movge	r3, #0
   18604:	movlt	r3, #1
   18608:	b	1852c <__assert_fail@plt+0x7380>
   1860c:	cmp	r5, #0
   18610:	blt	18698 <__assert_fail@plt+0x74ec>
   18614:	cmn	r7, #1
   18618:	beq	18584 <__assert_fail@plt+0x73d8>
   1861c:	mov	r1, r7
   18620:	mov	r0, #-2147483648	; 0x80000000
   18624:	bl	192f0 <__assert_fail@plt+0x8144>
   18628:	cmp	r5, r0
   1862c:	movle	r0, #0
   18630:	movgt	r0, #1
   18634:	b	1857c <__assert_fail@plt+0x73d0>
   18638:	cmp	r4, #0
   1863c:	blt	186d8 <__assert_fail@plt+0x752c>
   18640:	cmn	r7, #1
   18644:	beq	185d4 <__assert_fail@plt+0x7428>
   18648:	mov	r1, r7
   1864c:	mov	r0, #-2147483648	; 0x80000000
   18650:	bl	192f0 <__assert_fail@plt+0x8144>
   18654:	cmp	r0, r4
   18658:	movge	r0, #0
   1865c:	movlt	r0, #1
   18660:	b	185c8 <__assert_fail@plt+0x741c>
   18664:	mov	r4, fp
   18668:	b	185b0 <__assert_fail@plt+0x7404>
   1866c:	mov	r4, fp
   18670:	b	18640 <__assert_fail@plt+0x7494>
   18674:	cmn	r4, #1
   18678:	beq	185d4 <__assert_fail@plt+0x7428>
   1867c:	mov	r1, r4
   18680:	mov	r0, #-2147483648	; 0x80000000
   18684:	bl	192f0 <__assert_fail@plt+0x8144>
   18688:	cmp	r7, r0
   1868c:	movle	r0, #0
   18690:	movgt	r0, #1
   18694:	b	185c8 <__assert_fail@plt+0x741c>
   18698:	mov	r1, r7
   1869c:	mvn	r0, #-2147483648	; 0x80000000
   186a0:	bl	192f0 <__assert_fail@plt+0x8144>
   186a4:	cmp	r5, r0
   186a8:	movge	r0, #0
   186ac:	movlt	r0, #1
   186b0:	b	1857c <__assert_fail@plt+0x73d0>
   186b4:	cmn	r5, #1
   186b8:	beq	18584 <__assert_fail@plt+0x73d8>
   186bc:	mov	r1, r5
   186c0:	mov	r0, #-2147483648	; 0x80000000
   186c4:	bl	192f0 <__assert_fail@plt+0x8144>
   186c8:	cmp	r7, r0
   186cc:	movle	r0, #0
   186d0:	movgt	r0, #1
   186d4:	b	1857c <__assert_fail@plt+0x73d0>
   186d8:	mov	r1, r7
   186dc:	mvn	r0, #-2147483648	; 0x80000000
   186e0:	bl	192f0 <__assert_fail@plt+0x8144>
   186e4:	cmp	r0, r4
   186e8:	movle	r0, #0
   186ec:	movgt	r0, #1
   186f0:	b	185c8 <__assert_fail@plt+0x741c>
   186f4:	bl	18810 <__assert_fail@plt+0x7664>
   186f8:	push	{r4, lr}
   186fc:	mov	r1, #1
   18700:	bl	188d0 <__assert_fail@plt+0x7724>
   18704:	cmp	r0, #0
   18708:	popne	{r4, pc}
   1870c:	bl	18810 <__assert_fail@plt+0x7664>
   18710:	push	{r4, lr}
   18714:	mov	r1, #1
   18718:	bl	188d0 <__assert_fail@plt+0x7724>
   1871c:	cmp	r0, #0
   18720:	popne	{r4, pc}
   18724:	bl	18810 <__assert_fail@plt+0x7664>
   18728:	push	{r4, lr}
   1872c:	bl	188d0 <__assert_fail@plt+0x7724>
   18730:	cmp	r0, #0
   18734:	popne	{r4, pc}
   18738:	bl	18810 <__assert_fail@plt+0x7664>
   1873c:	push	{r4, lr}
   18740:	bl	188d0 <__assert_fail@plt+0x7724>
   18744:	cmp	r0, #0
   18748:	popne	{r4, pc}
   1874c:	bl	18810 <__assert_fail@plt+0x7664>
   18750:	push	{r4, r5, r6, lr}
   18754:	mov	r6, r0
   18758:	mov	r0, r1
   1875c:	mov	r4, r1
   18760:	bl	18918 <__assert_fail@plt+0x776c>
   18764:	subs	r5, r0, #0
   18768:	beq	18780 <__assert_fail@plt+0x75d4>
   1876c:	mov	r2, r4
   18770:	mov	r1, r6
   18774:	bl	10f24 <memcpy@plt>
   18778:	mov	r0, r5
   1877c:	pop	{r4, r5, r6, pc}
   18780:	bl	18810 <__assert_fail@plt+0x7664>
   18784:	push	{r4, r5, r6, lr}
   18788:	mov	r6, r0
   1878c:	mov	r0, r1
   18790:	mov	r4, r1
   18794:	bl	18918 <__assert_fail@plt+0x776c>
   18798:	subs	r5, r0, #0
   1879c:	beq	187b4 <__assert_fail@plt+0x7608>
   187a0:	mov	r2, r4
   187a4:	mov	r1, r6
   187a8:	bl	10f24 <memcpy@plt>
   187ac:	mov	r0, r5
   187b0:	pop	{r4, r5, r6, pc}
   187b4:	bl	18810 <__assert_fail@plt+0x7664>
   187b8:	push	{r4, r5, r6, lr}
   187bc:	mov	r6, r0
   187c0:	add	r0, r1, #1
   187c4:	mov	r4, r1
   187c8:	bl	18918 <__assert_fail@plt+0x776c>
   187cc:	subs	r5, r0, #0
   187d0:	beq	187f0 <__assert_fail@plt+0x7644>
   187d4:	mov	r3, #0
   187d8:	mov	r1, r6
   187dc:	strb	r3, [r5, r4]
   187e0:	mov	r2, r4
   187e4:	bl	10f24 <memcpy@plt>
   187e8:	mov	r0, r5
   187ec:	pop	{r4, r5, r6, pc}
   187f0:	bl	18810 <__assert_fail@plt+0x7664>
   187f4:	push	{r4, lr}
   187f8:	mov	r4, r0
   187fc:	bl	11044 <strlen@plt>
   18800:	add	r1, r0, #1
   18804:	mov	r0, r4
   18808:	pop	{r4, lr}
   1880c:	b	18750 <__assert_fail@plt+0x75a4>
   18810:	ldr	r3, [pc, #44]	; 18844 <__assert_fail@plt+0x7698>
   18814:	push	{r4, lr}
   18818:	mov	r2, #5
   1881c:	ldr	r1, [pc, #36]	; 18848 <__assert_fail@plt+0x769c>
   18820:	mov	r0, #0
   18824:	ldr	r4, [r3]
   18828:	bl	10f54 <dcgettext@plt>
   1882c:	ldr	r2, [pc, #24]	; 1884c <__assert_fail@plt+0x76a0>
   18830:	mov	r1, #0
   18834:	mov	r3, r0
   18838:	mov	r0, r4
   1883c:	bl	10fd8 <error@plt>
   18840:	bl	1117c <abort@plt>
   18844:	andeq	fp, r2, r0, lsr #2
   18848:	ldrdeq	sl, [r1], -r4
   1884c:	ldrdeq	sl, [r1], -r0
   18850:	push	{r4, lr}
   18854:	orr	r1, r1, #512	; 0x200
   18858:	bl	13adc <__assert_fail@plt+0x2930>
   1885c:	cmp	r0, #0
   18860:	popne	{r4, pc}
   18864:	bl	11068 <__errno_location@plt>
   18868:	ldr	r3, [r0]
   1886c:	cmp	r3, #22
   18870:	beq	18878 <__assert_fail@plt+0x76cc>
   18874:	bl	18810 <__assert_fail@plt+0x7664>
   18878:	ldr	r3, [pc, #12]	; 1888c <__assert_fail@plt+0x76e0>
   1887c:	mov	r2, #41	; 0x29
   18880:	ldr	r1, [pc, #8]	; 18890 <__assert_fail@plt+0x76e4>
   18884:	ldr	r0, [pc, #8]	; 18894 <__assert_fail@plt+0x76e8>
   18888:	bl	111ac <__assert_fail@plt>
   1888c:	andeq	sl, r1, r8, ror #13
   18890:	strdeq	sl, [r1], -r4
   18894:	andeq	sl, r1, r0, lsl #14
   18898:	ldr	r3, [r0, #48]	; 0x30
   1889c:	and	r3, r3, #17
   188a0:	cmp	r3, #16
   188a4:	beq	188c8 <__assert_fail@plt+0x771c>
   188a8:	cmp	r3, #17
   188ac:	beq	188b8 <__assert_fail@plt+0x770c>
   188b0:	mov	r0, #0
   188b4:	bx	lr
   188b8:	ldr	r0, [r1, #48]	; 0x30
   188bc:	adds	r0, r0, #0
   188c0:	movne	r0, #1
   188c4:	bx	lr
   188c8:	mov	r0, #1
   188cc:	bx	lr
   188d0:	cmp	r1, #0
   188d4:	cmpne	r0, #0
   188d8:	moveq	r1, #1
   188dc:	moveq	r0, r1
   188e0:	umull	r2, r3, r0, r1
   188e4:	adds	r3, r3, #0
   188e8:	movne	r3, #1
   188ec:	cmp	r2, #0
   188f0:	blt	18900 <__assert_fail@plt+0x7754>
   188f4:	cmp	r3, #0
   188f8:	bne	18900 <__assert_fail@plt+0x7754>
   188fc:	b	10ec4 <calloc@plt>
   18900:	push	{r4, lr}
   18904:	bl	11068 <__errno_location@plt>
   18908:	mov	r3, #12
   1890c:	str	r3, [r0]
   18910:	mov	r0, #0
   18914:	pop	{r4, pc}
   18918:	cmp	r0, #0
   1891c:	moveq	r0, #1
   18920:	cmp	r0, #0
   18924:	blt	1892c <__assert_fail@plt+0x7780>
   18928:	b	10ff0 <malloc@plt>
   1892c:	push	{r4, lr}
   18930:	bl	11068 <__errno_location@plt>
   18934:	mov	r3, #12
   18938:	str	r3, [r0]
   1893c:	mov	r0, #0
   18940:	pop	{r4, pc}
   18944:	cmp	r0, #0
   18948:	beq	1896c <__assert_fail@plt+0x77c0>
   1894c:	cmp	r1, #0
   18950:	push	{lr}		; (str lr, [sp, #-4]!)
   18954:	sub	sp, sp, #12
   18958:	beq	18974 <__assert_fail@plt+0x77c8>
   1895c:	blt	1898c <__assert_fail@plt+0x77e0>
   18960:	add	sp, sp, #12
   18964:	pop	{lr}		; (ldr lr, [sp], #4)
   18968:	b	10f60 <realloc@plt>
   1896c:	mov	r0, r1
   18970:	b	18918 <__assert_fail@plt+0x776c>
   18974:	str	r1, [sp, #4]
   18978:	bl	18e18 <__assert_fail@plt+0x7c6c>
   1897c:	ldr	r3, [sp, #4]
   18980:	mov	r0, r3
   18984:	add	sp, sp, #12
   18988:	pop	{pc}		; (ldr pc, [sp], #4)
   1898c:	bl	11068 <__errno_location@plt>
   18990:	mov	r2, #12
   18994:	mov	r3, #0
   18998:	str	r2, [r0]
   1899c:	b	18980 <__assert_fail@plt+0x77d4>
   189a0:	push	{r4, r5, r6, lr}
   189a4:	mov	r4, r0
   189a8:	bl	10fc0 <__fpending@plt>
   189ac:	ldr	r5, [r4]
   189b0:	and	r5, r5, #32
   189b4:	mov	r6, r0
   189b8:	mov	r0, r4
   189bc:	bl	18b0c <__assert_fail@plt+0x7960>
   189c0:	cmp	r5, #0
   189c4:	mov	r4, r0
   189c8:	bne	189e8 <__assert_fail@plt+0x783c>
   189cc:	cmp	r0, #0
   189d0:	beq	189e0 <__assert_fail@plt+0x7834>
   189d4:	cmp	r6, #0
   189d8:	beq	18a04 <__assert_fail@plt+0x7858>
   189dc:	mvn	r4, #0
   189e0:	mov	r0, r4
   189e4:	pop	{r4, r5, r6, pc}
   189e8:	cmp	r0, #0
   189ec:	bne	189dc <__assert_fail@plt+0x7830>
   189f0:	bl	11068 <__errno_location@plt>
   189f4:	str	r4, [r0]
   189f8:	mvn	r4, #0
   189fc:	mov	r0, r4
   18a00:	pop	{r4, r5, r6, pc}
   18a04:	bl	11068 <__errno_location@plt>
   18a08:	ldr	r4, [r0]
   18a0c:	subs	r4, r4, #9
   18a10:	mvnne	r4, #0
   18a14:	mov	r0, r4
   18a18:	pop	{r4, r5, r6, pc}
   18a1c:	push	{r4, r5}
   18a20:	mov	r4, #0
   18a24:	mov	r5, #0
   18a28:	ldr	r3, [pc, #12]	; 18a3c <__assert_fail@plt+0x7890>
   18a2c:	strd	r4, [r0, #16]
   18a30:	str	r3, [r0, #24]
   18a34:	pop	{r4, r5}
   18a38:	bx	lr
   18a3c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18a40:	ldr	r3, [pc, #180]	; 18afc <__assert_fail@plt+0x7950>
   18a44:	ldr	r2, [r0, #24]
   18a48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18a4c:	cmp	r2, r3
   18a50:	bne	18ae8 <__assert_fail@plt+0x793c>
   18a54:	ldrd	r6, [r0, #16]
   18a58:	orrs	r3, r6, r7
   18a5c:	bne	18a88 <__assert_fail@plt+0x78dc>
   18a60:	mov	r2, #1
   18a64:	mov	r3, #0
   18a68:	ldrd	r8, [r1, #96]	; 0x60
   18a6c:	strd	r2, [r0, #16]
   18a70:	ldrd	r2, [r1]
   18a74:	mov	r1, #0
   18a78:	strd	r8, [r0]
   18a7c:	strd	r2, [r0, #8]
   18a80:	mov	r0, r1
   18a84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a88:	ldrd	r8, [r1, #96]	; 0x60
   18a8c:	ldrd	r2, [r0]
   18a90:	cmp	r9, r3
   18a94:	cmpeq	r8, r2
   18a98:	beq	18ad0 <__assert_fail@plt+0x7924>
   18a9c:	adds	r2, r6, #1
   18aa0:	adc	r3, r7, #0
   18aa4:	and	r6, r6, r2
   18aa8:	and	r7, r7, r3
   18aac:	orrs	ip, r6, r7
   18ab0:	strd	r2, [r0, #16]
   18ab4:	movne	r1, #0
   18ab8:	bne	18a80 <__assert_fail@plt+0x78d4>
   18abc:	orrs	r3, r2, r3
   18ac0:	bne	18a70 <__assert_fail@plt+0x78c4>
   18ac4:	mov	r1, #1
   18ac8:	mov	r0, r1
   18acc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ad0:	ldrd	r4, [r1]
   18ad4:	ldrd	r2, [r0, #8]
   18ad8:	cmp	r5, r3
   18adc:	cmpeq	r4, r2
   18ae0:	bne	18a9c <__assert_fail@plt+0x78f0>
   18ae4:	b	18ac4 <__assert_fail@plt+0x7918>
   18ae8:	ldr	r3, [pc, #16]	; 18b00 <__assert_fail@plt+0x7954>
   18aec:	mov	r2, #60	; 0x3c
   18af0:	ldr	r1, [pc, #12]	; 18b04 <__assert_fail@plt+0x7958>
   18af4:	ldr	r0, [pc, #12]	; 18b08 <__assert_fail@plt+0x795c>
   18af8:	bl	111ac <__assert_fail@plt>
   18afc:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18b00:	andeq	sl, r1, r0, lsl r7
   18b04:	andeq	sl, r1, ip, lsl r7
   18b08:	andeq	sl, r1, r0, lsr r7
   18b0c:	push	{r4, r5, lr}
   18b10:	sub	sp, sp, #12
   18b14:	mov	r4, r0
   18b18:	bl	110a4 <fileno@plt>
   18b1c:	cmp	r0, #0
   18b20:	mov	r0, r4
   18b24:	blt	18ba0 <__assert_fail@plt+0x79f4>
   18b28:	bl	11008 <__freading@plt>
   18b2c:	cmp	r0, #0
   18b30:	bne	18b6c <__assert_fail@plt+0x79c0>
   18b34:	mov	r0, r4
   18b38:	bl	18db8 <__assert_fail@plt+0x7c0c>
   18b3c:	cmp	r0, #0
   18b40:	beq	18b9c <__assert_fail@plt+0x79f0>
   18b44:	bl	11068 <__errno_location@plt>
   18b48:	mov	r5, r0
   18b4c:	mov	r0, r4
   18b50:	ldr	r4, [r5]
   18b54:	bl	110bc <fclose@plt>
   18b58:	cmp	r4, #0
   18b5c:	mvnne	r0, #0
   18b60:	strne	r4, [r5]
   18b64:	add	sp, sp, #12
   18b68:	pop	{r4, r5, pc}
   18b6c:	mov	r0, r4
   18b70:	bl	110a4 <fileno@plt>
   18b74:	mov	r3, #1
   18b78:	str	r3, [sp]
   18b7c:	mov	r2, #0
   18b80:	mov	r3, #0
   18b84:	bl	10fa8 <lseek64@plt>
   18b88:	mvn	r3, #0
   18b8c:	mvn	r2, #0
   18b90:	cmp	r1, r3
   18b94:	cmpeq	r0, r2
   18b98:	bne	18b34 <__assert_fail@plt+0x7988>
   18b9c:	mov	r0, r4
   18ba0:	add	sp, sp, #12
   18ba4:	pop	{r4, r5, lr}
   18ba8:	b	110bc <fclose@plt>
   18bac:	push	{r1, r2, r3}
   18bb0:	push	{r4, r5, r6, r7, lr}
   18bb4:	sub	sp, sp, #8
   18bb8:	add	r3, sp, #32
   18bbc:	ldr	r1, [sp, #28]
   18bc0:	str	r3, [sp, #4]
   18bc4:	cmp	r1, #0
   18bc8:	beq	18c60 <__assert_fail@plt+0x7ab4>
   18bcc:	ldr	r2, [pc, #412]	; 18d70 <__assert_fail@plt+0x7bc4>
   18bd0:	mov	r5, r0
   18bd4:	cmp	r1, r2
   18bd8:	bne	18c24 <__assert_fail@plt+0x7a78>
   18bdc:	ldr	r6, [pc, #400]	; 18d74 <__assert_fail@plt+0x7bc8>
   18be0:	ldr	r7, [r3]
   18be4:	add	r2, sp, #36	; 0x24
   18be8:	ldr	r3, [r6]
   18bec:	str	r2, [sp, #4]
   18bf0:	cmp	r3, #0
   18bf4:	mov	r2, r7
   18bf8:	blt	18d24 <__assert_fail@plt+0x7b78>
   18bfc:	bl	110d4 <fcntl64@plt>
   18c00:	subs	r4, r0, #0
   18c04:	blt	18ca8 <__assert_fail@plt+0x7afc>
   18c08:	mov	r3, #1
   18c0c:	str	r3, [r6]
   18c10:	mov	r0, r4
   18c14:	add	sp, sp, #8
   18c18:	pop	{r4, r5, r6, r7, lr}
   18c1c:	add	sp, sp, #12
   18c20:	bx	lr
   18c24:	cmp	r1, #11
   18c28:	beq	18c50 <__assert_fail@plt+0x7aa4>
   18c2c:	bgt	18c70 <__assert_fail@plt+0x7ac4>
   18c30:	cmp	r1, #3
   18c34:	beq	18c50 <__assert_fail@plt+0x7aa4>
   18c38:	ble	18d64 <__assert_fail@plt+0x7bb8>
   18c3c:	cmp	r1, #8
   18c40:	beq	18c90 <__assert_fail@plt+0x7ae4>
   18c44:	ble	18c90 <__assert_fail@plt+0x7ae4>
   18c48:	cmp	r1, #9
   18c4c:	bne	18c90 <__assert_fail@plt+0x7ae4>
   18c50:	mov	r0, r5
   18c54:	bl	110d4 <fcntl64@plt>
   18c58:	mov	r4, r0
   18c5c:	b	18c10 <__assert_fail@plt+0x7a64>
   18c60:	ldr	r2, [sp, #32]
   18c64:	bl	110d4 <fcntl64@plt>
   18c68:	mov	r4, r0
   18c6c:	b	18c10 <__assert_fail@plt+0x7a64>
   18c70:	ldr	r3, [pc, #256]	; 18d78 <__assert_fail@plt+0x7bcc>
   18c74:	cmp	r1, r3
   18c78:	bgt	18d44 <__assert_fail@plt+0x7b98>
   18c7c:	cmp	r1, r2
   18c80:	bge	18c90 <__assert_fail@plt+0x7ae4>
   18c84:	sub	r3, r3, #6
   18c88:	cmp	r1, r3
   18c8c:	beq	18c50 <__assert_fail@plt+0x7aa4>
   18c90:	ldr	r3, [sp, #4]
   18c94:	mov	r0, r5
   18c98:	ldr	r2, [r3]
   18c9c:	bl	110d4 <fcntl64@plt>
   18ca0:	mov	r4, r0
   18ca4:	b	18c10 <__assert_fail@plt+0x7a64>
   18ca8:	bl	11068 <__errno_location@plt>
   18cac:	ldr	r3, [r0]
   18cb0:	cmp	r3, #22
   18cb4:	bne	18c08 <__assert_fail@plt+0x7a5c>
   18cb8:	mov	r2, r7
   18cbc:	mov	r0, r5
   18cc0:	mov	r1, #0
   18cc4:	bl	110d4 <fcntl64@plt>
   18cc8:	subs	r4, r0, #0
   18ccc:	blt	18c10 <__assert_fail@plt+0x7a64>
   18cd0:	mvn	r3, #0
   18cd4:	str	r3, [r6]
   18cd8:	mov	r1, #1
   18cdc:	mov	r0, r4
   18ce0:	bl	110d4 <fcntl64@plt>
   18ce4:	subs	r2, r0, #0
   18ce8:	blt	18d04 <__assert_fail@plt+0x7b58>
   18cec:	orr	r2, r2, #1
   18cf0:	mov	r1, #2
   18cf4:	mov	r0, r4
   18cf8:	bl	110d4 <fcntl64@plt>
   18cfc:	cmn	r0, #1
   18d00:	bne	18c10 <__assert_fail@plt+0x7a64>
   18d04:	bl	11068 <__errno_location@plt>
   18d08:	mov	r5, r0
   18d0c:	mov	r0, r4
   18d10:	ldr	r6, [r5]
   18d14:	mvn	r4, #0
   18d18:	bl	11188 <close@plt>
   18d1c:	str	r6, [r5]
   18d20:	b	18c10 <__assert_fail@plt+0x7a64>
   18d24:	mov	r1, #0
   18d28:	bl	110d4 <fcntl64@plt>
   18d2c:	subs	r4, r0, #0
   18d30:	blt	18c10 <__assert_fail@plt+0x7a64>
   18d34:	ldr	r3, [r6]
   18d38:	cmn	r3, #1
   18d3c:	beq	18cd8 <__assert_fail@plt+0x7b2c>
   18d40:	b	18c10 <__assert_fail@plt+0x7a64>
   18d44:	ldr	r3, [pc, #48]	; 18d7c <__assert_fail@plt+0x7bd0>
   18d48:	cmp	r1, r3
   18d4c:	beq	18c90 <__assert_fail@plt+0x7ae4>
   18d50:	blt	18c50 <__assert_fail@plt+0x7aa4>
   18d54:	add	r3, r3, #1
   18d58:	cmp	r1, r3
   18d5c:	bne	18c90 <__assert_fail@plt+0x7ae4>
   18d60:	b	18c50 <__assert_fail@plt+0x7aa4>
   18d64:	cmp	r1, #1
   18d68:	bne	18c90 <__assert_fail@plt+0x7ae4>
   18d6c:	b	18c50 <__assert_fail@plt+0x7aa4>
   18d70:	andeq	r0, r0, r6, lsl #8
   18d74:	andeq	fp, r2, r4, ror #5
   18d78:	andeq	r0, r0, r7, lsl #8
   18d7c:	andeq	r0, r0, r9, lsl #8
   18d80:	push	{r1, r2, r3}
   18d84:	push	{lr}		; (str lr, [sp, #-4]!)
   18d88:	sub	sp, sp, #8
   18d8c:	ldr	r1, [sp, #12]
   18d90:	ands	r2, r1, #64	; 0x40
   18d94:	addne	r3, sp, #16
   18d98:	ldrne	r2, [sp, #16]
   18d9c:	strne	r3, [sp, #4]
   18da0:	bl	10fe4 <open64@plt>
   18da4:	bl	17d6c <__assert_fail@plt+0x6bc0>
   18da8:	add	sp, sp, #8
   18dac:	pop	{lr}		; (ldr lr, [sp], #4)
   18db0:	add	sp, sp, #12
   18db4:	bx	lr
   18db8:	push	{r4, lr}
   18dbc:	subs	r4, r0, #0
   18dc0:	sub	sp, sp, #8
   18dc4:	beq	18de0 <__assert_fail@plt+0x7c34>
   18dc8:	bl	11008 <__freading@plt>
   18dcc:	cmp	r0, #0
   18dd0:	beq	18de0 <__assert_fail@plt+0x7c34>
   18dd4:	ldr	r3, [r4]
   18dd8:	tst	r3, #256	; 0x100
   18ddc:	bne	18df0 <__assert_fail@plt+0x7c44>
   18de0:	mov	r0, r4
   18de4:	add	sp, sp, #8
   18de8:	pop	{r4, lr}
   18dec:	b	10ef4 <fflush@plt>
   18df0:	mov	r3, #1
   18df4:	str	r3, [sp]
   18df8:	mov	r2, #0
   18dfc:	mov	r3, #0
   18e00:	mov	r0, r4
   18e04:	bl	18e70 <__assert_fail@plt+0x7cc4>
   18e08:	mov	r0, r4
   18e0c:	add	sp, sp, #8
   18e10:	pop	{r4, lr}
   18e14:	b	10ef4 <fflush@plt>
   18e18:	push	{r4, r5, lr}
   18e1c:	sub	sp, sp, #12
   18e20:	mov	r5, r0
   18e24:	bl	11068 <__errno_location@plt>
   18e28:	mov	r2, #0
   18e2c:	mov	r4, r0
   18e30:	ldr	r3, [r0]
   18e34:	str	r2, [r4]
   18e38:	mov	r0, r5
   18e3c:	str	r3, [sp]
   18e40:	str	r3, [sp, #4]
   18e44:	bl	10f0c <free@plt>
   18e48:	ldr	r3, [r4]
   18e4c:	add	r2, sp, #8
   18e50:	cmp	r3, #0
   18e54:	moveq	r3, #4
   18e58:	movne	r3, #0
   18e5c:	add	r3, r2, r3
   18e60:	ldr	r3, [r3, #-8]
   18e64:	str	r3, [r4]
   18e68:	add	sp, sp, #12
   18e6c:	pop	{r4, r5, pc}
   18e70:	push	{r4, r5, r6, r7, r8, lr}
   18e74:	sub	sp, sp, #8
   18e78:	ldmib	r0, {ip, lr}
   18e7c:	mov	r4, r0
   18e80:	ldr	r5, [sp, #32]
   18e84:	cmp	lr, ip
   18e88:	beq	18ea0 <__assert_fail@plt+0x7cf4>
   18e8c:	str	r5, [sp, #32]
   18e90:	mov	r0, r4
   18e94:	add	sp, sp, #8
   18e98:	pop	{r4, r5, r6, r7, r8, lr}
   18e9c:	b	110c8 <fseeko64@plt>
   18ea0:	ldr	lr, [r0, #20]
   18ea4:	ldr	ip, [r0, #16]
   18ea8:	cmp	lr, ip
   18eac:	bne	18e8c <__assert_fail@plt+0x7ce0>
   18eb0:	ldr	r8, [r0, #36]	; 0x24
   18eb4:	cmp	r8, #0
   18eb8:	bne	18e8c <__assert_fail@plt+0x7ce0>
   18ebc:	mov	r6, r2
   18ec0:	mov	r7, r3
   18ec4:	bl	110a4 <fileno@plt>
   18ec8:	mov	r2, r6
   18ecc:	mov	r3, r7
   18ed0:	str	r5, [sp]
   18ed4:	bl	10fa8 <lseek64@plt>
   18ed8:	mvn	r3, #0
   18edc:	mvn	r2, #0
   18ee0:	cmp	r1, r3
   18ee4:	cmpeq	r0, r2
   18ee8:	beq	18f08 <__assert_fail@plt+0x7d5c>
   18eec:	ldr	r3, [r4]
   18ef0:	strd	r0, [r4, #80]	; 0x50
   18ef4:	mov	r0, r8
   18ef8:	bic	r3, r3, #16
   18efc:	str	r3, [r4]
   18f00:	add	sp, sp, #8
   18f04:	pop	{r4, r5, r6, r7, r8, pc}
   18f08:	mvn	r0, #0
   18f0c:	b	18f00 <__assert_fail@plt+0x7d54>
   18f10:	push	{r4, lr}
   18f14:	mov	r0, #14
   18f18:	bl	110f8 <nl_langinfo@plt>
   18f1c:	cmp	r0, #0
   18f20:	beq	18f38 <__assert_fail@plt+0x7d8c>
   18f24:	ldrb	r2, [r0]
   18f28:	ldr	r3, [pc, #16]	; 18f40 <__assert_fail@plt+0x7d94>
   18f2c:	cmp	r2, #0
   18f30:	moveq	r0, r3
   18f34:	pop	{r4, pc}
   18f38:	ldr	r0, [pc]	; 18f40 <__assert_fail@plt+0x7d94>
   18f3c:	pop	{r4, pc}
   18f40:	andeq	sl, r1, r8, asr #14
   18f44:	push	{r4, r5, r6, r7, lr}
   18f48:	subs	r6, r0, #0
   18f4c:	sub	sp, sp, #12
   18f50:	addeq	r6, sp, #4
   18f54:	mov	r0, r6
   18f58:	mov	r5, r2
   18f5c:	mov	r7, r1
   18f60:	bl	10fcc <mbrtowc@plt>
   18f64:	cmp	r5, #0
   18f68:	cmnne	r0, #3
   18f6c:	mov	r4, r0
   18f70:	bls	18f8c <__assert_fail@plt+0x7de0>
   18f74:	mov	r0, #0
   18f78:	bl	18ff0 <__assert_fail@plt+0x7e44>
   18f7c:	cmp	r0, #0
   18f80:	moveq	r4, #1
   18f84:	ldrbeq	r3, [r7]
   18f88:	streq	r3, [r6]
   18f8c:	mov	r0, r4
   18f90:	add	sp, sp, #12
   18f94:	pop	{r4, r5, r6, r7, pc}
   18f98:	push	{r4, r5, r6, lr}
   18f9c:	subs	r4, r2, #0
   18fa0:	mov	r6, r0
   18fa4:	mov	r5, r1
   18fa8:	beq	18fd4 <__assert_fail@plt+0x7e28>
   18fac:	mov	r1, r4
   18fb0:	mvn	r0, #0
   18fb4:	bl	190e4 <__assert_fail@plt+0x7f38>
   18fb8:	cmp	r0, r5
   18fbc:	bcs	18fd4 <__assert_fail@plt+0x7e28>
   18fc0:	bl	11068 <__errno_location@plt>
   18fc4:	mov	r3, #12
   18fc8:	str	r3, [r0]
   18fcc:	mov	r0, #0
   18fd0:	pop	{r4, r5, r6, pc}
   18fd4:	mul	r1, r5, r4
   18fd8:	mov	r0, r6
   18fdc:	pop	{r4, r5, r6, lr}
   18fe0:	b	18944 <__assert_fail@plt+0x7798>
   18fe4:	mov	r2, #3
   18fe8:	mov	r1, #0
   18fec:	b	18bac <__assert_fail@plt+0x7a00>
   18ff0:	push	{lr}		; (str lr, [sp, #-4]!)
   18ff4:	sub	sp, sp, #268	; 0x10c
   18ff8:	add	r1, sp, #4
   18ffc:	ldr	r2, [pc, #60]	; 19040 <__assert_fail@plt+0x7e94>
   19000:	bl	1904c <__assert_fail@plt+0x7ea0>
   19004:	cmp	r0, #0
   19008:	movne	r0, #0
   1900c:	bne	19038 <__assert_fail@plt+0x7e8c>
   19010:	ldr	r1, [pc, #44]	; 19044 <__assert_fail@plt+0x7e98>
   19014:	add	r0, sp, #4
   19018:	bl	10ee8 <strcmp@plt>
   1901c:	cmp	r0, #0
   19020:	beq	19038 <__assert_fail@plt+0x7e8c>
   19024:	add	r0, sp, #4
   19028:	ldr	r1, [pc, #24]	; 19048 <__assert_fail@plt+0x7e9c>
   1902c:	bl	10ee8 <strcmp@plt>
   19030:	adds	r0, r0, #0
   19034:	movne	r0, #1
   19038:	add	sp, sp, #268	; 0x10c
   1903c:	pop	{pc}		; (ldr pc, [sp], #4)
   19040:	andeq	r0, r0, r1, lsl #2
   19044:	andeq	sl, r1, r0, asr r7
   19048:	andeq	sl, r1, r4, asr r7
   1904c:	push	{r4, r5, r6, lr}
   19050:	mov	r5, r1
   19054:	mov	r1, #0
   19058:	mov	r4, r2
   1905c:	bl	110e0 <setlocale@plt>
   19060:	subs	r6, r0, #0
   19064:	beq	190c0 <__assert_fail@plt+0x7f14>
   19068:	bl	11044 <strlen@plt>
   1906c:	cmp	r4, r0
   19070:	bhi	190a8 <__assert_fail@plt+0x7efc>
   19074:	cmp	r4, #0
   19078:	bne	19084 <__assert_fail@plt+0x7ed8>
   1907c:	mov	r0, #34	; 0x22
   19080:	pop	{r4, r5, r6, pc}
   19084:	sub	r4, r4, #1
   19088:	mov	r1, r6
   1908c:	mov	r2, r4
   19090:	mov	r0, r5
   19094:	bl	10f24 <memcpy@plt>
   19098:	mov	r3, #0
   1909c:	strb	r3, [r5, r4]
   190a0:	mov	r0, #34	; 0x22
   190a4:	pop	{r4, r5, r6, pc}
   190a8:	add	r2, r0, #1
   190ac:	mov	r1, r6
   190b0:	mov	r0, r5
   190b4:	bl	10f24 <memcpy@plt>
   190b8:	mov	r0, #0
   190bc:	pop	{r4, r5, r6, pc}
   190c0:	cmp	r4, #0
   190c4:	beq	190d4 <__assert_fail@plt+0x7f28>
   190c8:	strb	r6, [r5]
   190cc:	mov	r0, #22
   190d0:	pop	{r4, r5, r6, pc}
   190d4:	mov	r0, #22
   190d8:	pop	{r4, r5, r6, pc}
   190dc:	mov	r1, #0
   190e0:	b	110e0 <setlocale@plt>
   190e4:	subs	r2, r1, #1
   190e8:	bxeq	lr
   190ec:	bcc	192c4 <__assert_fail@plt+0x8118>
   190f0:	cmp	r0, r1
   190f4:	bls	192a8 <__assert_fail@plt+0x80fc>
   190f8:	tst	r1, r2
   190fc:	beq	192b4 <__assert_fail@plt+0x8108>
   19100:	clz	r3, r0
   19104:	clz	r2, r1
   19108:	sub	r3, r2, r3
   1910c:	rsbs	r3, r3, #31
   19110:	addne	r3, r3, r3, lsl #1
   19114:	mov	r2, #0
   19118:	addne	pc, pc, r3, lsl #2
   1911c:	nop			; (mov r0, r0)
   19120:	cmp	r0, r1, lsl #31
   19124:	adc	r2, r2, r2
   19128:	subcs	r0, r0, r1, lsl #31
   1912c:	cmp	r0, r1, lsl #30
   19130:	adc	r2, r2, r2
   19134:	subcs	r0, r0, r1, lsl #30
   19138:	cmp	r0, r1, lsl #29
   1913c:	adc	r2, r2, r2
   19140:	subcs	r0, r0, r1, lsl #29
   19144:	cmp	r0, r1, lsl #28
   19148:	adc	r2, r2, r2
   1914c:	subcs	r0, r0, r1, lsl #28
   19150:	cmp	r0, r1, lsl #27
   19154:	adc	r2, r2, r2
   19158:	subcs	r0, r0, r1, lsl #27
   1915c:	cmp	r0, r1, lsl #26
   19160:	adc	r2, r2, r2
   19164:	subcs	r0, r0, r1, lsl #26
   19168:	cmp	r0, r1, lsl #25
   1916c:	adc	r2, r2, r2
   19170:	subcs	r0, r0, r1, lsl #25
   19174:	cmp	r0, r1, lsl #24
   19178:	adc	r2, r2, r2
   1917c:	subcs	r0, r0, r1, lsl #24
   19180:	cmp	r0, r1, lsl #23
   19184:	adc	r2, r2, r2
   19188:	subcs	r0, r0, r1, lsl #23
   1918c:	cmp	r0, r1, lsl #22
   19190:	adc	r2, r2, r2
   19194:	subcs	r0, r0, r1, lsl #22
   19198:	cmp	r0, r1, lsl #21
   1919c:	adc	r2, r2, r2
   191a0:	subcs	r0, r0, r1, lsl #21
   191a4:	cmp	r0, r1, lsl #20
   191a8:	adc	r2, r2, r2
   191ac:	subcs	r0, r0, r1, lsl #20
   191b0:	cmp	r0, r1, lsl #19
   191b4:	adc	r2, r2, r2
   191b8:	subcs	r0, r0, r1, lsl #19
   191bc:	cmp	r0, r1, lsl #18
   191c0:	adc	r2, r2, r2
   191c4:	subcs	r0, r0, r1, lsl #18
   191c8:	cmp	r0, r1, lsl #17
   191cc:	adc	r2, r2, r2
   191d0:	subcs	r0, r0, r1, lsl #17
   191d4:	cmp	r0, r1, lsl #16
   191d8:	adc	r2, r2, r2
   191dc:	subcs	r0, r0, r1, lsl #16
   191e0:	cmp	r0, r1, lsl #15
   191e4:	adc	r2, r2, r2
   191e8:	subcs	r0, r0, r1, lsl #15
   191ec:	cmp	r0, r1, lsl #14
   191f0:	adc	r2, r2, r2
   191f4:	subcs	r0, r0, r1, lsl #14
   191f8:	cmp	r0, r1, lsl #13
   191fc:	adc	r2, r2, r2
   19200:	subcs	r0, r0, r1, lsl #13
   19204:	cmp	r0, r1, lsl #12
   19208:	adc	r2, r2, r2
   1920c:	subcs	r0, r0, r1, lsl #12
   19210:	cmp	r0, r1, lsl #11
   19214:	adc	r2, r2, r2
   19218:	subcs	r0, r0, r1, lsl #11
   1921c:	cmp	r0, r1, lsl #10
   19220:	adc	r2, r2, r2
   19224:	subcs	r0, r0, r1, lsl #10
   19228:	cmp	r0, r1, lsl #9
   1922c:	adc	r2, r2, r2
   19230:	subcs	r0, r0, r1, lsl #9
   19234:	cmp	r0, r1, lsl #8
   19238:	adc	r2, r2, r2
   1923c:	subcs	r0, r0, r1, lsl #8
   19240:	cmp	r0, r1, lsl #7
   19244:	adc	r2, r2, r2
   19248:	subcs	r0, r0, r1, lsl #7
   1924c:	cmp	r0, r1, lsl #6
   19250:	adc	r2, r2, r2
   19254:	subcs	r0, r0, r1, lsl #6
   19258:	cmp	r0, r1, lsl #5
   1925c:	adc	r2, r2, r2
   19260:	subcs	r0, r0, r1, lsl #5
   19264:	cmp	r0, r1, lsl #4
   19268:	adc	r2, r2, r2
   1926c:	subcs	r0, r0, r1, lsl #4
   19270:	cmp	r0, r1, lsl #3
   19274:	adc	r2, r2, r2
   19278:	subcs	r0, r0, r1, lsl #3
   1927c:	cmp	r0, r1, lsl #2
   19280:	adc	r2, r2, r2
   19284:	subcs	r0, r0, r1, lsl #2
   19288:	cmp	r0, r1, lsl #1
   1928c:	adc	r2, r2, r2
   19290:	subcs	r0, r0, r1, lsl #1
   19294:	cmp	r0, r1
   19298:	adc	r2, r2, r2
   1929c:	subcs	r0, r0, r1
   192a0:	mov	r0, r2
   192a4:	bx	lr
   192a8:	moveq	r0, #1
   192ac:	movne	r0, #0
   192b0:	bx	lr
   192b4:	clz	r2, r1
   192b8:	rsb	r2, r2, #31
   192bc:	lsr	r0, r0, r2
   192c0:	bx	lr
   192c4:	cmp	r0, #0
   192c8:	mvnne	r0, #0
   192cc:	b	1956c <__assert_fail@plt+0x83c0>
   192d0:	cmp	r1, #0
   192d4:	beq	192c4 <__assert_fail@plt+0x8118>
   192d8:	push	{r0, r1, lr}
   192dc:	bl	190e4 <__assert_fail@plt+0x7f38>
   192e0:	pop	{r1, r2, lr}
   192e4:	mul	r3, r2, r0
   192e8:	sub	r1, r1, r3
   192ec:	bx	lr
   192f0:	cmp	r1, #0
   192f4:	beq	19500 <__assert_fail@plt+0x8354>
   192f8:	eor	ip, r0, r1
   192fc:	rsbmi	r1, r1, #0
   19300:	subs	r2, r1, #1
   19304:	beq	194cc <__assert_fail@plt+0x8320>
   19308:	movs	r3, r0
   1930c:	rsbmi	r3, r0, #0
   19310:	cmp	r3, r1
   19314:	bls	194d8 <__assert_fail@plt+0x832c>
   19318:	tst	r1, r2
   1931c:	beq	194e8 <__assert_fail@plt+0x833c>
   19320:	clz	r2, r3
   19324:	clz	r0, r1
   19328:	sub	r2, r0, r2
   1932c:	rsbs	r2, r2, #31
   19330:	addne	r2, r2, r2, lsl #1
   19334:	mov	r0, #0
   19338:	addne	pc, pc, r2, lsl #2
   1933c:	nop			; (mov r0, r0)
   19340:	cmp	r3, r1, lsl #31
   19344:	adc	r0, r0, r0
   19348:	subcs	r3, r3, r1, lsl #31
   1934c:	cmp	r3, r1, lsl #30
   19350:	adc	r0, r0, r0
   19354:	subcs	r3, r3, r1, lsl #30
   19358:	cmp	r3, r1, lsl #29
   1935c:	adc	r0, r0, r0
   19360:	subcs	r3, r3, r1, lsl #29
   19364:	cmp	r3, r1, lsl #28
   19368:	adc	r0, r0, r0
   1936c:	subcs	r3, r3, r1, lsl #28
   19370:	cmp	r3, r1, lsl #27
   19374:	adc	r0, r0, r0
   19378:	subcs	r3, r3, r1, lsl #27
   1937c:	cmp	r3, r1, lsl #26
   19380:	adc	r0, r0, r0
   19384:	subcs	r3, r3, r1, lsl #26
   19388:	cmp	r3, r1, lsl #25
   1938c:	adc	r0, r0, r0
   19390:	subcs	r3, r3, r1, lsl #25
   19394:	cmp	r3, r1, lsl #24
   19398:	adc	r0, r0, r0
   1939c:	subcs	r3, r3, r1, lsl #24
   193a0:	cmp	r3, r1, lsl #23
   193a4:	adc	r0, r0, r0
   193a8:	subcs	r3, r3, r1, lsl #23
   193ac:	cmp	r3, r1, lsl #22
   193b0:	adc	r0, r0, r0
   193b4:	subcs	r3, r3, r1, lsl #22
   193b8:	cmp	r3, r1, lsl #21
   193bc:	adc	r0, r0, r0
   193c0:	subcs	r3, r3, r1, lsl #21
   193c4:	cmp	r3, r1, lsl #20
   193c8:	adc	r0, r0, r0
   193cc:	subcs	r3, r3, r1, lsl #20
   193d0:	cmp	r3, r1, lsl #19
   193d4:	adc	r0, r0, r0
   193d8:	subcs	r3, r3, r1, lsl #19
   193dc:	cmp	r3, r1, lsl #18
   193e0:	adc	r0, r0, r0
   193e4:	subcs	r3, r3, r1, lsl #18
   193e8:	cmp	r3, r1, lsl #17
   193ec:	adc	r0, r0, r0
   193f0:	subcs	r3, r3, r1, lsl #17
   193f4:	cmp	r3, r1, lsl #16
   193f8:	adc	r0, r0, r0
   193fc:	subcs	r3, r3, r1, lsl #16
   19400:	cmp	r3, r1, lsl #15
   19404:	adc	r0, r0, r0
   19408:	subcs	r3, r3, r1, lsl #15
   1940c:	cmp	r3, r1, lsl #14
   19410:	adc	r0, r0, r0
   19414:	subcs	r3, r3, r1, lsl #14
   19418:	cmp	r3, r1, lsl #13
   1941c:	adc	r0, r0, r0
   19420:	subcs	r3, r3, r1, lsl #13
   19424:	cmp	r3, r1, lsl #12
   19428:	adc	r0, r0, r0
   1942c:	subcs	r3, r3, r1, lsl #12
   19430:	cmp	r3, r1, lsl #11
   19434:	adc	r0, r0, r0
   19438:	subcs	r3, r3, r1, lsl #11
   1943c:	cmp	r3, r1, lsl #10
   19440:	adc	r0, r0, r0
   19444:	subcs	r3, r3, r1, lsl #10
   19448:	cmp	r3, r1, lsl #9
   1944c:	adc	r0, r0, r0
   19450:	subcs	r3, r3, r1, lsl #9
   19454:	cmp	r3, r1, lsl #8
   19458:	adc	r0, r0, r0
   1945c:	subcs	r3, r3, r1, lsl #8
   19460:	cmp	r3, r1, lsl #7
   19464:	adc	r0, r0, r0
   19468:	subcs	r3, r3, r1, lsl #7
   1946c:	cmp	r3, r1, lsl #6
   19470:	adc	r0, r0, r0
   19474:	subcs	r3, r3, r1, lsl #6
   19478:	cmp	r3, r1, lsl #5
   1947c:	adc	r0, r0, r0
   19480:	subcs	r3, r3, r1, lsl #5
   19484:	cmp	r3, r1, lsl #4
   19488:	adc	r0, r0, r0
   1948c:	subcs	r3, r3, r1, lsl #4
   19490:	cmp	r3, r1, lsl #3
   19494:	adc	r0, r0, r0
   19498:	subcs	r3, r3, r1, lsl #3
   1949c:	cmp	r3, r1, lsl #2
   194a0:	adc	r0, r0, r0
   194a4:	subcs	r3, r3, r1, lsl #2
   194a8:	cmp	r3, r1, lsl #1
   194ac:	adc	r0, r0, r0
   194b0:	subcs	r3, r3, r1, lsl #1
   194b4:	cmp	r3, r1
   194b8:	adc	r0, r0, r0
   194bc:	subcs	r3, r3, r1
   194c0:	cmp	ip, #0
   194c4:	rsbmi	r0, r0, #0
   194c8:	bx	lr
   194cc:	teq	ip, r0
   194d0:	rsbmi	r0, r0, #0
   194d4:	bx	lr
   194d8:	movcc	r0, #0
   194dc:	asreq	r0, ip, #31
   194e0:	orreq	r0, r0, #1
   194e4:	bx	lr
   194e8:	clz	r2, r1
   194ec:	rsb	r2, r2, #31
   194f0:	cmp	ip, #0
   194f4:	lsr	r0, r3, r2
   194f8:	rsbmi	r0, r0, #0
   194fc:	bx	lr
   19500:	cmp	r0, #0
   19504:	mvngt	r0, #-2147483648	; 0x80000000
   19508:	movlt	r0, #-2147483648	; 0x80000000
   1950c:	b	1956c <__assert_fail@plt+0x83c0>
   19510:	cmp	r1, #0
   19514:	beq	19500 <__assert_fail@plt+0x8354>
   19518:	push	{r0, r1, lr}
   1951c:	bl	192f8 <__assert_fail@plt+0x814c>
   19520:	pop	{r1, r2, lr}
   19524:	mul	r3, r2, r0
   19528:	sub	r1, r1, r3
   1952c:	bx	lr
   19530:	cmp	r3, #0
   19534:	cmpeq	r2, #0
   19538:	bne	19550 <__assert_fail@plt+0x83a4>
   1953c:	cmp	r1, #0
   19540:	cmpeq	r0, #0
   19544:	mvnne	r1, #0
   19548:	mvnne	r0, #0
   1954c:	b	1956c <__assert_fail@plt+0x83c0>
   19550:	sub	sp, sp, #8
   19554:	push	{sp, lr}
   19558:	bl	1957c <__assert_fail@plt+0x83d0>
   1955c:	ldr	lr, [sp, #4]
   19560:	add	sp, sp, #8
   19564:	pop	{r2, r3}
   19568:	bx	lr
   1956c:	push	{r1, lr}
   19570:	mov	r0, #8
   19574:	bl	10edc <raise@plt>
   19578:	pop	{r1, pc}
   1957c:	cmp	r1, r3
   19580:	push	{r4, r5, r6, r7, r8, r9, lr}
   19584:	cmpeq	r0, r2
   19588:	mov	r4, r0
   1958c:	mov	r5, r1
   19590:	ldr	r9, [sp, #28]
   19594:	movcc	r0, #0
   19598:	movcc	r1, #0
   1959c:	bcc	19694 <__assert_fail@plt+0x84e8>
   195a0:	cmp	r3, #0
   195a4:	clzeq	ip, r2
   195a8:	clzne	ip, r3
   195ac:	addeq	ip, ip, #32
   195b0:	cmp	r5, #0
   195b4:	clzeq	r1, r4
   195b8:	addeq	r1, r1, #32
   195bc:	clzne	r1, r5
   195c0:	sub	ip, ip, r1
   195c4:	sub	lr, ip, #32
   195c8:	lsl	r7, r3, ip
   195cc:	rsb	r8, ip, #32
   195d0:	orr	r7, r7, r2, lsl lr
   195d4:	orr	r7, r7, r2, lsr r8
   195d8:	lsl	r6, r2, ip
   195dc:	cmp	r5, r7
   195e0:	cmpeq	r4, r6
   195e4:	movcc	r0, #0
   195e8:	movcc	r1, #0
   195ec:	bcc	19608 <__assert_fail@plt+0x845c>
   195f0:	mov	r3, #1
   195f4:	subs	r4, r4, r6
   195f8:	lsl	r1, r3, lr
   195fc:	lsl	r0, r3, ip
   19600:	orr	r1, r1, r3, lsr r8
   19604:	sbc	r5, r5, r7
   19608:	cmp	ip, #0
   1960c:	beq	19694 <__assert_fail@plt+0x84e8>
   19610:	lsrs	r3, r7, #1
   19614:	rrx	r2, r6
   19618:	mov	r6, ip
   1961c:	b	19640 <__assert_fail@plt+0x8494>
   19620:	subs	r4, r4, r2
   19624:	sbc	r5, r5, r3
   19628:	adds	r4, r4, r4
   1962c:	adc	r5, r5, r5
   19630:	adds	r4, r4, #1
   19634:	adc	r5, r5, #0
   19638:	subs	r6, r6, #1
   1963c:	beq	1965c <__assert_fail@plt+0x84b0>
   19640:	cmp	r5, r3
   19644:	cmpeq	r4, r2
   19648:	bcs	19620 <__assert_fail@plt+0x8474>
   1964c:	adds	r4, r4, r4
   19650:	adc	r5, r5, r5
   19654:	subs	r6, r6, #1
   19658:	bne	19640 <__assert_fail@plt+0x8494>
   1965c:	lsr	r6, r4, ip
   19660:	lsr	r7, r5, ip
   19664:	orr	r6, r6, r5, lsl r8
   19668:	adds	r2, r0, r4
   1966c:	orr	r6, r6, r5, lsr lr
   19670:	adc	r3, r1, r5
   19674:	lsl	r1, r7, ip
   19678:	orr	r1, r1, r6, lsl lr
   1967c:	lsl	r0, r6, ip
   19680:	orr	r1, r1, r6, lsr r8
   19684:	subs	r0, r2, r0
   19688:	mov	r4, r6
   1968c:	mov	r5, r7
   19690:	sbc	r1, r3, r1
   19694:	cmp	r9, #0
   19698:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1969c:	strd	r4, [r9]
   196a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   196a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   196a8:	mov	r7, r0
   196ac:	ldr	r6, [pc, #72]	; 196fc <__assert_fail@plt+0x8550>
   196b0:	ldr	r5, [pc, #72]	; 19700 <__assert_fail@plt+0x8554>
   196b4:	add	r6, pc, r6
   196b8:	add	r5, pc, r5
   196bc:	sub	r6, r6, r5
   196c0:	mov	r8, r1
   196c4:	mov	r9, r2
   196c8:	bl	10e98 <fstatfs64@plt-0x20>
   196cc:	asrs	r6, r6, #2
   196d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   196d4:	mov	r4, #0
   196d8:	add	r4, r4, #1
   196dc:	ldr	r3, [r5], #4
   196e0:	mov	r2, r9
   196e4:	mov	r1, r8
   196e8:	mov	r0, r7
   196ec:	blx	r3
   196f0:	cmp	r6, r4
   196f4:	bne	196d8 <__assert_fail@plt+0x852c>
   196f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196fc:	andeq	r1, r1, r4, asr r8
   19700:	andeq	r1, r1, ip, asr #16
   19704:	bx	lr
   19708:	ldr	r3, [pc, #12]	; 1971c <__assert_fail@plt+0x8570>
   1970c:	mov	r1, #0
   19710:	add	r3, pc, r3
   19714:	ldr	r2, [r3]
   19718:	b	11080 <__cxa_atexit@plt>
   1971c:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00019720 <.fini>:
   19720:	push	{r3, lr}
   19724:	pop	{r3, pc}
