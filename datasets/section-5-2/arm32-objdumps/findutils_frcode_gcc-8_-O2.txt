
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010b1c <.init>:
   10b1c:	push	{r3, lr}
   10b20:	bl	112d0 <__assert_fail@plt+0x584>
   10b24:	pop	{r3, pc}

Disassembly of section .plt:

00010b28 <calloc@plt-0x14>:
   10b28:	push	{lr}		; (str lr, [sp, #-4]!)
   10b2c:	ldr	lr, [pc, #4]	; 10b38 <calloc@plt-0x4>
   10b30:	add	lr, pc, lr
   10b34:	ldr	pc, [lr, #8]!
   10b38:	andeq	r5, r1, r8, asr #9

00010b3c <calloc@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #86016	; 0x15000
   10b44:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b48 <strcmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #86016	; 0x15000
   10b50:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b54 <strtol@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #86016	; 0x15000
   10b5c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b60 <printf@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #86016	; 0x15000
   10b68:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b6c <fflush@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #86016	; 0x15000
   10b74:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b78 <free@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #86016	; 0x15000
   10b80:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b84 <ferror@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #86016	; 0x15000
   10b8c:	ldr	pc, [ip, #1176]!	; 0x498

00010b90 <_exit@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #86016	; 0x15000
   10b98:	ldr	pc, [ip, #1168]!	; 0x490

00010b9c <memcpy@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #86016	; 0x15000
   10ba4:	ldr	pc, [ip, #1160]!	; 0x488

00010ba8 <mbsinit@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #86016	; 0x15000
   10bb0:	ldr	pc, [ip, #1152]!	; 0x480

00010bb4 <memcmp@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #86016	; 0x15000
   10bbc:	ldr	pc, [ip, #1144]!	; 0x478

00010bc0 <dcgettext@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #86016	; 0x15000
   10bc8:	ldr	pc, [ip, #1136]!	; 0x470

00010bcc <realloc@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #86016	; 0x15000
   10bd4:	ldr	pc, [ip, #1128]!	; 0x468

00010bd8 <iswprint@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #86016	; 0x15000
   10be0:	ldr	pc, [ip, #1120]!	; 0x460

00010be4 <fwrite@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1112]!	; 0x458

00010bf0 <lseek64@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1104]!	; 0x450

00010bfc <__ctype_get_mb_cur_max@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1096]!	; 0x448

00010c08 <__fpending@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1088]!	; 0x440

00010c14 <mbrtowc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1080]!	; 0x438

00010c20 <error@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1072]!	; 0x430

00010c2c <malloc@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1064]!	; 0x428

00010c38 <__libc_start_main@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1056]!	; 0x420

00010c44 <__freading@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #1048]!	; 0x418

00010c50 <__gmon_start__@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #1040]!	; 0x410

00010c5c <getopt_long@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #1032]!	; 0x408

00010c68 <__ctype_b_loc@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #1024]!	; 0x400

00010c74 <exit@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c80 <strlen@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c8c <fprintf@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c98 <__errno_location@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca4 <__cxa_atexit@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb0 <memset@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cbc <fileno@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc8 <fclose@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd4 <fseeko64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce0 <setlocale@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cec <strrchr@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #936]!	; 0x3a8

00010cf8 <nl_langinfo@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #928]!	; 0x3a0

00010d04 <fputc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #920]!	; 0x398

00010d10 <putc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #912]!	; 0x390

00010d1c <getdelim@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #904]!	; 0x388

00010d28 <fputs@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #896]!	; 0x380

00010d34 <strncmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #888]!	; 0x378

00010d40 <abort@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #880]!	; 0x370

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #872]!	; 0x368

Disassembly of section .text:

00010d58 <.text>:
   10d58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d5c:	strd	r6, [sp, #8]
   10d60:	mov	r7, r1
   10d64:	strd	r8, [sp, #16]
   10d68:	strd	sl, [sp, #24]
   10d6c:	str	lr, [sp, #32]
   10d70:	sub	sp, sp, #44	; 0x2c
   10d74:	str	r0, [sp, #12]
   10d78:	ldr	r0, [r1]
   10d7c:	cmp	r0, #0
   10d80:	movweq	r0, #18972	; 0x4a1c
   10d84:	movteq	r0, #1
   10d88:	bl	11698 <__assert_fail@plt+0x94c>
   10d8c:	movw	r0, #5548	; 0x15ac
   10d90:	movt	r0, #1
   10d94:	bl	1493c <__assert_fail@plt+0x3bf0>
   10d98:	subs	r6, r0, #0
   10d9c:	bne	1124c <__assert_fail@plt+0x500>
   10da0:	movw	r4, #1026	; 0x402
   10da4:	str	r6, [sp, #16]
   10da8:	movw	r5, #18784	; 0x4960
   10dac:	movt	r5, #1
   10db0:	mov	r0, r4
   10db4:	str	r4, [sp, #32]
   10db8:	movw	r8, #24888	; 0x6138
   10dbc:	movt	r8, #2
   10dc0:	bl	13ee8 <__assert_fail@plt+0x319c>
   10dc4:	mov	fp, r6
   10dc8:	mov	r9, #10
   10dcc:	str	r0, [sp, #28]
   10dd0:	mov	r0, r4
   10dd4:	movw	r4, #19216	; 0x4b10
   10dd8:	movt	r4, #1
   10ddc:	bl	13ee8 <__assert_fail@plt+0x319c>
   10de0:	strb	r6, [r0]
   10de4:	str	r0, [sp, #20]
   10de8:	mov	r6, #0
   10dec:	b	10dfc <__assert_fail@plt+0xb0>
   10df0:	cmp	r0, #48	; 0x30
   10df4:	mov	r9, #0
   10df8:	bne	11200 <__assert_fail@plt+0x4b4>
   10dfc:	mov	r3, r5
   10e00:	mov	r2, r4
   10e04:	str	r6, [sp]
   10e08:	mov	r1, r7
   10e0c:	ldr	r0, [sp, #12]
   10e10:	bl	10c5c <getopt_long@plt>
   10e14:	cmn	r0, #1
   10e18:	beq	10f10 <__assert_fail@plt+0x1c4>
   10e1c:	cmp	r0, #83	; 0x53
   10e20:	beq	10e64 <__assert_fail@plt+0x118>
   10e24:	ble	10df0 <__assert_fail@plt+0xa4>
   10e28:	cmp	r0, #104	; 0x68
   10e2c:	beq	11284 <__assert_fail@plt+0x538>
   10e30:	cmp	r0, #118	; 0x76
   10e34:	bne	11200 <__assert_fail@plt+0x4b4>
   10e38:	movw	r0, #18972	; 0x4a1c
   10e3c:	movt	r0, #1
   10e40:	bl	11450 <__assert_fail@plt+0x704>
   10e44:	mov	r0, #0
   10e48:	add	sp, sp, #44	; 0x2c
   10e4c:	ldrd	r4, [sp]
   10e50:	ldrd	r6, [sp, #8]
   10e54:	ldrd	r8, [sp, #16]
   10e58:	ldrd	sl, [sp, #24]
   10e5c:	add	sp, sp, #32
   10e60:	pop	{pc}		; (ldr pc, [sp], #4)
   10e64:	bl	10c98 <__errno_location@plt>
   10e68:	ldr	fp, [r8]
   10e6c:	mov	sl, r0
   10e70:	mov	r2, #10
   10e74:	add	r1, sp, #36	; 0x24
   10e78:	str	r6, [sl]
   10e7c:	mov	r0, fp
   10e80:	bl	10b54 <strtol@plt>
   10e84:	subs	r3, r0, #0
   10e88:	str	r3, [sp, #16]
   10e8c:	beq	10eec <__assert_fail@plt+0x1a0>
   10e90:	ldr	r3, [sp, #16]
   10e94:	sub	r2, r3, #-2147483647	; 0x80000001
   10e98:	cmn	r2, #3
   10e9c:	bls	11208 <__assert_fail@plt+0x4bc>
   10ea0:	ldr	r3, [sl]
   10ea4:	cmp	r3, #0
   10ea8:	bne	1125c <__assert_fail@plt+0x510>
   10eac:	ldr	r3, [sp, #36]	; 0x24
   10eb0:	ldrb	r3, [r3]
   10eb4:	cmp	r3, #0
   10eb8:	beq	11224 <__assert_fail@plt+0x4d8>
   10ebc:	mov	r2, #5
   10ec0:	movw	r1, #19128	; 0x4ab8
   10ec4:	movt	r1, #1
   10ec8:	mov	r0, #0
   10ecc:	bl	10bc0 <dcgettext@plt>
   10ed0:	ldr	ip, [sp, #36]	; 0x24
   10ed4:	mov	r2, r0
   10ed8:	mov	r3, fp
   10edc:	mov	r1, #0
   10ee0:	mov	r0, #1
   10ee4:	str	ip, [sp]
   10ee8:	bl	10c20 <error@plt>
   10eec:	ldr	r2, [r8]
   10ef0:	ldr	r3, [sp, #36]	; 0x24
   10ef4:	cmp	r3, r2
   10ef8:	beq	111bc <__assert_fail@plt+0x470>
   10efc:	ldrb	r3, [r3]
   10f00:	cmp	r3, #0
   10f04:	bne	10ebc <__assert_fail@plt+0x170>
   10f08:	mov	fp, #1
   10f0c:	b	10de8 <__assert_fail@plt+0x9c>
   10f10:	movw	r3, #24864	; 0x6120
   10f14:	movt	r3, #2
   10f18:	ldr	r2, [sp, #12]
   10f1c:	ldr	r3, [r3]
   10f20:	ldr	sl, [sp, #20]
   10f24:	cmp	r3, r2
   10f28:	bne	111dc <__assert_fail@plt+0x490>
   10f2c:	movw	r5, #24884	; 0x6134
   10f30:	movt	r5, #2
   10f34:	cmp	fp, #0
   10f38:	ldr	r3, [r5]
   10f3c:	beq	110b0 <__assert_fail@plt+0x364>
   10f40:	ldr	r2, [sp, #16]
   10f44:	mov	r1, r3
   10f48:	cmp	r2, #0
   10f4c:	movne	r0, #49	; 0x31
   10f50:	moveq	r0, #48	; 0x30
   10f54:	bl	10d04 <fputc@plt>
   10f58:	mov	r0, #0
   10f5c:	ldr	r1, [r5]
   10f60:	bl	10d04 <fputc@plt>
   10f64:	movw	r3, #24880	; 0x6130
   10f68:	movt	r3, #2
   10f6c:	mov	r6, #0
   10f70:	movw	r7, #1026	; 0x402
   10f74:	str	r3, [sp, #12]
   10f78:	movw	r3, #19284	; 0x4b54
   10f7c:	movt	r3, #1
   10f80:	str	r3, [sp, #16]
   10f84:	ldr	r3, [sp, #12]
   10f88:	mov	r2, r9
   10f8c:	add	r1, sp, #32
   10f90:	add	r0, sp, #28
   10f94:	ldr	r3, [r3]
   10f98:	bl	10d1c <getdelim@plt>
   10f9c:	cmp	r0, #0
   10fa0:	ble	11170 <__assert_fail@plt+0x424>
   10fa4:	ldr	r3, [sp, #28]
   10fa8:	sub	r0, r0, #1
   10fac:	ldrb	r2, [r3, r0]
   10fb0:	cmp	r2, r9
   10fb4:	moveq	r2, #0
   10fb8:	strbeq	r2, [r3, r0]
   10fbc:	beq	10fe0 <__assert_fail@plt+0x294>
   10fc0:	mov	r2, #5
   10fc4:	mov	r0, #0
   10fc8:	ldr	r1, [sp, #16]
   10fcc:	bl	10bc0 <dcgettext@plt>
   10fd0:	mov	r1, #0
   10fd4:	mov	r2, r0
   10fd8:	mov	r0, r1
   10fdc:	bl	10c20 <error@plt>
   10fe0:	ldr	r0, [sp, #28]
   10fe4:	ldrb	r2, [sl]
   10fe8:	ldrb	r1, [r0]
   10fec:	cmp	r2, #0
   10ff0:	sub	r3, r1, r2
   10ff4:	clz	r3, r3
   10ff8:	lsr	r3, r3, #5
   10ffc:	moveq	r3, #0
   11000:	cmp	r3, #0
   11004:	beq	11168 <__assert_fail@plt+0x41c>
   11008:	mov	r1, r0
   1100c:	sub	ip, sl, #-2147483646	; 0x80000002
   11010:	mov	r4, sl
   11014:	b	11020 <__assert_fail@plt+0x2d4>
   11018:	cmp	r4, ip
   1101c:	beq	11044 <__assert_fail@plt+0x2f8>
   11020:	ldrb	r2, [r4, #1]!
   11024:	ldrb	lr, [r1, #1]!
   11028:	cmp	r2, #0
   1102c:	sub	r3, lr, r2
   11030:	clz	r3, r3
   11034:	lsr	r3, r3, #5
   11038:	moveq	r3, #0
   1103c:	cmp	r3, #0
   11040:	bne	11018 <__assert_fail@plt+0x2cc>
   11044:	sub	r4, r4, sl
   11048:	ldr	r1, [r5]
   1104c:	sub	r8, r4, r6
   11050:	add	r2, r8, #32768	; 0x8000
   11054:	cmp	r2, #65536	; 0x10000
   11058:	rsbcs	r8, r6, #0
   1105c:	movcs	r4, #0
   11060:	cmp	fp, #0
   11064:	bne	1110c <__assert_fail@plt+0x3c0>
   11068:	add	r2, r8, #127	; 0x7f
   1106c:	cmp	r2, #254	; 0xfe
   11070:	bls	110f4 <__assert_fail@plt+0x3a8>
   11074:	mov	r0, #128	; 0x80
   11078:	bl	10d10 <putc@plt>
   1107c:	cmn	r0, #1
   11080:	beq	110ac <__assert_fail@plt+0x360>
   11084:	cmp	r8, #32768	; 0x8000
   11088:	ldr	r6, [r5]
   1108c:	bge	111a0 <__assert_fail@plt+0x454>
   11090:	cmn	r8, #32768	; 0x8000
   11094:	blt	11184 <__assert_fail@plt+0x438>
   11098:	mov	r1, r6
   1109c:	asr	r0, r8, #8
   110a0:	bl	10d10 <putc@plt>
   110a4:	cmn	r0, #1
   110a8:	bne	11150 <__assert_fail@plt+0x404>
   110ac:	bl	11384 <__assert_fail@plt+0x638>
   110b0:	mov	r2, #10
   110b4:	ldr	r0, [pc, #464]	; 1128c <__assert_fail@plt+0x540>
   110b8:	mov	r1, #1
   110bc:	bl	10be4 <fwrite@plt>
   110c0:	cmp	r0, #10
   110c4:	beq	10f64 <__assert_fail@plt+0x218>
   110c8:	bl	10c98 <__errno_location@plt>
   110cc:	movw	r1, #19248	; 0x4b30
   110d0:	movt	r1, #1
   110d4:	ldr	r4, [r0]
   110d8:	mov	r2, #5
   110dc:	mov	r0, #0
   110e0:	bl	10bc0 <dcgettext@plt>
   110e4:	mov	r2, r0
   110e8:	mov	r0, #1
   110ec:	mov	r1, r4
   110f0:	bl	10c20 <error@plt>
   110f4:	mov	r0, r8
   110f8:	bl	10d10 <putc@plt>
   110fc:	cmn	r0, #1
   11100:	beq	110ac <__assert_fail@plt+0x360>
   11104:	ldr	r1, [r5]
   11108:	ldr	r0, [sp, #28]
   1110c:	add	r0, r0, r4
   11110:	bl	10d28 <fputs@plt>
   11114:	cmn	r0, #1
   11118:	beq	110ac <__assert_fail@plt+0x360>
   1111c:	mov	r0, #0
   11120:	ldr	r1, [r5]
   11124:	bl	10d10 <putc@plt>
   11128:	cmn	r0, #1
   1112c:	beq	110ac <__assert_fail@plt+0x360>
   11130:	ldrd	r2, [sp, #28]
   11134:	mov	r6, r4
   11138:	mov	fp, #0
   1113c:	str	sl, [sp, #28]
   11140:	str	r7, [sp, #32]
   11144:	mov	sl, r2
   11148:	mov	r7, r3
   1114c:	b	10f84 <__assert_fail@plt+0x238>
   11150:	mov	r1, r6
   11154:	mov	r0, r8
   11158:	bl	10d10 <putc@plt>
   1115c:	cmn	r0, #1
   11160:	bne	11104 <__assert_fail@plt+0x3b8>
   11164:	b	110ac <__assert_fail@plt+0x360>
   11168:	mov	r4, sl
   1116c:	b	11044 <__assert_fail@plt+0x2f8>
   11170:	ldr	r0, [sp, #28]
   11174:	bl	14478 <__assert_fail@plt+0x372c>
   11178:	mov	r0, sl
   1117c:	bl	14478 <__assert_fail@plt+0x372c>
   11180:	b	10e44 <__assert_fail@plt+0xf8>
   11184:	movw	r1, #19332	; 0x4b84
   11188:	movt	r1, #1
   1118c:	ldr	r3, [pc, #252]	; 11290 <__assert_fail@plt+0x544>
   11190:	movw	r0, #19360	; 0x4ba0
   11194:	movt	r0, #1
   11198:	mov	r2, #105	; 0x69
   1119c:	bl	10d4c <__assert_fail@plt>
   111a0:	movw	r1, #19332	; 0x4b84
   111a4:	movt	r1, #1
   111a8:	ldr	r3, [pc, #224]	; 11290 <__assert_fail@plt+0x544>
   111ac:	movw	r0, #19344	; 0x4b90
   111b0:	movt	r0, #1
   111b4:	mov	r2, #104	; 0x68
   111b8:	bl	10d4c <__assert_fail@plt>
   111bc:	mov	r2, #5
   111c0:	movw	r1, #19016	; 0x4a48
   111c4:	movt	r1, #1
   111c8:	bl	10bc0 <dcgettext@plt>
   111cc:	mov	r2, r0
   111d0:	mov	r0, #1
   111d4:	ldr	r1, [sp, #16]
   111d8:	bl	10c20 <error@plt>
   111dc:	mov	r2, #5
   111e0:	movw	r1, #19224	; 0x4b18
   111e4:	movt	r1, #1
   111e8:	mov	r0, #0
   111ec:	bl	10bc0 <dcgettext@plt>
   111f0:	mov	r1, #0
   111f4:	mov	r2, r0
   111f8:	mov	r0, r1
   111fc:	bl	10c20 <error@plt>
   11200:	mov	r0, #1
   11204:	bl	113b8 <__assert_fail@plt+0x66c>
   11208:	ldr	r3, [sp, #36]	; 0x24
   1120c:	ldrb	r3, [r3]
   11210:	cmp	r3, #0
   11214:	bne	10ebc <__assert_fail@plt+0x170>
   11218:	ldr	r3, [sp, #16]
   1121c:	cmp	r3, #1
   11220:	beq	10f08 <__assert_fail@plt+0x1bc>
   11224:	mov	r2, #5
   11228:	movw	r1, #19172	; 0x4ae4
   1122c:	movt	r1, #1
   11230:	mov	r0, #0
   11234:	bl	10bc0 <dcgettext@plt>
   11238:	mov	r2, r0
   1123c:	mov	r1, #0
   11240:	ldr	r3, [sp, #16]
   11244:	mov	r0, #1
   11248:	bl	10c20 <error@plt>
   1124c:	bl	10c98 <__errno_location@plt>
   11250:	movw	r1, #18980	; 0x4a24
   11254:	movt	r1, #1
   11258:	b	110d4 <__assert_fail@plt+0x388>
   1125c:	mov	r2, #5
   11260:	movw	r1, #19076	; 0x4a84
   11264:	movt	r1, #1
   11268:	mov	r0, #0
   1126c:	bl	10bc0 <dcgettext@plt>
   11270:	mov	r2, r0
   11274:	mov	r3, fp
   11278:	mov	r1, #0
   1127c:	mov	r0, #1
   11280:	bl	10c20 <error@plt>
   11284:	mov	r0, #0
   11288:	bl	113b8 <__assert_fail@plt+0x66c>
   1128c:	andeq	r4, r1, r0, lsr #19
   11290:	andeq	r4, r1, ip, lsr #19
   11294:	mov	fp, #0
   11298:	mov	lr, #0
   1129c:	pop	{r1}		; (ldr r1, [sp], #4)
   112a0:	mov	r2, sp
   112a4:	push	{r2}		; (str r2, [sp, #-4]!)
   112a8:	push	{r0}		; (str r0, [sp, #-4]!)
   112ac:	ldr	ip, [pc, #16]	; 112c4 <__assert_fail@plt+0x578>
   112b0:	push	{ip}		; (str ip, [sp, #-4]!)
   112b4:	ldr	r0, [pc, #12]	; 112c8 <__assert_fail@plt+0x57c>
   112b8:	ldr	r3, [pc, #12]	; 112cc <__assert_fail@plt+0x580>
   112bc:	bl	10c38 <__libc_start_main@plt>
   112c0:	bl	10d40 <abort@plt>
   112c4:	andeq	r4, r1, r8, lsr r9
   112c8:	andeq	r0, r1, r8, asr sp
   112cc:	ldrdeq	r4, [r1], -r8
   112d0:	ldr	r3, [pc, #20]	; 112ec <__assert_fail@plt+0x5a0>
   112d4:	ldr	r2, [pc, #20]	; 112f0 <__assert_fail@plt+0x5a4>
   112d8:	add	r3, pc, r3
   112dc:	ldr	r2, [r3, r2]
   112e0:	cmp	r2, #0
   112e4:	bxeq	lr
   112e8:	b	10c50 <__gmon_start__@plt>
   112ec:	andeq	r4, r1, r0, lsr #26
   112f0:	andeq	r0, r0, r0, asr #1
   112f4:	ldr	r0, [pc, #24]	; 11314 <__assert_fail@plt+0x5c8>
   112f8:	ldr	r3, [pc, #24]	; 11318 <__assert_fail@plt+0x5cc>
   112fc:	cmp	r3, r0
   11300:	bxeq	lr
   11304:	ldr	r3, [pc, #16]	; 1131c <__assert_fail@plt+0x5d0>
   11308:	cmp	r3, #0
   1130c:	bxeq	lr
   11310:	bx	r3
   11314:	andeq	r6, r2, r4, lsl r1
   11318:	andeq	r6, r2, r4, lsl r1
   1131c:	andeq	r0, r0, r0
   11320:	ldr	r0, [pc, #36]	; 1134c <__assert_fail@plt+0x600>
   11324:	ldr	r1, [pc, #36]	; 11350 <__assert_fail@plt+0x604>
   11328:	sub	r1, r1, r0
   1132c:	asr	r1, r1, #2
   11330:	add	r1, r1, r1, lsr #31
   11334:	asrs	r1, r1, #1
   11338:	bxeq	lr
   1133c:	ldr	r3, [pc, #16]	; 11354 <__assert_fail@plt+0x608>
   11340:	cmp	r3, #0
   11344:	bxeq	lr
   11348:	bx	r3
   1134c:	andeq	r6, r2, r4, lsl r1
   11350:	andeq	r6, r2, r4, lsl r1
   11354:	andeq	r0, r0, r0
   11358:	push	{r4, lr}
   1135c:	ldr	r4, [pc, #24]	; 1137c <__assert_fail@plt+0x630>
   11360:	ldrb	r3, [r4]
   11364:	cmp	r3, #0
   11368:	popne	{r4, pc}
   1136c:	bl	112f4 <__assert_fail@plt+0x5a8>
   11370:	mov	r3, #1
   11374:	strb	r3, [r4]
   11378:	pop	{r4, pc}
   1137c:	andeq	r6, r2, ip, lsr r1
   11380:	b	11320 <__assert_fail@plt+0x5d4>
   11384:	str	r4, [sp, #-8]!
   11388:	str	lr, [sp, #4]
   1138c:	bl	10c98 <__errno_location@plt>
   11390:	ldr	r4, [r0]
   11394:	mov	r2, #5
   11398:	movw	r1, #18872	; 0x49b8
   1139c:	movt	r1, #1
   113a0:	mov	r0, #0
   113a4:	bl	10bc0 <dcgettext@plt>
   113a8:	mov	r2, r0
   113ac:	mov	r0, #1
   113b0:	mov	r1, r4
   113b4:	bl	10c20 <error@plt>
   113b8:	subs	r6, r0, #0
   113bc:	str	r7, [sp, #-8]!
   113c0:	str	lr, [sp, #4]
   113c4:	beq	11408 <__assert_fail@plt+0x6bc>
   113c8:	movw	r3, #24872	; 0x6128
   113cc:	movt	r3, #2
   113d0:	ldr	r4, [r3]
   113d4:	mov	r2, #5
   113d8:	movw	r1, #18884	; 0x49c4
   113dc:	movt	r1, #1
   113e0:	mov	r0, #0
   113e4:	bl	10bc0 <dcgettext@plt>
   113e8:	movw	r3, #24904	; 0x6148
   113ec:	movt	r3, #2
   113f0:	mov	r1, r0
   113f4:	ldr	r2, [r3]
   113f8:	mov	r0, r4
   113fc:	bl	10c8c <fprintf@plt>
   11400:	mov	r0, #1
   11404:	bl	10c74 <exit@plt>
   11408:	movw	r4, #24884	; 0x6134
   1140c:	movt	r4, #2
   11410:	ldr	r7, [r4]
   11414:	mov	r2, #5
   11418:	movw	r1, #18924	; 0x49ec
   1141c:	movt	r1, #1
   11420:	movw	r5, #24904	; 0x6148
   11424:	movt	r5, #2
   11428:	bl	10bc0 <dcgettext@plt>
   1142c:	mov	r1, r0
   11430:	ldr	r2, [r5]
   11434:	mov	r0, r7
   11438:	bl	10c8c <fprintf@plt>
   1143c:	ldr	r0, [r4]
   11440:	ldr	r1, [r5]
   11444:	bl	11518 <__assert_fail@plt+0x7cc>
   11448:	mov	r0, r6
   1144c:	bl	10c74 <exit@plt>
   11450:	movw	r3, #24872	; 0x6128
   11454:	movt	r3, #2
   11458:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1145c:	strd	r6, [sp, #8]
   11460:	mov	r6, r0
   11464:	str	r8, [sp, #16]
   11468:	str	lr, [sp, #20]
   1146c:	sub	sp, sp, #16
   11470:	ldr	r0, [r3]
   11474:	bl	14418 <__assert_fail@plt+0x36cc>
   11478:	movw	r2, #24884	; 0x6134
   1147c:	movt	r2, #2
   11480:	movw	r3, #24780	; 0x60cc
   11484:	movt	r3, #2
   11488:	ldr	r4, [r2]
   1148c:	movw	r1, #19400	; 0x4bc8
   11490:	movt	r1, #1
   11494:	mov	r2, #5
   11498:	mov	r0, #0
   1149c:	ldr	r8, [r3]
   114a0:	bl	10bc0 <dcgettext@plt>
   114a4:	mov	r7, r0
   114a8:	mov	r2, #5
   114ac:	movw	r1, #19416	; 0x4bd8
   114b0:	movt	r1, #1
   114b4:	mov	r0, #0
   114b8:	bl	10bc0 <dcgettext@plt>
   114bc:	mov	r5, r0
   114c0:	mov	r2, #5
   114c4:	movw	r1, #19432	; 0x4be8
   114c8:	movt	r1, #1
   114cc:	mov	r0, #0
   114d0:	bl	10bc0 <dcgettext@plt>
   114d4:	mov	ip, #0
   114d8:	mov	r3, r8
   114dc:	str	r7, [sp]
   114e0:	mov	r1, r6
   114e4:	movw	r2, #19448	; 0x4bf8
   114e8:	movt	r2, #1
   114ec:	str	r5, [sp, #4]
   114f0:	str	r0, [sp, #8]
   114f4:	mov	r0, r4
   114f8:	str	ip, [sp, #12]
   114fc:	bl	13df0 <__assert_fail@plt+0x30a4>
   11500:	add	sp, sp, #16
   11504:	ldrd	r4, [sp]
   11508:	ldrd	r6, [sp, #8]
   1150c:	ldr	r8, [sp, #16]
   11510:	add	sp, sp, #20
   11514:	pop	{pc}		; (ldr pc, [sp], #4)
   11518:	mov	r2, #5
   1151c:	strd	r4, [sp, #-12]!
   11520:	mov	r5, r1
   11524:	mov	r4, r0
   11528:	movw	r1, #19480	; 0x4c18
   1152c:	movt	r1, #1
   11530:	mov	r0, #0
   11534:	str	lr, [sp, #8]
   11538:	sub	sp, sp, #20
   1153c:	bl	10bc0 <dcgettext@plt>
   11540:	movw	r1, #19728	; 0x4d10
   11544:	movt	r1, #1
   11548:	movw	r2, #19752	; 0x4d28
   1154c:	movt	r2, #1
   11550:	movw	ip, #19448	; 0x4bf8
   11554:	movt	ip, #1
   11558:	mov	r3, r5
   1155c:	str	ip, [sp]
   11560:	str	r2, [sp, #4]
   11564:	movw	r2, #19688	; 0x4ce8
   11568:	movt	r2, #1
   1156c:	str	r1, [sp, #8]
   11570:	mov	r1, r0
   11574:	mov	r0, r4
   11578:	bl	10c8c <fprintf@plt>
   1157c:	add	sp, sp, #20
   11580:	ldrd	r4, [sp]
   11584:	add	sp, sp, #8
   11588:	pop	{pc}		; (ldr pc, [sp], #4)
   1158c:	movw	r3, #24896	; 0x6140
   11590:	movt	r3, #2
   11594:	str	r0, [r3]
   11598:	bx	lr
   1159c:	movw	r3, #24896	; 0x6140
   115a0:	movt	r3, #2
   115a4:	strb	r0, [r3, #4]
   115a8:	bx	lr
   115ac:	movw	r3, #24884	; 0x6134
   115b0:	movt	r3, #2
   115b4:	strd	r4, [sp, #-16]!
   115b8:	ldr	r0, [r3]
   115bc:	str	r6, [sp, #8]
   115c0:	str	lr, [sp, #12]
   115c4:	sub	sp, sp, #8
   115c8:	bl	146e4 <__assert_fail@plt+0x3998>
   115cc:	cmp	r0, #0
   115d0:	beq	115fc <__assert_fail@plt+0x8b0>
   115d4:	movw	r4, #24896	; 0x6140
   115d8:	movt	r4, #2
   115dc:	ldrb	r6, [r4, #4]
   115e0:	bl	10c98 <__errno_location@plt>
   115e4:	mov	r5, r0
   115e8:	cmp	r6, #0
   115ec:	beq	11628 <__assert_fail@plt+0x8dc>
   115f0:	ldr	r3, [r0]
   115f4:	cmp	r3, #32
   115f8:	bne	11628 <__assert_fail@plt+0x8dc>
   115fc:	movw	r3, #24872	; 0x6128
   11600:	movt	r3, #2
   11604:	ldr	r0, [r3]
   11608:	bl	146e4 <__assert_fail@plt+0x3998>
   1160c:	cmp	r0, #0
   11610:	bne	11670 <__assert_fail@plt+0x924>
   11614:	add	sp, sp, #8
   11618:	ldrd	r4, [sp]
   1161c:	ldr	r6, [sp, #8]
   11620:	add	sp, sp, #12
   11624:	pop	{pc}		; (ldr pc, [sp], #4)
   11628:	movw	r1, #18872	; 0x49b8
   1162c:	movt	r1, #1
   11630:	mov	r2, #5
   11634:	mov	r0, #0
   11638:	bl	10bc0 <dcgettext@plt>
   1163c:	mov	r6, r0
   11640:	ldr	r0, [r4]
   11644:	cmp	r0, #0
   11648:	beq	11680 <__assert_fail@plt+0x934>
   1164c:	ldr	r4, [r5]
   11650:	bl	1379c <__assert_fail@plt+0x2a50>
   11654:	mov	r3, r0
   11658:	movw	r2, #19800	; 0x4d58
   1165c:	movt	r2, #1
   11660:	mov	r0, #0
   11664:	str	r6, [sp]
   11668:	mov	r1, r4
   1166c:	bl	10c20 <error@plt>
   11670:	movw	r3, #24784	; 0x60d0
   11674:	movt	r3, #2
   11678:	ldr	r0, [r3]
   1167c:	bl	10b90 <_exit@plt>
   11680:	mov	r3, r6
   11684:	movw	r2, #19804	; 0x4d5c
   11688:	movt	r2, #1
   1168c:	ldr	r1, [r5]
   11690:	bl	10c20 <error@plt>
   11694:	b	11670 <__assert_fail@plt+0x924>
   11698:	strd	r4, [sp, #-16]!
   1169c:	subs	r4, r0, #0
   116a0:	str	r6, [sp, #8]
   116a4:	str	lr, [sp, #12]
   116a8:	beq	11740 <__assert_fail@plt+0x9f4>
   116ac:	mov	r1, #47	; 0x2f
   116b0:	bl	10cec <strrchr@plt>
   116b4:	subs	r5, r0, #0
   116b8:	beq	11718 <__assert_fail@plt+0x9cc>
   116bc:	add	r6, r5, #1
   116c0:	sub	r3, r6, r4
   116c4:	cmp	r3, #6
   116c8:	ble	11718 <__assert_fail@plt+0x9cc>
   116cc:	movw	r1, #19864	; 0x4d98
   116d0:	movt	r1, #1
   116d4:	mov	r2, #7
   116d8:	sub	r0, r5, #6
   116dc:	bl	10d34 <strncmp@plt>
   116e0:	cmp	r0, #0
   116e4:	bne	11718 <__assert_fail@plt+0x9cc>
   116e8:	movw	r1, #19872	; 0x4da0
   116ec:	movt	r1, #1
   116f0:	mov	r2, #3
   116f4:	mov	r0, r6
   116f8:	bl	10d34 <strncmp@plt>
   116fc:	cmp	r0, #0
   11700:	movne	r4, r6
   11704:	bne	11718 <__assert_fail@plt+0x9cc>
   11708:	add	r4, r5, #4
   1170c:	movw	r3, #24856	; 0x6118
   11710:	movt	r3, #2
   11714:	str	r4, [r3]
   11718:	movw	r2, #24904	; 0x6148
   1171c:	movt	r2, #2
   11720:	ldr	r6, [sp, #8]
   11724:	movw	r3, #24860	; 0x611c
   11728:	movt	r3, #2
   1172c:	str	r4, [r2]
   11730:	str	r4, [r3]
   11734:	ldrd	r4, [sp]
   11738:	add	sp, sp, #12
   1173c:	pop	{pc}		; (ldr pc, [sp], #4)
   11740:	movw	r3, #24872	; 0x6128
   11744:	movt	r3, #2
   11748:	movw	r0, #19808	; 0x4d60
   1174c:	movt	r0, #1
   11750:	ldr	r3, [r3]
   11754:	mov	r2, #55	; 0x37
   11758:	mov	r1, #1
   1175c:	bl	10be4 <fwrite@plt>
   11760:	bl	10d40 <abort@plt>
   11764:	strd	r4, [sp, #-16]!
   11768:	mov	r4, #0
   1176c:	mov	r5, #0
   11770:	cmp	r1, #10
   11774:	str	r6, [sp, #8]
   11778:	strd	r4, [r0]
   1177c:	strd	r4, [r0, #8]
   11780:	str	lr, [sp, #12]
   11784:	strd	r4, [r0, #16]
   11788:	strd	r4, [r0, #24]
   1178c:	strd	r4, [r0, #32]
   11790:	strd	r4, [r0, #40]	; 0x28
   11794:	beq	117ac <__assert_fail@plt+0xa60>
   11798:	ldrd	r4, [sp]
   1179c:	str	r1, [r0]
   117a0:	ldr	r6, [sp, #8]
   117a4:	add	sp, sp, #12
   117a8:	pop	{pc}		; (ldr pc, [sp], #4)
   117ac:	bl	10d40 <abort@plt>
   117b0:	mov	r2, #5
   117b4:	strd	r4, [sp, #-16]!
   117b8:	mov	r5, r0
   117bc:	str	r6, [sp, #8]
   117c0:	mov	r6, r1
   117c4:	mov	r1, r0
   117c8:	mov	r0, #0
   117cc:	str	lr, [sp, #12]
   117d0:	bl	10bc0 <dcgettext@plt>
   117d4:	cmp	r5, r0
   117d8:	mov	r4, r0
   117dc:	beq	117f4 <__assert_fail@plt+0xaa8>
   117e0:	mov	r0, r4
   117e4:	ldrd	r4, [sp]
   117e8:	ldr	r6, [sp, #8]
   117ec:	add	sp, sp, #12
   117f0:	pop	{pc}		; (ldr pc, [sp], #4)
   117f4:	bl	147c8 <__assert_fail@plt+0x3a7c>
   117f8:	ldrb	r3, [r0]
   117fc:	bic	r3, r3, #32
   11800:	cmp	r3, #85	; 0x55
   11804:	bne	1186c <__assert_fail@plt+0xb20>
   11808:	ldrb	r3, [r0, #1]
   1180c:	bic	r3, r3, #32
   11810:	cmp	r3, #84	; 0x54
   11814:	bne	118ec <__assert_fail@plt+0xba0>
   11818:	ldrb	r3, [r0, #2]
   1181c:	bic	r3, r3, #32
   11820:	cmp	r3, #70	; 0x46
   11824:	bne	118ec <__assert_fail@plt+0xba0>
   11828:	ldrb	r3, [r0, #3]
   1182c:	cmp	r3, #45	; 0x2d
   11830:	bne	118ec <__assert_fail@plt+0xba0>
   11834:	ldrb	r3, [r0, #4]
   11838:	cmp	r3, #56	; 0x38
   1183c:	bne	118ec <__assert_fail@plt+0xba0>
   11840:	ldrb	r3, [r0, #5]
   11844:	cmp	r3, #0
   11848:	bne	118ec <__assert_fail@plt+0xba0>
   1184c:	ldrb	r2, [r4]
   11850:	movw	r3, #19964	; 0x4dfc
   11854:	movt	r3, #1
   11858:	movw	r4, #19976	; 0x4e08
   1185c:	movt	r4, #1
   11860:	cmp	r2, #96	; 0x60
   11864:	movne	r4, r3
   11868:	b	117e0 <__assert_fail@plt+0xa94>
   1186c:	cmp	r3, #71	; 0x47
   11870:	bne	118ec <__assert_fail@plt+0xba0>
   11874:	ldrb	r3, [r0, #1]
   11878:	bic	r3, r3, #32
   1187c:	cmp	r3, #66	; 0x42
   11880:	bne	118ec <__assert_fail@plt+0xba0>
   11884:	ldrb	r3, [r0, #2]
   11888:	cmp	r3, #49	; 0x31
   1188c:	bne	118ec <__assert_fail@plt+0xba0>
   11890:	ldrb	r3, [r0, #3]
   11894:	cmp	r3, #56	; 0x38
   11898:	bne	118ec <__assert_fail@plt+0xba0>
   1189c:	ldrb	r3, [r0, #4]
   118a0:	cmp	r3, #48	; 0x30
   118a4:	bne	118ec <__assert_fail@plt+0xba0>
   118a8:	ldrb	r3, [r0, #5]
   118ac:	cmp	r3, #51	; 0x33
   118b0:	bne	118ec <__assert_fail@plt+0xba0>
   118b4:	ldrb	r3, [r0, #6]
   118b8:	cmp	r3, #48	; 0x30
   118bc:	bne	118ec <__assert_fail@plt+0xba0>
   118c0:	ldrb	r3, [r0, #7]
   118c4:	cmp	r3, #0
   118c8:	bne	118ec <__assert_fail@plt+0xba0>
   118cc:	ldrb	r2, [r4]
   118d0:	movw	r3, #19968	; 0x4e00
   118d4:	movt	r3, #1
   118d8:	movw	r4, #19972	; 0x4e04
   118dc:	movt	r4, #1
   118e0:	cmp	r2, #96	; 0x60
   118e4:	movne	r4, r3
   118e8:	b	117e0 <__assert_fail@plt+0xa94>
   118ec:	movw	r3, #19980	; 0x4e0c
   118f0:	movt	r3, #1
   118f4:	cmp	r6, #9
   118f8:	movw	r4, #19960	; 0x4df8
   118fc:	movt	r4, #1
   11900:	movne	r4, r3
   11904:	b	117e0 <__assert_fail@plt+0xa94>
   11908:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1190c:	strd	r6, [sp, #8]
   11910:	strd	r8, [sp, #16]
   11914:	strd	sl, [sp, #24]
   11918:	mov	fp, r0
   1191c:	mov	sl, r1
   11920:	str	lr, [sp, #32]
   11924:	sub	sp, sp, #116	; 0x74
   11928:	ldr	r8, [sp, #152]	; 0x98
   1192c:	str	r3, [sp, #28]
   11930:	ldr	r3, [sp, #156]	; 0x9c
   11934:	str	r2, [sp, #32]
   11938:	and	r4, r3, #2
   1193c:	ubfx	r3, r3, #1, #1
   11940:	str	r3, [sp, #44]	; 0x2c
   11944:	bl	10bfc <__ctype_get_mb_cur_max@plt>
   11948:	str	r0, [sp, #64]	; 0x40
   1194c:	cmp	r8, #10
   11950:	ldrls	pc, [pc, r8, lsl #2]
   11954:	b	130c4 <__assert_fail@plt+0x2378>
   11958:	andeq	r1, r1, ip, asr sp
   1195c:	strdeq	r1, [r1], -r8
   11960:	ldrdeq	r2, [r1], -r4
   11964:	andeq	r1, r1, r8, lsl lr
   11968:	andeq	r1, r1, r0, asr #25
   1196c:	andeq	r1, r1, ip, lsl #26
   11970:	andeq	r1, r1, ip, lsl #27
   11974:	andeq	r1, r1, r8, asr #27
   11978:	andeq	r1, r1, r4, lsl #19
   1197c:	andeq	r1, r1, r4, lsl #19
   11980:	andeq	r1, r1, r4, lsl #19
   11984:	cmp	r8, #10
   11988:	beq	119b4 <__assert_fail@plt+0xc68>
   1198c:	mov	r1, r8
   11990:	movw	r0, #19984	; 0x4e10
   11994:	movt	r0, #1
   11998:	bl	117b0 <__assert_fail@plt+0xa64>
   1199c:	mov	r1, r8
   119a0:	str	r0, [sp, #164]	; 0xa4
   119a4:	movw	r0, #19980	; 0x4e0c
   119a8:	movt	r0, #1
   119ac:	bl	117b0 <__assert_fail@plt+0xa64>
   119b0:	str	r0, [sp, #168]	; 0xa8
   119b4:	cmp	r4, #0
   119b8:	movne	r4, #0
   119bc:	beq	12da0 <__assert_fail@plt+0x2054>
   119c0:	mov	r3, #1
   119c4:	mov	r5, #0
   119c8:	ldr	r0, [sp, #168]	; 0xa8
   119cc:	str	r3, [sp, #36]	; 0x24
   119d0:	str	r3, [sp, #40]	; 0x28
   119d4:	str	r5, [sp, #68]	; 0x44
   119d8:	bl	10c80 <strlen@plt>
   119dc:	ldr	r3, [sp, #168]	; 0xa8
   119e0:	str	r5, [sp, #48]	; 0x30
   119e4:	str	r0, [sp, #56]	; 0x38
   119e8:	str	r3, [sp, #60]	; 0x3c
   119ec:	str	r5, [sp, #72]	; 0x48
   119f0:	str	r8, [sp, #152]	; 0x98
   119f4:	mov	r8, fp
   119f8:	mov	r9, #0
   119fc:	ldr	fp, [sp, #152]	; 0x98
   11a00:	ldr	r3, [sp, #28]
   11a04:	cmn	r3, #1
   11a08:	beq	11f68 <__assert_fail@plt+0x121c>
   11a0c:	ldr	r3, [sp, #28]
   11a10:	subs	r6, r3, r9
   11a14:	movne	r6, #1
   11a18:	cmp	r6, #0
   11a1c:	beq	11f80 <__assert_fail@plt+0x1234>
   11a20:	ldr	r0, [sp, #32]
   11a24:	ldr	r7, [sp, #40]	; 0x28
   11a28:	add	r3, r0, r9
   11a2c:	cmp	fp, #2
   11a30:	moveq	r7, #0
   11a34:	andne	r7, r7, #1
   11a38:	str	r3, [sp, #52]	; 0x34
   11a3c:	cmp	r7, #0
   11a40:	beq	1241c <__assert_fail@plt+0x16d0>
   11a44:	ldr	r2, [sp, #56]	; 0x38
   11a48:	cmp	r2, #0
   11a4c:	beq	126b8 <__assert_fail@plt+0x196c>
   11a50:	ldr	r1, [sp, #28]
   11a54:	cmp	r2, #1
   11a58:	mov	r3, r2
   11a5c:	movls	r3, #0
   11a60:	movhi	r3, #1
   11a64:	add	r5, r9, r2
   11a68:	cmn	r1, #1
   11a6c:	movne	r3, #0
   11a70:	cmp	r3, #0
   11a74:	beq	11a80 <__assert_fail@plt+0xd34>
   11a78:	bl	10c80 <strlen@plt>
   11a7c:	str	r0, [sp, #28]
   11a80:	ldr	r3, [sp, #28]
   11a84:	cmp	r5, r3
   11a88:	bhi	126b8 <__assert_fail@plt+0x196c>
   11a8c:	ldr	r0, [sp, #52]	; 0x34
   11a90:	ldr	r2, [sp, #56]	; 0x38
   11a94:	ldr	r1, [sp, #60]	; 0x3c
   11a98:	bl	10bb4 <memcmp@plt>
   11a9c:	cmp	r0, #0
   11aa0:	bne	126b8 <__assert_fail@plt+0x196c>
   11aa4:	ldr	r3, [sp, #44]	; 0x2c
   11aa8:	cmp	r3, #0
   11aac:	bne	12fe8 <__assert_fail@plt+0x229c>
   11ab0:	ldr	r3, [sp, #52]	; 0x34
   11ab4:	ldrb	r5, [r3]
   11ab8:	cmp	r5, #126	; 0x7e
   11abc:	ldrls	pc, [pc, r5, lsl #2]
   11ac0:	b	12378 <__assert_fail@plt+0x162c>
   11ac4:	andeq	r2, r1, ip, ror r2
   11ac8:	andeq	r2, r1, r8, ror r3
   11acc:	andeq	r2, r1, r8, ror r3
   11ad0:	andeq	r2, r1, r8, ror r3
   11ad4:	andeq	r2, r1, r8, ror r3
   11ad8:	andeq	r2, r1, r8, ror r3
   11adc:	andeq	r2, r1, r8, ror r3
   11ae0:	andeq	r2, r1, r0, asr r2
   11ae4:	andeq	r2, r1, r8, asr #4
   11ae8:	muleq	r1, r0, r1
   11aec:	andeq	r2, r1, ip, lsr r2
   11af0:	andeq	r2, r1, r8, lsl #3
   11af4:	andeq	r2, r1, r8, lsl r2
   11af8:	andeq	r2, r1, r4, ror #4
   11afc:	andeq	r2, r1, r8, ror r3
   11b00:	andeq	r2, r1, r8, ror r3
   11b04:	andeq	r2, r1, r8, ror r3
   11b08:	andeq	r2, r1, r8, ror r3
   11b0c:	andeq	r2, r1, r8, ror r3
   11b10:	andeq	r2, r1, r8, ror r3
   11b14:	andeq	r2, r1, r8, ror r3
   11b18:	andeq	r2, r1, r8, ror r3
   11b1c:	andeq	r2, r1, r8, ror r3
   11b20:	andeq	r2, r1, r8, ror r3
   11b24:	andeq	r2, r1, r8, ror r3
   11b28:	andeq	r2, r1, r8, ror r3
   11b2c:	andeq	r2, r1, r8, ror r3
   11b30:	andeq	r2, r1, r8, ror r3
   11b34:	andeq	r2, r1, r8, ror r3
   11b38:	andeq	r2, r1, r8, ror r3
   11b3c:	andeq	r2, r1, r8, ror r3
   11b40:	andeq	r2, r1, r8, ror r3
   11b44:	andeq	r2, r1, r4, asr r3
   11b48:	andeq	r2, r1, ip, asr r2
   11b4c:	andeq	r2, r1, ip, asr r2
   11b50:	andeq	r2, r1, r8, lsr r3
   11b54:	andeq	r2, r1, ip, asr r2
   11b58:	andeq	r2, r1, ip, ror #6
   11b5c:	andeq	r2, r1, ip, asr r2
   11b60:	strheq	r2, [r1], -r8
   11b64:	andeq	r2, r1, ip, asr r2
   11b68:	andeq	r2, r1, ip, asr r2
   11b6c:	andeq	r2, r1, ip, asr r2
   11b70:	andeq	r2, r1, ip, ror #6
   11b74:	andeq	r2, r1, ip, ror #6
   11b78:	andeq	r2, r1, ip, ror #6
   11b7c:	andeq	r2, r1, ip, ror #6
   11b80:	andeq	r2, r1, ip, ror #6
   11b84:	andeq	r2, r1, ip, ror #6
   11b88:	andeq	r2, r1, ip, ror #6
   11b8c:	andeq	r2, r1, ip, ror #6
   11b90:	andeq	r2, r1, ip, ror #6
   11b94:	andeq	r2, r1, ip, ror #6
   11b98:	andeq	r2, r1, ip, ror #6
   11b9c:	andeq	r2, r1, ip, ror #6
   11ba0:	andeq	r2, r1, ip, ror #6
   11ba4:	andeq	r2, r1, ip, ror #6
   11ba8:	andeq	r2, r1, ip, ror #6
   11bac:	andeq	r2, r1, ip, ror #6
   11bb0:	andeq	r2, r1, ip, asr r2
   11bb4:	andeq	r2, r1, ip, asr r2
   11bb8:	andeq	r2, r1, ip, asr r2
   11bbc:	andeq	r2, r1, ip, asr r2
   11bc0:	andeq	r2, r1, ip, lsl #1
   11bc4:	andeq	r2, r1, r8, ror r3
   11bc8:	andeq	r2, r1, ip, ror #6
   11bcc:	andeq	r2, r1, ip, ror #6
   11bd0:	andeq	r2, r1, ip, ror #6
   11bd4:	andeq	r2, r1, ip, ror #6
   11bd8:	andeq	r2, r1, ip, ror #6
   11bdc:	andeq	r2, r1, ip, ror #6
   11be0:	andeq	r2, r1, ip, ror #6
   11be4:	andeq	r2, r1, ip, ror #6
   11be8:	andeq	r2, r1, ip, ror #6
   11bec:	andeq	r2, r1, ip, ror #6
   11bf0:	andeq	r2, r1, ip, ror #6
   11bf4:	andeq	r2, r1, ip, ror #6
   11bf8:	andeq	r2, r1, ip, ror #6
   11bfc:	andeq	r2, r1, ip, ror #6
   11c00:	andeq	r2, r1, ip, ror #6
   11c04:	andeq	r2, r1, ip, ror #6
   11c08:	andeq	r2, r1, ip, ror #6
   11c0c:	andeq	r2, r1, ip, ror #6
   11c10:	andeq	r2, r1, ip, ror #6
   11c14:	andeq	r2, r1, ip, ror #6
   11c18:	andeq	r2, r1, ip, ror #6
   11c1c:	andeq	r2, r1, ip, ror #6
   11c20:	andeq	r2, r1, ip, ror #6
   11c24:	andeq	r2, r1, ip, ror #6
   11c28:	andeq	r2, r1, ip, ror #6
   11c2c:	andeq	r2, r1, ip, ror #6
   11c30:	andeq	r2, r1, ip, asr r2
   11c34:	andeq	r2, r1, r4, lsr r0
   11c38:	andeq	r2, r1, ip, ror #6
   11c3c:	andeq	r2, r1, ip, asr r2
   11c40:	andeq	r2, r1, ip, ror #6
   11c44:	andeq	r2, r1, ip, asr r2
   11c48:	andeq	r2, r1, ip, ror #6
   11c4c:	andeq	r2, r1, ip, ror #6
   11c50:	andeq	r2, r1, ip, ror #6
   11c54:	andeq	r2, r1, ip, ror #6
   11c58:	andeq	r2, r1, ip, ror #6
   11c5c:	andeq	r2, r1, ip, ror #6
   11c60:	andeq	r2, r1, ip, ror #6
   11c64:	andeq	r2, r1, ip, ror #6
   11c68:	andeq	r2, r1, ip, ror #6
   11c6c:	andeq	r2, r1, ip, ror #6
   11c70:	andeq	r2, r1, ip, ror #6
   11c74:	andeq	r2, r1, ip, ror #6
   11c78:	andeq	r2, r1, ip, ror #6
   11c7c:	andeq	r2, r1, ip, ror #6
   11c80:	andeq	r2, r1, ip, ror #6
   11c84:	andeq	r2, r1, ip, ror #6
   11c88:	andeq	r2, r1, ip, ror #6
   11c8c:	andeq	r2, r1, ip, ror #6
   11c90:	andeq	r2, r1, ip, ror #6
   11c94:	andeq	r2, r1, ip, ror #6
   11c98:	andeq	r2, r1, ip, ror #6
   11c9c:	andeq	r2, r1, ip, ror #6
   11ca0:	andeq	r2, r1, ip, ror #6
   11ca4:	andeq	r2, r1, ip, ror #6
   11ca8:	andeq	r2, r1, ip, ror #6
   11cac:	andeq	r2, r1, ip, ror #6
   11cb0:	andeq	r1, r1, r8, asr lr
   11cb4:	andeq	r2, r1, ip, asr r2
   11cb8:	andeq	r1, r1, r8, asr lr
   11cbc:	andeq	r2, r1, r8, lsr r3
   11cc0:	cmp	r4, #0
   11cc4:	moveq	r3, #1
   11cc8:	streq	r3, [sp, #40]	; 0x28
   11ccc:	beq	123e0 <__assert_fail@plt+0x1694>
   11cd0:	mov	r3, #0
   11cd4:	mov	r2, #1
   11cd8:	mov	r4, r3
   11cdc:	str	r2, [sp, #36]	; 0x24
   11ce0:	str	r2, [sp, #44]	; 0x2c
   11ce4:	str	r2, [sp, #56]	; 0x38
   11ce8:	str	r3, [sp, #68]	; 0x44
   11cec:	movw	r3, #19980	; 0x4e0c
   11cf0:	movt	r3, #1
   11cf4:	str	r4, [sp, #40]	; 0x28
   11cf8:	mov	r8, #2
   11cfc:	str	r4, [sp, #48]	; 0x30
   11d00:	str	r3, [sp, #60]	; 0x3c
   11d04:	str	r4, [sp, #72]	; 0x48
   11d08:	b	119f0 <__assert_fail@plt+0xca4>
   11d0c:	cmp	r4, #0
   11d10:	bne	12f5c <__assert_fail@plt+0x2210>
   11d14:	cmp	sl, #0
   11d18:	beq	12d1c <__assert_fail@plt+0x1fd0>
   11d1c:	mov	r3, #34	; 0x22
   11d20:	mov	r1, r4
   11d24:	mov	r2, #1
   11d28:	strb	r3, [fp]
   11d2c:	movw	r3, #19960	; 0x4df8
   11d30:	movt	r3, #1
   11d34:	mov	r4, r2
   11d38:	str	r2, [sp, #36]	; 0x24
   11d3c:	str	r2, [sp, #40]	; 0x28
   11d40:	str	r1, [sp, #44]	; 0x2c
   11d44:	str	r1, [sp, #48]	; 0x30
   11d48:	str	r2, [sp, #56]	; 0x38
   11d4c:	str	r3, [sp, #60]	; 0x3c
   11d50:	str	r1, [sp, #68]	; 0x44
   11d54:	str	r1, [sp, #72]	; 0x48
   11d58:	b	119f0 <__assert_fail@plt+0xca4>
   11d5c:	mov	r3, #0
   11d60:	mov	r4, r8
   11d64:	str	r3, [sp, #40]	; 0x28
   11d68:	str	r3, [sp, #44]	; 0x2c
   11d6c:	str	r3, [sp, #48]	; 0x30
   11d70:	str	r8, [sp, #56]	; 0x38
   11d74:	str	r3, [sp, #60]	; 0x3c
   11d78:	str	r3, [sp, #68]	; 0x44
   11d7c:	mov	r3, #1
   11d80:	str	r3, [sp, #36]	; 0x24
   11d84:	str	r8, [sp, #72]	; 0x48
   11d88:	b	119f0 <__assert_fail@plt+0xca4>
   11d8c:	mov	r3, #1
   11d90:	mov	r2, #0
   11d94:	mov	r4, r2
   11d98:	mov	r8, #5
   11d9c:	str	r3, [sp, #36]	; 0x24
   11da0:	str	r3, [sp, #40]	; 0x28
   11da4:	str	r3, [sp, #44]	; 0x2c
   11da8:	str	r2, [sp, #48]	; 0x30
   11dac:	str	r3, [sp, #56]	; 0x38
   11db0:	movw	r3, #19960	; 0x4df8
   11db4:	movt	r3, #1
   11db8:	str	r3, [sp, #60]	; 0x3c
   11dbc:	str	r2, [sp, #68]	; 0x44
   11dc0:	str	r2, [sp, #72]	; 0x48
   11dc4:	b	119f0 <__assert_fail@plt+0xca4>
   11dc8:	mov	r3, #0
   11dcc:	mov	r2, #1
   11dd0:	mov	r4, r3
   11dd4:	str	r2, [sp, #36]	; 0x24
   11dd8:	str	r2, [sp, #40]	; 0x28
   11ddc:	str	r3, [sp, #44]	; 0x2c
   11de0:	str	r3, [sp, #48]	; 0x30
   11de4:	str	r3, [sp, #56]	; 0x38
   11de8:	str	r3, [sp, #60]	; 0x3c
   11dec:	str	r3, [sp, #68]	; 0x44
   11df0:	str	r3, [sp, #72]	; 0x48
   11df4:	b	119f0 <__assert_fail@plt+0xca4>
   11df8:	mov	r2, #1
   11dfc:	mov	r3, #0
   11e00:	mov	r4, r3
   11e04:	str	r2, [sp, #36]	; 0x24
   11e08:	str	r2, [sp, #44]	; 0x2c
   11e0c:	str	r8, [sp, #56]	; 0x38
   11e10:	str	r3, [sp, #68]	; 0x44
   11e14:	b	11cec <__assert_fail@plt+0xfa0>
   11e18:	mov	r3, #1
   11e1c:	mov	r2, #0
   11e20:	mov	r4, r2
   11e24:	mov	r8, #2
   11e28:	str	r3, [sp, #36]	; 0x24
   11e2c:	str	r3, [sp, #40]	; 0x28
   11e30:	str	r3, [sp, #44]	; 0x2c
   11e34:	str	r2, [sp, #48]	; 0x30
   11e38:	str	r3, [sp, #56]	; 0x38
   11e3c:	movw	r3, #19980	; 0x4e0c
   11e40:	movt	r3, #1
   11e44:	str	r3, [sp, #60]	; 0x3c
   11e48:	str	r2, [sp, #68]	; 0x44
   11e4c:	str	r2, [sp, #72]	; 0x48
   11e50:	b	119f0 <__assert_fail@plt+0xca4>
   11e54:	mov	r7, #0
   11e58:	ldr	r3, [sp, #28]
   11e5c:	cmn	r3, #1
   11e60:	beq	12938 <__assert_fail@plt+0x1bec>
   11e64:	ldr	r3, [sp, #28]
   11e68:	subs	r2, r3, #1
   11e6c:	movne	r2, #1
   11e70:	sub	r3, fp, #2
   11e74:	cmp	r2, #0
   11e78:	clz	r3, r3
   11e7c:	lsr	r3, r3, #5
   11e80:	bne	11e8c <__assert_fail@plt+0x1140>
   11e84:	cmp	r9, #0
   11e88:	beq	12698 <__assert_fail@plt+0x194c>
   11e8c:	mov	r6, #0
   11e90:	ldr	r2, [sp, #40]	; 0x28
   11e94:	eor	r2, r2, #1
   11e98:	orrs	r3, r3, r2
   11e9c:	bne	12074 <__assert_fail@plt+0x1328>
   11ea0:	ldr	r2, [sp, #160]	; 0xa0
   11ea4:	cmp	r2, #0
   11ea8:	beq	11ec8 <__assert_fail@plt+0x117c>
   11eac:	ldr	r0, [sp, #160]	; 0xa0
   11eb0:	ubfx	r1, r5, #5, #8
   11eb4:	and	r2, r5, #31
   11eb8:	ldr	r1, [r0, r1, lsl #2]
   11ebc:	lsr	r2, r1, r2
   11ec0:	tst	r2, #1
   11ec4:	bne	11ed0 <__assert_fail@plt+0x1184>
   11ec8:	cmp	r7, #0
   11ecc:	beq	12140 <__assert_fail@plt+0x13f4>
   11ed0:	ldr	r2, [sp, #44]	; 0x2c
   11ed4:	sub	r3, fp, #2
   11ed8:	clz	r3, r3
   11edc:	lsr	r3, r3, #5
   11ee0:	cmp	r2, #0
   11ee4:	bne	12c8c <__assert_fail@plt+0x1f40>
   11ee8:	ldr	r2, [sp, #48]	; 0x30
   11eec:	eor	r2, r2, #1
   11ef0:	ands	r3, r3, r2
   11ef4:	beq	11f2c <__assert_fail@plt+0x11e0>
   11ef8:	cmp	sl, r4
   11efc:	str	r3, [sp, #48]	; 0x30
   11f00:	movhi	r2, #39	; 0x27
   11f04:	strbhi	r2, [r8, r4]
   11f08:	add	r2, r4, #1
   11f0c:	cmp	sl, r2
   11f10:	movhi	r1, #36	; 0x24
   11f14:	strbhi	r1, [r8, r2]
   11f18:	add	r2, r4, #2
   11f1c:	add	r4, r4, #3
   11f20:	cmp	sl, r2
   11f24:	movhi	r1, #39	; 0x27
   11f28:	strbhi	r1, [r8, r2]
   11f2c:	cmp	r4, sl
   11f30:	add	r9, r9, #1
   11f34:	movcc	r3, #92	; 0x5c
   11f38:	strbcc	r3, [r8, r4]
   11f3c:	add	r4, r4, #1
   11f40:	cmp	r4, sl
   11f44:	ldr	r3, [sp, #36]	; 0x24
   11f48:	strbcc	r5, [r8, r4]
   11f4c:	cmp	r6, #0
   11f50:	add	r4, r4, #1
   11f54:	moveq	r3, #0
   11f58:	str	r3, [sp, #36]	; 0x24
   11f5c:	ldr	r3, [sp, #28]
   11f60:	cmn	r3, #1
   11f64:	bne	11a0c <__assert_fail@plt+0xcc0>
   11f68:	ldr	r3, [sp, #32]
   11f6c:	ldrb	r6, [r3, r9]
   11f70:	adds	r6, r6, #0
   11f74:	movne	r6, #1
   11f78:	cmp	r6, #0
   11f7c:	bne	11a20 <__assert_fail@plt+0xcd4>
   11f80:	str	fp, [sp, #152]	; 0x98
   11f84:	mov	fp, r8
   11f88:	cmp	r4, #0
   11f8c:	ldr	r1, [sp, #44]	; 0x2c
   11f90:	movne	r3, #0
   11f94:	ldr	r8, [sp, #152]	; 0x98
   11f98:	sub	r2, r8, #2
   11f9c:	clz	r2, r2
   11fa0:	lsr	r2, r2, #5
   11fa4:	andeq	r3, r2, r1
   11fa8:	cmp	r3, #0
   11fac:	bne	13068 <__assert_fail@plt+0x231c>
   11fb0:	eor	r3, r1, #1
   11fb4:	ands	r2, r2, r3
   11fb8:	beq	12f94 <__assert_fail@plt+0x2248>
   11fbc:	ldr	r3, [sp, #68]	; 0x44
   11fc0:	cmp	r3, #0
   11fc4:	beq	12f98 <__assert_fail@plt+0x224c>
   11fc8:	ldr	r3, [sp, #36]	; 0x24
   11fcc:	cmp	r3, #0
   11fd0:	bne	13024 <__assert_fail@plt+0x22d8>
   11fd4:	ldr	r3, [sp, #72]	; 0x48
   11fd8:	adds	r3, r3, #0
   11fdc:	movne	r3, #1
   11fe0:	cmp	sl, #0
   11fe4:	movne	r3, #0
   11fe8:	cmp	r3, #0
   11fec:	ldreq	r2, [sp, #68]	; 0x44
   11ff0:	beq	12f98 <__assert_fail@plt+0x224c>
   11ff4:	ldr	r2, [sp, #72]	; 0x48
   11ff8:	str	r3, [sp, #68]	; 0x44
   11ffc:	movw	r3, #19980	; 0x4e0c
   12000:	movt	r3, #1
   12004:	mov	r1, #39	; 0x27
   12008:	mov	r4, #1
   1200c:	ldr	sl, [sp, #72]	; 0x48
   12010:	mov	r8, #2
   12014:	str	r3, [sp, #60]	; 0x3c
   12018:	mov	r3, #0
   1201c:	strb	r1, [fp]
   12020:	str	r3, [sp, #44]	; 0x2c
   12024:	str	r4, [sp, #56]	; 0x38
   12028:	str	r2, [sp, #72]	; 0x48
   1202c:	b	119f0 <__assert_fail@plt+0xca4>
   12030:	mov	r7, #0
   12034:	cmp	fp, #2
   12038:	beq	12918 <__assert_fail@plt+0x1bcc>
   1203c:	ldr	r2, [sp, #40]	; 0x28
   12040:	ldr	r3, [sp, #56]	; 0x38
   12044:	ldr	r1, [sp, #44]	; 0x2c
   12048:	cmp	r3, #0
   1204c:	moveq	r3, #0
   12050:	andne	r3, r2, r1
   12054:	cmp	r3, #0
   12058:	moveq	r5, #92	; 0x5c
   1205c:	moveq	r3, r5
   12060:	bne	12924 <__assert_fail@plt+0x1bd8>
   12064:	ldr	r2, [sp, #40]	; 0x28
   12068:	cmp	r2, #0
   1206c:	bne	12d60 <__assert_fail@plt+0x2014>
   12070:	mov	r6, #0
   12074:	ldr	r3, [sp, #44]	; 0x2c
   12078:	cmp	r3, #0
   1207c:	beq	12910 <__assert_fail@plt+0x1bc4>
   12080:	mov	r3, #0
   12084:	b	11ea0 <__assert_fail@plt+0x1154>
   12088:	mov	r7, #0
   1208c:	cmp	fp, #2
   12090:	beq	12988 <__assert_fail@plt+0x1c3c>
   12094:	cmp	fp, #5
   12098:	beq	1294c <__assert_fail@plt+0x1c00>
   1209c:	sub	r3, fp, #2
   120a0:	mov	r6, #0
   120a4:	clz	r3, r3
   120a8:	mov	r5, #63	; 0x3f
   120ac:	lsr	r3, r3, #5
   120b0:	b	11e90 <__assert_fail@plt+0x1144>
   120b4:	mov	r7, #0
   120b8:	cmp	fp, #2
   120bc:	movne	r3, #0
   120c0:	movne	r5, #39	; 0x27
   120c4:	strne	r6, [sp, #68]	; 0x44
   120c8:	bne	11e90 <__assert_fail@plt+0x1144>
   120cc:	ldr	r3, [sp, #44]	; 0x2c
   120d0:	cmp	r3, #0
   120d4:	bne	12d90 <__assert_fail@plt+0x2044>
   120d8:	ldr	r3, [sp, #72]	; 0x48
   120dc:	cmp	sl, #0
   120e0:	clz	r3, r3
   120e4:	lsr	r3, r3, #5
   120e8:	moveq	r3, #0
   120ec:	cmp	r3, #0
   120f0:	bne	12cbc <__assert_fail@plt+0x1f70>
   120f4:	cmp	sl, r4
   120f8:	movhi	r3, #39	; 0x27
   120fc:	strbhi	r3, [r8, r4]
   12100:	add	r3, r4, #1
   12104:	cmp	sl, r3
   12108:	movhi	r2, #92	; 0x5c
   1210c:	strbhi	r2, [r8, r3]
   12110:	add	r3, r4, #2
   12114:	cmp	sl, r3
   12118:	bls	12124 <__assert_fail@plt+0x13d8>
   1211c:	mov	r2, #39	; 0x27
   12120:	strb	r2, [r8, r3]
   12124:	mov	r3, #0
   12128:	cmp	r7, #0
   1212c:	add	r4, r4, #3
   12130:	mov	r5, #39	; 0x27
   12134:	str	r3, [sp, #48]	; 0x30
   12138:	str	r6, [sp, #68]	; 0x44
   1213c:	bne	11ed0 <__assert_fail@plt+0x1184>
   12140:	ldr	r2, [sp, #48]	; 0x30
   12144:	eor	r3, r3, #1
   12148:	add	r9, r9, #1
   1214c:	and	r3, r3, r2
   12150:	uxtb	r3, r3
   12154:	cmp	r3, #0
   12158:	beq	11f40 <__assert_fail@plt+0x11f4>
   1215c:	cmp	sl, r4
   12160:	movhi	r3, #39	; 0x27
   12164:	strbhi	r3, [r8, r4]
   12168:	add	r3, r4, #1
   1216c:	add	r4, r4, #2
   12170:	cmp	sl, r3
   12174:	movhi	r2, #39	; 0x27
   12178:	strbhi	r2, [r8, r3]
   1217c:	mov	r3, #0
   12180:	str	r3, [sp, #48]	; 0x30
   12184:	b	11f40 <__assert_fail@plt+0x11f4>
   12188:	mov	r3, #118	; 0x76
   1218c:	b	12064 <__assert_fail@plt+0x1318>
   12190:	mov	r3, #116	; 0x74
   12194:	ldr	r2, [sp, #44]	; 0x2c
   12198:	cmp	fp, #2
   1219c:	movne	r2, #0
   121a0:	andeq	r2, r2, #1
   121a4:	cmp	r2, #0
   121a8:	beq	12064 <__assert_fail@plt+0x1318>
   121ac:	mov	fp, r8
   121b0:	mov	r8, #2
   121b4:	ldr	r3, [sp, #40]	; 0x28
   121b8:	cmp	r3, #0
   121bc:	movne	r8, #4
   121c0:	mov	lr, #0
   121c4:	mov	r0, fp
   121c8:	ldr	r2, [sp, #32]
   121cc:	ldr	r3, [sp, #156]	; 0x9c
   121d0:	ldr	r1, [sp, #164]	; 0xa4
   121d4:	bic	ip, r3, #2
   121d8:	ldr	r3, [sp, #28]
   121dc:	stm	sp, {r8, ip, lr}
   121e0:	ldr	ip, [sp, #168]	; 0xa8
   121e4:	str	r1, [sp, #12]
   121e8:	mov	r1, sl
   121ec:	str	ip, [sp, #16]
   121f0:	bl	11908 <__assert_fail@plt+0xbbc>
   121f4:	mov	r4, r0
   121f8:	mov	r0, r4
   121fc:	add	sp, sp, #116	; 0x74
   12200:	ldrd	r4, [sp]
   12204:	ldrd	r6, [sp, #8]
   12208:	ldrd	r8, [sp, #16]
   1220c:	ldrd	sl, [sp, #24]
   12210:	add	sp, sp, #32
   12214:	pop	{pc}		; (ldr pc, [sp], #4)
   12218:	mov	r5, #102	; 0x66
   1221c:	ldr	r2, [sp, #44]	; 0x2c
   12220:	sub	r3, fp, #2
   12224:	clz	r3, r3
   12228:	lsr	r3, r3, #5
   1222c:	cmp	r2, #0
   12230:	bne	12c8c <__assert_fail@plt+0x1f40>
   12234:	mov	r6, r2
   12238:	b	11f2c <__assert_fail@plt+0x11e0>
   1223c:	mov	r5, #110	; 0x6e
   12240:	mov	r6, #0
   12244:	b	11ed0 <__assert_fail@plt+0x1184>
   12248:	mov	r5, #98	; 0x62
   1224c:	b	1221c <__assert_fail@plt+0x14d0>
   12250:	mov	r5, #97	; 0x61
   12254:	b	1221c <__assert_fail@plt+0x14d0>
   12258:	mov	r7, #0
   1225c:	mov	r6, #0
   12260:	b	12080 <__assert_fail@plt+0x1334>
   12264:	mov	r5, #114	; 0x72
   12268:	b	12240 <__assert_fail@plt+0x14f4>
   1226c:	ldr	r3, [sp, #44]	; 0x2c
   12270:	cmp	r3, #0
   12274:	bne	13004 <__assert_fail@plt+0x22b8>
   12278:	mov	r7, r3
   1227c:	ldr	r3, [sp, #48]	; 0x30
   12280:	sub	r2, fp, #2
   12284:	clz	r2, r2
   12288:	lsr	r2, r2, #5
   1228c:	eor	r3, r3, #1
   12290:	ands	r3, r2, r3
   12294:	beq	12ca8 <__assert_fail@plt+0x1f5c>
   12298:	cmp	sl, r4
   1229c:	movhi	r1, #39	; 0x27
   122a0:	strbhi	r1, [r8, r4]
   122a4:	add	r1, r4, #1
   122a8:	cmp	sl, r1
   122ac:	movhi	r0, #36	; 0x24
   122b0:	strbhi	r0, [r8, r1]
   122b4:	add	r1, r4, #2
   122b8:	cmp	sl, r1
   122bc:	movhi	r0, #39	; 0x27
   122c0:	strbhi	r0, [r8, r1]
   122c4:	add	r1, r4, #3
   122c8:	cmp	sl, r1
   122cc:	bls	12d00 <__assert_fail@plt+0x1fb4>
   122d0:	mov	r4, r1
   122d4:	mov	r1, #92	; 0x5c
   122d8:	mov	r0, r4
   122dc:	str	r3, [sp, #48]	; 0x30
   122e0:	strb	r1, [r8, r4]
   122e4:	cmp	fp, #2
   122e8:	add	r4, r4, #1
   122ec:	beq	12d50 <__assert_fail@plt+0x2004>
   122f0:	ldr	r1, [sp, #28]
   122f4:	add	r3, r9, #1
   122f8:	cmp	r3, r1
   122fc:	bcs	12314 <__assert_fail@plt+0x15c8>
   12300:	ldr	r1, [sp, #32]
   12304:	ldrb	r3, [r1, r3]
   12308:	sub	r3, r3, #48	; 0x30
   1230c:	cmp	r3, #9
   12310:	bls	12d68 <__assert_fail@plt+0x201c>
   12314:	mov	r5, #48	; 0x30
   12318:	ldr	r3, [sp, #40]	; 0x28
   1231c:	eor	r3, r3, #1
   12320:	orrs	r2, r2, r3
   12324:	mov	r3, r6
   12328:	moveq	r6, r2
   1232c:	beq	11ea0 <__assert_fail@plt+0x1154>
   12330:	mov	r6, #0
   12334:	b	11ec8 <__assert_fail@plt+0x117c>
   12338:	cmp	r9, #0
   1233c:	mov	r2, r7
   12340:	bne	128e0 <__assert_fail@plt+0x1b94>
   12344:	mov	r6, r7
   12348:	mov	r3, r9
   1234c:	mov	r7, r2
   12350:	b	11e90 <__assert_fail@plt+0x1144>
   12354:	mov	r2, r7
   12358:	mov	r6, r7
   1235c:	mov	r3, #0
   12360:	mov	r7, r2
   12364:	mov	r5, #32
   12368:	b	11e90 <__assert_fail@plt+0x1144>
   1236c:	mov	r6, r7
   12370:	b	12080 <__assert_fail@plt+0x1334>
   12374:	mov	r7, #0
   12378:	ldr	r3, [sp, #64]	; 0x40
   1237c:	cmp	r3, #1
   12380:	bne	129a0 <__assert_fail@plt+0x1c54>
   12384:	bl	10c68 <__ctype_b_loc@plt>
   12388:	ldr	r2, [r0]
   1238c:	sxth	r3, r5
   12390:	lsl	r3, r3, #1
   12394:	ldr	r1, [sp, #64]	; 0x40
   12398:	ldrh	r3, [r2, r3]
   1239c:	mov	ip, r1
   123a0:	and	r3, r3, #16384	; 0x4000
   123a4:	cmp	r3, #0
   123a8:	ldr	r3, [sp, #40]	; 0x28
   123ac:	movne	r6, #1
   123b0:	moveq	r6, #0
   123b4:	movne	r2, #0
   123b8:	andeq	r2, r3, #1
   123bc:	cmp	r2, #0
   123c0:	bne	12ce8 <__assert_fail@plt+0x1f9c>
   123c4:	sub	r3, fp, #2
   123c8:	clz	r3, r3
   123cc:	lsr	r3, r3, #5
   123d0:	b	11e90 <__assert_fail@plt+0x1144>
   123d4:	cmp	r4, #0
   123d8:	bne	13078 <__assert_fail@plt+0x232c>
   123dc:	str	r4, [sp, #40]	; 0x28
   123e0:	cmp	sl, #0
   123e4:	bne	130a8 <__assert_fail@plt+0x235c>
   123e8:	mov	r3, #1
   123ec:	movw	r2, #19980	; 0x4e0c
   123f0:	movt	r2, #1
   123f4:	mov	r4, r3
   123f8:	mov	r8, #2
   123fc:	str	r3, [sp, #36]	; 0x24
   12400:	str	sl, [sp, #44]	; 0x2c
   12404:	str	sl, [sp, #48]	; 0x30
   12408:	str	r3, [sp, #56]	; 0x38
   1240c:	str	r2, [sp, #60]	; 0x3c
   12410:	str	sl, [sp, #68]	; 0x44
   12414:	str	sl, [sp, #72]	; 0x48
   12418:	b	119f0 <__assert_fail@plt+0xca4>
   1241c:	ldr	r3, [sp, #32]
   12420:	ldrb	r5, [r3, r9]
   12424:	cmp	r5, #126	; 0x7e
   12428:	ldrls	pc, [pc, r5, lsl #2]
   1242c:	b	12378 <__assert_fail@plt+0x162c>
   12430:	andeq	r2, r1, r4, asr r6
   12434:	andeq	r2, r1, r8, ror r3
   12438:	andeq	r2, r1, r8, ror r3
   1243c:	andeq	r2, r1, r8, ror r3
   12440:	andeq	r2, r1, r8, ror r3
   12444:	andeq	r2, r1, r8, ror r3
   12448:	andeq	r2, r1, r8, ror r3
   1244c:	andeq	r2, r1, ip, asr #12
   12450:	andeq	r2, r1, r4, asr #12
   12454:	muleq	r1, r0, r1
   12458:	andeq	r2, r1, ip, lsr r6
   1245c:	andeq	r2, r1, r8, lsl #3
   12460:	andeq	r2, r1, r4, lsr r6
   12464:	andeq	r2, r1, ip, lsr #12
   12468:	andeq	r2, r1, r8, ror r3
   1246c:	andeq	r2, r1, r8, ror r3
   12470:	andeq	r2, r1, r8, ror r3
   12474:	andeq	r2, r1, r8, ror r3
   12478:	andeq	r2, r1, r8, ror r3
   1247c:	andeq	r2, r1, r8, ror r3
   12480:	andeq	r2, r1, r8, ror r3
   12484:	andeq	r2, r1, r8, ror r3
   12488:	andeq	r2, r1, r8, ror r3
   1248c:	andeq	r2, r1, r8, ror r3
   12490:	andeq	r2, r1, r8, ror r3
   12494:	andeq	r2, r1, r8, ror r3
   12498:	andeq	r2, r1, r8, ror r3
   1249c:	andeq	r2, r1, r8, ror r3
   124a0:	andeq	r2, r1, r8, ror r3
   124a4:	andeq	r2, r1, r8, ror r3
   124a8:	andeq	r2, r1, r8, ror r3
   124ac:	andeq	r2, r1, r8, ror r3
   124b0:	andeq	r2, r1, r8, lsr #13
   124b4:	andeq	r2, r1, r8, lsl #13
   124b8:	andeq	r2, r1, r8, lsl #13
   124bc:	andeq	r2, r1, r8, ror r6
   124c0:	andeq	r2, r1, r8, lsl #13
   124c4:	andeq	r2, r1, r4, asr #7
   124c8:	andeq	r2, r1, r8, lsl #13
   124cc:	strheq	r2, [r1], -r8
   124d0:	andeq	r2, r1, r8, lsl #13
   124d4:	andeq	r2, r1, r8, lsl #13
   124d8:	andeq	r2, r1, r8, lsl #13
   124dc:	andeq	r2, r1, r4, asr #7
   124e0:	andeq	r2, r1, r4, asr #7
   124e4:	andeq	r2, r1, r4, asr #7
   124e8:	andeq	r2, r1, r4, asr #7
   124ec:	andeq	r2, r1, r4, asr #7
   124f0:	andeq	r2, r1, r4, asr #7
   124f4:	andeq	r2, r1, r4, asr #7
   124f8:	andeq	r2, r1, r4, asr #7
   124fc:	andeq	r2, r1, r4, asr #7
   12500:	andeq	r2, r1, r4, asr #7
   12504:	andeq	r2, r1, r4, asr #7
   12508:	andeq	r2, r1, r4, asr #7
   1250c:	andeq	r2, r1, r4, asr #7
   12510:	andeq	r2, r1, r4, asr #7
   12514:	andeq	r2, r1, r4, asr #7
   12518:	andeq	r2, r1, r4, asr #7
   1251c:	andeq	r2, r1, r8, lsl #13
   12520:	andeq	r2, r1, r8, lsl #13
   12524:	andeq	r2, r1, r8, lsl #13
   12528:	andeq	r2, r1, r8, lsl #13
   1252c:	andeq	r2, r1, ip, lsl #1
   12530:	andeq	r2, r1, r8, ror r3
   12534:	andeq	r2, r1, r4, asr #7
   12538:	andeq	r2, r1, r4, asr #7
   1253c:	andeq	r2, r1, r4, asr #7
   12540:	andeq	r2, r1, r4, asr #7
   12544:	andeq	r2, r1, r4, asr #7
   12548:	andeq	r2, r1, r4, asr #7
   1254c:	andeq	r2, r1, r4, asr #7
   12550:	andeq	r2, r1, r4, asr #7
   12554:	andeq	r2, r1, r4, asr #7
   12558:	andeq	r2, r1, r4, asr #7
   1255c:	andeq	r2, r1, r4, asr #7
   12560:	andeq	r2, r1, r4, asr #7
   12564:	andeq	r2, r1, r4, asr #7
   12568:	andeq	r2, r1, r4, asr #7
   1256c:	andeq	r2, r1, r4, asr #7
   12570:	andeq	r2, r1, r4, asr #7
   12574:	andeq	r2, r1, r4, asr #7
   12578:	andeq	r2, r1, r4, asr #7
   1257c:	andeq	r2, r1, r4, asr #7
   12580:	andeq	r2, r1, r4, asr #7
   12584:	andeq	r2, r1, r4, asr #7
   12588:	andeq	r2, r1, r4, asr #7
   1258c:	andeq	r2, r1, r4, asr #7
   12590:	andeq	r2, r1, r4, asr #7
   12594:	andeq	r2, r1, r4, asr #7
   12598:	andeq	r2, r1, r4, asr #7
   1259c:	andeq	r2, r1, r8, lsl #13
   125a0:	andeq	r2, r1, r4, lsr r0
   125a4:	andeq	r2, r1, r4, asr #7
   125a8:	andeq	r2, r1, r8, lsl #13
   125ac:	andeq	r2, r1, r4, asr #7
   125b0:	andeq	r2, r1, r8, lsl #13
   125b4:	andeq	r2, r1, r4, asr #7
   125b8:	andeq	r2, r1, r4, asr #7
   125bc:	andeq	r2, r1, r4, asr #7
   125c0:	andeq	r2, r1, r4, asr #7
   125c4:	andeq	r2, r1, r4, asr #7
   125c8:	andeq	r2, r1, r4, asr #7
   125cc:	andeq	r2, r1, r4, asr #7
   125d0:	andeq	r2, r1, r4, asr #7
   125d4:	andeq	r2, r1, r4, asr #7
   125d8:	andeq	r2, r1, r4, asr #7
   125dc:	andeq	r2, r1, r4, asr #7
   125e0:	andeq	r2, r1, r4, asr #7
   125e4:	andeq	r2, r1, r4, asr #7
   125e8:	andeq	r2, r1, r4, asr #7
   125ec:	andeq	r2, r1, r4, asr #7
   125f0:	andeq	r2, r1, r4, asr #7
   125f4:	andeq	r2, r1, r4, asr #7
   125f8:	andeq	r2, r1, r4, asr #7
   125fc:	andeq	r2, r1, r4, asr #7
   12600:	andeq	r2, r1, r4, asr #7
   12604:	andeq	r2, r1, r4, asr #7
   12608:	andeq	r2, r1, r4, asr #7
   1260c:	andeq	r2, r1, r4, asr #7
   12610:	andeq	r2, r1, r4, asr #7
   12614:	andeq	r2, r1, r4, asr #7
   12618:	andeq	r2, r1, r4, asr #7
   1261c:	andeq	r1, r1, r8, asr lr
   12620:	andeq	r2, r1, r8, lsl #13
   12624:	andeq	r1, r1, r8, asr lr
   12628:	andeq	r2, r1, r8, ror r6
   1262c:	mov	r3, #114	; 0x72
   12630:	b	12194 <__assert_fail@plt+0x1448>
   12634:	mov	r3, #102	; 0x66
   12638:	b	12064 <__assert_fail@plt+0x1318>
   1263c:	mov	r3, #110	; 0x6e
   12640:	b	12194 <__assert_fail@plt+0x1448>
   12644:	mov	r3, #98	; 0x62
   12648:	b	12064 <__assert_fail@plt+0x1318>
   1264c:	mov	r3, #97	; 0x61
   12650:	b	12064 <__assert_fail@plt+0x1318>
   12654:	ldr	r3, [sp, #40]	; 0x28
   12658:	cmp	r3, #0
   1265c:	bne	1226c <__assert_fail@plt+0x1520>
   12660:	ldr	r3, [sp, #156]	; 0x9c
   12664:	tst	r3, #1
   12668:	addne	r9, r9, #1
   1266c:	bne	11a00 <__assert_fail@plt+0xcb4>
   12670:	ldr	r7, [sp, #40]	; 0x28
   12674:	b	12070 <__assert_fail@plt+0x1324>
   12678:	sub	r3, fp, #2
   1267c:	clz	r3, r3
   12680:	lsr	r3, r3, #5
   12684:	b	11e84 <__assert_fail@plt+0x1138>
   12688:	sub	r3, fp, #2
   1268c:	mov	r6, #0
   12690:	clz	r3, r3
   12694:	lsr	r3, r3, #5
   12698:	ldr	r2, [sp, #44]	; 0x2c
   1269c:	tst	r2, r3
   126a0:	beq	11e90 <__assert_fail@plt+0x1144>
   126a4:	b	121ac <__assert_fail@plt+0x1460>
   126a8:	sub	r3, fp, #2
   126ac:	clz	r3, r3
   126b0:	lsr	r3, r3, #5
   126b4:	b	12698 <__assert_fail@plt+0x194c>
   126b8:	ldr	r3, [sp, #52]	; 0x34
   126bc:	ldrb	r5, [r3]
   126c0:	cmp	r5, #126	; 0x7e
   126c4:	ldrls	pc, [pc, r5, lsl #2]
   126c8:	b	12374 <__assert_fail@plt+0x1628>
   126cc:	andeq	r2, r1, ip, ror #4
   126d0:	andeq	r2, r1, r4, ror r3
   126d4:	andeq	r2, r1, r4, ror r3
   126d8:	andeq	r2, r1, r4, ror r3
   126dc:	andeq	r2, r1, r4, ror r3
   126e0:	andeq	r2, r1, r4, ror r3
   126e4:	andeq	r2, r1, r4, ror r3
   126e8:	andeq	r2, r1, r0, asr r2
   126ec:	andeq	r2, r1, r8, asr #4
   126f0:	andeq	r2, r1, r4, lsl #18
   126f4:	andeq	r2, r1, ip, lsr r2
   126f8:	strdeq	r2, [r1], -r8
   126fc:	andeq	r2, r1, r8, lsl r2
   12700:	andeq	r2, r1, r4, ror #4
   12704:	andeq	r2, r1, r4, ror r3
   12708:	andeq	r2, r1, r4, ror r3
   1270c:	andeq	r2, r1, r4, ror r3
   12710:	andeq	r2, r1, r4, ror r3
   12714:	andeq	r2, r1, r4, ror r3
   12718:	andeq	r2, r1, r4, ror r3
   1271c:	andeq	r2, r1, r4, ror r3
   12720:	andeq	r2, r1, r4, ror r3
   12724:	andeq	r2, r1, r4, ror r3
   12728:	andeq	r2, r1, r4, ror r3
   1272c:	andeq	r2, r1, r4, ror r3
   12730:	andeq	r2, r1, r4, ror r3
   12734:	andeq	r2, r1, r4, ror r3
   12738:	andeq	r2, r1, r4, ror r3
   1273c:	andeq	r2, r1, r4, ror r3
   12740:	andeq	r2, r1, r4, ror r3
   12744:	andeq	r2, r1, r4, ror r3
   12748:	andeq	r2, r1, r4, ror r3
   1274c:	strdeq	r2, [r1], -r0
   12750:	andeq	r2, r1, r8, asr r2
   12754:	andeq	r2, r1, r8, asr r2
   12758:	ldrdeq	r2, [r1], -r4
   1275c:	andeq	r2, r1, r8, asr r2
   12760:	andeq	r2, r1, r8, asr #17
   12764:	andeq	r2, r1, r8, asr r2
   12768:	strheq	r2, [r1], -r4
   1276c:	andeq	r2, r1, r8, asr r2
   12770:	andeq	r2, r1, r8, asr r2
   12774:	andeq	r2, r1, r8, asr r2
   12778:	andeq	r2, r1, r8, asr #17
   1277c:	andeq	r2, r1, r8, asr #17
   12780:	andeq	r2, r1, r8, asr #17
   12784:	andeq	r2, r1, r8, asr #17
   12788:	andeq	r2, r1, r8, asr #17
   1278c:	andeq	r2, r1, r8, asr #17
   12790:	andeq	r2, r1, r8, asr #17
   12794:	andeq	r2, r1, r8, asr #17
   12798:	andeq	r2, r1, r8, asr #17
   1279c:	andeq	r2, r1, r8, asr #17
   127a0:	andeq	r2, r1, r8, asr #17
   127a4:	andeq	r2, r1, r8, asr #17
   127a8:	andeq	r2, r1, r8, asr #17
   127ac:	andeq	r2, r1, r8, asr #17
   127b0:	andeq	r2, r1, r8, asr #17
   127b4:	andeq	r2, r1, r8, asr #17
   127b8:	andeq	r2, r1, r8, asr r2
   127bc:	andeq	r2, r1, r8, asr r2
   127c0:	andeq	r2, r1, r8, asr r2
   127c4:	andeq	r2, r1, r8, asr r2
   127c8:	andeq	r2, r1, r8, lsl #1
   127cc:	andeq	r2, r1, r4, ror r3
   127d0:	andeq	r2, r1, r8, asr #17
   127d4:	andeq	r2, r1, r8, asr #17
   127d8:	andeq	r2, r1, r8, asr #17
   127dc:	andeq	r2, r1, r8, asr #17
   127e0:	andeq	r2, r1, r8, asr #17
   127e4:	andeq	r2, r1, r8, asr #17
   127e8:	andeq	r2, r1, r8, asr #17
   127ec:	andeq	r2, r1, r8, asr #17
   127f0:	andeq	r2, r1, r8, asr #17
   127f4:	andeq	r2, r1, r8, asr #17
   127f8:	andeq	r2, r1, r8, asr #17
   127fc:	andeq	r2, r1, r8, asr #17
   12800:	andeq	r2, r1, r8, asr #17
   12804:	andeq	r2, r1, r8, asr #17
   12808:	andeq	r2, r1, r8, asr #17
   1280c:	andeq	r2, r1, r8, asr #17
   12810:	andeq	r2, r1, r8, asr #17
   12814:	andeq	r2, r1, r8, asr #17
   12818:	andeq	r2, r1, r8, asr #17
   1281c:	andeq	r2, r1, r8, asr #17
   12820:	andeq	r2, r1, r8, asr #17
   12824:	andeq	r2, r1, r8, asr #17
   12828:	andeq	r2, r1, r8, asr #17
   1282c:	andeq	r2, r1, r8, asr #17
   12830:	andeq	r2, r1, r8, asr #17
   12834:	andeq	r2, r1, r8, asr #17
   12838:	andeq	r2, r1, r8, asr r2
   1283c:	andeq	r2, r1, r0, lsr r0
   12840:	andeq	r2, r1, r8, asr #17
   12844:	andeq	r2, r1, r8, asr r2
   12848:	andeq	r2, r1, r8, asr #17
   1284c:	andeq	r2, r1, r8, asr r2
   12850:	andeq	r2, r1, r8, asr #17
   12854:	andeq	r2, r1, r8, asr #17
   12858:	andeq	r2, r1, r8, asr #17
   1285c:	andeq	r2, r1, r8, asr #17
   12860:	andeq	r2, r1, r8, asr #17
   12864:	andeq	r2, r1, r8, asr #17
   12868:	andeq	r2, r1, r8, asr #17
   1286c:	andeq	r2, r1, r8, asr #17
   12870:	andeq	r2, r1, r8, asr #17
   12874:	andeq	r2, r1, r8, asr #17
   12878:	andeq	r2, r1, r8, asr #17
   1287c:	andeq	r2, r1, r8, asr #17
   12880:	andeq	r2, r1, r8, asr #17
   12884:	andeq	r2, r1, r8, asr #17
   12888:	andeq	r2, r1, r8, asr #17
   1288c:	andeq	r2, r1, r8, asr #17
   12890:	andeq	r2, r1, r8, asr #17
   12894:	andeq	r2, r1, r8, asr #17
   12898:	andeq	r2, r1, r8, asr #17
   1289c:	andeq	r2, r1, r8, asr #17
   128a0:	andeq	r2, r1, r8, asr #17
   128a4:	andeq	r2, r1, r8, asr #17
   128a8:	andeq	r2, r1, r8, asr #17
   128ac:	andeq	r2, r1, r8, asr #17
   128b0:	andeq	r2, r1, r8, asr #17
   128b4:	andeq	r2, r1, r8, asr #17
   128b8:	andeq	r1, r1, r4, asr lr
   128bc:	andeq	r2, r1, r8, asr r2
   128c0:	andeq	r1, r1, r4, asr lr
   128c4:	ldrdeq	r2, [r1], -r4
   128c8:	mov	r6, r7
   128cc:	mov	r7, #0
   128d0:	b	12080 <__assert_fail@plt+0x1334>
   128d4:	cmp	r9, #0
   128d8:	mov	r2, #0
   128dc:	beq	12344 <__assert_fail@plt+0x15f8>
   128e0:	mov	r6, #0
   128e4:	mov	r7, r2
   128e8:	mov	r3, r6
   128ec:	b	11ea0 <__assert_fail@plt+0x1154>
   128f0:	mov	r2, #0
   128f4:	b	12358 <__assert_fail@plt+0x160c>
   128f8:	mov	r7, #0
   128fc:	mov	r3, #118	; 0x76
   12900:	b	12064 <__assert_fail@plt+0x1318>
   12904:	mov	r7, #0
   12908:	mov	r3, #116	; 0x74
   1290c:	b	12194 <__assert_fail@plt+0x1448>
   12910:	ldr	r3, [sp, #44]	; 0x2c
   12914:	b	11ec8 <__assert_fail@plt+0x117c>
   12918:	ldr	r3, [sp, #44]	; 0x2c
   1291c:	cmp	r3, #0
   12920:	bne	12d90 <__assert_fail@plt+0x2044>
   12924:	add	r9, r9, #1
   12928:	mov	r6, #0
   1292c:	ldr	r3, [sp, #48]	; 0x30
   12930:	mov	r5, #92	; 0x5c
   12934:	b	12154 <__assert_fail@plt+0x1408>
   12938:	ldr	r3, [sp, #32]
   1293c:	ldrb	r2, [r3, #1]
   12940:	adds	r2, r2, #0
   12944:	movne	r2, #1
   12948:	b	11e70 <__assert_fail@plt+0x1124>
   1294c:	ldr	r3, [sp, #156]	; 0x9c
   12950:	ands	r3, r3, #4
   12954:	beq	1297c <__assert_fail@plt+0x1c30>
   12958:	ldr	r2, [sp, #28]
   1295c:	add	r3, r9, #2
   12960:	cmp	r3, r2
   12964:	bcs	12978 <__assert_fail@plt+0x1c2c>
   12968:	ldr	r2, [sp, #52]	; 0x34
   1296c:	ldrb	r5, [r2, #1]
   12970:	cmp	r5, #63	; 0x3f
   12974:	beq	12df4 <__assert_fail@plt+0x20a8>
   12978:	mov	r3, #0
   1297c:	mov	r5, #63	; 0x3f
   12980:	mov	r6, r3
   12984:	b	11e90 <__assert_fail@plt+0x1144>
   12988:	ldr	r3, [sp, #44]	; 0x2c
   1298c:	cmp	r3, #0
   12990:	bne	12d90 <__assert_fail@plt+0x2044>
   12994:	mov	r6, r3
   12998:	mov	r5, #63	; 0x3f
   1299c:	b	11ec8 <__assert_fail@plt+0x117c>
   129a0:	ldr	r1, [sp, #28]
   129a4:	mov	r2, #0
   129a8:	mov	r3, #0
   129ac:	strd	r2, [sp, #104]	; 0x68
   129b0:	cmn	r1, #1
   129b4:	bne	129c4 <__assert_fail@plt+0x1c78>
   129b8:	ldr	r0, [sp, #32]
   129bc:	bl	10c80 <strlen@plt>
   129c0:	str	r0, [sp, #28]
   129c4:	str	r8, [sp, #76]	; 0x4c
   129c8:	mov	r3, #0
   129cc:	str	sl, [sp, #80]	; 0x50
   129d0:	ldr	sl, [sp, #32]
   129d4:	str	r5, [sp, #84]	; 0x54
   129d8:	mov	r5, r3
   129dc:	ldr	r8, [sp, #44]	; 0x2c
   129e0:	str	r7, [sp, #88]	; 0x58
   129e4:	str	r4, [sp, #92]	; 0x5c
   129e8:	ldr	r2, [sp, #28]
   129ec:	add	r4, r9, r5
   129f0:	add	r3, sp, #104	; 0x68
   129f4:	add	r7, sl, r4
   129f8:	add	r0, sp, #100	; 0x64
   129fc:	mov	r1, r7
   12a00:	sub	r2, r2, r4
   12a04:	bl	145e4 <__assert_fail@plt+0x3898>
   12a08:	subs	r1, r0, #0
   12a0c:	beq	12a58 <__assert_fail@plt+0x1d0c>
   12a10:	cmn	r1, #1
   12a14:	beq	12dd0 <__assert_fail@plt+0x2084>
   12a18:	cmn	r1, #2
   12a1c:	beq	12ef0 <__assert_fail@plt+0x21a4>
   12a20:	cmp	fp, #2
   12a24:	movne	r3, #0
   12a28:	andeq	r3, r8, #1
   12a2c:	cmp	r3, #0
   12a30:	bne	12bbc <__assert_fail@plt+0x1e70>
   12a34:	ldr	r0, [sp, #100]	; 0x64
   12a38:	add	r5, r5, r1
   12a3c:	bl	10bd8 <iswprint@plt>
   12a40:	cmp	r0, #0
   12a44:	add	r0, sp, #104	; 0x68
   12a48:	moveq	r6, #0
   12a4c:	bl	10ba8 <mbsinit@plt>
   12a50:	cmp	r0, #0
   12a54:	beq	129e8 <__assert_fail@plt+0x1c9c>
   12a58:	ldr	r3, [sp, #40]	; 0x28
   12a5c:	mov	ip, r5
   12a60:	eor	r2, r6, #1
   12a64:	ldr	r8, [sp, #76]	; 0x4c
   12a68:	ldr	sl, [sp, #80]	; 0x50
   12a6c:	and	r2, r2, r3
   12a70:	ldr	r5, [sp, #84]	; 0x54
   12a74:	ldr	r7, [sp, #88]	; 0x58
   12a78:	ldr	r4, [sp, #92]	; 0x5c
   12a7c:	cmp	ip, #1
   12a80:	bls	123bc <__assert_fail@plt+0x1670>
   12a84:	add	r1, r9, ip
   12a88:	mov	r0, #39	; 0x27
   12a8c:	ldr	lr, [sp, #52]	; 0x34
   12a90:	mov	ip, #0
   12a94:	str	r6, [sp, #52]	; 0x34
   12a98:	ldr	r6, [sp, #48]	; 0x30
   12a9c:	b	12b58 <__assert_fail@plt+0x1e0c>
   12aa0:	ldr	ip, [sp, #44]	; 0x2c
   12aa4:	sub	r3, fp, #2
   12aa8:	clz	r3, r3
   12aac:	lsr	r3, r3, #5
   12ab0:	cmp	ip, #0
   12ab4:	bne	12cc8 <__assert_fail@plt+0x1f7c>
   12ab8:	eor	ip, r6, #1
   12abc:	ands	r3, r3, ip
   12ac0:	beq	12af0 <__assert_fail@plt+0x1da4>
   12ac4:	cmp	sl, r4
   12ac8:	add	ip, r4, #1
   12acc:	strbhi	r0, [r8, r4]
   12ad0:	cmp	sl, ip
   12ad4:	movhi	r6, #36	; 0x24
   12ad8:	strbhi	r6, [r8, ip]
   12adc:	add	ip, r4, #2
   12ae0:	mov	r6, r3
   12ae4:	cmp	sl, ip
   12ae8:	add	r4, r4, #3
   12aec:	strbhi	r0, [r8, ip]
   12af0:	cmp	sl, r4
   12af4:	movhi	r3, #92	; 0x5c
   12af8:	strbhi	r3, [r8, r4]
   12afc:	add	r3, r4, #1
   12b00:	cmp	sl, r3
   12b04:	bls	12b14 <__assert_fail@plt+0x1dc8>
   12b08:	lsr	ip, r5, #6
   12b0c:	add	ip, ip, #48	; 0x30
   12b10:	strb	ip, [r8, r3]
   12b14:	add	r3, r4, #2
   12b18:	cmp	sl, r3
   12b1c:	bls	12b2c <__assert_fail@plt+0x1de0>
   12b20:	ubfx	ip, r5, #3, #3
   12b24:	add	ip, ip, #48	; 0x30
   12b28:	strb	ip, [r8, r3]
   12b2c:	add	r9, r9, #1
   12b30:	and	r5, r5, #7
   12b34:	cmp	r9, r1
   12b38:	add	r5, r5, #48	; 0x30
   12b3c:	add	r4, r4, #3
   12b40:	bcs	12cf4 <__assert_fail@plt+0x1fa8>
   12b44:	mov	ip, r2
   12b48:	cmp	sl, r4
   12b4c:	strbhi	r5, [r8, r4]
   12b50:	add	r4, r4, #1
   12b54:	ldrb	r5, [lr, #1]!
   12b58:	cmp	r2, #0
   12b5c:	bne	12aa0 <__assert_fail@plt+0x1d54>
   12b60:	eor	r3, ip, #1
   12b64:	cmp	r7, #0
   12b68:	and	r3, r3, r6
   12b6c:	uxtb	r3, r3
   12b70:	beq	12b84 <__assert_fail@plt+0x1e38>
   12b74:	cmp	sl, r4
   12b78:	movhi	r7, #92	; 0x5c
   12b7c:	strbhi	r7, [r8, r4]
   12b80:	add	r4, r4, #1
   12b84:	add	r9, r9, #1
   12b88:	cmp	r9, r1
   12b8c:	bcs	12cdc <__assert_fail@plt+0x1f90>
   12b90:	cmp	r3, #0
   12b94:	beq	12d14 <__assert_fail@plt+0x1fc8>
   12b98:	cmp	sl, r4
   12b9c:	add	r3, r4, #1
   12ba0:	mov	r7, #0
   12ba4:	strbhi	r0, [r8, r4]
   12ba8:	cmp	sl, r3
   12bac:	add	r4, r4, #2
   12bb0:	mov	r6, r7
   12bb4:	strbhi	r0, [r8, r3]
   12bb8:	b	12b48 <__assert_fail@plt+0x1dfc>
   12bbc:	cmp	r1, #1
   12bc0:	beq	12a34 <__assert_fail@plt+0x1ce8>
   12bc4:	add	r2, r4, #1
   12bc8:	add	r3, sl, r1
   12bcc:	add	r2, sl, r2
   12bd0:	add	r4, r3, r4
   12bd4:	ldrb	r3, [r2], #1
   12bd8:	sub	r3, r3, #91	; 0x5b
   12bdc:	cmp	r3, #33	; 0x21
   12be0:	ldrls	pc, [pc, r3, lsl #2]
   12be4:	b	12c70 <__assert_fail@plt+0x1f24>
   12be8:	andeq	r2, r1, ip, ror ip
   12bec:	andeq	r2, r1, ip, ror ip
   12bf0:	andeq	r2, r1, r0, ror ip
   12bf4:	andeq	r2, r1, ip, ror ip
   12bf8:	andeq	r2, r1, r0, ror ip
   12bfc:	andeq	r2, r1, ip, ror ip
   12c00:	andeq	r2, r1, r0, ror ip
   12c04:	andeq	r2, r1, r0, ror ip
   12c08:	andeq	r2, r1, r0, ror ip
   12c0c:	andeq	r2, r1, r0, ror ip
   12c10:	andeq	r2, r1, r0, ror ip
   12c14:	andeq	r2, r1, r0, ror ip
   12c18:	andeq	r2, r1, r0, ror ip
   12c1c:	andeq	r2, r1, r0, ror ip
   12c20:	andeq	r2, r1, r0, ror ip
   12c24:	andeq	r2, r1, r0, ror ip
   12c28:	andeq	r2, r1, r0, ror ip
   12c2c:	andeq	r2, r1, r0, ror ip
   12c30:	andeq	r2, r1, r0, ror ip
   12c34:	andeq	r2, r1, r0, ror ip
   12c38:	andeq	r2, r1, r0, ror ip
   12c3c:	andeq	r2, r1, r0, ror ip
   12c40:	andeq	r2, r1, r0, ror ip
   12c44:	andeq	r2, r1, r0, ror ip
   12c48:	andeq	r2, r1, r0, ror ip
   12c4c:	andeq	r2, r1, r0, ror ip
   12c50:	andeq	r2, r1, r0, ror ip
   12c54:	andeq	r2, r1, r0, ror ip
   12c58:	andeq	r2, r1, r0, ror ip
   12c5c:	andeq	r2, r1, r0, ror ip
   12c60:	andeq	r2, r1, r0, ror ip
   12c64:	andeq	r2, r1, r0, ror ip
   12c68:	andeq	r2, r1, r0, ror ip
   12c6c:	andeq	r2, r1, ip, ror ip
   12c70:	cmp	r4, r2
   12c74:	bne	12bd4 <__assert_fail@plt+0x1e88>
   12c78:	b	12a34 <__assert_fail@plt+0x1ce8>
   12c7c:	mov	r8, #2
   12c80:	ldr	fp, [sp, #76]	; 0x4c
   12c84:	ldr	sl, [sp, #80]	; 0x50
   12c88:	b	121b4 <__assert_fail@plt+0x1468>
   12c8c:	ldr	r2, [sp, #40]	; 0x28
   12c90:	str	fp, [sp, #152]	; 0x98
   12c94:	mov	fp, r8
   12c98:	ldr	r8, [sp, #152]	; 0x98
   12c9c:	and	r2, r2, r3
   12ca0:	str	r2, [sp, #40]	; 0x28
   12ca4:	b	121b4 <__assert_fail@plt+0x1468>
   12ca8:	cmp	sl, r4
   12cac:	movls	r0, r4
   12cb0:	bls	122e4 <__assert_fail@plt+0x1598>
   12cb4:	ldr	r3, [sp, #48]	; 0x30
   12cb8:	b	122d4 <__assert_fail@plt+0x1588>
   12cbc:	str	sl, [sp, #72]	; 0x48
   12cc0:	ldr	sl, [sp, #44]	; 0x2c
   12cc4:	b	12124 <__assert_fail@plt+0x13d8>
   12cc8:	str	r3, [sp, #40]	; 0x28
   12ccc:	str	fp, [sp, #152]	; 0x98
   12cd0:	mov	fp, r8
   12cd4:	ldr	r8, [sp, #152]	; 0x98
   12cd8:	b	121b4 <__assert_fail@plt+0x1468>
   12cdc:	str	r6, [sp, #48]	; 0x30
   12ce0:	ldr	r6, [sp, #52]	; 0x34
   12ce4:	b	12154 <__assert_fail@plt+0x1408>
   12ce8:	mov	r6, #0
   12cec:	ldr	r2, [sp, #40]	; 0x28
   12cf0:	b	12a84 <__assert_fail@plt+0x1d38>
   12cf4:	str	r6, [sp, #48]	; 0x30
   12cf8:	ldr	r6, [sp, #52]	; 0x34
   12cfc:	b	11f40 <__assert_fail@plt+0x11f4>
   12d00:	add	r4, r4, #4
   12d04:	mov	r6, #0
   12d08:	str	r3, [sp, #48]	; 0x30
   12d0c:	mov	r5, #48	; 0x30
   12d10:	b	11ec8 <__assert_fail@plt+0x117c>
   12d14:	mov	r7, r3
   12d18:	b	12b48 <__assert_fail@plt+0x1dfc>
   12d1c:	mov	r3, #1
   12d20:	movw	r2, #19960	; 0x4df8
   12d24:	movt	r2, #1
   12d28:	mov	r4, r3
   12d2c:	str	r3, [sp, #36]	; 0x24
   12d30:	str	r3, [sp, #40]	; 0x28
   12d34:	str	sl, [sp, #44]	; 0x2c
   12d38:	str	sl, [sp, #48]	; 0x30
   12d3c:	str	r3, [sp, #56]	; 0x38
   12d40:	str	r2, [sp, #60]	; 0x3c
   12d44:	str	sl, [sp, #68]	; 0x44
   12d48:	str	sl, [sp, #72]	; 0x48
   12d4c:	b	119f0 <__assert_fail@plt+0xca4>
   12d50:	mov	r3, r6
   12d54:	mov	r5, #48	; 0x30
   12d58:	mov	r6, #0
   12d5c:	b	11ec8 <__assert_fail@plt+0x117c>
   12d60:	mov	r5, r3
   12d64:	b	12240 <__assert_fail@plt+0x14f4>
   12d68:	cmp	sl, r4
   12d6c:	mov	r5, #48	; 0x30
   12d70:	movhi	r3, #48	; 0x30
   12d74:	strbhi	r3, [r8, r4]
   12d78:	add	r3, r0, #2
   12d7c:	add	r4, r0, #3
   12d80:	cmp	sl, r3
   12d84:	movhi	r1, #48	; 0x30
   12d88:	strbhi	r1, [r8, r3]
   12d8c:	b	12318 <__assert_fail@plt+0x15cc>
   12d90:	str	fp, [sp, #152]	; 0x98
   12d94:	mov	fp, r8
   12d98:	ldr	r8, [sp, #152]	; 0x98
   12d9c:	b	121b4 <__assert_fail@plt+0x1468>
   12da0:	ldr	r3, [sp, #164]	; 0xa4
   12da4:	ldrb	r3, [r3]
   12da8:	cmp	r3, #0
   12dac:	beq	119c0 <__assert_fail@plt+0xc74>
   12db0:	ldr	r2, [sp, #164]	; 0xa4
   12db4:	cmp	sl, r4
   12db8:	strbhi	r3, [fp, r4]
   12dbc:	add	r4, r4, #1
   12dc0:	ldrb	r3, [r2, #1]!
   12dc4:	cmp	r3, #0
   12dc8:	bne	12db4 <__assert_fail@plt+0x2068>
   12dcc:	b	119c0 <__assert_fail@plt+0xc74>
   12dd0:	mov	ip, r5
   12dd4:	mov	r6, #0
   12dd8:	ldr	r2, [sp, #40]	; 0x28
   12ddc:	ldr	r8, [sp, #76]	; 0x4c
   12de0:	ldr	sl, [sp, #80]	; 0x50
   12de4:	ldr	r5, [sp, #84]	; 0x54
   12de8:	ldr	r7, [sp, #88]	; 0x58
   12dec:	ldr	r4, [sp, #92]	; 0x5c
   12df0:	b	12a7c <__assert_fail@plt+0x1d30>
   12df4:	ldr	r2, [sp, #32]
   12df8:	ldrb	r1, [r2, r3]
   12dfc:	sub	r2, r1, #33	; 0x21
   12e00:	cmp	r2, #29
   12e04:	ldrls	pc, [pc, r2, lsl #2]
   12e08:	b	12ee4 <__assert_fail@plt+0x2198>
   12e0c:	andeq	r2, r1, r4, lsl #29
   12e10:	andeq	r2, r1, r4, ror #29
   12e14:	andeq	r2, r1, r4, ror #29
   12e18:	andeq	r2, r1, r4, ror #29
   12e1c:	andeq	r2, r1, r4, ror #29
   12e20:	andeq	r2, r1, r4, ror #29
   12e24:	andeq	r2, r1, r4, lsl #29
   12e28:	andeq	r2, r1, r4, lsl #29
   12e2c:	andeq	r2, r1, r4, lsl #29
   12e30:	andeq	r2, r1, r4, ror #29
   12e34:	andeq	r2, r1, r4, ror #29
   12e38:	andeq	r2, r1, r4, ror #29
   12e3c:	andeq	r2, r1, r4, lsl #29
   12e40:	andeq	r2, r1, r4, ror #29
   12e44:	andeq	r2, r1, r4, lsl #29
   12e48:	andeq	r2, r1, r4, ror #29
   12e4c:	andeq	r2, r1, r4, ror #29
   12e50:	andeq	r2, r1, r4, ror #29
   12e54:	andeq	r2, r1, r4, ror #29
   12e58:	andeq	r2, r1, r4, ror #29
   12e5c:	andeq	r2, r1, r4, ror #29
   12e60:	andeq	r2, r1, r4, ror #29
   12e64:	andeq	r2, r1, r4, ror #29
   12e68:	andeq	r2, r1, r4, ror #29
   12e6c:	andeq	r2, r1, r4, ror #29
   12e70:	andeq	r2, r1, r4, ror #29
   12e74:	andeq	r2, r1, r4, ror #29
   12e78:	andeq	r2, r1, r4, lsl #29
   12e7c:	andeq	r2, r1, r4, lsl #29
   12e80:	andeq	r2, r1, r4, lsl #29
   12e84:	ldr	r2, [sp, #44]	; 0x2c
   12e88:	cmp	r2, #0
   12e8c:	bne	12fe8 <__assert_fail@plt+0x229c>
   12e90:	cmp	sl, r4
   12e94:	mov	r5, r1
   12e98:	movhi	r2, #63	; 0x3f
   12e9c:	mov	r9, r3
   12ea0:	strbhi	r2, [r8, r4]
   12ea4:	add	r2, r4, #1
   12ea8:	cmp	sl, r2
   12eac:	movhi	r0, #34	; 0x22
   12eb0:	strbhi	r0, [r8, r2]
   12eb4:	add	r2, r4, #2
   12eb8:	cmp	sl, r2
   12ebc:	movhi	r0, #34	; 0x22
   12ec0:	strbhi	r0, [r8, r2]
   12ec4:	add	r2, r4, #3
   12ec8:	add	r4, r4, #4
   12ecc:	cmp	sl, r2
   12ed0:	movhi	r0, #63	; 0x3f
   12ed4:	strbhi	r0, [r8, r2]
   12ed8:	mov	r2, #0
   12edc:	mov	r6, r2
   12ee0:	b	12318 <__assert_fail@plt+0x15cc>
   12ee4:	mov	r3, #0
   12ee8:	mov	r6, r3
   12eec:	b	11e90 <__assert_fail@plt+0x1144>
   12ef0:	ldr	r0, [sp, #28]
   12ef4:	mov	r1, r4
   12ef8:	mov	r2, r7
   12efc:	mov	r3, r5
   12f00:	mov	ip, r5
   12f04:	ldr	r8, [sp, #76]	; 0x4c
   12f08:	ldr	sl, [sp, #80]	; 0x50
   12f0c:	cmp	r1, r0
   12f10:	ldr	r5, [sp, #84]	; 0x54
   12f14:	ldr	r7, [sp, #88]	; 0x58
   12f18:	ldr	r4, [sp, #92]	; 0x5c
   12f1c:	bcs	12f50 <__assert_fail@plt+0x2204>
   12f20:	ldrb	r6, [r2]
   12f24:	cmp	r6, #0
   12f28:	bne	12f3c <__assert_fail@plt+0x21f0>
   12f2c:	b	13070 <__assert_fail@plt+0x2324>
   12f30:	ldrb	r6, [r2, #1]!
   12f34:	cmp	r6, #0
   12f38:	beq	12ff8 <__assert_fail@plt+0x22ac>
   12f3c:	add	r3, r3, #1
   12f40:	add	r1, r9, r3
   12f44:	cmp	r1, r0
   12f48:	bcc	12f30 <__assert_fail@plt+0x21e4>
   12f4c:	mov	ip, r3
   12f50:	mov	r6, #0
   12f54:	ldr	r2, [sp, #40]	; 0x28
   12f58:	b	12a7c <__assert_fail@plt+0x1d30>
   12f5c:	mov	r3, #1
   12f60:	mov	r2, #0
   12f64:	mov	r4, r2
   12f68:	str	r3, [sp, #36]	; 0x24
   12f6c:	str	r3, [sp, #40]	; 0x28
   12f70:	str	r3, [sp, #44]	; 0x2c
   12f74:	str	r2, [sp, #48]	; 0x30
   12f78:	str	r3, [sp, #56]	; 0x38
   12f7c:	movw	r3, #19960	; 0x4df8
   12f80:	movt	r3, #1
   12f84:	str	r3, [sp, #60]	; 0x3c
   12f88:	str	r2, [sp, #68]	; 0x44
   12f8c:	str	r2, [sp, #72]	; 0x48
   12f90:	b	119f0 <__assert_fail@plt+0xca4>
   12f94:	mov	r2, r3
   12f98:	ldr	r3, [sp, #60]	; 0x3c
   12f9c:	cmp	r3, #0
   12fa0:	moveq	r2, #0
   12fa4:	andne	r2, r2, #1
   12fa8:	cmp	r2, #0
   12fac:	beq	12fd8 <__assert_fail@plt+0x228c>
   12fb0:	mov	r2, r3
   12fb4:	ldrb	r3, [r3]
   12fb8:	cmp	r3, #0
   12fbc:	beq	12fd8 <__assert_fail@plt+0x228c>
   12fc0:	cmp	sl, r4
   12fc4:	strbhi	r3, [fp, r4]
   12fc8:	add	r4, r4, #1
   12fcc:	ldrb	r3, [r2, #1]!
   12fd0:	cmp	r3, #0
   12fd4:	bne	12fc0 <__assert_fail@plt+0x2274>
   12fd8:	cmp	sl, r4
   12fdc:	movhi	r3, #0
   12fe0:	strbhi	r3, [fp, r4]
   12fe4:	b	121f8 <__assert_fail@plt+0x14ac>
   12fe8:	str	fp, [sp, #152]	; 0x98
   12fec:	mov	fp, r8
   12ff0:	ldr	r8, [sp, #152]	; 0x98
   12ff4:	b	121c0 <__assert_fail@plt+0x1474>
   12ff8:	mov	ip, r3
   12ffc:	ldr	r2, [sp, #40]	; 0x28
   13000:	b	12a7c <__assert_fail@plt+0x1d30>
   13004:	str	fp, [sp, #152]	; 0x98
   13008:	mov	fp, r8
   1300c:	ldr	r8, [sp, #152]	; 0x98
   13010:	sub	r3, r8, #2
   13014:	clz	r3, r3
   13018:	lsr	r3, r3, #5
   1301c:	str	r3, [sp, #40]	; 0x28
   13020:	b	121b4 <__assert_fail@plt+0x1468>
   13024:	mov	ip, #5
   13028:	ldr	r3, [sp, #28]
   1302c:	str	ip, [sp]
   13030:	ldr	r2, [sp, #156]	; 0x9c
   13034:	ldr	ip, [sp, #164]	; 0xa4
   13038:	ldr	r0, [sp, #160]	; 0xa0
   1303c:	str	r2, [sp, #4]
   13040:	ldr	r2, [sp, #32]
   13044:	ldr	r1, [sp, #72]	; 0x48
   13048:	str	ip, [sp, #12]
   1304c:	ldr	ip, [sp, #168]	; 0xa8
   13050:	str	r0, [sp, #8]
   13054:	mov	r0, fp
   13058:	str	ip, [sp, #16]
   1305c:	bl	11908 <__assert_fail@plt+0xbbc>
   13060:	mov	r4, r0
   13064:	b	121f8 <__assert_fail@plt+0x14ac>
   13068:	mov	r8, #2
   1306c:	b	121b4 <__assert_fail@plt+0x1468>
   13070:	ldr	r2, [sp, #40]	; 0x28
   13074:	b	12a7c <__assert_fail@plt+0x1d30>
   13078:	mov	r3, #0
   1307c:	mov	r2, #1
   13080:	mov	r4, r3
   13084:	strd	r2, [sp, #36]	; 0x24
   13088:	strd	r2, [sp, #44]	; 0x2c
   1308c:	str	r2, [sp, #56]	; 0x38
   13090:	str	r3, [sp, #68]	; 0x44
   13094:	str	r3, [sp, #72]	; 0x48
   13098:	movw	r3, #19980	; 0x4e0c
   1309c:	movt	r3, #1
   130a0:	str	r3, [sp, #60]	; 0x3c
   130a4:	b	119f0 <__assert_fail@plt+0xca4>
   130a8:	mov	r3, #0
   130ac:	mov	r1, #1
   130b0:	mov	r2, r3
   130b4:	str	r1, [sp, #36]	; 0x24
   130b8:	str	r3, [sp, #48]	; 0x30
   130bc:	str	sl, [sp, #72]	; 0x48
   130c0:	b	11ff8 <__assert_fail@plt+0x12ac>
   130c4:	bl	10d40 <abort@plt>
   130c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130cc:	mov	r4, r0
   130d0:	mov	r5, r3
   130d4:	strd	r6, [sp, #8]
   130d8:	movw	r7, #24788	; 0x60d4
   130dc:	movt	r7, #2
   130e0:	strd	r8, [sp, #16]
   130e4:	strd	sl, [sp, #24]
   130e8:	mov	sl, r1
   130ec:	mov	fp, r2
   130f0:	str	lr, [sp, #32]
   130f4:	sub	sp, sp, #60	; 0x3c
   130f8:	bl	10c98 <__errno_location@plt>
   130fc:	mov	r8, r0
   13100:	cmn	r4, #-2147483647	; 0x80000001
   13104:	ldr	r6, [r7]
   13108:	movne	r0, #0
   1310c:	moveq	r0, #1
   13110:	ldr	r3, [r8]
   13114:	orrs	r0, r0, r4, lsr #31
   13118:	str	r3, [sp, #28]
   1311c:	bne	132ac <__assert_fail@plt+0x2560>
   13120:	ldr	r3, [r7, #4]
   13124:	cmp	r3, r4
   13128:	bgt	13188 <__assert_fail@plt+0x243c>
   1312c:	add	r1, r7, #8
   13130:	sub	r2, r4, r3
   13134:	str	r3, [sp, #52]	; 0x34
   13138:	cmp	r6, r1
   1313c:	add	r2, r2, #1
   13140:	beq	13284 <__assert_fail@plt+0x2538>
   13144:	mov	r1, #8
   13148:	mov	r0, r6
   1314c:	mvn	r3, #-2147483648	; 0x80000000
   13150:	str	r1, [sp]
   13154:	add	r1, sp, #52	; 0x34
   13158:	bl	140e0 <__assert_fail@plt+0x3394>
   1315c:	mov	r6, r0
   13160:	str	r0, [r7]
   13164:	ldr	r0, [r7, #4]
   13168:	mov	r1, #0
   1316c:	ldr	r2, [sp, #52]	; 0x34
   13170:	sub	r2, r2, r0
   13174:	add	r0, r6, r0, lsl #3
   13178:	lsl	r2, r2, #3
   1317c:	bl	10cb0 <memset@plt>
   13180:	ldr	r3, [sp, #52]	; 0x34
   13184:	str	r3, [r7, #4]
   13188:	ldr	r1, [r5, #4]
   1318c:	add	r0, r6, r4, lsl #3
   13190:	add	ip, r5, #8
   13194:	mov	r3, fp
   13198:	mov	r2, sl
   1319c:	ldr	r7, [r0, #4]
   131a0:	str	r0, [sp, #36]	; 0x24
   131a4:	str	ip, [sp, #40]	; 0x28
   131a8:	orr	r0, r1, #1
   131ac:	ldr	r9, [r6, r4, lsl #3]
   131b0:	str	ip, [sp, #8]
   131b4:	ldr	lr, [r5, #44]	; 0x2c
   131b8:	str	r0, [sp, #4]
   131bc:	ldr	ip, [r5]
   131c0:	mov	r1, r9
   131c4:	str	ip, [sp, #32]
   131c8:	ldr	ip, [r5, #40]	; 0x28
   131cc:	str	ip, [sp, #12]
   131d0:	ldr	ip, [sp, #32]
   131d4:	str	lr, [sp, #16]
   131d8:	str	r0, [sp, #44]	; 0x2c
   131dc:	mov	r0, r7
   131e0:	str	ip, [sp]
   131e4:	bl	11908 <__assert_fail@plt+0xbbc>
   131e8:	cmp	r9, r0
   131ec:	bhi	1325c <__assert_fail@plt+0x2510>
   131f0:	add	r9, r0, #1
   131f4:	movw	r3, #24908	; 0x614c
   131f8:	movt	r3, #2
   131fc:	cmp	r7, r3
   13200:	str	r9, [r6, r4, lsl #3]
   13204:	beq	13210 <__assert_fail@plt+0x24c4>
   13208:	mov	r0, r7
   1320c:	bl	14478 <__assert_fail@plt+0x372c>
   13210:	mov	r0, r9
   13214:	bl	13f30 <__assert_fail@plt+0x31e4>
   13218:	ldr	ip, [r5]
   1321c:	mov	r3, fp
   13220:	mov	r2, sl
   13224:	mov	r1, r9
   13228:	mov	r7, r0
   1322c:	ldr	lr, [sp, #36]	; 0x24
   13230:	ldr	r4, [r5, #40]	; 0x28
   13234:	str	r0, [lr, #4]
   13238:	ldr	lr, [r5, #44]	; 0x2c
   1323c:	str	ip, [sp]
   13240:	ldr	ip, [sp, #44]	; 0x2c
   13244:	str	ip, [sp, #4]
   13248:	ldr	ip, [sp, #40]	; 0x28
   1324c:	str	r4, [sp, #12]
   13250:	str	lr, [sp, #16]
   13254:	str	ip, [sp, #8]
   13258:	bl	11908 <__assert_fail@plt+0xbbc>
   1325c:	ldr	r3, [sp, #28]
   13260:	mov	r0, r7
   13264:	str	r3, [r8]
   13268:	add	sp, sp, #60	; 0x3c
   1326c:	ldrd	r4, [sp]
   13270:	ldrd	r6, [sp, #8]
   13274:	ldrd	r8, [sp, #16]
   13278:	ldrd	sl, [sp, #24]
   1327c:	add	sp, sp, #32
   13280:	pop	{pc}		; (ldr pc, [sp], #4)
   13284:	mov	r1, #8
   13288:	mvn	r3, #-2147483648	; 0x80000000
   1328c:	str	r1, [sp]
   13290:	add	r1, sp, #52	; 0x34
   13294:	bl	140e0 <__assert_fail@plt+0x3394>
   13298:	ldrd	r2, [r7, #8]
   1329c:	mov	r6, r0
   132a0:	str	r0, [r7]
   132a4:	strd	r2, [r0]
   132a8:	b	13164 <__assert_fail@plt+0x2418>
   132ac:	bl	10d40 <abort@plt>
   132b0:	strd	r4, [sp, #-16]!
   132b4:	mov	r5, r0
   132b8:	str	r6, [sp, #8]
   132bc:	str	lr, [sp, #12]
   132c0:	bl	10c98 <__errno_location@plt>
   132c4:	mov	r4, r0
   132c8:	cmp	r5, #0
   132cc:	ldr	r0, [pc, #32]	; 132f4 <__assert_fail@plt+0x25a8>
   132d0:	mov	r1, #48	; 0x30
   132d4:	movne	r0, r5
   132d8:	ldr	r6, [r4]
   132dc:	bl	14258 <__assert_fail@plt+0x350c>
   132e0:	str	r6, [r4]
   132e4:	ldrd	r4, [sp]
   132e8:	ldr	r6, [sp, #8]
   132ec:	add	sp, sp, #12
   132f0:	pop	{pc}		; (ldr pc, [sp], #4)
   132f4:	andeq	r6, r2, ip, asr #4
   132f8:	ldr	r3, [pc, #12]	; 1330c <__assert_fail@plt+0x25c0>
   132fc:	cmp	r0, #0
   13300:	moveq	r0, r3
   13304:	ldr	r0, [r0]
   13308:	bx	lr
   1330c:	andeq	r6, r2, ip, asr #4
   13310:	ldr	r3, [pc, #12]	; 13324 <__assert_fail@plt+0x25d8>
   13314:	cmp	r0, #0
   13318:	moveq	r0, r3
   1331c:	str	r1, [r0]
   13320:	bx	lr
   13324:	andeq	r6, r2, ip, asr #4
   13328:	ldr	r3, [pc, #52]	; 13364 <__assert_fail@plt+0x2618>
   1332c:	cmp	r0, #0
   13330:	push	{lr}		; (str lr, [sp, #-4]!)
   13334:	lsr	lr, r1, #5
   13338:	and	r1, r1, #31
   1333c:	moveq	r0, r3
   13340:	add	r3, r0, #8
   13344:	ldr	ip, [r3, lr, lsl #2]
   13348:	lsr	r0, ip, r1
   1334c:	eor	r2, r2, r0
   13350:	and	r0, r0, #1
   13354:	and	r2, r2, #1
   13358:	eor	r1, ip, r2, lsl r1
   1335c:	str	r1, [r3, lr, lsl #2]
   13360:	pop	{pc}		; (ldr pc, [sp], #4)
   13364:	andeq	r6, r2, ip, asr #4
   13368:	ldr	r3, [pc, #16]	; 13380 <__assert_fail@plt+0x2634>
   1336c:	cmp	r0, #0
   13370:	movne	r3, r0
   13374:	ldr	r0, [r3, #4]
   13378:	str	r1, [r3, #4]
   1337c:	bx	lr
   13380:	andeq	r6, r2, ip, asr #4
   13384:	ldr	r3, [pc, #48]	; 133bc <__assert_fail@plt+0x2670>
   13388:	cmp	r0, #0
   1338c:	mov	ip, #10
   13390:	moveq	r0, r3
   13394:	cmp	r2, #0
   13398:	cmpne	r1, #0
   1339c:	str	ip, [r0]
   133a0:	beq	133b0 <__assert_fail@plt+0x2664>
   133a4:	str	r1, [r0, #40]	; 0x28
   133a8:	str	r2, [r0, #44]	; 0x2c
   133ac:	bx	lr
   133b0:	str	r4, [sp, #-8]!
   133b4:	str	lr, [sp, #4]
   133b8:	bl	10d40 <abort@plt>
   133bc:	andeq	r6, r2, ip, asr #4
   133c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   133c4:	strd	r6, [sp, #8]
   133c8:	mov	r7, r0
   133cc:	mov	r6, r1
   133d0:	strd	r8, [sp, #16]
   133d4:	mov	r8, r2
   133d8:	mov	r9, r3
   133dc:	str	lr, [sp, #24]
   133e0:	sub	sp, sp, #28
   133e4:	ldr	r4, [sp, #56]	; 0x38
   133e8:	ldr	ip, [pc, #104]	; 13458 <__assert_fail@plt+0x270c>
   133ec:	cmp	r4, #0
   133f0:	moveq	r4, ip
   133f4:	bl	10c98 <__errno_location@plt>
   133f8:	ldr	ip, [r4, #44]	; 0x2c
   133fc:	mov	r5, r0
   13400:	mov	r1, r6
   13404:	add	lr, r4, #8
   13408:	mov	r3, r9
   1340c:	ldr	r6, [r5]
   13410:	mov	r2, r8
   13414:	mov	r0, r7
   13418:	str	ip, [sp, #16]
   1341c:	ldr	ip, [r4, #40]	; 0x28
   13420:	str	lr, [sp, #8]
   13424:	str	ip, [sp, #12]
   13428:	ldr	ip, [r4, #4]
   1342c:	str	ip, [sp, #4]
   13430:	ldr	ip, [r4]
   13434:	str	ip, [sp]
   13438:	bl	11908 <__assert_fail@plt+0xbbc>
   1343c:	str	r6, [r5]
   13440:	add	sp, sp, #28
   13444:	ldrd	r4, [sp]
   13448:	ldrd	r6, [sp, #8]
   1344c:	ldrd	r8, [sp, #16]
   13450:	add	sp, sp, #24
   13454:	pop	{pc}		; (ldr pc, [sp], #4)
   13458:	andeq	r6, r2, ip, asr #4
   1345c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13460:	cmp	r3, #0
   13464:	ldr	r4, [pc, #220]	; 13548 <__assert_fail@plt+0x27fc>
   13468:	movne	r4, r3
   1346c:	strd	r6, [sp, #8]
   13470:	mov	r6, r2
   13474:	strd	r8, [sp, #16]
   13478:	mov	r9, r0
   1347c:	strd	sl, [sp, #24]
   13480:	mov	sl, r1
   13484:	str	lr, [sp, #32]
   13488:	sub	sp, sp, #44	; 0x2c
   1348c:	bl	10c98 <__errno_location@plt>
   13490:	ldr	r5, [r4, #4]
   13494:	mov	r7, r0
   13498:	mov	r1, #0
   1349c:	add	r8, r4, #8
   134a0:	mov	r3, sl
   134a4:	ldr	ip, [r4, #44]	; 0x2c
   134a8:	mov	r2, r9
   134ac:	mov	r0, r1
   134b0:	ldr	lr, [r7]
   134b4:	cmp	r6, r1
   134b8:	orreq	r5, r5, #1
   134bc:	str	ip, [sp, #16]
   134c0:	ldr	ip, [r4, #40]	; 0x28
   134c4:	stmib	sp, {r5, r8, ip}
   134c8:	ldr	ip, [r4]
   134cc:	str	lr, [sp, #28]
   134d0:	str	ip, [sp]
   134d4:	bl	11908 <__assert_fail@plt+0xbbc>
   134d8:	add	r1, r0, #1
   134dc:	mov	fp, r0
   134e0:	mov	r0, r1
   134e4:	str	r1, [sp, #36]	; 0x24
   134e8:	bl	13f30 <__assert_fail@plt+0x31e4>
   134ec:	ldr	ip, [r4, #44]	; 0x2c
   134f0:	mov	r3, sl
   134f4:	mov	r2, r9
   134f8:	ldr	r1, [sp, #36]	; 0x24
   134fc:	str	ip, [sp, #16]
   13500:	ldr	ip, [r4, #40]	; 0x28
   13504:	str	r0, [sp, #32]
   13508:	stmib	sp, {r5, r8, ip}
   1350c:	ldr	ip, [r4]
   13510:	str	ip, [sp]
   13514:	bl	11908 <__assert_fail@plt+0xbbc>
   13518:	ldr	lr, [sp, #28]
   1351c:	cmp	r6, #0
   13520:	ldr	r0, [sp, #32]
   13524:	str	lr, [r7]
   13528:	strne	fp, [r6]
   1352c:	add	sp, sp, #44	; 0x2c
   13530:	ldrd	r4, [sp]
   13534:	ldrd	r6, [sp, #8]
   13538:	ldrd	r8, [sp, #16]
   1353c:	ldrd	sl, [sp, #24]
   13540:	add	sp, sp, #32
   13544:	pop	{pc}		; (ldr pc, [sp], #4)
   13548:	andeq	r6, r2, ip, asr #4
   1354c:	mov	r3, r2
   13550:	mov	r2, #0
   13554:	b	1345c <__assert_fail@plt+0x2710>
   13558:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1355c:	movw	r5, #24788	; 0x60d4
   13560:	movt	r5, #2
   13564:	ldr	r3, [r5, #4]
   13568:	strd	r6, [sp, #8]
   1356c:	str	r8, [sp, #16]
   13570:	str	lr, [sp, #20]
   13574:	ldr	r7, [r5]
   13578:	cmp	r3, #1
   1357c:	ble	135a0 <__assert_fail@plt+0x2854>
   13580:	mov	r4, #1
   13584:	add	r6, r7, #4
   13588:	ldr	r0, [r6, r4, lsl #3]
   1358c:	add	r4, r4, #1
   13590:	bl	14478 <__assert_fail@plt+0x372c>
   13594:	ldr	r3, [r5, #4]
   13598:	cmp	r3, r4
   1359c:	bgt	13588 <__assert_fail@plt+0x283c>
   135a0:	ldr	r0, [r7, #4]
   135a4:	movw	r4, #24908	; 0x614c
   135a8:	movt	r4, #2
   135ac:	cmp	r0, r4
   135b0:	beq	135c4 <__assert_fail@plt+0x2878>
   135b4:	bl	14478 <__assert_fail@plt+0x372c>
   135b8:	mov	r3, #256	; 0x100
   135bc:	str	r3, [r5, #8]
   135c0:	str	r4, [r5, #12]
   135c4:	ldr	r4, [pc, #44]	; 135f8 <__assert_fail@plt+0x28ac>
   135c8:	cmp	r7, r4
   135cc:	beq	135dc <__assert_fail@plt+0x2890>
   135d0:	mov	r0, r7
   135d4:	bl	14478 <__assert_fail@plt+0x372c>
   135d8:	str	r4, [r5]
   135dc:	mov	r3, #1
   135e0:	ldrd	r6, [sp, #8]
   135e4:	str	r3, [r5, #4]
   135e8:	ldrd	r4, [sp]
   135ec:	ldr	r8, [sp, #16]
   135f0:	add	sp, sp, #20
   135f4:	pop	{pc}		; (ldr pc, [sp], #4)
   135f8:	ldrdeq	r6, [r2], -ip
   135fc:	ldr	r3, [pc, #4]	; 13608 <__assert_fail@plt+0x28bc>
   13600:	mvn	r2, #0
   13604:	b	130c8 <__assert_fail@plt+0x237c>
   13608:	andeq	r6, r2, ip, asr #4
   1360c:	ldr	r3, [pc]	; 13614 <__assert_fail@plt+0x28c8>
   13610:	b	130c8 <__assert_fail@plt+0x237c>
   13614:	andeq	r6, r2, ip, asr #4
   13618:	mov	r1, r0
   1361c:	ldr	r3, [pc, #8]	; 1362c <__assert_fail@plt+0x28e0>
   13620:	mvn	r2, #0
   13624:	mov	r0, #0
   13628:	b	130c8 <__assert_fail@plt+0x237c>
   1362c:	andeq	r6, r2, ip, asr #4
   13630:	mov	r2, r1
   13634:	ldr	r3, [pc, #8]	; 13644 <__assert_fail@plt+0x28f8>
   13638:	mov	r1, r0
   1363c:	mov	r0, #0
   13640:	b	130c8 <__assert_fail@plt+0x237c>
   13644:	andeq	r6, r2, ip, asr #4
   13648:	strd	r4, [sp, #-12]!
   1364c:	mov	r5, r2
   13650:	mov	r4, r0
   13654:	str	lr, [sp, #8]
   13658:	sub	sp, sp, #52	; 0x34
   1365c:	mov	r0, sp
   13660:	bl	11764 <__assert_fail@plt+0xa18>
   13664:	mov	r3, sp
   13668:	mov	r1, r5
   1366c:	mov	r0, r4
   13670:	mvn	r2, #0
   13674:	bl	130c8 <__assert_fail@plt+0x237c>
   13678:	add	sp, sp, #52	; 0x34
   1367c:	ldrd	r4, [sp]
   13680:	add	sp, sp, #8
   13684:	pop	{pc}		; (ldr pc, [sp], #4)
   13688:	strd	r4, [sp, #-16]!
   1368c:	mov	r5, r2
   13690:	mov	r4, r0
   13694:	str	r6, [sp, #8]
   13698:	mov	r6, r3
   1369c:	str	lr, [sp, #12]
   136a0:	sub	sp, sp, #48	; 0x30
   136a4:	mov	r0, sp
   136a8:	bl	11764 <__assert_fail@plt+0xa18>
   136ac:	mov	r3, sp
   136b0:	mov	r2, r6
   136b4:	mov	r1, r5
   136b8:	mov	r0, r4
   136bc:	bl	130c8 <__assert_fail@plt+0x237c>
   136c0:	add	sp, sp, #48	; 0x30
   136c4:	ldrd	r4, [sp]
   136c8:	ldr	r6, [sp, #8]
   136cc:	add	sp, sp, #12
   136d0:	pop	{pc}		; (ldr pc, [sp], #4)
   136d4:	mov	r2, r1
   136d8:	mov	r1, r0
   136dc:	mov	r0, #0
   136e0:	b	13648 <__assert_fail@plt+0x28fc>
   136e4:	mov	r3, r2
   136e8:	mov	r2, r1
   136ec:	mov	r1, r0
   136f0:	mov	r0, #0
   136f4:	b	13688 <__assert_fail@plt+0x293c>
   136f8:	ldr	ip, [pc, #140]	; 1378c <__assert_fail@plt+0x2a40>
   136fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13700:	ldrd	r4, [ip]
   13704:	strd	r6, [sp, #8]
   13708:	ldrd	r6, [ip, #8]
   1370c:	strd	r8, [sp, #16]
   13710:	lsr	r9, r2, #5
   13714:	str	lr, [sp, #24]
   13718:	sub	sp, sp, #52	; 0x34
   1371c:	and	lr, r2, #31
   13720:	add	r8, sp, #8
   13724:	mov	r2, r1
   13728:	strd	r4, [sp]
   1372c:	mov	r1, r0
   13730:	mov	r3, sp
   13734:	strd	r6, [sp, #8]
   13738:	mov	r0, #0
   1373c:	ldrd	r4, [ip, #16]
   13740:	ldrd	r6, [ip, #24]
   13744:	strd	r4, [sp, #16]
   13748:	ldrd	r4, [ip, #32]
   1374c:	strd	r6, [sp, #24]
   13750:	ldrd	r6, [ip, #40]	; 0x28
   13754:	strd	r4, [sp, #32]
   13758:	strd	r6, [sp, #40]	; 0x28
   1375c:	ldr	ip, [r8, r9, lsl #2]
   13760:	mvn	r4, ip, lsr lr
   13764:	and	r4, r4, #1
   13768:	eor	lr, ip, r4, lsl lr
   1376c:	str	lr, [r8, r9, lsl #2]
   13770:	bl	130c8 <__assert_fail@plt+0x237c>
   13774:	add	sp, sp, #52	; 0x34
   13778:	ldrd	r4, [sp]
   1377c:	ldrd	r6, [sp, #8]
   13780:	ldrd	r8, [sp, #16]
   13784:	add	sp, sp, #24
   13788:	pop	{pc}		; (ldr pc, [sp], #4)
   1378c:	andeq	r6, r2, ip, asr #4
   13790:	mov	r2, r1
   13794:	mvn	r1, #0
   13798:	b	136f8 <__assert_fail@plt+0x29ac>
   1379c:	mov	r2, #58	; 0x3a
   137a0:	mvn	r1, #0
   137a4:	b	136f8 <__assert_fail@plt+0x29ac>
   137a8:	mov	r2, #58	; 0x3a
   137ac:	b	136f8 <__assert_fail@plt+0x29ac>
   137b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   137b4:	strd	r6, [sp, #8]
   137b8:	mov	r6, r0
   137bc:	mov	r7, r2
   137c0:	str	lr, [sp, #16]
   137c4:	sub	sp, sp, #100	; 0x64
   137c8:	mov	r0, sp
   137cc:	bl	11764 <__assert_fail@plt+0xa18>
   137d0:	ldrd	r4, [sp, #8]
   137d4:	mov	r1, r7
   137d8:	mov	r0, r6
   137dc:	add	r3, sp, #48	; 0x30
   137e0:	mvn	r2, #0
   137e4:	ldrd	r6, [sp]
   137e8:	strd	r4, [sp, #56]	; 0x38
   137ec:	ldrd	r4, [sp, #16]
   137f0:	strd	r6, [sp, #48]	; 0x30
   137f4:	ldrd	r6, [sp, #32]
   137f8:	ldr	lr, [sp, #60]	; 0x3c
   137fc:	strd	r4, [sp, #64]	; 0x40
   13800:	ldrd	r4, [sp, #24]
   13804:	mvn	ip, lr
   13808:	and	ip, ip, #67108864	; 0x4000000
   1380c:	strd	r4, [sp, #72]	; 0x48
   13810:	eor	ip, ip, lr
   13814:	ldrd	r4, [sp, #40]	; 0x28
   13818:	str	ip, [sp, #60]	; 0x3c
   1381c:	strd	r6, [sp, #80]	; 0x50
   13820:	strd	r4, [sp, #88]	; 0x58
   13824:	bl	130c8 <__assert_fail@plt+0x237c>
   13828:	add	sp, sp, #100	; 0x64
   1382c:	ldrd	r4, [sp]
   13830:	ldrd	r6, [sp, #8]
   13834:	add	sp, sp, #16
   13838:	pop	{pc}		; (ldr pc, [sp], #4)
   1383c:	ldr	ip, [pc, #156]	; 138e0 <__assert_fail@plt+0x2b94>
   13840:	cmp	r2, #0
   13844:	cmpne	r1, #0
   13848:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1384c:	strd	r6, [sp, #8]
   13850:	mov	r6, r2
   13854:	str	r8, [sp, #16]
   13858:	mov	r8, r3
   1385c:	strd	sl, [sp, #20]
   13860:	ldrd	r4, [ip]
   13864:	str	lr, [sp, #28]
   13868:	sub	sp, sp, #48	; 0x30
   1386c:	mov	lr, #10
   13870:	ldrd	r2, [ip, #8]
   13874:	ldrd	sl, [ip, #16]
   13878:	strd	r4, [sp]
   1387c:	ldrd	r4, [ip, #32]
   13880:	str	lr, [sp]
   13884:	strd	r2, [sp, #8]
   13888:	strd	sl, [sp, #16]
   1388c:	ldrd	r2, [ip, #24]
   13890:	ldrd	sl, [ip, #40]	; 0x28
   13894:	strd	r2, [sp, #24]
   13898:	strd	r4, [sp, #32]
   1389c:	strd	sl, [sp, #40]	; 0x28
   138a0:	beq	138dc <__assert_fail@plt+0x2b90>
   138a4:	ldr	r2, [sp, #80]	; 0x50
   138a8:	mov	r7, r1
   138ac:	mov	r3, sp
   138b0:	mov	r1, r8
   138b4:	str	r7, [sp, #40]	; 0x28
   138b8:	str	r6, [sp, #44]	; 0x2c
   138bc:	bl	130c8 <__assert_fail@plt+0x237c>
   138c0:	add	sp, sp, #48	; 0x30
   138c4:	ldrd	r4, [sp]
   138c8:	ldrd	r6, [sp, #8]
   138cc:	ldr	r8, [sp, #16]
   138d0:	ldrd	sl, [sp, #20]
   138d4:	add	sp, sp, #28
   138d8:	pop	{pc}		; (ldr pc, [sp], #4)
   138dc:	bl	10d40 <abort@plt>
   138e0:	andeq	r6, r2, ip, asr #4
   138e4:	mvn	ip, #0
   138e8:	push	{lr}		; (str lr, [sp, #-4]!)
   138ec:	sub	sp, sp, #12
   138f0:	str	ip, [sp]
   138f4:	bl	1383c <__assert_fail@plt+0x2af0>
   138f8:	add	sp, sp, #12
   138fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13900:	mvn	ip, #0
   13904:	push	{lr}		; (str lr, [sp, #-4]!)
   13908:	sub	sp, sp, #12
   1390c:	mov	r3, r2
   13910:	mov	r2, r1
   13914:	mov	r1, r0
   13918:	mov	r0, #0
   1391c:	str	ip, [sp]
   13920:	bl	1383c <__assert_fail@plt+0x2af0>
   13924:	add	sp, sp, #12
   13928:	pop	{pc}		; (ldr pc, [sp], #4)
   1392c:	push	{lr}		; (str lr, [sp, #-4]!)
   13930:	sub	sp, sp, #12
   13934:	str	r3, [sp]
   13938:	mov	r3, r2
   1393c:	mov	r2, r1
   13940:	mov	r1, r0
   13944:	mov	r0, #0
   13948:	bl	1383c <__assert_fail@plt+0x2af0>
   1394c:	add	sp, sp, #12
   13950:	pop	{pc}		; (ldr pc, [sp], #4)
   13954:	ldr	r3, [pc]	; 1395c <__assert_fail@plt+0x2c10>
   13958:	b	130c8 <__assert_fail@plt+0x237c>
   1395c:	andeq	r6, r2, r4, ror #1
   13960:	mov	r2, r1
   13964:	ldr	r3, [pc, #8]	; 13974 <__assert_fail@plt+0x2c28>
   13968:	mov	r1, r0
   1396c:	mov	r0, #0
   13970:	b	130c8 <__assert_fail@plt+0x237c>
   13974:	andeq	r6, r2, r4, ror #1
   13978:	ldr	r3, [pc, #4]	; 13984 <__assert_fail@plt+0x2c38>
   1397c:	mvn	r2, #0
   13980:	b	130c8 <__assert_fail@plt+0x237c>
   13984:	andeq	r6, r2, r4, ror #1
   13988:	mov	r1, r0
   1398c:	ldr	r3, [pc, #8]	; 1399c <__assert_fail@plt+0x2c50>
   13990:	mvn	r2, #0
   13994:	mov	r0, #0
   13998:	b	130c8 <__assert_fail@plt+0x237c>
   1399c:	andeq	r6, r2, r4, ror #1
   139a0:	cmp	r1, #0
   139a4:	strd	r4, [sp, #-16]!
   139a8:	mov	r4, r0
   139ac:	str	r6, [sp, #8]
   139b0:	str	lr, [sp, #12]
   139b4:	sub	sp, sp, #32
   139b8:	ldr	r5, [sp, #48]	; 0x30
   139bc:	ldr	r6, [sp, #52]	; 0x34
   139c0:	beq	13af4 <__assert_fail@plt+0x2da8>
   139c4:	mov	ip, r3
   139c8:	mov	r3, r2
   139cc:	mov	r2, r1
   139d0:	movw	r1, #20092	; 0x4e7c
   139d4:	movt	r1, #1
   139d8:	str	ip, [sp]
   139dc:	bl	10c8c <fprintf@plt>
   139e0:	mov	r2, #5
   139e4:	movw	r1, #20112	; 0x4e90
   139e8:	movt	r1, #1
   139ec:	mov	r0, #0
   139f0:	bl	10bc0 <dcgettext@plt>
   139f4:	mov	r2, r0
   139f8:	movw	r3, #2022	; 0x7e6
   139fc:	movw	r1, #20816	; 0x5150
   13a00:	movt	r1, #1
   13a04:	mov	r0, r4
   13a08:	bl	10c8c <fprintf@plt>
   13a0c:	mov	r1, r4
   13a10:	mov	r0, #10
   13a14:	bl	10d04 <fputc@plt>
   13a18:	mov	r2, #5
   13a1c:	movw	r1, #20116	; 0x4e94
   13a20:	movt	r1, #1
   13a24:	mov	r0, #0
   13a28:	bl	10bc0 <dcgettext@plt>
   13a2c:	mov	r1, r0
   13a30:	movw	r2, #20288	; 0x4f40
   13a34:	movt	r2, #1
   13a38:	mov	r0, r4
   13a3c:	bl	10c8c <fprintf@plt>
   13a40:	mov	r1, r4
   13a44:	mov	r0, #10
   13a48:	bl	10d04 <fputc@plt>
   13a4c:	cmp	r6, #9
   13a50:	ldrls	pc, [pc, r6, lsl #2]
   13a54:	b	13d40 <__assert_fail@plt+0x2ff4>
   13a58:	andeq	r3, r1, r0, ror #21
   13a5c:	andeq	r3, r1, r4, lsl #22
   13a60:	andeq	r3, r1, ip, lsr fp
   13a64:	andeq	r3, r1, r4, ror fp
   13a68:			; <UNDEFINED> instruction: 0x00013bb4
   13a6c:	andeq	r3, r1, r0, lsl #24
   13a70:	andeq	r3, r1, r4, asr #24
   13a74:	muleq	r1, r0, ip
   13a78:	andeq	r3, r1, r4, ror #25
   13a7c:	andeq	r3, r1, r0, lsl #21
   13a80:	movw	r1, #20592	; 0x5070
   13a84:	movt	r1, #1
   13a88:	mov	r2, #5
   13a8c:	mov	r0, #0
   13a90:	bl	10bc0 <dcgettext@plt>
   13a94:	ldr	ip, [r5, #8]
   13a98:	mov	r1, r0
   13a9c:	mov	r0, r4
   13aa0:	ldr	r3, [r5, #12]
   13aa4:	ldr	r2, [r5, #32]
   13aa8:	str	ip, [sp]
   13aac:	ldr	ip, [r5, #16]
   13ab0:	str	r2, [sp, #24]
   13ab4:	ldr	r2, [r5, #28]
   13ab8:	str	r3, [sp, #4]
   13abc:	ldr	r3, [r5, #20]
   13ac0:	str	ip, [sp, #8]
   13ac4:	ldr	ip, [r5, #24]
   13ac8:	str	r2, [sp, #20]
   13acc:	ldr	r2, [r5]
   13ad0:	str	r3, [sp, #12]
   13ad4:	ldr	r3, [r5, #4]
   13ad8:	str	ip, [sp, #16]
   13adc:	bl	10c8c <fprintf@plt>
   13ae0:	add	sp, sp, #32
   13ae4:	ldrd	r4, [sp]
   13ae8:	ldr	r6, [sp, #8]
   13aec:	add	sp, sp, #12
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	movw	r1, #20104	; 0x4e88
   13af8:	movt	r1, #1
   13afc:	bl	10c8c <fprintf@plt>
   13b00:	b	139e0 <__assert_fail@plt+0x2c94>
   13b04:	mov	r2, #5
   13b08:	movw	r1, #20324	; 0x4f64
   13b0c:	movt	r1, #1
   13b10:	mov	r0, #0
   13b14:	bl	10bc0 <dcgettext@plt>
   13b18:	ldr	r2, [r5]
   13b1c:	mov	r1, r0
   13b20:	mov	r0, r4
   13b24:	add	sp, sp, #32
   13b28:	ldrd	r4, [sp]
   13b2c:	ldr	r6, [sp, #8]
   13b30:	ldr	lr, [sp, #12]
   13b34:	add	sp, sp, #16
   13b38:	b	10c8c <fprintf@plt>
   13b3c:	mov	r2, #5
   13b40:	movw	r1, #20340	; 0x4f74
   13b44:	movt	r1, #1
   13b48:	mov	r0, #0
   13b4c:	bl	10bc0 <dcgettext@plt>
   13b50:	ldrd	r2, [r5]
   13b54:	mov	r1, r0
   13b58:	mov	r0, r4
   13b5c:	add	sp, sp, #32
   13b60:	ldrd	r4, [sp]
   13b64:	ldr	r6, [sp, #8]
   13b68:	ldr	lr, [sp, #12]
   13b6c:	add	sp, sp, #16
   13b70:	b	10c8c <fprintf@plt>
   13b74:	mov	r2, #5
   13b78:	movw	r1, #20364	; 0x4f8c
   13b7c:	movt	r1, #1
   13b80:	mov	r0, #0
   13b84:	bl	10bc0 <dcgettext@plt>
   13b88:	ldrd	r2, [r5]
   13b8c:	mov	r1, r0
   13b90:	mov	r0, r4
   13b94:	ldr	ip, [r5, #8]
   13b98:	str	ip, [sp, #48]	; 0x30
   13b9c:	add	sp, sp, #32
   13ba0:	ldrd	r4, [sp]
   13ba4:	ldr	r6, [sp, #8]
   13ba8:	ldr	lr, [sp, #12]
   13bac:	add	sp, sp, #16
   13bb0:	b	10c8c <fprintf@plt>
   13bb4:	mov	r2, #5
   13bb8:	movw	r1, #20392	; 0x4fa8
   13bbc:	movt	r1, #1
   13bc0:	mov	r0, #0
   13bc4:	bl	10bc0 <dcgettext@plt>
   13bc8:	ldr	r2, [r5]
   13bcc:	mov	r1, r0
   13bd0:	mov	r0, r4
   13bd4:	ldr	r3, [r5, #8]
   13bd8:	ldr	ip, [r5, #12]
   13bdc:	str	r3, [sp, #48]	; 0x30
   13be0:	ldr	r3, [r5, #4]
   13be4:	str	ip, [sp, #52]	; 0x34
   13be8:	add	sp, sp, #32
   13bec:	ldrd	r4, [sp]
   13bf0:	ldr	r6, [sp, #8]
   13bf4:	ldr	lr, [sp, #12]
   13bf8:	add	sp, sp, #16
   13bfc:	b	10c8c <fprintf@plt>
   13c00:	mov	r2, #5
   13c04:	movw	r1, #20424	; 0x4fc8
   13c08:	movt	r1, #1
   13c0c:	mov	r0, #0
   13c10:	bl	10bc0 <dcgettext@plt>
   13c14:	ldr	r2, [r5, #8]
   13c18:	mov	r1, r0
   13c1c:	mov	r0, r4
   13c20:	ldr	ip, [r5, #12]
   13c24:	ldr	r3, [r5, #16]
   13c28:	str	r2, [sp]
   13c2c:	ldr	r2, [r5]
   13c30:	str	r3, [sp, #8]
   13c34:	ldr	r3, [r5, #4]
   13c38:	str	ip, [sp, #4]
   13c3c:	bl	10c8c <fprintf@plt>
   13c40:	b	13ae0 <__assert_fail@plt+0x2d94>
   13c44:	mov	r2, #5
   13c48:	movw	r1, #20460	; 0x4fec
   13c4c:	movt	r1, #1
   13c50:	mov	r0, #0
   13c54:	bl	10bc0 <dcgettext@plt>
   13c58:	ldr	ip, [r5, #8]
   13c5c:	mov	r1, r0
   13c60:	mov	r0, r4
   13c64:	ldr	r3, [r5, #12]
   13c68:	ldr	r2, [r5, #20]
   13c6c:	str	ip, [sp]
   13c70:	ldr	ip, [r5, #16]
   13c74:	str	r2, [sp, #12]
   13c78:	ldr	r2, [r5]
   13c7c:	str	r3, [sp, #4]
   13c80:	ldr	r3, [r5, #4]
   13c84:	str	ip, [sp, #8]
   13c88:	bl	10c8c <fprintf@plt>
   13c8c:	b	13ae0 <__assert_fail@plt+0x2d94>
   13c90:	mov	r2, #5
   13c94:	movw	r1, #20500	; 0x5014
   13c98:	movt	r1, #1
   13c9c:	mov	r0, #0
   13ca0:	bl	10bc0 <dcgettext@plt>
   13ca4:	ldr	r3, [r5, #8]
   13ca8:	mov	r1, r0
   13cac:	mov	r0, r4
   13cb0:	ldr	r2, [r5, #12]
   13cb4:	ldr	ip, [r5, #24]
   13cb8:	str	r3, [sp]
   13cbc:	ldr	r3, [r5, #16]
   13cc0:	str	ip, [sp, #16]
   13cc4:	ldr	ip, [r5, #20]
   13cc8:	str	r2, [sp, #4]
   13ccc:	ldr	r2, [r5]
   13cd0:	str	r3, [sp, #8]
   13cd4:	ldr	r3, [r5, #4]
   13cd8:	str	ip, [sp, #12]
   13cdc:	bl	10c8c <fprintf@plt>
   13ce0:	b	13ae0 <__assert_fail@plt+0x2d94>
   13ce4:	mov	r2, #5
   13ce8:	movw	r1, #20544	; 0x5040
   13cec:	movt	r1, #1
   13cf0:	mov	r0, #0
   13cf4:	bl	10bc0 <dcgettext@plt>
   13cf8:	ldr	r2, [r5, #8]
   13cfc:	mov	r1, r0
   13d00:	mov	r0, r4
   13d04:	ldr	ip, [r5, #12]
   13d08:	ldr	r3, [r5, #28]
   13d0c:	str	r2, [sp]
   13d10:	ldr	r2, [r5, #16]
   13d14:	str	r3, [sp, #20]
   13d18:	ldr	r3, [r5, #24]
   13d1c:	str	ip, [sp, #4]
   13d20:	ldr	ip, [r5, #20]
   13d24:	str	r2, [sp, #8]
   13d28:	ldr	r2, [r5]
   13d2c:	str	r3, [sp, #16]
   13d30:	ldr	r3, [r5, #4]
   13d34:	str	ip, [sp, #12]
   13d38:	bl	10c8c <fprintf@plt>
   13d3c:	b	13ae0 <__assert_fail@plt+0x2d94>
   13d40:	movw	r1, #20644	; 0x50a4
   13d44:	movt	r1, #1
   13d48:	b	13a88 <__assert_fail@plt+0x2d3c>
   13d4c:	strd	r4, [sp, #-12]!
   13d50:	str	lr, [sp, #8]
   13d54:	sub	sp, sp, #12
   13d58:	ldr	r5, [sp, #24]
   13d5c:	ldr	ip, [r5]
   13d60:	cmp	ip, #0
   13d64:	beq	13d80 <__assert_fail@plt+0x3034>
   13d68:	mov	lr, r5
   13d6c:	mov	ip, #0
   13d70:	ldr	r4, [lr, #4]!
   13d74:	add	ip, ip, #1
   13d78:	cmp	r4, #0
   13d7c:	bne	13d70 <__assert_fail@plt+0x3024>
   13d80:	stm	sp, {r5, ip}
   13d84:	bl	139a0 <__assert_fail@plt+0x2c54>
   13d88:	add	sp, sp, #12
   13d8c:	ldrd	r4, [sp]
   13d90:	add	sp, sp, #8
   13d94:	pop	{pc}		; (ldr pc, [sp], #4)
   13d98:	strd	r4, [sp, #-16]!
   13d9c:	mov	ip, #0
   13da0:	str	r6, [sp, #8]
   13da4:	str	lr, [sp, #12]
   13da8:	sub	sp, sp, #48	; 0x30
   13dac:	ldr	r5, [sp, #64]	; 0x40
   13db0:	add	r6, sp, #8
   13db4:	mov	r4, r6
   13db8:	ldr	lr, [r5], #4
   13dbc:	cmp	lr, #0
   13dc0:	str	lr, [r4], #4
   13dc4:	beq	13dd4 <__assert_fail@plt+0x3088>
   13dc8:	add	ip, ip, #1
   13dcc:	cmp	ip, #10
   13dd0:	bne	13db8 <__assert_fail@plt+0x306c>
   13dd4:	stm	sp, {r6, ip}
   13dd8:	bl	139a0 <__assert_fail@plt+0x2c54>
   13ddc:	add	sp, sp, #48	; 0x30
   13de0:	ldrd	r4, [sp]
   13de4:	ldr	r6, [sp, #8]
   13de8:	add	sp, sp, #12
   13dec:	pop	{pc}		; (ldr pc, [sp], #4)
   13df0:	push	{r3}		; (str r3, [sp, #-4]!)
   13df4:	mov	ip, #0
   13df8:	strd	r4, [sp, #-12]!
   13dfc:	str	lr, [sp, #8]
   13e00:	sub	sp, sp, #56	; 0x38
   13e04:	add	r3, sp, #72	; 0x48
   13e08:	add	r5, sp, #16
   13e0c:	mov	r4, r3
   13e10:	mov	lr, r5
   13e14:	str	r3, [sp, #12]
   13e18:	ldr	r3, [r4], #4
   13e1c:	cmp	r3, #0
   13e20:	str	r3, [lr], #4
   13e24:	beq	13e34 <__assert_fail@plt+0x30e8>
   13e28:	add	ip, ip, #1
   13e2c:	cmp	ip, #10
   13e30:	bne	13e18 <__assert_fail@plt+0x30cc>
   13e34:	ldr	r3, [sp, #68]	; 0x44
   13e38:	stm	sp, {r5, ip}
   13e3c:	bl	139a0 <__assert_fail@plt+0x2c54>
   13e40:	add	sp, sp, #56	; 0x38
   13e44:	ldrd	r4, [sp]
   13e48:	ldr	lr, [sp, #8]
   13e4c:	add	sp, sp, #12
   13e50:	add	sp, sp, #4
   13e54:	bx	lr
   13e58:	movw	r3, #24884	; 0x6134
   13e5c:	movt	r3, #2
   13e60:	str	r4, [sp, #-8]!
   13e64:	mov	r0, #10
   13e68:	ldr	r1, [r3]
   13e6c:	str	lr, [sp, #4]
   13e70:	bl	10d04 <fputc@plt>
   13e74:	mov	r2, #5
   13e78:	movw	r1, #20704	; 0x50e0
   13e7c:	movt	r1, #1
   13e80:	mov	r0, #0
   13e84:	bl	10bc0 <dcgettext@plt>
   13e88:	movw	r1, #19728	; 0x4d10
   13e8c:	movt	r1, #1
   13e90:	bl	10b60 <printf@plt>
   13e94:	mov	r2, #5
   13e98:	movw	r1, #20724	; 0x50f4
   13e9c:	movt	r1, #1
   13ea0:	mov	r0, #0
   13ea4:	bl	10bc0 <dcgettext@plt>
   13ea8:	movw	r2, #19688	; 0x4ce8
   13eac:	movt	r2, #1
   13eb0:	movw	r1, #19448	; 0x4bf8
   13eb4:	movt	r1, #1
   13eb8:	bl	10b60 <printf@plt>
   13ebc:	movw	r1, #20744	; 0x5108
   13ec0:	movt	r1, #1
   13ec4:	mov	r2, #5
   13ec8:	mov	r0, #0
   13ecc:	bl	10bc0 <dcgettext@plt>
   13ed0:	movw	r1, #20784	; 0x5130
   13ed4:	movt	r1, #1
   13ed8:	ldr	r4, [sp]
   13edc:	ldr	lr, [sp, #4]
   13ee0:	add	sp, sp, #8
   13ee4:	b	10b60 <printf@plt>
   13ee8:	str	r4, [sp, #-8]!
   13eec:	str	lr, [sp, #4]
   13ef0:	bl	145a8 <__assert_fail@plt+0x385c>
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f08 <__assert_fail@plt+0x31bc>
   13efc:	ldr	r4, [sp]
   13f00:	add	sp, sp, #4
   13f04:	pop	{pc}		; (ldr pc, [sp], #4)
   13f08:	bl	14360 <__assert_fail@plt+0x3614>
   13f0c:	str	r4, [sp, #-8]!
   13f10:	str	lr, [sp, #4]
   13f14:	bl	145a8 <__assert_fail@plt+0x385c>
   13f18:	cmp	r0, #0
   13f1c:	beq	13f2c <__assert_fail@plt+0x31e0>
   13f20:	ldr	r4, [sp]
   13f24:	add	sp, sp, #4
   13f28:	pop	{pc}		; (ldr pc, [sp], #4)
   13f2c:	bl	14360 <__assert_fail@plt+0x3614>
   13f30:	str	r4, [sp, #-8]!
   13f34:	str	lr, [sp, #4]
   13f38:	bl	145a8 <__assert_fail@plt+0x385c>
   13f3c:	cmp	r0, #0
   13f40:	beq	13f50 <__assert_fail@plt+0x3204>
   13f44:	ldr	r4, [sp]
   13f48:	add	sp, sp, #4
   13f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f50:	bl	14360 <__assert_fail@plt+0x3614>
   13f54:	strd	r4, [sp, #-16]!
   13f58:	mov	r5, r0
   13f5c:	mov	r4, r1
   13f60:	str	r6, [sp, #8]
   13f64:	str	lr, [sp, #12]
   13f68:	bl	14654 <__assert_fail@plt+0x3908>
   13f6c:	cmp	r0, #0
   13f70:	beq	13f84 <__assert_fail@plt+0x3238>
   13f74:	ldrd	r4, [sp]
   13f78:	ldr	r6, [sp, #8]
   13f7c:	add	sp, sp, #12
   13f80:	pop	{pc}		; (ldr pc, [sp], #4)
   13f84:	adds	r4, r4, #0
   13f88:	movne	r4, #1
   13f8c:	cmp	r5, #0
   13f90:	moveq	r4, #1
   13f94:	cmp	r4, #0
   13f98:	beq	13f74 <__assert_fail@plt+0x3228>
   13f9c:	bl	14360 <__assert_fail@plt+0x3614>
   13fa0:	cmp	r1, #0
   13fa4:	orreq	r1, r1, #1
   13fa8:	str	r4, [sp, #-8]!
   13fac:	str	lr, [sp, #4]
   13fb0:	bl	14654 <__assert_fail@plt+0x3908>
   13fb4:	cmp	r0, #0
   13fb8:	beq	13fc8 <__assert_fail@plt+0x327c>
   13fbc:	ldr	r4, [sp]
   13fc0:	add	sp, sp, #4
   13fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fc8:	bl	14360 <__assert_fail@plt+0x3614>
   13fcc:	strd	r4, [sp, #-16]!
   13fd0:	mov	r4, r0
   13fd4:	mov	r5, r2
   13fd8:	str	r6, [sp, #8]
   13fdc:	mov	r6, r1
   13fe0:	str	lr, [sp, #12]
   13fe4:	bl	146ac <__assert_fail@plt+0x3960>
   13fe8:	cmp	r0, #0
   13fec:	beq	14000 <__assert_fail@plt+0x32b4>
   13ff0:	ldrd	r4, [sp]
   13ff4:	ldr	r6, [sp, #8]
   13ff8:	add	sp, sp, #12
   13ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   14000:	cmp	r4, #0
   14004:	beq	14014 <__assert_fail@plt+0x32c8>
   14008:	cmp	r6, #0
   1400c:	cmpne	r5, #0
   14010:	beq	13ff0 <__assert_fail@plt+0x32a4>
   14014:	bl	14360 <__assert_fail@plt+0x3614>
   14018:	b	13fcc <__assert_fail@plt+0x3280>
   1401c:	cmp	r2, #0
   14020:	cmpne	r1, #0
   14024:	str	r4, [sp, #-8]!
   14028:	moveq	r2, #1
   1402c:	str	lr, [sp, #4]
   14030:	moveq	r1, r2
   14034:	bl	146ac <__assert_fail@plt+0x3960>
   14038:	cmp	r0, #0
   1403c:	beq	1404c <__assert_fail@plt+0x3300>
   14040:	ldr	r4, [sp]
   14044:	add	sp, sp, #4
   14048:	pop	{pc}		; (ldr pc, [sp], #4)
   1404c:	bl	14360 <__assert_fail@plt+0x3614>
   14050:	mov	r2, r1
   14054:	mov	r1, r0
   14058:	mov	r0, #0
   1405c:	b	13fcc <__assert_fail@plt+0x3280>
   14060:	mov	r2, r1
   14064:	mov	r1, r0
   14068:	mov	r0, #0
   1406c:	b	1401c <__assert_fail@plt+0x32d0>
   14070:	cmp	r0, #0
   14074:	strd	r4, [sp, #-16]!
   14078:	mov	r5, r1
   1407c:	ldr	r4, [r1]
   14080:	str	r6, [sp, #8]
   14084:	str	lr, [sp, #12]
   14088:	beq	140b8 <__assert_fail@plt+0x336c>
   1408c:	lsr	r3, r4, #1
   14090:	add	r3, r3, #1
   14094:	adds	r4, r4, r3
   14098:	bcs	140d4 <__assert_fail@plt+0x3388>
   1409c:	mov	r1, r4
   140a0:	bl	13fcc <__assert_fail@plt+0x3280>
   140a4:	ldr	r6, [sp, #8]
   140a8:	str	r4, [r5]
   140ac:	ldrd	r4, [sp]
   140b0:	add	sp, sp, #12
   140b4:	pop	{pc}		; (ldr pc, [sp], #4)
   140b8:	cmp	r4, #0
   140bc:	bne	1409c <__assert_fail@plt+0x3350>
   140c0:	mov	r4, #64	; 0x40
   140c4:	udiv	r4, r4, r2
   140c8:	cmp	r2, #64	; 0x40
   140cc:	addhi	r4, r4, #1
   140d0:	b	1409c <__assert_fail@plt+0x3350>
   140d4:	bl	14360 <__assert_fail@plt+0x3614>
   140d8:	mov	r2, #1
   140dc:	b	14070 <__assert_fail@plt+0x3324>
   140e0:	ldr	ip, [r1]
   140e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   140e8:	mov	r5, r1
   140ec:	strd	r6, [sp, #8]
   140f0:	str	lr, [sp, #28]
   140f4:	strd	r8, [sp, #16]
   140f8:	asr	lr, ip, #1
   140fc:	ldr	r8, [sp, #32]
   14100:	str	sl, [sp, #24]
   14104:	adds	r4, ip, lr
   14108:	mvn	lr, r3
   1410c:	lsr	lr, lr, #31
   14110:	mvnvs	r4, #-2147483648	; 0x80000000
   14114:	cmp	r3, r4
   14118:	movge	r1, #0
   1411c:	andlt	r1, lr, #1
   14120:	cmp	r1, #0
   14124:	movne	r4, r3
   14128:	smull	r6, r7, r4, r8
   1412c:	cmp	r7, r6, asr #31
   14130:	bne	141b8 <__assert_fail@plt+0x346c>
   14134:	cmp	r6, #63	; 0x3f
   14138:	mov	r1, r6
   1413c:	ble	141a0 <__assert_fail@plt+0x3454>
   14140:	cmp	r0, #0
   14144:	sub	r6, r4, ip
   14148:	streq	r0, [r5]
   1414c:	cmp	r6, r2
   14150:	bge	14180 <__assert_fail@plt+0x3434>
   14154:	adds	r4, ip, r2
   14158:	bvs	141b4 <__assert_fail@plt+0x3468>
   1415c:	cmp	r4, r3
   14160:	movle	r3, #0
   14164:	andgt	r3, lr, #1
   14168:	cmp	r3, #0
   1416c:	bne	141b4 <__assert_fail@plt+0x3468>
   14170:	smull	r8, r9, r4, r8
   14174:	cmp	r9, r8, asr #31
   14178:	mov	r1, r8
   1417c:	bne	141b4 <__assert_fail@plt+0x3468>
   14180:	bl	13f54 <__assert_fail@plt+0x3208>
   14184:	ldrd	r6, [sp, #8]
   14188:	ldrd	r8, [sp, #16]
   1418c:	ldr	sl, [sp, #24]
   14190:	str	r4, [r5]
   14194:	ldrd	r4, [sp]
   14198:	add	sp, sp, #28
   1419c:	pop	{pc}		; (ldr pc, [sp], #4)
   141a0:	mov	r6, #64	; 0x40
   141a4:	sdiv	r4, r6, r8
   141a8:	mls	r1, r8, r4, r6
   141ac:	sub	r1, r6, r1
   141b0:	b	14140 <__assert_fail@plt+0x33f4>
   141b4:	bl	14360 <__assert_fail@plt+0x3614>
   141b8:	mvn	r6, #-2147483648	; 0x80000000
   141bc:	b	141a4 <__assert_fail@plt+0x3458>
   141c0:	mov	r1, #1
   141c4:	str	r4, [sp, #-8]!
   141c8:	str	lr, [sp, #4]
   141cc:	bl	143a4 <__assert_fail@plt+0x3658>
   141d0:	cmp	r0, #0
   141d4:	beq	141e4 <__assert_fail@plt+0x3498>
   141d8:	ldr	r4, [sp]
   141dc:	add	sp, sp, #4
   141e0:	pop	{pc}		; (ldr pc, [sp], #4)
   141e4:	bl	14360 <__assert_fail@plt+0x3614>
   141e8:	mov	r1, #1
   141ec:	str	r4, [sp, #-8]!
   141f0:	str	lr, [sp, #4]
   141f4:	bl	143a4 <__assert_fail@plt+0x3658>
   141f8:	cmp	r0, #0
   141fc:	beq	1420c <__assert_fail@plt+0x34c0>
   14200:	ldr	r4, [sp]
   14204:	add	sp, sp, #4
   14208:	pop	{pc}		; (ldr pc, [sp], #4)
   1420c:	bl	14360 <__assert_fail@plt+0x3614>
   14210:	str	r4, [sp, #-8]!
   14214:	str	lr, [sp, #4]
   14218:	bl	143a4 <__assert_fail@plt+0x3658>
   1421c:	cmp	r0, #0
   14220:	beq	14230 <__assert_fail@plt+0x34e4>
   14224:	ldr	r4, [sp]
   14228:	add	sp, sp, #4
   1422c:	pop	{pc}		; (ldr pc, [sp], #4)
   14230:	bl	14360 <__assert_fail@plt+0x3614>
   14234:	str	r4, [sp, #-8]!
   14238:	str	lr, [sp, #4]
   1423c:	bl	143a4 <__assert_fail@plt+0x3658>
   14240:	cmp	r0, #0
   14244:	beq	14254 <__assert_fail@plt+0x3508>
   14248:	ldr	r4, [sp]
   1424c:	add	sp, sp, #4
   14250:	pop	{pc}		; (ldr pc, [sp], #4)
   14254:	bl	14360 <__assert_fail@plt+0x3614>
   14258:	strd	r4, [sp, #-16]!
   1425c:	mov	r4, r1
   14260:	str	r6, [sp, #8]
   14264:	mov	r6, r0
   14268:	mov	r0, r1
   1426c:	str	lr, [sp, #12]
   14270:	bl	145a8 <__assert_fail@plt+0x385c>
   14274:	subs	r5, r0, #0
   14278:	beq	1429c <__assert_fail@plt+0x3550>
   1427c:	mov	r2, r4
   14280:	mov	r1, r6
   14284:	bl	10b9c <memcpy@plt>
   14288:	mov	r0, r5
   1428c:	ldrd	r4, [sp]
   14290:	ldr	r6, [sp, #8]
   14294:	add	sp, sp, #12
   14298:	pop	{pc}		; (ldr pc, [sp], #4)
   1429c:	bl	14360 <__assert_fail@plt+0x3614>
   142a0:	strd	r4, [sp, #-16]!
   142a4:	mov	r4, r1
   142a8:	str	r6, [sp, #8]
   142ac:	mov	r6, r0
   142b0:	mov	r0, r1
   142b4:	str	lr, [sp, #12]
   142b8:	bl	145a8 <__assert_fail@plt+0x385c>
   142bc:	subs	r5, r0, #0
   142c0:	beq	142e4 <__assert_fail@plt+0x3598>
   142c4:	mov	r2, r4
   142c8:	mov	r1, r6
   142cc:	bl	10b9c <memcpy@plt>
   142d0:	mov	r0, r5
   142d4:	ldrd	r4, [sp]
   142d8:	ldr	r6, [sp, #8]
   142dc:	add	sp, sp, #12
   142e0:	pop	{pc}		; (ldr pc, [sp], #4)
   142e4:	bl	14360 <__assert_fail@plt+0x3614>
   142e8:	strd	r4, [sp, #-16]!
   142ec:	mov	r4, r1
   142f0:	str	r6, [sp, #8]
   142f4:	mov	r6, r0
   142f8:	add	r0, r1, #1
   142fc:	str	lr, [sp, #12]
   14300:	bl	145a8 <__assert_fail@plt+0x385c>
   14304:	subs	r5, r0, #0
   14308:	beq	14334 <__assert_fail@plt+0x35e8>
   1430c:	mov	r3, #0
   14310:	mov	r1, r6
   14314:	mov	r2, r4
   14318:	strb	r3, [r5, r4]
   1431c:	bl	10b9c <memcpy@plt>
   14320:	mov	r0, r5
   14324:	ldrd	r4, [sp]
   14328:	ldr	r6, [sp, #8]
   1432c:	add	sp, sp, #12
   14330:	pop	{pc}		; (ldr pc, [sp], #4)
   14334:	bl	14360 <__assert_fail@plt+0x3614>
   14338:	str	r4, [sp, #-8]!
   1433c:	mov	r4, r0
   14340:	str	lr, [sp, #4]
   14344:	bl	10c80 <strlen@plt>
   14348:	add	r1, r0, #1
   1434c:	mov	r0, r4
   14350:	ldr	r4, [sp]
   14354:	ldr	lr, [sp, #4]
   14358:	add	sp, sp, #8
   1435c:	b	14258 <__assert_fail@plt+0x350c>
   14360:	movw	r3, #24784	; 0x60d0
   14364:	movt	r3, #2
   14368:	str	r4, [sp, #-8]!
   1436c:	ldr	r4, [r3]
   14370:	mov	r2, #5
   14374:	movw	r1, #20864	; 0x5180
   14378:	movt	r1, #1
   1437c:	mov	r0, #0
   14380:	str	lr, [sp, #4]
   14384:	bl	10bc0 <dcgettext@plt>
   14388:	mov	r3, r0
   1438c:	movw	r2, #19804	; 0x4d5c
   14390:	movt	r2, #1
   14394:	mov	r1, #0
   14398:	mov	r0, r4
   1439c:	bl	10c20 <error@plt>
   143a0:	bl	10d40 <abort@plt>
   143a4:	cmp	r1, #0
   143a8:	cmpne	r0, #0
   143ac:	beq	143f8 <__assert_fail@plt+0x36ac>
   143b0:	strd	r4, [sp, #-16]!
   143b4:	umull	r4, r5, r0, r1
   143b8:	str	r6, [sp, #8]
   143bc:	str	lr, [sp, #12]
   143c0:	adds	r3, r5, #0
   143c4:	movne	r3, #1
   143c8:	cmp	r4, #0
   143cc:	blt	143d8 <__assert_fail@plt+0x368c>
   143d0:	cmp	r3, #0
   143d4:	beq	14404 <__assert_fail@plt+0x36b8>
   143d8:	bl	10c98 <__errno_location@plt>
   143dc:	mov	r3, #12
   143e0:	ldrd	r4, [sp]
   143e4:	ldr	r6, [sp, #8]
   143e8:	add	sp, sp, #12
   143ec:	str	r3, [r0]
   143f0:	mov	r0, #0
   143f4:	pop	{pc}		; (ldr pc, [sp], #4)
   143f8:	mov	r1, #1
   143fc:	mov	r0, r1
   14400:	b	10b3c <calloc@plt>
   14404:	ldrd	r4, [sp]
   14408:	ldr	r6, [sp, #8]
   1440c:	ldr	lr, [sp, #12]
   14410:	add	sp, sp, #16
   14414:	b	10b3c <calloc@plt>
   14418:	str	r4, [sp, #-8]!
   1441c:	subs	r4, r0, #0
   14420:	str	lr, [sp, #4]
   14424:	sub	sp, sp, #8
   14428:	beq	14444 <__assert_fail@plt+0x36f8>
   1442c:	bl	10c44 <__freading@plt>
   14430:	cmp	r0, #0
   14434:	beq	14444 <__assert_fail@plt+0x36f8>
   14438:	ldr	r3, [r4]
   1443c:	tst	r3, #256	; 0x100
   14440:	bne	1445c <__assert_fail@plt+0x3710>
   14444:	mov	r0, r4
   14448:	add	sp, sp, #8
   1444c:	ldr	r4, [sp]
   14450:	ldr	lr, [sp, #4]
   14454:	add	sp, sp, #8
   14458:	b	10b6c <fflush@plt>
   1445c:	mov	r1, #1
   14460:	mov	r2, #0
   14464:	mov	r3, #0
   14468:	mov	r0, r4
   1446c:	str	r1, [sp]
   14470:	bl	144d8 <__assert_fail@plt+0x378c>
   14474:	b	14444 <__assert_fail@plt+0x36f8>
   14478:	strd	r4, [sp, #-12]!
   1447c:	mov	r5, r0
   14480:	str	lr, [sp, #8]
   14484:	sub	sp, sp, #12
   14488:	bl	10c98 <__errno_location@plt>
   1448c:	mov	r4, r0
   14490:	mov	r2, #0
   14494:	ldr	r3, [r4]
   14498:	mov	r0, r5
   1449c:	str	r2, [r4]
   144a0:	str	r3, [sp]
   144a4:	str	r3, [sp, #4]
   144a8:	bl	10b78 <free@plt>
   144ac:	ldr	r3, [r4]
   144b0:	add	r2, sp, #8
   144b4:	clz	r3, r3
   144b8:	lsr	r3, r3, #5
   144bc:	add	r3, r2, r3, lsl #2
   144c0:	ldr	r3, [r3, #-8]
   144c4:	str	r3, [r4]
   144c8:	add	sp, sp, #12
   144cc:	ldrd	r4, [sp]
   144d0:	add	sp, sp, #8
   144d4:	pop	{pc}		; (ldr pc, [sp], #4)
   144d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144dc:	mov	r4, r0
   144e0:	ldr	ip, [r0, #4]
   144e4:	strd	r6, [sp, #8]
   144e8:	str	lr, [sp, #20]
   144ec:	ldr	lr, [r0, #8]
   144f0:	str	r8, [sp, #16]
   144f4:	sub	sp, sp, #8
   144f8:	ldr	r5, [sp, #32]
   144fc:	cmp	lr, ip
   14500:	beq	14528 <__assert_fail@plt+0x37dc>
   14504:	mov	r0, r4
   14508:	str	r5, [sp, #32]
   1450c:	add	sp, sp, #8
   14510:	ldrd	r4, [sp]
   14514:	ldrd	r6, [sp, #8]
   14518:	ldr	r8, [sp, #16]
   1451c:	ldr	lr, [sp, #20]
   14520:	add	sp, sp, #24
   14524:	b	10cd4 <fseeko64@plt>
   14528:	ldr	ip, [r0, #16]
   1452c:	ldr	lr, [r0, #20]
   14530:	cmp	lr, ip
   14534:	bne	14504 <__assert_fail@plt+0x37b8>
   14538:	ldr	r8, [r0, #36]	; 0x24
   1453c:	cmp	r8, #0
   14540:	bne	14504 <__assert_fail@plt+0x37b8>
   14544:	mov	r6, r2
   14548:	mov	r7, r3
   1454c:	bl	10cbc <fileno@plt>
   14550:	mov	r2, r6
   14554:	mov	r3, r7
   14558:	str	r5, [sp]
   1455c:	bl	10bf0 <lseek64@plt>
   14560:	mvn	r3, #0
   14564:	mvn	r2, #0
   14568:	cmp	r1, r3
   1456c:	cmpeq	r0, r2
   14570:	beq	145a0 <__assert_fail@plt+0x3854>
   14574:	ldr	r3, [r4]
   14578:	strd	r0, [r4, #80]	; 0x50
   1457c:	bic	r3, r3, #16
   14580:	str	r3, [r4]
   14584:	mov	r0, r8
   14588:	add	sp, sp, #8
   1458c:	ldrd	r4, [sp]
   14590:	ldrd	r6, [sp, #8]
   14594:	ldr	r8, [sp, #16]
   14598:	add	sp, sp, #20
   1459c:	pop	{pc}		; (ldr pc, [sp], #4)
   145a0:	mvn	r8, #0
   145a4:	b	14584 <__assert_fail@plt+0x3838>
   145a8:	cmp	r0, #0
   145ac:	beq	145b8 <__assert_fail@plt+0x386c>
   145b0:	blt	145c0 <__assert_fail@plt+0x3874>
   145b4:	b	10c2c <malloc@plt>
   145b8:	mov	r0, #1
   145bc:	b	10c2c <malloc@plt>
   145c0:	str	r4, [sp, #-8]!
   145c4:	str	lr, [sp, #4]
   145c8:	bl	10c98 <__errno_location@plt>
   145cc:	mov	r3, #12
   145d0:	ldr	r4, [sp]
   145d4:	add	sp, sp, #4
   145d8:	str	r3, [r0]
   145dc:	mov	r0, #0
   145e0:	pop	{pc}		; (ldr pc, [sp], #4)
   145e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   145e8:	mov	r5, r2
   145ec:	strd	r6, [sp, #8]
   145f0:	subs	r6, r0, #0
   145f4:	mov	r7, r1
   145f8:	str	lr, [sp, #16]
   145fc:	sub	sp, sp, #12
   14600:	addeq	r6, sp, #4
   14604:	mov	r0, r6
   14608:	bl	10c14 <mbrtowc@plt>
   1460c:	cmp	r5, #0
   14610:	cmnne	r0, #3
   14614:	mov	r4, r0
   14618:	bhi	14634 <__assert_fail@plt+0x38e8>
   1461c:	mov	r0, r4
   14620:	add	sp, sp, #12
   14624:	ldrd	r4, [sp]
   14628:	ldrd	r6, [sp, #8]
   1462c:	add	sp, sp, #16
   14630:	pop	{pc}		; (ldr pc, [sp], #4)
   14634:	mov	r0, #0
   14638:	bl	14770 <__assert_fail@plt+0x3a24>
   1463c:	cmp	r0, #0
   14640:	bne	1461c <__assert_fail@plt+0x38d0>
   14644:	ldrb	r3, [r7]
   14648:	mov	r4, #1
   1464c:	str	r3, [r6]
   14650:	b	1461c <__assert_fail@plt+0x38d0>
   14654:	cmp	r0, #0
   14658:	beq	14680 <__assert_fail@plt+0x3934>
   1465c:	cmp	r1, #0
   14660:	str	r4, [sp, #-8]!
   14664:	str	lr, [sp, #4]
   14668:	beq	14688 <__assert_fail@plt+0x393c>
   1466c:	blt	1469c <__assert_fail@plt+0x3950>
   14670:	ldr	r4, [sp]
   14674:	ldr	lr, [sp, #4]
   14678:	add	sp, sp, #8
   1467c:	b	10bcc <realloc@plt>
   14680:	mov	r0, r1
   14684:	b	145a8 <__assert_fail@plt+0x385c>
   14688:	bl	14478 <__assert_fail@plt+0x372c>
   1468c:	ldr	r4, [sp]
   14690:	add	sp, sp, #4
   14694:	mov	r0, #0
   14698:	pop	{pc}		; (ldr pc, [sp], #4)
   1469c:	bl	10c98 <__errno_location@plt>
   146a0:	mov	r3, #12
   146a4:	str	r3, [r0]
   146a8:	b	1468c <__assert_fail@plt+0x3940>
   146ac:	umull	r2, r3, r1, r2
   146b0:	cmp	r3, #0
   146b4:	bne	146c0 <__assert_fail@plt+0x3974>
   146b8:	mov	r1, r2
   146bc:	b	14654 <__assert_fail@plt+0x3908>
   146c0:	str	r4, [sp, #-8]!
   146c4:	str	lr, [sp, #4]
   146c8:	bl	10c98 <__errno_location@plt>
   146cc:	mov	r3, #12
   146d0:	ldr	r4, [sp]
   146d4:	add	sp, sp, #4
   146d8:	str	r3, [r0]
   146dc:	mov	r0, #0
   146e0:	pop	{pc}		; (ldr pc, [sp], #4)
   146e4:	strd	r4, [sp, #-16]!
   146e8:	mov	r4, r0
   146ec:	str	r6, [sp, #8]
   146f0:	str	lr, [sp, #12]
   146f4:	bl	10c08 <__fpending@plt>
   146f8:	mov	r6, r0
   146fc:	mov	r0, r4
   14700:	bl	10b84 <ferror@plt>
   14704:	mov	r5, r0
   14708:	mov	r0, r4
   1470c:	bl	10cc8 <fclose@plt>
   14710:	cmp	r5, #0
   14714:	mov	r4, r0
   14718:	bne	14750 <__assert_fail@plt+0x3a04>
   1471c:	cmp	r0, #0
   14720:	beq	1473c <__assert_fail@plt+0x39f0>
   14724:	cmp	r6, #0
   14728:	bne	14768 <__assert_fail@plt+0x3a1c>
   1472c:	bl	10c98 <__errno_location@plt>
   14730:	ldr	r4, [r0]
   14734:	subs	r4, r4, #9
   14738:	mvnne	r4, #0
   1473c:	mov	r0, r4
   14740:	ldrd	r4, [sp]
   14744:	ldr	r6, [sp, #8]
   14748:	add	sp, sp, #12
   1474c:	pop	{pc}		; (ldr pc, [sp], #4)
   14750:	cmp	r0, #0
   14754:	bne	14768 <__assert_fail@plt+0x3a1c>
   14758:	bl	10c98 <__errno_location@plt>
   1475c:	str	r4, [r0]
   14760:	mvn	r4, #0
   14764:	b	1473c <__assert_fail@plt+0x39f0>
   14768:	mvn	r4, #0
   1476c:	b	1473c <__assert_fail@plt+0x39f0>
   14770:	push	{lr}		; (str lr, [sp, #-4]!)
   14774:	sub	sp, sp, #268	; 0x10c
   14778:	movw	r2, #257	; 0x101
   1477c:	add	r1, sp, #4
   14780:	bl	14814 <__assert_fail@plt+0x3ac8>
   14784:	cmp	r0, #0
   14788:	movne	r0, #0
   1478c:	bne	147c0 <__assert_fail@plt+0x3a74>
   14790:	movw	r1, #20884	; 0x5194
   14794:	movt	r1, #1
   14798:	add	r0, sp, #4
   1479c:	bl	10b48 <strcmp@plt>
   147a0:	cmp	r0, #0
   147a4:	beq	147c0 <__assert_fail@plt+0x3a74>
   147a8:	add	r0, sp, #4
   147ac:	movw	r1, #20888	; 0x5198
   147b0:	movt	r1, #1
   147b4:	bl	10b48 <strcmp@plt>
   147b8:	adds	r0, r0, #0
   147bc:	movne	r0, #1
   147c0:	add	sp, sp, #268	; 0x10c
   147c4:	pop	{pc}		; (ldr pc, [sp], #4)
   147c8:	mov	r0, #14
   147cc:	str	r4, [sp, #-8]!
   147d0:	str	lr, [sp, #4]
   147d4:	bl	10cf8 <nl_langinfo@plt>
   147d8:	cmp	r0, #0
   147dc:	beq	14800 <__assert_fail@plt+0x3ab4>
   147e0:	ldrb	r2, [r0]
   147e4:	movw	r3, #20896	; 0x51a0
   147e8:	movt	r3, #1
   147ec:	ldr	r4, [sp]
   147f0:	add	sp, sp, #4
   147f4:	cmp	r2, #0
   147f8:	moveq	r0, r3
   147fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14800:	ldr	r4, [sp]
   14804:	add	sp, sp, #4
   14808:	movw	r0, #20896	; 0x51a0
   1480c:	movt	r0, #1
   14810:	pop	{pc}		; (ldr pc, [sp], #4)
   14814:	strd	r4, [sp, #-16]!
   14818:	mov	r5, r1
   1481c:	mov	r1, #0
   14820:	mov	r4, r2
   14824:	str	r6, [sp, #8]
   14828:	str	lr, [sp, #12]
   1482c:	bl	10ce0 <setlocale@plt>
   14830:	subs	r6, r0, #0
   14834:	beq	148b4 <__assert_fail@plt+0x3b68>
   14838:	bl	10c80 <strlen@plt>
   1483c:	cmp	r4, r0
   14840:	bhi	14860 <__assert_fail@plt+0x3b14>
   14844:	cmp	r4, #0
   14848:	moveq	r0, #34	; 0x22
   1484c:	bne	14884 <__assert_fail@plt+0x3b38>
   14850:	ldrd	r4, [sp]
   14854:	ldr	r6, [sp, #8]
   14858:	add	sp, sp, #12
   1485c:	pop	{pc}		; (ldr pc, [sp], #4)
   14860:	add	r2, r0, #1
   14864:	mov	r1, r6
   14868:	mov	r0, r5
   1486c:	bl	10b9c <memcpy@plt>
   14870:	ldrd	r4, [sp]
   14874:	mov	r0, #0
   14878:	ldr	r6, [sp, #8]
   1487c:	add	sp, sp, #12
   14880:	pop	{pc}		; (ldr pc, [sp], #4)
   14884:	sub	r4, r4, #1
   14888:	mov	r1, r6
   1488c:	mov	r2, r4
   14890:	mov	r0, r5
   14894:	bl	10b9c <memcpy@plt>
   14898:	mov	r3, #0
   1489c:	mov	r0, #34	; 0x22
   148a0:	strb	r3, [r5, r4]
   148a4:	ldrd	r4, [sp]
   148a8:	ldr	r6, [sp, #8]
   148ac:	add	sp, sp, #12
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	cmp	r4, #0
   148b8:	mov	r0, #22
   148bc:	strbne	r6, [r5]
   148c0:	ldrd	r4, [sp]
   148c4:	ldr	r6, [sp, #8]
   148c8:	add	sp, sp, #12
   148cc:	pop	{pc}		; (ldr pc, [sp], #4)
   148d0:	mov	r1, #0
   148d4:	b	10ce0 <setlocale@plt>
   148d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148dc:	mov	r7, r0
   148e0:	ldr	r6, [pc, #72]	; 14930 <__assert_fail@plt+0x3be4>
   148e4:	ldr	r5, [pc, #72]	; 14934 <__assert_fail@plt+0x3be8>
   148e8:	add	r6, pc, r6
   148ec:	add	r5, pc, r5
   148f0:	sub	r6, r6, r5
   148f4:	mov	r8, r1
   148f8:	mov	r9, r2
   148fc:	bl	10b1c <calloc@plt-0x20>
   14900:	asrs	r6, r6, #2
   14904:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14908:	mov	r4, #0
   1490c:	add	r4, r4, #1
   14910:	ldr	r3, [r5], #4
   14914:	mov	r2, r9
   14918:	mov	r1, r8
   1491c:	mov	r0, r7
   14920:	blx	r3
   14924:	cmp	r6, r4
   14928:	bne	1490c <__assert_fail@plt+0x3bc0>
   1492c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14930:	andeq	r1, r1, r4, lsr #12
   14934:	andeq	r1, r1, ip, lsl r6
   14938:	bx	lr
   1493c:	ldr	r3, [pc, #12]	; 14950 <__assert_fail@plt+0x3c04>
   14940:	mov	r1, #0
   14944:	add	r3, pc, r3
   14948:	ldr	r2, [r3]
   1494c:	b	10ca4 <__cxa_atexit@plt>
   14950:	andeq	r1, r1, ip, ror r7

Disassembly of section .fini:

00014954 <.fini>:
   14954:	push	{r3, lr}
   14958:	pop	{r3, pc}
