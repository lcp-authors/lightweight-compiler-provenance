
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012550 <.init>:
   12550:	push	{r3, lr}
   12554:	bl	12730 <_start@@Base+0x3c>
   12558:	pop	{r3, pc}

Disassembly of section .plt:

0001255c <fopen@plt-0x14>:
   1255c:	push	{lr}		; (str lr, [sp, #-4]!)
   12560:	ldr	lr, [pc, #4]	; 1256c <fopen@plt-0x4>
   12564:	add	lr, pc, lr
   12568:	ldr	pc, [lr, #8]!
   1256c:	muleq	r2, r4, sl

00012570 <fopen@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #135168	; 0x21000
   12578:	ldr	pc, [ip, #2708]!	; 0xa94

0001257c <free@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #135168	; 0x21000
   12584:	ldr	pc, [ip, #2700]!	; 0xa8c

00012588 <memcpy@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #135168	; 0x21000
   12590:	ldr	pc, [ip, #2692]!	; 0xa84

00012594 <ftell@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #135168	; 0x21000
   1259c:	ldr	pc, [ip, #2684]!	; 0xa7c

000125a0 <memcmp@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #135168	; 0x21000
   125a8:	ldr	pc, [ip, #2676]!	; 0xa74

000125ac <rewind@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #135168	; 0x21000
   125b4:	ldr	pc, [ip, #2668]!	; 0xa6c

000125b8 <realloc@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #135168	; 0x21000
   125c0:	ldr	pc, [ip, #2660]!	; 0xa64

000125c4 <fread@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #135168	; 0x21000
   125cc:	ldr	pc, [ip, #2652]!	; 0xa5c

000125d0 <malloc@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #135168	; 0x21000
   125d8:	ldr	pc, [ip, #2644]!	; 0xa54

000125dc <__libc_start_main@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #135168	; 0x21000
   125e4:	ldr	pc, [ip, #2636]!	; 0xa4c

000125e8 <__gmon_start__@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #135168	; 0x21000
   125f0:	ldr	pc, [ip, #2628]!	; 0xa44

000125f4 <exit@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #135168	; 0x21000
   125fc:	ldr	pc, [ip, #2620]!	; 0xa3c

00012600 <strlen@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #135168	; 0x21000
   12608:	ldr	pc, [ip, #2612]!	; 0xa34

0001260c <fprintf@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #135168	; 0x21000
   12614:	ldr	pc, [ip, #2604]!	; 0xa2c

00012618 <posix_memalign@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #135168	; 0x21000
   12620:	ldr	pc, [ip, #2596]!	; 0xa24

00012624 <memset@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #135168	; 0x21000
   1262c:	ldr	pc, [ip, #2588]!	; 0xa1c

00012630 <strtod@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #135168	; 0x21000
   12638:	ldr	pc, [ip, #2580]!	; 0xa14

0001263c <memchr@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #135168	; 0x21000
   12644:	ldr	pc, [ip, #2572]!	; 0xa0c

00012648 <fclose@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #135168	; 0x21000
   12650:	ldr	pc, [ip, #2564]!	; 0xa04

00012654 <fputc@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #135168	; 0x21000
   1265c:	ldr	pc, [ip, #2556]!	; 0x9fc

00012660 <fseek@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #135168	; 0x21000
   12668:	ldr	pc, [ip, #2548]!	; 0x9f4

0001266c <fputs@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #135168	; 0x21000
   12674:	ldr	pc, [ip, #2540]!	; 0x9ec

00012678 <abort@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #135168	; 0x21000
   12680:	ldr	pc, [ip, #2532]!	; 0x9e4

00012684 <__assert_fail@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #135168	; 0x21000
   1268c:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00012690 <main@@Base>:
   12690:	push	{r4, r5, r6, lr}
   12694:	mov	r4, r0
   12698:	mov	r6, r1
   1269c:	ldr	r5, [pc, #64]	; 126e4 <main@@Base+0x54>
   126a0:	ldr	r0, [pc, #64]	; 126e8 <main@@Base+0x58>
   126a4:	ldr	r1, [r5]
   126a8:	bl	1266c <fputs@plt>
   126ac:	sub	r3, r4, #1
   126b0:	cmp	r3, #1
   126b4:	bls	126cc <main@@Base+0x3c>
   126b8:	ldr	r0, [pc, #44]	; 126ec <main@@Base+0x5c>
   126bc:	ldr	r1, [r5]
   126c0:	bl	1266c <fputs@plt>
   126c4:	mov	r0, #1
   126c8:	bl	125f4 <exit@plt>
   126cc:	cmp	r4, #2
   126d0:	ldreq	r2, [r6, #4]
   126d4:	pop	{r4, r5, r6, lr}
   126d8:	ldreq	r3, [pc, #16]	; 126f0 <main@@Base+0x60>
   126dc:	streq	r2, [r3, #716]	; 0x2cc
   126e0:	b	1b600 <test_parse@@Base>
   126e4:			; <UNDEFINED> instruction: 0x000343b8
   126e8:	muleq	r2, sp, r1
   126ec:	andeq	r2, r2, lr, lsr #3
   126f0:	andeq	r4, r3, r8, ror r0

000126f4 <_start@@Base>:
   126f4:	mov	fp, #0
   126f8:	mov	lr, #0
   126fc:	pop	{r1}		; (ldr r1, [sp], #4)
   12700:	mov	r2, sp
   12704:	push	{r2}		; (str r2, [sp, #-4]!)
   12708:	push	{r0}		; (str r0, [sp, #-4]!)
   1270c:	ldr	ip, [pc, #16]	; 12724 <_start@@Base+0x30>
   12710:	push	{ip}		; (str ip, [sp, #-4]!)
   12714:	ldr	r0, [pc, #12]	; 12728 <_start@@Base+0x34>
   12718:	ldr	r3, [pc, #12]	; 1272c <_start@@Base+0x38>
   1271c:	bl	125dc <__libc_start_main@plt>
   12720:	bl	12678 <abort@plt>
   12724:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   12728:	muleq	r1, r0, r6
   1272c:	andeq	r1, r2, r8, lsr pc
   12730:	ldr	r3, [pc, #20]	; 1274c <_start@@Base+0x58>
   12734:	ldr	r2, [pc, #20]	; 12750 <_start@@Base+0x5c>
   12738:	add	r3, pc, r3
   1273c:	ldr	r2, [r3, r2]
   12740:	cmp	r2, #0
   12744:	bxeq	lr
   12748:	b	125e8 <__gmon_start__@plt>
   1274c:	andeq	r1, r2, r0, asr #17
   12750:	andeq	r0, r0, ip, rrx
   12754:	ldr	r0, [pc, #24]	; 12774 <_start@@Base+0x80>
   12758:	ldr	r3, [pc, #24]	; 12778 <_start@@Base+0x84>
   1275c:	cmp	r3, r0
   12760:	bxeq	lr
   12764:	ldr	r3, [pc, #16]	; 1277c <_start@@Base+0x88>
   12768:	cmp	r3, #0
   1276c:	bxeq	lr
   12770:	bx	r3
   12774:			; <UNDEFINED> instruction: 0x000343b8
   12778:			; <UNDEFINED> instruction: 0x000343b8
   1277c:	andeq	r0, r0, r0
   12780:	ldr	r0, [pc, #36]	; 127ac <_start@@Base+0xb8>
   12784:	ldr	r1, [pc, #36]	; 127b0 <_start@@Base+0xbc>
   12788:	sub	r1, r1, r0
   1278c:	asr	r1, r1, #2
   12790:	add	r1, r1, r1, lsr #31
   12794:	asrs	r1, r1, #1
   12798:	bxeq	lr
   1279c:	ldr	r3, [pc, #16]	; 127b4 <_start@@Base+0xc0>
   127a0:	cmp	r3, #0
   127a4:	bxeq	lr
   127a8:	bx	r3
   127ac:			; <UNDEFINED> instruction: 0x000343b8
   127b0:			; <UNDEFINED> instruction: 0x000343b8
   127b4:	andeq	r0, r0, r0
   127b8:	push	{r4, lr}
   127bc:	ldr	r4, [pc, #24]	; 127dc <_start@@Base+0xe8>
   127c0:	ldrb	r3, [r4]
   127c4:	cmp	r3, #0
   127c8:	popne	{r4, pc}
   127cc:	bl	12754 <_start@@Base+0x60>
   127d0:	mov	r3, #1
   127d4:	strb	r3, [r4]
   127d8:	pop	{r4, pc}
   127dc:	andeq	r4, r3, r0, asr #7
   127e0:	b	12780 <_start@@Base+0x8c>
   127e4:	andeq	r0, r0, r0
   127e8:	sub	r1, r1, r0
   127ec:	push	{r4, r5, lr}
   127f0:	cmp	r1, #8
   127f4:	bhi	12828 <_start@@Base+0x134>
   127f8:	sub	r1, r1, #1
   127fc:	cmp	r1, #7
   12800:	ldrls	pc, [pc, r1, lsl #2]
   12804:	b	128c8 <_start@@Base+0x1d4>
   12808:			; <UNDEFINED> instruction: 0x000128bc
   1280c:			; <UNDEFINED> instruction: 0x000128b0
   12810:	andeq	r2, r1, r4, lsr #17
   12814:	muleq	r1, r8, r8
   12818:	andeq	r2, r1, ip, lsl #17
   1281c:	andeq	r2, r1, r0, lsl #17
   12820:	andeq	r2, r1, r8, ror r8
   12824:	andeq	r2, r1, r8, lsr #16
   12828:	ldrb	r4, [r0, #7]
   1282c:	mov	r5, #0
   12830:	ldrb	r2, [r0, #6]
   12834:	mov	r1, r5
   12838:	orr	r2, r4, r2, lsl #8
   1283c:	ldrb	r4, [r0, #5]
   12840:	orr	r2, r2, r4, lsl #16
   12844:	ldrb	r4, [r0, #4]
   12848:	orr	r2, r2, r4, lsl #24
   1284c:	ldrb	r4, [r0, #3]
   12850:	orr	r1, r1, r4
   12854:	ldrb	r4, [r0, #2]
   12858:	orr	r1, r1, r4, lsl #8
   1285c:	ldrb	r4, [r0, #1]
   12860:	orr	r1, r1, r4, lsl #16
   12864:	ldrb	r4, [r0]
   12868:	mov	r5, #0
   1286c:	mov	r0, r2
   12870:	orr	r1, r1, r4, lsl #24
   12874:	pop	{r4, r5, pc}
   12878:	mov	r4, #0
   1287c:	b	1282c <_start@@Base+0x138>
   12880:	mov	r2, #0
   12884:	mov	r1, r2
   12888:	b	1283c <_start@@Base+0x148>
   1288c:	mov	r2, #0
   12890:	mov	r1, r2
   12894:	b	12844 <_start@@Base+0x150>
   12898:	mov	r2, #0
   1289c:	mov	r1, r2
   128a0:	b	1284c <_start@@Base+0x158>
   128a4:	mov	r2, #0
   128a8:	mov	r1, r2
   128ac:	b	12854 <_start@@Base+0x160>
   128b0:	mov	r2, #0
   128b4:	mov	r1, r2
   128b8:	b	1285c <_start@@Base+0x168>
   128bc:	mov	r2, #0
   128c0:	mov	r1, r2
   128c4:	b	12864 <_start@@Base+0x170>
   128c8:	mov	r0, #0
   128cc:	mov	r1, r0
   128d0:	pop	{r4, r5, pc}
   128d4:	cmp	r0, #4
   128d8:	movhi	r0, #0
   128dc:	movls	r0, #1
   128e0:	bx	lr
   128e4:	cmp	r0, #11
   128e8:	bhi	1290c <_start@@Base+0x218>
   128ec:	cmp	r0, #8
   128f0:	bcs	12914 <_start@@Base+0x220>
   128f4:	cmp	r0, #0
   128f8:	beq	12914 <_start@@Base+0x220>
   128fc:	cmp	r0, #2
   12900:	movne	r0, #0
   12904:	moveq	r0, #1
   12908:	bx	lr
   1290c:	cmp	r0, #255	; 0xff
   12910:	b	12900 <_start@@Base+0x20c>
   12914:	mov	r0, #1
   12918:	bx	lr
   1291c:	sub	r3, r2, r1
   12920:	push	{r4, r5, r6, lr}
   12924:	mov	r6, r0
   12928:	cmp	r3, #3
   1292c:	mov	r4, r1
   12930:	mov	r5, r2
   12934:	ble	12950 <_start@@Base+0x25c>
   12938:	mov	r2, #4
   1293c:	ldr	r1, [pc, #44]	; 12970 <_start@@Base+0x27c>
   12940:	mov	r0, r4
   12944:	bl	125a0 <memcmp@plt>
   12948:	cmp	r0, #0
   1294c:	beq	12968 <_start@@Base+0x274>
   12950:	mov	r2, r5
   12954:	mov	r1, r4
   12958:	mov	r0, r6
   1295c:	mov	r3, #26
   12960:	pop	{r4, r5, r6, lr}
   12964:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   12968:	add	r0, r4, #4
   1296c:	pop	{r4, r5, r6, pc}
   12970:	andeq	r3, r2, sl, asr #17
   12974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12978:	mov	r4, r1
   1297c:	sub	sp, sp, #20
   12980:	mov	r1, r2
   12984:	mov	r5, r0
   12988:	mov	r0, r4
   1298c:	mov	sl, r3
   12990:	add	r7, pc, #560	; 0x230
   12994:	ldrd	r6, [r7]
   12998:	str	r2, [sp, #12]
   1299c:	ldr	fp, [sp, #56]	; 0x38
   129a0:	ldr	r3, [sp, #60]	; 0x3c
   129a4:	bl	127e8 <_start@@Base+0xf4>
   129a8:	cmp	r1, r7
   129ac:	ldr	r2, [sp, #12]
   129b0:	cmpeq	r0, r6
   129b4:	bhi	12a98 <_start@@Base+0x3a4>
   129b8:	add	r7, pc, #528	; 0x210
   129bc:	ldrd	r6, [r7]
   129c0:	and	r8, r0, #-16777216	; 0xff000000
   129c4:	mov	r9, r1
   129c8:	cmp	r1, r7
   129cc:	cmpeq	r0, r6
   129d0:	bhi	12a14 <_start@@Base+0x320>
   129d4:	add	r1, pc, #508	; 0x1fc
   129d8:	ldrd	r0, [r1]
   129dc:	cmp	r9, r1
   129e0:	cmpeq	r8, r0
   129e4:	bne	12a08 <_start@@Base+0x314>
   129e8:	mov	r1, r4
   129ec:	mov	r0, r5
   129f0:	str	r3, [sp]
   129f4:	mov	r3, #5
   129f8:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   129fc:	cmp	r4, r0
   12a00:	movne	r2, #9
   12a04:	bne	12a48 <_start@@Base+0x354>
   12a08:	mov	r0, r4
   12a0c:	add	sp, sp, #20
   12a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a14:	add	r7, pc, #452	; 0x1c4
   12a18:	ldrd	r6, [r7]
   12a1c:	cmp	r1, r7
   12a20:	cmpeq	r8, r6
   12a24:	bne	12a5c <_start@@Base+0x368>
   12a28:	mov	r1, r4
   12a2c:	mov	r0, r5
   12a30:	str	r3, [sp]
   12a34:	mov	r3, #5
   12a38:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12a3c:	cmp	r4, r0
   12a40:	movne	r2, #2
   12a44:	beq	12a08 <_start@@Base+0x314>
   12a48:	mov	r3, #0
   12a4c:	strd	r2, [fp]
   12a50:	mov	r3, #0
   12a54:	str	r3, [sl]
   12a58:	b	12af4 <_start@@Base+0x400>
   12a5c:	bic	r6, r0, #255	; 0xff
   12a60:	add	r1, pc, #384	; 0x180
   12a64:	ldrd	r0, [r1]
   12a68:	cmp	r9, r1
   12a6c:	cmpeq	r6, r0
   12a70:	bne	12a08 <_start@@Base+0x314>
   12a74:	mov	r1, r4
   12a78:	mov	r0, r5
   12a7c:	str	r3, [sp]
   12a80:	mov	r3, #7
   12a84:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12a88:	cmp	r4, r0
   12a8c:	movne	r2, #10
   12a90:	bne	12a48 <_start@@Base+0x354>
   12a94:	b	12a08 <_start@@Base+0x314>
   12a98:	add	r7, pc, #336	; 0x150
   12a9c:	ldrd	r6, [r7]
   12aa0:	cmp	r1, r7
   12aa4:	cmpeq	r0, r6
   12aa8:	bhi	12afc <_start@@Base+0x408>
   12aac:	mov	r7, r1
   12ab0:	add	r1, pc, #320	; 0x140
   12ab4:	ldrd	r0, [r1]
   12ab8:	mov	r8, #0
   12abc:	cmp	r7, r1
   12ac0:	cmpeq	r8, r0
   12ac4:	bne	12a08 <_start@@Base+0x314>
   12ac8:	mov	r1, r4
   12acc:	mov	r0, r5
   12ad0:	str	r3, [sp]
   12ad4:	mov	r3, #4
   12ad8:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12adc:	cmp	r4, r0
   12ae0:	beq	12a08 <_start@@Base+0x314>
   12ae4:	mov	r2, #0
   12ae8:	mov	r3, #0
   12aec:	strd	r2, [fp]
   12af0:	str	r8, [sl]
   12af4:	mov	r4, r0
   12af8:	b	12a08 <_start@@Base+0x314>
   12afc:	add	r7, pc, #252	; 0xfc
   12b00:	ldrd	r6, [r7]
   12b04:	cmp	r1, r7
   12b08:	cmpeq	r0, r6
   12b0c:	bhi	12b50 <_start@@Base+0x45c>
   12b10:	and	r6, r0, #-16777216	; 0xff000000
   12b14:	mov	r7, r1
   12b18:	add	r1, pc, #232	; 0xe8
   12b1c:	ldrd	r0, [r1]
   12b20:	cmp	r7, r1
   12b24:	cmpeq	r6, r0
   12b28:	bne	12a08 <_start@@Base+0x314>
   12b2c:	mov	r1, r4
   12b30:	mov	r0, r5
   12b34:	str	r3, [sp]
   12b38:	mov	r3, #5
   12b3c:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12b40:	cmp	r4, r0
   12b44:	movne	r2, #11
   12b48:	bne	12a48 <_start@@Base+0x354>
   12b4c:	b	12a08 <_start@@Base+0x314>
   12b50:	add	r9, pc, #184	; 0xb8
   12b54:	ldrd	r8, [r9]
   12b58:	lsr	r6, r0, #16
   12b5c:	lsl	r6, r6, #16
   12b60:	cmp	r1, r9
   12b64:	cmpeq	r6, r8
   12b68:	bne	12b90 <_start@@Base+0x49c>
   12b6c:	mov	r1, r4
   12b70:	mov	r0, r5
   12b74:	str	r3, [sp]
   12b78:	mov	r3, #6
   12b7c:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12b80:	cmp	r4, r0
   12b84:	movne	r2, #255	; 0xff
   12b88:	bne	12a48 <_start@@Base+0x354>
   12b8c:	b	12a08 <_start@@Base+0x314>
   12b90:	add	r7, pc, #128	; 0x80
   12b94:	ldrd	r6, [r7]
   12b98:	cmp	r1, r7
   12b9c:	cmpeq	r0, r6
   12ba0:	bne	12a08 <_start@@Base+0x314>
   12ba4:	mov	r1, r4
   12ba8:	mov	r0, r5
   12bac:	str	r3, [sp]
   12bb0:	mov	r3, #8
   12bb4:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12bb8:	cmp	r4, r0
   12bbc:	beq	12a08 <_start@@Base+0x314>
   12bc0:	mov	r2, #8
   12bc4:	b	12a48 <_start@@Base+0x354>
   12bc8:			; <UNDEFINED> instruction: 0xffffffff
   12bcc:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12bd0:			; <UNDEFINED> instruction: 0x46616dff
   12bd4:	rsbmi	r6, pc, #428	; 0x1ac
   12bd8:	strvs	r0, [r0, #-0]
   12bdc:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12be0:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12be4:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12be8:	strbtmi	r6, [r1], -r0, lsl #28
   12bec:	rsbmi	r6, pc, #428	; 0x1ac
   12bf0:	ldrshvc	pc, [pc, #255]	; 12cf7 <_start@@Base+0x603>	; <UNPREDICTABLE>
   12bf4:	svcmi	0x00746865
   12bf8:	andeq	r0, r0, r0
   12bfc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12c00:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12c04:	rsbpl	r7, r1, #117	; 0x75
   12c08:	andvc	r0, r0, #0
   12c0c:	svcmi	0x00746865
   12c10:	strbvs	r0, [r4, #-0]!
   12c14:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12c18:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12c1c:	rsbpl	r7, r1, #117	; 0x75
   12c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c24:	mov	r5, r1
   12c28:	sub	sp, sp, #20
   12c2c:	mov	r1, r2
   12c30:	mov	sl, r0
   12c34:	mov	r0, r5
   12c38:	mov	r6, r2
   12c3c:	mov	r7, r3
   12c40:	bl	127e8 <_start@@Base+0xf4>
   12c44:	add	r3, pc, #532	; 0x214
   12c48:	ldrd	r2, [r3]
   12c4c:	strd	r0, [sp, #8]
   12c50:	ldr	fp, [sp, #60]	; 0x3c
   12c54:	cmp	r1, r3
   12c58:	cmpeq	r0, r2
   12c5c:	bhi	12ccc <_start@@Base+0x5d8>
   12c60:	ldr	r1, [sp, #12]
   12c64:	mov	r8, #0
   12c68:	bic	r3, r1, #255	; 0xff
   12c6c:	add	r1, pc, #500	; 0x1f4
   12c70:	ldrd	r0, [r1]
   12c74:	cmp	r3, r1
   12c78:	cmpeq	r8, r0
   12c7c:	beq	12c90 <_start@@Base+0x59c>
   12c80:	mov	r4, r5
   12c84:	mov	r0, r4
   12c88:	add	sp, sp, #20
   12c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c90:	mov	r3, #3
   12c94:	mov	r2, r6
   12c98:	str	fp, [sp]
   12c9c:	mov	r1, r5
   12ca0:	mov	r0, sl
   12ca4:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12ca8:	cmp	r5, r0
   12cac:	mov	r4, r0
   12cb0:	beq	12c84 <_start@@Base+0x590>
   12cb4:	ldr	r1, [sp, #56]	; 0x38
   12cb8:	mov	r2, #4
   12cbc:	mov	r3, #0
   12cc0:	strd	r2, [r1]
   12cc4:	str	r8, [r7]
   12cc8:	b	12c84 <_start@@Base+0x590>
   12ccc:	add	r3, pc, #412	; 0x19c
   12cd0:	ldrd	r2, [r3]
   12cd4:	ldrd	r0, [sp, #8]
   12cd8:	cmp	r1, r3
   12cdc:	cmpeq	r0, r2
   12ce0:	bne	12d68 <_start@@Base+0x674>
   12ce4:	mov	r2, r6
   12ce8:	mov	r3, #8
   12cec:	str	fp, [sp]
   12cf0:	mov	r1, r5
   12cf4:	mov	r0, sl
   12cf8:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12cfc:	cmp	r5, r0
   12d00:	mov	r4, r0
   12d04:	movne	r2, #3
   12d08:	bne	12db4 <_start@@Base+0x6c0>
   12d0c:	add	r1, pc, #356	; 0x164
   12d10:	ldrd	r0, [r1]
   12d14:	mov	r2, #0
   12d18:	ldr	r3, [sp, #12]
   12d1c:	cmp	r3, r1
   12d20:	cmpeq	r2, r0
   12d24:	bne	12dcc <_start@@Base+0x6d8>
   12d28:	mov	r3, #4
   12d2c:	mov	r2, r6
   12d30:	str	fp, [sp]
   12d34:	mov	r1, r4
   12d38:	mov	r0, sl
   12d3c:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12d40:	cmp	r4, r0
   12d44:	beq	12c80 <_start@@Base+0x58c>
   12d48:	ldr	r1, [sp, #56]	; 0x38
   12d4c:	mov	r3, #0
   12d50:	mov	r2, #0
   12d54:	mov	r4, r0
   12d58:	strd	r2, [r1]
   12d5c:	mov	r3, #0
   12d60:	str	r3, [r7]
   12d64:	b	12c84 <_start@@Base+0x590>
   12d68:	ldr	r1, [sp, #8]
   12d6c:	ldr	r3, [sp, #12]
   12d70:	bic	r2, r1, #255	; 0xff
   12d74:	add	r1, pc, #260	; 0x104
   12d78:	ldrd	r0, [r1]
   12d7c:	cmp	r3, r1
   12d80:	cmpeq	r2, r0
   12d84:	movne	r4, r5
   12d88:	bne	12d0c <_start@@Base+0x618>
   12d8c:	mov	r2, r6
   12d90:	mov	r3, #7
   12d94:	str	fp, [sp]
   12d98:	mov	r1, r5
   12d9c:	mov	r0, sl
   12da0:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12da4:	cmp	r5, r0
   12da8:	mov	r4, r0
   12dac:	movne	r2, #1
   12db0:	beq	12d0c <_start@@Base+0x618>
   12db4:	ldr	r1, [sp, #56]	; 0x38
   12db8:	mov	r3, #0
   12dbc:	strd	r2, [r1]
   12dc0:	mov	r3, #0
   12dc4:	str	r3, [r7]
   12dc8:	b	12c84 <_start@@Base+0x590>
   12dcc:	add	r3, pc, #180	; 0xb4
   12dd0:	ldrd	r2, [r3]
   12dd4:	ldrd	r0, [sp, #8]
   12dd8:	cmp	r1, r3
   12ddc:	cmpeq	r0, r2
   12de0:	bne	12c80 <_start@@Base+0x58c>
   12de4:	mov	r1, r6
   12de8:	add	r0, r4, #8
   12dec:	bl	127e8 <_start@@Base+0xf4>
   12df0:	add	r3, pc, #152	; 0x98
   12df4:	ldrd	r2, [r3]
   12df8:	cmp	r1, r3
   12dfc:	cmpeq	r0, r2
   12e00:	bne	12c80 <_start@@Base+0x58c>
   12e04:	add	r8, r4, #16
   12e08:	mov	r1, r6
   12e0c:	mov	r0, r8
   12e10:	bl	127e8 <_start@@Base+0xf4>
   12e14:	bic	r2, r0, #255	; 0xff
   12e18:	mov	r3, r1
   12e1c:	add	r1, pc, #116	; 0x74
   12e20:	ldrd	r0, [r1]
   12e24:	cmp	r3, r1
   12e28:	cmpeq	r2, r0
   12e2c:	bne	12c80 <_start@@Base+0x58c>
   12e30:	mov	r3, #7
   12e34:	mov	r2, r6
   12e38:	str	fp, [sp]
   12e3c:	mov	r1, r8
   12e40:	mov	r0, sl
   12e44:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12e48:	cmp	r8, r0
   12e4c:	mov	r4, r0
   12e50:	beq	12c80 <_start@@Base+0x58c>
   12e54:	mov	r2, #2
   12e58:	b	12db4 <_start@@Base+0x6c0>
   12e5c:	nop	{0}
   12e60:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   12e64:	stclmi	14, cr6, [pc, #-460]!	; 12ca0 <_start@@Base+0x5ac>
   12e68:	andeq	r0, r0, r0
   12e6c:	cmnmi	ip, r0, lsl #8
   12e70:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   12e74:	stclmi	14, cr6, [pc, #-460]!	; 12cb0 <_start@@Base+0x5bc>
   12e78:	andeq	r0, r0, r0
   12e7c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12e80:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   12e84:	stclmi	14, cr6, [pc, #-460]!	; 12cc0 <_start@@Base+0x5cc>
   12e88:	cmnpl	r9, #112, 26	; 0x1c00
   12e8c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   12e90:	rsbvs	r6, ip, #364904448	; 0x15c00000
   12e94:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   12e98:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   12e9c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   12ea0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea4:	mov	r4, r1
   12ea8:	mov	r5, r0
   12eac:	mov	r1, r2
   12eb0:	mov	r0, r4
   12eb4:	mov	sl, r2
   12eb8:	mov	fp, r3
   12ebc:	bl	127e8 <_start@@Base+0xf4>
   12ec0:	add	r3, pc, #280	; 0x118
   12ec4:	ldrd	r2, [r3]
   12ec8:	mov	r6, #0
   12ecc:	cmp	r1, r3
   12ed0:	cmpeq	r0, r2
   12ed4:	bhi	12f28 <_start@@Base+0x834>
   12ed8:	mov	r3, r1
   12edc:	add	r1, pc, #260	; 0x104
   12ee0:	ldrd	r0, [r1]
   12ee4:	cmp	r3, r1
   12ee8:	cmpeq	r6, r0
   12eec:	bne	12f1c <_start@@Base+0x828>
   12ef0:	ldr	r3, [sp, #52]	; 0x34
   12ef4:	mov	r2, sl
   12ef8:	mov	r1, r4
   12efc:	mov	r0, r5
   12f00:	str	r3, [sp]
   12f04:	mov	r3, #4
   12f08:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12f0c:	cmp	r4, r0
   12f10:	movne	r2, #3
   12f14:	movne	r3, #0
   12f18:	bne	12fd0 <_start@@Base+0x8dc>
   12f1c:	mov	r0, r4
   12f20:	add	sp, sp, #12
   12f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f28:	add	r9, pc, #192	; 0xc0
   12f2c:	ldrd	r8, [r9]
   12f30:	lsr	r6, r0, #16
   12f34:	mov	r7, r1
   12f38:	lsl	r6, r6, #16
   12f3c:	cmp	r1, r9
   12f40:	cmpeq	r6, r8
   12f44:	bne	12f8c <_start@@Base+0x898>
   12f48:	ldr	r3, [sp, #52]	; 0x34
   12f4c:	mov	r2, sl
   12f50:	mov	r1, r4
   12f54:	mov	r0, r5
   12f58:	str	r3, [sp]
   12f5c:	mov	r3, #6
   12f60:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12f64:	cmp	r4, r0
   12f68:	beq	12f1c <_start@@Base+0x828>
   12f6c:	ldr	r1, [sp, #48]	; 0x30
   12f70:	mvn	r3, #0
   12f74:	mvn	r2, #1
   12f78:	strd	r2, [r1]
   12f7c:	mov	r3, #1
   12f80:	str	r3, [fp]
   12f84:	mov	r4, r0
   12f88:	b	12f1c <_start@@Base+0x828>
   12f8c:	add	r1, pc, #100	; 0x64
   12f90:	ldrd	r0, [r1]
   12f94:	mov	r6, #0
   12f98:	cmp	r7, r1
   12f9c:	cmpeq	r6, r0
   12fa0:	bne	12f1c <_start@@Base+0x828>
   12fa4:	ldr	r3, [sp, #52]	; 0x34
   12fa8:	mov	r2, sl
   12fac:	mov	r1, r4
   12fb0:	mov	r0, r5
   12fb4:	str	r3, [sp]
   12fb8:	mov	r3, #4
   12fbc:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   12fc0:	cmp	r4, r0
   12fc4:	beq	12f1c <_start@@Base+0x828>
   12fc8:	add	r3, pc, #48	; 0x30
   12fcc:	ldrd	r2, [r3]
   12fd0:	ldr	r1, [sp, #48]	; 0x30
   12fd4:	strd	r2, [r1]
   12fd8:	str	r6, [fp]
   12fdc:	b	12f84 <_start@@Base+0x890>
   12fe0:			; <UNDEFINED> instruction: 0xffffffff
   12fe4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   12fe8:	andeq	r0, r0, r0
   12fec:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   12ff0:	strbvs	r0, [r7, #-0]!
   12ff4:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   12ff8:	andeq	r0, r0, r0
   12ffc:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   13000:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   13004:	andeq	r0, r0, r0
   13008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1300c:	mov	r4, r1
   13010:	sub	sp, sp, #20
   13014:	mov	r1, r2
   13018:	mov	r5, r0
   1301c:	mov	r0, r4
   13020:	mov	sl, r3
   13024:	add	r7, pc, #348	; 0x15c
   13028:	ldrd	r6, [r7]
   1302c:	str	r2, [sp, #12]
   13030:	ldr	fp, [sp, #56]	; 0x38
   13034:	ldr	r3, [sp, #60]	; 0x3c
   13038:	bl	127e8 <_start@@Base+0xf4>
   1303c:	cmp	r1, r7
   13040:	ldr	r2, [sp, #12]
   13044:	cmpeq	r0, r6
   13048:	bhi	13094 <_start@@Base+0x9a0>
   1304c:	mov	r7, r1
   13050:	add	r1, pc, #312	; 0x138
   13054:	ldrd	r0, [r1]
   13058:	mov	r8, #0
   1305c:	cmp	r7, r1
   13060:	cmpeq	r8, r0
   13064:	bne	13088 <_start@@Base+0x994>
   13068:	mov	r1, r4
   1306c:	mov	r0, r5
   13070:	str	r3, [sp]
   13074:	mov	r3, #4
   13078:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   1307c:	cmp	r4, r0
   13080:	movne	r2, #2
   13084:	bne	130e4 <_start@@Base+0x9f0>
   13088:	mov	r0, r4
   1308c:	add	sp, sp, #20
   13090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13094:	add	r7, pc, #252	; 0xfc
   13098:	ldrd	r6, [r7]
   1309c:	cmp	r1, r7
   130a0:	cmpeq	r0, r6
   130a4:	bhi	130f8 <_start@@Base+0xa04>
   130a8:	mov	r7, r1
   130ac:	add	r1, pc, #236	; 0xec
   130b0:	ldrd	r0, [r1]
   130b4:	mov	r8, #0
   130b8:	cmp	r7, r1
   130bc:	cmpeq	r8, r0
   130c0:	bne	13088 <_start@@Base+0x994>
   130c4:	mov	r1, r4
   130c8:	mov	r0, r5
   130cc:	str	r3, [sp]
   130d0:	mov	r3, #4
   130d4:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   130d8:	cmp	r4, r0
   130dc:	beq	13088 <_start@@Base+0x994>
   130e0:	mov	r2, #42	; 0x2a
   130e4:	mov	r3, #0
   130e8:	strd	r2, [fp]
   130ec:	str	r8, [sl]
   130f0:	mov	r4, r0
   130f4:	b	13088 <_start@@Base+0x994>
   130f8:	add	r9, pc, #168	; 0xa8
   130fc:	ldrd	r8, [r9]
   13100:	bic	r6, r0, #255	; 0xff
   13104:	mov	r7, r1
   13108:	cmp	r1, r9
   1310c:	cmpeq	r6, r8
   13110:	bne	13148 <_start@@Base+0xa54>
   13114:	mov	r1, r4
   13118:	mov	r0, r5
   1311c:	str	r3, [sp]
   13120:	mov	r3, #7
   13124:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13128:	cmp	r4, r0
   1312c:	mvnne	r2, #0
   13130:	beq	13088 <_start@@Base+0x994>
   13134:	mvn	r3, #0
   13138:	strd	r2, [fp]
   1313c:	mov	r3, #1
   13140:	str	r3, [sl]
   13144:	b	130f0 <_start@@Base+0x9fc>
   13148:	lsr	r6, r0, #16
   1314c:	add	r1, pc, #92	; 0x5c
   13150:	ldrd	r0, [r1]
   13154:	lsl	r6, r6, #16
   13158:	cmp	r7, r1
   1315c:	cmpeq	r6, r0
   13160:	bne	13088 <_start@@Base+0x994>
   13164:	mov	r1, r4
   13168:	mov	r0, r5
   1316c:	str	r3, [sp]
   13170:	mov	r3, #6
   13174:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13178:	cmp	r4, r0
   1317c:	beq	13088 <_start@@Base+0x994>
   13180:	mvn	r2, #1
   13184:	b	13134 <_start@@Base+0xa40>
   13188:			; <UNDEFINED> instruction: 0xffffffff
   1318c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13190:	andeq	r0, r0, r0
   13194:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   13198:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1319c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   131a0:	andeq	r0, r0, r0
   131a4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   131a8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   131ac:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   131b0:	strbvs	r0, [r7, #-0]!
   131b4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   131b8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131bc:	mov	r4, r1
   131c0:	mov	r5, r0
   131c4:	mov	r1, r2
   131c8:	mov	r0, r4
   131cc:	mov	sl, r2
   131d0:	mov	fp, r3
   131d4:	add	r9, pc, #244	; 0xf4
   131d8:	ldrd	r8, [r9]
   131dc:	mov	r6, #0
   131e0:	bl	127e8 <_start@@Base+0xf4>
   131e4:	cmp	r1, r9
   131e8:	cmpeq	r0, r8
   131ec:	bhi	13238 <_start@@Base+0xb44>
   131f0:	add	r3, pc, #224	; 0xe0
   131f4:	ldrd	r2, [r3]
   131f8:	cmp	r1, r3
   131fc:	cmpeq	r6, r2
   13200:	bne	1322c <_start@@Base+0xb38>
   13204:	ldr	r3, [sp, #52]	; 0x34
   13208:	mov	r2, sl
   1320c:	mov	r1, r4
   13210:	mov	r0, r5
   13214:	str	r3, [sp]
   13218:	mov	r3, #4
   1321c:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13220:	cmp	r4, r0
   13224:	mvnne	r2, #11
   13228:	bne	13274 <_start@@Base+0xb80>
   1322c:	mov	r0, r4
   13230:	add	sp, sp, #12
   13234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13238:	add	r3, pc, #160	; 0xa0
   1323c:	ldrd	r2, [r3]
   13240:	cmp	r1, r3
   13244:	cmpeq	r6, r2
   13248:	bne	13290 <_start@@Base+0xb9c>
   1324c:	ldr	r3, [sp, #52]	; 0x34
   13250:	mov	r2, sl
   13254:	mov	r1, r4
   13258:	mov	r0, r5
   1325c:	str	r3, [sp]
   13260:	mov	r3, #4
   13264:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13268:	cmp	r4, r0
   1326c:	mvnne	r2, #9
   13270:	beq	1322c <_start@@Base+0xb38>
   13274:	ldr	r1, [sp, #48]	; 0x30
   13278:	mvn	r3, #0
   1327c:	mov	r4, r0
   13280:	strd	r2, [r1]
   13284:	mov	r3, #1
   13288:	str	r3, [fp]
   1328c:	b	1322c <_start@@Base+0xb38>
   13290:	add	r3, pc, #80	; 0x50
   13294:	ldrd	r2, [r3]
   13298:	cmp	r1, r3
   1329c:	cmpeq	r6, r2
   132a0:	bne	1322c <_start@@Base+0xb38>
   132a4:	ldr	r3, [sp, #52]	; 0x34
   132a8:	mov	r2, sl
   132ac:	mov	r1, r4
   132b0:	mov	r0, r5
   132b4:	str	r3, [sp]
   132b8:	mov	r3, #4
   132bc:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   132c0:	cmp	r4, r0
   132c4:	beq	1322c <_start@@Base+0xb38>
   132c8:	mvn	r2, #10
   132cc:	b	13274 <_start@@Base+0xb80>
   132d0:			; <UNDEFINED> instruction: 0xffffffff
   132d4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   132d8:	andeq	r0, r0, r0
   132dc:	mcrvs	7, 3, r6, cr5, cr1, {1}
   132e0:	andeq	r0, r0, r0
   132e4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   132e8:	andeq	r0, r0, r0
   132ec:	mcrvs	7, 3, r6, cr5, cr2, {1}
   132f0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f4:	mov	r4, r1
   132f8:	mov	r8, r0
   132fc:	mov	r1, r2
   13300:	mov	r0, r4
   13304:	mov	r9, r2
   13308:	mov	sl, r3
   1330c:	bl	127e8 <_start@@Base+0xf4>
   13310:	add	r3, pc, #240	; 0xf0
   13314:	ldrd	r2, [r3]
   13318:	mov	r5, #0
   1331c:	ldr	fp, [sp, #52]	; 0x34
   13320:	cmp	r1, r3
   13324:	cmpeq	r0, r2
   13328:	bhi	13370 <_start@@Base+0xc7c>
   1332c:	add	r3, pc, #220	; 0xdc
   13330:	ldrd	r2, [r3]
   13334:	cmp	r1, r3
   13338:	cmpeq	r5, r2
   1333c:	bne	13364 <_start@@Base+0xc70>
   13340:	mov	r2, r9
   13344:	mov	r3, #4
   13348:	str	fp, [sp]
   1334c:	mov	r1, r4
   13350:	mov	r0, r8
   13354:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13358:	cmp	r4, r0
   1335c:	movne	r2, #8
   13360:	bne	133ac <_start@@Base+0xcb8>
   13364:	mov	r0, r4
   13368:	add	sp, sp, #12
   1336c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13370:	add	r7, pc, #160	; 0xa0
   13374:	ldrd	r6, [r7]
   13378:	bic	r3, r1, #255	; 0xff
   1337c:	cmp	r3, r7
   13380:	cmpeq	r5, r6
   13384:	bne	133c4 <_start@@Base+0xcd0>
   13388:	mov	r2, r9
   1338c:	mov	r3, #3
   13390:	str	fp, [sp]
   13394:	mov	r1, r4
   13398:	mov	r0, r8
   1339c:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   133a0:	cmp	r4, r0
   133a4:	movne	r2, #1
   133a8:	beq	13364 <_start@@Base+0xc70>
   133ac:	ldr	r1, [sp, #48]	; 0x30
   133b0:	mov	r3, #0
   133b4:	mov	r4, r0
   133b8:	strd	r2, [r1]
   133bc:	str	r5, [sl]
   133c0:	b	13364 <_start@@Base+0xc70>
   133c4:	add	r3, pc, #84	; 0x54
   133c8:	ldrd	r2, [r3]
   133cc:	and	r6, r0, #-16777216	; 0xff000000
   133d0:	cmp	r1, r3
   133d4:	cmpeq	r6, r2
   133d8:	bne	13364 <_start@@Base+0xc70>
   133dc:	mov	r3, #5
   133e0:	mov	r2, r9
   133e4:	str	fp, [sp]
   133e8:	mov	r1, r4
   133ec:	mov	r0, r8
   133f0:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   133f4:	cmp	r4, r0
   133f8:	beq	13364 <_start@@Base+0xc70>
   133fc:	mov	r2, #2
   13400:	b	133ac <_start@@Base+0xcb8>
   13404:	nop	{0}
   13408:	ldclvs	15, cr15, [pc, #1020]!	; 1380c <_start@@Base+0x1118>
   1340c:	ldrbmi	r6, [r2, -r5, ror #10]!
   13410:	andeq	r0, r0, r0
   13414:	rsbmi	r7, ip, #423624704	; 0x19400000
   13418:	andeq	r0, r0, r0
   1341c:	rsbpl	r6, r5, #0, 8
   13420:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   13424:	ldrbmi	r6, [r2, -r5, ror #10]!
   13428:	sub	r3, r2, r1
   1342c:	cmp	r3, #1
   13430:	ble	13454 <_start@@Base+0xd60>
   13434:	ldrb	r3, [r1]
   13438:	cmp	r3, #32
   1343c:	bhi	13458 <_start@@Base+0xd64>
   13440:	bne	13454 <_start@@Base+0xd60>
   13444:	ldrb	r3, [r1, #1]
   13448:	cmp	r3, #32
   1344c:	addhi	r1, r1, #1
   13450:	bhi	13458 <_start@@Base+0xd64>
   13454:	b	1fb60 <flatcc_json_parser_space_ext@@Base>
   13458:	mov	r0, r1
   1345c:	bx	lr
   13460:	push	{r4, r5, r6, lr}
   13464:	mov	r4, r2
   13468:	mov	r5, r3
   1346c:	mov	r6, r0
   13470:	bl	13428 <_start@@Base+0xd34>
   13474:	cmp	r4, r0
   13478:	moveq	r3, #0
   1347c:	beq	13510 <_start@@Base+0xe1c>
   13480:	ldrb	r3, [r0]
   13484:	cmp	r3, #44	; 0x2c
   13488:	beq	134c0 <_start@@Base+0xdcc>
   1348c:	mov	r3, #0
   13490:	str	r3, [r5]
   13494:	ldrb	r3, [r0]
   13498:	cmp	r3, #93	; 0x5d
   1349c:	movne	r3, #9
   134a0:	movne	r2, r4
   134a4:	movne	r1, r0
   134a8:	bne	134ec <_start@@Base+0xdf8>
   134ac:	mov	r2, r4
   134b0:	add	r1, r0, #1
   134b4:	mov	r0, r6
   134b8:	pop	{r4, r5, r6, lr}
   134bc:	b	13428 <_start@@Base+0xd34>
   134c0:	add	r1, r0, #1
   134c4:	mov	r2, r4
   134c8:	mov	r0, r6
   134cc:	bl	13428 <_start@@Base+0xd34>
   134d0:	cmp	r4, r0
   134d4:	bne	134f8 <_start@@Base+0xe04>
   134d8:	mov	r3, #0
   134dc:	mov	r2, r4
   134e0:	mov	r1, r4
   134e4:	str	r3, [r5]
   134e8:	mov	r3, #9
   134ec:	mov	r0, r6
   134f0:	pop	{r4, r5, r6, lr}
   134f4:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   134f8:	ldrb	r3, [r0]
   134fc:	cmp	r3, #93	; 0x5d
   13500:	movne	r3, #1
   13504:	moveq	r3, #0
   13508:	streq	r3, [r5]
   1350c:	beq	134ac <_start@@Base+0xdb8>
   13510:	str	r3, [r5]
   13514:	pop	{r4, r5, r6, pc}
   13518:	push	{r4, r5, r6, lr}
   1351c:	mov	r4, r2
   13520:	mov	r5, r3
   13524:	mov	r6, r0
   13528:	bl	13428 <_start@@Base+0xd34>
   1352c:	cmp	r4, r0
   13530:	moveq	r3, #0
   13534:	beq	135c8 <_start@@Base+0xed4>
   13538:	ldrb	r3, [r0]
   1353c:	cmp	r3, #44	; 0x2c
   13540:	beq	13578 <_start@@Base+0xe84>
   13544:	mov	r3, #0
   13548:	str	r3, [r5]
   1354c:	ldrb	r3, [r0]
   13550:	cmp	r3, #125	; 0x7d
   13554:	movne	r3, #10
   13558:	movne	r2, r4
   1355c:	movne	r1, r0
   13560:	bne	135a4 <_start@@Base+0xeb0>
   13564:	mov	r2, r4
   13568:	add	r1, r0, #1
   1356c:	mov	r0, r6
   13570:	pop	{r4, r5, r6, lr}
   13574:	b	13428 <_start@@Base+0xd34>
   13578:	add	r1, r0, #1
   1357c:	mov	r2, r4
   13580:	mov	r0, r6
   13584:	bl	13428 <_start@@Base+0xd34>
   13588:	cmp	r4, r0
   1358c:	bne	135b0 <_start@@Base+0xebc>
   13590:	mov	r3, #0
   13594:	mov	r2, r4
   13598:	mov	r1, r4
   1359c:	str	r3, [r5]
   135a0:	mov	r3, #10
   135a4:	mov	r0, r6
   135a8:	pop	{r4, r5, r6, lr}
   135ac:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   135b0:	ldrb	r3, [r0]
   135b4:	cmp	r3, #125	; 0x7d
   135b8:	movne	r3, #1
   135bc:	moveq	r3, #0
   135c0:	streq	r3, [r5]
   135c4:	beq	13564 <_start@@Base+0xe70>
   135c8:	str	r3, [r5]
   135cc:	pop	{r4, r5, r6, pc}
   135d0:	sub	r1, r1, r0
   135d4:	cmp	r1, r2
   135d8:	bxle	lr
   135dc:	ldrb	r3, [r0, r2]
   135e0:	cmp	r3, #46	; 0x2e
   135e4:	addeq	r2, r2, #1
   135e8:	addeq	r0, r0, r2
   135ec:	bx	lr
   135f0:	push	{r4, r5, r6, r7, r8, lr}
   135f4:	mov	r4, #0
   135f8:	sub	sp, sp, #24
   135fc:	mov	r5, #0
   13600:	mov	lr, #0
   13604:	cmp	r1, r2
   13608:	moveq	r0, r1
   1360c:	strd	r4, [r3]
   13610:	str	lr, [sp, #12]
   13614:	strd	r4, [sp, #16]
   13618:	beq	13694 <_start@@Base+0xfa0>
   1361c:	mov	r6, r3
   13620:	add	r3, sp, #16
   13624:	mov	r4, r1
   13628:	mov	r8, r0
   1362c:	str	r3, [sp]
   13630:	add	r3, sp, #12
   13634:	mov	r7, r2
   13638:	bl	20c14 <flatcc_json_parser_integer@@Base>
   1363c:	cmp	r4, r0
   13640:	beq	13694 <_start@@Base+0xfa0>
   13644:	ldr	r3, [sp, #12]
   13648:	ldrd	r4, [sp, #16]
   1364c:	cmp	r3, #0
   13650:	beq	13674 <_start@@Base+0xf80>
   13654:	cmp	r5, #-2147483648	; 0x80000000
   13658:	cmpeq	r4, #0
   1365c:	movhi	r3, #8
   13660:	bhi	13684 <_start@@Base+0xf90>
   13664:	rsbs	r4, r4, #0
   13668:	rsc	r5, r5, #0
   1366c:	strd	r4, [r6]
   13670:	b	13694 <_start@@Base+0xfa0>
   13674:	cmp	r4, #0
   13678:	sbcs	r3, r5, #0
   1367c:	bge	1366c <_start@@Base+0xf78>
   13680:	mov	r3, #7
   13684:	mov	r1, r0
   13688:	mov	r2, r7
   1368c:	mov	r0, r8
   13690:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   13694:	add	sp, sp, #24
   13698:	pop	{r4, r5, r6, r7, r8, pc}
   1369c:	cmp	r1, r2
   136a0:	beq	136ec <_start@@Base+0xff8>
   136a4:	ldrb	r3, [r1]
   136a8:	push	{lr}		; (str lr, [sp, #-4]!)
   136ac:	mov	lr, r0
   136b0:	cmp	r3, #34	; 0x22
   136b4:	moveq	r2, #0
   136b8:	addeq	r3, r1, #1
   136bc:	streq	r2, [r0, #12]
   136c0:	beq	136e4 <_start@@Base+0xff0>
   136c4:	cmp	r3, #46	; 0x2e
   136c8:	movne	r3, #1
   136cc:	strne	r3, [r0, #12]
   136d0:	movne	r3, r1
   136d4:	bne	136e4 <_start@@Base+0xff0>
   136d8:	mov	r3, #5
   136dc:	pop	{lr}		; (ldr lr, [sp], #4)
   136e0:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   136e4:	mov	r0, r3
   136e8:	pop	{pc}		; (ldr pc, [sp], #4)
   136ec:	mov	r0, r2
   136f0:	bx	lr
   136f4:	push	{r4, r5, r6, lr}
   136f8:	mov	r4, r0
   136fc:	mov	r5, r2
   13700:	bl	1369c <_start@@Base+0xfa8>
   13704:	ldr	r3, [r4, #12]
   13708:	cmp	r3, #0
   1370c:	popne	{r4, r5, r6, pc}
   13710:	mov	r1, r0
   13714:	mov	r2, r5
   13718:	mov	r0, r4
   1371c:	pop	{r4, r5, r6, lr}
   13720:	b	13428 <_start@@Base+0xd34>
   13724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13728:	sub	sp, sp, #28
   1372c:	mov	fp, r3
   13730:	mov	r6, #0
   13734:	mov	r5, r2
   13738:	mov	r7, r0
   1373c:	ldr	r3, [sp, #64]	; 0x40
   13740:	strb	r6, [r3]
   13744:	bl	136f4 <_start@@Base+0x1000>
   13748:	cmp	r5, r0
   1374c:	mov	r4, r0
   13750:	beq	13810 <_start@@Base+0x111c>
   13754:	mov	r9, r6
   13758:	mov	r8, fp
   1375c:	mov	sl, r4
   13760:	add	r3, sp, #12
   13764:	mov	r1, r4
   13768:	mov	r2, r5
   1376c:	mov	r0, r7
   13770:	str	r3, [sp, #4]
   13774:	add	r3, sp, #16
   13778:	str	r3, [sp]
   1377c:	add	r3, sp, #8
   13780:	ldr	ip, [r8]
   13784:	blx	ip
   13788:	cmp	r5, r0
   1378c:	mov	r4, r0
   13790:	beq	13810 <_start@@Base+0x111c>
   13794:	cmp	sl, r0
   13798:	bne	1381c <_start@@Base+0x1128>
   1379c:	ldr	r3, [r8, #4]!
   137a0:	mov	sl, r0
   137a4:	cmp	r3, #0
   137a8:	bne	13760 <_start@@Base+0x106c>
   137ac:	mov	r3, #23
   137b0:	b	137c4 <_start@@Base+0x10d0>
   137b4:	ldr	r3, [r7, #12]
   137b8:	cmp	r3, #0
   137bc:	beq	13824 <_start@@Base+0x1130>
   137c0:	mov	r3, #14
   137c4:	mov	r1, r4
   137c8:	mov	r2, r5
   137cc:	mov	r0, r7
   137d0:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   137d4:	mov	r4, r0
   137d8:	b	13810 <_start@@Base+0x111c>
   137dc:	ldrd	r2, [sp, #16]
   137e0:	orrs	r3, r2, r3
   137e4:	movne	r9, #1
   137e8:	moveq	r9, #0
   137ec:	ldr	r3, [sp, #64]	; 0x40
   137f0:	add	r6, r6, #1
   137f4:	ldr	r2, [sp, #64]	; 0x40
   137f8:	ldrb	r3, [r3]
   137fc:	add	r3, r9, r3
   13800:	strb	r3, [r2]
   13804:	ldr	r3, [sp, #12]
   13808:	cmp	r3, #0
   1380c:	bne	13758 <_start@@Base+0x1064>
   13810:	mov	r0, r4
   13814:	add	sp, sp, #28
   13818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1381c:	cmp	r6, #0
   13820:	bne	137b4 <_start@@Base+0x10c0>
   13824:	ldr	r3, [sp, #8]
   13828:	cmp	r3, #0
   1382c:	beq	137dc <_start@@Base+0x10e8>
   13830:	mov	r3, #8
   13834:	mov	r2, r5
   13838:	mov	r1, r4
   1383c:	mov	r0, r7
   13840:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   13844:	cmp	r5, r0
   13848:	bne	137ec <_start@@Base+0x10f8>
   1384c:	mov	r4, r5
   13850:	b	13810 <_start@@Base+0x111c>
   13854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13858:	sub	sp, sp, #28
   1385c:	mov	fp, r3
   13860:	mov	r3, #0
   13864:	mov	r5, r2
   13868:	mov	r6, r0
   1386c:	ldr	r8, [sp, #64]	; 0x40
   13870:	str	r3, [r8]
   13874:	bl	136f4 <_start@@Base+0x1000>
   13878:	cmp	r5, r0
   1387c:	mov	r4, r0
   13880:	beq	13948 <_start@@Base+0x1254>
   13884:	mov	r7, #0
   13888:	mov	r9, fp
   1388c:	mov	sl, r4
   13890:	add	r3, sp, #12
   13894:	mov	r1, r4
   13898:	mov	r2, r5
   1389c:	mov	r0, r6
   138a0:	str	r3, [sp, #4]
   138a4:	add	r3, sp, #16
   138a8:	str	r3, [sp]
   138ac:	add	r3, sp, #8
   138b0:	ldr	ip, [r9]
   138b4:	blx	ip
   138b8:	cmp	r5, r0
   138bc:	mov	r4, r0
   138c0:	beq	13948 <_start@@Base+0x1254>
   138c4:	cmp	sl, r0
   138c8:	bne	1390c <_start@@Base+0x1218>
   138cc:	ldr	r3, [r9, #4]!
   138d0:	mov	sl, r0
   138d4:	cmp	r3, #0
   138d8:	bne	13890 <_start@@Base+0x119c>
   138dc:	mov	r3, #23
   138e0:	b	138f4 <_start@@Base+0x1200>
   138e4:	ldr	r3, [r6, #12]
   138e8:	cmp	r3, #0
   138ec:	beq	13914 <_start@@Base+0x1220>
   138f0:	mov	r3, #14
   138f4:	mov	r1, r4
   138f8:	mov	r2, r5
   138fc:	mov	r0, r6
   13900:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   13904:	mov	r4, r0
   13908:	b	13948 <_start@@Base+0x1254>
   1390c:	cmp	r7, #0
   13910:	bne	138e4 <_start@@Base+0x11f0>
   13914:	ldrd	r0, [sp, #16]
   13918:	add	r7, r7, #1
   1391c:	bl	21eac <flatcc_json_parser_struct_as_root@@Base+0x588>
   13920:	vmov	s14, r0
   13924:	ldr	r3, [sp, #8]
   13928:	vldr	s15, [r8]
   1392c:	cmp	r3, #0
   13930:	ldr	r3, [sp, #12]
   13934:	vnegne.f32	s14, s14
   13938:	cmp	r3, #0
   1393c:	vadd.f32	s15, s15, s14
   13940:	vstr	s15, [r8]
   13944:	bne	13888 <_start@@Base+0x1194>
   13948:	mov	r0, r4
   1394c:	add	sp, sp, #28
   13950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13958:	sub	sp, sp, #36	; 0x24
   1395c:	mov	sl, #0
   13960:	mov	fp, #0
   13964:	mov	r5, r2
   13968:	mov	r6, r0
   1396c:	ldr	r8, [sp, #72]	; 0x48
   13970:	str	r3, [sp, #12]
   13974:	strd	sl, [r8]
   13978:	bl	136f4 <_start@@Base+0x1000>
   1397c:	cmp	r5, r0
   13980:	mov	r4, r0
   13984:	beq	13a48 <_start@@Base+0x1354>
   13988:	mov	r7, #0
   1398c:	add	fp, sp, #20
   13990:	ldr	r9, [sp, #12]
   13994:	mov	sl, r4
   13998:	add	r3, sp, #24
   1399c:	mov	r1, r4
   139a0:	mov	r2, r5
   139a4:	mov	r0, r6
   139a8:	stm	sp, {r3, fp}
   139ac:	add	r3, sp, #16
   139b0:	ldr	ip, [r9]
   139b4:	blx	ip
   139b8:	cmp	r5, r0
   139bc:	mov	r4, r0
   139c0:	beq	13a48 <_start@@Base+0x1354>
   139c4:	cmp	sl, r0
   139c8:	bne	13a0c <_start@@Base+0x1318>
   139cc:	ldr	r3, [r9, #4]!
   139d0:	mov	sl, r0
   139d4:	cmp	r3, #0
   139d8:	bne	13998 <_start@@Base+0x12a4>
   139dc:	mov	r3, #23
   139e0:	b	139f4 <_start@@Base+0x1300>
   139e4:	ldr	r3, [r6, #12]
   139e8:	cmp	r3, #0
   139ec:	beq	13a14 <_start@@Base+0x1320>
   139f0:	mov	r3, #14
   139f4:	mov	r1, r4
   139f8:	mov	r2, r5
   139fc:	mov	r0, r6
   13a00:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   13a04:	mov	r4, r0
   13a08:	b	13a48 <_start@@Base+0x1354>
   13a0c:	cmp	r7, #0
   13a10:	bne	139e4 <_start@@Base+0x12f0>
   13a14:	ldrd	r0, [sp, #24]
   13a18:	add	r7, r7, #1
   13a1c:	bl	21c74 <flatcc_json_parser_struct_as_root@@Base+0x350>
   13a20:	vmov	d6, r0, r1
   13a24:	ldr	r3, [sp, #16]
   13a28:	vldr	d7, [r8]
   13a2c:	cmp	r3, #0
   13a30:	ldr	r3, [sp, #20]
   13a34:	vnegne.f64	d6, d6
   13a38:	cmp	r3, #0
   13a3c:	vadd.f64	d7, d7, d6
   13a40:	vstr	d7, [r8]
   13a44:	bne	13990 <_start@@Base+0x129c>
   13a48:	mov	r0, r4
   13a4c:	add	sp, sp, #36	; 0x24
   13a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a54:	push	{r4, r5, r6, r7, r8, lr}
   13a58:	mov	r5, r1
   13a5c:	mov	r7, r0
   13a60:	mov	r1, r2
   13a64:	mov	r0, r5
   13a68:	mov	r4, r2
   13a6c:	mov	r8, r3
   13a70:	bl	127e8 <_start@@Base+0xf4>
   13a74:	add	r3, pc, #108	; 0x6c
   13a78:	ldrd	r2, [r3]
   13a7c:	cmp	r1, r3
   13a80:	cmpeq	r0, r2
   13a84:	bne	13adc <_start@@Base+0x13e8>
   13a88:	add	r6, r5, #8
   13a8c:	mov	r1, r4
   13a90:	mov	r0, r6
   13a94:	bl	127e8 <_start@@Base+0xf4>
   13a98:	and	r3, r1, #-16777216	; 0xff000000
   13a9c:	mov	r2, #0
   13aa0:	cmp	r3, #1912602624	; 0x72000000
   13aa4:	cmpeq	r2, #0
   13aa8:	bne	13adc <_start@@Base+0x13e8>
   13aac:	mov	r1, r4
   13ab0:	mov	r2, #1
   13ab4:	mov	r0, r6
   13ab8:	bl	135d0 <_start@@Base+0xedc>
   13abc:	cmp	r6, r0
   13ac0:	mov	r1, r0
   13ac4:	beq	13adc <_start@@Base+0x13e8>
   13ac8:	mov	r3, r8
   13acc:	mov	r2, r4
   13ad0:	mov	r0, r7
   13ad4:	pop	{r4, r5, r6, r7, r8, lr}
   13ad8:	b	12974 <_start@@Base+0x280>
   13adc:	mov	r0, r5
   13ae0:	pop	{r4, r5, r6, r7, r8, pc}
   13ae4:	nop	{0}
   13ae8:	cmnvs	r3, r5, ror #8
   13aec:	cmnmi	r8, #-2147483620	; 0x8000001c
   13af0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13af4:	mov	r4, r1
   13af8:	mov	r9, r0
   13afc:	mov	r1, r2
   13b00:	mov	r0, r4
   13b04:	mov	sl, r2
   13b08:	mov	r5, r3
   13b0c:	bl	127e8 <_start@@Base+0xf4>
   13b10:	add	r3, pc, #240	; 0xf0
   13b14:	ldrd	r2, [r3]
   13b18:	ldr	fp, [sp, #52]	; 0x34
   13b1c:	cmp	r1, r3
   13b20:	cmpeq	r0, r2
   13b24:	bne	13bb0 <_start@@Base+0x14bc>
   13b28:	mov	r1, sl
   13b2c:	add	r0, r4, #8
   13b30:	bl	127e8 <_start@@Base+0xf4>
   13b34:	add	r3, pc, #212	; 0xd4
   13b38:	ldrd	r2, [r3]
   13b3c:	cmp	r1, r3
   13b40:	cmpeq	r0, r2
   13b44:	beq	13b54 <_start@@Base+0x1460>
   13b48:	mov	r0, r4
   13b4c:	add	sp, sp, #12
   13b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b54:	add	r6, r4, #16
   13b58:	mov	r1, sl
   13b5c:	mov	r0, r6
   13b60:	mov	r7, #0
   13b64:	bl	127e8 <_start@@Base+0xf4>
   13b68:	and	r3, r1, #-16777216	; 0xff000000
   13b6c:	cmp	r3, #1694498816	; 0x65000000
   13b70:	cmpeq	r7, #0
   13b74:	bne	13b48 <_start@@Base+0x1454>
   13b78:	mov	r3, #1
   13b7c:	mov	r2, sl
   13b80:	str	fp, [sp]
   13b84:	mov	r1, r6
   13b88:	mov	r0, r9
   13b8c:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13b90:	cmp	r6, r0
   13b94:	beq	13b48 <_start@@Base+0x1454>
   13b98:	ldr	r1, [sp, #48]	; 0x30
   13b9c:	mov	r2, #1
   13ba0:	mov	r3, #0
   13ba4:	strd	r2, [r1]
   13ba8:	str	r7, [r5]
   13bac:	b	13b4c <_start@@Base+0x1458>
   13bb0:	mov	r7, r1
   13bb4:	add	r1, pc, #92	; 0x5c
   13bb8:	ldrd	r0, [r1]
   13bbc:	mov	r8, #0
   13bc0:	cmp	r7, r1
   13bc4:	cmpeq	r8, r0
   13bc8:	bne	13b48 <_start@@Base+0x1454>
   13bcc:	mov	r3, #4
   13bd0:	mov	r2, sl
   13bd4:	str	fp, [sp]
   13bd8:	mov	r1, r4
   13bdc:	mov	r0, r9
   13be0:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   13be4:	cmp	r4, r0
   13be8:	beq	13b4c <_start@@Base+0x1458>
   13bec:	ldr	r1, [sp, #48]	; 0x30
   13bf0:	mov	r2, #0
   13bf4:	mov	r3, #0
   13bf8:	strd	r2, [r1]
   13bfc:	str	r8, [r5]
   13c00:	b	13b4c <_start@@Base+0x1458>
   13c04:	nop	{0}
   13c08:	rsbvc	r6, r5, #116, 28	; 0x740
   13c0c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   13c10:	cmnvc	r0, #-1073741800	; 0xc0000018
   13c14:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   13c18:	andeq	r0, r0, r0
   13c1c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   13c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c24:	sub	sp, sp, #28
   13c28:	mov	r9, r3
   13c2c:	mov	r5, r1
   13c30:	mov	r8, r0
   13c34:	mov	r1, r2
   13c38:	mov	r0, r5
   13c3c:	ldr	r3, [sp, #64]	; 0x40
   13c40:	mov	r4, r2
   13c44:	ldr	fp, [sp, #68]	; 0x44
   13c48:	str	r3, [sp, #12]
   13c4c:	bl	127e8 <_start@@Base+0xf4>
   13c50:	add	r3, pc, #944	; 0x3b0
   13c54:	ldrd	r2, [r3]
   13c58:	cmp	r1, r3
   13c5c:	cmpeq	r0, r2
   13c60:	bhi	13cf0 <_start@@Base+0x15fc>
   13c64:	add	r3, pc, #932	; 0x3a4
   13c68:	ldrd	r2, [r3]
   13c6c:	cmp	r1, r3
   13c70:	cmpeq	r0, r2
   13c74:	bne	1414c <_start@@Base+0x1a58>
   13c78:	mov	r1, r4
   13c7c:	add	r0, r5, #8
   13c80:	bl	127e8 <_start@@Base+0xf4>
   13c84:	add	r3, pc, #908	; 0x38c
   13c88:	ldrd	r2, [r3]
   13c8c:	cmp	r1, r3
   13c90:	cmpeq	r0, r2
   13c94:	bne	1414c <_start@@Base+0x1a58>
   13c98:	add	r6, r5, #16
   13c9c:	mov	r1, r4
   13ca0:	mov	r0, r6
   13ca4:	bl	127e8 <_start@@Base+0xf4>
   13ca8:	and	r3, r1, #-16777216	; 0xff000000
   13cac:	mov	r2, #0
   13cb0:	cmp	r3, #1912602624	; 0x72000000
   13cb4:	cmpeq	r2, #0
   13cb8:	bne	1414c <_start@@Base+0x1a58>
   13cbc:	mov	r1, r4
   13cc0:	mov	r2, #1
   13cc4:	mov	r0, r6
   13cc8:	bl	135d0 <_start@@Base+0xedc>
   13ccc:	cmp	r6, r0
   13cd0:	mov	r1, r0
   13cd4:	beq	1414c <_start@@Base+0x1a58>
   13cd8:	mov	r3, r9
   13cdc:	mov	r2, r4
   13ce0:	mov	r0, r8
   13ce4:	add	sp, sp, #28
   13ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cec:	b	12974 <_start@@Base+0x280>
   13cf0:	add	r3, pc, #808	; 0x328
   13cf4:	ldrd	r2, [r3]
   13cf8:	cmp	r1, r3
   13cfc:	cmpeq	r0, r2
   13d00:	bne	14158 <_start@@Base+0x1a64>
   13d04:	mov	r1, r4
   13d08:	add	r0, r5, #8
   13d0c:	bl	127e8 <_start@@Base+0xf4>
   13d10:	add	r3, pc, #784	; 0x310
   13d14:	ldrd	r2, [r3]
   13d18:	cmp	r1, r3
   13d1c:	cmpeq	r0, r2
   13d20:	bhi	13e9c <_start@@Base+0x17a8>
   13d24:	add	r3, pc, #772	; 0x304
   13d28:	ldrd	r2, [r3]
   13d2c:	cmp	r1, r3
   13d30:	cmpeq	r0, r2
   13d34:	bhi	13db0 <_start@@Base+0x16bc>
   13d38:	add	r3, pc, #760	; 0x2f8
   13d3c:	ldrd	r2, [r3]
   13d40:	cmp	r1, r3
   13d44:	cmpeq	r0, r2
   13d48:	bne	1414c <_start@@Base+0x1a58>
   13d4c:	add	r6, r5, #16
   13d50:	mov	r1, r4
   13d54:	mov	r0, r6
   13d58:	bl	127e8 <_start@@Base+0xf4>
   13d5c:	lsr	r3, r1, #16
   13d60:	ldr	r1, [pc, #808]	; 14090 <_start@@Base+0x199c>
   13d64:	mov	r2, #0
   13d68:	mov	r0, #0
   13d6c:	lsl	r3, r3, #16
   13d70:	cmp	r3, r1
   13d74:	cmpeq	r2, r0
   13d78:	bne	1414c <_start@@Base+0x1a58>
   13d7c:	mov	r1, r4
   13d80:	mov	r2, #2
   13d84:	mov	r0, r6
   13d88:	bl	135d0 <_start@@Base+0xedc>
   13d8c:	cmp	r6, r0
   13d90:	mov	r1, r0
   13d94:	beq	1414c <_start@@Base+0x1a58>
   13d98:	mov	r3, r9
   13d9c:	mov	r2, r4
   13da0:	mov	r0, r8
   13da4:	add	sp, sp, #28
   13da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dac:	b	12c20 <_start@@Base+0x52c>
   13db0:	add	r3, pc, #648	; 0x288
   13db4:	ldrd	r2, [r3]
   13db8:	cmp	r1, r3
   13dbc:	cmpeq	r0, r2
   13dc0:	bne	13e24 <_start@@Base+0x1730>
   13dc4:	add	r6, r5, #16
   13dc8:	mov	r1, r4
   13dcc:	mov	r0, r6
   13dd0:	bl	127e8 <_start@@Base+0xf4>
   13dd4:	mov	r3, r1
   13dd8:	add	r1, pc, #616	; 0x268
   13ddc:	ldrd	r0, [r1]
   13de0:	mov	r2, #0
   13de4:	cmp	r3, r1
   13de8:	cmpeq	r2, r0
   13dec:	bne	1414c <_start@@Base+0x1a58>
   13df0:	mov	r1, r4
   13df4:	mov	r2, #4
   13df8:	mov	r0, r6
   13dfc:	bl	135d0 <_start@@Base+0xedc>
   13e00:	cmp	r6, r0
   13e04:	mov	r1, r0
   13e08:	beq	1414c <_start@@Base+0x1a58>
   13e0c:	mov	r3, r9
   13e10:	mov	r2, r4
   13e14:	mov	r0, r8
   13e18:	add	sp, sp, #28
   13e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e20:	b	132f0 <_start@@Base+0xbfc>
   13e24:	add	r3, pc, #548	; 0x224
   13e28:	ldrd	r2, [r3]
   13e2c:	cmp	r1, r3
   13e30:	cmpeq	r0, r2
   13e34:	bne	1414c <_start@@Base+0x1a58>
   13e38:	add	r6, r5, #16
   13e3c:	mov	r1, r4
   13e40:	mov	r0, r6
   13e44:	bl	127e8 <_start@@Base+0xf4>
   13e48:	lsr	r3, r1, #16
   13e4c:	ldr	r1, [pc, #576]	; 14094 <_start@@Base+0x19a0>
   13e50:	mov	r2, #0
   13e54:	mov	r0, #0
   13e58:	lsl	r3, r3, #16
   13e5c:	cmp	r3, r1
   13e60:	cmpeq	r2, r0
   13e64:	bne	1414c <_start@@Base+0x1a58>
   13e68:	mov	r1, r4
   13e6c:	mov	r2, #2
   13e70:	mov	r0, r6
   13e74:	bl	135d0 <_start@@Base+0xedc>
   13e78:	cmp	r6, r0
   13e7c:	mov	r1, r0
   13e80:	beq	1414c <_start@@Base+0x1a58>
   13e84:	mov	r3, r9
   13e88:	mov	r2, r4
   13e8c:	mov	r0, r8
   13e90:	add	sp, sp, #28
   13e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e98:	b	13af0 <_start@@Base+0x13fc>
   13e9c:	add	r3, pc, #436	; 0x1b4
   13ea0:	ldrd	r2, [r3]
   13ea4:	cmp	r1, r3
   13ea8:	cmpeq	r0, r2
   13eac:	bne	13f10 <_start@@Base+0x181c>
   13eb0:	add	r6, r5, #16
   13eb4:	mov	r1, r4
   13eb8:	mov	r0, r6
   13ebc:	bl	127e8 <_start@@Base+0xf4>
   13ec0:	bic	r2, r0, #255	; 0xff
   13ec4:	mov	r3, r1
   13ec8:	add	r1, pc, #400	; 0x190
   13ecc:	ldrd	r0, [r1]
   13ed0:	cmp	r3, r1
   13ed4:	cmpeq	r2, r0
   13ed8:	bne	1414c <_start@@Base+0x1a58>
   13edc:	mov	r1, r4
   13ee0:	mov	r2, #7
   13ee4:	mov	r0, r6
   13ee8:	bl	135d0 <_start@@Base+0xedc>
   13eec:	cmp	r6, r0
   13ef0:	mov	r1, r0
   13ef4:	beq	1414c <_start@@Base+0x1a58>
   13ef8:	mov	r3, r9
   13efc:	mov	r2, r4
   13f00:	mov	r0, r8
   13f04:	add	sp, sp, #28
   13f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f0c:	b	12ea0 <_start@@Base+0x7ac>
   13f10:	add	r3, pc, #336	; 0x150
   13f14:	ldrd	r2, [r3]
   13f18:	cmp	r1, r3
   13f1c:	cmpeq	r0, r2
   13f20:	bhi	13f98 <_start@@Base+0x18a4>
   13f24:	add	r3, pc, #324	; 0x144
   13f28:	ldrd	r2, [r3]
   13f2c:	cmp	r1, r3
   13f30:	cmpeq	r0, r2
   13f34:	bne	1414c <_start@@Base+0x1a58>
   13f38:	add	r6, r5, #16
   13f3c:	mov	r1, r4
   13f40:	mov	r0, r6
   13f44:	bl	127e8 <_start@@Base+0xf4>
   13f48:	bic	r2, r0, #255	; 0xff
   13f4c:	mov	r3, r1
   13f50:	add	r1, pc, #288	; 0x120
   13f54:	ldrd	r0, [r1]
   13f58:	cmp	r3, r1
   13f5c:	cmpeq	r2, r0
   13f60:	bne	1414c <_start@@Base+0x1a58>
   13f64:	mov	r1, r4
   13f68:	mov	r2, #7
   13f6c:	mov	r0, r6
   13f70:	bl	135d0 <_start@@Base+0xedc>
   13f74:	cmp	r6, r0
   13f78:	mov	r1, r0
   13f7c:	beq	1414c <_start@@Base+0x1a58>
   13f80:	mov	r3, r9
   13f84:	mov	r2, r4
   13f88:	mov	r0, r8
   13f8c:	add	sp, sp, #28
   13f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f94:	b	13008 <_start@@Base+0x914>
   13f98:	add	r3, pc, #224	; 0xe0
   13f9c:	ldrd	r2, [r3]
   13fa0:	cmp	r1, r3
   13fa4:	cmpeq	r0, r2
   13fa8:	bne	1414c <_start@@Base+0x1a58>
   13fac:	add	r7, pc, #212	; 0xd4
   13fb0:	ldrd	r6, [r7]
   13fb4:	add	sl, r5, #16
   13fb8:	mov	r1, r4
   13fbc:	mov	r0, sl
   13fc0:	bl	127e8 <_start@@Base+0xf4>
   13fc4:	bic	r2, r0, #255	; 0xff
   13fc8:	cmp	r1, r7
   13fcc:	cmpeq	r2, r6
   13fd0:	bne	14098 <_start@@Base+0x19a4>
   13fd4:	mov	r1, r4
   13fd8:	mov	r2, #7
   13fdc:	mov	r0, sl
   13fe0:	bl	135d0 <_start@@Base+0xedc>
   13fe4:	cmp	sl, r0
   13fe8:	mov	r1, r0
   13fec:	beq	1414c <_start@@Base+0x1a58>
   13ff0:	mov	r3, r9
   13ff4:	mov	r2, r4
   13ff8:	mov	r0, r8
   13ffc:	add	sp, sp, #28
   14000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14004:	b	131b8 <_start@@Base+0xac4>
   14008:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1400c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   14010:	cmnvs	r3, lr, lsr #18
   14014:			; <UNDEFINED> instruction: 0x46616e74
   14018:	cmnvs	r3, r5, ror #8
   1401c:	cmnmi	r8, #-2147483620	; 0x8000001c
   14020:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   14024:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   14028:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   1402c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14030:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   14034:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14038:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   1403c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14040:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   14044:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14048:	andeq	r0, r0, r0
   1404c:	svcvs	0x006c6f72
   14050:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   14054:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14058:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   1405c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14060:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   14064:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   14068:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   1406c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14070:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   14074:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14078:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1407c:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   14080:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   14084:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   14088:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1408c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   14090:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   14094:	svcvs	0x006f0000
   14098:	add	r3, pc, #608	; 0x260
   1409c:	ldrd	r2, [r3]
   140a0:	cmp	r1, r3
   140a4:	cmpeq	r0, r2
   140a8:	bne	1414c <_start@@Base+0x1a58>
   140ac:	add	r6, r5, #24
   140b0:	mov	r1, r4
   140b4:	mov	r0, r6
   140b8:	bl	127e8 <_start@@Base+0xf4>
   140bc:	bic	r3, r1, #255	; 0xff
   140c0:	add	r1, pc, #576	; 0x240
   140c4:	ldrd	r0, [r1]
   140c8:	mov	r2, #0
   140cc:	cmp	r3, r1
   140d0:	cmpeq	r2, r0
   140d4:	bne	1414c <_start@@Base+0x1a58>
   140d8:	mov	r2, #3
   140dc:	mov	r1, r4
   140e0:	mov	r0, r6
   140e4:	bl	135d0 <_start@@Base+0xedc>
   140e8:	cmp	r6, r0
   140ec:	mov	r7, r0
   140f0:	beq	1414c <_start@@Base+0x1a58>
   140f4:	mov	r1, r4
   140f8:	mov	r6, #0
   140fc:	bl	127e8 <_start@@Base+0xf4>
   14100:	and	r3, r1, #-16777216	; 0xff000000
   14104:	cmp	r3, #2013265920	; 0x78000000
   14108:	cmpeq	r6, #0
   1410c:	movne	r5, r7
   14110:	bne	1414c <_start@@Base+0x1a58>
   14114:	mov	r3, #1
   14118:	mov	r2, r4
   1411c:	str	fp, [sp]
   14120:	mov	r1, r7
   14124:	mov	r0, r8
   14128:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   1412c:	cmp	r7, r0
   14130:	mov	r5, r0
   14134:	beq	1414c <_start@@Base+0x1a58>
   14138:	ldr	r1, [sp, #12]
   1413c:	mov	r2, #0
   14140:	mov	r3, #0
   14144:	strd	r2, [r1]
   14148:	str	r6, [r9]
   1414c:	mov	r0, r5
   14150:	add	sp, sp, #28
   14154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14158:	add	r3, pc, #432	; 0x1b0
   1415c:	ldrd	r2, [r3]
   14160:	cmp	r1, r3
   14164:	cmpeq	r0, r2
   14168:	bne	1414c <_start@@Base+0x1a58>
   1416c:	mov	r1, r4
   14170:	add	r0, r5, #8
   14174:	bl	127e8 <_start@@Base+0xf4>
   14178:	add	r3, pc, #408	; 0x198
   1417c:	ldrd	r2, [r3]
   14180:	cmp	r1, r3
   14184:	cmpeq	r0, r2
   14188:	bne	1414c <_start@@Base+0x1a58>
   1418c:	mov	r1, r4
   14190:	add	r0, r5, #16
   14194:	bl	127e8 <_start@@Base+0xf4>
   14198:	add	r3, pc, #384	; 0x180
   1419c:	ldrd	r2, [r3]
   141a0:	cmp	r1, r3
   141a4:	cmpeq	r0, r2
   141a8:	bne	1414c <_start@@Base+0x1a58>
   141ac:	mov	r1, r4
   141b0:	add	r0, r5, #24
   141b4:	bl	127e8 <_start@@Base+0xf4>
   141b8:	add	r3, pc, #360	; 0x168
   141bc:	ldrd	r2, [r3]
   141c0:	cmp	r1, r3
   141c4:	cmpeq	r0, r2
   141c8:	bne	1414c <_start@@Base+0x1a58>
   141cc:	add	sl, r5, #32
   141d0:	mov	r1, r4
   141d4:	mov	r0, sl
   141d8:	mov	r7, #0
   141dc:	bl	127e8 <_start@@Base+0xf4>
   141e0:	and	r3, r1, #-16777216	; 0xff000000
   141e4:	cmp	r3, #1694498816	; 0x65000000
   141e8:	cmpeq	r7, #0
   141ec:	bne	1414c <_start@@Base+0x1a58>
   141f0:	mov	r2, #1
   141f4:	mov	r1, r4
   141f8:	mov	r0, sl
   141fc:	bl	135d0 <_start@@Base+0xedc>
   14200:	cmp	sl, r0
   14204:	mov	r6, r0
   14208:	beq	1414c <_start@@Base+0x1a58>
   1420c:	mov	r1, r4
   14210:	bl	127e8 <_start@@Base+0xf4>
   14214:	strd	r0, [sp, #16]
   14218:	ldr	r1, [sp, #20]
   1421c:	bic	r3, r1, #255	; 0xff
   14220:	add	r1, pc, #264	; 0x108
   14224:	ldrd	r0, [r1]
   14228:	cmp	r3, r1
   1422c:	cmpeq	r7, r0
   14230:	bne	14270 <_start@@Base+0x1b7c>
   14234:	mov	r3, #3
   14238:	mov	r2, r4
   1423c:	str	fp, [sp]
   14240:	mov	r1, r6
   14244:	mov	r0, r8
   14248:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   1424c:	cmp	r6, r0
   14250:	mov	r5, r0
   14254:	beq	1414c <_start@@Base+0x1a58>
   14258:	ldr	r1, [sp, #12]
   1425c:	mov	r2, #17
   14260:	mov	r3, #0
   14264:	strd	r2, [r1]
   14268:	str	r7, [r9]
   1426c:	b	1414c <_start@@Base+0x1a58>
   14270:	add	r3, pc, #192	; 0xc0
   14274:	ldrd	r2, [r3]
   14278:	ldrd	r0, [sp, #16]
   1427c:	cmp	r1, r3
   14280:	cmpeq	r0, r2
   14284:	bne	142f4 <_start@@Base+0x1c00>
   14288:	add	r7, r6, #8
   1428c:	mov	r1, r4
   14290:	mov	r0, r7
   14294:	mov	sl, #0
   14298:	bl	127e8 <_start@@Base+0xf4>
   1429c:	lsr	r3, r1, #16
   142a0:	ldr	r1, [pc, #152]	; 14340 <_start@@Base+0x1c4c>
   142a4:	mov	r0, #0
   142a8:	lsl	r3, r3, #16
   142ac:	cmp	r3, r1
   142b0:	cmpeq	sl, r0
   142b4:	bne	142f4 <_start@@Base+0x1c00>
   142b8:	mov	r3, #2
   142bc:	mov	r2, r4
   142c0:	str	fp, [sp]
   142c4:	mov	r1, r7
   142c8:	mov	r0, r8
   142cc:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   142d0:	cmp	r7, r0
   142d4:	mov	r5, r0
   142d8:	beq	142f4 <_start@@Base+0x1c00>
   142dc:	ldr	r1, [sp, #12]
   142e0:	mov	r2, #0
   142e4:	mov	r3, #0
   142e8:	strd	r2, [r1]
   142ec:	str	sl, [r9]
   142f0:	b	1414c <_start@@Base+0x1a58>
   142f4:	mov	r5, r6
   142f8:	b	1414c <_start@@Base+0x1a58>
   142fc:	nop	{0}
   14300:	rsbsvc	r7, r4, r5, ror #18
   14304:	svcvs	0x0074656d
   14308:	andeq	r0, r0, r0
   1430c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   14310:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   14314:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   14318:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1431c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   14320:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   14324:	cmnpl	r0, #-1073741800	; 0xc0000018
   14328:	cmnvs	ip, #100, 10	; 0x19000000
   1432c:	svcvs	0x006d496e
   14330:	andeq	r0, r0, r0
   14334:	strbtmi	r6, [pc], -r0, lsl #30
   14338:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1433c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   14340:	cmnvs	ip, r0
   14344:	cmp	r1, r2
   14348:	push	{r4, r5, r6, lr}
   1434c:	mov	ip, r2
   14350:	mov	r6, r0
   14354:	beq	14364 <_start@@Base+0x1c70>
   14358:	ldrb	r4, [r1]
   1435c:	cmp	r4, #123	; 0x7b
   14360:	beq	14380 <_start@@Base+0x1c8c>
   14364:	mov	r2, #0
   14368:	mov	r0, r6
   1436c:	pop	{r4, r5, r6, lr}
   14370:	str	r2, [r3]
   14374:	mov	r3, #21
   14378:	mov	r2, ip
   1437c:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   14380:	add	r1, r1, #1
   14384:	mov	r4, r2
   14388:	mov	r5, r3
   1438c:	bl	13428 <_start@@Base+0xd34>
   14390:	cmp	r4, r0
   14394:	beq	143c0 <_start@@Base+0x1ccc>
   14398:	ldrb	r3, [r0]
   1439c:	cmp	r3, #125	; 0x7d
   143a0:	bne	143c0 <_start@@Base+0x1ccc>
   143a4:	mov	r3, #0
   143a8:	mov	r2, r4
   143ac:	add	r1, r0, #1
   143b0:	mov	r0, r6
   143b4:	str	r3, [r5]
   143b8:	pop	{r4, r5, r6, lr}
   143bc:	b	13428 <_start@@Base+0xd34>
   143c0:	mov	r3, #1
   143c4:	str	r3, [r5]
   143c8:	pop	{r4, r5, r6, pc}
   143cc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   143d0:	mov	r5, r1
   143d4:	mov	r1, #0
   143d8:	mov	r4, r0
   143dc:	mov	r6, r2
   143e0:	mov	r7, r3
   143e4:	ldr	r0, [r0]
   143e8:	str	r1, [r3]
   143ec:	bl	1d108 <flatcc_builder_start_table@@Base>
   143f0:	cmp	r0, #0
   143f4:	bne	1443c <_start@@Base+0x1d48>
   143f8:	add	r3, sp, #4
   143fc:	mov	r2, r6
   14400:	mov	r1, r5
   14404:	mov	r0, r4
   14408:	bl	14344 <_start@@Base+0x1c50>
   1440c:	ldr	r3, [sp, #4]
   14410:	mov	r5, r0
   14414:	cmp	r3, #0
   14418:	bne	14460 <_start@@Base+0x1d6c>
   1441c:	ldr	r3, [r4, #24]
   14420:	cmp	r3, #0
   14424:	bne	1443c <_start@@Base+0x1d48>
   14428:	ldr	r0, [r4]
   1442c:	bl	1d730 <flatcc_builder_end_table@@Base>
   14430:	cmp	r0, #0
   14434:	str	r0, [r7]
   14438:	bne	14454 <_start@@Base+0x1d60>
   1443c:	mov	r1, r5
   14440:	mov	r3, #33	; 0x21
   14444:	mov	r2, r6
   14448:	mov	r0, r4
   1444c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14450:	mov	r5, r0
   14454:	mov	r0, r5
   14458:	add	sp, sp, #12
   1445c:	pop	{r4, r5, r6, r7, pc}
   14460:	mov	r2, r6
   14464:	mov	r1, r5
   14468:	mov	r0, r4
   1446c:	bl	1369c <_start@@Base+0xfa8>
   14470:	mov	r1, r0
   14474:	mov	r2, r6
   14478:	mov	r0, r4
   1447c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   14480:	mov	r1, r0
   14484:	add	r3, sp, #4
   14488:	mov	r2, r6
   1448c:	mov	r0, r4
   14490:	bl	13518 <_start@@Base+0xe24>
   14494:	b	1440c <_start@@Base+0x1d18>
   14498:	push	{r4, r5, r6, lr}
   1449c:	mov	r4, r0
   144a0:	mov	r0, r1
   144a4:	sub	r1, r2, r1
   144a8:	cmp	r1, r3
   144ac:	pople	{r4, r5, r6, pc}
   144b0:	add	r1, r0, r3
   144b4:	ldr	lr, [r4, #12]
   144b8:	ldrb	ip, [r0, r3]
   144bc:	cmp	lr, #0
   144c0:	beq	14514 <_start@@Base+0x1e20>
   144c4:	cmp	ip, #58	; 0x3a
   144c8:	cmpne	ip, #32
   144cc:	movls	ip, #0
   144d0:	movhi	ip, #1
   144d4:	strls	ip, [r4, #12]
   144d8:	pophi	{r4, r5, r6, pc}
   144dc:	mov	r0, r4
   144e0:	mov	r5, r2
   144e4:	bl	13428 <_start@@Base+0xd34>
   144e8:	cmp	r5, r0
   144ec:	mov	r1, r0
   144f0:	beq	14528 <_start@@Base+0x1e34>
   144f4:	ldrb	r3, [r0]
   144f8:	cmp	r3, #58	; 0x3a
   144fc:	bne	14528 <_start@@Base+0x1e34>
   14500:	mov	r2, r5
   14504:	add	r1, r0, #1
   14508:	mov	r0, r4
   1450c:	pop	{r4, r5, r6, lr}
   14510:	b	13428 <_start@@Base+0xd34>
   14514:	cmp	ip, #34	; 0x22
   14518:	popne	{r4, r5, r6, pc}
   1451c:	add	r3, r3, #1
   14520:	add	r1, r0, r3
   14524:	b	144dc <_start@@Base+0x1de8>
   14528:	mov	r2, r5
   1452c:	mov	r0, r4
   14530:	pop	{r4, r5, r6, lr}
   14534:	mov	r3, #4
   14538:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1453c:	cmp	r1, r2
   14540:	push	{r4, r5, r6, lr}
   14544:	mov	ip, r2
   14548:	mov	r6, r0
   1454c:	beq	1455c <_start@@Base+0x1e68>
   14550:	ldrb	r4, [r1]
   14554:	cmp	r4, #91	; 0x5b
   14558:	beq	14578 <_start@@Base+0x1e84>
   1455c:	mov	r2, #0
   14560:	mov	r0, r6
   14564:	pop	{r4, r5, r6, lr}
   14568:	str	r2, [r3]
   1456c:	mov	r3, #22
   14570:	mov	r2, ip
   14574:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   14578:	add	r1, r1, #1
   1457c:	mov	r4, r2
   14580:	mov	r5, r3
   14584:	bl	13428 <_start@@Base+0xd34>
   14588:	cmp	r4, r0
   1458c:	beq	145b8 <_start@@Base+0x1ec4>
   14590:	ldrb	r3, [r0]
   14594:	cmp	r3, #93	; 0x5d
   14598:	bne	145b8 <_start@@Base+0x1ec4>
   1459c:	mov	r3, #0
   145a0:	mov	r2, r4
   145a4:	add	r1, r0, #1
   145a8:	mov	r0, r6
   145ac:	str	r3, [r5]
   145b0:	pop	{r4, r5, r6, lr}
   145b4:	b	13428 <_start@@Base+0xd34>
   145b8:	mov	r3, #1
   145bc:	str	r3, [r5]
   145c0:	pop	{r4, r5, r6, pc}
   145c4:	push	{r4, r5, r6, r7, lr}
   145c8:	mov	r6, #0
   145cc:	sub	sp, sp, #28
   145d0:	mov	r7, #0
   145d4:	mov	r5, #0
   145d8:	cmp	r1, r2
   145dc:	moveq	r0, r1
   145e0:	strd	r6, [r3]
   145e4:	str	r5, [sp, #12]
   145e8:	strd	r6, [sp, #16]
   145ec:	beq	14640 <_start@@Base+0x1f4c>
   145f0:	mov	r6, r3
   145f4:	add	r3, sp, #16
   145f8:	mov	r7, r1
   145fc:	mov	r4, r0
   14600:	str	r3, [sp]
   14604:	add	r3, sp, #12
   14608:	mov	r5, r2
   1460c:	bl	20c14 <flatcc_json_parser_integer@@Base>
   14610:	cmp	r7, r0
   14614:	beq	14640 <_start@@Base+0x1f4c>
   14618:	ldr	r3, [sp, #12]
   1461c:	cmp	r3, #0
   14620:	ldrdeq	r2, [sp, #16]
   14624:	strdeq	r2, [r6]
   14628:	beq	14640 <_start@@Base+0x1f4c>
   1462c:	mov	r1, r0
   14630:	mov	r3, #8
   14634:	mov	r2, r5
   14638:	mov	r0, r4
   1463c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14640:	add	sp, sp, #28
   14644:	pop	{r4, r5, r6, r7, pc}
   14648:	push	{r4, r5, r6, r7, r8, r9, lr}
   1464c:	mov	lr, #0
   14650:	sub	sp, sp, #28
   14654:	mov	r6, #0
   14658:	mov	r7, #0
   1465c:	cmp	r1, r2
   14660:	moveq	r0, r1
   14664:	str	lr, [r3]
   14668:	str	lr, [sp, #12]
   1466c:	strd	r6, [sp, #16]
   14670:	beq	146dc <_start@@Base+0x1fe8>
   14674:	mov	r6, r3
   14678:	add	r3, sp, #16
   1467c:	mov	r7, r1
   14680:	mov	r5, r0
   14684:	str	r3, [sp]
   14688:	add	r3, sp, #12
   1468c:	mov	r4, r2
   14690:	bl	20c14 <flatcc_json_parser_integer@@Base>
   14694:	cmp	r7, r0
   14698:	beq	146dc <_start@@Base+0x1fe8>
   1469c:	ldr	r3, [sp, #12]
   146a0:	cmp	r3, #0
   146a4:	movne	r3, #8
   146a8:	bne	146cc <_start@@Base+0x1fd8>
   146ac:	ldrd	r2, [sp, #16]
   146b0:	mov	r9, #0
   146b4:	mvn	r8, #0
   146b8:	cmp	r3, r9
   146bc:	cmpeq	r2, r8
   146c0:	strls	r2, [r6]
   146c4:	bls	146dc <_start@@Base+0x1fe8>
   146c8:	mov	r3, #7
   146cc:	mov	r1, r0
   146d0:	mov	r2, r4
   146d4:	mov	r0, r5
   146d8:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   146dc:	add	sp, sp, #28
   146e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   146e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   146e8:	mov	lr, #0
   146ec:	sub	sp, sp, #28
   146f0:	mov	r6, #0
   146f4:	mov	r7, #0
   146f8:	cmp	r1, r2
   146fc:	moveq	r0, r1
   14700:	strh	lr, [r3]
   14704:	str	lr, [sp, #12]
   14708:	strd	r6, [sp, #16]
   1470c:	beq	14778 <_start@@Base+0x2084>
   14710:	mov	r6, r3
   14714:	add	r3, sp, #16
   14718:	mov	r7, r1
   1471c:	mov	r5, r0
   14720:	str	r3, [sp]
   14724:	add	r3, sp, #12
   14728:	mov	r4, r2
   1472c:	bl	20c14 <flatcc_json_parser_integer@@Base>
   14730:	cmp	r7, r0
   14734:	beq	14778 <_start@@Base+0x2084>
   14738:	ldr	r3, [sp, #12]
   1473c:	cmp	r3, #0
   14740:	movne	r3, #8
   14744:	bne	14768 <_start@@Base+0x2074>
   14748:	ldrd	r2, [sp, #16]
   1474c:	mov	r9, #0
   14750:	movw	r8, #65535	; 0xffff
   14754:	cmp	r3, r9
   14758:	cmpeq	r2, r8
   1475c:	strhls	r2, [r6]
   14760:	bls	14778 <_start@@Base+0x2084>
   14764:	mov	r3, #7
   14768:	mov	r1, r0
   1476c:	mov	r2, r4
   14770:	mov	r0, r5
   14774:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14778:	add	sp, sp, #28
   1477c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14780:	push	{r4, r5, r6, r7, lr}
   14784:	mov	lr, #0
   14788:	sub	sp, sp, #28
   1478c:	mov	r6, #0
   14790:	mov	r7, #0
   14794:	cmp	r1, r2
   14798:	moveq	r0, r1
   1479c:	strb	lr, [r3]
   147a0:	str	lr, [sp, #12]
   147a4:	strd	r6, [sp, #16]
   147a8:	beq	1480c <_start@@Base+0x2118>
   147ac:	mov	r6, r3
   147b0:	add	r3, sp, #16
   147b4:	mov	r7, r1
   147b8:	mov	r5, r0
   147bc:	str	r3, [sp]
   147c0:	add	r3, sp, #12
   147c4:	mov	r4, r2
   147c8:	bl	20c14 <flatcc_json_parser_integer@@Base>
   147cc:	cmp	r7, r0
   147d0:	beq	1480c <_start@@Base+0x2118>
   147d4:	ldr	r3, [sp, #12]
   147d8:	cmp	r3, #0
   147dc:	movne	r3, #8
   147e0:	bne	147fc <_start@@Base+0x2108>
   147e4:	ldrd	r2, [sp, #16]
   147e8:	cmp	r3, #0
   147ec:	cmpeq	r2, #255	; 0xff
   147f0:	strbls	r2, [r6]
   147f4:	bls	1480c <_start@@Base+0x2118>
   147f8:	mov	r3, #7
   147fc:	mov	r1, r0
   14800:	mov	r2, r4
   14804:	mov	r0, r5
   14808:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   1480c:	add	sp, sp, #28
   14810:	pop	{r4, r5, r6, r7, pc}
   14814:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14818:	sub	r7, r2, r1
   1481c:	mov	r8, r0
   14820:	cmp	r7, #3
   14824:	mov	r4, r1
   14828:	mov	r6, r2
   1482c:	mov	r5, r3
   14830:	ble	14880 <_start@@Base+0x218c>
   14834:	mov	r2, #4
   14838:	ldr	r1, [pc, #108]	; 148ac <_start@@Base+0x21b8>
   1483c:	mov	r0, r4
   14840:	bl	125a0 <memcmp@plt>
   14844:	cmp	r0, #0
   14848:	moveq	r3, #1
   1484c:	addeq	r0, r4, #4
   14850:	strbeq	r3, [r5]
   14854:	beq	148a4 <_start@@Base+0x21b0>
   14858:	cmp	r7, #4
   1485c:	beq	14880 <_start@@Base+0x218c>
   14860:	mov	r2, #5
   14864:	ldr	r1, [pc, #68]	; 148b0 <_start@@Base+0x21bc>
   14868:	mov	r0, r4
   1486c:	bl	125a0 <memcmp@plt>
   14870:	cmp	r0, #0
   14874:	strbeq	r0, [r5]
   14878:	addeq	r0, r4, #5
   1487c:	beq	148a4 <_start@@Base+0x21b0>
   14880:	add	r3, sp, #7
   14884:	mov	r2, r6
   14888:	mov	r1, r4
   1488c:	mov	r0, r8
   14890:	bl	14780 <_start@@Base+0x208c>
   14894:	ldrb	r3, [sp, #7]
   14898:	adds	r3, r3, #0
   1489c:	movne	r3, #1
   148a0:	strb	r3, [r5]
   148a4:	add	sp, sp, #8
   148a8:	pop	{r4, r5, r6, r7, r8, pc}
   148ac:	ldrdeq	r1, [r2], -r4
   148b0:	ldrdeq	r1, [r2], -r9
   148b4:	push	{r4, r5, r6, r7, r8, lr}
   148b8:	mov	r4, #0
   148bc:	sub	sp, sp, #24
   148c0:	mov	r5, #0
   148c4:	cmp	r1, r2
   148c8:	moveq	r0, r1
   148cc:	str	r4, [r3]
   148d0:	str	r4, [sp, #12]
   148d4:	strd	r4, [sp, #16]
   148d8:	beq	14938 <_start@@Base+0x2244>
   148dc:	mov	r6, r3
   148e0:	add	r3, sp, #16
   148e4:	mov	r4, r1
   148e8:	mov	r8, r0
   148ec:	str	r3, [sp]
   148f0:	add	r3, sp, #12
   148f4:	mov	r7, r2
   148f8:	bl	20c14 <flatcc_json_parser_integer@@Base>
   148fc:	cmp	r4, r0
   14900:	beq	14938 <_start@@Base+0x2244>
   14904:	ldr	r3, [sp, #12]
   14908:	ldrd	r4, [sp, #16]
   1490c:	cmp	r3, #0
   14910:	beq	14940 <_start@@Base+0x224c>
   14914:	cmp	r5, #0
   14918:	cmpeq	r4, #-2147483648	; 0x80000000
   1491c:	movhi	r3, #8
   14920:	rsbls	r4, r4, #0
   14924:	bls	14958 <_start@@Base+0x2264>
   14928:	mov	r1, r0
   1492c:	mov	r2, r7
   14930:	mov	r0, r8
   14934:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14938:	add	sp, sp, #24
   1493c:	pop	{r4, r5, r6, r7, r8, pc}
   14940:	mov	r3, #0
   14944:	mvn	r2, #-2147483648	; 0x80000000
   14948:	cmp	r5, r3
   1494c:	cmpeq	r4, r2
   14950:	movhi	r3, #7
   14954:	bhi	14928 <_start@@Base+0x2234>
   14958:	str	r4, [r6]
   1495c:	b	14938 <_start@@Base+0x2244>
   14960:	push	{r4, r5, r6, r7, r8, lr}
   14964:	mov	r4, #0
   14968:	sub	sp, sp, #24
   1496c:	mov	r5, #0
   14970:	cmp	r1, r2
   14974:	moveq	r0, r1
   14978:	strh	r4, [r3]
   1497c:	str	r4, [sp, #12]
   14980:	strd	r4, [sp, #16]
   14984:	beq	149e4 <_start@@Base+0x22f0>
   14988:	mov	r6, r3
   1498c:	add	r3, sp, #16
   14990:	mov	r4, r1
   14994:	mov	r8, r0
   14998:	str	r3, [sp]
   1499c:	add	r3, sp, #12
   149a0:	mov	r7, r2
   149a4:	bl	20c14 <flatcc_json_parser_integer@@Base>
   149a8:	cmp	r4, r0
   149ac:	beq	149e4 <_start@@Base+0x22f0>
   149b0:	ldr	r3, [sp, #12]
   149b4:	ldrd	r4, [sp, #16]
   149b8:	cmp	r3, #0
   149bc:	beq	149ec <_start@@Base+0x22f8>
   149c0:	cmp	r5, #0
   149c4:	cmpeq	r4, #32768	; 0x8000
   149c8:	movhi	r3, #8
   149cc:	rsbls	r4, r4, #0
   149d0:	bls	14a04 <_start@@Base+0x2310>
   149d4:	mov	r1, r0
   149d8:	mov	r2, r7
   149dc:	mov	r0, r8
   149e0:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   149e4:	add	sp, sp, #24
   149e8:	pop	{r4, r5, r6, r7, r8, pc}
   149ec:	mov	r3, #0
   149f0:	movw	r2, #32767	; 0x7fff
   149f4:	cmp	r5, r3
   149f8:	cmpeq	r4, r2
   149fc:	movhi	r3, #7
   14a00:	bhi	149d4 <_start@@Base+0x22e0>
   14a04:	strh	r4, [r6]
   14a08:	b	149e4 <_start@@Base+0x22f0>
   14a0c:	push	{r4, r5, r6, r7, r8, lr}
   14a10:	mov	lr, #0
   14a14:	sub	sp, sp, #24
   14a18:	mov	r4, #0
   14a1c:	mov	r5, #0
   14a20:	cmp	r1, r2
   14a24:	moveq	r0, r1
   14a28:	strb	lr, [r3]
   14a2c:	str	lr, [sp, #12]
   14a30:	strd	r4, [sp, #16]
   14a34:	beq	14a94 <_start@@Base+0x23a0>
   14a38:	mov	r6, r3
   14a3c:	add	r3, sp, #16
   14a40:	mov	r4, r1
   14a44:	mov	r8, r0
   14a48:	str	r3, [sp]
   14a4c:	add	r3, sp, #12
   14a50:	mov	r7, r2
   14a54:	bl	20c14 <flatcc_json_parser_integer@@Base>
   14a58:	cmp	r4, r0
   14a5c:	beq	14a94 <_start@@Base+0x23a0>
   14a60:	ldr	r3, [sp, #12]
   14a64:	ldrd	r4, [sp, #16]
   14a68:	cmp	r3, #0
   14a6c:	beq	14a9c <_start@@Base+0x23a8>
   14a70:	cmp	r5, #0
   14a74:	cmpeq	r4, #128	; 0x80
   14a78:	movhi	r3, #8
   14a7c:	rsbls	r4, r4, #0
   14a80:	bls	14aac <_start@@Base+0x23b8>
   14a84:	mov	r1, r0
   14a88:	mov	r2, r7
   14a8c:	mov	r0, r8
   14a90:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14a94:	add	sp, sp, #24
   14a98:	pop	{r4, r5, r6, r7, r8, pc}
   14a9c:	cmp	r5, #0
   14aa0:	cmpeq	r4, #127	; 0x7f
   14aa4:	movhi	r3, #7
   14aa8:	bhi	14a84 <_start@@Base+0x2390>
   14aac:	strb	r4, [r6]
   14ab0:	b	14a94 <_start@@Base+0x23a0>
   14ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ab8:	sub	sp, sp, #36	; 0x24
   14abc:	mov	fp, #0
   14ac0:	mov	r5, r2
   14ac4:	mov	r7, r0
   14ac8:	ldr	r6, [sp, #72]	; 0x48
   14acc:	str	r3, [sp, #12]
   14ad0:	str	fp, [r6]
   14ad4:	str	fp, [r6, #4]
   14ad8:	bl	136f4 <_start@@Base+0x1000>
   14adc:	cmp	r5, r0
   14ae0:	mov	r4, r0
   14ae4:	beq	14be4 <_start@@Base+0x24f0>
   14ae8:	mov	r8, fp
   14aec:	str	fp, [sp, #8]
   14af0:	ldr	r9, [sp, #12]
   14af4:	mov	sl, r4
   14af8:	add	r3, sp, #20
   14afc:	mov	r1, r4
   14b00:	mov	r2, r5
   14b04:	mov	r0, r7
   14b08:	str	r3, [sp, #4]
   14b0c:	add	r3, sp, #24
   14b10:	str	r3, [sp]
   14b14:	add	r3, sp, #16
   14b18:	ldr	ip, [r9]
   14b1c:	blx	ip
   14b20:	cmp	r5, r0
   14b24:	mov	r4, r0
   14b28:	beq	14be4 <_start@@Base+0x24f0>
   14b2c:	cmp	sl, r0
   14b30:	bne	14b7c <_start@@Base+0x2488>
   14b34:	ldr	r3, [r9, #4]!
   14b38:	mov	sl, r0
   14b3c:	cmp	r3, #0
   14b40:	bne	14af8 <_start@@Base+0x2404>
   14b44:	mov	r3, #23
   14b48:	b	14b5c <_start@@Base+0x2468>
   14b4c:	ldr	r3, [r7, #12]
   14b50:	cmp	r3, #0
   14b54:	beq	14b84 <_start@@Base+0x2490>
   14b58:	mov	r3, #14
   14b5c:	mov	r1, r4
   14b60:	mov	r2, r5
   14b64:	mov	r0, r7
   14b68:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14b6c:	mov	r4, r0
   14b70:	b	14be4 <_start@@Base+0x24f0>
   14b74:	mov	r4, r5
   14b78:	b	14be4 <_start@@Base+0x24f0>
   14b7c:	cmp	r8, #0
   14b80:	bne	14b4c <_start@@Base+0x2458>
   14b84:	ldr	r3, [sp, #16]
   14b88:	cmp	r3, #0
   14b8c:	ldreq	r3, [sp, #28]
   14b90:	ldreq	fp, [sp, #24]
   14b94:	streq	r3, [sp, #8]
   14b98:	beq	14bb8 <_start@@Base+0x24c4>
   14b9c:	mov	r3, #8
   14ba0:	mov	r2, r5
   14ba4:	mov	r1, r4
   14ba8:	mov	r0, r7
   14bac:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14bb0:	cmp	r5, r0
   14bb4:	beq	14b74 <_start@@Base+0x2480>
   14bb8:	ldr	r3, [r6]
   14bbc:	add	r8, r8, #1
   14bc0:	ldr	r2, [r6, #4]
   14bc4:	ldr	r1, [sp, #8]
   14bc8:	adds	r3, r3, fp
   14bcc:	str	r3, [r6]
   14bd0:	ldr	r3, [sp, #20]
   14bd4:	adc	r2, r2, r1
   14bd8:	str	r2, [r6, #4]
   14bdc:	cmp	r3, #0
   14be0:	bne	14af0 <_start@@Base+0x23fc>
   14be4:	mov	r0, r4
   14be8:	add	sp, sp, #36	; 0x24
   14bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf4:	sub	sp, sp, #36	; 0x24
   14bf8:	mov	r6, #0
   14bfc:	mov	r5, r2
   14c00:	mov	r7, r0
   14c04:	ldr	r8, [sp, #72]	; 0x48
   14c08:	str	r3, [sp, #12]
   14c0c:	str	r6, [r8]
   14c10:	bl	136f4 <_start@@Base+0x1000>
   14c14:	cmp	r5, r0
   14c18:	mov	r4, r0
   14c1c:	beq	14d1c <_start@@Base+0x2628>
   14c20:	mov	fp, r6
   14c24:	ldr	r9, [sp, #12]
   14c28:	mov	sl, r4
   14c2c:	add	r3, sp, #20
   14c30:	mov	r1, r4
   14c34:	mov	r2, r5
   14c38:	mov	r0, r7
   14c3c:	str	r3, [sp, #4]
   14c40:	add	r3, sp, #24
   14c44:	str	r3, [sp]
   14c48:	add	r3, sp, #16
   14c4c:	ldr	ip, [r9]
   14c50:	blx	ip
   14c54:	cmp	r5, r0
   14c58:	mov	r4, r0
   14c5c:	beq	14d1c <_start@@Base+0x2628>
   14c60:	cmp	sl, r0
   14c64:	bne	14cb0 <_start@@Base+0x25bc>
   14c68:	ldr	r3, [r9, #4]!
   14c6c:	mov	sl, r0
   14c70:	cmp	r3, #0
   14c74:	bne	14c2c <_start@@Base+0x2538>
   14c78:	mov	r3, #23
   14c7c:	b	14c90 <_start@@Base+0x259c>
   14c80:	ldr	r3, [r7, #12]
   14c84:	cmp	r3, #0
   14c88:	beq	14cb8 <_start@@Base+0x25c4>
   14c8c:	mov	r3, #14
   14c90:	mov	r1, r4
   14c94:	mov	r2, r5
   14c98:	mov	r0, r7
   14c9c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14ca0:	mov	r4, r0
   14ca4:	b	14d1c <_start@@Base+0x2628>
   14ca8:	mov	r4, r5
   14cac:	b	14d1c <_start@@Base+0x2628>
   14cb0:	cmp	r6, #0
   14cb4:	bne	14c80 <_start@@Base+0x258c>
   14cb8:	ldr	r3, [sp, #16]
   14cbc:	cmp	r3, #0
   14cc0:	movne	r3, #8
   14cc4:	bne	14ce8 <_start@@Base+0x25f4>
   14cc8:	ldrd	r2, [sp, #24]
   14ccc:	mov	r1, #0
   14cd0:	mvn	r0, #0
   14cd4:	cmp	r3, r1
   14cd8:	cmpeq	r2, r0
   14cdc:	movls	fp, r2
   14ce0:	bls	14d00 <_start@@Base+0x260c>
   14ce4:	mov	r3, #7
   14ce8:	mov	r2, r5
   14cec:	mov	r1, r4
   14cf0:	mov	r0, r7
   14cf4:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14cf8:	cmp	r5, r0
   14cfc:	beq	14ca8 <_start@@Base+0x25b4>
   14d00:	ldr	r3, [r8]
   14d04:	add	r6, r6, #1
   14d08:	add	r3, r3, fp
   14d0c:	str	r3, [r8]
   14d10:	ldr	r3, [sp, #20]
   14d14:	cmp	r3, #0
   14d18:	bne	14c24 <_start@@Base+0x2530>
   14d1c:	mov	r0, r4
   14d20:	add	sp, sp, #36	; 0x24
   14d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d2c:	sub	sp, sp, #28
   14d30:	mov	fp, r3
   14d34:	mov	r6, #0
   14d38:	mov	r5, r2
   14d3c:	mov	r7, r0
   14d40:	ldr	r3, [sp, #64]	; 0x40
   14d44:	strh	r6, [r3]
   14d48:	bl	136f4 <_start@@Base+0x1000>
   14d4c:	cmp	r5, r0
   14d50:	mov	r4, r0
   14d54:	beq	14e5c <_start@@Base+0x2768>
   14d58:	mov	r9, r6
   14d5c:	mov	r8, fp
   14d60:	mov	sl, r4
   14d64:	add	r3, sp, #12
   14d68:	mov	r1, r4
   14d6c:	mov	r2, r5
   14d70:	mov	r0, r7
   14d74:	str	r3, [sp, #4]
   14d78:	add	r3, sp, #16
   14d7c:	str	r3, [sp]
   14d80:	add	r3, sp, #8
   14d84:	ldr	ip, [r8]
   14d88:	blx	ip
   14d8c:	cmp	r5, r0
   14d90:	mov	r4, r0
   14d94:	beq	14e5c <_start@@Base+0x2768>
   14d98:	cmp	sl, r0
   14d9c:	bne	14de8 <_start@@Base+0x26f4>
   14da0:	ldr	r3, [r8, #4]!
   14da4:	mov	sl, r0
   14da8:	cmp	r3, #0
   14dac:	bne	14d64 <_start@@Base+0x2670>
   14db0:	mov	r3, #23
   14db4:	b	14dc8 <_start@@Base+0x26d4>
   14db8:	ldr	r3, [r7, #12]
   14dbc:	cmp	r3, #0
   14dc0:	beq	14df0 <_start@@Base+0x26fc>
   14dc4:	mov	r3, #14
   14dc8:	mov	r1, r4
   14dcc:	mov	r2, r5
   14dd0:	mov	r0, r7
   14dd4:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14dd8:	mov	r4, r0
   14ddc:	b	14e5c <_start@@Base+0x2768>
   14de0:	mov	r4, r5
   14de4:	b	14e5c <_start@@Base+0x2768>
   14de8:	cmp	r6, #0
   14dec:	bne	14db8 <_start@@Base+0x26c4>
   14df0:	ldr	r3, [sp, #8]
   14df4:	cmp	r3, #0
   14df8:	movne	r3, #8
   14dfc:	bne	14e20 <_start@@Base+0x272c>
   14e00:	ldrd	r2, [sp, #16]
   14e04:	mov	r1, #0
   14e08:	movw	r0, #65535	; 0xffff
   14e0c:	cmp	r3, r1
   14e10:	cmpeq	r2, r0
   14e14:	uxthls	r9, r2
   14e18:	bls	14e38 <_start@@Base+0x2744>
   14e1c:	mov	r3, #7
   14e20:	mov	r2, r5
   14e24:	mov	r1, r4
   14e28:	mov	r0, r7
   14e2c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14e30:	cmp	r5, r0
   14e34:	beq	14de0 <_start@@Base+0x26ec>
   14e38:	ldr	r3, [sp, #64]	; 0x40
   14e3c:	add	r6, r6, #1
   14e40:	ldr	r2, [sp, #64]	; 0x40
   14e44:	ldrh	r3, [r3]
   14e48:	add	r3, r9, r3
   14e4c:	strh	r3, [r2]
   14e50:	ldr	r3, [sp, #12]
   14e54:	cmp	r3, #0
   14e58:	bne	14d5c <_start@@Base+0x2668>
   14e5c:	mov	r0, r4
   14e60:	add	sp, sp, #28
   14e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e6c:	sub	sp, sp, #28
   14e70:	mov	fp, r3
   14e74:	mov	r6, #0
   14e78:	mov	r5, r2
   14e7c:	mov	r7, r0
   14e80:	ldr	r3, [sp, #64]	; 0x40
   14e84:	strb	r6, [r3]
   14e88:	bl	136f4 <_start@@Base+0x1000>
   14e8c:	cmp	r5, r0
   14e90:	mov	r4, r0
   14e94:	beq	14f94 <_start@@Base+0x28a0>
   14e98:	mov	r9, r6
   14e9c:	mov	r8, fp
   14ea0:	mov	sl, r4
   14ea4:	add	r3, sp, #12
   14ea8:	mov	r1, r4
   14eac:	mov	r2, r5
   14eb0:	mov	r0, r7
   14eb4:	str	r3, [sp, #4]
   14eb8:	add	r3, sp, #16
   14ebc:	str	r3, [sp]
   14ec0:	add	r3, sp, #8
   14ec4:	ldr	ip, [r8]
   14ec8:	blx	ip
   14ecc:	cmp	r5, r0
   14ed0:	mov	r4, r0
   14ed4:	beq	14f94 <_start@@Base+0x28a0>
   14ed8:	cmp	sl, r0
   14edc:	bne	14f28 <_start@@Base+0x2834>
   14ee0:	ldr	r3, [r8, #4]!
   14ee4:	mov	sl, r0
   14ee8:	cmp	r3, #0
   14eec:	bne	14ea4 <_start@@Base+0x27b0>
   14ef0:	mov	r3, #23
   14ef4:	b	14f08 <_start@@Base+0x2814>
   14ef8:	ldr	r3, [r7, #12]
   14efc:	cmp	r3, #0
   14f00:	beq	14f30 <_start@@Base+0x283c>
   14f04:	mov	r3, #14
   14f08:	mov	r1, r4
   14f0c:	mov	r2, r5
   14f10:	mov	r0, r7
   14f14:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14f18:	mov	r4, r0
   14f1c:	b	14f94 <_start@@Base+0x28a0>
   14f20:	mov	r4, r5
   14f24:	b	14f94 <_start@@Base+0x28a0>
   14f28:	cmp	r6, #0
   14f2c:	bne	14ef8 <_start@@Base+0x2804>
   14f30:	ldr	r3, [sp, #8]
   14f34:	cmp	r3, #0
   14f38:	movne	r3, #8
   14f3c:	bne	14f58 <_start@@Base+0x2864>
   14f40:	ldrd	r2, [sp, #16]
   14f44:	cmp	r3, #0
   14f48:	cmpeq	r2, #255	; 0xff
   14f4c:	uxtbls	r9, r2
   14f50:	bls	14f70 <_start@@Base+0x287c>
   14f54:	mov	r3, #7
   14f58:	mov	r2, r5
   14f5c:	mov	r1, r4
   14f60:	mov	r0, r7
   14f64:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   14f68:	cmp	r5, r0
   14f6c:	beq	14f20 <_start@@Base+0x282c>
   14f70:	ldr	r3, [sp, #64]	; 0x40
   14f74:	add	r6, r6, #1
   14f78:	ldr	r2, [sp, #64]	; 0x40
   14f7c:	ldrb	r3, [r3]
   14f80:	add	r3, r9, r3
   14f84:	strb	r3, [r2]
   14f88:	ldr	r3, [sp, #12]
   14f8c:	cmp	r3, #0
   14f90:	bne	14e9c <_start@@Base+0x27a8>
   14f94:	mov	r0, r4
   14f98:	add	sp, sp, #28
   14f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa4:	sub	sp, sp, #36	; 0x24
   14fa8:	mov	r6, #0
   14fac:	mov	r5, r2
   14fb0:	mov	r7, r0
   14fb4:	ldr	fp, [sp, #72]	; 0x48
   14fb8:	str	r3, [sp, #12]
   14fbc:	str	r6, [fp]
   14fc0:	bl	136f4 <_start@@Base+0x1000>
   14fc4:	cmp	r5, r0
   14fc8:	mov	r4, r0
   14fcc:	beq	150e0 <_start@@Base+0x29ec>
   14fd0:	mov	r8, r6
   14fd4:	ldr	r9, [sp, #12]
   14fd8:	mov	sl, r4
   14fdc:	add	r3, sp, #20
   14fe0:	mov	r1, r4
   14fe4:	mov	r2, r5
   14fe8:	mov	r0, r7
   14fec:	str	r3, [sp, #4]
   14ff0:	add	r3, sp, #24
   14ff4:	str	r3, [sp]
   14ff8:	add	r3, sp, #16
   14ffc:	ldr	ip, [r9]
   15000:	blx	ip
   15004:	cmp	r5, r0
   15008:	mov	r4, r0
   1500c:	beq	150e0 <_start@@Base+0x29ec>
   15010:	cmp	sl, r0
   15014:	bne	15080 <_start@@Base+0x298c>
   15018:	ldr	r3, [r9, #4]!
   1501c:	mov	sl, r0
   15020:	cmp	r3, #0
   15024:	bne	14fdc <_start@@Base+0x28e8>
   15028:	mov	r3, #23
   1502c:	b	15040 <_start@@Base+0x294c>
   15030:	ldr	r3, [r7, #12]
   15034:	cmp	r3, #0
   15038:	beq	15088 <_start@@Base+0x2994>
   1503c:	mov	r3, #14
   15040:	mov	r1, r4
   15044:	mov	r2, r5
   15048:	mov	r0, r7
   1504c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15050:	mov	r4, r0
   15054:	b	150e0 <_start@@Base+0x29ec>
   15058:	mov	r1, #0
   1505c:	mvn	r0, #-2147483648	; 0x80000000
   15060:	cmp	r3, r1
   15064:	cmpeq	r2, r0
   15068:	movls	r8, r2
   1506c:	bls	150c4 <_start@@Base+0x29d0>
   15070:	mov	r3, #7
   15074:	b	150ac <_start@@Base+0x29b8>
   15078:	mov	r4, r5
   1507c:	b	150e0 <_start@@Base+0x29ec>
   15080:	cmp	r6, #0
   15084:	bne	15030 <_start@@Base+0x293c>
   15088:	ldr	r1, [sp, #16]
   1508c:	ldrd	r2, [sp, #24]
   15090:	cmp	r1, #0
   15094:	beq	15058 <_start@@Base+0x2964>
   15098:	cmp	r3, #0
   1509c:	cmpeq	r2, #-2147483648	; 0x80000000
   150a0:	movhi	r3, #8
   150a4:	rsbls	r8, r2, #0
   150a8:	bls	150c4 <_start@@Base+0x29d0>
   150ac:	mov	r2, r5
   150b0:	mov	r1, r4
   150b4:	mov	r0, r7
   150b8:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   150bc:	cmp	r5, r0
   150c0:	beq	15078 <_start@@Base+0x2984>
   150c4:	ldr	r3, [fp]
   150c8:	add	r6, r6, #1
   150cc:	add	r3, r3, r8
   150d0:	str	r3, [fp]
   150d4:	ldr	r3, [sp, #20]
   150d8:	cmp	r3, #0
   150dc:	bne	14fd4 <_start@@Base+0x28e0>
   150e0:	mov	r0, r4
   150e4:	add	sp, sp, #36	; 0x24
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f0:	mov	r8, r3
   150f4:	mov	r3, #0
   150f8:	mov	r4, r2
   150fc:	mov	r2, #4
   15100:	sub	sp, sp, #28
   15104:	mov	r5, r0
   15108:	mov	r6, r1
   1510c:	mov	r1, r2
   15110:	ldr	r0, [r0]
   15114:	str	r3, [r8]
   15118:	bl	1ca80 <flatcc_builder_start_struct@@Base>
   1511c:	subs	r9, r0, #0
   15120:	beq	15250 <_start@@Base+0x2b5c>
   15124:	ldr	sl, [pc, #396]	; 152b8 <_start@@Base+0x2bc4>
   15128:	mov	r1, r6
   1512c:	add	r3, sp, #16
   15130:	mov	r2, r4
   15134:	mov	r0, r5
   15138:	bl	14344 <_start@@Base+0x1c50>
   1513c:	mov	r6, r0
   15140:	ldr	r3, [sp, #16]
   15144:	cmp	r3, #0
   15148:	beq	15234 <_start@@Base+0x2b40>
   1514c:	mov	r2, r4
   15150:	mov	r1, r6
   15154:	mov	r0, r5
   15158:	bl	1369c <_start@@Base+0xfa8>
   1515c:	mov	r1, r4
   15160:	mov	r6, r0
   15164:	bl	127e8 <_start@@Base+0xf4>
   15168:	add	r3, pc, #320	; 0x140
   1516c:	ldrd	r2, [r3]
   15170:	cmp	r1, r3
   15174:	cmpeq	r0, r2
   15178:	bne	15298 <_start@@Base+0x2ba4>
   1517c:	add	r6, r6, #8
   15180:	mov	r1, r4
   15184:	mov	r0, r6
   15188:	mov	fp, #0
   1518c:	bl	127e8 <_start@@Base+0xf4>
   15190:	and	r3, r1, sl
   15194:	str	fp, [sp, #8]
   15198:	mov	r0, #0
   1519c:	ldr	r1, [pc, #280]	; 152bc <_start@@Base+0x2bc8>
   151a0:	str	r3, [sp, #12]
   151a4:	ldrd	r2, [sp, #8]
   151a8:	cmp	r3, r1
   151ac:	cmpeq	r2, r0
   151b0:	bne	15298 <_start@@Base+0x2ba4>
   151b4:	mov	r3, #2
   151b8:	mov	r2, r4
   151bc:	mov	r1, r6
   151c0:	mov	r0, r5
   151c4:	bl	14498 <_start@@Base+0x1da4>
   151c8:	cmp	r6, r0
   151cc:	mov	r7, r0
   151d0:	beq	15298 <_start@@Base+0x2ba4>
   151d4:	add	r6, sp, #20
   151d8:	mov	r1, r0
   151dc:	str	fp, [sp, #20]
   151e0:	mov	r3, r6
   151e4:	mov	r2, r4
   151e8:	mov	r0, r5
   151ec:	bl	148b4 <_start@@Base+0x21c0>
   151f0:	cmp	r7, r0
   151f4:	bne	15274 <_start@@Base+0x2b80>
   151f8:	ldr	r3, [pc, #192]	; 152c0 <_start@@Base+0x2bcc>
   151fc:	mov	r2, r4
   15200:	mov	r1, r7
   15204:	mov	r0, r5
   15208:	str	r6, [sp]
   1520c:	bl	14fa0 <_start@@Base+0x28ac>
   15210:	cmp	r4, r0
   15214:	cmpne	r7, r0
   15218:	bne	15274 <_start@@Base+0x2b80>
   1521c:	mov	r1, r0
   15220:	mov	r3, #33	; 0x21
   15224:	mov	r2, r4
   15228:	mov	r0, r5
   1522c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15230:	mov	r6, r0
   15234:	cmp	r4, r6
   15238:	beq	15250 <_start@@Base+0x2b5c>
   1523c:	ldr	r0, [r5]
   15240:	bl	1cad0 <flatcc_builder_end_struct@@Base>
   15244:	cmp	r0, #0
   15248:	str	r0, [r8]
   1524c:	bne	15268 <_start@@Base+0x2b74>
   15250:	mov	r1, r6
   15254:	mov	r3, #33	; 0x21
   15258:	mov	r2, r4
   1525c:	mov	r0, r5
   15260:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15264:	mov	r6, r0
   15268:	mov	r0, r6
   1526c:	add	sp, sp, #28
   15270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15274:	ldr	r3, [sp, #20]
   15278:	str	r3, [r9]
   1527c:	mov	r1, r0
   15280:	add	r3, sp, #16
   15284:	mov	r2, r4
   15288:	mov	r0, r5
   1528c:	bl	13518 <_start@@Base+0xe24>
   15290:	mov	r6, r0
   15294:	b	15140 <_start@@Base+0x2a4c>
   15298:	mov	r2, r4
   1529c:	mov	r1, r6
   152a0:	mov	r0, r5
   152a4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   152a8:	b	1527c <_start@@Base+0x2b88>
   152ac:	nop	{0}
   152b0:	cmpvc	pc, #1342177286	; 0x50000006
   152b4:	rsbvs	r6, pc, #428	; 0x1ac
   152b8:			; <UNDEFINED> instruction: 0xffff0000
   152bc:	cmnvs	r4, r0
   152c0:	andeq	r4, r3, r8, ror r0
   152c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152c8:	sub	sp, sp, #28
   152cc:	mov	ip, #0
   152d0:	cmp	r3, #9
   152d4:	mov	r4, r0
   152d8:	mov	r6, r1
   152dc:	mov	r5, r2
   152e0:	ldr	r7, [sp, #64]	; 0x40
   152e4:	str	ip, [r7]
   152e8:	beq	156d0 <_start@@Base+0x2fdc>
   152ec:	bhi	1531c <_start@@Base+0x2c28>
   152f0:	cmp	r3, #2
   152f4:	beq	15354 <_start@@Base+0x2c60>
   152f8:	cmp	r3, #8
   152fc:	beq	1555c <_start@@Base+0x2e68>
   15300:	cmp	r3, ip
   15304:	bne	15330 <_start@@Base+0x2c3c>
   15308:	bl	1291c <_start@@Base+0x228>
   1530c:	mov	r6, r0
   15310:	mov	r0, r6
   15314:	add	sp, sp, #28
   15318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1531c:	cmp	r3, #11
   15320:	beq	156e8 <_start@@Base+0x2ff4>
   15324:	bcc	156d0 <_start@@Base+0x2fdc>
   15328:	cmp	r3, #255	; 0xff
   1532c:	beq	156e8 <_start@@Base+0x2ff4>
   15330:	ldr	r3, [r4, #8]
   15334:	tst	r3, #1
   15338:	moveq	r3, #15
   1533c:	beq	153e0 <_start@@Base+0x2cec>
   15340:	mov	r2, r5
   15344:	mov	r1, r6
   15348:	mov	r0, r4
   1534c:	bl	206a8 <flatcc_json_parser_generic_json@@Base>
   15350:	b	1530c <_start@@Base+0x2c18>
   15354:	mov	r1, #1
   15358:	ldr	r0, [r0]
   1535c:	bl	1d108 <flatcc_builder_start_table@@Base>
   15360:	cmp	r0, #0
   15364:	bne	153ac <_start@@Base+0x2cb8>
   15368:	add	r3, sp, #16
   1536c:	mov	r2, r5
   15370:	mov	r1, r6
   15374:	mov	r0, r4
   15378:	bl	14344 <_start@@Base+0x1c50>
   1537c:	ldr	r3, [sp, #16]
   15380:	mov	r6, r0
   15384:	cmp	r3, #0
   15388:	bne	153f4 <_start@@Base+0x2d00>
   1538c:	ldr	r3, [r4, #24]
   15390:	cmp	r3, #0
   15394:	bne	153ac <_start@@Base+0x2cb8>
   15398:	ldr	r0, [r4]
   1539c:	bl	1d730 <flatcc_builder_end_table@@Base>
   153a0:	cmp	r0, #0
   153a4:	str	r0, [r7]
   153a8:	bne	153c4 <_start@@Base+0x2cd0>
   153ac:	mov	r3, #33	; 0x21
   153b0:	mov	r2, r5
   153b4:	mov	r1, r6
   153b8:	mov	r0, r4
   153bc:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   153c0:	mov	r6, r0
   153c4:	ldr	r3, [r4, #24]
   153c8:	cmp	r3, #0
   153cc:	bne	15310 <_start@@Base+0x2c1c>
   153d0:	ldr	r3, [r7]
   153d4:	cmp	r3, #0
   153d8:	bne	15310 <_start@@Base+0x2c1c>
   153dc:	mov	r3, #33	; 0x21
   153e0:	mov	r2, r5
   153e4:	mov	r1, r6
   153e8:	mov	r0, r4
   153ec:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   153f0:	b	1530c <_start@@Base+0x2c18>
   153f4:	mov	r2, r5
   153f8:	mov	r1, r6
   153fc:	mov	r0, r4
   15400:	bl	1369c <_start@@Base+0xfa8>
   15404:	mov	r1, r5
   15408:	mov	r6, r0
   1540c:	bl	127e8 <_start@@Base+0xf4>
   15410:	add	r3, pc, #744	; 0x2e8
   15414:	ldrd	r2, [r3]
   15418:	cmp	r1, r3
   1541c:	cmpeq	r0, r2
   15420:	bne	15550 <_start@@Base+0x2e5c>
   15424:	add	fp, pc, #732	; 0x2dc
   15428:	ldrd	sl, [fp]
   1542c:	add	r3, r6, #8
   15430:	mov	r1, r5
   15434:	mov	r0, r3
   15438:	bl	127e8 <_start@@Base+0xf4>
   1543c:	cmp	r1, fp
   15440:	cmpeq	r0, sl
   15444:	bne	15538 <_start@@Base+0x2e44>
   15448:	add	r6, r6, #16
   1544c:	mov	r1, r5
   15450:	mov	r0, r6
   15454:	mov	fp, #0
   15458:	bl	127e8 <_start@@Base+0xf4>
   1545c:	add	r3, pc, #684	; 0x2ac
   15460:	ldrd	r2, [r3]
   15464:	bic	r9, r1, #255	; 0xff
   15468:	cmp	r9, r3
   1546c:	cmpeq	fp, r2
   15470:	bne	15550 <_start@@Base+0x2e5c>
   15474:	mov	r3, #3
   15478:	mov	r2, r5
   1547c:	mov	r1, r6
   15480:	mov	r0, r4
   15484:	bl	14498 <_start@@Base+0x1da4>
   15488:	cmp	r6, r0
   1548c:	mov	sl, r0
   15490:	beq	15550 <_start@@Base+0x2e5c>
   15494:	str	fp, [sp, #20]
   15498:	add	fp, sp, #20
   1549c:	mov	r1, r0
   154a0:	mov	r2, r5
   154a4:	mov	r0, r4
   154a8:	mov	r3, fp
   154ac:	bl	148b4 <_start@@Base+0x21c0>
   154b0:	cmp	sl, r0
   154b4:	mov	r6, r0
   154b8:	bne	154e4 <_start@@Base+0x2df0>
   154bc:	mov	r1, r0
   154c0:	ldr	r3, [pc, #608]	; 15728 <_start@@Base+0x3034>
   154c4:	mov	r2, r5
   154c8:	mov	r0, r4
   154cc:	str	fp, [sp]
   154d0:	bl	14fa0 <_start@@Base+0x28ac>
   154d4:	cmp	r5, r0
   154d8:	cmpne	r6, r0
   154dc:	mov	r6, r0
   154e0:	beq	153ac <_start@@Base+0x2cb8>
   154e4:	ldr	r3, [sp, #20]
   154e8:	cmp	r3, #0
   154ec:	bne	154fc <_start@@Base+0x2e08>
   154f0:	ldr	r3, [r4, #8]
   154f4:	tst	r3, #2
   154f8:	beq	15520 <_start@@Base+0x2e2c>
   154fc:	mov	r3, #4
   15500:	mov	r1, #0
   15504:	ldr	r0, [r4]
   15508:	mov	r2, r3
   1550c:	bl	1e08c <flatcc_builder_table_add@@Base>
   15510:	cmp	r0, #0
   15514:	beq	153ac <_start@@Base+0x2cb8>
   15518:	ldr	r3, [sp, #20]
   1551c:	str	r3, [r0]
   15520:	add	r3, sp, #16
   15524:	mov	r2, r5
   15528:	mov	r1, r6
   1552c:	mov	r0, r4
   15530:	bl	13518 <_start@@Base+0xe24>
   15534:	b	1537c <_start@@Base+0x2c88>
   15538:	mov	r2, r5
   1553c:	mov	r1, r3
   15540:	mov	r0, r4
   15544:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   15548:	mov	r6, r0
   1554c:	b	15520 <_start@@Base+0x2e2c>
   15550:	mov	r2, r5
   15554:	mov	r1, r6
   15558:	b	15540 <_start@@Base+0x2e4c>
   1555c:	mov	r2, #2
   15560:	ldr	r0, [r0]
   15564:	mov	r1, r2
   15568:	bl	1ca80 <flatcc_builder_start_struct@@Base>
   1556c:	subs	r9, r0, #0
   15570:	beq	153ac <_start@@Base+0x2cb8>
   15574:	ldr	sl, [pc, #432]	; 1572c <_start@@Base+0x3038>
   15578:	mov	r1, r6
   1557c:	add	r3, sp, #20
   15580:	mov	r2, r5
   15584:	mov	r0, r4
   15588:	bl	14344 <_start@@Base+0x1c50>
   1558c:	mov	r6, r0
   15590:	ldr	r3, [sp, #20]
   15594:	cmp	r3, #0
   15598:	beq	15684 <_start@@Base+0x2f90>
   1559c:	mov	r2, r5
   155a0:	mov	r1, r6
   155a4:	mov	r0, r4
   155a8:	bl	1369c <_start@@Base+0xfa8>
   155ac:	mov	r1, r5
   155b0:	mov	r6, r0
   155b4:	bl	127e8 <_start@@Base+0xf4>
   155b8:	add	r3, pc, #344	; 0x158
   155bc:	ldrd	r2, [r3]
   155c0:	cmp	r1, r3
   155c4:	cmpeq	r0, r2
   155c8:	bne	156bc <_start@@Base+0x2fc8>
   155cc:	add	r6, r6, #8
   155d0:	mov	r1, r5
   155d4:	mov	r0, r6
   155d8:	mov	fp, #0
   155dc:	bl	127e8 <_start@@Base+0xf4>
   155e0:	bic	r3, r1, #255	; 0xff
   155e4:	str	fp, [sp, #8]
   155e8:	add	r1, pc, #304	; 0x130
   155ec:	ldrd	r0, [r1]
   155f0:	str	r3, [sp, #12]
   155f4:	ldrd	r2, [sp, #8]
   155f8:	cmp	r3, r1
   155fc:	cmpeq	r2, r0
   15600:	bne	156bc <_start@@Base+0x2fc8>
   15604:	mov	r3, #3
   15608:	mov	r2, r5
   1560c:	mov	r1, r6
   15610:	mov	r0, r4
   15614:	bl	14498 <_start@@Base+0x1da4>
   15618:	cmp	r6, r0
   1561c:	mov	r8, r0
   15620:	beq	156bc <_start@@Base+0x2fc8>
   15624:	add	r6, sp, #16
   15628:	mov	r1, r0
   1562c:	strh	fp, [sp, #16]
   15630:	mov	r3, r6
   15634:	mov	r2, r5
   15638:	mov	r0, r4
   1563c:	bl	146e4 <_start@@Base+0x1ff0>
   15640:	cmp	r8, r0
   15644:	bne	15698 <_start@@Base+0x2fa4>
   15648:	mov	r3, sl
   1564c:	mov	r2, r5
   15650:	str	r6, [sp]
   15654:	mov	r1, r8
   15658:	mov	r0, r4
   1565c:	bl	14d28 <_start@@Base+0x2634>
   15660:	cmp	r5, r0
   15664:	cmpne	r8, r0
   15668:	bne	15698 <_start@@Base+0x2fa4>
   1566c:	mov	r1, r0
   15670:	mov	r3, #33	; 0x21
   15674:	mov	r2, r5
   15678:	mov	r0, r4
   1567c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15680:	mov	r6, r0
   15684:	cmp	r5, r6
   15688:	beq	153ac <_start@@Base+0x2cb8>
   1568c:	ldr	r0, [r4]
   15690:	bl	1cad0 <flatcc_builder_end_struct@@Base>
   15694:	b	153a0 <_start@@Base+0x2cac>
   15698:	ldrh	r3, [sp, #16]
   1569c:	strh	r3, [r9]
   156a0:	mov	r1, r0
   156a4:	add	r3, sp, #20
   156a8:	mov	r2, r5
   156ac:	mov	r0, r4
   156b0:	bl	13518 <_start@@Base+0xe24>
   156b4:	mov	r6, r0
   156b8:	b	15590 <_start@@Base+0x2e9c>
   156bc:	mov	r2, r5
   156c0:	mov	r1, r6
   156c4:	mov	r0, r4
   156c8:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   156cc:	b	156a0 <_start@@Base+0x2fac>
   156d0:	mov	r3, r7
   156d4:	mov	r2, r5
   156d8:	mov	r1, r6
   156dc:	mov	r0, r4
   156e0:	bl	150ec <_start@@Base+0x29f8>
   156e4:	b	153c0 <_start@@Base+0x2ccc>
   156e8:	mov	r3, r7
   156ec:	mov	r2, r5
   156f0:	mov	r1, r6
   156f4:	mov	r0, r4
   156f8:	bl	21098 <flatcc_json_parser_build_string@@Base>
   156fc:	b	153c0 <_start@@Base+0x2ccc>
   15700:	ldrbvs	r6, [pc], #-372	; 15708 <_start@@Base+0x3014>
   15704:	cmnvc	r7, #456	; 0x1c8
   15708:	svcpl	0x0064616d
   1570c:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   15710:	andeq	r0, r0, r0
   15714:	cmnvs	r7, r0, lsl #10
   15718:	svcpl	0x006c656e
   1571c:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   15720:	andeq	r0, r0, r0
   15724:	ldrbvs	r6, [r4, -r0, lsl #16]!
   15728:	andeq	r4, r3, r4, lsl #1
   1572c:	muleq	r3, r0, r0
   15730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15734:	sub	sp, sp, #28
   15738:	mov	fp, r3
   1573c:	mov	r6, #0
   15740:	mov	r5, r2
   15744:	mov	r7, r0
   15748:	ldr	r3, [sp, #64]	; 0x40
   1574c:	strh	r6, [r3]
   15750:	bl	136f4 <_start@@Base+0x1000>
   15754:	cmp	r5, r0
   15758:	mov	r4, r0
   1575c:	beq	1587c <_start@@Base+0x3188>
   15760:	mov	r8, r6
   15764:	mov	r9, fp
   15768:	mov	sl, r4
   1576c:	add	r3, sp, #12
   15770:	mov	r1, r4
   15774:	mov	r2, r5
   15778:	mov	r0, r7
   1577c:	str	r3, [sp, #4]
   15780:	add	r3, sp, #16
   15784:	str	r3, [sp]
   15788:	add	r3, sp, #8
   1578c:	ldr	ip, [r9]
   15790:	blx	ip
   15794:	cmp	r5, r0
   15798:	mov	r4, r0
   1579c:	beq	1587c <_start@@Base+0x3188>
   157a0:	cmp	sl, r0
   157a4:	bne	15810 <_start@@Base+0x311c>
   157a8:	ldr	r3, [r9, #4]!
   157ac:	mov	sl, r0
   157b0:	cmp	r3, #0
   157b4:	bne	1576c <_start@@Base+0x3078>
   157b8:	mov	r3, #23
   157bc:	b	157d0 <_start@@Base+0x30dc>
   157c0:	ldr	r3, [r7, #12]
   157c4:	cmp	r3, #0
   157c8:	beq	15818 <_start@@Base+0x3124>
   157cc:	mov	r3, #14
   157d0:	mov	r1, r4
   157d4:	mov	r2, r5
   157d8:	mov	r0, r7
   157dc:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   157e0:	mov	r4, r0
   157e4:	b	1587c <_start@@Base+0x3188>
   157e8:	mov	r1, #0
   157ec:	movw	r0, #32767	; 0x7fff
   157f0:	cmp	r3, r1
   157f4:	cmpeq	r2, r0
   157f8:	sxthls	r8, r2
   157fc:	bls	15858 <_start@@Base+0x3164>
   15800:	mov	r3, #7
   15804:	b	15840 <_start@@Base+0x314c>
   15808:	mov	r4, r5
   1580c:	b	1587c <_start@@Base+0x3188>
   15810:	cmp	r6, #0
   15814:	bne	157c0 <_start@@Base+0x30cc>
   15818:	ldr	r1, [sp, #8]
   1581c:	ldrd	r2, [sp, #16]
   15820:	cmp	r1, #0
   15824:	beq	157e8 <_start@@Base+0x30f4>
   15828:	cmp	r3, #0
   1582c:	cmpeq	r2, #32768	; 0x8000
   15830:	rsbls	r8, r2, #0
   15834:	movhi	r3, #8
   15838:	sxthls	r8, r8
   1583c:	bls	15858 <_start@@Base+0x3164>
   15840:	mov	r2, r5
   15844:	mov	r1, r4
   15848:	mov	r0, r7
   1584c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15850:	cmp	r5, r0
   15854:	beq	15808 <_start@@Base+0x3114>
   15858:	ldr	r3, [sp, #64]	; 0x40
   1585c:	add	r6, r6, #1
   15860:	ldr	r2, [sp, #64]	; 0x40
   15864:	ldrh	r3, [r3]
   15868:	add	r3, r3, r8
   1586c:	strh	r3, [r2]
   15870:	ldr	r3, [sp, #12]
   15874:	cmp	r3, #0
   15878:	bne	15764 <_start@@Base+0x3070>
   1587c:	mov	r0, r4
   15880:	add	sp, sp, #28
   15884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1588c:	sub	sp, sp, #28
   15890:	mov	fp, r3
   15894:	mov	r6, #0
   15898:	mov	r5, r2
   1589c:	mov	r7, r0
   158a0:	ldr	r3, [sp, #64]	; 0x40
   158a4:	strb	r6, [r3]
   158a8:	bl	136f4 <_start@@Base+0x1000>
   158ac:	cmp	r5, r0
   158b0:	mov	r4, r0
   158b4:	beq	159cc <_start@@Base+0x32d8>
   158b8:	mov	r8, r6
   158bc:	mov	r9, fp
   158c0:	mov	sl, r4
   158c4:	add	r3, sp, #12
   158c8:	mov	r1, r4
   158cc:	mov	r2, r5
   158d0:	mov	r0, r7
   158d4:	str	r3, [sp, #4]
   158d8:	add	r3, sp, #16
   158dc:	str	r3, [sp]
   158e0:	add	r3, sp, #8
   158e4:	ldr	ip, [r9]
   158e8:	blx	ip
   158ec:	cmp	r5, r0
   158f0:	mov	r4, r0
   158f4:	beq	159cc <_start@@Base+0x32d8>
   158f8:	cmp	sl, r0
   158fc:	bne	15960 <_start@@Base+0x326c>
   15900:	ldr	r3, [r9, #4]!
   15904:	mov	sl, r0
   15908:	cmp	r3, #0
   1590c:	bne	158c4 <_start@@Base+0x31d0>
   15910:	mov	r3, #23
   15914:	b	15928 <_start@@Base+0x3234>
   15918:	ldr	r3, [r7, #12]
   1591c:	cmp	r3, #0
   15920:	beq	15968 <_start@@Base+0x3274>
   15924:	mov	r3, #14
   15928:	mov	r1, r4
   1592c:	mov	r2, r5
   15930:	mov	r0, r7
   15934:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15938:	mov	r4, r0
   1593c:	b	159cc <_start@@Base+0x32d8>
   15940:	cmp	r3, #0
   15944:	cmpeq	r2, #127	; 0x7f
   15948:	sxtbls	r8, r2
   1594c:	bls	159a8 <_start@@Base+0x32b4>
   15950:	mov	r3, #7
   15954:	b	15990 <_start@@Base+0x329c>
   15958:	mov	r4, r5
   1595c:	b	159cc <_start@@Base+0x32d8>
   15960:	cmp	r6, #0
   15964:	bne	15918 <_start@@Base+0x3224>
   15968:	ldr	r1, [sp, #8]
   1596c:	ldrd	r2, [sp, #16]
   15970:	cmp	r1, #0
   15974:	beq	15940 <_start@@Base+0x324c>
   15978:	cmp	r3, #0
   1597c:	cmpeq	r2, #128	; 0x80
   15980:	rsbls	r8, r2, #0
   15984:	movhi	r3, #8
   15988:	sxtbls	r8, r8
   1598c:	bls	159a8 <_start@@Base+0x32b4>
   15990:	mov	r2, r5
   15994:	mov	r1, r4
   15998:	mov	r0, r7
   1599c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   159a0:	cmp	r5, r0
   159a4:	beq	15958 <_start@@Base+0x3264>
   159a8:	ldr	r3, [sp, #64]	; 0x40
   159ac:	add	r6, r6, #1
   159b0:	ldr	r2, [sp, #64]	; 0x40
   159b4:	ldrb	r3, [r3]
   159b8:	add	r3, r3, r8
   159bc:	strb	r3, [r2]
   159c0:	ldr	r3, [sp, #12]
   159c4:	cmp	r3, #0
   159c8:	bne	158bc <_start@@Base+0x31c8>
   159cc:	mov	r0, r4
   159d0:	add	sp, sp, #28
   159d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159dc:	sub	sp, sp, #20
   159e0:	mov	r9, r3
   159e4:	add	r3, sp, #12
   159e8:	mov	r6, r0
   159ec:	mov	r4, r2
   159f0:	bl	14344 <_start@@Base+0x1c50>
   159f4:	ldr	r3, [sp, #12]
   159f8:	cmp	r3, #0
   159fc:	bne	15a08 <_start@@Base+0x3314>
   15a00:	add	sp, sp, #20
   15a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a08:	mov	r1, r0
   15a0c:	mov	r2, r4
   15a10:	mov	r0, r6
   15a14:	mov	r8, #0
   15a18:	bl	1369c <_start@@Base+0xfa8>
   15a1c:	mov	r1, r4
   15a20:	mov	r5, r0
   15a24:	bl	127e8 <_start@@Base+0xf4>
   15a28:	and	fp, r1, #-16777216	; 0xff000000
   15a2c:	cmp	fp, #1644167168	; 0x62000000
   15a30:	cmpeq	r8, #0
   15a34:	bne	15ac8 <_start@@Base+0x33d4>
   15a38:	mov	r3, #1
   15a3c:	mov	r2, r4
   15a40:	mov	r1, r5
   15a44:	mov	r0, r6
   15a48:	bl	14498 <_start@@Base+0x1da4>
   15a4c:	cmp	r5, r0
   15a50:	mov	r7, r0
   15a54:	beq	15b50 <_start@@Base+0x345c>
   15a58:	strb	r8, [sp, #10]
   15a5c:	add	r8, sp, #10
   15a60:	mov	r1, r0
   15a64:	mov	r2, r4
   15a68:	mov	r0, r6
   15a6c:	mov	r3, r8
   15a70:	bl	14a0c <_start@@Base+0x2318>
   15a74:	cmp	r7, r0
   15a78:	mov	r5, r0
   15a7c:	bne	15aa8 <_start@@Base+0x33b4>
   15a80:	mov	r1, r0
   15a84:	ldr	r3, [pc, #244]	; 15b80 <_start@@Base+0x348c>
   15a88:	mov	r2, r4
   15a8c:	mov	r0, r6
   15a90:	str	r8, [sp]
   15a94:	bl	15888 <_start@@Base+0x3194>
   15a98:	cmp	r4, r0
   15a9c:	cmpne	r5, r0
   15aa0:	beq	15b68 <_start@@Base+0x3474>
   15aa4:	mov	r5, r0
   15aa8:	ldrb	r3, [sp, #10]
   15aac:	strb	r3, [r9, #2]
   15ab0:	add	r3, sp, #12
   15ab4:	mov	r2, r4
   15ab8:	mov	r1, r5
   15abc:	mov	r0, r6
   15ac0:	bl	13518 <_start@@Base+0xe24>
   15ac4:	b	159f4 <_start@@Base+0x3300>
   15ac8:	cmp	fp, #1627389952	; 0x61000000
   15acc:	cmpeq	r8, #0
   15ad0:	bne	15b50 <_start@@Base+0x345c>
   15ad4:	mov	r3, #1
   15ad8:	mov	r2, r4
   15adc:	mov	r1, r5
   15ae0:	mov	r0, r6
   15ae4:	bl	14498 <_start@@Base+0x1da4>
   15ae8:	cmp	r5, r0
   15aec:	mov	r7, r0
   15af0:	beq	15b50 <_start@@Base+0x345c>
   15af4:	strh	r8, [sp, #10]
   15af8:	add	r8, sp, #10
   15afc:	mov	r1, r0
   15b00:	mov	r2, r4
   15b04:	mov	r0, r6
   15b08:	mov	r3, r8
   15b0c:	bl	14960 <_start@@Base+0x226c>
   15b10:	cmp	r7, r0
   15b14:	mov	r5, r0
   15b18:	bne	15b44 <_start@@Base+0x3450>
   15b1c:	mov	r1, r0
   15b20:	ldr	r3, [pc, #92]	; 15b84 <_start@@Base+0x3490>
   15b24:	mov	r2, r4
   15b28:	mov	r0, r6
   15b2c:	str	r8, [sp]
   15b30:	bl	15730 <_start@@Base+0x303c>
   15b34:	cmp	r4, r0
   15b38:	cmpne	r5, r0
   15b3c:	beq	15b68 <_start@@Base+0x3474>
   15b40:	mov	r5, r0
   15b44:	ldrh	r3, [sp, #10]
   15b48:	strh	r3, [r9]
   15b4c:	b	15ab0 <_start@@Base+0x33bc>
   15b50:	mov	r1, r5
   15b54:	mov	r2, r4
   15b58:	mov	r0, r6
   15b5c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   15b60:	mov	r5, r0
   15b64:	b	15ab0 <_start@@Base+0x33bc>
   15b68:	mov	r1, r0
   15b6c:	mov	r3, #33	; 0x21
   15b70:	mov	r2, r4
   15b74:	mov	r0, r6
   15b78:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15b7c:	b	15a00 <_start@@Base+0x330c>
   15b80:	muleq	r3, ip, r0
   15b84:	andeq	r4, r3, r8, lsr #1
   15b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b8c:	sub	sp, sp, #36	; 0x24
   15b90:	mov	sl, #0
   15b94:	mov	r5, r2
   15b98:	mov	r6, r0
   15b9c:	ldr	r7, [sp, #72]	; 0x48
   15ba0:	str	r3, [sp, #12]
   15ba4:	str	sl, [r7]
   15ba8:	str	sl, [r7, #4]
   15bac:	bl	136f4 <_start@@Base+0x1000>
   15bb0:	cmp	r5, r0
   15bb4:	mov	r4, r0
   15bb8:	beq	15c9c <_start@@Base+0x35a8>
   15bbc:	mov	fp, sl
   15bc0:	mov	r8, sl
   15bc4:	ldr	r9, [sp, #12]
   15bc8:	str	r4, [sp, #8]
   15bcc:	add	r3, sp, #20
   15bd0:	mov	r1, r4
   15bd4:	mov	r2, r5
   15bd8:	mov	r0, r6
   15bdc:	str	r3, [sp, #4]
   15be0:	add	r3, sp, #24
   15be4:	str	r3, [sp]
   15be8:	add	r3, sp, #16
   15bec:	ldr	ip, [r9]
   15bf0:	blx	ip
   15bf4:	cmp	r5, r0
   15bf8:	mov	r4, r0
   15bfc:	beq	15c9c <_start@@Base+0x35a8>
   15c00:	ldr	r3, [sp, #8]
   15c04:	cmp	r3, r0
   15c08:	bne	15cb0 <_start@@Base+0x35bc>
   15c0c:	ldr	r3, [r9, #4]!
   15c10:	str	r0, [sp, #8]
   15c14:	cmp	r3, #0
   15c18:	bne	15bcc <_start@@Base+0x34d8>
   15c1c:	mov	r3, #23
   15c20:	b	15c34 <_start@@Base+0x3540>
   15c24:	ldr	r3, [r6, #12]
   15c28:	cmp	r3, #0
   15c2c:	beq	15cb8 <_start@@Base+0x35c4>
   15c30:	mov	r3, #14
   15c34:	mov	r1, r4
   15c38:	mov	r2, r5
   15c3c:	mov	r0, r6
   15c40:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15c44:	mov	r4, r0
   15c48:	b	15c9c <_start@@Base+0x35a8>
   15c4c:	cmp	r2, #0
   15c50:	sbcs	r1, r3, #0
   15c54:	bge	15ce0 <_start@@Base+0x35ec>
   15c58:	mov	r3, #7
   15c5c:	mov	r2, r5
   15c60:	mov	r1, r4
   15c64:	mov	r0, r6
   15c68:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15c6c:	cmp	r5, r0
   15c70:	beq	15ca8 <_start@@Base+0x35b4>
   15c74:	ldr	r3, [r7]
   15c78:	add	r8, r8, #1
   15c7c:	ldr	r2, [r7, #4]
   15c80:	adds	r3, r3, sl
   15c84:	str	r3, [r7]
   15c88:	adc	r2, r2, fp
   15c8c:	ldr	r3, [sp, #20]
   15c90:	str	r2, [r7, #4]
   15c94:	cmp	r3, #0
   15c98:	bne	15bc4 <_start@@Base+0x34d0>
   15c9c:	mov	r0, r4
   15ca0:	add	sp, sp, #36	; 0x24
   15ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca8:	mov	r4, r5
   15cac:	b	15c9c <_start@@Base+0x35a8>
   15cb0:	cmp	r8, #0
   15cb4:	bne	15c24 <_start@@Base+0x3530>
   15cb8:	ldr	r1, [sp, #16]
   15cbc:	ldrd	r2, [sp, #24]
   15cc0:	cmp	r1, #0
   15cc4:	beq	15c4c <_start@@Base+0x3558>
   15cc8:	cmp	r3, #-2147483648	; 0x80000000
   15ccc:	cmpeq	r2, #0
   15cd0:	movhi	r3, #8
   15cd4:	bhi	15c5c <_start@@Base+0x3568>
   15cd8:	rsbs	r2, r2, #0
   15cdc:	rsc	r3, r3, #0
   15ce0:	mov	sl, r2
   15ce4:	mov	fp, r3
   15ce8:	b	15c74 <_start@@Base+0x3580>
   15cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cf0:	mov	r6, r2
   15cf4:	mov	r5, r0
   15cf8:	mov	r4, r1
   15cfc:	mov	r1, #36	; 0x24
   15d00:	vpush	{d8}
   15d04:	sub	sp, sp, #340	; 0x154
   15d08:	ldr	r0, [r0]
   15d0c:	str	r3, [sp, #92]	; 0x5c
   15d10:	mov	r3, #0
   15d14:	ldr	r2, [sp, #92]	; 0x5c
   15d18:	str	r3, [r2]
   15d1c:	bl	1d108 <flatcc_builder_start_table@@Base>
   15d20:	cmp	r0, #0
   15d24:	bne	160f4 <_start@@Base+0x3a00>
   15d28:	add	r3, sp, #316	; 0x13c
   15d2c:	mov	r2, r6
   15d30:	mov	r1, r4
   15d34:	mov	r0, r5
   15d38:	str	r3, [sp]
   15d3c:	mov	r3, #1
   15d40:	bl	211cc <flatcc_json_parser_prepare_unions@@Base>
   15d44:	cmp	r6, r0
   15d48:	beq	160f4 <_start@@Base+0x3a00>
   15d4c:	add	r3, sp, #308	; 0x134
   15d50:	mov	r2, r6
   15d54:	mov	r1, r4
   15d58:	mov	r0, r5
   15d5c:	bl	14344 <_start@@Base+0x1c50>
   15d60:	ldr	r3, [sp, #308]	; 0x134
   15d64:	mov	r4, r0
   15d68:	cmp	r3, #0
   15d6c:	bne	15dac <_start@@Base+0x36b8>
   15d70:	ldr	r3, [r5, #24]
   15d74:	cmp	r3, #0
   15d78:	bne	160f4 <_start@@Base+0x3a00>
   15d7c:	mov	r1, #3
   15d80:	ldr	r0, [r5]
   15d84:	bl	1d5c0 <flatcc_builder_check_required_field@@Base>
   15d88:	cmp	r0, #0
   15d8c:	bne	192e0 <_start@@Base+0x6bec>
   15d90:	mov	r1, r4
   15d94:	mov	r3, #29
   15d98:	mov	r2, r6
   15d9c:	mov	r0, r5
   15da0:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   15da4:	mov	r4, r0
   15da8:	b	160f4 <_start@@Base+0x3a00>
   15dac:	mov	r2, r6
   15db0:	mov	r1, r4
   15db4:	mov	r0, r5
   15db8:	bl	1369c <_start@@Base+0xfa8>
   15dbc:	mov	r1, r6
   15dc0:	mov	r7, r0
   15dc4:	bl	127e8 <_start@@Base+0xf4>
   15dc8:	add	r3, pc, #920	; 0x398
   15dcc:	ldrd	r2, [r3]
   15dd0:	mov	sl, r0
   15dd4:	mov	fp, r1
   15dd8:	cmp	r1, r3
   15ddc:	cmpeq	r0, r2
   15de0:	bhi	16fa0 <_start@@Base+0x48ac>
   15de4:	add	r3, pc, #900	; 0x384
   15de8:	ldrd	r2, [r3]
   15dec:	cmp	r1, r3
   15df0:	cmpeq	r0, r2
   15df4:	bhi	16590 <_start@@Base+0x3e9c>
   15df8:	add	r3, pc, #888	; 0x378
   15dfc:	ldrd	r2, [r3]
   15e00:	cmp	r1, r3
   15e04:	cmpeq	r0, r2
   15e08:	bhi	15fc0 <_start@@Base+0x38cc>
   15e0c:	and	r3, r0, #-16777216	; 0xff000000
   15e10:	str	r3, [sp, #56]	; 0x38
   15e14:	str	r1, [sp, #60]	; 0x3c
   15e18:	add	r3, pc, #864	; 0x360
   15e1c:	ldrd	r2, [r3]
   15e20:	ldrd	r0, [sp, #56]	; 0x38
   15e24:	cmp	r1, r3
   15e28:	cmpeq	r0, r2
   15e2c:	bne	15ebc <_start@@Base+0x37c8>
   15e30:	mov	r1, r7
   15e34:	mov	r3, #5
   15e38:	mov	r2, r6
   15e3c:	mov	r0, r5
   15e40:	bl	14498 <_start@@Base+0x1da4>
   15e44:	cmp	r7, r0
   15e48:	mov	r1, r0
   15e4c:	beq	15ea4 <_start@@Base+0x37b0>
   15e50:	add	r3, sp, #312	; 0x138
   15e54:	mov	r2, r6
   15e58:	mov	r0, r5
   15e5c:	bl	15cec <_start@@Base+0x35f8>
   15e60:	ldr	r3, [sp, #312]	; 0x138
   15e64:	mov	r4, r0
   15e68:	cmp	r3, #0
   15e6c:	beq	160f4 <_start@@Base+0x3a00>
   15e70:	mov	r1, #12
   15e74:	ldr	r0, [r5]
   15e78:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   15e7c:	cmp	r0, #0
   15e80:	beq	160f4 <_start@@Base+0x3a00>
   15e84:	ldr	r3, [sp, #312]	; 0x138
   15e88:	str	r3, [r0]
   15e8c:	add	r3, sp, #308	; 0x134
   15e90:	mov	r2, r6
   15e94:	mov	r1, r4
   15e98:	mov	r0, r5
   15e9c:	bl	13518 <_start@@Base+0xe24>
   15ea0:	b	15d60 <_start@@Base+0x366c>
   15ea4:	mov	r2, r6
   15ea8:	mov	r1, r7
   15eac:	mov	r0, r5
   15eb0:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   15eb4:	mov	r4, r0
   15eb8:	b	15e8c <_start@@Base+0x3798>
   15ebc:	add	r3, pc, #708	; 0x2c4
   15ec0:	ldrd	r2, [r3]
   15ec4:	ldrd	r0, [sp, #56]	; 0x38
   15ec8:	cmp	r1, r3
   15ecc:	cmpeq	r0, r2
   15ed0:	bne	15fa8 <_start@@Base+0x38b4>
   15ed4:	mov	r3, #5
   15ed8:	mov	r2, r6
   15edc:	mov	r1, r7
   15ee0:	mov	r0, r5
   15ee4:	bl	14498 <_start@@Base+0x1da4>
   15ee8:	cmp	r7, r0
   15eec:	mov	r8, r0
   15ef0:	beq	15f90 <_start@@Base+0x389c>
   15ef4:	mov	r3, #0
   15ef8:	add	r7, sp, #328	; 0x148
   15efc:	mov	r1, r0
   15f00:	mov	r2, r6
   15f04:	mov	r0, r5
   15f08:	strb	r3, [sp, #328]	; 0x148
   15f0c:	mov	r3, r7
   15f10:	bl	14a0c <_start@@Base+0x2318>
   15f14:	cmp	r8, r0
   15f18:	mov	r4, r0
   15f1c:	bne	15f48 <_start@@Base+0x3854>
   15f20:	mov	r1, r0
   15f24:	ldr	r3, [pc, #620]	; 16198 <_start@@Base+0x3aa4>
   15f28:	mov	r2, r6
   15f2c:	mov	r0, r5
   15f30:	str	r7, [sp]
   15f34:	bl	15888 <_start@@Base+0x3194>
   15f38:	cmp	r6, r0
   15f3c:	cmpne	r4, r0
   15f40:	mov	r4, r0
   15f44:	beq	160f4 <_start@@Base+0x3a00>
   15f48:	add	r3, sp, #328	; 0x148
   15f4c:	ldrsb	r3, [r3]
   15f50:	cmp	r3, #8
   15f54:	bne	15f64 <_start@@Base+0x3870>
   15f58:	ldr	r3, [r5, #8]
   15f5c:	tst	r3, #2
   15f60:	beq	15e8c <_start@@Base+0x3798>
   15f64:	mov	r3, #1
   15f68:	mov	r1, #6
   15f6c:	ldr	r0, [r5]
   15f70:	mov	r2, r3
   15f74:	bl	1e08c <flatcc_builder_table_add@@Base>
   15f78:	cmp	r0, #0
   15f7c:	beq	160f4 <_start@@Base+0x3a00>
   15f80:	add	r3, sp, #328	; 0x148
   15f84:	ldrsb	r3, [r3]
   15f88:	strb	r3, [r0]
   15f8c:	b	15e8c <_start@@Base+0x3798>
   15f90:	mov	r2, r6
   15f94:	mov	r1, r7
   15f98:	mov	r0, r5
   15f9c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   15fa0:	mov	r4, r0
   15fa4:	b	15e8c <_start@@Base+0x3798>
   15fa8:	mov	r2, r6
   15fac:	mov	r1, r7
   15fb0:	mov	r0, r5
   15fb4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   15fb8:	mov	r4, r0
   15fbc:	b	15e8c <_start@@Base+0x3798>
   15fc0:	ldr	r3, [pc, #468]	; 1619c <_start@@Base+0x3aa8>
   15fc4:	mvn	r2, #0
   15fc8:	mov	r4, #0
   15fcc:	cmp	r1, r3
   15fd0:	cmpeq	r0, r2
   15fd4:	bhi	161a4 <_start@@Base+0x3ab0>
   15fd8:	str	r4, [sp, #96]	; 0x60
   15fdc:	str	r1, [sp, #100]	; 0x64
   15fe0:	add	r3, pc, #424	; 0x1a8
   15fe4:	ldrd	r2, [r3]
   15fe8:	ldrd	r0, [sp, #96]	; 0x60
   15fec:	cmp	r1, r3
   15ff0:	cmpeq	r0, r2
   15ff4:	bne	1614c <_start@@Base+0x3a58>
   15ff8:	mov	r3, #4
   15ffc:	mov	r2, r6
   16000:	mov	r1, r7
   16004:	mov	r0, r5
   16008:	bl	14498 <_start@@Base+0x1da4>
   1600c:	cmp	r7, r0
   16010:	mov	r4, r0
   16014:	beq	16134 <_start@@Base+0x3a40>
   16018:	mov	r2, #1
   1601c:	mvn	r3, #0
   16020:	ldr	r0, [r5]
   16024:	mov	r1, r2
   16028:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   1602c:	subs	r7, r0, #0
   16030:	bne	160f4 <_start@@Base+0x3a00>
   16034:	ldr	sl, [pc, #356]	; 161a0 <_start@@Base+0x3aac>
   16038:	mov	r1, r4
   1603c:	add	r3, sp, #308	; 0x134
   16040:	mov	r2, r6
   16044:	mov	r0, r5
   16048:	bl	1453c <_start@@Base+0x1e48>
   1604c:	mov	r4, r0
   16050:	ldr	r3, [sp, #308]	; 0x134
   16054:	ldr	r0, [r5]
   16058:	cmp	r3, #0
   1605c:	bne	16090 <_start@@Base+0x399c>
   16060:	bl	1d94c <flatcc_builder_end_vector@@Base>
   16064:	cmp	r0, #0
   16068:	str	r0, [sp, #312]	; 0x138
   1606c:	beq	160f4 <_start@@Base+0x3a00>
   16070:	mov	r1, #30
   16074:	ldr	r0, [r5]
   16078:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1607c:	cmp	r0, #0
   16080:	beq	160f4 <_start@@Base+0x3a00>
   16084:	ldr	r3, [sp, #312]	; 0x138
   16088:	str	r3, [r0]
   1608c:	b	15e8c <_start@@Base+0x3798>
   16090:	mov	r1, #1
   16094:	strb	r7, [sp, #328]	; 0x148
   16098:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   1609c:	subs	fp, r0, #0
   160a0:	beq	160f4 <_start@@Base+0x3a00>
   160a4:	add	r9, sp, #328	; 0x148
   160a8:	mov	r1, r4
   160ac:	mov	r3, r9
   160b0:	mov	r2, r6
   160b4:	mov	r0, r5
   160b8:	bl	14780 <_start@@Base+0x208c>
   160bc:	cmp	r4, r0
   160c0:	mov	r8, r0
   160c4:	movne	r4, r0
   160c8:	bne	16110 <_start@@Base+0x3a1c>
   160cc:	mov	r1, r4
   160d0:	mov	r3, sl
   160d4:	str	r9, [sp]
   160d8:	mov	r2, r6
   160dc:	mov	r0, r5
   160e0:	bl	14e68 <_start@@Base+0x2774>
   160e4:	cmp	r6, r0
   160e8:	cmpne	r8, r0
   160ec:	mov	r4, r0
   160f0:	bne	16110 <_start@@Base+0x3a1c>
   160f4:	mov	r1, r4
   160f8:	mov	r3, #33	; 0x21
   160fc:	mov	r2, r6
   16100:	mov	r0, r5
   16104:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   16108:	mov	r4, r0
   1610c:	b	19310 <_start@@Base+0x6c1c>
   16110:	ldrb	r3, [sp, #328]	; 0x148
   16114:	mov	r1, r4
   16118:	mov	r2, r6
   1611c:	mov	r0, r5
   16120:	strb	r3, [fp]
   16124:	add	r3, sp, #308	; 0x134
   16128:	bl	13460 <_start@@Base+0xd6c>
   1612c:	mov	r4, r0
   16130:	b	16050 <_start@@Base+0x395c>
   16134:	mov	r1, r0
   16138:	mov	r2, r6
   1613c:	mov	r0, r5
   16140:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16144:	mov	r4, r0
   16148:	b	15e8c <_start@@Base+0x3798>
   1614c:	mov	r2, r6
   16150:	mov	r1, r7
   16154:	mov	r0, r5
   16158:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1615c:	mov	r4, r0
   16160:	b	15e8c <_start@@Base+0x3798>
   16164:	nop	{0}
   16168:	cmnvs	r2, r0, ror #4
   1616c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16170:			; <UNDEFINED> instruction: 0xffffffff
   16174:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   16178:			; <UNDEFINED> instruction: 0xffffffff
   1617c:			; <UNDEFINED> instruction: 0x666c6577
   16180:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   16184:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   16188:	andvc	r0, r0, #0
   1618c:	cmnvs	pc, #28416	; 0x6f00
   16190:	andeq	r0, r0, r0
   16194:			; <UNDEFINED> instruction: 0x666c6578
   16198:	strheq	r4, [r3], -r4	; <UNPREDICTABLE>
   1619c:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   161a0:	andeq	r4, r3, r4, asr #1
   161a4:	add	r3, pc, #956	; 0x3bc
   161a8:	ldrd	r2, [r3]
   161ac:	cmp	r1, r3
   161b0:	cmpeq	r0, r2
   161b4:	bhi	162c8 <_start@@Base+0x3bd4>
   161b8:	lsr	r3, r1, #16
   161bc:	str	r4, [sp, #16]
   161c0:	mov	r2, #0
   161c4:	lsl	r3, r3, #16
   161c8:	str	r3, [sp, #20]
   161cc:	ldr	r3, [pc, #940]	; 16580 <_start@@Base+0x3e8c>
   161d0:	ldrd	r0, [sp, #16]
   161d4:	cmp	r1, r3
   161d8:	cmpeq	r0, r2
   161dc:	bne	162b0 <_start@@Base+0x3bbc>
   161e0:	mov	r3, #2
   161e4:	mov	r2, r6
   161e8:	mov	r1, r7
   161ec:	mov	r0, r5
   161f0:	bl	14498 <_start@@Base+0x1da4>
   161f4:	cmp	r7, r0
   161f8:	mov	r8, r0
   161fc:	beq	16298 <_start@@Base+0x3ba4>
   16200:	add	r3, sp, #328	; 0x148
   16204:	mov	r1, r0
   16208:	mov	r2, r6
   1620c:	mov	r0, r5
   16210:	mov	r7, r3
   16214:	strh	r4, [r3]
   16218:	bl	14960 <_start@@Base+0x226c>
   1621c:	cmp	r8, r0
   16220:	mov	r4, r0
   16224:	bne	16250 <_start@@Base+0x3b5c>
   16228:	mov	r1, r0
   1622c:	ldr	r3, [pc, #848]	; 16584 <_start@@Base+0x3e90>
   16230:	mov	r2, r6
   16234:	mov	r0, r5
   16238:	str	r7, [sp]
   1623c:	bl	15730 <_start@@Base+0x303c>
   16240:	cmp	r6, r0
   16244:	cmpne	r4, r0
   16248:	mov	r4, r0
   1624c:	beq	160f4 <_start@@Base+0x3a00>
   16250:	add	r3, sp, #328	; 0x148
   16254:	ldrsh	r3, [r3]
   16258:	cmp	r3, #100	; 0x64
   1625c:	bne	1626c <_start@@Base+0x3b78>
   16260:	ldr	r3, [r5, #8]
   16264:	tst	r3, #2
   16268:	beq	15e8c <_start@@Base+0x3798>
   1626c:	mov	r3, #2
   16270:	ldr	r0, [r5]
   16274:	mov	r2, r3
   16278:	mov	r1, r3
   1627c:	bl	1e08c <flatcc_builder_table_add@@Base>
   16280:	cmp	r0, #0
   16284:	beq	160f4 <_start@@Base+0x3a00>
   16288:	add	r3, sp, #328	; 0x148
   1628c:	ldrsh	r3, [r3]
   16290:	strh	r3, [r0]
   16294:	b	15e8c <_start@@Base+0x3798>
   16298:	mov	r2, r6
   1629c:	mov	r1, r7
   162a0:	mov	r0, r5
   162a4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   162a8:	mov	r4, r0
   162ac:	b	15e8c <_start@@Base+0x3798>
   162b0:	mov	r2, r6
   162b4:	mov	r1, r7
   162b8:	mov	r0, r5
   162bc:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   162c0:	mov	r4, r0
   162c4:	b	15e8c <_start@@Base+0x3798>
   162c8:	add	r3, pc, #672	; 0x2a0
   162cc:	ldrd	r2, [r3]
   162d0:	cmp	r1, r3
   162d4:	cmpeq	r0, r2
   162d8:	bne	1645c <_start@@Base+0x3d68>
   162dc:	add	r7, r7, #8
   162e0:	mov	r1, r6
   162e4:	mov	r0, r7
   162e8:	bl	127e8 <_start@@Base+0xf4>
   162ec:	and	r3, r1, #-16777216	; 0xff000000
   162f0:	str	r4, [sp, #104]	; 0x68
   162f4:	str	r3, [sp, #108]	; 0x6c
   162f8:	ldrd	r2, [sp, #104]	; 0x68
   162fc:	cmp	r3, #2030043136	; 0x79000000
   16300:	cmpeq	r2, #0
   16304:	bne	16444 <_start@@Base+0x3d50>
   16308:	mov	r3, #1
   1630c:	mov	r2, r6
   16310:	mov	r1, r7
   16314:	mov	r0, r5
   16318:	bl	14498 <_start@@Base+0x1da4>
   1631c:	cmp	r7, r0
   16320:	mov	r4, r0
   16324:	beq	1642c <_start@@Base+0x3d38>
   16328:	mov	r2, #1
   1632c:	mvn	r3, #0
   16330:	ldr	r0, [r5]
   16334:	mov	r1, r2
   16338:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   1633c:	cmp	r0, #0
   16340:	bne	160f4 <_start@@Base+0x3a00>
   16344:	ldr	sl, [pc, #572]	; 16588 <_start@@Base+0x3e94>
   16348:	mov	r1, r4
   1634c:	add	r3, sp, #308	; 0x134
   16350:	mov	r2, r6
   16354:	mov	r0, r5
   16358:	bl	1453c <_start@@Base+0x1e48>
   1635c:	mov	r4, r0
   16360:	mov	r9, #0
   16364:	ldr	r3, [sp, #308]	; 0x134
   16368:	ldr	r0, [r5]
   1636c:	cmp	r3, #0
   16370:	bne	163a4 <_start@@Base+0x3cb0>
   16374:	bl	1d94c <flatcc_builder_end_vector@@Base>
   16378:	cmp	r0, #0
   1637c:	str	r0, [sp, #312]	; 0x138
   16380:	beq	160f4 <_start@@Base+0x3a00>
   16384:	mov	r1, #5
   16388:	ldr	r0, [r5]
   1638c:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   16390:	cmp	r0, #0
   16394:	beq	160f4 <_start@@Base+0x3a00>
   16398:	ldr	r3, [sp, #312]	; 0x138
   1639c:	str	r3, [r0]
   163a0:	b	15e8c <_start@@Base+0x3798>
   163a4:	mov	r1, #1
   163a8:	strb	r9, [sp, #328]	; 0x148
   163ac:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   163b0:	subs	fp, r0, #0
   163b4:	beq	160f4 <_start@@Base+0x3a00>
   163b8:	add	r8, sp, #328	; 0x148
   163bc:	mov	r1, r4
   163c0:	mov	r3, r8
   163c4:	mov	r2, r6
   163c8:	mov	r0, r5
   163cc:	bl	14780 <_start@@Base+0x208c>
   163d0:	cmp	r4, r0
   163d4:	mov	r7, r0
   163d8:	movne	r4, r0
   163dc:	bne	16408 <_start@@Base+0x3d14>
   163e0:	mov	r1, r4
   163e4:	mov	r3, sl
   163e8:	str	r8, [sp]
   163ec:	mov	r2, r6
   163f0:	mov	r0, r5
   163f4:	bl	14e68 <_start@@Base+0x2774>
   163f8:	cmp	r6, r0
   163fc:	cmpne	r7, r0
   16400:	mov	r4, r0
   16404:	beq	160f4 <_start@@Base+0x3a00>
   16408:	ldrb	r3, [sp, #328]	; 0x148
   1640c:	mov	r1, r4
   16410:	mov	r2, r6
   16414:	mov	r0, r5
   16418:	strb	r3, [fp]
   1641c:	add	r3, sp, #308	; 0x134
   16420:	bl	13460 <_start@@Base+0xd6c>
   16424:	mov	r4, r0
   16428:	b	16364 <_start@@Base+0x3c70>
   1642c:	mov	r1, r0
   16430:	mov	r2, r6
   16434:	mov	r0, r5
   16438:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1643c:	mov	r4, r0
   16440:	b	15e8c <_start@@Base+0x3798>
   16444:	mov	r2, r6
   16448:	mov	r1, r7
   1644c:	mov	r0, r5
   16450:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16454:	mov	r4, r0
   16458:	b	15e8c <_start@@Base+0x3798>
   1645c:	str	r4, [sp, #112]	; 0x70
   16460:	str	r1, [sp, #116]	; 0x74
   16464:	add	r3, pc, #268	; 0x10c
   16468:	ldrd	r2, [r3]
   1646c:	ldrd	r0, [sp, #112]	; 0x70
   16470:	cmp	r1, r3
   16474:	cmpeq	r0, r2
   16478:	bne	1654c <_start@@Base+0x3e58>
   1647c:	mov	r3, #4
   16480:	mov	r2, r6
   16484:	mov	r1, r7
   16488:	mov	r0, r5
   1648c:	bl	14498 <_start@@Base+0x1da4>
   16490:	cmp	r7, r0
   16494:	mov	r8, r0
   16498:	beq	16534 <_start@@Base+0x3e40>
   1649c:	add	r3, sp, #328	; 0x148
   164a0:	mov	r1, r0
   164a4:	mov	r2, r6
   164a8:	mov	r0, r5
   164ac:	mov	r7, r3
   164b0:	strh	r4, [r3]
   164b4:	bl	14960 <_start@@Base+0x226c>
   164b8:	cmp	r8, r0
   164bc:	mov	r4, r0
   164c0:	bne	164ec <_start@@Base+0x3df8>
   164c4:	mov	r1, r0
   164c8:	ldr	r3, [pc, #188]	; 1658c <_start@@Base+0x3e98>
   164cc:	mov	r2, r6
   164d0:	mov	r0, r5
   164d4:	str	r7, [sp]
   164d8:	bl	15730 <_start@@Base+0x303c>
   164dc:	cmp	r6, r0
   164e0:	cmpne	r4, r0
   164e4:	mov	r4, r0
   164e8:	beq	160f4 <_start@@Base+0x3a00>
   164ec:	add	r3, sp, #328	; 0x148
   164f0:	ldrsh	r3, [r3]
   164f4:	cmp	r3, #150	; 0x96
   164f8:	bne	16508 <_start@@Base+0x3e14>
   164fc:	ldr	r3, [r5, #8]
   16500:	tst	r3, #2
   16504:	beq	15e8c <_start@@Base+0x3798>
   16508:	mov	r3, #2
   1650c:	mov	r1, #1
   16510:	ldr	r0, [r5]
   16514:	mov	r2, r3
   16518:	bl	1e08c <flatcc_builder_table_add@@Base>
   1651c:	cmp	r0, #0
   16520:	beq	160f4 <_start@@Base+0x3a00>
   16524:	add	r3, sp, #328	; 0x148
   16528:	ldrsh	r3, [r3]
   1652c:	strh	r3, [r0]
   16530:	b	15e8c <_start@@Base+0x3798>
   16534:	mov	r2, r6
   16538:	mov	r1, r7
   1653c:	mov	r0, r5
   16540:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16544:	mov	r4, r0
   16548:	b	15e8c <_start@@Base+0x3798>
   1654c:	mov	r2, r6
   16550:	mov	r1, r7
   16554:	mov	r0, r5
   16558:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1655c:	mov	r4, r0
   16560:	b	15e8c <_start@@Base+0x3798>
   16564:	nop	{0}
   16568:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1656c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   16570:	mrcvs	15, 3, r6, cr4, cr2, {3}
   16574:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   16578:	andeq	r0, r0, r0
   1657c:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   16580:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   16584:	ldrdeq	r4, [r3], -r0
   16588:	ldrdeq	r4, [r3], -ip
   1658c:	andeq	r4, r3, r8, ror #1
   16590:	add	r3, pc, #880	; 0x370
   16594:	ldrd	r2, [r3]
   16598:	cmp	r1, r3
   1659c:	cmpeq	r0, r2
   165a0:	bhi	16c8c <_start@@Base+0x4598>
   165a4:	add	r3, pc, #868	; 0x364
   165a8:	ldrd	r2, [r3]
   165ac:	cmp	r1, r3
   165b0:	cmpeq	r0, r2
   165b4:	bhi	1666c <_start@@Base+0x3f78>
   165b8:	mov	r3, #0
   165bc:	str	r3, [sp, #120]	; 0x78
   165c0:	str	r1, [sp, #124]	; 0x7c
   165c4:	add	r3, pc, #844	; 0x34c
   165c8:	ldrd	r2, [r3]
   165cc:	ldrd	r0, [sp, #120]	; 0x78
   165d0:	cmp	r1, r3
   165d4:	cmpeq	r0, r2
   165d8:	bne	16654 <_start@@Base+0x3f60>
   165dc:	mov	r1, r7
   165e0:	mov	r3, #4
   165e4:	mov	r2, r6
   165e8:	mov	r0, r5
   165ec:	bl	14498 <_start@@Base+0x1da4>
   165f0:	cmp	r7, r0
   165f4:	mov	r1, r0
   165f8:	beq	1663c <_start@@Base+0x3f48>
   165fc:	add	r3, sp, #312	; 0x138
   16600:	mov	r2, r6
   16604:	mov	r0, r5
   16608:	bl	21098 <flatcc_json_parser_build_string@@Base>
   1660c:	ldr	r3, [sp, #312]	; 0x138
   16610:	mov	r4, r0
   16614:	cmp	r3, #0
   16618:	beq	160f4 <_start@@Base+0x3a00>
   1661c:	mov	r1, #3
   16620:	ldr	r0, [r5]
   16624:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   16628:	cmp	r0, #0
   1662c:	beq	160f4 <_start@@Base+0x3a00>
   16630:	ldr	r3, [sp, #312]	; 0x138
   16634:	str	r3, [r0]
   16638:	b	15e8c <_start@@Base+0x3798>
   1663c:	mov	r2, r6
   16640:	mov	r1, r7
   16644:	mov	r0, r5
   16648:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1664c:	mov	r4, r0
   16650:	b	15e8c <_start@@Base+0x3798>
   16654:	mov	r2, r6
   16658:	mov	r1, r7
   1665c:	mov	r0, r5
   16660:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16664:	mov	r4, r0
   16668:	b	15e8c <_start@@Base+0x3798>
   1666c:	add	r3, pc, #684	; 0x2ac
   16670:	ldrd	r2, [r3]
   16674:	cmp	r1, r3
   16678:	cmpeq	r0, r2
   1667c:	bne	16780 <_start@@Base+0x408c>
   16680:	add	r4, r7, #8
   16684:	mov	r1, r6
   16688:	mov	r0, r4
   1668c:	bl	127e8 <_start@@Base+0xf4>
   16690:	add	r3, pc, #656	; 0x290
   16694:	ldrd	r2, [r3]
   16698:	cmp	r1, r3
   1669c:	cmpeq	r0, r2
   166a0:	bne	16768 <_start@@Base+0x4074>
   166a4:	add	r7, r7, #16
   166a8:	mov	r1, r6
   166ac:	mov	r0, r7
   166b0:	bl	127e8 <_start@@Base+0xf4>
   166b4:	and	r3, r0, #-16777216	; 0xff000000
   166b8:	str	r3, [sp, #128]	; 0x80
   166bc:	str	r1, [sp, #132]	; 0x84
   166c0:	add	r3, pc, #616	; 0x268
   166c4:	ldrd	r2, [r3]
   166c8:	ldrd	r0, [sp, #128]	; 0x80
   166cc:	cmp	r1, r3
   166d0:	cmpeq	r0, r2
   166d4:	bne	16750 <_start@@Base+0x405c>
   166d8:	mov	r1, r7
   166dc:	mov	r3, #5
   166e0:	mov	r2, r6
   166e4:	mov	r0, r5
   166e8:	bl	14498 <_start@@Base+0x1da4>
   166ec:	cmp	r7, r0
   166f0:	mov	r1, r0
   166f4:	beq	16738 <_start@@Base+0x4044>
   166f8:	add	r3, sp, #312	; 0x138
   166fc:	mov	r2, r6
   16700:	mov	r0, r5
   16704:	bl	143cc <_start@@Base+0x1cd8>
   16708:	ldr	r3, [sp, #312]	; 0x138
   1670c:	mov	r4, r0
   16710:	cmp	r3, #0
   16714:	beq	160f4 <_start@@Base+0x3a00>
   16718:	mov	r1, #34	; 0x22
   1671c:	ldr	r0, [r5]
   16720:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   16724:	cmp	r0, #0
   16728:	beq	160f4 <_start@@Base+0x3a00>
   1672c:	ldr	r3, [sp, #312]	; 0x138
   16730:	str	r3, [r0]
   16734:	b	15e8c <_start@@Base+0x3798>
   16738:	mov	r2, r6
   1673c:	mov	r1, r7
   16740:	mov	r0, r5
   16744:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16748:	mov	r4, r0
   1674c:	b	15e8c <_start@@Base+0x3798>
   16750:	mov	r2, r6
   16754:	mov	r1, r7
   16758:	mov	r0, r5
   1675c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16760:	mov	r4, r0
   16764:	b	15e8c <_start@@Base+0x3798>
   16768:	mov	r1, r4
   1676c:	mov	r2, r6
   16770:	mov	r0, r5
   16774:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16778:	mov	r4, r0
   1677c:	b	15e8c <_start@@Base+0x3798>
   16780:	bic	r3, r1, #255	; 0xff
   16784:	mov	r8, #0
   16788:	str	r8, [sp, #136]	; 0x88
   1678c:	str	r3, [sp, #140]	; 0x8c
   16790:	add	r3, pc, #416	; 0x1a0
   16794:	ldrd	r2, [r3]
   16798:	ldrd	r0, [sp, #136]	; 0x88
   1679c:	cmp	r1, r3
   167a0:	cmpeq	r0, r2
   167a4:	bne	16c74 <_start@@Base+0x4580>
   167a8:	mov	r3, #3
   167ac:	mov	r2, r6
   167b0:	mov	r1, r7
   167b4:	mov	r0, r5
   167b8:	bl	14498 <_start@@Base+0x1da4>
   167bc:	cmp	r7, r0
   167c0:	mov	r4, r0
   167c4:	beq	16c5c <_start@@Base+0x4568>
   167c8:	mov	r3, #16
   167cc:	mov	r2, #32
   167d0:	ldr	r0, [r5]
   167d4:	mov	r1, r8
   167d8:	bl	1e08c <flatcc_builder_table_add@@Base>
   167dc:	subs	r7, r0, #0
   167e0:	beq	160f4 <_start@@Base+0x3a00>
   167e4:	vldr	d8, [pc, #340]	; 16940 <_start@@Base+0x424c>
   167e8:	mov	r1, r4
   167ec:	add	r3, sp, #324	; 0x144
   167f0:	mov	r2, r6
   167f4:	mov	r0, r5
   167f8:	add	r9, pc, #328	; 0x148
   167fc:	ldrd	r8, [r9]
   16800:	bl	14344 <_start@@Base+0x1c50>
   16804:	mov	r4, r0
   16808:	ldr	r3, [sp, #324]	; 0x144
   1680c:	cmp	r3, #0
   16810:	beq	15e8c <_start@@Base+0x3798>
   16814:	mov	r2, r6
   16818:	mov	r1, r4
   1681c:	mov	r0, r5
   16820:	bl	1369c <_start@@Base+0xfa8>
   16824:	mov	r1, r6
   16828:	mov	r4, r0
   1682c:	bl	127e8 <_start@@Base+0xf4>
   16830:	add	r3, pc, #280	; 0x118
   16834:	ldrd	r2, [r3]
   16838:	cmp	r1, r3
   1683c:	cmpeq	r0, r2
   16840:	bhi	169f8 <_start@@Base+0x4304>
   16844:	and	r3, r0, #-16777216	; 0xff000000
   16848:	str	r3, [sp, #72]	; 0x48
   1684c:	str	r1, [sp, #76]	; 0x4c
   16850:	add	r1, pc, #256	; 0x100
   16854:	ldrd	r0, [r1]
   16858:	ldrd	r2, [sp, #72]	; 0x48
   1685c:	cmp	r3, r1
   16860:	cmpeq	r2, r0
   16864:	bne	16968 <_start@@Base+0x4274>
   16868:	mov	r3, #5
   1686c:	mov	r2, r6
   16870:	mov	r1, r4
   16874:	mov	r0, r5
   16878:	bl	14498 <_start@@Base+0x1da4>
   1687c:	cmp	r4, r0
   16880:	mov	sl, r0
   16884:	beq	16c2c <_start@@Base+0x4538>
   16888:	mov	r3, #0
   1688c:	add	fp, sp, #328	; 0x148
   16890:	mov	r1, r0
   16894:	mov	r2, r6
   16898:	mov	r0, r5
   1689c:	strb	r3, [sp, #328]	; 0x148
   168a0:	mov	r3, fp
   168a4:	bl	14a0c <_start@@Base+0x2318>
   168a8:	cmp	sl, r0
   168ac:	mov	r4, r0
   168b0:	bne	168dc <_start@@Base+0x41e8>
   168b4:	mov	r1, r0
   168b8:	ldr	r3, [pc, #160]	; 16960 <_start@@Base+0x426c>
   168bc:	mov	r2, r6
   168c0:	mov	r0, r5
   168c4:	str	fp, [sp]
   168c8:	bl	15888 <_start@@Base+0x3194>
   168cc:	cmp	r6, r0
   168d0:	cmpne	r4, r0
   168d4:	beq	16c40 <_start@@Base+0x454c>
   168d8:	mov	r4, r0
   168dc:	add	r3, sp, #328	; 0x148
   168e0:	ldrsb	r3, [r3]
   168e4:	strb	r3, [r7, #24]
   168e8:	mov	r1, r4
   168ec:	add	r3, sp, #324	; 0x144
   168f0:	mov	r2, r6
   168f4:	mov	r0, r5
   168f8:	bl	13518 <_start@@Base+0xe24>
   168fc:	mov	r4, r0
   16900:	b	16808 <_start@@Base+0x4114>
   16904:	nop	{0}
   16908:			; <UNDEFINED> instruction: 0xffffffff
   1690c:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   16910:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   16914:	rsbvc	r7, r1, r5, ror #4
   16918:	andeq	r0, r0, r0
   1691c:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   16920:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   16924:	rsbvc	r7, r1, r5, ror #4
   16928:	rsbvc	r6, r1, r5, ror #6
   1692c:	smcvs	54867	; 0xd653
   16930:	strvc	r0, [r0], #-0
   16934:	svcpl	0x00746573
   16938:	andeq	r0, r0, r0
   1693c:	rsbvc	r7, pc, r0, lsl #6
	...
   16948:	mrscc	r0, (UNDEF: 0)
   1694c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16950:	rscscc	pc, pc, #1020	; 0x3fc
   16954:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16958:	andcc	r0, r0, #0
   1695c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16960:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   16964:	andeq	r4, r3, r4, lsl #2
   16968:	ldrd	r2, [sp, #72]	; 0x48
   1696c:	cmp	r3, r9
   16970:	cmpeq	r2, r8
   16974:	bne	16c2c <_start@@Base+0x4538>
   16978:	mov	r3, #5
   1697c:	mov	r2, r6
   16980:	mov	r1, r4
   16984:	mov	r0, r5
   16988:	bl	14498 <_start@@Base+0x1da4>
   1698c:	cmp	r4, r0
   16990:	mov	sl, r0
   16994:	beq	16c2c <_start@@Base+0x4538>
   16998:	add	fp, sp, #328	; 0x148
   1699c:	mov	r1, r0
   169a0:	vstr	d8, [sp, #328]	; 0x148
   169a4:	mov	r3, fp
   169a8:	mov	r2, r6
   169ac:	mov	r0, r5
   169b0:	bl	204dc <flatcc_json_parser_double@@Base>
   169b4:	cmp	sl, r0
   169b8:	mov	r4, r0
   169bc:	bne	169e8 <_start@@Base+0x42f4>
   169c0:	mov	r1, r0
   169c4:	ldr	r3, [pc, #-104]	; 16964 <_start@@Base+0x4270>
   169c8:	mov	r2, r6
   169cc:	mov	r0, r5
   169d0:	str	fp, [sp]
   169d4:	bl	13954 <_start@@Base+0x1260>
   169d8:	cmp	r6, r0
   169dc:	cmpne	r4, r0
   169e0:	beq	16c40 <_start@@Base+0x454c>
   169e4:	mov	r4, r0
   169e8:	add	r3, sp, #328	; 0x148
   169ec:	ldrd	r2, [r3]
   169f0:	strd	r2, [r7, #16]
   169f4:	b	168e8 <_start@@Base+0x41f4>
   169f8:	mvn	r3, #-2013265920	; 0x88000000
   169fc:	mvn	r2, #0
   16a00:	cmp	r1, r3
   16a04:	cmpeq	r0, r2
   16a08:	bhi	16a68 <_start@@Base+0x4374>
   16a0c:	and	r3, r0, #-16777216	; 0xff000000
   16a10:	str	r3, [sp, #144]	; 0x90
   16a14:	str	r1, [sp, #148]	; 0x94
   16a18:	add	r1, pc, #944	; 0x3b0
   16a1c:	ldrd	r0, [r1]
   16a20:	ldrd	r2, [sp, #144]	; 0x90
   16a24:	cmp	r3, r1
   16a28:	cmpeq	r2, r0
   16a2c:	bne	16c2c <_start@@Base+0x4538>
   16a30:	mov	r1, r4
   16a34:	mov	r3, #5
   16a38:	mov	r2, r6
   16a3c:	mov	r0, r5
   16a40:	bl	14498 <_start@@Base+0x1da4>
   16a44:	cmp	r4, r0
   16a48:	mov	r1, r0
   16a4c:	beq	16c2c <_start@@Base+0x4538>
   16a50:	add	r3, r7, #26
   16a54:	mov	r2, r6
   16a58:	mov	r0, r5
   16a5c:	bl	159d8 <_start@@Base+0x32e4>
   16a60:	mov	r4, r0
   16a64:	b	168e8 <_start@@Base+0x41f4>
   16a68:	mvn	r3, #-2030043136	; 0x87000000
   16a6c:	mvn	r2, #0
   16a70:	cmp	r1, r3
   16a74:	cmpeq	r0, r2
   16a78:	bhi	16afc <_start@@Base+0x4408>
   16a7c:	mov	r3, #1
   16a80:	mov	r2, r6
   16a84:	mov	r1, r4
   16a88:	mov	r0, r5
   16a8c:	bl	14498 <_start@@Base+0x1da4>
   16a90:	cmp	r4, r0
   16a94:	mov	sl, r0
   16a98:	beq	16c2c <_start@@Base+0x4538>
   16a9c:	mov	r3, #0
   16aa0:	add	fp, sp, #328	; 0x148
   16aa4:	mov	r1, r0
   16aa8:	mov	r2, r6
   16aac:	mov	r0, r5
   16ab0:	str	r3, [sp, #328]	; 0x148
   16ab4:	mov	r3, fp
   16ab8:	bl	205a8 <flatcc_json_parser_float@@Base>
   16abc:	cmp	sl, r0
   16ac0:	mov	r4, r0
   16ac4:	bne	16af0 <_start@@Base+0x43fc>
   16ac8:	mov	r1, r0
   16acc:	ldr	r3, [pc, #780]	; 16de0 <_start@@Base+0x46ec>
   16ad0:	mov	r2, r6
   16ad4:	mov	r0, r5
   16ad8:	str	fp, [sp]
   16adc:	bl	13854 <_start@@Base+0x1160>
   16ae0:	cmp	r6, r0
   16ae4:	cmpne	r4, r0
   16ae8:	beq	16c40 <_start@@Base+0x454c>
   16aec:	mov	r4, r0
   16af0:	ldr	r3, [sp, #328]	; 0x148
   16af4:	str	r3, [r7]
   16af8:	b	168e8 <_start@@Base+0x41f4>
   16afc:	mov	r3, #0
   16b00:	str	r3, [sp, #80]	; 0x50
   16b04:	and	r3, r1, #-16777216	; 0xff000000
   16b08:	str	r3, [sp, #84]	; 0x54
   16b0c:	ldrd	r2, [sp, #80]	; 0x50
   16b10:	cmp	r3, #2046820352	; 0x7a000000
   16b14:	cmpeq	r2, #0
   16b18:	bne	16b9c <_start@@Base+0x44a8>
   16b1c:	mov	r3, #1
   16b20:	mov	r2, r6
   16b24:	mov	r1, r4
   16b28:	mov	r0, r5
   16b2c:	bl	14498 <_start@@Base+0x1da4>
   16b30:	cmp	r4, r0
   16b34:	mov	sl, r0
   16b38:	beq	16c2c <_start@@Base+0x4538>
   16b3c:	mov	r3, #0
   16b40:	add	fp, sp, #328	; 0x148
   16b44:	mov	r1, r0
   16b48:	mov	r2, r6
   16b4c:	mov	r0, r5
   16b50:	str	r3, [sp, #328]	; 0x148
   16b54:	mov	r3, fp
   16b58:	bl	205a8 <flatcc_json_parser_float@@Base>
   16b5c:	cmp	sl, r0
   16b60:	mov	r4, r0
   16b64:	bne	16b90 <_start@@Base+0x449c>
   16b68:	mov	r1, r0
   16b6c:	ldr	r3, [pc, #624]	; 16de4 <_start@@Base+0x46f0>
   16b70:	mov	r2, r6
   16b74:	mov	r0, r5
   16b78:	str	fp, [sp]
   16b7c:	bl	13854 <_start@@Base+0x1160>
   16b80:	cmp	r6, r0
   16b84:	cmpne	r4, r0
   16b88:	beq	16c40 <_start@@Base+0x454c>
   16b8c:	mov	r4, r0
   16b90:	ldr	r3, [sp, #328]	; 0x148
   16b94:	str	r3, [r7, #8]
   16b98:	b	168e8 <_start@@Base+0x41f4>
   16b9c:	ldrd	r2, [sp, #80]	; 0x50
   16ba0:	cmp	r3, #2030043136	; 0x79000000
   16ba4:	cmpeq	r2, #0
   16ba8:	bne	16c2c <_start@@Base+0x4538>
   16bac:	mov	r3, #1
   16bb0:	mov	r2, r6
   16bb4:	mov	r1, r4
   16bb8:	mov	r0, r5
   16bbc:	bl	14498 <_start@@Base+0x1da4>
   16bc0:	cmp	r4, r0
   16bc4:	mov	sl, r0
   16bc8:	beq	16c2c <_start@@Base+0x4538>
   16bcc:	mov	r3, #0
   16bd0:	add	fp, sp, #328	; 0x148
   16bd4:	mov	r1, r0
   16bd8:	mov	r2, r6
   16bdc:	mov	r0, r5
   16be0:	str	r3, [sp, #328]	; 0x148
   16be4:	mov	r3, fp
   16be8:	bl	205a8 <flatcc_json_parser_float@@Base>
   16bec:	cmp	sl, r0
   16bf0:	mov	r4, r0
   16bf4:	bne	16c20 <_start@@Base+0x452c>
   16bf8:	mov	r1, r0
   16bfc:	ldr	r3, [pc, #484]	; 16de8 <_start@@Base+0x46f4>
   16c00:	mov	r2, r6
   16c04:	mov	r0, r5
   16c08:	str	fp, [sp]
   16c0c:	bl	13854 <_start@@Base+0x1160>
   16c10:	cmp	r6, r0
   16c14:	cmpne	r4, r0
   16c18:	beq	16c40 <_start@@Base+0x454c>
   16c1c:	mov	r4, r0
   16c20:	ldr	r3, [sp, #328]	; 0x148
   16c24:	str	r3, [r7, #4]
   16c28:	b	168e8 <_start@@Base+0x41f4>
   16c2c:	mov	r2, r6
   16c30:	mov	r1, r4
   16c34:	mov	r0, r5
   16c38:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16c3c:	b	16a60 <_start@@Base+0x436c>
   16c40:	mov	r1, r0
   16c44:	mov	r3, #33	; 0x21
   16c48:	mov	r2, r6
   16c4c:	mov	r0, r5
   16c50:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   16c54:	mov	r4, r0
   16c58:	b	15e8c <_start@@Base+0x3798>
   16c5c:	mov	r1, r0
   16c60:	mov	r2, r6
   16c64:	mov	r0, r5
   16c68:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16c6c:	mov	r4, r0
   16c70:	b	15e8c <_start@@Base+0x3798>
   16c74:	mov	r2, r6
   16c78:	mov	r1, r7
   16c7c:	mov	r0, r5
   16c80:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16c84:	mov	r4, r0
   16c88:	b	15e8c <_start@@Base+0x3798>
   16c8c:	and	r3, r0, #-16777216	; 0xff000000
   16c90:	str	r3, [sp, #64]	; 0x40
   16c94:	str	r1, [sp, #68]	; 0x44
   16c98:	add	r3, pc, #312	; 0x138
   16c9c:	ldrd	r2, [r3]
   16ca0:	ldrd	r0, [sp, #64]	; 0x40
   16ca4:	cmp	r1, r3
   16ca8:	cmpeq	r0, r2
   16cac:	bne	16d80 <_start@@Base+0x468c>
   16cb0:	mov	r3, #5
   16cb4:	mov	r2, r6
   16cb8:	mov	r1, r7
   16cbc:	mov	r0, r5
   16cc0:	bl	14498 <_start@@Base+0x1da4>
   16cc4:	cmp	r7, r0
   16cc8:	mov	r4, r0
   16ccc:	beq	19320 <_start@@Base+0x6c2c>
   16cd0:	mvn	r3, #-1073741824	; 0xc0000000
   16cd4:	mov	r2, #2
   16cd8:	ldr	r0, [r5]
   16cdc:	mov	r1, #4
   16ce0:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   16ce4:	cmp	r0, #0
   16ce8:	bne	160f4 <_start@@Base+0x3a00>
   16cec:	add	r7, sp, #308	; 0x134
   16cf0:	mov	r2, r6
   16cf4:	mov	r3, r7
   16cf8:	mov	r1, r4
   16cfc:	mov	r0, r5
   16d00:	bl	1453c <_start@@Base+0x1e48>
   16d04:	ldr	r3, [sp, #308]	; 0x134
   16d08:	mov	r4, r0
   16d0c:	ldr	r0, [r5]
   16d10:	cmp	r3, #0
   16d14:	bne	16d48 <_start@@Base+0x4654>
   16d18:	bl	1d94c <flatcc_builder_end_vector@@Base>
   16d1c:	cmp	r0, #0
   16d20:	str	r0, [sp, #312]	; 0x138
   16d24:	beq	160f4 <_start@@Base+0x3a00>
   16d28:	mov	r1, #9
   16d2c:	ldr	r0, [r5]
   16d30:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   16d34:	cmp	r0, #0
   16d38:	beq	160f4 <_start@@Base+0x3a00>
   16d3c:	ldr	r3, [sp, #312]	; 0x138
   16d40:	str	r3, [r0]
   16d44:	b	15e8c <_start@@Base+0x3798>
   16d48:	mov	r1, #1
   16d4c:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   16d50:	subs	r3, r0, #0
   16d54:	beq	160f4 <_start@@Base+0x3a00>
   16d58:	mov	r2, r6
   16d5c:	mov	r1, r4
   16d60:	mov	r0, r5
   16d64:	bl	159d8 <_start@@Base+0x32e4>
   16d68:	mov	r1, r0
   16d6c:	mov	r3, r7
   16d70:	mov	r2, r6
   16d74:	mov	r0, r5
   16d78:	bl	13460 <_start@@Base+0xd6c>
   16d7c:	b	16d04 <_start@@Base+0x4610>
   16d80:	mov	r1, r7
   16d84:	mov	r3, #4
   16d88:	mov	r2, r6
   16d8c:	mov	r0, r5
   16d90:	bl	14498 <_start@@Base+0x1da4>
   16d94:	cmp	r7, r0
   16d98:	mov	r1, r0
   16d9c:	beq	16df0 <_start@@Base+0x46fc>
   16da0:	ldr	r3, [pc, #68]	; 16dec <_start@@Base+0x46f8>
   16da4:	mov	r2, r6
   16da8:	mov	r0, r5
   16dac:	str	r3, [sp, #8]
   16db0:	ldr	r3, [sp, #316]	; 0x13c
   16db4:	str	r3, [sp, #4]
   16db8:	mov	r3, #8
   16dbc:	str	r3, [sp]
   16dc0:	mov	r3, #0
   16dc4:	bl	2128c <flatcc_json_parser_union@@Base>
   16dc8:	mov	r4, r0
   16dcc:	b	15e8c <_start@@Base+0x3798>
   16dd0:	movwcc	r0, #0
   16dd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16dd8:	strcc	r0, [r0], #-0
   16ddc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   16de0:	andeq	r4, r3, r0, lsl r1
   16de4:	andeq	r4, r3, ip, lsl r1
   16de8:	andeq	r4, r3, r8, lsr #2
   16dec:	andeq	r9, r1, r0, ror #6
   16df0:	add	r3, pc, #808	; 0x328
   16df4:	ldrd	r2, [r3]
   16df8:	ldrd	r8, [sp, #64]	; 0x40
   16dfc:	cmp	r9, r3
   16e00:	cmpeq	r8, r2
   16e04:	bne	16ed8 <_start@@Base+0x47e4>
   16e08:	mov	r3, #5
   16e0c:	mov	r2, r6
   16e10:	mov	r1, r7
   16e14:	mov	r0, r5
   16e18:	bl	14498 <_start@@Base+0x1da4>
   16e1c:	cmp	r7, r0
   16e20:	mov	r4, r0
   16e24:	beq	19320 <_start@@Base+0x6c2c>
   16e28:	mvn	r3, #-1073741824	; 0xc0000000
   16e2c:	mov	r2, #2
   16e30:	ldr	r0, [r5]
   16e34:	mov	r1, #4
   16e38:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   16e3c:	cmp	r0, #0
   16e40:	bne	160f4 <_start@@Base+0x3a00>
   16e44:	add	r7, sp, #308	; 0x134
   16e48:	mov	r2, r6
   16e4c:	mov	r3, r7
   16e50:	mov	r1, r4
   16e54:	mov	r0, r5
   16e58:	bl	1453c <_start@@Base+0x1e48>
   16e5c:	ldr	r3, [sp, #308]	; 0x134
   16e60:	mov	r4, r0
   16e64:	ldr	r0, [r5]
   16e68:	cmp	r3, #0
   16e6c:	bne	16ea0 <_start@@Base+0x47ac>
   16e70:	bl	1d94c <flatcc_builder_end_vector@@Base>
   16e74:	cmp	r0, #0
   16e78:	str	r0, [sp, #312]	; 0x138
   16e7c:	beq	160f4 <_start@@Base+0x3a00>
   16e80:	mov	r1, #31
   16e84:	ldr	r0, [r5]
   16e88:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   16e8c:	cmp	r0, #0
   16e90:	beq	160f4 <_start@@Base+0x3a00>
   16e94:	ldr	r3, [sp, #312]	; 0x138
   16e98:	str	r3, [r0]
   16e9c:	b	15e8c <_start@@Base+0x3798>
   16ea0:	mov	r1, #1
   16ea4:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   16ea8:	subs	r3, r0, #0
   16eac:	beq	160f4 <_start@@Base+0x3a00>
   16eb0:	mov	r2, r6
   16eb4:	mov	r1, r4
   16eb8:	mov	r0, r5
   16ebc:	bl	159d8 <_start@@Base+0x32e4>
   16ec0:	mov	r1, r0
   16ec4:	mov	r3, r7
   16ec8:	mov	r2, r6
   16ecc:	mov	r0, r5
   16ed0:	bl	13460 <_start@@Base+0xd6c>
   16ed4:	b	16e5c <_start@@Base+0x4768>
   16ed8:	add	r3, pc, #584	; 0x248
   16edc:	ldrd	r2, [r3]
   16ee0:	cmp	fp, r3
   16ee4:	cmpeq	sl, r2
   16ee8:	bne	19324 <_start@@Base+0x6c30>
   16eec:	add	r7, r7, #8
   16ef0:	mov	r1, r6
   16ef4:	mov	r0, r7
   16ef8:	bl	127e8 <_start@@Base+0xf4>
   16efc:	mov	r3, #0
   16f00:	str	r3, [sp, #152]	; 0x98
   16f04:	and	r3, r1, #-16777216	; 0xff000000
   16f08:	str	r3, [sp, #156]	; 0x9c
   16f0c:	ldrd	r2, [sp, #152]	; 0x98
   16f10:	cmp	r3, #1694498816	; 0x65000000
   16f14:	cmpeq	r2, #0
   16f18:	bne	16f88 <_start@@Base+0x4894>
   16f1c:	mov	r1, r7
   16f20:	mov	r3, #1
   16f24:	mov	r2, r6
   16f28:	mov	r0, r5
   16f2c:	bl	14498 <_start@@Base+0x1da4>
   16f30:	cmp	r7, r0
   16f34:	mov	r1, r0
   16f38:	beq	16f74 <_start@@Base+0x4880>
   16f3c:	ldr	r3, [pc, #524]	; 17150 <_start@@Base+0x4a5c>
   16f40:	mov	r2, r6
   16f44:	mov	r0, r5
   16f48:	str	r3, [sp, #12]
   16f4c:	ldr	r3, [pc, #512]	; 17154 <_start@@Base+0x4a60>
   16f50:	str	r3, [sp, #8]
   16f54:	ldr	r3, [sp, #316]	; 0x13c
   16f58:	str	r3, [sp, #4]
   16f5c:	mov	r3, #8
   16f60:	str	r3, [sp]
   16f64:	mov	r3, #0
   16f68:	bl	21398 <flatcc_json_parser_union_type@@Base>
   16f6c:	mov	r4, r0
   16f70:	b	15e8c <_start@@Base+0x3798>
   16f74:	mov	r2, r6
   16f78:	mov	r0, r5
   16f7c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16f80:	mov	r4, r0
   16f84:	b	15e8c <_start@@Base+0x3798>
   16f88:	mov	r2, r6
   16f8c:	mov	r1, r7
   16f90:	mov	r0, r5
   16f94:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   16f98:	mov	r4, r0
   16f9c:	b	15e8c <_start@@Base+0x3798>
   16fa0:	add	r3, pc, #392	; 0x188
   16fa4:	ldrd	r2, [r3]
   16fa8:	cmp	r1, r3
   16fac:	cmpeq	r0, r2
   16fb0:	bhi	18310 <_start@@Base+0x5c1c>
   16fb4:	add	r3, pc, #380	; 0x17c
   16fb8:	ldrd	r2, [r3]
   16fbc:	cmp	r1, r3
   16fc0:	cmpeq	r0, r2
   16fc4:	bne	17880 <_start@@Base+0x518c>
   16fc8:	add	r8, r7, #8
   16fcc:	mov	r1, r6
   16fd0:	mov	r0, r8
   16fd4:	bl	127e8 <_start@@Base+0xf4>
   16fd8:	add	r3, pc, #352	; 0x160
   16fdc:	ldrd	r2, [r3]
   16fe0:	cmp	r1, r3
   16fe4:	cmpeq	r0, r2
   16fe8:	bhi	17464 <_start@@Base+0x4d70>
   16fec:	add	r3, pc, #340	; 0x154
   16ff0:	ldrd	r2, [r3]
   16ff4:	cmp	r1, r3
   16ff8:	cmpeq	r0, r2
   16ffc:	bne	1715c <_start@@Base+0x4a68>
   17000:	mov	r3, #8
   17004:	mov	r2, r6
   17008:	mov	r1, r8
   1700c:	mov	r0, r5
   17010:	bl	14498 <_start@@Base+0x1da4>
   17014:	cmp	r8, r0
   17018:	mov	r4, r0
   1701c:	beq	1744c <_start@@Base+0x4d58>
   17020:	mov	r2, #1
   17024:	mvn	r3, #0
   17028:	ldr	r0, [r5]
   1702c:	mov	r1, r2
   17030:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   17034:	subs	r7, r0, #0
   17038:	bne	160f4 <_start@@Base+0x3a00>
   1703c:	ldr	sl, [pc, #276]	; 17158 <_start@@Base+0x4a64>
   17040:	mov	r1, r4
   17044:	add	r3, sp, #308	; 0x134
   17048:	mov	r2, r6
   1704c:	mov	r0, r5
   17050:	bl	1453c <_start@@Base+0x1e48>
   17054:	mov	r4, r0
   17058:	ldr	r3, [sp, #308]	; 0x134
   1705c:	ldr	r0, [r5]
   17060:	cmp	r3, #0
   17064:	bne	17098 <_start@@Base+0x49a4>
   17068:	bl	1d94c <flatcc_builder_end_vector@@Base>
   1706c:	cmp	r0, #0
   17070:	str	r0, [sp, #312]	; 0x138
   17074:	beq	160f4 <_start@@Base+0x3a00>
   17078:	mov	r1, #24
   1707c:	ldr	r0, [r5]
   17080:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   17084:	cmp	r0, #0
   17088:	beq	160f4 <_start@@Base+0x3a00>
   1708c:	ldr	r3, [sp, #312]	; 0x138
   17090:	str	r3, [r0]
   17094:	b	15e8c <_start@@Base+0x3798>
   17098:	mov	r1, #1
   1709c:	strb	r7, [sp, #328]	; 0x148
   170a0:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   170a4:	subs	fp, r0, #0
   170a8:	beq	160f4 <_start@@Base+0x3a00>
   170ac:	add	r9, sp, #328	; 0x148
   170b0:	mov	r1, r4
   170b4:	mov	r3, r9
   170b8:	mov	r2, r6
   170bc:	mov	r0, r5
   170c0:	bl	14814 <_start@@Base+0x2120>
   170c4:	cmp	r4, r0
   170c8:	mov	r8, r0
   170cc:	movne	r4, r0
   170d0:	bne	170fc <_start@@Base+0x4a08>
   170d4:	mov	r1, r4
   170d8:	mov	r3, sl
   170dc:	str	r9, [sp]
   170e0:	mov	r2, r6
   170e4:	mov	r0, r5
   170e8:	bl	13724 <_start@@Base+0x1030>
   170ec:	cmp	r6, r0
   170f0:	cmpne	r8, r0
   170f4:	mov	r4, r0
   170f8:	beq	160f4 <_start@@Base+0x3a00>
   170fc:	ldrb	r3, [sp, #328]	; 0x148
   17100:	mov	r1, r4
   17104:	mov	r2, r6
   17108:	mov	r0, r5
   1710c:	strb	r3, [fp]
   17110:	add	r3, sp, #308	; 0x134
   17114:	bl	13460 <_start@@Base+0xd6c>
   17118:	mov	r4, r0
   1711c:	b	17058 <_start@@Base+0x4964>
   17120:	strcc	r0, [r0, #-0]
   17124:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17128:	svcpl	0x00747970
   1712c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17130:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   17134:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17138:	cmnvs	r2, r1, ror #4
   1713c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17140:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   17144:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17148:	svcvs	0x006f6c73
   1714c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17150:	andeq	r9, r1, r0, ror #6
   17154:	andeq	r4, r3, r4, lsr r1
   17158:	andeq	r4, r3, r4, asr #2
   1715c:	add	r3, pc, #988	; 0x3dc
   17160:	ldrd	r2, [r3]
   17164:	cmp	r1, r3
   17168:	cmpeq	r0, r2
   1716c:	bne	17448 <_start@@Base+0x4d54>
   17170:	add	r7, r7, #16
   17174:	mov	r1, r6
   17178:	mov	r0, r7
   1717c:	bl	127e8 <_start@@Base+0xf4>
   17180:	bic	r3, r0, #255	; 0xff
   17184:	str	r3, [sp, #160]	; 0xa0
   17188:	str	r1, [sp, #164]	; 0xa4
   1718c:	add	r3, pc, #948	; 0x3b4
   17190:	ldrd	r2, [r3]
   17194:	ldrd	r0, [sp, #160]	; 0xa0
   17198:	cmp	r1, r3
   1719c:	cmpeq	r0, r2
   171a0:	bne	17430 <_start@@Base+0x4d3c>
   171a4:	mov	r3, #7
   171a8:	mov	r2, r6
   171ac:	mov	r1, r7
   171b0:	mov	r0, r5
   171b4:	bl	14498 <_start@@Base+0x1da4>
   171b8:	cmp	r7, r0
   171bc:	mov	r4, r0
   171c0:	beq	17418 <_start@@Base+0x4d24>
   171c4:	mvn	r3, #-536870912	; 0xe0000000
   171c8:	mov	r2, #4
   171cc:	ldr	r0, [r5]
   171d0:	mov	r1, #8
   171d4:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   171d8:	cmp	r0, #0
   171dc:	bne	160f4 <_start@@Base+0x3a00>
   171e0:	add	r3, sp, #308	; 0x134
   171e4:	mov	r2, r6
   171e8:	mov	r1, r4
   171ec:	mov	r0, r5
   171f0:	bl	1453c <_start@@Base+0x1e48>
   171f4:	ldr	r3, [sp, #308]	; 0x134
   171f8:	mov	r4, r0
   171fc:	ldr	r0, [r5]
   17200:	cmp	r3, #0
   17204:	bne	17238 <_start@@Base+0x4b44>
   17208:	bl	1d94c <flatcc_builder_end_vector@@Base>
   1720c:	cmp	r0, #0
   17210:	str	r0, [sp, #312]	; 0x138
   17214:	beq	160f4 <_start@@Base+0x3a00>
   17218:	mov	r1, #29
   1721c:	ldr	r0, [r5]
   17220:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   17224:	cmp	r0, #0
   17228:	beq	160f4 <_start@@Base+0x3a00>
   1722c:	ldr	r3, [sp, #312]	; 0x138
   17230:	str	r3, [r0]
   17234:	b	15e8c <_start@@Base+0x3798>
   17238:	mov	r1, #1
   1723c:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   17240:	subs	r9, r0, #0
   17244:	beq	160f4 <_start@@Base+0x3a00>
   17248:	add	r3, sp, #324	; 0x144
   1724c:	mov	r2, r6
   17250:	mov	r1, r4
   17254:	mov	r0, r5
   17258:	bl	14344 <_start@@Base+0x1c50>
   1725c:	ldr	r3, [sp, #324]	; 0x144
   17260:	cmp	r3, #0
   17264:	bne	17280 <_start@@Base+0x4b8c>
   17268:	mov	r1, r0
   1726c:	add	r3, sp, #308	; 0x134
   17270:	mov	r2, r6
   17274:	mov	r0, r5
   17278:	bl	13460 <_start@@Base+0xd6c>
   1727c:	b	171f4 <_start@@Base+0x4b00>
   17280:	mov	r2, r6
   17284:	mov	r1, r0
   17288:	ldr	fp, [pc, #720]	; 17560 <_start@@Base+0x4e6c>
   1728c:	mov	r0, r5
   17290:	mov	r8, #0
   17294:	bl	1369c <_start@@Base+0xfa8>
   17298:	mov	r1, r6
   1729c:	mov	r4, r0
   172a0:	bl	127e8 <_start@@Base+0xf4>
   172a4:	lsr	r3, r1, #16
   172a8:	str	r8, [sp, #168]	; 0xa8
   172ac:	mov	sl, #0
   172b0:	lsl	r3, r3, #16
   172b4:	str	r3, [sp, #172]	; 0xac
   172b8:	ldrd	r2, [sp, #168]	; 0xa8
   172bc:	cmp	r3, fp
   172c0:	cmpeq	r2, sl
   172c4:	bne	17358 <_start@@Base+0x4c64>
   172c8:	mov	r3, #2
   172cc:	mov	r2, r6
   172d0:	mov	r1, r4
   172d4:	mov	r0, r5
   172d8:	bl	14498 <_start@@Base+0x1da4>
   172dc:	cmp	r4, r0
   172e0:	mov	r7, r0
   172e4:	beq	173e8 <_start@@Base+0x4cf4>
   172e8:	str	r8, [sp, #328]	; 0x148
   172ec:	add	r8, sp, #328	; 0x148
   172f0:	mov	r1, r0
   172f4:	mov	r2, r6
   172f8:	mov	r0, r5
   172fc:	mov	r3, r8
   17300:	bl	14648 <_start@@Base+0x1f54>
   17304:	cmp	r7, r0
   17308:	mov	r4, r0
   1730c:	bne	17338 <_start@@Base+0x4c44>
   17310:	mov	r1, r0
   17314:	ldr	r3, [pc, #584]	; 17564 <_start@@Base+0x4e70>
   17318:	mov	r2, r6
   1731c:	mov	r0, r5
   17320:	str	r8, [sp]
   17324:	bl	14bf0 <_start@@Base+0x24fc>
   17328:	cmp	r6, r0
   1732c:	cmpne	r4, r0
   17330:	beq	17400 <_start@@Base+0x4d0c>
   17334:	mov	r4, r0
   17338:	ldr	r3, [sp, #328]	; 0x148
   1733c:	str	r3, [r9]
   17340:	add	r3, sp, #324	; 0x144
   17344:	mov	r2, r6
   17348:	mov	r1, r4
   1734c:	mov	r0, r5
   17350:	bl	13518 <_start@@Base+0xe24>
   17354:	b	1725c <_start@@Base+0x4b68>
   17358:	add	r3, pc, #496	; 0x1f0
   1735c:	ldrd	r2, [r3]
   17360:	cmp	r1, r3
   17364:	cmpeq	r0, r2
   17368:	bne	173e8 <_start@@Base+0x4cf4>
   1736c:	mov	r3, #8
   17370:	mov	r2, r6
   17374:	mov	r1, r4
   17378:	mov	r0, r5
   1737c:	bl	14498 <_start@@Base+0x1da4>
   17380:	cmp	r4, r0
   17384:	mov	r7, r0
   17388:	beq	173e8 <_start@@Base+0x4cf4>
   1738c:	str	r8, [sp, #328]	; 0x148
   17390:	add	r8, sp, #328	; 0x148
   17394:	mov	r1, r0
   17398:	mov	r2, r6
   1739c:	mov	r0, r5
   173a0:	mov	r3, r8
   173a4:	bl	14648 <_start@@Base+0x1f54>
   173a8:	cmp	r7, r0
   173ac:	mov	r4, r0
   173b0:	bne	173dc <_start@@Base+0x4ce8>
   173b4:	mov	r1, r0
   173b8:	ldr	r3, [pc, #424]	; 17568 <_start@@Base+0x4e74>
   173bc:	mov	r2, r6
   173c0:	mov	r0, r5
   173c4:	str	r8, [sp]
   173c8:	bl	14bf0 <_start@@Base+0x24fc>
   173cc:	cmp	r6, r0
   173d0:	cmpne	r4, r0
   173d4:	beq	17400 <_start@@Base+0x4d0c>
   173d8:	mov	r4, r0
   173dc:	ldr	r3, [sp, #328]	; 0x148
   173e0:	str	r3, [r9, #4]
   173e4:	b	17340 <_start@@Base+0x4c4c>
   173e8:	mov	r1, r4
   173ec:	mov	r2, r6
   173f0:	mov	r0, r5
   173f4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   173f8:	mov	r4, r0
   173fc:	b	17340 <_start@@Base+0x4c4c>
   17400:	mov	r1, r0
   17404:	mov	r3, #33	; 0x21
   17408:	mov	r2, r6
   1740c:	mov	r0, r5
   17410:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   17414:	b	17268 <_start@@Base+0x4b74>
   17418:	mov	r1, r0
   1741c:	mov	r2, r6
   17420:	mov	r0, r5
   17424:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17428:	mov	r4, r0
   1742c:	b	15e8c <_start@@Base+0x3798>
   17430:	mov	r2, r6
   17434:	mov	r1, r7
   17438:	mov	r0, r5
   1743c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17440:	mov	r4, r0
   17444:	b	15e8c <_start@@Base+0x3798>
   17448:	mov	r4, r8
   1744c:	mov	r1, r4
   17450:	mov	r2, r6
   17454:	mov	r0, r5
   17458:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1745c:	mov	r4, r0
   17460:	b	15e8c <_start@@Base+0x3798>
   17464:	add	r3, pc, #236	; 0xec
   17468:	ldrd	r2, [r3]
   1746c:	cmp	r1, r3
   17470:	cmpeq	r0, r2
   17474:	bne	17710 <_start@@Base+0x501c>
   17478:	add	r7, r7, #16
   1747c:	mov	r1, r6
   17480:	mov	r0, r7
   17484:	bl	127e8 <_start@@Base+0xf4>
   17488:	lsr	r3, r1, #16
   1748c:	mov	r0, #0
   17490:	mov	r2, #0
   17494:	lsl	r3, r3, #16
   17498:	str	r0, [sp, #24]
   1749c:	str	r3, [sp, #28]
   174a0:	ldr	r3, [pc, #196]	; 1756c <_start@@Base+0x4e78>
   174a4:	ldrd	r8, [sp, #24]
   174a8:	cmp	r9, r3
   174ac:	cmpeq	r8, r2
   174b0:	bne	175e0 <_start@@Base+0x4eec>
   174b4:	mov	r3, #2
   174b8:	mov	r2, r6
   174bc:	mov	r1, r7
   174c0:	mov	r0, r5
   174c4:	bl	14498 <_start@@Base+0x1da4>
   174c8:	cmp	r7, r0
   174cc:	mov	r4, r0
   174d0:	beq	175c8 <_start@@Base+0x4ed4>
   174d4:	ldr	r0, [r5]
   174d8:	bl	1d048 <flatcc_builder_start_offset_vector@@Base>
   174dc:	cmp	r0, #0
   174e0:	bne	160f4 <_start@@Base+0x3a00>
   174e4:	add	r7, sp, #308	; 0x134
   174e8:	mov	r2, r6
   174ec:	mov	r3, r7
   174f0:	mov	r1, r4
   174f4:	mov	r0, r5
   174f8:	bl	1453c <_start@@Base+0x1e48>
   174fc:	ldr	r3, [sp, #308]	; 0x134
   17500:	mov	r4, r0
   17504:	cmp	r3, #0
   17508:	bne	17570 <_start@@Base+0x4e7c>
   1750c:	ldr	r0, [r5]
   17510:	bl	1d9ec <flatcc_builder_end_offset_vector@@Base>
   17514:	cmp	r0, #0
   17518:	str	r0, [sp, #312]	; 0x138
   1751c:	beq	160f4 <_start@@Base+0x3a00>
   17520:	mov	r1, #28
   17524:	ldr	r0, [r5]
   17528:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1752c:	cmp	r0, #0
   17530:	beq	160f4 <_start@@Base+0x3a00>
   17534:	ldr	r3, [sp, #312]	; 0x138
   17538:	str	r3, [r0]
   1753c:	b	15e8c <_start@@Base+0x3798>
   17540:	svcvs	0x00727465
   17544:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17548:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1754c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   17550:	cmnvs	lr, r5, ror #6
   17554:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   17558:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1755c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17560:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   17564:	andeq	r4, r3, r0, asr r1
   17568:	andeq	r4, r3, ip, asr r1
   1756c:	ldrvs	r0, [r2, -r0]!
   17570:	add	r3, sp, #312	; 0x138
   17574:	mov	r1, r4
   17578:	mov	r2, r6
   1757c:	mov	r0, r5
   17580:	bl	21098 <flatcc_json_parser_build_string@@Base>
   17584:	ldr	r3, [sp, #312]	; 0x138
   17588:	mov	r4, r0
   1758c:	cmp	r3, #0
   17590:	beq	160f4 <_start@@Base+0x3a00>
   17594:	mov	r1, #1
   17598:	ldr	r0, [r5]
   1759c:	bl	1cc58 <flatcc_builder_extend_offset_vector@@Base>
   175a0:	cmp	r0, #0
   175a4:	beq	160f4 <_start@@Base+0x3a00>
   175a8:	ldr	r3, [sp, #312]	; 0x138
   175ac:	mov	r2, r6
   175b0:	mov	r1, r4
   175b4:	str	r3, [r0]
   175b8:	mov	r3, r7
   175bc:	mov	r0, r5
   175c0:	bl	13460 <_start@@Base+0xd6c>
   175c4:	b	174fc <_start@@Base+0x4e08>
   175c8:	mov	r1, r0
   175cc:	mov	r2, r6
   175d0:	mov	r0, r5
   175d4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   175d8:	mov	r4, r0
   175dc:	b	15e8c <_start@@Base+0x3798>
   175e0:	and	r3, r1, #-16777216	; 0xff000000
   175e4:	str	r0, [sp, #176]	; 0xb0
   175e8:	str	r3, [sp, #180]	; 0xb4
   175ec:	ldrd	r2, [sp, #176]	; 0xb0
   175f0:	cmp	r3, #1728053248	; 0x67000000
   175f4:	cmpeq	r2, #0
   175f8:	bne	176f8 <_start@@Base+0x5004>
   175fc:	mov	r3, #1
   17600:	mov	r2, r6
   17604:	mov	r1, r7
   17608:	mov	r0, r5
   1760c:	bl	14498 <_start@@Base+0x1da4>
   17610:	cmp	r7, r0
   17614:	mov	r4, r0
   17618:	beq	176e0 <_start@@Base+0x4fec>
   1761c:	ldr	r0, [r5]
   17620:	bl	1d048 <flatcc_builder_start_offset_vector@@Base>
   17624:	cmp	r0, #0
   17628:	bne	160f4 <_start@@Base+0x3a00>
   1762c:	add	r7, sp, #308	; 0x134
   17630:	mov	r2, r6
   17634:	mov	r3, r7
   17638:	mov	r1, r4
   1763c:	mov	r0, r5
   17640:	bl	1453c <_start@@Base+0x1e48>
   17644:	ldr	r3, [sp, #308]	; 0x134
   17648:	mov	r4, r0
   1764c:	cmp	r3, #0
   17650:	bne	17688 <_start@@Base+0x4f94>
   17654:	ldr	r0, [r5]
   17658:	bl	1d9ec <flatcc_builder_end_offset_vector@@Base>
   1765c:	cmp	r0, #0
   17660:	str	r0, [sp, #312]	; 0x138
   17664:	beq	160f4 <_start@@Base+0x3a00>
   17668:	mov	r1, #10
   1766c:	ldr	r0, [r5]
   17670:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   17674:	cmp	r0, #0
   17678:	beq	160f4 <_start@@Base+0x3a00>
   1767c:	ldr	r3, [sp, #312]	; 0x138
   17680:	str	r3, [r0]
   17684:	b	15e8c <_start@@Base+0x3798>
   17688:	add	r3, sp, #312	; 0x138
   1768c:	mov	r1, r4
   17690:	mov	r2, r6
   17694:	mov	r0, r5
   17698:	bl	21098 <flatcc_json_parser_build_string@@Base>
   1769c:	ldr	r3, [sp, #312]	; 0x138
   176a0:	mov	r4, r0
   176a4:	cmp	r3, #0
   176a8:	beq	160f4 <_start@@Base+0x3a00>
   176ac:	mov	r1, #1
   176b0:	ldr	r0, [r5]
   176b4:	bl	1cc58 <flatcc_builder_extend_offset_vector@@Base>
   176b8:	cmp	r0, #0
   176bc:	beq	160f4 <_start@@Base+0x3a00>
   176c0:	ldr	r3, [sp, #312]	; 0x138
   176c4:	mov	r2, r6
   176c8:	mov	r1, r4
   176cc:	str	r3, [r0]
   176d0:	mov	r3, r7
   176d4:	mov	r0, r5
   176d8:	bl	13460 <_start@@Base+0xd6c>
   176dc:	b	17644 <_start@@Base+0x4f50>
   176e0:	mov	r1, r0
   176e4:	mov	r2, r6
   176e8:	mov	r0, r5
   176ec:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   176f0:	mov	r4, r0
   176f4:	b	15e8c <_start@@Base+0x3798>
   176f8:	mov	r2, r6
   176fc:	mov	r1, r7
   17700:	mov	r0, r5
   17704:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17708:	mov	r4, r0
   1770c:	b	15e8c <_start@@Base+0x3798>
   17710:	add	r3, pc, #968	; 0x3c8
   17714:	ldrd	r2, [r3]
   17718:	cmp	r1, r3
   1771c:	cmpeq	r0, r2
   17720:	bne	17868 <_start@@Base+0x5174>
   17724:	add	r7, r7, #16
   17728:	mov	r1, r6
   1772c:	mov	r0, r7
   17730:	bl	127e8 <_start@@Base+0xf4>
   17734:	mov	r3, #0
   17738:	str	r3, [sp, #184]	; 0xb8
   1773c:	and	r3, r1, #-16777216	; 0xff000000
   17740:	str	r3, [sp, #188]	; 0xbc
   17744:	ldrd	r2, [sp, #184]	; 0xb8
   17748:	cmp	r3, #1929379840	; 0x73000000
   1774c:	cmpeq	r2, #0
   17750:	bne	17850 <_start@@Base+0x515c>
   17754:	mov	r3, #1
   17758:	mov	r2, r6
   1775c:	mov	r1, r7
   17760:	mov	r0, r5
   17764:	bl	14498 <_start@@Base+0x1da4>
   17768:	cmp	r7, r0
   1776c:	mov	r4, r0
   17770:	beq	17838 <_start@@Base+0x5144>
   17774:	ldr	r0, [r5]
   17778:	bl	1d048 <flatcc_builder_start_offset_vector@@Base>
   1777c:	cmp	r0, #0
   17780:	bne	160f4 <_start@@Base+0x3a00>
   17784:	add	r7, sp, #308	; 0x134
   17788:	mov	r2, r6
   1778c:	mov	r3, r7
   17790:	mov	r1, r4
   17794:	mov	r0, r5
   17798:	bl	1453c <_start@@Base+0x1e48>
   1779c:	ldr	r3, [sp, #308]	; 0x134
   177a0:	mov	r4, r0
   177a4:	cmp	r3, #0
   177a8:	bne	177e0 <_start@@Base+0x50ec>
   177ac:	ldr	r0, [r5]
   177b0:	bl	1d9ec <flatcc_builder_end_offset_vector@@Base>
   177b4:	cmp	r0, #0
   177b8:	str	r0, [sp, #312]	; 0x138
   177bc:	beq	160f4 <_start@@Base+0x3a00>
   177c0:	mov	r1, #11
   177c4:	ldr	r0, [r5]
   177c8:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   177cc:	cmp	r0, #0
   177d0:	beq	160f4 <_start@@Base+0x3a00>
   177d4:	ldr	r3, [sp, #312]	; 0x138
   177d8:	str	r3, [r0]
   177dc:	b	15e8c <_start@@Base+0x3798>
   177e0:	add	r3, sp, #312	; 0x138
   177e4:	mov	r1, r4
   177e8:	mov	r2, r6
   177ec:	mov	r0, r5
   177f0:	bl	15cec <_start@@Base+0x35f8>
   177f4:	ldr	r3, [sp, #312]	; 0x138
   177f8:	mov	r4, r0
   177fc:	cmp	r3, #0
   17800:	beq	160f4 <_start@@Base+0x3a00>
   17804:	mov	r1, #1
   17808:	ldr	r0, [r5]
   1780c:	bl	1cc58 <flatcc_builder_extend_offset_vector@@Base>
   17810:	cmp	r0, #0
   17814:	beq	160f4 <_start@@Base+0x3a00>
   17818:	ldr	r3, [sp, #312]	; 0x138
   1781c:	mov	r2, r6
   17820:	mov	r1, r4
   17824:	str	r3, [r0]
   17828:	mov	r3, r7
   1782c:	mov	r0, r5
   17830:	bl	13460 <_start@@Base+0xd6c>
   17834:	b	1779c <_start@@Base+0x50a8>
   17838:	mov	r1, r0
   1783c:	mov	r2, r6
   17840:	mov	r0, r5
   17844:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17848:	mov	r4, r0
   1784c:	b	15e8c <_start@@Base+0x3798>
   17850:	mov	r2, r6
   17854:	mov	r1, r7
   17858:	mov	r0, r5
   1785c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17860:	mov	r4, r0
   17864:	b	15e8c <_start@@Base+0x3798>
   17868:	mov	r2, r6
   1786c:	mov	r1, r8
   17870:	mov	r0, r5
   17874:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17878:	mov	r4, r0
   1787c:	b	15e8c <_start@@Base+0x3798>
   17880:	add	r3, pc, #608	; 0x260
   17884:	ldrd	r2, [r3]
   17888:	cmp	r1, r3
   1788c:	cmpeq	r0, r2
   17890:	bhi	17ccc <_start@@Base+0x55d8>
   17894:	add	r3, pc, #596	; 0x254
   17898:	ldrd	r2, [r3]
   1789c:	cmp	r1, r3
   178a0:	cmpeq	r0, r2
   178a4:	bne	17bd4 <_start@@Base+0x54e0>
   178a8:	add	r8, r7, #8
   178ac:	ldr	r7, [pc, #604]	; 17b10 <_start@@Base+0x541c>
   178b0:	mov	r1, r6
   178b4:	mov	r0, r8
   178b8:	mov	r9, #0
   178bc:	bl	127e8 <_start@@Base+0xf4>
   178c0:	str	r9, [sp, #192]	; 0xc0
   178c4:	mov	r2, #0
   178c8:	and	r3, r1, r7
   178cc:	str	r3, [sp, #196]	; 0xc4
   178d0:	ldr	r3, [pc, #572]	; 17b14 <_start@@Base+0x5420>
   178d4:	ldrd	r0, [sp, #192]	; 0xc0
   178d8:	cmp	r1, r3
   178dc:	cmpeq	r0, r2
   178e0:	bne	17bbc <_start@@Base+0x54c8>
   178e4:	mov	r3, #2
   178e8:	mov	r2, r6
   178ec:	mov	r1, r8
   178f0:	mov	r0, r5
   178f4:	bl	14498 <_start@@Base+0x1da4>
   178f8:	cmp	r8, r0
   178fc:	mov	r4, r0
   17900:	beq	17ba4 <_start@@Base+0x54b0>
   17904:	mov	r1, #3
   17908:	ldr	r0, [r5]
   1790c:	str	r9, [sp, #312]	; 0x138
   17910:	bl	1d108 <flatcc_builder_start_table@@Base>
   17914:	cmp	r0, r9
   17918:	bne	17968 <_start@@Base+0x5274>
   1791c:	add	r9, pc, #468	; 0x1d4
   17920:	ldrd	r8, [r9]
   17924:	mov	r1, r4
   17928:	add	r3, sp, #324	; 0x144
   1792c:	mov	r2, r6
   17930:	mov	r0, r5
   17934:	bl	14344 <_start@@Base+0x1c50>
   17938:	mov	r4, r0
   1793c:	ldr	r3, [sp, #324]	; 0x144
   17940:	cmp	r3, #0
   17944:	bne	179ac <_start@@Base+0x52b8>
   17948:	ldr	r3, [r5, #24]
   1794c:	cmp	r3, #0
   17950:	bne	17968 <_start@@Base+0x5274>
   17954:	ldr	r0, [r5]
   17958:	bl	1d730 <flatcc_builder_end_table@@Base>
   1795c:	cmp	r0, #0
   17960:	str	r0, [sp, #312]	; 0x138
   17964:	bne	17980 <_start@@Base+0x528c>
   17968:	mov	r1, r4
   1796c:	mov	r3, #33	; 0x21
   17970:	mov	r2, r6
   17974:	mov	r0, r5
   17978:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   1797c:	mov	r4, r0
   17980:	ldr	r3, [sp, #312]	; 0x138
   17984:	cmp	r3, #0
   17988:	beq	160f4 <_start@@Base+0x3a00>
   1798c:	mov	r1, #35	; 0x23
   17990:	ldr	r0, [r5]
   17994:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   17998:	cmp	r0, #0
   1799c:	beq	160f4 <_start@@Base+0x3a00>
   179a0:	ldr	r3, [sp, #312]	; 0x138
   179a4:	str	r3, [r0]
   179a8:	b	15e8c <_start@@Base+0x3798>
   179ac:	mov	r2, r6
   179b0:	mov	r1, r4
   179b4:	mov	r0, r5
   179b8:	bl	1369c <_start@@Base+0xfa8>
   179bc:	mov	r1, r6
   179c0:	mov	r4, r0
   179c4:	bl	127e8 <_start@@Base+0xf4>
   179c8:	add	r3, pc, #304	; 0x130
   179cc:	ldrd	r2, [r3]
   179d0:	cmp	r1, r3
   179d4:	cmpeq	r0, r2
   179d8:	bhi	17a74 <_start@@Base+0x5380>
   179dc:	mov	sl, #0
   179e0:	str	sl, [sp, #200]	; 0xc8
   179e4:	str	r1, [sp, #204]	; 0xcc
   179e8:	ldrd	r2, [sp, #200]	; 0xc8
   179ec:	cmp	r3, r9
   179f0:	cmpeq	r2, r8
   179f4:	bne	17b8c <_start@@Base+0x5498>
   179f8:	mov	r1, r4
   179fc:	mov	r3, #4
   17a00:	mov	r2, r6
   17a04:	mov	r0, r5
   17a08:	bl	14498 <_start@@Base+0x1da4>
   17a0c:	cmp	r4, r0
   17a10:	mov	r1, r0
   17a14:	beq	17b8c <_start@@Base+0x5498>
   17a18:	add	r3, sp, #328	; 0x148
   17a1c:	mov	r2, r6
   17a20:	str	sl, [sp]
   17a24:	mov	r0, r5
   17a28:	bl	20d70 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   17a2c:	ldr	r3, [sp, #328]	; 0x148
   17a30:	mov	r4, r0
   17a34:	cmp	r3, sl
   17a38:	beq	17968 <_start@@Base+0x5274>
   17a3c:	mov	r1, sl
   17a40:	ldr	r0, [r5]
   17a44:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   17a48:	cmp	r0, #0
   17a4c:	beq	17968 <_start@@Base+0x5274>
   17a50:	ldr	r3, [sp, #328]	; 0x148
   17a54:	str	r3, [r0]
   17a58:	mov	r1, r4
   17a5c:	add	r3, sp, #324	; 0x144
   17a60:	mov	r2, r6
   17a64:	mov	r0, r5
   17a68:	bl	13518 <_start@@Base+0xe24>
   17a6c:	mov	r4, r0
   17a70:	b	1793c <_start@@Base+0x5248>
   17a74:	bic	r3, r0, #255	; 0xff
   17a78:	add	fp, pc, #136	; 0x88
   17a7c:	ldrd	sl, [fp]
   17a80:	str	r3, [sp, #208]	; 0xd0
   17a84:	str	r1, [sp, #212]	; 0xd4
   17a88:	ldrd	r2, [sp, #208]	; 0xd0
   17a8c:	cmp	r3, fp
   17a90:	cmpeq	r2, sl
   17a94:	bne	17b18 <_start@@Base+0x5424>
   17a98:	mov	r1, r4
   17a9c:	mov	r3, #7
   17aa0:	mov	r2, r6
   17aa4:	mov	r0, r5
   17aa8:	bl	14498 <_start@@Base+0x1da4>
   17aac:	cmp	r4, r0
   17ab0:	mov	r1, r0
   17ab4:	beq	17b8c <_start@@Base+0x5498>
   17ab8:	mov	sl, #1
   17abc:	add	r3, sp, #328	; 0x148
   17ac0:	mov	r2, r6
   17ac4:	mov	r0, r5
   17ac8:	str	sl, [sp]
   17acc:	bl	20d70 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   17ad0:	ldr	r3, [sp, #328]	; 0x148
   17ad4:	mov	r4, r0
   17ad8:	cmp	r3, #0
   17adc:	b	17a38 <_start@@Base+0x5344>
   17ae0:	cmnvs	r2, r5, ror #24
   17ae4:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   17ae8:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   17aec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17af0:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   17af4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17af8:	andeq	r0, r0, r0
   17afc:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   17b00:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   17b04:	mcrvs	3, 3, r7, cr5, cr4, {3}
   17b08:	cmnvs	r4, r0, lsl #2
   17b0c:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   17b10:			; <UNDEFINED> instruction: 0xffff0000
   17b14:	ldrtcc	r0, [r4], -r0
   17b18:	and	r3, r0, r7
   17b1c:	str	r3, [sp, #216]	; 0xd8
   17b20:	str	r1, [sp, #220]	; 0xdc
   17b24:	add	r1, pc, #996	; 0x3e4
   17b28:	ldrd	r0, [r1]
   17b2c:	ldrd	r2, [sp, #216]	; 0xd8
   17b30:	cmp	r3, r1
   17b34:	cmpeq	r2, r0
   17b38:	bne	17b8c <_start@@Base+0x5498>
   17b3c:	mov	r1, r4
   17b40:	mov	r3, #6
   17b44:	mov	r2, r6
   17b48:	mov	r0, r5
   17b4c:	bl	14498 <_start@@Base+0x1da4>
   17b50:	cmp	r4, r0
   17b54:	mov	r1, r0
   17b58:	beq	17b8c <_start@@Base+0x5498>
   17b5c:	mov	r3, #0
   17b60:	mov	r2, r6
   17b64:	mov	r0, r5
   17b68:	str	r3, [sp]
   17b6c:	add	r3, sp, #328	; 0x148
   17b70:	bl	20d70 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   17b74:	ldr	r3, [sp, #328]	; 0x148
   17b78:	mov	r4, r0
   17b7c:	cmp	r3, #0
   17b80:	beq	17968 <_start@@Base+0x5274>
   17b84:	mov	r1, #2
   17b88:	b	17a40 <_start@@Base+0x534c>
   17b8c:	mov	r1, r4
   17b90:	mov	r2, r6
   17b94:	mov	r0, r5
   17b98:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17b9c:	mov	r4, r0
   17ba0:	b	17a58 <_start@@Base+0x5364>
   17ba4:	mov	r1, r0
   17ba8:	mov	r2, r6
   17bac:	mov	r0, r5
   17bb0:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17bb4:	mov	r4, r0
   17bb8:	b	15e8c <_start@@Base+0x3798>
   17bbc:	mov	r2, r6
   17bc0:	mov	r1, r8
   17bc4:	mov	r0, r5
   17bc8:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17bcc:	mov	r4, r0
   17bd0:	b	15e8c <_start@@Base+0x3798>
   17bd4:	add	r3, pc, #828	; 0x33c
   17bd8:	ldrd	r2, [r3]
   17bdc:	cmp	r1, r3
   17be0:	cmpeq	r0, r2
   17be4:	bne	17cb4 <_start@@Base+0x55c0>
   17be8:	mov	r3, #8
   17bec:	mov	r2, r6
   17bf0:	mov	r1, r7
   17bf4:	mov	r0, r5
   17bf8:	bl	14498 <_start@@Base+0x1da4>
   17bfc:	cmp	r7, r0
   17c00:	mov	r8, r0
   17c04:	beq	17c9c <_start@@Base+0x55a8>
   17c08:	mov	r3, #0
   17c0c:	add	r7, sp, #328	; 0x148
   17c10:	mov	r1, r0
   17c14:	mov	r2, r6
   17c18:	mov	r0, r5
   17c1c:	strb	r3, [sp, #328]	; 0x148
   17c20:	mov	r3, r7
   17c24:	bl	14814 <_start@@Base+0x2120>
   17c28:	cmp	r8, r0
   17c2c:	mov	r4, r0
   17c30:	bne	17c5c <_start@@Base+0x5568>
   17c34:	mov	r1, r0
   17c38:	ldr	r3, [pc, #760]	; 17f38 <_start@@Base+0x5844>
   17c3c:	mov	r2, r6
   17c40:	mov	r0, r5
   17c44:	str	r7, [sp]
   17c48:	bl	13724 <_start@@Base+0x1030>
   17c4c:	cmp	r6, r0
   17c50:	cmpne	r4, r0
   17c54:	mov	r4, r0
   17c58:	beq	160f4 <_start@@Base+0x3a00>
   17c5c:	ldrb	r3, [sp, #328]	; 0x148
   17c60:	cmp	r3, #1
   17c64:	bne	17c74 <_start@@Base+0x5580>
   17c68:	ldr	r3, [r5, #8]
   17c6c:	tst	r3, #2
   17c70:	beq	15e8c <_start@@Base+0x3798>
   17c74:	mov	r3, #1
   17c78:	mov	r1, #15
   17c7c:	ldr	r0, [r5]
   17c80:	mov	r2, r3
   17c84:	bl	1e08c <flatcc_builder_table_add@@Base>
   17c88:	cmp	r0, #0
   17c8c:	beq	160f4 <_start@@Base+0x3a00>
   17c90:	ldrb	r3, [sp, #328]	; 0x148
   17c94:	strb	r3, [r0]
   17c98:	b	15e8c <_start@@Base+0x3798>
   17c9c:	mov	r2, r6
   17ca0:	mov	r1, r7
   17ca4:	mov	r0, r5
   17ca8:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17cac:	mov	r4, r0
   17cb0:	b	15e8c <_start@@Base+0x3798>
   17cb4:	mov	r2, r6
   17cb8:	mov	r1, r7
   17cbc:	mov	r0, r5
   17cc0:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   17cc4:	mov	r4, r0
   17cc8:	b	15e8c <_start@@Base+0x3798>
   17ccc:	add	r3, pc, #588	; 0x24c
   17cd0:	ldrd	r2, [r3]
   17cd4:	cmp	r1, r3
   17cd8:	cmpeq	r0, r2
   17cdc:	bhi	18118 <_start@@Base+0x5a24>
   17ce0:	add	r3, pc, #576	; 0x240
   17ce4:	ldrd	r2, [r3]
   17ce8:	cmp	r1, r3
   17cec:	cmpeq	r0, r2
   17cf0:	bne	18100 <_start@@Base+0x5a0c>
   17cf4:	add	r7, r7, #8
   17cf8:	mov	r1, r6
   17cfc:	mov	r0, r7
   17d00:	mov	r8, #0
   17d04:	bl	127e8 <_start@@Base+0xf4>
   17d08:	and	r3, r1, #-16777216	; 0xff000000
   17d0c:	str	r8, [sp, #224]	; 0xe0
   17d10:	str	r3, [sp, #228]	; 0xe4
   17d14:	ldrd	r2, [sp, #224]	; 0xe0
   17d18:	cmp	r3, #2030043136	; 0x79000000
   17d1c:	cmpeq	r2, #0
   17d20:	bne	180e8 <_start@@Base+0x59f4>
   17d24:	mov	r3, #1
   17d28:	mov	r2, r6
   17d2c:	mov	r1, r7
   17d30:	mov	r0, r5
   17d34:	bl	14498 <_start@@Base+0x1da4>
   17d38:	cmp	r7, r0
   17d3c:	mov	r4, r0
   17d40:	beq	180d0 <_start@@Base+0x59dc>
   17d44:	mov	r1, #3
   17d48:	ldr	r0, [r5]
   17d4c:	str	r8, [sp, #312]	; 0x138
   17d50:	bl	1d108 <flatcc_builder_start_table@@Base>
   17d54:	cmp	r0, r8
   17d58:	bne	17da8 <_start@@Base+0x56b4>
   17d5c:	add	r9, pc, #460	; 0x1cc
   17d60:	ldrd	r8, [r9]
   17d64:	mov	r1, r4
   17d68:	add	r3, sp, #320	; 0x140
   17d6c:	mov	r2, r6
   17d70:	mov	r0, r5
   17d74:	bl	14344 <_start@@Base+0x1c50>
   17d78:	mov	r4, r0
   17d7c:	ldr	r3, [sp, #320]	; 0x140
   17d80:	cmp	r3, #0
   17d84:	bne	17dec <_start@@Base+0x56f8>
   17d88:	ldr	r3, [r5, #24]
   17d8c:	cmp	r3, #0
   17d90:	bne	17da8 <_start@@Base+0x56b4>
   17d94:	ldr	r0, [r5]
   17d98:	bl	1d730 <flatcc_builder_end_table@@Base>
   17d9c:	cmp	r0, #0
   17da0:	str	r0, [sp, #312]	; 0x138
   17da4:	bne	17dc0 <_start@@Base+0x56cc>
   17da8:	mov	r1, r4
   17dac:	mov	r3, #33	; 0x21
   17db0:	mov	r2, r6
   17db4:	mov	r0, r5
   17db8:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   17dbc:	mov	r4, r0
   17dc0:	ldr	r3, [sp, #312]	; 0x138
   17dc4:	cmp	r3, #0
   17dc8:	beq	160f4 <_start@@Base+0x3a00>
   17dcc:	mov	r1, #14
   17dd0:	ldr	r0, [r5]
   17dd4:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   17dd8:	cmp	r0, #0
   17ddc:	beq	160f4 <_start@@Base+0x3a00>
   17de0:	ldr	r3, [sp, #312]	; 0x138
   17de4:	str	r3, [r0]
   17de8:	b	15e8c <_start@@Base+0x3798>
   17dec:	mov	r2, r6
   17df0:	mov	r1, r4
   17df4:	mov	r0, r5
   17df8:	bl	1369c <_start@@Base+0xfa8>
   17dfc:	mov	r1, r6
   17e00:	mov	r4, r0
   17e04:	bl	127e8 <_start@@Base+0xf4>
   17e08:	ldr	r3, [pc, #300]	; 17f3c <_start@@Base+0x5848>
   17e0c:	mvn	r2, #0
   17e10:	cmp	r1, r3
   17e14:	cmpeq	r0, r2
   17e18:	bhi	17f44 <_start@@Base+0x5850>
   17e1c:	and	r3, r0, #-16777216	; 0xff000000
   17e20:	str	r3, [sp, #232]	; 0xe8
   17e24:	str	r1, [sp, #236]	; 0xec
   17e28:	ldrd	r2, [sp, #232]	; 0xe8
   17e2c:	cmp	r3, r9
   17e30:	cmpeq	r2, r8
   17e34:	bne	180b8 <_start@@Base+0x59c4>
   17e38:	mov	r3, #5
   17e3c:	mov	r2, r6
   17e40:	mov	r1, r4
   17e44:	mov	r0, r5
   17e48:	bl	14498 <_start@@Base+0x1da4>
   17e4c:	cmp	r4, r0
   17e50:	mov	r7, r0
   17e54:	beq	180b8 <_start@@Base+0x59c4>
   17e58:	add	r2, sp, #328	; 0x148
   17e5c:	mov	r3, #0
   17e60:	mov	r1, r0
   17e64:	mov	sl, r2
   17e68:	mov	r0, r5
   17e6c:	strh	r3, [r2]
   17e70:	mov	r3, r2
   17e74:	mov	r2, r6
   17e78:	bl	146e4 <_start@@Base+0x1ff0>
   17e7c:	cmp	r7, r0
   17e80:	mov	r4, r0
   17e84:	bne	17eb0 <_start@@Base+0x57bc>
   17e88:	mov	r1, r0
   17e8c:	ldr	r3, [pc, #172]	; 17f40 <_start@@Base+0x584c>
   17e90:	mov	r2, r6
   17e94:	mov	r0, r5
   17e98:	str	sl, [sp]
   17e9c:	bl	14d28 <_start@@Base+0x2634>
   17ea0:	cmp	r6, r0
   17ea4:	cmpne	r4, r0
   17ea8:	mov	r4, r0
   17eac:	beq	17da8 <_start@@Base+0x56b4>
   17eb0:	add	r3, sp, #328	; 0x148
   17eb4:	ldrh	r3, [r3]
   17eb8:	cmp	r3, #0
   17ebc:	bne	17ecc <_start@@Base+0x57d8>
   17ec0:	ldr	r3, [r5, #8]
   17ec4:	tst	r3, #2
   17ec8:	beq	17ef4 <_start@@Base+0x5800>
   17ecc:	mov	r3, #2
   17ed0:	ldr	r0, [r5]
   17ed4:	mov	r2, r3
   17ed8:	mov	r1, r3
   17edc:	bl	1e08c <flatcc_builder_table_add@@Base>
   17ee0:	cmp	r0, #0
   17ee4:	beq	17da8 <_start@@Base+0x56b4>
   17ee8:	add	r3, sp, #328	; 0x148
   17eec:	ldrh	r3, [r3]
   17ef0:	strh	r3, [r0]
   17ef4:	mov	r1, r4
   17ef8:	add	r3, sp, #320	; 0x140
   17efc:	mov	r2, r6
   17f00:	mov	r0, r5
   17f04:	bl	13518 <_start@@Base+0xe24>
   17f08:	mov	r4, r0
   17f0c:	b	17d7c <_start@@Base+0x5688>
   17f10:	strbvs	r0, [r4, #-0]!
   17f14:	mcrvs	3, 3, r7, cr5, cr4, {3}
   17f18:	rsbvs	r6, pc, #108, 30	; 0x1b0
   17f1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17f20:	ldrbvs	pc, [pc, #4095]!	; 18f27 <_start@@Base+0x6833>	; <UNPREDICTABLE>
   17f24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17f28:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   17f2c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   17f30:	strvc	r0, [r0], #-0
   17f34:	cmnvs	pc, #461373440	; 0x1b800000
   17f38:	andeq	r4, r3, r8, ror #2
   17f3c:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   17f40:	andeq	r4, r3, r4, ror r1
   17f44:	bic	r3, r1, #255	; 0xff
   17f48:	mov	r7, #0
   17f4c:	add	fp, pc, #916	; 0x394
   17f50:	ldrd	sl, [fp]
   17f54:	str	r7, [sp, #240]	; 0xf0
   17f58:	str	r3, [sp, #244]	; 0xf4
   17f5c:	ldrd	r2, [sp, #240]	; 0xf0
   17f60:	cmp	r3, fp
   17f64:	cmpeq	r2, sl
   17f68:	bne	18030 <_start@@Base+0x593c>
   17f6c:	mov	r3, #3
   17f70:	mov	r2, r6
   17f74:	mov	r1, r4
   17f78:	mov	r0, r5
   17f7c:	bl	14498 <_start@@Base+0x1da4>
   17f80:	cmp	r4, r0
   17f84:	mov	r7, r0
   17f88:	beq	180b8 <_start@@Base+0x59c4>
   17f8c:	add	r1, sp, #328	; 0x148
   17f90:	mov	r2, #0
   17f94:	mov	r3, #0
   17f98:	mov	sl, r1
   17f9c:	mov	r0, r5
   17fa0:	strd	r2, [r1]
   17fa4:	mov	r3, r1
   17fa8:	mov	r2, r6
   17fac:	mov	r1, r7
   17fb0:	bl	135f0 <_start@@Base+0xefc>
   17fb4:	cmp	r7, r0
   17fb8:	mov	r4, r0
   17fbc:	bne	17fe8 <_start@@Base+0x58f4>
   17fc0:	mov	r1, r0
   17fc4:	ldr	r3, [pc, #820]	; 18300 <_start@@Base+0x5c0c>
   17fc8:	mov	r2, r6
   17fcc:	mov	r0, r5
   17fd0:	str	sl, [sp]
   17fd4:	bl	15b88 <_start@@Base+0x3494>
   17fd8:	cmp	r6, r0
   17fdc:	cmpne	r4, r0
   17fe0:	mov	r4, r0
   17fe4:	beq	17da8 <_start@@Base+0x56b4>
   17fe8:	add	r3, sp, #328	; 0x148
   17fec:	ldrd	r2, [r3]
   17ff0:	orrs	r3, r2, r3
   17ff4:	bne	18004 <_start@@Base+0x5910>
   17ff8:	ldr	r3, [r5, #8]
   17ffc:	tst	r3, #2
   18000:	beq	17ef4 <_start@@Base+0x5800>
   18004:	mov	r3, #8
   18008:	mov	r1, #1
   1800c:	ldr	r0, [r5]
   18010:	mov	r2, r3
   18014:	bl	1e08c <flatcc_builder_table_add@@Base>
   18018:	cmp	r0, #0
   1801c:	beq	17da8 <_start@@Base+0x56b4>
   18020:	add	r3, sp, #328	; 0x148
   18024:	ldrd	r2, [r3]
   18028:	strd	r2, [r0]
   1802c:	b	17ef4 <_start@@Base+0x5800>
   18030:	lsr	r3, r1, #16
   18034:	str	r7, [sp, #32]
   18038:	mov	r2, #0
   1803c:	lsl	r3, r3, #16
   18040:	str	r3, [sp, #36]	; 0x24
   18044:	ldr	r3, [pc, #696]	; 18304 <_start@@Base+0x5c10>
   18048:	ldrd	r0, [sp, #32]
   1804c:	cmp	r1, r3
   18050:	cmpeq	r0, r2
   18054:	bne	180b8 <_start@@Base+0x59c4>
   18058:	mov	r1, r4
   1805c:	mov	r3, #2
   18060:	mov	r2, r6
   18064:	mov	r0, r5
   18068:	bl	14498 <_start@@Base+0x1da4>
   1806c:	cmp	r4, r0
   18070:	mov	r1, r0
   18074:	beq	180b8 <_start@@Base+0x59c4>
   18078:	add	r3, sp, #324	; 0x144
   1807c:	mov	r2, r6
   18080:	mov	r0, r5
   18084:	bl	21098 <flatcc_json_parser_build_string@@Base>
   18088:	ldr	r3, [sp, #324]	; 0x144
   1808c:	mov	r4, r0
   18090:	cmp	r3, #0
   18094:	beq	17da8 <_start@@Base+0x56b4>
   18098:	mov	r1, r7
   1809c:	ldr	r0, [r5]
   180a0:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   180a4:	cmp	r0, #0
   180a8:	beq	17da8 <_start@@Base+0x56b4>
   180ac:	ldr	r3, [sp, #324]	; 0x144
   180b0:	str	r3, [r0]
   180b4:	b	17ef4 <_start@@Base+0x5800>
   180b8:	mov	r1, r4
   180bc:	mov	r2, r6
   180c0:	mov	r0, r5
   180c4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   180c8:	mov	r4, r0
   180cc:	b	17ef4 <_start@@Base+0x5800>
   180d0:	mov	r1, r0
   180d4:	mov	r2, r6
   180d8:	mov	r0, r5
   180dc:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   180e0:	mov	r4, r0
   180e4:	b	15e8c <_start@@Base+0x3798>
   180e8:	mov	r2, r6
   180ec:	mov	r1, r7
   180f0:	mov	r0, r5
   180f4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   180f8:	mov	r4, r0
   180fc:	b	15e8c <_start@@Base+0x3798>
   18100:	mov	r2, r6
   18104:	mov	r1, r7
   18108:	mov	r0, r5
   1810c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18110:	mov	r4, r0
   18114:	b	15e8c <_start@@Base+0x3798>
   18118:	lsr	r3, r0, #16
   1811c:	str	r1, [sp, #44]	; 0x2c
   18120:	lsl	r3, r3, #16
   18124:	str	r3, [sp, #40]	; 0x28
   18128:	add	r3, pc, #448	; 0x1c0
   1812c:	ldrd	r2, [r3]
   18130:	ldrd	r0, [sp, #40]	; 0x28
   18134:	cmp	r1, r3
   18138:	cmpeq	r0, r2
   1813c:	bne	18214 <_start@@Base+0x5b20>
   18140:	mov	r3, #6
   18144:	mov	r2, r6
   18148:	mov	r1, r7
   1814c:	mov	r0, r5
   18150:	bl	14498 <_start@@Base+0x1da4>
   18154:	cmp	r7, r0
   18158:	mov	r8, r0
   1815c:	beq	181fc <_start@@Base+0x5b08>
   18160:	mov	r3, #0
   18164:	add	r7, sp, #328	; 0x148
   18168:	mov	r1, r0
   1816c:	mov	r2, r6
   18170:	mov	r0, r5
   18174:	str	r3, [sp, #328]	; 0x148
   18178:	mov	r3, r7
   1817c:	bl	205a8 <flatcc_json_parser_float@@Base>
   18180:	cmp	r8, r0
   18184:	mov	r4, r0
   18188:	bne	181b4 <_start@@Base+0x5ac0>
   1818c:	mov	r1, r0
   18190:	ldr	r3, [pc, #368]	; 18308 <_start@@Base+0x5c14>
   18194:	mov	r2, r6
   18198:	mov	r0, r5
   1819c:	str	r7, [sp]
   181a0:	bl	13854 <_start@@Base+0x1160>
   181a4:	cmp	r6, r0
   181a8:	cmpne	r4, r0
   181ac:	mov	r4, r0
   181b0:	beq	160f4 <_start@@Base+0x3a00>
   181b4:	vldr	s15, [pc, #316]	; 182f8 <_start@@Base+0x5c04>
   181b8:	vldr	s14, [sp, #328]	; 0x148
   181bc:	vcmp.f32	s14, s15
   181c0:	vmrs	APSR_nzcv, fpscr
   181c4:	bne	181d4 <_start@@Base+0x5ae0>
   181c8:	ldr	r3, [r5, #8]
   181cc:	tst	r3, #2
   181d0:	beq	15e8c <_start@@Base+0x3798>
   181d4:	mov	r3, #4
   181d8:	mov	r1, #26
   181dc:	ldr	r0, [r5]
   181e0:	mov	r2, r3
   181e4:	bl	1e08c <flatcc_builder_table_add@@Base>
   181e8:	cmp	r0, #0
   181ec:	beq	160f4 <_start@@Base+0x3a00>
   181f0:	ldr	r3, [sp, #328]	; 0x148
   181f4:	str	r3, [r0]
   181f8:	b	15e8c <_start@@Base+0x3798>
   181fc:	mov	r2, r6
   18200:	mov	r1, r7
   18204:	mov	r0, r5
   18208:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1820c:	mov	r4, r0
   18210:	b	15e8c <_start@@Base+0x3798>
   18214:	mov	r3, #5
   18218:	mov	r2, r6
   1821c:	mov	r1, r7
   18220:	mov	r0, r5
   18224:	bl	14498 <_start@@Base+0x1da4>
   18228:	cmp	r7, r0
   1822c:	mov	r8, r0
   18230:	beq	182d0 <_start@@Base+0x5bdc>
   18234:	mov	r3, #0
   18238:	add	r7, sp, #328	; 0x148
   1823c:	mov	r1, r0
   18240:	mov	r2, r6
   18244:	mov	r0, r5
   18248:	str	r3, [sp, #328]	; 0x148
   1824c:	mov	r3, r7
   18250:	bl	205a8 <flatcc_json_parser_float@@Base>
   18254:	cmp	r8, r0
   18258:	mov	r4, r0
   1825c:	bne	18288 <_start@@Base+0x5b94>
   18260:	mov	r1, r0
   18264:	ldr	r3, [pc, #160]	; 1830c <_start@@Base+0x5c18>
   18268:	mov	r2, r6
   1826c:	mov	r0, r5
   18270:	str	r7, [sp]
   18274:	bl	13854 <_start@@Base+0x1160>
   18278:	cmp	r6, r0
   1827c:	cmpne	r4, r0
   18280:	mov	r4, r0
   18284:	beq	160f4 <_start@@Base+0x3a00>
   18288:	vldr	s15, [pc, #108]	; 182fc <_start@@Base+0x5c08>
   1828c:	vldr	s14, [sp, #328]	; 0x148
   18290:	vcmp.f32	s14, s15
   18294:	vmrs	APSR_nzcv, fpscr
   18298:	bne	182a8 <_start@@Base+0x5bb4>
   1829c:	ldr	r3, [r5, #8]
   182a0:	tst	r3, #2
   182a4:	beq	15e8c <_start@@Base+0x3798>
   182a8:	mov	r3, #4
   182ac:	mov	r1, #25
   182b0:	ldr	r0, [r5]
   182b4:	mov	r2, r3
   182b8:	bl	1e08c <flatcc_builder_table_add@@Base>
   182bc:	cmp	r0, #0
   182c0:	beq	160f4 <_start@@Base+0x3a00>
   182c4:	ldr	r3, [sp, #328]	; 0x148
   182c8:	str	r3, [r0]
   182cc:	b	15e8c <_start@@Base+0x3798>
   182d0:	mov	r2, r6
   182d4:	mov	r1, r7
   182d8:	mov	r0, r5
   182dc:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   182e0:	mov	r4, r0
   182e4:	b	15e8c <_start@@Base+0x3798>
   182e8:	andeq	r0, r0, r0
   182ec:	strbtvc	r6, [r1], -r0, lsl #24
   182f0:	ldrtvs	r0, [r2], -r0
   182f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   182f8:	submi	r0, r0, r0
   182fc:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   18300:	andeq	r4, r3, r0, lsl #3
   18304:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   18308:	andeq	r4, r3, ip, lsl #3
   1830c:	muleq	r3, r8, r1
   18310:	add	r3, pc, #840	; 0x348
   18314:	ldrd	r2, [r3]
   18318:	cmp	r1, r3
   1831c:	cmpeq	r0, r2
   18320:	bhi	18434 <_start@@Base+0x5d40>
   18324:	lsr	r3, r0, #16
   18328:	str	r1, [sp, #52]	; 0x34
   1832c:	lsl	r3, r3, #16
   18330:	str	r3, [sp, #48]	; 0x30
   18334:	add	r3, pc, #812	; 0x32c
   18338:	ldrd	r2, [r3]
   1833c:	ldrd	r0, [sp, #48]	; 0x30
   18340:	cmp	r1, r3
   18344:	cmpeq	r0, r2
   18348:	bne	1841c <_start@@Base+0x5d28>
   1834c:	mov	r3, #6
   18350:	mov	r2, r6
   18354:	mov	r1, r7
   18358:	mov	r0, r5
   1835c:	bl	14498 <_start@@Base+0x1da4>
   18360:	cmp	r7, r0
   18364:	mov	r8, r0
   18368:	beq	18404 <_start@@Base+0x5d10>
   1836c:	mov	r3, #0
   18370:	add	r7, sp, #328	; 0x148
   18374:	mov	r1, r0
   18378:	mov	r2, r6
   1837c:	mov	r0, r5
   18380:	str	r3, [sp, #328]	; 0x148
   18384:	mov	r3, r7
   18388:	bl	205a8 <flatcc_json_parser_float@@Base>
   1838c:	cmp	r8, r0
   18390:	mov	r4, r0
   18394:	bne	183c0 <_start@@Base+0x5ccc>
   18398:	mov	r1, r0
   1839c:	ldr	r3, [pc, #740]	; 18688 <_start@@Base+0x5f94>
   183a0:	mov	r2, r6
   183a4:	mov	r0, r5
   183a8:	str	r7, [sp]
   183ac:	bl	13854 <_start@@Base+0x1160>
   183b0:	cmp	r6, r0
   183b4:	cmpne	r4, r0
   183b8:	mov	r4, r0
   183bc:	beq	160f4 <_start@@Base+0x3a00>
   183c0:	vldr	s15, [sp, #328]	; 0x148
   183c4:	vcmp.f32	s15, #0.0
   183c8:	vmrs	APSR_nzcv, fpscr
   183cc:	bne	183dc <_start@@Base+0x5ce8>
   183d0:	ldr	r3, [r5, #8]
   183d4:	tst	r3, #2
   183d8:	beq	15e8c <_start@@Base+0x3798>
   183dc:	mov	r3, #4
   183e0:	mov	r1, #27
   183e4:	ldr	r0, [r5]
   183e8:	mov	r2, r3
   183ec:	bl	1e08c <flatcc_builder_table_add@@Base>
   183f0:	cmp	r0, #0
   183f4:	beq	160f4 <_start@@Base+0x3a00>
   183f8:	ldr	r3, [sp, #328]	; 0x148
   183fc:	str	r3, [r0]
   18400:	b	15e8c <_start@@Base+0x3798>
   18404:	mov	r2, r6
   18408:	mov	r1, r7
   1840c:	mov	r0, r5
   18410:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18414:	mov	r4, r0
   18418:	b	15e8c <_start@@Base+0x3798>
   1841c:	mov	r2, r6
   18420:	mov	r1, r7
   18424:	mov	r0, r5
   18428:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1842c:	mov	r4, r0
   18430:	b	15e8c <_start@@Base+0x3798>
   18434:	add	r3, pc, #564	; 0x234
   18438:	ldrd	r2, [r3]
   1843c:	cmp	r1, r3
   18440:	cmpeq	r0, r2
   18444:	bne	18ce0 <_start@@Base+0x65ec>
   18448:	add	r7, r7, #8
   1844c:	mov	r1, r6
   18450:	mov	r0, r7
   18454:	bl	127e8 <_start@@Base+0xf4>
   18458:	add	r3, pc, #536	; 0x218
   1845c:	ldrd	r2, [r3]
   18460:	cmp	r1, r3
   18464:	cmpeq	r0, r2
   18468:	bhi	18694 <_start@@Base+0x5fa0>
   1846c:	add	r3, pc, #524	; 0x20c
   18470:	ldrd	r2, [r3]
   18474:	cmp	r1, r3
   18478:	cmpeq	r0, r2
   1847c:	bne	18648 <_start@@Base+0x5f54>
   18480:	mov	r3, #8
   18484:	mov	r2, r6
   18488:	mov	r1, r7
   1848c:	mov	r0, r5
   18490:	bl	14498 <_start@@Base+0x1da4>
   18494:	cmp	r7, r0
   18498:	mov	r8, r0
   1849c:	beq	18534 <_start@@Base+0x5e40>
   184a0:	mov	r3, #0
   184a4:	add	r7, sp, #328	; 0x148
   184a8:	mov	r1, r0
   184ac:	mov	r2, r6
   184b0:	mov	r0, r5
   184b4:	str	r3, [sp, #328]	; 0x148
   184b8:	mov	r3, r7
   184bc:	bl	148b4 <_start@@Base+0x21c0>
   184c0:	cmp	r8, r0
   184c4:	mov	r4, r0
   184c8:	bne	184f4 <_start@@Base+0x5e00>
   184cc:	mov	r1, r0
   184d0:	ldr	r3, [pc, #436]	; 1868c <_start@@Base+0x5f98>
   184d4:	mov	r2, r6
   184d8:	mov	r0, r5
   184dc:	str	r7, [sp]
   184e0:	bl	14fa0 <_start@@Base+0x28ac>
   184e4:	cmp	r6, r0
   184e8:	cmpne	r4, r0
   184ec:	mov	r4, r0
   184f0:	beq	160f4 <_start@@Base+0x3a00>
   184f4:	ldr	r3, [sp, #328]	; 0x148
   184f8:	cmp	r3, #0
   184fc:	bne	1850c <_start@@Base+0x5e18>
   18500:	ldr	r3, [r5, #8]
   18504:	tst	r3, #2
   18508:	beq	15e8c <_start@@Base+0x3798>
   1850c:	mov	r3, #4
   18510:	mov	r1, #16
   18514:	ldr	r0, [r5]
   18518:	mov	r2, r3
   1851c:	bl	1e08c <flatcc_builder_table_add@@Base>
   18520:	cmp	r0, #0
   18524:	beq	160f4 <_start@@Base+0x3a00>
   18528:	ldr	r3, [sp, #328]	; 0x148
   1852c:	str	r3, [r0]
   18530:	b	15e8c <_start@@Base+0x3798>
   18534:	add	r7, r7, #8
   18538:	mov	r1, r6
   1853c:	mov	r0, r7
   18540:	bl	127e8 <_start@@Base+0xf4>
   18544:	mov	r3, #0
   18548:	str	r3, [sp, #248]	; 0xf8
   1854c:	and	r3, r1, #-16777216	; 0xff000000
   18550:	str	r3, [sp, #252]	; 0xfc
   18554:	ldrd	r2, [sp, #248]	; 0xf8
   18558:	cmp	r3, #1627389952	; 0x61000000
   1855c:	cmpeq	r2, #0
   18560:	bne	18630 <_start@@Base+0x5f3c>
   18564:	mov	r3, #1
   18568:	mov	r2, r6
   1856c:	mov	r1, r7
   18570:	mov	r0, r5
   18574:	bl	14498 <_start@@Base+0x1da4>
   18578:	cmp	r7, r0
   1857c:	mov	r8, r0
   18580:	beq	18618 <_start@@Base+0x5f24>
   18584:	mov	r3, #0
   18588:	add	r7, sp, #328	; 0x148
   1858c:	mov	r1, r0
   18590:	mov	r2, r6
   18594:	mov	r0, r5
   18598:	str	r3, [sp, #328]	; 0x148
   1859c:	mov	r3, r7
   185a0:	bl	148b4 <_start@@Base+0x21c0>
   185a4:	cmp	r8, r0
   185a8:	mov	r4, r0
   185ac:	bne	185d8 <_start@@Base+0x5ee4>
   185b0:	mov	r1, r0
   185b4:	ldr	r3, [pc, #212]	; 18690 <_start@@Base+0x5f9c>
   185b8:	mov	r2, r6
   185bc:	mov	r0, r5
   185c0:	str	r7, [sp]
   185c4:	bl	14fa0 <_start@@Base+0x28ac>
   185c8:	cmp	r6, r0
   185cc:	cmpne	r4, r0
   185d0:	mov	r4, r0
   185d4:	beq	160f4 <_start@@Base+0x3a00>
   185d8:	ldr	r3, [sp, #328]	; 0x148
   185dc:	cmp	r3, #0
   185e0:	bne	185f0 <_start@@Base+0x5efc>
   185e4:	ldr	r3, [r5, #8]
   185e8:	tst	r3, #2
   185ec:	beq	15e8c <_start@@Base+0x3798>
   185f0:	mov	r3, #4
   185f4:	mov	r1, #20
   185f8:	ldr	r0, [r5]
   185fc:	mov	r2, r3
   18600:	bl	1e08c <flatcc_builder_table_add@@Base>
   18604:	cmp	r0, #0
   18608:	beq	160f4 <_start@@Base+0x3a00>
   1860c:	ldr	r3, [sp, #328]	; 0x148
   18610:	str	r3, [r0]
   18614:	b	15e8c <_start@@Base+0x3798>
   18618:	mov	r1, r0
   1861c:	mov	r2, r6
   18620:	mov	r0, r5
   18624:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18628:	mov	r4, r0
   1862c:	b	15e8c <_start@@Base+0x3798>
   18630:	mov	r2, r6
   18634:	mov	r1, r7
   18638:	mov	r0, r5
   1863c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18640:	mov	r4, r0
   18644:	b	15e8c <_start@@Base+0x3798>
   18648:	mov	r2, r6
   1864c:	mov	r1, r7
   18650:	mov	r0, r5
   18654:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18658:	mov	r4, r0
   1865c:	b	15e8c <_start@@Base+0x3798>
   18660:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   18664:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   18668:	ldrtvs	r0, [r3], -r0
   1866c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   18670:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   18674:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   18678:			; <UNDEFINED> instruction: 0x666e7630
   1867c:	teqvc	r6, #1593835520	; 0x5f000000
   18680:			; <UNDEFINED> instruction: 0x666e7631
   18684:	teqvc	r3, #-268435451	; 0xf0000005
   18688:	andeq	r4, r3, r4, lsr #3
   1868c:			; <UNDEFINED> instruction: 0x000341b0
   18690:			; <UNDEFINED> instruction: 0x000341bc
   18694:	add	r3, pc, #1004	; 0x3ec
   18698:	ldrd	r2, [r3]
   1869c:	cmp	r1, r3
   186a0:	cmpeq	r0, r2
   186a4:	bhi	188c0 <_start@@Base+0x61cc>
   186a8:	add	r3, pc, #992	; 0x3e0
   186ac:	ldrd	r2, [r3]
   186b0:	cmp	r1, r3
   186b4:	cmpeq	r0, r2
   186b8:	bne	188a8 <_start@@Base+0x61b4>
   186bc:	mov	r3, #8
   186c0:	mov	r2, r6
   186c4:	mov	r1, r7
   186c8:	mov	r0, r5
   186cc:	bl	14498 <_start@@Base+0x1da4>
   186d0:	cmp	r7, r0
   186d4:	mov	r8, r0
   186d8:	beq	18780 <_start@@Base+0x608c>
   186dc:	add	r1, sp, #328	; 0x148
   186e0:	mov	r2, #0
   186e4:	mov	r3, #0
   186e8:	mov	r7, r1
   186ec:	mov	r0, r5
   186f0:	strd	r2, [r1]
   186f4:	mov	r3, r1
   186f8:	mov	r2, r6
   186fc:	mov	r1, r8
   18700:	bl	135f0 <_start@@Base+0xefc>
   18704:	cmp	r8, r0
   18708:	mov	r4, r0
   1870c:	bne	18738 <_start@@Base+0x6044>
   18710:	mov	r1, r0
   18714:	ldr	r3, [pc, #900]	; 18aa0 <_start@@Base+0x63ac>
   18718:	mov	r2, r6
   1871c:	mov	r0, r5
   18720:	str	r7, [sp]
   18724:	bl	15b88 <_start@@Base+0x3494>
   18728:	cmp	r6, r0
   1872c:	cmpne	r4, r0
   18730:	mov	r4, r0
   18734:	beq	160f4 <_start@@Base+0x3a00>
   18738:	add	r3, sp, #328	; 0x148
   1873c:	ldrd	r2, [r3]
   18740:	orrs	r3, r2, r3
   18744:	bne	18754 <_start@@Base+0x6060>
   18748:	ldr	r3, [r5, #8]
   1874c:	tst	r3, #2
   18750:	beq	15e8c <_start@@Base+0x3798>
   18754:	mov	r3, #8
   18758:	mov	r1, #18
   1875c:	ldr	r0, [r5]
   18760:	mov	r2, r3
   18764:	bl	1e08c <flatcc_builder_table_add@@Base>
   18768:	cmp	r0, #0
   1876c:	beq	160f4 <_start@@Base+0x3a00>
   18770:	add	r3, sp, #328	; 0x148
   18774:	ldrd	r2, [r3]
   18778:	strd	r2, [r0]
   1877c:	b	15e8c <_start@@Base+0x3798>
   18780:	add	r7, r7, #8
   18784:	mov	r1, r6
   18788:	mov	r0, r7
   1878c:	bl	127e8 <_start@@Base+0xf4>
   18790:	mov	r3, #0
   18794:	str	r3, [sp, #256]	; 0x100
   18798:	and	r3, r1, #-16777216	; 0xff000000
   1879c:	str	r3, [sp, #260]	; 0x104
   187a0:	add	r3, sp, #256	; 0x100
   187a4:	ldrd	r2, [r3]
   187a8:	cmp	r3, #1627389952	; 0x61000000
   187ac:	cmpeq	r2, #0
   187b0:	bne	18890 <_start@@Base+0x619c>
   187b4:	mov	r3, #1
   187b8:	mov	r2, r6
   187bc:	mov	r1, r7
   187c0:	mov	r0, r5
   187c4:	bl	14498 <_start@@Base+0x1da4>
   187c8:	cmp	r7, r0
   187cc:	mov	r8, r0
   187d0:	beq	18878 <_start@@Base+0x6184>
   187d4:	add	r1, sp, #328	; 0x148
   187d8:	mov	r2, #0
   187dc:	mov	r3, #0
   187e0:	mov	r7, r1
   187e4:	mov	r0, r5
   187e8:	strd	r2, [r1]
   187ec:	mov	r3, r1
   187f0:	mov	r2, r6
   187f4:	mov	r1, r8
   187f8:	bl	135f0 <_start@@Base+0xefc>
   187fc:	cmp	r8, r0
   18800:	mov	r4, r0
   18804:	bne	18830 <_start@@Base+0x613c>
   18808:	mov	r1, r0
   1880c:	ldr	r3, [pc, #656]	; 18aa4 <_start@@Base+0x63b0>
   18810:	mov	r2, r6
   18814:	mov	r0, r5
   18818:	str	r7, [sp]
   1881c:	bl	15b88 <_start@@Base+0x3494>
   18820:	cmp	r6, r0
   18824:	cmpne	r4, r0
   18828:	mov	r4, r0
   1882c:	beq	160f4 <_start@@Base+0x3a00>
   18830:	add	r3, sp, #328	; 0x148
   18834:	ldrd	r2, [r3]
   18838:	orrs	r3, r2, r3
   1883c:	bne	1884c <_start@@Base+0x6158>
   18840:	ldr	r3, [r5, #8]
   18844:	tst	r3, #2
   18848:	beq	15e8c <_start@@Base+0x3798>
   1884c:	mov	r3, #8
   18850:	mov	r1, #22
   18854:	ldr	r0, [r5]
   18858:	mov	r2, r3
   1885c:	bl	1e08c <flatcc_builder_table_add@@Base>
   18860:	cmp	r0, #0
   18864:	beq	160f4 <_start@@Base+0x3a00>
   18868:	add	r3, sp, #328	; 0x148
   1886c:	ldrd	r2, [r3]
   18870:	strd	r2, [r0]
   18874:	b	15e8c <_start@@Base+0x3798>
   18878:	mov	r2, r6
   1887c:	mov	r1, r7
   18880:	mov	r0, r5
   18884:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18888:	mov	r4, r0
   1888c:	b	15e8c <_start@@Base+0x3798>
   18890:	mov	r2, r6
   18894:	mov	r1, r7
   18898:	mov	r0, r5
   1889c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   188a0:	mov	r4, r0
   188a4:	b	15e8c <_start@@Base+0x3798>
   188a8:	mov	r2, r6
   188ac:	mov	r1, r7
   188b0:	mov	r0, r5
   188b4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   188b8:	mov	r4, r0
   188bc:	b	15e8c <_start@@Base+0x3798>
   188c0:	add	r3, pc, #464	; 0x1d0
   188c4:	ldrd	r2, [r3]
   188c8:	cmp	r1, r3
   188cc:	cmpeq	r0, r2
   188d0:	bne	18ac8 <_start@@Base+0x63d4>
   188d4:	mov	r3, #8
   188d8:	mov	r2, r6
   188dc:	mov	r1, r7
   188e0:	mov	r0, r5
   188e4:	bl	14498 <_start@@Base+0x1da4>
   188e8:	cmp	r7, r0
   188ec:	mov	r8, r0
   188f0:	beq	18988 <_start@@Base+0x6294>
   188f4:	mov	r3, #0
   188f8:	add	r7, sp, #328	; 0x148
   188fc:	mov	r1, r0
   18900:	mov	r2, r6
   18904:	mov	r0, r5
   18908:	str	r3, [sp, #328]	; 0x148
   1890c:	mov	r3, r7
   18910:	bl	14648 <_start@@Base+0x1f54>
   18914:	cmp	r8, r0
   18918:	mov	r4, r0
   1891c:	bne	18948 <_start@@Base+0x6254>
   18920:	mov	r1, r0
   18924:	ldr	r3, [pc, #380]	; 18aa8 <_start@@Base+0x63b4>
   18928:	mov	r2, r6
   1892c:	mov	r0, r5
   18930:	str	r7, [sp]
   18934:	bl	14bf0 <_start@@Base+0x24fc>
   18938:	cmp	r6, r0
   1893c:	cmpne	r4, r0
   18940:	mov	r4, r0
   18944:	beq	160f4 <_start@@Base+0x3a00>
   18948:	ldr	r3, [sp, #328]	; 0x148
   1894c:	cmp	r3, #0
   18950:	bne	18960 <_start@@Base+0x626c>
   18954:	ldr	r3, [r5, #8]
   18958:	tst	r3, #2
   1895c:	beq	15e8c <_start@@Base+0x3798>
   18960:	mov	r3, #4
   18964:	mov	r1, #17
   18968:	ldr	r0, [r5]
   1896c:	mov	r2, r3
   18970:	bl	1e08c <flatcc_builder_table_add@@Base>
   18974:	cmp	r0, #0
   18978:	beq	160f4 <_start@@Base+0x3a00>
   1897c:	ldr	r3, [sp, #328]	; 0x148
   18980:	str	r3, [r0]
   18984:	b	15e8c <_start@@Base+0x3798>
   18988:	add	r7, r7, #8
   1898c:	mov	r1, r6
   18990:	mov	r0, r7
   18994:	bl	127e8 <_start@@Base+0xf4>
   18998:	mov	r3, #0
   1899c:	str	r3, [sp, #264]	; 0x108
   189a0:	and	r3, r1, #-16777216	; 0xff000000
   189a4:	str	r3, [sp, #268]	; 0x10c
   189a8:	add	r3, sp, #264	; 0x108
   189ac:	ldrd	r2, [r3]
   189b0:	cmp	r3, #1627389952	; 0x61000000
   189b4:	cmpeq	r2, #0
   189b8:	bne	18ab0 <_start@@Base+0x63bc>
   189bc:	mov	r3, #1
   189c0:	mov	r2, r6
   189c4:	mov	r1, r7
   189c8:	mov	r0, r5
   189cc:	bl	14498 <_start@@Base+0x1da4>
   189d0:	cmp	r7, r0
   189d4:	mov	r8, r0
   189d8:	beq	18a70 <_start@@Base+0x637c>
   189dc:	mov	r3, #0
   189e0:	add	r7, sp, #328	; 0x148
   189e4:	mov	r1, r0
   189e8:	mov	r2, r6
   189ec:	mov	r0, r5
   189f0:	str	r3, [sp, #328]	; 0x148
   189f4:	mov	r3, r7
   189f8:	bl	14648 <_start@@Base+0x1f54>
   189fc:	cmp	r8, r0
   18a00:	mov	r4, r0
   18a04:	bne	18a30 <_start@@Base+0x633c>
   18a08:	mov	r1, r0
   18a0c:	ldr	r3, [pc, #152]	; 18aac <_start@@Base+0x63b8>
   18a10:	mov	r2, r6
   18a14:	mov	r0, r5
   18a18:	str	r7, [sp]
   18a1c:	bl	14bf0 <_start@@Base+0x24fc>
   18a20:	cmp	r6, r0
   18a24:	cmpne	r4, r0
   18a28:	mov	r4, r0
   18a2c:	beq	160f4 <_start@@Base+0x3a00>
   18a30:	ldr	r3, [sp, #328]	; 0x148
   18a34:	cmp	r3, #0
   18a38:	bne	18a48 <_start@@Base+0x6354>
   18a3c:	ldr	r3, [r5, #8]
   18a40:	tst	r3, #2
   18a44:	beq	15e8c <_start@@Base+0x3798>
   18a48:	mov	r3, #4
   18a4c:	mov	r1, #21
   18a50:	ldr	r0, [r5]
   18a54:	mov	r2, r3
   18a58:	bl	1e08c <flatcc_builder_table_add@@Base>
   18a5c:	cmp	r0, #0
   18a60:	beq	160f4 <_start@@Base+0x3a00>
   18a64:	ldr	r3, [sp, #328]	; 0x148
   18a68:	str	r3, [r0]
   18a6c:	b	15e8c <_start@@Base+0x3798>
   18a70:	mov	r2, r6
   18a74:	mov	r1, r7
   18a78:	mov	r0, r5
   18a7c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18a80:	mov	r4, r0
   18a84:	b	15e8c <_start@@Base+0x3798>
   18a88:			; <UNDEFINED> instruction: 0x666e7630
   18a8c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   18a90:			; <UNDEFINED> instruction: 0x666e7631
   18a94:	teqvc	r6, #1593835520	; 0x5f000000
   18a98:			; <UNDEFINED> instruction: 0x666e7631
   18a9c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   18aa0:	andeq	r4, r3, r8, asr #3
   18aa4:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   18aa8:	andeq	r4, r3, r0, ror #3
   18aac:	andeq	r4, r3, ip, ror #3
   18ab0:	mov	r2, r6
   18ab4:	mov	r1, r7
   18ab8:	mov	r0, r5
   18abc:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18ac0:	mov	r4, r0
   18ac4:	b	15e8c <_start@@Base+0x3798>
   18ac8:	add	r3, pc, #976	; 0x3d0
   18acc:	ldrd	r2, [r3]
   18ad0:	cmp	r1, r3
   18ad4:	cmpeq	r0, r2
   18ad8:	bne	18cc8 <_start@@Base+0x65d4>
   18adc:	mov	r3, #8
   18ae0:	mov	r2, r6
   18ae4:	mov	r1, r7
   18ae8:	mov	r0, r5
   18aec:	bl	14498 <_start@@Base+0x1da4>
   18af0:	cmp	r7, r0
   18af4:	mov	r8, r0
   18af8:	beq	18ba0 <_start@@Base+0x64ac>
   18afc:	add	r1, sp, #328	; 0x148
   18b00:	mov	r2, #0
   18b04:	mov	r3, #0
   18b08:	mov	r7, r1
   18b0c:	mov	r0, r5
   18b10:	strd	r2, [r1]
   18b14:	mov	r3, r1
   18b18:	mov	r2, r6
   18b1c:	mov	r1, r8
   18b20:	bl	145c4 <_start@@Base+0x1ed0>
   18b24:	cmp	r8, r0
   18b28:	mov	r4, r0
   18b2c:	bne	18b58 <_start@@Base+0x6464>
   18b30:	mov	r1, r0
   18b34:	ldr	r3, [pc, #908]	; 18ec8 <_start@@Base+0x67d4>
   18b38:	mov	r2, r6
   18b3c:	mov	r0, r5
   18b40:	str	r7, [sp]
   18b44:	bl	14ab4 <_start@@Base+0x23c0>
   18b48:	cmp	r6, r0
   18b4c:	cmpne	r4, r0
   18b50:	mov	r4, r0
   18b54:	beq	160f4 <_start@@Base+0x3a00>
   18b58:	add	r3, sp, #328	; 0x148
   18b5c:	ldrd	r2, [r3]
   18b60:	orrs	r3, r2, r3
   18b64:	bne	18b74 <_start@@Base+0x6480>
   18b68:	ldr	r3, [r5, #8]
   18b6c:	tst	r3, #2
   18b70:	beq	15e8c <_start@@Base+0x3798>
   18b74:	mov	r3, #8
   18b78:	mov	r1, #19
   18b7c:	ldr	r0, [r5]
   18b80:	mov	r2, r3
   18b84:	bl	1e08c <flatcc_builder_table_add@@Base>
   18b88:	cmp	r0, #0
   18b8c:	beq	160f4 <_start@@Base+0x3a00>
   18b90:	add	r3, sp, #328	; 0x148
   18b94:	ldrd	r2, [r3]
   18b98:	strd	r2, [r0]
   18b9c:	b	15e8c <_start@@Base+0x3798>
   18ba0:	add	r8, r0, #8
   18ba4:	mov	r1, r6
   18ba8:	mov	r0, r8
   18bac:	bl	127e8 <_start@@Base+0xf4>
   18bb0:	mov	r3, #0
   18bb4:	str	r3, [sp, #272]	; 0x110
   18bb8:	and	r3, r1, #-16777216	; 0xff000000
   18bbc:	str	r3, [sp, #276]	; 0x114
   18bc0:	add	r3, sp, #272	; 0x110
   18bc4:	ldrd	r2, [r3]
   18bc8:	cmp	r3, #1627389952	; 0x61000000
   18bcc:	cmpeq	r2, #0
   18bd0:	bne	18cb0 <_start@@Base+0x65bc>
   18bd4:	mov	r3, #1
   18bd8:	mov	r2, r6
   18bdc:	mov	r1, r8
   18be0:	mov	r0, r5
   18be4:	bl	14498 <_start@@Base+0x1da4>
   18be8:	cmp	r8, r0
   18bec:	mov	r7, r0
   18bf0:	beq	18c98 <_start@@Base+0x65a4>
   18bf4:	add	r1, sp, #328	; 0x148
   18bf8:	mov	r2, #0
   18bfc:	mov	r3, #0
   18c00:	mov	r8, r1
   18c04:	mov	r0, r5
   18c08:	strd	r2, [r1]
   18c0c:	mov	r3, r1
   18c10:	mov	r2, r6
   18c14:	mov	r1, r7
   18c18:	bl	145c4 <_start@@Base+0x1ed0>
   18c1c:	cmp	r7, r0
   18c20:	mov	r4, r0
   18c24:	bne	18c50 <_start@@Base+0x655c>
   18c28:	mov	r1, r0
   18c2c:	ldr	r3, [pc, #664]	; 18ecc <_start@@Base+0x67d8>
   18c30:	mov	r2, r6
   18c34:	mov	r0, r5
   18c38:	str	r8, [sp]
   18c3c:	bl	14ab4 <_start@@Base+0x23c0>
   18c40:	cmp	r6, r0
   18c44:	cmpne	r4, r0
   18c48:	mov	r4, r0
   18c4c:	beq	160f4 <_start@@Base+0x3a00>
   18c50:	add	r3, sp, #328	; 0x148
   18c54:	ldrd	r2, [r3]
   18c58:	orrs	r3, r2, r3
   18c5c:	bne	18c6c <_start@@Base+0x6578>
   18c60:	ldr	r3, [r5, #8]
   18c64:	tst	r3, #2
   18c68:	beq	15e8c <_start@@Base+0x3798>
   18c6c:	mov	r3, #8
   18c70:	mov	r1, #23
   18c74:	ldr	r0, [r5]
   18c78:	mov	r2, r3
   18c7c:	bl	1e08c <flatcc_builder_table_add@@Base>
   18c80:	cmp	r0, #0
   18c84:	beq	160f4 <_start@@Base+0x3a00>
   18c88:	add	r3, sp, #328	; 0x148
   18c8c:	ldrd	r2, [r3]
   18c90:	strd	r2, [r0]
   18c94:	b	15e8c <_start@@Base+0x3798>
   18c98:	mov	r2, r6
   18c9c:	mov	r1, r8
   18ca0:	mov	r0, r5
   18ca4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18ca8:	mov	r4, r0
   18cac:	b	15e8c <_start@@Base+0x3798>
   18cb0:	mov	r2, r6
   18cb4:	mov	r1, r8
   18cb8:	mov	r0, r5
   18cbc:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18cc0:	mov	r4, r0
   18cc4:	b	15e8c <_start@@Base+0x3798>
   18cc8:	mov	r2, r6
   18ccc:	mov	r1, r7
   18cd0:	mov	r0, r5
   18cd4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18cd8:	mov	r4, r0
   18cdc:	b	15e8c <_start@@Base+0x3798>
   18ce0:	add	r3, pc, #448	; 0x1c0
   18ce4:	ldrd	r2, [r3]
   18ce8:	cmp	r1, r3
   18cec:	cmpeq	r0, r2
   18cf0:	bhi	18f7c <_start@@Base+0x6888>
   18cf4:	add	r3, pc, #436	; 0x1b4
   18cf8:	ldrd	r2, [r3]
   18cfc:	cmp	r1, r3
   18d00:	cmpeq	r0, r2
   18d04:	bne	18f64 <_start@@Base+0x6870>
   18d08:	add	r4, r7, #8
   18d0c:	mov	r1, r6
   18d10:	mov	r0, r4
   18d14:	bl	127e8 <_start@@Base+0xf4>
   18d18:	add	r3, pc, #408	; 0x198
   18d1c:	ldrd	r2, [r3]
   18d20:	cmp	r1, r3
   18d24:	cmpeq	r0, r2
   18d28:	bne	18f4c <_start@@Base+0x6858>
   18d2c:	add	r7, r7, #16
   18d30:	mov	r1, r6
   18d34:	mov	r0, r7
   18d38:	bl	127e8 <_start@@Base+0xf4>
   18d3c:	mov	r3, #0
   18d40:	str	r1, [sp, #284]	; 0x11c
   18d44:	add	r1, sp, #280	; 0x118
   18d48:	str	r3, [sp, #280]	; 0x118
   18d4c:	add	r3, pc, #364	; 0x16c
   18d50:	ldrd	r2, [r3]
   18d54:	ldrd	r0, [r1]
   18d58:	cmp	r1, r3
   18d5c:	cmpeq	r0, r2
   18d60:	bne	18f34 <_start@@Base+0x6840>
   18d64:	mov	r3, #4
   18d68:	mov	r2, r6
   18d6c:	mov	r1, r7
   18d70:	mov	r0, r5
   18d74:	bl	14498 <_start@@Base+0x1da4>
   18d78:	cmp	r7, r0
   18d7c:	mov	r4, r0
   18d80:	beq	18f1c <_start@@Base+0x6828>
   18d84:	cmp	r6, r0
   18d88:	ldr	r0, [r5]
   18d8c:	beq	18ed4 <_start@@Base+0x67e0>
   18d90:	ldrb	r3, [r4]
   18d94:	cmp	r3, #91	; 0x5b
   18d98:	bne	18ed4 <_start@@Base+0x67e0>
   18d9c:	mov	r2, #1
   18da0:	mvn	r3, #0
   18da4:	mov	r1, r2
   18da8:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   18dac:	subs	r7, r0, #0
   18db0:	bne	160f4 <_start@@Base+0x3a00>
   18db4:	ldr	sl, [pc, #276]	; 18ed0 <_start@@Base+0x67dc>
   18db8:	mov	r1, r4
   18dbc:	add	r3, sp, #308	; 0x134
   18dc0:	mov	r2, r6
   18dc4:	mov	r0, r5
   18dc8:	bl	1453c <_start@@Base+0x1e48>
   18dcc:	mov	r4, r0
   18dd0:	ldr	r3, [sp, #308]	; 0x134
   18dd4:	ldr	r0, [r5]
   18dd8:	cmp	r3, #0
   18ddc:	bne	18e14 <_start@@Base+0x6720>
   18de0:	bl	1d94c <flatcc_builder_end_vector@@Base>
   18de4:	str	r0, [sp, #312]	; 0x138
   18de8:	ldr	r3, [sp, #312]	; 0x138
   18dec:	cmp	r3, #0
   18df0:	beq	160f4 <_start@@Base+0x3a00>
   18df4:	mov	r1, #13
   18df8:	ldr	r0, [r5]
   18dfc:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   18e00:	cmp	r0, #0
   18e04:	beq	160f4 <_start@@Base+0x3a00>
   18e08:	ldr	r3, [sp, #312]	; 0x138
   18e0c:	str	r3, [r0]
   18e10:	b	15e8c <_start@@Base+0x3798>
   18e14:	mov	r1, #1
   18e18:	strb	r7, [sp, #328]	; 0x148
   18e1c:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   18e20:	subs	fp, r0, #0
   18e24:	beq	160f4 <_start@@Base+0x3a00>
   18e28:	add	r9, sp, #328	; 0x148
   18e2c:	mov	r1, r4
   18e30:	mov	r3, r9
   18e34:	mov	r2, r6
   18e38:	mov	r0, r5
   18e3c:	bl	14780 <_start@@Base+0x208c>
   18e40:	cmp	r4, r0
   18e44:	mov	r8, r0
   18e48:	movne	r4, r0
   18e4c:	bne	18e78 <_start@@Base+0x6784>
   18e50:	mov	r1, r4
   18e54:	mov	r3, sl
   18e58:	str	r9, [sp]
   18e5c:	mov	r2, r6
   18e60:	mov	r0, r5
   18e64:	bl	14e68 <_start@@Base+0x2774>
   18e68:	cmp	r6, r0
   18e6c:	cmpne	r8, r0
   18e70:	mov	r4, r0
   18e74:	beq	160f4 <_start@@Base+0x3a00>
   18e78:	ldrb	r3, [sp, #328]	; 0x148
   18e7c:	mov	r1, r4
   18e80:	mov	r2, r6
   18e84:	mov	r0, r5
   18e88:	strb	r3, [fp]
   18e8c:	add	r3, sp, #308	; 0x134
   18e90:	bl	13460 <_start@@Base+0xd6c>
   18e94:	mov	r4, r0
   18e98:	b	18dd0 <_start@@Base+0x66dc>
   18e9c:	nop	{0}
   18ea0:			; <UNDEFINED> instruction: 0x666e7631
   18ea4:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   18ea8:	svcvs	0x00725f6e
   18eac:			; <UNDEFINED> instruction: 0x76656374
   18eb0:	mcrvs	3, 3, r7, cr5, cr4, {3}
   18eb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   18eb8:	cmnvs	r4, r5, ror r2
   18ebc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   18ec0:	andeq	r0, r0, r0
   18ec4:			; <UNDEFINED> instruction: 0x66666572
   18ec8:	strdeq	r4, [r3], -r8
   18ecc:	andeq	r4, r3, r4, lsl #4
   18ed0:	andeq	r4, r3, r0, lsl r2
   18ed4:	mov	r3, #0
   18ed8:	mov	r2, r3
   18edc:	mov	r1, r3
   18ee0:	bl	1c92c <flatcc_builder_start_buffer@@Base>
   18ee4:	cmp	r0, #0
   18ee8:	bne	160f4 <_start@@Base+0x3a00>
   18eec:	mov	r1, r4
   18ef0:	add	r3, sp, #312	; 0x138
   18ef4:	mov	r2, r6
   18ef8:	mov	r0, r5
   18efc:	bl	15cec <_start@@Base+0x35f8>
   18f00:	ldr	r1, [sp, #312]	; 0x138
   18f04:	mov	r4, r0
   18f08:	cmp	r1, #0
   18f0c:	beq	160f4 <_start@@Base+0x3a00>
   18f10:	ldr	r0, [r5]
   18f14:	bl	1c9c8 <flatcc_builder_end_buffer@@Base>
   18f18:	b	18de4 <_start@@Base+0x66f0>
   18f1c:	mov	r1, r0
   18f20:	mov	r2, r6
   18f24:	mov	r0, r5
   18f28:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18f2c:	mov	r4, r0
   18f30:	b	15e8c <_start@@Base+0x3798>
   18f34:	mov	r2, r6
   18f38:	mov	r1, r7
   18f3c:	mov	r0, r5
   18f40:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18f44:	mov	r4, r0
   18f48:	b	15e8c <_start@@Base+0x3798>
   18f4c:	mov	r1, r4
   18f50:	mov	r2, r6
   18f54:	mov	r0, r5
   18f58:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18f5c:	mov	r4, r0
   18f60:	b	15e8c <_start@@Base+0x3798>
   18f64:	mov	r2, r6
   18f68:	mov	r1, r7
   18f6c:	mov	r0, r5
   18f70:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   18f74:	mov	r4, r0
   18f78:	b	15e8c <_start@@Base+0x3798>
   18f7c:	add	r3, pc, #948	; 0x3b4
   18f80:	ldrd	r2, [r3]
   18f84:	cmp	r1, r3
   18f88:	cmpeq	r0, r2
   18f8c:	bne	192c8 <_start@@Base+0x6bd4>
   18f90:	add	r8, r7, #8
   18f94:	mov	r1, r6
   18f98:	mov	r0, r8
   18f9c:	bl	127e8 <_start@@Base+0xf4>
   18fa0:	add	r3, pc, #920	; 0x398
   18fa4:	ldrd	r2, [r3]
   18fa8:	cmp	r1, r3
   18fac:	cmpeq	r0, r2
   18fb0:	bne	19140 <_start@@Base+0x6a4c>
   18fb4:	add	r7, r7, #16
   18fb8:	mov	r1, r6
   18fbc:	mov	r0, r7
   18fc0:	bl	127e8 <_start@@Base+0xf4>
   18fc4:	mov	r3, #0
   18fc8:	str	r3, [sp, #288]	; 0x120
   18fcc:	and	r3, r1, #-16777216	; 0xff000000
   18fd0:	str	r3, [sp, #292]	; 0x124
   18fd4:	add	r3, sp, #288	; 0x120
   18fd8:	ldrd	r2, [r3]
   18fdc:	cmp	r3, #1929379840	; 0x73000000
   18fe0:	cmpeq	r2, #0
   18fe4:	bne	19128 <_start@@Base+0x6a34>
   18fe8:	mov	r3, #1
   18fec:	mov	r2, r6
   18ff0:	mov	r1, r7
   18ff4:	mov	r0, r5
   18ff8:	bl	14498 <_start@@Base+0x1da4>
   18ffc:	cmp	r7, r0
   19000:	mov	r4, r0
   19004:	beq	19110 <_start@@Base+0x6a1c>
   19008:	mov	r2, #8
   1900c:	mvn	r3, #-536870912	; 0xe0000000
   19010:	ldr	r0, [r5]
   19014:	mov	r1, r2
   19018:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   1901c:	cmp	r0, #0
   19020:	bne	160f4 <_start@@Base+0x3a00>
   19024:	vldr	d8, [pc, #796]	; 19348 <_start@@Base+0x6c54>
   19028:	mov	r1, r4
   1902c:	add	r3, sp, #308	; 0x134
   19030:	mov	r2, r6
   19034:	mov	r0, r5
   19038:	ldr	r9, [pc, #792]	; 19358 <_start@@Base+0x6c64>
   1903c:	bl	1453c <_start@@Base+0x1e48>
   19040:	mov	r4, r0
   19044:	ldr	r3, [sp, #308]	; 0x134
   19048:	ldr	r0, [r5]
   1904c:	cmp	r3, #0
   19050:	bne	19084 <_start@@Base+0x6990>
   19054:	bl	1d94c <flatcc_builder_end_vector@@Base>
   19058:	cmp	r0, #0
   1905c:	str	r0, [sp, #312]	; 0x138
   19060:	beq	160f4 <_start@@Base+0x3a00>
   19064:	mov	r1, #33	; 0x21
   19068:	ldr	r0, [r5]
   1906c:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   19070:	cmp	r0, #0
   19074:	beq	160f4 <_start@@Base+0x3a00>
   19078:	ldr	r3, [sp, #312]	; 0x138
   1907c:	str	r3, [r0]
   19080:	b	15e8c <_start@@Base+0x3798>
   19084:	mov	r1, #1
   19088:	vstr	d8, [sp, #328]	; 0x148
   1908c:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   19090:	subs	sl, r0, #0
   19094:	beq	160f4 <_start@@Base+0x3a00>
   19098:	add	r8, sp, #328	; 0x148
   1909c:	mov	r1, r4
   190a0:	mov	r3, r8
   190a4:	mov	r2, r6
   190a8:	mov	r0, r5
   190ac:	bl	204dc <flatcc_json_parser_double@@Base>
   190b0:	cmp	r4, r0
   190b4:	mov	r7, r0
   190b8:	movne	r4, r0
   190bc:	bne	190e8 <_start@@Base+0x69f4>
   190c0:	mov	r1, r4
   190c4:	mov	r3, r9
   190c8:	str	r8, [sp]
   190cc:	mov	r2, r6
   190d0:	mov	r0, r5
   190d4:	bl	13954 <_start@@Base+0x1260>
   190d8:	cmp	r6, r0
   190dc:	cmpne	r7, r0
   190e0:	mov	r4, r0
   190e4:	beq	160f4 <_start@@Base+0x3a00>
   190e8:	add	r3, sp, #328	; 0x148
   190ec:	ldrd	r2, [r3]
   190f0:	mov	r1, r4
   190f4:	mov	r0, r5
   190f8:	strd	r2, [sl]
   190fc:	add	r3, sp, #308	; 0x134
   19100:	mov	r2, r6
   19104:	bl	13460 <_start@@Base+0xd6c>
   19108:	mov	r4, r0
   1910c:	b	19044 <_start@@Base+0x6950>
   19110:	mov	r1, r0
   19114:	mov	r2, r6
   19118:	mov	r0, r5
   1911c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   19120:	mov	r4, r0
   19124:	b	15e8c <_start@@Base+0x3798>
   19128:	mov	r2, r6
   1912c:	mov	r1, r7
   19130:	mov	r0, r5
   19134:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   19138:	mov	r4, r0
   1913c:	b	15e8c <_start@@Base+0x3798>
   19140:	bic	r3, r0, #255	; 0xff
   19144:	str	r1, [sp, #300]	; 0x12c
   19148:	add	r1, sp, #296	; 0x128
   1914c:	str	r3, [sp, #296]	; 0x128
   19150:	add	r3, pc, #504	; 0x1f8
   19154:	ldrd	r2, [r3]
   19158:	ldrd	r0, [r1]
   1915c:	cmp	r1, r3
   19160:	cmpeq	r0, r2
   19164:	bne	192b0 <_start@@Base+0x6bbc>
   19168:	mov	r3, #7
   1916c:	mov	r2, r6
   19170:	mov	r1, r8
   19174:	mov	r0, r5
   19178:	bl	14498 <_start@@Base+0x1da4>
   1917c:	cmp	r8, r0
   19180:	mov	r4, r0
   19184:	beq	19298 <_start@@Base+0x6ba4>
   19188:	mov	r2, #8
   1918c:	mvn	r3, #-536870912	; 0xe0000000
   19190:	ldr	r0, [r5]
   19194:	mov	r1, r2
   19198:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   1919c:	cmp	r0, #0
   191a0:	bne	160f4 <_start@@Base+0x3a00>
   191a4:	ldr	r9, [pc, #432]	; 1935c <_start@@Base+0x6c68>
   191a8:	mov	r1, r4
   191ac:	add	r3, sp, #308	; 0x134
   191b0:	mov	r2, r6
   191b4:	mov	r0, r5
   191b8:	bl	1453c <_start@@Base+0x1e48>
   191bc:	mov	r4, r0
   191c0:	ldr	r3, [sp, #308]	; 0x134
   191c4:	ldr	r0, [r5]
   191c8:	cmp	r3, #0
   191cc:	bne	19200 <_start@@Base+0x6b0c>
   191d0:	bl	1d94c <flatcc_builder_end_vector@@Base>
   191d4:	cmp	r0, #0
   191d8:	str	r0, [sp, #312]	; 0x138
   191dc:	beq	160f4 <_start@@Base+0x3a00>
   191e0:	mov	r1, #32
   191e4:	ldr	r0, [r5]
   191e8:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   191ec:	cmp	r0, #0
   191f0:	beq	160f4 <_start@@Base+0x3a00>
   191f4:	ldr	r3, [sp, #312]	; 0x138
   191f8:	str	r3, [r0]
   191fc:	b	15e8c <_start@@Base+0x3798>
   19200:	mov	r2, #0
   19204:	mov	r3, #0
   19208:	add	r1, sp, #328	; 0x148
   1920c:	strd	r2, [r1]
   19210:	mov	r1, #1
   19214:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   19218:	subs	sl, r0, #0
   1921c:	beq	160f4 <_start@@Base+0x3a00>
   19220:	add	r8, sp, #328	; 0x148
   19224:	mov	r1, r4
   19228:	mov	r3, r8
   1922c:	mov	r2, r6
   19230:	mov	r0, r5
   19234:	bl	135f0 <_start@@Base+0xefc>
   19238:	cmp	r4, r0
   1923c:	mov	r7, r0
   19240:	movne	r4, r0
   19244:	bne	19270 <_start@@Base+0x6b7c>
   19248:	mov	r1, r4
   1924c:	mov	r3, r9
   19250:	str	r8, [sp]
   19254:	mov	r2, r6
   19258:	mov	r0, r5
   1925c:	bl	15b88 <_start@@Base+0x3494>
   19260:	cmp	r6, r0
   19264:	cmpne	r7, r0
   19268:	mov	r4, r0
   1926c:	beq	160f4 <_start@@Base+0x3a00>
   19270:	add	r3, sp, #328	; 0x148
   19274:	mov	r1, r4
   19278:	ldrd	r2, [r3]
   1927c:	mov	r0, r5
   19280:	strd	r2, [sl]
   19284:	add	r3, sp, #308	; 0x134
   19288:	mov	r2, r6
   1928c:	bl	13460 <_start@@Base+0xd6c>
   19290:	mov	r4, r0
   19294:	b	191c0 <_start@@Base+0x6acc>
   19298:	mov	r1, r0
   1929c:	mov	r2, r6
   192a0:	mov	r0, r5
   192a4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   192a8:	mov	r4, r0
   192ac:	b	15e8c <_start@@Base+0x3798>
   192b0:	mov	r2, r6
   192b4:	mov	r1, r8
   192b8:	mov	r0, r5
   192bc:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   192c0:	mov	r4, r0
   192c4:	b	15e8c <_start@@Base+0x3798>
   192c8:	mov	r2, r6
   192cc:	mov	r1, r7
   192d0:	mov	r0, r5
   192d4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   192d8:	mov	r4, r0
   192dc:	b	15e8c <_start@@Base+0x3798>
   192e0:	mov	r1, r4
   192e4:	mov	r2, r6
   192e8:	ldr	r3, [sp, #316]	; 0x13c
   192ec:	mov	r0, r5
   192f0:	bl	21234 <flatcc_json_parser_finalize_unions@@Base>
   192f4:	mov	r4, r0
   192f8:	ldr	r0, [r5]
   192fc:	bl	1d730 <flatcc_builder_end_table@@Base>
   19300:	ldr	r3, [sp, #92]	; 0x5c
   19304:	cmp	r0, #0
   19308:	str	r0, [r3]
   1930c:	beq	160f4 <_start@@Base+0x3a00>
   19310:	mov	r0, r4
   19314:	add	sp, sp, #340	; 0x154
   19318:	vpop	{d8}
   1931c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19320:	mov	r1, r4
   19324:	mov	r2, r6
   19328:	mov	r0, r5
   1932c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   19330:	mov	r4, r0
   19334:	b	15e8c <_start@@Base+0x3798>
   19338:	svcvs	0x00725f6f
   1933c:			; <UNDEFINED> instruction: 0x76656374
   19340:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   19344:	ldrbvs	r6, [pc], -pc, ror #8
	...
   19350:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   19354:	ldrbvs	r6, [pc], -pc, ror #24
   19358:	andeq	r4, r3, ip, lsl r2
   1935c:	andeq	r4, r3, r8, lsr #4
   19360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19364:	sub	sp, sp, #276	; 0x114
   19368:	mov	r5, r1
   1936c:	mov	r6, r2
   19370:	mov	r2, #0
   19374:	mov	r4, r0
   19378:	ldr	r1, [sp, #312]	; 0x138
   1937c:	str	r2, [r1]
   19380:	cmp	r3, #4
   19384:	ldrls	pc, [pc, r3, lsl #2]
   19388:	b	1b0f4 <_start@@Base+0x8a00>
   1938c:	andeq	r9, r1, r0, lsr #7
   19390:			; <UNDEFINED> instruction: 0x000193b4
   19394:	strdeq	r9, [r1], -r8
   19398:	andeq	r9, r1, r0, ror #15
   1939c:	strdeq	r9, [r1], -r4
   193a0:	mov	r2, r6
   193a4:	mov	r1, r5
   193a8:	bl	1291c <_start@@Base+0x228>
   193ac:	add	sp, sp, #276	; 0x114
   193b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193b4:	mov	r2, r6
   193b8:	mov	r1, r5
   193bc:	ldr	r3, [sp, #312]	; 0x138
   193c0:	bl	15cec <_start@@Base+0x35f8>
   193c4:	ldr	r3, [r4, #24]
   193c8:	cmp	r3, #0
   193cc:	bne	193ac <_start@@Base+0x6cb8>
   193d0:	ldr	r3, [sp, #312]	; 0x138
   193d4:	ldr	r3, [r3]
   193d8:	cmp	r3, #0
   193dc:	bne	193ac <_start@@Base+0x6cb8>
   193e0:	mov	r3, #33	; 0x21
   193e4:	mov	r2, r6
   193e8:	mov	r1, r0
   193ec:	mov	r0, r4
   193f0:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   193f4:	b	193ac <_start@@Base+0x6cb8>
   193f8:	mov	r1, #4
   193fc:	ldr	r0, [r0]
   19400:	bl	1d108 <flatcc_builder_start_table@@Base>
   19404:	cmp	r0, #0
   19408:	bne	19be4 <_start@@Base+0x74f0>
   1940c:	add	r3, sp, #264	; 0x108
   19410:	mov	r2, r6
   19414:	mov	r1, r5
   19418:	mov	r0, r4
   1941c:	bl	14344 <_start@@Base+0x1c50>
   19420:	ldr	r3, [sp, #264]	; 0x108
   19424:	mov	r5, r0
   19428:	cmp	r3, #0
   1942c:	bne	1945c <_start@@Base+0x6d68>
   19430:	ldr	r3, [r4, #24]
   19434:	cmp	r3, #0
   19438:	bne	19be4 <_start@@Base+0x74f0>
   1943c:	ldr	r0, [r4]
   19440:	bl	1d730 <flatcc_builder_end_table@@Base>
   19444:	ldr	r3, [sp, #312]	; 0x138
   19448:	cmp	r0, #0
   1944c:	str	r0, [r3]
   19450:	beq	19be4 <_start@@Base+0x74f0>
   19454:	mov	r0, r5
   19458:	b	193c4 <_start@@Base+0x6cd0>
   1945c:	mov	r2, r6
   19460:	mov	r1, r5
   19464:	mov	r0, r4
   19468:	bl	1369c <_start@@Base+0xfa8>
   1946c:	mov	r1, r6
   19470:	mov	r5, r0
   19474:	bl	127e8 <_start@@Base+0xf4>
   19478:	lsr	r3, r0, #16
   1947c:	mov	sl, r1
   19480:	mov	ip, r0
   19484:	add	r1, pc, #1004	; 0x3ec
   19488:	ldrd	r0, [r1]
   1948c:	lsl	r3, r3, #16
   19490:	str	r3, [sp, #32]
   19494:	str	sl, [sp, #36]	; 0x24
   19498:	ldrd	r2, [sp, #32]
   1949c:	cmp	r3, r1
   194a0:	cmpeq	r2, r0
   194a4:	bne	19578 <_start@@Base+0x6e84>
   194a8:	mov	r3, #6
   194ac:	mov	r2, r6
   194b0:	mov	r1, r5
   194b4:	mov	r0, r4
   194b8:	bl	14498 <_start@@Base+0x1da4>
   194bc:	cmp	r5, r0
   194c0:	mov	r7, r0
   194c4:	beq	19640 <_start@@Base+0x6f4c>
   194c8:	mov	r3, #0
   194cc:	add	sl, sp, #260	; 0x104
   194d0:	mov	r1, r0
   194d4:	mov	r2, r6
   194d8:	mov	r0, r4
   194dc:	strb	r3, [sp, #260]	; 0x104
   194e0:	mov	r3, sl
   194e4:	bl	14a0c <_start@@Base+0x2318>
   194e8:	cmp	r7, r0
   194ec:	mov	r5, r0
   194f0:	bne	1951c <_start@@Base+0x6e28>
   194f4:	mov	r1, r0
   194f8:	ldr	r3, [pc, #912]	; 19890 <_start@@Base+0x719c>
   194fc:	mov	r2, r6
   19500:	mov	r0, r4
   19504:	str	sl, [sp]
   19508:	bl	15888 <_start@@Base+0x3194>
   1950c:	cmp	r6, r0
   19510:	cmpne	r5, r0
   19514:	mov	r5, r0
   19518:	beq	19be4 <_start@@Base+0x74f0>
   1951c:	add	r3, sp, #260	; 0x104
   19520:	ldrsb	r3, [r3]
   19524:	cmp	r3, #2
   19528:	bne	19538 <_start@@Base+0x6e44>
   1952c:	ldr	r3, [r4, #8]
   19530:	tst	r3, #2
   19534:	beq	19560 <_start@@Base+0x6e6c>
   19538:	mov	r3, #1
   1953c:	mov	r2, r3
   19540:	mov	r1, r3
   19544:	ldr	r0, [r4]
   19548:	bl	1e08c <flatcc_builder_table_add@@Base>
   1954c:	cmp	r0, #0
   19550:	beq	19be4 <_start@@Base+0x74f0>
   19554:	add	r3, sp, #260	; 0x104
   19558:	ldrsb	r3, [r3]
   1955c:	strb	r3, [r0]
   19560:	add	r3, sp, #264	; 0x108
   19564:	mov	r2, r6
   19568:	mov	r1, r5
   1956c:	mov	r0, r4
   19570:	bl	13518 <_start@@Base+0xe24>
   19574:	b	19420 <_start@@Base+0x6d2c>
   19578:	and	r3, ip, #-16777216	; 0xff000000
   1957c:	add	r1, pc, #764	; 0x2fc
   19580:	ldrd	r0, [r1]
   19584:	str	r3, [sp, #96]	; 0x60
   19588:	str	sl, [sp, #100]	; 0x64
   1958c:	ldrd	r2, [sp, #96]	; 0x60
   19590:	cmp	r3, r1
   19594:	cmpeq	r2, r0
   19598:	movne	r7, r5
   1959c:	bne	19640 <_start@@Base+0x6f4c>
   195a0:	mov	r3, #5
   195a4:	mov	r2, r6
   195a8:	mov	r1, r5
   195ac:	mov	r0, r4
   195b0:	bl	14498 <_start@@Base+0x1da4>
   195b4:	cmp	r5, r0
   195b8:	mov	r7, r0
   195bc:	beq	19640 <_start@@Base+0x6f4c>
   195c0:	mov	r3, #0
   195c4:	add	sl, sp, #260	; 0x104
   195c8:	mov	r1, r0
   195cc:	mov	r2, r6
   195d0:	mov	r0, r4
   195d4:	strb	r3, [sp, #260]	; 0x104
   195d8:	mov	r3, sl
   195dc:	bl	14a0c <_start@@Base+0x2318>
   195e0:	cmp	r7, r0
   195e4:	mov	r5, r0
   195e8:	bne	19614 <_start@@Base+0x6f20>
   195ec:	mov	r1, r0
   195f0:	ldr	r3, [pc, #668]	; 19894 <_start@@Base+0x71a0>
   195f4:	mov	r2, r6
   195f8:	mov	r0, r4
   195fc:	str	sl, [sp]
   19600:	bl	15888 <_start@@Base+0x3194>
   19604:	cmp	r6, r0
   19608:	cmpne	r5, r0
   1960c:	mov	r5, r0
   19610:	beq	19be4 <_start@@Base+0x74f0>
   19614:	add	r3, sp, #260	; 0x104
   19618:	ldrsb	r3, [r3]
   1961c:	cmp	r3, #2
   19620:	bne	19630 <_start@@Base+0x6f3c>
   19624:	ldr	r3, [r4, #8]
   19628:	tst	r3, #2
   1962c:	beq	19560 <_start@@Base+0x6e6c>
   19630:	mov	r3, #1
   19634:	mov	r1, #0
   19638:	mov	r2, r3
   1963c:	b	19544 <_start@@Base+0x6e50>
   19640:	bic	r3, sl, #255	; 0xff
   19644:	mov	r5, #0
   19648:	add	r1, pc, #568	; 0x238
   1964c:	ldrd	r0, [r1]
   19650:	str	r5, [sp, #104]	; 0x68
   19654:	str	r3, [sp, #108]	; 0x6c
   19658:	ldrd	r2, [sp, #104]	; 0x68
   1965c:	cmp	r3, r1
   19660:	cmpeq	r2, r0
   19664:	bne	19714 <_start@@Base+0x7020>
   19668:	mov	r3, #3
   1966c:	mov	r2, r6
   19670:	mov	r1, r7
   19674:	mov	r0, r4
   19678:	bl	14498 <_start@@Base+0x1da4>
   1967c:	cmp	r7, r0
   19680:	mov	sl, r0
   19684:	beq	197c8 <_start@@Base+0x70d4>
   19688:	add	r7, sp, #260	; 0x104
   1968c:	mov	r1, r0
   19690:	strb	r5, [sp, #260]	; 0x104
   19694:	mov	r3, r7
   19698:	mov	r2, r6
   1969c:	mov	r0, r4
   196a0:	bl	14780 <_start@@Base+0x208c>
   196a4:	cmp	sl, r0
   196a8:	mov	r5, r0
   196ac:	bne	196d8 <_start@@Base+0x6fe4>
   196b0:	mov	r1, r0
   196b4:	ldr	r3, [pc, #476]	; 19898 <_start@@Base+0x71a4>
   196b8:	mov	r2, r6
   196bc:	mov	r0, r4
   196c0:	str	r7, [sp]
   196c4:	bl	14e68 <_start@@Base+0x2774>
   196c8:	cmp	r6, r0
   196cc:	cmpne	r5, r0
   196d0:	mov	r5, r0
   196d4:	beq	19be4 <_start@@Base+0x74f0>
   196d8:	ldrb	r3, [sp, #260]	; 0x104
   196dc:	cmp	r3, #2
   196e0:	bne	196f0 <_start@@Base+0x6ffc>
   196e4:	ldr	r3, [r4, #8]
   196e8:	tst	r3, #2
   196ec:	beq	19560 <_start@@Base+0x6e6c>
   196f0:	mov	r3, #1
   196f4:	mov	r1, #3
   196f8:	mov	r2, r3
   196fc:	ldr	r0, [r4]
   19700:	bl	1e08c <flatcc_builder_table_add@@Base>
   19704:	cmp	r0, #0
   19708:	beq	19be4 <_start@@Base+0x74f0>
   1970c:	ldrb	r3, [sp, #260]	; 0x104
   19710:	b	1955c <_start@@Base+0x6e68>
   19714:	ldr	r3, [pc, #384]	; 1989c <_start@@Base+0x71a8>
   19718:	lsr	r9, sl, #16
   1971c:	mov	r2, #0
   19720:	lsl	r9, r9, #16
   19724:	cmp	r9, r3
   19728:	cmpeq	r5, r2
   1972c:	bne	197c8 <_start@@Base+0x70d4>
   19730:	mov	r3, #2
   19734:	mov	r2, r6
   19738:	mov	r1, r7
   1973c:	mov	r0, r4
   19740:	bl	14498 <_start@@Base+0x1da4>
   19744:	cmp	r7, r0
   19748:	mov	sl, r0
   1974c:	beq	197c8 <_start@@Base+0x70d4>
   19750:	add	r7, sp, #260	; 0x104
   19754:	mov	r1, r0
   19758:	strb	r5, [sp, #260]	; 0x104
   1975c:	mov	r3, r7
   19760:	mov	r2, r6
   19764:	mov	r0, r4
   19768:	bl	14780 <_start@@Base+0x208c>
   1976c:	cmp	sl, r0
   19770:	mov	r5, r0
   19774:	bne	197a0 <_start@@Base+0x70ac>
   19778:	mov	r1, r0
   1977c:	ldr	r3, [pc, #284]	; 198a0 <_start@@Base+0x71ac>
   19780:	mov	r2, r6
   19784:	mov	r0, r4
   19788:	str	r7, [sp]
   1978c:	bl	14e68 <_start@@Base+0x2774>
   19790:	cmp	r6, r0
   19794:	cmpne	r5, r0
   19798:	mov	r5, r0
   1979c:	beq	19be4 <_start@@Base+0x74f0>
   197a0:	ldrb	r3, [sp, #260]	; 0x104
   197a4:	cmp	r3, #2
   197a8:	bne	197b8 <_start@@Base+0x70c4>
   197ac:	ldr	r3, [r4, #8]
   197b0:	tst	r3, #2
   197b4:	beq	19560 <_start@@Base+0x6e6c>
   197b8:	mov	r3, #1
   197bc:	mov	r1, #2
   197c0:	mov	r2, r3
   197c4:	b	196fc <_start@@Base+0x7008>
   197c8:	mov	r2, r6
   197cc:	mov	r1, r7
   197d0:	mov	r0, r4
   197d4:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   197d8:	mov	r5, r0
   197dc:	b	19560 <_start@@Base+0x6e6c>
   197e0:	mov	r2, r6
   197e4:	mov	r1, r5
   197e8:	ldr	r3, [sp, #312]	; 0x138
   197ec:	bl	143cc <_start@@Base+0x1cd8>
   197f0:	b	193c4 <_start@@Base+0x6cd0>
   197f4:	mov	r1, #4
   197f8:	ldr	r0, [r0]
   197fc:	bl	1d108 <flatcc_builder_start_table@@Base>
   19800:	cmp	r0, #0
   19804:	bne	19be4 <_start@@Base+0x74f0>
   19808:	add	r3, sp, #248	; 0xf8
   1980c:	mov	r2, r6
   19810:	mov	r1, r5
   19814:	mov	r0, r4
   19818:	str	r3, [sp]
   1981c:	mov	r3, #1
   19820:	bl	211cc <flatcc_json_parser_prepare_unions@@Base>
   19824:	cmp	r6, r0
   19828:	beq	19be4 <_start@@Base+0x74f0>
   1982c:	add	r3, sp, #244	; 0xf4
   19830:	mov	r2, r6
   19834:	mov	r1, r5
   19838:	mov	r0, r4
   1983c:	bl	14344 <_start@@Base+0x1c50>
   19840:	ldr	r3, [sp, #244]	; 0xf4
   19844:	mov	r5, r0
   19848:	cmp	r3, #0
   1984c:	bne	198a4 <_start@@Base+0x71b0>
   19850:	ldr	r3, [r4, #24]
   19854:	cmp	r3, #0
   19858:	bne	19be4 <_start@@Base+0x74f0>
   1985c:	mov	r1, r0
   19860:	mov	r2, r6
   19864:	ldr	r3, [sp, #248]	; 0xf8
   19868:	mov	r0, r4
   1986c:	bl	21234 <flatcc_json_parser_finalize_unions@@Base>
   19870:	mov	r5, r0
   19874:	b	1943c <_start@@Base+0x6d48>
   19878:	eorsvc	r0, r2, #0
   1987c:	cmnvs	pc, #28416	; 0x6f00
   19880:	andvc	r0, r0, #0
   19884:	cmnvs	pc, #28416	; 0x6f00
   19888:	andeq	r0, r0, r0
   1988c:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   19890:	andeq	r4, r3, r4, lsr r2
   19894:	andeq	r4, r3, r4, asr #4
   19898:	andeq	r4, r3, r4, asr r2
   1989c:	strbvc	r0, [r3, #-0]!
   198a0:	andeq	r4, r3, r0, ror #4
   198a4:	mov	r2, r6
   198a8:	mov	r1, r5
   198ac:	mov	r0, r4
   198b0:	bl	1369c <_start@@Base+0xfa8>
   198b4:	mov	r1, r6
   198b8:	mov	r7, r0
   198bc:	bl	127e8 <_start@@Base+0xf4>
   198c0:	add	r3, pc, #824	; 0x338
   198c4:	ldrd	r2, [r3]
   198c8:	mov	r8, r0
   198cc:	mov	r9, r1
   198d0:	cmp	r1, r3
   198d4:	cmpeq	r0, r2
   198d8:	bne	19970 <_start@@Base+0x727c>
   198dc:	add	r7, r7, #8
   198e0:	mov	r1, r6
   198e4:	mov	r0, r7
   198e8:	mov	r5, #0
   198ec:	bl	127e8 <_start@@Base+0xf4>
   198f0:	str	r5, [sp, #112]	; 0x70
   198f4:	str	r1, [sp, #116]	; 0x74
   198f8:	add	r3, pc, #776	; 0x308
   198fc:	ldrd	r2, [r3]
   19900:	ldrd	r0, [sp, #112]	; 0x70
   19904:	cmp	r1, r3
   19908:	cmpeq	r0, r2
   1990c:	bne	1b0e8 <_start@@Base+0x89f4>
   19910:	mov	r1, r7
   19914:	mov	r3, #4
   19918:	mov	r2, r6
   1991c:	mov	r0, r4
   19920:	bl	14498 <_start@@Base+0x1da4>
   19924:	cmp	r7, r0
   19928:	mov	r1, r0
   1992c:	beq	1b0e8 <_start@@Base+0x89f4>
   19930:	ldr	r3, [pc, #776]	; 19c40 <_start@@Base+0x754c>
   19934:	mov	r2, r6
   19938:	mov	r0, r4
   1993c:	str	r3, [sp, #16]
   19940:	ldr	r3, [pc, #764]	; 19c44 <_start@@Base+0x7550>
   19944:	str	r3, [sp, #12]
   19948:	ldr	r3, [pc, #760]	; 19c48 <_start@@Base+0x7554>
   1994c:	str	r3, [sp, #8]
   19950:	ldr	r3, [sp, #248]	; 0xf8
   19954:	str	r3, [sp, #4]
   19958:	mov	r3, #3
   1995c:	str	r3, [sp]
   19960:	mov	r3, r5
   19964:	bl	215e4 <flatcc_json_parser_union_type_vector@@Base>
   19968:	mov	r5, r0
   1996c:	b	19a94 <_start@@Base+0x73a0>
   19970:	bic	r3, r0, #255	; 0xff
   19974:	str	r3, [sp, #120]	; 0x78
   19978:	str	r1, [sp, #124]	; 0x7c
   1997c:	add	r3, pc, #652	; 0x28c
   19980:	ldrd	r2, [r3]
   19984:	ldrd	r0, [sp, #120]	; 0x78
   19988:	cmp	r1, r3
   1998c:	cmpeq	r0, r2
   19990:	bne	199e0 <_start@@Base+0x72ec>
   19994:	mov	r1, r7
   19998:	mov	r3, #7
   1999c:	mov	r2, r6
   199a0:	mov	r0, r4
   199a4:	bl	14498 <_start@@Base+0x1da4>
   199a8:	cmp	r7, r0
   199ac:	mov	r1, r0
   199b0:	beq	199e0 <_start@@Base+0x72ec>
   199b4:	ldr	r3, [pc, #648]	; 19c44 <_start@@Base+0x7550>
   199b8:	mov	r2, r6
   199bc:	mov	r0, r4
   199c0:	str	r3, [sp, #8]
   199c4:	ldr	r3, [sp, #248]	; 0xf8
   199c8:	str	r3, [sp, #4]
   199cc:	mov	r3, #3
   199d0:	str	r3, [sp]
   199d4:	mov	r3, #0
   199d8:	bl	21518 <flatcc_json_parser_union_vector@@Base>
   199dc:	b	19968 <_start@@Base+0x7274>
   199e0:	lsr	r3, r8, #16
   199e4:	str	r9, [sp, #44]	; 0x2c
   199e8:	lsl	r3, r3, #16
   199ec:	str	r3, [sp, #40]	; 0x28
   199f0:	add	r3, pc, #544	; 0x220
   199f4:	ldrd	r2, [r3]
   199f8:	ldrd	r0, [sp, #40]	; 0x28
   199fc:	cmp	r1, r3
   19a00:	cmpeq	r0, r2
   19a04:	bne	1a97c <_start@@Base+0x8288>
   19a08:	mov	r3, #6
   19a0c:	mov	r2, r6
   19a10:	mov	r1, r7
   19a14:	mov	r0, r4
   19a18:	bl	14498 <_start@@Base+0x1da4>
   19a1c:	cmp	r7, r0
   19a20:	mov	r5, r0
   19a24:	beq	1b0d4 <_start@@Base+0x89e0>
   19a28:	mov	r1, #3
   19a2c:	ldr	r0, [r4]
   19a30:	bl	1d108 <flatcc_builder_start_table@@Base>
   19a34:	cmp	r0, #0
   19a38:	bne	19bcc <_start@@Base+0x74d8>
   19a3c:	add	r3, sp, #252	; 0xfc
   19a40:	mov	r2, r6
   19a44:	mov	r1, r5
   19a48:	mov	r0, r4
   19a4c:	bl	14344 <_start@@Base+0x1c50>
   19a50:	ldr	r3, [sp, #252]	; 0xfc
   19a54:	mov	r5, r0
   19a58:	cmp	r3, #0
   19a5c:	bne	19aac <_start@@Base+0x73b8>
   19a60:	ldr	r7, [r4, #24]
   19a64:	cmp	r7, #0
   19a68:	bne	19bcc <_start@@Base+0x74d8>
   19a6c:	ldr	r0, [r4]
   19a70:	bl	1d730 <flatcc_builder_end_table@@Base>
   19a74:	subs	r8, r0, #0
   19a78:	beq	19bcc <_start@@Base+0x74d8>
   19a7c:	mov	r1, r7
   19a80:	ldr	r0, [r4]
   19a84:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   19a88:	cmp	r0, #0
   19a8c:	beq	19be4 <_start@@Base+0x74f0>
   19a90:	str	r8, [r0]
   19a94:	add	r3, sp, #244	; 0xf4
   19a98:	mov	r2, r6
   19a9c:	mov	r1, r5
   19aa0:	mov	r0, r4
   19aa4:	bl	13518 <_start@@Base+0xe24>
   19aa8:	b	19840 <_start@@Base+0x714c>
   19aac:	mov	r2, r6
   19ab0:	mov	r1, r5
   19ab4:	mov	r0, r4
   19ab8:	bl	1369c <_start@@Base+0xfa8>
   19abc:	mov	r1, r6
   19ac0:	mov	r7, r0
   19ac4:	bl	127e8 <_start@@Base+0xf4>
   19ac8:	add	r3, pc, #336	; 0x150
   19acc:	ldrd	r2, [r3]
   19ad0:	cmp	r1, r3
   19ad4:	cmpeq	r0, r2
   19ad8:	bne	1a970 <_start@@Base+0x827c>
   19adc:	add	r9, pc, #324	; 0x144
   19ae0:	ldrd	r8, [r9]
   19ae4:	add	r3, r7, #8
   19ae8:	mov	r1, r6
   19aec:	mov	r0, r3
   19af0:	bl	127e8 <_start@@Base+0xf4>
   19af4:	cmp	r1, r9
   19af8:	cmpeq	r0, r8
   19afc:	bne	1a964 <_start@@Base+0x8270>
   19b00:	add	r7, r7, #16
   19b04:	mov	r1, r6
   19b08:	mov	r0, r7
   19b0c:	bl	127e8 <_start@@Base+0xf4>
   19b10:	lsr	r3, r0, #16
   19b14:	str	r1, [sp, #28]
   19b18:	lsl	r3, r3, #16
   19b1c:	str	r3, [sp, #24]
   19b20:	add	r3, pc, #264	; 0x108
   19b24:	ldrd	r2, [r3]
   19b28:	ldrd	r8, [sp, #24]
   19b2c:	cmp	r9, r3
   19b30:	cmpeq	r8, r2
   19b34:	bne	19e64 <_start@@Base+0x7770>
   19b38:	mov	r3, #6
   19b3c:	mov	r2, r6
   19b40:	mov	r1, r7
   19b44:	mov	r0, r4
   19b48:	bl	14498 <_start@@Base+0x1da4>
   19b4c:	cmp	r7, r0
   19b50:	mov	r5, r0
   19b54:	beq	1a94c <_start@@Base+0x8258>
   19b58:	mov	r1, #2
   19b5c:	ldr	r0, [r4]
   19b60:	bl	1d108 <flatcc_builder_start_table@@Base>
   19b64:	cmp	r0, #0
   19b68:	bne	19bb4 <_start@@Base+0x74c0>
   19b6c:	add	r9, pc, #196	; 0xc4
   19b70:	ldrd	r8, [r9]
   19b74:	mov	r1, r5
   19b78:	add	r3, sp, #260	; 0x104
   19b7c:	mov	r2, r6
   19b80:	mov	r0, r4
   19b84:	bl	14344 <_start@@Base+0x1c50>
   19b88:	mov	r5, r0
   19b8c:	ldr	r3, [sp, #260]	; 0x104
   19b90:	cmp	r3, #0
   19b94:	bne	19c4c <_start@@Base+0x7558>
   19b98:	ldr	r3, [r4, #24]
   19b9c:	cmp	r3, #0
   19ba0:	bne	19bb4 <_start@@Base+0x74c0>
   19ba4:	ldr	r0, [r4]
   19ba8:	bl	1d730 <flatcc_builder_end_table@@Base>
   19bac:	subs	r7, r0, #0
   19bb0:	bne	1b11c <_start@@Base+0x8a28>
   19bb4:	mov	r1, r5
   19bb8:	mov	r3, #33	; 0x21
   19bbc:	mov	r2, r6
   19bc0:	mov	r0, r4
   19bc4:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   19bc8:	mov	r5, r0
   19bcc:	mov	r1, r5
   19bd0:	mov	r3, #33	; 0x21
   19bd4:	mov	r2, r6
   19bd8:	mov	r0, r4
   19bdc:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   19be0:	mov	r5, r0
   19be4:	mov	r1, r5
   19be8:	mov	r3, #33	; 0x21
   19bec:	mov	r2, r6
   19bf0:	mov	r0, r4
   19bf4:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   19bf8:	mov	r5, r0
   19bfc:	b	19454 <_start@@Base+0x6d60>
   19c00:	cmnvs	lr, pc, asr r9
   19c04:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   19c08:	andeq	r0, r0, r0
   19c0c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   19c10:	cmnvs	lr, r0, lsl #18
   19c14:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   19c18:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   19c1c:	rsbsvc	r6, r2, r6, ror #10
   19c20:	bvs	1cf59e0 <__bss_end__@@Base+0x1cc161c>
   19c24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   19c28:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   19c2c:	rsbsvc	r6, r2, r6, ror #10
   19c30:	ldrvs	r0, [r2, -r0]!
   19c34:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   19c38:	svcpl	0x00626262
   19c3c:	cmnvs	r1, r1, ror #2
   19c40:	ldrdeq	r2, [r1], -r4
   19c44:	andeq	r9, r1, r0, ror #6
   19c48:	andeq	r4, r3, ip, ror #4
   19c4c:	mov	r1, r5
   19c50:	mov	r2, r6
   19c54:	mov	r0, r4
   19c58:	bl	1369c <_start@@Base+0xfa8>
   19c5c:	mov	r1, r6
   19c60:	mov	r5, r0
   19c64:	bl	127e8 <_start@@Base+0xf4>
   19c68:	cmp	r1, r9
   19c6c:	cmpeq	r0, r8
   19c70:	bne	19e4c <_start@@Base+0x7758>
   19c74:	add	r5, r5, #8
   19c78:	mov	r1, r6
   19c7c:	add	fp, pc, #972	; 0x3cc
   19c80:	ldrd	sl, [fp]
   19c84:	mov	r0, r5
   19c88:	bl	127e8 <_start@@Base+0xf4>
   19c8c:	bic	r3, r0, #255	; 0xff
   19c90:	str	r3, [sp, #128]	; 0x80
   19c94:	str	r1, [sp, #132]	; 0x84
   19c98:	ldrd	r2, [sp, #128]	; 0x80
   19c9c:	cmp	r3, fp
   19ca0:	cmpeq	r2, sl
   19ca4:	bne	19d84 <_start@@Base+0x7690>
   19ca8:	mov	r3, #7
   19cac:	mov	r2, r6
   19cb0:	mov	r1, r5
   19cb4:	mov	r0, r4
   19cb8:	bl	14498 <_start@@Base+0x1da4>
   19cbc:	cmp	r5, r0
   19cc0:	mov	r7, r0
   19cc4:	beq	19e4c <_start@@Base+0x7758>
   19cc8:	add	r1, sp, #264	; 0x108
   19ccc:	mov	r2, #0
   19cd0:	mov	r3, #0
   19cd4:	mov	sl, r1
   19cd8:	mov	r0, r4
   19cdc:	strd	r2, [r1]
   19ce0:	mov	r3, r1
   19ce4:	mov	r2, r6
   19ce8:	mov	r1, r7
   19cec:	bl	135f0 <_start@@Base+0xefc>
   19cf0:	cmp	r7, r0
   19cf4:	mov	r5, r0
   19cf8:	bne	19d24 <_start@@Base+0x7630>
   19cfc:	mov	r1, r0
   19d00:	ldr	r3, [pc, #880]	; 1a078 <_start@@Base+0x7984>
   19d04:	mov	r2, r6
   19d08:	mov	r0, r4
   19d0c:	str	sl, [sp]
   19d10:	bl	15b88 <_start@@Base+0x3494>
   19d14:	cmp	r6, r0
   19d18:	cmpne	r5, r0
   19d1c:	mov	r5, r0
   19d20:	beq	19bb4 <_start@@Base+0x74c0>
   19d24:	add	r3, sp, #264	; 0x108
   19d28:	ldrd	r2, [r3]
   19d2c:	orrs	r3, r2, r3
   19d30:	bne	19d40 <_start@@Base+0x764c>
   19d34:	ldr	r3, [r4, #8]
   19d38:	tst	r3, #2
   19d3c:	beq	19d68 <_start@@Base+0x7674>
   19d40:	mov	r3, #8
   19d44:	mov	r1, #0
   19d48:	ldr	r0, [r4]
   19d4c:	mov	r2, r3
   19d50:	bl	1e08c <flatcc_builder_table_add@@Base>
   19d54:	cmp	r0, #0
   19d58:	beq	19bb4 <_start@@Base+0x74c0>
   19d5c:	add	r3, sp, #264	; 0x108
   19d60:	ldrd	r2, [r3]
   19d64:	strd	r2, [r0]
   19d68:	mov	r1, r5
   19d6c:	add	r3, sp, #260	; 0x104
   19d70:	mov	r2, r6
   19d74:	mov	r0, r4
   19d78:	bl	13518 <_start@@Base+0xe24>
   19d7c:	mov	r5, r0
   19d80:	b	19b8c <_start@@Base+0x7498>
   19d84:	add	r3, pc, #716	; 0x2cc
   19d88:	ldrd	r2, [r3]
   19d8c:	cmp	r1, r3
   19d90:	cmpeq	r0, r2
   19d94:	bne	19e4c <_start@@Base+0x7758>
   19d98:	mov	r3, #8
   19d9c:	mov	r2, r6
   19da0:	mov	r1, r5
   19da4:	mov	r0, r4
   19da8:	bl	14498 <_start@@Base+0x1da4>
   19dac:	cmp	r5, r0
   19db0:	mov	r7, r0
   19db4:	beq	19e4c <_start@@Base+0x7758>
   19db8:	mov	r3, #0
   19dbc:	add	sl, sp, #264	; 0x108
   19dc0:	mov	r1, r0
   19dc4:	mov	r2, r6
   19dc8:	mov	r0, r4
   19dcc:	str	r3, [sp, #264]	; 0x108
   19dd0:	mov	r3, sl
   19dd4:	bl	14648 <_start@@Base+0x1f54>
   19dd8:	cmp	r7, r0
   19ddc:	mov	r5, r0
   19de0:	bne	19e0c <_start@@Base+0x7718>
   19de4:	mov	r1, r0
   19de8:	ldr	r3, [pc, #652]	; 1a07c <_start@@Base+0x7988>
   19dec:	mov	r2, r6
   19df0:	mov	r0, r4
   19df4:	str	sl, [sp]
   19df8:	bl	14bf0 <_start@@Base+0x24fc>
   19dfc:	cmp	r6, r0
   19e00:	cmpne	r5, r0
   19e04:	mov	r5, r0
   19e08:	beq	19bb4 <_start@@Base+0x74c0>
   19e0c:	ldr	r3, [sp, #264]	; 0x108
   19e10:	cmp	r3, #0
   19e14:	bne	19e24 <_start@@Base+0x7730>
   19e18:	ldr	r3, [r4, #8]
   19e1c:	tst	r3, #2
   19e20:	beq	19d68 <_start@@Base+0x7674>
   19e24:	mov	r3, #4
   19e28:	mov	r1, #1
   19e2c:	ldr	r0, [r4]
   19e30:	mov	r2, r3
   19e34:	bl	1e08c <flatcc_builder_table_add@@Base>
   19e38:	cmp	r0, #0
   19e3c:	beq	19bb4 <_start@@Base+0x74c0>
   19e40:	ldr	r3, [sp, #264]	; 0x108
   19e44:	str	r3, [r0]
   19e48:	b	19d68 <_start@@Base+0x7674>
   19e4c:	mov	r1, r5
   19e50:	mov	r2, r6
   19e54:	mov	r0, r4
   19e58:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   19e5c:	mov	r5, r0
   19e60:	b	19d68 <_start@@Base+0x7674>
   19e64:	and	r3, r0, #-16777216	; 0xff000000
   19e68:	str	r3, [sp, #136]	; 0x88
   19e6c:	str	r1, [sp, #140]	; 0x8c
   19e70:	add	r3, pc, #488	; 0x1e8
   19e74:	ldrd	r2, [r3]
   19e78:	ldrd	r0, [sp, #136]	; 0x88
   19e7c:	cmp	r1, r3
   19e80:	cmpeq	r0, r2
   19e84:	bne	1a614 <_start@@Base+0x7f20>
   19e88:	mov	r3, #5
   19e8c:	mov	r2, r6
   19e90:	mov	r1, r7
   19e94:	mov	r0, r4
   19e98:	bl	14498 <_start@@Base+0x1da4>
   19e9c:	cmp	r7, r0
   19ea0:	mov	r5, r0
   19ea4:	beq	1a610 <_start@@Base+0x7f1c>
   19ea8:	mov	r1, #9
   19eac:	ldr	r0, [r4]
   19eb0:	bl	1d108 <flatcc_builder_start_table@@Base>
   19eb4:	cmp	r0, #0
   19eb8:	bne	19bb4 <_start@@Base+0x74c0>
   19ebc:	add	r3, sp, #256	; 0x100
   19ec0:	mov	r2, r6
   19ec4:	mov	r1, r5
   19ec8:	mov	r0, r4
   19ecc:	bl	14344 <_start@@Base+0x1c50>
   19ed0:	ldr	r3, [sp, #256]	; 0x100
   19ed4:	mov	r5, r0
   19ed8:	cmp	r3, #0
   19edc:	bne	19f2c <_start@@Base+0x7838>
   19ee0:	ldr	r7, [r4, #24]
   19ee4:	cmp	r7, #0
   19ee8:	bne	19bb4 <_start@@Base+0x74c0>
   19eec:	ldr	r0, [r4]
   19ef0:	bl	1d730 <flatcc_builder_end_table@@Base>
   19ef4:	subs	r8, r0, #0
   19ef8:	beq	19bb4 <_start@@Base+0x74c0>
   19efc:	mov	r1, r7
   19f00:	ldr	r0, [r4]
   19f04:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   19f08:	cmp	r0, #0
   19f0c:	beq	19bcc <_start@@Base+0x74d8>
   19f10:	str	r8, [r0]
   19f14:	add	r3, sp, #252	; 0xfc
   19f18:	mov	r2, r6
   19f1c:	mov	r1, r5
   19f20:	mov	r0, r4
   19f24:	bl	13518 <_start@@Base+0xe24>
   19f28:	b	19a50 <_start@@Base+0x735c>
   19f2c:	mov	r2, r6
   19f30:	mov	r1, r5
   19f34:	mov	r0, r4
   19f38:	bl	1369c <_start@@Base+0xfa8>
   19f3c:	mov	r1, r6
   19f40:	mov	r5, r0
   19f44:	bl	127e8 <_start@@Base+0xf4>
   19f48:	add	r3, pc, #280	; 0x118
   19f4c:	ldrd	r2, [r3]
   19f50:	cmp	r1, r3
   19f54:	cmpeq	r0, r2
   19f58:	bhi	1a258 <_start@@Base+0x7b64>
   19f5c:	add	r3, pc, #268	; 0x10c
   19f60:	ldrd	r2, [r3]
   19f64:	cmp	r1, r3
   19f68:	cmpeq	r0, r2
   19f6c:	bne	1a088 <_start@@Base+0x7994>
   19f70:	add	r5, r5, #8
   19f74:	mov	r1, r6
   19f78:	mov	r0, r5
   19f7c:	mov	r8, #0
   19f80:	bl	127e8 <_start@@Base+0xf4>
   19f84:	and	r3, r1, #-16777216	; 0xff000000
   19f88:	str	r8, [sp, #144]	; 0x90
   19f8c:	str	r3, [sp, #148]	; 0x94
   19f90:	ldrd	r2, [sp, #144]	; 0x90
   19f94:	cmp	r3, #889192448	; 0x35000000
   19f98:	cmpeq	r2, #0
   19f9c:	bne	1a5ec <_start@@Base+0x7ef8>
   19fa0:	mov	r3, #1
   19fa4:	mov	r2, r6
   19fa8:	mov	r1, r5
   19fac:	mov	r0, r4
   19fb0:	bl	14498 <_start@@Base+0x1da4>
   19fb4:	cmp	r5, r0
   19fb8:	mov	r7, r0
   19fbc:	beq	1a5ec <_start@@Base+0x7ef8>
   19fc0:	str	r8, [sp, #264]	; 0x108
   19fc4:	add	r8, sp, #264	; 0x108
   19fc8:	mov	r1, r0
   19fcc:	mov	r2, r6
   19fd0:	mov	r0, r4
   19fd4:	mov	r3, r8
   19fd8:	bl	14648 <_start@@Base+0x1f54>
   19fdc:	cmp	r7, r0
   19fe0:	mov	r5, r0
   19fe4:	bne	1a010 <_start@@Base+0x791c>
   19fe8:	mov	r1, r0
   19fec:	ldr	r3, [pc, #140]	; 1a080 <_start@@Base+0x798c>
   19ff0:	mov	r2, r6
   19ff4:	mov	r0, r4
   19ff8:	str	r8, [sp]
   19ffc:	bl	14bf0 <_start@@Base+0x24fc>
   1a000:	cmp	r6, r0
   1a004:	cmpne	r5, r0
   1a008:	mov	r5, r0
   1a00c:	beq	19bb4 <_start@@Base+0x74c0>
   1a010:	ldr	r3, [sp, #264]	; 0x108
   1a014:	cmp	r3, #0
   1a018:	bne	1a028 <_start@@Base+0x7934>
   1a01c:	ldr	r3, [r4, #8]
   1a020:	tst	r3, #2
   1a024:	beq	1a1e0 <_start@@Base+0x7aec>
   1a028:	mov	r3, #4
   1a02c:	mov	r1, #1
   1a030:	mov	r2, r3
   1a034:	ldr	r0, [r4]
   1a038:	bl	1e08c <flatcc_builder_table_add@@Base>
   1a03c:	cmp	r0, #0
   1a040:	beq	19bb4 <_start@@Base+0x74c0>
   1a044:	ldr	r3, [sp, #264]	; 0x108
   1a048:	b	1a104 <_start@@Base+0x7a10>
   1a04c:	nop	{0}
   1a050:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1a054:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a058:	cmnvs	r2, pc, asr r4
   1a05c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a060:	strvs	r0, [r0, -r0]
   1a064:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a068:			; <UNDEFINED> instruction: 0xffffffff
   1a06c:	cmnvs	r3, #-2013265919	; 0x88000001
   1a070:	teqcc	r2, r4, lsr r3
   1a074:	cmnvs	r1, r1, ror #2
   1a078:	andeq	r4, r3, ip, ror r2
   1a07c:	andeq	r4, r3, r8, lsl #5
   1a080:	muleq	r3, r4, r2
   1a084:	cmnvs	r1, r1, ror #2
   1a088:	mov	r7, #0
   1a08c:	ldr	r3, [pc, #-16]	; 1a084 <_start@@Base+0x7990>
   1a090:	mov	r2, #0
   1a094:	str	r7, [sp, #88]	; 0x58
   1a098:	str	r1, [sp, #92]	; 0x5c
   1a09c:	ldrd	r8, [sp, #88]	; 0x58
   1a0a0:	cmp	r9, r3
   1a0a4:	cmpeq	r8, r2
   1a0a8:	bne	1a10c <_start@@Base+0x7a18>
   1a0ac:	mov	r1, r5
   1a0b0:	mov	r3, #4
   1a0b4:	mov	r2, r6
   1a0b8:	mov	r0, r4
   1a0bc:	bl	14498 <_start@@Base+0x1da4>
   1a0c0:	cmp	r5, r0
   1a0c4:	mov	r1, r0
   1a0c8:	beq	1a608 <_start@@Base+0x7f14>
   1a0cc:	add	r3, sp, #260	; 0x104
   1a0d0:	mov	r2, r6
   1a0d4:	mov	r0, r4
   1a0d8:	bl	21098 <flatcc_json_parser_build_string@@Base>
   1a0dc:	ldr	r3, [sp, #260]	; 0x104
   1a0e0:	mov	r5, r0
   1a0e4:	cmp	r3, r7
   1a0e8:	beq	19bb4 <_start@@Base+0x74c0>
   1a0ec:	mov	r1, r7
   1a0f0:	ldr	r0, [r4]
   1a0f4:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1a0f8:	cmp	r0, #0
   1a0fc:	beq	19bb4 <_start@@Base+0x74c0>
   1a100:	ldr	r3, [sp, #260]	; 0x104
   1a104:	str	r3, [r0]
   1a108:	b	1a1e0 <_start@@Base+0x7aec>
   1a10c:	add	r3, pc, #820	; 0x334
   1a110:	ldrd	r2, [r3]
   1a114:	cmp	r1, r3
   1a118:	cmpeq	r0, r2
   1a11c:	bne	1a1f8 <_start@@Base+0x7b04>
   1a120:	mov	r3, #8
   1a124:	mov	r2, r6
   1a128:	mov	r1, r5
   1a12c:	mov	r0, r4
   1a130:	bl	14498 <_start@@Base+0x1da4>
   1a134:	cmp	r5, r0
   1a138:	mov	r7, r0
   1a13c:	beq	1a5ec <_start@@Base+0x7ef8>
   1a140:	add	r1, sp, #264	; 0x108
   1a144:	mov	r2, #0
   1a148:	mov	r3, #0
   1a14c:	mov	r8, r1
   1a150:	mov	r0, r4
   1a154:	strd	r2, [r1]
   1a158:	mov	r3, r1
   1a15c:	mov	r2, r6
   1a160:	mov	r1, r7
   1a164:	bl	135f0 <_start@@Base+0xefc>
   1a168:	cmp	r7, r0
   1a16c:	mov	r5, r0
   1a170:	bne	1a19c <_start@@Base+0x7aa8>
   1a174:	mov	r1, r0
   1a178:	ldr	r3, [pc, #728]	; 1a458 <_start@@Base+0x7d64>
   1a17c:	mov	r2, r6
   1a180:	mov	r0, r4
   1a184:	str	r8, [sp]
   1a188:	bl	15b88 <_start@@Base+0x3494>
   1a18c:	cmp	r6, r0
   1a190:	cmpne	r5, r0
   1a194:	mov	r5, r0
   1a198:	beq	19bb4 <_start@@Base+0x74c0>
   1a19c:	add	r3, sp, #264	; 0x108
   1a1a0:	ldrd	r2, [r3]
   1a1a4:	orrs	r3, r2, r3
   1a1a8:	bne	1a1b8 <_start@@Base+0x7ac4>
   1a1ac:	ldr	r3, [r4, #8]
   1a1b0:	tst	r3, #2
   1a1b4:	beq	1a1e0 <_start@@Base+0x7aec>
   1a1b8:	mov	r3, #8
   1a1bc:	mov	r1, #3
   1a1c0:	mov	r2, r3
   1a1c4:	ldr	r0, [r4]
   1a1c8:	bl	1e08c <flatcc_builder_table_add@@Base>
   1a1cc:	cmp	r0, #0
   1a1d0:	beq	19bb4 <_start@@Base+0x74c0>
   1a1d4:	add	r3, sp, #264	; 0x108
   1a1d8:	ldrd	r2, [r3]
   1a1dc:	strd	r2, [r0]
   1a1e0:	add	r3, sp, #256	; 0x100
   1a1e4:	mov	r2, r6
   1a1e8:	mov	r1, r5
   1a1ec:	mov	r0, r4
   1a1f0:	bl	13518 <_start@@Base+0xe24>
   1a1f4:	b	19ed0 <_start@@Base+0x77dc>
   1a1f8:	ldr	r3, [pc, #604]	; 1a45c <_start@@Base+0x7d68>
   1a1fc:	mov	r2, #0
   1a200:	ldrd	r0, [sp, #88]	; 0x58
   1a204:	cmp	r1, r3
   1a208:	cmpeq	r0, r2
   1a20c:	bne	1a604 <_start@@Base+0x7f10>
   1a210:	mov	r1, r5
   1a214:	mov	r3, #4
   1a218:	mov	r2, r6
   1a21c:	mov	r0, r4
   1a220:	bl	14498 <_start@@Base+0x1da4>
   1a224:	cmp	r5, r0
   1a228:	mov	r1, r0
   1a22c:	beq	1a5ec <_start@@Base+0x7ef8>
   1a230:	add	r3, sp, #260	; 0x104
   1a234:	mov	r2, r6
   1a238:	mov	r0, r4
   1a23c:	bl	21098 <flatcc_json_parser_build_string@@Base>
   1a240:	ldr	r3, [sp, #260]	; 0x104
   1a244:	mov	r5, r0
   1a248:	cmp	r3, #0
   1a24c:	beq	19bb4 <_start@@Base+0x74c0>
   1a250:	mov	r1, #2
   1a254:	b	1a0f0 <_start@@Base+0x79fc>
   1a258:	add	r3, pc, #496	; 0x1f0
   1a25c:	ldrd	r2, [r3]
   1a260:	cmp	r1, r3
   1a264:	cmpeq	r0, r2
   1a268:	bne	1a3dc <_start@@Base+0x7ce8>
   1a26c:	mov	r3, #8
   1a270:	mov	r2, r6
   1a274:	mov	r1, r5
   1a278:	mov	r0, r4
   1a27c:	bl	14498 <_start@@Base+0x1da4>
   1a280:	cmp	r5, r0
   1a284:	mov	r7, r0
   1a288:	beq	1a314 <_start@@Base+0x7c20>
   1a28c:	add	r1, sp, #264	; 0x108
   1a290:	mov	r2, #0
   1a294:	mov	r3, #0
   1a298:	mov	r8, r1
   1a29c:	mov	r0, r4
   1a2a0:	strd	r2, [r1]
   1a2a4:	mov	r3, r1
   1a2a8:	mov	r2, r6
   1a2ac:	mov	r1, r7
   1a2b0:	bl	135f0 <_start@@Base+0xefc>
   1a2b4:	cmp	r7, r0
   1a2b8:	mov	r5, r0
   1a2bc:	bne	1a2e8 <_start@@Base+0x7bf4>
   1a2c0:	mov	r1, r0
   1a2c4:	ldr	r3, [pc, #404]	; 1a460 <_start@@Base+0x7d6c>
   1a2c8:	mov	r2, r6
   1a2cc:	mov	r0, r4
   1a2d0:	str	r8, [sp]
   1a2d4:	bl	15b88 <_start@@Base+0x3494>
   1a2d8:	cmp	r6, r0
   1a2dc:	cmpne	r5, r0
   1a2e0:	mov	r5, r0
   1a2e4:	beq	19bb4 <_start@@Base+0x74c0>
   1a2e8:	add	r3, sp, #264	; 0x108
   1a2ec:	ldrd	r2, [r3]
   1a2f0:	orrs	r3, r2, r3
   1a2f4:	bne	1a304 <_start@@Base+0x7c10>
   1a2f8:	ldr	r3, [r4, #8]
   1a2fc:	tst	r3, #2
   1a300:	beq	1a1e0 <_start@@Base+0x7aec>
   1a304:	mov	r3, #8
   1a308:	mov	r1, #5
   1a30c:	mov	r2, r3
   1a310:	b	1a1c4 <_start@@Base+0x7ad0>
   1a314:	add	r5, r5, #8
   1a318:	mov	r1, r6
   1a31c:	mov	r0, r5
   1a320:	mov	r8, #0
   1a324:	bl	127e8 <_start@@Base+0xf4>
   1a328:	and	r3, r1, #-16777216	; 0xff000000
   1a32c:	str	r8, [sp, #152]	; 0x98
   1a330:	str	r3, [sp, #156]	; 0x9c
   1a334:	ldrd	r2, [sp, #152]	; 0x98
   1a338:	cmp	r3, #889192448	; 0x35000000
   1a33c:	cmpeq	r2, #0
   1a340:	bne	1a5ec <_start@@Base+0x7ef8>
   1a344:	mov	r3, #1
   1a348:	mov	r2, r6
   1a34c:	mov	r1, r5
   1a350:	mov	r0, r4
   1a354:	bl	14498 <_start@@Base+0x1da4>
   1a358:	cmp	r5, r0
   1a35c:	mov	r7, r0
   1a360:	beq	1a5ec <_start@@Base+0x7ef8>
   1a364:	str	r8, [sp, #264]	; 0x108
   1a368:	add	r8, sp, #264	; 0x108
   1a36c:	mov	r1, r0
   1a370:	mov	r2, r6
   1a374:	mov	r0, r4
   1a378:	mov	r3, r8
   1a37c:	bl	14648 <_start@@Base+0x1f54>
   1a380:	cmp	r7, r0
   1a384:	mov	r5, r0
   1a388:	bne	1a3b4 <_start@@Base+0x7cc0>
   1a38c:	mov	r1, r0
   1a390:	ldr	r3, [pc, #204]	; 1a464 <_start@@Base+0x7d70>
   1a394:	mov	r2, r6
   1a398:	mov	r0, r4
   1a39c:	str	r8, [sp]
   1a3a0:	bl	14bf0 <_start@@Base+0x24fc>
   1a3a4:	cmp	r6, r0
   1a3a8:	cmpne	r5, r0
   1a3ac:	mov	r5, r0
   1a3b0:	beq	19bb4 <_start@@Base+0x74c0>
   1a3b4:	ldr	r3, [sp, #264]	; 0x108
   1a3b8:	cmp	r3, #0
   1a3bc:	bne	1a3cc <_start@@Base+0x7cd8>
   1a3c0:	ldr	r3, [r4, #8]
   1a3c4:	tst	r3, #2
   1a3c8:	beq	1a1e0 <_start@@Base+0x7aec>
   1a3cc:	mov	r3, #4
   1a3d0:	mov	r1, #6
   1a3d4:	mov	r2, r3
   1a3d8:	b	1a034 <_start@@Base+0x7940>
   1a3dc:	mov	r8, #0
   1a3e0:	ldr	fp, [pc, #128]	; 1a468 <_start@@Base+0x7d74>
   1a3e4:	mov	sl, #0
   1a3e8:	str	r8, [sp, #160]	; 0xa0
   1a3ec:	str	r1, [sp, #164]	; 0xa4
   1a3f0:	ldrd	r2, [sp, #160]	; 0xa0
   1a3f4:	cmp	r3, fp
   1a3f8:	cmpeq	r2, sl
   1a3fc:	bne	1a46c <_start@@Base+0x7d78>
   1a400:	mov	r1, r5
   1a404:	mov	r3, #4
   1a408:	mov	r2, r6
   1a40c:	mov	r0, r4
   1a410:	bl	14498 <_start@@Base+0x1da4>
   1a414:	cmp	r5, r0
   1a418:	mov	r1, r0
   1a41c:	beq	1a608 <_start@@Base+0x7f14>
   1a420:	add	r3, sp, #260	; 0x104
   1a424:	mov	r2, r6
   1a428:	mov	r0, r4
   1a42c:	bl	21098 <flatcc_json_parser_build_string@@Base>
   1a430:	ldr	r3, [sp, #260]	; 0x104
   1a434:	mov	r5, r0
   1a438:	cmp	r3, r8
   1a43c:	beq	19bb4 <_start@@Base+0x74c0>
   1a440:	mov	r1, #4
   1a444:	b	1a0f0 <_start@@Base+0x79fc>
   1a448:	teqcc	r2, r4, lsr r3
   1a44c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1a450:	teqcc	r2, r4, lsr r3
   1a454:	cmnvs	r3, #-1946157055	; 0x8c000001
   1a458:	andeq	r4, r3, r0, lsr #5
   1a45c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1a460:	andeq	r4, r3, ip, lsr #5
   1a464:			; <UNDEFINED> instruction: 0x000342b8
   1a468:	cmnvs	r3, #-1946157055	; 0x8c000001
   1a46c:	add	r3, pc, #916	; 0x394
   1a470:	ldrd	r2, [r3]
   1a474:	cmp	r1, r3
   1a478:	cmpeq	r0, r2
   1a47c:	bne	1a604 <_start@@Base+0x7f10>
   1a480:	mov	r3, #8
   1a484:	mov	r2, r6
   1a488:	mov	r1, r5
   1a48c:	mov	r0, r4
   1a490:	bl	14498 <_start@@Base+0x1da4>
   1a494:	cmp	r5, r0
   1a498:	mov	r7, r0
   1a49c:	beq	1a528 <_start@@Base+0x7e34>
   1a4a0:	add	r1, sp, #264	; 0x108
   1a4a4:	mov	r2, #0
   1a4a8:	mov	r3, #0
   1a4ac:	mov	r8, r1
   1a4b0:	mov	r0, r4
   1a4b4:	strd	r2, [r1]
   1a4b8:	mov	r3, r1
   1a4bc:	mov	r2, r6
   1a4c0:	mov	r1, r7
   1a4c4:	bl	135f0 <_start@@Base+0xefc>
   1a4c8:	cmp	r7, r0
   1a4cc:	mov	r5, r0
   1a4d0:	bne	1a4fc <_start@@Base+0x7e08>
   1a4d4:	mov	r1, r0
   1a4d8:	ldr	r3, [pc, #848]	; 1a830 <_start@@Base+0x813c>
   1a4dc:	mov	r2, r6
   1a4e0:	mov	r0, r4
   1a4e4:	str	r8, [sp]
   1a4e8:	bl	15b88 <_start@@Base+0x3494>
   1a4ec:	cmp	r6, r0
   1a4f0:	cmpne	r5, r0
   1a4f4:	mov	r5, r0
   1a4f8:	beq	19bb4 <_start@@Base+0x74c0>
   1a4fc:	add	r3, sp, #264	; 0x108
   1a500:	ldrd	r2, [r3]
   1a504:	orrs	r3, r2, r3
   1a508:	bne	1a518 <_start@@Base+0x7e24>
   1a50c:	ldr	r3, [r4, #8]
   1a510:	tst	r3, #2
   1a514:	beq	1a1e0 <_start@@Base+0x7aec>
   1a518:	mov	r3, #8
   1a51c:	mov	r1, #7
   1a520:	mov	r2, r3
   1a524:	b	1a1c4 <_start@@Base+0x7ad0>
   1a528:	add	r5, r5, #8
   1a52c:	mov	r1, r6
   1a530:	mov	r0, r5
   1a534:	bl	127e8 <_start@@Base+0xf4>
   1a538:	and	r3, r1, #-16777216	; 0xff000000
   1a53c:	str	r8, [sp, #168]	; 0xa8
   1a540:	str	r3, [sp, #172]	; 0xac
   1a544:	ldrd	r2, [sp, #168]	; 0xa8
   1a548:	cmp	r3, #889192448	; 0x35000000
   1a54c:	cmpeq	r2, #0
   1a550:	bne	1a5ec <_start@@Base+0x7ef8>
   1a554:	mov	r3, #1
   1a558:	mov	r2, r6
   1a55c:	mov	r1, r5
   1a560:	mov	r0, r4
   1a564:	bl	14498 <_start@@Base+0x1da4>
   1a568:	cmp	r5, r0
   1a56c:	mov	r7, r0
   1a570:	beq	1a5ec <_start@@Base+0x7ef8>
   1a574:	str	r8, [sp, #264]	; 0x108
   1a578:	add	r8, sp, #264	; 0x108
   1a57c:	mov	r1, r0
   1a580:	mov	r2, r6
   1a584:	mov	r0, r4
   1a588:	mov	r3, r8
   1a58c:	bl	14648 <_start@@Base+0x1f54>
   1a590:	cmp	r7, r0
   1a594:	mov	r5, r0
   1a598:	bne	1a5c4 <_start@@Base+0x7ed0>
   1a59c:	mov	r1, r0
   1a5a0:	ldr	r3, [pc, #652]	; 1a834 <_start@@Base+0x8140>
   1a5a4:	mov	r2, r6
   1a5a8:	mov	r0, r4
   1a5ac:	str	r8, [sp]
   1a5b0:	bl	14bf0 <_start@@Base+0x24fc>
   1a5b4:	cmp	r6, r0
   1a5b8:	cmpne	r5, r0
   1a5bc:	mov	r5, r0
   1a5c0:	beq	19bb4 <_start@@Base+0x74c0>
   1a5c4:	ldr	r3, [sp, #264]	; 0x108
   1a5c8:	cmp	r3, #0
   1a5cc:	bne	1a5dc <_start@@Base+0x7ee8>
   1a5d0:	ldr	r3, [r4, #8]
   1a5d4:	tst	r3, #2
   1a5d8:	beq	1a1e0 <_start@@Base+0x7aec>
   1a5dc:	mov	r3, #4
   1a5e0:	mov	r1, #8
   1a5e4:	mov	r2, r3
   1a5e8:	b	1a034 <_start@@Base+0x7940>
   1a5ec:	mov	r2, r6
   1a5f0:	mov	r1, r5
   1a5f4:	mov	r0, r4
   1a5f8:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a5fc:	mov	r5, r0
   1a600:	b	1a1e0 <_start@@Base+0x7aec>
   1a604:	mov	r1, r5
   1a608:	mov	r2, r6
   1a60c:	b	1a5f4 <_start@@Base+0x7f00>
   1a610:	mov	r7, r0
   1a614:	add	r3, pc, #500	; 0x1f4
   1a618:	ldrd	r2, [r3]
   1a61c:	ldrd	r0, [sp, #24]
   1a620:	cmp	r1, r3
   1a624:	cmpeq	r0, r2
   1a628:	movne	r5, r7
   1a62c:	bne	1a94c <_start@@Base+0x8258>
   1a630:	mov	r3, #6
   1a634:	mov	r2, r6
   1a638:	mov	r1, r7
   1a63c:	mov	r0, r4
   1a640:	bl	14498 <_start@@Base+0x1da4>
   1a644:	cmp	r7, r0
   1a648:	mov	r5, r0
   1a64c:	beq	1a94c <_start@@Base+0x8258>
   1a650:	mov	r1, #2
   1a654:	ldr	r0, [r4]
   1a658:	bl	1d108 <flatcc_builder_start_table@@Base>
   1a65c:	cmp	r0, #0
   1a660:	bne	19bb4 <_start@@Base+0x74c0>
   1a664:	ldr	sl, [pc, #460]	; 1a838 <_start@@Base+0x8144>
   1a668:	mov	r1, r5
   1a66c:	add	r3, sp, #260	; 0x104
   1a670:	mov	r2, r6
   1a674:	mov	r0, r4
   1a678:	add	r9, pc, #408	; 0x198
   1a67c:	ldrd	r8, [r9]
   1a680:	bl	14344 <_start@@Base+0x1c50>
   1a684:	mov	r5, r0
   1a688:	ldr	r3, [sp, #260]	; 0x104
   1a68c:	cmp	r3, #0
   1a690:	bne	1a6b8 <_start@@Base+0x7fc4>
   1a694:	ldr	r3, [r4, #24]
   1a698:	cmp	r3, #0
   1a69c:	bne	19bb4 <_start@@Base+0x74c0>
   1a6a0:	ldr	r0, [r4]
   1a6a4:	bl	1d730 <flatcc_builder_end_table@@Base>
   1a6a8:	subs	r7, r0, #0
   1a6ac:	beq	19bb4 <_start@@Base+0x74c0>
   1a6b0:	mov	r1, #2
   1a6b4:	b	1b120 <_start@@Base+0x8a2c>
   1a6b8:	mov	r2, r6
   1a6bc:	mov	r1, r5
   1a6c0:	mov	r0, r4
   1a6c4:	bl	1369c <_start@@Base+0xfa8>
   1a6c8:	mov	r1, r6
   1a6cc:	mov	r5, r0
   1a6d0:	bl	127e8 <_start@@Base+0xf4>
   1a6d4:	add	r3, pc, #324	; 0x144
   1a6d8:	ldrd	r2, [r3]
   1a6dc:	cmp	r1, r3
   1a6e0:	cmpeq	r0, r2
   1a6e4:	bne	1a940 <_start@@Base+0x824c>
   1a6e8:	add	r7, r5, #8
   1a6ec:	mov	r1, r6
   1a6f0:	mov	r0, r7
   1a6f4:	bl	127e8 <_start@@Base+0xf4>
   1a6f8:	add	r3, pc, #296	; 0x128
   1a6fc:	ldrd	r2, [r3]
   1a700:	cmp	r1, r3
   1a704:	cmpeq	r0, r2
   1a708:	bne	1a840 <_start@@Base+0x814c>
   1a70c:	add	r5, r5, #16
   1a710:	mov	r1, r6
   1a714:	mov	r0, r5
   1a718:	bl	127e8 <_start@@Base+0xf4>
   1a71c:	and	r3, r0, #-16777216	; 0xff000000
   1a720:	str	r3, [sp, #176]	; 0xb0
   1a724:	str	r1, [sp, #180]	; 0xb4
   1a728:	ldrd	r2, [sp, #176]	; 0xb0
   1a72c:	cmp	r3, r9
   1a730:	cmpeq	r2, r8
   1a734:	bne	1a940 <_start@@Base+0x824c>
   1a738:	mov	r3, #5
   1a73c:	mov	r2, r6
   1a740:	mov	r1, r5
   1a744:	mov	r0, r4
   1a748:	bl	14498 <_start@@Base+0x1da4>
   1a74c:	cmp	r5, r0
   1a750:	mov	r7, r0
   1a754:	beq	1a940 <_start@@Base+0x824c>
   1a758:	mov	r3, #0
   1a75c:	add	fp, sp, #264	; 0x108
   1a760:	mov	r1, r0
   1a764:	mov	r2, r6
   1a768:	mov	r0, r4
   1a76c:	str	r3, [sp, #264]	; 0x108
   1a770:	mov	r3, fp
   1a774:	bl	14648 <_start@@Base+0x1f54>
   1a778:	cmp	r7, r0
   1a77c:	mov	r5, r0
   1a780:	bne	1a7ac <_start@@Base+0x80b8>
   1a784:	mov	r1, r0
   1a788:	ldr	r3, [pc, #172]	; 1a83c <_start@@Base+0x8148>
   1a78c:	mov	r2, r6
   1a790:	mov	r0, r4
   1a794:	str	fp, [sp]
   1a798:	bl	14bf0 <_start@@Base+0x24fc>
   1a79c:	cmp	r6, r0
   1a7a0:	cmpne	r5, r0
   1a7a4:	mov	r5, r0
   1a7a8:	beq	19bb4 <_start@@Base+0x74c0>
   1a7ac:	ldr	r3, [sp, #264]	; 0x108
   1a7b0:	cmp	r3, #0
   1a7b4:	bne	1a7c4 <_start@@Base+0x80d0>
   1a7b8:	ldr	r3, [r4, #8]
   1a7bc:	tst	r3, #2
   1a7c0:	beq	1a7e8 <_start@@Base+0x80f4>
   1a7c4:	mov	r3, #4
   1a7c8:	mov	r1, #1
   1a7cc:	ldr	r0, [r4]
   1a7d0:	mov	r2, r3
   1a7d4:	bl	1e08c <flatcc_builder_table_add@@Base>
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	19bb4 <_start@@Base+0x74c0>
   1a7e0:	ldr	r3, [sp, #264]	; 0x108
   1a7e4:	str	r3, [r0]
   1a7e8:	mov	r1, r5
   1a7ec:	add	r3, sp, #260	; 0x104
   1a7f0:	mov	r2, r6
   1a7f4:	mov	r0, r4
   1a7f8:	bl	13518 <_start@@Base+0xe24>
   1a7fc:	mov	r5, r0
   1a800:	b	1a688 <_start@@Base+0x7f94>
   1a804:	nop	{0}
   1a808:	teqcc	r2, r4, lsr r3
   1a80c:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1a810:	ldrvs	r0, [r3, -r0]!
   1a814:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a818:	movwvc	r0, #0
   1a81c:	cmnvc	r4, #112, 10	; 0x1c000000
   1a820:	svcpl	0x00626262
   1a824:	cmnvs	r1, r1, ror #2
   1a828:	cmnvs	r2, pc, asr r4
   1a82c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a830:	andeq	r4, r3, r4, asr #5
   1a834:	ldrdeq	r4, [r3], -r0
   1a838:	andeq	r4, r3, r8, ror #5
   1a83c:	ldrdeq	r4, [r3], -ip
   1a840:	bic	r3, r0, #255	; 0xff
   1a844:	str	r3, [sp, #184]	; 0xb8
   1a848:	str	r1, [sp, #188]	; 0xbc
   1a84c:	add	r1, pc, #892	; 0x37c
   1a850:	ldrd	r0, [r1]
   1a854:	ldrd	r2, [sp, #184]	; 0xb8
   1a858:	cmp	r3, r1
   1a85c:	cmpeq	r2, r0
   1a860:	bne	1a928 <_start@@Base+0x8234>
   1a864:	mov	r3, #7
   1a868:	mov	r2, r6
   1a86c:	mov	r1, r7
   1a870:	mov	r0, r4
   1a874:	bl	14498 <_start@@Base+0x1da4>
   1a878:	cmp	r7, r0
   1a87c:	mov	fp, r0
   1a880:	beq	1a928 <_start@@Base+0x8234>
   1a884:	add	r1, sp, #264	; 0x108
   1a888:	mov	r2, #0
   1a88c:	mov	r3, #0
   1a890:	mov	r7, r1
   1a894:	mov	r0, r4
   1a898:	strd	r2, [r1]
   1a89c:	mov	r3, r1
   1a8a0:	mov	r2, r6
   1a8a4:	mov	r1, fp
   1a8a8:	bl	135f0 <_start@@Base+0xefc>
   1a8ac:	cmp	fp, r0
   1a8b0:	mov	r5, r0
   1a8b4:	bne	1a8e0 <_start@@Base+0x81ec>
   1a8b8:	mov	r1, r0
   1a8bc:	mov	r3, sl
   1a8c0:	str	r7, [sp]
   1a8c4:	mov	r2, r6
   1a8c8:	mov	r0, r4
   1a8cc:	bl	15b88 <_start@@Base+0x3494>
   1a8d0:	cmp	r6, r0
   1a8d4:	cmpne	r5, r0
   1a8d8:	mov	r5, r0
   1a8dc:	beq	19bb4 <_start@@Base+0x74c0>
   1a8e0:	add	r3, sp, #264	; 0x108
   1a8e4:	ldrd	r2, [r3]
   1a8e8:	orrs	r3, r2, r3
   1a8ec:	bne	1a8fc <_start@@Base+0x8208>
   1a8f0:	ldr	r3, [r4, #8]
   1a8f4:	tst	r3, #2
   1a8f8:	beq	1a7e8 <_start@@Base+0x80f4>
   1a8fc:	mov	r3, #8
   1a900:	mov	r1, #0
   1a904:	ldr	r0, [r4]
   1a908:	mov	r2, r3
   1a90c:	bl	1e08c <flatcc_builder_table_add@@Base>
   1a910:	cmp	r0, #0
   1a914:	beq	19bb4 <_start@@Base+0x74c0>
   1a918:	add	r3, sp, #264	; 0x108
   1a91c:	ldrd	r2, [r3]
   1a920:	strd	r2, [r0]
   1a924:	b	1a7e8 <_start@@Base+0x80f4>
   1a928:	mov	r2, r6
   1a92c:	mov	r1, r7
   1a930:	mov	r0, r4
   1a934:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a938:	mov	r5, r0
   1a93c:	b	1a7e8 <_start@@Base+0x80f4>
   1a940:	mov	r2, r6
   1a944:	mov	r1, r5
   1a948:	b	1a930 <_start@@Base+0x823c>
   1a94c:	mov	r2, r6
   1a950:	mov	r1, r5
   1a954:	mov	r0, r4
   1a958:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1a95c:	mov	r5, r0
   1a960:	b	19f14 <_start@@Base+0x7820>
   1a964:	mov	r2, r6
   1a968:	mov	r1, r3
   1a96c:	b	1a954 <_start@@Base+0x8260>
   1a970:	mov	r2, r6
   1a974:	mov	r1, r7
   1a978:	b	1a954 <_start@@Base+0x8260>
   1a97c:	and	r3, r8, #-16777216	; 0xff000000
   1a980:	str	r3, [sp, #192]	; 0xc0
   1a984:	str	r9, [sp, #196]	; 0xc4
   1a988:	add	r3, pc, #584	; 0x248
   1a98c:	ldrd	r2, [r3]
   1a990:	ldrd	r0, [sp, #192]	; 0xc0
   1a994:	cmp	r1, r3
   1a998:	cmpeq	r0, r2
   1a99c:	bne	1b0e8 <_start@@Base+0x89f4>
   1a9a0:	mov	r3, #5
   1a9a4:	mov	r2, r6
   1a9a8:	mov	r1, r7
   1a9ac:	mov	r0, r4
   1a9b0:	bl	14498 <_start@@Base+0x1da4>
   1a9b4:	cmp	r7, r0
   1a9b8:	mov	r5, r0
   1a9bc:	beq	1b0d4 <_start@@Base+0x89e0>
   1a9c0:	mov	r1, #10
   1a9c4:	ldr	r0, [r4]
   1a9c8:	bl	1d108 <flatcc_builder_start_table@@Base>
   1a9cc:	cmp	r0, #0
   1a9d0:	bne	19bcc <_start@@Base+0x74d8>
   1a9d4:	add	r3, sp, #264	; 0x108
   1a9d8:	mov	r2, r6
   1a9dc:	mov	r1, r5
   1a9e0:	mov	r0, r4
   1a9e4:	str	r3, [sp]
   1a9e8:	mov	r3, #5
   1a9ec:	bl	211cc <flatcc_json_parser_prepare_unions@@Base>
   1a9f0:	cmp	r6, r0
   1a9f4:	beq	19bcc <_start@@Base+0x74d8>
   1a9f8:	add	fp, pc, #480	; 0x1e0
   1a9fc:	ldrd	sl, [fp]
   1aa00:	mov	r1, r5
   1aa04:	add	r3, sp, #260	; 0x104
   1aa08:	mov	r2, r6
   1aa0c:	mov	r0, r4
   1aa10:	bl	14344 <_start@@Base+0x1c50>
   1aa14:	mov	r5, r0
   1aa18:	ldr	r3, [sp, #260]	; 0x104
   1aa1c:	cmp	r3, #0
   1aa20:	bne	1aa74 <_start@@Base+0x8380>
   1aa24:	ldr	r3, [r4, #24]
   1aa28:	cmp	r3, #0
   1aa2c:	bne	19bcc <_start@@Base+0x74d8>
   1aa30:	mov	r1, r5
   1aa34:	mov	r2, r6
   1aa38:	ldr	r3, [sp, #264]	; 0x108
   1aa3c:	mov	r0, r4
   1aa40:	bl	21234 <flatcc_json_parser_finalize_unions@@Base>
   1aa44:	mov	r5, r0
   1aa48:	ldr	r0, [r4]
   1aa4c:	bl	1d730 <flatcc_builder_end_table@@Base>
   1aa50:	subs	r7, r0, #0
   1aa54:	beq	19bcc <_start@@Base+0x74d8>
   1aa58:	mov	r1, #1
   1aa5c:	ldr	r0, [r4]
   1aa60:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1aa64:	cmp	r0, #0
   1aa68:	beq	19be4 <_start@@Base+0x74f0>
   1aa6c:	str	r7, [r0]
   1aa70:	b	19a94 <_start@@Base+0x73a0>
   1aa74:	mov	r2, r6
   1aa78:	mov	r1, r5
   1aa7c:	mov	r0, r4
   1aa80:	bl	1369c <_start@@Base+0xfa8>
   1aa84:	mov	r1, r6
   1aa88:	mov	r5, r0
   1aa8c:	bl	127e8 <_start@@Base+0xf4>
   1aa90:	add	r3, pc, #336	; 0x150
   1aa94:	ldrd	r2, [r3]
   1aa98:	cmp	r1, r3
   1aa9c:	cmpeq	r0, r2
   1aaa0:	bhi	1ad08 <_start@@Base+0x8614>
   1aaa4:	add	r3, pc, #324	; 0x144
   1aaa8:	ldrd	r2, [r3]
   1aaac:	cmp	r1, r3
   1aab0:	cmpeq	r0, r2
   1aab4:	bne	1ac0c <_start@@Base+0x8518>
   1aab8:	add	r5, r5, #8
   1aabc:	mov	r1, r6
   1aac0:	mov	r0, r5
   1aac4:	bl	127e8 <_start@@Base+0xf4>
   1aac8:	bic	r3, r0, #255	; 0xff
   1aacc:	str	r3, [sp, #200]	; 0xc8
   1aad0:	str	r1, [sp, #204]	; 0xcc
   1aad4:	add	r3, pc, #284	; 0x11c
   1aad8:	ldrd	r2, [r3]
   1aadc:	ldrd	r8, [sp, #200]	; 0xc8
   1aae0:	cmp	r9, r3
   1aae4:	cmpeq	r8, r2
   1aae8:	bne	1ab58 <_start@@Base+0x8464>
   1aaec:	mov	r1, r5
   1aaf0:	mov	r3, #7
   1aaf4:	mov	r2, r6
   1aaf8:	mov	r0, r4
   1aafc:	bl	14498 <_start@@Base+0x1da4>
   1ab00:	cmp	r5, r0
   1ab04:	mov	r1, r0
   1ab08:	beq	1b0c8 <_start@@Base+0x89d4>
   1ab0c:	ldr	r3, [pc, #236]	; 1ac00 <_start@@Base+0x850c>
   1ab10:	str	r3, [sp, #12]
   1ab14:	ldr	r3, [pc, #232]	; 1ac04 <_start@@Base+0x8510>
   1ab18:	str	r3, [sp, #8]
   1ab1c:	ldr	r3, [sp, #264]	; 0x108
   1ab20:	str	r3, [sp, #4]
   1ab24:	mov	r3, #3
   1ab28:	str	r3, [sp]
   1ab2c:	mov	r3, #1
   1ab30:	mov	r2, r6
   1ab34:	mov	r0, r4
   1ab38:	bl	21398 <flatcc_json_parser_union_type@@Base>
   1ab3c:	mov	r1, r0
   1ab40:	add	r3, sp, #260	; 0x104
   1ab44:	mov	r2, r6
   1ab48:	mov	r0, r4
   1ab4c:	bl	13518 <_start@@Base+0xe24>
   1ab50:	mov	r5, r0
   1ab54:	b	1aa18 <_start@@Base+0x8324>
   1ab58:	mov	r3, #0
   1ab5c:	mov	r2, #0
   1ab60:	str	r3, [sp, #48]	; 0x30
   1ab64:	lsr	r3, r1, #16
   1ab68:	lsl	r3, r3, #16
   1ab6c:	str	r3, [sp, #52]	; 0x34
   1ab70:	ldr	r3, [pc, #144]	; 1ac08 <_start@@Base+0x8514>
   1ab74:	ldrd	r0, [sp, #48]	; 0x30
   1ab78:	cmp	r1, r3
   1ab7c:	cmpeq	r0, r2
   1ab80:	bne	1b0c8 <_start@@Base+0x89d4>
   1ab84:	mov	r1, r5
   1ab88:	mov	r3, #2
   1ab8c:	mov	r2, r6
   1ab90:	mov	r0, r4
   1ab94:	bl	14498 <_start@@Base+0x1da4>
   1ab98:	cmp	r5, r0
   1ab9c:	mov	r1, r0
   1aba0:	beq	1b0c8 <_start@@Base+0x89d4>
   1aba4:	ldr	r3, [pc, #84]	; 1ac00 <_start@@Base+0x850c>
   1aba8:	str	r3, [sp, #8]
   1abac:	ldr	r3, [sp, #264]	; 0x108
   1abb0:	str	r3, [sp, #4]
   1abb4:	mov	r3, #3
   1abb8:	str	r3, [sp]
   1abbc:	mov	r3, #1
   1abc0:	mov	r2, r6
   1abc4:	mov	r0, r4
   1abc8:	bl	2128c <flatcc_json_parser_union@@Base>
   1abcc:	b	1ab3c <_start@@Base+0x8448>
   1abd0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1abd4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1abd8:	strvs	r0, [r0, #-0]
   1abdc:	stclvs	6, cr7, [pc, #-420]!	; 1aa40 <_start@@Base+0x834c>
   1abe0:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1abe4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1abe8:	cmnvs	r3, r4, ror #8
   1abec:	cmnvs	r8, #-2147483620	; 0x8000001c
   1abf0:	strbvs	r6, [pc, -r9, ror #28]!
   1abf4:	cmnvs	lr, r1, ror #8
   1abf8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1abfc:	cmnvc	r4, #116, 30	; 0x1d0
   1ac00:	andeq	r5, r1, r4, asr #5
   1ac04:	strdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   1ac08:	cmnvc	r4, #0
   1ac0c:	add	r3, pc, #996	; 0x3e4
   1ac10:	ldrd	r2, [r3]
   1ac14:	cmp	r1, r3
   1ac18:	cmpeq	r0, r2
   1ac1c:	bne	1aca4 <_start@@Base+0x85b0>
   1ac20:	add	r5, r5, #8
   1ac24:	mov	r1, r6
   1ac28:	mov	r0, r5
   1ac2c:	bl	127e8 <_start@@Base+0xf4>
   1ac30:	mov	r3, #0
   1ac34:	mov	r2, #0
   1ac38:	str	r3, [sp, #56]	; 0x38
   1ac3c:	lsr	r3, r1, #16
   1ac40:	lsl	r3, r3, #16
   1ac44:	str	r3, [sp, #60]	; 0x3c
   1ac48:	ldr	r3, [pc, #1016]	; 1b048 <_start@@Base+0x8954>
   1ac4c:	ldrd	r0, [sp, #56]	; 0x38
   1ac50:	cmp	r1, r3
   1ac54:	cmpeq	r0, r2
   1ac58:	bne	1b0c8 <_start@@Base+0x89d4>
   1ac5c:	mov	r1, r5
   1ac60:	mov	r3, #2
   1ac64:	mov	r2, r6
   1ac68:	mov	r0, r4
   1ac6c:	bl	14498 <_start@@Base+0x1da4>
   1ac70:	cmp	r5, r0
   1ac74:	mov	r1, r0
   1ac78:	beq	1b0c8 <_start@@Base+0x89d4>
   1ac7c:	ldr	r3, [pc, #992]	; 1b064 <_start@@Base+0x8970>
   1ac80:	str	r3, [sp, #12]
   1ac84:	ldr	r3, [pc, #960]	; 1b04c <_start@@Base+0x8958>
   1ac88:	str	r3, [sp, #8]
   1ac8c:	ldr	r3, [sp, #264]	; 0x108
   1ac90:	str	r3, [sp, #4]
   1ac94:	mov	r3, #7
   1ac98:	str	r3, [sp]
   1ac9c:	mov	r3, #3
   1aca0:	b	1ab30 <_start@@Base+0x843c>
   1aca4:	and	r3, r0, #-16777216	; 0xff000000
   1aca8:	str	r3, [sp, #208]	; 0xd0
   1acac:	str	r1, [sp, #212]	; 0xd4
   1acb0:	add	r3, pc, #840	; 0x348
   1acb4:	ldrd	r2, [r3]
   1acb8:	ldrd	r0, [sp, #208]	; 0xd0
   1acbc:	cmp	r1, r3
   1acc0:	cmpeq	r0, r2
   1acc4:	bne	1b0c8 <_start@@Base+0x89d4>
   1acc8:	mov	r1, r5
   1accc:	mov	r3, #5
   1acd0:	mov	r2, r6
   1acd4:	mov	r0, r4
   1acd8:	bl	14498 <_start@@Base+0x1da4>
   1acdc:	cmp	r5, r0
   1ace0:	mov	r1, r0
   1ace4:	beq	1b0c8 <_start@@Base+0x89d4>
   1ace8:	ldr	r3, [pc, #884]	; 1b064 <_start@@Base+0x8970>
   1acec:	str	r3, [sp, #8]
   1acf0:	ldr	r3, [sp, #264]	; 0x108
   1acf4:	str	r3, [sp, #4]
   1acf8:	mov	r3, #7
   1acfc:	str	r3, [sp]
   1ad00:	mov	r3, #3
   1ad04:	b	1abc0 <_start@@Base+0x84cc>
   1ad08:	add	r3, pc, #760	; 0x2f8
   1ad0c:	ldrd	r2, [r3]
   1ad10:	cmp	r1, r3
   1ad14:	cmpeq	r0, r2
   1ad18:	bhi	1ae38 <_start@@Base+0x8744>
   1ad1c:	add	r3, pc, #748	; 0x2ec
   1ad20:	ldrd	r2, [r3]
   1ad24:	cmp	r1, r3
   1ad28:	cmpeq	r0, r2
   1ad2c:	bne	1b0c8 <_start@@Base+0x89d4>
   1ad30:	add	r5, r5, #8
   1ad34:	mov	r1, r6
   1ad38:	mov	r0, r5
   1ad3c:	bl	127e8 <_start@@Base+0xf4>
   1ad40:	bic	r3, r0, #255	; 0xff
   1ad44:	str	r3, [sp, #216]	; 0xd8
   1ad48:	str	r1, [sp, #220]	; 0xdc
   1ad4c:	add	r3, pc, #708	; 0x2c4
   1ad50:	ldrd	r2, [r3]
   1ad54:	ldrd	r8, [sp, #216]	; 0xd8
   1ad58:	cmp	r9, r3
   1ad5c:	cmpeq	r8, r2
   1ad60:	bne	1adc0 <_start@@Base+0x86cc>
   1ad64:	mov	r1, r5
   1ad68:	mov	r3, #7
   1ad6c:	mov	r2, r6
   1ad70:	mov	r0, r4
   1ad74:	bl	14498 <_start@@Base+0x1da4>
   1ad78:	cmp	r5, r0
   1ad7c:	mov	r1, r0
   1ad80:	beq	1b0c8 <_start@@Base+0x89d4>
   1ad84:	ldr	r3, [pc, #708]	; 1b050 <_start@@Base+0x895c>
   1ad88:	mov	r2, r6
   1ad8c:	mov	r0, r4
   1ad90:	str	r3, [sp, #16]
   1ad94:	ldr	r3, [pc, #712]	; 1b064 <_start@@Base+0x8970>
   1ad98:	str	r3, [sp, #12]
   1ad9c:	ldr	r3, [pc, #688]	; 1b054 <_start@@Base+0x8960>
   1ada0:	str	r3, [sp, #8]
   1ada4:	ldr	r3, [sp, #264]	; 0x108
   1ada8:	str	r3, [sp, #4]
   1adac:	mov	r3, #9
   1adb0:	str	r3, [sp]
   1adb4:	mov	r3, #4
   1adb8:	bl	215e4 <flatcc_json_parser_union_type_vector@@Base>
   1adbc:	b	1ab3c <_start@@Base+0x8448>
   1adc0:	mov	r3, #0
   1adc4:	mov	r2, #0
   1adc8:	str	r3, [sp, #64]	; 0x40
   1adcc:	lsr	r3, r1, #16
   1add0:	lsl	r3, r3, #16
   1add4:	str	r3, [sp, #68]	; 0x44
   1add8:	ldr	r3, [pc, #632]	; 1b058 <_start@@Base+0x8964>
   1addc:	ldrd	r0, [sp, #64]	; 0x40
   1ade0:	cmp	r1, r3
   1ade4:	cmpeq	r0, r2
   1ade8:	bne	1b0c8 <_start@@Base+0x89d4>
   1adec:	mov	r1, r5
   1adf0:	mov	r3, #2
   1adf4:	mov	r2, r6
   1adf8:	mov	r0, r4
   1adfc:	bl	14498 <_start@@Base+0x1da4>
   1ae00:	cmp	r5, r0
   1ae04:	mov	r1, r0
   1ae08:	beq	1b0c8 <_start@@Base+0x89d4>
   1ae0c:	ldr	r3, [pc, #592]	; 1b064 <_start@@Base+0x8970>
   1ae10:	mov	r2, r6
   1ae14:	mov	r0, r4
   1ae18:	str	r3, [sp, #8]
   1ae1c:	ldr	r3, [sp, #264]	; 0x108
   1ae20:	str	r3, [sp, #4]
   1ae24:	mov	r3, #9
   1ae28:	str	r3, [sp]
   1ae2c:	mov	r3, #4
   1ae30:	bl	21518 <flatcc_json_parser_union_vector@@Base>
   1ae34:	b	1ab3c <_start@@Base+0x8448>
   1ae38:	add	r3, pc, #480	; 0x1e0
   1ae3c:	ldrd	r2, [r3]
   1ae40:	cmp	r1, r3
   1ae44:	cmpeq	r0, r2
   1ae48:	bne	1af64 <_start@@Base+0x8870>
   1ae4c:	add	r7, r5, #8
   1ae50:	mov	r1, r6
   1ae54:	mov	r0, r7
   1ae58:	bl	127e8 <_start@@Base+0xf4>
   1ae5c:	cmp	r1, fp
   1ae60:	cmpeq	r0, sl
   1ae64:	bne	1aee8 <_start@@Base+0x87f4>
   1ae68:	add	r5, r5, #16
   1ae6c:	mov	r1, r6
   1ae70:	mov	r0, r5
   1ae74:	mov	r7, #0
   1ae78:	bl	127e8 <_start@@Base+0xf4>
   1ae7c:	bic	r3, r1, #255	; 0xff
   1ae80:	str	r7, [sp, #224]	; 0xe0
   1ae84:	str	r3, [sp, #228]	; 0xe4
   1ae88:	add	r3, pc, #408	; 0x198
   1ae8c:	ldrd	r2, [r3]
   1ae90:	ldrd	r0, [sp, #224]	; 0xe0
   1ae94:	cmp	r1, r3
   1ae98:	cmpeq	r0, r2
   1ae9c:	bne	1b0c8 <_start@@Base+0x89d4>
   1aea0:	mov	r1, r5
   1aea4:	mov	r3, #3
   1aea8:	mov	r2, r6
   1aeac:	mov	r0, r4
   1aeb0:	bl	14498 <_start@@Base+0x1da4>
   1aeb4:	cmp	r5, r0
   1aeb8:	mov	r1, r0
   1aebc:	beq	1b0c8 <_start@@Base+0x89d4>
   1aec0:	ldr	r3, [pc, #412]	; 1b064 <_start@@Base+0x8970>
   1aec4:	str	r3, [sp, #12]
   1aec8:	ldr	r3, [pc, #396]	; 1b05c <_start@@Base+0x8968>
   1aecc:	str	r3, [sp, #8]
   1aed0:	ldr	r3, [sp, #264]	; 0x108
   1aed4:	str	r3, [sp, #4]
   1aed8:	mov	r3, #1
   1aedc:	str	r3, [sp]
   1aee0:	mov	r3, r7
   1aee4:	b	1ab30 <_start@@Base+0x843c>
   1aee8:	lsr	r3, r0, #16
   1aeec:	str	r1, [sp, #76]	; 0x4c
   1aef0:	lsl	r3, r3, #16
   1aef4:	str	r3, [sp, #72]	; 0x48
   1aef8:	add	r3, pc, #304	; 0x130
   1aefc:	ldrd	r2, [r3]
   1af00:	ldrd	r0, [sp, #72]	; 0x48
   1af04:	cmp	r1, r3
   1af08:	cmpeq	r0, r2
   1af0c:	bne	1af50 <_start@@Base+0x885c>
   1af10:	mov	r1, r7
   1af14:	mov	r3, #6
   1af18:	mov	r2, r6
   1af1c:	mov	r0, r4
   1af20:	bl	14498 <_start@@Base+0x1da4>
   1af24:	cmp	r7, r0
   1af28:	mov	r1, r0
   1af2c:	beq	1af50 <_start@@Base+0x885c>
   1af30:	ldr	r3, [pc, #300]	; 1b064 <_start@@Base+0x8970>
   1af34:	str	r3, [sp, #8]
   1af38:	ldr	r3, [sp, #264]	; 0x108
   1af3c:	str	r3, [sp, #4]
   1af40:	mov	r3, #1
   1af44:	str	r3, [sp]
   1af48:	mov	r3, #0
   1af4c:	b	1abc0 <_start@@Base+0x84cc>
   1af50:	mov	r2, r6
   1af54:	mov	r1, r7
   1af58:	mov	r0, r4
   1af5c:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1af60:	b	1ab3c <_start@@Base+0x8448>
   1af64:	add	r3, pc, #204	; 0xcc
   1af68:	ldrd	r2, [r3]
   1af6c:	cmp	r1, r3
   1af70:	cmpeq	r0, r2
   1af74:	bne	1b0c8 <_start@@Base+0x89d4>
   1af78:	add	r5, r5, #8
   1af7c:	mov	r1, r6
   1af80:	mov	r0, r5
   1af84:	bl	127e8 <_start@@Base+0xf4>
   1af88:	lsr	r3, r0, #16
   1af8c:	str	r1, [sp, #84]	; 0x54
   1af90:	lsl	r3, r3, #16
   1af94:	str	r3, [sp, #80]	; 0x50
   1af98:	add	r3, pc, #160	; 0xa0
   1af9c:	ldrd	r2, [r3]
   1afa0:	ldrd	r8, [sp, #80]	; 0x50
   1afa4:	cmp	r9, r3
   1afa8:	cmpeq	r8, r2
   1afac:	bne	1b068 <_start@@Base+0x8974>
   1afb0:	mov	r1, r5
   1afb4:	mov	r3, #6
   1afb8:	mov	r2, r6
   1afbc:	mov	r0, r4
   1afc0:	bl	14498 <_start@@Base+0x1da4>
   1afc4:	cmp	r5, r0
   1afc8:	mov	r1, r0
   1afcc:	beq	1b0c8 <_start@@Base+0x89d4>
   1afd0:	ldr	r3, [pc, #140]	; 1b064 <_start@@Base+0x8970>
   1afd4:	str	r3, [sp, #12]
   1afd8:	ldr	r3, [pc, #128]	; 1b060 <_start@@Base+0x896c>
   1afdc:	str	r3, [sp, #8]
   1afe0:	ldr	r3, [sp, #264]	; 0x108
   1afe4:	str	r3, [sp, #4]
   1afe8:	mov	r3, #5
   1afec:	str	r3, [sp]
   1aff0:	mov	r3, #2
   1aff4:	b	1ab30 <_start@@Base+0x843c>
   1aff8:	svcvs	0x005f7479
   1affc:	cmnvs	r1, #6464	; 0x1940
   1b000:	svcvs	0x00000000
   1b004:	cmnvs	r1, #6464	; 0x1940
   1b008:	svcpl	0x00636860
   1b00c:			; <UNDEFINED> instruction: 0x6d61696e
   1b010:	cmnvs	r3, r5, ror #8
   1b014:	cmnvs	r8, #-2147483620	; 0x8000001c
   1b018:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1b01c:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1b020:	svcpl	0x00636861
   1b024:			; <UNDEFINED> instruction: 0x6d61696e
   1b028:	andeq	r0, r0, r0
   1b02c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1b030:	ldrbvs	r0, [r2, #-0]!
   1b034:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1b038:	svcpl	0x006b6963
   1b03c:	cmnvc	r9, #1694498816	; 0x65000000
   1b040:	rsbvc	r0, r5, r0
   1b044:	blvs	17f8230 <__bss_end__@@Base+0x17c3e6c>
   1b048:	rsbvc	r0, r5, r0
   1b04c:	andeq	r4, r3, r4, lsl #6
   1b050:	andeq	r2, r1, r4, ror #17
   1b054:	andeq	r4, r3, r4, lsl r3
   1b058:	rsbsvc	r0, r3, #0
   1b05c:	andeq	r4, r3, r4, lsr #6
   1b060:	andeq	r4, r3, r4, lsr r3
   1b064:	andeq	r5, r1, r4, asr #5
   1b068:	mov	r3, #0
   1b06c:	str	r3, [sp, #232]	; 0xe8
   1b070:	and	r3, r1, #-16777216	; 0xff000000
   1b074:	str	r3, [sp, #236]	; 0xec
   1b078:	ldrd	r2, [sp, #232]	; 0xe8
   1b07c:	cmp	r3, #1795162112	; 0x6b000000
   1b080:	cmpeq	r2, #0
   1b084:	bne	1b0c8 <_start@@Base+0x89d4>
   1b088:	mov	r1, r5
   1b08c:	mov	r3, #1
   1b090:	mov	r2, r6
   1b094:	mov	r0, r4
   1b098:	bl	14498 <_start@@Base+0x1da4>
   1b09c:	cmp	r5, r0
   1b0a0:	mov	r1, r0
   1b0a4:	beq	1b0c8 <_start@@Base+0x89d4>
   1b0a8:	ldr	r3, [pc, #-76]	; 1b064 <_start@@Base+0x8970>
   1b0ac:	str	r3, [sp, #8]
   1b0b0:	ldr	r3, [sp, #264]	; 0x108
   1b0b4:	str	r3, [sp, #4]
   1b0b8:	mov	r3, #5
   1b0bc:	str	r3, [sp]
   1b0c0:	mov	r3, #2
   1b0c4:	b	1abc0 <_start@@Base+0x84cc>
   1b0c8:	mov	r2, r6
   1b0cc:	mov	r1, r5
   1b0d0:	b	1af58 <_start@@Base+0x8864>
   1b0d4:	mov	r2, r6
   1b0d8:	mov	r1, r5
   1b0dc:	mov	r0, r4
   1b0e0:	bl	20b9c <flatcc_json_parser_unmatched_symbol@@Base>
   1b0e4:	b	19968 <_start@@Base+0x7274>
   1b0e8:	mov	r2, r6
   1b0ec:	mov	r1, r7
   1b0f0:	b	1b0dc <_start@@Base+0x89e8>
   1b0f4:	ldr	r3, [r0, #8]
   1b0f8:	tst	r3, #1
   1b0fc:	moveq	r3, #15
   1b100:	moveq	r2, r6
   1b104:	moveq	r1, r5
   1b108:	beq	193ec <_start@@Base+0x6cf8>
   1b10c:	mov	r2, r6
   1b110:	mov	r1, r5
   1b114:	bl	206a8 <flatcc_json_parser_generic_json@@Base>
   1b118:	b	193ac <_start@@Base+0x6cb8>
   1b11c:	mov	r1, #1
   1b120:	ldr	r0, [r4]
   1b124:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1b128:	cmp	r0, #0
   1b12c:	beq	19bcc <_start@@Base+0x74d8>
   1b130:	str	r7, [r0]
   1b134:	b	19f14 <_start@@Base+0x7820>
   1b138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b13c:	sub	sp, sp, #20
   1b140:	mov	r6, r3
   1b144:	mov	r4, r1
   1b148:	mov	r7, r0
   1b14c:	mov	r1, r2
   1b150:	mov	r0, r4
   1b154:	ldr	r3, [sp, #56]	; 0x38
   1b158:	mov	r5, r2
   1b15c:	ldr	sl, [sp, #60]	; 0x3c
   1b160:	str	r3, [sp, #12]
   1b164:	bl	127e8 <_start@@Base+0xf4>
   1b168:	add	r3, pc, #712	; 0x2c8
   1b16c:	ldrd	r2, [r3]
   1b170:	cmp	r1, r3
   1b174:	cmpeq	r0, r2
   1b178:	bhi	1b278 <_start@@Base+0x8b84>
   1b17c:	add	r3, pc, #700	; 0x2bc
   1b180:	ldrd	r2, [r3]
   1b184:	mov	r8, #0
   1b188:	bic	r9, r1, #255	; 0xff
   1b18c:	cmp	r1, r3
   1b190:	cmpeq	r0, r2
   1b194:	bhi	1b1e0 <_start@@Base+0x8aec>
   1b198:	add	r3, pc, #680	; 0x2a8
   1b19c:	ldrd	r2, [r3]
   1b1a0:	cmp	r9, r3
   1b1a4:	cmpeq	r8, r2
   1b1a8:	bne	1b428 <_start@@Base+0x8d34>
   1b1ac:	mov	r1, r5
   1b1b0:	mov	r2, #3
   1b1b4:	mov	r0, r4
   1b1b8:	bl	135d0 <_start@@Base+0xedc>
   1b1bc:	cmp	r4, r0
   1b1c0:	mov	r1, r0
   1b1c4:	beq	1b428 <_start@@Base+0x8d34>
   1b1c8:	mov	r3, r6
   1b1cc:	mov	r2, r5
   1b1d0:	mov	r0, r7
   1b1d4:	add	sp, sp, #20
   1b1d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1dc:	b	12c20 <_start@@Base+0x52c>
   1b1e0:	add	r3, pc, #616	; 0x268
   1b1e4:	ldrd	r2, [r3]
   1b1e8:	cmp	r9, r3
   1b1ec:	cmpeq	r8, r2
   1b1f0:	bne	1b228 <_start@@Base+0x8b34>
   1b1f4:	mov	r1, r5
   1b1f8:	mov	r2, #3
   1b1fc:	mov	r0, r4
   1b200:	bl	135d0 <_start@@Base+0xedc>
   1b204:	cmp	r4, r0
   1b208:	mov	r1, r0
   1b20c:	beq	1b428 <_start@@Base+0x8d34>
   1b210:	mov	r3, r6
   1b214:	mov	r2, r5
   1b218:	mov	r0, r7
   1b21c:	add	sp, sp, #20
   1b220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b224:	b	13af0 <_start@@Base+0x13fc>
   1b228:	and	r2, r0, #-16777216	; 0xff000000
   1b22c:	mov	r3, r1
   1b230:	add	r1, pc, #544	; 0x220
   1b234:	ldrd	r0, [r1]
   1b238:	cmp	r3, r1
   1b23c:	cmpeq	r2, r0
   1b240:	bne	1b428 <_start@@Base+0x8d34>
   1b244:	mov	r1, r5
   1b248:	mov	r2, #5
   1b24c:	mov	r0, r4
   1b250:	bl	135d0 <_start@@Base+0xedc>
   1b254:	cmp	r4, r0
   1b258:	mov	r1, r0
   1b25c:	beq	1b428 <_start@@Base+0x8d34>
   1b260:	mov	r3, r6
   1b264:	mov	r2, r5
   1b268:	mov	r0, r7
   1b26c:	add	sp, sp, #20
   1b270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b274:	b	132f0 <_start@@Base+0xbfc>
   1b278:	add	r3, pc, #480	; 0x1e0
   1b27c:	ldrd	r2, [r3]
   1b280:	cmp	r1, r3
   1b284:	cmpeq	r0, r2
   1b288:	bhi	1b2d4 <_start@@Base+0x8be0>
   1b28c:	add	r3, pc, #468	; 0x1d4
   1b290:	ldrd	r2, [r3]
   1b294:	cmp	r1, r3
   1b298:	cmpeq	r0, r2
   1b29c:	bne	1b428 <_start@@Base+0x8d34>
   1b2a0:	mov	r1, r5
   1b2a4:	mov	r2, #8
   1b2a8:	mov	r0, r4
   1b2ac:	bl	135d0 <_start@@Base+0xedc>
   1b2b0:	cmp	r4, r0
   1b2b4:	mov	r1, r0
   1b2b8:	beq	1b428 <_start@@Base+0x8d34>
   1b2bc:	mov	r3, r6
   1b2c0:	mov	r2, r5
   1b2c4:	mov	r0, r7
   1b2c8:	add	sp, sp, #20
   1b2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2d0:	b	12ea0 <_start@@Base+0x7ac>
   1b2d4:	add	r3, pc, #404	; 0x194
   1b2d8:	ldrd	r2, [r3]
   1b2dc:	cmp	r1, r3
   1b2e0:	cmpeq	r0, r2
   1b2e4:	bhi	1b330 <_start@@Base+0x8c3c>
   1b2e8:	add	r3, pc, #392	; 0x188
   1b2ec:	ldrd	r2, [r3]
   1b2f0:	cmp	r1, r3
   1b2f4:	cmpeq	r0, r2
   1b2f8:	bne	1b428 <_start@@Base+0x8d34>
   1b2fc:	mov	r1, r5
   1b300:	mov	r2, #8
   1b304:	mov	r0, r4
   1b308:	bl	135d0 <_start@@Base+0xedc>
   1b30c:	cmp	r4, r0
   1b310:	mov	r1, r0
   1b314:	beq	1b428 <_start@@Base+0x8d34>
   1b318:	mov	r3, r6
   1b31c:	mov	r2, r5
   1b320:	mov	r0, r7
   1b324:	add	sp, sp, #20
   1b328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b32c:	b	13008 <_start@@Base+0x914>
   1b330:	add	r3, pc, #328	; 0x148
   1b334:	ldrd	r2, [r3]
   1b338:	cmp	r1, r3
   1b33c:	cmpeq	r0, r2
   1b340:	bne	1b378 <_start@@Base+0x8c84>
   1b344:	mov	r1, r5
   1b348:	mov	r2, #8
   1b34c:	mov	r0, r4
   1b350:	bl	135d0 <_start@@Base+0xedc>
   1b354:	cmp	r4, r0
   1b358:	mov	r1, r0
   1b35c:	beq	1b428 <_start@@Base+0x8d34>
   1b360:	mov	r3, r6
   1b364:	mov	r2, r5
   1b368:	mov	r0, r7
   1b36c:	add	sp, sp, #20
   1b370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b374:	b	131b8 <_start@@Base+0xac4>
   1b378:	add	r3, pc, #264	; 0x108
   1b37c:	ldrd	r2, [r3]
   1b380:	cmp	r1, r3
   1b384:	cmpeq	r0, r2
   1b388:	bne	1b428 <_start@@Base+0x8d34>
   1b38c:	add	r8, r4, #8
   1b390:	mov	r1, r5
   1b394:	mov	r0, r8
   1b398:	mov	r9, #0
   1b39c:	bl	127e8 <_start@@Base+0xf4>
   1b3a0:	mov	r3, r1
   1b3a4:	add	r1, pc, #228	; 0xe4
   1b3a8:	ldrd	r0, [r1]
   1b3ac:	cmp	r3, r1
   1b3b0:	cmpeq	r9, r0
   1b3b4:	bne	1b428 <_start@@Base+0x8d34>
   1b3b8:	mov	r2, #4
   1b3bc:	mov	r1, r5
   1b3c0:	mov	r0, r8
   1b3c4:	bl	135d0 <_start@@Base+0xedc>
   1b3c8:	cmp	r8, r0
   1b3cc:	mov	fp, r0
   1b3d0:	beq	1b428 <_start@@Base+0x8d34>
   1b3d4:	mov	r1, r5
   1b3d8:	bl	127e8 <_start@@Base+0xf4>
   1b3dc:	and	r3, r1, #-16777216	; 0xff000000
   1b3e0:	cmp	r3, #2013265920	; 0x78000000
   1b3e4:	cmpeq	r9, #0
   1b3e8:	movne	r4, fp
   1b3ec:	bne	1b428 <_start@@Base+0x8d34>
   1b3f0:	mov	r3, #1
   1b3f4:	mov	r2, r5
   1b3f8:	str	sl, [sp]
   1b3fc:	mov	r1, fp
   1b400:	mov	r0, r7
   1b404:	bl	203ac <flatcc_json_parser_match_constant@@Base>
   1b408:	cmp	fp, r0
   1b40c:	mov	r4, r0
   1b410:	beq	1b428 <_start@@Base+0x8d34>
   1b414:	ldr	r1, [sp, #12]
   1b418:	mov	r2, #0
   1b41c:	mov	r3, #0
   1b420:	strd	r2, [r1]
   1b424:	str	r9, [r6]
   1b428:	mov	r0, r4
   1b42c:	add	sp, sp, #20
   1b430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b434:	nop	{0}
   1b438:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b43c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1b440:	ldrshvc	pc, [pc, #255]	; 1b547 <verify_parse@@Base+0xaf>	; <UNPREDICTABLE>
   1b444:	cmnmi	pc, #28416	; 0x6f00
   1b448:	andeq	r0, r0, r0
   1b44c:	cmnmi	lr, r0, lsl #18
   1b450:	andeq	r0, r0, r0
   1b454:	strbtmi	r6, [pc], -r0, lsl #30
   1b458:	andvc	r0, r0, #0
   1b45c:	cmnmi	pc, #28416	; 0x6f00
   1b460:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b464:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1b468:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b46c:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1b470:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1b474:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1b478:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b47c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1b480:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1b484:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1b488:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1b48c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1b490:	andeq	r0, r0, r0
   1b494:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

0001b498 <verify_parse@@Base>:
   1b498:	push	{r0, r1, r2, lr}
   1b49c:	cmp	r0, #0
   1b4a0:	beq	1b4c4 <verify_parse@@Base+0x2c>
   1b4a4:	ldr	r3, [pc, #312]	; 1b5e4 <verify_parse@@Base+0x14c>
   1b4a8:	ldr	r2, [r0, #4]
   1b4ac:	str	r3, [sp, #4]
   1b4b0:	cmp	r2, r3
   1b4b4:	bne	1b4c4 <verify_parse@@Base+0x2c>
   1b4b8:	ldr	r2, [r0]
   1b4bc:	adds	r3, r0, r2
   1b4c0:	bne	1b4d8 <verify_parse@@Base+0x40>
   1b4c4:	ldr	r3, [pc, #284]	; 1b5e8 <verify_parse@@Base+0x150>
   1b4c8:	mov	r2, #696	; 0x2b8
   1b4cc:	ldr	r1, [pc, #280]	; 1b5ec <verify_parse@@Base+0x154>
   1b4d0:	ldr	r0, [pc, #280]	; 1b5f0 <verify_parse@@Base+0x158>
   1b4d4:	bl	12684 <__assert_fail@plt>
   1b4d8:	ldr	r2, [r0, r2]
   1b4dc:	sub	r2, r3, r2
   1b4e0:	ldrh	r1, [r2]
   1b4e4:	cmp	r1, #5
   1b4e8:	bls	1b500 <verify_parse@@Base+0x68>
   1b4ec:	ldrh	r2, [r2, #4]
   1b4f0:	cmp	r2, #0
   1b4f4:	beq	1b500 <verify_parse@@Base+0x68>
   1b4f8:	adds	r3, r3, r2
   1b4fc:	bne	1b514 <verify_parse@@Base+0x7c>
   1b500:	ldr	r3, [pc, #236]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b504:	mov	r2, #45	; 0x2d
   1b508:	ldr	r1, [pc, #232]	; 1b5f8 <verify_parse@@Base+0x160>
   1b50c:	ldr	r0, [pc, #232]	; 1b5fc <verify_parse@@Base+0x164>
   1b510:	b	1b4d4 <verify_parse@@Base+0x3c>
   1b514:	vldr	s15, [pc, #188]	; 1b5d8 <verify_parse@@Base+0x140>
   1b518:	vldr	s14, [r3]
   1b51c:	vcmp.f32	s14, s15
   1b520:	vmrs	APSR_nzcv, fpscr
   1b524:	ldrne	r3, [pc, #200]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b528:	movne	r2, #46	; 0x2e
   1b52c:	bne	1b508 <verify_parse@@Base+0x70>
   1b530:	vldr	s15, [pc, #164]	; 1b5dc <verify_parse@@Base+0x144>
   1b534:	vldr	s14, [r3, #4]
   1b538:	vcmp.f32	s14, s15
   1b53c:	vmrs	APSR_nzcv, fpscr
   1b540:	ldrne	r3, [pc, #172]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b544:	movne	r2, #47	; 0x2f
   1b548:	bne	1b508 <verify_parse@@Base+0x70>
   1b54c:	vldr	s15, [pc, #140]	; 1b5e0 <verify_parse@@Base+0x148>
   1b550:	vldr	s14, [r3, #8]
   1b554:	vcmp.f32	s14, s15
   1b558:	vmrs	APSR_nzcv, fpscr
   1b55c:	ldrne	r3, [pc, #144]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b560:	movne	r2, #48	; 0x30
   1b564:	bne	1b508 <verify_parse@@Base+0x70>
   1b568:	vldr	d7, [pc, #96]	; 1b5d0 <verify_parse@@Base+0x138>
   1b56c:	vldr	d6, [r3, #16]
   1b570:	vcmp.f64	d6, d7
   1b574:	vmrs	APSR_nzcv, fpscr
   1b578:	ldrne	r3, [pc, #116]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b57c:	movne	r2, #49	; 0x31
   1b580:	bne	1b508 <verify_parse@@Base+0x70>
   1b584:	ldrsb	r2, [r3, #24]
   1b588:	cmp	r2, #2
   1b58c:	ldrne	r3, [pc, #96]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b590:	movne	r2, #50	; 0x32
   1b594:	bne	1b508 <verify_parse@@Base+0x70>
   1b598:	ldrsh	r2, [r3, #26]
   1b59c:	cmp	r2, #5
   1b5a0:	ldrne	r3, [pc, #76]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b5a4:	movne	r2, #53	; 0x35
   1b5a8:	bne	1b508 <verify_parse@@Base+0x70>
   1b5ac:	ldrsb	r3, [r3, #28]
   1b5b0:	cmp	r3, #6
   1b5b4:	ldrne	r3, [pc, #56]	; 1b5f4 <verify_parse@@Base+0x15c>
   1b5b8:	movne	r2, #54	; 0x36
   1b5bc:	bne	1b508 <verify_parse@@Base+0x70>
   1b5c0:	mov	r0, #0
   1b5c4:	add	sp, sp, #12
   1b5c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5cc:	nop	{0}
   1b5d0:	andeq	r0, r0, r0
   1b5d4:	andmi	r0, r8, r0
   1b5d8:	svccc	0x00800000
   1b5dc:	andmi	r0, r0, r0
   1b5e0:	submi	r0, r0, r0
   1b5e4:	movtpl	r4, #61261	; 0xef4d
   1b5e8:	andeq	r1, r2, ip, lsr #31
   1b5ec:	ldrdeq	r1, [r2], -pc	; <UNPREDICTABLE>
   1b5f0:	andeq	r2, r2, lr, lsr r0
   1b5f4:	andeq	r1, r2, r7, asr #31
   1b5f8:	andeq	r2, r2, r4, rrx
   1b5fc:	andeq	r2, r2, sl, asr r9

0001b600 <test_parse@@Base>:
   1b600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b604:	sub	sp, sp, #332	; 0x14c
   1b608:	add	r5, sp, #96	; 0x60
   1b60c:	mov	r0, r5
   1b610:	ldr	r6, [pc, #896]	; 1b998 <test_parse@@Base+0x398>
   1b614:	bl	1c24c <flatcc_builder_init@@Base>
   1b618:	ldr	r1, [pc, #892]	; 1b99c <test_parse@@Base+0x39c>
   1b61c:	ldr	r0, [r6, #716]	; 0x2cc
   1b620:	bl	12570 <fopen@plt>
   1b624:	subs	r8, r0, #0
   1b628:	beq	1b68c <test_parse@@Base+0x8c>
   1b62c:	mov	r2, #2
   1b630:	mov	r1, #0
   1b634:	bl	12660 <fseek@plt>
   1b638:	mov	r0, r8
   1b63c:	bl	12594 <ftell@plt>
   1b640:	cmp	r0, #10240	; 0x2800
   1b644:	mov	r9, r0
   1b648:	bhi	1b670 <test_parse@@Base+0x70>
   1b64c:	mov	r0, r8
   1b650:	bl	125ac <rewind@plt>
   1b654:	cmp	r9, #0
   1b658:	movne	r0, r9
   1b65c:	moveq	r0, #1
   1b660:	bl	125d0 <malloc@plt>
   1b664:	subs	r4, r0, #0
   1b668:	movne	fp, #0
   1b66c:	bne	1b6b8 <test_parse@@Base+0xb8>
   1b670:	mov	r4, #0
   1b674:	mov	r0, r8
   1b678:	bl	12648 <fclose@plt>
   1b67c:	cmp	r4, #0
   1b680:	beq	1b68c <test_parse@@Base+0x8c>
   1b684:	mov	r0, r4
   1b688:	bl	1257c <free@plt>
   1b68c:	ldr	r3, [pc, #780]	; 1b9a0 <test_parse@@Base+0x3a0>
   1b690:	ldr	r1, [pc, #780]	; 1b9a4 <test_parse@@Base+0x3a4>
   1b694:	ldr	r2, [r6, #716]	; 0x2cc
   1b698:	ldr	r0, [r3]
   1b69c:	bl	1260c <fprintf@plt>
   1b6a0:	mvn	r3, #0
   1b6a4:	str	r3, [sp, #16]
   1b6a8:	ldr	r0, [sp, #16]
   1b6ac:	add	sp, sp, #332	; 0x14c
   1b6b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6b4:	add	fp, fp, r7
   1b6b8:	add	sl, r4, fp
   1b6bc:	mov	r3, r8
   1b6c0:	sub	r2, r9, fp
   1b6c4:	mov	r1, #1
   1b6c8:	mov	r0, sl
   1b6cc:	bl	125c4 <fread@plt>
   1b6d0:	subs	r7, r0, #0
   1b6d4:	bne	1b6b4 <test_parse@@Base+0xb4>
   1b6d8:	cmp	r9, fp
   1b6dc:	bne	1b674 <test_parse@@Base+0x74>
   1b6e0:	mov	r0, r8
   1b6e4:	ldr	fp, [pc, #692]	; 1b9a0 <test_parse@@Base+0x3a0>
   1b6e8:	bl	12648 <fclose@plt>
   1b6ec:	mov	r2, #32
   1b6f0:	mov	r1, r7
   1b6f4:	add	r0, sp, #64	; 0x40
   1b6f8:	bl	12624 <memset@plt>
   1b6fc:	mov	r3, #1
   1b700:	mov	r2, r7
   1b704:	ldr	r1, [pc, #668]	; 1b9a8 <test_parse@@Base+0x3a8>
   1b708:	mov	r0, r5
   1b70c:	str	r5, [sp, #52]	; 0x34
   1b710:	str	r4, [sp, #56]	; 0x38
   1b714:	str	r3, [sp, #68]	; 0x44
   1b718:	mov	r3, r7
   1b71c:	str	r7, [sp, #60]	; 0x3c
   1b720:	str	r4, [sp, #80]	; 0x50
   1b724:	str	sl, [sp, #84]	; 0x54
   1b728:	str	r4, [sp, #88]	; 0x58
   1b72c:	bl	1c92c <flatcc_builder_start_buffer@@Base>
   1b730:	cmp	r0, #0
   1b734:	beq	1b794 <test_parse@@Base+0x194>
   1b738:	ldr	r3, [sp, #56]	; 0x38
   1b73c:	ldr	r8, [r6, #716]	; 0x2cc
   1b740:	ldr	r7, [fp]
   1b744:	ldr	r6, [sp, #88]	; 0x58
   1b748:	ldr	r9, [sp, #68]	; 0x44
   1b74c:	ldr	r0, [sp, #76]	; 0x4c
   1b750:	sub	r6, r6, r3
   1b754:	add	r6, r6, #1
   1b758:	bl	1f988 <flatcc_json_parser_error_string@@Base>
   1b75c:	mov	r3, r9
   1b760:	mov	r2, r8
   1b764:	ldr	r1, [pc, #576]	; 1b9ac <test_parse@@Base+0x3ac>
   1b768:	str	r6, [sp]
   1b76c:	str	r0, [sp, #4]
   1b770:	mov	r0, r7
   1b774:	bl	1260c <fprintf@plt>
   1b778:	mvn	r3, #0
   1b77c:	str	r3, [sp, #16]
   1b780:	mov	r0, r4
   1b784:	bl	1257c <free@plt>
   1b788:	mov	r0, r5
   1b78c:	bl	1c3c8 <flatcc_builder_clear@@Base>
   1b790:	b	1b6a8 <test_parse@@Base+0xa8>
   1b794:	add	r3, sp, #32
   1b798:	mov	r2, sl
   1b79c:	mov	r1, r4
   1b7a0:	add	r0, sp, #52	; 0x34
   1b7a4:	bl	15cec <_start@@Base+0x35f8>
   1b7a8:	ldr	r3, [sp, #76]	; 0x4c
   1b7ac:	cmp	r3, #0
   1b7b0:	str	r3, [sp, #16]
   1b7b4:	bne	1b738 <test_parse@@Base+0x138>
   1b7b8:	mov	r0, r5
   1b7bc:	ldr	r1, [sp, #32]
   1b7c0:	bl	1c9c8 <flatcc_builder_end_buffer@@Base>
   1b7c4:	cmp	r0, #0
   1b7c8:	beq	1b738 <test_parse@@Base+0x138>
   1b7cc:	ldr	r1, [pc, #476]	; 1b9b0 <test_parse@@Base+0x3b0>
   1b7d0:	str	r4, [sp, #92]	; 0x5c
   1b7d4:	ldr	r0, [fp]
   1b7d8:	ldr	r3, [sp, #68]	; 0x44
   1b7dc:	ldr	r2, [r6, #716]	; 0x2cc
   1b7e0:	bl	1260c <fprintf@plt>
   1b7e4:	add	r1, sp, #28
   1b7e8:	mov	r0, r5
   1b7ec:	bl	1e710 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b7f0:	ldr	r3, [sp, #28]
   1b7f4:	str	r0, [sp, #12]
   1b7f8:	ldr	r2, [pc, #436]	; 1b9b4 <test_parse@@Base+0x3b4>
   1b7fc:	ldr	r1, [pc, #436]	; 1b9b8 <test_parse@@Base+0x3b8>
   1b800:	str	r3, [sp, #20]
   1b804:	ldr	r3, [pc, #432]	; 1b9bc <test_parse@@Base+0x3bc>
   1b808:	ldr	r8, [r3]
   1b80c:	mov	r0, r8
   1b810:	bl	1260c <fprintf@plt>
   1b814:	ldr	r3, [sp, #12]
   1b818:	sub	sl, r3, #1
   1b81c:	ldr	r3, [sp, #20]
   1b820:	and	r6, r7, #15
   1b824:	cmp	r3, r7
   1b828:	bne	1b8c0 <test_parse@@Base+0x2c0>
   1b82c:	ldr	sl, [pc, #396]	; 1b9c0 <test_parse@@Base+0x3c0>
   1b830:	ands	r6, r7, #15
   1b834:	bne	1b944 <test_parse@@Base+0x344>
   1b838:	add	r2, sp, #32
   1b83c:	ldr	r1, [pc, #384]	; 1b9c4 <test_parse@@Base+0x3c4>
   1b840:	mov	r0, r8
   1b844:	bl	1260c <fprintf@plt>
   1b848:	mov	r2, r9
   1b84c:	ldr	r1, [pc, #372]	; 1b9c8 <test_parse@@Base+0x3c8>
   1b850:	ldr	r0, [fp]
   1b854:	ldr	r3, [sp, #28]
   1b858:	bl	1260c <fprintf@plt>
   1b85c:	ldr	r0, [sp, #12]
   1b860:	bl	1b498 <verify_parse@@Base>
   1b864:	ldr	r3, [pc, #336]	; 1b9bc <test_parse@@Base+0x3bc>
   1b868:	ldr	r2, [pc, #348]	; 1b9cc <test_parse@@Base+0x3cc>
   1b86c:	ldr	r1, [pc, #348]	; 1b9d0 <test_parse@@Base+0x3d0>
   1b870:	ldr	r7, [r3]
   1b874:	ldr	r9, [pc, #324]	; 1b9c0 <test_parse@@Base+0x3c0>
   1b878:	ldr	sl, [pc, #340]	; 1b9d4 <test_parse@@Base+0x3d4>
   1b87c:	mov	r0, r7
   1b880:	ldr	fp, [pc, #336]	; 1b9d8 <test_parse@@Base+0x3d8>
   1b884:	ldr	r8, [sp, #28]
   1b888:	bl	1260c <fprintf@plt>
   1b88c:	cmp	r8, r6
   1b890:	bne	1b958 <test_parse@@Base+0x358>
   1b894:	mov	r1, r7
   1b898:	ldr	r0, [pc, #316]	; 1b9dc <test_parse@@Base+0x3dc>
   1b89c:	bl	1266c <fputs@plt>
   1b8a0:	mov	r0, r5
   1b8a4:	bl	1c3bc <flatcc_builder_reset@@Base>
   1b8a8:	ldr	r3, [sp, #12]
   1b8ac:	cmp	r3, #0
   1b8b0:	beq	1b780 <test_parse@@Base+0x180>
   1b8b4:	mov	r0, r3
   1b8b8:	bl	1e79c <flatcc_builder_aligned_free@@Base>
   1b8bc:	b	1b780 <test_parse@@Base+0x180>
   1b8c0:	cmp	r6, #0
   1b8c4:	bne	1b92c <test_parse@@Base+0x32c>
   1b8c8:	cmp	r7, #0
   1b8cc:	beq	1b8e0 <test_parse@@Base+0x2e0>
   1b8d0:	add	r2, sp, #32
   1b8d4:	ldr	r1, [pc, #232]	; 1b9c4 <test_parse@@Base+0x3c4>
   1b8d8:	mov	r0, r8
   1b8dc:	bl	1260c <fprintf@plt>
   1b8e0:	mov	r2, r7
   1b8e4:	ldr	r1, [pc, #244]	; 1b9e0 <test_parse@@Base+0x3e0>
   1b8e8:	mov	r0, r8
   1b8ec:	bl	1260c <fprintf@plt>
   1b8f0:	ldrb	r2, [sl, #1]!
   1b8f4:	mov	r0, r8
   1b8f8:	add	r7, r7, #1
   1b8fc:	ldr	r1, [pc, #224]	; 1b9e4 <test_parse@@Base+0x3e4>
   1b900:	bl	1260c <fprintf@plt>
   1b904:	ldrb	r3, [sl]
   1b908:	sub	r2, r3, #32
   1b90c:	cmp	r2, #94	; 0x5e
   1b910:	add	r2, sp, #328	; 0x148
   1b914:	movhi	r3, #46	; 0x2e
   1b918:	add	r6, r2, r6
   1b91c:	strb	r3, [r6, #-296]	; 0xfffffed8
   1b920:	mov	r3, #0
   1b924:	strb	r3, [r6, #-295]	; 0xfffffed9
   1b928:	b	1b81c <test_parse@@Base+0x21c>
   1b92c:	tst	r7, #7
   1b930:	bne	1b8f0 <test_parse@@Base+0x2f0>
   1b934:	mov	r1, r8
   1b938:	mov	r0, #32
   1b93c:	bl	12654 <fputc@plt>
   1b940:	b	1b8f0 <test_parse@@Base+0x2f0>
   1b944:	mov	r1, r8
   1b948:	mov	r0, sl
   1b94c:	bl	1266c <fputs@plt>
   1b950:	add	r7, r7, #1
   1b954:	b	1b830 <test_parse@@Base+0x230>
   1b958:	tst	r6, #15
   1b95c:	moveq	r1, r7
   1b960:	moveq	r0, sl
   1b964:	beq	1b978 <test_parse@@Base+0x378>
   1b968:	tst	r6, #7
   1b96c:	bne	1b97c <test_parse@@Base+0x37c>
   1b970:	mov	r1, r7
   1b974:	mov	r0, r9
   1b978:	bl	1266c <fputs@plt>
   1b97c:	ldr	r3, [sp, #12]
   1b980:	mov	r1, fp
   1b984:	mov	r0, r7
   1b988:	ldrb	r2, [r3, r6]
   1b98c:	add	r6, r6, #1
   1b990:	bl	1260c <fprintf@plt>
   1b994:	b	1b88c <test_parse@@Base+0x28c>
   1b998:	andeq	r4, r3, r8, ror r0
   1b99c:	strheq	r2, [r2], -r6
   1b9a0:			; <UNDEFINED> instruction: 0x000343b8
   1b9a4:	strheq	r2, [r2], -lr
   1b9a8:	strheq	r2, [r2], -r9
   1b9ac:	andeq	r2, r2, r8, lsr #2
   1b9b0:	andeq	r2, r2, r2, ror #1
   1b9b4:	andeq	r2, r2, r4, lsl #2
   1b9b8:	andeq	r2, r2, r3, lsr #2
   1b9bc:			; <UNDEFINED> instruction: 0x000343bc
   1b9c0:	andeq	r2, r2, fp, lsl #3
   1b9c4:	andeq	r2, r2, r6, lsr r1
   1b9c8:	andeq	r2, r2, sl, asr #2
   1b9cc:	andeq	r2, r2, ip, lsl r1
   1b9d0:	andeq	r2, r2, sp, ror #2
   1b9d4:	andeq	r2, r2, sl, lsl #3
   1b9d8:	andeq	r2, r2, pc, lsl #3
   1b9dc:	muleq	r2, r8, r1
   1b9e0:	andeq	r2, r2, ip, lsr r1
   1b9e4:	andeq	r2, r2, r4, asr #2
   1b9e8:	ldr	ip, [r0, #28]
   1b9ec:	ldrd	r2, [r0, #60]	; 0x3c
   1b9f0:	sub	r3, r3, ip
   1b9f4:	add	r2, r2, ip
   1b9f8:	cmp	r3, r1
   1b9fc:	strls	r3, [r0, #24]
   1ba00:	strhi	r1, [r0, #24]
   1ba04:	ldr	r3, [r0, #32]
   1ba08:	str	r2, [r0, #16]
   1ba0c:	str	r1, [r3, #4]
   1ba10:	bx	lr
   1ba14:	push	{r0, r1, r4, r5, r6, lr}
   1ba18:	mov	r6, r2
   1ba1c:	mov	r3, #1
   1ba20:	mov	r4, r0
   1ba24:	ldr	r2, [r0, #28]
   1ba28:	str	r3, [sp]
   1ba2c:	ldr	r5, [r0, #48]	; 0x30
   1ba30:	add	r2, r1, r2
   1ba34:	add	r1, r0, #60	; 0x3c
   1ba38:	ldr	r0, [r0, #40]	; 0x28
   1ba3c:	blx	r5
   1ba40:	subs	r5, r0, #0
   1ba44:	mvnne	r5, #0
   1ba48:	bne	1ba58 <test_parse@@Base+0x458>
   1ba4c:	mov	r1, r6
   1ba50:	mov	r0, r4
   1ba54:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1ba58:	mov	r0, r5
   1ba5c:	add	sp, sp, #8
   1ba60:	pop	{r4, r5, r6, pc}
   1ba64:	push	{r4, r5, r6, lr}
   1ba68:	mov	r4, r0
   1ba6c:	ldr	r5, [r0, #20]
   1ba70:	ldr	r3, [r0, #24]
   1ba74:	add	r1, r5, r1
   1ba78:	cmp	r1, r3
   1ba7c:	str	r1, [r0, #20]
   1ba80:	bcs	1ba90 <test_parse@@Base+0x490>
   1ba84:	ldr	r0, [r4, #16]
   1ba88:	add	r0, r0, r5
   1ba8c:	pop	{r4, r5, r6, pc}
   1ba90:	mvn	r2, #3
   1ba94:	add	r1, r1, #1
   1ba98:	bl	1ba14 <test_parse@@Base+0x414>
   1ba9c:	cmp	r0, #0
   1baa0:	beq	1ba84 <test_parse@@Base+0x484>
   1baa4:	mov	r0, #0
   1baa8:	pop	{r4, r5, r6, pc}
   1baac:	push	{r4, lr}
   1bab0:	mov	r1, #0
   1bab4:	mov	r4, r0
   1bab8:	ldr	r2, [r0, #20]
   1babc:	ldr	r0, [r0, #16]
   1bac0:	bl	12624 <memset@plt>
   1bac4:	ldr	r3, [r4, #32]
   1bac8:	mov	r0, r4
   1bacc:	ldmib	r3, {r1, r2}
   1bad0:	str	r2, [r4, #20]
   1bad4:	ldr	r2, [r3]
   1bad8:	str	r2, [r4, #28]
   1badc:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1bae0:	ldrh	r3, [r4, #130]	; 0x82
   1bae4:	ldrh	r2, [r4, #128]	; 0x80
   1bae8:	cmp	r2, r3
   1baec:	strhcc	r3, [r4, #128]	; 0x80
   1baf0:	ldr	r3, [r4, #32]
   1baf4:	ldrh	r2, [r3, #12]
   1baf8:	sub	r3, r3, #36	; 0x24
   1bafc:	str	r3, [r4, #32]
   1bb00:	ldr	r3, [r4, #156]	; 0x9c
   1bb04:	strh	r2, [r4, #130]	; 0x82
   1bb08:	sub	r3, r3, #1
   1bb0c:	str	r3, [r4, #156]	; 0x9c
   1bb10:	pop	{r4, pc}
   1bb14:	ldr	r3, [r0, #20]
   1bb18:	mov	r2, r1
   1bb1c:	mov	r1, #0
   1bb20:	sub	r3, r3, r2
   1bb24:	str	r3, [r0, #20]
   1bb28:	ldr	r0, [r0, #16]
   1bb2c:	add	r0, r0, r3
   1bb30:	b	12624 <memset@plt>
   1bb34:	push	{r4, r5, r6, lr}
   1bb38:	mov	r6, r1
   1bb3c:	mov	r1, r2
   1bb40:	mov	r4, r2
   1bb44:	bl	1ba64 <test_parse@@Base+0x464>
   1bb48:	subs	r5, r0, #0
   1bb4c:	beq	1bb5c <test_parse@@Base+0x55c>
   1bb50:	mov	r2, r4
   1bb54:	mov	r1, r6
   1bb58:	bl	12588 <memcpy@plt>
   1bb5c:	mov	r0, r5
   1bb60:	pop	{r4, r5, r6, pc}
   1bb64:	push	{r0, r1, r4, lr}
   1bb68:	cmp	r0, #4
   1bb6c:	mov	r4, #0
   1bb70:	mov	r2, r1
   1bb74:	movcs	r1, r0
   1bb78:	movcc	r1, #4
   1bb7c:	add	r0, sp, #4
   1bb80:	str	r4, [sp, #4]
   1bb84:	bl	12618 <posix_memalign@plt>
   1bb88:	cmp	r0, r4
   1bb8c:	beq	1bba4 <test_parse@@Base+0x5a4>
   1bb90:	ldr	r0, [sp, #4]
   1bb94:	cmp	r0, r4
   1bb98:	beq	1bba4 <test_parse@@Base+0x5a4>
   1bb9c:	bl	1257c <free@plt>
   1bba0:	str	r4, [sp, #4]
   1bba4:	ldr	r0, [sp, #4]
   1bba8:	add	sp, sp, #8
   1bbac:	pop	{r4, pc}

0001bbb0 <flatcc_builder_default_alloc@@Base>:
   1bbb0:	push	{r4, r5, r6, r7, r8, lr}
   1bbb4:	subs	r6, r2, #0
   1bbb8:	mov	r5, r1
   1bbbc:	bne	1bbe0 <flatcc_builder_default_alloc@@Base+0x30>
   1bbc0:	ldr	r0, [r1]
   1bbc4:	cmp	r0, #0
   1bbc8:	popeq	{r4, r5, r6, r7, r8, pc}
   1bbcc:	bl	1257c <free@plt>
   1bbd0:	str	r6, [r5]
   1bbd4:	str	r6, [r5, #4]
   1bbd8:	mov	r0, #0
   1bbdc:	pop	{r4, r5, r6, r7, r8, pc}
   1bbe0:	ldr	r2, [sp, #24]
   1bbe4:	mov	r7, r3
   1bbe8:	sub	r2, r2, #1
   1bbec:	cmp	r2, #6
   1bbf0:	ldrls	pc, [pc, r2, lsl #2]
   1bbf4:	b	1bc88 <flatcc_builder_default_alloc@@Base+0xd8>
   1bbf8:	muleq	r1, r0, ip
   1bbfc:	andeq	fp, r1, r8, lsl #25
   1bc00:	andeq	fp, r1, r8, lsl #25
   1bc04:	andeq	fp, r1, r8, ror ip
   1bc08:	andeq	fp, r1, r4, lsl ip
   1bc0c:	andeq	fp, r1, r8, lsl #25
   1bc10:	andeq	fp, r1, r0, lsl #25
   1bc14:	mov	r4, r6
   1bc18:	cmp	r6, r4
   1bc1c:	bhi	1bc98 <flatcc_builder_default_alloc@@Base+0xe8>
   1bc20:	ldr	r2, [r5, #4]
   1bc24:	cmp	r6, r2
   1bc28:	bhi	1bc34 <flatcc_builder_default_alloc@@Base+0x84>
   1bc2c:	cmp	r4, r2, lsr #1
   1bc30:	bls	1bbd8 <flatcc_builder_default_alloc@@Base+0x28>
   1bc34:	mov	r1, r4
   1bc38:	ldr	r0, [r5]
   1bc3c:	bl	125b8 <realloc@plt>
   1bc40:	subs	r6, r0, #0
   1bc44:	beq	1bca0 <flatcc_builder_default_alloc@@Base+0xf0>
   1bc48:	cmp	r7, #0
   1bc4c:	beq	1bc6c <flatcc_builder_default_alloc@@Base+0xbc>
   1bc50:	ldr	r0, [r5, #4]
   1bc54:	cmp	r4, r0
   1bc58:	bls	1bc6c <flatcc_builder_default_alloc@@Base+0xbc>
   1bc5c:	sub	r2, r4, r0
   1bc60:	mov	r1, #0
   1bc64:	add	r0, r6, r0
   1bc68:	bl	12624 <memset@plt>
   1bc6c:	str	r6, [r5]
   1bc70:	str	r4, [r5, #4]
   1bc74:	b	1bbd8 <flatcc_builder_default_alloc@@Base+0x28>
   1bc78:	mov	r4, #288	; 0x120
   1bc7c:	b	1bc18 <flatcc_builder_default_alloc@@Base+0x68>
   1bc80:	mov	r4, #64	; 0x40
   1bc84:	b	1bc18 <flatcc_builder_default_alloc@@Base+0x68>
   1bc88:	mov	r4, #32
   1bc8c:	b	1bc18 <flatcc_builder_default_alloc@@Base+0x68>
   1bc90:	mov	r4, #256	; 0x100
   1bc94:	b	1bc18 <flatcc_builder_default_alloc@@Base+0x68>
   1bc98:	lsl	r4, r4, #1
   1bc9c:	b	1bc18 <flatcc_builder_default_alloc@@Base+0x68>
   1bca0:	mvn	r0, #0
   1bca4:	pop	{r4, r5, r6, r7, r8, pc}
   1bca8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bcac:	add	r6, r0, #52	; 0x34
   1bcb0:	mov	r4, r1
   1bcb4:	add	r1, r6, r1, lsl #3
   1bcb8:	mov	r5, r2
   1bcbc:	add	r2, r2, r3
   1bcc0:	ldr	r3, [r1, #4]
   1bcc4:	cmp	r2, r3
   1bcc8:	bls	1bcfc <flatcc_builder_default_alloc@@Base+0x14c>
   1bccc:	str	r4, [sp]
   1bcd0:	ldr	r3, [sp, #32]
   1bcd4:	ldr	r7, [r0, #48]	; 0x30
   1bcd8:	ldr	r0, [r0, #40]	; 0x28
   1bcdc:	blx	r7
   1bce0:	cmp	r0, #0
   1bce4:	beq	1bcfc <flatcc_builder_default_alloc@@Base+0x14c>
   1bce8:	ldr	r3, [pc, #28]	; 1bd0c <flatcc_builder_default_alloc@@Base+0x15c>
   1bcec:	mov	r2, #308	; 0x134
   1bcf0:	ldr	r1, [pc, #24]	; 1bd10 <flatcc_builder_default_alloc@@Base+0x160>
   1bcf4:	ldr	r0, [pc, #24]	; 1bd14 <flatcc_builder_default_alloc@@Base+0x164>
   1bcf8:	bl	12684 <__assert_fail@plt>
   1bcfc:	ldr	r0, [r6, r4, lsl #3]
   1bd00:	add	r0, r0, r5
   1bd04:	add	sp, sp, #12
   1bd08:	pop	{r4, r5, r6, r7, pc}
   1bd0c:	andeq	r2, r2, lr, ror #3
   1bd10:	andeq	r2, r2, sp, ror #17
   1bd14:	andeq	r2, r2, sl, asr r9
   1bd18:	ldrd	r2, [r0, #156]	; 0x9c
   1bd1c:	push	{r0, r1, r4, r5, r6, lr}
   1bd20:	mov	r5, r1
   1bd24:	mov	r4, r0
   1bd28:	add	r1, r2, #1
   1bd2c:	cmp	r1, r3
   1bd30:	str	r1, [r0, #156]	; 0x9c
   1bd34:	ble	1bde0 <flatcc_builder_default_alloc@@Base+0x230>
   1bd38:	ldr	r3, [r0, #176]	; 0xb0
   1bd3c:	cmp	r1, r3
   1bd40:	cmpgt	r3, #0
   1bd44:	movgt	r3, #1
   1bd48:	movle	r3, #0
   1bd4c:	ble	1bd5c <flatcc_builder_default_alloc@@Base+0x1ac>
   1bd50:	mvn	r0, #0
   1bd54:	add	sp, sp, #8
   1bd58:	pop	{r4, r5, r6, pc}
   1bd5c:	mov	r6, #36	; 0x24
   1bd60:	mov	r1, #4
   1bd64:	str	r3, [sp]
   1bd68:	mov	r3, r6
   1bd6c:	mul	r2, r6, r2
   1bd70:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1bd74:	cmp	r0, #0
   1bd78:	str	r0, [r4, #32]
   1bd7c:	beq	1bd50 <flatcc_builder_default_alloc@@Base+0x1a0>
   1bd80:	ldr	r3, [r4, #88]	; 0x58
   1bd84:	ldr	r2, [r4, #176]	; 0xb0
   1bd88:	udiv	r3, r3, r6
   1bd8c:	cmp	r2, #0
   1bd90:	cmpgt	r3, r2
   1bd94:	movgt	r3, r2
   1bd98:	str	r3, [r4, #160]	; 0xa0
   1bd9c:	ldrh	r1, [r4, #130]	; 0x82
   1bda0:	mvn	r0, #3
   1bda4:	ldr	r3, [r4, #20]
   1bda8:	ldr	r2, [r4, #32]
   1bdac:	str	r3, [r2, #8]
   1bdb0:	strh	r1, [r2, #12]
   1bdb4:	ldr	r1, [r4, #28]
   1bdb8:	strh	r5, [r4, #130]	; 0x82
   1bdbc:	add	r3, r3, r1
   1bdc0:	str	r0, [r2, #4]
   1bdc4:	mov	r0, #0
   1bdc8:	add	r3, r3, #7
   1bdcc:	str	r1, [r2]
   1bdd0:	bic	r3, r3, #7
   1bdd4:	str	r0, [r4, #20]
   1bdd8:	str	r3, [r4, #28]
   1bddc:	b	1bd54 <flatcc_builder_default_alloc@@Base+0x1a4>
   1bde0:	ldr	r3, [r0, #32]
   1bde4:	add	r3, r3, #36	; 0x24
   1bde8:	str	r3, [r0, #32]
   1bdec:	b	1bd9c <flatcc_builder_default_alloc@@Base+0x1ec>
   1bdf0:	ldr	r3, [r0, #32]
   1bdf4:	push	{r0, r1, r2, r4, r5, lr}
   1bdf8:	add	r1, r1, #2
   1bdfc:	mov	r4, r0
   1be00:	lsl	r5, r1, #1
   1be04:	ldrh	r1, [r3, #28]
   1be08:	ldr	r2, [r3, #16]
   1be0c:	mov	r3, #1
   1be10:	str	r3, [sp]
   1be14:	mov	r3, r5
   1be18:	add	r2, r2, r1, lsl #1
   1be1c:	mov	r1, #0
   1be20:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1be24:	cmp	r0, #0
   1be28:	streq	r0, [r4, #4]
   1be2c:	mvneq	r0, #0
   1be30:	beq	1be6c <flatcc_builder_default_alloc@@Base+0x2bc>
   1be34:	ldr	r2, [r4, #32]
   1be38:	add	r0, r0, #4
   1be3c:	mov	r3, #0
   1be40:	mov	r1, #3
   1be44:	str	r0, [r4, #4]
   1be48:	mov	r0, r4
   1be4c:	str	r3, [sp]
   1be50:	sub	r3, r5, #3
   1be54:	ldr	r2, [r2, #20]
   1be58:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1be5c:	str	r0, [r4]
   1be60:	clz	r0, r0
   1be64:	lsr	r0, r0, #5
   1be68:	rsb	r0, r0, #0
   1be6c:	add	sp, sp, #12
   1be70:	pop	{r4, r5, pc}
   1be74:	push	{r0, r1, r2, r4, r5, lr}
   1be78:	ldr	r3, [r1]
   1be7c:	ldr	r4, [r0, #140]	; 0x8c
   1be80:	add	r2, r3, r4
   1be84:	cmp	r2, r4
   1be88:	ldrlt	r3, [pc, #76]	; 1bedc <flatcc_builder_default_alloc@@Base+0x32c>
   1be8c:	str	r2, [r0, #140]	; 0x8c
   1be90:	movwlt	r2, #673	; 0x2a1
   1be94:	blt	1bec4 <flatcc_builder_default_alloc@@Base+0x314>
   1be98:	add	r1, r1, #8
   1be9c:	str	r3, [sp]
   1bea0:	mov	r3, r4
   1bea4:	ldr	r2, [r1, #-4]
   1bea8:	ldr	r5, [r0, #44]	; 0x2c
   1beac:	ldr	r0, [r0, #36]	; 0x24
   1beb0:	blx	r5
   1beb4:	cmp	r0, #0
   1beb8:	beq	1bed0 <flatcc_builder_default_alloc@@Base+0x320>
   1bebc:	ldr	r3, [pc, #24]	; 1bedc <flatcc_builder_default_alloc@@Base+0x32c>
   1bec0:	movw	r2, #677	; 0x2a5
   1bec4:	ldr	r1, [pc, #20]	; 1bee0 <flatcc_builder_default_alloc@@Base+0x330>
   1bec8:	ldr	r0, [pc, #20]	; 1bee4 <flatcc_builder_default_alloc@@Base+0x334>
   1becc:	bl	12684 <__assert_fail@plt>
   1bed0:	add	r0, r4, #1
   1bed4:	add	sp, sp, #12
   1bed8:	pop	{r4, r5, pc}
   1bedc:	strdeq	r2, [r2], -sp
   1bee0:	andeq	r2, r2, sp, ror #17
   1bee4:	andeq	r2, r2, sl, asr r9
   1bee8:	cmp	r2, #0
   1beec:	bne	1befc <flatcc_builder_default_alloc@@Base+0x34c>
   1bef0:	ldrh	r2, [r0, #132]	; 0x84
   1bef4:	cmp	r2, #0
   1bef8:	moveq	r2, #1
   1befc:	ldrh	ip, [r1]
   1bf00:	cmp	ip, #3
   1bf04:	movls	ip, #4
   1bf08:	strhls	ip, [r1]
   1bf0c:	ldrh	ip, [r1]
   1bf10:	cmp	ip, r2
   1bf14:	strhcc	r2, [r1]
   1bf18:	cmp	r3, #0
   1bf1c:	bne	1bf7c <flatcc_builder_default_alloc@@Base+0x3cc>
   1bf20:	ldr	r3, [r0, #140]	; 0x8c
   1bf24:	sub	r2, r2, #1
   1bf28:	ands	r2, r2, r3
   1bf2c:	beq	1bf7c <flatcc_builder_default_alloc@@Base+0x3cc>
   1bf30:	push	{r4, lr}
   1bf34:	mov	r3, #1
   1bf38:	sub	sp, sp, #72	; 0x48
   1bf3c:	mov	r1, sp
   1bf40:	ldr	r4, [pc, #60]	; 1bf84 <flatcc_builder_default_alloc@@Base+0x3d4>
   1bf44:	strd	r2, [sp]
   1bf48:	str	r4, [sp, #8]
   1bf4c:	str	r2, [sp, #12]
   1bf50:	bl	1be74 <flatcc_builder_default_alloc@@Base+0x2c4>
   1bf54:	cmp	r0, #0
   1bf58:	bne	1bf70 <flatcc_builder_default_alloc@@Base+0x3c0>
   1bf5c:	add	r3, r4, #512	; 0x200
   1bf60:	movw	r2, #702	; 0x2be
   1bf64:	ldr	r1, [pc, #28]	; 1bf88 <flatcc_builder_default_alloc@@Base+0x3d8>
   1bf68:	ldr	r0, [pc, #28]	; 1bf8c <flatcc_builder_default_alloc@@Base+0x3dc>
   1bf6c:	bl	12684 <__assert_fail@plt>
   1bf70:	mov	r0, #0
   1bf74:	add	sp, sp, #72	; 0x48
   1bf78:	pop	{r4, pc}
   1bf7c:	mov	r0, #0
   1bf80:	bx	lr
   1bf84:	andeq	r2, r2, r7, lsl #4
   1bf88:	andeq	r2, r2, sp, ror #17
   1bf8c:	andeq	r2, r2, sl, asr r9
   1bf90:	ldr	r3, [r1]
   1bf94:	push	{r0, r1, r4, r5, r6, lr}
   1bf98:	ldr	r2, [r0, #136]	; 0x88
   1bf9c:	sub	r4, r2, r3
   1bfa0:	cmp	r2, r4
   1bfa4:	ldrle	r3, [pc, #80]	; 1bffc <flatcc_builder_default_alloc@@Base+0x44c>
   1bfa8:	movwle	r2, #647	; 0x287
   1bfac:	ble	1bfe0 <flatcc_builder_default_alloc@@Base+0x430>
   1bfb0:	mov	r5, r0
   1bfb4:	add	r1, r1, #8
   1bfb8:	str	r3, [sp]
   1bfbc:	mov	r3, r4
   1bfc0:	ldr	r2, [r1, #-4]
   1bfc4:	ldr	r0, [r0, #36]	; 0x24
   1bfc8:	ldr	r6, [r5, #44]	; 0x2c
   1bfcc:	blx	r6
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1bfec <flatcc_builder_default_alloc@@Base+0x43c>
   1bfd8:	ldr	r3, [pc, #28]	; 1bffc <flatcc_builder_default_alloc@@Base+0x44c>
   1bfdc:	movw	r2, #651	; 0x28b
   1bfe0:	ldr	r1, [pc, #24]	; 1c000 <flatcc_builder_default_alloc@@Base+0x450>
   1bfe4:	ldr	r0, [pc, #24]	; 1c004 <flatcc_builder_default_alloc@@Base+0x454>
   1bfe8:	bl	12684 <__assert_fail@plt>
   1bfec:	mov	r0, r4
   1bff0:	str	r4, [r5, #136]	; 0x88
   1bff4:	add	sp, sp, #8
   1bff8:	pop	{r4, r5, r6, pc}
   1bffc:	andeq	r2, r2, r6, lsl r4
   1c000:	andeq	r2, r2, sp, ror #17
   1c004:	andeq	r2, r2, sl, asr r9
   1c008:	ldr	r3, [r0, #20]
   1c00c:	adds	r1, r3, r1
   1c010:	movcs	r3, #1
   1c014:	movcc	r3, #0
   1c018:	cmp	r1, r2
   1c01c:	movls	r2, r3
   1c020:	orrhi	r2, r3, #1
   1c024:	cmp	r2, #0
   1c028:	beq	1c044 <flatcc_builder_default_alloc@@Base+0x494>
   1c02c:	push	{r4, lr}
   1c030:	mov	r2, #892	; 0x37c
   1c034:	ldr	r3, [pc, #20]	; 1c050 <flatcc_builder_default_alloc@@Base+0x4a0>
   1c038:	ldr	r1, [pc, #20]	; 1c054 <flatcc_builder_default_alloc@@Base+0x4a4>
   1c03c:	ldr	r0, [pc, #20]	; 1c058 <flatcc_builder_default_alloc@@Base+0x4a8>
   1c040:	bl	12684 <__assert_fail@plt>
   1c044:	str	r1, [r0, #20]
   1c048:	mov	r0, r2
   1c04c:	bx	lr
   1c050:	andeq	r2, r2, r1, lsr #8
   1c054:	andeq	r2, r2, sp, ror #17
   1c058:	andeq	r2, r2, r3, lsr r9
   1c05c:	ldrh	ip, [r0, #128]	; 0x80
   1c060:	push	{r4, r5, r6, lr}
   1c064:	sub	sp, sp, #80	; 0x50
   1c068:	ldr	r5, [r0, #136]	; 0x88
   1c06c:	cmp	ip, #3
   1c070:	movls	ip, #4
   1c074:	strhls	ip, [r0, #128]	; 0x80
   1c078:	mov	ip, #4
   1c07c:	add	lr, sp, ip
   1c080:	and	r4, r5, #3
   1c084:	stmib	sp, {r2, ip}
   1c088:	str	lr, [sp, #16]
   1c08c:	str	ip, [sp, #20]
   1c090:	mov	ip, #1
   1c094:	str	ip, [sp, #12]
   1c098:	lsls	ip, r2, #2
   1c09c:	beq	1c0b8 <flatcc_builder_default_alloc@@Base+0x508>
   1c0a0:	add	lr, ip, #4
   1c0a4:	str	ip, [sp, #28]
   1c0a8:	mov	ip, #2
   1c0ac:	str	lr, [sp, #8]
   1c0b0:	str	ip, [sp, #12]
   1c0b4:	str	r1, [sp, #24]
   1c0b8:	cmp	r4, #0
   1c0bc:	beq	1c0ec <flatcc_builder_default_alloc@@Base+0x53c>
   1c0c0:	ldr	ip, [sp, #8]
   1c0c4:	add	lr, sp, #80	; 0x50
   1c0c8:	ldr	r6, [pc, #204]	; 1c19c <flatcc_builder_default_alloc@@Base+0x5ec>
   1c0cc:	add	ip, ip, r4
   1c0d0:	str	ip, [sp, #8]
   1c0d4:	ldr	ip, [sp, #12]
   1c0d8:	add	ip, ip, #1
   1c0dc:	add	lr, lr, ip, lsl #3
   1c0e0:	str	ip, [sp, #12]
   1c0e4:	str	r6, [lr, #-72]	; 0xffffffb8
   1c0e8:	str	r4, [lr, #-68]	; 0xffffffbc
   1c0ec:	ldr	lr, [sp, #8]
   1c0f0:	mov	ip, #0
   1c0f4:	mvn	r6, #3
   1c0f8:	sub	lr, lr, #4
   1c0fc:	sub	lr, lr, r5
   1c100:	cmp	r2, ip
   1c104:	bne	1c118 <flatcc_builder_default_alloc@@Base+0x568>
   1c108:	add	r1, sp, #8
   1c10c:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1c110:	add	sp, sp, #80	; 0x50
   1c114:	pop	{r4, r5, r6, pc}
   1c118:	ldr	r5, [r1, ip, lsl #2]
   1c11c:	cmp	r5, #0
   1c120:	beq	1c158 <flatcc_builder_default_alloc@@Base+0x5a8>
   1c124:	mla	r4, r6, ip, lr
   1c128:	cmp	r3, #0
   1c12c:	add	r4, r4, r5
   1c130:	str	r4, [r1, ip, lsl #2]
   1c134:	beq	1c194 <flatcc_builder_default_alloc@@Base+0x5e4>
   1c138:	ldrb	r4, [r3, ip]
   1c13c:	cmp	r4, #0
   1c140:	bne	1c194 <flatcc_builder_default_alloc@@Base+0x5e4>
   1c144:	ldr	r3, [pc, #84]	; 1c1a0 <flatcc_builder_default_alloc@@Base+0x5f0>
   1c148:	movw	r2, #1457	; 0x5b1
   1c14c:	ldr	r1, [pc, #80]	; 1c1a4 <flatcc_builder_default_alloc@@Base+0x5f4>
   1c150:	ldr	r0, [pc, #80]	; 1c1a8 <flatcc_builder_default_alloc@@Base+0x5f8>
   1c154:	bl	12684 <__assert_fail@plt>
   1c158:	cmp	r3, #0
   1c15c:	beq	1c180 <flatcc_builder_default_alloc@@Base+0x5d0>
   1c160:	ldrb	r4, [r3, ip]
   1c164:	cmp	r4, #0
   1c168:	beq	1c194 <flatcc_builder_default_alloc@@Base+0x5e4>
   1c16c:	ldr	r3, [pc, #44]	; 1c1a0 <flatcc_builder_default_alloc@@Base+0x5f0>
   1c170:	movw	r2, #1461	; 0x5b5
   1c174:	ldr	r1, [pc, #40]	; 1c1a4 <flatcc_builder_default_alloc@@Base+0x5f4>
   1c178:	ldr	r0, [pc, #44]	; 1c1ac <flatcc_builder_default_alloc@@Base+0x5fc>
   1c17c:	b	1c154 <flatcc_builder_default_alloc@@Base+0x5a4>
   1c180:	ldr	r3, [pc, #24]	; 1c1a0 <flatcc_builder_default_alloc@@Base+0x5f0>
   1c184:	movw	r2, #1463	; 0x5b7
   1c188:	ldr	r1, [pc, #20]	; 1c1a4 <flatcc_builder_default_alloc@@Base+0x5f4>
   1c18c:	ldr	r0, [pc, #28]	; 1c1b0 <flatcc_builder_default_alloc@@Base+0x600>
   1c190:	b	1c154 <flatcc_builder_default_alloc@@Base+0x5a4>
   1c194:	add	ip, ip, #1
   1c198:	b	1c100 <flatcc_builder_default_alloc@@Base+0x550>
   1c19c:	andeq	r2, r2, r7, lsl #4
   1c1a0:	andeq	r2, r2, r2, lsr r4
   1c1a4:	andeq	r2, r2, sp, ror #17
   1c1a8:	andeq	r2, r2, lr, asr #18
   1c1ac:	andeq	r2, r2, ip, asr r9
   1c1b0:	andeq	r2, r2, sl, asr r9

0001c1b4 <flatcc_builder_flush_vtable_cache@@Base>:
   1c1b4:	ldr	r3, [r0, #116]	; 0x74
   1c1b8:	cmp	r3, #0
   1c1bc:	bxeq	lr
   1c1c0:	push	{r4, lr}
   1c1c4:	mov	r4, r0
   1c1c8:	mov	r1, #0
   1c1cc:	ldr	r0, [r0, #92]	; 0x5c
   1c1d0:	ldr	r2, [r4, #96]	; 0x60
   1c1d4:	bl	12624 <memset@plt>
   1c1d8:	mov	r0, #0
   1c1dc:	mov	r1, #16
   1c1e0:	strd	r0, [r4, #120]	; 0x78
   1c1e4:	pop	{r4, pc}

0001c1e8 <flatcc_builder_custom_init@@Base>:
   1c1e8:	push	{r4, r5, r6, r7, r8, lr}
   1c1ec:	mov	r6, r1
   1c1f0:	mov	r7, r2
   1c1f4:	mov	r1, #0
   1c1f8:	mov	r2, #232	; 0xe8
   1c1fc:	mov	r4, r0
   1c200:	mov	r5, r3
   1c204:	bl	12624 <memset@plt>
   1c208:	cmp	r6, #0
   1c20c:	mov	r0, #0
   1c210:	moveq	r3, #1
   1c214:	addeq	r7, r4, #188	; 0xbc
   1c218:	ldreq	r6, [pc, #36]	; 1c244 <flatcc_builder_custom_init@@Base+0x5c>
   1c21c:	streq	r3, [r4, #184]	; 0xb8
   1c220:	cmp	r5, #0
   1c224:	ldr	r3, [pc, #28]	; 1c248 <flatcc_builder_custom_init@@Base+0x60>
   1c228:	str	r7, [r4, #36]	; 0x24
   1c22c:	str	r6, [r4, #44]	; 0x2c
   1c230:	moveq	r5, r3
   1c234:	ldr	r3, [sp, #24]
   1c238:	str	r3, [r4, #40]	; 0x28
   1c23c:	str	r5, [r4, #48]	; 0x30
   1c240:	pop	{r4, r5, r6, r7, r8, pc}
   1c244:	strdeq	lr, [r1], -r8
   1c248:			; <UNDEFINED> instruction: 0x0001bbb0

0001c24c <flatcc_builder_init@@Base>:
   1c24c:	push	{r4, lr}
   1c250:	mov	r2, #232	; 0xe8
   1c254:	mov	r1, #0
   1c258:	bl	12624 <memset@plt>
   1c25c:	mov	r3, r0
   1c260:	mov	r2, #1
   1c264:	mov	r0, #0
   1c268:	str	r2, [r3, #184]	; 0xb8
   1c26c:	ldr	r2, [pc, #20]	; 1c288 <flatcc_builder_init@@Base+0x3c>
   1c270:	str	r2, [r3, #48]	; 0x30
   1c274:	add	r2, r3, #188	; 0xbc
   1c278:	str	r2, [r3, #36]	; 0x24
   1c27c:	ldr	r2, [pc, #8]	; 1c28c <flatcc_builder_init@@Base+0x40>
   1c280:	str	r2, [r3, #44]	; 0x2c
   1c284:	pop	{r4, pc}
   1c288:			; <UNDEFINED> instruction: 0x0001bbb0
   1c28c:	strdeq	lr, [r1], -r8

0001c290 <flatcc_builder_custom_reset@@Base>:
   1c290:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c294:	mov	r4, r0
   1c298:	mov	r7, r1
   1c29c:	mov	r8, r2
   1c2a0:	mov	r5, r0
   1c2a4:	mov	r6, #0
   1c2a8:	ldr	r3, [r5, #52]	; 0x34
   1c2ac:	add	r1, r5, #52	; 0x34
   1c2b0:	cmp	r3, #0
   1c2b4:	beq	1c390 <flatcc_builder_custom_reset@@Base+0x100>
   1c2b8:	cmp	r6, #5
   1c2bc:	cmpne	r8, #0
   1c2c0:	bne	1c368 <flatcc_builder_custom_reset@@Base+0xd8>
   1c2c4:	mov	r1, #0
   1c2c8:	ldr	r0, [r5, #52]	; 0x34
   1c2cc:	ldr	r2, [r5, #56]	; 0x38
   1c2d0:	bl	12624 <memset@plt>
   1c2d4:	add	r6, r6, #1
   1c2d8:	add	r5, r5, #8
   1c2dc:	cmp	r6, #8
   1c2e0:	bne	1c2a8 <flatcc_builder_custom_reset@@Base+0x18>
   1c2e4:	ldr	r2, [r4, #124]	; 0x7c
   1c2e8:	mov	r3, #0
   1c2ec:	ldr	r0, [r4, #184]	; 0xb8
   1c2f0:	str	r3, [r4, #24]
   1c2f4:	str	r3, [r4, #32]
   1c2f8:	cmp	r2, r3
   1c2fc:	str	r3, [r4, #120]	; 0x78
   1c300:	movne	r2, #16
   1c304:	strh	r3, [r4, #128]	; 0x80
   1c308:	str	r3, [r4, #136]	; 0x88
   1c30c:	strne	r2, [r4, #124]	; 0x7c
   1c310:	cmp	r7, #0
   1c314:	ldr	r2, [r4, #60]	; 0x3c
   1c318:	strne	r3, [r4, #172]	; 0xac
   1c31c:	strne	r3, [r4, #176]	; 0xb0
   1c320:	strne	r3, [r4, #180]	; 0xb4
   1c324:	cmp	r0, #0
   1c328:	strd	r2, [r4, #16]
   1c32c:	ldr	r2, [r4, #76]	; 0x4c
   1c330:	str	r2, [r4]
   1c334:	ldr	r2, [r4, #52]	; 0x34
   1c338:	str	r3, [r4, #140]	; 0x8c
   1c33c:	str	r3, [r4, #148]	; 0x94
   1c340:	str	r3, [r4, #152]	; 0x98
   1c344:	str	r3, [r4, #156]	; 0x9c
   1c348:	str	r2, [r4, #4]
   1c34c:	str	r3, [r4, #160]	; 0xa0
   1c350:	beq	1c360 <flatcc_builder_custom_reset@@Base+0xd0>
   1c354:	add	r0, r4, #188	; 0xbc
   1c358:	bl	1e7f8 <flatcc_emitter_reset@@Base>
   1c35c:	mov	r0, #0
   1c360:	add	sp, sp, #12
   1c364:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c368:	mov	r3, #1
   1c36c:	ldr	r0, [r4, #40]	; 0x28
   1c370:	mov	r2, r3
   1c374:	ldr	r9, [r4, #48]	; 0x30
   1c378:	str	r6, [sp]
   1c37c:	blx	r9
   1c380:	cmp	r0, #0
   1c384:	beq	1c2c4 <flatcc_builder_custom_reset@@Base+0x34>
   1c388:	mvn	r0, #0
   1c38c:	b	1c360 <flatcc_builder_custom_reset@@Base+0xd0>
   1c390:	ldr	r3, [r5, #56]	; 0x38
   1c394:	cmp	r3, #0
   1c398:	beq	1c2d4 <flatcc_builder_custom_reset@@Base+0x44>
   1c39c:	ldr	r3, [pc, #12]	; 1c3b0 <flatcc_builder_custom_reset@@Base+0x120>
   1c3a0:	movw	r2, #434	; 0x1b2
   1c3a4:	ldr	r1, [pc, #8]	; 1c3b4 <flatcc_builder_custom_reset@@Base+0x124>
   1c3a8:	ldr	r0, [pc, #8]	; 1c3b8 <flatcc_builder_custom_reset@@Base+0x128>
   1c3ac:	bl	12684 <__assert_fail@plt>
   1c3b0:	andeq	r2, r2, pc, asr #8
   1c3b4:	andeq	r2, r2, sp, ror #17
   1c3b8:	andeq	r2, r2, sl, ror #18

0001c3bc <flatcc_builder_reset@@Base>:
   1c3bc:	mov	r2, #0
   1c3c0:	mov	r1, r2
   1c3c4:	b	1c290 <flatcc_builder_custom_reset@@Base>

0001c3c8 <flatcc_builder_clear@@Base>:
   1c3c8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c3cc:	mov	r4, r0
   1c3d0:	add	r6, r0, #52	; 0x34
   1c3d4:	mov	r5, #0
   1c3d8:	mov	r3, #0
   1c3dc:	mov	r1, r6
   1c3e0:	mov	r2, r3
   1c3e4:	ldr	r0, [r4, #40]	; 0x28
   1c3e8:	add	r6, r6, #8
   1c3ec:	ldr	r7, [r4, #48]	; 0x30
   1c3f0:	str	r5, [sp]
   1c3f4:	add	r5, r5, #1
   1c3f8:	blx	r7
   1c3fc:	cmp	r5, #8
   1c400:	bne	1c3d8 <flatcc_builder_clear@@Base+0x10>
   1c404:	ldr	r3, [r4, #184]	; 0xb8
   1c408:	cmp	r3, #0
   1c40c:	beq	1c418 <flatcc_builder_clear@@Base+0x50>
   1c410:	add	r0, r4, #188	; 0xbc
   1c414:	bl	1e8a0 <flatcc_emitter_clear@@Base>
   1c418:	mov	r2, #232	; 0xe8
   1c41c:	mov	r1, #0
   1c420:	mov	r0, r4
   1c424:	add	sp, sp, #12
   1c428:	pop	{r4, r5, r6, r7, lr}
   1c42c:	b	12624 <memset@plt>

0001c430 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1c430:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c434:	add	r5, r1, #3
   1c438:	mov	r7, #0
   1c43c:	bic	r5, r5, #3
   1c440:	mov	r1, #7
   1c444:	add	r5, r5, #4
   1c448:	mov	r6, r0
   1c44c:	mov	r3, r5
   1c450:	str	r7, [sp]
   1c454:	ldr	r2, [r0, #228]	; 0xe4
   1c458:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1c45c:	subs	r4, r0, #0
   1c460:	beq	1c48c <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   1c464:	mov	r2, r5
   1c468:	mov	r1, r7
   1c46c:	bl	12624 <memset@plt>
   1c470:	ldr	r3, [r6, #224]	; 0xe0
   1c474:	str	r3, [r4], #4
   1c478:	ldr	r1, [r6, #228]	; 0xe4
   1c47c:	add	r3, r1, #4
   1c480:	add	r5, r1, r5
   1c484:	str	r3, [r6, #224]	; 0xe0
   1c488:	str	r5, [r6, #228]	; 0xe4
   1c48c:	mov	r0, r4
   1c490:	add	sp, sp, #12
   1c494:	pop	{r4, r5, r6, r7, pc}

0001c498 <flatcc_builder_enter_user_frame@@Base>:
   1c498:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c49c:	add	r4, r1, #3
   1c4a0:	mov	r7, #0
   1c4a4:	bic	r4, r4, #3
   1c4a8:	mov	r1, #7
   1c4ac:	add	r4, r4, #4
   1c4b0:	mov	r6, r0
   1c4b4:	mov	r3, r4
   1c4b8:	str	r7, [sp]
   1c4bc:	ldr	r2, [r0, #228]	; 0xe4
   1c4c0:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1c4c4:	subs	r5, r0, #0
   1c4c8:	moveq	r0, r5
   1c4cc:	beq	1c4f8 <flatcc_builder_enter_user_frame@@Base+0x60>
   1c4d0:	mov	r2, r4
   1c4d4:	mov	r1, r7
   1c4d8:	bl	12624 <memset@plt>
   1c4dc:	ldr	r3, [r6, #224]	; 0xe0
   1c4e0:	str	r3, [r5]
   1c4e4:	ldr	r1, [r6, #228]	; 0xe4
   1c4e8:	add	r0, r1, #4
   1c4ec:	add	r4, r1, r4
   1c4f0:	str	r0, [r6, #224]	; 0xe0
   1c4f4:	str	r4, [r6, #228]	; 0xe4
   1c4f8:	add	sp, sp, #12
   1c4fc:	pop	{r4, r5, r6, r7, pc}

0001c500 <flatcc_builder_exit_user_frame@@Base>:
   1c500:	ldr	r3, [r0, #224]	; 0xe0
   1c504:	cmp	r3, #0
   1c508:	bne	1c524 <flatcc_builder_exit_user_frame@@Base+0x24>
   1c50c:	push	{r4, lr}
   1c510:	movw	r2, #542	; 0x21e
   1c514:	ldr	r3, [pc, #40]	; 1c544 <flatcc_builder_exit_user_frame@@Base+0x44>
   1c518:	ldr	r1, [pc, #40]	; 1c548 <flatcc_builder_exit_user_frame@@Base+0x48>
   1c51c:	ldr	r0, [pc, #40]	; 1c54c <flatcc_builder_exit_user_frame@@Base+0x4c>
   1c520:	bl	12684 <__assert_fail@plt>
   1c524:	ldr	r1, [r0, #108]	; 0x6c
   1c528:	mov	r2, r0
   1c52c:	add	r1, r1, r3
   1c530:	sub	r3, r3, #4
   1c534:	str	r3, [r0, #228]	; 0xe4
   1c538:	ldr	r0, [r1, #-4]
   1c53c:	str	r0, [r2, #224]	; 0xe0
   1c540:	bx	lr
   1c544:	andeq	r2, r2, fp, ror #8
   1c548:	andeq	r2, r2, sp, ror #17
   1c54c:	andeq	r2, r2, ip, ror r9

0001c550 <flatcc_builder_exit_user_frame_at@@Base>:
   1c550:	ldr	r2, [r0, #224]	; 0xe0
   1c554:	cmp	r2, r1
   1c558:	bcs	1c574 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   1c55c:	push	{r4, lr}
   1c560:	movw	r2, #551	; 0x227
   1c564:	ldr	r3, [pc, #16]	; 1c57c <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   1c568:	ldr	r1, [pc, #16]	; 1c580 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1c56c:	ldr	r0, [pc, #16]	; 1c584 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1c570:	bl	12684 <__assert_fail@plt>
   1c574:	str	r1, [r0, #224]	; 0xe0
   1c578:	b	1c500 <flatcc_builder_exit_user_frame@@Base>
   1c57c:	andeq	r2, r2, sl, lsl #9
   1c580:	andeq	r2, r2, sp, ror #17
   1c584:	muleq	r2, r5, r9

0001c588 <flatcc_builder_get_current_user_frame@@Base>:
   1c588:	ldr	r0, [r0, #224]	; 0xe0
   1c58c:	bx	lr

0001c590 <flatcc_builder_get_user_frame_ptr@@Base>:
   1c590:	ldr	r0, [r0, #108]	; 0x6c
   1c594:	add	r0, r0, r1
   1c598:	bx	lr

0001c59c <flatcc_builder_embed_buffer@@Base>:
   1c59c:	push	{r4, r5, r6, lr}
   1c5a0:	mov	r4, r3
   1c5a4:	sub	sp, sp, #80	; 0x50
   1c5a8:	mov	r6, r2
   1c5ac:	mov	r2, r1
   1c5b0:	add	r1, sp, #96	; 0x60
   1c5b4:	mov	r5, r0
   1c5b8:	ldr	r3, [r0, #152]	; 0x98
   1c5bc:	adds	r3, r3, #0
   1c5c0:	movne	r3, #1
   1c5c4:	bl	1bee8 <flatcc_builder_default_alloc@@Base+0x338>
   1c5c8:	cmp	r0, #0
   1c5cc:	movne	r0, #0
   1c5d0:	bne	1c6a4 <flatcc_builder_embed_buffer@@Base+0x108>
   1c5d4:	ldr	r3, [sp, #100]	; 0x64
   1c5d8:	str	r0, [sp, #8]
   1c5dc:	str	r0, [sp, #12]
   1c5e0:	tst	r3, #2
   1c5e4:	ldr	r3, [r5, #136]	; 0x88
   1c5e8:	movne	r2, #4
   1c5ec:	moveq	r2, #0
   1c5f0:	sub	r3, r3, r4
   1c5f4:	sub	r3, r3, r2
   1c5f8:	ldrh	r2, [sp, #96]	; 0x60
   1c5fc:	sub	r2, r2, #1
   1c600:	and	r3, r3, r2
   1c604:	add	r2, r4, r3
   1c608:	str	r2, [sp, #4]
   1c60c:	ldr	r2, [r5, #152]	; 0x98
   1c610:	cmp	r2, #0
   1c614:	beq	1c634 <flatcc_builder_embed_buffer@@Base+0x98>
   1c618:	mov	r2, #4
   1c61c:	add	r1, sp, r2
   1c620:	str	r2, [sp, #8]
   1c624:	str	r1, [sp, #16]
   1c628:	str	r2, [sp, #20]
   1c62c:	mov	r2, #1
   1c630:	str	r2, [sp, #12]
   1c634:	cmp	r4, #0
   1c638:	beq	1c664 <flatcc_builder_embed_buffer@@Base+0xc8>
   1c63c:	ldr	r2, [sp, #8]
   1c640:	add	r1, sp, #80	; 0x50
   1c644:	add	r2, r2, r4
   1c648:	str	r2, [sp, #8]
   1c64c:	ldr	r2, [sp, #12]
   1c650:	add	r2, r2, #1
   1c654:	add	r1, r1, r2, lsl #3
   1c658:	str	r2, [sp, #12]
   1c65c:	str	r6, [r1, #-72]	; 0xffffffb8
   1c660:	str	r4, [r1, #-68]	; 0xffffffbc
   1c664:	cmp	r3, #0
   1c668:	beq	1c698 <flatcc_builder_embed_buffer@@Base+0xfc>
   1c66c:	ldr	r2, [sp, #8]
   1c670:	add	r1, sp, #80	; 0x50
   1c674:	ldr	r0, [pc, #48]	; 1c6ac <flatcc_builder_embed_buffer@@Base+0x110>
   1c678:	add	r2, r2, r3
   1c67c:	str	r2, [sp, #8]
   1c680:	ldr	r2, [sp, #12]
   1c684:	add	r2, r2, #1
   1c688:	add	r1, r1, r2, lsl #3
   1c68c:	str	r2, [sp, #12]
   1c690:	str	r0, [r1, #-72]	; 0xffffffb8
   1c694:	str	r3, [r1, #-68]	; 0xffffffbc
   1c698:	add	r1, sp, #8
   1c69c:	mov	r0, r5
   1c6a0:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1c6a4:	add	sp, sp, #80	; 0x50
   1c6a8:	pop	{r4, r5, r6, pc}
   1c6ac:	andeq	r2, r2, r7, lsl #4

0001c6b0 <flatcc_builder_create_buffer@@Base>:
   1c6b0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c6b4:	sub	sp, sp, #92	; 0x5c
   1c6b8:	mov	r8, #0
   1c6bc:	mov	r9, r1
   1c6c0:	mov	r5, r3
   1c6c4:	add	r1, sp, #120	; 0x78
   1c6c8:	mov	r4, r0
   1c6cc:	ldr	r7, [sp, #124]	; 0x7c
   1c6d0:	str	r8, [sp, #12]
   1c6d4:	and	r6, r7, #1
   1c6d8:	mov	r3, r6
   1c6dc:	bl	1bee8 <flatcc_builder_default_alloc@@Base+0x338>
   1c6e0:	cmp	r0, r8
   1c6e4:	bne	1c854 <flatcc_builder_create_buffer@@Base+0x1a4>
   1c6e8:	ldrh	r3, [r4, #128]	; 0x80
   1c6ec:	ldrh	r1, [sp, #120]	; 0x78
   1c6f0:	ldr	r2, [r4, #136]	; 0x88
   1c6f4:	cmp	r3, r1
   1c6f8:	strhcc	r1, [r4, #128]	; 0x80
   1c6fc:	cmp	r9, #0
   1c700:	sub	r1, r1, #1
   1c704:	ldrne	r3, [r9]
   1c708:	strne	r3, [sp, #12]
   1c70c:	sub	r3, r2, #4
   1c710:	ldr	r0, [sp, #12]
   1c714:	cmp	r0, #0
   1c718:	movne	r0, #4
   1c71c:	tst	r7, #2
   1c720:	movne	ip, #4
   1c724:	moveq	ip, #0
   1c728:	sub	r3, r3, r0
   1c72c:	ands	r7, r7, #3
   1c730:	sub	r3, r3, ip
   1c734:	and	r3, r3, r1
   1c738:	mov	r1, #0
   1c73c:	str	r1, [sp, #16]
   1c740:	str	r1, [sp, #20]
   1c744:	beq	1c764 <flatcc_builder_create_buffer@@Base+0xb4>
   1c748:	mov	r1, #4
   1c74c:	add	ip, sp, #8
   1c750:	str	r1, [sp, #16]
   1c754:	str	ip, [sp, #24]
   1c758:	str	r1, [sp, #28]
   1c75c:	mov	r1, #1
   1c760:	str	r1, [sp, #20]
   1c764:	ldr	ip, [sp, #16]
   1c768:	add	r8, sp, #88	; 0x58
   1c76c:	add	r9, sp, #4
   1c770:	cmp	r0, #0
   1c774:	ldr	lr, [sp, #20]
   1c778:	add	ip, ip, #4
   1c77c:	add	r1, lr, #1
   1c780:	str	ip, [sp, #16]
   1c784:	add	r8, r8, r1, lsl #3
   1c788:	str	r1, [sp, #20]
   1c78c:	str	r9, [r8, #-72]	; 0xffffffb8
   1c790:	mov	r9, #4
   1c794:	str	r9, [r8, #-68]	; 0xffffffbc
   1c798:	beq	1c7c4 <flatcc_builder_create_buffer@@Base+0x114>
   1c79c:	add	ip, ip, r0
   1c7a0:	add	r1, lr, #2
   1c7a4:	add	lr, lr, #2
   1c7a8:	str	ip, [sp, #16]
   1c7ac:	add	ip, sp, #88	; 0x58
   1c7b0:	add	r1, ip, r1, lsl #3
   1c7b4:	add	ip, sp, #12
   1c7b8:	str	lr, [sp, #20]
   1c7bc:	str	ip, [r1, #-72]	; 0xffffffb8
   1c7c0:	str	r0, [r1, #-68]	; 0xffffffbc
   1c7c4:	cmp	r3, #0
   1c7c8:	beq	1c7f8 <flatcc_builder_create_buffer@@Base+0x148>
   1c7cc:	ldr	r1, [sp, #16]
   1c7d0:	add	r0, sp, #88	; 0x58
   1c7d4:	ldr	ip, [pc, #132]	; 1c860 <flatcc_builder_create_buffer@@Base+0x1b0>
   1c7d8:	add	r1, r1, r3
   1c7dc:	str	r1, [sp, #16]
   1c7e0:	ldr	r1, [sp, #20]
   1c7e4:	add	r1, r1, #1
   1c7e8:	add	r0, r0, r1, lsl #3
   1c7ec:	str	r1, [sp, #20]
   1c7f0:	str	ip, [r0, #-72]	; 0xffffffb8
   1c7f4:	str	r3, [r0, #-68]	; 0xffffffbc
   1c7f8:	ldr	r3, [sp, #16]
   1c7fc:	cmp	r7, #0
   1c800:	add	r1, sp, #16
   1c804:	mov	r0, r4
   1c808:	sub	r3, r2, r3
   1c80c:	movne	r2, #4
   1c810:	moveq	r2, #0
   1c814:	cmp	r6, #0
   1c818:	add	r3, r3, r2
   1c81c:	ldrne	r2, [r4, #144]	; 0x90
   1c820:	ldreq	r2, [r4, #140]	; 0x8c
   1c824:	sub	r2, r2, r3
   1c828:	sub	r3, r5, r3
   1c82c:	str	r3, [sp, #4]
   1c830:	str	r2, [sp, #8]
   1c834:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1c838:	cmp	r0, #0
   1c83c:	bne	1c858 <flatcc_builder_create_buffer@@Base+0x1a8>
   1c840:	ldr	r3, [pc, #28]	; 1c864 <flatcc_builder_create_buffer@@Base+0x1b4>
   1c844:	mov	r2, #772	; 0x304
   1c848:	ldr	r1, [pc, #24]	; 1c868 <flatcc_builder_create_buffer@@Base+0x1b8>
   1c84c:	ldr	r0, [pc, #24]	; 1c86c <flatcc_builder_create_buffer@@Base+0x1bc>
   1c850:	bl	12684 <__assert_fail@plt>
   1c854:	mov	r0, r8
   1c858:	add	sp, sp, #92	; 0x5c
   1c85c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c860:	andeq	r2, r2, r7, lsl #4
   1c864:	andeq	r2, r2, ip, lsr #9
   1c868:	andeq	r2, r2, sp, ror #17
   1c86c:	andeq	r2, r2, sl, asr r9

0001c870 <flatcc_builder_create_struct@@Base>:
   1c870:	cmp	r3, #0
   1c874:	push	{lr}		; (str lr, [sp, #-4]!)
   1c878:	sub	sp, sp, #76	; 0x4c
   1c87c:	bne	1c894 <flatcc_builder_create_struct@@Base+0x24>
   1c880:	ldr	r3, [pc, #148]	; 1c91c <flatcc_builder_create_struct@@Base+0xac>
   1c884:	movw	r2, #783	; 0x30f
   1c888:	ldr	r1, [pc, #144]	; 1c920 <flatcc_builder_create_struct@@Base+0xb0>
   1c88c:	ldr	r0, [pc, #144]	; 1c924 <flatcc_builder_create_struct@@Base+0xb4>
   1c890:	bl	12684 <__assert_fail@plt>
   1c894:	ldrh	ip, [r0, #128]	; 0x80
   1c898:	cmp	ip, r3
   1c89c:	ldr	ip, [r0, #136]	; 0x88
   1c8a0:	strhcc	r3, [r0, #128]	; 0x80
   1c8a4:	sub	r3, r3, #1
   1c8a8:	sub	ip, ip, r2
   1c8ac:	and	r3, r3, ip
   1c8b0:	mov	ip, #0
   1c8b4:	cmp	r2, ip
   1c8b8:	str	ip, [sp]
   1c8bc:	str	ip, [sp, #4]
   1c8c0:	beq	1c8d8 <flatcc_builder_create_struct@@Base+0x68>
   1c8c4:	str	r2, [sp]
   1c8c8:	str	r1, [sp, #8]
   1c8cc:	str	r2, [sp, #12]
   1c8d0:	mov	r2, #1
   1c8d4:	str	r2, [sp, #4]
   1c8d8:	cmp	r3, #0
   1c8dc:	beq	1c90c <flatcc_builder_create_struct@@Base+0x9c>
   1c8e0:	ldr	r2, [sp]
   1c8e4:	add	r1, sp, #72	; 0x48
   1c8e8:	ldr	ip, [pc, #56]	; 1c928 <flatcc_builder_create_struct@@Base+0xb8>
   1c8ec:	add	r2, r2, r3
   1c8f0:	str	r2, [sp]
   1c8f4:	ldr	r2, [sp, #4]
   1c8f8:	add	r2, r2, #1
   1c8fc:	add	r1, r1, r2, lsl #3
   1c900:	str	r2, [sp, #4]
   1c904:	str	ip, [r1, #-72]	; 0xffffffb8
   1c908:	str	r3, [r1, #-68]	; 0xffffffbc
   1c90c:	mov	r1, sp
   1c910:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1c914:	add	sp, sp, #76	; 0x4c
   1c918:	pop	{pc}		; (ldr pc, [sp], #4)
   1c91c:	andeq	r2, r2, r9, asr #9
   1c920:	andeq	r2, r2, sp, ror #17
   1c924:			; <UNDEFINED> instruction: 0x000229b4
   1c928:	andeq	r2, r2, r7, lsl #4

0001c92c <flatcc_builder_start_buffer@@Base>:
   1c92c:	push	{r4, r5, r6, r7, r8, lr}
   1c930:	mov	r5, r1
   1c934:	mov	r4, r0
   1c938:	mov	r7, r2
   1c93c:	mov	r6, r3
   1c940:	ldrh	r1, [r0, #128]	; 0x80
   1c944:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1c948:	cmp	r0, #0
   1c94c:	bne	1c9bc <flatcc_builder_start_buffer@@Base+0x90>
   1c950:	ldrh	r3, [r4, #132]	; 0x84
   1c954:	mov	ip, #1
   1c958:	cmp	r5, #0
   1c95c:	ldr	r1, [r4, #32]
   1c960:	strh	ip, [r4, #128]	; 0x80
   1c964:	strh	r3, [r1, #34]	; 0x22
   1c968:	ldrh	r3, [r4, #164]	; 0xa4
   1c96c:	strh	r7, [r4, #132]	; 0x84
   1c970:	strh	r3, [r1, #32]
   1c974:	ldr	r3, [r4, #144]	; 0x90
   1c978:	strh	r6, [r4, #164]	; 0xa4
   1c97c:	str	r3, [r1, #20]
   1c980:	ldr	r3, [r4, #152]	; 0x98
   1c984:	str	r3, [r1, #28]
   1c988:	ldr	r3, [r4, #136]	; 0x88
   1c98c:	str	r3, [r4, #144]	; 0x90
   1c990:	ldr	r3, [r4, #148]	; 0x94
   1c994:	add	r2, r3, ip
   1c998:	strd	r2, [r4, #148]	; 0x94
   1c99c:	ldr	r3, [r4, #168]	; 0xa8
   1c9a0:	str	r3, [r1, #16]
   1c9a4:	ldr	r3, [pc, #24]	; 1c9c4 <flatcc_builder_start_buffer@@Base+0x98>
   1c9a8:	moveq	r5, r3
   1c9ac:	ldr	r3, [r5]
   1c9b0:	str	r3, [r4, #168]	; 0xa8
   1c9b4:	strh	ip, [r1, #14]
   1c9b8:	pop	{r4, r5, r6, r7, r8, pc}
   1c9bc:	mvn	r0, #0
   1c9c0:	pop	{r4, r5, r6, r7, r8, pc}
   1c9c4:	andeq	r2, r2, r7, lsl #4

0001c9c8 <flatcc_builder_end_buffer@@Base>:
   1c9c8:	push	{r0, r1, r2, r4, r5, lr}
   1c9cc:	mov	r4, r0
   1c9d0:	ldrh	r0, [r0, #164]	; 0xa4
   1c9d4:	ldr	r2, [r4, #152]	; 0x98
   1c9d8:	and	r0, r0, #2
   1c9dc:	cmp	r2, #0
   1c9e0:	orrne	r0, r0, #1
   1c9e4:	ldr	r2, [r4, #32]
   1c9e8:	ldrh	r2, [r2, #14]
   1c9ec:	cmp	r2, #1
   1c9f0:	beq	1ca08 <flatcc_builder_end_buffer@@Base+0x40>
   1c9f4:	ldr	r3, [pc, #120]	; 1ca74 <flatcc_builder_end_buffer@@Base+0xac>
   1c9f8:	movw	r2, #838	; 0x346
   1c9fc:	ldr	r1, [pc, #116]	; 1ca78 <flatcc_builder_end_buffer@@Base+0xb0>
   1ca00:	ldr	r0, [pc, #116]	; 1ca7c <flatcc_builder_end_buffer@@Base+0xb4>
   1ca04:	bl	12684 <__assert_fail@plt>
   1ca08:	ldrh	r2, [r4, #132]	; 0x84
   1ca0c:	mov	r3, r1
   1ca10:	ldrh	r1, [r4, #128]	; 0x80
   1ca14:	cmp	r1, r2
   1ca18:	strhcc	r2, [r4, #128]	; 0x80
   1ca1c:	ldrh	r1, [r4, #128]	; 0x80
   1ca20:	str	r1, [sp]
   1ca24:	add	r1, r4, #168	; 0xa8
   1ca28:	str	r0, [sp, #4]
   1ca2c:	mov	r0, r4
   1ca30:	bl	1c6b0 <flatcc_builder_create_buffer@@Base>
   1ca34:	subs	r5, r0, #0
   1ca38:	beq	1ca68 <flatcc_builder_end_buffer@@Base+0xa0>
   1ca3c:	ldr	r3, [r4, #32]
   1ca40:	mov	r0, r4
   1ca44:	ldr	r2, [r3, #20]
   1ca48:	str	r2, [r4, #144]	; 0x90
   1ca4c:	ldr	r2, [r3, #28]
   1ca50:	str	r2, [r4, #152]	; 0x98
   1ca54:	ldr	r2, [r3, #16]
   1ca58:	ldrh	r3, [r3, #32]
   1ca5c:	strh	r3, [r4, #164]	; 0xa4
   1ca60:	str	r2, [r4, #168]	; 0xa8
   1ca64:	bl	1baac <test_parse@@Base+0x4ac>
   1ca68:	mov	r0, r5
   1ca6c:	add	sp, sp, #12
   1ca70:	pop	{r4, r5, pc}
   1ca74:	andeq	r2, r2, r6, ror #9
   1ca78:	andeq	r2, r2, sp, ror #17
   1ca7c:			; <UNDEFINED> instruction: 0x000229bf

0001ca80 <flatcc_builder_start_struct@@Base>:
   1ca80:	push	{r4, r5, r6, lr}
   1ca84:	mov	r5, r1
   1ca88:	mov	r1, r2
   1ca8c:	mov	r4, r0
   1ca90:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1ca94:	cmp	r0, #0
   1ca98:	bne	1cac0 <flatcc_builder_start_struct@@Base+0x40>
   1ca9c:	ldr	r3, [r4, #32]
   1caa0:	mov	r2, #2
   1caa4:	mvn	r1, #3
   1caa8:	mov	r0, r4
   1caac:	strh	r2, [r3, #14]
   1cab0:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1cab4:	mov	r1, r5
   1cab8:	pop	{r4, r5, r6, lr}
   1cabc:	b	1ba64 <test_parse@@Base+0x464>
   1cac0:	mov	r0, #0
   1cac4:	pop	{r4, r5, r6, pc}

0001cac8 <flatcc_builder_struct_edit@@Base>:
   1cac8:	ldr	r0, [r0, #16]
   1cacc:	bx	lr

0001cad0 <flatcc_builder_end_struct@@Base>:
   1cad0:	ldr	r3, [r0, #32]
   1cad4:	push	{r4, r5, r6, lr}
   1cad8:	ldrh	r3, [r3, #14]
   1cadc:	cmp	r3, #2
   1cae0:	beq	1caf8 <flatcc_builder_end_struct@@Base+0x28>
   1cae4:	ldr	r3, [pc, #56]	; 1cb24 <flatcc_builder_end_struct@@Base+0x54>
   1cae8:	mov	r2, #872	; 0x368
   1caec:	ldr	r1, [pc, #52]	; 1cb28 <flatcc_builder_end_struct@@Base+0x58>
   1caf0:	ldr	r0, [pc, #52]	; 1cb2c <flatcc_builder_end_struct@@Base+0x5c>
   1caf4:	bl	12684 <__assert_fail@plt>
   1caf8:	ldrh	r3, [r0, #130]	; 0x82
   1cafc:	mov	r4, r0
   1cb00:	ldr	r1, [r0, #16]
   1cb04:	ldr	r2, [r0, #20]
   1cb08:	bl	1c870 <flatcc_builder_create_struct@@Base>
   1cb0c:	subs	r5, r0, #0
   1cb10:	beq	1cb1c <flatcc_builder_end_struct@@Base+0x4c>
   1cb14:	mov	r0, r4
   1cb18:	bl	1baac <test_parse@@Base+0x4ac>
   1cb1c:	mov	r0, r5
   1cb20:	pop	{r4, r5, r6, pc}
   1cb24:	andeq	r2, r2, r0, lsl #10
   1cb28:	andeq	r2, r2, sp, ror #17
   1cb2c:	andeq	r2, r2, fp, ror #19

0001cb30 <flatcc_builder_extend_vector@@Base>:
   1cb30:	push	{r4, r5, r6, lr}
   1cb34:	mov	r4, r0
   1cb38:	mov	r5, r1
   1cb3c:	ldr	r0, [r0, #32]
   1cb40:	ldr	r2, [r0, #24]
   1cb44:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1cb48:	cmp	r0, #0
   1cb4c:	bne	1cb68 <flatcc_builder_extend_vector@@Base+0x38>
   1cb50:	ldr	r3, [r4, #32]
   1cb54:	mov	r0, r4
   1cb58:	ldr	r1, [r3, #16]
   1cb5c:	mul	r1, r1, r5
   1cb60:	pop	{r4, r5, r6, lr}
   1cb64:	b	1ba64 <test_parse@@Base+0x464>
   1cb68:	mov	r0, #0
   1cb6c:	pop	{r4, r5, r6, pc}

0001cb70 <flatcc_builder_vector_push@@Base>:
   1cb70:	ldr	r3, [r0, #32]
   1cb74:	push	{r4, lr}
   1cb78:	ldrh	r2, [r3, #14]
   1cb7c:	cmp	r2, #4
   1cb80:	beq	1cb98 <flatcc_builder_vector_push@@Base+0x28>
   1cb84:	ldr	r3, [pc, #68]	; 1cbd0 <flatcc_builder_vector_push@@Base+0x60>
   1cb88:	movw	r2, #907	; 0x38b
   1cb8c:	ldr	r1, [pc, #64]	; 1cbd4 <flatcc_builder_vector_push@@Base+0x64>
   1cb90:	ldr	r0, [pc, #64]	; 1cbd8 <flatcc_builder_vector_push@@Base+0x68>
   1cb94:	bl	12684 <__assert_fail@plt>
   1cb98:	ldr	r2, [r3, #20]
   1cb9c:	ldr	ip, [r3, #24]
   1cba0:	cmp	r2, ip
   1cba4:	bls	1cbbc <flatcc_builder_vector_push@@Base+0x4c>
   1cba8:	ldr	r3, [pc, #32]	; 1cbd0 <flatcc_builder_vector_push@@Base+0x60>
   1cbac:	mov	r2, #908	; 0x38c
   1cbb0:	ldr	r1, [pc, #28]	; 1cbd4 <flatcc_builder_vector_push@@Base+0x64>
   1cbb4:	ldr	r0, [pc, #32]	; 1cbdc <flatcc_builder_vector_push@@Base+0x6c>
   1cbb8:	b	1cb94 <flatcc_builder_vector_push@@Base+0x24>
   1cbbc:	add	r2, r2, #1
   1cbc0:	pop	{r4, lr}
   1cbc4:	str	r2, [r3, #20]
   1cbc8:	ldr	r2, [r3, #16]
   1cbcc:	b	1bb34 <test_parse@@Base+0x534>
   1cbd0:	andeq	r2, r2, sl, lsl r5
   1cbd4:	andeq	r2, r2, sp, ror #17
   1cbd8:	andeq	r2, r2, r7, lsl sl
   1cbdc:	andeq	r2, r2, r3, asr #20

0001cbe0 <flatcc_builder_append_vector@@Base>:
   1cbe0:	push	{r4, r5, r6, lr}
   1cbe4:	mov	r4, r0
   1cbe8:	ldr	r0, [r0, #32]
   1cbec:	ldrh	r3, [r0, #14]
   1cbf0:	cmp	r3, #4
   1cbf4:	beq	1cc0c <flatcc_builder_append_vector@@Base+0x2c>
   1cbf8:	ldr	r3, [pc, #76]	; 1cc4c <flatcc_builder_append_vector@@Base+0x6c>
   1cbfc:	movw	r2, #915	; 0x393
   1cc00:	ldr	r1, [pc, #72]	; 1cc50 <flatcc_builder_append_vector@@Base+0x70>
   1cc04:	ldr	r0, [pc, #72]	; 1cc54 <flatcc_builder_append_vector@@Base+0x74>
   1cc08:	bl	12684 <__assert_fail@plt>
   1cc0c:	mov	r6, r1
   1cc10:	mov	r5, r2
   1cc14:	mov	r1, r2
   1cc18:	ldr	r2, [r0, #24]
   1cc1c:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1cc20:	cmp	r0, #0
   1cc24:	bne	1cc44 <flatcc_builder_append_vector@@Base+0x64>
   1cc28:	ldr	r3, [r4, #32]
   1cc2c:	mov	r1, r6
   1cc30:	mov	r0, r4
   1cc34:	ldr	r2, [r3, #16]
   1cc38:	mul	r2, r2, r5
   1cc3c:	pop	{r4, r5, r6, lr}
   1cc40:	b	1bb34 <test_parse@@Base+0x534>
   1cc44:	mov	r0, #0
   1cc48:	pop	{r4, r5, r6, pc}
   1cc4c:	andeq	r2, r2, r5, lsr r5
   1cc50:	andeq	r2, r2, sp, ror #17
   1cc54:	andeq	r2, r2, r7, lsl sl

0001cc58 <flatcc_builder_extend_offset_vector@@Base>:
   1cc58:	push	{r4, r5, r6, lr}
   1cc5c:	mvn	r2, #-1073741824	; 0xc0000000
   1cc60:	mov	r4, r0
   1cc64:	mov	r5, r1
   1cc68:	ldr	r0, [r0, #32]
   1cc6c:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1cc70:	cmp	r0, #0
   1cc74:	bne	1cc88 <flatcc_builder_extend_offset_vector@@Base+0x30>
   1cc78:	lsl	r1, r5, #2
   1cc7c:	mov	r0, r4
   1cc80:	pop	{r4, r5, r6, lr}
   1cc84:	b	1ba64 <test_parse@@Base+0x464>
   1cc88:	mov	r0, #0
   1cc8c:	pop	{r4, r5, r6, pc}

0001cc90 <flatcc_builder_offset_vector_push@@Base>:
   1cc90:	ldr	r2, [r0, #32]
   1cc94:	push	{r4, lr}
   1cc98:	ldrh	r3, [r2, #14]
   1cc9c:	cmp	r3, #5
   1cca0:	beq	1ccb8 <flatcc_builder_offset_vector_push@@Base+0x28>
   1cca4:	ldr	r3, [pc, #64]	; 1ccec <flatcc_builder_offset_vector_push@@Base+0x5c>
   1cca8:	movw	r2, #934	; 0x3a6
   1ccac:	ldr	r1, [pc, #60]	; 1ccf0 <flatcc_builder_offset_vector_push@@Base+0x60>
   1ccb0:	ldr	r0, [pc, #60]	; 1ccf4 <flatcc_builder_offset_vector_push@@Base+0x64>
   1ccb4:	bl	12684 <__assert_fail@plt>
   1ccb8:	ldr	r3, [r2, #20]
   1ccbc:	cmn	r3, #-1073741823	; 0xc0000001
   1ccc0:	beq	1cce4 <flatcc_builder_offset_vector_push@@Base+0x54>
   1ccc4:	add	r3, r3, #1
   1ccc8:	mov	r4, r1
   1cccc:	mov	r1, #4
   1ccd0:	str	r3, [r2, #20]
   1ccd4:	bl	1ba64 <test_parse@@Base+0x464>
   1ccd8:	cmp	r0, #0
   1ccdc:	strne	r4, [r0]
   1cce0:	pop	{r4, pc}
   1cce4:	mov	r0, #0
   1cce8:	pop	{r4, pc}
   1ccec:	andeq	r2, r2, r2, asr r5
   1ccf0:	andeq	r2, r2, sp, ror #17
   1ccf4:	andeq	r2, r2, r0, lsl #21

0001ccf8 <flatcc_builder_append_offset_vector@@Base>:
   1ccf8:	push	{r4, r5, r6, lr}
   1ccfc:	mov	r4, r0
   1cd00:	ldr	r0, [r0, #32]
   1cd04:	ldrh	r3, [r0, #14]
   1cd08:	cmp	r3, #5
   1cd0c:	beq	1cd24 <flatcc_builder_append_offset_vector@@Base+0x2c>
   1cd10:	ldr	r3, [pc, #68]	; 1cd5c <flatcc_builder_append_offset_vector@@Base+0x64>
   1cd14:	mov	r2, #948	; 0x3b4
   1cd18:	ldr	r1, [pc, #64]	; 1cd60 <flatcc_builder_append_offset_vector@@Base+0x68>
   1cd1c:	ldr	r0, [pc, #64]	; 1cd64 <flatcc_builder_append_offset_vector@@Base+0x6c>
   1cd20:	bl	12684 <__assert_fail@plt>
   1cd24:	mov	r5, r2
   1cd28:	mov	r6, r1
   1cd2c:	mvn	r2, #-1073741824	; 0xc0000000
   1cd30:	mov	r1, r5
   1cd34:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1cd38:	cmp	r0, #0
   1cd3c:	bne	1cd54 <flatcc_builder_append_offset_vector@@Base+0x5c>
   1cd40:	lsl	r2, r5, #2
   1cd44:	mov	r1, r6
   1cd48:	mov	r0, r4
   1cd4c:	pop	{r4, r5, r6, lr}
   1cd50:	b	1bb34 <test_parse@@Base+0x534>
   1cd54:	mov	r0, #0
   1cd58:	pop	{r4, r5, r6, pc}
   1cd5c:	andeq	r2, r2, r4, ror r5
   1cd60:	andeq	r2, r2, sp, ror #17
   1cd64:	andeq	r2, r2, r0, lsl #21

0001cd68 <flatcc_builder_extend_string@@Base>:
   1cd68:	push	{r4, r5, r6, lr}
   1cd6c:	mov	r4, r0
   1cd70:	ldr	r0, [r0, #32]
   1cd74:	ldrh	r3, [r0, #14]
   1cd78:	cmp	r3, #6
   1cd7c:	beq	1cd94 <flatcc_builder_extend_string@@Base+0x2c>
   1cd80:	ldr	r3, [pc, #56]	; 1cdc0 <flatcc_builder_extend_string@@Base+0x58>
   1cd84:	movw	r2, #957	; 0x3bd
   1cd88:	ldr	r1, [pc, #52]	; 1cdc4 <flatcc_builder_extend_string@@Base+0x5c>
   1cd8c:	ldr	r0, [pc, #52]	; 1cdc8 <flatcc_builder_extend_string@@Base+0x60>
   1cd90:	bl	12684 <__assert_fail@plt>
   1cd94:	mvn	r2, #0
   1cd98:	mov	r5, r1
   1cd9c:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1cda0:	cmp	r0, #0
   1cda4:	bne	1cdb8 <flatcc_builder_extend_string@@Base+0x50>
   1cda8:	mov	r1, r5
   1cdac:	mov	r0, r4
   1cdb0:	pop	{r4, r5, r6, lr}
   1cdb4:	b	1ba64 <test_parse@@Base+0x464>
   1cdb8:	mov	r0, #0
   1cdbc:	pop	{r4, r5, r6, pc}
   1cdc0:	muleq	r2, r8, r5
   1cdc4:	andeq	r2, r2, sp, ror #17
   1cdc8:			; <UNDEFINED> instruction: 0x00022ab3

0001cdcc <flatcc_builder_append_string@@Base>:
   1cdcc:	push	{r4, r5, r6, lr}
   1cdd0:	mov	r4, r0
   1cdd4:	ldr	r0, [r0, #32]
   1cdd8:	ldrh	r3, [r0, #14]
   1cddc:	cmp	r3, #6
   1cde0:	beq	1cdf8 <flatcc_builder_append_string@@Base+0x2c>
   1cde4:	ldr	r3, [pc, #68]	; 1ce30 <flatcc_builder_append_string@@Base+0x64>
   1cde8:	movw	r2, #966	; 0x3c6
   1cdec:	ldr	r1, [pc, #64]	; 1ce34 <flatcc_builder_append_string@@Base+0x68>
   1cdf0:	ldr	r0, [pc, #64]	; 1ce38 <flatcc_builder_append_string@@Base+0x6c>
   1cdf4:	bl	12684 <__assert_fail@plt>
   1cdf8:	mov	r5, r2
   1cdfc:	mov	r6, r1
   1ce00:	mvn	r2, #0
   1ce04:	mov	r1, r5
   1ce08:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1ce0c:	cmp	r0, #0
   1ce10:	bne	1ce28 <flatcc_builder_append_string@@Base+0x5c>
   1ce14:	mov	r2, r5
   1ce18:	mov	r1, r6
   1ce1c:	mov	r0, r4
   1ce20:	pop	{r4, r5, r6, lr}
   1ce24:	b	1bb34 <test_parse@@Base+0x534>
   1ce28:	mov	r0, #0
   1ce2c:	pop	{r4, r5, r6, pc}
   1ce30:			; <UNDEFINED> instruction: 0x000225b5
   1ce34:	andeq	r2, r2, sp, ror #17
   1ce38:			; <UNDEFINED> instruction: 0x00022ab3

0001ce3c <flatcc_builder_append_string_str@@Base>:
   1ce3c:	push	{r4, r5, r6, lr}
   1ce40:	mov	r5, r0
   1ce44:	mov	r0, r1
   1ce48:	mov	r4, r1
   1ce4c:	bl	12600 <strlen@plt>
   1ce50:	mov	r2, r0
   1ce54:	mov	r1, r4
   1ce58:	mov	r0, r5
   1ce5c:	pop	{r4, r5, r6, lr}
   1ce60:	b	1cdcc <flatcc_builder_append_string@@Base>

0001ce64 <flatcc_builder_append_string_strn@@Base>:
   1ce64:	push	{r4, r5, r6, lr}
   1ce68:	mov	r4, r1
   1ce6c:	mov	r6, r0
   1ce70:	mov	r1, #0
   1ce74:	mov	r0, r4
   1ce78:	mov	r5, r2
   1ce7c:	bl	1263c <memchr@plt>
   1ce80:	cmp	r0, #0
   1ce84:	mov	r1, r4
   1ce88:	subne	r5, r0, r4
   1ce8c:	mov	r0, r6
   1ce90:	mov	r2, r5
   1ce94:	pop	{r4, r5, r6, lr}
   1ce98:	b	1cdcc <flatcc_builder_append_string@@Base>

0001ce9c <flatcc_builder_truncate_vector@@Base>:
   1ce9c:	ldr	r3, [r0, #32]
   1cea0:	push	{r4, lr}
   1cea4:	ldrh	r2, [r3, #14]
   1cea8:	cmp	r2, #4
   1ceac:	beq	1cec4 <flatcc_builder_truncate_vector@@Base+0x28>
   1ceb0:	ldr	r3, [pc, #72]	; 1cf00 <flatcc_builder_truncate_vector@@Base+0x64>
   1ceb4:	movw	r2, #985	; 0x3d9
   1ceb8:	ldr	r1, [pc, #68]	; 1cf04 <flatcc_builder_truncate_vector@@Base+0x68>
   1cebc:	ldr	r0, [pc, #68]	; 1cf08 <flatcc_builder_truncate_vector@@Base+0x6c>
   1cec0:	bl	12684 <__assert_fail@plt>
   1cec4:	ldr	r2, [r3, #20]
   1cec8:	cmp	r2, r1
   1cecc:	bcs	1cee4 <flatcc_builder_truncate_vector@@Base+0x48>
   1ced0:	ldr	r3, [pc, #40]	; 1cf00 <flatcc_builder_truncate_vector@@Base+0x64>
   1ced4:	movw	r2, #986	; 0x3da
   1ced8:	ldr	r1, [pc, #36]	; 1cf04 <flatcc_builder_truncate_vector@@Base+0x68>
   1cedc:	ldr	r0, [pc, #40]	; 1cf0c <flatcc_builder_truncate_vector@@Base+0x70>
   1cee0:	b	1cec0 <flatcc_builder_truncate_vector@@Base+0x24>
   1cee4:	sub	r2, r2, r1
   1cee8:	str	r2, [r3, #20]
   1ceec:	ldr	r3, [r3, #16]
   1cef0:	mul	r1, r3, r1
   1cef4:	bl	1bb14 <test_parse@@Base+0x514>
   1cef8:	mov	r0, #0
   1cefc:	pop	{r4, pc}
   1cf00:	ldrdeq	r2, [r2], -r2	; <UNPREDICTABLE>
   1cf04:	andeq	r2, r2, sp, ror #17
   1cf08:	andeq	r2, r2, r7, lsl sl
   1cf0c:	ldrdeq	r2, [r2], -pc	; <UNPREDICTABLE>

0001cf10 <flatcc_builder_truncate_offset_vector@@Base>:
   1cf10:	ldr	r3, [r0, #32]
   1cf14:	push	{r4, lr}
   1cf18:	ldrh	r2, [r3, #14]
   1cf1c:	cmp	r2, #5
   1cf20:	beq	1cf38 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   1cf24:	ldr	r3, [pc, #72]	; 1cf74 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1cf28:	movw	r2, #994	; 0x3e2
   1cf2c:	ldr	r1, [pc, #68]	; 1cf78 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1cf30:	ldr	r0, [pc, #68]	; 1cf7c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1cf34:	bl	12684 <__assert_fail@plt>
   1cf38:	ldr	r2, [r3, #20]
   1cf3c:	cmp	r2, r1
   1cf40:	bcs	1cf58 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   1cf44:	ldr	r3, [pc, #40]	; 1cf74 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   1cf48:	movw	r2, #995	; 0x3e3
   1cf4c:	ldr	r1, [pc, #36]	; 1cf78 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   1cf50:	ldr	r0, [pc, #40]	; 1cf80 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   1cf54:	b	1cf34 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   1cf58:	sub	r2, r2, r1
   1cf5c:	str	r2, [r3, #20]
   1cf60:	ldr	r3, [r3, #16]
   1cf64:	mul	r1, r3, r1
   1cf68:	bl	1bb14 <test_parse@@Base+0x514>
   1cf6c:	mov	r0, #0
   1cf70:	pop	{r4, pc}
   1cf74:	strdeq	r2, [r2], -r1
   1cf78:	andeq	r2, r2, sp, ror #17
   1cf7c:	andeq	r2, r2, r0, lsl #21
   1cf80:	andeq	r2, r2, r3, lsl #22

0001cf84 <flatcc_builder_truncate_string@@Base>:
   1cf84:	ldr	r2, [r0, #32]
   1cf88:	push	{r4, lr}
   1cf8c:	ldrh	r3, [r2, #14]
   1cf90:	cmp	r3, #6
   1cf94:	beq	1cfac <flatcc_builder_truncate_string@@Base+0x28>
   1cf98:	ldr	r3, [pc, #64]	; 1cfe0 <flatcc_builder_truncate_string@@Base+0x5c>
   1cf9c:	movw	r2, #1003	; 0x3eb
   1cfa0:	ldr	r1, [pc, #60]	; 1cfe4 <flatcc_builder_truncate_string@@Base+0x60>
   1cfa4:	ldr	r0, [pc, #60]	; 1cfe8 <flatcc_builder_truncate_string@@Base+0x64>
   1cfa8:	bl	12684 <__assert_fail@plt>
   1cfac:	ldr	r3, [r2, #20]
   1cfb0:	cmp	r3, r1
   1cfb4:	bcs	1cfcc <flatcc_builder_truncate_string@@Base+0x48>
   1cfb8:	ldr	r3, [pc, #32]	; 1cfe0 <flatcc_builder_truncate_string@@Base+0x5c>
   1cfbc:	mov	r2, #1004	; 0x3ec
   1cfc0:	ldr	r1, [pc, #28]	; 1cfe4 <flatcc_builder_truncate_string@@Base+0x60>
   1cfc4:	ldr	r0, [pc, #32]	; 1cfec <flatcc_builder_truncate_string@@Base+0x68>
   1cfc8:	b	1cfa8 <flatcc_builder_truncate_string@@Base+0x24>
   1cfcc:	sub	r3, r3, r1
   1cfd0:	str	r3, [r2, #20]
   1cfd4:	bl	1bb14 <test_parse@@Base+0x514>
   1cfd8:	mov	r0, #0
   1cfdc:	pop	{r4, pc}
   1cfe0:	andeq	r2, r2, r7, lsl r6
   1cfe4:	andeq	r2, r2, sp, ror #17
   1cfe8:			; <UNDEFINED> instruction: 0x00022ab3
   1cfec:	andeq	r2, r2, lr, lsr fp

0001cff0 <flatcc_builder_start_vector@@Base>:
   1cff0:	cmp	r2, #4
   1cff4:	push	{r4, r5, r6, r7, r8, lr}
   1cff8:	mov	r7, r1
   1cffc:	movcs	r1, r2
   1d000:	movcc	r1, #4
   1d004:	mov	r5, r0
   1d008:	mov	r6, r3
   1d00c:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1d010:	subs	r4, r0, #0
   1d014:	mvnne	r4, #0
   1d018:	bne	1d040 <flatcc_builder_start_vector@@Base+0x50>
   1d01c:	ldr	r2, [r5, #32]
   1d020:	mov	r3, #4
   1d024:	mvn	r1, #3
   1d028:	mov	r0, r5
   1d02c:	strh	r3, [r2, #14]
   1d030:	str	r7, [r2, #16]
   1d034:	str	r4, [r2, #20]
   1d038:	str	r6, [r2, #24]
   1d03c:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1d040:	mov	r0, r4
   1d044:	pop	{r4, r5, r6, r7, r8, pc}

0001d048 <flatcc_builder_start_offset_vector@@Base>:
   1d048:	push	{r4, r5, r6, lr}
   1d04c:	mov	r1, #4
   1d050:	mov	r5, r0
   1d054:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1d058:	subs	r4, r0, #0
   1d05c:	mvnne	r4, #0
   1d060:	bne	1d088 <flatcc_builder_start_offset_vector@@Base+0x40>
   1d064:	ldr	r3, [r5, #32]
   1d068:	mov	r2, #4
   1d06c:	mvn	r1, #3
   1d070:	mov	r0, r5
   1d074:	str	r2, [r3, #16]
   1d078:	mov	r2, #5
   1d07c:	strh	r2, [r3, #14]
   1d080:	str	r4, [r3, #20]
   1d084:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1d088:	mov	r0, r4
   1d08c:	pop	{r4, r5, r6, pc}

0001d090 <flatcc_builder_start_string@@Base>:
   1d090:	push	{r4, r5, r6, lr}
   1d094:	mov	r1, #1
   1d098:	mov	r5, r0
   1d09c:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1d0a0:	subs	r4, r0, #0
   1d0a4:	mvnne	r4, #0
   1d0a8:	bne	1d0d0 <flatcc_builder_start_string@@Base+0x40>
   1d0ac:	ldr	r3, [r5, #32]
   1d0b0:	mov	r2, #1
   1d0b4:	mvn	r1, #3
   1d0b8:	mov	r0, r5
   1d0bc:	str	r2, [r3, #16]
   1d0c0:	mov	r2, #6
   1d0c4:	strh	r2, [r3, #14]
   1d0c8:	str	r4, [r3, #20]
   1d0cc:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1d0d0:	mov	r0, r4
   1d0d4:	pop	{r4, r5, r6, pc}

0001d0d8 <flatcc_builder_reserve_table@@Base>:
   1d0d8:	cmp	r1, #0
   1d0dc:	bge	1d0f8 <flatcc_builder_reserve_table@@Base+0x20>
   1d0e0:	push	{r4, lr}
   1d0e4:	movw	r2, #1065	; 0x429
   1d0e8:	ldr	r3, [pc, #12]	; 1d0fc <flatcc_builder_reserve_table@@Base+0x24>
   1d0ec:	ldr	r1, [pc, #12]	; 1d100 <flatcc_builder_reserve_table@@Base+0x28>
   1d0f0:	ldr	r0, [pc, #12]	; 1d104 <flatcc_builder_reserve_table@@Base+0x2c>
   1d0f4:	bl	12684 <__assert_fail@plt>
   1d0f8:	b	1bdf0 <flatcc_builder_default_alloc@@Base+0x240>
   1d0fc:	andeq	r2, r2, r6, lsr r6
   1d100:	andeq	r2, r2, sp, ror #17
   1d104:	andeq	r2, r2, r6, ror fp

0001d108 <flatcc_builder_start_table@@Base>:
   1d108:	push	{r4, r5, r6, lr}
   1d10c:	mov	r5, r1
   1d110:	mov	r1, #4
   1d114:	mov	r4, r0
   1d118:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1d11c:	cmp	r0, #0
   1d120:	beq	1d130 <flatcc_builder_start_table@@Base+0x28>
   1d124:	mvn	r5, #0
   1d128:	mov	r0, r5
   1d12c:	pop	{r4, r5, r6, pc}
   1d130:	ldr	r2, [r4, #4]
   1d134:	ldr	r3, [r4, #32]
   1d138:	ldr	r1, [r4, #52]	; 0x34
   1d13c:	sub	r2, r2, r1
   1d140:	ldr	r1, [r4, #76]	; 0x4c
   1d144:	str	r2, [r3, #16]
   1d148:	ldr	r2, [r4]
   1d14c:	sub	r2, r2, r1
   1d150:	mov	r1, r5
   1d154:	str	r2, [r3, #20]
   1d158:	ldr	r2, [r4, #12]
   1d15c:	str	r2, [r3, #24]
   1d160:	ldrh	r2, [r4, #8]
   1d164:	strh	r2, [r3, #28]
   1d168:	ldr	r2, [pc, #44]	; 1d19c <flatcc_builder_start_table@@Base+0x94>
   1d16c:	strh	r0, [r4, #8]
   1d170:	mov	r0, r4
   1d174:	str	r2, [r4, #12]
   1d178:	mov	r2, #3
   1d17c:	strh	r2, [r3, #14]
   1d180:	bl	1bdf0 <flatcc_builder_default_alloc@@Base+0x240>
   1d184:	subs	r5, r0, #0
   1d188:	bne	1d124 <flatcc_builder_start_table@@Base+0x1c>
   1d18c:	movw	r1, #65532	; 0xfffc
   1d190:	mov	r0, r4
   1d194:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1d198:	b	1d128 <flatcc_builder_start_table@@Base+0x20>
   1d19c:	svccs	0x00693b52

0001d1a0 <flatcc_builder_create_vtable@@Base>:
   1d1a0:	mov	r3, #0
   1d1a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d1a8:	sub	sp, sp, #76	; 0x4c
   1d1ac:	cmp	r2, #0
   1d1b0:	str	r3, [sp]
   1d1b4:	str	r3, [sp, #4]
   1d1b8:	movne	r3, #1
   1d1bc:	strne	r1, [sp, #8]
   1d1c0:	mov	r1, sp
   1d1c4:	strdne	r2, [sp]
   1d1c8:	ldr	r3, [r0, #152]	; 0x98
   1d1cc:	strne	r2, [sp, #12]
   1d1d0:	cmp	r3, #0
   1d1d4:	bne	1d1f0 <flatcc_builder_create_vtable@@Base+0x50>
   1d1d8:	ldr	r3, [r0, #180]	; 0xb4
   1d1dc:	cmp	r3, #0
   1d1e0:	bne	1d1f0 <flatcc_builder_create_vtable@@Base+0x50>
   1d1e4:	bl	1be74 <flatcc_builder_default_alloc@@Base+0x2c4>
   1d1e8:	add	sp, sp, #76	; 0x4c
   1d1ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1f0:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1d1f4:	cmp	r0, #0
   1d1f8:	addne	r0, r0, #1
   1d1fc:	b	1d1e8 <flatcc_builder_create_vtable@@Base+0x48>

0001d200 <flatcc_builder_create_cached_vtable@@Base>:
   1d200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d204:	mov	r6, r3
   1d208:	sub	sp, sp, #20
   1d20c:	mov	r4, r0
   1d210:	mov	sl, r1
   1d214:	mov	r7, r2
   1d218:	ldr	r3, [r0, #116]	; 0x74
   1d21c:	cmp	r3, #0
   1d220:	bne	1d2c8 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1d224:	ldr	r5, [r0, #124]	; 0x7c
   1d228:	add	r9, r0, #92	; 0x5c
   1d22c:	cmp	r5, #0
   1d230:	beq	1d248 <flatcc_builder_create_cached_vtable@@Base+0x48>
   1d234:	ldr	r3, [pc, #560]	; 1d46c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   1d238:	movw	r2, #342	; 0x156
   1d23c:	ldr	r1, [pc, #556]	; 1d470 <flatcc_builder_create_cached_vtable@@Base+0x270>
   1d240:	ldr	r0, [pc, #556]	; 1d474 <flatcc_builder_create_cached_vtable@@Base+0x274>
   1d244:	bl	12684 <__assert_fail@plt>
   1d248:	mov	r3, #16
   1d24c:	mov	r2, r5
   1d250:	str	r5, [sp]
   1d254:	mov	r1, #6
   1d258:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1d25c:	cmp	r0, #0
   1d260:	bne	1d270 <flatcc_builder_create_cached_vtable@@Base+0x70>
   1d264:	mov	r0, #0
   1d268:	add	sp, sp, #20
   1d26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d270:	mov	r3, #16
   1d274:	mov	r1, r9
   1d278:	ldr	r0, [r4, #40]	; 0x28
   1d27c:	mov	r2, #256	; 0x100
   1d280:	str	r3, [r4, #124]	; 0x7c
   1d284:	mov	r3, #5
   1d288:	ldr	r8, [r4, #48]	; 0x30
   1d28c:	str	r3, [sp]
   1d290:	mov	r3, #1
   1d294:	blx	r8
   1d298:	cmp	r0, #0
   1d29c:	moveq	r3, #256	; 0x100
   1d2a0:	ldreq	r1, [r4, #96]	; 0x60
   1d2a4:	bne	1d264 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1d2a8:	lsl	r2, r3, #1
   1d2ac:	cmp	r2, r1
   1d2b0:	bls	1d388 <flatcc_builder_create_cached_vtable@@Base+0x188>
   1d2b4:	lsr	r3, r3, #2
   1d2b8:	mov	r2, #1
   1d2bc:	cmp	r3, r2, lsl r5
   1d2c0:	bhi	1d390 <flatcc_builder_create_cached_vtable@@Base+0x190>
   1d2c4:	str	r5, [r4, #116]	; 0x74
   1d2c8:	ldr	r8, [r4, #92]	; 0x5c
   1d2cc:	ldr	r3, [r4, #116]	; 0x74
   1d2d0:	rsb	r3, r3, #32
   1d2d4:	lsr	r6, r6, r3
   1d2d8:	adds	r3, r8, r6, lsl #2
   1d2dc:	ldrne	r9, [r8, r6, lsl #2]
   1d2e0:	movne	fp, #0
   1d2e4:	str	r3, [sp, #8]
   1d2e8:	beq	1d264 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1d2ec:	cmp	r9, #0
   1d2f0:	bne	1d398 <flatcc_builder_create_cached_vtable@@Base+0x198>
   1d2f4:	mov	r3, #16
   1d2f8:	mov	r1, #6
   1d2fc:	ldr	r2, [r4, #124]	; 0x7c
   1d300:	mov	r0, r4
   1d304:	str	r9, [sp]
   1d308:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1d30c:	subs	r5, r0, #0
   1d310:	beq	1d264 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1d314:	ldr	r3, [r4, #124]	; 0x7c
   1d318:	mov	r1, sl
   1d31c:	mov	r0, r4
   1d320:	add	r2, r3, #16
   1d324:	str	r2, [r4, #124]	; 0x7c
   1d328:	ldr	r2, [r4, #152]	; 0x98
   1d32c:	str	r2, [r5, #4]
   1d330:	ldr	r2, [r8, r6, lsl #2]
   1d334:	str	r2, [r5, #12]
   1d338:	mov	r2, r7
   1d33c:	str	r3, [r8, r6, lsl #2]
   1d340:	bl	1d1a0 <flatcc_builder_create_vtable@@Base>
   1d344:	cmp	r0, #0
   1d348:	str	r0, [r5]
   1d34c:	beq	1d264 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1d350:	cmp	fp, #0
   1d354:	ldrne	r3, [fp, #8]
   1d358:	strne	r3, [r5, #8]
   1d35c:	bne	1d420 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1d360:	ldr	r2, [r4, #120]	; 0x78
   1d364:	ldr	r3, [r4, #172]	; 0xac
   1d368:	cmp	r3, #0
   1d36c:	beq	1d428 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1d370:	add	r1, r7, r2
   1d374:	cmp	r3, r1
   1d378:	bcs	1d428 <flatcc_builder_create_cached_vtable@@Base+0x228>
   1d37c:	mov	r0, r4
   1d380:	bl	1c1b4 <flatcc_builder_flush_vtable_cache@@Base>
   1d384:	b	1d420 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1d388:	mov	r3, r2
   1d38c:	b	1d2a8 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   1d390:	add	r5, r5, #1
   1d394:	b	1d2bc <flatcc_builder_create_cached_vtable@@Base+0xbc>
   1d398:	ldr	r0, [r4, #68]	; 0x44
   1d39c:	str	r3, [sp, #12]
   1d3a0:	ldr	r5, [r4, #100]	; 0x64
   1d3a4:	add	r5, r5, r9
   1d3a8:	ldr	r2, [r5, #8]
   1d3ac:	add	r1, r0, r2
   1d3b0:	ldrh	r2, [r0, r2]
   1d3b4:	cmp	r2, r7
   1d3b8:	bne	1d3d4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   1d3bc:	mov	r2, r7
   1d3c0:	mov	r0, sl
   1d3c4:	bl	125a0 <memcmp@plt>
   1d3c8:	cmp	r0, #0
   1d3cc:	ldr	r3, [sp, #12]
   1d3d0:	beq	1d3e0 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1d3d4:	add	r3, r5, #12
   1d3d8:	ldr	r9, [r5, #12]
   1d3dc:	b	1d2ec <flatcc_builder_create_cached_vtable@@Base+0xec>
   1d3e0:	ldr	r1, [r5, #4]
   1d3e4:	ldr	r2, [r4, #152]	; 0x98
   1d3e8:	cmp	r1, r2
   1d3ec:	beq	1d400 <flatcc_builder_create_cached_vtable@@Base+0x200>
   1d3f0:	add	r3, r5, #12
   1d3f4:	mov	fp, r5
   1d3f8:	ldr	r9, [r5, #12]
   1d3fc:	b	1d2ec <flatcc_builder_create_cached_vtable@@Base+0xec>
   1d400:	ldr	r2, [sp, #8]
   1d404:	cmp	r3, r2
   1d408:	beq	1d420 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1d40c:	ldr	r2, [r5, #12]
   1d410:	str	r2, [r3]
   1d414:	ldr	r3, [r8, r6, lsl #2]
   1d418:	str	r3, [r5, #12]
   1d41c:	str	r9, [r8, r6, lsl #2]
   1d420:	ldr	r0, [r5]
   1d424:	b	1d268 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1d428:	mov	r3, #0
   1d42c:	mov	r1, #2
   1d430:	mov	r0, r4
   1d434:	str	r3, [sp]
   1d438:	mov	r3, r7
   1d43c:	bl	1bca8 <flatcc_builder_default_alloc@@Base+0xf8>
   1d440:	cmp	r0, #0
   1d444:	mvneq	r0, #0
   1d448:	beq	1d268 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1d44c:	ldr	r3, [r4, #120]	; 0x78
   1d450:	mov	r2, r7
   1d454:	mov	r1, sl
   1d458:	str	r3, [r5, #8]
   1d45c:	add	r3, r3, r7
   1d460:	str	r3, [r4, #120]	; 0x78
   1d464:	bl	12588 <memcpy@plt>
   1d468:	b	1d420 <flatcc_builder_create_cached_vtable@@Base+0x220>
   1d46c:	andeq	r2, r2, r3, asr r6
   1d470:	andeq	r2, r2, sp, ror #17
   1d474:	andeq	r2, r2, r0, ror #22

0001d478 <flatcc_builder_create_table@@Base>:
   1d478:	push	{r4, r5, r6, r7, lr}
   1d47c:	sub	sp, sp, #84	; 0x54
   1d480:	ldr	r4, [sp, #108]	; 0x6c
   1d484:	ldr	ip, [sp, #112]	; 0x70
   1d488:	cmp	r4, #0
   1d48c:	bge	1d4a4 <flatcc_builder_create_table@@Base+0x2c>
   1d490:	ldr	r3, [pc, #276]	; 1d5ac <flatcc_builder_create_table@@Base+0x134>
   1d494:	movw	r2, #1237	; 0x4d5
   1d498:	ldr	r1, [pc, #272]	; 1d5b0 <flatcc_builder_create_table@@Base+0x138>
   1d49c:	ldr	r0, [pc, #272]	; 1d5b4 <flatcc_builder_create_table@@Base+0x13c>
   1d4a0:	bl	12684 <__assert_fail@plt>
   1d4a4:	tst	ip, #1
   1d4a8:	bne	1d4c0 <flatcc_builder_create_table@@Base+0x48>
   1d4ac:	ldr	r3, [pc, #248]	; 1d5ac <flatcc_builder_create_table@@Base+0x134>
   1d4b0:	movw	r2, #1243	; 0x4db
   1d4b4:	ldr	r1, [pc, #244]	; 1d5b0 <flatcc_builder_create_table@@Base+0x138>
   1d4b8:	ldr	r0, [pc, #248]	; 1d5b8 <flatcc_builder_create_table@@Base+0x140>
   1d4bc:	b	1d4a0 <flatcc_builder_create_table@@Base+0x28>
   1d4c0:	cmp	r3, #4
   1d4c4:	sub	ip, ip, #1
   1d4c8:	movcs	lr, r3
   1d4cc:	ldrh	r3, [r0, #128]	; 0x80
   1d4d0:	movcc	lr, #4
   1d4d4:	cmp	r3, lr
   1d4d8:	ldr	r3, [r0, #136]	; 0x88
   1d4dc:	strhcc	lr, [r0, #128]	; 0x80
   1d4e0:	sub	lr, lr, #1
   1d4e4:	sub	r5, r3, r2
   1d4e8:	sub	r3, r5, #4
   1d4ec:	and	lr, lr, r5
   1d4f0:	sub	ip, r3, ip
   1d4f4:	sub	r3, lr, r3
   1d4f8:	sub	ip, ip, lr
   1d4fc:	sub	r3, r3, #4
   1d500:	str	ip, [sp, #4]
   1d504:	ldr	ip, [sp, #104]	; 0x68
   1d508:	add	r4, ip, r4, lsl #1
   1d50c:	cmp	r4, ip
   1d510:	bne	1d594 <flatcc_builder_create_table@@Base+0x11c>
   1d514:	mov	r3, #4
   1d518:	cmp	r2, #0
   1d51c:	add	ip, sp, r3
   1d520:	str	r3, [sp, #8]
   1d524:	str	ip, [sp, #16]
   1d528:	str	r3, [sp, #20]
   1d52c:	mov	r3, #1
   1d530:	str	r3, [sp, #12]
   1d534:	beq	1d550 <flatcc_builder_create_table@@Base+0xd8>
   1d538:	add	r3, r2, #4
   1d53c:	str	r3, [sp, #8]
   1d540:	mov	r3, #2
   1d544:	str	r1, [sp, #24]
   1d548:	str	r3, [sp, #12]
   1d54c:	str	r2, [sp, #28]
   1d550:	cmp	lr, #0
   1d554:	beq	1d584 <flatcc_builder_create_table@@Base+0x10c>
   1d558:	ldr	r3, [sp, #8]
   1d55c:	add	r2, sp, #80	; 0x50
   1d560:	ldr	r1, [pc, #84]	; 1d5bc <flatcc_builder_create_table@@Base+0x144>
   1d564:	add	r3, r3, lr
   1d568:	str	r3, [sp, #8]
   1d56c:	ldr	r3, [sp, #12]
   1d570:	add	r3, r3, #1
   1d574:	add	r2, r2, r3, lsl #3
   1d578:	str	r3, [sp, #12]
   1d57c:	str	r1, [r2, #-72]	; 0xffffffb8
   1d580:	str	lr, [r2, #-68]	; 0xffffffbc
   1d584:	add	r1, sp, #8
   1d588:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1d58c:	add	sp, sp, #84	; 0x54
   1d590:	pop	{r4, r5, r6, r7, pc}
   1d594:	ldrh	r5, [ip], #2
   1d598:	ldr	r6, [r1, r5]
   1d59c:	sub	r7, r3, r5
   1d5a0:	add	r6, r6, r7
   1d5a4:	str	r6, [r1, r5]
   1d5a8:	b	1d50c <flatcc_builder_create_table@@Base+0x94>
   1d5ac:	andeq	r2, r2, ip, asr r6
   1d5b0:	andeq	r2, r2, sp, ror #17
   1d5b4:	andeq	r2, r2, pc, ror #22
   1d5b8:	andeq	r2, r2, r1, lsl #23
   1d5bc:	andeq	r2, r2, r7, lsl #4

0001d5c0 <flatcc_builder_check_required_field@@Base>:
   1d5c0:	ldr	r3, [r0, #32]
   1d5c4:	ldrh	r3, [r3, #14]
   1d5c8:	cmp	r3, #3
   1d5cc:	beq	1d5e8 <flatcc_builder_check_required_field@@Base+0x28>
   1d5d0:	push	{r4, lr}
   1d5d4:	movw	r2, #1272	; 0x4f8
   1d5d8:	ldr	r3, [pc, #52]	; 1d614 <flatcc_builder_check_required_field@@Base+0x54>
   1d5dc:	ldr	r1, [pc, #52]	; 1d618 <flatcc_builder_check_required_field@@Base+0x58>
   1d5e0:	ldr	r0, [pc, #52]	; 1d61c <flatcc_builder_check_required_field@@Base+0x5c>
   1d5e4:	bl	12684 <__assert_fail@plt>
   1d5e8:	ldrh	r3, [r0, #8]
   1d5ec:	cmp	r3, r1
   1d5f0:	bls	1d60c <flatcc_builder_check_required_field@@Base+0x4c>
   1d5f4:	ldr	r3, [r0, #4]
   1d5f8:	lsl	r1, r1, #1
   1d5fc:	ldrh	r0, [r3, r1]
   1d600:	adds	r0, r0, #0
   1d604:	movne	r0, #1
   1d608:	bx	lr
   1d60c:	mov	r0, #0
   1d610:	bx	lr
   1d614:	andeq	r2, r2, r8, ror r6
   1d618:	andeq	r2, r2, sp, ror #17
   1d61c:	andeq	r2, r2, ip, lsl #23

0001d620 <flatcc_builder_check_union_field@@Base>:
   1d620:	ldr	r3, [r0, #32]
   1d624:	ldrh	r3, [r3, #14]
   1d628:	cmp	r3, #3
   1d62c:	beq	1d648 <flatcc_builder_check_union_field@@Base+0x28>
   1d630:	push	{r4, lr}
   1d634:	movw	r2, #1279	; 0x4ff
   1d638:	ldr	r3, [pc, #104]	; 1d6a8 <flatcc_builder_check_union_field@@Base+0x88>
   1d63c:	ldr	r1, [pc, #104]	; 1d6ac <flatcc_builder_check_union_field@@Base+0x8c>
   1d640:	ldr	r0, [pc, #104]	; 1d6b0 <flatcc_builder_check_union_field@@Base+0x90>
   1d644:	bl	12684 <__assert_fail@plt>
   1d648:	cmp	r1, #0
   1d64c:	beq	1d6a0 <flatcc_builder_check_union_field@@Base+0x80>
   1d650:	ldrh	r3, [r0, #8]
   1d654:	cmp	r3, r1
   1d658:	bls	1d6a0 <flatcc_builder_check_union_field@@Base+0x80>
   1d65c:	ldr	r3, [r0, #4]
   1d660:	sub	r1, r1, #-2147483647	; 0x80000001
   1d664:	lsl	r1, r1, #1
   1d668:	ldrh	r2, [r3, r1]!
   1d66c:	cmp	r2, #0
   1d670:	ldrh	r1, [r3, #2]
   1d674:	bne	1d684 <flatcc_builder_check_union_field@@Base+0x64>
   1d678:	clz	r0, r1
   1d67c:	lsr	r0, r0, #5
   1d680:	bx	lr
   1d684:	ldr	r3, [r0, #16]
   1d688:	ldrb	r3, [r3, r2]
   1d68c:	cmp	r3, #0
   1d690:	beq	1d678 <flatcc_builder_check_union_field@@Base+0x58>
   1d694:	adds	r0, r1, #0
   1d698:	movne	r0, #1
   1d69c:	bx	lr
   1d6a0:	mov	r0, #0
   1d6a4:	bx	lr
   1d6a8:	muleq	r2, ip, r6
   1d6ac:	andeq	r2, r2, sp, ror #17
   1d6b0:	andeq	r2, r2, ip, lsl #23

0001d6b4 <flatcc_builder_check_required@@Base>:
   1d6b4:	ldr	r3, [r0, #32]
   1d6b8:	push	{r4, lr}
   1d6bc:	ldrh	r3, [r3, #14]
   1d6c0:	cmp	r3, #3
   1d6c4:	beq	1d6dc <flatcc_builder_check_required@@Base+0x28>
   1d6c8:	ldr	r3, [pc, #84]	; 1d724 <flatcc_builder_check_required@@Base+0x70>
   1d6cc:	movw	r2, #1297	; 0x511
   1d6d0:	ldr	r1, [pc, #80]	; 1d728 <flatcc_builder_check_required@@Base+0x74>
   1d6d4:	ldr	r0, [pc, #80]	; 1d72c <flatcc_builder_check_required@@Base+0x78>
   1d6d8:	bl	12684 <__assert_fail@plt>
   1d6dc:	ldrh	r3, [r0, #8]
   1d6e0:	cmp	r3, r2
   1d6e4:	subge	r1, r1, #2
   1d6e8:	movge	ip, #0
   1d6ec:	bge	1d714 <flatcc_builder_check_required@@Base+0x60>
   1d6f0:	mov	r0, #0
   1d6f4:	pop	{r4, pc}
   1d6f8:	ldrh	r3, [r1, #2]!
   1d6fc:	ldr	lr, [r0, #4]
   1d700:	lsl	r3, r3, #1
   1d704:	ldrh	r3, [lr, r3]
   1d708:	cmp	r3, #0
   1d70c:	beq	1d6f0 <flatcc_builder_check_required@@Base+0x3c>
   1d710:	add	ip, ip, #1
   1d714:	cmp	ip, r2
   1d718:	blt	1d6f8 <flatcc_builder_check_required@@Base+0x44>
   1d71c:	mov	r0, #1
   1d720:	pop	{r4, pc}
   1d724:			; <UNDEFINED> instruction: 0x000226bd
   1d728:	andeq	r2, r2, sp, ror #17
   1d72c:	andeq	r2, r2, ip, lsl #23

0001d730 <flatcc_builder_end_table@@Base>:
   1d730:	ldr	r3, [r0, #32]
   1d734:	push	{r4, r5, r6, r7, lr}
   1d738:	sub	sp, sp, #20
   1d73c:	ldrh	r3, [r3, #14]
   1d740:	cmp	r3, #3
   1d744:	beq	1d75c <flatcc_builder_end_table@@Base+0x2c>
   1d748:	ldr	r3, [pc, #260]	; 1d854 <flatcc_builder_end_table@@Base+0x124>
   1d74c:	movw	r2, #1317	; 0x525
   1d750:	ldr	r1, [pc, #256]	; 1d858 <flatcc_builder_end_table@@Base+0x128>
   1d754:	ldr	r0, [pc, #256]	; 1d85c <flatcc_builder_end_table@@Base+0x12c>
   1d758:	bl	12684 <__assert_fail@plt>
   1d75c:	ldrh	r5, [r0, #8]
   1d760:	mov	r4, r0
   1d764:	ldr	r1, [r0, #4]
   1d768:	ldr	r3, [r0, #20]
   1d76c:	add	r5, r5, #2
   1d770:	lsl	r5, r5, #1
   1d774:	sub	r6, r1, #4
   1d778:	uxth	r5, r5
   1d77c:	add	r3, r3, #4
   1d780:	uxth	r2, r3
   1d784:	ldr	r3, [r0, #12]
   1d788:	strh	r5, [r1, #-4]
   1d78c:	strh	r2, [r1, #-2]
   1d790:	ldr	r1, [pc, #200]	; 1d860 <flatcc_builder_end_table@@Base+0x130>
   1d794:	eor	r3, r3, r5
   1d798:	mul	r3, r1, r3
   1d79c:	eor	r3, r3, r2
   1d7a0:	mov	r2, r5
   1d7a4:	mul	r3, r1, r3
   1d7a8:	mov	r1, r6
   1d7ac:	str	r3, [r0, #12]
   1d7b0:	bl	1d200 <flatcc_builder_create_cached_vtable@@Base>
   1d7b4:	subs	r7, r0, #0
   1d7b8:	beq	1d848 <flatcc_builder_end_table@@Base+0x118>
   1d7bc:	mov	r2, r5
   1d7c0:	mov	r1, #0
   1d7c4:	mov	r0, r6
   1d7c8:	bl	12624 <memset@plt>
   1d7cc:	ldr	r3, [r4, #32]
   1d7d0:	mov	r0, r4
   1d7d4:	ldr	r2, [r4, #76]	; 0x4c
   1d7d8:	ldr	r3, [r3, #20]
   1d7dc:	str	r7, [sp, #8]
   1d7e0:	add	r2, r2, r3
   1d7e4:	ldr	r3, [r4]
   1d7e8:	sub	r3, r3, r2
   1d7ec:	asr	r3, r3, #1
   1d7f0:	strd	r2, [sp]
   1d7f4:	ldrh	r3, [r4, #130]	; 0x82
   1d7f8:	ldr	r1, [r4, #16]
   1d7fc:	ldr	r2, [r4, #20]
   1d800:	bl	1d478 <flatcc_builder_create_table@@Base>
   1d804:	subs	r7, r0, #0
   1d808:	beq	1d848 <flatcc_builder_end_table@@Base+0x118>
   1d80c:	ldr	r3, [r4, #32]
   1d810:	mov	r0, r4
   1d814:	ldr	r1, [r3, #16]
   1d818:	ldr	r2, [r3, #24]
   1d81c:	str	r2, [r4, #12]
   1d820:	ldrh	r2, [r3, #28]
   1d824:	ldr	r3, [r3, #20]
   1d828:	strh	r2, [r4, #8]
   1d82c:	ldr	r2, [r4, #52]	; 0x34
   1d830:	add	r2, r2, r1
   1d834:	str	r2, [r4, #4]
   1d838:	ldr	r2, [r4, #76]	; 0x4c
   1d83c:	add	r3, r2, r3
   1d840:	str	r3, [r4]
   1d844:	bl	1baac <test_parse@@Base+0x4ac>
   1d848:	mov	r0, r7
   1d84c:	add	sp, sp, #20
   1d850:	pop	{r4, r5, r6, r7, pc}
   1d854:	ldrdeq	r2, [r2], -fp
   1d858:	andeq	r2, r2, sp, ror #17
   1d85c:	andeq	r2, r2, ip, lsl #23
   1d860:			; <UNDEFINED> instruction: 0x9e3779b1

0001d864 <flatcc_builder_create_vector@@Base>:
   1d864:	push	{lr}		; (str lr, [sp, #-4]!)
   1d868:	sub	sp, sp, #84	; 0x54
   1d86c:	ldr	lr, [sp, #92]	; 0x5c
   1d870:	ldrh	ip, [sp, #88]	; 0x58
   1d874:	cmp	r2, lr
   1d878:	bls	1d890 <flatcc_builder_create_vector@@Base+0x2c>
   1d87c:	ldr	r3, [pc, #184]	; 1d93c <flatcc_builder_create_vector@@Base+0xd8>
   1d880:	movw	r2, #1365	; 0x555
   1d884:	ldr	r1, [pc, #180]	; 1d940 <flatcc_builder_create_vector@@Base+0xdc>
   1d888:	ldr	r0, [pc, #180]	; 1d944 <flatcc_builder_create_vector@@Base+0xe0>
   1d88c:	bl	12684 <__assert_fail@plt>
   1d890:	ldrh	lr, [r0, #128]	; 0x80
   1d894:	mul	r3, r3, r2
   1d898:	cmp	ip, #4
   1d89c:	str	r2, [sp, #4]
   1d8a0:	movcc	ip, #4
   1d8a4:	ldr	r2, [r0, #136]	; 0x88
   1d8a8:	cmp	lr, ip
   1d8ac:	sub	r2, r2, r3
   1d8b0:	strhcc	ip, [r0, #128]	; 0x80
   1d8b4:	sub	ip, ip, #1
   1d8b8:	and	ip, ip, r2
   1d8bc:	mov	r2, #4
   1d8c0:	add	lr, sp, r2
   1d8c4:	cmp	r3, #0
   1d8c8:	str	r2, [sp, #8]
   1d8cc:	str	lr, [sp, #16]
   1d8d0:	str	r2, [sp, #20]
   1d8d4:	mov	r2, #1
   1d8d8:	str	r2, [sp, #12]
   1d8dc:	beq	1d8f8 <flatcc_builder_create_vector@@Base+0x94>
   1d8e0:	add	r2, r3, #4
   1d8e4:	str	r3, [sp, #28]
   1d8e8:	mov	r3, #2
   1d8ec:	str	r2, [sp, #8]
   1d8f0:	str	r3, [sp, #12]
   1d8f4:	str	r1, [sp, #24]
   1d8f8:	cmp	ip, #0
   1d8fc:	beq	1d92c <flatcc_builder_create_vector@@Base+0xc8>
   1d900:	ldr	r3, [sp, #8]
   1d904:	add	r2, sp, #80	; 0x50
   1d908:	ldr	r1, [pc, #56]	; 1d948 <flatcc_builder_create_vector@@Base+0xe4>
   1d90c:	add	r3, r3, ip
   1d910:	str	r3, [sp, #8]
   1d914:	ldr	r3, [sp, #12]
   1d918:	add	r3, r3, #1
   1d91c:	add	r2, r2, r3, lsl #3
   1d920:	str	r3, [sp, #12]
   1d924:	str	r1, [r2, #-72]	; 0xffffffb8
   1d928:	str	ip, [r2, #-68]	; 0xffffffbc
   1d92c:	add	r1, sp, #8
   1d930:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1d934:	add	sp, sp, #84	; 0x54
   1d938:	pop	{pc}		; (ldr pc, [sp], #4)
   1d93c:	strdeq	r2, [r2], -r4
   1d940:	andeq	r2, r2, sp, ror #17
   1d944:			; <UNDEFINED> instruction: 0x00022bb7
   1d948:	andeq	r2, r2, r7, lsl #4

0001d94c <flatcc_builder_end_vector@@Base>:
   1d94c:	push	{r0, r1, r2, r4, r5, lr}
   1d950:	ldr	r2, [r0, #32]
   1d954:	ldrh	r3, [r2, #14]
   1d958:	cmp	r3, #4
   1d95c:	beq	1d974 <flatcc_builder_end_vector@@Base+0x28>
   1d960:	ldr	r3, [pc, #76]	; 1d9b4 <flatcc_builder_end_vector@@Base+0x68>
   1d964:	movw	r2, #1400	; 0x578
   1d968:	ldr	r1, [pc, #72]	; 1d9b8 <flatcc_builder_end_vector@@Base+0x6c>
   1d96c:	ldr	r0, [pc, #72]	; 1d9bc <flatcc_builder_end_vector@@Base+0x70>
   1d970:	bl	12684 <__assert_fail@plt>
   1d974:	ldr	r3, [r2, #24]
   1d978:	mov	r4, r0
   1d97c:	str	r3, [sp, #4]
   1d980:	ldrh	r3, [r0, #130]	; 0x82
   1d984:	str	r3, [sp]
   1d988:	ldr	r3, [r2, #16]
   1d98c:	ldr	r1, [r0, #16]
   1d990:	ldr	r2, [r2, #20]
   1d994:	bl	1d864 <flatcc_builder_create_vector@@Base>
   1d998:	subs	r5, r0, #0
   1d99c:	beq	1d9a8 <flatcc_builder_end_vector@@Base+0x5c>
   1d9a0:	mov	r0, r4
   1d9a4:	bl	1baac <test_parse@@Base+0x4ac>
   1d9a8:	mov	r0, r5
   1d9ac:	add	sp, sp, #12
   1d9b0:	pop	{r4, r5, pc}
   1d9b4:	andeq	r2, r2, r1, lsl r7
   1d9b8:	andeq	r2, r2, sp, ror #17
   1d9bc:	andeq	r2, r2, r7, lsl sl

0001d9c0 <flatcc_builder_vector_count@@Base>:
   1d9c0:	ldr	r3, [r0, #32]
   1d9c4:	ldr	r0, [r3, #20]
   1d9c8:	bx	lr

0001d9cc <flatcc_builder_vector_edit@@Base>:
   1d9cc:	ldr	r0, [r0, #16]
   1d9d0:	bx	lr

0001d9d4 <flatcc_builder_create_offset_vector_direct@@Base>:
   1d9d4:	cmn	r2, #-1073741823	; 0xc0000001
   1d9d8:	bhi	1d9e4 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   1d9dc:	mov	r3, #0
   1d9e0:	b	1c05c <flatcc_builder_default_alloc@@Base+0x4ac>
   1d9e4:	mov	r0, #0
   1d9e8:	bx	lr

0001d9ec <flatcc_builder_end_offset_vector@@Base>:
   1d9ec:	ldr	r3, [r0, #32]
   1d9f0:	push	{r4, r5, r6, lr}
   1d9f4:	ldrh	r2, [r3, #14]
   1d9f8:	cmp	r2, #5
   1d9fc:	beq	1da14 <flatcc_builder_end_offset_vector@@Base+0x28>
   1da00:	ldr	r3, [pc, #52]	; 1da3c <flatcc_builder_end_offset_vector@@Base+0x50>
   1da04:	movw	r2, #1480	; 0x5c8
   1da08:	ldr	r1, [pc, #48]	; 1da40 <flatcc_builder_end_offset_vector@@Base+0x54>
   1da0c:	ldr	r0, [pc, #48]	; 1da44 <flatcc_builder_end_offset_vector@@Base+0x58>
   1da10:	bl	12684 <__assert_fail@plt>
   1da14:	ldr	r1, [r0, #16]
   1da18:	mov	r4, r0
   1da1c:	ldr	r2, [r3, #20]
   1da20:	bl	1d9d4 <flatcc_builder_create_offset_vector_direct@@Base>
   1da24:	subs	r5, r0, #0
   1da28:	beq	1da34 <flatcc_builder_end_offset_vector@@Base+0x48>
   1da2c:	mov	r0, r4
   1da30:	bl	1baac <test_parse@@Base+0x4ac>
   1da34:	mov	r0, r5
   1da38:	pop	{r4, r5, r6, pc}
   1da3c:	andeq	r2, r2, fp, lsr #14
   1da40:	andeq	r2, r2, sp, ror #17
   1da44:	andeq	r2, r2, r0, lsl #21

0001da48 <flatcc_builder_create_offset_vector@@Base>:
   1da48:	push	{r4, r5, r6, lr}
   1da4c:	mov	r4, r0
   1da50:	mov	r6, r1
   1da54:	mov	r5, r2
   1da58:	bl	1d048 <flatcc_builder_start_offset_vector@@Base>
   1da5c:	cmp	r0, #0
   1da60:	bne	1da90 <flatcc_builder_create_offset_vector@@Base+0x48>
   1da64:	mov	r1, r5
   1da68:	mov	r0, r4
   1da6c:	bl	1cc58 <flatcc_builder_extend_offset_vector@@Base>
   1da70:	cmp	r0, #0
   1da74:	beq	1da90 <flatcc_builder_create_offset_vector@@Base+0x48>
   1da78:	lsl	r2, r5, #2
   1da7c:	mov	r1, r6
   1da80:	bl	12588 <memcpy@plt>
   1da84:	mov	r0, r4
   1da88:	pop	{r4, r5, r6, lr}
   1da8c:	b	1d9ec <flatcc_builder_end_offset_vector@@Base>
   1da90:	mov	r0, #0
   1da94:	pop	{r4, r5, r6, pc}

0001da98 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1da98:	ldr	r2, [r0, #32]
   1da9c:	mov	r3, r1
   1daa0:	push	{r4, r5, r6, lr}
   1daa4:	ldrh	r1, [r2, #14]
   1daa8:	cmp	r1, #5
   1daac:	beq	1dac4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   1dab0:	ldr	r3, [pc, #64]	; 1daf8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   1dab4:	movw	r2, #1493	; 0x5d5
   1dab8:	ldr	r1, [pc, #60]	; 1dafc <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   1dabc:	ldr	r0, [pc, #60]	; 1db00 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   1dac0:	bl	12684 <__assert_fail@plt>
   1dac4:	ldr	r2, [r2, #20]
   1dac8:	cmn	r2, #-1073741823	; 0xc0000001
   1dacc:	movhi	r5, #0
   1dad0:	bhi	1daf0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1dad4:	ldr	r1, [r0, #16]
   1dad8:	mov	r4, r0
   1dadc:	bl	1c05c <flatcc_builder_default_alloc@@Base+0x4ac>
   1dae0:	subs	r5, r0, #0
   1dae4:	beq	1daf0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   1dae8:	mov	r0, r4
   1daec:	bl	1baac <test_parse@@Base+0x4ac>
   1daf0:	mov	r0, r5
   1daf4:	pop	{r4, r5, r6, pc}
   1daf8:	andeq	r2, r2, ip, asr #14
   1dafc:	andeq	r2, r2, sp, ror #17
   1db00:	andeq	r2, r2, r0, lsl #21

0001db04 <flatcc_builder_offset_vector_edit@@Base>:
   1db04:	ldr	r0, [r0, #16]
   1db08:	bx	lr

0001db0c <flatcc_builder_offset_vector_count@@Base>:
   1db0c:	ldr	r3, [r0, #32]
   1db10:	ldr	r0, [r3, #20]
   1db14:	bx	lr

0001db18 <flatcc_builder_create_union_vector_direct@@Base>:
   1db18:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1db1c:	mov	r4, r0
   1db20:	ldr	r5, [sp, #32]
   1db24:	cmn	r5, #-1073741823	; 0xc0000001
   1db28:	bls	1db44 <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   1db2c:	mov	r3, #0
   1db30:	str	r3, [r4]
   1db34:	str	r3, [r4, #4]
   1db38:	mov	r0, r4
   1db3c:	add	sp, sp, #8
   1db40:	pop	{r4, r5, r6, r7, r8, pc}
   1db44:	mov	r7, r1
   1db48:	mov	r8, r2
   1db4c:	mov	r1, r3
   1db50:	mov	r0, r7
   1db54:	mov	r3, r2
   1db58:	mov	r2, r5
   1db5c:	bl	1c05c <flatcc_builder_default_alloc@@Base+0x4ac>
   1db60:	subs	r6, r0, #0
   1db64:	beq	1db2c <flatcc_builder_create_union_vector_direct@@Base+0x14>
   1db68:	mvn	r3, #0
   1db6c:	mov	r2, r5
   1db70:	mov	r1, r8
   1db74:	mov	r0, r7
   1db78:	str	r3, [sp, #4]
   1db7c:	mov	r3, #1
   1db80:	str	r3, [sp]
   1db84:	bl	1d864 <flatcc_builder_create_vector@@Base>
   1db88:	stm	r4, {r0, r6}
   1db8c:	b	1db38 <flatcc_builder_create_union_vector_direct@@Base+0x20>

0001db90 <flatcc_builder_create_union_vector@@Base>:
   1db90:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1db94:	mov	r6, r0
   1db98:	mov	r0, r1
   1db9c:	mov	r5, r1
   1dba0:	mov	r8, r2
   1dba4:	mov	r7, r3
   1dba8:	bl	1d048 <flatcc_builder_start_offset_vector@@Base>
   1dbac:	subs	r4, r0, #0
   1dbb0:	beq	1dbcc <flatcc_builder_create_union_vector@@Base+0x3c>
   1dbb4:	mov	r3, #0
   1dbb8:	str	r3, [r6]
   1dbbc:	str	r3, [r6, #4]
   1dbc0:	mov	r0, r6
   1dbc4:	add	sp, sp, #16
   1dbc8:	pop	{r4, r5, r6, r7, r8, pc}
   1dbcc:	mov	r1, r7
   1dbd0:	mov	r0, r5
   1dbd4:	bl	1cc58 <flatcc_builder_extend_offset_vector@@Base>
   1dbd8:	cmp	r0, #0
   1dbdc:	beq	1dbb4 <flatcc_builder_create_union_vector@@Base+0x24>
   1dbe0:	mov	r1, r7
   1dbe4:	mov	r0, r5
   1dbe8:	bl	1ba64 <test_parse@@Base+0x464>
   1dbec:	subs	r2, r0, #0
   1dbf0:	movne	r1, r4
   1dbf4:	addne	r0, r8, #4
   1dbf8:	ldrne	r3, [r5, #16]
   1dbfc:	beq	1dbb4 <flatcc_builder_create_union_vector@@Base+0x24>
   1dc00:	cmp	r1, r7
   1dc04:	bne	1dc34 <flatcc_builder_create_union_vector@@Base+0xa4>
   1dc08:	add	r0, sp, #8
   1dc0c:	str	r1, [sp]
   1dc10:	mov	r1, r5
   1dc14:	bl	1db18 <flatcc_builder_create_union_vector_direct@@Base>
   1dc18:	ldr	r7, [sp, #8]
   1dc1c:	mov	r0, r5
   1dc20:	ldr	r4, [sp, #12]
   1dc24:	bl	1baac <test_parse@@Base+0x4ac>
   1dc28:	str	r7, [r6]
   1dc2c:	str	r4, [r6, #4]
   1dc30:	b	1dbc0 <flatcc_builder_create_union_vector@@Base+0x30>
   1dc34:	ldrb	ip, [r8, r1, lsl #3]
   1dc38:	strb	ip, [r2, r1]
   1dc3c:	ldr	ip, [r0, r1, lsl #3]
   1dc40:	str	ip, [r3, r1, lsl #2]
   1dc44:	add	r1, r1, #1
   1dc48:	b	1dc00 <flatcc_builder_create_union_vector@@Base+0x70>

0001dc4c <flatcc_builder_start_union_vector@@Base>:
   1dc4c:	push	{r4, r5, r6, lr}
   1dc50:	mov	r1, #4
   1dc54:	mov	r5, r0
   1dc58:	bl	1bd18 <flatcc_builder_default_alloc@@Base+0x168>
   1dc5c:	subs	r4, r0, #0
   1dc60:	mvnne	r4, #0
   1dc64:	bne	1dc8c <flatcc_builder_start_union_vector@@Base+0x40>
   1dc68:	ldr	r3, [r5, #32]
   1dc6c:	mov	r2, #8
   1dc70:	mvn	r1, #3
   1dc74:	mov	r0, r5
   1dc78:	str	r2, [r3, #16]
   1dc7c:	mov	r2, #7
   1dc80:	strh	r2, [r3, #14]
   1dc84:	str	r4, [r3, #20]
   1dc88:	bl	1b9e8 <test_parse@@Base+0x3e8>
   1dc8c:	mov	r0, r4
   1dc90:	pop	{r4, r5, r6, pc}

0001dc94 <flatcc_builder_end_union_vector@@Base>:
   1dc94:	ldr	r3, [r1, #32]
   1dc98:	push	{r4, r5, r6, r7, lr}
   1dc9c:	sub	sp, sp, #20
   1dca0:	ldrh	r2, [r3, #14]
   1dca4:	cmp	r2, #7
   1dca8:	beq	1dcc0 <flatcc_builder_end_union_vector@@Base+0x2c>
   1dcac:	ldr	r3, [pc, #156]	; 1dd50 <flatcc_builder_end_union_vector@@Base+0xbc>
   1dcb0:	movw	r2, #1617	; 0x651
   1dcb4:	ldr	r1, [pc, #152]	; 1dd54 <flatcc_builder_end_union_vector@@Base+0xc0>
   1dcb8:	ldr	r0, [pc, #152]	; 1dd58 <flatcc_builder_end_union_vector@@Base+0xc4>
   1dcbc:	bl	12684 <__assert_fail@plt>
   1dcc0:	ldr	r7, [r3, #20]
   1dcc4:	mov	r4, r0
   1dcc8:	mov	r5, r1
   1dccc:	mov	r0, r1
   1dcd0:	lsl	r6, r7, #2
   1dcd4:	add	r1, r6, r7
   1dcd8:	bl	1ba64 <test_parse@@Base+0x464>
   1dcdc:	subs	r3, r0, #0
   1dce0:	streq	r3, [r4]
   1dce4:	streq	r3, [r4, #4]
   1dce8:	beq	1dd2c <flatcc_builder_end_union_vector@@Base+0x98>
   1dcec:	ldr	r0, [r5, #16]
   1dcf0:	add	r2, r3, r6
   1dcf4:	mov	r1, #0
   1dcf8:	add	ip, r0, #4
   1dcfc:	cmp	r1, r7
   1dd00:	bne	1dd38 <flatcc_builder_end_union_vector@@Base+0xa4>
   1dd04:	add	r0, sp, #8
   1dd08:	str	r1, [sp]
   1dd0c:	mov	r1, r5
   1dd10:	bl	1db18 <flatcc_builder_create_union_vector_direct@@Base>
   1dd14:	ldr	r7, [sp, #8]
   1dd18:	mov	r0, r5
   1dd1c:	ldr	r6, [sp, #12]
   1dd20:	bl	1baac <test_parse@@Base+0x4ac>
   1dd24:	str	r7, [r4]
   1dd28:	str	r6, [r4, #4]
   1dd2c:	mov	r0, r4
   1dd30:	add	sp, sp, #20
   1dd34:	pop	{r4, r5, r6, r7, pc}
   1dd38:	ldrb	lr, [r0, r1, lsl #3]
   1dd3c:	strb	lr, [r2, r1]
   1dd40:	ldr	lr, [ip, r1, lsl #3]
   1dd44:	str	lr, [r3, r1, lsl #2]
   1dd48:	add	r1, r1, #1
   1dd4c:	b	1dcfc <flatcc_builder_end_union_vector@@Base+0x68>
   1dd50:	andeq	r2, r2, r8, ror r7
   1dd54:	andeq	r2, r2, sp, ror #17
   1dd58:	andeq	r2, r2, sl, asr #23

0001dd5c <flatcc_builder_union_vector_edit@@Base>:
   1dd5c:	ldr	r0, [r0, #16]
   1dd60:	bx	lr

0001dd64 <flatcc_builder_union_vector_count@@Base>:
   1dd64:	ldr	r3, [r0, #32]
   1dd68:	ldr	r0, [r3, #20]
   1dd6c:	bx	lr

0001dd70 <flatcc_builder_extend_union_vector@@Base>:
   1dd70:	push	{r4, r5, r6, lr}
   1dd74:	mvn	r2, #-536870912	; 0xe0000000
   1dd78:	mov	r4, r0
   1dd7c:	mov	r5, r1
   1dd80:	ldr	r0, [r0, #32]
   1dd84:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1dd88:	cmp	r0, #0
   1dd8c:	bne	1dda0 <flatcc_builder_extend_union_vector@@Base+0x30>
   1dd90:	lsl	r1, r5, #3
   1dd94:	mov	r0, r4
   1dd98:	pop	{r4, r5, r6, lr}
   1dd9c:	b	1ba64 <test_parse@@Base+0x464>
   1dda0:	mov	r0, #0
   1dda4:	pop	{r4, r5, r6, pc}

0001dda8 <flatcc_builder_truncate_union_vector@@Base>:
   1dda8:	ldr	r3, [r0, #32]
   1ddac:	push	{r4, lr}
   1ddb0:	ldrh	r2, [r3, #14]
   1ddb4:	cmp	r2, #7
   1ddb8:	beq	1ddd0 <flatcc_builder_truncate_union_vector@@Base+0x28>
   1ddbc:	ldr	r3, [pc, #72]	; 1de0c <flatcc_builder_truncate_union_vector@@Base+0x64>
   1ddc0:	movw	r2, #1665	; 0x681
   1ddc4:	ldr	r1, [pc, #68]	; 1de10 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1ddc8:	ldr	r0, [pc, #68]	; 1de14 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   1ddcc:	bl	12684 <__assert_fail@plt>
   1ddd0:	ldr	r2, [r3, #20]
   1ddd4:	cmp	r2, r1
   1ddd8:	bcs	1ddf0 <flatcc_builder_truncate_union_vector@@Base+0x48>
   1dddc:	ldr	r3, [pc, #40]	; 1de0c <flatcc_builder_truncate_union_vector@@Base+0x64>
   1dde0:	movw	r2, #1666	; 0x682
   1dde4:	ldr	r1, [pc, #36]	; 1de10 <flatcc_builder_truncate_union_vector@@Base+0x68>
   1dde8:	ldr	r0, [pc, #40]	; 1de18 <flatcc_builder_truncate_union_vector@@Base+0x70>
   1ddec:	b	1ddcc <flatcc_builder_truncate_union_vector@@Base+0x24>
   1ddf0:	sub	r2, r2, r1
   1ddf4:	str	r2, [r3, #20]
   1ddf8:	ldr	r3, [r3, #16]
   1ddfc:	mul	r1, r3, r1
   1de00:	bl	1bb14 <test_parse@@Base+0x514>
   1de04:	mov	r0, #0
   1de08:	pop	{r4, pc}
   1de0c:	muleq	r2, r8, r7
   1de10:	andeq	r2, r2, sp, ror #17
   1de14:	andeq	r2, r2, sl, asr #23
   1de18:	andeq	r2, r2, r3, lsl #22

0001de1c <flatcc_builder_union_vector_push@@Base>:
   1de1c:	push	{r0, r1, r4, lr}
   1de20:	mov	r4, sp
   1de24:	stm	r4, {r1, r2}
   1de28:	ldr	r2, [r0, #32]
   1de2c:	ldrh	r3, [r2, #14]
   1de30:	cmp	r3, #7
   1de34:	beq	1de4c <flatcc_builder_union_vector_push@@Base+0x30>
   1de38:	ldr	r3, [pc, #68]	; 1de84 <flatcc_builder_union_vector_push@@Base+0x68>
   1de3c:	movw	r2, #1677	; 0x68d
   1de40:	ldr	r1, [pc, #64]	; 1de88 <flatcc_builder_union_vector_push@@Base+0x6c>
   1de44:	ldr	r0, [pc, #64]	; 1de8c <flatcc_builder_union_vector_push@@Base+0x70>
   1de48:	bl	12684 <__assert_fail@plt>
   1de4c:	ldr	r3, [r2, #20]
   1de50:	cmn	r3, #-536870911	; 0xe0000001
   1de54:	moveq	r3, #0
   1de58:	beq	1de78 <flatcc_builder_union_vector_push@@Base+0x5c>
   1de5c:	add	r3, r3, #1
   1de60:	mov	r1, #8
   1de64:	str	r3, [r2, #20]
   1de68:	bl	1ba64 <test_parse@@Base+0x464>
   1de6c:	subs	r3, r0, #0
   1de70:	ldmne	r4, {r0, r1}
   1de74:	stmne	r3, {r0, r1}
   1de78:	mov	r0, r3
   1de7c:	add	sp, sp, #8
   1de80:	pop	{r4, pc}
   1de84:			; <UNDEFINED> instruction: 0x000227bd
   1de88:	andeq	r2, r2, sp, ror #17
   1de8c:	andeq	r2, r2, sl, asr #23

0001de90 <flatcc_builder_append_union_vector@@Base>:
   1de90:	push	{r4, r5, r6, lr}
   1de94:	mov	r4, r0
   1de98:	ldr	r0, [r0, #32]
   1de9c:	ldrh	r3, [r0, #14]
   1dea0:	cmp	r3, #7
   1dea4:	beq	1debc <flatcc_builder_append_union_vector@@Base+0x2c>
   1dea8:	ldr	r3, [pc, #68]	; 1def4 <flatcc_builder_append_union_vector@@Base+0x64>
   1deac:	movw	r2, #1692	; 0x69c
   1deb0:	ldr	r1, [pc, #64]	; 1def8 <flatcc_builder_append_union_vector@@Base+0x68>
   1deb4:	ldr	r0, [pc, #64]	; 1defc <flatcc_builder_append_union_vector@@Base+0x6c>
   1deb8:	bl	12684 <__assert_fail@plt>
   1debc:	mov	r5, r2
   1dec0:	mov	r6, r1
   1dec4:	mvn	r2, #-536870912	; 0xe0000000
   1dec8:	mov	r1, r5
   1decc:	bl	1c008 <flatcc_builder_default_alloc@@Base+0x458>
   1ded0:	cmp	r0, #0
   1ded4:	bne	1deec <flatcc_builder_append_union_vector@@Base+0x5c>
   1ded8:	lsl	r2, r5, #3
   1dedc:	mov	r1, r6
   1dee0:	mov	r0, r4
   1dee4:	pop	{r4, r5, r6, lr}
   1dee8:	b	1bb34 <test_parse@@Base+0x534>
   1deec:	mov	r0, #0
   1def0:	pop	{r4, r5, r6, pc}
   1def4:	ldrdeq	r2, [r2], -lr
   1def8:	andeq	r2, r2, sp, ror #17
   1defc:	andeq	r2, r2, sl, asr #23

0001df00 <flatcc_builder_create_string@@Base>:
   1df00:	ldr	r3, [r0, #136]	; 0x88
   1df04:	mov	ip, #4
   1df08:	cmp	r2, #0
   1df0c:	push	{lr}		; (str lr, [sp, #-4]!)
   1df10:	sub	sp, sp, #84	; 0x54
   1df14:	add	lr, sp, ip
   1df18:	stmib	sp, {r2, ip}
   1df1c:	sub	r3, r3, r2
   1df20:	str	lr, [sp, #16]
   1df24:	sub	r3, r3, #1
   1df28:	str	ip, [sp, #20]
   1df2c:	mov	ip, #1
   1df30:	and	r3, r3, #3
   1df34:	add	r3, r3, #1
   1df38:	str	ip, [sp, #12]
   1df3c:	beq	1df58 <flatcc_builder_create_string@@Base+0x58>
   1df40:	add	ip, r2, #4
   1df44:	str	r2, [sp, #28]
   1df48:	mov	r2, #2
   1df4c:	str	ip, [sp, #8]
   1df50:	str	r2, [sp, #12]
   1df54:	str	r1, [sp, #24]
   1df58:	ldr	r2, [sp, #8]
   1df5c:	add	r1, sp, #80	; 0x50
   1df60:	ldr	ip, [pc, #44]	; 1df94 <flatcc_builder_create_string@@Base+0x94>
   1df64:	add	r2, r2, r3
   1df68:	str	r2, [sp, #8]
   1df6c:	ldr	r2, [sp, #12]
   1df70:	add	r2, r2, #1
   1df74:	add	r1, r1, r2, lsl #3
   1df78:	str	r2, [sp, #12]
   1df7c:	str	ip, [r1, #-72]	; 0xffffffb8
   1df80:	str	r3, [r1, #-68]	; 0xffffffbc
   1df84:	add	r1, sp, #8
   1df88:	bl	1bf90 <flatcc_builder_default_alloc@@Base+0x3e0>
   1df8c:	add	sp, sp, #84	; 0x54
   1df90:	pop	{pc}		; (ldr pc, [sp], #4)
   1df94:	andeq	r2, r2, r7, lsl #4

0001df98 <flatcc_builder_create_string_str@@Base>:
   1df98:	push	{r4, r5, r6, lr}
   1df9c:	mov	r5, r0
   1dfa0:	mov	r0, r1
   1dfa4:	mov	r4, r1
   1dfa8:	bl	12600 <strlen@plt>
   1dfac:	mov	r2, r0
   1dfb0:	mov	r1, r4
   1dfb4:	mov	r0, r5
   1dfb8:	pop	{r4, r5, r6, lr}
   1dfbc:	b	1df00 <flatcc_builder_create_string@@Base>

0001dfc0 <flatcc_builder_create_string_strn@@Base>:
   1dfc0:	push	{r4, r5, r6, lr}
   1dfc4:	mov	r4, r1
   1dfc8:	mov	r6, r0
   1dfcc:	mov	r1, #0
   1dfd0:	mov	r0, r4
   1dfd4:	mov	r5, r2
   1dfd8:	bl	1263c <memchr@plt>
   1dfdc:	cmp	r0, #0
   1dfe0:	mov	r1, r4
   1dfe4:	subne	r5, r0, r4
   1dfe8:	mov	r0, r6
   1dfec:	mov	r2, r5
   1dff0:	pop	{r4, r5, r6, lr}
   1dff4:	b	1df00 <flatcc_builder_create_string@@Base>

0001dff8 <flatcc_builder_end_string@@Base>:
   1dff8:	ldr	r3, [r0, #32]
   1dffc:	push	{r4, r5, r6, lr}
   1e000:	ldrh	r2, [r3, #14]
   1e004:	cmp	r2, #6
   1e008:	beq	1e020 <flatcc_builder_end_string@@Base+0x28>
   1e00c:	ldr	r3, [pc, #84]	; 1e068 <flatcc_builder_end_string@@Base+0x70>
   1e010:	movw	r2, #1732	; 0x6c4
   1e014:	ldr	r1, [pc, #80]	; 1e06c <flatcc_builder_end_string@@Base+0x74>
   1e018:	ldr	r0, [pc, #80]	; 1e070 <flatcc_builder_end_string@@Base+0x78>
   1e01c:	bl	12684 <__assert_fail@plt>
   1e020:	ldr	r2, [r3, #20]
   1e024:	mov	r4, r0
   1e028:	ldr	r1, [r0, #20]
   1e02c:	cmp	r2, r1
   1e030:	beq	1e048 <flatcc_builder_end_string@@Base+0x50>
   1e034:	ldr	r3, [pc, #44]	; 1e068 <flatcc_builder_end_string@@Base+0x70>
   1e038:	movw	r2, #1733	; 0x6c5
   1e03c:	ldr	r1, [pc, #40]	; 1e06c <flatcc_builder_end_string@@Base+0x74>
   1e040:	ldr	r0, [pc, #44]	; 1e074 <flatcc_builder_end_string@@Base+0x7c>
   1e044:	b	1e01c <flatcc_builder_end_string@@Base+0x24>
   1e048:	ldr	r1, [r0, #16]
   1e04c:	bl	1df00 <flatcc_builder_create_string@@Base>
   1e050:	subs	r5, r0, #0
   1e054:	beq	1e060 <flatcc_builder_end_string@@Base+0x68>
   1e058:	mov	r0, r4
   1e05c:	bl	1baac <test_parse@@Base+0x4ac>
   1e060:	mov	r0, r5
   1e064:	pop	{r4, r5, r6, pc}
   1e068:	andeq	r2, r2, r1, lsl #16
   1e06c:	andeq	r2, r2, sp, ror #17
   1e070:			; <UNDEFINED> instruction: 0x00022ab3
   1e074:	strdeq	r2, [r2], -ip

0001e078 <flatcc_builder_string_edit@@Base>:
   1e078:	ldr	r0, [r0, #16]
   1e07c:	bx	lr

0001e080 <flatcc_builder_string_len@@Base>:
   1e080:	ldr	r3, [r0, #32]
   1e084:	ldr	r0, [r3, #20]
   1e088:	bx	lr

0001e08c <flatcc_builder_table_add@@Base>:
   1e08c:	push	{r4, r5, r6, r7, r8, lr}
   1e090:	mov	r4, r0
   1e094:	ldr	r0, [r0, #32]
   1e098:	ldrh	r0, [r0, #14]
   1e09c:	cmp	r0, #3
   1e0a0:	beq	1e0b8 <flatcc_builder_table_add@@Base+0x2c>
   1e0a4:	ldr	r3, [pc, #240]	; 1e19c <flatcc_builder_table_add@@Base+0x110>
   1e0a8:	movw	r2, #1773	; 0x6ed
   1e0ac:	ldr	r1, [pc, #236]	; 1e1a0 <flatcc_builder_table_add@@Base+0x114>
   1e0b0:	ldr	r0, [pc, #236]	; 1e1a4 <flatcc_builder_table_add@@Base+0x118>
   1e0b4:	bl	12684 <__assert_fail@plt>
   1e0b8:	movw	r0, #32764	; 0x7ffc
   1e0bc:	cmp	r1, r0
   1e0c0:	bls	1e0d8 <flatcc_builder_table_add@@Base+0x4c>
   1e0c4:	ldr	r3, [pc, #208]	; 1e19c <flatcc_builder_table_add@@Base+0x110>
   1e0c8:	movw	r2, #1774	; 0x6ee
   1e0cc:	ldr	r1, [pc, #204]	; 1e1a0 <flatcc_builder_table_add@@Base+0x114>
   1e0d0:	ldr	r0, [pc, #208]	; 1e1a8 <flatcc_builder_table_add@@Base+0x11c>
   1e0d4:	b	1e0b4 <flatcc_builder_table_add@@Base+0x28>
   1e0d8:	ldrh	r0, [r4, #130]	; 0x82
   1e0dc:	lsl	r7, r1, #1
   1e0e0:	cmp	r0, r3
   1e0e4:	ldr	r0, [r4, #4]
   1e0e8:	strhcc	r3, [r4, #130]	; 0x82
   1e0ec:	ldrh	r5, [r0, r7]
   1e0f0:	cmp	r5, #0
   1e0f4:	beq	1e10c <flatcc_builder_table_add@@Base+0x80>
   1e0f8:	ldr	r3, [pc, #156]	; 1e19c <flatcc_builder_table_add@@Base+0x110>
   1e0fc:	movw	r2, #1784	; 0x6f8
   1e100:	ldr	r1, [pc, #152]	; 1e1a0 <flatcc_builder_table_add@@Base+0x114>
   1e104:	ldr	r0, [pc, #160]	; 1e1ac <flatcc_builder_table_add@@Base+0x120>
   1e108:	b	1e0b4 <flatcc_builder_table_add@@Base+0x28>
   1e10c:	ldr	ip, [r4, #12]
   1e110:	sub	r0, r3, #1
   1e114:	rsb	r3, r3, #0
   1e118:	uxth	r8, r1
   1e11c:	ldr	lr, [pc, #140]	; 1e1b0 <flatcc_builder_table_add@@Base+0x124>
   1e120:	ldr	r6, [r4, #20]
   1e124:	eor	ip, ip, r1
   1e128:	mul	ip, lr, ip
   1e12c:	add	r0, r0, r6
   1e130:	and	r6, r0, r3
   1e134:	ldr	r3, [r4, #24]
   1e138:	eor	ip, ip, r2
   1e13c:	add	r1, r2, r6
   1e140:	mul	ip, lr, ip
   1e144:	cmp	r1, r3
   1e148:	str	ip, [r4, #12]
   1e14c:	str	r1, [r4, #20]
   1e150:	bcs	1e17c <flatcc_builder_table_add@@Base+0xf0>
   1e154:	ldr	r3, [r4, #4]
   1e158:	add	r2, r6, #4
   1e15c:	ldr	r0, [r4, #16]
   1e160:	strh	r2, [r3, r7]
   1e164:	ldrh	r3, [r4, #8]
   1e168:	add	r0, r0, r6
   1e16c:	cmp	r3, r8
   1e170:	addls	r1, r8, #1
   1e174:	strhls	r1, [r4, #8]
   1e178:	pop	{r4, r5, r6, r7, r8, pc}
   1e17c:	movw	r2, #65532	; 0xfffc
   1e180:	add	r1, r1, #1
   1e184:	mov	r0, r4
   1e188:	bl	1ba14 <test_parse@@Base+0x414>
   1e18c:	cmp	r0, #0
   1e190:	beq	1e154 <flatcc_builder_table_add@@Base+0xc8>
   1e194:	mov	r0, r5
   1e198:	pop	{r4, r5, r6, r7, r8, pc}
   1e19c:	andeq	r2, r2, fp, lsl r8
   1e1a0:	andeq	r2, r2, sp, ror #17
   1e1a4:	andeq	r2, r2, ip, lsl #23
   1e1a8:	andeq	r2, r2, r0, lsr #24
   1e1ac:	andeq	r2, r2, sl, asr r9
   1e1b0:			; <UNDEFINED> instruction: 0x9e3779b1

0001e1b4 <flatcc_builder_table_edit@@Base>:
   1e1b4:	ldr	r3, [r0, #32]
   1e1b8:	ldrh	r3, [r3, #14]
   1e1bc:	cmp	r3, #3
   1e1c0:	beq	1e1dc <flatcc_builder_table_edit@@Base+0x28>
   1e1c4:	push	{r4, lr}
   1e1c8:	movw	r2, #1794	; 0x702
   1e1cc:	ldr	r3, [pc, #28]	; 1e1f0 <flatcc_builder_table_edit@@Base+0x3c>
   1e1d0:	ldr	r1, [pc, #28]	; 1e1f4 <flatcc_builder_table_edit@@Base+0x40>
   1e1d4:	ldr	r0, [pc, #28]	; 1e1f8 <flatcc_builder_table_edit@@Base+0x44>
   1e1d8:	bl	12684 <__assert_fail@plt>
   1e1dc:	ldr	r3, [r0, #20]
   1e1e0:	ldr	r0, [r0, #16]
   1e1e4:	sub	r3, r3, r1
   1e1e8:	add	r0, r0, r3
   1e1ec:	bx	lr
   1e1f0:	andeq	r2, r2, r4, lsr r8
   1e1f4:	andeq	r2, r2, sp, ror #17
   1e1f8:	andeq	r2, r2, ip, lsl #23

0001e1fc <flatcc_builder_table_add_copy@@Base>:
   1e1fc:	push	{r4, r5, r6, lr}
   1e200:	mov	r4, r3
   1e204:	mov	r6, r2
   1e208:	mov	r2, r4
   1e20c:	ldrh	r3, [sp, #16]
   1e210:	bl	1e08c <flatcc_builder_table_add@@Base>
   1e214:	subs	r5, r0, #0
   1e218:	beq	1e228 <flatcc_builder_table_add_copy@@Base+0x2c>
   1e21c:	mov	r2, r4
   1e220:	mov	r1, r6
   1e224:	bl	12588 <memcpy@plt>
   1e228:	mov	r0, r5
   1e22c:	pop	{r4, r5, r6, pc}

0001e230 <flatcc_builder_table_add_offset@@Base>:
   1e230:	ldr	r3, [r0, #32]
   1e234:	push	{r4, r5, r6, r7, r8, lr}
   1e238:	ldrh	r3, [r3, #14]
   1e23c:	cmp	r3, #3
   1e240:	beq	1e258 <flatcc_builder_table_add_offset@@Base+0x28>
   1e244:	ldr	r3, [pc, #236]	; 1e338 <flatcc_builder_table_add_offset@@Base+0x108>
   1e248:	movw	r2, #1811	; 0x713
   1e24c:	ldr	r1, [pc, #232]	; 1e33c <flatcc_builder_table_add_offset@@Base+0x10c>
   1e250:	ldr	r0, [pc, #232]	; 1e340 <flatcc_builder_table_add_offset@@Base+0x110>
   1e254:	bl	12684 <__assert_fail@plt>
   1e258:	movw	r3, #32764	; 0x7ffc
   1e25c:	cmp	r1, r3
   1e260:	bls	1e278 <flatcc_builder_table_add_offset@@Base+0x48>
   1e264:	ldr	r3, [pc, #204]	; 1e338 <flatcc_builder_table_add_offset@@Base+0x108>
   1e268:	movw	r2, #1812	; 0x714
   1e26c:	ldr	r1, [pc, #200]	; 1e33c <flatcc_builder_table_add_offset@@Base+0x10c>
   1e270:	ldr	r0, [pc, #204]	; 1e344 <flatcc_builder_table_add_offset@@Base+0x114>
   1e274:	b	1e254 <flatcc_builder_table_add_offset@@Base+0x24>
   1e278:	ldr	r3, [r0, #4]
   1e27c:	lsl	r7, r1, #1
   1e280:	mov	r4, r0
   1e284:	ldrh	r6, [r3, r7]
   1e288:	cmp	r6, #0
   1e28c:	beq	1e2a4 <flatcc_builder_table_add_offset@@Base+0x74>
   1e290:	ldr	r3, [pc, #160]	; 1e338 <flatcc_builder_table_add_offset@@Base+0x108>
   1e294:	movw	r2, #1819	; 0x71b
   1e298:	ldr	r1, [pc, #156]	; 1e33c <flatcc_builder_table_add_offset@@Base+0x10c>
   1e29c:	ldr	r0, [pc, #164]	; 1e348 <flatcc_builder_table_add_offset@@Base+0x118>
   1e2a0:	b	1e254 <flatcc_builder_table_add_offset@@Base+0x24>
   1e2a4:	ldr	r3, [r0, #12]
   1e2a8:	uxth	r5, r1
   1e2ac:	ldr	r2, [pc, #152]	; 1e34c <flatcc_builder_table_add_offset@@Base+0x11c>
   1e2b0:	ldr	r8, [r0, #20]
   1e2b4:	eor	r3, r3, r1
   1e2b8:	mul	r3, r2, r3
   1e2bc:	add	r8, r8, #3
   1e2c0:	eor	r3, r3, #4
   1e2c4:	bic	r8, r8, #3
   1e2c8:	add	r1, r8, #4
   1e2cc:	mul	r3, r2, r3
   1e2d0:	str	r3, [r0, #12]
   1e2d4:	ldr	r3, [r0, #24]
   1e2d8:	str	r1, [r0, #20]
   1e2dc:	cmp	r1, r3
   1e2e0:	bhi	1e320 <flatcc_builder_table_add_offset@@Base+0xf0>
   1e2e4:	ldr	r3, [r4, #4]
   1e2e8:	uxth	r2, r8
   1e2ec:	add	r1, r2, #4
   1e2f0:	ldr	r0, [r4, #16]
   1e2f4:	strh	r1, [r3, r7]
   1e2f8:	ldrh	r3, [r4, #8]
   1e2fc:	add	r0, r0, r8
   1e300:	cmp	r3, r5
   1e304:	ldr	r3, [r4]
   1e308:	addls	r1, r5, #1
   1e30c:	strhls	r1, [r4, #8]
   1e310:	add	r1, r3, #2
   1e314:	str	r1, [r4]
   1e318:	strh	r2, [r3]
   1e31c:	pop	{r4, r5, r6, r7, r8, pc}
   1e320:	movw	r2, #65532	; 0xfffc
   1e324:	bl	1ba14 <test_parse@@Base+0x414>
   1e328:	cmp	r0, #0
   1e32c:	beq	1e2e4 <flatcc_builder_table_add_offset@@Base+0xb4>
   1e330:	mov	r0, r6
   1e334:	pop	{r4, r5, r6, r7, r8, pc}
   1e338:	andeq	r2, r2, lr, asr #16
   1e33c:	andeq	r2, r2, sp, ror #17
   1e340:	andeq	r2, r2, ip, lsl #23
   1e344:	andeq	r2, r2, r0, lsr #24
   1e348:	andeq	r2, r2, sl, asr r9
   1e34c:			; <UNDEFINED> instruction: 0x9e3779b1

0001e350 <flatcc_builder_table_add_union@@Base>:
   1e350:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e354:	add	ip, sp, #8
   1e358:	stmdb	ip, {r2, r3}
   1e35c:	ldr	r3, [r0, #32]
   1e360:	ldrb	r5, [sp]
   1e364:	ldr	r4, [sp, #4]
   1e368:	ldrh	r3, [r3, #14]
   1e36c:	cmp	r3, #3
   1e370:	beq	1e388 <flatcc_builder_table_add_union@@Base+0x38>
   1e374:	ldr	r3, [pc, #164]	; 1e420 <flatcc_builder_table_add_union@@Base+0xd0>
   1e378:	movw	r2, #1518	; 0x5ee
   1e37c:	ldr	r1, [pc, #160]	; 1e424 <flatcc_builder_table_add_union@@Base+0xd4>
   1e380:	ldr	r0, [pc, #160]	; 1e428 <flatcc_builder_table_add_union@@Base+0xd8>
   1e384:	bl	12684 <__assert_fail@plt>
   1e388:	cmp	r5, #0
   1e38c:	mov	r6, r0
   1e390:	mov	r7, r1
   1e394:	bne	1e3b4 <flatcc_builder_table_add_union@@Base+0x64>
   1e398:	cmp	r4, #0
   1e39c:	beq	1e3e0 <flatcc_builder_table_add_union@@Base+0x90>
   1e3a0:	ldr	r3, [pc, #120]	; 1e420 <flatcc_builder_table_add_union@@Base+0xd0>
   1e3a4:	movw	r2, #1519	; 0x5ef
   1e3a8:	ldr	r1, [pc, #116]	; 1e424 <flatcc_builder_table_add_union@@Base+0xd4>
   1e3ac:	ldr	r0, [pc, #120]	; 1e42c <flatcc_builder_table_add_union@@Base+0xdc>
   1e3b0:	b	1e384 <flatcc_builder_table_add_union@@Base+0x34>
   1e3b4:	cmp	r4, #0
   1e3b8:	beq	1e3e0 <flatcc_builder_table_add_union@@Base+0x90>
   1e3bc:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1e3c0:	cmp	r0, #0
   1e3c4:	strne	r4, [r0]
   1e3c8:	bne	1e3e0 <flatcc_builder_table_add_union@@Base+0x90>
   1e3cc:	ldr	r3, [pc, #76]	; 1e420 <flatcc_builder_table_add_union@@Base+0xd0>
   1e3d0:	movw	r2, #1522	; 0x5f2
   1e3d4:	ldr	r1, [pc, #72]	; 1e424 <flatcc_builder_table_add_union@@Base+0xd4>
   1e3d8:	ldr	r0, [pc, #80]	; 1e430 <flatcc_builder_table_add_union@@Base+0xe0>
   1e3dc:	b	1e384 <flatcc_builder_table_add_union@@Base+0x34>
   1e3e0:	mov	r3, #1
   1e3e4:	sub	r1, r7, #1
   1e3e8:	mov	r2, r3
   1e3ec:	mov	r0, r6
   1e3f0:	bl	1e08c <flatcc_builder_table_add@@Base>
   1e3f4:	cmp	r0, #0
   1e3f8:	bne	1e410 <flatcc_builder_table_add_union@@Base+0xc0>
   1e3fc:	ldr	r3, [pc, #28]	; 1e420 <flatcc_builder_table_add_union@@Base+0xd0>
   1e400:	movw	r2, #1526	; 0x5f6
   1e404:	ldr	r1, [pc, #24]	; 1e424 <flatcc_builder_table_add_union@@Base+0xd4>
   1e408:	ldr	r0, [pc, #36]	; 1e434 <flatcc_builder_table_add_union@@Base+0xe4>
   1e40c:	b	1e384 <flatcc_builder_table_add_union@@Base+0x34>
   1e410:	strb	r5, [r0]
   1e414:	mov	r0, #0
   1e418:	add	sp, sp, #12
   1e41c:	pop	{r4, r5, r6, r7, pc}
   1e420:	andeq	r2, r2, lr, ror #16
   1e424:	andeq	r2, r2, sp, ror #17
   1e428:	andeq	r2, r2, ip, lsl #23
   1e42c:	andeq	r2, r2, r4, ror #24
   1e430:	andeq	r2, r2, r6, lsl #25
   1e434:	muleq	r2, r0, ip

0001e438 <flatcc_builder_table_add_union_vector@@Base>:
   1e438:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e43c:	mov	r7, r1
   1e440:	add	r1, sp, #8
   1e444:	stmdb	r1, {r2, r3}
   1e448:	ldr	r3, [r0, #32]
   1e44c:	ldrd	r4, [sp]
   1e450:	ldrh	r3, [r3, #14]
   1e454:	cmp	r3, #3
   1e458:	beq	1e470 <flatcc_builder_table_add_union_vector@@Base+0x38>
   1e45c:	ldr	r3, [pc, #176]	; 1e514 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e460:	mov	r2, #1536	; 0x600
   1e464:	ldr	r1, [pc, #172]	; 1e518 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1e468:	ldr	r0, [pc, #172]	; 1e51c <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1e46c:	bl	12684 <__assert_fail@plt>
   1e470:	clz	r3, r5
   1e474:	clz	r2, r4
   1e478:	lsr	r3, r3, #5
   1e47c:	lsr	r2, r2, #5
   1e480:	cmp	r2, r3
   1e484:	beq	1e4b0 <flatcc_builder_table_add_union_vector@@Base+0x78>
   1e488:	adds	r4, r4, #0
   1e48c:	movne	r4, #1
   1e490:	cmp	r4, r3
   1e494:	mvnne	r4, #0
   1e498:	bne	1e508 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1e49c:	ldr	r3, [pc, #112]	; 1e514 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e4a0:	movw	r2, #1537	; 0x601
   1e4a4:	ldr	r1, [pc, #108]	; 1e518 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1e4a8:	ldr	r0, [pc, #112]	; 1e520 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1e4ac:	b	1e46c <flatcc_builder_table_add_union_vector@@Base+0x34>
   1e4b0:	cmp	r4, #0
   1e4b4:	beq	1e508 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1e4b8:	sub	r1, r7, #1
   1e4bc:	mov	r6, r0
   1e4c0:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1e4c4:	cmp	r0, #0
   1e4c8:	ldreq	r3, [pc, #68]	; 1e514 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e4cc:	movweq	r2, #1540	; 0x604
   1e4d0:	beq	1e4fc <flatcc_builder_table_add_union_vector@@Base+0xc4>
   1e4d4:	mov	r1, r7
   1e4d8:	str	r4, [r0]
   1e4dc:	mov	r0, r6
   1e4e0:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1e4e4:	cmp	r0, #0
   1e4e8:	movne	r4, #0
   1e4ec:	strne	r5, [r0]
   1e4f0:	bne	1e508 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   1e4f4:	ldr	r3, [pc, #24]	; 1e514 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   1e4f8:	movw	r2, #1544	; 0x608
   1e4fc:	ldr	r1, [pc, #20]	; 1e518 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1e500:	ldr	r0, [pc, #28]	; 1e524 <flatcc_builder_table_add_union_vector@@Base+0xec>
   1e504:	b	1e46c <flatcc_builder_table_add_union_vector@@Base+0x34>
   1e508:	mov	r0, r4
   1e50c:	add	sp, sp, #12
   1e510:	pop	{r4, r5, r6, r7, pc}
   1e514:	andeq	r2, r2, sp, lsl #17
   1e518:	andeq	r2, r2, sp, ror #17
   1e51c:	andeq	r2, r2, ip, lsl #23
   1e520:	muleq	r2, ip, ip
   1e524:	andeq	r2, r2, r6, lsl #25

0001e528 <flatcc_builder_push_buffer_alignment@@Base>:
   1e528:	mov	r3, r0
   1e52c:	mov	r2, #4
   1e530:	ldrh	r0, [r0, #128]	; 0x80
   1e534:	strh	r2, [r3, #128]	; 0x80
   1e538:	bx	lr

0001e53c <flatcc_builder_pop_buffer_alignment@@Base>:
   1e53c:	ldrh	r3, [r0, #128]	; 0x80
   1e540:	cmp	r3, r1
   1e544:	strhcc	r1, [r0, #128]	; 0x80
   1e548:	bx	lr

0001e54c <flatcc_builder_get_buffer_alignment@@Base>:
   1e54c:	ldrh	r0, [r0, #128]	; 0x80
   1e550:	bx	lr

0001e554 <flatcc_builder_set_vtable_clustering@@Base>:
   1e554:	clz	r1, r1
   1e558:	lsr	r1, r1, #5
   1e55c:	str	r1, [r0, #180]	; 0xb4
   1e560:	bx	lr

0001e564 <flatcc_builder_set_block_align@@Base>:
   1e564:	strh	r1, [r0, #132]	; 0x84
   1e568:	bx	lr

0001e56c <flatcc_builder_get_level@@Base>:
   1e56c:	ldr	r0, [r0, #156]	; 0x9c
   1e570:	bx	lr

0001e574 <flatcc_builder_set_max_level@@Base>:
   1e574:	ldr	r3, [r0, #160]	; 0xa0
   1e578:	str	r1, [r0, #176]	; 0xb0
   1e57c:	cmp	r3, r1
   1e580:	strlt	r1, [r0, #160]	; 0xa0
   1e584:	bx	lr

0001e588 <flatcc_builder_get_buffer_size@@Base>:
   1e588:	ldr	r2, [r0, #140]	; 0x8c
   1e58c:	ldr	r0, [r0, #136]	; 0x88
   1e590:	sub	r0, r2, r0
   1e594:	bx	lr

0001e598 <flatcc_builder_get_buffer_start@@Base>:
   1e598:	ldr	r0, [r0, #136]	; 0x88
   1e59c:	bx	lr

0001e5a0 <flatcc_builder_get_buffer_end@@Base>:
   1e5a0:	ldr	r0, [r0, #140]	; 0x8c
   1e5a4:	bx	lr

0001e5a8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   1e5a8:	str	r1, [r0, #172]	; 0xac
   1e5ac:	bx	lr

0001e5b0 <flatcc_builder_set_identifier@@Base>:
   1e5b0:	ldr	r3, [pc, #16]	; 1e5c8 <flatcc_builder_set_identifier@@Base+0x18>
   1e5b4:	cmp	r1, #0
   1e5b8:	moveq	r1, r3
   1e5bc:	ldr	r3, [r1]
   1e5c0:	str	r3, [r0, #168]	; 0xa8
   1e5c4:	bx	lr
   1e5c8:	andeq	r2, r2, r7, lsl #4

0001e5cc <flatcc_builder_get_type@@Base>:
   1e5cc:	ldr	r0, [r0, #32]
   1e5d0:	cmp	r0, #0
   1e5d4:	ldrhne	r0, [r0, #14]
   1e5d8:	bx	lr

0001e5dc <flatcc_builder_get_type_at@@Base>:
   1e5dc:	cmp	r1, #0
   1e5e0:	ble	1e608 <flatcc_builder_get_type_at@@Base+0x2c>
   1e5e4:	ldr	r3, [r0, #156]	; 0x9c
   1e5e8:	cmp	r3, r1
   1e5ec:	blt	1e608 <flatcc_builder_get_type_at@@Base+0x2c>
   1e5f0:	sub	r1, r1, r3
   1e5f4:	ldr	r3, [r0, #32]
   1e5f8:	mov	r2, #36	; 0x24
   1e5fc:	mla	r1, r2, r1, r3
   1e600:	ldrh	r0, [r1, #14]
   1e604:	bx	lr
   1e608:	mov	r0, #0
   1e60c:	bx	lr

0001e610 <flatcc_builder_get_direct_buffer@@Base>:
   1e610:	ldr	r3, [r0, #184]	; 0xb8
   1e614:	cmp	r3, #0
   1e618:	beq	1e640 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1e61c:	ldrd	r2, [r0, #188]	; 0xbc
   1e620:	cmp	r2, r3
   1e624:	bne	1e640 <flatcc_builder_get_direct_buffer@@Base+0x30>
   1e628:	cmp	r1, #0
   1e62c:	ldrne	r3, [r0, #212]	; 0xd4
   1e630:	strne	r3, [r1]
   1e634:	ldr	r1, [r0, #196]	; 0xc4
   1e638:	mov	r0, r1
   1e63c:	bx	lr
   1e640:	cmp	r1, #0
   1e644:	movne	r3, #0
   1e648:	strne	r3, [r1]
   1e64c:	movne	r1, r3
   1e650:	b	1e638 <flatcc_builder_get_direct_buffer@@Base+0x28>

0001e654 <flatcc_builder_copy_buffer@@Base>:
   1e654:	ldr	r3, [r0, #184]	; 0xb8
   1e658:	cmp	r3, #0
   1e65c:	beq	1e688 <flatcc_builder_copy_buffer@@Base+0x34>
   1e660:	push	{r4, lr}
   1e664:	add	r0, r0, #188	; 0xbc
   1e668:	bl	1ebfc <flatcc_emitter_copy_buffer@@Base>
   1e66c:	cmp	r0, #0
   1e670:	popne	{r4, pc}
   1e674:	ldr	r3, [pc, #20]	; 1e690 <flatcc_builder_copy_buffer@@Base+0x3c>
   1e678:	movw	r2, #1926	; 0x786
   1e67c:	ldr	r1, [pc, #16]	; 1e694 <flatcc_builder_copy_buffer@@Base+0x40>
   1e680:	ldr	r0, [pc, #16]	; 1e698 <flatcc_builder_copy_buffer@@Base+0x44>
   1e684:	bl	12684 <__assert_fail@plt>
   1e688:	mov	r0, r3
   1e68c:	bx	lr
   1e690:			; <UNDEFINED> instruction: 0x000228b3
   1e694:	andeq	r2, r2, sp, ror #17
   1e698:	andeq	r2, r2, r4, ror #19

0001e69c <flatcc_builder_finalize_buffer@@Base>:
   1e69c:	push	{r4, r5, r6, lr}
   1e6a0:	cmp	r1, #0
   1e6a4:	mov	r5, r0
   1e6a8:	ldr	r2, [r0, #136]	; 0x88
   1e6ac:	ldr	r4, [r0, #140]	; 0x8c
   1e6b0:	sub	r4, r4, r2
   1e6b4:	mov	r0, r4
   1e6b8:	strne	r4, [r1]
   1e6bc:	bl	125d0 <malloc@plt>
   1e6c0:	subs	r6, r0, #0
   1e6c4:	ldreq	r3, [pc, #56]	; 1e704 <flatcc_builder_finalize_buffer@@Base+0x68>
   1e6c8:	movweq	r2, #1944	; 0x798
   1e6cc:	beq	1e6f0 <flatcc_builder_finalize_buffer@@Base+0x54>
   1e6d0:	mov	r2, r4
   1e6d4:	mov	r1, r6
   1e6d8:	mov	r0, r5
   1e6dc:	bl	1e654 <flatcc_builder_copy_buffer@@Base>
   1e6e0:	cmp	r0, #0
   1e6e4:	bne	1e6fc <flatcc_builder_finalize_buffer@@Base+0x60>
   1e6e8:	ldr	r3, [pc, #20]	; 1e704 <flatcc_builder_finalize_buffer@@Base+0x68>
   1e6ec:	movw	r2, #1948	; 0x79c
   1e6f0:	ldr	r1, [pc, #16]	; 1e708 <flatcc_builder_finalize_buffer@@Base+0x6c>
   1e6f4:	ldr	r0, [pc, #16]	; 1e70c <flatcc_builder_finalize_buffer@@Base+0x70>
   1e6f8:	bl	12684 <__assert_fail@plt>
   1e6fc:	mov	r0, r6
   1e700:	pop	{r4, r5, r6, pc}
   1e704:	andeq	r2, r2, lr, asr #17
   1e708:	andeq	r2, r2, sp, ror #17
   1e70c:	andeq	r2, r2, sl, asr r9

0001e710 <flatcc_builder_finalize_aligned_buffer@@Base>:
   1e710:	push	{r4, r5, r6, r7, r8, lr}
   1e714:	mov	r6, r0
   1e718:	subs	r7, r1, #0
   1e71c:	ldr	r2, [r0, #136]	; 0x88
   1e720:	ldr	r4, [r0, #140]	; 0x8c
   1e724:	ldrh	r0, [r0, #128]	; 0x80
   1e728:	sub	r2, r4, r2
   1e72c:	sub	r4, r0, #1
   1e730:	strne	r2, [r7]
   1e734:	add	r4, r4, r2
   1e738:	rsb	r2, r0, #0
   1e73c:	and	r4, r4, r2
   1e740:	mov	r1, r4
   1e744:	bl	1bb64 <test_parse@@Base+0x564>
   1e748:	subs	r5, r0, #0
   1e74c:	beq	1e774 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1e750:	mov	r2, r4
   1e754:	mov	r1, r5
   1e758:	mov	r0, r6
   1e75c:	bl	1e654 <flatcc_builder_copy_buffer@@Base>
   1e760:	subs	r4, r0, #0
   1e764:	bne	1e774 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   1e768:	mov	r0, r5
   1e76c:	mov	r5, r4
   1e770:	bl	1257c <free@plt>
   1e774:	adds	r3, r7, #0
   1e778:	mov	r0, r5
   1e77c:	movne	r3, #1
   1e780:	cmp	r5, #0
   1e784:	movne	r3, #0
   1e788:	cmp	r3, #0
   1e78c:	movne	r3, #0
   1e790:	strne	r3, [r7]
   1e794:	pop	{r4, r5, r6, r7, r8, pc}

0001e798 <flatcc_builder_aligned_alloc@@Base>:
   1e798:	b	1bb64 <test_parse@@Base+0x564>

0001e79c <flatcc_builder_aligned_free@@Base>:
   1e79c:	b	1257c <free@plt>

0001e7a0 <flatcc_builder_get_emit_context@@Base>:
   1e7a0:	ldr	r0, [r0, #36]	; 0x24
   1e7a4:	bx	lr

0001e7a8 <flatcc_emitter_recycle_page@@Base>:
   1e7a8:	ldr	r3, [r0]
   1e7ac:	cmp	r3, r1
   1e7b0:	beq	1e7f0 <flatcc_emitter_recycle_page@@Base+0x48>
   1e7b4:	ldr	r2, [r0, #4]
   1e7b8:	cmp	r2, r1
   1e7bc:	beq	1e7f0 <flatcc_emitter_recycle_page@@Base+0x48>
   1e7c0:	ldr	r0, [r1, #2944]	; 0xb80
   1e7c4:	ldr	r2, [r1, #2948]	; 0xb84
   1e7c8:	str	r2, [r0, #2948]	; 0xb84
   1e7cc:	str	r0, [r2, #2944]	; 0xb80
   1e7d0:	mov	r0, #0
   1e7d4:	ldr	r2, [r3, #2948]	; 0xb84
   1e7d8:	str	r3, [r1, #2944]	; 0xb80
   1e7dc:	str	r2, [r1, #2948]	; 0xb84
   1e7e0:	str	r1, [r2, #2944]	; 0xb80
   1e7e4:	ldr	r3, [r1, #2944]	; 0xb80
   1e7e8:	str	r1, [r3, #2948]	; 0xb84
   1e7ec:	bx	lr
   1e7f0:	mvn	r0, #0
   1e7f4:	bx	lr

0001e7f8 <flatcc_emitter_reset@@Base>:
   1e7f8:	ldr	r3, [r0]
   1e7fc:	cmp	r3, #0
   1e800:	bxeq	lr
   1e804:	add	r2, r3, #1472	; 0x5c0
   1e808:	push	{r4, lr}
   1e80c:	mov	r4, r0
   1e810:	str	r3, [r0, #4]
   1e814:	str	r2, [r0, #8]
   1e818:	str	r2, [r0, #16]
   1e81c:	mov	r2, #1472	; 0x5c0
   1e820:	str	r2, [r0, #12]
   1e824:	str	r2, [r0, #20]
   1e828:	sub	r2, r2, #2944	; 0xb80
   1e82c:	str	r2, [r3, #2952]	; 0xb88
   1e830:	ldr	r3, [r0, #24]
   1e834:	ldr	r2, [r0, #32]
   1e838:	cmp	r2, #0
   1e83c:	streq	r3, [r0, #32]
   1e840:	lsr	r3, r3, #2
   1e844:	ldr	r2, [r0, #32]
   1e848:	add	r2, r2, r2, lsl #1
   1e84c:	add	r3, r3, r2, lsr #2
   1e850:	str	r3, [r0, #32]
   1e854:	mov	r3, #0
   1e858:	str	r3, [r0, #24]
   1e85c:	ldr	r3, [r4, #28]
   1e860:	ldr	r2, [r4, #32]
   1e864:	cmp	r3, r2, lsl #1
   1e868:	popls	{r4, pc}
   1e86c:	ldrd	r2, [r4]
   1e870:	ldr	r0, [r3, #2944]	; 0xb80
   1e874:	cmp	r0, r2
   1e878:	popeq	{r4, pc}
   1e87c:	ldr	r2, [r0, #2944]	; 0xb80
   1e880:	str	r2, [r3, #2944]	; 0xb80
   1e884:	ldr	r2, [r0, #2944]	; 0xb80
   1e888:	str	r3, [r2, #2948]	; 0xb84
   1e88c:	bl	1257c <free@plt>
   1e890:	ldr	r3, [r4, #28]
   1e894:	sub	r3, r3, #2944	; 0xb80
   1e898:	str	r3, [r4, #28]
   1e89c:	b	1e85c <flatcc_emitter_reset@@Base+0x64>

0001e8a0 <flatcc_emitter_clear@@Base>:
   1e8a0:	ldr	r3, [r0]
   1e8a4:	cmp	r3, #0
   1e8a8:	bxeq	lr
   1e8ac:	push	{r4, r5, r6, lr}
   1e8b0:	mov	r1, #0
   1e8b4:	mov	r4, r0
   1e8b8:	ldr	r2, [r3, #2948]	; 0xb84
   1e8bc:	str	r1, [r2, #2944]	; 0xb80
   1e8c0:	ldr	r5, [r3, #2944]	; 0xb80
   1e8c4:	cmp	r5, #0
   1e8c8:	bne	1e8e8 <flatcc_emitter_clear@@Base+0x48>
   1e8cc:	mov	r0, r3
   1e8d0:	bl	1257c <free@plt>
   1e8d4:	mov	r1, r5
   1e8d8:	mov	r0, r4
   1e8dc:	pop	{r4, r5, r6, lr}
   1e8e0:	mov	r2, #36	; 0x24
   1e8e4:	b	12624 <memset@plt>
   1e8e8:	ldr	r0, [r5, #2948]	; 0xb84
   1e8ec:	bl	1257c <free@plt>
   1e8f0:	mov	r3, r5
   1e8f4:	b	1e8c0 <flatcc_emitter_clear@@Base+0x20>

0001e8f8 <flatcc_emitter@@Base>:
   1e8f8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8fc:	mov	r4, r0
   1e900:	mov	r6, r2
   1e904:	cmp	r3, #0
   1e908:	ldr	r0, [r0, #24]
   1e90c:	ldr	r2, [sp, #40]	; 0x28
   1e910:	add	r0, r0, r2
   1e914:	str	r0, [r4, #24]
   1e918:	bge	1eab0 <flatcc_emitter@@Base+0x1b8>
   1e91c:	ldr	r0, [r4, #12]
   1e920:	cmp	r0, r2
   1e924:	bcc	1e968 <flatcc_emitter@@Base+0x70>
   1e928:	ldr	r3, [r4, #8]
   1e92c:	sub	r3, r3, r2
   1e930:	sub	r2, r0, r2
   1e934:	str	r3, [r4, #8]
   1e938:	str	r2, [r4, #12]
   1e93c:	mov	r4, r1
   1e940:	sub	r6, r6, #1
   1e944:	add	r4, r4, #8
   1e948:	cmn	r6, #1
   1e94c:	beq	1e97c <flatcc_emitter@@Base+0x84>
   1e950:	mov	r0, r3
   1e954:	ldmdb	r4, {r1, r2}
   1e958:	bl	12588 <memcpy@plt>
   1e95c:	ldr	r2, [r4, #-4]
   1e960:	add	r3, r0, r2
   1e964:	b	1e940 <flatcc_emitter@@Base+0x48>
   1e968:	ldr	r9, [pc, #648]	; 1ebf8 <flatcc_emitter@@Base+0x300>
   1e96c:	add	r5, r1, r6, lsl #3
   1e970:	mov	r8, #2944	; 0xb80
   1e974:	cmp	r6, #0
   1e978:	bne	1e984 <flatcc_emitter@@Base+0x8c>
   1e97c:	mov	r0, #0
   1e980:	b	1ea1c <flatcc_emitter@@Base+0x124>
   1e984:	ldr	sl, [r5, #-8]
   1e988:	ldr	r7, [r5, #-4]
   1e98c:	add	sl, sl, r7
   1e990:	cmp	r7, #0
   1e994:	subeq	r5, r5, #8
   1e998:	subeq	r6, r6, #1
   1e99c:	beq	1e974 <flatcc_emitter@@Base+0x7c>
   1e9a0:	ldr	r3, [r4, #12]
   1e9a4:	cmp	r3, r7
   1e9a8:	bcs	1ea80 <flatcc_emitter@@Base+0x188>
   1e9ac:	cmp	r3, #0
   1e9b0:	movne	r2, r3
   1e9b4:	bne	1ea84 <flatcc_emitter@@Base+0x18c>
   1e9b8:	ldr	fp, [r4]
   1e9bc:	cmp	fp, #0
   1e9c0:	beq	1ea08 <flatcc_emitter@@Base+0x110>
   1e9c4:	ldr	r2, [r4, #4]
   1e9c8:	ldr	r3, [fp, #2948]	; 0xb84
   1e9cc:	cmp	r3, r2
   1e9d0:	beq	1ea08 <flatcc_emitter@@Base+0x110>
   1e9d4:	ldr	r2, [fp, #2952]	; 0xb88
   1e9d8:	sub	r2, r2, #2944	; 0xb80
   1e9dc:	str	r2, [r3, #2952]	; 0xb88
   1e9e0:	str	r3, [r4]
   1e9e4:	ldr	r3, [r4]
   1e9e8:	str	r8, [r4, #12]
   1e9ec:	add	r2, r3, #2944	; 0xb80
   1e9f0:	str	r2, [r4, #8]
   1e9f4:	ldr	r2, [r3, #2944]	; 0xb80
   1e9f8:	ldr	r2, [r2, #2952]	; 0xb88
   1e9fc:	sub	r2, r2, #2944	; 0xb80
   1ea00:	str	r2, [r3, #2952]	; 0xb88
   1ea04:	b	1e990 <flatcc_emitter@@Base+0x98>
   1ea08:	movw	r0, #2956	; 0xb8c
   1ea0c:	bl	125d0 <malloc@plt>
   1ea10:	cmp	r0, #0
   1ea14:	bne	1ea24 <flatcc_emitter@@Base+0x12c>
   1ea18:	mvn	r0, #0
   1ea1c:	add	sp, sp, #4
   1ea20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea24:	ldr	r3, [r4, #28]
   1ea28:	cmp	fp, #0
   1ea2c:	add	r3, r3, #2944	; 0xb80
   1ea30:	str	r3, [r4, #28]
   1ea34:	beq	1ea54 <flatcc_emitter@@Base+0x15c>
   1ea38:	ldr	r3, [r4, #4]
   1ea3c:	str	fp, [r0, #2944]	; 0xb80
   1ea40:	str	r3, [r0, #2948]	; 0xb84
   1ea44:	str	r0, [fp, #2948]	; 0xb84
   1ea48:	str	r0, [r3, #2944]	; 0xb80
   1ea4c:	str	r0, [r4]
   1ea50:	b	1e9e4 <flatcc_emitter@@Base+0xec>
   1ea54:	add	r3, r0, #1472	; 0x5c0
   1ea58:	str	r0, [r4]
   1ea5c:	str	r0, [r0, #2944]	; 0xb80
   1ea60:	stmib	r4, {r0, r3}
   1ea64:	str	r3, [r4, #16]
   1ea68:	mov	r3, #1472	; 0x5c0
   1ea6c:	str	r0, [r0, #2948]	; 0xb84
   1ea70:	str	r3, [r4, #12]
   1ea74:	str	r3, [r4, #20]
   1ea78:	str	r9, [r0, #2952]	; 0xb88
   1ea7c:	b	1e990 <flatcc_emitter@@Base+0x98>
   1ea80:	mov	r2, r7
   1ea84:	ldr	r0, [r4, #8]
   1ea88:	rsb	r1, r2, #0
   1ea8c:	sub	r3, r3, r2
   1ea90:	add	sl, sl, r1
   1ea94:	sub	r7, r7, r2
   1ea98:	str	r3, [r4, #12]
   1ea9c:	add	r0, r0, r1
   1eaa0:	mov	r1, sl
   1eaa4:	str	r0, [r4, #8]
   1eaa8:	bl	12588 <memcpy@plt>
   1eaac:	b	1e990 <flatcc_emitter@@Base+0x98>
   1eab0:	ldr	r0, [r4, #20]
   1eab4:	cmp	r0, r2
   1eab8:	bcs	1eaec <flatcc_emitter@@Base+0x1f4>
   1eabc:	ldr	sl, [pc, #308]	; 1ebf8 <flatcc_emitter@@Base+0x300>
   1eac0:	add	r5, r1, #8
   1eac4:	mov	r9, #2944	; 0xb80
   1eac8:	cmp	r6, #0
   1eacc:	beq	1e97c <flatcc_emitter@@Base+0x84>
   1ead0:	ldr	fp, [r5, #-8]
   1ead4:	ldr	r8, [r5, #-4]
   1ead8:	cmp	r8, #0
   1eadc:	bne	1eb04 <flatcc_emitter@@Base+0x20c>
   1eae0:	sub	r6, r6, #1
   1eae4:	add	r5, r5, #8
   1eae8:	b	1eac8 <flatcc_emitter@@Base+0x1d0>
   1eaec:	ldr	r3, [r4, #16]
   1eaf0:	add	ip, r3, r2
   1eaf4:	sub	r2, r0, r2
   1eaf8:	str	ip, [r4, #16]
   1eafc:	str	r2, [r4, #20]
   1eb00:	b	1e93c <flatcc_emitter@@Base+0x44>
   1eb04:	ldr	r7, [r4, #20]
   1eb08:	cmp	r7, r8
   1eb0c:	bcs	1ebc0 <flatcc_emitter@@Base+0x2c8>
   1eb10:	cmp	r7, #0
   1eb14:	bne	1ebc4 <flatcc_emitter@@Base+0x2cc>
   1eb18:	ldr	r7, [r4, #4]
   1eb1c:	cmp	r7, #0
   1eb20:	beq	1eb38 <flatcc_emitter@@Base+0x240>
   1eb24:	ldr	r2, [r4]
   1eb28:	ldr	r3, [r7, #2944]	; 0xb80
   1eb2c:	cmp	r3, r2
   1eb30:	strne	r3, [r4, #4]
   1eb34:	bne	1eb74 <flatcc_emitter@@Base+0x27c>
   1eb38:	movw	r0, #2956	; 0xb8c
   1eb3c:	bl	125d0 <malloc@plt>
   1eb40:	cmp	r0, #0
   1eb44:	beq	1ea18 <flatcc_emitter@@Base+0x120>
   1eb48:	ldr	r3, [r4, #28]
   1eb4c:	cmp	r7, #0
   1eb50:	add	r3, r3, #2944	; 0xb80
   1eb54:	str	r3, [r4, #28]
   1eb58:	beq	1eb94 <flatcc_emitter@@Base+0x29c>
   1eb5c:	ldr	r3, [r4]
   1eb60:	str	r3, [r0, #2944]	; 0xb80
   1eb64:	str	r7, [r0, #2948]	; 0xb84
   1eb68:	str	r0, [r3, #2948]	; 0xb84
   1eb6c:	str	r0, [r7, #2944]	; 0xb80
   1eb70:	str	r0, [r4, #4]
   1eb74:	ldr	r3, [r4, #4]
   1eb78:	ldr	r2, [r3, #2948]	; 0xb84
   1eb7c:	ldr	r2, [r2, #2952]	; 0xb88
   1eb80:	str	r3, [r4, #16]
   1eb84:	str	r9, [r4, #20]
   1eb88:	add	r2, r2, #2944	; 0xb80
   1eb8c:	str	r2, [r3, #2952]	; 0xb88
   1eb90:	b	1ead8 <flatcc_emitter@@Base+0x1e0>
   1eb94:	add	r3, r0, #1472	; 0x5c0
   1eb98:	str	r0, [r4]
   1eb9c:	str	r0, [r0, #2944]	; 0xb80
   1eba0:	stmib	r4, {r0, r3}
   1eba4:	str	r3, [r4, #16]
   1eba8:	mov	r3, #1472	; 0x5c0
   1ebac:	str	r0, [r0, #2948]	; 0xb84
   1ebb0:	str	r3, [r4, #12]
   1ebb4:	str	r3, [r4, #20]
   1ebb8:	str	sl, [r0, #2952]	; 0xb88
   1ebbc:	b	1ead8 <flatcc_emitter@@Base+0x1e0>
   1ebc0:	mov	r7, r8
   1ebc4:	mov	r2, r7
   1ebc8:	mov	r1, fp
   1ebcc:	ldr	r0, [r4, #16]
   1ebd0:	bl	12588 <memcpy@plt>
   1ebd4:	ldr	r3, [r4, #16]
   1ebd8:	sub	r8, r8, r7
   1ebdc:	add	fp, fp, r7
   1ebe0:	add	r3, r3, r7
   1ebe4:	str	r3, [r4, #16]
   1ebe8:	ldr	r3, [r4, #20]
   1ebec:	sub	r7, r3, r7
   1ebf0:	str	r7, [r4, #20]
   1ebf4:	b	1ead8 <flatcc_emitter@@Base+0x1e0>
   1ebf8:			; <UNDEFINED> instruction: 0xfffffa40

0001ebfc <flatcc_emitter_copy_buffer@@Base>:
   1ebfc:	ldr	ip, [r0, #24]
   1ec00:	push	{r4, r5, r6, lr}
   1ec04:	cmp	ip, r2
   1ec08:	movhi	r6, #0
   1ec0c:	bhi	1ec44 <flatcc_emitter_copy_buffer@@Base+0x48>
   1ec10:	ldr	r6, [r0]
   1ec14:	cmp	r6, #0
   1ec18:	beq	1ec44 <flatcc_emitter_copy_buffer@@Base+0x48>
   1ec1c:	ldr	r2, [r0, #4]
   1ec20:	mov	r5, r1
   1ec24:	mov	r4, r0
   1ec28:	ldr	r1, [r0, #8]
   1ec2c:	cmp	r6, r2
   1ec30:	bne	1ec4c <flatcc_emitter_copy_buffer@@Base+0x50>
   1ec34:	mov	r2, ip
   1ec38:	mov	r0, r5
   1ec3c:	mov	r6, r5
   1ec40:	bl	12588 <memcpy@plt>
   1ec44:	mov	r0, r6
   1ec48:	pop	{r4, r5, r6, pc}
   1ec4c:	ldr	r3, [r4, #12]
   1ec50:	mov	r0, r5
   1ec54:	rsb	r6, r3, #2944	; 0xb80
   1ec58:	mov	r2, r6
   1ec5c:	add	r6, r5, r6
   1ec60:	bl	12588 <memcpy@plt>
   1ec64:	ldr	r2, [r4]
   1ec68:	ldr	r5, [r2, #2944]	; 0xb80
   1ec6c:	ldr	r2, [r4, #4]
   1ec70:	cmp	r2, r5
   1ec74:	bne	1ec90 <flatcc_emitter_copy_buffer@@Base+0x94>
   1ec78:	ldr	r2, [r4, #20]
   1ec7c:	mov	r1, r5
   1ec80:	mov	r0, r6
   1ec84:	rsb	r2, r2, #2944	; 0xb80
   1ec88:	bl	12588 <memcpy@plt>
   1ec8c:	b	1ec44 <flatcc_emitter_copy_buffer@@Base+0x48>
   1ec90:	mov	r1, r5
   1ec94:	mov	r0, r6
   1ec98:	mov	r2, #2944	; 0xb80
   1ec9c:	add	r6, r6, #2944	; 0xb80
   1eca0:	bl	12588 <memcpy@plt>
   1eca4:	ldr	r5, [r5, #2944]	; 0xb80
   1eca8:	b	1ec6c <flatcc_emitter_copy_buffer@@Base+0x70>
   1ecac:	andeq	r0, r0, r0
   1ecb0:	push	{r4, lr}
   1ecb4:	mov	r2, #260	; 0x104
   1ecb8:	ldr	r3, [pc, #8]	; 1ecc8 <flatcc_emitter_copy_buffer@@Base+0xcc>
   1ecbc:	ldr	r1, [pc, #8]	; 1eccc <flatcc_emitter_copy_buffer@@Base+0xd0>
   1ecc0:	ldr	r0, [pc, #8]	; 1ecd0 <flatcc_emitter_copy_buffer@@Base+0xd4>
   1ecc4:	bl	12684 <__assert_fail@plt>
   1ecc8:	andeq	r2, r2, r8, asr #25
   1eccc:	andeq	r3, r2, fp, asr r5
   1ecd0:			; <UNDEFINED> instruction: 0x000235b1

0001ecd4 <grisu3_diy_fp_encode_double@@Base>:
   1ecd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecd8:	sub	sp, sp, #76	; 0x4c
   1ecdc:	sub	r2, r2, r3
   1ece0:	ldr	ip, [sp, #112]	; 0x70
   1ece4:	strd	r0, [sp]
   1ece8:	str	r3, [sp, #24]
   1ecec:	cmp	ip, #0
   1ecf0:	movne	ip, #4
   1ecf4:	orrs	r3, r0, r1
   1ecf8:	bne	1ed70 <grisu3_diy_fp_encode_double@@Base+0x9c>
   1ecfc:	bl	1ecb0 <flatcc_emitter_copy_buffer@@Base+0xb4>
   1ed00:	ldm	sp, {r1, r3}
   1ed04:	lsl	r3, r3, #10
   1ed08:	lsl	sl, r1, #10
   1ed0c:	orr	r3, r3, r1, lsr #22
   1ed10:	str	sl, [sp]
   1ed14:	str	r3, [sp, #4]
   1ed18:	mov	r3, r9
   1ed1c:	ldr	r1, [sp, #4]
   1ed20:	mov	r6, r8
   1ed24:	sub	r9, r3, #10
   1ed28:	and	r7, r1, lr
   1ed2c:	orrs	r1, r6, r7
   1ed30:	beq	1ed00 <grisu3_diy_fp_encode_double@@Base+0x2c>
   1ed34:	ldrd	r0, [sp]
   1ed38:	mov	fp, r3
   1ed3c:	sub	r3, r3, #1
   1ed40:	cmp	r0, #0
   1ed44:	sbcs	r1, r1, #0
   1ed48:	bge	1ed80 <grisu3_diy_fp_encode_double@@Base+0xac>
   1ed4c:	rsb	r3, fp, #0
   1ed50:	cmn	r2, #348	; 0x15c
   1ed54:	lsl	ip, ip, r3
   1ed58:	bge	1ed9c <grisu3_diy_fp_encode_double@@Base+0xc8>
   1ed5c:	ldr	r3, [pc, #1128]	; 1f1cc <grisu3_diy_fp_encode_double@@Base+0x4f8>
   1ed60:	mov	r2, #80	; 0x50
   1ed64:	ldr	r1, [pc, #1124]	; 1f1d0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   1ed68:	ldr	r0, [pc, #1124]	; 1f1d4 <grisu3_diy_fp_encode_double@@Base+0x500>
   1ed6c:	bl	12684 <__assert_fail@plt>
   1ed70:	mov	r3, #0
   1ed74:	ldr	lr, [pc, #1116]	; 1f1d8 <grisu3_diy_fp_encode_double@@Base+0x504>
   1ed78:	mov	r8, r3
   1ed7c:	b	1ed1c <grisu3_diy_fp_encode_double@@Base+0x48>
   1ed80:	ldr	r1, [sp]
   1ed84:	adds	r1, r1, r1
   1ed88:	str	r1, [sp]
   1ed8c:	ldr	r1, [sp, #4]
   1ed90:	adc	r1, r1, r1
   1ed94:	str	r1, [sp, #4]
   1ed98:	b	1ed34 <grisu3_diy_fp_encode_double@@Base+0x60>
   1ed9c:	cmp	r2, #348	; 0x15c
   1eda0:	blt	1edb8 <grisu3_diy_fp_encode_double@@Base+0xe4>
   1eda4:	ldr	r3, [pc, #1056]	; 1f1cc <grisu3_diy_fp_encode_double@@Base+0x4f8>
   1eda8:	mov	r2, #81	; 0x51
   1edac:	ldr	r1, [pc, #1052]	; 1f1d0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   1edb0:	ldr	r0, [pc, #1060]	; 1f1dc <grisu3_diy_fp_encode_double@@Base+0x508>
   1edb4:	b	1ed6c <grisu3_diy_fp_encode_double@@Base+0x98>
   1edb8:	ldr	r3, [pc, #1056]	; 1f1e0 <grisu3_diy_fp_encode_double@@Base+0x50c>
   1edbc:	add	lr, r2, #348	; 0x15c
   1edc0:	asr	lr, lr, #3
   1edc4:	add	lr, r3, lr, lsl #4
   1edc8:	ldr	r1, [lr, #56]	; 0x38
   1edcc:	ldrsh	r6, [lr, #66]	; 0x42
   1edd0:	str	r1, [sp, #60]	; 0x3c
   1edd4:	ldr	r1, [lr, #60]	; 0x3c
   1edd8:	cmp	r2, r6
   1eddc:	str	r1, [sp, #64]	; 0x40
   1ede0:	ldrsh	r1, [lr, #64]	; 0x40
   1ede4:	str	r1, [sp, #68]	; 0x44
   1ede8:	bge	1ee00 <grisu3_diy_fp_encode_double@@Base+0x12c>
   1edec:	add	r3, r3, #24
   1edf0:	mov	r2, #88	; 0x58
   1edf4:	ldr	r1, [pc, #980]	; 1f1d0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   1edf8:	ldr	r0, [pc, #996]	; 1f1e4 <grisu3_diy_fp_encode_double@@Base+0x510>
   1edfc:	b	1ed6c <grisu3_diy_fp_encode_double@@Base+0x98>
   1ee00:	add	lr, r6, #7
   1ee04:	cmp	r2, lr
   1ee08:	ble	1ee20 <grisu3_diy_fp_encode_double@@Base+0x14c>
   1ee0c:	add	r3, r3, #24
   1ee10:	mov	r2, #89	; 0x59
   1ee14:	ldr	r1, [pc, #948]	; 1f1d0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   1ee18:	ldr	r0, [pc, #968]	; 1f1e8 <grisu3_diy_fp_encode_double@@Base+0x514>
   1ee1c:	b	1ed6c <grisu3_diy_fp_encode_double@@Base+0x98>
   1ee20:	cmp	r2, r6
   1ee24:	beq	1ef00 <grisu3_diy_fp_encode_double@@Base+0x22c>
   1ee28:	sub	r2, r2, r6
   1ee2c:	sub	r2, r2, #1
   1ee30:	cmp	r2, #6
   1ee34:	bls	1ee4c <grisu3_diy_fp_encode_double@@Base+0x178>
   1ee38:	ldr	r3, [pc, #940]	; 1f1ec <grisu3_diy_fp_encode_double@@Base+0x518>
   1ee3c:	mov	r2, #185	; 0xb9
   1ee40:	ldr	r1, [pc, #904]	; 1f1d0 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   1ee44:	ldr	r0, [pc, #932]	; 1f1f0 <grisu3_diy_fp_encode_double@@Base+0x51c>
   1ee48:	b	1ed6c <grisu3_diy_fp_encode_double@@Base+0x98>
   1ee4c:	ldr	r3, [pc, #928]	; 1f1f4 <grisu3_diy_fp_encode_double@@Base+0x520>
   1ee50:	ldr	r1, [sp]
   1ee54:	add	lr, r3, r2, lsl #4
   1ee58:	ldr	r6, [r3, r2, lsl #4]
   1ee5c:	ldr	r3, [lr, #4]
   1ee60:	umull	r0, r1, r1, r3
   1ee64:	ldr	r3, [sp, #4]
   1ee68:	umull	r8, r9, r3, r6
   1ee6c:	ldr	r3, [sp]
   1ee70:	strd	r8, [sp, #16]
   1ee74:	ldr	sl, [sp, #16]
   1ee78:	umull	r6, r7, r3, r6
   1ee7c:	mov	r3, #0
   1ee80:	mov	r9, r3
   1ee84:	str	r3, [sp, #16]
   1ee88:	mov	r6, r7
   1ee8c:	adds	r6, r6, sl
   1ee90:	adc	r7, r3, r3
   1ee94:	adds	r6, r6, #-2147483648	; 0x80000000
   1ee98:	adc	r7, r7, r3
   1ee9c:	adds	r6, r6, r0
   1eea0:	ldr	r6, [sp, #20]
   1eea4:	adc	r7, r7, r3
   1eea8:	mov	r8, r7
   1eeac:	mov	r7, r1
   1eeb0:	ldr	r1, [sp, #4]
   1eeb4:	adds	r3, r6, r7
   1eeb8:	str	r3, [sp, #32]
   1eebc:	adc	r3, r9, r9
   1eec0:	str	r3, [sp, #36]	; 0x24
   1eec4:	ldr	r3, [lr, #4]
   1eec8:	ldrd	r6, [sp, #32]
   1eecc:	umlal	r6, r7, r3, r1
   1eed0:	adds	r3, r8, r6
   1eed4:	str	r3, [sp]
   1eed8:	adc	r3, r9, r7
   1eedc:	str	r3, [sp, #4]
   1eee0:	ldr	r3, [lr, #8]
   1eee4:	add	r3, fp, r3
   1eee8:	add	fp, r3, #64	; 0x40
   1eeec:	ldr	r3, [sp, #24]
   1eef0:	add	r3, r3, #1
   1eef4:	add	r2, r3, r2
   1eef8:	cmp	r2, #19
   1eefc:	addgt	ip, ip, #4
   1ef00:	ldr	r2, [sp]
   1ef04:	mov	lr, #0
   1ef08:	ldr	r3, [sp, #64]	; 0x40
   1ef0c:	umull	r2, r3, r2, r3
   1ef10:	strd	r2, [sp, #16]
   1ef14:	ldr	r2, [sp, #4]
   1ef18:	ldr	r3, [sp, #60]	; 0x3c
   1ef1c:	umull	r2, r3, r2, r3
   1ef20:	strd	r2, [sp, #24]
   1ef24:	ldr	r2, [sp]
   1ef28:	ldr	r0, [sp, #24]
   1ef2c:	ldr	r3, [sp, #60]	; 0x3c
   1ef30:	umull	r6, r7, r2, r3
   1ef34:	ldr	r3, [sp, #20]
   1ef38:	mov	sl, r7
   1ef3c:	adds	r0, sl, r0
   1ef40:	ldr	sl, [sp, #16]
   1ef44:	adc	r6, lr, lr
   1ef48:	adds	r0, r0, #-2147483648	; 0x80000000
   1ef4c:	adc	r6, r6, lr
   1ef50:	adds	r0, r0, sl
   1ef54:	ldr	r0, [sp, #28]
   1ef58:	adc	r6, r6, lr
   1ef5c:	mov	r2, r6
   1ef60:	ldr	r6, [sp, #4]
   1ef64:	adds	r3, r0, r3
   1ef68:	str	r3, [sp, #40]	; 0x28
   1ef6c:	adc	r3, lr, lr
   1ef70:	str	r3, [sp, #44]	; 0x2c
   1ef74:	ldrd	r0, [sp, #40]	; 0x28
   1ef78:	ldr	r3, [sp, #64]	; 0x40
   1ef7c:	umlal	r0, r1, r3, r6
   1ef80:	ldr	r3, [sp, #68]	; 0x44
   1ef84:	adds	r4, r2, r0
   1ef88:	adc	r5, lr, r1
   1ef8c:	cmp	ip, lr
   1ef90:	add	r2, fp, r3
   1ef94:	movne	r3, #9
   1ef98:	moveq	r3, #8
   1ef9c:	add	r2, r2, #64	; 0x40
   1efa0:	add	ip, ip, r3
   1efa4:	orrs	r3, r4, r5
   1efa8:	movne	r1, r2
   1efac:	ldrne	r0, [pc, #548]	; 1f1d8 <grisu3_diy_fp_encode_double@@Base+0x504>
   1efb0:	beq	1ecfc <grisu3_diy_fp_encode_double@@Base+0x28>
   1efb4:	and	r3, r5, r0
   1efb8:	str	lr, [sp, #48]	; 0x30
   1efbc:	sub	r6, r1, #10
   1efc0:	str	r3, [sp, #52]	; 0x34
   1efc4:	ldrd	r8, [sp, #48]	; 0x30
   1efc8:	orrs	r3, r8, r9
   1efcc:	beq	1f0d0 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   1efd0:	cmp	r4, #0
   1efd4:	mov	r8, r1
   1efd8:	sbcs	r3, r5, #0
   1efdc:	sub	r1, r1, #1
   1efe0:	bge	1f0ec <grisu3_diy_fp_encode_double@@Base+0x418>
   1efe4:	sub	r2, r2, r8
   1efe8:	add	r3, r8, #64	; 0x40
   1efec:	lsl	ip, ip, r2
   1eff0:	ldr	r2, [pc, #512]	; 1f1f8 <grisu3_diy_fp_encode_double@@Base+0x524>
   1eff4:	cmp	r3, r2
   1eff8:	movge	r3, #64	; 0x40
   1effc:	bge	1f014 <grisu3_diy_fp_encode_double@@Base+0x340>
   1f000:	mvn	r2, #1072	; 0x430
   1f004:	cmp	r3, r2
   1f008:	addge	r3, r8, #1136	; 0x470
   1f00c:	movlt	r3, #0
   1f010:	addge	r3, r3, #2
   1f014:	rsb	lr, r3, #64	; 0x40
   1f018:	cmp	lr, #60	; 0x3c
   1f01c:	ble	1f054 <grisu3_diy_fp_encode_double@@Base+0x380>
   1f020:	rsb	r3, r3, #2
   1f024:	mov	lr, #62	; 0x3e
   1f028:	lsr	r2, r4, r3
   1f02c:	rsb	r0, r3, #32
   1f030:	sub	r1, r3, #32
   1f034:	add	r8, r8, r3
   1f038:	orr	r2, r2, r5, lsl r0
   1f03c:	orr	r2, r2, r5, lsr r1
   1f040:	lsr	r1, r5, r3
   1f044:	asr	r3, ip, r3
   1f048:	mov	r4, r2
   1f04c:	mov	r5, r1
   1f050:	add	ip, r3, #9
   1f054:	lsr	sl, r4, lr
   1f058:	rsb	r0, lr, #32
   1f05c:	sub	r1, lr, #32
   1f060:	lsr	fp, r5, lr
   1f064:	add	r8, lr, r8
   1f068:	orr	sl, sl, r5, lsl r0
   1f06c:	mov	r0, #1
   1f070:	orr	sl, sl, r5, lsr r1
   1f074:	sub	r1, lr, #1
   1f078:	and	r4, r4, r0, lsl r1
   1f07c:	mov	r0, #8
   1f080:	lsl	r0, r0, r1
   1f084:	lsl	r4, r4, #3
   1f088:	add	r1, ip, r0
   1f08c:	cmp	r1, lr
   1f090:	bgt	1f0c4 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   1f094:	adds	sl, sl, #1
   1f098:	mov	r6, #0
   1f09c:	adc	fp, fp, #0
   1f0a0:	and	r7, fp, #2097152	; 0x200000
   1f0a4:	orrs	r3, r6, r7
   1f0a8:	beq	1f0c4 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   1f0ac:	lsr	lr, sl, #1
   1f0b0:	add	r8, r8, #1
   1f0b4:	lsr	r5, fp, #1
   1f0b8:	orr	lr, lr, fp, lsl #31
   1f0bc:	mov	fp, r5
   1f0c0:	mov	sl, lr
   1f0c4:	mvn	r6, #0
   1f0c8:	ldr	r7, [pc, #300]	; 1f1fc <grisu3_diy_fp_encode_double@@Base+0x528>
   1f0cc:	b	1f110 <grisu3_diy_fp_encode_double@@Base+0x43c>
   1f0d0:	lsl	r3, r5, #10
   1f0d4:	lsl	r1, r4, #10
   1f0d8:	orr	r3, r3, r4, lsr #22
   1f0dc:	mov	r4, r1
   1f0e0:	mov	r1, r6
   1f0e4:	mov	r5, r3
   1f0e8:	b	1efb4 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   1f0ec:	adds	r4, r4, r4
   1f0f0:	adc	r5, r5, r5
   1f0f4:	b	1efd0 <grisu3_diy_fp_encode_double@@Base+0x2fc>
   1f0f8:	lsr	lr, sl, #1
   1f0fc:	lsr	r8, fp, #1
   1f100:	orr	lr, lr, fp, lsl #31
   1f104:	mov	fp, r8
   1f108:	mov	r8, r5
   1f10c:	mov	sl, lr
   1f110:	cmp	fp, r7
   1f114:	add	r5, r8, #1
   1f118:	cmpeq	sl, r6
   1f11c:	bhi	1f0f8 <grisu3_diy_fp_encode_double@@Base+0x424>
   1f120:	ldr	lr, [pc, #216]	; 1f200 <grisu3_diy_fp_encode_double@@Base+0x52c>
   1f124:	mov	r6, #0
   1f128:	cmp	r8, lr
   1f12c:	movge	r5, lr
   1f130:	bge	1f144 <grisu3_diy_fp_encode_double@@Base+0x470>
   1f134:	mov	r7, #0
   1f138:	b	1f190 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   1f13c:	adds	sl, sl, sl
   1f140:	adc	fp, fp, fp
   1f144:	and	r3, fp, #1048576	; 0x100000
   1f148:	cmp	r8, r5
   1f14c:	str	r6, [sp, #8]
   1f150:	mov	lr, r8
   1f154:	str	r3, [sp, #12]
   1f158:	beq	1f1bc <grisu3_diy_fp_encode_double@@Base+0x4e8>
   1f15c:	ldrd	r2, [sp, #8]
   1f160:	sub	r8, r8, #1
   1f164:	orrs	r3, r2, r3
   1f168:	beq	1f13c <grisu3_diy_fp_encode_double@@Base+0x468>
   1f16c:	add	lr, lr, #1072	; 0x430
   1f170:	add	lr, lr, #3
   1f174:	asr	r3, lr, #31
   1f178:	mov	r2, lr
   1f17c:	strd	r2, [sp, #8]
   1f180:	ldr	r2, [sp, #8]
   1f184:	ubfx	r3, fp, #0, #20
   1f188:	mov	r6, sl
   1f18c:	orr	r7, r3, r2, lsl #20
   1f190:	ldr	r3, [sp, #116]	; 0x74
   1f194:	cmp	r1, r4
   1f198:	sub	r0, r0, ip
   1f19c:	movgt	r1, #0
   1f1a0:	movle	r1, #1
   1f1a4:	cmp	r0, r4
   1f1a8:	movlt	r0, r1
   1f1ac:	orrge	r0, r1, #1
   1f1b0:	strd	r6, [r3]
   1f1b4:	add	sp, sp, #76	; 0x4c
   1f1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1bc:	ldrd	r2, [sp, #8]
   1f1c0:	orrs	r3, r2, r3
   1f1c4:	beq	1f180 <grisu3_diy_fp_encode_double@@Base+0x4ac>
   1f1c8:	b	1f16c <grisu3_diy_fp_encode_double@@Base+0x498>
   1f1cc:	andeq	r2, r2, r0, ror #25
   1f1d0:			; <UNDEFINED> instruction: 0x000235ba
   1f1d4:	andeq	r3, r2, r1, lsl r6
   1f1d8:			; <UNDEFINED> instruction: 0xffc00000
   1f1dc:	andeq	r3, r2, r0, lsr r6
   1f1e0:	andeq	r2, r2, r8, asr #25
   1f1e4:	andeq	r3, r2, fp, asr r6
   1f1e8:	andeq	r3, r2, sl, ror #12
   1f1ec:	andeq	r3, r2, r0, ror r2
   1f1f0:	andeq	r3, r2, r5, lsl #13
   1f1f4:	andeq	r4, r3, r8, asr #6
   1f1f8:			; <UNDEFINED> instruction: 0xfffffc0e
   1f1fc:			; <UNDEFINED> instruction: 0x001fffff
   1f200:			; <UNDEFINED> instruction: 0xfffffbce
   1f204:	cmp	r1, #1000	; 0x3e8
   1f208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f20c:	mov	r3, #0
   1f210:	addle	r1, r1, #1
   1f214:	addgt	r1, r0, #1000	; 0x3e8
   1f218:	mov	r8, r2
   1f21c:	addle	r1, r0, r1
   1f220:	mov	r2, #0
   1f224:	addgt	r1, r1, #1
   1f228:	cmp	r1, r0
   1f22c:	sub	sp, sp, #44	; 0x2c
   1f230:	mov	r7, r0
   1f234:	strd	r2, [r8]
   1f238:	beq	1f2fc <grisu3_diy_fp_encode_double@@Base+0x628>
   1f23c:	ldrb	r3, [r0]
   1f240:	cmp	r3, #45	; 0x2d
   1f244:	movne	r6, r0
   1f248:	movne	r3, #0
   1f24c:	bne	1f268 <grisu3_diy_fp_encode_double@@Base+0x594>
   1f250:	add	r6, r0, #1
   1f254:	cmp	r1, r6
   1f258:	movne	r3, #1
   1f25c:	bne	1f268 <grisu3_diy_fp_encode_double@@Base+0x594>
   1f260:	mov	r7, #0
   1f264:	b	1f2fc <grisu3_diy_fp_encode_double@@Base+0x628>
   1f268:	ldrb	r0, [r6]
   1f26c:	str	r3, [sp, #20]
   1f270:	cmp	r0, #48	; 0x30
   1f274:	bne	1f2e4 <grisu3_diy_fp_encode_double@@Base+0x610>
   1f278:	add	r3, r6, #1
   1f27c:	cmp	r1, r3
   1f280:	beq	1f294 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   1f284:	ldrb	r2, [r6, #1]
   1f288:	orr	r2, r2, #32
   1f28c:	cmp	r2, #120	; 0x78
   1f290:	beq	1f2fc <grisu3_diy_fp_encode_double@@Base+0x628>
   1f294:	cmp	r1, r3
   1f298:	mov	r6, r3
   1f29c:	beq	1f4a0 <grisu3_diy_fp_encode_double@@Base+0x7cc>
   1f2a0:	ldrb	r2, [r3], #1
   1f2a4:	cmp	r2, #48	; 0x30
   1f2a8:	beq	1f294 <grisu3_diy_fp_encode_double@@Base+0x5c0>
   1f2ac:	mov	sl, #0
   1f2b0:	mov	fp, #0
   1f2b4:	mov	r2, r6
   1f2b8:	mov	ip, #10
   1f2bc:	cmp	r1, r2
   1f2c0:	mov	r0, r2
   1f2c4:	beq	1f2dc <grisu3_diy_fp_encode_double@@Base+0x608>
   1f2c8:	ldrb	r3, [r2]
   1f2cc:	add	r2, r2, #1
   1f2d0:	sub	lr, r3, #48	; 0x30
   1f2d4:	cmp	lr, #9
   1f2d8:	bls	1f31c <grisu3_diy_fp_encode_double@@Base+0x648>
   1f2dc:	mov	ip, #0
   1f2e0:	b	1f348 <grisu3_diy_fp_encode_double@@Base+0x674>
   1f2e4:	sub	r3, r0, #49	; 0x31
   1f2e8:	cmp	r3, #8
   1f2ec:	bls	1f308 <grisu3_diy_fp_encode_double@@Base+0x634>
   1f2f0:	ldr	r3, [sp, #20]
   1f2f4:	cmp	r3, #0
   1f2f8:	movne	r7, #0
   1f2fc:	mov	r0, r7
   1f300:	add	sp, sp, #44	; 0x2c
   1f304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f308:	sub	r0, r0, #48	; 0x30
   1f30c:	add	r6, r6, #1
   1f310:	mov	sl, r0
   1f314:	asr	fp, r0, #31
   1f318:	b	1f2b4 <grisu3_diy_fp_encode_double@@Base+0x5e0>
   1f31c:	add	r5, pc, #748	; 0x2ec
   1f320:	ldrd	r4, [r5]
   1f324:	cmp	fp, r5
   1f328:	cmpeq	sl, r4
   1f32c:	bls	1f478 <grisu3_diy_fp_encode_double@@Base+0x7a4>
   1f330:	cmp	r3, #52	; 0x34
   1f334:	mov	ip, #1
   1f338:	movls	r3, #0
   1f33c:	movhi	r3, #1
   1f340:	adds	sl, sl, r3
   1f344:	adc	fp, fp, #0
   1f348:	sub	r6, r0, r6
   1f34c:	mov	lr, r0
   1f350:	cmp	lr, r1
   1f354:	mov	r4, lr
   1f358:	sub	r2, lr, r0
   1f35c:	beq	1f4e8 <grisu3_diy_fp_encode_double@@Base+0x814>
   1f360:	ldrb	r3, [lr], #1
   1f364:	cmp	r3, #48	; 0x30
   1f368:	beq	1f350 <grisu3_diy_fp_encode_double@@Base+0x67c>
   1f36c:	sub	r3, r3, #49	; 0x31
   1f370:	cmp	r3, #8
   1f374:	bhi	1f3a0 <grisu3_diy_fp_encode_double@@Base+0x6cc>
   1f378:	mov	r3, lr
   1f37c:	cmp	r3, r1
   1f380:	mov	r4, r3
   1f384:	sub	r2, r3, r0
   1f388:	beq	1f5b8 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   1f38c:	ldrb	ip, [r3], #1
   1f390:	sub	ip, ip, #48	; 0x30
   1f394:	cmp	ip, #9
   1f398:	bls	1f37c <grisu3_diy_fp_encode_double@@Base+0x6a8>
   1f39c:	mov	ip, #1
   1f3a0:	ldrb	r3, [r4]
   1f3a4:	cmp	r3, #46	; 0x2e
   1f3a8:	bne	1f4ec <grisu3_diy_fp_encode_double@@Base+0x818>
   1f3ac:	ldrb	r3, [r4, #1]
   1f3b0:	add	r0, r4, #1
   1f3b4:	sub	r3, r3, #48	; 0x30
   1f3b8:	cmp	r3, #9
   1f3bc:	movls	r9, #10
   1f3c0:	strls	r0, [sp, #8]
   1f3c4:	bhi	1f260 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1f3c8:	ldr	r3, [sp, #8]
   1f3cc:	cmp	r3, r1
   1f3d0:	beq	1f41c <grisu3_diy_fp_encode_double@@Base+0x748>
   1f3d4:	mov	lr, r3
   1f3d8:	ldrb	r3, [lr], #1
   1f3dc:	sub	r5, r3, #48	; 0x30
   1f3e0:	cmp	r5, #9
   1f3e4:	bhi	1f41c <grisu3_diy_fp_encode_double@@Base+0x748>
   1f3e8:	add	r5, pc, #544	; 0x220
   1f3ec:	ldrd	r4, [r5]
   1f3f0:	cmp	fp, r5
   1f3f4:	cmpeq	sl, r4
   1f3f8:	bls	1f4b8 <grisu3_diy_fp_encode_double@@Base+0x7e4>
   1f3fc:	cmp	ip, #0
   1f400:	bne	1f41c <grisu3_diy_fp_encode_double@@Base+0x748>
   1f404:	cmp	r3, #52	; 0x34
   1f408:	mov	ip, #1
   1f40c:	movls	r3, #0
   1f410:	movhi	r3, #1
   1f414:	adds	sl, sl, r3
   1f418:	adc	fp, fp, #0
   1f41c:	ldr	r3, [sp, #8]
   1f420:	sub	r0, r3, r0
   1f424:	sub	r5, r2, r3
   1f428:	add	r6, r6, r0
   1f42c:	cmp	r1, r3
   1f430:	mov	r4, r3
   1f434:	add	r2, r5, r3
   1f438:	beq	1f4e8 <grisu3_diy_fp_encode_double@@Base+0x814>
   1f43c:	ldrb	r0, [r3], #1
   1f440:	cmp	r0, #48	; 0x30
   1f444:	beq	1f42c <grisu3_diy_fp_encode_double@@Base+0x758>
   1f448:	sub	r0, r0, #49	; 0x31
   1f44c:	cmp	r0, #8
   1f450:	bhi	1f4ec <grisu3_diy_fp_encode_double@@Base+0x818>
   1f454:	cmp	r3, r1
   1f458:	mov	r4, r3
   1f45c:	beq	1f5b8 <grisu3_diy_fp_encode_double@@Base+0x8e4>
   1f460:	ldrb	r0, [r3], #1
   1f464:	sub	r0, r0, #48	; 0x30
   1f468:	cmp	r0, #9
   1f46c:	bls	1f454 <grisu3_diy_fp_encode_double@@Base+0x780>
   1f470:	mov	ip, #1
   1f474:	b	1f4ec <grisu3_diy_fp_encode_double@@Base+0x818>
   1f478:	umull	r4, r5, sl, ip
   1f47c:	mla	r5, ip, fp, r5
   1f480:	subs	r0, r4, #48	; 0x30
   1f484:	str	r0, [sp, #8]
   1f488:	sbc	r0, r5, #0
   1f48c:	str	r0, [sp, #12]
   1f490:	ldrd	sl, [sp, #8]
   1f494:	adds	sl, sl, r3
   1f498:	adc	fp, fp, #0
   1f49c:	b	1f2bc <grisu3_diy_fp_encode_double@@Base+0x5e8>
   1f4a0:	mov	r0, r1
   1f4a4:	mov	r6, r1
   1f4a8:	mov	ip, #0
   1f4ac:	mov	sl, #0
   1f4b0:	mov	fp, #0
   1f4b4:	b	1f348 <grisu3_diy_fp_encode_double@@Base+0x674>
   1f4b8:	umull	r4, r5, sl, r9
   1f4bc:	sub	r2, r2, #1
   1f4c0:	str	lr, [sp, #8]
   1f4c4:	mla	r5, r9, fp, r5
   1f4c8:	subs	sl, r4, #48	; 0x30
   1f4cc:	str	sl, [sp, #24]
   1f4d0:	sbc	r4, r5, #0
   1f4d4:	str	r4, [sp, #28]
   1f4d8:	ldrd	sl, [sp, #24]
   1f4dc:	adds	sl, sl, r3
   1f4e0:	adc	fp, fp, #0
   1f4e4:	b	1f3c8 <grisu3_diy_fp_encode_double@@Base+0x6f4>
   1f4e8:	mov	r4, r1
   1f4ec:	cmp	r4, r1
   1f4f0:	add	r5, r2, r6
   1f4f4:	beq	1f604 <grisu3_diy_fp_encode_double@@Base+0x930>
   1f4f8:	ldrb	r3, [r4]
   1f4fc:	orr	r3, r3, #32
   1f500:	cmp	r3, #101	; 0x65
   1f504:	bne	1f604 <grisu3_diy_fp_encode_double@@Base+0x930>
   1f508:	sub	r3, r1, r4
   1f50c:	cmp	r3, #1
   1f510:	ble	1f260 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1f514:	ldrb	r3, [r4, #1]
   1f518:	cmp	r3, #43	; 0x2b
   1f51c:	bne	1f5c0 <grisu3_diy_fp_encode_double@@Base+0x8ec>
   1f520:	add	r4, r4, #2
   1f524:	cmp	r1, r4
   1f528:	beq	1f260 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1f52c:	mov	lr, #0
   1f530:	ldrb	r2, [r4]
   1f534:	sub	r2, r2, #48	; 0x30
   1f538:	uxtb	r3, r2
   1f53c:	cmp	r3, #9
   1f540:	addls	r0, r4, #1
   1f544:	bhi	1f260 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1f548:	cmp	r0, r1
   1f54c:	mov	r4, r0
   1f550:	bne	1f5e0 <grisu3_diy_fp_encode_double@@Base+0x90c>
   1f554:	cmp	lr, #0
   1f558:	rsbne	r2, r2, #0
   1f55c:	cmp	r1, r4
   1f560:	add	r5, r2, r5
   1f564:	beq	1f260 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1f568:	orrs	r3, sl, fp
   1f56c:	moveq	r2, #1
   1f570:	movne	r2, #0
   1f574:	cmn	r5, #324	; 0x144
   1f578:	movge	r3, #0
   1f57c:	movlt	r3, #1
   1f580:	orrs	r3, r2, r3
   1f584:	bne	1f5a0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   1f588:	movw	r3, #310	; 0x136
   1f58c:	cmp	r5, r3
   1f590:	ble	1f620 <grisu3_diy_fp_encode_double@@Base+0x94c>
   1f594:	ldr	r3, [pc, #124]	; 1f618 <grisu3_diy_fp_encode_double@@Base+0x944>
   1f598:	mov	r2, #0
   1f59c:	strd	r2, [r8]
   1f5a0:	ldr	r3, [sp, #20]
   1f5a4:	cmp	r3, #0
   1f5a8:	vldrne	d7, [r8]
   1f5ac:	vnegne.f64	d7, d7
   1f5b0:	vstrne	d7, [r8]
   1f5b4:	b	1f8d0 <grisu3_diy_fp_encode_double@@Base+0xbfc>
   1f5b8:	mov	r4, r1
   1f5bc:	b	1f470 <grisu3_diy_fp_encode_double@@Base+0x79c>
   1f5c0:	cmp	r3, #45	; 0x2d
   1f5c4:	addne	r4, r4, #1
   1f5c8:	bne	1f52c <grisu3_diy_fp_encode_double@@Base+0x858>
   1f5cc:	add	r4, r4, #2
   1f5d0:	cmp	r1, r4
   1f5d4:	beq	1f260 <grisu3_diy_fp_encode_double@@Base+0x58c>
   1f5d8:	mov	lr, #1
   1f5dc:	b	1f530 <grisu3_diy_fp_encode_double@@Base+0x85c>
   1f5e0:	ldrb	r3, [r0], #1
   1f5e4:	sub	r9, r3, #48	; 0x30
   1f5e8:	cmp	r9, #9
   1f5ec:	bhi	1f554 <grisu3_diy_fp_encode_double@@Base+0x880>
   1f5f0:	cmp	r2, #32768	; 0x8000
   1f5f4:	movlt	r4, #10
   1f5f8:	mlalt	r2, r4, r2, r3
   1f5fc:	sublt	r2, r2, #48	; 0x30
   1f600:	b	1f548 <grisu3_diy_fp_encode_double@@Base+0x874>
   1f604:	mov	r2, #0
   1f608:	b	1f55c <grisu3_diy_fp_encode_double@@Base+0x888>
   1f60c:	nop	{0}
   1f610:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1f614:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1f618:	svcvc	0x00f00000	; IMB
   1f61c:			; <UNDEFINED> instruction: 0x001fffff
   1f620:	ldr	r3, [pc, #-12]	; 1f61c <grisu3_diy_fp_encode_double@@Base+0x948>
   1f624:	mvn	r2, #0
   1f628:	cmp	fp, r3
   1f62c:	cmpeq	sl, r2
   1f630:	movls	r3, #1
   1f634:	movhi	r3, #0
   1f638:	cmp	r5, #22
   1f63c:	movhi	r3, #0
   1f640:	andls	r3, r3, #1
   1f644:	cmp	r3, #0
   1f648:	beq	1f890 <grisu3_diy_fp_encode_double@@Base+0xbbc>
   1f64c:	mov	r0, sl
   1f650:	mov	r1, fp
   1f654:	bl	21c74 <flatcc_json_parser_struct_as_root@@Base+0x350>
   1f658:	sub	r2, r5, r6
   1f65c:	vmov	d7, r0, r1
   1f660:	add	r2, r2, #22
   1f664:	cmp	r2, #44	; 0x2c
   1f668:	ldrls	pc, [pc, r2, lsl #2]
   1f66c:	b	1f72c <grisu3_diy_fp_encode_double@@Base+0xa58>
   1f670:	andeq	pc, r1, r4, lsr #14
   1f674:	andeq	pc, r1, r4, lsr r7	; <UNPREDICTABLE>
   1f678:	andeq	pc, r1, ip, lsr r7	; <UNPREDICTABLE>
   1f67c:	andeq	pc, r1, r4, asr #14
   1f680:	andeq	pc, r1, ip, asr #14
   1f684:	andeq	pc, r1, r4, asr r7	; <UNPREDICTABLE>
   1f688:	andeq	pc, r1, ip, asr r7	; <UNPREDICTABLE>
   1f68c:	andeq	pc, r1, r4, ror #14
   1f690:	andeq	pc, r1, ip, ror #14
   1f694:	andeq	pc, r1, r4, ror r7	; <UNPREDICTABLE>
   1f698:	andeq	pc, r1, ip, ror r7	; <UNPREDICTABLE>
   1f69c:	andeq	pc, r1, r4, lsl #15
   1f6a0:	andeq	pc, r1, ip, lsl #15
   1f6a4:	muleq	r1, r4, r7
   1f6a8:	muleq	r1, ip, r7
   1f6ac:	andeq	pc, r1, r4, lsr #15
   1f6b0:	andeq	pc, r1, ip, lsr #15
   1f6b4:			; <UNDEFINED> instruction: 0x0001f7b4
   1f6b8:			; <UNDEFINED> instruction: 0x0001f7bc
   1f6bc:	andeq	pc, r1, r4, asr #15
   1f6c0:	andeq	pc, r1, ip, asr #15
   1f6c4:	ldrdeq	pc, [r1], -r4
   1f6c8:	andeq	pc, r1, ip, lsr #14
   1f6cc:	ldrdeq	pc, [r1], -ip
   1f6d0:	andeq	pc, r1, r8, ror #15
   1f6d4:	strdeq	pc, [r1], -r0
   1f6d8:	strdeq	pc, [r1], -r8
   1f6dc:	andeq	pc, r1, r0, lsl #16
   1f6e0:	andeq	pc, r1, r8, lsl #16
   1f6e4:	andeq	pc, r1, r0, lsl r8	; <UNPREDICTABLE>
   1f6e8:	andeq	pc, r1, r8, lsl r8	; <UNPREDICTABLE>
   1f6ec:	andeq	pc, r1, r0, lsr #16
   1f6f0:	andeq	pc, r1, r8, lsr #16
   1f6f4:	andeq	pc, r1, r0, lsr r8	; <UNPREDICTABLE>
   1f6f8:	andeq	pc, r1, r8, lsr r8	; <UNPREDICTABLE>
   1f6fc:	andeq	pc, r1, r0, asr #16
   1f700:	andeq	pc, r1, r8, asr #16
   1f704:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   1f708:	andeq	pc, r1, r8, asr r8	; <UNPREDICTABLE>
   1f70c:	andeq	pc, r1, r0, ror #16
   1f710:	andeq	pc, r1, r8, ror #16
   1f714:	andeq	pc, r1, r0, ror r8	; <UNPREDICTABLE>
   1f718:	andeq	pc, r1, r8, ror r8	; <UNPREDICTABLE>
   1f71c:	andeq	pc, r1, r0, lsl #17
   1f720:	andeq	pc, r1, r8, lsl #17
   1f724:	vldr	d6, [pc, #428]	; 1f8d8 <grisu3_diy_fp_encode_double@@Base+0xc04>
   1f728:	vdiv.f64	d7, d7, d6
   1f72c:	vstr	d7, [r8]
   1f730:	b	1f5a0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   1f734:	vldr	d6, [pc, #420]	; 1f8e0 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   1f738:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f73c:	vldr	d6, [pc, #420]	; 1f8e8 <grisu3_diy_fp_encode_double@@Base+0xc14>
   1f740:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f744:	vldr	d6, [pc, #420]	; 1f8f0 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   1f748:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f74c:	vldr	d6, [pc, #420]	; 1f8f8 <grisu3_diy_fp_encode_double@@Base+0xc24>
   1f750:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f754:	vldr	d6, [pc, #420]	; 1f900 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   1f758:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f75c:	vldr	d6, [pc, #420]	; 1f908 <grisu3_diy_fp_encode_double@@Base+0xc34>
   1f760:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f764:	vldr	d6, [pc, #420]	; 1f910 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   1f768:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f76c:	vldr	d6, [pc, #420]	; 1f918 <grisu3_diy_fp_encode_double@@Base+0xc44>
   1f770:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f774:	vldr	d6, [pc, #420]	; 1f920 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   1f778:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f77c:	vldr	d6, [pc, #420]	; 1f928 <grisu3_diy_fp_encode_double@@Base+0xc54>
   1f780:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f784:	vldr	d6, [pc, #420]	; 1f930 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   1f788:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f78c:	vldr	d6, [pc, #420]	; 1f938 <grisu3_diy_fp_encode_double@@Base+0xc64>
   1f790:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f794:	vldr	d6, [pc, #420]	; 1f940 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   1f798:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f79c:	vldr	d6, [pc, #420]	; 1f948 <grisu3_diy_fp_encode_double@@Base+0xc74>
   1f7a0:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7a4:	vldr	d6, [pc, #420]	; 1f950 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   1f7a8:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7ac:	vldr	d6, [pc, #420]	; 1f958 <grisu3_diy_fp_encode_double@@Base+0xc84>
   1f7b0:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7b4:	vldr	d6, [pc, #420]	; 1f960 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   1f7b8:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7bc:	vldr	d6, [pc, #420]	; 1f968 <grisu3_diy_fp_encode_double@@Base+0xc94>
   1f7c0:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7c4:	vldr	d6, [pc, #420]	; 1f970 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   1f7c8:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7cc:	vldr	d6, [pc, #420]	; 1f978 <grisu3_diy_fp_encode_double@@Base+0xca4>
   1f7d0:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7d4:	vldr	d6, [pc, #420]	; 1f980 <grisu3_diy_fp_encode_double@@Base+0xcac>
   1f7d8:	b	1f728 <grisu3_diy_fp_encode_double@@Base+0xa54>
   1f7dc:	vldr	d6, [pc, #412]	; 1f980 <grisu3_diy_fp_encode_double@@Base+0xcac>
   1f7e0:	vmul.f64	d7, d7, d6
   1f7e4:	b	1f72c <grisu3_diy_fp_encode_double@@Base+0xa58>
   1f7e8:	vldr	d6, [pc, #392]	; 1f978 <grisu3_diy_fp_encode_double@@Base+0xca4>
   1f7ec:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f7f0:	vldr	d6, [pc, #376]	; 1f970 <grisu3_diy_fp_encode_double@@Base+0xc9c>
   1f7f4:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f7f8:	vldr	d6, [pc, #360]	; 1f968 <grisu3_diy_fp_encode_double@@Base+0xc94>
   1f7fc:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f800:	vldr	d6, [pc, #344]	; 1f960 <grisu3_diy_fp_encode_double@@Base+0xc8c>
   1f804:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f808:	vldr	d6, [pc, #328]	; 1f958 <grisu3_diy_fp_encode_double@@Base+0xc84>
   1f80c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f810:	vldr	d6, [pc, #312]	; 1f950 <grisu3_diy_fp_encode_double@@Base+0xc7c>
   1f814:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f818:	vldr	d6, [pc, #296]	; 1f948 <grisu3_diy_fp_encode_double@@Base+0xc74>
   1f81c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f820:	vldr	d6, [pc, #280]	; 1f940 <grisu3_diy_fp_encode_double@@Base+0xc6c>
   1f824:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f828:	vldr	d6, [pc, #264]	; 1f938 <grisu3_diy_fp_encode_double@@Base+0xc64>
   1f82c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f830:	vldr	d6, [pc, #248]	; 1f930 <grisu3_diy_fp_encode_double@@Base+0xc5c>
   1f834:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f838:	vldr	d6, [pc, #232]	; 1f928 <grisu3_diy_fp_encode_double@@Base+0xc54>
   1f83c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f840:	vldr	d6, [pc, #216]	; 1f920 <grisu3_diy_fp_encode_double@@Base+0xc4c>
   1f844:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f848:	vldr	d6, [pc, #200]	; 1f918 <grisu3_diy_fp_encode_double@@Base+0xc44>
   1f84c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f850:	vldr	d6, [pc, #184]	; 1f910 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   1f854:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f858:	vldr	d6, [pc, #168]	; 1f908 <grisu3_diy_fp_encode_double@@Base+0xc34>
   1f85c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f860:	vldr	d6, [pc, #152]	; 1f900 <grisu3_diy_fp_encode_double@@Base+0xc2c>
   1f864:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f868:	vldr	d6, [pc, #136]	; 1f8f8 <grisu3_diy_fp_encode_double@@Base+0xc24>
   1f86c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f870:	vldr	d6, [pc, #120]	; 1f8f0 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   1f874:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f878:	vldr	d6, [pc, #104]	; 1f8e8 <grisu3_diy_fp_encode_double@@Base+0xc14>
   1f87c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f880:	vldr	d6, [pc, #88]	; 1f8e0 <grisu3_diy_fp_encode_double@@Base+0xc0c>
   1f884:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f888:	vldr	d6, [pc, #72]	; 1f8d8 <grisu3_diy_fp_encode_double@@Base+0xc04>
   1f88c:	b	1f7e0 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   1f890:	mov	r3, r6
   1f894:	mov	r2, r5
   1f898:	str	ip, [sp]
   1f89c:	mov	r0, sl
   1f8a0:	mov	r1, fp
   1f8a4:	str	r8, [sp, #4]
   1f8a8:	bl	1ecd4 <grisu3_diy_fp_encode_double@@Base>
   1f8ac:	cmp	r0, #0
   1f8b0:	bne	1f5a0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   1f8b4:	add	r1, sp, #36	; 0x24
   1f8b8:	mov	r0, r7
   1f8bc:	bl	12630 <strtod@plt>
   1f8c0:	ldr	r3, [sp, #36]	; 0x24
   1f8c4:	vstr	d0, [r8]
   1f8c8:	cmp	r4, r3
   1f8cc:	movcs	r4, r3
   1f8d0:	mov	r7, r4
   1f8d4:	b	1f2fc <grisu3_diy_fp_encode_double@@Base+0x628>
   1f8d8:			; <UNDEFINED> instruction: 0x064dd592
   1f8dc:	strmi	pc, [r0], #207	; 0xcf
   1f8e0:	usatle	lr, #2, r0, asr #30
   1f8e4:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1f8e8:	ldmvc	r5!, {r6, sl, fp, pc}
   1f8ec:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1f8f0:	addsvs	r3, r1, r0, lsl #26
   1f8f4:	mvnmi	r5, #228, 16	; 0xe40000
   1f8f8:	strbvs	ip, [lr, -r0, lsl #16]
   1f8fc:			; <UNDEFINED> instruction: 0x43abc16d
   1f900:	ldrbhi	sl, [r8]
   1f904:	cmnmi	r6, #1459617792	; 0x57000000
   1f908:	strbcc	r8, [r0, r0]!
   1f90c:	movtmi	ip, #4985	; 0x1379
   1f910:	ldrtcs	r0, [r4], -r0
   1f914:	movwmi	r6, #52213	; 0xcbf5
   1f918:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1f91c:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1f920:	strb	r0, [r0, #-0]
   1f924:	adcmi	r3, r2, #156	; 0x9c
   1f928:	andge	r0, r0, #0
   1f92c:	rsbmi	r1, sp, #148, 20	; 0x94000
   1f930:	stmda	r0, {}	; <UNPREDICTABLE>
   1f934:	eorsmi	r4, r7, #7733248	; 0x760000
   1f938:	andcs	r0, r0, r0
   1f93c:	andmi	sl, r2, #95	; 0x5f
   1f940:	andeq	r0, r0, r0
   1f944:	bicmi	ip, sp, r5, ror #26
   1f948:	andeq	r0, r0, r0
   1f94c:	orrsmi	sp, r7, r4, lsl #15
   1f950:	andeq	r0, r0, r0
   1f954:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1f958:	andeq	r0, r0, r0
   1f95c:	smlawbmi	lr, r0, r4, r8
   1f960:	andeq	r0, r0, r0
   1f964:	rscsmi	r6, r8, r0, lsl #20
   1f968:	andeq	r0, r0, r0
   1f96c:	sbcmi	r8, r3, r0, lsl #16
   1f970:	andeq	r0, r0, r0
   1f974:	addmi	r4, pc, r0
   1f978:	andeq	r0, r0, r0
   1f97c:	subsmi	r0, r9, r0
   1f980:	andeq	r0, r0, r0
   1f984:	eormi	r0, r4, r0

0001f988 <flatcc_json_parser_error_string@@Base>:
   1f988:	cmp	r0, #34	; 0x22
   1f98c:	ldrls	r3, [pc, #12]	; 1f9a0 <flatcc_json_parser_error_string@@Base+0x18>
   1f990:	addls	r3, r3, r0, lsl #2
   1f994:	ldrls	r0, [r3, #1476]	; 0x5c4
   1f998:	ldrhi	r0, [pc, #4]	; 1f9a4 <flatcc_json_parser_error_string@@Base+0x1c>
   1f99c:	bx	lr
   1f9a0:	andeq	r2, r2, r8, asr #25
   1f9a4:	andeq	r3, r2, r1, lsr #13

0001f9a8 <flatcc_json_parser_set_error@@Base>:
   1f9a8:	ldr	ip, [r0, #24]
   1f9ac:	cmp	ip, #0
   1f9b0:	bne	1f9cc <flatcc_json_parser_set_error@@Base+0x24>
   1f9b4:	str	r3, [r0, #24]
   1f9b8:	ldr	r3, [r0, #4]
   1f9bc:	str	r1, [r0, #36]	; 0x24
   1f9c0:	sub	r3, r1, r3
   1f9c4:	add	r3, r3, #1
   1f9c8:	str	r3, [r0, #20]
   1f9cc:	mov	r0, r2
   1f9d0:	bx	lr
   1f9d4:	ldr	r3, [r0, #12]
   1f9d8:	cmp	r3, #0
   1f9dc:	beq	1fa6c <flatcc_json_parser_set_error@@Base+0xc4>
   1f9e0:	mov	r3, r1
   1f9e4:	push	{lr}		; (str lr, [sp, #-4]!)
   1f9e8:	mov	lr, #0
   1f9ec:	cmp	r3, r2
   1f9f0:	mov	r1, r3
   1f9f4:	bne	1fa0c <flatcc_json_parser_set_error@@Base+0x64>
   1f9f8:	cmp	lr, #46	; 0x2e
   1f9fc:	bne	1fa94 <flatcc_json_parser_set_error@@Base+0xec>
   1fa00:	pop	{lr}		; (ldr lr, [sp], #4)
   1fa04:	mov	r3, #5
   1fa08:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fa0c:	ldrb	ip, [r3], #1
   1fa10:	cmp	ip, #32
   1fa14:	bls	1f9f8 <flatcc_json_parser_set_error@@Base+0x50>
   1fa18:	cmp	ip, #46	; 0x2e
   1fa1c:	cmpne	ip, #95	; 0x5f
   1fa20:	beq	1fa48 <flatcc_json_parser_set_error@@Base+0xa0>
   1fa24:	tst	ip, #128	; 0x80
   1fa28:	bne	1fa48 <flatcc_json_parser_set_error@@Base+0xa0>
   1fa2c:	sub	lr, ip, #48	; 0x30
   1fa30:	cmp	lr, #9
   1fa34:	bls	1fa48 <flatcc_json_parser_set_error@@Base+0xa0>
   1fa38:	orr	lr, ip, #32
   1fa3c:	sub	lr, lr, #97	; 0x61
   1fa40:	cmp	lr, #25
   1fa44:	bhi	1fa94 <flatcc_json_parser_set_error@@Base+0xec>
   1fa48:	mov	lr, ip
   1fa4c:	b	1f9ec <flatcc_json_parser_set_error@@Base+0x44>
   1fa50:	cmp	r3, #92	; 0x5c
   1fa54:	bne	1fa68 <flatcc_json_parser_set_error@@Base+0xc0>
   1fa58:	sub	r3, r2, r1
   1fa5c:	cmp	r3, #1
   1fa60:	ble	1fa8c <flatcc_json_parser_set_error@@Base+0xe4>
   1fa64:	add	r1, r1, #1
   1fa68:	add	r1, r1, #1
   1fa6c:	cmp	r1, r2
   1fa70:	beq	1fa8c <flatcc_json_parser_set_error@@Base+0xe4>
   1fa74:	ldrb	r3, [r1]
   1fa78:	cmp	r3, #34	; 0x22
   1fa7c:	bne	1fa50 <flatcc_json_parser_set_error@@Base+0xa8>
   1fa80:	add	r1, r1, #1
   1fa84:	mov	r0, r1
   1fa88:	bx	lr
   1fa8c:	mov	r3, #20
   1fa90:	b	1fa08 <flatcc_json_parser_set_error@@Base+0x60>
   1fa94:	mov	r0, r1
   1fa98:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa9c:	cmp	r1, r2
   1faa0:	beq	1fab0 <flatcc_json_parser_set_error@@Base+0x108>
   1faa4:	ldrb	r3, [r1]
   1faa8:	cmp	r3, #34	; 0x22
   1faac:	beq	1fab8 <flatcc_json_parser_set_error@@Base+0x110>
   1fab0:	mov	r3, #16
   1fab4:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fab8:	add	r0, r1, #1
   1fabc:	bx	lr
   1fac0:	cmp	r1, r2
   1fac4:	beq	1fad4 <flatcc_json_parser_set_error@@Base+0x12c>
   1fac8:	ldrb	r3, [r1]
   1facc:	cmp	r3, #34	; 0x22
   1fad0:	beq	1fadc <flatcc_json_parser_set_error@@Base+0x134>
   1fad4:	mov	r3, #20
   1fad8:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fadc:	add	r0, r1, #1
   1fae0:	bx	lr

0001fae4 <flatcc_json_parser_string_part@@Base>:
   1fae4:	cmp	r2, r1
   1fae8:	bne	1fb58 <flatcc_json_parser_string_part@@Base+0x74>
   1faec:	mov	r3, #20
   1faf0:	mov	r1, r2
   1faf4:	b	1fb48 <flatcc_json_parser_string_part@@Base+0x64>
   1faf8:	cmp	r2, r1
   1fafc:	beq	1fb4c <flatcc_json_parser_string_part@@Base+0x68>
   1fb00:	mov	lr, r1
   1fb04:	ldrb	r3, [r1], #1
   1fb08:	cmp	r3, #34	; 0x22
   1fb0c:	cmpne	r3, #31
   1fb10:	movhi	ip, #1
   1fb14:	movls	ip, #0
   1fb18:	cmp	r3, #92	; 0x5c
   1fb1c:	moveq	ip, #0
   1fb20:	andne	ip, ip, #1
   1fb24:	cmp	ip, #0
   1fb28:	bne	1faf8 <flatcc_json_parser_string_part@@Base+0x14>
   1fb2c:	cmp	r3, #31
   1fb30:	bls	1fb3c <flatcc_json_parser_string_part@@Base+0x58>
   1fb34:	mov	r0, lr
   1fb38:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb3c:	mov	r3, #17
   1fb40:	mov	r1, lr
   1fb44:	pop	{lr}		; (ldr lr, [sp], #4)
   1fb48:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fb4c:	mov	r3, #20
   1fb50:	mov	r1, r2
   1fb54:	b	1fb44 <flatcc_json_parser_string_part@@Base+0x60>
   1fb58:	push	{lr}		; (str lr, [sp, #-4]!)
   1fb5c:	b	1fb00 <flatcc_json_parser_string_part@@Base+0x1c>

0001fb60 <flatcc_json_parser_space_ext@@Base>:
   1fb60:	mov	r3, r1
   1fb64:	cmp	r3, r2
   1fb68:	mov	r1, r3
   1fb6c:	bne	1fb7c <flatcc_json_parser_space_ext@@Base+0x1c>
   1fb70:	mov	r1, r2
   1fb74:	mov	r0, r1
   1fb78:	bx	lr
   1fb7c:	ldrb	ip, [r1]
   1fb80:	add	r3, r3, #1
   1fb84:	cmp	ip, #32
   1fb88:	beq	1fb64 <flatcc_json_parser_space_ext@@Base+0x4>
   1fb8c:	ldrb	r3, [r1]
   1fb90:	cmp	r3, #32
   1fb94:	bhi	1fb74 <flatcc_json_parser_space_ext@@Base+0x14>
   1fb98:	cmp	r3, #10
   1fb9c:	beq	1fbe8 <flatcc_json_parser_space_ext@@Base+0x88>
   1fba0:	bhi	1fbb4 <flatcc_json_parser_space_ext@@Base+0x54>
   1fba4:	cmp	r3, #9
   1fba8:	beq	1fc08 <flatcc_json_parser_space_ext@@Base+0xa8>
   1fbac:	mov	r3, #5
   1fbb0:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fbb4:	cmp	r3, #13
   1fbb8:	beq	1fbc8 <flatcc_json_parser_space_ext@@Base+0x68>
   1fbbc:	cmp	r3, #32
   1fbc0:	beq	1fb60 <flatcc_json_parser_space_ext@@Base>
   1fbc4:	b	1fbac <flatcc_json_parser_space_ext@@Base+0x4c>
   1fbc8:	sub	r3, r2, r1
   1fbcc:	cmp	r3, #1
   1fbd0:	ldrbgt	r3, [r1, #1]
   1fbd4:	movle	r3, #0
   1fbd8:	subgt	r3, r3, #10
   1fbdc:	clzgt	r3, r3
   1fbe0:	lsrgt	r3, r3, #5
   1fbe4:	add	r1, r1, r3
   1fbe8:	ldr	r3, [r0, #16]
   1fbec:	add	r1, r1, #1
   1fbf0:	str	r1, [r0, #4]
   1fbf4:	add	r3, r3, #1
   1fbf8:	str	r3, [r0, #16]
   1fbfc:	cmp	r2, r1
   1fc00:	bne	1fb8c <flatcc_json_parser_space_ext@@Base+0x2c>
   1fc04:	b	1fb70 <flatcc_json_parser_space_ext@@Base+0x10>
   1fc08:	add	r1, r1, #1
   1fc0c:	b	1fbfc <flatcc_json_parser_space_ext@@Base+0x9c>
   1fc10:	sub	r3, r2, r1
   1fc14:	cmp	r3, #1
   1fc18:	ble	1fc3c <flatcc_json_parser_space_ext@@Base+0xdc>
   1fc1c:	ldrb	r3, [r1]
   1fc20:	cmp	r3, #32
   1fc24:	bhi	1fc40 <flatcc_json_parser_space_ext@@Base+0xe0>
   1fc28:	bne	1fc3c <flatcc_json_parser_space_ext@@Base+0xdc>
   1fc2c:	ldrb	r3, [r1, #1]
   1fc30:	cmp	r3, #32
   1fc34:	addhi	r1, r1, #1
   1fc38:	bhi	1fc40 <flatcc_json_parser_space_ext@@Base+0xe0>
   1fc3c:	b	1fb60 <flatcc_json_parser_space_ext@@Base>
   1fc40:	mov	r0, r1
   1fc44:	bx	lr
   1fc48:	push	{r4, r5, r6, lr}
   1fc4c:	mov	r5, r3
   1fc50:	mov	r6, r0
   1fc54:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   1fc58:	cmp	r2, r0
   1fc5c:	moveq	r3, #0
   1fc60:	beq	1fcec <flatcc_json_parser_space_ext@@Base+0x18c>
   1fc64:	ldrb	r3, [r0]
   1fc68:	mov	r4, r2
   1fc6c:	cmp	r3, #44	; 0x2c
   1fc70:	beq	1fca4 <flatcc_json_parser_space_ext@@Base+0x144>
   1fc74:	mov	r3, #0
   1fc78:	str	r3, [r5]
   1fc7c:	ldrb	r3, [r0]
   1fc80:	cmp	r3, #93	; 0x5d
   1fc84:	movne	r3, #9
   1fc88:	movne	r1, r0
   1fc8c:	bne	1fcc8 <flatcc_json_parser_space_ext@@Base+0x168>
   1fc90:	mov	r2, r4
   1fc94:	add	r1, r0, #1
   1fc98:	mov	r0, r6
   1fc9c:	pop	{r4, r5, r6, lr}
   1fca0:	b	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   1fca4:	add	r1, r0, #1
   1fca8:	mov	r0, r6
   1fcac:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   1fcb0:	cmp	r2, r0
   1fcb4:	bne	1fcd4 <flatcc_json_parser_space_ext@@Base+0x174>
   1fcb8:	mov	r3, #0
   1fcbc:	mov	r1, r2
   1fcc0:	str	r3, [r5]
   1fcc4:	mov	r3, #9
   1fcc8:	mov	r0, r6
   1fccc:	pop	{r4, r5, r6, lr}
   1fcd0:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fcd4:	ldrb	r3, [r0]
   1fcd8:	cmp	r3, #93	; 0x5d
   1fcdc:	movne	r3, #1
   1fce0:	moveq	r3, #0
   1fce4:	streq	r3, [r5]
   1fce8:	beq	1fc90 <flatcc_json_parser_space_ext@@Base+0x130>
   1fcec:	str	r3, [r5]
   1fcf0:	pop	{r4, r5, r6, pc}
   1fcf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcf8:	sub	sp, sp, #28
   1fcfc:	mov	fp, r3
   1fd00:	mov	ip, #0
   1fd04:	cmp	r1, r2
   1fd08:	mov	r6, r0
   1fd0c:	mov	r4, r1
   1fd10:	ldr	r3, [sp, #64]	; 0x40
   1fd14:	mov	r5, r2
   1fd18:	strb	ip, [r3]
   1fd1c:	beq	1fd50 <flatcc_json_parser_space_ext@@Base+0x1f0>
   1fd20:	ldrb	r3, [r1]
   1fd24:	cmp	r3, #34	; 0x22
   1fd28:	addeq	r4, r1, #1
   1fd2c:	streq	ip, [r0, #12]
   1fd30:	beq	1fd50 <flatcc_json_parser_space_ext@@Base+0x1f0>
   1fd34:	cmp	r3, #46	; 0x2e
   1fd38:	movne	r3, #1
   1fd3c:	strne	r3, [r0, #12]
   1fd40:	bne	1fd50 <flatcc_json_parser_space_ext@@Base+0x1f0>
   1fd44:	mov	r3, #5
   1fd48:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fd4c:	mov	r4, r0
   1fd50:	ldr	r3, [r6, #12]
   1fd54:	cmp	r3, #0
   1fd58:	bne	1fd70 <flatcc_json_parser_space_ext@@Base+0x210>
   1fd5c:	mov	r1, r4
   1fd60:	mov	r2, r5
   1fd64:	mov	r0, r6
   1fd68:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   1fd6c:	mov	r4, r0
   1fd70:	cmp	r5, r4
   1fd74:	beq	1fe78 <flatcc_json_parser_space_ext@@Base+0x318>
   1fd78:	mov	r7, #0
   1fd7c:	mov	r9, r7
   1fd80:	mov	r8, fp
   1fd84:	mov	sl, r4
   1fd88:	add	r3, sp, #12
   1fd8c:	mov	r1, r4
   1fd90:	mov	r2, r5
   1fd94:	mov	r0, r6
   1fd98:	str	r3, [sp, #4]
   1fd9c:	add	r3, sp, #16
   1fda0:	str	r3, [sp]
   1fda4:	add	r3, sp, #8
   1fda8:	ldr	ip, [r8]
   1fdac:	blx	ip
   1fdb0:	cmp	r5, r0
   1fdb4:	mov	r4, r0
   1fdb8:	beq	1fe78 <flatcc_json_parser_space_ext@@Base+0x318>
   1fdbc:	cmp	sl, r0
   1fdc0:	bne	1fe0c <flatcc_json_parser_space_ext@@Base+0x2ac>
   1fdc4:	ldr	r3, [r8, #4]!
   1fdc8:	mov	sl, r0
   1fdcc:	cmp	r3, #0
   1fdd0:	bne	1fd88 <flatcc_json_parser_space_ext@@Base+0x228>
   1fdd4:	mov	r3, #23
   1fdd8:	b	1fdec <flatcc_json_parser_space_ext@@Base+0x28c>
   1fddc:	ldr	r3, [r6, #12]
   1fde0:	cmp	r3, #0
   1fde4:	beq	1fe14 <flatcc_json_parser_space_ext@@Base+0x2b4>
   1fde8:	mov	r3, #14
   1fdec:	mov	r1, r4
   1fdf0:	mov	r2, r5
   1fdf4:	mov	r0, r6
   1fdf8:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fdfc:	mov	r4, r0
   1fe00:	b	1fe78 <flatcc_json_parser_space_ext@@Base+0x318>
   1fe04:	mov	r4, r5
   1fe08:	b	1fe78 <flatcc_json_parser_space_ext@@Base+0x318>
   1fe0c:	cmp	r7, #0
   1fe10:	bne	1fddc <flatcc_json_parser_space_ext@@Base+0x27c>
   1fe14:	ldr	r3, [sp, #8]
   1fe18:	cmp	r3, #0
   1fe1c:	movne	r3, #8
   1fe20:	bne	1fe3c <flatcc_json_parser_space_ext@@Base+0x2dc>
   1fe24:	ldrd	r2, [sp, #16]
   1fe28:	cmp	r3, #0
   1fe2c:	cmpeq	r2, #255	; 0xff
   1fe30:	uxtbls	r9, r2
   1fe34:	bls	1fe54 <flatcc_json_parser_space_ext@@Base+0x2f4>
   1fe38:	mov	r3, #7
   1fe3c:	mov	r2, r5
   1fe40:	mov	r1, r4
   1fe44:	mov	r0, r6
   1fe48:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fe4c:	cmp	r5, r0
   1fe50:	beq	1fe04 <flatcc_json_parser_space_ext@@Base+0x2a4>
   1fe54:	ldr	r3, [sp, #64]	; 0x40
   1fe58:	add	r7, r7, #1
   1fe5c:	ldr	r2, [sp, #64]	; 0x40
   1fe60:	ldrb	r3, [r3]
   1fe64:	add	r3, r9, r3
   1fe68:	strb	r3, [r2]
   1fe6c:	ldr	r3, [sp, #12]
   1fe70:	cmp	r3, #0
   1fe74:	bne	1fd80 <flatcc_json_parser_space_ext@@Base+0x220>
   1fe78:	mov	r0, r4
   1fe7c:	add	sp, sp, #28
   1fe80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe84:	cmp	r1, r2
   1fe88:	push	{r4, r5, r6, lr}
   1fe8c:	mov	ip, r2
   1fe90:	mov	r6, r0
   1fe94:	beq	1fea4 <flatcc_json_parser_space_ext@@Base+0x344>
   1fe98:	ldrb	r4, [r1]
   1fe9c:	cmp	r4, #91	; 0x5b
   1fea0:	beq	1fec0 <flatcc_json_parser_space_ext@@Base+0x360>
   1fea4:	mov	r2, #0
   1fea8:	mov	r0, r6
   1feac:	pop	{r4, r5, r6, lr}
   1feb0:	str	r2, [r3]
   1feb4:	mov	r3, #22
   1feb8:	mov	r2, ip
   1febc:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   1fec0:	add	r1, r1, #1
   1fec4:	mov	r5, r3
   1fec8:	mov	r4, r2
   1fecc:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   1fed0:	cmp	r2, r0
   1fed4:	beq	1fefc <flatcc_json_parser_space_ext@@Base+0x39c>
   1fed8:	ldrb	r3, [r0]
   1fedc:	cmp	r3, #93	; 0x5d
   1fee0:	bne	1fefc <flatcc_json_parser_space_ext@@Base+0x39c>
   1fee4:	mov	r3, #0
   1fee8:	add	r1, r0, #1
   1feec:	mov	r0, r6
   1fef0:	str	r3, [r5]
   1fef4:	pop	{r4, r5, r6, lr}
   1fef8:	b	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   1fefc:	mov	r3, #1
   1ff00:	str	r3, [r5]
   1ff04:	pop	{r4, r5, r6, pc}
   1ff08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff0c:	mov	r8, r3
   1ff10:	sub	sp, sp, #20
   1ff14:	mov	r3, #0
   1ff18:	mov	r5, r0
   1ff1c:	mov	r4, r1
   1ff20:	mov	r6, r2
   1ff24:	ldr	r0, [r0]
   1ff28:	str	r3, [sp, #8]
   1ff2c:	ldr	r9, [sp, #56]	; 0x38
   1ff30:	ldr	sl, [sp, #64]	; 0x40
   1ff34:	bl	1d048 <flatcc_builder_start_offset_vector@@Base>
   1ff38:	subs	r7, r0, #0
   1ff3c:	bne	1ffb0 <flatcc_json_parser_space_ext@@Base+0x450>
   1ff40:	mov	r1, r4
   1ff44:	add	r3, sp, #12
   1ff48:	mov	r2, r6
   1ff4c:	mov	r0, r5
   1ff50:	bl	1fe84 <flatcc_json_parser_space_ext@@Base+0x324>
   1ff54:	mov	r4, r0
   1ff58:	add	fp, sp, #8
   1ff5c:	ldr	r3, [sp, #12]
   1ff60:	cmp	r3, #0
   1ff64:	bne	1ffb8 <flatcc_json_parser_space_ext@@Base+0x458>
   1ff68:	cmp	r7, r9
   1ff6c:	bne	1ffc0 <flatcc_json_parser_space_ext@@Base+0x460>
   1ff70:	mov	r1, r8
   1ff74:	ldr	r0, [r5]
   1ff78:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   1ff7c:	mov	r1, r0
   1ff80:	ldr	r0, [r5]
   1ff84:	bl	1da98 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1ff88:	cmp	r0, #0
   1ff8c:	str	r0, [sp, #8]
   1ff90:	beq	1ffb0 <flatcc_json_parser_space_ext@@Base+0x450>
   1ff94:	ldrh	r1, [sp, #60]	; 0x3c
   1ff98:	ldr	r0, [r5]
   1ff9c:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   1ffa0:	cmp	r0, #0
   1ffa4:	ldrne	r3, [sp, #8]
   1ffa8:	strne	r3, [r0]
   1ffac:	bne	1ffd8 <flatcc_json_parser_space_ext@@Base+0x478>
   1ffb0:	mov	r3, #33	; 0x21
   1ffb4:	b	1ffc4 <flatcc_json_parser_space_ext@@Base+0x464>
   1ffb8:	cmp	r7, r9
   1ffbc:	bne	1ffe4 <flatcc_json_parser_space_ext@@Base+0x484>
   1ffc0:	mov	r3, #30
   1ffc4:	mov	r1, r4
   1ffc8:	mov	r2, r6
   1ffcc:	mov	r0, r5
   1ffd0:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   1ffd4:	mov	r4, r0
   1ffd8:	mov	r0, r4
   1ffdc:	add	sp, sp, #20
   1ffe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffe4:	mov	r1, r8
   1ffe8:	ldr	r0, [r5]
   1ffec:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   1fff0:	ldrb	r3, [r0, r7]
   1fff4:	mov	r1, r4
   1fff8:	mov	r2, r6
   1fffc:	mov	r0, r5
   20000:	str	fp, [sp]
   20004:	blx	sl
   20008:	cmp	r6, r0
   2000c:	mov	r4, r0
   20010:	beq	1ffd8 <flatcc_json_parser_space_ext@@Base+0x478>
   20014:	mov	r1, #1
   20018:	ldr	r0, [r5]
   2001c:	bl	1cc58 <flatcc_builder_extend_offset_vector@@Base>
   20020:	cmp	r0, #0
   20024:	beq	1ffb0 <flatcc_json_parser_space_ext@@Base+0x450>
   20028:	ldr	r3, [sp, #8]
   2002c:	mov	r1, r4
   20030:	mov	r2, r6
   20034:	add	r7, r7, #1
   20038:	str	r3, [r0]
   2003c:	add	r3, sp, #12
   20040:	mov	r0, r5
   20044:	bl	1fc48 <flatcc_json_parser_space_ext@@Base+0xe8>
   20048:	mov	r4, r0
   2004c:	b	1ff5c <flatcc_json_parser_space_ext@@Base+0x3fc>

00020050 <flatcc_json_parser_string_escape@@Base>:
   20050:	push	{r4, r5, lr}
   20054:	sub	lr, r2, r1
   20058:	cmp	lr, #1
   2005c:	ble	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20060:	ldrb	ip, [r1]
   20064:	cmp	ip, #92	; 0x5c
   20068:	beq	20080 <flatcc_json_parser_string_escape@@Base+0x30>
   2006c:	mov	ip, #0
   20070:	strb	ip, [r3]
   20074:	mov	r3, #18
   20078:	pop	{r4, r5, lr}
   2007c:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   20080:	ldrb	ip, [r1, #1]
   20084:	cmp	ip, #102	; 0x66
   20088:	beq	2031c <flatcc_json_parser_string_escape@@Base+0x2cc>
   2008c:	bhi	200dc <flatcc_json_parser_string_escape@@Base+0x8c>
   20090:	cmp	ip, #47	; 0x2f
   20094:	beq	200a4 <flatcc_json_parser_string_escape@@Base+0x54>
   20098:	bhi	200b4 <flatcc_json_parser_string_escape@@Base+0x64>
   2009c:	cmp	ip, #34	; 0x22
   200a0:	bne	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   200a4:	mov	r2, #1
   200a8:	strb	r2, [r3]
   200ac:	strb	ip, [r3, #1]
   200b0:	b	200d4 <flatcc_json_parser_string_escape@@Base+0x84>
   200b4:	cmp	ip, #92	; 0x5c
   200b8:	beq	200a4 <flatcc_json_parser_string_escape@@Base+0x54>
   200bc:	cmp	ip, #98	; 0x62
   200c0:	moveq	r2, #1
   200c4:	strbeq	r2, [r3]
   200c8:	moveq	r2, #8
   200cc:	bne	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   200d0:	strb	r2, [r3, #1]
   200d4:	add	r0, r1, #2
   200d8:	pop	{r4, r5, pc}
   200dc:	cmp	ip, #116	; 0x74
   200e0:	beq	202fc <flatcc_json_parser_string_escape@@Base+0x2ac>
   200e4:	bhi	20108 <flatcc_json_parser_string_escape@@Base+0xb8>
   200e8:	cmp	ip, #110	; 0x6e
   200ec:	beq	2030c <flatcc_json_parser_string_escape@@Base+0x2bc>
   200f0:	cmp	ip, #114	; 0x72
   200f4:	moveq	r2, #1
   200f8:	strbeq	r2, [r3]
   200fc:	moveq	r2, #13
   20100:	beq	200d0 <flatcc_json_parser_string_escape@@Base+0x80>
   20104:	b	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20108:	cmp	ip, #117	; 0x75
   2010c:	beq	2019c <flatcc_json_parser_string_escape@@Base+0x14c>
   20110:	cmp	ip, #120	; 0x78
   20114:	bne	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20118:	mov	ip, #1
   2011c:	cmp	lr, #3
   20120:	strb	ip, [r3]
   20124:	ble	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20128:	ldrb	ip, [r1, #2]
   2012c:	sub	lr, ip, #48	; 0x30
   20130:	uxtb	r4, lr
   20134:	cmp	r4, #9
   20138:	lslls	ip, lr, #4
   2013c:	bls	20158 <flatcc_json_parser_string_escape@@Base+0x108>
   20140:	orr	ip, ip, #32
   20144:	sub	lr, ip, #97	; 0x61
   20148:	cmp	lr, #5
   2014c:	bhi	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20150:	sub	ip, ip, #87	; 0x57
   20154:	lsl	ip, ip, #4
   20158:	ldrb	lr, [r1, #3]
   2015c:	uxtb	ip, ip
   20160:	sub	r4, lr, #48	; 0x30
   20164:	uxtb	r4, r4
   20168:	cmp	r4, #9
   2016c:	orrls	ip, r4, ip
   20170:	bls	20190 <flatcc_json_parser_string_escape@@Base+0x140>
   20174:	orr	lr, lr, #32
   20178:	sub	r4, lr, #97	; 0x61
   2017c:	cmp	r4, #5
   20180:	bhi	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20184:	sub	lr, lr, #87	; 0x57
   20188:	orr	ip, lr, ip
   2018c:	uxtb	ip, ip
   20190:	add	r0, r1, #4
   20194:	strb	ip, [r3, #1]
   20198:	pop	{r4, r5, pc}
   2019c:	cmp	lr, #5
   201a0:	ble	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   201a4:	ldrb	ip, [r1, #2]
   201a8:	sub	lr, ip, #48	; 0x30
   201ac:	uxtb	r4, lr
   201b0:	cmp	r4, #9
   201b4:	lslls	ip, lr, #12
   201b8:	uxthls	ip, ip
   201bc:	bls	201dc <flatcc_json_parser_string_escape@@Base+0x18c>
   201c0:	orr	ip, ip, #32
   201c4:	sub	lr, ip, #97	; 0x61
   201c8:	cmp	lr, #5
   201cc:	bhi	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   201d0:	sub	ip, ip, #87	; 0x57
   201d4:	lsl	ip, ip, #12
   201d8:	and	ip, ip, #61440	; 0xf000
   201dc:	ldrb	lr, [r1, #3]
   201e0:	sub	r4, lr, #48	; 0x30
   201e4:	uxtb	r5, r4
   201e8:	cmp	r5, #9
   201ec:	uxthls	r4, r4
   201f0:	orrls	ip, ip, r4, lsl #8
   201f4:	bls	20214 <flatcc_json_parser_string_escape@@Base+0x1c4>
   201f8:	orr	lr, lr, #32
   201fc:	sub	r4, lr, #97	; 0x61
   20200:	cmp	r4, #5
   20204:	bhi	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20208:	sub	lr, lr, #87	; 0x57
   2020c:	uxth	lr, lr
   20210:	orr	ip, ip, lr, lsl #8
   20214:	ldrb	lr, [r1, #4]
   20218:	and	ip, ip, #65280	; 0xff00
   2021c:	sub	r4, lr, #48	; 0x30
   20220:	uxtb	r5, r4
   20224:	cmp	r5, #9
   20228:	uxthls	r4, r4
   2022c:	orrls	ip, ip, r4, lsl #4
   20230:	bls	20250 <flatcc_json_parser_string_escape@@Base+0x200>
   20234:	orr	lr, lr, #32
   20238:	sub	r4, lr, #97	; 0x61
   2023c:	cmp	r4, #5
   20240:	bhi	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   20244:	sub	lr, lr, #87	; 0x57
   20248:	uxth	lr, lr
   2024c:	orr	ip, ip, lr, lsl #4
   20250:	ldrb	lr, [r1, #5]
   20254:	uxth	ip, ip
   20258:	sub	r4, lr, #48	; 0x30
   2025c:	uxtb	r5, r4
   20260:	cmp	r5, #9
   20264:	orrls	r2, ip, r4
   20268:	bls	20284 <flatcc_json_parser_string_escape@@Base+0x234>
   2026c:	orr	lr, lr, #32
   20270:	sub	r4, lr, #97	; 0x61
   20274:	cmp	r4, #5
   20278:	bhi	2006c <flatcc_json_parser_string_escape@@Base+0x1c>
   2027c:	sub	r2, lr, #87	; 0x57
   20280:	orr	r2, ip, r2
   20284:	uxth	r2, r2
   20288:	cmp	r2, #127	; 0x7f
   2028c:	movls	r0, #1
   20290:	strbls	r2, [r3, #1]
   20294:	strbls	r0, [r3]
   20298:	bls	202c8 <flatcc_json_parser_string_escape@@Base+0x278>
   2029c:	and	ip, r2, #63	; 0x3f
   202a0:	cmp	r2, #2048	; 0x800
   202a4:	lsr	r0, r2, #6
   202a8:	orr	ip, ip, #128	; 0x80
   202ac:	bcs	202d0 <flatcc_json_parser_string_escape@@Base+0x280>
   202b0:	mov	r2, #2
   202b4:	strb	r2, [r3]
   202b8:	mvn	r2, r0, lsl #26
   202bc:	strb	ip, [r3, #2]
   202c0:	mvn	r2, r2, lsr #26
   202c4:	strb	r2, [r3, #1]
   202c8:	add	r0, r1, #6
   202cc:	pop	{r4, r5, pc}
   202d0:	mov	lr, #3
   202d4:	strb	lr, [r3]
   202d8:	mvn	lr, #31
   202dc:	orr	r2, lr, r2, lsr #12
   202e0:	strb	ip, [r3, #3]
   202e4:	strb	r2, [r3, #1]
   202e8:	and	r2, r0, #63	; 0x3f
   202ec:	mvn	r2, r2, lsl #25
   202f0:	mvn	r2, r2, lsr #25
   202f4:	strb	r2, [r3, #2]
   202f8:	b	202c8 <flatcc_json_parser_string_escape@@Base+0x278>
   202fc:	mov	r2, #1
   20300:	strb	r2, [r3]
   20304:	mov	r2, #9
   20308:	b	200d0 <flatcc_json_parser_string_escape@@Base+0x80>
   2030c:	mov	r2, #1
   20310:	strb	r2, [r3]
   20314:	mov	r2, #10
   20318:	b	200d0 <flatcc_json_parser_string_escape@@Base+0x80>
   2031c:	mov	r2, #1
   20320:	strb	r2, [r3]
   20324:	mov	r2, #12
   20328:	b	200d0 <flatcc_json_parser_string_escape@@Base+0x80>

0002032c <flatcc_json_parser_skip_constant@@Base>:
   2032c:	push	{r4, r5, r6, lr}
   20330:	mov	r6, r0
   20334:	mov	r4, r1
   20338:	mov	r5, r2
   2033c:	cmp	r4, r5
   20340:	bne	2034c <flatcc_json_parser_skip_constant@@Base+0x20>
   20344:	mov	r0, r4
   20348:	pop	{r4, r5, r6, pc}
   2034c:	ldrb	r3, [r4]
   20350:	sub	r2, r3, #95	; 0x5f
   20354:	clz	r2, r2
   20358:	lsr	r2, r2, #5
   2035c:	orrs	r2, r2, r3, lsr #7
   20360:	bne	20374 <flatcc_json_parser_skip_constant@@Base+0x48>
   20364:	sub	r2, r3, #48	; 0x30
   20368:	cmp	r3, #46	; 0x2e
   2036c:	cmpne	r2, #9
   20370:	bhi	20380 <flatcc_json_parser_skip_constant@@Base+0x54>
   20374:	add	r0, r4, #1
   20378:	mov	r4, r0
   2037c:	b	2033c <flatcc_json_parser_skip_constant@@Base+0x10>
   20380:	orr	r3, r3, #32
   20384:	sub	r3, r3, #97	; 0x61
   20388:	cmp	r3, #25
   2038c:	bls	20374 <flatcc_json_parser_skip_constant@@Base+0x48>
   20390:	mov	r2, r5
   20394:	mov	r1, r4
   20398:	mov	r0, r6
   2039c:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   203a0:	cmp	r4, r0
   203a4:	bne	20378 <flatcc_json_parser_skip_constant@@Base+0x4c>
   203a8:	pop	{r4, r5, r6, pc}

000203ac <flatcc_json_parser_match_constant@@Base>:
   203ac:	push	{r4, r5, r6, r7, r8, lr}
   203b0:	sub	lr, r2, r1
   203b4:	cmp	lr, r3
   203b8:	ldr	r4, [sp, #24]
   203bc:	bgt	203d0 <flatcc_json_parser_match_constant@@Base+0x24>
   203c0:	mov	r3, #0
   203c4:	mov	r0, r1
   203c8:	str	r3, [r4]
   203cc:	pop	{r4, r5, r6, r7, r8, pc}
   203d0:	mov	r7, r1
   203d4:	add	r5, r1, r3
   203d8:	ldr	r1, [r0, #12]
   203dc:	mov	ip, r0
   203e0:	mov	r6, r2
   203e4:	cmp	r1, #0
   203e8:	beq	20460 <flatcc_json_parser_match_constant@@Base+0xb4>
   203ec:	mov	r1, r5
   203f0:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   203f4:	cmp	r2, r0
   203f8:	bne	20404 <flatcc_json_parser_match_constant@@Base+0x58>
   203fc:	mov	r3, #0
   20400:	b	20428 <flatcc_json_parser_match_constant@@Base+0x7c>
   20404:	cmp	r5, r0
   20408:	beq	20440 <flatcc_json_parser_match_constant@@Base+0x94>
   2040c:	ldrb	r3, [r0]
   20410:	sub	r2, r3, #95	; 0x5f
   20414:	clz	r2, r2
   20418:	lsr	r2, r2, #5
   2041c:	orrs	r2, r2, r3, lsr #7
   20420:	beq	20430 <flatcc_json_parser_match_constant@@Base+0x84>
   20424:	mov	r3, #1
   20428:	str	r3, [r4]
   2042c:	pop	{r4, r5, r6, r7, r8, pc}
   20430:	orr	r3, r3, #32
   20434:	sub	r3, r3, #97	; 0x61
   20438:	cmp	r3, #25
   2043c:	bls	20424 <flatcc_json_parser_match_constant@@Base+0x78>
   20440:	mov	r3, #0
   20444:	str	r3, [r4]
   20448:	ldrb	r3, [r0]
   2044c:	and	r2, r3, #223	; 0xdf
   20450:	cmp	r3, #44	; 0x2c
   20454:	cmpne	r2, #93	; 0x5d
   20458:	movne	r0, r7
   2045c:	pop	{r4, r5, r6, r7, r8, pc}
   20460:	ldrb	r3, [r7, r3]
   20464:	cmp	r3, #32
   20468:	bne	20498 <flatcc_json_parser_match_constant@@Base+0xec>
   2046c:	add	r5, r5, #1
   20470:	cmp	r5, r6
   20474:	mov	r0, r5
   20478:	beq	203fc <flatcc_json_parser_match_constant@@Base+0x50>
   2047c:	ldrb	r3, [r5]
   20480:	add	r5, r5, #1
   20484:	cmp	r3, #32
   20488:	beq	20470 <flatcc_json_parser_match_constant@@Base+0xc4>
   2048c:	cmp	r3, #34	; 0x22
   20490:	bne	20424 <flatcc_json_parser_match_constant@@Base+0x78>
   20494:	b	204c0 <flatcc_json_parser_match_constant@@Base+0x114>
   20498:	cmp	r3, #34	; 0x22
   2049c:	beq	204bc <flatcc_json_parser_match_constant@@Base+0x110>
   204a0:	cmp	r3, #92	; 0x5c
   204a4:	str	r1, [r4]
   204a8:	bne	204d4 <flatcc_json_parser_match_constant@@Base+0x128>
   204ac:	mov	r1, r5
   204b0:	mov	r3, #18
   204b4:	pop	{r4, r5, r6, r7, r8, lr}
   204b8:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   204bc:	mov	r0, r5
   204c0:	add	r1, r0, #1
   204c4:	mov	r2, #0
   204c8:	mov	r0, ip
   204cc:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   204d0:	b	203fc <flatcc_json_parser_match_constant@@Base+0x50>
   204d4:	mov	r0, r7
   204d8:	pop	{r4, r5, r6, r7, r8, pc}

000204dc <flatcc_json_parser_double@@Base>:
   204dc:	push	{r4, r5, r6, r7, r8, lr}
   204e0:	mov	r4, #0
   204e4:	mov	r5, #0
   204e8:	cmp	r1, r2
   204ec:	strd	r4, [r3]
   204f0:	beq	20598 <flatcc_json_parser_double@@Base+0xbc>
   204f4:	ldrb	ip, [r1]
   204f8:	cmp	ip, #45	; 0x2d
   204fc:	addeq	ip, r1, #1
   20500:	movne	ip, r1
   20504:	sub	lr, r2, ip
   20508:	cmp	lr, #1
   2050c:	ble	2053c <flatcc_json_parser_double@@Base+0x60>
   20510:	ldrb	lr, [ip]
   20514:	cmp	lr, #46	; 0x2e
   20518:	beq	20530 <flatcc_json_parser_double@@Base+0x54>
   2051c:	cmp	lr, #48	; 0x30
   20520:	bne	2053c <flatcc_json_parser_double@@Base+0x60>
   20524:	ldrb	ip, [ip, #1]
   20528:	cmp	ip, #48	; 0x30
   2052c:	bne	2053c <flatcc_json_parser_double@@Base+0x60>
   20530:	mov	r3, #6
   20534:	pop	{r4, r5, r6, r7, r8, lr}
   20538:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   2053c:	mov	r6, r1
   20540:	mov	r4, r2
   20544:	sub	r1, r4, r1
   20548:	mov	r5, r0
   2054c:	mov	r2, r3
   20550:	mov	r0, r6
   20554:	mov	r7, r3
   20558:	bl	1f204 <grisu3_diy_fp_encode_double@@Base+0x530>
   2055c:	cmp	r6, r0
   20560:	cmpne	r0, #0
   20564:	mov	r1, r0
   20568:	bne	20598 <flatcc_json_parser_double@@Base+0xbc>
   2056c:	vldr	d7, [r7]
   20570:	mov	r2, r4
   20574:	mov	r1, r6
   20578:	mov	r0, r5
   2057c:	vldr	d6, [pc, #28]	; 205a0 <flatcc_json_parser_double@@Base+0xc4>
   20580:	vabs.f64	d7, d7
   20584:	vcmp.f64	d7, d6
   20588:	vmrs	APSR_nzcv, fpscr
   2058c:	movgt	r3, #7
   20590:	movle	r3, #6
   20594:	b	20534 <flatcc_json_parser_double@@Base+0x58>
   20598:	mov	r0, r1
   2059c:	pop	{r4, r5, r6, r7, r8, pc}
   205a0:			; <UNDEFINED> instruction: 0xffffffff
   205a4:	svcvc	0x00efffff

000205a8 <flatcc_json_parser_float@@Base>:
   205a8:	mov	ip, #0
   205ac:	cmp	r1, r2
   205b0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   205b4:	moveq	r0, r1
   205b8:	str	ip, [r3]
   205bc:	beq	20694 <flatcc_json_parser_float@@Base+0xec>
   205c0:	ldrb	ip, [r1]
   205c4:	mov	r7, r3
   205c8:	mov	r4, r2
   205cc:	mov	r5, r1
   205d0:	mov	r6, r0
   205d4:	cmp	ip, #45	; 0x2d
   205d8:	addeq	ip, r1, #1
   205dc:	movne	ip, r1
   205e0:	sub	r3, r2, ip
   205e4:	cmp	r3, #1
   205e8:	ble	20614 <flatcc_json_parser_float@@Base+0x6c>
   205ec:	ldrb	r2, [ip]
   205f0:	cmp	r2, #46	; 0x2e
   205f4:	beq	2060c <flatcc_json_parser_float@@Base+0x64>
   205f8:	cmp	r2, #48	; 0x30
   205fc:	bne	20614 <flatcc_json_parser_float@@Base+0x6c>
   20600:	ldrb	r3, [ip, #1]
   20604:	cmp	r3, #48	; 0x30
   20608:	bne	20614 <flatcc_json_parser_float@@Base+0x6c>
   2060c:	mov	r3, #6
   20610:	b	20684 <flatcc_json_parser_float@@Base+0xdc>
   20614:	mov	r2, sp
   20618:	sub	r1, r4, r5
   2061c:	mov	r0, r5
   20620:	bl	1f204 <grisu3_diy_fp_encode_double@@Base+0x530>
   20624:	vldr	d6, [sp]
   20628:	vldr	s15, [pc, #108]	; 2069c <flatcc_json_parser_float@@Base+0xf4>
   2062c:	vcvt.f32.f64	s14, d6
   20630:	vabs.f32	s11, s14
   20634:	vcmp.f32	s11, s15
   20638:	vmrs	APSR_nzcv, fpscr
   2063c:	vstrle	s14, [r7]
   20640:	ble	20660 <flatcc_json_parser_float@@Base+0xb8>
   20644:	vcmpe.f64	d6, #0.0
   20648:	vldr	s14, [pc, #80]	; 206a0 <flatcc_json_parser_float@@Base+0xf8>
   2064c:	mov	r0, r5
   20650:	vldr	s13, [pc, #76]	; 206a4 <flatcc_json_parser_float@@Base+0xfc>
   20654:	vmrs	APSR_nzcv, fpscr
   20658:	vmovpl.f32	s14, s13
   2065c:	vstr	s14, [r7]
   20660:	cmp	r5, r0
   20664:	cmpne	r0, #0
   20668:	bne	20694 <flatcc_json_parser_float@@Base+0xec>
   2066c:	vldr	s14, [r7]
   20670:	vabs.f32	s14, s14
   20674:	vcmp.f32	s14, s15
   20678:	vmrs	APSR_nzcv, fpscr
   2067c:	movgt	r3, #7
   20680:	ble	2060c <flatcc_json_parser_float@@Base+0x64>
   20684:	mov	r2, r4
   20688:	mov	r1, r5
   2068c:	mov	r0, r6
   20690:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   20694:	add	sp, sp, #12
   20698:	pop	{r4, r5, r6, r7, pc}
   2069c:	svcvc	0x007fffff
   206a0:			; <UNDEFINED> instruction: 0xff800000
   206a4:	svcvc	0x00800000

000206a8 <flatcc_json_parser_generic_json@@Base>:
   206a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206ac:	sub	sp, sp, #524	; 0x20c
   206b0:	mov	r9, #1
   206b4:	add	r6, sp, #8
   206b8:	mov	r3, #0
   206bc:	mov	r5, r0
   206c0:	mov	r7, r1
   206c4:	mov	r4, r2
   206c8:	mov	r8, r6
   206cc:	str	r3, [sp, #4]
   206d0:	mov	sl, r9
   206d4:	cmp	r7, r4
   206d8:	beq	20ab4 <flatcc_json_parser_generic_json@@Base+0x40c>
   206dc:	cmp	r6, r8
   206e0:	beq	20790 <flatcc_json_parser_generic_json@@Base+0xe8>
   206e4:	ldrb	r3, [r6, #-1]
   206e8:	cmp	r3, #125	; 0x7d
   206ec:	bne	20790 <flatcc_json_parser_generic_json@@Base+0xe8>
   206f0:	ldrb	r3, [r7]
   206f4:	cmp	r3, #34	; 0x22
   206f8:	moveq	r3, #0
   206fc:	addeq	r7, r7, #1
   20700:	streq	r3, [r5, #12]
   20704:	beq	2072c <flatcc_json_parser_generic_json@@Base+0x84>
   20708:	cmp	r3, #46	; 0x2e
   2070c:	strne	r9, [r5, #12]
   20710:	bne	2072c <flatcc_json_parser_generic_json@@Base+0x84>
   20714:	mov	r1, r7
   20718:	mov	r3, #5
   2071c:	mov	r2, r4
   20720:	mov	r0, r5
   20724:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   20728:	mov	r7, r0
   2072c:	mov	r2, r4
   20730:	mov	r1, r7
   20734:	mov	r0, r5
   20738:	bl	1f9d4 <flatcc_json_parser_set_error@@Base+0x2c>
   2073c:	mov	r1, r0
   20740:	mov	r0, r5
   20744:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20748:	cmp	r4, r0
   2074c:	mov	r1, r0
   20750:	bne	20764 <flatcc_json_parser_generic_json@@Base+0xbc>
   20754:	mov	r3, #10
   20758:	mov	r2, r4
   2075c:	mov	r1, r4
   20760:	b	20774 <flatcc_json_parser_generic_json@@Base+0xcc>
   20764:	ldrb	r3, [r0]
   20768:	cmp	r3, #58	; 0x3a
   2076c:	beq	20780 <flatcc_json_parser_generic_json@@Base+0xd8>
   20770:	mov	r3, #4
   20774:	mov	r0, r5
   20778:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   2077c:	b	20ab0 <flatcc_json_parser_generic_json@@Base+0x408>
   20780:	add	r1, r0, #1
   20784:	mov	r0, r5
   20788:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   2078c:	mov	r7, r0
   20790:	ldrb	r3, [r7]
   20794:	cmp	r3, #57	; 0x39
   20798:	bhi	207d4 <flatcc_json_parser_generic_json@@Base+0x12c>
   2079c:	cmp	r3, #48	; 0x30
   207a0:	bcs	20890 <flatcc_json_parser_generic_json@@Base+0x1e8>
   207a4:	cmp	r3, #34	; 0x22
   207a8:	beq	2081c <flatcc_json_parser_generic_json@@Base+0x174>
   207ac:	cmp	r3, #45	; 0x2d
   207b0:	beq	20890 <flatcc_json_parser_generic_json@@Base+0x1e8>
   207b4:	mov	r2, r4
   207b8:	mov	r1, r7
   207bc:	mov	r0, r5
   207c0:	bl	2032c <flatcc_json_parser_skip_constant@@Base>
   207c4:	cmp	r7, r0
   207c8:	bne	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   207cc:	mov	r3, #5
   207d0:	b	20a2c <flatcc_json_parser_generic_json@@Base+0x384>
   207d4:	cmp	r3, #91	; 0x5b
   207d8:	beq	20a1c <flatcc_json_parser_generic_json@@Base+0x374>
   207dc:	cmp	r3, #123	; 0x7b
   207e0:	bne	207b4 <flatcc_json_parser_generic_json@@Base+0x10c>
   207e4:	add	r3, sp, #520	; 0x208
   207e8:	cmp	r6, r3
   207ec:	beq	20a28 <flatcc_json_parser_generic_json@@Base+0x380>
   207f0:	mov	r3, #125	; 0x7d
   207f4:	mov	r2, r4
   207f8:	add	r1, r7, #1
   207fc:	mov	r0, r5
   20800:	strb	r3, [r6], #1
   20804:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20808:	cmp	r4, r0
   2080c:	beq	20a64 <flatcc_json_parser_generic_json@@Base+0x3bc>
   20810:	ldrb	r3, [r0]
   20814:	cmp	r3, #125	; 0x7d
   20818:	b	20a60 <flatcc_json_parser_generic_json@@Base+0x3b8>
   2081c:	mov	r2, r4
   20820:	mov	r1, r7
   20824:	mov	r0, r5
   20828:	bl	1fa9c <flatcc_json_parser_set_error@@Base+0xf4>
   2082c:	cmp	r0, r4
   20830:	mov	r1, r0
   20834:	beq	20844 <flatcc_json_parser_generic_json@@Base+0x19c>
   20838:	ldrb	r3, [r0]
   2083c:	cmp	r3, #34	; 0x22
   20840:	bne	20858 <flatcc_json_parser_generic_json@@Base+0x1b0>
   20844:	mov	r2, r4
   20848:	mov	r0, r5
   2084c:	bl	1fac0 <flatcc_json_parser_set_error@@Base+0x118>
   20850:	mov	r7, #0
   20854:	b	20aa0 <flatcc_json_parser_generic_json@@Base+0x3f8>
   20858:	mov	r2, r4
   2085c:	mov	r0, r5
   20860:	bl	1fae4 <flatcc_json_parser_string_part@@Base>
   20864:	cmp	r4, r0
   20868:	mov	r1, r0
   2086c:	beq	2087c <flatcc_json_parser_generic_json@@Base+0x1d4>
   20870:	ldrb	r3, [r0]
   20874:	cmp	r3, #34	; 0x22
   20878:	beq	20844 <flatcc_json_parser_generic_json@@Base+0x19c>
   2087c:	mov	r3, sp
   20880:	mov	r2, r4
   20884:	mov	r0, r5
   20888:	bl	20050 <flatcc_json_parser_string_escape@@Base>
   2088c:	b	2082c <flatcc_json_parser_generic_json@@Base+0x184>
   20890:	cmp	r7, r4
   20894:	moveq	r0, r4
   20898:	beq	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   2089c:	cmp	r3, #45	; 0x2d
   208a0:	bne	208c8 <flatcc_json_parser_generic_json@@Base+0x220>
   208a4:	add	r7, r7, #1
   208a8:	cmp	r4, r7
   208ac:	bne	208c8 <flatcc_json_parser_generic_json@@Base+0x220>
   208b0:	mov	r3, #6
   208b4:	mov	r2, r4
   208b8:	mov	r1, r4
   208bc:	mov	r0, r5
   208c0:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   208c4:	b	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   208c8:	ldrb	r3, [r7]
   208cc:	cmp	r3, #48	; 0x30
   208d0:	bne	208f0 <flatcc_json_parser_generic_json@@Base+0x248>
   208d4:	add	r0, r7, #1
   208d8:	cmp	r4, r0
   208dc:	bne	2092c <flatcc_json_parser_generic_json@@Base+0x284>
   208e0:	mov	r3, #6
   208e4:	mov	r2, r4
   208e8:	mov	r1, r0
   208ec:	b	208bc <flatcc_json_parser_generic_json@@Base+0x214>
   208f0:	sub	r3, r3, #49	; 0x31
   208f4:	cmp	r3, #8
   208f8:	movhi	r3, #6
   208fc:	movhi	r2, r4
   20900:	movhi	r1, r7
   20904:	bhi	208bc <flatcc_json_parser_generic_json@@Base+0x214>
   20908:	add	r7, r7, #1
   2090c:	cmp	r7, r4
   20910:	mov	r0, r7
   20914:	beq	208e0 <flatcc_json_parser_generic_json@@Base+0x238>
   20918:	ldrb	r3, [r0]
   2091c:	add	r7, r7, #1
   20920:	sub	r3, r3, #48	; 0x30
   20924:	cmp	r3, #9
   20928:	bls	2090c <flatcc_json_parser_generic_json@@Base+0x264>
   2092c:	ldrb	r3, [r0]
   20930:	cmp	r3, #46	; 0x2e
   20934:	bne	20978 <flatcc_json_parser_generic_json@@Base+0x2d0>
   20938:	ldrb	r3, [r0, #1]
   2093c:	sub	r3, r3, #48	; 0x30
   20940:	cmp	r3, #9
   20944:	movhi	r3, #6
   20948:	movhi	r2, r4
   2094c:	addhi	r1, r0, #1
   20950:	bhi	208bc <flatcc_json_parser_generic_json@@Base+0x214>
   20954:	add	r3, r0, #2
   20958:	cmp	r4, r3
   2095c:	mov	r0, r3
   20960:	beq	208e0 <flatcc_json_parser_generic_json@@Base+0x238>
   20964:	ldrb	r2, [r0]
   20968:	add	r3, r3, #1
   2096c:	sub	r2, r2, #48	; 0x30
   20970:	cmp	r2, #9
   20974:	bls	20958 <flatcc_json_parser_generic_json@@Base+0x2b0>
   20978:	ldrb	r3, [r0]
   2097c:	and	r3, r3, #223	; 0xdf
   20980:	cmp	r3, #69	; 0x45
   20984:	bne	209f0 <flatcc_json_parser_generic_json@@Base+0x348>
   20988:	add	r1, r0, #1
   2098c:	cmp	r4, r1
   20990:	beq	208b0 <flatcc_json_parser_generic_json@@Base+0x208>
   20994:	ldrb	r3, [r0, #1]
   20998:	sub	r3, r3, #43	; 0x2b
   2099c:	tst	r3, #253	; 0xfd
   209a0:	bne	209b0 <flatcc_json_parser_generic_json@@Base+0x308>
   209a4:	add	r1, r0, #2
   209a8:	cmp	r4, r1
   209ac:	beq	209c0 <flatcc_json_parser_generic_json@@Base+0x318>
   209b0:	ldrb	r3, [r1]
   209b4:	sub	r3, r3, #48	; 0x30
   209b8:	cmp	r3, #9
   209bc:	bls	209cc <flatcc_json_parser_generic_json@@Base+0x324>
   209c0:	mov	r3, #6
   209c4:	mov	r2, r4
   209c8:	b	208bc <flatcc_json_parser_generic_json@@Base+0x214>
   209cc:	add	r1, r1, #1
   209d0:	cmp	r4, r1
   209d4:	mov	r0, r1
   209d8:	beq	208e0 <flatcc_json_parser_generic_json@@Base+0x238>
   209dc:	ldrb	r3, [r0]
   209e0:	add	r1, r1, #1
   209e4:	sub	r3, r3, #48	; 0x30
   209e8:	cmp	r3, #9
   209ec:	bls	209d0 <flatcc_json_parser_generic_json@@Base+0x328>
   209f0:	ldrb	r3, [r0]
   209f4:	cmp	r3, #32
   209f8:	beq	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   209fc:	bhi	20b78 <flatcc_json_parser_generic_json@@Base+0x4d0>
   20a00:	cmp	r3, #9
   20a04:	bcc	208e0 <flatcc_json_parser_generic_json@@Base+0x238>
   20a08:	cmp	r3, #11
   20a0c:	bls	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   20a10:	cmp	r3, #13
   20a14:	bne	208e0 <flatcc_json_parser_generic_json@@Base+0x238>
   20a18:	b	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   20a1c:	add	r3, sp, #520	; 0x208
   20a20:	cmp	r6, r3
   20a24:	bne	20a38 <flatcc_json_parser_generic_json@@Base+0x390>
   20a28:	mov	r3, #2
   20a2c:	mov	r2, r4
   20a30:	mov	r1, r7
   20a34:	b	20774 <flatcc_json_parser_generic_json@@Base+0xcc>
   20a38:	mov	r3, #93	; 0x5d
   20a3c:	mov	r2, r4
   20a40:	add	r1, r7, #1
   20a44:	mov	r0, r5
   20a48:	strb	r3, [r6], #1
   20a4c:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20a50:	cmp	r4, r0
   20a54:	beq	20a64 <flatcc_json_parser_generic_json@@Base+0x3bc>
   20a58:	ldrb	r3, [r0]
   20a5c:	cmp	r3, #93	; 0x5d
   20a60:	beq	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   20a64:	mov	r7, r0
   20a68:	b	206d4 <flatcc_json_parser_generic_json@@Base+0x2c>
   20a6c:	ldrb	r3, [r6, #-1]
   20a70:	sub	fp, r6, #1
   20a74:	cmp	r3, #93	; 0x5d
   20a78:	bne	20ac0 <flatcc_json_parser_generic_json@@Base+0x418>
   20a7c:	mov	r1, r0
   20a80:	add	r3, sp, #4
   20a84:	mov	r2, r4
   20a88:	mov	r0, r5
   20a8c:	bl	1fc48 <flatcc_json_parser_space_ext@@Base+0xe8>
   20a90:	ldr	r3, [sp, #4]
   20a94:	cmp	r3, #0
   20a98:	bne	20a64 <flatcc_json_parser_generic_json@@Base+0x3bc>
   20a9c:	mov	r6, fp
   20aa0:	cmp	r0, r4
   20aa4:	beq	20b5c <flatcc_json_parser_generic_json@@Base+0x4b4>
   20aa8:	cmp	r6, r8
   20aac:	bne	20a6c <flatcc_json_parser_generic_json@@Base+0x3c4>
   20ab0:	mov	r4, r0
   20ab4:	mov	r0, r4
   20ab8:	add	sp, sp, #524	; 0x20c
   20abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ac0:	mov	r1, r0
   20ac4:	mov	r2, r4
   20ac8:	mov	r0, r5
   20acc:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20ad0:	cmp	r4, r0
   20ad4:	streq	r7, [sp, #4]
   20ad8:	beq	20a90 <flatcc_json_parser_generic_json@@Base+0x3e8>
   20adc:	ldrb	r3, [r0]
   20ae0:	cmp	r3, #44	; 0x2c
   20ae4:	beq	20b18 <flatcc_json_parser_generic_json@@Base+0x470>
   20ae8:	str	r7, [sp, #4]
   20aec:	ldrb	r3, [r0]
   20af0:	cmp	r3, #125	; 0x7d
   20af4:	movne	r3, #10
   20af8:	movne	r2, r4
   20afc:	movne	r1, r0
   20b00:	bne	20b38 <flatcc_json_parser_generic_json@@Base+0x490>
   20b04:	add	r1, r0, #1
   20b08:	mov	r2, r4
   20b0c:	mov	r0, r5
   20b10:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20b14:	b	20a90 <flatcc_json_parser_generic_json@@Base+0x3e8>
   20b18:	add	r1, r0, #1
   20b1c:	mov	r0, r5
   20b20:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20b24:	cmp	r4, r0
   20b28:	bne	20b44 <flatcc_json_parser_generic_json@@Base+0x49c>
   20b2c:	mov	r3, #10
   20b30:	mov	r1, r4
   20b34:	str	r7, [sp, #4]
   20b38:	mov	r0, r5
   20b3c:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   20b40:	b	20a90 <flatcc_json_parser_generic_json@@Base+0x3e8>
   20b44:	ldrb	r3, [r0]
   20b48:	cmp	r3, #125	; 0x7d
   20b4c:	strne	sl, [sp, #4]
   20b50:	bne	20a90 <flatcc_json_parser_generic_json@@Base+0x3e8>
   20b54:	str	r7, [sp, #4]
   20b58:	b	20b04 <flatcc_json_parser_generic_json@@Base+0x45c>
   20b5c:	cmp	r6, r8
   20b60:	beq	20ab4 <flatcc_json_parser_generic_json@@Base+0x40c>
   20b64:	ldrb	r3, [r6, #-1]
   20b68:	cmp	r3, #93	; 0x5d
   20b6c:	moveq	r3, #9
   20b70:	movne	r3, #10
   20b74:	b	20758 <flatcc_json_parser_generic_json@@Base+0xb0>
   20b78:	cmp	r3, #58	; 0x3a
   20b7c:	beq	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   20b80:	bhi	20b8c <flatcc_json_parser_generic_json@@Base+0x4e4>
   20b84:	cmp	r3, #44	; 0x2c
   20b88:	b	20a14 <flatcc_json_parser_generic_json@@Base+0x36c>
   20b8c:	cmp	r3, #93	; 0x5d
   20b90:	beq	20850 <flatcc_json_parser_generic_json@@Base+0x1a8>
   20b94:	cmp	r3, #125	; 0x7d
   20b98:	b	20a14 <flatcc_json_parser_generic_json@@Base+0x36c>

00020b9c <flatcc_json_parser_unmatched_symbol@@Base>:
   20b9c:	ldr	r3, [r0, #8]
   20ba0:	tst	r3, #1
   20ba4:	beq	20c0c <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   20ba8:	push	{r4, r5, r6, lr}
   20bac:	mov	r4, r0
   20bb0:	mov	r5, r2
   20bb4:	bl	1f9d4 <flatcc_json_parser_set_error@@Base+0x2c>
   20bb8:	mov	r1, r0
   20bbc:	mov	r0, r4
   20bc0:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20bc4:	cmp	r2, r0
   20bc8:	mov	r1, r0
   20bcc:	beq	20bf8 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   20bd0:	ldrb	r3, [r0]
   20bd4:	cmp	r3, #58	; 0x3a
   20bd8:	bne	20bf8 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   20bdc:	add	r1, r0, #1
   20be0:	mov	r0, r4
   20be4:	bl	1fc10 <flatcc_json_parser_space_ext@@Base+0xb0>
   20be8:	mov	r1, r0
   20bec:	mov	r0, r4
   20bf0:	pop	{r4, r5, r6, lr}
   20bf4:	b	206a8 <flatcc_json_parser_generic_json@@Base>
   20bf8:	mov	r2, r5
   20bfc:	mov	r0, r4
   20c00:	pop	{r4, r5, r6, lr}
   20c04:	mov	r3, #4
   20c08:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   20c0c:	mov	r3, #13
   20c10:	b	20c08 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

00020c14 <flatcc_json_parser_integer@@Base>:
   20c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c18:	cmp	r1, r2
   20c1c:	ldr	r9, [sp, #36]	; 0x24
   20c20:	beq	20ccc <flatcc_json_parser_integer@@Base+0xb8>
   20c24:	mov	ip, r1
   20c28:	mov	r6, #0
   20c2c:	ldrb	r1, [r1]
   20c30:	mov	r7, #0
   20c34:	mov	r8, #10
   20c38:	sub	r1, r1, #45	; 0x2d
   20c3c:	clz	r1, r1
   20c40:	lsr	r1, r1, #5
   20c44:	str	r1, [r3]
   20c48:	add	r3, ip, r1
   20c4c:	cmp	r3, r2
   20c50:	mov	r1, r3
   20c54:	beq	20cc4 <flatcc_json_parser_integer@@Base+0xb0>
   20c58:	ldrb	lr, [r3], #1
   20c5c:	sub	r4, lr, #48	; 0x30
   20c60:	cmp	r4, #9
   20c64:	bls	20c88 <flatcc_json_parser_integer@@Base+0x74>
   20c68:	cmp	r1, ip
   20c6c:	beq	20cd4 <flatcc_json_parser_integer@@Base+0xc0>
   20c70:	and	r3, lr, #223	; 0xdf
   20c74:	cmp	lr, #46	; 0x2e
   20c78:	cmpne	r3, #69	; 0x45
   20c7c:	bne	20cc4 <flatcc_json_parser_integer@@Base+0xb0>
   20c80:	mov	r3, #12
   20c84:	b	20cb0 <flatcc_json_parser_integer@@Base+0x9c>
   20c88:	umull	r4, r5, r6, r8
   20c8c:	mla	r5, r8, r7, r5
   20c90:	subs	sl, r4, #48	; 0x30
   20c94:	sbc	fp, r5, #0
   20c98:	adds	r4, sl, lr
   20c9c:	adc	r5, fp, #0
   20ca0:	cmp	r7, r5
   20ca4:	cmpeq	r6, r4
   20ca8:	bls	20cb8 <flatcc_json_parser_integer@@Base+0xa4>
   20cac:	mov	r3, #8
   20cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cb4:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   20cb8:	mov	r6, r4
   20cbc:	mov	r7, r5
   20cc0:	b	20c4c <flatcc_json_parser_integer@@Base+0x38>
   20cc4:	mov	r2, r1
   20cc8:	strd	r6, [r9]
   20ccc:	mov	r0, r2
   20cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cd4:	mov	r2, ip
   20cd8:	b	20ccc <flatcc_json_parser_integer@@Base+0xb8>
   20cdc:	push	{r4, r5, r6, r7, lr}
   20ce0:	mov	lr, #0
   20ce4:	sub	sp, sp, #28
   20ce8:	mov	r6, #0
   20cec:	mov	r7, #0
   20cf0:	cmp	r1, r2
   20cf4:	moveq	r0, r1
   20cf8:	strb	lr, [r3]
   20cfc:	str	lr, [sp, #12]
   20d00:	strd	r6, [sp, #16]
   20d04:	beq	20d68 <flatcc_json_parser_integer@@Base+0x154>
   20d08:	mov	r6, r3
   20d0c:	add	r3, sp, #16
   20d10:	mov	r7, r1
   20d14:	mov	r5, r0
   20d18:	str	r3, [sp]
   20d1c:	add	r3, sp, #12
   20d20:	mov	r4, r2
   20d24:	bl	20c14 <flatcc_json_parser_integer@@Base>
   20d28:	cmp	r7, r0
   20d2c:	beq	20d68 <flatcc_json_parser_integer@@Base+0x154>
   20d30:	ldr	r3, [sp, #12]
   20d34:	cmp	r3, #0
   20d38:	movne	r3, #8
   20d3c:	bne	20d58 <flatcc_json_parser_integer@@Base+0x144>
   20d40:	ldrd	r2, [sp, #16]
   20d44:	cmp	r3, #0
   20d48:	cmpeq	r2, #255	; 0xff
   20d4c:	strbls	r2, [r6]
   20d50:	bls	20d68 <flatcc_json_parser_integer@@Base+0x154>
   20d54:	mov	r3, #7
   20d58:	mov	r1, r0
   20d5c:	mov	r2, r4
   20d60:	mov	r0, r5
   20d64:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   20d68:	add	sp, sp, #28
   20d6c:	pop	{r4, r5, r6, r7, pc}

00020d70 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   20d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d74:	sub	sp, sp, #36	; 0x24
   20d78:	mov	r6, r0
   20d7c:	mov	r8, r2
   20d80:	str	r3, [sp, #8]
   20d84:	ldr	r3, [sp, #72]	; 0x48
   20d88:	str	r3, [sp, #20]
   20d8c:	bl	1fa9c <flatcc_json_parser_set_error@@Base+0xf4>
   20d90:	mov	r1, r0
   20d94:	mov	r9, r0
   20d98:	mov	r0, r6
   20d9c:	bl	1fae4 <flatcc_json_parser_string_part@@Base>
   20da0:	cmp	r2, r0
   20da4:	mov	r7, r0
   20da8:	beq	20f04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   20dac:	ldrb	r3, [r0]
   20db0:	cmp	r3, #34	; 0x22
   20db4:	bne	20f04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x194>
   20db8:	sub	r2, r0, r9
   20dbc:	sub	r3, r0, r9
   20dc0:	lsr	r5, r2, #2
   20dc4:	str	r3, [sp, #12]
   20dc8:	and	r3, r3, #3
   20dcc:	add	r5, r5, r5, lsl #1
   20dd0:	cmp	r3, #2
   20dd4:	addeq	r5, r5, #1
   20dd8:	beq	20de4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   20ddc:	cmp	r3, #3
   20de0:	addeq	r5, r5, #2
   20de4:	mov	r2, #1
   20de8:	mvn	r3, #0
   20dec:	ldr	r0, [r6]
   20df0:	mov	r1, r2
   20df4:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   20df8:	subs	r4, r0, #0
   20dfc:	bne	2106c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   20e00:	mov	r1, r5
   20e04:	ldr	r0, [r6]
   20e08:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   20e0c:	subs	r3, r0, #0
   20e10:	str	r3, [sp, #16]
   20e14:	beq	2106c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   20e18:	ldr	r3, [pc, #628]	; 21094 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   20e1c:	mov	sl, r9
   20e20:	ldr	r1, [sp, #20]
   20e24:	add	r2, r3, #256	; 0x100
   20e28:	cmp	r1, #0
   20e2c:	mov	r1, r0
   20e30:	moveq	r3, r2
   20e34:	cmp	r5, #0
   20e38:	mov	lr, r3
   20e3c:	sub	r2, r7, r9
   20e40:	movne	r3, r5
   20e44:	mvneq	r3, #0
   20e48:	str	r3, [sp, #4]
   20e4c:	mov	ip, r2
   20e50:	mov	r0, #0
   20e54:	cmp	r0, ip
   20e58:	beq	20f94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   20e5c:	ldrb	r3, [sl, r0]
   20e60:	add	fp, sp, #32
   20e64:	add	fp, fp, r0
   20e68:	ldrb	r3, [lr, r3]
   20e6c:	cmp	r3, #63	; 0x3f
   20e70:	strb	r3, [fp, #-4]
   20e74:	bls	20e8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   20e78:	cmp	r3, #65	; 0x41
   20e7c:	bne	20f24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b4>
   20e80:	add	sl, sl, #1
   20e84:	sub	ip, ip, #1
   20e88:	sub	r0, r0, #1
   20e8c:	add	r0, r0, #1
   20e90:	cmp	r0, #3
   20e94:	bls	20e54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe4>
   20e98:	ldr	r3, [sp, #4]
   20e9c:	cmp	r3, #2
   20ea0:	bls	20f84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   20ea4:	ldrb	r0, [sp, #29]
   20ea8:	add	sl, sl, #4
   20eac:	add	r1, r1, #3
   20eb0:	ldrb	r3, [sp, #28]
   20eb4:	lsr	r2, r0, #4
   20eb8:	orr	r2, r2, r3, lsl #2
   20ebc:	strb	r2, [r1, #-3]
   20ec0:	ldrb	r2, [sp, #30]
   20ec4:	lsr	r3, r2, #2
   20ec8:	orr	r3, r3, r0, lsl #4
   20ecc:	strb	r3, [r1, #-2]
   20ed0:	ldrb	r3, [sp, #31]
   20ed4:	orr	r2, r3, r2, lsl #6
   20ed8:	ldr	r3, [sp, #4]
   20edc:	strb	r2, [r1, #-1]
   20ee0:	sub	r2, ip, #4
   20ee4:	subs	r3, r3, #3
   20ee8:	str	r3, [sp, #4]
   20eec:	bne	20e4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   20ef0:	ldr	r3, [sp, #12]
   20ef4:	cmp	r4, #0
   20ef8:	sub	r2, r3, r2
   20efc:	beq	2100c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x29c>
   20f00:	add	r7, r9, r2
   20f04:	ldr	r2, [sp, #8]
   20f08:	mov	r3, #0
   20f0c:	str	r3, [r2]
   20f10:	ldr	r3, [sp, #20]
   20f14:	cmp	r3, #0
   20f18:	movne	r3, #32
   20f1c:	moveq	r3, #31
   20f20:	b	2107c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   20f24:	cmp	r3, #66	; 0x42
   20f28:	addeq	r3, r0, #1
   20f2c:	beq	20f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   20f30:	mov	r3, r0
   20f34:	b	20f5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   20f38:	ldrb	fp, [sl, r3]
   20f3c:	ldrb	fp, [lr, fp]
   20f40:	sub	fp, fp, #65	; 0x41
   20f44:	cmp	fp, #1
   20f48:	bhi	20f5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   20f4c:	add	r3, r3, #1
   20f50:	cmp	r3, #7
   20f54:	cmpls	r3, ip
   20f58:	bcc	20f38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c8>
   20f5c:	sub	r3, ip, r3
   20f60:	mov	ip, r0
   20f64:	cmp	ip, #2
   20f68:	beq	20f9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x22c>
   20f6c:	cmp	ip, #3
   20f70:	beq	20fc4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   20f74:	cmp	ip, #0
   20f78:	movne	r4, #4
   20f7c:	moveq	r2, r3
   20f80:	b	20ef0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   20f84:	mov	r4, #1
   20f88:	b	20ef0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   20f8c:	mov	r4, #5
   20f90:	b	20ef0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   20f94:	mov	r3, #0
   20f98:	b	20f64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   20f9c:	ldrb	r0, [sp, #29]
   20fa0:	lsl	r4, r0, #4
   20fa4:	ands	r4, r4, #255	; 0xff
   20fa8:	bne	20f8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   20fac:	ldrb	r2, [sp, #28]
   20fb0:	lsr	r0, r0, #4
   20fb4:	orr	r0, r0, r2, lsl #2
   20fb8:	strb	r0, [r1], #1
   20fbc:	mov	r2, r3
   20fc0:	b	20ef0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   20fc4:	ldrb	r0, [sp, #30]
   20fc8:	lsl	r4, r0, #6
   20fcc:	ands	r4, r4, #255	; 0xff
   20fd0:	bne	20f8c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   20fd4:	ldr	ip, [sp, #4]
   20fd8:	cmp	ip, #1
   20fdc:	ldreq	r4, [sp, #4]
   20fe0:	beq	20ef0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   20fe4:	lsr	r0, r0, #2
   20fe8:	add	r1, r1, #2
   20fec:	ldrb	ip, [sp, #29]
   20ff0:	ldrb	lr, [sp, #28]
   20ff4:	lsr	r2, ip, #4
   20ff8:	orr	ip, r0, ip, lsl #4
   20ffc:	orr	r2, r2, lr, lsl #2
   21000:	strb	r2, [r1, #-2]
   21004:	strb	ip, [r1, #-1]
   21008:	b	20fbc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x24c>
   2100c:	ldr	r3, [sp, #12]
   21010:	cmp	r3, r2
   21014:	bne	20f00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   21018:	ldr	r3, [sp, #16]
   2101c:	sub	r1, r1, r3
   21020:	cmp	r5, r1
   21024:	bhi	21058 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   21028:	ldr	r0, [r6]
   2102c:	bl	1d94c <flatcc_builder_end_vector@@Base>
   21030:	ldr	r3, [sp, #8]
   21034:	cmp	r0, #0
   21038:	str	r0, [r3]
   2103c:	beq	2106c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   21040:	mov	r2, r8
   21044:	mov	r1, r7
   21048:	mov	r0, r6
   2104c:	add	sp, sp, #36	; 0x24
   21050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21054:	b	1fac0 <flatcc_json_parser_set_error@@Base+0x118>
   21058:	sub	r1, r5, r1
   2105c:	ldr	r0, [r6]
   21060:	bl	1ce9c <flatcc_builder_truncate_vector@@Base>
   21064:	cmp	r0, #0
   21068:	beq	21028 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   2106c:	ldr	r2, [sp, #8]
   21070:	mov	r3, #0
   21074:	str	r3, [r2]
   21078:	mov	r3, #33	; 0x21
   2107c:	mov	r2, r8
   21080:	mov	r1, r7
   21084:	mov	r0, r6
   21088:	add	sp, sp, #36	; 0x24
   2108c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21090:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   21094:	andeq	r3, r2, r8, lsl r3

00021098 <flatcc_json_parser_build_string@@Base>:
   21098:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   2109c:	mov	r5, r0
   210a0:	mov	r6, r2
   210a4:	mov	r8, r3
   210a8:	bl	1fa9c <flatcc_json_parser_set_error@@Base+0xf4>
   210ac:	mov	r1, r0
   210b0:	mov	r7, r0
   210b4:	mov	r0, r5
   210b8:	bl	1fae4 <flatcc_json_parser_string_part@@Base>
   210bc:	cmp	r2, r0
   210c0:	mov	r4, r0
   210c4:	beq	21108 <flatcc_json_parser_build_string@@Base+0x70>
   210c8:	ldrb	r3, [r0]
   210cc:	cmp	r3, #34	; 0x22
   210d0:	bne	21108 <flatcc_json_parser_build_string@@Base+0x70>
   210d4:	sub	r2, r0, r7
   210d8:	mov	r1, r7
   210dc:	ldr	r0, [r5]
   210e0:	bl	1df00 <flatcc_builder_create_string@@Base>
   210e4:	mov	r1, r4
   210e8:	mov	r2, r6
   210ec:	str	r0, [r8]
   210f0:	mov	r0, r5
   210f4:	bl	1fac0 <flatcc_json_parser_set_error@@Base+0x118>
   210f8:	mov	r4, r0
   210fc:	mov	r0, r4
   21100:	add	sp, sp, #8
   21104:	pop	{r4, r5, r6, r7, r8, pc}
   21108:	ldr	r0, [r5]
   2110c:	bl	1d090 <flatcc_builder_start_string@@Base>
   21110:	cmp	r0, #0
   21114:	bne	211c0 <flatcc_json_parser_build_string@@Base+0x128>
   21118:	sub	r2, r4, r7
   2111c:	mov	r1, r7
   21120:	ldr	r0, [r5]
   21124:	bl	1cdcc <flatcc_builder_append_string@@Base>
   21128:	cmp	r0, #0
   2112c:	beq	211c0 <flatcc_json_parser_build_string@@Base+0x128>
   21130:	cmp	r4, r6
   21134:	beq	21144 <flatcc_json_parser_build_string@@Base+0xac>
   21138:	ldrb	r3, [r4]
   2113c:	cmp	r3, #34	; 0x22
   21140:	bne	21150 <flatcc_json_parser_build_string@@Base+0xb8>
   21144:	ldr	r0, [r5]
   21148:	bl	1dff8 <flatcc_builder_end_string@@Base>
   2114c:	b	210e4 <flatcc_json_parser_build_string@@Base+0x4c>
   21150:	mov	r1, r4
   21154:	add	r3, sp, #4
   21158:	mov	r2, r6
   2115c:	mov	r0, r5
   21160:	bl	20050 <flatcc_json_parser_string_escape@@Base>
   21164:	mov	r4, r0
   21168:	ldrb	r2, [sp, #4]
   2116c:	add	r1, sp, #5
   21170:	ldr	r0, [r5]
   21174:	bl	1cdcc <flatcc_builder_append_string@@Base>
   21178:	cmp	r0, #0
   2117c:	beq	211c0 <flatcc_json_parser_build_string@@Base+0x128>
   21180:	mov	r2, r6
   21184:	mov	r1, r4
   21188:	mov	r0, r5
   2118c:	bl	1fae4 <flatcc_json_parser_string_part@@Base>
   21190:	cmp	r6, r0
   21194:	mov	r7, r0
   21198:	bne	211a4 <flatcc_json_parser_build_string@@Base+0x10c>
   2119c:	mov	r4, r7
   211a0:	b	21130 <flatcc_json_parser_build_string@@Base+0x98>
   211a4:	sub	r2, r0, r4
   211a8:	mov	r1, r4
   211ac:	ldr	r0, [r5]
   211b0:	bl	1cdcc <flatcc_builder_append_string@@Base>
   211b4:	cmp	r0, #0
   211b8:	bne	2119c <flatcc_json_parser_build_string@@Base+0x104>
   211bc:	mov	r4, r7
   211c0:	mov	r3, #0
   211c4:	str	r3, [r8]
   211c8:	b	210fc <flatcc_json_parser_build_string@@Base+0x64>

000211cc <flatcc_json_parser_prepare_unions@@Base>:
   211cc:	push	{r4, r5, r6, r7, r8, lr}
   211d0:	mov	r5, r1
   211d4:	mov	r1, #24
   211d8:	mov	r4, r0
   211dc:	mov	r7, r2
   211e0:	mul	r1, r1, r3
   211e4:	mov	r6, r3
   211e8:	ldr	r8, [sp, #24]
   211ec:	add	r1, r1, #8
   211f0:	ldr	r0, [r0]
   211f4:	bl	1c498 <flatcc_builder_enter_user_frame@@Base>
   211f8:	cmp	r0, #0
   211fc:	str	r0, [r8]
   21200:	bne	2121c <flatcc_json_parser_prepare_unions@@Base+0x50>
   21204:	mov	r2, r7
   21208:	mov	r1, r5
   2120c:	mov	r0, r4
   21210:	mov	r3, #33	; 0x21
   21214:	pop	{r4, r5, r6, r7, r8, lr}
   21218:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   2121c:	mov	r1, r0
   21220:	ldr	r0, [r4]
   21224:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   21228:	str	r6, [r0]
   2122c:	mov	r0, r5
   21230:	pop	{r4, r5, r6, r7, r8, pc}

00021234 <flatcc_json_parser_finalize_unions@@Base>:
   21234:	push	{r4, r5, r6, r7, r8, lr}
   21238:	mov	r5, r0
   2123c:	mov	r4, r1
   21240:	mov	r1, r3
   21244:	mov	r6, r3
   21248:	mov	r7, r2
   2124c:	ldr	r0, [r0]
   21250:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   21254:	ldr	r3, [r0, #4]
   21258:	cmp	r3, #0
   2125c:	beq	21278 <flatcc_json_parser_finalize_unions@@Base+0x44>
   21260:	mov	r1, r4
   21264:	mov	r3, #27
   21268:	mov	r2, r7
   2126c:	mov	r0, r5
   21270:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   21274:	mov	r4, r0
   21278:	mov	r1, r6
   2127c:	ldr	r0, [r5]
   21280:	bl	1c550 <flatcc_builder_exit_user_frame_at@@Base>
   21284:	mov	r0, r4
   21288:	pop	{r4, r5, r6, r7, r8, pc}

0002128c <flatcc_json_parser_union@@Base>:
   2128c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21290:	mov	r4, r0
   21294:	mov	r7, r1
   21298:	mov	r5, r3
   2129c:	mov	r6, r2
   212a0:	ldr	r0, [r0]
   212a4:	ldr	r1, [sp, #44]	; 0x2c
   212a8:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   212ac:	mov	r3, #24
   212b0:	mla	r3, r3, r5, r0
   212b4:	ldr	r2, [r3, #8]
   212b8:	cmp	r2, #0
   212bc:	movne	r3, #28
   212c0:	bne	21324 <flatcc_json_parser_union@@Base+0x98>
   212c4:	ldrb	r2, [r3, #20]
   212c8:	cmp	r2, #0
   212cc:	bne	21310 <flatcc_json_parser_union@@Base+0x84>
   212d0:	ldr	r2, [r0, #4]
   212d4:	mov	r1, r7
   212d8:	add	r2, r2, #1
   212dc:	str	r2, [r0, #4]
   212e0:	mov	r0, r4
   212e4:	ldr	r2, [r4, #16]
   212e8:	str	r2, [r3, #16]
   212ec:	ldr	r2, [r4, #4]
   212f0:	str	r7, [r3, #8]
   212f4:	str	r2, [r3, #12]
   212f8:	mov	r2, r6
   212fc:	bl	206a8 <flatcc_json_parser_generic_json@@Base>
   21300:	mov	r5, r0
   21304:	mov	r0, r5
   21308:	add	sp, sp, #16
   2130c:	pop	{r4, r5, r6, r7, r8, pc}
   21310:	ldrb	r3, [r3, #21]
   21314:	cmp	r3, #0
   21318:	strb	r3, [sp, #8]
   2131c:	bne	21338 <flatcc_json_parser_union@@Base+0xac>
   21320:	mov	r3, #25
   21324:	mov	r2, r6
   21328:	mov	r1, r7
   2132c:	mov	r0, r4
   21330:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   21334:	b	21300 <flatcc_json_parser_union@@Base+0x74>
   21338:	ldr	r2, [r0, #4]
   2133c:	mov	r1, r7
   21340:	add	r8, sp, #8
   21344:	ldr	r5, [sp, #48]	; 0x30
   21348:	sub	r2, r2, #1
   2134c:	str	r2, [r0, #4]
   21350:	add	r2, sp, #12
   21354:	mov	r0, r4
   21358:	str	r2, [sp]
   2135c:	mov	r2, r6
   21360:	blx	r5
   21364:	cmp	r6, r0
   21368:	mov	r5, r0
   2136c:	beq	21304 <flatcc_json_parser_union@@Base+0x78>
   21370:	ldrh	r1, [sp, #40]	; 0x28
   21374:	ldm	r8, {r2, r3}
   21378:	ldr	r0, [r4]
   2137c:	bl	1e350 <flatcc_builder_table_add_union@@Base>
   21380:	cmp	r0, #0
   21384:	beq	21304 <flatcc_json_parser_union@@Base+0x78>
   21388:	mov	r3, #28
   2138c:	mov	r2, r6
   21390:	mov	r1, r5
   21394:	b	2132c <flatcc_json_parser_union@@Base+0xa0>

00021398 <flatcc_json_parser_union_type@@Base>:
   21398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2139c:	sub	sp, sp, #28
   213a0:	mov	r9, r1
   213a4:	mov	r4, r0
   213a8:	mov	r5, r3
   213ac:	mov	r6, r2
   213b0:	ldr	r0, [r0]
   213b4:	ldr	r1, [sp, #68]	; 0x44
   213b8:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   213bc:	mov	r3, #24
   213c0:	add	sl, r0, #8
   213c4:	mul	r3, r3, r5
   213c8:	add	r7, sl, r3
   213cc:	str	r3, [sp, #12]
   213d0:	ldrb	r3, [r7, #12]
   213d4:	cmp	r3, #0
   213d8:	movne	r3, #28
   213dc:	movne	r2, r6
   213e0:	movne	r1, r9
   213e4:	bne	214fc <flatcc_json_parser_union_type@@Base+0x164>
   213e8:	mov	r3, #1
   213ec:	add	fp, r7, #13
   213f0:	mov	r8, r0
   213f4:	mov	r2, r6
   213f8:	mov	r1, r9
   213fc:	mov	r0, r4
   21400:	strb	r3, [r7, #12]
   21404:	mov	r3, fp
   21408:	bl	20cdc <flatcc_json_parser_integer@@Base+0xc8>
   2140c:	cmp	r9, r0
   21410:	mov	r5, r0
   21414:	bne	21434 <flatcc_json_parser_union_type@@Base+0x9c>
   21418:	mov	r1, r0
   2141c:	mov	r2, r6
   21420:	str	fp, [sp]
   21424:	mov	r0, r4
   21428:	ldr	r3, [sp, #72]	; 0x48
   2142c:	bl	1fcf4 <flatcc_json_parser_space_ext@@Base+0x194>
   21430:	mov	r5, r0
   21434:	ldr	r3, [sp, #12]
   21438:	ldr	r1, [sl, r3]
   2143c:	ldr	r3, [r8, #4]
   21440:	cmp	r1, #0
   21444:	bne	21464 <flatcc_json_parser_union_type@@Base+0xcc>
   21448:	ldrb	r2, [r7, #13]
   2144c:	cmp	r2, #0
   21450:	addne	r3, r3, #1
   21454:	str	r3, [r8, #4]
   21458:	mov	r0, r5
   2145c:	add	sp, sp, #28
   21460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21464:	cmp	r3, #0
   21468:	bne	21480 <flatcc_json_parser_union_type@@Base+0xe8>
   2146c:	ldr	r3, [pc, #152]	; 2150c <flatcc_json_parser_union_type@@Base+0x174>
   21470:	movw	r2, #965	; 0x3c5
   21474:	ldr	r1, [pc, #148]	; 21510 <flatcc_json_parser_union_type@@Base+0x178>
   21478:	ldr	r0, [pc, #148]	; 21514 <flatcc_json_parser_union_type@@Base+0x17c>
   2147c:	bl	12684 <__assert_fail@plt>
   21480:	sub	r3, r3, #1
   21484:	ldr	r9, [r4, #16]
   21488:	add	r2, sp, #20
   2148c:	mov	r0, r4
   21490:	str	r3, [r8, #4]
   21494:	ldr	r3, [r7, #8]
   21498:	ldr	r8, [r4, #4]
   2149c:	ldr	sl, [sp, #76]	; 0x4c
   214a0:	str	r3, [r4, #16]
   214a4:	ldr	r3, [r7, #4]
   214a8:	str	r3, [r4, #4]
   214ac:	ldrb	r3, [r7, #13]
   214b0:	add	r7, sp, #16
   214b4:	str	r2, [sp]
   214b8:	mov	r2, r6
   214bc:	strb	r3, [sp, #16]
   214c0:	blx	sl
   214c4:	cmp	r6, r0
   214c8:	moveq	r5, r6
   214cc:	beq	21458 <flatcc_json_parser_union_type@@Base+0xc0>
   214d0:	ldrh	r1, [sp, #64]	; 0x40
   214d4:	ldm	r7, {r2, r3}
   214d8:	ldr	r0, [r4]
   214dc:	bl	1e350 <flatcc_builder_table_add_union@@Base>
   214e0:	cmp	r0, #0
   214e4:	streq	r8, [r4, #4]
   214e8:	streq	r9, [r4, #16]
   214ec:	beq	21458 <flatcc_json_parser_union_type@@Base+0xc0>
   214f0:	mov	r3, #28
   214f4:	mov	r2, r6
   214f8:	mov	r1, r5
   214fc:	mov	r0, r4
   21500:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   21504:	mov	r5, r0
   21508:	b	21458 <flatcc_json_parser_union_type@@Base+0xc0>
   2150c:	andeq	r3, r2, r8, lsl r5
   21510:	andeq	r3, r2, r9, lsr #13
   21514:	strdeq	r3, [r2], -r3	; <UNPREDICTABLE>

00021518 <flatcc_json_parser_union_vector@@Base>:
   21518:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2151c:	mov	r4, r0
   21520:	mov	r5, r1
   21524:	mov	r9, r3
   21528:	mov	r6, r2
   2152c:	ldr	r0, [r0]
   21530:	ldr	r1, [sp, #36]	; 0x24
   21534:	ldrh	r7, [sp, #32]
   21538:	ldr	r8, [sp, #40]	; 0x28
   2153c:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   21540:	mov	r3, #24
   21544:	add	r2, r0, #8
   21548:	mul	r3, r3, r9
   2154c:	ldr	r1, [r2, r3]
   21550:	add	ip, r2, r3
   21554:	cmp	r1, #0
   21558:	beq	21574 <flatcc_json_parser_union_vector@@Base+0x5c>
   2155c:	mov	r2, r6
   21560:	mov	r1, r5
   21564:	mov	r0, r4
   21568:	mov	r3, #28
   2156c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   21570:	b	1f9a8 <flatcc_json_parser_set_error@@Base>
   21574:	ldrb	lr, [ip, #12]
   21578:	ldr	r1, [r0, #4]
   2157c:	cmp	lr, #0
   21580:	bne	215b4 <flatcc_json_parser_union_vector@@Base+0x9c>
   21584:	add	r1, r1, #1
   21588:	str	r1, [r0, #4]
   2158c:	mov	r0, r4
   21590:	ldr	r1, [r4, #16]
   21594:	str	r1, [ip, #8]
   21598:	ldr	r1, [r4, #4]
   2159c:	str	r1, [ip, #4]
   215a0:	mov	r1, r5
   215a4:	str	r5, [r2, r3]
   215a8:	mov	r2, r6
   215ac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   215b0:	b	206a8 <flatcc_json_parser_generic_json@@Base>
   215b4:	sub	r1, r1, #1
   215b8:	mov	r2, r6
   215bc:	str	r1, [r0, #4]
   215c0:	mov	r1, r5
   215c4:	mov	r0, r4
   215c8:	str	r7, [sp, #36]	; 0x24
   215cc:	str	r8, [sp, #40]	; 0x28
   215d0:	ldr	r3, [ip, #16]
   215d4:	str	r3, [sp, #32]
   215d8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   215dc:	ldr	r3, [ip, #20]
   215e0:	b	1ff08 <flatcc_json_parser_space_ext@@Base+0x3a8>

000215e4 <flatcc_json_parser_union_type_vector@@Base>:
   215e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215e8:	sub	sp, sp, #36	; 0x24
   215ec:	mov	r4, r0
   215f0:	mov	r5, r1
   215f4:	mov	r7, r3
   215f8:	mov	r6, r2
   215fc:	ldr	r0, [r0]
   21600:	ldr	r1, [sp, #76]	; 0x4c
   21604:	ldrh	sl, [sp, #72]	; 0x48
   21608:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   2160c:	mov	r3, #24
   21610:	add	r0, r0, #8
   21614:	mul	r7, r3, r7
   21618:	add	r8, r0, r7
   2161c:	ldrb	r3, [r8, #12]
   21620:	cmp	r3, #0
   21624:	movne	r3, #28
   21628:	bne	217bc <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   2162c:	mov	r2, #1
   21630:	mvn	r3, #0
   21634:	mov	r1, r2
   21638:	strb	r2, [r8, #12]
   2163c:	ldr	r0, [r4]
   21640:	bl	1cff0 <flatcc_builder_start_vector@@Base>
   21644:	cmp	r0, #0
   21648:	bne	21790 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   2164c:	mov	r1, r5
   21650:	add	r3, sp, #28
   21654:	mov	r2, r6
   21658:	mov	r0, r4
   2165c:	bl	1fe84 <flatcc_json_parser_space_ext@@Base+0x324>
   21660:	mov	r5, r0
   21664:	add	fp, sp, #27
   21668:	ldr	r3, [sp, #28]
   2166c:	ldr	r0, [r4]
   21670:	cmp	r3, #0
   21674:	bne	21730 <flatcc_json_parser_union_type_vector@@Base+0x14c>
   21678:	bl	1d9c0 <flatcc_builder_vector_count@@Base>
   2167c:	mov	r9, r0
   21680:	mov	r1, r0
   21684:	ldr	r0, [r4]
   21688:	str	r9, [r8, #16]
   2168c:	bl	1c498 <flatcc_builder_enter_user_frame@@Base>
   21690:	mov	r1, r0
   21694:	mov	r8, r0
   21698:	ldr	r0, [r4]
   2169c:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   216a0:	mov	fp, r0
   216a4:	ldr	r0, [r4]
   216a8:	bl	1d9cc <flatcc_builder_vector_edit@@Base>
   216ac:	mov	r1, r0
   216b0:	mov	r2, r9
   216b4:	mov	r0, fp
   216b8:	bl	12588 <memcpy@plt>
   216bc:	ldr	r0, [r4]
   216c0:	bl	1d94c <flatcc_builder_end_vector@@Base>
   216c4:	subs	fp, r0, #0
   216c8:	beq	21790 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   216cc:	sub	r1, sl, #1
   216d0:	ldr	r0, [r4]
   216d4:	bl	1e230 <flatcc_builder_table_add_offset@@Base>
   216d8:	cmp	r0, #0
   216dc:	beq	21790 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   216e0:	str	fp, [r0]
   216e4:	ldr	r0, [r4]
   216e8:	ldr	r1, [sp, #76]	; 0x4c
   216ec:	bl	1c590 <flatcc_builder_get_user_frame_ptr@@Base>
   216f0:	add	r3, r0, #8
   216f4:	ldr	r1, [r3, r7]
   216f8:	add	r2, r3, r7
   216fc:	ldr	r3, [r0, #4]
   21700:	str	r8, [r2, #20]
   21704:	cmp	r1, #0
   21708:	addeq	r3, r3, #1
   2170c:	streq	r3, [r0, #4]
   21710:	beq	217d0 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   21714:	cmp	r3, #0
   21718:	bne	21808 <flatcc_json_parser_union_type_vector@@Base+0x224>
   2171c:	ldr	r3, [pc, #308]	; 21858 <flatcc_json_parser_union_type_vector@@Base+0x274>
   21720:	movw	r2, #1122	; 0x462
   21724:	ldr	r1, [pc, #304]	; 2185c <flatcc_json_parser_union_type_vector@@Base+0x278>
   21728:	ldr	r0, [pc, #304]	; 21860 <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2172c:	bl	12684 <__assert_fail@plt>
   21730:	mov	r1, #1
   21734:	bl	1cb30 <flatcc_builder_extend_vector@@Base>
   21738:	subs	r3, r0, #0
   2173c:	str	r3, [sp, #20]
   21740:	beq	21790 <flatcc_json_parser_union_type_vector@@Base+0x1ac>
   21744:	mov	r1, r5
   21748:	mov	r3, fp
   2174c:	mov	r2, r6
   21750:	mov	r0, r4
   21754:	bl	20cdc <flatcc_json_parser_integer@@Base+0xc8>
   21758:	cmp	r5, r0
   2175c:	mov	r9, r0
   21760:	movne	r5, r0
   21764:	bne	21798 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   21768:	mov	r1, r5
   2176c:	mov	r2, r6
   21770:	str	fp, [sp]
   21774:	mov	r0, r4
   21778:	ldr	r3, [sp, #80]	; 0x50
   2177c:	bl	1fcf4 <flatcc_json_parser_space_ext@@Base+0x194>
   21780:	cmp	r6, r0
   21784:	cmpne	r9, r0
   21788:	mov	r5, r0
   2178c:	bne	21798 <flatcc_json_parser_union_type_vector@@Base+0x1b4>
   21790:	mov	r3, #33	; 0x21
   21794:	b	217bc <flatcc_json_parser_union_type_vector@@Base+0x1d8>
   21798:	ldrb	r0, [sp, #27]
   2179c:	ldr	r3, [sp, #88]	; 0x58
   217a0:	blx	r3
   217a4:	cmp	r0, #0
   217a8:	bne	217e0 <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   217ac:	ldr	r3, [r4, #8]
   217b0:	tst	r3, #1
   217b4:	bne	217dc <flatcc_json_parser_union_type_vector@@Base+0x1f8>
   217b8:	mov	r3, #15
   217bc:	mov	r1, r5
   217c0:	mov	r2, r6
   217c4:	mov	r0, r4
   217c8:	bl	1f9a8 <flatcc_json_parser_set_error@@Base>
   217cc:	mov	r5, r0
   217d0:	mov	r0, r5
   217d4:	add	sp, sp, #36	; 0x24
   217d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217dc:	strb	r0, [sp, #27]
   217e0:	ldrb	r3, [sp, #27]
   217e4:	mov	r1, r5
   217e8:	mov	r0, r4
   217ec:	ldr	r2, [sp, #20]
   217f0:	strb	r3, [r2]
   217f4:	add	r3, sp, #28
   217f8:	mov	r2, r6
   217fc:	bl	1fc48 <flatcc_json_parser_space_ext@@Base+0xe8>
   21800:	mov	r5, r0
   21804:	b	21668 <flatcc_json_parser_union_type_vector@@Base+0x84>
   21808:	sub	r3, r3, #1
   2180c:	ldr	r7, [r4, #4]
   21810:	ldr	fp, [r4, #16]
   21814:	str	r3, [r0, #4]
   21818:	mov	r0, r4
   2181c:	ldr	r3, [r2, #8]
   21820:	str	r3, [r4, #16]
   21824:	ldr	r3, [r2, #4]
   21828:	mov	r2, r6
   2182c:	str	r3, [r4, #4]
   21830:	ldr	r3, [sp, #84]	; 0x54
   21834:	stm	sp, {r9, sl}
   21838:	str	r3, [sp, #8]
   2183c:	mov	r3, r8
   21840:	bl	1ff08 <flatcc_json_parser_space_ext@@Base+0x3a8>
   21844:	cmp	r6, r0
   21848:	strne	r7, [r4, #4]
   2184c:	strne	fp, [r4, #16]
   21850:	moveq	r5, r6
   21854:	b	217d0 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   21858:	andeq	r3, r2, r6, lsr r5
   2185c:	andeq	r3, r2, r9, lsr #13
   21860:	strdeq	r3, [r2], -r3	; <UNPREDICTABLE>

00021864 <flatcc_json_parser_table_as_root@@Base>:
   21864:	push	{r4, r5, r6, r7, r8, r9, lr}
   21868:	sub	sp, sp, #52	; 0x34
   2186c:	subs	r4, r1, #0
   21870:	addeq	r4, sp, #4
   21874:	mov	r5, r2
   21878:	add	r6, r2, r3
   2187c:	mov	r7, r0
   21880:	ldr	r9, [sp, #80]	; 0x50
   21884:	mov	r2, #32
   21888:	mov	r1, #0
   2188c:	add	r0, r4, #12
   21890:	bl	12624 <memset@plt>
   21894:	mov	r3, #1
   21898:	mov	r2, #0
   2189c:	str	r7, [r4]
   218a0:	mov	r0, r7
   218a4:	ldr	r1, [sp, #84]	; 0x54
   218a8:	asr	r8, r9, #1
   218ac:	stmib	r4, {r5, r9}
   218b0:	str	r3, [r4, #16]
   218b4:	and	r8, r8, #2
   218b8:	str	r5, [r4, #28]
   218bc:	mov	r3, r8
   218c0:	str	r6, [r4, #32]
   218c4:	str	r5, [r4, #36]	; 0x24
   218c8:	bl	1c92c <flatcc_builder_start_buffer@@Base>
   218cc:	cmp	r0, #0
   218d0:	beq	218e4 <flatcc_json_parser_table_as_root@@Base+0x80>
   218d4:	mvn	r6, #0
   218d8:	mov	r0, r6
   218dc:	add	sp, sp, #52	; 0x34
   218e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   218e4:	mov	r2, r6
   218e8:	mov	r3, sp
   218ec:	ldr	r6, [sp, #88]	; 0x58
   218f0:	mov	r1, r5
   218f4:	mov	r0, r4
   218f8:	blx	r6
   218fc:	ldr	r6, [r4, #24]
   21900:	cmp	r6, #0
   21904:	bne	218d8 <flatcc_json_parser_table_as_root@@Base+0x74>
   21908:	mov	r0, r7
   2190c:	ldr	r1, [sp]
   21910:	bl	1c9c8 <flatcc_builder_end_buffer@@Base>
   21914:	cmp	r0, #0
   21918:	beq	218d4 <flatcc_json_parser_table_as_root@@Base+0x70>
   2191c:	str	r5, [r4, #40]	; 0x28
   21920:	b	218d8 <flatcc_json_parser_table_as_root@@Base+0x74>

00021924 <flatcc_json_parser_struct_as_root@@Base>:
   21924:	b	21864 <flatcc_json_parser_table_as_root@@Base>
   21928:	eor	r1, r1, #-2147483648	; 0x80000000
   2192c:	b	21934 <flatcc_json_parser_struct_as_root@@Base+0x10>
   21930:	eor	r3, r3, #-2147483648	; 0x80000000
   21934:	push	{r4, r5, lr}
   21938:	lsl	r4, r1, #1
   2193c:	lsl	r5, r3, #1
   21940:	teq	r4, r5
   21944:	teqeq	r0, r2
   21948:	orrsne	ip, r4, r0
   2194c:	orrsne	ip, r5, r2
   21950:	mvnsne	ip, r4, asr #21
   21954:	mvnsne	ip, r5, asr #21
   21958:	beq	21b44 <flatcc_json_parser_struct_as_root@@Base+0x220>
   2195c:	lsr	r4, r4, #21
   21960:	rsbs	r5, r4, r5, lsr #21
   21964:	rsblt	r5, r5, #0
   21968:	ble	21988 <flatcc_json_parser_struct_as_root@@Base+0x64>
   2196c:	add	r4, r4, r5
   21970:	eor	r2, r0, r2
   21974:	eor	r3, r1, r3
   21978:	eor	r0, r2, r0
   2197c:	eor	r1, r3, r1
   21980:	eor	r2, r0, r2
   21984:	eor	r3, r1, r3
   21988:	cmp	r5, #54	; 0x36
   2198c:	pophi	{r4, r5, pc}
   21990:	tst	r1, #-2147483648	; 0x80000000
   21994:	lsl	r1, r1, #12
   21998:	mov	ip, #1048576	; 0x100000
   2199c:	orr	r1, ip, r1, lsr #12
   219a0:	beq	219ac <flatcc_json_parser_struct_as_root@@Base+0x88>
   219a4:	rsbs	r0, r0, #0
   219a8:	rsc	r1, r1, #0
   219ac:	tst	r3, #-2147483648	; 0x80000000
   219b0:	lsl	r3, r3, #12
   219b4:	orr	r3, ip, r3, lsr #12
   219b8:	beq	219c4 <flatcc_json_parser_struct_as_root@@Base+0xa0>
   219bc:	rsbs	r2, r2, #0
   219c0:	rsc	r3, r3, #0
   219c4:	teq	r4, r5
   219c8:	beq	21b2c <flatcc_json_parser_struct_as_root@@Base+0x208>
   219cc:	sub	r4, r4, #1
   219d0:	rsbs	lr, r5, #32
   219d4:	blt	219f0 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   219d8:	lsl	ip, r2, lr
   219dc:	adds	r0, r0, r2, lsr r5
   219e0:	adc	r1, r1, #0
   219e4:	adds	r0, r0, r3, lsl lr
   219e8:	adcs	r1, r1, r3, asr r5
   219ec:	b	21a0c <flatcc_json_parser_struct_as_root@@Base+0xe8>
   219f0:	sub	r5, r5, #32
   219f4:	add	lr, lr, #32
   219f8:	cmp	r2, #1
   219fc:	lsl	ip, r3, lr
   21a00:	orrcs	ip, ip, #2
   21a04:	adds	r0, r0, r3, asr r5
   21a08:	adcs	r1, r1, r3, asr #31
   21a0c:	and	r5, r1, #-2147483648	; 0x80000000
   21a10:	bpl	21a20 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   21a14:	rsbs	ip, ip, #0
   21a18:	rscs	r0, r0, #0
   21a1c:	rsc	r1, r1, #0
   21a20:	cmp	r1, #1048576	; 0x100000
   21a24:	bcc	21a64 <flatcc_json_parser_struct_as_root@@Base+0x140>
   21a28:	cmp	r1, #2097152	; 0x200000
   21a2c:	bcc	21a4c <flatcc_json_parser_struct_as_root@@Base+0x128>
   21a30:	lsrs	r1, r1, #1
   21a34:	rrxs	r0, r0
   21a38:	rrx	ip, ip
   21a3c:	add	r4, r4, #1
   21a40:	lsl	r2, r4, #21
   21a44:	cmn	r2, #4194304	; 0x400000
   21a48:	bcs	21ba4 <flatcc_json_parser_struct_as_root@@Base+0x280>
   21a4c:	cmp	ip, #-2147483648	; 0x80000000
   21a50:	lsrseq	ip, r0, #1
   21a54:	adcs	r0, r0, #0
   21a58:	adc	r1, r1, r4, lsl #20
   21a5c:	orr	r1, r1, r5
   21a60:	pop	{r4, r5, pc}
   21a64:	lsls	ip, ip, #1
   21a68:	adcs	r0, r0, r0
   21a6c:	adc	r1, r1, r1
   21a70:	tst	r1, #1048576	; 0x100000
   21a74:	sub	r4, r4, #1
   21a78:	bne	21a4c <flatcc_json_parser_struct_as_root@@Base+0x128>
   21a7c:	teq	r1, #0
   21a80:	moveq	r1, r0
   21a84:	moveq	r0, #0
   21a88:	clz	r3, r1
   21a8c:	addeq	r3, r3, #32
   21a90:	sub	r3, r3, #11
   21a94:	subs	r2, r3, #32
   21a98:	bge	21abc <flatcc_json_parser_struct_as_root@@Base+0x198>
   21a9c:	adds	r2, r2, #12
   21aa0:	ble	21ab8 <flatcc_json_parser_struct_as_root@@Base+0x194>
   21aa4:	add	ip, r2, #20
   21aa8:	rsb	r2, r2, #12
   21aac:	lsl	r0, r1, ip
   21ab0:	lsr	r1, r1, r2
   21ab4:	b	21acc <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   21ab8:	add	r2, r2, #20
   21abc:	rsble	ip, r2, #32
   21ac0:	lsl	r1, r1, r2
   21ac4:	orrle	r1, r1, r0, lsr ip
   21ac8:	lslle	r0, r0, r2
   21acc:	subs	r4, r4, r3
   21ad0:	addge	r1, r1, r4, lsl #20
   21ad4:	orrge	r1, r1, r5
   21ad8:	popge	{r4, r5, pc}
   21adc:	mvn	r4, r4
   21ae0:	subs	r4, r4, #31
   21ae4:	bge	21b20 <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   21ae8:	adds	r4, r4, #12
   21aec:	bgt	21b08 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   21af0:	add	r4, r4, #20
   21af4:	rsb	r2, r4, #32
   21af8:	lsr	r0, r0, r4
   21afc:	orr	r0, r0, r1, lsl r2
   21b00:	orr	r1, r5, r1, lsr r4
   21b04:	pop	{r4, r5, pc}
   21b08:	rsb	r4, r4, #12
   21b0c:	rsb	r2, r4, #32
   21b10:	lsr	r0, r0, r2
   21b14:	orr	r0, r0, r1, lsl r4
   21b18:	mov	r1, r5
   21b1c:	pop	{r4, r5, pc}
   21b20:	lsr	r0, r1, r4
   21b24:	mov	r1, r5
   21b28:	pop	{r4, r5, pc}
   21b2c:	teq	r4, #0
   21b30:	eor	r3, r3, #1048576	; 0x100000
   21b34:	eoreq	r1, r1, #1048576	; 0x100000
   21b38:	addeq	r4, r4, #1
   21b3c:	subne	r5, r5, #1
   21b40:	b	219cc <flatcc_json_parser_struct_as_root@@Base+0xa8>
   21b44:	mvns	ip, r4, asr #21
   21b48:	mvnsne	ip, r5, asr #21
   21b4c:	beq	21bb4 <flatcc_json_parser_struct_as_root@@Base+0x290>
   21b50:	teq	r4, r5
   21b54:	teqeq	r0, r2
   21b58:	beq	21b6c <flatcc_json_parser_struct_as_root@@Base+0x248>
   21b5c:	orrs	ip, r4, r0
   21b60:	moveq	r1, r3
   21b64:	moveq	r0, r2
   21b68:	pop	{r4, r5, pc}
   21b6c:	teq	r1, r3
   21b70:	movne	r1, #0
   21b74:	movne	r0, #0
   21b78:	popne	{r4, r5, pc}
   21b7c:	lsrs	ip, r4, #21
   21b80:	bne	21b94 <flatcc_json_parser_struct_as_root@@Base+0x270>
   21b84:	lsls	r0, r0, #1
   21b88:	adcs	r1, r1, r1
   21b8c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   21b90:	pop	{r4, r5, pc}
   21b94:	adds	r4, r4, #4194304	; 0x400000
   21b98:	addcc	r1, r1, #1048576	; 0x100000
   21b9c:	popcc	{r4, r5, pc}
   21ba0:	and	r5, r1, #-2147483648	; 0x80000000
   21ba4:	orr	r1, r5, #2130706432	; 0x7f000000
   21ba8:	orr	r1, r1, #15728640	; 0xf00000
   21bac:	mov	r0, #0
   21bb0:	pop	{r4, r5, pc}
   21bb4:	mvns	ip, r4, asr #21
   21bb8:	movne	r1, r3
   21bbc:	movne	r0, r2
   21bc0:	mvnseq	ip, r5, asr #21
   21bc4:	movne	r3, r1
   21bc8:	movne	r2, r0
   21bcc:	orrs	r4, r0, r1, lsl #12
   21bd0:	orrseq	r5, r2, r3, lsl #12
   21bd4:	teqeq	r1, r3
   21bd8:	orrne	r1, r1, #524288	; 0x80000
   21bdc:	pop	{r4, r5, pc}
   21be0:	teq	r0, #0
   21be4:	moveq	r1, #0
   21be8:	bxeq	lr
   21bec:	push	{r4, r5, lr}
   21bf0:	mov	r4, #1024	; 0x400
   21bf4:	add	r4, r4, #50	; 0x32
   21bf8:	mov	r5, #0
   21bfc:	mov	r1, #0
   21c00:	b	21a7c <flatcc_json_parser_struct_as_root@@Base+0x158>
   21c04:	teq	r0, #0
   21c08:	moveq	r1, #0
   21c0c:	bxeq	lr
   21c10:	push	{r4, r5, lr}
   21c14:	mov	r4, #1024	; 0x400
   21c18:	add	r4, r4, #50	; 0x32
   21c1c:	ands	r5, r0, #-2147483648	; 0x80000000
   21c20:	rsbmi	r0, r0, #0
   21c24:	mov	r1, #0
   21c28:	b	21a7c <flatcc_json_parser_struct_as_root@@Base+0x158>
   21c2c:	lsls	r2, r0, #1
   21c30:	asr	r1, r2, #3
   21c34:	rrx	r1, r1
   21c38:	lsl	r0, r2, #28
   21c3c:	andsne	r3, r2, #-16777216	; 0xff000000
   21c40:	teqne	r3, #-16777216	; 0xff000000
   21c44:	eorne	r1, r1, #939524096	; 0x38000000
   21c48:	bxne	lr
   21c4c:	bics	r2, r2, #-16777216	; 0xff000000
   21c50:	bxeq	lr
   21c54:	teq	r3, #-16777216	; 0xff000000
   21c58:	orreq	r1, r1, #524288	; 0x80000
   21c5c:	bxeq	lr
   21c60:	push	{r4, r5, lr}
   21c64:	mov	r4, #896	; 0x380
   21c68:	and	r5, r1, #-2147483648	; 0x80000000
   21c6c:	bic	r1, r1, #-2147483648	; 0x80000000
   21c70:	b	21a7c <flatcc_json_parser_struct_as_root@@Base+0x158>
   21c74:	orrs	r2, r0, r1
   21c78:	bxeq	lr
   21c7c:	push	{r4, r5, lr}
   21c80:	mov	r5, #0
   21c84:	b	21ca4 <flatcc_json_parser_struct_as_root@@Base+0x380>
   21c88:	orrs	r2, r0, r1
   21c8c:	bxeq	lr
   21c90:	push	{r4, r5, lr}
   21c94:	ands	r5, r1, #-2147483648	; 0x80000000
   21c98:	bpl	21ca4 <flatcc_json_parser_struct_as_root@@Base+0x380>
   21c9c:	rsbs	r0, r0, #0
   21ca0:	rsc	r1, r1, #0
   21ca4:	mov	r4, #1024	; 0x400
   21ca8:	add	r4, r4, #50	; 0x32
   21cac:	lsrs	ip, r1, #22
   21cb0:	beq	21a20 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   21cb4:	mov	r2, #3
   21cb8:	lsrs	ip, ip, #3
   21cbc:	addne	r2, r2, #3
   21cc0:	lsrs	ip, ip, #3
   21cc4:	addne	r2, r2, #3
   21cc8:	add	r2, r2, ip, lsr #3
   21ccc:	rsb	r3, r2, #32
   21cd0:	lsl	ip, r0, r3
   21cd4:	lsr	r0, r0, r2
   21cd8:	orr	r0, r0, r1, lsl r3
   21cdc:	lsr	r1, r1, r2
   21ce0:	add	r4, r4, r2
   21ce4:	b	21a20 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   21ce8:	eor	r0, r0, #-2147483648	; 0x80000000
   21cec:	b	21cf4 <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   21cf0:	eor	r1, r1, #-2147483648	; 0x80000000
   21cf4:	lsls	r2, r0, #1
   21cf8:	lslsne	r3, r1, #1
   21cfc:	teqne	r2, r3
   21d00:	mvnsne	ip, r2, asr #24
   21d04:	mvnsne	ip, r3, asr #24
   21d08:	beq	21e00 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   21d0c:	lsr	r2, r2, #24
   21d10:	rsbs	r3, r2, r3, lsr #24
   21d14:	addgt	r2, r2, r3
   21d18:	eorgt	r1, r0, r1
   21d1c:	eorgt	r0, r1, r0
   21d20:	eorgt	r1, r0, r1
   21d24:	rsblt	r3, r3, #0
   21d28:	cmp	r3, #25
   21d2c:	bxhi	lr
   21d30:	tst	r0, #-2147483648	; 0x80000000
   21d34:	orr	r0, r0, #8388608	; 0x800000
   21d38:	bic	r0, r0, #-16777216	; 0xff000000
   21d3c:	rsbne	r0, r0, #0
   21d40:	tst	r1, #-2147483648	; 0x80000000
   21d44:	orr	r1, r1, #8388608	; 0x800000
   21d48:	bic	r1, r1, #-16777216	; 0xff000000
   21d4c:	rsbne	r1, r1, #0
   21d50:	teq	r2, r3
   21d54:	beq	21de8 <flatcc_json_parser_struct_as_root@@Base+0x4c4>
   21d58:	sub	r2, r2, #1
   21d5c:	adds	r0, r0, r1, asr r3
   21d60:	rsb	r3, r3, #32
   21d64:	lsl	r1, r1, r3
   21d68:	and	r3, r0, #-2147483648	; 0x80000000
   21d6c:	bpl	21d78 <flatcc_json_parser_struct_as_root@@Base+0x454>
   21d70:	rsbs	r1, r1, #0
   21d74:	rsc	r0, r0, #0
   21d78:	cmp	r0, #8388608	; 0x800000
   21d7c:	bcc	21db0 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   21d80:	cmp	r0, #16777216	; 0x1000000
   21d84:	bcc	21d9c <flatcc_json_parser_struct_as_root@@Base+0x478>
   21d88:	lsrs	r0, r0, #1
   21d8c:	rrx	r1, r1
   21d90:	add	r2, r2, #1
   21d94:	cmp	r2, #254	; 0xfe
   21d98:	bcs	21e54 <flatcc_json_parser_struct_as_root@@Base+0x530>
   21d9c:	cmp	r1, #-2147483648	; 0x80000000
   21da0:	adc	r0, r0, r2, lsl #23
   21da4:	biceq	r0, r0, #1
   21da8:	orr	r0, r0, r3
   21dac:	bx	lr
   21db0:	lsls	r1, r1, #1
   21db4:	adc	r0, r0, r0
   21db8:	tst	r0, #8388608	; 0x800000
   21dbc:	sub	r2, r2, #1
   21dc0:	bne	21d9c <flatcc_json_parser_struct_as_root@@Base+0x478>
   21dc4:	clz	ip, r0
   21dc8:	sub	ip, ip, #8
   21dcc:	subs	r2, r2, ip
   21dd0:	lsl	r0, r0, ip
   21dd4:	addge	r0, r0, r2, lsl #23
   21dd8:	rsblt	r2, r2, #0
   21ddc:	orrge	r0, r0, r3
   21de0:	orrlt	r0, r3, r0, lsr r2
   21de4:	bx	lr
   21de8:	teq	r2, #0
   21dec:	eor	r1, r1, #8388608	; 0x800000
   21df0:	eoreq	r0, r0, #8388608	; 0x800000
   21df4:	addeq	r2, r2, #1
   21df8:	subne	r3, r3, #1
   21dfc:	b	21d58 <flatcc_json_parser_struct_as_root@@Base+0x434>
   21e00:	lsl	r3, r1, #1
   21e04:	mvns	ip, r2, asr #24
   21e08:	mvnsne	ip, r3, asr #24
   21e0c:	beq	21e60 <flatcc_json_parser_struct_as_root@@Base+0x53c>
   21e10:	teq	r2, r3
   21e14:	beq	21e24 <flatcc_json_parser_struct_as_root@@Base+0x500>
   21e18:	teq	r2, #0
   21e1c:	moveq	r0, r1
   21e20:	bx	lr
   21e24:	teq	r0, r1
   21e28:	movne	r0, #0
   21e2c:	bxne	lr
   21e30:	tst	r2, #-16777216	; 0xff000000
   21e34:	bne	21e44 <flatcc_json_parser_struct_as_root@@Base+0x520>
   21e38:	lsls	r0, r0, #1
   21e3c:	orrcs	r0, r0, #-2147483648	; 0x80000000
   21e40:	bx	lr
   21e44:	adds	r2, r2, #33554432	; 0x2000000
   21e48:	addcc	r0, r0, #8388608	; 0x800000
   21e4c:	bxcc	lr
   21e50:	and	r3, r0, #-2147483648	; 0x80000000
   21e54:	orr	r0, r3, #2130706432	; 0x7f000000
   21e58:	orr	r0, r0, #8388608	; 0x800000
   21e5c:	bx	lr
   21e60:	mvns	r2, r2, asr #24
   21e64:	movne	r0, r1
   21e68:	mvnseq	r3, r3, asr #24
   21e6c:	movne	r1, r0
   21e70:	lsls	r2, r0, #9
   21e74:	lslseq	r3, r1, #9
   21e78:	teqeq	r0, r1
   21e7c:	orrne	r0, r0, #4194304	; 0x400000
   21e80:	bx	lr
   21e84:	mov	r3, #0
   21e88:	b	21e94 <flatcc_json_parser_struct_as_root@@Base+0x570>
   21e8c:	ands	r3, r0, #-2147483648	; 0x80000000
   21e90:	rsbmi	r0, r0, #0
   21e94:	movs	ip, r0
   21e98:	bxeq	lr
   21e9c:	orr	r3, r3, #1258291200	; 0x4b000000
   21ea0:	mov	r1, r0
   21ea4:	mov	r0, #0
   21ea8:	b	21eec <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   21eac:	orrs	r2, r0, r1
   21eb0:	bxeq	lr
   21eb4:	mov	r3, #0
   21eb8:	b	21ed4 <flatcc_json_parser_struct_as_root@@Base+0x5b0>
   21ebc:	orrs	r2, r0, r1
   21ec0:	bxeq	lr
   21ec4:	ands	r3, r1, #-2147483648	; 0x80000000
   21ec8:	bpl	21ed4 <flatcc_json_parser_struct_as_root@@Base+0x5b0>
   21ecc:	rsbs	r0, r0, #0
   21ed0:	rsc	r1, r1, #0
   21ed4:	movs	ip, r1
   21ed8:	moveq	ip, r0
   21edc:	moveq	r1, r0
   21ee0:	moveq	r0, #0
   21ee4:	orr	r3, r3, #1526726656	; 0x5b000000
   21ee8:	subeq	r3, r3, #268435456	; 0x10000000
   21eec:	sub	r3, r3, #8388608	; 0x800000
   21ef0:	clz	r2, ip
   21ef4:	subs	r2, r2, #8
   21ef8:	sub	r3, r3, r2, lsl #23
   21efc:	blt	21f1c <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   21f00:	add	r3, r3, r1, lsl r2
   21f04:	lsl	ip, r0, r2
   21f08:	rsb	r2, r2, #32
   21f0c:	cmp	ip, #-2147483648	; 0x80000000
   21f10:	adc	r0, r3, r0, lsr r2
   21f14:	biceq	r0, r0, #1
   21f18:	bx	lr
   21f1c:	add	r2, r2, #32
   21f20:	lsl	ip, r1, r2
   21f24:	rsb	r2, r2, #32
   21f28:	orrs	r0, r0, ip, lsl #1
   21f2c:	adc	r0, r3, r1, lsr r2
   21f30:	biceq	r0, r0, ip, lsr #31
   21f34:	bx	lr

00021f38 <__libc_csu_init@@Base>:
   21f38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21f3c:	mov	r7, r0
   21f40:	ldr	r6, [pc, #72]	; 21f90 <__libc_csu_init@@Base+0x58>
   21f44:	ldr	r5, [pc, #72]	; 21f94 <__libc_csu_init@@Base+0x5c>
   21f48:	add	r6, pc, r6
   21f4c:	add	r5, pc, r5
   21f50:	sub	r6, r6, r5
   21f54:	mov	r8, r1
   21f58:	mov	r9, r2
   21f5c:	bl	12550 <fopen@plt-0x20>
   21f60:	asrs	r6, r6, #2
   21f64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f68:	mov	r4, #0
   21f6c:	add	r4, r4, #1
   21f70:	ldr	r3, [r5], #4
   21f74:	mov	r2, r9
   21f78:	mov	r1, r8
   21f7c:	mov	r0, r7
   21f80:	blx	r3
   21f84:	cmp	r6, r4
   21f88:	bne	21f6c <__libc_csu_init@@Base+0x34>
   21f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f90:	andeq	r1, r1, r4, asr #31
   21f94:			; <UNDEFINED> instruction: 0x00011fbc

00021f98 <__libc_csu_fini@@Base>:
   21f98:	bx	lr

Disassembly of section .fini:

00021f9c <.fini>:
   21f9c:	push	{r3, lr}
   21fa0:	pop	{r3, pc}
