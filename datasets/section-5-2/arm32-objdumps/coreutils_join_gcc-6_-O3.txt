
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010e14 <.init>:
   10e14:	push	{r3, lr}
   10e18:	bl	11f6c <__assert_fail@plt+0xe80>
   10e1c:	pop	{r3, pc}

Disassembly of section .plt:

00010e20 <fdopen@plt-0x14>:
   10e20:	push	{lr}		; (str lr, [sp, #-4]!)
   10e24:	ldr	lr, [pc, #4]	; 10e30 <fdopen@plt-0x4>
   10e28:	add	lr, pc, lr
   10e2c:	ldr	pc, [lr, #8]!
   10e30:	ldrdeq	ip, [r1], -r0

00010e34 <fdopen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #28, 20	; 0x1c000
   10e3c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e40 <calloc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #28, 20	; 0x1c000
   10e48:	ldr	pc, [ip, #456]!	; 0x1c8

00010e4c <fputs_unlocked@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #28, 20	; 0x1c000
   10e54:	ldr	pc, [ip, #448]!	; 0x1c0

00010e58 <raise@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #28, 20	; 0x1c000
   10e60:	ldr	pc, [ip, #440]!	; 0x1b8

00010e64 <strcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #28, 20	; 0x1c000
   10e6c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e70 <posix_fadvise64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #28, 20	; 0x1c000
   10e78:	ldr	pc, [ip, #424]!	; 0x1a8

00010e7c <fflush@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #28, 20	; 0x1c000
   10e84:	ldr	pc, [ip, #416]!	; 0x1a0

00010e88 <free@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #28, 20	; 0x1c000
   10e90:	ldr	pc, [ip, #408]!	; 0x198

00010e94 <_exit@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #28, 20	; 0x1c000
   10e9c:	ldr	pc, [ip, #400]!	; 0x190

00010ea0 <memcpy@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #28, 20	; 0x1c000
   10ea8:	ldr	pc, [ip, #392]!	; 0x188

00010eac <__strtoull_internal@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #28, 20	; 0x1c000
   10eb4:	ldr	pc, [ip, #384]!	; 0x180

00010eb8 <mbsinit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #28, 20	; 0x1c000
   10ec0:	ldr	pc, [ip, #376]!	; 0x178

00010ec4 <fwrite_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #28, 20	; 0x1c000
   10ecc:	ldr	pc, [ip, #368]!	; 0x170

00010ed0 <memcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #28, 20	; 0x1c000
   10ed8:	ldr	pc, [ip, #360]!	; 0x168

00010edc <fputc_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #28, 20	; 0x1c000
   10ee4:	ldr	pc, [ip, #352]!	; 0x160

00010ee8 <dcgettext@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #28, 20	; 0x1c000
   10ef0:	ldr	pc, [ip, #344]!	; 0x158

00010ef4 <realloc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #28, 20	; 0x1c000
   10efc:	ldr	pc, [ip, #336]!	; 0x150

00010f00 <textdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #28, 20	; 0x1c000
   10f08:	ldr	pc, [ip, #328]!	; 0x148

00010f0c <iswprint@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #28, 20	; 0x1c000
   10f14:	ldr	pc, [ip, #320]!	; 0x140

00010f18 <fwrite@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #28, 20	; 0x1c000
   10f20:	ldr	pc, [ip, #312]!	; 0x138

00010f24 <lseek64@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #28, 20	; 0x1c000
   10f2c:	ldr	pc, [ip, #304]!	; 0x130

00010f30 <__ctype_get_mb_cur_max@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #28, 20	; 0x1c000
   10f38:	ldr	pc, [ip, #296]!	; 0x128

00010f3c <__fpending@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #28, 20	; 0x1c000
   10f44:	ldr	pc, [ip, #288]!	; 0x120

00010f48 <mbrtowc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #28, 20	; 0x1c000
   10f50:	ldr	pc, [ip, #280]!	; 0x118

00010f54 <error@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #28, 20	; 0x1c000
   10f5c:	ldr	pc, [ip, #272]!	; 0x110

00010f60 <strcoll@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #28, 20	; 0x1c000
   10f68:	ldr	pc, [ip, #264]!	; 0x108

00010f6c <malloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #28, 20	; 0x1c000
   10f74:	ldr	pc, [ip, #256]!	; 0x100

00010f78 <__libc_start_main@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #28, 20	; 0x1c000
   10f80:	ldr	pc, [ip, #248]!	; 0xf8

00010f84 <__freading@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #28, 20	; 0x1c000
   10f8c:	ldr	pc, [ip, #240]!	; 0xf0

00010f90 <__ctype_toupper_loc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #28, 20	; 0x1c000
   10f98:	ldr	pc, [ip, #232]!	; 0xe8

00010f9c <__gmon_start__@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #28, 20	; 0x1c000
   10fa4:	ldr	pc, [ip, #224]!	; 0xe0

00010fa8 <getopt_long@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #28, 20	; 0x1c000
   10fb0:	ldr	pc, [ip, #216]!	; 0xd8

00010fb4 <__ctype_b_loc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #28, 20	; 0x1c000
   10fbc:	ldr	pc, [ip, #208]!	; 0xd0

00010fc0 <exit@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #28, 20	; 0x1c000
   10fc8:	ldr	pc, [ip, #200]!	; 0xc8

00010fcc <strtoul@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #28, 20	; 0x1c000
   10fd4:	ldr	pc, [ip, #192]!	; 0xc0

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #28, 20	; 0x1c000
   10fe0:	ldr	pc, [ip, #184]!	; 0xb8

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #28, 20	; 0x1c000
   10fec:	ldr	pc, [ip, #176]!	; 0xb0

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #28, 20	; 0x1c000
   10ff8:	ldr	pc, [ip, #168]!	; 0xa8

00010ffc <__cxa_atexit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #28, 20	; 0x1c000
   11004:	ldr	pc, [ip, #160]!	; 0xa0

00011008 <memset@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #28, 20	; 0x1c000
   11010:	ldr	pc, [ip, #152]!	; 0x98

00011014 <__printf_chk@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #28, 20	; 0x1c000
   1101c:	ldr	pc, [ip, #144]!	; 0x90

00011020 <fileno@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #28, 20	; 0x1c000
   11028:	ldr	pc, [ip, #136]!	; 0x88

0001102c <__fprintf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #28, 20	; 0x1c000
   11034:	ldr	pc, [ip, #128]!	; 0x80

00011038 <memchr@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #28, 20	; 0x1c000
   11040:	ldr	pc, [ip, #120]!	; 0x78

00011044 <fclose@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #28, 20	; 0x1c000
   1104c:	ldr	pc, [ip, #112]!	; 0x70

00011050 <fseeko64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #28, 20	; 0x1c000
   11058:	ldr	pc, [ip, #104]!	; 0x68

0001105c <fcntl64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #28, 20	; 0x1c000
   11064:	ldr	pc, [ip, #96]!	; 0x60

00011068 <__uflow@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #28, 20	; 0x1c000
   11070:	ldr	pc, [ip, #88]!	; 0x58

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #28, 20	; 0x1c000
   1107c:	ldr	pc, [ip, #80]!	; 0x50

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #28, 20	; 0x1c000
   11088:	ldr	pc, [ip, #72]!	; 0x48

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #28, 20	; 0x1c000
   11094:	ldr	pc, [ip, #64]!	; 0x40

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #28, 20	; 0x1c000
   110a0:	ldr	pc, [ip, #56]!	; 0x38

000110a4 <fopen64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #28, 20	; 0x1c000
   110ac:	ldr	pc, [ip, #48]!	; 0x30

000110b0 <strpbrk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #28, 20	; 0x1c000
   110b8:	ldr	pc, [ip, #40]!	; 0x28

000110bc <bindtextdomain@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #28, 20	; 0x1c000
   110c4:	ldr	pc, [ip, #32]!

000110c8 <strncmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #28, 20	; 0x1c000
   110d0:	ldr	pc, [ip, #24]!

000110d4 <abort@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #28, 20	; 0x1c000
   110dc:	ldr	pc, [ip, #16]!

000110e0 <close@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #28, 20	; 0x1c000
   110e8:	ldr	pc, [ip, #8]!

000110ec <__assert_fail@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #28, 20	; 0x1c000
   110f4:	ldr	pc, [ip, #0]!

Disassembly of section .text:

000110f8 <.text>:
   110f8:	push	{r4, lr}
   110fc:	mov	r2, #5
   11100:	ldr	r1, [pc, #40]	; 11130 <__assert_fail@plt+0x44>
   11104:	mov	r5, r0
   11108:	mov	r0, #0
   1110c:	bl	10ee8 <dcgettext@plt>
   11110:	mov	r4, r0
   11114:	mov	r0, r5
   11118:	bl	1800c <__assert_fail@plt+0x6f20>
   1111c:	mov	r2, r4
   11120:	mov	r1, #0
   11124:	mov	r3, r0
   11128:	mov	r0, #1
   1112c:	bl	10f54 <error@plt>
   11130:	andeq	fp, r1, r8, lsr r4
   11134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11138:	sub	sp, sp, #84	; 0x54
   1113c:	mov	r4, #0
   11140:	mov	r6, r0
   11144:	ldr	r0, [r1]
   11148:	mov	r5, r1
   1114c:	str	r4, [sp, #28]
   11150:	str	r4, [sp, #48]	; 0x30
   11154:	str	r4, [sp, #52]	; 0x34
   11158:	str	r4, [sp, #32]
   1115c:	bl	14140 <__assert_fail@plt+0x3054>
   11160:	ldr	r1, [pc, #3392]	; 11ea8 <__assert_fail@plt+0xdbc>
   11164:	mov	r0, #6
   11168:	bl	11080 <setlocale@plt>
   1116c:	ldr	r1, [pc, #3384]	; 11eac <__assert_fail@plt+0xdc0>
   11170:	ldr	r0, [pc, #3384]	; 11eb0 <__assert_fail@plt+0xdc4>
   11174:	bl	110bc <bindtextdomain@plt>
   11178:	ldr	r0, [pc, #3376]	; 11eb0 <__assert_fail@plt+0xdc4>
   1117c:	bl	10f00 <textdomain@plt>
   11180:	mov	r0, #3
   11184:	bl	13e50 <__assert_fail@plt+0x2d64>
   11188:	ldr	fp, [pc, #3364]	; 11eb4 <__assert_fail@plt+0xdc8>
   1118c:	ldr	sl, [pc, #3364]	; 11eb8 <__assert_fail@plt+0xdcc>
   11190:	ldr	r8, [pc, #3364]	; 11ebc <__assert_fail@plt+0xdd0>
   11194:	ldr	r7, [pc, #3364]	; 11ec0 <__assert_fail@plt+0xdd4>
   11198:	ldr	r9, [pc, #3364]	; 11ec4 <__assert_fail@plt+0xdd8>
   1119c:	strb	r0, [fp, #1]
   111a0:	ldr	r0, [pc, #3360]	; 11ec8 <__assert_fail@plt+0xddc>
   111a4:	bl	1b338 <__assert_fail@plt+0xa24c>
   111a8:	ldr	r0, [pc, #3356]	; 11ecc <__assert_fail@plt+0xde0>
   111ac:	bl	1b338 <__assert_fail@plt+0xa24c>
   111b0:	mov	r3, #1
   111b4:	strb	r4, [fp, #92]	; 0x5c
   111b8:	strb	r4, [fp, #97]	; 0x61
   111bc:	strb	r4, [fp, #96]	; 0x60
   111c0:	str	r4, [fp, #88]	; 0x58
   111c4:	strb	r3, [fp, #108]	; 0x6c
   111c8:	mov	r4, #0
   111cc:	str	r4, [sp]
   111d0:	mov	r3, r8
   111d4:	mov	r2, r7
   111d8:	mov	r1, r5
   111dc:	mov	r0, r6
   111e0:	bl	10fa8 <getopt_long@plt>
   111e4:	cmn	r0, #1
   111e8:	beq	11508 <__assert_fail@plt+0x41c>
   111ec:	cmp	r0, #105	; 0x69
   111f0:	str	r4, [sp, #24]
   111f4:	beq	11498 <__assert_fail@plt+0x3ac>
   111f8:	ble	1123c <__assert_fail@plt+0x150>
   111fc:	cmp	r0, #118	; 0x76
   11200:	beq	11300 <__assert_fail@plt+0x214>
   11204:	ble	11290 <__assert_fail@plt+0x1a4>
   11208:	cmp	r0, #256	; 0x100
   1120c:	beq	11420 <__assert_fail@plt+0x334>
   11210:	ble	1140c <__assert_fail@plt+0x320>
   11214:	ldr	r3, [pc, #3252]	; 11ed0 <__assert_fail@plt+0xde4>
   11218:	cmp	r0, r3
   1121c:	beq	113fc <__assert_fail@plt+0x310>
   11220:	add	r3, r3, #1
   11224:	cmp	r0, r3
   11228:	bne	112f8 <__assert_fail@plt+0x20c>
   1122c:	mov	r3, #1
   11230:	strb	r3, [fp, #111]	; 0x6f
   11234:	mov	r3, r4
   11238:	b	1134c <__assert_fail@plt+0x260>
   1123c:	cmp	r0, #49	; 0x31
   11240:	beq	1147c <__assert_fail@plt+0x390>
   11244:	bgt	112e0 <__assert_fail@plt+0x1f4>
   11248:	cmn	r0, #2
   1124c:	beq	11474 <__assert_fail@plt+0x388>
   11250:	cmp	r0, #1
   11254:	beq	113d0 <__assert_fail@plt+0x2e4>
   11258:	cmn	r0, #3
   1125c:	bne	112f8 <__assert_fail@plt+0x20c>
   11260:	ldr	r1, [pc, #3180]	; 11ed4 <__assert_fail@plt+0xde8>
   11264:	ldr	r3, [pc, #3180]	; 11ed8 <__assert_fail@plt+0xdec>
   11268:	ldr	r2, [pc, #3180]	; 11edc <__assert_fail@plt+0xdf0>
   1126c:	str	r4, [sp, #4]
   11270:	ldr	r0, [r1]
   11274:	ldr	r3, [r3]
   11278:	ldr	r1, [pc, #3168]	; 11ee0 <__assert_fail@plt+0xdf4>
   1127c:	str	r2, [sp]
   11280:	ldr	r2, [pc, #3164]	; 11ee4 <__assert_fail@plt+0xdf8>
   11284:	bl	18a84 <__assert_fail@plt+0x7998>
   11288:	mov	r0, r4
   1128c:	bl	10fc0 <exit@plt>
   11290:	cmp	r0, #111	; 0x6f
   11294:	beq	11430 <__assert_fail@plt+0x344>
   11298:	cmp	r0, #116	; 0x74
   1129c:	beq	11354 <__assert_fail@plt+0x268>
   112a0:	cmp	r0, #106	; 0x6a
   112a4:	bne	112f8 <__assert_fail@plt+0x20c>
   112a8:	ldr	r0, [r9]
   112ac:	ldrb	r3, [r0]
   112b0:	sub	r2, r3, #49	; 0x31
   112b4:	cmp	r2, #1
   112b8:	bls	114b0 <__assert_fail@plt+0x3c4>
   112bc:	bl	120b0 <__assert_fail@plt+0xfc4>
   112c0:	mov	r1, r0
   112c4:	ldr	r0, [pc, #3100]	; 11ee8 <__assert_fail@plt+0xdfc>
   112c8:	bl	12058 <__assert_fail@plt+0xf6c>
   112cc:	ldr	r1, [sl, #8]
   112d0:	ldr	r0, [pc, #3092]	; 11eec <__assert_fail@plt+0xe00>
   112d4:	bl	12058 <__assert_fail@plt+0xf6c>
   112d8:	ldr	r3, [sp, #24]
   112dc:	b	1134c <__assert_fail@plt+0x260>
   112e0:	cmp	r0, #97	; 0x61
   112e4:	beq	11304 <__assert_fail@plt+0x218>
   112e8:	cmp	r0, #101	; 0x65
   112ec:	beq	113a4 <__assert_fail@plt+0x2b8>
   112f0:	cmp	r0, #50	; 0x32
   112f4:	beq	11458 <__assert_fail@plt+0x36c>
   112f8:	mov	r0, #1
   112fc:	bl	134c0 <__assert_fail@plt+0x23d4>
   11300:	strb	r4, [fp, #108]	; 0x6c
   11304:	ldr	r2, [pc, #2972]	; 11ea8 <__assert_fail@plt+0xdbc>
   11308:	add	r3, sp, #68	; 0x44
   1130c:	str	r2, [sp]
   11310:	mov	r1, #0
   11314:	mov	r2, #10
   11318:	ldr	r0, [r9]
   1131c:	bl	194cc <__assert_fail@plt+0x83e0>
   11320:	cmp	r0, #0
   11324:	bne	11e28 <__assert_fail@plt+0xd3c>
   11328:	ldr	r3, [sp, #68]	; 0x44
   1132c:	sub	r2, r3, #1
   11330:	cmp	r2, #1
   11334:	bhi	11e28 <__assert_fail@plt+0xd3c>
   11338:	cmp	r3, #1
   1133c:	movne	r3, #1
   11340:	strbeq	r3, [fp, #109]	; 0x6d
   11344:	strbne	r3, [fp, #110]	; 0x6e
   11348:	ldr	r3, [sp, #24]
   1134c:	str	r3, [sp, #28]
   11350:	b	111c8 <__assert_fail@plt+0xdc>
   11354:	ldr	r0, [r9]
   11358:	ldrb	r3, [r0]
   1135c:	cmp	r3, #0
   11360:	beq	114a8 <__assert_fail@plt+0x3bc>
   11364:	ldrb	r2, [r0, #1]
   11368:	cmp	r2, #0
   1136c:	beq	11384 <__assert_fail@plt+0x298>
   11370:	ldr	r1, [pc, #2936]	; 11ef0 <__assert_fail@plt+0xe04>
   11374:	bl	10e64 <strcmp@plt>
   11378:	cmp	r0, #0
   1137c:	bne	11e64 <__assert_fail@plt+0xd78>
   11380:	mov	r3, #0
   11384:	ldr	r2, [sl]
   11388:	cmp	r2, #0
   1138c:	blt	11398 <__assert_fail@plt+0x2ac>
   11390:	cmp	r2, r3
   11394:	bne	11e58 <__assert_fail@plt+0xd6c>
   11398:	str	r3, [sl]
   1139c:	ldr	r3, [sp, #24]
   113a0:	b	1134c <__assert_fail@plt+0x260>
   113a4:	ldr	r0, [fp, #4]
   113a8:	cmp	r0, #0
   113ac:	beq	113c0 <__assert_fail@plt+0x2d4>
   113b0:	ldr	r1, [r9]
   113b4:	bl	10e64 <strcmp@plt>
   113b8:	cmp	r0, #0
   113bc:	bne	11e08 <__assert_fail@plt+0xd1c>
   113c0:	ldr	r3, [r9]
   113c4:	str	r3, [fp, #4]
   113c8:	ldr	r3, [sp, #24]
   113cc:	b	1134c <__assert_fail@plt+0x260>
   113d0:	add	r2, sp, #24
   113d4:	add	r3, sp, #28
   113d8:	str	r2, [sp, #4]
   113dc:	str	r3, [sp]
   113e0:	add	r2, sp, #48	; 0x30
   113e4:	add	r3, sp, #32
   113e8:	add	r1, sp, #40	; 0x28
   113ec:	ldr	r0, [r9]
   113f0:	bl	13830 <__assert_fail@plt+0x2744>
   113f4:	ldr	r3, [sp, #24]
   113f8:	b	1134c <__assert_fail@plt+0x260>
   113fc:	mov	r3, #2
   11400:	str	r3, [fp, #88]	; 0x58
   11404:	mov	r3, r4
   11408:	b	1134c <__assert_fail@plt+0x260>
   1140c:	cmp	r0, #122	; 0x7a
   11410:	bne	112f8 <__assert_fail@plt+0x20c>
   11414:	strb	r4, [sl, #12]
   11418:	mov	r3, r4
   1141c:	b	1134c <__assert_fail@plt+0x260>
   11420:	mov	r3, #1
   11424:	str	r3, [fp, #88]	; 0x58
   11428:	mov	r3, r4
   1142c:	b	1134c <__assert_fail@plt+0x260>
   11430:	ldr	r4, [r9]
   11434:	ldr	r1, [pc, #2744]	; 11ef4 <__assert_fail@plt+0xe08>
   11438:	mov	r0, r4
   1143c:	bl	10e64 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	bne	11be4 <__assert_fail@plt+0xaf8>
   11448:	mov	r3, #1
   1144c:	strb	r3, [fp, #16]
   11450:	ldr	r3, [sp, #24]
   11454:	b	1134c <__assert_fail@plt+0x260>
   11458:	ldr	r0, [r9]
   1145c:	bl	120b0 <__assert_fail@plt+0xfc4>
   11460:	mov	r1, r0
   11464:	ldr	r0, [pc, #2688]	; 11eec <__assert_fail@plt+0xe00>
   11468:	bl	12058 <__assert_fail@plt+0xf6c>
   1146c:	ldr	r3, [sp, #24]
   11470:	b	1134c <__assert_fail@plt+0x260>
   11474:	mov	r0, r4
   11478:	bl	134c0 <__assert_fail@plt+0x23d4>
   1147c:	ldr	r0, [r9]
   11480:	bl	120b0 <__assert_fail@plt+0xfc4>
   11484:	mov	r1, r0
   11488:	ldr	r0, [pc, #2648]	; 11ee8 <__assert_fail@plt+0xdfc>
   1148c:	bl	12058 <__assert_fail@plt+0xf6c>
   11490:	ldr	r3, [sp, #24]
   11494:	b	1134c <__assert_fail@plt+0x260>
   11498:	mov	r3, #1
   1149c:	strb	r3, [fp]
   114a0:	mov	r3, r4
   114a4:	b	1134c <__assert_fail@plt+0x260>
   114a8:	mov	r3, #10
   114ac:	b	11384 <__assert_fail@plt+0x298>
   114b0:	ldrb	r2, [r0, #1]
   114b4:	cmp	r2, #0
   114b8:	bne	112bc <__assert_fail@plt+0x1d0>
   114bc:	ldr	r2, [pc, #2612]	; 11ef8 <__assert_fail@plt+0xe0c>
   114c0:	ldr	r2, [r2]
   114c4:	sub	r2, r2, #-1073741823	; 0xc0000001
   114c8:	ldr	r2, [r5, r2, lsl #2]
   114cc:	add	r2, r2, #2
   114d0:	cmp	r0, r2
   114d4:	bne	112bc <__assert_fail@plt+0x1d0>
   114d8:	sub	r3, r3, #50	; 0x32
   114dc:	clz	r3, r3
   114e0:	lsr	r3, r3, #5
   114e4:	add	r1, sp, #80	; 0x50
   114e8:	add	r2, r3, #1
   114ec:	add	r3, r1, r3, lsl #2
   114f0:	str	r2, [sp, #24]
   114f4:	ldr	r2, [r3, #-32]	; 0xffffffe0
   114f8:	add	r2, r2, #1
   114fc:	str	r2, [r3, #-32]	; 0xffffffe0
   11500:	ldr	r3, [sp, #24]
   11504:	b	1134c <__assert_fail@plt+0x260>
   11508:	ldr	r7, [pc, #2536]	; 11ef8 <__assert_fail@plt+0xe0c>
   1150c:	str	r4, [sp, #28]
   11510:	ldr	r3, [r7]
   11514:	cmp	r6, r3
   11518:	addgt	r8, sp, #24
   1151c:	addgt	r4, sp, #28
   11520:	ble	11550 <__assert_fail@plt+0x464>
   11524:	add	ip, r3, #1
   11528:	ldr	r0, [r5, r3, lsl #2]
   1152c:	add	r2, sp, #48	; 0x30
   11530:	stm	sp, {r4, r8}
   11534:	add	r3, sp, #32
   11538:	add	r1, sp, #40	; 0x28
   1153c:	str	ip, [r7]
   11540:	bl	13830 <__assert_fail@plt+0x2744>
   11544:	ldr	r3, [r7]
   11548:	cmp	r6, r3
   1154c:	bgt	11524 <__assert_fail@plt+0x438>
   11550:	ldr	r4, [sp, #32]
   11554:	cmp	r4, #2
   11558:	bne	11d64 <__assert_fail@plt+0xc78>
   1155c:	ldr	r3, [sp, #48]	; 0x30
   11560:	cmp	r3, #0
   11564:	bne	11c98 <__assert_fail@plt+0xbac>
   11568:	ldr	r3, [sp, #52]	; 0x34
   1156c:	cmp	r3, #0
   11570:	bne	11c7c <__assert_fail@plt+0xb90>
   11574:	ldr	r5, [pc, #2364]	; 11eb8 <__assert_fail@plt+0xdcc>
   11578:	ldr	r4, [fp, #100]	; 0x64
   1157c:	ldr	r1, [pc, #2424]	; 11efc <__assert_fail@plt+0xe10>
   11580:	ldr	r3, [r5, #8]
   11584:	mov	r0, r4
   11588:	cmn	r3, #1
   1158c:	moveq	r3, #0
   11590:	streq	r3, [r5, #8]
   11594:	ldr	r3, [r5, #4]
   11598:	cmn	r3, #1
   1159c:	moveq	r3, #0
   115a0:	streq	r3, [r5, #4]
   115a4:	bl	10e64 <strcmp@plt>
   115a8:	cmp	r0, #0
   115ac:	ldreq	r3, [pc, #2380]	; 11f00 <__assert_fail@plt+0xe14>
   115b0:	ldreq	r8, [r3]
   115b4:	bne	11cb4 <__assert_fail@plt+0xbc8>
   115b8:	cmp	r8, #0
   115bc:	beq	11d38 <__assert_fail@plt+0xc4c>
   115c0:	ldr	r4, [fp, #104]	; 0x68
   115c4:	ldr	r1, [pc, #2352]	; 11efc <__assert_fail@plt+0xe10>
   115c8:	mov	r0, r4
   115cc:	bl	10e64 <strcmp@plt>
   115d0:	cmp	r0, #0
   115d4:	ldreq	r3, [pc, #2340]	; 11f00 <__assert_fail@plt+0xe14>
   115d8:	ldreq	r7, [r3]
   115dc:	bne	11cc8 <__assert_fail@plt+0xbdc>
   115e0:	cmp	r7, #0
   115e4:	beq	11dd4 <__assert_fail@plt+0xce8>
   115e8:	cmp	r8, r7
   115ec:	beq	11de0 <__assert_fail@plt+0xcf4>
   115f0:	mov	r1, #2
   115f4:	mov	r0, r8
   115f8:	bl	13b8c <__assert_fail@plt+0x2aa0>
   115fc:	mov	r1, #2
   11600:	mov	r0, r7
   11604:	bl	13b8c <__assert_fail@plt+0x2aa0>
   11608:	mov	r4, #0
   1160c:	add	r1, sp, #56	; 0x38
   11610:	mov	r0, r8
   11614:	str	r4, [sp, #56]	; 0x38
   11618:	str	r4, [sp, #60]	; 0x3c
   1161c:	str	r4, [sp, #64]	; 0x40
   11620:	bl	13008 <__assert_fail@plt+0x1f1c>
   11624:	add	r1, sp, #68	; 0x44
   11628:	mov	r0, r7
   1162c:	str	r4, [sp, #68]	; 0x44
   11630:	str	r4, [sp, #72]	; 0x48
   11634:	str	r4, [sp, #76]	; 0x4c
   11638:	bl	13264 <__assert_fail@plt+0x2178>
   1163c:	ldrb	r3, [fp, #16]
   11640:	cmp	r3, r4
   11644:	ldr	r3, [sp, #56]	; 0x38
   11648:	beq	1167c <__assert_fail@plt+0x590>
   1164c:	cmp	r3, #0
   11650:	mov	r1, r3
   11654:	ldrne	r2, [sp, #64]	; 0x40
   11658:	ldrne	r2, [r2]
   1165c:	ldrne	r1, [r2, #12]
   11660:	ldr	r2, [sp, #68]	; 0x44
   11664:	str	r1, [fp, #56]	; 0x38
   11668:	cmp	r2, #0
   1166c:	ldrne	r2, [sp, #76]	; 0x4c
   11670:	ldrne	r2, [r2]
   11674:	ldrne	r2, [r2, #12]
   11678:	str	r2, [fp, #60]	; 0x3c
   1167c:	ldrb	r2, [fp, #111]	; 0x6f
   11680:	cmp	r2, #0
   11684:	beq	116d4 <__assert_fail@plt+0x5e8>
   11688:	cmp	r3, #0
   1168c:	bne	11c14 <__assert_fail@plt+0xb28>
   11690:	ldr	r3, [sp, #68]	; 0x44
   11694:	cmp	r3, #0
   11698:	beq	11a2c <__assert_fail@plt+0x940>
   1169c:	ldr	r0, [pc, #2144]	; 11f04 <__assert_fail@plt+0xe18>
   116a0:	ldr	r3, [sp, #76]	; 0x4c
   116a4:	ldr	r1, [r3]
   116a8:	bl	12508 <__assert_fail@plt+0x141c>
   116ac:	ldr	r3, [sp, #56]	; 0x38
   116b0:	mov	r2, #0
   116b4:	cmp	r3, r2
   116b8:	str	r2, [fp, #64]	; 0x40
   116bc:	str	r2, [fp, #68]	; 0x44
   116c0:	bne	11cf4 <__assert_fail@plt+0xc08>
   116c4:	ldr	r3, [sp, #68]	; 0x44
   116c8:	cmp	r3, #0
   116cc:	bne	11cdc <__assert_fail@plt+0xbf0>
   116d0:	ldr	r3, [sp, #56]	; 0x38
   116d4:	add	r2, sp, #60	; 0x3c
   116d8:	mov	r9, #0
   116dc:	str	r2, [sp, #16]
   116e0:	add	r2, sp, #72	; 0x48
   116e4:	str	r2, [sp, #20]
   116e8:	cmp	r3, #0
   116ec:	beq	11a2c <__assert_fail@plt+0x940>
   116f0:	ldr	r2, [sp, #68]	; 0x44
   116f4:	cmp	r2, #0
   116f8:	beq	11a30 <__assert_fail@plt+0x944>
   116fc:	ldr	r2, [sp, #64]	; 0x40
   11700:	ldr	r3, [sp, #76]	; 0x4c
   11704:	ldr	lr, [r5, #4]
   11708:	ldr	r1, [r2]
   1170c:	ldr	r3, [r3]
   11710:	ldr	ip, [r5, #8]
   11714:	ldr	r0, [r1, #12]
   11718:	ldr	r2, [r3, #12]
   1171c:	add	r1, r1, #20
   11720:	add	r3, r3, #20
   11724:	stm	sp, {ip, lr}
   11728:	bl	12128 <__assert_fail@plt+0x103c>
   1172c:	cmp	r0, #0
   11730:	blt	119e0 <__assert_fail@plt+0x8f4>
   11734:	beq	117ac <__assert_fail@plt+0x6c0>
   11738:	ldrb	r3, [fp, #110]	; 0x6e
   1173c:	cmp	r3, #0
   11740:	bne	11a0c <__assert_fail@plt+0x920>
   11744:	add	r1, sp, #68	; 0x44
   11748:	mov	r0, r7
   1174c:	str	r9, [sp, #68]	; 0x44
   11750:	bl	13264 <__assert_fail@plt+0x2178>
   11754:	mov	r3, #1
   11758:	strb	r3, [fp, #92]	; 0x5c
   1175c:	ldr	r3, [sp, #56]	; 0x38
   11760:	b	116e8 <__assert_fail@plt+0x5fc>
   11764:	ldr	ip, [sp, #56]	; 0x38
   11768:	ldr	r2, [sp, #64]	; 0x40
   1176c:	ldr	r3, [sp, #76]	; 0x4c
   11770:	ldr	r4, [r5, #4]
   11774:	ldr	r1, [r2, ip, lsl #2]
   11778:	ldr	r3, [r3]
   1177c:	ldr	lr, [r5, #8]
   11780:	ldr	r0, [r1, #12]
   11784:	ldr	r2, [r3, #12]
   11788:	add	ip, ip, #1
   1178c:	add	r1, r1, #20
   11790:	add	r3, r3, #20
   11794:	str	r4, [sp, #4]
   11798:	str	lr, [sp]
   1179c:	str	ip, [sp, #56]	; 0x38
   117a0:	bl	12128 <__assert_fail@plt+0x103c>
   117a4:	cmp	r0, #0
   117a8:	bne	11a1c <__assert_fail@plt+0x930>
   117ac:	ldr	r3, [sp, #56]	; 0x38
   117b0:	ldr	r2, [sp, #60]	; 0x3c
   117b4:	cmp	r3, r2
   117b8:	beq	11994 <__assert_fail@plt+0x8a8>
   117bc:	ldr	r1, [sp, #64]	; 0x40
   117c0:	lsl	r4, r3, #2
   117c4:	mov	r0, r8
   117c8:	add	r1, r1, r4
   117cc:	bl	12ccc <__assert_fail@plt+0x1be0>
   117d0:	cmp	r0, #0
   117d4:	bne	11764 <__assert_fail@plt+0x678>
   117d8:	ldr	r3, [sp, #56]	; 0x38
   117dc:	mov	r2, #1
   117e0:	add	r3, r3, r2
   117e4:	str	r2, [sp, #8]
   117e8:	str	r3, [sp, #56]	; 0x38
   117ec:	b	11830 <__assert_fail@plt+0x744>
   117f0:	ldr	r0, [sp, #76]	; 0x4c
   117f4:	ldr	r1, [sp, #64]	; 0x40
   117f8:	add	r2, r3, #1
   117fc:	ldr	lr, [r5, #4]
   11800:	ldr	r3, [r0, r3, lsl #2]
   11804:	ldr	r1, [r1]
   11808:	ldr	ip, [r5, #8]
   1180c:	str	r2, [sp, #68]	; 0x44
   11810:	add	r3, r3, #20
   11814:	ldr	r2, [r3, #-8]
   11818:	ldr	r0, [r1, #12]
   1181c:	add	r1, r1, #20
   11820:	stm	sp, {ip, lr}
   11824:	bl	12128 <__assert_fail@plt+0x103c>
   11828:	cmp	r0, #0
   1182c:	bne	11a24 <__assert_fail@plt+0x938>
   11830:	ldr	r3, [sp, #68]	; 0x44
   11834:	ldr	r2, [sp, #72]	; 0x48
   11838:	cmp	r3, r2
   1183c:	beq	11948 <__assert_fail@plt+0x85c>
   11840:	ldr	r1, [sp, #76]	; 0x4c
   11844:	lsl	r4, r3, #2
   11848:	mov	r0, r7
   1184c:	add	r1, r1, r4
   11850:	bl	12ae8 <__assert_fail@plt+0x19fc>
   11854:	ldr	r3, [sp, #68]	; 0x44
   11858:	cmp	r0, #0
   1185c:	bne	117f0 <__assert_fail@plt+0x704>
   11860:	mov	r2, #1
   11864:	add	r3, r3, r2
   11868:	str	r2, [sp, #12]
   1186c:	str	r3, [sp, #68]	; 0x44
   11870:	ldrb	r3, [fp, #108]	; 0x6c
   11874:	cmp	r3, #0
   11878:	beq	118dc <__assert_fail@plt+0x7f0>
   1187c:	ldr	r3, [sp, #56]	; 0x38
   11880:	cmp	r3, #1
   11884:	beq	118dc <__assert_fail@plt+0x7f0>
   11888:	ldr	r2, [sp, #68]	; 0x44
   1188c:	mov	r6, #0
   11890:	cmp	r2, #1
   11894:	lslne	sl, r6, #2
   11898:	movne	r4, #0
   1189c:	beq	11bd0 <__assert_fail@plt+0xae4>
   118a0:	ldr	r2, [sp, #76]	; 0x4c
   118a4:	ldr	r3, [sp, #64]	; 0x40
   118a8:	ldr	r1, [r2, r4, lsl #2]
   118ac:	ldr	r0, [r3, sl]
   118b0:	bl	12508 <__assert_fail@plt+0x141c>
   118b4:	ldr	r2, [sp, #68]	; 0x44
   118b8:	add	r4, r4, #1
   118bc:	sub	r3, r2, #1
   118c0:	cmp	r4, r3
   118c4:	bcc	118a0 <__assert_fail@plt+0x7b4>
   118c8:	ldr	r3, [sp, #56]	; 0x38
   118cc:	add	r6, r6, #1
   118d0:	sub	r1, r3, #1
   118d4:	cmp	r6, r1
   118d8:	bcc	11890 <__assert_fail@plt+0x7a4>
   118dc:	ldr	r3, [sp, #8]
   118e0:	cmp	r3, #0
   118e4:	movne	r3, #0
   118e8:	strne	r9, [sp, #56]	; 0x38
   118ec:	bne	11914 <__assert_fail@plt+0x828>
   118f0:	ldr	r3, [sp, #56]	; 0x38
   118f4:	ldr	r2, [sp, #64]	; 0x40
   118f8:	sub	r1, r3, #-1073741823	; 0xc0000001
   118fc:	mov	r3, #1
   11900:	ldr	ip, [r2, r1, lsl #2]
   11904:	ldr	r0, [r2]
   11908:	str	ip, [r2]
   1190c:	str	r0, [r2, r1, lsl #2]
   11910:	str	r3, [sp, #56]	; 0x38
   11914:	ldr	r2, [sp, #12]
   11918:	cmp	r2, #0
   1191c:	moveq	r0, #1
   11920:	ldreq	r1, [sp, #68]	; 0x44
   11924:	ldreq	r2, [sp, #76]	; 0x4c
   11928:	subeq	r1, r1, #-1073741823	; 0xc0000001
   1192c:	strne	r9, [sp, #68]	; 0x44
   11930:	ldreq	lr, [r2, r1, lsl #2]
   11934:	ldreq	ip, [r2]
   11938:	streq	lr, [r2]
   1193c:	streq	ip, [r2, r1, lsl #2]
   11940:	streq	r0, [sp, #68]	; 0x44
   11944:	b	116e8 <__assert_fail@plt+0x5fc>
   11948:	mov	r2, #4
   1194c:	ldr	r1, [sp, #20]
   11950:	ldr	r0, [sp, #76]	; 0x4c
   11954:	bl	18e1c <__assert_fail@plt+0x7d30>
   11958:	ldr	r3, [sp, #68]	; 0x44
   1195c:	ldr	r2, [sp, #72]	; 0x48
   11960:	cmp	r2, r3
   11964:	lslls	r4, r3, #2
   11968:	str	r0, [sp, #76]	; 0x4c
   1196c:	movls	r1, r0
   11970:	bls	11848 <__assert_fail@plt+0x75c>
   11974:	sub	r2, r2, r3
   11978:	lsl	r4, r3, #2
   1197c:	mov	r1, r9
   11980:	lsl	r2, r2, #2
   11984:	add	r0, r0, r4
   11988:	bl	11008 <memset@plt>
   1198c:	ldr	r1, [sp, #76]	; 0x4c
   11990:	b	11848 <__assert_fail@plt+0x75c>
   11994:	mov	r2, #4
   11998:	ldr	r1, [sp, #16]
   1199c:	ldr	r0, [sp, #64]	; 0x40
   119a0:	bl	18e1c <__assert_fail@plt+0x7d30>
   119a4:	ldr	r3, [sp, #56]	; 0x38
   119a8:	ldr	r2, [sp, #60]	; 0x3c
   119ac:	cmp	r2, r3
   119b0:	lslls	r4, r3, #2
   119b4:	str	r0, [sp, #64]	; 0x40
   119b8:	movls	r1, r0
   119bc:	bls	117c4 <__assert_fail@plt+0x6d8>
   119c0:	sub	r2, r2, r3
   119c4:	lsl	r4, r3, #2
   119c8:	mov	r1, r9
   119cc:	lsl	r2, r2, #2
   119d0:	add	r0, r0, r4
   119d4:	bl	11008 <memset@plt>
   119d8:	ldr	r1, [sp, #64]	; 0x40
   119dc:	b	117c4 <__assert_fail@plt+0x6d8>
   119e0:	ldrb	r3, [fp, #109]	; 0x6d
   119e4:	cmp	r3, #0
   119e8:	bne	11bf8 <__assert_fail@plt+0xb0c>
   119ec:	add	r1, sp, #56	; 0x38
   119f0:	mov	r0, r8
   119f4:	str	r9, [sp, #56]	; 0x38
   119f8:	bl	13008 <__assert_fail@plt+0x1f1c>
   119fc:	mov	r3, #1
   11a00:	strb	r3, [fp, #92]	; 0x5c
   11a04:	ldr	r3, [sp, #56]	; 0x38
   11a08:	b	116e8 <__assert_fail@plt+0x5fc>
   11a0c:	ldr	r3, [sp, #76]	; 0x4c
   11a10:	ldr	r0, [r3]
   11a14:	bl	126bc <__assert_fail@plt+0x15d0>
   11a18:	b	11744 <__assert_fail@plt+0x658>
   11a1c:	str	r9, [sp, #8]
   11a20:	b	11830 <__assert_fail@plt+0x744>
   11a24:	str	r9, [sp, #12]
   11a28:	b	11870 <__assert_fail@plt+0x784>
   11a2c:	mov	r3, #0
   11a30:	ldr	r1, [fp, #88]	; 0x58
   11a34:	mov	r2, #0
   11a38:	cmp	r1, #2
   11a3c:	str	r2, [sp, #36]	; 0x24
   11a40:	beq	11a5c <__assert_fail@plt+0x970>
   11a44:	ldrb	r2, [fp, #96]	; 0x60
   11a48:	cmp	r2, #0
   11a4c:	beq	11b58 <__assert_fail@plt+0xa6c>
   11a50:	ldrb	r2, [fp, #97]	; 0x61
   11a54:	cmp	r2, #0
   11a58:	beq	11b58 <__assert_fail@plt+0xa6c>
   11a5c:	ldrb	r2, [fp, #109]	; 0x6d
   11a60:	cmp	r2, #0
   11a64:	bne	11d18 <__assert_fail@plt+0xc2c>
   11a68:	ldrb	r3, [fp, #110]	; 0x6e
   11a6c:	cmp	r3, #0
   11a70:	beq	11af0 <__assert_fail@plt+0xa04>
   11a74:	ldr	r2, [sp, #68]	; 0x44
   11a78:	cmp	r2, #0
   11a7c:	beq	11af0 <__assert_fail@plt+0xa04>
   11a80:	cmp	r3, #0
   11a84:	bne	11d08 <__assert_fail@plt+0xc1c>
   11a88:	ldr	r3, [sp, #56]	; 0x38
   11a8c:	add	r4, sp, #36	; 0x24
   11a90:	cmp	r3, #0
   11a94:	movne	r3, #1
   11a98:	strbne	r3, [fp, #92]	; 0x5c
   11a9c:	mov	r1, r4
   11aa0:	mov	r0, r7
   11aa4:	bl	12ae8 <__assert_fail@plt+0x19fc>
   11aa8:	cmp	r0, #0
   11aac:	beq	11ac8 <__assert_fail@plt+0x9dc>
   11ab0:	ldrb	r3, [fp, #110]	; 0x6e
   11ab4:	cmp	r3, #0
   11ab8:	bne	11c30 <__assert_fail@plt+0xb44>
   11abc:	ldrb	r3, [fp, #97]	; 0x61
   11ac0:	cmp	r3, #0
   11ac4:	beq	11a9c <__assert_fail@plt+0x9b0>
   11ac8:	ldr	r4, [sp, #36]	; 0x24
   11acc:	cmp	r4, #0
   11ad0:	beq	11af0 <__assert_fail@plt+0xa04>
   11ad4:	ldr	r0, [r4, #20]
   11ad8:	mov	r5, #0
   11adc:	bl	13d58 <__assert_fail@plt+0x2c6c>
   11ae0:	str	r5, [r4, #20]
   11ae4:	ldr	r0, [r4, #8]
   11ae8:	bl	13d58 <__assert_fail@plt+0x2c6c>
   11aec:	str	r5, [r4, #8]
   11af0:	ldr	r0, [sp, #36]	; 0x24
   11af4:	bl	13d58 <__assert_fail@plt+0x2c6c>
   11af8:	add	r3, sp, #56	; 0x38
   11afc:	add	r0, r3, #4
   11b00:	add	r1, sp, #64	; 0x40
   11b04:	bl	12288 <__assert_fail@plt+0x119c>
   11b08:	add	r3, sp, #68	; 0x44
   11b0c:	add	r0, r3, #4
   11b10:	add	r1, sp, #76	; 0x4c
   11b14:	bl	12288 <__assert_fail@plt+0x119c>
   11b18:	mov	r0, r8
   11b1c:	bl	13bc0 <__assert_fail@plt+0x2ad4>
   11b20:	subs	r4, r0, #0
   11b24:	bne	11d38 <__assert_fail@plt+0xc4c>
   11b28:	mov	r0, r7
   11b2c:	bl	13bc0 <__assert_fail@plt+0x2ad4>
   11b30:	cmp	r0, #0
   11b34:	bne	11e7c <__assert_fail@plt+0xd90>
   11b38:	ldrb	r3, [fp, #96]	; 0x60
   11b3c:	cmp	r3, #0
   11b40:	bne	11e70 <__assert_fail@plt+0xd84>
   11b44:	ldrb	r3, [fp, #97]	; 0x61
   11b48:	cmp	r3, #0
   11b4c:	bne	11e70 <__assert_fail@plt+0xd84>
   11b50:	add	sp, sp, #84	; 0x54
   11b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b58:	cmp	r3, #0
   11b5c:	beq	11c0c <__assert_fail@plt+0xb20>
   11b60:	ldrb	r6, [fp, #109]	; 0x6d
   11b64:	cmp	r6, #0
   11b68:	moveq	r6, #1
   11b6c:	bne	11d24 <__assert_fail@plt+0xc38>
   11b70:	ldr	r3, [sp, #68]	; 0x44
   11b74:	ldr	r5, [pc, #904]	; 11f04 <__assert_fail@plt+0xe18>
   11b78:	cmp	r3, #0
   11b7c:	add	r4, sp, #36	; 0x24
   11b80:	movne	r3, #1
   11b84:	strbne	r3, [fp, #92]	; 0x5c
   11b88:	mov	r1, r4
   11b8c:	mov	r0, r8
   11b90:	bl	12ccc <__assert_fail@plt+0x1be0>
   11b94:	cmp	r0, #0
   11b98:	beq	11bb4 <__assert_fail@plt+0xac8>
   11b9c:	ldrb	r3, [fp, #109]	; 0x6d
   11ba0:	cmp	r3, #0
   11ba4:	bne	11c54 <__assert_fail@plt+0xb68>
   11ba8:	ldrb	r3, [fp, #96]	; 0x60
   11bac:	cmp	r3, #0
   11bb0:	beq	11b88 <__assert_fail@plt+0xa9c>
   11bb4:	ldrb	r3, [fp, #110]	; 0x6e
   11bb8:	orrs	r2, r3, r6
   11bbc:	beq	11ac8 <__assert_fail@plt+0x9dc>
   11bc0:	ldr	r2, [sp, #68]	; 0x44
   11bc4:	cmp	r2, #0
   11bc8:	beq	11ac8 <__assert_fail@plt+0x9dc>
   11bcc:	b	11a80 <__assert_fail@plt+0x994>
   11bd0:	add	r6, r6, #1
   11bd4:	sub	r1, r3, #1
   11bd8:	cmp	r1, r6
   11bdc:	bhi	118cc <__assert_fail@plt+0x7e0>
   11be0:	b	118dc <__assert_fail@plt+0x7f0>
   11be4:	mov	r0, r4
   11be8:	bl	12eb0 <__assert_fail@plt+0x1dc4>
   11bec:	mov	r3, #3
   11bf0:	str	r3, [sp, #24]
   11bf4:	b	1134c <__assert_fail@plt+0x260>
   11bf8:	ldr	r3, [sp, #64]	; 0x40
   11bfc:	ldr	r1, [pc, #768]	; 11f04 <__assert_fail@plt+0xe18>
   11c00:	ldr	r0, [r3]
   11c04:	bl	12508 <__assert_fail@plt+0x141c>
   11c08:	b	119ec <__assert_fail@plt+0x900>
   11c0c:	ldrb	r3, [fp, #110]	; 0x6e
   11c10:	b	11a74 <__assert_fail@plt+0x988>
   11c14:	ldr	r2, [sp, #68]	; 0x44
   11c18:	ldr	r3, [sp, #64]	; 0x40
   11c1c:	cmp	r2, #0
   11c20:	ldr	r0, [r3]
   11c24:	ldreq	r1, [pc, #728]	; 11f04 <__assert_fail@plt+0xe18>
   11c28:	beq	116a8 <__assert_fail@plt+0x5bc>
   11c2c:	b	116a0 <__assert_fail@plt+0x5b4>
   11c30:	ldr	r0, [sp, #36]	; 0x24
   11c34:	bl	126bc <__assert_fail@plt+0x15d0>
   11c38:	ldrb	r3, [fp, #97]	; 0x61
   11c3c:	cmp	r3, #0
   11c40:	beq	11a9c <__assert_fail@plt+0x9b0>
   11c44:	ldrb	r3, [fp, #110]	; 0x6e
   11c48:	cmp	r3, #0
   11c4c:	bne	11a9c <__assert_fail@plt+0x9b0>
   11c50:	b	11ac8 <__assert_fail@plt+0x9dc>
   11c54:	mov	r1, r5
   11c58:	ldr	r0, [sp, #36]	; 0x24
   11c5c:	bl	12508 <__assert_fail@plt+0x141c>
   11c60:	ldrb	r3, [fp, #96]	; 0x60
   11c64:	cmp	r3, #0
   11c68:	beq	11b88 <__assert_fail@plt+0xa9c>
   11c6c:	ldrb	r3, [fp, #109]	; 0x6d
   11c70:	cmp	r3, #0
   11c74:	bne	11b88 <__assert_fail@plt+0xa9c>
   11c78:	b	11bb4 <__assert_fail@plt+0xac8>
   11c7c:	mov	r1, #1
   11c80:	ldr	r0, [pc, #608]	; 11ee8 <__assert_fail@plt+0xdfc>
   11c84:	bl	12058 <__assert_fail@plt+0xf6c>
   11c88:	mov	r1, #1
   11c8c:	ldr	r0, [pc, #600]	; 11eec <__assert_fail@plt+0xe00>
   11c90:	bl	12058 <__assert_fail@plt+0xf6c>
   11c94:	b	11574 <__assert_fail@plt+0x488>
   11c98:	mov	r1, #0
   11c9c:	ldr	r0, [pc, #580]	; 11ee8 <__assert_fail@plt+0xdfc>
   11ca0:	bl	12058 <__assert_fail@plt+0xf6c>
   11ca4:	mov	r1, #0
   11ca8:	ldr	r0, [pc, #572]	; 11eec <__assert_fail@plt+0xe00>
   11cac:	bl	12058 <__assert_fail@plt+0xf6c>
   11cb0:	b	11568 <__assert_fail@plt+0x47c>
   11cb4:	mov	r0, r4
   11cb8:	ldr	r1, [pc, #584]	; 11f08 <__assert_fail@plt+0xe1c>
   11cbc:	bl	13cc0 <__assert_fail@plt+0x2bd4>
   11cc0:	mov	r8, r0
   11cc4:	b	115b8 <__assert_fail@plt+0x4cc>
   11cc8:	mov	r0, r4
   11ccc:	ldr	r1, [pc, #564]	; 11f08 <__assert_fail@plt+0xe1c>
   11cd0:	bl	13cc0 <__assert_fail@plt+0x2bd4>
   11cd4:	mov	r7, r0
   11cd8:	b	115e0 <__assert_fail@plt+0x4f4>
   11cdc:	mov	r3, #0
   11ce0:	add	r1, sp, #68	; 0x44
   11ce4:	mov	r0, r7
   11ce8:	str	r3, [sp, #68]	; 0x44
   11cec:	bl	13264 <__assert_fail@plt+0x2178>
   11cf0:	b	116d0 <__assert_fail@plt+0x5e4>
   11cf4:	add	r1, sp, #56	; 0x38
   11cf8:	mov	r0, r8
   11cfc:	str	r2, [sp, #56]	; 0x38
   11d00:	bl	13008 <__assert_fail@plt+0x1f1c>
   11d04:	b	116c4 <__assert_fail@plt+0x5d8>
   11d08:	ldr	r3, [sp, #76]	; 0x4c
   11d0c:	ldr	r0, [r3]
   11d10:	bl	126bc <__assert_fail@plt+0x15d0>
   11d14:	b	11a88 <__assert_fail@plt+0x99c>
   11d18:	cmp	r3, #0
   11d1c:	beq	11d90 <__assert_fail@plt+0xca4>
   11d20:	mov	r6, #0
   11d24:	ldr	r3, [sp, #64]	; 0x40
   11d28:	ldr	r1, [pc, #468]	; 11f04 <__assert_fail@plt+0xe18>
   11d2c:	ldr	r0, [r3]
   11d30:	bl	12508 <__assert_fail@plt+0x141c>
   11d34:	b	11b70 <__assert_fail@plt+0xa84>
   11d38:	bl	10ff0 <__errno_location@plt>
   11d3c:	ldr	r2, [fp, #100]	; 0x64
   11d40:	ldr	r4, [r0]
   11d44:	mov	r1, #3
   11d48:	mov	r0, #0
   11d4c:	bl	17118 <__assert_fail@plt+0x602c>
   11d50:	mov	r1, r4
   11d54:	ldr	r2, [pc, #432]	; 11f0c <__assert_fail@plt+0xe20>
   11d58:	mov	r3, r0
   11d5c:	mov	r0, #1
   11d60:	bl	10f54 <error@plt>
   11d64:	cmp	r4, #0
   11d68:	mov	r2, #5
   11d6c:	bne	11da0 <__assert_fail@plt+0xcb4>
   11d70:	ldr	r1, [pc, #408]	; 11f10 <__assert_fail@plt+0xe24>
   11d74:	mov	r0, r4
   11d78:	bl	10ee8 <dcgettext@plt>
   11d7c:	mov	r1, r4
   11d80:	mov	r2, r0
   11d84:	mov	r0, r4
   11d88:	bl	10f54 <error@plt>
   11d8c:	b	112f8 <__assert_fail@plt+0x20c>
   11d90:	ldrb	r3, [fp, #110]	; 0x6e
   11d94:	cmp	r3, #0
   11d98:	beq	11af0 <__assert_fail@plt+0xa04>
   11d9c:	b	11bc0 <__assert_fail@plt+0xad4>
   11da0:	ldr	r1, [pc, #364]	; 11f14 <__assert_fail@plt+0xe28>
   11da4:	mov	r0, #0
   11da8:	bl	10ee8 <dcgettext@plt>
   11dac:	sub	r6, r6, #-1073741823	; 0xc0000001
   11db0:	mov	r4, r0
   11db4:	ldr	r0, [r5, r6, lsl #2]
   11db8:	bl	1800c <__assert_fail@plt+0x6f20>
   11dbc:	mov	r1, #0
   11dc0:	mov	r2, r4
   11dc4:	mov	r3, r0
   11dc8:	mov	r0, r1
   11dcc:	bl	10f54 <error@plt>
   11dd0:	b	112f8 <__assert_fail@plt+0x20c>
   11dd4:	bl	10ff0 <__errno_location@plt>
   11dd8:	ldr	r2, [fp, #104]	; 0x68
   11ddc:	b	11d40 <__assert_fail@plt+0xc54>
   11de0:	bl	10ff0 <__errno_location@plt>
   11de4:	mov	r2, #5
   11de8:	ldr	r1, [pc, #296]	; 11f18 <__assert_fail@plt+0xe2c>
   11dec:	ldr	r4, [r0]
   11df0:	mov	r0, #0
   11df4:	bl	10ee8 <dcgettext@plt>
   11df8:	mov	r1, r4
   11dfc:	mov	r2, r0
   11e00:	mov	r0, #1
   11e04:	bl	10f54 <error@plt>
   11e08:	ldr	r1, [pc, #268]	; 11f1c <__assert_fail@plt+0xe30>
   11e0c:	mov	r2, #5
   11e10:	mov	r0, #0
   11e14:	bl	10ee8 <dcgettext@plt>
   11e18:	mov	r1, #0
   11e1c:	mov	r2, r0
   11e20:	mov	r0, #1
   11e24:	bl	10f54 <error@plt>
   11e28:	ldr	r1, [pc, #240]	; 11f20 <__assert_fail@plt+0xe34>
   11e2c:	mov	r2, #5
   11e30:	mov	r0, #0
   11e34:	bl	10ee8 <dcgettext@plt>
   11e38:	mov	r4, r0
   11e3c:	ldr	r0, [r9]
   11e40:	bl	1800c <__assert_fail@plt+0x6f20>
   11e44:	mov	r2, r4
   11e48:	mov	r1, #0
   11e4c:	mov	r3, r0
   11e50:	mov	r0, #1
   11e54:	bl	10f54 <error@plt>
   11e58:	mov	r2, #5
   11e5c:	ldr	r1, [pc, #192]	; 11f24 <__assert_fail@plt+0xe38>
   11e60:	b	11e10 <__assert_fail@plt+0xd24>
   11e64:	mov	r2, #5
   11e68:	ldr	r1, [pc, #184]	; 11f28 <__assert_fail@plt+0xe3c>
   11e6c:	b	11e30 <__assert_fail@plt+0xd44>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #176]	; 11f2c <__assert_fail@plt+0xe40>
   11e78:	b	11e10 <__assert_fail@plt+0xd24>
   11e7c:	bl	10ff0 <__errno_location@plt>
   11e80:	ldr	r2, [fp, #104]	; 0x68
   11e84:	mov	r1, #3
   11e88:	ldr	r5, [r0]
   11e8c:	mov	r0, r4
   11e90:	bl	17118 <__assert_fail@plt+0x602c>
   11e94:	mov	r1, r5
   11e98:	ldr	r2, [pc, #108]	; 11f0c <__assert_fail@plt+0xe20>
   11e9c:	mov	r3, r0
   11ea0:	mov	r0, #1
   11ea4:	bl	10f54 <error@plt>
   11ea8:	andeq	fp, r1, r0, lsr sl
   11eac:	ldrdeq	fp, [r1], -r0
   11eb0:	andeq	fp, r1, r4, lsl lr
   11eb4:	andeq	sp, r2, r8, lsl #3
   11eb8:	andeq	sp, r2, r4, lsl #2
   11ebc:	muleq	r1, r4, r3
   11ec0:	andeq	fp, r1, ip, asr pc
   11ec4:	andeq	sp, r2, r0, lsl #3
   11ec8:	muleq	r1, ip, sl
   11ecc:	strdeq	r2, [r1], -ip
   11ed0:	andeq	r0, r0, r1, lsl #2
   11ed4:	andeq	sp, r2, ip, ror r1
   11ed8:	andeq	sp, r2, r8, lsl r1
   11edc:	andeq	fp, r1, ip, asr #30
   11ee0:	andeq	fp, r1, r8, asr #9
   11ee4:	andeq	fp, r1, r0, lsl lr
   11ee8:	andeq	sp, r2, ip, lsl #2
   11eec:	andeq	sp, r2, r8, lsl #2
   11ef0:	andeq	fp, r1, ip, lsl pc
   11ef4:	andeq	fp, r1, r4, lsl pc
   11ef8:	andeq	sp, r2, r8, ror #2
   11efc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11f00:	andeq	sp, r2, r8, ror r1
   11f04:	andeq	sp, r2, r8, lsr #3
   11f08:	andeq	ip, r1, r4, ror r0
   11f0c:	andeq	ip, r1, r0, asr #1
   11f10:	andeq	fp, r1, r0, ror pc
   11f14:	andeq	fp, r1, r0, lsl #31
   11f18:	andeq	fp, r1, r0, lsr #31
   11f1c:	andeq	fp, r1, r8, ror #29
   11f20:	andeq	fp, r1, r8, lsr r4
   11f24:	andeq	fp, r1, r8, lsr pc
   11f28:	andeq	fp, r1, r0, lsr #30
   11f2c:	andeq	fp, r1, r4, asr #31
   11f30:	mov	fp, #0
   11f34:	mov	lr, #0
   11f38:	pop	{r1}		; (ldr r1, [sp], #4)
   11f3c:	mov	r2, sp
   11f40:	push	{r2}		; (str r2, [sp, #-4]!)
   11f44:	push	{r0}		; (str r0, [sp, #-4]!)
   11f48:	ldr	ip, [pc, #16]	; 11f60 <__assert_fail@plt+0xe74>
   11f4c:	push	{ip}		; (str ip, [sp, #-4]!)
   11f50:	ldr	r0, [pc, #12]	; 11f64 <__assert_fail@plt+0xe78>
   11f54:	ldr	r3, [pc, #12]	; 11f68 <__assert_fail@plt+0xe7c>
   11f58:	bl	10f78 <__libc_start_main@plt>
   11f5c:	bl	110d4 <abort@plt>
   11f60:	andeq	fp, r1, r4, lsr r3
   11f64:	andeq	r1, r1, r4, lsr r1
   11f68:	ldrdeq	fp, [r1], -r4
   11f6c:	ldr	r3, [pc, #20]	; 11f88 <__assert_fail@plt+0xe9c>
   11f70:	ldr	r2, [pc, #20]	; 11f8c <__assert_fail@plt+0xea0>
   11f74:	add	r3, pc, r3
   11f78:	ldr	r2, [r3, r2]
   11f7c:	cmp	r2, #0
   11f80:	bxeq	lr
   11f84:	b	10f9c <__gmon_start__@plt>
   11f88:	andeq	fp, r1, r4, lsl #1
   11f8c:	strdeq	r0, [r0], -r8
   11f90:	ldr	r3, [pc, #28]	; 11fb4 <__assert_fail@plt+0xec8>
   11f94:	ldr	r0, [pc, #28]	; 11fb8 <__assert_fail@plt+0xecc>
   11f98:	sub	r3, r3, r0
   11f9c:	cmp	r3, #6
   11fa0:	bxls	lr
   11fa4:	ldr	r3, [pc, #16]	; 11fbc <__assert_fail@plt+0xed0>
   11fa8:	cmp	r3, #0
   11fac:	bxeq	lr
   11fb0:	bx	r3
   11fb4:	andeq	sp, r2, r3, ror #2
   11fb8:	andeq	sp, r2, r0, ror #2
   11fbc:	andeq	r0, r0, r0
   11fc0:	ldr	r1, [pc, #36]	; 11fec <__assert_fail@plt+0xf00>
   11fc4:	ldr	r0, [pc, #36]	; 11ff0 <__assert_fail@plt+0xf04>
   11fc8:	sub	r1, r1, r0
   11fcc:	asr	r1, r1, #2
   11fd0:	add	r1, r1, r1, lsr #31
   11fd4:	asrs	r1, r1, #1
   11fd8:	bxeq	lr
   11fdc:	ldr	r3, [pc, #16]	; 11ff4 <__assert_fail@plt+0xf08>
   11fe0:	cmp	r3, #0
   11fe4:	bxeq	lr
   11fe8:	bx	r3
   11fec:	andeq	sp, r2, r0, ror #2
   11ff0:	andeq	sp, r2, r0, ror #2
   11ff4:	andeq	r0, r0, r0
   11ff8:	push	{r4, lr}
   11ffc:	ldr	r4, [pc, #24]	; 1201c <__assert_fail@plt+0xf30>
   12000:	ldrb	r3, [r4]
   12004:	cmp	r3, #0
   12008:	popne	{r4, pc}
   1200c:	bl	11f90 <__assert_fail@plt+0xea4>
   12010:	mov	r3, #1
   12014:	strb	r3, [r4]
   12018:	pop	{r4, pc}
   1201c:	andeq	sp, r2, r4, lsl #3
   12020:	ldr	r0, [pc, #40]	; 12050 <__assert_fail@plt+0xf64>
   12024:	ldr	r3, [r0]
   12028:	cmp	r3, #0
   1202c:	bne	12034 <__assert_fail@plt+0xf48>
   12030:	b	11fc0 <__assert_fail@plt+0xed4>
   12034:	ldr	r3, [pc, #24]	; 12054 <__assert_fail@plt+0xf68>
   12038:	cmp	r3, #0
   1203c:	beq	12030 <__assert_fail@plt+0xf44>
   12040:	push	{r4, lr}
   12044:	blx	r3
   12048:	pop	{r4, lr}
   1204c:	b	11fc0 <__assert_fail@plt+0xed4>
   12050:	andeq	ip, r2, r4, lsl pc
   12054:	andeq	r0, r0, r0
   12058:	push	{r4, r5, lr}
   1205c:	sub	sp, sp, #12
   12060:	ldr	r5, [r0]
   12064:	cmp	r5, r1
   12068:	cmnne	r5, #1
   1206c:	bne	1207c <__assert_fail@plt+0xf90>
   12070:	str	r1, [r0]
   12074:	add	sp, sp, #12
   12078:	pop	{r4, r5, pc}
   1207c:	mov	r4, r1
   12080:	mov	r2, #5
   12084:	ldr	r1, [pc, #32]	; 120ac <__assert_fail@plt+0xfc0>
   12088:	mov	r0, #0
   1208c:	bl	10ee8 <dcgettext@plt>
   12090:	add	r1, r4, #1
   12094:	str	r1, [sp]
   12098:	add	r3, r5, #1
   1209c:	mov	r1, #0
   120a0:	mov	r2, r0
   120a4:	mov	r0, #1
   120a8:	bl	10f54 <error@plt>
   120ac:	andeq	fp, r1, r4, lsl r4
   120b0:	push	{r4, lr}
   120b4:	sub	sp, sp, #16
   120b8:	ldr	r2, [pc, #100]	; 12124 <__assert_fail@plt+0x1038>
   120bc:	add	r3, sp, #8
   120c0:	str	r2, [sp]
   120c4:	mov	r1, #0
   120c8:	mov	r2, #10
   120cc:	mov	r4, r0
   120d0:	bl	19ae8 <__assert_fail@plt+0x89fc>
   120d4:	cmp	r0, #1
   120d8:	beq	12110 <__assert_fail@plt+0x1024>
   120dc:	cmp	r0, #0
   120e0:	bne	1211c <__assert_fail@plt+0x1030>
   120e4:	ldrd	r0, [sp, #8]
   120e8:	mov	r3, #0
   120ec:	mvn	r2, #0
   120f0:	cmp	r1, r3
   120f4:	cmpeq	r0, r2
   120f8:	bhi	12110 <__assert_fail@plt+0x1024>
   120fc:	orrs	r3, r0, r1
   12100:	subne	r0, r0, #1
   12104:	beq	1211c <__assert_fail@plt+0x1030>
   12108:	add	sp, sp, #16
   1210c:	pop	{r4, pc}
   12110:	mvn	r0, #1
   12114:	add	sp, sp, #16
   12118:	pop	{r4, pc}
   1211c:	mov	r0, r4
   12120:	bl	110f8 <__assert_fail@plt+0xc>
   12124:	andeq	fp, r1, r0, lsr sl
   12128:	push	{r4, r5, r6, lr}
   1212c:	ldr	ip, [sp, #16]
   12130:	cmp	ip, r0
   12134:	ldr	r0, [sp, #20]
   12138:	bcs	121bc <__assert_fail@plt+0x10d0>
   1213c:	ldr	lr, [r1]
   12140:	cmp	r0, r2
   12144:	add	r2, lr, ip, lsl #3
   12148:	ldr	r5, [r2, #4]
   1214c:	bcs	121e4 <__assert_fail@plt+0x10f8>
   12150:	ldr	r3, [r3]
   12154:	cmp	r5, #0
   12158:	add	r2, r3, r0, lsl #3
   1215c:	ldr	r1, [r3, r0, lsl #3]
   12160:	ldr	r4, [r2, #4]
   12164:	beq	121d0 <__assert_fail@plt+0x10e4>
   12168:	cmp	r4, #0
   1216c:	beq	12228 <__assert_fail@plt+0x113c>
   12170:	ldr	r3, [pc, #184]	; 12230 <__assert_fail@plt+0x1144>
   12174:	ldr	r0, [lr, ip, lsl #3]
   12178:	ldrb	ip, [r3]
   1217c:	cmp	ip, #0
   12180:	bne	121f0 <__assert_fail@plt+0x1104>
   12184:	ldrb	r3, [r3, #1]
   12188:	cmp	r3, #0
   1218c:	bne	1220c <__assert_fail@plt+0x1120>
   12190:	cmp	r5, r4
   12194:	movcc	r2, r5
   12198:	movcs	r2, r4
   1219c:	bl	10ed0 <memcmp@plt>
   121a0:	cmp	r0, #0
   121a4:	popne	{r4, r5, r6, pc}
   121a8:	cmp	r5, r4
   121ac:	bcc	12220 <__assert_fail@plt+0x1134>
   121b0:	movne	r0, #1
   121b4:	moveq	r0, #0
   121b8:	pop	{r4, r5, r6, pc}
   121bc:	cmp	r0, r2
   121c0:	bcs	121dc <__assert_fail@plt+0x10f0>
   121c4:	ldr	r3, [r3]
   121c8:	add	r0, r3, r0, lsl #3
   121cc:	ldr	r4, [r0, #4]
   121d0:	adds	r0, r4, #0
   121d4:	mvnne	r0, #0
   121d8:	pop	{r4, r5, r6, pc}
   121dc:	mov	r0, #0
   121e0:	pop	{r4, r5, r6, pc}
   121e4:	adds	r0, r5, #0
   121e8:	movne	r0, #1
   121ec:	pop	{r4, r5, r6, pc}
   121f0:	cmp	r5, r4
   121f4:	movcc	r2, r5
   121f8:	movcs	r2, r4
   121fc:	bl	140ec <__assert_fail@plt+0x3000>
   12200:	cmp	r0, #0
   12204:	beq	121a8 <__assert_fail@plt+0x10bc>
   12208:	pop	{r4, r5, r6, pc}
   1220c:	mov	r3, r4
   12210:	mov	r2, r1
   12214:	mov	r1, r5
   12218:	pop	{r4, r5, r6, lr}
   1221c:	b	192f4 <__assert_fail@plt+0x8208>
   12220:	mvn	r0, #0
   12224:	pop	{r4, r5, r6, pc}
   12228:	mov	r0, #1
   1222c:	pop	{r4, r5, r6, pc}
   12230:	andeq	sp, r2, r8, lsl #3
   12234:	cmp	r0, r1
   12238:	bcs	12250 <__assert_fail@plt+0x1164>
   1223c:	ldr	r3, [r2]
   12240:	add	r2, r3, r0, lsl #3
   12244:	ldr	r2, [r2, #4]
   12248:	cmp	r2, #0
   1224c:	bne	1226c <__assert_fail@plt+0x1180>
   12250:	ldr	r3, [pc, #40]	; 12280 <__assert_fail@plt+0x1194>
   12254:	ldr	r0, [r3, #4]
   12258:	cmp	r0, #0
   1225c:	bxeq	lr
   12260:	ldr	r3, [pc, #28]	; 12284 <__assert_fail@plt+0x1198>
   12264:	ldr	r1, [r3]
   12268:	b	10e4c <fputs_unlocked@plt>
   1226c:	ldr	r1, [pc, #16]	; 12284 <__assert_fail@plt+0x1198>
   12270:	ldr	r0, [r3, r0, lsl #3]
   12274:	ldr	r3, [r1]
   12278:	mov	r1, #1
   1227c:	b	10ec4 <fwrite_unlocked@plt>
   12280:	andeq	sp, r2, r8, lsl #3
   12284:	andeq	sp, r2, ip, ror r1
   12288:	ldr	r3, [r0]
   1228c:	push	{r4, r5, r6, r7, r8, lr}
   12290:	cmp	r3, #0
   12294:	movne	r5, #0
   12298:	mov	r6, r1
   1229c:	movne	r8, r0
   122a0:	movne	r7, r5
   122a4:	beq	122f0 <__assert_fail@plt+0x1204>
   122a8:	ldr	r3, [r6]
   122ac:	ldr	r4, [r3, r5, lsl #2]
   122b0:	cmp	r4, #0
   122b4:	beq	122d8 <__assert_fail@plt+0x11ec>
   122b8:	ldr	r0, [r4, #20]
   122bc:	bl	13d58 <__assert_fail@plt+0x2c6c>
   122c0:	str	r7, [r4, #20]
   122c4:	ldr	r0, [r4, #8]
   122c8:	bl	13d58 <__assert_fail@plt+0x2c6c>
   122cc:	ldr	r3, [r6]
   122d0:	str	r7, [r4, #8]
   122d4:	ldr	r4, [r3, r5, lsl #2]
   122d8:	mov	r0, r4
   122dc:	bl	13d58 <__assert_fail@plt+0x2c6c>
   122e0:	ldr	r3, [r8]
   122e4:	add	r5, r5, #1
   122e8:	cmp	r5, r3
   122ec:	bcc	122a8 <__assert_fail@plt+0x11bc>
   122f0:	ldr	r0, [r6]
   122f4:	pop	{r4, r5, r6, r7, r8, lr}
   122f8:	b	13d58 <__assert_fail@plt+0x2c6c>
   122fc:	push	{r4, r5, r6, r7, r8, lr}
   12300:	mov	r4, #0
   12304:	ldr	r6, [pc, #60]	; 12348 <__assert_fail@plt+0x125c>
   12308:	mov	r7, r4
   1230c:	ldr	r5, [r6, r4, lsl #2]
   12310:	cmp	r5, #0
   12314:	beq	12338 <__assert_fail@plt+0x124c>
   12318:	ldr	r0, [r5, #20]
   1231c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   12320:	ldr	r0, [r5, #8]
   12324:	str	r7, [r5, #20]
   12328:	bl	13d58 <__assert_fail@plt+0x2c6c>
   1232c:	str	r7, [r5, #8]
   12330:	ldr	r0, [r6, r4, lsl #2]
   12334:	bl	13d58 <__assert_fail@plt+0x2c6c>
   12338:	add	r4, r4, #1
   1233c:	cmp	r4, #2
   12340:	bne	1230c <__assert_fail@plt+0x1220>
   12344:	pop	{r4, r5, r6, r7, r8, pc}
   12348:	muleq	r2, r0, r1
   1234c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12350:	sub	sp, sp, #12
   12354:	ldr	r9, [pc, #416]	; 124fc <__assert_fail@plt+0x1410>
   12358:	str	r1, [sp]
   1235c:	mov	r6, r0
   12360:	ldrb	r3, [r9, #16]
   12364:	cmp	r3, #0
   12368:	ldr	r3, [pc, #400]	; 12500 <__assert_fail@plt+0x1414>
   1236c:	ldreq	sl, [r0, #12]
   12370:	movne	sl, r2
   12374:	ldr	r7, [r3]
   12378:	ldr	r3, [sp]
   1237c:	cmp	r7, #0
   12380:	movlt	r8, #32
   12384:	uxtbge	r8, r7
   12388:	movlt	r7, r8
   1238c:	cmp	sl, r3
   12390:	movcc	fp, sl
   12394:	movcs	fp, r3
   12398:	cmp	fp, #0
   1239c:	beq	12434 <__assert_fail@plt+0x1348>
   123a0:	uxtb	r3, r7
   123a4:	ldr	r5, [pc, #344]	; 12504 <__assert_fail@plt+0x1418>
   123a8:	str	r3, [sp, #4]
   123ac:	mov	r4, #0
   123b0:	b	123e4 <__assert_fail@plt+0x12f8>
   123b4:	ldr	r3, [r6, #20]
   123b8:	add	r2, r3, r4, lsl #3
   123bc:	ldr	r2, [r2, #4]
   123c0:	cmp	r2, #0
   123c4:	beq	12410 <__assert_fail@plt+0x1324>
   123c8:	ldr	r0, [r3, r4, lsl #3]
   123cc:	mov	r1, #1
   123d0:	ldr	r3, [r5]
   123d4:	bl	10ec4 <fwrite_unlocked@plt>
   123d8:	add	r4, r4, #1
   123dc:	cmp	r4, fp
   123e0:	beq	12430 <__assert_fail@plt+0x1344>
   123e4:	ldr	r0, [r5]
   123e8:	ldr	r3, [r0, #20]
   123ec:	ldr	r2, [r0, #24]
   123f0:	cmp	r3, r2
   123f4:	addcc	r2, r3, #1
   123f8:	strcc	r2, [r0, #20]
   123fc:	strbcc	r8, [r3]
   12400:	bcs	124e4 <__assert_fail@plt+0x13f8>
   12404:	ldr	r3, [r6, #12]
   12408:	cmp	r3, r4
   1240c:	bhi	123b4 <__assert_fail@plt+0x12c8>
   12410:	ldr	r0, [r9, #4]
   12414:	cmp	r0, #0
   12418:	beq	123d8 <__assert_fail@plt+0x12ec>
   1241c:	ldr	r1, [r5]
   12420:	add	r4, r4, #1
   12424:	bl	10e4c <fputs_unlocked@plt>
   12428:	cmp	r4, fp
   1242c:	bne	123e4 <__assert_fail@plt+0x12f8>
   12430:	ldr	r3, [sp]
   12434:	add	r4, r3, #1
   12438:	cmp	sl, r4
   1243c:	bls	124dc <__assert_fail@plt+0x13f0>
   12440:	uxtb	r3, r7
   12444:	ldr	r5, [pc, #184]	; 12504 <__assert_fail@plt+0x1418>
   12448:	str	r3, [sp]
   1244c:	lsl	r7, r4, #3
   12450:	mov	fp, #1
   12454:	b	1248c <__assert_fail@plt+0x13a0>
   12458:	ldr	r3, [r6, #20]
   1245c:	add	r2, r3, r7
   12460:	ldr	r2, [r2, #4]
   12464:	cmp	r2, #0
   12468:	beq	124b8 <__assert_fail@plt+0x13cc>
   1246c:	ldr	r0, [r3, r7]
   12470:	mov	r1, fp
   12474:	ldr	r3, [r5]
   12478:	bl	10ec4 <fwrite_unlocked@plt>
   1247c:	add	r4, r4, #1
   12480:	cmp	sl, r4
   12484:	add	r7, r7, #8
   12488:	bls	124dc <__assert_fail@plt+0x13f0>
   1248c:	ldr	r0, [r5]
   12490:	ldr	r3, [r0, #20]
   12494:	ldr	r2, [r0, #24]
   12498:	cmp	r3, r2
   1249c:	addcc	r2, r3, #1
   124a0:	strcc	r2, [r0, #20]
   124a4:	strbcc	r8, [r3]
   124a8:	bcs	124f0 <__assert_fail@plt+0x1404>
   124ac:	ldr	r3, [r6, #12]
   124b0:	cmp	r3, r4
   124b4:	bhi	12458 <__assert_fail@plt+0x136c>
   124b8:	ldr	r0, [r9, #4]
   124bc:	cmp	r0, #0
   124c0:	beq	1247c <__assert_fail@plt+0x1390>
   124c4:	ldr	r1, [r5]
   124c8:	add	r4, r4, #1
   124cc:	bl	10e4c <fputs_unlocked@plt>
   124d0:	cmp	sl, r4
   124d4:	add	r7, r7, #8
   124d8:	bhi	1248c <__assert_fail@plt+0x13a0>
   124dc:	add	sp, sp, #12
   124e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124e4:	ldr	r1, [sp, #4]
   124e8:	bl	11074 <__overflow@plt>
   124ec:	b	12404 <__assert_fail@plt+0x1318>
   124f0:	ldr	r1, [sp]
   124f4:	bl	11074 <__overflow@plt>
   124f8:	b	124ac <__assert_fail@plt+0x13c0>
   124fc:	andeq	sp, r2, r8, lsl #3
   12500:	andeq	sp, r2, r4, lsl #2
   12504:	andeq	sp, r2, ip, ror r1
   12508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1250c:	mov	r6, r0
   12510:	ldr	r9, [pc, #408]	; 126b0 <__assert_fail@plt+0x15c4>
   12514:	ldr	r7, [pc, #408]	; 126b4 <__assert_fail@plt+0x15c8>
   12518:	sub	sp, sp, #12
   1251c:	ldr	r3, [r9]
   12520:	ldr	r4, [r7, #28]
   12524:	cmp	r3, #0
   12528:	movlt	r8, #32
   1252c:	uxtbge	r8, r3
   12530:	movlt	r3, r8
   12534:	cmp	r4, #0
   12538:	mov	sl, r1
   1253c:	beq	12644 <__assert_fail@plt+0x1558>
   12540:	uxtb	r3, r3
   12544:	ldr	r5, [pc, #364]	; 126b8 <__assert_fail@plt+0x15cc>
   12548:	str	r3, [sp, #4]
   1254c:	add	fp, r7, #32
   12550:	b	125c4 <__assert_fail@plt+0x14d8>
   12554:	cmp	r6, fp
   12558:	moveq	r3, sl
   1255c:	movne	r3, r6
   12560:	ldreq	r1, [r9, #4]
   12564:	ldrne	r1, [r9, #8]
   12568:	ldr	r2, [r3, #12]
   1256c:	cmp	r1, r2
   12570:	bcs	125ec <__assert_fail@plt+0x1500>
   12574:	ldr	r3, [r3, #20]
   12578:	add	r2, r3, r1, lsl #3
   1257c:	ldr	r2, [r2, #4]
   12580:	cmp	r2, #0
   12584:	beq	125ec <__assert_fail@plt+0x1500>
   12588:	ldr	r0, [r3, r1, lsl #3]
   1258c:	ldr	r3, [r5]
   12590:	mov	r1, #1
   12594:	bl	10ec4 <fwrite_unlocked@plt>
   12598:	ldr	r4, [r4, #8]
   1259c:	ldr	r0, [r5]
   125a0:	cmp	r4, #0
   125a4:	beq	12610 <__assert_fail@plt+0x1524>
   125a8:	ldr	r3, [r0, #20]
   125ac:	ldr	r2, [r0, #24]
   125b0:	cmp	r3, r2
   125b4:	addcc	r2, r3, #1
   125b8:	strcc	r2, [r0, #20]
   125bc:	strbcc	r8, [r3]
   125c0:	bcs	12638 <__assert_fail@plt+0x154c>
   125c4:	ldr	r3, [r4]
   125c8:	cmp	r3, #0
   125cc:	beq	12554 <__assert_fail@plt+0x1468>
   125d0:	cmp	r3, #1
   125d4:	movne	r3, sl
   125d8:	moveq	r3, r6
   125dc:	ldr	r1, [r4, #4]
   125e0:	ldr	r2, [r3, #12]
   125e4:	cmp	r1, r2
   125e8:	bcc	12574 <__assert_fail@plt+0x1488>
   125ec:	ldr	r0, [r7, #4]
   125f0:	cmp	r0, #0
   125f4:	beq	12598 <__assert_fail@plt+0x14ac>
   125f8:	ldr	r1, [r5]
   125fc:	bl	10e4c <fputs_unlocked@plt>
   12600:	ldr	r4, [r4, #8]
   12604:	ldr	r0, [r5]
   12608:	cmp	r4, #0
   1260c:	bne	125a8 <__assert_fail@plt+0x14bc>
   12610:	ldr	r3, [r0, #20]
   12614:	ldr	r2, [r0, #24]
   12618:	ldrb	r1, [r9, #12]
   1261c:	cmp	r3, r2
   12620:	bcs	126a4 <__assert_fail@plt+0x15b8>
   12624:	add	r2, r3, #1
   12628:	str	r2, [r0, #20]
   1262c:	strb	r1, [r3]
   12630:	add	sp, sp, #12
   12634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12638:	ldr	r1, [sp, #4]
   1263c:	bl	11074 <__overflow@plt>
   12640:	b	125c4 <__assert_fail@plt+0x14d8>
   12644:	add	r3, r7, #32
   12648:	cmp	r0, r3
   1264c:	moveq	r3, r1
   12650:	movne	r3, r6
   12654:	ldreq	r0, [r9, #4]
   12658:	ldrne	r0, [r9, #8]
   1265c:	add	r2, r3, #20
   12660:	ldr	r1, [r3, #12]
   12664:	bl	12234 <__assert_fail@plt+0x1148>
   12668:	mov	r0, r6
   1266c:	ldr	r2, [r7, #56]	; 0x38
   12670:	ldr	r1, [r9, #8]
   12674:	bl	1234c <__assert_fail@plt+0x1260>
   12678:	ldr	r2, [r7, #60]	; 0x3c
   1267c:	mov	r0, sl
   12680:	ldr	r1, [r9, #4]
   12684:	bl	1234c <__assert_fail@plt+0x1260>
   12688:	ldr	r3, [pc, #40]	; 126b8 <__assert_fail@plt+0x15cc>
   1268c:	ldrb	r1, [r9, #12]
   12690:	ldr	r0, [r3]
   12694:	ldr	r3, [r0, #20]
   12698:	ldr	r2, [r0, #24]
   1269c:	cmp	r3, r2
   126a0:	bcc	12624 <__assert_fail@plt+0x1538>
   126a4:	add	sp, sp, #12
   126a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ac:	b	11074 <__overflow@plt>
   126b0:	andeq	sp, r2, r4, lsl #2
   126b4:	andeq	sp, r2, r8, lsl #3
   126b8:	andeq	sp, r2, ip, ror r1
   126bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c0:	mov	r6, r0
   126c4:	ldr	r9, [pc, #376]	; 12844 <__assert_fail@plt+0x1758>
   126c8:	ldr	r7, [pc, #376]	; 12848 <__assert_fail@plt+0x175c>
   126cc:	sub	sp, sp, #12
   126d0:	ldr	r3, [r9]
   126d4:	ldr	r4, [r7, #28]
   126d8:	cmp	r3, #0
   126dc:	movlt	r8, #32
   126e0:	uxtbge	r8, r3
   126e4:	movlt	r3, r8
   126e8:	cmp	r4, #0
   126ec:	beq	127ec <__assert_fail@plt+0x1700>
   126f0:	uxtb	r3, r3
   126f4:	ldr	r5, [pc, #336]	; 1284c <__assert_fail@plt+0x1760>
   126f8:	str	r3, [sp, #4]
   126fc:	add	sl, r7, #32
   12700:	mov	fp, #1
   12704:	b	1276c <__assert_fail@plt+0x1680>
   12708:	mov	r3, r6
   1270c:	ldr	r1, [r9, #4]
   12710:	ldr	r2, [r3, #12]
   12714:	cmp	r2, r1
   12718:	bls	12794 <__assert_fail@plt+0x16a8>
   1271c:	ldr	r3, [r3, #20]
   12720:	add	r2, r3, r1, lsl #3
   12724:	ldr	r2, [r2, #4]
   12728:	cmp	r2, #0
   1272c:	beq	12794 <__assert_fail@plt+0x16a8>
   12730:	ldr	r0, [r3, r1, lsl #3]
   12734:	ldr	r3, [r5]
   12738:	mov	r1, fp
   1273c:	bl	10ec4 <fwrite_unlocked@plt>
   12740:	ldr	r4, [r4, #8]
   12744:	ldr	r0, [r5]
   12748:	cmp	r4, #0
   1274c:	beq	127b8 <__assert_fail@plt+0x16cc>
   12750:	ldr	r3, [r0, #20]
   12754:	ldr	r2, [r0, #24]
   12758:	cmp	r3, r2
   1275c:	addcc	r2, r3, #1
   12760:	strcc	r2, [r0, #20]
   12764:	strbcc	r8, [r3]
   12768:	bcs	127e0 <__assert_fail@plt+0x16f4>
   1276c:	ldr	r3, [r4]
   12770:	cmp	r3, #0
   12774:	beq	12708 <__assert_fail@plt+0x161c>
   12778:	cmp	r3, #1
   1277c:	movne	r3, r6
   12780:	moveq	r3, sl
   12784:	ldr	r1, [r4, #4]
   12788:	ldr	r2, [r3, #12]
   1278c:	cmp	r2, r1
   12790:	bhi	1271c <__assert_fail@plt+0x1630>
   12794:	ldr	r0, [r7, #4]
   12798:	cmp	r0, #0
   1279c:	beq	12740 <__assert_fail@plt+0x1654>
   127a0:	ldr	r1, [r5]
   127a4:	bl	10e4c <fputs_unlocked@plt>
   127a8:	ldr	r4, [r4, #8]
   127ac:	ldr	r0, [r5]
   127b0:	cmp	r4, #0
   127b4:	bne	12750 <__assert_fail@plt+0x1664>
   127b8:	ldr	r3, [r0, #20]
   127bc:	ldr	r2, [r0, #24]
   127c0:	ldrb	r1, [r9, #12]
   127c4:	cmp	r3, r2
   127c8:	bcs	12838 <__assert_fail@plt+0x174c>
   127cc:	add	r2, r3, #1
   127d0:	str	r2, [r0, #20]
   127d4:	strb	r1, [r3]
   127d8:	add	sp, sp, #12
   127dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e0:	ldr	r1, [sp, #4]
   127e4:	bl	11074 <__overflow@plt>
   127e8:	b	1276c <__assert_fail@plt+0x1680>
   127ec:	add	r2, r0, #20
   127f0:	ldr	r1, [r0, #12]
   127f4:	ldr	r0, [r9, #4]
   127f8:	bl	12234 <__assert_fail@plt+0x1148>
   127fc:	ldr	r2, [r7, #56]	; 0x38
   12800:	ldr	r1, [r9, #8]
   12804:	add	r0, r7, #32
   12808:	bl	1234c <__assert_fail@plt+0x1260>
   1280c:	ldr	r2, [r7, #60]	; 0x3c
   12810:	mov	r0, r6
   12814:	ldr	r1, [r9, #4]
   12818:	bl	1234c <__assert_fail@plt+0x1260>
   1281c:	ldr	r3, [pc, #40]	; 1284c <__assert_fail@plt+0x1760>
   12820:	ldrb	r1, [r9, #12]
   12824:	ldr	r0, [r3]
   12828:	ldr	r3, [r0, #20]
   1282c:	ldr	r2, [r0, #24]
   12830:	cmp	r3, r2
   12834:	bcc	127cc <__assert_fail@plt+0x16e0>
   12838:	add	sp, sp, #12
   1283c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12840:	b	11074 <__overflow@plt>
   12844:	andeq	sp, r2, r4, lsl #2
   12848:	andeq	sp, r2, r8, lsl #3
   1284c:	andeq	sp, r2, ip, ror r1
   12850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12854:	sub	sp, sp, #12
   12858:	ldr	r8, [r0, #4]
   1285c:	ldr	r5, [r0, #8]
   12860:	sub	r8, r8, #1
   12864:	add	r9, r5, r8
   12868:	cmp	r5, r9
   1286c:	beq	12974 <__assert_fail@plt+0x1888>
   12870:	ldr	r3, [pc, #620]	; 12ae4 <__assert_fail@plt+0x19f8>
   12874:	mov	r6, r0
   12878:	ldr	sl, [r3]
   1287c:	mvn	r3, sl
   12880:	cmp	sl, #10
   12884:	lsr	r3, r3, #31
   12888:	moveq	r3, #0
   1288c:	cmp	r3, #0
   12890:	beq	12928 <__assert_fail@plt+0x183c>
   12894:	mov	r3, r0
   12898:	ldr	r4, [r0, #12]
   1289c:	ldr	fp, [r3, #16]!
   128a0:	ldr	r7, [r0, #20]
   128a4:	str	r3, [sp, #4]
   128a8:	str	r9, [sp]
   128ac:	mov	r3, r9
   128b0:	b	12904 <__assert_fail@plt+0x1818>
   128b4:	cmp	r4, fp
   128b8:	sub	r9, r8, r5
   128bc:	bcc	128e8 <__assert_fail@plt+0x17fc>
   128c0:	mov	r0, r7
   128c4:	mov	r2, #8
   128c8:	ldr	r1, [sp, #4]
   128cc:	bl	18e1c <__assert_fail@plt+0x7d30>
   128d0:	ldr	r3, [pc, #524]	; 12ae4 <__assert_fail@plt+0x19f8>
   128d4:	ldr	r4, [r6, #12]
   128d8:	ldr	fp, [r6, #16]
   128dc:	ldr	sl, [r3]
   128e0:	mov	r7, r0
   128e4:	str	r0, [r6, #20]
   128e8:	ldr	r3, [sp]
   128ec:	str	r5, [r7, r4, lsl #3]
   128f0:	add	r2, r7, r4, lsl #3
   128f4:	add	r5, r8, #1
   128f8:	add	r4, r4, #1
   128fc:	str	r9, [r2, #4]
   12900:	str	r4, [r6, #12]
   12904:	sub	r9, r3, r5
   12908:	mov	r2, r9
   1290c:	mov	r1, sl
   12910:	mov	r0, r5
   12914:	bl	11038 <memchr@plt>
   12918:	subs	r8, r0, #0
   1291c:	bne	128b4 <__assert_fail@plt+0x17c8>
   12920:	mov	r8, r9
   12924:	b	1293c <__assert_fail@plt+0x1850>
   12928:	cmp	sl, #0
   1292c:	blt	1297c <__assert_fail@plt+0x1890>
   12930:	ldr	r4, [r0, #12]
   12934:	ldr	r7, [r0, #20]
   12938:	ldr	fp, [r0, #16]
   1293c:	cmp	r4, fp
   12940:	bcc	12960 <__assert_fail@plt+0x1874>
   12944:	mov	r0, r7
   12948:	mov	r2, #8
   1294c:	add	r1, r6, #16
   12950:	bl	18e1c <__assert_fail@plt+0x7d30>
   12954:	ldr	r4, [r6, #12]
   12958:	mov	r7, r0
   1295c:	str	r0, [r6, #20]
   12960:	add	r2, r7, r4, lsl #3
   12964:	add	r3, r4, #1
   12968:	str	r5, [r7, r4, lsl #3]
   1296c:	str	r8, [r2, #4]
   12970:	str	r3, [r6, #12]
   12974:	add	sp, sp, #12
   12978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1297c:	bl	10fb4 <__ctype_b_loc@plt>
   12980:	mov	r3, r0
   12984:	str	r0, [sp]
   12988:	ldr	r1, [r3]
   1298c:	mov	r0, r5
   12990:	ldrb	r2, [r0]
   12994:	mov	r5, r0
   12998:	add	r0, r0, #1
   1299c:	lsl	r3, r2, #1
   129a0:	ldrh	r3, [r1, r3]
   129a4:	cmp	r2, #10
   129a8:	orreq	r3, r3, #1
   129ac:	tst	r3, #1
   129b0:	bne	12acc <__assert_fail@plt+0x19e0>
   129b4:	add	r3, r6, #16
   129b8:	ldr	r4, [r6, #12]
   129bc:	ldr	r7, [r6, #20]
   129c0:	mov	fp, #8
   129c4:	mov	sl, r3
   129c8:	add	r8, r5, #1
   129cc:	cmp	r9, r8
   129d0:	beq	12a1c <__assert_fail@plt+0x1930>
   129d4:	ldrb	r2, [r5, #1]
   129d8:	lsl	r3, r2, #1
   129dc:	ldrh	r3, [r1, r3]
   129e0:	cmp	r2, #10
   129e4:	orreq	r3, r3, #1
   129e8:	tst	r3, #1
   129ec:	addeq	r3, r5, #2
   129f0:	bne	12a1c <__assert_fail@plt+0x1930>
   129f4:	cmp	r9, r3
   129f8:	mov	r8, r3
   129fc:	beq	12a1c <__assert_fail@plt+0x1930>
   12a00:	ldrb	r0, [r3], #1
   12a04:	lsl	r2, r0, #1
   12a08:	ldrh	r2, [r1, r2]
   12a0c:	cmp	r0, #10
   12a10:	orreq	r2, r2, #1
   12a14:	tst	r2, #1
   12a18:	beq	129f4 <__assert_fail@plt+0x1908>
   12a1c:	ldr	r2, [r6, #16]
   12a20:	sub	r3, r8, r5
   12a24:	cmp	r2, r4
   12a28:	bhi	12a50 <__assert_fail@plt+0x1964>
   12a2c:	mov	r0, r7
   12a30:	mov	r2, fp
   12a34:	mov	r1, sl
   12a38:	str	r3, [sp, #4]
   12a3c:	bl	18e1c <__assert_fail@plt+0x7d30>
   12a40:	ldr	r4, [r6, #12]
   12a44:	ldr	r3, [sp, #4]
   12a48:	mov	r7, r0
   12a4c:	str	r0, [r6, #20]
   12a50:	add	r2, r7, r4, lsl #3
   12a54:	str	r5, [r7, r4, lsl #3]
   12a58:	cmp	r9, r8
   12a5c:	add	r4, r4, #1
   12a60:	str	r3, [r2, #4]
   12a64:	str	r4, [r6, #12]
   12a68:	beq	12974 <__assert_fail@plt+0x1888>
   12a6c:	add	r5, r8, #1
   12a70:	cmp	r9, r5
   12a74:	beq	12ad8 <__assert_fail@plt+0x19ec>
   12a78:	ldrb	r2, [r8, #1]
   12a7c:	ldr	r3, [sp]
   12a80:	ldr	r1, [r3]
   12a84:	lsl	r3, r2, #1
   12a88:	ldrh	r3, [r1, r3]
   12a8c:	cmp	r2, #10
   12a90:	orreq	r3, r3, #1
   12a94:	tst	r3, #1
   12a98:	beq	129c8 <__assert_fail@plt+0x18dc>
   12a9c:	add	r8, r8, #2
   12aa0:	cmp	r9, r8
   12aa4:	mov	r5, r8
   12aa8:	beq	12ad8 <__assert_fail@plt+0x19ec>
   12aac:	ldrb	r2, [r8], #1
   12ab0:	lsl	r3, r2, #1
   12ab4:	ldrh	r3, [r1, r3]
   12ab8:	cmp	r2, #10
   12abc:	orreq	r3, r3, #1
   12ac0:	tst	r3, #1
   12ac4:	beq	129c8 <__assert_fail@plt+0x18dc>
   12ac8:	b	12aa0 <__assert_fail@plt+0x19b4>
   12acc:	cmp	r9, r0
   12ad0:	bne	12990 <__assert_fail@plt+0x18a4>
   12ad4:	b	12974 <__assert_fail@plt+0x1888>
   12ad8:	mov	r8, #0
   12adc:	ldr	fp, [r6, #16]
   12ae0:	b	1293c <__assert_fail@plt+0x1850>
   12ae4:	andeq	sp, r2, r4, lsl #2
   12ae8:	push	{r4, r5, r6, r7, r8, r9, lr}
   12aec:	mov	r7, r1
   12af0:	ldr	r5, [pc, #452]	; 12cbc <__assert_fail@plt+0x1bd0>
   12af4:	ldr	r4, [r1]
   12af8:	sub	sp, sp, #20
   12afc:	ldr	r3, [r5, #68]	; 0x44
   12b00:	mov	r6, r0
   12b04:	cmp	r4, r3
   12b08:	ldreq	r3, [r5, #12]
   12b0c:	streq	r4, [r5, #12]
   12b10:	moveq	r4, r3
   12b14:	streq	r3, [r1]
   12b18:	cmp	r4, #0
   12b1c:	beq	12c7c <__assert_fail@plt+0x1b90>
   12b20:	mov	r3, #0
   12b24:	str	r3, [r4, #12]
   12b28:	ldr	r7, [pc, #400]	; 12cc0 <__assert_fail@plt+0x1bd4>
   12b2c:	mov	r1, r6
   12b30:	mov	r0, r4
   12b34:	ldrb	r2, [r7, #12]
   12b38:	bl	13fd8 <__assert_fail@plt+0x2eec>
   12b3c:	subs	r8, r0, #0
   12b40:	beq	12c4c <__assert_fail@plt+0x1b60>
   12b44:	ldrd	r2, [r5, #80]	; 0x50
   12b48:	mov	r0, r4
   12b4c:	adds	r2, r2, #1
   12b50:	adc	r3, r3, #0
   12b54:	strd	r2, [r5, #80]	; 0x50
   12b58:	bl	12850 <__assert_fail@plt+0x1764>
   12b5c:	ldr	r1, [r5, #68]	; 0x44
   12b60:	cmp	r1, #0
   12b64:	beq	12c3c <__assert_fail@plt+0x1b50>
   12b68:	ldr	r3, [r5, #88]	; 0x58
   12b6c:	cmp	r3, #2
   12b70:	beq	12c3c <__assert_fail@plt+0x1b50>
   12b74:	cmp	r3, #1
   12b78:	beq	12b88 <__assert_fail@plt+0x1a9c>
   12b7c:	ldrb	r3, [r5, #92]	; 0x5c
   12b80:	cmp	r3, #0
   12b84:	beq	12c3c <__assert_fail@plt+0x1b50>
   12b88:	ldrb	r3, [r5, #97]	; 0x61
   12b8c:	cmp	r3, #0
   12b90:	bne	12c3c <__assert_fail@plt+0x1b50>
   12b94:	ldr	r3, [r7, #4]
   12b98:	ldr	r0, [r1, #12]
   12b9c:	ldr	r2, [r4, #12]
   12ba0:	add	r1, r1, #20
   12ba4:	str	r3, [sp, #4]
   12ba8:	str	r3, [sp]
   12bac:	add	r3, r4, #20
   12bb0:	bl	12128 <__assert_fail@plt+0x103c>
   12bb4:	cmp	r0, #0
   12bb8:	ble	12c3c <__assert_fail@plt+0x1b50>
   12bbc:	ldr	r3, [r4, #4]
   12bc0:	cmp	r3, #0
   12bc4:	moveq	r6, r3
   12bc8:	beq	12bec <__assert_fail@plt+0x1b00>
   12bcc:	ldr	r1, [r4, #8]
   12bd0:	sub	r2, r3, #1
   12bd4:	ldrb	r1, [r1, r2]
   12bd8:	cmp	r1, #10
   12bdc:	moveq	r3, r2
   12be0:	cmp	r3, #0
   12be4:	movge	r6, r3
   12be8:	mvnlt	r6, #-2147483648	; 0x80000000
   12bec:	mov	r2, #5
   12bf0:	ldr	r1, [pc, #204]	; 12cc4 <__assert_fail@plt+0x1bd8>
   12bf4:	mov	r0, #0
   12bf8:	ldr	r7, [r5, #88]	; 0x58
   12bfc:	bl	10ee8 <dcgettext@plt>
   12c00:	ldrd	r8, [r5, #80]	; 0x50
   12c04:	ldr	ip, [r4, #8]
   12c08:	sub	r7, r7, #1
   12c0c:	clz	r7, r7
   12c10:	lsr	r7, r7, #5
   12c14:	ldr	r3, [r5, #104]	; 0x68
   12c18:	mov	r1, #0
   12c1c:	strd	r8, [sp]
   12c20:	str	ip, [sp, #12]
   12c24:	str	r6, [sp, #8]
   12c28:	mov	r2, r0
   12c2c:	mov	r0, r7
   12c30:	bl	10f54 <error@plt>
   12c34:	mov	r3, #1
   12c38:	strb	r3, [r5, #97]	; 0x61
   12c3c:	mov	r0, #1
   12c40:	str	r4, [r5, #68]	; 0x44
   12c44:	add	sp, sp, #20
   12c48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12c4c:	ldr	r0, [r6]
   12c50:	ands	r5, r0, #32
   12c54:	bne	12c94 <__assert_fail@plt+0x1ba8>
   12c58:	ldr	r0, [r4, #20]
   12c5c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   12c60:	ldr	r0, [r4, #8]
   12c64:	str	r5, [r4, #20]
   12c68:	bl	13d58 <__assert_fail@plt+0x2c6c>
   12c6c:	mov	r0, r5
   12c70:	str	r5, [r4, #8]
   12c74:	add	sp, sp, #20
   12c78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12c7c:	mov	r1, #24
   12c80:	mov	r0, #1
   12c84:	bl	191b0 <__assert_fail@plt+0x80c4>
   12c88:	mov	r4, r0
   12c8c:	str	r0, [r7]
   12c90:	b	12b28 <__assert_fail@plt+0x1a3c>
   12c94:	bl	10ff0 <__errno_location@plt>
   12c98:	mov	r2, #5
   12c9c:	ldr	r1, [pc, #36]	; 12cc8 <__assert_fail@plt+0x1bdc>
   12ca0:	ldr	r4, [r0]
   12ca4:	mov	r0, r8
   12ca8:	bl	10ee8 <dcgettext@plt>
   12cac:	mov	r1, r4
   12cb0:	mov	r2, r0
   12cb4:	mov	r0, #1
   12cb8:	bl	10f54 <error@plt>
   12cbc:	andeq	sp, r2, r8, lsl #3
   12cc0:	andeq	sp, r2, r4, lsl #2
   12cc4:	andeq	fp, r1, r0, ror #8
   12cc8:	andeq	fp, r1, r4, asr r4
   12ccc:	push	{r4, r5, r6, r7, r8, r9, lr}
   12cd0:	mov	r7, r1
   12cd4:	ldr	r5, [pc, #452]	; 12ea0 <__assert_fail@plt+0x1db4>
   12cd8:	ldr	r4, [r1]
   12cdc:	sub	sp, sp, #20
   12ce0:	ldr	r3, [r5, #64]	; 0x40
   12ce4:	mov	r6, r0
   12ce8:	cmp	r4, r3
   12cec:	ldreq	r3, [r5, #8]
   12cf0:	streq	r4, [r5, #8]
   12cf4:	moveq	r4, r3
   12cf8:	streq	r3, [r1]
   12cfc:	cmp	r4, #0
   12d00:	beq	12e60 <__assert_fail@plt+0x1d74>
   12d04:	mov	r3, #0
   12d08:	str	r3, [r4, #12]
   12d0c:	ldr	r7, [pc, #400]	; 12ea4 <__assert_fail@plt+0x1db8>
   12d10:	mov	r1, r6
   12d14:	mov	r0, r4
   12d18:	ldrb	r2, [r7, #12]
   12d1c:	bl	13fd8 <__assert_fail@plt+0x2eec>
   12d20:	subs	r8, r0, #0
   12d24:	beq	12e30 <__assert_fail@plt+0x1d44>
   12d28:	ldrd	r2, [r5, #72]	; 0x48
   12d2c:	mov	r0, r4
   12d30:	adds	r2, r2, #1
   12d34:	adc	r3, r3, #0
   12d38:	strd	r2, [r5, #72]	; 0x48
   12d3c:	bl	12850 <__assert_fail@plt+0x1764>
   12d40:	ldr	r1, [r5, #64]	; 0x40
   12d44:	cmp	r1, #0
   12d48:	beq	12e20 <__assert_fail@plt+0x1d34>
   12d4c:	ldr	r3, [r5, #88]	; 0x58
   12d50:	cmp	r3, #2
   12d54:	beq	12e20 <__assert_fail@plt+0x1d34>
   12d58:	cmp	r3, #1
   12d5c:	beq	12d6c <__assert_fail@plt+0x1c80>
   12d60:	ldrb	r3, [r5, #92]	; 0x5c
   12d64:	cmp	r3, #0
   12d68:	beq	12e20 <__assert_fail@plt+0x1d34>
   12d6c:	ldrb	r3, [r5, #96]	; 0x60
   12d70:	cmp	r3, #0
   12d74:	bne	12e20 <__assert_fail@plt+0x1d34>
   12d78:	ldr	r3, [r7, #8]
   12d7c:	ldr	r0, [r1, #12]
   12d80:	ldr	r2, [r4, #12]
   12d84:	add	r1, r1, #20
   12d88:	str	r3, [sp, #4]
   12d8c:	str	r3, [sp]
   12d90:	add	r3, r4, #20
   12d94:	bl	12128 <__assert_fail@plt+0x103c>
   12d98:	cmp	r0, #0
   12d9c:	ble	12e20 <__assert_fail@plt+0x1d34>
   12da0:	ldr	r3, [r4, #4]
   12da4:	cmp	r3, #0
   12da8:	moveq	r6, r3
   12dac:	beq	12dd0 <__assert_fail@plt+0x1ce4>
   12db0:	ldr	r1, [r4, #8]
   12db4:	sub	r2, r3, #1
   12db8:	ldrb	r1, [r1, r2]
   12dbc:	cmp	r1, #10
   12dc0:	moveq	r3, r2
   12dc4:	cmp	r3, #0
   12dc8:	movge	r6, r3
   12dcc:	mvnlt	r6, #-2147483648	; 0x80000000
   12dd0:	mov	r2, #5
   12dd4:	ldr	r1, [pc, #204]	; 12ea8 <__assert_fail@plt+0x1dbc>
   12dd8:	mov	r0, #0
   12ddc:	ldr	r7, [r5, #88]	; 0x58
   12de0:	bl	10ee8 <dcgettext@plt>
   12de4:	ldrd	r8, [r5, #72]	; 0x48
   12de8:	ldr	ip, [r4, #8]
   12dec:	sub	r7, r7, #1
   12df0:	clz	r7, r7
   12df4:	lsr	r7, r7, #5
   12df8:	ldr	r3, [r5, #100]	; 0x64
   12dfc:	mov	r1, #0
   12e00:	strd	r8, [sp]
   12e04:	str	ip, [sp, #12]
   12e08:	str	r6, [sp, #8]
   12e0c:	mov	r2, r0
   12e10:	mov	r0, r7
   12e14:	bl	10f54 <error@plt>
   12e18:	mov	r3, #1
   12e1c:	strb	r3, [r5, #96]	; 0x60
   12e20:	mov	r0, #1
   12e24:	str	r4, [r5, #64]	; 0x40
   12e28:	add	sp, sp, #20
   12e2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e30:	ldr	r0, [r6]
   12e34:	ands	r5, r0, #32
   12e38:	bne	12e78 <__assert_fail@plt+0x1d8c>
   12e3c:	ldr	r0, [r4, #20]
   12e40:	bl	13d58 <__assert_fail@plt+0x2c6c>
   12e44:	ldr	r0, [r4, #8]
   12e48:	str	r5, [r4, #20]
   12e4c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   12e50:	mov	r0, r5
   12e54:	str	r5, [r4, #8]
   12e58:	add	sp, sp, #20
   12e5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e60:	mov	r1, #24
   12e64:	mov	r0, #1
   12e68:	bl	191b0 <__assert_fail@plt+0x80c4>
   12e6c:	mov	r4, r0
   12e70:	str	r0, [r7]
   12e74:	b	12d0c <__assert_fail@plt+0x1c20>
   12e78:	bl	10ff0 <__errno_location@plt>
   12e7c:	mov	r2, #5
   12e80:	ldr	r1, [pc, #36]	; 12eac <__assert_fail@plt+0x1dc0>
   12e84:	ldr	r4, [r0]
   12e88:	mov	r0, r8
   12e8c:	bl	10ee8 <dcgettext@plt>
   12e90:	mov	r1, r4
   12e94:	mov	r2, r0
   12e98:	mov	r0, #1
   12e9c:	bl	10f54 <error@plt>
   12ea0:	andeq	sp, r2, r8, lsl #3
   12ea4:	andeq	sp, r2, r4, lsl #2
   12ea8:	andeq	fp, r1, r0, ror #8
   12eac:	andeq	fp, r1, r4, asr r4
   12eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb4:	mov	r5, r0
   12eb8:	ldr	r9, [pc, #308]	; 12ff4 <__assert_fail@plt+0x1f08>
   12ebc:	ldr	fp, [pc, #308]	; 12ff8 <__assert_fail@plt+0x1f0c>
   12ec0:	ldr	r8, [pc, #308]	; 12ffc <__assert_fail@plt+0x1f10>
   12ec4:	sub	sp, sp, #20
   12ec8:	mov	r7, #0
   12ecc:	mov	sl, #10
   12ed0:	mov	r1, r9
   12ed4:	mov	r0, r5
   12ed8:	bl	110b0 <strpbrk@plt>
   12edc:	cmp	r0, #0
   12ee0:	addne	r6, r0, #1
   12ee4:	strbne	r7, [r0]
   12ee8:	ldrb	r4, [r5]
   12eec:	moveq	r6, r7
   12ef0:	cmp	r4, #48	; 0x30
   12ef4:	beq	12f68 <__assert_fail@plt+0x1e7c>
   12ef8:	bcc	12fa0 <__assert_fail@plt+0x1eb4>
   12efc:	cmp	r4, #50	; 0x32
   12f00:	bhi	12fa0 <__assert_fail@plt+0x1eb4>
   12f04:	ldrb	r3, [r5, #1]
   12f08:	cmp	r3, #46	; 0x2e
   12f0c:	bne	12fe8 <__assert_fail@plt+0x1efc>
   12f10:	add	r5, r5, #2
   12f14:	str	fp, [sp]
   12f18:	mov	r0, r5
   12f1c:	add	r3, sp, #8
   12f20:	mov	r2, sl
   12f24:	mov	r1, r7
   12f28:	bl	19ae8 <__assert_fail@plt+0x89fc>
   12f2c:	sub	r4, r4, #48	; 0x30
   12f30:	cmp	r0, #1
   12f34:	beq	12fd0 <__assert_fail@plt+0x1ee4>
   12f38:	cmp	r0, #0
   12f3c:	bne	12fe0 <__assert_fail@plt+0x1ef4>
   12f40:	ldrd	r2, [sp, #8]
   12f44:	mov	r1, #0
   12f48:	mvn	r0, #0
   12f4c:	cmp	r3, r1
   12f50:	cmpeq	r2, r0
   12f54:	bhi	12fd0 <__assert_fail@plt+0x1ee4>
   12f58:	orrs	r1, r2, r3
   12f5c:	beq	12fe0 <__assert_fail@plt+0x1ef4>
   12f60:	sub	r5, r2, #1
   12f64:	b	12f78 <__assert_fail@plt+0x1e8c>
   12f68:	ldrb	r4, [r5, #1]
   12f6c:	cmp	r4, #0
   12f70:	bne	12fe8 <__assert_fail@plt+0x1efc>
   12f74:	mov	r5, r7
   12f78:	mov	r0, #12
   12f7c:	bl	18c6c <__assert_fail@plt+0x7b80>
   12f80:	ldr	r3, [r8, #16]
   12f84:	cmp	r6, #0
   12f88:	stm	r0, {r4, r5, r7}
   12f8c:	str	r0, [r8, #16]
   12f90:	str	r0, [r3, #8]
   12f94:	beq	12fd8 <__assert_fail@plt+0x1eec>
   12f98:	mov	r5, r6
   12f9c:	b	12ed0 <__assert_fail@plt+0x1de4>
   12fa0:	ldr	r1, [pc, #88]	; 13000 <__assert_fail@plt+0x1f14>
   12fa4:	mov	r2, #5
   12fa8:	mov	r0, #0
   12fac:	bl	10ee8 <dcgettext@plt>
   12fb0:	mov	r4, r0
   12fb4:	mov	r0, r5
   12fb8:	bl	1800c <__assert_fail@plt+0x6f20>
   12fbc:	mov	r2, r4
   12fc0:	mov	r1, #0
   12fc4:	mov	r3, r0
   12fc8:	mov	r0, #1
   12fcc:	bl	10f54 <error@plt>
   12fd0:	mvn	r5, #1
   12fd4:	b	12f78 <__assert_fail@plt+0x1e8c>
   12fd8:	add	sp, sp, #20
   12fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fe0:	mov	r0, r5
   12fe4:	bl	110f8 <__assert_fail@plt+0xc>
   12fe8:	mov	r2, #5
   12fec:	ldr	r1, [pc, #16]	; 13004 <__assert_fail@plt+0x1f18>
   12ff0:	b	12fa8 <__assert_fail@plt+0x1ebc>
   12ff4:	andeq	fp, r1, r0, lsl #9
   12ff8:	andeq	fp, r1, r0, lsr sl
   12ffc:	andeq	sp, r2, r4, lsl #2
   13000:	andeq	fp, r1, r0, lsr #9
   13004:	andeq	fp, r1, r4, lsl #9
   13008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1300c:	mov	r6, r1
   13010:	ldr	r7, [r1]
   13014:	ldr	r3, [r1, #4]
   13018:	sub	sp, sp, #20
   1301c:	cmp	r7, r3
   13020:	mov	r9, r0
   13024:	beq	131c4 <__assert_fail@plt+0x20d8>
   13028:	ldr	r0, [r1, #8]
   1302c:	lsl	r8, r7, #2
   13030:	ldr	r5, [pc, #540]	; 13254 <__assert_fail@plt+0x2168>
   13034:	ldr	r4, [r0, r7, lsl #2]
   13038:	add	r8, r0, r8
   1303c:	ldr	r3, [r5, #64]	; 0x40
   13040:	cmp	r4, r3
   13044:	ldreq	r3, [r5, #8]
   13048:	streq	r4, [r5, #8]
   1304c:	moveq	r4, r3
   13050:	streq	r3, [r0, r7, lsl #2]
   13054:	cmp	r4, #0
   13058:	beq	1320c <__assert_fail@plt+0x2120>
   1305c:	mov	r3, #0
   13060:	str	r3, [r4, #12]
   13064:	ldr	r7, [pc, #492]	; 13258 <__assert_fail@plt+0x216c>
   13068:	mov	r1, r9
   1306c:	mov	r0, r4
   13070:	ldrb	r2, [r7, #12]
   13074:	bl	13fd8 <__assert_fail@plt+0x2eec>
   13078:	subs	r8, r0, #0
   1307c:	beq	13194 <__assert_fail@plt+0x20a8>
   13080:	ldrd	r2, [r5, #72]	; 0x48
   13084:	mov	r0, r4
   13088:	adds	r2, r2, #1
   1308c:	adc	r3, r3, #0
   13090:	strd	r2, [r5, #72]	; 0x48
   13094:	bl	12850 <__assert_fail@plt+0x1764>
   13098:	ldr	r1, [r5, #64]	; 0x40
   1309c:	cmp	r1, #0
   130a0:	beq	13178 <__assert_fail@plt+0x208c>
   130a4:	ldr	r3, [r5, #88]	; 0x58
   130a8:	cmp	r3, #2
   130ac:	beq	13178 <__assert_fail@plt+0x208c>
   130b0:	cmp	r3, #1
   130b4:	beq	130c4 <__assert_fail@plt+0x1fd8>
   130b8:	ldrb	r3, [r5, #92]	; 0x5c
   130bc:	cmp	r3, #0
   130c0:	beq	13178 <__assert_fail@plt+0x208c>
   130c4:	ldrb	r3, [r5, #96]	; 0x60
   130c8:	cmp	r3, #0
   130cc:	bne	13178 <__assert_fail@plt+0x208c>
   130d0:	ldr	r3, [r7, #8]
   130d4:	ldr	r0, [r1, #12]
   130d8:	ldr	r2, [r4, #12]
   130dc:	add	r1, r1, #20
   130e0:	str	r3, [sp, #4]
   130e4:	str	r3, [sp]
   130e8:	add	r3, r4, #20
   130ec:	bl	12128 <__assert_fail@plt+0x103c>
   130f0:	cmp	r0, #0
   130f4:	ble	13178 <__assert_fail@plt+0x208c>
   130f8:	ldr	r3, [r4, #4]
   130fc:	cmp	r3, #0
   13100:	moveq	r7, r3
   13104:	beq	13128 <__assert_fail@plt+0x203c>
   13108:	ldr	r1, [r4, #8]
   1310c:	sub	r2, r3, #1
   13110:	ldrb	r1, [r1, r2]
   13114:	cmp	r1, #10
   13118:	moveq	r3, r2
   1311c:	cmp	r3, #0
   13120:	movge	r7, r3
   13124:	mvnlt	r7, #-2147483648	; 0x80000000
   13128:	mov	r2, #5
   1312c:	ldr	r1, [pc, #296]	; 1325c <__assert_fail@plt+0x2170>
   13130:	mov	r0, #0
   13134:	ldr	r8, [r5, #88]	; 0x58
   13138:	bl	10ee8 <dcgettext@plt>
   1313c:	ldrd	sl, [r5, #72]	; 0x48
   13140:	ldr	ip, [r4, #8]
   13144:	sub	r8, r8, #1
   13148:	clz	r8, r8
   1314c:	lsr	r8, r8, #5
   13150:	ldr	r3, [r5, #100]	; 0x64
   13154:	mov	r1, #0
   13158:	strd	sl, [sp]
   1315c:	str	ip, [sp, #12]
   13160:	str	r7, [sp, #8]
   13164:	mov	r2, r0
   13168:	mov	r0, r8
   1316c:	bl	10f54 <error@plt>
   13170:	mov	r3, #1
   13174:	strb	r3, [r5, #96]	; 0x60
   13178:	ldr	r3, [r6]
   1317c:	mov	r0, #1
   13180:	add	r3, r3, r0
   13184:	str	r4, [r5, #64]	; 0x40
   13188:	str	r3, [r6]
   1318c:	add	sp, sp, #20
   13190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13194:	ldr	r0, [r9]
   13198:	ands	r5, r0, #32
   1319c:	bne	1322c <__assert_fail@plt+0x2140>
   131a0:	ldr	r0, [r4, #20]
   131a4:	bl	13d58 <__assert_fail@plt+0x2c6c>
   131a8:	ldr	r0, [r4, #8]
   131ac:	str	r5, [r4, #20]
   131b0:	bl	13d58 <__assert_fail@plt+0x2c6c>
   131b4:	mov	r0, r5
   131b8:	str	r5, [r4, #8]
   131bc:	add	sp, sp, #20
   131c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c4:	mov	r2, #4
   131c8:	add	r1, r1, r2
   131cc:	ldr	r0, [r6, #8]
   131d0:	bl	18e1c <__assert_fail@plt+0x7d30>
   131d4:	ldr	r7, [r6]
   131d8:	ldr	r2, [r6, #4]
   131dc:	cmp	r7, r2
   131e0:	mov	r4, r0
   131e4:	str	r0, [r6, #8]
   131e8:	bcs	13224 <__assert_fail@plt+0x2138>
   131ec:	sub	r2, r2, r7
   131f0:	lsl	r8, r7, #2
   131f4:	lsl	r2, r2, #2
   131f8:	add	r0, r0, r8
   131fc:	mov	r1, #0
   13200:	bl	11008 <memset@plt>
   13204:	mov	r0, r4
   13208:	b	13030 <__assert_fail@plt+0x1f44>
   1320c:	mov	r1, #24
   13210:	mov	r0, #1
   13214:	bl	191b0 <__assert_fail@plt+0x80c4>
   13218:	mov	r4, r0
   1321c:	str	r0, [r8]
   13220:	b	13064 <__assert_fail@plt+0x1f78>
   13224:	lsl	r8, r7, #2
   13228:	b	13030 <__assert_fail@plt+0x1f44>
   1322c:	bl	10ff0 <__errno_location@plt>
   13230:	mov	r2, #5
   13234:	ldr	r1, [pc, #36]	; 13260 <__assert_fail@plt+0x2174>
   13238:	ldr	r4, [r0]
   1323c:	mov	r0, r8
   13240:	bl	10ee8 <dcgettext@plt>
   13244:	mov	r1, r4
   13248:	mov	r2, r0
   1324c:	mov	r0, #1
   13250:	bl	10f54 <error@plt>
   13254:	andeq	sp, r2, r8, lsl #3
   13258:	andeq	sp, r2, r4, lsl #2
   1325c:	andeq	fp, r1, r0, ror #8
   13260:	andeq	fp, r1, r4, asr r4
   13264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13268:	mov	r6, r1
   1326c:	ldr	r7, [r1]
   13270:	ldr	r3, [r1, #4]
   13274:	sub	sp, sp, #20
   13278:	cmp	r7, r3
   1327c:	mov	r9, r0
   13280:	beq	13420 <__assert_fail@plt+0x2334>
   13284:	ldr	r0, [r1, #8]
   13288:	lsl	r8, r7, #2
   1328c:	ldr	r5, [pc, #540]	; 134b0 <__assert_fail@plt+0x23c4>
   13290:	ldr	r4, [r0, r7, lsl #2]
   13294:	add	r8, r0, r8
   13298:	ldr	r3, [r5, #68]	; 0x44
   1329c:	cmp	r4, r3
   132a0:	ldreq	r3, [r5, #12]
   132a4:	streq	r4, [r5, #12]
   132a8:	moveq	r4, r3
   132ac:	streq	r3, [r0, r7, lsl #2]
   132b0:	cmp	r4, #0
   132b4:	beq	13468 <__assert_fail@plt+0x237c>
   132b8:	mov	r3, #0
   132bc:	str	r3, [r4, #12]
   132c0:	ldr	r7, [pc, #492]	; 134b4 <__assert_fail@plt+0x23c8>
   132c4:	mov	r1, r9
   132c8:	mov	r0, r4
   132cc:	ldrb	r2, [r7, #12]
   132d0:	bl	13fd8 <__assert_fail@plt+0x2eec>
   132d4:	subs	r8, r0, #0
   132d8:	beq	133f0 <__assert_fail@plt+0x2304>
   132dc:	ldrd	r2, [r5, #80]	; 0x50
   132e0:	mov	r0, r4
   132e4:	adds	r2, r2, #1
   132e8:	adc	r3, r3, #0
   132ec:	strd	r2, [r5, #80]	; 0x50
   132f0:	bl	12850 <__assert_fail@plt+0x1764>
   132f4:	ldr	r1, [r5, #68]	; 0x44
   132f8:	cmp	r1, #0
   132fc:	beq	133d4 <__assert_fail@plt+0x22e8>
   13300:	ldr	r3, [r5, #88]	; 0x58
   13304:	cmp	r3, #2
   13308:	beq	133d4 <__assert_fail@plt+0x22e8>
   1330c:	cmp	r3, #1
   13310:	beq	13320 <__assert_fail@plt+0x2234>
   13314:	ldrb	r3, [r5, #92]	; 0x5c
   13318:	cmp	r3, #0
   1331c:	beq	133d4 <__assert_fail@plt+0x22e8>
   13320:	ldrb	r3, [r5, #97]	; 0x61
   13324:	cmp	r3, #0
   13328:	bne	133d4 <__assert_fail@plt+0x22e8>
   1332c:	ldr	r3, [r7, #4]
   13330:	ldr	r0, [r1, #12]
   13334:	ldr	r2, [r4, #12]
   13338:	add	r1, r1, #20
   1333c:	str	r3, [sp, #4]
   13340:	str	r3, [sp]
   13344:	add	r3, r4, #20
   13348:	bl	12128 <__assert_fail@plt+0x103c>
   1334c:	cmp	r0, #0
   13350:	ble	133d4 <__assert_fail@plt+0x22e8>
   13354:	ldr	r3, [r4, #4]
   13358:	cmp	r3, #0
   1335c:	moveq	r7, r3
   13360:	beq	13384 <__assert_fail@plt+0x2298>
   13364:	ldr	r1, [r4, #8]
   13368:	sub	r2, r3, #1
   1336c:	ldrb	r1, [r1, r2]
   13370:	cmp	r1, #10
   13374:	moveq	r3, r2
   13378:	cmp	r3, #0
   1337c:	movge	r7, r3
   13380:	mvnlt	r7, #-2147483648	; 0x80000000
   13384:	mov	r2, #5
   13388:	ldr	r1, [pc, #296]	; 134b8 <__assert_fail@plt+0x23cc>
   1338c:	mov	r0, #0
   13390:	ldr	r8, [r5, #88]	; 0x58
   13394:	bl	10ee8 <dcgettext@plt>
   13398:	ldrd	sl, [r5, #80]	; 0x50
   1339c:	ldr	ip, [r4, #8]
   133a0:	sub	r8, r8, #1
   133a4:	clz	r8, r8
   133a8:	lsr	r8, r8, #5
   133ac:	ldr	r3, [r5, #104]	; 0x68
   133b0:	mov	r1, #0
   133b4:	strd	sl, [sp]
   133b8:	str	ip, [sp, #12]
   133bc:	str	r7, [sp, #8]
   133c0:	mov	r2, r0
   133c4:	mov	r0, r8
   133c8:	bl	10f54 <error@plt>
   133cc:	mov	r3, #1
   133d0:	strb	r3, [r5, #97]	; 0x61
   133d4:	ldr	r3, [r6]
   133d8:	mov	r0, #1
   133dc:	add	r3, r3, r0
   133e0:	str	r4, [r5, #68]	; 0x44
   133e4:	str	r3, [r6]
   133e8:	add	sp, sp, #20
   133ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f0:	ldr	r0, [r9]
   133f4:	ands	r5, r0, #32
   133f8:	bne	13488 <__assert_fail@plt+0x239c>
   133fc:	ldr	r0, [r4, #20]
   13400:	bl	13d58 <__assert_fail@plt+0x2c6c>
   13404:	ldr	r0, [r4, #8]
   13408:	str	r5, [r4, #20]
   1340c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   13410:	mov	r0, r5
   13414:	str	r5, [r4, #8]
   13418:	add	sp, sp, #20
   1341c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13420:	mov	r2, #4
   13424:	add	r1, r1, r2
   13428:	ldr	r0, [r6, #8]
   1342c:	bl	18e1c <__assert_fail@plt+0x7d30>
   13430:	ldr	r7, [r6]
   13434:	ldr	r2, [r6, #4]
   13438:	cmp	r7, r2
   1343c:	mov	r4, r0
   13440:	str	r0, [r6, #8]
   13444:	bcs	13480 <__assert_fail@plt+0x2394>
   13448:	sub	r2, r2, r7
   1344c:	lsl	r8, r7, #2
   13450:	lsl	r2, r2, #2
   13454:	add	r0, r0, r8
   13458:	mov	r1, #0
   1345c:	bl	11008 <memset@plt>
   13460:	mov	r0, r4
   13464:	b	1328c <__assert_fail@plt+0x21a0>
   13468:	mov	r1, #24
   1346c:	mov	r0, #1
   13470:	bl	191b0 <__assert_fail@plt+0x80c4>
   13474:	mov	r4, r0
   13478:	str	r0, [r8]
   1347c:	b	132c0 <__assert_fail@plt+0x21d4>
   13480:	lsl	r8, r7, #2
   13484:	b	1328c <__assert_fail@plt+0x21a0>
   13488:	bl	10ff0 <__errno_location@plt>
   1348c:	mov	r2, #5
   13490:	ldr	r1, [pc, #36]	; 134bc <__assert_fail@plt+0x23d0>
   13494:	ldr	r4, [r0]
   13498:	mov	r0, r8
   1349c:	bl	10ee8 <dcgettext@plt>
   134a0:	mov	r1, r4
   134a4:	mov	r2, r0
   134a8:	mov	r0, #1
   134ac:	bl	10f54 <error@plt>
   134b0:	andeq	sp, r2, r8, lsl #3
   134b4:	andeq	sp, r2, r4, lsl #2
   134b8:	andeq	fp, r1, r0, ror #8
   134bc:	andeq	fp, r1, r4, asr r4
   134c0:	subs	r5, r0, #0
   134c4:	push	{r7, lr}
   134c8:	sub	sp, sp, #56	; 0x38
   134cc:	beq	13508 <__assert_fail@plt+0x241c>
   134d0:	ldr	r3, [pc, #756]	; 137cc <__assert_fail@plt+0x26e0>
   134d4:	mov	r2, #5
   134d8:	ldr	r1, [pc, #752]	; 137d0 <__assert_fail@plt+0x26e4>
   134dc:	mov	r0, #0
   134e0:	ldr	r4, [r3]
   134e4:	bl	10ee8 <dcgettext@plt>
   134e8:	ldr	r3, [pc, #740]	; 137d4 <__assert_fail@plt+0x26e8>
   134ec:	mov	r1, #1
   134f0:	ldr	r3, [r3]
   134f4:	mov	r2, r0
   134f8:	mov	r0, r4
   134fc:	bl	1102c <__fprintf_chk@plt>
   13500:	mov	r0, r5
   13504:	bl	10fc0 <exit@plt>
   13508:	mov	r2, #5
   1350c:	ldr	r1, [pc, #708]	; 137d8 <__assert_fail@plt+0x26ec>
   13510:	bl	10ee8 <dcgettext@plt>
   13514:	ldr	r3, [pc, #696]	; 137d4 <__assert_fail@plt+0x26e8>
   13518:	ldr	r7, [pc, #700]	; 137dc <__assert_fail@plt+0x26f0>
   1351c:	ldr	r4, [pc, #700]	; 137e0 <__assert_fail@plt+0x26f4>
   13520:	ldr	r2, [r3]
   13524:	mov	r1, r0
   13528:	mov	r0, #1
   1352c:	bl	11014 <__printf_chk@plt>
   13530:	mov	r2, #5
   13534:	ldr	r1, [pc, #680]	; 137e4 <__assert_fail@plt+0x26f8>
   13538:	mov	r0, r5
   1353c:	bl	10ee8 <dcgettext@plt>
   13540:	ldr	r1, [r7]
   13544:	bl	10e4c <fputs_unlocked@plt>
   13548:	mov	r2, #5
   1354c:	ldr	r1, [pc, #660]	; 137e8 <__assert_fail@plt+0x26fc>
   13550:	mov	r0, r5
   13554:	bl	10ee8 <dcgettext@plt>
   13558:	ldr	r1, [r7]
   1355c:	bl	10e4c <fputs_unlocked@plt>
   13560:	mov	r2, #5
   13564:	ldr	r1, [pc, #640]	; 137ec <__assert_fail@plt+0x2700>
   13568:	mov	r0, r5
   1356c:	bl	10ee8 <dcgettext@plt>
   13570:	ldr	r1, [r7]
   13574:	bl	10e4c <fputs_unlocked@plt>
   13578:	mov	r2, #5
   1357c:	ldr	r1, [pc, #620]	; 137f0 <__assert_fail@plt+0x2704>
   13580:	mov	r0, r5
   13584:	bl	10ee8 <dcgettext@plt>
   13588:	ldr	r1, [r7]
   1358c:	bl	10e4c <fputs_unlocked@plt>
   13590:	mov	r2, #5
   13594:	ldr	r1, [pc, #600]	; 137f4 <__assert_fail@plt+0x2708>
   13598:	mov	r0, r5
   1359c:	bl	10ee8 <dcgettext@plt>
   135a0:	ldr	r1, [r7]
   135a4:	bl	10e4c <fputs_unlocked@plt>
   135a8:	mov	r2, #5
   135ac:	ldr	r1, [pc, #580]	; 137f8 <__assert_fail@plt+0x270c>
   135b0:	mov	r0, r5
   135b4:	bl	10ee8 <dcgettext@plt>
   135b8:	ldr	r1, [r7]
   135bc:	bl	10e4c <fputs_unlocked@plt>
   135c0:	mov	r2, #5
   135c4:	ldr	r1, [pc, #560]	; 137fc <__assert_fail@plt+0x2710>
   135c8:	mov	r0, r5
   135cc:	bl	10ee8 <dcgettext@plt>
   135d0:	ldr	r1, [r7]
   135d4:	bl	10e4c <fputs_unlocked@plt>
   135d8:	mov	r2, #5
   135dc:	ldr	r1, [pc, #540]	; 13800 <__assert_fail@plt+0x2714>
   135e0:	mov	r0, r5
   135e4:	bl	10ee8 <dcgettext@plt>
   135e8:	ldr	r1, [r7]
   135ec:	bl	10e4c <fputs_unlocked@plt>
   135f0:	mov	r2, #5
   135f4:	ldr	r1, [pc, #520]	; 13804 <__assert_fail@plt+0x2718>
   135f8:	mov	r0, r5
   135fc:	bl	10ee8 <dcgettext@plt>
   13600:	ldr	r1, [r7]
   13604:	bl	10e4c <fputs_unlocked@plt>
   13608:	ldm	r4!, {r0, r1, r2, r3}
   1360c:	mov	lr, sp
   13610:	stmia	lr!, {r0, r1, r2, r3}
   13614:	ldm	r4!, {r0, r1, r2, r3}
   13618:	ldr	ip, [sp]
   1361c:	stmia	lr!, {r0, r1, r2, r3}
   13620:	cmp	ip, #0
   13624:	ldm	r4!, {r0, r1, r2, r3}
   13628:	stmia	lr!, {r0, r1, r2, r3}
   1362c:	ldm	r4, {r0, r1}
   13630:	moveq	r4, sp
   13634:	stm	lr, {r0, r1}
   13638:	beq	13668 <__assert_fail@plt+0x257c>
   1363c:	ldr	r6, [pc, #452]	; 13808 <__assert_fail@plt+0x271c>
   13640:	mov	r4, sp
   13644:	b	13654 <__assert_fail@plt+0x2568>
   13648:	ldr	ip, [r4, #8]!
   1364c:	cmp	ip, #0
   13650:	beq	13668 <__assert_fail@plt+0x257c>
   13654:	mov	r1, ip
   13658:	mov	r0, r6
   1365c:	bl	10e64 <strcmp@plt>
   13660:	cmp	r0, #0
   13664:	bne	13648 <__assert_fail@plt+0x255c>
   13668:	ldr	r4, [r4, #4]
   1366c:	mov	r2, #5
   13670:	cmp	r4, #0
   13674:	ldr	r1, [pc, #400]	; 1380c <__assert_fail@plt+0x2720>
   13678:	beq	13720 <__assert_fail@plt+0x2634>
   1367c:	mov	r0, #0
   13680:	bl	10ee8 <dcgettext@plt>
   13684:	ldr	r3, [pc, #388]	; 13810 <__assert_fail@plt+0x2724>
   13688:	ldr	r2, [pc, #388]	; 13814 <__assert_fail@plt+0x2728>
   1368c:	mov	r1, r0
   13690:	mov	r0, #1
   13694:	bl	11014 <__printf_chk@plt>
   13698:	mov	r1, #0
   1369c:	mov	r0, #5
   136a0:	bl	11080 <setlocale@plt>
   136a4:	cmp	r0, #0
   136a8:	ldreq	r6, [pc, #344]	; 13808 <__assert_fail@plt+0x271c>
   136ac:	beq	136c8 <__assert_fail@plt+0x25dc>
   136b0:	mov	r2, #3
   136b4:	ldr	r1, [pc, #348]	; 13818 <__assert_fail@plt+0x272c>
   136b8:	bl	110c8 <strncmp@plt>
   136bc:	ldr	r6, [pc, #324]	; 13808 <__assert_fail@plt+0x271c>
   136c0:	cmp	r0, #0
   136c4:	bne	137b0 <__assert_fail@plt+0x26c4>
   136c8:	mov	r2, #5
   136cc:	ldr	r1, [pc, #328]	; 1381c <__assert_fail@plt+0x2730>
   136d0:	mov	r0, #0
   136d4:	bl	10ee8 <dcgettext@plt>
   136d8:	ldr	r3, [pc, #296]	; 13808 <__assert_fail@plt+0x271c>
   136dc:	ldr	r2, [pc, #300]	; 13810 <__assert_fail@plt+0x2724>
   136e0:	mov	r1, r0
   136e4:	mov	r0, #1
   136e8:	bl	11014 <__printf_chk@plt>
   136ec:	mov	r2, #5
   136f0:	ldr	r1, [pc, #296]	; 13820 <__assert_fail@plt+0x2734>
   136f4:	mov	r0, #0
   136f8:	bl	10ee8 <dcgettext@plt>
   136fc:	ldr	r2, [pc, #288]	; 13824 <__assert_fail@plt+0x2738>
   13700:	cmp	r4, r6
   13704:	ldr	r3, [pc, #284]	; 13828 <__assert_fail@plt+0x273c>
   13708:	movne	r3, r2
   1370c:	mov	r1, r0
   13710:	mov	r2, r4
   13714:	mov	r0, #1
   13718:	bl	11014 <__printf_chk@plt>
   1371c:	b	13500 <__assert_fail@plt+0x2414>
   13720:	mov	r0, r4
   13724:	bl	10ee8 <dcgettext@plt>
   13728:	ldr	r3, [pc, #224]	; 13810 <__assert_fail@plt+0x2724>
   1372c:	ldr	r2, [pc, #224]	; 13814 <__assert_fail@plt+0x2728>
   13730:	mov	r1, r0
   13734:	mov	r0, #1
   13738:	bl	11014 <__printf_chk@plt>
   1373c:	mov	r1, r4
   13740:	mov	r0, #5
   13744:	bl	11080 <setlocale@plt>
   13748:	cmp	r0, #0
   1374c:	beq	13764 <__assert_fail@plt+0x2678>
   13750:	mov	r2, #3
   13754:	ldr	r1, [pc, #188]	; 13818 <__assert_fail@plt+0x272c>
   13758:	bl	110c8 <strncmp@plt>
   1375c:	cmp	r0, #0
   13760:	bne	137a8 <__assert_fail@plt+0x26bc>
   13764:	mov	r2, #5
   13768:	ldr	r1, [pc, #172]	; 1381c <__assert_fail@plt+0x2730>
   1376c:	mov	r0, #0
   13770:	bl	10ee8 <dcgettext@plt>
   13774:	ldr	r3, [pc, #140]	; 13808 <__assert_fail@plt+0x271c>
   13778:	ldr	r2, [pc, #144]	; 13810 <__assert_fail@plt+0x2724>
   1377c:	mov	r4, r3
   13780:	mov	r1, r0
   13784:	mov	r0, #1
   13788:	bl	11014 <__printf_chk@plt>
   1378c:	ldr	r1, [pc, #140]	; 13820 <__assert_fail@plt+0x2734>
   13790:	mov	r2, #5
   13794:	mov	r0, #0
   13798:	bl	10ee8 <dcgettext@plt>
   1379c:	ldr	r3, [pc, #132]	; 13828 <__assert_fail@plt+0x273c>
   137a0:	mov	r1, r0
   137a4:	b	13710 <__assert_fail@plt+0x2624>
   137a8:	ldr	r6, [pc, #88]	; 13808 <__assert_fail@plt+0x271c>
   137ac:	mov	r4, r6
   137b0:	mov	r2, #5
   137b4:	ldr	r1, [pc, #112]	; 1382c <__assert_fail@plt+0x2740>
   137b8:	mov	r0, #0
   137bc:	bl	10ee8 <dcgettext@plt>
   137c0:	ldr	r1, [r7]
   137c4:	bl	10e4c <fputs_unlocked@plt>
   137c8:	b	136c8 <__assert_fail@plt+0x25dc>
   137cc:	andeq	sp, r2, r0, ror r1
   137d0:	ldrdeq	fp, [r1], -r0
   137d4:	andeq	sp, r2, r0, lsl #4
   137d8:	strdeq	fp, [r1], -r8
   137dc:	andeq	sp, r2, ip, ror r1
   137e0:	andeq	fp, r1, ip, asr r3
   137e4:	andeq	fp, r1, ip, lsl r5
   137e8:			; <UNDEFINED> instruction: 0x0001b5b4
   137ec:	strdeq	fp, [r1], -r0
   137f0:	ldrdeq	fp, [r1], -r0
   137f4:	andeq	fp, r1, r0, ror #15
   137f8:	strdeq	fp, [r1], -r4
   137fc:	andeq	fp, r1, r4, lsr sl
   13800:	andeq	fp, r1, r4, ror #20
   13804:	muleq	r1, ip, sl
   13808:	andeq	fp, r1, r8, asr #9
   1380c:	ldrdeq	fp, [r1], -r0
   13810:	andeq	fp, r1, r8, ror #27
   13814:	andeq	fp, r1, r0, lsl lr
   13818:	andeq	fp, r1, r0, lsr #28
   1381c:	andeq	fp, r1, ip, ror #28
   13820:	andeq	fp, r1, r8, lsl #29
   13824:	andeq	fp, r1, r0, lsr sl
   13828:	andeq	fp, r1, ip, ror #31
   1382c:	andeq	fp, r1, r4, lsr #28
   13830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13834:	sub	sp, sp, #28
   13838:	ldr	r4, [r3]
   1383c:	mov	r6, r3
   13840:	cmp	r4, #2
   13844:	mov	r9, r0
   13848:	mov	r8, r1
   1384c:	ldr	r7, [sp, #64]	; 0x40
   13850:	beq	1388c <__assert_fail@plt+0x27a0>
   13854:	ldr	r5, [pc, #524]	; 13a68 <__assert_fail@plt+0x297c>
   13858:	lsl	r3, r4, #2
   1385c:	add	r4, r4, #1
   13860:	ldr	r2, [r7]
   13864:	add	r5, r5, r3
   13868:	str	r2, [r8, r3]
   1386c:	str	r9, [r5, #100]	; 0x64
   13870:	str	r4, [r6]
   13874:	ldr	r3, [r7]
   13878:	cmp	r3, #3
   1387c:	ldreq	r2, [sp, #68]	; 0x44
   13880:	streq	r3, [r2]
   13884:	add	sp, sp, #28
   13888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1388c:	ldr	sl, [r1]
   13890:	ldr	r5, [pc, #464]	; 13a68 <__assert_fail@plt+0x297c>
   13894:	clz	r3, sl
   13898:	lsr	r3, r3, #5
   1389c:	add	r1, r5, r3, lsl #2
   138a0:	ldr	r3, [r8, r3, lsl #2]
   138a4:	ldr	fp, [r1, #100]	; 0x64
   138a8:	cmp	r3, #3
   138ac:	ldrls	pc, [pc, r3, lsl #2]
   138b0:	b	13914 <__assert_fail@plt+0x2828>
   138b4:	andeq	r3, r1, r4, ror #19
   138b8:	andeq	r3, r1, r4, asr #17
   138bc:	andeq	r3, r1, ip, lsr r9
   138c0:	andeq	r3, r1, r0, lsr r9
   138c4:	ldr	r3, [r2]
   138c8:	ldr	r1, [pc, #412]	; 13a6c <__assert_fail@plt+0x2980>
   138cc:	sub	r3, r3, #1
   138d0:	str	r3, [r2]
   138d4:	mov	r0, fp
   138d8:	str	r1, [sp]
   138dc:	add	r3, sp, #16
   138e0:	mov	r2, #10
   138e4:	mov	r1, #0
   138e8:	bl	19ae8 <__assert_fail@plt+0x89fc>
   138ec:	cmp	r0, #1
   138f0:	bne	13a20 <__assert_fail@plt+0x2934>
   138f4:	mvn	r2, #1
   138f8:	mvn	fp, #0
   138fc:	ldr	r1, [pc, #364]	; 13a70 <__assert_fail@plt+0x2984>
   13900:	ldr	r3, [r1, #8]
   13904:	cmp	r3, r2
   13908:	cmnne	r3, #1
   1390c:	bne	139b4 <__assert_fail@plt+0x28c8>
   13910:	str	r2, [r1, #8]
   13914:	cmp	sl, #0
   13918:	ldrne	r3, [r5, #104]	; 0x68
   1391c:	ldrne	r2, [r8, #4]
   13920:	strne	r2, [r8]
   13924:	strne	r3, [r5, #100]	; 0x64
   13928:	mov	r3, #4
   1392c:	b	13860 <__assert_fail@plt+0x2774>
   13930:	mov	r0, fp
   13934:	bl	12eb0 <__assert_fail@plt+0x1dc4>
   13938:	b	13914 <__assert_fail@plt+0x2828>
   1393c:	ldr	r3, [r2, #4]
   13940:	ldr	r1, [pc, #292]	; 13a6c <__assert_fail@plt+0x2980>
   13944:	sub	r3, r3, #1
   13948:	str	r3, [r2, #4]
   1394c:	mov	r0, fp
   13950:	str	r1, [sp]
   13954:	add	r3, sp, #16
   13958:	mov	r2, #10
   1395c:	mov	r1, #0
   13960:	bl	19ae8 <__assert_fail@plt+0x89fc>
   13964:	cmp	r0, #1
   13968:	beq	13a30 <__assert_fail@plt+0x2944>
   1396c:	cmp	r0, #0
   13970:	bne	13a28 <__assert_fail@plt+0x293c>
   13974:	ldrd	r2, [sp, #16]
   13978:	mov	r1, #0
   1397c:	mvn	r0, #0
   13980:	cmp	r3, r1
   13984:	cmpeq	r2, r0
   13988:	bhi	13a30 <__assert_fail@plt+0x2944>
   1398c:	orrs	r1, r2, r3
   13990:	movne	fp, r2
   13994:	subne	r2, r2, #1
   13998:	beq	13a28 <__assert_fail@plt+0x293c>
   1399c:	ldr	r1, [pc, #204]	; 13a70 <__assert_fail@plt+0x2984>
   139a0:	ldr	r3, [r1, #4]
   139a4:	cmp	r3, r2
   139a8:	cmnne	r3, #1
   139ac:	streq	r2, [r1, #4]
   139b0:	beq	13914 <__assert_fail@plt+0x2828>
   139b4:	mov	r2, #5
   139b8:	ldr	r1, [pc, #180]	; 13a74 <__assert_fail@plt+0x2988>
   139bc:	mov	r0, #0
   139c0:	str	r3, [sp, #12]
   139c4:	bl	10ee8 <dcgettext@plt>
   139c8:	ldr	r3, [sp, #12]
   139cc:	str	fp, [sp]
   139d0:	add	r3, r3, #1
   139d4:	mov	r1, #0
   139d8:	mov	r2, r0
   139dc:	mov	r0, #1
   139e0:	bl	10f54 <error@plt>
   139e4:	mov	r2, #5
   139e8:	ldr	r1, [pc, #136]	; 13a78 <__assert_fail@plt+0x298c>
   139ec:	mov	r0, #0
   139f0:	bl	10ee8 <dcgettext@plt>
   139f4:	mov	r1, r9
   139f8:	mov	r4, r0
   139fc:	mov	r0, #4
   13a00:	bl	1669c <__assert_fail@plt+0x55b0>
   13a04:	mov	r1, #0
   13a08:	mov	r2, r4
   13a0c:	mov	r3, r0
   13a10:	mov	r0, r1
   13a14:	bl	10f54 <error@plt>
   13a18:	mov	r0, #1
   13a1c:	bl	134c0 <__assert_fail@plt+0x23d4>
   13a20:	cmp	r0, #0
   13a24:	beq	13a3c <__assert_fail@plt+0x2950>
   13a28:	mov	r0, fp
   13a2c:	bl	110f8 <__assert_fail@plt+0xc>
   13a30:	mvn	r2, #1
   13a34:	mvn	fp, #0
   13a38:	b	1399c <__assert_fail@plt+0x28b0>
   13a3c:	ldrd	r2, [sp, #16]
   13a40:	mov	r1, #0
   13a44:	mvn	r0, #0
   13a48:	cmp	r3, r1
   13a4c:	cmpeq	r2, r0
   13a50:	bhi	138f4 <__assert_fail@plt+0x2808>
   13a54:	orrs	r1, r2, r3
   13a58:	beq	13a28 <__assert_fail@plt+0x293c>
   13a5c:	mov	fp, r2
   13a60:	sub	r2, r2, #1
   13a64:	b	138fc <__assert_fail@plt+0x2810>
   13a68:	andeq	sp, r2, r8, lsl #3
   13a6c:	andeq	fp, r1, r0, lsr sl
   13a70:	andeq	sp, r2, r4, lsl #2
   13a74:	andeq	fp, r1, r4, lsl r4
   13a78:			; <UNDEFINED> instruction: 0x0001bebc
   13a7c:	ldr	r3, [pc, #4]	; 13a88 <__assert_fail@plt+0x299c>
   13a80:	str	r0, [r3]
   13a84:	bx	lr
   13a88:	strdeq	sp, [r2], -r8
   13a8c:	ldr	r3, [pc, #4]	; 13a98 <__assert_fail@plt+0x29ac>
   13a90:	strb	r0, [r3, #4]
   13a94:	bx	lr
   13a98:	strdeq	sp, [r2], -r8
   13a9c:	ldr	r3, [pc, #192]	; 13b64 <__assert_fail@plt+0x2a78>
   13aa0:	push	{r4, r5, r6, lr}
   13aa4:	sub	sp, sp, #8
   13aa8:	ldr	r0, [r3]
   13aac:	bl	1a984 <__assert_fail@plt+0x9898>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13ad8 <__assert_fail@plt+0x29ec>
   13ab8:	ldr	r4, [pc, #168]	; 13b68 <__assert_fail@plt+0x2a7c>
   13abc:	ldrb	r3, [r4, #4]
   13ac0:	cmp	r3, #0
   13ac4:	beq	13af4 <__assert_fail@plt+0x2a08>
   13ac8:	bl	10ff0 <__errno_location@plt>
   13acc:	ldr	r3, [r0]
   13ad0:	cmp	r3, #32
   13ad4:	bne	13af4 <__assert_fail@plt+0x2a08>
   13ad8:	ldr	r3, [pc, #140]	; 13b6c <__assert_fail@plt+0x2a80>
   13adc:	ldr	r0, [r3]
   13ae0:	bl	1a984 <__assert_fail@plt+0x9898>
   13ae4:	cmp	r0, #0
   13ae8:	bne	13b3c <__assert_fail@plt+0x2a50>
   13aec:	add	sp, sp, #8
   13af0:	pop	{r4, r5, r6, pc}
   13af4:	mov	r2, #5
   13af8:	ldr	r1, [pc, #112]	; 13b70 <__assert_fail@plt+0x2a84>
   13afc:	mov	r0, #0
   13b00:	bl	10ee8 <dcgettext@plt>
   13b04:	ldr	r4, [r4]
   13b08:	cmp	r4, #0
   13b0c:	mov	r5, r0
   13b10:	beq	13b48 <__assert_fail@plt+0x2a5c>
   13b14:	bl	10ff0 <__errno_location@plt>
   13b18:	ldr	r6, [r0]
   13b1c:	mov	r0, r4
   13b20:	bl	16dac <__assert_fail@plt+0x5cc0>
   13b24:	mov	r1, r6
   13b28:	str	r5, [sp]
   13b2c:	ldr	r2, [pc, #64]	; 13b74 <__assert_fail@plt+0x2a88>
   13b30:	mov	r3, r0
   13b34:	mov	r0, #0
   13b38:	bl	10f54 <error@plt>
   13b3c:	ldr	r3, [pc, #52]	; 13b78 <__assert_fail@plt+0x2a8c>
   13b40:	ldr	r0, [r3]
   13b44:	bl	10e94 <_exit@plt>
   13b48:	bl	10ff0 <__errno_location@plt>
   13b4c:	mov	r3, r5
   13b50:	ldr	r2, [pc, #36]	; 13b7c <__assert_fail@plt+0x2a90>
   13b54:	ldr	r1, [r0]
   13b58:	mov	r0, r4
   13b5c:	bl	10f54 <error@plt>
   13b60:	b	13b3c <__assert_fail@plt+0x2a50>
   13b64:	andeq	sp, r2, ip, ror r1
   13b68:	strdeq	sp, [r2], -r8
   13b6c:	andeq	sp, r2, r0, ror r1
   13b70:	strheq	ip, [r1], -r0
   13b74:	strheq	ip, [r1], -ip	; <UNPREDICTABLE>
   13b78:	andeq	sp, r2, ip, lsl r1
   13b7c:	andeq	ip, r1, r0, asr #1
   13b80:	push	{r4, r5}
   13b84:	pop	{r4, r5}
   13b88:	b	10e70 <posix_fadvise64@plt>
   13b8c:	cmp	r0, #0
   13b90:	bxeq	lr
   13b94:	push	{r4, lr}
   13b98:	sub	sp, sp, #16
   13b9c:	mov	r4, r1
   13ba0:	bl	11020 <fileno@plt>
   13ba4:	mov	r2, #0
   13ba8:	mov	r3, #0
   13bac:	str	r4, [sp, #8]
   13bb0:	strd	r2, [sp]
   13bb4:	bl	10e70 <posix_fadvise64@plt>
   13bb8:	add	sp, sp, #16
   13bbc:	pop	{r4, pc}
   13bc0:	push	{r4, r5, lr}
   13bc4:	sub	sp, sp, #12
   13bc8:	mov	r4, r0
   13bcc:	bl	11020 <fileno@plt>
   13bd0:	cmp	r0, #0
   13bd4:	mov	r0, r4
   13bd8:	blt	13c54 <__assert_fail@plt+0x2b68>
   13bdc:	bl	10f84 <__freading@plt>
   13be0:	cmp	r0, #0
   13be4:	bne	13c20 <__assert_fail@plt+0x2b34>
   13be8:	mov	r0, r4
   13bec:	bl	13c60 <__assert_fail@plt+0x2b74>
   13bf0:	cmp	r0, #0
   13bf4:	beq	13c50 <__assert_fail@plt+0x2b64>
   13bf8:	bl	10ff0 <__errno_location@plt>
   13bfc:	mov	r5, r0
   13c00:	mov	r0, r4
   13c04:	ldr	r4, [r5]
   13c08:	bl	11044 <fclose@plt>
   13c0c:	cmp	r4, #0
   13c10:	mvnne	r0, #0
   13c14:	strne	r4, [r5]
   13c18:	add	sp, sp, #12
   13c1c:	pop	{r4, r5, pc}
   13c20:	mov	r0, r4
   13c24:	bl	11020 <fileno@plt>
   13c28:	mov	r3, #1
   13c2c:	str	r3, [sp]
   13c30:	mov	r2, #0
   13c34:	mov	r3, #0
   13c38:	bl	10f24 <lseek64@plt>
   13c3c:	mvn	r3, #0
   13c40:	mvn	r2, #0
   13c44:	cmp	r1, r3
   13c48:	cmpeq	r0, r2
   13c4c:	bne	13be8 <__assert_fail@plt+0x2afc>
   13c50:	mov	r0, r4
   13c54:	add	sp, sp, #12
   13c58:	pop	{r4, r5, lr}
   13c5c:	b	11044 <fclose@plt>
   13c60:	push	{r4, lr}
   13c64:	subs	r4, r0, #0
   13c68:	sub	sp, sp, #8
   13c6c:	beq	13c88 <__assert_fail@plt+0x2b9c>
   13c70:	bl	10f84 <__freading@plt>
   13c74:	cmp	r0, #0
   13c78:	beq	13c88 <__assert_fail@plt+0x2b9c>
   13c7c:	ldr	r3, [r4]
   13c80:	tst	r3, #256	; 0x100
   13c84:	bne	13c98 <__assert_fail@plt+0x2bac>
   13c88:	mov	r0, r4
   13c8c:	add	sp, sp, #8
   13c90:	pop	{r4, lr}
   13c94:	b	10e7c <fflush@plt>
   13c98:	mov	r3, #1
   13c9c:	str	r3, [sp]
   13ca0:	mov	r2, #0
   13ca4:	mov	r3, #0
   13ca8:	mov	r0, r4
   13cac:	bl	13db0 <__assert_fail@plt+0x2cc4>
   13cb0:	mov	r0, r4
   13cb4:	add	sp, sp, #8
   13cb8:	pop	{r4, lr}
   13cbc:	b	10e7c <fflush@plt>
   13cc0:	push	{r4, r5, r6, lr}
   13cc4:	mov	r5, r1
   13cc8:	bl	110a4 <fopen64@plt>
   13ccc:	subs	r4, r0, #0
   13cd0:	beq	13ce0 <__assert_fail@plt+0x2bf4>
   13cd4:	bl	11020 <fileno@plt>
   13cd8:	cmp	r0, #2
   13cdc:	bls	13ce8 <__assert_fail@plt+0x2bfc>
   13ce0:	mov	r0, r4
   13ce4:	pop	{r4, r5, r6, pc}
   13ce8:	bl	18224 <__assert_fail@plt+0x7138>
   13cec:	subs	r6, r0, #0
   13cf0:	blt	13d38 <__assert_fail@plt+0x2c4c>
   13cf4:	mov	r0, r4
   13cf8:	bl	13bc0 <__assert_fail@plt+0x2ad4>
   13cfc:	cmp	r0, #0
   13d00:	bne	13d18 <__assert_fail@plt+0x2c2c>
   13d04:	mov	r1, r5
   13d08:	mov	r0, r6
   13d0c:	bl	10e34 <fdopen@plt>
   13d10:	subs	r4, r0, #0
   13d14:	bne	13ce0 <__assert_fail@plt+0x2bf4>
   13d18:	bl	10ff0 <__errno_location@plt>
   13d1c:	mov	r4, #0
   13d20:	mov	r5, r0
   13d24:	mov	r0, r6
   13d28:	ldr	r6, [r5]
   13d2c:	bl	110e0 <close@plt>
   13d30:	str	r6, [r5]
   13d34:	b	13ce0 <__assert_fail@plt+0x2bf4>
   13d38:	bl	10ff0 <__errno_location@plt>
   13d3c:	mov	r5, r0
   13d40:	mov	r0, r4
   13d44:	ldr	r6, [r5]
   13d48:	mov	r4, #0
   13d4c:	bl	13bc0 <__assert_fail@plt+0x2ad4>
   13d50:	str	r6, [r5]
   13d54:	b	13ce0 <__assert_fail@plt+0x2bf4>
   13d58:	push	{r4, r5, lr}
   13d5c:	sub	sp, sp, #12
   13d60:	mov	r5, r0
   13d64:	bl	10ff0 <__errno_location@plt>
   13d68:	mov	r2, #0
   13d6c:	mov	r4, r0
   13d70:	ldr	r3, [r0]
   13d74:	str	r2, [r4]
   13d78:	mov	r0, r5
   13d7c:	str	r3, [sp]
   13d80:	str	r3, [sp, #4]
   13d84:	bl	10e88 <free@plt>
   13d88:	ldr	r3, [r4]
   13d8c:	add	r2, sp, #8
   13d90:	cmp	r3, #0
   13d94:	moveq	r3, #4
   13d98:	movne	r3, #0
   13d9c:	add	r3, r2, r3
   13da0:	ldr	r3, [r3, #-8]
   13da4:	str	r3, [r4]
   13da8:	add	sp, sp, #12
   13dac:	pop	{r4, r5, pc}
   13db0:	push	{r4, r5, r6, r7, r8, lr}
   13db4:	sub	sp, sp, #8
   13db8:	ldmib	r0, {ip, lr}
   13dbc:	mov	r4, r0
   13dc0:	ldr	r5, [sp, #32]
   13dc4:	cmp	lr, ip
   13dc8:	beq	13de0 <__assert_fail@plt+0x2cf4>
   13dcc:	str	r5, [sp, #32]
   13dd0:	mov	r0, r4
   13dd4:	add	sp, sp, #8
   13dd8:	pop	{r4, r5, r6, r7, r8, lr}
   13ddc:	b	11050 <fseeko64@plt>
   13de0:	ldr	lr, [r0, #20]
   13de4:	ldr	ip, [r0, #16]
   13de8:	cmp	lr, ip
   13dec:	bne	13dcc <__assert_fail@plt+0x2ce0>
   13df0:	ldr	r8, [r0, #36]	; 0x24
   13df4:	cmp	r8, #0
   13df8:	bne	13dcc <__assert_fail@plt+0x2ce0>
   13dfc:	mov	r6, r2
   13e00:	mov	r7, r3
   13e04:	bl	11020 <fileno@plt>
   13e08:	mov	r2, r6
   13e0c:	mov	r3, r7
   13e10:	str	r5, [sp]
   13e14:	bl	10f24 <lseek64@plt>
   13e18:	mvn	r3, #0
   13e1c:	mvn	r2, #0
   13e20:	cmp	r1, r3
   13e24:	cmpeq	r0, r2
   13e28:	beq	13e48 <__assert_fail@plt+0x2d5c>
   13e2c:	ldr	r3, [r4]
   13e30:	strd	r0, [r4, #80]	; 0x50
   13e34:	mov	r0, r8
   13e38:	bic	r3, r3, #16
   13e3c:	str	r3, [r4]
   13e40:	add	sp, sp, #8
   13e44:	pop	{r4, r5, r6, r7, r8, pc}
   13e48:	mvn	r0, #0
   13e4c:	b	13e40 <__assert_fail@plt+0x2d54>
   13e50:	push	{lr}		; (str lr, [sp, #-4]!)
   13e54:	sub	sp, sp, #268	; 0x10c
   13e58:	add	r1, sp, #4
   13e5c:	ldr	r2, [pc, #60]	; 13ea0 <__assert_fail@plt+0x2db4>
   13e60:	bl	1818c <__assert_fail@plt+0x70a0>
   13e64:	cmp	r0, #0
   13e68:	movne	r0, #0
   13e6c:	bne	13e98 <__assert_fail@plt+0x2dac>
   13e70:	ldr	r1, [pc, #44]	; 13ea4 <__assert_fail@plt+0x2db8>
   13e74:	add	r0, sp, #4
   13e78:	bl	10e64 <strcmp@plt>
   13e7c:	cmp	r0, #0
   13e80:	beq	13e98 <__assert_fail@plt+0x2dac>
   13e84:	add	r0, sp, #4
   13e88:	ldr	r1, [pc, #24]	; 13ea8 <__assert_fail@plt+0x2dbc>
   13e8c:	bl	10e64 <strcmp@plt>
   13e90:	adds	r0, r0, #0
   13e94:	movne	r0, #1
   13e98:	add	sp, sp, #268	; 0x10c
   13e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea0:	andeq	r0, r0, r1, lsl #2
   13ea4:	andeq	ip, r1, r4, asr #1
   13ea8:	andeq	ip, r1, r8, asr #1
   13eac:	mov	r3, #0
   13eb0:	str	r3, [r0]
   13eb4:	str	r3, [r0, #4]
   13eb8:	str	r3, [r0, #8]
   13ebc:	bx	lr
   13ec0:	ldr	r3, [r1]
   13ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ec8:	mov	r5, r1
   13ecc:	ldr	sl, [r0, #8]
   13ed0:	ldr	r1, [r0]
   13ed4:	tst	r3, #16
   13ed8:	sub	sp, sp, #12
   13edc:	add	fp, sl, r1
   13ee0:	moveq	r8, r0
   13ee4:	moveq	r4, sl
   13ee8:	moveq	r9, #10
   13eec:	beq	13f1c <__assert_fail@plt+0x2e30>
   13ef0:	b	13fcc <__assert_fail@plt+0x2ee0>
   13ef4:	add	r0, r3, #1
   13ef8:	str	r0, [r5, #4]
   13efc:	ldrb	r6, [r3]
   13f00:	mov	r7, r6
   13f04:	cmp	r4, fp
   13f08:	beq	13f74 <__assert_fail@plt+0x2e88>
   13f0c:	cmp	r6, #10
   13f10:	strb	r7, [r4]
   13f14:	add	r4, r4, #1
   13f18:	beq	13fb8 <__assert_fail@plt+0x2ecc>
   13f1c:	ldr	r3, [r5, #4]
   13f20:	ldr	r0, [r5, #8]
   13f24:	cmp	r3, r0
   13f28:	bcc	13ef4 <__assert_fail@plt+0x2e08>
   13f2c:	mov	r0, r5
   13f30:	bl	11068 <__uflow@plt>
   13f34:	cmn	r0, #1
   13f38:	mov	r6, r0
   13f3c:	uxtbne	r7, r0
   13f40:	bne	13f04 <__assert_fail@plt+0x2e18>
   13f44:	cmp	sl, r4
   13f48:	beq	13fcc <__assert_fail@plt+0x2ee0>
   13f4c:	ldr	r3, [r5]
   13f50:	tst	r3, #32
   13f54:	bne	13fcc <__assert_fail@plt+0x2ee0>
   13f58:	ldrb	r3, [r4, #-1]
   13f5c:	cmp	r3, #10
   13f60:	beq	13fb8 <__assert_fail@plt+0x2ecc>
   13f64:	cmp	r4, fp
   13f68:	mov	r7, r9
   13f6c:	mov	r6, #10
   13f70:	bne	13f0c <__assert_fail@plt+0x2e20>
   13f74:	mov	r3, #1
   13f78:	str	r3, [sp]
   13f7c:	mov	r0, sl
   13f80:	mov	r1, r8
   13f84:	mvn	r3, #0
   13f88:	mov	r2, #1
   13f8c:	ldr	r4, [r8]
   13f90:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   13f94:	ldr	r1, [r8]
   13f98:	cmp	r6, #10
   13f9c:	add	r4, r0, r4
   13fa0:	str	r0, [r8, #8]
   13fa4:	mov	sl, r0
   13fa8:	strb	r7, [r4]
   13fac:	add	fp, r0, r1
   13fb0:	add	r4, r4, #1
   13fb4:	bne	13f1c <__assert_fail@plt+0x2e30>
   13fb8:	sub	r4, r4, sl
   13fbc:	mov	r0, r8
   13fc0:	str	r4, [r8, #4]
   13fc4:	add	sp, sp, #12
   13fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fcc:	mov	r0, #0
   13fd0:	add	sp, sp, #12
   13fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd8:	ldr	ip, [r1]
   13fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe0:	tst	ip, #16
   13fe4:	ldr	fp, [r0, #8]
   13fe8:	ldr	r3, [r0]
   13fec:	sub	sp, sp, #12
   13ff0:	add	r8, fp, r3
   13ff4:	bne	140d8 <__assert_fail@plt+0x2fec>
   13ff8:	mov	r6, r2
   13ffc:	mov	r7, r0
   14000:	mov	r5, r1
   14004:	mov	r4, fp
   14008:	mov	r9, #1
   1400c:	b	14034 <__assert_fail@plt+0x2f48>
   14010:	add	r1, r3, #1
   14014:	str	r1, [r5, #4]
   14018:	ldrb	sl, [r3]
   1401c:	cmp	r4, r8
   14020:	beq	14084 <__assert_fail@plt+0x2f98>
   14024:	cmp	sl, r6
   14028:	strb	sl, [r4]
   1402c:	add	r4, r4, #1
   14030:	beq	140c4 <__assert_fail@plt+0x2fd8>
   14034:	ldr	r3, [r5, #4]
   14038:	ldr	r1, [r5, #8]
   1403c:	cmp	r3, r1
   14040:	bcc	14010 <__assert_fail@plt+0x2f24>
   14044:	mov	r0, r5
   14048:	bl	11068 <__uflow@plt>
   1404c:	cmn	r0, #1
   14050:	mov	sl, r0
   14054:	bne	1401c <__assert_fail@plt+0x2f30>
   14058:	cmp	fp, r4
   1405c:	beq	140d8 <__assert_fail@plt+0x2fec>
   14060:	ldr	r3, [r5]
   14064:	tst	r3, #32
   14068:	bne	140d8 <__assert_fail@plt+0x2fec>
   1406c:	ldrb	r3, [r4, #-1]
   14070:	cmp	r3, r6
   14074:	beq	140c4 <__assert_fail@plt+0x2fd8>
   14078:	cmp	r4, r8
   1407c:	mov	sl, r6
   14080:	bne	14024 <__assert_fail@plt+0x2f38>
   14084:	str	r9, [sp]
   14088:	mov	r0, fp
   1408c:	mov	r2, #1
   14090:	mvn	r3, #0
   14094:	mov	r1, r7
   14098:	ldr	r4, [r7]
   1409c:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   140a0:	ldr	r2, [r7]
   140a4:	cmp	sl, r6
   140a8:	add	r4, r0, r4
   140ac:	str	r0, [r7, #8]
   140b0:	mov	fp, r0
   140b4:	strb	sl, [r4]
   140b8:	add	r8, r0, r2
   140bc:	add	r4, r4, #1
   140c0:	bne	14034 <__assert_fail@plt+0x2f48>
   140c4:	sub	r4, r4, fp
   140c8:	mov	r0, r7
   140cc:	str	r4, [r7, #4]
   140d0:	add	sp, sp, #12
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	mov	r0, #0
   140dc:	add	sp, sp, #12
   140e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e4:	ldr	r0, [r0, #8]
   140e8:	b	13d58 <__assert_fail@plt+0x2c6c>
   140ec:	push	{r4, r5, r6, lr}
   140f0:	subs	r6, r2, #0
   140f4:	beq	14138 <__assert_fail@plt+0x304c>
   140f8:	mov	r4, r0
   140fc:	mov	r5, r1
   14100:	bl	10f90 <__ctype_toupper_loc@plt>
   14104:	mov	r3, r4
   14108:	sub	r1, r5, #1
   1410c:	add	r4, r4, r6
   14110:	ldr	ip, [r0]
   14114:	ldrb	lr, [r3], #1
   14118:	ldrb	r2, [r1, #1]!
   1411c:	ldr	r0, [ip, lr, lsl #2]
   14120:	ldr	r2, [ip, r2, lsl #2]
   14124:	subs	r0, r0, r2
   14128:	popne	{r4, r5, r6, pc}
   1412c:	cmp	r4, r3
   14130:	bne	14114 <__assert_fail@plt+0x3028>
   14134:	pop	{r4, r5, r6, pc}
   14138:	mov	r0, r6
   1413c:	pop	{r4, r5, r6, pc}
   14140:	push	{r4, r5, r6, lr}
   14144:	subs	r4, r0, #0
   14148:	beq	141bc <__assert_fail@plt+0x30d0>
   1414c:	mov	r1, #47	; 0x2f
   14150:	bl	1108c <strrchr@plt>
   14154:	subs	r5, r0, #0
   14158:	beq	141a8 <__assert_fail@plt+0x30bc>
   1415c:	add	r6, r5, #1
   14160:	sub	r3, r6, r4
   14164:	cmp	r3, #6
   14168:	ble	141a8 <__assert_fail@plt+0x30bc>
   1416c:	mov	r2, #7
   14170:	ldr	r1, [pc, #96]	; 141d8 <__assert_fail@plt+0x30ec>
   14174:	sub	r0, r5, #6
   14178:	bl	110c8 <strncmp@plt>
   1417c:	cmp	r0, #0
   14180:	bne	141a8 <__assert_fail@plt+0x30bc>
   14184:	mov	r2, #3
   14188:	ldr	r1, [pc, #76]	; 141dc <__assert_fail@plt+0x30f0>
   1418c:	mov	r0, r6
   14190:	bl	110c8 <strncmp@plt>
   14194:	cmp	r0, #0
   14198:	movne	r4, r6
   1419c:	ldreq	r3, [pc, #60]	; 141e0 <__assert_fail@plt+0x30f4>
   141a0:	addeq	r4, r5, #4
   141a4:	streq	r4, [r3]
   141a8:	ldr	r2, [pc, #52]	; 141e4 <__assert_fail@plt+0x30f8>
   141ac:	ldr	r3, [pc, #52]	; 141e8 <__assert_fail@plt+0x30fc>
   141b0:	str	r4, [r2]
   141b4:	str	r4, [r3]
   141b8:	pop	{r4, r5, r6, pc}
   141bc:	ldr	r3, [pc, #40]	; 141ec <__assert_fail@plt+0x3100>
   141c0:	mov	r2, #55	; 0x37
   141c4:	mov	r1, #1
   141c8:	ldr	r3, [r3]
   141cc:	ldr	r0, [pc, #28]	; 141f0 <__assert_fail@plt+0x3104>
   141d0:	bl	10f18 <fwrite@plt>
   141d4:	bl	110d4 <abort@plt>
   141d8:	andeq	ip, r1, r8, lsl #2
   141dc:	andeq	ip, r1, r0, lsl r1
   141e0:	andeq	sp, r2, r0, ror #2
   141e4:	andeq	sp, r2, r0, lsl #4
   141e8:	andeq	sp, r2, r4, ror #2
   141ec:	andeq	sp, r2, r0, ror r1
   141f0:	ldrdeq	ip, [r1], -r0
   141f4:	push	{r4, r5, r6, lr}
   141f8:	mov	r4, r0
   141fc:	mov	r5, r1
   14200:	bl	1abd4 <__assert_fail@plt+0x9ae8>
   14204:	ldrb	r3, [r0]
   14208:	bic	r3, r3, #32
   1420c:	cmp	r3, #85	; 0x55
   14210:	bne	14270 <__assert_fail@plt+0x3184>
   14214:	ldrb	r3, [r0, #1]
   14218:	bic	r3, r3, #32
   1421c:	cmp	r3, #84	; 0x54
   14220:	bne	142ac <__assert_fail@plt+0x31c0>
   14224:	ldrb	r3, [r0, #2]
   14228:	bic	r3, r3, #32
   1422c:	cmp	r3, #70	; 0x46
   14230:	bne	142ac <__assert_fail@plt+0x31c0>
   14234:	ldrb	r3, [r0, #3]
   14238:	cmp	r3, #45	; 0x2d
   1423c:	bne	142ac <__assert_fail@plt+0x31c0>
   14240:	ldrb	r3, [r0, #4]
   14244:	cmp	r3, #56	; 0x38
   14248:	bne	142ac <__assert_fail@plt+0x31c0>
   1424c:	ldrb	r3, [r0, #5]
   14250:	cmp	r3, #0
   14254:	bne	142ac <__assert_fail@plt+0x31c0>
   14258:	ldrb	r2, [r4]
   1425c:	ldr	r3, [pc, #152]	; 142fc <__assert_fail@plt+0x3210>
   14260:	ldr	r0, [pc, #152]	; 14300 <__assert_fail@plt+0x3214>
   14264:	cmp	r2, #96	; 0x60
   14268:	movne	r0, r3
   1426c:	pop	{r4, r5, r6, pc}
   14270:	cmp	r3, #71	; 0x47
   14274:	bne	142ac <__assert_fail@plt+0x31c0>
   14278:	ldrb	r3, [r0, #1]
   1427c:	bic	r3, r3, #32
   14280:	cmp	r3, #66	; 0x42
   14284:	bne	142ac <__assert_fail@plt+0x31c0>
   14288:	ldrb	r3, [r0, #2]
   1428c:	cmp	r3, #49	; 0x31
   14290:	bne	142ac <__assert_fail@plt+0x31c0>
   14294:	ldrb	r3, [r0, #3]
   14298:	cmp	r3, #56	; 0x38
   1429c:	bne	142ac <__assert_fail@plt+0x31c0>
   142a0:	ldrb	r3, [r0, #4]
   142a4:	cmp	r3, #48	; 0x30
   142a8:	beq	142c0 <__assert_fail@plt+0x31d4>
   142ac:	ldr	r3, [pc, #80]	; 14304 <__assert_fail@plt+0x3218>
   142b0:	cmp	r5, #9
   142b4:	ldr	r0, [pc, #76]	; 14308 <__assert_fail@plt+0x321c>
   142b8:	movne	r0, r3
   142bc:	pop	{r4, r5, r6, pc}
   142c0:	ldrb	r3, [r0, #5]
   142c4:	cmp	r3, #51	; 0x33
   142c8:	bne	142ac <__assert_fail@plt+0x31c0>
   142cc:	ldrb	r3, [r0, #6]
   142d0:	cmp	r3, #48	; 0x30
   142d4:	bne	142ac <__assert_fail@plt+0x31c0>
   142d8:	ldrb	r3, [r0, #7]
   142dc:	cmp	r3, #0
   142e0:	bne	142ac <__assert_fail@plt+0x31c0>
   142e4:	ldrb	r2, [r4]
   142e8:	ldr	r3, [pc, #28]	; 1430c <__assert_fail@plt+0x3220>
   142ec:	ldr	r0, [pc, #28]	; 14310 <__assert_fail@plt+0x3224>
   142f0:	cmp	r2, #96	; 0x60
   142f4:	movne	r0, r3
   142f8:	pop	{r4, r5, r6, pc}
   142fc:	andeq	ip, r1, ip, ror #2
   14300:	andeq	ip, r1, r8, ror #2
   14304:	andeq	ip, r1, ip, ror r1
   14308:	andeq	ip, r1, r8, ror r1
   1430c:	andeq	ip, r1, r4, ror r1
   14310:	andeq	ip, r1, r0, ror r1
   14314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14318:	sub	sp, sp, #140	; 0x8c
   1431c:	mov	r9, r1
   14320:	str	r3, [sp, #24]
   14324:	mov	r3, #1
   14328:	mov	sl, r0
   1432c:	str	r2, [sp, #44]	; 0x2c
   14330:	str	r3, [sp, #28]
   14334:	bl	10f30 <__ctype_get_mb_cur_max@plt>
   14338:	ldr	r3, [sp, #180]	; 0xb4
   1433c:	mov	fp, r9
   14340:	mov	r9, sl
   14344:	lsr	r3, r3, #1
   14348:	and	r3, r3, #1
   1434c:	str	r3, [sp, #40]	; 0x28
   14350:	ldr	r3, [sp, #180]	; 0xb4
   14354:	mov	r2, #0
   14358:	and	r3, r3, #4
   1435c:	str	r3, [sp, #100]	; 0x64
   14360:	ldr	r3, [sp, #180]	; 0xb4
   14364:	str	r2, [sp, #76]	; 0x4c
   14368:	and	r3, r3, #1
   1436c:	str	r3, [sp, #96]	; 0x60
   14370:	str	r2, [sp, #36]	; 0x24
   14374:	str	r2, [sp, #56]	; 0x38
   14378:	str	r2, [sp, #68]	; 0x44
   1437c:	str	r2, [sp, #72]	; 0x48
   14380:	str	r2, [sp, #84]	; 0x54
   14384:	str	r0, [sp, #80]	; 0x50
   14388:	ldr	r3, [sp, #176]	; 0xb0
   1438c:	cmp	r3, #10
   14390:	ldrls	pc, [pc, r3, lsl #2]
   14394:	b	1556c <__assert_fail@plt+0x4480>
   14398:	andeq	r4, r1, r4, asr #7
   1439c:	andeq	r4, r1, r4, ror #13
   143a0:	andeq	r4, r1, ip, lsr r8
   143a4:	andeq	r4, r1, r8, lsl r7
   143a8:	muleq	r1, r0, r8
   143ac:	andeq	r4, r1, r0, ror r8
   143b0:	andeq	r4, r1, r8, lsr r7
   143b4:	andeq	r4, r1, ip, asr r7
   143b8:	andeq	r4, r1, r4, lsl #15
   143bc:	andeq	r4, r1, r4, lsl #15
   143c0:	andeq	r4, r1, r4, lsl #15
   143c4:	mov	r3, #0
   143c8:	ldr	r1, [sp, #56]	; 0x38
   143cc:	ldr	r2, [sp, #176]	; 0xb0
   143d0:	ldr	lr, [sp, #176]	; 0xb0
   143d4:	mov	r8, r3
   143d8:	mov	ip, r3
   143dc:	str	r3, [sp, #40]	; 0x28
   143e0:	mov	r3, r1
   143e4:	cmp	r2, #2
   143e8:	moveq	r3, #0
   143ec:	andne	r3, r3, #1
   143f0:	mov	r0, r3
   143f4:	str	r3, [sp, #92]	; 0x5c
   143f8:	ldr	r3, [sp, #68]	; 0x44
   143fc:	sub	lr, lr, #2
   14400:	adds	r2, r3, #0
   14404:	movne	r2, #1
   14408:	and	r3, r1, ip
   1440c:	and	r3, r2, r3
   14410:	clz	lr, lr
   14414:	str	r3, [sp, #88]	; 0x58
   14418:	lsr	lr, lr, #5
   1441c:	mov	r3, ip
   14420:	and	r3, r3, lr
   14424:	mov	sl, #0
   14428:	and	r0, r2, r0
   1442c:	str	r3, [sp, #64]	; 0x40
   14430:	eor	r3, r1, #1
   14434:	str	lr, [sp, #52]	; 0x34
   14438:	str	r0, [sp, #48]	; 0x30
   1443c:	str	r3, [sp, #60]	; 0x3c
   14440:	ldr	r3, [sp, #24]
   14444:	cmn	r3, #1
   14448:	beq	14978 <__assert_fail@plt+0x388c>
   1444c:	subs	r7, r3, sl
   14450:	movne	r7, #1
   14454:	cmp	r7, #0
   14458:	beq	14990 <__assert_fail@plt+0x38a4>
   1445c:	ldr	r3, [sp, #48]	; 0x30
   14460:	cmp	r3, #0
   14464:	beq	14cfc <__assert_fail@plt+0x3c10>
   14468:	ldr	r2, [sp, #68]	; 0x44
   1446c:	ldr	r1, [sp, #24]
   14470:	cmp	r2, #1
   14474:	mov	r3, r2
   14478:	movls	r3, #0
   1447c:	movhi	r3, #1
   14480:	cmn	r1, #1
   14484:	movne	r3, #0
   14488:	cmp	r3, #0
   1448c:	add	r4, sl, r2
   14490:	beq	144a0 <__assert_fail@plt+0x33b4>
   14494:	ldr	r0, [sp, #44]	; 0x2c
   14498:	bl	10fd8 <strlen@plt>
   1449c:	str	r0, [sp, #24]
   144a0:	ldr	r3, [sp, #24]
   144a4:	cmp	r3, r4
   144a8:	ldr	r3, [sp, #44]	; 0x2c
   144ac:	add	r5, r3, sl
   144b0:	bcc	14d04 <__assert_fail@plt+0x3c18>
   144b4:	mov	r0, r5
   144b8:	ldr	r2, [sp, #68]	; 0x44
   144bc:	ldr	r1, [sp, #72]	; 0x48
   144c0:	bl	10ed0 <memcmp@plt>
   144c4:	cmp	r0, #0
   144c8:	bne	14d04 <__assert_fail@plt+0x3c18>
   144cc:	ldr	r3, [sp, #40]	; 0x28
   144d0:	cmp	r3, #0
   144d4:	bne	156c0 <__assert_fail@plt+0x45d4>
   144d8:	ldrb	r4, [r5]
   144dc:	cmp	r4, #126	; 0x7e
   144e0:	ldrls	pc, [pc, r4, lsl #2]
   144e4:	b	155fc <__assert_fail@plt+0x4510>
   144e8:			; <UNDEFINED> instruction: 0x00014bbc
   144ec:	strdeq	r5, [r1], -ip
   144f0:	strdeq	r5, [r1], -ip
   144f4:	strdeq	r5, [r1], -ip
   144f8:	strdeq	r5, [r1], -ip
   144fc:	strdeq	r5, [r1], -ip
   14500:	strdeq	r5, [r1], -ip
   14504:	andeq	r4, r1, r8, lsr #23
   14508:	muleq	r1, r4, fp
   1450c:	andeq	r4, r1, r0, ror fp
   14510:	andeq	r4, r1, r0, asr fp
   14514:	andeq	r4, r1, r0, lsl #23
   14518:			; <UNDEFINED> instruction: 0x00014ab8
   1451c:	andeq	r4, r1, ip, ror #25
   14520:	strdeq	r5, [r1], -ip
   14524:	strdeq	r5, [r1], -ip
   14528:	strdeq	r5, [r1], -ip
   1452c:	strdeq	r5, [r1], -ip
   14530:	strdeq	r5, [r1], -ip
   14534:	strdeq	r5, [r1], -ip
   14538:	strdeq	r5, [r1], -ip
   1453c:	strdeq	r5, [r1], -ip
   14540:	strdeq	r5, [r1], -ip
   14544:	strdeq	r5, [r1], -ip
   14548:	strdeq	r5, [r1], -ip
   1454c:	strdeq	r5, [r1], -ip
   14550:	strdeq	r5, [r1], -ip
   14554:	strdeq	r5, [r1], -ip
   14558:	strdeq	r5, [r1], -ip
   1455c:	strdeq	r5, [r1], -ip
   14560:	strdeq	r5, [r1], -ip
   14564:	strdeq	r5, [r1], -ip
   14568:	ldrdeq	r4, [r1], -ip
   1456c:			; <UNDEFINED> instruction: 0x00014cbc
   14570:			; <UNDEFINED> instruction: 0x00014cbc
   14574:	muleq	r1, ip, ip
   14578:			; <UNDEFINED> instruction: 0x00014cbc
   1457c:	andeq	r4, r1, r8, lsr #21
   14580:			; <UNDEFINED> instruction: 0x00014cbc
   14584:	andeq	r4, r1, r4, lsl #21
   14588:			; <UNDEFINED> instruction: 0x00014cbc
   1458c:			; <UNDEFINED> instruction: 0x00014cbc
   14590:			; <UNDEFINED> instruction: 0x00014cbc
   14594:	andeq	r4, r1, r8, lsr #21
   14598:	andeq	r4, r1, r8, lsr #21
   1459c:	andeq	r4, r1, r8, lsr #21
   145a0:	andeq	r4, r1, r8, lsr #21
   145a4:	andeq	r4, r1, r8, lsr #21
   145a8:	andeq	r4, r1, r8, lsr #21
   145ac:	andeq	r4, r1, r8, lsr #21
   145b0:	andeq	r4, r1, r8, lsr #21
   145b4:	andeq	r4, r1, r8, lsr #21
   145b8:	andeq	r4, r1, r8, lsr #21
   145bc:	andeq	r4, r1, r8, lsr #21
   145c0:	andeq	r4, r1, r8, lsr #21
   145c4:	andeq	r4, r1, r8, lsr #21
   145c8:	andeq	r4, r1, r8, lsr #21
   145cc:	andeq	r4, r1, r8, lsr #21
   145d0:	andeq	r4, r1, r8, lsr #21
   145d4:			; <UNDEFINED> instruction: 0x00014cbc
   145d8:			; <UNDEFINED> instruction: 0x00014cbc
   145dc:			; <UNDEFINED> instruction: 0x00014cbc
   145e0:			; <UNDEFINED> instruction: 0x00014cbc
   145e4:	andeq	r4, r1, r4, lsr sl
   145e8:	strdeq	r5, [r1], -ip
   145ec:	andeq	r4, r1, r8, lsr #21
   145f0:	andeq	r4, r1, r8, lsr #21
   145f4:	andeq	r4, r1, r8, lsr #21
   145f8:	andeq	r4, r1, r8, lsr #21
   145fc:	andeq	r4, r1, r8, lsr #21
   14600:	andeq	r4, r1, r8, lsr #21
   14604:	andeq	r4, r1, r8, lsr #21
   14608:	andeq	r4, r1, r8, lsr #21
   1460c:	andeq	r4, r1, r8, lsr #21
   14610:	andeq	r4, r1, r8, lsr #21
   14614:	andeq	r4, r1, r8, lsr #21
   14618:	andeq	r4, r1, r8, lsr #21
   1461c:	andeq	r4, r1, r8, lsr #21
   14620:	andeq	r4, r1, r8, lsr #21
   14624:	andeq	r4, r1, r8, lsr #21
   14628:	andeq	r4, r1, r8, lsr #21
   1462c:	andeq	r4, r1, r8, lsr #21
   14630:	andeq	r4, r1, r8, lsr #21
   14634:	andeq	r4, r1, r8, lsr #21
   14638:	andeq	r4, r1, r8, lsr #21
   1463c:	andeq	r4, r1, r8, lsr #21
   14640:	andeq	r4, r1, r8, lsr #21
   14644:	andeq	r4, r1, r8, lsr #21
   14648:	andeq	r4, r1, r8, lsr #21
   1464c:	andeq	r4, r1, r8, lsr #21
   14650:	andeq	r4, r1, r8, lsr #21
   14654:			; <UNDEFINED> instruction: 0x00014cbc
   14658:	andeq	r4, r1, r0, lsl #20
   1465c:	andeq	r4, r1, r8, lsr #21
   14660:			; <UNDEFINED> instruction: 0x00014cbc
   14664:	andeq	r4, r1, r8, lsr #21
   14668:			; <UNDEFINED> instruction: 0x00014cbc
   1466c:	andeq	r4, r1, r8, lsr #21
   14670:	andeq	r4, r1, r8, lsr #21
   14674:	andeq	r4, r1, r8, lsr #21
   14678:	andeq	r4, r1, r8, lsr #21
   1467c:	andeq	r4, r1, r8, lsr #21
   14680:	andeq	r4, r1, r8, lsr #21
   14684:	andeq	r4, r1, r8, lsr #21
   14688:	andeq	r4, r1, r8, lsr #21
   1468c:	andeq	r4, r1, r8, lsr #21
   14690:	andeq	r4, r1, r8, lsr #21
   14694:	andeq	r4, r1, r8, lsr #21
   14698:	andeq	r4, r1, r8, lsr #21
   1469c:	andeq	r4, r1, r8, lsr #21
   146a0:	andeq	r4, r1, r8, lsr #21
   146a4:	andeq	r4, r1, r8, lsr #21
   146a8:	andeq	r4, r1, r8, lsr #21
   146ac:	andeq	r4, r1, r8, lsr #21
   146b0:	andeq	r4, r1, r8, lsr #21
   146b4:	andeq	r4, r1, r8, lsr #21
   146b8:	andeq	r4, r1, r8, lsr #21
   146bc:	andeq	r4, r1, r8, lsr #21
   146c0:	andeq	r4, r1, r8, lsr #21
   146c4:	andeq	r4, r1, r8, lsr #21
   146c8:	andeq	r4, r1, r8, lsr #21
   146cc:	andeq	r4, r1, r8, lsr #21
   146d0:	andeq	r4, r1, r8, lsr #21
   146d4:			; <UNDEFINED> instruction: 0x000148b8
   146d8:			; <UNDEFINED> instruction: 0x00014cbc
   146dc:			; <UNDEFINED> instruction: 0x000148b8
   146e0:	muleq	r1, ip, ip
   146e4:	mov	r3, #1
   146e8:	str	r3, [sp, #40]	; 0x28
   146ec:	str	r3, [sp, #68]	; 0x44
   146f0:	mov	r8, #0
   146f4:	ldr	r3, [pc, #4056]	; 156d4 <__assert_fail@plt+0x45e8>
   146f8:	str	r3, [sp, #72]	; 0x48
   146fc:	mov	r3, #2
   14700:	str	r3, [sp, #176]	; 0xb0
   14704:	ldr	r1, [sp, #56]	; 0x38
   14708:	mov	r2, r3
   1470c:	ldr	ip, [sp, #40]	; 0x28
   14710:	mov	lr, r3
   14714:	b	143e0 <__assert_fail@plt+0x32f4>
   14718:	mov	r3, #1
   1471c:	str	r3, [sp, #56]	; 0x38
   14720:	str	r3, [sp, #68]	; 0x44
   14724:	str	r3, [sp, #40]	; 0x28
   14728:	ldr	r3, [pc, #4004]	; 156d4 <__assert_fail@plt+0x45e8>
   1472c:	mov	r8, #0
   14730:	str	r3, [sp, #72]	; 0x48
   14734:	b	146fc <__assert_fail@plt+0x3610>
   14738:	mov	r3, #1
   1473c:	str	r3, [sp, #56]	; 0x38
   14740:	str	r3, [sp, #68]	; 0x44
   14744:	str	r3, [sp, #40]	; 0x28
   14748:	ldr	r3, [pc, #3976]	; 156d8 <__assert_fail@plt+0x45ec>
   1474c:	mov	r8, #0
   14750:	str	r3, [sp, #72]	; 0x48
   14754:	mov	r3, #5
   14758:	b	14700 <__assert_fail@plt+0x3614>
   1475c:	mov	r3, #0
   14760:	str	r3, [sp, #40]	; 0x28
   14764:	mov	r3, #1
   14768:	str	r3, [sp, #56]	; 0x38
   1476c:	mov	r8, #0
   14770:	mov	r1, r3
   14774:	ldr	r2, [sp, #176]	; 0xb0
   14778:	ldr	ip, [sp, #40]	; 0x28
   1477c:	ldr	lr, [sp, #176]	; 0xb0
   14780:	b	143e0 <__assert_fail@plt+0x32f4>
   14784:	ldr	r3, [sp, #176]	; 0xb0
   14788:	cmp	r3, #10
   1478c:	beq	147d0 <__assert_fail@plt+0x36e4>
   14790:	mov	r2, #5
   14794:	ldr	r1, [pc, #3904]	; 156dc <__assert_fail@plt+0x45f0>
   14798:	mov	r0, #0
   1479c:	bl	10ee8 <dcgettext@plt>
   147a0:	ldr	r2, [pc, #3892]	; 156dc <__assert_fail@plt+0x45f0>
   147a4:	cmp	r0, r2
   147a8:	str	r0, [sp, #188]	; 0xbc
   147ac:	beq	15868 <__assert_fail@plt+0x477c>
   147b0:	mov	r2, #5
   147b4:	ldr	r1, [pc, #3864]	; 156d4 <__assert_fail@plt+0x45e8>
   147b8:	mov	r0, #0
   147bc:	bl	10ee8 <dcgettext@plt>
   147c0:	ldr	r2, [pc, #3852]	; 156d4 <__assert_fail@plt+0x45e8>
   147c4:	cmp	r0, r2
   147c8:	str	r0, [sp, #192]	; 0xc0
   147cc:	beq	15858 <__assert_fail@plt+0x476c>
   147d0:	ldr	r8, [sp, #40]	; 0x28
   147d4:	cmp	r8, #0
   147d8:	movne	r8, #0
   147dc:	bne	1480c <__assert_fail@plt+0x3720>
   147e0:	ldr	r3, [sp, #188]	; 0xbc
   147e4:	ldrb	r3, [r3]
   147e8:	cmp	r3, #0
   147ec:	beq	1480c <__assert_fail@plt+0x3720>
   147f0:	ldr	r2, [sp, #188]	; 0xbc
   147f4:	cmp	fp, r8
   147f8:	strbhi	r3, [r9, r8]
   147fc:	ldrb	r3, [r2, #1]!
   14800:	add	r8, r8, #1
   14804:	cmp	r3, #0
   14808:	bne	147f4 <__assert_fail@plt+0x3708>
   1480c:	ldr	r0, [sp, #192]	; 0xc0
   14810:	bl	10fd8 <strlen@plt>
   14814:	ldr	r3, [sp, #192]	; 0xc0
   14818:	ldr	r2, [sp, #176]	; 0xb0
   1481c:	str	r3, [sp, #72]	; 0x48
   14820:	mov	r3, #1
   14824:	str	r3, [sp, #56]	; 0x38
   14828:	mov	r1, r3
   1482c:	ldr	ip, [sp, #40]	; 0x28
   14830:	ldr	lr, [sp, #176]	; 0xb0
   14834:	str	r0, [sp, #68]	; 0x44
   14838:	b	143e0 <__assert_fail@plt+0x32f4>
   1483c:	ldr	r3, [sp, #40]	; 0x28
   14840:	cmp	r3, #0
   14844:	beq	154ec <__assert_fail@plt+0x4400>
   14848:	mov	r3, #1
   1484c:	str	r3, [sp, #68]	; 0x44
   14850:	ldr	r3, [pc, #3708]	; 156d4 <__assert_fail@plt+0x45e8>
   14854:	str	r3, [sp, #72]	; 0x48
   14858:	mov	r8, #0
   1485c:	ldr	r1, [sp, #56]	; 0x38
   14860:	ldr	r2, [sp, #176]	; 0xb0
   14864:	ldr	ip, [sp, #40]	; 0x28
   14868:	ldr	lr, [sp, #176]	; 0xb0
   1486c:	b	143e0 <__assert_fail@plt+0x32f4>
   14870:	ldr	r3, [sp, #40]	; 0x28
   14874:	cmp	r3, #0
   14878:	beq	15570 <__assert_fail@plt+0x4484>
   1487c:	str	r3, [sp, #56]	; 0x38
   14880:	mov	r3, #1
   14884:	str	r3, [sp, #68]	; 0x44
   14888:	ldr	r3, [pc, #3656]	; 156d8 <__assert_fail@plt+0x45ec>
   1488c:	b	14854 <__assert_fail@plt+0x3768>
   14890:	ldr	r3, [sp, #40]	; 0x28
   14894:	cmp	r3, #0
   14898:	mov	r3, #1
   1489c:	streq	r3, [sp, #56]	; 0x38
   148a0:	beq	154ec <__assert_fail@plt+0x4400>
   148a4:	str	r3, [sp, #68]	; 0x44
   148a8:	ldr	r3, [pc, #3620]	; 156d4 <__assert_fail@plt+0x45e8>
   148ac:	mov	r8, #0
   148b0:	str	r3, [sp, #72]	; 0x48
   148b4:	b	146fc <__assert_fail@plt+0x3610>
   148b8:	ldr	r3, [sp, #24]
   148bc:	ldr	r6, [sp, #48]	; 0x30
   148c0:	cmn	r3, #1
   148c4:	beq	14f20 <__assert_fail@plt+0x3e34>
   148c8:	subs	r3, r3, #1
   148cc:	movne	r3, #1
   148d0:	cmp	r3, #0
   148d4:	beq	14ca0 <__assert_fail@plt+0x3bb4>
   148d8:	ldr	r1, [sp, #52]	; 0x34
   148dc:	mov	r7, r3
   148e0:	mov	r3, #0
   148e4:	str	r3, [sp, #32]
   148e8:	ldr	r3, [sp, #60]	; 0x3c
   148ec:	orr	r2, r1, r3
   148f0:	ldr	r3, [sp, #40]	; 0x28
   148f4:	eor	r2, r2, #1
   148f8:	orr	r2, r3, r2
   148fc:	tst	r2, #255	; 0xff
   14900:	bne	15224 <__assert_fail@plt+0x4138>
   14904:	cmp	r6, #0
   14908:	bne	14ae4 <__assert_fail@plt+0x39f8>
   1490c:	ldr	r3, [sp, #36]	; 0x24
   14910:	add	sl, sl, #1
   14914:	and	r3, r3, r7
   14918:	uxtb	r6, r3
   1491c:	cmp	r6, #0
   14920:	beq	1494c <__assert_fail@plt+0x3860>
   14924:	cmp	fp, r8
   14928:	movhi	r3, #39	; 0x27
   1492c:	strbhi	r3, [r9, r8]
   14930:	add	r3, r8, #1
   14934:	cmp	fp, r3
   14938:	movhi	r2, #39	; 0x27
   1493c:	add	r8, r8, #2
   14940:	strbhi	r2, [r9, r3]
   14944:	mov	r3, #0
   14948:	str	r3, [sp, #36]	; 0x24
   1494c:	ldr	r2, [sp, #32]
   14950:	cmp	r8, fp
   14954:	ldr	r3, [sp, #28]
   14958:	strbcc	r4, [r9, r8]
   1495c:	cmp	r2, #0
   14960:	moveq	r3, #0
   14964:	str	r3, [sp, #28]
   14968:	ldr	r3, [sp, #24]
   1496c:	add	r8, r8, #1
   14970:	cmn	r3, #1
   14974:	bne	1444c <__assert_fail@plt+0x3360>
   14978:	ldr	r3, [sp, #44]	; 0x2c
   1497c:	ldrb	r3, [r3, sl]
   14980:	adds	r7, r3, #0
   14984:	movne	r7, #1
   14988:	cmp	r7, #0
   1498c:	bne	1445c <__assert_fail@plt+0x3370>
   14990:	ldr	r3, [sp, #64]	; 0x40
   14994:	cmp	r8, #0
   14998:	movne	r3, #0
   1499c:	andeq	r3, r3, #1
   149a0:	cmp	r3, #0
   149a4:	str	r3, [sp, #64]	; 0x40
   149a8:	bne	1544c <__assert_fail@plt+0x4360>
   149ac:	ldr	r3, [sp, #40]	; 0x28
   149b0:	ldr	r2, [sp, #52]	; 0x34
   149b4:	eor	r3, r3, #1
   149b8:	ands	r2, r2, r3
   149bc:	beq	15878 <__assert_fail@plt+0x478c>
   149c0:	ldr	r3, [sp, #76]	; 0x4c
   149c4:	cmp	r3, #0
   149c8:	beq	15848 <__assert_fail@plt+0x475c>
   149cc:	ldr	r3, [sp, #28]
   149d0:	cmp	r3, #0
   149d4:	bne	15804 <__assert_fail@plt+0x4718>
   149d8:	ldr	r2, [sp, #84]	; 0x54
   149dc:	clz	r3, fp
   149e0:	cmp	r2, #0
   149e4:	lsr	r3, r3, #5
   149e8:	moveq	r3, #0
   149ec:	cmp	r3, #0
   149f0:	beq	157a4 <__assert_fail@plt+0x46b8>
   149f4:	mov	fp, r2
   149f8:	str	r3, [sp, #76]	; 0x4c
   149fc:	b	14388 <__assert_fail@plt+0x329c>
   14a00:	ldr	r3, [sp, #176]	; 0xb0
   14a04:	ldr	r6, [sp, #48]	; 0x30
   14a08:	cmp	r3, #2
   14a0c:	beq	14f44 <__assert_fail@plt+0x3e58>
   14a10:	ldr	r3, [sp, #88]	; 0x58
   14a14:	cmp	r3, #0
   14a18:	beq	154c8 <__assert_fail@plt+0x43dc>
   14a1c:	mov	r3, #0
   14a20:	add	sl, sl, #1
   14a24:	ldr	r6, [sp, #36]	; 0x24
   14a28:	str	r3, [sp, #32]
   14a2c:	mov	r4, #92	; 0x5c
   14a30:	b	1491c <__assert_fail@plt+0x3830>
   14a34:	ldr	r3, [sp, #176]	; 0xb0
   14a38:	ldr	r6, [sp, #48]	; 0x30
   14a3c:	cmp	r3, #2
   14a40:	beq	14f74 <__assert_fail@plt+0x3e88>
   14a44:	cmp	r3, #5
   14a48:	bne	154d8 <__assert_fail@plt+0x43ec>
   14a4c:	ldr	r3, [sp, #100]	; 0x64
   14a50:	cmp	r3, #0
   14a54:	beq	1553c <__assert_fail@plt+0x4450>
   14a58:	ldr	r2, [sp, #24]
   14a5c:	add	r3, sl, #2
   14a60:	cmp	r2, r3
   14a64:	bls	14a74 <__assert_fail@plt+0x3988>
   14a68:	ldrb	r4, [r5, #1]
   14a6c:	cmp	r4, #63	; 0x3f
   14a70:	beq	156e4 <__assert_fail@plt+0x45f8>
   14a74:	mov	r1, #0
   14a78:	str	r1, [sp, #32]
   14a7c:	mov	r4, #63	; 0x3f
   14a80:	b	148e8 <__assert_fail@plt+0x37fc>
   14a84:	ldr	r3, [sp, #176]	; 0xb0
   14a88:	ldr	r6, [sp, #48]	; 0x30
   14a8c:	cmp	r3, #2
   14a90:	beq	14fa0 <__assert_fail@plt+0x3eb4>
   14a94:	str	r7, [sp, #32]
   14a98:	str	r7, [sp, #76]	; 0x4c
   14a9c:	mov	r1, #0
   14aa0:	mov	r4, #39	; 0x27
   14aa4:	b	148e8 <__assert_fail@plt+0x37fc>
   14aa8:	ldr	r6, [sp, #48]	; 0x30
   14aac:	ldr	r1, [sp, #52]	; 0x34
   14ab0:	str	r7, [sp, #32]
   14ab4:	b	148e8 <__assert_fail@plt+0x37fc>
   14ab8:	ldr	r6, [sp, #48]	; 0x30
   14abc:	ldr	r1, [sp, #52]	; 0x34
   14ac0:	mov	r4, #12
   14ac4:	mov	r3, #102	; 0x66
   14ac8:	ldr	r2, [sp, #56]	; 0x38
   14acc:	cmp	r2, #0
   14ad0:	streq	r2, [sp, #32]
   14ad4:	beq	148e8 <__assert_fail@plt+0x37fc>
   14ad8:	mov	r4, r3
   14adc:	mov	r3, #0
   14ae0:	str	r3, [sp, #32]
   14ae4:	ldr	r3, [sp, #40]	; 0x28
   14ae8:	cmp	r3, #0
   14aec:	bne	1525c <__assert_fail@plt+0x4170>
   14af0:	ldr	r3, [sp, #36]	; 0x24
   14af4:	eor	r3, r3, #1
   14af8:	and	r3, r3, r1
   14afc:	ands	r3, r3, #255	; 0xff
   14b00:	beq	14b38 <__assert_fail@plt+0x3a4c>
   14b04:	cmp	fp, r8
   14b08:	movhi	r2, #39	; 0x27
   14b0c:	strbhi	r2, [r9, r8]
   14b10:	add	r2, r8, #1
   14b14:	cmp	fp, r2
   14b18:	movhi	r1, #36	; 0x24
   14b1c:	strbhi	r1, [r9, r2]
   14b20:	add	r2, r8, #2
   14b24:	cmp	fp, r2
   14b28:	add	r8, r8, #3
   14b2c:	movhi	r1, #39	; 0x27
   14b30:	strbhi	r1, [r9, r2]
   14b34:	str	r3, [sp, #36]	; 0x24
   14b38:	cmp	fp, r8
   14b3c:	movhi	r3, #92	; 0x5c
   14b40:	strbhi	r3, [r9, r8]
   14b44:	add	sl, sl, #1
   14b48:	add	r8, r8, #1
   14b4c:	b	1494c <__assert_fail@plt+0x3860>
   14b50:	ldr	r6, [sp, #48]	; 0x30
   14b54:	mov	r4, #10
   14b58:	mov	r3, #110	; 0x6e
   14b5c:	ldr	r2, [sp, #64]	; 0x40
   14b60:	cmp	r2, #0
   14b64:	bne	155e4 <__assert_fail@plt+0x44f8>
   14b68:	ldr	r1, [sp, #52]	; 0x34
   14b6c:	b	14ac8 <__assert_fail@plt+0x39dc>
   14b70:	ldr	r6, [sp, #48]	; 0x30
   14b74:	ldr	r1, [sp, #52]	; 0x34
   14b78:	mov	r3, #116	; 0x74
   14b7c:	b	14ac8 <__assert_fail@plt+0x39dc>
   14b80:	ldr	r6, [sp, #48]	; 0x30
   14b84:	ldr	r1, [sp, #52]	; 0x34
   14b88:	mov	r4, #11
   14b8c:	mov	r3, #118	; 0x76
   14b90:	b	14ac8 <__assert_fail@plt+0x39dc>
   14b94:	ldr	r6, [sp, #48]	; 0x30
   14b98:	ldr	r1, [sp, #52]	; 0x34
   14b9c:	mov	r4, #8
   14ba0:	mov	r3, #98	; 0x62
   14ba4:	b	14ac8 <__assert_fail@plt+0x39dc>
   14ba8:	ldr	r6, [sp, #48]	; 0x30
   14bac:	ldr	r1, [sp, #52]	; 0x34
   14bb0:	mov	r4, #7
   14bb4:	mov	r3, #97	; 0x61
   14bb8:	b	14ac8 <__assert_fail@plt+0x39dc>
   14bbc:	ldr	r3, [sp, #56]	; 0x38
   14bc0:	ldr	r6, [sp, #48]	; 0x30
   14bc4:	cmp	r3, #0
   14bc8:	beq	1508c <__assert_fail@plt+0x3fa0>
   14bcc:	ldr	r3, [sp, #40]	; 0x28
   14bd0:	cmp	r3, #0
   14bd4:	bne	156c0 <__assert_fail@plt+0x45d4>
   14bd8:	ldr	r3, [sp, #36]	; 0x24
   14bdc:	ldr	r2, [sp, #52]	; 0x34
   14be0:	eor	r3, r3, #1
   14be4:	ands	r3, r2, r3
   14be8:	moveq	r2, r8
   14bec:	beq	14c24 <__assert_fail@plt+0x3b38>
   14bf0:	cmp	fp, r8
   14bf4:	movhi	r2, #39	; 0x27
   14bf8:	strbhi	r2, [r9, r8]
   14bfc:	add	r2, r8, #1
   14c00:	cmp	fp, r2
   14c04:	movhi	r1, #36	; 0x24
   14c08:	strbhi	r1, [r9, r2]
   14c0c:	add	r2, r8, #2
   14c10:	cmp	fp, r2
   14c14:	movhi	r1, #39	; 0x27
   14c18:	strbhi	r1, [r9, r2]
   14c1c:	add	r2, r8, #3
   14c20:	str	r3, [sp, #36]	; 0x24
   14c24:	cmp	fp, r2
   14c28:	movhi	r3, #92	; 0x5c
   14c2c:	strbhi	r3, [r9, r2]
   14c30:	ldr	r3, [sp, #92]	; 0x5c
   14c34:	add	r8, r2, #1
   14c38:	cmp	r3, #0
   14c3c:	beq	155c0 <__assert_fail@plt+0x44d4>
   14c40:	ldr	r1, [sp, #24]
   14c44:	add	r3, sl, #1
   14c48:	cmp	r1, r3
   14c4c:	bls	14c84 <__assert_fail@plt+0x3b98>
   14c50:	ldr	r1, [sp, #44]	; 0x2c
   14c54:	ldrb	r3, [r1, r3]
   14c58:	sub	r3, r3, #48	; 0x30
   14c5c:	cmp	r3, #9
   14c60:	bhi	14c84 <__assert_fail@plt+0x3b98>
   14c64:	cmp	fp, r8
   14c68:	movhi	r3, #48	; 0x30
   14c6c:	strbhi	r3, [r9, r8]
   14c70:	add	r3, r2, #2
   14c74:	cmp	fp, r3
   14c78:	add	r8, r2, #3
   14c7c:	movhi	r1, #48	; 0x30
   14c80:	strbhi	r1, [r9, r3]
   14c84:	ldr	r3, [sp, #40]	; 0x28
   14c88:	ldr	r1, [sp, #52]	; 0x34
   14c8c:	mov	r7, r3
   14c90:	str	r3, [sp, #32]
   14c94:	mov	r4, #48	; 0x30
   14c98:	b	148e8 <__assert_fail@plt+0x37fc>
   14c9c:	ldr	r6, [sp, #48]	; 0x30
   14ca0:	cmp	sl, #0
   14ca4:	streq	r7, [sp, #32]
   14ca8:	beq	14cc8 <__assert_fail@plt+0x3bdc>
   14cac:	mov	r3, #0
   14cb0:	ldr	r1, [sp, #52]	; 0x34
   14cb4:	str	r3, [sp, #32]
   14cb8:	b	148e8 <__assert_fail@plt+0x37fc>
   14cbc:	ldr	r6, [sp, #48]	; 0x30
   14cc0:	mov	r3, #0
   14cc4:	str	r3, [sp, #32]
   14cc8:	ldr	r3, [sp, #64]	; 0x40
   14ccc:	cmp	r3, #0
   14cd0:	bne	1544c <__assert_fail@plt+0x4360>
   14cd4:	ldr	r1, [sp, #52]	; 0x34
   14cd8:	b	148e8 <__assert_fail@plt+0x37fc>
   14cdc:	ldr	r3, [sp, #48]	; 0x30
   14ce0:	mov	r6, r3
   14ce4:	str	r3, [sp, #32]
   14ce8:	b	14cc8 <__assert_fail@plt+0x3bdc>
   14cec:	ldr	r6, [sp, #48]	; 0x30
   14cf0:	mov	r4, #13
   14cf4:	mov	r3, #114	; 0x72
   14cf8:	b	14b5c <__assert_fail@plt+0x3a70>
   14cfc:	ldr	r3, [sp, #44]	; 0x2c
   14d00:	add	r5, r3, sl
   14d04:	ldrb	r4, [r5]
   14d08:	cmp	r4, #126	; 0x7e
   14d0c:	ldrls	pc, [pc, r4, lsl #2]
   14d10:	b	150ac <__assert_fail@plt+0x3fc0>
   14d14:	andeq	r5, r1, ip, ror r0
   14d18:	andeq	r5, r1, ip, lsr #1
   14d1c:	andeq	r5, r1, ip, lsr #1
   14d20:	andeq	r5, r1, ip, lsr #1
   14d24:	andeq	r5, r1, ip, lsr #1
   14d28:	andeq	r5, r1, ip, lsr #1
   14d2c:	andeq	r5, r1, ip, lsr #1
   14d30:	andeq	r5, r1, r4, ror r0
   14d34:	andeq	r5, r1, ip, rrx
   14d38:	andeq	r5, r1, r0, rrx
   14d3c:	andeq	r5, r1, r8, asr r0
   14d40:	andeq	r5, r1, r0, asr r0
   14d44:	andeq	r5, r1, r8, asr #32
   14d48:	andeq	r5, r1, r0, asr #32
   14d4c:	andeq	r5, r1, ip, lsr #1
   14d50:	andeq	r5, r1, ip, lsr #1
   14d54:	andeq	r5, r1, ip, lsr #1
   14d58:	andeq	r5, r1, ip, lsr #1
   14d5c:	andeq	r5, r1, ip, lsr #1
   14d60:	andeq	r5, r1, ip, lsr #1
   14d64:	andeq	r5, r1, ip, lsr #1
   14d68:	andeq	r5, r1, ip, lsr #1
   14d6c:	andeq	r5, r1, ip, lsr #1
   14d70:	andeq	r5, r1, ip, lsr #1
   14d74:	andeq	r5, r1, ip, lsr #1
   14d78:	andeq	r5, r1, ip, lsr #1
   14d7c:	andeq	r5, r1, ip, lsr #1
   14d80:	andeq	r5, r1, ip, lsr #1
   14d84:	andeq	r5, r1, ip, lsr #1
   14d88:	andeq	r5, r1, ip, lsr #1
   14d8c:	andeq	r5, r1, ip, lsr #1
   14d90:	andeq	r5, r1, ip, lsr #1
   14d94:	andeq	r5, r1, r4, lsr r0
   14d98:	andeq	r5, r1, ip, lsr #32
   14d9c:	andeq	r5, r1, ip, lsr #32
   14da0:	andeq	r5, r1, r4, lsr #32
   14da4:	andeq	r5, r1, ip, lsr #32
   14da8:	andeq	r5, r1, ip, lsl r0
   14dac:	andeq	r5, r1, ip, lsr #32
   14db0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14db4:	andeq	r5, r1, ip, lsr #32
   14db8:	andeq	r5, r1, ip, lsr #32
   14dbc:	andeq	r5, r1, ip, lsr #32
   14dc0:	andeq	r5, r1, ip, lsl r0
   14dc4:	andeq	r5, r1, ip, lsl r0
   14dc8:	andeq	r5, r1, ip, lsl r0
   14dcc:	andeq	r5, r1, ip, lsl r0
   14dd0:	andeq	r5, r1, ip, lsl r0
   14dd4:	andeq	r5, r1, ip, lsl r0
   14dd8:	andeq	r5, r1, ip, lsl r0
   14ddc:	andeq	r5, r1, ip, lsl r0
   14de0:	andeq	r5, r1, ip, lsl r0
   14de4:	andeq	r5, r1, ip, lsl r0
   14de8:	andeq	r5, r1, ip, lsl r0
   14dec:	andeq	r5, r1, ip, lsl r0
   14df0:	andeq	r5, r1, ip, lsl r0
   14df4:	andeq	r5, r1, ip, lsl r0
   14df8:	andeq	r5, r1, ip, lsl r0
   14dfc:	andeq	r5, r1, ip, lsl r0
   14e00:	andeq	r5, r1, ip, lsr #32
   14e04:	andeq	r5, r1, ip, lsr #32
   14e08:	andeq	r5, r1, ip, lsr #32
   14e0c:	andeq	r5, r1, ip, lsr #32
   14e10:	andeq	r4, r1, r4, ror #30
   14e14:	andeq	r5, r1, ip, lsr #1
   14e18:	andeq	r5, r1, ip, lsl r0
   14e1c:	andeq	r5, r1, ip, lsl r0
   14e20:	andeq	r5, r1, ip, lsl r0
   14e24:	andeq	r5, r1, ip, lsl r0
   14e28:	andeq	r5, r1, ip, lsl r0
   14e2c:	andeq	r5, r1, ip, lsl r0
   14e30:	andeq	r5, r1, ip, lsl r0
   14e34:	andeq	r5, r1, ip, lsl r0
   14e38:	andeq	r5, r1, ip, lsl r0
   14e3c:	andeq	r5, r1, ip, lsl r0
   14e40:	andeq	r5, r1, ip, lsl r0
   14e44:	andeq	r5, r1, ip, lsl r0
   14e48:	andeq	r5, r1, ip, lsl r0
   14e4c:	andeq	r5, r1, ip, lsl r0
   14e50:	andeq	r5, r1, ip, lsl r0
   14e54:	andeq	r5, r1, ip, lsl r0
   14e58:	andeq	r5, r1, ip, lsl r0
   14e5c:	andeq	r5, r1, ip, lsl r0
   14e60:	andeq	r5, r1, ip, lsl r0
   14e64:	andeq	r5, r1, ip, lsl r0
   14e68:	andeq	r5, r1, ip, lsl r0
   14e6c:	andeq	r5, r1, ip, lsl r0
   14e70:	andeq	r5, r1, ip, lsl r0
   14e74:	andeq	r5, r1, ip, lsl r0
   14e78:	andeq	r5, r1, ip, lsl r0
   14e7c:	andeq	r5, r1, ip, lsl r0
   14e80:	andeq	r5, r1, ip, lsr #32
   14e84:	andeq	r4, r1, r4, lsr pc
   14e88:	andeq	r5, r1, ip, lsl r0
   14e8c:	andeq	r5, r1, ip, lsr #32
   14e90:	andeq	r5, r1, ip, lsl r0
   14e94:	andeq	r5, r1, ip, lsr #32
   14e98:	andeq	r5, r1, ip, lsl r0
   14e9c:	andeq	r5, r1, ip, lsl r0
   14ea0:	andeq	r5, r1, ip, lsl r0
   14ea4:	andeq	r5, r1, ip, lsl r0
   14ea8:	andeq	r5, r1, ip, lsl r0
   14eac:	andeq	r5, r1, ip, lsl r0
   14eb0:	andeq	r5, r1, ip, lsl r0
   14eb4:	andeq	r5, r1, ip, lsl r0
   14eb8:	andeq	r5, r1, ip, lsl r0
   14ebc:	andeq	r5, r1, ip, lsl r0
   14ec0:	andeq	r5, r1, ip, lsl r0
   14ec4:	andeq	r5, r1, ip, lsl r0
   14ec8:	andeq	r5, r1, ip, lsl r0
   14ecc:	andeq	r5, r1, ip, lsl r0
   14ed0:	andeq	r5, r1, ip, lsl r0
   14ed4:	andeq	r5, r1, ip, lsl r0
   14ed8:	andeq	r5, r1, ip, lsl r0
   14edc:	andeq	r5, r1, ip, lsl r0
   14ee0:	andeq	r5, r1, ip, lsl r0
   14ee4:	andeq	r5, r1, ip, lsl r0
   14ee8:	andeq	r5, r1, ip, lsl r0
   14eec:	andeq	r5, r1, ip, lsl r0
   14ef0:	andeq	r5, r1, ip, lsl r0
   14ef4:	andeq	r5, r1, ip, lsl r0
   14ef8:	andeq	r5, r1, ip, lsl r0
   14efc:	andeq	r5, r1, ip, lsl r0
   14f00:	andeq	r4, r1, r0, lsl pc
   14f04:	andeq	r5, r1, ip, lsr #32
   14f08:	andeq	r4, r1, r0, lsl pc
   14f0c:	andeq	r5, r1, r4, lsr #32
   14f10:	ldr	r3, [sp, #24]
   14f14:	mov	r6, #0
   14f18:	cmn	r3, #1
   14f1c:	bne	148c8 <__assert_fail@plt+0x37dc>
   14f20:	ldr	r3, [sp, #44]	; 0x2c
   14f24:	ldrb	r3, [r3, #1]
   14f28:	adds	r3, r3, #0
   14f2c:	movne	r3, #1
   14f30:	b	148d0 <__assert_fail@plt+0x37e4>
   14f34:	ldr	r3, [sp, #176]	; 0xb0
   14f38:	mov	r6, #0
   14f3c:	cmp	r3, #2
   14f40:	bne	14a10 <__assert_fail@plt+0x3924>
   14f44:	ldr	r3, [sp, #64]	; 0x40
   14f48:	cmp	r3, #0
   14f4c:	bne	15784 <__assert_fail@plt+0x4698>
   14f50:	add	sl, sl, #1
   14f54:	ldr	r6, [sp, #36]	; 0x24
   14f58:	str	r3, [sp, #32]
   14f5c:	mov	r4, #92	; 0x5c
   14f60:	b	1491c <__assert_fail@plt+0x3830>
   14f64:	ldr	r3, [sp, #176]	; 0xb0
   14f68:	mov	r6, #0
   14f6c:	cmp	r3, #2
   14f70:	bne	14a44 <__assert_fail@plt+0x3958>
   14f74:	ldr	r3, [sp, #40]	; 0x28
   14f78:	cmp	r3, #0
   14f7c:	bne	15260 <__assert_fail@plt+0x4174>
   14f80:	mov	r1, r7
   14f84:	str	r3, [sp, #32]
   14f88:	mov	r4, #63	; 0x3f
   14f8c:	b	148e8 <__assert_fail@plt+0x37fc>
   14f90:	ldr	r3, [sp, #176]	; 0xb0
   14f94:	mov	r6, #0
   14f98:	cmp	r3, #2
   14f9c:	bne	14a94 <__assert_fail@plt+0x39a8>
   14fa0:	ldr	r3, [sp, #64]	; 0x40
   14fa4:	cmp	r3, #0
   14fa8:	bne	15784 <__assert_fail@plt+0x4698>
   14fac:	ldr	r2, [sp, #84]	; 0x54
   14fb0:	adds	r3, fp, #0
   14fb4:	movne	r3, #1
   14fb8:	cmp	r2, #0
   14fbc:	movne	r3, #0
   14fc0:	cmp	r3, #0
   14fc4:	strne	fp, [sp, #84]	; 0x54
   14fc8:	movne	fp, #0
   14fcc:	bne	14ffc <__assert_fail@plt+0x3f10>
   14fd0:	cmp	fp, r8
   14fd4:	movhi	r3, #39	; 0x27
   14fd8:	strbhi	r3, [r9, r8]
   14fdc:	add	r3, r8, #1
   14fe0:	cmp	fp, r3
   14fe4:	movhi	r2, #92	; 0x5c
   14fe8:	strbhi	r2, [r9, r3]
   14fec:	add	r3, r8, #2
   14ff0:	cmp	fp, r3
   14ff4:	movhi	r2, #39	; 0x27
   14ff8:	strbhi	r2, [r9, r3]
   14ffc:	ldr	r3, [sp, #64]	; 0x40
   15000:	add	r8, r8, #3
   15004:	mov	r1, r7
   15008:	str	r7, [sp, #32]
   1500c:	str	r7, [sp, #76]	; 0x4c
   15010:	str	r3, [sp, #36]	; 0x24
   15014:	mov	r4, #39	; 0x27
   15018:	b	148e8 <__assert_fail@plt+0x37fc>
   1501c:	mov	r6, #0
   15020:	b	14aac <__assert_fail@plt+0x39c0>
   15024:	mov	r6, #0
   15028:	b	14ca0 <__assert_fail@plt+0x3bb4>
   1502c:	mov	r6, #0
   15030:	b	14cc0 <__assert_fail@plt+0x3bd4>
   15034:	str	r7, [sp, #32]
   15038:	mov	r6, #0
   1503c:	b	14cc8 <__assert_fail@plt+0x3bdc>
   15040:	mov	r6, #0
   15044:	b	14cf0 <__assert_fail@plt+0x3c04>
   15048:	mov	r6, #0
   1504c:	b	14abc <__assert_fail@plt+0x39d0>
   15050:	mov	r6, #0
   15054:	b	14b84 <__assert_fail@plt+0x3a98>
   15058:	mov	r6, #0
   1505c:	b	14b54 <__assert_fail@plt+0x3a68>
   15060:	mov	r6, #0
   15064:	mov	r3, #116	; 0x74
   15068:	b	14b5c <__assert_fail@plt+0x3a70>
   1506c:	mov	r6, #0
   15070:	b	14b98 <__assert_fail@plt+0x3aac>
   15074:	mov	r6, #0
   15078:	b	14bac <__assert_fail@plt+0x3ac0>
   1507c:	ldr	r3, [sp, #56]	; 0x38
   15080:	mov	r6, #0
   15084:	cmp	r3, #0
   15088:	bne	14bcc <__assert_fail@plt+0x3ae0>
   1508c:	ldr	r3, [sp, #96]	; 0x60
   15090:	cmp	r3, #0
   15094:	addne	sl, sl, #1
   15098:	bne	14440 <__assert_fail@plt+0x3354>
   1509c:	ldr	r1, [sp, #52]	; 0x34
   150a0:	str	r3, [sp, #32]
   150a4:	mov	r4, r3
   150a8:	b	148e8 <__assert_fail@plt+0x37fc>
   150ac:	mov	r6, #0
   150b0:	ldr	r3, [sp, #80]	; 0x50
   150b4:	cmp	r3, #1
   150b8:	bne	152a8 <__assert_fail@plt+0x41bc>
   150bc:	bl	10fb4 <__ctype_b_loc@plt>
   150c0:	ldr	r2, [sp, #80]	; 0x50
   150c4:	sxth	r3, r4
   150c8:	mov	r1, r2
   150cc:	lsl	r3, r3, #1
   150d0:	ldr	r2, [r0]
   150d4:	ldrh	r3, [r2, r3]
   150d8:	and	r3, r3, #16384	; 0x4000
   150dc:	cmp	r3, #0
   150e0:	movne	r3, #1
   150e4:	moveq	r3, #0
   150e8:	str	r3, [sp, #32]
   150ec:	moveq	r3, #1
   150f0:	movne	r3, #0
   150f4:	ldr	r2, [sp, #56]	; 0x38
   150f8:	and	r3, r3, r2
   150fc:	ands	r3, r3, #255	; 0xff
   15100:	beq	14cd4 <__assert_fail@plt+0x3be8>
   15104:	add	r1, sl, r1
   15108:	mov	r0, #0
   1510c:	ldr	r7, [sp, #40]	; 0x28
   15110:	ldr	r2, [sp, #36]	; 0x24
   15114:	ldr	lr, [sp, #52]	; 0x34
   15118:	b	151c8 <__assert_fail@plt+0x40dc>
   1511c:	cmp	r7, #0
   15120:	bne	1551c <__assert_fail@plt+0x4430>
   15124:	eor	r0, r2, #1
   15128:	ands	r0, lr, r0
   1512c:	beq	15164 <__assert_fail@plt+0x4078>
   15130:	cmp	fp, r8
   15134:	movhi	r2, #39	; 0x27
   15138:	strbhi	r2, [r9, r8]
   1513c:	add	r2, r8, #1
   15140:	cmp	fp, r2
   15144:	movhi	ip, #36	; 0x24
   15148:	strbhi	ip, [r9, r2]
   1514c:	add	r2, r8, #2
   15150:	cmp	fp, r2
   15154:	movhi	ip, #39	; 0x27
   15158:	strbhi	ip, [r9, r2]
   1515c:	add	r8, r8, #3
   15160:	mov	r2, r0
   15164:	cmp	fp, r8
   15168:	movhi	r0, #92	; 0x5c
   1516c:	strbhi	r0, [r9, r8]
   15170:	add	r0, r8, #1
   15174:	cmp	fp, r0
   15178:	lsrhi	ip, r4, #6
   1517c:	addhi	ip, ip, #48	; 0x30
   15180:	strbhi	ip, [r9, r0]
   15184:	add	ip, r8, #2
   15188:	cmp	fp, ip
   1518c:	lsrhi	r0, r4, #3
   15190:	andhi	r0, r0, #7
   15194:	addhi	r0, r0, #48	; 0x30
   15198:	add	sl, sl, #1
   1519c:	strbhi	r0, [r9, ip]
   151a0:	and	r4, r4, #7
   151a4:	cmp	sl, r1
   151a8:	add	r4, r4, #48	; 0x30
   151ac:	add	r8, r8, #3
   151b0:	bcs	15534 <__assert_fail@plt+0x4448>
   151b4:	mov	r0, r3
   151b8:	cmp	fp, r8
   151bc:	strbhi	r4, [r9, r8]
   151c0:	ldrb	r4, [r5, #1]!
   151c4:	add	r8, r8, #1
   151c8:	cmp	r3, #0
   151cc:	bne	1511c <__assert_fail@plt+0x4030>
   151d0:	cmp	r6, #0
   151d4:	bne	15278 <__assert_fail@plt+0x418c>
   151d8:	eor	r6, r0, #1
   151dc:	and	r6, r6, r2
   151e0:	add	sl, sl, #1
   151e4:	cmp	r1, sl
   151e8:	uxtb	r6, r6
   151ec:	bls	152a0 <__assert_fail@plt+0x41b4>
   151f0:	cmp	r6, #0
   151f4:	beq	151b8 <__assert_fail@plt+0x40cc>
   151f8:	cmp	fp, r8
   151fc:	movhi	r2, #39	; 0x27
   15200:	strbhi	r2, [r9, r8]
   15204:	add	r2, r8, #1
   15208:	cmp	fp, r2
   1520c:	movhi	ip, #39	; 0x27
   15210:	strbhi	ip, [r9, r2]
   15214:	add	r8, r8, #2
   15218:	mov	r6, r3
   1521c:	mov	r2, r3
   15220:	b	151b8 <__assert_fail@plt+0x40cc>
   15224:	ldr	r3, [sp, #184]	; 0xb8
   15228:	cmp	r3, #0
   1522c:	beq	14904 <__assert_fail@plt+0x3818>
   15230:	lsr	r2, r4, #5
   15234:	mov	r0, r3
   15238:	uxtb	r2, r2
   1523c:	and	r3, r4, #31
   15240:	ldr	r2, [r0, r2, lsl #2]
   15244:	lsr	r3, r2, r3
   15248:	tst	r3, #1
   1524c:	beq	14904 <__assert_fail@plt+0x3818>
   15250:	ldr	r3, [sp, #40]	; 0x28
   15254:	cmp	r3, #0
   15258:	beq	14af0 <__assert_fail@plt+0x3a04>
   1525c:	mov	r3, r1
   15260:	str	r3, [sp, #64]	; 0x40
   15264:	mov	sl, r9
   15268:	ldr	r3, [sp, #56]	; 0x38
   1526c:	mov	r9, fp
   15270:	ldr	r2, [sp, #64]	; 0x40
   15274:	b	15464 <__assert_fail@plt+0x4378>
   15278:	cmp	fp, r8
   1527c:	eor	r6, r0, #1
   15280:	movhi	ip, #92	; 0x5c
   15284:	and	r6, r6, r2
   15288:	add	sl, sl, #1
   1528c:	strbhi	ip, [r9, r8]
   15290:	cmp	r1, sl
   15294:	add	r8, r8, #1
   15298:	uxtb	r6, r6
   1529c:	bhi	151f0 <__assert_fail@plt+0x4104>
   152a0:	str	r2, [sp, #36]	; 0x24
   152a4:	b	1491c <__assert_fail@plt+0x3830>
   152a8:	ldr	r3, [sp, #24]
   152ac:	cmn	r3, #1
   152b0:	mov	r3, #0
   152b4:	str	r3, [sp, #128]	; 0x80
   152b8:	str	r3, [sp, #132]	; 0x84
   152bc:	beq	155b0 <__assert_fail@plt+0x44c4>
   152c0:	mov	r2, r7
   152c4:	mov	r3, #0
   152c8:	str	r7, [sp, #104]	; 0x68
   152cc:	str	r5, [sp, #116]	; 0x74
   152d0:	mov	r7, r3
   152d4:	mov	r5, r2
   152d8:	str	r4, [sp, #32]
   152dc:	str	r6, [sp, #108]	; 0x6c
   152e0:	str	r8, [sp, #112]	; 0x70
   152e4:	ldr	r3, [sp, #44]	; 0x2c
   152e8:	add	r6, sl, r7
   152ec:	add	r4, r3, r6
   152f0:	ldr	r3, [sp, #24]
   152f4:	mov	r1, r4
   152f8:	sub	r2, r3, r6
   152fc:	add	r0, sp, #124	; 0x7c
   15300:	add	r3, sp, #128	; 0x80
   15304:	bl	1ac08 <__assert_fail@plt+0x9b1c>
   15308:	subs	r8, r0, #0
   1530c:	beq	15694 <__assert_fail@plt+0x45a8>
   15310:	cmn	r8, #1
   15314:	beq	1566c <__assert_fail@plt+0x4580>
   15318:	cmn	r8, #2
   1531c:	beq	15604 <__assert_fail@plt+0x4518>
   15320:	ldr	r3, [sp, #64]	; 0x40
   15324:	cmp	r3, #0
   15328:	beq	153e8 <__assert_fail@plt+0x42fc>
   1532c:	cmp	r8, #1
   15330:	beq	153e8 <__assert_fail@plt+0x42fc>
   15334:	sub	r3, r8, #1
   15338:	add	r6, r3, r6
   1533c:	ldr	r3, [sp, #44]	; 0x2c
   15340:	add	r6, r3, r6
   15344:	ldrb	r3, [r4, #1]!
   15348:	sub	r3, r3, #91	; 0x5b
   1534c:	cmp	r3, #33	; 0x21
   15350:	ldrls	pc, [pc, r3, lsl #2]
   15354:	b	153e0 <__assert_fail@plt+0x42f4>
   15358:	andeq	r5, r1, ip, asr #8
   1535c:	andeq	r5, r1, ip, asr #8
   15360:	andeq	r5, r1, r0, ror #7
   15364:	andeq	r5, r1, ip, asr #8
   15368:	andeq	r5, r1, r0, ror #7
   1536c:	andeq	r5, r1, ip, asr #8
   15370:	andeq	r5, r1, r0, ror #7
   15374:	andeq	r5, r1, r0, ror #7
   15378:	andeq	r5, r1, r0, ror #7
   1537c:	andeq	r5, r1, r0, ror #7
   15380:	andeq	r5, r1, r0, ror #7
   15384:	andeq	r5, r1, r0, ror #7
   15388:	andeq	r5, r1, r0, ror #7
   1538c:	andeq	r5, r1, r0, ror #7
   15390:	andeq	r5, r1, r0, ror #7
   15394:	andeq	r5, r1, r0, ror #7
   15398:	andeq	r5, r1, r0, ror #7
   1539c:	andeq	r5, r1, r0, ror #7
   153a0:	andeq	r5, r1, r0, ror #7
   153a4:	andeq	r5, r1, r0, ror #7
   153a8:	andeq	r5, r1, r0, ror #7
   153ac:	andeq	r5, r1, r0, ror #7
   153b0:	andeq	r5, r1, r0, ror #7
   153b4:	andeq	r5, r1, r0, ror #7
   153b8:	andeq	r5, r1, r0, ror #7
   153bc:	andeq	r5, r1, r0, ror #7
   153c0:	andeq	r5, r1, r0, ror #7
   153c4:	andeq	r5, r1, r0, ror #7
   153c8:	andeq	r5, r1, r0, ror #7
   153cc:	andeq	r5, r1, r0, ror #7
   153d0:	andeq	r5, r1, r0, ror #7
   153d4:	andeq	r5, r1, r0, ror #7
   153d8:	andeq	r5, r1, r0, ror #7
   153dc:	andeq	r5, r1, ip, asr #8
   153e0:	cmp	r6, r4
   153e4:	bne	15344 <__assert_fail@plt+0x4258>
   153e8:	ldr	r0, [sp, #124]	; 0x7c
   153ec:	bl	10f0c <iswprint@plt>
   153f0:	add	r7, r7, r8
   153f4:	cmp	r0, #0
   153f8:	add	r0, sp, #128	; 0x80
   153fc:	moveq	r5, #0
   15400:	bl	10eb8 <mbsinit@plt>
   15404:	cmp	r0, #0
   15408:	beq	152e4 <__assert_fail@plt+0x41f8>
   1540c:	ldr	r4, [sp, #32]
   15410:	str	r5, [sp, #32]
   15414:	ldr	r3, [sp, #32]
   15418:	mov	r1, r7
   1541c:	eor	r3, r3, #1
   15420:	ldr	r7, [sp, #104]	; 0x68
   15424:	ldr	r6, [sp, #108]	; 0x6c
   15428:	ldr	r8, [sp, #112]	; 0x70
   1542c:	ldr	r5, [sp, #116]	; 0x74
   15430:	uxtb	r3, r3
   15434:	cmp	r1, #1
   15438:	bls	150f4 <__assert_fail@plt+0x4008>
   1543c:	ldr	r2, [sp, #56]	; 0x38
   15440:	and	r3, r3, r2
   15444:	uxtb	r3, r3
   15448:	b	15104 <__assert_fail@plt+0x4018>
   1544c:	mov	r3, #2
   15450:	str	r3, [sp, #176]	; 0xb0
   15454:	ldr	r2, [sp, #64]	; 0x40
   15458:	ldr	r3, [sp, #56]	; 0x38
   1545c:	mov	sl, r9
   15460:	mov	r9, fp
   15464:	and	r3, r3, r2
   15468:	tst	r3, #255	; 0xff
   1546c:	ldr	r3, [sp, #176]	; 0xb0
   15470:	movne	r3, #4
   15474:	str	r3, [sp, #176]	; 0xb0
   15478:	ldr	r3, [sp, #180]	; 0xb4
   1547c:	mov	ip, #0
   15480:	bic	r3, r3, #2
   15484:	str	r3, [sp, #4]
   15488:	ldr	r3, [sp, #192]	; 0xc0
   1548c:	ldr	r2, [sp, #44]	; 0x2c
   15490:	str	r3, [sp, #16]
   15494:	ldr	r3, [sp, #188]	; 0xbc
   15498:	mov	r1, r9
   1549c:	str	r3, [sp, #12]
   154a0:	ldr	r3, [sp, #176]	; 0xb0
   154a4:	mov	r0, sl
   154a8:	str	r3, [sp]
   154ac:	str	ip, [sp, #8]
   154b0:	ldr	r3, [sp, #24]
   154b4:	bl	14314 <__assert_fail@plt+0x3228>
   154b8:	mov	fp, r0
   154bc:	mov	r0, fp
   154c0:	add	sp, sp, #140	; 0x8c
   154c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154c8:	mov	r4, #92	; 0x5c
   154cc:	mov	r1, #0
   154d0:	mov	r3, r4
   154d4:	b	14ac8 <__assert_fail@plt+0x39dc>
   154d8:	mov	r3, #0
   154dc:	ldr	r1, [sp, #52]	; 0x34
   154e0:	str	r3, [sp, #32]
   154e4:	mov	r4, #63	; 0x3f
   154e8:	b	148e8 <__assert_fail@plt+0x37fc>
   154ec:	cmp	fp, #0
   154f0:	beq	1554c <__assert_fail@plt+0x4460>
   154f4:	mov	r3, #39	; 0x27
   154f8:	strb	r3, [r9]
   154fc:	mov	r3, #0
   15500:	str	r3, [sp, #40]	; 0x28
   15504:	mov	r3, #1
   15508:	str	r3, [sp, #68]	; 0x44
   1550c:	ldr	r3, [pc, #448]	; 156d4 <__assert_fail@plt+0x45e8>
   15510:	mov	r8, #1
   15514:	str	r3, [sp, #72]	; 0x48
   15518:	b	146fc <__assert_fail@plt+0x3610>
   1551c:	ldr	r3, [sp, #40]	; 0x28
   15520:	mov	sl, r9
   15524:	str	r3, [sp, #56]	; 0x38
   15528:	mov	r9, fp
   1552c:	ldr	r2, [sp, #64]	; 0x40
   15530:	b	15464 <__assert_fail@plt+0x4378>
   15534:	str	r2, [sp, #36]	; 0x24
   15538:	b	1494c <__assert_fail@plt+0x3860>
   1553c:	mov	r1, #0
   15540:	str	r3, [sp, #32]
   15544:	mov	r4, #63	; 0x3f
   15548:	b	148e8 <__assert_fail@plt+0x37fc>
   1554c:	ldr	r3, [pc, #384]	; 156d4 <__assert_fail@plt+0x45e8>
   15550:	str	r3, [sp, #72]	; 0x48
   15554:	mov	r3, #0
   15558:	str	r3, [sp, #40]	; 0x28
   1555c:	mov	r3, #1
   15560:	str	r3, [sp, #68]	; 0x44
   15564:	mov	r8, r3
   15568:	b	146fc <__assert_fail@plt+0x3610>
   1556c:	bl	110d4 <abort@plt>
   15570:	cmp	fp, #0
   15574:	beq	155d4 <__assert_fail@plt+0x44e8>
   15578:	mov	r2, #1
   1557c:	mov	r3, #34	; 0x22
   15580:	strb	r3, [r9]
   15584:	mov	r8, r2
   15588:	mov	r3, r2
   1558c:	str	r2, [sp, #68]	; 0x44
   15590:	str	r3, [sp, #56]	; 0x38
   15594:	ldr	r3, [pc, #316]	; 156d8 <__assert_fail@plt+0x45ec>
   15598:	ldr	r1, [sp, #56]	; 0x38
   1559c:	str	r3, [sp, #72]	; 0x48
   155a0:	ldr	r2, [sp, #176]	; 0xb0
   155a4:	ldr	ip, [sp, #40]	; 0x28
   155a8:	ldr	lr, [sp, #176]	; 0xb0
   155ac:	b	143e0 <__assert_fail@plt+0x32f4>
   155b0:	ldr	r0, [sp, #44]	; 0x2c
   155b4:	bl	10fd8 <strlen@plt>
   155b8:	str	r0, [sp, #24]
   155bc:	b	152c0 <__assert_fail@plt+0x41d4>
   155c0:	mov	r7, #0
   155c4:	ldr	r1, [sp, #52]	; 0x34
   155c8:	str	r3, [sp, #32]
   155cc:	mov	r4, #48	; 0x30
   155d0:	b	148e8 <__assert_fail@plt+0x37fc>
   155d4:	mov	r3, #1
   155d8:	str	r3, [sp, #68]	; 0x44
   155dc:	mov	r8, r3
   155e0:	b	15590 <__assert_fail@plt+0x44a4>
   155e4:	mov	r3, #2
   155e8:	mov	sl, r9
   155ec:	str	r3, [sp, #176]	; 0xb0
   155f0:	mov	r9, fp
   155f4:	ldr	r3, [sp, #56]	; 0x38
   155f8:	b	15464 <__assert_fail@plt+0x4378>
   155fc:	ldr	r6, [sp, #48]	; 0x30
   15600:	b	150b0 <__assert_fail@plt+0x3fc4>
   15604:	ldr	r0, [sp, #24]
   15608:	mov	ip, r6
   1560c:	cmp	r0, ip
   15610:	mov	r1, r7
   15614:	mov	r2, r4
   15618:	ldr	r7, [sp, #104]	; 0x68
   1561c:	ldr	r4, [sp, #32]
   15620:	ldr	r6, [sp, #108]	; 0x6c
   15624:	ldr	r8, [sp, #112]	; 0x70
   15628:	ldr	r5, [sp, #116]	; 0x74
   1562c:	bls	1565c <__assert_fail@plt+0x4570>
   15630:	ldrb	r3, [r2]
   15634:	cmp	r3, #0
   15638:	bne	1564c <__assert_fail@plt+0x4560>
   1563c:	b	1576c <__assert_fail@plt+0x4680>
   15640:	ldrb	r3, [r2, #1]!
   15644:	cmp	r3, #0
   15648:	beq	1576c <__assert_fail@plt+0x4680>
   1564c:	add	r1, r1, #1
   15650:	add	r3, sl, r1
   15654:	cmp	r0, r3
   15658:	bhi	15640 <__assert_fail@plt+0x4554>
   1565c:	mov	r2, #0
   15660:	mov	r3, r7
   15664:	str	r2, [sp, #32]
   15668:	b	15434 <__assert_fail@plt+0x4348>
   1566c:	mov	r1, r7
   15670:	ldr	r7, [sp, #104]	; 0x68
   15674:	mov	r2, #0
   15678:	ldr	r4, [sp, #32]
   1567c:	ldr	r6, [sp, #108]	; 0x6c
   15680:	ldr	r8, [sp, #112]	; 0x70
   15684:	ldr	r5, [sp, #116]	; 0x74
   15688:	mov	r3, r7
   1568c:	str	r2, [sp, #32]
   15690:	b	15434 <__assert_fail@plt+0x4348>
   15694:	mov	r3, r5
   15698:	eor	r3, r3, #1
   1569c:	ldr	r4, [sp, #32]
   156a0:	mov	r1, r7
   156a4:	str	r5, [sp, #32]
   156a8:	ldr	r7, [sp, #104]	; 0x68
   156ac:	ldr	r6, [sp, #108]	; 0x6c
   156b0:	ldr	r8, [sp, #112]	; 0x70
   156b4:	ldr	r5, [sp, #116]	; 0x74
   156b8:	uxtb	r3, r3
   156bc:	b	15434 <__assert_fail@plt+0x4348>
   156c0:	mov	sl, r9
   156c4:	str	r3, [sp, #56]	; 0x38
   156c8:	mov	r9, fp
   156cc:	ldr	r2, [sp, #64]	; 0x40
   156d0:	b	15464 <__assert_fail@plt+0x4378>
   156d4:	andeq	ip, r1, ip, ror r1
   156d8:	andeq	ip, r1, r8, ror r1
   156dc:	andeq	ip, r1, r0, lsl #3
   156e0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   156e4:	ldr	r2, [sp, #44]	; 0x2c
   156e8:	ldrb	r1, [r2, r3]
   156ec:	sub	r2, r1, #33	; 0x21
   156f0:	uxtb	r2, r2
   156f4:	cmp	r2, #29
   156f8:	bhi	15778 <__assert_fail@plt+0x468c>
   156fc:	ldr	r0, [pc, #-36]	; 156e0 <__assert_fail@plt+0x45f4>
   15700:	mov	ip, #1
   15704:	ands	r2, r0, ip, lsl r2
   15708:	beq	15798 <__assert_fail@plt+0x46ac>
   1570c:	ldr	r2, [sp, #40]	; 0x28
   15710:	cmp	r2, #0
   15714:	bne	1588c <__assert_fail@plt+0x47a0>
   15718:	add	r2, r8, #1
   1571c:	cmp	fp, r8
   15720:	strbhi	r4, [r9, r8]
   15724:	cmp	fp, r2
   15728:	movhi	r0, #34	; 0x22
   1572c:	strbhi	r0, [r9, r2]
   15730:	add	r2, r8, #2
   15734:	cmp	fp, r2
   15738:	movhi	r0, #34	; 0x22
   1573c:	strbhi	r0, [r9, r2]
   15740:	add	r2, r8, #3
   15744:	cmp	fp, r2
   15748:	mov	sl, r3
   1574c:	ldr	r3, [sp, #40]	; 0x28
   15750:	movhi	r0, #63	; 0x3f
   15754:	mov	r4, r1
   15758:	strbhi	r0, [r9, r2]
   1575c:	add	r8, r8, #4
   15760:	mov	r1, r3
   15764:	str	r3, [sp, #32]
   15768:	b	148e8 <__assert_fail@plt+0x37fc>
   1576c:	str	r3, [sp, #32]
   15770:	mov	r3, r7
   15774:	b	15434 <__assert_fail@plt+0x4348>
   15778:	mov	r1, #0
   1577c:	str	r1, [sp, #32]
   15780:	b	148e8 <__assert_fail@plt+0x37fc>
   15784:	mov	sl, r9
   15788:	ldr	r3, [sp, #56]	; 0x38
   1578c:	mov	r9, fp
   15790:	ldr	r2, [sp, #64]	; 0x40
   15794:	b	15464 <__assert_fail@plt+0x4378>
   15798:	str	r2, [sp, #32]
   1579c:	mov	r1, #0
   157a0:	b	148e8 <__assert_fail@plt+0x37fc>
   157a4:	ldr	r2, [sp, #76]	; 0x4c
   157a8:	mov	sl, r9
   157ac:	mov	r9, fp
   157b0:	mov	fp, r8
   157b4:	ldr	r1, [sp, #72]	; 0x48
   157b8:	cmp	r1, #0
   157bc:	moveq	r3, #0
   157c0:	andne	r3, r2, #1
   157c4:	cmp	r3, #0
   157c8:	beq	157f4 <__assert_fail@plt+0x4708>
   157cc:	ldrb	r3, [r1]
   157d0:	cmp	r3, #0
   157d4:	beq	157f4 <__assert_fail@plt+0x4708>
   157d8:	mov	r2, r1
   157dc:	cmp	r9, fp
   157e0:	strbhi	r3, [sl, fp]
   157e4:	ldrb	r3, [r2, #1]!
   157e8:	add	fp, fp, #1
   157ec:	cmp	r3, #0
   157f0:	bne	157dc <__assert_fail@plt+0x46f0>
   157f4:	cmp	r9, fp
   157f8:	movhi	r3, #0
   157fc:	strbhi	r3, [sl, fp]
   15800:	b	154bc <__assert_fail@plt+0x43d0>
   15804:	ldr	r3, [sp, #192]	; 0xc0
   15808:	mov	ip, #5
   1580c:	str	r3, [sp, #16]
   15810:	ldr	r3, [sp, #188]	; 0xbc
   15814:	ldr	r2, [sp, #44]	; 0x2c
   15818:	str	r3, [sp, #12]
   1581c:	ldr	r3, [sp, #184]	; 0xb8
   15820:	ldr	r1, [sp, #84]	; 0x54
   15824:	str	r3, [sp, #8]
   15828:	ldr	r3, [sp, #180]	; 0xb4
   1582c:	mov	r0, r9
   15830:	str	r3, [sp, #4]
   15834:	str	ip, [sp]
   15838:	ldr	r3, [sp, #24]
   1583c:	bl	14314 <__assert_fail@plt+0x3228>
   15840:	mov	fp, r0
   15844:	b	154bc <__assert_fail@plt+0x43d0>
   15848:	mov	sl, r9
   1584c:	mov	r9, fp
   15850:	mov	fp, r8
   15854:	b	157b4 <__assert_fail@plt+0x46c8>
   15858:	ldr	r1, [sp, #176]	; 0xb0
   1585c:	bl	141f4 <__assert_fail@plt+0x3108>
   15860:	str	r0, [sp, #192]	; 0xc0
   15864:	b	147d0 <__assert_fail@plt+0x36e4>
   15868:	ldr	r1, [sp, #176]	; 0xb0
   1586c:	bl	141f4 <__assert_fail@plt+0x3108>
   15870:	str	r0, [sp, #188]	; 0xbc
   15874:	b	147b0 <__assert_fail@plt+0x36c4>
   15878:	mov	sl, r9
   1587c:	mov	r2, r3
   15880:	mov	r9, fp
   15884:	mov	fp, r8
   15888:	b	157b4 <__assert_fail@plt+0x46c8>
   1588c:	mov	sl, r9
   15890:	mov	r9, fp
   15894:	b	15478 <__assert_fail@plt+0x438c>
   15898:	push	{r4, r5, r6, lr}
   1589c:	mov	r5, r0
   158a0:	bl	10ff0 <__errno_location@plt>
   158a4:	cmp	r5, #0
   158a8:	mov	r1, #48	; 0x30
   158ac:	mov	r4, r0
   158b0:	ldr	r0, [pc, #16]	; 158c8 <__assert_fail@plt+0x47dc>
   158b4:	ldr	r6, [r4]
   158b8:	movne	r0, r5
   158bc:	bl	191d8 <__assert_fail@plt+0x80ec>
   158c0:	str	r6, [r4]
   158c4:	pop	{r4, r5, r6, pc}
   158c8:	andeq	sp, r2, r4, lsl #4
   158cc:	ldr	r3, [pc, #12]	; 158e0 <__assert_fail@plt+0x47f4>
   158d0:	cmp	r0, #0
   158d4:	moveq	r0, r3
   158d8:	ldr	r0, [r0]
   158dc:	bx	lr
   158e0:	andeq	sp, r2, r4, lsl #4
   158e4:	ldr	r3, [pc, #12]	; 158f8 <__assert_fail@plt+0x480c>
   158e8:	cmp	r0, #0
   158ec:	moveq	r0, r3
   158f0:	str	r1, [r0]
   158f4:	bx	lr
   158f8:	andeq	sp, r2, r4, lsl #4
   158fc:	ldr	r3, [pc, #52]	; 15938 <__assert_fail@plt+0x484c>
   15900:	cmp	r0, #0
   15904:	moveq	r0, r3
   15908:	add	r3, r0, #8
   1590c:	push	{lr}		; (str lr, [sp, #-4]!)
   15910:	lsr	lr, r1, #5
   15914:	and	r1, r1, #31
   15918:	ldr	ip, [r3, lr, lsl #2]
   1591c:	lsr	r0, ip, r1
   15920:	eor	r2, r2, r0
   15924:	and	r2, r2, #1
   15928:	and	r0, r0, #1
   1592c:	eor	r1, ip, r2, lsl r1
   15930:	str	r1, [r3, lr, lsl #2]
   15934:	pop	{pc}		; (ldr pc, [sp], #4)
   15938:	andeq	sp, r2, r4, lsl #4
   1593c:	ldr	r3, [pc, #16]	; 15954 <__assert_fail@plt+0x4868>
   15940:	cmp	r0, #0
   15944:	movne	r3, r0
   15948:	ldr	r0, [r3, #4]
   1594c:	str	r1, [r3, #4]
   15950:	bx	lr
   15954:	andeq	sp, r2, r4, lsl #4
   15958:	ldr	r3, [pc, #44]	; 1598c <__assert_fail@plt+0x48a0>
   1595c:	cmp	r0, #0
   15960:	moveq	r0, r3
   15964:	mov	ip, #10
   15968:	cmp	r2, #0
   1596c:	cmpne	r1, #0
   15970:	str	ip, [r0]
   15974:	beq	15984 <__assert_fail@plt+0x4898>
   15978:	str	r1, [r0, #40]	; 0x28
   1597c:	str	r2, [r0, #44]	; 0x2c
   15980:	bx	lr
   15984:	push	{r4, lr}
   15988:	bl	110d4 <abort@plt>
   1598c:	andeq	sp, r2, r4, lsl #4
   15990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15994:	sub	sp, sp, #24
   15998:	ldr	ip, [pc, #108]	; 15a0c <__assert_fail@plt+0x4920>
   1599c:	ldr	r4, [sp, #56]	; 0x38
   159a0:	mov	r9, r2
   159a4:	cmp	r4, #0
   159a8:	moveq	r4, ip
   159ac:	mov	sl, r3
   159b0:	mov	r7, r0
   159b4:	mov	r8, r1
   159b8:	bl	10ff0 <__errno_location@plt>
   159bc:	ldr	r3, [r4, #44]	; 0x2c
   159c0:	mov	r1, r8
   159c4:	ldr	r6, [r0]
   159c8:	str	r3, [sp, #16]
   159cc:	ldr	r2, [r4, #40]	; 0x28
   159d0:	add	r3, r4, #8
   159d4:	str	r3, [sp, #8]
   159d8:	str	r2, [sp, #12]
   159dc:	ldr	r2, [r4, #4]
   159e0:	mov	r5, r0
   159e4:	str	r2, [sp, #4]
   159e8:	ldr	ip, [r4]
   159ec:	mov	r3, sl
   159f0:	mov	r2, r9
   159f4:	mov	r0, r7
   159f8:	str	ip, [sp]
   159fc:	bl	14314 <__assert_fail@plt+0x3228>
   15a00:	str	r6, [r5]
   15a04:	add	sp, sp, #24
   15a08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a0c:	andeq	sp, r2, r4, lsl #4
   15a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a14:	cmp	r2, #0
   15a18:	sub	sp, sp, #36	; 0x24
   15a1c:	ldr	r4, [pc, #164]	; 15ac8 <__assert_fail@plt+0x49dc>
   15a20:	mov	r8, r1
   15a24:	movne	r4, r2
   15a28:	mov	r7, r0
   15a2c:	bl	10ff0 <__errno_location@plt>
   15a30:	ldr	r3, [r4, #44]	; 0x2c
   15a34:	ldr	r5, [r4, #4]
   15a38:	add	r9, r4, #8
   15a3c:	orr	r5, r5, #1
   15a40:	mov	r1, #0
   15a44:	mov	r2, r7
   15a48:	ldr	fp, [r0]
   15a4c:	str	r3, [sp, #16]
   15a50:	ldr	r3, [r4, #40]	; 0x28
   15a54:	stmib	sp, {r5, r9}
   15a58:	str	r3, [sp, #12]
   15a5c:	ldr	r3, [r4]
   15a60:	mov	r6, r0
   15a64:	str	r3, [sp]
   15a68:	mov	r0, r1
   15a6c:	mov	r3, r8
   15a70:	bl	14314 <__assert_fail@plt+0x3228>
   15a74:	add	r1, r0, #1
   15a78:	mov	r0, r1
   15a7c:	str	r1, [sp, #28]
   15a80:	bl	18c94 <__assert_fail@plt+0x7ba8>
   15a84:	ldr	r3, [r4, #44]	; 0x2c
   15a88:	ldr	r1, [sp, #28]
   15a8c:	str	r3, [sp, #16]
   15a90:	ldr	r3, [r4, #40]	; 0x28
   15a94:	str	r5, [sp, #4]
   15a98:	str	r3, [sp, #12]
   15a9c:	str	r9, [sp, #8]
   15aa0:	ldr	ip, [r4]
   15aa4:	mov	r3, r8
   15aa8:	mov	r2, r7
   15aac:	str	ip, [sp]
   15ab0:	mov	sl, r0
   15ab4:	bl	14314 <__assert_fail@plt+0x3228>
   15ab8:	mov	r0, sl
   15abc:	str	fp, [r6]
   15ac0:	add	sp, sp, #36	; 0x24
   15ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac8:	andeq	sp, r2, r4, lsl #4
   15acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ad0:	cmp	r3, #0
   15ad4:	sub	sp, sp, #44	; 0x2c
   15ad8:	ldr	r4, [pc, #192]	; 15ba0 <__assert_fail@plt+0x4ab4>
   15adc:	mov	r6, r2
   15ae0:	movne	r4, r3
   15ae4:	mov	r9, r1
   15ae8:	mov	r8, r0
   15aec:	bl	10ff0 <__errno_location@plt>
   15af0:	ldr	r3, [r4, #44]	; 0x2c
   15af4:	ldr	r5, [r4, #4]
   15af8:	add	sl, r4, #8
   15afc:	cmp	r6, #0
   15b00:	orreq	r5, r5, #1
   15b04:	mov	r1, #0
   15b08:	ldr	r2, [r0]
   15b0c:	str	r3, [sp, #16]
   15b10:	ldr	r3, [r4, #40]	; 0x28
   15b14:	stmib	sp, {r5, sl}
   15b18:	str	r3, [sp, #12]
   15b1c:	ldr	r3, [r4]
   15b20:	mov	r7, r0
   15b24:	str	r2, [sp, #28]
   15b28:	str	r3, [sp]
   15b2c:	mov	r2, r8
   15b30:	mov	r3, r9
   15b34:	mov	r0, r1
   15b38:	bl	14314 <__assert_fail@plt+0x3228>
   15b3c:	add	r1, r0, #1
   15b40:	mov	fp, r0
   15b44:	mov	r0, r1
   15b48:	str	r1, [sp, #36]	; 0x24
   15b4c:	bl	18c94 <__assert_fail@plt+0x7ba8>
   15b50:	ldr	r3, [r4, #44]	; 0x2c
   15b54:	mov	r2, r8
   15b58:	str	r3, [sp, #16]
   15b5c:	ldr	r3, [r4, #40]	; 0x28
   15b60:	str	r5, [sp, #4]
   15b64:	str	r3, [sp, #12]
   15b68:	str	sl, [sp, #8]
   15b6c:	ldr	ip, [r4]
   15b70:	ldr	r1, [sp, #36]	; 0x24
   15b74:	mov	r3, r9
   15b78:	str	ip, [sp]
   15b7c:	str	r0, [sp, #32]
   15b80:	bl	14314 <__assert_fail@plt+0x3228>
   15b84:	ldr	r2, [sp, #28]
   15b88:	cmp	r6, #0
   15b8c:	str	r2, [r7]
   15b90:	ldr	r0, [sp, #32]
   15b94:	strne	fp, [r6]
   15b98:	add	sp, sp, #44	; 0x2c
   15b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba0:	andeq	sp, r2, r4, lsl #4
   15ba4:	push	{r4, r5, r6, r7, r8, lr}
   15ba8:	ldr	r6, [pc, #116]	; 15c24 <__assert_fail@plt+0x4b38>
   15bac:	ldr	r3, [r6, #4]
   15bb0:	ldr	r7, [r6]
   15bb4:	cmp	r3, #1
   15bb8:	movgt	r5, r7
   15bbc:	movgt	r4, #1
   15bc0:	ble	15be0 <__assert_fail@plt+0x4af4>
   15bc4:	ldr	r0, [r5, #12]
   15bc8:	bl	13d58 <__assert_fail@plt+0x2c6c>
   15bcc:	ldr	r3, [r6, #4]
   15bd0:	add	r4, r4, #1
   15bd4:	cmp	r3, r4
   15bd8:	add	r5, r5, #8
   15bdc:	bgt	15bc4 <__assert_fail@plt+0x4ad8>
   15be0:	ldr	r0, [r7, #4]
   15be4:	ldr	r4, [pc, #60]	; 15c28 <__assert_fail@plt+0x4b3c>
   15be8:	cmp	r0, r4
   15bec:	beq	15c00 <__assert_fail@plt+0x4b14>
   15bf0:	bl	13d58 <__assert_fail@plt+0x2c6c>
   15bf4:	mov	r3, #256	; 0x100
   15bf8:	str	r4, [r6, #12]
   15bfc:	str	r3, [r6, #8]
   15c00:	ldr	r4, [pc, #36]	; 15c2c <__assert_fail@plt+0x4b40>
   15c04:	cmp	r7, r4
   15c08:	beq	15c18 <__assert_fail@plt+0x4b2c>
   15c0c:	mov	r0, r7
   15c10:	bl	13d58 <__assert_fail@plt+0x2c6c>
   15c14:	str	r4, [r6]
   15c18:	mov	r3, #1
   15c1c:	str	r3, [r6, #4]
   15c20:	pop	{r4, r5, r6, r7, r8, pc}
   15c24:	andeq	sp, r2, r0, lsr #2
   15c28:	andeq	sp, r2, r4, lsr r2
   15c2c:	andeq	sp, r2, r8, lsr #2
   15c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c34:	sub	sp, sp, #44	; 0x2c
   15c38:	mov	r5, r0
   15c3c:	mov	sl, r1
   15c40:	bl	10ff0 <__errno_location@plt>
   15c44:	ldr	r4, [pc, #400]	; 15ddc <__assert_fail@plt+0x4cf0>
   15c48:	cmn	r5, #-2147483647	; 0x80000001
   15c4c:	ldr	r6, [r4]
   15c50:	mov	r8, r0
   15c54:	movne	r0, #0
   15c58:	moveq	r0, #1
   15c5c:	ldr	r3, [r8]
   15c60:	orrs	r0, r0, r5, lsr #31
   15c64:	str	r3, [sp, #24]
   15c68:	bne	15dd8 <__assert_fail@plt+0x4cec>
   15c6c:	ldr	r2, [r4, #4]
   15c70:	cmp	r5, r2
   15c74:	blt	15cd4 <__assert_fail@plt+0x4be8>
   15c78:	add	r7, r4, #8
   15c7c:	cmp	r6, r7
   15c80:	str	r2, [sp, #36]	; 0x24
   15c84:	beq	15da8 <__assert_fail@plt+0x4cbc>
   15c88:	mov	r3, #8
   15c8c:	sub	r2, r5, r2
   15c90:	mov	r0, r6
   15c94:	str	r3, [sp]
   15c98:	add	r2, r2, #1
   15c9c:	mvn	r3, #-2147483648	; 0x80000000
   15ca0:	add	r1, sp, #36	; 0x24
   15ca4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   15ca8:	mov	r6, r0
   15cac:	str	r0, [r4]
   15cb0:	ldr	r0, [r4, #4]
   15cb4:	ldr	r2, [sp, #36]	; 0x24
   15cb8:	mov	r1, #0
   15cbc:	sub	r2, r2, r0
   15cc0:	add	r0, r6, r0, lsl #3
   15cc4:	lsl	r2, r2, #3
   15cc8:	bl	11008 <memset@plt>
   15ccc:	ldr	r3, [sp, #36]	; 0x24
   15cd0:	str	r3, [r4, #4]
   15cd4:	ldr	r4, [pc, #260]	; 15de0 <__assert_fail@plt+0x4cf4>
   15cd8:	add	fp, r6, r5, lsl #3
   15cdc:	ldr	r9, [r6, r5, lsl #3]
   15ce0:	ldr	r0, [r4, #4]
   15ce4:	ldr	r3, [r4]
   15ce8:	ldr	r7, [fp, #4]
   15cec:	ldr	r1, [r4, #44]	; 0x2c
   15cf0:	ldr	r2, [r4, #40]	; 0x28
   15cf4:	orr	r0, r0, #1
   15cf8:	str	r3, [sp]
   15cfc:	add	r3, r4, #8
   15d00:	str	r0, [sp, #28]
   15d04:	str	r0, [sp, #4]
   15d08:	str	r1, [sp, #16]
   15d0c:	str	r2, [sp, #12]
   15d10:	str	r3, [sp, #8]
   15d14:	mov	r0, r7
   15d18:	mov	r1, r9
   15d1c:	mvn	r3, #0
   15d20:	mov	r2, sl
   15d24:	bl	14314 <__assert_fail@plt+0x3228>
   15d28:	cmp	r9, r0
   15d2c:	bhi	15d94 <__assert_fail@plt+0x4ca8>
   15d30:	add	r3, r4, #48	; 0x30
   15d34:	add	r9, r0, #1
   15d38:	cmp	r7, r3
   15d3c:	str	r9, [r6, r5, lsl #3]
   15d40:	beq	15d4c <__assert_fail@plt+0x4c60>
   15d44:	mov	r0, r7
   15d48:	bl	13d58 <__assert_fail@plt+0x2c6c>
   15d4c:	mov	r0, r9
   15d50:	bl	18c94 <__assert_fail@plt+0x7ba8>
   15d54:	ldr	ip, [r4, #44]	; 0x2c
   15d58:	ldr	r3, [r4]
   15d5c:	ldr	lr, [r4, #40]	; 0x28
   15d60:	ldr	r4, [pc, #124]	; 15de4 <__assert_fail@plt+0x4cf8>
   15d64:	mov	r2, sl
   15d68:	mov	r1, r9
   15d6c:	str	r0, [fp, #4]
   15d70:	str	r4, [sp, #8]
   15d74:	ldr	r4, [sp, #28]
   15d78:	str	r3, [sp]
   15d7c:	str	r4, [sp, #4]
   15d80:	str	ip, [sp, #16]
   15d84:	str	lr, [sp, #12]
   15d88:	mvn	r3, #0
   15d8c:	mov	r7, r0
   15d90:	bl	14314 <__assert_fail@plt+0x3228>
   15d94:	ldr	r3, [sp, #24]
   15d98:	mov	r0, r7
   15d9c:	str	r3, [r8]
   15da0:	add	sp, sp, #44	; 0x2c
   15da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da8:	mov	r3, #8
   15dac:	sub	r2, r5, r2
   15db0:	str	r3, [sp]
   15db4:	add	r1, sp, #36	; 0x24
   15db8:	add	r2, r2, #1
   15dbc:	mvn	r3, #-2147483648	; 0x80000000
   15dc0:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   15dc4:	mov	r6, r0
   15dc8:	ldm	r7, {r0, r1}
   15dcc:	str	r6, [r4]
   15dd0:	stm	r6, {r0, r1}
   15dd4:	b	15cb0 <__assert_fail@plt+0x4bc4>
   15dd8:	bl	110d4 <abort@plt>
   15ddc:	andeq	sp, r2, r0, lsr #2
   15de0:	andeq	sp, r2, r4, lsl #4
   15de4:	andeq	sp, r2, ip, lsl #4
   15de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dec:	sub	sp, sp, #52	; 0x34
   15df0:	mov	r5, r0
   15df4:	mov	sl, r1
   15df8:	mov	fp, r2
   15dfc:	bl	10ff0 <__errno_location@plt>
   15e00:	ldr	r4, [pc, #408]	; 15fa0 <__assert_fail@plt+0x4eb4>
   15e04:	cmn	r5, #-2147483647	; 0x80000001
   15e08:	ldr	r6, [r4]
   15e0c:	mov	r8, r0
   15e10:	movne	r0, #0
   15e14:	moveq	r0, #1
   15e18:	ldr	r3, [r8]
   15e1c:	orrs	r0, r0, r5, lsr #31
   15e20:	str	r3, [sp, #28]
   15e24:	bne	15f9c <__assert_fail@plt+0x4eb0>
   15e28:	ldr	r2, [r4, #4]
   15e2c:	cmp	r5, r2
   15e30:	blt	15e90 <__assert_fail@plt+0x4da4>
   15e34:	add	r7, r4, #8
   15e38:	cmp	r6, r7
   15e3c:	str	r2, [sp, #44]	; 0x2c
   15e40:	beq	15f6c <__assert_fail@plt+0x4e80>
   15e44:	mov	r3, #8
   15e48:	sub	r2, r5, r2
   15e4c:	mov	r0, r6
   15e50:	str	r3, [sp]
   15e54:	add	r2, r2, #1
   15e58:	mvn	r3, #-2147483648	; 0x80000000
   15e5c:	add	r1, sp, #44	; 0x2c
   15e60:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   15e64:	mov	r6, r0
   15e68:	str	r0, [r4]
   15e6c:	ldr	r0, [r4, #4]
   15e70:	ldr	r2, [sp, #44]	; 0x2c
   15e74:	mov	r1, #0
   15e78:	sub	r2, r2, r0
   15e7c:	add	r0, r6, r0, lsl #3
   15e80:	lsl	r2, r2, #3
   15e84:	bl	11008 <memset@plt>
   15e88:	ldr	r3, [sp, #44]	; 0x2c
   15e8c:	str	r3, [r4, #4]
   15e90:	ldr	r4, [pc, #268]	; 15fa4 <__assert_fail@plt+0x4eb8>
   15e94:	add	r3, r6, r5, lsl #3
   15e98:	str	r3, [sp, #32]
   15e9c:	ldr	r7, [r3, #4]
   15ea0:	ldr	r0, [r4, #4]
   15ea4:	ldr	r3, [r4]
   15ea8:	ldr	r9, [r6, r5, lsl #3]
   15eac:	ldr	r1, [r4, #44]	; 0x2c
   15eb0:	ldr	r2, [r4, #40]	; 0x28
   15eb4:	orr	r0, r0, #1
   15eb8:	str	r3, [sp]
   15ebc:	add	r3, r4, #8
   15ec0:	str	r0, [sp, #36]	; 0x24
   15ec4:	str	r0, [sp, #4]
   15ec8:	str	r1, [sp, #16]
   15ecc:	str	r2, [sp, #12]
   15ed0:	str	r3, [sp, #8]
   15ed4:	mov	r0, r7
   15ed8:	mov	r1, r9
   15edc:	mov	r3, fp
   15ee0:	mov	r2, sl
   15ee4:	bl	14314 <__assert_fail@plt+0x3228>
   15ee8:	cmp	r9, r0
   15eec:	bhi	15f58 <__assert_fail@plt+0x4e6c>
   15ef0:	add	r3, r4, #48	; 0x30
   15ef4:	add	r9, r0, #1
   15ef8:	cmp	r7, r3
   15efc:	str	r9, [r6, r5, lsl #3]
   15f00:	beq	15f0c <__assert_fail@plt+0x4e20>
   15f04:	mov	r0, r7
   15f08:	bl	13d58 <__assert_fail@plt+0x2c6c>
   15f0c:	mov	r0, r9
   15f10:	bl	18c94 <__assert_fail@plt+0x7ba8>
   15f14:	ldr	ip, [sp, #32]
   15f18:	ldr	lr, [r4, #44]	; 0x2c
   15f1c:	ldr	r5, [r4, #40]	; 0x28
   15f20:	mov	r3, fp
   15f24:	mov	r2, sl
   15f28:	mov	r1, r9
   15f2c:	str	r0, [ip, #4]
   15f30:	ldr	ip, [r4]
   15f34:	ldr	r4, [pc, #108]	; 15fa8 <__assert_fail@plt+0x4ebc>
   15f38:	str	lr, [sp, #16]
   15f3c:	str	r4, [sp, #8]
   15f40:	ldr	r4, [sp, #36]	; 0x24
   15f44:	str	r5, [sp, #12]
   15f48:	str	r4, [sp, #4]
   15f4c:	str	ip, [sp]
   15f50:	mov	r7, r0
   15f54:	bl	14314 <__assert_fail@plt+0x3228>
   15f58:	ldr	r3, [sp, #28]
   15f5c:	mov	r0, r7
   15f60:	str	r3, [r8]
   15f64:	add	sp, sp, #52	; 0x34
   15f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f6c:	mov	r3, #8
   15f70:	sub	r2, r5, r2
   15f74:	str	r3, [sp]
   15f78:	add	r1, sp, #44	; 0x2c
   15f7c:	add	r2, r2, #1
   15f80:	mvn	r3, #-2147483648	; 0x80000000
   15f84:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   15f88:	mov	r6, r0
   15f8c:	ldm	r7, {r0, r1}
   15f90:	str	r6, [r4]
   15f94:	stm	r6, {r0, r1}
   15f98:	b	15e6c <__assert_fail@plt+0x4d80>
   15f9c:	bl	110d4 <abort@plt>
   15fa0:	andeq	sp, r2, r0, lsr #2
   15fa4:	andeq	sp, r2, r4, lsl #4
   15fa8:	andeq	sp, r2, ip, lsl #4
   15fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fb0:	sub	sp, sp, #44	; 0x2c
   15fb4:	mov	sl, r0
   15fb8:	bl	10ff0 <__errno_location@plt>
   15fbc:	ldr	r4, [pc, #352]	; 16124 <__assert_fail@plt+0x5038>
   15fc0:	ldr	r2, [r4, #4]
   15fc4:	ldr	r5, [r4]
   15fc8:	cmp	r2, #0
   15fcc:	ldr	r3, [r0]
   15fd0:	mov	r8, r0
   15fd4:	str	r3, [sp, #28]
   15fd8:	bgt	16034 <__assert_fail@plt+0x4f48>
   15fdc:	add	r6, r4, #8
   15fe0:	cmp	r5, r6
   15fe4:	str	r2, [sp, #36]	; 0x24
   15fe8:	beq	160f4 <__assert_fail@plt+0x5008>
   15fec:	mov	r3, #8
   15ff0:	mov	r0, r5
   15ff4:	str	r3, [sp]
   15ff8:	rsb	r2, r2, #1
   15ffc:	mvn	r3, #-2147483648	; 0x80000000
   16000:	add	r1, sp, #36	; 0x24
   16004:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16008:	mov	r5, r0
   1600c:	str	r0, [r4]
   16010:	ldr	r0, [r4, #4]
   16014:	ldr	r2, [sp, #36]	; 0x24
   16018:	mov	r1, #0
   1601c:	sub	r2, r2, r0
   16020:	add	r0, r5, r0, lsl #3
   16024:	lsl	r2, r2, #3
   16028:	bl	11008 <memset@plt>
   1602c:	ldr	r3, [sp, #36]	; 0x24
   16030:	str	r3, [r4, #4]
   16034:	ldr	r4, [pc, #236]	; 16128 <__assert_fail@plt+0x503c>
   16038:	ldr	r9, [r5]
   1603c:	ldr	r6, [r5, #4]
   16040:	ldr	r7, [r4, #4]
   16044:	ldr	r1, [r4, #44]	; 0x2c
   16048:	ldr	r2, [r4, #40]	; 0x28
   1604c:	ldr	r3, [r4]
   16050:	orr	r7, r7, #1
   16054:	add	fp, r4, #8
   16058:	str	r1, [sp, #16]
   1605c:	str	r2, [sp, #12]
   16060:	str	r3, [sp]
   16064:	str	r7, [sp, #4]
   16068:	str	fp, [sp, #8]
   1606c:	mov	r1, r9
   16070:	mov	r0, r6
   16074:	mvn	r3, #0
   16078:	mov	r2, sl
   1607c:	bl	14314 <__assert_fail@plt+0x3228>
   16080:	cmp	r9, r0
   16084:	bhi	160e0 <__assert_fail@plt+0x4ff4>
   16088:	add	r3, r4, #48	; 0x30
   1608c:	add	r9, r0, #1
   16090:	cmp	r6, r3
   16094:	str	r9, [r5]
   16098:	beq	160a4 <__assert_fail@plt+0x4fb8>
   1609c:	mov	r0, r6
   160a0:	bl	13d58 <__assert_fail@plt+0x2c6c>
   160a4:	mov	r0, r9
   160a8:	bl	18c94 <__assert_fail@plt+0x7ba8>
   160ac:	ldr	ip, [r4, #44]	; 0x2c
   160b0:	ldr	r3, [r4]
   160b4:	ldr	lr, [r4, #40]	; 0x28
   160b8:	mov	r2, sl
   160bc:	mov	r1, r9
   160c0:	str	r0, [r5, #4]
   160c4:	str	r3, [sp]
   160c8:	stmib	sp, {r7, fp}
   160cc:	str	ip, [sp, #16]
   160d0:	str	lr, [sp, #12]
   160d4:	mvn	r3, #0
   160d8:	mov	r6, r0
   160dc:	bl	14314 <__assert_fail@plt+0x3228>
   160e0:	ldr	r3, [sp, #28]
   160e4:	mov	r0, r6
   160e8:	str	r3, [r8]
   160ec:	add	sp, sp, #44	; 0x2c
   160f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f4:	mov	r3, #8
   160f8:	str	r3, [sp]
   160fc:	add	r1, sp, #36	; 0x24
   16100:	rsb	r2, r2, #1
   16104:	mvn	r3, #-2147483648	; 0x80000000
   16108:	mov	r0, #0
   1610c:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16110:	mov	r5, r0
   16114:	ldm	r6, {r0, r1}
   16118:	str	r5, [r4]
   1611c:	stm	r5, {r0, r1}
   16120:	b	16010 <__assert_fail@plt+0x4f24>
   16124:	andeq	sp, r2, r0, lsr #2
   16128:	andeq	sp, r2, r4, lsl #4
   1612c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16130:	sub	sp, sp, #44	; 0x2c
   16134:	mov	r9, r0
   16138:	mov	sl, r1
   1613c:	bl	10ff0 <__errno_location@plt>
   16140:	ldr	r4, [pc, #364]	; 162b4 <__assert_fail@plt+0x51c8>
   16144:	ldr	r2, [r4, #4]
   16148:	ldr	r5, [r4]
   1614c:	cmp	r2, #0
   16150:	ldr	r3, [r0]
   16154:	mov	r7, r0
   16158:	str	r3, [sp, #24]
   1615c:	bgt	161b8 <__assert_fail@plt+0x50cc>
   16160:	add	r6, r4, #8
   16164:	cmp	r5, r6
   16168:	str	r2, [sp, #36]	; 0x24
   1616c:	beq	16284 <__assert_fail@plt+0x5198>
   16170:	mov	r3, #8
   16174:	mov	r0, r5
   16178:	str	r3, [sp]
   1617c:	rsb	r2, r2, #1
   16180:	mvn	r3, #-2147483648	; 0x80000000
   16184:	add	r1, sp, #36	; 0x24
   16188:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   1618c:	mov	r5, r0
   16190:	str	r0, [r4]
   16194:	ldr	r0, [r4, #4]
   16198:	ldr	r2, [sp, #36]	; 0x24
   1619c:	mov	r1, #0
   161a0:	sub	r2, r2, r0
   161a4:	add	r0, r5, r0, lsl #3
   161a8:	lsl	r2, r2, #3
   161ac:	bl	11008 <memset@plt>
   161b0:	ldr	r3, [sp, #36]	; 0x24
   161b4:	str	r3, [r4, #4]
   161b8:	ldr	r4, [pc, #248]	; 162b8 <__assert_fail@plt+0x51cc>
   161bc:	ldr	r8, [r5]
   161c0:	ldr	r6, [r5, #4]
   161c4:	ldr	r0, [r4, #4]
   161c8:	ldr	r1, [r4, #44]	; 0x2c
   161cc:	ldr	r2, [r4, #40]	; 0x28
   161d0:	ldr	r3, [r4]
   161d4:	orr	r0, r0, #1
   161d8:	add	fp, r4, #8
   161dc:	str	r0, [sp, #28]
   161e0:	str	r0, [sp, #4]
   161e4:	str	r1, [sp, #16]
   161e8:	str	r2, [sp, #12]
   161ec:	str	r3, [sp]
   161f0:	str	fp, [sp, #8]
   161f4:	mov	r1, r8
   161f8:	mov	r0, r6
   161fc:	mov	r3, sl
   16200:	mov	r2, r9
   16204:	bl	14314 <__assert_fail@plt+0x3228>
   16208:	cmp	r8, r0
   1620c:	bhi	16270 <__assert_fail@plt+0x5184>
   16210:	add	r3, r4, #48	; 0x30
   16214:	add	r8, r0, #1
   16218:	cmp	r6, r3
   1621c:	str	r8, [r5]
   16220:	beq	1622c <__assert_fail@plt+0x5140>
   16224:	mov	r0, r6
   16228:	bl	13d58 <__assert_fail@plt+0x2c6c>
   1622c:	mov	r0, r8
   16230:	bl	18c94 <__assert_fail@plt+0x7ba8>
   16234:	ldr	lr, [r4, #44]	; 0x2c
   16238:	ldr	ip, [r4]
   1623c:	mov	r3, sl
   16240:	mov	r2, r9
   16244:	mov	r1, r8
   16248:	str	r0, [r5, #4]
   1624c:	ldr	r5, [r4, #40]	; 0x28
   16250:	ldr	r4, [sp, #28]
   16254:	str	fp, [sp, #8]
   16258:	str	r4, [sp, #4]
   1625c:	str	lr, [sp, #16]
   16260:	str	r5, [sp, #12]
   16264:	str	ip, [sp]
   16268:	mov	r6, r0
   1626c:	bl	14314 <__assert_fail@plt+0x3228>
   16270:	ldr	r3, [sp, #24]
   16274:	mov	r0, r6
   16278:	str	r3, [r7]
   1627c:	add	sp, sp, #44	; 0x2c
   16280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16284:	mov	r3, #8
   16288:	str	r3, [sp]
   1628c:	add	r1, sp, #36	; 0x24
   16290:	rsb	r2, r2, #1
   16294:	mvn	r3, #-2147483648	; 0x80000000
   16298:	mov	r0, #0
   1629c:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   162a0:	mov	r5, r0
   162a4:	ldm	r6, {r0, r1}
   162a8:	str	r5, [r4]
   162ac:	stm	r5, {r0, r1}
   162b0:	b	16194 <__assert_fail@plt+0x50a8>
   162b4:	andeq	sp, r2, r0, lsr #2
   162b8:	andeq	sp, r2, r4, lsl #4
   162bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162c0:	sub	sp, sp, #132	; 0x84
   162c4:	mov	r5, r1
   162c8:	mov	r4, r0
   162cc:	mov	r9, r2
   162d0:	add	r0, sp, #80	; 0x50
   162d4:	mov	r2, #48	; 0x30
   162d8:	mov	r1, #0
   162dc:	bl	11008 <memset@plt>
   162e0:	cmp	r5, #10
   162e4:	beq	1649c <__assert_fail@plt+0x53b0>
   162e8:	add	lr, sp, #80	; 0x50
   162ec:	str	r5, [sp, #80]	; 0x50
   162f0:	ldm	lr!, {r0, r1, r2, r3}
   162f4:	add	ip, sp, #32
   162f8:	ldr	r6, [pc, #416]	; 164a0 <__assert_fail@plt+0x53b4>
   162fc:	stmia	ip!, {r0, r1, r2, r3}
   16300:	ldm	lr!, {r0, r1, r2, r3}
   16304:	stmia	ip!, {r0, r1, r2, r3}
   16308:	ldm	lr, {r0, r1, r2, r3}
   1630c:	stm	ip, {r0, r1, r2, r3}
   16310:	bl	10ff0 <__errno_location@plt>
   16314:	cmn	r4, #-2147483647	; 0x80000001
   16318:	ldr	r5, [r6]
   1631c:	mov	r7, r0
   16320:	movne	r0, #0
   16324:	moveq	r0, #1
   16328:	ldr	r3, [r7]
   1632c:	orrs	r0, r0, r4, lsr #31
   16330:	str	r3, [sp, #24]
   16334:	bne	1649c <__assert_fail@plt+0x53b0>
   16338:	ldr	r2, [r6, #4]
   1633c:	cmp	r4, r2
   16340:	blt	163a0 <__assert_fail@plt+0x52b4>
   16344:	add	r8, r6, #8
   16348:	cmp	r5, r8
   1634c:	str	r2, [sp, #80]	; 0x50
   16350:	beq	1646c <__assert_fail@plt+0x5380>
   16354:	mov	r3, #8
   16358:	sub	r2, r4, r2
   1635c:	mov	r0, r5
   16360:	str	r3, [sp]
   16364:	add	r2, r2, #1
   16368:	add	r1, sp, #80	; 0x50
   1636c:	mvn	r3, #-2147483648	; 0x80000000
   16370:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16374:	mov	r5, r0
   16378:	str	r0, [r6]
   1637c:	ldr	r0, [r6, #4]
   16380:	ldr	r2, [sp, #80]	; 0x50
   16384:	mov	r1, #0
   16388:	sub	r2, r2, r0
   1638c:	add	r0, r5, r0, lsl #3
   16390:	lsl	r2, r2, #3
   16394:	bl	11008 <memset@plt>
   16398:	ldr	r3, [sp, #80]	; 0x50
   1639c:	str	r3, [r6, #4]
   163a0:	add	fp, r5, r4, lsl #3
   163a4:	ldr	r1, [sp, #36]	; 0x24
   163a8:	ldr	r8, [r5, r4, lsl #3]
   163ac:	ldr	r6, [fp, #4]
   163b0:	ldr	r2, [sp, #72]	; 0x48
   163b4:	ldr	r3, [sp, #32]
   163b8:	ldr	ip, [sp, #76]	; 0x4c
   163bc:	orr	r1, r1, #1
   163c0:	add	sl, sp, #40	; 0x28
   163c4:	str	r1, [sp, #28]
   163c8:	str	r1, [sp, #4]
   163cc:	str	r2, [sp, #12]
   163d0:	str	r3, [sp]
   163d4:	mov	r0, r6
   163d8:	mov	r1, r8
   163dc:	str	ip, [sp, #16]
   163e0:	str	sl, [sp, #8]
   163e4:	mvn	r3, #0
   163e8:	mov	r2, r9
   163ec:	bl	14314 <__assert_fail@plt+0x3228>
   163f0:	cmp	r8, r0
   163f4:	bhi	16458 <__assert_fail@plt+0x536c>
   163f8:	ldr	r3, [pc, #164]	; 164a4 <__assert_fail@plt+0x53b8>
   163fc:	add	r8, r0, #1
   16400:	cmp	r6, r3
   16404:	str	r8, [r5, r4, lsl #3]
   16408:	beq	16414 <__assert_fail@plt+0x5328>
   1640c:	mov	r0, r6
   16410:	bl	13d58 <__assert_fail@plt+0x2c6c>
   16414:	mov	r0, r8
   16418:	bl	18c94 <__assert_fail@plt+0x7ba8>
   1641c:	ldr	lr, [sp, #76]	; 0x4c
   16420:	ldr	r3, [sp, #32]
   16424:	ldr	ip, [sp, #72]	; 0x48
   16428:	ldr	r4, [sp, #28]
   1642c:	mov	r2, r9
   16430:	mov	r1, r8
   16434:	str	r0, [fp, #4]
   16438:	str	r3, [sp]
   1643c:	str	sl, [sp, #8]
   16440:	str	r4, [sp, #4]
   16444:	str	lr, [sp, #16]
   16448:	str	ip, [sp, #12]
   1644c:	mvn	r3, #0
   16450:	mov	r6, r0
   16454:	bl	14314 <__assert_fail@plt+0x3228>
   16458:	ldr	r3, [sp, #24]
   1645c:	mov	r0, r6
   16460:	str	r3, [r7]
   16464:	add	sp, sp, #132	; 0x84
   16468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1646c:	mov	r3, #8
   16470:	sub	r2, r4, r2
   16474:	add	r1, sp, #80	; 0x50
   16478:	str	r3, [sp]
   1647c:	add	r2, r2, #1
   16480:	mvn	r3, #-2147483648	; 0x80000000
   16484:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16488:	mov	r5, r0
   1648c:	ldm	r8, {r0, r1}
   16490:	str	r5, [r6]
   16494:	stm	r5, {r0, r1}
   16498:	b	1637c <__assert_fail@plt+0x5290>
   1649c:	bl	110d4 <abort@plt>
   164a0:	andeq	sp, r2, r0, lsr #2
   164a4:	andeq	sp, r2, r4, lsr r2
   164a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164ac:	sub	sp, sp, #132	; 0x84
   164b0:	mov	r5, r1
   164b4:	mov	r4, r0
   164b8:	mov	r9, r2
   164bc:	add	r0, sp, #80	; 0x50
   164c0:	mov	r2, #48	; 0x30
   164c4:	mov	r1, #0
   164c8:	mov	sl, r3
   164cc:	bl	11008 <memset@plt>
   164d0:	cmp	r5, #10
   164d4:	beq	16690 <__assert_fail@plt+0x55a4>
   164d8:	add	lr, sp, #80	; 0x50
   164dc:	str	r5, [sp, #80]	; 0x50
   164e0:	ldm	lr!, {r0, r1, r2, r3}
   164e4:	add	ip, sp, #32
   164e8:	ldr	r6, [pc, #420]	; 16694 <__assert_fail@plt+0x55a8>
   164ec:	stmia	ip!, {r0, r1, r2, r3}
   164f0:	ldm	lr!, {r0, r1, r2, r3}
   164f4:	stmia	ip!, {r0, r1, r2, r3}
   164f8:	ldm	lr, {r0, r1, r2, r3}
   164fc:	stm	ip, {r0, r1, r2, r3}
   16500:	bl	10ff0 <__errno_location@plt>
   16504:	cmn	r4, #-2147483647	; 0x80000001
   16508:	ldr	r5, [r6]
   1650c:	mov	r7, r0
   16510:	movne	r0, #0
   16514:	moveq	r0, #1
   16518:	ldr	r3, [r7]
   1651c:	orrs	r0, r0, r4, lsr #31
   16520:	str	r3, [sp, #24]
   16524:	bne	16690 <__assert_fail@plt+0x55a4>
   16528:	ldr	r2, [r6, #4]
   1652c:	cmp	r4, r2
   16530:	blt	16590 <__assert_fail@plt+0x54a4>
   16534:	add	r8, r6, #8
   16538:	cmp	r5, r8
   1653c:	str	r2, [sp, #80]	; 0x50
   16540:	beq	16660 <__assert_fail@plt+0x5574>
   16544:	mov	r3, #8
   16548:	sub	r2, r4, r2
   1654c:	mov	r0, r5
   16550:	str	r3, [sp]
   16554:	add	r2, r2, #1
   16558:	add	r1, sp, #80	; 0x50
   1655c:	mvn	r3, #-2147483648	; 0x80000000
   16560:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16564:	mov	r5, r0
   16568:	str	r0, [r6]
   1656c:	ldr	r0, [r6, #4]
   16570:	ldr	r2, [sp, #80]	; 0x50
   16574:	mov	r1, #0
   16578:	sub	r2, r2, r0
   1657c:	add	r0, r5, r0, lsl #3
   16580:	lsl	r2, r2, #3
   16584:	bl	11008 <memset@plt>
   16588:	ldr	r3, [sp, #80]	; 0x50
   1658c:	str	r3, [r6, #4]
   16590:	add	fp, r5, r4, lsl #3
   16594:	ldr	r3, [sp, #32]
   16598:	ldr	r1, [sp, #36]	; 0x24
   1659c:	ldr	r8, [r5, r4, lsl #3]
   165a0:	ldr	r6, [fp, #4]
   165a4:	ldr	r2, [sp, #72]	; 0x48
   165a8:	ldr	ip, [sp, #76]	; 0x4c
   165ac:	orr	r1, r1, #1
   165b0:	str	r3, [sp]
   165b4:	add	r3, sp, #40	; 0x28
   165b8:	str	r1, [sp, #28]
   165bc:	str	r1, [sp, #4]
   165c0:	str	r2, [sp, #12]
   165c4:	str	r3, [sp, #8]
   165c8:	mov	r0, r6
   165cc:	mov	r1, r8
   165d0:	str	ip, [sp, #16]
   165d4:	mov	r3, sl
   165d8:	mov	r2, r9
   165dc:	bl	14314 <__assert_fail@plt+0x3228>
   165e0:	cmp	r8, r0
   165e4:	bhi	1664c <__assert_fail@plt+0x5560>
   165e8:	ldr	r3, [pc, #168]	; 16698 <__assert_fail@plt+0x55ac>
   165ec:	add	r8, r0, #1
   165f0:	cmp	r6, r3
   165f4:	str	r8, [r5, r4, lsl #3]
   165f8:	beq	16604 <__assert_fail@plt+0x5518>
   165fc:	mov	r0, r6
   16600:	bl	13d58 <__assert_fail@plt+0x2c6c>
   16604:	mov	r0, r8
   16608:	bl	18c94 <__assert_fail@plt+0x7ba8>
   1660c:	add	lr, sp, #40	; 0x28
   16610:	ldr	ip, [sp, #76]	; 0x4c
   16614:	ldr	r4, [sp, #72]	; 0x48
   16618:	ldr	r5, [sp, #28]
   1661c:	mov	r3, sl
   16620:	mov	r2, r9
   16624:	mov	r1, r8
   16628:	str	r0, [fp, #4]
   1662c:	str	lr, [sp, #8]
   16630:	ldr	lr, [sp, #32]
   16634:	str	r5, [sp, #4]
   16638:	str	ip, [sp, #16]
   1663c:	str	r4, [sp, #12]
   16640:	str	lr, [sp]
   16644:	mov	r6, r0
   16648:	bl	14314 <__assert_fail@plt+0x3228>
   1664c:	ldr	r3, [sp, #24]
   16650:	mov	r0, r6
   16654:	str	r3, [r7]
   16658:	add	sp, sp, #132	; 0x84
   1665c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	mov	r3, #8
   16664:	sub	r2, r4, r2
   16668:	add	r1, sp, #80	; 0x50
   1666c:	str	r3, [sp]
   16670:	add	r2, r2, #1
   16674:	mvn	r3, #-2147483648	; 0x80000000
   16678:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   1667c:	mov	r5, r0
   16680:	ldm	r8, {r0, r1}
   16684:	str	r5, [r6]
   16688:	stm	r5, {r0, r1}
   1668c:	b	1656c <__assert_fail@plt+0x5480>
   16690:	bl	110d4 <abort@plt>
   16694:	andeq	sp, r2, r0, lsr #2
   16698:	andeq	sp, r2, r4, lsr r2
   1669c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166a0:	sub	sp, sp, #124	; 0x7c
   166a4:	mov	r4, r0
   166a8:	mov	r9, r1
   166ac:	add	r0, sp, #72	; 0x48
   166b0:	mov	r2, #48	; 0x30
   166b4:	mov	r1, #0
   166b8:	bl	11008 <memset@plt>
   166bc:	cmp	r4, #10
   166c0:	beq	1684c <__assert_fail@plt+0x5760>
   166c4:	add	lr, sp, #72	; 0x48
   166c8:	str	r4, [sp, #72]	; 0x48
   166cc:	ldm	lr!, {r0, r1, r2, r3}
   166d0:	add	ip, sp, #24
   166d4:	ldr	r5, [pc, #372]	; 16850 <__assert_fail@plt+0x5764>
   166d8:	stmia	ip!, {r0, r1, r2, r3}
   166dc:	ldm	lr!, {r0, r1, r2, r3}
   166e0:	stmia	ip!, {r0, r1, r2, r3}
   166e4:	ldm	lr, {r0, r1, r2, r3}
   166e8:	stm	ip, {r0, r1, r2, r3}
   166ec:	bl	10ff0 <__errno_location@plt>
   166f0:	ldr	r2, [r5, #4]
   166f4:	ldr	r4, [r5]
   166f8:	cmp	r2, #0
   166fc:	mov	r7, r0
   16700:	ldr	fp, [r0]
   16704:	bgt	16760 <__assert_fail@plt+0x5674>
   16708:	add	r6, r5, #8
   1670c:	cmp	r4, r6
   16710:	str	r2, [sp, #72]	; 0x48
   16714:	beq	1681c <__assert_fail@plt+0x5730>
   16718:	mov	r3, #8
   1671c:	mov	r0, r4
   16720:	str	r3, [sp]
   16724:	rsb	r2, r2, #1
   16728:	add	r1, sp, #72	; 0x48
   1672c:	mvn	r3, #-2147483648	; 0x80000000
   16730:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16734:	mov	r4, r0
   16738:	str	r0, [r5]
   1673c:	ldr	r0, [r5, #4]
   16740:	ldr	r2, [sp, #72]	; 0x48
   16744:	mov	r1, #0
   16748:	sub	r2, r2, r0
   1674c:	add	r0, r4, r0, lsl #3
   16750:	lsl	r2, r2, #3
   16754:	bl	11008 <memset@plt>
   16758:	ldr	r3, [sp, #72]	; 0x48
   1675c:	str	r3, [r5, #4]
   16760:	ldr	r6, [sp, #28]
   16764:	ldr	r8, [r4]
   16768:	ldr	r5, [r4, #4]
   1676c:	ldr	r2, [sp, #64]	; 0x40
   16770:	ldr	r3, [sp, #24]
   16774:	ldr	ip, [sp, #68]	; 0x44
   16778:	orr	r6, r6, #1
   1677c:	add	sl, sp, #32
   16780:	str	r2, [sp, #12]
   16784:	str	r3, [sp]
   16788:	str	r6, [sp, #4]
   1678c:	mov	r1, r8
   16790:	mov	r0, r5
   16794:	str	ip, [sp, #16]
   16798:	str	sl, [sp, #8]
   1679c:	mvn	r3, #0
   167a0:	mov	r2, r9
   167a4:	bl	14314 <__assert_fail@plt+0x3228>
   167a8:	cmp	r8, r0
   167ac:	bhi	1680c <__assert_fail@plt+0x5720>
   167b0:	ldr	r3, [pc, #156]	; 16854 <__assert_fail@plt+0x5768>
   167b4:	add	r8, r0, #1
   167b8:	cmp	r5, r3
   167bc:	str	r8, [r4]
   167c0:	beq	167cc <__assert_fail@plt+0x56e0>
   167c4:	mov	r0, r5
   167c8:	bl	13d58 <__assert_fail@plt+0x2c6c>
   167cc:	mov	r0, r8
   167d0:	bl	18c94 <__assert_fail@plt+0x7ba8>
   167d4:	ldr	lr, [sp, #68]	; 0x44
   167d8:	ldr	r3, [sp, #24]
   167dc:	ldr	ip, [sp, #64]	; 0x40
   167e0:	mov	r2, r9
   167e4:	mov	r1, r8
   167e8:	str	r0, [r4, #4]
   167ec:	str	r3, [sp]
   167f0:	str	sl, [sp, #8]
   167f4:	str	r6, [sp, #4]
   167f8:	str	lr, [sp, #16]
   167fc:	str	ip, [sp, #12]
   16800:	mvn	r3, #0
   16804:	mov	r5, r0
   16808:	bl	14314 <__assert_fail@plt+0x3228>
   1680c:	mov	r0, r5
   16810:	str	fp, [r7]
   16814:	add	sp, sp, #124	; 0x7c
   16818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1681c:	mov	r3, #8
   16820:	add	r1, sp, #72	; 0x48
   16824:	str	r3, [sp]
   16828:	rsb	r2, r2, #1
   1682c:	mvn	r3, #-2147483648	; 0x80000000
   16830:	mov	r0, #0
   16834:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16838:	mov	r4, r0
   1683c:	ldm	r6, {r0, r1}
   16840:	str	r4, [r5]
   16844:	stm	r4, {r0, r1}
   16848:	b	1673c <__assert_fail@plt+0x5650>
   1684c:	bl	110d4 <abort@plt>
   16850:	andeq	sp, r2, r0, lsr #2
   16854:	andeq	sp, r2, r4, lsr r2
   16858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1685c:	sub	sp, sp, #132	; 0x84
   16860:	mov	r4, r0
   16864:	mov	r9, r1
   16868:	mov	sl, r2
   1686c:	add	r0, sp, #80	; 0x50
   16870:	mov	r2, #48	; 0x30
   16874:	mov	r1, #0
   16878:	bl	11008 <memset@plt>
   1687c:	cmp	r4, #10
   16880:	beq	16a14 <__assert_fail@plt+0x5928>
   16884:	add	lr, sp, #80	; 0x50
   16888:	str	r4, [sp, #80]	; 0x50
   1688c:	ldm	lr!, {r0, r1, r2, r3}
   16890:	add	ip, sp, #32
   16894:	ldr	r5, [pc, #380]	; 16a18 <__assert_fail@plt+0x592c>
   16898:	stmia	ip!, {r0, r1, r2, r3}
   1689c:	ldm	lr!, {r0, r1, r2, r3}
   168a0:	stmia	ip!, {r0, r1, r2, r3}
   168a4:	ldm	lr, {r0, r1, r2, r3}
   168a8:	stm	ip, {r0, r1, r2, r3}
   168ac:	bl	10ff0 <__errno_location@plt>
   168b0:	ldr	r2, [r5, #4]
   168b4:	ldr	r4, [r5]
   168b8:	cmp	r2, #0
   168bc:	ldr	r3, [r0]
   168c0:	mov	r7, r0
   168c4:	str	r3, [sp, #28]
   168c8:	bgt	16924 <__assert_fail@plt+0x5838>
   168cc:	add	r6, r5, #8
   168d0:	cmp	r4, r6
   168d4:	str	r2, [sp, #80]	; 0x50
   168d8:	beq	169e4 <__assert_fail@plt+0x58f8>
   168dc:	mov	r3, #8
   168e0:	mov	r0, r4
   168e4:	str	r3, [sp]
   168e8:	rsb	r2, r2, #1
   168ec:	add	r1, sp, #80	; 0x50
   168f0:	mvn	r3, #-2147483648	; 0x80000000
   168f4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   168f8:	mov	r4, r0
   168fc:	str	r0, [r5]
   16900:	ldr	r0, [r5, #4]
   16904:	ldr	r2, [sp, #80]	; 0x50
   16908:	mov	r1, #0
   1690c:	sub	r2, r2, r0
   16910:	add	r0, r4, r0, lsl #3
   16914:	lsl	r2, r2, #3
   16918:	bl	11008 <memset@plt>
   1691c:	ldr	r3, [sp, #80]	; 0x50
   16920:	str	r3, [r5, #4]
   16924:	ldr	r6, [sp, #36]	; 0x24
   16928:	ldr	r8, [r4]
   1692c:	ldr	r5, [r4, #4]
   16930:	ldr	r2, [sp, #72]	; 0x48
   16934:	ldr	r3, [sp, #32]
   16938:	ldr	ip, [sp, #76]	; 0x4c
   1693c:	orr	r6, r6, #1
   16940:	add	fp, sp, #40	; 0x28
   16944:	str	r2, [sp, #12]
   16948:	str	r3, [sp]
   1694c:	str	r6, [sp, #4]
   16950:	mov	r1, r8
   16954:	mov	r0, r5
   16958:	str	ip, [sp, #16]
   1695c:	str	fp, [sp, #8]
   16960:	mov	r3, sl
   16964:	mov	r2, r9
   16968:	bl	14314 <__assert_fail@plt+0x3228>
   1696c:	cmp	r8, r0
   16970:	bhi	169d0 <__assert_fail@plt+0x58e4>
   16974:	ldr	r3, [pc, #160]	; 16a1c <__assert_fail@plt+0x5930>
   16978:	add	r8, r0, #1
   1697c:	cmp	r5, r3
   16980:	str	r8, [r4]
   16984:	beq	16990 <__assert_fail@plt+0x58a4>
   16988:	mov	r0, r5
   1698c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   16990:	mov	r0, r8
   16994:	bl	18c94 <__assert_fail@plt+0x7ba8>
   16998:	ldr	ip, [sp, #76]	; 0x4c
   1699c:	ldr	lr, [sp, #32]
   169a0:	mov	r3, sl
   169a4:	mov	r2, r9
   169a8:	mov	r1, r8
   169ac:	str	r0, [r4, #4]
   169b0:	ldr	r4, [sp, #72]	; 0x48
   169b4:	str	fp, [sp, #8]
   169b8:	str	r6, [sp, #4]
   169bc:	str	ip, [sp, #16]
   169c0:	str	r4, [sp, #12]
   169c4:	str	lr, [sp]
   169c8:	mov	r5, r0
   169cc:	bl	14314 <__assert_fail@plt+0x3228>
   169d0:	ldr	r3, [sp, #28]
   169d4:	mov	r0, r5
   169d8:	str	r3, [r7]
   169dc:	add	sp, sp, #132	; 0x84
   169e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169e4:	mov	r3, #8
   169e8:	add	r1, sp, #80	; 0x50
   169ec:	str	r3, [sp]
   169f0:	rsb	r2, r2, #1
   169f4:	mvn	r3, #-2147483648	; 0x80000000
   169f8:	mov	r0, #0
   169fc:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16a00:	mov	r4, r0
   16a04:	ldm	r6, {r0, r1}
   16a08:	str	r4, [r5]
   16a0c:	stm	r4, {r0, r1}
   16a10:	b	16900 <__assert_fail@plt+0x5814>
   16a14:	bl	110d4 <abort@plt>
   16a18:	andeq	sp, r2, r0, lsr #2
   16a1c:	andeq	sp, r2, r4, lsr r2
   16a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a24:	mov	r4, r2
   16a28:	ldr	lr, [pc, #432]	; 16be0 <__assert_fail@plt+0x5af4>
   16a2c:	mov	sl, r0
   16a30:	mov	fp, r1
   16a34:	ldm	lr!, {r0, r1, r2, r3}
   16a38:	sub	sp, sp, #92	; 0x5c
   16a3c:	add	ip, sp, #40	; 0x28
   16a40:	lsr	r7, r4, #5
   16a44:	stmia	ip!, {r0, r1, r2, r3}
   16a48:	add	r6, sp, #48	; 0x30
   16a4c:	ldm	lr!, {r0, r1, r2, r3}
   16a50:	and	r4, r4, #31
   16a54:	ldr	r5, [pc, #392]	; 16be4 <__assert_fail@plt+0x5af8>
   16a58:	stmia	ip!, {r0, r1, r2, r3}
   16a5c:	ldm	lr, {r0, r1, r2, r3}
   16a60:	stm	ip, {r0, r1, r2, r3}
   16a64:	ldr	r2, [r6, r7, lsl #2]
   16a68:	lsr	r3, r2, r4
   16a6c:	eor	r3, r3, #1
   16a70:	and	r3, r3, #1
   16a74:	eor	r4, r2, r3, lsl r4
   16a78:	str	r4, [r6, r7, lsl #2]
   16a7c:	bl	10ff0 <__errno_location@plt>
   16a80:	ldr	r2, [r5, #4]
   16a84:	ldr	r4, [r5]
   16a88:	cmp	r2, #0
   16a8c:	ldr	r3, [r0]
   16a90:	mov	r8, r0
   16a94:	str	r3, [sp, #28]
   16a98:	bgt	16af4 <__assert_fail@plt+0x5a08>
   16a9c:	add	r7, r5, #8
   16aa0:	cmp	r4, r7
   16aa4:	str	r2, [sp, #36]	; 0x24
   16aa8:	beq	16bb0 <__assert_fail@plt+0x5ac4>
   16aac:	mov	r3, #8
   16ab0:	mov	r0, r4
   16ab4:	str	r3, [sp]
   16ab8:	rsb	r2, r2, #1
   16abc:	mvn	r3, #-2147483648	; 0x80000000
   16ac0:	add	r1, sp, #36	; 0x24
   16ac4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16ac8:	mov	r4, r0
   16acc:	str	r0, [r5]
   16ad0:	ldr	r0, [r5, #4]
   16ad4:	ldr	r2, [sp, #36]	; 0x24
   16ad8:	mov	r1, #0
   16adc:	sub	r2, r2, r0
   16ae0:	add	r0, r4, r0, lsl #3
   16ae4:	lsl	r2, r2, #3
   16ae8:	bl	11008 <memset@plt>
   16aec:	ldr	r3, [sp, #36]	; 0x24
   16af0:	str	r3, [r5, #4]
   16af4:	ldr	r7, [sp, #44]	; 0x2c
   16af8:	ldr	r9, [r4]
   16afc:	ldr	r5, [r4, #4]
   16b00:	ldr	r2, [sp, #80]	; 0x50
   16b04:	ldr	r3, [sp, #40]	; 0x28
   16b08:	ldr	ip, [sp, #84]	; 0x54
   16b0c:	orr	r7, r7, #1
   16b10:	str	r2, [sp, #12]
   16b14:	str	r3, [sp]
   16b18:	str	r7, [sp, #4]
   16b1c:	str	r6, [sp, #8]
   16b20:	mov	r1, r9
   16b24:	mov	r0, r5
   16b28:	str	ip, [sp, #16]
   16b2c:	mov	r3, fp
   16b30:	mov	r2, sl
   16b34:	bl	14314 <__assert_fail@plt+0x3228>
   16b38:	cmp	r9, r0
   16b3c:	bhi	16b9c <__assert_fail@plt+0x5ab0>
   16b40:	ldr	r3, [pc, #160]	; 16be8 <__assert_fail@plt+0x5afc>
   16b44:	add	r9, r0, #1
   16b48:	cmp	r5, r3
   16b4c:	str	r9, [r4]
   16b50:	beq	16b5c <__assert_fail@plt+0x5a70>
   16b54:	mov	r0, r5
   16b58:	bl	13d58 <__assert_fail@plt+0x2c6c>
   16b5c:	mov	r0, r9
   16b60:	bl	18c94 <__assert_fail@plt+0x7ba8>
   16b64:	ldr	ip, [sp, #84]	; 0x54
   16b68:	ldr	lr, [sp, #40]	; 0x28
   16b6c:	mov	r3, fp
   16b70:	mov	r2, sl
   16b74:	mov	r1, r9
   16b78:	str	r0, [r4, #4]
   16b7c:	ldr	r4, [sp, #80]	; 0x50
   16b80:	str	r6, [sp, #8]
   16b84:	str	r7, [sp, #4]
   16b88:	str	ip, [sp, #16]
   16b8c:	str	r4, [sp, #12]
   16b90:	str	lr, [sp]
   16b94:	mov	r5, r0
   16b98:	bl	14314 <__assert_fail@plt+0x3228>
   16b9c:	ldr	r3, [sp, #28]
   16ba0:	mov	r0, r5
   16ba4:	str	r3, [r8]
   16ba8:	add	sp, sp, #92	; 0x5c
   16bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bb0:	mov	r3, #8
   16bb4:	str	r3, [sp]
   16bb8:	add	r1, sp, #36	; 0x24
   16bbc:	rsb	r2, r2, #1
   16bc0:	mvn	r3, #-2147483648	; 0x80000000
   16bc4:	mov	r0, #0
   16bc8:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16bcc:	mov	r4, r0
   16bd0:	ldm	r7, {r0, r1}
   16bd4:	str	r4, [r5]
   16bd8:	stm	r4, {r0, r1}
   16bdc:	b	16ad0 <__assert_fail@plt+0x59e4>
   16be0:	andeq	sp, r2, r4, lsl #4
   16be4:	andeq	sp, r2, r0, lsr #2
   16be8:	andeq	sp, r2, r4, lsr r2
   16bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bf0:	mov	r4, r1
   16bf4:	ldr	lr, [pc, #420]	; 16da0 <__assert_fail@plt+0x5cb4>
   16bf8:	mov	r6, r0
   16bfc:	sub	sp, sp, #84	; 0x54
   16c00:	ldm	lr!, {r0, r1, r2, r3}
   16c04:	add	ip, sp, #32
   16c08:	lsr	r8, r4, #5
   16c0c:	add	r5, sp, #40	; 0x28
   16c10:	stmia	ip!, {r0, r1, r2, r3}
   16c14:	and	r4, r4, #31
   16c18:	ldm	lr!, {r0, r1, r2, r3}
   16c1c:	ldr	r7, [pc, #384]	; 16da4 <__assert_fail@plt+0x5cb8>
   16c20:	stmia	ip!, {r0, r1, r2, r3}
   16c24:	ldm	lr, {r0, r1, r2, r3}
   16c28:	stm	ip, {r0, r1, r2, r3}
   16c2c:	ldr	r2, [r5, r8, lsl #2]
   16c30:	lsr	r3, r2, r4
   16c34:	eor	r3, r3, #1
   16c38:	and	r3, r3, #1
   16c3c:	eor	r4, r2, r3, lsl r4
   16c40:	str	r4, [r5, r8, lsl #2]
   16c44:	bl	10ff0 <__errno_location@plt>
   16c48:	ldr	r2, [r7, #4]
   16c4c:	ldr	r4, [r7]
   16c50:	cmp	r2, #0
   16c54:	mov	r9, r0
   16c58:	ldr	sl, [r0]
   16c5c:	bgt	16cb8 <__assert_fail@plt+0x5bcc>
   16c60:	add	r8, r7, #8
   16c64:	cmp	r4, r8
   16c68:	str	r2, [sp, #28]
   16c6c:	beq	16d70 <__assert_fail@plt+0x5c84>
   16c70:	mov	r3, #8
   16c74:	mov	r0, r4
   16c78:	str	r3, [sp]
   16c7c:	rsb	r2, r2, #1
   16c80:	mvn	r3, #-2147483648	; 0x80000000
   16c84:	add	r1, sp, #28
   16c88:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16c8c:	mov	r4, r0
   16c90:	str	r0, [r7]
   16c94:	ldr	r0, [r7, #4]
   16c98:	ldr	r2, [sp, #28]
   16c9c:	mov	r1, #0
   16ca0:	sub	r2, r2, r0
   16ca4:	add	r0, r4, r0, lsl #3
   16ca8:	lsl	r2, r2, #3
   16cac:	bl	11008 <memset@plt>
   16cb0:	ldr	r3, [sp, #28]
   16cb4:	str	r3, [r7, #4]
   16cb8:	ldr	r8, [sp, #36]	; 0x24
   16cbc:	ldr	fp, [r4]
   16cc0:	ldr	r7, [r4, #4]
   16cc4:	ldr	r2, [sp, #72]	; 0x48
   16cc8:	ldr	r3, [sp, #32]
   16ccc:	ldr	ip, [sp, #76]	; 0x4c
   16cd0:	orr	r8, r8, #1
   16cd4:	str	r2, [sp, #12]
   16cd8:	str	r3, [sp]
   16cdc:	str	r8, [sp, #4]
   16ce0:	str	r5, [sp, #8]
   16ce4:	mov	r1, fp
   16ce8:	mov	r0, r7
   16cec:	str	ip, [sp, #16]
   16cf0:	mvn	r3, #0
   16cf4:	mov	r2, r6
   16cf8:	bl	14314 <__assert_fail@plt+0x3228>
   16cfc:	cmp	fp, r0
   16d00:	bhi	16d60 <__assert_fail@plt+0x5c74>
   16d04:	ldr	r3, [pc, #156]	; 16da8 <__assert_fail@plt+0x5cbc>
   16d08:	add	fp, r0, #1
   16d0c:	cmp	r7, r3
   16d10:	str	fp, [r4]
   16d14:	beq	16d20 <__assert_fail@plt+0x5c34>
   16d18:	mov	r0, r7
   16d1c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   16d20:	mov	r0, fp
   16d24:	bl	18c94 <__assert_fail@plt+0x7ba8>
   16d28:	ldr	lr, [sp, #76]	; 0x4c
   16d2c:	ldr	r3, [sp, #32]
   16d30:	ldr	ip, [sp, #72]	; 0x48
   16d34:	mov	r2, r6
   16d38:	mov	r1, fp
   16d3c:	str	r0, [r4, #4]
   16d40:	str	r3, [sp]
   16d44:	str	r5, [sp, #8]
   16d48:	str	r8, [sp, #4]
   16d4c:	str	lr, [sp, #16]
   16d50:	str	ip, [sp, #12]
   16d54:	mvn	r3, #0
   16d58:	mov	r7, r0
   16d5c:	bl	14314 <__assert_fail@plt+0x3228>
   16d60:	mov	r0, r7
   16d64:	str	sl, [r9]
   16d68:	add	sp, sp, #84	; 0x54
   16d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d70:	mov	r3, #8
   16d74:	str	r3, [sp]
   16d78:	add	r1, sp, #28
   16d7c:	rsb	r2, r2, #1
   16d80:	mvn	r3, #-2147483648	; 0x80000000
   16d84:	mov	r0, #0
   16d88:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16d8c:	mov	r4, r0
   16d90:	ldm	r8, {r0, r1}
   16d94:	str	r4, [r7]
   16d98:	stm	r4, {r0, r1}
   16d9c:	b	16c94 <__assert_fail@plt+0x5ba8>
   16da0:	andeq	sp, r2, r4, lsl #4
   16da4:	andeq	sp, r2, r0, lsr #2
   16da8:	andeq	sp, r2, r4, lsr r2
   16dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16db0:	mov	r6, r0
   16db4:	ldr	lr, [pc, #404]	; 16f50 <__assert_fail@plt+0x5e64>
   16db8:	sub	sp, sp, #84	; 0x54
   16dbc:	add	ip, sp, #32
   16dc0:	ldm	lr!, {r0, r1, r2, r3}
   16dc4:	ldr	r5, [pc, #392]	; 16f54 <__assert_fail@plt+0x5e68>
   16dc8:	stmia	ip!, {r0, r1, r2, r3}
   16dcc:	ldm	lr!, {r0, r1, r2, r3}
   16dd0:	ldr	r4, [sp, #44]	; 0x2c
   16dd4:	stmia	ip!, {r0, r1, r2, r3}
   16dd8:	ldm	lr, {r0, r1, r2, r3}
   16ddc:	mvn	lr, r4
   16de0:	and	lr, lr, #67108864	; 0x4000000
   16de4:	eor	lr, lr, r4
   16de8:	stm	ip, {r0, r1, r2, r3}
   16dec:	str	lr, [sp, #44]	; 0x2c
   16df0:	bl	10ff0 <__errno_location@plt>
   16df4:	ldr	r2, [r5, #4]
   16df8:	ldr	r4, [r5]
   16dfc:	cmp	r2, #0
   16e00:	mov	r8, r0
   16e04:	ldr	sl, [r0]
   16e08:	bgt	16e64 <__assert_fail@plt+0x5d78>
   16e0c:	add	r7, r5, #8
   16e10:	cmp	r4, r7
   16e14:	str	r2, [sp, #28]
   16e18:	beq	16f20 <__assert_fail@plt+0x5e34>
   16e1c:	mov	r3, #8
   16e20:	mov	r0, r4
   16e24:	str	r3, [sp]
   16e28:	rsb	r2, r2, #1
   16e2c:	mvn	r3, #-2147483648	; 0x80000000
   16e30:	add	r1, sp, #28
   16e34:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16e38:	mov	r4, r0
   16e3c:	str	r0, [r5]
   16e40:	ldr	r0, [r5, #4]
   16e44:	ldr	r2, [sp, #28]
   16e48:	mov	r1, #0
   16e4c:	sub	r2, r2, r0
   16e50:	add	r0, r4, r0, lsl #3
   16e54:	lsl	r2, r2, #3
   16e58:	bl	11008 <memset@plt>
   16e5c:	ldr	r3, [sp, #28]
   16e60:	str	r3, [r5, #4]
   16e64:	ldr	r7, [sp, #36]	; 0x24
   16e68:	ldr	r9, [r4]
   16e6c:	ldr	r5, [r4, #4]
   16e70:	ldr	r2, [sp, #72]	; 0x48
   16e74:	ldr	r3, [sp, #32]
   16e78:	ldr	ip, [sp, #76]	; 0x4c
   16e7c:	orr	r7, r7, #1
   16e80:	add	fp, sp, #40	; 0x28
   16e84:	str	r2, [sp, #12]
   16e88:	str	r3, [sp]
   16e8c:	str	r7, [sp, #4]
   16e90:	mov	r1, r9
   16e94:	mov	r0, r5
   16e98:	str	ip, [sp, #16]
   16e9c:	str	fp, [sp, #8]
   16ea0:	mvn	r3, #0
   16ea4:	mov	r2, r6
   16ea8:	bl	14314 <__assert_fail@plt+0x3228>
   16eac:	cmp	r9, r0
   16eb0:	bhi	16f10 <__assert_fail@plt+0x5e24>
   16eb4:	ldr	r3, [pc, #156]	; 16f58 <__assert_fail@plt+0x5e6c>
   16eb8:	add	r9, r0, #1
   16ebc:	cmp	r5, r3
   16ec0:	str	r9, [r4]
   16ec4:	beq	16ed0 <__assert_fail@plt+0x5de4>
   16ec8:	mov	r0, r5
   16ecc:	bl	13d58 <__assert_fail@plt+0x2c6c>
   16ed0:	mov	r0, r9
   16ed4:	bl	18c94 <__assert_fail@plt+0x7ba8>
   16ed8:	ldr	lr, [sp, #76]	; 0x4c
   16edc:	ldr	r3, [sp, #32]
   16ee0:	ldr	ip, [sp, #72]	; 0x48
   16ee4:	mov	r2, r6
   16ee8:	mov	r1, r9
   16eec:	str	r0, [r4, #4]
   16ef0:	str	r3, [sp]
   16ef4:	str	fp, [sp, #8]
   16ef8:	str	r7, [sp, #4]
   16efc:	str	lr, [sp, #16]
   16f00:	str	ip, [sp, #12]
   16f04:	mvn	r3, #0
   16f08:	mov	r5, r0
   16f0c:	bl	14314 <__assert_fail@plt+0x3228>
   16f10:	mov	r0, r5
   16f14:	str	sl, [r8]
   16f18:	add	sp, sp, #84	; 0x54
   16f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f20:	mov	r3, #8
   16f24:	str	r3, [sp]
   16f28:	add	r1, sp, #28
   16f2c:	rsb	r2, r2, #1
   16f30:	mvn	r3, #-2147483648	; 0x80000000
   16f34:	mov	r0, #0
   16f38:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16f3c:	mov	r4, r0
   16f40:	ldm	r7, {r0, r1}
   16f44:	str	r4, [r5]
   16f48:	stm	r4, {r0, r1}
   16f4c:	b	16e40 <__assert_fail@plt+0x5d54>
   16f50:	andeq	sp, r2, r4, lsl #4
   16f54:	andeq	sp, r2, r0, lsr #2
   16f58:	andeq	sp, r2, r4, lsr r2
   16f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f60:	mov	r9, r0
   16f64:	ldr	lr, [pc, #416]	; 1710c <__assert_fail@plt+0x6020>
   16f68:	mov	sl, r1
   16f6c:	sub	sp, sp, #92	; 0x5c
   16f70:	ldm	lr!, {r0, r1, r2, r3}
   16f74:	add	ip, sp, #40	; 0x28
   16f78:	ldr	r5, [pc, #400]	; 17110 <__assert_fail@plt+0x6024>
   16f7c:	stmia	ip!, {r0, r1, r2, r3}
   16f80:	ldm	lr!, {r0, r1, r2, r3}
   16f84:	ldr	r4, [sp, #52]	; 0x34
   16f88:	stmia	ip!, {r0, r1, r2, r3}
   16f8c:	ldm	lr, {r0, r1, r2, r3}
   16f90:	mvn	lr, r4
   16f94:	and	lr, lr, #67108864	; 0x4000000
   16f98:	eor	lr, lr, r4
   16f9c:	stm	ip, {r0, r1, r2, r3}
   16fa0:	str	lr, [sp, #52]	; 0x34
   16fa4:	bl	10ff0 <__errno_location@plt>
   16fa8:	ldr	r2, [r5, #4]
   16fac:	ldr	r4, [r5]
   16fb0:	cmp	r2, #0
   16fb4:	ldr	r3, [r0]
   16fb8:	mov	r7, r0
   16fbc:	str	r3, [sp, #28]
   16fc0:	bgt	1701c <__assert_fail@plt+0x5f30>
   16fc4:	add	r6, r5, #8
   16fc8:	cmp	r4, r6
   16fcc:	str	r2, [sp, #36]	; 0x24
   16fd0:	beq	170dc <__assert_fail@plt+0x5ff0>
   16fd4:	mov	r3, #8
   16fd8:	mov	r0, r4
   16fdc:	str	r3, [sp]
   16fe0:	rsb	r2, r2, #1
   16fe4:	mvn	r3, #-2147483648	; 0x80000000
   16fe8:	add	r1, sp, #36	; 0x24
   16fec:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   16ff0:	mov	r4, r0
   16ff4:	str	r0, [r5]
   16ff8:	ldr	r0, [r5, #4]
   16ffc:	ldr	r2, [sp, #36]	; 0x24
   17000:	mov	r1, #0
   17004:	sub	r2, r2, r0
   17008:	add	r0, r4, r0, lsl #3
   1700c:	lsl	r2, r2, #3
   17010:	bl	11008 <memset@plt>
   17014:	ldr	r3, [sp, #36]	; 0x24
   17018:	str	r3, [r5, #4]
   1701c:	ldr	r6, [sp, #44]	; 0x2c
   17020:	ldr	r8, [r4]
   17024:	ldr	r5, [r4, #4]
   17028:	ldr	r2, [sp, #80]	; 0x50
   1702c:	ldr	r3, [sp, #40]	; 0x28
   17030:	ldr	ip, [sp, #84]	; 0x54
   17034:	orr	r6, r6, #1
   17038:	add	fp, sp, #48	; 0x30
   1703c:	str	r2, [sp, #12]
   17040:	str	r3, [sp]
   17044:	str	r6, [sp, #4]
   17048:	mov	r1, r8
   1704c:	mov	r0, r5
   17050:	str	ip, [sp, #16]
   17054:	str	fp, [sp, #8]
   17058:	mov	r3, sl
   1705c:	mov	r2, r9
   17060:	bl	14314 <__assert_fail@plt+0x3228>
   17064:	cmp	r8, r0
   17068:	bhi	170c8 <__assert_fail@plt+0x5fdc>
   1706c:	ldr	r3, [pc, #160]	; 17114 <__assert_fail@plt+0x6028>
   17070:	add	r8, r0, #1
   17074:	cmp	r5, r3
   17078:	str	r8, [r4]
   1707c:	beq	17088 <__assert_fail@plt+0x5f9c>
   17080:	mov	r0, r5
   17084:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17088:	mov	r0, r8
   1708c:	bl	18c94 <__assert_fail@plt+0x7ba8>
   17090:	ldr	ip, [sp, #84]	; 0x54
   17094:	ldr	lr, [sp, #40]	; 0x28
   17098:	mov	r3, sl
   1709c:	mov	r2, r9
   170a0:	mov	r1, r8
   170a4:	str	r0, [r4, #4]
   170a8:	ldr	r4, [sp, #80]	; 0x50
   170ac:	str	fp, [sp, #8]
   170b0:	str	r6, [sp, #4]
   170b4:	str	ip, [sp, #16]
   170b8:	str	r4, [sp, #12]
   170bc:	str	lr, [sp]
   170c0:	mov	r5, r0
   170c4:	bl	14314 <__assert_fail@plt+0x3228>
   170c8:	ldr	r3, [sp, #28]
   170cc:	mov	r0, r5
   170d0:	str	r3, [r7]
   170d4:	add	sp, sp, #92	; 0x5c
   170d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170dc:	mov	r3, #8
   170e0:	str	r3, [sp]
   170e4:	add	r1, sp, #36	; 0x24
   170e8:	rsb	r2, r2, #1
   170ec:	mvn	r3, #-2147483648	; 0x80000000
   170f0:	mov	r0, #0
   170f4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   170f8:	mov	r4, r0
   170fc:	ldm	r6, {r0, r1}
   17100:	str	r4, [r5]
   17104:	stm	r4, {r0, r1}
   17108:	b	16ff8 <__assert_fail@plt+0x5f0c>
   1710c:	andeq	sp, r2, r4, lsl #4
   17110:	andeq	sp, r2, r0, lsr #2
   17114:	andeq	sp, r2, r4, lsr r2
   17118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1711c:	sub	sp, sp, #180	; 0xb4
   17120:	mov	r6, r1
   17124:	mov	r4, r0
   17128:	mov	r9, r2
   1712c:	add	r0, sp, #80	; 0x50
   17130:	mov	r2, #48	; 0x30
   17134:	mov	r1, #0
   17138:	bl	11008 <memset@plt>
   1713c:	cmp	r6, #10
   17140:	beq	17320 <__assert_fail@plt+0x6234>
   17144:	add	r5, sp, #80	; 0x50
   17148:	str	r6, [sp, #80]	; 0x50
   1714c:	ldm	r5!, {r0, r1, r2, r3}
   17150:	add	ip, sp, #128	; 0x80
   17154:	mov	r7, ip
   17158:	add	lr, sp, #32
   1715c:	stmia	ip!, {r0, r1, r2, r3}
   17160:	mov	r8, #67108864	; 0x4000000
   17164:	ldm	r5!, {r0, r1, r2, r3}
   17168:	ldr	r6, [pc, #436]	; 17324 <__assert_fail@plt+0x6238>
   1716c:	stmia	ip!, {r0, r1, r2, r3}
   17170:	ldm	r5, {r0, r1, r2, r3}
   17174:	stm	ip, {r0, r1, r2, r3}
   17178:	ldm	r7!, {r0, r1, r2, r3}
   1717c:	stmia	lr!, {r0, r1, r2, r3}
   17180:	ldm	r7!, {r0, r1, r2, r3}
   17184:	str	r8, [sp, #44]	; 0x2c
   17188:	stmia	lr!, {r0, r1, r2, r3}
   1718c:	ldm	ip, {r0, r1, r2, r3}
   17190:	stm	lr, {r0, r1, r2, r3}
   17194:	bl	10ff0 <__errno_location@plt>
   17198:	cmn	r4, #-2147483647	; 0x80000001
   1719c:	ldr	r5, [r6]
   171a0:	mov	r7, r0
   171a4:	movne	r0, #0
   171a8:	moveq	r0, #1
   171ac:	ldr	r3, [r7]
   171b0:	orrs	r0, r0, r4, lsr #31
   171b4:	str	r3, [sp, #24]
   171b8:	bne	17320 <__assert_fail@plt+0x6234>
   171bc:	ldr	r2, [r6, #4]
   171c0:	cmp	r4, r2
   171c4:	blt	17224 <__assert_fail@plt+0x6138>
   171c8:	add	r8, r6, #8
   171cc:	cmp	r5, r8
   171d0:	str	r2, [sp, #80]	; 0x50
   171d4:	beq	172f0 <__assert_fail@plt+0x6204>
   171d8:	mov	r3, #8
   171dc:	sub	r2, r4, r2
   171e0:	mov	r0, r5
   171e4:	str	r3, [sp]
   171e8:	add	r2, r2, #1
   171ec:	add	r1, sp, #80	; 0x50
   171f0:	mvn	r3, #-2147483648	; 0x80000000
   171f4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   171f8:	mov	r5, r0
   171fc:	str	r0, [r6]
   17200:	ldr	r0, [r6, #4]
   17204:	ldr	r2, [sp, #80]	; 0x50
   17208:	mov	r1, #0
   1720c:	sub	r2, r2, r0
   17210:	add	r0, r5, r0, lsl #3
   17214:	lsl	r2, r2, #3
   17218:	bl	11008 <memset@plt>
   1721c:	ldr	r3, [sp, #80]	; 0x50
   17220:	str	r3, [r6, #4]
   17224:	add	fp, r5, r4, lsl #3
   17228:	ldr	r1, [sp, #36]	; 0x24
   1722c:	ldr	r8, [r5, r4, lsl #3]
   17230:	ldr	r6, [fp, #4]
   17234:	ldr	r2, [sp, #72]	; 0x48
   17238:	ldr	r3, [sp, #32]
   1723c:	ldr	ip, [sp, #76]	; 0x4c
   17240:	orr	r1, r1, #1
   17244:	add	sl, sp, #40	; 0x28
   17248:	str	r1, [sp, #28]
   1724c:	str	r1, [sp, #4]
   17250:	str	r2, [sp, #12]
   17254:	str	r3, [sp]
   17258:	mov	r0, r6
   1725c:	mov	r1, r8
   17260:	str	ip, [sp, #16]
   17264:	str	sl, [sp, #8]
   17268:	mvn	r3, #0
   1726c:	mov	r2, r9
   17270:	bl	14314 <__assert_fail@plt+0x3228>
   17274:	cmp	r8, r0
   17278:	bhi	172dc <__assert_fail@plt+0x61f0>
   1727c:	ldr	r3, [pc, #164]	; 17328 <__assert_fail@plt+0x623c>
   17280:	add	r8, r0, #1
   17284:	cmp	r6, r3
   17288:	str	r8, [r5, r4, lsl #3]
   1728c:	beq	17298 <__assert_fail@plt+0x61ac>
   17290:	mov	r0, r6
   17294:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17298:	mov	r0, r8
   1729c:	bl	18c94 <__assert_fail@plt+0x7ba8>
   172a0:	ldr	lr, [sp, #76]	; 0x4c
   172a4:	ldr	r3, [sp, #32]
   172a8:	ldr	ip, [sp, #72]	; 0x48
   172ac:	ldr	r4, [sp, #28]
   172b0:	mov	r2, r9
   172b4:	mov	r1, r8
   172b8:	str	r0, [fp, #4]
   172bc:	str	r3, [sp]
   172c0:	str	sl, [sp, #8]
   172c4:	str	r4, [sp, #4]
   172c8:	str	lr, [sp, #16]
   172cc:	str	ip, [sp, #12]
   172d0:	mvn	r3, #0
   172d4:	mov	r6, r0
   172d8:	bl	14314 <__assert_fail@plt+0x3228>
   172dc:	ldr	r3, [sp, #24]
   172e0:	mov	r0, r6
   172e4:	str	r3, [r7]
   172e8:	add	sp, sp, #180	; 0xb4
   172ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f0:	mov	r3, #8
   172f4:	sub	r2, r4, r2
   172f8:	add	r1, sp, #80	; 0x50
   172fc:	str	r3, [sp]
   17300:	add	r2, r2, #1
   17304:	mvn	r3, #-2147483648	; 0x80000000
   17308:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   1730c:	mov	r5, r0
   17310:	ldm	r8, {r0, r1}
   17314:	str	r5, [r6]
   17318:	stm	r5, {r0, r1}
   1731c:	b	17200 <__assert_fail@plt+0x6114>
   17320:	bl	110d4 <abort@plt>
   17324:	andeq	sp, r2, r0, lsr #2
   17328:	andeq	sp, r2, r4, lsr r2
   1732c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17330:	mov	r7, r1
   17334:	ldr	lr, [pc, #492]	; 17528 <__assert_fail@plt+0x643c>
   17338:	mov	r8, r2
   1733c:	mov	r4, r0
   17340:	mov	fp, r3
   17344:	ldm	lr!, {r0, r1, r2, r3}
   17348:	sub	sp, sp, #100	; 0x64
   1734c:	add	ip, sp, #48	; 0x30
   17350:	mov	sl, #10
   17354:	stmia	ip!, {r0, r1, r2, r3}
   17358:	cmp	r8, #0
   1735c:	cmpne	r7, #0
   17360:	ldm	lr!, {r0, r1, r2, r3}
   17364:	str	sl, [sp, #48]	; 0x30
   17368:	stmia	ip!, {r0, r1, r2, r3}
   1736c:	ldm	lr, {r0, r1, r2, r3}
   17370:	stm	ip, {r0, r1, r2, r3}
   17374:	beq	17524 <__assert_fail@plt+0x6438>
   17378:	str	r7, [sp, #88]	; 0x58
   1737c:	str	r8, [sp, #92]	; 0x5c
   17380:	bl	10ff0 <__errno_location@plt>
   17384:	ldr	r6, [pc, #416]	; 1752c <__assert_fail@plt+0x6440>
   17388:	cmn	r4, #-2147483647	; 0x80000001
   1738c:	ldr	r5, [r6]
   17390:	mov	r9, r0
   17394:	movne	r0, #0
   17398:	moveq	r0, #1
   1739c:	ldr	r3, [r9]
   173a0:	orrs	r0, r0, r4, lsr #31
   173a4:	str	r3, [sp, #28]
   173a8:	bne	17524 <__assert_fail@plt+0x6438>
   173ac:	ldr	r2, [r6, #4]
   173b0:	cmp	r4, r2
   173b4:	movlt	r3, sl
   173b8:	blt	17424 <__assert_fail@plt+0x6338>
   173bc:	add	r7, r6, #8
   173c0:	cmp	r5, r7
   173c4:	str	r2, [sp, #44]	; 0x2c
   173c8:	beq	174f4 <__assert_fail@plt+0x6408>
   173cc:	mov	r3, #8
   173d0:	sub	r2, r4, r2
   173d4:	mov	r0, r5
   173d8:	str	r3, [sp]
   173dc:	add	r2, r2, #1
   173e0:	mvn	r3, #-2147483648	; 0x80000000
   173e4:	add	r1, sp, #44	; 0x2c
   173e8:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   173ec:	mov	r5, r0
   173f0:	str	r0, [r6]
   173f4:	ldr	r0, [r6, #4]
   173f8:	ldr	r2, [sp, #44]	; 0x2c
   173fc:	mov	r1, #0
   17400:	sub	r2, r2, r0
   17404:	add	r0, r5, r0, lsl #3
   17408:	lsl	r2, r2, #3
   1740c:	bl	11008 <memset@plt>
   17410:	ldr	r3, [sp, #48]	; 0x30
   17414:	ldr	r7, [sp, #88]	; 0x58
   17418:	ldr	r8, [sp, #92]	; 0x5c
   1741c:	ldr	r2, [sp, #44]	; 0x2c
   17420:	str	r2, [r6, #4]
   17424:	add	r2, r5, r4, lsl #3
   17428:	mov	r1, r2
   1742c:	str	r2, [sp, #32]
   17430:	ldr	r2, [sp, #52]	; 0x34
   17434:	ldr	r6, [r1, #4]
   17438:	ldr	sl, [r5, r4, lsl #3]
   1743c:	orr	r2, r2, #1
   17440:	str	r3, [sp]
   17444:	add	r3, sp, #56	; 0x38
   17448:	str	r2, [sp, #36]	; 0x24
   1744c:	str	r2, [sp, #4]
   17450:	str	r3, [sp, #8]
   17454:	mov	r0, r6
   17458:	str	r8, [sp, #16]
   1745c:	str	r7, [sp, #12]
   17460:	mov	r1, sl
   17464:	mvn	r3, #0
   17468:	mov	r2, fp
   1746c:	bl	14314 <__assert_fail@plt+0x3228>
   17470:	cmp	sl, r0
   17474:	bhi	174e0 <__assert_fail@plt+0x63f4>
   17478:	ldr	r3, [pc, #176]	; 17530 <__assert_fail@plt+0x6444>
   1747c:	add	r7, r0, #1
   17480:	cmp	r6, r3
   17484:	str	r7, [r5, r4, lsl #3]
   17488:	beq	17494 <__assert_fail@plt+0x63a8>
   1748c:	mov	r0, r6
   17490:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17494:	mov	r0, r7
   17498:	bl	18c94 <__assert_fail@plt+0x7ba8>
   1749c:	ldr	r3, [sp, #32]
   174a0:	ldr	lr, [sp, #92]	; 0x5c
   174a4:	ldr	ip, [sp, #88]	; 0x58
   174a8:	ldr	r4, [sp, #36]	; 0x24
   174ac:	mov	r2, fp
   174b0:	mov	r1, r7
   174b4:	str	r0, [r3, #4]
   174b8:	add	r3, sp, #56	; 0x38
   174bc:	str	r3, [sp, #8]
   174c0:	ldr	r3, [sp, #48]	; 0x30
   174c4:	str	r4, [sp, #4]
   174c8:	str	r3, [sp]
   174cc:	str	lr, [sp, #16]
   174d0:	str	ip, [sp, #12]
   174d4:	mvn	r3, #0
   174d8:	mov	r6, r0
   174dc:	bl	14314 <__assert_fail@plt+0x3228>
   174e0:	ldr	r3, [sp, #28]
   174e4:	mov	r0, r6
   174e8:	str	r3, [r9]
   174ec:	add	sp, sp, #100	; 0x64
   174f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174f4:	mov	r3, #8
   174f8:	sub	r2, r4, r2
   174fc:	str	r3, [sp]
   17500:	add	r1, sp, #44	; 0x2c
   17504:	add	r2, r2, #1
   17508:	mvn	r3, #-2147483648	; 0x80000000
   1750c:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17510:	mov	r5, r0
   17514:	ldm	r7, {r0, r1}
   17518:	str	r5, [r6]
   1751c:	stm	r5, {r0, r1}
   17520:	b	173f4 <__assert_fail@plt+0x6308>
   17524:	bl	110d4 <abort@plt>
   17528:	andeq	sp, r2, r4, lsl #4
   1752c:	andeq	sp, r2, r0, lsr #2
   17530:	andeq	sp, r2, r4, lsr r2
   17534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17538:	mov	r7, r1
   1753c:	ldr	lr, [pc, #492]	; 17730 <__assert_fail@plt+0x6644>
   17540:	mov	r8, r2
   17544:	mov	r4, r0
   17548:	mov	fp, r3
   1754c:	ldm	lr!, {r0, r1, r2, r3}
   17550:	sub	sp, sp, #100	; 0x64
   17554:	add	ip, sp, #48	; 0x30
   17558:	mov	sl, #10
   1755c:	stmia	ip!, {r0, r1, r2, r3}
   17560:	cmp	r8, #0
   17564:	cmpne	r7, #0
   17568:	ldm	lr!, {r0, r1, r2, r3}
   1756c:	str	sl, [sp, #48]	; 0x30
   17570:	stmia	ip!, {r0, r1, r2, r3}
   17574:	ldm	lr, {r0, r1, r2, r3}
   17578:	stm	ip, {r0, r1, r2, r3}
   1757c:	beq	1772c <__assert_fail@plt+0x6640>
   17580:	str	r7, [sp, #88]	; 0x58
   17584:	str	r8, [sp, #92]	; 0x5c
   17588:	bl	10ff0 <__errno_location@plt>
   1758c:	ldr	r6, [pc, #416]	; 17734 <__assert_fail@plt+0x6648>
   17590:	cmn	r4, #-2147483647	; 0x80000001
   17594:	ldr	r5, [r6]
   17598:	mov	r9, r0
   1759c:	movne	r0, #0
   175a0:	moveq	r0, #1
   175a4:	ldr	r3, [r9]
   175a8:	orrs	r0, r0, r4, lsr #31
   175ac:	str	r3, [sp, #28]
   175b0:	bne	1772c <__assert_fail@plt+0x6640>
   175b4:	ldr	r2, [r6, #4]
   175b8:	cmp	r4, r2
   175bc:	movlt	r3, sl
   175c0:	blt	1762c <__assert_fail@plt+0x6540>
   175c4:	add	r7, r6, #8
   175c8:	cmp	r5, r7
   175cc:	str	r2, [sp, #44]	; 0x2c
   175d0:	beq	176fc <__assert_fail@plt+0x6610>
   175d4:	mov	r3, #8
   175d8:	sub	r2, r4, r2
   175dc:	mov	r0, r5
   175e0:	str	r3, [sp]
   175e4:	add	r2, r2, #1
   175e8:	mvn	r3, #-2147483648	; 0x80000000
   175ec:	add	r1, sp, #44	; 0x2c
   175f0:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   175f4:	mov	r5, r0
   175f8:	str	r0, [r6]
   175fc:	ldr	r0, [r6, #4]
   17600:	ldr	r2, [sp, #44]	; 0x2c
   17604:	mov	r1, #0
   17608:	sub	r2, r2, r0
   1760c:	add	r0, r5, r0, lsl #3
   17610:	lsl	r2, r2, #3
   17614:	bl	11008 <memset@plt>
   17618:	ldr	r3, [sp, #48]	; 0x30
   1761c:	ldr	r7, [sp, #88]	; 0x58
   17620:	ldr	r8, [sp, #92]	; 0x5c
   17624:	ldr	r2, [sp, #44]	; 0x2c
   17628:	str	r2, [r6, #4]
   1762c:	add	r2, r5, r4, lsl #3
   17630:	mov	r1, r2
   17634:	str	r2, [sp, #32]
   17638:	ldr	r2, [sp, #52]	; 0x34
   1763c:	ldr	r6, [r1, #4]
   17640:	ldr	sl, [r5, r4, lsl #3]
   17644:	orr	r2, r2, #1
   17648:	str	r3, [sp]
   1764c:	add	r3, sp, #56	; 0x38
   17650:	str	r2, [sp, #36]	; 0x24
   17654:	str	r2, [sp, #4]
   17658:	str	r3, [sp, #8]
   1765c:	mov	r0, r6
   17660:	str	r8, [sp, #16]
   17664:	str	r7, [sp, #12]
   17668:	mov	r1, sl
   1766c:	ldr	r3, [sp, #136]	; 0x88
   17670:	mov	r2, fp
   17674:	bl	14314 <__assert_fail@plt+0x3228>
   17678:	cmp	sl, r0
   1767c:	bhi	176e8 <__assert_fail@plt+0x65fc>
   17680:	ldr	r3, [pc, #176]	; 17738 <__assert_fail@plt+0x664c>
   17684:	add	r7, r0, #1
   17688:	cmp	r6, r3
   1768c:	str	r7, [r5, r4, lsl #3]
   17690:	beq	1769c <__assert_fail@plt+0x65b0>
   17694:	mov	r0, r6
   17698:	bl	13d58 <__assert_fail@plt+0x2c6c>
   1769c:	mov	r0, r7
   176a0:	bl	18c94 <__assert_fail@plt+0x7ba8>
   176a4:	ldr	r3, [sp, #32]
   176a8:	ldr	lr, [sp, #92]	; 0x5c
   176ac:	ldr	ip, [sp, #88]	; 0x58
   176b0:	ldr	r4, [sp, #36]	; 0x24
   176b4:	mov	r2, fp
   176b8:	mov	r1, r7
   176bc:	str	r0, [r3, #4]
   176c0:	add	r3, sp, #56	; 0x38
   176c4:	str	r3, [sp, #8]
   176c8:	ldr	r3, [sp, #48]	; 0x30
   176cc:	str	r4, [sp, #4]
   176d0:	str	r3, [sp]
   176d4:	str	lr, [sp, #16]
   176d8:	str	ip, [sp, #12]
   176dc:	ldr	r3, [sp, #136]	; 0x88
   176e0:	mov	r6, r0
   176e4:	bl	14314 <__assert_fail@plt+0x3228>
   176e8:	ldr	r3, [sp, #28]
   176ec:	mov	r0, r6
   176f0:	str	r3, [r9]
   176f4:	add	sp, sp, #100	; 0x64
   176f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176fc:	mov	r3, #8
   17700:	sub	r2, r4, r2
   17704:	str	r3, [sp]
   17708:	add	r1, sp, #44	; 0x2c
   1770c:	add	r2, r2, #1
   17710:	mvn	r3, #-2147483648	; 0x80000000
   17714:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17718:	mov	r5, r0
   1771c:	ldm	r7, {r0, r1}
   17720:	str	r5, [r6]
   17724:	stm	r5, {r0, r1}
   17728:	b	175fc <__assert_fail@plt+0x6510>
   1772c:	bl	110d4 <abort@plt>
   17730:	andeq	sp, r2, r4, lsl #4
   17734:	andeq	sp, r2, r0, lsr #2
   17738:	andeq	sp, r2, r4, lsr r2
   1773c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17740:	mov	r5, r0
   17744:	ldr	lr, [pc, #452]	; 17910 <__assert_fail@plt+0x6824>
   17748:	mov	r6, r1
   1774c:	mov	sl, r2
   17750:	ldm	lr!, {r0, r1, r2, r3}
   17754:	sub	sp, sp, #92	; 0x5c
   17758:	add	ip, sp, #40	; 0x28
   1775c:	cmp	r6, #0
   17760:	cmpne	r5, #0
   17764:	stmia	ip!, {r0, r1, r2, r3}
   17768:	mov	r9, #10
   1776c:	ldm	lr!, {r0, r1, r2, r3}
   17770:	moveq	fp, #1
   17774:	movne	fp, #0
   17778:	str	r9, [sp, #40]	; 0x28
   1777c:	stmia	ip!, {r0, r1, r2, r3}
   17780:	ldm	lr, {r0, r1, r2, r3}
   17784:	stm	ip, {r0, r1, r2, r3}
   17788:	beq	1790c <__assert_fail@plt+0x6820>
   1778c:	str	r5, [sp, #80]	; 0x50
   17790:	str	r6, [sp, #84]	; 0x54
   17794:	bl	10ff0 <__errno_location@plt>
   17798:	ldr	r7, [pc, #372]	; 17914 <__assert_fail@plt+0x6828>
   1779c:	ldr	r2, [r7, #4]
   177a0:	ldr	r4, [r7]
   177a4:	cmp	r2, #0
   177a8:	ldr	r3, [r0]
   177ac:	mov	r8, r0
   177b0:	str	r3, [sp, #24]
   177b4:	movgt	r3, r9
   177b8:	bgt	17820 <__assert_fail@plt+0x6734>
   177bc:	add	r5, r7, #8
   177c0:	cmp	r4, r5
   177c4:	str	r2, [sp, #36]	; 0x24
   177c8:	beq	178dc <__assert_fail@plt+0x67f0>
   177cc:	mov	r3, #8
   177d0:	mov	r0, r4
   177d4:	str	r3, [sp]
   177d8:	rsb	r2, r2, #1
   177dc:	mvn	r3, #-2147483648	; 0x80000000
   177e0:	add	r1, sp, #36	; 0x24
   177e4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   177e8:	mov	r4, r0
   177ec:	str	r0, [r7]
   177f0:	ldr	r0, [r7, #4]
   177f4:	ldr	r2, [sp, #36]	; 0x24
   177f8:	mov	r1, #0
   177fc:	sub	r2, r2, r0
   17800:	add	r0, r4, r0, lsl #3
   17804:	lsl	r2, r2, #3
   17808:	bl	11008 <memset@plt>
   1780c:	ldr	r3, [sp, #40]	; 0x28
   17810:	ldr	r5, [sp, #80]	; 0x50
   17814:	ldr	r6, [sp, #84]	; 0x54
   17818:	ldr	r2, [sp, #36]	; 0x24
   1781c:	str	r2, [r7, #4]
   17820:	ldr	r2, [sp, #44]	; 0x2c
   17824:	ldr	r9, [r4]
   17828:	ldr	r7, [r4, #4]
   1782c:	orr	r2, r2, #1
   17830:	add	fp, sp, #48	; 0x30
   17834:	str	r2, [sp, #28]
   17838:	str	r2, [sp, #4]
   1783c:	str	r3, [sp]
   17840:	str	r6, [sp, #16]
   17844:	str	r5, [sp, #12]
   17848:	mov	r1, r9
   1784c:	mov	r0, r7
   17850:	str	fp, [sp, #8]
   17854:	mvn	r3, #0
   17858:	mov	r2, sl
   1785c:	bl	14314 <__assert_fail@plt+0x3228>
   17860:	cmp	r9, r0
   17864:	bhi	178c8 <__assert_fail@plt+0x67dc>
   17868:	ldr	r3, [pc, #168]	; 17918 <__assert_fail@plt+0x682c>
   1786c:	add	r5, r0, #1
   17870:	cmp	r7, r3
   17874:	str	r5, [r4]
   17878:	beq	17884 <__assert_fail@plt+0x6798>
   1787c:	mov	r0, r7
   17880:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17884:	mov	r0, r5
   17888:	bl	18c94 <__assert_fail@plt+0x7ba8>
   1788c:	ldr	lr, [sp, #84]	; 0x54
   17890:	ldr	r3, [sp, #40]	; 0x28
   17894:	ldr	ip, [sp, #80]	; 0x50
   17898:	mov	r2, sl
   1789c:	mov	r1, r5
   178a0:	str	r0, [r4, #4]
   178a4:	ldr	r4, [sp, #28]
   178a8:	str	r3, [sp]
   178ac:	str	fp, [sp, #8]
   178b0:	str	r4, [sp, #4]
   178b4:	str	lr, [sp, #16]
   178b8:	str	ip, [sp, #12]
   178bc:	mvn	r3, #0
   178c0:	mov	r7, r0
   178c4:	bl	14314 <__assert_fail@plt+0x3228>
   178c8:	ldr	r3, [sp, #24]
   178cc:	mov	r0, r7
   178d0:	str	r3, [r8]
   178d4:	add	sp, sp, #92	; 0x5c
   178d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178dc:	mov	r3, #8
   178e0:	str	r3, [sp]
   178e4:	add	r1, sp, #36	; 0x24
   178e8:	rsb	r2, r2, #1
   178ec:	mov	r0, fp
   178f0:	mvn	r3, #-2147483648	; 0x80000000
   178f4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   178f8:	mov	r4, r0
   178fc:	ldm	r5, {r0, r1}
   17900:	str	r4, [r7]
   17904:	stm	r4, {r0, r1}
   17908:	b	177f0 <__assert_fail@plt+0x6704>
   1790c:	bl	110d4 <abort@plt>
   17910:	andeq	sp, r2, r4, lsl #4
   17914:	andeq	sp, r2, r0, lsr #2
   17918:	andeq	sp, r2, r4, lsr r2
   1791c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17920:	mov	r5, r0
   17924:	ldr	lr, [pc, #464]	; 17afc <__assert_fail@plt+0x6a10>
   17928:	mov	r6, r1
   1792c:	mov	sl, r2
   17930:	mov	fp, r3
   17934:	ldm	lr!, {r0, r1, r2, r3}
   17938:	sub	sp, sp, #92	; 0x5c
   1793c:	add	ip, sp, #40	; 0x28
   17940:	cmp	r6, #0
   17944:	cmpne	r5, #0
   17948:	stmia	ip!, {r0, r1, r2, r3}
   1794c:	moveq	r4, #1
   17950:	ldm	lr!, {r0, r1, r2, r3}
   17954:	movne	r4, #0
   17958:	mov	r9, #10
   1795c:	str	r4, [sp, #28]
   17960:	stmia	ip!, {r0, r1, r2, r3}
   17964:	ldm	lr, {r0, r1, r2, r3}
   17968:	str	r9, [sp, #40]	; 0x28
   1796c:	stm	ip, {r0, r1, r2, r3}
   17970:	beq	17af8 <__assert_fail@plt+0x6a0c>
   17974:	str	r5, [sp, #80]	; 0x50
   17978:	str	r6, [sp, #84]	; 0x54
   1797c:	bl	10ff0 <__errno_location@plt>
   17980:	ldr	r7, [pc, #376]	; 17b00 <__assert_fail@plt+0x6a14>
   17984:	ldr	r2, [r7, #4]
   17988:	ldr	r4, [r7]
   1798c:	cmp	r2, #0
   17990:	ldr	r3, [r0]
   17994:	mov	r8, r0
   17998:	str	r3, [sp, #24]
   1799c:	movgt	r3, r9
   179a0:	bgt	17a08 <__assert_fail@plt+0x691c>
   179a4:	add	r5, r7, #8
   179a8:	cmp	r4, r5
   179ac:	str	r2, [sp, #36]	; 0x24
   179b0:	beq	17ac8 <__assert_fail@plt+0x69dc>
   179b4:	mov	r3, #8
   179b8:	mov	r0, r4
   179bc:	str	r3, [sp]
   179c0:	rsb	r2, r2, #1
   179c4:	mvn	r3, #-2147483648	; 0x80000000
   179c8:	add	r1, sp, #36	; 0x24
   179cc:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   179d0:	mov	r4, r0
   179d4:	str	r0, [r7]
   179d8:	ldr	r0, [r7, #4]
   179dc:	ldr	r2, [sp, #36]	; 0x24
   179e0:	mov	r1, #0
   179e4:	sub	r2, r2, r0
   179e8:	add	r0, r4, r0, lsl #3
   179ec:	lsl	r2, r2, #3
   179f0:	bl	11008 <memset@plt>
   179f4:	ldr	r3, [sp, #40]	; 0x28
   179f8:	ldr	r5, [sp, #80]	; 0x50
   179fc:	ldr	r6, [sp, #84]	; 0x54
   17a00:	ldr	r2, [sp, #36]	; 0x24
   17a04:	str	r2, [r7, #4]
   17a08:	ldr	r2, [sp, #44]	; 0x2c
   17a0c:	ldr	r9, [r4]
   17a10:	ldr	r7, [r4, #4]
   17a14:	orr	r2, r2, #1
   17a18:	str	r3, [sp]
   17a1c:	add	r3, sp, #48	; 0x30
   17a20:	str	r2, [sp, #28]
   17a24:	str	r2, [sp, #4]
   17a28:	str	r3, [sp, #8]
   17a2c:	str	r6, [sp, #16]
   17a30:	str	r5, [sp, #12]
   17a34:	mov	r1, r9
   17a38:	mov	r0, r7
   17a3c:	mov	r3, fp
   17a40:	mov	r2, sl
   17a44:	bl	14314 <__assert_fail@plt+0x3228>
   17a48:	cmp	r9, r0
   17a4c:	bhi	17ab4 <__assert_fail@plt+0x69c8>
   17a50:	ldr	r3, [pc, #172]	; 17b04 <__assert_fail@plt+0x6a18>
   17a54:	add	r5, r0, #1
   17a58:	cmp	r7, r3
   17a5c:	str	r5, [r4]
   17a60:	beq	17a6c <__assert_fail@plt+0x6980>
   17a64:	mov	r0, r7
   17a68:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17a6c:	mov	r0, r5
   17a70:	bl	18c94 <__assert_fail@plt+0x7ba8>
   17a74:	add	lr, sp, #48	; 0x30
   17a78:	ldr	ip, [sp, #84]	; 0x54
   17a7c:	mov	r1, r5
   17a80:	ldr	r5, [sp, #28]
   17a84:	mov	r3, fp
   17a88:	mov	r2, sl
   17a8c:	str	r0, [r4, #4]
   17a90:	ldr	r4, [sp, #80]	; 0x50
   17a94:	str	lr, [sp, #8]
   17a98:	ldr	lr, [sp, #40]	; 0x28
   17a9c:	str	r5, [sp, #4]
   17aa0:	str	ip, [sp, #16]
   17aa4:	str	r4, [sp, #12]
   17aa8:	str	lr, [sp]
   17aac:	mov	r7, r0
   17ab0:	bl	14314 <__assert_fail@plt+0x3228>
   17ab4:	ldr	r3, [sp, #24]
   17ab8:	mov	r0, r7
   17abc:	str	r3, [r8]
   17ac0:	add	sp, sp, #92	; 0x5c
   17ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ac8:	mov	r3, #8
   17acc:	str	r3, [sp]
   17ad0:	add	r1, sp, #36	; 0x24
   17ad4:	rsb	r2, r2, #1
   17ad8:	ldr	r0, [sp, #28]
   17adc:	mvn	r3, #-2147483648	; 0x80000000
   17ae0:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17ae4:	mov	r4, r0
   17ae8:	ldm	r5, {r0, r1}
   17aec:	str	r4, [r7]
   17af0:	stm	r4, {r0, r1}
   17af4:	b	179d8 <__assert_fail@plt+0x68ec>
   17af8:	bl	110d4 <abort@plt>
   17afc:	andeq	sp, r2, r4, lsl #4
   17b00:	andeq	sp, r2, r0, lsr #2
   17b04:	andeq	sp, r2, r4, lsr r2
   17b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b0c:	sub	sp, sp, #52	; 0x34
   17b10:	mov	r5, r0
   17b14:	mov	sl, r1
   17b18:	mov	fp, r2
   17b1c:	bl	10ff0 <__errno_location@plt>
   17b20:	ldr	r4, [pc, #404]	; 17cbc <__assert_fail@plt+0x6bd0>
   17b24:	cmn	r5, #-2147483647	; 0x80000001
   17b28:	ldr	r6, [r4]
   17b2c:	mov	r8, r0
   17b30:	movne	r0, #0
   17b34:	moveq	r0, #1
   17b38:	ldr	r3, [r8]
   17b3c:	orrs	r0, r0, r5, lsr #31
   17b40:	str	r3, [sp, #28]
   17b44:	bne	17cb8 <__assert_fail@plt+0x6bcc>
   17b48:	ldr	r2, [r4, #4]
   17b4c:	cmp	r5, r2
   17b50:	blt	17bb0 <__assert_fail@plt+0x6ac4>
   17b54:	add	r7, r4, #8
   17b58:	cmp	r6, r7
   17b5c:	str	r2, [sp, #44]	; 0x2c
   17b60:	beq	17c88 <__assert_fail@plt+0x6b9c>
   17b64:	mov	r3, #8
   17b68:	sub	r2, r5, r2
   17b6c:	mov	r0, r6
   17b70:	str	r3, [sp]
   17b74:	add	r2, r2, #1
   17b78:	mvn	r3, #-2147483648	; 0x80000000
   17b7c:	add	r1, sp, #44	; 0x2c
   17b80:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17b84:	mov	r6, r0
   17b88:	str	r0, [r4]
   17b8c:	ldr	r0, [r4, #4]
   17b90:	ldr	r2, [sp, #44]	; 0x2c
   17b94:	mov	r1, #0
   17b98:	sub	r2, r2, r0
   17b9c:	add	r0, r6, r0, lsl #3
   17ba0:	lsl	r2, r2, #3
   17ba4:	bl	11008 <memset@plt>
   17ba8:	ldr	r3, [sp, #44]	; 0x2c
   17bac:	str	r3, [r4, #4]
   17bb0:	ldr	r2, [r4, #56]	; 0x38
   17bb4:	add	r3, r6, r5, lsl #3
   17bb8:	ldr	r1, [r4, #20]
   17bbc:	ldr	r7, [r3, #4]
   17bc0:	ldr	r9, [r6, r5, lsl #3]
   17bc4:	ldr	ip, [r4, #60]	; 0x3c
   17bc8:	str	r3, [sp, #32]
   17bcc:	ldr	r3, [r4, #16]
   17bd0:	str	r2, [sp, #12]
   17bd4:	ldr	r2, [pc, #228]	; 17cc0 <__assert_fail@plt+0x6bd4>
   17bd8:	orr	r1, r1, #1
   17bdc:	str	r1, [sp, #36]	; 0x24
   17be0:	str	r1, [sp, #4]
   17be4:	str	r2, [sp, #8]
   17be8:	str	r3, [sp]
   17bec:	mov	r0, r7
   17bf0:	mov	r1, r9
   17bf4:	str	ip, [sp, #16]
   17bf8:	mov	r3, fp
   17bfc:	mov	r2, sl
   17c00:	bl	14314 <__assert_fail@plt+0x3228>
   17c04:	cmp	r9, r0
   17c08:	bhi	17c74 <__assert_fail@plt+0x6b88>
   17c0c:	ldr	r3, [pc, #176]	; 17cc4 <__assert_fail@plt+0x6bd8>
   17c10:	add	r9, r0, #1
   17c14:	cmp	r7, r3
   17c18:	str	r9, [r6, r5, lsl #3]
   17c1c:	beq	17c28 <__assert_fail@plt+0x6b3c>
   17c20:	mov	r0, r7
   17c24:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17c28:	mov	r0, r9
   17c2c:	bl	18c94 <__assert_fail@plt+0x7ba8>
   17c30:	ldr	ip, [sp, #32]
   17c34:	ldr	lr, [r4, #60]	; 0x3c
   17c38:	ldr	r5, [r4, #56]	; 0x38
   17c3c:	mov	r3, fp
   17c40:	mov	r2, sl
   17c44:	mov	r1, r9
   17c48:	str	r0, [ip, #4]
   17c4c:	ldr	ip, [r4, #16]
   17c50:	ldr	r4, [pc, #104]	; 17cc0 <__assert_fail@plt+0x6bd4>
   17c54:	str	lr, [sp, #16]
   17c58:	str	r4, [sp, #8]
   17c5c:	ldr	r4, [sp, #36]	; 0x24
   17c60:	str	r5, [sp, #12]
   17c64:	str	r4, [sp, #4]
   17c68:	str	ip, [sp]
   17c6c:	mov	r7, r0
   17c70:	bl	14314 <__assert_fail@plt+0x3228>
   17c74:	ldr	r3, [sp, #28]
   17c78:	mov	r0, r7
   17c7c:	str	r3, [r8]
   17c80:	add	sp, sp, #52	; 0x34
   17c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c88:	mov	r3, #8
   17c8c:	sub	r2, r5, r2
   17c90:	str	r3, [sp]
   17c94:	add	r1, sp, #44	; 0x2c
   17c98:	add	r2, r2, #1
   17c9c:	mvn	r3, #-2147483648	; 0x80000000
   17ca0:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17ca4:	mov	r6, r0
   17ca8:	ldm	r7, {r0, r1}
   17cac:	str	r6, [r4]
   17cb0:	stm	r6, {r0, r1}
   17cb4:	b	17b8c <__assert_fail@plt+0x6aa0>
   17cb8:	bl	110d4 <abort@plt>
   17cbc:	andeq	sp, r2, r0, lsr #2
   17cc0:	andeq	sp, r2, r8, lsr r1
   17cc4:	andeq	sp, r2, r4, lsr r2
   17cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ccc:	sub	sp, sp, #44	; 0x2c
   17cd0:	mov	r9, r0
   17cd4:	mov	sl, r1
   17cd8:	bl	10ff0 <__errno_location@plt>
   17cdc:	ldr	r4, [pc, #360]	; 17e4c <__assert_fail@plt+0x6d60>
   17ce0:	ldr	r2, [r4, #4]
   17ce4:	ldr	r5, [r4]
   17ce8:	cmp	r2, #0
   17cec:	ldr	r3, [r0]
   17cf0:	mov	r7, r0
   17cf4:	str	r3, [sp, #24]
   17cf8:	bgt	17d54 <__assert_fail@plt+0x6c68>
   17cfc:	add	r6, r4, #8
   17d00:	cmp	r5, r6
   17d04:	str	r2, [sp, #36]	; 0x24
   17d08:	beq	17e1c <__assert_fail@plt+0x6d30>
   17d0c:	mov	r3, #8
   17d10:	mov	r0, r5
   17d14:	str	r3, [sp]
   17d18:	rsb	r2, r2, #1
   17d1c:	mvn	r3, #-2147483648	; 0x80000000
   17d20:	add	r1, sp, #36	; 0x24
   17d24:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17d28:	mov	r5, r0
   17d2c:	str	r0, [r4]
   17d30:	ldr	r0, [r4, #4]
   17d34:	ldr	r2, [sp, #36]	; 0x24
   17d38:	mov	r1, #0
   17d3c:	sub	r2, r2, r0
   17d40:	add	r0, r5, r0, lsl #3
   17d44:	lsl	r2, r2, #3
   17d48:	bl	11008 <memset@plt>
   17d4c:	ldr	r3, [sp, #36]	; 0x24
   17d50:	str	r3, [r4, #4]
   17d54:	ldr	r1, [r4, #20]
   17d58:	ldr	r8, [r5]
   17d5c:	ldr	r6, [r5, #4]
   17d60:	ldr	r2, [r4, #56]	; 0x38
   17d64:	ldr	r3, [r4, #16]
   17d68:	ldr	ip, [r4, #60]	; 0x3c
   17d6c:	ldr	fp, [pc, #220]	; 17e50 <__assert_fail@plt+0x6d64>
   17d70:	orr	r1, r1, #1
   17d74:	str	r1, [sp, #28]
   17d78:	str	r1, [sp, #4]
   17d7c:	str	r2, [sp, #12]
   17d80:	str	r3, [sp]
   17d84:	mov	r1, r8
   17d88:	mov	r0, r6
   17d8c:	str	ip, [sp, #16]
   17d90:	str	fp, [sp, #8]
   17d94:	mov	r3, sl
   17d98:	mov	r2, r9
   17d9c:	bl	14314 <__assert_fail@plt+0x3228>
   17da0:	cmp	r8, r0
   17da4:	bhi	17e08 <__assert_fail@plt+0x6d1c>
   17da8:	ldr	r3, [pc, #164]	; 17e54 <__assert_fail@plt+0x6d68>
   17dac:	add	r8, r0, #1
   17db0:	cmp	r6, r3
   17db4:	str	r8, [r5]
   17db8:	beq	17dc4 <__assert_fail@plt+0x6cd8>
   17dbc:	mov	r0, r6
   17dc0:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17dc4:	mov	r0, r8
   17dc8:	bl	18c94 <__assert_fail@plt+0x7ba8>
   17dcc:	ldr	lr, [r4, #60]	; 0x3c
   17dd0:	ldr	ip, [r4, #16]
   17dd4:	mov	r3, sl
   17dd8:	mov	r2, r9
   17ddc:	mov	r1, r8
   17de0:	str	r0, [r5, #4]
   17de4:	ldr	r5, [r4, #56]	; 0x38
   17de8:	ldr	r4, [sp, #28]
   17dec:	str	fp, [sp, #8]
   17df0:	str	r4, [sp, #4]
   17df4:	str	lr, [sp, #16]
   17df8:	str	r5, [sp, #12]
   17dfc:	str	ip, [sp]
   17e00:	mov	r6, r0
   17e04:	bl	14314 <__assert_fail@plt+0x3228>
   17e08:	ldr	r3, [sp, #24]
   17e0c:	mov	r0, r6
   17e10:	str	r3, [r7]
   17e14:	add	sp, sp, #44	; 0x2c
   17e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e1c:	mov	r3, #8
   17e20:	str	r3, [sp]
   17e24:	add	r1, sp, #36	; 0x24
   17e28:	rsb	r2, r2, #1
   17e2c:	mvn	r3, #-2147483648	; 0x80000000
   17e30:	mov	r0, #0
   17e34:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17e38:	mov	r5, r0
   17e3c:	ldm	r6, {r0, r1}
   17e40:	str	r5, [r4]
   17e44:	stm	r5, {r0, r1}
   17e48:	b	17d30 <__assert_fail@plt+0x6c44>
   17e4c:	andeq	sp, r2, r0, lsr #2
   17e50:	andeq	sp, r2, r8, lsr r1
   17e54:	andeq	sp, r2, r4, lsr r2
   17e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e5c:	sub	sp, sp, #44	; 0x2c
   17e60:	mov	r5, r0
   17e64:	mov	sl, r1
   17e68:	bl	10ff0 <__errno_location@plt>
   17e6c:	ldr	r4, [pc, #396]	; 18000 <__assert_fail@plt+0x6f14>
   17e70:	cmn	r5, #-2147483647	; 0x80000001
   17e74:	ldr	r6, [r4]
   17e78:	mov	r8, r0
   17e7c:	movne	r0, #0
   17e80:	moveq	r0, #1
   17e84:	ldr	r3, [r8]
   17e88:	orrs	r0, r0, r5, lsr #31
   17e8c:	str	r3, [sp, #24]
   17e90:	bne	17ffc <__assert_fail@plt+0x6f10>
   17e94:	ldr	r2, [r4, #4]
   17e98:	cmp	r5, r2
   17e9c:	blt	17efc <__assert_fail@plt+0x6e10>
   17ea0:	add	r7, r4, #8
   17ea4:	cmp	r6, r7
   17ea8:	str	r2, [sp, #36]	; 0x24
   17eac:	beq	17fcc <__assert_fail@plt+0x6ee0>
   17eb0:	mov	r3, #8
   17eb4:	sub	r2, r5, r2
   17eb8:	mov	r0, r6
   17ebc:	str	r3, [sp]
   17ec0:	add	r2, r2, #1
   17ec4:	mvn	r3, #-2147483648	; 0x80000000
   17ec8:	add	r1, sp, #36	; 0x24
   17ecc:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17ed0:	mov	r6, r0
   17ed4:	str	r0, [r4]
   17ed8:	ldr	r0, [r4, #4]
   17edc:	ldr	r2, [sp, #36]	; 0x24
   17ee0:	mov	r1, #0
   17ee4:	sub	r2, r2, r0
   17ee8:	add	r0, r6, r0, lsl #3
   17eec:	lsl	r2, r2, #3
   17ef0:	bl	11008 <memset@plt>
   17ef4:	ldr	r3, [sp, #36]	; 0x24
   17ef8:	str	r3, [r4, #4]
   17efc:	ldr	r2, [r4, #56]	; 0x38
   17f00:	add	fp, r6, r5, lsl #3
   17f04:	ldr	r1, [r4, #20]
   17f08:	ldr	r9, [r6, r5, lsl #3]
   17f0c:	ldr	r7, [fp, #4]
   17f10:	ldr	r3, [r4, #16]
   17f14:	ldr	ip, [r4, #60]	; 0x3c
   17f18:	str	r2, [sp, #12]
   17f1c:	ldr	r2, [pc, #224]	; 18004 <__assert_fail@plt+0x6f18>
   17f20:	orr	r1, r1, #1
   17f24:	str	r1, [sp, #28]
   17f28:	str	r1, [sp, #4]
   17f2c:	str	r2, [sp, #8]
   17f30:	str	r3, [sp]
   17f34:	mov	r0, r7
   17f38:	mov	r1, r9
   17f3c:	str	ip, [sp, #16]
   17f40:	mvn	r3, #0
   17f44:	mov	r2, sl
   17f48:	bl	14314 <__assert_fail@plt+0x3228>
   17f4c:	cmp	r9, r0
   17f50:	bhi	17fb8 <__assert_fail@plt+0x6ecc>
   17f54:	ldr	r3, [pc, #172]	; 18008 <__assert_fail@plt+0x6f1c>
   17f58:	add	r9, r0, #1
   17f5c:	cmp	r7, r3
   17f60:	str	r9, [r6, r5, lsl #3]
   17f64:	beq	17f70 <__assert_fail@plt+0x6e84>
   17f68:	mov	r0, r7
   17f6c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   17f70:	mov	r0, r9
   17f74:	bl	18c94 <__assert_fail@plt+0x7ba8>
   17f78:	ldr	ip, [r4, #60]	; 0x3c
   17f7c:	ldr	r3, [r4, #16]
   17f80:	ldr	lr, [r4, #56]	; 0x38
   17f84:	ldr	r4, [pc, #120]	; 18004 <__assert_fail@plt+0x6f18>
   17f88:	mov	r2, sl
   17f8c:	mov	r1, r9
   17f90:	str	r0, [fp, #4]
   17f94:	str	r4, [sp, #8]
   17f98:	ldr	r4, [sp, #28]
   17f9c:	str	r3, [sp]
   17fa0:	str	r4, [sp, #4]
   17fa4:	str	ip, [sp, #16]
   17fa8:	str	lr, [sp, #12]
   17fac:	mvn	r3, #0
   17fb0:	mov	r7, r0
   17fb4:	bl	14314 <__assert_fail@plt+0x3228>
   17fb8:	ldr	r3, [sp, #24]
   17fbc:	mov	r0, r7
   17fc0:	str	r3, [r8]
   17fc4:	add	sp, sp, #44	; 0x2c
   17fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fcc:	mov	r3, #8
   17fd0:	sub	r2, r5, r2
   17fd4:	str	r3, [sp]
   17fd8:	add	r1, sp, #36	; 0x24
   17fdc:	add	r2, r2, #1
   17fe0:	mvn	r3, #-2147483648	; 0x80000000
   17fe4:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   17fe8:	mov	r6, r0
   17fec:	ldm	r7, {r0, r1}
   17ff0:	str	r6, [r4]
   17ff4:	stm	r6, {r0, r1}
   17ff8:	b	17ed8 <__assert_fail@plt+0x6dec>
   17ffc:	bl	110d4 <abort@plt>
   18000:	andeq	sp, r2, r0, lsr #2
   18004:	andeq	sp, r2, r8, lsr r1
   18008:	andeq	sp, r2, r4, lsr r2
   1800c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18010:	sub	sp, sp, #44	; 0x2c
   18014:	mov	sl, r0
   18018:	bl	10ff0 <__errno_location@plt>
   1801c:	ldr	r4, [pc, #348]	; 18180 <__assert_fail@plt+0x7094>
   18020:	ldr	r2, [r4, #4]
   18024:	ldr	r5, [r4]
   18028:	cmp	r2, #0
   1802c:	ldr	r3, [r0]
   18030:	mov	r8, r0
   18034:	str	r3, [sp, #28]
   18038:	bgt	18094 <__assert_fail@plt+0x6fa8>
   1803c:	add	r6, r4, #8
   18040:	cmp	r5, r6
   18044:	str	r2, [sp, #36]	; 0x24
   18048:	beq	18150 <__assert_fail@plt+0x7064>
   1804c:	mov	r3, #8
   18050:	mov	r0, r5
   18054:	str	r3, [sp]
   18058:	rsb	r2, r2, #1
   1805c:	mvn	r3, #-2147483648	; 0x80000000
   18060:	add	r1, sp, #36	; 0x24
   18064:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   18068:	mov	r5, r0
   1806c:	str	r0, [r4]
   18070:	ldr	r0, [r4, #4]
   18074:	ldr	r2, [sp, #36]	; 0x24
   18078:	mov	r1, #0
   1807c:	sub	r2, r2, r0
   18080:	add	r0, r5, r0, lsl #3
   18084:	lsl	r2, r2, #3
   18088:	bl	11008 <memset@plt>
   1808c:	ldr	r3, [sp, #36]	; 0x24
   18090:	str	r3, [r4, #4]
   18094:	ldr	r7, [r4, #20]
   18098:	ldr	r9, [r5]
   1809c:	ldr	r6, [r5, #4]
   180a0:	ldr	r2, [r4, #56]	; 0x38
   180a4:	ldr	r3, [r4, #16]
   180a8:	ldr	ip, [r4, #60]	; 0x3c
   180ac:	ldr	fp, [pc, #208]	; 18184 <__assert_fail@plt+0x7098>
   180b0:	orr	r7, r7, #1
   180b4:	str	r2, [sp, #12]
   180b8:	str	r3, [sp]
   180bc:	str	r7, [sp, #4]
   180c0:	mov	r1, r9
   180c4:	mov	r0, r6
   180c8:	str	ip, [sp, #16]
   180cc:	str	fp, [sp, #8]
   180d0:	mvn	r3, #0
   180d4:	mov	r2, sl
   180d8:	bl	14314 <__assert_fail@plt+0x3228>
   180dc:	cmp	r9, r0
   180e0:	bhi	1813c <__assert_fail@plt+0x7050>
   180e4:	ldr	r3, [pc, #156]	; 18188 <__assert_fail@plt+0x709c>
   180e8:	add	r9, r0, #1
   180ec:	cmp	r6, r3
   180f0:	str	r9, [r5]
   180f4:	beq	18100 <__assert_fail@plt+0x7014>
   180f8:	mov	r0, r6
   180fc:	bl	13d58 <__assert_fail@plt+0x2c6c>
   18100:	mov	r0, r9
   18104:	bl	18c94 <__assert_fail@plt+0x7ba8>
   18108:	ldr	ip, [r4, #60]	; 0x3c
   1810c:	ldr	r3, [r4, #16]
   18110:	ldr	lr, [r4, #56]	; 0x38
   18114:	mov	r2, sl
   18118:	mov	r1, r9
   1811c:	str	r0, [r5, #4]
   18120:	str	r3, [sp]
   18124:	stmib	sp, {r7, fp}
   18128:	str	ip, [sp, #16]
   1812c:	str	lr, [sp, #12]
   18130:	mvn	r3, #0
   18134:	mov	r6, r0
   18138:	bl	14314 <__assert_fail@plt+0x3228>
   1813c:	ldr	r3, [sp, #28]
   18140:	mov	r0, r6
   18144:	str	r3, [r8]
   18148:	add	sp, sp, #44	; 0x2c
   1814c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18150:	mov	r3, #8
   18154:	str	r3, [sp]
   18158:	add	r1, sp, #36	; 0x24
   1815c:	rsb	r2, r2, #1
   18160:	mvn	r3, #-2147483648	; 0x80000000
   18164:	mov	r0, #0
   18168:	bl	18eb0 <__assert_fail@plt+0x7dc4>
   1816c:	mov	r5, r0
   18170:	ldm	r6, {r0, r1}
   18174:	str	r5, [r4]
   18178:	stm	r5, {r0, r1}
   1817c:	b	18070 <__assert_fail@plt+0x6f84>
   18180:	andeq	sp, r2, r0, lsr #2
   18184:	andeq	sp, r2, r8, lsr r1
   18188:	andeq	sp, r2, r4, lsr r2
   1818c:	push	{r4, r5, r6, lr}
   18190:	mov	r5, r1
   18194:	mov	r1, #0
   18198:	mov	r4, r2
   1819c:	bl	11080 <setlocale@plt>
   181a0:	subs	r6, r0, #0
   181a4:	beq	18200 <__assert_fail@plt+0x7114>
   181a8:	bl	10fd8 <strlen@plt>
   181ac:	cmp	r4, r0
   181b0:	bhi	181e8 <__assert_fail@plt+0x70fc>
   181b4:	cmp	r4, #0
   181b8:	bne	181c4 <__assert_fail@plt+0x70d8>
   181bc:	mov	r0, #34	; 0x22
   181c0:	pop	{r4, r5, r6, pc}
   181c4:	sub	r4, r4, #1
   181c8:	mov	r1, r6
   181cc:	mov	r2, r4
   181d0:	mov	r0, r5
   181d4:	bl	10ea0 <memcpy@plt>
   181d8:	mov	r3, #0
   181dc:	strb	r3, [r5, r4]
   181e0:	mov	r0, #34	; 0x22
   181e4:	pop	{r4, r5, r6, pc}
   181e8:	add	r2, r0, #1
   181ec:	mov	r1, r6
   181f0:	mov	r0, r5
   181f4:	bl	10ea0 <memcpy@plt>
   181f8:	mov	r0, #0
   181fc:	pop	{r4, r5, r6, pc}
   18200:	cmp	r4, #0
   18204:	beq	18214 <__assert_fail@plt+0x7128>
   18208:	strb	r6, [r5]
   1820c:	mov	r0, #22
   18210:	pop	{r4, r5, r6, pc}
   18214:	mov	r0, #22
   18218:	pop	{r4, r5, r6, pc}
   1821c:	mov	r1, #0
   18220:	b	11080 <setlocale@plt>
   18224:	mov	r2, #3
   18228:	mov	r1, #0
   1822c:	b	1aa00 <__assert_fail@plt+0x9914>
   18230:	push	{r4, r5, r6, lr}
   18234:	sub	sp, sp, #32
   18238:	cmp	r1, #0
   1823c:	mov	r4, r0
   18240:	ldr	r5, [sp, #48]	; 0x30
   18244:	ldr	r6, [sp, #52]	; 0x34
   18248:	beq	18560 <__assert_fail@plt+0x7474>
   1824c:	stm	sp, {r2, r3}
   18250:	mov	r3, r1
   18254:	ldr	r2, [pc, #808]	; 18584 <__assert_fail@plt+0x7498>
   18258:	mov	r1, #1
   1825c:	bl	1102c <__fprintf_chk@plt>
   18260:	mov	r2, #5
   18264:	ldr	r1, [pc, #796]	; 18588 <__assert_fail@plt+0x749c>
   18268:	mov	r0, #0
   1826c:	bl	10ee8 <dcgettext@plt>
   18270:	ldr	r3, [pc, #788]	; 1858c <__assert_fail@plt+0x74a0>
   18274:	ldr	r2, [pc, #788]	; 18590 <__assert_fail@plt+0x74a4>
   18278:	str	r3, [sp]
   1827c:	mov	r1, #1
   18280:	mov	r3, r0
   18284:	mov	r0, r4
   18288:	bl	1102c <__fprintf_chk@plt>
   1828c:	mov	r1, r4
   18290:	mov	r0, #10
   18294:	bl	10edc <fputc_unlocked@plt>
   18298:	mov	r2, #5
   1829c:	ldr	r1, [pc, #752]	; 18594 <__assert_fail@plt+0x74a8>
   182a0:	mov	r0, #0
   182a4:	bl	10ee8 <dcgettext@plt>
   182a8:	mov	r1, #1
   182ac:	ldr	r3, [pc, #740]	; 18598 <__assert_fail@plt+0x74ac>
   182b0:	mov	r2, r0
   182b4:	mov	r0, r4
   182b8:	bl	1102c <__fprintf_chk@plt>
   182bc:	mov	r1, r4
   182c0:	mov	r0, #10
   182c4:	bl	10edc <fputc_unlocked@plt>
   182c8:	cmp	r6, #9
   182cc:	ldrls	pc, [pc, r6, lsl #2]
   182d0:	b	18578 <__assert_fail@plt+0x748c>
   182d4:	andeq	r8, r1, r8, asr r3
   182d8:	andeq	r8, r1, r0, ror #6
   182dc:	andeq	r8, r1, ip, lsl #7
   182e0:	andeq	r8, r1, r0, asr #7
   182e4:	strdeq	r8, [r1], -ip
   182e8:	andeq	r8, r1, r8, lsr r4
   182ec:	andeq	r8, r1, r4, ror r4
   182f0:			; <UNDEFINED> instruction: 0x000184b8
   182f4:	andeq	r8, r1, r8, lsl #10
   182f8:	strdeq	r8, [r1], -ip
   182fc:	ldr	r1, [pc, #664]	; 1859c <__assert_fail@plt+0x74b0>
   18300:	mov	r2, #5
   18304:	mov	r0, #0
   18308:	bl	10ee8 <dcgettext@plt>
   1830c:	ldr	ip, [r5, #32]
   18310:	ldr	r1, [r5, #28]
   18314:	ldr	r2, [r5, #24]
   18318:	ldr	r3, [r5]
   1831c:	ldr	r6, [r5, #20]
   18320:	str	ip, [sp, #28]
   18324:	ldr	lr, [r5, #16]
   18328:	str	r1, [sp, #24]
   1832c:	ldr	ip, [r5, #12]
   18330:	str	r2, [sp, #20]
   18334:	ldr	r1, [r5, #8]
   18338:	ldr	r2, [r5, #4]
   1833c:	str	r6, [sp, #16]
   18340:	stmib	sp, {r1, ip, lr}
   18344:	mov	r1, #1
   18348:	str	r2, [sp]
   1834c:	mov	r2, r0
   18350:	mov	r0, r4
   18354:	bl	1102c <__fprintf_chk@plt>
   18358:	add	sp, sp, #32
   1835c:	pop	{r4, r5, r6, pc}
   18360:	mov	r2, #5
   18364:	ldr	r1, [pc, #564]	; 185a0 <__assert_fail@plt+0x74b4>
   18368:	mov	r0, #0
   1836c:	bl	10ee8 <dcgettext@plt>
   18370:	ldr	r3, [r5]
   18374:	mov	r1, #1
   18378:	mov	r2, r0
   1837c:	mov	r0, r4
   18380:	add	sp, sp, #32
   18384:	pop	{r4, r5, r6, lr}
   18388:	b	1102c <__fprintf_chk@plt>
   1838c:	mov	r2, #5
   18390:	ldr	r1, [pc, #524]	; 185a4 <__assert_fail@plt+0x74b8>
   18394:	mov	r0, #0
   18398:	bl	10ee8 <dcgettext@plt>
   1839c:	ldr	r2, [r5, #4]
   183a0:	ldr	r3, [r5]
   183a4:	mov	r1, #1
   183a8:	str	r2, [sp, #48]	; 0x30
   183ac:	mov	r2, r0
   183b0:	mov	r0, r4
   183b4:	add	sp, sp, #32
   183b8:	pop	{r4, r5, r6, lr}
   183bc:	b	1102c <__fprintf_chk@plt>
   183c0:	mov	r2, #5
   183c4:	ldr	r1, [pc, #476]	; 185a8 <__assert_fail@plt+0x74bc>
   183c8:	mov	r0, #0
   183cc:	bl	10ee8 <dcgettext@plt>
   183d0:	ldr	r1, [r5, #8]
   183d4:	ldr	r2, [r5, #4]
   183d8:	ldr	r3, [r5]
   183dc:	str	r1, [sp, #52]	; 0x34
   183e0:	str	r2, [sp, #48]	; 0x30
   183e4:	mov	r1, #1
   183e8:	mov	r2, r0
   183ec:	mov	r0, r4
   183f0:	add	sp, sp, #32
   183f4:	pop	{r4, r5, r6, lr}
   183f8:	b	1102c <__fprintf_chk@plt>
   183fc:	mov	r2, #5
   18400:	ldr	r1, [pc, #420]	; 185ac <__assert_fail@plt+0x74c0>
   18404:	mov	r0, #0
   18408:	bl	10ee8 <dcgettext@plt>
   1840c:	ldr	r1, [r5, #8]
   18410:	ldr	ip, [r5, #12]
   18414:	ldr	r2, [r5, #4]
   18418:	ldr	r3, [r5]
   1841c:	stmib	sp, {r1, ip}
   18420:	str	r2, [sp]
   18424:	mov	r1, #1
   18428:	mov	r2, r0
   1842c:	mov	r0, r4
   18430:	bl	1102c <__fprintf_chk@plt>
   18434:	b	18358 <__assert_fail@plt+0x726c>
   18438:	mov	r2, #5
   1843c:	ldr	r1, [pc, #364]	; 185b0 <__assert_fail@plt+0x74c4>
   18440:	mov	r0, #0
   18444:	bl	10ee8 <dcgettext@plt>
   18448:	add	r1, r5, #8
   1844c:	ldr	r2, [r5, #4]
   18450:	ldm	r1, {r1, ip, lr}
   18454:	ldr	r3, [r5]
   18458:	str	r2, [sp]
   1845c:	stmib	sp, {r1, ip, lr}
   18460:	mov	r1, #1
   18464:	mov	r2, r0
   18468:	mov	r0, r4
   1846c:	bl	1102c <__fprintf_chk@plt>
   18470:	b	18358 <__assert_fail@plt+0x726c>
   18474:	mov	r2, #5
   18478:	ldr	r1, [pc, #308]	; 185b4 <__assert_fail@plt+0x74c8>
   1847c:	mov	r0, #0
   18480:	bl	10ee8 <dcgettext@plt>
   18484:	add	r1, r5, #8
   18488:	ldr	r2, [r5, #4]
   1848c:	ldm	r1, {r1, ip, lr}
   18490:	ldr	r6, [r5, #20]
   18494:	ldr	r3, [r5]
   18498:	stmib	sp, {r1, ip, lr}
   1849c:	mov	r1, #1
   184a0:	str	r2, [sp]
   184a4:	str	r6, [sp, #16]
   184a8:	mov	r2, r0
   184ac:	mov	r0, r4
   184b0:	bl	1102c <__fprintf_chk@plt>
   184b4:	b	18358 <__assert_fail@plt+0x726c>
   184b8:	mov	r2, #5
   184bc:	ldr	r1, [pc, #244]	; 185b8 <__assert_fail@plt+0x74cc>
   184c0:	mov	r0, #0
   184c4:	bl	10ee8 <dcgettext@plt>
   184c8:	ldr	r2, [r5, #24]
   184cc:	ldr	r3, [r5]
   184d0:	ldr	r6, [r5, #20]
   184d4:	ldr	lr, [r5, #16]
   184d8:	ldr	ip, [r5, #12]
   184dc:	str	r2, [sp, #20]
   184e0:	ldr	r1, [r5, #8]
   184e4:	ldr	r2, [r5, #4]
   184e8:	str	r6, [sp, #16]
   184ec:	stmib	sp, {r1, ip, lr}
   184f0:	mov	r1, #1
   184f4:	str	r2, [sp]
   184f8:	mov	r2, r0
   184fc:	mov	r0, r4
   18500:	bl	1102c <__fprintf_chk@plt>
   18504:	b	18358 <__assert_fail@plt+0x726c>
   18508:	mov	r2, #5
   1850c:	ldr	r1, [pc, #168]	; 185bc <__assert_fail@plt+0x74d0>
   18510:	mov	r0, #0
   18514:	bl	10ee8 <dcgettext@plt>
   18518:	ldr	r1, [r5, #28]
   1851c:	ldr	r2, [r5, #24]
   18520:	ldr	r3, [r5]
   18524:	ldr	r6, [r5, #20]
   18528:	ldr	lr, [r5, #16]
   1852c:	str	r1, [sp, #24]
   18530:	ldr	ip, [r5, #12]
   18534:	str	r2, [sp, #20]
   18538:	ldr	r1, [r5, #8]
   1853c:	ldr	r2, [r5, #4]
   18540:	str	r6, [sp, #16]
   18544:	stmib	sp, {r1, ip, lr}
   18548:	mov	r1, #1
   1854c:	str	r2, [sp]
   18550:	mov	r2, r0
   18554:	mov	r0, r4
   18558:	bl	1102c <__fprintf_chk@plt>
   1855c:	b	18358 <__assert_fail@plt+0x726c>
   18560:	str	r3, [sp]
   18564:	mov	r1, #1
   18568:	mov	r3, r2
   1856c:	ldr	r2, [pc, #76]	; 185c0 <__assert_fail@plt+0x74d4>
   18570:	bl	1102c <__fprintf_chk@plt>
   18574:	b	18260 <__assert_fail@plt+0x7174>
   18578:	mov	r2, #5
   1857c:	ldr	r1, [pc, #64]	; 185c4 <__assert_fail@plt+0x74d8>
   18580:	b	18304 <__assert_fail@plt+0x7218>
   18584:	andeq	ip, r1, r8, ror #3
   18588:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1858c:	andeq	r0, r0, r6, ror #15
   18590:	ldrdeq	ip, [r1], -r4
   18594:	andeq	ip, r1, r0, lsl #4
   18598:	andeq	ip, r1, ip, lsr #5
   1859c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   185a0:	ldrdeq	ip, [r1], -r0
   185a4:	andeq	ip, r1, r0, ror #5
   185a8:	strdeq	ip, [r1], -r8
   185ac:	andeq	ip, r1, r4, lsl r3
   185b0:	andeq	ip, r1, r4, lsr r3
   185b4:	andeq	ip, r1, r8, asr r3
   185b8:	andeq	ip, r1, r0, lsl #7
   185bc:	andeq	ip, r1, ip, lsr #7
   185c0:	strdeq	ip, [r1], -r4
   185c4:	andeq	ip, r1, r0, lsl r4
   185c8:	push	{r4, r5, lr}
   185cc:	sub	sp, sp, #12
   185d0:	ldr	r5, [sp, #24]
   185d4:	ldr	ip, [r5]
   185d8:	cmp	ip, #0
   185dc:	beq	185f8 <__assert_fail@plt+0x750c>
   185e0:	mov	lr, r5
   185e4:	mov	ip, #0
   185e8:	ldr	r4, [lr, #4]!
   185ec:	add	ip, ip, #1
   185f0:	cmp	r4, #0
   185f4:	bne	185e8 <__assert_fail@plt+0x74fc>
   185f8:	stm	sp, {r5, ip}
   185fc:	bl	18230 <__assert_fail@plt+0x7144>
   18600:	add	sp, sp, #12
   18604:	pop	{r4, r5, pc}
   18608:	push	{r4, r5, lr}
   1860c:	sub	sp, sp, #76	; 0x4c
   18610:	mov	r5, r0
   18614:	ldr	ip, [sp, #88]	; 0x58
   18618:	ldr	r0, [ip]
   1861c:	cmp	r0, #0
   18620:	str	r0, [sp, #32]
   18624:	beq	189f8 <__assert_fail@plt+0x790c>
   18628:	ldr	r0, [ip, #4]
   1862c:	cmp	r0, #0
   18630:	str	r0, [sp, #36]	; 0x24
   18634:	beq	18a00 <__assert_fail@plt+0x7914>
   18638:	ldr	r0, [ip, #8]
   1863c:	cmp	r0, #0
   18640:	str	r0, [sp, #40]	; 0x28
   18644:	beq	18a08 <__assert_fail@plt+0x791c>
   18648:	ldr	r0, [ip, #12]
   1864c:	cmp	r0, #0
   18650:	str	r0, [sp, #44]	; 0x2c
   18654:	beq	18a10 <__assert_fail@plt+0x7924>
   18658:	ldr	r0, [ip, #16]
   1865c:	cmp	r0, #0
   18660:	str	r0, [sp, #48]	; 0x30
   18664:	beq	18a18 <__assert_fail@plt+0x792c>
   18668:	ldr	r0, [ip, #20]
   1866c:	cmp	r0, #0
   18670:	str	r0, [sp, #52]	; 0x34
   18674:	beq	18a20 <__assert_fail@plt+0x7934>
   18678:	ldr	r0, [ip, #24]
   1867c:	cmp	r0, #0
   18680:	str	r0, [sp, #56]	; 0x38
   18684:	beq	18a28 <__assert_fail@plt+0x793c>
   18688:	ldr	r0, [ip, #28]
   1868c:	cmp	r0, #0
   18690:	str	r0, [sp, #60]	; 0x3c
   18694:	beq	18a30 <__assert_fail@plt+0x7944>
   18698:	ldr	r0, [ip, #32]
   1869c:	cmp	r0, #0
   186a0:	str	r0, [sp, #64]	; 0x40
   186a4:	beq	18a38 <__assert_fail@plt+0x794c>
   186a8:	ldr	r0, [ip, #36]	; 0x24
   186ac:	cmp	r0, #0
   186b0:	movne	r4, #10
   186b4:	moveq	r4, #9
   186b8:	cmp	r1, #0
   186bc:	beq	189d0 <__assert_fail@plt+0x78e4>
   186c0:	stm	sp, {r2, r3}
   186c4:	mov	r0, r5
   186c8:	mov	r3, r1
   186cc:	ldr	r2, [pc, #876]	; 18a40 <__assert_fail@plt+0x7954>
   186d0:	mov	r1, #1
   186d4:	bl	1102c <__fprintf_chk@plt>
   186d8:	mov	r2, #5
   186dc:	ldr	r1, [pc, #864]	; 18a44 <__assert_fail@plt+0x7958>
   186e0:	mov	r0, #0
   186e4:	bl	10ee8 <dcgettext@plt>
   186e8:	ldr	r3, [pc, #856]	; 18a48 <__assert_fail@plt+0x795c>
   186ec:	ldr	r2, [pc, #856]	; 18a4c <__assert_fail@plt+0x7960>
   186f0:	str	r3, [sp]
   186f4:	mov	r1, #1
   186f8:	mov	r3, r0
   186fc:	mov	r0, r5
   18700:	bl	1102c <__fprintf_chk@plt>
   18704:	mov	r1, r5
   18708:	mov	r0, #10
   1870c:	bl	10edc <fputc_unlocked@plt>
   18710:	mov	r2, #5
   18714:	ldr	r1, [pc, #820]	; 18a50 <__assert_fail@plt+0x7964>
   18718:	mov	r0, #0
   1871c:	bl	10ee8 <dcgettext@plt>
   18720:	mov	r1, #1
   18724:	ldr	r3, [pc, #808]	; 18a54 <__assert_fail@plt+0x7968>
   18728:	mov	r2, r0
   1872c:	mov	r0, r5
   18730:	bl	1102c <__fprintf_chk@plt>
   18734:	mov	r1, r5
   18738:	mov	r0, #10
   1873c:	bl	10edc <fputc_unlocked@plt>
   18740:	cmp	r4, #9
   18744:	ldrls	pc, [pc, r4, lsl #2]
   18748:	b	189ec <__assert_fail@plt+0x7900>
   1874c:	ldrdeq	r8, [r1], -r0
   18750:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18754:	andeq	r8, r1, r4, lsl #16
   18758:	andeq	r8, r1, r8, lsr r8
   1875c:	andeq	r8, r1, r0, ror r8
   18760:	andeq	r8, r1, ip, lsr #17
   18764:	andeq	r8, r1, r8, ror #17
   18768:	andeq	r8, r1, ip, lsr #18
   1876c:	andeq	r8, r1, r8, ror r9
   18770:	andeq	r8, r1, r4, ror r7
   18774:	ldr	r1, [pc, #732]	; 18a58 <__assert_fail@plt+0x796c>
   18778:	mov	r2, #5
   1877c:	mov	r0, #0
   18780:	bl	10ee8 <dcgettext@plt>
   18784:	ldr	ip, [sp, #64]	; 0x40
   18788:	ldr	r1, [sp, #60]	; 0x3c
   1878c:	ldr	r2, [sp, #56]	; 0x38
   18790:	ldr	lr, [sp, #48]	; 0x30
   18794:	str	ip, [sp, #28]
   18798:	str	r1, [sp, #24]
   1879c:	ldr	ip, [sp, #44]	; 0x2c
   187a0:	ldr	r1, [sp, #40]	; 0x28
   187a4:	ldr	r4, [sp, #52]	; 0x34
   187a8:	str	r2, [sp, #20]
   187ac:	ldr	r2, [sp, #36]	; 0x24
   187b0:	stmib	sp, {r1, ip, lr}
   187b4:	mov	r1, #1
   187b8:	str	r2, [sp]
   187bc:	ldr	r3, [sp, #32]
   187c0:	str	r4, [sp, #16]
   187c4:	mov	r2, r0
   187c8:	mov	r0, r5
   187cc:	bl	1102c <__fprintf_chk@plt>
   187d0:	add	sp, sp, #76	; 0x4c
   187d4:	pop	{r4, r5, pc}
   187d8:	mov	r2, #5
   187dc:	ldr	r1, [pc, #632]	; 18a5c <__assert_fail@plt+0x7970>
   187e0:	mov	r0, #0
   187e4:	bl	10ee8 <dcgettext@plt>
   187e8:	ldr	r3, [sp, #32]
   187ec:	mov	r1, #1
   187f0:	mov	r2, r0
   187f4:	mov	r0, r5
   187f8:	add	sp, sp, #76	; 0x4c
   187fc:	pop	{r4, r5, lr}
   18800:	b	1102c <__fprintf_chk@plt>
   18804:	mov	r2, #5
   18808:	ldr	r1, [pc, #592]	; 18a60 <__assert_fail@plt+0x7974>
   1880c:	mov	r0, #0
   18810:	bl	10ee8 <dcgettext@plt>
   18814:	ldr	r2, [sp, #36]	; 0x24
   18818:	ldr	r3, [sp, #32]
   1881c:	str	r2, [sp, #88]	; 0x58
   18820:	mov	r1, #1
   18824:	mov	r2, r0
   18828:	mov	r0, r5
   1882c:	add	sp, sp, #76	; 0x4c
   18830:	pop	{r4, r5, lr}
   18834:	b	1102c <__fprintf_chk@plt>
   18838:	mov	r2, #5
   1883c:	ldr	r1, [pc, #544]	; 18a64 <__assert_fail@plt+0x7978>
   18840:	mov	r0, #0
   18844:	bl	10ee8 <dcgettext@plt>
   18848:	ldr	r1, [sp, #40]	; 0x28
   1884c:	ldr	r2, [sp, #36]	; 0x24
   18850:	str	r1, [sp, #4]
   18854:	str	r2, [sp]
   18858:	ldr	r3, [sp, #32]
   1885c:	mov	r1, #1
   18860:	mov	r2, r0
   18864:	mov	r0, r5
   18868:	bl	1102c <__fprintf_chk@plt>
   1886c:	b	187d0 <__assert_fail@plt+0x76e4>
   18870:	mov	r2, #5
   18874:	ldr	r1, [pc, #492]	; 18a68 <__assert_fail@plt+0x797c>
   18878:	mov	r0, #0
   1887c:	bl	10ee8 <dcgettext@plt>
   18880:	ldr	r1, [sp, #40]	; 0x28
   18884:	ldr	ip, [sp, #44]	; 0x2c
   18888:	ldr	r2, [sp, #36]	; 0x24
   1888c:	ldr	r3, [sp, #32]
   18890:	stmib	sp, {r1, ip}
   18894:	str	r2, [sp]
   18898:	mov	r1, #1
   1889c:	mov	r2, r0
   188a0:	mov	r0, r5
   188a4:	bl	1102c <__fprintf_chk@plt>
   188a8:	b	187d0 <__assert_fail@plt+0x76e4>
   188ac:	mov	r2, #5
   188b0:	ldr	r1, [pc, #436]	; 18a6c <__assert_fail@plt+0x7980>
   188b4:	mov	r0, #0
   188b8:	bl	10ee8 <dcgettext@plt>
   188bc:	add	r1, sp, #40	; 0x28
   188c0:	ldr	r2, [sp, #36]	; 0x24
   188c4:	ldm	r1, {r1, ip, lr}
   188c8:	ldr	r3, [sp, #32]
   188cc:	str	r2, [sp]
   188d0:	stmib	sp, {r1, ip, lr}
   188d4:	mov	r1, #1
   188d8:	mov	r2, r0
   188dc:	mov	r0, r5
   188e0:	bl	1102c <__fprintf_chk@plt>
   188e4:	b	187d0 <__assert_fail@plt+0x76e4>
   188e8:	mov	r2, #5
   188ec:	ldr	r1, [pc, #380]	; 18a70 <__assert_fail@plt+0x7984>
   188f0:	mov	r0, #0
   188f4:	bl	10ee8 <dcgettext@plt>
   188f8:	add	r1, sp, #40	; 0x28
   188fc:	ldr	r2, [sp, #36]	; 0x24
   18900:	ldm	r1, {r1, ip, lr}
   18904:	ldr	r4, [sp, #52]	; 0x34
   18908:	str	r2, [sp]
   1890c:	stmib	sp, {r1, ip, lr}
   18910:	mov	r1, #1
   18914:	ldr	r3, [sp, #32]
   18918:	str	r4, [sp, #16]
   1891c:	mov	r2, r0
   18920:	mov	r0, r5
   18924:	bl	1102c <__fprintf_chk@plt>
   18928:	b	187d0 <__assert_fail@plt+0x76e4>
   1892c:	mov	r2, #5
   18930:	ldr	r1, [pc, #316]	; 18a74 <__assert_fail@plt+0x7988>
   18934:	mov	r0, #0
   18938:	bl	10ee8 <dcgettext@plt>
   1893c:	add	r1, sp, #40	; 0x28
   18940:	ldr	r2, [sp, #56]	; 0x38
   18944:	ldm	r1, {r1, ip, lr}
   18948:	ldr	r4, [sp, #52]	; 0x34
   1894c:	str	r2, [sp, #20]
   18950:	ldr	r2, [sp, #36]	; 0x24
   18954:	stmib	sp, {r1, ip, lr}
   18958:	mov	r1, #1
   1895c:	str	r2, [sp]
   18960:	ldr	r3, [sp, #32]
   18964:	str	r4, [sp, #16]
   18968:	mov	r2, r0
   1896c:	mov	r0, r5
   18970:	bl	1102c <__fprintf_chk@plt>
   18974:	b	187d0 <__assert_fail@plt+0x76e4>
   18978:	mov	r2, #5
   1897c:	ldr	r1, [pc, #244]	; 18a78 <__assert_fail@plt+0x798c>
   18980:	mov	r0, #0
   18984:	bl	10ee8 <dcgettext@plt>
   18988:	ldr	r1, [sp, #60]	; 0x3c
   1898c:	ldr	r2, [sp, #56]	; 0x38
   18990:	ldr	lr, [sp, #48]	; 0x30
   18994:	ldr	ip, [sp, #44]	; 0x2c
   18998:	str	r1, [sp, #24]
   1899c:	ldr	r1, [sp, #40]	; 0x28
   189a0:	ldr	r4, [sp, #52]	; 0x34
   189a4:	str	r2, [sp, #20]
   189a8:	ldr	r2, [sp, #36]	; 0x24
   189ac:	stmib	sp, {r1, ip, lr}
   189b0:	mov	r1, #1
   189b4:	str	r2, [sp]
   189b8:	ldr	r3, [sp, #32]
   189bc:	str	r4, [sp, #16]
   189c0:	mov	r2, r0
   189c4:	mov	r0, r5
   189c8:	bl	1102c <__fprintf_chk@plt>
   189cc:	b	187d0 <__assert_fail@plt+0x76e4>
   189d0:	str	r3, [sp]
   189d4:	mov	r1, #1
   189d8:	mov	r3, r2
   189dc:	mov	r0, r5
   189e0:	ldr	r2, [pc, #148]	; 18a7c <__assert_fail@plt+0x7990>
   189e4:	bl	1102c <__fprintf_chk@plt>
   189e8:	b	186d8 <__assert_fail@plt+0x75ec>
   189ec:	mov	r2, #5
   189f0:	ldr	r1, [pc, #136]	; 18a80 <__assert_fail@plt+0x7994>
   189f4:	b	1877c <__assert_fail@plt+0x7690>
   189f8:	mov	r4, r0
   189fc:	b	186b8 <__assert_fail@plt+0x75cc>
   18a00:	mov	r4, #1
   18a04:	b	186b8 <__assert_fail@plt+0x75cc>
   18a08:	mov	r4, #2
   18a0c:	b	186b8 <__assert_fail@plt+0x75cc>
   18a10:	mov	r4, #3
   18a14:	b	186b8 <__assert_fail@plt+0x75cc>
   18a18:	mov	r4, #4
   18a1c:	b	186b8 <__assert_fail@plt+0x75cc>
   18a20:	mov	r4, #5
   18a24:	b	186b8 <__assert_fail@plt+0x75cc>
   18a28:	mov	r4, #6
   18a2c:	b	186b8 <__assert_fail@plt+0x75cc>
   18a30:	mov	r4, #7
   18a34:	b	186b8 <__assert_fail@plt+0x75cc>
   18a38:	mov	r4, #8
   18a3c:	b	186b8 <__assert_fail@plt+0x75cc>
   18a40:	andeq	ip, r1, r8, ror #3
   18a44:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   18a48:	andeq	r0, r0, r6, ror #15
   18a4c:	ldrdeq	ip, [r1], -r4
   18a50:	andeq	ip, r1, r0, lsl #4
   18a54:	andeq	ip, r1, ip, lsr #5
   18a58:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   18a5c:	ldrdeq	ip, [r1], -r0
   18a60:	andeq	ip, r1, r0, ror #5
   18a64:	strdeq	ip, [r1], -r8
   18a68:	andeq	ip, r1, r4, lsl r3
   18a6c:	andeq	ip, r1, r4, lsr r3
   18a70:	andeq	ip, r1, r8, asr r3
   18a74:	andeq	ip, r1, r0, lsl #7
   18a78:	andeq	ip, r1, ip, lsr #7
   18a7c:	strdeq	ip, [r1], -r4
   18a80:	andeq	ip, r1, r0, lsl r4
   18a84:	push	{r3}		; (str r3, [sp, #-4]!)
   18a88:	push	{lr}		; (str lr, [sp, #-4]!)
   18a8c:	sub	sp, sp, #56	; 0x38
   18a90:	add	r3, sp, #64	; 0x40
   18a94:	ldr	ip, [sp, #64]	; 0x40
   18a98:	str	r3, [sp, #12]
   18a9c:	cmp	ip, #0
   18aa0:	str	ip, [sp, #16]
   18aa4:	beq	18b3c <__assert_fail@plt+0x7a50>
   18aa8:	ldr	ip, [sp, #68]	; 0x44
   18aac:	cmp	ip, #0
   18ab0:	str	ip, [sp, #20]
   18ab4:	beq	18b5c <__assert_fail@plt+0x7a70>
   18ab8:	ldr	ip, [sp, #72]	; 0x48
   18abc:	cmp	ip, #0
   18ac0:	str	ip, [sp, #24]
   18ac4:	beq	18b64 <__assert_fail@plt+0x7a78>
   18ac8:	ldr	ip, [sp, #76]	; 0x4c
   18acc:	cmp	ip, #0
   18ad0:	str	ip, [sp, #28]
   18ad4:	beq	18b6c <__assert_fail@plt+0x7a80>
   18ad8:	ldr	ip, [sp, #80]	; 0x50
   18adc:	cmp	ip, #0
   18ae0:	str	ip, [sp, #32]
   18ae4:	beq	18b74 <__assert_fail@plt+0x7a88>
   18ae8:	ldr	ip, [sp, #84]	; 0x54
   18aec:	cmp	ip, #0
   18af0:	str	ip, [sp, #36]	; 0x24
   18af4:	beq	18b7c <__assert_fail@plt+0x7a90>
   18af8:	ldr	ip, [sp, #88]	; 0x58
   18afc:	cmp	ip, #0
   18b00:	str	ip, [sp, #40]	; 0x28
   18b04:	beq	18b84 <__assert_fail@plt+0x7a98>
   18b08:	ldr	ip, [sp, #92]	; 0x5c
   18b0c:	cmp	ip, #0
   18b10:	str	ip, [sp, #44]	; 0x2c
   18b14:	beq	18b8c <__assert_fail@plt+0x7aa0>
   18b18:	ldr	ip, [sp, #96]	; 0x60
   18b1c:	cmp	ip, #0
   18b20:	str	ip, [sp, #48]	; 0x30
   18b24:	beq	18b94 <__assert_fail@plt+0x7aa8>
   18b28:	ldr	ip, [sp, #100]	; 0x64
   18b2c:	cmp	ip, #0
   18b30:	str	ip, [sp, #52]	; 0x34
   18b34:	movne	ip, #10
   18b38:	moveq	ip, #9
   18b3c:	add	r3, sp, #16
   18b40:	stm	sp, {r3, ip}
   18b44:	ldr	r3, [sp, #60]	; 0x3c
   18b48:	bl	18230 <__assert_fail@plt+0x7144>
   18b4c:	add	sp, sp, #56	; 0x38
   18b50:	pop	{lr}		; (ldr lr, [sp], #4)
   18b54:	add	sp, sp, #4
   18b58:	bx	lr
   18b5c:	mov	ip, #1
   18b60:	b	18b3c <__assert_fail@plt+0x7a50>
   18b64:	mov	ip, #2
   18b68:	b	18b3c <__assert_fail@plt+0x7a50>
   18b6c:	mov	ip, #3
   18b70:	b	18b3c <__assert_fail@plt+0x7a50>
   18b74:	mov	ip, #4
   18b78:	b	18b3c <__assert_fail@plt+0x7a50>
   18b7c:	mov	ip, #5
   18b80:	b	18b3c <__assert_fail@plt+0x7a50>
   18b84:	mov	ip, #6
   18b88:	b	18b3c <__assert_fail@plt+0x7a50>
   18b8c:	mov	ip, #7
   18b90:	b	18b3c <__assert_fail@plt+0x7a50>
   18b94:	mov	ip, #8
   18b98:	b	18b3c <__assert_fail@plt+0x7a50>
   18b9c:	ldr	r3, [pc, #116]	; 18c18 <__assert_fail@plt+0x7b2c>
   18ba0:	push	{r4, lr}
   18ba4:	mov	r0, #10
   18ba8:	ldr	r1, [r3]
   18bac:	bl	10edc <fputc_unlocked@plt>
   18bb0:	mov	r2, #5
   18bb4:	ldr	r1, [pc, #96]	; 18c1c <__assert_fail@plt+0x7b30>
   18bb8:	mov	r0, #0
   18bbc:	bl	10ee8 <dcgettext@plt>
   18bc0:	ldr	r2, [pc, #88]	; 18c20 <__assert_fail@plt+0x7b34>
   18bc4:	mov	r1, r0
   18bc8:	mov	r0, #1
   18bcc:	bl	11014 <__printf_chk@plt>
   18bd0:	mov	r2, #5
   18bd4:	ldr	r1, [pc, #72]	; 18c24 <__assert_fail@plt+0x7b38>
   18bd8:	mov	r0, #0
   18bdc:	bl	10ee8 <dcgettext@plt>
   18be0:	ldr	r3, [pc, #64]	; 18c28 <__assert_fail@plt+0x7b3c>
   18be4:	ldr	r2, [pc, #64]	; 18c2c <__assert_fail@plt+0x7b40>
   18be8:	mov	r1, r0
   18bec:	mov	r0, #1
   18bf0:	bl	11014 <__printf_chk@plt>
   18bf4:	mov	r2, #5
   18bf8:	ldr	r1, [pc, #48]	; 18c30 <__assert_fail@plt+0x7b44>
   18bfc:	mov	r0, #0
   18c00:	bl	10ee8 <dcgettext@plt>
   18c04:	ldr	r2, [pc, #40]	; 18c34 <__assert_fail@plt+0x7b48>
   18c08:	pop	{r4, lr}
   18c0c:	mov	r1, r0
   18c10:	mov	r0, #1
   18c14:	b	11014 <__printf_chk@plt>
   18c18:	andeq	sp, r2, ip, ror r1
   18c1c:	andeq	ip, r1, ip, asr #8
   18c20:	andeq	ip, r1, r0, ror #8
   18c24:	andeq	ip, r1, r8, ror r4
   18c28:	andeq	fp, r1, r8, ror #27
   18c2c:	andeq	fp, r1, r0, lsl lr
   18c30:	andeq	ip, r1, ip, lsl #9
   18c34:			; <UNDEFINED> instruction: 0x0001c4b4
   18c38:	push	{r4, r5, r6, lr}
   18c3c:	mov	r6, r0
   18c40:	mov	r5, r1
   18c44:	mov	r4, r2
   18c48:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18c4c:	cmp	r0, #0
   18c50:	popne	{r4, r5, r6, pc}
   18c54:	cmp	r6, #0
   18c58:	beq	18c68 <__assert_fail@plt+0x7b7c>
   18c5c:	cmp	r5, #0
   18c60:	cmpne	r4, #0
   18c64:	popeq	{r4, r5, r6, pc}
   18c68:	bl	192b4 <__assert_fail@plt+0x81c8>
   18c6c:	push	{r4, lr}
   18c70:	bl	1a8fc <__assert_fail@plt+0x9810>
   18c74:	cmp	r0, #0
   18c78:	popne	{r4, pc}
   18c7c:	bl	192b4 <__assert_fail@plt+0x81c8>
   18c80:	push	{r4, lr}
   18c84:	bl	1a8fc <__assert_fail@plt+0x9810>
   18c88:	cmp	r0, #0
   18c8c:	popne	{r4, pc}
   18c90:	bl	192b4 <__assert_fail@plt+0x81c8>
   18c94:	push	{r4, lr}
   18c98:	bl	1a8fc <__assert_fail@plt+0x9810>
   18c9c:	cmp	r0, #0
   18ca0:	popne	{r4, pc}
   18ca4:	bl	192b4 <__assert_fail@plt+0x81c8>
   18ca8:	push	{r4, r5, r6, lr}
   18cac:	mov	r5, r0
   18cb0:	mov	r4, r1
   18cb4:	bl	1a928 <__assert_fail@plt+0x983c>
   18cb8:	cmp	r0, #0
   18cbc:	popne	{r4, r5, r6, pc}
   18cc0:	adds	r4, r4, #0
   18cc4:	movne	r4, #1
   18cc8:	cmp	r5, #0
   18ccc:	orreq	r4, r4, #1
   18cd0:	cmp	r4, #0
   18cd4:	popeq	{r4, r5, r6, pc}
   18cd8:	bl	192b4 <__assert_fail@plt+0x81c8>
   18cdc:	push	{r4, lr}
   18ce0:	cmp	r1, #0
   18ce4:	orreq	r1, r1, #1
   18ce8:	bl	1a928 <__assert_fail@plt+0x983c>
   18cec:	cmp	r0, #0
   18cf0:	popne	{r4, pc}
   18cf4:	bl	192b4 <__assert_fail@plt+0x81c8>
   18cf8:	push	{r4, r5, r6, lr}
   18cfc:	mov	r6, r0
   18d00:	mov	r5, r1
   18d04:	mov	r4, r2
   18d08:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18d0c:	cmp	r0, #0
   18d10:	popne	{r4, r5, r6, pc}
   18d14:	cmp	r6, #0
   18d18:	beq	18d28 <__assert_fail@plt+0x7c3c>
   18d1c:	cmp	r5, #0
   18d20:	cmpne	r4, #0
   18d24:	popeq	{r4, r5, r6, pc}
   18d28:	bl	192b4 <__assert_fail@plt+0x81c8>
   18d2c:	cmp	r2, #0
   18d30:	cmpne	r1, #0
   18d34:	moveq	r2, #1
   18d38:	moveq	r1, r2
   18d3c:	push	{r4, lr}
   18d40:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18d44:	cmp	r0, #0
   18d48:	popne	{r4, pc}
   18d4c:	bl	192b4 <__assert_fail@plt+0x81c8>
   18d50:	push	{r4, lr}
   18d54:	mov	r2, r1
   18d58:	mov	r1, r0
   18d5c:	mov	r0, #0
   18d60:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18d64:	cmp	r0, #0
   18d68:	popne	{r4, pc}
   18d6c:	bl	192b4 <__assert_fail@plt+0x81c8>
   18d70:	cmp	r1, #0
   18d74:	cmpne	r0, #0
   18d78:	moveq	r2, #1
   18d7c:	movne	r2, r1
   18d80:	moveq	r1, r2
   18d84:	movne	r1, r0
   18d88:	push	{r4, lr}
   18d8c:	mov	r0, #0
   18d90:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18d94:	cmp	r0, #0
   18d98:	popne	{r4, pc}
   18d9c:	bl	192b4 <__assert_fail@plt+0x81c8>
   18da0:	cmp	r0, #0
   18da4:	push	{r4, r5, r6, lr}
   18da8:	mov	r5, r1
   18dac:	ldr	r4, [r1]
   18db0:	beq	18dec <__assert_fail@plt+0x7d00>
   18db4:	lsr	r2, r4, #1
   18db8:	add	r3, r2, #1
   18dbc:	mvn	r3, r3
   18dc0:	cmp	r4, r3
   18dc4:	bhi	18e08 <__assert_fail@plt+0x7d1c>
   18dc8:	add	r4, r4, #1
   18dcc:	add	r4, r4, r2
   18dd0:	mov	r1, r4
   18dd4:	mov	r2, #1
   18dd8:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18ddc:	cmp	r0, #0
   18de0:	beq	18e0c <__assert_fail@plt+0x7d20>
   18de4:	str	r4, [r5]
   18de8:	pop	{r4, r5, r6, pc}
   18dec:	cmp	r4, #0
   18df0:	moveq	r4, #64	; 0x40
   18df4:	mov	r1, r4
   18df8:	mov	r2, #1
   18dfc:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18e00:	cmp	r0, #0
   18e04:	bne	18de4 <__assert_fail@plt+0x7cf8>
   18e08:	bl	192b4 <__assert_fail@plt+0x81c8>
   18e0c:	cmp	r4, #0
   18e10:	bne	18e08 <__assert_fail@plt+0x7d1c>
   18e14:	str	r4, [r5]
   18e18:	pop	{r4, r5, r6, pc}
   18e1c:	cmp	r0, #0
   18e20:	push	{r4, r5, r6, lr}
   18e24:	mov	r5, r1
   18e28:	ldr	r4, [r1]
   18e2c:	mov	r6, r2
   18e30:	beq	18e74 <__assert_fail@plt+0x7d88>
   18e34:	lsr	r1, r4, #1
   18e38:	add	r3, r1, #1
   18e3c:	mvn	r3, r3
   18e40:	cmp	r4, r3
   18e44:	bhi	18eac <__assert_fail@plt+0x7dc0>
   18e48:	add	r4, r4, #1
   18e4c:	add	r4, r4, r1
   18e50:	mov	r1, r4
   18e54:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18e58:	cmp	r0, #0
   18e5c:	bne	18e6c <__assert_fail@plt+0x7d80>
   18e60:	cmp	r4, #0
   18e64:	cmpne	r6, #0
   18e68:	bne	18eac <__assert_fail@plt+0x7dc0>
   18e6c:	str	r4, [r5]
   18e70:	pop	{r4, r5, r6, pc}
   18e74:	cmp	r4, #0
   18e78:	bne	18e94 <__assert_fail@plt+0x7da8>
   18e7c:	mov	r1, r2
   18e80:	mov	r0, #64	; 0x40
   18e84:	bl	1ae78 <__assert_fail@plt+0x9d8c>
   18e88:	cmp	r0, #0
   18e8c:	movne	r4, r0
   18e90:	addeq	r4, r0, #1
   18e94:	mov	r2, r6
   18e98:	mov	r1, r4
   18e9c:	mov	r0, #0
   18ea0:	bl	1ae2c <__assert_fail@plt+0x9d40>
   18ea4:	cmp	r0, #0
   18ea8:	bne	18e6c <__assert_fail@plt+0x7d80>
   18eac:	bl	192b4 <__assert_fail@plt+0x81c8>
   18eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eb4:	sub	sp, sp, #12
   18eb8:	ldr	r6, [r1]
   18ebc:	mov	r8, r1
   18ec0:	mov	r9, r0
   18ec4:	asrs	r4, r6, #1
   18ec8:	mov	sl, r2
   18ecc:	mov	fp, r3
   18ed0:	ldr	r7, [sp, #48]	; 0x30
   18ed4:	bmi	19050 <__assert_fail@plt+0x7f64>
   18ed8:	mvn	r1, #-2147483648	; 0x80000000
   18edc:	sub	r1, r1, r4
   18ee0:	cmp	r6, r1
   18ee4:	movle	r1, #0
   18ee8:	movgt	r1, #1
   18eec:	mvn	r3, fp
   18ef0:	cmp	r1, #0
   18ef4:	addeq	r4, r4, r6
   18ef8:	mvnne	r4, #-2147483648	; 0x80000000
   18efc:	lsr	r3, r3, #31
   18f00:	cmp	fp, r4
   18f04:	movge	r2, #0
   18f08:	andlt	r2, r3, #1
   18f0c:	cmp	r2, #0
   18f10:	beq	19000 <__assert_fail@plt+0x7f14>
   18f14:	cmp	r7, #0
   18f18:	blt	190e8 <__assert_fail@plt+0x7ffc>
   18f1c:	bne	190e0 <__assert_fail@plt+0x7ff4>
   18f20:	mov	r5, #64	; 0x40
   18f24:	mov	r1, r7
   18f28:	mov	r0, r5
   18f2c:	str	r3, [sp, #4]
   18f30:	bl	1b084 <__assert_fail@plt+0x9f98>
   18f34:	mov	r1, r7
   18f38:	mov	r4, r0
   18f3c:	mov	r0, r5
   18f40:	bl	1b2a4 <__assert_fail@plt+0xa1b8>
   18f44:	ldr	r3, [sp, #4]
   18f48:	sub	r5, r5, r1
   18f4c:	cmp	r9, #0
   18f50:	sub	r2, r4, r6
   18f54:	streq	r9, [r8]
   18f58:	cmp	r2, sl
   18f5c:	bge	18fe0 <__assert_fail@plt+0x7ef4>
   18f60:	cmp	sl, #0
   18f64:	blt	19080 <__assert_fail@plt+0x7f94>
   18f68:	cmp	r6, #0
   18f6c:	blt	18f8c <__assert_fail@plt+0x7ea0>
   18f70:	mvn	r2, #-2147483648	; 0x80000000
   18f74:	sub	r2, r2, sl
   18f78:	cmp	r6, r2
   18f7c:	movle	r2, #0
   18f80:	movgt	r2, #1
   18f84:	cmp	r2, #0
   18f88:	bne	1907c <__assert_fail@plt+0x7f90>
   18f8c:	add	r6, r6, sl
   18f90:	cmp	fp, r6
   18f94:	movge	r3, #0
   18f98:	andlt	r3, r3, #1
   18f9c:	cmp	r3, #0
   18fa0:	mov	r4, r6
   18fa4:	bne	1907c <__assert_fail@plt+0x7f90>
   18fa8:	cmp	r7, #0
   18fac:	blt	19094 <__assert_fail@plt+0x7fa8>
   18fb0:	beq	18fdc <__assert_fail@plt+0x7ef0>
   18fb4:	cmp	r6, #0
   18fb8:	blt	19138 <__assert_fail@plt+0x804c>
   18fbc:	mov	r1, r7
   18fc0:	mvn	r0, #-2147483648	; 0x80000000
   18fc4:	bl	1b084 <__assert_fail@plt+0x9f98>
   18fc8:	cmp	r6, r0
   18fcc:	movle	r0, #0
   18fd0:	movgt	r0, #1
   18fd4:	cmp	r0, #0
   18fd8:	bne	1907c <__assert_fail@plt+0x7f90>
   18fdc:	mul	r5, r6, r7
   18fe0:	mov	r1, r5
   18fe4:	mov	r0, r9
   18fe8:	bl	1a928 <__assert_fail@plt+0x983c>
   18fec:	cmp	r0, #0
   18ff0:	beq	19064 <__assert_fail@plt+0x7f78>
   18ff4:	str	r4, [r8]
   18ff8:	add	sp, sp, #12
   18ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19000:	cmp	r7, #0
   19004:	blt	190c0 <__assert_fail@plt+0x7fd4>
   19008:	beq	18f20 <__assert_fail@plt+0x7e34>
   1900c:	cmp	r4, #0
   19010:	blt	190f0 <__assert_fail@plt+0x8004>
   19014:	mov	r1, r7
   19018:	mvn	r0, #-2147483648	; 0x80000000
   1901c:	str	r3, [sp, #4]
   19020:	bl	1b084 <__assert_fail@plt+0x9f98>
   19024:	ldr	r3, [sp, #4]
   19028:	cmp	r0, r4
   1902c:	movge	r0, #0
   19030:	movlt	r0, #1
   19034:	cmp	r0, #0
   19038:	mvnne	r5, #-2147483648	; 0x80000000
   1903c:	bne	18f24 <__assert_fail@plt+0x7e38>
   19040:	mul	r5, r7, r4
   19044:	cmp	r5, #63	; 0x3f
   19048:	bgt	18f4c <__assert_fail@plt+0x7e60>
   1904c:	b	18f20 <__assert_fail@plt+0x7e34>
   19050:	rsb	r1, r4, #-2147483648	; 0x80000000
   19054:	cmp	r6, r1
   19058:	movge	r1, #0
   1905c:	movlt	r1, #1
   19060:	b	18eec <__assert_fail@plt+0x7e00>
   19064:	adds	r5, r5, #0
   19068:	movne	r5, #1
   1906c:	cmp	r9, #0
   19070:	orreq	r5, r5, #1
   19074:	cmp	r5, #0
   19078:	beq	18ff4 <__assert_fail@plt+0x7f08>
   1907c:	bl	192b4 <__assert_fail@plt+0x81c8>
   19080:	rsb	r2, sl, #-2147483648	; 0x80000000
   19084:	cmp	r6, r2
   19088:	movge	r2, #0
   1908c:	movlt	r2, #1
   19090:	b	18f84 <__assert_fail@plt+0x7e98>
   19094:	cmp	r6, #0
   19098:	blt	1911c <__assert_fail@plt+0x8030>
   1909c:	cmn	r7, #1
   190a0:	beq	18fdc <__assert_fail@plt+0x7ef0>
   190a4:	mov	r1, r7
   190a8:	mov	r0, #-2147483648	; 0x80000000
   190ac:	bl	1b084 <__assert_fail@plt+0x9f98>
   190b0:	cmp	r6, r0
   190b4:	movle	r0, #0
   190b8:	movgt	r0, #1
   190bc:	b	18fd4 <__assert_fail@plt+0x7ee8>
   190c0:	cmp	r4, #0
   190c4:	blt	1915c <__assert_fail@plt+0x8070>
   190c8:	cmn	r7, #1
   190cc:	beq	19040 <__assert_fail@plt+0x7f54>
   190d0:	str	r3, [sp, #4]
   190d4:	mov	r1, r7
   190d8:	mov	r0, #-2147483648	; 0x80000000
   190dc:	b	19020 <__assert_fail@plt+0x7f34>
   190e0:	mov	r4, fp
   190e4:	b	19014 <__assert_fail@plt+0x7f28>
   190e8:	mov	r4, fp
   190ec:	b	190c8 <__assert_fail@plt+0x7fdc>
   190f0:	cmn	r4, #1
   190f4:	beq	19040 <__assert_fail@plt+0x7f54>
   190f8:	mov	r1, r4
   190fc:	mov	r0, #-2147483648	; 0x80000000
   19100:	str	r3, [sp, #4]
   19104:	bl	1b084 <__assert_fail@plt+0x9f98>
   19108:	ldr	r3, [sp, #4]
   1910c:	cmp	r7, r0
   19110:	movle	r0, #0
   19114:	movgt	r0, #1
   19118:	b	19034 <__assert_fail@plt+0x7f48>
   1911c:	mov	r1, r7
   19120:	mvn	r0, #-2147483648	; 0x80000000
   19124:	bl	1b084 <__assert_fail@plt+0x9f98>
   19128:	cmp	r6, r0
   1912c:	movge	r0, #0
   19130:	movlt	r0, #1
   19134:	b	18fd4 <__assert_fail@plt+0x7ee8>
   19138:	cmn	r6, #1
   1913c:	beq	18fdc <__assert_fail@plt+0x7ef0>
   19140:	mov	r1, r6
   19144:	mov	r0, #-2147483648	; 0x80000000
   19148:	bl	1b084 <__assert_fail@plt+0x9f98>
   1914c:	cmp	r7, r0
   19150:	movle	r0, #0
   19154:	movgt	r0, #1
   19158:	b	18fd4 <__assert_fail@plt+0x7ee8>
   1915c:	mov	r1, r7
   19160:	mvn	r0, #-2147483648	; 0x80000000
   19164:	str	r3, [sp, #4]
   19168:	bl	1b084 <__assert_fail@plt+0x9f98>
   1916c:	ldr	r3, [sp, #4]
   19170:	cmp	r0, r4
   19174:	movle	r0, #0
   19178:	movgt	r0, #1
   1917c:	b	19034 <__assert_fail@plt+0x7f48>
   19180:	push	{r4, lr}
   19184:	mov	r1, #1
   19188:	bl	1a8b4 <__assert_fail@plt+0x97c8>
   1918c:	cmp	r0, #0
   19190:	popne	{r4, pc}
   19194:	bl	192b4 <__assert_fail@plt+0x81c8>
   19198:	push	{r4, lr}
   1919c:	mov	r1, #1
   191a0:	bl	1a8b4 <__assert_fail@plt+0x97c8>
   191a4:	cmp	r0, #0
   191a8:	popne	{r4, pc}
   191ac:	bl	192b4 <__assert_fail@plt+0x81c8>
   191b0:	push	{r4, lr}
   191b4:	bl	1a8b4 <__assert_fail@plt+0x97c8>
   191b8:	cmp	r0, #0
   191bc:	popne	{r4, pc}
   191c0:	bl	192b4 <__assert_fail@plt+0x81c8>
   191c4:	push	{r4, lr}
   191c8:	bl	1a8b4 <__assert_fail@plt+0x97c8>
   191cc:	cmp	r0, #0
   191d0:	popne	{r4, pc}
   191d4:	bl	192b4 <__assert_fail@plt+0x81c8>
   191d8:	push	{r4, r5, r6, lr}
   191dc:	mov	r6, r0
   191e0:	mov	r0, r1
   191e4:	mov	r4, r1
   191e8:	bl	1a8fc <__assert_fail@plt+0x9810>
   191ec:	subs	r5, r0, #0
   191f0:	beq	19208 <__assert_fail@plt+0x811c>
   191f4:	mov	r2, r4
   191f8:	mov	r1, r6
   191fc:	bl	10ea0 <memcpy@plt>
   19200:	mov	r0, r5
   19204:	pop	{r4, r5, r6, pc}
   19208:	bl	192b4 <__assert_fail@plt+0x81c8>
   1920c:	push	{r4, r5, r6, lr}
   19210:	mov	r6, r0
   19214:	mov	r0, r1
   19218:	mov	r4, r1
   1921c:	bl	1a8fc <__assert_fail@plt+0x9810>
   19220:	subs	r5, r0, #0
   19224:	beq	1923c <__assert_fail@plt+0x8150>
   19228:	mov	r2, r4
   1922c:	mov	r1, r6
   19230:	bl	10ea0 <memcpy@plt>
   19234:	mov	r0, r5
   19238:	pop	{r4, r5, r6, pc}
   1923c:	bl	192b4 <__assert_fail@plt+0x81c8>
   19240:	push	{r4, r5, r6, lr}
   19244:	mov	r6, r0
   19248:	add	r0, r1, #1
   1924c:	mov	r4, r1
   19250:	bl	1a8fc <__assert_fail@plt+0x9810>
   19254:	subs	r5, r0, #0
   19258:	beq	19278 <__assert_fail@plt+0x818c>
   1925c:	mov	r3, #0
   19260:	mov	r1, r6
   19264:	strb	r3, [r5, r4]
   19268:	mov	r2, r4
   1926c:	bl	10ea0 <memcpy@plt>
   19270:	mov	r0, r5
   19274:	pop	{r4, r5, r6, pc}
   19278:	bl	192b4 <__assert_fail@plt+0x81c8>
   1927c:	push	{r4, r5, r6, lr}
   19280:	mov	r6, r0
   19284:	bl	10fd8 <strlen@plt>
   19288:	add	r4, r0, #1
   1928c:	mov	r0, r4
   19290:	bl	1a8fc <__assert_fail@plt+0x9810>
   19294:	subs	r5, r0, #0
   19298:	beq	192b0 <__assert_fail@plt+0x81c4>
   1929c:	mov	r2, r4
   192a0:	mov	r1, r6
   192a4:	bl	10ea0 <memcpy@plt>
   192a8:	mov	r0, r5
   192ac:	pop	{r4, r5, r6, pc}
   192b0:	bl	192b4 <__assert_fail@plt+0x81c8>
   192b4:	ldr	r3, [pc, #44]	; 192e8 <__assert_fail@plt+0x81fc>
   192b8:	push	{r4, lr}
   192bc:	mov	r2, #5
   192c0:	ldr	r1, [pc, #36]	; 192ec <__assert_fail@plt+0x8200>
   192c4:	mov	r0, #0
   192c8:	ldr	r4, [r3]
   192cc:	bl	10ee8 <dcgettext@plt>
   192d0:	ldr	r2, [pc, #24]	; 192f0 <__assert_fail@plt+0x8204>
   192d4:	mov	r1, #0
   192d8:	mov	r3, r0
   192dc:	mov	r0, r4
   192e0:	bl	10f54 <error@plt>
   192e4:	bl	110d4 <abort@plt>
   192e8:	andeq	sp, r2, ip, lsl r1
   192ec:	andeq	ip, r1, r4, lsl #10
   192f0:	andeq	ip, r1, r0, asr #1
   192f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   192f8:	sub	sp, sp, #8
   192fc:	mov	r9, r1
   19300:	mov	r6, r2
   19304:	mov	r7, r3
   19308:	mov	r8, r0
   1930c:	bl	1ac5c <__assert_fail@plt+0x9b70>
   19310:	mov	r5, r0
   19314:	bl	10ff0 <__errno_location@plt>
   19318:	ldr	r4, [r0]
   1931c:	cmp	r4, #0
   19320:	beq	193c4 <__assert_fail@plt+0x82d8>
   19324:	mov	r2, #5
   19328:	ldr	r1, [pc, #160]	; 193d0 <__assert_fail@plt+0x82e4>
   1932c:	mov	r0, #0
   19330:	bl	10ee8 <dcgettext@plt>
   19334:	mov	r1, r4
   19338:	mov	r2, r0
   1933c:	mov	r0, #0
   19340:	bl	10f54 <error@plt>
   19344:	mov	r2, #5
   19348:	ldr	r1, [pc, #132]	; 193d4 <__assert_fail@plt+0x82e8>
   1934c:	mov	r0, #0
   19350:	bl	10ee8 <dcgettext@plt>
   19354:	mov	r1, #0
   19358:	mov	r2, r0
   1935c:	mov	r0, r1
   19360:	bl	10f54 <error@plt>
   19364:	ldr	r3, [pc, #108]	; 193d8 <__assert_fail@plt+0x82ec>
   19368:	mov	r2, #5
   1936c:	ldr	r1, [pc, #104]	; 193dc <__assert_fail@plt+0x82f0>
   19370:	mov	r0, #0
   19374:	ldr	r4, [r3]
   19378:	bl	10ee8 <dcgettext@plt>
   1937c:	mov	r2, r8
   19380:	mov	r3, r9
   19384:	mov	r1, #8
   19388:	mov	sl, r0
   1938c:	mov	r0, #0
   19390:	bl	164a8 <__assert_fail@plt+0x53bc>
   19394:	mov	r3, r7
   19398:	mov	r2, r6
   1939c:	mov	r1, #8
   193a0:	mov	r8, r0
   193a4:	mov	r0, #1
   193a8:	bl	164a8 <__assert_fail@plt+0x53bc>
   193ac:	mov	r3, r8
   193b0:	mov	r2, sl
   193b4:	mov	r1, #0
   193b8:	str	r0, [sp]
   193bc:	mov	r0, r4
   193c0:	bl	10f54 <error@plt>
   193c4:	mov	r0, r5
   193c8:	add	sp, sp, #8
   193cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   193d0:	andeq	ip, r1, r8, lsl r5
   193d4:	andeq	ip, r1, r4, lsr r5
   193d8:	andeq	sp, r2, ip, lsl r1
   193dc:	andeq	ip, r1, r0, ror #10
   193e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193e4:	sub	sp, sp, #8
   193e8:	mov	r9, r1
   193ec:	mov	r6, r2
   193f0:	mov	r7, r3
   193f4:	mov	r8, r0
   193f8:	bl	1ad6c <__assert_fail@plt+0x9c80>
   193fc:	mov	r5, r0
   19400:	bl	10ff0 <__errno_location@plt>
   19404:	ldr	r4, [r0]
   19408:	cmp	r4, #0
   1940c:	beq	194b0 <__assert_fail@plt+0x83c4>
   19410:	mov	r2, #5
   19414:	ldr	r1, [pc, #160]	; 194bc <__assert_fail@plt+0x83d0>
   19418:	mov	r0, #0
   1941c:	bl	10ee8 <dcgettext@plt>
   19420:	mov	r1, r4
   19424:	mov	r2, r0
   19428:	mov	r0, #0
   1942c:	bl	10f54 <error@plt>
   19430:	mov	r2, #5
   19434:	ldr	r1, [pc, #132]	; 194c0 <__assert_fail@plt+0x83d4>
   19438:	mov	r0, #0
   1943c:	bl	10ee8 <dcgettext@plt>
   19440:	mov	r1, #0
   19444:	mov	r2, r0
   19448:	mov	r0, r1
   1944c:	bl	10f54 <error@plt>
   19450:	ldr	r3, [pc, #108]	; 194c4 <__assert_fail@plt+0x83d8>
   19454:	mov	r2, #5
   19458:	ldr	r1, [pc, #104]	; 194c8 <__assert_fail@plt+0x83dc>
   1945c:	mov	r0, #0
   19460:	ldr	r4, [r3]
   19464:	bl	10ee8 <dcgettext@plt>
   19468:	mov	r2, r8
   1946c:	sub	r3, r9, #1
   19470:	mov	r1, #8
   19474:	mov	sl, r0
   19478:	mov	r0, #0
   1947c:	bl	164a8 <__assert_fail@plt+0x53bc>
   19480:	sub	r3, r7, #1
   19484:	mov	r2, r6
   19488:	mov	r1, #8
   1948c:	mov	r8, r0
   19490:	mov	r0, #1
   19494:	bl	164a8 <__assert_fail@plt+0x53bc>
   19498:	mov	r3, r8
   1949c:	mov	r2, sl
   194a0:	mov	r1, #0
   194a4:	str	r0, [sp]
   194a8:	mov	r0, r4
   194ac:	bl	10f54 <error@plt>
   194b0:	mov	r0, r5
   194b4:	add	sp, sp, #8
   194b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194bc:	andeq	ip, r1, r8, lsl r5
   194c0:	andeq	ip, r1, r4, lsr r5
   194c4:	andeq	sp, r2, ip, lsl r1
   194c8:	andeq	ip, r1, r0, ror #10
   194cc:	cmp	r2, #36	; 0x24
   194d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   194d4:	sub	sp, sp, #8
   194d8:	bhi	19ac0 <__assert_fail@plt+0x89d4>
   194dc:	cmp	r1, #0
   194e0:	mov	r6, r1
   194e4:	mov	r9, r2
   194e8:	mov	r5, r0
   194ec:	mov	r8, r3
   194f0:	addeq	r6, sp, #4
   194f4:	bl	10ff0 <__errno_location@plt>
   194f8:	mov	r3, #0
   194fc:	str	r3, [r0]
   19500:	mov	r7, r0
   19504:	bl	10fb4 <__ctype_b_loc@plt>
   19508:	ldrb	r1, [r5]
   1950c:	mov	r2, r5
   19510:	ldr	r0, [r0]
   19514:	b	1951c <__assert_fail@plt+0x8430>
   19518:	ldrb	r1, [r2, #1]!
   1951c:	lsl	r3, r1, #1
   19520:	ldrh	r3, [r0, r3]
   19524:	ands	r4, r3, #8192	; 0x2000
   19528:	bne	19518 <__assert_fail@plt+0x842c>
   1952c:	cmp	r1, #45	; 0x2d
   19530:	bne	19544 <__assert_fail@plt+0x8458>
   19534:	mov	r4, #4
   19538:	mov	r0, r4
   1953c:	add	sp, sp, #8
   19540:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19544:	mov	r2, r9
   19548:	mov	r1, r6
   1954c:	mov	r0, r5
   19550:	bl	10fcc <strtoul@plt>
   19554:	ldr	sl, [r6]
   19558:	cmp	r5, sl
   1955c:	mov	r9, r0
   19560:	beq	195a8 <__assert_fail@plt+0x84bc>
   19564:	ldr	r4, [r7]
   19568:	cmp	r4, #0
   1956c:	bne	19598 <__assert_fail@plt+0x84ac>
   19570:	ldr	r3, [sp, #40]	; 0x28
   19574:	cmp	r3, #0
   19578:	beq	19588 <__assert_fail@plt+0x849c>
   1957c:	ldrb	r5, [sl]
   19580:	cmp	r5, #0
   19584:	bne	195d8 <__assert_fail@plt+0x84ec>
   19588:	mov	r0, r4
   1958c:	str	r9, [r8]
   19590:	add	sp, sp, #8
   19594:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19598:	cmp	r4, #34	; 0x22
   1959c:	bne	19534 <__assert_fail@plt+0x8448>
   195a0:	mov	r4, #1
   195a4:	b	19570 <__assert_fail@plt+0x8484>
   195a8:	ldr	r3, [sp, #40]	; 0x28
   195ac:	cmp	r3, #0
   195b0:	beq	19534 <__assert_fail@plt+0x8448>
   195b4:	ldrb	r5, [sl]
   195b8:	cmp	r5, #0
   195bc:	beq	19534 <__assert_fail@plt+0x8448>
   195c0:	mov	r1, r5
   195c4:	mov	r0, r3
   195c8:	bl	10fe4 <strchr@plt>
   195cc:	cmp	r0, #0
   195d0:	movne	r9, #1
   195d4:	beq	19534 <__assert_fail@plt+0x8448>
   195d8:	mov	r1, r5
   195dc:	ldr	r0, [sp, #40]	; 0x28
   195e0:	bl	10fe4 <strchr@plt>
   195e4:	cmp	r0, #0
   195e8:	beq	19a78 <__assert_fail@plt+0x898c>
   195ec:	sub	r3, r5, #69	; 0x45
   195f0:	cmp	r3, #47	; 0x2f
   195f4:	ldrls	pc, [pc, r3, lsl #2]
   195f8:	b	196bc <__assert_fail@plt+0x85d0>
   195fc:			; <UNDEFINED> instruction: 0x000197b0
   19600:			; <UNDEFINED> instruction: 0x000196bc
   19604:			; <UNDEFINED> instruction: 0x000197b0
   19608:			; <UNDEFINED> instruction: 0x000196bc
   1960c:			; <UNDEFINED> instruction: 0x000196bc
   19610:			; <UNDEFINED> instruction: 0x000196bc
   19614:			; <UNDEFINED> instruction: 0x000197b0
   19618:			; <UNDEFINED> instruction: 0x000196bc
   1961c:			; <UNDEFINED> instruction: 0x000197b0
   19620:			; <UNDEFINED> instruction: 0x000196bc
   19624:			; <UNDEFINED> instruction: 0x000196bc
   19628:			; <UNDEFINED> instruction: 0x000197b0
   1962c:			; <UNDEFINED> instruction: 0x000196bc
   19630:			; <UNDEFINED> instruction: 0x000196bc
   19634:			; <UNDEFINED> instruction: 0x000196bc
   19638:			; <UNDEFINED> instruction: 0x000197b0
   1963c:			; <UNDEFINED> instruction: 0x000196bc
   19640:			; <UNDEFINED> instruction: 0x000196bc
   19644:			; <UNDEFINED> instruction: 0x000196bc
   19648:			; <UNDEFINED> instruction: 0x000196bc
   1964c:			; <UNDEFINED> instruction: 0x000197b0
   19650:			; <UNDEFINED> instruction: 0x000197b0
   19654:			; <UNDEFINED> instruction: 0x000196bc
   19658:			; <UNDEFINED> instruction: 0x000196bc
   1965c:			; <UNDEFINED> instruction: 0x000196bc
   19660:			; <UNDEFINED> instruction: 0x000196bc
   19664:			; <UNDEFINED> instruction: 0x000196bc
   19668:			; <UNDEFINED> instruction: 0x000196bc
   1966c:			; <UNDEFINED> instruction: 0x000196bc
   19670:			; <UNDEFINED> instruction: 0x000196bc
   19674:			; <UNDEFINED> instruction: 0x000196bc
   19678:			; <UNDEFINED> instruction: 0x000196bc
   1967c:			; <UNDEFINED> instruction: 0x000196bc
   19680:			; <UNDEFINED> instruction: 0x000196bc
   19684:			; <UNDEFINED> instruction: 0x000197b0
   19688:			; <UNDEFINED> instruction: 0x000196bc
   1968c:			; <UNDEFINED> instruction: 0x000196bc
   19690:			; <UNDEFINED> instruction: 0x000196bc
   19694:			; <UNDEFINED> instruction: 0x000197b0
   19698:			; <UNDEFINED> instruction: 0x000196bc
   1969c:			; <UNDEFINED> instruction: 0x000197b0
   196a0:			; <UNDEFINED> instruction: 0x000196bc
   196a4:			; <UNDEFINED> instruction: 0x000196bc
   196a8:			; <UNDEFINED> instruction: 0x000196bc
   196ac:			; <UNDEFINED> instruction: 0x000196bc
   196b0:			; <UNDEFINED> instruction: 0x000196bc
   196b4:			; <UNDEFINED> instruction: 0x000196bc
   196b8:			; <UNDEFINED> instruction: 0x000197b0
   196bc:	ldr	r0, [pc, #1040]	; 19ad4 <__assert_fail@plt+0x89e8>
   196c0:	mov	r2, #1024	; 0x400
   196c4:	mov	r1, #1
   196c8:	sub	r5, r5, #66	; 0x42
   196cc:	cmp	r5, #53	; 0x35
   196d0:	ldrls	pc, [pc, r5, lsl #2]
   196d4:	b	19a78 <__assert_fail@plt+0x898c>
   196d8:	andeq	r9, r1, r4, ror #20
   196dc:	andeq	r9, r1, r8, ror sl
   196e0:	andeq	r9, r1, r8, ror sl
   196e4:	andeq	r9, r1, r4, lsl #20
   196e8:	andeq	r9, r1, r8, ror sl
   196ec:	ldrdeq	r9, [r1], -r8
   196f0:	andeq	r9, r1, r8, ror sl
   196f4:	andeq	r9, r1, r8, ror sl
   196f8:	andeq	r9, r1, r8, ror sl
   196fc:	andeq	r9, r1, r4, lsl #21
   19700:	andeq	r9, r1, r8, ror sl
   19704:	andeq	r9, r1, r0, asr #19
   19708:	andeq	r9, r1, r8, ror sl
   1970c:	andeq	r9, r1, r8, ror sl
   19710:	andeq	r9, r1, ip, ror r9
   19714:	andeq	r9, r1, r8, ror sl
   19718:	andeq	r9, r1, r8, ror sl
   1971c:	andeq	r9, r1, r8, ror sl
   19720:	andeq	r9, r1, r8, lsr #18
   19724:	andeq	r9, r1, r8, ror sl
   19728:	andeq	r9, r1, r8, ror sl
   1972c:	andeq	r9, r1, r8, ror sl
   19730:	andeq	r9, r1, r8, ror sl
   19734:			; <UNDEFINED> instruction: 0x000198b8
   19738:	andeq	r9, r1, r8, lsr r8
   1973c:	andeq	r9, r1, r8, ror sl
   19740:	andeq	r9, r1, r8, ror sl
   19744:	andeq	r9, r1, r8, ror sl
   19748:	andeq	r9, r1, r8, ror sl
   1974c:	andeq	r9, r1, r8, ror sl
   19750:	andeq	r9, r1, r8, ror sl
   19754:	andeq	r9, r1, r8, ror sl
   19758:	andeq	r9, r1, r4, lsr #16
   1975c:	andeq	r9, r1, ip, lsl r8
   19760:	andeq	r9, r1, r8, ror sl
   19764:	andeq	r9, r1, r8, ror sl
   19768:	andeq	r9, r1, r8, ror sl
   1976c:	ldrdeq	r9, [r1], -r8
   19770:	andeq	r9, r1, r8, ror sl
   19774:	andeq	r9, r1, r8, ror sl
   19778:	andeq	r9, r1, r8, ror sl
   1977c:	andeq	r9, r1, r4, lsl #21
   19780:	andeq	r9, r1, r8, ror sl
   19784:	andeq	r9, r1, r0, asr #19
   19788:	andeq	r9, r1, r8, ror sl
   1978c:	andeq	r9, r1, r8, ror sl
   19790:	andeq	r9, r1, r8, ror sl
   19794:	andeq	r9, r1, r8, ror sl
   19798:	andeq	r9, r1, r8, ror sl
   1979c:	andeq	r9, r1, r8, ror sl
   197a0:	andeq	r9, r1, r8, lsr #18
   197a4:	andeq	r9, r1, r8, ror sl
   197a8:	andeq	r9, r1, r8, ror sl
   197ac:	strdeq	r9, [r1], -r0
   197b0:	mov	r1, #48	; 0x30
   197b4:	ldr	r0, [sp, #40]	; 0x28
   197b8:	bl	10fe4 <strchr@plt>
   197bc:	cmp	r0, #0
   197c0:	beq	196bc <__assert_fail@plt+0x85d0>
   197c4:	ldrb	r3, [sl, #1]
   197c8:	cmp	r3, #68	; 0x44
   197cc:	beq	197e0 <__assert_fail@plt+0x86f4>
   197d0:	cmp	r3, #105	; 0x69
   197d4:	beq	19a98 <__assert_fail@plt+0x89ac>
   197d8:	cmp	r3, #66	; 0x42
   197dc:	bne	196bc <__assert_fail@plt+0x85d0>
   197e0:	ldr	r0, [pc, #752]	; 19ad8 <__assert_fail@plt+0x89ec>
   197e4:	mov	r2, #1000	; 0x3e8
   197e8:	mov	r1, #2
   197ec:	b	196c8 <__assert_fail@plt+0x85dc>
   197f0:	cmp	r9, #0
   197f4:	lslge	r9, r9, #1
   197f8:	movge	r3, #0
   197fc:	blt	19ab4 <__assert_fail@plt+0x89c8>
   19800:	add	r2, sl, r1
   19804:	str	r2, [r6]
   19808:	ldrb	r2, [sl, r1]
   1980c:	orr	r4, r4, r3
   19810:	cmp	r2, #0
   19814:	orrne	r4, r4, #2
   19818:	b	19588 <__assert_fail@plt+0x849c>
   1981c:	mov	r3, #0
   19820:	b	19800 <__assert_fail@plt+0x8714>
   19824:	cmp	r9, #8388608	; 0x800000
   19828:	bcs	19ab4 <__assert_fail@plt+0x89c8>
   1982c:	lsl	r9, r9, #9
   19830:	mov	r3, #0
   19834:	b	19800 <__assert_fail@plt+0x8714>
   19838:	mul	r3, r9, r2
   1983c:	cmp	r0, r9
   19840:	mvncc	r3, #0
   19844:	cmp	r3, r0
   19848:	mul	ip, r2, r3
   1984c:	mvnhi	ip, #0
   19850:	movhi	r3, #1
   19854:	mul	lr, r2, ip
   19858:	movls	r3, #0
   1985c:	cmp	r0, r9
   19860:	orrcc	r3, r3, #1
   19864:	cmp	ip, r0
   19868:	mvnhi	lr, #0
   1986c:	orrhi	r3, r3, #1
   19870:	mul	ip, r2, lr
   19874:	cmp	lr, r0
   19878:	mvnhi	ip, #0
   1987c:	orrhi	r3, r3, #1
   19880:	cmp	ip, r0
   19884:	mul	lr, r2, ip
   19888:	orrhi	r3, r3, #1
   1988c:	mvnhi	lr, #0
   19890:	cmp	r0, lr
   19894:	mul	ip, lr, r2
   19898:	orrcc	r3, r3, #1
   1989c:	mvncc	ip, #0
   198a0:	mul	r2, r2, ip
   198a4:	cmp	ip, r0
   198a8:	movls	r9, r2
   198ac:	mvnhi	r9, #0
   198b0:	orrhi	r3, r3, #1
   198b4:	b	19800 <__assert_fail@plt+0x8714>
   198b8:	mul	r3, r9, r2
   198bc:	cmp	r0, r9
   198c0:	mvncc	r3, #0
   198c4:	cmp	r3, r0
   198c8:	mul	ip, r2, r3
   198cc:	mvnhi	ip, #0
   198d0:	movhi	r3, #1
   198d4:	mul	lr, r2, ip
   198d8:	movls	r3, #0
   198dc:	cmp	r0, r9
   198e0:	orrcc	r3, r3, #1
   198e4:	cmp	ip, r0
   198e8:	movls	ip, lr
   198ec:	mvnhi	ip, #0
   198f0:	orrhi	r3, r3, #1
   198f4:	mul	lr, ip, r2
   198f8:	cmp	r0, ip
   198fc:	mvncc	lr, #0
   19900:	orrcc	r3, r3, #1
   19904:	mul	ip, r2, lr
   19908:	cmp	lr, r0
   1990c:	mvnhi	ip, #0
   19910:	orrhi	r3, r3, #1
   19914:	cmp	r0, ip
   19918:	mul	lr, ip, r2
   1991c:	orrcc	r3, r3, #1
   19920:	mvncc	lr, #0
   19924:	b	19890 <__assert_fail@plt+0x87a4>
   19928:	mul	r3, r9, r2
   1992c:	cmp	r0, r9
   19930:	mvncc	r3, #0
   19934:	cmp	r0, r3
   19938:	mul	ip, r3, r2
   1993c:	mvncc	ip, #0
   19940:	movcc	r3, #1
   19944:	mul	lr, r2, ip
   19948:	movcs	r3, #0
   1994c:	cmp	r0, r9
   19950:	orrcc	r3, r3, #1
   19954:	cmp	ip, r0
   19958:	movls	ip, lr
   1995c:	mvnhi	ip, #0
   19960:	orrhi	r3, r3, #1
   19964:	mul	r2, ip, r2
   19968:	cmp	r0, ip
   1996c:	movcs	r9, r2
   19970:	mvncc	r9, #0
   19974:	orrcc	r3, r3, #1
   19978:	b	19800 <__assert_fail@plt+0x8714>
   1997c:	mul	r3, r9, r2
   19980:	cmp	r0, r9
   19984:	mvncc	r3, #0
   19988:	cmp	r0, r3
   1998c:	mul	ip, r3, r2
   19990:	mvncc	ip, #0
   19994:	movcc	r3, #1
   19998:	mul	lr, ip, r2
   1999c:	movcs	r3, #0
   199a0:	cmp	r0, r9
   199a4:	orrcc	r3, r3, #1
   199a8:	cmp	r0, ip
   199ac:	mvncc	lr, #0
   199b0:	orrcc	r3, r3, #1
   199b4:	mul	ip, r2, lr
   199b8:	cmp	lr, r0
   199bc:	b	1995c <__assert_fail@plt+0x8870>
   199c0:	cmp	r0, r9
   199c4:	mul	ip, r9, r2
   199c8:	movcc	r3, #1
   199cc:	mvncc	ip, #0
   199d0:	movcs	r3, #0
   199d4:	b	19964 <__assert_fail@plt+0x8878>
   199d8:	mul	r3, r9, r2
   199dc:	cmp	r0, r9
   199e0:	mvncc	r3, #0
   199e4:	cmp	r3, r0
   199e8:	mul	ip, r2, r3
   199ec:	movhi	r3, #1
   199f0:	movls	r3, #0
   199f4:	mvnhi	ip, #0
   199f8:	cmp	r0, r9
   199fc:	orrcc	r3, r3, #1
   19a00:	b	198a0 <__assert_fail@plt+0x87b4>
   19a04:	mul	r3, r9, r2
   19a08:	cmp	r0, r9
   19a0c:	mvncc	r3, #0
   19a10:	cmp	r0, r3
   19a14:	mul	ip, r3, r2
   19a18:	mvncc	ip, #0
   19a1c:	movcc	r3, #1
   19a20:	mul	lr, r2, ip
   19a24:	movcs	r3, #0
   19a28:	cmp	r0, r9
   19a2c:	orrcc	r3, r3, #1
   19a30:	cmp	ip, r0
   19a34:	movls	ip, lr
   19a38:	mvnhi	ip, #0
   19a3c:	orrhi	r3, r3, #1
   19a40:	mul	lr, r2, ip
   19a44:	cmp	ip, r0
   19a48:	mvnhi	lr, #0
   19a4c:	orrhi	r3, r3, #1
   19a50:	cmp	lr, r0
   19a54:	mul	ip, r2, lr
   19a58:	orrhi	r3, r3, #1
   19a5c:	mvnhi	ip, #0
   19a60:	b	198a0 <__assert_fail@plt+0x87b4>
   19a64:	cmp	r9, #4194304	; 0x400000
   19a68:	bcs	19ab4 <__assert_fail@plt+0x89c8>
   19a6c:	lsl	r9, r9, #10
   19a70:	mov	r3, #0
   19a74:	b	19800 <__assert_fail@plt+0x8714>
   19a78:	str	r9, [r8]
   19a7c:	orr	r4, r4, #2
   19a80:	b	19538 <__assert_fail@plt+0x844c>
   19a84:	cmp	r0, r9
   19a88:	bcc	19ab4 <__assert_fail@plt+0x89c8>
   19a8c:	mul	r9, r9, r2
   19a90:	mov	r3, #0
   19a94:	b	19800 <__assert_fail@plt+0x8714>
   19a98:	ldrb	r1, [sl, #2]
   19a9c:	ldr	r0, [pc, #48]	; 19ad4 <__assert_fail@plt+0x89e8>
   19aa0:	mov	r2, #1024	; 0x400
   19aa4:	cmp	r1, #66	; 0x42
   19aa8:	movne	r1, #1
   19aac:	moveq	r1, #3
   19ab0:	b	196c8 <__assert_fail@plt+0x85dc>
   19ab4:	mvn	r9, #0
   19ab8:	mov	r3, #1
   19abc:	b	19800 <__assert_fail@plt+0x8714>
   19ac0:	ldr	r3, [pc, #20]	; 19adc <__assert_fail@plt+0x89f0>
   19ac4:	mov	r2, #85	; 0x55
   19ac8:	ldr	r1, [pc, #16]	; 19ae0 <__assert_fail@plt+0x89f4>
   19acc:	ldr	r0, [pc, #16]	; 19ae4 <__assert_fail@plt+0x89f8>
   19ad0:	bl	110ec <__assert_fail@plt>
   19ad4:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   19ad8:	subeq	r8, r1, r7, lsr r9
   19adc:	andeq	ip, r1, r8, lsl #11
   19ae0:	muleq	r1, r4, r5
   19ae4:	andeq	ip, r1, r4, lsr #11
   19ae8:	cmp	r2, #36	; 0x24
   19aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19af0:	sub	sp, sp, #52	; 0x34
   19af4:	bhi	1a884 <__assert_fail@plt+0x9798>
   19af8:	cmp	r1, #0
   19afc:	mov	r6, r2
   19b00:	mov	sl, r0
   19b04:	mov	r5, r1
   19b08:	mov	r8, r3
   19b0c:	addeq	r5, sp, #44	; 0x2c
   19b10:	bl	10ff0 <__errno_location@plt>
   19b14:	mov	r3, #0
   19b18:	str	r3, [r0]
   19b1c:	mov	fp, r0
   19b20:	bl	10fb4 <__ctype_b_loc@plt>
   19b24:	ldrb	r3, [sl]
   19b28:	mov	r2, sl
   19b2c:	ldr	r0, [r0]
   19b30:	b	19b38 <__assert_fail@plt+0x8a4c>
   19b34:	ldrb	r3, [r2, #1]!
   19b38:	lsl	r1, r3, #1
   19b3c:	ldrh	r4, [r0, r1]
   19b40:	ands	r4, r4, #8192	; 0x2000
   19b44:	bne	19b34 <__assert_fail@plt+0x8a48>
   19b48:	cmp	r3, #45	; 0x2d
   19b4c:	bne	19b60 <__assert_fail@plt+0x8a74>
   19b50:	mov	r4, #4
   19b54:	mov	r0, r4
   19b58:	add	sp, sp, #52	; 0x34
   19b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b60:	mov	r2, r6
   19b64:	mov	r3, r4
   19b68:	mov	r1, r5
   19b6c:	mov	r0, sl
   19b70:	bl	10eac <__strtoull_internal@plt>
   19b74:	ldr	r9, [r5]
   19b78:	cmp	sl, r9
   19b7c:	mov	r6, r0
   19b80:	mov	r7, r1
   19b84:	beq	19bcc <__assert_fail@plt+0x8ae0>
   19b88:	ldr	r4, [fp]
   19b8c:	cmp	r4, #0
   19b90:	bne	19bbc <__assert_fail@plt+0x8ad0>
   19b94:	ldr	r3, [sp, #88]	; 0x58
   19b98:	cmp	r3, #0
   19b9c:	beq	19bac <__assert_fail@plt+0x8ac0>
   19ba0:	ldrb	sl, [r9]
   19ba4:	cmp	sl, #0
   19ba8:	bne	19c00 <__assert_fail@plt+0x8b14>
   19bac:	mov	r0, r4
   19bb0:	strd	r6, [r8]
   19bb4:	add	sp, sp, #52	; 0x34
   19bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bbc:	cmp	r4, #34	; 0x22
   19bc0:	bne	19b50 <__assert_fail@plt+0x8a64>
   19bc4:	mov	r4, #1
   19bc8:	b	19b94 <__assert_fail@plt+0x8aa8>
   19bcc:	ldr	r3, [sp, #88]	; 0x58
   19bd0:	cmp	r3, #0
   19bd4:	beq	19b50 <__assert_fail@plt+0x8a64>
   19bd8:	ldrb	sl, [r9]
   19bdc:	cmp	sl, #0
   19be0:	beq	19b50 <__assert_fail@plt+0x8a64>
   19be4:	mov	r1, sl
   19be8:	mov	r0, r3
   19bec:	bl	10fe4 <strchr@plt>
   19bf0:	cmp	r0, #0
   19bf4:	movne	r6, #1
   19bf8:	movne	r7, #0
   19bfc:	beq	19b50 <__assert_fail@plt+0x8a64>
   19c00:	mov	r1, sl
   19c04:	ldr	r0, [sp, #88]	; 0x58
   19c08:	bl	10fe4 <strchr@plt>
   19c0c:	cmp	r0, #0
   19c10:	beq	1a770 <__assert_fail@plt+0x9684>
   19c14:	sub	r3, sl, #69	; 0x45
   19c18:	cmp	r3, #47	; 0x2f
   19c1c:	ldrls	pc, [pc, r3, lsl #2]
   19c20:	b	19d14 <__assert_fail@plt+0x8c28>
   19c24:	andeq	r9, r1, r4, ror #25
   19c28:	andeq	r9, r1, r4, lsl sp
   19c2c:	andeq	r9, r1, r4, ror #25
   19c30:	andeq	r9, r1, r4, lsl sp
   19c34:	andeq	r9, r1, r4, lsl sp
   19c38:	andeq	r9, r1, r4, lsl sp
   19c3c:	andeq	r9, r1, r4, ror #25
   19c40:	andeq	r9, r1, r4, lsl sp
   19c44:	andeq	r9, r1, r4, ror #25
   19c48:	andeq	r9, r1, r4, lsl sp
   19c4c:	andeq	r9, r1, r4, lsl sp
   19c50:	andeq	r9, r1, r4, ror #25
   19c54:	andeq	r9, r1, r4, lsl sp
   19c58:	andeq	r9, r1, r4, lsl sp
   19c5c:	andeq	r9, r1, r4, lsl sp
   19c60:	andeq	r9, r1, r4, ror #25
   19c64:	andeq	r9, r1, r4, lsl sp
   19c68:	andeq	r9, r1, r4, lsl sp
   19c6c:	andeq	r9, r1, r4, lsl sp
   19c70:	andeq	r9, r1, r4, lsl sp
   19c74:	andeq	r9, r1, r4, ror #25
   19c78:	andeq	r9, r1, r4, ror #25
   19c7c:	andeq	r9, r1, r4, lsl sp
   19c80:	andeq	r9, r1, r4, lsl sp
   19c84:	andeq	r9, r1, r4, lsl sp
   19c88:	andeq	r9, r1, r4, lsl sp
   19c8c:	andeq	r9, r1, r4, lsl sp
   19c90:	andeq	r9, r1, r4, lsl sp
   19c94:	andeq	r9, r1, r4, lsl sp
   19c98:	andeq	r9, r1, r4, lsl sp
   19c9c:	andeq	r9, r1, r4, lsl sp
   19ca0:	andeq	r9, r1, r4, lsl sp
   19ca4:	andeq	r9, r1, r4, lsl sp
   19ca8:	andeq	r9, r1, r4, lsl sp
   19cac:	andeq	r9, r1, r4, ror #25
   19cb0:	andeq	r9, r1, r4, lsl sp
   19cb4:	andeq	r9, r1, r4, lsl sp
   19cb8:	andeq	r9, r1, r4, lsl sp
   19cbc:	andeq	r9, r1, r4, ror #25
   19cc0:	andeq	r9, r1, r4, lsl sp
   19cc4:	andeq	r9, r1, r4, ror #25
   19cc8:	andeq	r9, r1, r4, lsl sp
   19ccc:	andeq	r9, r1, r4, lsl sp
   19cd0:	andeq	r9, r1, r4, lsl sp
   19cd4:	andeq	r9, r1, r4, lsl sp
   19cd8:	andeq	r9, r1, r4, lsl sp
   19cdc:	andeq	r9, r1, r4, lsl sp
   19ce0:	andeq	r9, r1, r4, ror #25
   19ce4:	mov	r1, #48	; 0x30
   19ce8:	ldr	r0, [sp, #88]	; 0x58
   19cec:	bl	10fe4 <strchr@plt>
   19cf0:	cmp	r0, #0
   19cf4:	beq	1a804 <__assert_fail@plt+0x9718>
   19cf8:	ldrb	r3, [r9, #1]
   19cfc:	cmp	r3, #68	; 0x44
   19d00:	beq	1a7e4 <__assert_fail@plt+0x96f8>
   19d04:	cmp	r3, #105	; 0x69
   19d08:	beq	1a7b4 <__assert_fail@plt+0x96c8>
   19d0c:	cmp	r3, #66	; 0x42
   19d10:	beq	1a7e4 <__assert_fail@plt+0x96f8>
   19d14:	ldr	r3, [pc, #2948]	; 1a8a0 <__assert_fail@plt+0x97b4>
   19d18:	mvn	r2, #0
   19d1c:	mov	r1, #1024	; 0x400
   19d20:	mov	lr, #0
   19d24:	strd	r2, [sp]
   19d28:	mov	r3, #1
   19d2c:	str	r3, [sp, #12]
   19d30:	sub	sl, sl, #66	; 0x42
   19d34:	cmp	sl, #53	; 0x35
   19d38:	ldrls	pc, [pc, sl, lsl #2]
   19d3c:	b	1a770 <__assert_fail@plt+0x9684>
   19d40:	andeq	sl, r1, r0, asr #14
   19d44:	andeq	sl, r1, r0, ror r7
   19d48:	andeq	sl, r1, r0, ror r7
   19d4c:			; <UNDEFINED> instruction: 0x0001a5bc
   19d50:	andeq	sl, r1, r0, ror r7
   19d54:	strdeq	sl, [r1], -r8
   19d58:	andeq	sl, r1, r0, ror r7
   19d5c:	andeq	sl, r1, r0, ror r7
   19d60:	andeq	sl, r1, r0, ror r7
   19d64:	andeq	sl, r1, ip, ror r7
   19d68:	andeq	sl, r1, r0, ror r7
   19d6c:	andeq	r9, r1, r8, lsl lr
   19d70:	andeq	sl, r1, r0, ror r7
   19d74:	andeq	sl, r1, r0, ror r7
   19d78:	andeq	r9, r1, r4, lsr #29
   19d7c:	andeq	sl, r1, r0, ror r7
   19d80:	andeq	sl, r1, r0, ror r7
   19d84:	andeq	sl, r1, r0, ror r7
   19d88:	andeq	sl, r1, r4, lsr #4
   19d8c:	andeq	sl, r1, r0, ror r7
   19d90:	andeq	sl, r1, r0, ror r7
   19d94:	andeq	sl, r1, r0, ror r7
   19d98:	andeq	sl, r1, r0, ror r7
   19d9c:	strdeq	r9, [r1], -ip
   19da0:	andeq	sl, r1, r8, asr r3
   19da4:	andeq	sl, r1, r0, ror r7
   19da8:	andeq	sl, r1, r0, ror r7
   19dac:	andeq	sl, r1, r0, ror r7
   19db0:	andeq	sl, r1, r0, ror r7
   19db4:	andeq	sl, r1, r0, ror r7
   19db8:	andeq	sl, r1, r0, ror r7
   19dbc:	andeq	sl, r1, r0, ror r7
   19dc0:	andeq	sl, r1, r8, lsr #6
   19dc4:	andeq	sl, r1, r0, lsr #6
   19dc8:	andeq	sl, r1, r0, ror r7
   19dcc:	andeq	sl, r1, r0, ror r7
   19dd0:	andeq	sl, r1, r0, ror r7
   19dd4:	strdeq	sl, [r1], -r8
   19dd8:	andeq	sl, r1, r0, ror r7
   19ddc:	andeq	sl, r1, r0, ror r7
   19de0:	andeq	sl, r1, r0, ror r7
   19de4:	andeq	sl, r1, ip, ror r7
   19de8:	andeq	sl, r1, r0, ror r7
   19dec:	andeq	r9, r1, r8, lsl lr
   19df0:	andeq	sl, r1, r0, ror r7
   19df4:	andeq	sl, r1, r0, ror r7
   19df8:	andeq	sl, r1, r0, ror r7
   19dfc:	andeq	sl, r1, r0, ror r7
   19e00:	andeq	sl, r1, r0, ror r7
   19e04:	andeq	sl, r1, r0, ror r7
   19e08:	andeq	sl, r1, r4, lsr #4
   19e0c:	andeq	sl, r1, r0, ror r7
   19e10:	andeq	sl, r1, r0, ror r7
   19e14:	andeq	sl, r1, r4, lsl #6
   19e18:	mul	r0, r6, lr
   19e1c:	ldrd	sl, [sp]
   19e20:	umull	r2, r3, r6, r1
   19e24:	mla	r0, r1, r7, r0
   19e28:	cmp	r7, fp
   19e2c:	cmpeq	r6, sl
   19e30:	add	r3, r0, r3
   19e34:	mvnhi	r3, #0
   19e38:	mvnhi	r2, #0
   19e3c:	mul	r6, r1, r3
   19e40:	umull	r0, r1, r1, r2
   19e44:	mla	lr, lr, r2, r6
   19e48:	ldrd	r6, [sp]
   19e4c:	movhi	ip, #1
   19e50:	movls	ip, #0
   19e54:	cmp	r7, r3
   19e58:	cmpeq	r6, r2
   19e5c:	mvncc	r0, #0
   19e60:	add	r1, lr, r1
   19e64:	mov	sl, r6
   19e68:	movcc	r1, r0
   19e6c:	mov	fp, r7
   19e70:	cmp	fp, r3
   19e74:	cmpeq	sl, r2
   19e78:	mov	r6, r0
   19e7c:	mov	r7, r1
   19e80:	orrcc	ip, ip, #1
   19e84:	ldr	r2, [sp, #12]
   19e88:	orr	r4, r4, ip
   19e8c:	add	r3, r9, r2
   19e90:	str	r3, [r5]
   19e94:	ldrb	r3, [r9, r2]
   19e98:	cmp	r3, #0
   19e9c:	orrne	r4, r4, #2
   19ea0:	b	19bac <__assert_fail@plt+0x8ac0>
   19ea4:	ldrd	sl, [sp]
   19ea8:	umull	r2, r3, r6, r1
   19eac:	mul	r0, r6, lr
   19eb0:	cmp	r7, fp
   19eb4:	cmpeq	r6, sl
   19eb8:	mvnhi	r2, #0
   19ebc:	mla	r0, r1, r7, r0
   19ec0:	umull	sl, fp, r2, r1
   19ec4:	add	r3, r0, r3
   19ec8:	mul	r0, lr, r2
   19ecc:	mvnhi	r3, #0
   19ed0:	strd	sl, [sp, #16]
   19ed4:	ldrd	sl, [sp]
   19ed8:	mla	r0, r1, r3, r0
   19edc:	ldr	ip, [sp, #20]
   19ee0:	cmp	r3, fp
   19ee4:	add	r0, r0, ip
   19ee8:	cmpeq	r2, sl
   19eec:	str	r0, [sp, #20]
   19ef0:	bls	19f08 <__assert_fail@plt+0x8e1c>
   19ef4:	mvn	sl, #0
   19ef8:	mvn	fp, #0
   19efc:	strd	sl, [sp, #16]
   19f00:	ldr	r0, [sp, #20]
   19f04:	ldrd	sl, [sp]
   19f08:	cmp	r7, fp
   19f0c:	cmpeq	r6, sl
   19f10:	mul	r0, r1, r0
   19f14:	ldrd	r6, [sp, #16]
   19f18:	mla	ip, lr, r6, r0
   19f1c:	mov	r0, r6
   19f20:	movhi	r0, #1
   19f24:	movls	r0, #0
   19f28:	cmp	r3, fp
   19f2c:	cmpeq	r2, sl
   19f30:	ldrd	r2, [sp, #16]
   19f34:	umull	r6, r7, r1, r6
   19f38:	orrhi	r0, r0, #1
   19f3c:	cmp	fp, r3
   19f40:	cmpeq	sl, r2
   19f44:	add	r7, ip, r7
   19f48:	bcc	1a854 <__assert_fail@plt+0x9768>
   19f4c:	mov	sl, r6
   19f50:	mov	fp, r7
   19f54:	strd	r6, [sp, #24]
   19f58:	mul	r3, r1, fp
   19f5c:	umull	r6, r7, r1, sl
   19f60:	mla	ip, lr, sl, r3
   19f64:	ldrd	sl, [sp]
   19f68:	ldrd	r2, [sp, #16]
   19f6c:	add	r7, ip, r7
   19f70:	cmp	fp, r3
   19f74:	cmpeq	sl, r2
   19f78:	mov	r3, fp
   19f7c:	mov	r2, sl
   19f80:	ldrd	sl, [sp, #24]
   19f84:	orrcc	r0, r0, #1
   19f88:	str	r0, [sp, #16]
   19f8c:	cmp	r3, fp
   19f90:	cmpeq	r2, sl
   19f94:	bcs	1a4ec <__assert_fail@plt+0x9400>
   19f98:	mvn	r2, #0
   19f9c:	mvn	r3, #0
   19fa0:	mul	ip, lr, r2
   19fa4:	ldrd	sl, [sp]
   19fa8:	mla	ip, r1, r3, ip
   19fac:	umull	r6, r7, r2, r1
   19fb0:	ldrd	r0, [sp, #24]
   19fb4:	add	r7, ip, r7
   19fb8:	cmp	fp, r1
   19fbc:	ldr	r1, [sp, #16]
   19fc0:	cmpeq	sl, r0
   19fc4:	orrcc	r1, r1, #1
   19fc8:	cmp	r3, fp
   19fcc:	cmpeq	r2, sl
   19fd0:	mvnhi	r0, #0
   19fd4:	movls	ip, r7
   19fd8:	movhi	ip, r0
   19fdc:	movls	r0, r6
   19fe0:	cmp	r3, fp
   19fe4:	cmpeq	r2, sl
   19fe8:	mov	r7, ip
   19fec:	mov	r6, r0
   19ff0:	movls	ip, r1
   19ff4:	orrhi	ip, r1, #1
   19ff8:	b	19e84 <__assert_fail@plt+0x8d98>
   19ffc:	ldrd	sl, [sp]
   1a000:	umull	r2, r3, r6, r1
   1a004:	mul	r0, r6, lr
   1a008:	cmp	r7, fp
   1a00c:	cmpeq	r6, sl
   1a010:	mvnhi	r2, #0
   1a014:	mla	r0, r1, r7, r0
   1a018:	umull	sl, fp, r2, r1
   1a01c:	add	r3, r0, r3
   1a020:	mul	r0, lr, r2
   1a024:	mvnhi	r3, #0
   1a028:	strd	sl, [sp, #16]
   1a02c:	ldrd	sl, [sp]
   1a030:	mla	r0, r1, r3, r0
   1a034:	ldr	ip, [sp, #20]
   1a038:	cmp	r3, fp
   1a03c:	add	r0, r0, ip
   1a040:	cmpeq	r2, sl
   1a044:	str	r0, [sp, #20]
   1a048:	mvnhi	sl, #0
   1a04c:	mvnhi	fp, #0
   1a050:	strdhi	sl, [sp, #16]
   1a054:	ldrdhi	sl, [sp]
   1a058:	ldr	r0, [sp, #16]
   1a05c:	cmp	r3, fp
   1a060:	ldr	r3, [sp, #20]
   1a064:	mul	r0, lr, r0
   1a068:	cmpeq	r2, sl
   1a06c:	mla	r0, r1, r3, r0
   1a070:	ldr	r3, [sp, #16]
   1a074:	umull	r2, r3, r3, r1
   1a078:	strd	r2, [sp, #24]
   1a07c:	movhi	r3, #1
   1a080:	movls	r3, #0
   1a084:	cmp	r7, fp
   1a088:	cmpeq	r6, sl
   1a08c:	ldrd	r6, [sp, #16]
   1a090:	ldr	r2, [sp, #28]
   1a094:	movls	ip, r3
   1a098:	orrhi	ip, r3, #1
   1a09c:	cmp	r7, fp
   1a0a0:	add	r2, r0, r2
   1a0a4:	cmpeq	r6, sl
   1a0a8:	str	r2, [sp, #28]
   1a0ac:	mvnhi	r2, #0
   1a0b0:	mvnhi	r3, #0
   1a0b4:	strdhi	r2, [sp, #24]
   1a0b8:	ldrd	r6, [sp, #24]
   1a0bc:	mul	r2, r1, r7
   1a0c0:	umull	sl, fp, r1, r6
   1a0c4:	mla	r3, lr, r6, r2
   1a0c8:	ldrd	r6, [sp]
   1a0cc:	str	r3, [sp, #32]
   1a0d0:	ldrd	r2, [sp, #16]
   1a0d4:	cmp	r3, r7
   1a0d8:	cmpeq	r2, r6
   1a0dc:	ldrd	r2, [sp, #24]
   1a0e0:	orrhi	ip, ip, #1
   1a0e4:	cmp	r3, r7
   1a0e8:	ldr	r3, [sp, #32]
   1a0ec:	cmpeq	r2, r6
   1a0f0:	add	r2, r3, fp
   1a0f4:	mov	fp, r2
   1a0f8:	bhi	1a83c <__assert_fail@plt+0x9750>
   1a0fc:	strd	sl, [sp, #16]
   1a100:	mul	r2, r1, fp
   1a104:	umull	r6, r7, r1, sl
   1a108:	mla	r3, lr, sl, r2
   1a10c:	ldrd	sl, [sp]
   1a110:	str	r3, [sp, #32]
   1a114:	ldrd	r2, [sp, #24]
   1a118:	cmp	r3, fp
   1a11c:	cmpeq	r2, sl
   1a120:	ldrd	r2, [sp, #16]
   1a124:	orrhi	ip, ip, #1
   1a128:	cmp	fp, r3
   1a12c:	ldr	r3, [sp, #32]
   1a130:	cmpeq	sl, r2
   1a134:	add	r2, r3, r7
   1a138:	mov	r7, r2
   1a13c:	mvncc	r7, #0
   1a140:	mvncc	r6, #0
   1a144:	mul	r2, r1, r7
   1a148:	mov	sl, r6
   1a14c:	strd	r6, [sp, #24]
   1a150:	mla	r0, lr, sl, r2
   1a154:	ldrd	r2, [sp, #16]
   1a158:	ldrd	sl, [sp]
   1a15c:	umull	r6, r7, r1, r6
   1a160:	cmp	fp, r3
   1a164:	cmpeq	sl, r2
   1a168:	mov	r3, fp
   1a16c:	mov	r2, sl
   1a170:	ldrd	sl, [sp, #24]
   1a174:	orrcc	ip, ip, #1
   1a178:	add	r7, r0, r7
   1a17c:	cmp	r3, fp
   1a180:	cmpeq	r2, sl
   1a184:	mvncc	r6, #0
   1a188:	mvncc	r7, #0
   1a18c:	umull	sl, fp, r1, r6
   1a190:	mul	r3, r1, r7
   1a194:	strd	sl, [sp, #16]
   1a198:	mla	r0, lr, r6, r3
   1a19c:	ldrd	sl, [sp, #24]
   1a1a0:	ldrd	r2, [sp]
   1a1a4:	cmp	r3, fp
   1a1a8:	cmpeq	r2, sl
   1a1ac:	orrcc	ip, ip, #1
   1a1b0:	cmp	r3, r7
   1a1b4:	ldr	r3, [sp, #20]
   1a1b8:	cmpeq	r2, r6
   1a1bc:	add	r3, r0, r3
   1a1c0:	str	r3, [sp, #20]
   1a1c4:	mvncc	r2, #0
   1a1c8:	mvncc	r3, #0
   1a1cc:	ldrdcs	r2, [sp, #16]
   1a1d0:	ldrd	sl, [sp]
   1a1d4:	mul	r0, r1, r3
   1a1d8:	cmp	fp, r7
   1a1dc:	str	r0, [sp, #16]
   1a1e0:	cmpeq	sl, r6
   1a1e4:	ldr	r6, [sp, #16]
   1a1e8:	umull	r0, r1, r1, r2
   1a1ec:	mla	lr, lr, r2, r6
   1a1f0:	orrcc	ip, ip, #1
   1a1f4:	cmp	r3, fp
   1a1f8:	cmpeq	r2, sl
   1a1fc:	add	r1, lr, r1
   1a200:	bls	1a20c <__assert_fail@plt+0x9120>
   1a204:	mvn	r0, #0
   1a208:	mov	r1, r0
   1a20c:	cmp	r3, fp
   1a210:	cmpeq	r2, sl
   1a214:	mov	r6, r0
   1a218:	mov	r7, r1
   1a21c:	orrhi	ip, ip, #1
   1a220:	b	19e84 <__assert_fail@plt+0x8d98>
   1a224:	ldrd	sl, [sp]
   1a228:	umull	r2, r3, r6, r1
   1a22c:	mul	r0, r6, lr
   1a230:	cmp	r7, fp
   1a234:	cmpeq	r6, sl
   1a238:	mvnhi	r2, #0
   1a23c:	mla	r0, r1, r7, r0
   1a240:	umull	sl, fp, r1, r2
   1a244:	add	r3, r0, r3
   1a248:	mvnhi	r3, #0
   1a24c:	strd	sl, [sp, #16]
   1a250:	mul	r0, r1, r3
   1a254:	ldrd	sl, [sp]
   1a258:	mla	r0, lr, r2, r0
   1a25c:	ldr	ip, [sp, #20]
   1a260:	cmp	fp, r3
   1a264:	add	r0, r0, ip
   1a268:	cmpeq	sl, r2
   1a26c:	str	r0, [sp, #20]
   1a270:	mvncc	sl, #0
   1a274:	mvncc	fp, #0
   1a278:	strdcc	sl, [sp, #16]
   1a27c:	ldrdcc	sl, [sp]
   1a280:	ldr	r0, [sp, #16]
   1a284:	cmp	fp, r3
   1a288:	cmpeq	sl, r2
   1a28c:	mul	r0, lr, r0
   1a290:	ldr	r2, [sp, #20]
   1a294:	ldr	r3, [sp, #16]
   1a298:	movcc	ip, #1
   1a29c:	movcs	ip, #0
   1a2a0:	cmp	r7, fp
   1a2a4:	cmpeq	r6, sl
   1a2a8:	ldrd	r6, [sp, #16]
   1a2ac:	mla	r0, r1, r2, r0
   1a2b0:	umull	r2, r3, r3, r1
   1a2b4:	orrhi	ip, ip, #1
   1a2b8:	cmp	r7, fp
   1a2bc:	cmpeq	r6, sl
   1a2c0:	add	r3, r0, r3
   1a2c4:	mvnhi	r3, #0
   1a2c8:	mvnhi	r2, #0
   1a2cc:	mul	r0, r1, r3
   1a2d0:	cmp	r7, fp
   1a2d4:	str	r0, [sp, #24]
   1a2d8:	cmpeq	r6, sl
   1a2dc:	ldr	r6, [sp, #24]
   1a2e0:	umull	r0, r1, r1, r2
   1a2e4:	mla	lr, lr, r2, r6
   1a2e8:	orrhi	ip, ip, #1
   1a2ec:	cmp	fp, r3
   1a2f0:	cmpeq	sl, r2
   1a2f4:	mvncc	r0, #0
   1a2f8:	add	r1, lr, r1
   1a2fc:	movcc	r1, r0
   1a300:	b	19e70 <__assert_fail@plt+0x8d84>
   1a304:	cmp	r6, #0
   1a308:	sbcs	r3, r7, #0
   1a30c:	blt	1a7a4 <__assert_fail@plt+0x96b8>
   1a310:	adds	r6, r6, r6
   1a314:	adc	r7, r7, r7
   1a318:	mov	ip, #0
   1a31c:	b	19e84 <__assert_fail@plt+0x8d98>
   1a320:	mov	ip, #0
   1a324:	b	19e84 <__assert_fail@plt+0x8d98>
   1a328:	ldr	r3, [pc, #1396]	; 1a8a4 <__assert_fail@plt+0x97b8>
   1a32c:	mvn	r2, #0
   1a330:	cmp	r7, r3
   1a334:	cmpeq	r6, r2
   1a338:	bhi	1a7a4 <__assert_fail@plt+0x96b8>
   1a33c:	lsl	r3, r7, #9
   1a340:	orr	r3, r3, r6, lsr #23
   1a344:	lsl	r2, r6, #9
   1a348:	mov	r6, r2
   1a34c:	mov	r7, r3
   1a350:	mov	ip, #0
   1a354:	b	19e84 <__assert_fail@plt+0x8d98>
   1a358:	ldrd	sl, [sp]
   1a35c:	umull	r2, r3, r6, r1
   1a360:	mul	r0, r6, lr
   1a364:	cmp	r7, fp
   1a368:	cmpeq	r6, sl
   1a36c:	mvnhi	r2, #0
   1a370:	mla	r0, r1, r7, r0
   1a374:	umull	sl, fp, r2, r1
   1a378:	add	r3, r0, r3
   1a37c:	mul	r0, lr, r2
   1a380:	mvnhi	r3, #0
   1a384:	strd	sl, [sp, #16]
   1a388:	ldrd	sl, [sp]
   1a38c:	mla	r0, r1, r3, r0
   1a390:	ldr	ip, [sp, #20]
   1a394:	cmp	r3, fp
   1a398:	add	r0, r0, ip
   1a39c:	cmpeq	r2, sl
   1a3a0:	str	r0, [sp, #20]
   1a3a4:	mvnhi	sl, #0
   1a3a8:	mvnhi	fp, #0
   1a3ac:	strdhi	sl, [sp, #16]
   1a3b0:	ldrdhi	sl, [sp]
   1a3b4:	ldr	r0, [sp, #16]
   1a3b8:	cmp	r3, fp
   1a3bc:	ldr	r3, [sp, #20]
   1a3c0:	mul	r0, lr, r0
   1a3c4:	cmpeq	r2, sl
   1a3c8:	mla	r0, r1, r3, r0
   1a3cc:	ldr	r3, [sp, #16]
   1a3d0:	umull	r2, r3, r3, r1
   1a3d4:	strd	r2, [sp, #24]
   1a3d8:	movhi	r3, #1
   1a3dc:	movls	r3, #0
   1a3e0:	cmp	r7, fp
   1a3e4:	cmpeq	r6, sl
   1a3e8:	ldrd	r6, [sp, #16]
   1a3ec:	ldr	r2, [sp, #28]
   1a3f0:	movls	ip, r3
   1a3f4:	orrhi	ip, r3, #1
   1a3f8:	cmp	r7, fp
   1a3fc:	add	r2, r0, r2
   1a400:	cmpeq	r6, sl
   1a404:	str	r2, [sp, #28]
   1a408:	mvnhi	r2, #0
   1a40c:	mvnhi	r3, #0
   1a410:	strdhi	r2, [sp, #24]
   1a414:	ldrd	r6, [sp, #24]
   1a418:	mul	r2, lr, r6
   1a41c:	umull	sl, fp, r6, r1
   1a420:	mla	r3, r1, r7, r2
   1a424:	ldrd	r6, [sp]
   1a428:	str	r3, [sp, #32]
   1a42c:	ldrd	r2, [sp, #16]
   1a430:	cmp	r3, r7
   1a434:	cmpeq	r2, r6
   1a438:	ldrd	r2, [sp, #24]
   1a43c:	orrhi	ip, ip, #1
   1a440:	cmp	r3, r7
   1a444:	ldr	r3, [sp, #32]
   1a448:	cmpeq	r2, r6
   1a44c:	add	r2, r3, fp
   1a450:	mov	fp, r2
   1a454:	bhi	1a86c <__assert_fail@plt+0x9780>
   1a458:	strd	sl, [sp, #16]
   1a45c:	mul	r2, lr, sl
   1a460:	umull	r6, r7, sl, r1
   1a464:	mla	r3, r1, fp, r2
   1a468:	ldrd	sl, [sp]
   1a46c:	str	r3, [sp, #32]
   1a470:	ldrd	r2, [sp, #24]
   1a474:	cmp	r3, fp
   1a478:	cmpeq	r2, sl
   1a47c:	ldrd	r2, [sp, #16]
   1a480:	orrhi	ip, ip, #1
   1a484:	cmp	r3, fp
   1a488:	ldr	r3, [sp, #32]
   1a48c:	cmpeq	r2, sl
   1a490:	add	r2, r3, r7
   1a494:	mov	r7, r2
   1a498:	mvnhi	r7, #0
   1a49c:	mvnhi	r6, #0
   1a4a0:	mul	r2, r1, r7
   1a4a4:	mov	sl, r6
   1a4a8:	strd	r6, [sp, #24]
   1a4ac:	mla	r0, lr, sl, r2
   1a4b0:	ldrd	sl, [sp]
   1a4b4:	ldrd	r2, [sp, #16]
   1a4b8:	umull	r6, r7, r1, r6
   1a4bc:	cmp	r3, fp
   1a4c0:	cmpeq	r2, sl
   1a4c4:	mov	r3, ip
   1a4c8:	orrhi	r3, r3, #1
   1a4cc:	mov	r2, sl
   1a4d0:	str	r3, [sp, #16]
   1a4d4:	mov	r3, fp
   1a4d8:	ldrd	sl, [sp, #24]
   1a4dc:	add	r7, r0, r7
   1a4e0:	cmp	r3, fp
   1a4e4:	cmpeq	r2, sl
   1a4e8:	bcc	19f98 <__assert_fail@plt+0x8eac>
   1a4ec:	mov	r2, r6
   1a4f0:	mov	r3, r7
   1a4f4:	b	19fa0 <__assert_fail@plt+0x8eb4>
   1a4f8:	ldrd	sl, [sp]
   1a4fc:	umull	r2, r3, r6, r1
   1a500:	mul	r0, r6, lr
   1a504:	cmp	r7, fp
   1a508:	cmpeq	r6, sl
   1a50c:	mvnhi	r2, #0
   1a510:	mla	r0, r1, r7, r0
   1a514:	umull	sl, fp, r2, r1
   1a518:	add	r3, r0, r3
   1a51c:	mul	r0, lr, r2
   1a520:	mvnhi	r3, #0
   1a524:	strd	sl, [sp, #16]
   1a528:	ldrd	sl, [sp]
   1a52c:	mla	r0, r1, r3, r0
   1a530:	ldr	ip, [sp, #20]
   1a534:	cmp	r3, fp
   1a538:	add	r0, r0, ip
   1a53c:	cmpeq	r2, sl
   1a540:	str	r0, [sp, #20]
   1a544:	mvnhi	sl, #0
   1a548:	mvnhi	fp, #0
   1a54c:	strdhi	sl, [sp, #16]
   1a550:	ldrdhi	sl, [sp]
   1a554:	ldr	r0, [sp, #16]
   1a558:	cmp	r3, fp
   1a55c:	ldr	ip, [sp, #20]
   1a560:	mul	r0, lr, r0
   1a564:	ldr	r3, [sp, #16]
   1a568:	cmpeq	r2, sl
   1a56c:	mla	r0, r1, ip, r0
   1a570:	umull	r2, r3, r3, r1
   1a574:	movhi	r1, #1
   1a578:	movls	r1, #0
   1a57c:	cmp	r7, fp
   1a580:	cmpeq	r6, sl
   1a584:	ldrd	r6, [sp, #16]
   1a588:	movls	ip, r1
   1a58c:	orrhi	ip, r1, #1
   1a590:	cmp	r7, fp
   1a594:	cmpeq	r6, sl
   1a598:	mvnhi	r2, #0
   1a59c:	add	r3, r0, r3
   1a5a0:	movhi	r3, r2
   1a5a4:	cmp	r7, fp
   1a5a8:	cmpeq	r6, sl
   1a5ac:	mov	r7, r3
   1a5b0:	mov	r6, r2
   1a5b4:	orrhi	ip, ip, #1
   1a5b8:	b	19e84 <__assert_fail@plt+0x8d98>
   1a5bc:	ldrd	sl, [sp]
   1a5c0:	umull	r2, r3, r6, r1
   1a5c4:	mul	r0, r6, lr
   1a5c8:	cmp	r7, fp
   1a5cc:	cmpeq	r6, sl
   1a5d0:	mvnhi	r2, #0
   1a5d4:	mla	r0, r1, r7, r0
   1a5d8:	umull	sl, fp, r1, r2
   1a5dc:	add	r3, r0, r3
   1a5e0:	mvnhi	r3, #0
   1a5e4:	strd	sl, [sp, #16]
   1a5e8:	mul	r0, r1, r3
   1a5ec:	ldrd	sl, [sp]
   1a5f0:	mla	r0, lr, r2, r0
   1a5f4:	ldr	ip, [sp, #20]
   1a5f8:	cmp	fp, r3
   1a5fc:	add	r0, r0, ip
   1a600:	cmpeq	sl, r2
   1a604:	str	r0, [sp, #20]
   1a608:	mvncc	sl, #0
   1a60c:	mvncc	fp, #0
   1a610:	strdcc	sl, [sp, #16]
   1a614:	ldrdcc	sl, [sp]
   1a618:	ldr	r0, [sp, #16]
   1a61c:	cmp	fp, r3
   1a620:	ldr	r3, [sp, #20]
   1a624:	mul	r0, lr, r0
   1a628:	cmpeq	sl, r2
   1a62c:	mla	r0, r1, r3, r0
   1a630:	ldr	r3, [sp, #16]
   1a634:	umull	r2, r3, r3, r1
   1a638:	strd	r2, [sp, #24]
   1a63c:	movcc	r3, #1
   1a640:	movcs	r3, #0
   1a644:	cmp	r7, fp
   1a648:	cmpeq	r6, sl
   1a64c:	movls	ip, r3
   1a650:	orrhi	ip, r3, #1
   1a654:	ldrd	r2, [sp, #16]
   1a658:	cmp	r3, fp
   1a65c:	ldr	r3, [sp, #28]
   1a660:	cmpeq	r2, sl
   1a664:	add	r3, r0, r3
   1a668:	str	r3, [sp, #28]
   1a66c:	bhi	1a824 <__assert_fail@plt+0x9738>
   1a670:	ldrd	r2, [sp, #24]
   1a674:	mov	sl, r2
   1a678:	mov	fp, r3
   1a67c:	mul	r2, lr, sl
   1a680:	umull	r6, r7, sl, r1
   1a684:	mla	r0, r1, fp, r2
   1a688:	ldrd	r2, [sp]
   1a68c:	add	r7, r0, r7
   1a690:	mov	sl, r2
   1a694:	mov	fp, r3
   1a698:	strd	r2, [sp, #32]
   1a69c:	ldrd	r2, [sp, #16]
   1a6a0:	cmp	r3, fp
   1a6a4:	cmpeq	r2, sl
   1a6a8:	ldrd	r2, [sp, #32]
   1a6ac:	ldrd	sl, [sp, #24]
   1a6b0:	orrhi	ip, ip, #1
   1a6b4:	cmp	fp, r3
   1a6b8:	cmpeq	sl, r2
   1a6bc:	mvnhi	r6, #0
   1a6c0:	mvnhi	r7, #0
   1a6c4:	umull	sl, fp, r6, r1
   1a6c8:	mul	r3, lr, r6
   1a6cc:	strd	sl, [sp, #16]
   1a6d0:	mla	r0, r1, r7, r3
   1a6d4:	ldrd	sl, [sp, #24]
   1a6d8:	ldrd	r2, [sp]
   1a6dc:	cmp	fp, r3
   1a6e0:	cmpeq	sl, r2
   1a6e4:	orrhi	ip, ip, #1
   1a6e8:	cmp	r7, r3
   1a6ec:	ldr	r3, [sp, #20]
   1a6f0:	cmpeq	r6, r2
   1a6f4:	add	r3, r0, r3
   1a6f8:	str	r3, [sp, #20]
   1a6fc:	mvnhi	r2, #0
   1a700:	mvnhi	r3, #0
   1a704:	ldrdls	r2, [sp, #16]
   1a708:	ldrd	sl, [sp]
   1a70c:	mul	r0, r1, r3
   1a710:	cmp	r7, fp
   1a714:	str	r0, [sp, #16]
   1a718:	cmpeq	r6, sl
   1a71c:	ldr	r6, [sp, #16]
   1a720:	umull	r0, r1, r1, r2
   1a724:	mla	lr, lr, r2, r6
   1a728:	orrhi	ip, ip, #1
   1a72c:	cmp	r3, fp
   1a730:	cmpeq	r2, sl
   1a734:	add	r1, lr, r1
   1a738:	bls	1a20c <__assert_fail@plt+0x9120>
   1a73c:	b	1a204 <__assert_fail@plt+0x9118>
   1a740:	ldr	r3, [pc, #344]	; 1a8a0 <__assert_fail@plt+0x97b4>
   1a744:	mvn	r2, #0
   1a748:	cmp	r7, r3
   1a74c:	cmpeq	r6, r2
   1a750:	bhi	1a7a4 <__assert_fail@plt+0x96b8>
   1a754:	lsl	r3, r7, #10
   1a758:	orr	r3, r3, r6, lsr #22
   1a75c:	lsl	r2, r6, #10
   1a760:	mov	r6, r2
   1a764:	mov	r7, r3
   1a768:	mov	ip, #0
   1a76c:	b	19e84 <__assert_fail@plt+0x8d98>
   1a770:	strd	r6, [r8]
   1a774:	orr	r4, r4, #2
   1a778:	b	19b54 <__assert_fail@plt+0x8a68>
   1a77c:	ldrd	r2, [sp]
   1a780:	cmp	r7, r3
   1a784:	cmpeq	r6, r2
   1a788:	bhi	1a7a4 <__assert_fail@plt+0x96b8>
   1a78c:	mul	r3, r6, lr
   1a790:	mov	ip, #0
   1a794:	mla	r3, r1, r7, r3
   1a798:	umull	r6, r7, r6, r1
   1a79c:	add	r7, r3, r7
   1a7a0:	b	19e84 <__assert_fail@plt+0x8d98>
   1a7a4:	mvn	r6, #0
   1a7a8:	mvn	r7, #0
   1a7ac:	mov	ip, #1
   1a7b0:	b	19e84 <__assert_fail@plt+0x8d98>
   1a7b4:	ldrb	r3, [r9, #2]
   1a7b8:	mvn	r2, #0
   1a7bc:	mov	r1, #1024	; 0x400
   1a7c0:	cmp	r3, #66	; 0x42
   1a7c4:	ldr	r3, [pc, #212]	; 1a8a0 <__assert_fail@plt+0x97b4>
   1a7c8:	mov	lr, #0
   1a7cc:	strd	r2, [sp]
   1a7d0:	moveq	r3, #3
   1a7d4:	streq	r3, [sp, #12]
   1a7d8:	movne	r3, #1
   1a7dc:	strne	r3, [sp, #12]
   1a7e0:	b	19d30 <__assert_fail@plt+0x8c44>
   1a7e4:	add	r3, pc, #172	; 0xac
   1a7e8:	ldrd	r2, [r3]
   1a7ec:	mov	r1, #1000	; 0x3e8
   1a7f0:	mov	lr, #0
   1a7f4:	strd	r2, [sp]
   1a7f8:	mov	r3, #2
   1a7fc:	str	r3, [sp, #12]
   1a800:	b	19d30 <__assert_fail@plt+0x8c44>
   1a804:	ldr	r3, [pc, #148]	; 1a8a0 <__assert_fail@plt+0x97b4>
   1a808:	mvn	r2, #0
   1a80c:	mov	lr, r0
   1a810:	strd	r2, [sp]
   1a814:	mov	r3, #1
   1a818:	mov	r1, #1024	; 0x400
   1a81c:	str	r3, [sp, #12]
   1a820:	b	19d30 <__assert_fail@plt+0x8c44>
   1a824:	mvn	r2, #0
   1a828:	mvn	r3, #0
   1a82c:	mov	sl, r2
   1a830:	strd	r2, [sp, #24]
   1a834:	mov	fp, r3
   1a838:	b	1a67c <__assert_fail@plt+0x9590>
   1a83c:	mvn	r2, #0
   1a840:	mvn	r3, #0
   1a844:	mov	sl, r2
   1a848:	strd	r2, [sp, #16]
   1a84c:	mov	fp, r3
   1a850:	b	1a100 <__assert_fail@plt+0x9014>
   1a854:	mvn	r2, #0
   1a858:	mvn	r3, #0
   1a85c:	mov	sl, r2
   1a860:	strd	r2, [sp, #24]
   1a864:	mov	fp, r3
   1a868:	b	19f58 <__assert_fail@plt+0x8e6c>
   1a86c:	mvn	r2, #0
   1a870:	mvn	r3, #0
   1a874:	mov	sl, r2
   1a878:	strd	r2, [sp, #16]
   1a87c:	mov	fp, r3
   1a880:	b	1a45c <__assert_fail@plt+0x9370>
   1a884:	ldr	r3, [pc, #28]	; 1a8a8 <__assert_fail@plt+0x97bc>
   1a888:	mov	r2, #85	; 0x55
   1a88c:	ldr	r1, [pc, #24]	; 1a8ac <__assert_fail@plt+0x97c0>
   1a890:	ldr	r0, [pc, #24]	; 1a8b0 <__assert_fail@plt+0x97c4>
   1a894:	bl	110ec <__assert_fail@plt>
   1a898:	blmi	ff1c485c <optarg@@GLIBC_2.4+0xff1976dc>
   1a89c:	subeq	r8, r1, r7, lsr r9
   1a8a0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1a8a4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1a8a8:	andeq	ip, r1, ip, asr #11
   1a8ac:	muleq	r1, r4, r5
   1a8b0:	andeq	ip, r1, r4, lsr #11
   1a8b4:	cmp	r1, #0
   1a8b8:	cmpne	r0, #0
   1a8bc:	moveq	r1, #1
   1a8c0:	moveq	r0, r1
   1a8c4:	umull	r2, r3, r0, r1
   1a8c8:	adds	r3, r3, #0
   1a8cc:	movne	r3, #1
   1a8d0:	cmp	r2, #0
   1a8d4:	blt	1a8e4 <__assert_fail@plt+0x97f8>
   1a8d8:	cmp	r3, #0
   1a8dc:	bne	1a8e4 <__assert_fail@plt+0x97f8>
   1a8e0:	b	10e40 <calloc@plt>
   1a8e4:	push	{r4, lr}
   1a8e8:	bl	10ff0 <__errno_location@plt>
   1a8ec:	mov	r3, #12
   1a8f0:	str	r3, [r0]
   1a8f4:	mov	r0, #0
   1a8f8:	pop	{r4, pc}
   1a8fc:	cmp	r0, #0
   1a900:	moveq	r0, #1
   1a904:	cmp	r0, #0
   1a908:	blt	1a910 <__assert_fail@plt+0x9824>
   1a90c:	b	10f6c <malloc@plt>
   1a910:	push	{r4, lr}
   1a914:	bl	10ff0 <__errno_location@plt>
   1a918:	mov	r3, #12
   1a91c:	str	r3, [r0]
   1a920:	mov	r0, #0
   1a924:	pop	{r4, pc}
   1a928:	cmp	r0, #0
   1a92c:	beq	1a950 <__assert_fail@plt+0x9864>
   1a930:	cmp	r1, #0
   1a934:	push	{lr}		; (str lr, [sp, #-4]!)
   1a938:	sub	sp, sp, #12
   1a93c:	beq	1a958 <__assert_fail@plt+0x986c>
   1a940:	blt	1a970 <__assert_fail@plt+0x9884>
   1a944:	add	sp, sp, #12
   1a948:	pop	{lr}		; (ldr lr, [sp], #4)
   1a94c:	b	10ef4 <realloc@plt>
   1a950:	mov	r0, r1
   1a954:	b	1a8fc <__assert_fail@plt+0x9810>
   1a958:	str	r1, [sp, #4]
   1a95c:	bl	13d58 <__assert_fail@plt+0x2c6c>
   1a960:	ldr	r3, [sp, #4]
   1a964:	mov	r0, r3
   1a968:	add	sp, sp, #12
   1a96c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a970:	bl	10ff0 <__errno_location@plt>
   1a974:	mov	r2, #12
   1a978:	mov	r3, #0
   1a97c:	str	r2, [r0]
   1a980:	b	1a964 <__assert_fail@plt+0x9878>
   1a984:	push	{r4, r5, r6, lr}
   1a988:	mov	r4, r0
   1a98c:	bl	10f3c <__fpending@plt>
   1a990:	ldr	r5, [r4]
   1a994:	and	r5, r5, #32
   1a998:	mov	r6, r0
   1a99c:	mov	r0, r4
   1a9a0:	bl	13bc0 <__assert_fail@plt+0x2ad4>
   1a9a4:	cmp	r5, #0
   1a9a8:	mov	r4, r0
   1a9ac:	bne	1a9cc <__assert_fail@plt+0x98e0>
   1a9b0:	cmp	r0, #0
   1a9b4:	beq	1a9c4 <__assert_fail@plt+0x98d8>
   1a9b8:	cmp	r6, #0
   1a9bc:	beq	1a9e8 <__assert_fail@plt+0x98fc>
   1a9c0:	mvn	r4, #0
   1a9c4:	mov	r0, r4
   1a9c8:	pop	{r4, r5, r6, pc}
   1a9cc:	cmp	r0, #0
   1a9d0:	bne	1a9c0 <__assert_fail@plt+0x98d4>
   1a9d4:	bl	10ff0 <__errno_location@plt>
   1a9d8:	str	r4, [r0]
   1a9dc:	mvn	r4, #0
   1a9e0:	mov	r0, r4
   1a9e4:	pop	{r4, r5, r6, pc}
   1a9e8:	bl	10ff0 <__errno_location@plt>
   1a9ec:	ldr	r4, [r0]
   1a9f0:	subs	r4, r4, #9
   1a9f4:	mvnne	r4, #0
   1a9f8:	mov	r0, r4
   1a9fc:	pop	{r4, r5, r6, pc}
   1aa00:	push	{r1, r2, r3}
   1aa04:	push	{r4, r5, r6, r7, lr}
   1aa08:	sub	sp, sp, #8
   1aa0c:	add	r3, sp, #32
   1aa10:	ldr	r1, [sp, #28]
   1aa14:	str	r3, [sp, #4]
   1aa18:	cmp	r1, #0
   1aa1c:	beq	1aab4 <__assert_fail@plt+0x99c8>
   1aa20:	ldr	r2, [pc, #412]	; 1abc4 <__assert_fail@plt+0x9ad8>
   1aa24:	mov	r5, r0
   1aa28:	cmp	r1, r2
   1aa2c:	bne	1aa78 <__assert_fail@plt+0x998c>
   1aa30:	ldr	r6, [pc, #400]	; 1abc8 <__assert_fail@plt+0x9adc>
   1aa34:	ldr	r7, [r3]
   1aa38:	add	r2, sp, #36	; 0x24
   1aa3c:	ldr	r3, [r6]
   1aa40:	str	r2, [sp, #4]
   1aa44:	cmp	r3, #0
   1aa48:	mov	r2, r7
   1aa4c:	blt	1ab78 <__assert_fail@plt+0x9a8c>
   1aa50:	bl	1105c <fcntl64@plt>
   1aa54:	subs	r4, r0, #0
   1aa58:	blt	1aafc <__assert_fail@plt+0x9a10>
   1aa5c:	mov	r3, #1
   1aa60:	str	r3, [r6]
   1aa64:	mov	r0, r4
   1aa68:	add	sp, sp, #8
   1aa6c:	pop	{r4, r5, r6, r7, lr}
   1aa70:	add	sp, sp, #12
   1aa74:	bx	lr
   1aa78:	cmp	r1, #11
   1aa7c:	beq	1aaa4 <__assert_fail@plt+0x99b8>
   1aa80:	bgt	1aac4 <__assert_fail@plt+0x99d8>
   1aa84:	cmp	r1, #3
   1aa88:	beq	1aaa4 <__assert_fail@plt+0x99b8>
   1aa8c:	ble	1abb8 <__assert_fail@plt+0x9acc>
   1aa90:	cmp	r1, #8
   1aa94:	beq	1aae4 <__assert_fail@plt+0x99f8>
   1aa98:	ble	1aae4 <__assert_fail@plt+0x99f8>
   1aa9c:	cmp	r1, #9
   1aaa0:	bne	1aae4 <__assert_fail@plt+0x99f8>
   1aaa4:	mov	r0, r5
   1aaa8:	bl	1105c <fcntl64@plt>
   1aaac:	mov	r4, r0
   1aab0:	b	1aa64 <__assert_fail@plt+0x9978>
   1aab4:	ldr	r2, [sp, #32]
   1aab8:	bl	1105c <fcntl64@plt>
   1aabc:	mov	r4, r0
   1aac0:	b	1aa64 <__assert_fail@plt+0x9978>
   1aac4:	ldr	r3, [pc, #256]	; 1abcc <__assert_fail@plt+0x9ae0>
   1aac8:	cmp	r1, r3
   1aacc:	bgt	1ab98 <__assert_fail@plt+0x9aac>
   1aad0:	cmp	r1, r2
   1aad4:	bge	1aae4 <__assert_fail@plt+0x99f8>
   1aad8:	sub	r3, r3, #6
   1aadc:	cmp	r1, r3
   1aae0:	beq	1aaa4 <__assert_fail@plt+0x99b8>
   1aae4:	ldr	r3, [sp, #4]
   1aae8:	mov	r0, r5
   1aaec:	ldr	r2, [r3]
   1aaf0:	bl	1105c <fcntl64@plt>
   1aaf4:	mov	r4, r0
   1aaf8:	b	1aa64 <__assert_fail@plt+0x9978>
   1aafc:	bl	10ff0 <__errno_location@plt>
   1ab00:	ldr	r3, [r0]
   1ab04:	cmp	r3, #22
   1ab08:	bne	1aa5c <__assert_fail@plt+0x9970>
   1ab0c:	mov	r2, r7
   1ab10:	mov	r0, r5
   1ab14:	mov	r1, #0
   1ab18:	bl	1105c <fcntl64@plt>
   1ab1c:	subs	r4, r0, #0
   1ab20:	blt	1aa64 <__assert_fail@plt+0x9978>
   1ab24:	mvn	r3, #0
   1ab28:	str	r3, [r6]
   1ab2c:	mov	r1, #1
   1ab30:	mov	r0, r4
   1ab34:	bl	1105c <fcntl64@plt>
   1ab38:	subs	r2, r0, #0
   1ab3c:	blt	1ab58 <__assert_fail@plt+0x9a6c>
   1ab40:	orr	r2, r2, #1
   1ab44:	mov	r1, #2
   1ab48:	mov	r0, r4
   1ab4c:	bl	1105c <fcntl64@plt>
   1ab50:	cmn	r0, #1
   1ab54:	bne	1aa64 <__assert_fail@plt+0x9978>
   1ab58:	bl	10ff0 <__errno_location@plt>
   1ab5c:	mov	r5, r0
   1ab60:	mov	r0, r4
   1ab64:	ldr	r6, [r5]
   1ab68:	mvn	r4, #0
   1ab6c:	bl	110e0 <close@plt>
   1ab70:	str	r6, [r5]
   1ab74:	b	1aa64 <__assert_fail@plt+0x9978>
   1ab78:	mov	r1, #0
   1ab7c:	bl	1105c <fcntl64@plt>
   1ab80:	subs	r4, r0, #0
   1ab84:	blt	1aa64 <__assert_fail@plt+0x9978>
   1ab88:	ldr	r3, [r6]
   1ab8c:	cmn	r3, #1
   1ab90:	beq	1ab2c <__assert_fail@plt+0x9a40>
   1ab94:	b	1aa64 <__assert_fail@plt+0x9978>
   1ab98:	ldr	r3, [pc, #48]	; 1abd0 <__assert_fail@plt+0x9ae4>
   1ab9c:	cmp	r1, r3
   1aba0:	beq	1aae4 <__assert_fail@plt+0x99f8>
   1aba4:	blt	1aaa4 <__assert_fail@plt+0x99b8>
   1aba8:	add	r3, r3, #1
   1abac:	cmp	r1, r3
   1abb0:	bne	1aae4 <__assert_fail@plt+0x99f8>
   1abb4:	b	1aaa4 <__assert_fail@plt+0x99b8>
   1abb8:	cmp	r1, #1
   1abbc:	bne	1aae4 <__assert_fail@plt+0x99f8>
   1abc0:	b	1aaa4 <__assert_fail@plt+0x99b8>
   1abc4:	andeq	r0, r0, r6, lsl #8
   1abc8:	andeq	sp, r2, r4, lsr r3
   1abcc:	andeq	r0, r0, r7, lsl #8
   1abd0:	andeq	r0, r0, r9, lsl #8
   1abd4:	push	{r4, lr}
   1abd8:	mov	r0, #14
   1abdc:	bl	11098 <nl_langinfo@plt>
   1abe0:	cmp	r0, #0
   1abe4:	beq	1abfc <__assert_fail@plt+0x9b10>
   1abe8:	ldrb	r2, [r0]
   1abec:	ldr	r3, [pc, #16]	; 1ac04 <__assert_fail@plt+0x9b18>
   1abf0:	cmp	r2, #0
   1abf4:	moveq	r0, r3
   1abf8:	pop	{r4, pc}
   1abfc:	ldr	r0, [pc]	; 1ac04 <__assert_fail@plt+0x9b18>
   1ac00:	pop	{r4, pc}
   1ac04:	ldrdeq	ip, [r1], -r8
   1ac08:	push	{r4, r5, r6, r7, lr}
   1ac0c:	subs	r6, r0, #0
   1ac10:	sub	sp, sp, #12
   1ac14:	addeq	r6, sp, #4
   1ac18:	mov	r0, r6
   1ac1c:	mov	r5, r2
   1ac20:	mov	r7, r1
   1ac24:	bl	10f48 <mbrtowc@plt>
   1ac28:	cmp	r5, #0
   1ac2c:	cmnne	r0, #3
   1ac30:	mov	r4, r0
   1ac34:	bls	1ac50 <__assert_fail@plt+0x9b64>
   1ac38:	mov	r0, #0
   1ac3c:	bl	13e50 <__assert_fail@plt+0x2d64>
   1ac40:	cmp	r0, #0
   1ac44:	moveq	r4, #1
   1ac48:	ldrbeq	r3, [r7]
   1ac4c:	streq	r3, [r6]
   1ac50:	mov	r0, r4
   1ac54:	add	sp, sp, #12
   1ac58:	pop	{r4, r5, r6, r7, pc}
   1ac5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac60:	sub	sp, sp, #28
   1ac64:	cmp	r1, r3
   1ac68:	mov	r9, r1
   1ac6c:	str	r3, [sp, #12]
   1ac70:	stmib	sp, {r0, r2}
   1ac74:	beq	1ad28 <__assert_fail@plt+0x9c3c>
   1ac78:	ldr	r6, [sp, #12]
   1ac7c:	ldr	fp, [sp, #4]
   1ac80:	ldr	r4, [sp, #8]
   1ac84:	mov	r7, #0
   1ac88:	ldrb	r2, [fp, r9]
   1ac8c:	ldrb	r0, [r4, r6]
   1ac90:	strb	r7, [fp, r9]
   1ac94:	strb	r7, [r4, r6]
   1ac98:	str	r2, [sp, #16]
   1ac9c:	str	r0, [sp, #20]
   1aca0:	bl	10ff0 <__errno_location@plt>
   1aca4:	add	r5, r9, #1
   1aca8:	add	r6, r6, #1
   1acac:	mov	r8, r0
   1acb0:	b	1ace4 <__assert_fail@plt+0x9bf8>
   1acb4:	bl	10fd8 <strlen@plt>
   1acb8:	add	sl, r0, #1
   1acbc:	mov	r0, r4
   1acc0:	bl	10fd8 <strlen@plt>
   1acc4:	subs	r5, r5, sl
   1acc8:	add	fp, fp, sl
   1accc:	add	r0, r0, #1
   1acd0:	add	r4, r4, r0
   1acd4:	sub	r6, r6, r0
   1acd8:	beq	1ad58 <__assert_fail@plt+0x9c6c>
   1acdc:	cmp	r6, #0
   1ace0:	beq	1ad64 <__assert_fail@plt+0x9c78>
   1ace4:	str	r7, [r8]
   1ace8:	mov	r1, r4
   1acec:	mov	r0, fp
   1acf0:	bl	10f60 <strcoll@plt>
   1acf4:	subs	r2, r0, #0
   1acf8:	mov	r0, fp
   1acfc:	beq	1acb4 <__assert_fail@plt+0x9bc8>
   1ad00:	ldr	r3, [sp, #4]
   1ad04:	ldrb	r1, [sp, #16]
   1ad08:	ldrb	r0, [sp, #20]
   1ad0c:	strb	r1, [r3, r9]
   1ad10:	ldr	r3, [sp, #8]
   1ad14:	ldr	r1, [sp, #12]
   1ad18:	strb	r0, [r3, r1]
   1ad1c:	mov	r0, r2
   1ad20:	add	sp, sp, #28
   1ad24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad28:	mov	r1, r2
   1ad2c:	mov	r2, r9
   1ad30:	bl	10ed0 <memcmp@plt>
   1ad34:	subs	r2, r0, #0
   1ad38:	bne	1ac78 <__assert_fail@plt+0x9b8c>
   1ad3c:	str	r2, [sp, #4]
   1ad40:	bl	10ff0 <__errno_location@plt>
   1ad44:	ldr	r2, [sp, #4]
   1ad48:	str	r2, [r0]
   1ad4c:	mov	r0, r2
   1ad50:	add	sp, sp, #28
   1ad54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad58:	adds	r2, r6, #0
   1ad5c:	mvnne	r2, #0
   1ad60:	b	1ad00 <__assert_fail@plt+0x9c14>
   1ad64:	mov	r2, #1
   1ad68:	b	1ad00 <__assert_fail@plt+0x9c14>
   1ad6c:	cmp	r1, r3
   1ad70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad74:	mov	r7, r1
   1ad78:	mov	r8, r3
   1ad7c:	mov	r4, r2
   1ad80:	mov	r5, r0
   1ad84:	beq	1adec <__assert_fail@plt+0x9d00>
   1ad88:	bl	10ff0 <__errno_location@plt>
   1ad8c:	mov	r9, #0
   1ad90:	mov	sl, r0
   1ad94:	b	1adc8 <__assert_fail@plt+0x9cdc>
   1ad98:	bl	10fd8 <strlen@plt>
   1ad9c:	add	r6, r0, #1
   1ada0:	mov	r0, r4
   1ada4:	bl	10fd8 <strlen@plt>
   1ada8:	subs	r7, r7, r6
   1adac:	add	r5, r5, r6
   1adb0:	add	r0, r0, #1
   1adb4:	add	r4, r4, r0
   1adb8:	sub	r8, r8, r0
   1adbc:	beq	1ae10 <__assert_fail@plt+0x9d24>
   1adc0:	cmp	r8, #0
   1adc4:	beq	1ae20 <__assert_fail@plt+0x9d34>
   1adc8:	str	r9, [sl]
   1adcc:	mov	r1, r4
   1add0:	mov	r0, r5
   1add4:	bl	10f60 <strcoll@plt>
   1add8:	subs	r6, r0, #0
   1addc:	mov	r0, r5
   1ade0:	beq	1ad98 <__assert_fail@plt+0x9cac>
   1ade4:	mov	r0, r6
   1ade8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1adec:	mov	r2, r1
   1adf0:	mov	r1, r4
   1adf4:	bl	10ed0 <memcmp@plt>
   1adf8:	subs	r6, r0, #0
   1adfc:	bne	1ad88 <__assert_fail@plt+0x9c9c>
   1ae00:	bl	10ff0 <__errno_location@plt>
   1ae04:	str	r6, [r0]
   1ae08:	mov	r0, r6
   1ae0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae10:	adds	r6, r8, #0
   1ae14:	mvnne	r6, #0
   1ae18:	mov	r0, r6
   1ae1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae20:	mov	r6, #1
   1ae24:	mov	r0, r6
   1ae28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae2c:	push	{r4, r5, r6, lr}
   1ae30:	subs	r4, r2, #0
   1ae34:	mov	r6, r0
   1ae38:	mov	r5, r1
   1ae3c:	beq	1ae68 <__assert_fail@plt+0x9d7c>
   1ae40:	mov	r1, r4
   1ae44:	mvn	r0, #0
   1ae48:	bl	1ae78 <__assert_fail@plt+0x9d8c>
   1ae4c:	cmp	r0, r5
   1ae50:	bcs	1ae68 <__assert_fail@plt+0x9d7c>
   1ae54:	bl	10ff0 <__errno_location@plt>
   1ae58:	mov	r3, #12
   1ae5c:	str	r3, [r0]
   1ae60:	mov	r0, #0
   1ae64:	pop	{r4, r5, r6, pc}
   1ae68:	mul	r1, r5, r4
   1ae6c:	mov	r0, r6
   1ae70:	pop	{r4, r5, r6, lr}
   1ae74:	b	1a928 <__assert_fail@plt+0x983c>
   1ae78:	subs	r2, r1, #1
   1ae7c:	bxeq	lr
   1ae80:	bcc	1b058 <__assert_fail@plt+0x9f6c>
   1ae84:	cmp	r0, r1
   1ae88:	bls	1b03c <__assert_fail@plt+0x9f50>
   1ae8c:	tst	r1, r2
   1ae90:	beq	1b048 <__assert_fail@plt+0x9f5c>
   1ae94:	clz	r3, r0
   1ae98:	clz	r2, r1
   1ae9c:	sub	r3, r2, r3
   1aea0:	rsbs	r3, r3, #31
   1aea4:	addne	r3, r3, r3, lsl #1
   1aea8:	mov	r2, #0
   1aeac:	addne	pc, pc, r3, lsl #2
   1aeb0:	nop			; (mov r0, r0)
   1aeb4:	cmp	r0, r1, lsl #31
   1aeb8:	adc	r2, r2, r2
   1aebc:	subcs	r0, r0, r1, lsl #31
   1aec0:	cmp	r0, r1, lsl #30
   1aec4:	adc	r2, r2, r2
   1aec8:	subcs	r0, r0, r1, lsl #30
   1aecc:	cmp	r0, r1, lsl #29
   1aed0:	adc	r2, r2, r2
   1aed4:	subcs	r0, r0, r1, lsl #29
   1aed8:	cmp	r0, r1, lsl #28
   1aedc:	adc	r2, r2, r2
   1aee0:	subcs	r0, r0, r1, lsl #28
   1aee4:	cmp	r0, r1, lsl #27
   1aee8:	adc	r2, r2, r2
   1aeec:	subcs	r0, r0, r1, lsl #27
   1aef0:	cmp	r0, r1, lsl #26
   1aef4:	adc	r2, r2, r2
   1aef8:	subcs	r0, r0, r1, lsl #26
   1aefc:	cmp	r0, r1, lsl #25
   1af00:	adc	r2, r2, r2
   1af04:	subcs	r0, r0, r1, lsl #25
   1af08:	cmp	r0, r1, lsl #24
   1af0c:	adc	r2, r2, r2
   1af10:	subcs	r0, r0, r1, lsl #24
   1af14:	cmp	r0, r1, lsl #23
   1af18:	adc	r2, r2, r2
   1af1c:	subcs	r0, r0, r1, lsl #23
   1af20:	cmp	r0, r1, lsl #22
   1af24:	adc	r2, r2, r2
   1af28:	subcs	r0, r0, r1, lsl #22
   1af2c:	cmp	r0, r1, lsl #21
   1af30:	adc	r2, r2, r2
   1af34:	subcs	r0, r0, r1, lsl #21
   1af38:	cmp	r0, r1, lsl #20
   1af3c:	adc	r2, r2, r2
   1af40:	subcs	r0, r0, r1, lsl #20
   1af44:	cmp	r0, r1, lsl #19
   1af48:	adc	r2, r2, r2
   1af4c:	subcs	r0, r0, r1, lsl #19
   1af50:	cmp	r0, r1, lsl #18
   1af54:	adc	r2, r2, r2
   1af58:	subcs	r0, r0, r1, lsl #18
   1af5c:	cmp	r0, r1, lsl #17
   1af60:	adc	r2, r2, r2
   1af64:	subcs	r0, r0, r1, lsl #17
   1af68:	cmp	r0, r1, lsl #16
   1af6c:	adc	r2, r2, r2
   1af70:	subcs	r0, r0, r1, lsl #16
   1af74:	cmp	r0, r1, lsl #15
   1af78:	adc	r2, r2, r2
   1af7c:	subcs	r0, r0, r1, lsl #15
   1af80:	cmp	r0, r1, lsl #14
   1af84:	adc	r2, r2, r2
   1af88:	subcs	r0, r0, r1, lsl #14
   1af8c:	cmp	r0, r1, lsl #13
   1af90:	adc	r2, r2, r2
   1af94:	subcs	r0, r0, r1, lsl #13
   1af98:	cmp	r0, r1, lsl #12
   1af9c:	adc	r2, r2, r2
   1afa0:	subcs	r0, r0, r1, lsl #12
   1afa4:	cmp	r0, r1, lsl #11
   1afa8:	adc	r2, r2, r2
   1afac:	subcs	r0, r0, r1, lsl #11
   1afb0:	cmp	r0, r1, lsl #10
   1afb4:	adc	r2, r2, r2
   1afb8:	subcs	r0, r0, r1, lsl #10
   1afbc:	cmp	r0, r1, lsl #9
   1afc0:	adc	r2, r2, r2
   1afc4:	subcs	r0, r0, r1, lsl #9
   1afc8:	cmp	r0, r1, lsl #8
   1afcc:	adc	r2, r2, r2
   1afd0:	subcs	r0, r0, r1, lsl #8
   1afd4:	cmp	r0, r1, lsl #7
   1afd8:	adc	r2, r2, r2
   1afdc:	subcs	r0, r0, r1, lsl #7
   1afe0:	cmp	r0, r1, lsl #6
   1afe4:	adc	r2, r2, r2
   1afe8:	subcs	r0, r0, r1, lsl #6
   1afec:	cmp	r0, r1, lsl #5
   1aff0:	adc	r2, r2, r2
   1aff4:	subcs	r0, r0, r1, lsl #5
   1aff8:	cmp	r0, r1, lsl #4
   1affc:	adc	r2, r2, r2
   1b000:	subcs	r0, r0, r1, lsl #4
   1b004:	cmp	r0, r1, lsl #3
   1b008:	adc	r2, r2, r2
   1b00c:	subcs	r0, r0, r1, lsl #3
   1b010:	cmp	r0, r1, lsl #2
   1b014:	adc	r2, r2, r2
   1b018:	subcs	r0, r0, r1, lsl #2
   1b01c:	cmp	r0, r1, lsl #1
   1b020:	adc	r2, r2, r2
   1b024:	subcs	r0, r0, r1, lsl #1
   1b028:	cmp	r0, r1
   1b02c:	adc	r2, r2, r2
   1b030:	subcs	r0, r0, r1
   1b034:	mov	r0, r2
   1b038:	bx	lr
   1b03c:	moveq	r0, #1
   1b040:	movne	r0, #0
   1b044:	bx	lr
   1b048:	clz	r2, r1
   1b04c:	rsb	r2, r2, #31
   1b050:	lsr	r0, r0, r2
   1b054:	bx	lr
   1b058:	cmp	r0, #0
   1b05c:	mvnne	r0, #0
   1b060:	b	1b2c4 <__assert_fail@plt+0xa1d8>
   1b064:	cmp	r1, #0
   1b068:	beq	1b058 <__assert_fail@plt+0x9f6c>
   1b06c:	push	{r0, r1, lr}
   1b070:	bl	1ae78 <__assert_fail@plt+0x9d8c>
   1b074:	pop	{r1, r2, lr}
   1b078:	mul	r3, r2, r0
   1b07c:	sub	r1, r1, r3
   1b080:	bx	lr
   1b084:	cmp	r1, #0
   1b088:	beq	1b294 <__assert_fail@plt+0xa1a8>
   1b08c:	eor	ip, r0, r1
   1b090:	rsbmi	r1, r1, #0
   1b094:	subs	r2, r1, #1
   1b098:	beq	1b260 <__assert_fail@plt+0xa174>
   1b09c:	movs	r3, r0
   1b0a0:	rsbmi	r3, r0, #0
   1b0a4:	cmp	r3, r1
   1b0a8:	bls	1b26c <__assert_fail@plt+0xa180>
   1b0ac:	tst	r1, r2
   1b0b0:	beq	1b27c <__assert_fail@plt+0xa190>
   1b0b4:	clz	r2, r3
   1b0b8:	clz	r0, r1
   1b0bc:	sub	r2, r0, r2
   1b0c0:	rsbs	r2, r2, #31
   1b0c4:	addne	r2, r2, r2, lsl #1
   1b0c8:	mov	r0, #0
   1b0cc:	addne	pc, pc, r2, lsl #2
   1b0d0:	nop			; (mov r0, r0)
   1b0d4:	cmp	r3, r1, lsl #31
   1b0d8:	adc	r0, r0, r0
   1b0dc:	subcs	r3, r3, r1, lsl #31
   1b0e0:	cmp	r3, r1, lsl #30
   1b0e4:	adc	r0, r0, r0
   1b0e8:	subcs	r3, r3, r1, lsl #30
   1b0ec:	cmp	r3, r1, lsl #29
   1b0f0:	adc	r0, r0, r0
   1b0f4:	subcs	r3, r3, r1, lsl #29
   1b0f8:	cmp	r3, r1, lsl #28
   1b0fc:	adc	r0, r0, r0
   1b100:	subcs	r3, r3, r1, lsl #28
   1b104:	cmp	r3, r1, lsl #27
   1b108:	adc	r0, r0, r0
   1b10c:	subcs	r3, r3, r1, lsl #27
   1b110:	cmp	r3, r1, lsl #26
   1b114:	adc	r0, r0, r0
   1b118:	subcs	r3, r3, r1, lsl #26
   1b11c:	cmp	r3, r1, lsl #25
   1b120:	adc	r0, r0, r0
   1b124:	subcs	r3, r3, r1, lsl #25
   1b128:	cmp	r3, r1, lsl #24
   1b12c:	adc	r0, r0, r0
   1b130:	subcs	r3, r3, r1, lsl #24
   1b134:	cmp	r3, r1, lsl #23
   1b138:	adc	r0, r0, r0
   1b13c:	subcs	r3, r3, r1, lsl #23
   1b140:	cmp	r3, r1, lsl #22
   1b144:	adc	r0, r0, r0
   1b148:	subcs	r3, r3, r1, lsl #22
   1b14c:	cmp	r3, r1, lsl #21
   1b150:	adc	r0, r0, r0
   1b154:	subcs	r3, r3, r1, lsl #21
   1b158:	cmp	r3, r1, lsl #20
   1b15c:	adc	r0, r0, r0
   1b160:	subcs	r3, r3, r1, lsl #20
   1b164:	cmp	r3, r1, lsl #19
   1b168:	adc	r0, r0, r0
   1b16c:	subcs	r3, r3, r1, lsl #19
   1b170:	cmp	r3, r1, lsl #18
   1b174:	adc	r0, r0, r0
   1b178:	subcs	r3, r3, r1, lsl #18
   1b17c:	cmp	r3, r1, lsl #17
   1b180:	adc	r0, r0, r0
   1b184:	subcs	r3, r3, r1, lsl #17
   1b188:	cmp	r3, r1, lsl #16
   1b18c:	adc	r0, r0, r0
   1b190:	subcs	r3, r3, r1, lsl #16
   1b194:	cmp	r3, r1, lsl #15
   1b198:	adc	r0, r0, r0
   1b19c:	subcs	r3, r3, r1, lsl #15
   1b1a0:	cmp	r3, r1, lsl #14
   1b1a4:	adc	r0, r0, r0
   1b1a8:	subcs	r3, r3, r1, lsl #14
   1b1ac:	cmp	r3, r1, lsl #13
   1b1b0:	adc	r0, r0, r0
   1b1b4:	subcs	r3, r3, r1, lsl #13
   1b1b8:	cmp	r3, r1, lsl #12
   1b1bc:	adc	r0, r0, r0
   1b1c0:	subcs	r3, r3, r1, lsl #12
   1b1c4:	cmp	r3, r1, lsl #11
   1b1c8:	adc	r0, r0, r0
   1b1cc:	subcs	r3, r3, r1, lsl #11
   1b1d0:	cmp	r3, r1, lsl #10
   1b1d4:	adc	r0, r0, r0
   1b1d8:	subcs	r3, r3, r1, lsl #10
   1b1dc:	cmp	r3, r1, lsl #9
   1b1e0:	adc	r0, r0, r0
   1b1e4:	subcs	r3, r3, r1, lsl #9
   1b1e8:	cmp	r3, r1, lsl #8
   1b1ec:	adc	r0, r0, r0
   1b1f0:	subcs	r3, r3, r1, lsl #8
   1b1f4:	cmp	r3, r1, lsl #7
   1b1f8:	adc	r0, r0, r0
   1b1fc:	subcs	r3, r3, r1, lsl #7
   1b200:	cmp	r3, r1, lsl #6
   1b204:	adc	r0, r0, r0
   1b208:	subcs	r3, r3, r1, lsl #6
   1b20c:	cmp	r3, r1, lsl #5
   1b210:	adc	r0, r0, r0
   1b214:	subcs	r3, r3, r1, lsl #5
   1b218:	cmp	r3, r1, lsl #4
   1b21c:	adc	r0, r0, r0
   1b220:	subcs	r3, r3, r1, lsl #4
   1b224:	cmp	r3, r1, lsl #3
   1b228:	adc	r0, r0, r0
   1b22c:	subcs	r3, r3, r1, lsl #3
   1b230:	cmp	r3, r1, lsl #2
   1b234:	adc	r0, r0, r0
   1b238:	subcs	r3, r3, r1, lsl #2
   1b23c:	cmp	r3, r1, lsl #1
   1b240:	adc	r0, r0, r0
   1b244:	subcs	r3, r3, r1, lsl #1
   1b248:	cmp	r3, r1
   1b24c:	adc	r0, r0, r0
   1b250:	subcs	r3, r3, r1
   1b254:	cmp	ip, #0
   1b258:	rsbmi	r0, r0, #0
   1b25c:	bx	lr
   1b260:	teq	ip, r0
   1b264:	rsbmi	r0, r0, #0
   1b268:	bx	lr
   1b26c:	movcc	r0, #0
   1b270:	asreq	r0, ip, #31
   1b274:	orreq	r0, r0, #1
   1b278:	bx	lr
   1b27c:	clz	r2, r1
   1b280:	rsb	r2, r2, #31
   1b284:	cmp	ip, #0
   1b288:	lsr	r0, r3, r2
   1b28c:	rsbmi	r0, r0, #0
   1b290:	bx	lr
   1b294:	cmp	r0, #0
   1b298:	mvngt	r0, #-2147483648	; 0x80000000
   1b29c:	movlt	r0, #-2147483648	; 0x80000000
   1b2a0:	b	1b2c4 <__assert_fail@plt+0xa1d8>
   1b2a4:	cmp	r1, #0
   1b2a8:	beq	1b294 <__assert_fail@plt+0xa1a8>
   1b2ac:	push	{r0, r1, lr}
   1b2b0:	bl	1b08c <__assert_fail@plt+0x9fa0>
   1b2b4:	pop	{r1, r2, lr}
   1b2b8:	mul	r3, r2, r0
   1b2bc:	sub	r1, r1, r3
   1b2c0:	bx	lr
   1b2c4:	push	{r1, lr}
   1b2c8:	mov	r0, #8
   1b2cc:	bl	10e58 <raise@plt>
   1b2d0:	pop	{r1, pc}
   1b2d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b2d8:	mov	r7, r0
   1b2dc:	ldr	r6, [pc, #72]	; 1b32c <__assert_fail@plt+0xa240>
   1b2e0:	ldr	r5, [pc, #72]	; 1b330 <__assert_fail@plt+0xa244>
   1b2e4:	add	r6, pc, r6
   1b2e8:	add	r5, pc, r5
   1b2ec:	sub	r6, r6, r5
   1b2f0:	mov	r8, r1
   1b2f4:	mov	r9, r2
   1b2f8:	bl	10e14 <fdopen@plt-0x20>
   1b2fc:	asrs	r6, r6, #2
   1b300:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b304:	mov	r4, #0
   1b308:	add	r4, r4, #1
   1b30c:	ldr	r3, [r5], #4
   1b310:	mov	r2, r9
   1b314:	mov	r1, r8
   1b318:	mov	r0, r7
   1b31c:	blx	r3
   1b320:	cmp	r6, r4
   1b324:	bne	1b308 <__assert_fail@plt+0xa21c>
   1b328:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b32c:	andeq	r1, r1, r4, lsr #24
   1b330:	andeq	r1, r1, ip, lsl ip
   1b334:	bx	lr
   1b338:	ldr	r3, [pc, #12]	; 1b34c <__assert_fail@plt+0xa260>
   1b33c:	mov	r1, #0
   1b340:	add	r3, pc, r3
   1b344:	ldr	r2, [r3]
   1b348:	b	10ffc <__cxa_atexit@plt>
   1b34c:			; <UNDEFINED> instruction: 0x00011db8

Disassembly of section .fini:

0001b350 <.fini>:
   1b350:	push	{r3, lr}
   1b354:	pop	{r3, pc}
