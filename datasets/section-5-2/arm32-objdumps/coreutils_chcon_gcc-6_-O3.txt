
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

0001120c <.init>:
   1120c:	push	{r3, lr}
   11210:	bl	124dc <__assert_fail@plt+0xed8>
   11214:	pop	{r3, pc}

Disassembly of section .plt:

00011218 <fstatfs64@plt-0x14>:
   11218:	push	{lr}		; (str lr, [sp, #-4]!)
   1121c:	ldr	lr, [pc, #4]	; 11228 <fstatfs64@plt-0x4>
   11220:	add	lr, pc, lr
   11224:	ldr	pc, [lr, #8]!
   11228:	ldrdeq	sp, [r1], -r8

0001122c <fstatfs64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #118784	; 0x1d000
   11234:	ldr	pc, [ip, #3544]!	; 0xdd8

00011238 <calloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #118784	; 0x1d000
   11240:	ldr	pc, [ip, #3536]!	; 0xdd0

00011244 <fputs_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #118784	; 0x1d000
   1124c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011250 <raise@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #118784	; 0x1d000
   11258:	ldr	pc, [ip, #3520]!	; 0xdc0

0001125c <is_selinux_enabled@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #118784	; 0x1d000
   11264:	ldr	pc, [ip, #3512]!	; 0xdb8

00011268 <strcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #118784	; 0x1d000
   11270:	ldr	pc, [ip, #3504]!	; 0xdb0

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #118784	; 0x1d000
   1127c:	ldr	pc, [ip, #3496]!	; 0xda8

00011280 <lsetfilecon@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #118784	; 0x1d000
   11288:	ldr	pc, [ip, #3488]!	; 0xda0

0001128c <memmove@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #118784	; 0x1d000
   11294:	ldr	pc, [ip, #3480]!	; 0xd98

00011298 <free@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #118784	; 0x1d000
   112a0:	ldr	pc, [ip, #3472]!	; 0xd90

000112a4 <_exit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #118784	; 0x1d000
   112ac:	ldr	pc, [ip, #3464]!	; 0xd88

000112b0 <memcpy@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #118784	; 0x1d000
   112b8:	ldr	pc, [ip, #3456]!	; 0xd80

000112bc <mbsinit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #118784	; 0x1d000
   112c4:	ldr	pc, [ip, #3448]!	; 0xd78

000112c8 <context_new@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #118784	; 0x1d000
   112d0:	ldr	pc, [ip, #3440]!	; 0xd70

000112d4 <memcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #118784	; 0x1d000
   112dc:	ldr	pc, [ip, #3432]!	; 0xd68

000112e0 <fputc_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #118784	; 0x1d000
   112e8:	ldr	pc, [ip, #3424]!	; 0xd60

000112ec <context_role_set@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #118784	; 0x1d000
   112f4:	ldr	pc, [ip, #3416]!	; 0xd58

000112f8 <dcgettext@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #118784	; 0x1d000
   11300:	ldr	pc, [ip, #3408]!	; 0xd50

00011304 <context_type_set@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #118784	; 0x1d000
   1130c:	ldr	pc, [ip, #3400]!	; 0xd48

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #118784	; 0x1d000
   11318:	ldr	pc, [ip, #3392]!	; 0xd40

0001131c <fgetfilecon@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #118784	; 0x1d000
   11324:	ldr	pc, [ip, #3384]!	; 0xd38

00011328 <textdomain@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #118784	; 0x1d000
   11330:	ldr	pc, [ip, #3376]!	; 0xd30

00011334 <chdir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #118784	; 0x1d000
   1133c:	ldr	pc, [ip, #3368]!	; 0xd28

00011340 <__fxstatat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #118784	; 0x1d000
   11348:	ldr	pc, [ip, #3360]!	; 0xd20

0001134c <iswprint@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #118784	; 0x1d000
   11354:	ldr	pc, [ip, #3352]!	; 0xd18

00011358 <__fxstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3344]!	; 0xd10

00011364 <fwrite@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3336]!	; 0xd08

00011370 <lseek64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3328]!	; 0xd00

0001137c <__ctype_get_mb_cur_max@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3320]!	; 0xcf8

00011388 <strcpy@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3312]!	; 0xcf0

00011394 <__fpending@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3304]!	; 0xce8

000113a0 <mbrtowc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3296]!	; 0xce0

000113ac <error@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b8 <security_check_context@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113d0 <lgetfilecon@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113f4 <__freading@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3240]!	; 0xca8

00011400 <__gmon_start__@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3232]!	; 0xca0

0001140c <context_free@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3224]!	; 0xc98

00011418 <getopt_long@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3216]!	; 0xc90

00011424 <__ctype_b_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3208]!	; 0xc88

00011430 <getcwd@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3200]!	; 0xc80

0001143c <exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3192]!	; 0xc78

00011448 <context_user_set@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3184]!	; 0xc70

00011454 <getfilecon@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3176]!	; 0xc68

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3168]!	; 0xc60

0001146c <openat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3160]!	; 0xc58

00011478 <memrchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3152]!	; 0xc50

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3144]!	; 0xc48

00011490 <__sprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3136]!	; 0xc40

0001149c <__cxa_atexit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3128]!	; 0xc38

000114a8 <memset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3120]!	; 0xc30

000114b4 <__printf_chk@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3112]!	; 0xc28

000114c0 <fileno@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3104]!	; 0xc20

000114cc <__fprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #3096]!	; 0xc18

000114d8 <memchr@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #3088]!	; 0xc10

000114e4 <setfilecon@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #3080]!	; 0xc08

000114f0 <access@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #3072]!	; 0xc00

000114fc <fclose@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #3064]!	; 0xbf8

00011508 <fseeko64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #3056]!	; 0xbf0

00011514 <fcntl64@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #3040]!	; 0xbe0

0001152c <strrchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #3032]!	; 0xbd8

00011538 <nl_langinfo@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #3024]!	; 0xbd0

00011544 <readdir64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011550 <fdopendir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #3008]!	; 0xbc0

0001155c <dirfd@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #3000]!	; 0xbb8

00011568 <fchdir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2992]!	; 0xbb0

00011574 <qsort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2984]!	; 0xba8

00011580 <freecon@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2976]!	; 0xba0

0001158c <bindtextdomain@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2968]!	; 0xb98

00011598 <context_range_set@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2960]!	; 0xb90

000115a4 <context_str@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2952]!	; 0xb88

000115b0 <__xstat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2944]!	; 0xb80

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2936]!	; 0xb78

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2928]!	; 0xb70

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2920]!	; 0xb68

000115e0 <__lxstat64@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2912]!	; 0xb60

000115ec <closedir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2904]!	; 0xb58

000115f8 <strspn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2896]!	; 0xb50

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011610 <.text>:
   11610:	push	{r4, lr}
   11614:	mov	r2, #64	; 0x40
   11618:	ldr	r3, [pc, #8]	; 11628 <__assert_fail@plt+0x24>
   1161c:	ldr	r1, [pc, #8]	; 1162c <__assert_fail@plt+0x28>
   11620:	ldr	r0, [pc, #8]	; 11630 <__assert_fail@plt+0x2c>
   11624:	bl	11604 <__assert_fail@plt>
   11628:	andeq	lr, r1, r8, ror #27
   1162c:	andeq	lr, r1, r0, lsl #28
   11630:	andeq	lr, r1, r4, lsl lr
   11634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11638:	mov	r6, r0
   1163c:	sub	sp, sp, #44	; 0x2c
   11640:	ldr	r0, [r1]
   11644:	mov	r5, r1
   11648:	bl	16b40 <__assert_fail@plt+0x553c>
   1164c:	ldr	r1, [pc, #3480]	; 123ec <__assert_fail@plt+0xde8>
   11650:	mov	r0, #6
   11654:	bl	11520 <setlocale@plt>
   11658:	ldr	r1, [pc, #3472]	; 123f0 <__assert_fail@plt+0xdec>
   1165c:	ldr	r0, [pc, #3472]	; 123f4 <__assert_fail@plt+0xdf0>
   11660:	bl	1158c <bindtextdomain@plt>
   11664:	ldr	r0, [pc, #3464]	; 123f4 <__assert_fail@plt+0xdf0>
   11668:	bl	11328 <textdomain@plt>
   1166c:	ldr	r8, [pc, #3460]	; 123f8 <__assert_fail@plt+0xdf4>
   11670:	ldr	r0, [pc, #3460]	; 123fc <__assert_fail@plt+0xdf8>
   11674:	ldr	r7, [pc, #3460]	; 12400 <__assert_fail@plt+0xdfc>
   11678:	ldr	sl, [pc, #3460]	; 12404 <__assert_fail@plt+0xe00>
   1167c:	ldr	fp, [pc, #3460]	; 12408 <__assert_fail@plt+0xe04>
   11680:	bl	1d958 <__assert_fail@plt+0xc354>
   11684:	mvn	r3, #0
   11688:	mov	r9, #0
   1168c:	str	r3, [sp, #24]
   11690:	mov	r3, #16
   11694:	str	r9, [sp, #16]
   11698:	str	r9, [sp, #28]
   1169c:	str	r3, [sp, #20]
   116a0:	mov	r4, #0
   116a4:	str	r4, [sp]
   116a8:	mov	r3, r8
   116ac:	mov	r2, r7
   116b0:	mov	r1, r5
   116b4:	mov	r0, r6
   116b8:	bl	11418 <getopt_long@plt>
   116bc:	cmn	r0, #1
   116c0:	beq	1186c <__assert_fail@plt+0x268>
   116c4:	cmp	r0, #108	; 0x6c
   116c8:	beq	11858 <__assert_fail@plt+0x254>
   116cc:	bgt	11700 <__assert_fail@plt+0xfc>
   116d0:	cmp	r0, #76	; 0x4c
   116d4:	beq	1184c <__assert_fail@plt+0x248>
   116d8:	ble	1173c <__assert_fail@plt+0x138>
   116dc:	cmp	r0, #82	; 0x52
   116e0:	beq	11840 <__assert_fail@plt+0x23c>
   116e4:	ble	117c4 <__assert_fail@plt+0x1c0>
   116e8:	cmp	r0, #102	; 0x66
   116ec:	beq	116a0 <__assert_fail@plt+0x9c>
   116f0:	cmp	r0, #104	; 0x68
   116f4:	bne	11754 <__assert_fail@plt+0x150>
   116f8:	str	r4, [sp, #24]
   116fc:	b	116a0 <__assert_fail@plt+0x9c>
   11700:	cmp	r0, #118	; 0x76
   11704:	beq	11834 <__assert_fail@plt+0x230>
   11708:	ble	1175c <__assert_fail@plt+0x158>
   1170c:	ldr	r3, [pc, #3320]	; 1240c <__assert_fail@plt+0xe08>
   11710:	cmp	r0, r3
   11714:	beq	1182c <__assert_fail@plt+0x228>
   11718:	ble	117b0 <__assert_fail@plt+0x1ac>
   1171c:	ldr	r3, [pc, #3308]	; 12410 <__assert_fail@plt+0xe0c>
   11720:	cmp	r0, r3
   11724:	beq	11784 <__assert_fail@plt+0x180>
   11728:	add	r3, r3, #1
   1172c:	cmp	r0, r3
   11730:	bne	11754 <__assert_fail@plt+0x150>
   11734:	ldr	r9, [fp]
   11738:	b	116a0 <__assert_fail@plt+0x9c>
   1173c:	cmn	r0, #2
   11740:	beq	11824 <__assert_fail@plt+0x220>
   11744:	cmp	r0, #72	; 0x48
   11748:	beq	117a4 <__assert_fail@plt+0x1a0>
   1174c:	cmn	r0, #3
   11750:	beq	117d8 <__assert_fail@plt+0x1d4>
   11754:	mov	r0, #1
   11758:	bl	125c8 <__assert_fail@plt+0xfc4>
   1175c:	cmp	r0, #116	; 0x74
   11760:	beq	11810 <__assert_fail@plt+0x20c>
   11764:	bgt	11790 <__assert_fail@plt+0x18c>
   11768:	cmp	r0, #114	; 0x72
   1176c:	bne	11754 <__assert_fail@plt+0x150>
   11770:	ldr	r3, [fp]
   11774:	mov	r2, #1
   11778:	str	r2, [sp, #16]
   1177c:	str	r3, [sl, #8]
   11780:	b	116a0 <__assert_fail@plt+0x9c>
   11784:	mov	r3, #1
   11788:	str	r3, [sp, #28]
   1178c:	b	116a0 <__assert_fail@plt+0x9c>
   11790:	ldr	r3, [fp]
   11794:	mov	r2, #1
   11798:	str	r2, [sp, #16]
   1179c:	str	r3, [sl, #4]
   117a0:	b	116a0 <__assert_fail@plt+0x9c>
   117a4:	mov	r3, #17
   117a8:	str	r3, [sp, #20]
   117ac:	b	116a0 <__assert_fail@plt+0x9c>
   117b0:	cmp	r0, #256	; 0x100
   117b4:	bne	11754 <__assert_fail@plt+0x150>
   117b8:	mov	r3, #1
   117bc:	str	r3, [sp, #24]
   117c0:	b	116a0 <__assert_fail@plt+0x9c>
   117c4:	cmp	r0, #80	; 0x50
   117c8:	bne	11754 <__assert_fail@plt+0x150>
   117cc:	mov	r3, #16
   117d0:	str	r3, [sp, #20]
   117d4:	b	116a0 <__assert_fail@plt+0x9c>
   117d8:	ldr	r3, [pc, #3124]	; 12414 <__assert_fail@plt+0xe10>
   117dc:	ldr	r0, [pc, #3124]	; 12418 <__assert_fail@plt+0xe14>
   117e0:	ldr	r1, [pc, #3124]	; 1241c <__assert_fail@plt+0xe18>
   117e4:	ldr	r2, [pc, #3124]	; 12420 <__assert_fail@plt+0xe1c>
   117e8:	str	r4, [sp, #8]
   117ec:	ldr	r0, [r0]
   117f0:	ldr	r3, [r3]
   117f4:	str	r1, [sp, #4]
   117f8:	str	r2, [sp]
   117fc:	ldr	r1, [pc, #3104]	; 12424 <__assert_fail@plt+0xe20>
   11800:	ldr	r2, [pc, #3104]	; 12428 <__assert_fail@plt+0xe24>
   11804:	bl	1bce8 <__assert_fail@plt+0xa6e4>
   11808:	mov	r0, r4
   1180c:	bl	1143c <exit@plt>
   11810:	ldr	r3, [fp]
   11814:	mov	r2, #1
   11818:	str	r2, [sp, #16]
   1181c:	str	r3, [sl, #12]
   11820:	b	116a0 <__assert_fail@plt+0x9c>
   11824:	mov	r0, r4
   11828:	bl	125c8 <__assert_fail@plt+0xfc4>
   1182c:	str	r4, [sp, #28]
   11830:	b	116a0 <__assert_fail@plt+0x9c>
   11834:	mov	r3, #1
   11838:	strb	r3, [sl, #1]
   1183c:	b	116a0 <__assert_fail@plt+0x9c>
   11840:	mov	r3, #1
   11844:	strb	r3, [sl]
   11848:	b	116a0 <__assert_fail@plt+0x9c>
   1184c:	mov	r3, #2
   11850:	str	r3, [sp, #20]
   11854:	b	116a0 <__assert_fail@plt+0x9c>
   11858:	ldr	r3, [fp]
   1185c:	mov	r2, #1
   11860:	str	r2, [sp, #16]
   11864:	str	r3, [sl, #16]
   11868:	b	116a0 <__assert_fail@plt+0x9c>
   1186c:	ldr	r7, [pc, #2960]	; 12404 <__assert_fail@plt+0xe00>
   11870:	ldrb	r3, [r7]
   11874:	cmp	r3, r4
   11878:	beq	118c0 <__assert_fail@plt+0x2bc>
   1187c:	ldr	r3, [sp, #20]
   11880:	cmp	r3, #16
   11884:	ldr	r3, [sp, #24]
   11888:	beq	11e58 <__assert_fail@plt+0x854>
   1188c:	cmp	r3, #0
   11890:	movne	r3, #1
   11894:	strbne	r3, [r7, #20]
   11898:	bne	118d8 <__assert_fail@plt+0x2d4>
   1189c:	ldr	r1, [pc, #2952]	; 1242c <__assert_fail@plt+0xe28>
   118a0:	mov	r2, #5
   118a4:	mov	r4, r3
   118a8:	mov	r0, r4
   118ac:	bl	112f8 <dcgettext@plt>
   118b0:	mov	r1, r4
   118b4:	mov	r2, r0
   118b8:	mov	r0, #1
   118bc:	bl	113ac <error@plt>
   118c0:	mov	r3, #16
   118c4:	str	r3, [sp, #20]
   118c8:	ldr	r3, [sp, #24]
   118cc:	adds	r3, r3, #0
   118d0:	movne	r3, #1
   118d4:	strb	r3, [r7, #20]
   118d8:	ldr	r4, [pc, #2896]	; 12430 <__assert_fail@plt+0xe2c>
   118dc:	ldr	r3, [sp, #16]
   118e0:	ldr	r2, [r4]
   118e4:	cmp	r9, #0
   118e8:	orrne	r3, r3, #1
   118ec:	cmp	r3, #0
   118f0:	moveq	r3, #2
   118f4:	movne	r3, #1
   118f8:	sub	r1, r6, r2
   118fc:	cmp	r3, r1
   11900:	bgt	12344 <__assert_fail@plt+0xd40>
   11904:	cmp	r9, #0
   11908:	beq	11e70 <__assert_fail@plt+0x86c>
   1190c:	add	r1, sp, #40	; 0x28
   11910:	mov	r6, #0
   11914:	str	r6, [r1, #-4]!
   11918:	mov	r0, r9
   1191c:	bl	1b2fc <__assert_fail@plt+0x9cf8>
   11920:	cmp	r0, r6
   11924:	blt	12394 <__assert_fail@plt+0xd90>
   11928:	ldr	r2, [sp, #16]
   1192c:	ldr	r3, [sp, #36]	; 0x24
   11930:	cmp	r2, #0
   11934:	str	r3, [r7, #24]
   11938:	bne	12370 <__assert_fail@plt+0xd6c>
   1193c:	ldrb	r3, [r7]
   11940:	ldr	r2, [sp, #28]
   11944:	ands	r3, r2, r3
   11948:	streq	r3, [r7, #48]	; 0x30
   1194c:	bne	12100 <__assert_fail@plt+0xafc>
   11950:	ldr	r0, [r4]
   11954:	ldr	r3, [sp, #20]
   11958:	mov	r2, #0
   1195c:	orr	r1, r3, #8
   11960:	add	r0, r5, r0, lsl #2
   11964:	bl	1c558 <__assert_fail@plt+0xaf54>
   11968:	mov	fp, #1
   1196c:	mov	r6, #0
   11970:	mov	r9, r0
   11974:	mov	r0, r9
   11978:	bl	145e4 <__assert_fail@plt+0x2fe0>
   1197c:	subs	r5, r0, #0
   11980:	beq	11a48 <__assert_fail@plt+0x444>
   11984:	ldrh	r2, [r5, #56]	; 0x38
   11988:	ldr	r4, [r5, #28]
   1198c:	sub	r3, r2, #1
   11990:	cmp	r3, #9
   11994:	ldrls	pc, [pc, r3, lsl #2]
   11998:	b	11c80 <__assert_fail@plt+0x67c>
   1199c:			; <UNDEFINED> instruction: 0x00011bbc
   119a0:	andeq	r1, r1, r8, ror #22
   119a4:	andeq	r1, r1, r0, lsl #25
   119a8:	andeq	r1, r1, ip, asr fp
   119ac:	andeq	r1, r1, r0, lsl #25
   119b0:	andeq	r1, r1, ip, asr #21
   119b4:	andeq	r1, r1, r0, lsr #21
   119b8:	andeq	r1, r1, r0, lsl #25
   119bc:	andeq	r1, r1, r0, lsl #25
   119c0:	andeq	r1, r1, r4, asr #19
   119c4:	ldr	r3, [r5, #48]	; 0x30
   119c8:	cmp	r3, #0
   119cc:	bne	119dc <__assert_fail@plt+0x3d8>
   119d0:	ldr	r3, [r5, #16]
   119d4:	cmp	r3, #0
   119d8:	beq	11ccc <__assert_fail@plt+0x6c8>
   119dc:	ldr	r1, [pc, #2640]	; 12434 <__assert_fail@plt+0xe30>
   119e0:	mov	r2, #5
   119e4:	mov	r0, r6
   119e8:	ldr	r8, [r5, #32]
   119ec:	bl	112f8 <dcgettext@plt>
   119f0:	mov	r1, r4
   119f4:	mov	sl, r0
   119f8:	mov	r0, #4
   119fc:	bl	1909c <__assert_fail@plt+0x7a98>
   11a00:	mov	r3, r0
   11a04:	mov	r2, sl
   11a08:	mov	r1, r8
   11a0c:	mov	r0, r6
   11a10:	bl	113ac <error@plt>
   11a14:	mov	r8, r6
   11a18:	ldrb	r3, [r7]
   11a1c:	cmp	r3, #0
   11a20:	bne	11a34 <__assert_fail@plt+0x430>
   11a24:	mov	r1, r5
   11a28:	mov	r2, #4
   11a2c:	mov	r0, r9
   11a30:	bl	14f3c <__assert_fail@plt+0x3938>
   11a34:	mov	r0, r9
   11a38:	bl	145e4 <__assert_fail@plt+0x2fe0>
   11a3c:	and	fp, fp, r8
   11a40:	subs	r5, r0, #0
   11a44:	bne	11984 <__assert_fail@plt+0x380>
   11a48:	bl	11484 <__errno_location@plt>
   11a4c:	ldr	r6, [r0]
   11a50:	mov	r4, r0
   11a54:	cmp	r6, #0
   11a58:	bne	11ee4 <__assert_fail@plt+0x8e0>
   11a5c:	mov	r0, r9
   11a60:	bl	1441c <__assert_fail@plt+0x2e18>
   11a64:	cmp	r0, #0
   11a68:	beq	11a94 <__assert_fail@plt+0x490>
   11a6c:	mov	r2, #5
   11a70:	ldr	r1, [pc, #2496]	; 12438 <__assert_fail@plt+0xe34>
   11a74:	mov	r0, #0
   11a78:	ldr	r4, [r4]
   11a7c:	bl	112f8 <dcgettext@plt>
   11a80:	mov	r1, r4
   11a84:	mov	fp, #0
   11a88:	mov	r2, r0
   11a8c:	mov	r0, #0
   11a90:	bl	113ac <error@plt>
   11a94:	eor	r0, fp, #1
   11a98:	add	sp, sp, #44	; 0x2c
   11a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aa0:	mov	r2, r4
   11aa4:	mov	r1, #3
   11aa8:	mov	r0, r6
   11aac:	ldr	r8, [r5, #32]
   11ab0:	bl	19b18 <__assert_fail@plt+0x8514>
   11ab4:	mov	r1, r8
   11ab8:	ldr	r2, [pc, #2428]	; 1243c <__assert_fail@plt+0xe38>
   11abc:	mov	r3, r0
   11ac0:	mov	r0, r6
   11ac4:	bl	113ac <error@plt>
   11ac8:	b	11a14 <__assert_fail@plt+0x410>
   11acc:	ldrb	r3, [r7]
   11ad0:	cmp	r3, #0
   11ad4:	beq	11ce4 <__assert_fail@plt+0x6e0>
   11ad8:	ldr	ip, [r7, #48]	; 0x30
   11adc:	cmp	ip, #0
   11ae0:	beq	11af8 <__assert_fail@plt+0x4f4>
   11ae4:	ldrd	r0, [r5, #160]	; 0xa0
   11ae8:	ldrd	r2, [ip]
   11aec:	cmp	r1, r3
   11af0:	cmpeq	r0, r2
   11af4:	beq	11f0c <__assert_fail@plt+0x908>
   11af8:	ldrb	r3, [r7, #1]
   11afc:	ldr	r8, [r5, #24]
   11b00:	cmp	r3, #0
   11b04:	bne	11c8c <__assert_fail@plt+0x688>
   11b08:	ldr	r4, [r7, #24]
   11b0c:	str	r6, [sp, #36]	; 0x24
   11b10:	cmp	r4, #0
   11b14:	ldr	sl, [r9, #32]
   11b18:	strne	r6, [sp, #16]
   11b1c:	beq	11cec <__assert_fail@plt+0x6e8>
   11b20:	ldrb	r3, [r7, #20]
   11b24:	mov	r0, sl
   11b28:	mov	r2, r4
   11b2c:	cmp	r3, #0
   11b30:	mov	r1, r8
   11b34:	beq	11cc0 <__assert_fail@plt+0x6bc>
   11b38:	bl	1af6c <__assert_fail@plt+0x9968>
   11b3c:	mov	r3, r0
   11b40:	cmp	r3, #0
   11b44:	bne	11dc4 <__assert_fail@plt+0x7c0>
   11b48:	ldr	r2, [r7, #24]
   11b4c:	cmp	r2, #0
   11b50:	beq	11e2c <__assert_fail@plt+0x828>
   11b54:	mov	r8, #1
   11b58:	b	11a18 <__assert_fail@plt+0x414>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #2264]	; 12440 <__assert_fail@plt+0xe3c>
   11b64:	b	119e4 <__assert_fail@plt+0x3e0>
   11b68:	mov	r1, r5
   11b6c:	mov	r0, r9
   11b70:	bl	1c5a0 <__assert_fail@plt+0xaf9c>
   11b74:	cmp	r0, #0
   11b78:	beq	11af8 <__assert_fail@plt+0x4f4>
   11b7c:	mov	r2, #5
   11b80:	ldr	r1, [pc, #2236]	; 12444 <__assert_fail@plt+0xe40>
   11b84:	mov	r0, r6
   11b88:	bl	112f8 <dcgettext@plt>
   11b8c:	mov	r2, r4
   11b90:	mov	r1, #3
   11b94:	mov	r8, r6
   11b98:	mov	r5, r0
   11b9c:	mov	r0, r6
   11ba0:	bl	19b18 <__assert_fail@plt+0x8514>
   11ba4:	mov	r2, r5
   11ba8:	mov	r1, r6
   11bac:	mov	r3, r0
   11bb0:	mov	r0, #0
   11bb4:	bl	113ac <error@plt>
   11bb8:	b	11a34 <__assert_fail@plt+0x430>
   11bbc:	ldrb	r8, [r7]
   11bc0:	cmp	r8, #0
   11bc4:	beq	11af8 <__assert_fail@plt+0x4f4>
   11bc8:	ldr	ip, [r7, #48]	; 0x30
   11bcc:	cmp	ip, #0
   11bd0:	beq	11a34 <__assert_fail@plt+0x430>
   11bd4:	ldrd	r0, [r5, #160]	; 0xa0
   11bd8:	ldrd	r2, [ip]
   11bdc:	cmp	r1, r3
   11be0:	cmpeq	r0, r2
   11be4:	bne	11a34 <__assert_fail@plt+0x430>
   11be8:	ldrd	r0, [r5, #64]	; 0x40
   11bec:	ldrd	r2, [ip, #8]
   11bf0:	cmp	r1, r3
   11bf4:	cmpeq	r0, r2
   11bf8:	bne	11a34 <__assert_fail@plt+0x430>
   11bfc:	ldr	r1, [pc, #2116]	; 12448 <__assert_fail@plt+0xe44>
   11c00:	mov	r0, r4
   11c04:	bl	11268 <strcmp@plt>
   11c08:	mov	r2, #5
   11c0c:	subs	r8, r0, #0
   11c10:	bne	1227c <__assert_fail@plt+0xc78>
   11c14:	ldr	r1, [pc, #2096]	; 1244c <__assert_fail@plt+0xe48>
   11c18:	bl	112f8 <dcgettext@plt>
   11c1c:	mov	r1, r4
   11c20:	mov	sl, r0
   11c24:	mov	r0, #4
   11c28:	bl	1909c <__assert_fail@plt+0x7a98>
   11c2c:	mov	r2, sl
   11c30:	mov	r1, r6
   11c34:	mov	r3, r0
   11c38:	mov	r0, r8
   11c3c:	bl	113ac <error@plt>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #2052]	; 12450 <__assert_fail@plt+0xe4c>
   11c48:	mov	r0, r6
   11c4c:	bl	112f8 <dcgettext@plt>
   11c50:	mov	r1, r6
   11c54:	mov	r8, r6
   11c58:	mov	r2, r0
   11c5c:	mov	r0, #0
   11c60:	bl	113ac <error@plt>
   11c64:	mov	r1, r5
   11c68:	mov	r2, #4
   11c6c:	mov	r0, r9
   11c70:	bl	14f3c <__assert_fail@plt+0x3938>
   11c74:	mov	r0, r9
   11c78:	bl	145e4 <__assert_fail@plt+0x2fe0>
   11c7c:	b	11a34 <__assert_fail@plt+0x430>
   11c80:	cmp	r2, #6
   11c84:	bne	11af8 <__assert_fail@plt+0x4f4>
   11c88:	b	11ad8 <__assert_fail@plt+0x4d4>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #1980]	; 12454 <__assert_fail@plt+0xe50>
   11c94:	mov	r0, r6
   11c98:	bl	112f8 <dcgettext@plt>
   11c9c:	mov	r1, r4
   11ca0:	mov	sl, r0
   11ca4:	mov	r0, #4
   11ca8:	bl	1909c <__assert_fail@plt+0x7a98>
   11cac:	mov	r1, sl
   11cb0:	mov	r2, r0
   11cb4:	mov	r0, #1
   11cb8:	bl	114b4 <__printf_chk@plt>
   11cbc:	b	11b08 <__assert_fail@plt+0x504>
   11cc0:	bl	1b134 <__assert_fail@plt+0x9b30>
   11cc4:	mov	r3, r0
   11cc8:	b	11b40 <__assert_fail@plt+0x53c>
   11ccc:	mov	r3, #1
   11cd0:	str	r3, [r5, #16]
   11cd4:	mov	r1, r5
   11cd8:	mov	r2, r3
   11cdc:	mov	r0, r9
   11ce0:	bl	14f3c <__assert_fail@plt+0x3938>
   11ce4:	mov	r8, #1
   11ce8:	b	11a34 <__assert_fail@plt+0x430>
   11cec:	ldrb	r3, [r7, #20]
   11cf0:	add	r2, sp, #36	; 0x24
   11cf4:	mov	r1, r8
   11cf8:	cmp	r3, #0
   11cfc:	mov	r0, sl
   11d00:	bne	11e50 <__assert_fail@plt+0x84c>
   11d04:	bl	1ada4 <__assert_fail@plt+0x97a0>
   11d08:	cmp	r0, #0
   11d0c:	blt	12020 <__assert_fail@plt+0xa1c>
   11d10:	ldr	r4, [sp, #36]	; 0x24
   11d14:	cmp	r4, #0
   11d18:	beq	12240 <__assert_fail@plt+0xc3c>
   11d1c:	mov	r0, r4
   11d20:	bl	112c8 <context_new@plt>
   11d24:	subs	r3, r0, #0
   11d28:	str	r3, [sp, #16]
   11d2c:	beq	1231c <__assert_fail@plt+0xd18>
   11d30:	ldr	r1, [r7, #4]
   11d34:	cmp	r1, #0
   11d38:	beq	1206c <__assert_fail@plt+0xa68>
   11d3c:	bl	11448 <context_user_set@plt>
   11d40:	cmp	r0, #0
   11d44:	bne	12144 <__assert_fail@plt+0xb40>
   11d48:	ldr	r1, [r7, #16]
   11d4c:	cmp	r1, #0
   11d50:	beq	11f8c <__assert_fail@plt+0x988>
   11d54:	ldr	r0, [sp, #16]
   11d58:	bl	11598 <context_range_set@plt>
   11d5c:	cmp	r0, #0
   11d60:	bne	12084 <__assert_fail@plt+0xa80>
   11d64:	ldr	r1, [r7, #8]
   11d68:	cmp	r1, #0
   11d6c:	ldrne	r0, [sp, #16]
   11d70:	beq	11d80 <__assert_fail@plt+0x77c>
   11d74:	bl	112ec <context_role_set@plt>
   11d78:	cmp	r0, #0
   11d7c:	bne	121f4 <__assert_fail@plt+0xbf0>
   11d80:	ldr	r1, [r7, #12]
   11d84:	cmp	r1, #0
   11d88:	ldrne	r0, [sp, #16]
   11d8c:	beq	11d9c <__assert_fail@plt+0x798>
   11d90:	bl	11304 <context_type_set@plt>
   11d94:	cmp	r0, #0
   11d98:	bne	11fc8 <__assert_fail@plt+0x9c4>
   11d9c:	ldr	r0, [sp, #16]
   11da0:	bl	115a4 <context_str@plt>
   11da4:	ldr	r1, [sp, #36]	; 0x24
   11da8:	cmp	r1, #0
   11dac:	mov	r4, r0
   11db0:	beq	11b20 <__assert_fail@plt+0x51c>
   11db4:	bl	11268 <strcmp@plt>
   11db8:	subs	r3, r0, #0
   11dbc:	beq	11b48 <__assert_fail@plt+0x544>
   11dc0:	b	11b20 <__assert_fail@plt+0x51c>
   11dc4:	bl	11484 <__errno_location@plt>
   11dc8:	mov	r2, #5
   11dcc:	ldr	r1, [pc, #1668]	; 12458 <__assert_fail@plt+0xe54>
   11dd0:	ldr	r3, [r0]
   11dd4:	mov	r0, r6
   11dd8:	str	r3, [sp, #20]
   11ddc:	bl	112f8 <dcgettext@plt>
   11de0:	mov	r2, r8
   11de4:	mov	r1, #4
   11de8:	mov	sl, r0
   11dec:	mov	r0, r6
   11df0:	bl	18cbc <__assert_fail@plt+0x76b8>
   11df4:	mov	r1, r4
   11df8:	mov	r8, r0
   11dfc:	mov	r0, #1
   11e00:	bl	1a858 <__assert_fail@plt+0x9254>
   11e04:	mov	r3, r8
   11e08:	ldr	r1, [sp, #20]
   11e0c:	mov	r2, sl
   11e10:	str	r0, [sp]
   11e14:	mov	r0, r6
   11e18:	bl	113ac <error@plt>
   11e1c:	ldr	r3, [r7, #24]
   11e20:	cmp	r3, #0
   11e24:	bne	11a14 <__assert_fail@plt+0x410>
   11e28:	mov	r3, #1
   11e2c:	ldr	r0, [sp, #16]
   11e30:	str	r3, [sp, #20]
   11e34:	bl	1140c <context_free@plt>
   11e38:	ldr	r0, [sp, #36]	; 0x24
   11e3c:	bl	11580 <freecon@plt>
   11e40:	ldr	r3, [sp, #20]
   11e44:	eor	r3, r3, #1
   11e48:	and	r8, r3, #1
   11e4c:	b	11a18 <__assert_fail@plt+0x414>
   11e50:	bl	1abdc <__assert_fail@plt+0x95d8>
   11e54:	b	11d08 <__assert_fail@plt+0x704>
   11e58:	cmp	r3, #1
   11e5c:	moveq	r2, #5
   11e60:	ldreq	r1, [pc, #1524]	; 1245c <__assert_fail@plt+0xe58>
   11e64:	beq	118a8 <__assert_fail@plt+0x2a4>
   11e68:	strb	r4, [r7, #20]
   11e6c:	b	118d8 <__assert_fail@plt+0x2d4>
   11e70:	ldr	r3, [sp, #16]
   11e74:	cmp	r3, #0
   11e78:	strne	r9, [r7, #24]
   11e7c:	bne	1193c <__assert_fail@plt+0x338>
   11e80:	ldr	r3, [r5, r2, lsl #2]
   11e84:	add	r2, r2, #1
   11e88:	str	r3, [r7, #24]
   11e8c:	str	r2, [r4]
   11e90:	bl	1125c <is_selinux_enabled@plt>
   11e94:	cmp	r0, #0
   11e98:	ble	1193c <__assert_fail@plt+0x338>
   11e9c:	ldr	r0, [r7, #24]
   11ea0:	bl	113b8 <security_check_context@plt>
   11ea4:	cmp	r0, #0
   11ea8:	bge	1193c <__assert_fail@plt+0x338>
   11eac:	bl	11484 <__errno_location@plt>
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #1444]	; 12460 <__assert_fail@plt+0xe5c>
   11eb8:	ldr	r4, [r0]
   11ebc:	ldr	r0, [sp, #16]
   11ec0:	bl	112f8 <dcgettext@plt>
   11ec4:	mov	r5, r0
   11ec8:	ldr	r0, [r7, #24]
   11ecc:	bl	1aa0c <__assert_fail@plt+0x9408>
   11ed0:	mov	r3, r0
   11ed4:	mov	r2, r5
   11ed8:	mov	r1, r4
   11edc:	mov	r0, #1
   11ee0:	bl	113ac <error@plt>
   11ee4:	mov	r2, #5
   11ee8:	ldr	r1, [pc, #1396]	; 12464 <__assert_fail@plt+0xe60>
   11eec:	mov	r0, r5
   11ef0:	bl	112f8 <dcgettext@plt>
   11ef4:	mov	r1, r6
   11ef8:	mov	fp, r5
   11efc:	mov	r2, r0
   11f00:	mov	r0, r5
   11f04:	bl	113ac <error@plt>
   11f08:	b	11a5c <__assert_fail@plt+0x458>
   11f0c:	ldrd	r0, [r5, #64]	; 0x40
   11f10:	ldrd	r2, [ip, #8]
   11f14:	cmp	r1, r3
   11f18:	cmpeq	r0, r2
   11f1c:	bne	11af8 <__assert_fail@plt+0x4f4>
   11f20:	ldr	r1, [pc, #1312]	; 12448 <__assert_fail@plt+0xe44>
   11f24:	mov	r0, r4
   11f28:	bl	11268 <strcmp@plt>
   11f2c:	mov	r2, #5
   11f30:	subs	r8, r0, #0
   11f34:	bne	122cc <__assert_fail@plt+0xcc8>
   11f38:	ldr	r1, [pc, #1292]	; 1244c <__assert_fail@plt+0xe48>
   11f3c:	bl	112f8 <dcgettext@plt>
   11f40:	mov	r1, r4
   11f44:	mov	sl, r0
   11f48:	mov	r0, #4
   11f4c:	bl	1909c <__assert_fail@plt+0x7a98>
   11f50:	mov	r2, sl
   11f54:	mov	r1, r6
   11f58:	mov	r3, r0
   11f5c:	mov	r0, r8
   11f60:	bl	113ac <error@plt>
   11f64:	mov	r2, #5
   11f68:	ldr	r1, [pc, #1248]	; 12450 <__assert_fail@plt+0xe4c>
   11f6c:	mov	r0, r6
   11f70:	bl	112f8 <dcgettext@plt>
   11f74:	mov	r1, r6
   11f78:	mov	r8, r6
   11f7c:	mov	r2, r0
   11f80:	mov	r0, #0
   11f84:	bl	113ac <error@plt>
   11f88:	b	11a18 <__assert_fail@plt+0x414>
   11f8c:	ldr	r1, [r7, #8]
   11f90:	cmp	r1, #0
   11f94:	beq	11d80 <__assert_fail@plt+0x77c>
   11f98:	ldr	r4, [sp, #16]
   11f9c:	mov	r0, r4
   11fa0:	bl	112ec <context_role_set@plt>
   11fa4:	cmp	r0, #0
   11fa8:	bne	121f4 <__assert_fail@plt+0xbf0>
   11fac:	ldr	r1, [r7, #12]
   11fb0:	cmp	r1, #0
   11fb4:	beq	11d9c <__assert_fail@plt+0x798>
   11fb8:	mov	r0, r4
   11fbc:	bl	11304 <context_type_set@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11d9c <__assert_fail@plt+0x798>
   11fc8:	bl	11484 <__errno_location@plt>
   11fcc:	mov	r2, #5
   11fd0:	ldr	r1, [pc, #1168]	; 12468 <__assert_fail@plt+0xe64>
   11fd4:	ldr	r8, [r0]
   11fd8:	mov	r0, r6
   11fdc:	bl	112f8 <dcgettext@plt>
   11fe0:	mov	r4, r0
   11fe4:	ldr	r0, [r7, #12]
   11fe8:	bl	1aa0c <__assert_fail@plt+0x9408>
   11fec:	mov	r1, r8
   11ff0:	mov	r2, r4
   11ff4:	ldr	r3, [pc, #1136]	; 1246c <__assert_fail@plt+0xe68>
   11ff8:	str	r0, [sp]
   11ffc:	mov	r0, r6
   12000:	bl	113ac <error@plt>
   12004:	bl	11484 <__errno_location@plt>
   12008:	mov	r4, r0
   1200c:	ldr	r0, [sp, #16]
   12010:	ldr	r8, [r4]
   12014:	bl	1140c <context_free@plt>
   12018:	str	r8, [r4]
   1201c:	b	11a14 <__assert_fail@plt+0x410>
   12020:	bl	11484 <__errno_location@plt>
   12024:	ldr	r4, [r0]
   12028:	cmp	r4, #61	; 0x3d
   1202c:	beq	11d10 <__assert_fail@plt+0x70c>
   12030:	mov	r2, #5
   12034:	ldr	r1, [pc, #1076]	; 12470 <__assert_fail@plt+0xe6c>
   12038:	mov	r0, r6
   1203c:	bl	112f8 <dcgettext@plt>
   12040:	mov	r1, r8
   12044:	mov	r8, r6
   12048:	mov	sl, r0
   1204c:	mov	r0, #4
   12050:	bl	1909c <__assert_fail@plt+0x7a98>
   12054:	mov	r2, sl
   12058:	mov	r1, r4
   1205c:	mov	r3, r0
   12060:	mov	r0, r6
   12064:	bl	113ac <error@plt>
   12068:	b	11a18 <__assert_fail@plt+0x414>
   1206c:	ldr	r1, [r7, #16]
   12070:	cmp	r1, #0
   12074:	beq	121d8 <__assert_fail@plt+0xbd4>
   12078:	bl	11598 <context_range_set@plt>
   1207c:	cmp	r0, #0
   12080:	beq	11d64 <__assert_fail@plt+0x760>
   12084:	bl	11484 <__errno_location@plt>
   12088:	mov	r2, #5
   1208c:	ldr	r1, [pc, #980]	; 12468 <__assert_fail@plt+0xe64>
   12090:	ldr	r8, [r0]
   12094:	mov	r0, r6
   12098:	bl	112f8 <dcgettext@plt>
   1209c:	mov	r4, r0
   120a0:	ldr	r0, [r7, #16]
   120a4:	bl	1aa0c <__assert_fail@plt+0x9408>
   120a8:	mov	r1, r8
   120ac:	mov	r2, r4
   120b0:	ldr	r3, [pc, #956]	; 12474 <__assert_fail@plt+0xe70>
   120b4:	str	r0, [sp]
   120b8:	mov	r0, r6
   120bc:	bl	113ac <error@plt>
   120c0:	ldr	r1, [r7, #8]
   120c4:	cmp	r1, #0
   120c8:	beq	121b8 <__assert_fail@plt+0xbb4>
   120cc:	ldr	r4, [sp, #16]
   120d0:	mov	r0, r4
   120d4:	bl	112ec <context_role_set@plt>
   120d8:	cmp	r0, #0
   120dc:	bne	121f4 <__assert_fail@plt+0xbf0>
   120e0:	ldr	r1, [r7, #12]
   120e4:	cmp	r1, #0
   120e8:	beq	12004 <__assert_fail@plt+0xa00>
   120ec:	mov	r0, r4
   120f0:	bl	11304 <context_type_set@plt>
   120f4:	cmp	r0, #0
   120f8:	beq	12004 <__assert_fail@plt+0xa00>
   120fc:	b	11fc8 <__assert_fail@plt+0x9c4>
   12100:	ldr	r0, [pc, #880]	; 12478 <__assert_fail@plt+0xe74>
   12104:	bl	1ab8c <__assert_fail@plt+0x9588>
   12108:	cmp	r0, #0
   1210c:	mov	r6, r0
   12110:	str	r0, [r7, #48]	; 0x30
   12114:	bne	11950 <__assert_fail@plt+0x34c>
   12118:	bl	11484 <__errno_location@plt>
   1211c:	ldr	r1, [pc, #856]	; 1247c <__assert_fail@plt+0xe78>
   12120:	mov	r2, #5
   12124:	ldr	r4, [r0]
   12128:	mov	r0, r6
   1212c:	bl	112f8 <dcgettext@plt>
   12130:	ldr	r1, [pc, #784]	; 12448 <__assert_fail@plt+0xe44>
   12134:	mov	r5, r0
   12138:	mov	r0, #4
   1213c:	bl	1909c <__assert_fail@plt+0x7a98>
   12140:	b	11ed0 <__assert_fail@plt+0x8cc>
   12144:	bl	11484 <__errno_location@plt>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #788]	; 12468 <__assert_fail@plt+0xe64>
   12150:	ldr	r8, [r0]
   12154:	mov	r0, r6
   12158:	bl	112f8 <dcgettext@plt>
   1215c:	mov	r4, r0
   12160:	ldr	r0, [r7, #4]
   12164:	bl	1aa0c <__assert_fail@plt+0x9408>
   12168:	mov	r1, r8
   1216c:	mov	r2, r4
   12170:	ldr	r3, [pc, #776]	; 12480 <__assert_fail@plt+0xe7c>
   12174:	str	r0, [sp]
   12178:	mov	r0, r6
   1217c:	bl	113ac <error@plt>
   12180:	ldr	r1, [r7, #16]
   12184:	cmp	r1, #0
   12188:	beq	1219c <__assert_fail@plt+0xb98>
   1218c:	ldr	r0, [sp, #16]
   12190:	bl	11598 <context_range_set@plt>
   12194:	cmp	r0, #0
   12198:	bne	12084 <__assert_fail@plt+0xa80>
   1219c:	ldr	r1, [r7, #8]
   121a0:	cmp	r1, #0
   121a4:	beq	121b8 <__assert_fail@plt+0xbb4>
   121a8:	ldr	r0, [sp, #16]
   121ac:	bl	112ec <context_role_set@plt>
   121b0:	cmp	r0, #0
   121b4:	bne	121f4 <__assert_fail@plt+0xbf0>
   121b8:	ldr	r1, [r7, #12]
   121bc:	cmp	r1, #0
   121c0:	beq	12004 <__assert_fail@plt+0xa00>
   121c4:	ldr	r0, [sp, #16]
   121c8:	bl	11304 <context_type_set@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	12004 <__assert_fail@plt+0xa00>
   121d4:	b	11fc8 <__assert_fail@plt+0x9c4>
   121d8:	ldr	r1, [r7, #8]
   121dc:	cmp	r1, #0
   121e0:	bne	11d74 <__assert_fail@plt+0x770>
   121e4:	ldr	r1, [r7, #12]
   121e8:	cmp	r1, #0
   121ec:	bne	11d90 <__assert_fail@plt+0x78c>
   121f0:	b	11d9c <__assert_fail@plt+0x798>
   121f4:	bl	11484 <__errno_location@plt>
   121f8:	mov	r2, #5
   121fc:	ldr	r1, [pc, #612]	; 12468 <__assert_fail@plt+0xe64>
   12200:	ldr	r8, [r0]
   12204:	mov	r0, r6
   12208:	bl	112f8 <dcgettext@plt>
   1220c:	mov	r4, r0
   12210:	ldr	r0, [r7, #8]
   12214:	bl	1aa0c <__assert_fail@plt+0x9408>
   12218:	mov	r1, r8
   1221c:	mov	r2, r4
   12220:	ldr	r3, [pc, #604]	; 12484 <__assert_fail@plt+0xe80>
   12224:	str	r0, [sp]
   12228:	mov	r0, r6
   1222c:	bl	113ac <error@plt>
   12230:	ldr	r1, [r7, #12]
   12234:	cmp	r1, #0
   12238:	bne	121c4 <__assert_fail@plt+0xbc0>
   1223c:	b	12004 <__assert_fail@plt+0xa00>
   12240:	mov	r2, #5
   12244:	ldr	r1, [pc, #572]	; 12488 <__assert_fail@plt+0xe84>
   12248:	mov	r0, r6
   1224c:	bl	112f8 <dcgettext@plt>
   12250:	mov	r1, r8
   12254:	mov	r8, r6
   12258:	mov	sl, r0
   1225c:	mov	r0, #4
   12260:	bl	1909c <__assert_fail@plt+0x7a98>
   12264:	mov	r2, sl
   12268:	mov	r1, r6
   1226c:	mov	r3, r0
   12270:	mov	r0, r4
   12274:	bl	113ac <error@plt>
   12278:	b	11a18 <__assert_fail@plt+0x414>
   1227c:	ldr	r1, [pc, #520]	; 1248c <__assert_fail@plt+0xe88>
   12280:	mov	r0, r6
   12284:	bl	112f8 <dcgettext@plt>
   12288:	mov	r2, r4
   1228c:	mov	r1, #4
   12290:	mov	r8, r0
   12294:	mov	r0, r6
   12298:	bl	18cbc <__assert_fail@plt+0x76b8>
   1229c:	ldr	r2, [pc, #420]	; 12448 <__assert_fail@plt+0xe44>
   122a0:	mov	r1, #4
   122a4:	mov	r4, r0
   122a8:	mov	r0, #1
   122ac:	bl	18cbc <__assert_fail@plt+0x76b8>
   122b0:	mov	r3, r4
   122b4:	mov	r2, r8
   122b8:	mov	r1, r6
   122bc:	str	r0, [sp]
   122c0:	mov	r0, #0
   122c4:	bl	113ac <error@plt>
   122c8:	b	11c40 <__assert_fail@plt+0x63c>
   122cc:	ldr	r1, [pc, #440]	; 1248c <__assert_fail@plt+0xe88>
   122d0:	mov	r0, r6
   122d4:	bl	112f8 <dcgettext@plt>
   122d8:	mov	r2, r4
   122dc:	mov	r1, #4
   122e0:	mov	r8, r0
   122e4:	mov	r0, r6
   122e8:	bl	18cbc <__assert_fail@plt+0x76b8>
   122ec:	ldr	r2, [pc, #340]	; 12448 <__assert_fail@plt+0xe44>
   122f0:	mov	r1, #4
   122f4:	mov	r4, r0
   122f8:	mov	r0, #1
   122fc:	bl	18cbc <__assert_fail@plt+0x76b8>
   12300:	mov	r3, r4
   12304:	mov	r2, r8
   12308:	mov	r1, r6
   1230c:	str	r0, [sp]
   12310:	mov	r0, #0
   12314:	bl	113ac <error@plt>
   12318:	b	11f64 <__assert_fail@plt+0x960>
   1231c:	bl	11484 <__errno_location@plt>
   12320:	mov	r2, #5
   12324:	ldr	r1, [pc, #356]	; 12490 <__assert_fail@plt+0xe8c>
   12328:	ldr	r8, [r0]
   1232c:	mov	r0, r6
   12330:	bl	112f8 <dcgettext@plt>
   12334:	mov	sl, r0
   12338:	mov	r0, r4
   1233c:	bl	1aa0c <__assert_fail@plt+0x9408>
   12340:	b	11a00 <__assert_fail@plt+0x3fc>
   12344:	cmp	r6, r2
   12348:	mov	r2, #5
   1234c:	bgt	123b8 <__assert_fail@plt+0xdb4>
   12350:	ldr	r1, [pc, #316]	; 12494 <__assert_fail@plt+0xe90>
   12354:	mov	r0, #0
   12358:	bl	112f8 <dcgettext@plt>
   1235c:	mov	r1, #0
   12360:	mov	r2, r0
   12364:	mov	r0, r1
   12368:	bl	113ac <error@plt>
   1236c:	b	11754 <__assert_fail@plt+0x150>
   12370:	mov	r2, #5
   12374:	ldr	r1, [pc, #284]	; 12498 <__assert_fail@plt+0xe94>
   12378:	mov	r0, r6
   1237c:	bl	112f8 <dcgettext@plt>
   12380:	mov	r1, r6
   12384:	mov	r2, r0
   12388:	mov	r0, r6
   1238c:	bl	113ac <error@plt>
   12390:	b	11754 <__assert_fail@plt+0x150>
   12394:	bl	11484 <__errno_location@plt>
   12398:	ldr	r1, [pc, #208]	; 12470 <__assert_fail@plt+0xe6c>
   1239c:	mov	r2, #5
   123a0:	ldr	r4, [r0]
   123a4:	mov	r0, r6
   123a8:	bl	112f8 <dcgettext@plt>
   123ac:	mov	r1, r9
   123b0:	mov	r5, r0
   123b4:	b	12138 <__assert_fail@plt+0xb34>
   123b8:	ldr	r1, [pc, #220]	; 1249c <__assert_fail@plt+0xe98>
   123bc:	mov	r0, #0
   123c0:	bl	112f8 <dcgettext@plt>
   123c4:	sub	r6, r6, #-1073741823	; 0xc0000001
   123c8:	mov	r4, r0
   123cc:	ldr	r0, [r5, r6, lsl #2]
   123d0:	bl	1aa0c <__assert_fail@plt+0x9408>
   123d4:	mov	r1, #0
   123d8:	mov	r2, r4
   123dc:	mov	r3, r0
   123e0:	mov	r0, r1
   123e4:	bl	113ac <error@plt>
   123e8:	b	11754 <__assert_fail@plt+0x150>
   123ec:	muleq	r1, r8, r1
   123f0:	strdeq	lr, [r1], -r0
   123f4:	andeq	lr, r1, r8, asr #4
   123f8:			; <UNDEFINED> instruction: 0x0001d9b4
   123fc:	muleq	r1, r8, r9
   12400:	andeq	lr, r1, r8, lsr #6
   12404:	ldrdeq	pc, [r2], -r0
   12408:	andeq	pc, r2, r8, asr #3
   1240c:	andeq	r0, r0, r1, lsl #2
   12410:	andeq	r0, r0, r2, lsl #2
   12414:	andeq	pc, r2, r4, ror #2
   12418:	andeq	pc, r2, r4, asr #3
   1241c:	andeq	lr, r1, r8, lsl #6
   12420:	andeq	lr, r1, r8, lsl r3
   12424:	muleq	r1, r4, sl
   12428:	andeq	lr, r1, r4, asr #4
   1242c:	andeq	lr, r1, r4, ror #6
   12430:			; <UNDEFINED> instruction: 0x0002f1b8
   12434:	andeq	lr, r1, r0, ror #9
   12438:	andeq	lr, r1, r8, asr #13
   1243c:	ldrdeq	lr, [r1], -r8
   12440:	strdeq	lr, [r1], -r4
   12444:	andeq	lr, r1, r0, lsl r5
   12448:	andeq	lr, r1, r8, asr #26
   1244c:	andeq	lr, r1, r0, asr #8
   12450:	andeq	lr, r1, ip, lsr #9
   12454:	andeq	lr, r1, ip, asr #11
   12458:	andeq	lr, r1, r0, lsr #13
   1245c:	andeq	lr, r1, r8, lsr r3
   12460:	andeq	lr, r1, ip, asr #7
   12464:	andeq	lr, r1, r0, lsr r4
   12468:	andeq	lr, r1, ip, asr #12
   1246c:	muleq	r1, r0, r6
   12470:	andeq	lr, r1, r4, lsr #7
   12474:	muleq	r1, r8, r6
   12478:	strdeq	pc, [r2], -r0
   1247c:	andeq	lr, r1, r0, lsl r4
   12480:	andeq	lr, r1, r0, lsl #13
   12484:	andeq	lr, r1, r8, lsl #13
   12488:	strdeq	lr, [r1], -r0
   1248c:	andeq	lr, r1, r0, ror r4
   12490:	andeq	lr, r1, r4, lsr #12
   12494:	andeq	lr, r1, r8, ror r3
   12498:	andeq	lr, r1, r0, ror #7
   1249c:	andeq	lr, r1, r8, lsl #7
   124a0:	mov	fp, #0
   124a4:	mov	lr, #0
   124a8:	pop	{r1}		; (ldr r1, [sp], #4)
   124ac:	mov	r2, sp
   124b0:	push	{r2}		; (str r2, [sp, #-4]!)
   124b4:	push	{r0}		; (str r0, [sp, #-4]!)
   124b8:	ldr	ip, [pc, #16]	; 124d0 <__assert_fail@plt+0xecc>
   124bc:	push	{ip}		; (str ip, [sp, #-4]!)
   124c0:	ldr	r0, [pc, #12]	; 124d4 <__assert_fail@plt+0xed0>
   124c4:	ldr	r3, [pc, #12]	; 124d8 <__assert_fail@plt+0xed4>
   124c8:	bl	113e8 <__libc_start_main@plt>
   124cc:	bl	115c8 <abort@plt>
   124d0:	andeq	sp, r1, r4, asr r9
   124d4:	andeq	r1, r1, r4, lsr r6
   124d8:	strdeq	sp, [r1], -r4
   124dc:	ldr	r3, [pc, #20]	; 124f8 <__assert_fail@plt+0xef4>
   124e0:	ldr	r2, [pc, #20]	; 124fc <__assert_fail@plt+0xef8>
   124e4:	add	r3, pc, r3
   124e8:	ldr	r2, [r3, r2]
   124ec:	cmp	r2, #0
   124f0:	bxeq	lr
   124f4:	b	11400 <__gmon_start__@plt>
   124f8:	andeq	ip, r1, r4, lsl fp
   124fc:	andeq	r0, r0, r8, asr r1
   12500:	ldr	r3, [pc, #28]	; 12524 <__assert_fail@plt+0xf20>
   12504:	ldr	r0, [pc, #28]	; 12528 <__assert_fail@plt+0xf24>
   12508:	sub	r3, r3, r0
   1250c:	cmp	r3, #6
   12510:	bxls	lr
   12514:	ldr	r3, [pc, #16]	; 1252c <__assert_fail@plt+0xf28>
   12518:	cmp	r3, #0
   1251c:	bxeq	lr
   12520:	bx	r3
   12524:	andeq	pc, r2, pc, lsr #3
   12528:	andeq	pc, r2, ip, lsr #3
   1252c:	andeq	r0, r0, r0
   12530:	ldr	r1, [pc, #36]	; 1255c <__assert_fail@plt+0xf58>
   12534:	ldr	r0, [pc, #36]	; 12560 <__assert_fail@plt+0xf5c>
   12538:	sub	r1, r1, r0
   1253c:	asr	r1, r1, #2
   12540:	add	r1, r1, r1, lsr #31
   12544:	asrs	r1, r1, #1
   12548:	bxeq	lr
   1254c:	ldr	r3, [pc, #16]	; 12564 <__assert_fail@plt+0xf60>
   12550:	cmp	r3, #0
   12554:	bxeq	lr
   12558:	bx	r3
   1255c:	andeq	pc, r2, ip, lsr #3
   12560:	andeq	pc, r2, ip, lsr #3
   12564:	andeq	r0, r0, r0
   12568:	push	{r4, lr}
   1256c:	ldr	r4, [pc, #24]	; 1258c <__assert_fail@plt+0xf88>
   12570:	ldrb	r3, [r4]
   12574:	cmp	r3, #0
   12578:	popne	{r4, pc}
   1257c:	bl	12500 <__assert_fail@plt+0xefc>
   12580:	mov	r3, #1
   12584:	strb	r3, [r4]
   12588:	pop	{r4, pc}
   1258c:	andeq	pc, r2, ip, asr #3
   12590:	ldr	r0, [pc, #40]	; 125c0 <__assert_fail@plt+0xfbc>
   12594:	ldr	r3, [r0]
   12598:	cmp	r3, #0
   1259c:	bne	125a4 <__assert_fail@plt+0xfa0>
   125a0:	b	12530 <__assert_fail@plt+0xf2c>
   125a4:	ldr	r3, [pc, #24]	; 125c4 <__assert_fail@plt+0xfc0>
   125a8:	cmp	r3, #0
   125ac:	beq	125a0 <__assert_fail@plt+0xf9c>
   125b0:	push	{r4, lr}
   125b4:	blx	r3
   125b8:	pop	{r4, lr}
   125bc:	b	12530 <__assert_fail@plt+0xf2c>
   125c0:	andeq	lr, r2, ip, lsl #30
   125c4:	andeq	r0, r0, r0
   125c8:	subs	r5, r0, #0
   125cc:	push	{r7, lr}
   125d0:	sub	sp, sp, #64	; 0x40
   125d4:	beq	12610 <__assert_fail@plt+0x100c>
   125d8:	ldr	r3, [pc, #812]	; 1290c <__assert_fail@plt+0x1308>
   125dc:	mov	r2, #5
   125e0:	ldr	r1, [pc, #808]	; 12910 <__assert_fail@plt+0x130c>
   125e4:	mov	r0, #0
   125e8:	ldr	r4, [r3]
   125ec:	bl	112f8 <dcgettext@plt>
   125f0:	ldr	r3, [pc, #796]	; 12914 <__assert_fail@plt+0x1310>
   125f4:	mov	r1, #1
   125f8:	ldr	r3, [r3]
   125fc:	mov	r2, r0
   12600:	mov	r0, r4
   12604:	bl	114cc <__fprintf_chk@plt>
   12608:	mov	r0, r5
   1260c:	bl	1143c <exit@plt>
   12610:	mov	r2, #5
   12614:	ldr	r1, [pc, #764]	; 12918 <__assert_fail@plt+0x1314>
   12618:	bl	112f8 <dcgettext@plt>
   1261c:	ldr	r3, [pc, #752]	; 12914 <__assert_fail@plt+0x1310>
   12620:	ldr	r6, [pc, #756]	; 1291c <__assert_fail@plt+0x1318>
   12624:	ldr	r4, [pc, #756]	; 12920 <__assert_fail@plt+0x131c>
   12628:	ldr	r3, [r3]
   1262c:	mov	r2, r3
   12630:	str	r3, [sp]
   12634:	mov	r1, r0
   12638:	mov	r0, #1
   1263c:	bl	114b4 <__printf_chk@plt>
   12640:	mov	r2, #5
   12644:	ldr	r1, [pc, #728]	; 12924 <__assert_fail@plt+0x1320>
   12648:	mov	r0, r5
   1264c:	bl	112f8 <dcgettext@plt>
   12650:	ldr	r1, [r6]
   12654:	bl	11244 <fputs_unlocked@plt>
   12658:	mov	r2, #5
   1265c:	ldr	r1, [pc, #708]	; 12928 <__assert_fail@plt+0x1324>
   12660:	mov	r0, r5
   12664:	bl	112f8 <dcgettext@plt>
   12668:	ldr	r1, [r6]
   1266c:	bl	11244 <fputs_unlocked@plt>
   12670:	mov	r2, #5
   12674:	ldr	r1, [pc, #688]	; 1292c <__assert_fail@plt+0x1328>
   12678:	mov	r0, r5
   1267c:	bl	112f8 <dcgettext@plt>
   12680:	ldr	r1, [r6]
   12684:	bl	11244 <fputs_unlocked@plt>
   12688:	mov	r2, #5
   1268c:	ldr	r1, [pc, #668]	; 12930 <__assert_fail@plt+0x132c>
   12690:	mov	r0, r5
   12694:	bl	112f8 <dcgettext@plt>
   12698:	ldr	r1, [r6]
   1269c:	bl	11244 <fputs_unlocked@plt>
   126a0:	mov	r2, #5
   126a4:	ldr	r1, [pc, #648]	; 12934 <__assert_fail@plt+0x1330>
   126a8:	mov	r0, r5
   126ac:	bl	112f8 <dcgettext@plt>
   126b0:	ldr	r1, [r6]
   126b4:	bl	11244 <fputs_unlocked@plt>
   126b8:	mov	r2, #5
   126bc:	ldr	r1, [pc, #628]	; 12938 <__assert_fail@plt+0x1334>
   126c0:	mov	r0, r5
   126c4:	bl	112f8 <dcgettext@plt>
   126c8:	ldr	r1, [r6]
   126cc:	bl	11244 <fputs_unlocked@plt>
   126d0:	mov	r2, #5
   126d4:	ldr	r1, [pc, #608]	; 1293c <__assert_fail@plt+0x1338>
   126d8:	mov	r0, r5
   126dc:	bl	112f8 <dcgettext@plt>
   126e0:	ldr	r1, [r6]
   126e4:	bl	11244 <fputs_unlocked@plt>
   126e8:	mov	r2, #5
   126ec:	ldr	r1, [pc, #588]	; 12940 <__assert_fail@plt+0x133c>
   126f0:	mov	r0, r5
   126f4:	bl	112f8 <dcgettext@plt>
   126f8:	ldr	r1, [r6]
   126fc:	bl	11244 <fputs_unlocked@plt>
   12700:	mov	r2, #5
   12704:	ldr	r1, [pc, #568]	; 12944 <__assert_fail@plt+0x1340>
   12708:	mov	r0, r5
   1270c:	bl	112f8 <dcgettext@plt>
   12710:	ldr	r1, [r6]
   12714:	bl	11244 <fputs_unlocked@plt>
   12718:	mov	r2, #5
   1271c:	ldr	r1, [pc, #548]	; 12948 <__assert_fail@plt+0x1344>
   12720:	mov	r0, r5
   12724:	bl	112f8 <dcgettext@plt>
   12728:	ldr	r1, [r6]
   1272c:	bl	11244 <fputs_unlocked@plt>
   12730:	mov	r2, #5
   12734:	ldr	r1, [pc, #528]	; 1294c <__assert_fail@plt+0x1348>
   12738:	mov	r0, r5
   1273c:	bl	112f8 <dcgettext@plt>
   12740:	ldr	r1, [r6]
   12744:	bl	11244 <fputs_unlocked@plt>
   12748:	ldm	r4!, {r0, r1, r2, r3}
   1274c:	add	lr, sp, #8
   12750:	stmia	lr!, {r0, r1, r2, r3}
   12754:	ldm	r4!, {r0, r1, r2, r3}
   12758:	ldr	ip, [sp, #8]
   1275c:	stmia	lr!, {r0, r1, r2, r3}
   12760:	cmp	ip, #0
   12764:	ldm	r4!, {r0, r1, r2, r3}
   12768:	stmia	lr!, {r0, r1, r2, r3}
   1276c:	ldm	r4, {r0, r1}
   12770:	addeq	r4, sp, #8
   12774:	stm	lr, {r0, r1}
   12778:	beq	127a8 <__assert_fail@plt+0x11a4>
   1277c:	ldr	r7, [pc, #460]	; 12950 <__assert_fail@plt+0x134c>
   12780:	add	r4, sp, #8
   12784:	b	12794 <__assert_fail@plt+0x1190>
   12788:	ldr	ip, [r4, #8]!
   1278c:	cmp	ip, #0
   12790:	beq	127a8 <__assert_fail@plt+0x11a4>
   12794:	mov	r1, ip
   12798:	mov	r0, r7
   1279c:	bl	11268 <strcmp@plt>
   127a0:	cmp	r0, #0
   127a4:	bne	12788 <__assert_fail@plt+0x1184>
   127a8:	ldr	r4, [r4, #4]
   127ac:	mov	r2, #5
   127b0:	cmp	r4, #0
   127b4:	ldr	r1, [pc, #408]	; 12954 <__assert_fail@plt+0x1350>
   127b8:	beq	12860 <__assert_fail@plt+0x125c>
   127bc:	mov	r0, #0
   127c0:	bl	112f8 <dcgettext@plt>
   127c4:	ldr	r3, [pc, #396]	; 12958 <__assert_fail@plt+0x1354>
   127c8:	ldr	r2, [pc, #396]	; 1295c <__assert_fail@plt+0x1358>
   127cc:	mov	r1, r0
   127d0:	mov	r0, #1
   127d4:	bl	114b4 <__printf_chk@plt>
   127d8:	mov	r1, #0
   127dc:	mov	r0, #5
   127e0:	bl	11520 <setlocale@plt>
   127e4:	cmp	r0, #0
   127e8:	ldreq	r7, [pc, #352]	; 12950 <__assert_fail@plt+0x134c>
   127ec:	beq	12808 <__assert_fail@plt+0x1204>
   127f0:	mov	r2, #3
   127f4:	ldr	r1, [pc, #356]	; 12960 <__assert_fail@plt+0x135c>
   127f8:	bl	115bc <strncmp@plt>
   127fc:	ldr	r7, [pc, #332]	; 12950 <__assert_fail@plt+0x134c>
   12800:	cmp	r0, #0
   12804:	bne	128f0 <__assert_fail@plt+0x12ec>
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #336]	; 12964 <__assert_fail@plt+0x1360>
   12810:	mov	r0, #0
   12814:	bl	112f8 <dcgettext@plt>
   12818:	ldr	r3, [pc, #304]	; 12950 <__assert_fail@plt+0x134c>
   1281c:	ldr	r2, [pc, #308]	; 12958 <__assert_fail@plt+0x1354>
   12820:	mov	r1, r0
   12824:	mov	r0, #1
   12828:	bl	114b4 <__printf_chk@plt>
   1282c:	mov	r2, #5
   12830:	ldr	r1, [pc, #304]	; 12968 <__assert_fail@plt+0x1364>
   12834:	mov	r0, #0
   12838:	bl	112f8 <dcgettext@plt>
   1283c:	ldr	r2, [pc, #296]	; 1296c <__assert_fail@plt+0x1368>
   12840:	cmp	r4, r7
   12844:	ldr	r3, [pc, #292]	; 12970 <__assert_fail@plt+0x136c>
   12848:	movne	r3, r2
   1284c:	mov	r1, r0
   12850:	mov	r2, r4
   12854:	mov	r0, #1
   12858:	bl	114b4 <__printf_chk@plt>
   1285c:	b	12608 <__assert_fail@plt+0x1004>
   12860:	mov	r0, r4
   12864:	bl	112f8 <dcgettext@plt>
   12868:	ldr	r3, [pc, #232]	; 12958 <__assert_fail@plt+0x1354>
   1286c:	ldr	r2, [pc, #232]	; 1295c <__assert_fail@plt+0x1358>
   12870:	mov	r1, r0
   12874:	mov	r0, #1
   12878:	bl	114b4 <__printf_chk@plt>
   1287c:	mov	r1, r4
   12880:	mov	r0, #5
   12884:	bl	11520 <setlocale@plt>
   12888:	cmp	r0, #0
   1288c:	beq	128a4 <__assert_fail@plt+0x12a0>
   12890:	mov	r2, #3
   12894:	ldr	r1, [pc, #196]	; 12960 <__assert_fail@plt+0x135c>
   12898:	bl	115bc <strncmp@plt>
   1289c:	cmp	r0, #0
   128a0:	bne	128e8 <__assert_fail@plt+0x12e4>
   128a4:	mov	r2, #5
   128a8:	ldr	r1, [pc, #180]	; 12964 <__assert_fail@plt+0x1360>
   128ac:	mov	r0, #0
   128b0:	bl	112f8 <dcgettext@plt>
   128b4:	ldr	r3, [pc, #148]	; 12950 <__assert_fail@plt+0x134c>
   128b8:	ldr	r2, [pc, #152]	; 12958 <__assert_fail@plt+0x1354>
   128bc:	mov	r4, r3
   128c0:	mov	r1, r0
   128c4:	mov	r0, #1
   128c8:	bl	114b4 <__printf_chk@plt>
   128cc:	ldr	r1, [pc, #148]	; 12968 <__assert_fail@plt+0x1364>
   128d0:	mov	r2, #5
   128d4:	mov	r0, #0
   128d8:	bl	112f8 <dcgettext@plt>
   128dc:	ldr	r3, [pc, #140]	; 12970 <__assert_fail@plt+0x136c>
   128e0:	mov	r1, r0
   128e4:	b	12850 <__assert_fail@plt+0x124c>
   128e8:	ldr	r7, [pc, #96]	; 12950 <__assert_fail@plt+0x134c>
   128ec:	mov	r4, r7
   128f0:	mov	r2, #5
   128f4:	ldr	r1, [pc, #120]	; 12974 <__assert_fail@plt+0x1370>
   128f8:	mov	r0, #0
   128fc:	bl	112f8 <dcgettext@plt>
   12900:	ldr	r1, [r6]
   12904:	bl	11244 <fputs_unlocked@plt>
   12908:	b	12808 <__assert_fail@plt+0x1204>
   1290c:	andeq	pc, r2, r0, asr #3
   12910:	muleq	r1, ip, sl
   12914:	andeq	pc, r2, ip, lsl #4
   12918:	andeq	sp, r1, r4, asr #21
   1291c:	andeq	pc, r2, r4, asr #3
   12920:	andeq	sp, r1, ip, ror r9
   12924:	andeq	sp, r1, r4, ror #22
   12928:	strdeq	sp, [r1], -r0
   1292c:	andeq	sp, r1, ip, lsr ip
   12930:	andeq	sp, r1, r4, lsr #26
   12934:	andeq	sp, r1, r0, asr #28
   12938:	andeq	sp, r1, r0, asr #29
   1293c:	andeq	sp, r1, r8, lsr pc
   12940:	andeq	sp, r1, r0, lsl #31
   12944:	andeq	sp, r1, r8, asr #31
   12948:	muleq	r1, ip, r1
   1294c:	andeq	lr, r1, ip, asr #3
   12950:	muleq	r1, r4, sl
   12954:	andeq	lr, r1, r4, lsl #4
   12958:	andeq	lr, r1, ip, lsl r2
   1295c:	andeq	lr, r1, r4, asr #4
   12960:	andeq	lr, r1, r4, asr r2
   12964:	andeq	lr, r1, r0, lsr #5
   12968:			; <UNDEFINED> instruction: 0x0001e2bc
   1296c:	muleq	r1, r8, r1
   12970:	andeq	lr, r1, r4, ror #13
   12974:	andeq	lr, r1, r8, asr r2
   12978:	ldr	r3, [pc, #4]	; 12984 <__assert_fail@plt+0x1380>
   1297c:	str	r0, [r3]
   12980:	bx	lr
   12984:	andeq	pc, r2, r4, lsl #4
   12988:	ldr	r3, [pc, #4]	; 12994 <__assert_fail@plt+0x1390>
   1298c:	strb	r0, [r3, #4]
   12990:	bx	lr
   12994:	andeq	pc, r2, r4, lsl #4
   12998:	ldr	r3, [pc, #192]	; 12a60 <__assert_fail@plt+0x145c>
   1299c:	push	{r4, r5, r6, lr}
   129a0:	sub	sp, sp, #8
   129a4:	ldr	r0, [r3]
   129a8:	bl	1c7b8 <__assert_fail@plt+0xb1b4>
   129ac:	cmp	r0, #0
   129b0:	beq	129d4 <__assert_fail@plt+0x13d0>
   129b4:	ldr	r4, [pc, #168]	; 12a64 <__assert_fail@plt+0x1460>
   129b8:	ldrb	r3, [r4, #4]
   129bc:	cmp	r3, #0
   129c0:	beq	129f0 <__assert_fail@plt+0x13ec>
   129c4:	bl	11484 <__errno_location@plt>
   129c8:	ldr	r3, [r0]
   129cc:	cmp	r3, #32
   129d0:	bne	129f0 <__assert_fail@plt+0x13ec>
   129d4:	ldr	r3, [pc, #140]	; 12a68 <__assert_fail@plt+0x1464>
   129d8:	ldr	r0, [r3]
   129dc:	bl	1c7b8 <__assert_fail@plt+0xb1b4>
   129e0:	cmp	r0, #0
   129e4:	bne	12a38 <__assert_fail@plt+0x1434>
   129e8:	add	sp, sp, #8
   129ec:	pop	{r4, r5, r6, pc}
   129f0:	mov	r2, #5
   129f4:	ldr	r1, [pc, #112]	; 12a6c <__assert_fail@plt+0x1468>
   129f8:	mov	r0, #0
   129fc:	bl	112f8 <dcgettext@plt>
   12a00:	ldr	r4, [r4]
   12a04:	cmp	r4, #0
   12a08:	mov	r5, r0
   12a0c:	beq	12a44 <__assert_fail@plt+0x1440>
   12a10:	bl	11484 <__errno_location@plt>
   12a14:	ldr	r6, [r0]
   12a18:	mov	r0, r4
   12a1c:	bl	197ac <__assert_fail@plt+0x81a8>
   12a20:	mov	r1, r6
   12a24:	str	r5, [sp]
   12a28:	ldr	r2, [pc, #64]	; 12a70 <__assert_fail@plt+0x146c>
   12a2c:	mov	r3, r0
   12a30:	mov	r0, #0
   12a34:	bl	113ac <error@plt>
   12a38:	ldr	r3, [pc, #52]	; 12a74 <__assert_fail@plt+0x1470>
   12a3c:	ldr	r0, [r3]
   12a40:	bl	112a4 <_exit@plt>
   12a44:	bl	11484 <__errno_location@plt>
   12a48:	mov	r3, r5
   12a4c:	ldr	r2, [pc, #36]	; 12a78 <__assert_fail@plt+0x1474>
   12a50:	ldr	r1, [r0]
   12a54:	mov	r0, r4
   12a58:	bl	113ac <error@plt>
   12a5c:	b	12a38 <__assert_fail@plt+0x1434>
   12a60:	andeq	pc, r2, r4, asr #3
   12a64:	andeq	pc, r2, r4, lsl #4
   12a68:	andeq	pc, r2, r0, asr #3
   12a6c:	andeq	lr, r1, r8, asr #15
   12a70:	ldrdeq	lr, [r1], -r4
   12a74:	andeq	pc, r2, r8, ror #2
   12a78:	ldrdeq	lr, [r1], -r8
   12a7c:	ldrd	r2, [r1, #8]
   12a80:	push	{r4, r5}
   12a84:	ldrd	r4, [r0, #8]
   12a88:	cmp	r5, r3
   12a8c:	cmpeq	r4, r2
   12a90:	movne	r0, #0
   12a94:	beq	12aa0 <__assert_fail@plt+0x149c>
   12a98:	pop	{r4, r5}
   12a9c:	bx	lr
   12aa0:	ldrd	r4, [r0]
   12aa4:	ldrd	r2, [r1]
   12aa8:	cmp	r5, r3
   12aac:	cmpeq	r4, r2
   12ab0:	moveq	r0, #1
   12ab4:	movne	r0, #0
   12ab8:	pop	{r4, r5}
   12abc:	bx	lr
   12ac0:	push	{r4, lr}
   12ac4:	mov	r2, r1
   12ac8:	mov	r3, #0
   12acc:	ldrd	r0, [r0, #8]
   12ad0:	bl	1d780 <__assert_fail@plt+0xc17c>
   12ad4:	mov	r0, r2
   12ad8:	pop	{r4, pc}
   12adc:	push	{r4, lr}
   12ae0:	mov	r2, r1
   12ae4:	mov	r3, #0
   12ae8:	ldrd	r0, [r0]
   12aec:	bl	1d780 <__assert_fail@plt+0xc17c>
   12af0:	mov	r0, r2
   12af4:	pop	{r4, pc}
   12af8:	push	{r4, r5}
   12afc:	ldrd	r2, [r1]
   12b00:	ldrd	r4, [r0]
   12b04:	cmp	r5, r3
   12b08:	cmpeq	r4, r2
   12b0c:	moveq	r0, #1
   12b10:	movne	r0, #0
   12b14:	pop	{r4, r5}
   12b18:	bx	lr
   12b1c:	ldr	r2, [r0]
   12b20:	ldr	r3, [r1]
   12b24:	ldrd	r0, [r2, #160]	; 0xa0
   12b28:	ldrd	r2, [r3, #160]	; 0xa0
   12b2c:	cmp	r1, r3
   12b30:	cmpeq	r0, r2
   12b34:	movhi	r0, #1
   12b38:	movls	r0, #0
   12b3c:	movcc	r3, #1
   12b40:	movcs	r3, #0
   12b44:	sub	r0, r0, r3
   12b48:	bx	lr
   12b4c:	push	{r4, r5, r6, r7, lr}
   12b50:	sub	sp, sp, #100	; 0x64
   12b54:	ldr	r4, [r0, #44]	; 0x2c
   12b58:	ldr	r3, [r4, #48]	; 0x30
   12b5c:	tst	r3, #512	; 0x200
   12b60:	beq	12bd4 <__assert_fail@plt+0x15d0>
   12b64:	ldr	r6, [r4, #52]	; 0x34
   12b68:	mov	r7, r1
   12b6c:	cmp	r6, #0
   12b70:	mov	r5, r0
   12b74:	beq	12ba0 <__assert_fail@plt+0x159c>
   12b78:	ldrd	r2, [r5, #64]	; 0x40
   12b7c:	add	r1, sp, #96	; 0x60
   12b80:	mov	r0, r6
   12b84:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12b88:	bl	15608 <__assert_fail@plt+0x4004>
   12b8c:	cmp	r0, #0
   12b90:	beq	12bcc <__assert_fail@plt+0x15c8>
   12b94:	ldr	r0, [r0, #8]
   12b98:	add	sp, sp, #100	; 0x64
   12b9c:	pop	{r4, r5, r6, r7, pc}
   12ba0:	ldr	r3, [pc, #168]	; 12c50 <__assert_fail@plt+0x164c>
   12ba4:	mov	r1, r6
   12ba8:	str	r3, [sp]
   12bac:	ldr	r2, [pc, #160]	; 12c54 <__assert_fail@plt+0x1650>
   12bb0:	ldr	r3, [pc, #160]	; 12c58 <__assert_fail@plt+0x1654>
   12bb4:	mov	r0, #13
   12bb8:	bl	158e8 <__assert_fail@plt+0x42e4>
   12bbc:	cmp	r0, #0
   12bc0:	mov	r6, r0
   12bc4:	str	r0, [r4, #52]	; 0x34
   12bc8:	bne	12b78 <__assert_fail@plt+0x1574>
   12bcc:	cmp	r7, #0
   12bd0:	bge	12be0 <__assert_fail@plt+0x15dc>
   12bd4:	mov	r0, #0
   12bd8:	add	sp, sp, #100	; 0x64
   12bdc:	pop	{r4, r5, r6, r7, pc}
   12be0:	mov	r0, r7
   12be4:	add	r1, sp, #8
   12be8:	bl	1122c <fstatfs64@plt>
   12bec:	cmp	r0, #0
   12bf0:	bne	12bd4 <__assert_fail@plt+0x15d0>
   12bf4:	cmp	r6, #0
   12bf8:	beq	12c44 <__assert_fail@plt+0x1640>
   12bfc:	mov	r0, #16
   12c00:	bl	1c620 <__assert_fail@plt+0xb01c>
   12c04:	subs	r4, r0, #0
   12c08:	beq	12c44 <__assert_fail@plt+0x1640>
   12c0c:	ldrd	r2, [r5, #64]	; 0x40
   12c10:	ldr	r1, [sp, #8]
   12c14:	mov	r0, r6
   12c18:	str	r1, [r4, #8]
   12c1c:	strd	r2, [r4]
   12c20:	mov	r1, r4
   12c24:	bl	16250 <__assert_fail@plt+0x4c4c>
   12c28:	cmp	r0, #0
   12c2c:	beq	12c3c <__assert_fail@plt+0x1638>
   12c30:	cmp	r4, r0
   12c34:	beq	12c44 <__assert_fail@plt+0x1640>
   12c38:	bl	115c8 <abort@plt>
   12c3c:	mov	r0, r4
   12c40:	bl	1cc30 <__assert_fail@plt+0xb62c>
   12c44:	ldr	r0, [sp, #8]
   12c48:	add	sp, sp, #100	; 0x64
   12c4c:	pop	{r4, r5, r6, r7, pc}
   12c50:	andeq	ip, r1, r0, lsr ip
   12c54:	ldrdeq	r2, [r1], -ip
   12c58:	strdeq	r2, [r1], -r8
   12c5c:	push	{r4, r5, r6, lr}
   12c60:	mov	r4, r2
   12c64:	ldr	r2, [r2, #48]	; 0x30
   12c68:	sub	sp, sp, #8
   12c6c:	cmp	r2, #0
   12c70:	add	r5, r4, #64	; 0x40
   12c74:	bne	12ccc <__assert_fail@plt+0x16c8>
   12c78:	tst	r1, #1
   12c7c:	beq	12ccc <__assert_fail@plt+0x16c8>
   12c80:	mov	r2, r5
   12c84:	ldr	r1, [r4, #24]
   12c88:	mov	r0, #3
   12c8c:	bl	115b0 <__xstat64@plt>
   12c90:	cmp	r0, #0
   12c94:	beq	12d08 <__assert_fail@plt+0x1704>
   12c98:	bl	11484 <__errno_location@plt>
   12c9c:	ldr	r3, [r0]
   12ca0:	mov	r6, r0
   12ca4:	cmp	r3, #2
   12ca8:	beq	12d80 <__assert_fail@plt+0x177c>
   12cac:	str	r3, [r4, #32]
   12cb0:	mov	r0, r5
   12cb4:	mov	r2, #104	; 0x68
   12cb8:	mov	r1, #0
   12cbc:	bl	114a8 <memset@plt>
   12cc0:	mov	r0, #10
   12cc4:	add	sp, sp, #8
   12cc8:	pop	{r4, r5, r6, pc}
   12ccc:	lsl	r1, r1, #30
   12cd0:	orrs	r3, r3, r1, lsr #31
   12cd4:	bne	12c80 <__assert_fail@plt+0x167c>
   12cd8:	mov	r3, #256	; 0x100
   12cdc:	ldr	r2, [r4, #24]
   12ce0:	mov	r1, r0
   12ce4:	str	r3, [sp]
   12ce8:	mov	r0, #3
   12cec:	mov	r3, r5
   12cf0:	bl	11340 <__fxstatat64@plt>
   12cf4:	cmp	r0, #0
   12cf8:	beq	12d08 <__assert_fail@plt+0x1704>
   12cfc:	bl	11484 <__errno_location@plt>
   12d00:	ldr	r3, [r0]
   12d04:	b	12cac <__assert_fail@plt+0x16a8>
   12d08:	ldr	r0, [r4, #80]	; 0x50
   12d0c:	and	r0, r0, #61440	; 0xf000
   12d10:	cmp	r0, #16384	; 0x4000
   12d14:	beq	12d38 <__assert_fail@plt+0x1734>
   12d18:	cmp	r0, #40960	; 0xa000
   12d1c:	moveq	r0, #12
   12d20:	beq	12cc4 <__assert_fail@plt+0x16c0>
   12d24:	cmp	r0, #32768	; 0x8000
   12d28:	movne	r0, #3
   12d2c:	moveq	r0, #8
   12d30:	add	sp, sp, #8
   12d34:	pop	{r4, r5, r6, pc}
   12d38:	ldrb	r3, [r4, #168]	; 0xa8
   12d3c:	cmp	r3, #46	; 0x2e
   12d40:	beq	12d4c <__assert_fail@plt+0x1748>
   12d44:	mov	r0, #1
   12d48:	b	12cc4 <__assert_fail@plt+0x16c0>
   12d4c:	ldrb	r3, [r4, #169]	; 0xa9
   12d50:	cmp	r3, #0
   12d54:	beq	12d6c <__assert_fail@plt+0x1768>
   12d58:	ldr	r3, [r4, #168]	; 0xa8
   12d5c:	bic	r3, r3, #-16777216	; 0xff000000
   12d60:	bic	r3, r3, #255	; 0xff
   12d64:	cmp	r3, #11776	; 0x2e00
   12d68:	bne	12d44 <__assert_fail@plt+0x1740>
   12d6c:	ldr	r0, [r4, #48]	; 0x30
   12d70:	cmp	r0, #0
   12d74:	movne	r0, #5
   12d78:	moveq	r0, #1
   12d7c:	b	12cc4 <__assert_fail@plt+0x16c0>
   12d80:	mov	r2, r5
   12d84:	ldr	r1, [r4, #24]
   12d88:	mov	r0, #3
   12d8c:	bl	115e0 <__lxstat64@plt>
   12d90:	cmp	r0, #0
   12d94:	streq	r0, [r6]
   12d98:	moveq	r0, #13
   12d9c:	beq	12cc4 <__assert_fail@plt+0x16c0>
   12da0:	ldr	r3, [r6]
   12da4:	b	12cac <__assert_fail@plt+0x16a8>
   12da8:	ldr	r3, [pc, #172]	; 12e5c <__assert_fail@plt+0x1858>
   12dac:	push	{r4, r5, lr}
   12db0:	and	r3, r3, r0
   12db4:	cmp	r3, #0
   12db8:	sub	sp, sp, #28
   12dbc:	bne	12e04 <__assert_fail@plt+0x1800>
   12dc0:	ldr	r3, [r2, #4]
   12dc4:	cmp	r3, #0
   12dc8:	beq	12dfc <__assert_fail@plt+0x17f8>
   12dcc:	ldr	r0, [r3, #48]	; 0x30
   12dd0:	cmp	r0, #0
   12dd4:	blt	12dfc <__assert_fail@plt+0x17f8>
   12dd8:	ldr	ip, [r1]
   12ddc:	ldrd	r0, [ip, #16]
   12de0:	orrs	r1, r0, r1
   12de4:	beq	12e58 <__assert_fail@plt+0x1854>
   12de8:	ldrd	r4, [ip]
   12dec:	ldrd	r0, [r2, #160]	; 0xa0
   12df0:	cmp	r5, r1
   12df4:	cmpeq	r4, r0
   12df8:	beq	12e34 <__assert_fail@plt+0x1830>
   12dfc:	add	sp, sp, #28
   12e00:	pop	{r4, r5, pc}
   12e04:	ldrd	r4, [r2, #64]	; 0x40
   12e08:	ldrd	r2, [r2, #160]	; 0xa0
   12e0c:	ldr	r0, [r1]
   12e10:	mov	r1, sp
   12e14:	strd	r4, [sp]
   12e18:	strd	r2, [sp, #8]
   12e1c:	bl	16514 <__assert_fail@plt+0x4f10>
   12e20:	cmp	r0, #0
   12e24:	beq	12e58 <__assert_fail@plt+0x1854>
   12e28:	bl	1cc30 <__assert_fail@plt+0xb62c>
   12e2c:	add	sp, sp, #28
   12e30:	pop	{r4, r5, pc}
   12e34:	ldrd	r0, [ip, #8]
   12e38:	ldrd	r4, [r2, #64]	; 0x40
   12e3c:	cmp	r1, r5
   12e40:	cmpeq	r0, r4
   12e44:	ldrdeq	r0, [r3, #64]	; 0x40
   12e48:	ldrdeq	r2, [r3, #160]	; 0xa0
   12e4c:	strdeq	r0, [ip, #8]
   12e50:	strdeq	r2, [ip]
   12e54:	b	12dfc <__assert_fail@plt+0x17f8>
   12e58:	bl	115c8 <abort@plt>
   12e5c:	andeq	r0, r0, r2, lsl #2
   12e60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e64:	subs	sl, r3, #0
   12e68:	sub	sp, sp, #104	; 0x68
   12e6c:	mov	r5, r0
   12e70:	mov	r6, r1
   12e74:	mov	r4, r2
   12e78:	ldr	r9, [r0, #48]	; 0x30
   12e7c:	beq	12ef8 <__assert_fail@plt+0x18f4>
   12e80:	ldr	r1, [pc, #612]	; 130ec <__assert_fail@plt+0x1ae8>
   12e84:	mov	r0, sl
   12e88:	bl	11268 <strcmp@plt>
   12e8c:	cmp	r0, #0
   12e90:	bne	12ef8 <__assert_fail@plt+0x18f4>
   12e94:	tst	r9, #4
   12e98:	bne	12f00 <__assert_fail@plt+0x18fc>
   12e9c:	cmp	r4, #0
   12ea0:	bge	130d8 <__assert_fail@plt+0x1ad4>
   12ea4:	tst	r9, #512	; 0x200
   12ea8:	beq	12fec <__assert_fail@plt+0x19e8>
   12eac:	add	r7, r5, #60	; 0x3c
   12eb0:	mov	r0, r7
   12eb4:	bl	16a20 <__assert_fail@plt+0x541c>
   12eb8:	cmp	r0, #0
   12ebc:	beq	13068 <__assert_fail@plt+0x1a64>
   12ec0:	ldr	r2, [pc, #552]	; 130f0 <__assert_fail@plt+0x1aec>
   12ec4:	tst	r9, #16
   12ec8:	ldr	r1, [pc, #548]	; 130f4 <__assert_fail@plt+0x1af0>
   12ecc:	mov	r8, #1
   12ed0:	movne	r1, r2
   12ed4:	mov	r2, r1
   12ed8:	ldr	r0, [r5, #32]
   12edc:	mov	r1, sl
   12ee0:	bl	16ab4 <__assert_fail@plt+0x54b0>
   12ee4:	mov	r7, r0
   12ee8:	cmp	r7, #0
   12eec:	blt	130ac <__assert_fail@plt+0x1aa8>
   12ef0:	ldr	r9, [r5, #48]	; 0x30
   12ef4:	b	12f34 <__assert_fail@plt+0x1930>
   12ef8:	ands	r8, r9, #4
   12efc:	beq	12f28 <__assert_fail@plt+0x1924>
   12f00:	mvn	r3, r4
   12f04:	lsr	r3, r3, #31
   12f08:	ands	r9, r3, r9, lsr #9
   12f0c:	beq	12f1c <__assert_fail@plt+0x1918>
   12f10:	mov	r0, r4
   12f14:	bl	115d4 <close@plt>
   12f18:	mov	r9, #0
   12f1c:	mov	r0, r9
   12f20:	add	sp, sp, #104	; 0x68
   12f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f28:	cmp	r4, #0
   12f2c:	movge	r7, r4
   12f30:	blt	130b8 <__assert_fail@plt+0x1ab4>
   12f34:	tst	r9, #2
   12f38:	bne	12f58 <__assert_fail@plt+0x1954>
   12f3c:	cmp	sl, #0
   12f40:	beq	12fb0 <__assert_fail@plt+0x19ac>
   12f44:	mov	r0, sl
   12f48:	ldr	r1, [pc, #412]	; 130ec <__assert_fail@plt+0x1ae8>
   12f4c:	bl	11268 <strcmp@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	12fb0 <__assert_fail@plt+0x19ac>
   12f58:	mov	r2, sp
   12f5c:	mov	r1, r7
   12f60:	mov	r0, #3
   12f64:	bl	11358 <__fxstat64@plt>
   12f68:	cmp	r0, #0
   12f6c:	beq	12fc8 <__assert_fail@plt+0x19c4>
   12f70:	mvn	r9, #0
   12f74:	cmp	r4, #0
   12f78:	bge	12f1c <__assert_fail@plt+0x1918>
   12f7c:	bl	11484 <__errno_location@plt>
   12f80:	mov	r4, r0
   12f84:	mov	r0, r7
   12f88:	ldr	r5, [r4]
   12f8c:	bl	115d4 <close@plt>
   12f90:	str	r5, [r4]
   12f94:	b	12f1c <__assert_fail@plt+0x1918>
   12f98:	ldrd	r0, [r6, #160]	; 0xa0
   12f9c:	ldrd	r2, [sp, #96]	; 0x60
   12fa0:	cmp	r1, r3
   12fa4:	cmpeq	r0, r2
   12fa8:	bne	12fdc <__assert_fail@plt+0x19d8>
   12fac:	ldr	r9, [r5, #48]	; 0x30
   12fb0:	tst	r9, #512	; 0x200
   12fb4:	bne	13010 <__assert_fail@plt+0x1a0c>
   12fb8:	mov	r0, r7
   12fbc:	bl	11568 <fchdir@plt>
   12fc0:	mov	r9, r0
   12fc4:	b	12f74 <__assert_fail@plt+0x1970>
   12fc8:	ldrd	r0, [r6, #64]	; 0x40
   12fcc:	ldrd	r2, [sp]
   12fd0:	cmp	r1, r3
   12fd4:	cmpeq	r0, r2
   12fd8:	beq	12f98 <__assert_fail@plt+0x1994>
   12fdc:	bl	11484 <__errno_location@plt>
   12fe0:	mov	r3, #2
   12fe4:	str	r3, [r0]
   12fe8:	b	12f70 <__assert_fail@plt+0x196c>
   12fec:	ldr	r2, [pc, #252]	; 130f0 <__assert_fail@plt+0x1aec>
   12ff0:	tst	r9, #16
   12ff4:	ldr	r1, [pc, #248]	; 130f4 <__assert_fail@plt+0x1af0>
   12ff8:	mov	r8, #1
   12ffc:	movne	r1, r2
   13000:	mov	r0, sl
   13004:	bl	1cb98 <__assert_fail@plt+0xb594>
   13008:	mov	r7, r0
   1300c:	b	12ee8 <__assert_fail@plt+0x18e4>
   13010:	ldr	r1, [r5, #32]
   13014:	cmn	r1, #100	; 0x64
   13018:	sub	r3, r7, r1
   1301c:	clz	r3, r3
   13020:	lsr	r3, r3, #5
   13024:	moveq	r3, #0
   13028:	cmp	r3, #0
   1302c:	bne	130b4 <__assert_fail@plt+0x1ab0>
   13030:	cmp	r8, #0
   13034:	beq	13098 <__assert_fail@plt+0x1a94>
   13038:	lsr	r3, r9, #2
   1303c:	eor	r3, r3, #1
   13040:	cmp	r1, #0
   13044:	movlt	r3, #0
   13048:	andge	r3, r3, #1
   1304c:	cmp	r3, #0
   13050:	beq	1305c <__assert_fail@plt+0x1a58>
   13054:	mov	r0, r1
   13058:	bl	115d4 <close@plt>
   1305c:	str	r7, [r5, #32]
   13060:	mov	r9, #0
   13064:	b	12f1c <__assert_fail@plt+0x1918>
   13068:	mov	r0, r7
   1306c:	bl	16a6c <__assert_fail@plt+0x5468>
   13070:	ldr	r9, [r5, #48]	; 0x30
   13074:	subs	r7, r0, #0
   13078:	movlt	r8, #1
   1307c:	andlt	r3, r9, #512	; 0x200
   13080:	blt	130bc <__assert_fail@plt+0x1ab8>
   13084:	tst	r9, #2
   13088:	mov	r4, r7
   1308c:	mov	r8, #1
   13090:	beq	12fb0 <__assert_fail@plt+0x19ac>
   13094:	b	12f58 <__assert_fail@plt+0x1954>
   13098:	add	r0, r5, #60	; 0x3c
   1309c:	bl	16a28 <__assert_fail@plt+0x5424>
   130a0:	cmp	r0, #0
   130a4:	bge	13058 <__assert_fail@plt+0x1a54>
   130a8:	b	1305c <__assert_fail@plt+0x1a58>
   130ac:	mvn	r9, #0
   130b0:	b	12f1c <__assert_fail@plt+0x1918>
   130b4:	bl	115c8 <abort@plt>
   130b8:	and	r3, r9, #512	; 0x200
   130bc:	ldr	r2, [pc, #48]	; 130f4 <__assert_fail@plt+0x1af0>
   130c0:	tst	r9, #16
   130c4:	ldr	r1, [pc, #36]	; 130f0 <__assert_fail@plt+0x1aec>
   130c8:	moveq	r1, r2
   130cc:	cmp	r3, #0
   130d0:	bne	12ed4 <__assert_fail@plt+0x18d0>
   130d4:	b	13000 <__assert_fail@plt+0x19fc>
   130d8:	tst	r9, #2
   130dc:	mov	r7, r4
   130e0:	mov	r8, #1
   130e4:	beq	12f44 <__assert_fail@plt+0x1940>
   130e8:	b	12f58 <__assert_fail@plt+0x1954>
   130ec:	andeq	lr, r1, ip, lsl #16
   130f0:	andeq	ip, r8, r0, lsl #18
   130f4:	andeq	r4, r8, r0, lsl #18
   130f8:	ldr	r3, [r0]
   130fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13100:	sub	sp, sp, #68	; 0x44
   13104:	mov	r6, r0
   13108:	str	r3, [sp, #8]
   1310c:	ldr	r3, [r3, #12]
   13110:	str	r1, [sp, #40]	; 0x28
   13114:	cmp	r3, #0
   13118:	str	r3, [sp, #44]	; 0x2c
   1311c:	beq	13704 <__assert_fail@plt+0x2100>
   13120:	mov	r0, r3
   13124:	bl	1155c <dirfd@plt>
   13128:	cmp	r0, #0
   1312c:	str	r0, [sp, #60]	; 0x3c
   13130:	blt	13b40 <__assert_fail@plt+0x253c>
   13134:	ldr	r3, [r6, #44]	; 0x2c
   13138:	cmp	r3, #0
   1313c:	beq	13dc4 <__assert_fail@plt+0x27c0>
   13140:	mvn	r3, #0
   13144:	str	r3, [sp, #24]
   13148:	ldr	r0, [r6, #48]	; 0x30
   1314c:	ldr	r2, [sp, #8]
   13150:	mov	r3, #1
   13154:	str	r3, [sp, #52]	; 0x34
   13158:	ldr	r3, [r2, #40]	; 0x28
   1315c:	ldr	r1, [r2, #28]
   13160:	sub	r2, r3, #1
   13164:	ldrb	r1, [r1, r2]
   13168:	cmp	r1, #47	; 0x2f
   1316c:	moveq	r3, r2
   13170:	ands	r0, r0, #4
   13174:	movne	r0, #47	; 0x2f
   13178:	ldrne	r2, [r6, #24]
   1317c:	streq	r0, [sp, #32]
   13180:	addne	r1, r2, r3
   13184:	strbne	r0, [r2, r3]
   13188:	addne	r2, r1, #1
   1318c:	strne	r2, [sp, #32]
   13190:	ldr	r2, [sp, #8]
   13194:	add	r3, r3, #1
   13198:	ldr	r1, [r6, #36]	; 0x24
   1319c:	ldr	r2, [r2, #48]	; 0x30
   131a0:	mov	r0, r3
   131a4:	str	r3, [sp, #12]
   131a8:	sub	r1, r1, r0
   131ac:	mov	r3, #0
   131b0:	add	r2, r2, #1
   131b4:	mov	r7, r3
   131b8:	str	r3, [sp, #48]	; 0x30
   131bc:	str	r1, [sp, #20]
   131c0:	str	r2, [sp, #28]
   131c4:	str	r3, [sp, #36]	; 0x24
   131c8:	str	r3, [sp]
   131cc:	mov	sl, r3
   131d0:	str	r3, [sp, #16]
   131d4:	b	13258 <__assert_fail@plt+0x1c54>
   131d8:	tst	r3, #251	; 0xfb
   131dc:	beq	1336c <__assert_fail@plt+0x1d68>
   131e0:	lsr	r2, r1, #4
   131e4:	cmp	r3, #10
   131e8:	orrne	r2, r2, #1
   131ec:	tst	r2, #1
   131f0:	beq	13830 <__assert_fail@plt+0x222c>
   131f4:	sub	r3, r3, #1
   131f8:	mov	r2, #11
   131fc:	cmp	r3, #11
   13200:	strh	r2, [r4, #56]	; 0x38
   13204:	bhi	13de0 <__assert_fail@plt+0x27dc>
   13208:	ldr	r2, [pc, #3040]	; 13df0 <__assert_fail@plt+0x27ec>
   1320c:	ldr	r1, [r2, r3, lsl #2]
   13210:	mov	r2, #1
   13214:	mov	r3, #0
   13218:	str	r1, [r4, #80]	; 0x50
   1321c:	strd	r2, [r4, #112]	; 0x70
   13220:	ldr	r3, [sp, #16]
   13224:	str	r7, [r4, #8]
   13228:	cmp	r3, #0
   1322c:	streq	r4, [sp, #16]
   13230:	ldrne	r3, [sp]
   13234:	strne	r4, [r3, #8]
   13238:	ldr	r3, [pc, #2996]	; 13df4 <__assert_fail@plt+0x27f0>
   1323c:	cmp	sl, r3
   13240:	beq	134bc <__assert_fail@plt+0x1eb8>
   13244:	ldr	r3, [sp, #24]
   13248:	add	sl, sl, #1
   1324c:	cmp	r3, sl
   13250:	bls	135d4 <__assert_fail@plt+0x1fd0>
   13254:	str	r4, [sp]
   13258:	ldr	r3, [sp, #8]
   1325c:	ldr	r4, [r3, #12]
   13260:	cmp	r4, #0
   13264:	beq	135d4 <__assert_fail@plt+0x1fd0>
   13268:	bl	11484 <__errno_location@plt>
   1326c:	mov	fp, r0
   13270:	mov	r0, r4
   13274:	str	r7, [fp]
   13278:	bl	11544 <readdir64@plt>
   1327c:	subs	r8, r0, #0
   13280:	beq	139d0 <__assert_fail@plt+0x23cc>
   13284:	ldr	r3, [r6, #48]	; 0x30
   13288:	tst	r3, #32
   1328c:	bne	1329c <__assert_fail@plt+0x1c98>
   13290:	ldrb	r3, [r8, #19]
   13294:	cmp	r3, #46	; 0x2e
   13298:	beq	13520 <__assert_fail@plt+0x1f1c>
   1329c:	add	r1, r8, #19
   132a0:	mov	r0, r1
   132a4:	str	r1, [sp, #4]
   132a8:	bl	11460 <strlen@plt>
   132ac:	mov	r5, r0
   132b0:	add	r0, r0, #176	; 0xb0
   132b4:	bic	r0, r0, #7
   132b8:	bl	1c620 <__assert_fail@plt+0xb01c>
   132bc:	subs	r4, r0, #0
   132c0:	beq	135c8 <__assert_fail@plt+0x1fc4>
   132c4:	add	r9, r4, #168	; 0xa8
   132c8:	ldr	r1, [sp, #4]
   132cc:	mov	r2, r5
   132d0:	mov	r0, r9
   132d4:	bl	112b0 <memcpy@plt>
   132d8:	ldr	r3, [sp, #20]
   132dc:	add	r1, r4, r5
   132e0:	ldr	r2, [r6, #24]
   132e4:	mov	r0, #196608	; 0x30000
   132e8:	cmp	r3, r5
   132ec:	strb	r7, [r1, #168]	; 0xa8
   132f0:	str	r5, [r4, #52]	; 0x34
   132f4:	str	r6, [r4, #44]	; 0x2c
   132f8:	str	r7, [r4, #32]
   132fc:	str	r7, [r4, #12]
   13300:	str	r7, [r4, #16]
   13304:	str	r7, [r4, #20]
   13308:	str	r2, [r4, #28]
   1330c:	str	r0, [r4, #58]	; 0x3a
   13310:	bls	133a4 <__assert_fail@plt+0x1da0>
   13314:	ldr	r3, [sp, #12]
   13318:	adds	r5, r3, r5
   1331c:	bcs	13424 <__assert_fail@plt+0x1e20>
   13320:	ldrd	r2, [r8]
   13324:	ldr	r1, [r6, #48]	; 0x30
   13328:	ldr	r0, [sp, #28]
   1332c:	strd	r2, [r4, #160]	; 0xa0
   13330:	ldr	r3, [r6]
   13334:	tst	r1, #4
   13338:	str	r0, [r4, #48]	; 0x30
   1333c:	str	r5, [r4, #40]	; 0x28
   13340:	str	r3, [r4, #4]
   13344:	streq	r9, [r4, #24]
   13348:	bne	13498 <__assert_fail@plt+0x1e94>
   1334c:	ldr	r3, [r6, #44]	; 0x2c
   13350:	cmp	r3, #0
   13354:	beq	13360 <__assert_fail@plt+0x1d5c>
   13358:	tst	r1, #1024	; 0x400
   1335c:	beq	13508 <__assert_fail@plt+0x1f04>
   13360:	tst	r1, #8
   13364:	ldrb	r3, [r8, #18]
   13368:	bne	131d8 <__assert_fail@plt+0x1bd4>
   1336c:	sub	r3, r3, #1
   13370:	cmp	r3, #11
   13374:	mov	r2, #11
   13378:	strh	r2, [r4, #56]	; 0x38
   1337c:	strhi	r7, [r4, #80]	; 0x50
   13380:	movhi	r2, #2
   13384:	movhi	r3, #0
   13388:	bhi	1321c <__assert_fail@plt+0x1c18>
   1338c:	ldr	r2, [pc, #2652]	; 13df0 <__assert_fail@plt+0x27ec>
   13390:	ldr	r1, [r2, r3, lsl #2]
   13394:	mov	r2, #2
   13398:	mov	r3, #0
   1339c:	str	r1, [r4, #80]	; 0x50
   133a0:	b	1321c <__assert_fail@plt+0x1c18>
   133a4:	ldr	r0, [r6, #36]	; 0x24
   133a8:	ldr	r3, [sp, #12]
   133ac:	add	r1, r0, #256	; 0x100
   133b0:	add	r1, r1, #1
   133b4:	add	r1, r1, r3
   133b8:	add	r1, r1, r5
   133bc:	cmp	r0, r1
   133c0:	bhi	13540 <__assert_fail@plt+0x1f3c>
   133c4:	mov	r0, r2
   133c8:	str	r1, [r6, #36]	; 0x24
   133cc:	str	r2, [sp, #4]
   133d0:	bl	1c64c <__assert_fail@plt+0xb048>
   133d4:	ldr	r2, [sp, #4]
   133d8:	cmp	r0, #0
   133dc:	beq	13bbc <__assert_fail@plt+0x25b8>
   133e0:	cmp	r2, r0
   133e4:	str	r0, [r6, #24]
   133e8:	beq	13408 <__assert_fail@plt+0x1e04>
   133ec:	ldr	r2, [r6, #48]	; 0x30
   133f0:	tst	r2, #4
   133f4:	ldrne	r3, [sp, #12]
   133f8:	addne	r3, r0, r3
   133fc:	strne	r3, [sp, #32]
   13400:	mov	r3, #1
   13404:	str	r3, [sp, #36]	; 0x24
   13408:	ldr	r2, [r6, #36]	; 0x24
   1340c:	ldr	r3, [sp, #12]
   13410:	sub	r3, r2, r3
   13414:	str	r3, [sp, #20]
   13418:	ldr	r3, [sp, #12]
   1341c:	adds	r5, r3, r5
   13420:	bcc	13320 <__assert_fail@plt+0x1d1c>
   13424:	ldr	r8, [sp, #16]
   13428:	mov	r0, r4
   1342c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13430:	cmp	r8, #0
   13434:	beq	1345c <__assert_fail@plt+0x1e58>
   13438:	ldr	r3, [r8, #12]
   1343c:	ldr	r4, [r8, #8]
   13440:	subs	r0, r3, #0
   13444:	beq	1344c <__assert_fail@plt+0x1e48>
   13448:	bl	115ec <closedir@plt>
   1344c:	mov	r0, r8
   13450:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13454:	subs	r8, r4, #0
   13458:	bne	13438 <__assert_fail@plt+0x1e34>
   1345c:	ldr	r4, [sp, #8]
   13460:	mov	r8, #0
   13464:	ldr	r0, [r4, #12]
   13468:	bl	115ec <closedir@plt>
   1346c:	ldr	r3, [r6, #48]	; 0x30
   13470:	mov	r1, #7
   13474:	orr	r3, r3, #8192	; 0x2000
   13478:	mov	r2, #36	; 0x24
   1347c:	str	r8, [r4, #12]
   13480:	strh	r1, [r4, #56]	; 0x38
   13484:	str	r3, [r6, #48]	; 0x30
   13488:	str	r2, [fp]
   1348c:	mov	r0, r8
   13490:	add	sp, sp, #68	; 0x44
   13494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13498:	ldr	r0, [r4, #28]
   1349c:	ldr	r2, [r4, #52]	; 0x34
   134a0:	mov	r1, r9
   134a4:	str	r0, [r4, #24]
   134a8:	add	r2, r2, #1
   134ac:	ldr	r0, [sp, #32]
   134b0:	bl	1128c <memmove@plt>
   134b4:	ldr	r1, [r6, #48]	; 0x30
   134b8:	b	1334c <__assert_fail@plt+0x1d48>
   134bc:	ldr	r3, [r6, #44]	; 0x2c
   134c0:	cmp	r3, #0
   134c4:	bne	13244 <__assert_fail@plt+0x1c40>
   134c8:	ldr	r1, [sp, #60]	; 0x3c
   134cc:	ldr	r0, [sp, #8]
   134d0:	bl	12b4c <__assert_fail@plt+0x1548>
   134d4:	ldr	r3, [pc, #2332]	; 13df8 <__assert_fail@plt+0x27f4>
   134d8:	cmp	r0, r3
   134dc:	beq	13500 <__assert_fail@plt+0x1efc>
   134e0:	ldr	r3, [pc, #2324]	; 13dfc <__assert_fail@plt+0x27f8>
   134e4:	cmp	r0, r3
   134e8:	beq	13500 <__assert_fail@plt+0x1efc>
   134ec:	ldr	r3, [pc, #2316]	; 13e00 <__assert_fail@plt+0x27fc>
   134f0:	cmp	r0, r3
   134f4:	movne	r3, #1
   134f8:	strne	r3, [sp, #48]	; 0x30
   134fc:	bne	13244 <__assert_fail@plt+0x1c40>
   13500:	str	r7, [sp, #48]	; 0x30
   13504:	b	13244 <__assert_fail@plt+0x1c40>
   13508:	mov	r3, r7
   1350c:	mov	r2, r4
   13510:	ldr	r0, [r6, #32]
   13514:	bl	12c5c <__assert_fail@plt+0x1658>
   13518:	strh	r0, [r4, #56]	; 0x38
   1351c:	b	13220 <__assert_fail@plt+0x1c1c>
   13520:	ldrb	r3, [r8, #20]
   13524:	cmp	r3, #0
   13528:	beq	13538 <__assert_fail@plt+0x1f34>
   1352c:	ldrh	r3, [r8, #20]
   13530:	cmp	r3, #46	; 0x2e
   13534:	bne	1329c <__assert_fail@plt+0x1c98>
   13538:	ldr	r4, [sp]
   1353c:	b	13254 <__assert_fail@plt+0x1c50>
   13540:	mov	r0, r2
   13544:	ldr	r8, [sp, #16]
   13548:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1354c:	mov	r3, #36	; 0x24
   13550:	mov	r5, r3
   13554:	str	r7, [r6, #24]
   13558:	str	r3, [fp]
   1355c:	mov	r0, r4
   13560:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13564:	cmp	r8, #0
   13568:	beq	13590 <__assert_fail@plt+0x1f8c>
   1356c:	ldr	r3, [r8, #12]
   13570:	ldr	r4, [r8, #8]
   13574:	subs	r0, r3, #0
   13578:	beq	13580 <__assert_fail@plt+0x1f7c>
   1357c:	bl	115ec <closedir@plt>
   13580:	mov	r0, r8
   13584:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13588:	subs	r8, r4, #0
   1358c:	bne	1356c <__assert_fail@plt+0x1f68>
   13590:	ldr	r4, [sp, #8]
   13594:	mov	r8, #0
   13598:	ldr	r0, [r4, #12]
   1359c:	bl	115ec <closedir@plt>
   135a0:	ldr	r3, [r6, #48]	; 0x30
   135a4:	mov	r2, #7
   135a8:	orr	r3, r3, #8192	; 0x2000
   135ac:	str	r8, [r4, #12]
   135b0:	strh	r2, [r4, #56]	; 0x38
   135b4:	mov	r0, r8
   135b8:	str	r3, [r6, #48]	; 0x30
   135bc:	str	r5, [fp]
   135c0:	add	sp, sp, #68	; 0x44
   135c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c8:	ldr	r8, [sp, #16]
   135cc:	ldr	r5, [fp]
   135d0:	b	1355c <__assert_fail@plt+0x1f58>
   135d4:	ldr	r8, [sp, #16]
   135d8:	ldr	r3, [sp, #36]	; 0x24
   135dc:	cmp	r3, #0
   135e0:	bne	13a28 <__assert_fail@plt+0x2424>
   135e4:	ldr	r3, [r6, #48]	; 0x30
   135e8:	tst	r3, #4
   135ec:	beq	13618 <__assert_fail@plt+0x2014>
   135f0:	ldr	r3, [r6, #36]	; 0x24
   135f4:	ldr	r2, [sp, #12]
   135f8:	cmp	sl, #0
   135fc:	cmpne	r3, r2
   13600:	ldreq	r3, [sp, #32]
   13604:	subeq	r3, r3, #1
   13608:	streq	r3, [sp, #32]
   1360c:	ldr	r2, [sp, #32]
   13610:	mov	r3, #0
   13614:	strb	r3, [r2]
   13618:	ldr	r3, [sp, #52]	; 0x34
   1361c:	ldr	r2, [sp, #44]	; 0x2c
   13620:	cmp	r2, #0
   13624:	movne	r3, #0
   13628:	andeq	r3, r3, #1
   1362c:	cmp	r3, #0
   13630:	beq	136c0 <__assert_fail@plt+0x20bc>
   13634:	ldr	r3, [sp, #40]	; 0x28
   13638:	cmp	sl, #0
   1363c:	cmpne	r3, #1
   13640:	beq	138cc <__assert_fail@plt+0x22c8>
   13644:	ldr	r3, [sp, #48]	; 0x30
   13648:	cmp	r3, #0
   1364c:	bne	13aac <__assert_fail@plt+0x24a8>
   13650:	ldr	r4, [r6, #44]	; 0x2c
   13654:	cmp	r4, #0
   13658:	cmpne	sl, #1
   1365c:	bls	1348c <__assert_fail@plt+0x1e88>
   13660:	ldr	r3, [r6, #40]	; 0x28
   13664:	cmp	sl, r3
   13668:	bls	13860 <__assert_fail@plt+0x225c>
   1366c:	add	r1, sl, #40	; 0x28
   13670:	cmn	r1, #-1073741823	; 0xc0000001
   13674:	str	r1, [r6, #40]	; 0x28
   13678:	bhi	13ba4 <__assert_fail@plt+0x25a0>
   1367c:	lsl	r1, r1, #2
   13680:	ldr	r0, [r6, #8]
   13684:	bl	1c64c <__assert_fail@plt+0xb048>
   13688:	cmp	r0, #0
   1368c:	beq	13ba4 <__assert_fail@plt+0x25a0>
   13690:	str	r0, [r6, #8]
   13694:	b	13864 <__assert_fail@plt+0x2260>
   13698:	ldr	r1, [sp, #8]
   1369c:	ldr	r3, [pc, #1888]	; 13e04 <__assert_fail@plt+0x2800>
   136a0:	mvn	r2, #0
   136a4:	ldr	r1, [r1, #4]
   136a8:	mov	r0, r6
   136ac:	bl	12e60 <__assert_fail@plt+0x185c>
   136b0:	adds	r5, r0, #0
   136b4:	movne	r5, #1
   136b8:	cmp	r5, #0
   136bc:	bne	13c68 <__assert_fail@plt+0x2664>
   136c0:	cmp	sl, #0
   136c4:	bne	13644 <__assert_fail@plt+0x2040>
   136c8:	ldr	r3, [sp, #40]	; 0x28
   136cc:	cmp	r3, #3
   136d0:	beq	13c30 <__assert_fail@plt+0x262c>
   136d4:	cmp	r8, #0
   136d8:	beq	13b60 <__assert_fail@plt+0x255c>
   136dc:	ldr	r3, [r8, #12]
   136e0:	ldr	r4, [r8, #8]
   136e4:	subs	r0, r3, #0
   136e8:	beq	136f0 <__assert_fail@plt+0x20ec>
   136ec:	bl	115ec <closedir@plt>
   136f0:	mov	r0, r8
   136f4:	bl	1cc30 <__assert_fail@plt+0xb62c>
   136f8:	subs	r8, r4, #0
   136fc:	bne	136dc <__assert_fail@plt+0x20d8>
   13700:	b	13b60 <__assert_fail@plt+0x255c>
   13704:	ldr	r3, [r0, #48]	; 0x30
   13708:	ldr	ip, [sp, #8]
   1370c:	and	r2, r3, #516	; 0x204
   13710:	cmp	r2, #512	; 0x200
   13714:	mvnne	r0, #99	; 0x63
   13718:	ldreq	r0, [r0, #32]
   1371c:	ands	r2, r3, #16
   13720:	ldr	r1, [ip, #24]
   13724:	bne	13840 <__assert_fail@plt+0x223c>
   13728:	add	r3, sp, #60	; 0x3c
   1372c:	bl	16aec <__assert_fail@plt+0x54e8>
   13730:	ldr	r3, [sp, #8]
   13734:	cmp	r0, #0
   13738:	mov	r8, r0
   1373c:	str	r0, [r3, #12]
   13740:	beq	13cb0 <__assert_fail@plt+0x26ac>
   13744:	ldrh	r3, [r3, #56]	; 0x38
   13748:	cmp	r3, #11
   1374c:	beq	13cd8 <__assert_fail@plt+0x26d4>
   13750:	ldr	r0, [r6, #48]	; 0x30
   13754:	tst	r0, #256	; 0x100
   13758:	bne	13934 <__assert_fail@plt+0x2330>
   1375c:	ldr	r2, [r6, #44]	; 0x2c
   13760:	ldr	r3, [pc, #1696]	; 13e08 <__assert_fail@plt+0x2804>
   13764:	cmp	r2, #0
   13768:	mvnne	r3, #0
   1376c:	str	r3, [sp, #24]
   13770:	ldr	r3, [sp, #40]	; 0x28
   13774:	cmp	r3, #2
   13778:	beq	13bdc <__assert_fail@plt+0x25d8>
   1377c:	ldr	r3, [r6, #48]	; 0x30
   13780:	and	r3, r3, #56	; 0x38
   13784:	cmp	r3, #24
   13788:	beq	13cf8 <__assert_fail@plt+0x26f4>
   1378c:	ldr	r3, [sp, #40]	; 0x28
   13790:	mov	r4, #1
   13794:	sub	r5, r3, #3
   13798:	clz	r5, r5
   1379c:	lsr	r5, r5, #5
   137a0:	ldr	r3, [r6, #48]	; 0x30
   137a4:	tst	r3, #512	; 0x200
   137a8:	bne	13c4c <__assert_fail@plt+0x2648>
   137ac:	ldr	r2, [sp, #60]	; 0x3c
   137b0:	cmp	r2, #0
   137b4:	blt	137d0 <__assert_fail@plt+0x21cc>
   137b8:	mov	r3, #0
   137bc:	ldr	r1, [sp, #8]
   137c0:	mov	r0, r6
   137c4:	bl	12e60 <__assert_fail@plt+0x185c>
   137c8:	cmp	r0, #0
   137cc:	beq	13148 <__assert_fail@plt+0x1b44>
   137d0:	tst	r4, r5
   137d4:	bne	13d50 <__assert_fail@plt+0x274c>
   137d8:	ldr	r4, [sp, #8]
   137dc:	ldrh	r3, [r4, #58]	; 0x3a
   137e0:	ldr	r0, [r4, #12]
   137e4:	orr	r3, r3, #1
   137e8:	strh	r3, [r4, #58]	; 0x3a
   137ec:	bl	115ec <closedir@plt>
   137f0:	ldr	r0, [r6, #48]	; 0x30
   137f4:	mov	r3, #0
   137f8:	tst	r0, #512	; 0x200
   137fc:	str	r3, [r4, #12]
   13800:	beq	1381c <__assert_fail@plt+0x2218>
   13804:	ldr	r3, [sp, #60]	; 0x3c
   13808:	cmp	r3, #0
   1380c:	blt	1381c <__assert_fail@plt+0x2218>
   13810:	mov	r0, r3
   13814:	bl	115d4 <close@plt>
   13818:	ldr	r0, [r6, #48]	; 0x30
   1381c:	ldr	r2, [sp, #8]
   13820:	mov	r3, #0
   13824:	str	r3, [sp, #52]	; 0x34
   13828:	str	r3, [r2, #12]
   1382c:	b	13158 <__assert_fail@plt+0x1b54>
   13830:	mov	r3, #11
   13834:	strh	r3, [r4, #56]	; 0x38
   13838:	mov	r3, #9
   1383c:	b	1338c <__assert_fail@plt+0x1d88>
   13840:	tst	r3, #1
   13844:	moveq	r2, #32768	; 0x8000
   13848:	beq	13728 <__assert_fail@plt+0x2124>
   1384c:	ldr	r2, [ip, #48]	; 0x30
   13850:	cmp	r2, #0
   13854:	movne	r2, #32768	; 0x8000
   13858:	moveq	r2, #0
   1385c:	b	13728 <__assert_fail@plt+0x2124>
   13860:	ldr	r0, [r6, #8]
   13864:	cmp	r8, #0
   13868:	movne	r2, r0
   1386c:	beq	13880 <__assert_fail@plt+0x227c>
   13870:	str	r8, [r2], #4
   13874:	ldr	r8, [r8, #8]
   13878:	cmp	r8, #0
   1387c:	bne	13870 <__assert_fail@plt+0x226c>
   13880:	mov	r3, r4
   13884:	mov	r2, #4
   13888:	mov	r1, sl
   1388c:	bl	11574 <qsort@plt>
   13890:	ldr	ip, [r6, #8]
   13894:	sub	r3, sl, #1
   13898:	mov	r2, ip
   1389c:	ldr	r8, [ip]
   138a0:	ldr	r1, [r2]
   138a4:	ldr	r0, [r2, #4]!
   138a8:	subs	r3, r3, #1
   138ac:	str	r0, [r1, #8]
   138b0:	bne	138a0 <__assert_fail@plt+0x229c>
   138b4:	add	sl, ip, sl, lsl #2
   138b8:	mov	r0, r8
   138bc:	ldr	r2, [sl, #-4]
   138c0:	str	r3, [r2, #8]
   138c4:	add	sp, sp, #68	; 0x44
   138c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138cc:	ldr	r3, [sp, #8]
   138d0:	ldr	r3, [r3, #48]	; 0x30
   138d4:	cmp	r3, #0
   138d8:	bne	13698 <__assert_fail@plt+0x2094>
   138dc:	ldr	r2, [r6, #48]	; 0x30
   138e0:	tst	r2, #4
   138e4:	movne	r5, r3
   138e8:	addne	r4, r6, #60	; 0x3c
   138ec:	bne	1391c <__assert_fail@plt+0x2318>
   138f0:	tst	r2, #512	; 0x200
   138f4:	bne	13d68 <__assert_fail@plt+0x2764>
   138f8:	ldr	r0, [r6, #28]
   138fc:	bl	11568 <fchdir@plt>
   13900:	add	r4, r6, #60	; 0x3c
   13904:	adds	r5, r0, #0
   13908:	movne	r5, #1
   1390c:	b	1391c <__assert_fail@plt+0x2318>
   13910:	bl	16a6c <__assert_fail@plt+0x5468>
   13914:	cmp	r0, #0
   13918:	bge	13b9c <__assert_fail@plt+0x2598>
   1391c:	mov	r0, r4
   13920:	bl	16a20 <__assert_fail@plt+0x541c>
   13924:	cmp	r0, #0
   13928:	mov	r0, r4
   1392c:	beq	13910 <__assert_fail@plt+0x230c>
   13930:	b	136b8 <__assert_fail@plt+0x20b4>
   13934:	ldr	r5, [sp, #8]
   13938:	add	r1, r6, #56	; 0x38
   1393c:	mov	r2, r5
   13940:	bl	12da8 <__assert_fail@plt+0x17a4>
   13944:	mov	r3, #0
   13948:	mov	r2, r5
   1394c:	ldr	r1, [r6, #48]	; 0x30
   13950:	ldr	r0, [r6, #32]
   13954:	bl	12c5c <__assert_fail@plt+0x1658>
   13958:	ldr	r2, [r6, #48]	; 0x30
   1395c:	ldr	r3, [pc, #1192]	; 13e0c <__assert_fail@plt+0x2808>
   13960:	mov	r7, r5
   13964:	and	r3, r3, r2
   13968:	cmp	r3, #0
   1396c:	beq	13bf0 <__assert_fail@plt+0x25ec>
   13970:	mov	r0, #24
   13974:	bl	1c620 <__assert_fail@plt+0xb01c>
   13978:	subs	r4, r0, #0
   1397c:	beq	13d94 <__assert_fail@plt+0x2790>
   13980:	ldrd	r0, [r5, #160]	; 0xa0
   13984:	ldrd	r2, [r5, #64]	; 0x40
   13988:	str	r5, [r4, #16]
   1398c:	strd	r0, [r4, #8]
   13990:	strd	r2, [r4]
   13994:	mov	r1, r4
   13998:	ldr	r0, [r6, #56]	; 0x38
   1399c:	bl	16250 <__assert_fail@plt+0x4c4c>
   139a0:	cmp	r4, r0
   139a4:	mov	r5, r0
   139a8:	beq	1375c <__assert_fail@plt+0x2158>
   139ac:	mov	r0, r4
   139b0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   139b4:	cmp	r5, #0
   139b8:	beq	13d94 <__assert_fail@plt+0x2790>
   139bc:	ldr	r2, [r5, #16]
   139c0:	mov	r3, #2
   139c4:	str	r2, [r7]
   139c8:	strh	r3, [r7, #56]	; 0x38
   139cc:	b	1375c <__assert_fail@plt+0x2158>
   139d0:	ldr	r3, [fp]
   139d4:	ldr	r8, [sp, #16]
   139d8:	cmp	r3, #0
   139dc:	beq	13a00 <__assert_fail@plt+0x23fc>
   139e0:	ldr	r2, [sp, #44]	; 0x2c
   139e4:	ldr	r1, [sp, #8]
   139e8:	cmp	sl, #0
   139ec:	cmpeq	r2, #0
   139f0:	moveq	r2, #4
   139f4:	movne	r2, #7
   139f8:	str	r3, [r1, #32]
   139fc:	strh	r2, [r1, #56]	; 0x38
   13a00:	ldr	r4, [sp, #8]
   13a04:	ldr	r0, [r4, #12]
   13a08:	cmp	r0, #0
   13a0c:	beq	135d8 <__assert_fail@plt+0x1fd4>
   13a10:	bl	115ec <closedir@plt>
   13a14:	mov	r3, #0
   13a18:	str	r3, [r4, #12]
   13a1c:	ldr	r3, [sp, #36]	; 0x24
   13a20:	cmp	r3, #0
   13a24:	beq	135e4 <__assert_fail@plt+0x1fe0>
   13a28:	ldr	r1, [r6, #4]
   13a2c:	ldr	r0, [r6, #24]
   13a30:	cmp	r1, #0
   13a34:	beq	13a64 <__assert_fail@plt+0x2460>
   13a38:	ldr	r3, [r1, #24]
   13a3c:	add	r2, r1, #168	; 0xa8
   13a40:	cmp	r3, r2
   13a44:	ldrne	r2, [r1, #28]
   13a48:	str	r0, [r1, #28]
   13a4c:	subne	r3, r3, r2
   13a50:	addne	r3, r0, r3
   13a54:	strne	r3, [r1, #24]
   13a58:	ldr	r1, [r1, #8]
   13a5c:	cmp	r1, #0
   13a60:	bne	13a38 <__assert_fail@plt+0x2434>
   13a64:	mov	r3, r8
   13a68:	b	13a98 <__assert_fail@plt+0x2494>
   13a6c:	ldr	r2, [r3, #24]
   13a70:	cmp	r2, r1
   13a74:	ldrne	r1, [r3, #28]
   13a78:	str	r0, [r3, #28]
   13a7c:	subne	r2, r2, r1
   13a80:	addne	r2, r0, r2
   13a84:	strne	r2, [r3, #24]
   13a88:	ldr	r2, [r3, #8]
   13a8c:	cmp	r2, #0
   13a90:	ldreq	r2, [r3, #4]
   13a94:	mov	r3, r2
   13a98:	ldr	r2, [r3, #48]	; 0x30
   13a9c:	add	r1, r3, #168	; 0xa8
   13aa0:	cmp	r2, #0
   13aa4:	bge	13a6c <__assert_fail@plt+0x2468>
   13aa8:	b	135e4 <__assert_fail@plt+0x1fe0>
   13aac:	ldr	r2, [r6, #40]	; 0x28
   13ab0:	ldr	r3, [pc, #856]	; 13e10 <__assert_fail@plt+0x280c>
   13ab4:	cmp	sl, r2
   13ab8:	str	r3, [r6, #44]	; 0x2c
   13abc:	bhi	13b70 <__assert_fail@plt+0x256c>
   13ac0:	ldr	r0, [r6, #8]
   13ac4:	cmp	r8, #0
   13ac8:	movne	r3, r0
   13acc:	beq	13ae0 <__assert_fail@plt+0x24dc>
   13ad0:	str	r8, [r3], #4
   13ad4:	ldr	r8, [r8, #8]
   13ad8:	cmp	r8, #0
   13adc:	bne	13ad0 <__assert_fail@plt+0x24cc>
   13ae0:	ldr	r3, [pc, #808]	; 13e10 <__assert_fail@plt+0x280c>
   13ae4:	mov	r2, #4
   13ae8:	mov	r1, sl
   13aec:	bl	11574 <qsort@plt>
   13af0:	ldr	ip, [r6, #8]
   13af4:	subs	r3, sl, #1
   13af8:	ldr	r8, [ip]
   13afc:	moveq	r3, r8
   13b00:	beq	13b24 <__assert_fail@plt+0x2520>
   13b04:	mov	r2, ip
   13b08:	ldr	r1, [r2]
   13b0c:	ldr	r0, [r2, #4]!
   13b10:	subs	r3, r3, #1
   13b14:	str	r0, [r1, #8]
   13b18:	bne	13b08 <__assert_fail@plt+0x2504>
   13b1c:	add	ip, ip, sl, lsl #2
   13b20:	ldr	r3, [ip, #-4]
   13b24:	mov	r2, #0
   13b28:	str	r2, [r3, #8]
   13b2c:	mov	r3, #0
   13b30:	mov	r0, r8
   13b34:	str	r3, [r6, #44]	; 0x2c
   13b38:	add	sp, sp, #68	; 0x44
   13b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b40:	ldr	r4, [sp, #8]
   13b44:	mov	r8, #0
   13b48:	ldr	r0, [r4, #12]
   13b4c:	bl	115ec <closedir@plt>
   13b50:	ldr	r3, [sp, #40]	; 0x28
   13b54:	str	r8, [r4, #12]
   13b58:	cmp	r3, #3
   13b5c:	beq	13cbc <__assert_fail@plt+0x26b8>
   13b60:	mov	r8, #0
   13b64:	mov	r0, r8
   13b68:	add	sp, sp, #68	; 0x44
   13b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b70:	add	r1, sl, #40	; 0x28
   13b74:	cmn	r1, #-1073741823	; 0xc0000001
   13b78:	str	r1, [r6, #40]	; 0x28
   13b7c:	bhi	13c18 <__assert_fail@plt+0x2614>
   13b80:	lsl	r1, r1, #2
   13b84:	ldr	r0, [r6, #8]
   13b88:	bl	1c64c <__assert_fail@plt+0xb048>
   13b8c:	cmp	r0, #0
   13b90:	beq	13c18 <__assert_fail@plt+0x2614>
   13b94:	str	r0, [r6, #8]
   13b98:	b	13ac4 <__assert_fail@plt+0x24c0>
   13b9c:	bl	115d4 <close@plt>
   13ba0:	b	1391c <__assert_fail@plt+0x2318>
   13ba4:	ldr	r0, [r6, #8]
   13ba8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13bac:	mov	r3, #0
   13bb0:	str	r3, [r6, #8]
   13bb4:	str	r3, [r6, #40]	; 0x28
   13bb8:	b	1348c <__assert_fail@plt+0x1e88>
   13bbc:	str	r0, [sp]
   13bc0:	ldr	r0, [r6, #24]
   13bc4:	ldr	r8, [sp, #16]
   13bc8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13bcc:	ldr	r1, [sp]
   13bd0:	ldr	r5, [fp]
   13bd4:	str	r1, [r6, #24]
   13bd8:	b	1355c <__assert_fail@plt+0x1f58>
   13bdc:	mov	r3, #0
   13be0:	str	r3, [sp, #52]	; 0x34
   13be4:	ldr	r0, [r6, #48]	; 0x30
   13be8:	ldr	r2, [sp, #8]
   13bec:	b	13158 <__assert_fail@plt+0x1b54>
   13bf0:	ldr	r4, [sp, #8]
   13bf4:	ldr	r0, [r6, #56]	; 0x38
   13bf8:	add	r1, r4, #64	; 0x40
   13bfc:	bl	1c858 <__assert_fail@plt+0xb254>
   13c00:	cmp	r0, #0
   13c04:	movne	r2, r4
   13c08:	movne	r3, #2
   13c0c:	strne	r4, [r2]
   13c10:	strhne	r3, [r4, #56]	; 0x38
   13c14:	b	1375c <__assert_fail@plt+0x2158>
   13c18:	ldr	r0, [r6, #8]
   13c1c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13c20:	mov	r3, #0
   13c24:	str	r3, [r6, #8]
   13c28:	str	r3, [r6, #40]	; 0x28
   13c2c:	b	13b2c <__assert_fail@plt+0x2528>
   13c30:	ldr	r2, [sp, #8]
   13c34:	ldrh	r3, [r2, #56]	; 0x38
   13c38:	cmp	r3, #7
   13c3c:	cmpne	r3, #4
   13c40:	movne	r3, #6
   13c44:	strhne	r3, [r2, #56]	; 0x38
   13c48:	b	136d4 <__assert_fail@plt+0x20d0>
   13c4c:	mov	r2, #3
   13c50:	ldr	r1, [pc, #444]	; 13e14 <__assert_fail@plt+0x2810>
   13c54:	ldr	r0, [sp, #60]	; 0x3c
   13c58:	bl	1c9c4 <__assert_fail@plt+0xb3c0>
   13c5c:	mov	r2, r0
   13c60:	str	r0, [sp, #60]	; 0x3c
   13c64:	b	137b0 <__assert_fail@plt+0x21ac>
   13c68:	ldr	r3, [r6, #48]	; 0x30
   13c6c:	ldr	r1, [sp, #8]
   13c70:	orr	r3, r3, #8192	; 0x2000
   13c74:	mov	r2, #7
   13c78:	cmp	r8, #0
   13c7c:	strh	r2, [r1, #56]	; 0x38
   13c80:	str	r3, [r6, #48]	; 0x30
   13c84:	beq	13b60 <__assert_fail@plt+0x255c>
   13c88:	ldr	r3, [r8, #12]
   13c8c:	ldr	r4, [r8, #8]
   13c90:	subs	r0, r3, #0
   13c94:	beq	13c9c <__assert_fail@plt+0x2698>
   13c98:	bl	115ec <closedir@plt>
   13c9c:	mov	r0, r8
   13ca0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   13ca4:	subs	r8, r4, #0
   13ca8:	bne	13c88 <__assert_fail@plt+0x2684>
   13cac:	b	13b60 <__assert_fail@plt+0x255c>
   13cb0:	ldr	r3, [sp, #40]	; 0x28
   13cb4:	cmp	r3, #3
   13cb8:	bne	13b60 <__assert_fail@plt+0x255c>
   13cbc:	ldr	r4, [sp, #8]
   13cc0:	mov	r3, #4
   13cc4:	strh	r3, [r4, #56]	; 0x38
   13cc8:	bl	11484 <__errno_location@plt>
   13ccc:	ldr	r3, [r0]
   13cd0:	str	r3, [r4, #32]
   13cd4:	b	1348c <__assert_fail@plt+0x1e88>
   13cd8:	ldr	r4, [sp, #8]
   13cdc:	mov	r3, #0
   13ce0:	mov	r2, r4
   13ce4:	ldr	r1, [r6, #48]	; 0x30
   13ce8:	ldr	r0, [r6, #32]
   13cec:	bl	12c5c <__assert_fail@plt+0x1658>
   13cf0:	strh	r0, [r4, #56]	; 0x38
   13cf4:	b	1375c <__assert_fail@plt+0x2158>
   13cf8:	ldr	r3, [sp, #8]
   13cfc:	ldr	r3, [r3, #84]	; 0x54
   13d00:	cmp	r3, #2
   13d04:	bne	1378c <__assert_fail@plt+0x2188>
   13d08:	ldr	r1, [sp, #60]	; 0x3c
   13d0c:	ldr	r0, [sp, #8]
   13d10:	bl	12b4c <__assert_fail@plt+0x1548>
   13d14:	ldr	r3, [pc, #220]	; 13df8 <__assert_fail@plt+0x27f4>
   13d18:	cmp	r0, r3
   13d1c:	beq	1378c <__assert_fail@plt+0x2188>
   13d20:	bgt	13da8 <__assert_fail@plt+0x27a4>
   13d24:	ldr	r3, [pc, #212]	; 13e00 <__assert_fail@plt+0x27fc>
   13d28:	cmp	r0, r3
   13d2c:	beq	1378c <__assert_fail@plt+0x2188>
   13d30:	cmp	r0, #0
   13d34:	beq	1378c <__assert_fail@plt+0x2188>
   13d38:	ldr	r3, [sp, #40]	; 0x28
   13d3c:	cmp	r3, #3
   13d40:	bne	13bdc <__assert_fail@plt+0x25d8>
   13d44:	mov	r5, #1
   13d48:	mov	r4, #0
   13d4c:	b	137a0 <__assert_fail@plt+0x219c>
   13d50:	bl	11484 <__errno_location@plt>
   13d54:	ldr	r2, [sp, #8]
   13d58:	mov	r4, r2
   13d5c:	ldr	r3, [r0]
   13d60:	str	r3, [r2, #32]
   13d64:	b	137dc <__assert_fail@plt+0x21d8>
   13d68:	add	r4, r6, #60	; 0x3c
   13d6c:	mov	r0, r4
   13d70:	ldr	r1, [r6, #32]
   13d74:	bl	16a28 <__assert_fail@plt+0x5424>
   13d78:	cmp	r0, #0
   13d7c:	blt	13d84 <__assert_fail@plt+0x2780>
   13d80:	bl	115d4 <close@plt>
   13d84:	mvn	r3, #99	; 0x63
   13d88:	str	r3, [r6, #32]
   13d8c:	mov	r5, #0
   13d90:	b	1391c <__assert_fail@plt+0x2318>
   13d94:	bl	11484 <__errno_location@plt>
   13d98:	mov	r3, #12
   13d9c:	mov	r8, #0
   13da0:	str	r3, [r0]
   13da4:	b	1348c <__assert_fail@plt+0x1e88>
   13da8:	ldr	r3, [pc, #104]	; 13e18 <__assert_fail@plt+0x2814>
   13dac:	cmp	r0, r3
   13db0:	beq	1378c <__assert_fail@plt+0x2188>
   13db4:	ldr	r3, [pc, #96]	; 13e1c <__assert_fail@plt+0x2818>
   13db8:	cmp	r0, r3
   13dbc:	bne	13d38 <__assert_fail@plt+0x2734>
   13dc0:	b	1378c <__assert_fail@plt+0x2188>
   13dc4:	ldr	r3, [pc, #60]	; 13e08 <__assert_fail@plt+0x2804>
   13dc8:	ldr	r0, [r6, #48]	; 0x30
   13dcc:	str	r3, [sp, #24]
   13dd0:	mov	r3, #1
   13dd4:	str	r3, [sp, #52]	; 0x34
   13dd8:	ldr	r2, [sp, #8]
   13ddc:	b	13158 <__assert_fail@plt+0x1b54>
   13de0:	str	r7, [r4, #80]	; 0x50
   13de4:	mov	r2, #1
   13de8:	mov	r3, #0
   13dec:	b	1321c <__assert_fail@plt+0x1c18>
   13df0:	ldrdeq	lr, [r1], -ip
   13df4:	andeq	r2, r0, r0, lsl r7
   13df8:	andeq	r6, r0, r9, ror #18
   13dfc:			; <UNDEFINED> instruction: 0x01021994
   13e00:			; <UNDEFINED> instruction: 0xff534d42
   13e04:	andeq	lr, r1, ip, lsl #16
   13e08:	andeq	r8, r1, r0, lsr #13
   13e0c:	andeq	r0, r0, r2, lsl #2
   13e10:	andeq	r2, r1, ip, lsl fp
   13e14:	andeq	r0, r0, r6, lsl #8
   13e18:	andeq	r9, r0, r0, lsr #31
   13e1c:	movtpl	r4, #24911	; 0x614f
   13e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e24:	bic	r8, r1, #4080	; 0xff0
   13e28:	sub	sp, sp, #36	; 0x24
   13e2c:	bic	r8, r8, #15
   13e30:	cmp	r8, #0
   13e34:	str	r2, [sp, #12]
   13e38:	bne	142e0 <__assert_fail@plt+0x2cdc>
   13e3c:	and	r3, r1, #516	; 0x204
   13e40:	cmp	r3, #516	; 0x204
   13e44:	mov	r5, r1
   13e48:	beq	14244 <__assert_fail@plt+0x2c40>
   13e4c:	ands	r8, r1, #18
   13e50:	beq	14244 <__assert_fail@plt+0x2c40>
   13e54:	mov	r9, r0
   13e58:	mov	r1, #96	; 0x60
   13e5c:	mov	r0, #1
   13e60:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   13e64:	subs	r8, r0, #0
   13e68:	beq	1419c <__assert_fail@plt+0x2b98>
   13e6c:	ldr	r3, [sp, #12]
   13e70:	tst	r5, #2
   13e74:	str	r3, [r8, #44]	; 0x2c
   13e78:	bicne	r3, r5, #512	; 0x200
   13e7c:	orrne	r3, r3, #4
   13e80:	strne	r3, [r8, #48]	; 0x30
   13e84:	ldr	r3, [r9]
   13e88:	streq	r5, [r8, #48]	; 0x30
   13e8c:	mvn	r2, #99	; 0x63
   13e90:	cmp	r3, #0
   13e94:	str	r2, [r8, #32]
   13e98:	beq	14344 <__assert_fail@plt+0x2d40>
   13e9c:	mov	r6, r9
   13ea0:	mov	r4, #0
   13ea4:	mov	r0, r3
   13ea8:	bl	11460 <strlen@plt>
   13eac:	ldr	r3, [r6, #4]!
   13eb0:	cmp	r4, r0
   13eb4:	movcc	r4, r0
   13eb8:	cmp	r3, #0
   13ebc:	bne	13ea4 <__assert_fail@plt+0x28a0>
   13ec0:	add	r4, r4, #1
   13ec4:	cmp	r4, #4096	; 0x1000
   13ec8:	movcc	r4, #4096	; 0x1000
   13ecc:	ldr	r3, [r8, #36]	; 0x24
   13ed0:	add	r1, r3, #256	; 0x100
   13ed4:	add	r1, r1, r4
   13ed8:	cmp	r3, r1
   13edc:	bhi	14210 <__assert_fail@plt+0x2c0c>
   13ee0:	str	r1, [r8, #36]	; 0x24
   13ee4:	ldr	r0, [r8, #24]
   13ee8:	bl	1c64c <__assert_fail@plt+0xb048>
   13eec:	subs	r4, r0, #0
   13ef0:	beq	143e0 <__assert_fail@plt+0x2ddc>
   13ef4:	ldr	fp, [r9]
   13ef8:	str	r4, [r8, #24]
   13efc:	cmp	fp, #0
   13f00:	beq	142c4 <__assert_fail@plt+0x2cc0>
   13f04:	mov	r0, #176	; 0xb0
   13f08:	bl	1c620 <__assert_fail@plt+0xb01c>
   13f0c:	subs	r3, r0, #0
   13f10:	mov	r0, r3
   13f14:	str	r3, [sp, #16]
   13f18:	beq	14204 <__assert_fail@plt+0x2c00>
   13f1c:	ldr	r2, [r8, #24]
   13f20:	ldr	r3, [sp, #12]
   13f24:	mov	r1, #196608	; 0x30000
   13f28:	cmp	r3, #0
   13f2c:	str	r2, [r0, #28]
   13f30:	mov	r3, #0
   13f34:	mvn	r2, #0
   13f38:	str	r8, [r0, #44]	; 0x2c
   13f3c:	strb	r3, [r0, #168]	; 0xa8
   13f40:	str	r3, [r0, #52]	; 0x34
   13f44:	str	r3, [r0, #32]
   13f48:	str	r3, [r0, #12]
   13f4c:	str	r3, [r0, #16]
   13f50:	str	r3, [r0, #20]
   13f54:	str	r1, [r0, #58]	; 0x3a
   13f58:	str	r2, [r0, #48]	; 0x30
   13f5c:	ldr	fp, [r9]
   13f60:	beq	14338 <__assert_fail@plt+0x2d34>
   13f64:	ldr	r3, [r8, #48]	; 0x30
   13f68:	lsr	r3, r3, #10
   13f6c:	and	r3, r3, #1
   13f70:	str	r3, [sp, #24]
   13f74:	cmp	fp, #0
   13f78:	beq	143f8 <__assert_fail@plt+0x2df4>
   13f7c:	lsr	r5, r5, #11
   13f80:	mov	r3, #0
   13f84:	eor	r5, r5, #1
   13f88:	mov	r6, r3
   13f8c:	str	r3, [sp, #28]
   13f90:	and	r3, r5, #1
   13f94:	str	r3, [sp, #20]
   13f98:	mov	sl, r6
   13f9c:	mov	r7, r6
   13fa0:	b	13fe0 <__assert_fail@plt+0x29dc>
   13fa4:	mov	r3, #11
   13fa8:	strh	r3, [r4, #56]	; 0x38
   13fac:	mov	r2, #2
   13fb0:	mov	r3, #0
   13fb4:	strd	r2, [r4, #112]	; 0x70
   13fb8:	ldr	r3, [sp, #12]
   13fbc:	cmp	r3, #0
   13fc0:	beq	140c0 <__assert_fail@plt+0x2abc>
   13fc4:	ldr	fp, [r9, #4]!
   13fc8:	str	r7, [r4, #8]
   13fcc:	cmp	fp, #0
   13fd0:	mov	r7, r4
   13fd4:	add	r4, sl, #1
   13fd8:	beq	140ec <__assert_fail@plt+0x2ae8>
   13fdc:	mov	sl, r4
   13fe0:	mov	r0, fp
   13fe4:	bl	11460 <strlen@plt>
   13fe8:	ldr	r3, [sp, #20]
   13fec:	cmp	r0, #2
   13ff0:	movls	r3, #0
   13ff4:	andhi	r3, r3, #1
   13ff8:	cmp	r3, #0
   13ffc:	mov	r5, r0
   14000:	beq	14018 <__assert_fail@plt+0x2a14>
   14004:	sub	r2, r0, #1
   14008:	add	r3, fp, r2
   1400c:	ldrb	r2, [fp, r2]
   14010:	cmp	r2, #47	; 0x2f
   14014:	beq	141a8 <__assert_fail@plt+0x2ba4>
   14018:	add	r0, r5, #176	; 0xb0
   1401c:	bic	r0, r0, #7
   14020:	bl	1c620 <__assert_fail@plt+0xb01c>
   14024:	subs	r4, r0, #0
   14028:	beq	141d0 <__assert_fail@plt+0x2bcc>
   1402c:	add	r3, r4, #168	; 0xa8
   14030:	mov	r1, fp
   14034:	mov	r0, r3
   14038:	mov	r2, r5
   1403c:	bl	112b0 <memcpy@plt>
   14040:	add	r1, r4, r5
   14044:	ldr	r2, [r8, #24]
   14048:	strb	r6, [r1, #168]	; 0xa8
   1404c:	str	r5, [r4, #52]	; 0x34
   14050:	str	r8, [r4, #44]	; 0x2c
   14054:	str	r6, [r4, #32]
   14058:	str	r6, [r4, #12]
   1405c:	str	r6, [r4, #16]
   14060:	str	r6, [r4, #20]
   14064:	str	r6, [r4, #48]	; 0x30
   14068:	str	r2, [r4, #28]
   1406c:	mov	r3, r0
   14070:	ldr	r0, [sp, #24]
   14074:	str	r3, [r4, #24]
   14078:	mov	r3, #196608	; 0x30000
   1407c:	cmp	r7, #0
   14080:	moveq	r0, #0
   14084:	andne	r0, r0, #1
   14088:	str	r3, [r4, #58]	; 0x3a
   1408c:	ldr	r3, [sp, #16]
   14090:	cmp	r0, #0
   14094:	str	r3, [r4, #4]
   14098:	bne	13fa4 <__assert_fail@plt+0x29a0>
   1409c:	mov	r3, r6
   140a0:	mov	r2, r4
   140a4:	ldr	r1, [r8, #48]	; 0x30
   140a8:	ldr	r0, [r8, #32]
   140ac:	bl	12c5c <__assert_fail@plt+0x1658>
   140b0:	ldr	r3, [sp, #12]
   140b4:	cmp	r3, #0
   140b8:	strh	r0, [r4, #56]	; 0x38
   140bc:	bne	13fc4 <__assert_fail@plt+0x29c0>
   140c0:	cmp	r7, #0
   140c4:	str	r3, [r4, #8]
   140c8:	ldrne	r3, [sp, #28]
   140cc:	ldr	fp, [r9, #4]!
   140d0:	strne	r4, [sp, #28]
   140d4:	strne	r4, [r3, #8]
   140d8:	streq	r4, [sp, #28]
   140dc:	moveq	r7, r4
   140e0:	cmp	fp, #0
   140e4:	add	r4, sl, #1
   140e8:	bne	13fdc <__assert_fail@plt+0x29d8>
   140ec:	ldr	r3, [sp, #12]
   140f0:	cmp	r3, #0
   140f4:	cmpne	r4, #1
   140f8:	bhi	142fc <__assert_fail@plt+0x2cf8>
   140fc:	mov	r0, #176	; 0xb0
   14100:	bl	1c620 <__assert_fail@plt+0xb01c>
   14104:	cmp	r0, #0
   14108:	beq	143f0 <__assert_fail@plt+0x2dec>
   1410c:	ldr	r2, [r8, #48]	; 0x30
   14110:	ldr	r3, [pc, #744]	; 14400 <__assert_fail@plt+0x2dfc>
   14114:	ldr	lr, [r8, #24]
   14118:	and	r3, r3, r2
   1411c:	mov	r1, #0
   14120:	cmp	r3, #0
   14124:	mov	ip, #3
   14128:	mov	r2, #9
   1412c:	mov	r3, #1
   14130:	str	r8, [r0, #44]	; 0x2c
   14134:	str	r0, [r8]
   14138:	str	r7, [r0, #8]
   1413c:	str	lr, [r0, #28]
   14140:	strb	r1, [r0, #168]	; 0xa8
   14144:	str	r1, [r0, #52]	; 0x34
   14148:	str	r1, [r0, #32]
   1414c:	str	r1, [r0, #12]
   14150:	strh	r1, [r0, #58]	; 0x3a
   14154:	str	r1, [r0, #16]
   14158:	str	r1, [r0, #20]
   1415c:	strh	ip, [r0, #60]	; 0x3c
   14160:	strh	r2, [r0, #56]	; 0x38
   14164:	str	r3, [r0, #48]	; 0x30
   14168:	bne	1425c <__assert_fail@plt+0x2c58>
   1416c:	mov	r0, #32
   14170:	bl	1c620 <__assert_fail@plt+0xb01c>
   14174:	cmp	r0, #0
   14178:	str	r0, [r8, #56]	; 0x38
   1417c:	beq	141d0 <__assert_fail@plt+0x2bcc>
   14180:	bl	1c834 <__assert_fail@plt+0xb230>
   14184:	ldr	r3, [r8, #48]	; 0x30
   14188:	tst	r3, #516	; 0x204
   1418c:	beq	1428c <__assert_fail@plt+0x2c88>
   14190:	mvn	r1, #0
   14194:	add	r0, r8, #60	; 0x3c
   14198:	bl	169f4 <__assert_fail@plt+0x53f0>
   1419c:	mov	r0, r8
   141a0:	add	sp, sp, #36	; 0x24
   141a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141a8:	ldrb	r2, [r3, #-1]!
   141ac:	cmp	r2, #47	; 0x2f
   141b0:	bne	14018 <__assert_fail@plt+0x2a14>
   141b4:	sub	r5, r5, #1
   141b8:	cmp	r5, #1
   141bc:	bne	141a8 <__assert_fail@plt+0x2ba4>
   141c0:	mov	r0, #176	; 0xb0
   141c4:	bl	1c620 <__assert_fail@plt+0xb01c>
   141c8:	subs	r4, r0, #0
   141cc:	bne	1402c <__assert_fail@plt+0x2a28>
   141d0:	cmp	r7, #0
   141d4:	beq	141fc <__assert_fail@plt+0x2bf8>
   141d8:	ldr	r3, [r7, #12]
   141dc:	ldr	r4, [r7, #8]
   141e0:	subs	r0, r3, #0
   141e4:	beq	141ec <__assert_fail@plt+0x2be8>
   141e8:	bl	115ec <closedir@plt>
   141ec:	mov	r0, r7
   141f0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   141f4:	subs	r7, r4, #0
   141f8:	bne	141d8 <__assert_fail@plt+0x2bd4>
   141fc:	ldr	r0, [sp, #16]
   14200:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14204:	ldr	r0, [r8, #24]
   14208:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1420c:	b	1422c <__assert_fail@plt+0x2c28>
   14210:	ldr	r0, [r8, #24]
   14214:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14218:	mov	r3, #0
   1421c:	str	r3, [r8, #24]
   14220:	bl	11484 <__errno_location@plt>
   14224:	mov	r3, #36	; 0x24
   14228:	str	r3, [r0]
   1422c:	mov	r0, r8
   14230:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14234:	mov	r8, #0
   14238:	mov	r0, r8
   1423c:	add	sp, sp, #36	; 0x24
   14240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14244:	bl	11484 <__errno_location@plt>
   14248:	mov	r3, #22
   1424c:	str	r3, [r0]
   14250:	mov	r0, r8
   14254:	add	sp, sp, #36	; 0x24
   14258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1425c:	ldr	r3, [pc, #416]	; 14404 <__assert_fail@plt+0x2e00>
   14260:	ldr	r2, [pc, #416]	; 14408 <__assert_fail@plt+0x2e04>
   14264:	str	r3, [sp]
   14268:	mov	r0, #31
   1426c:	ldr	r3, [pc, #408]	; 1440c <__assert_fail@plt+0x2e08>
   14270:	bl	158e8 <__assert_fail@plt+0x42e4>
   14274:	cmp	r0, #0
   14278:	str	r0, [r8, #56]	; 0x38
   1427c:	beq	141d0 <__assert_fail@plt+0x2bcc>
   14280:	ldr	r3, [r8, #48]	; 0x30
   14284:	tst	r3, #516	; 0x204
   14288:	bne	14190 <__assert_fail@plt+0x2b8c>
   1428c:	ldr	r2, [pc, #380]	; 14410 <__assert_fail@plt+0x2e0c>
   14290:	tst	r3, #16
   14294:	ldr	r1, [pc, #376]	; 14414 <__assert_fail@plt+0x2e10>
   14298:	moveq	r1, r2
   1429c:	tst	r3, #512	; 0x200
   142a0:	bne	143b4 <__assert_fail@plt+0x2db0>
   142a4:	ldr	r0, [pc, #364]	; 14418 <__assert_fail@plt+0x2e14>
   142a8:	bl	1cb98 <__assert_fail@plt+0xb594>
   142ac:	cmp	r0, #0
   142b0:	str	r0, [r8, #28]
   142b4:	ldrlt	r3, [r8, #48]	; 0x30
   142b8:	orrlt	r3, r3, #4
   142bc:	strlt	r3, [r8, #48]	; 0x30
   142c0:	b	14190 <__assert_fail@plt+0x2b8c>
   142c4:	ldr	r3, [sp, #12]
   142c8:	cmp	r3, #0
   142cc:	strne	fp, [sp, #16]
   142d0:	bne	13f64 <__assert_fail@plt+0x2960>
   142d4:	str	r3, [sp, #16]
   142d8:	mov	r7, r3
   142dc:	b	140fc <__assert_fail@plt+0x2af8>
   142e0:	bl	11484 <__errno_location@plt>
   142e4:	mov	r8, #0
   142e8:	mov	r3, #22
   142ec:	str	r3, [r0]
   142f0:	mov	r0, r8
   142f4:	add	sp, sp, #36	; 0x24
   142f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142fc:	ldr	r2, [r8, #40]	; 0x28
   14300:	ldr	r5, [r8, #44]	; 0x2c
   14304:	cmp	r4, r2
   14308:	bls	1434c <__assert_fail@plt+0x2d48>
   1430c:	add	r1, sl, #41	; 0x29
   14310:	cmn	r1, #-1073741823	; 0xc0000001
   14314:	str	r1, [r8, #40]	; 0x28
   14318:	bhi	143c8 <__assert_fail@plt+0x2dc4>
   1431c:	lsl	r1, r1, #2
   14320:	ldr	r0, [r8, #8]
   14324:	bl	1c64c <__assert_fail@plt+0xb048>
   14328:	cmp	r0, #0
   1432c:	beq	143c8 <__assert_fail@plt+0x2dc4>
   14330:	str	r0, [r8, #8]
   14334:	b	14350 <__assert_fail@plt+0x2d4c>
   14338:	mov	r3, #1
   1433c:	str	r3, [sp, #24]
   14340:	b	13f74 <__assert_fail@plt+0x2970>
   14344:	mov	r4, #4096	; 0x1000
   14348:	b	13ecc <__assert_fail@plt+0x28c8>
   1434c:	ldr	r0, [r8, #8]
   14350:	mov	r2, r0
   14354:	str	r7, [r2], #4
   14358:	ldr	r7, [r7, #8]
   1435c:	cmp	r7, #0
   14360:	bne	14354 <__assert_fail@plt+0x2d50>
   14364:	mov	r3, r5
   14368:	mov	r1, r4
   1436c:	mov	r2, #4
   14370:	bl	11574 <qsort@plt>
   14374:	ldr	ip, [r8, #8]
   14378:	cmp	sl, #0
   1437c:	ldr	r7, [ip]
   14380:	moveq	r3, r7
   14384:	beq	143a8 <__assert_fail@plt+0x2da4>
   14388:	mov	r2, sl
   1438c:	mov	r3, ip
   14390:	ldr	r1, [r3]
   14394:	ldr	r0, [r3, #4]!
   14398:	subs	r2, r2, #1
   1439c:	str	r0, [r1, #8]
   143a0:	bne	14390 <__assert_fail@plt+0x2d8c>
   143a4:	ldr	r3, [ip, sl, lsl #2]
   143a8:	mov	r2, #0
   143ac:	str	r2, [r3, #8]
   143b0:	b	140fc <__assert_fail@plt+0x2af8>
   143b4:	mov	r2, r1
   143b8:	ldr	r0, [r8, #32]
   143bc:	ldr	r1, [pc, #84]	; 14418 <__assert_fail@plt+0x2e14>
   143c0:	bl	16ab4 <__assert_fail@plt+0x54b0>
   143c4:	b	142ac <__assert_fail@plt+0x2ca8>
   143c8:	ldr	r0, [r8, #8]
   143cc:	bl	1cc30 <__assert_fail@plt+0xb62c>
   143d0:	mov	r3, #0
   143d4:	str	r3, [r8, #8]
   143d8:	str	r3, [r8, #40]	; 0x28
   143dc:	b	140fc <__assert_fail@plt+0x2af8>
   143e0:	ldr	r0, [r8, #24]
   143e4:	bl	1cc30 <__assert_fail@plt+0xb62c>
   143e8:	str	r4, [r8, #24]
   143ec:	b	1422c <__assert_fail@plt+0x2c28>
   143f0:	str	r0, [r8]
   143f4:	b	141d0 <__assert_fail@plt+0x2bcc>
   143f8:	mov	r7, fp
   143fc:	b	140fc <__assert_fail@plt+0x2af8>
   14400:	andeq	r0, r0, r2, lsl #2
   14404:	andeq	ip, r1, r0, lsr ip
   14408:	andeq	r2, r1, r0, asr #21
   1440c:	andeq	r2, r1, ip, ror sl
   14410:	andeq	r4, r8, r0, lsl #18
   14414:	andeq	ip, r8, r0, lsl #18
   14418:	andeq	lr, r1, r0, lsl r8
   1441c:	ldr	r3, [r0]
   14420:	push	{r4, r5, r6, lr}
   14424:	cmp	r3, #0
   14428:	mov	r6, r0
   1442c:	beq	14468 <__assert_fail@plt+0x2e64>
   14430:	ldr	r2, [r3, #48]	; 0x30
   14434:	cmp	r2, #0
   14438:	blt	145a8 <__assert_fail@plt+0x2fa4>
   1443c:	ldr	r4, [r3, #8]
   14440:	mov	r0, r3
   14444:	cmp	r4, #0
   14448:	ldreq	r4, [r3, #4]
   1444c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14450:	mov	r3, r4
   14454:	ldr	r2, [r4, #48]	; 0x30
   14458:	cmp	r2, #0
   1445c:	bge	1443c <__assert_fail@plt+0x2e38>
   14460:	mov	r0, r4
   14464:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14468:	ldr	r4, [r6, #4]
   1446c:	cmp	r4, #0
   14470:	beq	14498 <__assert_fail@plt+0x2e94>
   14474:	ldr	r3, [r4, #12]
   14478:	ldr	r5, [r4, #8]
   1447c:	subs	r0, r3, #0
   14480:	beq	14488 <__assert_fail@plt+0x2e84>
   14484:	bl	115ec <closedir@plt>
   14488:	mov	r0, r4
   1448c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14490:	subs	r4, r5, #0
   14494:	bne	14474 <__assert_fail@plt+0x2e70>
   14498:	ldr	r0, [r6, #8]
   1449c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   144a0:	ldr	r0, [r6, #24]
   144a4:	bl	1cc30 <__assert_fail@plt+0xb62c>
   144a8:	ldr	r3, [r6, #48]	; 0x30
   144ac:	tst	r3, #512	; 0x200
   144b0:	beq	1454c <__assert_fail@plt+0x2f48>
   144b4:	ldr	r0, [r6, #32]
   144b8:	cmp	r0, #0
   144bc:	blt	144cc <__assert_fail@plt+0x2ec8>
   144c0:	bl	115d4 <close@plt>
   144c4:	cmp	r0, #0
   144c8:	bne	1459c <__assert_fail@plt+0x2f98>
   144cc:	mov	r5, #0
   144d0:	add	r4, r6, #60	; 0x3c
   144d4:	b	144e4 <__assert_fail@plt+0x2ee0>
   144d8:	bl	16a6c <__assert_fail@plt+0x5468>
   144dc:	cmp	r0, #0
   144e0:	bge	14544 <__assert_fail@plt+0x2f40>
   144e4:	mov	r0, r4
   144e8:	bl	16a20 <__assert_fail@plt+0x541c>
   144ec:	cmp	r0, #0
   144f0:	mov	r0, r4
   144f4:	beq	144d8 <__assert_fail@plt+0x2ed4>
   144f8:	ldr	r0, [r6, #52]	; 0x34
   144fc:	cmp	r0, #0
   14500:	beq	14508 <__assert_fail@plt+0x2f04>
   14504:	bl	15bd8 <__assert_fail@plt+0x45d4>
   14508:	ldr	r2, [r6, #48]	; 0x30
   1450c:	ldr	r3, [pc, #204]	; 145e0 <__assert_fail@plt+0x2fdc>
   14510:	ldr	r0, [r6, #56]	; 0x38
   14514:	and	r3, r3, r2
   14518:	cmp	r3, #0
   1451c:	beq	14594 <__assert_fail@plt+0x2f90>
   14520:	cmp	r0, #0
   14524:	beq	1452c <__assert_fail@plt+0x2f28>
   14528:	bl	15bd8 <__assert_fail@plt+0x45d4>
   1452c:	mov	r0, r6
   14530:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14534:	cmp	r5, #0
   14538:	bne	145d0 <__assert_fail@plt+0x2fcc>
   1453c:	mov	r0, r5
   14540:	pop	{r4, r5, r6, pc}
   14544:	bl	115d4 <close@plt>
   14548:	b	144e4 <__assert_fail@plt+0x2ee0>
   1454c:	tst	r3, #4
   14550:	bne	144cc <__assert_fail@plt+0x2ec8>
   14554:	ldr	r0, [r6, #28]
   14558:	bl	11568 <fchdir@plt>
   1455c:	cmp	r0, #0
   14560:	beq	145b0 <__assert_fail@plt+0x2fac>
   14564:	bl	11484 <__errno_location@plt>
   14568:	mov	r4, r0
   1456c:	ldr	r0, [r6, #28]
   14570:	ldr	r5, [r4]
   14574:	bl	115d4 <close@plt>
   14578:	adds	r0, r0, #0
   1457c:	movne	r0, #1
   14580:	cmp	r5, #0
   14584:	movne	r0, #0
   14588:	cmp	r0, #0
   1458c:	beq	144d0 <__assert_fail@plt+0x2ecc>
   14590:	b	145c8 <__assert_fail@plt+0x2fc4>
   14594:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14598:	b	1452c <__assert_fail@plt+0x2f28>
   1459c:	bl	11484 <__errno_location@plt>
   145a0:	ldr	r5, [r0]
   145a4:	b	144d0 <__assert_fail@plt+0x2ecc>
   145a8:	mov	r4, r3
   145ac:	b	14460 <__assert_fail@plt+0x2e5c>
   145b0:	ldr	r0, [r6, #28]
   145b4:	bl	115d4 <close@plt>
   145b8:	cmp	r0, #0
   145bc:	beq	144cc <__assert_fail@plt+0x2ec8>
   145c0:	bl	11484 <__errno_location@plt>
   145c4:	mov	r4, r0
   145c8:	ldr	r5, [r4]
   145cc:	b	144d0 <__assert_fail@plt+0x2ecc>
   145d0:	bl	11484 <__errno_location@plt>
   145d4:	str	r5, [r0]
   145d8:	mvn	r5, #0
   145dc:	b	1453c <__assert_fail@plt+0x2f38>
   145e0:	andeq	r0, r0, r2, lsl #2
   145e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   145e8:	sub	sp, sp, #12
   145ec:	ldr	r4, [r0]
   145f0:	cmp	r4, #0
   145f4:	beq	14728 <__assert_fail@plt+0x3124>
   145f8:	ldr	r1, [r0, #48]	; 0x30
   145fc:	ands	r5, r1, #8192	; 0x2000
   14600:	bne	14728 <__assert_fail@plt+0x3124>
   14604:	ldrh	r3, [r4, #60]	; 0x3c
   14608:	mov	r2, #3
   1460c:	mov	r7, r0
   14610:	cmp	r3, #1
   14614:	strh	r2, [r4, #60]	; 0x3c
   14618:	beq	14aa0 <__assert_fail@plt+0x349c>
   1461c:	cmp	r3, #2
   14620:	beq	14738 <__assert_fail@plt+0x3134>
   14624:	ldrh	r2, [r4, #56]	; 0x38
   14628:	cmp	r2, #1
   1462c:	bne	14664 <__assert_fail@plt+0x3060>
   14630:	cmp	r3, #4
   14634:	bne	14750 <__assert_fail@plt+0x314c>
   14638:	b	1476c <__assert_fail@plt+0x3168>
   1463c:	str	r6, [r7]
   14640:	mov	r0, r4
   14644:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14648:	ldr	r3, [r6, #48]	; 0x30
   1464c:	cmp	r3, #0
   14650:	beq	147d8 <__assert_fail@plt+0x31d4>
   14654:	ldrh	r3, [r6, #60]	; 0x3c
   14658:	mov	r4, r6
   1465c:	cmp	r3, #4
   14660:	bne	1498c <__assert_fail@plt+0x3388>
   14664:	ldr	r6, [r4, #8]
   14668:	cmp	r6, #0
   1466c:	bne	1463c <__assert_fail@plt+0x3038>
   14670:	ldr	r6, [r4, #4]
   14674:	ldr	r3, [r6, #12]
   14678:	cmp	r3, #0
   1467c:	bne	14d30 <__assert_fail@plt+0x372c>
   14680:	str	r6, [r7]
   14684:	mov	r0, r4
   14688:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1468c:	ldr	r3, [r6, #48]	; 0x30
   14690:	cmn	r3, #1
   14694:	beq	14c20 <__assert_fail@plt+0x361c>
   14698:	ldrh	r3, [r6, #56]	; 0x38
   1469c:	cmp	r3, #11
   146a0:	beq	14a00 <__assert_fail@plt+0x33fc>
   146a4:	ldr	r3, [r6, #40]	; 0x28
   146a8:	ldr	r2, [r7, #24]
   146ac:	mov	r1, #0
   146b0:	strb	r1, [r2, r3]
   146b4:	ldr	r3, [r6, #48]	; 0x30
   146b8:	cmp	r3, r1
   146bc:	beq	14b1c <__assert_fail@plt+0x3518>
   146c0:	ldrh	r3, [r6, #58]	; 0x3a
   146c4:	tst	r3, #2
   146c8:	beq	14adc <__assert_fail@plt+0x34d8>
   146cc:	ldr	r3, [r7, #48]	; 0x30
   146d0:	tst	r3, #4
   146d4:	beq	14b90 <__assert_fail@plt+0x358c>
   146d8:	ldr	r0, [r6, #36]	; 0x24
   146dc:	bl	115d4 <close@plt>
   146e0:	ldr	r3, [r7, #48]	; 0x30
   146e4:	ldrh	r2, [r6, #56]	; 0x38
   146e8:	cmp	r2, #2
   146ec:	beq	14720 <__assert_fail@plt+0x311c>
   146f0:	ldr	r2, [r6, #32]
   146f4:	cmp	r2, #0
   146f8:	movne	r2, #7
   146fc:	strhne	r2, [r6, #56]	; 0x38
   14700:	bne	14720 <__assert_fail@plt+0x311c>
   14704:	mov	r2, #6
   14708:	mov	r0, r3
   1470c:	strh	r2, [r6, #56]	; 0x38
   14710:	add	r1, r7, #56	; 0x38
   14714:	mov	r2, r6
   14718:	bl	12da8 <__assert_fail@plt+0x17a4>
   1471c:	ldr	r3, [r7, #48]	; 0x30
   14720:	tst	r3, #8192	; 0x2000
   14724:	beq	147cc <__assert_fail@plt+0x31c8>
   14728:	mov	r6, #0
   1472c:	mov	r0, r6
   14730:	add	sp, sp, #12
   14734:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14738:	ldrh	r3, [r4, #56]	; 0x38
   1473c:	sub	r2, r3, #12
   14740:	cmp	r2, #1
   14744:	bls	14bd8 <__assert_fail@plt+0x35d4>
   14748:	cmp	r3, #1
   1474c:	bne	14664 <__assert_fail@plt+0x3060>
   14750:	tst	r1, #64	; 0x40
   14754:	beq	14a0c <__assert_fail@plt+0x3408>
   14758:	ldrd	r8, [r4, #64]	; 0x40
   1475c:	ldrd	r2, [r7, #16]
   14760:	cmp	r9, r3
   14764:	cmpeq	r8, r2
   14768:	beq	14a0c <__assert_fail@plt+0x3408>
   1476c:	ldrh	r3, [r4, #58]	; 0x3a
   14770:	tst	r3, #2
   14774:	bne	14d24 <__assert_fail@plt+0x3720>
   14778:	ldr	r5, [r7, #4]
   1477c:	cmp	r5, #0
   14780:	beq	147b0 <__assert_fail@plt+0x31ac>
   14784:	ldr	r0, [r5, #12]
   14788:	ldr	r6, [r5, #8]
   1478c:	cmp	r0, #0
   14790:	beq	14798 <__assert_fail@plt+0x3194>
   14794:	bl	115ec <closedir@plt>
   14798:	mov	r0, r5
   1479c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   147a0:	cmp	r6, #0
   147a4:	mov	r5, r6
   147a8:	bne	14784 <__assert_fail@plt+0x3180>
   147ac:	str	r6, [r7, #4]
   147b0:	mov	r3, #6
   147b4:	strh	r3, [r4, #56]	; 0x38
   147b8:	mov	r2, r4
   147bc:	add	r1, r7, #56	; 0x38
   147c0:	ldr	r0, [r7, #48]	; 0x30
   147c4:	mov	r6, r4
   147c8:	bl	12da8 <__assert_fail@plt+0x17a4>
   147cc:	mov	r0, r6
   147d0:	add	sp, sp, #12
   147d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   147d8:	ldr	r3, [r7, #48]	; 0x30
   147dc:	ands	r8, r3, #4
   147e0:	addne	r4, r7, #60	; 0x3c
   147e4:	bne	14818 <__assert_fail@plt+0x3214>
   147e8:	tst	r3, #512	; 0x200
   147ec:	bne	14c40 <__assert_fail@plt+0x363c>
   147f0:	ldr	r0, [r7, #28]
   147f4:	bl	11568 <fchdir@plt>
   147f8:	add	r4, r7, #60	; 0x3c
   147fc:	adds	r5, r0, #0
   14800:	movne	r5, #1
   14804:	b	14818 <__assert_fail@plt+0x3214>
   14808:	mov	r0, r4
   1480c:	bl	16a6c <__assert_fail@plt+0x5468>
   14810:	cmp	r0, #0
   14814:	bge	14a04 <__assert_fail@plt+0x3400>
   14818:	mov	r0, r4
   1481c:	bl	16a20 <__assert_fail@plt+0x541c>
   14820:	cmp	r0, #0
   14824:	beq	14808 <__assert_fail@plt+0x3204>
   14828:	cmp	r5, #0
   1482c:	bne	14d00 <__assert_fail@plt+0x36fc>
   14830:	ldr	r2, [r7, #48]	; 0x30
   14834:	ldr	r3, [pc, #1760]	; 14f1c <__assert_fail@plt+0x3918>
   14838:	ldr	r0, [r7, #56]	; 0x38
   1483c:	and	r3, r3, r2
   14840:	cmp	r3, #0
   14844:	beq	14cf8 <__assert_fail@plt+0x36f4>
   14848:	cmp	r0, #0
   1484c:	beq	14854 <__assert_fail@plt+0x3250>
   14850:	bl	15bd8 <__assert_fail@plt+0x45d4>
   14854:	ldr	r2, [r6, #52]	; 0x34
   14858:	add	r5, r6, #168	; 0xa8
   1485c:	str	r2, [r6, #40]	; 0x28
   14860:	mov	r1, r5
   14864:	add	r2, r2, #1
   14868:	ldr	r0, [r7, #24]
   1486c:	bl	1128c <memmove@plt>
   14870:	mov	r0, r5
   14874:	mov	r1, #47	; 0x2f
   14878:	bl	1152c <strrchr@plt>
   1487c:	cmp	r0, #0
   14880:	beq	148b0 <__assert_fail@plt+0x32ac>
   14884:	cmp	r5, r0
   14888:	beq	14d14 <__assert_fail@plt+0x3710>
   1488c:	add	r4, r0, #1
   14890:	mov	r0, r4
   14894:	bl	11460 <strlen@plt>
   14898:	mov	r1, r4
   1489c:	mov	r8, r0
   148a0:	add	r2, r8, #1
   148a4:	mov	r0, r5
   148a8:	bl	1128c <memmove@plt>
   148ac:	str	r8, [r6, #52]	; 0x34
   148b0:	ldr	r1, [r7, #48]	; 0x30
   148b4:	ldr	r3, [pc, #1632]	; 14f1c <__assert_fail@plt+0x3918>
   148b8:	ldr	r2, [r7, #24]
   148bc:	and	r3, r3, r1
   148c0:	cmp	r3, #0
   148c4:	str	r2, [r6, #28]
   148c8:	str	r2, [r6, #24]
   148cc:	beq	14abc <__assert_fail@plt+0x34b8>
   148d0:	ldr	r2, [pc, #1608]	; 14f20 <__assert_fail@plt+0x391c>
   148d4:	ldr	r3, [pc, #1608]	; 14f24 <__assert_fail@plt+0x3920>
   148d8:	str	r2, [sp]
   148dc:	mov	r1, #0
   148e0:	ldr	r2, [pc, #1600]	; 14f28 <__assert_fail@plt+0x3924>
   148e4:	mov	r0, #31
   148e8:	bl	158e8 <__assert_fail@plt+0x42e4>
   148ec:	ldrh	r3, [r6, #56]	; 0x38
   148f0:	str	r0, [r7, #56]	; 0x38
   148f4:	cmp	r3, #11
   148f8:	str	r6, [r7]
   148fc:	beq	149e4 <__assert_fail@plt+0x33e0>
   14900:	cmp	r3, #1
   14904:	bne	147cc <__assert_fail@plt+0x31c8>
   14908:	ldr	r3, [r6, #48]	; 0x30
   1490c:	cmp	r3, #0
   14910:	ldrdeq	r2, [r6, #64]	; 0x40
   14914:	strdeq	r2, [r7, #16]
   14918:	ldr	r2, [r7, #48]	; 0x30
   1491c:	ldr	r3, [pc, #1528]	; 14f1c <__assert_fail@plt+0x3918>
   14920:	and	r3, r3, r2
   14924:	cmp	r3, #0
   14928:	beq	14a80 <__assert_fail@plt+0x347c>
   1492c:	mov	r0, #24
   14930:	bl	1c620 <__assert_fail@plt+0xb01c>
   14934:	subs	r8, r0, #0
   14938:	beq	14c0c <__assert_fail@plt+0x3608>
   1493c:	ldrd	r4, [r6, #64]	; 0x40
   14940:	ldrd	r2, [r6, #160]	; 0xa0
   14944:	ldr	r0, [r7, #56]	; 0x38
   14948:	strd	r4, [r8]
   1494c:	strd	r2, [r8, #8]
   14950:	str	r6, [r8, #16]
   14954:	mov	r1, r8
   14958:	bl	16250 <__assert_fail@plt+0x4c4c>
   1495c:	cmp	r8, r0
   14960:	mov	r4, r0
   14964:	beq	147cc <__assert_fail@plt+0x31c8>
   14968:	mov	r0, r8
   1496c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14970:	cmp	r4, #0
   14974:	beq	14c0c <__assert_fail@plt+0x3608>
   14978:	ldr	r2, [r4, #16]
   1497c:	mov	r3, #2
   14980:	str	r2, [r6]
   14984:	strh	r3, [r6, #56]	; 0x38
   14988:	b	147cc <__assert_fail@plt+0x31c8>
   1498c:	cmp	r3, #2
   14990:	beq	14d64 <__assert_fail@plt+0x3760>
   14994:	ldr	r3, [r6, #4]
   14998:	mov	ip, #47	; 0x2f
   1499c:	ldr	r2, [r7, #24]
   149a0:	ldr	r0, [r3, #40]	; 0x28
   149a4:	ldr	lr, [r3, #28]
   149a8:	sub	r3, r0, #1
   149ac:	add	r1, r6, #168	; 0xa8
   149b0:	ldrb	lr, [lr, r3]
   149b4:	cmp	lr, ip
   149b8:	movne	r3, r0
   149bc:	add	r0, r2, r3
   149c0:	strb	ip, [r2, r3]
   149c4:	ldr	r2, [r6, #52]	; 0x34
   149c8:	add	r0, r0, #1
   149cc:	add	r2, r2, #1
   149d0:	bl	1128c <memmove@plt>
   149d4:	ldrh	r3, [r6, #56]	; 0x38
   149d8:	str	r6, [r7]
   149dc:	cmp	r3, #11
   149e0:	bne	14900 <__assert_fail@plt+0x32fc>
   149e4:	ldrd	r2, [r6, #112]	; 0x70
   149e8:	cmp	r3, #0
   149ec:	cmpeq	r2, #2
   149f0:	beq	14d90 <__assert_fail@plt+0x378c>
   149f4:	cmp	r3, #0
   149f8:	cmpeq	r2, #1
   149fc:	beq	147cc <__assert_fail@plt+0x31c8>
   14a00:	bl	115c8 <abort@plt>
   14a04:	bl	115d4 <close@plt>
   14a08:	b	14818 <__assert_fail@plt+0x3214>
   14a0c:	ldr	r5, [r7, #4]
   14a10:	cmp	r5, #0
   14a14:	beq	14ca0 <__assert_fail@plt+0x369c>
   14a18:	tst	r1, #4096	; 0x1000
   14a1c:	bne	14c6c <__assert_fail@plt+0x3668>
   14a20:	ldr	r3, [r4, #24]
   14a24:	mvn	r2, #0
   14a28:	mov	r1, r4
   14a2c:	mov	r0, r7
   14a30:	bl	12e60 <__assert_fail@plt+0x185c>
   14a34:	cmp	r0, #0
   14a38:	beq	14b80 <__assert_fail@plt+0x357c>
   14a3c:	bl	11484 <__errno_location@plt>
   14a40:	ldrh	r3, [r4, #58]	; 0x3a
   14a44:	ldr	r6, [r7, #4]
   14a48:	orr	r3, r3, #1
   14a4c:	cmp	r6, #0
   14a50:	ldr	r2, [r0]
   14a54:	strh	r3, [r4, #58]	; 0x3a
   14a58:	str	r2, [r4, #32]
   14a5c:	beq	14b84 <__assert_fail@plt+0x3580>
   14a60:	mov	r3, r6
   14a64:	ldr	r2, [r3, #4]
   14a68:	ldr	r2, [r2, #24]
   14a6c:	str	r2, [r3, #24]
   14a70:	ldr	r3, [r3, #8]
   14a74:	cmp	r3, #0
   14a78:	bne	14a64 <__assert_fail@plt+0x3460>
   14a7c:	b	14b84 <__assert_fail@plt+0x3580>
   14a80:	ldr	r0, [r7, #56]	; 0x38
   14a84:	add	r1, r6, #64	; 0x40
   14a88:	bl	1c858 <__assert_fail@plt+0xb254>
   14a8c:	cmp	r0, #0
   14a90:	movne	r3, #2
   14a94:	strne	r6, [r6]
   14a98:	strhne	r3, [r6, #56]	; 0x38
   14a9c:	b	147cc <__assert_fail@plt+0x31c8>
   14aa0:	mov	r3, r5
   14aa4:	ldr	r0, [r0, #32]
   14aa8:	mov	r2, r4
   14aac:	bl	12c5c <__assert_fail@plt+0x1658>
   14ab0:	mov	r6, r4
   14ab4:	strh	r0, [r4, #56]	; 0x38
   14ab8:	b	147cc <__assert_fail@plt+0x31c8>
   14abc:	mov	r0, #32
   14ac0:	bl	1c620 <__assert_fail@plt+0xb01c>
   14ac4:	cmp	r0, #0
   14ac8:	str	r0, [r7, #56]	; 0x38
   14acc:	beq	149d4 <__assert_fail@plt+0x33d0>
   14ad0:	bl	1c834 <__assert_fail@plt+0xb230>
   14ad4:	ldrh	r3, [r6, #56]	; 0x38
   14ad8:	b	148f4 <__assert_fail@plt+0x32f0>
   14adc:	tst	r3, #1
   14ae0:	bne	146e0 <__assert_fail@plt+0x30dc>
   14ae4:	ldr	r3, [pc, #1088]	; 14f2c <__assert_fail@plt+0x3928>
   14ae8:	mvn	r2, #0
   14aec:	ldr	r1, [r6, #4]
   14af0:	mov	r0, r7
   14af4:	bl	12e60 <__assert_fail@plt+0x185c>
   14af8:	cmp	r0, #0
   14afc:	beq	146e0 <__assert_fail@plt+0x30dc>
   14b00:	bl	11484 <__errno_location@plt>
   14b04:	ldr	r3, [r7, #48]	; 0x30
   14b08:	orr	r3, r3, #8192	; 0x2000
   14b0c:	ldr	r2, [r0]
   14b10:	str	r2, [r6, #32]
   14b14:	str	r3, [r7, #48]	; 0x30
   14b18:	b	146e4 <__assert_fail@plt+0x30e0>
   14b1c:	ldr	r3, [r7, #48]	; 0x30
   14b20:	ands	r8, r3, #4
   14b24:	addne	r4, r7, #60	; 0x3c
   14b28:	bne	14b5c <__assert_fail@plt+0x3558>
   14b2c:	tst	r3, #512	; 0x200
   14b30:	bne	14ddc <__assert_fail@plt+0x37d8>
   14b34:	ldr	r0, [r7, #28]
   14b38:	bl	11568 <fchdir@plt>
   14b3c:	add	r4, r7, #60	; 0x3c
   14b40:	adds	r5, r0, #0
   14b44:	movne	r5, #1
   14b48:	b	14b5c <__assert_fail@plt+0x3558>
   14b4c:	mov	r0, r4
   14b50:	bl	16a6c <__assert_fail@plt+0x5468>
   14b54:	cmp	r0, #0
   14b58:	bge	14b78 <__assert_fail@plt+0x3574>
   14b5c:	mov	r0, r4
   14b60:	bl	16a20 <__assert_fail@plt+0x541c>
   14b64:	cmp	r0, #0
   14b68:	beq	14b4c <__assert_fail@plt+0x3548>
   14b6c:	cmp	r5, #0
   14b70:	bne	14b00 <__assert_fail@plt+0x34fc>
   14b74:	b	146e0 <__assert_fail@plt+0x30dc>
   14b78:	bl	115d4 <close@plt>
   14b7c:	b	14b5c <__assert_fail@plt+0x3558>
   14b80:	ldr	r6, [r7, #4]
   14b84:	mov	r3, #0
   14b88:	str	r3, [r7, #4]
   14b8c:	b	14994 <__assert_fail@plt+0x3390>
   14b90:	tst	r3, #512	; 0x200
   14b94:	beq	14db0 <__assert_fail@plt+0x37ac>
   14b98:	ldr	r1, [r7, #32]
   14b9c:	ldr	r4, [r6, #36]	; 0x24
   14ba0:	cmn	r1, #100	; 0x64
   14ba4:	sub	r3, r4, r1
   14ba8:	clz	r3, r3
   14bac:	lsr	r3, r3, #5
   14bb0:	moveq	r3, #0
   14bb4:	cmp	r3, #0
   14bb8:	bne	14a00 <__assert_fail@plt+0x33fc>
   14bbc:	add	r0, r7, #60	; 0x3c
   14bc0:	bl	16a28 <__assert_fail@plt+0x5424>
   14bc4:	cmp	r0, #0
   14bc8:	blt	14bd0 <__assert_fail@plt+0x35cc>
   14bcc:	bl	115d4 <close@plt>
   14bd0:	str	r4, [r7, #32]
   14bd4:	b	146d8 <__assert_fail@plt+0x30d4>
   14bd8:	mov	r3, #1
   14bdc:	mov	r2, r4
   14be0:	ldr	r0, [r0, #32]
   14be4:	bl	12c5c <__assert_fail@plt+0x1658>
   14be8:	cmp	r0, #1
   14bec:	strh	r0, [r4, #56]	; 0x38
   14bf0:	mov	r3, r0
   14bf4:	beq	14e1c <__assert_fail@plt+0x3818>
   14bf8:	cmp	r0, #11
   14bfc:	mov	r6, r4
   14c00:	str	r4, [r7]
   14c04:	bne	147cc <__assert_fail@plt+0x31c8>
   14c08:	b	149e4 <__assert_fail@plt+0x33e0>
   14c0c:	bl	11484 <__errno_location@plt>
   14c10:	mov	r3, #12
   14c14:	mov	r6, #0
   14c18:	str	r3, [r0]
   14c1c:	b	147cc <__assert_fail@plt+0x31c8>
   14c20:	mov	r0, r6
   14c24:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14c28:	bl	11484 <__errno_location@plt>
   14c2c:	mov	r3, #0
   14c30:	mov	r6, r3
   14c34:	str	r3, [r0]
   14c38:	str	r3, [r7]
   14c3c:	b	147cc <__assert_fail@plt+0x31c8>
   14c40:	add	r4, r7, #60	; 0x3c
   14c44:	mov	r0, r4
   14c48:	ldr	r1, [r7, #32]
   14c4c:	bl	16a28 <__assert_fail@plt+0x5424>
   14c50:	cmp	r0, #0
   14c54:	blt	14c5c <__assert_fail@plt+0x3658>
   14c58:	bl	115d4 <close@plt>
   14c5c:	mvn	r3, #99	; 0x63
   14c60:	mov	r5, r8
   14c64:	str	r3, [r7, #32]
   14c68:	b	14818 <__assert_fail@plt+0x3214>
   14c6c:	bic	ip, r1, #4096	; 0x1000
   14c70:	str	ip, [r7, #48]	; 0x30
   14c74:	ldr	r0, [r5, #12]
   14c78:	ldr	r6, [r5, #8]
   14c7c:	cmp	r0, #0
   14c80:	beq	14c88 <__assert_fail@plt+0x3684>
   14c84:	bl	115ec <closedir@plt>
   14c88:	mov	r0, r5
   14c8c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14c90:	cmp	r6, #0
   14c94:	mov	r5, r6
   14c98:	bne	14c74 <__assert_fail@plt+0x3670>
   14c9c:	str	r6, [r7, #4]
   14ca0:	mov	r1, #3
   14ca4:	mov	r0, r7
   14ca8:	bl	130f8 <__assert_fail@plt+0x1af4>
   14cac:	cmp	r0, #0
   14cb0:	mov	r6, r0
   14cb4:	str	r0, [r7, #4]
   14cb8:	bne	14b84 <__assert_fail@plt+0x3580>
   14cbc:	ldr	r0, [r7, #48]	; 0x30
   14cc0:	tst	r0, #8192	; 0x2000
   14cc4:	bne	14728 <__assert_fail@plt+0x3124>
   14cc8:	ldr	r3, [r4, #32]
   14ccc:	cmp	r3, #0
   14cd0:	beq	14ce4 <__assert_fail@plt+0x36e0>
   14cd4:	ldrh	r3, [r4, #56]	; 0x38
   14cd8:	cmp	r3, #4
   14cdc:	movne	r3, #7
   14ce0:	strhne	r3, [r4, #56]	; 0x38
   14ce4:	add	r1, r7, #56	; 0x38
   14ce8:	mov	r2, r4
   14cec:	bl	12da8 <__assert_fail@plt+0x17a4>
   14cf0:	mov	r6, r4
   14cf4:	b	147cc <__assert_fail@plt+0x31c8>
   14cf8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14cfc:	b	14854 <__assert_fail@plt+0x3250>
   14d00:	ldr	r3, [r7, #48]	; 0x30
   14d04:	mov	r6, #0
   14d08:	orr	r3, r3, #8192	; 0x2000
   14d0c:	str	r3, [r7, #48]	; 0x30
   14d10:	b	147cc <__assert_fail@plt+0x31c8>
   14d14:	ldrb	r3, [r6, #169]	; 0xa9
   14d18:	cmp	r3, #0
   14d1c:	bne	1488c <__assert_fail@plt+0x3288>
   14d20:	b	148b0 <__assert_fail@plt+0x32ac>
   14d24:	ldr	r0, [r4, #36]	; 0x24
   14d28:	bl	115d4 <close@plt>
   14d2c:	b	14778 <__assert_fail@plt+0x3174>
   14d30:	ldr	r3, [r6, #40]	; 0x28
   14d34:	ldr	r2, [r7, #24]
   14d38:	mov	r0, #0
   14d3c:	str	r6, [r7]
   14d40:	mov	r1, #3
   14d44:	strb	r0, [r2, r3]
   14d48:	mov	r0, r7
   14d4c:	bl	130f8 <__assert_fail@plt+0x1af4>
   14d50:	subs	r6, r0, #0
   14d54:	beq	14e08 <__assert_fail@plt+0x3804>
   14d58:	mov	r0, r4
   14d5c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14d60:	b	14994 <__assert_fail@plt+0x3390>
   14d64:	mov	r3, #1
   14d68:	mov	r2, r6
   14d6c:	ldr	r1, [r7, #48]	; 0x30
   14d70:	ldr	r0, [r7, #32]
   14d74:	bl	12c5c <__assert_fail@plt+0x1658>
   14d78:	cmp	r0, #1
   14d7c:	strh	r0, [r6, #56]	; 0x38
   14d80:	beq	14e34 <__assert_fail@plt+0x3830>
   14d84:	mov	r3, #3
   14d88:	strh	r3, [r6, #60]	; 0x3c
   14d8c:	b	14994 <__assert_fail@plt+0x3390>
   14d90:	mov	r3, #0
   14d94:	mov	r2, r6
   14d98:	ldr	r1, [r7, #48]	; 0x30
   14d9c:	ldr	r0, [r7, #32]
   14da0:	bl	12c5c <__assert_fail@plt+0x1658>
   14da4:	mov	r3, r0
   14da8:	strh	r0, [r6, #56]	; 0x38
   14dac:	b	14900 <__assert_fail@plt+0x32fc>
   14db0:	ldr	r0, [r6, #36]	; 0x24
   14db4:	bl	11568 <fchdir@plt>
   14db8:	cmp	r0, #0
   14dbc:	beq	146d8 <__assert_fail@plt+0x30d4>
   14dc0:	bl	11484 <__errno_location@plt>
   14dc4:	ldr	r3, [r7, #48]	; 0x30
   14dc8:	orr	r3, r3, #8192	; 0x2000
   14dcc:	ldr	r2, [r0]
   14dd0:	str	r2, [r6, #32]
   14dd4:	str	r3, [r7, #48]	; 0x30
   14dd8:	b	146d8 <__assert_fail@plt+0x30d4>
   14ddc:	add	r4, r7, #60	; 0x3c
   14de0:	mov	r0, r4
   14de4:	ldr	r1, [r7, #32]
   14de8:	bl	16a28 <__assert_fail@plt+0x5424>
   14dec:	cmp	r0, #0
   14df0:	blt	14df8 <__assert_fail@plt+0x37f4>
   14df4:	bl	115d4 <close@plt>
   14df8:	mvn	r3, #99	; 0x63
   14dfc:	mov	r5, r8
   14e00:	str	r3, [r7, #32]
   14e04:	b	14b5c <__assert_fail@plt+0x3558>
   14e08:	ldr	r3, [r7, #48]	; 0x30
   14e0c:	tst	r3, #8192	; 0x2000
   14e10:	bne	14728 <__assert_fail@plt+0x3124>
   14e14:	ldr	r6, [r4, #4]
   14e18:	b	14680 <__assert_fail@plt+0x307c>
   14e1c:	ldr	r1, [r7, #48]	; 0x30
   14e20:	tst	r1, #4
   14e24:	beq	14e80 <__assert_fail@plt+0x387c>
   14e28:	str	r4, [r7]
   14e2c:	mov	r6, r4
   14e30:	b	14900 <__assert_fail@plt+0x32fc>
   14e34:	ldr	r3, [r7, #48]	; 0x30
   14e38:	tst	r3, #4
   14e3c:	bne	14d84 <__assert_fail@plt+0x3780>
   14e40:	ldr	r1, [pc, #232]	; 14f30 <__assert_fail@plt+0x392c>
   14e44:	tst	r3, #16
   14e48:	ldr	r2, [pc, #228]	; 14f34 <__assert_fail@plt+0x3930>
   14e4c:	movne	r2, r1
   14e50:	tst	r3, #512	; 0x200
   14e54:	bne	14ee0 <__assert_fail@plt+0x38dc>
   14e58:	mov	r1, r2
   14e5c:	ldr	r0, [pc, #212]	; 14f38 <__assert_fail@plt+0x3934>
   14e60:	bl	1cb98 <__assert_fail@plt+0xb594>
   14e64:	cmp	r0, #0
   14e68:	str	r0, [r6, #36]	; 0x24
   14e6c:	blt	14ec8 <__assert_fail@plt+0x38c4>
   14e70:	ldrh	r3, [r6, #58]	; 0x3a
   14e74:	orr	r3, r3, #2
   14e78:	strh	r3, [r6, #58]	; 0x3a
   14e7c:	b	14d84 <__assert_fail@plt+0x3780>
   14e80:	ldr	r3, [pc, #168]	; 14f30 <__assert_fail@plt+0x392c>
   14e84:	tst	r1, #16
   14e88:	ldr	r2, [pc, #164]	; 14f34 <__assert_fail@plt+0x3930>
   14e8c:	movne	r2, r3
   14e90:	tst	r1, #512	; 0x200
   14e94:	bne	14f0c <__assert_fail@plt+0x3908>
   14e98:	mov	r1, r2
   14e9c:	ldr	r0, [pc, #148]	; 14f38 <__assert_fail@plt+0x3934>
   14ea0:	bl	1cb98 <__assert_fail@plt+0xb594>
   14ea4:	cmp	r0, #0
   14ea8:	str	r0, [r4, #36]	; 0x24
   14eac:	blt	14ef0 <__assert_fail@plt+0x38ec>
   14eb0:	ldrh	r2, [r4, #58]	; 0x3a
   14eb4:	ldrh	r3, [r4, #56]	; 0x38
   14eb8:	mov	r6, r4
   14ebc:	orr	r2, r2, #2
   14ec0:	strh	r2, [r4, #58]	; 0x3a
   14ec4:	b	148f4 <__assert_fail@plt+0x32f0>
   14ec8:	bl	11484 <__errno_location@plt>
   14ecc:	mov	r2, #7
   14ed0:	ldr	r3, [r0]
   14ed4:	strh	r2, [r6, #56]	; 0x38
   14ed8:	str	r3, [r6, #32]
   14edc:	b	14d84 <__assert_fail@plt+0x3780>
   14ee0:	ldr	r1, [pc, #80]	; 14f38 <__assert_fail@plt+0x3934>
   14ee4:	ldr	r0, [r7, #32]
   14ee8:	bl	16ab4 <__assert_fail@plt+0x54b0>
   14eec:	b	14e64 <__assert_fail@plt+0x3860>
   14ef0:	bl	11484 <__errno_location@plt>
   14ef4:	mov	r2, #7
   14ef8:	mov	r3, r2
   14efc:	ldr	r1, [r0]
   14f00:	strh	r2, [r4, #56]	; 0x38
   14f04:	str	r1, [r4, #32]
   14f08:	b	14e28 <__assert_fail@plt+0x3824>
   14f0c:	ldr	r1, [pc, #36]	; 14f38 <__assert_fail@plt+0x3934>
   14f10:	ldr	r0, [r7, #32]
   14f14:	bl	16ab4 <__assert_fail@plt+0x54b0>
   14f18:	b	14ea4 <__assert_fail@plt+0x38a0>
   14f1c:	andeq	r0, r0, r2, lsl #2
   14f20:	andeq	ip, r1, r0, lsr ip
   14f24:	andeq	r2, r1, ip, ror sl
   14f28:	andeq	r2, r1, r0, asr #21
   14f2c:	andeq	lr, r1, ip, lsl #16
   14f30:	andeq	ip, r8, r0, lsl #18
   14f34:	andeq	r4, r8, r0, lsl #18
   14f38:	andeq	lr, r1, r0, lsl r8
   14f3c:	cmp	r2, #4
   14f40:	bhi	14f54 <__assert_fail@plt+0x3950>
   14f44:	mov	r3, #0
   14f48:	strh	r2, [r1, #60]	; 0x3c
   14f4c:	mov	r0, r3
   14f50:	bx	lr
   14f54:	push	{r4, lr}
   14f58:	bl	11484 <__errno_location@plt>
   14f5c:	mov	r2, #22
   14f60:	mov	r3, #1
   14f64:	str	r2, [r0]
   14f68:	mov	r0, r3
   14f6c:	pop	{r4, pc}
   14f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f74:	bics	r4, r1, #4096	; 0x1000
   14f78:	bne	150ec <__assert_fail@plt+0x3ae8>
   14f7c:	mov	r6, r0
   14f80:	mov	r7, r1
   14f84:	bl	11484 <__errno_location@plt>
   14f88:	ldr	r8, [r6]
   14f8c:	str	r4, [r0]
   14f90:	ldr	r3, [r6, #48]	; 0x30
   14f94:	mov	r9, r0
   14f98:	ands	r3, r3, #8192	; 0x2000
   14f9c:	bne	15104 <__assert_fail@plt+0x3b00>
   14fa0:	ldrh	r2, [r8, #56]	; 0x38
   14fa4:	cmp	r2, #9
   14fa8:	ldreq	r3, [r8, #8]
   14fac:	beq	15030 <__assert_fail@plt+0x3a2c>
   14fb0:	cmp	r2, #1
   14fb4:	bne	15030 <__assert_fail@plt+0x3a2c>
   14fb8:	ldr	r4, [r6, #4]
   14fbc:	cmp	r4, #0
   14fc0:	beq	14fe8 <__assert_fail@plt+0x39e4>
   14fc4:	ldr	r0, [r4, #12]
   14fc8:	ldr	r5, [r4, #8]
   14fcc:	cmp	r0, #0
   14fd0:	beq	14fd8 <__assert_fail@plt+0x39d4>
   14fd4:	bl	115ec <closedir@plt>
   14fd8:	mov	r0, r4
   14fdc:	bl	1cc30 <__assert_fail@plt+0xb62c>
   14fe0:	subs	r4, r5, #0
   14fe4:	bne	14fc4 <__assert_fail@plt+0x39c0>
   14fe8:	cmp	r7, #4096	; 0x1000
   14fec:	movne	r4, #1
   14ff0:	beq	15038 <__assert_fail@plt+0x3a34>
   14ff4:	ldr	r3, [r8, #48]	; 0x30
   14ff8:	cmp	r3, #0
   14ffc:	bne	1501c <__assert_fail@plt+0x3a18>
   15000:	ldr	r3, [r8, #24]
   15004:	ldrb	r3, [r3]
   15008:	cmp	r3, #47	; 0x2f
   1500c:	beq	1501c <__assert_fail@plt+0x3a18>
   15010:	ldr	r3, [r6, #48]	; 0x30
   15014:	tst	r3, #4
   15018:	beq	15058 <__assert_fail@plt+0x3a54>
   1501c:	mov	r1, r4
   15020:	mov	r0, r6
   15024:	bl	130f8 <__assert_fail@plt+0x1af4>
   15028:	mov	r3, r0
   1502c:	str	r0, [r6, #4]
   15030:	mov	r0, r3
   15034:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15038:	ldr	r3, [r6, #48]	; 0x30
   1503c:	mov	r4, #2
   15040:	orr	r3, r3, #4096	; 0x1000
   15044:	str	r3, [r6, #48]	; 0x30
   15048:	ldr	r3, [r8, #48]	; 0x30
   1504c:	cmp	r3, #0
   15050:	beq	15000 <__assert_fail@plt+0x39fc>
   15054:	b	1501c <__assert_fail@plt+0x3a18>
   15058:	ldr	r2, [pc, #252]	; 1515c <__assert_fail@plt+0x3b58>
   1505c:	tst	r3, #16
   15060:	ldr	r1, [pc, #248]	; 15160 <__assert_fail@plt+0x3b5c>
   15064:	moveq	r1, r2
   15068:	tst	r3, #512	; 0x200
   1506c:	bne	15128 <__assert_fail@plt+0x3b24>
   15070:	ldr	r0, [pc, #236]	; 15164 <__assert_fail@plt+0x3b60>
   15074:	bl	1cb98 <__assert_fail@plt+0xb594>
   15078:	mov	r5, r0
   1507c:	cmp	r5, #0
   15080:	movlt	r3, #0
   15084:	strlt	r3, [r6, #4]
   15088:	blt	15030 <__assert_fail@plt+0x3a2c>
   1508c:	mov	r1, r4
   15090:	mov	r0, r6
   15094:	bl	130f8 <__assert_fail@plt+0x1af4>
   15098:	ldr	r3, [r6, #48]	; 0x30
   1509c:	ands	r4, r3, #512	; 0x200
   150a0:	str	r0, [r6, #4]
   150a4:	beq	1510c <__assert_fail@plt+0x3b08>
   150a8:	ldr	r1, [r6, #32]
   150ac:	cmn	r1, #100	; 0x64
   150b0:	sub	r3, r5, r1
   150b4:	clz	r3, r3
   150b8:	lsr	r3, r3, #5
   150bc:	moveq	r3, #0
   150c0:	cmp	r3, #0
   150c4:	bne	15158 <__assert_fail@plt+0x3b54>
   150c8:	add	r0, r6, #60	; 0x3c
   150cc:	bl	16a28 <__assert_fail@plt+0x5424>
   150d0:	cmp	r0, #0
   150d4:	blt	150dc <__assert_fail@plt+0x3ad8>
   150d8:	bl	115d4 <close@plt>
   150dc:	str	r5, [r6, #32]
   150e0:	ldr	r3, [r6, #4]
   150e4:	mov	r0, r3
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150ec:	bl	11484 <__errno_location@plt>
   150f0:	mov	r2, #22
   150f4:	mov	r3, #0
   150f8:	str	r2, [r0]
   150fc:	mov	r0, r3
   15100:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15104:	mov	r3, r4
   15108:	b	15030 <__assert_fail@plt+0x3a2c>
   1510c:	mov	r0, r5
   15110:	bl	11568 <fchdir@plt>
   15114:	cmp	r0, #0
   15118:	bne	15140 <__assert_fail@plt+0x3b3c>
   1511c:	mov	r0, r5
   15120:	bl	115d4 <close@plt>
   15124:	b	150e0 <__assert_fail@plt+0x3adc>
   15128:	mov	r2, r1
   1512c:	ldr	r0, [r6, #32]
   15130:	ldr	r1, [pc, #44]	; 15164 <__assert_fail@plt+0x3b60>
   15134:	bl	16ab4 <__assert_fail@plt+0x54b0>
   15138:	mov	r5, r0
   1513c:	b	1507c <__assert_fail@plt+0x3a78>
   15140:	ldr	r6, [r9]
   15144:	mov	r0, r5
   15148:	bl	115d4 <close@plt>
   1514c:	str	r6, [r9]
   15150:	mov	r3, r4
   15154:	b	15030 <__assert_fail@plt+0x3a2c>
   15158:	bl	115c8 <abort@plt>
   1515c:	andeq	r4, r8, r0, lsl #18
   15160:	andeq	ip, r8, r0, lsl #18
   15164:	andeq	lr, r1, r0, lsl r8
   15168:	push	{r4, lr}
   1516c:	ror	r0, r0, #3
   15170:	bl	1d520 <__assert_fail@plt+0xbf1c>
   15174:	mov	r0, r1
   15178:	pop	{r4, pc}
   1517c:	sub	r0, r1, r0
   15180:	clz	r0, r0
   15184:	lsr	r0, r0, #5
   15188:	bx	lr
   1518c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15190:	mov	r5, r1
   15194:	mov	r6, r0
   15198:	ldr	r4, [r0, #24]
   1519c:	ldr	r1, [r0, #8]
   151a0:	mov	r0, r5
   151a4:	mov	r8, r3
   151a8:	mov	sl, r2
   151ac:	blx	r4
   151b0:	ldr	r3, [r6, #8]
   151b4:	cmp	r0, r3
   151b8:	bcs	152a8 <__assert_fail@plt+0x3ca4>
   151bc:	ldr	r9, [r6]
   151c0:	mov	r7, r0
   151c4:	add	r4, r9, r0, lsl #3
   151c8:	str	r4, [sl]
   151cc:	ldr	r3, [r9, r0, lsl #3]
   151d0:	cmp	r3, #0
   151d4:	beq	15268 <__assert_fail@plt+0x3c64>
   151d8:	cmp	r5, r3
   151dc:	beq	151fc <__assert_fail@plt+0x3bf8>
   151e0:	mov	r1, r3
   151e4:	mov	r0, r5
   151e8:	ldr	r3, [r6, #28]
   151ec:	blx	r3
   151f0:	cmp	r0, #0
   151f4:	beq	1525c <__assert_fail@plt+0x3c58>
   151f8:	ldr	r3, [r9, r7, lsl #3]
   151fc:	cmp	r8, #0
   15200:	beq	1522c <__assert_fail@plt+0x3c28>
   15204:	ldr	r2, [r4, #4]
   15208:	cmp	r2, #0
   1520c:	movne	ip, #0
   15210:	ldmne	r2, {r0, r1}
   15214:	streq	r2, [r9, r7, lsl #3]
   15218:	stmne	r4, {r0, r1}
   1521c:	strne	ip, [r2]
   15220:	ldrne	r1, [r6, #36]	; 0x24
   15224:	strne	r1, [r2, #4]
   15228:	strne	r2, [r6, #36]	; 0x24
   1522c:	mov	r0, r3
   15230:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15234:	ldr	r3, [r2]
   15238:	cmp	r5, r3
   1523c:	beq	1527c <__assert_fail@plt+0x3c78>
   15240:	mov	r1, r3
   15244:	mov	r0, r5
   15248:	ldr	r3, [r6, #28]
   1524c:	blx	r3
   15250:	cmp	r0, #0
   15254:	bne	15274 <__assert_fail@plt+0x3c70>
   15258:	ldr	r4, [r4, #4]
   1525c:	ldr	r2, [r4, #4]
   15260:	cmp	r2, #0
   15264:	bne	15234 <__assert_fail@plt+0x3c30>
   15268:	mov	r3, #0
   1526c:	mov	r0, r3
   15270:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15274:	ldr	r2, [r4, #4]
   15278:	ldr	r3, [r2]
   1527c:	cmp	r8, #0
   15280:	beq	1522c <__assert_fail@plt+0x3c28>
   15284:	ldr	r0, [r2, #4]
   15288:	mov	r1, #0
   1528c:	str	r0, [r4, #4]
   15290:	str	r1, [r2]
   15294:	ldr	r1, [r6, #36]	; 0x24
   15298:	mov	r0, r3
   1529c:	str	r1, [r2, #4]
   152a0:	str	r2, [r6, #36]	; 0x24
   152a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   152a8:	bl	115c8 <abort@plt>
   152ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b0:	ldr	r6, [r1]
   152b4:	ldr	r3, [r1, #4]
   152b8:	cmp	r6, r3
   152bc:	bcs	1538c <__assert_fail@plt+0x3d88>
   152c0:	mov	r9, r2
   152c4:	mov	r5, r0
   152c8:	mov	r8, r1
   152cc:	add	r6, r6, #8
   152d0:	mov	sl, #0
   152d4:	ldr	fp, [r6, #-8]
   152d8:	mov	r7, r6
   152dc:	cmp	fp, #0
   152e0:	beq	15380 <__assert_fail@plt+0x3d7c>
   152e4:	ldr	r4, [r6, #-4]
   152e8:	cmp	r4, #0
   152ec:	beq	15370 <__assert_fail@plt+0x3d6c>
   152f0:	ldr	r1, [r5, #8]
   152f4:	b	15310 <__assert_fail@plt+0x3d0c>
   152f8:	ldr	r3, [ip, #4]
   152fc:	cmp	r2, #0
   15300:	str	r3, [r4, #4]
   15304:	str	r4, [ip, #4]
   15308:	beq	1536c <__assert_fail@plt+0x3d68>
   1530c:	mov	r4, r2
   15310:	ldr	fp, [r4]
   15314:	ldr	r3, [r5, #24]
   15318:	mov	r0, fp
   1531c:	blx	r3
   15320:	ldr	r1, [r5, #8]
   15324:	cmp	r0, r1
   15328:	bcs	1542c <__assert_fail@plt+0x3e28>
   1532c:	ldr	r3, [r5]
   15330:	ldr	r2, [r4, #4]
   15334:	add	ip, r3, r0, lsl #3
   15338:	ldr	lr, [r3, r0, lsl #3]
   1533c:	cmp	lr, #0
   15340:	bne	152f8 <__assert_fail@plt+0x3cf4>
   15344:	ldr	ip, [r5, #12]
   15348:	str	fp, [r3, r0, lsl #3]
   1534c:	add	r3, ip, #1
   15350:	str	r3, [r5, #12]
   15354:	str	lr, [r4]
   15358:	ldr	r3, [r5, #36]	; 0x24
   1535c:	cmp	r2, #0
   15360:	str	r3, [r4, #4]
   15364:	str	r4, [r5, #36]	; 0x24
   15368:	bne	1530c <__assert_fail@plt+0x3d08>
   1536c:	ldr	fp, [r6, #-8]
   15370:	cmp	r9, #0
   15374:	str	sl, [r6, #-4]
   15378:	beq	15394 <__assert_fail@plt+0x3d90>
   1537c:	ldr	r3, [r8, #4]
   15380:	cmp	r3, r7
   15384:	add	r6, r6, #8
   15388:	bhi	152d4 <__assert_fail@plt+0x3cd0>
   1538c:	mov	r0, #1
   15390:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15394:	ldr	r3, [r5, #24]
   15398:	ldr	r1, [r5, #8]
   1539c:	mov	r0, fp
   153a0:	blx	r3
   153a4:	ldr	r3, [r5, #8]
   153a8:	cmp	r0, r3
   153ac:	bcs	1542c <__assert_fail@plt+0x3e28>
   153b0:	ldr	r3, [r5]
   153b4:	add	r4, r3, r0, lsl #3
   153b8:	ldr	r2, [r3, r0, lsl #3]
   153bc:	cmp	r2, #0
   153c0:	beq	15400 <__assert_fail@plt+0x3dfc>
   153c4:	ldr	r0, [r5, #36]	; 0x24
   153c8:	cmp	r0, #0
   153cc:	beq	15414 <__assert_fail@plt+0x3e10>
   153d0:	ldr	r3, [r0, #4]
   153d4:	str	r3, [r5, #36]	; 0x24
   153d8:	ldr	r3, [r4, #4]
   153dc:	str	fp, [r0]
   153e0:	str	r3, [r0, #4]
   153e4:	str	r0, [r4, #4]
   153e8:	ldr	r2, [r8, #12]
   153ec:	str	sl, [r6, #-8]
   153f0:	sub	r2, r2, #1
   153f4:	ldr	r3, [r8, #4]
   153f8:	str	r2, [r8, #12]
   153fc:	b	15380 <__assert_fail@plt+0x3d7c>
   15400:	ldr	r2, [r5, #12]
   15404:	str	fp, [r3, r0, lsl #3]
   15408:	add	r3, r2, #1
   1540c:	str	r3, [r5, #12]
   15410:	b	153e8 <__assert_fail@plt+0x3de4>
   15414:	mov	r0, #8
   15418:	bl	1c620 <__assert_fail@plt+0xb01c>
   1541c:	cmp	r0, #0
   15420:	bne	153d8 <__assert_fail@plt+0x3dd4>
   15424:	mov	r0, r9
   15428:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1542c:	bl	115c8 <abort@plt>
   15430:	ldr	r0, [r0, #8]
   15434:	bx	lr
   15438:	ldr	r0, [r0, #12]
   1543c:	bx	lr
   15440:	ldr	r0, [r0, #16]
   15444:	bx	lr
   15448:	ldm	r0, {r1, ip}
   1544c:	mov	r0, #0
   15450:	cmp	r1, ip
   15454:	bcs	1549c <__assert_fail@plt+0x3e98>
   15458:	ldr	r3, [r1]
   1545c:	cmp	r3, #0
   15460:	beq	1548c <__assert_fail@plt+0x3e88>
   15464:	ldr	r3, [r1, #4]
   15468:	mov	r2, #1
   1546c:	cmp	r3, #0
   15470:	beq	15484 <__assert_fail@plt+0x3e80>
   15474:	ldr	r3, [r3, #4]
   15478:	add	r2, r2, #1
   1547c:	cmp	r3, #0
   15480:	bne	15474 <__assert_fail@plt+0x3e70>
   15484:	cmp	r0, r2
   15488:	movcc	r0, r2
   1548c:	add	r1, r1, #8
   15490:	cmp	r1, ip
   15494:	bcc	15458 <__assert_fail@plt+0x3e54>
   15498:	bx	lr
   1549c:	bx	lr
   154a0:	push	{lr}		; (str lr, [sp, #-4]!)
   154a4:	mov	r2, #0
   154a8:	ldm	r0, {r1, lr}
   154ac:	mov	ip, r2
   154b0:	cmp	r1, lr
   154b4:	bcs	154f4 <__assert_fail@plt+0x3ef0>
   154b8:	ldr	r3, [r1]
   154bc:	cmp	r3, #0
   154c0:	beq	154e8 <__assert_fail@plt+0x3ee4>
   154c4:	ldr	r3, [r1, #4]
   154c8:	add	ip, ip, #1
   154cc:	cmp	r3, #0
   154d0:	add	r2, r2, #1
   154d4:	beq	154e8 <__assert_fail@plt+0x3ee4>
   154d8:	ldr	r3, [r3, #4]
   154dc:	add	r2, r2, #1
   154e0:	cmp	r3, #0
   154e4:	bne	154d8 <__assert_fail@plt+0x3ed4>
   154e8:	add	r1, r1, #8
   154ec:	cmp	r1, lr
   154f0:	bcc	154b8 <__assert_fail@plt+0x3eb4>
   154f4:	ldr	r3, [r0, #12]
   154f8:	cmp	r3, ip
   154fc:	ldreq	r0, [r0, #16]
   15500:	subeq	r0, r0, r2
   15504:	clzeq	r0, r0
   15508:	lsreq	r0, r0, #5
   1550c:	movne	r0, #0
   15510:	pop	{pc}		; (ldr pc, [sp], #4)
   15514:	push	{r4, r5, r6, r7, lr}
   15518:	mov	r5, r1
   1551c:	ldm	r0, {ip, lr}
   15520:	sub	sp, sp, #12
   15524:	ldr	r3, [r0, #16]
   15528:	cmp	ip, lr
   1552c:	mov	r4, #0
   15530:	ldr	r6, [r0, #8]
   15534:	ldr	r7, [r0, #12]
   15538:	bcs	1557c <__assert_fail@plt+0x3f78>
   1553c:	ldr	r2, [ip]
   15540:	cmp	r2, #0
   15544:	beq	15570 <__assert_fail@plt+0x3f6c>
   15548:	ldr	r2, [ip, #4]
   1554c:	mov	r1, #1
   15550:	cmp	r2, #0
   15554:	beq	15568 <__assert_fail@plt+0x3f64>
   15558:	ldr	r2, [r2, #4]
   1555c:	add	r1, r1, #1
   15560:	cmp	r2, #0
   15564:	bne	15558 <__assert_fail@plt+0x3f54>
   15568:	cmp	r4, r1
   1556c:	movcc	r4, r1
   15570:	add	ip, ip, #8
   15574:	cmp	ip, lr
   15578:	bcc	1553c <__assert_fail@plt+0x3f38>
   1557c:	ldr	r2, [pc, #116]	; 155f8 <__assert_fail@plt+0x3ff4>
   15580:	mov	r1, #1
   15584:	mov	r0, r5
   15588:	bl	114cc <__fprintf_chk@plt>
   1558c:	mov	r3, r6
   15590:	ldr	r2, [pc, #100]	; 155fc <__assert_fail@plt+0x3ff8>
   15594:	mov	r1, #1
   15598:	mov	r0, r5
   1559c:	bl	114cc <__fprintf_chk@plt>
   155a0:	vmov	s15, r7
   155a4:	vldr	d5, [pc, #68]	; 155f0 <__assert_fail@plt+0x3fec>
   155a8:	mov	r3, r7
   155ac:	ldr	r2, [pc, #76]	; 15600 <__assert_fail@plt+0x3ffc>
   155b0:	vcvt.f64.u32	d6, s15
   155b4:	vmov	s15, r6
   155b8:	mov	r1, #1
   155bc:	mov	r0, r5
   155c0:	vcvt.f64.u32	d7, s15
   155c4:	vmul.f64	d6, d6, d5
   155c8:	vdiv.f64	d5, d6, d7
   155cc:	vstr	d5, [sp]
   155d0:	bl	114cc <__fprintf_chk@plt>
   155d4:	mov	r3, r4
   155d8:	mov	r0, r5
   155dc:	ldr	r2, [pc, #32]	; 15604 <__assert_fail@plt+0x4000>
   155e0:	mov	r1, #1
   155e4:	add	sp, sp, #12
   155e8:	pop	{r4, r5, r6, r7, lr}
   155ec:	b	114cc <__fprintf_chk@plt>
   155f0:	andeq	r0, r0, r0
   155f4:	subsmi	r0, r9, r0
   155f8:	andeq	lr, r1, r8, lsr #16
   155fc:	andeq	lr, r1, r0, asr #16
   15600:	andeq	lr, r1, r8, asr r8
   15604:	andeq	lr, r1, ip, ror r8
   15608:	push	{r4, r5, r6, lr}
   1560c:	mov	r5, r1
   15610:	ldr	r3, [r0, #24]
   15614:	mov	r6, r0
   15618:	ldr	r1, [r0, #8]
   1561c:	mov	r0, r5
   15620:	blx	r3
   15624:	ldr	r3, [r6, #8]
   15628:	cmp	r0, r3
   1562c:	bcs	1568c <__assert_fail@plt+0x4088>
   15630:	ldr	r3, [r6]
   15634:	add	r4, r3, r0, lsl #3
   15638:	ldr	r1, [r3, r0, lsl #3]
   1563c:	cmp	r1, #0
   15640:	bne	1564c <__assert_fail@plt+0x4048>
   15644:	b	15674 <__assert_fail@plt+0x4070>
   15648:	ldr	r1, [r4]
   1564c:	cmp	r5, r1
   15650:	beq	1567c <__assert_fail@plt+0x4078>
   15654:	ldr	r3, [r6, #28]
   15658:	mov	r0, r5
   1565c:	blx	r3
   15660:	cmp	r0, #0
   15664:	bne	15684 <__assert_fail@plt+0x4080>
   15668:	ldr	r4, [r4, #4]
   1566c:	cmp	r4, #0
   15670:	bne	15648 <__assert_fail@plt+0x4044>
   15674:	mov	r0, #0
   15678:	pop	{r4, r5, r6, pc}
   1567c:	mov	r0, r5
   15680:	pop	{r4, r5, r6, pc}
   15684:	ldr	r0, [r4]
   15688:	pop	{r4, r5, r6, pc}
   1568c:	bl	115c8 <abort@plt>
   15690:	ldr	r3, [r0, #16]
   15694:	cmp	r3, #0
   15698:	beq	156cc <__assert_fail@plt+0x40c8>
   1569c:	ldr	r3, [r0]
   156a0:	ldr	r2, [r0, #4]
   156a4:	cmp	r3, r2
   156a8:	bcc	156bc <__assert_fail@plt+0x40b8>
   156ac:	b	156d4 <__assert_fail@plt+0x40d0>
   156b0:	add	r3, r3, #8
   156b4:	cmp	r3, r2
   156b8:	bcs	156d4 <__assert_fail@plt+0x40d0>
   156bc:	ldr	r0, [r3]
   156c0:	cmp	r0, #0
   156c4:	beq	156b0 <__assert_fail@plt+0x40ac>
   156c8:	bx	lr
   156cc:	mov	r0, r3
   156d0:	bx	lr
   156d4:	push	{r4, lr}
   156d8:	bl	115c8 <abort@plt>
   156dc:	push	{r4, r5, r6, lr}
   156e0:	mov	r4, r1
   156e4:	ldr	r3, [r0, #24]
   156e8:	mov	r5, r0
   156ec:	ldr	r1, [r0, #8]
   156f0:	mov	r0, r4
   156f4:	blx	r3
   156f8:	ldr	r3, [r5, #8]
   156fc:	cmp	r0, r3
   15700:	bcs	15764 <__assert_fail@plt+0x4160>
   15704:	ldr	r3, [r5]
   15708:	add	r0, r3, r0, lsl #3
   1570c:	mov	r3, r0
   15710:	b	1571c <__assert_fail@plt+0x4118>
   15714:	cmp	r3, #0
   15718:	beq	15730 <__assert_fail@plt+0x412c>
   1571c:	ldm	r3, {r2, r3}
   15720:	cmp	r4, r2
   15724:	bne	15714 <__assert_fail@plt+0x4110>
   15728:	cmp	r3, #0
   1572c:	bne	1575c <__assert_fail@plt+0x4158>
   15730:	ldr	r2, [r5, #4]
   15734:	mov	r3, r0
   15738:	b	15748 <__assert_fail@plt+0x4144>
   1573c:	ldr	r0, [r3]
   15740:	cmp	r0, #0
   15744:	popne	{r4, r5, r6, pc}
   15748:	add	r3, r3, #8
   1574c:	cmp	r3, r2
   15750:	bcc	1573c <__assert_fail@plt+0x4138>
   15754:	mov	r0, #0
   15758:	pop	{r4, r5, r6, pc}
   1575c:	ldr	r0, [r3]
   15760:	pop	{r4, r5, r6, pc}
   15764:	bl	115c8 <abort@plt>
   15768:	push	{r4, r5, r6, lr}
   1576c:	mov	r5, r0
   15770:	ldr	r4, [r0]
   15774:	ldr	r0, [r0, #4]
   15778:	cmp	r4, r0
   1577c:	bcs	157f8 <__assert_fail@plt+0x41f4>
   15780:	add	r4, r4, #8
   15784:	mov	ip, #0
   15788:	ldr	r3, [r4, #-8]
   1578c:	mov	r6, r4
   15790:	cmp	r3, #0
   15794:	beq	157e0 <__assert_fail@plt+0x41dc>
   15798:	cmp	r2, ip
   1579c:	bls	157ec <__assert_fail@plt+0x41e8>
   157a0:	str	r3, [r1, ip, lsl #2]
   157a4:	ldr	r3, [r4, #-4]
   157a8:	add	r0, ip, #1
   157ac:	cmp	r3, #0
   157b0:	add	ip, r1, ip, lsl #2
   157b4:	beq	157d8 <__assert_fail@plt+0x41d4>
   157b8:	cmp	r2, r0
   157bc:	beq	157f4 <__assert_fail@plt+0x41f0>
   157c0:	ldr	lr, [r3]
   157c4:	add	r0, r0, #1
   157c8:	str	lr, [ip, #4]!
   157cc:	ldr	r3, [r3, #4]
   157d0:	cmp	r3, #0
   157d4:	bne	157b8 <__assert_fail@plt+0x41b4>
   157d8:	mov	ip, r0
   157dc:	ldr	r0, [r5, #4]
   157e0:	cmp	r0, r6
   157e4:	add	r4, r4, #8
   157e8:	bhi	15788 <__assert_fail@plt+0x4184>
   157ec:	mov	r0, ip
   157f0:	pop	{r4, r5, r6, pc}
   157f4:	pop	{r4, r5, r6, pc}
   157f8:	mov	r0, #0
   157fc:	pop	{r4, r5, r6, pc}
   15800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15804:	ldr	r3, [r0, #4]
   15808:	ldr	r8, [r0]
   1580c:	cmp	r8, r3
   15810:	bcs	15874 <__assert_fail@plt+0x4270>
   15814:	mov	r7, r2
   15818:	mov	r6, r1
   1581c:	mov	r9, r0
   15820:	mov	r5, #0
   15824:	ldr	r0, [r8]
   15828:	cmp	r0, #0
   1582c:	beq	15860 <__assert_fail@plt+0x425c>
   15830:	mov	r4, r8
   15834:	b	1583c <__assert_fail@plt+0x4238>
   15838:	ldr	r0, [r4]
   1583c:	mov	r1, r7
   15840:	blx	r6
   15844:	cmp	r0, #0
   15848:	beq	1586c <__assert_fail@plt+0x4268>
   1584c:	ldr	r4, [r4, #4]
   15850:	add	r5, r5, #1
   15854:	cmp	r4, #0
   15858:	bne	15838 <__assert_fail@plt+0x4234>
   1585c:	ldr	r3, [r9, #4]
   15860:	add	r8, r8, #8
   15864:	cmp	r3, r8
   15868:	bhi	15824 <__assert_fail@plt+0x4220>
   1586c:	mov	r0, r5
   15870:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15874:	mov	r5, #0
   15878:	b	1586c <__assert_fail@plt+0x4268>
   1587c:	push	{r4, r5, r6, lr}
   15880:	mov	r4, r0
   15884:	ldrb	r0, [r0]
   15888:	cmp	r0, #0
   1588c:	beq	158bc <__assert_fail@plt+0x42b8>
   15890:	mov	r5, r1
   15894:	mov	r1, #0
   15898:	rsb	r1, r1, r1, lsl #5
   1589c:	add	r0, r1, r0
   158a0:	mov	r1, r5
   158a4:	bl	1d520 <__assert_fail@plt+0xbf1c>
   158a8:	ldrb	r0, [r4, #1]!
   158ac:	cmp	r0, #0
   158b0:	bne	15898 <__assert_fail@plt+0x4294>
   158b4:	mov	r0, r1
   158b8:	pop	{r4, r5, r6, pc}
   158bc:	mov	r1, r0
   158c0:	b	158b4 <__assert_fail@plt+0x42b0>
   158c4:	push	{lr}		; (str lr, [sp, #-4]!)
   158c8:	mov	ip, r0
   158cc:	ldr	lr, [pc, #16]	; 158e4 <__assert_fail@plt+0x42e0>
   158d0:	ldm	lr!, {r0, r1, r2, r3}
   158d4:	ldr	lr, [lr]
   158d8:	stmia	ip!, {r0, r1, r2, r3}
   158dc:	str	lr, [ip]
   158e0:	pop	{pc}		; (ldr pc, [sp], #4)
   158e4:	andeq	lr, r1, r4, lsl r8
   158e8:	cmp	r2, #0
   158ec:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158f0:	mov	r4, r0
   158f4:	ldr	sl, [pc, #548]	; 15b20 <__assert_fail@plt+0x451c>
   158f8:	mov	r0, #40	; 0x28
   158fc:	movne	sl, r2
   15900:	cmp	r3, #0
   15904:	ldr	fp, [pc, #536]	; 15b24 <__assert_fail@plt+0x4520>
   15908:	mov	r5, r1
   1590c:	movne	fp, r3
   15910:	bl	1c620 <__assert_fail@plt+0xb01c>
   15914:	subs	r8, r0, #0
   15918:	beq	159b0 <__assert_fail@plt+0x43ac>
   1591c:	cmp	r5, #0
   15920:	ldr	r3, [pc, #512]	; 15b28 <__assert_fail@plt+0x4524>
   15924:	beq	159b8 <__assert_fail@plt+0x43b4>
   15928:	cmp	r5, r3
   1592c:	str	r5, [r8, #20]
   15930:	beq	159bc <__assert_fail@plt+0x43b8>
   15934:	vldr	s15, [r5, #8]
   15938:	vldr	s14, [pc, #456]	; 15b08 <__assert_fail@plt+0x4504>
   1593c:	vcmpe.f32	s15, s14
   15940:	vmrs	APSR_nzcv, fpscr
   15944:	ble	159a0 <__assert_fail@plt+0x439c>
   15948:	vldr	s13, [pc, #444]	; 15b0c <__assert_fail@plt+0x4508>
   1594c:	vcmpe.f32	s15, s13
   15950:	vmrs	APSR_nzcv, fpscr
   15954:	bpl	159a0 <__assert_fail@plt+0x439c>
   15958:	vldr	s13, [pc, #432]	; 15b10 <__assert_fail@plt+0x450c>
   1595c:	vldr	s12, [r5, #12]
   15960:	vcmpe.f32	s12, s13
   15964:	vmrs	APSR_nzcv, fpscr
   15968:	ble	159a0 <__assert_fail@plt+0x439c>
   1596c:	vldr	s13, [r5]
   15970:	vcmpe.f32	s13, #0.0
   15974:	vmrs	APSR_nzcv, fpscr
   15978:	blt	159a0 <__assert_fail@plt+0x439c>
   1597c:	vadd.f32	s14, s13, s14
   15980:	vldr	s13, [r5, #4]
   15984:	vcmpe.f32	s14, s13
   15988:	vmrs	APSR_nzcv, fpscr
   1598c:	bpl	159a0 <__assert_fail@plt+0x439c>
   15990:	vldr	s12, [pc, #380]	; 15b14 <__assert_fail@plt+0x4510>
   15994:	vcmpe.f32	s13, s12
   15998:	vmrs	APSR_nzcv, fpscr
   1599c:	bls	15aec <__assert_fail@plt+0x44e8>
   159a0:	str	r3, [r8, #20]
   159a4:	mov	r0, r8
   159a8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   159ac:	mov	r8, #0
   159b0:	mov	r0, r8
   159b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159b8:	str	r3, [r8, #20]
   159bc:	vldr	s15, [pc, #340]	; 15b18 <__assert_fail@plt+0x4514>
   159c0:	vmov	s14, r4
   159c4:	vldr	s13, [pc, #336]	; 15b1c <__assert_fail@plt+0x4518>
   159c8:	vcvt.f32.u32	s12, s14
   159cc:	vdiv.f32	s14, s12, s15
   159d0:	vcmpe.f32	s14, s13
   159d4:	vmrs	APSR_nzcv, fpscr
   159d8:	bge	15ad8 <__assert_fail@plt+0x44d4>
   159dc:	vcvt.u32.f32	s15, s14
   159e0:	vmov	r4, s15
   159e4:	cmp	r4, #10
   159e8:	movcc	r4, #10
   159ec:	orr	r7, r4, #1
   159f0:	cmn	r7, #1
   159f4:	ldrne	r9, [pc, #304]	; 15b2c <__assert_fail@plt+0x4528>
   159f8:	beq	15a70 <__assert_fail@plt+0x446c>
   159fc:	cmp	r7, #9
   15a00:	bls	15ae4 <__assert_fail@plt+0x44e0>
   15a04:	umull	r2, r3, r9, r7
   15a08:	lsr	r3, r3, #1
   15a0c:	add	r3, r3, r3, lsl #1
   15a10:	cmp	r7, r3
   15a14:	beq	15a64 <__assert_fail@plt+0x4460>
   15a18:	mov	r6, #16
   15a1c:	mov	r5, #9
   15a20:	mov	r4, #3
   15a24:	b	15a38 <__assert_fail@plt+0x4434>
   15a28:	bl	1d520 <__assert_fail@plt+0xbf1c>
   15a2c:	add	r6, r6, #8
   15a30:	cmp	r1, #0
   15a34:	beq	15a64 <__assert_fail@plt+0x4460>
   15a38:	add	r5, r5, r6
   15a3c:	add	r4, r4, #2
   15a40:	cmp	r5, r7
   15a44:	mov	r0, r7
   15a48:	mov	r1, r4
   15a4c:	bcc	15a28 <__assert_fail@plt+0x4424>
   15a50:	mov	r1, r4
   15a54:	mov	r0, r7
   15a58:	bl	1d520 <__assert_fail@plt+0xbf1c>
   15a5c:	cmp	r1, #0
   15a60:	bne	15a70 <__assert_fail@plt+0x446c>
   15a64:	add	r7, r7, #2
   15a68:	cmn	r7, #1
   15a6c:	bne	159fc <__assert_fail@plt+0x43f8>
   15a70:	lsrs	r3, r7, #30
   15a74:	movne	r4, #1
   15a78:	moveq	r4, #0
   15a7c:	tst	r7, #536870912	; 0x20000000
   15a80:	bne	15ad8 <__assert_fail@plt+0x44d4>
   15a84:	cmp	r4, #0
   15a88:	bne	15ad8 <__assert_fail@plt+0x44d4>
   15a8c:	str	r7, [r8, #8]
   15a90:	mov	r0, r7
   15a94:	mov	r1, #8
   15a98:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   15a9c:	cmp	r0, #0
   15aa0:	str	r0, [r8]
   15aa4:	beq	159a4 <__assert_fail@plt+0x43a0>
   15aa8:	ldr	r3, [r8, #8]
   15aac:	str	r4, [r8, #12]
   15ab0:	str	r4, [r8, #16]
   15ab4:	add	r0, r0, r3, lsl #3
   15ab8:	ldr	r3, [sp, #40]	; 0x28
   15abc:	str	r0, [r8, #4]
   15ac0:	str	sl, [r8, #24]
   15ac4:	str	fp, [r8, #28]
   15ac8:	str	r3, [r8, #32]
   15acc:	str	r4, [r8, #36]	; 0x24
   15ad0:	mov	r0, r8
   15ad4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad8:	mov	r3, #0
   15adc:	str	r3, [r8, #8]
   15ae0:	b	159a4 <__assert_fail@plt+0x43a0>
   15ae4:	mov	r4, #3
   15ae8:	b	15a50 <__assert_fail@plt+0x444c>
   15aec:	vcmpe.f32	s15, s14
   15af0:	vmrs	APSR_nzcv, fpscr
   15af4:	ble	159a0 <__assert_fail@plt+0x439c>
   15af8:	ldrb	r3, [r5, #16]
   15afc:	cmp	r3, #0
   15b00:	bne	159e4 <__assert_fail@plt+0x43e0>
   15b04:	b	159c0 <__assert_fail@plt+0x43bc>
   15b08:	stclcc	12, cr12, [ip, #820]	; 0x334
   15b0c:	svccc	0x00666666
   15b10:	svccc	0x008ccccd
   15b14:	svccc	0x00800000
   15b18:	svccc	0x004ccccd
   15b1c:	svcmi	0x00800000
   15b20:	andeq	r5, r1, r8, ror #2
   15b24:	andeq	r5, r1, ip, ror r1
   15b28:	andeq	lr, r1, r4, lsl r8
   15b2c:	bge	feac05e0 <optarg@@GLIBC_2.4+0xfea91418>
   15b30:	push	{r4, r5, r6, r7, r8, lr}
   15b34:	mov	r5, r0
   15b38:	ldr	r7, [r0]
   15b3c:	ldr	r3, [r0, #4]
   15b40:	cmp	r7, r3
   15b44:	addcc	r7, r7, #8
   15b48:	movcc	r6, #0
   15b4c:	bcs	15bc8 <__assert_fail@plt+0x45c4>
   15b50:	ldr	r2, [r7, #-8]
   15b54:	mov	r8, r7
   15b58:	cmp	r2, #0
   15b5c:	beq	15bbc <__assert_fail@plt+0x45b8>
   15b60:	ldr	r4, [r7, #-4]
   15b64:	ldr	r2, [r5, #32]
   15b68:	cmp	r4, #0
   15b6c:	beq	15ba0 <__assert_fail@plt+0x459c>
   15b70:	cmp	r2, #0
   15b74:	beq	15b84 <__assert_fail@plt+0x4580>
   15b78:	ldr	r0, [r4]
   15b7c:	blx	r2
   15b80:	ldr	r2, [r5, #32]
   15b84:	ldr	r3, [r4, #4]
   15b88:	ldr	r1, [r5, #36]	; 0x24
   15b8c:	str	r6, [r4]
   15b90:	str	r1, [r4, #4]
   15b94:	str	r4, [r5, #36]	; 0x24
   15b98:	subs	r4, r3, #0
   15b9c:	bne	15b70 <__assert_fail@plt+0x456c>
   15ba0:	cmp	r2, #0
   15ba4:	beq	15bb0 <__assert_fail@plt+0x45ac>
   15ba8:	ldr	r0, [r7, #-8]
   15bac:	blx	r2
   15bb0:	str	r6, [r7, #-8]
   15bb4:	str	r6, [r7, #-4]
   15bb8:	ldr	r3, [r5, #4]
   15bbc:	cmp	r3, r8
   15bc0:	add	r7, r7, #8
   15bc4:	bhi	15b50 <__assert_fail@plt+0x454c>
   15bc8:	mov	r3, #0
   15bcc:	str	r3, [r5, #12]
   15bd0:	str	r3, [r5, #16]
   15bd4:	pop	{r4, r5, r6, r7, r8, pc}
   15bd8:	ldr	r3, [r0, #32]
   15bdc:	push	{r4, r5, r6, lr}
   15be0:	cmp	r3, #0
   15be4:	mov	r5, r0
   15be8:	beq	15c48 <__assert_fail@plt+0x4644>
   15bec:	ldr	r3, [r0, #16]
   15bf0:	cmp	r3, #0
   15bf4:	beq	15c48 <__assert_fail@plt+0x4644>
   15bf8:	ldr	r6, [r0]
   15bfc:	ldr	r3, [r0, #4]
   15c00:	cmp	r6, r3
   15c04:	bcs	15c84 <__assert_fail@plt+0x4680>
   15c08:	ldr	r0, [r6]
   15c0c:	cmp	r0, #0
   15c10:	beq	15c38 <__assert_fail@plt+0x4634>
   15c14:	mov	r4, r6
   15c18:	b	15c20 <__assert_fail@plt+0x461c>
   15c1c:	ldr	r0, [r4]
   15c20:	ldr	r3, [r5, #32]
   15c24:	blx	r3
   15c28:	ldr	r4, [r4, #4]
   15c2c:	cmp	r4, #0
   15c30:	bne	15c1c <__assert_fail@plt+0x4618>
   15c34:	ldr	r3, [r5, #4]
   15c38:	add	r6, r6, #8
   15c3c:	cmp	r3, r6
   15c40:	bhi	15c08 <__assert_fail@plt+0x4604>
   15c44:	b	15c4c <__assert_fail@plt+0x4648>
   15c48:	ldr	r3, [r5, #4]
   15c4c:	ldr	r6, [r5]
   15c50:	cmp	r6, r3
   15c54:	bcs	15c84 <__assert_fail@plt+0x4680>
   15c58:	ldr	r0, [r6, #4]
   15c5c:	cmp	r0, #0
   15c60:	beq	15c78 <__assert_fail@plt+0x4674>
   15c64:	ldr	r4, [r0, #4]
   15c68:	bl	1cc30 <__assert_fail@plt+0xb62c>
   15c6c:	subs	r0, r4, #0
   15c70:	bne	15c64 <__assert_fail@plt+0x4660>
   15c74:	ldr	r3, [r5, #4]
   15c78:	add	r6, r6, #8
   15c7c:	cmp	r3, r6
   15c80:	bhi	15c58 <__assert_fail@plt+0x4654>
   15c84:	ldr	r0, [r5, #36]	; 0x24
   15c88:	cmp	r0, #0
   15c8c:	beq	15ca0 <__assert_fail@plt+0x469c>
   15c90:	ldr	r4, [r0, #4]
   15c94:	bl	1cc30 <__assert_fail@plt+0xb62c>
   15c98:	subs	r0, r4, #0
   15c9c:	bne	15c90 <__assert_fail@plt+0x468c>
   15ca0:	ldr	r0, [r5]
   15ca4:	bl	1cc30 <__assert_fail@plt+0xb62c>
   15ca8:	mov	r0, r5
   15cac:	pop	{r4, r5, r6, lr}
   15cb0:	b	1cc30 <__assert_fail@plt+0xb62c>
   15cb4:	ldr	r3, [r0, #20]
   15cb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15cbc:	mov	r8, r0
   15cc0:	ldrb	r2, [r3, #16]
   15cc4:	sub	sp, sp, #40	; 0x28
   15cc8:	cmp	r2, #0
   15ccc:	bne	15cf8 <__assert_fail@plt+0x46f4>
   15cd0:	vmov	s15, r1
   15cd4:	vldr	s13, [r3, #8]
   15cd8:	vldr	s14, [pc, #648]	; 15f68 <__assert_fail@plt+0x4964>
   15cdc:	vcvt.f32.u32	s12, s15
   15ce0:	vdiv.f32	s15, s12, s13
   15ce4:	vcmpe.f32	s15, s14
   15ce8:	vmrs	APSR_nzcv, fpscr
   15cec:	bge	15f20 <__assert_fail@plt+0x491c>
   15cf0:	vcvt.u32.f32	s15, s15
   15cf4:	vmov	r1, s15
   15cf8:	cmp	r1, #10
   15cfc:	movcc	r1, #10
   15d00:	orr	r7, r1, #1
   15d04:	cmn	r7, #1
   15d08:	ldrne	r9, [pc, #604]	; 15f6c <__assert_fail@plt+0x4968>
   15d0c:	beq	15d84 <__assert_fail@plt+0x4780>
   15d10:	cmp	r7, #9
   15d14:	bls	15f30 <__assert_fail@plt+0x492c>
   15d18:	umull	r2, r3, r9, r7
   15d1c:	lsr	r3, r3, #1
   15d20:	add	r3, r3, r3, lsl #1
   15d24:	cmp	r7, r3
   15d28:	beq	15d78 <__assert_fail@plt+0x4774>
   15d2c:	mov	r6, #16
   15d30:	mov	r5, #9
   15d34:	mov	r4, #3
   15d38:	b	15d54 <__assert_fail@plt+0x4750>
   15d3c:	mov	r1, r4
   15d40:	mov	r0, r7
   15d44:	bl	1d520 <__assert_fail@plt+0xbf1c>
   15d48:	add	r6, r6, #8
   15d4c:	cmp	r1, #0
   15d50:	beq	15d78 <__assert_fail@plt+0x4774>
   15d54:	add	r5, r5, r6
   15d58:	cmp	r5, r7
   15d5c:	add	r4, r4, #2
   15d60:	bcc	15d3c <__assert_fail@plt+0x4738>
   15d64:	mov	r1, r4
   15d68:	mov	r0, r7
   15d6c:	bl	1d520 <__assert_fail@plt+0xbf1c>
   15d70:	cmp	r1, #0
   15d74:	bne	15d84 <__assert_fail@plt+0x4780>
   15d78:	add	r7, r7, #2
   15d7c:	cmn	r7, #1
   15d80:	bne	15d10 <__assert_fail@plt+0x470c>
   15d84:	lsrs	r3, r7, #30
   15d88:	movne	r4, #1
   15d8c:	moveq	r4, #0
   15d90:	tst	r7, #536870912	; 0x20000000
   15d94:	bne	15f20 <__assert_fail@plt+0x491c>
   15d98:	cmp	r4, #0
   15d9c:	bne	15f20 <__assert_fail@plt+0x491c>
   15da0:	ldr	r3, [r8, #8]
   15da4:	cmp	r3, r7
   15da8:	beq	15f10 <__assert_fail@plt+0x490c>
   15dac:	mov	r1, #8
   15db0:	mov	r0, r7
   15db4:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   15db8:	cmp	r0, #0
   15dbc:	str	r0, [sp]
   15dc0:	beq	15f20 <__assert_fail@plt+0x491c>
   15dc4:	ldr	r1, [r8, #24]
   15dc8:	ldr	r5, [r8, #20]
   15dcc:	ldr	lr, [r8, #28]
   15dd0:	ldr	ip, [r8, #32]
   15dd4:	add	r0, r0, r7, lsl #3
   15dd8:	ldr	r3, [r8, #36]	; 0x24
   15ddc:	str	r0, [sp, #4]
   15de0:	str	r1, [sp, #24]
   15de4:	mov	r2, r4
   15de8:	mov	r0, sp
   15dec:	mov	r1, r8
   15df0:	str	r7, [sp, #8]
   15df4:	str	r4, [sp, #12]
   15df8:	str	r4, [sp, #16]
   15dfc:	str	r5, [sp, #20]
   15e00:	str	lr, [sp, #28]
   15e04:	str	ip, [sp, #32]
   15e08:	str	r3, [sp, #36]	; 0x24
   15e0c:	bl	152ac <__assert_fail@plt+0x3ca8>
   15e10:	subs	r9, r0, #0
   15e14:	bne	15f38 <__assert_fail@plt+0x4934>
   15e18:	ldr	r5, [sp]
   15e1c:	ldr	r2, [sp, #4]
   15e20:	ldr	r3, [sp, #36]	; 0x24
   15e24:	cmp	r5, r2
   15e28:	str	r3, [r8, #36]	; 0x24
   15e2c:	addcc	r5, r5, #8
   15e30:	movcc	r7, r9
   15e34:	bcs	15ee4 <__assert_fail@plt+0x48e0>
   15e38:	ldr	r3, [r5, #-8]
   15e3c:	mov	r6, r5
   15e40:	cmp	r3, #0
   15e44:	beq	15ed8 <__assert_fail@plt+0x48d4>
   15e48:	ldr	r4, [r5, #-4]
   15e4c:	cmp	r4, #0
   15e50:	beq	15ed4 <__assert_fail@plt+0x48d0>
   15e54:	ldr	r1, [r8, #8]
   15e58:	b	15e74 <__assert_fail@plt+0x4870>
   15e5c:	ldr	r3, [ip, #4]
   15e60:	cmp	r2, #0
   15e64:	str	r3, [r4, #4]
   15e68:	str	r4, [ip, #4]
   15e6c:	beq	15ed0 <__assert_fail@plt+0x48cc>
   15e70:	mov	r4, r2
   15e74:	ldr	sl, [r4]
   15e78:	ldr	r3, [r8, #24]
   15e7c:	mov	r0, sl
   15e80:	blx	r3
   15e84:	ldr	r1, [r8, #8]
   15e88:	cmp	r0, r1
   15e8c:	bcs	15f64 <__assert_fail@plt+0x4960>
   15e90:	ldr	r3, [r8]
   15e94:	ldr	r2, [r4, #4]
   15e98:	add	ip, r3, r0, lsl #3
   15e9c:	ldr	lr, [r3, r0, lsl #3]
   15ea0:	cmp	lr, #0
   15ea4:	bne	15e5c <__assert_fail@plt+0x4858>
   15ea8:	ldr	ip, [r8, #12]
   15eac:	str	sl, [r3, r0, lsl #3]
   15eb0:	add	r3, ip, #1
   15eb4:	str	r3, [r8, #12]
   15eb8:	str	lr, [r4]
   15ebc:	ldr	r3, [r8, #36]	; 0x24
   15ec0:	cmp	r2, #0
   15ec4:	str	r3, [r4, #4]
   15ec8:	str	r4, [r8, #36]	; 0x24
   15ecc:	bne	15e70 <__assert_fail@plt+0x486c>
   15ed0:	ldr	r2, [sp, #4]
   15ed4:	str	r7, [r5, #-4]
   15ed8:	cmp	r6, r2
   15edc:	add	r5, r5, #8
   15ee0:	bcc	15e38 <__assert_fail@plt+0x4834>
   15ee4:	mov	r1, sp
   15ee8:	mov	r0, r8
   15eec:	mov	r2, #0
   15ef0:	bl	152ac <__assert_fail@plt+0x3ca8>
   15ef4:	cmp	r0, #0
   15ef8:	beq	15f64 <__assert_fail@plt+0x4960>
   15efc:	ldr	r0, [sp]
   15f00:	bl	1cc30 <__assert_fail@plt+0xb62c>
   15f04:	mov	r0, r9
   15f08:	add	sp, sp, #40	; 0x28
   15f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f10:	mov	r9, #1
   15f14:	mov	r0, r9
   15f18:	add	sp, sp, #40	; 0x28
   15f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f20:	mov	r9, #0
   15f24:	mov	r0, r9
   15f28:	add	sp, sp, #40	; 0x28
   15f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f30:	mov	r4, #3
   15f34:	b	15d64 <__assert_fail@plt+0x4760>
   15f38:	ldr	r0, [r8]
   15f3c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   15f40:	ldmib	sp, {r0, r1, r2}
   15f44:	ldr	ip, [sp]
   15f48:	ldr	r3, [sp, #36]	; 0x24
   15f4c:	stmib	r8, {r0, r1, r2}
   15f50:	mov	r0, r9
   15f54:	str	ip, [r8]
   15f58:	str	r3, [r8, #36]	; 0x24
   15f5c:	add	sp, sp, #40	; 0x28
   15f60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f64:	bl	115c8 <abort@plt>
   15f68:	svcmi	0x00800000
   15f6c:	bge	feac0a20 <optarg@@GLIBC_2.4+0xfea91858>
   15f70:	push	{r4, r5, r6, r7, r8, r9, lr}
   15f74:	subs	r5, r1, #0
   15f78:	sub	sp, sp, #12
   15f7c:	beq	16198 <__assert_fail@plt+0x4b94>
   15f80:	ldr	r3, [r0, #24]
   15f84:	mov	r6, r0
   15f88:	ldr	r1, [r0, #8]
   15f8c:	mov	r0, r5
   15f90:	mov	r7, r2
   15f94:	blx	r3
   15f98:	ldr	r3, [r6, #8]
   15f9c:	cmp	r0, r3
   15fa0:	mov	r8, r0
   15fa4:	bcs	16198 <__assert_fail@plt+0x4b94>
   15fa8:	ldr	r9, [r6]
   15fac:	add	r4, r9, r0, lsl #3
   15fb0:	ldr	r1, [r9, r0, lsl #3]
   15fb4:	str	r4, [sp, #4]
   15fb8:	cmp	r1, #0
   15fbc:	beq	1619c <__assert_fail@plt+0x4b98>
   15fc0:	cmp	r5, r1
   15fc4:	beq	1601c <__assert_fail@plt+0x4a18>
   15fc8:	ldr	r3, [r6, #28]
   15fcc:	mov	r0, r5
   15fd0:	blx	r3
   15fd4:	cmp	r0, #0
   15fd8:	bne	16030 <__assert_fail@plt+0x4a2c>
   15fdc:	ldr	r3, [r4, #4]
   15fe0:	cmp	r3, #0
   15fe4:	bne	16010 <__assert_fail@plt+0x4a0c>
   15fe8:	b	1603c <__assert_fail@plt+0x4a38>
   15fec:	ldr	r3, [r6, #28]
   15ff0:	mov	r0, r5
   15ff4:	blx	r3
   15ff8:	cmp	r0, #0
   15ffc:	bne	160b0 <__assert_fail@plt+0x4aac>
   16000:	ldr	r4, [r4, #4]
   16004:	ldr	r3, [r4, #4]
   16008:	cmp	r3, #0
   1600c:	beq	1603c <__assert_fail@plt+0x4a38>
   16010:	ldr	r1, [r3]
   16014:	cmp	r5, r1
   16018:	bne	15fec <__assert_fail@plt+0x49e8>
   1601c:	mov	r0, #0
   16020:	cmp	r7, #0
   16024:	strne	r1, [r7]
   16028:	add	sp, sp, #12
   1602c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16030:	ldr	r1, [r9, r8, lsl #3]
   16034:	cmp	r1, #0
   16038:	bne	1601c <__assert_fail@plt+0x4a18>
   1603c:	vldr	s15, [r6, #8]
   16040:	ldr	r3, [r6, #20]
   16044:	vldr	s14, [r6, #12]
   16048:	vcvt.f32.u32	s15, s15
   1604c:	vldr	s13, [r3, #8]
   16050:	vcvt.f32.u32	s14, s14
   16054:	vmul.f32	s12, s13, s15
   16058:	vcmpe.f32	s14, s12
   1605c:	vmrs	APSR_nzcv, fpscr
   16060:	bgt	160bc <__assert_fail@plt+0x4ab8>
   16064:	ldr	r4, [sp, #4]
   16068:	ldr	r3, [r4]
   1606c:	cmp	r3, #0
   16070:	beq	16200 <__assert_fail@plt+0x4bfc>
   16074:	ldr	r3, [r6, #36]	; 0x24
   16078:	cmp	r3, #0
   1607c:	beq	161e8 <__assert_fail@plt+0x4be4>
   16080:	ldr	r2, [r3, #4]
   16084:	str	r2, [r6, #36]	; 0x24
   16088:	ldr	r2, [r6, #16]
   1608c:	ldr	r1, [r4, #4]
   16090:	add	r2, r2, #1
   16094:	str	r5, [r3]
   16098:	str	r1, [r3, #4]
   1609c:	mov	r0, #1
   160a0:	str	r3, [r4, #4]
   160a4:	str	r2, [r6, #16]
   160a8:	add	sp, sp, #12
   160ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   160b0:	ldr	r3, [r4, #4]
   160b4:	ldr	r1, [r3]
   160b8:	b	16034 <__assert_fail@plt+0x4a30>
   160bc:	ldr	r2, [pc, #392]	; 1624c <__assert_fail@plt+0x4c48>
   160c0:	cmp	r3, r2
   160c4:	beq	16148 <__assert_fail@plt+0x4b44>
   160c8:	vldr	s12, [pc, #352]	; 16230 <__assert_fail@plt+0x4c2c>
   160cc:	vcmpe.f32	s13, s12
   160d0:	vmrs	APSR_nzcv, fpscr
   160d4:	ble	16130 <__assert_fail@plt+0x4b2c>
   160d8:	vldr	s11, [pc, #340]	; 16234 <__assert_fail@plt+0x4c30>
   160dc:	vcmpe.f32	s13, s11
   160e0:	vmrs	APSR_nzcv, fpscr
   160e4:	bpl	16130 <__assert_fail@plt+0x4b2c>
   160e8:	vldr	s11, [r3, #12]
   160ec:	vldr	s10, [pc, #324]	; 16238 <__assert_fail@plt+0x4c34>
   160f0:	vcmpe.f32	s11, s10
   160f4:	vmrs	APSR_nzcv, fpscr
   160f8:	ble	16130 <__assert_fail@plt+0x4b2c>
   160fc:	vldr	s10, [r3]
   16100:	vcmpe.f32	s10, #0.0
   16104:	vmrs	APSR_nzcv, fpscr
   16108:	blt	16130 <__assert_fail@plt+0x4b2c>
   1610c:	vadd.f32	s12, s10, s12
   16110:	vldr	s10, [r3, #4]
   16114:	vcmpe.f32	s12, s10
   16118:	vmrs	APSR_nzcv, fpscr
   1611c:	bpl	16130 <__assert_fail@plt+0x4b2c>
   16120:	vldr	s9, [pc, #276]	; 1623c <__assert_fail@plt+0x4c38>
   16124:	vcmpe.f32	s10, s9
   16128:	vmrs	APSR_nzcv, fpscr
   1612c:	bls	16210 <__assert_fail@plt+0x4c0c>
   16130:	vldr	s13, [pc, #264]	; 16240 <__assert_fail@plt+0x4c3c>
   16134:	str	r2, [r6, #20]
   16138:	vmul.f32	s12, s15, s13
   1613c:	vcmpe.f32	s12, s14
   16140:	vmrs	APSR_nzcv, fpscr
   16144:	bpl	16064 <__assert_fail@plt+0x4a60>
   16148:	vldr	s11, [pc, #244]	; 16244 <__assert_fail@plt+0x4c40>
   1614c:	vmul.f32	s15, s15, s11
   16150:	vmul.f32	s15, s15, s13
   16154:	vldr	s14, [pc, #236]	; 16248 <__assert_fail@plt+0x4c44>
   16158:	vcmpe.f32	s15, s14
   1615c:	vmrs	APSR_nzcv, fpscr
   16160:	bge	16208 <__assert_fail@plt+0x4c04>
   16164:	vcvt.u32.f32	s15, s15
   16168:	mov	r0, r6
   1616c:	vmov	r1, s15
   16170:	bl	15cb4 <__assert_fail@plt+0x46b0>
   16174:	cmp	r0, #0
   16178:	beq	16208 <__assert_fail@plt+0x4c04>
   1617c:	mov	r3, #0
   16180:	add	r2, sp, #4
   16184:	mov	r1, r5
   16188:	mov	r0, r6
   1618c:	bl	1518c <__assert_fail@plt+0x3b88>
   16190:	cmp	r0, #0
   16194:	beq	16064 <__assert_fail@plt+0x4a60>
   16198:	bl	115c8 <abort@plt>
   1619c:	vmov	s15, r3
   161a0:	ldr	r2, [r6, #12]
   161a4:	ldr	r3, [r6, #20]
   161a8:	vcvt.f32.u32	s15, s15
   161ac:	vldr	s13, [r3, #8]
   161b0:	vmov	s14, r2
   161b4:	vcvt.f32.u32	s14, s14
   161b8:	vmul.f32	s12, s13, s15
   161bc:	vcmpe.f32	s14, s12
   161c0:	vmrs	APSR_nzcv, fpscr
   161c4:	bgt	160bc <__assert_fail@plt+0x4ab8>
   161c8:	ldr	r3, [r6, #16]
   161cc:	add	r2, r2, #1
   161d0:	add	r3, r3, #1
   161d4:	str	r5, [r4]
   161d8:	mov	r0, #1
   161dc:	str	r2, [r6, #12]
   161e0:	str	r3, [r6, #16]
   161e4:	b	16028 <__assert_fail@plt+0x4a24>
   161e8:	mov	r0, #8
   161ec:	bl	1c620 <__assert_fail@plt+0xb01c>
   161f0:	subs	r3, r0, #0
   161f4:	beq	16208 <__assert_fail@plt+0x4c04>
   161f8:	ldr	r4, [sp, #4]
   161fc:	b	16088 <__assert_fail@plt+0x4a84>
   16200:	ldr	r2, [r6, #12]
   16204:	b	161c8 <__assert_fail@plt+0x4bc4>
   16208:	mvn	r0, #0
   1620c:	b	16028 <__assert_fail@plt+0x4a24>
   16210:	vcmpe.f32	s12, s13
   16214:	vmrs	APSR_nzcv, fpscr
   16218:	bpl	16130 <__assert_fail@plt+0x4b2c>
   1621c:	ldrb	r3, [r3, #16]
   16220:	cmp	r3, #0
   16224:	vmulne.f32	s15, s11, s15
   16228:	bne	16154 <__assert_fail@plt+0x4b50>
   1622c:	b	1614c <__assert_fail@plt+0x4b48>
   16230:	stclcc	12, cr12, [ip, #820]	; 0x334
   16234:	svccc	0x00666666
   16238:	svccc	0x008ccccd
   1623c:	svccc	0x00800000
   16240:	svccc	0x004ccccd
   16244:	svccc	0x00b4fdf4
   16248:	svcmi	0x00800000
   1624c:	andeq	lr, r1, r4, lsl r8
   16250:	push	{r4, r5, r6, r7, r8, lr}
   16254:	subs	r5, r1, #0
   16258:	sub	sp, sp, #8
   1625c:	beq	16460 <__assert_fail@plt+0x4e5c>
   16260:	ldr	r3, [r0, #24]
   16264:	mov	r6, r0
   16268:	ldr	r1, [r0, #8]
   1626c:	mov	r0, r5
   16270:	blx	r3
   16274:	ldr	r3, [r6, #8]
   16278:	cmp	r0, r3
   1627c:	mov	r7, r0
   16280:	bcs	16460 <__assert_fail@plt+0x4e5c>
   16284:	ldr	r8, [r6]
   16288:	add	r4, r8, r0, lsl #3
   1628c:	ldr	r1, [r8, r0, lsl #3]
   16290:	str	r4, [sp, #4]
   16294:	cmp	r1, #0
   16298:	beq	16464 <__assert_fail@plt+0x4e60>
   1629c:	cmp	r5, r1
   162a0:	beq	162c4 <__assert_fail@plt+0x4cc0>
   162a4:	ldr	r3, [r6, #28]
   162a8:	mov	r0, r5
   162ac:	blx	r3
   162b0:	cmp	r0, #0
   162b4:	beq	162f4 <__assert_fail@plt+0x4cf0>
   162b8:	ldr	r1, [r8, r7, lsl #3]
   162bc:	cmp	r1, #0
   162c0:	beq	16300 <__assert_fail@plt+0x4cfc>
   162c4:	mov	r0, r1
   162c8:	add	sp, sp, #8
   162cc:	pop	{r4, r5, r6, r7, r8, pc}
   162d0:	ldr	r1, [r3]
   162d4:	cmp	r5, r1
   162d8:	beq	162c4 <__assert_fail@plt+0x4cc0>
   162dc:	ldr	r3, [r6, #28]
   162e0:	mov	r0, r5
   162e4:	blx	r3
   162e8:	cmp	r0, #0
   162ec:	bne	16378 <__assert_fail@plt+0x4d74>
   162f0:	ldr	r4, [r4, #4]
   162f4:	ldr	r3, [r4, #4]
   162f8:	cmp	r3, #0
   162fc:	bne	162d0 <__assert_fail@plt+0x4ccc>
   16300:	vldr	s15, [r6, #8]
   16304:	ldr	r3, [r6, #20]
   16308:	vldr	s14, [r6, #12]
   1630c:	vcvt.f32.u32	s15, s15
   16310:	vldr	s13, [r3, #8]
   16314:	vcvt.f32.u32	s14, s14
   16318:	vmul.f32	s12, s13, s15
   1631c:	vcmpe.f32	s14, s12
   16320:	vmrs	APSR_nzcv, fpscr
   16324:	bgt	16384 <__assert_fail@plt+0x4d80>
   16328:	ldr	r4, [sp, #4]
   1632c:	ldr	r3, [r4]
   16330:	cmp	r3, #0
   16334:	beq	164c4 <__assert_fail@plt+0x4ec0>
   16338:	ldr	r0, [r6, #36]	; 0x24
   1633c:	cmp	r0, #0
   16340:	beq	164ac <__assert_fail@plt+0x4ea8>
   16344:	ldr	r3, [r0, #4]
   16348:	str	r3, [r6, #36]	; 0x24
   1634c:	ldr	r3, [r6, #16]
   16350:	ldr	r2, [r4, #4]
   16354:	add	r3, r3, #1
   16358:	str	r5, [r0]
   1635c:	str	r2, [r0, #4]
   16360:	str	r0, [r4, #4]
   16364:	str	r3, [r6, #16]
   16368:	mov	r1, r5
   1636c:	mov	r0, r1
   16370:	add	sp, sp, #8
   16374:	pop	{r4, r5, r6, r7, r8, pc}
   16378:	ldr	r3, [r4, #4]
   1637c:	ldr	r1, [r3]
   16380:	b	162bc <__assert_fail@plt+0x4cb8>
   16384:	ldr	r2, [pc, #388]	; 16510 <__assert_fail@plt+0x4f0c>
   16388:	cmp	r3, r2
   1638c:	beq	16410 <__assert_fail@plt+0x4e0c>
   16390:	vldr	s12, [pc, #348]	; 164f4 <__assert_fail@plt+0x4ef0>
   16394:	vcmpe.f32	s13, s12
   16398:	vmrs	APSR_nzcv, fpscr
   1639c:	ble	163f8 <__assert_fail@plt+0x4df4>
   163a0:	vldr	s11, [pc, #336]	; 164f8 <__assert_fail@plt+0x4ef4>
   163a4:	vcmpe.f32	s13, s11
   163a8:	vmrs	APSR_nzcv, fpscr
   163ac:	bpl	163f8 <__assert_fail@plt+0x4df4>
   163b0:	vldr	s11, [r3, #12]
   163b4:	vldr	s10, [pc, #320]	; 164fc <__assert_fail@plt+0x4ef8>
   163b8:	vcmpe.f32	s11, s10
   163bc:	vmrs	APSR_nzcv, fpscr
   163c0:	ble	163f8 <__assert_fail@plt+0x4df4>
   163c4:	vldr	s10, [r3]
   163c8:	vcmpe.f32	s10, #0.0
   163cc:	vmrs	APSR_nzcv, fpscr
   163d0:	blt	163f8 <__assert_fail@plt+0x4df4>
   163d4:	vadd.f32	s12, s10, s12
   163d8:	vldr	s10, [r3, #4]
   163dc:	vcmpe.f32	s12, s10
   163e0:	vmrs	APSR_nzcv, fpscr
   163e4:	bpl	163f8 <__assert_fail@plt+0x4df4>
   163e8:	vldr	s9, [pc, #272]	; 16500 <__assert_fail@plt+0x4efc>
   163ec:	vcmpe.f32	s10, s9
   163f0:	vmrs	APSR_nzcv, fpscr
   163f4:	bls	164d4 <__assert_fail@plt+0x4ed0>
   163f8:	vldr	s13, [pc, #260]	; 16504 <__assert_fail@plt+0x4f00>
   163fc:	str	r2, [r6, #20]
   16400:	vmul.f32	s12, s15, s13
   16404:	vcmpe.f32	s12, s14
   16408:	vmrs	APSR_nzcv, fpscr
   1640c:	bpl	16328 <__assert_fail@plt+0x4d24>
   16410:	vldr	s11, [pc, #240]	; 16508 <__assert_fail@plt+0x4f04>
   16414:	vmul.f32	s15, s15, s11
   16418:	vmul.f32	s15, s15, s13
   1641c:	vldr	s14, [pc, #232]	; 1650c <__assert_fail@plt+0x4f08>
   16420:	vcmpe.f32	s15, s14
   16424:	vmrs	APSR_nzcv, fpscr
   16428:	bge	164cc <__assert_fail@plt+0x4ec8>
   1642c:	vcvt.u32.f32	s15, s15
   16430:	mov	r0, r6
   16434:	vmov	r1, s15
   16438:	bl	15cb4 <__assert_fail@plt+0x46b0>
   1643c:	cmp	r0, #0
   16440:	beq	164cc <__assert_fail@plt+0x4ec8>
   16444:	mov	r3, #0
   16448:	add	r2, sp, #4
   1644c:	mov	r1, r5
   16450:	mov	r0, r6
   16454:	bl	1518c <__assert_fail@plt+0x3b88>
   16458:	cmp	r0, #0
   1645c:	beq	16328 <__assert_fail@plt+0x4d24>
   16460:	bl	115c8 <abort@plt>
   16464:	vmov	s15, r3
   16468:	ldr	r2, [r6, #12]
   1646c:	ldr	r3, [r6, #20]
   16470:	vcvt.f32.u32	s15, s15
   16474:	vldr	s13, [r3, #8]
   16478:	vmov	s14, r2
   1647c:	vcvt.f32.u32	s14, s14
   16480:	vmul.f32	s12, s15, s13
   16484:	vcmpe.f32	s12, s14
   16488:	vmrs	APSR_nzcv, fpscr
   1648c:	bmi	16384 <__assert_fail@plt+0x4d80>
   16490:	ldr	r3, [r6, #16]
   16494:	add	r2, r2, #1
   16498:	add	r3, r3, #1
   1649c:	str	r5, [r4]
   164a0:	str	r2, [r6, #12]
   164a4:	str	r3, [r6, #16]
   164a8:	b	16368 <__assert_fail@plt+0x4d64>
   164ac:	mov	r0, #8
   164b0:	bl	1c620 <__assert_fail@plt+0xb01c>
   164b4:	cmp	r0, #0
   164b8:	beq	164cc <__assert_fail@plt+0x4ec8>
   164bc:	ldr	r4, [sp, #4]
   164c0:	b	1634c <__assert_fail@plt+0x4d48>
   164c4:	ldr	r2, [r6, #12]
   164c8:	b	16490 <__assert_fail@plt+0x4e8c>
   164cc:	mov	r1, #0
   164d0:	b	162c4 <__assert_fail@plt+0x4cc0>
   164d4:	vcmpe.f32	s12, s13
   164d8:	vmrs	APSR_nzcv, fpscr
   164dc:	bpl	163f8 <__assert_fail@plt+0x4df4>
   164e0:	ldrb	r3, [r3, #16]
   164e4:	cmp	r3, #0
   164e8:	vmulne.f32	s15, s11, s15
   164ec:	bne	1641c <__assert_fail@plt+0x4e18>
   164f0:	b	16414 <__assert_fail@plt+0x4e10>
   164f4:	stclcc	12, cr12, [ip, #820]	; 0x334
   164f8:	svccc	0x00666666
   164fc:	svccc	0x008ccccd
   16500:	svccc	0x00800000
   16504:	svccc	0x004ccccd
   16508:	svccc	0x00b4fdf4
   1650c:	svcmi	0x00800000
   16510:	andeq	lr, r1, r4, lsl r8
   16514:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16518:	mov	r7, r1
   1651c:	ldr	r3, [r0, #24]
   16520:	mov	r6, r0
   16524:	ldr	r1, [r0, #8]
   16528:	mov	r0, r7
   1652c:	blx	r3
   16530:	ldr	r3, [r6, #8]
   16534:	cmp	r0, r3
   16538:	bcs	16764 <__assert_fail@plt+0x5160>
   1653c:	ldr	r9, [r6]
   16540:	mov	r8, r0
   16544:	add	r5, r9, r0, lsl #3
   16548:	ldr	r4, [r9, r0, lsl #3]
   1654c:	cmp	r4, #0
   16550:	beq	165fc <__assert_fail@plt+0x4ff8>
   16554:	cmp	r7, r4
   16558:	beq	16578 <__assert_fail@plt+0x4f74>
   1655c:	mov	r1, r4
   16560:	ldr	r3, [r6, #28]
   16564:	mov	r0, r7
   16568:	blx	r3
   1656c:	cmp	r0, #0
   16570:	beq	165f0 <__assert_fail@plt+0x4fec>
   16574:	ldr	r4, [r9, r8, lsl #3]
   16578:	ldr	r3, [r5, #4]
   1657c:	cmp	r3, #0
   16580:	movne	r2, #0
   16584:	ldmne	r3, {r0, r1}
   16588:	streq	r3, [r9, r8, lsl #3]
   1658c:	stmne	r5, {r0, r1}
   16590:	strne	r2, [r3]
   16594:	ldrne	r2, [r6, #36]	; 0x24
   16598:	strne	r2, [r3, #4]
   1659c:	strne	r3, [r6, #36]	; 0x24
   165a0:	cmp	r4, #0
   165a4:	beq	165fc <__assert_fail@plt+0x4ff8>
   165a8:	ldr	r2, [r9, r8, lsl #3]
   165ac:	ldr	r3, [r6, #16]
   165b0:	cmp	r2, #0
   165b4:	sub	r3, r3, #1
   165b8:	str	r3, [r6, #16]
   165bc:	beq	16630 <__assert_fail@plt+0x502c>
   165c0:	mov	r0, r4
   165c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   165c8:	ldr	r4, [r3]
   165cc:	cmp	r7, r4
   165d0:	beq	16610 <__assert_fail@plt+0x500c>
   165d4:	mov	r1, r4
   165d8:	ldr	r3, [r6, #28]
   165dc:	mov	r0, r7
   165e0:	blx	r3
   165e4:	cmp	r0, #0
   165e8:	bne	16608 <__assert_fail@plt+0x5004>
   165ec:	ldr	r5, [r5, #4]
   165f0:	ldr	r3, [r5, #4]
   165f4:	cmp	r3, #0
   165f8:	bne	165c8 <__assert_fail@plt+0x4fc4>
   165fc:	mov	r4, #0
   16600:	mov	r0, r4
   16604:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16608:	ldr	r3, [r5, #4]
   1660c:	ldr	r4, [r3]
   16610:	ldr	r1, [r3, #4]
   16614:	mov	r2, #0
   16618:	str	r1, [r5, #4]
   1661c:	str	r2, [r3]
   16620:	ldr	r2, [r6, #36]	; 0x24
   16624:	str	r2, [r3, #4]
   16628:	str	r3, [r6, #36]	; 0x24
   1662c:	b	165a0 <__assert_fail@plt+0x4f9c>
   16630:	vldr	s15, [r6, #8]
   16634:	ldr	r3, [r6, #12]
   16638:	ldr	r2, [r6, #20]
   1663c:	sub	r3, r3, #1
   16640:	vcvt.f32.u32	s14, s15
   16644:	vldr	s13, [r2]
   16648:	vmov	s15, r3
   1664c:	str	r3, [r6, #12]
   16650:	vcvt.f32.u32	s15, s15
   16654:	vmul.f32	s12, s13, s14
   16658:	vcmpe.f32	s15, s12
   1665c:	vmrs	APSR_nzcv, fpscr
   16660:	bpl	165c0 <__assert_fail@plt+0x4fbc>
   16664:	ldr	r3, [pc, #276]	; 16780 <__assert_fail@plt+0x517c>
   16668:	cmp	r2, r3
   1666c:	beq	1674c <__assert_fail@plt+0x5148>
   16670:	vldr	s12, [r2, #8]
   16674:	vldr	s11, [pc, #236]	; 16768 <__assert_fail@plt+0x5164>
   16678:	vcmpe.f32	s12, s11
   1667c:	vmrs	APSR_nzcv, fpscr
   16680:	ble	16734 <__assert_fail@plt+0x5130>
   16684:	vldr	s10, [pc, #224]	; 1676c <__assert_fail@plt+0x5168>
   16688:	vcmpe.f32	s12, s10
   1668c:	vmrs	APSR_nzcv, fpscr
   16690:	bpl	16734 <__assert_fail@plt+0x5130>
   16694:	vldr	s10, [pc, #212]	; 16770 <__assert_fail@plt+0x516c>
   16698:	vldr	s9, [r2, #12]
   1669c:	vcmpe.f32	s9, s10
   166a0:	vmrs	APSR_nzcv, fpscr
   166a4:	ble	16734 <__assert_fail@plt+0x5130>
   166a8:	vcmpe.f32	s13, #0.0
   166ac:	vmrs	APSR_nzcv, fpscr
   166b0:	blt	16734 <__assert_fail@plt+0x5130>
   166b4:	vadd.f32	s13, s13, s11
   166b8:	vldr	s11, [r2, #4]
   166bc:	vcmpe.f32	s13, s11
   166c0:	vmrs	APSR_nzcv, fpscr
   166c4:	bpl	16734 <__assert_fail@plt+0x5130>
   166c8:	vldr	s10, [pc, #164]	; 16774 <__assert_fail@plt+0x5170>
   166cc:	vcmpe.f32	s11, s10
   166d0:	vmrs	APSR_nzcv, fpscr
   166d4:	bhi	16734 <__assert_fail@plt+0x5130>
   166d8:	vcmpe.f32	s12, s13
   166dc:	vmrs	APSR_nzcv, fpscr
   166e0:	ble	16734 <__assert_fail@plt+0x5130>
   166e4:	ldrb	r3, [r2, #16]
   166e8:	cmp	r3, #0
   166ec:	beq	16754 <__assert_fail@plt+0x5150>
   166f0:	vmul.f32	s15, s14, s11
   166f4:	vcvt.u32.f32	s15, s15
   166f8:	vmov	r1, s15
   166fc:	mov	r0, r6
   16700:	bl	15cb4 <__assert_fail@plt+0x46b0>
   16704:	cmp	r0, #0
   16708:	bne	165c0 <__assert_fail@plt+0x4fbc>
   1670c:	ldr	r0, [r6, #36]	; 0x24
   16710:	cmp	r0, #0
   16714:	beq	16728 <__assert_fail@plt+0x5124>
   16718:	ldr	r5, [r0, #4]
   1671c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   16720:	subs	r0, r5, #0
   16724:	bne	16718 <__assert_fail@plt+0x5114>
   16728:	mov	r3, #0
   1672c:	str	r3, [r6, #36]	; 0x24
   16730:	b	165c0 <__assert_fail@plt+0x4fbc>
   16734:	vldr	s13, [pc, #60]	; 16778 <__assert_fail@plt+0x5174>
   16738:	str	r3, [r6, #20]
   1673c:	vmul.f32	s13, s14, s13
   16740:	vcmpe.f32	s15, s13
   16744:	vmrs	APSR_nzcv, fpscr
   16748:	bpl	165c0 <__assert_fail@plt+0x4fbc>
   1674c:	vldr	s12, [pc, #40]	; 1677c <__assert_fail@plt+0x5178>
   16750:	vldr	s11, [pc, #28]	; 16774 <__assert_fail@plt+0x5170>
   16754:	vmul.f32	s15, s14, s11
   16758:	vmul.f32	s15, s15, s12
   1675c:	vcvt.u32.f32	s15, s15
   16760:	b	166f8 <__assert_fail@plt+0x50f4>
   16764:	bl	115c8 <abort@plt>
   16768:	stclcc	12, cr12, [ip, #820]	; 0x334
   1676c:	svccc	0x00666666
   16770:	svccc	0x008ccccd
   16774:	svccc	0x00800000
   16778:	andeq	r0, r0, r0
   1677c:	svccc	0x004ccccd
   16780:	andeq	lr, r1, r4, lsl r8
   16784:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16788:	mov	r7, r1
   1678c:	ldr	r3, [r0, #24]
   16790:	mov	r6, r0
   16794:	ldr	r1, [r0, #8]
   16798:	mov	r0, r7
   1679c:	blx	r3
   167a0:	ldr	r3, [r6, #8]
   167a4:	cmp	r0, r3
   167a8:	bcs	169d4 <__assert_fail@plt+0x53d0>
   167ac:	ldr	r9, [r6]
   167b0:	mov	r8, r0
   167b4:	add	r5, r9, r0, lsl #3
   167b8:	ldr	r4, [r9, r0, lsl #3]
   167bc:	cmp	r4, #0
   167c0:	beq	1686c <__assert_fail@plt+0x5268>
   167c4:	cmp	r7, r4
   167c8:	beq	167e8 <__assert_fail@plt+0x51e4>
   167cc:	mov	r1, r4
   167d0:	ldr	r3, [r6, #28]
   167d4:	mov	r0, r7
   167d8:	blx	r3
   167dc:	cmp	r0, #0
   167e0:	beq	16860 <__assert_fail@plt+0x525c>
   167e4:	ldr	r4, [r9, r8, lsl #3]
   167e8:	ldr	r3, [r5, #4]
   167ec:	cmp	r3, #0
   167f0:	movne	r2, #0
   167f4:	ldmne	r3, {r0, r1}
   167f8:	streq	r3, [r9, r8, lsl #3]
   167fc:	stmne	r5, {r0, r1}
   16800:	strne	r2, [r3]
   16804:	ldrne	r2, [r6, #36]	; 0x24
   16808:	strne	r2, [r3, #4]
   1680c:	strne	r3, [r6, #36]	; 0x24
   16810:	cmp	r4, #0
   16814:	beq	1686c <__assert_fail@plt+0x5268>
   16818:	ldr	r2, [r9, r8, lsl #3]
   1681c:	ldr	r3, [r6, #16]
   16820:	cmp	r2, #0
   16824:	sub	r3, r3, #1
   16828:	str	r3, [r6, #16]
   1682c:	beq	168a0 <__assert_fail@plt+0x529c>
   16830:	mov	r0, r4
   16834:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16838:	ldr	r4, [r3]
   1683c:	cmp	r7, r4
   16840:	beq	16880 <__assert_fail@plt+0x527c>
   16844:	mov	r1, r4
   16848:	ldr	r3, [r6, #28]
   1684c:	mov	r0, r7
   16850:	blx	r3
   16854:	cmp	r0, #0
   16858:	bne	16878 <__assert_fail@plt+0x5274>
   1685c:	ldr	r5, [r5, #4]
   16860:	ldr	r3, [r5, #4]
   16864:	cmp	r3, #0
   16868:	bne	16838 <__assert_fail@plt+0x5234>
   1686c:	mov	r4, #0
   16870:	mov	r0, r4
   16874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16878:	ldr	r3, [r5, #4]
   1687c:	ldr	r4, [r3]
   16880:	ldr	r1, [r3, #4]
   16884:	mov	r2, #0
   16888:	str	r1, [r5, #4]
   1688c:	str	r2, [r3]
   16890:	ldr	r2, [r6, #36]	; 0x24
   16894:	str	r2, [r3, #4]
   16898:	str	r3, [r6, #36]	; 0x24
   1689c:	b	16810 <__assert_fail@plt+0x520c>
   168a0:	vldr	s15, [r6, #8]
   168a4:	ldr	r3, [r6, #12]
   168a8:	ldr	r2, [r6, #20]
   168ac:	sub	r3, r3, #1
   168b0:	vcvt.f32.u32	s14, s15
   168b4:	vldr	s13, [r2]
   168b8:	vmov	s15, r3
   168bc:	str	r3, [r6, #12]
   168c0:	vcvt.f32.u32	s15, s15
   168c4:	vmul.f32	s12, s13, s14
   168c8:	vcmpe.f32	s15, s12
   168cc:	vmrs	APSR_nzcv, fpscr
   168d0:	bpl	16830 <__assert_fail@plt+0x522c>
   168d4:	ldr	r3, [pc, #276]	; 169f0 <__assert_fail@plt+0x53ec>
   168d8:	cmp	r2, r3
   168dc:	beq	169bc <__assert_fail@plt+0x53b8>
   168e0:	vldr	s12, [r2, #8]
   168e4:	vldr	s11, [pc, #236]	; 169d8 <__assert_fail@plt+0x53d4>
   168e8:	vcmpe.f32	s12, s11
   168ec:	vmrs	APSR_nzcv, fpscr
   168f0:	ble	169a4 <__assert_fail@plt+0x53a0>
   168f4:	vldr	s10, [pc, #224]	; 169dc <__assert_fail@plt+0x53d8>
   168f8:	vcmpe.f32	s12, s10
   168fc:	vmrs	APSR_nzcv, fpscr
   16900:	bpl	169a4 <__assert_fail@plt+0x53a0>
   16904:	vldr	s10, [pc, #212]	; 169e0 <__assert_fail@plt+0x53dc>
   16908:	vldr	s9, [r2, #12]
   1690c:	vcmpe.f32	s9, s10
   16910:	vmrs	APSR_nzcv, fpscr
   16914:	ble	169a4 <__assert_fail@plt+0x53a0>
   16918:	vcmpe.f32	s13, #0.0
   1691c:	vmrs	APSR_nzcv, fpscr
   16920:	blt	169a4 <__assert_fail@plt+0x53a0>
   16924:	vadd.f32	s13, s13, s11
   16928:	vldr	s11, [r2, #4]
   1692c:	vcmpe.f32	s13, s11
   16930:	vmrs	APSR_nzcv, fpscr
   16934:	bpl	169a4 <__assert_fail@plt+0x53a0>
   16938:	vldr	s10, [pc, #164]	; 169e4 <__assert_fail@plt+0x53e0>
   1693c:	vcmpe.f32	s11, s10
   16940:	vmrs	APSR_nzcv, fpscr
   16944:	bhi	169a4 <__assert_fail@plt+0x53a0>
   16948:	vcmpe.f32	s12, s13
   1694c:	vmrs	APSR_nzcv, fpscr
   16950:	ble	169a4 <__assert_fail@plt+0x53a0>
   16954:	ldrb	r3, [r2, #16]
   16958:	cmp	r3, #0
   1695c:	beq	169c4 <__assert_fail@plt+0x53c0>
   16960:	vmul.f32	s15, s14, s11
   16964:	vcvt.u32.f32	s15, s15
   16968:	vmov	r1, s15
   1696c:	mov	r0, r6
   16970:	bl	15cb4 <__assert_fail@plt+0x46b0>
   16974:	cmp	r0, #0
   16978:	bne	16830 <__assert_fail@plt+0x522c>
   1697c:	ldr	r0, [r6, #36]	; 0x24
   16980:	cmp	r0, #0
   16984:	beq	16998 <__assert_fail@plt+0x5394>
   16988:	ldr	r5, [r0, #4]
   1698c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   16990:	subs	r0, r5, #0
   16994:	bne	16988 <__assert_fail@plt+0x5384>
   16998:	mov	r3, #0
   1699c:	str	r3, [r6, #36]	; 0x24
   169a0:	b	16830 <__assert_fail@plt+0x522c>
   169a4:	vldr	s13, [pc, #60]	; 169e8 <__assert_fail@plt+0x53e4>
   169a8:	str	r3, [r6, #20]
   169ac:	vmul.f32	s13, s14, s13
   169b0:	vcmpe.f32	s15, s13
   169b4:	vmrs	APSR_nzcv, fpscr
   169b8:	bpl	16830 <__assert_fail@plt+0x522c>
   169bc:	vldr	s12, [pc, #40]	; 169ec <__assert_fail@plt+0x53e8>
   169c0:	vldr	s11, [pc, #28]	; 169e4 <__assert_fail@plt+0x53e0>
   169c4:	vmul.f32	s15, s14, s11
   169c8:	vmul.f32	s15, s15, s12
   169cc:	vcvt.u32.f32	s15, s15
   169d0:	b	16968 <__assert_fail@plt+0x5364>
   169d4:	bl	115c8 <abort@plt>
   169d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   169dc:	svccc	0x00666666
   169e0:	svccc	0x008ccccd
   169e4:	svccc	0x00800000
   169e8:	andeq	r0, r0, r0
   169ec:	svccc	0x004ccccd
   169f0:	andeq	lr, r1, r4, lsl r8
   169f4:	mov	r3, #0
   169f8:	mov	r2, #1
   169fc:	str	r1, [r0]
   16a00:	str	r1, [r0, #4]
   16a04:	str	r1, [r0, #8]
   16a08:	str	r1, [r0, #12]
   16a0c:	str	r1, [r0, #16]
   16a10:	strb	r2, [r0, #28]
   16a14:	str	r3, [r0, #20]
   16a18:	str	r3, [r0, #24]
   16a1c:	bx	lr
   16a20:	ldrb	r0, [r0, #28]
   16a24:	bx	lr
   16a28:	ldrb	ip, [r0, #28]
   16a2c:	ldr	r3, [r0, #20]
   16a30:	mov	r2, r0
   16a34:	eor	ip, ip, #1
   16a38:	add	r3, ip, r3
   16a3c:	and	r3, r3, #3
   16a40:	ldr	r0, [r0, r3, lsl #2]
   16a44:	str	r1, [r2, r3, lsl #2]
   16a48:	ldr	r1, [r2, #24]
   16a4c:	str	r3, [r2, #20]
   16a50:	cmp	r3, r1
   16a54:	addeq	r3, ip, r3
   16a58:	andeq	r3, r3, #3
   16a5c:	streq	r3, [r2, #24]
   16a60:	mov	r3, #0
   16a64:	strb	r3, [r2, #28]
   16a68:	bx	lr
   16a6c:	ldrb	r3, [r0, #28]
   16a70:	cmp	r3, #0
   16a74:	bne	16aac <__assert_fail@plt+0x54a8>
   16a78:	ldr	r3, [r0, #20]
   16a7c:	ldr	r1, [r0, #16]
   16a80:	ldr	r2, [r0, r3, lsl #2]
   16a84:	str	r1, [r0, r3, lsl #2]
   16a88:	ldr	r1, [r0, #24]
   16a8c:	cmp	r3, r1
   16a90:	addne	r3, r3, #3
   16a94:	moveq	r3, #1
   16a98:	andne	r3, r3, #3
   16a9c:	strbeq	r3, [r0, #28]
   16aa0:	strne	r3, [r0, #20]
   16aa4:	mov	r0, r2
   16aa8:	bx	lr
   16aac:	push	{r4, lr}
   16ab0:	bl	115c8 <abort@plt>
   16ab4:	push	{r2, r3}
   16ab8:	push	{lr}		; (str lr, [sp, #-4]!)
   16abc:	sub	sp, sp, #12
   16ac0:	ldr	r2, [sp, #16]
   16ac4:	ands	r3, r2, #64	; 0x40
   16ac8:	addne	r3, sp, #20
   16acc:	strne	r3, [sp, #4]
   16ad0:	ldrne	r3, [sp, #20]
   16ad4:	bl	1146c <openat64@plt>
   16ad8:	bl	1b458 <__assert_fail@plt+0x9e54>
   16adc:	add	sp, sp, #12
   16ae0:	pop	{lr}		; (ldr lr, [sp], #4)
   16ae4:	add	sp, sp, #8
   16ae8:	bx	lr
   16aec:	orr	r2, r2, #540672	; 0x84000
   16af0:	push	{r4, r5, r6, lr}
   16af4:	orr	r2, r2, #2304	; 0x900
   16af8:	mov	r6, r3
   16afc:	bl	16ab4 <__assert_fail@plt+0x54b0>
   16b00:	subs	r5, r0, #0
   16b04:	blt	16b38 <__assert_fail@plt+0x5534>
   16b08:	bl	11550 <fdopendir@plt>
   16b0c:	subs	r4, r0, #0
   16b10:	beq	16b20 <__assert_fail@plt+0x551c>
   16b14:	str	r5, [r6]
   16b18:	mov	r0, r4
   16b1c:	pop	{r4, r5, r6, pc}
   16b20:	bl	11484 <__errno_location@plt>
   16b24:	mov	r6, r0
   16b28:	mov	r0, r5
   16b2c:	ldr	r5, [r6]
   16b30:	bl	115d4 <close@plt>
   16b34:	b	16b14 <__assert_fail@plt+0x5510>
   16b38:	mov	r4, #0
   16b3c:	b	16b18 <__assert_fail@plt+0x5514>
   16b40:	push	{r4, r5, r6, lr}
   16b44:	subs	r4, r0, #0
   16b48:	beq	16bbc <__assert_fail@plt+0x55b8>
   16b4c:	mov	r1, #47	; 0x2f
   16b50:	bl	1152c <strrchr@plt>
   16b54:	subs	r5, r0, #0
   16b58:	beq	16ba8 <__assert_fail@plt+0x55a4>
   16b5c:	add	r6, r5, #1
   16b60:	sub	r3, r6, r4
   16b64:	cmp	r3, #6
   16b68:	ble	16ba8 <__assert_fail@plt+0x55a4>
   16b6c:	mov	r2, #7
   16b70:	ldr	r1, [pc, #96]	; 16bd8 <__assert_fail@plt+0x55d4>
   16b74:	sub	r0, r5, #6
   16b78:	bl	115bc <strncmp@plt>
   16b7c:	cmp	r0, #0
   16b80:	bne	16ba8 <__assert_fail@plt+0x55a4>
   16b84:	mov	r2, #3
   16b88:	ldr	r1, [pc, #76]	; 16bdc <__assert_fail@plt+0x55d8>
   16b8c:	mov	r0, r6
   16b90:	bl	115bc <strncmp@plt>
   16b94:	cmp	r0, #0
   16b98:	movne	r4, r6
   16b9c:	ldreq	r3, [pc, #60]	; 16be0 <__assert_fail@plt+0x55dc>
   16ba0:	addeq	r4, r5, #4
   16ba4:	streq	r4, [r3]
   16ba8:	ldr	r2, [pc, #52]	; 16be4 <__assert_fail@plt+0x55e0>
   16bac:	ldr	r3, [pc, #52]	; 16be8 <__assert_fail@plt+0x55e4>
   16bb0:	str	r4, [r2]
   16bb4:	str	r4, [r3]
   16bb8:	pop	{r4, r5, r6, pc}
   16bbc:	ldr	r3, [pc, #40]	; 16bec <__assert_fail@plt+0x55e8>
   16bc0:	mov	r2, #55	; 0x37
   16bc4:	mov	r1, #1
   16bc8:	ldr	r3, [r3]
   16bcc:	ldr	r0, [pc, #28]	; 16bf0 <__assert_fail@plt+0x55ec>
   16bd0:	bl	11364 <fwrite@plt>
   16bd4:	bl	115c8 <abort@plt>
   16bd8:	andeq	lr, r1, ip, asr #17
   16bdc:	ldrdeq	lr, [r1], -r4
   16be0:			; <UNDEFINED> instruction: 0x0002f1b0
   16be4:	andeq	pc, r2, ip, lsl #4
   16be8:			; <UNDEFINED> instruction: 0x0002f1b4
   16bec:	andeq	pc, r2, r0, asr #3
   16bf0:	muleq	r1, r4, r8
   16bf4:	push	{r4, r5, r6, lr}
   16bf8:	mov	r4, r0
   16bfc:	mov	r5, r1
   16c00:	bl	1cd28 <__assert_fail@plt+0xb724>
   16c04:	ldrb	r3, [r0]
   16c08:	bic	r3, r3, #32
   16c0c:	cmp	r3, #85	; 0x55
   16c10:	bne	16c70 <__assert_fail@plt+0x566c>
   16c14:	ldrb	r3, [r0, #1]
   16c18:	bic	r3, r3, #32
   16c1c:	cmp	r3, #84	; 0x54
   16c20:	bne	16cac <__assert_fail@plt+0x56a8>
   16c24:	ldrb	r3, [r0, #2]
   16c28:	bic	r3, r3, #32
   16c2c:	cmp	r3, #70	; 0x46
   16c30:	bne	16cac <__assert_fail@plt+0x56a8>
   16c34:	ldrb	r3, [r0, #3]
   16c38:	cmp	r3, #45	; 0x2d
   16c3c:	bne	16cac <__assert_fail@plt+0x56a8>
   16c40:	ldrb	r3, [r0, #4]
   16c44:	cmp	r3, #56	; 0x38
   16c48:	bne	16cac <__assert_fail@plt+0x56a8>
   16c4c:	ldrb	r3, [r0, #5]
   16c50:	cmp	r3, #0
   16c54:	bne	16cac <__assert_fail@plt+0x56a8>
   16c58:	ldrb	r2, [r4]
   16c5c:	ldr	r3, [pc, #152]	; 16cfc <__assert_fail@plt+0x56f8>
   16c60:	ldr	r0, [pc, #152]	; 16d00 <__assert_fail@plt+0x56fc>
   16c64:	cmp	r2, #96	; 0x60
   16c68:	movne	r0, r3
   16c6c:	pop	{r4, r5, r6, pc}
   16c70:	cmp	r3, #71	; 0x47
   16c74:	bne	16cac <__assert_fail@plt+0x56a8>
   16c78:	ldrb	r3, [r0, #1]
   16c7c:	bic	r3, r3, #32
   16c80:	cmp	r3, #66	; 0x42
   16c84:	bne	16cac <__assert_fail@plt+0x56a8>
   16c88:	ldrb	r3, [r0, #2]
   16c8c:	cmp	r3, #49	; 0x31
   16c90:	bne	16cac <__assert_fail@plt+0x56a8>
   16c94:	ldrb	r3, [r0, #3]
   16c98:	cmp	r3, #56	; 0x38
   16c9c:	bne	16cac <__assert_fail@plt+0x56a8>
   16ca0:	ldrb	r3, [r0, #4]
   16ca4:	cmp	r3, #48	; 0x30
   16ca8:	beq	16cc0 <__assert_fail@plt+0x56bc>
   16cac:	ldr	r3, [pc, #80]	; 16d04 <__assert_fail@plt+0x5700>
   16cb0:	cmp	r5, #9
   16cb4:	ldr	r0, [pc, #76]	; 16d08 <__assert_fail@plt+0x5704>
   16cb8:	movne	r0, r3
   16cbc:	pop	{r4, r5, r6, pc}
   16cc0:	ldrb	r3, [r0, #5]
   16cc4:	cmp	r3, #51	; 0x33
   16cc8:	bne	16cac <__assert_fail@plt+0x56a8>
   16ccc:	ldrb	r3, [r0, #6]
   16cd0:	cmp	r3, #48	; 0x30
   16cd4:	bne	16cac <__assert_fail@plt+0x56a8>
   16cd8:	ldrb	r3, [r0, #7]
   16cdc:	cmp	r3, #0
   16ce0:	bne	16cac <__assert_fail@plt+0x56a8>
   16ce4:	ldrb	r2, [r4]
   16ce8:	ldr	r3, [pc, #28]	; 16d0c <__assert_fail@plt+0x5708>
   16cec:	ldr	r0, [pc, #28]	; 16d10 <__assert_fail@plt+0x570c>
   16cf0:	cmp	r2, #96	; 0x60
   16cf4:	movne	r0, r3
   16cf8:	pop	{r4, r5, r6, pc}
   16cfc:	andeq	lr, r1, r0, lsr r9
   16d00:	andeq	lr, r1, ip, lsr #18
   16d04:	andeq	lr, r1, r0, asr #18
   16d08:	andeq	lr, r1, ip, lsr r9
   16d0c:	andeq	lr, r1, r8, lsr r9
   16d10:	andeq	lr, r1, r4, lsr r9
   16d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d18:	sub	sp, sp, #140	; 0x8c
   16d1c:	mov	r9, r1
   16d20:	str	r3, [sp, #24]
   16d24:	mov	r3, #1
   16d28:	mov	sl, r0
   16d2c:	str	r2, [sp, #44]	; 0x2c
   16d30:	str	r3, [sp, #28]
   16d34:	bl	1137c <__ctype_get_mb_cur_max@plt>
   16d38:	ldr	r3, [sp, #180]	; 0xb4
   16d3c:	mov	fp, r9
   16d40:	mov	r9, sl
   16d44:	lsr	r3, r3, #1
   16d48:	and	r3, r3, #1
   16d4c:	str	r3, [sp, #40]	; 0x28
   16d50:	ldr	r3, [sp, #180]	; 0xb4
   16d54:	mov	r2, #0
   16d58:	and	r3, r3, #4
   16d5c:	str	r3, [sp, #100]	; 0x64
   16d60:	ldr	r3, [sp, #180]	; 0xb4
   16d64:	str	r2, [sp, #76]	; 0x4c
   16d68:	and	r3, r3, #1
   16d6c:	str	r3, [sp, #96]	; 0x60
   16d70:	str	r2, [sp, #36]	; 0x24
   16d74:	str	r2, [sp, #56]	; 0x38
   16d78:	str	r2, [sp, #68]	; 0x44
   16d7c:	str	r2, [sp, #72]	; 0x48
   16d80:	str	r2, [sp, #84]	; 0x54
   16d84:	str	r0, [sp, #80]	; 0x50
   16d88:	ldr	r3, [sp, #176]	; 0xb0
   16d8c:	cmp	r3, #10
   16d90:	ldrls	pc, [pc, r3, lsl #2]
   16d94:	b	17f6c <__assert_fail@plt+0x6968>
   16d98:	andeq	r6, r1, r4, asr #27
   16d9c:	andeq	r7, r1, r4, ror #1
   16da0:	andeq	r7, r1, ip, lsr r2
   16da4:	andeq	r7, r1, r8, lsl r1
   16da8:	muleq	r1, r0, r2
   16dac:	andeq	r7, r1, r0, ror r2
   16db0:	andeq	r7, r1, r8, lsr r1
   16db4:	andeq	r7, r1, ip, asr r1
   16db8:	andeq	r7, r1, r4, lsl #3
   16dbc:	andeq	r7, r1, r4, lsl #3
   16dc0:	andeq	r7, r1, r4, lsl #3
   16dc4:	mov	r3, #0
   16dc8:	ldr	r1, [sp, #56]	; 0x38
   16dcc:	ldr	r2, [sp, #176]	; 0xb0
   16dd0:	ldr	lr, [sp, #176]	; 0xb0
   16dd4:	mov	r8, r3
   16dd8:	mov	ip, r3
   16ddc:	str	r3, [sp, #40]	; 0x28
   16de0:	mov	r3, r1
   16de4:	cmp	r2, #2
   16de8:	moveq	r3, #0
   16dec:	andne	r3, r3, #1
   16df0:	mov	r0, r3
   16df4:	str	r3, [sp, #92]	; 0x5c
   16df8:	ldr	r3, [sp, #68]	; 0x44
   16dfc:	sub	lr, lr, #2
   16e00:	adds	r2, r3, #0
   16e04:	movne	r2, #1
   16e08:	and	r3, r1, ip
   16e0c:	and	r3, r2, r3
   16e10:	clz	lr, lr
   16e14:	str	r3, [sp, #88]	; 0x58
   16e18:	lsr	lr, lr, #5
   16e1c:	mov	r3, ip
   16e20:	and	r3, r3, lr
   16e24:	mov	sl, #0
   16e28:	and	r0, r2, r0
   16e2c:	str	r3, [sp, #64]	; 0x40
   16e30:	eor	r3, r1, #1
   16e34:	str	lr, [sp, #52]	; 0x34
   16e38:	str	r0, [sp, #48]	; 0x30
   16e3c:	str	r3, [sp, #60]	; 0x3c
   16e40:	ldr	r3, [sp, #24]
   16e44:	cmn	r3, #1
   16e48:	beq	17378 <__assert_fail@plt+0x5d74>
   16e4c:	subs	r7, r3, sl
   16e50:	movne	r7, #1
   16e54:	cmp	r7, #0
   16e58:	beq	17390 <__assert_fail@plt+0x5d8c>
   16e5c:	ldr	r3, [sp, #48]	; 0x30
   16e60:	cmp	r3, #0
   16e64:	beq	176fc <__assert_fail@plt+0x60f8>
   16e68:	ldr	r2, [sp, #68]	; 0x44
   16e6c:	ldr	r1, [sp, #24]
   16e70:	cmp	r2, #1
   16e74:	mov	r3, r2
   16e78:	movls	r3, #0
   16e7c:	movhi	r3, #1
   16e80:	cmn	r1, #1
   16e84:	movne	r3, #0
   16e88:	cmp	r3, #0
   16e8c:	add	r4, sl, r2
   16e90:	beq	16ea0 <__assert_fail@plt+0x589c>
   16e94:	ldr	r0, [sp, #44]	; 0x2c
   16e98:	bl	11460 <strlen@plt>
   16e9c:	str	r0, [sp, #24]
   16ea0:	ldr	r3, [sp, #24]
   16ea4:	cmp	r3, r4
   16ea8:	ldr	r3, [sp, #44]	; 0x2c
   16eac:	add	r5, r3, sl
   16eb0:	bcc	17704 <__assert_fail@plt+0x6100>
   16eb4:	mov	r0, r5
   16eb8:	ldr	r2, [sp, #68]	; 0x44
   16ebc:	ldr	r1, [sp, #72]	; 0x48
   16ec0:	bl	112d4 <memcmp@plt>
   16ec4:	cmp	r0, #0
   16ec8:	bne	17704 <__assert_fail@plt+0x6100>
   16ecc:	ldr	r3, [sp, #40]	; 0x28
   16ed0:	cmp	r3, #0
   16ed4:	bne	180c0 <__assert_fail@plt+0x6abc>
   16ed8:	ldrb	r4, [r5]
   16edc:	cmp	r4, #126	; 0x7e
   16ee0:	ldrls	pc, [pc, r4, lsl #2]
   16ee4:	b	17ffc <__assert_fail@plt+0x69f8>
   16ee8:			; <UNDEFINED> instruction: 0x000175bc
   16eec:	strdeq	r7, [r1], -ip
   16ef0:	strdeq	r7, [r1], -ip
   16ef4:	strdeq	r7, [r1], -ip
   16ef8:	strdeq	r7, [r1], -ip
   16efc:	strdeq	r7, [r1], -ip
   16f00:	strdeq	r7, [r1], -ip
   16f04:	andeq	r7, r1, r8, lsr #11
   16f08:	muleq	r1, r4, r5
   16f0c:	andeq	r7, r1, r0, ror r5
   16f10:	andeq	r7, r1, r0, asr r5
   16f14:	andeq	r7, r1, r0, lsl #11
   16f18:			; <UNDEFINED> instruction: 0x000174b8
   16f1c:	andeq	r7, r1, ip, ror #13
   16f20:	strdeq	r7, [r1], -ip
   16f24:	strdeq	r7, [r1], -ip
   16f28:	strdeq	r7, [r1], -ip
   16f2c:	strdeq	r7, [r1], -ip
   16f30:	strdeq	r7, [r1], -ip
   16f34:	strdeq	r7, [r1], -ip
   16f38:	strdeq	r7, [r1], -ip
   16f3c:	strdeq	r7, [r1], -ip
   16f40:	strdeq	r7, [r1], -ip
   16f44:	strdeq	r7, [r1], -ip
   16f48:	strdeq	r7, [r1], -ip
   16f4c:	strdeq	r7, [r1], -ip
   16f50:	strdeq	r7, [r1], -ip
   16f54:	strdeq	r7, [r1], -ip
   16f58:	strdeq	r7, [r1], -ip
   16f5c:	strdeq	r7, [r1], -ip
   16f60:	strdeq	r7, [r1], -ip
   16f64:	strdeq	r7, [r1], -ip
   16f68:	ldrdeq	r7, [r1], -ip
   16f6c:			; <UNDEFINED> instruction: 0x000176bc
   16f70:			; <UNDEFINED> instruction: 0x000176bc
   16f74:	muleq	r1, ip, r6
   16f78:			; <UNDEFINED> instruction: 0x000176bc
   16f7c:	andeq	r7, r1, r8, lsr #9
   16f80:			; <UNDEFINED> instruction: 0x000176bc
   16f84:	andeq	r7, r1, r4, lsl #9
   16f88:			; <UNDEFINED> instruction: 0x000176bc
   16f8c:			; <UNDEFINED> instruction: 0x000176bc
   16f90:			; <UNDEFINED> instruction: 0x000176bc
   16f94:	andeq	r7, r1, r8, lsr #9
   16f98:	andeq	r7, r1, r8, lsr #9
   16f9c:	andeq	r7, r1, r8, lsr #9
   16fa0:	andeq	r7, r1, r8, lsr #9
   16fa4:	andeq	r7, r1, r8, lsr #9
   16fa8:	andeq	r7, r1, r8, lsr #9
   16fac:	andeq	r7, r1, r8, lsr #9
   16fb0:	andeq	r7, r1, r8, lsr #9
   16fb4:	andeq	r7, r1, r8, lsr #9
   16fb8:	andeq	r7, r1, r8, lsr #9
   16fbc:	andeq	r7, r1, r8, lsr #9
   16fc0:	andeq	r7, r1, r8, lsr #9
   16fc4:	andeq	r7, r1, r8, lsr #9
   16fc8:	andeq	r7, r1, r8, lsr #9
   16fcc:	andeq	r7, r1, r8, lsr #9
   16fd0:	andeq	r7, r1, r8, lsr #9
   16fd4:			; <UNDEFINED> instruction: 0x000176bc
   16fd8:			; <UNDEFINED> instruction: 0x000176bc
   16fdc:			; <UNDEFINED> instruction: 0x000176bc
   16fe0:			; <UNDEFINED> instruction: 0x000176bc
   16fe4:	andeq	r7, r1, r4, lsr r4
   16fe8:	strdeq	r7, [r1], -ip
   16fec:	andeq	r7, r1, r8, lsr #9
   16ff0:	andeq	r7, r1, r8, lsr #9
   16ff4:	andeq	r7, r1, r8, lsr #9
   16ff8:	andeq	r7, r1, r8, lsr #9
   16ffc:	andeq	r7, r1, r8, lsr #9
   17000:	andeq	r7, r1, r8, lsr #9
   17004:	andeq	r7, r1, r8, lsr #9
   17008:	andeq	r7, r1, r8, lsr #9
   1700c:	andeq	r7, r1, r8, lsr #9
   17010:	andeq	r7, r1, r8, lsr #9
   17014:	andeq	r7, r1, r8, lsr #9
   17018:	andeq	r7, r1, r8, lsr #9
   1701c:	andeq	r7, r1, r8, lsr #9
   17020:	andeq	r7, r1, r8, lsr #9
   17024:	andeq	r7, r1, r8, lsr #9
   17028:	andeq	r7, r1, r8, lsr #9
   1702c:	andeq	r7, r1, r8, lsr #9
   17030:	andeq	r7, r1, r8, lsr #9
   17034:	andeq	r7, r1, r8, lsr #9
   17038:	andeq	r7, r1, r8, lsr #9
   1703c:	andeq	r7, r1, r8, lsr #9
   17040:	andeq	r7, r1, r8, lsr #9
   17044:	andeq	r7, r1, r8, lsr #9
   17048:	andeq	r7, r1, r8, lsr #9
   1704c:	andeq	r7, r1, r8, lsr #9
   17050:	andeq	r7, r1, r8, lsr #9
   17054:			; <UNDEFINED> instruction: 0x000176bc
   17058:	andeq	r7, r1, r0, lsl #8
   1705c:	andeq	r7, r1, r8, lsr #9
   17060:			; <UNDEFINED> instruction: 0x000176bc
   17064:	andeq	r7, r1, r8, lsr #9
   17068:			; <UNDEFINED> instruction: 0x000176bc
   1706c:	andeq	r7, r1, r8, lsr #9
   17070:	andeq	r7, r1, r8, lsr #9
   17074:	andeq	r7, r1, r8, lsr #9
   17078:	andeq	r7, r1, r8, lsr #9
   1707c:	andeq	r7, r1, r8, lsr #9
   17080:	andeq	r7, r1, r8, lsr #9
   17084:	andeq	r7, r1, r8, lsr #9
   17088:	andeq	r7, r1, r8, lsr #9
   1708c:	andeq	r7, r1, r8, lsr #9
   17090:	andeq	r7, r1, r8, lsr #9
   17094:	andeq	r7, r1, r8, lsr #9
   17098:	andeq	r7, r1, r8, lsr #9
   1709c:	andeq	r7, r1, r8, lsr #9
   170a0:	andeq	r7, r1, r8, lsr #9
   170a4:	andeq	r7, r1, r8, lsr #9
   170a8:	andeq	r7, r1, r8, lsr #9
   170ac:	andeq	r7, r1, r8, lsr #9
   170b0:	andeq	r7, r1, r8, lsr #9
   170b4:	andeq	r7, r1, r8, lsr #9
   170b8:	andeq	r7, r1, r8, lsr #9
   170bc:	andeq	r7, r1, r8, lsr #9
   170c0:	andeq	r7, r1, r8, lsr #9
   170c4:	andeq	r7, r1, r8, lsr #9
   170c8:	andeq	r7, r1, r8, lsr #9
   170cc:	andeq	r7, r1, r8, lsr #9
   170d0:	andeq	r7, r1, r8, lsr #9
   170d4:			; <UNDEFINED> instruction: 0x000172b8
   170d8:			; <UNDEFINED> instruction: 0x000176bc
   170dc:			; <UNDEFINED> instruction: 0x000172b8
   170e0:	muleq	r1, ip, r6
   170e4:	mov	r3, #1
   170e8:	str	r3, [sp, #40]	; 0x28
   170ec:	str	r3, [sp, #68]	; 0x44
   170f0:	mov	r8, #0
   170f4:	ldr	r3, [pc, #4056]	; 180d4 <__assert_fail@plt+0x6ad0>
   170f8:	str	r3, [sp, #72]	; 0x48
   170fc:	mov	r3, #2
   17100:	str	r3, [sp, #176]	; 0xb0
   17104:	ldr	r1, [sp, #56]	; 0x38
   17108:	mov	r2, r3
   1710c:	ldr	ip, [sp, #40]	; 0x28
   17110:	mov	lr, r3
   17114:	b	16de0 <__assert_fail@plt+0x57dc>
   17118:	mov	r3, #1
   1711c:	str	r3, [sp, #56]	; 0x38
   17120:	str	r3, [sp, #68]	; 0x44
   17124:	str	r3, [sp, #40]	; 0x28
   17128:	ldr	r3, [pc, #4004]	; 180d4 <__assert_fail@plt+0x6ad0>
   1712c:	mov	r8, #0
   17130:	str	r3, [sp, #72]	; 0x48
   17134:	b	170fc <__assert_fail@plt+0x5af8>
   17138:	mov	r3, #1
   1713c:	str	r3, [sp, #56]	; 0x38
   17140:	str	r3, [sp, #68]	; 0x44
   17144:	str	r3, [sp, #40]	; 0x28
   17148:	ldr	r3, [pc, #3976]	; 180d8 <__assert_fail@plt+0x6ad4>
   1714c:	mov	r8, #0
   17150:	str	r3, [sp, #72]	; 0x48
   17154:	mov	r3, #5
   17158:	b	17100 <__assert_fail@plt+0x5afc>
   1715c:	mov	r3, #0
   17160:	str	r3, [sp, #40]	; 0x28
   17164:	mov	r3, #1
   17168:	str	r3, [sp, #56]	; 0x38
   1716c:	mov	r8, #0
   17170:	mov	r1, r3
   17174:	ldr	r2, [sp, #176]	; 0xb0
   17178:	ldr	ip, [sp, #40]	; 0x28
   1717c:	ldr	lr, [sp, #176]	; 0xb0
   17180:	b	16de0 <__assert_fail@plt+0x57dc>
   17184:	ldr	r3, [sp, #176]	; 0xb0
   17188:	cmp	r3, #10
   1718c:	beq	171d0 <__assert_fail@plt+0x5bcc>
   17190:	mov	r2, #5
   17194:	ldr	r1, [pc, #3904]	; 180dc <__assert_fail@plt+0x6ad8>
   17198:	mov	r0, #0
   1719c:	bl	112f8 <dcgettext@plt>
   171a0:	ldr	r2, [pc, #3892]	; 180dc <__assert_fail@plt+0x6ad8>
   171a4:	cmp	r0, r2
   171a8:	str	r0, [sp, #188]	; 0xbc
   171ac:	beq	18268 <__assert_fail@plt+0x6c64>
   171b0:	mov	r2, #5
   171b4:	ldr	r1, [pc, #3864]	; 180d4 <__assert_fail@plt+0x6ad0>
   171b8:	mov	r0, #0
   171bc:	bl	112f8 <dcgettext@plt>
   171c0:	ldr	r2, [pc, #3852]	; 180d4 <__assert_fail@plt+0x6ad0>
   171c4:	cmp	r0, r2
   171c8:	str	r0, [sp, #192]	; 0xc0
   171cc:	beq	18258 <__assert_fail@plt+0x6c54>
   171d0:	ldr	r8, [sp, #40]	; 0x28
   171d4:	cmp	r8, #0
   171d8:	movne	r8, #0
   171dc:	bne	1720c <__assert_fail@plt+0x5c08>
   171e0:	ldr	r3, [sp, #188]	; 0xbc
   171e4:	ldrb	r3, [r3]
   171e8:	cmp	r3, #0
   171ec:	beq	1720c <__assert_fail@plt+0x5c08>
   171f0:	ldr	r2, [sp, #188]	; 0xbc
   171f4:	cmp	fp, r8
   171f8:	strbhi	r3, [r9, r8]
   171fc:	ldrb	r3, [r2, #1]!
   17200:	add	r8, r8, #1
   17204:	cmp	r3, #0
   17208:	bne	171f4 <__assert_fail@plt+0x5bf0>
   1720c:	ldr	r0, [sp, #192]	; 0xc0
   17210:	bl	11460 <strlen@plt>
   17214:	ldr	r3, [sp, #192]	; 0xc0
   17218:	ldr	r2, [sp, #176]	; 0xb0
   1721c:	str	r3, [sp, #72]	; 0x48
   17220:	mov	r3, #1
   17224:	str	r3, [sp, #56]	; 0x38
   17228:	mov	r1, r3
   1722c:	ldr	ip, [sp, #40]	; 0x28
   17230:	ldr	lr, [sp, #176]	; 0xb0
   17234:	str	r0, [sp, #68]	; 0x44
   17238:	b	16de0 <__assert_fail@plt+0x57dc>
   1723c:	ldr	r3, [sp, #40]	; 0x28
   17240:	cmp	r3, #0
   17244:	beq	17eec <__assert_fail@plt+0x68e8>
   17248:	mov	r3, #1
   1724c:	str	r3, [sp, #68]	; 0x44
   17250:	ldr	r3, [pc, #3708]	; 180d4 <__assert_fail@plt+0x6ad0>
   17254:	str	r3, [sp, #72]	; 0x48
   17258:	mov	r8, #0
   1725c:	ldr	r1, [sp, #56]	; 0x38
   17260:	ldr	r2, [sp, #176]	; 0xb0
   17264:	ldr	ip, [sp, #40]	; 0x28
   17268:	ldr	lr, [sp, #176]	; 0xb0
   1726c:	b	16de0 <__assert_fail@plt+0x57dc>
   17270:	ldr	r3, [sp, #40]	; 0x28
   17274:	cmp	r3, #0
   17278:	beq	17f70 <__assert_fail@plt+0x696c>
   1727c:	str	r3, [sp, #56]	; 0x38
   17280:	mov	r3, #1
   17284:	str	r3, [sp, #68]	; 0x44
   17288:	ldr	r3, [pc, #3656]	; 180d8 <__assert_fail@plt+0x6ad4>
   1728c:	b	17254 <__assert_fail@plt+0x5c50>
   17290:	ldr	r3, [sp, #40]	; 0x28
   17294:	cmp	r3, #0
   17298:	mov	r3, #1
   1729c:	streq	r3, [sp, #56]	; 0x38
   172a0:	beq	17eec <__assert_fail@plt+0x68e8>
   172a4:	str	r3, [sp, #68]	; 0x44
   172a8:	ldr	r3, [pc, #3620]	; 180d4 <__assert_fail@plt+0x6ad0>
   172ac:	mov	r8, #0
   172b0:	str	r3, [sp, #72]	; 0x48
   172b4:	b	170fc <__assert_fail@plt+0x5af8>
   172b8:	ldr	r3, [sp, #24]
   172bc:	ldr	r6, [sp, #48]	; 0x30
   172c0:	cmn	r3, #1
   172c4:	beq	17920 <__assert_fail@plt+0x631c>
   172c8:	subs	r3, r3, #1
   172cc:	movne	r3, #1
   172d0:	cmp	r3, #0
   172d4:	beq	176a0 <__assert_fail@plt+0x609c>
   172d8:	ldr	r1, [sp, #52]	; 0x34
   172dc:	mov	r7, r3
   172e0:	mov	r3, #0
   172e4:	str	r3, [sp, #32]
   172e8:	ldr	r3, [sp, #60]	; 0x3c
   172ec:	orr	r2, r1, r3
   172f0:	ldr	r3, [sp, #40]	; 0x28
   172f4:	eor	r2, r2, #1
   172f8:	orr	r2, r3, r2
   172fc:	tst	r2, #255	; 0xff
   17300:	bne	17c24 <__assert_fail@plt+0x6620>
   17304:	cmp	r6, #0
   17308:	bne	174e4 <__assert_fail@plt+0x5ee0>
   1730c:	ldr	r3, [sp, #36]	; 0x24
   17310:	add	sl, sl, #1
   17314:	and	r3, r3, r7
   17318:	uxtb	r6, r3
   1731c:	cmp	r6, #0
   17320:	beq	1734c <__assert_fail@plt+0x5d48>
   17324:	cmp	fp, r8
   17328:	movhi	r3, #39	; 0x27
   1732c:	strbhi	r3, [r9, r8]
   17330:	add	r3, r8, #1
   17334:	cmp	fp, r3
   17338:	movhi	r2, #39	; 0x27
   1733c:	add	r8, r8, #2
   17340:	strbhi	r2, [r9, r3]
   17344:	mov	r3, #0
   17348:	str	r3, [sp, #36]	; 0x24
   1734c:	ldr	r2, [sp, #32]
   17350:	cmp	r8, fp
   17354:	ldr	r3, [sp, #28]
   17358:	strbcc	r4, [r9, r8]
   1735c:	cmp	r2, #0
   17360:	moveq	r3, #0
   17364:	str	r3, [sp, #28]
   17368:	ldr	r3, [sp, #24]
   1736c:	add	r8, r8, #1
   17370:	cmn	r3, #1
   17374:	bne	16e4c <__assert_fail@plt+0x5848>
   17378:	ldr	r3, [sp, #44]	; 0x2c
   1737c:	ldrb	r3, [r3, sl]
   17380:	adds	r7, r3, #0
   17384:	movne	r7, #1
   17388:	cmp	r7, #0
   1738c:	bne	16e5c <__assert_fail@plt+0x5858>
   17390:	ldr	r3, [sp, #64]	; 0x40
   17394:	cmp	r8, #0
   17398:	movne	r3, #0
   1739c:	andeq	r3, r3, #1
   173a0:	cmp	r3, #0
   173a4:	str	r3, [sp, #64]	; 0x40
   173a8:	bne	17e4c <__assert_fail@plt+0x6848>
   173ac:	ldr	r3, [sp, #40]	; 0x28
   173b0:	ldr	r2, [sp, #52]	; 0x34
   173b4:	eor	r3, r3, #1
   173b8:	ands	r2, r2, r3
   173bc:	beq	18278 <__assert_fail@plt+0x6c74>
   173c0:	ldr	r3, [sp, #76]	; 0x4c
   173c4:	cmp	r3, #0
   173c8:	beq	18248 <__assert_fail@plt+0x6c44>
   173cc:	ldr	r3, [sp, #28]
   173d0:	cmp	r3, #0
   173d4:	bne	18204 <__assert_fail@plt+0x6c00>
   173d8:	ldr	r2, [sp, #84]	; 0x54
   173dc:	clz	r3, fp
   173e0:	cmp	r2, #0
   173e4:	lsr	r3, r3, #5
   173e8:	moveq	r3, #0
   173ec:	cmp	r3, #0
   173f0:	beq	181a4 <__assert_fail@plt+0x6ba0>
   173f4:	mov	fp, r2
   173f8:	str	r3, [sp, #76]	; 0x4c
   173fc:	b	16d88 <__assert_fail@plt+0x5784>
   17400:	ldr	r3, [sp, #176]	; 0xb0
   17404:	ldr	r6, [sp, #48]	; 0x30
   17408:	cmp	r3, #2
   1740c:	beq	17944 <__assert_fail@plt+0x6340>
   17410:	ldr	r3, [sp, #88]	; 0x58
   17414:	cmp	r3, #0
   17418:	beq	17ec8 <__assert_fail@plt+0x68c4>
   1741c:	mov	r3, #0
   17420:	add	sl, sl, #1
   17424:	ldr	r6, [sp, #36]	; 0x24
   17428:	str	r3, [sp, #32]
   1742c:	mov	r4, #92	; 0x5c
   17430:	b	1731c <__assert_fail@plt+0x5d18>
   17434:	ldr	r3, [sp, #176]	; 0xb0
   17438:	ldr	r6, [sp, #48]	; 0x30
   1743c:	cmp	r3, #2
   17440:	beq	17974 <__assert_fail@plt+0x6370>
   17444:	cmp	r3, #5
   17448:	bne	17ed8 <__assert_fail@plt+0x68d4>
   1744c:	ldr	r3, [sp, #100]	; 0x64
   17450:	cmp	r3, #0
   17454:	beq	17f3c <__assert_fail@plt+0x6938>
   17458:	ldr	r2, [sp, #24]
   1745c:	add	r3, sl, #2
   17460:	cmp	r2, r3
   17464:	bls	17474 <__assert_fail@plt+0x5e70>
   17468:	ldrb	r4, [r5, #1]
   1746c:	cmp	r4, #63	; 0x3f
   17470:	beq	180e4 <__assert_fail@plt+0x6ae0>
   17474:	mov	r1, #0
   17478:	str	r1, [sp, #32]
   1747c:	mov	r4, #63	; 0x3f
   17480:	b	172e8 <__assert_fail@plt+0x5ce4>
   17484:	ldr	r3, [sp, #176]	; 0xb0
   17488:	ldr	r6, [sp, #48]	; 0x30
   1748c:	cmp	r3, #2
   17490:	beq	179a0 <__assert_fail@plt+0x639c>
   17494:	str	r7, [sp, #32]
   17498:	str	r7, [sp, #76]	; 0x4c
   1749c:	mov	r1, #0
   174a0:	mov	r4, #39	; 0x27
   174a4:	b	172e8 <__assert_fail@plt+0x5ce4>
   174a8:	ldr	r6, [sp, #48]	; 0x30
   174ac:	ldr	r1, [sp, #52]	; 0x34
   174b0:	str	r7, [sp, #32]
   174b4:	b	172e8 <__assert_fail@plt+0x5ce4>
   174b8:	ldr	r6, [sp, #48]	; 0x30
   174bc:	ldr	r1, [sp, #52]	; 0x34
   174c0:	mov	r4, #12
   174c4:	mov	r3, #102	; 0x66
   174c8:	ldr	r2, [sp, #56]	; 0x38
   174cc:	cmp	r2, #0
   174d0:	streq	r2, [sp, #32]
   174d4:	beq	172e8 <__assert_fail@plt+0x5ce4>
   174d8:	mov	r4, r3
   174dc:	mov	r3, #0
   174e0:	str	r3, [sp, #32]
   174e4:	ldr	r3, [sp, #40]	; 0x28
   174e8:	cmp	r3, #0
   174ec:	bne	17c5c <__assert_fail@plt+0x6658>
   174f0:	ldr	r3, [sp, #36]	; 0x24
   174f4:	eor	r3, r3, #1
   174f8:	and	r3, r3, r1
   174fc:	ands	r3, r3, #255	; 0xff
   17500:	beq	17538 <__assert_fail@plt+0x5f34>
   17504:	cmp	fp, r8
   17508:	movhi	r2, #39	; 0x27
   1750c:	strbhi	r2, [r9, r8]
   17510:	add	r2, r8, #1
   17514:	cmp	fp, r2
   17518:	movhi	r1, #36	; 0x24
   1751c:	strbhi	r1, [r9, r2]
   17520:	add	r2, r8, #2
   17524:	cmp	fp, r2
   17528:	add	r8, r8, #3
   1752c:	movhi	r1, #39	; 0x27
   17530:	strbhi	r1, [r9, r2]
   17534:	str	r3, [sp, #36]	; 0x24
   17538:	cmp	fp, r8
   1753c:	movhi	r3, #92	; 0x5c
   17540:	strbhi	r3, [r9, r8]
   17544:	add	sl, sl, #1
   17548:	add	r8, r8, #1
   1754c:	b	1734c <__assert_fail@plt+0x5d48>
   17550:	ldr	r6, [sp, #48]	; 0x30
   17554:	mov	r4, #10
   17558:	mov	r3, #110	; 0x6e
   1755c:	ldr	r2, [sp, #64]	; 0x40
   17560:	cmp	r2, #0
   17564:	bne	17fe4 <__assert_fail@plt+0x69e0>
   17568:	ldr	r1, [sp, #52]	; 0x34
   1756c:	b	174c8 <__assert_fail@plt+0x5ec4>
   17570:	ldr	r6, [sp, #48]	; 0x30
   17574:	ldr	r1, [sp, #52]	; 0x34
   17578:	mov	r3, #116	; 0x74
   1757c:	b	174c8 <__assert_fail@plt+0x5ec4>
   17580:	ldr	r6, [sp, #48]	; 0x30
   17584:	ldr	r1, [sp, #52]	; 0x34
   17588:	mov	r4, #11
   1758c:	mov	r3, #118	; 0x76
   17590:	b	174c8 <__assert_fail@plt+0x5ec4>
   17594:	ldr	r6, [sp, #48]	; 0x30
   17598:	ldr	r1, [sp, #52]	; 0x34
   1759c:	mov	r4, #8
   175a0:	mov	r3, #98	; 0x62
   175a4:	b	174c8 <__assert_fail@plt+0x5ec4>
   175a8:	ldr	r6, [sp, #48]	; 0x30
   175ac:	ldr	r1, [sp, #52]	; 0x34
   175b0:	mov	r4, #7
   175b4:	mov	r3, #97	; 0x61
   175b8:	b	174c8 <__assert_fail@plt+0x5ec4>
   175bc:	ldr	r3, [sp, #56]	; 0x38
   175c0:	ldr	r6, [sp, #48]	; 0x30
   175c4:	cmp	r3, #0
   175c8:	beq	17a8c <__assert_fail@plt+0x6488>
   175cc:	ldr	r3, [sp, #40]	; 0x28
   175d0:	cmp	r3, #0
   175d4:	bne	180c0 <__assert_fail@plt+0x6abc>
   175d8:	ldr	r3, [sp, #36]	; 0x24
   175dc:	ldr	r2, [sp, #52]	; 0x34
   175e0:	eor	r3, r3, #1
   175e4:	ands	r3, r2, r3
   175e8:	moveq	r2, r8
   175ec:	beq	17624 <__assert_fail@plt+0x6020>
   175f0:	cmp	fp, r8
   175f4:	movhi	r2, #39	; 0x27
   175f8:	strbhi	r2, [r9, r8]
   175fc:	add	r2, r8, #1
   17600:	cmp	fp, r2
   17604:	movhi	r1, #36	; 0x24
   17608:	strbhi	r1, [r9, r2]
   1760c:	add	r2, r8, #2
   17610:	cmp	fp, r2
   17614:	movhi	r1, #39	; 0x27
   17618:	strbhi	r1, [r9, r2]
   1761c:	add	r2, r8, #3
   17620:	str	r3, [sp, #36]	; 0x24
   17624:	cmp	fp, r2
   17628:	movhi	r3, #92	; 0x5c
   1762c:	strbhi	r3, [r9, r2]
   17630:	ldr	r3, [sp, #92]	; 0x5c
   17634:	add	r8, r2, #1
   17638:	cmp	r3, #0
   1763c:	beq	17fc0 <__assert_fail@plt+0x69bc>
   17640:	ldr	r1, [sp, #24]
   17644:	add	r3, sl, #1
   17648:	cmp	r1, r3
   1764c:	bls	17684 <__assert_fail@plt+0x6080>
   17650:	ldr	r1, [sp, #44]	; 0x2c
   17654:	ldrb	r3, [r1, r3]
   17658:	sub	r3, r3, #48	; 0x30
   1765c:	cmp	r3, #9
   17660:	bhi	17684 <__assert_fail@plt+0x6080>
   17664:	cmp	fp, r8
   17668:	movhi	r3, #48	; 0x30
   1766c:	strbhi	r3, [r9, r8]
   17670:	add	r3, r2, #2
   17674:	cmp	fp, r3
   17678:	add	r8, r2, #3
   1767c:	movhi	r1, #48	; 0x30
   17680:	strbhi	r1, [r9, r3]
   17684:	ldr	r3, [sp, #40]	; 0x28
   17688:	ldr	r1, [sp, #52]	; 0x34
   1768c:	mov	r7, r3
   17690:	str	r3, [sp, #32]
   17694:	mov	r4, #48	; 0x30
   17698:	b	172e8 <__assert_fail@plt+0x5ce4>
   1769c:	ldr	r6, [sp, #48]	; 0x30
   176a0:	cmp	sl, #0
   176a4:	streq	r7, [sp, #32]
   176a8:	beq	176c8 <__assert_fail@plt+0x60c4>
   176ac:	mov	r3, #0
   176b0:	ldr	r1, [sp, #52]	; 0x34
   176b4:	str	r3, [sp, #32]
   176b8:	b	172e8 <__assert_fail@plt+0x5ce4>
   176bc:	ldr	r6, [sp, #48]	; 0x30
   176c0:	mov	r3, #0
   176c4:	str	r3, [sp, #32]
   176c8:	ldr	r3, [sp, #64]	; 0x40
   176cc:	cmp	r3, #0
   176d0:	bne	17e4c <__assert_fail@plt+0x6848>
   176d4:	ldr	r1, [sp, #52]	; 0x34
   176d8:	b	172e8 <__assert_fail@plt+0x5ce4>
   176dc:	ldr	r3, [sp, #48]	; 0x30
   176e0:	mov	r6, r3
   176e4:	str	r3, [sp, #32]
   176e8:	b	176c8 <__assert_fail@plt+0x60c4>
   176ec:	ldr	r6, [sp, #48]	; 0x30
   176f0:	mov	r4, #13
   176f4:	mov	r3, #114	; 0x72
   176f8:	b	1755c <__assert_fail@plt+0x5f58>
   176fc:	ldr	r3, [sp, #44]	; 0x2c
   17700:	add	r5, r3, sl
   17704:	ldrb	r4, [r5]
   17708:	cmp	r4, #126	; 0x7e
   1770c:	ldrls	pc, [pc, r4, lsl #2]
   17710:	b	17aac <__assert_fail@plt+0x64a8>
   17714:	andeq	r7, r1, ip, ror sl
   17718:	andeq	r7, r1, ip, lsr #21
   1771c:	andeq	r7, r1, ip, lsr #21
   17720:	andeq	r7, r1, ip, lsr #21
   17724:	andeq	r7, r1, ip, lsr #21
   17728:	andeq	r7, r1, ip, lsr #21
   1772c:	andeq	r7, r1, ip, lsr #21
   17730:	andeq	r7, r1, r4, ror sl
   17734:	andeq	r7, r1, ip, ror #20
   17738:	andeq	r7, r1, r0, ror #20
   1773c:	andeq	r7, r1, r8, asr sl
   17740:	andeq	r7, r1, r0, asr sl
   17744:	andeq	r7, r1, r8, asr #20
   17748:	andeq	r7, r1, r0, asr #20
   1774c:	andeq	r7, r1, ip, lsr #21
   17750:	andeq	r7, r1, ip, lsr #21
   17754:	andeq	r7, r1, ip, lsr #21
   17758:	andeq	r7, r1, ip, lsr #21
   1775c:	andeq	r7, r1, ip, lsr #21
   17760:	andeq	r7, r1, ip, lsr #21
   17764:	andeq	r7, r1, ip, lsr #21
   17768:	andeq	r7, r1, ip, lsr #21
   1776c:	andeq	r7, r1, ip, lsr #21
   17770:	andeq	r7, r1, ip, lsr #21
   17774:	andeq	r7, r1, ip, lsr #21
   17778:	andeq	r7, r1, ip, lsr #21
   1777c:	andeq	r7, r1, ip, lsr #21
   17780:	andeq	r7, r1, ip, lsr #21
   17784:	andeq	r7, r1, ip, lsr #21
   17788:	andeq	r7, r1, ip, lsr #21
   1778c:	andeq	r7, r1, ip, lsr #21
   17790:	andeq	r7, r1, ip, lsr #21
   17794:	andeq	r7, r1, r4, lsr sl
   17798:	andeq	r7, r1, ip, lsr #20
   1779c:	andeq	r7, r1, ip, lsr #20
   177a0:	andeq	r7, r1, r4, lsr #20
   177a4:	andeq	r7, r1, ip, lsr #20
   177a8:	andeq	r7, r1, ip, lsl sl
   177ac:	andeq	r7, r1, ip, lsr #20
   177b0:	muleq	r1, r0, r9
   177b4:	andeq	r7, r1, ip, lsr #20
   177b8:	andeq	r7, r1, ip, lsr #20
   177bc:	andeq	r7, r1, ip, lsr #20
   177c0:	andeq	r7, r1, ip, lsl sl
   177c4:	andeq	r7, r1, ip, lsl sl
   177c8:	andeq	r7, r1, ip, lsl sl
   177cc:	andeq	r7, r1, ip, lsl sl
   177d0:	andeq	r7, r1, ip, lsl sl
   177d4:	andeq	r7, r1, ip, lsl sl
   177d8:	andeq	r7, r1, ip, lsl sl
   177dc:	andeq	r7, r1, ip, lsl sl
   177e0:	andeq	r7, r1, ip, lsl sl
   177e4:	andeq	r7, r1, ip, lsl sl
   177e8:	andeq	r7, r1, ip, lsl sl
   177ec:	andeq	r7, r1, ip, lsl sl
   177f0:	andeq	r7, r1, ip, lsl sl
   177f4:	andeq	r7, r1, ip, lsl sl
   177f8:	andeq	r7, r1, ip, lsl sl
   177fc:	andeq	r7, r1, ip, lsl sl
   17800:	andeq	r7, r1, ip, lsr #20
   17804:	andeq	r7, r1, ip, lsr #20
   17808:	andeq	r7, r1, ip, lsr #20
   1780c:	andeq	r7, r1, ip, lsr #20
   17810:	andeq	r7, r1, r4, ror #18
   17814:	andeq	r7, r1, ip, lsr #21
   17818:	andeq	r7, r1, ip, lsl sl
   1781c:	andeq	r7, r1, ip, lsl sl
   17820:	andeq	r7, r1, ip, lsl sl
   17824:	andeq	r7, r1, ip, lsl sl
   17828:	andeq	r7, r1, ip, lsl sl
   1782c:	andeq	r7, r1, ip, lsl sl
   17830:	andeq	r7, r1, ip, lsl sl
   17834:	andeq	r7, r1, ip, lsl sl
   17838:	andeq	r7, r1, ip, lsl sl
   1783c:	andeq	r7, r1, ip, lsl sl
   17840:	andeq	r7, r1, ip, lsl sl
   17844:	andeq	r7, r1, ip, lsl sl
   17848:	andeq	r7, r1, ip, lsl sl
   1784c:	andeq	r7, r1, ip, lsl sl
   17850:	andeq	r7, r1, ip, lsl sl
   17854:	andeq	r7, r1, ip, lsl sl
   17858:	andeq	r7, r1, ip, lsl sl
   1785c:	andeq	r7, r1, ip, lsl sl
   17860:	andeq	r7, r1, ip, lsl sl
   17864:	andeq	r7, r1, ip, lsl sl
   17868:	andeq	r7, r1, ip, lsl sl
   1786c:	andeq	r7, r1, ip, lsl sl
   17870:	andeq	r7, r1, ip, lsl sl
   17874:	andeq	r7, r1, ip, lsl sl
   17878:	andeq	r7, r1, ip, lsl sl
   1787c:	andeq	r7, r1, ip, lsl sl
   17880:	andeq	r7, r1, ip, lsr #20
   17884:	andeq	r7, r1, r4, lsr r9
   17888:	andeq	r7, r1, ip, lsl sl
   1788c:	andeq	r7, r1, ip, lsr #20
   17890:	andeq	r7, r1, ip, lsl sl
   17894:	andeq	r7, r1, ip, lsr #20
   17898:	andeq	r7, r1, ip, lsl sl
   1789c:	andeq	r7, r1, ip, lsl sl
   178a0:	andeq	r7, r1, ip, lsl sl
   178a4:	andeq	r7, r1, ip, lsl sl
   178a8:	andeq	r7, r1, ip, lsl sl
   178ac:	andeq	r7, r1, ip, lsl sl
   178b0:	andeq	r7, r1, ip, lsl sl
   178b4:	andeq	r7, r1, ip, lsl sl
   178b8:	andeq	r7, r1, ip, lsl sl
   178bc:	andeq	r7, r1, ip, lsl sl
   178c0:	andeq	r7, r1, ip, lsl sl
   178c4:	andeq	r7, r1, ip, lsl sl
   178c8:	andeq	r7, r1, ip, lsl sl
   178cc:	andeq	r7, r1, ip, lsl sl
   178d0:	andeq	r7, r1, ip, lsl sl
   178d4:	andeq	r7, r1, ip, lsl sl
   178d8:	andeq	r7, r1, ip, lsl sl
   178dc:	andeq	r7, r1, ip, lsl sl
   178e0:	andeq	r7, r1, ip, lsl sl
   178e4:	andeq	r7, r1, ip, lsl sl
   178e8:	andeq	r7, r1, ip, lsl sl
   178ec:	andeq	r7, r1, ip, lsl sl
   178f0:	andeq	r7, r1, ip, lsl sl
   178f4:	andeq	r7, r1, ip, lsl sl
   178f8:	andeq	r7, r1, ip, lsl sl
   178fc:	andeq	r7, r1, ip, lsl sl
   17900:	andeq	r7, r1, r0, lsl r9
   17904:	andeq	r7, r1, ip, lsr #20
   17908:	andeq	r7, r1, r0, lsl r9
   1790c:	andeq	r7, r1, r4, lsr #20
   17910:	ldr	r3, [sp, #24]
   17914:	mov	r6, #0
   17918:	cmn	r3, #1
   1791c:	bne	172c8 <__assert_fail@plt+0x5cc4>
   17920:	ldr	r3, [sp, #44]	; 0x2c
   17924:	ldrb	r3, [r3, #1]
   17928:	adds	r3, r3, #0
   1792c:	movne	r3, #1
   17930:	b	172d0 <__assert_fail@plt+0x5ccc>
   17934:	ldr	r3, [sp, #176]	; 0xb0
   17938:	mov	r6, #0
   1793c:	cmp	r3, #2
   17940:	bne	17410 <__assert_fail@plt+0x5e0c>
   17944:	ldr	r3, [sp, #64]	; 0x40
   17948:	cmp	r3, #0
   1794c:	bne	18184 <__assert_fail@plt+0x6b80>
   17950:	add	sl, sl, #1
   17954:	ldr	r6, [sp, #36]	; 0x24
   17958:	str	r3, [sp, #32]
   1795c:	mov	r4, #92	; 0x5c
   17960:	b	1731c <__assert_fail@plt+0x5d18>
   17964:	ldr	r3, [sp, #176]	; 0xb0
   17968:	mov	r6, #0
   1796c:	cmp	r3, #2
   17970:	bne	17444 <__assert_fail@plt+0x5e40>
   17974:	ldr	r3, [sp, #40]	; 0x28
   17978:	cmp	r3, #0
   1797c:	bne	17c60 <__assert_fail@plt+0x665c>
   17980:	mov	r1, r7
   17984:	str	r3, [sp, #32]
   17988:	mov	r4, #63	; 0x3f
   1798c:	b	172e8 <__assert_fail@plt+0x5ce4>
   17990:	ldr	r3, [sp, #176]	; 0xb0
   17994:	mov	r6, #0
   17998:	cmp	r3, #2
   1799c:	bne	17494 <__assert_fail@plt+0x5e90>
   179a0:	ldr	r3, [sp, #64]	; 0x40
   179a4:	cmp	r3, #0
   179a8:	bne	18184 <__assert_fail@plt+0x6b80>
   179ac:	ldr	r2, [sp, #84]	; 0x54
   179b0:	adds	r3, fp, #0
   179b4:	movne	r3, #1
   179b8:	cmp	r2, #0
   179bc:	movne	r3, #0
   179c0:	cmp	r3, #0
   179c4:	strne	fp, [sp, #84]	; 0x54
   179c8:	movne	fp, #0
   179cc:	bne	179fc <__assert_fail@plt+0x63f8>
   179d0:	cmp	fp, r8
   179d4:	movhi	r3, #39	; 0x27
   179d8:	strbhi	r3, [r9, r8]
   179dc:	add	r3, r8, #1
   179e0:	cmp	fp, r3
   179e4:	movhi	r2, #92	; 0x5c
   179e8:	strbhi	r2, [r9, r3]
   179ec:	add	r3, r8, #2
   179f0:	cmp	fp, r3
   179f4:	movhi	r2, #39	; 0x27
   179f8:	strbhi	r2, [r9, r3]
   179fc:	ldr	r3, [sp, #64]	; 0x40
   17a00:	add	r8, r8, #3
   17a04:	mov	r1, r7
   17a08:	str	r7, [sp, #32]
   17a0c:	str	r7, [sp, #76]	; 0x4c
   17a10:	str	r3, [sp, #36]	; 0x24
   17a14:	mov	r4, #39	; 0x27
   17a18:	b	172e8 <__assert_fail@plt+0x5ce4>
   17a1c:	mov	r6, #0
   17a20:	b	174ac <__assert_fail@plt+0x5ea8>
   17a24:	mov	r6, #0
   17a28:	b	176a0 <__assert_fail@plt+0x609c>
   17a2c:	mov	r6, #0
   17a30:	b	176c0 <__assert_fail@plt+0x60bc>
   17a34:	str	r7, [sp, #32]
   17a38:	mov	r6, #0
   17a3c:	b	176c8 <__assert_fail@plt+0x60c4>
   17a40:	mov	r6, #0
   17a44:	b	176f0 <__assert_fail@plt+0x60ec>
   17a48:	mov	r6, #0
   17a4c:	b	174bc <__assert_fail@plt+0x5eb8>
   17a50:	mov	r6, #0
   17a54:	b	17584 <__assert_fail@plt+0x5f80>
   17a58:	mov	r6, #0
   17a5c:	b	17554 <__assert_fail@plt+0x5f50>
   17a60:	mov	r6, #0
   17a64:	mov	r3, #116	; 0x74
   17a68:	b	1755c <__assert_fail@plt+0x5f58>
   17a6c:	mov	r6, #0
   17a70:	b	17598 <__assert_fail@plt+0x5f94>
   17a74:	mov	r6, #0
   17a78:	b	175ac <__assert_fail@plt+0x5fa8>
   17a7c:	ldr	r3, [sp, #56]	; 0x38
   17a80:	mov	r6, #0
   17a84:	cmp	r3, #0
   17a88:	bne	175cc <__assert_fail@plt+0x5fc8>
   17a8c:	ldr	r3, [sp, #96]	; 0x60
   17a90:	cmp	r3, #0
   17a94:	addne	sl, sl, #1
   17a98:	bne	16e40 <__assert_fail@plt+0x583c>
   17a9c:	ldr	r1, [sp, #52]	; 0x34
   17aa0:	str	r3, [sp, #32]
   17aa4:	mov	r4, r3
   17aa8:	b	172e8 <__assert_fail@plt+0x5ce4>
   17aac:	mov	r6, #0
   17ab0:	ldr	r3, [sp, #80]	; 0x50
   17ab4:	cmp	r3, #1
   17ab8:	bne	17ca8 <__assert_fail@plt+0x66a4>
   17abc:	bl	11424 <__ctype_b_loc@plt>
   17ac0:	ldr	r2, [sp, #80]	; 0x50
   17ac4:	sxth	r3, r4
   17ac8:	mov	r1, r2
   17acc:	lsl	r3, r3, #1
   17ad0:	ldr	r2, [r0]
   17ad4:	ldrh	r3, [r2, r3]
   17ad8:	and	r3, r3, #16384	; 0x4000
   17adc:	cmp	r3, #0
   17ae0:	movne	r3, #1
   17ae4:	moveq	r3, #0
   17ae8:	str	r3, [sp, #32]
   17aec:	moveq	r3, #1
   17af0:	movne	r3, #0
   17af4:	ldr	r2, [sp, #56]	; 0x38
   17af8:	and	r3, r3, r2
   17afc:	ands	r3, r3, #255	; 0xff
   17b00:	beq	176d4 <__assert_fail@plt+0x60d0>
   17b04:	add	r1, sl, r1
   17b08:	mov	r0, #0
   17b0c:	ldr	r7, [sp, #40]	; 0x28
   17b10:	ldr	r2, [sp, #36]	; 0x24
   17b14:	ldr	lr, [sp, #52]	; 0x34
   17b18:	b	17bc8 <__assert_fail@plt+0x65c4>
   17b1c:	cmp	r7, #0
   17b20:	bne	17f1c <__assert_fail@plt+0x6918>
   17b24:	eor	r0, r2, #1
   17b28:	ands	r0, lr, r0
   17b2c:	beq	17b64 <__assert_fail@plt+0x6560>
   17b30:	cmp	fp, r8
   17b34:	movhi	r2, #39	; 0x27
   17b38:	strbhi	r2, [r9, r8]
   17b3c:	add	r2, r8, #1
   17b40:	cmp	fp, r2
   17b44:	movhi	ip, #36	; 0x24
   17b48:	strbhi	ip, [r9, r2]
   17b4c:	add	r2, r8, #2
   17b50:	cmp	fp, r2
   17b54:	movhi	ip, #39	; 0x27
   17b58:	strbhi	ip, [r9, r2]
   17b5c:	add	r8, r8, #3
   17b60:	mov	r2, r0
   17b64:	cmp	fp, r8
   17b68:	movhi	r0, #92	; 0x5c
   17b6c:	strbhi	r0, [r9, r8]
   17b70:	add	r0, r8, #1
   17b74:	cmp	fp, r0
   17b78:	lsrhi	ip, r4, #6
   17b7c:	addhi	ip, ip, #48	; 0x30
   17b80:	strbhi	ip, [r9, r0]
   17b84:	add	ip, r8, #2
   17b88:	cmp	fp, ip
   17b8c:	lsrhi	r0, r4, #3
   17b90:	andhi	r0, r0, #7
   17b94:	addhi	r0, r0, #48	; 0x30
   17b98:	add	sl, sl, #1
   17b9c:	strbhi	r0, [r9, ip]
   17ba0:	and	r4, r4, #7
   17ba4:	cmp	sl, r1
   17ba8:	add	r4, r4, #48	; 0x30
   17bac:	add	r8, r8, #3
   17bb0:	bcs	17f34 <__assert_fail@plt+0x6930>
   17bb4:	mov	r0, r3
   17bb8:	cmp	fp, r8
   17bbc:	strbhi	r4, [r9, r8]
   17bc0:	ldrb	r4, [r5, #1]!
   17bc4:	add	r8, r8, #1
   17bc8:	cmp	r3, #0
   17bcc:	bne	17b1c <__assert_fail@plt+0x6518>
   17bd0:	cmp	r6, #0
   17bd4:	bne	17c78 <__assert_fail@plt+0x6674>
   17bd8:	eor	r6, r0, #1
   17bdc:	and	r6, r6, r2
   17be0:	add	sl, sl, #1
   17be4:	cmp	r1, sl
   17be8:	uxtb	r6, r6
   17bec:	bls	17ca0 <__assert_fail@plt+0x669c>
   17bf0:	cmp	r6, #0
   17bf4:	beq	17bb8 <__assert_fail@plt+0x65b4>
   17bf8:	cmp	fp, r8
   17bfc:	movhi	r2, #39	; 0x27
   17c00:	strbhi	r2, [r9, r8]
   17c04:	add	r2, r8, #1
   17c08:	cmp	fp, r2
   17c0c:	movhi	ip, #39	; 0x27
   17c10:	strbhi	ip, [r9, r2]
   17c14:	add	r8, r8, #2
   17c18:	mov	r6, r3
   17c1c:	mov	r2, r3
   17c20:	b	17bb8 <__assert_fail@plt+0x65b4>
   17c24:	ldr	r3, [sp, #184]	; 0xb8
   17c28:	cmp	r3, #0
   17c2c:	beq	17304 <__assert_fail@plt+0x5d00>
   17c30:	lsr	r2, r4, #5
   17c34:	mov	r0, r3
   17c38:	uxtb	r2, r2
   17c3c:	and	r3, r4, #31
   17c40:	ldr	r2, [r0, r2, lsl #2]
   17c44:	lsr	r3, r2, r3
   17c48:	tst	r3, #1
   17c4c:	beq	17304 <__assert_fail@plt+0x5d00>
   17c50:	ldr	r3, [sp, #40]	; 0x28
   17c54:	cmp	r3, #0
   17c58:	beq	174f0 <__assert_fail@plt+0x5eec>
   17c5c:	mov	r3, r1
   17c60:	str	r3, [sp, #64]	; 0x40
   17c64:	mov	sl, r9
   17c68:	ldr	r3, [sp, #56]	; 0x38
   17c6c:	mov	r9, fp
   17c70:	ldr	r2, [sp, #64]	; 0x40
   17c74:	b	17e64 <__assert_fail@plt+0x6860>
   17c78:	cmp	fp, r8
   17c7c:	eor	r6, r0, #1
   17c80:	movhi	ip, #92	; 0x5c
   17c84:	and	r6, r6, r2
   17c88:	add	sl, sl, #1
   17c8c:	strbhi	ip, [r9, r8]
   17c90:	cmp	r1, sl
   17c94:	add	r8, r8, #1
   17c98:	uxtb	r6, r6
   17c9c:	bhi	17bf0 <__assert_fail@plt+0x65ec>
   17ca0:	str	r2, [sp, #36]	; 0x24
   17ca4:	b	1731c <__assert_fail@plt+0x5d18>
   17ca8:	ldr	r3, [sp, #24]
   17cac:	cmn	r3, #1
   17cb0:	mov	r3, #0
   17cb4:	str	r3, [sp, #128]	; 0x80
   17cb8:	str	r3, [sp, #132]	; 0x84
   17cbc:	beq	17fb0 <__assert_fail@plt+0x69ac>
   17cc0:	mov	r2, r7
   17cc4:	mov	r3, #0
   17cc8:	str	r7, [sp, #104]	; 0x68
   17ccc:	str	r5, [sp, #116]	; 0x74
   17cd0:	mov	r7, r3
   17cd4:	mov	r5, r2
   17cd8:	str	r4, [sp, #32]
   17cdc:	str	r6, [sp, #108]	; 0x6c
   17ce0:	str	r8, [sp, #112]	; 0x70
   17ce4:	ldr	r3, [sp, #44]	; 0x2c
   17ce8:	add	r6, sl, r7
   17cec:	add	r4, r3, r6
   17cf0:	ldr	r3, [sp, #24]
   17cf4:	mov	r1, r4
   17cf8:	sub	r2, r3, r6
   17cfc:	add	r0, sp, #124	; 0x7c
   17d00:	add	r3, sp, #128	; 0x80
   17d04:	bl	1cd5c <__assert_fail@plt+0xb758>
   17d08:	subs	r8, r0, #0
   17d0c:	beq	18094 <__assert_fail@plt+0x6a90>
   17d10:	cmn	r8, #1
   17d14:	beq	1806c <__assert_fail@plt+0x6a68>
   17d18:	cmn	r8, #2
   17d1c:	beq	18004 <__assert_fail@plt+0x6a00>
   17d20:	ldr	r3, [sp, #64]	; 0x40
   17d24:	cmp	r3, #0
   17d28:	beq	17de8 <__assert_fail@plt+0x67e4>
   17d2c:	cmp	r8, #1
   17d30:	beq	17de8 <__assert_fail@plt+0x67e4>
   17d34:	sub	r3, r8, #1
   17d38:	add	r6, r3, r6
   17d3c:	ldr	r3, [sp, #44]	; 0x2c
   17d40:	add	r6, r3, r6
   17d44:	ldrb	r3, [r4, #1]!
   17d48:	sub	r3, r3, #91	; 0x5b
   17d4c:	cmp	r3, #33	; 0x21
   17d50:	ldrls	pc, [pc, r3, lsl #2]
   17d54:	b	17de0 <__assert_fail@plt+0x67dc>
   17d58:	andeq	r7, r1, ip, asr #28
   17d5c:	andeq	r7, r1, ip, asr #28
   17d60:	andeq	r7, r1, r0, ror #27
   17d64:	andeq	r7, r1, ip, asr #28
   17d68:	andeq	r7, r1, r0, ror #27
   17d6c:	andeq	r7, r1, ip, asr #28
   17d70:	andeq	r7, r1, r0, ror #27
   17d74:	andeq	r7, r1, r0, ror #27
   17d78:	andeq	r7, r1, r0, ror #27
   17d7c:	andeq	r7, r1, r0, ror #27
   17d80:	andeq	r7, r1, r0, ror #27
   17d84:	andeq	r7, r1, r0, ror #27
   17d88:	andeq	r7, r1, r0, ror #27
   17d8c:	andeq	r7, r1, r0, ror #27
   17d90:	andeq	r7, r1, r0, ror #27
   17d94:	andeq	r7, r1, r0, ror #27
   17d98:	andeq	r7, r1, r0, ror #27
   17d9c:	andeq	r7, r1, r0, ror #27
   17da0:	andeq	r7, r1, r0, ror #27
   17da4:	andeq	r7, r1, r0, ror #27
   17da8:	andeq	r7, r1, r0, ror #27
   17dac:	andeq	r7, r1, r0, ror #27
   17db0:	andeq	r7, r1, r0, ror #27
   17db4:	andeq	r7, r1, r0, ror #27
   17db8:	andeq	r7, r1, r0, ror #27
   17dbc:	andeq	r7, r1, r0, ror #27
   17dc0:	andeq	r7, r1, r0, ror #27
   17dc4:	andeq	r7, r1, r0, ror #27
   17dc8:	andeq	r7, r1, r0, ror #27
   17dcc:	andeq	r7, r1, r0, ror #27
   17dd0:	andeq	r7, r1, r0, ror #27
   17dd4:	andeq	r7, r1, r0, ror #27
   17dd8:	andeq	r7, r1, r0, ror #27
   17ddc:	andeq	r7, r1, ip, asr #28
   17de0:	cmp	r6, r4
   17de4:	bne	17d44 <__assert_fail@plt+0x6740>
   17de8:	ldr	r0, [sp, #124]	; 0x7c
   17dec:	bl	1134c <iswprint@plt>
   17df0:	add	r7, r7, r8
   17df4:	cmp	r0, #0
   17df8:	add	r0, sp, #128	; 0x80
   17dfc:	moveq	r5, #0
   17e00:	bl	112bc <mbsinit@plt>
   17e04:	cmp	r0, #0
   17e08:	beq	17ce4 <__assert_fail@plt+0x66e0>
   17e0c:	ldr	r4, [sp, #32]
   17e10:	str	r5, [sp, #32]
   17e14:	ldr	r3, [sp, #32]
   17e18:	mov	r1, r7
   17e1c:	eor	r3, r3, #1
   17e20:	ldr	r7, [sp, #104]	; 0x68
   17e24:	ldr	r6, [sp, #108]	; 0x6c
   17e28:	ldr	r8, [sp, #112]	; 0x70
   17e2c:	ldr	r5, [sp, #116]	; 0x74
   17e30:	uxtb	r3, r3
   17e34:	cmp	r1, #1
   17e38:	bls	17af4 <__assert_fail@plt+0x64f0>
   17e3c:	ldr	r2, [sp, #56]	; 0x38
   17e40:	and	r3, r3, r2
   17e44:	uxtb	r3, r3
   17e48:	b	17b04 <__assert_fail@plt+0x6500>
   17e4c:	mov	r3, #2
   17e50:	str	r3, [sp, #176]	; 0xb0
   17e54:	ldr	r2, [sp, #64]	; 0x40
   17e58:	ldr	r3, [sp, #56]	; 0x38
   17e5c:	mov	sl, r9
   17e60:	mov	r9, fp
   17e64:	and	r3, r3, r2
   17e68:	tst	r3, #255	; 0xff
   17e6c:	ldr	r3, [sp, #176]	; 0xb0
   17e70:	movne	r3, #4
   17e74:	str	r3, [sp, #176]	; 0xb0
   17e78:	ldr	r3, [sp, #180]	; 0xb4
   17e7c:	mov	ip, #0
   17e80:	bic	r3, r3, #2
   17e84:	str	r3, [sp, #4]
   17e88:	ldr	r3, [sp, #192]	; 0xc0
   17e8c:	ldr	r2, [sp, #44]	; 0x2c
   17e90:	str	r3, [sp, #16]
   17e94:	ldr	r3, [sp, #188]	; 0xbc
   17e98:	mov	r1, r9
   17e9c:	str	r3, [sp, #12]
   17ea0:	ldr	r3, [sp, #176]	; 0xb0
   17ea4:	mov	r0, sl
   17ea8:	str	r3, [sp]
   17eac:	str	ip, [sp, #8]
   17eb0:	ldr	r3, [sp, #24]
   17eb4:	bl	16d14 <__assert_fail@plt+0x5710>
   17eb8:	mov	fp, r0
   17ebc:	mov	r0, fp
   17ec0:	add	sp, sp, #140	; 0x8c
   17ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ec8:	mov	r4, #92	; 0x5c
   17ecc:	mov	r1, #0
   17ed0:	mov	r3, r4
   17ed4:	b	174c8 <__assert_fail@plt+0x5ec4>
   17ed8:	mov	r3, #0
   17edc:	ldr	r1, [sp, #52]	; 0x34
   17ee0:	str	r3, [sp, #32]
   17ee4:	mov	r4, #63	; 0x3f
   17ee8:	b	172e8 <__assert_fail@plt+0x5ce4>
   17eec:	cmp	fp, #0
   17ef0:	beq	17f4c <__assert_fail@plt+0x6948>
   17ef4:	mov	r3, #39	; 0x27
   17ef8:	strb	r3, [r9]
   17efc:	mov	r3, #0
   17f00:	str	r3, [sp, #40]	; 0x28
   17f04:	mov	r3, #1
   17f08:	str	r3, [sp, #68]	; 0x44
   17f0c:	ldr	r3, [pc, #448]	; 180d4 <__assert_fail@plt+0x6ad0>
   17f10:	mov	r8, #1
   17f14:	str	r3, [sp, #72]	; 0x48
   17f18:	b	170fc <__assert_fail@plt+0x5af8>
   17f1c:	ldr	r3, [sp, #40]	; 0x28
   17f20:	mov	sl, r9
   17f24:	str	r3, [sp, #56]	; 0x38
   17f28:	mov	r9, fp
   17f2c:	ldr	r2, [sp, #64]	; 0x40
   17f30:	b	17e64 <__assert_fail@plt+0x6860>
   17f34:	str	r2, [sp, #36]	; 0x24
   17f38:	b	1734c <__assert_fail@plt+0x5d48>
   17f3c:	mov	r1, #0
   17f40:	str	r3, [sp, #32]
   17f44:	mov	r4, #63	; 0x3f
   17f48:	b	172e8 <__assert_fail@plt+0x5ce4>
   17f4c:	ldr	r3, [pc, #384]	; 180d4 <__assert_fail@plt+0x6ad0>
   17f50:	str	r3, [sp, #72]	; 0x48
   17f54:	mov	r3, #0
   17f58:	str	r3, [sp, #40]	; 0x28
   17f5c:	mov	r3, #1
   17f60:	str	r3, [sp, #68]	; 0x44
   17f64:	mov	r8, r3
   17f68:	b	170fc <__assert_fail@plt+0x5af8>
   17f6c:	bl	115c8 <abort@plt>
   17f70:	cmp	fp, #0
   17f74:	beq	17fd4 <__assert_fail@plt+0x69d0>
   17f78:	mov	r2, #1
   17f7c:	mov	r3, #34	; 0x22
   17f80:	strb	r3, [r9]
   17f84:	mov	r8, r2
   17f88:	mov	r3, r2
   17f8c:	str	r2, [sp, #68]	; 0x44
   17f90:	str	r3, [sp, #56]	; 0x38
   17f94:	ldr	r3, [pc, #316]	; 180d8 <__assert_fail@plt+0x6ad4>
   17f98:	ldr	r1, [sp, #56]	; 0x38
   17f9c:	str	r3, [sp, #72]	; 0x48
   17fa0:	ldr	r2, [sp, #176]	; 0xb0
   17fa4:	ldr	ip, [sp, #40]	; 0x28
   17fa8:	ldr	lr, [sp, #176]	; 0xb0
   17fac:	b	16de0 <__assert_fail@plt+0x57dc>
   17fb0:	ldr	r0, [sp, #44]	; 0x2c
   17fb4:	bl	11460 <strlen@plt>
   17fb8:	str	r0, [sp, #24]
   17fbc:	b	17cc0 <__assert_fail@plt+0x66bc>
   17fc0:	mov	r7, #0
   17fc4:	ldr	r1, [sp, #52]	; 0x34
   17fc8:	str	r3, [sp, #32]
   17fcc:	mov	r4, #48	; 0x30
   17fd0:	b	172e8 <__assert_fail@plt+0x5ce4>
   17fd4:	mov	r3, #1
   17fd8:	str	r3, [sp, #68]	; 0x44
   17fdc:	mov	r8, r3
   17fe0:	b	17f90 <__assert_fail@plt+0x698c>
   17fe4:	mov	r3, #2
   17fe8:	mov	sl, r9
   17fec:	str	r3, [sp, #176]	; 0xb0
   17ff0:	mov	r9, fp
   17ff4:	ldr	r3, [sp, #56]	; 0x38
   17ff8:	b	17e64 <__assert_fail@plt+0x6860>
   17ffc:	ldr	r6, [sp, #48]	; 0x30
   18000:	b	17ab0 <__assert_fail@plt+0x64ac>
   18004:	ldr	r0, [sp, #24]
   18008:	mov	ip, r6
   1800c:	cmp	r0, ip
   18010:	mov	r1, r7
   18014:	mov	r2, r4
   18018:	ldr	r7, [sp, #104]	; 0x68
   1801c:	ldr	r4, [sp, #32]
   18020:	ldr	r6, [sp, #108]	; 0x6c
   18024:	ldr	r8, [sp, #112]	; 0x70
   18028:	ldr	r5, [sp, #116]	; 0x74
   1802c:	bls	1805c <__assert_fail@plt+0x6a58>
   18030:	ldrb	r3, [r2]
   18034:	cmp	r3, #0
   18038:	bne	1804c <__assert_fail@plt+0x6a48>
   1803c:	b	1816c <__assert_fail@plt+0x6b68>
   18040:	ldrb	r3, [r2, #1]!
   18044:	cmp	r3, #0
   18048:	beq	1816c <__assert_fail@plt+0x6b68>
   1804c:	add	r1, r1, #1
   18050:	add	r3, sl, r1
   18054:	cmp	r0, r3
   18058:	bhi	18040 <__assert_fail@plt+0x6a3c>
   1805c:	mov	r2, #0
   18060:	mov	r3, r7
   18064:	str	r2, [sp, #32]
   18068:	b	17e34 <__assert_fail@plt+0x6830>
   1806c:	mov	r1, r7
   18070:	ldr	r7, [sp, #104]	; 0x68
   18074:	mov	r2, #0
   18078:	ldr	r4, [sp, #32]
   1807c:	ldr	r6, [sp, #108]	; 0x6c
   18080:	ldr	r8, [sp, #112]	; 0x70
   18084:	ldr	r5, [sp, #116]	; 0x74
   18088:	mov	r3, r7
   1808c:	str	r2, [sp, #32]
   18090:	b	17e34 <__assert_fail@plt+0x6830>
   18094:	mov	r3, r5
   18098:	eor	r3, r3, #1
   1809c:	ldr	r4, [sp, #32]
   180a0:	mov	r1, r7
   180a4:	str	r5, [sp, #32]
   180a8:	ldr	r7, [sp, #104]	; 0x68
   180ac:	ldr	r6, [sp, #108]	; 0x6c
   180b0:	ldr	r8, [sp, #112]	; 0x70
   180b4:	ldr	r5, [sp, #116]	; 0x74
   180b8:	uxtb	r3, r3
   180bc:	b	17e34 <__assert_fail@plt+0x6830>
   180c0:	mov	sl, r9
   180c4:	str	r3, [sp, #56]	; 0x38
   180c8:	mov	r9, fp
   180cc:	ldr	r2, [sp, #64]	; 0x40
   180d0:	b	17e64 <__assert_fail@plt+0x6860>
   180d4:	andeq	lr, r1, r0, asr #18
   180d8:	andeq	lr, r1, ip, lsr r9
   180dc:	andeq	lr, r1, r4, asr #18
   180e0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   180e4:	ldr	r2, [sp, #44]	; 0x2c
   180e8:	ldrb	r1, [r2, r3]
   180ec:	sub	r2, r1, #33	; 0x21
   180f0:	uxtb	r2, r2
   180f4:	cmp	r2, #29
   180f8:	bhi	18178 <__assert_fail@plt+0x6b74>
   180fc:	ldr	r0, [pc, #-36]	; 180e0 <__assert_fail@plt+0x6adc>
   18100:	mov	ip, #1
   18104:	ands	r2, r0, ip, lsl r2
   18108:	beq	18198 <__assert_fail@plt+0x6b94>
   1810c:	ldr	r2, [sp, #40]	; 0x28
   18110:	cmp	r2, #0
   18114:	bne	1828c <__assert_fail@plt+0x6c88>
   18118:	add	r2, r8, #1
   1811c:	cmp	fp, r8
   18120:	strbhi	r4, [r9, r8]
   18124:	cmp	fp, r2
   18128:	movhi	r0, #34	; 0x22
   1812c:	strbhi	r0, [r9, r2]
   18130:	add	r2, r8, #2
   18134:	cmp	fp, r2
   18138:	movhi	r0, #34	; 0x22
   1813c:	strbhi	r0, [r9, r2]
   18140:	add	r2, r8, #3
   18144:	cmp	fp, r2
   18148:	mov	sl, r3
   1814c:	ldr	r3, [sp, #40]	; 0x28
   18150:	movhi	r0, #63	; 0x3f
   18154:	mov	r4, r1
   18158:	strbhi	r0, [r9, r2]
   1815c:	add	r8, r8, #4
   18160:	mov	r1, r3
   18164:	str	r3, [sp, #32]
   18168:	b	172e8 <__assert_fail@plt+0x5ce4>
   1816c:	str	r3, [sp, #32]
   18170:	mov	r3, r7
   18174:	b	17e34 <__assert_fail@plt+0x6830>
   18178:	mov	r1, #0
   1817c:	str	r1, [sp, #32]
   18180:	b	172e8 <__assert_fail@plt+0x5ce4>
   18184:	mov	sl, r9
   18188:	ldr	r3, [sp, #56]	; 0x38
   1818c:	mov	r9, fp
   18190:	ldr	r2, [sp, #64]	; 0x40
   18194:	b	17e64 <__assert_fail@plt+0x6860>
   18198:	str	r2, [sp, #32]
   1819c:	mov	r1, #0
   181a0:	b	172e8 <__assert_fail@plt+0x5ce4>
   181a4:	ldr	r2, [sp, #76]	; 0x4c
   181a8:	mov	sl, r9
   181ac:	mov	r9, fp
   181b0:	mov	fp, r8
   181b4:	ldr	r1, [sp, #72]	; 0x48
   181b8:	cmp	r1, #0
   181bc:	moveq	r3, #0
   181c0:	andne	r3, r2, #1
   181c4:	cmp	r3, #0
   181c8:	beq	181f4 <__assert_fail@plt+0x6bf0>
   181cc:	ldrb	r3, [r1]
   181d0:	cmp	r3, #0
   181d4:	beq	181f4 <__assert_fail@plt+0x6bf0>
   181d8:	mov	r2, r1
   181dc:	cmp	r9, fp
   181e0:	strbhi	r3, [sl, fp]
   181e4:	ldrb	r3, [r2, #1]!
   181e8:	add	fp, fp, #1
   181ec:	cmp	r3, #0
   181f0:	bne	181dc <__assert_fail@plt+0x6bd8>
   181f4:	cmp	r9, fp
   181f8:	movhi	r3, #0
   181fc:	strbhi	r3, [sl, fp]
   18200:	b	17ebc <__assert_fail@plt+0x68b8>
   18204:	ldr	r3, [sp, #192]	; 0xc0
   18208:	mov	ip, #5
   1820c:	str	r3, [sp, #16]
   18210:	ldr	r3, [sp, #188]	; 0xbc
   18214:	ldr	r2, [sp, #44]	; 0x2c
   18218:	str	r3, [sp, #12]
   1821c:	ldr	r3, [sp, #184]	; 0xb8
   18220:	ldr	r1, [sp, #84]	; 0x54
   18224:	str	r3, [sp, #8]
   18228:	ldr	r3, [sp, #180]	; 0xb4
   1822c:	mov	r0, r9
   18230:	str	r3, [sp, #4]
   18234:	str	ip, [sp]
   18238:	ldr	r3, [sp, #24]
   1823c:	bl	16d14 <__assert_fail@plt+0x5710>
   18240:	mov	fp, r0
   18244:	b	17ebc <__assert_fail@plt+0x68b8>
   18248:	mov	sl, r9
   1824c:	mov	r9, fp
   18250:	mov	fp, r8
   18254:	b	181b4 <__assert_fail@plt+0x6bb0>
   18258:	ldr	r1, [sp, #176]	; 0xb0
   1825c:	bl	16bf4 <__assert_fail@plt+0x55f0>
   18260:	str	r0, [sp, #192]	; 0xc0
   18264:	b	171d0 <__assert_fail@plt+0x5bcc>
   18268:	ldr	r1, [sp, #176]	; 0xb0
   1826c:	bl	16bf4 <__assert_fail@plt+0x55f0>
   18270:	str	r0, [sp, #188]	; 0xbc
   18274:	b	171b0 <__assert_fail@plt+0x5bac>
   18278:	mov	sl, r9
   1827c:	mov	r2, r3
   18280:	mov	r9, fp
   18284:	mov	fp, r8
   18288:	b	181b4 <__assert_fail@plt+0x6bb0>
   1828c:	mov	sl, r9
   18290:	mov	r9, fp
   18294:	b	17e78 <__assert_fail@plt+0x6874>
   18298:	push	{r4, r5, r6, lr}
   1829c:	mov	r5, r0
   182a0:	bl	11484 <__errno_location@plt>
   182a4:	cmp	r5, #0
   182a8:	mov	r1, #48	; 0x30
   182ac:	mov	r4, r0
   182b0:	ldr	r0, [pc, #16]	; 182c8 <__assert_fail@plt+0x6cc4>
   182b4:	ldr	r6, [r4]
   182b8:	movne	r0, r5
   182bc:	bl	1c43c <__assert_fail@plt+0xae38>
   182c0:	str	r6, [r4]
   182c4:	pop	{r4, r5, r6, pc}
   182c8:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   182cc:	ldr	r3, [pc, #12]	; 182e0 <__assert_fail@plt+0x6cdc>
   182d0:	cmp	r0, #0
   182d4:	moveq	r0, r3
   182d8:	ldr	r0, [r0]
   182dc:	bx	lr
   182e0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   182e4:	ldr	r3, [pc, #12]	; 182f8 <__assert_fail@plt+0x6cf4>
   182e8:	cmp	r0, #0
   182ec:	moveq	r0, r3
   182f0:	str	r1, [r0]
   182f4:	bx	lr
   182f8:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   182fc:	ldr	r3, [pc, #52]	; 18338 <__assert_fail@plt+0x6d34>
   18300:	cmp	r0, #0
   18304:	moveq	r0, r3
   18308:	add	r3, r0, #8
   1830c:	push	{lr}		; (str lr, [sp, #-4]!)
   18310:	lsr	lr, r1, #5
   18314:	and	r1, r1, #31
   18318:	ldr	ip, [r3, lr, lsl #2]
   1831c:	lsr	r0, ip, r1
   18320:	eor	r2, r2, r0
   18324:	and	r2, r2, #1
   18328:	and	r0, r0, #1
   1832c:	eor	r1, ip, r2, lsl r1
   18330:	str	r1, [r3, lr, lsl #2]
   18334:	pop	{pc}		; (ldr pc, [sp], #4)
   18338:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   1833c:	ldr	r3, [pc, #16]	; 18354 <__assert_fail@plt+0x6d50>
   18340:	cmp	r0, #0
   18344:	movne	r3, r0
   18348:	ldr	r0, [r3, #4]
   1834c:	str	r1, [r3, #4]
   18350:	bx	lr
   18354:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18358:	ldr	r3, [pc, #44]	; 1838c <__assert_fail@plt+0x6d88>
   1835c:	cmp	r0, #0
   18360:	moveq	r0, r3
   18364:	mov	ip, #10
   18368:	cmp	r2, #0
   1836c:	cmpne	r1, #0
   18370:	str	ip, [r0]
   18374:	beq	18384 <__assert_fail@plt+0x6d80>
   18378:	str	r1, [r0, #40]	; 0x28
   1837c:	str	r2, [r0, #44]	; 0x2c
   18380:	bx	lr
   18384:	push	{r4, lr}
   18388:	bl	115c8 <abort@plt>
   1838c:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18390:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18394:	sub	sp, sp, #24
   18398:	ldr	ip, [pc, #108]	; 1840c <__assert_fail@plt+0x6e08>
   1839c:	ldr	r4, [sp, #56]	; 0x38
   183a0:	mov	r9, r2
   183a4:	cmp	r4, #0
   183a8:	moveq	r4, ip
   183ac:	mov	sl, r3
   183b0:	mov	r7, r0
   183b4:	mov	r8, r1
   183b8:	bl	11484 <__errno_location@plt>
   183bc:	ldr	r3, [r4, #44]	; 0x2c
   183c0:	mov	r1, r8
   183c4:	ldr	r6, [r0]
   183c8:	str	r3, [sp, #16]
   183cc:	ldr	r2, [r4, #40]	; 0x28
   183d0:	add	r3, r4, #8
   183d4:	str	r3, [sp, #8]
   183d8:	str	r2, [sp, #12]
   183dc:	ldr	r2, [r4, #4]
   183e0:	mov	r5, r0
   183e4:	str	r2, [sp, #4]
   183e8:	ldr	ip, [r4]
   183ec:	mov	r3, sl
   183f0:	mov	r2, r9
   183f4:	mov	r0, r7
   183f8:	str	ip, [sp]
   183fc:	bl	16d14 <__assert_fail@plt+0x5710>
   18400:	str	r6, [r5]
   18404:	add	sp, sp, #24
   18408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1840c:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18414:	cmp	r2, #0
   18418:	sub	sp, sp, #36	; 0x24
   1841c:	ldr	r4, [pc, #164]	; 184c8 <__assert_fail@plt+0x6ec4>
   18420:	mov	r8, r1
   18424:	movne	r4, r2
   18428:	mov	r7, r0
   1842c:	bl	11484 <__errno_location@plt>
   18430:	ldr	r3, [r4, #44]	; 0x2c
   18434:	ldr	r5, [r4, #4]
   18438:	add	r9, r4, #8
   1843c:	orr	r5, r5, #1
   18440:	mov	r1, #0
   18444:	mov	r2, r7
   18448:	ldr	fp, [r0]
   1844c:	str	r3, [sp, #16]
   18450:	ldr	r3, [r4, #40]	; 0x28
   18454:	stmib	sp, {r5, r9}
   18458:	str	r3, [sp, #12]
   1845c:	ldr	r3, [r4]
   18460:	mov	r6, r0
   18464:	str	r3, [sp]
   18468:	mov	r0, r1
   1846c:	mov	r3, r8
   18470:	bl	16d14 <__assert_fail@plt+0x5710>
   18474:	add	r1, r0, #1
   18478:	mov	r0, r1
   1847c:	str	r1, [sp, #28]
   18480:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18484:	ldr	r3, [r4, #44]	; 0x2c
   18488:	ldr	r1, [sp, #28]
   1848c:	str	r3, [sp, #16]
   18490:	ldr	r3, [r4, #40]	; 0x28
   18494:	str	r5, [sp, #4]
   18498:	str	r3, [sp, #12]
   1849c:	str	r9, [sp, #8]
   184a0:	ldr	ip, [r4]
   184a4:	mov	r3, r8
   184a8:	mov	r2, r7
   184ac:	str	ip, [sp]
   184b0:	mov	sl, r0
   184b4:	bl	16d14 <__assert_fail@plt+0x5710>
   184b8:	mov	r0, sl
   184bc:	str	fp, [r6]
   184c0:	add	sp, sp, #36	; 0x24
   184c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184c8:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   184cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184d0:	cmp	r3, #0
   184d4:	sub	sp, sp, #44	; 0x2c
   184d8:	ldr	r4, [pc, #192]	; 185a0 <__assert_fail@plt+0x6f9c>
   184dc:	mov	r6, r2
   184e0:	movne	r4, r3
   184e4:	mov	r9, r1
   184e8:	mov	r8, r0
   184ec:	bl	11484 <__errno_location@plt>
   184f0:	ldr	r3, [r4, #44]	; 0x2c
   184f4:	ldr	r5, [r4, #4]
   184f8:	add	sl, r4, #8
   184fc:	cmp	r6, #0
   18500:	orreq	r5, r5, #1
   18504:	mov	r1, #0
   18508:	ldr	r2, [r0]
   1850c:	str	r3, [sp, #16]
   18510:	ldr	r3, [r4, #40]	; 0x28
   18514:	stmib	sp, {r5, sl}
   18518:	str	r3, [sp, #12]
   1851c:	ldr	r3, [r4]
   18520:	mov	r7, r0
   18524:	str	r2, [sp, #28]
   18528:	str	r3, [sp]
   1852c:	mov	r2, r8
   18530:	mov	r3, r9
   18534:	mov	r0, r1
   18538:	bl	16d14 <__assert_fail@plt+0x5710>
   1853c:	add	r1, r0, #1
   18540:	mov	fp, r0
   18544:	mov	r0, r1
   18548:	str	r1, [sp, #36]	; 0x24
   1854c:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18550:	ldr	r3, [r4, #44]	; 0x2c
   18554:	mov	r2, r8
   18558:	str	r3, [sp, #16]
   1855c:	ldr	r3, [r4, #40]	; 0x28
   18560:	str	r5, [sp, #4]
   18564:	str	r3, [sp, #12]
   18568:	str	sl, [sp, #8]
   1856c:	ldr	ip, [r4]
   18570:	ldr	r1, [sp, #36]	; 0x24
   18574:	mov	r3, r9
   18578:	str	ip, [sp]
   1857c:	str	r0, [sp, #32]
   18580:	bl	16d14 <__assert_fail@plt+0x5710>
   18584:	ldr	r2, [sp, #28]
   18588:	cmp	r6, #0
   1858c:	str	r2, [r7]
   18590:	ldr	r0, [sp, #32]
   18594:	strne	fp, [r6]
   18598:	add	sp, sp, #44	; 0x2c
   1859c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185a0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   185a4:	push	{r4, r5, r6, r7, r8, lr}
   185a8:	ldr	r6, [pc, #116]	; 18624 <__assert_fail@plt+0x7020>
   185ac:	ldr	r3, [r6, #4]
   185b0:	ldr	r7, [r6]
   185b4:	cmp	r3, #1
   185b8:	movgt	r5, r7
   185bc:	movgt	r4, #1
   185c0:	ble	185e0 <__assert_fail@plt+0x6fdc>
   185c4:	ldr	r0, [r5, #12]
   185c8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   185cc:	ldr	r3, [r6, #4]
   185d0:	add	r4, r4, #1
   185d4:	cmp	r3, r4
   185d8:	add	r5, r5, #8
   185dc:	bgt	185c4 <__assert_fail@plt+0x6fc0>
   185e0:	ldr	r0, [r7, #4]
   185e4:	ldr	r4, [pc, #60]	; 18628 <__assert_fail@plt+0x7024>
   185e8:	cmp	r0, r4
   185ec:	beq	18600 <__assert_fail@plt+0x6ffc>
   185f0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   185f4:	mov	r3, #256	; 0x100
   185f8:	str	r4, [r6, #12]
   185fc:	str	r3, [r6, #8]
   18600:	ldr	r4, [pc, #36]	; 1862c <__assert_fail@plt+0x7028>
   18604:	cmp	r7, r4
   18608:	beq	18618 <__assert_fail@plt+0x7014>
   1860c:	mov	r0, r7
   18610:	bl	1cc30 <__assert_fail@plt+0xb62c>
   18614:	str	r4, [r6]
   18618:	mov	r3, #1
   1861c:	str	r3, [r6, #4]
   18620:	pop	{r4, r5, r6, r7, r8, pc}
   18624:	andeq	pc, r2, ip, ror #2
   18628:	andeq	pc, r2, r0, asr #4
   1862c:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18634:	sub	sp, sp, #44	; 0x2c
   18638:	mov	r5, r0
   1863c:	mov	sl, r1
   18640:	bl	11484 <__errno_location@plt>
   18644:	ldr	r4, [pc, #400]	; 187dc <__assert_fail@plt+0x71d8>
   18648:	cmn	r5, #-2147483647	; 0x80000001
   1864c:	ldr	r6, [r4]
   18650:	mov	r8, r0
   18654:	movne	r0, #0
   18658:	moveq	r0, #1
   1865c:	ldr	r3, [r8]
   18660:	orrs	r0, r0, r5, lsr #31
   18664:	str	r3, [sp, #24]
   18668:	bne	187d8 <__assert_fail@plt+0x71d4>
   1866c:	ldr	r2, [r4, #4]
   18670:	cmp	r5, r2
   18674:	blt	186d4 <__assert_fail@plt+0x70d0>
   18678:	add	r7, r4, #8
   1867c:	cmp	r6, r7
   18680:	str	r2, [sp, #36]	; 0x24
   18684:	beq	187a8 <__assert_fail@plt+0x71a4>
   18688:	mov	r3, #8
   1868c:	sub	r2, r5, r2
   18690:	mov	r0, r6
   18694:	str	r3, [sp]
   18698:	add	r2, r2, #1
   1869c:	mvn	r3, #-2147483648	; 0x80000000
   186a0:	add	r1, sp, #36	; 0x24
   186a4:	bl	1c114 <__assert_fail@plt+0xab10>
   186a8:	mov	r6, r0
   186ac:	str	r0, [r4]
   186b0:	ldr	r0, [r4, #4]
   186b4:	ldr	r2, [sp, #36]	; 0x24
   186b8:	mov	r1, #0
   186bc:	sub	r2, r2, r0
   186c0:	add	r0, r6, r0, lsl #3
   186c4:	lsl	r2, r2, #3
   186c8:	bl	114a8 <memset@plt>
   186cc:	ldr	r3, [sp, #36]	; 0x24
   186d0:	str	r3, [r4, #4]
   186d4:	ldr	r4, [pc, #260]	; 187e0 <__assert_fail@plt+0x71dc>
   186d8:	add	fp, r6, r5, lsl #3
   186dc:	ldr	r9, [r6, r5, lsl #3]
   186e0:	ldr	r0, [r4, #4]
   186e4:	ldr	r3, [r4]
   186e8:	ldr	r7, [fp, #4]
   186ec:	ldr	r1, [r4, #44]	; 0x2c
   186f0:	ldr	r2, [r4, #40]	; 0x28
   186f4:	orr	r0, r0, #1
   186f8:	str	r3, [sp]
   186fc:	add	r3, r4, #8
   18700:	str	r0, [sp, #28]
   18704:	str	r0, [sp, #4]
   18708:	str	r1, [sp, #16]
   1870c:	str	r2, [sp, #12]
   18710:	str	r3, [sp, #8]
   18714:	mov	r0, r7
   18718:	mov	r1, r9
   1871c:	mvn	r3, #0
   18720:	mov	r2, sl
   18724:	bl	16d14 <__assert_fail@plt+0x5710>
   18728:	cmp	r9, r0
   1872c:	bhi	18794 <__assert_fail@plt+0x7190>
   18730:	add	r3, r4, #48	; 0x30
   18734:	add	r9, r0, #1
   18738:	cmp	r7, r3
   1873c:	str	r9, [r6, r5, lsl #3]
   18740:	beq	1874c <__assert_fail@plt+0x7148>
   18744:	mov	r0, r7
   18748:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1874c:	mov	r0, r9
   18750:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18754:	ldr	ip, [r4, #44]	; 0x2c
   18758:	ldr	r3, [r4]
   1875c:	ldr	lr, [r4, #40]	; 0x28
   18760:	ldr	r4, [pc, #124]	; 187e4 <__assert_fail@plt+0x71e0>
   18764:	mov	r2, sl
   18768:	mov	r1, r9
   1876c:	str	r0, [fp, #4]
   18770:	str	r4, [sp, #8]
   18774:	ldr	r4, [sp, #28]
   18778:	str	r3, [sp]
   1877c:	str	r4, [sp, #4]
   18780:	str	ip, [sp, #16]
   18784:	str	lr, [sp, #12]
   18788:	mvn	r3, #0
   1878c:	mov	r7, r0
   18790:	bl	16d14 <__assert_fail@plt+0x5710>
   18794:	ldr	r3, [sp, #24]
   18798:	mov	r0, r7
   1879c:	str	r3, [r8]
   187a0:	add	sp, sp, #44	; 0x2c
   187a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187a8:	mov	r3, #8
   187ac:	sub	r2, r5, r2
   187b0:	str	r3, [sp]
   187b4:	add	r1, sp, #36	; 0x24
   187b8:	add	r2, r2, #1
   187bc:	mvn	r3, #-2147483648	; 0x80000000
   187c0:	bl	1c114 <__assert_fail@plt+0xab10>
   187c4:	mov	r6, r0
   187c8:	ldm	r7, {r0, r1}
   187cc:	str	r6, [r4]
   187d0:	stm	r6, {r0, r1}
   187d4:	b	186b0 <__assert_fail@plt+0x70ac>
   187d8:	bl	115c8 <abort@plt>
   187dc:	andeq	pc, r2, ip, ror #2
   187e0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   187e4:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   187e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187ec:	sub	sp, sp, #52	; 0x34
   187f0:	mov	r5, r0
   187f4:	mov	sl, r1
   187f8:	mov	fp, r2
   187fc:	bl	11484 <__errno_location@plt>
   18800:	ldr	r4, [pc, #408]	; 189a0 <__assert_fail@plt+0x739c>
   18804:	cmn	r5, #-2147483647	; 0x80000001
   18808:	ldr	r6, [r4]
   1880c:	mov	r8, r0
   18810:	movne	r0, #0
   18814:	moveq	r0, #1
   18818:	ldr	r3, [r8]
   1881c:	orrs	r0, r0, r5, lsr #31
   18820:	str	r3, [sp, #28]
   18824:	bne	1899c <__assert_fail@plt+0x7398>
   18828:	ldr	r2, [r4, #4]
   1882c:	cmp	r5, r2
   18830:	blt	18890 <__assert_fail@plt+0x728c>
   18834:	add	r7, r4, #8
   18838:	cmp	r6, r7
   1883c:	str	r2, [sp, #44]	; 0x2c
   18840:	beq	1896c <__assert_fail@plt+0x7368>
   18844:	mov	r3, #8
   18848:	sub	r2, r5, r2
   1884c:	mov	r0, r6
   18850:	str	r3, [sp]
   18854:	add	r2, r2, #1
   18858:	mvn	r3, #-2147483648	; 0x80000000
   1885c:	add	r1, sp, #44	; 0x2c
   18860:	bl	1c114 <__assert_fail@plt+0xab10>
   18864:	mov	r6, r0
   18868:	str	r0, [r4]
   1886c:	ldr	r0, [r4, #4]
   18870:	ldr	r2, [sp, #44]	; 0x2c
   18874:	mov	r1, #0
   18878:	sub	r2, r2, r0
   1887c:	add	r0, r6, r0, lsl #3
   18880:	lsl	r2, r2, #3
   18884:	bl	114a8 <memset@plt>
   18888:	ldr	r3, [sp, #44]	; 0x2c
   1888c:	str	r3, [r4, #4]
   18890:	ldr	r4, [pc, #268]	; 189a4 <__assert_fail@plt+0x73a0>
   18894:	add	r3, r6, r5, lsl #3
   18898:	str	r3, [sp, #32]
   1889c:	ldr	r7, [r3, #4]
   188a0:	ldr	r0, [r4, #4]
   188a4:	ldr	r3, [r4]
   188a8:	ldr	r9, [r6, r5, lsl #3]
   188ac:	ldr	r1, [r4, #44]	; 0x2c
   188b0:	ldr	r2, [r4, #40]	; 0x28
   188b4:	orr	r0, r0, #1
   188b8:	str	r3, [sp]
   188bc:	add	r3, r4, #8
   188c0:	str	r0, [sp, #36]	; 0x24
   188c4:	str	r0, [sp, #4]
   188c8:	str	r1, [sp, #16]
   188cc:	str	r2, [sp, #12]
   188d0:	str	r3, [sp, #8]
   188d4:	mov	r0, r7
   188d8:	mov	r1, r9
   188dc:	mov	r3, fp
   188e0:	mov	r2, sl
   188e4:	bl	16d14 <__assert_fail@plt+0x5710>
   188e8:	cmp	r9, r0
   188ec:	bhi	18958 <__assert_fail@plt+0x7354>
   188f0:	add	r3, r4, #48	; 0x30
   188f4:	add	r9, r0, #1
   188f8:	cmp	r7, r3
   188fc:	str	r9, [r6, r5, lsl #3]
   18900:	beq	1890c <__assert_fail@plt+0x7308>
   18904:	mov	r0, r7
   18908:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1890c:	mov	r0, r9
   18910:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18914:	ldr	ip, [sp, #32]
   18918:	ldr	lr, [r4, #44]	; 0x2c
   1891c:	ldr	r5, [r4, #40]	; 0x28
   18920:	mov	r3, fp
   18924:	mov	r2, sl
   18928:	mov	r1, r9
   1892c:	str	r0, [ip, #4]
   18930:	ldr	ip, [r4]
   18934:	ldr	r4, [pc, #108]	; 189a8 <__assert_fail@plt+0x73a4>
   18938:	str	lr, [sp, #16]
   1893c:	str	r4, [sp, #8]
   18940:	ldr	r4, [sp, #36]	; 0x24
   18944:	str	r5, [sp, #12]
   18948:	str	r4, [sp, #4]
   1894c:	str	ip, [sp]
   18950:	mov	r7, r0
   18954:	bl	16d14 <__assert_fail@plt+0x5710>
   18958:	ldr	r3, [sp, #28]
   1895c:	mov	r0, r7
   18960:	str	r3, [r8]
   18964:	add	sp, sp, #52	; 0x34
   18968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1896c:	mov	r3, #8
   18970:	sub	r2, r5, r2
   18974:	str	r3, [sp]
   18978:	add	r1, sp, #44	; 0x2c
   1897c:	add	r2, r2, #1
   18980:	mvn	r3, #-2147483648	; 0x80000000
   18984:	bl	1c114 <__assert_fail@plt+0xab10>
   18988:	mov	r6, r0
   1898c:	ldm	r7, {r0, r1}
   18990:	str	r6, [r4]
   18994:	stm	r6, {r0, r1}
   18998:	b	1886c <__assert_fail@plt+0x7268>
   1899c:	bl	115c8 <abort@plt>
   189a0:	andeq	pc, r2, ip, ror #2
   189a4:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   189a8:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   189ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189b0:	sub	sp, sp, #44	; 0x2c
   189b4:	mov	sl, r0
   189b8:	bl	11484 <__errno_location@plt>
   189bc:	ldr	r4, [pc, #352]	; 18b24 <__assert_fail@plt+0x7520>
   189c0:	ldr	r2, [r4, #4]
   189c4:	ldr	r5, [r4]
   189c8:	cmp	r2, #0
   189cc:	ldr	r3, [r0]
   189d0:	mov	r8, r0
   189d4:	str	r3, [sp, #28]
   189d8:	bgt	18a34 <__assert_fail@plt+0x7430>
   189dc:	add	r6, r4, #8
   189e0:	cmp	r5, r6
   189e4:	str	r2, [sp, #36]	; 0x24
   189e8:	beq	18af4 <__assert_fail@plt+0x74f0>
   189ec:	mov	r3, #8
   189f0:	mov	r0, r5
   189f4:	str	r3, [sp]
   189f8:	rsb	r2, r2, #1
   189fc:	mvn	r3, #-2147483648	; 0x80000000
   18a00:	add	r1, sp, #36	; 0x24
   18a04:	bl	1c114 <__assert_fail@plt+0xab10>
   18a08:	mov	r5, r0
   18a0c:	str	r0, [r4]
   18a10:	ldr	r0, [r4, #4]
   18a14:	ldr	r2, [sp, #36]	; 0x24
   18a18:	mov	r1, #0
   18a1c:	sub	r2, r2, r0
   18a20:	add	r0, r5, r0, lsl #3
   18a24:	lsl	r2, r2, #3
   18a28:	bl	114a8 <memset@plt>
   18a2c:	ldr	r3, [sp, #36]	; 0x24
   18a30:	str	r3, [r4, #4]
   18a34:	ldr	r4, [pc, #236]	; 18b28 <__assert_fail@plt+0x7524>
   18a38:	ldr	r9, [r5]
   18a3c:	ldr	r6, [r5, #4]
   18a40:	ldr	r7, [r4, #4]
   18a44:	ldr	r1, [r4, #44]	; 0x2c
   18a48:	ldr	r2, [r4, #40]	; 0x28
   18a4c:	ldr	r3, [r4]
   18a50:	orr	r7, r7, #1
   18a54:	add	fp, r4, #8
   18a58:	str	r1, [sp, #16]
   18a5c:	str	r2, [sp, #12]
   18a60:	str	r3, [sp]
   18a64:	str	r7, [sp, #4]
   18a68:	str	fp, [sp, #8]
   18a6c:	mov	r1, r9
   18a70:	mov	r0, r6
   18a74:	mvn	r3, #0
   18a78:	mov	r2, sl
   18a7c:	bl	16d14 <__assert_fail@plt+0x5710>
   18a80:	cmp	r9, r0
   18a84:	bhi	18ae0 <__assert_fail@plt+0x74dc>
   18a88:	add	r3, r4, #48	; 0x30
   18a8c:	add	r9, r0, #1
   18a90:	cmp	r6, r3
   18a94:	str	r9, [r5]
   18a98:	beq	18aa4 <__assert_fail@plt+0x74a0>
   18a9c:	mov	r0, r6
   18aa0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   18aa4:	mov	r0, r9
   18aa8:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18aac:	ldr	ip, [r4, #44]	; 0x2c
   18ab0:	ldr	r3, [r4]
   18ab4:	ldr	lr, [r4, #40]	; 0x28
   18ab8:	mov	r2, sl
   18abc:	mov	r1, r9
   18ac0:	str	r0, [r5, #4]
   18ac4:	str	r3, [sp]
   18ac8:	stmib	sp, {r7, fp}
   18acc:	str	ip, [sp, #16]
   18ad0:	str	lr, [sp, #12]
   18ad4:	mvn	r3, #0
   18ad8:	mov	r6, r0
   18adc:	bl	16d14 <__assert_fail@plt+0x5710>
   18ae0:	ldr	r3, [sp, #28]
   18ae4:	mov	r0, r6
   18ae8:	str	r3, [r8]
   18aec:	add	sp, sp, #44	; 0x2c
   18af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18af4:	mov	r3, #8
   18af8:	str	r3, [sp]
   18afc:	add	r1, sp, #36	; 0x24
   18b00:	rsb	r2, r2, #1
   18b04:	mvn	r3, #-2147483648	; 0x80000000
   18b08:	mov	r0, #0
   18b0c:	bl	1c114 <__assert_fail@plt+0xab10>
   18b10:	mov	r5, r0
   18b14:	ldm	r6, {r0, r1}
   18b18:	str	r5, [r4]
   18b1c:	stm	r5, {r0, r1}
   18b20:	b	18a10 <__assert_fail@plt+0x740c>
   18b24:	andeq	pc, r2, ip, ror #2
   18b28:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b30:	sub	sp, sp, #44	; 0x2c
   18b34:	mov	r9, r0
   18b38:	mov	sl, r1
   18b3c:	bl	11484 <__errno_location@plt>
   18b40:	ldr	r4, [pc, #364]	; 18cb4 <__assert_fail@plt+0x76b0>
   18b44:	ldr	r2, [r4, #4]
   18b48:	ldr	r5, [r4]
   18b4c:	cmp	r2, #0
   18b50:	ldr	r3, [r0]
   18b54:	mov	r7, r0
   18b58:	str	r3, [sp, #24]
   18b5c:	bgt	18bb8 <__assert_fail@plt+0x75b4>
   18b60:	add	r6, r4, #8
   18b64:	cmp	r5, r6
   18b68:	str	r2, [sp, #36]	; 0x24
   18b6c:	beq	18c84 <__assert_fail@plt+0x7680>
   18b70:	mov	r3, #8
   18b74:	mov	r0, r5
   18b78:	str	r3, [sp]
   18b7c:	rsb	r2, r2, #1
   18b80:	mvn	r3, #-2147483648	; 0x80000000
   18b84:	add	r1, sp, #36	; 0x24
   18b88:	bl	1c114 <__assert_fail@plt+0xab10>
   18b8c:	mov	r5, r0
   18b90:	str	r0, [r4]
   18b94:	ldr	r0, [r4, #4]
   18b98:	ldr	r2, [sp, #36]	; 0x24
   18b9c:	mov	r1, #0
   18ba0:	sub	r2, r2, r0
   18ba4:	add	r0, r5, r0, lsl #3
   18ba8:	lsl	r2, r2, #3
   18bac:	bl	114a8 <memset@plt>
   18bb0:	ldr	r3, [sp, #36]	; 0x24
   18bb4:	str	r3, [r4, #4]
   18bb8:	ldr	r4, [pc, #248]	; 18cb8 <__assert_fail@plt+0x76b4>
   18bbc:	ldr	r8, [r5]
   18bc0:	ldr	r6, [r5, #4]
   18bc4:	ldr	r0, [r4, #4]
   18bc8:	ldr	r1, [r4, #44]	; 0x2c
   18bcc:	ldr	r2, [r4, #40]	; 0x28
   18bd0:	ldr	r3, [r4]
   18bd4:	orr	r0, r0, #1
   18bd8:	add	fp, r4, #8
   18bdc:	str	r0, [sp, #28]
   18be0:	str	r0, [sp, #4]
   18be4:	str	r1, [sp, #16]
   18be8:	str	r2, [sp, #12]
   18bec:	str	r3, [sp]
   18bf0:	str	fp, [sp, #8]
   18bf4:	mov	r1, r8
   18bf8:	mov	r0, r6
   18bfc:	mov	r3, sl
   18c00:	mov	r2, r9
   18c04:	bl	16d14 <__assert_fail@plt+0x5710>
   18c08:	cmp	r8, r0
   18c0c:	bhi	18c70 <__assert_fail@plt+0x766c>
   18c10:	add	r3, r4, #48	; 0x30
   18c14:	add	r8, r0, #1
   18c18:	cmp	r6, r3
   18c1c:	str	r8, [r5]
   18c20:	beq	18c2c <__assert_fail@plt+0x7628>
   18c24:	mov	r0, r6
   18c28:	bl	1cc30 <__assert_fail@plt+0xb62c>
   18c2c:	mov	r0, r8
   18c30:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18c34:	ldr	lr, [r4, #44]	; 0x2c
   18c38:	ldr	ip, [r4]
   18c3c:	mov	r3, sl
   18c40:	mov	r2, r9
   18c44:	mov	r1, r8
   18c48:	str	r0, [r5, #4]
   18c4c:	ldr	r5, [r4, #40]	; 0x28
   18c50:	ldr	r4, [sp, #28]
   18c54:	str	fp, [sp, #8]
   18c58:	str	r4, [sp, #4]
   18c5c:	str	lr, [sp, #16]
   18c60:	str	r5, [sp, #12]
   18c64:	str	ip, [sp]
   18c68:	mov	r6, r0
   18c6c:	bl	16d14 <__assert_fail@plt+0x5710>
   18c70:	ldr	r3, [sp, #24]
   18c74:	mov	r0, r6
   18c78:	str	r3, [r7]
   18c7c:	add	sp, sp, #44	; 0x2c
   18c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c84:	mov	r3, #8
   18c88:	str	r3, [sp]
   18c8c:	add	r1, sp, #36	; 0x24
   18c90:	rsb	r2, r2, #1
   18c94:	mvn	r3, #-2147483648	; 0x80000000
   18c98:	mov	r0, #0
   18c9c:	bl	1c114 <__assert_fail@plt+0xab10>
   18ca0:	mov	r5, r0
   18ca4:	ldm	r6, {r0, r1}
   18ca8:	str	r5, [r4]
   18cac:	stm	r5, {r0, r1}
   18cb0:	b	18b94 <__assert_fail@plt+0x7590>
   18cb4:	andeq	pc, r2, ip, ror #2
   18cb8:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cc0:	sub	sp, sp, #132	; 0x84
   18cc4:	mov	r5, r1
   18cc8:	mov	r4, r0
   18ccc:	mov	r9, r2
   18cd0:	add	r0, sp, #80	; 0x50
   18cd4:	mov	r2, #48	; 0x30
   18cd8:	mov	r1, #0
   18cdc:	bl	114a8 <memset@plt>
   18ce0:	cmp	r5, #10
   18ce4:	beq	18e9c <__assert_fail@plt+0x7898>
   18ce8:	add	lr, sp, #80	; 0x50
   18cec:	str	r5, [sp, #80]	; 0x50
   18cf0:	ldm	lr!, {r0, r1, r2, r3}
   18cf4:	add	ip, sp, #32
   18cf8:	ldr	r6, [pc, #416]	; 18ea0 <__assert_fail@plt+0x789c>
   18cfc:	stmia	ip!, {r0, r1, r2, r3}
   18d00:	ldm	lr!, {r0, r1, r2, r3}
   18d04:	stmia	ip!, {r0, r1, r2, r3}
   18d08:	ldm	lr, {r0, r1, r2, r3}
   18d0c:	stm	ip, {r0, r1, r2, r3}
   18d10:	bl	11484 <__errno_location@plt>
   18d14:	cmn	r4, #-2147483647	; 0x80000001
   18d18:	ldr	r5, [r6]
   18d1c:	mov	r7, r0
   18d20:	movne	r0, #0
   18d24:	moveq	r0, #1
   18d28:	ldr	r3, [r7]
   18d2c:	orrs	r0, r0, r4, lsr #31
   18d30:	str	r3, [sp, #24]
   18d34:	bne	18e9c <__assert_fail@plt+0x7898>
   18d38:	ldr	r2, [r6, #4]
   18d3c:	cmp	r4, r2
   18d40:	blt	18da0 <__assert_fail@plt+0x779c>
   18d44:	add	r8, r6, #8
   18d48:	cmp	r5, r8
   18d4c:	str	r2, [sp, #80]	; 0x50
   18d50:	beq	18e6c <__assert_fail@plt+0x7868>
   18d54:	mov	r3, #8
   18d58:	sub	r2, r4, r2
   18d5c:	mov	r0, r5
   18d60:	str	r3, [sp]
   18d64:	add	r2, r2, #1
   18d68:	add	r1, sp, #80	; 0x50
   18d6c:	mvn	r3, #-2147483648	; 0x80000000
   18d70:	bl	1c114 <__assert_fail@plt+0xab10>
   18d74:	mov	r5, r0
   18d78:	str	r0, [r6]
   18d7c:	ldr	r0, [r6, #4]
   18d80:	ldr	r2, [sp, #80]	; 0x50
   18d84:	mov	r1, #0
   18d88:	sub	r2, r2, r0
   18d8c:	add	r0, r5, r0, lsl #3
   18d90:	lsl	r2, r2, #3
   18d94:	bl	114a8 <memset@plt>
   18d98:	ldr	r3, [sp, #80]	; 0x50
   18d9c:	str	r3, [r6, #4]
   18da0:	add	fp, r5, r4, lsl #3
   18da4:	ldr	r1, [sp, #36]	; 0x24
   18da8:	ldr	r8, [r5, r4, lsl #3]
   18dac:	ldr	r6, [fp, #4]
   18db0:	ldr	r2, [sp, #72]	; 0x48
   18db4:	ldr	r3, [sp, #32]
   18db8:	ldr	ip, [sp, #76]	; 0x4c
   18dbc:	orr	r1, r1, #1
   18dc0:	add	sl, sp, #40	; 0x28
   18dc4:	str	r1, [sp, #28]
   18dc8:	str	r1, [sp, #4]
   18dcc:	str	r2, [sp, #12]
   18dd0:	str	r3, [sp]
   18dd4:	mov	r0, r6
   18dd8:	mov	r1, r8
   18ddc:	str	ip, [sp, #16]
   18de0:	str	sl, [sp, #8]
   18de4:	mvn	r3, #0
   18de8:	mov	r2, r9
   18dec:	bl	16d14 <__assert_fail@plt+0x5710>
   18df0:	cmp	r8, r0
   18df4:	bhi	18e58 <__assert_fail@plt+0x7854>
   18df8:	ldr	r3, [pc, #164]	; 18ea4 <__assert_fail@plt+0x78a0>
   18dfc:	add	r8, r0, #1
   18e00:	cmp	r6, r3
   18e04:	str	r8, [r5, r4, lsl #3]
   18e08:	beq	18e14 <__assert_fail@plt+0x7810>
   18e0c:	mov	r0, r6
   18e10:	bl	1cc30 <__assert_fail@plt+0xb62c>
   18e14:	mov	r0, r8
   18e18:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   18e1c:	ldr	lr, [sp, #76]	; 0x4c
   18e20:	ldr	r3, [sp, #32]
   18e24:	ldr	ip, [sp, #72]	; 0x48
   18e28:	ldr	r4, [sp, #28]
   18e2c:	mov	r2, r9
   18e30:	mov	r1, r8
   18e34:	str	r0, [fp, #4]
   18e38:	str	r3, [sp]
   18e3c:	str	sl, [sp, #8]
   18e40:	str	r4, [sp, #4]
   18e44:	str	lr, [sp, #16]
   18e48:	str	ip, [sp, #12]
   18e4c:	mvn	r3, #0
   18e50:	mov	r6, r0
   18e54:	bl	16d14 <__assert_fail@plt+0x5710>
   18e58:	ldr	r3, [sp, #24]
   18e5c:	mov	r0, r6
   18e60:	str	r3, [r7]
   18e64:	add	sp, sp, #132	; 0x84
   18e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e6c:	mov	r3, #8
   18e70:	sub	r2, r4, r2
   18e74:	add	r1, sp, #80	; 0x50
   18e78:	str	r3, [sp]
   18e7c:	add	r2, r2, #1
   18e80:	mvn	r3, #-2147483648	; 0x80000000
   18e84:	bl	1c114 <__assert_fail@plt+0xab10>
   18e88:	mov	r5, r0
   18e8c:	ldm	r8, {r0, r1}
   18e90:	str	r5, [r6]
   18e94:	stm	r5, {r0, r1}
   18e98:	b	18d7c <__assert_fail@plt+0x7778>
   18e9c:	bl	115c8 <abort@plt>
   18ea0:	andeq	pc, r2, ip, ror #2
   18ea4:	andeq	pc, r2, r0, asr #4
   18ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eac:	sub	sp, sp, #132	; 0x84
   18eb0:	mov	r5, r1
   18eb4:	mov	r4, r0
   18eb8:	mov	r9, r2
   18ebc:	add	r0, sp, #80	; 0x50
   18ec0:	mov	r2, #48	; 0x30
   18ec4:	mov	r1, #0
   18ec8:	mov	sl, r3
   18ecc:	bl	114a8 <memset@plt>
   18ed0:	cmp	r5, #10
   18ed4:	beq	19090 <__assert_fail@plt+0x7a8c>
   18ed8:	add	lr, sp, #80	; 0x50
   18edc:	str	r5, [sp, #80]	; 0x50
   18ee0:	ldm	lr!, {r0, r1, r2, r3}
   18ee4:	add	ip, sp, #32
   18ee8:	ldr	r6, [pc, #420]	; 19094 <__assert_fail@plt+0x7a90>
   18eec:	stmia	ip!, {r0, r1, r2, r3}
   18ef0:	ldm	lr!, {r0, r1, r2, r3}
   18ef4:	stmia	ip!, {r0, r1, r2, r3}
   18ef8:	ldm	lr, {r0, r1, r2, r3}
   18efc:	stm	ip, {r0, r1, r2, r3}
   18f00:	bl	11484 <__errno_location@plt>
   18f04:	cmn	r4, #-2147483647	; 0x80000001
   18f08:	ldr	r5, [r6]
   18f0c:	mov	r7, r0
   18f10:	movne	r0, #0
   18f14:	moveq	r0, #1
   18f18:	ldr	r3, [r7]
   18f1c:	orrs	r0, r0, r4, lsr #31
   18f20:	str	r3, [sp, #24]
   18f24:	bne	19090 <__assert_fail@plt+0x7a8c>
   18f28:	ldr	r2, [r6, #4]
   18f2c:	cmp	r4, r2
   18f30:	blt	18f90 <__assert_fail@plt+0x798c>
   18f34:	add	r8, r6, #8
   18f38:	cmp	r5, r8
   18f3c:	str	r2, [sp, #80]	; 0x50
   18f40:	beq	19060 <__assert_fail@plt+0x7a5c>
   18f44:	mov	r3, #8
   18f48:	sub	r2, r4, r2
   18f4c:	mov	r0, r5
   18f50:	str	r3, [sp]
   18f54:	add	r2, r2, #1
   18f58:	add	r1, sp, #80	; 0x50
   18f5c:	mvn	r3, #-2147483648	; 0x80000000
   18f60:	bl	1c114 <__assert_fail@plt+0xab10>
   18f64:	mov	r5, r0
   18f68:	str	r0, [r6]
   18f6c:	ldr	r0, [r6, #4]
   18f70:	ldr	r2, [sp, #80]	; 0x50
   18f74:	mov	r1, #0
   18f78:	sub	r2, r2, r0
   18f7c:	add	r0, r5, r0, lsl #3
   18f80:	lsl	r2, r2, #3
   18f84:	bl	114a8 <memset@plt>
   18f88:	ldr	r3, [sp, #80]	; 0x50
   18f8c:	str	r3, [r6, #4]
   18f90:	add	fp, r5, r4, lsl #3
   18f94:	ldr	r3, [sp, #32]
   18f98:	ldr	r1, [sp, #36]	; 0x24
   18f9c:	ldr	r8, [r5, r4, lsl #3]
   18fa0:	ldr	r6, [fp, #4]
   18fa4:	ldr	r2, [sp, #72]	; 0x48
   18fa8:	ldr	ip, [sp, #76]	; 0x4c
   18fac:	orr	r1, r1, #1
   18fb0:	str	r3, [sp]
   18fb4:	add	r3, sp, #40	; 0x28
   18fb8:	str	r1, [sp, #28]
   18fbc:	str	r1, [sp, #4]
   18fc0:	str	r2, [sp, #12]
   18fc4:	str	r3, [sp, #8]
   18fc8:	mov	r0, r6
   18fcc:	mov	r1, r8
   18fd0:	str	ip, [sp, #16]
   18fd4:	mov	r3, sl
   18fd8:	mov	r2, r9
   18fdc:	bl	16d14 <__assert_fail@plt+0x5710>
   18fe0:	cmp	r8, r0
   18fe4:	bhi	1904c <__assert_fail@plt+0x7a48>
   18fe8:	ldr	r3, [pc, #168]	; 19098 <__assert_fail@plt+0x7a94>
   18fec:	add	r8, r0, #1
   18ff0:	cmp	r6, r3
   18ff4:	str	r8, [r5, r4, lsl #3]
   18ff8:	beq	19004 <__assert_fail@plt+0x7a00>
   18ffc:	mov	r0, r6
   19000:	bl	1cc30 <__assert_fail@plt+0xb62c>
   19004:	mov	r0, r8
   19008:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1900c:	add	lr, sp, #40	; 0x28
   19010:	ldr	ip, [sp, #76]	; 0x4c
   19014:	ldr	r4, [sp, #72]	; 0x48
   19018:	ldr	r5, [sp, #28]
   1901c:	mov	r3, sl
   19020:	mov	r2, r9
   19024:	mov	r1, r8
   19028:	str	r0, [fp, #4]
   1902c:	str	lr, [sp, #8]
   19030:	ldr	lr, [sp, #32]
   19034:	str	r5, [sp, #4]
   19038:	str	ip, [sp, #16]
   1903c:	str	r4, [sp, #12]
   19040:	str	lr, [sp]
   19044:	mov	r6, r0
   19048:	bl	16d14 <__assert_fail@plt+0x5710>
   1904c:	ldr	r3, [sp, #24]
   19050:	mov	r0, r6
   19054:	str	r3, [r7]
   19058:	add	sp, sp, #132	; 0x84
   1905c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19060:	mov	r3, #8
   19064:	sub	r2, r4, r2
   19068:	add	r1, sp, #80	; 0x50
   1906c:	str	r3, [sp]
   19070:	add	r2, r2, #1
   19074:	mvn	r3, #-2147483648	; 0x80000000
   19078:	bl	1c114 <__assert_fail@plt+0xab10>
   1907c:	mov	r5, r0
   19080:	ldm	r8, {r0, r1}
   19084:	str	r5, [r6]
   19088:	stm	r5, {r0, r1}
   1908c:	b	18f6c <__assert_fail@plt+0x7968>
   19090:	bl	115c8 <abort@plt>
   19094:	andeq	pc, r2, ip, ror #2
   19098:	andeq	pc, r2, r0, asr #4
   1909c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190a0:	sub	sp, sp, #124	; 0x7c
   190a4:	mov	r4, r0
   190a8:	mov	r9, r1
   190ac:	add	r0, sp, #72	; 0x48
   190b0:	mov	r2, #48	; 0x30
   190b4:	mov	r1, #0
   190b8:	bl	114a8 <memset@plt>
   190bc:	cmp	r4, #10
   190c0:	beq	1924c <__assert_fail@plt+0x7c48>
   190c4:	add	lr, sp, #72	; 0x48
   190c8:	str	r4, [sp, #72]	; 0x48
   190cc:	ldm	lr!, {r0, r1, r2, r3}
   190d0:	add	ip, sp, #24
   190d4:	ldr	r5, [pc, #372]	; 19250 <__assert_fail@plt+0x7c4c>
   190d8:	stmia	ip!, {r0, r1, r2, r3}
   190dc:	ldm	lr!, {r0, r1, r2, r3}
   190e0:	stmia	ip!, {r0, r1, r2, r3}
   190e4:	ldm	lr, {r0, r1, r2, r3}
   190e8:	stm	ip, {r0, r1, r2, r3}
   190ec:	bl	11484 <__errno_location@plt>
   190f0:	ldr	r2, [r5, #4]
   190f4:	ldr	r4, [r5]
   190f8:	cmp	r2, #0
   190fc:	mov	r7, r0
   19100:	ldr	fp, [r0]
   19104:	bgt	19160 <__assert_fail@plt+0x7b5c>
   19108:	add	r6, r5, #8
   1910c:	cmp	r4, r6
   19110:	str	r2, [sp, #72]	; 0x48
   19114:	beq	1921c <__assert_fail@plt+0x7c18>
   19118:	mov	r3, #8
   1911c:	mov	r0, r4
   19120:	str	r3, [sp]
   19124:	rsb	r2, r2, #1
   19128:	add	r1, sp, #72	; 0x48
   1912c:	mvn	r3, #-2147483648	; 0x80000000
   19130:	bl	1c114 <__assert_fail@plt+0xab10>
   19134:	mov	r4, r0
   19138:	str	r0, [r5]
   1913c:	ldr	r0, [r5, #4]
   19140:	ldr	r2, [sp, #72]	; 0x48
   19144:	mov	r1, #0
   19148:	sub	r2, r2, r0
   1914c:	add	r0, r4, r0, lsl #3
   19150:	lsl	r2, r2, #3
   19154:	bl	114a8 <memset@plt>
   19158:	ldr	r3, [sp, #72]	; 0x48
   1915c:	str	r3, [r5, #4]
   19160:	ldr	r6, [sp, #28]
   19164:	ldr	r8, [r4]
   19168:	ldr	r5, [r4, #4]
   1916c:	ldr	r2, [sp, #64]	; 0x40
   19170:	ldr	r3, [sp, #24]
   19174:	ldr	ip, [sp, #68]	; 0x44
   19178:	orr	r6, r6, #1
   1917c:	add	sl, sp, #32
   19180:	str	r2, [sp, #12]
   19184:	str	r3, [sp]
   19188:	str	r6, [sp, #4]
   1918c:	mov	r1, r8
   19190:	mov	r0, r5
   19194:	str	ip, [sp, #16]
   19198:	str	sl, [sp, #8]
   1919c:	mvn	r3, #0
   191a0:	mov	r2, r9
   191a4:	bl	16d14 <__assert_fail@plt+0x5710>
   191a8:	cmp	r8, r0
   191ac:	bhi	1920c <__assert_fail@plt+0x7c08>
   191b0:	ldr	r3, [pc, #156]	; 19254 <__assert_fail@plt+0x7c50>
   191b4:	add	r8, r0, #1
   191b8:	cmp	r5, r3
   191bc:	str	r8, [r4]
   191c0:	beq	191cc <__assert_fail@plt+0x7bc8>
   191c4:	mov	r0, r5
   191c8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   191cc:	mov	r0, r8
   191d0:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   191d4:	ldr	lr, [sp, #68]	; 0x44
   191d8:	ldr	r3, [sp, #24]
   191dc:	ldr	ip, [sp, #64]	; 0x40
   191e0:	mov	r2, r9
   191e4:	mov	r1, r8
   191e8:	str	r0, [r4, #4]
   191ec:	str	r3, [sp]
   191f0:	str	sl, [sp, #8]
   191f4:	str	r6, [sp, #4]
   191f8:	str	lr, [sp, #16]
   191fc:	str	ip, [sp, #12]
   19200:	mvn	r3, #0
   19204:	mov	r5, r0
   19208:	bl	16d14 <__assert_fail@plt+0x5710>
   1920c:	mov	r0, r5
   19210:	str	fp, [r7]
   19214:	add	sp, sp, #124	; 0x7c
   19218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1921c:	mov	r3, #8
   19220:	add	r1, sp, #72	; 0x48
   19224:	str	r3, [sp]
   19228:	rsb	r2, r2, #1
   1922c:	mvn	r3, #-2147483648	; 0x80000000
   19230:	mov	r0, #0
   19234:	bl	1c114 <__assert_fail@plt+0xab10>
   19238:	mov	r4, r0
   1923c:	ldm	r6, {r0, r1}
   19240:	str	r4, [r5]
   19244:	stm	r4, {r0, r1}
   19248:	b	1913c <__assert_fail@plt+0x7b38>
   1924c:	bl	115c8 <abort@plt>
   19250:	andeq	pc, r2, ip, ror #2
   19254:	andeq	pc, r2, r0, asr #4
   19258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1925c:	sub	sp, sp, #132	; 0x84
   19260:	mov	r4, r0
   19264:	mov	r9, r1
   19268:	mov	sl, r2
   1926c:	add	r0, sp, #80	; 0x50
   19270:	mov	r2, #48	; 0x30
   19274:	mov	r1, #0
   19278:	bl	114a8 <memset@plt>
   1927c:	cmp	r4, #10
   19280:	beq	19414 <__assert_fail@plt+0x7e10>
   19284:	add	lr, sp, #80	; 0x50
   19288:	str	r4, [sp, #80]	; 0x50
   1928c:	ldm	lr!, {r0, r1, r2, r3}
   19290:	add	ip, sp, #32
   19294:	ldr	r5, [pc, #380]	; 19418 <__assert_fail@plt+0x7e14>
   19298:	stmia	ip!, {r0, r1, r2, r3}
   1929c:	ldm	lr!, {r0, r1, r2, r3}
   192a0:	stmia	ip!, {r0, r1, r2, r3}
   192a4:	ldm	lr, {r0, r1, r2, r3}
   192a8:	stm	ip, {r0, r1, r2, r3}
   192ac:	bl	11484 <__errno_location@plt>
   192b0:	ldr	r2, [r5, #4]
   192b4:	ldr	r4, [r5]
   192b8:	cmp	r2, #0
   192bc:	ldr	r3, [r0]
   192c0:	mov	r7, r0
   192c4:	str	r3, [sp, #28]
   192c8:	bgt	19324 <__assert_fail@plt+0x7d20>
   192cc:	add	r6, r5, #8
   192d0:	cmp	r4, r6
   192d4:	str	r2, [sp, #80]	; 0x50
   192d8:	beq	193e4 <__assert_fail@plt+0x7de0>
   192dc:	mov	r3, #8
   192e0:	mov	r0, r4
   192e4:	str	r3, [sp]
   192e8:	rsb	r2, r2, #1
   192ec:	add	r1, sp, #80	; 0x50
   192f0:	mvn	r3, #-2147483648	; 0x80000000
   192f4:	bl	1c114 <__assert_fail@plt+0xab10>
   192f8:	mov	r4, r0
   192fc:	str	r0, [r5]
   19300:	ldr	r0, [r5, #4]
   19304:	ldr	r2, [sp, #80]	; 0x50
   19308:	mov	r1, #0
   1930c:	sub	r2, r2, r0
   19310:	add	r0, r4, r0, lsl #3
   19314:	lsl	r2, r2, #3
   19318:	bl	114a8 <memset@plt>
   1931c:	ldr	r3, [sp, #80]	; 0x50
   19320:	str	r3, [r5, #4]
   19324:	ldr	r6, [sp, #36]	; 0x24
   19328:	ldr	r8, [r4]
   1932c:	ldr	r5, [r4, #4]
   19330:	ldr	r2, [sp, #72]	; 0x48
   19334:	ldr	r3, [sp, #32]
   19338:	ldr	ip, [sp, #76]	; 0x4c
   1933c:	orr	r6, r6, #1
   19340:	add	fp, sp, #40	; 0x28
   19344:	str	r2, [sp, #12]
   19348:	str	r3, [sp]
   1934c:	str	r6, [sp, #4]
   19350:	mov	r1, r8
   19354:	mov	r0, r5
   19358:	str	ip, [sp, #16]
   1935c:	str	fp, [sp, #8]
   19360:	mov	r3, sl
   19364:	mov	r2, r9
   19368:	bl	16d14 <__assert_fail@plt+0x5710>
   1936c:	cmp	r8, r0
   19370:	bhi	193d0 <__assert_fail@plt+0x7dcc>
   19374:	ldr	r3, [pc, #160]	; 1941c <__assert_fail@plt+0x7e18>
   19378:	add	r8, r0, #1
   1937c:	cmp	r5, r3
   19380:	str	r8, [r4]
   19384:	beq	19390 <__assert_fail@plt+0x7d8c>
   19388:	mov	r0, r5
   1938c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   19390:	mov	r0, r8
   19394:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   19398:	ldr	ip, [sp, #76]	; 0x4c
   1939c:	ldr	lr, [sp, #32]
   193a0:	mov	r3, sl
   193a4:	mov	r2, r9
   193a8:	mov	r1, r8
   193ac:	str	r0, [r4, #4]
   193b0:	ldr	r4, [sp, #72]	; 0x48
   193b4:	str	fp, [sp, #8]
   193b8:	str	r6, [sp, #4]
   193bc:	str	ip, [sp, #16]
   193c0:	str	r4, [sp, #12]
   193c4:	str	lr, [sp]
   193c8:	mov	r5, r0
   193cc:	bl	16d14 <__assert_fail@plt+0x5710>
   193d0:	ldr	r3, [sp, #28]
   193d4:	mov	r0, r5
   193d8:	str	r3, [r7]
   193dc:	add	sp, sp, #132	; 0x84
   193e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e4:	mov	r3, #8
   193e8:	add	r1, sp, #80	; 0x50
   193ec:	str	r3, [sp]
   193f0:	rsb	r2, r2, #1
   193f4:	mvn	r3, #-2147483648	; 0x80000000
   193f8:	mov	r0, #0
   193fc:	bl	1c114 <__assert_fail@plt+0xab10>
   19400:	mov	r4, r0
   19404:	ldm	r6, {r0, r1}
   19408:	str	r4, [r5]
   1940c:	stm	r4, {r0, r1}
   19410:	b	19300 <__assert_fail@plt+0x7cfc>
   19414:	bl	115c8 <abort@plt>
   19418:	andeq	pc, r2, ip, ror #2
   1941c:	andeq	pc, r2, r0, asr #4
   19420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19424:	mov	r4, r2
   19428:	ldr	lr, [pc, #432]	; 195e0 <__assert_fail@plt+0x7fdc>
   1942c:	mov	sl, r0
   19430:	mov	fp, r1
   19434:	ldm	lr!, {r0, r1, r2, r3}
   19438:	sub	sp, sp, #92	; 0x5c
   1943c:	add	ip, sp, #40	; 0x28
   19440:	lsr	r7, r4, #5
   19444:	stmia	ip!, {r0, r1, r2, r3}
   19448:	add	r6, sp, #48	; 0x30
   1944c:	ldm	lr!, {r0, r1, r2, r3}
   19450:	and	r4, r4, #31
   19454:	ldr	r5, [pc, #392]	; 195e4 <__assert_fail@plt+0x7fe0>
   19458:	stmia	ip!, {r0, r1, r2, r3}
   1945c:	ldm	lr, {r0, r1, r2, r3}
   19460:	stm	ip, {r0, r1, r2, r3}
   19464:	ldr	r2, [r6, r7, lsl #2]
   19468:	lsr	r3, r2, r4
   1946c:	eor	r3, r3, #1
   19470:	and	r3, r3, #1
   19474:	eor	r4, r2, r3, lsl r4
   19478:	str	r4, [r6, r7, lsl #2]
   1947c:	bl	11484 <__errno_location@plt>
   19480:	ldr	r2, [r5, #4]
   19484:	ldr	r4, [r5]
   19488:	cmp	r2, #0
   1948c:	ldr	r3, [r0]
   19490:	mov	r8, r0
   19494:	str	r3, [sp, #28]
   19498:	bgt	194f4 <__assert_fail@plt+0x7ef0>
   1949c:	add	r7, r5, #8
   194a0:	cmp	r4, r7
   194a4:	str	r2, [sp, #36]	; 0x24
   194a8:	beq	195b0 <__assert_fail@plt+0x7fac>
   194ac:	mov	r3, #8
   194b0:	mov	r0, r4
   194b4:	str	r3, [sp]
   194b8:	rsb	r2, r2, #1
   194bc:	mvn	r3, #-2147483648	; 0x80000000
   194c0:	add	r1, sp, #36	; 0x24
   194c4:	bl	1c114 <__assert_fail@plt+0xab10>
   194c8:	mov	r4, r0
   194cc:	str	r0, [r5]
   194d0:	ldr	r0, [r5, #4]
   194d4:	ldr	r2, [sp, #36]	; 0x24
   194d8:	mov	r1, #0
   194dc:	sub	r2, r2, r0
   194e0:	add	r0, r4, r0, lsl #3
   194e4:	lsl	r2, r2, #3
   194e8:	bl	114a8 <memset@plt>
   194ec:	ldr	r3, [sp, #36]	; 0x24
   194f0:	str	r3, [r5, #4]
   194f4:	ldr	r7, [sp, #44]	; 0x2c
   194f8:	ldr	r9, [r4]
   194fc:	ldr	r5, [r4, #4]
   19500:	ldr	r2, [sp, #80]	; 0x50
   19504:	ldr	r3, [sp, #40]	; 0x28
   19508:	ldr	ip, [sp, #84]	; 0x54
   1950c:	orr	r7, r7, #1
   19510:	str	r2, [sp, #12]
   19514:	str	r3, [sp]
   19518:	str	r7, [sp, #4]
   1951c:	str	r6, [sp, #8]
   19520:	mov	r1, r9
   19524:	mov	r0, r5
   19528:	str	ip, [sp, #16]
   1952c:	mov	r3, fp
   19530:	mov	r2, sl
   19534:	bl	16d14 <__assert_fail@plt+0x5710>
   19538:	cmp	r9, r0
   1953c:	bhi	1959c <__assert_fail@plt+0x7f98>
   19540:	ldr	r3, [pc, #160]	; 195e8 <__assert_fail@plt+0x7fe4>
   19544:	add	r9, r0, #1
   19548:	cmp	r5, r3
   1954c:	str	r9, [r4]
   19550:	beq	1955c <__assert_fail@plt+0x7f58>
   19554:	mov	r0, r5
   19558:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1955c:	mov	r0, r9
   19560:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   19564:	ldr	ip, [sp, #84]	; 0x54
   19568:	ldr	lr, [sp, #40]	; 0x28
   1956c:	mov	r3, fp
   19570:	mov	r2, sl
   19574:	mov	r1, r9
   19578:	str	r0, [r4, #4]
   1957c:	ldr	r4, [sp, #80]	; 0x50
   19580:	str	r6, [sp, #8]
   19584:	str	r7, [sp, #4]
   19588:	str	ip, [sp, #16]
   1958c:	str	r4, [sp, #12]
   19590:	str	lr, [sp]
   19594:	mov	r5, r0
   19598:	bl	16d14 <__assert_fail@plt+0x5710>
   1959c:	ldr	r3, [sp, #28]
   195a0:	mov	r0, r5
   195a4:	str	r3, [r8]
   195a8:	add	sp, sp, #92	; 0x5c
   195ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195b0:	mov	r3, #8
   195b4:	str	r3, [sp]
   195b8:	add	r1, sp, #36	; 0x24
   195bc:	rsb	r2, r2, #1
   195c0:	mvn	r3, #-2147483648	; 0x80000000
   195c4:	mov	r0, #0
   195c8:	bl	1c114 <__assert_fail@plt+0xab10>
   195cc:	mov	r4, r0
   195d0:	ldm	r7, {r0, r1}
   195d4:	str	r4, [r5]
   195d8:	stm	r4, {r0, r1}
   195dc:	b	194d0 <__assert_fail@plt+0x7ecc>
   195e0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   195e4:	andeq	pc, r2, ip, ror #2
   195e8:	andeq	pc, r2, r0, asr #4
   195ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195f0:	mov	r4, r1
   195f4:	ldr	lr, [pc, #420]	; 197a0 <__assert_fail@plt+0x819c>
   195f8:	mov	r6, r0
   195fc:	sub	sp, sp, #84	; 0x54
   19600:	ldm	lr!, {r0, r1, r2, r3}
   19604:	add	ip, sp, #32
   19608:	lsr	r8, r4, #5
   1960c:	add	r5, sp, #40	; 0x28
   19610:	stmia	ip!, {r0, r1, r2, r3}
   19614:	and	r4, r4, #31
   19618:	ldm	lr!, {r0, r1, r2, r3}
   1961c:	ldr	r7, [pc, #384]	; 197a4 <__assert_fail@plt+0x81a0>
   19620:	stmia	ip!, {r0, r1, r2, r3}
   19624:	ldm	lr, {r0, r1, r2, r3}
   19628:	stm	ip, {r0, r1, r2, r3}
   1962c:	ldr	r2, [r5, r8, lsl #2]
   19630:	lsr	r3, r2, r4
   19634:	eor	r3, r3, #1
   19638:	and	r3, r3, #1
   1963c:	eor	r4, r2, r3, lsl r4
   19640:	str	r4, [r5, r8, lsl #2]
   19644:	bl	11484 <__errno_location@plt>
   19648:	ldr	r2, [r7, #4]
   1964c:	ldr	r4, [r7]
   19650:	cmp	r2, #0
   19654:	mov	r9, r0
   19658:	ldr	sl, [r0]
   1965c:	bgt	196b8 <__assert_fail@plt+0x80b4>
   19660:	add	r8, r7, #8
   19664:	cmp	r4, r8
   19668:	str	r2, [sp, #28]
   1966c:	beq	19770 <__assert_fail@plt+0x816c>
   19670:	mov	r3, #8
   19674:	mov	r0, r4
   19678:	str	r3, [sp]
   1967c:	rsb	r2, r2, #1
   19680:	mvn	r3, #-2147483648	; 0x80000000
   19684:	add	r1, sp, #28
   19688:	bl	1c114 <__assert_fail@plt+0xab10>
   1968c:	mov	r4, r0
   19690:	str	r0, [r7]
   19694:	ldr	r0, [r7, #4]
   19698:	ldr	r2, [sp, #28]
   1969c:	mov	r1, #0
   196a0:	sub	r2, r2, r0
   196a4:	add	r0, r4, r0, lsl #3
   196a8:	lsl	r2, r2, #3
   196ac:	bl	114a8 <memset@plt>
   196b0:	ldr	r3, [sp, #28]
   196b4:	str	r3, [r7, #4]
   196b8:	ldr	r8, [sp, #36]	; 0x24
   196bc:	ldr	fp, [r4]
   196c0:	ldr	r7, [r4, #4]
   196c4:	ldr	r2, [sp, #72]	; 0x48
   196c8:	ldr	r3, [sp, #32]
   196cc:	ldr	ip, [sp, #76]	; 0x4c
   196d0:	orr	r8, r8, #1
   196d4:	str	r2, [sp, #12]
   196d8:	str	r3, [sp]
   196dc:	str	r8, [sp, #4]
   196e0:	str	r5, [sp, #8]
   196e4:	mov	r1, fp
   196e8:	mov	r0, r7
   196ec:	str	ip, [sp, #16]
   196f0:	mvn	r3, #0
   196f4:	mov	r2, r6
   196f8:	bl	16d14 <__assert_fail@plt+0x5710>
   196fc:	cmp	fp, r0
   19700:	bhi	19760 <__assert_fail@plt+0x815c>
   19704:	ldr	r3, [pc, #156]	; 197a8 <__assert_fail@plt+0x81a4>
   19708:	add	fp, r0, #1
   1970c:	cmp	r7, r3
   19710:	str	fp, [r4]
   19714:	beq	19720 <__assert_fail@plt+0x811c>
   19718:	mov	r0, r7
   1971c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   19720:	mov	r0, fp
   19724:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   19728:	ldr	lr, [sp, #76]	; 0x4c
   1972c:	ldr	r3, [sp, #32]
   19730:	ldr	ip, [sp, #72]	; 0x48
   19734:	mov	r2, r6
   19738:	mov	r1, fp
   1973c:	str	r0, [r4, #4]
   19740:	str	r3, [sp]
   19744:	str	r5, [sp, #8]
   19748:	str	r8, [sp, #4]
   1974c:	str	lr, [sp, #16]
   19750:	str	ip, [sp, #12]
   19754:	mvn	r3, #0
   19758:	mov	r7, r0
   1975c:	bl	16d14 <__assert_fail@plt+0x5710>
   19760:	mov	r0, r7
   19764:	str	sl, [r9]
   19768:	add	sp, sp, #84	; 0x54
   1976c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19770:	mov	r3, #8
   19774:	str	r3, [sp]
   19778:	add	r1, sp, #28
   1977c:	rsb	r2, r2, #1
   19780:	mvn	r3, #-2147483648	; 0x80000000
   19784:	mov	r0, #0
   19788:	bl	1c114 <__assert_fail@plt+0xab10>
   1978c:	mov	r4, r0
   19790:	ldm	r8, {r0, r1}
   19794:	str	r4, [r7]
   19798:	stm	r4, {r0, r1}
   1979c:	b	19694 <__assert_fail@plt+0x8090>
   197a0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   197a4:	andeq	pc, r2, ip, ror #2
   197a8:	andeq	pc, r2, r0, asr #4
   197ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197b0:	mov	r6, r0
   197b4:	ldr	lr, [pc, #404]	; 19950 <__assert_fail@plt+0x834c>
   197b8:	sub	sp, sp, #84	; 0x54
   197bc:	add	ip, sp, #32
   197c0:	ldm	lr!, {r0, r1, r2, r3}
   197c4:	ldr	r5, [pc, #392]	; 19954 <__assert_fail@plt+0x8350>
   197c8:	stmia	ip!, {r0, r1, r2, r3}
   197cc:	ldm	lr!, {r0, r1, r2, r3}
   197d0:	ldr	r4, [sp, #44]	; 0x2c
   197d4:	stmia	ip!, {r0, r1, r2, r3}
   197d8:	ldm	lr, {r0, r1, r2, r3}
   197dc:	mvn	lr, r4
   197e0:	and	lr, lr, #67108864	; 0x4000000
   197e4:	eor	lr, lr, r4
   197e8:	stm	ip, {r0, r1, r2, r3}
   197ec:	str	lr, [sp, #44]	; 0x2c
   197f0:	bl	11484 <__errno_location@plt>
   197f4:	ldr	r2, [r5, #4]
   197f8:	ldr	r4, [r5]
   197fc:	cmp	r2, #0
   19800:	mov	r8, r0
   19804:	ldr	sl, [r0]
   19808:	bgt	19864 <__assert_fail@plt+0x8260>
   1980c:	add	r7, r5, #8
   19810:	cmp	r4, r7
   19814:	str	r2, [sp, #28]
   19818:	beq	19920 <__assert_fail@plt+0x831c>
   1981c:	mov	r3, #8
   19820:	mov	r0, r4
   19824:	str	r3, [sp]
   19828:	rsb	r2, r2, #1
   1982c:	mvn	r3, #-2147483648	; 0x80000000
   19830:	add	r1, sp, #28
   19834:	bl	1c114 <__assert_fail@plt+0xab10>
   19838:	mov	r4, r0
   1983c:	str	r0, [r5]
   19840:	ldr	r0, [r5, #4]
   19844:	ldr	r2, [sp, #28]
   19848:	mov	r1, #0
   1984c:	sub	r2, r2, r0
   19850:	add	r0, r4, r0, lsl #3
   19854:	lsl	r2, r2, #3
   19858:	bl	114a8 <memset@plt>
   1985c:	ldr	r3, [sp, #28]
   19860:	str	r3, [r5, #4]
   19864:	ldr	r7, [sp, #36]	; 0x24
   19868:	ldr	r9, [r4]
   1986c:	ldr	r5, [r4, #4]
   19870:	ldr	r2, [sp, #72]	; 0x48
   19874:	ldr	r3, [sp, #32]
   19878:	ldr	ip, [sp, #76]	; 0x4c
   1987c:	orr	r7, r7, #1
   19880:	add	fp, sp, #40	; 0x28
   19884:	str	r2, [sp, #12]
   19888:	str	r3, [sp]
   1988c:	str	r7, [sp, #4]
   19890:	mov	r1, r9
   19894:	mov	r0, r5
   19898:	str	ip, [sp, #16]
   1989c:	str	fp, [sp, #8]
   198a0:	mvn	r3, #0
   198a4:	mov	r2, r6
   198a8:	bl	16d14 <__assert_fail@plt+0x5710>
   198ac:	cmp	r9, r0
   198b0:	bhi	19910 <__assert_fail@plt+0x830c>
   198b4:	ldr	r3, [pc, #156]	; 19958 <__assert_fail@plt+0x8354>
   198b8:	add	r9, r0, #1
   198bc:	cmp	r5, r3
   198c0:	str	r9, [r4]
   198c4:	beq	198d0 <__assert_fail@plt+0x82cc>
   198c8:	mov	r0, r5
   198cc:	bl	1cc30 <__assert_fail@plt+0xb62c>
   198d0:	mov	r0, r9
   198d4:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   198d8:	ldr	lr, [sp, #76]	; 0x4c
   198dc:	ldr	r3, [sp, #32]
   198e0:	ldr	ip, [sp, #72]	; 0x48
   198e4:	mov	r2, r6
   198e8:	mov	r1, r9
   198ec:	str	r0, [r4, #4]
   198f0:	str	r3, [sp]
   198f4:	str	fp, [sp, #8]
   198f8:	str	r7, [sp, #4]
   198fc:	str	lr, [sp, #16]
   19900:	str	ip, [sp, #12]
   19904:	mvn	r3, #0
   19908:	mov	r5, r0
   1990c:	bl	16d14 <__assert_fail@plt+0x5710>
   19910:	mov	r0, r5
   19914:	str	sl, [r8]
   19918:	add	sp, sp, #84	; 0x54
   1991c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19920:	mov	r3, #8
   19924:	str	r3, [sp]
   19928:	add	r1, sp, #28
   1992c:	rsb	r2, r2, #1
   19930:	mvn	r3, #-2147483648	; 0x80000000
   19934:	mov	r0, #0
   19938:	bl	1c114 <__assert_fail@plt+0xab10>
   1993c:	mov	r4, r0
   19940:	ldm	r7, {r0, r1}
   19944:	str	r4, [r5]
   19948:	stm	r4, {r0, r1}
   1994c:	b	19840 <__assert_fail@plt+0x823c>
   19950:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   19954:	andeq	pc, r2, ip, ror #2
   19958:	andeq	pc, r2, r0, asr #4
   1995c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19960:	mov	r9, r0
   19964:	ldr	lr, [pc, #416]	; 19b0c <__assert_fail@plt+0x8508>
   19968:	mov	sl, r1
   1996c:	sub	sp, sp, #92	; 0x5c
   19970:	ldm	lr!, {r0, r1, r2, r3}
   19974:	add	ip, sp, #40	; 0x28
   19978:	ldr	r5, [pc, #400]	; 19b10 <__assert_fail@plt+0x850c>
   1997c:	stmia	ip!, {r0, r1, r2, r3}
   19980:	ldm	lr!, {r0, r1, r2, r3}
   19984:	ldr	r4, [sp, #52]	; 0x34
   19988:	stmia	ip!, {r0, r1, r2, r3}
   1998c:	ldm	lr, {r0, r1, r2, r3}
   19990:	mvn	lr, r4
   19994:	and	lr, lr, #67108864	; 0x4000000
   19998:	eor	lr, lr, r4
   1999c:	stm	ip, {r0, r1, r2, r3}
   199a0:	str	lr, [sp, #52]	; 0x34
   199a4:	bl	11484 <__errno_location@plt>
   199a8:	ldr	r2, [r5, #4]
   199ac:	ldr	r4, [r5]
   199b0:	cmp	r2, #0
   199b4:	ldr	r3, [r0]
   199b8:	mov	r7, r0
   199bc:	str	r3, [sp, #28]
   199c0:	bgt	19a1c <__assert_fail@plt+0x8418>
   199c4:	add	r6, r5, #8
   199c8:	cmp	r4, r6
   199cc:	str	r2, [sp, #36]	; 0x24
   199d0:	beq	19adc <__assert_fail@plt+0x84d8>
   199d4:	mov	r3, #8
   199d8:	mov	r0, r4
   199dc:	str	r3, [sp]
   199e0:	rsb	r2, r2, #1
   199e4:	mvn	r3, #-2147483648	; 0x80000000
   199e8:	add	r1, sp, #36	; 0x24
   199ec:	bl	1c114 <__assert_fail@plt+0xab10>
   199f0:	mov	r4, r0
   199f4:	str	r0, [r5]
   199f8:	ldr	r0, [r5, #4]
   199fc:	ldr	r2, [sp, #36]	; 0x24
   19a00:	mov	r1, #0
   19a04:	sub	r2, r2, r0
   19a08:	add	r0, r4, r0, lsl #3
   19a0c:	lsl	r2, r2, #3
   19a10:	bl	114a8 <memset@plt>
   19a14:	ldr	r3, [sp, #36]	; 0x24
   19a18:	str	r3, [r5, #4]
   19a1c:	ldr	r6, [sp, #44]	; 0x2c
   19a20:	ldr	r8, [r4]
   19a24:	ldr	r5, [r4, #4]
   19a28:	ldr	r2, [sp, #80]	; 0x50
   19a2c:	ldr	r3, [sp, #40]	; 0x28
   19a30:	ldr	ip, [sp, #84]	; 0x54
   19a34:	orr	r6, r6, #1
   19a38:	add	fp, sp, #48	; 0x30
   19a3c:	str	r2, [sp, #12]
   19a40:	str	r3, [sp]
   19a44:	str	r6, [sp, #4]
   19a48:	mov	r1, r8
   19a4c:	mov	r0, r5
   19a50:	str	ip, [sp, #16]
   19a54:	str	fp, [sp, #8]
   19a58:	mov	r3, sl
   19a5c:	mov	r2, r9
   19a60:	bl	16d14 <__assert_fail@plt+0x5710>
   19a64:	cmp	r8, r0
   19a68:	bhi	19ac8 <__assert_fail@plt+0x84c4>
   19a6c:	ldr	r3, [pc, #160]	; 19b14 <__assert_fail@plt+0x8510>
   19a70:	add	r8, r0, #1
   19a74:	cmp	r5, r3
   19a78:	str	r8, [r4]
   19a7c:	beq	19a88 <__assert_fail@plt+0x8484>
   19a80:	mov	r0, r5
   19a84:	bl	1cc30 <__assert_fail@plt+0xb62c>
   19a88:	mov	r0, r8
   19a8c:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   19a90:	ldr	ip, [sp, #84]	; 0x54
   19a94:	ldr	lr, [sp, #40]	; 0x28
   19a98:	mov	r3, sl
   19a9c:	mov	r2, r9
   19aa0:	mov	r1, r8
   19aa4:	str	r0, [r4, #4]
   19aa8:	ldr	r4, [sp, #80]	; 0x50
   19aac:	str	fp, [sp, #8]
   19ab0:	str	r6, [sp, #4]
   19ab4:	str	ip, [sp, #16]
   19ab8:	str	r4, [sp, #12]
   19abc:	str	lr, [sp]
   19ac0:	mov	r5, r0
   19ac4:	bl	16d14 <__assert_fail@plt+0x5710>
   19ac8:	ldr	r3, [sp, #28]
   19acc:	mov	r0, r5
   19ad0:	str	r3, [r7]
   19ad4:	add	sp, sp, #92	; 0x5c
   19ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19adc:	mov	r3, #8
   19ae0:	str	r3, [sp]
   19ae4:	add	r1, sp, #36	; 0x24
   19ae8:	rsb	r2, r2, #1
   19aec:	mvn	r3, #-2147483648	; 0x80000000
   19af0:	mov	r0, #0
   19af4:	bl	1c114 <__assert_fail@plt+0xab10>
   19af8:	mov	r4, r0
   19afc:	ldm	r6, {r0, r1}
   19b00:	str	r4, [r5]
   19b04:	stm	r4, {r0, r1}
   19b08:	b	199f8 <__assert_fail@plt+0x83f4>
   19b0c:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   19b10:	andeq	pc, r2, ip, ror #2
   19b14:	andeq	pc, r2, r0, asr #4
   19b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b1c:	sub	sp, sp, #180	; 0xb4
   19b20:	mov	r6, r1
   19b24:	mov	r4, r0
   19b28:	mov	r9, r2
   19b2c:	add	r0, sp, #80	; 0x50
   19b30:	mov	r2, #48	; 0x30
   19b34:	mov	r1, #0
   19b38:	bl	114a8 <memset@plt>
   19b3c:	cmp	r6, #10
   19b40:	beq	19d20 <__assert_fail@plt+0x871c>
   19b44:	add	r5, sp, #80	; 0x50
   19b48:	str	r6, [sp, #80]	; 0x50
   19b4c:	ldm	r5!, {r0, r1, r2, r3}
   19b50:	add	ip, sp, #128	; 0x80
   19b54:	mov	r7, ip
   19b58:	add	lr, sp, #32
   19b5c:	stmia	ip!, {r0, r1, r2, r3}
   19b60:	mov	r8, #67108864	; 0x4000000
   19b64:	ldm	r5!, {r0, r1, r2, r3}
   19b68:	ldr	r6, [pc, #436]	; 19d24 <__assert_fail@plt+0x8720>
   19b6c:	stmia	ip!, {r0, r1, r2, r3}
   19b70:	ldm	r5, {r0, r1, r2, r3}
   19b74:	stm	ip, {r0, r1, r2, r3}
   19b78:	ldm	r7!, {r0, r1, r2, r3}
   19b7c:	stmia	lr!, {r0, r1, r2, r3}
   19b80:	ldm	r7!, {r0, r1, r2, r3}
   19b84:	str	r8, [sp, #44]	; 0x2c
   19b88:	stmia	lr!, {r0, r1, r2, r3}
   19b8c:	ldm	ip, {r0, r1, r2, r3}
   19b90:	stm	lr, {r0, r1, r2, r3}
   19b94:	bl	11484 <__errno_location@plt>
   19b98:	cmn	r4, #-2147483647	; 0x80000001
   19b9c:	ldr	r5, [r6]
   19ba0:	mov	r7, r0
   19ba4:	movne	r0, #0
   19ba8:	moveq	r0, #1
   19bac:	ldr	r3, [r7]
   19bb0:	orrs	r0, r0, r4, lsr #31
   19bb4:	str	r3, [sp, #24]
   19bb8:	bne	19d20 <__assert_fail@plt+0x871c>
   19bbc:	ldr	r2, [r6, #4]
   19bc0:	cmp	r4, r2
   19bc4:	blt	19c24 <__assert_fail@plt+0x8620>
   19bc8:	add	r8, r6, #8
   19bcc:	cmp	r5, r8
   19bd0:	str	r2, [sp, #80]	; 0x50
   19bd4:	beq	19cf0 <__assert_fail@plt+0x86ec>
   19bd8:	mov	r3, #8
   19bdc:	sub	r2, r4, r2
   19be0:	mov	r0, r5
   19be4:	str	r3, [sp]
   19be8:	add	r2, r2, #1
   19bec:	add	r1, sp, #80	; 0x50
   19bf0:	mvn	r3, #-2147483648	; 0x80000000
   19bf4:	bl	1c114 <__assert_fail@plt+0xab10>
   19bf8:	mov	r5, r0
   19bfc:	str	r0, [r6]
   19c00:	ldr	r0, [r6, #4]
   19c04:	ldr	r2, [sp, #80]	; 0x50
   19c08:	mov	r1, #0
   19c0c:	sub	r2, r2, r0
   19c10:	add	r0, r5, r0, lsl #3
   19c14:	lsl	r2, r2, #3
   19c18:	bl	114a8 <memset@plt>
   19c1c:	ldr	r3, [sp, #80]	; 0x50
   19c20:	str	r3, [r6, #4]
   19c24:	add	fp, r5, r4, lsl #3
   19c28:	ldr	r1, [sp, #36]	; 0x24
   19c2c:	ldr	r8, [r5, r4, lsl #3]
   19c30:	ldr	r6, [fp, #4]
   19c34:	ldr	r2, [sp, #72]	; 0x48
   19c38:	ldr	r3, [sp, #32]
   19c3c:	ldr	ip, [sp, #76]	; 0x4c
   19c40:	orr	r1, r1, #1
   19c44:	add	sl, sp, #40	; 0x28
   19c48:	str	r1, [sp, #28]
   19c4c:	str	r1, [sp, #4]
   19c50:	str	r2, [sp, #12]
   19c54:	str	r3, [sp]
   19c58:	mov	r0, r6
   19c5c:	mov	r1, r8
   19c60:	str	ip, [sp, #16]
   19c64:	str	sl, [sp, #8]
   19c68:	mvn	r3, #0
   19c6c:	mov	r2, r9
   19c70:	bl	16d14 <__assert_fail@plt+0x5710>
   19c74:	cmp	r8, r0
   19c78:	bhi	19cdc <__assert_fail@plt+0x86d8>
   19c7c:	ldr	r3, [pc, #164]	; 19d28 <__assert_fail@plt+0x8724>
   19c80:	add	r8, r0, #1
   19c84:	cmp	r6, r3
   19c88:	str	r8, [r5, r4, lsl #3]
   19c8c:	beq	19c98 <__assert_fail@plt+0x8694>
   19c90:	mov	r0, r6
   19c94:	bl	1cc30 <__assert_fail@plt+0xb62c>
   19c98:	mov	r0, r8
   19c9c:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   19ca0:	ldr	lr, [sp, #76]	; 0x4c
   19ca4:	ldr	r3, [sp, #32]
   19ca8:	ldr	ip, [sp, #72]	; 0x48
   19cac:	ldr	r4, [sp, #28]
   19cb0:	mov	r2, r9
   19cb4:	mov	r1, r8
   19cb8:	str	r0, [fp, #4]
   19cbc:	str	r3, [sp]
   19cc0:	str	sl, [sp, #8]
   19cc4:	str	r4, [sp, #4]
   19cc8:	str	lr, [sp, #16]
   19ccc:	str	ip, [sp, #12]
   19cd0:	mvn	r3, #0
   19cd4:	mov	r6, r0
   19cd8:	bl	16d14 <__assert_fail@plt+0x5710>
   19cdc:	ldr	r3, [sp, #24]
   19ce0:	mov	r0, r6
   19ce4:	str	r3, [r7]
   19ce8:	add	sp, sp, #180	; 0xb4
   19cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cf0:	mov	r3, #8
   19cf4:	sub	r2, r4, r2
   19cf8:	add	r1, sp, #80	; 0x50
   19cfc:	str	r3, [sp]
   19d00:	add	r2, r2, #1
   19d04:	mvn	r3, #-2147483648	; 0x80000000
   19d08:	bl	1c114 <__assert_fail@plt+0xab10>
   19d0c:	mov	r5, r0
   19d10:	ldm	r8, {r0, r1}
   19d14:	str	r5, [r6]
   19d18:	stm	r5, {r0, r1}
   19d1c:	b	19c00 <__assert_fail@plt+0x85fc>
   19d20:	bl	115c8 <abort@plt>
   19d24:	andeq	pc, r2, ip, ror #2
   19d28:	andeq	pc, r2, r0, asr #4
   19d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d30:	mov	r7, r1
   19d34:	ldr	lr, [pc, #492]	; 19f28 <__assert_fail@plt+0x8924>
   19d38:	mov	r8, r2
   19d3c:	mov	r4, r0
   19d40:	mov	fp, r3
   19d44:	ldm	lr!, {r0, r1, r2, r3}
   19d48:	sub	sp, sp, #100	; 0x64
   19d4c:	add	ip, sp, #48	; 0x30
   19d50:	mov	sl, #10
   19d54:	stmia	ip!, {r0, r1, r2, r3}
   19d58:	cmp	r8, #0
   19d5c:	cmpne	r7, #0
   19d60:	ldm	lr!, {r0, r1, r2, r3}
   19d64:	str	sl, [sp, #48]	; 0x30
   19d68:	stmia	ip!, {r0, r1, r2, r3}
   19d6c:	ldm	lr, {r0, r1, r2, r3}
   19d70:	stm	ip, {r0, r1, r2, r3}
   19d74:	beq	19f24 <__assert_fail@plt+0x8920>
   19d78:	str	r7, [sp, #88]	; 0x58
   19d7c:	str	r8, [sp, #92]	; 0x5c
   19d80:	bl	11484 <__errno_location@plt>
   19d84:	ldr	r6, [pc, #416]	; 19f2c <__assert_fail@plt+0x8928>
   19d88:	cmn	r4, #-2147483647	; 0x80000001
   19d8c:	ldr	r5, [r6]
   19d90:	mov	r9, r0
   19d94:	movne	r0, #0
   19d98:	moveq	r0, #1
   19d9c:	ldr	r3, [r9]
   19da0:	orrs	r0, r0, r4, lsr #31
   19da4:	str	r3, [sp, #28]
   19da8:	bne	19f24 <__assert_fail@plt+0x8920>
   19dac:	ldr	r2, [r6, #4]
   19db0:	cmp	r4, r2
   19db4:	movlt	r3, sl
   19db8:	blt	19e24 <__assert_fail@plt+0x8820>
   19dbc:	add	r7, r6, #8
   19dc0:	cmp	r5, r7
   19dc4:	str	r2, [sp, #44]	; 0x2c
   19dc8:	beq	19ef4 <__assert_fail@plt+0x88f0>
   19dcc:	mov	r3, #8
   19dd0:	sub	r2, r4, r2
   19dd4:	mov	r0, r5
   19dd8:	str	r3, [sp]
   19ddc:	add	r2, r2, #1
   19de0:	mvn	r3, #-2147483648	; 0x80000000
   19de4:	add	r1, sp, #44	; 0x2c
   19de8:	bl	1c114 <__assert_fail@plt+0xab10>
   19dec:	mov	r5, r0
   19df0:	str	r0, [r6]
   19df4:	ldr	r0, [r6, #4]
   19df8:	ldr	r2, [sp, #44]	; 0x2c
   19dfc:	mov	r1, #0
   19e00:	sub	r2, r2, r0
   19e04:	add	r0, r5, r0, lsl #3
   19e08:	lsl	r2, r2, #3
   19e0c:	bl	114a8 <memset@plt>
   19e10:	ldr	r3, [sp, #48]	; 0x30
   19e14:	ldr	r7, [sp, #88]	; 0x58
   19e18:	ldr	r8, [sp, #92]	; 0x5c
   19e1c:	ldr	r2, [sp, #44]	; 0x2c
   19e20:	str	r2, [r6, #4]
   19e24:	add	r2, r5, r4, lsl #3
   19e28:	mov	r1, r2
   19e2c:	str	r2, [sp, #32]
   19e30:	ldr	r2, [sp, #52]	; 0x34
   19e34:	ldr	r6, [r1, #4]
   19e38:	ldr	sl, [r5, r4, lsl #3]
   19e3c:	orr	r2, r2, #1
   19e40:	str	r3, [sp]
   19e44:	add	r3, sp, #56	; 0x38
   19e48:	str	r2, [sp, #36]	; 0x24
   19e4c:	str	r2, [sp, #4]
   19e50:	str	r3, [sp, #8]
   19e54:	mov	r0, r6
   19e58:	str	r8, [sp, #16]
   19e5c:	str	r7, [sp, #12]
   19e60:	mov	r1, sl
   19e64:	mvn	r3, #0
   19e68:	mov	r2, fp
   19e6c:	bl	16d14 <__assert_fail@plt+0x5710>
   19e70:	cmp	sl, r0
   19e74:	bhi	19ee0 <__assert_fail@plt+0x88dc>
   19e78:	ldr	r3, [pc, #176]	; 19f30 <__assert_fail@plt+0x892c>
   19e7c:	add	r7, r0, #1
   19e80:	cmp	r6, r3
   19e84:	str	r7, [r5, r4, lsl #3]
   19e88:	beq	19e94 <__assert_fail@plt+0x8890>
   19e8c:	mov	r0, r6
   19e90:	bl	1cc30 <__assert_fail@plt+0xb62c>
   19e94:	mov	r0, r7
   19e98:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   19e9c:	ldr	r3, [sp, #32]
   19ea0:	ldr	lr, [sp, #92]	; 0x5c
   19ea4:	ldr	ip, [sp, #88]	; 0x58
   19ea8:	ldr	r4, [sp, #36]	; 0x24
   19eac:	mov	r2, fp
   19eb0:	mov	r1, r7
   19eb4:	str	r0, [r3, #4]
   19eb8:	add	r3, sp, #56	; 0x38
   19ebc:	str	r3, [sp, #8]
   19ec0:	ldr	r3, [sp, #48]	; 0x30
   19ec4:	str	r4, [sp, #4]
   19ec8:	str	r3, [sp]
   19ecc:	str	lr, [sp, #16]
   19ed0:	str	ip, [sp, #12]
   19ed4:	mvn	r3, #0
   19ed8:	mov	r6, r0
   19edc:	bl	16d14 <__assert_fail@plt+0x5710>
   19ee0:	ldr	r3, [sp, #28]
   19ee4:	mov	r0, r6
   19ee8:	str	r3, [r9]
   19eec:	add	sp, sp, #100	; 0x64
   19ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef4:	mov	r3, #8
   19ef8:	sub	r2, r4, r2
   19efc:	str	r3, [sp]
   19f00:	add	r1, sp, #44	; 0x2c
   19f04:	add	r2, r2, #1
   19f08:	mvn	r3, #-2147483648	; 0x80000000
   19f0c:	bl	1c114 <__assert_fail@plt+0xab10>
   19f10:	mov	r5, r0
   19f14:	ldm	r7, {r0, r1}
   19f18:	str	r5, [r6]
   19f1c:	stm	r5, {r0, r1}
   19f20:	b	19df4 <__assert_fail@plt+0x87f0>
   19f24:	bl	115c8 <abort@plt>
   19f28:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   19f2c:	andeq	pc, r2, ip, ror #2
   19f30:	andeq	pc, r2, r0, asr #4
   19f34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f38:	mov	r7, r1
   19f3c:	ldr	lr, [pc, #492]	; 1a130 <__assert_fail@plt+0x8b2c>
   19f40:	mov	r8, r2
   19f44:	mov	r4, r0
   19f48:	mov	fp, r3
   19f4c:	ldm	lr!, {r0, r1, r2, r3}
   19f50:	sub	sp, sp, #100	; 0x64
   19f54:	add	ip, sp, #48	; 0x30
   19f58:	mov	sl, #10
   19f5c:	stmia	ip!, {r0, r1, r2, r3}
   19f60:	cmp	r8, #0
   19f64:	cmpne	r7, #0
   19f68:	ldm	lr!, {r0, r1, r2, r3}
   19f6c:	str	sl, [sp, #48]	; 0x30
   19f70:	stmia	ip!, {r0, r1, r2, r3}
   19f74:	ldm	lr, {r0, r1, r2, r3}
   19f78:	stm	ip, {r0, r1, r2, r3}
   19f7c:	beq	1a12c <__assert_fail@plt+0x8b28>
   19f80:	str	r7, [sp, #88]	; 0x58
   19f84:	str	r8, [sp, #92]	; 0x5c
   19f88:	bl	11484 <__errno_location@plt>
   19f8c:	ldr	r6, [pc, #416]	; 1a134 <__assert_fail@plt+0x8b30>
   19f90:	cmn	r4, #-2147483647	; 0x80000001
   19f94:	ldr	r5, [r6]
   19f98:	mov	r9, r0
   19f9c:	movne	r0, #0
   19fa0:	moveq	r0, #1
   19fa4:	ldr	r3, [r9]
   19fa8:	orrs	r0, r0, r4, lsr #31
   19fac:	str	r3, [sp, #28]
   19fb0:	bne	1a12c <__assert_fail@plt+0x8b28>
   19fb4:	ldr	r2, [r6, #4]
   19fb8:	cmp	r4, r2
   19fbc:	movlt	r3, sl
   19fc0:	blt	1a02c <__assert_fail@plt+0x8a28>
   19fc4:	add	r7, r6, #8
   19fc8:	cmp	r5, r7
   19fcc:	str	r2, [sp, #44]	; 0x2c
   19fd0:	beq	1a0fc <__assert_fail@plt+0x8af8>
   19fd4:	mov	r3, #8
   19fd8:	sub	r2, r4, r2
   19fdc:	mov	r0, r5
   19fe0:	str	r3, [sp]
   19fe4:	add	r2, r2, #1
   19fe8:	mvn	r3, #-2147483648	; 0x80000000
   19fec:	add	r1, sp, #44	; 0x2c
   19ff0:	bl	1c114 <__assert_fail@plt+0xab10>
   19ff4:	mov	r5, r0
   19ff8:	str	r0, [r6]
   19ffc:	ldr	r0, [r6, #4]
   1a000:	ldr	r2, [sp, #44]	; 0x2c
   1a004:	mov	r1, #0
   1a008:	sub	r2, r2, r0
   1a00c:	add	r0, r5, r0, lsl #3
   1a010:	lsl	r2, r2, #3
   1a014:	bl	114a8 <memset@plt>
   1a018:	ldr	r3, [sp, #48]	; 0x30
   1a01c:	ldr	r7, [sp, #88]	; 0x58
   1a020:	ldr	r8, [sp, #92]	; 0x5c
   1a024:	ldr	r2, [sp, #44]	; 0x2c
   1a028:	str	r2, [r6, #4]
   1a02c:	add	r2, r5, r4, lsl #3
   1a030:	mov	r1, r2
   1a034:	str	r2, [sp, #32]
   1a038:	ldr	r2, [sp, #52]	; 0x34
   1a03c:	ldr	r6, [r1, #4]
   1a040:	ldr	sl, [r5, r4, lsl #3]
   1a044:	orr	r2, r2, #1
   1a048:	str	r3, [sp]
   1a04c:	add	r3, sp, #56	; 0x38
   1a050:	str	r2, [sp, #36]	; 0x24
   1a054:	str	r2, [sp, #4]
   1a058:	str	r3, [sp, #8]
   1a05c:	mov	r0, r6
   1a060:	str	r8, [sp, #16]
   1a064:	str	r7, [sp, #12]
   1a068:	mov	r1, sl
   1a06c:	ldr	r3, [sp, #136]	; 0x88
   1a070:	mov	r2, fp
   1a074:	bl	16d14 <__assert_fail@plt+0x5710>
   1a078:	cmp	sl, r0
   1a07c:	bhi	1a0e8 <__assert_fail@plt+0x8ae4>
   1a080:	ldr	r3, [pc, #176]	; 1a138 <__assert_fail@plt+0x8b34>
   1a084:	add	r7, r0, #1
   1a088:	cmp	r6, r3
   1a08c:	str	r7, [r5, r4, lsl #3]
   1a090:	beq	1a09c <__assert_fail@plt+0x8a98>
   1a094:	mov	r0, r6
   1a098:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1a09c:	mov	r0, r7
   1a0a0:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1a0a4:	ldr	r3, [sp, #32]
   1a0a8:	ldr	lr, [sp, #92]	; 0x5c
   1a0ac:	ldr	ip, [sp, #88]	; 0x58
   1a0b0:	ldr	r4, [sp, #36]	; 0x24
   1a0b4:	mov	r2, fp
   1a0b8:	mov	r1, r7
   1a0bc:	str	r0, [r3, #4]
   1a0c0:	add	r3, sp, #56	; 0x38
   1a0c4:	str	r3, [sp, #8]
   1a0c8:	ldr	r3, [sp, #48]	; 0x30
   1a0cc:	str	r4, [sp, #4]
   1a0d0:	str	r3, [sp]
   1a0d4:	str	lr, [sp, #16]
   1a0d8:	str	ip, [sp, #12]
   1a0dc:	ldr	r3, [sp, #136]	; 0x88
   1a0e0:	mov	r6, r0
   1a0e4:	bl	16d14 <__assert_fail@plt+0x5710>
   1a0e8:	ldr	r3, [sp, #28]
   1a0ec:	mov	r0, r6
   1a0f0:	str	r3, [r9]
   1a0f4:	add	sp, sp, #100	; 0x64
   1a0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0fc:	mov	r3, #8
   1a100:	sub	r2, r4, r2
   1a104:	str	r3, [sp]
   1a108:	add	r1, sp, #44	; 0x2c
   1a10c:	add	r2, r2, #1
   1a110:	mvn	r3, #-2147483648	; 0x80000000
   1a114:	bl	1c114 <__assert_fail@plt+0xab10>
   1a118:	mov	r5, r0
   1a11c:	ldm	r7, {r0, r1}
   1a120:	str	r5, [r6]
   1a124:	stm	r5, {r0, r1}
   1a128:	b	19ffc <__assert_fail@plt+0x89f8>
   1a12c:	bl	115c8 <abort@plt>
   1a130:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   1a134:	andeq	pc, r2, ip, ror #2
   1a138:	andeq	pc, r2, r0, asr #4
   1a13c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a140:	mov	r5, r0
   1a144:	ldr	lr, [pc, #452]	; 1a310 <__assert_fail@plt+0x8d0c>
   1a148:	mov	r6, r1
   1a14c:	mov	sl, r2
   1a150:	ldm	lr!, {r0, r1, r2, r3}
   1a154:	sub	sp, sp, #92	; 0x5c
   1a158:	add	ip, sp, #40	; 0x28
   1a15c:	cmp	r6, #0
   1a160:	cmpne	r5, #0
   1a164:	stmia	ip!, {r0, r1, r2, r3}
   1a168:	mov	r9, #10
   1a16c:	ldm	lr!, {r0, r1, r2, r3}
   1a170:	moveq	fp, #1
   1a174:	movne	fp, #0
   1a178:	str	r9, [sp, #40]	; 0x28
   1a17c:	stmia	ip!, {r0, r1, r2, r3}
   1a180:	ldm	lr, {r0, r1, r2, r3}
   1a184:	stm	ip, {r0, r1, r2, r3}
   1a188:	beq	1a30c <__assert_fail@plt+0x8d08>
   1a18c:	str	r5, [sp, #80]	; 0x50
   1a190:	str	r6, [sp, #84]	; 0x54
   1a194:	bl	11484 <__errno_location@plt>
   1a198:	ldr	r7, [pc, #372]	; 1a314 <__assert_fail@plt+0x8d10>
   1a19c:	ldr	r2, [r7, #4]
   1a1a0:	ldr	r4, [r7]
   1a1a4:	cmp	r2, #0
   1a1a8:	ldr	r3, [r0]
   1a1ac:	mov	r8, r0
   1a1b0:	str	r3, [sp, #24]
   1a1b4:	movgt	r3, r9
   1a1b8:	bgt	1a220 <__assert_fail@plt+0x8c1c>
   1a1bc:	add	r5, r7, #8
   1a1c0:	cmp	r4, r5
   1a1c4:	str	r2, [sp, #36]	; 0x24
   1a1c8:	beq	1a2dc <__assert_fail@plt+0x8cd8>
   1a1cc:	mov	r3, #8
   1a1d0:	mov	r0, r4
   1a1d4:	str	r3, [sp]
   1a1d8:	rsb	r2, r2, #1
   1a1dc:	mvn	r3, #-2147483648	; 0x80000000
   1a1e0:	add	r1, sp, #36	; 0x24
   1a1e4:	bl	1c114 <__assert_fail@plt+0xab10>
   1a1e8:	mov	r4, r0
   1a1ec:	str	r0, [r7]
   1a1f0:	ldr	r0, [r7, #4]
   1a1f4:	ldr	r2, [sp, #36]	; 0x24
   1a1f8:	mov	r1, #0
   1a1fc:	sub	r2, r2, r0
   1a200:	add	r0, r4, r0, lsl #3
   1a204:	lsl	r2, r2, #3
   1a208:	bl	114a8 <memset@plt>
   1a20c:	ldr	r3, [sp, #40]	; 0x28
   1a210:	ldr	r5, [sp, #80]	; 0x50
   1a214:	ldr	r6, [sp, #84]	; 0x54
   1a218:	ldr	r2, [sp, #36]	; 0x24
   1a21c:	str	r2, [r7, #4]
   1a220:	ldr	r2, [sp, #44]	; 0x2c
   1a224:	ldr	r9, [r4]
   1a228:	ldr	r7, [r4, #4]
   1a22c:	orr	r2, r2, #1
   1a230:	add	fp, sp, #48	; 0x30
   1a234:	str	r2, [sp, #28]
   1a238:	str	r2, [sp, #4]
   1a23c:	str	r3, [sp]
   1a240:	str	r6, [sp, #16]
   1a244:	str	r5, [sp, #12]
   1a248:	mov	r1, r9
   1a24c:	mov	r0, r7
   1a250:	str	fp, [sp, #8]
   1a254:	mvn	r3, #0
   1a258:	mov	r2, sl
   1a25c:	bl	16d14 <__assert_fail@plt+0x5710>
   1a260:	cmp	r9, r0
   1a264:	bhi	1a2c8 <__assert_fail@plt+0x8cc4>
   1a268:	ldr	r3, [pc, #168]	; 1a318 <__assert_fail@plt+0x8d14>
   1a26c:	add	r5, r0, #1
   1a270:	cmp	r7, r3
   1a274:	str	r5, [r4]
   1a278:	beq	1a284 <__assert_fail@plt+0x8c80>
   1a27c:	mov	r0, r7
   1a280:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1a284:	mov	r0, r5
   1a288:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1a28c:	ldr	lr, [sp, #84]	; 0x54
   1a290:	ldr	r3, [sp, #40]	; 0x28
   1a294:	ldr	ip, [sp, #80]	; 0x50
   1a298:	mov	r2, sl
   1a29c:	mov	r1, r5
   1a2a0:	str	r0, [r4, #4]
   1a2a4:	ldr	r4, [sp, #28]
   1a2a8:	str	r3, [sp]
   1a2ac:	str	fp, [sp, #8]
   1a2b0:	str	r4, [sp, #4]
   1a2b4:	str	lr, [sp, #16]
   1a2b8:	str	ip, [sp, #12]
   1a2bc:	mvn	r3, #0
   1a2c0:	mov	r7, r0
   1a2c4:	bl	16d14 <__assert_fail@plt+0x5710>
   1a2c8:	ldr	r3, [sp, #24]
   1a2cc:	mov	r0, r7
   1a2d0:	str	r3, [r8]
   1a2d4:	add	sp, sp, #92	; 0x5c
   1a2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2dc:	mov	r3, #8
   1a2e0:	str	r3, [sp]
   1a2e4:	add	r1, sp, #36	; 0x24
   1a2e8:	rsb	r2, r2, #1
   1a2ec:	mov	r0, fp
   1a2f0:	mvn	r3, #-2147483648	; 0x80000000
   1a2f4:	bl	1c114 <__assert_fail@plt+0xab10>
   1a2f8:	mov	r4, r0
   1a2fc:	ldm	r5, {r0, r1}
   1a300:	str	r4, [r7]
   1a304:	stm	r4, {r0, r1}
   1a308:	b	1a1f0 <__assert_fail@plt+0x8bec>
   1a30c:	bl	115c8 <abort@plt>
   1a310:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   1a314:	andeq	pc, r2, ip, ror #2
   1a318:	andeq	pc, r2, r0, asr #4
   1a31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a320:	mov	r5, r0
   1a324:	ldr	lr, [pc, #464]	; 1a4fc <__assert_fail@plt+0x8ef8>
   1a328:	mov	r6, r1
   1a32c:	mov	sl, r2
   1a330:	mov	fp, r3
   1a334:	ldm	lr!, {r0, r1, r2, r3}
   1a338:	sub	sp, sp, #92	; 0x5c
   1a33c:	add	ip, sp, #40	; 0x28
   1a340:	cmp	r6, #0
   1a344:	cmpne	r5, #0
   1a348:	stmia	ip!, {r0, r1, r2, r3}
   1a34c:	moveq	r4, #1
   1a350:	ldm	lr!, {r0, r1, r2, r3}
   1a354:	movne	r4, #0
   1a358:	mov	r9, #10
   1a35c:	str	r4, [sp, #28]
   1a360:	stmia	ip!, {r0, r1, r2, r3}
   1a364:	ldm	lr, {r0, r1, r2, r3}
   1a368:	str	r9, [sp, #40]	; 0x28
   1a36c:	stm	ip, {r0, r1, r2, r3}
   1a370:	beq	1a4f8 <__assert_fail@plt+0x8ef4>
   1a374:	str	r5, [sp, #80]	; 0x50
   1a378:	str	r6, [sp, #84]	; 0x54
   1a37c:	bl	11484 <__errno_location@plt>
   1a380:	ldr	r7, [pc, #376]	; 1a500 <__assert_fail@plt+0x8efc>
   1a384:	ldr	r2, [r7, #4]
   1a388:	ldr	r4, [r7]
   1a38c:	cmp	r2, #0
   1a390:	ldr	r3, [r0]
   1a394:	mov	r8, r0
   1a398:	str	r3, [sp, #24]
   1a39c:	movgt	r3, r9
   1a3a0:	bgt	1a408 <__assert_fail@plt+0x8e04>
   1a3a4:	add	r5, r7, #8
   1a3a8:	cmp	r4, r5
   1a3ac:	str	r2, [sp, #36]	; 0x24
   1a3b0:	beq	1a4c8 <__assert_fail@plt+0x8ec4>
   1a3b4:	mov	r3, #8
   1a3b8:	mov	r0, r4
   1a3bc:	str	r3, [sp]
   1a3c0:	rsb	r2, r2, #1
   1a3c4:	mvn	r3, #-2147483648	; 0x80000000
   1a3c8:	add	r1, sp, #36	; 0x24
   1a3cc:	bl	1c114 <__assert_fail@plt+0xab10>
   1a3d0:	mov	r4, r0
   1a3d4:	str	r0, [r7]
   1a3d8:	ldr	r0, [r7, #4]
   1a3dc:	ldr	r2, [sp, #36]	; 0x24
   1a3e0:	mov	r1, #0
   1a3e4:	sub	r2, r2, r0
   1a3e8:	add	r0, r4, r0, lsl #3
   1a3ec:	lsl	r2, r2, #3
   1a3f0:	bl	114a8 <memset@plt>
   1a3f4:	ldr	r3, [sp, #40]	; 0x28
   1a3f8:	ldr	r5, [sp, #80]	; 0x50
   1a3fc:	ldr	r6, [sp, #84]	; 0x54
   1a400:	ldr	r2, [sp, #36]	; 0x24
   1a404:	str	r2, [r7, #4]
   1a408:	ldr	r2, [sp, #44]	; 0x2c
   1a40c:	ldr	r9, [r4]
   1a410:	ldr	r7, [r4, #4]
   1a414:	orr	r2, r2, #1
   1a418:	str	r3, [sp]
   1a41c:	add	r3, sp, #48	; 0x30
   1a420:	str	r2, [sp, #28]
   1a424:	str	r2, [sp, #4]
   1a428:	str	r3, [sp, #8]
   1a42c:	str	r6, [sp, #16]
   1a430:	str	r5, [sp, #12]
   1a434:	mov	r1, r9
   1a438:	mov	r0, r7
   1a43c:	mov	r3, fp
   1a440:	mov	r2, sl
   1a444:	bl	16d14 <__assert_fail@plt+0x5710>
   1a448:	cmp	r9, r0
   1a44c:	bhi	1a4b4 <__assert_fail@plt+0x8eb0>
   1a450:	ldr	r3, [pc, #172]	; 1a504 <__assert_fail@plt+0x8f00>
   1a454:	add	r5, r0, #1
   1a458:	cmp	r7, r3
   1a45c:	str	r5, [r4]
   1a460:	beq	1a46c <__assert_fail@plt+0x8e68>
   1a464:	mov	r0, r7
   1a468:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1a46c:	mov	r0, r5
   1a470:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1a474:	add	lr, sp, #48	; 0x30
   1a478:	ldr	ip, [sp, #84]	; 0x54
   1a47c:	mov	r1, r5
   1a480:	ldr	r5, [sp, #28]
   1a484:	mov	r3, fp
   1a488:	mov	r2, sl
   1a48c:	str	r0, [r4, #4]
   1a490:	ldr	r4, [sp, #80]	; 0x50
   1a494:	str	lr, [sp, #8]
   1a498:	ldr	lr, [sp, #40]	; 0x28
   1a49c:	str	r5, [sp, #4]
   1a4a0:	str	ip, [sp, #16]
   1a4a4:	str	r4, [sp, #12]
   1a4a8:	str	lr, [sp]
   1a4ac:	mov	r7, r0
   1a4b0:	bl	16d14 <__assert_fail@plt+0x5710>
   1a4b4:	ldr	r3, [sp, #24]
   1a4b8:	mov	r0, r7
   1a4bc:	str	r3, [r8]
   1a4c0:	add	sp, sp, #92	; 0x5c
   1a4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4c8:	mov	r3, #8
   1a4cc:	str	r3, [sp]
   1a4d0:	add	r1, sp, #36	; 0x24
   1a4d4:	rsb	r2, r2, #1
   1a4d8:	ldr	r0, [sp, #28]
   1a4dc:	mvn	r3, #-2147483648	; 0x80000000
   1a4e0:	bl	1c114 <__assert_fail@plt+0xab10>
   1a4e4:	mov	r4, r0
   1a4e8:	ldm	r5, {r0, r1}
   1a4ec:	str	r4, [r7]
   1a4f0:	stm	r4, {r0, r1}
   1a4f4:	b	1a3d8 <__assert_fail@plt+0x8dd4>
   1a4f8:	bl	115c8 <abort@plt>
   1a4fc:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   1a500:	andeq	pc, r2, ip, ror #2
   1a504:	andeq	pc, r2, r0, asr #4
   1a508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a50c:	sub	sp, sp, #52	; 0x34
   1a510:	mov	r5, r0
   1a514:	mov	sl, r1
   1a518:	mov	fp, r2
   1a51c:	bl	11484 <__errno_location@plt>
   1a520:	ldr	r4, [pc, #404]	; 1a6bc <__assert_fail@plt+0x90b8>
   1a524:	cmn	r5, #-2147483647	; 0x80000001
   1a528:	ldr	r6, [r4]
   1a52c:	mov	r8, r0
   1a530:	movne	r0, #0
   1a534:	moveq	r0, #1
   1a538:	ldr	r3, [r8]
   1a53c:	orrs	r0, r0, r5, lsr #31
   1a540:	str	r3, [sp, #28]
   1a544:	bne	1a6b8 <__assert_fail@plt+0x90b4>
   1a548:	ldr	r2, [r4, #4]
   1a54c:	cmp	r5, r2
   1a550:	blt	1a5b0 <__assert_fail@plt+0x8fac>
   1a554:	add	r7, r4, #8
   1a558:	cmp	r6, r7
   1a55c:	str	r2, [sp, #44]	; 0x2c
   1a560:	beq	1a688 <__assert_fail@plt+0x9084>
   1a564:	mov	r3, #8
   1a568:	sub	r2, r5, r2
   1a56c:	mov	r0, r6
   1a570:	str	r3, [sp]
   1a574:	add	r2, r2, #1
   1a578:	mvn	r3, #-2147483648	; 0x80000000
   1a57c:	add	r1, sp, #44	; 0x2c
   1a580:	bl	1c114 <__assert_fail@plt+0xab10>
   1a584:	mov	r6, r0
   1a588:	str	r0, [r4]
   1a58c:	ldr	r0, [r4, #4]
   1a590:	ldr	r2, [sp, #44]	; 0x2c
   1a594:	mov	r1, #0
   1a598:	sub	r2, r2, r0
   1a59c:	add	r0, r6, r0, lsl #3
   1a5a0:	lsl	r2, r2, #3
   1a5a4:	bl	114a8 <memset@plt>
   1a5a8:	ldr	r3, [sp, #44]	; 0x2c
   1a5ac:	str	r3, [r4, #4]
   1a5b0:	ldr	r2, [r4, #56]	; 0x38
   1a5b4:	add	r3, r6, r5, lsl #3
   1a5b8:	ldr	r1, [r4, #20]
   1a5bc:	ldr	r7, [r3, #4]
   1a5c0:	ldr	r9, [r6, r5, lsl #3]
   1a5c4:	ldr	ip, [r4, #60]	; 0x3c
   1a5c8:	str	r3, [sp, #32]
   1a5cc:	ldr	r3, [r4, #16]
   1a5d0:	str	r2, [sp, #12]
   1a5d4:	ldr	r2, [pc, #228]	; 1a6c0 <__assert_fail@plt+0x90bc>
   1a5d8:	orr	r1, r1, #1
   1a5dc:	str	r1, [sp, #36]	; 0x24
   1a5e0:	str	r1, [sp, #4]
   1a5e4:	str	r2, [sp, #8]
   1a5e8:	str	r3, [sp]
   1a5ec:	mov	r0, r7
   1a5f0:	mov	r1, r9
   1a5f4:	str	ip, [sp, #16]
   1a5f8:	mov	r3, fp
   1a5fc:	mov	r2, sl
   1a600:	bl	16d14 <__assert_fail@plt+0x5710>
   1a604:	cmp	r9, r0
   1a608:	bhi	1a674 <__assert_fail@plt+0x9070>
   1a60c:	ldr	r3, [pc, #176]	; 1a6c4 <__assert_fail@plt+0x90c0>
   1a610:	add	r9, r0, #1
   1a614:	cmp	r7, r3
   1a618:	str	r9, [r6, r5, lsl #3]
   1a61c:	beq	1a628 <__assert_fail@plt+0x9024>
   1a620:	mov	r0, r7
   1a624:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1a628:	mov	r0, r9
   1a62c:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1a630:	ldr	ip, [sp, #32]
   1a634:	ldr	lr, [r4, #60]	; 0x3c
   1a638:	ldr	r5, [r4, #56]	; 0x38
   1a63c:	mov	r3, fp
   1a640:	mov	r2, sl
   1a644:	mov	r1, r9
   1a648:	str	r0, [ip, #4]
   1a64c:	ldr	ip, [r4, #16]
   1a650:	ldr	r4, [pc, #104]	; 1a6c0 <__assert_fail@plt+0x90bc>
   1a654:	str	lr, [sp, #16]
   1a658:	str	r4, [sp, #8]
   1a65c:	ldr	r4, [sp, #36]	; 0x24
   1a660:	str	r5, [sp, #12]
   1a664:	str	r4, [sp, #4]
   1a668:	str	ip, [sp]
   1a66c:	mov	r7, r0
   1a670:	bl	16d14 <__assert_fail@plt+0x5710>
   1a674:	ldr	r3, [sp, #28]
   1a678:	mov	r0, r7
   1a67c:	str	r3, [r8]
   1a680:	add	sp, sp, #52	; 0x34
   1a684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a688:	mov	r3, #8
   1a68c:	sub	r2, r5, r2
   1a690:	str	r3, [sp]
   1a694:	add	r1, sp, #44	; 0x2c
   1a698:	add	r2, r2, #1
   1a69c:	mvn	r3, #-2147483648	; 0x80000000
   1a6a0:	bl	1c114 <__assert_fail@plt+0xab10>
   1a6a4:	mov	r6, r0
   1a6a8:	ldm	r7, {r0, r1}
   1a6ac:	str	r6, [r4]
   1a6b0:	stm	r6, {r0, r1}
   1a6b4:	b	1a58c <__assert_fail@plt+0x8f88>
   1a6b8:	bl	115c8 <abort@plt>
   1a6bc:	andeq	pc, r2, ip, ror #2
   1a6c0:	andeq	pc, r2, r4, lsl #3
   1a6c4:	andeq	pc, r2, r0, asr #4
   1a6c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6cc:	sub	sp, sp, #44	; 0x2c
   1a6d0:	mov	r9, r0
   1a6d4:	mov	sl, r1
   1a6d8:	bl	11484 <__errno_location@plt>
   1a6dc:	ldr	r4, [pc, #360]	; 1a84c <__assert_fail@plt+0x9248>
   1a6e0:	ldr	r2, [r4, #4]
   1a6e4:	ldr	r5, [r4]
   1a6e8:	cmp	r2, #0
   1a6ec:	ldr	r3, [r0]
   1a6f0:	mov	r7, r0
   1a6f4:	str	r3, [sp, #24]
   1a6f8:	bgt	1a754 <__assert_fail@plt+0x9150>
   1a6fc:	add	r6, r4, #8
   1a700:	cmp	r5, r6
   1a704:	str	r2, [sp, #36]	; 0x24
   1a708:	beq	1a81c <__assert_fail@plt+0x9218>
   1a70c:	mov	r3, #8
   1a710:	mov	r0, r5
   1a714:	str	r3, [sp]
   1a718:	rsb	r2, r2, #1
   1a71c:	mvn	r3, #-2147483648	; 0x80000000
   1a720:	add	r1, sp, #36	; 0x24
   1a724:	bl	1c114 <__assert_fail@plt+0xab10>
   1a728:	mov	r5, r0
   1a72c:	str	r0, [r4]
   1a730:	ldr	r0, [r4, #4]
   1a734:	ldr	r2, [sp, #36]	; 0x24
   1a738:	mov	r1, #0
   1a73c:	sub	r2, r2, r0
   1a740:	add	r0, r5, r0, lsl #3
   1a744:	lsl	r2, r2, #3
   1a748:	bl	114a8 <memset@plt>
   1a74c:	ldr	r3, [sp, #36]	; 0x24
   1a750:	str	r3, [r4, #4]
   1a754:	ldr	r1, [r4, #20]
   1a758:	ldr	r8, [r5]
   1a75c:	ldr	r6, [r5, #4]
   1a760:	ldr	r2, [r4, #56]	; 0x38
   1a764:	ldr	r3, [r4, #16]
   1a768:	ldr	ip, [r4, #60]	; 0x3c
   1a76c:	ldr	fp, [pc, #220]	; 1a850 <__assert_fail@plt+0x924c>
   1a770:	orr	r1, r1, #1
   1a774:	str	r1, [sp, #28]
   1a778:	str	r1, [sp, #4]
   1a77c:	str	r2, [sp, #12]
   1a780:	str	r3, [sp]
   1a784:	mov	r1, r8
   1a788:	mov	r0, r6
   1a78c:	str	ip, [sp, #16]
   1a790:	str	fp, [sp, #8]
   1a794:	mov	r3, sl
   1a798:	mov	r2, r9
   1a79c:	bl	16d14 <__assert_fail@plt+0x5710>
   1a7a0:	cmp	r8, r0
   1a7a4:	bhi	1a808 <__assert_fail@plt+0x9204>
   1a7a8:	ldr	r3, [pc, #164]	; 1a854 <__assert_fail@plt+0x9250>
   1a7ac:	add	r8, r0, #1
   1a7b0:	cmp	r6, r3
   1a7b4:	str	r8, [r5]
   1a7b8:	beq	1a7c4 <__assert_fail@plt+0x91c0>
   1a7bc:	mov	r0, r6
   1a7c0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1a7c4:	mov	r0, r8
   1a7c8:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1a7cc:	ldr	lr, [r4, #60]	; 0x3c
   1a7d0:	ldr	ip, [r4, #16]
   1a7d4:	mov	r3, sl
   1a7d8:	mov	r2, r9
   1a7dc:	mov	r1, r8
   1a7e0:	str	r0, [r5, #4]
   1a7e4:	ldr	r5, [r4, #56]	; 0x38
   1a7e8:	ldr	r4, [sp, #28]
   1a7ec:	str	fp, [sp, #8]
   1a7f0:	str	r4, [sp, #4]
   1a7f4:	str	lr, [sp, #16]
   1a7f8:	str	r5, [sp, #12]
   1a7fc:	str	ip, [sp]
   1a800:	mov	r6, r0
   1a804:	bl	16d14 <__assert_fail@plt+0x5710>
   1a808:	ldr	r3, [sp, #24]
   1a80c:	mov	r0, r6
   1a810:	str	r3, [r7]
   1a814:	add	sp, sp, #44	; 0x2c
   1a818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a81c:	mov	r3, #8
   1a820:	str	r3, [sp]
   1a824:	add	r1, sp, #36	; 0x24
   1a828:	rsb	r2, r2, #1
   1a82c:	mvn	r3, #-2147483648	; 0x80000000
   1a830:	mov	r0, #0
   1a834:	bl	1c114 <__assert_fail@plt+0xab10>
   1a838:	mov	r5, r0
   1a83c:	ldm	r6, {r0, r1}
   1a840:	str	r5, [r4]
   1a844:	stm	r5, {r0, r1}
   1a848:	b	1a730 <__assert_fail@plt+0x912c>
   1a84c:	andeq	pc, r2, ip, ror #2
   1a850:	andeq	pc, r2, r4, lsl #3
   1a854:	andeq	pc, r2, r0, asr #4
   1a858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a85c:	sub	sp, sp, #44	; 0x2c
   1a860:	mov	r5, r0
   1a864:	mov	sl, r1
   1a868:	bl	11484 <__errno_location@plt>
   1a86c:	ldr	r4, [pc, #396]	; 1aa00 <__assert_fail@plt+0x93fc>
   1a870:	cmn	r5, #-2147483647	; 0x80000001
   1a874:	ldr	r6, [r4]
   1a878:	mov	r8, r0
   1a87c:	movne	r0, #0
   1a880:	moveq	r0, #1
   1a884:	ldr	r3, [r8]
   1a888:	orrs	r0, r0, r5, lsr #31
   1a88c:	str	r3, [sp, #24]
   1a890:	bne	1a9fc <__assert_fail@plt+0x93f8>
   1a894:	ldr	r2, [r4, #4]
   1a898:	cmp	r5, r2
   1a89c:	blt	1a8fc <__assert_fail@plt+0x92f8>
   1a8a0:	add	r7, r4, #8
   1a8a4:	cmp	r6, r7
   1a8a8:	str	r2, [sp, #36]	; 0x24
   1a8ac:	beq	1a9cc <__assert_fail@plt+0x93c8>
   1a8b0:	mov	r3, #8
   1a8b4:	sub	r2, r5, r2
   1a8b8:	mov	r0, r6
   1a8bc:	str	r3, [sp]
   1a8c0:	add	r2, r2, #1
   1a8c4:	mvn	r3, #-2147483648	; 0x80000000
   1a8c8:	add	r1, sp, #36	; 0x24
   1a8cc:	bl	1c114 <__assert_fail@plt+0xab10>
   1a8d0:	mov	r6, r0
   1a8d4:	str	r0, [r4]
   1a8d8:	ldr	r0, [r4, #4]
   1a8dc:	ldr	r2, [sp, #36]	; 0x24
   1a8e0:	mov	r1, #0
   1a8e4:	sub	r2, r2, r0
   1a8e8:	add	r0, r6, r0, lsl #3
   1a8ec:	lsl	r2, r2, #3
   1a8f0:	bl	114a8 <memset@plt>
   1a8f4:	ldr	r3, [sp, #36]	; 0x24
   1a8f8:	str	r3, [r4, #4]
   1a8fc:	ldr	r2, [r4, #56]	; 0x38
   1a900:	add	fp, r6, r5, lsl #3
   1a904:	ldr	r1, [r4, #20]
   1a908:	ldr	r9, [r6, r5, lsl #3]
   1a90c:	ldr	r7, [fp, #4]
   1a910:	ldr	r3, [r4, #16]
   1a914:	ldr	ip, [r4, #60]	; 0x3c
   1a918:	str	r2, [sp, #12]
   1a91c:	ldr	r2, [pc, #224]	; 1aa04 <__assert_fail@plt+0x9400>
   1a920:	orr	r1, r1, #1
   1a924:	str	r1, [sp, #28]
   1a928:	str	r1, [sp, #4]
   1a92c:	str	r2, [sp, #8]
   1a930:	str	r3, [sp]
   1a934:	mov	r0, r7
   1a938:	mov	r1, r9
   1a93c:	str	ip, [sp, #16]
   1a940:	mvn	r3, #0
   1a944:	mov	r2, sl
   1a948:	bl	16d14 <__assert_fail@plt+0x5710>
   1a94c:	cmp	r9, r0
   1a950:	bhi	1a9b8 <__assert_fail@plt+0x93b4>
   1a954:	ldr	r3, [pc, #172]	; 1aa08 <__assert_fail@plt+0x9404>
   1a958:	add	r9, r0, #1
   1a95c:	cmp	r7, r3
   1a960:	str	r9, [r6, r5, lsl #3]
   1a964:	beq	1a970 <__assert_fail@plt+0x936c>
   1a968:	mov	r0, r7
   1a96c:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1a970:	mov	r0, r9
   1a974:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1a978:	ldr	ip, [r4, #60]	; 0x3c
   1a97c:	ldr	r3, [r4, #16]
   1a980:	ldr	lr, [r4, #56]	; 0x38
   1a984:	ldr	r4, [pc, #120]	; 1aa04 <__assert_fail@plt+0x9400>
   1a988:	mov	r2, sl
   1a98c:	mov	r1, r9
   1a990:	str	r0, [fp, #4]
   1a994:	str	r4, [sp, #8]
   1a998:	ldr	r4, [sp, #28]
   1a99c:	str	r3, [sp]
   1a9a0:	str	r4, [sp, #4]
   1a9a4:	str	ip, [sp, #16]
   1a9a8:	str	lr, [sp, #12]
   1a9ac:	mvn	r3, #0
   1a9b0:	mov	r7, r0
   1a9b4:	bl	16d14 <__assert_fail@plt+0x5710>
   1a9b8:	ldr	r3, [sp, #24]
   1a9bc:	mov	r0, r7
   1a9c0:	str	r3, [r8]
   1a9c4:	add	sp, sp, #44	; 0x2c
   1a9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9cc:	mov	r3, #8
   1a9d0:	sub	r2, r5, r2
   1a9d4:	str	r3, [sp]
   1a9d8:	add	r1, sp, #36	; 0x24
   1a9dc:	add	r2, r2, #1
   1a9e0:	mvn	r3, #-2147483648	; 0x80000000
   1a9e4:	bl	1c114 <__assert_fail@plt+0xab10>
   1a9e8:	mov	r6, r0
   1a9ec:	ldm	r7, {r0, r1}
   1a9f0:	str	r6, [r4]
   1a9f4:	stm	r6, {r0, r1}
   1a9f8:	b	1a8d8 <__assert_fail@plt+0x92d4>
   1a9fc:	bl	115c8 <abort@plt>
   1aa00:	andeq	pc, r2, ip, ror #2
   1aa04:	andeq	pc, r2, r4, lsl #3
   1aa08:	andeq	pc, r2, r0, asr #4
   1aa0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa10:	sub	sp, sp, #44	; 0x2c
   1aa14:	mov	sl, r0
   1aa18:	bl	11484 <__errno_location@plt>
   1aa1c:	ldr	r4, [pc, #348]	; 1ab80 <__assert_fail@plt+0x957c>
   1aa20:	ldr	r2, [r4, #4]
   1aa24:	ldr	r5, [r4]
   1aa28:	cmp	r2, #0
   1aa2c:	ldr	r3, [r0]
   1aa30:	mov	r8, r0
   1aa34:	str	r3, [sp, #28]
   1aa38:	bgt	1aa94 <__assert_fail@plt+0x9490>
   1aa3c:	add	r6, r4, #8
   1aa40:	cmp	r5, r6
   1aa44:	str	r2, [sp, #36]	; 0x24
   1aa48:	beq	1ab50 <__assert_fail@plt+0x954c>
   1aa4c:	mov	r3, #8
   1aa50:	mov	r0, r5
   1aa54:	str	r3, [sp]
   1aa58:	rsb	r2, r2, #1
   1aa5c:	mvn	r3, #-2147483648	; 0x80000000
   1aa60:	add	r1, sp, #36	; 0x24
   1aa64:	bl	1c114 <__assert_fail@plt+0xab10>
   1aa68:	mov	r5, r0
   1aa6c:	str	r0, [r4]
   1aa70:	ldr	r0, [r4, #4]
   1aa74:	ldr	r2, [sp, #36]	; 0x24
   1aa78:	mov	r1, #0
   1aa7c:	sub	r2, r2, r0
   1aa80:	add	r0, r5, r0, lsl #3
   1aa84:	lsl	r2, r2, #3
   1aa88:	bl	114a8 <memset@plt>
   1aa8c:	ldr	r3, [sp, #36]	; 0x24
   1aa90:	str	r3, [r4, #4]
   1aa94:	ldr	r7, [r4, #20]
   1aa98:	ldr	r9, [r5]
   1aa9c:	ldr	r6, [r5, #4]
   1aaa0:	ldr	r2, [r4, #56]	; 0x38
   1aaa4:	ldr	r3, [r4, #16]
   1aaa8:	ldr	ip, [r4, #60]	; 0x3c
   1aaac:	ldr	fp, [pc, #208]	; 1ab84 <__assert_fail@plt+0x9580>
   1aab0:	orr	r7, r7, #1
   1aab4:	str	r2, [sp, #12]
   1aab8:	str	r3, [sp]
   1aabc:	str	r7, [sp, #4]
   1aac0:	mov	r1, r9
   1aac4:	mov	r0, r6
   1aac8:	str	ip, [sp, #16]
   1aacc:	str	fp, [sp, #8]
   1aad0:	mvn	r3, #0
   1aad4:	mov	r2, sl
   1aad8:	bl	16d14 <__assert_fail@plt+0x5710>
   1aadc:	cmp	r9, r0
   1aae0:	bhi	1ab3c <__assert_fail@plt+0x9538>
   1aae4:	ldr	r3, [pc, #156]	; 1ab88 <__assert_fail@plt+0x9584>
   1aae8:	add	r9, r0, #1
   1aaec:	cmp	r6, r3
   1aaf0:	str	r9, [r5]
   1aaf4:	beq	1ab00 <__assert_fail@plt+0x94fc>
   1aaf8:	mov	r0, r6
   1aafc:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1ab00:	mov	r0, r9
   1ab04:	bl	1bef8 <__assert_fail@plt+0xa8f4>
   1ab08:	ldr	ip, [r4, #60]	; 0x3c
   1ab0c:	ldr	r3, [r4, #16]
   1ab10:	ldr	lr, [r4, #56]	; 0x38
   1ab14:	mov	r2, sl
   1ab18:	mov	r1, r9
   1ab1c:	str	r0, [r5, #4]
   1ab20:	str	r3, [sp]
   1ab24:	stmib	sp, {r7, fp}
   1ab28:	str	ip, [sp, #16]
   1ab2c:	str	lr, [sp, #12]
   1ab30:	mvn	r3, #0
   1ab34:	mov	r6, r0
   1ab38:	bl	16d14 <__assert_fail@plt+0x5710>
   1ab3c:	ldr	r3, [sp, #28]
   1ab40:	mov	r0, r6
   1ab44:	str	r3, [r8]
   1ab48:	add	sp, sp, #44	; 0x2c
   1ab4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab50:	mov	r3, #8
   1ab54:	str	r3, [sp]
   1ab58:	add	r1, sp, #36	; 0x24
   1ab5c:	rsb	r2, r2, #1
   1ab60:	mvn	r3, #-2147483648	; 0x80000000
   1ab64:	mov	r0, #0
   1ab68:	bl	1c114 <__assert_fail@plt+0xab10>
   1ab6c:	mov	r5, r0
   1ab70:	ldm	r6, {r0, r1}
   1ab74:	str	r5, [r4]
   1ab78:	stm	r5, {r0, r1}
   1ab7c:	b	1aa70 <__assert_fail@plt+0x946c>
   1ab80:	andeq	pc, r2, ip, ror #2
   1ab84:	andeq	pc, r2, r4, lsl #3
   1ab88:	andeq	pc, r2, r0, asr #4
   1ab8c:	push	{r4, r6, r7, lr}
   1ab90:	sub	sp, sp, #104	; 0x68
   1ab94:	mov	r4, r0
   1ab98:	mov	r2, sp
   1ab9c:	ldr	r1, [pc, #52]	; 1abd8 <__assert_fail@plt+0x95d4>
   1aba0:	mov	r0, #3
   1aba4:	bl	115e0 <__lxstat64@plt>
   1aba8:	cmp	r0, #0
   1abac:	bne	1abcc <__assert_fail@plt+0x95c8>
   1abb0:	ldrd	r6, [sp, #96]	; 0x60
   1abb4:	ldrd	r2, [sp]
   1abb8:	mov	r0, r4
   1abbc:	strd	r6, [r4]
   1abc0:	strd	r2, [r4, #8]
   1abc4:	add	sp, sp, #104	; 0x68
   1abc8:	pop	{r4, r6, r7, pc}
   1abcc:	mov	r0, #0
   1abd0:	add	sp, sp, #104	; 0x68
   1abd4:	pop	{r4, r6, r7, pc}
   1abd8:	andeq	lr, r1, r8, asr #26
   1abdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abe0:	cmn	r0, #100	; 0x64
   1abe4:	sub	sp, sp, #4032	; 0xfc0
   1abe8:	sub	sp, sp, #4
   1abec:	mov	r5, r1
   1abf0:	mov	r8, r2
   1abf4:	beq	1acc8 <__assert_fail@plt+0x96c4>
   1abf8:	ldrb	r3, [r1]
   1abfc:	cmp	r3, #47	; 0x2f
   1ac00:	beq	1acc8 <__assert_fail@plt+0x96c4>
   1ac04:	mov	r4, r0
   1ac08:	mov	r2, r1
   1ac0c:	mov	r0, sp
   1ac10:	mov	r1, r4
   1ac14:	bl	1c6a8 <__assert_fail@plt+0xb0a4>
   1ac18:	mov	r7, sp
   1ac1c:	subs	r9, r0, #0
   1ac20:	beq	1ac74 <__assert_fail@plt+0x9670>
   1ac24:	mov	r1, r8
   1ac28:	bl	1b2fc <__assert_fail@plt+0x9cf8>
   1ac2c:	mov	r6, r0
   1ac30:	bl	11484 <__errno_location@plt>
   1ac34:	cmp	r9, r7
   1ac38:	mov	sl, r0
   1ac3c:	ldr	fp, [r0]
   1ac40:	beq	1ac4c <__assert_fail@plt+0x9648>
   1ac44:	mov	r0, r9
   1ac48:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1ac4c:	cmn	r6, #1
   1ac50:	beq	1ace8 <__assert_fail@plt+0x96e4>
   1ac54:	mov	r0, r6
   1ac58:	add	sp, sp, #4032	; 0xfc0
   1ac5c:	add	sp, sp, #4
   1ac60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac64:	ldr	r2, [pc, #308]	; 1ada0 <__assert_fail@plt+0x979c>
   1ac68:	mvn	r3, r2, lsr r3
   1ac6c:	tst	r3, #1
   1ac70:	bne	1acf4 <__assert_fail@plt+0x96f0>
   1ac74:	mov	r0, r7
   1ac78:	bl	1ce74 <__assert_fail@plt+0xb870>
   1ac7c:	cmp	r0, #0
   1ac80:	bne	1ad94 <__assert_fail@plt+0x9790>
   1ac84:	cmp	r4, #0
   1ac88:	blt	1ac98 <__assert_fail@plt+0x9694>
   1ac8c:	ldr	r3, [sp]
   1ac90:	cmp	r4, r3
   1ac94:	beq	1ad78 <__assert_fail@plt+0x9774>
   1ac98:	mov	r0, r4
   1ac9c:	bl	11568 <fchdir@plt>
   1aca0:	cmp	r0, #0
   1aca4:	beq	1ad08 <__assert_fail@plt+0x9704>
   1aca8:	bl	11484 <__errno_location@plt>
   1acac:	mvn	r6, #0
   1acb0:	mov	r4, r0
   1acb4:	mov	r0, r7
   1acb8:	ldr	r5, [r4]
   1acbc:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1acc0:	str	r5, [r4]
   1acc4:	b	1ac54 <__assert_fail@plt+0x9650>
   1acc8:	mov	r1, r8
   1accc:	mov	r0, r5
   1acd0:	bl	1b2fc <__assert_fail@plt+0x9cf8>
   1acd4:	mov	r6, r0
   1acd8:	mov	r0, r6
   1acdc:	add	sp, sp, #4032	; 0xfc0
   1ace0:	add	sp, sp, #4
   1ace4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ace8:	sub	r3, fp, #1
   1acec:	cmp	r3, #19
   1acf0:	bls	1ac64 <__assert_fail@plt+0x9660>
   1acf4:	cmp	fp, #38	; 0x26
   1acf8:	cmpne	fp, #95	; 0x5f
   1acfc:	strne	fp, [sl]
   1ad00:	bne	1ac54 <__assert_fail@plt+0x9650>
   1ad04:	b	1ac74 <__assert_fail@plt+0x9670>
   1ad08:	mov	r1, r8
   1ad0c:	mov	r0, r5
   1ad10:	bl	1b2fc <__assert_fail@plt+0x9cf8>
   1ad14:	cmn	r0, #1
   1ad18:	mov	r6, r0
   1ad1c:	beq	1ad48 <__assert_fail@plt+0x9744>
   1ad20:	mov	r0, r7
   1ad24:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1ad28:	cmp	r0, #0
   1ad2c:	bne	1ad3c <__assert_fail@plt+0x9738>
   1ad30:	mov	r0, r7
   1ad34:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1ad38:	b	1ac54 <__assert_fail@plt+0x9650>
   1ad3c:	bl	11484 <__errno_location@plt>
   1ad40:	ldr	r0, [r0]
   1ad44:	bl	1cdec <__assert_fail@plt+0xb7e8>
   1ad48:	bl	11484 <__errno_location@plt>
   1ad4c:	mov	r5, r0
   1ad50:	mov	r0, r7
   1ad54:	ldr	r4, [r5]
   1ad58:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1ad5c:	cmp	r0, #0
   1ad60:	bne	1ad3c <__assert_fail@plt+0x9738>
   1ad64:	mov	r0, r7
   1ad68:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1ad6c:	cmp	r4, #0
   1ad70:	strne	r4, [r5]
   1ad74:	b	1ac54 <__assert_fail@plt+0x9650>
   1ad78:	mov	r0, r7
   1ad7c:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1ad80:	bl	11484 <__errno_location@plt>
   1ad84:	mov	r3, #9
   1ad88:	mvn	r6, #0
   1ad8c:	str	r3, [r0]
   1ad90:	b	1ac54 <__assert_fail@plt+0x9650>
   1ad94:	bl	11484 <__errno_location@plt>
   1ad98:	ldr	r0, [r0]
   1ad9c:	bl	1cdb0 <__assert_fail@plt+0xb7ac>
   1ada0:	andeq	r1, r8, r3
   1ada4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ada8:	cmn	r0, #100	; 0x64
   1adac:	sub	sp, sp, #4032	; 0xfc0
   1adb0:	sub	sp, sp, #4
   1adb4:	mov	r5, r1
   1adb8:	mov	r8, r2
   1adbc:	beq	1ae90 <__assert_fail@plt+0x988c>
   1adc0:	ldrb	r3, [r1]
   1adc4:	cmp	r3, #47	; 0x2f
   1adc8:	beq	1ae90 <__assert_fail@plt+0x988c>
   1adcc:	mov	r4, r0
   1add0:	mov	r2, r1
   1add4:	mov	r0, sp
   1add8:	mov	r1, r4
   1addc:	bl	1c6a8 <__assert_fail@plt+0xb0a4>
   1ade0:	mov	r7, sp
   1ade4:	subs	r9, r0, #0
   1ade8:	beq	1ae3c <__assert_fail@plt+0x9838>
   1adec:	mov	r1, r8
   1adf0:	bl	1b370 <__assert_fail@plt+0x9d6c>
   1adf4:	mov	r6, r0
   1adf8:	bl	11484 <__errno_location@plt>
   1adfc:	cmp	r9, r7
   1ae00:	mov	sl, r0
   1ae04:	ldr	fp, [r0]
   1ae08:	beq	1ae14 <__assert_fail@plt+0x9810>
   1ae0c:	mov	r0, r9
   1ae10:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1ae14:	cmn	r6, #1
   1ae18:	beq	1aeb0 <__assert_fail@plt+0x98ac>
   1ae1c:	mov	r0, r6
   1ae20:	add	sp, sp, #4032	; 0xfc0
   1ae24:	add	sp, sp, #4
   1ae28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae2c:	ldr	r2, [pc, #308]	; 1af68 <__assert_fail@plt+0x9964>
   1ae30:	mvn	r3, r2, lsr r3
   1ae34:	tst	r3, #1
   1ae38:	bne	1aebc <__assert_fail@plt+0x98b8>
   1ae3c:	mov	r0, r7
   1ae40:	bl	1ce74 <__assert_fail@plt+0xb870>
   1ae44:	cmp	r0, #0
   1ae48:	bne	1af5c <__assert_fail@plt+0x9958>
   1ae4c:	cmp	r4, #0
   1ae50:	blt	1ae60 <__assert_fail@plt+0x985c>
   1ae54:	ldr	r3, [sp]
   1ae58:	cmp	r4, r3
   1ae5c:	beq	1af40 <__assert_fail@plt+0x993c>
   1ae60:	mov	r0, r4
   1ae64:	bl	11568 <fchdir@plt>
   1ae68:	cmp	r0, #0
   1ae6c:	beq	1aed0 <__assert_fail@plt+0x98cc>
   1ae70:	bl	11484 <__errno_location@plt>
   1ae74:	mvn	r6, #0
   1ae78:	mov	r4, r0
   1ae7c:	mov	r0, r7
   1ae80:	ldr	r5, [r4]
   1ae84:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1ae88:	str	r5, [r4]
   1ae8c:	b	1ae1c <__assert_fail@plt+0x9818>
   1ae90:	mov	r1, r8
   1ae94:	mov	r0, r5
   1ae98:	bl	1b370 <__assert_fail@plt+0x9d6c>
   1ae9c:	mov	r6, r0
   1aea0:	mov	r0, r6
   1aea4:	add	sp, sp, #4032	; 0xfc0
   1aea8:	add	sp, sp, #4
   1aeac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aeb0:	sub	r3, fp, #1
   1aeb4:	cmp	r3, #19
   1aeb8:	bls	1ae2c <__assert_fail@plt+0x9828>
   1aebc:	cmp	fp, #38	; 0x26
   1aec0:	cmpne	fp, #95	; 0x5f
   1aec4:	strne	fp, [sl]
   1aec8:	bne	1ae1c <__assert_fail@plt+0x9818>
   1aecc:	b	1ae3c <__assert_fail@plt+0x9838>
   1aed0:	mov	r1, r8
   1aed4:	mov	r0, r5
   1aed8:	bl	1b370 <__assert_fail@plt+0x9d6c>
   1aedc:	cmn	r0, #1
   1aee0:	mov	r6, r0
   1aee4:	beq	1af10 <__assert_fail@plt+0x990c>
   1aee8:	mov	r0, r7
   1aeec:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1aef0:	cmp	r0, #0
   1aef4:	bne	1af04 <__assert_fail@plt+0x9900>
   1aef8:	mov	r0, r7
   1aefc:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1af00:	b	1ae1c <__assert_fail@plt+0x9818>
   1af04:	bl	11484 <__errno_location@plt>
   1af08:	ldr	r0, [r0]
   1af0c:	bl	1cdec <__assert_fail@plt+0xb7e8>
   1af10:	bl	11484 <__errno_location@plt>
   1af14:	mov	r5, r0
   1af18:	mov	r0, r7
   1af1c:	ldr	r4, [r5]
   1af20:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1af24:	cmp	r0, #0
   1af28:	bne	1af04 <__assert_fail@plt+0x9900>
   1af2c:	mov	r0, r7
   1af30:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1af34:	cmp	r4, #0
   1af38:	strne	r4, [r5]
   1af3c:	b	1ae1c <__assert_fail@plt+0x9818>
   1af40:	mov	r0, r7
   1af44:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1af48:	bl	11484 <__errno_location@plt>
   1af4c:	mov	r3, #9
   1af50:	mvn	r6, #0
   1af54:	str	r3, [r0]
   1af58:	b	1ae1c <__assert_fail@plt+0x9818>
   1af5c:	bl	11484 <__errno_location@plt>
   1af60:	ldr	r0, [r0]
   1af64:	bl	1cdb0 <__assert_fail@plt+0xb7ac>
   1af68:	andeq	r1, r8, r3
   1af6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af70:	cmn	r0, #100	; 0x64
   1af74:	sub	sp, sp, #4032	; 0xfc0
   1af78:	sub	sp, sp, #4
   1af7c:	mov	r5, r1
   1af80:	mov	r8, r2
   1af84:	beq	1b058 <__assert_fail@plt+0x9a54>
   1af88:	ldrb	r3, [r1]
   1af8c:	cmp	r3, #47	; 0x2f
   1af90:	beq	1b058 <__assert_fail@plt+0x9a54>
   1af94:	mov	r4, r0
   1af98:	mov	r2, r1
   1af9c:	mov	r0, sp
   1afa0:	mov	r1, r4
   1afa4:	bl	1c6a8 <__assert_fail@plt+0xb0a4>
   1afa8:	mov	r7, sp
   1afac:	subs	r9, r0, #0
   1afb0:	beq	1b004 <__assert_fail@plt+0x9a00>
   1afb4:	mov	r1, r8
   1afb8:	bl	114e4 <setfilecon@plt>
   1afbc:	mov	r6, r0
   1afc0:	bl	11484 <__errno_location@plt>
   1afc4:	cmp	r9, r7
   1afc8:	mov	sl, r0
   1afcc:	ldr	fp, [r0]
   1afd0:	beq	1afdc <__assert_fail@plt+0x99d8>
   1afd4:	mov	r0, r9
   1afd8:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1afdc:	cmn	r6, #1
   1afe0:	beq	1b078 <__assert_fail@plt+0x9a74>
   1afe4:	mov	r0, r6
   1afe8:	add	sp, sp, #4032	; 0xfc0
   1afec:	add	sp, sp, #4
   1aff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aff4:	ldr	r2, [pc, #308]	; 1b130 <__assert_fail@plt+0x9b2c>
   1aff8:	mvn	r3, r2, lsr r3
   1affc:	tst	r3, #1
   1b000:	bne	1b084 <__assert_fail@plt+0x9a80>
   1b004:	mov	r0, r7
   1b008:	bl	1ce74 <__assert_fail@plt+0xb870>
   1b00c:	cmp	r0, #0
   1b010:	bne	1b124 <__assert_fail@plt+0x9b20>
   1b014:	cmp	r4, #0
   1b018:	blt	1b028 <__assert_fail@plt+0x9a24>
   1b01c:	ldr	r3, [sp]
   1b020:	cmp	r4, r3
   1b024:	beq	1b108 <__assert_fail@plt+0x9b04>
   1b028:	mov	r0, r4
   1b02c:	bl	11568 <fchdir@plt>
   1b030:	cmp	r0, #0
   1b034:	beq	1b098 <__assert_fail@plt+0x9a94>
   1b038:	bl	11484 <__errno_location@plt>
   1b03c:	mvn	r6, #0
   1b040:	mov	r4, r0
   1b044:	mov	r0, r7
   1b048:	ldr	r5, [r4]
   1b04c:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b050:	str	r5, [r4]
   1b054:	b	1afe4 <__assert_fail@plt+0x99e0>
   1b058:	mov	r1, r8
   1b05c:	mov	r0, r5
   1b060:	bl	114e4 <setfilecon@plt>
   1b064:	mov	r6, r0
   1b068:	mov	r0, r6
   1b06c:	add	sp, sp, #4032	; 0xfc0
   1b070:	add	sp, sp, #4
   1b074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b078:	sub	r3, fp, #1
   1b07c:	cmp	r3, #19
   1b080:	bls	1aff4 <__assert_fail@plt+0x99f0>
   1b084:	cmp	fp, #38	; 0x26
   1b088:	cmpne	fp, #95	; 0x5f
   1b08c:	strne	fp, [sl]
   1b090:	bne	1afe4 <__assert_fail@plt+0x99e0>
   1b094:	b	1b004 <__assert_fail@plt+0x9a00>
   1b098:	mov	r1, r8
   1b09c:	mov	r0, r5
   1b0a0:	bl	114e4 <setfilecon@plt>
   1b0a4:	cmn	r0, #1
   1b0a8:	mov	r6, r0
   1b0ac:	beq	1b0d8 <__assert_fail@plt+0x9ad4>
   1b0b0:	mov	r0, r7
   1b0b4:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1b0b8:	cmp	r0, #0
   1b0bc:	bne	1b0cc <__assert_fail@plt+0x9ac8>
   1b0c0:	mov	r0, r7
   1b0c4:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b0c8:	b	1afe4 <__assert_fail@plt+0x99e0>
   1b0cc:	bl	11484 <__errno_location@plt>
   1b0d0:	ldr	r0, [r0]
   1b0d4:	bl	1cdec <__assert_fail@plt+0xb7e8>
   1b0d8:	bl	11484 <__errno_location@plt>
   1b0dc:	mov	r5, r0
   1b0e0:	mov	r0, r7
   1b0e4:	ldr	r4, [r5]
   1b0e8:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1b0ec:	cmp	r0, #0
   1b0f0:	bne	1b0cc <__assert_fail@plt+0x9ac8>
   1b0f4:	mov	r0, r7
   1b0f8:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b0fc:	cmp	r4, #0
   1b100:	strne	r4, [r5]
   1b104:	b	1afe4 <__assert_fail@plt+0x99e0>
   1b108:	mov	r0, r7
   1b10c:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b110:	bl	11484 <__errno_location@plt>
   1b114:	mov	r3, #9
   1b118:	mvn	r6, #0
   1b11c:	str	r3, [r0]
   1b120:	b	1afe4 <__assert_fail@plt+0x99e0>
   1b124:	bl	11484 <__errno_location@plt>
   1b128:	ldr	r0, [r0]
   1b12c:	bl	1cdb0 <__assert_fail@plt+0xb7ac>
   1b130:	andeq	r1, r8, r3
   1b134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b138:	cmn	r0, #100	; 0x64
   1b13c:	sub	sp, sp, #4032	; 0xfc0
   1b140:	sub	sp, sp, #4
   1b144:	mov	r5, r1
   1b148:	mov	r8, r2
   1b14c:	beq	1b220 <__assert_fail@plt+0x9c1c>
   1b150:	ldrb	r3, [r1]
   1b154:	cmp	r3, #47	; 0x2f
   1b158:	beq	1b220 <__assert_fail@plt+0x9c1c>
   1b15c:	mov	r4, r0
   1b160:	mov	r2, r1
   1b164:	mov	r0, sp
   1b168:	mov	r1, r4
   1b16c:	bl	1c6a8 <__assert_fail@plt+0xb0a4>
   1b170:	mov	r7, sp
   1b174:	subs	r9, r0, #0
   1b178:	beq	1b1cc <__assert_fail@plt+0x9bc8>
   1b17c:	mov	r1, r8
   1b180:	bl	11280 <lsetfilecon@plt>
   1b184:	mov	r6, r0
   1b188:	bl	11484 <__errno_location@plt>
   1b18c:	cmp	r9, r7
   1b190:	mov	sl, r0
   1b194:	ldr	fp, [r0]
   1b198:	beq	1b1a4 <__assert_fail@plt+0x9ba0>
   1b19c:	mov	r0, r9
   1b1a0:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1b1a4:	cmn	r6, #1
   1b1a8:	beq	1b240 <__assert_fail@plt+0x9c3c>
   1b1ac:	mov	r0, r6
   1b1b0:	add	sp, sp, #4032	; 0xfc0
   1b1b4:	add	sp, sp, #4
   1b1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1bc:	ldr	r2, [pc, #308]	; 1b2f8 <__assert_fail@plt+0x9cf4>
   1b1c0:	mvn	r3, r2, lsr r3
   1b1c4:	tst	r3, #1
   1b1c8:	bne	1b24c <__assert_fail@plt+0x9c48>
   1b1cc:	mov	r0, r7
   1b1d0:	bl	1ce74 <__assert_fail@plt+0xb870>
   1b1d4:	cmp	r0, #0
   1b1d8:	bne	1b2ec <__assert_fail@plt+0x9ce8>
   1b1dc:	cmp	r4, #0
   1b1e0:	blt	1b1f0 <__assert_fail@plt+0x9bec>
   1b1e4:	ldr	r3, [sp]
   1b1e8:	cmp	r4, r3
   1b1ec:	beq	1b2d0 <__assert_fail@plt+0x9ccc>
   1b1f0:	mov	r0, r4
   1b1f4:	bl	11568 <fchdir@plt>
   1b1f8:	cmp	r0, #0
   1b1fc:	beq	1b260 <__assert_fail@plt+0x9c5c>
   1b200:	bl	11484 <__errno_location@plt>
   1b204:	mvn	r6, #0
   1b208:	mov	r4, r0
   1b20c:	mov	r0, r7
   1b210:	ldr	r5, [r4]
   1b214:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b218:	str	r5, [r4]
   1b21c:	b	1b1ac <__assert_fail@plt+0x9ba8>
   1b220:	mov	r1, r8
   1b224:	mov	r0, r5
   1b228:	bl	11280 <lsetfilecon@plt>
   1b22c:	mov	r6, r0
   1b230:	mov	r0, r6
   1b234:	add	sp, sp, #4032	; 0xfc0
   1b238:	add	sp, sp, #4
   1b23c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b240:	sub	r3, fp, #1
   1b244:	cmp	r3, #19
   1b248:	bls	1b1bc <__assert_fail@plt+0x9bb8>
   1b24c:	cmp	fp, #38	; 0x26
   1b250:	cmpne	fp, #95	; 0x5f
   1b254:	strne	fp, [sl]
   1b258:	bne	1b1ac <__assert_fail@plt+0x9ba8>
   1b25c:	b	1b1cc <__assert_fail@plt+0x9bc8>
   1b260:	mov	r1, r8
   1b264:	mov	r0, r5
   1b268:	bl	11280 <lsetfilecon@plt>
   1b26c:	cmn	r0, #1
   1b270:	mov	r6, r0
   1b274:	beq	1b2a0 <__assert_fail@plt+0x9c9c>
   1b278:	mov	r0, r7
   1b27c:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1b280:	cmp	r0, #0
   1b284:	bne	1b294 <__assert_fail@plt+0x9c90>
   1b288:	mov	r0, r7
   1b28c:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b290:	b	1b1ac <__assert_fail@plt+0x9ba8>
   1b294:	bl	11484 <__errno_location@plt>
   1b298:	ldr	r0, [r0]
   1b29c:	bl	1cdec <__assert_fail@plt+0xb7e8>
   1b2a0:	bl	11484 <__errno_location@plt>
   1b2a4:	mov	r5, r0
   1b2a8:	mov	r0, r7
   1b2ac:	ldr	r4, [r5]
   1b2b0:	bl	1cec8 <__assert_fail@plt+0xb8c4>
   1b2b4:	cmp	r0, #0
   1b2b8:	bne	1b294 <__assert_fail@plt+0x9c90>
   1b2bc:	mov	r0, r7
   1b2c0:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b2c4:	cmp	r4, #0
   1b2c8:	strne	r4, [r5]
   1b2cc:	b	1b1ac <__assert_fail@plt+0x9ba8>
   1b2d0:	mov	r0, r7
   1b2d4:	bl	1cee4 <__assert_fail@plt+0xb8e0>
   1b2d8:	bl	11484 <__errno_location@plt>
   1b2dc:	mov	r3, #9
   1b2e0:	mvn	r6, #0
   1b2e4:	str	r3, [r0]
   1b2e8:	b	1b1ac <__assert_fail@plt+0x9ba8>
   1b2ec:	bl	11484 <__errno_location@plt>
   1b2f0:	ldr	r0, [r0]
   1b2f4:	bl	1cdb0 <__assert_fail@plt+0xb7ac>
   1b2f8:	andeq	r1, r8, r3
   1b2fc:	push	{r4, r5, r6, r7, r8, lr}
   1b300:	mov	r5, r1
   1b304:	bl	11454 <getfilecon@plt>
   1b308:	subs	r4, r0, #0
   1b30c:	beq	1b358 <__assert_fail@plt+0x9d54>
   1b310:	cmp	r4, #10
   1b314:	beq	1b320 <__assert_fail@plt+0x9d1c>
   1b318:	mov	r0, r4
   1b31c:	pop	{r4, r5, r6, r7, r8, pc}
   1b320:	ldr	r6, [r5]
   1b324:	ldr	r1, [pc, #64]	; 1b36c <__assert_fail@plt+0x9d68>
   1b328:	mov	r0, r6
   1b32c:	bl	11268 <strcmp@plt>
   1b330:	subs	r7, r0, #0
   1b334:	bne	1b318 <__assert_fail@plt+0x9d14>
   1b338:	mov	r0, r6
   1b33c:	bl	11580 <freecon@plt>
   1b340:	str	r7, [r5]
   1b344:	bl	11484 <__errno_location@plt>
   1b348:	mov	r3, #61	; 0x3d
   1b34c:	mvn	r4, #0
   1b350:	str	r3, [r0]
   1b354:	b	1b318 <__assert_fail@plt+0x9d14>
   1b358:	bl	11484 <__errno_location@plt>
   1b35c:	mov	r3, #95	; 0x5f
   1b360:	mvn	r4, #0
   1b364:	str	r3, [r0]
   1b368:	b	1b318 <__assert_fail@plt+0x9d14>
   1b36c:	andeq	lr, r1, ip, lsr #19
   1b370:	push	{r4, r5, r6, r7, r8, lr}
   1b374:	mov	r5, r1
   1b378:	bl	113d0 <lgetfilecon@plt>
   1b37c:	subs	r4, r0, #0
   1b380:	beq	1b3cc <__assert_fail@plt+0x9dc8>
   1b384:	cmp	r4, #10
   1b388:	beq	1b394 <__assert_fail@plt+0x9d90>
   1b38c:	mov	r0, r4
   1b390:	pop	{r4, r5, r6, r7, r8, pc}
   1b394:	ldr	r6, [r5]
   1b398:	ldr	r1, [pc, #64]	; 1b3e0 <__assert_fail@plt+0x9ddc>
   1b39c:	mov	r0, r6
   1b3a0:	bl	11268 <strcmp@plt>
   1b3a4:	subs	r7, r0, #0
   1b3a8:	bne	1b38c <__assert_fail@plt+0x9d88>
   1b3ac:	mov	r0, r6
   1b3b0:	bl	11580 <freecon@plt>
   1b3b4:	str	r7, [r5]
   1b3b8:	bl	11484 <__errno_location@plt>
   1b3bc:	mov	r3, #61	; 0x3d
   1b3c0:	mvn	r4, #0
   1b3c4:	str	r3, [r0]
   1b3c8:	b	1b38c <__assert_fail@plt+0x9d88>
   1b3cc:	bl	11484 <__errno_location@plt>
   1b3d0:	mov	r3, #95	; 0x5f
   1b3d4:	mvn	r4, #0
   1b3d8:	str	r3, [r0]
   1b3dc:	b	1b38c <__assert_fail@plt+0x9d88>
   1b3e0:	andeq	lr, r1, ip, lsr #19
   1b3e4:	push	{r4, r5, r6, r7, r8, lr}
   1b3e8:	mov	r5, r1
   1b3ec:	bl	1131c <fgetfilecon@plt>
   1b3f0:	subs	r4, r0, #0
   1b3f4:	beq	1b440 <__assert_fail@plt+0x9e3c>
   1b3f8:	cmp	r4, #10
   1b3fc:	beq	1b408 <__assert_fail@plt+0x9e04>
   1b400:	mov	r0, r4
   1b404:	pop	{r4, r5, r6, r7, r8, pc}
   1b408:	ldr	r6, [r5]
   1b40c:	ldr	r1, [pc, #64]	; 1b454 <__assert_fail@plt+0x9e50>
   1b410:	mov	r0, r6
   1b414:	bl	11268 <strcmp@plt>
   1b418:	subs	r7, r0, #0
   1b41c:	bne	1b400 <__assert_fail@plt+0x9dfc>
   1b420:	mov	r0, r6
   1b424:	bl	11580 <freecon@plt>
   1b428:	str	r7, [r5]
   1b42c:	bl	11484 <__errno_location@plt>
   1b430:	mov	r3, #61	; 0x3d
   1b434:	mvn	r4, #0
   1b438:	str	r3, [r0]
   1b43c:	b	1b400 <__assert_fail@plt+0x9dfc>
   1b440:	bl	11484 <__errno_location@plt>
   1b444:	mov	r3, #95	; 0x5f
   1b448:	mvn	r4, #0
   1b44c:	str	r3, [r0]
   1b450:	b	1b400 <__assert_fail@plt+0x9dfc>
   1b454:	andeq	lr, r1, ip, lsr #19
   1b458:	cmp	r0, #2
   1b45c:	push	{r4, r5, r6, r7, r8, lr}
   1b460:	mov	r4, r0
   1b464:	bhi	1b48c <__assert_fail@plt+0x9e88>
   1b468:	bl	1cf08 <__assert_fail@plt+0xb904>
   1b46c:	mov	r7, r0
   1b470:	bl	11484 <__errno_location@plt>
   1b474:	mov	r5, r0
   1b478:	mov	r0, r4
   1b47c:	ldr	r6, [r5]
   1b480:	mov	r4, r7
   1b484:	bl	115d4 <close@plt>
   1b488:	str	r6, [r5]
   1b48c:	mov	r0, r4
   1b490:	pop	{r4, r5, r6, r7, r8, pc}
   1b494:	push	{r4, r5, r6, lr}
   1b498:	sub	sp, sp, #32
   1b49c:	cmp	r1, #0
   1b4a0:	mov	r4, r0
   1b4a4:	ldr	r5, [sp, #48]	; 0x30
   1b4a8:	ldr	r6, [sp, #52]	; 0x34
   1b4ac:	beq	1b7c4 <__assert_fail@plt+0xa1c0>
   1b4b0:	stm	sp, {r2, r3}
   1b4b4:	mov	r3, r1
   1b4b8:	ldr	r2, [pc, #808]	; 1b7e8 <__assert_fail@plt+0xa1e4>
   1b4bc:	mov	r1, #1
   1b4c0:	bl	114cc <__fprintf_chk@plt>
   1b4c4:	mov	r2, #5
   1b4c8:	ldr	r1, [pc, #796]	; 1b7ec <__assert_fail@plt+0xa1e8>
   1b4cc:	mov	r0, #0
   1b4d0:	bl	112f8 <dcgettext@plt>
   1b4d4:	ldr	r3, [pc, #788]	; 1b7f0 <__assert_fail@plt+0xa1ec>
   1b4d8:	ldr	r2, [pc, #788]	; 1b7f4 <__assert_fail@plt+0xa1f0>
   1b4dc:	str	r3, [sp]
   1b4e0:	mov	r1, #1
   1b4e4:	mov	r3, r0
   1b4e8:	mov	r0, r4
   1b4ec:	bl	114cc <__fprintf_chk@plt>
   1b4f0:	mov	r1, r4
   1b4f4:	mov	r0, #10
   1b4f8:	bl	112e0 <fputc_unlocked@plt>
   1b4fc:	mov	r2, #5
   1b500:	ldr	r1, [pc, #752]	; 1b7f8 <__assert_fail@plt+0xa1f4>
   1b504:	mov	r0, #0
   1b508:	bl	112f8 <dcgettext@plt>
   1b50c:	mov	r1, #1
   1b510:	ldr	r3, [pc, #740]	; 1b7fc <__assert_fail@plt+0xa1f8>
   1b514:	mov	r2, r0
   1b518:	mov	r0, r4
   1b51c:	bl	114cc <__fprintf_chk@plt>
   1b520:	mov	r1, r4
   1b524:	mov	r0, #10
   1b528:	bl	112e0 <fputc_unlocked@plt>
   1b52c:	cmp	r6, #9
   1b530:	ldrls	pc, [pc, r6, lsl #2]
   1b534:	b	1b7dc <__assert_fail@plt+0xa1d8>
   1b538:			; <UNDEFINED> instruction: 0x0001b5bc
   1b53c:	andeq	fp, r1, r4, asr #11
   1b540:	strdeq	fp, [r1], -r0
   1b544:	andeq	fp, r1, r4, lsr #12
   1b548:	andeq	fp, r1, r0, ror #12
   1b54c:	muleq	r1, ip, r6
   1b550:	ldrdeq	fp, [r1], -r8
   1b554:	andeq	fp, r1, ip, lsl r7
   1b558:	andeq	fp, r1, ip, ror #14
   1b55c:	andeq	fp, r1, r0, ror #10
   1b560:	ldr	r1, [pc, #664]	; 1b800 <__assert_fail@plt+0xa1fc>
   1b564:	mov	r2, #5
   1b568:	mov	r0, #0
   1b56c:	bl	112f8 <dcgettext@plt>
   1b570:	ldr	ip, [r5, #32]
   1b574:	ldr	r1, [r5, #28]
   1b578:	ldr	r2, [r5, #24]
   1b57c:	ldr	r3, [r5]
   1b580:	ldr	r6, [r5, #20]
   1b584:	str	ip, [sp, #28]
   1b588:	ldr	lr, [r5, #16]
   1b58c:	str	r1, [sp, #24]
   1b590:	ldr	ip, [r5, #12]
   1b594:	str	r2, [sp, #20]
   1b598:	ldr	r1, [r5, #8]
   1b59c:	ldr	r2, [r5, #4]
   1b5a0:	str	r6, [sp, #16]
   1b5a4:	stmib	sp, {r1, ip, lr}
   1b5a8:	mov	r1, #1
   1b5ac:	str	r2, [sp]
   1b5b0:	mov	r2, r0
   1b5b4:	mov	r0, r4
   1b5b8:	bl	114cc <__fprintf_chk@plt>
   1b5bc:	add	sp, sp, #32
   1b5c0:	pop	{r4, r5, r6, pc}
   1b5c4:	mov	r2, #5
   1b5c8:	ldr	r1, [pc, #564]	; 1b804 <__assert_fail@plt+0xa200>
   1b5cc:	mov	r0, #0
   1b5d0:	bl	112f8 <dcgettext@plt>
   1b5d4:	ldr	r3, [r5]
   1b5d8:	mov	r1, #1
   1b5dc:	mov	r2, r0
   1b5e0:	mov	r0, r4
   1b5e4:	add	sp, sp, #32
   1b5e8:	pop	{r4, r5, r6, lr}
   1b5ec:	b	114cc <__fprintf_chk@plt>
   1b5f0:	mov	r2, #5
   1b5f4:	ldr	r1, [pc, #524]	; 1b808 <__assert_fail@plt+0xa204>
   1b5f8:	mov	r0, #0
   1b5fc:	bl	112f8 <dcgettext@plt>
   1b600:	ldr	r2, [r5, #4]
   1b604:	ldr	r3, [r5]
   1b608:	mov	r1, #1
   1b60c:	str	r2, [sp, #48]	; 0x30
   1b610:	mov	r2, r0
   1b614:	mov	r0, r4
   1b618:	add	sp, sp, #32
   1b61c:	pop	{r4, r5, r6, lr}
   1b620:	b	114cc <__fprintf_chk@plt>
   1b624:	mov	r2, #5
   1b628:	ldr	r1, [pc, #476]	; 1b80c <__assert_fail@plt+0xa208>
   1b62c:	mov	r0, #0
   1b630:	bl	112f8 <dcgettext@plt>
   1b634:	ldr	r1, [r5, #8]
   1b638:	ldr	r2, [r5, #4]
   1b63c:	ldr	r3, [r5]
   1b640:	str	r1, [sp, #52]	; 0x34
   1b644:	str	r2, [sp, #48]	; 0x30
   1b648:	mov	r1, #1
   1b64c:	mov	r2, r0
   1b650:	mov	r0, r4
   1b654:	add	sp, sp, #32
   1b658:	pop	{r4, r5, r6, lr}
   1b65c:	b	114cc <__fprintf_chk@plt>
   1b660:	mov	r2, #5
   1b664:	ldr	r1, [pc, #420]	; 1b810 <__assert_fail@plt+0xa20c>
   1b668:	mov	r0, #0
   1b66c:	bl	112f8 <dcgettext@plt>
   1b670:	ldr	r1, [r5, #8]
   1b674:	ldr	ip, [r5, #12]
   1b678:	ldr	r2, [r5, #4]
   1b67c:	ldr	r3, [r5]
   1b680:	stmib	sp, {r1, ip}
   1b684:	str	r2, [sp]
   1b688:	mov	r1, #1
   1b68c:	mov	r2, r0
   1b690:	mov	r0, r4
   1b694:	bl	114cc <__fprintf_chk@plt>
   1b698:	b	1b5bc <__assert_fail@plt+0x9fb8>
   1b69c:	mov	r2, #5
   1b6a0:	ldr	r1, [pc, #364]	; 1b814 <__assert_fail@plt+0xa210>
   1b6a4:	mov	r0, #0
   1b6a8:	bl	112f8 <dcgettext@plt>
   1b6ac:	add	r1, r5, #8
   1b6b0:	ldr	r2, [r5, #4]
   1b6b4:	ldm	r1, {r1, ip, lr}
   1b6b8:	ldr	r3, [r5]
   1b6bc:	str	r2, [sp]
   1b6c0:	stmib	sp, {r1, ip, lr}
   1b6c4:	mov	r1, #1
   1b6c8:	mov	r2, r0
   1b6cc:	mov	r0, r4
   1b6d0:	bl	114cc <__fprintf_chk@plt>
   1b6d4:	b	1b5bc <__assert_fail@plt+0x9fb8>
   1b6d8:	mov	r2, #5
   1b6dc:	ldr	r1, [pc, #308]	; 1b818 <__assert_fail@plt+0xa214>
   1b6e0:	mov	r0, #0
   1b6e4:	bl	112f8 <dcgettext@plt>
   1b6e8:	add	r1, r5, #8
   1b6ec:	ldr	r2, [r5, #4]
   1b6f0:	ldm	r1, {r1, ip, lr}
   1b6f4:	ldr	r6, [r5, #20]
   1b6f8:	ldr	r3, [r5]
   1b6fc:	stmib	sp, {r1, ip, lr}
   1b700:	mov	r1, #1
   1b704:	str	r2, [sp]
   1b708:	str	r6, [sp, #16]
   1b70c:	mov	r2, r0
   1b710:	mov	r0, r4
   1b714:	bl	114cc <__fprintf_chk@plt>
   1b718:	b	1b5bc <__assert_fail@plt+0x9fb8>
   1b71c:	mov	r2, #5
   1b720:	ldr	r1, [pc, #244]	; 1b81c <__assert_fail@plt+0xa218>
   1b724:	mov	r0, #0
   1b728:	bl	112f8 <dcgettext@plt>
   1b72c:	ldr	r2, [r5, #24]
   1b730:	ldr	r3, [r5]
   1b734:	ldr	r6, [r5, #20]
   1b738:	ldr	lr, [r5, #16]
   1b73c:	ldr	ip, [r5, #12]
   1b740:	str	r2, [sp, #20]
   1b744:	ldr	r1, [r5, #8]
   1b748:	ldr	r2, [r5, #4]
   1b74c:	str	r6, [sp, #16]
   1b750:	stmib	sp, {r1, ip, lr}
   1b754:	mov	r1, #1
   1b758:	str	r2, [sp]
   1b75c:	mov	r2, r0
   1b760:	mov	r0, r4
   1b764:	bl	114cc <__fprintf_chk@plt>
   1b768:	b	1b5bc <__assert_fail@plt+0x9fb8>
   1b76c:	mov	r2, #5
   1b770:	ldr	r1, [pc, #168]	; 1b820 <__assert_fail@plt+0xa21c>
   1b774:	mov	r0, #0
   1b778:	bl	112f8 <dcgettext@plt>
   1b77c:	ldr	r1, [r5, #28]
   1b780:	ldr	r2, [r5, #24]
   1b784:	ldr	r3, [r5]
   1b788:	ldr	r6, [r5, #20]
   1b78c:	ldr	lr, [r5, #16]
   1b790:	str	r1, [sp, #24]
   1b794:	ldr	ip, [r5, #12]
   1b798:	str	r2, [sp, #20]
   1b79c:	ldr	r1, [r5, #8]
   1b7a0:	ldr	r2, [r5, #4]
   1b7a4:	str	r6, [sp, #16]
   1b7a8:	stmib	sp, {r1, ip, lr}
   1b7ac:	mov	r1, #1
   1b7b0:	str	r2, [sp]
   1b7b4:	mov	r2, r0
   1b7b8:	mov	r0, r4
   1b7bc:	bl	114cc <__fprintf_chk@plt>
   1b7c0:	b	1b5bc <__assert_fail@plt+0x9fb8>
   1b7c4:	str	r3, [sp]
   1b7c8:	mov	r1, #1
   1b7cc:	mov	r3, r2
   1b7d0:	ldr	r2, [pc, #76]	; 1b824 <__assert_fail@plt+0xa220>
   1b7d4:	bl	114cc <__fprintf_chk@plt>
   1b7d8:	b	1b4c4 <__assert_fail@plt+0x9ec0>
   1b7dc:	mov	r2, #5
   1b7e0:	ldr	r1, [pc, #64]	; 1b828 <__assert_fail@plt+0xa224>
   1b7e4:	b	1b568 <__assert_fail@plt+0x9f64>
   1b7e8:			; <UNDEFINED> instruction: 0x0001e9b8
   1b7ec:	andeq	lr, r1, ip, asr #19
   1b7f0:	andeq	r0, r0, r6, ror #15
   1b7f4:	andeq	lr, r1, r4, lsr #25
   1b7f8:	ldrdeq	lr, [r1], -r0
   1b7fc:	andeq	lr, r1, ip, ror sl
   1b800:	andeq	lr, r1, ip, lsr #23
   1b804:	andeq	lr, r1, r0, lsr #21
   1b808:			; <UNDEFINED> instruction: 0x0001eab0
   1b80c:	andeq	lr, r1, r8, asr #21
   1b810:	andeq	lr, r1, r4, ror #21
   1b814:	andeq	lr, r1, r4, lsl #22
   1b818:	andeq	lr, r1, r8, lsr #22
   1b81c:	andeq	lr, r1, r0, asr fp
   1b820:	andeq	lr, r1, ip, ror fp
   1b824:	andeq	lr, r1, r4, asr #19
   1b828:	andeq	lr, r1, r0, ror #23
   1b82c:	push	{r4, r5, lr}
   1b830:	sub	sp, sp, #12
   1b834:	ldr	r5, [sp, #24]
   1b838:	ldr	ip, [r5]
   1b83c:	cmp	ip, #0
   1b840:	beq	1b85c <__assert_fail@plt+0xa258>
   1b844:	mov	lr, r5
   1b848:	mov	ip, #0
   1b84c:	ldr	r4, [lr, #4]!
   1b850:	add	ip, ip, #1
   1b854:	cmp	r4, #0
   1b858:	bne	1b84c <__assert_fail@plt+0xa248>
   1b85c:	stm	sp, {r5, ip}
   1b860:	bl	1b494 <__assert_fail@plt+0x9e90>
   1b864:	add	sp, sp, #12
   1b868:	pop	{r4, r5, pc}
   1b86c:	push	{r4, r5, lr}
   1b870:	sub	sp, sp, #76	; 0x4c
   1b874:	mov	r5, r0
   1b878:	ldr	ip, [sp, #88]	; 0x58
   1b87c:	ldr	r0, [ip]
   1b880:	cmp	r0, #0
   1b884:	str	r0, [sp, #32]
   1b888:	beq	1bc5c <__assert_fail@plt+0xa658>
   1b88c:	ldr	r0, [ip, #4]
   1b890:	cmp	r0, #0
   1b894:	str	r0, [sp, #36]	; 0x24
   1b898:	beq	1bc64 <__assert_fail@plt+0xa660>
   1b89c:	ldr	r0, [ip, #8]
   1b8a0:	cmp	r0, #0
   1b8a4:	str	r0, [sp, #40]	; 0x28
   1b8a8:	beq	1bc6c <__assert_fail@plt+0xa668>
   1b8ac:	ldr	r0, [ip, #12]
   1b8b0:	cmp	r0, #0
   1b8b4:	str	r0, [sp, #44]	; 0x2c
   1b8b8:	beq	1bc74 <__assert_fail@plt+0xa670>
   1b8bc:	ldr	r0, [ip, #16]
   1b8c0:	cmp	r0, #0
   1b8c4:	str	r0, [sp, #48]	; 0x30
   1b8c8:	beq	1bc7c <__assert_fail@plt+0xa678>
   1b8cc:	ldr	r0, [ip, #20]
   1b8d0:	cmp	r0, #0
   1b8d4:	str	r0, [sp, #52]	; 0x34
   1b8d8:	beq	1bc84 <__assert_fail@plt+0xa680>
   1b8dc:	ldr	r0, [ip, #24]
   1b8e0:	cmp	r0, #0
   1b8e4:	str	r0, [sp, #56]	; 0x38
   1b8e8:	beq	1bc8c <__assert_fail@plt+0xa688>
   1b8ec:	ldr	r0, [ip, #28]
   1b8f0:	cmp	r0, #0
   1b8f4:	str	r0, [sp, #60]	; 0x3c
   1b8f8:	beq	1bc94 <__assert_fail@plt+0xa690>
   1b8fc:	ldr	r0, [ip, #32]
   1b900:	cmp	r0, #0
   1b904:	str	r0, [sp, #64]	; 0x40
   1b908:	beq	1bc9c <__assert_fail@plt+0xa698>
   1b90c:	ldr	r0, [ip, #36]	; 0x24
   1b910:	cmp	r0, #0
   1b914:	movne	r4, #10
   1b918:	moveq	r4, #9
   1b91c:	cmp	r1, #0
   1b920:	beq	1bc34 <__assert_fail@plt+0xa630>
   1b924:	stm	sp, {r2, r3}
   1b928:	mov	r0, r5
   1b92c:	mov	r3, r1
   1b930:	ldr	r2, [pc, #876]	; 1bca4 <__assert_fail@plt+0xa6a0>
   1b934:	mov	r1, #1
   1b938:	bl	114cc <__fprintf_chk@plt>
   1b93c:	mov	r2, #5
   1b940:	ldr	r1, [pc, #864]	; 1bca8 <__assert_fail@plt+0xa6a4>
   1b944:	mov	r0, #0
   1b948:	bl	112f8 <dcgettext@plt>
   1b94c:	ldr	r3, [pc, #856]	; 1bcac <__assert_fail@plt+0xa6a8>
   1b950:	ldr	r2, [pc, #856]	; 1bcb0 <__assert_fail@plt+0xa6ac>
   1b954:	str	r3, [sp]
   1b958:	mov	r1, #1
   1b95c:	mov	r3, r0
   1b960:	mov	r0, r5
   1b964:	bl	114cc <__fprintf_chk@plt>
   1b968:	mov	r1, r5
   1b96c:	mov	r0, #10
   1b970:	bl	112e0 <fputc_unlocked@plt>
   1b974:	mov	r2, #5
   1b978:	ldr	r1, [pc, #820]	; 1bcb4 <__assert_fail@plt+0xa6b0>
   1b97c:	mov	r0, #0
   1b980:	bl	112f8 <dcgettext@plt>
   1b984:	mov	r1, #1
   1b988:	ldr	r3, [pc, #808]	; 1bcb8 <__assert_fail@plt+0xa6b4>
   1b98c:	mov	r2, r0
   1b990:	mov	r0, r5
   1b994:	bl	114cc <__fprintf_chk@plt>
   1b998:	mov	r1, r5
   1b99c:	mov	r0, #10
   1b9a0:	bl	112e0 <fputc_unlocked@plt>
   1b9a4:	cmp	r4, #9
   1b9a8:	ldrls	pc, [pc, r4, lsl #2]
   1b9ac:	b	1bc50 <__assert_fail@plt+0xa64c>
   1b9b0:	andeq	fp, r1, r4, lsr sl
   1b9b4:	andeq	fp, r1, ip, lsr sl
   1b9b8:	andeq	fp, r1, r8, ror #20
   1b9bc:	muleq	r1, ip, sl
   1b9c0:	ldrdeq	fp, [r1], -r4
   1b9c4:	andeq	fp, r1, r0, lsl fp
   1b9c8:	andeq	fp, r1, ip, asr #22
   1b9cc:	muleq	r1, r0, fp
   1b9d0:	ldrdeq	fp, [r1], -ip
   1b9d4:	ldrdeq	fp, [r1], -r8
   1b9d8:	ldr	r1, [pc, #732]	; 1bcbc <__assert_fail@plt+0xa6b8>
   1b9dc:	mov	r2, #5
   1b9e0:	mov	r0, #0
   1b9e4:	bl	112f8 <dcgettext@plt>
   1b9e8:	ldr	ip, [sp, #64]	; 0x40
   1b9ec:	ldr	r1, [sp, #60]	; 0x3c
   1b9f0:	ldr	r2, [sp, #56]	; 0x38
   1b9f4:	ldr	lr, [sp, #48]	; 0x30
   1b9f8:	str	ip, [sp, #28]
   1b9fc:	str	r1, [sp, #24]
   1ba00:	ldr	ip, [sp, #44]	; 0x2c
   1ba04:	ldr	r1, [sp, #40]	; 0x28
   1ba08:	ldr	r4, [sp, #52]	; 0x34
   1ba0c:	str	r2, [sp, #20]
   1ba10:	ldr	r2, [sp, #36]	; 0x24
   1ba14:	stmib	sp, {r1, ip, lr}
   1ba18:	mov	r1, #1
   1ba1c:	str	r2, [sp]
   1ba20:	ldr	r3, [sp, #32]
   1ba24:	str	r4, [sp, #16]
   1ba28:	mov	r2, r0
   1ba2c:	mov	r0, r5
   1ba30:	bl	114cc <__fprintf_chk@plt>
   1ba34:	add	sp, sp, #76	; 0x4c
   1ba38:	pop	{r4, r5, pc}
   1ba3c:	mov	r2, #5
   1ba40:	ldr	r1, [pc, #632]	; 1bcc0 <__assert_fail@plt+0xa6bc>
   1ba44:	mov	r0, #0
   1ba48:	bl	112f8 <dcgettext@plt>
   1ba4c:	ldr	r3, [sp, #32]
   1ba50:	mov	r1, #1
   1ba54:	mov	r2, r0
   1ba58:	mov	r0, r5
   1ba5c:	add	sp, sp, #76	; 0x4c
   1ba60:	pop	{r4, r5, lr}
   1ba64:	b	114cc <__fprintf_chk@plt>
   1ba68:	mov	r2, #5
   1ba6c:	ldr	r1, [pc, #592]	; 1bcc4 <__assert_fail@plt+0xa6c0>
   1ba70:	mov	r0, #0
   1ba74:	bl	112f8 <dcgettext@plt>
   1ba78:	ldr	r2, [sp, #36]	; 0x24
   1ba7c:	ldr	r3, [sp, #32]
   1ba80:	str	r2, [sp, #88]	; 0x58
   1ba84:	mov	r1, #1
   1ba88:	mov	r2, r0
   1ba8c:	mov	r0, r5
   1ba90:	add	sp, sp, #76	; 0x4c
   1ba94:	pop	{r4, r5, lr}
   1ba98:	b	114cc <__fprintf_chk@plt>
   1ba9c:	mov	r2, #5
   1baa0:	ldr	r1, [pc, #544]	; 1bcc8 <__assert_fail@plt+0xa6c4>
   1baa4:	mov	r0, #0
   1baa8:	bl	112f8 <dcgettext@plt>
   1baac:	ldr	r1, [sp, #40]	; 0x28
   1bab0:	ldr	r2, [sp, #36]	; 0x24
   1bab4:	str	r1, [sp, #4]
   1bab8:	str	r2, [sp]
   1babc:	ldr	r3, [sp, #32]
   1bac0:	mov	r1, #1
   1bac4:	mov	r2, r0
   1bac8:	mov	r0, r5
   1bacc:	bl	114cc <__fprintf_chk@plt>
   1bad0:	b	1ba34 <__assert_fail@plt+0xa430>
   1bad4:	mov	r2, #5
   1bad8:	ldr	r1, [pc, #492]	; 1bccc <__assert_fail@plt+0xa6c8>
   1badc:	mov	r0, #0
   1bae0:	bl	112f8 <dcgettext@plt>
   1bae4:	ldr	r1, [sp, #40]	; 0x28
   1bae8:	ldr	ip, [sp, #44]	; 0x2c
   1baec:	ldr	r2, [sp, #36]	; 0x24
   1baf0:	ldr	r3, [sp, #32]
   1baf4:	stmib	sp, {r1, ip}
   1baf8:	str	r2, [sp]
   1bafc:	mov	r1, #1
   1bb00:	mov	r2, r0
   1bb04:	mov	r0, r5
   1bb08:	bl	114cc <__fprintf_chk@plt>
   1bb0c:	b	1ba34 <__assert_fail@plt+0xa430>
   1bb10:	mov	r2, #5
   1bb14:	ldr	r1, [pc, #436]	; 1bcd0 <__assert_fail@plt+0xa6cc>
   1bb18:	mov	r0, #0
   1bb1c:	bl	112f8 <dcgettext@plt>
   1bb20:	add	r1, sp, #40	; 0x28
   1bb24:	ldr	r2, [sp, #36]	; 0x24
   1bb28:	ldm	r1, {r1, ip, lr}
   1bb2c:	ldr	r3, [sp, #32]
   1bb30:	str	r2, [sp]
   1bb34:	stmib	sp, {r1, ip, lr}
   1bb38:	mov	r1, #1
   1bb3c:	mov	r2, r0
   1bb40:	mov	r0, r5
   1bb44:	bl	114cc <__fprintf_chk@plt>
   1bb48:	b	1ba34 <__assert_fail@plt+0xa430>
   1bb4c:	mov	r2, #5
   1bb50:	ldr	r1, [pc, #380]	; 1bcd4 <__assert_fail@plt+0xa6d0>
   1bb54:	mov	r0, #0
   1bb58:	bl	112f8 <dcgettext@plt>
   1bb5c:	add	r1, sp, #40	; 0x28
   1bb60:	ldr	r2, [sp, #36]	; 0x24
   1bb64:	ldm	r1, {r1, ip, lr}
   1bb68:	ldr	r4, [sp, #52]	; 0x34
   1bb6c:	str	r2, [sp]
   1bb70:	stmib	sp, {r1, ip, lr}
   1bb74:	mov	r1, #1
   1bb78:	ldr	r3, [sp, #32]
   1bb7c:	str	r4, [sp, #16]
   1bb80:	mov	r2, r0
   1bb84:	mov	r0, r5
   1bb88:	bl	114cc <__fprintf_chk@plt>
   1bb8c:	b	1ba34 <__assert_fail@plt+0xa430>
   1bb90:	mov	r2, #5
   1bb94:	ldr	r1, [pc, #316]	; 1bcd8 <__assert_fail@plt+0xa6d4>
   1bb98:	mov	r0, #0
   1bb9c:	bl	112f8 <dcgettext@plt>
   1bba0:	add	r1, sp, #40	; 0x28
   1bba4:	ldr	r2, [sp, #56]	; 0x38
   1bba8:	ldm	r1, {r1, ip, lr}
   1bbac:	ldr	r4, [sp, #52]	; 0x34
   1bbb0:	str	r2, [sp, #20]
   1bbb4:	ldr	r2, [sp, #36]	; 0x24
   1bbb8:	stmib	sp, {r1, ip, lr}
   1bbbc:	mov	r1, #1
   1bbc0:	str	r2, [sp]
   1bbc4:	ldr	r3, [sp, #32]
   1bbc8:	str	r4, [sp, #16]
   1bbcc:	mov	r2, r0
   1bbd0:	mov	r0, r5
   1bbd4:	bl	114cc <__fprintf_chk@plt>
   1bbd8:	b	1ba34 <__assert_fail@plt+0xa430>
   1bbdc:	mov	r2, #5
   1bbe0:	ldr	r1, [pc, #244]	; 1bcdc <__assert_fail@plt+0xa6d8>
   1bbe4:	mov	r0, #0
   1bbe8:	bl	112f8 <dcgettext@plt>
   1bbec:	ldr	r1, [sp, #60]	; 0x3c
   1bbf0:	ldr	r2, [sp, #56]	; 0x38
   1bbf4:	ldr	lr, [sp, #48]	; 0x30
   1bbf8:	ldr	ip, [sp, #44]	; 0x2c
   1bbfc:	str	r1, [sp, #24]
   1bc00:	ldr	r1, [sp, #40]	; 0x28
   1bc04:	ldr	r4, [sp, #52]	; 0x34
   1bc08:	str	r2, [sp, #20]
   1bc0c:	ldr	r2, [sp, #36]	; 0x24
   1bc10:	stmib	sp, {r1, ip, lr}
   1bc14:	mov	r1, #1
   1bc18:	str	r2, [sp]
   1bc1c:	ldr	r3, [sp, #32]
   1bc20:	str	r4, [sp, #16]
   1bc24:	mov	r2, r0
   1bc28:	mov	r0, r5
   1bc2c:	bl	114cc <__fprintf_chk@plt>
   1bc30:	b	1ba34 <__assert_fail@plt+0xa430>
   1bc34:	str	r3, [sp]
   1bc38:	mov	r1, #1
   1bc3c:	mov	r3, r2
   1bc40:	mov	r0, r5
   1bc44:	ldr	r2, [pc, #148]	; 1bce0 <__assert_fail@plt+0xa6dc>
   1bc48:	bl	114cc <__fprintf_chk@plt>
   1bc4c:	b	1b93c <__assert_fail@plt+0xa338>
   1bc50:	mov	r2, #5
   1bc54:	ldr	r1, [pc, #136]	; 1bce4 <__assert_fail@plt+0xa6e0>
   1bc58:	b	1b9e0 <__assert_fail@plt+0xa3dc>
   1bc5c:	mov	r4, r0
   1bc60:	b	1b91c <__assert_fail@plt+0xa318>
   1bc64:	mov	r4, #1
   1bc68:	b	1b91c <__assert_fail@plt+0xa318>
   1bc6c:	mov	r4, #2
   1bc70:	b	1b91c <__assert_fail@plt+0xa318>
   1bc74:	mov	r4, #3
   1bc78:	b	1b91c <__assert_fail@plt+0xa318>
   1bc7c:	mov	r4, #4
   1bc80:	b	1b91c <__assert_fail@plt+0xa318>
   1bc84:	mov	r4, #5
   1bc88:	b	1b91c <__assert_fail@plt+0xa318>
   1bc8c:	mov	r4, #6
   1bc90:	b	1b91c <__assert_fail@plt+0xa318>
   1bc94:	mov	r4, #7
   1bc98:	b	1b91c <__assert_fail@plt+0xa318>
   1bc9c:	mov	r4, #8
   1bca0:	b	1b91c <__assert_fail@plt+0xa318>
   1bca4:			; <UNDEFINED> instruction: 0x0001e9b8
   1bca8:	andeq	lr, r1, ip, asr #19
   1bcac:	andeq	r0, r0, r6, ror #15
   1bcb0:	andeq	lr, r1, r4, lsr #25
   1bcb4:	ldrdeq	lr, [r1], -r0
   1bcb8:	andeq	lr, r1, ip, ror sl
   1bcbc:	andeq	lr, r1, ip, lsr #23
   1bcc0:	andeq	lr, r1, r0, lsr #21
   1bcc4:			; <UNDEFINED> instruction: 0x0001eab0
   1bcc8:	andeq	lr, r1, r8, asr #21
   1bccc:	andeq	lr, r1, r4, ror #21
   1bcd0:	andeq	lr, r1, r4, lsl #22
   1bcd4:	andeq	lr, r1, r8, lsr #22
   1bcd8:	andeq	lr, r1, r0, asr fp
   1bcdc:	andeq	lr, r1, ip, ror fp
   1bce0:	andeq	lr, r1, r4, asr #19
   1bce4:	andeq	lr, r1, r0, ror #23
   1bce8:	push	{r3}		; (str r3, [sp, #-4]!)
   1bcec:	push	{lr}		; (str lr, [sp, #-4]!)
   1bcf0:	sub	sp, sp, #56	; 0x38
   1bcf4:	add	r3, sp, #64	; 0x40
   1bcf8:	ldr	ip, [sp, #64]	; 0x40
   1bcfc:	str	r3, [sp, #12]
   1bd00:	cmp	ip, #0
   1bd04:	str	ip, [sp, #16]
   1bd08:	beq	1bda0 <__assert_fail@plt+0xa79c>
   1bd0c:	ldr	ip, [sp, #68]	; 0x44
   1bd10:	cmp	ip, #0
   1bd14:	str	ip, [sp, #20]
   1bd18:	beq	1bdc0 <__assert_fail@plt+0xa7bc>
   1bd1c:	ldr	ip, [sp, #72]	; 0x48
   1bd20:	cmp	ip, #0
   1bd24:	str	ip, [sp, #24]
   1bd28:	beq	1bdc8 <__assert_fail@plt+0xa7c4>
   1bd2c:	ldr	ip, [sp, #76]	; 0x4c
   1bd30:	cmp	ip, #0
   1bd34:	str	ip, [sp, #28]
   1bd38:	beq	1bdd0 <__assert_fail@plt+0xa7cc>
   1bd3c:	ldr	ip, [sp, #80]	; 0x50
   1bd40:	cmp	ip, #0
   1bd44:	str	ip, [sp, #32]
   1bd48:	beq	1bdd8 <__assert_fail@plt+0xa7d4>
   1bd4c:	ldr	ip, [sp, #84]	; 0x54
   1bd50:	cmp	ip, #0
   1bd54:	str	ip, [sp, #36]	; 0x24
   1bd58:	beq	1bde0 <__assert_fail@plt+0xa7dc>
   1bd5c:	ldr	ip, [sp, #88]	; 0x58
   1bd60:	cmp	ip, #0
   1bd64:	str	ip, [sp, #40]	; 0x28
   1bd68:	beq	1bde8 <__assert_fail@plt+0xa7e4>
   1bd6c:	ldr	ip, [sp, #92]	; 0x5c
   1bd70:	cmp	ip, #0
   1bd74:	str	ip, [sp, #44]	; 0x2c
   1bd78:	beq	1bdf0 <__assert_fail@plt+0xa7ec>
   1bd7c:	ldr	ip, [sp, #96]	; 0x60
   1bd80:	cmp	ip, #0
   1bd84:	str	ip, [sp, #48]	; 0x30
   1bd88:	beq	1bdf8 <__assert_fail@plt+0xa7f4>
   1bd8c:	ldr	ip, [sp, #100]	; 0x64
   1bd90:	cmp	ip, #0
   1bd94:	str	ip, [sp, #52]	; 0x34
   1bd98:	movne	ip, #10
   1bd9c:	moveq	ip, #9
   1bda0:	add	r3, sp, #16
   1bda4:	stm	sp, {r3, ip}
   1bda8:	ldr	r3, [sp, #60]	; 0x3c
   1bdac:	bl	1b494 <__assert_fail@plt+0x9e90>
   1bdb0:	add	sp, sp, #56	; 0x38
   1bdb4:	pop	{lr}		; (ldr lr, [sp], #4)
   1bdb8:	add	sp, sp, #4
   1bdbc:	bx	lr
   1bdc0:	mov	ip, #1
   1bdc4:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bdc8:	mov	ip, #2
   1bdcc:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bdd0:	mov	ip, #3
   1bdd4:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bdd8:	mov	ip, #4
   1bddc:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bde0:	mov	ip, #5
   1bde4:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bde8:	mov	ip, #6
   1bdec:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bdf0:	mov	ip, #7
   1bdf4:	b	1bda0 <__assert_fail@plt+0xa79c>
   1bdf8:	mov	ip, #8
   1bdfc:	b	1bda0 <__assert_fail@plt+0xa79c>
   1be00:	ldr	r3, [pc, #116]	; 1be7c <__assert_fail@plt+0xa878>
   1be04:	push	{r4, lr}
   1be08:	mov	r0, #10
   1be0c:	ldr	r1, [r3]
   1be10:	bl	112e0 <fputc_unlocked@plt>
   1be14:	mov	r2, #5
   1be18:	ldr	r1, [pc, #96]	; 1be80 <__assert_fail@plt+0xa87c>
   1be1c:	mov	r0, #0
   1be20:	bl	112f8 <dcgettext@plt>
   1be24:	ldr	r2, [pc, #88]	; 1be84 <__assert_fail@plt+0xa880>
   1be28:	mov	r1, r0
   1be2c:	mov	r0, #1
   1be30:	bl	114b4 <__printf_chk@plt>
   1be34:	mov	r2, #5
   1be38:	ldr	r1, [pc, #72]	; 1be88 <__assert_fail@plt+0xa884>
   1be3c:	mov	r0, #0
   1be40:	bl	112f8 <dcgettext@plt>
   1be44:	ldr	r3, [pc, #64]	; 1be8c <__assert_fail@plt+0xa888>
   1be48:	ldr	r2, [pc, #64]	; 1be90 <__assert_fail@plt+0xa88c>
   1be4c:	mov	r1, r0
   1be50:	mov	r0, #1
   1be54:	bl	114b4 <__printf_chk@plt>
   1be58:	mov	r2, #5
   1be5c:	ldr	r1, [pc, #48]	; 1be94 <__assert_fail@plt+0xa890>
   1be60:	mov	r0, #0
   1be64:	bl	112f8 <dcgettext@plt>
   1be68:	ldr	r2, [pc, #40]	; 1be98 <__assert_fail@plt+0xa894>
   1be6c:	pop	{r4, lr}
   1be70:	mov	r1, r0
   1be74:	mov	r0, #1
   1be78:	b	114b4 <__printf_chk@plt>
   1be7c:	andeq	pc, r2, r4, asr #3
   1be80:	andeq	lr, r1, ip, lsl ip
   1be84:	andeq	lr, r1, r0, lsr ip
   1be88:	andeq	lr, r1, r8, asr #24
   1be8c:	andeq	lr, r1, ip, lsl r2
   1be90:	andeq	lr, r1, r4, asr #4
   1be94:	andeq	lr, r1, ip, asr ip
   1be98:	andeq	lr, r1, r4, lsl #25
   1be9c:	push	{r4, r5, r6, lr}
   1bea0:	mov	r6, r0
   1bea4:	mov	r5, r1
   1bea8:	mov	r4, r2
   1beac:	bl	1ce28 <__assert_fail@plt+0xb824>
   1beb0:	cmp	r0, #0
   1beb4:	popne	{r4, r5, r6, pc}
   1beb8:	cmp	r6, #0
   1bebc:	beq	1becc <__assert_fail@plt+0xa8c8>
   1bec0:	cmp	r5, #0
   1bec4:	cmpne	r4, #0
   1bec8:	popeq	{r4, r5, r6, pc}
   1becc:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bed0:	push	{r4, lr}
   1bed4:	bl	1c620 <__assert_fail@plt+0xb01c>
   1bed8:	cmp	r0, #0
   1bedc:	popne	{r4, pc}
   1bee0:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bee4:	push	{r4, lr}
   1bee8:	bl	1c620 <__assert_fail@plt+0xb01c>
   1beec:	cmp	r0, #0
   1bef0:	popne	{r4, pc}
   1bef4:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bef8:	push	{r4, lr}
   1befc:	bl	1c620 <__assert_fail@plt+0xb01c>
   1bf00:	cmp	r0, #0
   1bf04:	popne	{r4, pc}
   1bf08:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bf0c:	push	{r4, r5, r6, lr}
   1bf10:	mov	r5, r0
   1bf14:	mov	r4, r1
   1bf18:	bl	1c64c <__assert_fail@plt+0xb048>
   1bf1c:	cmp	r0, #0
   1bf20:	popne	{r4, r5, r6, pc}
   1bf24:	adds	r4, r4, #0
   1bf28:	movne	r4, #1
   1bf2c:	cmp	r5, #0
   1bf30:	orreq	r4, r4, #1
   1bf34:	cmp	r4, #0
   1bf38:	popeq	{r4, r5, r6, pc}
   1bf3c:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bf40:	push	{r4, lr}
   1bf44:	cmp	r1, #0
   1bf48:	orreq	r1, r1, #1
   1bf4c:	bl	1c64c <__assert_fail@plt+0xb048>
   1bf50:	cmp	r0, #0
   1bf54:	popne	{r4, pc}
   1bf58:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bf5c:	push	{r4, r5, r6, lr}
   1bf60:	mov	r6, r0
   1bf64:	mov	r5, r1
   1bf68:	mov	r4, r2
   1bf6c:	bl	1ce28 <__assert_fail@plt+0xb824>
   1bf70:	cmp	r0, #0
   1bf74:	popne	{r4, r5, r6, pc}
   1bf78:	cmp	r6, #0
   1bf7c:	beq	1bf8c <__assert_fail@plt+0xa988>
   1bf80:	cmp	r5, #0
   1bf84:	cmpne	r4, #0
   1bf88:	popeq	{r4, r5, r6, pc}
   1bf8c:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bf90:	cmp	r2, #0
   1bf94:	cmpne	r1, #0
   1bf98:	moveq	r2, #1
   1bf9c:	moveq	r1, r2
   1bfa0:	push	{r4, lr}
   1bfa4:	bl	1ce28 <__assert_fail@plt+0xb824>
   1bfa8:	cmp	r0, #0
   1bfac:	popne	{r4, pc}
   1bfb0:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bfb4:	push	{r4, lr}
   1bfb8:	mov	r2, r1
   1bfbc:	mov	r1, r0
   1bfc0:	mov	r0, #0
   1bfc4:	bl	1ce28 <__assert_fail@plt+0xb824>
   1bfc8:	cmp	r0, #0
   1bfcc:	popne	{r4, pc}
   1bfd0:	bl	1c518 <__assert_fail@plt+0xaf14>
   1bfd4:	cmp	r1, #0
   1bfd8:	cmpne	r0, #0
   1bfdc:	moveq	r2, #1
   1bfe0:	movne	r2, r1
   1bfe4:	moveq	r1, r2
   1bfe8:	movne	r1, r0
   1bfec:	push	{r4, lr}
   1bff0:	mov	r0, #0
   1bff4:	bl	1ce28 <__assert_fail@plt+0xb824>
   1bff8:	cmp	r0, #0
   1bffc:	popne	{r4, pc}
   1c000:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c004:	cmp	r0, #0
   1c008:	push	{r4, r5, r6, lr}
   1c00c:	mov	r5, r1
   1c010:	ldr	r4, [r1]
   1c014:	beq	1c050 <__assert_fail@plt+0xaa4c>
   1c018:	lsr	r2, r4, #1
   1c01c:	add	r3, r2, #1
   1c020:	mvn	r3, r3
   1c024:	cmp	r4, r3
   1c028:	bhi	1c06c <__assert_fail@plt+0xaa68>
   1c02c:	add	r4, r4, #1
   1c030:	add	r4, r4, r2
   1c034:	mov	r1, r4
   1c038:	mov	r2, #1
   1c03c:	bl	1ce28 <__assert_fail@plt+0xb824>
   1c040:	cmp	r0, #0
   1c044:	beq	1c070 <__assert_fail@plt+0xaa6c>
   1c048:	str	r4, [r5]
   1c04c:	pop	{r4, r5, r6, pc}
   1c050:	cmp	r4, #0
   1c054:	moveq	r4, #64	; 0x40
   1c058:	mov	r1, r4
   1c05c:	mov	r2, #1
   1c060:	bl	1ce28 <__assert_fail@plt+0xb824>
   1c064:	cmp	r0, #0
   1c068:	bne	1c048 <__assert_fail@plt+0xaa44>
   1c06c:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c070:	cmp	r4, #0
   1c074:	bne	1c06c <__assert_fail@plt+0xaa68>
   1c078:	str	r4, [r5]
   1c07c:	pop	{r4, r5, r6, pc}
   1c080:	cmp	r0, #0
   1c084:	push	{r4, r5, r6, lr}
   1c088:	mov	r5, r1
   1c08c:	ldr	r4, [r1]
   1c090:	mov	r6, r2
   1c094:	beq	1c0d8 <__assert_fail@plt+0xaad4>
   1c098:	lsr	r1, r4, #1
   1c09c:	add	r3, r1, #1
   1c0a0:	mvn	r3, r3
   1c0a4:	cmp	r4, r3
   1c0a8:	bhi	1c110 <__assert_fail@plt+0xab0c>
   1c0ac:	add	r4, r4, #1
   1c0b0:	add	r4, r4, r1
   1c0b4:	mov	r1, r4
   1c0b8:	bl	1ce28 <__assert_fail@plt+0xb824>
   1c0bc:	cmp	r0, #0
   1c0c0:	bne	1c0d0 <__assert_fail@plt+0xaacc>
   1c0c4:	cmp	r4, #0
   1c0c8:	cmpne	r6, #0
   1c0cc:	bne	1c110 <__assert_fail@plt+0xab0c>
   1c0d0:	str	r4, [r5]
   1c0d4:	pop	{r4, r5, r6, pc}
   1c0d8:	cmp	r4, #0
   1c0dc:	bne	1c0f8 <__assert_fail@plt+0xaaf4>
   1c0e0:	mov	r1, r2
   1c0e4:	mov	r0, #64	; 0x40
   1c0e8:	bl	1d334 <__assert_fail@plt+0xbd30>
   1c0ec:	cmp	r0, #0
   1c0f0:	movne	r4, r0
   1c0f4:	addeq	r4, r0, #1
   1c0f8:	mov	r2, r6
   1c0fc:	mov	r1, r4
   1c100:	mov	r0, #0
   1c104:	bl	1ce28 <__assert_fail@plt+0xb824>
   1c108:	cmp	r0, #0
   1c10c:	bne	1c0d0 <__assert_fail@plt+0xaacc>
   1c110:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c118:	sub	sp, sp, #12
   1c11c:	ldr	r6, [r1]
   1c120:	mov	r8, r1
   1c124:	mov	r9, r0
   1c128:	asrs	r4, r6, #1
   1c12c:	mov	sl, r2
   1c130:	mov	fp, r3
   1c134:	ldr	r7, [sp, #48]	; 0x30
   1c138:	bmi	1c2b4 <__assert_fail@plt+0xacb0>
   1c13c:	mvn	r1, #-2147483648	; 0x80000000
   1c140:	sub	r1, r1, r4
   1c144:	cmp	r6, r1
   1c148:	movle	r1, #0
   1c14c:	movgt	r1, #1
   1c150:	mvn	r3, fp
   1c154:	cmp	r1, #0
   1c158:	addeq	r4, r4, r6
   1c15c:	mvnne	r4, #-2147483648	; 0x80000000
   1c160:	lsr	r3, r3, #31
   1c164:	cmp	fp, r4
   1c168:	movge	r2, #0
   1c16c:	andlt	r2, r3, #1
   1c170:	cmp	r2, #0
   1c174:	beq	1c264 <__assert_fail@plt+0xac60>
   1c178:	cmp	r7, #0
   1c17c:	blt	1c34c <__assert_fail@plt+0xad48>
   1c180:	bne	1c344 <__assert_fail@plt+0xad40>
   1c184:	mov	r5, #64	; 0x40
   1c188:	mov	r1, r7
   1c18c:	mov	r0, r5
   1c190:	str	r3, [sp, #4]
   1c194:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c198:	mov	r1, r7
   1c19c:	mov	r4, r0
   1c1a0:	mov	r0, r5
   1c1a4:	bl	1d760 <__assert_fail@plt+0xc15c>
   1c1a8:	ldr	r3, [sp, #4]
   1c1ac:	sub	r5, r5, r1
   1c1b0:	cmp	r9, #0
   1c1b4:	sub	r2, r4, r6
   1c1b8:	streq	r9, [r8]
   1c1bc:	cmp	r2, sl
   1c1c0:	bge	1c244 <__assert_fail@plt+0xac40>
   1c1c4:	cmp	sl, #0
   1c1c8:	blt	1c2e4 <__assert_fail@plt+0xace0>
   1c1cc:	cmp	r6, #0
   1c1d0:	blt	1c1f0 <__assert_fail@plt+0xabec>
   1c1d4:	mvn	r2, #-2147483648	; 0x80000000
   1c1d8:	sub	r2, r2, sl
   1c1dc:	cmp	r6, r2
   1c1e0:	movle	r2, #0
   1c1e4:	movgt	r2, #1
   1c1e8:	cmp	r2, #0
   1c1ec:	bne	1c2e0 <__assert_fail@plt+0xacdc>
   1c1f0:	add	r6, r6, sl
   1c1f4:	cmp	fp, r6
   1c1f8:	movge	r3, #0
   1c1fc:	andlt	r3, r3, #1
   1c200:	cmp	r3, #0
   1c204:	mov	r4, r6
   1c208:	bne	1c2e0 <__assert_fail@plt+0xacdc>
   1c20c:	cmp	r7, #0
   1c210:	blt	1c2f8 <__assert_fail@plt+0xacf4>
   1c214:	beq	1c240 <__assert_fail@plt+0xac3c>
   1c218:	cmp	r6, #0
   1c21c:	blt	1c39c <__assert_fail@plt+0xad98>
   1c220:	mov	r1, r7
   1c224:	mvn	r0, #-2147483648	; 0x80000000
   1c228:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c22c:	cmp	r6, r0
   1c230:	movle	r0, #0
   1c234:	movgt	r0, #1
   1c238:	cmp	r0, #0
   1c23c:	bne	1c2e0 <__assert_fail@plt+0xacdc>
   1c240:	mul	r5, r6, r7
   1c244:	mov	r1, r5
   1c248:	mov	r0, r9
   1c24c:	bl	1c64c <__assert_fail@plt+0xb048>
   1c250:	cmp	r0, #0
   1c254:	beq	1c2c8 <__assert_fail@plt+0xacc4>
   1c258:	str	r4, [r8]
   1c25c:	add	sp, sp, #12
   1c260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c264:	cmp	r7, #0
   1c268:	blt	1c324 <__assert_fail@plt+0xad20>
   1c26c:	beq	1c184 <__assert_fail@plt+0xab80>
   1c270:	cmp	r4, #0
   1c274:	blt	1c354 <__assert_fail@plt+0xad50>
   1c278:	mov	r1, r7
   1c27c:	mvn	r0, #-2147483648	; 0x80000000
   1c280:	str	r3, [sp, #4]
   1c284:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c288:	ldr	r3, [sp, #4]
   1c28c:	cmp	r0, r4
   1c290:	movge	r0, #0
   1c294:	movlt	r0, #1
   1c298:	cmp	r0, #0
   1c29c:	mvnne	r5, #-2147483648	; 0x80000000
   1c2a0:	bne	1c188 <__assert_fail@plt+0xab84>
   1c2a4:	mul	r5, r7, r4
   1c2a8:	cmp	r5, #63	; 0x3f
   1c2ac:	bgt	1c1b0 <__assert_fail@plt+0xabac>
   1c2b0:	b	1c184 <__assert_fail@plt+0xab80>
   1c2b4:	rsb	r1, r4, #-2147483648	; 0x80000000
   1c2b8:	cmp	r6, r1
   1c2bc:	movge	r1, #0
   1c2c0:	movlt	r1, #1
   1c2c4:	b	1c150 <__assert_fail@plt+0xab4c>
   1c2c8:	adds	r5, r5, #0
   1c2cc:	movne	r5, #1
   1c2d0:	cmp	r9, #0
   1c2d4:	orreq	r5, r5, #1
   1c2d8:	cmp	r5, #0
   1c2dc:	beq	1c258 <__assert_fail@plt+0xac54>
   1c2e0:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c2e4:	rsb	r2, sl, #-2147483648	; 0x80000000
   1c2e8:	cmp	r6, r2
   1c2ec:	movge	r2, #0
   1c2f0:	movlt	r2, #1
   1c2f4:	b	1c1e8 <__assert_fail@plt+0xabe4>
   1c2f8:	cmp	r6, #0
   1c2fc:	blt	1c380 <__assert_fail@plt+0xad7c>
   1c300:	cmn	r7, #1
   1c304:	beq	1c240 <__assert_fail@plt+0xac3c>
   1c308:	mov	r1, r7
   1c30c:	mov	r0, #-2147483648	; 0x80000000
   1c310:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c314:	cmp	r6, r0
   1c318:	movle	r0, #0
   1c31c:	movgt	r0, #1
   1c320:	b	1c238 <__assert_fail@plt+0xac34>
   1c324:	cmp	r4, #0
   1c328:	blt	1c3c0 <__assert_fail@plt+0xadbc>
   1c32c:	cmn	r7, #1
   1c330:	beq	1c2a4 <__assert_fail@plt+0xaca0>
   1c334:	str	r3, [sp, #4]
   1c338:	mov	r1, r7
   1c33c:	mov	r0, #-2147483648	; 0x80000000
   1c340:	b	1c284 <__assert_fail@plt+0xac80>
   1c344:	mov	r4, fp
   1c348:	b	1c278 <__assert_fail@plt+0xac74>
   1c34c:	mov	r4, fp
   1c350:	b	1c32c <__assert_fail@plt+0xad28>
   1c354:	cmn	r4, #1
   1c358:	beq	1c2a4 <__assert_fail@plt+0xaca0>
   1c35c:	mov	r1, r4
   1c360:	mov	r0, #-2147483648	; 0x80000000
   1c364:	str	r3, [sp, #4]
   1c368:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c36c:	ldr	r3, [sp, #4]
   1c370:	cmp	r7, r0
   1c374:	movle	r0, #0
   1c378:	movgt	r0, #1
   1c37c:	b	1c298 <__assert_fail@plt+0xac94>
   1c380:	mov	r1, r7
   1c384:	mvn	r0, #-2147483648	; 0x80000000
   1c388:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c38c:	cmp	r6, r0
   1c390:	movge	r0, #0
   1c394:	movlt	r0, #1
   1c398:	b	1c238 <__assert_fail@plt+0xac34>
   1c39c:	cmn	r6, #1
   1c3a0:	beq	1c240 <__assert_fail@plt+0xac3c>
   1c3a4:	mov	r1, r6
   1c3a8:	mov	r0, #-2147483648	; 0x80000000
   1c3ac:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c3b0:	cmp	r7, r0
   1c3b4:	movle	r0, #0
   1c3b8:	movgt	r0, #1
   1c3bc:	b	1c238 <__assert_fail@plt+0xac34>
   1c3c0:	mov	r1, r7
   1c3c4:	mvn	r0, #-2147483648	; 0x80000000
   1c3c8:	str	r3, [sp, #4]
   1c3cc:	bl	1d540 <__assert_fail@plt+0xbf3c>
   1c3d0:	ldr	r3, [sp, #4]
   1c3d4:	cmp	r0, r4
   1c3d8:	movle	r0, #0
   1c3dc:	movgt	r0, #1
   1c3e0:	b	1c298 <__assert_fail@plt+0xac94>
   1c3e4:	push	{r4, lr}
   1c3e8:	mov	r1, #1
   1c3ec:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   1c3f0:	cmp	r0, #0
   1c3f4:	popne	{r4, pc}
   1c3f8:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c3fc:	push	{r4, lr}
   1c400:	mov	r1, #1
   1c404:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   1c408:	cmp	r0, #0
   1c40c:	popne	{r4, pc}
   1c410:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c414:	push	{r4, lr}
   1c418:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   1c41c:	cmp	r0, #0
   1c420:	popne	{r4, pc}
   1c424:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c428:	push	{r4, lr}
   1c42c:	bl	1c5d8 <__assert_fail@plt+0xafd4>
   1c430:	cmp	r0, #0
   1c434:	popne	{r4, pc}
   1c438:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c43c:	push	{r4, r5, r6, lr}
   1c440:	mov	r6, r0
   1c444:	mov	r0, r1
   1c448:	mov	r4, r1
   1c44c:	bl	1c620 <__assert_fail@plt+0xb01c>
   1c450:	subs	r5, r0, #0
   1c454:	beq	1c46c <__assert_fail@plt+0xae68>
   1c458:	mov	r2, r4
   1c45c:	mov	r1, r6
   1c460:	bl	112b0 <memcpy@plt>
   1c464:	mov	r0, r5
   1c468:	pop	{r4, r5, r6, pc}
   1c46c:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c470:	push	{r4, r5, r6, lr}
   1c474:	mov	r6, r0
   1c478:	mov	r0, r1
   1c47c:	mov	r4, r1
   1c480:	bl	1c620 <__assert_fail@plt+0xb01c>
   1c484:	subs	r5, r0, #0
   1c488:	beq	1c4a0 <__assert_fail@plt+0xae9c>
   1c48c:	mov	r2, r4
   1c490:	mov	r1, r6
   1c494:	bl	112b0 <memcpy@plt>
   1c498:	mov	r0, r5
   1c49c:	pop	{r4, r5, r6, pc}
   1c4a0:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c4a4:	push	{r4, r5, r6, lr}
   1c4a8:	mov	r6, r0
   1c4ac:	add	r0, r1, #1
   1c4b0:	mov	r4, r1
   1c4b4:	bl	1c620 <__assert_fail@plt+0xb01c>
   1c4b8:	subs	r5, r0, #0
   1c4bc:	beq	1c4dc <__assert_fail@plt+0xaed8>
   1c4c0:	mov	r3, #0
   1c4c4:	mov	r1, r6
   1c4c8:	strb	r3, [r5, r4]
   1c4cc:	mov	r2, r4
   1c4d0:	bl	112b0 <memcpy@plt>
   1c4d4:	mov	r0, r5
   1c4d8:	pop	{r4, r5, r6, pc}
   1c4dc:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c4e0:	push	{r4, r5, r6, lr}
   1c4e4:	mov	r6, r0
   1c4e8:	bl	11460 <strlen@plt>
   1c4ec:	add	r4, r0, #1
   1c4f0:	mov	r0, r4
   1c4f4:	bl	1c620 <__assert_fail@plt+0xb01c>
   1c4f8:	subs	r5, r0, #0
   1c4fc:	beq	1c514 <__assert_fail@plt+0xaf10>
   1c500:	mov	r2, r4
   1c504:	mov	r1, r6
   1c508:	bl	112b0 <memcpy@plt>
   1c50c:	mov	r0, r5
   1c510:	pop	{r4, r5, r6, pc}
   1c514:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c518:	ldr	r3, [pc, #44]	; 1c54c <__assert_fail@plt+0xaf48>
   1c51c:	push	{r4, lr}
   1c520:	mov	r2, #5
   1c524:	ldr	r1, [pc, #36]	; 1c550 <__assert_fail@plt+0xaf4c>
   1c528:	mov	r0, #0
   1c52c:	ldr	r4, [r3]
   1c530:	bl	112f8 <dcgettext@plt>
   1c534:	ldr	r2, [pc, #24]	; 1c554 <__assert_fail@plt+0xaf50>
   1c538:	mov	r1, #0
   1c53c:	mov	r3, r0
   1c540:	mov	r0, r4
   1c544:	bl	113ac <error@plt>
   1c548:	bl	115c8 <abort@plt>
   1c54c:	andeq	pc, r2, r8, ror #2
   1c550:	ldrdeq	lr, [r1], -r4
   1c554:	ldrdeq	lr, [r1], -r8
   1c558:	push	{r4, lr}
   1c55c:	orr	r1, r1, #512	; 0x200
   1c560:	bl	13e20 <__assert_fail@plt+0x281c>
   1c564:	cmp	r0, #0
   1c568:	popne	{r4, pc}
   1c56c:	bl	11484 <__errno_location@plt>
   1c570:	ldr	r3, [r0]
   1c574:	cmp	r3, #22
   1c578:	beq	1c580 <__assert_fail@plt+0xaf7c>
   1c57c:	bl	1c518 <__assert_fail@plt+0xaf14>
   1c580:	ldr	r3, [pc, #12]	; 1c594 <__assert_fail@plt+0xaf90>
   1c584:	mov	r2, #41	; 0x29
   1c588:	ldr	r1, [pc, #8]	; 1c598 <__assert_fail@plt+0xaf94>
   1c58c:	ldr	r0, [pc, #8]	; 1c59c <__assert_fail@plt+0xaf98>
   1c590:	bl	11604 <__assert_fail@plt>
   1c594:	andeq	lr, r1, r8, ror #25
   1c598:	strdeq	lr, [r1], -r4
   1c59c:	andeq	lr, r1, r0, lsl #26
   1c5a0:	ldr	r3, [r0, #48]	; 0x30
   1c5a4:	and	r3, r3, #17
   1c5a8:	cmp	r3, #16
   1c5ac:	beq	1c5d0 <__assert_fail@plt+0xafcc>
   1c5b0:	cmp	r3, #17
   1c5b4:	beq	1c5c0 <__assert_fail@plt+0xafbc>
   1c5b8:	mov	r0, #0
   1c5bc:	bx	lr
   1c5c0:	ldr	r0, [r1, #48]	; 0x30
   1c5c4:	adds	r0, r0, #0
   1c5c8:	movne	r0, #1
   1c5cc:	bx	lr
   1c5d0:	mov	r0, #1
   1c5d4:	bx	lr
   1c5d8:	cmp	r1, #0
   1c5dc:	cmpne	r0, #0
   1c5e0:	moveq	r1, #1
   1c5e4:	moveq	r0, r1
   1c5e8:	umull	r2, r3, r0, r1
   1c5ec:	adds	r3, r3, #0
   1c5f0:	movne	r3, #1
   1c5f4:	cmp	r2, #0
   1c5f8:	blt	1c608 <__assert_fail@plt+0xb004>
   1c5fc:	cmp	r3, #0
   1c600:	bne	1c608 <__assert_fail@plt+0xb004>
   1c604:	b	11238 <calloc@plt>
   1c608:	push	{r4, lr}
   1c60c:	bl	11484 <__errno_location@plt>
   1c610:	mov	r3, #12
   1c614:	str	r3, [r0]
   1c618:	mov	r0, #0
   1c61c:	pop	{r4, pc}
   1c620:	cmp	r0, #0
   1c624:	moveq	r0, #1
   1c628:	cmp	r0, #0
   1c62c:	blt	1c634 <__assert_fail@plt+0xb030>
   1c630:	b	113dc <malloc@plt>
   1c634:	push	{r4, lr}
   1c638:	bl	11484 <__errno_location@plt>
   1c63c:	mov	r3, #12
   1c640:	str	r3, [r0]
   1c644:	mov	r0, #0
   1c648:	pop	{r4, pc}
   1c64c:	cmp	r0, #0
   1c650:	beq	1c674 <__assert_fail@plt+0xb070>
   1c654:	cmp	r1, #0
   1c658:	push	{lr}		; (str lr, [sp, #-4]!)
   1c65c:	sub	sp, sp, #12
   1c660:	beq	1c67c <__assert_fail@plt+0xb078>
   1c664:	blt	1c694 <__assert_fail@plt+0xb090>
   1c668:	add	sp, sp, #12
   1c66c:	pop	{lr}		; (ldr lr, [sp], #4)
   1c670:	b	11310 <realloc@plt>
   1c674:	mov	r0, r1
   1c678:	b	1c620 <__assert_fail@plt+0xb01c>
   1c67c:	str	r1, [sp, #4]
   1c680:	bl	1cc30 <__assert_fail@plt+0xb62c>
   1c684:	ldr	r3, [sp, #4]
   1c688:	mov	r0, r3
   1c68c:	add	sp, sp, #12
   1c690:	pop	{pc}		; (ldr pc, [sp], #4)
   1c694:	bl	11484 <__errno_location@plt>
   1c698:	mov	r2, #12
   1c69c:	mov	r3, #0
   1c6a0:	str	r2, [r0]
   1c6a4:	b	1c688 <__assert_fail@plt+0xb084>
   1c6a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c6ac:	mov	r4, r0
   1c6b0:	ldrb	r3, [r2]
   1c6b4:	sub	sp, sp, #44	; 0x2c
   1c6b8:	cmp	r3, #0
   1c6bc:	strbeq	r3, [r0]
   1c6c0:	beq	1c720 <__assert_fail@plt+0xb11c>
   1c6c4:	ldr	r8, [pc, #216]	; 1c7a4 <__assert_fail@plt+0xb1a0>
   1c6c8:	mov	r5, r2
   1c6cc:	mov	r7, r1
   1c6d0:	ldr	r6, [r8]
   1c6d4:	cmp	r6, #0
   1c6d8:	beq	1c73c <__assert_fail@plt+0xb138>
   1c6dc:	cmp	r6, #0
   1c6e0:	blt	1c734 <__assert_fail@plt+0xb130>
   1c6e4:	mov	r0, r5
   1c6e8:	bl	11460 <strlen@plt>
   1c6ec:	add	r0, r0, #27
   1c6f0:	cmp	r0, #4032	; 0xfc0
   1c6f4:	bhi	1c728 <__assert_fail@plt+0xb124>
   1c6f8:	ldr	r3, [pc, #168]	; 1c7a8 <__assert_fail@plt+0xb1a4>
   1c6fc:	mvn	r2, #0
   1c700:	mov	r1, #1
   1c704:	str	r7, [sp]
   1c708:	mov	r0, r4
   1c70c:	bl	11490 <__sprintf_chk@plt>
   1c710:	mov	r1, r5
   1c714:	add	r0, r4, r0
   1c718:	bl	11388 <strcpy@plt>
   1c71c:	mov	r0, r4
   1c720:	add	sp, sp, #44	; 0x2c
   1c724:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c728:	bl	1c620 <__assert_fail@plt+0xb01c>
   1c72c:	subs	r4, r0, #0
   1c730:	bne	1c6f8 <__assert_fail@plt+0xb0f4>
   1c734:	mov	r0, #0
   1c738:	b	1c720 <__assert_fail@plt+0xb11c>
   1c73c:	ldr	r1, [pc, #104]	; 1c7ac <__assert_fail@plt+0xb1a8>
   1c740:	ldr	r0, [pc, #104]	; 1c7b0 <__assert_fail@plt+0xb1ac>
   1c744:	bl	113c4 <open64@plt>
   1c748:	subs	r9, r0, #0
   1c74c:	blt	1c794 <__assert_fail@plt+0xb190>
   1c750:	ldr	r3, [pc, #92]	; 1c7b4 <__assert_fail@plt+0xb1b0>
   1c754:	mov	r2, #32
   1c758:	mov	r1, #1
   1c75c:	str	r9, [sp]
   1c760:	add	r0, sp, #8
   1c764:	bl	11490 <__sprintf_chk@plt>
   1c768:	mov	r1, r6
   1c76c:	add	r0, sp, #8
   1c770:	bl	114f0 <access@plt>
   1c774:	cmp	r0, #0
   1c778:	moveq	r3, #1
   1c77c:	mvnne	r3, #0
   1c780:	mov	r0, r9
   1c784:	str	r3, [r8]
   1c788:	bl	115d4 <close@plt>
   1c78c:	ldr	r6, [r8]
   1c790:	b	1c6dc <__assert_fail@plt+0xb0d8>
   1c794:	mvn	r3, #0
   1c798:	mov	r0, r6
   1c79c:	str	r3, [r8]
   1c7a0:	b	1c720 <__assert_fail@plt+0xb11c>
   1c7a4:	andeq	pc, r2, r0, asr #6
   1c7a8:	andeq	lr, r1, r8, lsr sp
   1c7ac:	andeq	r4, r8, r0, lsl #18
   1c7b0:	andeq	lr, r1, r0, lsl sp
   1c7b4:	andeq	lr, r1, r0, lsr #26
   1c7b8:	push	{r4, r5, r6, lr}
   1c7bc:	mov	r4, r0
   1c7c0:	bl	11394 <__fpending@plt>
   1c7c4:	ldr	r5, [r4]
   1c7c8:	and	r5, r5, #32
   1c7cc:	mov	r6, r0
   1c7d0:	mov	r0, r4
   1c7d4:	bl	1c924 <__assert_fail@plt+0xb320>
   1c7d8:	cmp	r5, #0
   1c7dc:	mov	r4, r0
   1c7e0:	bne	1c800 <__assert_fail@plt+0xb1fc>
   1c7e4:	cmp	r0, #0
   1c7e8:	beq	1c7f8 <__assert_fail@plt+0xb1f4>
   1c7ec:	cmp	r6, #0
   1c7f0:	beq	1c81c <__assert_fail@plt+0xb218>
   1c7f4:	mvn	r4, #0
   1c7f8:	mov	r0, r4
   1c7fc:	pop	{r4, r5, r6, pc}
   1c800:	cmp	r0, #0
   1c804:	bne	1c7f4 <__assert_fail@plt+0xb1f0>
   1c808:	bl	11484 <__errno_location@plt>
   1c80c:	str	r4, [r0]
   1c810:	mvn	r4, #0
   1c814:	mov	r0, r4
   1c818:	pop	{r4, r5, r6, pc}
   1c81c:	bl	11484 <__errno_location@plt>
   1c820:	ldr	r4, [r0]
   1c824:	subs	r4, r4, #9
   1c828:	mvnne	r4, #0
   1c82c:	mov	r0, r4
   1c830:	pop	{r4, r5, r6, pc}
   1c834:	push	{r4, r5}
   1c838:	mov	r4, #0
   1c83c:	mov	r5, #0
   1c840:	ldr	r3, [pc, #12]	; 1c854 <__assert_fail@plt+0xb250>
   1c844:	strd	r4, [r0, #16]
   1c848:	str	r3, [r0, #24]
   1c84c:	pop	{r4, r5}
   1c850:	bx	lr
   1c854:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1c858:	ldr	r3, [pc, #180]	; 1c914 <__assert_fail@plt+0xb310>
   1c85c:	ldr	r2, [r0, #24]
   1c860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c864:	cmp	r2, r3
   1c868:	bne	1c900 <__assert_fail@plt+0xb2fc>
   1c86c:	ldrd	r6, [r0, #16]
   1c870:	orrs	r3, r6, r7
   1c874:	bne	1c8a0 <__assert_fail@plt+0xb29c>
   1c878:	mov	r2, #1
   1c87c:	mov	r3, #0
   1c880:	ldrd	r8, [r1, #96]	; 0x60
   1c884:	strd	r2, [r0, #16]
   1c888:	ldrd	r2, [r1]
   1c88c:	mov	r1, #0
   1c890:	strd	r8, [r0]
   1c894:	strd	r2, [r0, #8]
   1c898:	mov	r0, r1
   1c89c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c8a0:	ldrd	r8, [r1, #96]	; 0x60
   1c8a4:	ldrd	r2, [r0]
   1c8a8:	cmp	r9, r3
   1c8ac:	cmpeq	r8, r2
   1c8b0:	beq	1c8e8 <__assert_fail@plt+0xb2e4>
   1c8b4:	adds	r2, r6, #1
   1c8b8:	adc	r3, r7, #0
   1c8bc:	and	r6, r6, r2
   1c8c0:	and	r7, r7, r3
   1c8c4:	orrs	ip, r6, r7
   1c8c8:	strd	r2, [r0, #16]
   1c8cc:	movne	r1, #0
   1c8d0:	bne	1c898 <__assert_fail@plt+0xb294>
   1c8d4:	orrs	r3, r2, r3
   1c8d8:	bne	1c888 <__assert_fail@plt+0xb284>
   1c8dc:	mov	r1, #1
   1c8e0:	mov	r0, r1
   1c8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c8e8:	ldrd	r4, [r1]
   1c8ec:	ldrd	r2, [r0, #8]
   1c8f0:	cmp	r5, r3
   1c8f4:	cmpeq	r4, r2
   1c8f8:	bne	1c8b4 <__assert_fail@plt+0xb2b0>
   1c8fc:	b	1c8dc <__assert_fail@plt+0xb2d8>
   1c900:	ldr	r3, [pc, #16]	; 1c918 <__assert_fail@plt+0xb314>
   1c904:	mov	r2, #60	; 0x3c
   1c908:	ldr	r1, [pc, #12]	; 1c91c <__assert_fail@plt+0xb318>
   1c90c:	ldr	r0, [pc, #12]	; 1c920 <__assert_fail@plt+0xb31c>
   1c910:	bl	11604 <__assert_fail@plt>
   1c914:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1c918:	andeq	lr, r1, ip, asr #26
   1c91c:	andeq	lr, r1, r8, asr sp
   1c920:	andeq	lr, r1, ip, ror #26
   1c924:	push	{r4, r5, lr}
   1c928:	sub	sp, sp, #12
   1c92c:	mov	r4, r0
   1c930:	bl	114c0 <fileno@plt>
   1c934:	cmp	r0, #0
   1c938:	mov	r0, r4
   1c93c:	blt	1c9b8 <__assert_fail@plt+0xb3b4>
   1c940:	bl	113f4 <__freading@plt>
   1c944:	cmp	r0, #0
   1c948:	bne	1c984 <__assert_fail@plt+0xb380>
   1c94c:	mov	r0, r4
   1c950:	bl	1cbd0 <__assert_fail@plt+0xb5cc>
   1c954:	cmp	r0, #0
   1c958:	beq	1c9b4 <__assert_fail@plt+0xb3b0>
   1c95c:	bl	11484 <__errno_location@plt>
   1c960:	mov	r5, r0
   1c964:	mov	r0, r4
   1c968:	ldr	r4, [r5]
   1c96c:	bl	114fc <fclose@plt>
   1c970:	cmp	r4, #0
   1c974:	mvnne	r0, #0
   1c978:	strne	r4, [r5]
   1c97c:	add	sp, sp, #12
   1c980:	pop	{r4, r5, pc}
   1c984:	mov	r0, r4
   1c988:	bl	114c0 <fileno@plt>
   1c98c:	mov	r3, #1
   1c990:	str	r3, [sp]
   1c994:	mov	r2, #0
   1c998:	mov	r3, #0
   1c99c:	bl	11370 <lseek64@plt>
   1c9a0:	mvn	r3, #0
   1c9a4:	mvn	r2, #0
   1c9a8:	cmp	r1, r3
   1c9ac:	cmpeq	r0, r2
   1c9b0:	bne	1c94c <__assert_fail@plt+0xb348>
   1c9b4:	mov	r0, r4
   1c9b8:	add	sp, sp, #12
   1c9bc:	pop	{r4, r5, lr}
   1c9c0:	b	114fc <fclose@plt>
   1c9c4:	push	{r1, r2, r3}
   1c9c8:	push	{r4, r5, r6, r7, lr}
   1c9cc:	sub	sp, sp, #8
   1c9d0:	add	r3, sp, #32
   1c9d4:	ldr	r1, [sp, #28]
   1c9d8:	str	r3, [sp, #4]
   1c9dc:	cmp	r1, #0
   1c9e0:	beq	1ca78 <__assert_fail@plt+0xb474>
   1c9e4:	ldr	r2, [pc, #412]	; 1cb88 <__assert_fail@plt+0xb584>
   1c9e8:	mov	r5, r0
   1c9ec:	cmp	r1, r2
   1c9f0:	bne	1ca3c <__assert_fail@plt+0xb438>
   1c9f4:	ldr	r6, [pc, #400]	; 1cb8c <__assert_fail@plt+0xb588>
   1c9f8:	ldr	r7, [r3]
   1c9fc:	add	r2, sp, #36	; 0x24
   1ca00:	ldr	r3, [r6]
   1ca04:	str	r2, [sp, #4]
   1ca08:	cmp	r3, #0
   1ca0c:	mov	r2, r7
   1ca10:	blt	1cb3c <__assert_fail@plt+0xb538>
   1ca14:	bl	11514 <fcntl64@plt>
   1ca18:	subs	r4, r0, #0
   1ca1c:	blt	1cac0 <__assert_fail@plt+0xb4bc>
   1ca20:	mov	r3, #1
   1ca24:	str	r3, [r6]
   1ca28:	mov	r0, r4
   1ca2c:	add	sp, sp, #8
   1ca30:	pop	{r4, r5, r6, r7, lr}
   1ca34:	add	sp, sp, #12
   1ca38:	bx	lr
   1ca3c:	cmp	r1, #11
   1ca40:	beq	1ca68 <__assert_fail@plt+0xb464>
   1ca44:	bgt	1ca88 <__assert_fail@plt+0xb484>
   1ca48:	cmp	r1, #3
   1ca4c:	beq	1ca68 <__assert_fail@plt+0xb464>
   1ca50:	ble	1cb7c <__assert_fail@plt+0xb578>
   1ca54:	cmp	r1, #8
   1ca58:	beq	1caa8 <__assert_fail@plt+0xb4a4>
   1ca5c:	ble	1caa8 <__assert_fail@plt+0xb4a4>
   1ca60:	cmp	r1, #9
   1ca64:	bne	1caa8 <__assert_fail@plt+0xb4a4>
   1ca68:	mov	r0, r5
   1ca6c:	bl	11514 <fcntl64@plt>
   1ca70:	mov	r4, r0
   1ca74:	b	1ca28 <__assert_fail@plt+0xb424>
   1ca78:	ldr	r2, [sp, #32]
   1ca7c:	bl	11514 <fcntl64@plt>
   1ca80:	mov	r4, r0
   1ca84:	b	1ca28 <__assert_fail@plt+0xb424>
   1ca88:	ldr	r3, [pc, #256]	; 1cb90 <__assert_fail@plt+0xb58c>
   1ca8c:	cmp	r1, r3
   1ca90:	bgt	1cb5c <__assert_fail@plt+0xb558>
   1ca94:	cmp	r1, r2
   1ca98:	bge	1caa8 <__assert_fail@plt+0xb4a4>
   1ca9c:	sub	r3, r3, #6
   1caa0:	cmp	r1, r3
   1caa4:	beq	1ca68 <__assert_fail@plt+0xb464>
   1caa8:	ldr	r3, [sp, #4]
   1caac:	mov	r0, r5
   1cab0:	ldr	r2, [r3]
   1cab4:	bl	11514 <fcntl64@plt>
   1cab8:	mov	r4, r0
   1cabc:	b	1ca28 <__assert_fail@plt+0xb424>
   1cac0:	bl	11484 <__errno_location@plt>
   1cac4:	ldr	r3, [r0]
   1cac8:	cmp	r3, #22
   1cacc:	bne	1ca20 <__assert_fail@plt+0xb41c>
   1cad0:	mov	r2, r7
   1cad4:	mov	r0, r5
   1cad8:	mov	r1, #0
   1cadc:	bl	11514 <fcntl64@plt>
   1cae0:	subs	r4, r0, #0
   1cae4:	blt	1ca28 <__assert_fail@plt+0xb424>
   1cae8:	mvn	r3, #0
   1caec:	str	r3, [r6]
   1caf0:	mov	r1, #1
   1caf4:	mov	r0, r4
   1caf8:	bl	11514 <fcntl64@plt>
   1cafc:	subs	r2, r0, #0
   1cb00:	blt	1cb1c <__assert_fail@plt+0xb518>
   1cb04:	orr	r2, r2, #1
   1cb08:	mov	r1, #2
   1cb0c:	mov	r0, r4
   1cb10:	bl	11514 <fcntl64@plt>
   1cb14:	cmn	r0, #1
   1cb18:	bne	1ca28 <__assert_fail@plt+0xb424>
   1cb1c:	bl	11484 <__errno_location@plt>
   1cb20:	mov	r5, r0
   1cb24:	mov	r0, r4
   1cb28:	ldr	r6, [r5]
   1cb2c:	mvn	r4, #0
   1cb30:	bl	115d4 <close@plt>
   1cb34:	str	r6, [r5]
   1cb38:	b	1ca28 <__assert_fail@plt+0xb424>
   1cb3c:	mov	r1, #0
   1cb40:	bl	11514 <fcntl64@plt>
   1cb44:	subs	r4, r0, #0
   1cb48:	blt	1ca28 <__assert_fail@plt+0xb424>
   1cb4c:	ldr	r3, [r6]
   1cb50:	cmn	r3, #1
   1cb54:	beq	1caf0 <__assert_fail@plt+0xb4ec>
   1cb58:	b	1ca28 <__assert_fail@plt+0xb424>
   1cb5c:	ldr	r3, [pc, #48]	; 1cb94 <__assert_fail@plt+0xb590>
   1cb60:	cmp	r1, r3
   1cb64:	beq	1caa8 <__assert_fail@plt+0xb4a4>
   1cb68:	blt	1ca68 <__assert_fail@plt+0xb464>
   1cb6c:	add	r3, r3, #1
   1cb70:	cmp	r1, r3
   1cb74:	bne	1caa8 <__assert_fail@plt+0xb4a4>
   1cb78:	b	1ca68 <__assert_fail@plt+0xb464>
   1cb7c:	cmp	r1, #1
   1cb80:	bne	1caa8 <__assert_fail@plt+0xb4a4>
   1cb84:	b	1ca68 <__assert_fail@plt+0xb464>
   1cb88:	andeq	r0, r0, r6, lsl #8
   1cb8c:	andeq	pc, r2, r4, asr #6
   1cb90:	andeq	r0, r0, r7, lsl #8
   1cb94:	andeq	r0, r0, r9, lsl #8
   1cb98:	push	{r1, r2, r3}
   1cb9c:	push	{lr}		; (str lr, [sp, #-4]!)
   1cba0:	sub	sp, sp, #8
   1cba4:	ldr	r1, [sp, #12]
   1cba8:	ands	r2, r1, #64	; 0x40
   1cbac:	addne	r3, sp, #16
   1cbb0:	ldrne	r2, [sp, #16]
   1cbb4:	strne	r3, [sp, #4]
   1cbb8:	bl	113c4 <open64@plt>
   1cbbc:	bl	1b458 <__assert_fail@plt+0x9e54>
   1cbc0:	add	sp, sp, #8
   1cbc4:	pop	{lr}		; (ldr lr, [sp], #4)
   1cbc8:	add	sp, sp, #12
   1cbcc:	bx	lr
   1cbd0:	push	{r4, lr}
   1cbd4:	subs	r4, r0, #0
   1cbd8:	sub	sp, sp, #8
   1cbdc:	beq	1cbf8 <__assert_fail@plt+0xb5f4>
   1cbe0:	bl	113f4 <__freading@plt>
   1cbe4:	cmp	r0, #0
   1cbe8:	beq	1cbf8 <__assert_fail@plt+0xb5f4>
   1cbec:	ldr	r3, [r4]
   1cbf0:	tst	r3, #256	; 0x100
   1cbf4:	bne	1cc08 <__assert_fail@plt+0xb604>
   1cbf8:	mov	r0, r4
   1cbfc:	add	sp, sp, #8
   1cc00:	pop	{r4, lr}
   1cc04:	b	11274 <fflush@plt>
   1cc08:	mov	r3, #1
   1cc0c:	str	r3, [sp]
   1cc10:	mov	r2, #0
   1cc14:	mov	r3, #0
   1cc18:	mov	r0, r4
   1cc1c:	bl	1cc88 <__assert_fail@plt+0xb684>
   1cc20:	mov	r0, r4
   1cc24:	add	sp, sp, #8
   1cc28:	pop	{r4, lr}
   1cc2c:	b	11274 <fflush@plt>
   1cc30:	push	{r4, r5, lr}
   1cc34:	sub	sp, sp, #12
   1cc38:	mov	r5, r0
   1cc3c:	bl	11484 <__errno_location@plt>
   1cc40:	mov	r2, #0
   1cc44:	mov	r4, r0
   1cc48:	ldr	r3, [r0]
   1cc4c:	str	r2, [r4]
   1cc50:	mov	r0, r5
   1cc54:	str	r3, [sp]
   1cc58:	str	r3, [sp, #4]
   1cc5c:	bl	11298 <free@plt>
   1cc60:	ldr	r3, [r4]
   1cc64:	add	r2, sp, #8
   1cc68:	cmp	r3, #0
   1cc6c:	moveq	r3, #4
   1cc70:	movne	r3, #0
   1cc74:	add	r3, r2, r3
   1cc78:	ldr	r3, [r3, #-8]
   1cc7c:	str	r3, [r4]
   1cc80:	add	sp, sp, #12
   1cc84:	pop	{r4, r5, pc}
   1cc88:	push	{r4, r5, r6, r7, r8, lr}
   1cc8c:	sub	sp, sp, #8
   1cc90:	ldmib	r0, {ip, lr}
   1cc94:	mov	r4, r0
   1cc98:	ldr	r5, [sp, #32]
   1cc9c:	cmp	lr, ip
   1cca0:	beq	1ccb8 <__assert_fail@plt+0xb6b4>
   1cca4:	str	r5, [sp, #32]
   1cca8:	mov	r0, r4
   1ccac:	add	sp, sp, #8
   1ccb0:	pop	{r4, r5, r6, r7, r8, lr}
   1ccb4:	b	11508 <fseeko64@plt>
   1ccb8:	ldr	lr, [r0, #20]
   1ccbc:	ldr	ip, [r0, #16]
   1ccc0:	cmp	lr, ip
   1ccc4:	bne	1cca4 <__assert_fail@plt+0xb6a0>
   1ccc8:	ldr	r8, [r0, #36]	; 0x24
   1cccc:	cmp	r8, #0
   1ccd0:	bne	1cca4 <__assert_fail@plt+0xb6a0>
   1ccd4:	mov	r6, r2
   1ccd8:	mov	r7, r3
   1ccdc:	bl	114c0 <fileno@plt>
   1cce0:	mov	r2, r6
   1cce4:	mov	r3, r7
   1cce8:	str	r5, [sp]
   1ccec:	bl	11370 <lseek64@plt>
   1ccf0:	mvn	r3, #0
   1ccf4:	mvn	r2, #0
   1ccf8:	cmp	r1, r3
   1ccfc:	cmpeq	r0, r2
   1cd00:	beq	1cd20 <__assert_fail@plt+0xb71c>
   1cd04:	ldr	r3, [r4]
   1cd08:	strd	r0, [r4, #80]	; 0x50
   1cd0c:	mov	r0, r8
   1cd10:	bic	r3, r3, #16
   1cd14:	str	r3, [r4]
   1cd18:	add	sp, sp, #8
   1cd1c:	pop	{r4, r5, r6, r7, r8, pc}
   1cd20:	mvn	r0, #0
   1cd24:	b	1cd18 <__assert_fail@plt+0xb714>
   1cd28:	push	{r4, lr}
   1cd2c:	mov	r0, #14
   1cd30:	bl	11538 <nl_langinfo@plt>
   1cd34:	cmp	r0, #0
   1cd38:	beq	1cd50 <__assert_fail@plt+0xb74c>
   1cd3c:	ldrb	r2, [r0]
   1cd40:	ldr	r3, [pc, #16]	; 1cd58 <__assert_fail@plt+0xb754>
   1cd44:	cmp	r2, #0
   1cd48:	moveq	r0, r3
   1cd4c:	pop	{r4, pc}
   1cd50:	ldr	r0, [pc]	; 1cd58 <__assert_fail@plt+0xb754>
   1cd54:	pop	{r4, pc}
   1cd58:	andeq	lr, r1, r4, lsl #27
   1cd5c:	push	{r4, r5, r6, r7, lr}
   1cd60:	subs	r6, r0, #0
   1cd64:	sub	sp, sp, #12
   1cd68:	addeq	r6, sp, #4
   1cd6c:	mov	r0, r6
   1cd70:	mov	r5, r2
   1cd74:	mov	r7, r1
   1cd78:	bl	113a0 <mbrtowc@plt>
   1cd7c:	cmp	r5, #0
   1cd80:	cmnne	r0, #3
   1cd84:	mov	r4, r0
   1cd88:	bls	1cda4 <__assert_fail@plt+0xb7a0>
   1cd8c:	mov	r0, #0
   1cd90:	bl	1d240 <__assert_fail@plt+0xbc3c>
   1cd94:	cmp	r0, #0
   1cd98:	moveq	r4, #1
   1cd9c:	ldrbeq	r3, [r7]
   1cda0:	streq	r3, [r6]
   1cda4:	mov	r0, r4
   1cda8:	add	sp, sp, #12
   1cdac:	pop	{r4, r5, r6, r7, pc}
   1cdb0:	ldr	r3, [pc, #44]	; 1cde4 <__assert_fail@plt+0xb7e0>
   1cdb4:	push	{r4, lr}
   1cdb8:	mov	r5, r0
   1cdbc:	mov	r2, #5
   1cdc0:	ldr	r1, [pc, #32]	; 1cde8 <__assert_fail@plt+0xb7e4>
   1cdc4:	mov	r0, #0
   1cdc8:	ldr	r4, [r3]
   1cdcc:	bl	112f8 <dcgettext@plt>
   1cdd0:	mov	r1, r5
   1cdd4:	mov	r2, r0
   1cdd8:	mov	r0, r4
   1cddc:	bl	113ac <error@plt>
   1cde0:	bl	115c8 <abort@plt>
   1cde4:	andeq	pc, r2, r8, ror #2
   1cde8:	andeq	lr, r1, ip, lsl #27
   1cdec:	ldr	r3, [pc, #44]	; 1ce20 <__assert_fail@plt+0xb81c>
   1cdf0:	push	{r4, lr}
   1cdf4:	mov	r5, r0
   1cdf8:	mov	r2, #5
   1cdfc:	ldr	r1, [pc, #32]	; 1ce24 <__assert_fail@plt+0xb820>
   1ce00:	mov	r0, #0
   1ce04:	ldr	r4, [r3]
   1ce08:	bl	112f8 <dcgettext@plt>
   1ce0c:	mov	r1, r5
   1ce10:	mov	r2, r0
   1ce14:	mov	r0, r4
   1ce18:	bl	113ac <error@plt>
   1ce1c:	bl	115c8 <abort@plt>
   1ce20:	andeq	pc, r2, r8, ror #2
   1ce24:			; <UNDEFINED> instruction: 0x0001edb8
   1ce28:	push	{r4, r5, r6, lr}
   1ce2c:	subs	r4, r2, #0
   1ce30:	mov	r6, r0
   1ce34:	mov	r5, r1
   1ce38:	beq	1ce64 <__assert_fail@plt+0xb860>
   1ce3c:	mov	r1, r4
   1ce40:	mvn	r0, #0
   1ce44:	bl	1d334 <__assert_fail@plt+0xbd30>
   1ce48:	cmp	r0, r5
   1ce4c:	bcs	1ce64 <__assert_fail@plt+0xb860>
   1ce50:	bl	11484 <__errno_location@plt>
   1ce54:	mov	r3, #12
   1ce58:	str	r3, [r0]
   1ce5c:	mov	r0, #0
   1ce60:	pop	{r4, r5, r6, pc}
   1ce64:	mul	r1, r5, r4
   1ce68:	mov	r0, r6
   1ce6c:	pop	{r4, r5, r6, lr}
   1ce70:	b	1c64c <__assert_fail@plt+0xb048>
   1ce74:	push	{r4, r5, r6, lr}
   1ce78:	mov	r4, #0
   1ce7c:	mov	r5, r0
   1ce80:	str	r4, [r0, #4]
   1ce84:	mov	r1, #524288	; 0x80000
   1ce88:	ldr	r0, [pc, #52]	; 1cec4 <__assert_fail@plt+0xb8c0>
   1ce8c:	bl	1cb98 <__assert_fail@plt+0xb594>
   1ce90:	cmp	r0, r4
   1ce94:	str	r0, [r5]
   1ce98:	blt	1cea4 <__assert_fail@plt+0xb8a0>
   1ce9c:	mov	r0, r4
   1cea0:	pop	{r4, r5, r6, pc}
   1cea4:	mov	r1, r4
   1cea8:	mov	r0, r4
   1ceac:	bl	11430 <getcwd@plt>
   1ceb0:	cmp	r0, r4
   1ceb4:	str	r0, [r5, #4]
   1ceb8:	movne	r0, #0
   1cebc:	mvneq	r0, #0
   1cec0:	pop	{r4, r5, r6, pc}
   1cec4:	andeq	lr, r1, r0, lsl r8
   1cec8:	ldr	r3, [r0]
   1cecc:	cmp	r3, #0
   1ced0:	blt	1cedc <__assert_fail@plt+0xb8d8>
   1ced4:	mov	r0, r3
   1ced8:	b	11568 <fchdir@plt>
   1cedc:	ldr	r0, [r0, #4]
   1cee0:	b	1cf14 <__assert_fail@plt+0xb910>
   1cee4:	push	{r4, lr}
   1cee8:	mov	r4, r0
   1ceec:	ldr	r0, [r0]
   1cef0:	cmp	r0, #0
   1cef4:	blt	1cefc <__assert_fail@plt+0xb8f8>
   1cef8:	bl	115d4 <close@plt>
   1cefc:	ldr	r0, [r4, #4]
   1cf00:	pop	{r4, lr}
   1cf04:	b	1cc30 <__assert_fail@plt+0xb62c>
   1cf08:	mov	r2, #3
   1cf0c:	mov	r1, #0
   1cf10:	b	1c9c4 <__assert_fail@plt+0xb3c0>
   1cf14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf18:	sub	sp, sp, #12
   1cf1c:	mov	r9, r0
   1cf20:	bl	11334 <chdir@plt>
   1cf24:	subs	r4, r0, #0
   1cf28:	beq	1cf40 <__assert_fail@plt+0xb93c>
   1cf2c:	bl	11484 <__errno_location@plt>
   1cf30:	ldr	r3, [r0]
   1cf34:	str	r0, [sp, #4]
   1cf38:	cmp	r3, #36	; 0x24
   1cf3c:	beq	1cf4c <__assert_fail@plt+0xb948>
   1cf40:	mov	r0, r4
   1cf44:	add	sp, sp, #12
   1cf48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf4c:	mov	r0, r9
   1cf50:	bl	11460 <strlen@plt>
   1cf54:	subs	r6, r0, #0
   1cf58:	beq	1d1f4 <__assert_fail@plt+0xbbf0>
   1cf5c:	cmp	r6, #4096	; 0x1000
   1cf60:	bcc	1d208 <__assert_fail@plt+0xbc04>
   1cf64:	ldr	r1, [pc, #688]	; 1d21c <__assert_fail@plt+0xbc18>
   1cf68:	mov	r0, r9
   1cf6c:	bl	115f8 <strspn@plt>
   1cf70:	cmp	r0, #2
   1cf74:	mov	r4, r0
   1cf78:	beq	1d084 <__assert_fail@plt+0xba80>
   1cf7c:	cmp	r0, #0
   1cf80:	moveq	r4, r9
   1cf84:	mvneq	r5, #99	; 0x63
   1cf88:	bne	1d160 <__assert_fail@plt+0xbb5c>
   1cf8c:	ldrb	r3, [r4]
   1cf90:	cmp	r3, #47	; 0x2f
   1cf94:	beq	1d1e0 <__assert_fail@plt+0xbbdc>
   1cf98:	add	r9, r9, r6
   1cf9c:	cmp	r4, r9
   1cfa0:	bhi	1d1cc <__assert_fail@plt+0xbbc8>
   1cfa4:	ldr	r6, [pc, #628]	; 1d220 <__assert_fail@plt+0xbc1c>
   1cfa8:	sub	r3, r9, r4
   1cfac:	cmp	r3, r6
   1cfb0:	movle	r8, r5
   1cfb4:	ble	1d0d8 <__assert_fail@plt+0xbad4>
   1cfb8:	mov	sl, #4096	; 0x1000
   1cfbc:	mov	r7, #47	; 0x2f
   1cfc0:	b	1d000 <__assert_fail@plt+0xb9fc>
   1cfc4:	cmp	r5, #0
   1cfc8:	blt	1cfdc <__assert_fail@plt+0xb9d8>
   1cfcc:	mov	r0, r5
   1cfd0:	bl	115d4 <close@plt>
   1cfd4:	cmp	r0, #0
   1cfd8:	bne	1d1c8 <__assert_fail@plt+0xbbc4>
   1cfdc:	strb	r7, [fp], #1
   1cfe0:	ldr	r1, [pc, #564]	; 1d21c <__assert_fail@plt+0xbc18>
   1cfe4:	mov	r0, fp
   1cfe8:	bl	115f8 <strspn@plt>
   1cfec:	mov	r5, r8
   1cff0:	add	r4, fp, r0
   1cff4:	sub	r3, r9, r4
   1cff8:	cmp	r3, r6
   1cffc:	ble	1d0d8 <__assert_fail@plt+0xbad4>
   1d000:	mov	r2, sl
   1d004:	mov	r1, r7
   1d008:	mov	r0, r4
   1d00c:	bl	11478 <memrchr@plt>
   1d010:	subs	fp, r0, #0
   1d014:	beq	1d12c <__assert_fail@plt+0xbb28>
   1d018:	sub	r3, fp, r4
   1d01c:	cmp	r3, r6
   1d020:	mov	r3, #0
   1d024:	strb	r3, [fp]
   1d028:	bgt	1d1b4 <__assert_fail@plt+0xbbb0>
   1d02c:	mov	r1, r4
   1d030:	mov	r2, #18688	; 0x4900
   1d034:	mov	r0, r5
   1d038:	bl	1146c <openat64@plt>
   1d03c:	subs	r8, r0, #0
   1d040:	bge	1cfc4 <__assert_fail@plt+0xb9c0>
   1d044:	mov	r2, #47	; 0x2f
   1d048:	strb	r2, [fp]
   1d04c:	ldr	r3, [sp, #4]
   1d050:	cmp	r5, #0
   1d054:	ldr	r4, [r3]
   1d058:	blt	1d06c <__assert_fail@plt+0xba68>
   1d05c:	mov	r0, r5
   1d060:	bl	115d4 <close@plt>
   1d064:	cmp	r0, #0
   1d068:	bne	1d1c8 <__assert_fail@plt+0xbbc4>
   1d06c:	ldr	r3, [sp, #4]
   1d070:	str	r4, [r3]
   1d074:	mvn	r4, #0
   1d078:	mov	r0, r4
   1d07c:	add	sp, sp, #12
   1d080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d084:	sub	r2, r6, #3
   1d088:	mov	r1, #47	; 0x2f
   1d08c:	add	r0, r9, #3
   1d090:	bl	114d8 <memchr@plt>
   1d094:	subs	r4, r0, #0
   1d098:	beq	1d158 <__assert_fail@plt+0xbb54>
   1d09c:	mov	r3, #0
   1d0a0:	strb	r3, [r4]
   1d0a4:	mov	r2, #18688	; 0x4900
   1d0a8:	mov	r1, r9
   1d0ac:	mvn	r0, #99	; 0x63
   1d0b0:	bl	1146c <openat64@plt>
   1d0b4:	mov	r3, #47	; 0x2f
   1d0b8:	subs	r5, r0, #0
   1d0bc:	blt	1d1a4 <__assert_fail@plt+0xbba0>
   1d0c0:	strb	r3, [r4], #1
   1d0c4:	ldr	r1, [pc, #336]	; 1d21c <__assert_fail@plt+0xbc18>
   1d0c8:	mov	r0, r4
   1d0cc:	bl	115f8 <strspn@plt>
   1d0d0:	add	r4, r4, r0
   1d0d4:	b	1cf8c <__assert_fail@plt+0xb988>
   1d0d8:	cmp	r9, r4
   1d0dc:	bls	1d140 <__assert_fail@plt+0xbb3c>
   1d0e0:	mov	r1, r4
   1d0e4:	mov	r2, #18688	; 0x4900
   1d0e8:	mov	r0, r8
   1d0ec:	bl	1146c <openat64@plt>
   1d0f0:	subs	r5, r0, #0
   1d0f4:	blt	1d150 <__assert_fail@plt+0xbb4c>
   1d0f8:	cmp	r8, #0
   1d0fc:	blt	1d110 <__assert_fail@plt+0xbb0c>
   1d100:	mov	r0, r8
   1d104:	bl	115d4 <close@plt>
   1d108:	cmp	r0, #0
   1d10c:	bne	1d1c8 <__assert_fail@plt+0xbbc4>
   1d110:	mov	r0, r5
   1d114:	bl	11568 <fchdir@plt>
   1d118:	cmp	r0, #0
   1d11c:	beq	1d18c <__assert_fail@plt+0xbb88>
   1d120:	ldr	r3, [sp, #4]
   1d124:	ldr	r4, [r3]
   1d128:	b	1d05c <__assert_fail@plt+0xba58>
   1d12c:	ldr	r2, [sp, #4]
   1d130:	mov	r3, #36	; 0x24
   1d134:	mvn	r4, #0
   1d138:	str	r3, [r2]
   1d13c:	b	1cf40 <__assert_fail@plt+0xb93c>
   1d140:	mov	r0, r8
   1d144:	bl	11568 <fchdir@plt>
   1d148:	cmp	r0, #0
   1d14c:	beq	1d180 <__assert_fail@plt+0xbb7c>
   1d150:	mov	r5, r8
   1d154:	b	1d04c <__assert_fail@plt+0xba48>
   1d158:	mvn	r4, #0
   1d15c:	b	1cf40 <__assert_fail@plt+0xb93c>
   1d160:	mov	r2, #18688	; 0x4900
   1d164:	ldr	r1, [pc, #176]	; 1d21c <__assert_fail@plt+0xbc18>
   1d168:	mvn	r0, #99	; 0x63
   1d16c:	bl	1146c <openat64@plt>
   1d170:	subs	r5, r0, #0
   1d174:	blt	1d1a8 <__assert_fail@plt+0xbba4>
   1d178:	add	r4, r9, r4
   1d17c:	b	1cf8c <__assert_fail@plt+0xb988>
   1d180:	cmp	r8, #0
   1d184:	blt	1d19c <__assert_fail@plt+0xbb98>
   1d188:	mov	r5, r8
   1d18c:	mov	r0, r5
   1d190:	bl	115d4 <close@plt>
   1d194:	cmp	r0, #0
   1d198:	bne	1d1c8 <__assert_fail@plt+0xbbc4>
   1d19c:	mov	r4, #0
   1d1a0:	b	1cf40 <__assert_fail@plt+0xb93c>
   1d1a4:	strb	r3, [r4]
   1d1a8:	ldr	r3, [sp, #4]
   1d1ac:	ldr	r4, [r3]
   1d1b0:	b	1d06c <__assert_fail@plt+0xba68>
   1d1b4:	ldr	r3, [pc, #104]	; 1d224 <__assert_fail@plt+0xbc20>
   1d1b8:	mov	r2, #179	; 0xb3
   1d1bc:	ldr	r1, [pc, #100]	; 1d228 <__assert_fail@plt+0xbc24>
   1d1c0:	ldr	r0, [pc, #100]	; 1d22c <__assert_fail@plt+0xbc28>
   1d1c4:	bl	11604 <__assert_fail@plt>
   1d1c8:	bl	11610 <__assert_fail@plt+0xc>
   1d1cc:	ldr	r3, [pc, #80]	; 1d224 <__assert_fail@plt+0xbc20>
   1d1d0:	mov	r2, #163	; 0xa3
   1d1d4:	ldr	r1, [pc, #76]	; 1d228 <__assert_fail@plt+0xbc24>
   1d1d8:	ldr	r0, [pc, #80]	; 1d230 <__assert_fail@plt+0xbc2c>
   1d1dc:	bl	11604 <__assert_fail@plt>
   1d1e0:	ldr	r3, [pc, #60]	; 1d224 <__assert_fail@plt+0xbc20>
   1d1e4:	mov	r2, #162	; 0xa2
   1d1e8:	ldr	r1, [pc, #56]	; 1d228 <__assert_fail@plt+0xbc24>
   1d1ec:	ldr	r0, [pc, #64]	; 1d234 <__assert_fail@plt+0xbc30>
   1d1f0:	bl	11604 <__assert_fail@plt>
   1d1f4:	ldr	r3, [pc, #40]	; 1d224 <__assert_fail@plt+0xbc20>
   1d1f8:	mov	r2, #126	; 0x7e
   1d1fc:	ldr	r1, [pc, #36]	; 1d228 <__assert_fail@plt+0xbc24>
   1d200:	ldr	r0, [pc, #48]	; 1d238 <__assert_fail@plt+0xbc34>
   1d204:	bl	11604 <__assert_fail@plt>
   1d208:	ldr	r3, [pc, #20]	; 1d224 <__assert_fail@plt+0xbc20>
   1d20c:	mov	r2, #127	; 0x7f
   1d210:	ldr	r1, [pc, #16]	; 1d228 <__assert_fail@plt+0xbc24>
   1d214:	ldr	r0, [pc, #32]	; 1d23c <__assert_fail@plt+0xbc38>
   1d218:	bl	11604 <__assert_fail@plt>
   1d21c:	andeq	lr, r1, r8, asr #26
   1d220:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1d224:	strdeq	lr, [r1], -r4
   1d228:	andeq	lr, r1, r0, lsl #28
   1d22c:	andeq	lr, r1, r4, asr lr
   1d230:	andeq	lr, r1, r4, asr #28
   1d234:	andeq	lr, r1, r8, lsr lr
   1d238:	andeq	lr, r1, r4, lsr #28
   1d23c:	andeq	lr, r1, ip, lsr #28
   1d240:	push	{lr}		; (str lr, [sp, #-4]!)
   1d244:	sub	sp, sp, #268	; 0x10c
   1d248:	add	r1, sp, #4
   1d24c:	ldr	r2, [pc, #60]	; 1d290 <__assert_fail@plt+0xbc8c>
   1d250:	bl	1d29c <__assert_fail@plt+0xbc98>
   1d254:	cmp	r0, #0
   1d258:	movne	r0, #0
   1d25c:	bne	1d288 <__assert_fail@plt+0xbc84>
   1d260:	ldr	r1, [pc, #44]	; 1d294 <__assert_fail@plt+0xbc90>
   1d264:	add	r0, sp, #4
   1d268:	bl	11268 <strcmp@plt>
   1d26c:	cmp	r0, #0
   1d270:	beq	1d288 <__assert_fail@plt+0xbc84>
   1d274:	add	r0, sp, #4
   1d278:	ldr	r1, [pc, #24]	; 1d298 <__assert_fail@plt+0xbc94>
   1d27c:	bl	11268 <strcmp@plt>
   1d280:	adds	r0, r0, #0
   1d284:	movne	r0, #1
   1d288:	add	sp, sp, #268	; 0x10c
   1d28c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d290:	andeq	r0, r0, r1, lsl #2
   1d294:	andeq	lr, r1, r8, ror #28
   1d298:	andeq	lr, r1, ip, ror #28
   1d29c:	push	{r4, r5, r6, lr}
   1d2a0:	mov	r5, r1
   1d2a4:	mov	r1, #0
   1d2a8:	mov	r4, r2
   1d2ac:	bl	11520 <setlocale@plt>
   1d2b0:	subs	r6, r0, #0
   1d2b4:	beq	1d310 <__assert_fail@plt+0xbd0c>
   1d2b8:	bl	11460 <strlen@plt>
   1d2bc:	cmp	r4, r0
   1d2c0:	bhi	1d2f8 <__assert_fail@plt+0xbcf4>
   1d2c4:	cmp	r4, #0
   1d2c8:	bne	1d2d4 <__assert_fail@plt+0xbcd0>
   1d2cc:	mov	r0, #34	; 0x22
   1d2d0:	pop	{r4, r5, r6, pc}
   1d2d4:	sub	r4, r4, #1
   1d2d8:	mov	r1, r6
   1d2dc:	mov	r2, r4
   1d2e0:	mov	r0, r5
   1d2e4:	bl	112b0 <memcpy@plt>
   1d2e8:	mov	r3, #0
   1d2ec:	strb	r3, [r5, r4]
   1d2f0:	mov	r0, #34	; 0x22
   1d2f4:	pop	{r4, r5, r6, pc}
   1d2f8:	add	r2, r0, #1
   1d2fc:	mov	r1, r6
   1d300:	mov	r0, r5
   1d304:	bl	112b0 <memcpy@plt>
   1d308:	mov	r0, #0
   1d30c:	pop	{r4, r5, r6, pc}
   1d310:	cmp	r4, #0
   1d314:	beq	1d324 <__assert_fail@plt+0xbd20>
   1d318:	strb	r6, [r5]
   1d31c:	mov	r0, #22
   1d320:	pop	{r4, r5, r6, pc}
   1d324:	mov	r0, #22
   1d328:	pop	{r4, r5, r6, pc}
   1d32c:	mov	r1, #0
   1d330:	b	11520 <setlocale@plt>
   1d334:	subs	r2, r1, #1
   1d338:	bxeq	lr
   1d33c:	bcc	1d514 <__assert_fail@plt+0xbf10>
   1d340:	cmp	r0, r1
   1d344:	bls	1d4f8 <__assert_fail@plt+0xbef4>
   1d348:	tst	r1, r2
   1d34c:	beq	1d504 <__assert_fail@plt+0xbf00>
   1d350:	clz	r3, r0
   1d354:	clz	r2, r1
   1d358:	sub	r3, r2, r3
   1d35c:	rsbs	r3, r3, #31
   1d360:	addne	r3, r3, r3, lsl #1
   1d364:	mov	r2, #0
   1d368:	addne	pc, pc, r3, lsl #2
   1d36c:	nop			; (mov r0, r0)
   1d370:	cmp	r0, r1, lsl #31
   1d374:	adc	r2, r2, r2
   1d378:	subcs	r0, r0, r1, lsl #31
   1d37c:	cmp	r0, r1, lsl #30
   1d380:	adc	r2, r2, r2
   1d384:	subcs	r0, r0, r1, lsl #30
   1d388:	cmp	r0, r1, lsl #29
   1d38c:	adc	r2, r2, r2
   1d390:	subcs	r0, r0, r1, lsl #29
   1d394:	cmp	r0, r1, lsl #28
   1d398:	adc	r2, r2, r2
   1d39c:	subcs	r0, r0, r1, lsl #28
   1d3a0:	cmp	r0, r1, lsl #27
   1d3a4:	adc	r2, r2, r2
   1d3a8:	subcs	r0, r0, r1, lsl #27
   1d3ac:	cmp	r0, r1, lsl #26
   1d3b0:	adc	r2, r2, r2
   1d3b4:	subcs	r0, r0, r1, lsl #26
   1d3b8:	cmp	r0, r1, lsl #25
   1d3bc:	adc	r2, r2, r2
   1d3c0:	subcs	r0, r0, r1, lsl #25
   1d3c4:	cmp	r0, r1, lsl #24
   1d3c8:	adc	r2, r2, r2
   1d3cc:	subcs	r0, r0, r1, lsl #24
   1d3d0:	cmp	r0, r1, lsl #23
   1d3d4:	adc	r2, r2, r2
   1d3d8:	subcs	r0, r0, r1, lsl #23
   1d3dc:	cmp	r0, r1, lsl #22
   1d3e0:	adc	r2, r2, r2
   1d3e4:	subcs	r0, r0, r1, lsl #22
   1d3e8:	cmp	r0, r1, lsl #21
   1d3ec:	adc	r2, r2, r2
   1d3f0:	subcs	r0, r0, r1, lsl #21
   1d3f4:	cmp	r0, r1, lsl #20
   1d3f8:	adc	r2, r2, r2
   1d3fc:	subcs	r0, r0, r1, lsl #20
   1d400:	cmp	r0, r1, lsl #19
   1d404:	adc	r2, r2, r2
   1d408:	subcs	r0, r0, r1, lsl #19
   1d40c:	cmp	r0, r1, lsl #18
   1d410:	adc	r2, r2, r2
   1d414:	subcs	r0, r0, r1, lsl #18
   1d418:	cmp	r0, r1, lsl #17
   1d41c:	adc	r2, r2, r2
   1d420:	subcs	r0, r0, r1, lsl #17
   1d424:	cmp	r0, r1, lsl #16
   1d428:	adc	r2, r2, r2
   1d42c:	subcs	r0, r0, r1, lsl #16
   1d430:	cmp	r0, r1, lsl #15
   1d434:	adc	r2, r2, r2
   1d438:	subcs	r0, r0, r1, lsl #15
   1d43c:	cmp	r0, r1, lsl #14
   1d440:	adc	r2, r2, r2
   1d444:	subcs	r0, r0, r1, lsl #14
   1d448:	cmp	r0, r1, lsl #13
   1d44c:	adc	r2, r2, r2
   1d450:	subcs	r0, r0, r1, lsl #13
   1d454:	cmp	r0, r1, lsl #12
   1d458:	adc	r2, r2, r2
   1d45c:	subcs	r0, r0, r1, lsl #12
   1d460:	cmp	r0, r1, lsl #11
   1d464:	adc	r2, r2, r2
   1d468:	subcs	r0, r0, r1, lsl #11
   1d46c:	cmp	r0, r1, lsl #10
   1d470:	adc	r2, r2, r2
   1d474:	subcs	r0, r0, r1, lsl #10
   1d478:	cmp	r0, r1, lsl #9
   1d47c:	adc	r2, r2, r2
   1d480:	subcs	r0, r0, r1, lsl #9
   1d484:	cmp	r0, r1, lsl #8
   1d488:	adc	r2, r2, r2
   1d48c:	subcs	r0, r0, r1, lsl #8
   1d490:	cmp	r0, r1, lsl #7
   1d494:	adc	r2, r2, r2
   1d498:	subcs	r0, r0, r1, lsl #7
   1d49c:	cmp	r0, r1, lsl #6
   1d4a0:	adc	r2, r2, r2
   1d4a4:	subcs	r0, r0, r1, lsl #6
   1d4a8:	cmp	r0, r1, lsl #5
   1d4ac:	adc	r2, r2, r2
   1d4b0:	subcs	r0, r0, r1, lsl #5
   1d4b4:	cmp	r0, r1, lsl #4
   1d4b8:	adc	r2, r2, r2
   1d4bc:	subcs	r0, r0, r1, lsl #4
   1d4c0:	cmp	r0, r1, lsl #3
   1d4c4:	adc	r2, r2, r2
   1d4c8:	subcs	r0, r0, r1, lsl #3
   1d4cc:	cmp	r0, r1, lsl #2
   1d4d0:	adc	r2, r2, r2
   1d4d4:	subcs	r0, r0, r1, lsl #2
   1d4d8:	cmp	r0, r1, lsl #1
   1d4dc:	adc	r2, r2, r2
   1d4e0:	subcs	r0, r0, r1, lsl #1
   1d4e4:	cmp	r0, r1
   1d4e8:	adc	r2, r2, r2
   1d4ec:	subcs	r0, r0, r1
   1d4f0:	mov	r0, r2
   1d4f4:	bx	lr
   1d4f8:	moveq	r0, #1
   1d4fc:	movne	r0, #0
   1d500:	bx	lr
   1d504:	clz	r2, r1
   1d508:	rsb	r2, r2, #31
   1d50c:	lsr	r0, r0, r2
   1d510:	bx	lr
   1d514:	cmp	r0, #0
   1d518:	mvnne	r0, #0
   1d51c:	b	1d7bc <__assert_fail@plt+0xc1b8>
   1d520:	cmp	r1, #0
   1d524:	beq	1d514 <__assert_fail@plt+0xbf10>
   1d528:	push	{r0, r1, lr}
   1d52c:	bl	1d334 <__assert_fail@plt+0xbd30>
   1d530:	pop	{r1, r2, lr}
   1d534:	mul	r3, r2, r0
   1d538:	sub	r1, r1, r3
   1d53c:	bx	lr
   1d540:	cmp	r1, #0
   1d544:	beq	1d750 <__assert_fail@plt+0xc14c>
   1d548:	eor	ip, r0, r1
   1d54c:	rsbmi	r1, r1, #0
   1d550:	subs	r2, r1, #1
   1d554:	beq	1d71c <__assert_fail@plt+0xc118>
   1d558:	movs	r3, r0
   1d55c:	rsbmi	r3, r0, #0
   1d560:	cmp	r3, r1
   1d564:	bls	1d728 <__assert_fail@plt+0xc124>
   1d568:	tst	r1, r2
   1d56c:	beq	1d738 <__assert_fail@plt+0xc134>
   1d570:	clz	r2, r3
   1d574:	clz	r0, r1
   1d578:	sub	r2, r0, r2
   1d57c:	rsbs	r2, r2, #31
   1d580:	addne	r2, r2, r2, lsl #1
   1d584:	mov	r0, #0
   1d588:	addne	pc, pc, r2, lsl #2
   1d58c:	nop			; (mov r0, r0)
   1d590:	cmp	r3, r1, lsl #31
   1d594:	adc	r0, r0, r0
   1d598:	subcs	r3, r3, r1, lsl #31
   1d59c:	cmp	r3, r1, lsl #30
   1d5a0:	adc	r0, r0, r0
   1d5a4:	subcs	r3, r3, r1, lsl #30
   1d5a8:	cmp	r3, r1, lsl #29
   1d5ac:	adc	r0, r0, r0
   1d5b0:	subcs	r3, r3, r1, lsl #29
   1d5b4:	cmp	r3, r1, lsl #28
   1d5b8:	adc	r0, r0, r0
   1d5bc:	subcs	r3, r3, r1, lsl #28
   1d5c0:	cmp	r3, r1, lsl #27
   1d5c4:	adc	r0, r0, r0
   1d5c8:	subcs	r3, r3, r1, lsl #27
   1d5cc:	cmp	r3, r1, lsl #26
   1d5d0:	adc	r0, r0, r0
   1d5d4:	subcs	r3, r3, r1, lsl #26
   1d5d8:	cmp	r3, r1, lsl #25
   1d5dc:	adc	r0, r0, r0
   1d5e0:	subcs	r3, r3, r1, lsl #25
   1d5e4:	cmp	r3, r1, lsl #24
   1d5e8:	adc	r0, r0, r0
   1d5ec:	subcs	r3, r3, r1, lsl #24
   1d5f0:	cmp	r3, r1, lsl #23
   1d5f4:	adc	r0, r0, r0
   1d5f8:	subcs	r3, r3, r1, lsl #23
   1d5fc:	cmp	r3, r1, lsl #22
   1d600:	adc	r0, r0, r0
   1d604:	subcs	r3, r3, r1, lsl #22
   1d608:	cmp	r3, r1, lsl #21
   1d60c:	adc	r0, r0, r0
   1d610:	subcs	r3, r3, r1, lsl #21
   1d614:	cmp	r3, r1, lsl #20
   1d618:	adc	r0, r0, r0
   1d61c:	subcs	r3, r3, r1, lsl #20
   1d620:	cmp	r3, r1, lsl #19
   1d624:	adc	r0, r0, r0
   1d628:	subcs	r3, r3, r1, lsl #19
   1d62c:	cmp	r3, r1, lsl #18
   1d630:	adc	r0, r0, r0
   1d634:	subcs	r3, r3, r1, lsl #18
   1d638:	cmp	r3, r1, lsl #17
   1d63c:	adc	r0, r0, r0
   1d640:	subcs	r3, r3, r1, lsl #17
   1d644:	cmp	r3, r1, lsl #16
   1d648:	adc	r0, r0, r0
   1d64c:	subcs	r3, r3, r1, lsl #16
   1d650:	cmp	r3, r1, lsl #15
   1d654:	adc	r0, r0, r0
   1d658:	subcs	r3, r3, r1, lsl #15
   1d65c:	cmp	r3, r1, lsl #14
   1d660:	adc	r0, r0, r0
   1d664:	subcs	r3, r3, r1, lsl #14
   1d668:	cmp	r3, r1, lsl #13
   1d66c:	adc	r0, r0, r0
   1d670:	subcs	r3, r3, r1, lsl #13
   1d674:	cmp	r3, r1, lsl #12
   1d678:	adc	r0, r0, r0
   1d67c:	subcs	r3, r3, r1, lsl #12
   1d680:	cmp	r3, r1, lsl #11
   1d684:	adc	r0, r0, r0
   1d688:	subcs	r3, r3, r1, lsl #11
   1d68c:	cmp	r3, r1, lsl #10
   1d690:	adc	r0, r0, r0
   1d694:	subcs	r3, r3, r1, lsl #10
   1d698:	cmp	r3, r1, lsl #9
   1d69c:	adc	r0, r0, r0
   1d6a0:	subcs	r3, r3, r1, lsl #9
   1d6a4:	cmp	r3, r1, lsl #8
   1d6a8:	adc	r0, r0, r0
   1d6ac:	subcs	r3, r3, r1, lsl #8
   1d6b0:	cmp	r3, r1, lsl #7
   1d6b4:	adc	r0, r0, r0
   1d6b8:	subcs	r3, r3, r1, lsl #7
   1d6bc:	cmp	r3, r1, lsl #6
   1d6c0:	adc	r0, r0, r0
   1d6c4:	subcs	r3, r3, r1, lsl #6
   1d6c8:	cmp	r3, r1, lsl #5
   1d6cc:	adc	r0, r0, r0
   1d6d0:	subcs	r3, r3, r1, lsl #5
   1d6d4:	cmp	r3, r1, lsl #4
   1d6d8:	adc	r0, r0, r0
   1d6dc:	subcs	r3, r3, r1, lsl #4
   1d6e0:	cmp	r3, r1, lsl #3
   1d6e4:	adc	r0, r0, r0
   1d6e8:	subcs	r3, r3, r1, lsl #3
   1d6ec:	cmp	r3, r1, lsl #2
   1d6f0:	adc	r0, r0, r0
   1d6f4:	subcs	r3, r3, r1, lsl #2
   1d6f8:	cmp	r3, r1, lsl #1
   1d6fc:	adc	r0, r0, r0
   1d700:	subcs	r3, r3, r1, lsl #1
   1d704:	cmp	r3, r1
   1d708:	adc	r0, r0, r0
   1d70c:	subcs	r3, r3, r1
   1d710:	cmp	ip, #0
   1d714:	rsbmi	r0, r0, #0
   1d718:	bx	lr
   1d71c:	teq	ip, r0
   1d720:	rsbmi	r0, r0, #0
   1d724:	bx	lr
   1d728:	movcc	r0, #0
   1d72c:	asreq	r0, ip, #31
   1d730:	orreq	r0, r0, #1
   1d734:	bx	lr
   1d738:	clz	r2, r1
   1d73c:	rsb	r2, r2, #31
   1d740:	cmp	ip, #0
   1d744:	lsr	r0, r3, r2
   1d748:	rsbmi	r0, r0, #0
   1d74c:	bx	lr
   1d750:	cmp	r0, #0
   1d754:	mvngt	r0, #-2147483648	; 0x80000000
   1d758:	movlt	r0, #-2147483648	; 0x80000000
   1d75c:	b	1d7bc <__assert_fail@plt+0xc1b8>
   1d760:	cmp	r1, #0
   1d764:	beq	1d750 <__assert_fail@plt+0xc14c>
   1d768:	push	{r0, r1, lr}
   1d76c:	bl	1d548 <__assert_fail@plt+0xbf44>
   1d770:	pop	{r1, r2, lr}
   1d774:	mul	r3, r2, r0
   1d778:	sub	r1, r1, r3
   1d77c:	bx	lr
   1d780:	cmp	r3, #0
   1d784:	cmpeq	r2, #0
   1d788:	bne	1d7a0 <__assert_fail@plt+0xc19c>
   1d78c:	cmp	r1, #0
   1d790:	cmpeq	r0, #0
   1d794:	mvnne	r1, #0
   1d798:	mvnne	r0, #0
   1d79c:	b	1d7bc <__assert_fail@plt+0xc1b8>
   1d7a0:	sub	sp, sp, #8
   1d7a4:	push	{sp, lr}
   1d7a8:	bl	1d7cc <__assert_fail@plt+0xc1c8>
   1d7ac:	ldr	lr, [sp, #4]
   1d7b0:	add	sp, sp, #8
   1d7b4:	pop	{r2, r3}
   1d7b8:	bx	lr
   1d7bc:	push	{r1, lr}
   1d7c0:	mov	r0, #8
   1d7c4:	bl	11250 <raise@plt>
   1d7c8:	pop	{r1, pc}
   1d7cc:	cmp	r1, r3
   1d7d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d7d4:	cmpeq	r0, r2
   1d7d8:	mov	r4, r0
   1d7dc:	mov	r5, r1
   1d7e0:	ldr	r9, [sp, #28]
   1d7e4:	movcc	r0, #0
   1d7e8:	movcc	r1, #0
   1d7ec:	bcc	1d8e4 <__assert_fail@plt+0xc2e0>
   1d7f0:	cmp	r3, #0
   1d7f4:	clzeq	ip, r2
   1d7f8:	clzne	ip, r3
   1d7fc:	addeq	ip, ip, #32
   1d800:	cmp	r5, #0
   1d804:	clzeq	r1, r4
   1d808:	addeq	r1, r1, #32
   1d80c:	clzne	r1, r5
   1d810:	sub	ip, ip, r1
   1d814:	sub	lr, ip, #32
   1d818:	lsl	r7, r3, ip
   1d81c:	rsb	r8, ip, #32
   1d820:	orr	r7, r7, r2, lsl lr
   1d824:	orr	r7, r7, r2, lsr r8
   1d828:	lsl	r6, r2, ip
   1d82c:	cmp	r5, r7
   1d830:	cmpeq	r4, r6
   1d834:	movcc	r0, #0
   1d838:	movcc	r1, #0
   1d83c:	bcc	1d858 <__assert_fail@plt+0xc254>
   1d840:	mov	r3, #1
   1d844:	subs	r4, r4, r6
   1d848:	lsl	r1, r3, lr
   1d84c:	lsl	r0, r3, ip
   1d850:	orr	r1, r1, r3, lsr r8
   1d854:	sbc	r5, r5, r7
   1d858:	cmp	ip, #0
   1d85c:	beq	1d8e4 <__assert_fail@plt+0xc2e0>
   1d860:	lsrs	r3, r7, #1
   1d864:	rrx	r2, r6
   1d868:	mov	r6, ip
   1d86c:	b	1d890 <__assert_fail@plt+0xc28c>
   1d870:	subs	r4, r4, r2
   1d874:	sbc	r5, r5, r3
   1d878:	adds	r4, r4, r4
   1d87c:	adc	r5, r5, r5
   1d880:	adds	r4, r4, #1
   1d884:	adc	r5, r5, #0
   1d888:	subs	r6, r6, #1
   1d88c:	beq	1d8ac <__assert_fail@plt+0xc2a8>
   1d890:	cmp	r5, r3
   1d894:	cmpeq	r4, r2
   1d898:	bcs	1d870 <__assert_fail@plt+0xc26c>
   1d89c:	adds	r4, r4, r4
   1d8a0:	adc	r5, r5, r5
   1d8a4:	subs	r6, r6, #1
   1d8a8:	bne	1d890 <__assert_fail@plt+0xc28c>
   1d8ac:	lsr	r6, r4, ip
   1d8b0:	lsr	r7, r5, ip
   1d8b4:	orr	r6, r6, r5, lsl r8
   1d8b8:	adds	r2, r0, r4
   1d8bc:	orr	r6, r6, r5, lsr lr
   1d8c0:	adc	r3, r1, r5
   1d8c4:	lsl	r1, r7, ip
   1d8c8:	orr	r1, r1, r6, lsl lr
   1d8cc:	lsl	r0, r6, ip
   1d8d0:	orr	r1, r1, r6, lsr r8
   1d8d4:	subs	r0, r2, r0
   1d8d8:	mov	r4, r6
   1d8dc:	mov	r5, r7
   1d8e0:	sbc	r1, r3, r1
   1d8e4:	cmp	r9, #0
   1d8e8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1d8ec:	strd	r4, [r9]
   1d8f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1d8f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d8f8:	mov	r7, r0
   1d8fc:	ldr	r6, [pc, #72]	; 1d94c <__assert_fail@plt+0xc348>
   1d900:	ldr	r5, [pc, #72]	; 1d950 <__assert_fail@plt+0xc34c>
   1d904:	add	r6, pc, r6
   1d908:	add	r5, pc, r5
   1d90c:	sub	r6, r6, r5
   1d910:	mov	r8, r1
   1d914:	mov	r9, r2
   1d918:	bl	1120c <fstatfs64@plt-0x20>
   1d91c:	asrs	r6, r6, #2
   1d920:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d924:	mov	r4, #0
   1d928:	add	r4, r4, #1
   1d92c:	ldr	r3, [r5], #4
   1d930:	mov	r2, r9
   1d934:	mov	r1, r8
   1d938:	mov	r0, r7
   1d93c:	blx	r3
   1d940:	cmp	r6, r4
   1d944:	bne	1d928 <__assert_fail@plt+0xc324>
   1d948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d94c:	strdeq	r1, [r1], -ip
   1d950:	strdeq	r1, [r1], -r4
   1d954:	bx	lr
   1d958:	ldr	r3, [pc, #12]	; 1d96c <__assert_fail@plt+0xc368>
   1d95c:	mov	r1, #0
   1d960:	add	r3, pc, r3
   1d964:	ldr	r2, [r3]
   1d968:	b	1149c <__cxa_atexit@plt>
   1d96c:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

0001d970 <.fini>:
   1d970:	push	{r3, lr}
   1d974:	pop	{r3, pc}
