
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	13dec <__assert_fail@plt+0x29d8>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	ip, r1, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #28, 20	; 0x1c000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <pause@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <read@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <nanosleep@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <fwrite_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <fputc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <rawmemchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <poll@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <__fxstat64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__poll_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <open64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <__freading@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <inotify_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <memrchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <inotify_add_watch@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__cxa_atexit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <strtod@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <memchr@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fclose@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <fseeko64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <strtod_l@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <fcntl64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <__overflow@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <newlocale@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <bindtextdomain@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <__xstat64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <isatty@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <inotify_rm_watch@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3368]!	; 0xd28

00011408 <__lxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3360]!	; 0xd20

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00011420 <.text>:
   11420:	mov	r2, #10
   11424:	mov	r3, #0
   11428:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1142c:	mov	r5, r0
   11430:	ldr	r0, [r1]
   11434:	strd	r6, [sp, #8]
   11438:	mov	r6, r1
   1143c:	strd	r8, [sp, #16]
   11440:	strd	sl, [sp, #24]
   11444:	movw	sl, #57808	; 0xe1d0
   11448:	movt	sl, #2
   1144c:	str	lr, [sp, #32]
   11450:	vpush	{d8-d10}
   11454:	sub	sp, sp, #356	; 0x164
   11458:	strd	r2, [sp, #128]	; 0x80
   1145c:	bl	17ba0 <__assert_fail@plt+0x678c>
   11460:	movw	r1, #52356	; 0xcc84
   11464:	movt	r1, #1
   11468:	mov	r0, #6
   1146c:	bl	11378 <setlocale@plt>
   11470:	movw	r1, #53040	; 0xcf30
   11474:	movt	r1, #1
   11478:	movw	r0, #52868	; 0xce84
   1147c:	movt	r0, #1
   11480:	bl	113b4 <bindtextdomain@plt>
   11484:	movw	r0, #52868	; 0xce84
   11488:	movt	r0, #1
   1148c:	bl	1118c <textdomain@plt>
   11490:	movw	r0, #25676	; 0x644c
   11494:	movt	r0, #1
   11498:	bl	1bfe4 <__assert_fail@plt+0xabd0>
   1149c:	mov	r3, #0
   114a0:	mov	r2, #1
   114a4:	mov	r1, #10
   114a8:	cmp	r5, #2
   114ac:	strb	r1, [sl]
   114b0:	strb	r3, [sl, #1]
   114b4:	strb	r3, [sl, #4]
   114b8:	strb	r2, [sl, #5]
   114bc:	strb	r3, [sl, #6]
   114c0:	strb	r3, [sl, #7]
   114c4:	beq	114f0 <__assert_fail@plt+0xdc>
   114c8:	cmp	r5, #3
   114cc:	beq	11a20 <__assert_fail@plt+0x60c>
   114d0:	cmp	r5, #4
   114d4:	bne	11510 <__assert_fail@plt+0xfc>
   114d8:	movw	r1, #53064	; 0xcf48
   114dc:	movt	r1, #1
   114e0:	ldr	r0, [r6, #8]
   114e4:	bl	110cc <strcmp@plt>
   114e8:	cmp	r0, #0
   114ec:	bne	11510 <__assert_fail@plt+0xfc>
   114f0:	bl	17b3c <__assert_fail@plt+0x6728>
   114f4:	ldr	r2, [r6, #4]
   114f8:	mov	ip, r2
   114fc:	ldrb	r3, [ip], #1
   11500:	cmp	r3, #43	; 0x2b
   11504:	beq	11a04 <__assert_fail@plt+0x5f0>
   11508:	cmp	r3, #45	; 0x2d
   1150c:	beq	11924 <__assert_fail@plt+0x510>
   11510:	mov	r3, #0
   11514:	ldr	r7, [pc, #1020]	; 11918 <__assert_fail@plt+0x504>
   11518:	sub	r5, r5, r3
   1151c:	add	r6, r6, r3, lsl #2
   11520:	mov	r9, #0
   11524:	vldr	d8, [pc, #996]	; 11910 <__assert_fail@plt+0x4fc>
   11528:	str	r9, [sp, #28]
   1152c:	sub	r3, r7, #20
   11530:	sub	fp, r7, #84	; 0x54
   11534:	str	r3, [sp, #32]
   11538:	mov	r4, #0
   1153c:	movw	r2, #53376	; 0xd080
   11540:	movt	r2, #1
   11544:	mov	r3, r7
   11548:	mov	r1, r6
   1154c:	mov	r0, r5
   11550:	str	r4, [sp]
   11554:	bl	11270 <getopt_long@plt>
   11558:	cmn	r0, #1
   1155c:	beq	11a50 <__assert_fail@plt+0x63c>
   11560:	cmp	r0, #113	; 0x71
   11564:	beq	11888 <__assert_fail@plt+0x474>
   11568:	ble	11598 <__assert_fail@plt+0x184>
   1156c:	movw	r3, #257	; 0x101
   11570:	cmp	r0, r3
   11574:	beq	11828 <__assert_fail@plt+0x414>
   11578:	bgt	117dc <__assert_fail@plt+0x3c8>
   1157c:	cmp	r0, #118	; 0x76
   11580:	beq	1181c <__assert_fail@plt+0x408>
   11584:	ble	116c4 <__assert_fail@plt+0x2b0>
   11588:	cmp	r0, #122	; 0x7a
   1158c:	bne	115d0 <__assert_fail@plt+0x1bc>
   11590:	strb	r4, [sl]
   11594:	b	11538 <__assert_fail@plt+0x124>
   11598:	cmp	r0, #57	; 0x39
   1159c:	ble	1164c <__assert_fail@plt+0x238>
   115a0:	cmp	r0, #99	; 0x63
   115a4:	beq	11740 <__assert_fail@plt+0x32c>
   115a8:	bgt	115e4 <__assert_fail@plt+0x1d0>
   115ac:	cmp	r0, #70	; 0x46
   115b0:	bne	132cc <__assert_fail@plt+0x1eb8>
   115b4:	mov	r3, #1
   115b8:	movw	r2, #57672	; 0xe148
   115bc:	movt	r2, #2
   115c0:	strb	r3, [sl, #2]
   115c4:	str	r3, [r2, #4]
   115c8:	strb	r3, [sl, #7]
   115cc:	b	11538 <__assert_fail@plt+0x124>
   115d0:	cmp	r0, #256	; 0x100
   115d4:	bne	132cc <__assert_fail@plt+0x1eb8>
   115d8:	mov	r3, #1
   115dc:	strb	r3, [sl, #2]
   115e0:	b	11538 <__assert_fail@plt+0x124>
   115e4:	cmp	r0, #102	; 0x66
   115e8:	bne	11738 <__assert_fail@plt+0x324>
   115ec:	movw	r3, #57800	; 0xe1c8
   115f0:	movt	r3, #2
   115f4:	ldr	r1, [r3]
   115f8:	mov	r3, #1
   115fc:	strb	r3, [sl, #7]
   11600:	cmp	r1, #0
   11604:	beq	118f8 <__assert_fail@plt+0x4e4>
   11608:	movw	r0, #57700	; 0xe164
   1160c:	movt	r0, #2
   11610:	str	r3, [sp, #8]
   11614:	ldr	ip, [r0]
   11618:	mov	r3, #4
   1161c:	movw	r0, #53160	; 0xcfa8
   11620:	movt	r0, #1
   11624:	ldr	r2, [pc, #752]	; 1191c <__assert_fail@plt+0x508>
   11628:	stm	sp, {r3, ip}
   1162c:	ldr	r3, [sp, #32]
   11630:	bl	161d8 <__assert_fail@plt+0x4dc4>
   11634:	add	r0, fp, r0, lsl #2
   11638:	movw	r3, #57672	; 0xe148
   1163c:	movt	r3, #2
   11640:	ldr	r2, [r0, #64]	; 0x40
   11644:	str	r2, [r3, #4]
   11648:	b	11538 <__assert_fail@plt+0x124>
   1164c:	cmp	r0, #48	; 0x30
   11650:	mov	r3, r0
   11654:	bge	132d4 <__assert_fail@plt+0x1ec0>
   11658:	cmn	r0, #3
   1165c:	bne	1180c <__assert_fail@plt+0x3f8>
   11660:	movw	r2, #53272	; 0xd018
   11664:	movt	r2, #1
   11668:	movw	r3, #53288	; 0xd028
   1166c:	movt	r3, #1
   11670:	movw	r1, #53308	; 0xd03c
   11674:	movt	r1, #1
   11678:	str	r4, [sp, #16]
   1167c:	movw	r0, #57796	; 0xe1c4
   11680:	movt	r0, #2
   11684:	str	r2, [sp, #12]
   11688:	movw	r2, #53324	; 0xd04c
   1168c:	movt	r2, #1
   11690:	stmib	sp, {r1, r3}
   11694:	movw	r3, #57696	; 0xe160
   11698:	movt	r3, #2
   1169c:	movw	r1, #50140	; 0xc3dc
   116a0:	movt	r1, #1
   116a4:	str	r2, [sp]
   116a8:	movw	r2, #52864	; 0xce80
   116ac:	movt	r2, #1
   116b0:	ldr	r0, [r0]
   116b4:	ldr	r3, [r3]
   116b8:	bl	1a40c <__assert_fail@plt+0x8ff8>
   116bc:	mov	r0, r4
   116c0:	bl	11294 <exit@plt>
   116c4:	cmp	r0, #115	; 0x73
   116c8:	bne	132cc <__assert_fail@plt+0x1eb8>
   116cc:	movw	r8, #57800	; 0xe1c8
   116d0:	movt	r8, #2
   116d4:	mov	r1, r4
   116d8:	movw	r3, #25500	; 0x639c
   116dc:	movt	r3, #1
   116e0:	add	r2, sp, #248	; 0xf8
   116e4:	ldr	r0, [r8]
   116e8:	bl	1abd8 <__assert_fail@plt+0x97c4>
   116ec:	cmp	r0, #0
   116f0:	beq	11704 <__assert_fail@plt+0x2f0>
   116f4:	vldr	d8, [sp, #248]	; 0xf8
   116f8:	vcmpe.f64	d8, #0.0
   116fc:	vmrs	APSR_nzcv, fpscr
   11700:	bge	11538 <__assert_fail@plt+0x124>
   11704:	mov	r2, #5
   11708:	movw	r1, #53240	; 0xcff8
   1170c:	movt	r1, #1
   11710:	mov	r0, #0
   11714:	bl	11174 <dcgettext@plt>
   11718:	mov	r4, r0
   1171c:	ldr	r0, [r8]
   11720:	bl	19e90 <__assert_fail@plt+0x8a7c>
   11724:	mov	r3, r0
   11728:	mov	r2, r4
   1172c:	mov	r1, #0
   11730:	mov	r0, #1
   11734:	bl	1121c <error@plt>
   11738:	cmp	r0, #110	; 0x6e
   1173c:	bne	132cc <__assert_fail@plt+0x1eb8>
   11740:	movw	r8, #57800	; 0xe1c8
   11744:	movt	r8, #2
   11748:	sub	r2, r0, #110	; 0x6e
   1174c:	ldr	r3, [r8]
   11750:	clz	r2, r2
   11754:	lsr	r2, r2, #5
   11758:	strb	r2, [sl, #5]
   1175c:	ldrb	r2, [r3]
   11760:	cmp	r2, #43	; 0x2b
   11764:	moveq	r3, #1
   11768:	strbeq	r3, [sl, #6]
   1176c:	beq	1177c <__assert_fail@plt+0x368>
   11770:	cmp	r2, #45	; 0x2d
   11774:	addeq	r3, r3, #1
   11778:	streq	r3, [r8]
   1177c:	cmp	r0, #110	; 0x6e
   11780:	ldr	r4, [r8]
   11784:	mov	r2, #5
   11788:	movweq	r1, #53096	; 0xcf68
   1178c:	movwne	r1, #53120	; 0xcf80
   11790:	movteq	r1, #1
   11794:	movtne	r1, #1
   11798:	mov	r0, #0
   1179c:	bl	11174 <dcgettext@plt>
   117a0:	mov	ip, #0
   117a4:	mvn	r2, #0
   117a8:	str	r0, [sp, #12]
   117ac:	mvn	r3, #0
   117b0:	movw	r1, #53144	; 0xcf98
   117b4:	movt	r1, #1
   117b8:	mov	r0, r4
   117bc:	strd	r2, [sp]
   117c0:	mov	r2, #0
   117c4:	mov	r3, #0
   117c8:	str	r1, [sp, #8]
   117cc:	str	ip, [sp, #16]
   117d0:	bl	1ab1c <__assert_fail@plt+0x9708>
   117d4:	strd	r0, [sp, #128]	; 0x80
   117d8:	b	11538 <__assert_fail@plt+0x124>
   117dc:	movw	r3, #259	; 0x103
   117e0:	cmp	r0, r3
   117e4:	beq	118ec <__assert_fail@plt+0x4d8>
   117e8:	blt	11894 <__assert_fail@plt+0x480>
   117ec:	cmp	r0, #260	; 0x104
   117f0:	beq	115ec <__assert_fail@plt+0x1d8>
   117f4:	movw	r3, #261	; 0x105
   117f8:	cmp	r0, r3
   117fc:	bne	132cc <__assert_fail@plt+0x1eb8>
   11800:	mov	r3, #1
   11804:	strb	r3, [sl, #3]
   11808:	b	11538 <__assert_fail@plt+0x124>
   1180c:	cmn	r0, #2
   11810:	bne	132cc <__assert_fail@plt+0x1eb8>
   11814:	mov	r0, r4
   11818:	bl	15a30 <__assert_fail@plt+0x461c>
   1181c:	mov	r3, #1
   11820:	str	r3, [sp, #28]
   11824:	b	11538 <__assert_fail@plt+0x124>
   11828:	movw	r3, #57800	; 0xe1c8
   1182c:	movt	r3, #2
   11830:	ldr	r8, [r3]
   11834:	mov	r2, #5
   11838:	movw	r1, #53172	; 0xcfb4
   1183c:	movt	r1, #1
   11840:	mov	r0, r4
   11844:	bl	11174 <dcgettext@plt>
   11848:	mvn	r9, #0
   1184c:	movw	r1, #52356	; 0xcc84
   11850:	movt	r1, #1
   11854:	mov	r3, #0
   11858:	mov	r2, #0
   1185c:	str	r0, [sp, #12]
   11860:	mov	r0, r8
   11864:	mvn	r8, #0
   11868:	strd	r8, [sp]
   1186c:	str	r1, [sp, #8]
   11870:	str	r4, [sp, #16]
   11874:	bl	1ab1c <__assert_fail@plt+0x9708>
   11878:	movw	r3, #57672	; 0xe148
   1187c:	movt	r3, #2
   11880:	strd	r0, [r3, #16]
   11884:	b	11538 <__assert_fail@plt+0x124>
   11888:	mov	r3, #2
   1188c:	str	r3, [sp, #28]
   11890:	b	11538 <__assert_fail@plt+0x124>
   11894:	movw	r3, #57800	; 0xe1c8
   11898:	movt	r3, #2
   1189c:	ldr	r8, [r3]
   118a0:	mov	r2, #5
   118a4:	movw	r1, #53228	; 0xcfec
   118a8:	movt	r1, #1
   118ac:	mov	r0, r4
   118b0:	bl	11174 <dcgettext@plt>
   118b4:	mov	r9, #0
   118b8:	movw	r1, #52356	; 0xcc84
   118bc:	movt	r1, #1
   118c0:	mov	r2, #0
   118c4:	mov	r3, #0
   118c8:	str	r0, [sp, #12]
   118cc:	mov	r0, r8
   118d0:	mvn	r8, #-2147483648	; 0x80000000
   118d4:	strd	r8, [sp]
   118d8:	str	r1, [sp, #8]
   118dc:	str	r4, [sp, #16]
   118e0:	bl	1ab1c <__assert_fail@plt+0x9708>
   118e4:	str	r0, [sl, #8]
   118e8:	b	11538 <__assert_fail@plt+0x124>
   118ec:	mov	r3, #1
   118f0:	strb	r3, [sl, #12]
   118f4:	b	11538 <__assert_fail@plt+0x124>
   118f8:	movw	r3, #57672	; 0xe148
   118fc:	movt	r3, #2
   11900:	mov	r2, #2
   11904:	str	r2, [r3, #4]
   11908:	b	11538 <__assert_fail@plt+0x124>
   1190c:	nop	{0}
   11910:	andeq	r0, r0, r0
   11914:	svccc	0x00f00000	; IMB
   11918:	andeq	ip, r1, ip, asr r0
   1191c:	andeq	ip, r1, r0, asr r0
   11920:	andeq	lr, r2, r0, asr r1
   11924:	movw	r3, #3503	; 0xdaf
   11928:	movt	r3, #3
   1192c:	cmp	r0, r3
   11930:	ldrb	r3, [r2, #1]
   11934:	ble	11950 <__assert_fail@plt+0x53c>
   11938:	sub	r2, r3, #99	; 0x63
   1193c:	clz	r2, r2
   11940:	lsr	r2, r2, #5
   11944:	ldrb	r2, [ip, r2]
   11948:	cmp	r2, #0
   1194c:	beq	11510 <__assert_fail@plt+0xfc>
   11950:	mov	r9, #0
   11954:	sub	r2, r3, #48	; 0x30
   11958:	cmp	r2, #9
   1195c:	mov	r2, ip
   11960:	bhi	11974 <__assert_fail@plt+0x560>
   11964:	ldrb	r3, [r2, #1]!
   11968:	sub	r1, r3, #48	; 0x30
   1196c:	cmp	r1, #9
   11970:	bls	11964 <__assert_fail@plt+0x550>
   11974:	cmp	r3, #99	; 0x63
   11978:	beq	12754 <__assert_fail@plt+0x1340>
   1197c:	cmp	r3, #108	; 0x6c
   11980:	beq	11a40 <__assert_fail@plt+0x62c>
   11984:	cmp	r3, #98	; 0x62
   11988:	moveq	r7, #0
   1198c:	moveq	r1, #5120	; 0x1400
   11990:	beq	11a48 <__assert_fail@plt+0x634>
   11994:	mov	r3, r2
   11998:	mov	r7, #1
   1199c:	mov	r1, #10
   119a0:	ldrb	r0, [r3]
   119a4:	cmp	r0, #102	; 0x66
   119a8:	addeq	r3, r3, #1
   119ac:	moveq	r8, #1
   119b0:	ldrb	r4, [r3]
   119b4:	movne	r8, #0
   119b8:	cmp	r4, #0
   119bc:	bne	11510 <__assert_fail@plt+0xfc>
   119c0:	cmp	ip, r2
   119c4:	beq	11e70 <__assert_fail@plt+0xa5c>
   119c8:	movw	r1, #53068	; 0xcf4c
   119cc:	movt	r1, #1
   119d0:	add	r3, sp, #128	; 0x80
   119d4:	mov	r0, ip
   119d8:	mov	r2, #10
   119dc:	str	r1, [sp]
   119e0:	mov	r1, r4
   119e4:	bl	1ac9c <__assert_fail@plt+0x9888>
   119e8:	bics	r3, r0, #2
   119ec:	bne	13cb4 <__assert_fail@plt+0x28a0>
   119f0:	mov	r3, #1
   119f4:	strb	r7, [sl, #5]
   119f8:	strb	r9, [sl, #6]
   119fc:	strb	r8, [sl, #7]
   11a00:	b	11514 <__assert_fail@plt+0x100>
   11a04:	sub	r0, r0, #199680	; 0x30c00
   11a08:	sub	r0, r0, #432	; 0x1b0
   11a0c:	cmp	r0, #696	; 0x2b8
   11a10:	ldrbhi	r3, [r2, #1]
   11a14:	movhi	r9, #1
   11a18:	bhi	11954 <__assert_fail@plt+0x540>
   11a1c:	b	11510 <__assert_fail@plt+0xfc>
   11a20:	ldr	r3, [r6, #8]
   11a24:	ldrb	r2, [r3]
   11a28:	cmp	r2, #45	; 0x2d
   11a2c:	bne	114f0 <__assert_fail@plt+0xdc>
   11a30:	ldrb	r3, [r3, #1]
   11a34:	cmp	r3, #0
   11a38:	bne	114d8 <__assert_fail@plt+0xc4>
   11a3c:	b	114f0 <__assert_fail@plt+0xdc>
   11a40:	mov	r7, #1
   11a44:	mov	r1, #10
   11a48:	add	r3, r2, #1
   11a4c:	b	119a0 <__assert_fail@plt+0x58c>
   11a50:	ldrb	r3, [sl, #2]
   11a54:	ldr	r9, [sp, #28]
   11a58:	cmp	r3, r4
   11a5c:	beq	11e08 <__assert_fail@plt+0x9f4>
   11a60:	ldrb	r7, [sl, #7]
   11a64:	cmp	r7, r4
   11a68:	beq	13184 <__assert_fail@plt+0x1d70>
   11a6c:	movw	r3, #57672	; 0xe148
   11a70:	movt	r3, #2
   11a74:	ldr	r3, [r3, #4]
   11a78:	cmp	r3, #2
   11a7c:	beq	11de4 <__assert_fail@plt+0x9d0>
   11a80:	ldr	r0, [sl, #8]
   11a84:	cmp	r0, #0
   11a88:	bne	11e20 <__assert_fail@plt+0xa0c>
   11a8c:	ldrb	r3, [sl, #6]
   11a90:	cmp	r3, #0
   11a94:	beq	11ab0 <__assert_fail@plt+0x69c>
   11a98:	ldrd	r0, [sp, #128]	; 0x80
   11a9c:	orrs	r3, r0, r1
   11aa0:	beq	11ab0 <__assert_fail@plt+0x69c>
   11aa4:	subs	r2, r0, #1
   11aa8:	sbc	r3, r1, #0
   11aac:	strd	r2, [sp, #128]	; 0x80
   11ab0:	movw	r3, #57784	; 0xe1b8
   11ab4:	movt	r3, #2
   11ab8:	ldr	r3, [r3]
   11abc:	cmp	r3, r5
   11ac0:	bge	12540 <__assert_fail@plt+0x112c>
   11ac4:	add	r6, r6, r3, lsl #2
   11ac8:	sub	r2, r5, r3
   11acc:	str	r2, [sp, #28]
   11ad0:	ldr	r3, [sp, #28]
   11ad4:	movw	r5, #49500	; 0xc15c
   11ad8:	movt	r5, #1
   11adc:	mov	r7, r6
   11ae0:	mov	r8, #0
   11ae4:	add	r4, r6, r3, lsl #2
   11ae8:	ldr	r0, [r7], #4
   11aec:	mov	r1, r5
   11af0:	bl	110cc <strcmp@plt>
   11af4:	cmp	r0, #0
   11af8:	moveq	r8, #1
   11afc:	cmp	r4, r7
   11b00:	bne	11ae8 <__assert_fail@plt+0x6d4>
   11b04:	cmp	r8, #0
   11b08:	beq	11b6c <__assert_fail@plt+0x758>
   11b0c:	movw	r3, #57672	; 0xe148
   11b10:	movt	r3, #2
   11b14:	ldr	r5, [r3, #4]
   11b18:	cmp	r5, #1
   11b1c:	beq	13cf8 <__assert_fail@plt+0x28e4>
   11b20:	ldrb	r3, [sl, #7]
   11b24:	cmp	r3, #0
   11b28:	beq	12760 <__assert_fail@plt+0x134c>
   11b2c:	ldr	r1, [sl, #8]
   11b30:	cmp	r1, #0
   11b34:	bne	11e80 <__assert_fail@plt+0xa6c>
   11b38:	ldr	r3, [sp, #28]
   11b3c:	cmp	r3, #1
   11b40:	cmpeq	r5, #2
   11b44:	bne	11e80 <__assert_fail@plt+0xa6c>
   11b48:	add	r2, sp, #248	; 0xf8
   11b4c:	mov	r0, #3
   11b50:	bl	111c8 <__fxstat64@plt>
   11b54:	cmp	r0, #0
   11b58:	bne	11e80 <__assert_fail@plt+0xa6c>
   11b5c:	ldr	r3, [sp, #264]	; 0x108
   11b60:	and	r3, r3, #61440	; 0xf000
   11b64:	cmp	r3, #32768	; 0x8000
   11b68:	beq	11e80 <__assert_fail@plt+0xa6c>
   11b6c:	ldrd	r2, [sp, #128]	; 0x80
   11b70:	orrs	r3, r2, r3
   11b74:	bne	11b84 <__assert_fail@plt+0x770>
   11b78:	ldrb	r3, [sl, #7]
   11b7c:	cmp	r3, #0
   11b80:	beq	1276c <__assert_fail@plt+0x1358>
   11b84:	mov	r1, #80	; 0x50
   11b88:	ldr	r0, [sp, #28]
   11b8c:	bl	1a684 <__assert_fail@plt+0x9270>
   11b90:	mov	r3, r0
   11b94:	str	r0, [sp, #76]	; 0x4c
   11b98:	ldr	r2, [r6], #4
   11b9c:	cmp	r4, r6
   11ba0:	str	r2, [r3], #80	; 0x50
   11ba4:	bne	11b98 <__assert_fail@plt+0x784>
   11ba8:	cmp	r9, #1
   11bac:	beq	125e4 <__assert_fail@plt+0x11d0>
   11bb0:	ldr	r3, [sp, #28]
   11bb4:	subs	r3, r3, #1
   11bb8:	movne	r3, #1
   11bbc:	cmp	r9, #0
   11bc0:	moveq	r9, r3
   11bc4:	movne	r9, #0
   11bc8:	cmp	r9, #0
   11bcc:	bne	125e4 <__assert_fail@plt+0x11d0>
   11bd0:	mvn	r2, #0
   11bd4:	mov	r3, #80	; 0x50
   11bd8:	str	sl, [sp, #32]
   11bdc:	mov	r1, #1
   11be0:	str	r2, [sp, #100]	; 0x64
   11be4:	str	r2, [sp, #112]	; 0x70
   11be8:	ldr	r2, [sp, #28]
   11bec:	str	r1, [sp, #56]	; 0x38
   11bf0:	mul	r3, r3, r2
   11bf4:	movw	r2, #49500	; 0xc15c
   11bf8:	movt	r2, #1
   11bfc:	str	r2, [sp, #72]	; 0x48
   11c00:	ldr	r2, [sp, #76]	; 0x4c
   11c04:	str	r3, [sp, #116]	; 0x74
   11c08:	mov	fp, r2
   11c0c:	add	r3, r2, r3
   11c10:	str	r3, [sp, #60]	; 0x3c
   11c14:	ldr	r4, [fp]
   11c18:	ldr	r1, [sp, #72]	; 0x48
   11c1c:	ldrd	r2, [sp, #128]	; 0x80
   11c20:	mov	r0, r4
   11c24:	strd	r2, [sp, #40]	; 0x28
   11c28:	bl	110cc <strcmp@plt>
   11c2c:	subs	r2, r0, #0
   11c30:	str	r2, [sp, #64]	; 0x40
   11c34:	bne	12068 <__assert_fail@plt+0xc54>
   11c38:	str	r2, [sp, #36]	; 0x24
   11c3c:	mov	r3, #1
   11c40:	ldr	r2, [sp, #32]
   11c44:	strb	r3, [r2, #4]
   11c48:	mov	r3, #1
   11c4c:	strb	r3, [fp, #46]	; 0x2e
   11c50:	ldr	r3, [sp, #32]
   11c54:	ldrb	r3, [r3, #1]
   11c58:	cmp	r3, #0
   11c5c:	bne	1220c <__assert_fail@plt+0xdf8>
   11c60:	ldr	r0, [fp]
   11c64:	mov	r4, #0
   11c68:	mov	r5, #0
   11c6c:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   11c70:	ldr	r3, [sp, #32]
   11c74:	str	r0, [sp, #68]	; 0x44
   11c78:	mov	r0, #3
   11c7c:	strd	r4, [sp, #144]	; 0x90
   11c80:	ldr	r1, [sp, #36]	; 0x24
   11c84:	ldrb	r3, [r3, #5]
   11c88:	cmp	r3, #0
   11c8c:	str	r3, [sp, #48]	; 0x30
   11c90:	add	r3, sp, #248	; 0xf8
   11c94:	mov	r2, r3
   11c98:	str	r3, [sp, #84]	; 0x54
   11c9c:	beq	11ee8 <__assert_fail@plt+0xad4>
   11ca0:	bl	111c8 <__fxstat64@plt>
   11ca4:	cmp	r0, #0
   11ca8:	bne	12598 <__assert_fail@plt+0x1184>
   11cac:	ldr	r3, [sp, #32]
   11cb0:	ldrb	r3, [r3, #6]
   11cb4:	cmp	r3, #0
   11cb8:	str	r3, [sp, #80]	; 0x50
   11cbc:	bne	124e0 <__assert_fail@plt+0x10cc>
   11cc0:	ldr	r3, [sp, #32]
   11cc4:	ldrb	r3, [r3, #12]
   11cc8:	cmp	r3, #0
   11ccc:	bne	11ce0 <__assert_fail@plt+0x8cc>
   11cd0:	ldr	r3, [sp, #264]	; 0x108
   11cd4:	and	r3, r3, #61440	; 0xf000
   11cd8:	cmp	r3, #32768	; 0x8000
   11cdc:	beq	12798 <__assert_fail@plt+0x1384>
   11ce0:	movw	r0, #8204	; 0x200c
   11ce4:	mov	r4, #0
   11ce8:	bl	1a51c <__assert_fail@plt+0x9108>
   11cec:	add	r3, r0, #8192	; 0x2000
   11cf0:	mov	sl, r0
   11cf4:	movw	r0, #8204	; 0x200c
   11cf8:	mov	r9, r4
   11cfc:	str	r4, [r3]
   11d00:	str	r4, [r3, #4]
   11d04:	str	r4, [r3, #8]
   11d08:	str	sl, [sp, #52]	; 0x34
   11d0c:	bl	1a51c <__assert_fail@plt+0x9108>
   11d10:	mov	r6, r0
   11d14:	str	fp, [sp, #96]	; 0x60
   11d18:	mov	r2, #8192	; 0x2000
   11d1c:	mov	r1, r6
   11d20:	ldr	r0, [sp, #36]	; 0x24
   11d24:	bl	19ea8 <__assert_fail@plt+0x8a94>
   11d28:	sub	r3, r0, #1
   11d2c:	mov	r5, r0
   11d30:	cmn	r3, #3
   11d34:	bhi	12274 <__assert_fail@plt+0xe60>
   11d38:	ldr	r1, [sp, #32]
   11d3c:	add	r8, r6, r0
   11d40:	add	r4, r6, #8192	; 0x2000
   11d44:	mov	fp, #0
   11d48:	ldrd	r2, [sp, #144]	; 0x90
   11d4c:	str	r5, [r4]
   11d50:	ldrb	r7, [r1]
   11d54:	adds	r0, r2, r0
   11d58:	adc	r1, r3, #0
   11d5c:	strd	r0, [sp, #144]	; 0x90
   11d60:	mov	r0, r6
   11d64:	str	fp, [r4, #4]
   11d68:	str	fp, [r4, #8]
   11d6c:	b	11d7c <__assert_fail@plt+0x968>
   11d70:	add	r0, r0, #1
   11d74:	mov	fp, r3
   11d78:	str	r3, [r4, #4]
   11d7c:	sub	r2, r8, r0
   11d80:	mov	r1, r7
   11d84:	bl	11330 <memchr@plt>
   11d88:	cmp	r0, #0
   11d8c:	add	r3, fp, #1
   11d90:	bne	11d70 <__assert_fail@plt+0x95c>
   11d94:	ldr	r3, [sp, #52]	; 0x34
   11d98:	add	r8, r9, fp
   11d9c:	add	r7, r3, #8192	; 0x2000
   11da0:	ldr	r0, [r7]
   11da4:	add	r3, r5, r0
   11da8:	cmp	r3, #8192	; 0x2000
   11dac:	bcc	11eb8 <__assert_fail@plt+0xaa4>
   11db0:	add	r3, sl, #8192	; 0x2000
   11db4:	ldrd	r4, [sp, #40]	; 0x28
   11db8:	mov	r1, #0
   11dbc:	ldr	r9, [r3, #4]
   11dc0:	str	r6, [r7, #8]
   11dc4:	cmp	r5, r1
   11dc8:	sub	r9, r8, r9
   11dcc:	cmpeq	r4, r9
   11dd0:	bcs	12120 <__assert_fail@plt+0xd0c>
   11dd4:	str	r6, [sp, #52]	; 0x34
   11dd8:	mov	r6, sl
   11ddc:	ldr	sl, [r3, #8]
   11de0:	b	11d18 <__assert_fail@plt+0x904>
   11de4:	mov	r2, #5
   11de8:	movw	r1, #53464	; 0xd0d8
   11dec:	movt	r1, #1
   11df0:	mov	r0, r4
   11df4:	bl	11174 <dcgettext@plt>
   11df8:	mov	r2, r0
   11dfc:	mov	r1, r4
   11e00:	mov	r0, r4
   11e04:	bl	1121c <error@plt>
   11e08:	ldr	r0, [sl, #8]
   11e0c:	cmp	r0, #0
   11e10:	beq	11a8c <__assert_fail@plt+0x678>
   11e14:	ldrb	r4, [sl, #7]
   11e18:	cmp	r4, #0
   11e1c:	beq	12adc <__assert_fail@plt+0x16c8>
   11e20:	mov	r1, #0
   11e24:	bl	1127c <kill@plt>
   11e28:	cmp	r0, #0
   11e2c:	beq	11a8c <__assert_fail@plt+0x678>
   11e30:	bl	112dc <__errno_location@plt>
   11e34:	ldr	r3, [r0]
   11e38:	cmp	r3, #38	; 0x26
   11e3c:	bne	11a8c <__assert_fail@plt+0x678>
   11e40:	mov	r2, #5
   11e44:	movw	r1, #53584	; 0xd150
   11e48:	movt	r1, #1
   11e4c:	mov	r0, #0
   11e50:	bl	11174 <dcgettext@plt>
   11e54:	mov	r1, #0
   11e58:	mov	r2, r0
   11e5c:	mov	r0, r1
   11e60:	bl	1121c <error@plt>
   11e64:	mov	r3, #0
   11e68:	str	r3, [sl, #8]
   11e6c:	b	11a8c <__assert_fail@plt+0x678>
   11e70:	asr	r3, r1, #31
   11e74:	mov	r2, r1
   11e78:	strd	r2, [sp, #128]	; 0x80
   11e7c:	b	119f0 <__assert_fail@plt+0x5dc>
   11e80:	mov	r0, #0
   11e84:	bl	113cc <isatty@plt>
   11e88:	cmp	r0, #0
   11e8c:	beq	11b6c <__assert_fail@plt+0x758>
   11e90:	mov	r2, #5
   11e94:	movw	r1, #53664	; 0xd1a0
   11e98:	movt	r1, #1
   11e9c:	mov	r0, #0
   11ea0:	bl	11174 <dcgettext@plt>
   11ea4:	mov	r1, #0
   11ea8:	mov	r2, r0
   11eac:	mov	r0, r1
   11eb0:	bl	1121c <error@plt>
   11eb4:	b	11b6c <__assert_fail@plt+0x758>
   11eb8:	ldr	r3, [sp, #52]	; 0x34
   11ebc:	mov	r2, r5
   11ec0:	mov	r1, r6
   11ec4:	mov	r9, r8
   11ec8:	add	r0, r3, r0
   11ecc:	bl	1112c <memcpy@plt>
   11ed0:	ldrd	r0, [r4]
   11ed4:	ldrd	r2, [r7]
   11ed8:	add	r2, r2, r0
   11edc:	add	r3, r3, r1
   11ee0:	strd	r2, [r7]
   11ee4:	b	11d18 <__assert_fail@plt+0x904>
   11ee8:	bl	111c8 <__fxstat64@plt>
   11eec:	cmp	r0, #0
   11ef0:	bne	12550 <__assert_fail@plt+0x113c>
   11ef4:	ldr	r3, [sp, #32]
   11ef8:	ldrb	r2, [r3, #6]
   11efc:	ldrb	r3, [r3, #12]
   11f00:	cmp	r2, #0
   11f04:	str	r2, [sp, #48]	; 0x30
   11f08:	beq	12408 <__assert_fail@plt+0xff4>
   11f0c:	cmp	r3, #0
   11f10:	bne	12030 <__assert_fail@plt+0xc1c>
   11f14:	ldrd	r2, [sp, #40]	; 0x28
   11f18:	cmp	r2, #0
   11f1c:	sbcs	r3, r3, #0
   11f20:	blt	12030 <__assert_fail@plt+0xc1c>
   11f24:	ldr	r3, [sp, #264]	; 0x108
   11f28:	and	r3, r3, #61440	; 0xf000
   11f2c:	cmp	r3, #32768	; 0x8000
   11f30:	beq	131dc <__assert_fail@plt+0x1dc8>
   11f34:	mov	r1, #1
   11f38:	ldr	r0, [sp, #36]	; 0x24
   11f3c:	str	r1, [sp]
   11f40:	ldrd	r2, [sp, #40]	; 0x28
   11f44:	bl	111ec <lseek64@plt>
   11f48:	mvn	r3, #0
   11f4c:	mvn	r2, #0
   11f50:	cmp	r1, r3
   11f54:	cmpeq	r0, r2
   11f58:	beq	12030 <__assert_fail@plt+0xc1c>
   11f5c:	ldrd	r0, [sp, #40]	; 0x28
   11f60:	ldr	r3, [sp, #144]	; 0x90
   11f64:	ldr	r2, [sp, #148]	; 0x94
   11f68:	adds	r3, r3, r0
   11f6c:	mvn	r0, #0
   11f70:	adc	r2, r2, r1
   11f74:	mvn	r1, #0
   11f78:	strd	r0, [sp, #40]	; 0x28
   11f7c:	str	r3, [sp, #144]	; 0x90
   11f80:	str	r2, [sp, #148]	; 0x94
   11f84:	ldrd	r2, [sp, #40]	; 0x28
   11f88:	mov	r0, #0
   11f8c:	ldr	r1, [sp, #68]	; 0x44
   11f90:	strd	r2, [sp]
   11f94:	mov	r3, #1
   11f98:	ldr	r2, [sp, #36]	; 0x24
   11f9c:	str	r3, [sp, #48]	; 0x30
   11fa0:	bl	14170 <__assert_fail@plt+0x2d5c>
   11fa4:	ldr	r3, [sp, #144]	; 0x90
   11fa8:	ldr	r2, [sp, #148]	; 0x94
   11fac:	adds	r0, r3, r0
   11fb0:	adc	r1, r2, r1
   11fb4:	strd	r0, [sp, #144]	; 0x90
   11fb8:	ldr	r3, [sp, #32]
   11fbc:	ldrb	r4, [r3, #7]
   11fc0:	cmp	r4, #0
   11fc4:	bne	12138 <__assert_fail@plt+0xd24>
   11fc8:	ldr	r3, [sp, #64]	; 0x40
   11fcc:	cmp	r3, #0
   11fd0:	bne	123a8 <__assert_fail@plt+0xf94>
   11fd4:	ldr	r3, [sp, #48]	; 0x30
   11fd8:	add	fp, fp, #80	; 0x50
   11fdc:	ldr	r2, [sp, #56]	; 0x38
   11fe0:	and	r3, r3, r2
   11fe4:	str	r3, [sp, #56]	; 0x38
   11fe8:	ldr	r3, [sp, #60]	; 0x3c
   11fec:	cmp	fp, r3
   11ff0:	bne	11c14 <__assert_fail@plt+0x800>
   11ff4:	ldr	sl, [sp, #32]
   11ff8:	ldrb	r3, [sl, #7]
   11ffc:	cmp	r3, #0
   12000:	str	r3, [sp, #52]	; 0x34
   12004:	bne	12838 <__assert_fail@plt+0x1424>
   12008:	ldrb	r3, [sl, #4]
   1200c:	cmp	r3, #0
   12010:	beq	12024 <__assert_fail@plt+0xc10>
   12014:	mov	r0, #0
   12018:	bl	113fc <close@plt>
   1201c:	cmp	r0, #0
   12020:	blt	13d50 <__assert_fail@plt+0x293c>
   12024:	ldr	r3, [sp, #56]	; 0x38
   12028:	eor	r0, r3, #1
   1202c:	bl	11294 <exit@plt>
   12030:	add	ip, sp, #144	; 0x90
   12034:	ldr	r1, [sp, #36]	; 0x24
   12038:	str	ip, [sp]
   1203c:	ldrd	r2, [sp, #40]	; 0x28
   12040:	ldr	r0, [sp, #68]	; 0x44
   12044:	bl	14320 <__assert_fail@plt+0x2f0c>
   12048:	cmp	r0, #0
   1204c:	lsrne	r3, r0, #31
   12050:	strne	r3, [sp, #48]	; 0x30
   12054:	bne	11fb8 <__assert_fail@plt+0xba4>
   12058:	mvn	r2, #0
   1205c:	mvn	r3, #0
   12060:	strd	r2, [sp, #40]	; 0x28
   12064:	b	11f84 <__assert_fail@plt+0xb70>
   12068:	mov	r0, r4
   1206c:	mov	r1, #0
   12070:	bl	16814 <__assert_fail@plt+0x5400>
   12074:	ldr	r3, [sp, #32]
   12078:	str	r0, [sp, #36]	; 0x24
   1207c:	ldrb	r5, [r3, #2]
   12080:	cmp	r5, #0
   12084:	beq	12258 <__assert_fail@plt+0xe44>
   12088:	cmn	r0, #1
   1208c:	moveq	r3, #0
   12090:	strbeq	r3, [fp, #46]	; 0x2e
   12094:	bne	1274c <__assert_fail@plt+0x1338>
   12098:	ldr	r3, [sp, #32]
   1209c:	ldrb	r6, [r3, #7]
   120a0:	bl	112dc <__errno_location@plt>
   120a4:	ldr	r4, [r0]
   120a8:	cmp	r6, #0
   120ac:	beq	120d4 <__assert_fail@plt+0xcc0>
   120b0:	mov	r2, #0
   120b4:	mov	r3, #0
   120b8:	eor	r5, r5, #1
   120bc:	mvn	r1, #0
   120c0:	strd	r2, [fp, #24]
   120c4:	strd	r2, [fp, #32]
   120c8:	strb	r5, [fp, #44]	; 0x2c
   120cc:	str	r1, [fp, #48]	; 0x30
   120d0:	str	r4, [fp, #52]	; 0x34
   120d4:	mov	r2, #5
   120d8:	movw	r1, #53728	; 0xd1e0
   120dc:	movt	r1, #1
   120e0:	mov	r0, #0
   120e4:	bl	11174 <dcgettext@plt>
   120e8:	mov	r3, #0
   120ec:	mov	r5, r0
   120f0:	ldr	r0, [fp]
   120f4:	str	r3, [sp, #48]	; 0x30
   120f8:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   120fc:	mov	r1, r0
   12100:	mov	r0, #4
   12104:	bl	19bdc <__assert_fail@plt+0x87c8>
   12108:	mov	r3, r0
   1210c:	mov	r2, r5
   12110:	mov	r1, r4
   12114:	mov	r0, #0
   12118:	bl	1121c <error@plt>
   1211c:	b	11fd4 <__assert_fail@plt+0xbc0>
   12120:	movw	r0, #8204	; 0x200c
   12124:	str	r6, [sp, #52]	; 0x34
   12128:	mov	r9, r8
   1212c:	bl	1a51c <__assert_fail@plt+0x9108>
   12130:	mov	r6, r0
   12134:	b	11d18 <__assert_fail@plt+0x904>
   12138:	mov	r0, #3
   1213c:	ldr	r1, [sp, #36]	; 0x24
   12140:	ldr	r3, [sp, #48]	; 0x30
   12144:	ldr	r2, [sp, #84]	; 0x54
   12148:	sub	r3, r3, #1
   1214c:	str	r3, [fp, #52]	; 0x34
   12150:	bl	111c8 <__fxstat64@plt>
   12154:	cmp	r0, #0
   12158:	blt	126fc <__assert_fail@plt+0x12e8>
   1215c:	ldr	lr, [sp, #264]	; 0x108
   12160:	and	r3, lr, #61440	; 0xf000
   12164:	and	ip, lr, #45056	; 0xb000
   12168:	sub	r3, r3, #4096	; 0x1000
   1216c:	subs	ip, ip, #32768	; 0x8000
   12170:	bic	r3, r3, #4096	; 0x1000
   12174:	movne	ip, #1
   12178:	cmp	r3, #0
   1217c:	moveq	ip, #0
   12180:	cmp	ip, #0
   12184:	bne	122f0 <__assert_fail@plt+0xedc>
   12188:	ldr	r3, [sp, #48]	; 0x30
   1218c:	cmp	r3, #0
   12190:	beq	12370 <__assert_fail@plt+0xf5c>
   12194:	str	lr, [fp, #40]	; 0x28
   12198:	mov	r0, #0
   1219c:	ldr	r1, [sp, #64]	; 0x40
   121a0:	strb	ip, [fp, #44]	; 0x2c
   121a4:	ldr	r6, [sp, #36]	; 0x24
   121a8:	ldrd	r2, [sp, #144]	; 0x90
   121ac:	cmp	r1, #0
   121b0:	mov	r1, #0
   121b4:	ldr	lr, [sp, #328]	; 0x148
   121b8:	mvneq	ip, #0
   121bc:	movne	ip, #1
   121c0:	strd	r0, [fp, #72]	; 0x48
   121c4:	add	r1, sp, #344	; 0x158
   121c8:	strd	r2, [fp, #8]
   121cc:	ldrd	r4, [r1]
   121d0:	str	lr, [fp, #16]
   121d4:	ldrd	r2, [sp, #248]	; 0xf8
   121d8:	ldr	lr, [sp, #332]	; 0x14c
   121dc:	str	r6, [fp, #48]	; 0x30
   121e0:	ldr	r0, [fp]
   121e4:	strd	r4, [fp, #32]
   121e8:	str	ip, [fp, #56]	; 0x38
   121ec:	str	lr, [fp, #20]
   121f0:	strd	r2, [fp, #24]
   121f4:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   121f8:	mov	r1, r0
   121fc:	mov	r0, r6
   12200:	bl	14a20 <__assert_fail@plt+0x360c>
   12204:	strb	r0, [fp, #45]	; 0x2d
   12208:	b	11fd4 <__assert_fail@plt+0xbc0>
   1220c:	mov	r0, r4
   12210:	movw	r4, #57672	; 0xe148
   12214:	movt	r4, #2
   12218:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   1221c:	ldrb	lr, [r4]
   12220:	movw	ip, #49608	; 0xc1c8
   12224:	movt	ip, #1
   12228:	mov	r3, r0
   1222c:	movw	r2, #52356	; 0xcc84
   12230:	movt	r2, #1
   12234:	movw	r1, #49596	; 0xc1bc
   12238:	movt	r1, #1
   1223c:	mov	r0, #1
   12240:	cmp	lr, #0
   12244:	moveq	r2, ip
   12248:	bl	11300 <__printf_chk@plt>
   1224c:	mov	r3, #0
   12250:	strb	r3, [r4]
   12254:	b	11c60 <__assert_fail@plt+0x84c>
   12258:	ldr	r2, [sp, #36]	; 0x24
   1225c:	mov	r3, #1
   12260:	strb	r3, [fp, #46]	; 0x2e
   12264:	cmn	r2, #1
   12268:	beq	12098 <__assert_fail@plt+0xc84>
   1226c:	ldr	r4, [fp]
   12270:	b	11c50 <__assert_fail@plt+0x83c>
   12274:	mov	r0, r6
   12278:	ldr	fp, [sp, #96]	; 0x60
   1227c:	bl	16854 <__assert_fail@plt+0x5440>
   12280:	cmn	r5, #1
   12284:	beq	13208 <__assert_fail@plt+0x1df4>
   12288:	ldrd	r0, [sp, #40]	; 0x28
   1228c:	ldr	ip, [sp, #52]	; 0x34
   12290:	mov	r2, r0
   12294:	orrs	r2, r2, r1
   12298:	add	r3, ip, #8192	; 0x2000
   1229c:	moveq	r1, #1
   122a0:	ldr	r2, [r3]
   122a4:	movne	r1, #0
   122a8:	cmp	r2, #0
   122ac:	moveq	r1, #1
   122b0:	cmp	r1, #0
   122b4:	str	r1, [sp, #80]	; 0x50
   122b8:	beq	125f0 <__assert_fail@plt+0x11dc>
   122bc:	cmp	sl, #0
   122c0:	beq	122e4 <__assert_fail@plt+0xed0>
   122c4:	add	r4, sl, #8192	; 0x2000
   122c8:	mov	r0, sl
   122cc:	b	122d4 <__assert_fail@plt+0xec0>
   122d0:	add	r4, r0, #8192	; 0x2000
   122d4:	ldr	r4, [r4, #8]
   122d8:	bl	16854 <__assert_fail@plt+0x5440>
   122dc:	subs	r0, r4, #0
   122e0:	bne	122d0 <__assert_fail@plt+0xebc>
   122e4:	ldr	r3, [sp, #80]	; 0x50
   122e8:	str	r3, [sp, #48]	; 0x30
   122ec:	b	11fb8 <__assert_fail@plt+0xba4>
   122f0:	ldr	r3, [sp, #32]
   122f4:	mvn	ip, #0
   122f8:	mov	r4, #0
   122fc:	mov	r2, #5
   12300:	mov	r0, r4
   12304:	movw	r1, #53772	; 0xd20c
   12308:	movt	r1, #1
   1230c:	strb	r4, [fp, #46]	; 0x2e
   12310:	str	ip, [fp, #52]	; 0x34
   12314:	ldrb	r3, [r3, #2]
   12318:	eor	r3, r3, #1
   1231c:	strb	r3, [fp, #44]	; 0x2c
   12320:	bl	11174 <dcgettext@plt>
   12324:	mov	r5, r0
   12328:	ldr	r0, [fp]
   1232c:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   12330:	mov	r2, r0
   12334:	mov	r1, #3
   12338:	mov	r0, r4
   1233c:	bl	19cb8 <__assert_fail@plt+0x88a4>
   12340:	ldrb	r3, [fp, #44]	; 0x2c
   12344:	mov	r6, r0
   12348:	cmp	r3, r4
   1234c:	movweq	r0, #52356	; 0xcc84
   12350:	movteq	r0, #1
   12354:	bne	132a0 <__assert_fail@plt+0x1e8c>
   12358:	mov	r1, #0
   1235c:	mov	r3, r6
   12360:	str	r0, [sp]
   12364:	mov	r2, r5
   12368:	mov	r0, r1
   1236c:	bl	1121c <error@plt>
   12370:	ldr	r3, [sp, #32]
   12374:	mov	r2, #0
   12378:	ldr	r0, [fp]
   1237c:	str	r2, [sp, #48]	; 0x30
   12380:	ldrb	r3, [r3, #2]
   12384:	eor	r3, r3, #1
   12388:	strb	r3, [fp, #44]	; 0x2c
   1238c:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   12390:	mov	r1, r0
   12394:	ldr	r0, [sp, #36]	; 0x24
   12398:	bl	13f14 <__assert_fail@plt+0x2b00>
   1239c:	mvn	r3, #0
   123a0:	str	r3, [fp, #48]	; 0x30
   123a4:	b	11fd4 <__assert_fail@plt+0xbc0>
   123a8:	ldr	r0, [sp, #36]	; 0x24
   123ac:	bl	113fc <close@plt>
   123b0:	cmp	r0, #0
   123b4:	beq	11fd4 <__assert_fail@plt+0xbc0>
   123b8:	bl	112dc <__errno_location@plt>
   123bc:	mov	r2, #5
   123c0:	movw	r1, #49576	; 0xc1a8
   123c4:	movt	r1, #1
   123c8:	ldr	r5, [r0]
   123cc:	mov	r0, r4
   123d0:	bl	11174 <dcgettext@plt>
   123d4:	mov	r6, r0
   123d8:	ldr	r0, [fp]
   123dc:	str	r4, [sp, #48]	; 0x30
   123e0:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   123e4:	mov	r1, r0
   123e8:	mov	r0, #4
   123ec:	bl	19bdc <__assert_fail@plt+0x87c8>
   123f0:	mov	r3, r0
   123f4:	mov	r2, r6
   123f8:	mov	r1, r5
   123fc:	mov	r0, r4
   12400:	bl	1121c <error@plt>
   12404:	b	11fd4 <__assert_fail@plt+0xbc0>
   12408:	cmp	r3, #0
   1240c:	bne	12460 <__assert_fail@plt+0x104c>
   12410:	ldrd	r2, [sp, #40]	; 0x28
   12414:	cmp	r2, #0
   12418:	sbcs	r3, r3, #0
   1241c:	blt	12460 <__assert_fail@plt+0x104c>
   12420:	ldr	r3, [sp, #264]	; 0x108
   12424:	and	r3, r3, #53248	; 0xd000
   12428:	cmp	r3, #32768	; 0x8000
   1242c:	bne	12b04 <__assert_fail@plt+0x16f0>
   12430:	add	r3, sp, #296	; 0x128
   12434:	mvn	r4, #0
   12438:	ldrd	r2, [r3]
   1243c:	mvn	r5, #0
   12440:	strd	r2, [sp, #88]	; 0x58
   12444:	ldr	r2, [sp, #304]	; 0x130
   12448:	sub	r3, r2, #1
   1244c:	cmn	r3, #-536870911	; 0xe0000001
   12450:	movhi	r2, #512	; 0x200
   12454:	movhi	r3, #0
   12458:	bhi	12480 <__assert_fail@plt+0x106c>
   1245c:	b	1247c <__assert_fail@plt+0x1068>
   12460:	ldr	r2, [sp, #304]	; 0x130
   12464:	sub	r3, r2, #1
   12468:	cmn	r3, #-536870911	; 0xe0000001
   1246c:	mvnls	r4, #0
   12470:	mvnls	r5, #0
   12474:	strdls	r4, [sp, #88]	; 0x58
   12478:	bhi	12fbc <__assert_fail@plt+0x1ba8>
   1247c:	asr	r3, r2, #31
   12480:	ldrd	r0, [sp, #88]	; 0x58
   12484:	cmp	r2, r0
   12488:	sbcs	r3, r3, r1
   1248c:	bge	12fbc <__assert_fail@plt+0x1ba8>
   12490:	mvn	r3, #0
   12494:	mvn	r2, #0
   12498:	cmp	r5, r3
   1249c:	cmpeq	r4, r2
   124a0:	beq	131b0 <__assert_fail@plt+0x1d9c>
   124a4:	ldrd	r2, [sp, #88]	; 0x58
   124a8:	cmp	r4, r2
   124ac:	sbcs	r1, r5, r3
   124b0:	bge	124d8 <__assert_fail@plt+0x10c4>
   124b4:	subs	r1, r2, r4
   124b8:	sbc	r3, r3, r5
   124bc:	str	r1, [sp, #104]	; 0x68
   124c0:	str	r3, [sp, #108]	; 0x6c
   124c4:	ldrd	r2, [sp, #40]	; 0x28
   124c8:	ldrd	r0, [sp, #104]	; 0x68
   124cc:	cmp	r3, r1
   124d0:	cmpeq	r2, r0
   124d4:	bcc	1324c <__assert_fail@plt+0x1e38>
   124d8:	strd	r4, [sp, #144]	; 0x90
   124dc:	b	11f84 <__assert_fail@plt+0xb70>
   124e0:	add	ip, sp, #144	; 0x90
   124e4:	ldr	r1, [sp, #36]	; 0x24
   124e8:	str	ip, [sp]
   124ec:	ldrd	r2, [sp, #40]	; 0x28
   124f0:	ldr	r0, [sp, #68]	; 0x44
   124f4:	bl	14030 <__assert_fail@plt+0x2c1c>
   124f8:	subs	r3, r0, #0
   124fc:	lsrne	r3, r3, #31
   12500:	strne	r3, [sp, #80]	; 0x50
   12504:	bne	122e4 <__assert_fail@plt+0xed0>
   12508:	ldr	r2, [sp, #36]	; 0x24
   1250c:	ldr	r3, [sp, #100]	; 0x64
   12510:	ldr	r1, [sp, #68]	; 0x44
   12514:	str	r3, [sp]
   12518:	ldr	r3, [sp, #112]	; 0x70
   1251c:	str	r3, [sp, #4]
   12520:	bl	14170 <__assert_fail@plt+0x2d5c>
   12524:	ldr	r3, [sp, #144]	; 0x90
   12528:	ldr	r2, [sp, #148]	; 0x94
   1252c:	adds	r3, r3, r0
   12530:	adc	r2, r2, r1
   12534:	str	r3, [sp, #144]	; 0x90
   12538:	str	r2, [sp, #148]	; 0x94
   1253c:	b	122e4 <__assert_fail@plt+0xed0>
   12540:	mov	r3, #1
   12544:	ldr	r6, [pc, #-3116]	; 11920 <__assert_fail@plt+0x50c>
   12548:	str	r3, [sp, #28]
   1254c:	b	11ad0 <__assert_fail@plt+0x6bc>
   12550:	bl	112dc <__errno_location@plt>
   12554:	ldr	r6, [sp, #48]	; 0x30
   12558:	mov	r2, #5
   1255c:	movw	r1, #53756	; 0xd1fc
   12560:	movt	r1, #1
   12564:	ldr	r4, [r0]
   12568:	mov	r0, r6
   1256c:	bl	11174 <dcgettext@plt>
   12570:	mov	r5, r0
   12574:	mov	r0, #4
   12578:	ldr	r1, [sp, #68]	; 0x44
   1257c:	bl	19bdc <__assert_fail@plt+0x87c8>
   12580:	mov	r3, r0
   12584:	mov	r2, r5
   12588:	mov	r1, r4
   1258c:	mov	r0, r6
   12590:	bl	1121c <error@plt>
   12594:	b	11fb8 <__assert_fail@plt+0xba4>
   12598:	bl	112dc <__errno_location@plt>
   1259c:	ldr	r4, [r0]
   125a0:	mov	r2, #5
   125a4:	movw	r1, #53756	; 0xd1fc
   125a8:	movt	r1, #1
   125ac:	mov	r0, #0
   125b0:	bl	11174 <dcgettext@plt>
   125b4:	mov	r3, #0
   125b8:	mov	r5, r0
   125bc:	ldr	r1, [sp, #68]	; 0x44
   125c0:	mov	r0, #4
   125c4:	str	r3, [sp, #80]	; 0x50
   125c8:	bl	19bdc <__assert_fail@plt+0x87c8>
   125cc:	mov	r3, r0
   125d0:	mov	r2, r5
   125d4:	mov	r1, r4
   125d8:	mov	r0, #0
   125dc:	bl	1121c <error@plt>
   125e0:	b	122e4 <__assert_fail@plt+0xed0>
   125e4:	mov	r3, #1
   125e8:	strb	r3, [sl, #1]
   125ec:	b	11bd0 <__assert_fail@plt+0x7bc>
   125f0:	ldr	r1, [sp, #32]
   125f4:	add	r2, ip, r2
   125f8:	ldrb	r2, [r2, #-1]
   125fc:	ldrb	r8, [r1]
   12600:	cmp	r2, r8
   12604:	beq	1261c <__assert_fail@plt+0x1208>
   12608:	ldr	r2, [r3, #4]
   1260c:	add	r1, r9, #1
   12610:	mov	r9, r1
   12614:	add	r2, r2, #1
   12618:	str	r2, [r3, #4]
   1261c:	add	r4, sl, #8192	; 0x2000
   12620:	ldrd	r6, [sp, #40]	; 0x28
   12624:	mov	r3, #0
   12628:	ldr	r1, [r4, #4]
   1262c:	cmp	r7, r3
   12630:	sub	r1, r9, r1
   12634:	cmpeq	r6, r1
   12638:	mov	r2, r1
   1263c:	bcs	132b8 <__assert_fail@plt+0x1ea4>
   12640:	mov	r1, r8
   12644:	mov	r5, r4
   12648:	mov	r8, r6
   1264c:	mov	r9, r7
   12650:	b	12658 <__assert_fail@plt+0x1244>
   12654:	mov	r2, r3
   12658:	ldr	r0, [r5, #8]
   1265c:	mov	r7, #0
   12660:	cmp	r9, r7
   12664:	add	r5, r0, #8192	; 0x2000
   12668:	ldr	r3, [r5, #4]
   1266c:	sub	r3, r2, r3
   12670:	cmpeq	r8, r3
   12674:	bcc	12654 <__assert_fail@plt+0x1240>
   12678:	mov	r9, r2
   1267c:	mov	r8, r1
   12680:	ldrd	r6, [sp, #40]	; 0x28
   12684:	mov	r3, #0
   12688:	ldr	ip, [r5]
   1268c:	cmp	r7, r3
   12690:	cmpeq	r6, r9
   12694:	ldrcc	r3, [sp, #40]	; 0x28
   12698:	add	r6, r0, ip
   1269c:	subcc	r7, r9, r3
   126a0:	bcc	126f0 <__assert_fail@plt+0x12dc>
   126a4:	sub	r1, r6, r0
   126a8:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   126ac:	ldr	r0, [r5, #8]
   126b0:	cmp	r0, #0
   126b4:	beq	126d0 <__assert_fail@plt+0x12bc>
   126b8:	add	r5, r0, #8192	; 0x2000
   126bc:	ldr	r1, [r5]
   126c0:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   126c4:	ldr	r0, [r5, #8]
   126c8:	cmp	r0, #0
   126cc:	bne	126b8 <__assert_fail@plt+0x12a4>
   126d0:	ldr	r3, [sp, #48]	; 0x30
   126d4:	mov	r0, sl
   126d8:	str	r3, [sp, #80]	; 0x50
   126dc:	b	122d4 <__assert_fail@plt+0xec0>
   126e0:	mov	r1, r8
   126e4:	sub	r7, r7, #1
   126e8:	bl	11198 <rawmemchr@plt>
   126ec:	add	r0, r0, #1
   126f0:	cmp	r7, #0
   126f4:	bne	126e0 <__assert_fail@plt+0x12cc>
   126f8:	b	126a4 <__assert_fail@plt+0x1290>
   126fc:	bl	112dc <__errno_location@plt>
   12700:	ldr	r4, [r0]
   12704:	mov	r2, #5
   12708:	movw	r1, #49576	; 0xc1a8
   1270c:	movt	r1, #1
   12710:	mov	r0, #0
   12714:	str	r4, [fp, #52]	; 0x34
   12718:	bl	11174 <dcgettext@plt>
   1271c:	mov	r5, r0
   12720:	ldr	r0, [fp]
   12724:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   12728:	mov	r1, r0
   1272c:	mov	r0, #4
   12730:	bl	19bdc <__assert_fail@plt+0x87c8>
   12734:	mov	r3, r0
   12738:	mov	r2, r5
   1273c:	mov	r1, r4
   12740:	mov	r0, #0
   12744:	bl	1121c <error@plt>
   12748:	b	12370 <__assert_fail@plt+0xf5c>
   1274c:	ldr	r4, [fp]
   12750:	b	11c48 <__assert_fail@plt+0x834>
   12754:	mov	r7, #0
   12758:	mov	r1, #10
   1275c:	b	11a48 <__assert_fail@plt+0x634>
   12760:	ldrd	r2, [sp, #128]	; 0x80
   12764:	orrs	r3, r2, r3
   12768:	bne	11b84 <__assert_fail@plt+0x770>
   1276c:	ldrb	r0, [sl, #6]
   12770:	cmp	r0, #0
   12774:	bne	11b84 <__assert_fail@plt+0x770>
   12778:	add	sp, sp, #356	; 0x164
   1277c:	vpop	{d8-d10}
   12780:	ldrd	r4, [sp]
   12784:	ldrd	r6, [sp, #8]
   12788:	ldrd	r8, [sp, #16]
   1278c:	ldrd	sl, [sp, #24]
   12790:	add	sp, sp, #32
   12794:	pop	{pc}		; (ldr pc, [sp], #4)
   12798:	ldr	r8, [sp, #36]	; 0x24
   1279c:	mov	r1, #1
   127a0:	mov	r2, r4
   127a4:	mov	r3, r5
   127a8:	str	r1, [sp]
   127ac:	mov	r0, r8
   127b0:	bl	111ec <lseek64@plt>
   127b4:	mvn	r3, #0
   127b8:	mvn	r2, #0
   127bc:	cmp	r1, r3
   127c0:	mov	r6, r0
   127c4:	cmpeq	r0, r2
   127c8:	mov	r7, r1
   127cc:	beq	11ce0 <__assert_fail@plt+0x8cc>
   127d0:	mov	r1, #2
   127d4:	mov	r3, r5
   127d8:	mov	r2, r4
   127dc:	mov	r0, r8
   127e0:	str	r1, [sp]
   127e4:	bl	111ec <lseek64@plt>
   127e8:	cmp	r6, r0
   127ec:	mov	r4, r0
   127f0:	sbcs	r3, r7, r1
   127f4:	mov	r5, r1
   127f8:	bge	1327c <__assert_fail@plt+0x1e68>
   127fc:	orrs	r3, r4, r5
   12800:	strd	r4, [sp, #144]	; 0x90
   12804:	ldreq	r3, [sp, #48]	; 0x30
   12808:	streq	r3, [sp, #80]	; 0x50
   1280c:	beq	122e4 <__assert_fail@plt+0xed0>
   12810:	add	ip, sp, #144	; 0x90
   12814:	strd	r6, [sp]
   12818:	strd	r4, [sp, #8]
   1281c:	str	ip, [sp, #16]
   12820:	ldr	r1, [sp, #36]	; 0x24
   12824:	ldrd	r2, [sp, #40]	; 0x28
   12828:	ldr	r0, [sp, #68]	; 0x44
   1282c:	bl	144d8 <__assert_fail@plt+0x30c4>
   12830:	str	r0, [sp, #80]	; 0x50
   12834:	b	122e4 <__assert_fail@plt+0xed0>
   12838:	ldr	r9, [sp, #60]	; 0x3c
   1283c:	movw	r4, #49500	; 0xc15c
   12840:	movt	r4, #1
   12844:	mov	r5, #0
   12848:	mvn	r7, #0
   1284c:	ldr	r8, [sp, #76]	; 0x4c
   12850:	mov	r6, #1
   12854:	mov	r1, r4
   12858:	ldr	r0, [r8]
   1285c:	bl	110cc <strcmp@plt>
   12860:	cmp	r0, #0
   12864:	bne	12890 <__assert_fail@plt+0x147c>
   12868:	ldrb	r3, [r8, #44]	; 0x2c
   1286c:	cmp	r3, #0
   12870:	bne	12890 <__assert_fail@plt+0x147c>
   12874:	ldr	r3, [r8, #48]	; 0x30
   12878:	cmp	r3, #0
   1287c:	blt	12890 <__assert_fail@plt+0x147c>
   12880:	ldr	r3, [r8, #40]	; 0x28
   12884:	and	r3, r3, #61440	; 0xf000
   12888:	cmp	r3, #4096	; 0x1000
   1288c:	beq	12ad0 <__assert_fail@plt+0x16bc>
   12890:	add	r5, r5, #1
   12894:	add	r8, r8, #80	; 0x50
   12898:	cmp	r8, r9
   1289c:	bne	12854 <__assert_fail@plt+0x1440>
   128a0:	cmp	r5, #0
   128a4:	beq	12008 <__assert_fail@plt+0xbf4>
   128a8:	add	r2, sp, #144	; 0x90
   128ac:	mov	r1, #1
   128b0:	mov	r0, #3
   128b4:	bl	111c8 <__fxstat64@plt>
   128b8:	cmp	r0, #0
   128bc:	blt	13d68 <__assert_fail@plt+0x2954>
   128c0:	ldr	r3, [sp, #160]	; 0xa0
   128c4:	ldrb	r2, [sl, #3]
   128c8:	and	r3, r3, #61440	; 0xf000
   128cc:	sub	r3, r3, #4096	; 0x1000
   128d0:	clz	r3, r3
   128d4:	cmp	r2, #0
   128d8:	lsr	r3, r3, #5
   128dc:	strb	r3, [sl, #13]
   128e0:	bne	12978 <__assert_fail@plt+0x1564>
   128e4:	ldr	r6, [sp, #60]	; 0x3c
   128e8:	movw	r4, #49500	; 0xc15c
   128ec:	movt	r4, #1
   128f0:	ldr	r5, [sp, #76]	; 0x4c
   128f4:	ldrb	r3, [r5, #44]	; 0x2c
   128f8:	cmp	r3, #0
   128fc:	bne	12914 <__assert_fail@plt+0x1500>
   12900:	mov	r1, r4
   12904:	ldr	r0, [r5]
   12908:	bl	110cc <strcmp@plt>
   1290c:	cmp	r0, #0
   12910:	beq	12978 <__assert_fail@plt+0x1564>
   12914:	add	r5, r5, #80	; 0x50
   12918:	cmp	r5, r6
   1291c:	bne	128f4 <__assert_fail@plt+0x14e0>
   12920:	ldr	r1, [sp, #60]	; 0x3c
   12924:	ldr	r3, [sp, #76]	; 0x4c
   12928:	ldr	r2, [r3, #48]	; 0x30
   1292c:	cmp	r2, #0
   12930:	blt	12940 <__assert_fail@plt+0x152c>
   12934:	ldrb	r2, [r3, #45]	; 0x2d
   12938:	cmp	r2, #0
   1293c:	bne	12978 <__assert_fail@plt+0x1564>
   12940:	add	r3, r3, #80	; 0x50
   12944:	cmp	r3, r1
   12948:	bne	12928 <__assert_fail@plt+0x1514>
   1294c:	ldr	r1, [sp, #60]	; 0x3c
   12950:	ldr	r3, [sp, #76]	; 0x4c
   12954:	ldr	r2, [r3, #48]	; 0x30
   12958:	cmp	r2, #0
   1295c:	blt	1296c <__assert_fail@plt+0x1558>
   12960:	ldrb	r2, [r3, #45]	; 0x2d
   12964:	cmp	r2, #0
   12968:	beq	13384 <__assert_fail@plt+0x1f70>
   1296c:	add	r3, r3, #80	; 0x50
   12970:	cmp	r3, r1
   12974:	bne	12954 <__assert_fail@plt+0x1540>
   12978:	ldr	r3, [sl, #8]
   1297c:	mov	r2, r3
   12980:	mov	r1, r3
   12984:	mov	r3, #1
   12988:	cmp	r2, #0
   1298c:	strb	r3, [sl, #3]
   12990:	mov	r3, r2
   12994:	movne	r3, #0
   12998:	movne	r1, r3
   1299c:	bne	129bc <__assert_fail@plt+0x15a8>
   129a0:	movw	r3, #57672	; 0xe148
   129a4:	movt	r3, #2
   129a8:	ldr	r2, [sp, #28]
   129ac:	ldr	r3, [r3, #4]
   129b0:	cmp	r3, #2
   129b4:	cmpeq	r2, #1
   129b8:	beq	13610 <__assert_fail@plt+0x21fc>
   129bc:	and	r2, r1, #1
   129c0:	str	r2, [sp, #32]
   129c4:	ldr	r2, [sp, #28]
   129c8:	str	sl, [sp, #48]	; 0x30
   129cc:	mov	sl, r1
   129d0:	sub	r2, r2, #1
   129d4:	str	r2, [sp, #36]	; 0x24
   129d8:	mov	r2, #0
   129dc:	str	r2, [sp, #40]	; 0x28
   129e0:	mov	r8, #0
   129e4:	ldr	r5, [sp, #76]	; 0x4c
   129e8:	mov	r6, r8
   129ec:	b	12aa8 <__assert_fail@plt+0x1694>
   129f0:	ldr	r0, [r5]
   129f4:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   129f8:	mov	r9, r0
   129fc:	ldr	r7, [r5, #40]	; 0x28
   12a00:	ldr	fp, [r5, #56]	; 0x38
   12a04:	cmp	sl, fp
   12a08:	beq	12a50 <__assert_fail@plt+0x163c>
   12a0c:	mov	r1, #3
   12a10:	mov	r0, r4
   12a14:	bl	1662c <__assert_fail@plt+0x5218>
   12a18:	cmp	sl, #0
   12a1c:	bne	12c24 <__assert_fail@plt+0x1810>
   12a20:	cmp	r0, #0
   12a24:	blt	12c2c <__assert_fail@plt+0x1818>
   12a28:	orr	r2, r0, #2048	; 0x800
   12a2c:	cmp	r0, r2
   12a30:	beq	12a48 <__assert_fail@plt+0x1634>
   12a34:	mov	r1, #4
   12a38:	mov	r0, r4
   12a3c:	bl	1662c <__assert_fail@plt+0x5218>
   12a40:	cmn	r0, #1
   12a44:	beq	12c2c <__assert_fail@plt+0x1818>
   12a48:	mov	fp, sl
   12a4c:	str	sl, [r5, #56]	; 0x38
   12a50:	cmp	fp, #0
   12a54:	beq	12b50 <__assert_fail@plt+0x173c>
   12a58:	mvn	r3, #1
   12a5c:	mvn	ip, #0
   12a60:	mov	r2, r4
   12a64:	mov	r1, r9
   12a68:	stm	sp, {r3, ip}
   12a6c:	mov	r0, #0
   12a70:	bl	14170 <__assert_fail@plt+0x2d5c>
   12a74:	ldr	r3, [r5, #8]
   12a78:	orrs	r2, r0, r1
   12a7c:	orrne	r8, r8, #1
   12a80:	ldr	r2, [r5, #12]
   12a84:	adds	r3, r3, r0
   12a88:	adc	r2, r2, r1
   12a8c:	str	r3, [r5, #8]
   12a90:	str	r2, [r5, #12]
   12a94:	ldr	r3, [sp, #28]
   12a98:	add	r6, r6, #1
   12a9c:	add	r5, r5, #80	; 0x50
   12aa0:	cmp	r3, r6
   12aa4:	beq	12dac <__assert_fail@plt+0x1998>
   12aa8:	ldrb	r3, [r5, #44]	; 0x2c
   12aac:	cmp	r3, #0
   12ab0:	bne	12a94 <__assert_fail@plt+0x1680>
   12ab4:	ldr	r4, [r5, #48]	; 0x30
   12ab8:	cmp	r4, #0
   12abc:	bge	129f0 <__assert_fail@plt+0x15dc>
   12ac0:	mov	r0, r5
   12ac4:	ldr	r1, [sp, #32]
   12ac8:	bl	153e0 <__assert_fail@plt+0x3fcc>
   12acc:	b	12a94 <__assert_fail@plt+0x1680>
   12ad0:	strb	r6, [r8, #44]	; 0x2c
   12ad4:	str	r7, [r8, #48]	; 0x30
   12ad8:	b	12894 <__assert_fail@plt+0x1480>
   12adc:	mov	r2, #5
   12ae0:	mov	r0, r4
   12ae4:	movw	r1, #53520	; 0xd110
   12ae8:	movt	r1, #1
   12aec:	bl	11174 <dcgettext@plt>
   12af0:	mov	r2, r0
   12af4:	mov	r1, r4
   12af8:	mov	r0, r4
   12afc:	bl	1121c <error@plt>
   12b00:	b	11a8c <__assert_fail@plt+0x678>
   12b04:	mov	r1, #2
   12b08:	ldr	r0, [sp, #36]	; 0x24
   12b0c:	ldrd	r6, [sp, #40]	; 0x28
   12b10:	str	r1, [sp]
   12b14:	rsbs	r2, r6, #0
   12b18:	rsc	r3, r7, #0
   12b1c:	bl	111ec <lseek64@plt>
   12b20:	mvn	r3, #0
   12b24:	mvn	r2, #0
   12b28:	cmp	r1, r3
   12b2c:	mov	r4, r0
   12b30:	cmpeq	r0, r2
   12b34:	mov	r5, r1
   12b38:	beq	12460 <__assert_fail@plt+0x104c>
   12b3c:	adds	r1, r4, r6
   12b40:	adc	r3, r5, r7
   12b44:	str	r1, [sp, #88]	; 0x58
   12b48:	str	r3, [sp, #92]	; 0x5c
   12b4c:	b	12444 <__assert_fail@plt+0x1030>
   12b50:	add	r2, sp, #248	; 0xf8
   12b54:	mov	r1, r4
   12b58:	mov	r0, #3
   12b5c:	bl	111c8 <__fxstat64@plt>
   12b60:	cmp	r0, #0
   12b64:	bne	12ef4 <__assert_fail@plt+0x1ae0>
   12b68:	ldr	r3, [r5, #40]	; 0x28
   12b6c:	ldr	ip, [sp, #264]	; 0x108
   12b70:	cmp	r3, ip
   12b74:	beq	12c7c <__assert_fail@plt+0x1868>
   12b78:	ldr	r2, [sp, #328]	; 0x148
   12b7c:	ldr	r3, [sp, #332]	; 0x14c
   12b80:	and	r7, r7, #61440	; 0xf000
   12b84:	strd	r2, [r5, #16]
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #0
   12b90:	cmp	r7, #32768	; 0x8000
   12b94:	str	ip, [r5, #40]	; 0x28
   12b98:	strd	r2, [r5, #72]	; 0x48
   12b9c:	beq	12d30 <__assert_fail@plt+0x191c>
   12ba0:	ldr	r3, [sp, #36]	; 0x24
   12ba4:	cmp	r6, r3
   12ba8:	beq	12c04 <__assert_fail@plt+0x17f0>
   12bac:	ldr	r3, [sp, #48]	; 0x30
   12bb0:	ldrb	r3, [r3, #1]
   12bb4:	cmp	r3, #0
   12bb8:	streq	r6, [sp, #36]	; 0x24
   12bbc:	beq	12c04 <__assert_fail@plt+0x17f0>
   12bc0:	movw	fp, #57672	; 0xe148
   12bc4:	movt	fp, #2
   12bc8:	str	r6, [sp, #36]	; 0x24
   12bcc:	ldrb	lr, [fp]
   12bd0:	movw	ip, #49608	; 0xc1c8
   12bd4:	movt	ip, #1
   12bd8:	mov	r3, r9
   12bdc:	movw	r2, #52356	; 0xcc84
   12be0:	movt	r2, #1
   12be4:	movw	r1, #49596	; 0xc1bc
   12be8:	movt	r1, #1
   12bec:	mov	r0, #1
   12bf0:	cmp	lr, #0
   12bf4:	moveq	r2, ip
   12bf8:	bl	11300 <__printf_chk@plt>
   12bfc:	mov	r3, #0
   12c00:	strb	r3, [fp]
   12c04:	ldr	r3, [r5, #56]	; 0x38
   12c08:	cmp	r3, #0
   12c0c:	bne	12a58 <__assert_fail@plt+0x1644>
   12c10:	cmp	r7, #32768	; 0x8000
   12c14:	beq	12c54 <__assert_fail@plt+0x1840>
   12c18:	mvn	r3, #0
   12c1c:	mov	ip, r3
   12c20:	b	12a60 <__assert_fail@plt+0x164c>
   12c24:	cmp	r0, #0
   12c28:	bge	12a48 <__assert_fail@plt+0x1634>
   12c2c:	bl	112dc <__errno_location@plt>
   12c30:	ldr	r3, [r5, #40]	; 0x28
   12c34:	ldr	fp, [r0]
   12c38:	and	r3, r3, #61440	; 0xf000
   12c3c:	cmp	r3, #32768	; 0x8000
   12c40:	bne	13348 <__assert_fail@plt+0x1f34>
   12c44:	cmp	fp, #1
   12c48:	bne	13348 <__assert_fail@plt+0x1f34>
   12c4c:	ldr	fp, [r5, #56]	; 0x38
   12c50:	b	12a50 <__assert_fail@plt+0x163c>
   12c54:	ldrb	r3, [r5, #45]	; 0x2d
   12c58:	cmp	r3, #0
   12c5c:	beq	12c18 <__assert_fail@plt+0x1804>
   12c60:	ldr	r2, [r5, #8]
   12c64:	ldr	r3, [sp, #296]	; 0x128
   12c68:	ldr	r1, [r5, #12]
   12c6c:	ldr	ip, [sp, #300]	; 0x12c
   12c70:	subs	r3, r3, r2
   12c74:	sbc	ip, ip, r1
   12c78:	b	12a60 <__assert_fail@plt+0x164c>
   12c7c:	and	r3, ip, #61440	; 0xf000
   12c80:	cmp	r3, #32768	; 0x8000
   12c84:	beq	12f74 <__assert_fail@plt+0x1b60>
   12c88:	ldr	r1, [r5, #16]
   12c8c:	ldr	r2, [sp, #328]	; 0x148
   12c90:	ldr	lr, [r5, #20]
   12c94:	ldr	r3, [sp, #332]	; 0x14c
   12c98:	cmp	r2, r1
   12c9c:	movle	r0, #0
   12ca0:	movgt	r0, #1
   12ca4:	cmp	r2, r1
   12ca8:	rsbge	r0, r0, #0
   12cac:	rsblt	r0, r0, #1
   12cb0:	cmp	r3, lr
   12cb4:	movle	r1, #0
   12cb8:	movgt	r1, #1
   12cbc:	cmp	r3, lr
   12cc0:	rsbge	r1, r1, #0
   12cc4:	rsblt	r1, r1, #1
   12cc8:	add	r1, r1, r0, lsl #1
   12ccc:	cmp	r1, #0
   12cd0:	bne	12b80 <__assert_fail@plt+0x176c>
   12cd4:	movw	ip, #57672	; 0xe148
   12cd8:	movt	ip, #2
   12cdc:	ldrd	r0, [r5, #72]	; 0x48
   12ce0:	ldrd	r2, [ip, #16]
   12ce4:	adds	r4, r0, #1
   12ce8:	adc	lr, r1, #0
   12cec:	cmp	r1, r3
   12cf0:	str	r4, [r5, #72]	; 0x48
   12cf4:	cmpeq	r0, r2
   12cf8:	str	lr, [r5, #76]	; 0x4c
   12cfc:	bcc	12a94 <__assert_fail@plt+0x1680>
   12d00:	ldr	r3, [ip, #4]
   12d04:	cmp	r3, #1
   12d08:	bne	12a94 <__assert_fail@plt+0x1680>
   12d0c:	ldr	r1, [r5, #56]	; 0x38
   12d10:	mov	r0, r5
   12d14:	adds	r1, r1, #0
   12d18:	movne	r1, #1
   12d1c:	bl	153e0 <__assert_fail@plt+0x3fcc>
   12d20:	mov	r2, #0
   12d24:	mov	r3, #0
   12d28:	strd	r2, [r5, #72]	; 0x48
   12d2c:	b	12a94 <__assert_fail@plt+0x1680>
   12d30:	add	r3, sp, #296	; 0x128
   12d34:	ldrd	r0, [r3]
   12d38:	ldrd	r2, [r5, #8]
   12d3c:	cmp	r0, r2
   12d40:	sbcs	r3, r1, r3
   12d44:	bge	12ba0 <__assert_fail@plt+0x178c>
   12d48:	mov	r2, #5
   12d4c:	movw	r1, #49684	; 0xc214
   12d50:	movt	r1, #1
   12d54:	mov	r0, #0
   12d58:	bl	11174 <dcgettext@plt>
   12d5c:	mov	fp, r0
   12d60:	mov	r2, r9
   12d64:	mov	r1, #3
   12d68:	mov	r0, #0
   12d6c:	bl	19cb8 <__assert_fail@plt+0x88a4>
   12d70:	mov	r1, #0
   12d74:	mov	r3, r0
   12d78:	mov	r2, fp
   12d7c:	mov	r0, r1
   12d80:	bl	1121c <error@plt>
   12d84:	mov	r1, #0
   12d88:	mov	r2, #0
   12d8c:	mov	r3, #0
   12d90:	mov	r0, r4
   12d94:	stm	sp, {r1, r9}
   12d98:	bl	14424 <__assert_fail@plt+0x3010>
   12d9c:	mov	r2, #0
   12da0:	mov	r3, #0
   12da4:	strd	r2, [r5, #8]
   12da8:	b	12ba0 <__assert_fail@plt+0x178c>
   12dac:	ldr	r3, [sp, #48]	; 0x30
   12db0:	ldrb	r2, [r3, #2]
   12db4:	cmp	r2, #0
   12db8:	beq	12dd0 <__assert_fail@plt+0x19bc>
   12dbc:	movw	r3, #57672	; 0xe148
   12dc0:	movt	r3, #2
   12dc4:	ldr	r3, [r3, #4]
   12dc8:	cmp	r3, #1
   12dcc:	beq	12e2c <__assert_fail@plt+0x1a18>
   12dd0:	ldr	r0, [sp, #60]	; 0x3c
   12dd4:	ldr	r3, [sp, #76]	; 0x4c
   12dd8:	ldr	r1, [r3, #48]	; 0x30
   12ddc:	cmp	r1, #0
   12de0:	bge	12e2c <__assert_fail@plt+0x1a18>
   12de4:	ldrb	r4, [r3, #44]	; 0x2c
   12de8:	eor	r4, r4, #1
   12dec:	ands	r4, r2, r4
   12df0:	bne	12e2c <__assert_fail@plt+0x1a18>
   12df4:	add	r3, r3, #80	; 0x50
   12df8:	cmp	r3, r0
   12dfc:	bne	12dd8 <__assert_fail@plt+0x19c4>
   12e00:	mov	r2, #5
   12e04:	mov	r0, r4
   12e08:	ldr	sl, [sp, #48]	; 0x30
   12e0c:	movw	r1, #53916	; 0xd29c
   12e10:	movt	r1, #1
   12e14:	bl	11174 <dcgettext@plt>
   12e18:	mov	r2, r0
   12e1c:	mov	r1, r4
   12e20:	mov	r0, r4
   12e24:	bl	1121c <error@plt>
   12e28:	b	12008 <__assert_fail@plt+0xbf4>
   12e2c:	ldr	r3, [sp, #32]
   12e30:	eor	r2, r8, #1
   12e34:	orrs	r2, r2, r3
   12e38:	beq	12f3c <__assert_fail@plt+0x1b28>
   12e3c:	movw	r3, #57796	; 0xe1c4
   12e40:	movt	r3, #2
   12e44:	ldr	r0, [r3]
   12e48:	bl	111a4 <fflush_unlocked@plt>
   12e4c:	subs	r2, r0, #0
   12e50:	bne	13d40 <__assert_fail@plt+0x292c>
   12e54:	ldr	r3, [sp, #48]	; 0x30
   12e58:	ldrb	r3, [r3, #13]
   12e5c:	cmp	r3, #0
   12e60:	beq	12e94 <__assert_fail@plt+0x1a80>
   12e64:	mov	r3, #1
   12e68:	mov	ip, #8
   12e6c:	mov	r1, r3
   12e70:	add	r0, sp, #136	; 0x88
   12e74:	str	r3, [sp, #136]	; 0x88
   12e78:	strh	ip, [sp, #140]	; 0x8c
   12e7c:	bl	111bc <poll@plt>
   12e80:	cmp	r0, #0
   12e84:	blt	12e94 <__assert_fail@plt+0x1a80>
   12e88:	ldrh	r3, [sp, #142]	; 0x8e
   12e8c:	tst	r3, #8
   12e90:	bne	13d34 <__assert_fail@plt+0x2920>
   12e94:	cmp	r8, #0
   12e98:	bne	129e0 <__assert_fail@plt+0x15cc>
   12e9c:	ldr	r3, [sp, #40]	; 0x28
   12ea0:	cmp	r3, #0
   12ea4:	bne	132c4 <__assert_fail@plt+0x1eb0>
   12ea8:	ldr	r3, [sp, #48]	; 0x30
   12eac:	ldr	r0, [r3, #8]
   12eb0:	cmp	r0, #0
   12eb4:	bne	12f90 <__assert_fail@plt+0x1b7c>
   12eb8:	vmov.f64	d0, d8
   12ebc:	bl	1ab28 <__assert_fail@plt+0x9714>
   12ec0:	cmp	r0, #0
   12ec4:	beq	129e0 <__assert_fail@plt+0x15cc>
   12ec8:	bl	112dc <__errno_location@plt>
   12ecc:	movw	r1, #54140	; 0xd37c
   12ed0:	movt	r1, #1
   12ed4:	ldr	r4, [r0]
   12ed8:	mov	r2, #5
   12edc:	mov	r0, #0
   12ee0:	bl	11174 <dcgettext@plt>
   12ee4:	mov	r2, r0
   12ee8:	mov	r0, #1
   12eec:	mov	r1, r4
   12ef0:	bl	1121c <error@plt>
   12ef4:	mvn	r3, #0
   12ef8:	str	r3, [r5, #48]	; 0x30
   12efc:	bl	112dc <__errno_location@plt>
   12f00:	ldr	r7, [r0]
   12f04:	mov	r2, r9
   12f08:	mov	r1, #3
   12f0c:	mov	r0, fp
   12f10:	str	r7, [r5, #52]	; 0x34
   12f14:	bl	19cb8 <__assert_fail@plt+0x88a4>
   12f18:	mov	r3, r0
   12f1c:	mov	r1, r7
   12f20:	mov	r0, fp
   12f24:	movw	r2, #53092	; 0xcf64
   12f28:	movt	r2, #1
   12f2c:	bl	1121c <error@plt>
   12f30:	mov	r0, r4
   12f34:	bl	113fc <close@plt>
   12f38:	b	12a94 <__assert_fail@plt+0x1680>
   12f3c:	ldr	r3, [sp, #48]	; 0x30
   12f40:	ldrb	r3, [r3, #13]
   12f44:	cmp	r3, #0
   12f48:	beq	129e0 <__assert_fail@plt+0x15cc>
   12f4c:	mov	r3, #1
   12f50:	mov	ip, #8
   12f54:	mov	r1, r3
   12f58:	add	r0, sp, #136	; 0x88
   12f5c:	str	r3, [sp, #136]	; 0x88
   12f60:	strh	ip, [sp, #140]	; 0x8c
   12f64:	bl	111bc <poll@plt>
   12f68:	cmp	r0, #0
   12f6c:	bge	12e88 <__assert_fail@plt+0x1a74>
   12f70:	b	129e0 <__assert_fail@plt+0x15cc>
   12f74:	add	r3, sp, #296	; 0x128
   12f78:	ldrd	r0, [r5, #8]
   12f7c:	ldrd	r2, [r3]
   12f80:	cmp	r1, r3
   12f84:	cmpeq	r0, r2
   12f88:	bne	12b78 <__assert_fail@plt+0x1764>
   12f8c:	b	12c88 <__assert_fail@plt+0x1874>
   12f90:	ldr	r1, [sp, #40]	; 0x28
   12f94:	bl	1127c <kill@plt>
   12f98:	cmp	r0, #0
   12f9c:	beq	12eb8 <__assert_fail@plt+0x1aa4>
   12fa0:	bl	112dc <__errno_location@plt>
   12fa4:	ldr	r3, [r0]
   12fa8:	cmp	r3, #1
   12fac:	ldrne	r3, [sp, #52]	; 0x34
   12fb0:	strne	r3, [sp, #40]	; 0x28
   12fb4:	bne	129e0 <__assert_fail@plt+0x15cc>
   12fb8:	b	12eb8 <__assert_fail@plt+0x1aa4>
   12fbc:	movw	r0, #8200	; 0x2008
   12fc0:	mov	r4, #0
   12fc4:	bl	1a51c <__assert_fail@plt+0x9108>
   12fc8:	add	r3, r0, #8192	; 0x2000
   12fcc:	mov	r9, r0
   12fd0:	movw	r0, #8200	; 0x2008
   12fd4:	mov	r6, r4
   12fd8:	str	r4, [r3]
   12fdc:	str	r4, [r3, #4]
   12fe0:	mov	r4, r9
   12fe4:	bl	1a51c <__assert_fail@plt+0x9108>
   12fe8:	ldr	r3, [sp, #36]	; 0x24
   12fec:	mov	r5, r0
   12ff0:	str	r3, [sp, #52]	; 0x34
   12ff4:	str	fp, [sp, #80]	; 0x50
   12ff8:	b	13034 <__assert_fail@plt+0x1c20>
   12ffc:	add	r2, r4, #8192	; 0x2000
   13000:	mov	r1, #0
   13004:	ldr	r3, [r2]
   13008:	str	r5, [r8, #4]
   1300c:	ldrd	r8, [sp, #40]	; 0x28
   13010:	sub	r3, r6, r3
   13014:	cmp	r9, r1
   13018:	cmpeq	r8, r3
   1301c:	bcs	130b4 <__assert_fail@plt+0x1ca0>
   13020:	mov	r0, r4
   13024:	ldr	r4, [r2, #4]
   13028:	mov	r6, r3
   1302c:	mov	r9, r5
   13030:	mov	r5, r0
   13034:	mov	r2, #8192	; 0x2000
   13038:	mov	r1, r5
   1303c:	ldr	r0, [sp, #52]	; 0x34
   13040:	bl	19ea8 <__assert_fail@plt+0x8a94>
   13044:	sub	r3, r0, #1
   13048:	cmn	r3, #3
   1304c:	bhi	130c0 <__assert_fail@plt+0x1cac>
   13050:	ldrd	r2, [sp, #144]	; 0x90
   13054:	add	r7, r5, #8192	; 0x2000
   13058:	add	r8, r9, #8192	; 0x2000
   1305c:	add	r6, r6, r0
   13060:	adds	sl, r2, r0
   13064:	mov	r2, #0
   13068:	adc	fp, r3, #0
   1306c:	strd	sl, [sp, #144]	; 0x90
   13070:	str	r0, [r7]
   13074:	ldr	r3, [r8]
   13078:	str	r2, [r7, #4]
   1307c:	add	r2, r0, r3
   13080:	cmp	r2, #8192	; 0x2000
   13084:	bcs	12ffc <__assert_fail@plt+0x1be8>
   13088:	mov	r2, r0
   1308c:	mov	r1, r5
   13090:	add	r0, r9, r3
   13094:	bl	1112c <memcpy@plt>
   13098:	ldr	r2, [r7]
   1309c:	mov	r0, r5
   130a0:	mov	r5, r9
   130a4:	ldr	r3, [r8]
   130a8:	add	r3, r3, r2
   130ac:	str	r3, [r8]
   130b0:	b	1302c <__assert_fail@plt+0x1c18>
   130b4:	movw	r0, #8200	; 0x2008
   130b8:	bl	1a51c <__assert_fail@plt+0x9108>
   130bc:	b	1302c <__assert_fail@plt+0x1c18>
   130c0:	ldr	fp, [sp, #80]	; 0x50
   130c4:	mov	sl, r0
   130c8:	mov	r0, r5
   130cc:	bl	16854 <__assert_fail@plt+0x5440>
   130d0:	cmn	sl, #1
   130d4:	movne	r0, r4
   130d8:	movne	r2, fp
   130dc:	ldrdne	sl, [sp, #40]	; 0x28
   130e0:	bne	130f0 <__assert_fail@plt+0x1cdc>
   130e4:	b	13300 <__assert_fail@plt+0x1eec>
   130e8:	ldr	r0, [r5, #4]
   130ec:	mov	r6, r3
   130f0:	add	r5, r0, #8192	; 0x2000
   130f4:	mov	r9, #0
   130f8:	ldr	r1, [r5]
   130fc:	cmp	fp, r9
   13100:	sub	r3, r6, r1
   13104:	cmpeq	sl, r3
   13108:	bcc	130e8 <__assert_fail@plt+0x1cd4>
   1310c:	ldrd	r8, [sp, #40]	; 0x28
   13110:	mov	r3, #0
   13114:	mov	fp, r2
   13118:	cmp	r9, r3
   1311c:	cmpeq	r8, r6
   13120:	movcc	r3, r8
   13124:	movcs	r6, #0
   13128:	subcc	r6, r6, r3
   1312c:	add	r0, r0, r6
   13130:	sub	r1, r1, r6
   13134:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   13138:	ldr	r0, [r5, #4]
   1313c:	b	13150 <__assert_fail@plt+0x1d3c>
   13140:	add	r5, r0, #8192	; 0x2000
   13144:	ldr	r1, [r5]
   13148:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   1314c:	ldr	r0, [r5, #4]
   13150:	cmp	r0, #0
   13154:	bne	13140 <__assert_fail@plt+0x1d2c>
   13158:	mov	r3, #1
   1315c:	mov	r0, r4
   13160:	str	r3, [sp, #48]	; 0x30
   13164:	b	13178 <__assert_fail@plt+0x1d64>
   13168:	add	r3, r0, #8192	; 0x2000
   1316c:	ldr	r4, [r3, #4]
   13170:	bl	16854 <__assert_fail@plt+0x5440>
   13174:	mov	r0, r4
   13178:	cmp	r0, #0
   1317c:	bne	13168 <__assert_fail@plt+0x1d54>
   13180:	b	11fb8 <__assert_fail@plt+0xba4>
   13184:	mov	r2, #5
   13188:	mov	r0, r7
   1318c:	strb	r7, [sl, #2]
   13190:	movw	r1, #53400	; 0xd098
   13194:	movt	r1, #1
   13198:	bl	11174 <dcgettext@plt>
   1319c:	mov	r2, r0
   131a0:	mov	r1, r7
   131a4:	mov	r0, r7
   131a8:	bl	1121c <error@plt>
   131ac:	b	11e08 <__assert_fail@plt+0x9f4>
   131b0:	ldr	r0, [sp, #68]	; 0x44
   131b4:	mov	r1, #1
   131b8:	mov	r2, #0
   131bc:	mov	r3, #0
   131c0:	str	r1, [sp]
   131c4:	str	r0, [sp, #4]
   131c8:	ldr	r0, [sp, #36]	; 0x24
   131cc:	bl	14424 <__assert_fail@plt+0x3010>
   131d0:	mov	r4, r0
   131d4:	mov	r5, r1
   131d8:	b	124a4 <__assert_fail@plt+0x1090>
   131dc:	mov	r1, #1
   131e0:	ldrd	r2, [sp, #40]	; 0x28
   131e4:	ldr	r0, [sp, #68]	; 0x44
   131e8:	str	r1, [sp]
   131ec:	str	r0, [sp, #4]
   131f0:	ldr	r0, [sp, #36]	; 0x24
   131f4:	bl	14424 <__assert_fail@plt+0x3010>
   131f8:	cmp	r0, #0
   131fc:	sbcs	r3, r1, #0
   13200:	bge	11f5c <__assert_fail@plt+0xb48>
   13204:	b	11f34 <__assert_fail@plt+0xb20>
   13208:	bl	112dc <__errno_location@plt>
   1320c:	ldr	r4, [r0]
   13210:	mov	r2, #5
   13214:	movw	r1, #49576	; 0xc1a8
   13218:	movt	r1, #1
   1321c:	mov	r0, #0
   13220:	bl	11174 <dcgettext@plt>
   13224:	mov	r5, r0
   13228:	mov	r0, #4
   1322c:	ldr	r1, [sp, #68]	; 0x44
   13230:	bl	19bdc <__assert_fail@plt+0x87c8>
   13234:	mov	r3, r0
   13238:	mov	r2, r5
   1323c:	mov	r1, r4
   13240:	mov	r0, #0
   13244:	bl	1121c <error@plt>
   13248:	b	122bc <__assert_fail@plt+0xea8>
   1324c:	ldr	r0, [sp, #68]	; 0x44
   13250:	mov	r1, #0
   13254:	ldrd	r6, [sp, #88]	; 0x58
   13258:	str	r1, [sp]
   1325c:	str	r0, [sp, #4]
   13260:	ldr	r0, [sp, #36]	; 0x24
   13264:	subs	r4, r6, r2
   13268:	sbc	r5, r7, r3
   1326c:	mov	r2, r4
   13270:	mov	r3, r5
   13274:	bl	14424 <__assert_fail@plt+0x3010>
   13278:	b	124d8 <__assert_fail@plt+0x10c4>
   1327c:	mov	r2, r6
   13280:	mov	r3, r7
   13284:	ldr	r0, [sp, #36]	; 0x24
   13288:	ldr	r1, [sp, #80]	; 0x50
   1328c:	str	r1, [sp]
   13290:	ldr	r1, [sp, #68]	; 0x44
   13294:	str	r1, [sp, #4]
   13298:	bl	14424 <__assert_fail@plt+0x3010>
   1329c:	b	11ce0 <__assert_fail@plt+0x8cc>
   132a0:	mov	r0, r4
   132a4:	movw	r1, #49936	; 0xc310
   132a8:	movt	r1, #1
   132ac:	mov	r2, #5
   132b0:	bl	11174 <dcgettext@plt>
   132b4:	b	12358 <__assert_fail@plt+0xf44>
   132b8:	mov	r0, sl
   132bc:	mov	r5, r4
   132c0:	b	12680 <__assert_fail@plt+0x126c>
   132c4:	ldr	sl, [sp, #48]	; 0x30
   132c8:	b	12008 <__assert_fail@plt+0xbf4>
   132cc:	mov	r0, #1
   132d0:	bl	15a30 <__assert_fail@plt+0x461c>
   132d4:	mov	r2, #5
   132d8:	movw	r1, #53336	; 0xd058
   132dc:	movt	r1, #1
   132e0:	mov	r0, r4
   132e4:	str	r3, [sp, #28]
   132e8:	bl	11174 <dcgettext@plt>
   132ec:	mov	r2, r0
   132f0:	mov	r1, r4
   132f4:	ldr	r3, [sp, #28]
   132f8:	mov	r0, #1
   132fc:	bl	1121c <error@plt>
   13300:	bl	112dc <__errno_location@plt>
   13304:	ldr	r5, [r0]
   13308:	mov	r2, #5
   1330c:	movw	r1, #49576	; 0xc1a8
   13310:	movt	r1, #1
   13314:	mov	r0, #0
   13318:	bl	11174 <dcgettext@plt>
   1331c:	mov	r6, r0
   13320:	mov	r0, #4
   13324:	ldr	r1, [sp, #68]	; 0x44
   13328:	bl	19bdc <__assert_fail@plt+0x87c8>
   1332c:	mov	r3, r0
   13330:	mov	r2, r6
   13334:	mov	r0, #0
   13338:	mov	r1, r5
   1333c:	bl	1121c <error@plt>
   13340:	mov	r0, r4
   13344:	b	13178 <__assert_fail@plt+0x1d64>
   13348:	mov	r2, #5
   1334c:	movw	r1, #54104	; 0xd358
   13350:	movt	r1, #1
   13354:	mov	r0, #0
   13358:	bl	11174 <dcgettext@plt>
   1335c:	mov	r4, r0
   13360:	mov	r2, r9
   13364:	mov	r1, #3
   13368:	mov	r0, #0
   1336c:	bl	19cb8 <__assert_fail@plt+0x88a4>
   13370:	mov	r3, r0
   13374:	mov	r2, r4
   13378:	mov	r1, fp
   1337c:	mov	r0, #1
   13380:	bl	1121c <error@plt>
   13384:	add	r3, sp, #248	; 0xf8
   13388:	mov	r6, r2
   1338c:	mov	r4, #80	; 0x50
   13390:	str	r3, [sp, #40]	; 0x28
   13394:	str	r2, [sp, #84]	; 0x54
   13398:	b	133a0 <__assert_fail@plt+0x1f8c>
   1339c:	mov	r6, r5
   133a0:	mul	r3, r4, r6
   133a4:	mov	r0, #3
   133a8:	ldr	r2, [sp, #40]	; 0x28
   133ac:	ldr	r1, [sp, #76]	; 0x4c
   133b0:	ldr	r1, [r1, r3]
   133b4:	bl	11408 <__lxstat64@plt>
   133b8:	cmp	r0, #0
   133bc:	bne	133d0 <__assert_fail@plt+0x1fbc>
   133c0:	ldr	r3, [sp, #264]	; 0x108
   133c4:	and	r3, r3, #61440	; 0xf000
   133c8:	cmp	r3, #40960	; 0xa000
   133cc:	beq	12978 <__assert_fail@plt+0x1564>
   133d0:	ldr	r3, [sp, #28]
   133d4:	add	r5, r6, #1
   133d8:	cmp	r3, r5
   133dc:	bne	1339c <__assert_fail@plt+0x1f88>
   133e0:	ldr	r3, [sp, #76]	; 0x4c
   133e4:	str	r6, [sp, #100]	; 0x64
   133e8:	ldr	r2, [r3, #48]	; 0x30
   133ec:	cmp	r2, #0
   133f0:	blt	13408 <__assert_fail@plt+0x1ff4>
   133f4:	ldr	r2, [r3, #40]	; 0x28
   133f8:	and	r2, r2, #61440	; 0xf000
   133fc:	cmp	r2, #32768	; 0x8000
   13400:	cmpne	r2, #4096	; 0x1000
   13404:	bne	12978 <__assert_fail@plt+0x1564>
   13408:	ldr	r2, [sp, #60]	; 0x3c
   1340c:	add	r3, r3, #80	; 0x50
   13410:	cmp	r3, r2
   13414:	bne	133e8 <__assert_fail@plt+0x1fd4>
   13418:	ldr	r3, [sp, #56]	; 0x38
   1341c:	cmp	r3, #0
   13420:	bne	13438 <__assert_fail@plt+0x2024>
   13424:	movw	r3, #57672	; 0xe148
   13428:	movt	r3, #2
   1342c:	ldr	r3, [r3, #4]
   13430:	cmp	r3, #2
   13434:	beq	12978 <__assert_fail@plt+0x1564>
   13438:	bl	112ac <inotify_init@plt>
   1343c:	subs	r8, r0, #0
   13440:	blt	135e0 <__assert_fail@plt+0x21cc>
   13444:	movw	r3, #57796	; 0xe1c4
   13448:	movt	r3, #2
   1344c:	ldr	r0, [r3]
   13450:	bl	111a4 <fflush_unlocked@plt>
   13454:	subs	r7, r0, #0
   13458:	bne	13d40 <__assert_fail@plt+0x292c>
   1345c:	mov	r0, r5
   13460:	movw	r3, #16048	; 0x3eb0
   13464:	movt	r3, #1
   13468:	movw	r2, #16032	; 0x3ea0
   1346c:	movt	r2, #1
   13470:	mov	r1, r7
   13474:	str	r7, [sp]
   13478:	bl	172a8 <__assert_fail@plt+0x5e94>
   1347c:	subs	r3, r0, #0
   13480:	str	r3, [sp, #32]
   13484:	beq	13c78 <__assert_fail@plt+0x2864>
   13488:	movw	fp, #57672	; 0xe148
   1348c:	movt	fp, #2
   13490:	ldr	r4, [sp, #76]	; 0x4c
   13494:	movw	r1, #53884	; 0xd27c
   13498:	movt	r1, #1
   1349c:	str	sl, [sp, #36]	; 0x24
   134a0:	ldr	r2, [fp, #4]
   134a4:	movw	r3, #3078	; 0xc06
   134a8:	mov	r6, r7
   134ac:	str	r7, [sp, #48]	; 0x30
   134b0:	str	r1, [sp, #64]	; 0x40
   134b4:	movw	r1, #53036	; 0xcf2c
   134b8:	movt	r1, #1
   134bc:	str	r1, [sp, #68]	; 0x44
   134c0:	cmp	r2, #1
   134c4:	movne	r3, #2
   134c8:	str	r3, [sp, #80]	; 0x50
   134cc:	ldrb	sl, [r4, #44]	; 0x2c
   134d0:	cmp	sl, #0
   134d4:	bne	13654 <__assert_fail@plt+0x2240>
   134d8:	ldr	r9, [r4]
   134dc:	ldr	r5, [fp, #4]
   134e0:	mov	r0, r9
   134e4:	bl	112a0 <strlen@plt>
   134e8:	cmp	r6, r0
   134ec:	mvn	r3, #0
   134f0:	movcc	r6, r0
   134f4:	cmp	r5, #1
   134f8:	str	r3, [r4, #60]	; 0x3c
   134fc:	bne	1355c <__assert_fail@plt+0x2148>
   13500:	mov	r0, r9
   13504:	bl	16538 <__assert_fail@plt+0x5124>
   13508:	mov	r5, r0
   1350c:	mov	r0, r9
   13510:	bl	162e4 <__assert_fail@plt+0x4ed0>
   13514:	ldrb	r3, [r9, r5]
   13518:	sub	r0, r0, r9
   1351c:	cmp	r5, #0
   13520:	movw	r2, #1924	; 0x784
   13524:	ldreq	r1, [sp, #68]	; 0x44
   13528:	str	r0, [r4, #68]	; 0x44
   1352c:	mov	r0, r8
   13530:	strb	sl, [r9, r5]
   13534:	ldrne	r1, [r4]
   13538:	str	r3, [sp, #72]	; 0x48
   1353c:	bl	112d0 <inotify_add_watch@plt>
   13540:	ldr	r2, [r4]
   13544:	str	r0, [r4, #64]	; 0x40
   13548:	ldr	r3, [sp, #72]	; 0x48
   1354c:	strb	r3, [r2, r5]
   13550:	ldr	r3, [r4, #64]	; 0x40
   13554:	cmp	r3, #0
   13558:	blt	13d78 <__assert_fail@plt+0x2964>
   1355c:	mov	r0, r8
   13560:	ldr	r1, [r4]
   13564:	ldr	r2, [sp, #80]	; 0x50
   13568:	bl	112d0 <inotify_add_watch@plt>
   1356c:	cmp	r0, #0
   13570:	str	r0, [r4, #60]	; 0x3c
   13574:	bge	13638 <__assert_fail@plt+0x2224>
   13578:	ldr	r3, [r4, #48]	; 0x30
   1357c:	ldr	r2, [sp, #52]	; 0x34
   13580:	cmn	r3, #1
   13584:	movne	r7, r2
   13588:	bl	112dc <__errno_location@plt>
   1358c:	ldr	r5, [r0]
   13590:	bic	r3, r5, #16
   13594:	cmp	r3, #12
   13598:	bne	13720 <__assert_fail@plt+0x230c>
   1359c:	ldr	sl, [sp, #36]	; 0x24
   135a0:	movw	r1, #53856	; 0xd260
   135a4:	movt	r1, #1
   135a8:	mov	r2, #5
   135ac:	mov	r0, #0
   135b0:	bl	11174 <dcgettext@plt>
   135b4:	mov	r1, #0
   135b8:	mov	r2, r0
   135bc:	mov	r0, r1
   135c0:	bl	1121c <error@plt>
   135c4:	ldr	r0, [sp, #32]
   135c8:	bl	174dc <__assert_fail@plt+0x60c8>
   135cc:	mov	r0, r8
   135d0:	bl	113fc <close@plt>
   135d4:	bl	112dc <__errno_location@plt>
   135d8:	mov	r3, #0
   135dc:	str	r3, [r0]
   135e0:	bl	112dc <__errno_location@plt>
   135e4:	ldr	r4, [r0]
   135e8:	mov	r2, #5
   135ec:	movw	r1, #54056	; 0xd328
   135f0:	movt	r1, #1
   135f4:	mov	r0, #0
   135f8:	bl	11174 <dcgettext@plt>
   135fc:	mov	r2, r0
   13600:	mov	r0, #0
   13604:	mov	r1, r4
   13608:	bl	1121c <error@plt>
   1360c:	b	12978 <__assert_fail@plt+0x1564>
   13610:	ldr	r2, [sp, #76]	; 0x4c
   13614:	ldr	r3, [r2, #48]	; 0x30
   13618:	cmn	r3, #1
   1361c:	beq	129bc <__assert_fail@plt+0x15a8>
   13620:	ldr	r3, [r2, #40]	; 0x28
   13624:	and	r3, r3, #61440	; 0xf000
   13628:	subs	r3, r3, #32768	; 0x8000
   1362c:	movne	r3, #1
   13630:	mov	r1, r3
   13634:	b	129bc <__assert_fail@plt+0x15a8>
   13638:	mov	r1, r4
   1363c:	ldr	r0, [sp, #32]
   13640:	bl	17900 <__assert_fail@plt+0x64ec>
   13644:	cmp	r0, #0
   13648:	beq	13c78 <__assert_fail@plt+0x2864>
   1364c:	ldr	r3, [sp, #52]	; 0x34
   13650:	str	r3, [sp, #48]	; 0x30
   13654:	ldr	r3, [sp, #60]	; 0x3c
   13658:	add	r4, r4, #80	; 0x50
   1365c:	cmp	r4, r3
   13660:	bne	134cc <__assert_fail@plt+0x20b8>
   13664:	ldr	r3, [fp, #4]
   13668:	ldr	sl, [sp, #36]	; 0x24
   1366c:	cmp	r3, #2
   13670:	beq	13c10 <__assert_fail@plt+0x27fc>
   13674:	ldr	r5, [sp, #60]	; 0x3c
   13678:	ldr	r3, [sp, #116]	; 0x74
   1367c:	ldr	r2, [sp, #76]	; 0x4c
   13680:	sub	r3, r3, #80	; 0x50
   13684:	add	r3, r2, r3
   13688:	mov	r4, r2
   1368c:	str	r3, [sp, #124]	; 0x7c
   13690:	b	136fc <__assert_fail@plt+0x22e8>
   13694:	ldr	r3, [r4, #48]	; 0x30
   13698:	cmn	r3, #1
   1369c:	beq	136e4 <__assert_fail@plt+0x22d0>
   136a0:	mov	r0, #3
   136a4:	ldr	r1, [r4]
   136a8:	ldr	r2, [sp, #40]	; 0x28
   136ac:	bl	113c0 <__xstat64@plt>
   136b0:	cmp	r0, #0
   136b4:	bne	136e4 <__assert_fail@plt+0x22d0>
   136b8:	ldrd	r0, [r4, #24]
   136bc:	ldrd	r2, [sp, #248]	; 0xf8
   136c0:	cmp	r1, r3
   136c4:	cmpeq	r0, r2
   136c8:	bne	13c2c <__assert_fail@plt+0x2818>
   136cc:	add	r3, sp, #344	; 0x158
   136d0:	ldrd	r0, [r4, #32]
   136d4:	ldrd	r2, [r3]
   136d8:	cmp	r1, r3
   136dc:	cmpeq	r0, r2
   136e0:	bne	13c2c <__assert_fail@plt+0x2818>
   136e4:	add	r1, sp, #124	; 0x7c
   136e8:	mov	r0, r4
   136ec:	bl	14818 <__assert_fail@plt+0x3404>
   136f0:	add	r4, r4, #80	; 0x50
   136f4:	cmp	r4, r5
   136f8:	beq	13764 <__assert_fail@plt+0x2350>
   136fc:	ldrb	r1, [r4, #44]	; 0x2c
   13700:	cmp	r1, #0
   13704:	bne	136f0 <__assert_fail@plt+0x22dc>
   13708:	ldr	r3, [fp, #4]
   1370c:	cmp	r3, #1
   13710:	bne	13694 <__assert_fail@plt+0x2280>
   13714:	mov	r0, r4
   13718:	bl	153e0 <__assert_fail@plt+0x3fcc>
   1371c:	b	136e4 <__assert_fail@plt+0x22d0>
   13720:	ldr	r3, [r4, #52]	; 0x34
   13724:	cmp	r5, r3
   13728:	beq	13654 <__assert_fail@plt+0x2240>
   1372c:	mov	r2, #5
   13730:	mov	r0, #0
   13734:	ldr	r1, [sp, #64]	; 0x40
   13738:	bl	11174 <dcgettext@plt>
   1373c:	mov	r9, r0
   13740:	mov	r0, #4
   13744:	ldr	r1, [r4]
   13748:	bl	19bdc <__assert_fail@plt+0x87c8>
   1374c:	mov	r3, r0
   13750:	mov	r2, r9
   13754:	mov	r1, r5
   13758:	mov	r0, #0
   1375c:	bl	1121c <error@plt>
   13760:	b	13654 <__assert_fail@plt+0x2240>
   13764:	vldr	d10, [pc, #724]	; 13a40 <__assert_fail@plt+0x262c>
   13768:	mov	r3, #0
   1376c:	add	r0, r6, #17
   13770:	mov	r7, r3
   13774:	vldr	d9, [pc, #716]	; 13a48 <__assert_fail@plt+0x2634>
   13778:	str	r3, [sp, #48]	; 0x30
   1377c:	mov	r3, #3
   13780:	str	r3, [sp, #64]	; 0x40
   13784:	str	r0, [sp, #68]	; 0x44
   13788:	bl	1a51c <__assert_fail@plt+0x9108>
   1378c:	str	r0, [sp, #36]	; 0x24
   13790:	ldr	r4, [fp, #4]
   13794:	cmp	r4, #1
   13798:	beq	138c0 <__assert_fail@plt+0x24ac>
   1379c:	ldr	r3, [sp, #48]	; 0x30
   137a0:	cmp	r7, r3
   137a4:	bcs	138fc <__assert_fail@plt+0x24e8>
   137a8:	ldr	r3, [sp, #36]	; 0x24
   137ac:	add	r5, r3, r7
   137b0:	add	r7, r7, #16
   137b4:	ldr	r9, [r5]
   137b8:	ldr	r3, [r5, #4]
   137bc:	mov	r2, r3
   137c0:	ands	r4, r3, #1024	; 0x400
   137c4:	ldr	r3, [r5, #12]
   137c8:	str	r2, [sp, #96]	; 0x60
   137cc:	add	r7, r3, r7
   137d0:	beq	1389c <__assert_fail@plt+0x2488>
   137d4:	cmp	r3, #0
   137d8:	movne	r4, #0
   137dc:	ldrne	r6, [sp, #76]	; 0x4c
   137e0:	beq	13ba4 <__assert_fail@plt+0x2790>
   137e4:	add	r3, r5, #16
   137e8:	str	r3, [sp, #72]	; 0x48
   137ec:	str	r7, [sp, #88]	; 0x58
   137f0:	mov	r7, r9
   137f4:	mov	r9, r5
   137f8:	ldr	r5, [sp, #100]	; 0x64
   137fc:	b	13810 <__assert_fail@plt+0x23fc>
   13800:	cmp	r4, r5
   13804:	add	r6, r6, #80	; 0x50
   13808:	add	r4, r4, #1
   1380c:	beq	139c8 <__assert_fail@plt+0x25b4>
   13810:	ldr	r1, [r6, #64]	; 0x40
   13814:	cmp	r1, r7
   13818:	bne	13800 <__assert_fail@plt+0x23ec>
   1381c:	ldr	ip, [r6]
   13820:	ldr	r1, [r6, #68]	; 0x44
   13824:	ldr	r0, [sp, #72]	; 0x48
   13828:	add	r1, ip, r1
   1382c:	bl	110cc <strcmp@plt>
   13830:	cmp	r0, #0
   13834:	bne	13800 <__assert_fail@plt+0x23ec>
   13838:	mov	r5, r9
   1383c:	mov	r3, #80	; 0x50
   13840:	ldr	r7, [sp, #88]	; 0x58
   13844:	ldr	r2, [sp, #96]	; 0x60
   13848:	mul	r3, r3, r4
   1384c:	str	r3, [sp, #72]	; 0x48
   13850:	ands	r9, r2, #512	; 0x200
   13854:	ldr	r2, [sp, #76]	; 0x4c
   13858:	add	r4, r2, r3
   1385c:	beq	13a50 <__assert_fail@plt+0x263c>
   13860:	ldr	r3, [fp, #4]
   13864:	cmp	r3, #1
   13868:	beq	13b70 <__assert_fail@plt+0x275c>
   1386c:	cmp	r4, #0
   13870:	beq	13790 <__assert_fail@plt+0x237c>
   13874:	ldr	r3, [r5, #4]
   13878:	movw	r2, #3588	; 0xe04
   1387c:	tst	r3, r2
   13880:	beq	139d0 <__assert_fail@plt+0x25bc>
   13884:	tst	r3, #1024	; 0x400
   13888:	bne	13b88 <__assert_fail@plt+0x2774>
   1388c:	mov	r0, r4
   13890:	mov	r1, #0
   13894:	bl	153e0 <__assert_fail@plt+0x3fcc>
   13898:	b	13790 <__assert_fail@plt+0x237c>
   1389c:	cmp	r3, #0
   138a0:	ldrne	r6, [sp, #76]	; 0x4c
   138a4:	bne	137e4 <__assert_fail@plt+0x23d0>
   138a8:	str	r9, [sp, #308]	; 0x134
   138ac:	ldr	r0, [sp, #32]
   138b0:	ldr	r1, [sp, #40]	; 0x28
   138b4:	bl	16f88 <__assert_fail@plt+0x5b74>
   138b8:	mov	r4, r0
   138bc:	b	1386c <__assert_fail@plt+0x2458>
   138c0:	ldrb	r3, [sl, #2]
   138c4:	cmp	r3, #0
   138c8:	bne	1379c <__assert_fail@plt+0x2388>
   138cc:	ldr	r0, [sp, #32]
   138d0:	bl	16d18 <__assert_fail@plt+0x5904>
   138d4:	subs	r5, r0, #0
   138d8:	bne	1379c <__assert_fail@plt+0x2388>
   138dc:	mov	r2, #5
   138e0:	movw	r1, #53916	; 0xd29c
   138e4:	movt	r1, #1
   138e8:	bl	11174 <dcgettext@plt>
   138ec:	mov	r2, r0
   138f0:	mov	r1, r5
   138f4:	mov	r0, r4
   138f8:	bl	1121c <error@plt>
   138fc:	ldr	r7, [sp, #40]	; 0x28
   13900:	ldr	r6, [sp, #84]	; 0x54
   13904:	b	1396c <__assert_fail@plt+0x2558>
   13908:	cmp	r6, #0
   1390c:	bne	13b80 <__assert_fail@plt+0x276c>
   13910:	mov	r1, r6
   13914:	bl	1127c <kill@plt>
   13918:	cmp	r0, #0
   1391c:	beq	13980 <__assert_fail@plt+0x256c>
   13920:	bl	112dc <__errno_location@plt>
   13924:	ldr	r3, [r0]
   13928:	cmp	r3, #1
   1392c:	movne	r2, r6
   13930:	ldrne	r6, [sp, #52]	; 0x34
   13934:	beq	13980 <__assert_fail@plt+0x256c>
   13938:	mov	r4, #1
   1393c:	mov	r5, #0
   13940:	str	r8, [sp, #248]	; 0xf8
   13944:	ldrb	r1, [sl, #13]
   13948:	mov	r3, #16
   1394c:	mov	r0, r7
   13950:	strh	r4, [sp, #252]	; 0xfc
   13954:	str	r4, [sp, #256]	; 0x100
   13958:	str	r5, [sp, #260]	; 0x104
   1395c:	add	r1, r1, r4
   13960:	bl	111d4 <__poll_chk@plt>
   13964:	cmp	r0, r5
   13968:	bne	139e0 <__assert_fail@plt+0x25cc>
   1396c:	ldr	r0, [sl, #8]
   13970:	cmp	r0, #0
   13974:	bne	13908 <__assert_fail@plt+0x24f4>
   13978:	mvn	r2, #0
   1397c:	b	13938 <__assert_fail@plt+0x2524>
   13980:	vcmpe.f64	d8, #0.0
   13984:	vmrs	APSR_nzcv, fpscr
   13988:	bls	139c0 <__assert_fail@plt+0x25ac>
   1398c:	vcmpe.f64	d8, d10
   13990:	vmrs	APSR_nzcv, fpscr
   13994:	bpl	13978 <__assert_fail@plt+0x2564>
   13998:	vmul.f64	d6, d8, d9
   1399c:	vcvt.s32.f64	s15, d6
   139a0:	vcvt.f64.s32	d5, s15
   139a4:	vmov	r3, s15
   139a8:	vcmpe.f64	d6, d5
   139ac:	vmrs	APSR_nzcv, fpscr
   139b0:	movgt	r2, #1
   139b4:	movle	r2, #0
   139b8:	add	r2, r3, r2
   139bc:	b	13938 <__assert_fail@plt+0x2524>
   139c0:	mov	r2, #0
   139c4:	b	13938 <__assert_fail@plt+0x2524>
   139c8:	ldr	r7, [sp, #88]	; 0x58
   139cc:	b	13790 <__assert_fail@plt+0x237c>
   139d0:	mov	r0, r4
   139d4:	add	r1, sp, #124	; 0x7c
   139d8:	bl	14818 <__assert_fail@plt+0x3404>
   139dc:	b	13790 <__assert_fail@plt+0x237c>
   139e0:	str	r6, [sp, #84]	; 0x54
   139e4:	blt	13c7c <__assert_fail@plt+0x2868>
   139e8:	add	r3, sp, #260	; 0x104
   139ec:	add	r3, r3, #2
   139f0:	ldrsh	r7, [r3]
   139f4:	cmp	r7, #0
   139f8:	bne	13d34 <__assert_fail@plt+0x2920>
   139fc:	mov	r0, r8
   13a00:	ldr	r1, [sp, #36]	; 0x24
   13a04:	ldr	r2, [sp, #68]	; 0x44
   13a08:	bl	19ea8 <__assert_fail@plt+0x8a94>
   13a0c:	subs	r3, r0, #0
   13a10:	str	r3, [sp, #48]	; 0x30
   13a14:	beq	13bd4 <__assert_fail@plt+0x27c0>
   13a18:	cmn	r3, #1
   13a1c:	bne	137a8 <__assert_fail@plt+0x2394>
   13a20:	bl	112dc <__errno_location@plt>
   13a24:	ldr	r3, [r0]
   13a28:	cmp	r3, #22
   13a2c:	beq	13bd4 <__assert_fail@plt+0x27c0>
   13a30:	bl	112dc <__errno_location@plt>
   13a34:	movw	r1, #53980	; 0xd2dc
   13a38:	movt	r1, #1
   13a3c:	b	12ed4 <__assert_fail@plt+0x1ac0>
   13a40:	andeq	r0, r0, r0
   13a44:	cmpmi	r0, sp, asr #4
   13a48:	andeq	r0, r0, r0
   13a4c:	addmi	r4, pc, r0
   13a50:	ldr	r1, [sp, #72]	; 0x48
   13a54:	mov	r0, r8
   13a58:	ldr	r3, [sp, #76]	; 0x4c
   13a5c:	ldr	r2, [sp, #80]	; 0x50
   13a60:	ldr	r1, [r3, r1]
   13a64:	bl	112d0 <inotify_add_watch@plt>
   13a68:	subs	r6, r0, #0
   13a6c:	bge	13acc <__assert_fail@plt+0x26b8>
   13a70:	bl	112dc <__errno_location@plt>
   13a74:	ldr	r3, [r0]
   13a78:	str	r3, [sp, #88]	; 0x58
   13a7c:	bic	r3, r3, #16
   13a80:	cmp	r3, #12
   13a84:	beq	135a0 <__assert_fail@plt+0x218c>
   13a88:	mov	r2, #5
   13a8c:	movw	r1, #53884	; 0xd27c
   13a90:	movt	r1, #1
   13a94:	mov	r0, r9
   13a98:	bl	11174 <dcgettext@plt>
   13a9c:	mov	r2, r0
   13aa0:	ldr	r3, [sp, #76]	; 0x4c
   13aa4:	mov	r0, #4
   13aa8:	str	r2, [sp, #96]	; 0x60
   13aac:	ldr	r2, [sp, #72]	; 0x48
   13ab0:	ldr	r1, [r3, r2]
   13ab4:	bl	19bdc <__assert_fail@plt+0x87c8>
   13ab8:	mov	r3, r0
   13abc:	mov	r0, r9
   13ac0:	ldr	r1, [sp, #88]	; 0x58
   13ac4:	ldr	r2, [sp, #96]	; 0x60
   13ac8:	bl	1121c <error@plt>
   13acc:	ldr	r1, [r4, #60]	; 0x3c
   13ad0:	subs	r3, r6, r1
   13ad4:	movne	r3, #1
   13ad8:	orrs	r3, r3, r1, lsr #31
   13adc:	beq	13b64 <__assert_fail@plt+0x2750>
   13ae0:	cmp	r1, #0
   13ae4:	blt	13afc <__assert_fail@plt+0x26e8>
   13ae8:	mov	r0, r8
   13aec:	bl	113d8 <inotify_rm_watch@plt>
   13af0:	mov	r1, r4
   13af4:	ldr	r0, [sp, #32]
   13af8:	bl	17940 <__assert_fail@plt+0x652c>
   13afc:	cmn	r6, #1
   13b00:	str	r6, [r4, #60]	; 0x3c
   13b04:	beq	13790 <__assert_fail@plt+0x237c>
   13b08:	mov	r1, r4
   13b0c:	ldr	r0, [sp, #32]
   13b10:	bl	17940 <__assert_fail@plt+0x652c>
   13b14:	cmp	r0, #0
   13b18:	cmpne	r4, r0
   13b1c:	mov	r6, r0
   13b20:	beq	13b50 <__assert_fail@plt+0x273c>
   13b24:	ldr	r3, [fp, #4]
   13b28:	cmp	r3, #1
   13b2c:	beq	13ca8 <__assert_fail@plt+0x2894>
   13b30:	mvn	r3, #0
   13b34:	ldr	r0, [r6]
   13b38:	str	r3, [r6, #60]	; 0x3c
   13b3c:	ldr	r6, [r6, #48]	; 0x30
   13b40:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   13b44:	mov	r1, r0
   13b48:	mov	r0, r6
   13b4c:	bl	13f14 <__assert_fail@plt+0x2b00>
   13b50:	mov	r1, r4
   13b54:	ldr	r0, [sp, #32]
   13b58:	bl	17900 <__assert_fail@plt+0x64ec>
   13b5c:	cmp	r0, #0
   13b60:	beq	13c78 <__assert_fail@plt+0x2864>
   13b64:	ldr	r3, [fp, #4]
   13b68:	cmp	r3, #1
   13b6c:	bne	13874 <__assert_fail@plt+0x2460>
   13b70:	mov	r1, #0
   13b74:	mov	r0, r4
   13b78:	bl	153e0 <__assert_fail@plt+0x3fcc>
   13b7c:	b	1386c <__assert_fail@plt+0x2458>
   13b80:	mov	r0, #0
   13b84:	bl	11294 <exit@plt>
   13b88:	mov	r0, r8
   13b8c:	ldr	r1, [r4, #60]	; 0x3c
   13b90:	bl	113d8 <inotify_rm_watch@plt>
   13b94:	mov	r1, r4
   13b98:	ldr	r0, [sp, #32]
   13b9c:	bl	17940 <__assert_fail@plt+0x652c>
   13ba0:	b	1388c <__assert_fail@plt+0x2478>
   13ba4:	ldr	r1, [sp, #60]	; 0x3c
   13ba8:	ldr	r3, [sp, #76]	; 0x4c
   13bac:	b	13bbc <__assert_fail@plt+0x27a8>
   13bb0:	add	r3, r3, #80	; 0x50
   13bb4:	cmp	r3, r1
   13bb8:	beq	138a8 <__assert_fail@plt+0x2494>
   13bbc:	ldr	r2, [r3, #64]	; 0x40
   13bc0:	cmp	r2, r9
   13bc4:	bne	13bb0 <__assert_fail@plt+0x279c>
   13bc8:	movw	r1, #54008	; 0xd2f8
   13bcc:	movt	r1, #1
   13bd0:	b	135a8 <__assert_fail@plt+0x2194>
   13bd4:	ldr	r3, [sp, #64]	; 0x40
   13bd8:	cmp	r3, #0
   13bdc:	beq	13a30 <__assert_fail@plt+0x261c>
   13be0:	mov	r7, #0
   13be4:	ldr	r0, [sp, #36]	; 0x24
   13be8:	ldr	r3, [sp, #68]	; 0x44
   13bec:	str	r7, [sp, #48]	; 0x30
   13bf0:	lsl	r1, r3, #1
   13bf4:	ldr	r3, [sp, #64]	; 0x40
   13bf8:	str	r1, [sp, #68]	; 0x44
   13bfc:	sub	r3, r3, #1
   13c00:	str	r3, [sp, #64]	; 0x40
   13c04:	bl	1a588 <__assert_fail@plt+0x9174>
   13c08:	str	r0, [sp, #36]	; 0x24
   13c0c:	b	13790 <__assert_fail@plt+0x237c>
   13c10:	cmp	r7, #0
   13c14:	bne	135c4 <__assert_fail@plt+0x21b0>
   13c18:	ldr	r3, [sp, #48]	; 0x30
   13c1c:	cmp	r3, #0
   13c20:	bne	13674 <__assert_fail@plt+0x2260>
   13c24:	mov	r0, #1
   13c28:	bl	11294 <exit@plt>
   13c2c:	bl	112dc <__errno_location@plt>
   13c30:	mov	r2, #5
   13c34:	movw	r1, #53900	; 0xd28c
   13c38:	movt	r1, #1
   13c3c:	ldr	r5, [r0]
   13c40:	mov	r0, #0
   13c44:	bl	11174 <dcgettext@plt>
   13c48:	mov	r6, r0
   13c4c:	ldr	r0, [r4]
   13c50:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   13c54:	mov	r1, r0
   13c58:	mov	r0, #4
   13c5c:	bl	19bdc <__assert_fail@plt+0x87c8>
   13c60:	mov	r3, r0
   13c64:	mov	r2, r6
   13c68:	mov	r1, r5
   13c6c:	mov	r0, #0
   13c70:	bl	1121c <error@plt>
   13c74:	b	135c4 <__assert_fail@plt+0x21b0>
   13c78:	bl	1a994 <__assert_fail@plt+0x9580>
   13c7c:	bl	112dc <__errno_location@plt>
   13c80:	ldr	r6, [r0]
   13c84:	mov	r2, #5
   13c88:	movw	r1, #53936	; 0xd2b0
   13c8c:	movt	r1, #1
   13c90:	mov	r0, r5
   13c94:	bl	11174 <dcgettext@plt>
   13c98:	mov	r2, r0
   13c9c:	mov	r0, r4
   13ca0:	mov	r1, r6
   13ca4:	bl	1121c <error@plt>
   13ca8:	mov	r1, #0
   13cac:	bl	153e0 <__assert_fail@plt+0x3fcc>
   13cb0:	b	13b30 <__assert_fail@plt+0x271c>
   13cb4:	bl	112dc <__errno_location@plt>
   13cb8:	ldr	r5, [r0]
   13cbc:	mov	r2, #5
   13cc0:	mov	r0, r4
   13cc4:	movw	r1, #53072	; 0xcf50
   13cc8:	movt	r1, #1
   13ccc:	bl	11174 <dcgettext@plt>
   13cd0:	mov	r4, r0
   13cd4:	ldr	r0, [r6, #4]
   13cd8:	bl	19e90 <__assert_fail@plt+0x8a7c>
   13cdc:	movw	r2, #53088	; 0xcf60
   13ce0:	movt	r2, #1
   13ce4:	str	r0, [sp]
   13ce8:	mov	r1, r5
   13cec:	mov	r3, r4
   13cf0:	mov	r0, #1
   13cf4:	bl	1121c <error@plt>
   13cf8:	mov	r2, #5
   13cfc:	movw	r1, #53636	; 0xd184
   13d00:	movt	r1, #1
   13d04:	mov	r0, #0
   13d08:	bl	11174 <dcgettext@plt>
   13d0c:	mov	r4, r0
   13d10:	movw	r1, #49500	; 0xc15c
   13d14:	movt	r1, #1
   13d18:	mov	r0, #4
   13d1c:	bl	19bdc <__assert_fail@plt+0x87c8>
   13d20:	mov	r3, r0
   13d24:	mov	r2, r4
   13d28:	mov	r0, r5
   13d2c:	mov	r1, #0
   13d30:	bl	1121c <error@plt>
   13d34:	mov	r0, #13
   13d38:	bl	110c0 <raise@plt>
   13d3c:	b	13c24 <__assert_fail@plt+0x2810>
   13d40:	bl	112dc <__errno_location@plt>
   13d44:	movw	r1, #49704	; 0xc228
   13d48:	movt	r1, #1
   13d4c:	b	12ed4 <__assert_fail@plt+0x1ac0>
   13d50:	bl	112dc <__errno_location@plt>
   13d54:	movw	r2, #49500	; 0xc15c
   13d58:	movt	r2, #1
   13d5c:	ldr	r1, [r0]
   13d60:	mov	r0, #1
   13d64:	bl	1121c <error@plt>
   13d68:	bl	112dc <__errno_location@plt>
   13d6c:	movw	r1, #49560	; 0xc198
   13d70:	movt	r1, #1
   13d74:	b	12ed4 <__assert_fail@plt+0x1ac0>
   13d78:	bl	112dc <__errno_location@plt>
   13d7c:	ldr	r5, [r0]
   13d80:	ldr	sl, [sp, #36]	; 0x24
   13d84:	cmp	r5, #28
   13d88:	beq	135a0 <__assert_fail@plt+0x218c>
   13d8c:	movw	r1, #53820	; 0xd23c
   13d90:	movt	r1, #1
   13d94:	mov	r2, #5
   13d98:	mov	r0, #0
   13d9c:	bl	11174 <dcgettext@plt>
   13da0:	mov	r6, r0
   13da4:	mov	r0, #4
   13da8:	ldr	r1, [r4]
   13dac:	b	13c5c <__assert_fail@plt+0x2848>
   13db0:	mov	fp, #0
   13db4:	mov	lr, #0
   13db8:	pop	{r1}		; (ldr r1, [sp], #4)
   13dbc:	mov	r2, sp
   13dc0:	push	{r2}		; (str r2, [sp, #-4]!)
   13dc4:	push	{r0}		; (str r0, [sp, #-4]!)
   13dc8:	ldr	ip, [pc, #16]	; 13de0 <__assert_fail@plt+0x29cc>
   13dcc:	push	{ip}		; (str ip, [sp, #-4]!)
   13dd0:	ldr	r0, [pc, #12]	; 13de4 <__assert_fail@plt+0x29d0>
   13dd4:	ldr	r3, [pc, #12]	; 13de8 <__assert_fail@plt+0x29d4>
   13dd8:	bl	1124c <__libc_start_main@plt>
   13ddc:	bl	113f0 <abort@plt>
   13de0:	andeq	fp, r1, r0, ror #31
   13de4:	andeq	r1, r1, r0, lsr #8
   13de8:	andeq	fp, r1, r0, lsl #31
   13dec:	ldr	r3, [pc, #20]	; 13e08 <__assert_fail@plt+0x29f4>
   13df0:	ldr	r2, [pc, #20]	; 13e0c <__assert_fail@plt+0x29f8>
   13df4:	add	r3, pc, r3
   13df8:	ldr	r2, [r3, r2]
   13dfc:	cmp	r2, #0
   13e00:	bxeq	lr
   13e04:	b	11264 <__gmon_start__@plt>
   13e08:	andeq	sl, r1, r4, lsl #4
   13e0c:	andeq	r0, r0, r8, lsr r1
   13e10:	ldr	r0, [pc, #24]	; 13e30 <__assert_fail@plt+0x2a1c>
   13e14:	ldr	r3, [pc, #24]	; 13e34 <__assert_fail@plt+0x2a20>
   13e18:	cmp	r3, r0
   13e1c:	bxeq	lr
   13e20:	ldr	r3, [pc, #16]	; 13e38 <__assert_fail@plt+0x2a24>
   13e24:	cmp	r3, #0
   13e28:	bxeq	lr
   13e2c:	bx	r3
   13e30:	andeq	lr, r2, ip, lsr #3
   13e34:	andeq	lr, r2, ip, lsr #3
   13e38:	andeq	r0, r0, r0
   13e3c:	ldr	r0, [pc, #36]	; 13e68 <__assert_fail@plt+0x2a54>
   13e40:	ldr	r1, [pc, #36]	; 13e6c <__assert_fail@plt+0x2a58>
   13e44:	sub	r1, r1, r0
   13e48:	asr	r1, r1, #2
   13e4c:	add	r1, r1, r1, lsr #31
   13e50:	asrs	r1, r1, #1
   13e54:	bxeq	lr
   13e58:	ldr	r3, [pc, #16]	; 13e70 <__assert_fail@plt+0x2a5c>
   13e5c:	cmp	r3, #0
   13e60:	bxeq	lr
   13e64:	bx	r3
   13e68:	andeq	lr, r2, ip, lsr #3
   13e6c:	andeq	lr, r2, ip, lsr #3
   13e70:	andeq	r0, r0, r0
   13e74:	push	{r4, lr}
   13e78:	ldr	r4, [pc, #24]	; 13e98 <__assert_fail@plt+0x2a84>
   13e7c:	ldrb	r3, [r4]
   13e80:	cmp	r3, #0
   13e84:	popne	{r4, pc}
   13e88:	bl	13e10 <__assert_fail@plt+0x29fc>
   13e8c:	mov	r3, #1
   13e90:	strb	r3, [r4]
   13e94:	pop	{r4, pc}
   13e98:	andeq	lr, r2, ip, asr #3
   13e9c:	b	13e3c <__assert_fail@plt+0x2a28>
   13ea0:	ldr	r3, [r0, #60]	; 0x3c
   13ea4:	udiv	r0, r3, r1
   13ea8:	mls	r0, r0, r1, r3
   13eac:	bx	lr
   13eb0:	ldr	r0, [r0, #60]	; 0x3c
   13eb4:	ldr	r3, [r1, #60]	; 0x3c
   13eb8:	sub	r0, r0, r3
   13ebc:	clz	r0, r0
   13ec0:	lsr	r0, r0, #5
   13ec4:	bx	lr
   13ec8:	movw	r1, #49500	; 0xc15c
   13ecc:	movt	r1, #1
   13ed0:	str	r4, [sp, #-8]!
   13ed4:	mov	r4, r0
   13ed8:	str	lr, [sp, #4]
   13edc:	bl	110cc <strcmp@plt>
   13ee0:	cmp	r0, #0
   13ee4:	beq	13ef8 <__assert_fail@plt+0x2ae4>
   13ee8:	mov	r0, r4
   13eec:	ldr	r4, [sp]
   13ef0:	add	sp, sp, #4
   13ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef8:	movw	r1, #49504	; 0xc160
   13efc:	movt	r1, #1
   13f00:	ldr	r4, [sp]
   13f04:	mov	r2, #5
   13f08:	ldr	lr, [sp, #4]
   13f0c:	add	sp, sp, #8
   13f10:	b	11174 <dcgettext@plt>
   13f14:	add	r2, r0, #1
   13f18:	cmp	r2, #1
   13f1c:	bxls	lr
   13f20:	strd	r4, [sp, #-20]!	; 0xffffffec
   13f24:	mov	r4, r0
   13f28:	mov	r5, r1
   13f2c:	strd	r6, [sp, #8]
   13f30:	str	lr, [sp, #16]
   13f34:	sub	sp, sp, #12
   13f38:	bl	113fc <close@plt>
   13f3c:	cmp	r0, #0
   13f40:	bne	13f58 <__assert_fail@plt+0x2b44>
   13f44:	add	sp, sp, #12
   13f48:	ldrd	r4, [sp]
   13f4c:	ldrd	r6, [sp, #8]
   13f50:	add	sp, sp, #16
   13f54:	pop	{pc}		; (ldr pc, [sp], #4)
   13f58:	bl	112dc <__errno_location@plt>
   13f5c:	ldr	r7, [r0]
   13f60:	mov	r2, #5
   13f64:	movw	r1, #49520	; 0xc170
   13f68:	movt	r1, #1
   13f6c:	mov	r0, #0
   13f70:	bl	11174 <dcgettext@plt>
   13f74:	mov	r6, r0
   13f78:	mov	r1, r5
   13f7c:	mov	r0, #4
   13f80:	bl	19bdc <__assert_fail@plt+0x87c8>
   13f84:	mov	r3, r0
   13f88:	mov	r1, r7
   13f8c:	str	r4, [sp]
   13f90:	mov	r2, r6
   13f94:	mov	r0, #0
   13f98:	bl	1121c <error@plt>
   13f9c:	b	13f44 <__assert_fail@plt+0x2b30>
   13fa0:	strd	r4, [sp, #-16]!
   13fa4:	subs	r4, r1, #0
   13fa8:	str	r6, [sp, #8]
   13fac:	str	lr, [sp, #12]
   13fb0:	beq	13fd4 <__assert_fail@plt+0x2bc0>
   13fb4:	movw	r5, #57796	; 0xe1c4
   13fb8:	movt	r5, #2
   13fbc:	mov	r2, r4
   13fc0:	mov	r1, #1
   13fc4:	ldr	r3, [r5]
   13fc8:	bl	11150 <fwrite_unlocked@plt>
   13fcc:	cmp	r4, r0
   13fd0:	bhi	13fe4 <__assert_fail@plt+0x2bd0>
   13fd4:	ldrd	r4, [sp]
   13fd8:	ldr	r6, [sp, #8]
   13fdc:	add	sp, sp, #12
   13fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fe4:	ldr	r0, [r5]
   13fe8:	bl	113a8 <clearerr_unlocked@plt>
   13fec:	bl	112dc <__errno_location@plt>
   13ff0:	ldr	r4, [r0]
   13ff4:	mov	r2, #5
   13ff8:	movw	r1, #49540	; 0xc184
   13ffc:	movt	r1, #1
   14000:	mov	r0, #0
   14004:	bl	11174 <dcgettext@plt>
   14008:	mov	r5, r0
   1400c:	movw	r1, #49560	; 0xc198
   14010:	movt	r1, #1
   14014:	mov	r0, #4
   14018:	bl	19bdc <__assert_fail@plt+0x87c8>
   1401c:	mov	r3, r0
   14020:	mov	r2, r5
   14024:	mov	r1, r4
   14028:	mov	r0, #1
   1402c:	bl	1121c <error@plt>
   14030:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14034:	mov	r5, r3
   14038:	mov	r4, r2
   1403c:	strd	r6, [sp, #8]
   14040:	strd	r8, [sp, #16]
   14044:	strd	sl, [sp, #24]
   14048:	str	lr, [sp, #32]
   1404c:	sub	sp, sp, #8192	; 0x2000
   14050:	sub	sp, sp, #12
   14054:	add	r3, sp, #8192	; 0x2000
   14058:	add	r3, r3, #48	; 0x30
   1405c:	ldr	r8, [r3]
   14060:	orrs	r3, r4, r5
   14064:	str	r1, [sp]
   14068:	str	r0, [sp, #4]
   1406c:	beq	140ec <__assert_fail@plt+0x2cd8>
   14070:	movw	r9, #57808	; 0xe1d0
   14074:	movt	r9, #2
   14078:	add	r1, sp, #8
   1407c:	mov	r2, #8192	; 0x2000
   14080:	ldr	r0, [sp]
   14084:	bl	19ea8 <__assert_fail@plt+0x8a94>
   14088:	subs	r1, r0, #0
   1408c:	beq	14120 <__assert_fail@plt+0x2d0c>
   14090:	cmn	r1, #1
   14094:	beq	14128 <__assert_fail@plt+0x2d14>
   14098:	ldrd	r2, [r8]
   1409c:	add	r0, sp, #8
   140a0:	add	r6, r0, r1
   140a4:	ldrb	r7, [r9]
   140a8:	adds	sl, r2, r1
   140ac:	adc	fp, r3, #0
   140b0:	mov	r2, sl
   140b4:	mov	r3, fp
   140b8:	strd	r2, [r8]
   140bc:	sub	r2, r6, r0
   140c0:	mov	r1, r7
   140c4:	bl	11330 <memchr@plt>
   140c8:	cmp	r0, #0
   140cc:	beq	14078 <__assert_fail@plt+0x2c64>
   140d0:	subs	r4, r4, #1
   140d4:	add	r0, r0, #1
   140d8:	sbc	r5, r5, #0
   140dc:	orrs	r3, r4, r5
   140e0:	bne	140bc <__assert_fail@plt+0x2ca8>
   140e4:	cmp	r6, r0
   140e8:	bhi	14110 <__assert_fail@plt+0x2cfc>
   140ec:	mov	r0, #0
   140f0:	add	sp, sp, #8192	; 0x2000
   140f4:	add	sp, sp, #12
   140f8:	ldrd	r4, [sp]
   140fc:	ldrd	r6, [sp, #8]
   14100:	ldrd	r8, [sp, #16]
   14104:	ldrd	sl, [sp, #24]
   14108:	add	sp, sp, #32
   1410c:	pop	{pc}		; (ldr pc, [sp], #4)
   14110:	sub	r1, r6, r0
   14114:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   14118:	mov	r0, #0
   1411c:	b	140f0 <__assert_fail@plt+0x2cdc>
   14120:	mvn	r0, #0
   14124:	b	140f0 <__assert_fail@plt+0x2cdc>
   14128:	bl	112dc <__errno_location@plt>
   1412c:	ldr	r4, [r0]
   14130:	mov	r2, #5
   14134:	movw	r1, #49576	; 0xc1a8
   14138:	movt	r1, #1
   1413c:	mov	r0, #0
   14140:	bl	11174 <dcgettext@plt>
   14144:	mov	r5, r0
   14148:	mov	r0, #4
   1414c:	ldr	r1, [sp, #4]
   14150:	bl	19bdc <__assert_fail@plt+0x87c8>
   14154:	mov	r3, r0
   14158:	mov	r2, r5
   1415c:	mov	r0, #0
   14160:	mov	r1, r4
   14164:	bl	1121c <error@plt>
   14168:	mov	r0, #1
   1416c:	b	140f0 <__assert_fail@plt+0x2cdc>
   14170:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14174:	movw	r3, #52356	; 0xcc84
   14178:	movt	r3, #1
   1417c:	strd	r6, [sp, #8]
   14180:	mov	r5, #0
   14184:	strd	r8, [sp, #16]
   14188:	mov	r9, r0
   1418c:	strd	sl, [sp, #24]
   14190:	movw	sl, #57672	; 0xe148
   14194:	movt	sl, #2
   14198:	str	lr, [sp, #32]
   1419c:	sub	sp, sp, #8192	; 0x2000
   141a0:	mov	fp, r2
   141a4:	sub	sp, sp, #20
   141a8:	str	r5, [sp, #4]
   141ac:	str	r3, [sp, #12]
   141b0:	add	r3, sp, #8192	; 0x2000
   141b4:	add	r3, r3, #56	; 0x38
   141b8:	str	r1, [sp, #8]
   141bc:	ldrd	r6, [r3]
   141c0:	b	14280 <__assert_fail@plt+0x2e6c>
   141c4:	cmp	r0, #0
   141c8:	beq	142f4 <__assert_fail@plt+0x2ee0>
   141cc:	cmp	r9, #0
   141d0:	beq	14208 <__assert_fail@plt+0x2df4>
   141d4:	ldrb	ip, [sl]
   141d8:	movw	r2, #49608	; 0xc1c8
   141dc:	movt	r2, #1
   141e0:	movw	r1, #49596	; 0xc1bc
   141e4:	movt	r1, #1
   141e8:	mov	r0, #1
   141ec:	ldr	r3, [sp, #8]
   141f0:	ldr	lr, [sp, #12]
   141f4:	cmp	ip, #0
   141f8:	movne	r2, lr
   141fc:	bl	11300 <__printf_chk@plt>
   14200:	mov	r3, #0
   14204:	strb	r3, [sl]
   14208:	mov	r1, r4
   1420c:	add	r0, sp, #16
   14210:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   14214:	ldr	r0, [sp, #4]
   14218:	adds	r5, r5, r4
   1421c:	mov	r1, #0
   14220:	mvn	r3, #0
   14224:	mvn	r2, #0
   14228:	adc	r0, r0, r1
   1422c:	str	r0, [sp, #4]
   14230:	add	r0, sp, #8192	; 0x2000
   14234:	add	r0, r0, #56	; 0x38
   14238:	ldrd	r8, [r0]
   1423c:	cmp	r9, r3
   14240:	cmpeq	r8, r2
   14244:	beq	1427c <__assert_fail@plt+0x2e68>
   14248:	subs	r6, r6, r4
   1424c:	mvn	r3, #0
   14250:	sbc	r7, r7, r1
   14254:	mvn	r2, #1
   14258:	orrs	r1, r6, r7
   1425c:	moveq	r1, #1
   14260:	movne	r1, #0
   14264:	cmp	r9, r3
   14268:	cmpeq	r8, r2
   1426c:	movne	r3, r1
   14270:	moveq	r3, #1
   14274:	cmp	r3, #0
   14278:	bne	142f4 <__assert_fail@plt+0x2ee0>
   1427c:	mov	r9, #0
   14280:	cmp	r7, #0
   14284:	mov	r2, r6
   14288:	cmpeq	r6, #8192	; 0x2000
   1428c:	add	r1, sp, #16
   14290:	movhi	r2, #8192	; 0x2000
   14294:	mov	r0, fp
   14298:	bl	19ea8 <__assert_fail@plt+0x8a94>
   1429c:	cmn	r0, #1
   142a0:	mov	r4, r0
   142a4:	bne	141c4 <__assert_fail@plt+0x2db0>
   142a8:	bl	112dc <__errno_location@plt>
   142ac:	ldr	r4, [r0]
   142b0:	ldr	r8, [sp, #4]
   142b4:	cmp	r4, #11
   142b8:	beq	142f8 <__assert_fail@plt+0x2ee4>
   142bc:	mov	r2, #5
   142c0:	movw	r1, #49576	; 0xc1a8
   142c4:	movt	r1, #1
   142c8:	mov	r0, #0
   142cc:	bl	11174 <dcgettext@plt>
   142d0:	mov	r5, r0
   142d4:	mov	r0, #4
   142d8:	ldr	r1, [sp, #8]
   142dc:	bl	19bdc <__assert_fail@plt+0x87c8>
   142e0:	mov	r3, r0
   142e4:	mov	r2, r5
   142e8:	mov	r1, r4
   142ec:	mov	r0, #1
   142f0:	bl	1121c <error@plt>
   142f4:	ldr	r8, [sp, #4]
   142f8:	mov	r0, r5
   142fc:	mov	r1, r8
   14300:	add	sp, sp, #8192	; 0x2000
   14304:	add	sp, sp, #20
   14308:	ldrd	r4, [sp]
   1430c:	ldrd	r6, [sp, #8]
   14310:	ldrd	r8, [sp, #16]
   14314:	ldrd	sl, [sp, #24]
   14318:	add	sp, sp, #32
   1431c:	pop	{pc}		; (ldr pc, [sp], #4)
   14320:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14324:	mov	r5, r3
   14328:	mov	r4, r2
   1432c:	strd	r6, [sp, #8]
   14330:	str	r8, [sp, #16]
   14334:	str	lr, [sp, #20]
   14338:	sub	sp, sp, #8192	; 0x2000
   1433c:	add	r3, sp, #8192	; 0x2000
   14340:	add	r3, r3, #24
   14344:	ldr	r8, [r3]
   14348:	orrs	r3, r4, r5
   1434c:	movne	r7, r0
   14350:	movne	r6, r1
   14354:	bne	14390 <__assert_fail@plt+0x2f7c>
   14358:	b	143c0 <__assert_fail@plt+0x2fac>
   1435c:	cmn	r0, #1
   14360:	beq	143dc <__assert_fail@plt+0x2fc8>
   14364:	ldm	r8, {ip, lr}
   14368:	adds	ip, ip, r0
   1436c:	adc	lr, lr, r3
   14370:	cmp	r3, r5
   14374:	cmpeq	r0, r4
   14378:	stm	r8, {ip, lr}
   1437c:	bhi	143b4 <__assert_fail@plt+0x2fa0>
   14380:	subs	r4, r4, r0
   14384:	sbc	r5, r5, r3
   14388:	orrs	r3, r4, r5
   1438c:	beq	143c0 <__assert_fail@plt+0x2fac>
   14390:	mov	r2, #8192	; 0x2000
   14394:	mov	r1, sp
   14398:	mov	r0, r6
   1439c:	bl	19ea8 <__assert_fail@plt+0x8a94>
   143a0:	cmp	r0, #0
   143a4:	mov	r3, #0
   143a8:	bne	1435c <__assert_fail@plt+0x2f48>
   143ac:	mvn	r0, #0
   143b0:	b	143c4 <__assert_fail@plt+0x2fb0>
   143b4:	sub	r1, r0, r4
   143b8:	add	r0, sp, r4
   143bc:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   143c0:	mov	r0, #0
   143c4:	add	sp, sp, #8192	; 0x2000
   143c8:	ldrd	r4, [sp]
   143cc:	ldrd	r6, [sp, #8]
   143d0:	ldr	r8, [sp, #16]
   143d4:	add	sp, sp, #20
   143d8:	pop	{pc}		; (ldr pc, [sp], #4)
   143dc:	bl	112dc <__errno_location@plt>
   143e0:	ldr	r4, [r0]
   143e4:	mov	r2, #5
   143e8:	movw	r1, #49576	; 0xc1a8
   143ec:	movt	r1, #1
   143f0:	mov	r0, #0
   143f4:	bl	11174 <dcgettext@plt>
   143f8:	mov	r5, r0
   143fc:	mov	r1, r7
   14400:	mov	r0, #4
   14404:	bl	19bdc <__assert_fail@plt+0x87c8>
   14408:	mov	r3, r0
   1440c:	mov	r2, r5
   14410:	mov	r0, #0
   14414:	mov	r1, r4
   14418:	bl	1121c <error@plt>
   1441c:	mov	r0, #1
   14420:	b	143c4 <__assert_fail@plt+0x2fb0>
   14424:	strd	r4, [sp, #-20]!	; 0xffffffec
   14428:	strd	r6, [sp, #8]
   1442c:	mov	r7, r3
   14430:	mov	r6, r2
   14434:	str	lr, [sp, #16]
   14438:	sub	sp, sp, #36	; 0x24
   1443c:	ldr	r4, [sp, #56]	; 0x38
   14440:	str	r4, [sp]
   14444:	bl	111ec <lseek64@plt>
   14448:	cmp	r0, #0
   1444c:	sbcs	r3, r1, #0
   14450:	blt	14468 <__assert_fail@plt+0x3054>
   14454:	add	sp, sp, #36	; 0x24
   14458:	ldrd	r4, [sp]
   1445c:	ldrd	r6, [sp, #8]
   14460:	add	sp, sp, #16
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	mov	r1, r7
   1446c:	add	r2, sp, #8
   14470:	mov	r0, r6
   14474:	bl	17a5c <__assert_fail@plt+0x6648>
   14478:	mov	r5, r0
   1447c:	bl	112dc <__errno_location@plt>
   14480:	cmp	r4, #1
   14484:	ldr	r4, [r0]
   14488:	mov	r2, #5
   1448c:	movwne	r1, #49612	; 0xc1cc
   14490:	movweq	r1, #49644	; 0xc1ec
   14494:	movtne	r1, #1
   14498:	movteq	r1, #1
   1449c:	mov	r0, #0
   144a0:	bl	11174 <dcgettext@plt>
   144a4:	mov	r6, r0
   144a8:	mov	r1, #3
   144ac:	ldr	r2, [sp, #60]	; 0x3c
   144b0:	mov	r0, #0
   144b4:	bl	19cb8 <__assert_fail@plt+0x88a4>
   144b8:	mov	r3, r0
   144bc:	mov	r2, r6
   144c0:	str	r5, [sp]
   144c4:	mov	r0, #0
   144c8:	mov	r1, r4
   144cc:	bl	1121c <error@plt>
   144d0:	mov	r0, #1
   144d4:	bl	11294 <exit@plt>
   144d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144dc:	mov	r5, r3
   144e0:	mov	r4, r2
   144e4:	strd	r6, [sp, #8]
   144e8:	orrs	r3, r4, r5
   144ec:	strd	r8, [sp, #16]
   144f0:	strd	sl, [sp, #24]
   144f4:	str	lr, [sp, #32]
   144f8:	sub	sp, sp, #8192	; 0x2000
   144fc:	sub	sp, sp, #36	; 0x24
   14500:	add	r3, sp, #8256	; 0x2040
   14504:	add	r3, r3, #16
   14508:	str	r1, [sp, #8]
   1450c:	ldr	r3, [r3]
   14510:	str	r0, [sp, #12]
   14514:	str	r3, [sp, #16]
   14518:	add	r3, sp, #8256	; 0x2040
   1451c:	add	r3, r3, #20
   14520:	ldr	r3, [r3]
   14524:	str	r3, [sp, #20]
   14528:	add	r3, sp, #8256	; 0x2040
   1452c:	add	r3, r3, #24
   14530:	ldr	r9, [r3]
   14534:	beq	14778 <__assert_fail@plt+0x3364>
   14538:	add	r3, sp, #8256	; 0x2040
   1453c:	mov	r1, #0
   14540:	add	r3, r3, #8
   14544:	ldr	r2, [sp, #16]
   14548:	mov	r7, #0
   1454c:	add	r6, sp, #32
   14550:	ldr	r3, [r3]
   14554:	subs	r0, r2, r3
   14558:	add	r3, sp, #8256	; 0x2040
   1455c:	ldr	r2, [sp, #20]
   14560:	add	r3, r3, #12
   14564:	ldr	r3, [r3]
   14568:	str	r7, [sp]
   1456c:	sbc	r3, r2, r3
   14570:	ldr	r2, [sp, #16]
   14574:	asr	ip, r3, #31
   14578:	eor	r0, r0, ip
   1457c:	subs	r3, r0, ip
   14580:	ldr	r0, [sp, #8]
   14584:	ubfx	r3, r3, #0, #13
   14588:	eor	r3, r3, ip
   1458c:	subs	r3, r3, ip
   14590:	cmp	r3, r1
   14594:	mov	r8, r3
   14598:	moveq	r3, #8192	; 0x2000
   1459c:	moveq	r8, r3
   145a0:	subs	sl, r2, r3
   145a4:	ldr	r3, [sp, #12]
   145a8:	mov	r2, sl
   145ac:	str	r3, [sp, #4]
   145b0:	ldr	r3, [sp, #20]
   145b4:	sbc	fp, r3, r1
   145b8:	mov	r3, fp
   145bc:	bl	14424 <__assert_fail@plt+0x3010>
   145c0:	mov	r2, r8
   145c4:	mov	r1, r6
   145c8:	ldr	r0, [sp, #8]
   145cc:	bl	19ea8 <__assert_fail@plt+0x8a94>
   145d0:	cmn	r0, #1
   145d4:	mov	r8, r0
   145d8:	beq	14780 <__assert_fail@plt+0x336c>
   145dc:	mov	r2, r0
   145e0:	mov	r3, #0
   145e4:	strd	r2, [sp, #24]
   145e8:	adds	r2, r0, sl
   145ec:	adc	r3, r3, fp
   145f0:	cmp	r0, #0
   145f4:	strd	r2, [r9]
   145f8:	bne	14748 <__assert_fail@plt+0x3334>
   145fc:	add	r3, sp, #8256	; 0x2040
   14600:	add	r3, r3, #8
   14604:	ldrd	r2, [r3]
   14608:	cmp	fp, r3
   1460c:	cmpeq	sl, r2
   14610:	beq	147c4 <__assert_fail@plt+0x33b0>
   14614:	ldr	r8, [sp, #8]
   14618:	subs	sl, sl, #8192	; 0x2000
   1461c:	mov	r7, #0
   14620:	sbc	fp, fp, #0
   14624:	mov	r2, sl
   14628:	ldr	r3, [sp, #12]
   1462c:	str	r7, [sp]
   14630:	mov	r0, r8
   14634:	str	r3, [sp, #4]
   14638:	mov	r3, fp
   1463c:	bl	14424 <__assert_fail@plt+0x3010>
   14640:	mov	r0, r8
   14644:	mov	r2, #8192	; 0x2000
   14648:	mov	r1, r6
   1464c:	bl	19ea8 <__assert_fail@plt+0x8a94>
   14650:	cmn	r0, #1
   14654:	mov	r8, r0
   14658:	beq	14780 <__assert_fail@plt+0x336c>
   1465c:	mov	r2, r0
   14660:	mov	r3, #0
   14664:	strd	r2, [sp, #24]
   14668:	adds	r2, r0, sl
   1466c:	adc	r3, r3, fp
   14670:	cmp	r0, #0
   14674:	strd	r2, [r9]
   14678:	beq	14778 <__assert_fail@plt+0x3364>
   1467c:	movw	r3, #57808	; 0xe1d0
   14680:	movt	r3, #2
   14684:	ldrb	r7, [r3]
   14688:	mov	r2, r8
   1468c:	b	1469c <__assert_fail@plt+0x3288>
   14690:	cmp	r2, #0
   14694:	mov	r5, r1
   14698:	beq	145fc <__assert_fail@plt+0x31e8>
   1469c:	mov	r1, r7
   146a0:	mov	r0, r6
   146a4:	bl	112c4 <memrchr@plt>
   146a8:	cmp	r0, #0
   146ac:	beq	145fc <__assert_fail@plt+0x31e8>
   146b0:	subs	r3, r4, #1
   146b4:	sub	r2, r0, r6
   146b8:	sbc	r1, r5, #0
   146bc:	orrs	ip, r4, r5
   146c0:	mov	r4, r3
   146c4:	bne	14690 <__assert_fail@plt+0x327c>
   146c8:	sub	r1, r8, #1
   146cc:	add	r0, r0, #1
   146d0:	sub	r1, r1, r2
   146d4:	mov	r7, #1
   146d8:	bl	13fa0 <__assert_fail@plt+0x2b8c>
   146dc:	mov	r0, #0
   146e0:	ldr	r2, [sp, #8]
   146e4:	ldr	r3, [sp, #24]
   146e8:	ldr	r1, [sp, #28]
   146ec:	adds	r3, r3, sl
   146f0:	adc	sl, r1, fp
   146f4:	ldr	r1, [sp, #16]
   146f8:	subs	r3, r1, r3
   146fc:	ldr	r1, [sp, #20]
   14700:	sbc	sl, r1, sl
   14704:	ldr	r1, [sp, #12]
   14708:	stm	sp, {r3, sl}
   1470c:	bl	14170 <__assert_fail@plt+0x2d5c>
   14710:	ldr	r3, [r9]
   14714:	ldr	r2, [r9, #4]
   14718:	adds	r0, r3, r0
   1471c:	adc	r1, r2, r1
   14720:	strd	r0, [r9]
   14724:	mov	r0, r7
   14728:	add	sp, sp, #8192	; 0x2000
   1472c:	add	sp, sp, #36	; 0x24
   14730:	ldrd	r4, [sp]
   14734:	ldrd	r6, [sp, #8]
   14738:	ldrd	r8, [sp, #16]
   1473c:	ldrd	sl, [sp, #24]
   14740:	add	sp, sp, #32
   14744:	pop	{pc}		; (ldr pc, [sp], #4)
   14748:	movw	r3, #57808	; 0xe1d0
   1474c:	movt	r3, #2
   14750:	add	r2, r6, r0
   14754:	ldrb	r1, [r3]
   14758:	ldrb	r2, [r2, #-1]
   1475c:	cmp	r2, r1
   14760:	beq	1476c <__assert_fail@plt+0x3358>
   14764:	subs	r4, r4, #1
   14768:	sbc	r5, r5, #0
   1476c:	cmp	r8, #0
   14770:	bne	14684 <__assert_fail@plt+0x3270>
   14774:	b	145fc <__assert_fail@plt+0x31e8>
   14778:	mov	r7, #1
   1477c:	b	14724 <__assert_fail@plt+0x3310>
   14780:	bl	112dc <__errno_location@plt>
   14784:	ldr	r4, [r0]
   14788:	mov	r2, #5
   1478c:	mov	r0, r7
   14790:	movw	r1, #49576	; 0xc1a8
   14794:	movt	r1, #1
   14798:	bl	11174 <dcgettext@plt>
   1479c:	mov	r5, r0
   147a0:	mov	r0, #4
   147a4:	ldr	r1, [sp, #12]
   147a8:	bl	19bdc <__assert_fail@plt+0x87c8>
   147ac:	mov	r3, r0
   147b0:	mov	r2, r5
   147b4:	mov	r1, r4
   147b8:	mov	r0, r7
   147bc:	bl	1121c <error@plt>
   147c0:	b	14724 <__assert_fail@plt+0x3310>
   147c4:	ldr	r6, [sp, #8]
   147c8:	mov	r4, #0
   147cc:	mov	r2, sl
   147d0:	mov	r3, fp
   147d4:	mov	r7, #1
   147d8:	ldr	r5, [sp, #12]
   147dc:	mov	r0, r6
   147e0:	strd	r4, [sp]
   147e4:	bl	14424 <__assert_fail@plt+0x3010>
   147e8:	ldr	r3, [sp, #16]
   147ec:	mov	r0, r4
   147f0:	mov	r2, r6
   147f4:	mov	r1, r5
   147f8:	str	r3, [sp]
   147fc:	ldr	r3, [sp, #20]
   14800:	str	r3, [sp, #4]
   14804:	bl	14170 <__assert_fail@plt+0x2d5c>
   14808:	adds	r0, sl, r0
   1480c:	adc	r1, fp, r1
   14810:	strd	r0, [r9]
   14814:	b	14724 <__assert_fail@plt+0x3310>
   14818:	ldr	r3, [r0, #48]	; 0x30
   1481c:	cmn	r3, #1
   14820:	bxeq	lr
   14824:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14828:	mov	r4, r0
   1482c:	mov	r5, r1
   14830:	ldr	r0, [r0]
   14834:	strd	r6, [sp, #8]
   14838:	strd	r8, [sp, #16]
   1483c:	str	lr, [sp, #24]
   14840:	sub	sp, sp, #116	; 0x74
   14844:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   14848:	mov	r6, r0
   1484c:	add	r2, sp, #8
   14850:	ldr	r1, [r4, #48]	; 0x30
   14854:	mov	r0, #3
   14858:	bl	111c8 <__fxstat64@plt>
   1485c:	subs	r7, r0, #0
   14860:	bne	1499c <__assert_fail@plt+0x3588>
   14864:	ldr	r3, [r4, #40]	; 0x28
   14868:	and	r3, r3, #61440	; 0xf000
   1486c:	cmp	r3, #32768	; 0x8000
   14870:	beq	148e4 <__assert_fail@plt+0x34d0>
   14874:	movw	r3, #57808	; 0xe1d0
   14878:	movt	r3, #2
   1487c:	ldrb	r0, [r3, #1]
   14880:	cmp	r0, #0
   14884:	beq	14894 <__assert_fail@plt+0x3480>
   14888:	ldr	r0, [r5]
   1488c:	subs	r0, r0, r4
   14890:	movne	r0, #1
   14894:	mvn	r8, #0
   14898:	mvn	r9, #0
   1489c:	ldr	r2, [r4, #48]	; 0x30
   148a0:	mov	r1, r6
   148a4:	strd	r8, [sp]
   148a8:	bl	14170 <__assert_fail@plt+0x2d5c>
   148ac:	ldr	r3, [r4, #8]
   148b0:	ldr	r2, [r4, #12]
   148b4:	adds	r3, r3, r0
   148b8:	adc	r2, r2, r1
   148bc:	orrs	r1, r0, r1
   148c0:	str	r3, [r4, #8]
   148c4:	str	r2, [r4, #12]
   148c8:	bne	14954 <__assert_fail@plt+0x3540>
   148cc:	add	sp, sp, #116	; 0x74
   148d0:	ldrd	r4, [sp]
   148d4:	ldrd	r6, [sp, #8]
   148d8:	ldrd	r8, [sp, #16]
   148dc:	add	sp, sp, #24
   148e0:	pop	{pc}		; (ldr pc, [sp], #4)
   148e4:	ldrd	r2, [r4, #8]
   148e8:	ldrd	r8, [sp, #56]	; 0x38
   148ec:	cmp	r8, r2
   148f0:	sbcs	r1, r9, r3
   148f4:	blt	149c0 <__assert_fail@plt+0x35ac>
   148f8:	cmp	r9, r3
   148fc:	cmpeq	r8, r2
   14900:	bne	14874 <__assert_fail@plt+0x3460>
   14904:	ldr	r3, [r4, #16]
   14908:	ldr	ip, [sp, #88]	; 0x58
   1490c:	ldr	r1, [r4, #20]
   14910:	ldr	r0, [sp, #92]	; 0x5c
   14914:	cmp	ip, r3
   14918:	movle	r2, #0
   1491c:	movgt	r2, #1
   14920:	cmp	ip, r3
   14924:	rsbge	r2, r2, #0
   14928:	rsblt	r2, r2, #1
   1492c:	cmp	r0, r1
   14930:	movle	r3, #0
   14934:	movgt	r3, #1
   14938:	cmp	r0, r1
   1493c:	rsbge	r3, r3, #0
   14940:	rsblt	r3, r3, #1
   14944:	add	r3, r3, r2, lsl #1
   14948:	cmp	r3, #0
   1494c:	bne	14874 <__assert_fail@plt+0x3460>
   14950:	b	148cc <__assert_fail@plt+0x34b8>
   14954:	movw	r3, #57796	; 0xe1c4
   14958:	movt	r3, #2
   1495c:	ldr	r0, [r3]
   14960:	str	r4, [r5]
   14964:	bl	111a4 <fflush_unlocked@plt>
   14968:	cmp	r0, #0
   1496c:	beq	148cc <__assert_fail@plt+0x34b8>
   14970:	bl	112dc <__errno_location@plt>
   14974:	ldr	r4, [r0]
   14978:	mov	r2, #5
   1497c:	movw	r1, #49704	; 0xc228
   14980:	movt	r1, #1
   14984:	mov	r0, #0
   14988:	bl	11174 <dcgettext@plt>
   1498c:	mov	r2, r0
   14990:	mov	r0, #1
   14994:	mov	r1, r4
   14998:	bl	1121c <error@plt>
   1499c:	bl	112dc <__errno_location@plt>
   149a0:	ldr	r3, [r0]
   149a4:	mov	r1, r6
   149a8:	ldr	r0, [r4, #48]	; 0x30
   149ac:	str	r3, [r4, #52]	; 0x34
   149b0:	bl	13f14 <__assert_fail@plt+0x2b00>
   149b4:	mvn	r3, #0
   149b8:	str	r3, [r4, #48]	; 0x30
   149bc:	b	148cc <__assert_fail@plt+0x34b8>
   149c0:	mov	r2, #5
   149c4:	movw	r1, #49684	; 0xc214
   149c8:	movt	r1, #1
   149cc:	bl	11174 <dcgettext@plt>
   149d0:	mov	r8, r0
   149d4:	mov	r2, r6
   149d8:	mov	r1, #3
   149dc:	mov	r0, r7
   149e0:	bl	19cb8 <__assert_fail@plt+0x88a4>
   149e4:	mov	r3, r0
   149e8:	mov	r2, r8
   149ec:	mov	r1, r7
   149f0:	mov	r0, r7
   149f4:	bl	1121c <error@plt>
   149f8:	mov	r2, #0
   149fc:	mov	r3, #0
   14a00:	str	r7, [sp]
   14a04:	str	r6, [sp, #4]
   14a08:	ldr	r0, [r4, #48]	; 0x30
   14a0c:	bl	14424 <__assert_fail@plt+0x3010>
   14a10:	mov	r2, #0
   14a14:	mov	r3, #0
   14a18:	strd	r2, [r4, #8]
   14a1c:	b	14874 <__assert_fail@plt+0x3460>
   14a20:	strd	r4, [sp, #-16]!
   14a24:	mov	r5, r1
   14a28:	str	r6, [sp, #8]
   14a2c:	str	lr, [sp, #12]
   14a30:	sub	sp, sp, #88	; 0x58
   14a34:	mov	r1, sp
   14a38:	bl	1109c <fstatfs64@plt>
   14a3c:	subs	r2, r0, #0
   14a40:	beq	14aac <__assert_fail@plt+0x3698>
   14a44:	bl	112dc <__errno_location@plt>
   14a48:	ldr	r4, [r0]
   14a4c:	cmp	r4, #38	; 0x26
   14a50:	moveq	r0, #1
   14a54:	bne	14a6c <__assert_fail@plt+0x3658>
   14a58:	add	sp, sp, #88	; 0x58
   14a5c:	ldrd	r4, [sp]
   14a60:	ldr	r6, [sp, #8]
   14a64:	add	sp, sp, #12
   14a68:	pop	{pc}		; (ldr pc, [sp], #4)
   14a6c:	mov	r2, #5
   14a70:	movw	r1, #49716	; 0xc234
   14a74:	movt	r1, #1
   14a78:	mov	r0, #0
   14a7c:	bl	11174 <dcgettext@plt>
   14a80:	mov	r6, r0
   14a84:	mov	r1, r5
   14a88:	mov	r0, #4
   14a8c:	bl	19bdc <__assert_fail@plt+0x87c8>
   14a90:	mov	r3, r0
   14a94:	mov	r2, r6
   14a98:	mov	r0, #0
   14a9c:	mov	r1, r4
   14aa0:	bl	1121c <error@plt>
   14aa4:	mov	r0, #1
   14aa8:	b	14a58 <__assert_fail@plt+0x3644>
   14aac:	ldr	r0, [sp]
   14ab0:	movw	r3, #15685	; 0x3d45
   14ab4:	movt	r3, #10445	; 0x28cd
   14ab8:	cmp	r0, r3
   14abc:	beq	153d8 <__assert_fail@plt+0x3fc4>
   14ac0:	bhi	14b24 <__assert_fail@plt+0x3710>
   14ac4:	movw	r3, #40866	; 0x9fa2
   14ac8:	cmp	r0, r3
   14acc:	bhi	14c20 <__assert_fail@plt+0x380c>
   14ad0:	movw	r3, #40864	; 0x9fa0
   14ad4:	cmp	r0, r3
   14ad8:	bcs	153c0 <__assert_fail@plt+0x3fac>
   14adc:	movw	r3, #13364	; 0x3434
   14ae0:	cmp	r0, r3
   14ae4:	beq	153c8 <__assert_fail@plt+0x3fb4>
   14ae8:	bhi	14be8 <__assert_fail@plt+0x37d4>
   14aec:	movw	r3, #4989	; 0x137d
   14af0:	cmp	r0, r3
   14af4:	beq	15370 <__assert_fail@plt+0x3f5c>
   14af8:	bhi	14bbc <__assert_fail@plt+0x37a8>
   14afc:	movw	r3, #391	; 0x187
   14b00:	cmp	r0, r3
   14b04:	beq	15300 <__assert_fail@plt+0x3eec>
   14b08:	cmp	r0, #392	; 0x188
   14b0c:	bcs	14ba4 <__assert_fail@plt+0x3790>
   14b10:	cmp	r0, #47	; 0x2f
   14b14:	beq	151c8 <__assert_fail@plt+0x3db4>
   14b18:	subs	r0, r0, #51	; 0x33
   14b1c:	movne	r0, #1
   14b20:	b	14a58 <__assert_fail@plt+0x3644>
   14b24:	movw	r3, #25974	; 0x6576
   14b28:	movt	r3, #25188	; 0x6264
   14b2c:	cmp	r0, r3
   14b30:	beq	153d0 <__assert_fail@plt+0x3fbc>
   14b34:	bhi	14f0c <__assert_fail@plt+0x3af8>
   14b38:	movw	r3, #17229	; 0x434d
   14b3c:	movt	r3, #21317	; 0x5345
   14b40:	cmp	r0, r3
   14b44:	beq	153b0 <__assert_fail@plt+0x3f9c>
   14b48:	bhi	14eb4 <__assert_fail@plt+0x3aa0>
   14b4c:	movw	r3, #23891	; 0x5d53
   14b50:	movt	r3, #17217	; 0x4341
   14b54:	cmp	r0, r3
   14b58:	beq	15368 <__assert_fail@plt+0x3f54>
   14b5c:	bhi	14e70 <__assert_fail@plt+0x3a5c>
   14b60:	movw	r3, #17994	; 0x464a
   14b64:	movt	r3, #12627	; 0x3153
   14b68:	cmp	r0, r3
   14b6c:	beq	15350 <__assert_fail@plt+0x3f3c>
   14b70:	movw	r3, #17994	; 0x464a
   14b74:	movt	r3, #12627	; 0x3153
   14b78:	cmp	r0, r3
   14b7c:	bhi	14e4c <__assert_fail@plt+0x3a38>
   14b80:	movw	r3, #7658	; 0x1dea
   14b84:	movt	r3, #11181	; 0x2bad
   14b88:	cmp	r0, r3
   14b8c:	beq	151d0 <__assert_fail@plt+0x3dbc>
   14b90:	movw	r3, #12225	; 0x2fc1
   14b94:	movt	r3, #12225	; 0x2fc1
   14b98:	subs	r0, r0, r3
   14b9c:	movne	r0, #1
   14ba0:	b	14a58 <__assert_fail@plt+0x3644>
   14ba4:	cmp	r0, #1984	; 0x7c0
   14ba8:	beq	151d8 <__assert_fail@plt+0x3dc4>
   14bac:	movw	r3, #4979	; 0x1373
   14bb0:	subs	r0, r0, r3
   14bb4:	movne	r0, #1
   14bb8:	b	14a58 <__assert_fail@plt+0x3644>
   14bbc:	movw	r3, #7377	; 0x1cd1
   14bc0:	cmp	r0, r3
   14bc4:	beq	15358 <__assert_fail@plt+0x3f44>
   14bc8:	bhi	14c74 <__assert_fail@plt+0x3860>
   14bcc:	movw	r3, #4991	; 0x137f
   14bd0:	cmp	r0, r3
   14bd4:	beq	151e0 <__assert_fail@plt+0x3dcc>
   14bd8:	movw	r3, #5007	; 0x138f
   14bdc:	subs	r0, r0, r3
   14be0:	movne	r0, #1
   14be4:	b	14a58 <__assert_fail@plt+0x3644>
   14be8:	movw	r3, #18520	; 0x4858
   14bec:	cmp	r0, r3
   14bf0:	beq	15388 <__assert_fail@plt+0x3f74>
   14bf4:	bhi	14dc4 <__assert_fail@plt+0x39b0>
   14bf8:	movw	r3, #16390	; 0x4006
   14bfc:	cmp	r0, r3
   14c00:	beq	15360 <__assert_fail@plt+0x3f4c>
   14c04:	bhi	14da8 <__assert_fail@plt+0x3994>
   14c08:	cmp	r0, #16384	; 0x4000
   14c0c:	beq	151e8 <__assert_fail@plt+0x3dd4>
   14c10:	movw	r3, #16388	; 0x4004
   14c14:	subs	r0, r0, r3
   14c18:	movne	r0, #1
   14c1c:	b	14a58 <__assert_fail@plt+0x3644>
   14c20:	movw	r3, #53613	; 0xd16d
   14c24:	movt	r3, #303	; 0x12f
   14c28:	cmp	r0, r3
   14c2c:	beq	153b8 <__assert_fail@plt+0x3fa4>
   14c30:	bhi	14ce4 <__assert_fail@plt+0x38d0>
   14c34:	movw	r3, #6484	; 0x1954
   14c38:	movt	r3, #1
   14c3c:	cmp	r0, r3
   14c40:	beq	15378 <__assert_fail@plt+0x3f64>
   14c44:	bhi	14cac <__assert_fail@plt+0x3898>
   14c48:	movw	r3, #61265	; 0xef51
   14c4c:	cmp	r0, r3
   14c50:	beq	15310 <__assert_fail@plt+0x3efc>
   14c54:	bhi	14c90 <__assert_fail@plt+0x387c>
   14c58:	movw	r3, #44533	; 0xadf5
   14c5c:	cmp	r0, r3
   14c60:	beq	151f0 <__assert_fail@plt+0x3ddc>
   14c64:	movw	r3, #44543	; 0xadff
   14c68:	subs	r0, r0, r3
   14c6c:	movne	r0, #1
   14c70:	b	14a58 <__assert_fail@plt+0x3644>
   14c74:	movw	r3, #9320	; 0x2468
   14c78:	cmp	r0, r3
   14c7c:	beq	151f8 <__assert_fail@plt+0x3de4>
   14c80:	movw	r3, #9336	; 0x2478
   14c84:	subs	r0, r0, r3
   14c88:	movne	r0, #1
   14c8c:	b	14a58 <__assert_fail@plt+0x3644>
   14c90:	movw	r3, #61267	; 0xef53
   14c94:	cmp	r0, r3
   14c98:	beq	15200 <__assert_fail@plt+0x3dec>
   14c9c:	movw	r3, #61791	; 0xf15f
   14ca0:	subs	r0, r0, r3
   14ca4:	movne	r0, #1
   14ca8:	b	14a58 <__assert_fail@plt+0x3644>
   14cac:	movw	r3, #65518	; 0xffee
   14cb0:	movt	r3, #192	; 0xc0
   14cb4:	cmp	r0, r3
   14cb8:	beq	15318 <__assert_fail@plt+0x3f04>
   14cbc:	bhi	14d28 <__assert_fail@plt+0x3914>
   14cc0:	movw	r3, #57579	; 0xe0eb
   14cc4:	movt	r3, #39	; 0x27
   14cc8:	cmp	r0, r3
   14ccc:	beq	15208 <__assert_fail@plt+0x3df4>
   14cd0:	movw	r3, #19027	; 0x4a53
   14cd4:	movt	r3, #65	; 0x41
   14cd8:	subs	r0, r0, r3
   14cdc:	movne	r0, #1
   14ce0:	b	14a58 <__assert_fail@plt+0x3644>
   14ce4:	movw	r3, #30804	; 0x7854
   14ce8:	movt	r3, #4400	; 0x1130
   14cec:	cmp	r0, r3
   14cf0:	beq	15380 <__assert_fail@plt+0x3f6c>
   14cf4:	bhi	14d70 <__assert_fail@plt+0x395c>
   14cf8:	movw	r3, #22561	; 0x5821
   14cfc:	movt	r3, #1893	; 0x765
   14d00:	cmp	r0, r3
   14d04:	beq	15320 <__assert_fail@plt+0x3f0c>
   14d08:	bhi	14d4c <__assert_fail@plt+0x3938>
   14d0c:	movw	r3, #2124	; 0x84c
   14d10:	movt	r3, #65232	; 0xfed0
   14d14:	add	r3, r0, r3
   14d18:	cmp	r3, #3
   14d1c:	movls	r0, #0
   14d20:	movhi	r0, #1
   14d24:	b	14a58 <__assert_fail@plt+0x3644>
   14d28:	movw	r3, #6548	; 0x1994
   14d2c:	movt	r3, #258	; 0x102
   14d30:	cmp	r0, r3
   14d34:	beq	15210 <__assert_fail@plt+0x3dfc>
   14d38:	movw	r3, #6551	; 0x1997
   14d3c:	movt	r3, #258	; 0x102
   14d40:	subs	r0, r0, r3
   14d44:	movne	r0, #1
   14d48:	b	14a58 <__assert_fail@plt+0x3644>
   14d4c:	movw	r3, #6452	; 0x1934
   14d50:	movt	r3, #2308	; 0x904
   14d54:	cmp	r0, r3
   14d58:	beq	15218 <__assert_fail@plt+0x3e04>
   14d5c:	movw	r3, #7658	; 0x1dea
   14d60:	movt	r3, #2989	; 0xbad
   14d64:	subs	r0, r0, r3
   14d68:	movne	r0, #1
   14d6c:	b	14a58 <__assert_fail@plt+0x3644>
   14d70:	movw	r3, #514	; 0x202
   14d74:	movt	r3, #6528	; 0x1980
   14d78:	cmp	r0, r3
   14d7c:	beq	15328 <__assert_fail@plt+0x3f14>
   14d80:	bhi	14df0 <__assert_fail@plt+0x39dc>
   14d84:	movw	r3, #4966	; 0x1366
   14d88:	movt	r3, #4966	; 0x1366
   14d8c:	cmp	r0, r3
   14d90:	beq	15220 <__assert_fail@plt+0x3e0c>
   14d94:	movw	r3, #13126	; 0x3346
   14d98:	movt	r3, #5377	; 0x1501
   14d9c:	subs	r0, r0, r3
   14da0:	movne	r0, #1
   14da4:	b	14a58 <__assert_fail@plt+0x3644>
   14da8:	movw	r3, #16964	; 0x4244
   14dac:	cmp	r0, r3
   14db0:	beq	15228 <__assert_fail@plt+0x3e14>
   14db4:	movw	r3, #18475	; 0x482b
   14db8:	subs	r0, r0, r3
   14dbc:	movne	r0, #1
   14dc0:	b	14a58 <__assert_fail@plt+0x3644>
   14dc4:	movw	r3, #24053	; 0x5df5
   14dc8:	cmp	r0, r3
   14dcc:	beq	15330 <__assert_fail@plt+0x3f1c>
   14dd0:	bhi	14e24 <__assert_fail@plt+0x3a10>
   14dd4:	movw	r3, #19780	; 0x4d44
   14dd8:	cmp	r0, r3
   14ddc:	beq	15230 <__assert_fail@plt+0x3e1c>
   14de0:	movw	r3, #19802	; 0x4d5a
   14de4:	subs	r0, r0, r3
   14de8:	movne	r0, #1
   14dec:	b	14a58 <__assert_fail@plt+0x3644>
   14df0:	movw	r3, #47792	; 0xbab0
   14df4:	movt	r3, #8209	; 0x2011
   14df8:	cmp	r0, r3
   14dfc:	beq	152c0 <__assert_fail@plt+0x3eac>
   14e00:	movw	r3, #6405	; 0x1905
   14e04:	movt	r3, #9221	; 0x2405
   14e08:	cmp	r0, r3
   14e0c:	beq	15238 <__assert_fail@plt+0x3e24>
   14e10:	movw	r3, #64206	; 0xface
   14e14:	movt	r3, #7085	; 0x1bad
   14e18:	subs	r0, r0, r3
   14e1c:	movne	r0, #1
   14e20:	b	14a58 <__assert_fail@plt+0x3644>
   14e24:	movw	r3, #29366	; 0x72b6
   14e28:	cmp	r0, r3
   14e2c:	beq	152c8 <__assert_fail@plt+0x3eb4>
   14e30:	movw	r3, #38496	; 0x9660
   14e34:	cmp	r0, r3
   14e38:	beq	15240 <__assert_fail@plt+0x3e2c>
   14e3c:	movw	r3, #29301	; 0x7275
   14e40:	subs	r0, r0, r3
   14e44:	movne	r0, #1
   14e48:	b	14a58 <__assert_fail@plt+0x3644>
   14e4c:	movw	r3, #21297	; 0x5331
   14e50:	movt	r3, #16966	; 0x4246
   14e54:	cmp	r0, r3
   14e58:	beq	15248 <__assert_fail@plt+0x3e34>
   14e5c:	movw	r3, #20045	; 0x4e4d
   14e60:	movt	r3, #16969	; 0x4249
   14e64:	subs	r0, r0, r3
   14e68:	movne	r0, #1
   14e6c:	b	14a58 <__assert_fail@plt+0x3644>
   14e70:	movw	r3, #17485	; 0x444d
   14e74:	movt	r3, #17741	; 0x454d
   14e78:	cmp	r0, r3
   14e7c:	beq	15338 <__assert_fail@plt+0x3f24>
   14e80:	movw	r3, #17485	; 0x444d
   14e84:	movt	r3, #17741	; 0x454d
   14e88:	cmp	r0, r3
   14e8c:	bhi	14f78 <__assert_fail@plt+0x3b64>
   14e90:	movw	r3, #16706	; 0x4142
   14e94:	movt	r3, #17485	; 0x444d
   14e98:	cmp	r0, r3
   14e9c:	beq	15250 <__assert_fail@plt+0x3e3c>
   14ea0:	movw	r3, #52520	; 0xcd28
   14ea4:	movt	r3, #17725	; 0x453d
   14ea8:	subs	r0, r0, r3
   14eac:	movne	r0, #1
   14eb0:	b	14a58 <__assert_fail@plt+0x3644>
   14eb4:	movw	r3, #18003	; 0x4653
   14eb8:	movt	r3, #22106	; 0x565a
   14ebc:	cmp	r0, r3
   14ec0:	beq	153a0 <__assert_fail@plt+0x3f8c>
   14ec4:	bhi	1511c <__assert_fail@plt+0x3d08>
   14ec8:	movw	r3, #21582	; 0x544e
   14ecc:	movt	r3, #21318	; 0x5346
   14ed0:	cmp	r0, r3
   14ed4:	beq	152f8 <__assert_fail@plt+0x3ee4>
   14ed8:	movw	r3, #21582	; 0x544e
   14edc:	movt	r3, #21318	; 0x5346
   14ee0:	cmp	r0, r3
   14ee4:	bhi	150f8 <__assert_fail@plt+0x3ce4>
   14ee8:	movw	r3, #12621	; 0x314d
   14eec:	movt	r3, #21318	; 0x5346
   14ef0:	cmp	r0, r3
   14ef4:	beq	15258 <__assert_fail@plt+0x3e44>
   14ef8:	movw	r3, #18502	; 0x4846
   14efc:	movt	r3, #21318	; 0x5346
   14f00:	subs	r0, r0, r3
   14f04:	movne	r0, #1
   14f08:	b	14a58 <__assert_fail@plt+0x3644>
   14f0c:	movw	r3, #24931	; 0x6163
   14f10:	movt	r3, #29810	; 0x7472
   14f14:	cmp	r0, r3
   14f18:	beq	153a8 <__assert_fail@plt+0x3f94>
   14f1c:	bhi	15004 <__assert_fail@plt+0x3bf0>
   14f20:	movw	r3, #26985	; 0x6969
   14f24:	movt	r3, #26457	; 0x6759
   14f28:	cmp	r0, r3
   14f2c:	beq	15390 <__assert_fail@plt+0x3f7c>
   14f30:	bhi	14fc0 <__assert_fail@plt+0x3bac>
   14f34:	movw	r3, #29296	; 0x7270
   14f38:	movt	r3, #25447	; 0x6367
   14f3c:	cmp	r0, r3
   14f40:	beq	15340 <__assert_fail@plt+0x3f2c>
   14f44:	movw	r3, #29296	; 0x7270
   14f48:	movt	r3, #25447	; 0x6367
   14f4c:	cmp	r0, r3
   14f50:	bhi	14f9c <__assert_fail@plt+0x3b88>
   14f54:	movw	r3, #25968	; 0x6570
   14f58:	movt	r3, #25189	; 0x6265
   14f5c:	cmp	r0, r3
   14f60:	beq	15260 <__assert_fail@plt+0x3e4c>
   14f64:	movw	r3, #25970	; 0x6572
   14f68:	movt	r3, #25189	; 0x6265
   14f6c:	subs	r0, r0, r3
   14f70:	movne	r0, #1
   14f74:	b	14a58 <__assert_fail@plt+0x3644>
   14f78:	movw	r3, #18003	; 0x4653
   14f7c:	movt	r3, #17752	; 0x4558
   14f80:	cmp	r0, r3
   14f84:	beq	15268 <__assert_fail@plt+0x3e54>
   14f88:	movw	r3, #18803	; 0x4973
   14f8c:	movt	r3, #21093	; 0x5265
   14f90:	subs	r0, r0, r3
   14f94:	movne	r0, #1
   14f98:	b	14a58 <__assert_fail@plt+0x3644>
   14f9c:	movw	r3, #26400	; 0x6720
   14fa0:	movt	r3, #25698	; 0x6462
   14fa4:	cmp	r0, r3
   14fa8:	beq	15270 <__assert_fail@plt+0x3e5c>
   14fac:	movw	r3, #24952	; 0x6178
   14fb0:	movt	r3, #25700	; 0x6464
   14fb4:	subs	r0, r0, r3
   14fb8:	movne	r0, #1
   14fbc:	b	14a58 <__assert_fail@plt+0x3644>
   14fc0:	movw	r3, #26227	; 0x6673
   14fc4:	movt	r3, #28275	; 0x6e73
   14fc8:	cmp	r0, r3
   14fcc:	beq	15348 <__assert_fail@plt+0x3f34>
   14fd0:	movw	r3, #26227	; 0x6673
   14fd4:	movt	r3, #28275	; 0x6e73
   14fd8:	cmp	r0, r3
   14fdc:	bhi	1505c <__assert_fail@plt+0x3c48>
   14fe0:	movw	r3, #4386	; 0x1122
   14fe4:	movt	r3, #26649	; 0x6819
   14fe8:	cmp	r0, r3
   14fec:	beq	15278 <__assert_fail@plt+0x3e64>
   14ff0:	movw	r3, #28528	; 0x6f70
   14ff4:	movt	r3, #27759	; 0x6c6f
   14ff8:	subs	r0, r0, r3
   14ffc:	movne	r0, #1
   15000:	b	14a58 <__assert_fail@plt+0x3644>
   15004:	movw	r3, #33128	; 0x8168
   15008:	movt	r3, #51582	; 0xc97e
   1500c:	cmp	r0, r3
   15010:	beq	15398 <__assert_fail@plt+0x3f84>
   15014:	bhi	150b4 <__assert_fail@plt+0x3ca0>
   15018:	movw	r3, #22774	; 0x58f6
   1501c:	movt	r3, #38276	; 0x9584
   15020:	cmp	r0, r3
   15024:	beq	152f0 <__assert_fail@plt+0x3edc>
   15028:	movw	r3, #22774	; 0x58f6
   1502c:	movt	r3, #38276	; 0x9584
   15030:	cmp	r0, r3
   15034:	bhi	15090 <__assert_fail@plt+0x3c7c>
   15038:	movw	r3, #22774	; 0x58f6
   1503c:	movt	r3, #34180	; 0x8584
   15040:	cmp	r0, r3
   15044:	beq	15280 <__assert_fail@plt+0x3e6c>
   15048:	movw	r3, #26686	; 0x683e
   1504c:	movt	r3, #37155	; 0x9123
   15050:	subs	r0, r0, r3
   15054:	movne	r0, #1
   15058:	b	14a58 <__assert_fail@plt+0x3644>
   1505c:	movw	r3, #29544	; 0x7368
   15060:	movt	r3, #29553	; 0x7371
   15064:	cmp	r0, r3
   15068:	beq	152e0 <__assert_fail@plt+0x3ecc>
   1506c:	movw	r3, #29305	; 0x7279
   15070:	movt	r3, #29554	; 0x7372
   15074:	cmp	r0, r3
   15078:	beq	15288 <__assert_fail@plt+0x3e74>
   1507c:	movw	r3, #26227	; 0x6673
   15080:	movt	r3, #29539	; 0x7363
   15084:	subs	r0, r0, r3
   15088:	movne	r0, #1
   1508c:	b	14a58 <__assert_fail@plt+0x3644>
   15090:	movw	r3, #6516	; 0x1974
   15094:	movt	r3, #43962	; 0xabba
   15098:	cmp	r0, r3
   1509c:	beq	15290 <__assert_fail@plt+0x3e7c>
   150a0:	movw	r3, #5520	; 0x1590
   150a4:	movt	r3, #51031	; 0xc757
   150a8:	subs	r0, r0, r3
   150ac:	movne	r0, #1
   150b0:	b	14a58 <__assert_fail@plt+0x3644>
   150b4:	movw	r3, #57826	; 0xe1e2
   150b8:	movt	r3, #57589	; 0xe0f5
   150bc:	cmp	r0, r3
   150c0:	beq	15308 <__assert_fail@plt+0x3ef4>
   150c4:	movw	r3, #57826	; 0xe1e2
   150c8:	movt	r3, #57589	; 0xe0f5
   150cc:	cmp	r0, r3
   150d0:	bhi	15160 <__assert_fail@plt+0x3d4c>
   150d4:	movw	r3, #18961	; 0x4a11
   150d8:	movt	r3, #51966	; 0xcafe
   150dc:	cmp	r0, r3
   150e0:	beq	15298 <__assert_fail@plt+0x3e84>
   150e4:	movw	r3, #33252	; 0x81e4
   150e8:	movt	r3, #56926	; 0xde5e
   150ec:	subs	r0, r0, r3
   150f0:	movne	r0, #1
   150f4:	b	14a58 <__assert_fail@plt+0x3644>
   150f8:	movw	r3, #17227	; 0x434b
   150fc:	movt	r3, #21327	; 0x534f
   15100:	cmp	r0, r3
   15104:	beq	152a0 <__assert_fail@plt+0x3e8c>
   15108:	mov	r3, #256	; 0x100
   1510c:	movt	r3, #21529	; 0x5419
   15110:	subs	r0, r0, r3
   15114:	movne	r0, #1
   15118:	b	14a58 <__assert_fail@plt+0x3644>
   1511c:	movw	r3, #27120	; 0x69f0
   15120:	movt	r3, #23100	; 0x5a3c
   15124:	cmp	r0, r3
   15128:	beq	152e8 <__assert_fail@plt+0x3ed4>
   1512c:	movw	r3, #27120	; 0x69f0
   15130:	movt	r3, #23100	; 0x5a3c
   15134:	cmp	r0, r3
   15138:	bhi	15194 <__assert_fail@plt+0x3d80>
   1513c:	movw	r3, #22569	; 0x5829
   15140:	movt	r3, #22569	; 0x5829
   15144:	cmp	r0, r3
   15148:	beq	152a8 <__assert_fail@plt+0x3e94>
   1514c:	movw	r3, #21314	; 0x5342
   15150:	movt	r3, #22598	; 0x5846
   15154:	subs	r0, r0, r3
   15158:	movne	r0, #1
   1515c:	b	14a58 <__assert_fail@plt+0x3644>
   15160:	movw	r3, #65420	; 0xff8c
   15164:	movt	r3, #63868	; 0xf97c
   15168:	cmp	r0, r3
   1516c:	beq	152d0 <__assert_fail@plt+0x3ebc>
   15170:	movw	r3, #59465	; 0xe849
   15174:	movt	r3, #63893	; 0xf995
   15178:	cmp	r0, r3
   1517c:	beq	152b0 <__assert_fail@plt+0x3e9c>
   15180:	movw	r3, #8208	; 0x2010
   15184:	movt	r3, #62197	; 0xf2f5
   15188:	subs	r0, r0, r3
   1518c:	movne	r0, #1
   15190:	b	14a58 <__assert_fail@plt+0x3644>
   15194:	movw	r3, #11765	; 0x2df5
   15198:	movt	r3, #24010	; 0x5dca
   1519c:	cmp	r0, r3
   151a0:	beq	152d8 <__assert_fail@plt+0x3ec4>
   151a4:	movw	r3, #26476	; 0x676c
   151a8:	movt	r3, #24933	; 0x6165
   151ac:	cmp	r0, r3
   151b0:	beq	152b8 <__assert_fail@plt+0x3ea4>
   151b4:	movw	r3, #18003	; 0x4653
   151b8:	movt	r3, #23119	; 0x5a4f
   151bc:	subs	r0, r0, r3
   151c0:	movne	r0, #1
   151c4:	b	14a58 <__assert_fail@plt+0x3644>
   151c8:	mov	r0, #0
   151cc:	b	14a58 <__assert_fail@plt+0x3644>
   151d0:	mov	r0, #0
   151d4:	b	14a58 <__assert_fail@plt+0x3644>
   151d8:	mov	r0, #0
   151dc:	b	14a58 <__assert_fail@plt+0x3644>
   151e0:	mov	r0, #0
   151e4:	b	14a58 <__assert_fail@plt+0x3644>
   151e8:	mov	r0, #0
   151ec:	b	14a58 <__assert_fail@plt+0x3644>
   151f0:	mov	r0, #0
   151f4:	b	14a58 <__assert_fail@plt+0x3644>
   151f8:	mov	r0, #0
   151fc:	b	14a58 <__assert_fail@plt+0x3644>
   15200:	mov	r0, #0
   15204:	b	14a58 <__assert_fail@plt+0x3644>
   15208:	mov	r0, #0
   1520c:	b	14a58 <__assert_fail@plt+0x3644>
   15210:	mov	r0, #0
   15214:	b	14a58 <__assert_fail@plt+0x3644>
   15218:	mov	r0, #0
   1521c:	b	14a58 <__assert_fail@plt+0x3644>
   15220:	mov	r0, #0
   15224:	b	14a58 <__assert_fail@plt+0x3644>
   15228:	mov	r0, #0
   1522c:	b	14a58 <__assert_fail@plt+0x3644>
   15230:	mov	r0, #0
   15234:	b	14a58 <__assert_fail@plt+0x3644>
   15238:	mov	r0, #0
   1523c:	b	14a58 <__assert_fail@plt+0x3644>
   15240:	mov	r0, #0
   15244:	b	14a58 <__assert_fail@plt+0x3644>
   15248:	mov	r0, #0
   1524c:	b	14a58 <__assert_fail@plt+0x3644>
   15250:	mov	r0, #0
   15254:	b	14a58 <__assert_fail@plt+0x3644>
   15258:	mov	r0, #0
   1525c:	b	14a58 <__assert_fail@plt+0x3644>
   15260:	mov	r0, #0
   15264:	b	14a58 <__assert_fail@plt+0x3644>
   15268:	mov	r0, #0
   1526c:	b	14a58 <__assert_fail@plt+0x3644>
   15270:	mov	r0, #0
   15274:	b	14a58 <__assert_fail@plt+0x3644>
   15278:	mov	r0, #0
   1527c:	b	14a58 <__assert_fail@plt+0x3644>
   15280:	mov	r0, #0
   15284:	b	14a58 <__assert_fail@plt+0x3644>
   15288:	mov	r0, #0
   1528c:	b	14a58 <__assert_fail@plt+0x3644>
   15290:	mov	r0, #0
   15294:	b	14a58 <__assert_fail@plt+0x3644>
   15298:	mov	r0, #0
   1529c:	b	14a58 <__assert_fail@plt+0x3644>
   152a0:	mov	r0, #0
   152a4:	b	14a58 <__assert_fail@plt+0x3644>
   152a8:	mov	r0, #0
   152ac:	b	14a58 <__assert_fail@plt+0x3644>
   152b0:	mov	r0, #0
   152b4:	b	14a58 <__assert_fail@plt+0x3644>
   152b8:	mov	r0, #0
   152bc:	b	14a58 <__assert_fail@plt+0x3644>
   152c0:	mov	r0, #0
   152c4:	b	14a58 <__assert_fail@plt+0x3644>
   152c8:	mov	r0, #0
   152cc:	b	14a58 <__assert_fail@plt+0x3644>
   152d0:	mov	r0, #0
   152d4:	b	14a58 <__assert_fail@plt+0x3644>
   152d8:	mov	r0, #0
   152dc:	b	14a58 <__assert_fail@plt+0x3644>
   152e0:	mov	r0, #0
   152e4:	b	14a58 <__assert_fail@plt+0x3644>
   152e8:	mov	r0, #0
   152ec:	b	14a58 <__assert_fail@plt+0x3644>
   152f0:	mov	r0, #0
   152f4:	b	14a58 <__assert_fail@plt+0x3644>
   152f8:	mov	r0, #0
   152fc:	b	14a58 <__assert_fail@plt+0x3644>
   15300:	mov	r0, #0
   15304:	b	14a58 <__assert_fail@plt+0x3644>
   15308:	mov	r0, #0
   1530c:	b	14a58 <__assert_fail@plt+0x3644>
   15310:	mov	r0, r2
   15314:	b	14a58 <__assert_fail@plt+0x3644>
   15318:	mov	r0, r2
   1531c:	b	14a58 <__assert_fail@plt+0x3644>
   15320:	mov	r0, r2
   15324:	b	14a58 <__assert_fail@plt+0x3644>
   15328:	mov	r0, r2
   1532c:	b	14a58 <__assert_fail@plt+0x3644>
   15330:	mov	r0, #0
   15334:	b	14a58 <__assert_fail@plt+0x3644>
   15338:	mov	r0, #0
   1533c:	b	14a58 <__assert_fail@plt+0x3644>
   15340:	mov	r0, #0
   15344:	b	14a58 <__assert_fail@plt+0x3644>
   15348:	mov	r0, #0
   1534c:	b	14a58 <__assert_fail@plt+0x3644>
   15350:	mov	r0, #0
   15354:	b	14a58 <__assert_fail@plt+0x3644>
   15358:	mov	r0, #0
   1535c:	b	14a58 <__assert_fail@plt+0x3644>
   15360:	mov	r0, #0
   15364:	b	14a58 <__assert_fail@plt+0x3644>
   15368:	mov	r0, r2
   1536c:	b	14a58 <__assert_fail@plt+0x3644>
   15370:	mov	r0, r2
   15374:	b	14a58 <__assert_fail@plt+0x3644>
   15378:	mov	r0, r2
   1537c:	b	14a58 <__assert_fail@plt+0x3644>
   15380:	mov	r0, r2
   15384:	b	14a58 <__assert_fail@plt+0x3644>
   15388:	mov	r0, r2
   1538c:	b	14a58 <__assert_fail@plt+0x3644>
   15390:	mov	r0, r2
   15394:	b	14a58 <__assert_fail@plt+0x3644>
   15398:	mov	r0, r2
   1539c:	b	14a58 <__assert_fail@plt+0x3644>
   153a0:	mov	r0, r2
   153a4:	b	14a58 <__assert_fail@plt+0x3644>
   153a8:	mov	r0, r2
   153ac:	b	14a58 <__assert_fail@plt+0x3644>
   153b0:	mov	r0, r2
   153b4:	b	14a58 <__assert_fail@plt+0x3644>
   153b8:	mov	r0, r2
   153bc:	b	14a58 <__assert_fail@plt+0x3644>
   153c0:	mov	r0, r2
   153c4:	b	14a58 <__assert_fail@plt+0x3644>
   153c8:	mov	r0, r2
   153cc:	b	14a58 <__assert_fail@plt+0x3644>
   153d0:	mov	r0, r2
   153d4:	b	14a58 <__assert_fail@plt+0x3644>
   153d8:	mov	r0, r2
   153dc:	b	14a58 <__assert_fail@plt+0x3644>
   153e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153e4:	mov	r4, r0
   153e8:	ldr	r5, [r0]
   153ec:	strd	r6, [sp, #8]
   153f0:	mov	r6, r1
   153f4:	movw	r1, #49500	; 0xc15c
   153f8:	movt	r1, #1
   153fc:	strd	r8, [sp, #16]
   15400:	strd	sl, [sp, #24]
   15404:	str	lr, [sp, #32]
   15408:	sub	sp, sp, #124	; 0x7c
   1540c:	mov	r0, r5
   15410:	bl	110cc <strcmp@plt>
   15414:	ldr	r8, [r4, #52]	; 0x34
   15418:	subs	r7, r0, #0
   1541c:	moveq	r5, r7
   15420:	ldrb	r9, [r4, #46]	; 0x2e
   15424:	moveq	r3, r8
   15428:	beq	15448 <__assert_fail@plt+0x4034>
   1542c:	cmp	r6, #0
   15430:	mov	r0, r5
   15434:	moveq	r1, #2048	; 0x800
   15438:	movne	r1, #0
   1543c:	bl	16814 <__assert_fail@plt+0x5400>
   15440:	ldr	r3, [r4, #52]	; 0x34
   15444:	mov	r5, r0
   15448:	clz	r3, r3
   1544c:	ldr	r2, [r4, #48]	; 0x30
   15450:	lsr	r3, r3, #5
   15454:	cmn	r2, #1
   15458:	movne	r2, #0
   1545c:	moveq	r2, #1
   15460:	cmp	r2, r3
   15464:	beq	159f0 <__assert_fail@plt+0x45dc>
   15468:	movw	sl, #57808	; 0xe1d0
   1546c:	movt	sl, #2
   15470:	ldrb	fp, [sl, #2]
   15474:	ldrb	r3, [sl, #3]
   15478:	cmp	fp, #0
   1547c:	beq	155dc <__assert_fail@plt+0x41c8>
   15480:	cmn	r5, #1
   15484:	beq	15664 <__assert_fail@plt+0x4250>
   15488:	mov	r2, #1
   1548c:	cmp	r3, #0
   15490:	strb	r2, [r4, #46]	; 0x2e
   15494:	beq	157c8 <__assert_fail@plt+0x43b4>
   15498:	add	r3, sp, #16
   1549c:	mov	r2, r3
   154a0:	mov	r1, r5
   154a4:	mov	r0, #3
   154a8:	bl	111c8 <__fxstat64@plt>
   154ac:	cmp	r0, #0
   154b0:	blt	155f4 <__assert_fail@plt+0x41e0>
   154b4:	ldr	r3, [sp, #32]
   154b8:	and	r2, r3, #61440	; 0xf000
   154bc:	and	r3, r3, #45056	; 0xb000
   154c0:	sub	r2, r2, #4096	; 0x1000
   154c4:	subs	r3, r3, #32768	; 0x8000
   154c8:	bic	r2, r2, #4096	; 0x1000
   154cc:	movne	r3, #1
   154d0:	cmp	r2, #0
   154d4:	moveq	r3, #0
   154d8:	cmp	r3, #0
   154dc:	bne	156c4 <__assert_fail@plt+0x42b0>
   154e0:	ldr	r0, [r4]
   154e4:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   154e8:	mov	r1, r0
   154ec:	mov	r0, r5
   154f0:	bl	14a20 <__assert_fail@plt+0x360c>
   154f4:	cmp	r0, #0
   154f8:	strb	r0, [r4, #45]	; 0x2d
   154fc:	beq	1550c <__assert_fail@plt+0x40f8>
   15500:	ldrb	r9, [sl, #3]
   15504:	cmp	r9, #0
   15508:	beq	15954 <__assert_fail@plt+0x4540>
   1550c:	mov	r9, #0
   15510:	bics	r8, r8, #2
   15514:	ldr	r3, [r4, #48]	; 0x30
   15518:	str	r9, [r4, #52]	; 0x34
   1551c:	beq	15800 <__assert_fail@plt+0x43ec>
   15520:	cmn	r3, #1
   15524:	bne	15a10 <__assert_fail@plt+0x45fc>
   15528:	mov	r2, #5
   1552c:	movw	r1, #50028	; 0xc36c
   15530:	movt	r1, #1
   15534:	mov	r0, r9
   15538:	bl	11174 <dcgettext@plt>
   1553c:	mov	r8, r0
   15540:	ldr	r0, [r4]
   15544:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15548:	mov	r1, r0
   1554c:	mov	r0, #4
   15550:	bl	19bdc <__assert_fail@plt+0x87c8>
   15554:	mov	r3, r0
   15558:	mov	r2, r8
   1555c:	mov	r1, r9
   15560:	mov	r0, r9
   15564:	bl	1121c <error@plt>
   15568:	ldr	r2, [sp, #32]
   1556c:	cmp	r7, #0
   15570:	mov	r8, #0
   15574:	mov	r9, #0
   15578:	mov	r7, #0
   1557c:	ldr	r3, [sp, #96]	; 0x60
   15580:	mvneq	r6, #0
   15584:	strd	r8, [r4, #8]
   15588:	ldr	r1, [sp, #100]	; 0x64
   1558c:	str	r3, [r4, #16]
   15590:	str	r2, [r4, #40]	; 0x28
   15594:	str	r1, [r4, #20]
   15598:	ldrd	r2, [sp, #16]
   1559c:	strb	r7, [r4, #44]	; 0x2c
   155a0:	ldrd	r0, [sp, #112]	; 0x70
   155a4:	strd	r2, [r4, #24]
   155a8:	str	r5, [r4, #48]	; 0x30
   155ac:	strd	r0, [r4, #32]
   155b0:	str	r6, [r4, #56]	; 0x38
   155b4:	strd	r8, [r4, #72]	; 0x48
   155b8:	ldr	r0, [r4]
   155bc:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   155c0:	mov	r2, r8
   155c4:	mov	r3, r9
   155c8:	str	r7, [sp]
   155cc:	str	r0, [sp, #4]
   155d0:	mov	r0, r5
   155d4:	bl	14424 <__assert_fail@plt+0x3010>
   155d8:	b	15648 <__assert_fail@plt+0x4234>
   155dc:	mov	r2, #1
   155e0:	cmp	r3, #0
   155e4:	strb	r2, [r4, #46]	; 0x2e
   155e8:	beq	15754 <__assert_fail@plt+0x4340>
   155ec:	cmn	r5, #1
   155f0:	bne	15498 <__assert_fail@plt+0x4084>
   155f4:	bl	112dc <__errno_location@plt>
   155f8:	ldrb	r7, [r4, #46]	; 0x2e
   155fc:	ldr	r6, [r0]
   15600:	cmp	r7, #0
   15604:	str	r6, [r4, #52]	; 0x34
   15608:	beq	15680 <__assert_fail@plt+0x426c>
   1560c:	cmp	r6, r8
   15610:	ldr	r0, [r4]
   15614:	bne	15690 <__assert_fail@plt+0x427c>
   15618:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   1561c:	mov	r1, r0
   15620:	mov	r0, r5
   15624:	bl	13f14 <__assert_fail@plt+0x2b00>
   15628:	ldr	r0, [r4]
   1562c:	ldr	r5, [r4, #48]	; 0x30
   15630:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15634:	mov	r1, r0
   15638:	mov	r0, r5
   1563c:	bl	13f14 <__assert_fail@plt+0x2b00>
   15640:	mvn	r3, #0
   15644:	str	r3, [r4, #48]	; 0x30
   15648:	add	sp, sp, #124	; 0x7c
   1564c:	ldrd	r4, [sp]
   15650:	ldrd	r6, [sp, #8]
   15654:	ldrd	r8, [sp, #16]
   15658:	ldrd	sl, [sp, #24]
   1565c:	add	sp, sp, #32
   15660:	pop	{pc}		; (ldr pc, [sp], #4)
   15664:	mov	r2, #0
   15668:	cmp	r3, r2
   1566c:	strb	r2, [r4, #46]	; 0x2e
   15670:	beq	158a4 <__assert_fail@plt+0x4490>
   15674:	bl	112dc <__errno_location@plt>
   15678:	ldr	r6, [r0]
   1567c:	str	r6, [r4, #52]	; 0x34
   15680:	cmp	r9, #0
   15684:	bne	15780 <__assert_fail@plt+0x436c>
   15688:	ldr	r0, [r4]
   1568c:	b	15618 <__assert_fail@plt+0x4204>
   15690:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15694:	mov	r2, r0
   15698:	mov	r1, #3
   1569c:	mov	r0, #0
   156a0:	bl	19cb8 <__assert_fail@plt+0x88a4>
   156a4:	mov	r3, r0
   156a8:	mov	r1, r6
   156ac:	mov	r0, #0
   156b0:	movw	r2, #53092	; 0xcf64
   156b4:	movt	r2, #1
   156b8:	bl	1121c <error@plt>
   156bc:	ldr	r0, [r4]
   156c0:	b	15618 <__assert_fail@plt+0x4204>
   156c4:	mvn	r1, #0
   156c8:	mov	r2, #0
   156cc:	cmp	fp, #0
   156d0:	strb	r2, [r4, #46]	; 0x2e
   156d4:	str	r1, [r4, #52]	; 0x34
   156d8:	bne	15924 <__assert_fail@plt+0x4510>
   156dc:	adds	r8, r8, #1
   156e0:	strb	r3, [r4, #44]	; 0x2c
   156e4:	movne	r8, #1
   156e8:	orrs	r3, r9, r8
   156ec:	beq	15688 <__assert_fail@plt+0x4274>
   156f0:	mov	r2, #5
   156f4:	movw	r1, #49888	; 0xc2e0
   156f8:	movt	r1, #1
   156fc:	mov	r0, #0
   15700:	bl	11174 <dcgettext@plt>
   15704:	mov	r6, r0
   15708:	ldr	r0, [r4]
   1570c:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15710:	mov	r1, r0
   15714:	mov	r0, #4
   15718:	bl	19bdc <__assert_fail@plt+0x87c8>
   1571c:	ldrb	r3, [r4, #44]	; 0x2c
   15720:	mov	r7, r0
   15724:	cmp	r3, #0
   15728:	movweq	r0, #52356	; 0xcc84
   1572c:	movteq	r0, #1
   15730:	bne	1593c <__assert_fail@plt+0x4528>
   15734:	mov	r1, #0
   15738:	mov	r3, r7
   1573c:	str	r0, [sp]
   15740:	mov	r2, r6
   15744:	mov	r0, r1
   15748:	bl	1121c <error@plt>
   1574c:	ldr	r0, [r4]
   15750:	b	15618 <__assert_fail@plt+0x4204>
   15754:	add	r2, sp, #16
   15758:	mov	r0, #3
   1575c:	ldr	r1, [r4]
   15760:	bl	11408 <__lxstat64@plt>
   15764:	cmp	r0, #0
   15768:	bne	155ec <__assert_fail@plt+0x41d8>
   1576c:	ldr	r3, [sp, #32]
   15770:	and	r3, r3, #61440	; 0xf000
   15774:	cmp	r3, #40960	; 0xa000
   15778:	bne	155ec <__assert_fail@plt+0x41d8>
   1577c:	b	158cc <__assert_fail@plt+0x44b8>
   15780:	mov	r2, #5
   15784:	movw	r1, #49860	; 0xc2c4
   15788:	movt	r1, #1
   1578c:	mov	r0, #0
   15790:	bl	11174 <dcgettext@plt>
   15794:	mov	r7, r0
   15798:	ldr	r0, [r4]
   1579c:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   157a0:	mov	r1, r0
   157a4:	mov	r0, #4
   157a8:	bl	19bdc <__assert_fail@plt+0x87c8>
   157ac:	mov	r3, r0
   157b0:	mov	r2, r7
   157b4:	mov	r0, #0
   157b8:	mov	r1, r6
   157bc:	bl	1121c <error@plt>
   157c0:	ldr	r0, [r4]
   157c4:	b	15618 <__assert_fail@plt+0x4204>
   157c8:	add	r3, sp, #16
   157cc:	mov	r0, #3
   157d0:	ldr	r1, [r4]
   157d4:	mov	r2, r3
   157d8:	str	r3, [sp, #12]
   157dc:	bl	11408 <__lxstat64@plt>
   157e0:	cmp	r0, #0
   157e4:	ldr	r3, [sp, #12]
   157e8:	bne	1549c <__assert_fail@plt+0x4088>
   157ec:	ldr	r2, [sp, #32]
   157f0:	and	r2, r2, #61440	; 0xf000
   157f4:	cmp	r2, #40960	; 0xa000
   157f8:	bne	1549c <__assert_fail@plt+0x4088>
   157fc:	b	158cc <__assert_fail@plt+0x44b8>
   15800:	cmn	r3, #1
   15804:	beq	159ac <__assert_fail@plt+0x4598>
   15808:	ldrd	r0, [r4, #32]
   1580c:	ldrd	r2, [sp, #112]	; 0x70
   15810:	cmp	r1, r3
   15814:	cmpeq	r0, r2
   15818:	bne	15848 <__assert_fail@plt+0x4434>
   1581c:	ldrd	r2, [sp, #16]
   15820:	ldrd	r0, [r4, #24]
   15824:	cmp	r1, r3
   15828:	cmpeq	r0, r2
   1582c:	bne	15848 <__assert_fail@plt+0x4434>
   15830:	ldr	r0, [r4]
   15834:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15838:	mov	r1, r0
   1583c:	mov	r0, r5
   15840:	bl	13f14 <__assert_fail@plt+0x2b00>
   15844:	b	15648 <__assert_fail@plt+0x4234>
   15848:	mov	r2, #5
   1584c:	movw	r1, #50096	; 0xc3b0
   15850:	movt	r1, #1
   15854:	mov	r0, #0
   15858:	bl	11174 <dcgettext@plt>
   1585c:	mov	r8, r0
   15860:	ldr	r0, [r4]
   15864:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15868:	mov	r1, r0
   1586c:	mov	r0, #4
   15870:	bl	19bdc <__assert_fail@plt+0x87c8>
   15874:	mov	r1, #0
   15878:	mov	r3, r0
   1587c:	mov	r2, r8
   15880:	mov	r0, r1
   15884:	bl	1121c <error@plt>
   15888:	ldr	r0, [r4]
   1588c:	ldr	r8, [r4, #48]	; 0x30
   15890:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   15894:	mov	r1, r0
   15898:	mov	r0, r8
   1589c:	bl	13f14 <__assert_fail@plt+0x2b00>
   158a0:	b	15568 <__assert_fail@plt+0x4154>
   158a4:	add	r2, sp, #16
   158a8:	mov	r0, #3
   158ac:	ldr	r1, [r4]
   158b0:	bl	11408 <__lxstat64@plt>
   158b4:	cmp	r0, #0
   158b8:	bne	155f4 <__assert_fail@plt+0x41e0>
   158bc:	ldr	r3, [sp, #32]
   158c0:	and	r3, r3, #61440	; 0xf000
   158c4:	cmp	r3, #40960	; 0xa000
   158c8:	bne	155f4 <__assert_fail@plt+0x41e0>
   158cc:	mvn	r3, #0
   158d0:	mov	r0, #1
   158d4:	mov	r2, #5
   158d8:	movw	r1, #49804	; 0xc28c
   158dc:	movt	r1, #1
   158e0:	strb	r0, [r4, #44]	; 0x2c
   158e4:	mov	r0, #0
   158e8:	str	r3, [r4, #52]	; 0x34
   158ec:	bl	11174 <dcgettext@plt>
   158f0:	mov	r6, r0
   158f4:	ldr	r0, [r4]
   158f8:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   158fc:	mov	r1, r0
   15900:	mov	r0, #4
   15904:	bl	19bdc <__assert_fail@plt+0x87c8>
   15908:	mov	r1, #0
   1590c:	mov	r3, r0
   15910:	mov	r2, r6
   15914:	mov	r0, r1
   15918:	bl	1121c <error@plt>
   1591c:	ldr	r0, [r4]
   15920:	b	15618 <__assert_fail@plt+0x4204>
   15924:	movw	r3, #57672	; 0xe148
   15928:	movt	r3, #2
   1592c:	ldr	r3, [r3, #4]
   15930:	subs	r3, r3, #1
   15934:	movne	r3, #1
   15938:	b	156dc <__assert_fail@plt+0x42c8>
   1593c:	movw	r1, #49936	; 0xc310
   15940:	movt	r1, #1
   15944:	mov	r2, #5
   15948:	mov	r0, #0
   1594c:	bl	11174 <dcgettext@plt>
   15950:	b	15734 <__assert_fail@plt+0x4320>
   15954:	mvn	r3, #0
   15958:	mov	r2, #5
   1595c:	movw	r1, #49964	; 0xc32c
   15960:	movt	r1, #1
   15964:	mov	r0, r9
   15968:	str	r3, [r4, #52]	; 0x34
   1596c:	bl	11174 <dcgettext@plt>
   15970:	mov	r6, r0
   15974:	ldr	r0, [r4]
   15978:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   1597c:	mov	r1, r0
   15980:	mov	r0, #4
   15984:	bl	19bdc <__assert_fail@plt+0x87c8>
   15988:	mov	r3, r0
   1598c:	mov	r2, r6
   15990:	mov	r0, r9
   15994:	mov	r1, r9
   15998:	bl	1121c <error@plt>
   1599c:	movw	r3, #257	; 0x101
   159a0:	ldr	r0, [r4]
   159a4:	strh	r3, [r4, #44]	; 0x2c
   159a8:	b	15618 <__assert_fail@plt+0x4204>
   159ac:	mov	r2, #5
   159b0:	mov	r0, r8
   159b4:	movw	r1, #50056	; 0xc388
   159b8:	movt	r1, #1
   159bc:	bl	11174 <dcgettext@plt>
   159c0:	mov	r9, r0
   159c4:	ldr	r0, [r4]
   159c8:	bl	13ec8 <__assert_fail@plt+0x2ab4>
   159cc:	mov	r1, r0
   159d0:	mov	r0, #4
   159d4:	bl	19bdc <__assert_fail@plt+0x87c8>
   159d8:	mov	r3, r0
   159dc:	mov	r2, r9
   159e0:	mov	r1, r8
   159e4:	mov	r0, r8
   159e8:	bl	1121c <error@plt>
   159ec:	b	15568 <__assert_fail@plt+0x4154>
   159f0:	movw	r3, #49160	; 0xc008
   159f4:	movt	r3, #1
   159f8:	movw	r1, #49772	; 0xc26c
   159fc:	movt	r1, #1
   15a00:	movw	r0, #49784	; 0xc278
   15a04:	movt	r0, #1
   15a08:	movw	r2, #994	; 0x3e2
   15a0c:	bl	11414 <__assert_fail@plt>
   15a10:	movw	r3, #49160	; 0xc008
   15a14:	movt	r3, #1
   15a18:	movw	r1, #49772	; 0xc26c
   15a1c:	movt	r1, #1
   15a20:	movw	r0, #50016	; 0xc360
   15a24:	movt	r0, #1
   15a28:	movw	r2, #1071	; 0x42f
   15a2c:	bl	11414 <__assert_fail@plt>
   15a30:	subs	r4, r0, #0
   15a34:	str	r7, [sp, #-8]!
   15a38:	str	lr, [sp, #4]
   15a3c:	sub	sp, sp, #56	; 0x38
   15a40:	beq	15a88 <__assert_fail@plt+0x4674>
   15a44:	movw	r3, #57792	; 0xe1c0
   15a48:	movt	r3, #2
   15a4c:	ldr	r5, [r3]
   15a50:	mov	r2, #5
   15a54:	movw	r1, #50148	; 0xc3e4
   15a58:	movt	r1, #1
   15a5c:	mov	r0, #0
   15a60:	bl	11174 <dcgettext@plt>
   15a64:	movw	r3, #57836	; 0xe1ec
   15a68:	movt	r3, #2
   15a6c:	mov	r2, r0
   15a70:	mov	r1, #1
   15a74:	ldr	r3, [r3]
   15a78:	mov	r0, r5
   15a7c:	bl	11324 <__fprintf_chk@plt>
   15a80:	mov	r0, r4
   15a84:	bl	11294 <exit@plt>
   15a88:	mov	r2, #5
   15a8c:	movw	r1, #50188	; 0xc40c
   15a90:	movt	r1, #1
   15a94:	movw	r5, #57796	; 0xe1c4
   15a98:	movt	r5, #2
   15a9c:	bl	11174 <dcgettext@plt>
   15aa0:	movw	r3, #57836	; 0xe1ec
   15aa4:	movt	r3, #2
   15aa8:	mov	r1, r0
   15aac:	mov	r0, #1
   15ab0:	ldr	r2, [r3]
   15ab4:	bl	11300 <__printf_chk@plt>
   15ab8:	mov	r2, #5
   15abc:	movw	r1, #50224	; 0xc430
   15ac0:	movt	r1, #1
   15ac4:	mov	r0, r4
   15ac8:	bl	11174 <dcgettext@plt>
   15acc:	mov	r1, r0
   15ad0:	mov	r2, #10
   15ad4:	mov	r0, #1
   15ad8:	bl	11300 <__printf_chk@plt>
   15adc:	mov	r2, #5
   15ae0:	movw	r1, #50356	; 0xc4b4
   15ae4:	movt	r1, #1
   15ae8:	mov	r0, r4
   15aec:	bl	11174 <dcgettext@plt>
   15af0:	ldr	r1, [r5]
   15af4:	bl	110b4 <fputs_unlocked@plt>
   15af8:	mov	r2, #5
   15afc:	movw	r1, #50412	; 0xc4ec
   15b00:	movt	r1, #1
   15b04:	mov	r0, r4
   15b08:	bl	11174 <dcgettext@plt>
   15b0c:	ldr	r1, [r5]
   15b10:	bl	110b4 <fputs_unlocked@plt>
   15b14:	mov	r2, #5
   15b18:	movw	r1, #50488	; 0xc538
   15b1c:	movt	r1, #1
   15b20:	mov	r0, r4
   15b24:	bl	11174 <dcgettext@plt>
   15b28:	ldr	r1, [r5]
   15b2c:	bl	110b4 <fputs_unlocked@plt>
   15b30:	mov	r2, #5
   15b34:	movw	r1, #50636	; 0xc5cc
   15b38:	movt	r1, #1
   15b3c:	mov	r0, r4
   15b40:	bl	11174 <dcgettext@plt>
   15b44:	ldr	r1, [r5]
   15b48:	bl	110b4 <fputs_unlocked@plt>
   15b4c:	mov	r2, #5
   15b50:	movw	r1, #50872	; 0xc6b8
   15b54:	movt	r1, #1
   15b58:	mov	r0, r4
   15b5c:	bl	11174 <dcgettext@plt>
   15b60:	mov	r1, r0
   15b64:	mov	r3, #5
   15b68:	mov	r2, #10
   15b6c:	mov	r0, #1
   15b70:	bl	11300 <__printf_chk@plt>
   15b74:	mov	r2, #5
   15b78:	movw	r1, #51428	; 0xc8e4
   15b7c:	movt	r1, #1
   15b80:	mov	r0, r4
   15b84:	bl	11174 <dcgettext@plt>
   15b88:	ldr	r1, [r5]
   15b8c:	bl	110b4 <fputs_unlocked@plt>
   15b90:	mov	r2, #5
   15b94:	movw	r1, #51644	; 0xc9bc
   15b98:	movt	r1, #1
   15b9c:	mov	r0, r4
   15ba0:	bl	11174 <dcgettext@plt>
   15ba4:	ldr	r1, [r5]
   15ba8:	bl	110b4 <fputs_unlocked@plt>
   15bac:	mov	r2, #5
   15bb0:	movw	r1, #51976	; 0xcb08
   15bb4:	movt	r1, #1
   15bb8:	mov	r0, r4
   15bbc:	bl	11174 <dcgettext@plt>
   15bc0:	ldr	r1, [r5]
   15bc4:	bl	110b4 <fputs_unlocked@plt>
   15bc8:	mov	r2, #5
   15bcc:	movw	r1, #52040	; 0xcb48
   15bd0:	movt	r1, #1
   15bd4:	mov	r0, r4
   15bd8:	bl	11174 <dcgettext@plt>
   15bdc:	ldr	r1, [r5]
   15be0:	bl	110b4 <fputs_unlocked@plt>
   15be4:	mov	r2, #5
   15be8:	movw	r1, #52088	; 0xcb78
   15bec:	movt	r1, #1
   15bf0:	mov	r0, r4
   15bf4:	bl	11174 <dcgettext@plt>
   15bf8:	ldr	r1, [r5]
   15bfc:	bl	110b4 <fputs_unlocked@plt>
   15c00:	mov	r2, #5
   15c04:	movw	r1, #52144	; 0xcbb0
   15c08:	movt	r1, #1
   15c0c:	mov	r0, r4
   15c10:	bl	11174 <dcgettext@plt>
   15c14:	ldr	r1, [r5]
   15c18:	bl	110b4 <fputs_unlocked@plt>
   15c1c:	mov	r2, #5
   15c20:	movw	r1, #52360	; 0xcc88
   15c24:	movt	r1, #1
   15c28:	mov	r0, r4
   15c2c:	bl	11174 <dcgettext@plt>
   15c30:	ldr	r1, [r5]
   15c34:	bl	110b4 <fputs_unlocked@plt>
   15c38:	movw	r0, #49160	; 0xc008
   15c3c:	movt	r0, #1
   15c40:	ldr	ip, [r0, #8]
   15c44:	ldrd	r2, [r0, #16]
   15c48:	ldr	r6, [r0, #12]
   15c4c:	subs	r1, ip, #0
   15c50:	str	ip, [sp]
   15c54:	ldrd	r8, [r0, #24]
   15c58:	strd	r2, [sp, #8]
   15c5c:	ldrd	r2, [r0, #32]
   15c60:	str	r6, [sp, #4]
   15c64:	ldrd	r6, [r0, #40]	; 0x28
   15c68:	strd	r8, [sp, #16]
   15c6c:	ldrd	r8, [r0, #48]	; 0x30
   15c70:	strd	r2, [sp, #24]
   15c74:	ldrd	r2, [r0, #56]	; 0x38
   15c78:	strd	r6, [sp, #32]
   15c7c:	movwne	r7, #50140	; 0xc3dc
   15c80:	mov	r6, sp
   15c84:	movtne	r7, #1
   15c88:	strd	r8, [sp, #40]	; 0x28
   15c8c:	strd	r2, [sp, #48]	; 0x30
   15c90:	bne	15d88 <__assert_fail@plt+0x4974>
   15c94:	ldr	r6, [r6, #4]
   15c98:	movw	r1, #52800	; 0xce40
   15c9c:	movt	r1, #1
   15ca0:	mov	r2, #5
   15ca4:	cmp	r6, #0
   15ca8:	beq	15d9c <__assert_fail@plt+0x4988>
   15cac:	mov	r0, #0
   15cb0:	bl	11174 <dcgettext@plt>
   15cb4:	mov	r1, r0
   15cb8:	movw	r3, #52824	; 0xce58
   15cbc:	movt	r3, #1
   15cc0:	movw	r2, #52864	; 0xce80
   15cc4:	movt	r2, #1
   15cc8:	mov	r0, #1
   15ccc:	bl	11300 <__printf_chk@plt>
   15cd0:	mov	r1, #0
   15cd4:	mov	r0, #5
   15cd8:	bl	11378 <setlocale@plt>
   15cdc:	cmp	r0, #0
   15ce0:	movweq	r7, #50140	; 0xc3dc
   15ce4:	movteq	r7, #1
   15ce8:	beq	15d0c <__assert_fail@plt+0x48f8>
   15cec:	movw	r1, #52880	; 0xce90
   15cf0:	movt	r1, #1
   15cf4:	mov	r2, #3
   15cf8:	movw	r7, #50140	; 0xc3dc
   15cfc:	movt	r7, #1
   15d00:	bl	113e4 <strncmp@plt>
   15d04:	cmp	r0, #0
   15d08:	bne	15e54 <__assert_fail@plt+0x4a40>
   15d0c:	mov	r2, #5
   15d10:	movw	r1, #52956	; 0xcedc
   15d14:	movt	r1, #1
   15d18:	mov	r0, #0
   15d1c:	bl	11174 <dcgettext@plt>
   15d20:	mov	r1, r0
   15d24:	movw	r3, #50140	; 0xc3dc
   15d28:	movt	r3, #1
   15d2c:	movw	r2, #52824	; 0xce58
   15d30:	movt	r2, #1
   15d34:	mov	r0, #1
   15d38:	bl	11300 <__printf_chk@plt>
   15d3c:	mov	r2, #5
   15d40:	movw	r1, #52984	; 0xcef8
   15d44:	movt	r1, #1
   15d48:	mov	r0, #0
   15d4c:	bl	11174 <dcgettext@plt>
   15d50:	movw	r2, #54176	; 0xd3a0
   15d54:	movt	r2, #1
   15d58:	cmp	r6, r7
   15d5c:	movw	r3, #52356	; 0xcc84
   15d60:	movt	r3, #1
   15d64:	mov	r1, r0
   15d68:	moveq	r3, r2
   15d6c:	mov	r2, r6
   15d70:	mov	r0, #1
   15d74:	bl	11300 <__printf_chk@plt>
   15d78:	b	15a80 <__assert_fail@plt+0x466c>
   15d7c:	ldr	r1, [r6, #8]!
   15d80:	cmp	r1, #0
   15d84:	beq	15c94 <__assert_fail@plt+0x4880>
   15d88:	mov	r0, r7
   15d8c:	bl	110cc <strcmp@plt>
   15d90:	cmp	r0, #0
   15d94:	bne	15d7c <__assert_fail@plt+0x4968>
   15d98:	b	15c94 <__assert_fail@plt+0x4880>
   15d9c:	mov	r0, r6
   15da0:	bl	11174 <dcgettext@plt>
   15da4:	mov	r1, r0
   15da8:	movw	r3, #52824	; 0xce58
   15dac:	movt	r3, #1
   15db0:	movw	r2, #52864	; 0xce80
   15db4:	movt	r2, #1
   15db8:	mov	r0, #1
   15dbc:	bl	11300 <__printf_chk@plt>
   15dc0:	mov	r1, r6
   15dc4:	mov	r0, #5
   15dc8:	bl	11378 <setlocale@plt>
   15dcc:	cmp	r0, #0
   15dd0:	beq	15dec <__assert_fail@plt+0x49d8>
   15dd4:	movw	r1, #52880	; 0xce90
   15dd8:	movt	r1, #1
   15ddc:	mov	r2, #3
   15de0:	bl	113e4 <strncmp@plt>
   15de4:	cmp	r0, #0
   15de8:	bne	15e48 <__assert_fail@plt+0x4a34>
   15dec:	mov	r2, #5
   15df0:	movw	r1, #52956	; 0xcedc
   15df4:	movt	r1, #1
   15df8:	mov	r0, #0
   15dfc:	bl	11174 <dcgettext@plt>
   15e00:	mov	r1, r0
   15e04:	movw	r3, #50140	; 0xc3dc
   15e08:	movt	r3, #1
   15e0c:	movw	r2, #52824	; 0xce58
   15e10:	movt	r2, #1
   15e14:	mov	r0, #1
   15e18:	bl	11300 <__printf_chk@plt>
   15e1c:	movw	r1, #52984	; 0xcef8
   15e20:	movt	r1, #1
   15e24:	mov	r2, #5
   15e28:	mov	r0, #0
   15e2c:	bl	11174 <dcgettext@plt>
   15e30:	movw	r6, #50140	; 0xc3dc
   15e34:	movt	r6, #1
   15e38:	movw	r3, #54176	; 0xd3a0
   15e3c:	movt	r3, #1
   15e40:	mov	r1, r0
   15e44:	b	15d6c <__assert_fail@plt+0x4958>
   15e48:	movw	r7, #50140	; 0xc3dc
   15e4c:	movt	r7, #1
   15e50:	mov	r6, r7
   15e54:	mov	r2, #5
   15e58:	movw	r1, #52884	; 0xce94
   15e5c:	movt	r1, #1
   15e60:	mov	r0, #0
   15e64:	bl	11174 <dcgettext@plt>
   15e68:	ldr	r1, [r5]
   15e6c:	bl	110b4 <fputs_unlocked@plt>
   15e70:	b	15d0c <__assert_fail@plt+0x48f8>
   15e74:	mov	r0, #1
   15e78:	b	15a30 <__assert_fail@plt+0x461c>
   15e7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e80:	mov	r5, r1
   15e84:	mov	r4, r2
   15e88:	strd	r6, [sp, #8]
   15e8c:	mov	r7, r3
   15e90:	strd	r8, [sp, #16]
   15e94:	strd	sl, [sp, #24]
   15e98:	mov	sl, r0
   15e9c:	str	lr, [sp, #32]
   15ea0:	sub	sp, sp, #12
   15ea4:	str	r2, [sp]
   15ea8:	bl	112a0 <strlen@plt>
   15eac:	ldr	fp, [r5]
   15eb0:	cmp	fp, #0
   15eb4:	beq	15f84 <__assert_fail@plt+0x4b70>
   15eb8:	mov	r6, #0
   15ebc:	mov	r8, r0
   15ec0:	mvn	r9, #0
   15ec4:	str	r6, [sp, #4]
   15ec8:	b	15ef4 <__assert_fail@plt+0x4ae0>
   15ecc:	bl	1115c <memcmp@plt>
   15ed0:	ldr	r3, [sp, #4]
   15ed4:	cmp	r0, #0
   15ed8:	movne	r3, #1
   15edc:	str	r3, [sp, #4]
   15ee0:	ldr	fp, [r5, #4]!
   15ee4:	add	r6, r6, #1
   15ee8:	add	r4, r4, r7
   15eec:	cmp	fp, #0
   15ef0:	beq	15f50 <__assert_fail@plt+0x4b3c>
   15ef4:	mov	r2, r8
   15ef8:	mov	r1, sl
   15efc:	mov	r0, fp
   15f00:	bl	113e4 <strncmp@plt>
   15f04:	cmp	r0, #0
   15f08:	mov	r0, fp
   15f0c:	bne	15ee0 <__assert_fail@plt+0x4acc>
   15f10:	bl	112a0 <strlen@plt>
   15f14:	ldr	r3, [sp]
   15f18:	cmp	r0, r8
   15f1c:	mov	r2, r7
   15f20:	mov	r1, r4
   15f24:	mla	r0, r7, r9, r3
   15f28:	beq	15f7c <__assert_fail@plt+0x4b68>
   15f2c:	cmn	r9, #1
   15f30:	moveq	r9, r6
   15f34:	beq	15ee0 <__assert_fail@plt+0x4acc>
   15f38:	ldr	r3, [sp]
   15f3c:	cmp	r3, #0
   15f40:	bne	15ecc <__assert_fail@plt+0x4ab8>
   15f44:	mov	r3, #1
   15f48:	str	r3, [sp, #4]
   15f4c:	b	15ee0 <__assert_fail@plt+0x4acc>
   15f50:	ldr	r3, [sp, #4]
   15f54:	cmp	r3, #0
   15f58:	mvnne	r9, #1
   15f5c:	mov	r0, r9
   15f60:	add	sp, sp, #12
   15f64:	ldrd	r4, [sp]
   15f68:	ldrd	r6, [sp, #8]
   15f6c:	ldrd	r8, [sp, #16]
   15f70:	ldrd	sl, [sp, #24]
   15f74:	add	sp, sp, #32
   15f78:	pop	{pc}		; (ldr pc, [sp], #4)
   15f7c:	mov	r9, r6
   15f80:	b	15f5c <__assert_fail@plt+0x4b48>
   15f84:	mvn	r9, #0
   15f88:	b	15f5c <__assert_fail@plt+0x4b48>
   15f8c:	strd	r4, [sp, #-16]!
   15f90:	str	r6, [sp, #8]
   15f94:	mov	r6, r0
   15f98:	ldr	r0, [r1]
   15f9c:	str	lr, [sp, #12]
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fe8 <__assert_fail@plt+0x4bd4>
   15fa8:	mov	r4, r1
   15fac:	mov	r5, #0
   15fb0:	b	15fc4 <__assert_fail@plt+0x4bb0>
   15fb4:	ldr	r0, [r4, #4]!
   15fb8:	add	r5, r5, #1
   15fbc:	cmp	r0, #0
   15fc0:	beq	15fe8 <__assert_fail@plt+0x4bd4>
   15fc4:	mov	r1, r6
   15fc8:	bl	110cc <strcmp@plt>
   15fcc:	cmp	r0, #0
   15fd0:	bne	15fb4 <__assert_fail@plt+0x4ba0>
   15fd4:	mov	r0, r5
   15fd8:	ldrd	r4, [sp]
   15fdc:	ldr	r6, [sp, #8]
   15fe0:	add	sp, sp, #12
   15fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fe8:	ldrd	r4, [sp]
   15fec:	mvn	r0, #0
   15ff0:	ldr	r6, [sp, #8]
   15ff4:	add	sp, sp, #12
   15ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ffc:	cmn	r2, #1
   16000:	strd	r4, [sp, #-16]!
   16004:	mov	r5, r1
   16008:	movweq	r1, #54472	; 0xd4c8
   1600c:	movwne	r1, #54500	; 0xd4e4
   16010:	str	r6, [sp, #8]
   16014:	movteq	r1, #1
   16018:	movtne	r1, #1
   1601c:	str	lr, [sp, #12]
   16020:	mov	r6, r0
   16024:	sub	sp, sp, #8
   16028:	mov	r2, #5
   1602c:	mov	r0, #0
   16030:	bl	11174 <dcgettext@plt>
   16034:	mov	r4, r0
   16038:	mov	r2, r5
   1603c:	mov	r1, #8
   16040:	mov	r0, #0
   16044:	bl	19b50 <__assert_fail@plt+0x873c>
   16048:	mov	r5, r0
   1604c:	mov	r1, r6
   16050:	mov	r0, #1
   16054:	bl	19e80 <__assert_fail@plt+0x8a6c>
   16058:	mov	r1, #0
   1605c:	mov	r3, r5
   16060:	str	r0, [sp]
   16064:	mov	r2, r4
   16068:	mov	r0, r1
   1606c:	bl	1121c <error@plt>
   16070:	add	sp, sp, #8
   16074:	ldrd	r4, [sp]
   16078:	ldr	r6, [sp, #8]
   1607c:	add	sp, sp, #12
   16080:	pop	{pc}		; (ldr pc, [sp], #4)
   16084:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16088:	mov	r4, r1
   1608c:	movw	r1, #54532	; 0xd504
   16090:	movt	r1, #1
   16094:	strd	r6, [sp, #8]
   16098:	mov	r6, r0
   1609c:	mov	r7, r2
   160a0:	mov	r0, #0
   160a4:	strd	r8, [sp, #16]
   160a8:	mov	r2, #5
   160ac:	strd	sl, [sp, #24]
   160b0:	movw	sl, #57792	; 0xe1c0
   160b4:	movt	sl, #2
   160b8:	str	lr, [sp, #32]
   160bc:	sub	sp, sp, #12
   160c0:	bl	11174 <dcgettext@plt>
   160c4:	ldr	r1, [sl]
   160c8:	bl	110b4 <fputs_unlocked@plt>
   160cc:	ldr	fp, [r6]
   160d0:	cmp	fp, #0
   160d4:	beq	16174 <__assert_fail@plt+0x4d60>
   160d8:	movw	r3, #54556	; 0xd51c
   160dc:	movt	r3, #1
   160e0:	mov	r9, #0
   160e4:	str	r3, [sp]
   160e8:	movw	r3, #54564	; 0xd524
   160ec:	movt	r3, #1
   160f0:	mov	r5, r9
   160f4:	str	r3, [sp, #4]
   160f8:	b	16130 <__assert_fail@plt+0x4d1c>
   160fc:	mov	r0, fp
   16100:	mov	r9, r4
   16104:	bl	19e90 <__assert_fail@plt+0x8a7c>
   16108:	mov	r3, r0
   1610c:	mov	r1, #1
   16110:	ldr	r2, [sp]
   16114:	mov	r0, r8
   16118:	bl	11324 <__fprintf_chk@plt>
   1611c:	ldr	fp, [r6, #4]!
   16120:	add	r5, r5, #1
   16124:	add	r4, r4, r7
   16128:	cmp	fp, #0
   1612c:	beq	16174 <__assert_fail@plt+0x4d60>
   16130:	cmp	r5, #0
   16134:	mov	r1, r4
   16138:	ldr	r8, [sl]
   1613c:	mov	r2, r7
   16140:	mov	r0, r9
   16144:	beq	160fc <__assert_fail@plt+0x4ce8>
   16148:	bl	1115c <memcmp@plt>
   1614c:	cmp	r0, #0
   16150:	bne	160fc <__assert_fail@plt+0x4ce8>
   16154:	mov	r0, fp
   16158:	bl	19e90 <__assert_fail@plt+0x8a7c>
   1615c:	mov	r3, r0
   16160:	mov	r1, #1
   16164:	ldr	r2, [sp, #4]
   16168:	mov	r0, r8
   1616c:	bl	11324 <__fprintf_chk@plt>
   16170:	b	1611c <__assert_fail@plt+0x4d08>
   16174:	ldr	r0, [sl]
   16178:	ldr	r3, [r0, #20]
   1617c:	ldr	r2, [r0, #24]
   16180:	cmp	r3, r2
   16184:	bcs	161b4 <__assert_fail@plt+0x4da0>
   16188:	add	r1, r3, #1
   1618c:	mov	r2, #10
   16190:	str	r1, [r0, #20]
   16194:	strb	r2, [r3]
   16198:	add	sp, sp, #12
   1619c:	ldrd	r4, [sp]
   161a0:	ldrd	r6, [sp, #8]
   161a4:	ldrd	r8, [sp, #16]
   161a8:	ldrd	sl, [sp, #24]
   161ac:	add	sp, sp, #32
   161b0:	pop	{pc}		; (ldr pc, [sp], #4)
   161b4:	mov	r1, #10
   161b8:	add	sp, sp, #12
   161bc:	ldrd	r4, [sp]
   161c0:	ldrd	r6, [sp, #8]
   161c4:	ldrd	r8, [sp, #16]
   161c8:	ldrd	sl, [sp, #24]
   161cc:	ldr	lr, [sp, #32]
   161d0:	add	sp, sp, #36	; 0x24
   161d4:	b	1136c <__overflow@plt>
   161d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   161dc:	mov	r5, r1
   161e0:	mov	r4, r2
   161e4:	ldrb	ip, [sp, #32]
   161e8:	strd	r6, [sp, #8]
   161ec:	mov	r7, r0
   161f0:	mov	r6, r3
   161f4:	str	r8, [sp, #16]
   161f8:	str	lr, [sp, #20]
   161fc:	cmp	ip, #0
   16200:	beq	16234 <__assert_fail@plt+0x4e20>
   16204:	mov	r2, r3
   16208:	mov	r1, r4
   1620c:	ldr	r3, [sp, #24]
   16210:	mov	r0, r5
   16214:	bl	15e7c <__assert_fail@plt+0x4a68>
   16218:	cmp	r0, #0
   1621c:	blt	16244 <__assert_fail@plt+0x4e30>
   16220:	ldrd	r4, [sp]
   16224:	ldrd	r6, [sp, #8]
   16228:	ldr	r8, [sp, #16]
   1622c:	add	sp, sp, #20
   16230:	pop	{pc}		; (ldr pc, [sp], #4)
   16234:	mov	r1, r2
   16238:	mov	r0, r5
   1623c:	bl	15f8c <__assert_fail@plt+0x4b78>
   16240:	b	16218 <__assert_fail@plt+0x4e04>
   16244:	mov	r2, r0
   16248:	mov	r1, r5
   1624c:	mov	r0, r7
   16250:	bl	15ffc <__assert_fail@plt+0x4be8>
   16254:	mov	r0, r4
   16258:	mov	r1, r6
   1625c:	ldr	r2, [sp, #24]
   16260:	bl	16084 <__assert_fail@plt+0x4c70>
   16264:	ldr	r3, [sp, #28]
   16268:	blx	r3
   1626c:	mvn	r0, #0
   16270:	b	16220 <__assert_fail@plt+0x4e0c>
   16274:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16278:	strd	r6, [sp, #8]
   1627c:	ldr	r7, [r1]
   16280:	str	r8, [sp, #16]
   16284:	str	lr, [sp, #20]
   16288:	cmp	r7, #0
   1628c:	beq	162cc <__assert_fail@plt+0x4eb8>
   16290:	mov	r6, r3
   16294:	mov	r8, r0
   16298:	mov	r4, r2
   1629c:	mov	r5, r1
   162a0:	b	162b0 <__assert_fail@plt+0x4e9c>
   162a4:	ldr	r7, [r5, #4]!
   162a8:	cmp	r7, #0
   162ac:	beq	162cc <__assert_fail@plt+0x4eb8>
   162b0:	mov	r1, r4
   162b4:	mov	r2, r6
   162b8:	mov	r0, r8
   162bc:	add	r4, r4, r6
   162c0:	bl	1115c <memcmp@plt>
   162c4:	cmp	r0, #0
   162c8:	bne	162a4 <__assert_fail@plt+0x4e90>
   162cc:	mov	r0, r7
   162d0:	ldrd	r4, [sp]
   162d4:	ldrd	r6, [sp, #8]
   162d8:	ldr	r8, [sp, #16]
   162dc:	add	sp, sp, #20
   162e0:	pop	{pc}		; (ldr pc, [sp], #4)
   162e4:	ldrb	r3, [r0]
   162e8:	cmp	r3, #47	; 0x2f
   162ec:	bne	162fc <__assert_fail@plt+0x4ee8>
   162f0:	ldrb	r3, [r0, #1]!
   162f4:	cmp	r3, #47	; 0x2f
   162f8:	beq	162f0 <__assert_fail@plt+0x4edc>
   162fc:	cmp	r3, #0
   16300:	beq	16330 <__assert_fail@plt+0x4f1c>
   16304:	mov	r2, r0
   16308:	mov	r1, #0
   1630c:	cmp	r3, #47	; 0x2f
   16310:	moveq	r1, #1
   16314:	beq	16324 <__assert_fail@plt+0x4f10>
   16318:	cmp	r1, #0
   1631c:	movne	r0, r2
   16320:	movne	r1, #0
   16324:	ldrb	r3, [r2, #1]!
   16328:	cmp	r3, #0
   1632c:	bne	1630c <__assert_fail@plt+0x4ef8>
   16330:	bx	lr
   16334:	str	r4, [sp, #-8]!
   16338:	mov	r4, r0
   1633c:	str	lr, [sp, #4]
   16340:	bl	112a0 <strlen@plt>
   16344:	cmp	r0, #1
   16348:	bls	1636c <__assert_fail@plt+0x4f58>
   1634c:	add	r2, r4, r0
   16350:	mov	r3, r0
   16354:	ldrb	r2, [r2, #-1]
   16358:	cmp	r2, #47	; 0x2f
   1635c:	subeq	r3, r0, #2
   16360:	rsbeq	r1, r4, #1
   16364:	addeq	r3, r4, r3
   16368:	beq	16378 <__assert_fail@plt+0x4f64>
   1636c:	ldr	r4, [sp]
   16370:	add	sp, sp, #4
   16374:	pop	{pc}		; (ldr pc, [sp], #4)
   16378:	cmp	r3, r4
   1637c:	add	r0, r1, r3
   16380:	beq	1636c <__assert_fail@plt+0x4f58>
   16384:	ldrb	r2, [r3], #-1
   16388:	cmp	r2, #47	; 0x2f
   1638c:	beq	16378 <__assert_fail@plt+0x4f64>
   16390:	ldr	r4, [sp]
   16394:	add	sp, sp, #4
   16398:	pop	{pc}		; (ldr pc, [sp], #4)
   1639c:	strd	r4, [sp, #-16]!
   163a0:	mov	r4, r1
   163a4:	mov	r5, r0
   163a8:	str	r6, [sp, #8]
   163ac:	str	lr, [sp, #12]
   163b0:	vpush	{d8}
   163b4:	sub	sp, sp, #8
   163b8:	mov	r1, sp
   163bc:	bl	1130c <strtod@plt>
   163c0:	ldr	r3, [sp]
   163c4:	vmov.f64	d8, d0
   163c8:	ldrb	r3, [r3]
   163cc:	cmp	r3, #0
   163d0:	bne	163fc <__assert_fail@plt+0x4fe8>
   163d4:	cmp	r4, #0
   163d8:	vmov.f64	d0, d8
   163dc:	ldrne	r3, [sp]
   163e0:	strne	r3, [r4]
   163e4:	add	sp, sp, #8
   163e8:	vpop	{d8}
   163ec:	ldrd	r4, [sp]
   163f0:	ldr	r6, [sp, #8]
   163f4:	add	sp, sp, #12
   163f8:	pop	{pc}		; (ldr pc, [sp], #4)
   163fc:	bl	112dc <__errno_location@plt>
   16400:	mov	r6, r0
   16404:	add	r1, sp, #4
   16408:	mov	r0, r5
   1640c:	ldr	r5, [r6]
   16410:	bl	1b750 <__assert_fail@plt+0xa33c>
   16414:	ldrd	r2, [sp]
   16418:	cmp	r2, r3
   1641c:	vmovcc.f64	d8, d0
   16420:	strcc	r3, [sp]
   16424:	strcs	r5, [r6]
   16428:	b	163d4 <__assert_fail@plt+0x4fc0>
   1642c:	movw	r3, #57824	; 0xe1e0
   16430:	movt	r3, #2
   16434:	str	r0, [r3]
   16438:	bx	lr
   1643c:	movw	r3, #57824	; 0xe1e0
   16440:	movt	r3, #2
   16444:	strb	r0, [r3, #4]
   16448:	bx	lr
   1644c:	movw	r3, #57796	; 0xe1c4
   16450:	movt	r3, #2
   16454:	strd	r4, [sp, #-16]!
   16458:	ldr	r0, [r3]
   1645c:	str	r6, [sp, #8]
   16460:	str	lr, [sp, #12]
   16464:	sub	sp, sp, #8
   16468:	bl	1b7e0 <__assert_fail@plt+0xa3cc>
   1646c:	cmp	r0, #0
   16470:	beq	1649c <__assert_fail@plt+0x5088>
   16474:	movw	r4, #57824	; 0xe1e0
   16478:	movt	r4, #2
   1647c:	ldrb	r6, [r4, #4]
   16480:	bl	112dc <__errno_location@plt>
   16484:	mov	r5, r0
   16488:	cmp	r6, #0
   1648c:	beq	164c8 <__assert_fail@plt+0x50b4>
   16490:	ldr	r3, [r0]
   16494:	cmp	r3, #32
   16498:	bne	164c8 <__assert_fail@plt+0x50b4>
   1649c:	movw	r3, #57792	; 0xe1c0
   164a0:	movt	r3, #2
   164a4:	ldr	r0, [r3]
   164a8:	bl	1b7e0 <__assert_fail@plt+0xa3cc>
   164ac:	cmp	r0, #0
   164b0:	bne	16510 <__assert_fail@plt+0x50fc>
   164b4:	add	sp, sp, #8
   164b8:	ldrd	r4, [sp]
   164bc:	ldr	r6, [sp, #8]
   164c0:	add	sp, sp, #12
   164c4:	pop	{pc}		; (ldr pc, [sp], #4)
   164c8:	movw	r1, #49704	; 0xc228
   164cc:	movt	r1, #1
   164d0:	mov	r2, #5
   164d4:	mov	r0, #0
   164d8:	bl	11174 <dcgettext@plt>
   164dc:	mov	r6, r0
   164e0:	ldr	r0, [r4]
   164e4:	cmp	r0, #0
   164e8:	beq	16520 <__assert_fail@plt+0x510c>
   164ec:	ldr	r4, [r5]
   164f0:	bl	19ca4 <__assert_fail@plt+0x8890>
   164f4:	mov	r3, r0
   164f8:	movw	r2, #53088	; 0xcf60
   164fc:	movt	r2, #1
   16500:	mov	r0, #0
   16504:	str	r6, [sp]
   16508:	mov	r1, r4
   1650c:	bl	1121c <error@plt>
   16510:	movw	r3, #57704	; 0xe168
   16514:	movt	r3, #2
   16518:	ldr	r0, [r3]
   1651c:	bl	11120 <_exit@plt>
   16520:	mov	r3, r6
   16524:	movw	r2, #53092	; 0xcf64
   16528:	movt	r2, #1
   1652c:	ldr	r1, [r5]
   16530:	bl	1121c <error@plt>
   16534:	b	16510 <__assert_fail@plt+0x50fc>
   16538:	strd	r4, [sp, #-16]!
   1653c:	mov	r4, r0
   16540:	str	r6, [sp, #8]
   16544:	str	lr, [sp, #12]
   16548:	ldrb	ip, [r0]
   1654c:	sub	r5, ip, #47	; 0x2f
   16550:	clz	r5, r5
   16554:	bl	162e4 <__assert_fail@plt+0x4ed0>
   16558:	lsr	r5, r5, #5
   1655c:	sub	r0, r0, r4
   16560:	cmp	r0, r5
   16564:	bls	165a8 <__assert_fail@plt+0x5194>
   16568:	add	r3, r4, r0
   1656c:	ldrb	r3, [r3, #-1]
   16570:	cmp	r3, #47	; 0x2f
   16574:	bne	165a8 <__assert_fail@plt+0x5194>
   16578:	sub	r0, r0, #2
   1657c:	sub	ip, r4, #1
   16580:	add	r3, r4, r0
   16584:	add	ip, ip, r5
   16588:	rsb	r2, r4, #1
   1658c:	b	1659c <__assert_fail@plt+0x5188>
   16590:	ldrb	r1, [r3], #-1
   16594:	cmp	r1, #47	; 0x2f
   16598:	bne	165a8 <__assert_fail@plt+0x5194>
   1659c:	cmp	r3, ip
   165a0:	add	r0, r2, r3
   165a4:	bne	16590 <__assert_fail@plt+0x517c>
   165a8:	ldrd	r4, [sp]
   165ac:	ldr	r6, [sp, #8]
   165b0:	add	sp, sp, #12
   165b4:	pop	{pc}		; (ldr pc, [sp], #4)
   165b8:	strd	r4, [sp, #-16]!
   165bc:	str	r6, [sp, #8]
   165c0:	mov	r6, r0
   165c4:	str	lr, [sp, #12]
   165c8:	bl	16538 <__assert_fail@plt+0x5124>
   165cc:	add	r3, r0, #1
   165d0:	mov	r4, r0
   165d4:	cmp	r0, #0
   165d8:	movne	r0, r3
   165dc:	addeq	r0, r3, #1
   165e0:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   165e4:	subs	r5, r0, #0
   165e8:	beq	16608 <__assert_fail@plt+0x51f4>
   165ec:	mov	r1, r6
   165f0:	mov	r2, r4
   165f4:	bl	1112c <memcpy@plt>
   165f8:	cmp	r4, #0
   165fc:	beq	1661c <__assert_fail@plt+0x5208>
   16600:	mov	r3, #0
   16604:	strb	r3, [r5, r4]
   16608:	mov	r0, r5
   1660c:	ldrd	r4, [sp]
   16610:	ldr	r6, [sp, #8]
   16614:	add	sp, sp, #12
   16618:	pop	{pc}		; (ldr pc, [sp], #4)
   1661c:	mov	r3, #46	; 0x2e
   16620:	mov	r4, #1
   16624:	strb	r3, [r5]
   16628:	b	16600 <__assert_fail@plt+0x51ec>
   1662c:	push	{r1, r2, r3}
   16630:	strd	r4, [sp, #-20]!	; 0xffffffec
   16634:	strd	r6, [sp, #8]
   16638:	str	lr, [sp, #16]
   1663c:	sub	sp, sp, #8
   16640:	ldr	r1, [sp, #28]
   16644:	add	r2, sp, #32
   16648:	str	r2, [sp, #4]
   1664c:	cmp	r1, #0
   16650:	beq	1672c <__assert_fail@plt+0x5318>
   16654:	movw	r3, #1030	; 0x406
   16658:	mov	r6, r0
   1665c:	cmp	r1, r3
   16660:	beq	1673c <__assert_fail@plt+0x5328>
   16664:	cmp	r1, #11
   16668:	beq	166e4 <__assert_fail@plt+0x52d0>
   1666c:	ble	166c4 <__assert_fail@plt+0x52b0>
   16670:	movw	r2, #1031	; 0x407
   16674:	cmp	r1, r2
   16678:	bgt	16700 <__assert_fail@plt+0x52ec>
   1667c:	cmp	r1, r3
   16680:	bge	16690 <__assert_fail@plt+0x527c>
   16684:	movw	r3, #1025	; 0x401
   16688:	cmp	r1, r3
   1668c:	beq	166e4 <__assert_fail@plt+0x52d0>
   16690:	ldr	r3, [sp, #4]
   16694:	mov	r0, r6
   16698:	ldr	r2, [r3]
   1669c:	bl	11360 <fcntl64@plt>
   166a0:	mov	r4, r0
   166a4:	mov	r0, r4
   166a8:	add	sp, sp, #8
   166ac:	ldrd	r4, [sp]
   166b0:	ldrd	r6, [sp, #8]
   166b4:	ldr	lr, [sp, #16]
   166b8:	add	sp, sp, #20
   166bc:	add	sp, sp, #12
   166c0:	bx	lr
   166c4:	cmp	r1, #4
   166c8:	beq	16690 <__assert_fail@plt+0x527c>
   166cc:	bgt	166f4 <__assert_fail@plt+0x52e0>
   166d0:	cmp	r1, #2
   166d4:	beq	16690 <__assert_fail@plt+0x527c>
   166d8:	bgt	166e4 <__assert_fail@plt+0x52d0>
   166dc:	cmp	r1, #1
   166e0:	bne	16690 <__assert_fail@plt+0x527c>
   166e4:	mov	r0, r6
   166e8:	bl	11360 <fcntl64@plt>
   166ec:	mov	r4, r0
   166f0:	b	166a4 <__assert_fail@plt+0x5290>
   166f4:	cmp	r1, #9
   166f8:	bne	16690 <__assert_fail@plt+0x527c>
   166fc:	b	166e4 <__assert_fail@plt+0x52d0>
   16700:	movw	r3, #1033	; 0x409
   16704:	cmp	r1, r3
   16708:	beq	16690 <__assert_fail@plt+0x527c>
   1670c:	blt	166e4 <__assert_fail@plt+0x52d0>
   16710:	movw	r3, #1034	; 0x40a
   16714:	cmp	r1, r3
   16718:	bne	16690 <__assert_fail@plt+0x527c>
   1671c:	mov	r0, r6
   16720:	bl	11360 <fcntl64@plt>
   16724:	mov	r4, r0
   16728:	b	166a4 <__assert_fail@plt+0x5290>
   1672c:	ldr	r2, [sp, #32]
   16730:	bl	11360 <fcntl64@plt>
   16734:	mov	r4, r0
   16738:	b	166a4 <__assert_fail@plt+0x5290>
   1673c:	movw	r5, #57832	; 0xe1e8
   16740:	movt	r5, #2
   16744:	ldr	r7, [r2]
   16748:	add	r2, sp, #36	; 0x24
   1674c:	ldr	r3, [r5]
   16750:	str	r2, [sp, #4]
   16754:	mov	r2, r7
   16758:	cmp	r3, #0
   1675c:	blt	16778 <__assert_fail@plt+0x5364>
   16760:	bl	11360 <fcntl64@plt>
   16764:	subs	r4, r0, #0
   16768:	blt	167e0 <__assert_fail@plt+0x53cc>
   1676c:	mov	r3, #1
   16770:	str	r3, [r5]
   16774:	b	166a4 <__assert_fail@plt+0x5290>
   16778:	mov	r1, #0
   1677c:	bl	11360 <fcntl64@plt>
   16780:	subs	r4, r0, #0
   16784:	blt	166a4 <__assert_fail@plt+0x5290>
   16788:	ldr	r3, [r5]
   1678c:	cmn	r3, #1
   16790:	bne	166a4 <__assert_fail@plt+0x5290>
   16794:	mov	r1, #1
   16798:	mov	r0, r4
   1679c:	bl	11360 <fcntl64@plt>
   167a0:	subs	r2, r0, #0
   167a4:	blt	167c0 <__assert_fail@plt+0x53ac>
   167a8:	orr	r2, r2, #1
   167ac:	mov	r1, #2
   167b0:	mov	r0, r4
   167b4:	bl	11360 <fcntl64@plt>
   167b8:	cmn	r0, #1
   167bc:	bne	166a4 <__assert_fail@plt+0x5290>
   167c0:	bl	112dc <__errno_location@plt>
   167c4:	mov	r5, r0
   167c8:	mov	r0, r4
   167cc:	ldr	r6, [r5]
   167d0:	mvn	r4, #0
   167d4:	bl	113fc <close@plt>
   167d8:	str	r6, [r5]
   167dc:	b	166a4 <__assert_fail@plt+0x5290>
   167e0:	bl	112dc <__errno_location@plt>
   167e4:	ldr	r3, [r0]
   167e8:	cmp	r3, #22
   167ec:	bne	1676c <__assert_fail@plt+0x5358>
   167f0:	mov	r2, r7
   167f4:	mov	r0, r6
   167f8:	mov	r1, #0
   167fc:	bl	11360 <fcntl64@plt>
   16800:	subs	r4, r0, #0
   16804:	mvnge	r3, #0
   16808:	strge	r3, [r5]
   1680c:	bge	16794 <__assert_fail@plt+0x5380>
   16810:	b	166a4 <__assert_fail@plt+0x5290>
   16814:	push	{r1, r2, r3}
   16818:	push	{lr}		; (str lr, [sp, #-4]!)
   1681c:	sub	sp, sp, #8
   16820:	ldr	r1, [sp, #12]
   16824:	ands	r2, r1, #64	; 0x40
   16828:	bne	16844 <__assert_fail@plt+0x5430>
   1682c:	bl	11228 <open64@plt>
   16830:	bl	19f2c <__assert_fail@plt+0x8b18>
   16834:	add	sp, sp, #8
   16838:	pop	{lr}		; (ldr lr, [sp], #4)
   1683c:	add	sp, sp, #12
   16840:	bx	lr
   16844:	add	r3, sp, #16
   16848:	ldr	r2, [sp, #16]
   1684c:	str	r3, [sp, #4]
   16850:	b	1682c <__assert_fail@plt+0x5418>
   16854:	strd	r4, [sp, #-12]!
   16858:	mov	r5, r0
   1685c:	str	lr, [sp, #8]
   16860:	sub	sp, sp, #12
   16864:	bl	112dc <__errno_location@plt>
   16868:	mov	r4, r0
   1686c:	mov	r2, #0
   16870:	ldr	r3, [r4]
   16874:	mov	r0, r5
   16878:	str	r2, [r4]
   1687c:	str	r3, [sp]
   16880:	str	r3, [sp, #4]
   16884:	bl	11108 <free@plt>
   16888:	ldr	r3, [r4]
   1688c:	add	r2, sp, #8
   16890:	clz	r3, r3
   16894:	lsr	r3, r3, #5
   16898:	add	r3, r2, r3, lsl #2
   1689c:	ldr	r3, [r3, #-8]
   168a0:	str	r3, [r4]
   168a4:	add	sp, sp, #12
   168a8:	ldrd	r4, [sp]
   168ac:	add	sp, sp, #8
   168b0:	pop	{pc}		; (ldr pc, [sp], #4)
   168b4:	andeq	r0, r0, r0
   168b8:	cmp	r0, #10
   168bc:	movcc	r0, #10
   168c0:	orr	r0, r0, #1
   168c4:	cmn	r0, #1
   168c8:	bxeq	lr
   168cc:	push	{lr}		; (str lr, [sp, #-4]!)
   168d0:	movw	lr, #43691	; 0xaaab
   168d4:	movt	lr, #43690	; 0xaaaa
   168d8:	umull	r2, r3, lr, r0
   168dc:	cmp	r0, #9
   168e0:	lsr	r3, r3, #1
   168e4:	add	r3, r3, r3, lsl #1
   168e8:	sub	r3, r0, r3
   168ec:	bls	1692c <__assert_fail@plt+0x5518>
   168f0:	cmp	r3, #0
   168f4:	beq	16934 <__assert_fail@plt+0x5520>
   168f8:	mov	ip, #16
   168fc:	mov	r1, #9
   16900:	mov	r2, #3
   16904:	b	16910 <__assert_fail@plt+0x54fc>
   16908:	cmp	r3, #0
   1690c:	beq	16934 <__assert_fail@plt+0x5520>
   16910:	add	r2, r2, #2
   16914:	add	r1, r1, ip
   16918:	cmp	r1, r0
   1691c:	add	ip, ip, #8
   16920:	udiv	r3, r0, r2
   16924:	mls	r3, r2, r3, r0
   16928:	bcc	16908 <__assert_fail@plt+0x54f4>
   1692c:	cmp	r3, #0
   16930:	bne	16940 <__assert_fail@plt+0x552c>
   16934:	add	r0, r0, #2
   16938:	cmn	r0, #1
   1693c:	bne	168d8 <__assert_fail@plt+0x54c4>
   16940:	pop	{pc}		; (ldr pc, [sp], #4)
   16944:	ror	r0, r0, #3
   16948:	udiv	r3, r0, r1
   1694c:	mls	r0, r3, r1, r0
   16950:	bx	lr
   16954:	sub	r0, r1, r0
   16958:	clz	r0, r0
   1695c:	lsr	r0, r0, #5
   16960:	bx	lr
   16964:	str	r4, [sp, #-8]!
   16968:	mov	r4, r0
   1696c:	mov	r0, r1
   16970:	ldr	r1, [r4, #8]
   16974:	ldr	r3, [r4, #24]
   16978:	str	lr, [sp, #4]
   1697c:	blx	r3
   16980:	ldr	r3, [r4, #8]
   16984:	cmp	r3, r0
   16988:	bls	169a0 <__assert_fail@plt+0x558c>
   1698c:	ldr	r3, [r4]
   16990:	ldr	r4, [sp]
   16994:	add	sp, sp, #4
   16998:	add	r0, r3, r0, lsl #3
   1699c:	pop	{pc}		; (ldr pc, [sp], #4)
   169a0:	bl	113f0 <abort@plt>
   169a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   169a8:	mov	r5, r1
   169ac:	strd	r6, [sp, #8]
   169b0:	mov	r7, r3
   169b4:	mov	r6, r0
   169b8:	str	r8, [sp, #16]
   169bc:	mov	r8, r2
   169c0:	str	lr, [sp, #20]
   169c4:	bl	16964 <__assert_fail@plt+0x5550>
   169c8:	str	r0, [r8]
   169cc:	ldr	r1, [r0]
   169d0:	cmp	r1, #0
   169d4:	beq	16ac4 <__assert_fail@plt+0x56b0>
   169d8:	cmp	r1, r5
   169dc:	mov	r4, r0
   169e0:	beq	16a8c <__assert_fail@plt+0x5678>
   169e4:	mov	r0, r5
   169e8:	ldr	r3, [r6, #28]
   169ec:	blx	r3
   169f0:	cmp	r0, #0
   169f4:	bne	16a88 <__assert_fail@plt+0x5674>
   169f8:	ldr	r3, [r4, #4]
   169fc:	cmp	r3, #0
   16a00:	beq	16ac4 <__assert_fail@plt+0x56b0>
   16a04:	ldr	r1, [r3]
   16a08:	cmp	r5, r1
   16a0c:	bne	16a30 <__assert_fail@plt+0x561c>
   16a10:	b	16a4c <__assert_fail@plt+0x5638>
   16a14:	ldr	r4, [r4, #4]
   16a18:	ldr	r3, [r4, #4]
   16a1c:	cmp	r3, #0
   16a20:	beq	16ac4 <__assert_fail@plt+0x56b0>
   16a24:	ldr	r1, [r3]
   16a28:	cmp	r1, r5
   16a2c:	beq	16a4c <__assert_fail@plt+0x5638>
   16a30:	mov	r0, r5
   16a34:	ldr	r3, [r6, #28]
   16a38:	blx	r3
   16a3c:	cmp	r0, #0
   16a40:	beq	16a14 <__assert_fail@plt+0x5600>
   16a44:	ldr	r3, [r4, #4]
   16a48:	ldr	r1, [r3]
   16a4c:	cmp	r7, #0
   16a50:	beq	16a70 <__assert_fail@plt+0x565c>
   16a54:	ldr	r0, [r3, #4]
   16a58:	mov	r2, #0
   16a5c:	str	r0, [r4, #4]
   16a60:	str	r2, [r3]
   16a64:	ldr	r2, [r6, #36]	; 0x24
   16a68:	str	r2, [r3, #4]
   16a6c:	str	r3, [r6, #36]	; 0x24
   16a70:	ldrd	r4, [sp]
   16a74:	mov	r0, r1
   16a78:	ldrd	r6, [sp, #8]
   16a7c:	ldr	r8, [sp, #16]
   16a80:	add	sp, sp, #20
   16a84:	pop	{pc}		; (ldr pc, [sp], #4)
   16a88:	ldr	r1, [r4]
   16a8c:	cmp	r7, #0
   16a90:	beq	16a70 <__assert_fail@plt+0x565c>
   16a94:	ldr	r0, [r4, #4]
   16a98:	cmp	r0, #0
   16a9c:	streq	r0, [r4]
   16aa0:	beq	16a70 <__assert_fail@plt+0x565c>
   16aa4:	ldrd	r2, [r0]
   16aa8:	mov	ip, #0
   16aac:	strd	r2, [r4]
   16ab0:	str	ip, [r0]
   16ab4:	ldr	r3, [r6, #36]	; 0x24
   16ab8:	str	r3, [r0, #4]
   16abc:	str	r0, [r6, #36]	; 0x24
   16ac0:	b	16a70 <__assert_fail@plt+0x565c>
   16ac4:	mov	r1, #0
   16ac8:	b	16a70 <__assert_fail@plt+0x565c>
   16acc:	ldr	r2, [r0]
   16ad0:	movw	r3, #54572	; 0xd52c
   16ad4:	movt	r3, #1
   16ad8:	mov	r1, r0
   16adc:	cmp	r2, r3
   16ae0:	beq	16b68 <__assert_fail@plt+0x5754>
   16ae4:	vldr	s14, [pc, #132]	; 16b70 <__assert_fail@plt+0x575c>
   16ae8:	vldr	s15, [r2, #8]
   16aec:	vcmpe.f32	s15, s14
   16af0:	vmrs	APSR_nzcv, fpscr
   16af4:	ble	16b5c <__assert_fail@plt+0x5748>
   16af8:	vldr	s13, [pc, #116]	; 16b74 <__assert_fail@plt+0x5760>
   16afc:	vcmpe.f32	s15, s13
   16b00:	vmrs	APSR_nzcv, fpscr
   16b04:	bpl	16b5c <__assert_fail@plt+0x5748>
   16b08:	vldr	s13, [pc, #104]	; 16b78 <__assert_fail@plt+0x5764>
   16b0c:	vldr	s12, [r2, #12]
   16b10:	vcmpe.f32	s12, s13
   16b14:	vmrs	APSR_nzcv, fpscr
   16b18:	ble	16b5c <__assert_fail@plt+0x5748>
   16b1c:	vldr	s13, [r2]
   16b20:	vcmpe.f32	s13, #0.0
   16b24:	vmrs	APSR_nzcv, fpscr
   16b28:	blt	16b5c <__assert_fail@plt+0x5748>
   16b2c:	vadd.f32	s14, s13, s14
   16b30:	vldr	s13, [r2, #4]
   16b34:	vcmpe.f32	s14, s13
   16b38:	vmrs	APSR_nzcv, fpscr
   16b3c:	bpl	16b5c <__assert_fail@plt+0x5748>
   16b40:	vldr	s12, [pc, #52]	; 16b7c <__assert_fail@plt+0x5768>
   16b44:	vcmpe.f32	s13, s12
   16b48:	vmrs	APSR_nzcv, fpscr
   16b4c:	bhi	16b5c <__assert_fail@plt+0x5748>
   16b50:	vcmpe.f32	s15, s14
   16b54:	vmrs	APSR_nzcv, fpscr
   16b58:	bgt	16b68 <__assert_fail@plt+0x5754>
   16b5c:	mov	r0, #0
   16b60:	str	r3, [r1]
   16b64:	bx	lr
   16b68:	mov	r0, #1
   16b6c:	bx	lr
   16b70:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b74:	svccc	0x00666666
   16b78:	svccc	0x008ccccd
   16b7c:	svccc	0x00800000
   16b80:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16b84:	ldr	r3, [r1, #4]
   16b88:	strd	r6, [sp, #8]
   16b8c:	ldr	r6, [r1]
   16b90:	strd	r8, [sp, #16]
   16b94:	str	sl, [sp, #24]
   16b98:	str	lr, [sp, #28]
   16b9c:	cmp	r6, r3
   16ba0:	bcs	16c68 <__assert_fail@plt+0x5854>
   16ba4:	mov	r8, r2
   16ba8:	mov	r5, r0
   16bac:	mov	r7, r1
   16bb0:	add	r6, r6, #8
   16bb4:	mov	r9, #0
   16bb8:	b	16bc8 <__assert_fail@plt+0x57b4>
   16bbc:	cmp	r3, r6
   16bc0:	add	r6, r6, #8
   16bc4:	bls	16c68 <__assert_fail@plt+0x5854>
   16bc8:	ldr	sl, [r6, #-8]
   16bcc:	cmp	sl, #0
   16bd0:	beq	16bbc <__assert_fail@plt+0x57a8>
   16bd4:	ldr	r4, [r6, #-4]
   16bd8:	cmp	r4, #0
   16bdc:	bne	16bfc <__assert_fail@plt+0x57e8>
   16be0:	b	16c4c <__assert_fail@plt+0x5838>
   16be4:	ldr	r2, [r0, #4]
   16be8:	cmp	r3, #0
   16bec:	str	r2, [r4, #4]
   16bf0:	str	r4, [r0, #4]
   16bf4:	mov	r4, r3
   16bf8:	beq	16c48 <__assert_fail@plt+0x5834>
   16bfc:	ldr	sl, [r4]
   16c00:	mov	r0, r5
   16c04:	mov	r1, sl
   16c08:	bl	16964 <__assert_fail@plt+0x5550>
   16c0c:	ldr	r2, [r0]
   16c10:	ldr	r3, [r4, #4]
   16c14:	cmp	r2, #0
   16c18:	bne	16be4 <__assert_fail@plt+0x57d0>
   16c1c:	ldr	r1, [r5, #12]
   16c20:	cmp	r3, #0
   16c24:	str	sl, [r0]
   16c28:	add	r1, r1, #1
   16c2c:	str	r1, [r5, #12]
   16c30:	str	r2, [r4]
   16c34:	ldr	r2, [r5, #36]	; 0x24
   16c38:	str	r2, [r4, #4]
   16c3c:	str	r4, [r5, #36]	; 0x24
   16c40:	mov	r4, r3
   16c44:	bne	16bfc <__assert_fail@plt+0x57e8>
   16c48:	ldr	sl, [r6, #-8]
   16c4c:	cmp	r8, #0
   16c50:	str	r9, [r6, #-4]
   16c54:	beq	16c84 <__assert_fail@plt+0x5870>
   16c58:	ldr	r3, [r7, #4]
   16c5c:	cmp	r3, r6
   16c60:	add	r6, r6, #8
   16c64:	bhi	16bc8 <__assert_fail@plt+0x57b4>
   16c68:	mov	r0, #1
   16c6c:	ldrd	r4, [sp]
   16c70:	ldrd	r6, [sp, #8]
   16c74:	ldrd	r8, [sp, #16]
   16c78:	ldr	sl, [sp, #24]
   16c7c:	add	sp, sp, #28
   16c80:	pop	{pc}		; (ldr pc, [sp], #4)
   16c84:	mov	r1, sl
   16c88:	mov	r0, r5
   16c8c:	bl	16964 <__assert_fail@plt+0x5550>
   16c90:	ldr	r3, [r0]
   16c94:	mov	r4, r0
   16c98:	cmp	r3, #0
   16c9c:	beq	16cdc <__assert_fail@plt+0x58c8>
   16ca0:	ldr	r0, [r5, #36]	; 0x24
   16ca4:	cmp	r0, #0
   16ca8:	beq	16cf0 <__assert_fail@plt+0x58dc>
   16cac:	ldr	r3, [r0, #4]
   16cb0:	str	r3, [r5, #36]	; 0x24
   16cb4:	ldr	r3, [r4, #4]
   16cb8:	str	sl, [r0]
   16cbc:	str	r3, [r0, #4]
   16cc0:	str	r0, [r4, #4]
   16cc4:	ldr	r2, [r7, #12]
   16cc8:	str	r9, [r6, #-8]
   16ccc:	ldr	r3, [r7, #4]
   16cd0:	sub	r2, r2, #1
   16cd4:	str	r2, [r7, #12]
   16cd8:	b	16bbc <__assert_fail@plt+0x57a8>
   16cdc:	ldr	r3, [r5, #12]
   16ce0:	str	sl, [r0]
   16ce4:	add	r3, r3, #1
   16ce8:	str	r3, [r5, #12]
   16cec:	b	16cc4 <__assert_fail@plt+0x58b0>
   16cf0:	mov	r0, #8
   16cf4:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   16cf8:	cmp	r0, #0
   16cfc:	bne	16cb4 <__assert_fail@plt+0x58a0>
   16d00:	mov	r0, r8
   16d04:	b	16c6c <__assert_fail@plt+0x5858>
   16d08:	ldr	r0, [r0, #8]
   16d0c:	bx	lr
   16d10:	ldr	r0, [r0, #12]
   16d14:	bx	lr
   16d18:	ldr	r0, [r0, #16]
   16d1c:	bx	lr
   16d20:	ldm	r0, {r1, r3}
   16d24:	cmp	r1, r3
   16d28:	bcs	16d9c <__assert_fail@plt+0x5988>
   16d2c:	sub	ip, r3, #1
   16d30:	add	r3, r1, #16
   16d34:	sub	ip, ip, r1
   16d38:	mov	r0, #0
   16d3c:	bic	ip, ip, #7
   16d40:	add	r1, r1, #8
   16d44:	add	ip, ip, r3
   16d48:	b	16d58 <__assert_fail@plt+0x5944>
   16d4c:	add	r1, r1, #8
   16d50:	cmp	r1, ip
   16d54:	beq	16d98 <__assert_fail@plt+0x5984>
   16d58:	ldr	r3, [r1, #-8]
   16d5c:	cmp	r3, #0
   16d60:	beq	16d4c <__assert_fail@plt+0x5938>
   16d64:	ldr	r3, [r1, #-4]
   16d68:	mov	r2, #1
   16d6c:	cmp	r3, #0
   16d70:	beq	16d84 <__assert_fail@plt+0x5970>
   16d74:	ldr	r3, [r3, #4]
   16d78:	add	r2, r2, #1
   16d7c:	cmp	r3, #0
   16d80:	bne	16d74 <__assert_fail@plt+0x5960>
   16d84:	cmp	r0, r2
   16d88:	add	r1, r1, #8
   16d8c:	movcc	r0, r2
   16d90:	cmp	r1, ip
   16d94:	bne	16d58 <__assert_fail@plt+0x5944>
   16d98:	bx	lr
   16d9c:	mov	r0, #0
   16da0:	bx	lr
   16da4:	ldm	r0, {r1, r3}
   16da8:	push	{lr}		; (str lr, [sp, #-4]!)
   16dac:	cmp	r1, r3
   16db0:	bcs	16e44 <__assert_fail@plt+0x5a30>
   16db4:	sub	ip, r3, #1
   16db8:	mov	r2, #0
   16dbc:	sub	ip, ip, r1
   16dc0:	add	r3, r1, #16
   16dc4:	bic	ip, ip, #7
   16dc8:	add	r1, r1, #8
   16dcc:	add	ip, ip, r3
   16dd0:	mov	lr, r2
   16dd4:	b	16de4 <__assert_fail@plt+0x59d0>
   16dd8:	add	r1, r1, #8
   16ddc:	cmp	r1, ip
   16de0:	beq	16e20 <__assert_fail@plt+0x5a0c>
   16de4:	ldr	r3, [r1, #-8]
   16de8:	cmp	r3, #0
   16dec:	beq	16dd8 <__assert_fail@plt+0x59c4>
   16df0:	ldr	r3, [r1, #-4]
   16df4:	add	lr, lr, #1
   16df8:	add	r2, r2, #1
   16dfc:	cmp	r3, #0
   16e00:	beq	16dd8 <__assert_fail@plt+0x59c4>
   16e04:	ldr	r3, [r3, #4]
   16e08:	add	r2, r2, #1
   16e0c:	cmp	r3, #0
   16e10:	bne	16e04 <__assert_fail@plt+0x59f0>
   16e14:	add	r1, r1, #8
   16e18:	cmp	r1, ip
   16e1c:	bne	16de4 <__assert_fail@plt+0x59d0>
   16e20:	ldr	r3, [r0, #12]
   16e24:	cmp	r3, lr
   16e28:	movne	r0, #0
   16e2c:	bne	16e40 <__assert_fail@plt+0x5a2c>
   16e30:	ldr	r0, [r0, #16]
   16e34:	sub	r0, r0, r2
   16e38:	clz	r0, r0
   16e3c:	lsr	r0, r0, #5
   16e40:	pop	{pc}		; (ldr pc, [sp], #4)
   16e44:	mov	r2, #0
   16e48:	mov	lr, r2
   16e4c:	b	16e20 <__assert_fail@plt+0x5a0c>
   16e50:	strd	r4, [sp, #-20]!	; 0xffffffec
   16e54:	mov	r4, r1
   16e58:	ldr	r2, [r0]
   16e5c:	ldr	r1, [r0, #4]
   16e60:	ldr	r3, [r0, #16]
   16e64:	strd	r6, [sp, #8]
   16e68:	str	lr, [sp, #16]
   16e6c:	sub	sp, sp, #12
   16e70:	cmp	r2, r1
   16e74:	ldrd	r6, [r0, #8]
   16e78:	bcs	16f78 <__assert_fail@plt+0x5b64>
   16e7c:	sub	ip, r1, #1
   16e80:	add	r1, r2, #16
   16e84:	sub	ip, ip, r2
   16e88:	add	r0, r2, #8
   16e8c:	bic	ip, ip, #7
   16e90:	mov	r5, #0
   16e94:	add	ip, ip, r1
   16e98:	b	16ea8 <__assert_fail@plt+0x5a94>
   16e9c:	add	r0, r0, #8
   16ea0:	cmp	r0, ip
   16ea4:	beq	16ee8 <__assert_fail@plt+0x5ad4>
   16ea8:	ldr	r2, [r0, #-8]
   16eac:	cmp	r2, #0
   16eb0:	beq	16e9c <__assert_fail@plt+0x5a88>
   16eb4:	ldr	r2, [r0, #-4]
   16eb8:	mov	r1, #1
   16ebc:	cmp	r2, #0
   16ec0:	beq	16ed4 <__assert_fail@plt+0x5ac0>
   16ec4:	ldr	r2, [r2, #4]
   16ec8:	add	r1, r1, #1
   16ecc:	cmp	r2, #0
   16ed0:	bne	16ec4 <__assert_fail@plt+0x5ab0>
   16ed4:	cmp	r5, r1
   16ed8:	add	r0, r0, #8
   16edc:	movcc	r5, r1
   16ee0:	cmp	r0, ip
   16ee4:	bne	16ea8 <__assert_fail@plt+0x5a94>
   16ee8:	mov	r1, #1
   16eec:	mov	r0, r4
   16ef0:	movw	r2, #54592	; 0xd540
   16ef4:	movt	r2, #1
   16ef8:	bl	11324 <__fprintf_chk@plt>
   16efc:	mov	r3, r6
   16f00:	mov	r1, #1
   16f04:	mov	r0, r4
   16f08:	movw	r2, #54616	; 0xd558
   16f0c:	movt	r2, #1
   16f10:	bl	11324 <__fprintf_chk@plt>
   16f14:	vmov	s15, r7
   16f18:	mov	r3, r7
   16f1c:	mov	r1, #1
   16f20:	vldr	d5, [pc, #88]	; 16f80 <__assert_fail@plt+0x5b6c>
   16f24:	mov	r0, r4
   16f28:	movw	r2, #54640	; 0xd570
   16f2c:	movt	r2, #1
   16f30:	vcvt.f64.u32	d6, s15
   16f34:	vmov	s15, r6
   16f38:	vmul.f64	d6, d6, d5
   16f3c:	vcvt.f64.u32	d7, s15
   16f40:	vdiv.f64	d5, d6, d7
   16f44:	vstr	d5, [sp]
   16f48:	bl	11324 <__fprintf_chk@plt>
   16f4c:	mov	r3, r5
   16f50:	mov	r0, r4
   16f54:	movw	r2, #54676	; 0xd594
   16f58:	movt	r2, #1
   16f5c:	mov	r1, #1
   16f60:	add	sp, sp, #12
   16f64:	ldrd	r4, [sp]
   16f68:	ldrd	r6, [sp, #8]
   16f6c:	ldr	lr, [sp, #16]
   16f70:	add	sp, sp, #20
   16f74:	b	11324 <__fprintf_chk@plt>
   16f78:	mov	r5, #0
   16f7c:	b	16ee8 <__assert_fail@plt+0x5ad4>
   16f80:	andeq	r0, r0, r0
   16f84:	subsmi	r0, r9, r0
   16f88:	strd	r4, [sp, #-16]!
   16f8c:	mov	r5, r1
   16f90:	str	r6, [sp, #8]
   16f94:	mov	r6, r0
   16f98:	str	lr, [sp, #12]
   16f9c:	bl	16964 <__assert_fail@plt+0x5550>
   16fa0:	ldr	r3, [r0]
   16fa4:	cmp	r3, #0
   16fa8:	beq	16fe4 <__assert_fail@plt+0x5bd0>
   16fac:	mov	r4, r0
   16fb0:	b	16fb8 <__assert_fail@plt+0x5ba4>
   16fb4:	ldr	r3, [r4]
   16fb8:	cmp	r3, r5
   16fbc:	mov	r1, r3
   16fc0:	mov	r0, r5
   16fc4:	beq	16ffc <__assert_fail@plt+0x5be8>
   16fc8:	ldr	r3, [r6, #28]
   16fcc:	blx	r3
   16fd0:	cmp	r0, #0
   16fd4:	bne	16ff8 <__assert_fail@plt+0x5be4>
   16fd8:	ldr	r4, [r4, #4]
   16fdc:	cmp	r4, #0
   16fe0:	bne	16fb4 <__assert_fail@plt+0x5ba0>
   16fe4:	ldrd	r4, [sp]
   16fe8:	mov	r0, #0
   16fec:	ldr	r6, [sp, #8]
   16ff0:	add	sp, sp, #12
   16ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ff8:	ldr	r5, [r4]
   16ffc:	mov	r0, r5
   17000:	ldrd	r4, [sp]
   17004:	ldr	r6, [sp, #8]
   17008:	add	sp, sp, #12
   1700c:	pop	{pc}		; (ldr pc, [sp], #4)
   17010:	ldr	r3, [r0, #16]
   17014:	cmp	r3, #0
   17018:	beq	1706c <__assert_fail@plt+0x5c58>
   1701c:	ldr	r3, [r0]
   17020:	ldr	r2, [r0, #4]
   17024:	cmp	r3, r2
   17028:	bcs	17060 <__assert_fail@plt+0x5c4c>
   1702c:	ldr	r0, [r3]
   17030:	cmp	r0, #0
   17034:	bxne	lr
   17038:	sub	r2, r2, #1
   1703c:	sub	r2, r2, r3
   17040:	bic	r2, r2, #7
   17044:	add	r2, r3, r2
   17048:	b	17058 <__assert_fail@plt+0x5c44>
   1704c:	ldr	r0, [r3, #8]!
   17050:	cmp	r0, #0
   17054:	bxne	lr
   17058:	cmp	r3, r2
   1705c:	bne	1704c <__assert_fail@plt+0x5c38>
   17060:	str	r4, [sp, #-8]!
   17064:	str	lr, [sp, #4]
   17068:	bl	113f0 <abort@plt>
   1706c:	mov	r0, r3
   17070:	bx	lr
   17074:	strd	r4, [sp, #-16]!
   17078:	mov	r5, r0
   1707c:	mov	r4, r1
   17080:	str	r6, [sp, #8]
   17084:	str	lr, [sp, #12]
   17088:	bl	16964 <__assert_fail@plt+0x5550>
   1708c:	mov	r2, r0
   17090:	mov	r3, r0
   17094:	b	170a0 <__assert_fail@plt+0x5c8c>
   17098:	cmp	r3, #0
   1709c:	beq	170b8 <__assert_fail@plt+0x5ca4>
   170a0:	ldm	r3, {r1, r3}
   170a4:	cmp	r1, r4
   170a8:	bne	17098 <__assert_fail@plt+0x5c84>
   170ac:	cmp	r3, #0
   170b0:	ldrne	r0, [r3]
   170b4:	bne	170dc <__assert_fail@plt+0x5cc8>
   170b8:	ldr	r3, [r5, #4]
   170bc:	b	170cc <__assert_fail@plt+0x5cb8>
   170c0:	ldr	r0, [r2]
   170c4:	cmp	r0, #0
   170c8:	bne	170dc <__assert_fail@plt+0x5cc8>
   170cc:	add	r2, r2, #8
   170d0:	cmp	r3, r2
   170d4:	bhi	170c0 <__assert_fail@plt+0x5cac>
   170d8:	mov	r0, #0
   170dc:	ldrd	r4, [sp]
   170e0:	ldr	r6, [sp, #8]
   170e4:	add	sp, sp, #12
   170e8:	pop	{pc}		; (ldr pc, [sp], #4)
   170ec:	strd	r4, [sp, #-12]!
   170f0:	ldr	r5, [r0]
   170f4:	str	lr, [sp, #8]
   170f8:	ldr	lr, [r0, #4]
   170fc:	cmp	lr, r5
   17100:	bls	1718c <__assert_fail@plt+0x5d78>
   17104:	mov	ip, #0
   17108:	ldr	r3, [r5]
   1710c:	cmp	r3, #0
   17110:	bne	17134 <__assert_fail@plt+0x5d20>
   17114:	add	r5, r5, #8
   17118:	cmp	lr, r5
   1711c:	bhi	17108 <__assert_fail@plt+0x5cf4>
   17120:	mov	r2, ip
   17124:	ldrd	r4, [sp]
   17128:	add	sp, sp, #8
   1712c:	mov	r0, r2
   17130:	pop	{pc}		; (ldr pc, [sp], #4)
   17134:	cmp	r2, ip
   17138:	bls	17120 <__assert_fail@plt+0x5d0c>
   1713c:	str	r3, [r1, ip, lsl #2]
   17140:	add	r4, ip, #1
   17144:	add	lr, r1, ip, lsl #2
   17148:	ldr	r3, [r5, #4]
   1714c:	cmp	r3, #0
   17150:	beq	17180 <__assert_fail@plt+0x5d6c>
   17154:	mov	ip, r4
   17158:	cmp	r2, ip
   1715c:	add	ip, ip, #1
   17160:	beq	17124 <__assert_fail@plt+0x5d10>
   17164:	ldr	r4, [r3]
   17168:	str	r4, [lr, #4]!
   1716c:	ldr	r3, [r3, #4]
   17170:	cmp	r3, #0
   17174:	bne	17158 <__assert_fail@plt+0x5d44>
   17178:	ldr	lr, [r0, #4]
   1717c:	b	17114 <__assert_fail@plt+0x5d00>
   17180:	mov	ip, r4
   17184:	ldr	lr, [r0, #4]
   17188:	b	17114 <__assert_fail@plt+0x5d00>
   1718c:	mov	r2, #0
   17190:	b	17124 <__assert_fail@plt+0x5d10>
   17194:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17198:	ldr	r3, [r0, #4]
   1719c:	strd	r6, [sp, #8]
   171a0:	strd	r8, [sp, #16]
   171a4:	ldr	r8, [r0]
   171a8:	str	sl, [sp, #24]
   171ac:	str	lr, [sp, #28]
   171b0:	cmp	r3, r8
   171b4:	bls	17230 <__assert_fail@plt+0x5e1c>
   171b8:	mov	r7, r2
   171bc:	mov	r6, r1
   171c0:	mov	r9, r0
   171c4:	mov	r5, #0
   171c8:	ldr	r0, [r8]
   171cc:	cmp	r0, #0
   171d0:	bne	171fc <__assert_fail@plt+0x5de8>
   171d4:	add	r8, r8, #8
   171d8:	cmp	r3, r8
   171dc:	bhi	171c8 <__assert_fail@plt+0x5db4>
   171e0:	mov	r0, r5
   171e4:	ldrd	r4, [sp]
   171e8:	ldrd	r6, [sp, #8]
   171ec:	ldrd	r8, [sp, #16]
   171f0:	ldr	sl, [sp, #24]
   171f4:	add	sp, sp, #28
   171f8:	pop	{pc}		; (ldr pc, [sp], #4)
   171fc:	mov	r4, r8
   17200:	b	17208 <__assert_fail@plt+0x5df4>
   17204:	ldr	r0, [r4]
   17208:	mov	r1, r7
   1720c:	blx	r6
   17210:	cmp	r0, #0
   17214:	beq	171e0 <__assert_fail@plt+0x5dcc>
   17218:	ldr	r4, [r4, #4]
   1721c:	add	r5, r5, #1
   17220:	cmp	r4, #0
   17224:	bne	17204 <__assert_fail@plt+0x5df0>
   17228:	ldr	r3, [r9, #4]
   1722c:	b	171d4 <__assert_fail@plt+0x5dc0>
   17230:	mov	r5, #0
   17234:	b	171e0 <__assert_fail@plt+0x5dcc>
   17238:	ldrb	r2, [r0]
   1723c:	cmp	r2, #0
   17240:	beq	1726c <__assert_fail@plt+0x5e58>
   17244:	mov	r3, #0
   17248:	rsb	r3, r3, r3, lsl #5
   1724c:	add	r3, r3, r2
   17250:	ldrb	r2, [r0, #1]!
   17254:	udiv	ip, r3, r1
   17258:	cmp	r2, #0
   1725c:	mls	r3, r1, ip, r3
   17260:	bne	17248 <__assert_fail@plt+0x5e34>
   17264:	mov	r0, r3
   17268:	bx	lr
   1726c:	mov	r3, r2
   17270:	mov	r0, r3
   17274:	bx	lr
   17278:	movw	r3, #54572	; 0xd52c
   1727c:	movt	r3, #1
   17280:	strd	r4, [sp, #-8]!
   17284:	ldrd	r4, [r3]
   17288:	ldr	r1, [r3, #16]
   1728c:	ldrd	r2, [r3, #8]
   17290:	strd	r4, [r0]
   17294:	ldrd	r4, [sp]
   17298:	add	sp, sp, #8
   1729c:	strd	r2, [r0, #8]
   172a0:	str	r1, [r0, #16]
   172a4:	bx	lr
   172a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   172ac:	cmp	r2, #0
   172b0:	movw	ip, #26964	; 0x6954
   172b4:	movt	ip, #1
   172b8:	strd	r6, [sp, #8]
   172bc:	movne	r6, r2
   172c0:	str	lr, [sp, #16]
   172c4:	sub	sp, sp, #12
   172c8:	movw	lr, #26948	; 0x6944
   172cc:	movt	lr, #1
   172d0:	mov	r7, r1
   172d4:	moveq	r6, lr
   172d8:	cmp	r3, #0
   172dc:	str	r0, [sp, #4]
   172e0:	mov	r0, #40	; 0x28
   172e4:	movne	r5, r3
   172e8:	moveq	r5, ip
   172ec:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   172f0:	subs	r4, r0, #0
   172f4:	beq	1738c <__assert_fail@plt+0x5f78>
   172f8:	cmp	r7, #0
   172fc:	add	r0, r4, #20
   17300:	beq	173a4 <__assert_fail@plt+0x5f90>
   17304:	str	r7, [r4, #20]
   17308:	bl	16acc <__assert_fail@plt+0x56b8>
   1730c:	cmp	r0, #0
   17310:	beq	173ec <__assert_fail@plt+0x5fd8>
   17314:	ldrb	r3, [r7, #16]
   17318:	cmp	r3, #0
   1731c:	beq	173fc <__assert_fail@plt+0x5fe8>
   17320:	ldr	r0, [sp, #4]
   17324:	bl	168b8 <__assert_fail@plt+0x54a4>
   17328:	lsrs	r2, r0, #30
   1732c:	movne	r7, #1
   17330:	moveq	r7, #0
   17334:	tst	r0, #536870912	; 0x20000000
   17338:	bne	173e4 <__assert_fail@plt+0x5fd0>
   1733c:	cmp	r7, #0
   17340:	bne	173e4 <__assert_fail@plt+0x5fd0>
   17344:	cmp	r0, #0
   17348:	str	r0, [r4, #8]
   1734c:	beq	173ec <__assert_fail@plt+0x5fd8>
   17350:	mov	r1, #8
   17354:	bl	1b644 <__assert_fail@plt+0xa230>
   17358:	cmp	r0, #0
   1735c:	str	r0, [r4]
   17360:	beq	173ec <__assert_fail@plt+0x5fd8>
   17364:	ldr	r3, [r4, #8]
   17368:	str	r7, [r4, #12]
   1736c:	str	r7, [r4, #16]
   17370:	str	r6, [r4, #24]
   17374:	str	r5, [r4, #28]
   17378:	add	r0, r0, r3, lsl #3
   1737c:	ldr	r3, [sp, #32]
   17380:	str	r0, [r4, #4]
   17384:	str	r3, [r4, #32]
   17388:	str	r7, [r4, #36]	; 0x24
   1738c:	mov	r0, r4
   17390:	add	sp, sp, #12
   17394:	ldrd	r4, [sp]
   17398:	ldrd	r6, [sp, #8]
   1739c:	add	sp, sp, #16
   173a0:	pop	{pc}		; (ldr pc, [sp], #4)
   173a4:	movw	r3, #54572	; 0xd52c
   173a8:	movt	r3, #1
   173ac:	str	r3, [r4, #20]
   173b0:	bl	16acc <__assert_fail@plt+0x56b8>
   173b4:	cmp	r0, #0
   173b8:	beq	173ec <__assert_fail@plt+0x5fd8>
   173bc:	vldr	s13, [pc, #64]	; 17404 <__assert_fail@plt+0x5ff0>
   173c0:	vldr	s15, [sp, #4]
   173c4:	vldr	s14, [pc, #60]	; 17408 <__assert_fail@plt+0x5ff4>
   173c8:	vcvt.f32.u32	s12, s15
   173cc:	vdiv.f32	s15, s12, s13
   173d0:	vcmpe.f32	s15, s14
   173d4:	vmrs	APSR_nzcv, fpscr
   173d8:	vcvtlt.u32.f32	s15, s15
   173dc:	vstrlt	s15, [sp, #4]
   173e0:	blt	17320 <__assert_fail@plt+0x5f0c>
   173e4:	mov	r3, #0
   173e8:	str	r3, [r4, #8]
   173ec:	mov	r0, r4
   173f0:	mov	r4, #0
   173f4:	bl	16854 <__assert_fail@plt+0x5440>
   173f8:	b	1738c <__assert_fail@plt+0x5f78>
   173fc:	vldr	s13, [r7, #8]
   17400:	b	173c0 <__assert_fail@plt+0x5fac>
   17404:	svccc	0x004ccccd
   17408:	svcmi	0x00800000
   1740c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17410:	mov	r5, r0
   17414:	ldr	r2, [r0, #4]
   17418:	strd	r6, [sp, #8]
   1741c:	ldr	r6, [r0]
   17420:	str	r8, [sp, #16]
   17424:	str	lr, [sp, #20]
   17428:	cmp	r6, r2
   1742c:	addcc	r6, r6, #8
   17430:	movcc	r7, #0
   17434:	bcc	17448 <__assert_fail@plt+0x6034>
   17438:	b	174bc <__assert_fail@plt+0x60a8>
   1743c:	cmp	r2, r6
   17440:	add	r6, r6, #8
   17444:	bls	174bc <__assert_fail@plt+0x60a8>
   17448:	ldr	r3, [r6, #-8]
   1744c:	cmp	r3, #0
   17450:	beq	1743c <__assert_fail@plt+0x6028>
   17454:	ldr	r4, [r6, #-4]
   17458:	ldr	r2, [r5, #32]
   1745c:	cmp	r4, #0
   17460:	beq	17494 <__assert_fail@plt+0x6080>
   17464:	cmp	r2, #0
   17468:	beq	17478 <__assert_fail@plt+0x6064>
   1746c:	ldr	r0, [r4]
   17470:	blx	r2
   17474:	ldr	r2, [r5, #32]
   17478:	ldr	r3, [r4, #4]
   1747c:	ldr	r1, [r5, #36]	; 0x24
   17480:	str	r7, [r4]
   17484:	str	r1, [r4, #4]
   17488:	str	r4, [r5, #36]	; 0x24
   1748c:	subs	r4, r3, #0
   17490:	bne	17464 <__assert_fail@plt+0x6050>
   17494:	cmp	r2, #0
   17498:	beq	174a4 <__assert_fail@plt+0x6090>
   1749c:	ldr	r0, [r6, #-8]
   174a0:	blx	r2
   174a4:	str	r7, [r6, #-8]
   174a8:	str	r7, [r6, #-4]
   174ac:	ldr	r2, [r5, #4]
   174b0:	cmp	r2, r6
   174b4:	add	r6, r6, #8
   174b8:	bhi	17448 <__assert_fail@plt+0x6034>
   174bc:	mov	r3, #0
   174c0:	ldrd	r6, [sp, #8]
   174c4:	ldr	r8, [sp, #16]
   174c8:	str	r3, [r5, #12]
   174cc:	str	r3, [r5, #16]
   174d0:	ldrd	r4, [sp]
   174d4:	add	sp, sp, #20
   174d8:	pop	{pc}		; (ldr pc, [sp], #4)
   174dc:	strd	r4, [sp, #-16]!
   174e0:	ldr	r2, [r0, #32]
   174e4:	ldr	r5, [r0]
   174e8:	ldr	r3, [r0, #4]
   174ec:	cmp	r2, #0
   174f0:	str	r6, [sp, #8]
   174f4:	mov	r6, r0
   174f8:	str	lr, [sp, #12]
   174fc:	beq	17564 <__assert_fail@plt+0x6150>
   17500:	ldr	r2, [r0, #16]
   17504:	cmp	r2, #0
   17508:	beq	17564 <__assert_fail@plt+0x6150>
   1750c:	cmp	r5, r3
   17510:	bcc	17524 <__assert_fail@plt+0x6110>
   17514:	b	17598 <__assert_fail@plt+0x6184>
   17518:	add	r5, r5, #8
   1751c:	cmp	r3, r5
   17520:	bls	17560 <__assert_fail@plt+0x614c>
   17524:	ldr	r0, [r5]
   17528:	cmp	r0, #0
   1752c:	beq	17518 <__assert_fail@plt+0x6104>
   17530:	mov	r4, r5
   17534:	b	1753c <__assert_fail@plt+0x6128>
   17538:	ldr	r0, [r4]
   1753c:	ldr	r3, [r6, #32]
   17540:	blx	r3
   17544:	ldr	r4, [r4, #4]
   17548:	cmp	r4, #0
   1754c:	bne	17538 <__assert_fail@plt+0x6124>
   17550:	ldr	r3, [r6, #4]
   17554:	add	r5, r5, #8
   17558:	cmp	r3, r5
   1755c:	bhi	17524 <__assert_fail@plt+0x6110>
   17560:	ldr	r5, [r6]
   17564:	cmp	r5, r3
   17568:	bcs	17598 <__assert_fail@plt+0x6184>
   1756c:	ldr	r0, [r5, #4]
   17570:	cmp	r0, #0
   17574:	beq	1758c <__assert_fail@plt+0x6178>
   17578:	ldr	r4, [r0, #4]
   1757c:	bl	16854 <__assert_fail@plt+0x5440>
   17580:	subs	r0, r4, #0
   17584:	bne	17578 <__assert_fail@plt+0x6164>
   17588:	ldr	r3, [r6, #4]
   1758c:	add	r5, r5, #8
   17590:	cmp	r3, r5
   17594:	bhi	1756c <__assert_fail@plt+0x6158>
   17598:	ldr	r0, [r6, #36]	; 0x24
   1759c:	cmp	r0, #0
   175a0:	beq	175b4 <__assert_fail@plt+0x61a0>
   175a4:	ldr	r4, [r0, #4]
   175a8:	bl	16854 <__assert_fail@plt+0x5440>
   175ac:	subs	r0, r4, #0
   175b0:	bne	175a4 <__assert_fail@plt+0x6190>
   175b4:	ldr	r0, [r6]
   175b8:	bl	16854 <__assert_fail@plt+0x5440>
   175bc:	mov	r0, r6
   175c0:	ldrd	r4, [sp]
   175c4:	ldr	r6, [sp, #8]
   175c8:	ldr	lr, [sp, #12]
   175cc:	add	sp, sp, #16
   175d0:	b	16854 <__assert_fail@plt+0x5440>
   175d4:	ldr	r3, [r0, #20]
   175d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   175dc:	ldrb	r2, [r3, #16]
   175e0:	strd	r6, [sp, #8]
   175e4:	mov	r6, r0
   175e8:	str	lr, [sp, #16]
   175ec:	sub	sp, sp, #52	; 0x34
   175f0:	str	r1, [sp, #4]
   175f4:	cmp	r2, #0
   175f8:	bne	17624 <__assert_fail@plt+0x6210>
   175fc:	vmov	s15, r1
   17600:	vldr	s13, [r3, #8]
   17604:	vldr	s14, [pc, #340]	; 17760 <__assert_fail@plt+0x634c>
   17608:	vcvt.f32.u32	s12, s15
   1760c:	vdiv.f32	s15, s12, s13
   17610:	vcmpe.f32	s15, s14
   17614:	vmrs	APSR_nzcv, fpscr
   17618:	vcvtlt.u32.f32	s15, s15
   1761c:	vstrlt	s15, [sp, #4]
   17620:	bge	17654 <__assert_fail@plt+0x6240>
   17624:	ldr	r0, [sp, #4]
   17628:	bl	168b8 <__assert_fail@plt+0x54a4>
   1762c:	lsrs	r3, r0, #30
   17630:	mov	r5, r0
   17634:	movne	r4, #1
   17638:	moveq	r4, #0
   1763c:	tst	r0, #536870912	; 0x20000000
   17640:	movne	r4, #1
   17644:	cmp	r0, #0
   17648:	moveq	r4, #1
   1764c:	cmp	r4, #0
   17650:	beq	17670 <__assert_fail@plt+0x625c>
   17654:	mov	r4, #0
   17658:	mov	r0, r4
   1765c:	add	sp, sp, #52	; 0x34
   17660:	ldrd	r4, [sp]
   17664:	ldrd	r6, [sp, #8]
   17668:	add	sp, sp, #16
   1766c:	pop	{pc}		; (ldr pc, [sp], #4)
   17670:	ldr	r3, [r6, #8]
   17674:	cmp	r3, r0
   17678:	beq	17728 <__assert_fail@plt+0x6314>
   1767c:	mov	r1, #8
   17680:	bl	1b644 <__assert_fail@plt+0xa230>
   17684:	cmp	r0, #0
   17688:	str	r0, [sp, #8]
   1768c:	beq	17654 <__assert_fail@plt+0x6240>
   17690:	add	r3, r0, r5, lsl #3
   17694:	ldr	r7, [r6, #20]
   17698:	mov	r2, r4
   1769c:	add	r0, sp, #8
   176a0:	mov	r1, r6
   176a4:	ldr	lr, [r6, #28]
   176a8:	str	r3, [sp, #12]
   176ac:	str	r5, [sp, #16]
   176b0:	ldr	r5, [r6, #24]
   176b4:	str	r4, [sp, #20]
   176b8:	ldr	ip, [r6, #32]
   176bc:	str	r4, [sp, #24]
   176c0:	ldr	r3, [r6, #36]	; 0x24
   176c4:	str	r7, [sp, #28]
   176c8:	str	r5, [sp, #32]
   176cc:	str	lr, [sp, #36]	; 0x24
   176d0:	str	ip, [sp, #40]	; 0x28
   176d4:	str	r3, [sp, #44]	; 0x2c
   176d8:	bl	16b80 <__assert_fail@plt+0x576c>
   176dc:	subs	r4, r0, #0
   176e0:	bne	17730 <__assert_fail@plt+0x631c>
   176e4:	ldr	r3, [sp, #44]	; 0x2c
   176e8:	mov	r2, #1
   176ec:	add	r1, sp, #8
   176f0:	mov	r0, r6
   176f4:	str	r3, [r6, #36]	; 0x24
   176f8:	bl	16b80 <__assert_fail@plt+0x576c>
   176fc:	cmp	r0, #0
   17700:	beq	1775c <__assert_fail@plt+0x6348>
   17704:	add	r1, sp, #8
   17708:	mov	r0, r6
   1770c:	mov	r2, r4
   17710:	bl	16b80 <__assert_fail@plt+0x576c>
   17714:	cmp	r0, #0
   17718:	beq	1775c <__assert_fail@plt+0x6348>
   1771c:	ldr	r0, [sp, #8]
   17720:	bl	16854 <__assert_fail@plt+0x5440>
   17724:	b	17658 <__assert_fail@plt+0x6244>
   17728:	mov	r4, #1
   1772c:	b	17658 <__assert_fail@plt+0x6244>
   17730:	ldr	r0, [r6]
   17734:	bl	16854 <__assert_fail@plt+0x5440>
   17738:	ldrd	r2, [sp, #8]
   1773c:	ldr	r1, [sp, #16]
   17740:	strd	r2, [r6]
   17744:	ldr	r2, [sp, #20]
   17748:	str	r1, [r6, #8]
   1774c:	ldr	r3, [sp, #44]	; 0x2c
   17750:	str	r2, [r6, #12]
   17754:	str	r3, [r6, #36]	; 0x24
   17758:	b	17658 <__assert_fail@plt+0x6244>
   1775c:	bl	113f0 <abort@plt>
   17760:	svcmi	0x00800000
   17764:	strd	r4, [sp, #-16]!
   17768:	str	r6, [sp, #8]
   1776c:	subs	r6, r1, #0
   17770:	str	lr, [sp, #12]
   17774:	sub	sp, sp, #8
   17778:	beq	178f8 <__assert_fail@plt+0x64e4>
   1777c:	mov	r3, #0
   17780:	mov	r5, r2
   17784:	add	r2, sp, #4
   17788:	mov	r4, r0
   1778c:	bl	169a4 <__assert_fail@plt+0x5590>
   17790:	subs	r3, r0, #0
   17794:	beq	177c0 <__assert_fail@plt+0x63ac>
   17798:	cmp	r5, #0
   1779c:	moveq	r0, r5
   177a0:	beq	177ac <__assert_fail@plt+0x6398>
   177a4:	mov	r0, #0
   177a8:	str	r3, [r5]
   177ac:	add	sp, sp, #8
   177b0:	ldrd	r4, [sp]
   177b4:	ldr	r6, [sp, #8]
   177b8:	add	sp, sp, #12
   177bc:	pop	{pc}		; (ldr pc, [sp], #4)
   177c0:	vldr	s15, [r4, #8]
   177c4:	vldr	s14, [r4, #12]
   177c8:	ldr	r3, [r4, #20]
   177cc:	vcvt.f32.u32	s15, s15
   177d0:	vcvt.f32.u32	s14, s14
   177d4:	vldr	s13, [r3, #8]
   177d8:	vmul.f32	s15, s15, s13
   177dc:	vcmpe.f32	s14, s15
   177e0:	vmrs	APSR_nzcv, fpscr
   177e4:	bgt	1782c <__assert_fail@plt+0x6418>
   177e8:	ldr	r2, [sp, #4]
   177ec:	ldr	r3, [r2]
   177f0:	cmp	r3, #0
   177f4:	beq	17888 <__assert_fail@plt+0x6474>
   177f8:	ldr	r3, [r4, #36]	; 0x24
   177fc:	cmp	r3, #0
   17800:	beq	178ac <__assert_fail@plt+0x6498>
   17804:	ldr	r1, [r3, #4]
   17808:	str	r1, [r4, #36]	; 0x24
   1780c:	ldr	r1, [r4, #16]
   17810:	mov	r0, #1
   17814:	ldr	ip, [r2, #4]
   17818:	add	r1, r1, r0
   1781c:	stm	r3, {r6, ip}
   17820:	str	r3, [r2, #4]
   17824:	str	r1, [r4, #16]
   17828:	b	177ac <__assert_fail@plt+0x6398>
   1782c:	add	r0, r4, #20
   17830:	bl	16acc <__assert_fail@plt+0x56b8>
   17834:	vldr	s15, [r4, #8]
   17838:	vldr	s14, [r4, #12]
   1783c:	ldr	r3, [r4, #20]
   17840:	vcvt.f32.u32	s15, s15
   17844:	vcvt.f32.u32	s14, s14
   17848:	vldr	s13, [r3, #8]
   1784c:	vmul.f32	s12, s13, s15
   17850:	vcmpe.f32	s14, s12
   17854:	vmrs	APSR_nzcv, fpscr
   17858:	ble	177e8 <__assert_fail@plt+0x63d4>
   1785c:	vldr	s14, [r3, #12]
   17860:	ldrb	r2, [r3, #16]
   17864:	vmul.f32	s15, s15, s14
   17868:	vldr	s14, [pc, #140]	; 178fc <__assert_fail@plt+0x64e8>
   1786c:	cmp	r2, #0
   17870:	vmuleq.f32	s15, s15, s13
   17874:	vcmpe.f32	s15, s14
   17878:	vmrs	APSR_nzcv, fpscr
   1787c:	blt	178c4 <__assert_fail@plt+0x64b0>
   17880:	mvn	r0, #0
   17884:	b	177ac <__assert_fail@plt+0x6398>
   17888:	ldr	r1, [r4, #12]
   1788c:	mov	r0, #1
   17890:	ldr	r3, [r4, #16]
   17894:	str	r6, [r2]
   17898:	add	r2, r1, r0
   1789c:	add	r3, r3, r0
   178a0:	str	r2, [r4, #12]
   178a4:	str	r3, [r4, #16]
   178a8:	b	177ac <__assert_fail@plt+0x6398>
   178ac:	mov	r0, #8
   178b0:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   178b4:	subs	r3, r0, #0
   178b8:	beq	17880 <__assert_fail@plt+0x646c>
   178bc:	ldr	r2, [sp, #4]
   178c0:	b	1780c <__assert_fail@plt+0x63f8>
   178c4:	vcvt.u32.f32	s15, s15
   178c8:	mov	r0, r4
   178cc:	vmov	r1, s15
   178d0:	bl	175d4 <__assert_fail@plt+0x61c0>
   178d4:	cmp	r0, #0
   178d8:	beq	17880 <__assert_fail@plt+0x646c>
   178dc:	add	r2, sp, #4
   178e0:	mov	r3, #0
   178e4:	mov	r1, r6
   178e8:	mov	r0, r4
   178ec:	bl	169a4 <__assert_fail@plt+0x5590>
   178f0:	cmp	r0, #0
   178f4:	beq	177e8 <__assert_fail@plt+0x63d4>
   178f8:	bl	113f0 <abort@plt>
   178fc:	svcmi	0x00800000
   17900:	str	r4, [sp, #-8]!
   17904:	mov	r4, r1
   17908:	str	lr, [sp, #4]
   1790c:	sub	sp, sp, #8
   17910:	add	r2, sp, #4
   17914:	bl	17764 <__assert_fail@plt+0x6350>
   17918:	cmn	r0, #1
   1791c:	moveq	r0, #0
   17920:	beq	17930 <__assert_fail@plt+0x651c>
   17924:	cmp	r0, #0
   17928:	ldreq	r0, [sp, #4]
   1792c:	movne	r0, r4
   17930:	add	sp, sp, #8
   17934:	ldr	r4, [sp]
   17938:	add	sp, sp, #4
   1793c:	pop	{pc}		; (ldr pc, [sp], #4)
   17940:	strd	r4, [sp, #-16]!
   17944:	mov	r3, #1
   17948:	mov	r4, r0
   1794c:	str	r6, [sp, #8]
   17950:	str	lr, [sp, #12]
   17954:	sub	sp, sp, #8
   17958:	add	r2, sp, #4
   1795c:	bl	169a4 <__assert_fail@plt+0x5590>
   17960:	subs	r5, r0, #0
   17964:	beq	17984 <__assert_fail@plt+0x6570>
   17968:	ldr	r2, [sp, #4]
   1796c:	ldr	r3, [r4, #16]
   17970:	ldr	r2, [r2]
   17974:	sub	r3, r3, #1
   17978:	str	r3, [r4, #16]
   1797c:	cmp	r2, #0
   17980:	beq	1799c <__assert_fail@plt+0x6588>
   17984:	mov	r0, r5
   17988:	add	sp, sp, #8
   1798c:	ldrd	r4, [sp]
   17990:	ldr	r6, [sp, #8]
   17994:	add	sp, sp, #12
   17998:	pop	{pc}		; (ldr pc, [sp], #4)
   1799c:	vldr	s15, [r4, #8]
   179a0:	ldr	r3, [r4, #12]
   179a4:	ldr	r2, [r4, #20]
   179a8:	vcvt.f32.u32	s15, s15
   179ac:	sub	r3, r3, #1
   179b0:	vmov	s14, r3
   179b4:	vldr	s13, [r2]
   179b8:	str	r3, [r4, #12]
   179bc:	vmul.f32	s15, s15, s13
   179c0:	vcvt.f32.u32	s14, s14
   179c4:	vcmpe.f32	s14, s15
   179c8:	vmrs	APSR_nzcv, fpscr
   179cc:	bpl	17984 <__assert_fail@plt+0x6570>
   179d0:	add	r0, r4, #20
   179d4:	bl	16acc <__assert_fail@plt+0x56b8>
   179d8:	vldr	s15, [r4, #8]
   179dc:	vldr	s13, [r4, #12]
   179e0:	ldr	r3, [r4, #20]
   179e4:	vcvt.f32.u32	s15, s15
   179e8:	vcvt.f32.u32	s13, s13
   179ec:	vldr	s14, [r3]
   179f0:	vmul.f32	s14, s15, s14
   179f4:	vcmpe.f32	s13, s14
   179f8:	vmrs	APSR_nzcv, fpscr
   179fc:	bpl	17984 <__assert_fail@plt+0x6570>
   17a00:	ldrb	r2, [r3, #16]
   17a04:	mov	r0, r4
   17a08:	vldr	s14, [r3, #4]
   17a0c:	cmp	r2, #0
   17a10:	vmul.f32	s15, s15, s14
   17a14:	vldreq	s14, [r3, #8]
   17a18:	vmuleq.f32	s15, s15, s14
   17a1c:	vcvt.u32.f32	s15, s15
   17a20:	vmov	r1, s15
   17a24:	bl	175d4 <__assert_fail@plt+0x61c0>
   17a28:	cmp	r0, #0
   17a2c:	bne	17984 <__assert_fail@plt+0x6570>
   17a30:	ldr	r0, [r4, #36]	; 0x24
   17a34:	cmp	r0, #0
   17a38:	beq	17a4c <__assert_fail@plt+0x6638>
   17a3c:	ldr	r6, [r0, #4]
   17a40:	bl	16854 <__assert_fail@plt+0x5440>
   17a44:	subs	r0, r6, #0
   17a48:	bne	17a3c <__assert_fail@plt+0x6628>
   17a4c:	mov	r3, #0
   17a50:	str	r3, [r4, #36]	; 0x24
   17a54:	b	17984 <__assert_fail@plt+0x6570>
   17a58:	b	17940 <__assert_fail@plt+0x652c>
   17a5c:	mov	r3, #0
   17a60:	cmp	r0, #0
   17a64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17a68:	mov	r5, r1
   17a6c:	sbcs	r1, r1, #0
   17a70:	strd	r6, [sp, #8]
   17a74:	mov	r4, r0
   17a78:	add	r6, r2, #20
   17a7c:	str	r8, [sp, #16]
   17a80:	str	lr, [sp, #20]
   17a84:	strb	r3, [r2, #20]
   17a88:	blt	17ae8 <__assert_fail@plt+0x66d4>
   17a8c:	mov	r0, r4
   17a90:	mov	r1, r5
   17a94:	mov	r2, #10
   17a98:	mov	r3, #0
   17a9c:	bl	1bd38 <__assert_fail@plt+0xa924>
   17aa0:	add	ip, r2, #48	; 0x30
   17aa4:	mov	r0, r4
   17aa8:	mov	r1, r5
   17aac:	mov	r3, #0
   17ab0:	mov	r2, #10
   17ab4:	strb	ip, [r6, #-1]!
   17ab8:	bl	1bd38 <__assert_fail@plt+0xa924>
   17abc:	mov	r4, r0
   17ac0:	mov	r5, r1
   17ac4:	orrs	r3, r4, r5
   17ac8:	bne	17a8c <__assert_fail@plt+0x6678>
   17acc:	mov	r0, r6
   17ad0:	ldrd	r4, [sp]
   17ad4:	ldrd	r6, [sp, #8]
   17ad8:	ldr	r8, [sp, #16]
   17adc:	add	sp, sp, #20
   17ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae4:	mov	r6, r7
   17ae8:	mov	r0, r4
   17aec:	mov	r1, r5
   17af0:	mov	r2, #10
   17af4:	mov	r3, #0
   17af8:	bl	1bd38 <__assert_fail@plt+0xa924>
   17afc:	rsb	ip, r2, #48	; 0x30
   17b00:	mov	r0, r4
   17b04:	mov	r1, r5
   17b08:	mov	r3, #0
   17b0c:	mov	r2, #10
   17b10:	strb	ip, [r6, #-1]
   17b14:	sub	r7, r6, #1
   17b18:	bl	1bd38 <__assert_fail@plt+0xa924>
   17b1c:	mov	r4, r0
   17b20:	mov	r5, r1
   17b24:	orrs	r3, r4, r5
   17b28:	bne	17ae4 <__assert_fail@plt+0x66d0>
   17b2c:	mov	r3, #45	; 0x2d
   17b30:	sub	r6, r6, #2
   17b34:	strb	r3, [r7, #-1]
   17b38:	b	17acc <__assert_fail@plt+0x66b8>
   17b3c:	movw	r0, #54700	; 0xd5ac
   17b40:	movt	r0, #1
   17b44:	push	{lr}		; (str lr, [sp, #-4]!)
   17b48:	sub	sp, sp, #12
   17b4c:	bl	11234 <getenv@plt>
   17b50:	subs	r3, r0, #0
   17b54:	beq	17b64 <__assert_fail@plt+0x6750>
   17b58:	ldrb	r3, [r3]
   17b5c:	cmp	r3, #0
   17b60:	bne	17b74 <__assert_fail@plt+0x6760>
   17b64:	movw	r0, #4201	; 0x1069
   17b68:	movt	r0, #3
   17b6c:	add	sp, sp, #12
   17b70:	pop	{pc}		; (ldr pc, [sp], #4)
   17b74:	mov	r2, #10
   17b78:	add	r1, sp, #4
   17b7c:	bl	110d8 <strtol@plt>
   17b80:	ldr	r2, [sp, #4]
   17b84:	movw	r3, #4201	; 0x1069
   17b88:	movt	r3, #3
   17b8c:	ldrb	r2, [r2]
   17b90:	cmp	r2, #0
   17b94:	movne	r0, r3
   17b98:	add	sp, sp, #12
   17b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17ba0:	strd	r4, [sp, #-16]!
   17ba4:	subs	r4, r0, #0
   17ba8:	str	r6, [sp, #8]
   17bac:	str	lr, [sp, #12]
   17bb0:	beq	17c48 <__assert_fail@plt+0x6834>
   17bb4:	mov	r1, #47	; 0x2f
   17bb8:	bl	11384 <strrchr@plt>
   17bbc:	subs	r5, r0, #0
   17bc0:	beq	17c20 <__assert_fail@plt+0x680c>
   17bc4:	add	r6, r5, #1
   17bc8:	sub	r3, r6, r4
   17bcc:	cmp	r3, #6
   17bd0:	ble	17c20 <__assert_fail@plt+0x680c>
   17bd4:	movw	r1, #54772	; 0xd5f4
   17bd8:	movt	r1, #1
   17bdc:	mov	r2, #7
   17be0:	sub	r0, r5, #6
   17be4:	bl	113e4 <strncmp@plt>
   17be8:	cmp	r0, #0
   17bec:	bne	17c20 <__assert_fail@plt+0x680c>
   17bf0:	movw	r1, #54780	; 0xd5fc
   17bf4:	movt	r1, #1
   17bf8:	mov	r2, #3
   17bfc:	mov	r0, r6
   17c00:	bl	113e4 <strncmp@plt>
   17c04:	cmp	r0, #0
   17c08:	movne	r4, r6
   17c0c:	bne	17c20 <__assert_fail@plt+0x680c>
   17c10:	add	r4, r5, #4
   17c14:	movw	r3, #57776	; 0xe1b0
   17c18:	movt	r3, #2
   17c1c:	str	r4, [r3]
   17c20:	movw	r2, #57836	; 0xe1ec
   17c24:	movt	r2, #2
   17c28:	ldr	r6, [sp, #8]
   17c2c:	movw	r3, #57780	; 0xe1b4
   17c30:	movt	r3, #2
   17c34:	str	r4, [r2]
   17c38:	str	r4, [r3]
   17c3c:	ldrd	r4, [sp]
   17c40:	add	sp, sp, #12
   17c44:	pop	{pc}		; (ldr pc, [sp], #4)
   17c48:	movw	r3, #57792	; 0xe1c0
   17c4c:	movt	r3, #2
   17c50:	movw	r0, #54716	; 0xd5bc
   17c54:	movt	r0, #1
   17c58:	ldr	r3, [r3]
   17c5c:	mov	r2, #55	; 0x37
   17c60:	mov	r1, #1
   17c64:	bl	111e0 <fwrite@plt>
   17c68:	bl	113f0 <abort@plt>
   17c6c:	strd	r4, [sp, #-16]!
   17c70:	mov	r4, #0
   17c74:	mov	r5, #0
   17c78:	cmp	r1, #10
   17c7c:	str	r6, [sp, #8]
   17c80:	strd	r4, [r0]
   17c84:	strd	r4, [r0, #8]
   17c88:	str	lr, [sp, #12]
   17c8c:	strd	r4, [r0, #16]
   17c90:	strd	r4, [r0, #24]
   17c94:	strd	r4, [r0, #32]
   17c98:	strd	r4, [r0, #40]	; 0x28
   17c9c:	beq	17cb4 <__assert_fail@plt+0x68a0>
   17ca0:	ldrd	r4, [sp]
   17ca4:	str	r1, [r0]
   17ca8:	ldr	r6, [sp, #8]
   17cac:	add	sp, sp, #12
   17cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb4:	bl	113f0 <abort@plt>
   17cb8:	mov	r2, #5
   17cbc:	strd	r4, [sp, #-16]!
   17cc0:	mov	r5, r0
   17cc4:	str	r6, [sp, #8]
   17cc8:	mov	r6, r1
   17ccc:	mov	r1, r0
   17cd0:	mov	r0, #0
   17cd4:	str	lr, [sp, #12]
   17cd8:	bl	11174 <dcgettext@plt>
   17cdc:	cmp	r5, r0
   17ce0:	mov	r4, r0
   17ce4:	beq	17cfc <__assert_fail@plt+0x68e8>
   17ce8:	mov	r0, r4
   17cec:	ldrd	r4, [sp]
   17cf0:	ldr	r6, [sp, #8]
   17cf4:	add	sp, sp, #12
   17cf8:	pop	{pc}		; (ldr pc, [sp], #4)
   17cfc:	bl	1bb1c <__assert_fail@plt+0xa708>
   17d00:	ldrb	r3, [r0]
   17d04:	bic	r3, r3, #32
   17d08:	cmp	r3, #85	; 0x55
   17d0c:	bne	17d74 <__assert_fail@plt+0x6960>
   17d10:	ldrb	r3, [r0, #1]
   17d14:	bic	r3, r3, #32
   17d18:	cmp	r3, #84	; 0x54
   17d1c:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d20:	ldrb	r3, [r0, #2]
   17d24:	bic	r3, r3, #32
   17d28:	cmp	r3, #70	; 0x46
   17d2c:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d30:	ldrb	r3, [r0, #3]
   17d34:	cmp	r3, #45	; 0x2d
   17d38:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d3c:	ldrb	r3, [r0, #4]
   17d40:	cmp	r3, #56	; 0x38
   17d44:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d48:	ldrb	r3, [r0, #5]
   17d4c:	cmp	r3, #0
   17d50:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d54:	ldrb	r2, [r4]
   17d58:	movw	r3, #54872	; 0xd658
   17d5c:	movt	r3, #1
   17d60:	movw	r4, #54884	; 0xd664
   17d64:	movt	r4, #1
   17d68:	cmp	r2, #96	; 0x60
   17d6c:	movne	r4, r3
   17d70:	b	17ce8 <__assert_fail@plt+0x68d4>
   17d74:	cmp	r3, #71	; 0x47
   17d78:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d7c:	ldrb	r3, [r0, #1]
   17d80:	bic	r3, r3, #32
   17d84:	cmp	r3, #66	; 0x42
   17d88:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d8c:	ldrb	r3, [r0, #2]
   17d90:	cmp	r3, #49	; 0x31
   17d94:	bne	17df4 <__assert_fail@plt+0x69e0>
   17d98:	ldrb	r3, [r0, #3]
   17d9c:	cmp	r3, #56	; 0x38
   17da0:	bne	17df4 <__assert_fail@plt+0x69e0>
   17da4:	ldrb	r3, [r0, #4]
   17da8:	cmp	r3, #48	; 0x30
   17dac:	bne	17df4 <__assert_fail@plt+0x69e0>
   17db0:	ldrb	r3, [r0, #5]
   17db4:	cmp	r3, #51	; 0x33
   17db8:	bne	17df4 <__assert_fail@plt+0x69e0>
   17dbc:	ldrb	r3, [r0, #6]
   17dc0:	cmp	r3, #48	; 0x30
   17dc4:	bne	17df4 <__assert_fail@plt+0x69e0>
   17dc8:	ldrb	r3, [r0, #7]
   17dcc:	cmp	r3, #0
   17dd0:	bne	17df4 <__assert_fail@plt+0x69e0>
   17dd4:	ldrb	r2, [r4]
   17dd8:	movw	r3, #54876	; 0xd65c
   17ddc:	movt	r3, #1
   17de0:	movw	r4, #54880	; 0xd660
   17de4:	movt	r4, #1
   17de8:	cmp	r2, #96	; 0x60
   17dec:	movne	r4, r3
   17df0:	b	17ce8 <__assert_fail@plt+0x68d4>
   17df4:	movw	r3, #54888	; 0xd668
   17df8:	movt	r3, #1
   17dfc:	cmp	r6, #9
   17e00:	movw	r4, #54868	; 0xd654
   17e04:	movt	r4, #1
   17e08:	movne	r4, r3
   17e0c:	b	17ce8 <__assert_fail@plt+0x68d4>
   17e10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e14:	strd	r6, [sp, #8]
   17e18:	strd	r8, [sp, #16]
   17e1c:	strd	sl, [sp, #24]
   17e20:	mov	fp, r0
   17e24:	mov	sl, r1
   17e28:	str	lr, [sp, #32]
   17e2c:	sub	sp, sp, #116	; 0x74
   17e30:	ldr	r8, [sp, #152]	; 0x98
   17e34:	str	r3, [sp, #28]
   17e38:	ldr	r3, [sp, #156]	; 0x9c
   17e3c:	str	r2, [sp, #32]
   17e40:	and	r4, r3, #2
   17e44:	ubfx	r3, r3, #1, #1
   17e48:	str	r3, [sp, #44]	; 0x2c
   17e4c:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   17e50:	str	r0, [sp, #64]	; 0x40
   17e54:	cmp	r8, #10
   17e58:	ldrls	pc, [pc, r8, lsl #2]
   17e5c:	b	195cc <__assert_fail@plt+0x81b8>
   17e60:	andeq	r8, r1, r4, ror #4
   17e64:	andeq	r8, r1, r0, lsl #6
   17e68:	ldrdeq	r8, [r1], -ip
   17e6c:	andeq	r8, r1, r0, lsr #6
   17e70:	andeq	r8, r1, r8, asr #3
   17e74:	andeq	r8, r1, r4, lsl r2
   17e78:	muleq	r1, r4, r2
   17e7c:	ldrdeq	r8, [r1], -r0
   17e80:	andeq	r7, r1, ip, lsl #29
   17e84:	andeq	r7, r1, ip, lsl #29
   17e88:	andeq	r7, r1, ip, lsl #29
   17e8c:	cmp	r8, #10
   17e90:	beq	17ebc <__assert_fail@plt+0x6aa8>
   17e94:	mov	r1, r8
   17e98:	movw	r0, #54892	; 0xd66c
   17e9c:	movt	r0, #1
   17ea0:	bl	17cb8 <__assert_fail@plt+0x68a4>
   17ea4:	mov	r1, r8
   17ea8:	str	r0, [sp, #164]	; 0xa4
   17eac:	movw	r0, #54888	; 0xd668
   17eb0:	movt	r0, #1
   17eb4:	bl	17cb8 <__assert_fail@plt+0x68a4>
   17eb8:	str	r0, [sp, #168]	; 0xa8
   17ebc:	cmp	r4, #0
   17ec0:	movne	r4, #0
   17ec4:	beq	192a8 <__assert_fail@plt+0x7e94>
   17ec8:	mov	r3, #1
   17ecc:	mov	r5, #0
   17ed0:	ldr	r0, [sp, #168]	; 0xa8
   17ed4:	str	r3, [sp, #36]	; 0x24
   17ed8:	str	r3, [sp, #40]	; 0x28
   17edc:	str	r5, [sp, #68]	; 0x44
   17ee0:	bl	112a0 <strlen@plt>
   17ee4:	ldr	r3, [sp, #168]	; 0xa8
   17ee8:	str	r5, [sp, #48]	; 0x30
   17eec:	str	r0, [sp, #56]	; 0x38
   17ef0:	str	r3, [sp, #60]	; 0x3c
   17ef4:	str	r5, [sp, #72]	; 0x48
   17ef8:	str	r8, [sp, #152]	; 0x98
   17efc:	mov	r8, fp
   17f00:	mov	r9, #0
   17f04:	ldr	fp, [sp, #152]	; 0x98
   17f08:	ldr	r3, [sp, #28]
   17f0c:	cmn	r3, #1
   17f10:	beq	18470 <__assert_fail@plt+0x705c>
   17f14:	ldr	r3, [sp, #28]
   17f18:	subs	r6, r3, r9
   17f1c:	movne	r6, #1
   17f20:	cmp	r6, #0
   17f24:	beq	18488 <__assert_fail@plt+0x7074>
   17f28:	ldr	r0, [sp, #32]
   17f2c:	ldr	r7, [sp, #40]	; 0x28
   17f30:	add	r3, r0, r9
   17f34:	cmp	fp, #2
   17f38:	moveq	r7, #0
   17f3c:	andne	r7, r7, #1
   17f40:	str	r3, [sp, #52]	; 0x34
   17f44:	cmp	r7, #0
   17f48:	beq	18924 <__assert_fail@plt+0x7510>
   17f4c:	ldr	r2, [sp, #56]	; 0x38
   17f50:	cmp	r2, #0
   17f54:	beq	18bc0 <__assert_fail@plt+0x77ac>
   17f58:	ldr	r1, [sp, #28]
   17f5c:	cmp	r2, #1
   17f60:	mov	r3, r2
   17f64:	movls	r3, #0
   17f68:	movhi	r3, #1
   17f6c:	add	r5, r9, r2
   17f70:	cmn	r1, #1
   17f74:	movne	r3, #0
   17f78:	cmp	r3, #0
   17f7c:	beq	17f88 <__assert_fail@plt+0x6b74>
   17f80:	bl	112a0 <strlen@plt>
   17f84:	str	r0, [sp, #28]
   17f88:	ldr	r3, [sp, #28]
   17f8c:	cmp	r5, r3
   17f90:	bhi	18bc0 <__assert_fail@plt+0x77ac>
   17f94:	ldr	r0, [sp, #52]	; 0x34
   17f98:	ldr	r2, [sp, #56]	; 0x38
   17f9c:	ldr	r1, [sp, #60]	; 0x3c
   17fa0:	bl	1115c <memcmp@plt>
   17fa4:	cmp	r0, #0
   17fa8:	bne	18bc0 <__assert_fail@plt+0x77ac>
   17fac:	ldr	r3, [sp, #44]	; 0x2c
   17fb0:	cmp	r3, #0
   17fb4:	bne	194f0 <__assert_fail@plt+0x80dc>
   17fb8:	ldr	r3, [sp, #52]	; 0x34
   17fbc:	ldrb	r5, [r3]
   17fc0:	cmp	r5, #126	; 0x7e
   17fc4:	ldrls	pc, [pc, r5, lsl #2]
   17fc8:	b	18880 <__assert_fail@plt+0x746c>
   17fcc:	andeq	r8, r1, r4, lsl #15
   17fd0:	andeq	r8, r1, r0, lsl #17
   17fd4:	andeq	r8, r1, r0, lsl #17
   17fd8:	andeq	r8, r1, r0, lsl #17
   17fdc:	andeq	r8, r1, r0, lsl #17
   17fe0:	andeq	r8, r1, r0, lsl #17
   17fe4:	andeq	r8, r1, r0, lsl #17
   17fe8:	andeq	r8, r1, r8, asr r7
   17fec:	andeq	r8, r1, r0, asr r7
   17ff0:	muleq	r1, r8, r6
   17ff4:	andeq	r8, r1, r4, asr #14
   17ff8:	muleq	r1, r0, r6
   17ffc:	andeq	r8, r1, r0, lsr #14
   18000:	andeq	r8, r1, ip, ror #14
   18004:	andeq	r8, r1, r0, lsl #17
   18008:	andeq	r8, r1, r0, lsl #17
   1800c:	andeq	r8, r1, r0, lsl #17
   18010:	andeq	r8, r1, r0, lsl #17
   18014:	andeq	r8, r1, r0, lsl #17
   18018:	andeq	r8, r1, r0, lsl #17
   1801c:	andeq	r8, r1, r0, lsl #17
   18020:	andeq	r8, r1, r0, lsl #17
   18024:	andeq	r8, r1, r0, lsl #17
   18028:	andeq	r8, r1, r0, lsl #17
   1802c:	andeq	r8, r1, r0, lsl #17
   18030:	andeq	r8, r1, r0, lsl #17
   18034:	andeq	r8, r1, r0, lsl #17
   18038:	andeq	r8, r1, r0, lsl #17
   1803c:	andeq	r8, r1, r0, lsl #17
   18040:	andeq	r8, r1, r0, lsl #17
   18044:	andeq	r8, r1, r0, lsl #17
   18048:	andeq	r8, r1, r0, lsl #17
   1804c:	andeq	r8, r1, ip, asr r8
   18050:	andeq	r8, r1, r4, ror #14
   18054:	andeq	r8, r1, r4, ror #14
   18058:	andeq	r8, r1, r0, asr #16
   1805c:	andeq	r8, r1, r4, ror #14
   18060:	andeq	r8, r1, r4, ror r8
   18064:	andeq	r8, r1, r4, ror #14
   18068:	andeq	r8, r1, r0, asr #11
   1806c:	andeq	r8, r1, r4, ror #14
   18070:	andeq	r8, r1, r4, ror #14
   18074:	andeq	r8, r1, r4, ror #14
   18078:	andeq	r8, r1, r4, ror r8
   1807c:	andeq	r8, r1, r4, ror r8
   18080:	andeq	r8, r1, r4, ror r8
   18084:	andeq	r8, r1, r4, ror r8
   18088:	andeq	r8, r1, r4, ror r8
   1808c:	andeq	r8, r1, r4, ror r8
   18090:	andeq	r8, r1, r4, ror r8
   18094:	andeq	r8, r1, r4, ror r8
   18098:	andeq	r8, r1, r4, ror r8
   1809c:	andeq	r8, r1, r4, ror r8
   180a0:	andeq	r8, r1, r4, ror r8
   180a4:	andeq	r8, r1, r4, ror r8
   180a8:	andeq	r8, r1, r4, ror r8
   180ac:	andeq	r8, r1, r4, ror r8
   180b0:	andeq	r8, r1, r4, ror r8
   180b4:	andeq	r8, r1, r4, ror r8
   180b8:	andeq	r8, r1, r4, ror #14
   180bc:	andeq	r8, r1, r4, ror #14
   180c0:	andeq	r8, r1, r4, ror #14
   180c4:	andeq	r8, r1, r4, ror #14
   180c8:	muleq	r1, r4, r5
   180cc:	andeq	r8, r1, r0, lsl #17
   180d0:	andeq	r8, r1, r4, ror r8
   180d4:	andeq	r8, r1, r4, ror r8
   180d8:	andeq	r8, r1, r4, ror r8
   180dc:	andeq	r8, r1, r4, ror r8
   180e0:	andeq	r8, r1, r4, ror r8
   180e4:	andeq	r8, r1, r4, ror r8
   180e8:	andeq	r8, r1, r4, ror r8
   180ec:	andeq	r8, r1, r4, ror r8
   180f0:	andeq	r8, r1, r4, ror r8
   180f4:	andeq	r8, r1, r4, ror r8
   180f8:	andeq	r8, r1, r4, ror r8
   180fc:	andeq	r8, r1, r4, ror r8
   18100:	andeq	r8, r1, r4, ror r8
   18104:	andeq	r8, r1, r4, ror r8
   18108:	andeq	r8, r1, r4, ror r8
   1810c:	andeq	r8, r1, r4, ror r8
   18110:	andeq	r8, r1, r4, ror r8
   18114:	andeq	r8, r1, r4, ror r8
   18118:	andeq	r8, r1, r4, ror r8
   1811c:	andeq	r8, r1, r4, ror r8
   18120:	andeq	r8, r1, r4, ror r8
   18124:	andeq	r8, r1, r4, ror r8
   18128:	andeq	r8, r1, r4, ror r8
   1812c:	andeq	r8, r1, r4, ror r8
   18130:	andeq	r8, r1, r4, ror r8
   18134:	andeq	r8, r1, r4, ror r8
   18138:	andeq	r8, r1, r4, ror #14
   1813c:	andeq	r8, r1, ip, lsr r5
   18140:	andeq	r8, r1, r4, ror r8
   18144:	andeq	r8, r1, r4, ror #14
   18148:	andeq	r8, r1, r4, ror r8
   1814c:	andeq	r8, r1, r4, ror #14
   18150:	andeq	r8, r1, r4, ror r8
   18154:	andeq	r8, r1, r4, ror r8
   18158:	andeq	r8, r1, r4, ror r8
   1815c:	andeq	r8, r1, r4, ror r8
   18160:	andeq	r8, r1, r4, ror r8
   18164:	andeq	r8, r1, r4, ror r8
   18168:	andeq	r8, r1, r4, ror r8
   1816c:	andeq	r8, r1, r4, ror r8
   18170:	andeq	r8, r1, r4, ror r8
   18174:	andeq	r8, r1, r4, ror r8
   18178:	andeq	r8, r1, r4, ror r8
   1817c:	andeq	r8, r1, r4, ror r8
   18180:	andeq	r8, r1, r4, ror r8
   18184:	andeq	r8, r1, r4, ror r8
   18188:	andeq	r8, r1, r4, ror r8
   1818c:	andeq	r8, r1, r4, ror r8
   18190:	andeq	r8, r1, r4, ror r8
   18194:	andeq	r8, r1, r4, ror r8
   18198:	andeq	r8, r1, r4, ror r8
   1819c:	andeq	r8, r1, r4, ror r8
   181a0:	andeq	r8, r1, r4, ror r8
   181a4:	andeq	r8, r1, r4, ror r8
   181a8:	andeq	r8, r1, r4, ror r8
   181ac:	andeq	r8, r1, r4, ror r8
   181b0:	andeq	r8, r1, r4, ror r8
   181b4:	andeq	r8, r1, r4, ror r8
   181b8:	andeq	r8, r1, r0, ror #6
   181bc:	andeq	r8, r1, r4, ror #14
   181c0:	andeq	r8, r1, r0, ror #6
   181c4:	andeq	r8, r1, r0, asr #16
   181c8:	cmp	r4, #0
   181cc:	moveq	r3, #1
   181d0:	streq	r3, [sp, #40]	; 0x28
   181d4:	beq	188e8 <__assert_fail@plt+0x74d4>
   181d8:	mov	r3, #0
   181dc:	mov	r2, #1
   181e0:	mov	r4, r3
   181e4:	str	r2, [sp, #36]	; 0x24
   181e8:	str	r2, [sp, #44]	; 0x2c
   181ec:	str	r2, [sp, #56]	; 0x38
   181f0:	str	r3, [sp, #68]	; 0x44
   181f4:	movw	r3, #54888	; 0xd668
   181f8:	movt	r3, #1
   181fc:	str	r4, [sp, #40]	; 0x28
   18200:	mov	r8, #2
   18204:	str	r4, [sp, #48]	; 0x30
   18208:	str	r3, [sp, #60]	; 0x3c
   1820c:	str	r4, [sp, #72]	; 0x48
   18210:	b	17ef8 <__assert_fail@plt+0x6ae4>
   18214:	cmp	r4, #0
   18218:	bne	19464 <__assert_fail@plt+0x8050>
   1821c:	cmp	sl, #0
   18220:	beq	19224 <__assert_fail@plt+0x7e10>
   18224:	mov	r3, #34	; 0x22
   18228:	mov	r1, r4
   1822c:	mov	r2, #1
   18230:	strb	r3, [fp]
   18234:	movw	r3, #54868	; 0xd654
   18238:	movt	r3, #1
   1823c:	mov	r4, r2
   18240:	str	r2, [sp, #36]	; 0x24
   18244:	str	r2, [sp, #40]	; 0x28
   18248:	str	r1, [sp, #44]	; 0x2c
   1824c:	str	r1, [sp, #48]	; 0x30
   18250:	str	r2, [sp, #56]	; 0x38
   18254:	str	r3, [sp, #60]	; 0x3c
   18258:	str	r1, [sp, #68]	; 0x44
   1825c:	str	r1, [sp, #72]	; 0x48
   18260:	b	17ef8 <__assert_fail@plt+0x6ae4>
   18264:	mov	r3, #0
   18268:	mov	r4, r8
   1826c:	str	r3, [sp, #40]	; 0x28
   18270:	str	r3, [sp, #44]	; 0x2c
   18274:	str	r3, [sp, #48]	; 0x30
   18278:	str	r8, [sp, #56]	; 0x38
   1827c:	str	r3, [sp, #60]	; 0x3c
   18280:	str	r3, [sp, #68]	; 0x44
   18284:	mov	r3, #1
   18288:	str	r3, [sp, #36]	; 0x24
   1828c:	str	r8, [sp, #72]	; 0x48
   18290:	b	17ef8 <__assert_fail@plt+0x6ae4>
   18294:	mov	r3, #1
   18298:	mov	r2, #0
   1829c:	mov	r4, r2
   182a0:	mov	r8, #5
   182a4:	str	r3, [sp, #36]	; 0x24
   182a8:	str	r3, [sp, #40]	; 0x28
   182ac:	str	r3, [sp, #44]	; 0x2c
   182b0:	str	r2, [sp, #48]	; 0x30
   182b4:	str	r3, [sp, #56]	; 0x38
   182b8:	movw	r3, #54868	; 0xd654
   182bc:	movt	r3, #1
   182c0:	str	r3, [sp, #60]	; 0x3c
   182c4:	str	r2, [sp, #68]	; 0x44
   182c8:	str	r2, [sp, #72]	; 0x48
   182cc:	b	17ef8 <__assert_fail@plt+0x6ae4>
   182d0:	mov	r3, #0
   182d4:	mov	r2, #1
   182d8:	mov	r4, r3
   182dc:	str	r2, [sp, #36]	; 0x24
   182e0:	str	r2, [sp, #40]	; 0x28
   182e4:	str	r3, [sp, #44]	; 0x2c
   182e8:	str	r3, [sp, #48]	; 0x30
   182ec:	str	r3, [sp, #56]	; 0x38
   182f0:	str	r3, [sp, #60]	; 0x3c
   182f4:	str	r3, [sp, #68]	; 0x44
   182f8:	str	r3, [sp, #72]	; 0x48
   182fc:	b	17ef8 <__assert_fail@plt+0x6ae4>
   18300:	mov	r2, #1
   18304:	mov	r3, #0
   18308:	mov	r4, r3
   1830c:	str	r2, [sp, #36]	; 0x24
   18310:	str	r2, [sp, #44]	; 0x2c
   18314:	str	r8, [sp, #56]	; 0x38
   18318:	str	r3, [sp, #68]	; 0x44
   1831c:	b	181f4 <__assert_fail@plt+0x6de0>
   18320:	mov	r3, #1
   18324:	mov	r2, #0
   18328:	mov	r4, r2
   1832c:	mov	r8, #2
   18330:	str	r3, [sp, #36]	; 0x24
   18334:	str	r3, [sp, #40]	; 0x28
   18338:	str	r3, [sp, #44]	; 0x2c
   1833c:	str	r2, [sp, #48]	; 0x30
   18340:	str	r3, [sp, #56]	; 0x38
   18344:	movw	r3, #54888	; 0xd668
   18348:	movt	r3, #1
   1834c:	str	r3, [sp, #60]	; 0x3c
   18350:	str	r2, [sp, #68]	; 0x44
   18354:	str	r2, [sp, #72]	; 0x48
   18358:	b	17ef8 <__assert_fail@plt+0x6ae4>
   1835c:	mov	r7, #0
   18360:	ldr	r3, [sp, #28]
   18364:	cmn	r3, #1
   18368:	beq	18e40 <__assert_fail@plt+0x7a2c>
   1836c:	ldr	r3, [sp, #28]
   18370:	subs	r2, r3, #1
   18374:	movne	r2, #1
   18378:	sub	r3, fp, #2
   1837c:	cmp	r2, #0
   18380:	clz	r3, r3
   18384:	lsr	r3, r3, #5
   18388:	bne	18394 <__assert_fail@plt+0x6f80>
   1838c:	cmp	r9, #0
   18390:	beq	18ba0 <__assert_fail@plt+0x778c>
   18394:	mov	r6, #0
   18398:	ldr	r2, [sp, #40]	; 0x28
   1839c:	eor	r2, r2, #1
   183a0:	orrs	r3, r3, r2
   183a4:	bne	1857c <__assert_fail@plt+0x7168>
   183a8:	ldr	r2, [sp, #160]	; 0xa0
   183ac:	cmp	r2, #0
   183b0:	beq	183d0 <__assert_fail@plt+0x6fbc>
   183b4:	ldr	r0, [sp, #160]	; 0xa0
   183b8:	ubfx	r1, r5, #5, #8
   183bc:	and	r2, r5, #31
   183c0:	ldr	r1, [r0, r1, lsl #2]
   183c4:	lsr	r2, r1, r2
   183c8:	tst	r2, #1
   183cc:	bne	183d8 <__assert_fail@plt+0x6fc4>
   183d0:	cmp	r7, #0
   183d4:	beq	18648 <__assert_fail@plt+0x7234>
   183d8:	ldr	r2, [sp, #44]	; 0x2c
   183dc:	sub	r3, fp, #2
   183e0:	clz	r3, r3
   183e4:	lsr	r3, r3, #5
   183e8:	cmp	r2, #0
   183ec:	bne	19194 <__assert_fail@plt+0x7d80>
   183f0:	ldr	r2, [sp, #48]	; 0x30
   183f4:	eor	r2, r2, #1
   183f8:	ands	r3, r3, r2
   183fc:	beq	18434 <__assert_fail@plt+0x7020>
   18400:	cmp	sl, r4
   18404:	str	r3, [sp, #48]	; 0x30
   18408:	movhi	r2, #39	; 0x27
   1840c:	strbhi	r2, [r8, r4]
   18410:	add	r2, r4, #1
   18414:	cmp	sl, r2
   18418:	movhi	r1, #36	; 0x24
   1841c:	strbhi	r1, [r8, r2]
   18420:	add	r2, r4, #2
   18424:	add	r4, r4, #3
   18428:	cmp	sl, r2
   1842c:	movhi	r1, #39	; 0x27
   18430:	strbhi	r1, [r8, r2]
   18434:	cmp	r4, sl
   18438:	add	r9, r9, #1
   1843c:	movcc	r3, #92	; 0x5c
   18440:	strbcc	r3, [r8, r4]
   18444:	add	r4, r4, #1
   18448:	cmp	r4, sl
   1844c:	ldr	r3, [sp, #36]	; 0x24
   18450:	strbcc	r5, [r8, r4]
   18454:	cmp	r6, #0
   18458:	add	r4, r4, #1
   1845c:	moveq	r3, #0
   18460:	str	r3, [sp, #36]	; 0x24
   18464:	ldr	r3, [sp, #28]
   18468:	cmn	r3, #1
   1846c:	bne	17f14 <__assert_fail@plt+0x6b00>
   18470:	ldr	r3, [sp, #32]
   18474:	ldrb	r6, [r3, r9]
   18478:	adds	r6, r6, #0
   1847c:	movne	r6, #1
   18480:	cmp	r6, #0
   18484:	bne	17f28 <__assert_fail@plt+0x6b14>
   18488:	str	fp, [sp, #152]	; 0x98
   1848c:	mov	fp, r8
   18490:	cmp	r4, #0
   18494:	ldr	r1, [sp, #44]	; 0x2c
   18498:	movne	r3, #0
   1849c:	ldr	r8, [sp, #152]	; 0x98
   184a0:	sub	r2, r8, #2
   184a4:	clz	r2, r2
   184a8:	lsr	r2, r2, #5
   184ac:	andeq	r3, r2, r1
   184b0:	cmp	r3, #0
   184b4:	bne	19570 <__assert_fail@plt+0x815c>
   184b8:	eor	r3, r1, #1
   184bc:	ands	r2, r2, r3
   184c0:	beq	1949c <__assert_fail@plt+0x8088>
   184c4:	ldr	r3, [sp, #68]	; 0x44
   184c8:	cmp	r3, #0
   184cc:	beq	194a0 <__assert_fail@plt+0x808c>
   184d0:	ldr	r3, [sp, #36]	; 0x24
   184d4:	cmp	r3, #0
   184d8:	bne	1952c <__assert_fail@plt+0x8118>
   184dc:	ldr	r3, [sp, #72]	; 0x48
   184e0:	adds	r3, r3, #0
   184e4:	movne	r3, #1
   184e8:	cmp	sl, #0
   184ec:	movne	r3, #0
   184f0:	cmp	r3, #0
   184f4:	ldreq	r2, [sp, #68]	; 0x44
   184f8:	beq	194a0 <__assert_fail@plt+0x808c>
   184fc:	ldr	r2, [sp, #72]	; 0x48
   18500:	str	r3, [sp, #68]	; 0x44
   18504:	movw	r3, #54888	; 0xd668
   18508:	movt	r3, #1
   1850c:	mov	r1, #39	; 0x27
   18510:	mov	r4, #1
   18514:	ldr	sl, [sp, #72]	; 0x48
   18518:	mov	r8, #2
   1851c:	str	r3, [sp, #60]	; 0x3c
   18520:	mov	r3, #0
   18524:	strb	r1, [fp]
   18528:	str	r3, [sp, #44]	; 0x2c
   1852c:	str	r4, [sp, #56]	; 0x38
   18530:	str	r2, [sp, #72]	; 0x48
   18534:	b	17ef8 <__assert_fail@plt+0x6ae4>
   18538:	mov	r7, #0
   1853c:	cmp	fp, #2
   18540:	beq	18e20 <__assert_fail@plt+0x7a0c>
   18544:	ldr	r2, [sp, #40]	; 0x28
   18548:	ldr	r3, [sp, #56]	; 0x38
   1854c:	ldr	r1, [sp, #44]	; 0x2c
   18550:	cmp	r3, #0
   18554:	moveq	r3, #0
   18558:	andne	r3, r2, r1
   1855c:	cmp	r3, #0
   18560:	moveq	r5, #92	; 0x5c
   18564:	moveq	r3, r5
   18568:	bne	18e2c <__assert_fail@plt+0x7a18>
   1856c:	ldr	r2, [sp, #40]	; 0x28
   18570:	cmp	r2, #0
   18574:	bne	19268 <__assert_fail@plt+0x7e54>
   18578:	mov	r6, #0
   1857c:	ldr	r3, [sp, #44]	; 0x2c
   18580:	cmp	r3, #0
   18584:	beq	18e18 <__assert_fail@plt+0x7a04>
   18588:	mov	r3, #0
   1858c:	b	183a8 <__assert_fail@plt+0x6f94>
   18590:	mov	r7, #0
   18594:	cmp	fp, #2
   18598:	beq	18e90 <__assert_fail@plt+0x7a7c>
   1859c:	cmp	fp, #5
   185a0:	beq	18e54 <__assert_fail@plt+0x7a40>
   185a4:	sub	r3, fp, #2
   185a8:	mov	r6, #0
   185ac:	clz	r3, r3
   185b0:	mov	r5, #63	; 0x3f
   185b4:	lsr	r3, r3, #5
   185b8:	b	18398 <__assert_fail@plt+0x6f84>
   185bc:	mov	r7, #0
   185c0:	cmp	fp, #2
   185c4:	movne	r3, #0
   185c8:	movne	r5, #39	; 0x27
   185cc:	strne	r6, [sp, #68]	; 0x44
   185d0:	bne	18398 <__assert_fail@plt+0x6f84>
   185d4:	ldr	r3, [sp, #44]	; 0x2c
   185d8:	cmp	r3, #0
   185dc:	bne	19298 <__assert_fail@plt+0x7e84>
   185e0:	ldr	r3, [sp, #72]	; 0x48
   185e4:	cmp	sl, #0
   185e8:	clz	r3, r3
   185ec:	lsr	r3, r3, #5
   185f0:	moveq	r3, #0
   185f4:	cmp	r3, #0
   185f8:	bne	191c4 <__assert_fail@plt+0x7db0>
   185fc:	cmp	sl, r4
   18600:	movhi	r3, #39	; 0x27
   18604:	strbhi	r3, [r8, r4]
   18608:	add	r3, r4, #1
   1860c:	cmp	sl, r3
   18610:	movhi	r2, #92	; 0x5c
   18614:	strbhi	r2, [r8, r3]
   18618:	add	r3, r4, #2
   1861c:	cmp	sl, r3
   18620:	bls	1862c <__assert_fail@plt+0x7218>
   18624:	mov	r2, #39	; 0x27
   18628:	strb	r2, [r8, r3]
   1862c:	mov	r3, #0
   18630:	cmp	r7, #0
   18634:	add	r4, r4, #3
   18638:	mov	r5, #39	; 0x27
   1863c:	str	r3, [sp, #48]	; 0x30
   18640:	str	r6, [sp, #68]	; 0x44
   18644:	bne	183d8 <__assert_fail@plt+0x6fc4>
   18648:	ldr	r2, [sp, #48]	; 0x30
   1864c:	eor	r3, r3, #1
   18650:	add	r9, r9, #1
   18654:	and	r3, r3, r2
   18658:	uxtb	r3, r3
   1865c:	cmp	r3, #0
   18660:	beq	18448 <__assert_fail@plt+0x7034>
   18664:	cmp	sl, r4
   18668:	movhi	r3, #39	; 0x27
   1866c:	strbhi	r3, [r8, r4]
   18670:	add	r3, r4, #1
   18674:	add	r4, r4, #2
   18678:	cmp	sl, r3
   1867c:	movhi	r2, #39	; 0x27
   18680:	strbhi	r2, [r8, r3]
   18684:	mov	r3, #0
   18688:	str	r3, [sp, #48]	; 0x30
   1868c:	b	18448 <__assert_fail@plt+0x7034>
   18690:	mov	r3, #118	; 0x76
   18694:	b	1856c <__assert_fail@plt+0x7158>
   18698:	mov	r3, #116	; 0x74
   1869c:	ldr	r2, [sp, #44]	; 0x2c
   186a0:	cmp	fp, #2
   186a4:	movne	r2, #0
   186a8:	andeq	r2, r2, #1
   186ac:	cmp	r2, #0
   186b0:	beq	1856c <__assert_fail@plt+0x7158>
   186b4:	mov	fp, r8
   186b8:	mov	r8, #2
   186bc:	ldr	r3, [sp, #40]	; 0x28
   186c0:	cmp	r3, #0
   186c4:	movne	r8, #4
   186c8:	mov	lr, #0
   186cc:	mov	r0, fp
   186d0:	ldr	r2, [sp, #32]
   186d4:	ldr	r3, [sp, #156]	; 0x9c
   186d8:	ldr	r1, [sp, #164]	; 0xa4
   186dc:	bic	ip, r3, #2
   186e0:	ldr	r3, [sp, #28]
   186e4:	stm	sp, {r8, ip, lr}
   186e8:	ldr	ip, [sp, #168]	; 0xa8
   186ec:	str	r1, [sp, #12]
   186f0:	mov	r1, sl
   186f4:	str	ip, [sp, #16]
   186f8:	bl	17e10 <__assert_fail@plt+0x69fc>
   186fc:	mov	r4, r0
   18700:	mov	r0, r4
   18704:	add	sp, sp, #116	; 0x74
   18708:	ldrd	r4, [sp]
   1870c:	ldrd	r6, [sp, #8]
   18710:	ldrd	r8, [sp, #16]
   18714:	ldrd	sl, [sp, #24]
   18718:	add	sp, sp, #32
   1871c:	pop	{pc}		; (ldr pc, [sp], #4)
   18720:	mov	r5, #102	; 0x66
   18724:	ldr	r2, [sp, #44]	; 0x2c
   18728:	sub	r3, fp, #2
   1872c:	clz	r3, r3
   18730:	lsr	r3, r3, #5
   18734:	cmp	r2, #0
   18738:	bne	19194 <__assert_fail@plt+0x7d80>
   1873c:	mov	r6, r2
   18740:	b	18434 <__assert_fail@plt+0x7020>
   18744:	mov	r5, #110	; 0x6e
   18748:	mov	r6, #0
   1874c:	b	183d8 <__assert_fail@plt+0x6fc4>
   18750:	mov	r5, #98	; 0x62
   18754:	b	18724 <__assert_fail@plt+0x7310>
   18758:	mov	r5, #97	; 0x61
   1875c:	b	18724 <__assert_fail@plt+0x7310>
   18760:	mov	r7, #0
   18764:	mov	r6, #0
   18768:	b	18588 <__assert_fail@plt+0x7174>
   1876c:	mov	r5, #114	; 0x72
   18770:	b	18748 <__assert_fail@plt+0x7334>
   18774:	ldr	r3, [sp, #44]	; 0x2c
   18778:	cmp	r3, #0
   1877c:	bne	1950c <__assert_fail@plt+0x80f8>
   18780:	mov	r7, r3
   18784:	ldr	r3, [sp, #48]	; 0x30
   18788:	sub	r2, fp, #2
   1878c:	clz	r2, r2
   18790:	lsr	r2, r2, #5
   18794:	eor	r3, r3, #1
   18798:	ands	r3, r2, r3
   1879c:	beq	191b0 <__assert_fail@plt+0x7d9c>
   187a0:	cmp	sl, r4
   187a4:	movhi	r1, #39	; 0x27
   187a8:	strbhi	r1, [r8, r4]
   187ac:	add	r1, r4, #1
   187b0:	cmp	sl, r1
   187b4:	movhi	r0, #36	; 0x24
   187b8:	strbhi	r0, [r8, r1]
   187bc:	add	r1, r4, #2
   187c0:	cmp	sl, r1
   187c4:	movhi	r0, #39	; 0x27
   187c8:	strbhi	r0, [r8, r1]
   187cc:	add	r1, r4, #3
   187d0:	cmp	sl, r1
   187d4:	bls	19208 <__assert_fail@plt+0x7df4>
   187d8:	mov	r4, r1
   187dc:	mov	r1, #92	; 0x5c
   187e0:	mov	r0, r4
   187e4:	str	r3, [sp, #48]	; 0x30
   187e8:	strb	r1, [r8, r4]
   187ec:	cmp	fp, #2
   187f0:	add	r4, r4, #1
   187f4:	beq	19258 <__assert_fail@plt+0x7e44>
   187f8:	ldr	r1, [sp, #28]
   187fc:	add	r3, r9, #1
   18800:	cmp	r3, r1
   18804:	bcs	1881c <__assert_fail@plt+0x7408>
   18808:	ldr	r1, [sp, #32]
   1880c:	ldrb	r3, [r1, r3]
   18810:	sub	r3, r3, #48	; 0x30
   18814:	cmp	r3, #9
   18818:	bls	19270 <__assert_fail@plt+0x7e5c>
   1881c:	mov	r5, #48	; 0x30
   18820:	ldr	r3, [sp, #40]	; 0x28
   18824:	eor	r3, r3, #1
   18828:	orrs	r2, r2, r3
   1882c:	mov	r3, r6
   18830:	moveq	r6, r2
   18834:	beq	183a8 <__assert_fail@plt+0x6f94>
   18838:	mov	r6, #0
   1883c:	b	183d0 <__assert_fail@plt+0x6fbc>
   18840:	cmp	r9, #0
   18844:	mov	r2, r7
   18848:	bne	18de8 <__assert_fail@plt+0x79d4>
   1884c:	mov	r6, r7
   18850:	mov	r3, r9
   18854:	mov	r7, r2
   18858:	b	18398 <__assert_fail@plt+0x6f84>
   1885c:	mov	r2, r7
   18860:	mov	r6, r7
   18864:	mov	r3, #0
   18868:	mov	r7, r2
   1886c:	mov	r5, #32
   18870:	b	18398 <__assert_fail@plt+0x6f84>
   18874:	mov	r6, r7
   18878:	b	18588 <__assert_fail@plt+0x7174>
   1887c:	mov	r7, #0
   18880:	ldr	r3, [sp, #64]	; 0x40
   18884:	cmp	r3, #1
   18888:	bne	18ea8 <__assert_fail@plt+0x7a94>
   1888c:	bl	11288 <__ctype_b_loc@plt>
   18890:	ldr	r2, [r0]
   18894:	sxth	r3, r5
   18898:	lsl	r3, r3, #1
   1889c:	ldr	r1, [sp, #64]	; 0x40
   188a0:	ldrh	r3, [r2, r3]
   188a4:	mov	ip, r1
   188a8:	and	r3, r3, #16384	; 0x4000
   188ac:	cmp	r3, #0
   188b0:	ldr	r3, [sp, #40]	; 0x28
   188b4:	movne	r6, #1
   188b8:	moveq	r6, #0
   188bc:	movne	r2, #0
   188c0:	andeq	r2, r3, #1
   188c4:	cmp	r2, #0
   188c8:	bne	191f0 <__assert_fail@plt+0x7ddc>
   188cc:	sub	r3, fp, #2
   188d0:	clz	r3, r3
   188d4:	lsr	r3, r3, #5
   188d8:	b	18398 <__assert_fail@plt+0x6f84>
   188dc:	cmp	r4, #0
   188e0:	bne	19580 <__assert_fail@plt+0x816c>
   188e4:	str	r4, [sp, #40]	; 0x28
   188e8:	cmp	sl, #0
   188ec:	bne	195b0 <__assert_fail@plt+0x819c>
   188f0:	mov	r3, #1
   188f4:	movw	r2, #54888	; 0xd668
   188f8:	movt	r2, #1
   188fc:	mov	r4, r3
   18900:	mov	r8, #2
   18904:	str	r3, [sp, #36]	; 0x24
   18908:	str	sl, [sp, #44]	; 0x2c
   1890c:	str	sl, [sp, #48]	; 0x30
   18910:	str	r3, [sp, #56]	; 0x38
   18914:	str	r2, [sp, #60]	; 0x3c
   18918:	str	sl, [sp, #68]	; 0x44
   1891c:	str	sl, [sp, #72]	; 0x48
   18920:	b	17ef8 <__assert_fail@plt+0x6ae4>
   18924:	ldr	r3, [sp, #32]
   18928:	ldrb	r5, [r3, r9]
   1892c:	cmp	r5, #126	; 0x7e
   18930:	ldrls	pc, [pc, r5, lsl #2]
   18934:	b	18880 <__assert_fail@plt+0x746c>
   18938:	andeq	r8, r1, ip, asr fp
   1893c:	andeq	r8, r1, r0, lsl #17
   18940:	andeq	r8, r1, r0, lsl #17
   18944:	andeq	r8, r1, r0, lsl #17
   18948:	andeq	r8, r1, r0, lsl #17
   1894c:	andeq	r8, r1, r0, lsl #17
   18950:	andeq	r8, r1, r0, lsl #17
   18954:	andeq	r8, r1, r4, asr fp
   18958:	andeq	r8, r1, ip, asr #22
   1895c:	muleq	r1, r8, r6
   18960:	andeq	r8, r1, r4, asr #22
   18964:	muleq	r1, r0, r6
   18968:	andeq	r8, r1, ip, lsr fp
   1896c:	andeq	r8, r1, r4, lsr fp
   18970:	andeq	r8, r1, r0, lsl #17
   18974:	andeq	r8, r1, r0, lsl #17
   18978:	andeq	r8, r1, r0, lsl #17
   1897c:	andeq	r8, r1, r0, lsl #17
   18980:	andeq	r8, r1, r0, lsl #17
   18984:	andeq	r8, r1, r0, lsl #17
   18988:	andeq	r8, r1, r0, lsl #17
   1898c:	andeq	r8, r1, r0, lsl #17
   18990:	andeq	r8, r1, r0, lsl #17
   18994:	andeq	r8, r1, r0, lsl #17
   18998:	andeq	r8, r1, r0, lsl #17
   1899c:	andeq	r8, r1, r0, lsl #17
   189a0:	andeq	r8, r1, r0, lsl #17
   189a4:	andeq	r8, r1, r0, lsl #17
   189a8:	andeq	r8, r1, r0, lsl #17
   189ac:	andeq	r8, r1, r0, lsl #17
   189b0:	andeq	r8, r1, r0, lsl #17
   189b4:	andeq	r8, r1, r0, lsl #17
   189b8:			; <UNDEFINED> instruction: 0x00018bb0
   189bc:	muleq	r1, r0, fp
   189c0:	muleq	r1, r0, fp
   189c4:	andeq	r8, r1, r0, lsl #23
   189c8:	muleq	r1, r0, fp
   189cc:	andeq	r8, r1, ip, asr #17
   189d0:	muleq	r1, r0, fp
   189d4:	andeq	r8, r1, r0, asr #11
   189d8:	muleq	r1, r0, fp
   189dc:	muleq	r1, r0, fp
   189e0:	muleq	r1, r0, fp
   189e4:	andeq	r8, r1, ip, asr #17
   189e8:	andeq	r8, r1, ip, asr #17
   189ec:	andeq	r8, r1, ip, asr #17
   189f0:	andeq	r8, r1, ip, asr #17
   189f4:	andeq	r8, r1, ip, asr #17
   189f8:	andeq	r8, r1, ip, asr #17
   189fc:	andeq	r8, r1, ip, asr #17
   18a00:	andeq	r8, r1, ip, asr #17
   18a04:	andeq	r8, r1, ip, asr #17
   18a08:	andeq	r8, r1, ip, asr #17
   18a0c:	andeq	r8, r1, ip, asr #17
   18a10:	andeq	r8, r1, ip, asr #17
   18a14:	andeq	r8, r1, ip, asr #17
   18a18:	andeq	r8, r1, ip, asr #17
   18a1c:	andeq	r8, r1, ip, asr #17
   18a20:	andeq	r8, r1, ip, asr #17
   18a24:	muleq	r1, r0, fp
   18a28:	muleq	r1, r0, fp
   18a2c:	muleq	r1, r0, fp
   18a30:	muleq	r1, r0, fp
   18a34:	muleq	r1, r4, r5
   18a38:	andeq	r8, r1, r0, lsl #17
   18a3c:	andeq	r8, r1, ip, asr #17
   18a40:	andeq	r8, r1, ip, asr #17
   18a44:	andeq	r8, r1, ip, asr #17
   18a48:	andeq	r8, r1, ip, asr #17
   18a4c:	andeq	r8, r1, ip, asr #17
   18a50:	andeq	r8, r1, ip, asr #17
   18a54:	andeq	r8, r1, ip, asr #17
   18a58:	andeq	r8, r1, ip, asr #17
   18a5c:	andeq	r8, r1, ip, asr #17
   18a60:	andeq	r8, r1, ip, asr #17
   18a64:	andeq	r8, r1, ip, asr #17
   18a68:	andeq	r8, r1, ip, asr #17
   18a6c:	andeq	r8, r1, ip, asr #17
   18a70:	andeq	r8, r1, ip, asr #17
   18a74:	andeq	r8, r1, ip, asr #17
   18a78:	andeq	r8, r1, ip, asr #17
   18a7c:	andeq	r8, r1, ip, asr #17
   18a80:	andeq	r8, r1, ip, asr #17
   18a84:	andeq	r8, r1, ip, asr #17
   18a88:	andeq	r8, r1, ip, asr #17
   18a8c:	andeq	r8, r1, ip, asr #17
   18a90:	andeq	r8, r1, ip, asr #17
   18a94:	andeq	r8, r1, ip, asr #17
   18a98:	andeq	r8, r1, ip, asr #17
   18a9c:	andeq	r8, r1, ip, asr #17
   18aa0:	andeq	r8, r1, ip, asr #17
   18aa4:	muleq	r1, r0, fp
   18aa8:	andeq	r8, r1, ip, lsr r5
   18aac:	andeq	r8, r1, ip, asr #17
   18ab0:	muleq	r1, r0, fp
   18ab4:	andeq	r8, r1, ip, asr #17
   18ab8:	muleq	r1, r0, fp
   18abc:	andeq	r8, r1, ip, asr #17
   18ac0:	andeq	r8, r1, ip, asr #17
   18ac4:	andeq	r8, r1, ip, asr #17
   18ac8:	andeq	r8, r1, ip, asr #17
   18acc:	andeq	r8, r1, ip, asr #17
   18ad0:	andeq	r8, r1, ip, asr #17
   18ad4:	andeq	r8, r1, ip, asr #17
   18ad8:	andeq	r8, r1, ip, asr #17
   18adc:	andeq	r8, r1, ip, asr #17
   18ae0:	andeq	r8, r1, ip, asr #17
   18ae4:	andeq	r8, r1, ip, asr #17
   18ae8:	andeq	r8, r1, ip, asr #17
   18aec:	andeq	r8, r1, ip, asr #17
   18af0:	andeq	r8, r1, ip, asr #17
   18af4:	andeq	r8, r1, ip, asr #17
   18af8:	andeq	r8, r1, ip, asr #17
   18afc:	andeq	r8, r1, ip, asr #17
   18b00:	andeq	r8, r1, ip, asr #17
   18b04:	andeq	r8, r1, ip, asr #17
   18b08:	andeq	r8, r1, ip, asr #17
   18b0c:	andeq	r8, r1, ip, asr #17
   18b10:	andeq	r8, r1, ip, asr #17
   18b14:	andeq	r8, r1, ip, asr #17
   18b18:	andeq	r8, r1, ip, asr #17
   18b1c:	andeq	r8, r1, ip, asr #17
   18b20:	andeq	r8, r1, ip, asr #17
   18b24:	andeq	r8, r1, r0, ror #6
   18b28:	muleq	r1, r0, fp
   18b2c:	andeq	r8, r1, r0, ror #6
   18b30:	andeq	r8, r1, r0, lsl #23
   18b34:	mov	r3, #114	; 0x72
   18b38:	b	1869c <__assert_fail@plt+0x7288>
   18b3c:	mov	r3, #102	; 0x66
   18b40:	b	1856c <__assert_fail@plt+0x7158>
   18b44:	mov	r3, #110	; 0x6e
   18b48:	b	1869c <__assert_fail@plt+0x7288>
   18b4c:	mov	r3, #98	; 0x62
   18b50:	b	1856c <__assert_fail@plt+0x7158>
   18b54:	mov	r3, #97	; 0x61
   18b58:	b	1856c <__assert_fail@plt+0x7158>
   18b5c:	ldr	r3, [sp, #40]	; 0x28
   18b60:	cmp	r3, #0
   18b64:	bne	18774 <__assert_fail@plt+0x7360>
   18b68:	ldr	r3, [sp, #156]	; 0x9c
   18b6c:	tst	r3, #1
   18b70:	addne	r9, r9, #1
   18b74:	bne	17f08 <__assert_fail@plt+0x6af4>
   18b78:	ldr	r7, [sp, #40]	; 0x28
   18b7c:	b	18578 <__assert_fail@plt+0x7164>
   18b80:	sub	r3, fp, #2
   18b84:	clz	r3, r3
   18b88:	lsr	r3, r3, #5
   18b8c:	b	1838c <__assert_fail@plt+0x6f78>
   18b90:	sub	r3, fp, #2
   18b94:	mov	r6, #0
   18b98:	clz	r3, r3
   18b9c:	lsr	r3, r3, #5
   18ba0:	ldr	r2, [sp, #44]	; 0x2c
   18ba4:	tst	r2, r3
   18ba8:	beq	18398 <__assert_fail@plt+0x6f84>
   18bac:	b	186b4 <__assert_fail@plt+0x72a0>
   18bb0:	sub	r3, fp, #2
   18bb4:	clz	r3, r3
   18bb8:	lsr	r3, r3, #5
   18bbc:	b	18ba0 <__assert_fail@plt+0x778c>
   18bc0:	ldr	r3, [sp, #52]	; 0x34
   18bc4:	ldrb	r5, [r3]
   18bc8:	cmp	r5, #126	; 0x7e
   18bcc:	ldrls	pc, [pc, r5, lsl #2]
   18bd0:	b	1887c <__assert_fail@plt+0x7468>
   18bd4:	andeq	r8, r1, r4, ror r7
   18bd8:	andeq	r8, r1, ip, ror r8
   18bdc:	andeq	r8, r1, ip, ror r8
   18be0:	andeq	r8, r1, ip, ror r8
   18be4:	andeq	r8, r1, ip, ror r8
   18be8:	andeq	r8, r1, ip, ror r8
   18bec:	andeq	r8, r1, ip, ror r8
   18bf0:	andeq	r8, r1, r8, asr r7
   18bf4:	andeq	r8, r1, r0, asr r7
   18bf8:	andeq	r8, r1, ip, lsl #28
   18bfc:	andeq	r8, r1, r4, asr #14
   18c00:	andeq	r8, r1, r0, lsl #28
   18c04:	andeq	r8, r1, r0, lsr #14
   18c08:	andeq	r8, r1, ip, ror #14
   18c0c:	andeq	r8, r1, ip, ror r8
   18c10:	andeq	r8, r1, ip, ror r8
   18c14:	andeq	r8, r1, ip, ror r8
   18c18:	andeq	r8, r1, ip, ror r8
   18c1c:	andeq	r8, r1, ip, ror r8
   18c20:	andeq	r8, r1, ip, ror r8
   18c24:	andeq	r8, r1, ip, ror r8
   18c28:	andeq	r8, r1, ip, ror r8
   18c2c:	andeq	r8, r1, ip, ror r8
   18c30:	andeq	r8, r1, ip, ror r8
   18c34:	andeq	r8, r1, ip, ror r8
   18c38:	andeq	r8, r1, ip, ror r8
   18c3c:	andeq	r8, r1, ip, ror r8
   18c40:	andeq	r8, r1, ip, ror r8
   18c44:	andeq	r8, r1, ip, ror r8
   18c48:	andeq	r8, r1, ip, ror r8
   18c4c:	andeq	r8, r1, ip, ror r8
   18c50:	andeq	r8, r1, ip, ror r8
   18c54:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c58:	andeq	r8, r1, r0, ror #14
   18c5c:	andeq	r8, r1, r0, ror #14
   18c60:	ldrdeq	r8, [r1], -ip
   18c64:	andeq	r8, r1, r0, ror #14
   18c68:	ldrdeq	r8, [r1], -r0
   18c6c:	andeq	r8, r1, r0, ror #14
   18c70:			; <UNDEFINED> instruction: 0x000185bc
   18c74:	andeq	r8, r1, r0, ror #14
   18c78:	andeq	r8, r1, r0, ror #14
   18c7c:	andeq	r8, r1, r0, ror #14
   18c80:	ldrdeq	r8, [r1], -r0
   18c84:	ldrdeq	r8, [r1], -r0
   18c88:	ldrdeq	r8, [r1], -r0
   18c8c:	ldrdeq	r8, [r1], -r0
   18c90:	ldrdeq	r8, [r1], -r0
   18c94:	ldrdeq	r8, [r1], -r0
   18c98:	ldrdeq	r8, [r1], -r0
   18c9c:	ldrdeq	r8, [r1], -r0
   18ca0:	ldrdeq	r8, [r1], -r0
   18ca4:	ldrdeq	r8, [r1], -r0
   18ca8:	ldrdeq	r8, [r1], -r0
   18cac:	ldrdeq	r8, [r1], -r0
   18cb0:	ldrdeq	r8, [r1], -r0
   18cb4:	ldrdeq	r8, [r1], -r0
   18cb8:	ldrdeq	r8, [r1], -r0
   18cbc:	ldrdeq	r8, [r1], -r0
   18cc0:	andeq	r8, r1, r0, ror #14
   18cc4:	andeq	r8, r1, r0, ror #14
   18cc8:	andeq	r8, r1, r0, ror #14
   18ccc:	andeq	r8, r1, r0, ror #14
   18cd0:	muleq	r1, r0, r5
   18cd4:	andeq	r8, r1, ip, ror r8
   18cd8:	ldrdeq	r8, [r1], -r0
   18cdc:	ldrdeq	r8, [r1], -r0
   18ce0:	ldrdeq	r8, [r1], -r0
   18ce4:	ldrdeq	r8, [r1], -r0
   18ce8:	ldrdeq	r8, [r1], -r0
   18cec:	ldrdeq	r8, [r1], -r0
   18cf0:	ldrdeq	r8, [r1], -r0
   18cf4:	ldrdeq	r8, [r1], -r0
   18cf8:	ldrdeq	r8, [r1], -r0
   18cfc:	ldrdeq	r8, [r1], -r0
   18d00:	ldrdeq	r8, [r1], -r0
   18d04:	ldrdeq	r8, [r1], -r0
   18d08:	ldrdeq	r8, [r1], -r0
   18d0c:	ldrdeq	r8, [r1], -r0
   18d10:	ldrdeq	r8, [r1], -r0
   18d14:	ldrdeq	r8, [r1], -r0
   18d18:	ldrdeq	r8, [r1], -r0
   18d1c:	ldrdeq	r8, [r1], -r0
   18d20:	ldrdeq	r8, [r1], -r0
   18d24:	ldrdeq	r8, [r1], -r0
   18d28:	ldrdeq	r8, [r1], -r0
   18d2c:	ldrdeq	r8, [r1], -r0
   18d30:	ldrdeq	r8, [r1], -r0
   18d34:	ldrdeq	r8, [r1], -r0
   18d38:	ldrdeq	r8, [r1], -r0
   18d3c:	ldrdeq	r8, [r1], -r0
   18d40:	andeq	r8, r1, r0, ror #14
   18d44:	andeq	r8, r1, r8, lsr r5
   18d48:	ldrdeq	r8, [r1], -r0
   18d4c:	andeq	r8, r1, r0, ror #14
   18d50:	ldrdeq	r8, [r1], -r0
   18d54:	andeq	r8, r1, r0, ror #14
   18d58:	ldrdeq	r8, [r1], -r0
   18d5c:	ldrdeq	r8, [r1], -r0
   18d60:	ldrdeq	r8, [r1], -r0
   18d64:	ldrdeq	r8, [r1], -r0
   18d68:	ldrdeq	r8, [r1], -r0
   18d6c:	ldrdeq	r8, [r1], -r0
   18d70:	ldrdeq	r8, [r1], -r0
   18d74:	ldrdeq	r8, [r1], -r0
   18d78:	ldrdeq	r8, [r1], -r0
   18d7c:	ldrdeq	r8, [r1], -r0
   18d80:	ldrdeq	r8, [r1], -r0
   18d84:	ldrdeq	r8, [r1], -r0
   18d88:	ldrdeq	r8, [r1], -r0
   18d8c:	ldrdeq	r8, [r1], -r0
   18d90:	ldrdeq	r8, [r1], -r0
   18d94:	ldrdeq	r8, [r1], -r0
   18d98:	ldrdeq	r8, [r1], -r0
   18d9c:	ldrdeq	r8, [r1], -r0
   18da0:	ldrdeq	r8, [r1], -r0
   18da4:	ldrdeq	r8, [r1], -r0
   18da8:	ldrdeq	r8, [r1], -r0
   18dac:	ldrdeq	r8, [r1], -r0
   18db0:	ldrdeq	r8, [r1], -r0
   18db4:	ldrdeq	r8, [r1], -r0
   18db8:	ldrdeq	r8, [r1], -r0
   18dbc:	ldrdeq	r8, [r1], -r0
   18dc0:	andeq	r8, r1, ip, asr r3
   18dc4:	andeq	r8, r1, r0, ror #14
   18dc8:	andeq	r8, r1, ip, asr r3
   18dcc:	ldrdeq	r8, [r1], -ip
   18dd0:	mov	r6, r7
   18dd4:	mov	r7, #0
   18dd8:	b	18588 <__assert_fail@plt+0x7174>
   18ddc:	cmp	r9, #0
   18de0:	mov	r2, #0
   18de4:	beq	1884c <__assert_fail@plt+0x7438>
   18de8:	mov	r6, #0
   18dec:	mov	r7, r2
   18df0:	mov	r3, r6
   18df4:	b	183a8 <__assert_fail@plt+0x6f94>
   18df8:	mov	r2, #0
   18dfc:	b	18860 <__assert_fail@plt+0x744c>
   18e00:	mov	r7, #0
   18e04:	mov	r3, #118	; 0x76
   18e08:	b	1856c <__assert_fail@plt+0x7158>
   18e0c:	mov	r7, #0
   18e10:	mov	r3, #116	; 0x74
   18e14:	b	1869c <__assert_fail@plt+0x7288>
   18e18:	ldr	r3, [sp, #44]	; 0x2c
   18e1c:	b	183d0 <__assert_fail@plt+0x6fbc>
   18e20:	ldr	r3, [sp, #44]	; 0x2c
   18e24:	cmp	r3, #0
   18e28:	bne	19298 <__assert_fail@plt+0x7e84>
   18e2c:	add	r9, r9, #1
   18e30:	mov	r6, #0
   18e34:	ldr	r3, [sp, #48]	; 0x30
   18e38:	mov	r5, #92	; 0x5c
   18e3c:	b	1865c <__assert_fail@plt+0x7248>
   18e40:	ldr	r3, [sp, #32]
   18e44:	ldrb	r2, [r3, #1]
   18e48:	adds	r2, r2, #0
   18e4c:	movne	r2, #1
   18e50:	b	18378 <__assert_fail@plt+0x6f64>
   18e54:	ldr	r3, [sp, #156]	; 0x9c
   18e58:	ands	r3, r3, #4
   18e5c:	beq	18e84 <__assert_fail@plt+0x7a70>
   18e60:	ldr	r2, [sp, #28]
   18e64:	add	r3, r9, #2
   18e68:	cmp	r3, r2
   18e6c:	bcs	18e80 <__assert_fail@plt+0x7a6c>
   18e70:	ldr	r2, [sp, #52]	; 0x34
   18e74:	ldrb	r5, [r2, #1]
   18e78:	cmp	r5, #63	; 0x3f
   18e7c:	beq	192fc <__assert_fail@plt+0x7ee8>
   18e80:	mov	r3, #0
   18e84:	mov	r5, #63	; 0x3f
   18e88:	mov	r6, r3
   18e8c:	b	18398 <__assert_fail@plt+0x6f84>
   18e90:	ldr	r3, [sp, #44]	; 0x2c
   18e94:	cmp	r3, #0
   18e98:	bne	19298 <__assert_fail@plt+0x7e84>
   18e9c:	mov	r6, r3
   18ea0:	mov	r5, #63	; 0x3f
   18ea4:	b	183d0 <__assert_fail@plt+0x6fbc>
   18ea8:	ldr	r1, [sp, #28]
   18eac:	mov	r2, #0
   18eb0:	mov	r3, #0
   18eb4:	strd	r2, [sp, #104]	; 0x68
   18eb8:	cmn	r1, #1
   18ebc:	bne	18ecc <__assert_fail@plt+0x7ab8>
   18ec0:	ldr	r0, [sp, #32]
   18ec4:	bl	112a0 <strlen@plt>
   18ec8:	str	r0, [sp, #28]
   18ecc:	str	r8, [sp, #76]	; 0x4c
   18ed0:	mov	r3, #0
   18ed4:	str	sl, [sp, #80]	; 0x50
   18ed8:	ldr	sl, [sp, #32]
   18edc:	str	r5, [sp, #84]	; 0x54
   18ee0:	mov	r5, r3
   18ee4:	ldr	r8, [sp, #44]	; 0x2c
   18ee8:	str	r7, [sp, #88]	; 0x58
   18eec:	str	r4, [sp, #92]	; 0x5c
   18ef0:	ldr	r2, [sp, #28]
   18ef4:	add	r4, r9, r5
   18ef8:	add	r3, sp, #104	; 0x68
   18efc:	add	r7, sl, r4
   18f00:	add	r0, sp, #100	; 0x64
   18f04:	mov	r1, r7
   18f08:	sub	r2, r2, r4
   18f0c:	bl	1bb68 <__assert_fail@plt+0xa754>
   18f10:	subs	r1, r0, #0
   18f14:	beq	18f60 <__assert_fail@plt+0x7b4c>
   18f18:	cmn	r1, #1
   18f1c:	beq	192d8 <__assert_fail@plt+0x7ec4>
   18f20:	cmn	r1, #2
   18f24:	beq	193f8 <__assert_fail@plt+0x7fe4>
   18f28:	cmp	fp, #2
   18f2c:	movne	r3, #0
   18f30:	andeq	r3, r8, #1
   18f34:	cmp	r3, #0
   18f38:	bne	190c4 <__assert_fail@plt+0x7cb0>
   18f3c:	ldr	r0, [sp, #100]	; 0x64
   18f40:	add	r5, r5, r1
   18f44:	bl	111b0 <iswprint@plt>
   18f48:	cmp	r0, #0
   18f4c:	add	r0, sp, #104	; 0x68
   18f50:	moveq	r6, #0
   18f54:	bl	11144 <mbsinit@plt>
   18f58:	cmp	r0, #0
   18f5c:	beq	18ef0 <__assert_fail@plt+0x7adc>
   18f60:	ldr	r3, [sp, #40]	; 0x28
   18f64:	mov	ip, r5
   18f68:	eor	r2, r6, #1
   18f6c:	ldr	r8, [sp, #76]	; 0x4c
   18f70:	ldr	sl, [sp, #80]	; 0x50
   18f74:	and	r2, r2, r3
   18f78:	ldr	r5, [sp, #84]	; 0x54
   18f7c:	ldr	r7, [sp, #88]	; 0x58
   18f80:	ldr	r4, [sp, #92]	; 0x5c
   18f84:	cmp	ip, #1
   18f88:	bls	188c4 <__assert_fail@plt+0x74b0>
   18f8c:	add	r1, ip, r9
   18f90:	mov	r0, #39	; 0x27
   18f94:	ldr	lr, [sp, #52]	; 0x34
   18f98:	mov	ip, #0
   18f9c:	str	r6, [sp, #52]	; 0x34
   18fa0:	ldr	r6, [sp, #48]	; 0x30
   18fa4:	b	19060 <__assert_fail@plt+0x7c4c>
   18fa8:	ldr	ip, [sp, #44]	; 0x2c
   18fac:	sub	r3, fp, #2
   18fb0:	clz	r3, r3
   18fb4:	lsr	r3, r3, #5
   18fb8:	cmp	ip, #0
   18fbc:	bne	191d0 <__assert_fail@plt+0x7dbc>
   18fc0:	eor	ip, r6, #1
   18fc4:	ands	r3, r3, ip
   18fc8:	beq	18ff8 <__assert_fail@plt+0x7be4>
   18fcc:	cmp	sl, r4
   18fd0:	add	ip, r4, #1
   18fd4:	strbhi	r0, [r8, r4]
   18fd8:	cmp	sl, ip
   18fdc:	movhi	r6, #36	; 0x24
   18fe0:	strbhi	r6, [r8, ip]
   18fe4:	add	ip, r4, #2
   18fe8:	mov	r6, r3
   18fec:	cmp	sl, ip
   18ff0:	add	r4, r4, #3
   18ff4:	strbhi	r0, [r8, ip]
   18ff8:	cmp	sl, r4
   18ffc:	movhi	r3, #92	; 0x5c
   19000:	strbhi	r3, [r8, r4]
   19004:	add	r3, r4, #1
   19008:	cmp	sl, r3
   1900c:	bls	1901c <__assert_fail@plt+0x7c08>
   19010:	lsr	ip, r5, #6
   19014:	add	ip, ip, #48	; 0x30
   19018:	strb	ip, [r8, r3]
   1901c:	add	r3, r4, #2
   19020:	cmp	sl, r3
   19024:	bls	19034 <__assert_fail@plt+0x7c20>
   19028:	ubfx	ip, r5, #3, #3
   1902c:	add	ip, ip, #48	; 0x30
   19030:	strb	ip, [r8, r3]
   19034:	add	r9, r9, #1
   19038:	and	r5, r5, #7
   1903c:	cmp	r9, r1
   19040:	add	r5, r5, #48	; 0x30
   19044:	add	r4, r4, #3
   19048:	bcs	191fc <__assert_fail@plt+0x7de8>
   1904c:	mov	ip, r2
   19050:	cmp	sl, r4
   19054:	strbhi	r5, [r8, r4]
   19058:	add	r4, r4, #1
   1905c:	ldrb	r5, [lr, #1]!
   19060:	cmp	r2, #0
   19064:	bne	18fa8 <__assert_fail@plt+0x7b94>
   19068:	eor	r3, ip, #1
   1906c:	cmp	r7, #0
   19070:	and	r3, r3, r6
   19074:	uxtb	r3, r3
   19078:	beq	1908c <__assert_fail@plt+0x7c78>
   1907c:	cmp	sl, r4
   19080:	movhi	r7, #92	; 0x5c
   19084:	strbhi	r7, [r8, r4]
   19088:	add	r4, r4, #1
   1908c:	add	r9, r9, #1
   19090:	cmp	r9, r1
   19094:	bcs	191e4 <__assert_fail@plt+0x7dd0>
   19098:	cmp	r3, #0
   1909c:	beq	1921c <__assert_fail@plt+0x7e08>
   190a0:	cmp	sl, r4
   190a4:	add	r3, r4, #1
   190a8:	mov	r7, #0
   190ac:	strbhi	r0, [r8, r4]
   190b0:	cmp	sl, r3
   190b4:	add	r4, r4, #2
   190b8:	mov	r6, r7
   190bc:	strbhi	r0, [r8, r3]
   190c0:	b	19050 <__assert_fail@plt+0x7c3c>
   190c4:	cmp	r1, #1
   190c8:	beq	18f3c <__assert_fail@plt+0x7b28>
   190cc:	add	r2, r4, #1
   190d0:	add	r3, sl, r1
   190d4:	add	r2, sl, r2
   190d8:	add	r4, r3, r4
   190dc:	ldrb	r3, [r2], #1
   190e0:	sub	r3, r3, #91	; 0x5b
   190e4:	cmp	r3, #33	; 0x21
   190e8:	ldrls	pc, [pc, r3, lsl #2]
   190ec:	b	19178 <__assert_fail@plt+0x7d64>
   190f0:	andeq	r9, r1, r4, lsl #3
   190f4:	andeq	r9, r1, r4, lsl #3
   190f8:	andeq	r9, r1, r8, ror r1
   190fc:	andeq	r9, r1, r4, lsl #3
   19100:	andeq	r9, r1, r8, ror r1
   19104:	andeq	r9, r1, r4, lsl #3
   19108:	andeq	r9, r1, r8, ror r1
   1910c:	andeq	r9, r1, r8, ror r1
   19110:	andeq	r9, r1, r8, ror r1
   19114:	andeq	r9, r1, r8, ror r1
   19118:	andeq	r9, r1, r8, ror r1
   1911c:	andeq	r9, r1, r8, ror r1
   19120:	andeq	r9, r1, r8, ror r1
   19124:	andeq	r9, r1, r8, ror r1
   19128:	andeq	r9, r1, r8, ror r1
   1912c:	andeq	r9, r1, r8, ror r1
   19130:	andeq	r9, r1, r8, ror r1
   19134:	andeq	r9, r1, r8, ror r1
   19138:	andeq	r9, r1, r8, ror r1
   1913c:	andeq	r9, r1, r8, ror r1
   19140:	andeq	r9, r1, r8, ror r1
   19144:	andeq	r9, r1, r8, ror r1
   19148:	andeq	r9, r1, r8, ror r1
   1914c:	andeq	r9, r1, r8, ror r1
   19150:	andeq	r9, r1, r8, ror r1
   19154:	andeq	r9, r1, r8, ror r1
   19158:	andeq	r9, r1, r8, ror r1
   1915c:	andeq	r9, r1, r8, ror r1
   19160:	andeq	r9, r1, r8, ror r1
   19164:	andeq	r9, r1, r8, ror r1
   19168:	andeq	r9, r1, r8, ror r1
   1916c:	andeq	r9, r1, r8, ror r1
   19170:	andeq	r9, r1, r8, ror r1
   19174:	andeq	r9, r1, r4, lsl #3
   19178:	cmp	r4, r2
   1917c:	bne	190dc <__assert_fail@plt+0x7cc8>
   19180:	b	18f3c <__assert_fail@plt+0x7b28>
   19184:	mov	r8, #2
   19188:	ldr	fp, [sp, #76]	; 0x4c
   1918c:	ldr	sl, [sp, #80]	; 0x50
   19190:	b	186bc <__assert_fail@plt+0x72a8>
   19194:	ldr	r2, [sp, #40]	; 0x28
   19198:	str	fp, [sp, #152]	; 0x98
   1919c:	mov	fp, r8
   191a0:	ldr	r8, [sp, #152]	; 0x98
   191a4:	and	r2, r2, r3
   191a8:	str	r2, [sp, #40]	; 0x28
   191ac:	b	186bc <__assert_fail@plt+0x72a8>
   191b0:	cmp	sl, r4
   191b4:	movls	r0, r4
   191b8:	bls	187ec <__assert_fail@plt+0x73d8>
   191bc:	ldr	r3, [sp, #48]	; 0x30
   191c0:	b	187dc <__assert_fail@plt+0x73c8>
   191c4:	str	sl, [sp, #72]	; 0x48
   191c8:	ldr	sl, [sp, #44]	; 0x2c
   191cc:	b	1862c <__assert_fail@plt+0x7218>
   191d0:	str	r3, [sp, #40]	; 0x28
   191d4:	str	fp, [sp, #152]	; 0x98
   191d8:	mov	fp, r8
   191dc:	ldr	r8, [sp, #152]	; 0x98
   191e0:	b	186bc <__assert_fail@plt+0x72a8>
   191e4:	str	r6, [sp, #48]	; 0x30
   191e8:	ldr	r6, [sp, #52]	; 0x34
   191ec:	b	1865c <__assert_fail@plt+0x7248>
   191f0:	mov	r6, #0
   191f4:	ldr	r2, [sp, #40]	; 0x28
   191f8:	b	18f8c <__assert_fail@plt+0x7b78>
   191fc:	str	r6, [sp, #48]	; 0x30
   19200:	ldr	r6, [sp, #52]	; 0x34
   19204:	b	18448 <__assert_fail@plt+0x7034>
   19208:	add	r4, r4, #4
   1920c:	mov	r6, #0
   19210:	str	r3, [sp, #48]	; 0x30
   19214:	mov	r5, #48	; 0x30
   19218:	b	183d0 <__assert_fail@plt+0x6fbc>
   1921c:	mov	r7, r3
   19220:	b	19050 <__assert_fail@plt+0x7c3c>
   19224:	mov	r3, #1
   19228:	movw	r2, #54868	; 0xd654
   1922c:	movt	r2, #1
   19230:	mov	r4, r3
   19234:	str	r3, [sp, #36]	; 0x24
   19238:	str	r3, [sp, #40]	; 0x28
   1923c:	str	sl, [sp, #44]	; 0x2c
   19240:	str	sl, [sp, #48]	; 0x30
   19244:	str	r3, [sp, #56]	; 0x38
   19248:	str	r2, [sp, #60]	; 0x3c
   1924c:	str	sl, [sp, #68]	; 0x44
   19250:	str	sl, [sp, #72]	; 0x48
   19254:	b	17ef8 <__assert_fail@plt+0x6ae4>
   19258:	mov	r3, r6
   1925c:	mov	r5, #48	; 0x30
   19260:	mov	r6, #0
   19264:	b	183d0 <__assert_fail@plt+0x6fbc>
   19268:	mov	r5, r3
   1926c:	b	18748 <__assert_fail@plt+0x7334>
   19270:	cmp	sl, r4
   19274:	mov	r5, #48	; 0x30
   19278:	movhi	r3, #48	; 0x30
   1927c:	strbhi	r3, [r8, r4]
   19280:	add	r3, r0, #2
   19284:	add	r4, r0, #3
   19288:	cmp	sl, r3
   1928c:	movhi	r1, #48	; 0x30
   19290:	strbhi	r1, [r8, r3]
   19294:	b	18820 <__assert_fail@plt+0x740c>
   19298:	str	fp, [sp, #152]	; 0x98
   1929c:	mov	fp, r8
   192a0:	ldr	r8, [sp, #152]	; 0x98
   192a4:	b	186bc <__assert_fail@plt+0x72a8>
   192a8:	ldr	r3, [sp, #164]	; 0xa4
   192ac:	ldrb	r3, [r3]
   192b0:	cmp	r3, #0
   192b4:	beq	17ec8 <__assert_fail@plt+0x6ab4>
   192b8:	ldr	r2, [sp, #164]	; 0xa4
   192bc:	cmp	sl, r4
   192c0:	strbhi	r3, [fp, r4]
   192c4:	add	r4, r4, #1
   192c8:	ldrb	r3, [r2, #1]!
   192cc:	cmp	r3, #0
   192d0:	bne	192bc <__assert_fail@plt+0x7ea8>
   192d4:	b	17ec8 <__assert_fail@plt+0x6ab4>
   192d8:	mov	ip, r5
   192dc:	mov	r6, #0
   192e0:	ldr	r2, [sp, #40]	; 0x28
   192e4:	ldr	r8, [sp, #76]	; 0x4c
   192e8:	ldr	sl, [sp, #80]	; 0x50
   192ec:	ldr	r5, [sp, #84]	; 0x54
   192f0:	ldr	r7, [sp, #88]	; 0x58
   192f4:	ldr	r4, [sp, #92]	; 0x5c
   192f8:	b	18f84 <__assert_fail@plt+0x7b70>
   192fc:	ldr	r2, [sp, #32]
   19300:	ldrb	r1, [r2, r3]
   19304:	sub	r2, r1, #33	; 0x21
   19308:	cmp	r2, #29
   1930c:	ldrls	pc, [pc, r2, lsl #2]
   19310:	b	193ec <__assert_fail@plt+0x7fd8>
   19314:	andeq	r9, r1, ip, lsl #7
   19318:	andeq	r9, r1, ip, ror #7
   1931c:	andeq	r9, r1, ip, ror #7
   19320:	andeq	r9, r1, ip, ror #7
   19324:	andeq	r9, r1, ip, ror #7
   19328:	andeq	r9, r1, ip, ror #7
   1932c:	andeq	r9, r1, ip, lsl #7
   19330:	andeq	r9, r1, ip, lsl #7
   19334:	andeq	r9, r1, ip, lsl #7
   19338:	andeq	r9, r1, ip, ror #7
   1933c:	andeq	r9, r1, ip, ror #7
   19340:	andeq	r9, r1, ip, ror #7
   19344:	andeq	r9, r1, ip, lsl #7
   19348:	andeq	r9, r1, ip, ror #7
   1934c:	andeq	r9, r1, ip, lsl #7
   19350:	andeq	r9, r1, ip, ror #7
   19354:	andeq	r9, r1, ip, ror #7
   19358:	andeq	r9, r1, ip, ror #7
   1935c:	andeq	r9, r1, ip, ror #7
   19360:	andeq	r9, r1, ip, ror #7
   19364:	andeq	r9, r1, ip, ror #7
   19368:	andeq	r9, r1, ip, ror #7
   1936c:	andeq	r9, r1, ip, ror #7
   19370:	andeq	r9, r1, ip, ror #7
   19374:	andeq	r9, r1, ip, ror #7
   19378:	andeq	r9, r1, ip, ror #7
   1937c:	andeq	r9, r1, ip, ror #7
   19380:	andeq	r9, r1, ip, lsl #7
   19384:	andeq	r9, r1, ip, lsl #7
   19388:	andeq	r9, r1, ip, lsl #7
   1938c:	ldr	r2, [sp, #44]	; 0x2c
   19390:	cmp	r2, #0
   19394:	bne	194f0 <__assert_fail@plt+0x80dc>
   19398:	cmp	sl, r4
   1939c:	mov	r5, r1
   193a0:	movhi	r2, #63	; 0x3f
   193a4:	mov	r9, r3
   193a8:	strbhi	r2, [r8, r4]
   193ac:	add	r2, r4, #1
   193b0:	cmp	sl, r2
   193b4:	movhi	r0, #34	; 0x22
   193b8:	strbhi	r0, [r8, r2]
   193bc:	add	r2, r4, #2
   193c0:	cmp	sl, r2
   193c4:	movhi	r0, #34	; 0x22
   193c8:	strbhi	r0, [r8, r2]
   193cc:	add	r2, r4, #3
   193d0:	add	r4, r4, #4
   193d4:	cmp	sl, r2
   193d8:	movhi	r0, #63	; 0x3f
   193dc:	strbhi	r0, [r8, r2]
   193e0:	mov	r2, #0
   193e4:	mov	r6, r2
   193e8:	b	18820 <__assert_fail@plt+0x740c>
   193ec:	mov	r3, #0
   193f0:	mov	r6, r3
   193f4:	b	18398 <__assert_fail@plt+0x6f84>
   193f8:	ldr	r0, [sp, #28]
   193fc:	mov	r1, r4
   19400:	mov	r2, r7
   19404:	mov	r3, r5
   19408:	mov	ip, r5
   1940c:	ldr	r8, [sp, #76]	; 0x4c
   19410:	ldr	sl, [sp, #80]	; 0x50
   19414:	cmp	r1, r0
   19418:	ldr	r5, [sp, #84]	; 0x54
   1941c:	ldr	r7, [sp, #88]	; 0x58
   19420:	ldr	r4, [sp, #92]	; 0x5c
   19424:	bcs	19458 <__assert_fail@plt+0x8044>
   19428:	ldrb	r6, [r2]
   1942c:	cmp	r6, #0
   19430:	bne	19444 <__assert_fail@plt+0x8030>
   19434:	b	19578 <__assert_fail@plt+0x8164>
   19438:	ldrb	r6, [r2, #1]!
   1943c:	cmp	r6, #0
   19440:	beq	19500 <__assert_fail@plt+0x80ec>
   19444:	add	r3, r3, #1
   19448:	add	r1, r9, r3
   1944c:	cmp	r1, r0
   19450:	bcc	19438 <__assert_fail@plt+0x8024>
   19454:	mov	ip, r3
   19458:	mov	r6, #0
   1945c:	ldr	r2, [sp, #40]	; 0x28
   19460:	b	18f84 <__assert_fail@plt+0x7b70>
   19464:	mov	r3, #1
   19468:	mov	r2, #0
   1946c:	mov	r4, r2
   19470:	str	r3, [sp, #36]	; 0x24
   19474:	str	r3, [sp, #40]	; 0x28
   19478:	str	r3, [sp, #44]	; 0x2c
   1947c:	str	r2, [sp, #48]	; 0x30
   19480:	str	r3, [sp, #56]	; 0x38
   19484:	movw	r3, #54868	; 0xd654
   19488:	movt	r3, #1
   1948c:	str	r3, [sp, #60]	; 0x3c
   19490:	str	r2, [sp, #68]	; 0x44
   19494:	str	r2, [sp, #72]	; 0x48
   19498:	b	17ef8 <__assert_fail@plt+0x6ae4>
   1949c:	mov	r2, r3
   194a0:	ldr	r3, [sp, #60]	; 0x3c
   194a4:	cmp	r3, #0
   194a8:	moveq	r2, #0
   194ac:	andne	r2, r2, #1
   194b0:	cmp	r2, #0
   194b4:	beq	194e0 <__assert_fail@plt+0x80cc>
   194b8:	mov	r2, r3
   194bc:	ldrb	r3, [r3]
   194c0:	cmp	r3, #0
   194c4:	beq	194e0 <__assert_fail@plt+0x80cc>
   194c8:	cmp	sl, r4
   194cc:	strbhi	r3, [fp, r4]
   194d0:	add	r4, r4, #1
   194d4:	ldrb	r3, [r2, #1]!
   194d8:	cmp	r3, #0
   194dc:	bne	194c8 <__assert_fail@plt+0x80b4>
   194e0:	cmp	sl, r4
   194e4:	movhi	r3, #0
   194e8:	strbhi	r3, [fp, r4]
   194ec:	b	18700 <__assert_fail@plt+0x72ec>
   194f0:	str	fp, [sp, #152]	; 0x98
   194f4:	mov	fp, r8
   194f8:	ldr	r8, [sp, #152]	; 0x98
   194fc:	b	186c8 <__assert_fail@plt+0x72b4>
   19500:	mov	ip, r3
   19504:	ldr	r2, [sp, #40]	; 0x28
   19508:	b	18f84 <__assert_fail@plt+0x7b70>
   1950c:	str	fp, [sp, #152]	; 0x98
   19510:	mov	fp, r8
   19514:	ldr	r8, [sp, #152]	; 0x98
   19518:	sub	r3, r8, #2
   1951c:	clz	r3, r3
   19520:	lsr	r3, r3, #5
   19524:	str	r3, [sp, #40]	; 0x28
   19528:	b	186bc <__assert_fail@plt+0x72a8>
   1952c:	mov	ip, #5
   19530:	ldr	r3, [sp, #28]
   19534:	str	ip, [sp]
   19538:	ldr	r2, [sp, #156]	; 0x9c
   1953c:	ldr	ip, [sp, #164]	; 0xa4
   19540:	ldr	r0, [sp, #160]	; 0xa0
   19544:	str	r2, [sp, #4]
   19548:	ldr	r2, [sp, #32]
   1954c:	ldr	r1, [sp, #72]	; 0x48
   19550:	str	ip, [sp, #12]
   19554:	ldr	ip, [sp, #168]	; 0xa8
   19558:	str	r0, [sp, #8]
   1955c:	mov	r0, fp
   19560:	str	ip, [sp, #16]
   19564:	bl	17e10 <__assert_fail@plt+0x69fc>
   19568:	mov	r4, r0
   1956c:	b	18700 <__assert_fail@plt+0x72ec>
   19570:	mov	r8, #2
   19574:	b	186bc <__assert_fail@plt+0x72a8>
   19578:	ldr	r2, [sp, #40]	; 0x28
   1957c:	b	18f84 <__assert_fail@plt+0x7b70>
   19580:	mov	r3, #0
   19584:	mov	r2, #1
   19588:	mov	r4, r3
   1958c:	strd	r2, [sp, #36]	; 0x24
   19590:	strd	r2, [sp, #44]	; 0x2c
   19594:	str	r2, [sp, #56]	; 0x38
   19598:	str	r3, [sp, #68]	; 0x44
   1959c:	str	r3, [sp, #72]	; 0x48
   195a0:	movw	r3, #54888	; 0xd668
   195a4:	movt	r3, #1
   195a8:	str	r3, [sp, #60]	; 0x3c
   195ac:	b	17ef8 <__assert_fail@plt+0x6ae4>
   195b0:	mov	r3, #0
   195b4:	mov	r1, #1
   195b8:	mov	r2, r3
   195bc:	str	r1, [sp, #36]	; 0x24
   195c0:	str	r3, [sp, #48]	; 0x30
   195c4:	str	sl, [sp, #72]	; 0x48
   195c8:	b	18500 <__assert_fail@plt+0x70ec>
   195cc:	bl	113f0 <abort@plt>
   195d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   195d4:	mov	r4, r0
   195d8:	mov	r5, r3
   195dc:	strd	r6, [sp, #8]
   195e0:	movw	r7, #57708	; 0xe16c
   195e4:	movt	r7, #2
   195e8:	strd	r8, [sp, #16]
   195ec:	strd	sl, [sp, #24]
   195f0:	mov	sl, r1
   195f4:	mov	fp, r2
   195f8:	str	lr, [sp, #32]
   195fc:	sub	sp, sp, #60	; 0x3c
   19600:	bl	112dc <__errno_location@plt>
   19604:	mov	r8, r0
   19608:	cmn	r4, #-2147483647	; 0x80000001
   1960c:	ldr	r6, [r7]
   19610:	movne	r0, #0
   19614:	moveq	r0, #1
   19618:	ldr	r3, [r8]
   1961c:	orrs	r0, r0, r4, lsr #31
   19620:	str	r3, [sp, #28]
   19624:	bne	197b4 <__assert_fail@plt+0x83a0>
   19628:	ldr	r3, [r7, #4]
   1962c:	cmp	r3, r4
   19630:	bgt	19690 <__assert_fail@plt+0x827c>
   19634:	add	r1, r7, #8
   19638:	sub	r2, r4, r3
   1963c:	str	r3, [sp, #52]	; 0x34
   19640:	cmp	r6, r1
   19644:	add	r2, r2, #1
   19648:	beq	1978c <__assert_fail@plt+0x8378>
   1964c:	mov	r1, #8
   19650:	mov	r0, r6
   19654:	mvn	r3, #-2147483648	; 0x80000000
   19658:	str	r1, [sp]
   1965c:	add	r1, sp, #52	; 0x34
   19660:	bl	1a714 <__assert_fail@plt+0x9300>
   19664:	mov	r6, r0
   19668:	str	r0, [r7]
   1966c:	ldr	r0, [r7, #4]
   19670:	mov	r1, #0
   19674:	ldr	r2, [sp, #52]	; 0x34
   19678:	sub	r2, r2, r0
   1967c:	add	r0, r6, r0, lsl #3
   19680:	lsl	r2, r2, #3
   19684:	bl	112f4 <memset@plt>
   19688:	ldr	r3, [sp, #52]	; 0x34
   1968c:	str	r3, [r7, #4]
   19690:	ldr	r1, [r5, #4]
   19694:	add	r0, r6, r4, lsl #3
   19698:	add	ip, r5, #8
   1969c:	mov	r3, fp
   196a0:	mov	r2, sl
   196a4:	ldr	r7, [r0, #4]
   196a8:	str	r0, [sp, #36]	; 0x24
   196ac:	str	ip, [sp, #40]	; 0x28
   196b0:	orr	r0, r1, #1
   196b4:	ldr	r9, [r6, r4, lsl #3]
   196b8:	str	ip, [sp, #8]
   196bc:	ldr	lr, [r5, #44]	; 0x2c
   196c0:	str	r0, [sp, #4]
   196c4:	ldr	ip, [r5]
   196c8:	mov	r1, r9
   196cc:	str	ip, [sp, #32]
   196d0:	ldr	ip, [r5, #40]	; 0x28
   196d4:	str	ip, [sp, #12]
   196d8:	ldr	ip, [sp, #32]
   196dc:	str	lr, [sp, #16]
   196e0:	str	r0, [sp, #44]	; 0x2c
   196e4:	mov	r0, r7
   196e8:	str	ip, [sp]
   196ec:	bl	17e10 <__assert_fail@plt+0x69fc>
   196f0:	cmp	r9, r0
   196f4:	bhi	19764 <__assert_fail@plt+0x8350>
   196f8:	add	r9, r0, #1
   196fc:	movw	r3, #57840	; 0xe1f0
   19700:	movt	r3, #2
   19704:	cmp	r7, r3
   19708:	str	r9, [r6, r4, lsl #3]
   1970c:	beq	19718 <__assert_fail@plt+0x8304>
   19710:	mov	r0, r7
   19714:	bl	16854 <__assert_fail@plt+0x5440>
   19718:	mov	r0, r9
   1971c:	bl	1a564 <__assert_fail@plt+0x9150>
   19720:	ldr	ip, [r5]
   19724:	mov	r3, fp
   19728:	mov	r2, sl
   1972c:	mov	r1, r9
   19730:	mov	r7, r0
   19734:	ldr	lr, [sp, #36]	; 0x24
   19738:	ldr	r4, [r5, #40]	; 0x28
   1973c:	str	r0, [lr, #4]
   19740:	ldr	lr, [r5, #44]	; 0x2c
   19744:	str	ip, [sp]
   19748:	ldr	ip, [sp, #44]	; 0x2c
   1974c:	str	ip, [sp, #4]
   19750:	ldr	ip, [sp, #40]	; 0x28
   19754:	str	r4, [sp, #12]
   19758:	str	lr, [sp, #16]
   1975c:	str	ip, [sp, #8]
   19760:	bl	17e10 <__assert_fail@plt+0x69fc>
   19764:	ldr	r3, [sp, #28]
   19768:	mov	r0, r7
   1976c:	str	r3, [r8]
   19770:	add	sp, sp, #60	; 0x3c
   19774:	ldrd	r4, [sp]
   19778:	ldrd	r6, [sp, #8]
   1977c:	ldrd	r8, [sp, #16]
   19780:	ldrd	sl, [sp, #24]
   19784:	add	sp, sp, #32
   19788:	pop	{pc}		; (ldr pc, [sp], #4)
   1978c:	mov	r1, #8
   19790:	mvn	r3, #-2147483648	; 0x80000000
   19794:	str	r1, [sp]
   19798:	add	r1, sp, #52	; 0x34
   1979c:	bl	1a714 <__assert_fail@plt+0x9300>
   197a0:	ldrd	r2, [r7, #8]
   197a4:	mov	r6, r0
   197a8:	str	r0, [r7]
   197ac:	strd	r2, [r0]
   197b0:	b	1966c <__assert_fail@plt+0x8258>
   197b4:	bl	113f0 <abort@plt>
   197b8:	strd	r4, [sp, #-16]!
   197bc:	mov	r5, r0
   197c0:	str	r6, [sp, #8]
   197c4:	str	lr, [sp, #12]
   197c8:	bl	112dc <__errno_location@plt>
   197cc:	mov	r4, r0
   197d0:	cmp	r5, #0
   197d4:	ldr	r0, [pc, #32]	; 197fc <__assert_fail@plt+0x83e8>
   197d8:	mov	r1, #48	; 0x30
   197dc:	movne	r0, r5
   197e0:	ldr	r6, [r4]
   197e4:	bl	1a88c <__assert_fail@plt+0x9478>
   197e8:	str	r6, [r4]
   197ec:	ldrd	r4, [sp]
   197f0:	ldr	r6, [sp, #8]
   197f4:	add	sp, sp, #12
   197f8:	pop	{pc}		; (ldr pc, [sp], #4)
   197fc:	strdeq	lr, [r2], -r0
   19800:	ldr	r3, [pc, #12]	; 19814 <__assert_fail@plt+0x8400>
   19804:	cmp	r0, #0
   19808:	moveq	r0, r3
   1980c:	ldr	r0, [r0]
   19810:	bx	lr
   19814:	strdeq	lr, [r2], -r0
   19818:	ldr	r3, [pc, #12]	; 1982c <__assert_fail@plt+0x8418>
   1981c:	cmp	r0, #0
   19820:	moveq	r0, r3
   19824:	str	r1, [r0]
   19828:	bx	lr
   1982c:	strdeq	lr, [r2], -r0
   19830:	ldr	r3, [pc, #52]	; 1986c <__assert_fail@plt+0x8458>
   19834:	cmp	r0, #0
   19838:	push	{lr}		; (str lr, [sp, #-4]!)
   1983c:	lsr	lr, r1, #5
   19840:	and	r1, r1, #31
   19844:	moveq	r0, r3
   19848:	add	r3, r0, #8
   1984c:	ldr	ip, [r3, lr, lsl #2]
   19850:	lsr	r0, ip, r1
   19854:	eor	r2, r2, r0
   19858:	and	r0, r0, #1
   1985c:	and	r2, r2, #1
   19860:	eor	r1, ip, r2, lsl r1
   19864:	str	r1, [r3, lr, lsl #2]
   19868:	pop	{pc}		; (ldr pc, [sp], #4)
   1986c:	strdeq	lr, [r2], -r0
   19870:	ldr	r3, [pc, #16]	; 19888 <__assert_fail@plt+0x8474>
   19874:	cmp	r0, #0
   19878:	movne	r3, r0
   1987c:	ldr	r0, [r3, #4]
   19880:	str	r1, [r3, #4]
   19884:	bx	lr
   19888:	strdeq	lr, [r2], -r0
   1988c:	ldr	r3, [pc, #48]	; 198c4 <__assert_fail@plt+0x84b0>
   19890:	cmp	r0, #0
   19894:	mov	ip, #10
   19898:	moveq	r0, r3
   1989c:	cmp	r2, #0
   198a0:	cmpne	r1, #0
   198a4:	str	ip, [r0]
   198a8:	beq	198b8 <__assert_fail@plt+0x84a4>
   198ac:	str	r1, [r0, #40]	; 0x28
   198b0:	str	r2, [r0, #44]	; 0x2c
   198b4:	bx	lr
   198b8:	str	r4, [sp, #-8]!
   198bc:	str	lr, [sp, #4]
   198c0:	bl	113f0 <abort@plt>
   198c4:	strdeq	lr, [r2], -r0
   198c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   198cc:	strd	r6, [sp, #8]
   198d0:	mov	r7, r0
   198d4:	mov	r6, r1
   198d8:	strd	r8, [sp, #16]
   198dc:	mov	r8, r2
   198e0:	mov	r9, r3
   198e4:	str	lr, [sp, #24]
   198e8:	sub	sp, sp, #28
   198ec:	ldr	r4, [sp, #56]	; 0x38
   198f0:	ldr	ip, [pc, #104]	; 19960 <__assert_fail@plt+0x854c>
   198f4:	cmp	r4, #0
   198f8:	moveq	r4, ip
   198fc:	bl	112dc <__errno_location@plt>
   19900:	ldr	ip, [r4, #44]	; 0x2c
   19904:	mov	r5, r0
   19908:	mov	r1, r6
   1990c:	add	lr, r4, #8
   19910:	mov	r3, r9
   19914:	ldr	r6, [r5]
   19918:	mov	r2, r8
   1991c:	mov	r0, r7
   19920:	str	ip, [sp, #16]
   19924:	ldr	ip, [r4, #40]	; 0x28
   19928:	str	lr, [sp, #8]
   1992c:	str	ip, [sp, #12]
   19930:	ldr	ip, [r4, #4]
   19934:	str	ip, [sp, #4]
   19938:	ldr	ip, [r4]
   1993c:	str	ip, [sp]
   19940:	bl	17e10 <__assert_fail@plt+0x69fc>
   19944:	str	r6, [r5]
   19948:	add	sp, sp, #28
   1994c:	ldrd	r4, [sp]
   19950:	ldrd	r6, [sp, #8]
   19954:	ldrd	r8, [sp, #16]
   19958:	add	sp, sp, #24
   1995c:	pop	{pc}		; (ldr pc, [sp], #4)
   19960:	strdeq	lr, [r2], -r0
   19964:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19968:	cmp	r3, #0
   1996c:	ldr	r4, [pc, #220]	; 19a50 <__assert_fail@plt+0x863c>
   19970:	movne	r4, r3
   19974:	strd	r6, [sp, #8]
   19978:	mov	r6, r2
   1997c:	strd	r8, [sp, #16]
   19980:	mov	r9, r0
   19984:	strd	sl, [sp, #24]
   19988:	mov	sl, r1
   1998c:	str	lr, [sp, #32]
   19990:	sub	sp, sp, #44	; 0x2c
   19994:	bl	112dc <__errno_location@plt>
   19998:	ldr	r5, [r4, #4]
   1999c:	mov	r7, r0
   199a0:	mov	r1, #0
   199a4:	add	r8, r4, #8
   199a8:	mov	r3, sl
   199ac:	ldr	ip, [r4, #44]	; 0x2c
   199b0:	mov	r2, r9
   199b4:	mov	r0, r1
   199b8:	ldr	lr, [r7]
   199bc:	cmp	r6, r1
   199c0:	orreq	r5, r5, #1
   199c4:	str	ip, [sp, #16]
   199c8:	ldr	ip, [r4, #40]	; 0x28
   199cc:	stmib	sp, {r5, r8, ip}
   199d0:	ldr	ip, [r4]
   199d4:	str	lr, [sp, #28]
   199d8:	str	ip, [sp]
   199dc:	bl	17e10 <__assert_fail@plt+0x69fc>
   199e0:	add	r1, r0, #1
   199e4:	mov	fp, r0
   199e8:	mov	r0, r1
   199ec:	str	r1, [sp, #36]	; 0x24
   199f0:	bl	1a564 <__assert_fail@plt+0x9150>
   199f4:	ldr	ip, [r4, #44]	; 0x2c
   199f8:	mov	r3, sl
   199fc:	mov	r2, r9
   19a00:	ldr	r1, [sp, #36]	; 0x24
   19a04:	str	ip, [sp, #16]
   19a08:	ldr	ip, [r4, #40]	; 0x28
   19a0c:	str	r0, [sp, #32]
   19a10:	stmib	sp, {r5, r8, ip}
   19a14:	ldr	ip, [r4]
   19a18:	str	ip, [sp]
   19a1c:	bl	17e10 <__assert_fail@plt+0x69fc>
   19a20:	ldr	lr, [sp, #28]
   19a24:	cmp	r6, #0
   19a28:	ldr	r0, [sp, #32]
   19a2c:	str	lr, [r7]
   19a30:	strne	fp, [r6]
   19a34:	add	sp, sp, #44	; 0x2c
   19a38:	ldrd	r4, [sp]
   19a3c:	ldrd	r6, [sp, #8]
   19a40:	ldrd	r8, [sp, #16]
   19a44:	ldrd	sl, [sp, #24]
   19a48:	add	sp, sp, #32
   19a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a50:	strdeq	lr, [r2], -r0
   19a54:	mov	r3, r2
   19a58:	mov	r2, #0
   19a5c:	b	19964 <__assert_fail@plt+0x8550>
   19a60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19a64:	movw	r5, #57708	; 0xe16c
   19a68:	movt	r5, #2
   19a6c:	ldr	r3, [r5, #4]
   19a70:	strd	r6, [sp, #8]
   19a74:	str	r8, [sp, #16]
   19a78:	str	lr, [sp, #20]
   19a7c:	ldr	r7, [r5]
   19a80:	cmp	r3, #1
   19a84:	ble	19aa8 <__assert_fail@plt+0x8694>
   19a88:	mov	r4, #1
   19a8c:	add	r6, r7, #4
   19a90:	ldr	r0, [r6, r4, lsl #3]
   19a94:	add	r4, r4, #1
   19a98:	bl	16854 <__assert_fail@plt+0x5440>
   19a9c:	ldr	r3, [r5, #4]
   19aa0:	cmp	r3, r4
   19aa4:	bgt	19a90 <__assert_fail@plt+0x867c>
   19aa8:	ldr	r0, [r7, #4]
   19aac:	movw	r4, #57840	; 0xe1f0
   19ab0:	movt	r4, #2
   19ab4:	cmp	r0, r4
   19ab8:	beq	19acc <__assert_fail@plt+0x86b8>
   19abc:	bl	16854 <__assert_fail@plt+0x5440>
   19ac0:	mov	r3, #256	; 0x100
   19ac4:	str	r3, [r5, #8]
   19ac8:	str	r4, [r5, #12]
   19acc:	ldr	r4, [pc, #44]	; 19b00 <__assert_fail@plt+0x86ec>
   19ad0:	cmp	r7, r4
   19ad4:	beq	19ae4 <__assert_fail@plt+0x86d0>
   19ad8:	mov	r0, r7
   19adc:	bl	16854 <__assert_fail@plt+0x5440>
   19ae0:	str	r4, [r5]
   19ae4:	mov	r3, #1
   19ae8:	ldrd	r6, [sp, #8]
   19aec:	str	r3, [r5, #4]
   19af0:	ldrd	r4, [sp]
   19af4:	ldr	r8, [sp, #16]
   19af8:	add	sp, sp, #20
   19afc:	pop	{pc}		; (ldr pc, [sp], #4)
   19b00:	andeq	lr, r2, r4, ror r1
   19b04:	ldr	r3, [pc, #4]	; 19b10 <__assert_fail@plt+0x86fc>
   19b08:	mvn	r2, #0
   19b0c:	b	195d0 <__assert_fail@plt+0x81bc>
   19b10:	strdeq	lr, [r2], -r0
   19b14:	ldr	r3, [pc]	; 19b1c <__assert_fail@plt+0x8708>
   19b18:	b	195d0 <__assert_fail@plt+0x81bc>
   19b1c:	strdeq	lr, [r2], -r0
   19b20:	mov	r1, r0
   19b24:	ldr	r3, [pc, #8]	; 19b34 <__assert_fail@plt+0x8720>
   19b28:	mvn	r2, #0
   19b2c:	mov	r0, #0
   19b30:	b	195d0 <__assert_fail@plt+0x81bc>
   19b34:	strdeq	lr, [r2], -r0
   19b38:	mov	r2, r1
   19b3c:	ldr	r3, [pc, #8]	; 19b4c <__assert_fail@plt+0x8738>
   19b40:	mov	r1, r0
   19b44:	mov	r0, #0
   19b48:	b	195d0 <__assert_fail@plt+0x81bc>
   19b4c:	strdeq	lr, [r2], -r0
   19b50:	strd	r4, [sp, #-12]!
   19b54:	mov	r5, r2
   19b58:	mov	r4, r0
   19b5c:	str	lr, [sp, #8]
   19b60:	sub	sp, sp, #52	; 0x34
   19b64:	mov	r0, sp
   19b68:	bl	17c6c <__assert_fail@plt+0x6858>
   19b6c:	mov	r3, sp
   19b70:	mov	r1, r5
   19b74:	mov	r0, r4
   19b78:	mvn	r2, #0
   19b7c:	bl	195d0 <__assert_fail@plt+0x81bc>
   19b80:	add	sp, sp, #52	; 0x34
   19b84:	ldrd	r4, [sp]
   19b88:	add	sp, sp, #8
   19b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19b90:	strd	r4, [sp, #-16]!
   19b94:	mov	r5, r2
   19b98:	mov	r4, r0
   19b9c:	str	r6, [sp, #8]
   19ba0:	mov	r6, r3
   19ba4:	str	lr, [sp, #12]
   19ba8:	sub	sp, sp, #48	; 0x30
   19bac:	mov	r0, sp
   19bb0:	bl	17c6c <__assert_fail@plt+0x6858>
   19bb4:	mov	r3, sp
   19bb8:	mov	r2, r6
   19bbc:	mov	r1, r5
   19bc0:	mov	r0, r4
   19bc4:	bl	195d0 <__assert_fail@plt+0x81bc>
   19bc8:	add	sp, sp, #48	; 0x30
   19bcc:	ldrd	r4, [sp]
   19bd0:	ldr	r6, [sp, #8]
   19bd4:	add	sp, sp, #12
   19bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bdc:	mov	r2, r1
   19be0:	mov	r1, r0
   19be4:	mov	r0, #0
   19be8:	b	19b50 <__assert_fail@plt+0x873c>
   19bec:	mov	r3, r2
   19bf0:	mov	r2, r1
   19bf4:	mov	r1, r0
   19bf8:	mov	r0, #0
   19bfc:	b	19b90 <__assert_fail@plt+0x877c>
   19c00:	ldr	ip, [pc, #140]	; 19c94 <__assert_fail@plt+0x8880>
   19c04:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19c08:	ldrd	r4, [ip]
   19c0c:	strd	r6, [sp, #8]
   19c10:	ldrd	r6, [ip, #8]
   19c14:	strd	r8, [sp, #16]
   19c18:	lsr	r9, r2, #5
   19c1c:	str	lr, [sp, #24]
   19c20:	sub	sp, sp, #52	; 0x34
   19c24:	and	lr, r2, #31
   19c28:	add	r8, sp, #8
   19c2c:	mov	r2, r1
   19c30:	strd	r4, [sp]
   19c34:	mov	r1, r0
   19c38:	mov	r3, sp
   19c3c:	strd	r6, [sp, #8]
   19c40:	mov	r0, #0
   19c44:	ldrd	r4, [ip, #16]
   19c48:	ldrd	r6, [ip, #24]
   19c4c:	strd	r4, [sp, #16]
   19c50:	ldrd	r4, [ip, #32]
   19c54:	strd	r6, [sp, #24]
   19c58:	ldrd	r6, [ip, #40]	; 0x28
   19c5c:	strd	r4, [sp, #32]
   19c60:	strd	r6, [sp, #40]	; 0x28
   19c64:	ldr	ip, [r8, r9, lsl #2]
   19c68:	mvn	r4, ip, lsr lr
   19c6c:	and	r4, r4, #1
   19c70:	eor	lr, ip, r4, lsl lr
   19c74:	str	lr, [r8, r9, lsl #2]
   19c78:	bl	195d0 <__assert_fail@plt+0x81bc>
   19c7c:	add	sp, sp, #52	; 0x34
   19c80:	ldrd	r4, [sp]
   19c84:	ldrd	r6, [sp, #8]
   19c88:	ldrd	r8, [sp, #16]
   19c8c:	add	sp, sp, #24
   19c90:	pop	{pc}		; (ldr pc, [sp], #4)
   19c94:	strdeq	lr, [r2], -r0
   19c98:	mov	r2, r1
   19c9c:	mvn	r1, #0
   19ca0:	b	19c00 <__assert_fail@plt+0x87ec>
   19ca4:	mov	r2, #58	; 0x3a
   19ca8:	mvn	r1, #0
   19cac:	b	19c00 <__assert_fail@plt+0x87ec>
   19cb0:	mov	r2, #58	; 0x3a
   19cb4:	b	19c00 <__assert_fail@plt+0x87ec>
   19cb8:	strd	r4, [sp, #-20]!	; 0xffffffec
   19cbc:	strd	r6, [sp, #8]
   19cc0:	mov	r6, r0
   19cc4:	mov	r7, r2
   19cc8:	str	lr, [sp, #16]
   19ccc:	sub	sp, sp, #100	; 0x64
   19cd0:	mov	r0, sp
   19cd4:	bl	17c6c <__assert_fail@plt+0x6858>
   19cd8:	ldrd	r4, [sp, #8]
   19cdc:	mov	r1, r7
   19ce0:	mov	r0, r6
   19ce4:	add	r3, sp, #48	; 0x30
   19ce8:	mvn	r2, #0
   19cec:	ldrd	r6, [sp]
   19cf0:	strd	r4, [sp, #56]	; 0x38
   19cf4:	ldrd	r4, [sp, #16]
   19cf8:	strd	r6, [sp, #48]	; 0x30
   19cfc:	ldrd	r6, [sp, #32]
   19d00:	ldr	lr, [sp, #60]	; 0x3c
   19d04:	strd	r4, [sp, #64]	; 0x40
   19d08:	ldrd	r4, [sp, #24]
   19d0c:	mvn	ip, lr
   19d10:	and	ip, ip, #67108864	; 0x4000000
   19d14:	strd	r4, [sp, #72]	; 0x48
   19d18:	eor	ip, ip, lr
   19d1c:	ldrd	r4, [sp, #40]	; 0x28
   19d20:	str	ip, [sp, #60]	; 0x3c
   19d24:	strd	r6, [sp, #80]	; 0x50
   19d28:	strd	r4, [sp, #88]	; 0x58
   19d2c:	bl	195d0 <__assert_fail@plt+0x81bc>
   19d30:	add	sp, sp, #100	; 0x64
   19d34:	ldrd	r4, [sp]
   19d38:	ldrd	r6, [sp, #8]
   19d3c:	add	sp, sp, #16
   19d40:	pop	{pc}		; (ldr pc, [sp], #4)
   19d44:	ldr	ip, [pc, #156]	; 19de8 <__assert_fail@plt+0x89d4>
   19d48:	cmp	r2, #0
   19d4c:	cmpne	r1, #0
   19d50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19d54:	strd	r6, [sp, #8]
   19d58:	mov	r6, r2
   19d5c:	str	r8, [sp, #16]
   19d60:	mov	r8, r3
   19d64:	strd	sl, [sp, #20]
   19d68:	ldrd	r4, [ip]
   19d6c:	str	lr, [sp, #28]
   19d70:	sub	sp, sp, #48	; 0x30
   19d74:	mov	lr, #10
   19d78:	ldrd	r2, [ip, #8]
   19d7c:	ldrd	sl, [ip, #16]
   19d80:	strd	r4, [sp]
   19d84:	ldrd	r4, [ip, #32]
   19d88:	str	lr, [sp]
   19d8c:	strd	r2, [sp, #8]
   19d90:	strd	sl, [sp, #16]
   19d94:	ldrd	r2, [ip, #24]
   19d98:	ldrd	sl, [ip, #40]	; 0x28
   19d9c:	strd	r2, [sp, #24]
   19da0:	strd	r4, [sp, #32]
   19da4:	strd	sl, [sp, #40]	; 0x28
   19da8:	beq	19de4 <__assert_fail@plt+0x89d0>
   19dac:	ldr	r2, [sp, #80]	; 0x50
   19db0:	mov	r7, r1
   19db4:	mov	r3, sp
   19db8:	mov	r1, r8
   19dbc:	str	r7, [sp, #40]	; 0x28
   19dc0:	str	r6, [sp, #44]	; 0x2c
   19dc4:	bl	195d0 <__assert_fail@plt+0x81bc>
   19dc8:	add	sp, sp, #48	; 0x30
   19dcc:	ldrd	r4, [sp]
   19dd0:	ldrd	r6, [sp, #8]
   19dd4:	ldr	r8, [sp, #16]
   19dd8:	ldrd	sl, [sp, #20]
   19ddc:	add	sp, sp, #28
   19de0:	pop	{pc}		; (ldr pc, [sp], #4)
   19de4:	bl	113f0 <abort@plt>
   19de8:	strdeq	lr, [r2], -r0
   19dec:	mvn	ip, #0
   19df0:	push	{lr}		; (str lr, [sp, #-4]!)
   19df4:	sub	sp, sp, #12
   19df8:	str	ip, [sp]
   19dfc:	bl	19d44 <__assert_fail@plt+0x8930>
   19e00:	add	sp, sp, #12
   19e04:	pop	{pc}		; (ldr pc, [sp], #4)
   19e08:	mvn	ip, #0
   19e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   19e10:	sub	sp, sp, #12
   19e14:	mov	r3, r2
   19e18:	mov	r2, r1
   19e1c:	mov	r1, r0
   19e20:	mov	r0, #0
   19e24:	str	ip, [sp]
   19e28:	bl	19d44 <__assert_fail@plt+0x8930>
   19e2c:	add	sp, sp, #12
   19e30:	pop	{pc}		; (ldr pc, [sp], #4)
   19e34:	push	{lr}		; (str lr, [sp, #-4]!)
   19e38:	sub	sp, sp, #12
   19e3c:	str	r3, [sp]
   19e40:	mov	r3, r2
   19e44:	mov	r2, r1
   19e48:	mov	r1, r0
   19e4c:	mov	r0, #0
   19e50:	bl	19d44 <__assert_fail@plt+0x8930>
   19e54:	add	sp, sp, #12
   19e58:	pop	{pc}		; (ldr pc, [sp], #4)
   19e5c:	ldr	r3, [pc]	; 19e64 <__assert_fail@plt+0x8a50>
   19e60:	b	195d0 <__assert_fail@plt+0x81bc>
   19e64:	andeq	lr, r2, ip, ror r1
   19e68:	mov	r2, r1
   19e6c:	ldr	r3, [pc, #8]	; 19e7c <__assert_fail@plt+0x8a68>
   19e70:	mov	r1, r0
   19e74:	mov	r0, #0
   19e78:	b	195d0 <__assert_fail@plt+0x81bc>
   19e7c:	andeq	lr, r2, ip, ror r1
   19e80:	ldr	r3, [pc, #4]	; 19e8c <__assert_fail@plt+0x8a78>
   19e84:	mvn	r2, #0
   19e88:	b	195d0 <__assert_fail@plt+0x81bc>
   19e8c:	andeq	lr, r2, ip, ror r1
   19e90:	mov	r1, r0
   19e94:	ldr	r3, [pc, #8]	; 19ea4 <__assert_fail@plt+0x8a90>
   19e98:	mvn	r2, #0
   19e9c:	mov	r0, #0
   19ea0:	b	195d0 <__assert_fail@plt+0x81bc>
   19ea4:	andeq	lr, r2, ip, ror r1
   19ea8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19eac:	mov	r5, #0
   19eb0:	movt	r5, #32752	; 0x7ff0
   19eb4:	mov	r4, r2
   19eb8:	strd	r6, [sp, #8]
   19ebc:	mov	r7, r1
   19ec0:	str	r8, [sp, #16]
   19ec4:	mov	r8, r0
   19ec8:	str	lr, [sp, #20]
   19ecc:	mov	r2, r4
   19ed0:	mov	r1, r7
   19ed4:	mov	r0, r8
   19ed8:	bl	110f0 <read@plt>
   19edc:	subs	r6, r0, #0
   19ee0:	bge	19f14 <__assert_fail@plt+0x8b00>
   19ee4:	bl	112dc <__errno_location@plt>
   19ee8:	ldr	r3, [r0]
   19eec:	cmp	r3, #4
   19ef0:	beq	19ecc <__assert_fail@plt+0x8ab8>
   19ef4:	cmp	r4, r5
   19ef8:	mov	r4, r5
   19efc:	movls	r2, #0
   19f00:	movhi	r2, #1
   19f04:	cmp	r3, #22
   19f08:	movne	r2, #0
   19f0c:	cmp	r2, #0
   19f10:	bne	19ecc <__assert_fail@plt+0x8ab8>
   19f14:	mov	r0, r6
   19f18:	ldrd	r4, [sp]
   19f1c:	ldrd	r6, [sp, #8]
   19f20:	ldr	r8, [sp, #16]
   19f24:	add	sp, sp, #20
   19f28:	pop	{pc}		; (ldr pc, [sp], #4)
   19f2c:	cmp	r0, #2
   19f30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19f34:	mov	r4, r0
   19f38:	strd	r6, [sp, #8]
   19f3c:	str	r8, [sp, #16]
   19f40:	str	lr, [sp, #20]
   19f44:	bls	19f60 <__assert_fail@plt+0x8b4c>
   19f48:	mov	r0, r4
   19f4c:	ldrd	r4, [sp]
   19f50:	ldrd	r6, [sp, #8]
   19f54:	ldr	r8, [sp, #16]
   19f58:	add	sp, sp, #20
   19f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f60:	bl	1bc10 <__assert_fail@plt+0xa7fc>
   19f64:	mov	r7, r0
   19f68:	bl	112dc <__errno_location@plt>
   19f6c:	mov	r5, r0
   19f70:	mov	r0, r4
   19f74:	ldr	r6, [r5]
   19f78:	mov	r4, r7
   19f7c:	bl	113fc <close@plt>
   19f80:	str	r6, [r5]
   19f84:	b	19f48 <__assert_fail@plt+0x8b34>
   19f88:	cmp	r1, #0
   19f8c:	strd	r4, [sp, #-16]!
   19f90:	mov	ip, r3
   19f94:	str	r6, [sp, #8]
   19f98:	mov	r4, r0
   19f9c:	str	lr, [sp, #12]
   19fa0:	sub	sp, sp, #32
   19fa4:	ldr	r5, [sp, #48]	; 0x30
   19fa8:	ldr	r6, [sp, #52]	; 0x34
   19fac:	beq	1a0f0 <__assert_fail@plt+0x8cdc>
   19fb0:	mov	r3, r1
   19fb4:	mov	r1, #1
   19fb8:	stm	sp, {r2, ip}
   19fbc:	movw	r2, #54996	; 0xd6d4
   19fc0:	movt	r2, #1
   19fc4:	bl	11324 <__fprintf_chk@plt>
   19fc8:	mov	r2, #5
   19fcc:	movw	r1, #55016	; 0xd6e8
   19fd0:	movt	r1, #1
   19fd4:	mov	r0, #0
   19fd8:	bl	11174 <dcgettext@plt>
   19fdc:	movw	ip, #2022	; 0x7e6
   19fe0:	mov	r3, r0
   19fe4:	mov	r1, #1
   19fe8:	movw	r2, #55744	; 0xd9c0
   19fec:	movt	r2, #1
   19ff0:	mov	r0, r4
   19ff4:	str	ip, [sp]
   19ff8:	bl	11324 <__fprintf_chk@plt>
   19ffc:	mov	r1, r4
   1a000:	mov	r0, #10
   1a004:	bl	11168 <fputc_unlocked@plt>
   1a008:	mov	r2, #5
   1a00c:	movw	r1, #55020	; 0xd6ec
   1a010:	movt	r1, #1
   1a014:	mov	r0, #0
   1a018:	bl	11174 <dcgettext@plt>
   1a01c:	mov	r2, r0
   1a020:	mov	r1, #1
   1a024:	movw	r3, #55192	; 0xd798
   1a028:	movt	r3, #1
   1a02c:	mov	r0, r4
   1a030:	bl	11324 <__fprintf_chk@plt>
   1a034:	mov	r1, r4
   1a038:	mov	r0, #10
   1a03c:	bl	11168 <fputc_unlocked@plt>
   1a040:	cmp	r6, #9
   1a044:	ldrls	pc, [pc, r6, lsl #2]
   1a048:	b	1a35c <__assert_fail@plt+0x8f48>
   1a04c:	ldrdeq	sl, [r1], -ip
   1a050:	andeq	sl, r1, ip, lsl #2
   1a054:	andeq	sl, r1, r8, asr #2
   1a058:	andeq	sl, r1, r8, lsl #3
   1a05c:	ldrdeq	sl, [r1], -r0
   1a060:	andeq	sl, r1, r8, lsl #4
   1a064:	andeq	sl, r1, r0, asr r2
   1a068:	andeq	sl, r1, r4, lsr #5
   1a06c:	strdeq	sl, [r1], -ip
   1a070:	andeq	sl, r1, r4, ror r0
   1a074:	movw	r1, #55496	; 0xd8c8
   1a078:	movt	r1, #1
   1a07c:	mov	r2, #5
   1a080:	mov	r0, #0
   1a084:	bl	11174 <dcgettext@plt>
   1a088:	ldr	lr, [r5, #4]
   1a08c:	mov	r2, r0
   1a090:	mov	r1, #1
   1a094:	mov	r0, r4
   1a098:	ldr	r3, [r5, #8]
   1a09c:	ldr	ip, [r5, #32]
   1a0a0:	str	lr, [sp]
   1a0a4:	ldr	lr, [r5, #12]
   1a0a8:	str	ip, [sp, #28]
   1a0ac:	ldr	ip, [r5, #28]
   1a0b0:	str	r3, [sp, #4]
   1a0b4:	ldr	r3, [r5, #16]
   1a0b8:	str	lr, [sp, #8]
   1a0bc:	ldr	lr, [r5, #20]
   1a0c0:	str	ip, [sp, #24]
   1a0c4:	ldr	ip, [r5, #24]
   1a0c8:	str	r3, [sp, #12]
   1a0cc:	ldr	r3, [r5]
   1a0d0:	str	lr, [sp, #16]
   1a0d4:	str	ip, [sp, #20]
   1a0d8:	bl	11324 <__fprintf_chk@plt>
   1a0dc:	add	sp, sp, #32
   1a0e0:	ldrd	r4, [sp]
   1a0e4:	ldr	r6, [sp, #8]
   1a0e8:	add	sp, sp, #12
   1a0ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0f0:	mov	r3, r2
   1a0f4:	mov	r1, #1
   1a0f8:	str	ip, [sp]
   1a0fc:	movw	r2, #55008	; 0xd6e0
   1a100:	movt	r2, #1
   1a104:	bl	11324 <__fprintf_chk@plt>
   1a108:	b	19fc8 <__assert_fail@plt+0x8bb4>
   1a10c:	mov	r2, #5
   1a110:	movw	r1, #55228	; 0xd7bc
   1a114:	movt	r1, #1
   1a118:	mov	r0, #0
   1a11c:	bl	11174 <dcgettext@plt>
   1a120:	ldr	r3, [r5]
   1a124:	mov	r2, r0
   1a128:	mov	r1, #1
   1a12c:	mov	r0, r4
   1a130:	add	sp, sp, #32
   1a134:	ldrd	r4, [sp]
   1a138:	ldr	r6, [sp, #8]
   1a13c:	ldr	lr, [sp, #12]
   1a140:	add	sp, sp, #16
   1a144:	b	11324 <__fprintf_chk@plt>
   1a148:	mov	r2, #5
   1a14c:	movw	r1, #55244	; 0xd7cc
   1a150:	movt	r1, #1
   1a154:	mov	r0, #0
   1a158:	bl	11174 <dcgettext@plt>
   1a15c:	ldm	r5, {r3, ip}
   1a160:	mov	r2, r0
   1a164:	mov	r1, #1
   1a168:	mov	r0, r4
   1a16c:	str	ip, [sp, #48]	; 0x30
   1a170:	add	sp, sp, #32
   1a174:	ldrd	r4, [sp]
   1a178:	ldr	r6, [sp, #8]
   1a17c:	ldr	lr, [sp, #12]
   1a180:	add	sp, sp, #16
   1a184:	b	11324 <__fprintf_chk@plt>
   1a188:	mov	r2, #5
   1a18c:	movw	r1, #55268	; 0xd7e4
   1a190:	movt	r1, #1
   1a194:	mov	r0, #0
   1a198:	bl	11174 <dcgettext@plt>
   1a19c:	ldm	r5, {r3, lr}
   1a1a0:	mov	r2, r0
   1a1a4:	mov	r1, #1
   1a1a8:	mov	r0, r4
   1a1ac:	ldr	ip, [r5, #8]
   1a1b0:	str	lr, [sp, #48]	; 0x30
   1a1b4:	str	ip, [sp, #52]	; 0x34
   1a1b8:	add	sp, sp, #32
   1a1bc:	ldrd	r4, [sp]
   1a1c0:	ldr	r6, [sp, #8]
   1a1c4:	ldr	lr, [sp, #12]
   1a1c8:	add	sp, sp, #16
   1a1cc:	b	11324 <__fprintf_chk@plt>
   1a1d0:	mov	r2, #5
   1a1d4:	movw	r1, #55296	; 0xd800
   1a1d8:	movt	r1, #1
   1a1dc:	mov	r0, #0
   1a1e0:	bl	11174 <dcgettext@plt>
   1a1e4:	ldmib	r5, {r3, ip, lr}
   1a1e8:	mov	r2, r0
   1a1ec:	mov	r1, #1
   1a1f0:	mov	r0, r4
   1a1f4:	str	r3, [sp]
   1a1f8:	ldr	r3, [r5]
   1a1fc:	stmib	sp, {ip, lr}
   1a200:	bl	11324 <__fprintf_chk@plt>
   1a204:	b	1a0dc <__assert_fail@plt+0x8cc8>
   1a208:	mov	r2, #5
   1a20c:	movw	r1, #55328	; 0xd820
   1a210:	movt	r1, #1
   1a214:	mov	r0, #0
   1a218:	bl	11174 <dcgettext@plt>
   1a21c:	ldmib	r5, {ip, lr}
   1a220:	mov	r2, r0
   1a224:	mov	r1, #1
   1a228:	mov	r0, r4
   1a22c:	ldr	r3, [r5, #16]
   1a230:	str	ip, [sp]
   1a234:	ldr	ip, [r5, #12]
   1a238:	str	r3, [sp, #12]
   1a23c:	ldr	r3, [r5]
   1a240:	str	lr, [sp, #4]
   1a244:	str	ip, [sp, #8]
   1a248:	bl	11324 <__fprintf_chk@plt>
   1a24c:	b	1a0dc <__assert_fail@plt+0x8cc8>
   1a250:	mov	r2, #5
   1a254:	movw	r1, #55364	; 0xd844
   1a258:	movt	r1, #1
   1a25c:	mov	r0, #0
   1a260:	bl	11174 <dcgettext@plt>
   1a264:	ldr	lr, [r5, #4]
   1a268:	mov	r2, r0
   1a26c:	mov	r1, #1
   1a270:	mov	r0, r4
   1a274:	ldr	r3, [r5, #8]
   1a278:	ldr	ip, [r5, #20]
   1a27c:	str	lr, [sp]
   1a280:	ldr	lr, [r5, #12]
   1a284:	str	ip, [sp, #16]
   1a288:	ldr	ip, [r5, #16]
   1a28c:	str	r3, [sp, #4]
   1a290:	ldr	r3, [r5]
   1a294:	str	lr, [sp, #8]
   1a298:	str	ip, [sp, #12]
   1a29c:	bl	11324 <__fprintf_chk@plt>
   1a2a0:	b	1a0dc <__assert_fail@plt+0x8cc8>
   1a2a4:	mov	r2, #5
   1a2a8:	movw	r1, #55404	; 0xd86c
   1a2ac:	movt	r1, #1
   1a2b0:	mov	r0, #0
   1a2b4:	bl	11174 <dcgettext@plt>
   1a2b8:	ldmib	r5, {r3, ip}
   1a2bc:	mov	r2, r0
   1a2c0:	mov	r1, #1
   1a2c4:	mov	r0, r4
   1a2c8:	ldr	lr, [r5, #24]
   1a2cc:	str	r3, [sp]
   1a2d0:	ldr	r3, [r5, #12]
   1a2d4:	str	lr, [sp, #20]
   1a2d8:	ldr	lr, [r5, #20]
   1a2dc:	str	ip, [sp, #4]
   1a2e0:	ldr	ip, [r5, #16]
   1a2e4:	str	r3, [sp, #8]
   1a2e8:	ldr	r3, [r5]
   1a2ec:	str	ip, [sp, #12]
   1a2f0:	str	lr, [sp, #16]
   1a2f4:	bl	11324 <__fprintf_chk@plt>
   1a2f8:	b	1a0dc <__assert_fail@plt+0x8cc8>
   1a2fc:	mov	r2, #5
   1a300:	movw	r1, #55448	; 0xd898
   1a304:	movt	r1, #1
   1a308:	mov	r0, #0
   1a30c:	bl	11174 <dcgettext@plt>
   1a310:	ldmib	r5, {ip, lr}
   1a314:	mov	r2, r0
   1a318:	mov	r1, #1
   1a31c:	mov	r0, r4
   1a320:	ldr	r3, [r5, #28]
   1a324:	str	ip, [sp]
   1a328:	ldr	ip, [r5, #12]
   1a32c:	str	r3, [sp, #24]
   1a330:	ldr	r3, [r5, #24]
   1a334:	str	lr, [sp, #4]
   1a338:	ldr	lr, [r5, #16]
   1a33c:	str	ip, [sp, #8]
   1a340:	ldr	ip, [r5, #20]
   1a344:	str	r3, [sp, #20]
   1a348:	ldr	r3, [r5]
   1a34c:	str	lr, [sp, #12]
   1a350:	str	ip, [sp, #16]
   1a354:	bl	11324 <__fprintf_chk@plt>
   1a358:	b	1a0dc <__assert_fail@plt+0x8cc8>
   1a35c:	movw	r1, #55548	; 0xd8fc
   1a360:	movt	r1, #1
   1a364:	b	1a07c <__assert_fail@plt+0x8c68>
   1a368:	strd	r4, [sp, #-12]!
   1a36c:	str	lr, [sp, #8]
   1a370:	sub	sp, sp, #12
   1a374:	ldr	r5, [sp, #24]
   1a378:	ldr	ip, [r5]
   1a37c:	cmp	ip, #0
   1a380:	beq	1a39c <__assert_fail@plt+0x8f88>
   1a384:	mov	lr, r5
   1a388:	mov	ip, #0
   1a38c:	ldr	r4, [lr, #4]!
   1a390:	add	ip, ip, #1
   1a394:	cmp	r4, #0
   1a398:	bne	1a38c <__assert_fail@plt+0x8f78>
   1a39c:	stm	sp, {r5, ip}
   1a3a0:	bl	19f88 <__assert_fail@plt+0x8b74>
   1a3a4:	add	sp, sp, #12
   1a3a8:	ldrd	r4, [sp]
   1a3ac:	add	sp, sp, #8
   1a3b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3b4:	strd	r4, [sp, #-16]!
   1a3b8:	mov	ip, #0
   1a3bc:	str	r6, [sp, #8]
   1a3c0:	str	lr, [sp, #12]
   1a3c4:	sub	sp, sp, #48	; 0x30
   1a3c8:	ldr	r5, [sp, #64]	; 0x40
   1a3cc:	add	r6, sp, #8
   1a3d0:	mov	r4, r6
   1a3d4:	ldr	lr, [r5], #4
   1a3d8:	cmp	lr, #0
   1a3dc:	str	lr, [r4], #4
   1a3e0:	beq	1a3f0 <__assert_fail@plt+0x8fdc>
   1a3e4:	add	ip, ip, #1
   1a3e8:	cmp	ip, #10
   1a3ec:	bne	1a3d4 <__assert_fail@plt+0x8fc0>
   1a3f0:	stm	sp, {r6, ip}
   1a3f4:	bl	19f88 <__assert_fail@plt+0x8b74>
   1a3f8:	add	sp, sp, #48	; 0x30
   1a3fc:	ldrd	r4, [sp]
   1a400:	ldr	r6, [sp, #8]
   1a404:	add	sp, sp, #12
   1a408:	pop	{pc}		; (ldr pc, [sp], #4)
   1a40c:	push	{r3}		; (str r3, [sp, #-4]!)
   1a410:	mov	ip, #0
   1a414:	strd	r4, [sp, #-12]!
   1a418:	str	lr, [sp, #8]
   1a41c:	sub	sp, sp, #56	; 0x38
   1a420:	add	r3, sp, #72	; 0x48
   1a424:	add	r5, sp, #16
   1a428:	mov	r4, r3
   1a42c:	mov	lr, r5
   1a430:	str	r3, [sp, #12]
   1a434:	ldr	r3, [r4], #4
   1a438:	cmp	r3, #0
   1a43c:	str	r3, [lr], #4
   1a440:	beq	1a450 <__assert_fail@plt+0x903c>
   1a444:	add	ip, ip, #1
   1a448:	cmp	ip, #10
   1a44c:	bne	1a434 <__assert_fail@plt+0x9020>
   1a450:	ldr	r3, [sp, #68]	; 0x44
   1a454:	stm	sp, {r5, ip}
   1a458:	bl	19f88 <__assert_fail@plt+0x8b74>
   1a45c:	add	sp, sp, #56	; 0x38
   1a460:	ldrd	r4, [sp]
   1a464:	ldr	lr, [sp, #8]
   1a468:	add	sp, sp, #12
   1a46c:	add	sp, sp, #4
   1a470:	bx	lr
   1a474:	movw	r3, #57796	; 0xe1c4
   1a478:	movt	r3, #2
   1a47c:	str	r4, [sp, #-8]!
   1a480:	mov	r0, #10
   1a484:	ldr	r1, [r3]
   1a488:	str	lr, [sp, #4]
   1a48c:	bl	11168 <fputc_unlocked@plt>
   1a490:	mov	r2, #5
   1a494:	movw	r1, #55608	; 0xd938
   1a498:	movt	r1, #1
   1a49c:	mov	r0, #0
   1a4a0:	bl	11174 <dcgettext@plt>
   1a4a4:	mov	r1, r0
   1a4a8:	movw	r2, #55628	; 0xd94c
   1a4ac:	movt	r2, #1
   1a4b0:	mov	r0, #1
   1a4b4:	bl	11300 <__printf_chk@plt>
   1a4b8:	mov	r2, #5
   1a4bc:	movw	r1, #55652	; 0xd964
   1a4c0:	movt	r1, #1
   1a4c4:	mov	r0, #0
   1a4c8:	bl	11174 <dcgettext@plt>
   1a4cc:	mov	r1, r0
   1a4d0:	movw	r3, #52824	; 0xce58
   1a4d4:	movt	r3, #1
   1a4d8:	movw	r2, #52864	; 0xce80
   1a4dc:	movt	r2, #1
   1a4e0:	mov	r0, #1
   1a4e4:	bl	11300 <__printf_chk@plt>
   1a4e8:	mov	r2, #5
   1a4ec:	movw	r1, #55672	; 0xd978
   1a4f0:	movt	r1, #1
   1a4f4:	mov	r0, #0
   1a4f8:	bl	11174 <dcgettext@plt>
   1a4fc:	mov	r1, r0
   1a500:	movw	r2, #55712	; 0xd9a0
   1a504:	movt	r2, #1
   1a508:	mov	r0, #1
   1a50c:	ldr	r4, [sp]
   1a510:	ldr	lr, [sp, #4]
   1a514:	add	sp, sp, #8
   1a518:	b	11300 <__printf_chk@plt>
   1a51c:	str	r4, [sp, #-8]!
   1a520:	str	lr, [sp, #4]
   1a524:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   1a528:	cmp	r0, #0
   1a52c:	beq	1a53c <__assert_fail@plt+0x9128>
   1a530:	ldr	r4, [sp]
   1a534:	add	sp, sp, #4
   1a538:	pop	{pc}		; (ldr pc, [sp], #4)
   1a53c:	bl	1a994 <__assert_fail@plt+0x9580>
   1a540:	str	r4, [sp, #-8]!
   1a544:	str	lr, [sp, #4]
   1a548:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   1a54c:	cmp	r0, #0
   1a550:	beq	1a560 <__assert_fail@plt+0x914c>
   1a554:	ldr	r4, [sp]
   1a558:	add	sp, sp, #4
   1a55c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a560:	bl	1a994 <__assert_fail@plt+0x9580>
   1a564:	str	r4, [sp, #-8]!
   1a568:	str	lr, [sp, #4]
   1a56c:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   1a570:	cmp	r0, #0
   1a574:	beq	1a584 <__assert_fail@plt+0x9170>
   1a578:	ldr	r4, [sp]
   1a57c:	add	sp, sp, #4
   1a580:	pop	{pc}		; (ldr pc, [sp], #4)
   1a584:	bl	1a994 <__assert_fail@plt+0x9580>
   1a588:	strd	r4, [sp, #-16]!
   1a58c:	mov	r5, r0
   1a590:	mov	r4, r1
   1a594:	str	r6, [sp, #8]
   1a598:	str	lr, [sp, #12]
   1a59c:	bl	1b6f4 <__assert_fail@plt+0xa2e0>
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a5b8 <__assert_fail@plt+0x91a4>
   1a5a8:	ldrd	r4, [sp]
   1a5ac:	ldr	r6, [sp, #8]
   1a5b0:	add	sp, sp, #12
   1a5b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5b8:	adds	r4, r4, #0
   1a5bc:	movne	r4, #1
   1a5c0:	cmp	r5, #0
   1a5c4:	moveq	r4, #1
   1a5c8:	cmp	r4, #0
   1a5cc:	beq	1a5a8 <__assert_fail@plt+0x9194>
   1a5d0:	bl	1a994 <__assert_fail@plt+0x9580>
   1a5d4:	cmp	r1, #0
   1a5d8:	orreq	r1, r1, #1
   1a5dc:	str	r4, [sp, #-8]!
   1a5e0:	str	lr, [sp, #4]
   1a5e4:	bl	1b6f4 <__assert_fail@plt+0xa2e0>
   1a5e8:	cmp	r0, #0
   1a5ec:	beq	1a5fc <__assert_fail@plt+0x91e8>
   1a5f0:	ldr	r4, [sp]
   1a5f4:	add	sp, sp, #4
   1a5f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5fc:	bl	1a994 <__assert_fail@plt+0x9580>
   1a600:	strd	r4, [sp, #-16]!
   1a604:	mov	r4, r0
   1a608:	mov	r5, r2
   1a60c:	str	r6, [sp, #8]
   1a610:	mov	r6, r1
   1a614:	str	lr, [sp, #12]
   1a618:	bl	1bbd8 <__assert_fail@plt+0xa7c4>
   1a61c:	cmp	r0, #0
   1a620:	beq	1a634 <__assert_fail@plt+0x9220>
   1a624:	ldrd	r4, [sp]
   1a628:	ldr	r6, [sp, #8]
   1a62c:	add	sp, sp, #12
   1a630:	pop	{pc}		; (ldr pc, [sp], #4)
   1a634:	cmp	r4, #0
   1a638:	beq	1a648 <__assert_fail@plt+0x9234>
   1a63c:	cmp	r6, #0
   1a640:	cmpne	r5, #0
   1a644:	beq	1a624 <__assert_fail@plt+0x9210>
   1a648:	bl	1a994 <__assert_fail@plt+0x9580>
   1a64c:	b	1a600 <__assert_fail@plt+0x91ec>
   1a650:	cmp	r2, #0
   1a654:	cmpne	r1, #0
   1a658:	str	r4, [sp, #-8]!
   1a65c:	moveq	r2, #1
   1a660:	str	lr, [sp, #4]
   1a664:	moveq	r1, r2
   1a668:	bl	1bbd8 <__assert_fail@plt+0xa7c4>
   1a66c:	cmp	r0, #0
   1a670:	beq	1a680 <__assert_fail@plt+0x926c>
   1a674:	ldr	r4, [sp]
   1a678:	add	sp, sp, #4
   1a67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a680:	bl	1a994 <__assert_fail@plt+0x9580>
   1a684:	mov	r2, r1
   1a688:	mov	r1, r0
   1a68c:	mov	r0, #0
   1a690:	b	1a600 <__assert_fail@plt+0x91ec>
   1a694:	mov	r2, r1
   1a698:	mov	r1, r0
   1a69c:	mov	r0, #0
   1a6a0:	b	1a650 <__assert_fail@plt+0x923c>
   1a6a4:	cmp	r0, #0
   1a6a8:	strd	r4, [sp, #-16]!
   1a6ac:	mov	r5, r1
   1a6b0:	ldr	r4, [r1]
   1a6b4:	str	r6, [sp, #8]
   1a6b8:	str	lr, [sp, #12]
   1a6bc:	beq	1a6ec <__assert_fail@plt+0x92d8>
   1a6c0:	lsr	r3, r4, #1
   1a6c4:	add	r3, r3, #1
   1a6c8:	adds	r4, r4, r3
   1a6cc:	bcs	1a708 <__assert_fail@plt+0x92f4>
   1a6d0:	mov	r1, r4
   1a6d4:	bl	1a600 <__assert_fail@plt+0x91ec>
   1a6d8:	ldr	r6, [sp, #8]
   1a6dc:	str	r4, [r5]
   1a6e0:	ldrd	r4, [sp]
   1a6e4:	add	sp, sp, #12
   1a6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6ec:	cmp	r4, #0
   1a6f0:	bne	1a6d0 <__assert_fail@plt+0x92bc>
   1a6f4:	mov	r4, #64	; 0x40
   1a6f8:	udiv	r4, r4, r2
   1a6fc:	cmp	r2, #64	; 0x40
   1a700:	addhi	r4, r4, #1
   1a704:	b	1a6d0 <__assert_fail@plt+0x92bc>
   1a708:	bl	1a994 <__assert_fail@plt+0x9580>
   1a70c:	mov	r2, #1
   1a710:	b	1a6a4 <__assert_fail@plt+0x9290>
   1a714:	ldr	ip, [r1]
   1a718:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a71c:	mov	r5, r1
   1a720:	strd	r6, [sp, #8]
   1a724:	str	lr, [sp, #28]
   1a728:	strd	r8, [sp, #16]
   1a72c:	asr	lr, ip, #1
   1a730:	ldr	r8, [sp, #32]
   1a734:	str	sl, [sp, #24]
   1a738:	adds	r4, ip, lr
   1a73c:	mvn	lr, r3
   1a740:	lsr	lr, lr, #31
   1a744:	mvnvs	r4, #-2147483648	; 0x80000000
   1a748:	cmp	r3, r4
   1a74c:	movge	r1, #0
   1a750:	andlt	r1, lr, #1
   1a754:	cmp	r1, #0
   1a758:	movne	r4, r3
   1a75c:	smull	r6, r7, r4, r8
   1a760:	cmp	r7, r6, asr #31
   1a764:	bne	1a7ec <__assert_fail@plt+0x93d8>
   1a768:	cmp	r6, #63	; 0x3f
   1a76c:	mov	r1, r6
   1a770:	ble	1a7d4 <__assert_fail@plt+0x93c0>
   1a774:	cmp	r0, #0
   1a778:	sub	r6, r4, ip
   1a77c:	streq	r0, [r5]
   1a780:	cmp	r6, r2
   1a784:	bge	1a7b4 <__assert_fail@plt+0x93a0>
   1a788:	adds	r4, ip, r2
   1a78c:	bvs	1a7e8 <__assert_fail@plt+0x93d4>
   1a790:	cmp	r4, r3
   1a794:	movle	r3, #0
   1a798:	andgt	r3, lr, #1
   1a79c:	cmp	r3, #0
   1a7a0:	bne	1a7e8 <__assert_fail@plt+0x93d4>
   1a7a4:	smull	r8, r9, r4, r8
   1a7a8:	cmp	r9, r8, asr #31
   1a7ac:	mov	r1, r8
   1a7b0:	bne	1a7e8 <__assert_fail@plt+0x93d4>
   1a7b4:	bl	1a588 <__assert_fail@plt+0x9174>
   1a7b8:	ldrd	r6, [sp, #8]
   1a7bc:	ldrd	r8, [sp, #16]
   1a7c0:	ldr	sl, [sp, #24]
   1a7c4:	str	r4, [r5]
   1a7c8:	ldrd	r4, [sp]
   1a7cc:	add	sp, sp, #28
   1a7d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7d4:	mov	r6, #64	; 0x40
   1a7d8:	sdiv	r4, r6, r8
   1a7dc:	mls	r1, r8, r4, r6
   1a7e0:	sub	r1, r6, r1
   1a7e4:	b	1a774 <__assert_fail@plt+0x9360>
   1a7e8:	bl	1a994 <__assert_fail@plt+0x9580>
   1a7ec:	mvn	r6, #-2147483648	; 0x80000000
   1a7f0:	b	1a7d8 <__assert_fail@plt+0x93c4>
   1a7f4:	mov	r1, #1
   1a7f8:	str	r4, [sp, #-8]!
   1a7fc:	str	lr, [sp, #4]
   1a800:	bl	1b644 <__assert_fail@plt+0xa230>
   1a804:	cmp	r0, #0
   1a808:	beq	1a818 <__assert_fail@plt+0x9404>
   1a80c:	ldr	r4, [sp]
   1a810:	add	sp, sp, #4
   1a814:	pop	{pc}		; (ldr pc, [sp], #4)
   1a818:	bl	1a994 <__assert_fail@plt+0x9580>
   1a81c:	mov	r1, #1
   1a820:	str	r4, [sp, #-8]!
   1a824:	str	lr, [sp, #4]
   1a828:	bl	1b644 <__assert_fail@plt+0xa230>
   1a82c:	cmp	r0, #0
   1a830:	beq	1a840 <__assert_fail@plt+0x942c>
   1a834:	ldr	r4, [sp]
   1a838:	add	sp, sp, #4
   1a83c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a840:	bl	1a994 <__assert_fail@plt+0x9580>
   1a844:	str	r4, [sp, #-8]!
   1a848:	str	lr, [sp, #4]
   1a84c:	bl	1b644 <__assert_fail@plt+0xa230>
   1a850:	cmp	r0, #0
   1a854:	beq	1a864 <__assert_fail@plt+0x9450>
   1a858:	ldr	r4, [sp]
   1a85c:	add	sp, sp, #4
   1a860:	pop	{pc}		; (ldr pc, [sp], #4)
   1a864:	bl	1a994 <__assert_fail@plt+0x9580>
   1a868:	str	r4, [sp, #-8]!
   1a86c:	str	lr, [sp, #4]
   1a870:	bl	1b644 <__assert_fail@plt+0xa230>
   1a874:	cmp	r0, #0
   1a878:	beq	1a888 <__assert_fail@plt+0x9474>
   1a87c:	ldr	r4, [sp]
   1a880:	add	sp, sp, #4
   1a884:	pop	{pc}		; (ldr pc, [sp], #4)
   1a888:	bl	1a994 <__assert_fail@plt+0x9580>
   1a88c:	strd	r4, [sp, #-16]!
   1a890:	mov	r4, r1
   1a894:	str	r6, [sp, #8]
   1a898:	mov	r6, r0
   1a89c:	mov	r0, r1
   1a8a0:	str	lr, [sp, #12]
   1a8a4:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   1a8a8:	subs	r5, r0, #0
   1a8ac:	beq	1a8d0 <__assert_fail@plt+0x94bc>
   1a8b0:	mov	r2, r4
   1a8b4:	mov	r1, r6
   1a8b8:	bl	1112c <memcpy@plt>
   1a8bc:	mov	r0, r5
   1a8c0:	ldrd	r4, [sp]
   1a8c4:	ldr	r6, [sp, #8]
   1a8c8:	add	sp, sp, #12
   1a8cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8d0:	bl	1a994 <__assert_fail@plt+0x9580>
   1a8d4:	strd	r4, [sp, #-16]!
   1a8d8:	mov	r4, r1
   1a8dc:	str	r6, [sp, #8]
   1a8e0:	mov	r6, r0
   1a8e4:	mov	r0, r1
   1a8e8:	str	lr, [sp, #12]
   1a8ec:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   1a8f0:	subs	r5, r0, #0
   1a8f4:	beq	1a918 <__assert_fail@plt+0x9504>
   1a8f8:	mov	r2, r4
   1a8fc:	mov	r1, r6
   1a900:	bl	1112c <memcpy@plt>
   1a904:	mov	r0, r5
   1a908:	ldrd	r4, [sp]
   1a90c:	ldr	r6, [sp, #8]
   1a910:	add	sp, sp, #12
   1a914:	pop	{pc}		; (ldr pc, [sp], #4)
   1a918:	bl	1a994 <__assert_fail@plt+0x9580>
   1a91c:	strd	r4, [sp, #-16]!
   1a920:	mov	r4, r1
   1a924:	str	r6, [sp, #8]
   1a928:	mov	r6, r0
   1a92c:	add	r0, r1, #1
   1a930:	str	lr, [sp, #12]
   1a934:	bl	1b6b8 <__assert_fail@plt+0xa2a4>
   1a938:	subs	r5, r0, #0
   1a93c:	beq	1a968 <__assert_fail@plt+0x9554>
   1a940:	mov	r3, #0
   1a944:	mov	r1, r6
   1a948:	mov	r2, r4
   1a94c:	strb	r3, [r5, r4]
   1a950:	bl	1112c <memcpy@plt>
   1a954:	mov	r0, r5
   1a958:	ldrd	r4, [sp]
   1a95c:	ldr	r6, [sp, #8]
   1a960:	add	sp, sp, #12
   1a964:	pop	{pc}		; (ldr pc, [sp], #4)
   1a968:	bl	1a994 <__assert_fail@plt+0x9580>
   1a96c:	str	r4, [sp, #-8]!
   1a970:	mov	r4, r0
   1a974:	str	lr, [sp, #4]
   1a978:	bl	112a0 <strlen@plt>
   1a97c:	add	r1, r0, #1
   1a980:	mov	r0, r4
   1a984:	ldr	r4, [sp]
   1a988:	ldr	lr, [sp, #4]
   1a98c:	add	sp, sp, #8
   1a990:	b	1a88c <__assert_fail@plt+0x9478>
   1a994:	movw	r3, #57704	; 0xe168
   1a998:	movt	r3, #2
   1a99c:	str	r4, [sp, #-8]!
   1a9a0:	ldr	r4, [r3]
   1a9a4:	mov	r2, #5
   1a9a8:	movw	r1, #55792	; 0xd9f0
   1a9ac:	movt	r1, #1
   1a9b0:	mov	r0, #0
   1a9b4:	str	lr, [sp, #4]
   1a9b8:	bl	11174 <dcgettext@plt>
   1a9bc:	mov	r3, r0
   1a9c0:	movw	r2, #53092	; 0xcf64
   1a9c4:	movt	r2, #1
   1a9c8:	mov	r1, #0
   1a9cc:	mov	r0, r4
   1a9d0:	bl	1121c <error@plt>
   1a9d4:	bl	113f0 <abort@plt>
   1a9d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a9dc:	strd	r6, [sp, #8]
   1a9e0:	mov	r6, r2
   1a9e4:	mov	r7, r3
   1a9e8:	str	r8, [sp, #16]
   1a9ec:	mov	r2, r1
   1a9f0:	mov	r1, #0
   1a9f4:	str	lr, [sp, #20]
   1a9f8:	sub	sp, sp, #16
   1a9fc:	mov	r8, r0
   1aa00:	ldr	ip, [sp, #48]	; 0x30
   1aa04:	add	r3, sp, #8
   1aa08:	str	ip, [sp]
   1aa0c:	bl	1ac9c <__assert_fail@plt+0x9888>
   1aa10:	subs	r4, r0, #0
   1aa14:	bne	1aa64 <__assert_fail@plt+0x9650>
   1aa18:	ldrd	r4, [sp, #8]
   1aa1c:	ldrd	r0, [sp, #40]	; 0x28
   1aa20:	cmp	r5, r7
   1aa24:	cmpeq	r4, r6
   1aa28:	movcc	r3, #1
   1aa2c:	movcs	r3, #0
   1aa30:	cmp	r5, r1
   1aa34:	cmpeq	r4, r0
   1aa38:	orrhi	r3, r3, #1
   1aa3c:	cmp	r3, #0
   1aa40:	bne	1aae4 <__assert_fail@plt+0x96d0>
   1aa44:	mov	r0, r4
   1aa48:	mov	r1, r5
   1aa4c:	add	sp, sp, #16
   1aa50:	ldrd	r4, [sp]
   1aa54:	ldrd	r6, [sp, #8]
   1aa58:	ldr	r8, [sp, #16]
   1aa5c:	add	sp, sp, #20
   1aa60:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa64:	bl	112dc <__errno_location@plt>
   1aa68:	cmp	r4, #1
   1aa6c:	moveq	r3, #75	; 0x4b
   1aa70:	moveq	r4, r3
   1aa74:	streq	r3, [r0]
   1aa78:	beq	1aacc <__assert_fail@plt+0x96b8>
   1aa7c:	cmp	r4, #3
   1aa80:	beq	1aac0 <__assert_fail@plt+0x96ac>
   1aa84:	ldr	r3, [sp, #56]	; 0x38
   1aa88:	ldr	r4, [r0]
   1aa8c:	cmp	r3, #0
   1aa90:	beq	1aad8 <__assert_fail@plt+0x96c4>
   1aa94:	cmp	r4, #22
   1aa98:	moveq	r4, #0
   1aa9c:	mov	r0, r8
   1aaa0:	bl	19e90 <__assert_fail@plt+0x8a7c>
   1aaa4:	movw	r2, #53088	; 0xcf60
   1aaa8:	movt	r2, #1
   1aaac:	str	r0, [sp]
   1aab0:	mov	r1, r4
   1aab4:	ldr	r3, [sp, #52]	; 0x34
   1aab8:	ldr	r0, [sp, #56]	; 0x38
   1aabc:	bl	1121c <error@plt>
   1aac0:	mov	r3, #0
   1aac4:	mov	r4, r3
   1aac8:	str	r3, [r0]
   1aacc:	ldr	r3, [sp, #56]	; 0x38
   1aad0:	cmp	r3, #0
   1aad4:	bne	1aa9c <__assert_fail@plt+0x9688>
   1aad8:	mov	r3, #1
   1aadc:	str	r3, [sp, #56]	; 0x38
   1aae0:	b	1aa94 <__assert_fail@plt+0x9680>
   1aae4:	bl	112dc <__errno_location@plt>
   1aae8:	mov	r3, #0
   1aaec:	mvn	r2, #-1073741824	; 0xc0000000
   1aaf0:	cmp	r5, r3
   1aaf4:	cmpeq	r4, r2
   1aaf8:	movhi	r3, #75	; 0x4b
   1aafc:	movls	r3, #34	; 0x22
   1ab00:	mov	r4, r3
   1ab04:	str	r3, [r0]
   1ab08:	ldr	r3, [sp, #56]	; 0x38
   1ab0c:	cmp	r3, #0
   1ab10:	moveq	r3, #1
   1ab14:	str	r3, [sp, #56]	; 0x38
   1ab18:	b	1aa9c <__assert_fail@plt+0x9688>
   1ab1c:	mov	r1, #10
   1ab20:	b	1a9d8 <__assert_fail@plt+0x95c4>
   1ab24:	andeq	r0, r0, r0
   1ab28:	strd	r4, [sp, #-12]!
   1ab2c:	str	lr, [sp, #8]
   1ab30:	vpush	{d8}
   1ab34:	sub	sp, sp, #12
   1ab38:	vmov.f64	d8, d0
   1ab3c:	bl	112dc <__errno_location@plt>
   1ab40:	vldr	d7, [pc, #136]	; 1abd0 <__assert_fail@plt+0x97bc>
   1ab44:	mov	r4, r0
   1ab48:	vcmpe.f64	d8, d7
   1ab4c:	vmrs	APSR_nzcv, fpscr
   1ab50:	bge	1aba0 <__assert_fail@plt+0x978c>
   1ab54:	vmov.f64	d0, d8
   1ab58:	mov	r0, sp
   1ab5c:	mov	r5, #0
   1ab60:	bl	1b868 <__assert_fail@plt+0xa454>
   1ab64:	b	1ab74 <__assert_fail@plt+0x9760>
   1ab68:	ldr	r3, [r4]
   1ab6c:	bics	r3, r3, #4
   1ab70:	bne	1abc4 <__assert_fail@plt+0x97b0>
   1ab74:	mov	r1, sp
   1ab78:	mov	r0, sp
   1ab7c:	str	r5, [r4]
   1ab80:	bl	11114 <nanosleep@plt>
   1ab84:	cmp	r0, #0
   1ab88:	bne	1ab68 <__assert_fail@plt+0x9754>
   1ab8c:	add	sp, sp, #12
   1ab90:	vpop	{d8}
   1ab94:	ldrd	r4, [sp]
   1ab98:	add	sp, sp, #8
   1ab9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aba0:	bl	110e4 <pause@plt>
   1aba4:	ldr	r3, [r4]
   1aba8:	cmp	r3, #4
   1abac:	bne	1ab54 <__assert_fail@plt+0x9740>
   1abb0:	bl	110e4 <pause@plt>
   1abb4:	ldr	r3, [r4]
   1abb8:	cmp	r3, #4
   1abbc:	beq	1aba0 <__assert_fail@plt+0x978c>
   1abc0:	b	1ab54 <__assert_fail@plt+0x9740>
   1abc4:	mvn	r0, #0
   1abc8:	b	1ab8c <__assert_fail@plt+0x9778>
   1abcc:	nop	{0}
   1abd0:	andeq	r0, r0, r0
   1abd4:	mvnmi	r0, r0
   1abd8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1abdc:	mov	r5, r1
   1abe0:	mov	r4, #0
   1abe4:	strd	r6, [sp, #8]
   1abe8:	mov	r6, r0
   1abec:	strd	r8, [sp, #16]
   1abf0:	mov	r9, r3
   1abf4:	mov	r8, r2
   1abf8:	str	lr, [sp, #24]
   1abfc:	sub	sp, sp, #12
   1ac00:	bl	112dc <__errno_location@plt>
   1ac04:	mov	r7, r0
   1ac08:	add	r1, sp, #4
   1ac0c:	mov	r0, r6
   1ac10:	str	r4, [r7]
   1ac14:	blx	r9
   1ac18:	ldr	r3, [sp, #4]
   1ac1c:	cmp	r3, r6
   1ac20:	beq	1ac94 <__assert_fail@plt+0x9880>
   1ac24:	cmp	r5, r4
   1ac28:	beq	1ac70 <__assert_fail@plt+0x985c>
   1ac2c:	vcmp.f64	d0, #0.0
   1ac30:	vmrs	APSR_nzcv, fpscr
   1ac34:	moveq	r0, #1
   1ac38:	beq	1ac50 <__assert_fail@plt+0x983c>
   1ac3c:	ldr	r0, [r7]
   1ac40:	subs	r0, r0, #34	; 0x22
   1ac44:	movne	r0, #1
   1ac48:	cmp	r5, #0
   1ac4c:	beq	1ac54 <__assert_fail@plt+0x9840>
   1ac50:	str	r3, [r5]
   1ac54:	vstr	d0, [r8]
   1ac58:	add	sp, sp, #12
   1ac5c:	ldrd	r4, [sp]
   1ac60:	ldrd	r6, [sp, #8]
   1ac64:	ldrd	r8, [sp, #16]
   1ac68:	add	sp, sp, #24
   1ac6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac70:	ldrb	r2, [r3]
   1ac74:	cmp	r2, r4
   1ac78:	movne	r0, r5
   1ac7c:	bne	1ac54 <__assert_fail@plt+0x9840>
   1ac80:	vcmp.f64	d0, #0.0
   1ac84:	vmrs	APSR_nzcv, fpscr
   1ac88:	bne	1ac3c <__assert_fail@plt+0x9828>
   1ac8c:	mov	r0, #1
   1ac90:	b	1ac54 <__assert_fail@plt+0x9840>
   1ac94:	mov	r0, r4
   1ac98:	b	1ac48 <__assert_fail@plt+0x9834>
   1ac9c:	cmp	r2, #36	; 0x24
   1aca0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aca4:	strd	r6, [sp, #8]
   1aca8:	strd	r8, [sp, #16]
   1acac:	strd	sl, [sp, #24]
   1acb0:	str	lr, [sp, #32]
   1acb4:	sub	sp, sp, #36	; 0x24
   1acb8:	bhi	1b548 <__assert_fail@plt+0xa134>
   1acbc:	cmp	r1, #0
   1acc0:	mov	r8, r2
   1acc4:	mov	r6, r0
   1acc8:	mov	r5, r1
   1accc:	mov	sl, r3
   1acd0:	addeq	r5, sp, #28
   1acd4:	bl	112dc <__errno_location@plt>
   1acd8:	mov	r3, #0
   1acdc:	mov	r7, r0
   1ace0:	str	r3, [r0]
   1ace4:	bl	11288 <__ctype_b_loc@plt>
   1ace8:	ldrb	r3, [r6]
   1acec:	mov	r2, r6
   1acf0:	ldr	r0, [r0]
   1acf4:	b	1acfc <__assert_fail@plt+0x98e8>
   1acf8:	ldrb	r3, [r2, #1]!
   1acfc:	lsl	r1, r3, #1
   1ad00:	ldrh	r4, [r0, r1]
   1ad04:	ands	r4, r4, #8192	; 0x2000
   1ad08:	bne	1acf8 <__assert_fail@plt+0x98e4>
   1ad0c:	cmp	r3, #45	; 0x2d
   1ad10:	beq	1adb0 <__assert_fail@plt+0x999c>
   1ad14:	mov	r2, r8
   1ad18:	mov	r3, r4
   1ad1c:	mov	r1, r5
   1ad20:	mov	r0, r6
   1ad24:	bl	11138 <__strtoull_internal@plt>
   1ad28:	ldr	fp, [r5]
   1ad2c:	mov	r9, r0
   1ad30:	mov	r8, r1
   1ad34:	cmp	fp, r6
   1ad38:	beq	1ad98 <__assert_fail@plt+0x9984>
   1ad3c:	ldr	r4, [r7]
   1ad40:	cmp	r4, #0
   1ad44:	bne	1ad88 <__assert_fail@plt+0x9974>
   1ad48:	ldr	r3, [sp, #72]	; 0x48
   1ad4c:	cmp	r3, #0
   1ad50:	beq	1ad60 <__assert_fail@plt+0x994c>
   1ad54:	ldrb	r6, [fp]
   1ad58:	cmp	r6, #0
   1ad5c:	bne	1b0a0 <__assert_fail@plt+0x9c8c>
   1ad60:	str	r9, [sl]
   1ad64:	str	r8, [sl, #4]
   1ad68:	mov	r0, r4
   1ad6c:	add	sp, sp, #36	; 0x24
   1ad70:	ldrd	r4, [sp]
   1ad74:	ldrd	r6, [sp, #8]
   1ad78:	ldrd	r8, [sp, #16]
   1ad7c:	ldrd	sl, [sp, #24]
   1ad80:	add	sp, sp, #32
   1ad84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad88:	cmp	r4, #34	; 0x22
   1ad8c:	bne	1adb0 <__assert_fail@plt+0x999c>
   1ad90:	mov	r4, #1
   1ad94:	b	1ad48 <__assert_fail@plt+0x9934>
   1ad98:	ldr	r3, [sp, #72]	; 0x48
   1ad9c:	cmp	r3, #0
   1ada0:	beq	1adb0 <__assert_fail@plt+0x999c>
   1ada4:	ldrb	r6, [r6]
   1ada8:	cmp	r6, #0
   1adac:	bne	1adb8 <__assert_fail@plt+0x99a4>
   1adb0:	mov	r4, #4
   1adb4:	b	1ad68 <__assert_fail@plt+0x9954>
   1adb8:	mov	r1, r6
   1adbc:	mov	r0, r3
   1adc0:	bl	112b8 <strchr@plt>
   1adc4:	cmp	r0, #0
   1adc8:	movne	r9, #1
   1adcc:	movne	r8, #0
   1add0:	beq	1adb0 <__assert_fail@plt+0x999c>
   1add4:	sub	r3, r6, #69	; 0x45
   1add8:	cmp	r3, #47	; 0x2f
   1addc:	ldrls	pc, [pc, r3, lsl #2]
   1ade0:	b	1aee8 <__assert_fail@plt+0x9ad4>
   1ade4:	andeq	sl, r1, r4, lsr #29
   1ade8:	andeq	sl, r1, r8, ror #29
   1adec:	andeq	sl, r1, r4, lsr #29
   1adf0:	andeq	sl, r1, r8, ror #29
   1adf4:	andeq	sl, r1, r8, ror #29
   1adf8:	andeq	sl, r1, r8, ror #29
   1adfc:	andeq	sl, r1, r4, lsr #29
   1ae00:	andeq	sl, r1, r8, ror #29
   1ae04:	andeq	sl, r1, r4, lsr #29
   1ae08:	andeq	sl, r1, r8, ror #29
   1ae0c:	andeq	sl, r1, r8, ror #29
   1ae10:	andeq	sl, r1, r4, lsr #29
   1ae14:	andeq	sl, r1, r8, ror #29
   1ae18:	andeq	sl, r1, r8, ror #29
   1ae1c:	andeq	sl, r1, r8, ror #29
   1ae20:	andeq	sl, r1, r4, lsr #29
   1ae24:	andeq	sl, r1, r8, ror #29
   1ae28:	andeq	sl, r1, r8, ror #29
   1ae2c:	andeq	sl, r1, r8, ror #29
   1ae30:	andeq	sl, r1, r8, ror #29
   1ae34:	andeq	sl, r1, r4, lsr #29
   1ae38:	andeq	sl, r1, r4, lsr #29
   1ae3c:	andeq	sl, r1, r8, ror #29
   1ae40:	andeq	sl, r1, r8, ror #29
   1ae44:	andeq	sl, r1, r8, ror #29
   1ae48:	andeq	sl, r1, r8, ror #29
   1ae4c:	andeq	sl, r1, r8, ror #29
   1ae50:	andeq	sl, r1, r8, ror #29
   1ae54:	andeq	sl, r1, r8, ror #29
   1ae58:	andeq	sl, r1, r8, ror #29
   1ae5c:	andeq	sl, r1, r8, ror #29
   1ae60:	andeq	sl, r1, r8, ror #29
   1ae64:	andeq	sl, r1, r8, ror #29
   1ae68:	andeq	sl, r1, r8, ror #29
   1ae6c:	andeq	sl, r1, r4, lsr #29
   1ae70:	andeq	sl, r1, r8, ror #29
   1ae74:	andeq	sl, r1, r8, ror #29
   1ae78:	andeq	sl, r1, r8, ror #29
   1ae7c:	andeq	sl, r1, r4, lsr #29
   1ae80:	andeq	sl, r1, r8, ror #29
   1ae84:	andeq	sl, r1, r4, lsr #29
   1ae88:	andeq	sl, r1, r8, ror #29
   1ae8c:	andeq	sl, r1, r8, ror #29
   1ae90:	andeq	sl, r1, r8, ror #29
   1ae94:	andeq	sl, r1, r8, ror #29
   1ae98:	andeq	sl, r1, r8, ror #29
   1ae9c:	andeq	sl, r1, r8, ror #29
   1aea0:	andeq	sl, r1, r4, lsr #29
   1aea4:	mov	r1, #48	; 0x30
   1aea8:	ldr	r0, [sp, #72]	; 0x48
   1aeac:	bl	112b8 <strchr@plt>
   1aeb0:	cmp	r0, #0
   1aeb4:	beq	1aee8 <__assert_fail@plt+0x9ad4>
   1aeb8:	ldrb	r3, [fp, #1]
   1aebc:	cmp	r3, #68	; 0x44
   1aec0:	beq	1b414 <__assert_fail@plt+0xa000>
   1aec4:	cmp	r3, #105	; 0x69
   1aec8:	beq	1b0b8 <__assert_fail@plt+0x9ca4>
   1aecc:	cmp	r3, #66	; 0x42
   1aed0:	moveq	r3, #2
   1aed4:	movne	r3, #1
   1aed8:	moveq	r7, #1000	; 0x3e8
   1aedc:	movne	r7, #1024	; 0x400
   1aee0:	str	r3, [sp, #4]
   1aee4:	b	1aef4 <__assert_fail@plt+0x9ae0>
   1aee8:	mov	r3, #1
   1aeec:	mov	r7, #1024	; 0x400
   1aef0:	str	r3, [sp, #4]
   1aef4:	sub	r6, r6, #66	; 0x42
   1aef8:	cmp	r6, #53	; 0x35
   1aefc:	ldrls	pc, [pc, r6, lsl #2]
   1af00:	b	1b064 <__assert_fail@plt+0x9c50>
   1af04:			; <UNDEFINED> instruction: 0x0001b3bc
   1af08:	andeq	fp, r1, r4, rrx
   1af0c:	andeq	fp, r1, r4, rrx
   1af10:	andeq	fp, r1, r8, asr #3
   1af14:	andeq	fp, r1, r4, rrx
   1af18:	ldrdeq	sl, [r1], -ip
   1af1c:	andeq	fp, r1, r4, rrx
   1af20:	andeq	fp, r1, r4, rrx
   1af24:	andeq	fp, r1, r4, rrx
   1af28:	andeq	fp, r1, ip, rrx
   1af2c:	andeq	fp, r1, r4, rrx
   1af30:	andeq	fp, r1, r8, ror #6
   1af34:	andeq	fp, r1, r4, rrx
   1af38:	andeq	fp, r1, r4, rrx
   1af3c:			; <UNDEFINED> instruction: 0x0001b2b8
   1af40:	andeq	fp, r1, r4, rrx
   1af44:	andeq	fp, r1, r4, rrx
   1af48:	andeq	fp, r1, r4, rrx
   1af4c:	andeq	fp, r1, r0, asr #4
   1af50:	andeq	fp, r1, r4, rrx
   1af54:	andeq	fp, r1, r4, rrx
   1af58:	andeq	fp, r1, r4, rrx
   1af5c:	andeq	fp, r1, r4, rrx
   1af60:	andeq	fp, r1, r0, asr r1
   1af64:	ldrdeq	fp, [r1], -r4
   1af68:	andeq	fp, r1, r4, rrx
   1af6c:	andeq	fp, r1, r4, rrx
   1af70:	andeq	fp, r1, r4, rrx
   1af74:	andeq	fp, r1, r4, rrx
   1af78:	andeq	fp, r1, r4, rrx
   1af7c:	andeq	fp, r1, r4, rrx
   1af80:	andeq	fp, r1, r4, rrx
   1af84:	andeq	fp, r1, r8, asr #6
   1af88:	andeq	fp, r1, ip, asr #32
   1af8c:	andeq	fp, r1, r4, rrx
   1af90:	andeq	fp, r1, r4, rrx
   1af94:	andeq	fp, r1, r4, rrx
   1af98:	ldrdeq	sl, [r1], -ip
   1af9c:	andeq	fp, r1, r4, rrx
   1afa0:	andeq	fp, r1, r4, rrx
   1afa4:	andeq	fp, r1, r4, rrx
   1afa8:	andeq	fp, r1, ip, rrx
   1afac:	andeq	fp, r1, r4, rrx
   1afb0:	andeq	fp, r1, r8, ror #6
   1afb4:	andeq	fp, r1, r4, rrx
   1afb8:	andeq	fp, r1, r4, rrx
   1afbc:	andeq	fp, r1, r4, rrx
   1afc0:	andeq	fp, r1, r4, rrx
   1afc4:	andeq	fp, r1, r4, rrx
   1afc8:	andeq	fp, r1, r4, rrx
   1afcc:	andeq	fp, r1, r0, asr #4
   1afd0:	andeq	fp, r1, r4, rrx
   1afd4:	andeq	fp, r1, r4, rrx
   1afd8:	andeq	fp, r1, r0, lsr r3
   1afdc:	asr	r3, r7, #31
   1afe0:	mov	r2, r7
   1afe4:	cmp	r8, #0
   1afe8:	umull	r0, r1, r9, r7
   1afec:	mov	ip, #0
   1aff0:	strd	r2, [sp, #8]
   1aff4:	bne	1b448 <__assert_fail@plt+0xa034>
   1aff8:	mov	r2, r0
   1affc:	mov	r3, r1
   1b000:	cmp	ip, #0
   1b004:	bne	1b090 <__assert_fail@plt+0x9c7c>
   1b008:	cmp	r3, #0
   1b00c:	mov	lr, ip
   1b010:	bne	1b4ac <__assert_fail@plt+0xa098>
   1b014:	umull	r2, r3, r2, r7
   1b018:	mov	ip, r2
   1b01c:	mov	r1, r3
   1b020:	subs	r0, lr, #0
   1b024:	bne	1b090 <__assert_fail@plt+0x9c7c>
   1b028:	cmp	r1, #0
   1b02c:	bne	1b48c <__assert_fail@plt+0xa078>
   1b030:	umull	r2, r3, ip, r7
   1b034:	mov	r6, r2
   1b038:	mov	r2, r3
   1b03c:	cmp	r0, #0
   1b040:	mov	r9, r6
   1b044:	mov	r8, r2
   1b048:	bne	1b090 <__assert_fail@plt+0x9c7c>
   1b04c:	ldr	r2, [sp, #4]
   1b050:	add	r3, fp, r2
   1b054:	str	r3, [r5]
   1b058:	ldrb	r3, [fp, r2]
   1b05c:	cmp	r3, #0
   1b060:	beq	1ad60 <__assert_fail@plt+0x994c>
   1b064:	orr	r4, r4, #2
   1b068:	b	1ad60 <__assert_fail@plt+0x994c>
   1b06c:	cmp	r8, #0
   1b070:	umull	r2, r3, r9, r7
   1b074:	mov	ip, #0
   1b078:	asr	r1, r7, #31
   1b07c:	bne	1b3e4 <__assert_fail@plt+0x9fd0>
   1b080:	mov	r9, r2
   1b084:	mov	r8, r3
   1b088:	cmp	ip, #0
   1b08c:	beq	1b04c <__assert_fail@plt+0x9c38>
   1b090:	mvn	r9, #0
   1b094:	mov	r4, #1
   1b098:	mov	r8, r9
   1b09c:	b	1b04c <__assert_fail@plt+0x9c38>
   1b0a0:	mov	r1, r6
   1b0a4:	ldr	r0, [sp, #72]	; 0x48
   1b0a8:	bl	112b8 <strchr@plt>
   1b0ac:	cmp	r0, #0
   1b0b0:	bne	1add4 <__assert_fail@plt+0x99c0>
   1b0b4:	b	1b064 <__assert_fail@plt+0x9c50>
   1b0b8:	ldrb	r3, [fp, #2]
   1b0bc:	mov	r7, #1024	; 0x400
   1b0c0:	cmp	r3, #66	; 0x42
   1b0c4:	movne	r3, #1
   1b0c8:	moveq	r3, #3
   1b0cc:	str	r3, [sp, #4]
   1b0d0:	b	1aef4 <__assert_fail@plt+0x9ae0>
   1b0d4:	asr	r3, r7, #31
   1b0d8:	mov	r2, r7
   1b0dc:	mov	ip, #0
   1b0e0:	mov	r0, #7
   1b0e4:	mov	lr, ip
   1b0e8:	mov	r6, r4
   1b0ec:	strd	r2, [sp, #8]
   1b0f0:	str	r5, [sp, #16]
   1b0f4:	b	1b120 <__assert_fail@plt+0x9d0c>
   1b0f8:	umull	r2, r3, r9, r7
   1b0fc:	mov	r9, r2
   1b100:	mov	r8, r3
   1b104:	cmp	r1, #0
   1b108:	beq	1b118 <__assert_fail@plt+0x9d04>
   1b10c:	mvn	r9, #0
   1b110:	mov	ip, #1
   1b114:	mov	r8, r9
   1b118:	subs	r0, r0, #1
   1b11c:	beq	1b408 <__assert_fail@plt+0x9ff4>
   1b120:	cmp	r8, #0
   1b124:	mov	r1, #0
   1b128:	beq	1b0f8 <__assert_fail@plt+0x9ce4>
   1b12c:	umull	r4, r5, r9, r7
   1b130:	mov	r3, lr
   1b134:	mov	r2, r5
   1b138:	umlal	r2, r3, r8, r7
   1b13c:	cmp	r3, #0
   1b140:	bne	1b568 <__assert_fail@plt+0xa154>
   1b144:	mov	r9, r4
   1b148:	mov	r8, r2
   1b14c:	b	1b104 <__assert_fail@plt+0x9cf0>
   1b150:	asr	r3, r7, #31
   1b154:	mov	r2, r7
   1b158:	mov	r6, #0
   1b15c:	mov	lr, #8
   1b160:	mov	r0, r4
   1b164:	mov	ip, r5
   1b168:	strd	r2, [sp, #8]
   1b16c:	b	1b198 <__assert_fail@plt+0x9d84>
   1b170:	umull	r2, r3, r9, r7
   1b174:	mov	r9, r2
   1b178:	mov	r8, r3
   1b17c:	cmp	r1, #0
   1b180:	beq	1b190 <__assert_fail@plt+0x9d7c>
   1b184:	mvn	r9, #0
   1b188:	mov	r6, #1
   1b18c:	mov	r8, r9
   1b190:	subs	lr, lr, #1
   1b194:	beq	1b3d8 <__assert_fail@plt+0x9fc4>
   1b198:	cmp	r8, #0
   1b19c:	mov	r1, #0
   1b1a0:	beq	1b170 <__assert_fail@plt+0x9d5c>
   1b1a4:	umull	r4, r5, r9, r7
   1b1a8:	mov	r3, #0
   1b1ac:	mov	r2, r5
   1b1b0:	umlal	r2, r3, r8, r7
   1b1b4:	cmp	r3, #0
   1b1b8:	bne	1b5c0 <__assert_fail@plt+0xa1ac>
   1b1bc:	mov	r9, r4
   1b1c0:	mov	r8, r2
   1b1c4:	b	1b17c <__assert_fail@plt+0x9d68>
   1b1c8:	asr	r3, r7, #31
   1b1cc:	mov	r2, r7
   1b1d0:	mov	r6, #0
   1b1d4:	mov	lr, #6
   1b1d8:	mov	r0, r4
   1b1dc:	mov	ip, r5
   1b1e0:	strd	r2, [sp, #8]
   1b1e4:	b	1b210 <__assert_fail@plt+0x9dfc>
   1b1e8:	umull	r2, r3, r9, r7
   1b1ec:	mov	r9, r2
   1b1f0:	mov	r8, r3
   1b1f4:	cmp	r1, #0
   1b1f8:	beq	1b208 <__assert_fail@plt+0x9df4>
   1b1fc:	mvn	r9, #0
   1b200:	mov	r6, #1
   1b204:	mov	r8, r9
   1b208:	subs	lr, lr, #1
   1b20c:	beq	1b3d8 <__assert_fail@plt+0x9fc4>
   1b210:	cmp	r8, #0
   1b214:	mov	r1, #0
   1b218:	beq	1b1e8 <__assert_fail@plt+0x9dd4>
   1b21c:	umull	r4, r5, r9, r7
   1b220:	mov	r3, #0
   1b224:	mov	r2, r5
   1b228:	umlal	r2, r3, r8, r7
   1b22c:	cmp	r3, #0
   1b230:	bne	1b588 <__assert_fail@plt+0xa174>
   1b234:	mov	r9, r4
   1b238:	mov	r8, r2
   1b23c:	b	1b1f4 <__assert_fail@plt+0x9de0>
   1b240:	asr	r3, r7, #31
   1b244:	mov	r2, r7
   1b248:	mov	r6, #0
   1b24c:	mov	lr, #4
   1b250:	mov	r0, r4
   1b254:	mov	ip, r5
   1b258:	strd	r2, [sp, #8]
   1b25c:	b	1b288 <__assert_fail@plt+0x9e74>
   1b260:	umull	r2, r3, r9, r7
   1b264:	mov	r9, r2
   1b268:	mov	r8, r3
   1b26c:	cmp	r1, #0
   1b270:	beq	1b280 <__assert_fail@plt+0x9e6c>
   1b274:	mvn	r9, #0
   1b278:	mov	r6, #1
   1b27c:	mov	r8, r9
   1b280:	subs	lr, lr, #1
   1b284:	beq	1b3d8 <__assert_fail@plt+0x9fc4>
   1b288:	cmp	r8, #0
   1b28c:	mov	r1, #0
   1b290:	beq	1b260 <__assert_fail@plt+0x9e4c>
   1b294:	umull	r4, r5, r9, r7
   1b298:	mov	r3, #0
   1b29c:	mov	r2, r5
   1b2a0:	umlal	r2, r3, r8, r7
   1b2a4:	cmp	r3, #0
   1b2a8:	bne	1b5a4 <__assert_fail@plt+0xa190>
   1b2ac:	mov	r9, r4
   1b2b0:	mov	r8, r2
   1b2b4:	b	1b26c <__assert_fail@plt+0x9e58>
   1b2b8:	asr	r3, r7, #31
   1b2bc:	mov	r2, r7
   1b2c0:	mov	r6, #0
   1b2c4:	mov	lr, #5
   1b2c8:	mov	r0, r4
   1b2cc:	mov	ip, r5
   1b2d0:	strd	r2, [sp, #8]
   1b2d4:	b	1b300 <__assert_fail@plt+0x9eec>
   1b2d8:	umull	r2, r3, r9, r7
   1b2dc:	mov	r9, r2
   1b2e0:	mov	r8, r3
   1b2e4:	cmp	r1, #0
   1b2e8:	beq	1b2f8 <__assert_fail@plt+0x9ee4>
   1b2ec:	mvn	r9, #0
   1b2f0:	mov	r6, #1
   1b2f4:	mov	r8, r9
   1b2f8:	subs	lr, lr, #1
   1b2fc:	beq	1b3d8 <__assert_fail@plt+0x9fc4>
   1b300:	cmp	r8, #0
   1b304:	mov	r1, #0
   1b308:	beq	1b2d8 <__assert_fail@plt+0x9ec4>
   1b30c:	umull	r4, r5, r9, r7
   1b310:	mov	r3, #0
   1b314:	mov	r2, r5
   1b318:	umlal	r2, r3, r8, r7
   1b31c:	cmp	r3, #0
   1b320:	bne	1b510 <__assert_fail@plt+0xa0fc>
   1b324:	mov	r9, r4
   1b328:	mov	r8, r2
   1b32c:	b	1b2e4 <__assert_fail@plt+0x9ed0>
   1b330:	lsr	r3, r8, #31
   1b334:	adds	r9, r9, r9
   1b338:	adc	r8, r8, r8
   1b33c:	cmp	r3, #0
   1b340:	beq	1b04c <__assert_fail@plt+0x9c38>
   1b344:	b	1b090 <__assert_fail@plt+0x9c7c>
   1b348:	lsr	r3, r8, #23
   1b34c:	lsl	r8, r8, #9
   1b350:	cmp	r3, #0
   1b354:	lsl	r3, r9, #9
   1b358:	orr	r8, r8, r9, lsr #23
   1b35c:	bne	1b090 <__assert_fail@plt+0x9c7c>
   1b360:	mov	r9, r3
   1b364:	b	1b04c <__assert_fail@plt+0x9c38>
   1b368:	asr	r3, r7, #31
   1b36c:	mov	r2, r7
   1b370:	cmp	r8, #0
   1b374:	mov	r1, #0
   1b378:	strd	r2, [sp, #8]
   1b37c:	umull	r2, r3, r9, r7
   1b380:	bne	1b424 <__assert_fail@plt+0xa010>
   1b384:	mov	r0, r2
   1b388:	mov	ip, r3
   1b38c:	cmp	r1, #0
   1b390:	bne	1b090 <__assert_fail@plt+0x9c7c>
   1b394:	cmp	ip, #0
   1b398:	bne	1b46c <__assert_fail@plt+0xa058>
   1b39c:	umull	r2, r3, r0, r7
   1b3a0:	mov	r6, r2
   1b3a4:	mov	r2, r3
   1b3a8:	cmp	r1, #0
   1b3ac:	mov	r9, r6
   1b3b0:	mov	r8, r2
   1b3b4:	beq	1b04c <__assert_fail@plt+0x9c38>
   1b3b8:	b	1b090 <__assert_fail@plt+0x9c7c>
   1b3bc:	lsr	r3, r8, #22
   1b3c0:	lsl	r8, r8, #10
   1b3c4:	cmp	r3, #0
   1b3c8:	lsl	r3, r9, #10
   1b3cc:	orr	r8, r8, r9, lsr #22
   1b3d0:	beq	1b360 <__assert_fail@plt+0x9f4c>
   1b3d4:	b	1b090 <__assert_fail@plt+0x9c7c>
   1b3d8:	mov	r5, ip
   1b3dc:	orr	r4, r0, r6
   1b3e0:	b	1b04c <__assert_fail@plt+0x9c38>
   1b3e4:	strd	r2, [sp, #8]
   1b3e8:	mov	r3, ip
   1b3ec:	ldr	r2, [sp, #12]
   1b3f0:	umlal	r2, r3, r8, r7
   1b3f4:	cmp	r3, #0
   1b3f8:	bne	1b52c <__assert_fail@plt+0xa118>
   1b3fc:	mov	r8, r2
   1b400:	ldr	r9, [sp, #8]
   1b404:	b	1b088 <__assert_fail@plt+0x9c74>
   1b408:	orr	r4, r6, ip
   1b40c:	ldr	r5, [sp, #16]
   1b410:	b	1b04c <__assert_fail@plt+0x9c38>
   1b414:	mov	r3, #2
   1b418:	mov	r7, #1000	; 0x3e8
   1b41c:	str	r3, [sp, #4]
   1b420:	b	1aef4 <__assert_fail@plt+0x9ae0>
   1b424:	strd	r2, [sp, #16]
   1b428:	mov	r3, r1
   1b42c:	ldr	r2, [sp, #20]
   1b430:	umlal	r2, r3, r8, r7
   1b434:	cmp	r3, #0
   1b438:	bne	1b5fc <__assert_fail@plt+0xa1e8>
   1b43c:	mov	ip, r2
   1b440:	ldr	r0, [sp, #16]
   1b444:	b	1b38c <__assert_fail@plt+0x9f78>
   1b448:	mov	r2, r1
   1b44c:	mov	r3, ip
   1b450:	umlal	r2, r3, r8, r7
   1b454:	cmp	r3, #0
   1b458:	strd	r2, [sp, #16]
   1b45c:	bne	1b4d0 <__assert_fail@plt+0xa0bc>
   1b460:	mov	r2, r0
   1b464:	ldr	r3, [sp, #16]
   1b468:	b	1b000 <__assert_fail@plt+0x9bec>
   1b46c:	umull	r8, r9, r0, r7
   1b470:	mov	r3, r1
   1b474:	mov	r2, r9
   1b478:	umlal	r2, r3, ip, r7
   1b47c:	cmp	r3, #0
   1b480:	bne	1b5dc <__assert_fail@plt+0xa1c8>
   1b484:	mov	r6, r8
   1b488:	b	1b3a8 <__assert_fail@plt+0x9f94>
   1b48c:	umull	r8, r9, ip, r7
   1b490:	mov	r3, r0
   1b494:	mov	r2, r9
   1b498:	umlal	r2, r3, r1, r7
   1b49c:	cmp	r3, #0
   1b4a0:	bne	1b624 <__assert_fail@plt+0xa210>
   1b4a4:	mov	r6, r8
   1b4a8:	b	1b03c <__assert_fail@plt+0x9c28>
   1b4ac:	umull	r8, r9, r2, r7
   1b4b0:	mov	r1, ip
   1b4b4:	mov	r0, r9
   1b4b8:	umlal	r0, r1, r3, r7
   1b4bc:	cmp	r1, #0
   1b4c0:	bne	1b4f0 <__assert_fail@plt+0xa0dc>
   1b4c4:	mov	ip, r8
   1b4c8:	mov	r1, r0
   1b4cc:	b	1b020 <__assert_fail@plt+0x9c0c>
   1b4d0:	ldr	lr, [sp, #8]
   1b4d4:	mov	r2, r0
   1b4d8:	mov	ip, #1
   1b4dc:	ldr	r3, [sp, #12]
   1b4e0:	mul	r3, r9, r3
   1b4e4:	mla	r3, lr, r8, r3
   1b4e8:	add	r3, r3, r1
   1b4ec:	b	1b000 <__assert_fail@plt+0x9bec>
   1b4f0:	ldr	r1, [sp, #12]
   1b4f4:	mov	lr, #1
   1b4f8:	mov	ip, r8
   1b4fc:	mul	r1, r2, r1
   1b500:	ldr	r2, [sp, #8]
   1b504:	mla	r1, r3, r2, r1
   1b508:	add	r1, r1, r9
   1b50c:	b	1b020 <__assert_fail@plt+0x9c0c>
   1b510:	ldrd	r2, [sp, #8]
   1b514:	mov	r1, #1
   1b518:	mul	r3, r9, r3
   1b51c:	mov	r9, r4
   1b520:	mla	r8, r2, r8, r3
   1b524:	add	r8, r8, r5
   1b528:	b	1b2e4 <__assert_fail@plt+0x9ed0>
   1b52c:	mul	r3, r9, r1
   1b530:	mov	ip, #1
   1b534:	mla	r8, r7, r8, r3
   1b538:	ldrd	r6, [sp, #8]
   1b53c:	mov	r9, r6
   1b540:	add	r8, r8, r7
   1b544:	b	1b088 <__assert_fail@plt+0x9c74>
   1b548:	movw	r3, #55812	; 0xda04
   1b54c:	movt	r3, #1
   1b550:	movw	r1, #55824	; 0xda10
   1b554:	movt	r1, #1
   1b558:	movw	r0, #55840	; 0xda20
   1b55c:	movt	r0, #1
   1b560:	mov	r2, #85	; 0x55
   1b564:	bl	11414 <__assert_fail@plt>
   1b568:	ldr	r3, [sp, #12]
   1b56c:	mov	r1, #1
   1b570:	mul	r2, r9, r3
   1b574:	ldr	r3, [sp, #8]
   1b578:	mov	r9, r4
   1b57c:	mla	r8, r3, r8, r2
   1b580:	add	r8, r8, r5
   1b584:	b	1b104 <__assert_fail@plt+0x9cf0>
   1b588:	ldrd	r2, [sp, #8]
   1b58c:	mov	r1, #1
   1b590:	mul	r3, r9, r3
   1b594:	mov	r9, r4
   1b598:	mla	r8, r2, r8, r3
   1b59c:	add	r8, r8, r5
   1b5a0:	b	1b1f4 <__assert_fail@plt+0x9de0>
   1b5a4:	ldrd	r2, [sp, #8]
   1b5a8:	mov	r1, #1
   1b5ac:	mul	r3, r9, r3
   1b5b0:	mov	r9, r4
   1b5b4:	mla	r8, r2, r8, r3
   1b5b8:	add	r8, r8, r5
   1b5bc:	b	1b26c <__assert_fail@plt+0x9e58>
   1b5c0:	ldrd	r2, [sp, #8]
   1b5c4:	mov	r1, #1
   1b5c8:	mul	r3, r9, r3
   1b5cc:	mov	r9, r4
   1b5d0:	mla	r8, r2, r8, r3
   1b5d4:	add	r8, r8, r5
   1b5d8:	b	1b17c <__assert_fail@plt+0x9d68>
   1b5dc:	ldr	r3, [sp, #12]
   1b5e0:	mov	r6, r8
   1b5e4:	mov	r1, #1
   1b5e8:	mul	r2, r0, r3
   1b5ec:	ldr	r3, [sp, #8]
   1b5f0:	mla	r2, ip, r3, r2
   1b5f4:	add	r2, r2, r9
   1b5f8:	b	1b3a8 <__assert_fail@plt+0x9f94>
   1b5fc:	ldr	r3, [sp, #12]
   1b600:	mov	r1, #1
   1b604:	ldr	r2, [sp, #16]
   1b608:	mul	ip, r9, r3
   1b60c:	ldr	r3, [sp, #8]
   1b610:	mov	r0, r2
   1b614:	mla	ip, r3, r8, ip
   1b618:	ldr	r3, [sp, #20]
   1b61c:	add	ip, ip, r3
   1b620:	b	1b38c <__assert_fail@plt+0x9f78>
   1b624:	ldr	r3, [sp, #12]
   1b628:	mov	r6, r8
   1b62c:	mov	r0, #1
   1b630:	mul	r2, ip, r3
   1b634:	ldr	r3, [sp, #8]
   1b638:	mla	r2, r1, r3, r2
   1b63c:	add	r2, r2, r9
   1b640:	b	1b03c <__assert_fail@plt+0x9c28>
   1b644:	cmp	r1, #0
   1b648:	cmpne	r0, #0
   1b64c:	beq	1b698 <__assert_fail@plt+0xa284>
   1b650:	strd	r4, [sp, #-16]!
   1b654:	umull	r4, r5, r0, r1
   1b658:	str	r6, [sp, #8]
   1b65c:	str	lr, [sp, #12]
   1b660:	adds	r3, r5, #0
   1b664:	movne	r3, #1
   1b668:	cmp	r4, #0
   1b66c:	blt	1b678 <__assert_fail@plt+0xa264>
   1b670:	cmp	r3, #0
   1b674:	beq	1b6a4 <__assert_fail@plt+0xa290>
   1b678:	bl	112dc <__errno_location@plt>
   1b67c:	mov	r3, #12
   1b680:	ldrd	r4, [sp]
   1b684:	ldr	r6, [sp, #8]
   1b688:	add	sp, sp, #12
   1b68c:	str	r3, [r0]
   1b690:	mov	r0, #0
   1b694:	pop	{pc}		; (ldr pc, [sp], #4)
   1b698:	mov	r1, #1
   1b69c:	mov	r0, r1
   1b6a0:	b	110a8 <calloc@plt>
   1b6a4:	ldrd	r4, [sp]
   1b6a8:	ldr	r6, [sp, #8]
   1b6ac:	ldr	lr, [sp, #12]
   1b6b0:	add	sp, sp, #16
   1b6b4:	b	110a8 <calloc@plt>
   1b6b8:	cmp	r0, #0
   1b6bc:	beq	1b6c8 <__assert_fail@plt+0xa2b4>
   1b6c0:	blt	1b6d0 <__assert_fail@plt+0xa2bc>
   1b6c4:	b	11240 <malloc@plt>
   1b6c8:	mov	r0, #1
   1b6cc:	b	11240 <malloc@plt>
   1b6d0:	str	r4, [sp, #-8]!
   1b6d4:	str	lr, [sp, #4]
   1b6d8:	bl	112dc <__errno_location@plt>
   1b6dc:	mov	r3, #12
   1b6e0:	ldr	r4, [sp]
   1b6e4:	add	sp, sp, #4
   1b6e8:	str	r3, [r0]
   1b6ec:	mov	r0, #0
   1b6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6f4:	cmp	r0, #0
   1b6f8:	beq	1b720 <__assert_fail@plt+0xa30c>
   1b6fc:	cmp	r1, #0
   1b700:	str	r4, [sp, #-8]!
   1b704:	str	lr, [sp, #4]
   1b708:	beq	1b728 <__assert_fail@plt+0xa314>
   1b70c:	blt	1b73c <__assert_fail@plt+0xa328>
   1b710:	ldr	r4, [sp]
   1b714:	ldr	lr, [sp, #4]
   1b718:	add	sp, sp, #8
   1b71c:	b	11180 <realloc@plt>
   1b720:	mov	r0, r1
   1b724:	b	1b6b8 <__assert_fail@plt+0xa2a4>
   1b728:	bl	16854 <__assert_fail@plt+0x5440>
   1b72c:	ldr	r4, [sp]
   1b730:	add	sp, sp, #4
   1b734:	mov	r0, #0
   1b738:	pop	{pc}		; (ldr pc, [sp], #4)
   1b73c:	bl	112dc <__errno_location@plt>
   1b740:	mov	r3, #12
   1b744:	str	r3, [r0]
   1b748:	b	1b72c <__assert_fail@plt+0xa318>
   1b74c:	andeq	r0, r0, r0
   1b750:	strd	r4, [sp, #-16]!
   1b754:	movw	r4, #58144	; 0xe320
   1b758:	movt	r4, #2
   1b75c:	ldr	r2, [r4]
   1b760:	mov	r5, r1
   1b764:	str	r6, [sp, #8]
   1b768:	mov	r6, r0
   1b76c:	str	lr, [sp, #12]
   1b770:	cmp	r2, #0
   1b774:	beq	1b7bc <__assert_fail@plt+0xa3a8>
   1b778:	ldr	r2, [r4]
   1b77c:	cmp	r2, #0
   1b780:	beq	1b7a0 <__assert_fail@plt+0xa38c>
   1b784:	mov	r1, r5
   1b788:	mov	r0, r6
   1b78c:	ldrd	r4, [sp]
   1b790:	ldr	r6, [sp, #8]
   1b794:	ldr	lr, [sp, #12]
   1b798:	add	sp, sp, #16
   1b79c:	b	11354 <strtod_l@plt>
   1b7a0:	cmp	r5, #0
   1b7a4:	vldr	d0, [pc, #44]	; 1b7d8 <__assert_fail@plt+0xa3c4>
   1b7a8:	strne	r6, [r5]
   1b7ac:	ldrd	r4, [sp]
   1b7b0:	ldr	r6, [sp, #8]
   1b7b4:	add	sp, sp, #12
   1b7b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7bc:	movw	r1, #55880	; 0xda48
   1b7c0:	movt	r1, #1
   1b7c4:	movw	r0, #8127	; 0x1fbf
   1b7c8:	bl	1139c <newlocale@plt>
   1b7cc:	str	r0, [r4]
   1b7d0:	b	1b778 <__assert_fail@plt+0xa364>
   1b7d4:	nop	{0}
	...
   1b7e0:	strd	r4, [sp, #-16]!
   1b7e4:	mov	r4, r0
   1b7e8:	str	r6, [sp, #8]
   1b7ec:	str	lr, [sp, #12]
   1b7f0:	bl	11204 <__fpending@plt>
   1b7f4:	ldr	r5, [r4]
   1b7f8:	mov	r6, r0
   1b7fc:	mov	r0, r4
   1b800:	bl	1b938 <__assert_fail@plt+0xa524>
   1b804:	mov	r4, r0
   1b808:	and	r5, r5, #32
   1b80c:	cmp	r5, #0
   1b810:	bne	1b848 <__assert_fail@plt+0xa434>
   1b814:	cmp	r0, #0
   1b818:	beq	1b834 <__assert_fail@plt+0xa420>
   1b81c:	cmp	r6, #0
   1b820:	bne	1b860 <__assert_fail@plt+0xa44c>
   1b824:	bl	112dc <__errno_location@plt>
   1b828:	ldr	r4, [r0]
   1b82c:	subs	r4, r4, #9
   1b830:	mvnne	r4, #0
   1b834:	mov	r0, r4
   1b838:	ldrd	r4, [sp]
   1b83c:	ldr	r6, [sp, #8]
   1b840:	add	sp, sp, #12
   1b844:	pop	{pc}		; (ldr pc, [sp], #4)
   1b848:	cmp	r0, #0
   1b84c:	bne	1b860 <__assert_fail@plt+0xa44c>
   1b850:	bl	112dc <__errno_location@plt>
   1b854:	str	r4, [r0]
   1b858:	mvn	r4, #0
   1b85c:	b	1b834 <__assert_fail@plt+0xa420>
   1b860:	mvn	r4, #0
   1b864:	b	1b834 <__assert_fail@plt+0xa420>
   1b868:	vldr	d7, [pc, #176]	; 1b920 <__assert_fail@plt+0xa50c>
   1b86c:	vcmpe.f64	d0, d7
   1b870:	vmrs	APSR_nzcv, fpscr
   1b874:	ble	1b910 <__assert_fail@plt+0xa4fc>
   1b878:	vldr	d7, [pc, #168]	; 1b928 <__assert_fail@plt+0xa514>
   1b87c:	vcmpe.f64	d0, d7
   1b880:	vmrs	APSR_nzcv, fpscr
   1b884:	bmi	1b89c <__assert_fail@plt+0xa488>
   1b888:	mvn	r2, #-2147483648	; 0x80000000
   1b88c:	movw	r3, #51711	; 0xc9ff
   1b890:	movt	r3, #15258	; 0x3b9a
   1b894:	strd	r2, [r0]
   1b898:	bx	lr
   1b89c:	vcvt.s32.f64	s15, d0
   1b8a0:	vldr	d6, [pc, #136]	; 1b930 <__assert_fail@plt+0xa51c>
   1b8a4:	movw	r1, #12193	; 0x2fa1
   1b8a8:	movt	r1, #17592	; 0x44b8
   1b8ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1b8b0:	mov	ip, #51712	; 0xca00
   1b8b4:	movt	ip, #15258	; 0x3b9a
   1b8b8:	vcvt.f64.s32	d5, s15
   1b8bc:	vsub.f64	d0, d0, d5
   1b8c0:	vmul.f64	d0, d0, d6
   1b8c4:	vcvt.s32.f64	s14, d0
   1b8c8:	vcvt.f64.s32	d6, s14
   1b8cc:	vmov	r3, s14
   1b8d0:	vcmpe.f64	d6, d0
   1b8d4:	vmrs	APSR_nzcv, fpscr
   1b8d8:	movmi	r2, #1
   1b8dc:	movpl	r2, #0
   1b8e0:	add	r2, r2, r3
   1b8e4:	asr	r3, r2, #31
   1b8e8:	smull	lr, r1, r1, r2
   1b8ec:	rsb	r3, r3, r1, asr #28
   1b8f0:	vmov	r1, s15
   1b8f4:	add	r1, r3, r1
   1b8f8:	mls	r3, ip, r3, r2
   1b8fc:	cmp	r3, #0
   1b900:	sublt	r1, r1, #1
   1b904:	addlt	r3, r3, ip
   1b908:	stm	r0, {r1, r3}
   1b90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b910:	mov	r2, #-2147483648	; 0x80000000
   1b914:	mov	r3, #0
   1b918:	strd	r2, [r0]
   1b91c:	bx	lr
   1b920:	andeq	r0, r0, r0
   1b924:	mvngt	r0, r0
   1b928:	andeq	r0, r0, r0
   1b92c:	mvnmi	r0, r0
   1b930:	andeq	r0, r0, r0
   1b934:	bicmi	ip, sp, r5, ror #26
   1b938:	strd	r4, [sp, #-12]!
   1b93c:	mov	r4, r0
   1b940:	str	lr, [sp, #8]
   1b944:	sub	sp, sp, #12
   1b948:	bl	11318 <fileno@plt>
   1b94c:	cmp	r0, #0
   1b950:	mov	r0, r4
   1b954:	blt	1b9d8 <__assert_fail@plt+0xa5c4>
   1b958:	bl	11258 <__freading@plt>
   1b95c:	cmp	r0, #0
   1b960:	bne	1b9a4 <__assert_fail@plt+0xa590>
   1b964:	mov	r0, r4
   1b968:	bl	1b9ec <__assert_fail@plt+0xa5d8>
   1b96c:	cmp	r0, #0
   1b970:	beq	1b9d4 <__assert_fail@plt+0xa5c0>
   1b974:	bl	112dc <__errno_location@plt>
   1b978:	mov	r5, r0
   1b97c:	mov	r0, r4
   1b980:	ldr	r4, [r5]
   1b984:	bl	1133c <fclose@plt>
   1b988:	cmp	r4, #0
   1b98c:	mvnne	r0, #0
   1b990:	strne	r4, [r5]
   1b994:	add	sp, sp, #12
   1b998:	ldrd	r4, [sp]
   1b99c:	add	sp, sp, #8
   1b9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9a4:	mov	r0, r4
   1b9a8:	bl	11318 <fileno@plt>
   1b9ac:	mov	r1, #1
   1b9b0:	mov	r2, #0
   1b9b4:	mov	r3, #0
   1b9b8:	str	r1, [sp]
   1b9bc:	bl	111ec <lseek64@plt>
   1b9c0:	mvn	r3, #0
   1b9c4:	mvn	r2, #0
   1b9c8:	cmp	r1, r3
   1b9cc:	cmpeq	r0, r2
   1b9d0:	bne	1b964 <__assert_fail@plt+0xa550>
   1b9d4:	mov	r0, r4
   1b9d8:	add	sp, sp, #12
   1b9dc:	ldrd	r4, [sp]
   1b9e0:	ldr	lr, [sp, #8]
   1b9e4:	add	sp, sp, #12
   1b9e8:	b	1133c <fclose@plt>
   1b9ec:	str	r4, [sp, #-8]!
   1b9f0:	subs	r4, r0, #0
   1b9f4:	str	lr, [sp, #4]
   1b9f8:	sub	sp, sp, #8
   1b9fc:	beq	1ba18 <__assert_fail@plt+0xa604>
   1ba00:	bl	11258 <__freading@plt>
   1ba04:	cmp	r0, #0
   1ba08:	beq	1ba18 <__assert_fail@plt+0xa604>
   1ba0c:	ldr	r3, [r4]
   1ba10:	tst	r3, #256	; 0x100
   1ba14:	bne	1ba30 <__assert_fail@plt+0xa61c>
   1ba18:	mov	r0, r4
   1ba1c:	add	sp, sp, #8
   1ba20:	ldr	r4, [sp]
   1ba24:	ldr	lr, [sp, #4]
   1ba28:	add	sp, sp, #8
   1ba2c:	b	110fc <fflush@plt>
   1ba30:	mov	r1, #1
   1ba34:	mov	r2, #0
   1ba38:	mov	r3, #0
   1ba3c:	mov	r0, r4
   1ba40:	str	r1, [sp]
   1ba44:	bl	1ba4c <__assert_fail@plt+0xa638>
   1ba48:	b	1ba18 <__assert_fail@plt+0xa604>
   1ba4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ba50:	mov	r4, r0
   1ba54:	ldr	ip, [r0, #4]
   1ba58:	strd	r6, [sp, #8]
   1ba5c:	str	lr, [sp, #20]
   1ba60:	ldr	lr, [r0, #8]
   1ba64:	str	r8, [sp, #16]
   1ba68:	sub	sp, sp, #8
   1ba6c:	ldr	r5, [sp, #32]
   1ba70:	cmp	lr, ip
   1ba74:	beq	1ba9c <__assert_fail@plt+0xa688>
   1ba78:	mov	r0, r4
   1ba7c:	str	r5, [sp, #32]
   1ba80:	add	sp, sp, #8
   1ba84:	ldrd	r4, [sp]
   1ba88:	ldrd	r6, [sp, #8]
   1ba8c:	ldr	r8, [sp, #16]
   1ba90:	ldr	lr, [sp, #20]
   1ba94:	add	sp, sp, #24
   1ba98:	b	11348 <fseeko64@plt>
   1ba9c:	ldr	ip, [r0, #16]
   1baa0:	ldr	lr, [r0, #20]
   1baa4:	cmp	lr, ip
   1baa8:	bne	1ba78 <__assert_fail@plt+0xa664>
   1baac:	ldr	r8, [r0, #36]	; 0x24
   1bab0:	cmp	r8, #0
   1bab4:	bne	1ba78 <__assert_fail@plt+0xa664>
   1bab8:	mov	r6, r2
   1babc:	mov	r7, r3
   1bac0:	bl	11318 <fileno@plt>
   1bac4:	mov	r2, r6
   1bac8:	mov	r3, r7
   1bacc:	str	r5, [sp]
   1bad0:	bl	111ec <lseek64@plt>
   1bad4:	mvn	r3, #0
   1bad8:	mvn	r2, #0
   1badc:	cmp	r1, r3
   1bae0:	cmpeq	r0, r2
   1bae4:	beq	1bb14 <__assert_fail@plt+0xa700>
   1bae8:	ldr	r3, [r4]
   1baec:	strd	r0, [r4, #80]	; 0x50
   1baf0:	bic	r3, r3, #16
   1baf4:	str	r3, [r4]
   1baf8:	mov	r0, r8
   1bafc:	add	sp, sp, #8
   1bb00:	ldrd	r4, [sp]
   1bb04:	ldrd	r6, [sp, #8]
   1bb08:	ldr	r8, [sp, #16]
   1bb0c:	add	sp, sp, #20
   1bb10:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb14:	mvn	r8, #0
   1bb18:	b	1baf8 <__assert_fail@plt+0xa6e4>
   1bb1c:	mov	r0, #14
   1bb20:	str	r4, [sp, #-8]!
   1bb24:	str	lr, [sp, #4]
   1bb28:	bl	11390 <nl_langinfo@plt>
   1bb2c:	cmp	r0, #0
   1bb30:	beq	1bb54 <__assert_fail@plt+0xa740>
   1bb34:	ldrb	r2, [r0]
   1bb38:	movw	r3, #55884	; 0xda4c
   1bb3c:	movt	r3, #1
   1bb40:	ldr	r4, [sp]
   1bb44:	add	sp, sp, #4
   1bb48:	cmp	r2, #0
   1bb4c:	moveq	r0, r3
   1bb50:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb54:	ldr	r4, [sp]
   1bb58:	add	sp, sp, #4
   1bb5c:	movw	r0, #55884	; 0xda4c
   1bb60:	movt	r0, #1
   1bb64:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb68:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bb6c:	mov	r5, r2
   1bb70:	strd	r6, [sp, #8]
   1bb74:	subs	r6, r0, #0
   1bb78:	mov	r7, r1
   1bb7c:	str	lr, [sp, #16]
   1bb80:	sub	sp, sp, #12
   1bb84:	addeq	r6, sp, #4
   1bb88:	mov	r0, r6
   1bb8c:	bl	11210 <mbrtowc@plt>
   1bb90:	cmp	r5, #0
   1bb94:	cmnne	r0, #3
   1bb98:	mov	r4, r0
   1bb9c:	bhi	1bbb8 <__assert_fail@plt+0xa7a4>
   1bba0:	mov	r0, r4
   1bba4:	add	sp, sp, #12
   1bba8:	ldrd	r4, [sp]
   1bbac:	ldrd	r6, [sp, #8]
   1bbb0:	add	sp, sp, #16
   1bbb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbb8:	mov	r0, #0
   1bbbc:	bl	1bc1c <__assert_fail@plt+0xa808>
   1bbc0:	cmp	r0, #0
   1bbc4:	bne	1bba0 <__assert_fail@plt+0xa78c>
   1bbc8:	ldrb	r3, [r7]
   1bbcc:	mov	r4, #1
   1bbd0:	str	r3, [r6]
   1bbd4:	b	1bba0 <__assert_fail@plt+0xa78c>
   1bbd8:	umull	r2, r3, r1, r2
   1bbdc:	cmp	r3, #0
   1bbe0:	bne	1bbec <__assert_fail@plt+0xa7d8>
   1bbe4:	mov	r1, r2
   1bbe8:	b	1b6f4 <__assert_fail@plt+0xa2e0>
   1bbec:	str	r4, [sp, #-8]!
   1bbf0:	str	lr, [sp, #4]
   1bbf4:	bl	112dc <__errno_location@plt>
   1bbf8:	mov	r3, #12
   1bbfc:	ldr	r4, [sp]
   1bc00:	add	sp, sp, #4
   1bc04:	str	r3, [r0]
   1bc08:	mov	r0, #0
   1bc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc10:	mov	r2, #3
   1bc14:	mov	r1, #0
   1bc18:	b	1662c <__assert_fail@plt+0x5218>
   1bc1c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bc20:	sub	sp, sp, #268	; 0x10c
   1bc24:	movw	r2, #257	; 0x101
   1bc28:	add	r1, sp, #4
   1bc2c:	bl	1bc74 <__assert_fail@plt+0xa860>
   1bc30:	cmp	r0, #0
   1bc34:	movne	r0, #0
   1bc38:	bne	1bc6c <__assert_fail@plt+0xa858>
   1bc3c:	movw	r1, #55880	; 0xda48
   1bc40:	movt	r1, #1
   1bc44:	add	r0, sp, #4
   1bc48:	bl	110cc <strcmp@plt>
   1bc4c:	cmp	r0, #0
   1bc50:	beq	1bc6c <__assert_fail@plt+0xa858>
   1bc54:	add	r0, sp, #4
   1bc58:	movw	r1, #55892	; 0xda54
   1bc5c:	movt	r1, #1
   1bc60:	bl	110cc <strcmp@plt>
   1bc64:	adds	r0, r0, #0
   1bc68:	movne	r0, #1
   1bc6c:	add	sp, sp, #268	; 0x10c
   1bc70:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc74:	strd	r4, [sp, #-16]!
   1bc78:	mov	r5, r1
   1bc7c:	mov	r1, #0
   1bc80:	mov	r4, r2
   1bc84:	str	r6, [sp, #8]
   1bc88:	str	lr, [sp, #12]
   1bc8c:	bl	11378 <setlocale@plt>
   1bc90:	subs	r6, r0, #0
   1bc94:	beq	1bd14 <__assert_fail@plt+0xa900>
   1bc98:	bl	112a0 <strlen@plt>
   1bc9c:	cmp	r4, r0
   1bca0:	bhi	1bcc0 <__assert_fail@plt+0xa8ac>
   1bca4:	cmp	r4, #0
   1bca8:	moveq	r0, #34	; 0x22
   1bcac:	bne	1bce4 <__assert_fail@plt+0xa8d0>
   1bcb0:	ldrd	r4, [sp]
   1bcb4:	ldr	r6, [sp, #8]
   1bcb8:	add	sp, sp, #12
   1bcbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcc0:	add	r2, r0, #1
   1bcc4:	mov	r1, r6
   1bcc8:	mov	r0, r5
   1bccc:	bl	1112c <memcpy@plt>
   1bcd0:	ldrd	r4, [sp]
   1bcd4:	mov	r0, #0
   1bcd8:	ldr	r6, [sp, #8]
   1bcdc:	add	sp, sp, #12
   1bce0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bce4:	sub	r4, r4, #1
   1bce8:	mov	r1, r6
   1bcec:	mov	r2, r4
   1bcf0:	mov	r0, r5
   1bcf4:	bl	1112c <memcpy@plt>
   1bcf8:	mov	r3, #0
   1bcfc:	mov	r0, #34	; 0x22
   1bd00:	strb	r3, [r5, r4]
   1bd04:	ldrd	r4, [sp]
   1bd08:	ldr	r6, [sp, #8]
   1bd0c:	add	sp, sp, #12
   1bd10:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd14:	cmp	r4, #0
   1bd18:	mov	r0, #22
   1bd1c:	strbne	r6, [r5]
   1bd20:	ldrd	r4, [sp]
   1bd24:	ldr	r6, [sp, #8]
   1bd28:	add	sp, sp, #12
   1bd2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd30:	mov	r1, #0
   1bd34:	b	11378 <setlocale@plt>
   1bd38:	cmp	r3, #0
   1bd3c:	cmpeq	r2, #0
   1bd40:	bne	1bd64 <__assert_fail@plt+0xa950>
   1bd44:	cmp	r1, #0
   1bd48:	movlt	r1, #-2147483648	; 0x80000000
   1bd4c:	movlt	r0, #0
   1bd50:	blt	1bd60 <__assert_fail@plt+0xa94c>
   1bd54:	cmpeq	r0, #0
   1bd58:	mvnne	r1, #-2147483648	; 0x80000000
   1bd5c:	mvnne	r0, #0
   1bd60:	b	1be48 <__assert_fail@plt+0xaa34>
   1bd64:	sub	sp, sp, #8
   1bd68:	push	{sp, lr}
   1bd6c:	cmp	r1, #0
   1bd70:	blt	1bd90 <__assert_fail@plt+0xa97c>
   1bd74:	cmp	r3, #0
   1bd78:	blt	1bdc4 <__assert_fail@plt+0xa9b0>
   1bd7c:	bl	1be58 <__assert_fail@plt+0xaa44>
   1bd80:	ldr	lr, [sp, #4]
   1bd84:	add	sp, sp, #8
   1bd88:	pop	{r2, r3}
   1bd8c:	bx	lr
   1bd90:	rsbs	r0, r0, #0
   1bd94:	sbc	r1, r1, r1, lsl #1
   1bd98:	cmp	r3, #0
   1bd9c:	blt	1bde8 <__assert_fail@plt+0xa9d4>
   1bda0:	bl	1be58 <__assert_fail@plt+0xaa44>
   1bda4:	ldr	lr, [sp, #4]
   1bda8:	add	sp, sp, #8
   1bdac:	pop	{r2, r3}
   1bdb0:	rsbs	r0, r0, #0
   1bdb4:	sbc	r1, r1, r1, lsl #1
   1bdb8:	rsbs	r2, r2, #0
   1bdbc:	sbc	r3, r3, r3, lsl #1
   1bdc0:	bx	lr
   1bdc4:	rsbs	r2, r2, #0
   1bdc8:	sbc	r3, r3, r3, lsl #1
   1bdcc:	bl	1be58 <__assert_fail@plt+0xaa44>
   1bdd0:	ldr	lr, [sp, #4]
   1bdd4:	add	sp, sp, #8
   1bdd8:	pop	{r2, r3}
   1bddc:	rsbs	r0, r0, #0
   1bde0:	sbc	r1, r1, r1, lsl #1
   1bde4:	bx	lr
   1bde8:	rsbs	r2, r2, #0
   1bdec:	sbc	r3, r3, r3, lsl #1
   1bdf0:	bl	1be58 <__assert_fail@plt+0xaa44>
   1bdf4:	ldr	lr, [sp, #4]
   1bdf8:	add	sp, sp, #8
   1bdfc:	pop	{r2, r3}
   1be00:	rsbs	r2, r2, #0
   1be04:	sbc	r3, r3, r3, lsl #1
   1be08:	bx	lr
   1be0c:	cmp	r3, #0
   1be10:	cmpeq	r2, #0
   1be14:	bne	1be2c <__assert_fail@plt+0xaa18>
   1be18:	cmp	r1, #0
   1be1c:	cmpeq	r0, #0
   1be20:	mvnne	r1, #0
   1be24:	mvnne	r0, #0
   1be28:	b	1be48 <__assert_fail@plt+0xaa34>
   1be2c:	sub	sp, sp, #8
   1be30:	push	{sp, lr}
   1be34:	bl	1be58 <__assert_fail@plt+0xaa44>
   1be38:	ldr	lr, [sp, #4]
   1be3c:	add	sp, sp, #8
   1be40:	pop	{r2, r3}
   1be44:	bx	lr
   1be48:	push	{r1, lr}
   1be4c:	mov	r0, #8
   1be50:	bl	110c0 <raise@plt>
   1be54:	pop	{r1, pc}
   1be58:	cmp	r1, r3
   1be5c:	cmpeq	r0, r2
   1be60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be64:	mov	r4, r0
   1be68:	movcc	r0, #0
   1be6c:	mov	r5, r1
   1be70:	ldr	lr, [sp, #36]	; 0x24
   1be74:	movcc	r1, r0
   1be78:	bcc	1bf74 <__assert_fail@plt+0xab60>
   1be7c:	cmp	r3, #0
   1be80:	clzeq	ip, r2
   1be84:	clzne	ip, r3
   1be88:	addeq	ip, ip, #32
   1be8c:	cmp	r5, #0
   1be90:	clzeq	r1, r4
   1be94:	addeq	r1, r1, #32
   1be98:	clzne	r1, r5
   1be9c:	sub	ip, ip, r1
   1bea0:	sub	sl, ip, #32
   1bea4:	lsl	r9, r3, ip
   1bea8:	rsb	fp, ip, #32
   1beac:	orr	r9, r9, r2, lsl sl
   1beb0:	orr	r9, r9, r2, lsr fp
   1beb4:	lsl	r8, r2, ip
   1beb8:	cmp	r5, r9
   1bebc:	cmpeq	r4, r8
   1bec0:	movcc	r0, #0
   1bec4:	movcc	r1, r0
   1bec8:	bcc	1bee4 <__assert_fail@plt+0xaad0>
   1becc:	mov	r0, #1
   1bed0:	subs	r4, r4, r8
   1bed4:	lsl	r1, r0, sl
   1bed8:	orr	r1, r1, r0, lsr fp
   1bedc:	lsl	r0, r0, ip
   1bee0:	sbc	r5, r5, r9
   1bee4:	cmp	ip, #0
   1bee8:	beq	1bf74 <__assert_fail@plt+0xab60>
   1beec:	lsr	r6, r8, #1
   1bef0:	orr	r6, r6, r9, lsl #31
   1bef4:	lsr	r7, r9, #1
   1bef8:	mov	r2, ip
   1befc:	b	1bf20 <__assert_fail@plt+0xab0c>
   1bf00:	subs	r3, r4, r6
   1bf04:	sbc	r8, r5, r7
   1bf08:	adds	r3, r3, r3
   1bf0c:	adc	r8, r8, r8
   1bf10:	adds	r4, r3, #1
   1bf14:	adc	r5, r8, #0
   1bf18:	subs	r2, r2, #1
   1bf1c:	beq	1bf3c <__assert_fail@plt+0xab28>
   1bf20:	cmp	r5, r7
   1bf24:	cmpeq	r4, r6
   1bf28:	bcs	1bf00 <__assert_fail@plt+0xaaec>
   1bf2c:	adds	r4, r4, r4
   1bf30:	adc	r5, r5, r5
   1bf34:	subs	r2, r2, #1
   1bf38:	bne	1bf20 <__assert_fail@plt+0xab0c>
   1bf3c:	lsr	r3, r4, ip
   1bf40:	orr	r3, r3, r5, lsl fp
   1bf44:	lsr	r2, r5, ip
   1bf48:	orr	r3, r3, r5, lsr sl
   1bf4c:	adds	r0, r0, r4
   1bf50:	mov	r4, r3
   1bf54:	lsl	r3, r2, ip
   1bf58:	orr	r3, r3, r4, lsl sl
   1bf5c:	lsl	ip, r4, ip
   1bf60:	orr	r3, r3, r4, lsr fp
   1bf64:	adc	r1, r1, r5
   1bf68:	subs	r0, r0, ip
   1bf6c:	mov	r5, r2
   1bf70:	sbc	r1, r1, r3
   1bf74:	cmp	lr, #0
   1bf78:	strdne	r4, [lr]
   1bf7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf84:	mov	r7, r0
   1bf88:	ldr	r6, [pc, #72]	; 1bfd8 <__assert_fail@plt+0xabc4>
   1bf8c:	ldr	r5, [pc, #72]	; 1bfdc <__assert_fail@plt+0xabc8>
   1bf90:	add	r6, pc, r6
   1bf94:	add	r5, pc, r5
   1bf98:	sub	r6, r6, r5
   1bf9c:	mov	r8, r1
   1bfa0:	mov	r9, r2
   1bfa4:	bl	1107c <fstatfs64@plt-0x20>
   1bfa8:	asrs	r6, r6, #2
   1bfac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bfb0:	mov	r4, #0
   1bfb4:	add	r4, r4, #1
   1bfb8:	ldr	r3, [r5], #4
   1bfbc:	mov	r2, r9
   1bfc0:	mov	r1, r8
   1bfc4:	mov	r0, r7
   1bfc8:	blx	r3
   1bfcc:	cmp	r6, r4
   1bfd0:	bne	1bfb4 <__assert_fail@plt+0xaba0>
   1bfd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bfd8:	andeq	r1, r1, ip, ror pc
   1bfdc:	andeq	r1, r1, r4, ror pc
   1bfe0:	bx	lr
   1bfe4:	ldr	r3, [pc, #12]	; 1bff8 <__assert_fail@plt+0xabe4>
   1bfe8:	mov	r1, #0
   1bfec:	add	r3, pc, r3
   1bff0:	ldr	r2, [r3]
   1bff4:	b	112e8 <__cxa_atexit@plt>
   1bff8:	andeq	r2, r1, r0, asr r1

Disassembly of section .fini:

0001bffc <.fini>:
   1bffc:	push	{r3, lr}
   1c000:	pop	{r3, pc}
