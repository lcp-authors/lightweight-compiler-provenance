
../repos/prog2/7.1:     file format elf32-littlearm


Disassembly of section .init:

00010c28 <.init>:
   10c28:	push	{r3, lr}
   10c2c:	bl	10d44 <_start@@Base+0x3c>
   10c30:	pop	{r3, pc}

Disassembly of section .plt:

00010c34 <strcmp@plt-0x14>:
   10c34:	push	{lr}		; (str lr, [sp, #-4]!)
   10c38:	ldr	lr, [pc, #4]	; 10c44 <strcmp@plt-0x4>
   10c3c:	add	lr, pc, lr
   10c40:	ldr	pc, [lr, #8]!
   10c44:			; <UNDEFINED> instruction: 0x000113bc

00010c48 <strcmp@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #69632	; 0x11000
   10c50:	ldr	pc, [ip, #956]!	; 0x3bc

00010c54 <printf@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #69632	; 0x11000
   10c5c:	ldr	pc, [ip, #948]!	; 0x3b4

00010c60 <fopen@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #69632	; 0x11000
   10c68:	ldr	pc, [ip, #940]!	; 0x3ac

00010c6c <free@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #69632	; 0x11000
   10c74:	ldr	pc, [ip, #932]!	; 0x3a4

00010c78 <fgets@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #69632	; 0x11000
   10c80:	ldr	pc, [ip, #924]!	; 0x39c

00010c84 <realloc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #69632	; 0x11000
   10c8c:	ldr	pc, [ip, #916]!	; 0x394

00010c90 <strcpy@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #69632	; 0x11000
   10c98:	ldr	pc, [ip, #908]!	; 0x38c

00010c9c <puts@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #69632	; 0x11000
   10ca4:	ldr	pc, [ip, #900]!	; 0x384

00010ca8 <malloc@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #69632	; 0x11000
   10cb0:	ldr	pc, [ip, #892]!	; 0x37c

00010cb4 <__libc_start_main@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #69632	; 0x11000
   10cbc:	ldr	pc, [ip, #884]!	; 0x374

00010cc0 <__gmon_start__@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #69632	; 0x11000
   10cc8:	ldr	pc, [ip, #876]!	; 0x36c

00010ccc <strlen@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #69632	; 0x11000
   10cd4:	ldr	pc, [ip, #868]!	; 0x364

00010cd8 <putchar@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #69632	; 0x11000
   10ce0:	ldr	pc, [ip, #860]!	; 0x35c

00010ce4 <fclose@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #69632	; 0x11000
   10cec:	ldr	pc, [ip, #852]!	; 0x354

00010cf0 <strtok@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #69632	; 0x11000
   10cf8:	ldr	pc, [ip, #844]!	; 0x34c

00010cfc <abort@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #69632	; 0x11000
   10d04:	ldr	pc, [ip, #836]!	; 0x344

Disassembly of section .text:

00010d08 <_start@@Base>:
   10d08:	mov	fp, #0
   10d0c:	mov	lr, #0
   10d10:	pop	{r1}		; (ldr r1, [sp], #4)
   10d14:	mov	r2, sp
   10d18:	push	{r2}		; (str r2, [sp, #-4]!)
   10d1c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d20:	ldr	ip, [pc, #16]	; 10d38 <_start@@Base+0x30>
   10d24:	push	{ip}		; (str ip, [sp, #-4]!)
   10d28:	ldr	r0, [pc, #12]	; 10d3c <_start@@Base+0x34>
   10d2c:	ldr	r3, [pc, #12]	; 10d40 <_start@@Base+0x38>
   10d30:	bl	10cb4 <__libc_start_main@plt>
   10d34:	bl	10cfc <abort@plt>
   10d38:	andeq	r1, r1, ip, ror ip
   10d3c:	strdeq	r0, [r1], -r8
   10d40:	andeq	r1, r1, ip, lsl ip
   10d44:	ldr	r3, [pc, #20]	; 10d60 <_start@@Base+0x58>
   10d48:	ldr	r2, [pc, #20]	; 10d64 <_start@@Base+0x5c>
   10d4c:	add	r3, pc, r3
   10d50:	ldr	r2, [r3, r2]
   10d54:	cmp	r2, #0
   10d58:	bxeq	lr
   10d5c:	b	10cc0 <__gmon_start__@plt>
   10d60:	andeq	r1, r1, ip, lsr #5
   10d64:	andeq	r0, r0, ip, asr #32
   10d68:	ldr	r0, [pc, #24]	; 10d88 <_start@@Base+0x80>
   10d6c:	ldr	r3, [pc, #24]	; 10d8c <_start@@Base+0x84>
   10d70:	cmp	r3, r0
   10d74:	bxeq	lr
   10d78:	ldr	r3, [pc, #16]	; 10d90 <_start@@Base+0x88>
   10d7c:	cmp	r3, #0
   10d80:	bxeq	lr
   10d84:	bx	r3
   10d88:	andeq	r2, r2, r8, asr r0
   10d8c:	andeq	r2, r2, r8, asr r0
   10d90:	andeq	r0, r0, r0
   10d94:	ldr	r0, [pc, #36]	; 10dc0 <_start@@Base+0xb8>
   10d98:	ldr	r1, [pc, #36]	; 10dc4 <_start@@Base+0xbc>
   10d9c:	sub	r1, r1, r0
   10da0:	asr	r1, r1, #2
   10da4:	add	r1, r1, r1, lsr #31
   10da8:	asrs	r1, r1, #1
   10dac:	bxeq	lr
   10db0:	ldr	r3, [pc, #16]	; 10dc8 <_start@@Base+0xc0>
   10db4:	cmp	r3, #0
   10db8:	bxeq	lr
   10dbc:	bx	r3
   10dc0:	andeq	r2, r2, r8, asr r0
   10dc4:	andeq	r2, r2, r8, asr r0
   10dc8:	andeq	r0, r0, r0
   10dcc:	push	{r4, lr}
   10dd0:	ldr	r4, [pc, #24]	; 10df0 <_start@@Base+0xe8>
   10dd4:	ldrb	r3, [r4]
   10dd8:	cmp	r3, #0
   10ddc:	popne	{r4, pc}
   10de0:	bl	10d68 <_start@@Base+0x60>
   10de4:	mov	r3, #1
   10de8:	strb	r3, [r4]
   10dec:	pop	{r4, pc}
   10df0:	andeq	r2, r2, r8, asr r0
   10df4:	b	10d94 <_start@@Base+0x8c>

00010df8 <main@@Base>:
   10df8:	strd	r4, [sp, #-20]!	; 0xffffffec
   10dfc:	strd	r6, [sp, #8]
   10e00:	str	lr, [sp, #16]
   10e04:	sub	sp, sp, #148	; 0x94
   10e08:	movw	r0, #7348	; 0x1cb4
   10e0c:	movt	r0, #1
   10e10:	bl	10c9c <puts@plt>
   10e14:	movw	r3, #7308	; 0x1c8c
   10e18:	movt	r3, #1
   10e1c:	ldrd	r0, [r3]
   10e20:	strd	r0, [sp, #104]	; 0x68
   10e24:	ldrd	r0, [r3, #8]
   10e28:	strd	r0, [sp, #112]	; 0x70
   10e2c:	ldrd	r0, [r3, #16]
   10e30:	strd	r0, [sp, #120]	; 0x78
   10e34:	ldrd	r0, [r3, #24]
   10e38:	strd	r0, [sp, #128]	; 0x80
   10e3c:	ldrd	r2, [r3, #32]
   10e40:	strd	r2, [sp, #136]	; 0x88
   10e44:	bl	11720 <bst_nova@@Base>
   10e48:	mov	r5, r0
   10e4c:	add	r4, sp, #104	; 0x68
   10e50:	add	r6, sp, #144	; 0x90
   10e54:	ldr	r1, [r4], #4
   10e58:	mov	r0, r5
   10e5c:	bl	11940 <bst_insere@@Base>
   10e60:	cmp	r4, r6
   10e64:	bne	10e54 <main@@Base+0x5c>
   10e68:	ldr	r0, [r5]
   10e6c:	bl	11b3c <bst_altura@@Base>
   10e70:	mov	r1, r0
   10e74:	movw	r0, #7352	; 0x1cb8
   10e78:	movt	r0, #1
   10e7c:	bl	10c54 <printf@plt>
   10e80:	mov	r0, r5
   10e84:	bl	11be4 <bst_imprime@@Base>
   10e88:	movw	r0, #7372	; 0x1ccc
   10e8c:	movt	r0, #1
   10e90:	bl	10c9c <puts@plt>
   10e94:	bl	10fd4 <avl_nova@@Base>
   10e98:	mov	r5, r0
   10e9c:	movw	r1, #7376	; 0x1cd0
   10ea0:	movt	r1, #1
   10ea4:	movw	r0, #7380	; 0x1cd4
   10ea8:	movt	r0, #1
   10eac:	bl	10c60 <fopen@plt>
   10eb0:	mov	r6, r0
   10eb4:	mov	r7, #100	; 0x64
   10eb8:	movw	r4, #7392	; 0x1ce0
   10ebc:	movt	r4, #1
   10ec0:	mov	r2, r6
   10ec4:	mov	r1, r7
   10ec8:	add	r0, sp, #4
   10ecc:	bl	10c78 <fgets@plt>
   10ed0:	cmp	r0, #0
   10ed4:	beq	10f30 <main@@Base+0x138>
   10ed8:	mov	r1, r4
   10edc:	add	r0, sp, #4
   10ee0:	bl	10cf0 <strtok@plt>
   10ee4:	mov	r1, r0
   10ee8:	add	r0, sp, #4
   10eec:	bl	10c90 <strcpy@plt>
   10ef0:	mov	r1, r4
   10ef4:	mov	r0, #0
   10ef8:	bl	10cf0 <strtok@plt>
   10efc:	mov	r1, r0
   10f00:	add	r0, sp, #4
   10f04:	bl	10c90 <strcpy@plt>
   10f08:	add	r0, sp, #4
   10f0c:	bl	10ccc <strlen@plt>
   10f10:	add	r3, sp, #144	; 0x90
   10f14:	add	r0, r3, r0
   10f18:	mov	r3, #0
   10f1c:	strb	r3, [r0, #-141]	; 0xffffff73
   10f20:	add	r1, sp, #4
   10f24:	mov	r0, r5
   10f28:	bl	113c4 <avl_insere@@Base>
   10f2c:	b	10ec0 <main@@Base+0xc8>
   10f30:	mov	r0, r6
   10f34:	bl	10ce4 <fclose@plt>
   10f38:	movw	r1, #7396	; 0x1ce4
   10f3c:	movt	r1, #1
   10f40:	mov	r0, r5
   10f44:	bl	1125c <avl_pesquisa@@Base>
   10f48:	cmp	r0, #0
   10f4c:	beq	10f64 <main@@Base+0x16c>
   10f50:	ldr	r2, [r0, #16]
   10f54:	ldr	r1, [r0]
   10f58:	movw	r0, #7408	; 0x1cf0
   10f5c:	movt	r0, #1
   10f60:	bl	10c54 <printf@plt>
   10f64:	movw	r1, #7420	; 0x1cfc
   10f68:	movt	r1, #1
   10f6c:	mov	r0, r5
   10f70:	bl	1125c <avl_pesquisa@@Base>
   10f74:	cmp	r0, #0
   10f78:	beq	10f90 <main@@Base+0x198>
   10f7c:	ldr	r2, [r0, #16]
   10f80:	ldr	r1, [r0]
   10f84:	movw	r0, #7408	; 0x1cf0
   10f88:	movt	r0, #1
   10f8c:	bl	10c54 <printf@plt>
   10f90:	movw	r1, #7428	; 0x1d04
   10f94:	movt	r1, #1
   10f98:	mov	r0, r5
   10f9c:	bl	1125c <avl_pesquisa@@Base>
   10fa0:	cmp	r0, #0
   10fa4:	beq	10fbc <main@@Base+0x1c4>
   10fa8:	ldr	r2, [r0, #16]
   10fac:	ldr	r1, [r0]
   10fb0:	movw	r0, #7408	; 0x1cf0
   10fb4:	movt	r0, #1
   10fb8:	bl	10c54 <printf@plt>
   10fbc:	mov	r0, #0
   10fc0:	add	sp, sp, #148	; 0x94
   10fc4:	ldrd	r4, [sp]
   10fc8:	ldrd	r6, [sp, #8]
   10fcc:	add	sp, sp, #16
   10fd0:	pop	{pc}		; (ldr pc, [sp], #4)

00010fd4 <avl_nova@@Base>:
   10fd4:	str	r4, [sp, #-8]!
   10fd8:	str	lr, [sp, #4]
   10fdc:	mov	r0, #4
   10fe0:	bl	10ca8 <malloc@plt>
   10fe4:	cmp	r0, #0
   10fe8:	movne	r3, #0
   10fec:	strne	r3, [r0]
   10ff0:	ldr	r4, [sp]
   10ff4:	add	sp, sp, #4
   10ff8:	pop	{pc}		; (ldr pc, [sp], #4)

00010ffc <avl_min@@Base>:
   10ffc:	cmp	r0, #0
   11000:	beq	11020 <avl_min@@Base+0x24>
   11004:	ldr	r3, [r0]
   11008:	b	11010 <avl_min@@Base+0x14>
   1100c:	mov	r3, r2
   11010:	ldr	r2, [r3, #4]
   11014:	cmp	r2, #0
   11018:	bne	1100c <avl_min@@Base+0x10>
   1101c:	ldr	r0, [r3]
   11020:	bx	lr

00011024 <avl_max@@Base>:
   11024:	cmp	r0, #0
   11028:	beq	11048 <avl_max@@Base+0x24>
   1102c:	ldr	r3, [r0]
   11030:	b	11038 <avl_max@@Base+0x14>
   11034:	mov	r3, r2
   11038:	ldr	r2, [r3, #8]
   1103c:	cmp	r2, #0
   11040:	bne	11034 <avl_max@@Base+0x10>
   11044:	ldr	r0, [r3]
   11048:	bx	lr

0001104c <avl_altura@@Base>:
   1104c:	cmp	r0, #0
   11050:	ldrne	r0, [r0, #12]
   11054:	mvneq	r0, #0
   11058:	bx	lr

0001105c <max@@Base>:
   1105c:	cmp	r1, r0
   11060:	movge	r0, r1
   11064:	bx	lr

00011068 <avl_novo_no@@Base>:
   11068:	strd	r4, [sp, #-16]!
   1106c:	str	r6, [sp, #8]
   11070:	str	lr, [sp, #12]
   11074:	mov	r5, r0
   11078:	mov	r0, #20
   1107c:	bl	10ca8 <malloc@plt>
   11080:	mov	r4, r0
   11084:	mov	r0, r5
   11088:	bl	10ccc <strlen@plt>
   1108c:	add	r0, r0, #1
   11090:	bl	10ca8 <malloc@plt>
   11094:	str	r0, [r4]
   11098:	mov	r1, r5
   1109c:	bl	10c90 <strcpy@plt>
   110a0:	mov	r3, #0
   110a4:	str	r3, [r4, #4]
   110a8:	str	r3, [r4, #8]
   110ac:	str	r3, [r4, #12]
   110b0:	mov	r3, #1
   110b4:	str	r3, [r4, #16]
   110b8:	mov	r0, r4
   110bc:	ldrd	r4, [sp]
   110c0:	ldr	r6, [sp, #8]
   110c4:	add	sp, sp, #12
   110c8:	pop	{pc}		; (ldr pc, [sp], #4)

000110cc <roda_direita@@Base>:
   110cc:	ldr	r3, [r0, #4]
   110d0:	ldr	r2, [r3, #8]
   110d4:	str	r0, [r3, #8]
   110d8:	str	r2, [r0, #4]
   110dc:	cmp	r2, #0
   110e0:	ldrne	r1, [r2, #12]
   110e4:	mvneq	r1, #0
   110e8:	ldr	r2, [r0, #8]
   110ec:	cmp	r2, #0
   110f0:	ldrne	r2, [r2, #12]
   110f4:	mvneq	r2, #0
   110f8:	cmp	r2, r1
   110fc:	movlt	r2, r1
   11100:	add	r2, r2, #1
   11104:	str	r2, [r0, #12]
   11108:	ldr	r2, [r3, #4]
   1110c:	cmp	r2, #0
   11110:	ldrne	r1, [r2, #12]
   11114:	mvneq	r1, #0
   11118:	ldr	r2, [r3, #8]
   1111c:	cmp	r2, #0
   11120:	ldrne	r2, [r2, #12]
   11124:	mvneq	r2, #0
   11128:	cmp	r2, r1
   1112c:	movlt	r2, r1
   11130:	add	r2, r2, #1
   11134:	str	r2, [r3, #12]
   11138:	mov	r0, r3
   1113c:	bx	lr

00011140 <roda_esquerda@@Base>:
   11140:	ldr	r3, [r0, #8]
   11144:	ldr	r1, [r3, #4]
   11148:	str	r0, [r3, #4]
   1114c:	str	r1, [r0, #8]
   11150:	ldr	r2, [r0, #4]
   11154:	cmp	r2, #0
   11158:	ldrne	ip, [r2, #12]
   1115c:	mvneq	ip, #0
   11160:	cmp	r1, #0
   11164:	ldrne	r2, [r1, #12]
   11168:	mvneq	r2, #0
   1116c:	cmp	r2, ip
   11170:	movlt	r2, ip
   11174:	add	r2, r2, #1
   11178:	str	r2, [r0, #12]
   1117c:	ldr	r2, [r3, #4]
   11180:	cmp	r2, #0
   11184:	ldrne	r1, [r2, #12]
   11188:	mvneq	r1, #0
   1118c:	ldr	r2, [r3, #8]
   11190:	cmp	r2, #0
   11194:	ldrne	r2, [r2, #12]
   11198:	mvneq	r2, #0
   1119c:	cmp	r2, r1
   111a0:	movlt	r2, r1
   111a4:	add	r2, r2, #1
   111a8:	str	r2, [r3, #12]
   111ac:	mov	r0, r3
   111b0:	bx	lr

000111b4 <calc_balanceamento@@Base>:
   111b4:	cmp	r0, #0
   111b8:	beq	111e4 <calc_balanceamento@@Base+0x30>
   111bc:	ldr	r3, [r0, #8]
   111c0:	cmp	r3, #0
   111c4:	ldrne	r3, [r3, #12]
   111c8:	mvneq	r3, #0
   111cc:	ldr	r2, [r0, #4]
   111d0:	cmp	r2, #0
   111d4:	ldrne	r0, [r2, #12]
   111d8:	mvneq	r0, #0
   111dc:	sub	r0, r3, r0
   111e0:	bx	lr
   111e4:	mov	r0, #0
   111e8:	bx	lr

000111ec <avl_pesquisa_impl@@Base>:
   111ec:	strd	r4, [sp, #-16]!
   111f0:	str	r6, [sp, #8]
   111f4:	str	lr, [sp, #12]
   111f8:	subs	r4, r0, #0
   111fc:	beq	11220 <avl_pesquisa_impl@@Base+0x34>
   11200:	mov	r5, r1
   11204:	ldr	r1, [r4]
   11208:	mov	r0, r5
   1120c:	bl	10c48 <strcmp@plt>
   11210:	cmp	r0, #0
   11214:	blt	11234 <avl_pesquisa_impl@@Base+0x48>
   11218:	cmp	r0, #0
   1121c:	bgt	11248 <avl_pesquisa_impl@@Base+0x5c>
   11220:	mov	r0, r4
   11224:	ldrd	r4, [sp]
   11228:	ldr	r6, [sp, #8]
   1122c:	add	sp, sp, #12
   11230:	pop	{pc}		; (ldr pc, [sp], #4)
   11234:	mov	r1, r5
   11238:	ldr	r0, [r4, #4]
   1123c:	bl	111ec <avl_pesquisa_impl@@Base>
   11240:	mov	r4, r0
   11244:	b	11220 <avl_pesquisa_impl@@Base+0x34>
   11248:	mov	r1, r5
   1124c:	ldr	r0, [r4, #8]
   11250:	bl	111ec <avl_pesquisa_impl@@Base>
   11254:	mov	r4, r0
   11258:	b	11220 <avl_pesquisa_impl@@Base+0x34>

0001125c <avl_pesquisa@@Base>:
   1125c:	cmp	r1, #0
   11260:	cmpne	r0, #0
   11264:	beq	11284 <avl_pesquisa@@Base+0x28>
   11268:	str	r4, [sp, #-8]!
   1126c:	str	lr, [sp, #4]
   11270:	ldr	r0, [r0]
   11274:	bl	111ec <avl_pesquisa_impl@@Base>
   11278:	ldr	r4, [sp]
   1127c:	add	sp, sp, #4
   11280:	pop	{pc}		; (ldr pc, [sp], #4)
   11284:	mov	r0, #0
   11288:	bx	lr

0001128c <avl_insere_impl@@Base>:
   1128c:	strd	r4, [sp, #-16]!
   11290:	str	r6, [sp, #8]
   11294:	str	lr, [sp, #12]
   11298:	mov	r5, r1
   1129c:	subs	r4, r0, #0
   112a0:	beq	112d4 <avl_insere_impl@@Base+0x48>
   112a4:	ldr	r1, [r4]
   112a8:	mov	r0, r5
   112ac:	bl	10c48 <strcmp@plt>
   112b0:	cmp	r0, #0
   112b4:	blt	112e0 <avl_insere_impl@@Base+0x54>
   112b8:	cmp	r0, #0
   112bc:	bgt	112f4 <avl_insere_impl@@Base+0x68>
   112c0:	ldr	r3, [r4, #16]
   112c4:	add	r3, r3, #1
   112c8:	str	r3, [r4, #16]
   112cc:	mov	r0, r4
   112d0:	b	1135c <avl_insere_impl@@Base+0xd0>
   112d4:	mov	r0, r1
   112d8:	bl	11068 <avl_novo_no@@Base>
   112dc:	b	1135c <avl_insere_impl@@Base+0xd0>
   112e0:	mov	r1, r5
   112e4:	ldr	r0, [r4, #4]
   112e8:	bl	1128c <avl_insere_impl@@Base>
   112ec:	str	r0, [r4, #4]
   112f0:	b	11304 <avl_insere_impl@@Base+0x78>
   112f4:	mov	r1, r5
   112f8:	ldr	r0, [r4, #8]
   112fc:	bl	1128c <avl_insere_impl@@Base>
   11300:	str	r0, [r4, #8]
   11304:	ldr	r6, [r4, #4]
   11308:	cmp	r6, #0
   1130c:	ldrne	r2, [r6, #12]
   11310:	mvneq	r2, #0
   11314:	ldr	r5, [r4, #8]
   11318:	cmp	r5, #0
   1131c:	ldrne	r3, [r5, #12]
   11320:	mvneq	r3, #0
   11324:	cmp	r3, r2
   11328:	movlt	r3, r2
   1132c:	add	r3, r3, #1
   11330:	str	r3, [r4, #12]
   11334:	mov	r0, r4
   11338:	bl	111b4 <calc_balanceamento@@Base>
   1133c:	cmp	r0, #1
   11340:	ble	11384 <avl_insere_impl@@Base+0xf8>
   11344:	mov	r0, r5
   11348:	bl	111b4 <calc_balanceamento@@Base>
   1134c:	cmp	r0, #0
   11350:	blt	1136c <avl_insere_impl@@Base+0xe0>
   11354:	mov	r0, r4
   11358:	bl	11140 <roda_esquerda@@Base>
   1135c:	ldrd	r4, [sp]
   11360:	ldr	r6, [sp, #8]
   11364:	add	sp, sp, #12
   11368:	pop	{pc}		; (ldr pc, [sp], #4)
   1136c:	mov	r0, r5
   11370:	bl	110cc <roda_direita@@Base>
   11374:	str	r0, [r4, #8]
   11378:	mov	r0, r4
   1137c:	bl	11140 <roda_esquerda@@Base>
   11380:	b	1135c <avl_insere_impl@@Base+0xd0>
   11384:	cmn	r0, #1
   11388:	movge	r0, r4
   1138c:	bge	1135c <avl_insere_impl@@Base+0xd0>
   11390:	mov	r0, r6
   11394:	bl	111b4 <calc_balanceamento@@Base>
   11398:	cmp	r0, #0
   1139c:	ble	113b8 <avl_insere_impl@@Base+0x12c>
   113a0:	mov	r0, r6
   113a4:	bl	11140 <roda_esquerda@@Base>
   113a8:	str	r0, [r4, #4]
   113ac:	mov	r0, r4
   113b0:	bl	110cc <roda_direita@@Base>
   113b4:	b	1135c <avl_insere_impl@@Base+0xd0>
   113b8:	mov	r0, r4
   113bc:	bl	110cc <roda_direita@@Base>
   113c0:	b	1135c <avl_insere_impl@@Base+0xd0>

000113c4 <avl_insere@@Base>:
   113c4:	cmp	r1, #0
   113c8:	cmpne	r0, #0
   113cc:	beq	113f8 <avl_insere@@Base+0x34>
   113d0:	str	r4, [sp, #-8]!
   113d4:	str	lr, [sp, #4]
   113d8:	mov	r4, r0
   113dc:	ldr	r0, [r0]
   113e0:	bl	1128c <avl_insere_impl@@Base>
   113e4:	str	r0, [r4]
   113e8:	mov	r0, #0
   113ec:	ldr	r4, [sp]
   113f0:	add	sp, sp, #4
   113f4:	pop	{pc}		; (ldr pc, [sp], #4)
   113f8:	mvn	r0, #0
   113fc:	bx	lr

00011400 <avl_no_valormin@@Base>:
   11400:	b	11408 <avl_no_valormin@@Base+0x8>
   11404:	mov	r0, r3
   11408:	ldr	r3, [r0, #4]
   1140c:	cmp	r3, #0
   11410:	bne	11404 <avl_no_valormin@@Base+0x4>
   11414:	bx	lr

00011418 <avl_no_valormax@@Base>:
   11418:	b	11420 <avl_no_valormax@@Base+0x8>
   1141c:	mov	r0, r3
   11420:	ldr	r3, [r0, #8]
   11424:	cmp	r3, #0
   11428:	bne	1141c <avl_no_valormax@@Base+0x4>
   1142c:	bx	lr

00011430 <avl_remove_impl@@Base>:
   11430:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11434:	strd	r6, [sp, #8]
   11438:	str	r8, [sp, #16]
   1143c:	str	lr, [sp, #20]
   11440:	subs	r4, r0, #0
   11444:	moveq	r5, r4
   11448:	beq	11554 <avl_remove_impl@@Base+0x124>
   1144c:	mov	r5, r1
   11450:	ldr	r7, [r4]
   11454:	mov	r1, r7
   11458:	mov	r0, r5
   1145c:	bl	10c48 <strcmp@plt>
   11460:	cmp	r0, #0
   11464:	blt	114d4 <avl_remove_impl@@Base+0xa4>
   11468:	cmp	r0, #0
   1146c:	bgt	114e8 <avl_remove_impl@@Base+0xb8>
   11470:	ldr	r5, [r4, #4]
   11474:	cmp	r5, #0
   11478:	beq	1156c <avl_remove_impl@@Base+0x13c>
   1147c:	ldr	r6, [r4, #8]
   11480:	cmp	r6, #0
   11484:	bne	11590 <avl_remove_impl@@Base+0x160>
   11488:	ldr	r0, [r5]
   1148c:	bl	10ccc <strlen@plt>
   11490:	add	r1, r0, #1
   11494:	mov	r0, r7
   11498:	bl	10c84 <realloc@plt>
   1149c:	str	r0, [r4]
   114a0:	ldr	r1, [r5]
   114a4:	bl	10c90 <strcpy@plt>
   114a8:	ldr	r3, [r5, #4]
   114ac:	str	r3, [r4, #4]
   114b0:	ldr	r3, [r5, #8]
   114b4:	str	r3, [r4, #8]
   114b8:	ldr	r3, [r5, #12]
   114bc:	str	r3, [r4, #12]
   114c0:	ldr	r0, [r5]
   114c4:	bl	10c6c <free@plt>
   114c8:	mov	r0, r5
   114cc:	bl	10c6c <free@plt>
   114d0:	b	114f8 <avl_remove_impl@@Base+0xc8>
   114d4:	mov	r1, r5
   114d8:	ldr	r0, [r4, #4]
   114dc:	bl	11430 <avl_remove_impl@@Base>
   114e0:	str	r0, [r4, #4]
   114e4:	b	114f8 <avl_remove_impl@@Base+0xc8>
   114e8:	mov	r1, r5
   114ec:	ldr	r0, [r4, #8]
   114f0:	bl	11430 <avl_remove_impl@@Base>
   114f4:	str	r0, [r4, #8]
   114f8:	ldr	r6, [r4, #4]
   114fc:	cmp	r6, #0
   11500:	ldrne	r2, [r6, #12]
   11504:	mvneq	r2, #0
   11508:	ldr	r5, [r4, #8]
   1150c:	cmp	r5, #0
   11510:	ldrne	r3, [r5, #12]
   11514:	mvneq	r3, #0
   11518:	cmp	r3, r2
   1151c:	movlt	r3, r2
   11520:	add	r3, r3, #1
   11524:	str	r3, [r4, #12]
   11528:	mov	r0, r4
   1152c:	bl	111b4 <calc_balanceamento@@Base>
   11530:	cmp	r0, #1
   11534:	ble	115ec <avl_remove_impl@@Base+0x1bc>
   11538:	mov	r0, r5
   1153c:	bl	111b4 <calc_balanceamento@@Base>
   11540:	cmp	r0, #0
   11544:	blt	115d0 <avl_remove_impl@@Base+0x1a0>
   11548:	mov	r0, r4
   1154c:	bl	11140 <roda_esquerda@@Base>
   11550:	mov	r5, r0
   11554:	mov	r0, r5
   11558:	ldrd	r4, [sp]
   1155c:	ldrd	r6, [sp, #8]
   11560:	ldr	r8, [sp, #16]
   11564:	add	sp, sp, #20
   11568:	pop	{pc}		; (ldr pc, [sp], #4)
   1156c:	ldr	r5, [r4, #8]
   11570:	cmp	r5, #0
   11574:	bne	11488 <avl_remove_impl@@Base+0x58>
   11578:	ldr	r0, [r4]
   1157c:	bl	10c6c <free@plt>
   11580:	mov	r0, r4
   11584:	bl	10c6c <free@plt>
   11588:	b	11554 <avl_remove_impl@@Base+0x124>
   1158c:	mov	r6, r3
   11590:	ldr	r3, [r6, #4]
   11594:	cmp	r3, #0
   11598:	bne	1158c <avl_remove_impl@@Base+0x15c>
   1159c:	ldr	r0, [r6]
   115a0:	bl	10ccc <strlen@plt>
   115a4:	add	r1, r0, #1
   115a8:	mov	r0, r7
   115ac:	bl	10c84 <realloc@plt>
   115b0:	str	r0, [r4]
   115b4:	ldr	r1, [r6]
   115b8:	bl	10c90 <strcpy@plt>
   115bc:	ldr	r1, [r6]
   115c0:	ldr	r0, [r4, #8]
   115c4:	bl	11430 <avl_remove_impl@@Base>
   115c8:	str	r0, [r4, #8]
   115cc:	b	114f8 <avl_remove_impl@@Base+0xc8>
   115d0:	mov	r0, r5
   115d4:	bl	110cc <roda_direita@@Base>
   115d8:	str	r0, [r4, #8]
   115dc:	mov	r0, r4
   115e0:	bl	11140 <roda_esquerda@@Base>
   115e4:	mov	r5, r0
   115e8:	b	11554 <avl_remove_impl@@Base+0x124>
   115ec:	cmn	r0, #1
   115f0:	movge	r5, r4
   115f4:	bge	11554 <avl_remove_impl@@Base+0x124>
   115f8:	mov	r0, r6
   115fc:	bl	111b4 <calc_balanceamento@@Base>
   11600:	cmp	r0, #0
   11604:	ble	11624 <avl_remove_impl@@Base+0x1f4>
   11608:	mov	r0, r6
   1160c:	bl	11140 <roda_esquerda@@Base>
   11610:	str	r0, [r4, #4]
   11614:	mov	r0, r4
   11618:	bl	110cc <roda_direita@@Base>
   1161c:	mov	r5, r0
   11620:	b	11554 <avl_remove_impl@@Base+0x124>
   11624:	mov	r0, r4
   11628:	bl	110cc <roda_direita@@Base>
   1162c:	mov	r5, r0
   11630:	b	11554 <avl_remove_impl@@Base+0x124>

00011634 <avl_apaga@@Base>:
   11634:	str	r4, [sp, #-8]!
   11638:	str	lr, [sp, #4]
   1163c:	subs	r4, r0, #0
   11640:	beq	1166c <avl_apaga@@Base+0x38>
   11644:	ldr	r0, [r4]
   11648:	cmp	r0, #0
   1164c:	beq	11664 <avl_apaga@@Base+0x30>
   11650:	ldr	r1, [r0]
   11654:	bl	11430 <avl_remove_impl@@Base>
   11658:	str	r0, [r4]
   1165c:	cmp	r0, #0
   11660:	bne	11650 <avl_apaga@@Base+0x1c>
   11664:	mov	r0, r4
   11668:	bl	10c6c <free@plt>
   1166c:	ldr	r4, [sp]
   11670:	add	sp, sp, #4
   11674:	pop	{pc}		; (ldr pc, [sp], #4)

00011678 <avl_remove@@Base>:
   11678:	cmp	r1, #0
   1167c:	cmpne	r0, #0
   11680:	beq	116ac <avl_remove@@Base+0x34>
   11684:	str	r4, [sp, #-8]!
   11688:	str	lr, [sp, #4]
   1168c:	mov	r4, r0
   11690:	ldr	r0, [r0]
   11694:	bl	11430 <avl_remove_impl@@Base>
   11698:	str	r0, [r4]
   1169c:	mov	r0, #0
   116a0:	ldr	r4, [sp]
   116a4:	add	sp, sp, #4
   116a8:	pop	{pc}		; (ldr pc, [sp], #4)
   116ac:	mvn	r0, #0
   116b0:	bx	lr

000116b4 <avl_preordem_impl@@Base>:
   116b4:	str	r4, [sp, #-8]!
   116b8:	str	lr, [sp, #4]
   116bc:	subs	r4, r0, #0
   116c0:	beq	116e8 <avl_preordem_impl@@Base+0x34>
   116c4:	ldr	r2, [r4, #16]
   116c8:	ldr	r1, [r4]
   116cc:	movw	r0, #7476	; 0x1d34
   116d0:	movt	r0, #1
   116d4:	bl	10c54 <printf@plt>
   116d8:	ldr	r0, [r4, #4]
   116dc:	bl	116b4 <avl_preordem_impl@@Base>
   116e0:	ldr	r0, [r4, #8]
   116e4:	bl	116b4 <avl_preordem_impl@@Base>
   116e8:	ldr	r4, [sp]
   116ec:	add	sp, sp, #4
   116f0:	pop	{pc}		; (ldr pc, [sp], #4)

000116f4 <avl_imprime@@Base>:
   116f4:	cmp	r0, #0
   116f8:	bxeq	lr
   116fc:	str	r4, [sp, #-8]!
   11700:	str	lr, [sp, #4]
   11704:	ldr	r0, [r0]
   11708:	bl	116b4 <avl_preordem_impl@@Base>
   1170c:	mov	r0, #10
   11710:	bl	10cd8 <putchar@plt>
   11714:	ldr	r4, [sp]
   11718:	add	sp, sp, #4
   1171c:	pop	{pc}		; (ldr pc, [sp], #4)

00011720 <bst_nova@@Base>:
   11720:	str	r4, [sp, #-8]!
   11724:	str	lr, [sp, #4]
   11728:	mov	r0, #4
   1172c:	bl	10ca8 <malloc@plt>
   11730:	cmp	r0, #0
   11734:	movne	r3, #0
   11738:	strne	r3, [r0]
   1173c:	ldr	r4, [sp]
   11740:	add	sp, sp, #4
   11744:	pop	{pc}		; (ldr pc, [sp], #4)

00011748 <bst_min@@Base>:
   11748:	cmp	r0, #0
   1174c:	beq	1176c <bst_min@@Base+0x24>
   11750:	ldr	r3, [r0]
   11754:	b	1175c <bst_min@@Base+0x14>
   11758:	mov	r3, r2
   1175c:	ldr	r2, [r3, #4]
   11760:	cmp	r2, #0
   11764:	bne	11758 <bst_min@@Base+0x10>
   11768:	ldr	r0, [r3]
   1176c:	bx	lr

00011770 <bst_max@@Base>:
   11770:	cmp	r0, #0
   11774:	beq	11794 <bst_max@@Base+0x24>
   11778:	ldr	r3, [r0]
   1177c:	b	11784 <bst_max@@Base+0x14>
   11780:	mov	r3, r2
   11784:	ldr	r2, [r3, #8]
   11788:	cmp	r2, #0
   1178c:	bne	11780 <bst_max@@Base+0x10>
   11790:	ldr	r0, [r3]
   11794:	bx	lr

00011798 <bst_novo_no@@Base>:
   11798:	strd	r4, [sp, #-16]!
   1179c:	str	r6, [sp, #8]
   117a0:	str	lr, [sp, #12]
   117a4:	mov	r5, r0
   117a8:	mov	r0, #12
   117ac:	bl	10ca8 <malloc@plt>
   117b0:	mov	r4, r0
   117b4:	mov	r0, r5
   117b8:	bl	10ccc <strlen@plt>
   117bc:	add	r0, r0, #1
   117c0:	bl	10ca8 <malloc@plt>
   117c4:	str	r0, [r4]
   117c8:	mov	r1, r5
   117cc:	bl	10c90 <strcpy@plt>
   117d0:	mov	r3, #0
   117d4:	str	r3, [r4, #4]
   117d8:	str	r3, [r4, #8]
   117dc:	mov	r0, r4
   117e0:	ldrd	r4, [sp]
   117e4:	ldr	r6, [sp, #8]
   117e8:	add	sp, sp, #12
   117ec:	pop	{pc}		; (ldr pc, [sp], #4)

000117f0 <bst_no_valormin@@Base>:
   117f0:	b	117f8 <bst_no_valormin@@Base+0x8>
   117f4:	mov	r0, r3
   117f8:	ldr	r3, [r0, #4]
   117fc:	cmp	r3, #0
   11800:	bne	117f4 <bst_no_valormin@@Base+0x4>
   11804:	bx	lr

00011808 <bst_no_valormax@@Base>:
   11808:	b	11810 <bst_no_valormax@@Base+0x8>
   1180c:	mov	r0, r3
   11810:	ldr	r3, [r0, #8]
   11814:	cmp	r3, #0
   11818:	bne	1180c <bst_no_valormax@@Base+0x4>
   1181c:	bx	lr

00011820 <bst_pesquisa_impl@@Base>:
   11820:	strd	r4, [sp, #-16]!
   11824:	str	r6, [sp, #8]
   11828:	str	lr, [sp, #12]
   1182c:	subs	r4, r0, #0
   11830:	beq	11854 <bst_pesquisa_impl@@Base+0x34>
   11834:	mov	r5, r1
   11838:	ldr	r1, [r4]
   1183c:	mov	r0, r5
   11840:	bl	10c48 <strcmp@plt>
   11844:	cmp	r0, #0
   11848:	blt	11868 <bst_pesquisa_impl@@Base+0x48>
   1184c:	cmp	r0, #0
   11850:	bgt	1187c <bst_pesquisa_impl@@Base+0x5c>
   11854:	mov	r0, r4
   11858:	ldrd	r4, [sp]
   1185c:	ldr	r6, [sp, #8]
   11860:	add	sp, sp, #12
   11864:	pop	{pc}		; (ldr pc, [sp], #4)
   11868:	mov	r1, r5
   1186c:	ldr	r0, [r4, #4]
   11870:	bl	11820 <bst_pesquisa_impl@@Base>
   11874:	mov	r4, r0
   11878:	b	11854 <bst_pesquisa_impl@@Base+0x34>
   1187c:	mov	r1, r5
   11880:	ldr	r0, [r4, #8]
   11884:	bl	11820 <bst_pesquisa_impl@@Base>
   11888:	mov	r4, r0
   1188c:	b	11854 <bst_pesquisa_impl@@Base+0x34>

00011890 <bst_pesquisa@@Base>:
   11890:	cmp	r1, #0
   11894:	cmpne	r0, #0
   11898:	beq	118b8 <bst_pesquisa@@Base+0x28>
   1189c:	str	r4, [sp, #-8]!
   118a0:	str	lr, [sp, #4]
   118a4:	ldr	r0, [r0]
   118a8:	bl	11820 <bst_pesquisa_impl@@Base>
   118ac:	ldr	r4, [sp]
   118b0:	add	sp, sp, #4
   118b4:	pop	{pc}		; (ldr pc, [sp], #4)
   118b8:	mov	r0, #0
   118bc:	bx	lr

000118c0 <bst_insere_impl@@Base>:
   118c0:	strd	r4, [sp, #-16]!
   118c4:	str	r6, [sp, #8]
   118c8:	str	lr, [sp, #12]
   118cc:	mov	r5, r1
   118d0:	subs	r4, r0, #0
   118d4:	beq	11908 <bst_insere_impl@@Base+0x48>
   118d8:	ldr	r1, [r4]
   118dc:	mov	r0, r5
   118e0:	bl	10c48 <strcmp@plt>
   118e4:	cmp	r0, #0
   118e8:	blt	11918 <bst_insere_impl@@Base+0x58>
   118ec:	cmp	r0, #0
   118f0:	bgt	1192c <bst_insere_impl@@Base+0x6c>
   118f4:	mov	r0, r4
   118f8:	ldrd	r4, [sp]
   118fc:	ldr	r6, [sp, #8]
   11900:	add	sp, sp, #12
   11904:	pop	{pc}		; (ldr pc, [sp], #4)
   11908:	mov	r0, r1
   1190c:	bl	11798 <bst_novo_no@@Base>
   11910:	mov	r4, r0
   11914:	b	118f4 <bst_insere_impl@@Base+0x34>
   11918:	mov	r1, r5
   1191c:	ldr	r0, [r4, #4]
   11920:	bl	118c0 <bst_insere_impl@@Base>
   11924:	str	r0, [r4, #4]
   11928:	b	118f4 <bst_insere_impl@@Base+0x34>
   1192c:	mov	r1, r5
   11930:	ldr	r0, [r4, #8]
   11934:	bl	118c0 <bst_insere_impl@@Base>
   11938:	str	r0, [r4, #8]
   1193c:	b	118f4 <bst_insere_impl@@Base+0x34>

00011940 <bst_insere@@Base>:
   11940:	cmp	r1, #0
   11944:	cmpne	r0, #0
   11948:	beq	11974 <bst_insere@@Base+0x34>
   1194c:	str	r4, [sp, #-8]!
   11950:	str	lr, [sp, #4]
   11954:	mov	r4, r0
   11958:	ldr	r0, [r0]
   1195c:	bl	118c0 <bst_insere_impl@@Base>
   11960:	str	r0, [r4]
   11964:	mov	r0, #0
   11968:	ldr	r4, [sp]
   1196c:	add	sp, sp, #4
   11970:	pop	{pc}		; (ldr pc, [sp], #4)
   11974:	mvn	r0, #0
   11978:	bx	lr

0001197c <bst_remove_impl@@Base>:
   1197c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11980:	strd	r6, [sp, #8]
   11984:	str	r8, [sp, #16]
   11988:	str	lr, [sp, #20]
   1198c:	subs	r4, r0, #0
   11990:	moveq	r5, r4
   11994:	beq	11a50 <bst_remove_impl@@Base+0xd4>
   11998:	mov	r5, r1
   1199c:	ldr	r7, [r4]
   119a0:	mov	r1, r7
   119a4:	mov	r0, r5
   119a8:	bl	10c48 <strcmp@plt>
   119ac:	cmp	r0, #0
   119b0:	blt	11a24 <bst_remove_impl@@Base+0xa8>
   119b4:	cmp	r0, #0
   119b8:	bgt	11a3c <bst_remove_impl@@Base+0xc0>
   119bc:	ldr	r5, [r4, #4]
   119c0:	cmp	r5, #0
   119c4:	beq	11a68 <bst_remove_impl@@Base+0xec>
   119c8:	ldr	r6, [r4, #8]
   119cc:	cmp	r6, #0
   119d0:	bne	11a7c <bst_remove_impl@@Base+0x100>
   119d4:	ldr	r0, [r5]
   119d8:	bl	10ccc <strlen@plt>
   119dc:	add	r1, r0, #1
   119e0:	mov	r0, r7
   119e4:	bl	10c84 <realloc@plt>
   119e8:	str	r0, [r4]
   119ec:	ldr	r1, [r5]
   119f0:	bl	10c90 <strcpy@plt>
   119f4:	ldr	r3, [r5, #4]
   119f8:	str	r3, [r4, #4]
   119fc:	ldr	r3, [r5, #8]
   11a00:	str	r3, [r4, #8]
   11a04:	mov	r3, r5
   11a08:	mov	r5, r4
   11a0c:	mov	r4, r3
   11a10:	ldr	r0, [r4]
   11a14:	bl	10c6c <free@plt>
   11a18:	mov	r0, r4
   11a1c:	bl	10c6c <free@plt>
   11a20:	b	11a50 <bst_remove_impl@@Base+0xd4>
   11a24:	mov	r1, r5
   11a28:	ldr	r0, [r4, #4]
   11a2c:	bl	1197c <bst_remove_impl@@Base>
   11a30:	str	r0, [r4, #4]
   11a34:	mov	r5, r4
   11a38:	b	11a50 <bst_remove_impl@@Base+0xd4>
   11a3c:	mov	r1, r5
   11a40:	ldr	r0, [r4, #8]
   11a44:	bl	1197c <bst_remove_impl@@Base>
   11a48:	str	r0, [r4, #8]
   11a4c:	mov	r5, r4
   11a50:	mov	r0, r5
   11a54:	ldrd	r4, [sp]
   11a58:	ldrd	r6, [sp, #8]
   11a5c:	ldr	r8, [sp, #16]
   11a60:	add	sp, sp, #20
   11a64:	pop	{pc}		; (ldr pc, [sp], #4)
   11a68:	ldr	r5, [r4, #8]
   11a6c:	cmp	r5, #0
   11a70:	beq	11a10 <bst_remove_impl@@Base+0x94>
   11a74:	b	119d4 <bst_remove_impl@@Base+0x58>
   11a78:	mov	r6, r3
   11a7c:	ldr	r3, [r6, #4]
   11a80:	cmp	r3, #0
   11a84:	bne	11a78 <bst_remove_impl@@Base+0xfc>
   11a88:	ldr	r0, [r6]
   11a8c:	bl	10ccc <strlen@plt>
   11a90:	add	r1, r0, #1
   11a94:	mov	r0, r7
   11a98:	bl	10c84 <realloc@plt>
   11a9c:	str	r0, [r4]
   11aa0:	ldr	r1, [r6]
   11aa4:	bl	10c90 <strcpy@plt>
   11aa8:	ldr	r1, [r6]
   11aac:	ldr	r0, [r4, #8]
   11ab0:	bl	1197c <bst_remove_impl@@Base>
   11ab4:	str	r0, [r4, #8]
   11ab8:	mov	r5, r4
   11abc:	b	11a50 <bst_remove_impl@@Base+0xd4>

00011ac0 <bst_apaga@@Base>:
   11ac0:	str	r4, [sp, #-8]!
   11ac4:	str	lr, [sp, #4]
   11ac8:	mov	r4, r0
   11acc:	ldr	r0, [r0]
   11ad0:	cmp	r0, #0
   11ad4:	beq	11aec <bst_apaga@@Base+0x2c>
   11ad8:	ldr	r1, [r0]
   11adc:	bl	1197c <bst_remove_impl@@Base>
   11ae0:	str	r0, [r4]
   11ae4:	cmp	r0, #0
   11ae8:	bne	11ad8 <bst_apaga@@Base+0x18>
   11aec:	mov	r0, r4
   11af0:	bl	10c6c <free@plt>
   11af4:	ldr	r4, [sp]
   11af8:	add	sp, sp, #4
   11afc:	pop	{pc}		; (ldr pc, [sp], #4)

00011b00 <bst_remove@@Base>:
   11b00:	cmp	r1, #0
   11b04:	cmpne	r0, #0
   11b08:	beq	11b34 <bst_remove@@Base+0x34>
   11b0c:	str	r4, [sp, #-8]!
   11b10:	str	lr, [sp, #4]
   11b14:	mov	r4, r0
   11b18:	ldr	r0, [r0]
   11b1c:	bl	1197c <bst_remove_impl@@Base>
   11b20:	str	r0, [r4]
   11b24:	mov	r0, #0
   11b28:	ldr	r4, [sp]
   11b2c:	add	sp, sp, #4
   11b30:	pop	{pc}		; (ldr pc, [sp], #4)
   11b34:	mvn	r0, #0
   11b38:	bx	lr

00011b3c <bst_altura@@Base>:
   11b3c:	cmp	r0, #0
   11b40:	beq	11ba0 <bst_altura@@Base+0x64>
   11b44:	strd	r4, [sp, #-16]!
   11b48:	str	r6, [sp, #8]
   11b4c:	str	lr, [sp, #12]
   11b50:	ldr	r4, [r0, #8]
   11b54:	cmp	r4, #0
   11b58:	beq	11b8c <bst_altura@@Base+0x50>
   11b5c:	ldr	r0, [r0, #4]
   11b60:	bl	11b3c <bst_altura@@Base>
   11b64:	mov	r5, r0
   11b68:	mov	r0, r4
   11b6c:	bl	11b3c <bst_altura@@Base>
   11b70:	cmp	r5, r0
   11b74:	addgt	r0, r5, #1
   11b78:	addle	r0, r0, #1
   11b7c:	ldrd	r4, [sp]
   11b80:	ldr	r6, [sp, #8]
   11b84:	add	sp, sp, #12
   11b88:	pop	{pc}		; (ldr pc, [sp], #4)
   11b8c:	ldr	r3, [r0, #4]
   11b90:	cmp	r3, #0
   11b94:	moveq	r0, #0
   11b98:	bne	11b5c <bst_altura@@Base+0x20>
   11b9c:	b	11b7c <bst_altura@@Base+0x40>
   11ba0:	mvn	r0, #0
   11ba4:	bx	lr

00011ba8 <bst_preordem_impl@@Base>:
   11ba8:	str	r4, [sp, #-8]!
   11bac:	str	lr, [sp, #4]
   11bb0:	subs	r4, r0, #0
   11bb4:	beq	11bd8 <bst_preordem_impl@@Base+0x30>
   11bb8:	ldr	r1, [r4]
   11bbc:	movw	r0, #7484	; 0x1d3c
   11bc0:	movt	r0, #1
   11bc4:	bl	10c54 <printf@plt>
   11bc8:	ldr	r0, [r4, #4]
   11bcc:	bl	11ba8 <bst_preordem_impl@@Base>
   11bd0:	ldr	r0, [r4, #8]
   11bd4:	bl	11ba8 <bst_preordem_impl@@Base>
   11bd8:	ldr	r4, [sp]
   11bdc:	add	sp, sp, #4
   11be0:	pop	{pc}		; (ldr pc, [sp], #4)

00011be4 <bst_imprime@@Base>:
   11be4:	str	r4, [sp, #-8]!
   11be8:	str	lr, [sp, #4]
   11bec:	subs	r4, r0, #0
   11bf0:	beq	11c10 <bst_imprime@@Base+0x2c>
   11bf4:	movw	r0, #7488	; 0x1d40
   11bf8:	movt	r0, #1
   11bfc:	bl	10c54 <printf@plt>
   11c00:	ldr	r0, [r4]
   11c04:	bl	11ba8 <bst_preordem_impl@@Base>
   11c08:	mov	r0, #10
   11c0c:	bl	10cd8 <putchar@plt>
   11c10:	ldr	r4, [sp]
   11c14:	add	sp, sp, #4
   11c18:	pop	{pc}		; (ldr pc, [sp], #4)

00011c1c <__libc_csu_init@@Base>:
   11c1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c20:	mov	r7, r0
   11c24:	ldr	r6, [pc, #72]	; 11c74 <__libc_csu_init@@Base+0x58>
   11c28:	ldr	r5, [pc, #72]	; 11c78 <__libc_csu_init@@Base+0x5c>
   11c2c:	add	r6, pc, r6
   11c30:	add	r5, pc, r5
   11c34:	sub	r6, r6, r5
   11c38:	mov	r8, r1
   11c3c:	mov	r9, r2
   11c40:	bl	10c28 <strcmp@plt-0x20>
   11c44:	asrs	r6, r6, #2
   11c48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c4c:	mov	r4, #0
   11c50:	add	r4, r4, #1
   11c54:	ldr	r3, [r5], #4
   11c58:	mov	r2, r9
   11c5c:	mov	r1, r8
   11c60:	mov	r0, r7
   11c64:	blx	r3
   11c68:	cmp	r6, r4
   11c6c:	bne	11c50 <__libc_csu_init@@Base+0x34>
   11c70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c74:	andeq	r0, r1, r0, ror #5
   11c78:	ldrdeq	r0, [r1], -r8

00011c7c <__libc_csu_fini@@Base>:
   11c7c:	bx	lr

Disassembly of section .fini:

00011c80 <.fini>:
   11c80:	push	{r3, lr}
   11c84:	pop	{r3, pc}
