
../repos/prog2/Extras_cores:     file format elf32-littlearm


Disassembly of section .init:

00010510 <.init>:
   10510:	push	{r3, lr}
   10514:	bl	10608 <_start@@Base+0x3c>
   10518:	pop	{r3, pc}

Disassembly of section .plt:

0001051c <printf@plt-0x14>:
   1051c:	push	{lr}		; (str lr, [sp, #-4]!)
   10520:	ldr	lr, [pc, #4]	; 1052c <printf@plt-0x4>
   10524:	add	lr, pc, lr
   10528:	ldr	pc, [lr, #8]!
   1052c:	ldrdeq	r0, [r1], -r4

00010530 <printf@plt>:
   10530:	add	ip, pc, #0, 12
   10534:	add	ip, ip, #16, 20	; 0x10000
   10538:	ldr	pc, [ip, #2772]!	; 0xad4

0001053c <__libc_start_main@plt>:
   1053c:	add	ip, pc, #0, 12
   10540:	add	ip, ip, #16, 20	; 0x10000
   10544:	ldr	pc, [ip, #2764]!	; 0xacc

00010548 <__gmon_start__@plt>:
   10548:	add	ip, pc, #0, 12
   1054c:	add	ip, ip, #16, 20	; 0x10000
   10550:	ldr	pc, [ip, #2756]!	; 0xac4

00010554 <abort@plt>:
   10554:	add	ip, pc, #0, 12
   10558:	add	ip, ip, #16, 20	; 0x10000
   1055c:	ldr	pc, [ip, #2748]!	; 0xabc

Disassembly of section .text:

00010560 <main@@Base>:
   10560:	push	{r4, lr}
   10564:	ldr	r0, [pc, #64]	; 105ac <main@@Base+0x4c>
   10568:	bl	10530 <printf@plt>
   1056c:	ldr	r0, [pc, #60]	; 105b0 <main@@Base+0x50>
   10570:	bl	10530 <printf@plt>
   10574:	ldr	r0, [pc, #56]	; 105b4 <main@@Base+0x54>
   10578:	bl	10530 <printf@plt>
   1057c:	ldr	r0, [pc, #52]	; 105b8 <main@@Base+0x58>
   10580:	bl	10530 <printf@plt>
   10584:	ldr	r0, [pc, #48]	; 105bc <main@@Base+0x5c>
   10588:	bl	10530 <printf@plt>
   1058c:	ldr	r0, [pc, #44]	; 105c0 <main@@Base+0x60>
   10590:	bl	10530 <printf@plt>
   10594:	ldr	r0, [pc, #40]	; 105c4 <main@@Base+0x64>
   10598:	bl	10530 <printf@plt>
   1059c:	ldr	r0, [pc, #36]	; 105c8 <main@@Base+0x68>
   105a0:	bl	10530 <printf@plt>
   105a4:	mov	r0, #0
   105a8:	pop	{r4, pc}
   105ac:	andeq	r0, r1, ip, lsr #14
   105b0:	andeq	r0, r1, sl, lsr r7
   105b4:	andeq	r0, r1, sl, asr #14
   105b8:	andeq	r0, r1, fp, asr r7
   105bc:	andeq	r0, r1, sl, ror #14
   105c0:	andeq	r0, r1, ip, ror r7
   105c4:	andeq	r0, r1, fp, lsl #15
   105c8:	muleq	r1, fp, r7

000105cc <_start@@Base>:
   105cc:	mov	fp, #0
   105d0:	mov	lr, #0
   105d4:	pop	{r1}		; (ldr r1, [sp], #4)
   105d8:	mov	r2, sp
   105dc:	push	{r2}		; (str r2, [sp, #-4]!)
   105e0:	push	{r0}		; (str r0, [sp, #-4]!)
   105e4:	ldr	ip, [pc, #16]	; 105fc <_start@@Base+0x30>
   105e8:	push	{ip}		; (str ip, [sp, #-4]!)
   105ec:	ldr	r0, [pc, #12]	; 10600 <_start@@Base+0x34>
   105f0:	ldr	r3, [pc, #12]	; 10604 <_start@@Base+0x38>
   105f4:	bl	1053c <__libc_start_main@plt>
   105f8:	bl	10554 <abort@plt>
   105fc:	andeq	r0, r1, ip, lsl r7
   10600:	andeq	r0, r1, r0, ror #10
   10604:			; <UNDEFINED> instruction: 0x000106bc
   10608:	ldr	r3, [pc, #20]	; 10624 <_start@@Base+0x58>
   1060c:	ldr	r2, [pc, #20]	; 10628 <_start@@Base+0x5c>
   10610:	add	r3, pc, r3
   10614:	ldr	r2, [r3, r2]
   10618:	cmp	r2, #0
   1061c:	bxeq	lr
   10620:	b	10548 <__gmon_start__@plt>
   10624:	andeq	r0, r1, r8, ror #19
   10628:	andeq	r0, r0, ip, lsl r0
   1062c:	ldr	r0, [pc, #24]	; 1064c <_start@@Base+0x80>
   10630:	ldr	r3, [pc, #24]	; 10650 <_start@@Base+0x84>
   10634:	cmp	r3, r0
   10638:	bxeq	lr
   1063c:	ldr	r3, [pc, #16]	; 10654 <_start@@Base+0x88>
   10640:	cmp	r3, #0
   10644:	bxeq	lr
   10648:	bx	r3
   1064c:	andeq	r1, r2, r8, lsr #32
   10650:	andeq	r1, r2, r8, lsr #32
   10654:	andeq	r0, r0, r0
   10658:	ldr	r0, [pc, #36]	; 10684 <_start@@Base+0xb8>
   1065c:	ldr	r1, [pc, #36]	; 10688 <_start@@Base+0xbc>
   10660:	sub	r1, r1, r0
   10664:	asr	r1, r1, #2
   10668:	add	r1, r1, r1, lsr #31
   1066c:	asrs	r1, r1, #1
   10670:	bxeq	lr
   10674:	ldr	r3, [pc, #16]	; 1068c <_start@@Base+0xc0>
   10678:	cmp	r3, #0
   1067c:	bxeq	lr
   10680:	bx	r3
   10684:	andeq	r1, r2, r8, lsr #32
   10688:	andeq	r1, r2, r8, lsr #32
   1068c:	andeq	r0, r0, r0
   10690:	push	{r4, lr}
   10694:	ldr	r4, [pc, #24]	; 106b4 <_start@@Base+0xe8>
   10698:	ldrb	r3, [r4]
   1069c:	cmp	r3, #0
   106a0:	popne	{r4, pc}
   106a4:	bl	1062c <_start@@Base+0x60>
   106a8:	mov	r3, #1
   106ac:	strb	r3, [r4]
   106b0:	pop	{r4, pc}
   106b4:	andeq	r1, r2, r8, lsr #32
   106b8:	b	10658 <_start@@Base+0x8c>

000106bc <__libc_csu_init@@Base>:
   106bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   106c0:	mov	r7, r0
   106c4:	ldr	r6, [pc, #72]	; 10714 <__libc_csu_init@@Base+0x58>
   106c8:	ldr	r5, [pc, #72]	; 10718 <__libc_csu_init@@Base+0x5c>
   106cc:	add	r6, pc, r6
   106d0:	add	r5, pc, r5
   106d4:	sub	r6, r6, r5
   106d8:	mov	r8, r1
   106dc:	mov	r9, r2
   106e0:	bl	10510 <printf@plt-0x20>
   106e4:	asrs	r6, r6, #2
   106e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   106ec:	mov	r4, #0
   106f0:	add	r4, r4, #1
   106f4:	ldr	r3, [r5], #4
   106f8:	mov	r2, r9
   106fc:	mov	r1, r8
   10700:	mov	r0, r7
   10704:	blx	r3
   10708:	cmp	r6, r4
   1070c:	bne	106f0 <__libc_csu_init@@Base+0x34>
   10710:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10714:	andeq	r0, r1, r0, asr #16
   10718:	andeq	r0, r1, r8, lsr r8

0001071c <__libc_csu_fini@@Base>:
   1071c:	bx	lr

Disassembly of section .fini:

00010720 <.fini>:
   10720:	push	{r3, lr}
   10724:	pop	{r3, pc}
