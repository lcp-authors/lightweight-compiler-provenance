
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	111d4 <__assert_fail@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <fdopen@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <fdopen@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	sp, r1, r4, asr r1

00010eb0 <fdopen@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #118784	; 0x1d000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <calloc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #118784	; 0x1d000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <fputs_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #118784	; 0x1d000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <raise@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #118784	; 0x1d000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <__getdelim@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #118784	; 0x1d000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <strcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #118784	; 0x1d000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <posix_fadvise64@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #118784	; 0x1d000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <fflush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #118784	; 0x1d000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <free@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #118784	; 0x1d000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <ferror@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #118784	; 0x1d000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <_exit@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #118784	; 0x1d000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <memcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #118784	; 0x1d000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <__strtoull_internal@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #118784	; 0x1d000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #118784	; 0x1d000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <fwrite_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #118784	; 0x1d000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <memcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #118784	; 0x1d000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fputc_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #118784	; 0x1d000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <dcgettext@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #118784	; 0x1d000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <realloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #118784	; 0x1d000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <textdomain@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #118784	; 0x1d000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <iswprint@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #118784	; 0x1d000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <__memcpy_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #118784	; 0x1d000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <fwrite@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #118784	; 0x1d000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <lseek64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #118784	; 0x1d000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <__ctype_get_mb_cur_max@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #118784	; 0x1d000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <fread@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #118784	; 0x1d000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__fpending@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #118784	; 0x1d000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <mbrtowc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #118784	; 0x1d000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <error@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #118784	; 0x1d000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #118784	; 0x1d000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #118784	; 0x1d000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #118784	; 0x1d000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <__ctype_tolower_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #118784	; 0x1d000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <__gmon_start__@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #118784	; 0x1d000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <getopt_long@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #118784	; 0x1d000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #118784	; 0x1d000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #118784	; 0x1d000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <feof@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #118784	; 0x1d000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #118784	; 0x1d000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #20]!

0001109c <__cxa_atexit@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <setvbuf@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <__printf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <fileno@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <__fprintf_chk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <fclose@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <fseeko64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <fcntl64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <__overflow@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <clearerr_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <fopen64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3988]!	; 0xf94

0001115c <strncmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3980]!	; 0xf8c

00011168 <abort@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3972]!	; 0xf84

00011174 <close@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011180 <dcngettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3956]!	; 0xf74

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3948]!	; 0xf6c

Disassembly of section .text:

00011198 <.text>:
   11198:	mov	fp, #0
   1119c:	mov	lr, #0
   111a0:	pop	{r1}		; (ldr r1, [sp], #4)
   111a4:	mov	r2, sp
   111a8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ac:	push	{r0}		; (str r0, [sp, #-4]!)
   111b0:	ldr	ip, [pc, #16]	; 111c8 <__assert_fail@plt+0x3c>
   111b4:	push	{ip}		; (str ip, [sp, #-4]!)
   111b8:	ldr	r0, [pc, #12]	; 111cc <__assert_fail@plt+0x40>
   111bc:	ldr	r3, [pc, #12]	; 111d0 <__assert_fail@plt+0x44>
   111c0:	bl	11018 <__libc_start_main@plt>
   111c4:	bl	11168 <abort@plt>
   111c8:	muleq	r1, r0, r7
   111cc:	andeq	r1, r1, r4, lsl #22
   111d0:	andeq	ip, r1, r0, lsr r7
   111d4:	ldr	r3, [pc, #20]	; 111f0 <__assert_fail@plt+0x64>
   111d8:	ldr	r2, [pc, #20]	; 111f4 <__assert_fail@plt+0x68>
   111dc:	add	r3, pc, r3
   111e0:	ldr	r2, [r3, r2]
   111e4:	cmp	r2, #0
   111e8:	bxeq	lr
   111ec:	b	1103c <__gmon_start__@plt>
   111f0:	andeq	ip, r1, ip, lsl lr
   111f4:	andeq	r0, r0, r4, lsl #2
   111f8:	ldr	r3, [pc, #28]	; 1121c <__assert_fail@plt+0x90>
   111fc:	ldr	r0, [pc, #28]	; 11220 <__assert_fail@plt+0x94>
   11200:	sub	r3, r3, r0
   11204:	cmp	r3, #6
   11208:	bxls	lr
   1120c:	ldr	r3, [pc, #16]	; 11224 <__assert_fail@plt+0x98>
   11210:	cmp	r3, #0
   11214:	bxeq	lr
   11218:	bx	r3
   1121c:	andeq	lr, r2, r7, ror #2
   11220:	andeq	lr, r2, r4, ror #2
   11224:	andeq	r0, r0, r0
   11228:	ldr	r1, [pc, #36]	; 11254 <__assert_fail@plt+0xc8>
   1122c:	ldr	r0, [pc, #36]	; 11258 <__assert_fail@plt+0xcc>
   11230:	sub	r1, r1, r0
   11234:	asr	r1, r1, #2
   11238:	add	r1, r1, r1, lsr #31
   1123c:	asrs	r1, r1, #1
   11240:	bxeq	lr
   11244:	ldr	r3, [pc, #16]	; 1125c <__assert_fail@plt+0xd0>
   11248:	cmp	r3, #0
   1124c:	bxeq	lr
   11250:	bx	r3
   11254:	andeq	lr, r2, r4, ror #2
   11258:	andeq	lr, r2, r4, ror #2
   1125c:	andeq	r0, r0, r0
   11260:	push	{r4, lr}
   11264:	ldr	r4, [pc, #24]	; 11284 <__assert_fail@plt+0xf8>
   11268:	ldrb	r3, [r4]
   1126c:	cmp	r3, #0
   11270:	popne	{r4, pc}
   11274:	bl	111f8 <__assert_fail@plt+0x6c>
   11278:	mov	r3, #1
   1127c:	strb	r3, [r4]
   11280:	pop	{r4, pc}
   11284:	andeq	lr, r2, ip, lsl #3
   11288:	ldr	r0, [pc, #40]	; 112b8 <__assert_fail@plt+0x12c>
   1128c:	ldr	r3, [r0]
   11290:	cmp	r3, #0
   11294:	bne	1129c <__assert_fail@plt+0x110>
   11298:	b	11228 <__assert_fail@plt+0x9c>
   1129c:	ldr	r3, [pc, #24]	; 112bc <__assert_fail@plt+0x130>
   112a0:	cmp	r3, #0
   112a4:	beq	11298 <__assert_fail@plt+0x10c>
   112a8:	push	{r4, lr}
   112ac:	blx	r3
   112b0:	pop	{r4, lr}
   112b4:	b	11228 <__assert_fail@plt+0x9c>
   112b8:	andeq	sp, r2, r4, lsl pc
   112bc:	andeq	r0, r0, r0
   112c0:	cmp	r1, #0
   112c4:	bxeq	lr
   112c8:	push	{r4, r5, r6, r7, r8, lr}
   112cc:	add	lr, r0, #1
   112d0:	mov	ip, r0
   112d4:	mov	r3, #0
   112d8:	sub	r4, r1, #1
   112dc:	mov	r8, #10
   112e0:	mov	r7, #13
   112e4:	mov	r6, #92	; 0x5c
   112e8:	b	1132c <__assert_fail@plt+0x1a0>
   112ec:	mov	r5, lr
   112f0:	strb	r8, [ip]
   112f4:	b	11318 <__assert_fail@plt+0x18c>
   112f8:	mov	r5, lr
   112fc:	strb	r7, [ip]
   11300:	b	11318 <__assert_fail@plt+0x18c>
   11304:	mov	r5, lr
   11308:	strb	r6, [ip]
   1130c:	b	11318 <__assert_fail@plt+0x18c>
   11310:	mov	r5, lr
   11314:	strb	r2, [ip]
   11318:	add	r3, r3, #1
   1131c:	add	lr, lr, #1
   11320:	add	ip, ip, #1
   11324:	cmp	r1, r3
   11328:	bls	11370 <__assert_fail@plt+0x1e4>
   1132c:	ldrb	r2, [r0, r3]
   11330:	cmp	r2, #0
   11334:	beq	11384 <__assert_fail@plt+0x1f8>
   11338:	cmp	r2, #92	; 0x5c
   1133c:	bne	11310 <__assert_fail@plt+0x184>
   11340:	cmp	r4, r3
   11344:	beq	1138c <__assert_fail@plt+0x200>
   11348:	add	r3, r3, #1
   1134c:	ldrb	r2, [r0, r3]
   11350:	cmp	r2, #110	; 0x6e
   11354:	beq	112ec <__assert_fail@plt+0x160>
   11358:	cmp	r2, #114	; 0x72
   1135c:	beq	112f8 <__assert_fail@plt+0x16c>
   11360:	cmp	r2, #92	; 0x5c
   11364:	beq	11304 <__assert_fail@plt+0x178>
   11368:	mov	r0, #0
   1136c:	pop	{r4, r5, r6, r7, r8, pc}
   11370:	add	r1, r0, r1
   11374:	cmp	r5, r1
   11378:	movcc	r3, #0
   1137c:	strbcc	r3, [r5]
   11380:	pop	{r4, r5, r6, r7, r8, pc}
   11384:	mov	r0, #0
   11388:	pop	{r4, r5, r6, r7, r8, pc}
   1138c:	mov	r0, #0
   11390:	pop	{r4, r5, r6, r7, r8, pc}
   11394:	push	{r4, r5, r6, lr}
   11398:	mov	r5, r0
   1139c:	ldr	r3, [pc, #80]	; 113f4 <__assert_fail@plt+0x268>
   113a0:	ldr	r4, [r3]
   113a4:	cmp	r4, #0
   113a8:	beq	113dc <__assert_fail@plt+0x250>
   113ac:	bl	11054 <__ctype_b_loc@plt>
   113b0:	ldr	r0, [r0]
   113b4:	mov	r2, r5
   113b8:	add	r1, r5, r4
   113bc:	ldrb	r3, [r2], #1
   113c0:	lsl	r3, r3, #1
   113c4:	ldrh	r3, [r0, r3]
   113c8:	tst	r3, #4096	; 0x1000
   113cc:	beq	113ec <__assert_fail@plt+0x260>
   113d0:	mov	r5, r2
   113d4:	cmp	r2, r1
   113d8:	bne	113bc <__assert_fail@plt+0x230>
   113dc:	ldrb	r0, [r5]
   113e0:	clz	r0, r0
   113e4:	lsr	r0, r0, #5
   113e8:	pop	{r4, r5, r6, pc}
   113ec:	mov	r0, #0
   113f0:	pop	{r4, r5, r6, pc}
   113f4:	muleq	r2, r0, r1
   113f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113fc:	mov	r4, r0
   11400:	cmp	r1, #0
   11404:	beq	11434 <__assert_fail@plt+0x2a8>
   11408:	ldrb	r1, [r0]
   1140c:	cmp	r1, #0
   11410:	beq	11430 <__assert_fail@plt+0x2a4>
   11414:	ldr	r5, [pc, #188]	; 114d8 <__assert_fail@plt+0x34c>
   11418:	ldr	sl, [pc, #188]	; 114dc <__assert_fail@plt+0x350>
   1141c:	mov	r7, #2
   11420:	mov	r6, #1
   11424:	ldr	r9, [pc, #180]	; 114e0 <__assert_fail@plt+0x354>
   11428:	ldr	r8, [pc, #180]	; 114e4 <__assert_fail@plt+0x358>
   1142c:	b	11464 <__assert_fail@plt+0x2d8>
   11430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11434:	ldr	r3, [pc, #156]	; 114d8 <__assert_fail@plt+0x34c>
   11438:	ldr	r1, [r3]
   1143c:	bl	10ec8 <fputs_unlocked@plt>
   11440:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11444:	ldr	r3, [r5]
   11448:	mov	r2, r7
   1144c:	mov	r1, r6
   11450:	mov	r0, r9
   11454:	bl	10f58 <fwrite_unlocked@plt>
   11458:	ldrb	r1, [r4, #1]!
   1145c:	cmp	r1, #0
   11460:	beq	114d4 <__assert_fail@plt+0x348>
   11464:	cmp	r1, #13
   11468:	beq	114a4 <__assert_fail@plt+0x318>
   1146c:	cmp	r1, #92	; 0x5c
   11470:	beq	114bc <__assert_fail@plt+0x330>
   11474:	cmp	r1, #10
   11478:	beq	11444 <__assert_fail@plt+0x2b8>
   1147c:	ldr	r0, [r5]
   11480:	ldr	r3, [r0, #20]
   11484:	ldr	r2, [r0, #24]
   11488:	cmp	r3, r2
   1148c:	addcc	r2, r3, #1
   11490:	strcc	r2, [r0, #20]
   11494:	strbcc	r1, [r3]
   11498:	bcc	11458 <__assert_fail@plt+0x2cc>
   1149c:	bl	11108 <__overflow@plt>
   114a0:	b	11458 <__assert_fail@plt+0x2cc>
   114a4:	ldr	r3, [r5]
   114a8:	mov	r2, r7
   114ac:	mov	r1, r6
   114b0:	mov	r0, r8
   114b4:	bl	10f58 <fwrite_unlocked@plt>
   114b8:	b	11458 <__assert_fail@plt+0x2cc>
   114bc:	ldr	r3, [r5]
   114c0:	mov	r2, r7
   114c4:	mov	r1, r6
   114c8:	mov	r0, sl
   114cc:	bl	10f58 <fwrite_unlocked@plt>
   114d0:	b	11458 <__assert_fail@plt+0x2cc>
   114d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114d8:	andeq	lr, r2, r4, lsl #3
   114dc:	andeq	ip, r1, ip, ror #17
   114e0:	andeq	ip, r1, r4, ror #17
   114e4:	andeq	ip, r1, r8, ror #17
   114e8:	push	{r4, r5, r6, r7, r8, lr}
   114ec:	mov	r6, r0
   114f0:	mov	r7, r2
   114f4:	mov	r5, r3
   114f8:	ldr	r1, [pc, #404]	; 11694 <__assert_fail@plt+0x508>
   114fc:	bl	10eec <strcmp@plt>
   11500:	mov	r3, #0
   11504:	strb	r3, [r5]
   11508:	cmp	r0, r3
   1150c:	bne	11578 <__assert_fail@plt+0x3ec>
   11510:	ldr	r4, [pc, #384]	; 11698 <__assert_fail@plt+0x50c>
   11514:	mov	r3, #1
   11518:	strb	r3, [r4, #4]
   1151c:	ldr	r3, [pc, #376]	; 1169c <__assert_fail@plt+0x510>
   11520:	ldr	r5, [r3]
   11524:	mov	r1, #2
   11528:	mov	r0, r5
   1152c:	bl	18b5c <__assert_fail@plt+0x79d0>
   11530:	ldr	r3, [r4, #8]
   11534:	ldr	r2, [r4, #12]
   11538:	lsr	r3, r3, #3
   1153c:	orr	r2, r3, r2, lsl #29
   11540:	mov	r1, r7
   11544:	mov	r0, r5
   11548:	bl	18938 <__assert_fail@plt+0x77ac>
   1154c:	subs	r4, r0, #0
   11550:	beq	1155c <__assert_fail@plt+0x3d0>
   11554:	bl	11090 <__errno_location@plt>
   11558:	ldr	r4, [r0]
   1155c:	mov	r0, r5
   11560:	bl	11138 <clearerr_unlocked@plt>
   11564:	cmp	r4, #0
   11568:	moveq	r4, #1
   1156c:	bne	11634 <__assert_fail@plt+0x4a8>
   11570:	mov	r0, r4
   11574:	pop	{r4, r5, r6, r7, r8, pc}
   11578:	ldr	r1, [pc, #288]	; 116a0 <__assert_fail@plt+0x514>
   1157c:	mov	r0, r6
   11580:	bl	18c9c <__assert_fail@plt+0x7b10>
   11584:	subs	r8, r0, #0
   11588:	beq	115d8 <__assert_fail@plt+0x44c>
   1158c:	mov	r1, #2
   11590:	mov	r0, r8
   11594:	bl	18b5c <__assert_fail@plt+0x79d0>
   11598:	ldr	r2, [pc, #248]	; 11698 <__assert_fail@plt+0x50c>
   1159c:	ldr	r3, [r2, #8]
   115a0:	ldr	r2, [r2, #12]
   115a4:	lsr	r3, r3, #3
   115a8:	orr	r2, r3, r2, lsl #29
   115ac:	mov	r1, r7
   115b0:	mov	r0, r8
   115b4:	bl	18938 <__assert_fail@plt+0x77ac>
   115b8:	cmp	r0, #0
   115bc:	bne	11660 <__assert_fail@plt+0x4d4>
   115c0:	mov	r0, r8
   115c4:	bl	18b90 <__assert_fail@plt+0x7a04>
   115c8:	cmp	r0, #0
   115cc:	bne	11688 <__assert_fail@plt+0x4fc>
   115d0:	mov	r4, #1
   115d4:	b	11570 <__assert_fail@plt+0x3e4>
   115d8:	ldr	r3, [pc, #184]	; 11698 <__assert_fail@plt+0x50c>
   115dc:	ldrb	r4, [r3, #16]
   115e0:	cmp	r4, #0
   115e4:	beq	11600 <__assert_fail@plt+0x474>
   115e8:	bl	11090 <__errno_location@plt>
   115ec:	ldr	r3, [r0]
   115f0:	cmp	r3, #2
   115f4:	moveq	r3, #1
   115f8:	strbeq	r3, [r5]
   115fc:	beq	11570 <__assert_fail@plt+0x3e4>
   11600:	bl	11090 <__errno_location@plt>
   11604:	ldr	r4, [r0]
   11608:	mov	r2, r6
   1160c:	mov	r1, #3
   11610:	mov	r0, #0
   11614:	bl	1a820 <__assert_fail@plt+0x9694>
   11618:	mov	r3, r0
   1161c:	ldr	r2, [pc, #128]	; 116a4 <__assert_fail@plt+0x518>
   11620:	mov	r1, r4
   11624:	mov	r0, #0
   11628:	bl	11000 <error@plt>
   1162c:	mov	r4, #0
   11630:	b	11570 <__assert_fail@plt+0x3e4>
   11634:	mov	r2, r6
   11638:	mov	r1, #3
   1163c:	mov	r0, #0
   11640:	bl	1a820 <__assert_fail@plt+0x9694>
   11644:	mov	r3, r0
   11648:	ldr	r2, [pc, #84]	; 116a4 <__assert_fail@plt+0x518>
   1164c:	mov	r1, r4
   11650:	mov	r0, #0
   11654:	bl	11000 <error@plt>
   11658:	mov	r4, #0
   1165c:	b	11570 <__assert_fail@plt+0x3e4>
   11660:	bl	11090 <__errno_location@plt>
   11664:	ldr	r4, [r0]
   11668:	mov	r0, r8
   1166c:	bl	18b90 <__assert_fail@plt+0x7a04>
   11670:	clz	r3, r4
   11674:	lsr	r3, r3, #5
   11678:	cmp	r0, #0
   1167c:	moveq	r3, #0
   11680:	cmp	r3, #0
   11684:	beq	11564 <__assert_fail@plt+0x3d8>
   11688:	bl	11090 <__errno_location@plt>
   1168c:	ldr	r4, [r0]
   11690:	b	11564 <__assert_fail@plt+0x3d8>
   11694:	strdeq	ip, [r1], -r0
   11698:	muleq	r2, r0, r1
   1169c:	andeq	lr, r2, r0, lsl #3
   116a0:	strdeq	ip, [r1], -r4
   116a4:	andeq	sp, r1, ip, asr #1
   116a8:	push	{lr}		; (str lr, [sp, #-4]!)
   116ac:	sub	sp, sp, #60	; 0x3c
   116b0:	subs	r6, r0, #0
   116b4:	beq	116f0 <__assert_fail@plt+0x564>
   116b8:	ldr	r3, [pc, #964]	; 11a84 <__assert_fail@plt+0x8f8>
   116bc:	ldr	r4, [r3]
   116c0:	mov	r2, #5
   116c4:	ldr	r1, [pc, #956]	; 11a88 <__assert_fail@plt+0x8fc>
   116c8:	mov	r0, #0
   116cc:	bl	10f7c <dcgettext@plt>
   116d0:	ldr	r3, [pc, #948]	; 11a8c <__assert_fail@plt+0x900>
   116d4:	ldr	r3, [r3]
   116d8:	mov	r2, r0
   116dc:	mov	r1, #1
   116e0:	mov	r0, r4
   116e4:	bl	110d8 <__fprintf_chk@plt>
   116e8:	mov	r0, r6
   116ec:	bl	11060 <exit@plt>
   116f0:	mov	r2, #5
   116f4:	ldr	r1, [pc, #916]	; 11a90 <__assert_fail@plt+0x904>
   116f8:	mov	r0, #0
   116fc:	bl	10f7c <dcgettext@plt>
   11700:	ldr	r3, [pc, #900]	; 11a8c <__assert_fail@plt+0x900>
   11704:	ldr	r2, [r3]
   11708:	mov	r1, r0
   1170c:	mov	r0, #1
   11710:	bl	110c0 <__printf_chk@plt>
   11714:	mov	r2, #5
   11718:	ldr	r1, [pc, #884]	; 11a94 <__assert_fail@plt+0x908>
   1171c:	mov	r0, #0
   11720:	bl	10f7c <dcgettext@plt>
   11724:	mov	r3, #512	; 0x200
   11728:	ldr	r2, [pc, #872]	; 11a98 <__assert_fail@plt+0x90c>
   1172c:	mov	r1, r0
   11730:	mov	r0, #1
   11734:	bl	110c0 <__printf_chk@plt>
   11738:	mov	r2, #5
   1173c:	ldr	r1, [pc, #856]	; 11a9c <__assert_fail@plt+0x910>
   11740:	mov	r0, #0
   11744:	bl	10f7c <dcgettext@plt>
   11748:	ldr	r4, [pc, #848]	; 11aa0 <__assert_fail@plt+0x914>
   1174c:	ldr	r1, [r4]
   11750:	bl	10ec8 <fputs_unlocked@plt>
   11754:	mov	r2, #5
   11758:	ldr	r1, [pc, #836]	; 11aa4 <__assert_fail@plt+0x918>
   1175c:	mov	r0, #0
   11760:	bl	10f7c <dcgettext@plt>
   11764:	ldr	r1, [r4]
   11768:	bl	10ec8 <fputs_unlocked@plt>
   1176c:	mov	r2, #5
   11770:	ldr	r1, [pc, #816]	; 11aa8 <__assert_fail@plt+0x91c>
   11774:	mov	r0, #0
   11778:	bl	10f7c <dcgettext@plt>
   1177c:	ldr	r1, [r4]
   11780:	bl	10ec8 <fputs_unlocked@plt>
   11784:	mov	r2, #5
   11788:	ldr	r1, [pc, #796]	; 11aac <__assert_fail@plt+0x920>
   1178c:	mov	r0, #0
   11790:	bl	10f7c <dcgettext@plt>
   11794:	ldr	r1, [r4]
   11798:	bl	10ec8 <fputs_unlocked@plt>
   1179c:	mov	r2, #5
   117a0:	ldr	r1, [pc, #776]	; 11ab0 <__assert_fail@plt+0x924>
   117a4:	mov	r0, #0
   117a8:	bl	10f7c <dcgettext@plt>
   117ac:	ldr	r1, [r4]
   117b0:	bl	10ec8 <fputs_unlocked@plt>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #756]	; 11ab4 <__assert_fail@plt+0x928>
   117bc:	mov	r0, #0
   117c0:	bl	10f7c <dcgettext@plt>
   117c4:	ldr	r1, [r4]
   117c8:	bl	10ec8 <fputs_unlocked@plt>
   117cc:	mov	r2, #5
   117d0:	ldr	r1, [pc, #736]	; 11ab8 <__assert_fail@plt+0x92c>
   117d4:	mov	r0, #0
   117d8:	bl	10f7c <dcgettext@plt>
   117dc:	ldr	r1, [r4]
   117e0:	bl	10ec8 <fputs_unlocked@plt>
   117e4:	mov	r2, #5
   117e8:	ldr	r1, [pc, #716]	; 11abc <__assert_fail@plt+0x930>
   117ec:	mov	r0, #0
   117f0:	bl	10f7c <dcgettext@plt>
   117f4:	ldr	r1, [r4]
   117f8:	bl	10ec8 <fputs_unlocked@plt>
   117fc:	mov	r2, #5
   11800:	ldr	r1, [pc, #696]	; 11ac0 <__assert_fail@plt+0x934>
   11804:	mov	r0, #0
   11808:	bl	10f7c <dcgettext@plt>
   1180c:	ldr	r1, [r4]
   11810:	bl	10ec8 <fputs_unlocked@plt>
   11814:	mov	r2, #5
   11818:	ldr	r1, [pc, #676]	; 11ac4 <__assert_fail@plt+0x938>
   1181c:	mov	r0, #0
   11820:	bl	10f7c <dcgettext@plt>
   11824:	ldr	r1, [r4]
   11828:	bl	10ec8 <fputs_unlocked@plt>
   1182c:	mov	r2, #5
   11830:	ldr	r1, [pc, #656]	; 11ac8 <__assert_fail@plt+0x93c>
   11834:	mov	r0, #0
   11838:	bl	10f7c <dcgettext@plt>
   1183c:	ldr	r1, [r4]
   11840:	bl	10ec8 <fputs_unlocked@plt>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #636]	; 11acc <__assert_fail@plt+0x940>
   1184c:	mov	r0, #0
   11850:	bl	10f7c <dcgettext@plt>
   11854:	ldr	r2, [pc, #628]	; 11ad0 <__assert_fail@plt+0x944>
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	bl	110c0 <__printf_chk@plt>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #612]	; 11ad4 <__assert_fail@plt+0x948>
   1186c:	mov	r0, #0
   11870:	bl	10f7c <dcgettext@plt>
   11874:	ldr	r1, [r4]
   11878:	bl	10ec8 <fputs_unlocked@plt>
   1187c:	mov	ip, sp
   11880:	ldr	lr, [pc, #592]	; 11ad8 <__assert_fail@plt+0x94c>
   11884:	ldm	lr!, {r0, r1, r2, r3}
   11888:	stmia	ip!, {r0, r1, r2, r3}
   1188c:	ldm	lr!, {r0, r1, r2, r3}
   11890:	stmia	ip!, {r0, r1, r2, r3}
   11894:	ldm	lr!, {r0, r1, r2, r3}
   11898:	stmia	ip!, {r0, r1, r2, r3}
   1189c:	ldm	lr, {r0, r1}
   118a0:	stm	ip, {r0, r1}
   118a4:	ldr	r1, [sp]
   118a8:	cmp	r1, #0
   118ac:	moveq	r4, sp
   118b0:	beq	118d8 <__assert_fail@plt+0x74c>
   118b4:	mov	r4, sp
   118b8:	ldr	r5, [pc, #540]	; 11adc <__assert_fail@plt+0x950>
   118bc:	mov	r0, r5
   118c0:	bl	10eec <strcmp@plt>
   118c4:	cmp	r0, #0
   118c8:	beq	118d8 <__assert_fail@plt+0x74c>
   118cc:	ldr	r1, [r4, #8]!
   118d0:	cmp	r1, #0
   118d4:	bne	118bc <__assert_fail@plt+0x730>
   118d8:	ldr	r4, [r4, #4]
   118dc:	cmp	r4, #0
   118e0:	beq	119f4 <__assert_fail@plt+0x868>
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #496]	; 11ae0 <__assert_fail@plt+0x954>
   118ec:	mov	r0, #0
   118f0:	bl	10f7c <dcgettext@plt>
   118f4:	ldr	r3, [pc, #488]	; 11ae4 <__assert_fail@plt+0x958>
   118f8:	ldr	r2, [pc, #488]	; 11ae8 <__assert_fail@plt+0x95c>
   118fc:	mov	r1, r0
   11900:	mov	r0, #1
   11904:	bl	110c0 <__printf_chk@plt>
   11908:	mov	r1, #0
   1190c:	mov	r0, #5
   11910:	bl	11114 <setlocale@plt>
   11914:	cmp	r0, #0
   11918:	beq	11930 <__assert_fail@plt+0x7a4>
   1191c:	mov	r2, #3
   11920:	ldr	r1, [pc, #452]	; 11aec <__assert_fail@plt+0x960>
   11924:	bl	1115c <strncmp@plt>
   11928:	cmp	r0, #0
   1192c:	bne	11990 <__assert_fail@plt+0x804>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #436]	; 11af0 <__assert_fail@plt+0x964>
   11938:	mov	r0, #0
   1193c:	bl	10f7c <dcgettext@plt>
   11940:	ldr	r5, [pc, #404]	; 11adc <__assert_fail@plt+0x950>
   11944:	mov	r3, r5
   11948:	ldr	r2, [pc, #404]	; 11ae4 <__assert_fail@plt+0x958>
   1194c:	mov	r1, r0
   11950:	mov	r0, #1
   11954:	bl	110c0 <__printf_chk@plt>
   11958:	mov	r2, #5
   1195c:	ldr	r1, [pc, #400]	; 11af4 <__assert_fail@plt+0x968>
   11960:	mov	r0, #0
   11964:	bl	10f7c <dcgettext@plt>
   11968:	mov	r1, r0
   1196c:	ldr	r2, [pc, #388]	; 11af8 <__assert_fail@plt+0x96c>
   11970:	ldr	r3, [pc, #388]	; 11afc <__assert_fail@plt+0x970>
   11974:	cmp	r4, r5
   11978:	movne	r3, r2
   1197c:	mov	r2, r4
   11980:	mov	r0, #1
   11984:	bl	110c0 <__printf_chk@plt>
   11988:	b	116e8 <__assert_fail@plt+0x55c>
   1198c:	ldr	r4, [pc, #328]	; 11adc <__assert_fail@plt+0x950>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #356]	; 11b00 <__assert_fail@plt+0x974>
   11998:	mov	r0, #0
   1199c:	bl	10f7c <dcgettext@plt>
   119a0:	ldr	r3, [pc, #248]	; 11aa0 <__assert_fail@plt+0x914>
   119a4:	ldr	r1, [r3]
   119a8:	bl	10ec8 <fputs_unlocked@plt>
   119ac:	b	11930 <__assert_fail@plt+0x7a4>
   119b0:	mov	r2, #5
   119b4:	ldr	r1, [pc, #308]	; 11af0 <__assert_fail@plt+0x964>
   119b8:	mov	r0, #0
   119bc:	bl	10f7c <dcgettext@plt>
   119c0:	ldr	r4, [pc, #276]	; 11adc <__assert_fail@plt+0x950>
   119c4:	mov	r3, r4
   119c8:	ldr	r2, [pc, #276]	; 11ae4 <__assert_fail@plt+0x958>
   119cc:	mov	r1, r0
   119d0:	mov	r0, #1
   119d4:	bl	110c0 <__printf_chk@plt>
   119d8:	mov	r2, #5
   119dc:	ldr	r1, [pc, #272]	; 11af4 <__assert_fail@plt+0x968>
   119e0:	mov	r0, #0
   119e4:	bl	10f7c <dcgettext@plt>
   119e8:	mov	r1, r0
   119ec:	ldr	r3, [pc, #264]	; 11afc <__assert_fail@plt+0x970>
   119f0:	b	1197c <__assert_fail@plt+0x7f0>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #224]	; 11ae0 <__assert_fail@plt+0x954>
   119fc:	mov	r0, #0
   11a00:	bl	10f7c <dcgettext@plt>
   11a04:	ldr	r3, [pc, #216]	; 11ae4 <__assert_fail@plt+0x958>
   11a08:	ldr	r2, [pc, #216]	; 11ae8 <__assert_fail@plt+0x95c>
   11a0c:	mov	r1, r0
   11a10:	mov	r0, #1
   11a14:	bl	110c0 <__printf_chk@plt>
   11a18:	mov	r1, #0
   11a1c:	mov	r0, #5
   11a20:	bl	11114 <setlocale@plt>
   11a24:	cmp	r0, #0
   11a28:	beq	119b0 <__assert_fail@plt+0x824>
   11a2c:	mov	r2, #3
   11a30:	ldr	r1, [pc, #180]	; 11aec <__assert_fail@plt+0x960>
   11a34:	bl	1115c <strncmp@plt>
   11a38:	cmp	r0, #0
   11a3c:	bne	1198c <__assert_fail@plt+0x800>
   11a40:	mov	r2, #5
   11a44:	ldr	r1, [pc, #164]	; 11af0 <__assert_fail@plt+0x964>
   11a48:	mov	r0, #0
   11a4c:	bl	10f7c <dcgettext@plt>
   11a50:	ldr	r4, [pc, #132]	; 11adc <__assert_fail@plt+0x950>
   11a54:	mov	r3, r4
   11a58:	ldr	r2, [pc, #132]	; 11ae4 <__assert_fail@plt+0x958>
   11a5c:	mov	r1, r0
   11a60:	mov	r0, #1
   11a64:	bl	110c0 <__printf_chk@plt>
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #128]	; 11af4 <__assert_fail@plt+0x968>
   11a70:	mov	r0, #0
   11a74:	bl	10f7c <dcgettext@plt>
   11a78:	mov	r1, r0
   11a7c:	ldr	r3, [pc, #120]	; 11afc <__assert_fail@plt+0x970>
   11a80:	b	1197c <__assert_fail@plt+0x7f0>
   11a84:	andeq	lr, r2, r8, ror r1
   11a88:	andeq	ip, r1, r0, lsl #18
   11a8c:			; <UNDEFINED> instruction: 0x0002e1b4
   11a90:	andeq	ip, r1, r8, lsr #18
   11a94:	andeq	ip, r1, ip, asr #18
   11a98:	andeq	ip, r1, r4, ror r9
   11a9c:	andeq	ip, r1, ip, ror r9
   11aa0:	andeq	lr, r2, r4, lsl #3
   11aa4:			; <UNDEFINED> instruction: 0x0001c9b4
   11aa8:	andeq	ip, r1, r0, lsl #20
   11aac:	andeq	ip, r1, r0, lsr sl
   11ab0:	andeq	ip, r1, r8, ror sl
   11ab4:	andeq	ip, r1, r0, lsl fp
   11ab8:	andeq	ip, r1, r8, asr #22
   11abc:	andeq	ip, r1, r0, lsl #23
   11ac0:	andeq	ip, r1, r0, lsl #24
   11ac4:			; <UNDEFINED> instruction: 0x0001cdb8
   11ac8:	andeq	ip, r1, r8, ror #27
   11acc:	andeq	ip, r1, r0, lsr #28
   11ad0:	andeq	ip, r1, ip, asr #28
   11ad4:	andeq	ip, r1, r8, asr lr
   11ad8:			; <UNDEFINED> instruction: 0x0001c7bc
   11adc:	strdeq	ip, [r1], -r8
   11ae0:	andeq	ip, r1, r8, lsr #31
   11ae4:	andeq	ip, r1, r0, asr #31
   11ae8:	andeq	ip, r1, r8, ror #31
   11aec:	strdeq	ip, [r1], -r8
   11af0:	andeq	sp, r1, r4, asr #32
   11af4:	andeq	sp, r1, r0, rrx
   11af8:	andeq	ip, r1, ip, ror fp
   11afc:	andeq	sp, r1, ip, lsl #11
   11b00:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   11b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b08:	sub	sp, sp, #284	; 0x11c
   11b0c:	str	r0, [sp, #24]
   11b10:	mov	r4, r1
   11b14:	ldr	r0, [r1]
   11b18:	bl	18e38 <__assert_fail@plt+0x7cac>
   11b1c:	ldr	sl, [pc, #3632]	; 12954 <__assert_fail@plt+0x17c8>
   11b20:	mov	r1, sl
   11b24:	mov	r0, #6
   11b28:	bl	11114 <setlocale@plt>
   11b2c:	ldr	r6, [pc, #3620]	; 12958 <__assert_fail@plt+0x17cc>
   11b30:	ldr	r1, [pc, #3620]	; 1295c <__assert_fail@plt+0x17d0>
   11b34:	mov	r0, r6
   11b38:	bl	11150 <bindtextdomain@plt>
   11b3c:	mov	r0, r6
   11b40:	bl	10f94 <textdomain@plt>
   11b44:	ldr	r0, [pc, #3604]	; 12960 <__assert_fail@plt+0x17d4>
   11b48:	bl	1c794 <__assert_fail@plt+0xb608>
   11b4c:	mov	r3, #0
   11b50:	mov	r2, #1
   11b54:	mov	r1, r3
   11b58:	ldr	r0, [pc, #3780]	; 12a24 <__assert_fail@plt+0x1898>
   11b5c:	ldr	r0, [r0]
   11b60:	bl	110a8 <setvbuf@plt>
   11b64:	mov	r3, #0
   11b68:	str	r3, [sp, #32]
   11b6c:	mvn	r9, #0
   11b70:	str	r3, [sp, #28]
   11b74:	ldr	r6, [pc, #3560]	; 12964 <__assert_fail@plt+0x17d8>
   11b78:	ldr	r5, [pc, #3560]	; 12968 <__assert_fail@plt+0x17dc>
   11b7c:	ldr	r7, [pc, #3760]	; 12a34 <__assert_fail@plt+0x18a8>
   11b80:	mov	r8, #1
   11b84:	str	r8, [sp, #36]	; 0x24
   11b88:	ldr	fp, [pc, #3716]	; 12a14 <__assert_fail@plt+0x1888>
   11b8c:	mov	r3, #0
   11b90:	str	r3, [sp]
   11b94:	mov	r3, r6
   11b98:	mov	r2, r5
   11b9c:	mov	r1, r4
   11ba0:	ldr	r0, [sp, #24]
   11ba4:	bl	11048 <getopt_long@plt>
   11ba8:	cmn	r0, #1
   11bac:	beq	11da4 <__assert_fail@plt+0xc18>
   11bb0:	cmp	r0, #119	; 0x77
   11bb4:	beq	11d1c <__assert_fail@plt+0xb90>
   11bb8:	bgt	11c00 <__assert_fail@plt+0xa74>
   11bbc:	cmp	r0, #98	; 0x62
   11bc0:	beq	11c4c <__assert_fail@plt+0xac0>
   11bc4:	ble	11be8 <__assert_fail@plt+0xa5c>
   11bc8:	cmp	r0, #108	; 0x6c
   11bcc:	beq	11c54 <__assert_fail@plt+0xac8>
   11bd0:	cmp	r0, #116	; 0x74
   11bd4:	beq	11d9c <__assert_fail@plt+0xc10>
   11bd8:	cmp	r0, #99	; 0x63
   11bdc:	beq	11d94 <__assert_fail@plt+0xc08>
   11be0:	mov	r0, #1
   11be4:	bl	116a8 <__assert_fail@plt+0x51c>
   11be8:	cmn	r0, #3
   11bec:	beq	11d58 <__assert_fail@plt+0xbcc>
   11bf0:	cmn	r0, #2
   11bf4:	bne	11be0 <__assert_fail@plt+0xa54>
   11bf8:	mov	r0, #0
   11bfc:	bl	116a8 <__assert_fail@plt+0x51c>
   11c00:	ldr	r3, [pc, #3428]	; 1296c <__assert_fail@plt+0x17e0>
   11c04:	cmp	r0, r3
   11c08:	beq	11d08 <__assert_fail@plt+0xb7c>
   11c0c:	ble	11c34 <__assert_fail@plt+0xaa8>
   11c10:	ldr	r3, [pc, #3416]	; 12970 <__assert_fail@plt+0x17e4>
   11c14:	cmp	r0, r3
   11c18:	beq	11d44 <__assert_fail@plt+0xbb8>
   11c1c:	blt	11d30 <__assert_fail@plt+0xba4>
   11c20:	cmp	r0, #260	; 0x104
   11c24:	bne	11be0 <__assert_fail@plt+0xa54>
   11c28:	str	r8, [sp, #32]
   11c2c:	ldr	r9, [sp, #36]	; 0x24
   11c30:	b	11b8c <__assert_fail@plt+0xa00>
   11c34:	cmp	r0, #122	; 0x7a
   11c38:	beq	11d4c <__assert_fail@plt+0xbc0>
   11c3c:	cmp	r0, #256	; 0x100
   11c40:	bne	11be0 <__assert_fail@plt+0xa54>
   11c44:	strb	r8, [r7, #16]
   11c48:	b	11b8c <__assert_fail@plt+0xa00>
   11c4c:	mov	r9, r8
   11c50:	b	11b8c <__assert_fail@plt+0xa00>
   11c54:	ldr	sl, [pc, #3352]	; 12974 <__assert_fail@plt+0x17e8>
   11c58:	ldr	r3, [sl]
   11c5c:	str	r3, [sp, #40]	; 0x28
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #3340]	; 12978 <__assert_fail@plt+0x17ec>
   11c68:	mov	r0, #0
   11c6c:	bl	10f7c <dcgettext@plt>
   11c70:	mov	r3, #0
   11c74:	str	r3, [sp, #16]
   11c78:	str	r0, [sp, #12]
   11c7c:	ldr	r3, [pc, #3280]	; 12954 <__assert_fail@plt+0x17c8>
   11c80:	str	r3, [sp, #8]
   11c84:	mvn	r2, #0
   11c88:	mvn	r3, #0
   11c8c:	strd	r2, [sp]
   11c90:	mov	r2, #0
   11c94:	mov	r3, #0
   11c98:	ldr	r0, [sp, #40]	; 0x28
   11c9c:	bl	1b650 <__assert_fail@plt+0xa4c4>
   11ca0:	strd	r0, [r7, #8]
   11ca4:	ldr	sl, [sl]
   11ca8:	and	r0, r0, #7
   11cac:	mov	r1, #0
   11cb0:	orrs	r3, r0, r1
   11cb4:	beq	11b8c <__assert_fail@plt+0xa00>
   11cb8:	mov	r2, #5
   11cbc:	ldr	r1, [pc, #3256]	; 1297c <__assert_fail@plt+0x17f0>
   11cc0:	mov	r0, #0
   11cc4:	bl	10f7c <dcgettext@plt>
   11cc8:	mov	r4, r0
   11ccc:	mov	r0, sl
   11cd0:	bl	1a988 <__assert_fail@plt+0x97fc>
   11cd4:	mov	r3, r0
   11cd8:	mov	r2, r4
   11cdc:	mov	r1, #0
   11ce0:	mov	r0, r1
   11ce4:	bl	11000 <error@plt>
   11ce8:	mov	r2, #5
   11cec:	ldr	r1, [pc, #3212]	; 12980 <__assert_fail@plt+0x17f4>
   11cf0:	mov	r0, #0
   11cf4:	bl	10f7c <dcgettext@plt>
   11cf8:	mov	r2, r0
   11cfc:	mov	r1, #0
   11d00:	mov	r0, #1
   11d04:	bl	11000 <error@plt>
   11d08:	strb	r8, [r7, #17]
   11d0c:	mov	r3, #0
   11d10:	strb	r3, [r7, #18]
   11d14:	strb	r3, [r7, #19]
   11d18:	b	11b8c <__assert_fail@plt+0xa00>
   11d1c:	mov	r3, #0
   11d20:	strb	r3, [r7, #17]
   11d24:	strb	r8, [r7, #18]
   11d28:	strb	r3, [r7, #19]
   11d2c:	b	11b8c <__assert_fail@plt+0xa00>
   11d30:	mov	r3, #0
   11d34:	strb	r3, [r7, #17]
   11d38:	strb	r3, [r7, #18]
   11d3c:	strb	r8, [r7, #19]
   11d40:	b	11b8c <__assert_fail@plt+0xa00>
   11d44:	strb	r8, [r7, #20]
   11d48:	b	11b8c <__assert_fail@plt+0xa00>
   11d4c:	mov	r3, #0
   11d50:	strb	r3, [fp]
   11d54:	b	11b8c <__assert_fail@plt+0xa00>
   11d58:	mov	r4, #0
   11d5c:	str	r4, [sp, #8]
   11d60:	ldr	r3, [pc, #3100]	; 12984 <__assert_fail@plt+0x17f8>
   11d64:	str	r3, [sp, #4]
   11d68:	ldr	r3, [pc, #3096]	; 12988 <__assert_fail@plt+0x17fc>
   11d6c:	str	r3, [sp]
   11d70:	ldr	r3, [pc, #3092]	; 1298c <__assert_fail@plt+0x1800>
   11d74:	ldr	r3, [r3]
   11d78:	ldr	r2, [pc, #3088]	; 12990 <__assert_fail@plt+0x1804>
   11d7c:	ldr	r1, [pc, #3088]	; 12994 <__assert_fail@plt+0x1808>
   11d80:	ldr	r0, [pc, #3228]	; 12a24 <__assert_fail@plt+0x1898>
   11d84:	ldr	r0, [r0]
   11d88:	bl	1ae68 <__assert_fail@plt+0x9cdc>
   11d8c:	mov	r0, r4
   11d90:	bl	11060 <exit@plt>
   11d94:	str	r8, [sp, #28]
   11d98:	b	11b8c <__assert_fail@plt+0xa00>
   11d9c:	mov	r9, #0
   11da0:	b	11b8c <__assert_fail@plt+0xa00>
   11da4:	ldr	r3, [pc, #3208]	; 12a34 <__assert_fail@plt+0x18a8>
   11da8:	mov	r2, #3
   11dac:	str	r2, [r3, #24]
   11db0:	ldrd	r2, [r3, #8]
   11db4:	cmp	r3, #0
   11db8:	cmpeq	r2, #512	; 0x200
   11dbc:	bhi	11f20 <__assert_fail@plt+0xd94>
   11dc0:	orrs	r3, r2, r3
   11dc4:	moveq	r0, #512	; 0x200
   11dc8:	moveq	r1, #0
   11dcc:	ldreq	r3, [pc, #3168]	; 12a34 <__assert_fail@plt+0x18a8>
   11dd0:	strdeq	r0, [r3, #8]
   11dd4:	ldr	r2, [pc, #3160]	; 12a34 <__assert_fail@plt+0x18a8>
   11dd8:	ldr	r3, [r2, #8]
   11ddc:	ldr	r1, [r2, #12]
   11de0:	lsr	r3, r3, #2
   11de4:	orr	r3, r3, r1, lsl #30
   11de8:	str	r3, [r2]
   11dec:	ldr	r3, [sp, #32]
   11df0:	cmp	r9, #0
   11df4:	movne	r3, #0
   11df8:	andeq	r3, r3, #1
   11dfc:	cmp	r3, #0
   11e00:	bne	11f88 <__assert_fail@plt+0xdfc>
   11e04:	ldr	r3, [pc, #3080]	; 12a14 <__assert_fail@plt+0x1888>
   11e08:	ldrb	r3, [r3]
   11e0c:	ldr	r2, [sp, #28]
   11e10:	cmp	r3, #10
   11e14:	moveq	r2, #0
   11e18:	andne	r2, r2, #1
   11e1c:	cmp	r2, #0
   11e20:	bne	11fb0 <__assert_fail@plt+0xe24>
   11e24:	ldr	r3, [sp, #28]
   11e28:	ldr	r2, [sp, #32]
   11e2c:	tst	r3, r2
   11e30:	bne	11fd8 <__assert_fail@plt+0xe4c>
   11e34:	ldr	r3, [sp, #28]
   11e38:	cmp	r9, #0
   11e3c:	movlt	r3, #0
   11e40:	andge	r3, r3, #1
   11e44:	cmp	r3, #0
   11e48:	bne	12000 <__assert_fail@plt+0xe74>
   11e4c:	ldr	r3, [pc, #3040]	; 12a34 <__assert_fail@plt+0x18a8>
   11e50:	ldrb	r3, [r3, #16]
   11e54:	eor	r3, r3, #1
   11e58:	ldr	r2, [sp, #28]
   11e5c:	orrs	r3, r2, r3
   11e60:	beq	12028 <__assert_fail@plt+0xe9c>
   11e64:	ldr	r3, [pc, #3016]	; 12a34 <__assert_fail@plt+0x18a8>
   11e68:	ldrb	r3, [r3, #17]
   11e6c:	eor	r3, r3, #1
   11e70:	ldr	r2, [sp, #28]
   11e74:	orrs	r3, r2, r3
   11e78:	beq	12050 <__assert_fail@plt+0xec4>
   11e7c:	ldr	r3, [pc, #2992]	; 12a34 <__assert_fail@plt+0x18a8>
   11e80:	ldrb	r3, [r3, #18]
   11e84:	eor	r3, r3, #1
   11e88:	ldr	r2, [sp, #28]
   11e8c:	orrs	r3, r2, r3
   11e90:	beq	12078 <__assert_fail@plt+0xeec>
   11e94:	ldr	r3, [pc, #2968]	; 12a34 <__assert_fail@plt+0x18a8>
   11e98:	ldrb	r3, [r3, #19]
   11e9c:	eor	r3, r3, #1
   11ea0:	ldr	r2, [sp, #28]
   11ea4:	orrs	r3, r2, r3
   11ea8:	str	r3, [sp, #52]	; 0x34
   11eac:	beq	120a0 <__assert_fail@plt+0xf14>
   11eb0:	ldr	r3, [sp, #28]
   11eb4:	eor	r3, r3, #1
   11eb8:	ldr	r2, [pc, #2932]	; 12a34 <__assert_fail@plt+0x18a8>
   11ebc:	ldrb	r2, [r2, #20]
   11ec0:	ands	r3, r2, r3
   11ec4:	str	r3, [sp, #36]	; 0x24
   11ec8:	bne	120c8 <__assert_fail@plt+0xf3c>
   11ecc:	bic	r3, r9, r9, asr #31
   11ed0:	str	r3, [sp, #108]	; 0x6c
   11ed4:	ldr	r2, [sp, #24]
   11ed8:	add	r3, r4, r2, lsl #2
   11edc:	str	r3, [sp, #60]	; 0x3c
   11ee0:	ldr	r3, [pc, #2736]	; 12998 <__assert_fail@plt+0x180c>
   11ee4:	ldr	r3, [r3]
   11ee8:	cmp	r2, r3
   11eec:	ldreq	r3, [pc, #2844]	; 12a10 <__assert_fail@plt+0x1884>
   11ef0:	streq	r3, [r4, r2, lsl #2]
   11ef4:	ldreq	r3, [sp, #60]	; 0x3c
   11ef8:	addeq	r3, r3, #4
   11efc:	streq	r3, [sp, #60]	; 0x3c
   11f00:	ldr	r3, [pc, #2704]	; 12998 <__assert_fail@plt+0x180c>
   11f04:	ldr	r3, [r3]
   11f08:	add	r3, r4, r3, lsl #2
   11f0c:	str	r3, [sp, #24]
   11f10:	ldr	fp, [pc, #2844]	; 12a34 <__assert_fail@plt+0x18a8>
   11f14:	add	r3, sp, #136	; 0x88
   11f18:	str	r3, [sp, #96]	; 0x60
   11f1c:	b	12cb8 <__assert_fail@plt+0x1b2c>
   11f20:	mov	r2, #5
   11f24:	ldr	r1, [pc, #2640]	; 1297c <__assert_fail@plt+0x17f0>
   11f28:	mov	r0, #0
   11f2c:	bl	10f7c <dcgettext@plt>
   11f30:	mov	r4, r0
   11f34:	mov	r0, sl
   11f38:	bl	1a988 <__assert_fail@plt+0x97fc>
   11f3c:	mov	r3, r0
   11f40:	mov	r2, r4
   11f44:	mov	r1, #0
   11f48:	mov	r0, r1
   11f4c:	bl	11000 <error@plt>
   11f50:	mov	r2, #5
   11f54:	ldr	r1, [pc, #2624]	; 1299c <__assert_fail@plt+0x1810>
   11f58:	mov	r0, #0
   11f5c:	bl	10f7c <dcgettext@plt>
   11f60:	mov	r4, r0
   11f64:	ldr	r0, [pc, #2736]	; 12a1c <__assert_fail@plt+0x1890>
   11f68:	bl	1a988 <__assert_fail@plt+0x97fc>
   11f6c:	mov	r3, #512	; 0x200
   11f70:	str	r3, [sp]
   11f74:	mov	r3, r0
   11f78:	mov	r2, r4
   11f7c:	mov	r1, #0
   11f80:	mov	r0, #1
   11f84:	bl	11000 <error@plt>
   11f88:	mov	r2, #5
   11f8c:	ldr	r1, [pc, #2572]	; 129a0 <__assert_fail@plt+0x1814>
   11f90:	mov	r0, #0
   11f94:	bl	10f7c <dcgettext@plt>
   11f98:	mov	r2, r0
   11f9c:	mov	r1, #0
   11fa0:	mov	r0, r1
   11fa4:	bl	11000 <error@plt>
   11fa8:	mov	r0, #1
   11fac:	bl	116a8 <__assert_fail@plt+0x51c>
   11fb0:	mov	r2, #5
   11fb4:	ldr	r1, [pc, #2536]	; 129a4 <__assert_fail@plt+0x1818>
   11fb8:	mov	r0, #0
   11fbc:	bl	10f7c <dcgettext@plt>
   11fc0:	mov	r2, r0
   11fc4:	mov	r1, #0
   11fc8:	mov	r0, r1
   11fcc:	bl	11000 <error@plt>
   11fd0:	mov	r0, #1
   11fd4:	bl	116a8 <__assert_fail@plt+0x51c>
   11fd8:	mov	r2, #5
   11fdc:	ldr	r1, [pc, #2500]	; 129a8 <__assert_fail@plt+0x181c>
   11fe0:	mov	r0, #0
   11fe4:	bl	10f7c <dcgettext@plt>
   11fe8:	mov	r2, r0
   11fec:	mov	r1, #0
   11ff0:	mov	r0, r1
   11ff4:	bl	11000 <error@plt>
   11ff8:	mov	r0, #1
   11ffc:	bl	116a8 <__assert_fail@plt+0x51c>
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #2464]	; 129ac <__assert_fail@plt+0x1820>
   12008:	mov	r0, #0
   1200c:	bl	10f7c <dcgettext@plt>
   12010:	mov	r2, r0
   12014:	mov	r1, #0
   12018:	mov	r0, r1
   1201c:	bl	11000 <error@plt>
   12020:	mov	r0, #1
   12024:	bl	116a8 <__assert_fail@plt+0x51c>
   12028:	mov	r2, #5
   1202c:	ldr	r1, [pc, #2428]	; 129b0 <__assert_fail@plt+0x1824>
   12030:	mov	r0, #0
   12034:	bl	10f7c <dcgettext@plt>
   12038:	mov	r2, r0
   1203c:	mov	r1, #0
   12040:	mov	r0, r1
   12044:	bl	11000 <error@plt>
   12048:	mov	r0, #1
   1204c:	bl	116a8 <__assert_fail@plt+0x51c>
   12050:	mov	r2, #5
   12054:	ldr	r1, [pc, #2392]	; 129b4 <__assert_fail@plt+0x1828>
   12058:	mov	r0, #0
   1205c:	bl	10f7c <dcgettext@plt>
   12060:	mov	r2, r0
   12064:	mov	r1, #0
   12068:	mov	r0, r1
   1206c:	bl	11000 <error@plt>
   12070:	mov	r0, #1
   12074:	bl	116a8 <__assert_fail@plt+0x51c>
   12078:	mov	r2, #5
   1207c:	ldr	r1, [pc, #2356]	; 129b8 <__assert_fail@plt+0x182c>
   12080:	mov	r0, #0
   12084:	bl	10f7c <dcgettext@plt>
   12088:	mov	r2, r0
   1208c:	mov	r1, #0
   12090:	mov	r0, r1
   12094:	bl	11000 <error@plt>
   12098:	mov	r0, #1
   1209c:	bl	116a8 <__assert_fail@plt+0x51c>
   120a0:	mov	r2, #5
   120a4:	ldr	r1, [pc, #2320]	; 129bc <__assert_fail@plt+0x1830>
   120a8:	mov	r0, #0
   120ac:	bl	10f7c <dcgettext@plt>
   120b0:	mov	r2, r0
   120b4:	mov	r1, #0
   120b8:	mov	r0, r1
   120bc:	bl	11000 <error@plt>
   120c0:	mov	r0, #1
   120c4:	bl	116a8 <__assert_fail@plt+0x51c>
   120c8:	mov	r2, #5
   120cc:	ldr	r1, [pc, #2284]	; 129c0 <__assert_fail@plt+0x1834>
   120d0:	mov	r0, #0
   120d4:	bl	10f7c <dcgettext@plt>
   120d8:	mov	r2, r0
   120dc:	mov	r1, #0
   120e0:	mov	r0, r1
   120e4:	bl	11000 <error@plt>
   120e8:	mov	r0, #1
   120ec:	bl	116a8 <__assert_fail@plt+0x51c>
   120f0:	ldr	r1, [pc, #2252]	; 129c4 <__assert_fail@plt+0x1838>
   120f4:	mov	r0, r6
   120f8:	bl	18c9c <__assert_fail@plt+0x7b10>
   120fc:	subs	r9, r0, #0
   12100:	strne	r6, [sp, #68]	; 0x44
   12104:	bne	12d18 <__assert_fail@plt+0x1b8c>
   12108:	bl	11090 <__errno_location@plt>
   1210c:	ldr	r4, [r0]
   12110:	mov	r2, r6
   12114:	mov	r1, #3
   12118:	mov	r0, #0
   1211c:	bl	1a820 <__assert_fail@plt+0x9694>
   12120:	mov	r3, r0
   12124:	ldr	r2, [pc, #2204]	; 129c8 <__assert_fail@plt+0x183c>
   12128:	mov	r1, r4
   1212c:	mov	r0, #0
   12130:	bl	11000 <error@plt>
   12134:	ldr	r3, [sp, #36]	; 0x24
   12138:	b	12908 <__assert_fail@plt+0x177c>
   1213c:	mov	r2, #5
   12140:	ldr	r1, [pc, #2180]	; 129cc <__assert_fail@plt+0x1840>
   12144:	mov	r0, #0
   12148:	bl	10f7c <dcgettext@plt>
   1214c:	mov	r4, r0
   12150:	ldr	r2, [sp, #68]	; 0x44
   12154:	mov	r1, #3
   12158:	mov	r0, #0
   1215c:	bl	1a820 <__assert_fail@plt+0x9694>
   12160:	mov	r3, r0
   12164:	mov	r2, r4
   12168:	mov	r1, #0
   1216c:	mov	r0, #1
   12170:	bl	11000 <error@plt>
   12174:	mov	r5, #0
   12178:	b	123bc <__assert_fail@plt+0x1230>
   1217c:	mov	r2, #0
   12180:	str	r2, [sp]
   12184:	add	r3, sp, #128	; 0x80
   12188:	add	r1, sp, #124	; 0x7c
   1218c:	ldr	r0, [sp, #48]	; 0x30
   12190:	add	r0, sl, r0
   12194:	bl	1b770 <__assert_fail@plt+0xa5e4>
   12198:	cmp	r0, #0
   1219c:	bne	122f0 <__assert_fail@plt+0x1164>
   121a0:	ldrd	r0, [sp, #128]	; 0x80
   121a4:	orrs	r3, r0, r1
   121a8:	beq	122f0 <__assert_fail@plt+0x1164>
   121ac:	ldrd	r2, [fp, #8]
   121b0:	cmp	r1, r3
   121b4:	cmpeq	r0, r2
   121b8:	bhi	122f0 <__assert_fail@plt+0x1164>
   121bc:	and	r2, r0, #7
   121c0:	mov	r3, #0
   121c4:	orrs	r3, r2, r3
   121c8:	bne	122f0 <__assert_fail@plt+0x1164>
   121cc:	ldr	r3, [sp, #124]	; 0x7c
   121d0:	sub	r3, r3, sl
   121d4:	str	r3, [sp, #48]	; 0x30
   121d8:	strd	r0, [fp, #8]
   121dc:	b	12448 <__assert_fail@plt+0x12bc>
   121e0:	sub	r4, r4, #1
   121e4:	cmp	r4, #0
   121e8:	beq	12234 <__assert_fail@plt+0x10a8>
   121ec:	ldrb	r3, [r1, r4]
   121f0:	cmp	r3, #41	; 0x29
   121f4:	bne	121e0 <__assert_fail@plt+0x1054>
   121f8:	ldr	r3, [sp, #48]	; 0x30
   121fc:	add	r5, r3, r4
   12200:	ldr	r3, [sp, #64]	; 0x40
   12204:	cmp	r3, #0
   12208:	bne	12248 <__assert_fail@plt+0x10bc>
   1220c:	add	r4, r4, #1
   12210:	mov	r3, #0
   12214:	strb	r3, [r5]
   12218:	ldr	r2, [sp, #48]	; 0x30
   1221c:	ldrb	r3, [r2, r4]
   12220:	cmp	r3, #9
   12224:	cmpne	r3, #32
   12228:	bne	12260 <__assert_fail@plt+0x10d4>
   1222c:	add	r4, r4, #1
   12230:	b	1221c <__assert_fail@plt+0x1090>
   12234:	ldrb	r3, [sl, r2]
   12238:	cmp	r3, #41	; 0x29
   1223c:	bne	122f0 <__assert_fail@plt+0x1164>
   12240:	ldr	r5, [sp, #48]	; 0x30
   12244:	b	12200 <__assert_fail@plt+0x1074>
   12248:	mov	r1, r4
   1224c:	ldr	r0, [sp, #48]	; 0x30
   12250:	bl	112c0 <__assert_fail@plt+0x134>
   12254:	cmp	r0, #0
   12258:	bne	1220c <__assert_fail@plt+0x1080>
   1225c:	b	122f0 <__assert_fail@plt+0x1164>
   12260:	cmp	r3, #61	; 0x3d
   12264:	bne	122f0 <__assert_fail@plt+0x1164>
   12268:	add	r4, r4, #1
   1226c:	ldr	r3, [sp, #48]	; 0x30
   12270:	add	r3, r3, r4
   12274:	mov	r8, r3
   12278:	ldrb	r2, [r3], #1
   1227c:	cmp	r2, #9
   12280:	cmpne	r2, #32
   12284:	beq	12274 <__assert_fail@plt+0x10e8>
   12288:	mov	r0, r8
   1228c:	bl	11394 <__assert_fail@plt+0x208>
   12290:	b	12568 <__assert_fail@plt+0x13dc>
   12294:	sub	r2, r4, r5
   12298:	ldrb	r1, [sl, r5]
   1229c:	ldr	r3, [fp, #24]
   122a0:	cmp	r1, #92	; 0x5c
   122a4:	addeq	r3, r3, #1
   122a8:	cmp	r2, r3
   122ac:	bcc	122f0 <__assert_fail@plt+0x1164>
   122b0:	mov	r3, #0
   122b4:	str	r3, [fp]
   122b8:	bl	11054 <__ctype_b_loc@plt>
   122bc:	ldr	r0, [r0]
   122c0:	ldr	ip, [sp, #36]	; 0x24
   122c4:	mov	r2, r8
   122c8:	b	122d0 <__assert_fail@plt+0x1144>
   122cc:	ldr	ip, [sp, #28]
   122d0:	sub	r1, r2, r8
   122d4:	ldrb	r3, [r2], #1
   122d8:	lsl	r3, r3, #1
   122dc:	ldrh	r3, [r0, r3]
   122e0:	tst	r3, #4096	; 0x1000
   122e4:	bne	122cc <__assert_fail@plt+0x1140>
   122e8:	cmp	ip, #0
   122ec:	bne	124b0 <__assert_fail@plt+0x1324>
   122f0:	ldrd	r2, [sp, #40]	; 0x28
   122f4:	adds	r2, r2, #1
   122f8:	adc	r3, r3, #0
   122fc:	strd	r2, [sp, #40]	; 0x28
   12300:	ldrb	r3, [fp, #18]
   12304:	cmp	r3, #0
   12308:	bne	1269c <__assert_fail@plt+0x1510>
   1230c:	ldr	r3, [r9]
   12310:	tst	r3, #48	; 0x30
   12314:	bne	128a4 <__assert_fail@plt+0x1718>
   12318:	adds	r6, r6, #1
   1231c:	adc	r7, r7, #0
   12320:	orrs	r3, r6, r7
   12324:	beq	1213c <__assert_fail@plt+0xfb0>
   12328:	mov	r3, r9
   1232c:	mov	r2, #10
   12330:	add	r1, sp, #120	; 0x78
   12334:	add	r0, sp, #116	; 0x74
   12338:	bl	10ee0 <__getdelim@plt>
   1233c:	subs	r4, r0, #0
   12340:	ble	128a4 <__assert_fail@plt+0x1718>
   12344:	ldr	r3, [sp, #116]	; 0x74
   12348:	ldrb	r2, [r3]
   1234c:	cmp	r2, #35	; 0x23
   12350:	beq	1230c <__assert_fail@plt+0x1180>
   12354:	add	r2, r3, r4
   12358:	ldrb	r0, [r2, #-1]
   1235c:	cmp	r0, #10
   12360:	subeq	r4, r4, #1
   12364:	cmp	r4, #0
   12368:	movle	r2, r4
   1236c:	subgt	r2, r4, #1
   12370:	ldrb	r0, [r3, r2]
   12374:	cmp	r0, #13
   12378:	subeq	r4, r4, #1
   1237c:	cmp	r4, #0
   12380:	beq	1230c <__assert_fail@plt+0x1180>
   12384:	mov	r2, #0
   12388:	strb	r2, [r3, r4]
   1238c:	ldr	sl, [sp, #116]	; 0x74
   12390:	ldrb	r3, [sl]
   12394:	cmp	r3, #9
   12398:	cmpne	r3, #32
   1239c:	bne	12174 <__assert_fail@plt+0xfe8>
   123a0:	mov	r2, sl
   123a4:	mov	r5, #0
   123a8:	add	r5, r5, #1
   123ac:	ldrb	r3, [r2, #1]!
   123b0:	cmp	r3, #9
   123b4:	cmpne	r3, #32
   123b8:	beq	123a8 <__assert_fail@plt+0x121c>
   123bc:	cmp	r3, #92	; 0x5c
   123c0:	addeq	r5, r5, #1
   123c4:	ldreq	r3, [sp, #28]
   123c8:	ldrne	r3, [sp, #36]	; 0x24
   123cc:	str	r3, [sp, #64]	; 0x40
   123d0:	add	r8, sl, r5
   123d4:	mov	r2, #7
   123d8:	ldr	r1, [pc, #1596]	; 12a1c <__assert_fail@plt+0x1890>
   123dc:	mov	r0, r8
   123e0:	bl	1115c <strncmp@plt>
   123e4:	cmp	r0, #0
   123e8:	bne	12294 <__assert_fail@plt+0x1108>
   123ec:	add	r2, r5, #7
   123f0:	str	r2, [sp, #48]	; 0x30
   123f4:	add	r3, sl, r2
   123f8:	str	r3, [sp, #100]	; 0x64
   123fc:	ldrb	r3, [sl, r2]
   12400:	str	r3, [sp, #84]	; 0x54
   12404:	mov	r3, #0
   12408:	strb	r3, [sl, r2]
   1240c:	ldr	r1, [pc, #1544]	; 12a1c <__assert_fail@plt+0x1890>
   12410:	mov	r0, r8
   12414:	bl	10eec <strcmp@plt>
   12418:	cmp	r0, #0
   1241c:	bne	122f0 <__assert_fail@plt+0x1164>
   12420:	ldr	r1, [sp, #84]	; 0x54
   12424:	cmp	r1, #40	; 0x28
   12428:	beq	12fc8 <__assert_fail@plt+0x1e3c>
   1242c:	add	r3, r5, #8
   12430:	str	r3, [sp, #48]	; 0x30
   12434:	mov	r2, #512	; 0x200
   12438:	mov	r3, #0
   1243c:	strd	r2, [fp, #8]
   12440:	cmp	r1, #45	; 0x2d
   12444:	beq	1217c <__assert_fail@plt+0xff0>
   12448:	ldr	r3, [fp, #8]
   1244c:	ldr	r2, [fp, #12]
   12450:	lsr	r3, r3, #2
   12454:	orr	r3, r3, r2, lsl #30
   12458:	str	r3, [fp]
   1245c:	ldr	r3, [sp, #48]	; 0x30
   12460:	ldrb	r3, [sl, r3]
   12464:	cmp	r3, #32
   12468:	ldreq	r3, [sp, #48]	; 0x30
   1246c:	addeq	r3, r3, #1
   12470:	streq	r3, [sp, #48]	; 0x30
   12474:	ldr	r3, [sp, #48]	; 0x30
   12478:	ldrb	r3, [sl, r3]
   1247c:	cmp	r3, #40	; 0x28
   12480:	bne	122f0 <__assert_fail@plt+0x1164>
   12484:	ldr	r3, [sp, #48]	; 0x30
   12488:	add	r2, r3, #1
   1248c:	mov	r3, #0
   12490:	str	r3, [sp, #124]	; 0x7c
   12494:	subs	r4, r4, r2
   12498:	beq	122f0 <__assert_fail@plt+0x1164>
   1249c:	add	r3, sl, r2
   124a0:	str	r3, [sp, #48]	; 0x30
   124a4:	sub	r4, r4, #1
   124a8:	mov	r1, r3
   124ac:	b	121e4 <__assert_fail@plt+0x1058>
   124b0:	str	r1, [fp]
   124b4:	sub	r3, r1, #2
   124b8:	cmp	r3, #126	; 0x7e
   124bc:	bhi	122f0 <__assert_fail@plt+0x1164>
   124c0:	tst	r1, #1
   124c4:	bne	122f0 <__assert_fail@plt+0x1164>
   124c8:	lsl	r3, r1, #2
   124cc:	str	r3, [fp, #8]
   124d0:	mov	r3, #0
   124d4:	str	r3, [fp, #12]
   124d8:	add	r5, r5, r1
   124dc:	ldrb	r3, [sl, r5]
   124e0:	cmp	r3, #32
   124e4:	cmpne	r3, #9
   124e8:	bne	122f0 <__assert_fail@plt+0x1164>
   124ec:	mov	r3, #0
   124f0:	strb	r3, [sl, r5]
   124f4:	mov	r0, r8
   124f8:	bl	11394 <__assert_fail@plt+0x208>
   124fc:	cmp	r0, #0
   12500:	beq	122f0 <__assert_fail@plt+0x1164>
   12504:	add	r1, r5, #1
   12508:	sub	r3, r4, r1
   1250c:	cmp	r3, #1
   12510:	beq	12524 <__assert_fail@plt+0x1398>
   12514:	ldrb	r3, [sl, r1]
   12518:	cmp	r3, #32
   1251c:	cmpne	r3, #42	; 0x2a
   12520:	beq	12668 <__assert_fail@plt+0x14dc>
   12524:	ldr	r3, [pc, #1256]	; 12a14 <__assert_fail@plt+0x1888>
   12528:	ldr	r3, [r3, #4]
   1252c:	cmp	r3, #0
   12530:	beq	122f0 <__assert_fail@plt+0x1164>
   12534:	mov	r2, #1
   12538:	ldr	r3, [pc, #1236]	; 12a14 <__assert_fail@plt+0x1888>
   1253c:	str	r2, [r3, #4]
   12540:	add	r3, sl, r1
   12544:	str	r3, [sp, #48]	; 0x30
   12548:	ldr	r3, [sp, #64]	; 0x40
   1254c:	cmp	r3, #0
   12550:	beq	12570 <__assert_fail@plt+0x13e4>
   12554:	sub	r1, r4, r1
   12558:	ldr	r0, [sp, #48]	; 0x30
   1255c:	bl	112c0 <__assert_fail@plt+0x134>
   12560:	adds	r0, r0, #0
   12564:	movne	r0, #1
   12568:	cmp	r0, #0
   1256c:	beq	122f0 <__assert_fail@plt+0x1164>
   12570:	ldr	r3, [sp, #56]	; 0x38
   12574:	cmp	r3, #0
   12578:	bne	12590 <__assert_fail@plt+0x1404>
   1257c:	ldr	r1, [pc, #1164]	; 12a10 <__assert_fail@plt+0x1884>
   12580:	ldr	r0, [sp, #48]	; 0x30
   12584:	bl	10eec <strcmp@plt>
   12588:	cmp	r0, #0
   1258c:	beq	122f0 <__assert_fail@plt+0x1164>
   12590:	ldrb	r3, [fp, #17]
   12594:	cmp	r3, #0
   12598:	ldrne	r0, [sp, #36]	; 0x24
   1259c:	bne	125b4 <__assert_fail@plt+0x1428>
   125a0:	mov	r1, #10
   125a4:	ldr	r0, [sp, #48]	; 0x30
   125a8:	bl	11084 <strchr@plt>
   125ac:	adds	r0, r0, #0
   125b0:	movne	r0, #1
   125b4:	and	r4, r0, #1
   125b8:	str	r4, [sp, #64]	; 0x40
   125bc:	add	r3, sp, #128	; 0x80
   125c0:	str	r3, [sp]
   125c4:	add	r3, sp, #115	; 0x73
   125c8:	ldr	r2, [sp, #96]	; 0x60
   125cc:	add	r1, sp, #124	; 0x7c
   125d0:	ldr	r0, [sp, #48]	; 0x30
   125d4:	bl	114e8 <__assert_fail@plt+0x35c>
   125d8:	subs	r3, r0, #0
   125dc:	str	r3, [sp, #80]	; 0x50
   125e0:	bne	126f0 <__assert_fail@plt+0x1564>
   125e4:	ldrd	r2, [sp, #72]	; 0x48
   125e8:	adds	r2, r2, #1
   125ec:	adc	r3, r3, #0
   125f0:	strd	r2, [sp, #72]	; 0x48
   125f4:	ldrb	r3, [fp, #17]
   125f8:	cmp	r3, #0
   125fc:	bne	1265c <__assert_fail@plt+0x14d0>
   12600:	cmp	r4, #0
   12604:	beq	12630 <__assert_fail@plt+0x14a4>
   12608:	ldr	r3, [pc, #1044]	; 12a24 <__assert_fail@plt+0x1898>
   1260c:	ldr	r0, [r3]
   12610:	ldr	r3, [r0, #20]
   12614:	ldr	r2, [r0, #24]
   12618:	cmp	r3, r2
   1261c:	addcc	r2, r3, #1
   12620:	strcc	r2, [r0, #20]
   12624:	movcc	r2, #92	; 0x5c
   12628:	strbcc	r2, [r3]
   1262c:	bcs	126e4 <__assert_fail@plt+0x1558>
   12630:	ldr	r1, [sp, #64]	; 0x40
   12634:	ldr	r0, [sp, #48]	; 0x30
   12638:	bl	113f8 <__assert_fail@plt+0x26c>
   1263c:	mov	r2, #5
   12640:	ldr	r1, [pc, #904]	; 129d0 <__assert_fail@plt+0x1844>
   12644:	mov	r0, #0
   12648:	bl	10f7c <dcgettext@plt>
   1264c:	mov	r2, r0
   12650:	ldr	r1, [pc, #892]	; 129d4 <__assert_fail@plt+0x1848>
   12654:	mov	r0, #1
   12658:	bl	110c0 <__printf_chk@plt>
   1265c:	ldr	r3, [sp, #28]
   12660:	str	r3, [sp, #80]	; 0x50
   12664:	b	1230c <__assert_fail@plt+0x1180>
   12668:	ldr	r2, [pc, #932]	; 12a14 <__assert_fail@plt+0x1888>
   1266c:	ldr	r2, [r2, #4]
   12670:	cmp	r2, #1
   12674:	beq	12540 <__assert_fail@plt+0x13b4>
   12678:	mov	r1, #0
   1267c:	ldr	r2, [pc, #912]	; 12a14 <__assert_fail@plt+0x1888>
   12680:	str	r1, [r2, #4]
   12684:	add	r1, r5, #2
   12688:	cmp	r3, #42	; 0x2a
   1268c:	movne	r3, #0
   12690:	moveq	r3, #1
   12694:	str	r3, [sp, #124]	; 0x7c
   12698:	b	12540 <__assert_fail@plt+0x13b4>
   1269c:	mov	r2, #5
   126a0:	ldr	r1, [pc, #816]	; 129d8 <__assert_fail@plt+0x184c>
   126a4:	mov	r0, #0
   126a8:	bl	10f7c <dcgettext@plt>
   126ac:	mov	r4, r0
   126b0:	ldr	r2, [sp, #68]	; 0x44
   126b4:	mov	r1, #3
   126b8:	mov	r0, #0
   126bc:	bl	1a820 <__assert_fail@plt+0x9694>
   126c0:	ldr	r3, [pc, #852]	; 12a1c <__assert_fail@plt+0x1890>
   126c4:	str	r3, [sp, #8]
   126c8:	strd	r6, [sp]
   126cc:	mov	r3, r0
   126d0:	mov	r2, r4
   126d4:	mov	r1, #0
   126d8:	mov	r0, r1
   126dc:	bl	11000 <error@plt>
   126e0:	b	1230c <__assert_fail@plt+0x1180>
   126e4:	mov	r1, #92	; 0x5c
   126e8:	bl	11108 <__overflow@plt>
   126ec:	b	12630 <__assert_fail@plt+0x14a4>
   126f0:	ldrb	r3, [fp, #16]
   126f4:	cmp	r3, #0
   126f8:	beq	12708 <__assert_fail@plt+0x157c>
   126fc:	ldrb	r3, [sp, #115]	; 0x73
   12700:	cmp	r3, #0
   12704:	bne	1265c <__assert_fail@plt+0x14d0>
   12708:	ldr	r5, [fp]
   1270c:	lsrs	r5, r5, #1
   12710:	beq	12880 <__assert_fail@plt+0x16f4>
   12714:	bl	11030 <__ctype_tolower_loc@plt>
   12718:	ldr	ip, [r0]
   1271c:	mov	r2, r8
   12720:	ldr	r3, [sp, #96]	; 0x60
   12724:	sub	r1, r3, #1
   12728:	mov	r4, #0
   1272c:	ldr	r0, [pc, #680]	; 129dc <__assert_fail@plt+0x1850>
   12730:	ldrb	r3, [r1, #1]!
   12734:	ldrb	sl, [r8, r4, lsl #1]
   12738:	add	lr, r0, r3, lsr #4
   1273c:	ldrb	lr, [lr, #280]	; 0x118
   12740:	ldr	sl, [ip, sl, lsl #2]
   12744:	cmp	sl, lr
   12748:	bne	12820 <__assert_fail@plt+0x1694>
   1274c:	ldrb	lr, [r2, #1]
   12750:	and	r3, r3, #15
   12754:	add	r3, r0, r3
   12758:	ldrb	r3, [r3, #280]	; 0x118
   1275c:	ldr	lr, [ip, lr, lsl #2]
   12760:	cmp	lr, r3
   12764:	bne	12820 <__assert_fail@plt+0x1694>
   12768:	add	r4, r4, #1
   1276c:	add	r2, r2, #2
   12770:	cmp	r5, r4
   12774:	bne	12730 <__assert_fail@plt+0x15a4>
   12778:	ldrb	r3, [fp, #17]
   1277c:	str	r3, [sp, #104]	; 0x68
   12780:	cmp	r3, #0
   12784:	moveq	r4, r5
   12788:	bne	1265c <__assert_fail@plt+0x14d0>
   1278c:	ldrb	r3, [fp, #19]
   12790:	str	r3, [sp, #104]	; 0x68
   12794:	cmp	r3, #0
   12798:	bne	1265c <__assert_fail@plt+0x14d0>
   1279c:	ldr	r3, [sp, #64]	; 0x40
   127a0:	cmp	r3, #0
   127a4:	ldreq	r3, [sp, #80]	; 0x50
   127a8:	streq	r3, [sp, #104]	; 0x68
   127ac:	beq	127dc <__assert_fail@plt+0x1650>
   127b0:	str	r3, [sp, #104]	; 0x68
   127b4:	ldr	r3, [pc, #616]	; 12a24 <__assert_fail@plt+0x1898>
   127b8:	ldr	r0, [r3]
   127bc:	ldr	r3, [r0, #20]
   127c0:	ldr	r2, [r0, #24]
   127c4:	cmp	r3, r2
   127c8:	addcc	r2, r3, #1
   127cc:	strcc	r2, [r0, #20]
   127d0:	movcc	r2, #92	; 0x5c
   127d4:	strbcc	r2, [r3]
   127d8:	bcs	12898 <__assert_fail@plt+0x170c>
   127dc:	ldr	r1, [sp, #64]	; 0x40
   127e0:	ldr	r0, [sp, #48]	; 0x30
   127e4:	bl	113f8 <__assert_fail@plt+0x26c>
   127e8:	cmp	r5, r4
   127ec:	bne	1285c <__assert_fail@plt+0x16d0>
   127f0:	ldrb	r3, [fp, #19]
   127f4:	cmp	r3, #0
   127f8:	bne	1265c <__assert_fail@plt+0x14d0>
   127fc:	mov	r2, #5
   12800:	ldr	r1, [pc, #472]	; 129e0 <__assert_fail@plt+0x1854>
   12804:	mov	r0, #0
   12808:	bl	10f7c <dcgettext@plt>
   1280c:	mov	r2, r0
   12810:	ldr	r1, [pc, #444]	; 129d4 <__assert_fail@plt+0x1848>
   12814:	mov	r0, #1
   12818:	bl	110c0 <__printf_chk@plt>
   1281c:	b	1265c <__assert_fail@plt+0x14d0>
   12820:	cmp	r5, r4
   12824:	beq	12778 <__assert_fail@plt+0x15ec>
   12828:	ldrd	r2, [sp, #88]	; 0x58
   1282c:	adds	r2, r2, #1
   12830:	adc	r3, r3, #0
   12834:	strd	r2, [sp, #88]	; 0x58
   12838:	ldrb	r3, [fp, #17]
   1283c:	cmp	r3, #0
   12840:	bne	1265c <__assert_fail@plt+0x14d0>
   12844:	ldr	r3, [sp, #64]	; 0x40
   12848:	cmp	r3, #0
   1284c:	bne	127b4 <__assert_fail@plt+0x1628>
   12850:	ldr	r1, [sp, #64]	; 0x40
   12854:	ldr	r0, [sp, #48]	; 0x30
   12858:	bl	113f8 <__assert_fail@plt+0x26c>
   1285c:	mov	r2, #5
   12860:	ldr	r1, [pc, #380]	; 129e4 <__assert_fail@plt+0x1858>
   12864:	mov	r0, #0
   12868:	bl	10f7c <dcgettext@plt>
   1286c:	mov	r2, r0
   12870:	ldr	r1, [pc, #348]	; 129d4 <__assert_fail@plt+0x1848>
   12874:	mov	r0, #1
   12878:	bl	110c0 <__printf_chk@plt>
   1287c:	b	1265c <__assert_fail@plt+0x14d0>
   12880:	ldrb	r3, [fp, #17]
   12884:	str	r3, [sp, #104]	; 0x68
   12888:	cmp	r3, #0
   1288c:	bne	1265c <__assert_fail@plt+0x14d0>
   12890:	mov	r4, r5
   12894:	b	1278c <__assert_fail@plt+0x1600>
   12898:	mov	r1, #92	; 0x5c
   1289c:	bl	11108 <__overflow@plt>
   128a0:	b	127dc <__assert_fail@plt+0x1650>
   128a4:	ldr	r0, [sp, #116]	; 0x74
   128a8:	bl	18d38 <__assert_fail@plt+0x7bac>
   128ac:	ldr	r3, [r9]
   128b0:	tst	r3, #32
   128b4:	mvneq	r4, #0
   128b8:	movne	r4, #0
   128bc:	ldr	r3, [sp, #56]	; 0x38
   128c0:	cmp	r3, #0
   128c4:	bne	12918 <__assert_fail@plt+0x178c>
   128c8:	mov	r0, r9
   128cc:	bl	11138 <clearerr_unlocked@plt>
   128d0:	cmp	r4, #0
   128d4:	blt	12a40 <__assert_fail@plt+0x18b4>
   128d8:	ldrne	r5, [pc, #232]	; 129c8 <__assert_fail@plt+0x183c>
   128dc:	beq	1293c <__assert_fail@plt+0x17b0>
   128e0:	ldr	r2, [sp, #68]	; 0x44
   128e4:	mov	r1, #3
   128e8:	mov	r0, #0
   128ec:	bl	1a820 <__assert_fail@plt+0x9694>
   128f0:	mov	r3, r0
   128f4:	mov	r2, r5
   128f8:	mov	r1, r4
   128fc:	mov	r0, #0
   12900:	bl	11000 <error@plt>
   12904:	ldr	r3, [sp, #36]	; 0x24
   12908:	ldr	r2, [sp, #52]	; 0x34
   1290c:	and	r2, r2, r3
   12910:	str	r2, [sp, #52]	; 0x34
   12914:	b	12cb8 <__assert_fail@plt+0x1b2c>
   12918:	mov	r0, r9
   1291c:	bl	18b90 <__assert_fail@plt+0x7a04>
   12920:	adds	r0, r0, #0
   12924:	movne	r0, #1
   12928:	ands	r3, r0, r4, lsr #31
   1292c:	beq	128d0 <__assert_fail@plt+0x1744>
   12930:	bl	11090 <__errno_location@plt>
   12934:	ldr	r4, [r0]
   12938:	b	128d0 <__assert_fail@plt+0x1744>
   1293c:	mov	r2, #5
   12940:	ldr	r1, [pc, #160]	; 129e8 <__assert_fail@plt+0x185c>
   12944:	mov	r0, #0
   12948:	bl	10f7c <dcgettext@plt>
   1294c:	mov	r5, r0
   12950:	b	128e0 <__assert_fail@plt+0x1754>
   12954:	andeq	ip, r1, ip, ror fp
   12958:	andeq	ip, r1, ip, ror #31
   1295c:	muleq	r1, r4, r0
   12960:	andeq	r8, r1, r4, asr #20
   12964:	strdeq	ip, [r1], -r4
   12968:	andeq	sp, r1, r0, lsl r1
   1296c:	andeq	r0, r0, r1, lsl #2
   12970:	andeq	r0, r0, r3, lsl #2
   12974:	andeq	lr, r2, r8, lsl #3
   12978:	andeq	sp, r1, ip, lsr #1
   1297c:	strheq	sp, [r1], -ip
   12980:	ldrdeq	sp, [r1], -r0
   12984:	strdeq	sp, [r1], -r0
   12988:	andeq	sp, r1, r0, lsl #2
   1298c:	andeq	lr, r2, ip, lsl r1
   12990:	andeq	ip, r1, r8, ror #31
   12994:	strdeq	ip, [r1], -r8
   12998:	andeq	lr, r2, r0, ror r1
   1299c:	andeq	sp, r1, r8, lsl r1
   129a0:	andeq	sp, r1, r0, asr #2
   129a4:	andeq	sp, r1, r4, ror #2
   129a8:	andeq	sp, r1, r0, lsr #3
   129ac:	ldrdeq	sp, [r1], -ip
   129b0:	andeq	sp, r1, r8, lsr #4
   129b4:	andeq	sp, r1, r0, ror r2
   129b8:			; <UNDEFINED> instruction: 0x0001d2b0
   129bc:	strdeq	sp, [r1], -r0
   129c0:	andeq	sp, r1, r0, lsr r3
   129c4:	strdeq	ip, [r1], -r4
   129c8:	andeq	sp, r1, ip, asr #1
   129cc:	andeq	sp, r1, r0, lsl #7
   129d0:	andeq	sp, r1, ip, asr #7
   129d4:	andeq	sp, r1, r0, ror #7
   129d8:	muleq	r1, ip, r3
   129dc:			; <UNDEFINED> instruction: 0x0001c7bc
   129e0:	strdeq	sp, [r1], -r0
   129e4:	andeq	sp, r1, r8, ror #7
   129e8:	strdeq	sp, [r1], -r4
   129ec:	andeq	sp, r1, r4, lsr r4
   129f0:	andeq	sp, r1, r4, ror #8
   129f4:	muleq	r1, r0, r4
   129f8:	andeq	sp, r1, r0, asr #9
   129fc:	andeq	r4, pc, r0, asr #4
   12a00:	andeq	sp, r1, ip, ror #9
   12a04:	andeq	sp, r1, ip, lsl r5
   12a08:	andeq	sp, r1, r4, lsl #8
   12a0c:	andeq	sp, r1, ip, asr #10
   12a10:	strdeq	ip, [r1], -r0
   12a14:	andeq	lr, r2, r0, lsl r1
   12a18:	andeq	sp, r1, ip, ror r5
   12a1c:	andeq	ip, r1, r4, ror r9
   12a20:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12a24:	andeq	lr, r2, r4, lsl #3
   12a28:	andeq	sp, r1, r0, ror r5
   12a2c:	andeq	sp, r1, r4, ror r5
   12a30:	andeq	sp, r1, r8, ror #10
   12a34:	muleq	r2, r0, r1
   12a38:	andeq	lr, r2, r0, lsl #3
   12a3c:	andeq	sp, r1, r0, ror r3
   12a40:	ldr	r3, [sp, #80]	; 0x50
   12a44:	cmp	r3, #0
   12a48:	beq	12c08 <__assert_fail@plt+0x1a7c>
   12a4c:	ldrb	r3, [fp, #17]
   12a50:	cmp	r3, #0
   12a54:	bne	12bc0 <__assert_fail@plt+0x1a34>
   12a58:	ldrd	r0, [sp, #40]	; 0x28
   12a5c:	mov	r2, r0
   12a60:	mov	r3, r1
   12a64:	orrs	r3, r2, r3
   12a68:	beq	12ac8 <__assert_fail@plt+0x193c>
   12a6c:	mvn	r2, #0
   12a70:	mov	r3, #0
   12a74:	cmp	r1, r3
   12a78:	cmpeq	r0, r2
   12a7c:	ldrls	r3, [sp, #40]	; 0x28
   12a80:	bls	12a98 <__assert_fail@plt+0x190c>
   12a84:	ldr	r2, [pc, #-144]	; 129fc <__assert_fail@plt+0x1870>
   12a88:	mov	r3, #0
   12a8c:	bl	1c5bc <__assert_fail@plt+0xb430>
   12a90:	add	r3, r2, #999424	; 0xf4000
   12a94:	add	r3, r3, #576	; 0x240
   12a98:	mov	r2, #5
   12a9c:	str	r2, [sp]
   12aa0:	ldr	r2, [pc, #-188]	; 129ec <__assert_fail@plt+0x1860>
   12aa4:	ldr	r1, [pc, #-188]	; 129f0 <__assert_fail@plt+0x1864>
   12aa8:	mov	r0, #0
   12aac:	bl	11180 <dcngettext@plt>
   12ab0:	ldrd	r2, [sp, #40]	; 0x28
   12ab4:	strd	r2, [sp]
   12ab8:	mov	r2, r0
   12abc:	mov	r1, #0
   12ac0:	mov	r0, r1
   12ac4:	bl	11000 <error@plt>
   12ac8:	ldrd	r0, [sp, #72]	; 0x48
   12acc:	mov	r2, r0
   12ad0:	mov	r3, r1
   12ad4:	orrs	r3, r2, r3
   12ad8:	beq	12b38 <__assert_fail@plt+0x19ac>
   12adc:	mvn	r2, #0
   12ae0:	mov	r3, #0
   12ae4:	cmp	r1, r3
   12ae8:	cmpeq	r0, r2
   12aec:	ldrls	r3, [sp, #72]	; 0x48
   12af0:	bls	12b08 <__assert_fail@plt+0x197c>
   12af4:	ldr	r2, [pc, #-256]	; 129fc <__assert_fail@plt+0x1870>
   12af8:	mov	r3, #0
   12afc:	bl	1c5bc <__assert_fail@plt+0xb430>
   12b00:	add	r3, r2, #999424	; 0xf4000
   12b04:	add	r3, r3, #576	; 0x240
   12b08:	mov	r2, #5
   12b0c:	str	r2, [sp]
   12b10:	ldr	r2, [pc, #-292]	; 129f4 <__assert_fail@plt+0x1868>
   12b14:	ldr	r1, [pc, #-292]	; 129f8 <__assert_fail@plt+0x186c>
   12b18:	mov	r0, #0
   12b1c:	bl	11180 <dcngettext@plt>
   12b20:	ldrd	r2, [sp, #72]	; 0x48
   12b24:	strd	r2, [sp]
   12b28:	mov	r2, r0
   12b2c:	mov	r1, #0
   12b30:	mov	r0, r1
   12b34:	bl	11000 <error@plt>
   12b38:	ldrd	r0, [sp, #88]	; 0x58
   12b3c:	mov	r2, r0
   12b40:	mov	r3, r1
   12b44:	orrs	r3, r2, r3
   12b48:	beq	12ba8 <__assert_fail@plt+0x1a1c>
   12b4c:	mvn	r2, #0
   12b50:	mov	r3, #0
   12b54:	cmp	r1, r3
   12b58:	cmpeq	r0, r2
   12b5c:	ldrls	r3, [sp, #88]	; 0x58
   12b60:	bls	12b78 <__assert_fail@plt+0x19ec>
   12b64:	ldr	r2, [pc, #-368]	; 129fc <__assert_fail@plt+0x1870>
   12b68:	mov	r3, #0
   12b6c:	bl	1c5bc <__assert_fail@plt+0xb430>
   12b70:	add	r3, r2, #999424	; 0xf4000
   12b74:	add	r3, r3, #576	; 0x240
   12b78:	mov	r2, #5
   12b7c:	str	r2, [sp]
   12b80:	ldr	r2, [pc, #-392]	; 12a00 <__assert_fail@plt+0x1874>
   12b84:	ldr	r1, [pc, #-392]	; 12a04 <__assert_fail@plt+0x1878>
   12b88:	mov	r0, #0
   12b8c:	bl	11180 <dcngettext@plt>
   12b90:	ldrd	r2, [sp, #88]	; 0x58
   12b94:	strd	r2, [sp]
   12b98:	mov	r2, r0
   12b9c:	mov	r1, #0
   12ba0:	mov	r0, r1
   12ba4:	bl	11000 <error@plt>
   12ba8:	ldrb	r3, [fp, #16]
   12bac:	eor	r3, r3, #1
   12bb0:	ldr	r2, [sp, #104]	; 0x68
   12bb4:	orr	r3, r2, r3
   12bb8:	tst	r3, #255	; 0xff
   12bbc:	beq	12c4c <__assert_fail@plt+0x1ac0>
   12bc0:	ldr	r3, [sp, #104]	; 0x68
   12bc4:	cmp	r3, #0
   12bc8:	moveq	r3, #0
   12bcc:	beq	12c44 <__assert_fail@plt+0x1ab8>
   12bd0:	ldrd	r2, [sp, #72]	; 0x48
   12bd4:	ldrd	r0, [sp, #88]	; 0x58
   12bd8:	orr	r2, r2, r0
   12bdc:	orr	r3, r3, r1
   12be0:	orrs	r3, r2, r3
   12be4:	movne	r3, #0
   12be8:	bne	12c44 <__assert_fail@plt+0x1ab8>
   12bec:	ldrb	r3, [fp, #20]
   12bf0:	eor	r3, r3, #1
   12bf4:	ldrd	r0, [sp, #40]	; 0x28
   12bf8:	mov	r2, r0
   12bfc:	orrs	r2, r2, r1
   12c00:	orreq	r3, r3, #1
   12c04:	b	12c44 <__assert_fail@plt+0x1ab8>
   12c08:	mov	r2, #5
   12c0c:	ldr	r1, [pc, #-524]	; 12a08 <__assert_fail@plt+0x187c>
   12c10:	mov	r0, #0
   12c14:	bl	10f7c <dcgettext@plt>
   12c18:	mov	r4, r0
   12c1c:	ldr	r2, [sp, #68]	; 0x44
   12c20:	mov	r1, #3
   12c24:	mov	r0, #0
   12c28:	bl	1a820 <__assert_fail@plt+0x9694>
   12c2c:	mov	r3, r0
   12c30:	mov	r2, r4
   12c34:	mov	r1, #0
   12c38:	mov	r0, r1
   12c3c:	bl	11000 <error@plt>
   12c40:	mov	r3, #0
   12c44:	and	r3, r3, #1
   12c48:	b	12908 <__assert_fail@plt+0x177c>
   12c4c:	mov	r2, #5
   12c50:	ldr	r1, [pc, #-588]	; 12a0c <__assert_fail@plt+0x1880>
   12c54:	mov	r0, #0
   12c58:	bl	10f7c <dcgettext@plt>
   12c5c:	mov	r4, r0
   12c60:	ldr	r2, [sp, #68]	; 0x44
   12c64:	mov	r1, #3
   12c68:	mov	r0, #0
   12c6c:	bl	1a820 <__assert_fail@plt+0x9694>
   12c70:	mov	r3, r0
   12c74:	mov	r2, r4
   12c78:	mov	r1, #0
   12c7c:	mov	r0, r1
   12c80:	bl	11000 <error@plt>
   12c84:	b	12bc0 <__assert_fail@plt+0x1a34>
   12c88:	ldr	r3, [sp, #108]	; 0x6c
   12c8c:	str	r3, [sp, #128]	; 0x80
   12c90:	add	r3, sp, #136	; 0x88
   12c94:	str	r3, [sp]
   12c98:	add	r3, sp, #124	; 0x7c
   12c9c:	add	r2, sp, #208	; 0xd0
   12ca0:	add	r1, sp, #128	; 0x80
   12ca4:	mov	r0, r6
   12ca8:	bl	114e8 <__assert_fail@plt+0x35c>
   12cac:	subs	r9, r0, #0
   12cb0:	bne	12d50 <__assert_fail@plt+0x1bc4>
   12cb4:	str	r9, [sp, #52]	; 0x34
   12cb8:	ldr	r3, [sp, #60]	; 0x3c
   12cbc:	ldr	r2, [sp, #24]
   12cc0:	cmp	r3, r2
   12cc4:	bls	12f68 <__assert_fail@plt+0x1ddc>
   12cc8:	ldr	r3, [sp, #24]
   12ccc:	ldr	r6, [r3], #4
   12cd0:	str	r3, [sp, #24]
   12cd4:	ldr	r3, [sp, #28]
   12cd8:	cmp	r3, #0
   12cdc:	beq	12c88 <__assert_fail@plt+0x1afc>
   12ce0:	ldr	r1, [pc, #-728]	; 12a10 <__assert_fail@plt+0x1884>
   12ce4:	mov	r0, r6
   12ce8:	bl	10eec <strcmp@plt>
   12cec:	subs	r3, r0, #0
   12cf0:	str	r3, [sp, #56]	; 0x38
   12cf4:	bne	120f0 <__assert_fail@plt+0xf64>
   12cf8:	mov	r3, #1
   12cfc:	strb	r3, [fp, #4]
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #-720]	; 12a3c <__assert_fail@plt+0x18b0>
   12d08:	bl	10f7c <dcgettext@plt>
   12d0c:	str	r0, [sp, #68]	; 0x44
   12d10:	ldr	r3, [pc, #-736]	; 12a38 <__assert_fail@plt+0x18ac>
   12d14:	ldr	r9, [r3]
   12d18:	mov	r3, #0
   12d1c:	str	r3, [sp, #116]	; 0x74
   12d20:	str	r3, [sp, #120]	; 0x78
   12d24:	ldr	r3, [sp, #36]	; 0x24
   12d28:	str	r3, [sp, #104]	; 0x68
   12d2c:	str	r3, [sp, #80]	; 0x50
   12d30:	mov	r2, #0
   12d34:	mov	r3, #0
   12d38:	strd	r2, [sp, #88]	; 0x58
   12d3c:	strd	r2, [sp, #72]	; 0x48
   12d40:	strd	r2, [sp, #40]	; 0x28
   12d44:	mov	r6, #1
   12d48:	mov	r7, #0
   12d4c:	b	12328 <__assert_fail@plt+0x119c>
   12d50:	ldr	r7, [sp, #128]	; 0x80
   12d54:	ldr	r3, [pc, #-840]	; 12a14 <__assert_fail@plt+0x1888>
   12d58:	ldrb	sl, [r3]
   12d5c:	cmp	sl, #10
   12d60:	ldrne	r9, [sp, #28]
   12d64:	beq	12e54 <__assert_fail@plt+0x1cc8>
   12d68:	ldr	r3, [sp, #32]
   12d6c:	cmp	r3, #0
   12d70:	bne	12ecc <__assert_fail@plt+0x1d40>
   12d74:	ldr	r3, [fp]
   12d78:	cmp	r3, #1
   12d7c:	bls	12db8 <__assert_fail@plt+0x1c2c>
   12d80:	add	r5, sp, #207	; 0xcf
   12d84:	mov	r4, #0
   12d88:	ldr	r8, [pc, #-888]	; 12a18 <__assert_fail@plt+0x188c>
   12d8c:	ldrb	r2, [r5, #1]!
   12d90:	mov	r1, r8
   12d94:	mov	r0, #1
   12d98:	bl	110c0 <__printf_chk@plt>
   12d9c:	add	r4, r4, #1
   12da0:	ldr	r3, [fp]
   12da4:	cmp	r4, r3, lsr #1
   12da8:	bcc	12d8c <__assert_fail@plt+0x1c00>
   12dac:	ldr	r3, [sp, #32]
   12db0:	cmp	r3, #0
   12db4:	bne	12e1c <__assert_fail@plt+0x1c90>
   12db8:	ldr	r3, [pc, #-924]	; 12a24 <__assert_fail@plt+0x1898>
   12dbc:	ldr	r0, [r3]
   12dc0:	ldr	r3, [r0, #20]
   12dc4:	ldr	r2, [r0, #24]
   12dc8:	cmp	r3, r2
   12dcc:	addcc	r2, r3, #1
   12dd0:	strcc	r2, [r0, #20]
   12dd4:	movcc	r2, #32
   12dd8:	strbcc	r2, [r3]
   12ddc:	bcs	12f54 <__assert_fail@plt+0x1dc8>
   12de0:	cmp	r7, #0
   12de4:	movne	r1, #42	; 0x2a
   12de8:	moveq	r1, #32
   12dec:	ldr	r3, [pc, #-976]	; 12a24 <__assert_fail@plt+0x1898>
   12df0:	ldr	r0, [r3]
   12df4:	ldr	r3, [r0, #20]
   12df8:	ldr	r2, [r0, #24]
   12dfc:	cmp	r3, r2
   12e00:	addcc	r2, r3, #1
   12e04:	strcc	r2, [r0, #20]
   12e08:	strbcc	r1, [r3]
   12e0c:	bcs	12f60 <__assert_fail@plt+0x1dd4>
   12e10:	mov	r1, r9
   12e14:	mov	r0, r6
   12e18:	bl	113f8 <__assert_fail@plt+0x26c>
   12e1c:	ldr	r3, [pc, #-1024]	; 12a24 <__assert_fail@plt+0x1898>
   12e20:	ldr	r0, [r3]
   12e24:	ldr	r3, [r0, #20]
   12e28:	ldr	r2, [r0, #24]
   12e2c:	cmp	r3, r2
   12e30:	addcc	r2, r3, #1
   12e34:	strcc	r2, [r0, #20]
   12e38:	strbcc	sl, [r3]
   12e3c:	ldrcc	r9, [sp, #52]	; 0x34
   12e40:	bcc	12cb4 <__assert_fail@plt+0x1b28>
   12e44:	mov	r1, sl
   12e48:	bl	11108 <__overflow@plt>
   12e4c:	ldr	r9, [sp, #52]	; 0x34
   12e50:	b	12cb4 <__assert_fail@plt+0x1b28>
   12e54:	mov	r1, #92	; 0x5c
   12e58:	mov	r0, r6
   12e5c:	bl	11084 <strchr@plt>
   12e60:	cmp	r0, #0
   12e64:	beq	12e9c <__assert_fail@plt+0x1d10>
   12e68:	ldr	r3, [pc, #-1100]	; 12a24 <__assert_fail@plt+0x1898>
   12e6c:	ldr	r0, [r3]
   12e70:	ldr	r3, [r0, #20]
   12e74:	ldr	r2, [r0, #24]
   12e78:	cmp	r3, r2
   12e7c:	addcc	r2, r3, #1
   12e80:	strcc	r2, [r0, #20]
   12e84:	movcc	r2, #92	; 0x5c
   12e88:	strbcc	r2, [r3]
   12e8c:	bcc	12d68 <__assert_fail@plt+0x1bdc>
   12e90:	mov	r1, #92	; 0x5c
   12e94:	bl	11108 <__overflow@plt>
   12e98:	b	12d68 <__assert_fail@plt+0x1bdc>
   12e9c:	mov	r1, #10
   12ea0:	mov	r0, r6
   12ea4:	bl	11084 <strchr@plt>
   12ea8:	cmp	r0, #0
   12eac:	bne	12e68 <__assert_fail@plt+0x1cdc>
   12eb0:	mov	r1, #13
   12eb4:	mov	r0, r6
   12eb8:	bl	11084 <strchr@plt>
   12ebc:	cmp	r0, #0
   12ec0:	ldreq	r9, [sp, #28]
   12ec4:	bne	12e68 <__assert_fail@plt+0x1cdc>
   12ec8:	b	12d68 <__assert_fail@plt+0x1bdc>
   12ecc:	ldr	r3, [pc, #-1200]	; 12a24 <__assert_fail@plt+0x1898>
   12ed0:	ldr	r3, [r3]
   12ed4:	mov	r2, #7
   12ed8:	mov	r1, #1
   12edc:	ldr	r0, [pc, #-1224]	; 12a1c <__assert_fail@plt+0x1890>
   12ee0:	bl	10f58 <fwrite_unlocked@plt>
   12ee4:	ldrd	r2, [fp, #8]
   12ee8:	ldr	r0, [pc, #-1232]	; 12a20 <__assert_fail@plt+0x1894>
   12eec:	mov	r1, #0
   12ef0:	cmp	r3, r1
   12ef4:	cmpeq	r2, r0
   12ef8:	bls	12f44 <__assert_fail@plt+0x1db8>
   12efc:	ldr	r4, [pc, #-1248]	; 12a24 <__assert_fail@plt+0x1898>
   12f00:	ldr	r3, [r4]
   12f04:	mov	r2, #2
   12f08:	mov	r1, #1
   12f0c:	ldr	r0, [pc, #-1260]	; 12a28 <__assert_fail@plt+0x189c>
   12f10:	bl	10f58 <fwrite_unlocked@plt>
   12f14:	mov	r1, r9
   12f18:	mov	r0, r6
   12f1c:	bl	113f8 <__assert_fail@plt+0x26c>
   12f20:	ldr	r3, [r4]
   12f24:	mov	r2, #4
   12f28:	mov	r1, #1
   12f2c:	ldr	r0, [pc, #-1288]	; 12a2c <__assert_fail@plt+0x18a0>
   12f30:	bl	10f58 <fwrite_unlocked@plt>
   12f34:	ldr	r3, [fp]
   12f38:	cmp	r3, #1
   12f3c:	bhi	12d80 <__assert_fail@plt+0x1bf4>
   12f40:	b	12e1c <__assert_fail@plt+0x1c90>
   12f44:	ldr	r1, [pc, #-1308]	; 12a30 <__assert_fail@plt+0x18a4>
   12f48:	mov	r0, #1
   12f4c:	bl	110c0 <__printf_chk@plt>
   12f50:	b	12efc <__assert_fail@plt+0x1d70>
   12f54:	mov	r1, #32
   12f58:	bl	11108 <__overflow@plt>
   12f5c:	b	12de0 <__assert_fail@plt+0x1c54>
   12f60:	bl	11108 <__overflow@plt>
   12f64:	b	12e10 <__assert_fail@plt+0x1c84>
   12f68:	ldr	r3, [pc, #-1340]	; 12a34 <__assert_fail@plt+0x18a8>
   12f6c:	ldrb	r3, [r3, #4]
   12f70:	cmp	r3, #0
   12f74:	bne	12f8c <__assert_fail@plt+0x1e00>
   12f78:	ldr	r3, [sp, #52]	; 0x34
   12f7c:	eor	r0, r3, #1
   12f80:	uxtb	r0, r0
   12f84:	add	sp, sp, #284	; 0x11c
   12f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f8c:	ldr	r3, [pc, #-1372]	; 12a38 <__assert_fail@plt+0x18ac>
   12f90:	ldr	r0, [r3]
   12f94:	bl	18b90 <__assert_fail@plt+0x7a04>
   12f98:	cmn	r0, #1
   12f9c:	bne	12f78 <__assert_fail@plt+0x1dec>
   12fa0:	bl	11090 <__errno_location@plt>
   12fa4:	ldr	r4, [r0]
   12fa8:	mov	r2, #5
   12fac:	ldr	r1, [pc, #-1400]	; 12a3c <__assert_fail@plt+0x18b0>
   12fb0:	mov	r0, #0
   12fb4:	bl	10f7c <dcgettext@plt>
   12fb8:	mov	r2, r0
   12fbc:	mov	r1, r4
   12fc0:	mov	r0, #1
   12fc4:	bl	11000 <error@plt>
   12fc8:	mov	r3, #40	; 0x28
   12fcc:	ldr	r2, [sp, #100]	; 0x64
   12fd0:	strb	r3, [r2]
   12fd4:	mov	r2, #512	; 0x200
   12fd8:	mov	r3, #0
   12fdc:	strd	r2, [fp, #8]
   12fe0:	b	12448 <__assert_fail@plt+0x12bc>
   12fe4:	andeq	r0, r0, r0
   12fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fec:	sub	sp, sp, #404	; 0x194
   12ff0:	mov	ip, r0
   12ff4:	mov	r2, r1
   12ff8:	add	lr, sp, #272	; 0x110
   12ffc:	add	r4, sp, #400	; 0x190
   13000:	add	r3, sp, #136	; 0x88
   13004:	ldr	r0, [r2]
   13008:	ldr	r1, [r2, #4]
   1300c:	stmia	r3!, {r0, r1}
   13010:	ldrd	r0, [sp, #136]	; 0x88
   13014:	strd	r0, [lr], #8
   13018:	add	r2, r2, #8
   1301c:	cmp	lr, r4
   13020:	bne	13000 <__assert_fail@plt+0x1e74>
   13024:	sub	lr, ip, #8
   13028:	add	sl, sp, #144	; 0x90
   1302c:	add	r2, ip, #56	; 0x38
   13030:	mov	r3, sl
   13034:	mov	fp, lr
   13038:	ldrd	r0, [fp, #8]!
   1303c:	strd	r0, [r3], #8
   13040:	cmp	fp, r2
   13044:	bne	13038 <__assert_fail@plt+0x1eac>
   13048:	ldrd	r6, [sp, #176]	; 0xb0
   1304c:	ldrd	r4, [sp, #144]	; 0x90
   13050:	adds	r4, r4, r6
   13054:	adc	r5, r5, r7
   13058:	add	r3, sp, #272	; 0x110
   1305c:	ldrd	r2, [r3]
   13060:	adds	r2, r2, r4
   13064:	adc	r3, r3, r5
   13068:	mov	r0, r2
   1306c:	mov	r1, r3
   13070:	add	r3, pc, #872	; 0x368
   13074:	ldrd	r2, [r3]
   13078:	strd	r0, [sp]
   1307c:	eor	r0, r0, r2
   13080:	eor	r1, r1, r3
   13084:	mov	r2, r0
   13088:	mov	r3, r1
   1308c:	ldrd	r0, [ip, #64]	; 0x40
   13090:	eor	r2, r2, r0
   13094:	eor	r3, r3, r1
   13098:	mov	r0, r3
   1309c:	mov	r1, r2
   130a0:	add	r9, pc, #832	; 0x340
   130a4:	ldrd	r8, [r9]
   130a8:	adds	r8, r8, r3
   130ac:	adc	r9, r9, r2
   130b0:	eor	r6, r6, r8
   130b4:	eor	r7, r7, r9
   130b8:	lsr	r3, r6, #24
   130bc:	orr	r2, r3, r7, lsl #8
   130c0:	lsr	r7, r7, #24
   130c4:	orr	r3, r7, r6, lsl #8
   130c8:	add	r4, sp, #280	; 0x118
   130cc:	ldrd	r6, [r4]
   130d0:	ldrd	r4, [sp]
   130d4:	adds	r4, r4, r6
   130d8:	adc	r5, r5, r7
   130dc:	adds	r6, r4, r2
   130e0:	adc	r7, r5, r3
   130e4:	strd	r6, [sp, #48]	; 0x30
   130e8:	mov	r4, r6
   130ec:	mov	r5, r7
   130f0:	eor	r4, r4, r0
   130f4:	eor	r5, r5, r1
   130f8:	mov	r0, r4
   130fc:	mov	r1, r5
   13100:	lsr	r4, r4, #16
   13104:	orr	r5, r4, r5, lsl #16
   13108:	str	r5, [sp]
   1310c:	lsr	r1, r1, #16
   13110:	orr	r1, r1, r0, lsl #16
   13114:	str	r1, [sp, #4]
   13118:	ldrd	r0, [sp]
   1311c:	adds	r0, r0, r8
   13120:	adc	r1, r1, r9
   13124:	mov	r4, r0
   13128:	mov	r5, r1
   1312c:	strd	r4, [sp, #72]	; 0x48
   13130:	eor	r4, r4, r2
   13134:	eor	r5, r5, r3
   13138:	lsl	r1, r5, #1
   1313c:	orr	r1, r1, r4, lsr #31
   13140:	str	r1, [sp, #60]	; 0x3c
   13144:	lsl	r2, r4, #1
   13148:	orr	r3, r2, r5, lsr #31
   1314c:	str	r3, [sp, #56]	; 0x38
   13150:	ldrd	r8, [sp, #184]	; 0xb8
   13154:	ldrd	r6, [sp, #152]	; 0x98
   13158:	adds	r6, r6, r8
   1315c:	adc	r7, r7, r9
   13160:	add	r3, sp, #288	; 0x120
   13164:	ldrd	r0, [r3]
   13168:	adds	r0, r0, r6
   1316c:	adc	r1, r1, r7
   13170:	mov	r6, r0
   13174:	mov	r7, r1
   13178:	add	r1, pc, #624	; 0x270
   1317c:	ldrd	r0, [r1]
   13180:	eor	r0, r0, r6
   13184:	eor	r1, r1, r7
   13188:	ldrd	r2, [ip, #72]	; 0x48
   1318c:	eor	r2, r2, r0
   13190:	eor	r3, r3, r1
   13194:	str	r3, [sp, #8]
   13198:	str	r2, [sp, #12]
   1319c:	add	r5, pc, #596	; 0x254
   131a0:	ldrd	r4, [r5]
   131a4:	ldrd	r2, [sp, #8]
   131a8:	adds	r2, r2, r4
   131ac:	adc	r3, r3, r5
   131b0:	mov	r4, r2
   131b4:	mov	r5, r3
   131b8:	eor	r0, r8, r2
   131bc:	eor	r1, r9, r3
   131c0:	lsr	r8, r0, #24
   131c4:	orr	r2, r8, r1, lsl #8
   131c8:	lsr	r1, r1, #24
   131cc:	orr	r3, r1, r0, lsl #8
   131d0:	add	r1, sp, #296	; 0x128
   131d4:	ldrd	r8, [r1]
   131d8:	adds	r8, r8, r6
   131dc:	adc	r9, r9, r7
   131e0:	adds	r8, r8, r2
   131e4:	adc	r9, r9, r3
   131e8:	ldrd	r0, [sp, #8]
   131ec:	strd	r8, [sp, #64]	; 0x40
   131f0:	eor	r0, r0, r8
   131f4:	eor	r1, r1, r9
   131f8:	lsr	r6, r0, #16
   131fc:	orr	r7, r6, r1, lsl #16
   13200:	str	r7, [sp, #8]
   13204:	lsr	r1, r1, #16
   13208:	orr	r1, r1, r0, lsl #16
   1320c:	str	r1, [sp, #12]
   13210:	ldrd	r8, [sp, #8]
   13214:	adds	r8, r8, r4
   13218:	adc	r9, r9, r5
   1321c:	strd	r8, [sp, #80]	; 0x50
   13220:	mov	r0, r8
   13224:	mov	r1, r9
   13228:	eor	r0, r0, r2
   1322c:	eor	r1, r1, r3
   13230:	mov	r3, r1
   13234:	lsl	r1, r1, #1
   13238:	orr	r1, r1, r0, lsr #31
   1323c:	str	r1, [sp, #20]
   13240:	lsl	r2, r0, #1
   13244:	orr	r3, r2, r3, lsr #31
   13248:	str	r3, [sp, #16]
   1324c:	ldrd	r8, [sp, #192]	; 0xc0
   13250:	ldrd	r6, [sp, #160]	; 0xa0
   13254:	adds	r6, r6, r8
   13258:	adc	r7, r7, r9
   1325c:	add	r3, sp, #304	; 0x130
   13260:	ldrd	r0, [r3]
   13264:	adds	r0, r0, r6
   13268:	adc	r1, r1, r7
   1326c:	mov	r6, r0
   13270:	mov	r7, r1
   13274:	add	r1, pc, #388	; 0x184
   13278:	ldrd	r0, [r1]
   1327c:	eor	r0, r0, r6
   13280:	eor	r1, r1, r7
   13284:	ldrd	r2, [ip, #80]	; 0x50
   13288:	eor	r2, r2, r0
   1328c:	eor	r3, r3, r1
   13290:	str	r3, [sp, #24]
   13294:	str	r2, [sp, #28]
   13298:	add	r5, pc, #360	; 0x168
   1329c:	ldrd	r4, [r5]
   132a0:	ldrd	r2, [sp, #24]
   132a4:	adds	r2, r2, r4
   132a8:	adc	r3, r3, r5
   132ac:	mov	r4, r2
   132b0:	mov	r5, r3
   132b4:	eor	r0, r8, r2
   132b8:	eor	r1, r9, r3
   132bc:	lsr	r8, r0, #24
   132c0:	orr	r2, r8, r1, lsl #8
   132c4:	lsr	r1, r1, #24
   132c8:	orr	r3, r1, r0, lsl #8
   132cc:	add	r1, sp, #312	; 0x138
   132d0:	ldrd	r0, [r1]
   132d4:	adds	r0, r0, r6
   132d8:	adc	r1, r1, r7
   132dc:	adds	r0, r0, r2
   132e0:	adc	r1, r1, r3
   132e4:	mov	r6, r0
   132e8:	mov	r7, r1
   132ec:	ldrd	r0, [sp, #24]
   132f0:	strd	r6, [sp, #88]	; 0x58
   132f4:	eor	r0, r0, r6
   132f8:	eor	r1, r1, r7
   132fc:	lsr	r6, r0, #16
   13300:	orr	r7, r6, r1, lsl #16
   13304:	str	r7, [sp, #24]
   13308:	lsr	r1, r1, #16
   1330c:	orr	r1, r1, r0, lsl #16
   13310:	str	r1, [sp, #28]
   13314:	ldrd	r8, [sp, #24]
   13318:	adds	r8, r8, r4
   1331c:	adc	r9, r9, r5
   13320:	eor	r2, r2, r8
   13324:	eor	r3, r3, r9
   13328:	lsl	r1, r3, #1
   1332c:	orr	r1, r1, r2, lsr #31
   13330:	str	r1, [sp, #36]	; 0x24
   13334:	lsl	r2, r2, #1
   13338:	orr	r3, r2, r3, lsr #31
   1333c:	str	r3, [sp, #32]
   13340:	ldrd	r6, [sp, #200]	; 0xc8
   13344:	ldrd	r0, [sp, #168]	; 0xa8
   13348:	adds	r0, r0, r6
   1334c:	adc	r1, r1, r7
   13350:	add	r3, sp, #320	; 0x140
   13354:	ldrd	r2, [r3]
   13358:	adds	r2, r2, r0
   1335c:	adc	r3, r3, r1
   13360:	mov	r0, r2
   13364:	mov	r1, r3
   13368:	add	r3, pc, #160	; 0xa0
   1336c:	ldrd	r2, [r3]
   13370:	eor	r2, r2, r0
   13374:	eor	r3, r3, r1
   13378:	ldrd	r4, [ip, #88]	; 0x58
   1337c:	eor	r2, r2, r4
   13380:	eor	r3, r3, r5
   13384:	str	r3, [sp, #40]	; 0x28
   13388:	str	r2, [sp, #44]	; 0x2c
   1338c:	add	r5, pc, #132	; 0x84
   13390:	ldrd	r4, [r5]
   13394:	ldrd	r2, [sp, #40]	; 0x28
   13398:	adds	r2, r2, r4
   1339c:	adc	r3, r3, r5
   133a0:	mov	r4, r2
   133a4:	mov	r5, r3
   133a8:	eor	r6, r6, r2
   133ac:	eor	r7, r7, r3
   133b0:	lsr	ip, r6, #24
   133b4:	orr	r2, ip, r7, lsl #8
   133b8:	lsr	ip, r7, #24
   133bc:	orr	r3, ip, r6, lsl #8
   133c0:	add	ip, sp, #328	; 0x148
   133c4:	ldrd	r6, [ip]
   133c8:	adds	r6, r6, r0
   133cc:	adc	r7, r7, r1
   133d0:	adds	r6, r6, r2
   133d4:	adc	r7, r7, r3
   133d8:	ldrd	r0, [sp, #40]	; 0x28
   133dc:	b	13420 <__assert_fail@plt+0x2294>
   133e0:	sfmge	f0, 3, [r6, #836]!	; 0x344
   133e4:	tstpl	lr, pc, ror r2
   133e8:	vtbl.8	d12, {d12-d13}, d8
   133ec:	bvs	28cd90 <optarg@@GLIBC_2.4+0x25ec08>
   133f0:	blcs	fae474 <optarg@@GLIBC_2.4+0xf802ec>
   133f4:	blls	16d62c <optarg@@GLIBC_2.4+0x13f4a4>
   133f8:	strbhi	sl, [sl], #1851	; 0x73b
   133fc:	bllt	19fee18 <optarg@@GLIBC_2.4+0x19d0c90>
   13400:	blx	10829b6 <optarg@@GLIBC_2.4+0x105482e>
   13404:	svcne	0x0083d9ab
   13408:	vcmla.f32	d15, d4, d27[0], #90
   1340c:	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
   13410:	cmnne	lr, #1073741854	; 0x4000001e
   13414:	blpl	ff846880 <optarg@@GLIBC_2.4+0xff8186f8>
   13418:	svcpl	0x001d36f1
   1341c:	strbge	pc, [pc, #-1338]	; 12eea <__assert_fail@plt+0x1d5e>	; <UNPREDICTABLE>
   13420:	strd	r6, [sp, #96]	; 0x60
   13424:	eor	r0, r0, r6
   13428:	eor	r1, r1, r7
   1342c:	lsr	ip, r0, #16
   13430:	orr	r6, ip, r1, lsl #16
   13434:	lsr	r1, r1, #16
   13438:	orr	r7, r1, r0, lsl #16
   1343c:	adds	r4, r4, r6
   13440:	adc	r5, r5, r7
   13444:	eor	r2, r2, r4
   13448:	eor	r3, r3, r5
   1344c:	lsl	ip, r3, #1
   13450:	orr	r1, ip, r2, lsr #31
   13454:	str	r1, [sp, #44]	; 0x2c
   13458:	lsl	r2, r2, #1
   1345c:	orr	r3, r2, r3, lsr #31
   13460:	str	r3, [sp, #40]	; 0x28
   13464:	add	r3, sp, #336	; 0x150
   13468:	ldrd	r0, [r3]
   1346c:	ldrd	r2, [sp, #48]	; 0x30
   13470:	adds	r0, r0, r2
   13474:	adc	r1, r1, r3
   13478:	ldrd	r2, [sp, #16]
   1347c:	adds	r2, r2, r0
   13480:	adc	r3, r3, r1
   13484:	mov	r0, r2
   13488:	mov	r1, r3
   1348c:	eor	r6, r6, r2
   13490:	eor	r7, r7, r3
   13494:	str	r7, [sp, #48]	; 0x30
   13498:	str	r6, [sp, #52]	; 0x34
   1349c:	ldrd	r6, [sp, #48]	; 0x30
   134a0:	adds	r6, r6, r8
   134a4:	adc	r7, r7, r9
   134a8:	mov	r8, r6
   134ac:	mov	r9, r7
   134b0:	ldrd	r6, [sp, #16]
   134b4:	eor	r6, r6, r8
   134b8:	eor	r7, r7, r9
   134bc:	lsr	ip, r6, #24
   134c0:	orr	r2, ip, r7, lsl #8
   134c4:	lsr	ip, r7, #24
   134c8:	orr	r3, ip, r6, lsl #8
   134cc:	add	ip, sp, #344	; 0x158
   134d0:	ldrd	r6, [ip]
   134d4:	adds	r6, r6, r0
   134d8:	adc	r7, r7, r1
   134dc:	adds	r6, r6, r2
   134e0:	adc	r7, r7, r3
   134e4:	mov	r0, r6
   134e8:	mov	r1, r7
   134ec:	ldrd	r6, [sp, #48]	; 0x30
   134f0:	strd	r0, [sp, #104]	; 0x68
   134f4:	eor	r6, r6, r0
   134f8:	eor	r7, r7, r1
   134fc:	lsr	ip, r6, #16
   13500:	orr	ip, ip, r7, lsl #16
   13504:	str	ip, [sp, #16]
   13508:	lsr	r1, r7, #16
   1350c:	orr	r1, r1, r6, lsl #16
   13510:	str	r1, [sp, #20]
   13514:	ldrd	r6, [sp, #16]
   13518:	adds	r6, r6, r8
   1351c:	adc	r7, r7, r9
   13520:	strd	r6, [sp, #112]	; 0x70
   13524:	mov	r8, r6
   13528:	mov	r9, r7
   1352c:	eor	r8, r8, r2
   13530:	eor	r9, r9, r3
   13534:	lsl	r1, r9, #1
   13538:	orr	r1, r1, r8, lsr #31
   1353c:	str	r1, [sp, #52]	; 0x34
   13540:	lsl	r2, r8, #1
   13544:	orr	r3, r2, r9, lsr #31
   13548:	str	r3, [sp, #48]	; 0x30
   1354c:	add	r3, sp, #352	; 0x160
   13550:	ldrd	r0, [r3]
   13554:	ldrd	r8, [sp, #64]	; 0x40
   13558:	adds	r0, r0, r8
   1355c:	adc	r1, r1, r9
   13560:	ldrd	r8, [sp, #32]
   13564:	adds	r8, r8, r0
   13568:	adc	r9, r9, r1
   1356c:	mov	r0, r8
   13570:	mov	r1, r9
   13574:	ldrd	r2, [sp]
   13578:	eor	r2, r2, r8
   1357c:	eor	r3, r3, r9
   13580:	mov	r8, r3
   13584:	mov	r9, r2
   13588:	adds	r6, r4, r3
   1358c:	adc	r7, r5, r2
   13590:	ldrd	r4, [sp, #32]
   13594:	eor	r4, r4, r6
   13598:	eor	r5, r5, r7
   1359c:	lsr	ip, r4, #24
   135a0:	orr	r2, ip, r5, lsl #8
   135a4:	lsr	ip, r5, #24
   135a8:	orr	r3, ip, r4, lsl #8
   135ac:	add	ip, sp, #360	; 0x168
   135b0:	ldrd	r4, [ip]
   135b4:	adds	r4, r4, r0
   135b8:	adc	r5, r5, r1
   135bc:	adds	r4, r4, r2
   135c0:	adc	r5, r5, r3
   135c4:	mov	r0, r4
   135c8:	mov	r1, r5
   135cc:	strd	r0, [sp, #120]	; 0x78
   135d0:	eor	r0, r0, r8
   135d4:	eor	r1, r1, r9
   135d8:	mov	r9, r1
   135dc:	lsr	ip, r0, #16
   135e0:	orr	r1, ip, r1, lsl #16
   135e4:	str	r1, [sp]
   135e8:	lsr	r1, r9, #16
   135ec:	orr	r1, r1, r0, lsl #16
   135f0:	str	r1, [sp, #4]
   135f4:	ldrd	r0, [sp]
   135f8:	adds	r0, r0, r6
   135fc:	adc	r1, r1, r7
   13600:	strd	r0, [sp, #128]	; 0x80
   13604:	mov	r8, r0
   13608:	mov	r9, r1
   1360c:	eor	r8, r8, r2
   13610:	eor	r9, r9, r3
   13614:	lsl	r1, r9, #1
   13618:	orr	r1, r1, r8, lsr #31
   1361c:	str	r1, [sp, #68]	; 0x44
   13620:	lsl	r2, r8, #1
   13624:	orr	r3, r2, r9, lsr #31
   13628:	str	r3, [sp, #64]	; 0x40
   1362c:	add	r3, sp, #368	; 0x170
   13630:	ldrd	r2, [r3]
   13634:	ldrd	r4, [sp, #88]	; 0x58
   13638:	adds	r2, r2, r4
   1363c:	adc	r3, r3, r5
   13640:	ldrd	r4, [sp, #40]	; 0x28
   13644:	adds	r4, r4, r2
   13648:	adc	r5, r5, r3
   1364c:	mov	r0, r4
   13650:	mov	r1, r5
   13654:	ldrd	r2, [sp, #8]
   13658:	eor	r2, r2, r4
   1365c:	eor	r3, r3, r5
   13660:	mov	r8, r3
   13664:	mov	r9, r2
   13668:	ldrd	r6, [sp, #72]	; 0x48
   1366c:	adds	r6, r6, r3
   13670:	adc	r7, r7, r2
   13674:	ldrd	r4, [sp, #40]	; 0x28
   13678:	eor	r4, r4, r6
   1367c:	eor	r5, r5, r7
   13680:	lsr	ip, r4, #24
   13684:	orr	r2, ip, r5, lsl #8
   13688:	lsr	ip, r5, #24
   1368c:	orr	r3, ip, r4, lsl #8
   13690:	add	ip, sp, #376	; 0x178
   13694:	ldrd	r4, [ip]
   13698:	adds	r4, r4, r0
   1369c:	adc	r5, r5, r1
   136a0:	adds	r4, r4, r2
   136a4:	adc	r5, r5, r3
   136a8:	strd	r4, [sp, #72]	; 0x48
   136ac:	eor	r4, r4, r8
   136b0:	eor	r5, r5, r9
   136b4:	lsr	ip, r4, #16
   136b8:	orr	r1, ip, r5, lsl #16
   136bc:	str	r1, [sp, #8]
   136c0:	lsr	r1, r5, #16
   136c4:	orr	r1, r1, r4, lsl #16
   136c8:	str	r1, [sp, #12]
   136cc:	ldrd	r4, [sp, #8]
   136d0:	adds	r4, r4, r6
   136d4:	adc	r5, r5, r7
   136d8:	mov	r8, r4
   136dc:	mov	r9, r5
   136e0:	eor	r2, r2, r4
   136e4:	eor	r3, r3, r5
   136e8:	lsl	r1, r3, #1
   136ec:	orr	r1, r1, r2, lsr #31
   136f0:	str	r1, [sp, #36]	; 0x24
   136f4:	lsl	r2, r2, #1
   136f8:	orr	r3, r2, r3, lsr #31
   136fc:	str	r3, [sp, #32]
   13700:	add	r3, sp, #384	; 0x180
   13704:	ldrd	r4, [r3]
   13708:	ldrd	r6, [sp, #96]	; 0x60
   1370c:	adds	r4, r4, r6
   13710:	adc	r5, r5, r7
   13714:	mov	r0, r4
   13718:	mov	r1, r5
   1371c:	ldrd	r6, [sp, #56]	; 0x38
   13720:	adds	r4, r6, r0
   13724:	adc	r5, r7, r1
   13728:	mov	r0, r4
   1372c:	mov	r1, r5
   13730:	ldrd	r2, [sp, #24]
   13734:	eor	r2, r2, r4
   13738:	eor	r3, r3, r5
   1373c:	str	r3, [sp, #24]
   13740:	str	r2, [sp, #28]
   13744:	ldrd	r4, [sp, #80]	; 0x50
   13748:	ldrd	r2, [sp, #24]
   1374c:	adds	r4, r4, r2
   13750:	adc	r5, r5, r3
   13754:	mov	r2, r6
   13758:	mov	r3, r7
   1375c:	eor	r2, r2, r4
   13760:	eor	r3, r3, r5
   13764:	mov	r6, r2
   13768:	lsr	ip, r2, #24
   1376c:	orr	r2, ip, r3, lsl #8
   13770:	lsr	ip, r3, #24
   13774:	orr	r3, ip, r6, lsl #8
   13778:	add	ip, sp, #392	; 0x188
   1377c:	ldrd	r6, [ip]
   13780:	adds	r6, r6, r0
   13784:	adc	r7, r7, r1
   13788:	adds	r6, r6, r2
   1378c:	adc	r7, r7, r3
   13790:	ldrd	r0, [sp, #24]
   13794:	strd	r6, [sp, #80]	; 0x50
   13798:	eor	r0, r0, r6
   1379c:	eor	r1, r1, r7
   137a0:	lsr	ip, r0, #16
   137a4:	orr	ip, ip, r1, lsl #16
   137a8:	str	ip, [sp, #24]
   137ac:	lsr	r1, r1, #16
   137b0:	orr	r1, r1, r0, lsl #16
   137b4:	str	r1, [sp, #28]
   137b8:	ldrd	r0, [sp, #24]
   137bc:	adds	r0, r0, r4
   137c0:	adc	r1, r1, r5
   137c4:	mov	r6, r0
   137c8:	mov	r7, r1
   137cc:	eor	r2, r2, r0
   137d0:	eor	r3, r3, r1
   137d4:	lsl	r1, r3, #1
   137d8:	orr	r5, r1, r2, lsr #31
   137dc:	lsl	r2, r2, #1
   137e0:	orr	r4, r2, r3, lsr #31
   137e4:	add	r3, sp, #384	; 0x180
   137e8:	ldrd	r0, [r3]
   137ec:	ldrd	r2, [sp, #104]	; 0x68
   137f0:	adds	r0, r0, r2
   137f4:	adc	r1, r1, r3
   137f8:	adds	r0, r0, r4
   137fc:	adc	r1, r1, r5
   13800:	ldrd	r2, [sp]
   13804:	eor	r2, r2, r0
   13808:	eor	r3, r3, r1
   1380c:	strd	r2, [sp, #40]	; 0x28
   13810:	ldrd	r2, [sp, #40]	; 0x28
   13814:	str	r3, [sp]
   13818:	str	r2, [sp, #4]
   1381c:	ldrd	r2, [sp]
   13820:	adds	r2, r2, r8
   13824:	adc	r3, r3, r9
   13828:	mov	r8, r2
   1382c:	mov	r9, r3
   13830:	eor	r4, r4, r2
   13834:	eor	r5, r5, r3
   13838:	lsr	ip, r4, #24
   1383c:	orr	r2, ip, r5, lsl #8
   13840:	lsr	ip, r5, #24
   13844:	orr	r3, ip, r4, lsl #8
   13848:	add	ip, sp, #352	; 0x160
   1384c:	ldrd	r4, [ip]
   13850:	adds	r4, r4, r0
   13854:	adc	r5, r5, r1
   13858:	adds	r4, r4, r2
   1385c:	adc	r5, r5, r3
   13860:	ldrd	r0, [sp]
   13864:	strd	r4, [sp, #88]	; 0x58
   13868:	eor	r0, r0, r4
   1386c:	eor	r1, r1, r5
   13870:	lsr	ip, r0, #16
   13874:	orr	ip, ip, r1, lsl #16
   13878:	str	ip, [sp]
   1387c:	lsr	r1, r1, #16
   13880:	orr	r1, r1, r0, lsl #16
   13884:	str	r1, [sp, #4]
   13888:	ldrd	r0, [sp]
   1388c:	adds	r0, r0, r8
   13890:	adc	r1, r1, r9
   13894:	mov	r4, r0
   13898:	mov	r5, r1
   1389c:	strd	r4, [sp, #96]	; 0x60
   138a0:	eor	r4, r4, r2
   138a4:	eor	r5, r5, r3
   138a8:	lsl	r1, r5, #1
   138ac:	orr	r1, r1, r4, lsr #31
   138b0:	str	r1, [sp, #60]	; 0x3c
   138b4:	lsl	r2, r4, #1
   138b8:	orr	r3, r2, r5, lsr #31
   138bc:	str	r3, [sp, #56]	; 0x38
   138c0:	add	r3, sp, #304	; 0x130
   138c4:	ldrd	r0, [r3]
   138c8:	ldrd	r8, [sp, #120]	; 0x78
   138cc:	adds	r0, r0, r8
   138d0:	adc	r1, r1, r9
   138d4:	ldrd	r4, [sp, #48]	; 0x30
   138d8:	adds	r8, r4, r0
   138dc:	adc	r9, r5, r1
   138e0:	mov	r0, r8
   138e4:	mov	r1, r9
   138e8:	ldrd	r2, [sp, #8]
   138ec:	eor	r2, r2, r8
   138f0:	eor	r3, r3, r9
   138f4:	mov	r8, r3
   138f8:	mov	r9, r2
   138fc:	adds	r6, r6, r3
   13900:	adc	r7, r7, r2
   13904:	eor	r4, r4, r6
   13908:	eor	r5, r5, r7
   1390c:	lsr	ip, r4, #24
   13910:	orr	r2, ip, r5, lsl #8
   13914:	lsr	ip, r5, #24
   13918:	orr	r3, ip, r4, lsl #8
   1391c:	add	ip, sp, #336	; 0x150
   13920:	ldrd	r4, [ip]
   13924:	adds	r4, r4, r0
   13928:	adc	r5, r5, r1
   1392c:	adds	r4, r4, r2
   13930:	adc	r5, r5, r3
   13934:	mov	r0, r4
   13938:	mov	r1, r5
   1393c:	strd	r0, [sp, #104]	; 0x68
   13940:	eor	r0, r0, r8
   13944:	eor	r1, r1, r9
   13948:	mov	r9, r1
   1394c:	lsr	ip, r0, #16
   13950:	orr	r1, ip, r1, lsl #16
   13954:	str	r1, [sp, #8]
   13958:	lsr	r1, r9, #16
   1395c:	orr	r1, r1, r0, lsl #16
   13960:	str	r1, [sp, #12]
   13964:	ldrd	r0, [sp, #8]
   13968:	adds	r0, r0, r6
   1396c:	adc	r1, r1, r7
   13970:	strd	r0, [sp, #120]	; 0x78
   13974:	mov	r4, r0
   13978:	mov	r5, r1
   1397c:	eor	r4, r4, r2
   13980:	eor	r5, r5, r3
   13984:	lsl	r1, r5, #1
   13988:	orr	r1, r1, r4, lsr #31
   1398c:	str	r1, [sp, #44]	; 0x2c
   13990:	lsl	r2, r4, #1
   13994:	orr	r3, r2, r5, lsr #31
   13998:	str	r3, [sp, #40]	; 0x28
   1399c:	add	r3, sp, #344	; 0x158
   139a0:	ldrd	r0, [r3]
   139a4:	ldrd	r8, [sp, #72]	; 0x48
   139a8:	adds	r0, r0, r8
   139ac:	adc	r1, r1, r9
   139b0:	ldrd	r4, [sp, #64]	; 0x40
   139b4:	adds	r8, r4, r0
   139b8:	adc	r9, r5, r1
   139bc:	mov	r0, r8
   139c0:	mov	r1, r9
   139c4:	ldrd	r2, [sp, #24]
   139c8:	eor	r2, r2, r8
   139cc:	eor	r3, r3, r9
   139d0:	mov	r8, r3
   139d4:	mov	r9, r2
   139d8:	ldrd	r6, [sp, #112]	; 0x70
   139dc:	adds	r6, r6, r3
   139e0:	adc	r7, r7, r2
   139e4:	eor	r4, r4, r6
   139e8:	eor	r5, r5, r7
   139ec:	lsr	ip, r4, #24
   139f0:	orr	r2, ip, r5, lsl #8
   139f4:	lsr	ip, r5, #24
   139f8:	orr	r3, ip, r4, lsl #8
   139fc:	add	ip, sp, #392	; 0x188
   13a00:	ldrd	r4, [ip]
   13a04:	adds	r4, r4, r0
   13a08:	adc	r5, r5, r1
   13a0c:	adds	r4, r4, r2
   13a10:	adc	r5, r5, r3
   13a14:	strd	r4, [sp, #64]	; 0x40
   13a18:	mov	r0, r4
   13a1c:	mov	r1, r5
   13a20:	eor	r0, r0, r8
   13a24:	eor	r1, r1, r9
   13a28:	mov	r9, r1
   13a2c:	lsr	ip, r0, #16
   13a30:	orr	r1, ip, r1, lsl #16
   13a34:	str	r1, [sp, #24]
   13a38:	lsr	r1, r9, #16
   13a3c:	orr	r1, r1, r0, lsl #16
   13a40:	str	r1, [sp, #28]
   13a44:	ldrd	r8, [sp, #24]
   13a48:	adds	r8, r8, r6
   13a4c:	adc	r9, r9, r7
   13a50:	mov	r0, r8
   13a54:	mov	r1, r9
   13a58:	strd	r0, [sp, #72]	; 0x48
   13a5c:	eor	r0, r0, r2
   13a60:	eor	r1, r1, r3
   13a64:	mov	r3, r1
   13a68:	lsl	r1, r1, #1
   13a6c:	orr	r1, r1, r0, lsr #31
   13a70:	str	r1, [sp, #52]	; 0x34
   13a74:	lsl	r2, r0, #1
   13a78:	orr	r3, r2, r3, lsr #31
   13a7c:	str	r3, [sp, #48]	; 0x30
   13a80:	add	r3, sp, #376	; 0x178
   13a84:	ldrd	r0, [r3]
   13a88:	ldrd	r6, [sp, #80]	; 0x50
   13a8c:	adds	r0, r0, r6
   13a90:	adc	r1, r1, r7
   13a94:	ldrd	r4, [sp, #32]
   13a98:	adds	r4, r4, r0
   13a9c:	adc	r5, r5, r1
   13aa0:	mov	r0, r4
   13aa4:	mov	r1, r5
   13aa8:	ldrd	r2, [sp, #16]
   13aac:	eor	r2, r2, r4
   13ab0:	eor	r3, r3, r5
   13ab4:	mov	r8, r3
   13ab8:	mov	r9, r2
   13abc:	ldrd	r6, [sp, #128]	; 0x80
   13ac0:	adds	r6, r6, r8
   13ac4:	adc	r7, r7, r9
   13ac8:	ldrd	r4, [sp, #32]
   13acc:	eor	r4, r4, r6
   13ad0:	eor	r5, r5, r7
   13ad4:	lsr	ip, r4, #24
   13ad8:	orr	r2, ip, r5, lsl #8
   13adc:	lsr	ip, r5, #24
   13ae0:	orr	r3, ip, r4, lsl #8
   13ae4:	add	ip, sp, #320	; 0x140
   13ae8:	ldrd	r4, [ip]
   13aec:	adds	r4, r4, r0
   13af0:	adc	r5, r5, r1
   13af4:	adds	r4, r4, r2
   13af8:	adc	r5, r5, r3
   13afc:	mov	r0, r8
   13b00:	mov	r1, r9
   13b04:	strd	r4, [sp, #80]	; 0x50
   13b08:	eor	r0, r0, r4
   13b0c:	eor	r1, r1, r5
   13b10:	lsr	ip, r0, #16
   13b14:	orr	r4, ip, r1, lsl #16
   13b18:	lsr	r1, r1, #16
   13b1c:	orr	r5, r1, r0, lsl #16
   13b20:	adds	r6, r6, r4
   13b24:	adc	r7, r7, r5
   13b28:	eor	r2, r2, r6
   13b2c:	eor	r3, r3, r7
   13b30:	lsl	r1, r3, #1
   13b34:	orr	r1, r1, r2, lsr #31
   13b38:	str	r1, [sp, #20]
   13b3c:	lsl	r2, r2, #1
   13b40:	orr	r3, r2, r3, lsr #31
   13b44:	str	r3, [sp, #16]
   13b48:	add	r3, sp, #280	; 0x118
   13b4c:	ldrd	r0, [r3]
   13b50:	ldrd	r2, [sp, #88]	; 0x58
   13b54:	adds	r0, r0, r2
   13b58:	adc	r1, r1, r3
   13b5c:	ldrd	r2, [sp, #40]	; 0x28
   13b60:	adds	r2, r2, r0
   13b64:	adc	r3, r3, r1
   13b68:	mov	r0, r2
   13b6c:	mov	r1, r3
   13b70:	eor	r4, r4, r2
   13b74:	eor	r5, r5, r3
   13b78:	str	r5, [sp, #32]
   13b7c:	str	r4, [sp, #36]	; 0x24
   13b80:	ldrd	r2, [sp, #32]
   13b84:	ldrd	r4, [sp, #72]	; 0x48
   13b88:	adds	r4, r4, r2
   13b8c:	adc	r5, r5, r3
   13b90:	mov	r2, r4
   13b94:	mov	r3, r5
   13b98:	mov	r8, r4
   13b9c:	mov	r9, r5
   13ba0:	ldrd	r4, [sp, #40]	; 0x28
   13ba4:	eor	r4, r4, r2
   13ba8:	eor	r5, r5, r3
   13bac:	lsr	ip, r4, #24
   13bb0:	orr	r2, ip, r5, lsl #8
   13bb4:	lsr	ip, r5, #24
   13bb8:	orr	r3, ip, r4, lsl #8
   13bbc:	add	ip, sp, #368	; 0x170
   13bc0:	ldrd	r4, [ip]
   13bc4:	adds	r4, r4, r0
   13bc8:	adc	r5, r5, r1
   13bcc:	adds	r4, r4, r2
   13bd0:	adc	r5, r5, r3
   13bd4:	ldrd	r0, [sp, #32]
   13bd8:	strd	r4, [sp, #72]	; 0x48
   13bdc:	eor	r0, r0, r4
   13be0:	eor	r1, r1, r5
   13be4:	lsr	ip, r0, #16
   13be8:	orr	ip, ip, r1, lsl #16
   13bec:	str	ip, [sp, #32]
   13bf0:	lsr	r1, r1, #16
   13bf4:	orr	r1, r1, r0, lsl #16
   13bf8:	str	r1, [sp, #36]	; 0x24
   13bfc:	ldrd	r0, [sp, #32]
   13c00:	adds	r0, r0, r8
   13c04:	adc	r1, r1, r9
   13c08:	mov	r8, r0
   13c0c:	mov	r9, r1
   13c10:	strd	r8, [sp, #88]	; 0x58
   13c14:	eor	r8, r8, r2
   13c18:	eor	r9, r9, r3
   13c1c:	lsl	r1, r9, #1
   13c20:	orr	r1, r1, r8, lsr #31
   13c24:	str	r1, [sp, #44]	; 0x2c
   13c28:	lsl	r2, r8, #1
   13c2c:	orr	r3, r2, r9, lsr #31
   13c30:	str	r3, [sp, #40]	; 0x28
   13c34:	add	r3, sp, #272	; 0x110
   13c38:	ldrd	r8, [r3]
   13c3c:	ldrd	r4, [sp, #104]	; 0x68
   13c40:	adds	r8, r8, r4
   13c44:	adc	r9, r9, r5
   13c48:	ldrd	r4, [sp, #48]	; 0x30
   13c4c:	adds	r4, r4, r8
   13c50:	adc	r5, r5, r9
   13c54:	mov	r0, r4
   13c58:	mov	r1, r5
   13c5c:	ldrd	r2, [sp]
   13c60:	eor	r2, r2, r4
   13c64:	eor	r3, r3, r5
   13c68:	mov	r8, r3
   13c6c:	mov	r9, r2
   13c70:	adds	r6, r6, r3
   13c74:	adc	r7, r7, r2
   13c78:	ldrd	r4, [sp, #48]	; 0x30
   13c7c:	eor	r4, r4, r6
   13c80:	eor	r5, r5, r7
   13c84:	lsr	ip, r4, #24
   13c88:	orr	r2, ip, r5, lsl #8
   13c8c:	lsr	ip, r5, #24
   13c90:	orr	r3, ip, r4, lsl #8
   13c94:	add	ip, sp, #288	; 0x120
   13c98:	ldrd	r4, [ip]
   13c9c:	adds	r4, r4, r0
   13ca0:	adc	r5, r5, r1
   13ca4:	adds	r4, r4, r2
   13ca8:	adc	r5, r5, r3
   13cac:	mov	r0, r4
   13cb0:	mov	r1, r5
   13cb4:	strd	r0, [sp, #104]	; 0x68
   13cb8:	eor	r0, r0, r8
   13cbc:	eor	r1, r1, r9
   13cc0:	mov	r9, r1
   13cc4:	lsr	ip, r0, #16
   13cc8:	orr	r1, ip, r1, lsl #16
   13ccc:	str	r1, [sp]
   13cd0:	lsr	r1, r9, #16
   13cd4:	orr	r1, r1, r0, lsl #16
   13cd8:	str	r1, [sp, #4]
   13cdc:	ldrd	r0, [sp]
   13ce0:	adds	r0, r0, r6
   13ce4:	adc	r1, r1, r7
   13ce8:	mov	r8, r0
   13cec:	mov	r9, r1
   13cf0:	strd	r8, [sp, #112]	; 0x70
   13cf4:	eor	r8, r8, r2
   13cf8:	eor	r9, r9, r3
   13cfc:	lsl	r1, r9, #1
   13d00:	orr	r1, r1, r8, lsr #31
   13d04:	str	r1, [sp, #52]	; 0x34
   13d08:	lsl	r2, r8, #1
   13d0c:	orr	r3, r2, r9, lsr #31
   13d10:	str	r3, [sp, #48]	; 0x30
   13d14:	add	r3, sp, #360	; 0x168
   13d18:	ldrd	r6, [r3]
   13d1c:	ldrd	r4, [sp, #64]	; 0x40
   13d20:	adds	r6, r6, r4
   13d24:	adc	r7, r7, r5
   13d28:	ldrd	r4, [sp, #16]
   13d2c:	adds	r4, r4, r6
   13d30:	adc	r5, r5, r7
   13d34:	mov	r0, r4
   13d38:	mov	r1, r5
   13d3c:	ldrd	r2, [sp, #8]
   13d40:	eor	r2, r2, r4
   13d44:	eor	r3, r3, r5
   13d48:	mov	r8, r3
   13d4c:	mov	r9, r2
   13d50:	ldrd	r6, [sp, #96]	; 0x60
   13d54:	adds	r6, r6, r3
   13d58:	adc	r7, r7, r2
   13d5c:	ldrd	r4, [sp, #16]
   13d60:	eor	r4, r4, r6
   13d64:	eor	r5, r5, r7
   13d68:	lsr	ip, r4, #24
   13d6c:	orr	r2, ip, r5, lsl #8
   13d70:	lsr	ip, r5, #24
   13d74:	orr	r3, ip, r4, lsl #8
   13d78:	add	ip, sp, #328	; 0x148
   13d7c:	ldrd	r4, [ip]
   13d80:	adds	r4, r4, r0
   13d84:	adc	r5, r5, r1
   13d88:	adds	r4, r4, r2
   13d8c:	adc	r5, r5, r3
   13d90:	strd	r4, [sp, #64]	; 0x40
   13d94:	eor	r4, r4, r8
   13d98:	eor	r5, r5, r9
   13d9c:	lsr	ip, r4, #16
   13da0:	orr	r1, ip, r5, lsl #16
   13da4:	str	r1, [sp, #8]
   13da8:	lsr	r1, r5, #16
   13dac:	orr	r1, r1, r4, lsl #16
   13db0:	str	r1, [sp, #12]
   13db4:	ldrd	r4, [sp, #8]
   13db8:	adds	r4, r4, r6
   13dbc:	adc	r5, r5, r7
   13dc0:	mov	r8, r4
   13dc4:	mov	r9, r5
   13dc8:	eor	r2, r2, r4
   13dcc:	eor	r3, r3, r5
   13dd0:	lsl	r1, r3, #1
   13dd4:	orr	r1, r1, r2, lsr #31
   13dd8:	str	r1, [sp, #20]
   13ddc:	lsl	r2, r2, #1
   13de0:	orr	r3, r2, r3, lsr #31
   13de4:	str	r3, [sp, #16]
   13de8:	add	r3, sp, #312	; 0x138
   13dec:	ldrd	r0, [r3]
   13df0:	ldrd	r2, [sp, #80]	; 0x50
   13df4:	adds	r0, r0, r2
   13df8:	adc	r1, r1, r3
   13dfc:	ldrd	r4, [sp, #56]	; 0x38
   13e00:	adds	r2, r4, r0
   13e04:	adc	r3, r5, r1
   13e08:	mov	r0, r2
   13e0c:	mov	r1, r3
   13e10:	ldrd	r2, [sp, #24]
   13e14:	eor	r2, r2, r0
   13e18:	eor	r3, r3, r1
   13e1c:	str	r3, [sp, #24]
   13e20:	str	r2, [sp, #28]
   13e24:	ldrd	r6, [sp, #120]	; 0x78
   13e28:	ldrd	r2, [sp, #24]
   13e2c:	adds	r6, r6, r2
   13e30:	adc	r7, r7, r3
   13e34:	eor	r4, r4, r6
   13e38:	eor	r5, r5, r7
   13e3c:	lsr	ip, r4, #24
   13e40:	orr	r2, ip, r5, lsl #8
   13e44:	lsr	ip, r5, #24
   13e48:	orr	r3, ip, r4, lsl #8
   13e4c:	add	ip, sp, #296	; 0x128
   13e50:	ldrd	r4, [ip]
   13e54:	adds	r4, r4, r0
   13e58:	adc	r5, r5, r1
   13e5c:	adds	r4, r4, r2
   13e60:	adc	r5, r5, r3
   13e64:	ldrd	r0, [sp, #24]
   13e68:	strd	r4, [sp, #80]	; 0x50
   13e6c:	eor	r0, r0, r4
   13e70:	eor	r1, r1, r5
   13e74:	lsr	ip, r0, #16
   13e78:	orr	ip, ip, r1, lsl #16
   13e7c:	str	ip, [sp, #24]
   13e80:	lsr	r1, r1, #16
   13e84:	orr	r1, r1, r0, lsl #16
   13e88:	str	r1, [sp, #28]
   13e8c:	ldrd	r0, [sp, #24]
   13e90:	adds	r0, r0, r6
   13e94:	adc	r1, r1, r7
   13e98:	mov	r6, r0
   13e9c:	mov	r7, r1
   13ea0:	eor	r2, r2, r0
   13ea4:	eor	r3, r3, r1
   13ea8:	lsl	r1, r3, #1
   13eac:	orr	r5, r1, r2, lsr #31
   13eb0:	lsl	r2, r2, #1
   13eb4:	orr	r4, r2, r3, lsr #31
   13eb8:	add	r3, sp, #360	; 0x168
   13ebc:	ldrd	r0, [r3]
   13ec0:	ldrd	r2, [sp, #72]	; 0x48
   13ec4:	adds	r0, r0, r2
   13ec8:	adc	r1, r1, r3
   13ecc:	adds	r0, r0, r4
   13ed0:	adc	r1, r1, r5
   13ed4:	ldrd	r2, [sp]
   13ed8:	eor	r2, r2, r0
   13edc:	eor	r3, r3, r1
   13ee0:	strd	r2, [sp, #56]	; 0x38
   13ee4:	ldrd	r2, [sp, #56]	; 0x38
   13ee8:	str	r3, [sp]
   13eec:	str	r2, [sp, #4]
   13ef0:	ldrd	r2, [sp]
   13ef4:	adds	r2, r2, r8
   13ef8:	adc	r3, r3, r9
   13efc:	mov	r8, r2
   13f00:	mov	r9, r3
   13f04:	eor	r4, r4, r2
   13f08:	eor	r5, r5, r3
   13f0c:	lsr	ip, r4, #24
   13f10:	orr	r2, ip, r5, lsl #8
   13f14:	lsr	ip, r5, #24
   13f18:	orr	r3, ip, r4, lsl #8
   13f1c:	add	ip, sp, #336	; 0x150
   13f20:	ldrd	r4, [ip]
   13f24:	adds	r4, r4, r0
   13f28:	adc	r5, r5, r1
   13f2c:	adds	r4, r4, r2
   13f30:	adc	r5, r5, r3
   13f34:	ldrd	r0, [sp]
   13f38:	strd	r4, [sp, #72]	; 0x48
   13f3c:	eor	r0, r0, r4
   13f40:	eor	r1, r1, r5
   13f44:	lsr	ip, r0, #16
   13f48:	orr	ip, ip, r1, lsl #16
   13f4c:	str	ip, [sp]
   13f50:	lsr	r1, r1, #16
   13f54:	orr	r1, r1, r0, lsl #16
   13f58:	str	r1, [sp, #4]
   13f5c:	ldrd	r4, [sp]
   13f60:	adds	r4, r4, r8
   13f64:	adc	r5, r5, r9
   13f68:	strd	r4, [sp, #96]	; 0x60
   13f6c:	mov	r0, r4
   13f70:	mov	r1, r5
   13f74:	eor	r0, r0, r2
   13f78:	eor	r1, r1, r3
   13f7c:	mov	r3, r1
   13f80:	lsl	r1, r1, #1
   13f84:	orr	r1, r1, r0, lsr #31
   13f88:	str	r1, [sp, #60]	; 0x3c
   13f8c:	lsl	r2, r0, #1
   13f90:	orr	r3, r2, r3, lsr #31
   13f94:	str	r3, [sp, #56]	; 0x38
   13f98:	add	r3, sp, #368	; 0x170
   13f9c:	ldrd	r2, [r3]
   13fa0:	ldrd	r4, [sp, #104]	; 0x68
   13fa4:	adds	r2, r2, r4
   13fa8:	adc	r3, r3, r5
   13fac:	mov	r0, r2
   13fb0:	mov	r1, r3
   13fb4:	ldrd	r2, [sp, #40]	; 0x28
   13fb8:	adds	r2, r2, r0
   13fbc:	adc	r3, r3, r1
   13fc0:	mov	r0, r2
   13fc4:	mov	r1, r3
   13fc8:	ldrd	r4, [sp, #8]
   13fcc:	eor	r4, r4, r2
   13fd0:	eor	r5, r5, r3
   13fd4:	mov	r8, r5
   13fd8:	mov	r9, r4
   13fdc:	adds	r6, r6, r5
   13fe0:	adc	r7, r7, r4
   13fe4:	ldrd	r4, [sp, #40]	; 0x28
   13fe8:	eor	r4, r4, r6
   13fec:	eor	r5, r5, r7
   13ff0:	lsr	ip, r4, #24
   13ff4:	orr	r2, ip, r5, lsl #8
   13ff8:	lsr	ip, r5, #24
   13ffc:	orr	r3, ip, r4, lsl #8
   14000:	add	ip, sp, #272	; 0x110
   14004:	ldrd	r4, [ip]
   14008:	adds	r4, r4, r0
   1400c:	adc	r5, r5, r1
   14010:	adds	r4, r4, r2
   14014:	adc	r5, r5, r3
   14018:	mov	r0, r4
   1401c:	mov	r1, r5
   14020:	strd	r0, [sp, #104]	; 0x68
   14024:	eor	r0, r0, r8
   14028:	eor	r1, r1, r9
   1402c:	mov	r9, r1
   14030:	lsr	ip, r0, #16
   14034:	orr	r1, ip, r1, lsl #16
   14038:	str	r1, [sp, #8]
   1403c:	lsr	r1, r9, #16
   14040:	orr	r1, r1, r0, lsl #16
   14044:	str	r1, [sp, #12]
   14048:	ldrd	r4, [sp, #8]
   1404c:	adds	r4, r4, r6
   14050:	adc	r5, r5, r7
   14054:	strd	r4, [sp, #120]	; 0x78
   14058:	mov	r0, r4
   1405c:	mov	r1, r5
   14060:	eor	r0, r0, r2
   14064:	eor	r1, r1, r3
   14068:	mov	r3, r1
   1406c:	lsl	r1, r1, #1
   14070:	orr	r1, r1, r0, lsr #31
   14074:	str	r1, [sp, #44]	; 0x2c
   14078:	lsl	r2, r0, #1
   1407c:	orr	r3, r2, r3, lsr #31
   14080:	str	r3, [sp, #40]	; 0x28
   14084:	add	r3, sp, #312	; 0x138
   14088:	ldrd	r8, [r3]
   1408c:	ldrd	r4, [sp, #64]	; 0x40
   14090:	adds	r8, r8, r4
   14094:	adc	r9, r9, r5
   14098:	ldrd	r4, [sp, #48]	; 0x30
   1409c:	adds	r4, r4, r8
   140a0:	adc	r5, r5, r9
   140a4:	mov	r0, r4
   140a8:	mov	r1, r5
   140ac:	ldrd	r2, [sp, #24]
   140b0:	eor	r2, r2, r4
   140b4:	eor	r3, r3, r5
   140b8:	mov	r8, r3
   140bc:	mov	r9, r2
   140c0:	ldrd	r6, [sp, #88]	; 0x58
   140c4:	adds	r6, r6, r3
   140c8:	adc	r7, r7, r2
   140cc:	ldrd	r4, [sp, #48]	; 0x30
   140d0:	eor	r4, r4, r6
   140d4:	eor	r5, r5, r7
   140d8:	lsr	ip, r4, #24
   140dc:	orr	r2, ip, r5, lsl #8
   140e0:	lsr	ip, r5, #24
   140e4:	orr	r3, ip, r4, lsl #8
   140e8:	add	ip, sp, #288	; 0x120
   140ec:	ldrd	r4, [ip]
   140f0:	adds	r4, r4, r0
   140f4:	adc	r5, r5, r1
   140f8:	adds	r4, r4, r2
   140fc:	adc	r5, r5, r3
   14100:	strd	r4, [sp, #64]	; 0x40
   14104:	eor	r4, r4, r8
   14108:	eor	r5, r5, r9
   1410c:	lsr	ip, r4, #16
   14110:	orr	r1, ip, r5, lsl #16
   14114:	str	r1, [sp, #24]
   14118:	lsr	r1, r5, #16
   1411c:	orr	r1, r1, r4, lsl #16
   14120:	str	r1, [sp, #28]
   14124:	ldrd	r8, [sp, #24]
   14128:	adds	r8, r8, r6
   1412c:	adc	r9, r9, r7
   14130:	eor	r2, r2, r8
   14134:	eor	r3, r3, r9
   14138:	lsl	r1, r3, #1
   1413c:	orr	r1, r1, r2, lsr #31
   14140:	str	r1, [sp, #52]	; 0x34
   14144:	lsl	r2, r2, #1
   14148:	orr	r3, r2, r3, lsr #31
   1414c:	str	r3, [sp, #48]	; 0x30
   14150:	add	r3, sp, #392	; 0x188
   14154:	ldrd	r0, [r3]
   14158:	ldrd	r6, [sp, #80]	; 0x50
   1415c:	adds	r0, r0, r6
   14160:	adc	r1, r1, r7
   14164:	ldrd	r4, [sp, #16]
   14168:	adds	r4, r4, r0
   1416c:	adc	r5, r5, r1
   14170:	mov	r0, r4
   14174:	mov	r1, r5
   14178:	ldrd	r2, [sp, #32]
   1417c:	eor	r2, r2, r4
   14180:	eor	r3, r3, r5
   14184:	str	r3, [sp, #32]
   14188:	str	r2, [sp, #36]	; 0x24
   1418c:	ldrd	r6, [sp, #112]	; 0x70
   14190:	ldrd	r2, [sp, #32]
   14194:	adds	r6, r6, r2
   14198:	adc	r7, r7, r3
   1419c:	ldrd	r4, [sp, #16]
   141a0:	eor	r4, r4, r6
   141a4:	eor	r5, r5, r7
   141a8:	lsr	ip, r4, #24
   141ac:	orr	r2, ip, r5, lsl #8
   141b0:	lsr	ip, r5, #24
   141b4:	orr	r3, ip, r4, lsl #8
   141b8:	add	ip, sp, #376	; 0x178
   141bc:	ldrd	r4, [ip]
   141c0:	adds	r4, r4, r0
   141c4:	adc	r5, r5, r1
   141c8:	adds	r4, r4, r2
   141cc:	adc	r5, r5, r3
   141d0:	ldrd	r0, [sp, #32]
   141d4:	strd	r4, [sp, #80]	; 0x50
   141d8:	eor	r0, r0, r4
   141dc:	eor	r1, r1, r5
   141e0:	lsr	ip, r0, #16
   141e4:	orr	r4, ip, r1, lsl #16
   141e8:	lsr	r1, r1, #16
   141ec:	orr	r5, r1, r0, lsl #16
   141f0:	adds	r0, r6, r4
   141f4:	adc	r1, r7, r5
   141f8:	strd	r0, [sp, #88]	; 0x58
   141fc:	eor	r0, r0, r2
   14200:	eor	r1, r1, r3
   14204:	mov	r3, r1
   14208:	lsl	r1, r1, #1
   1420c:	orr	r1, r1, r0, lsr #31
   14210:	str	r1, [sp, #20]
   14214:	lsl	r2, r0, #1
   14218:	orr	r3, r2, r3, lsr #31
   1421c:	str	r3, [sp, #16]
   14220:	add	r3, sp, #352	; 0x160
   14224:	ldrd	r0, [r3]
   14228:	ldrd	r2, [sp, #72]	; 0x48
   1422c:	adds	r0, r0, r2
   14230:	adc	r1, r1, r3
   14234:	ldrd	r2, [sp, #40]	; 0x28
   14238:	adds	r2, r2, r0
   1423c:	adc	r3, r3, r1
   14240:	mov	r0, r2
   14244:	mov	r1, r3
   14248:	eor	r4, r4, r2
   1424c:	eor	r5, r5, r3
   14250:	mov	r2, r5
   14254:	mov	r3, r4
   14258:	mov	r6, r5
   1425c:	mov	r7, r4
   14260:	adds	r4, r2, r8
   14264:	adc	r5, r3, r9
   14268:	mov	r8, r4
   1426c:	mov	r9, r5
   14270:	ldrd	r4, [sp, #40]	; 0x28
   14274:	eor	r4, r4, r8
   14278:	eor	r5, r5, r9
   1427c:	lsr	ip, r4, #24
   14280:	orr	r2, ip, r5, lsl #8
   14284:	lsr	ip, r5, #24
   14288:	orr	r3, ip, r4, lsl #8
   1428c:	add	ip, sp, #384	; 0x180
   14290:	ldrd	r4, [ip]
   14294:	adds	r4, r4, r0
   14298:	adc	r5, r5, r1
   1429c:	adds	r4, r4, r2
   142a0:	adc	r5, r5, r3
   142a4:	mov	r0, r6
   142a8:	mov	r1, r7
   142ac:	strd	r4, [sp, #72]	; 0x48
   142b0:	eor	r0, r0, r4
   142b4:	eor	r1, r1, r5
   142b8:	lsr	ip, r0, #16
   142bc:	orr	ip, ip, r1, lsl #16
   142c0:	str	ip, [sp, #32]
   142c4:	lsr	r1, r1, #16
   142c8:	orr	r1, r1, r0, lsl #16
   142cc:	str	r1, [sp, #36]	; 0x24
   142d0:	ldrd	r0, [sp, #32]
   142d4:	adds	r0, r0, r8
   142d8:	adc	r1, r1, r9
   142dc:	mov	r8, r0
   142e0:	mov	r9, r1
   142e4:	strd	r8, [sp, #112]	; 0x70
   142e8:	eor	r8, r8, r2
   142ec:	eor	r9, r9, r3
   142f0:	lsl	r1, r9, #1
   142f4:	orr	r1, r1, r8, lsr #31
   142f8:	str	r1, [sp, #44]	; 0x2c
   142fc:	lsl	r2, r8, #1
   14300:	orr	r3, r2, r9, lsr #31
   14304:	str	r3, [sp, #40]	; 0x28
   14308:	add	r3, sp, #296	; 0x128
   1430c:	ldrd	r8, [r3]
   14310:	ldrd	r4, [sp, #104]	; 0x68
   14314:	adds	r8, r8, r4
   14318:	adc	r9, r9, r5
   1431c:	ldrd	r4, [sp, #48]	; 0x30
   14320:	adds	r4, r4, r8
   14324:	adc	r5, r5, r9
   14328:	mov	r0, r4
   1432c:	mov	r1, r5
   14330:	ldrd	r2, [sp]
   14334:	eor	r2, r2, r4
   14338:	eor	r3, r3, r5
   1433c:	mov	r8, r3
   14340:	mov	r9, r2
   14344:	ldrd	r6, [sp, #88]	; 0x58
   14348:	adds	r6, r6, r3
   1434c:	adc	r7, r7, r2
   14350:	ldrd	r4, [sp, #48]	; 0x30
   14354:	eor	r4, r4, r6
   14358:	eor	r5, r5, r7
   1435c:	lsr	ip, r4, #24
   14360:	orr	r2, ip, r5, lsl #8
   14364:	lsr	ip, r5, #24
   14368:	orr	r3, ip, r4, lsl #8
   1436c:	add	ip, sp, #320	; 0x140
   14370:	ldrd	r4, [ip]
   14374:	adds	r4, r4, r0
   14378:	adc	r5, r5, r1
   1437c:	adds	r4, r4, r2
   14380:	adc	r5, r5, r3
   14384:	mov	r0, r4
   14388:	mov	r1, r5
   1438c:	strd	r0, [sp, #88]	; 0x58
   14390:	eor	r0, r0, r8
   14394:	eor	r1, r1, r9
   14398:	mov	r9, r1
   1439c:	lsr	ip, r0, #16
   143a0:	orr	r1, ip, r1, lsl #16
   143a4:	str	r1, [sp]
   143a8:	lsr	r1, r9, #16
   143ac:	orr	r1, r1, r0, lsl #16
   143b0:	str	r1, [sp, #4]
   143b4:	ldrd	r4, [sp]
   143b8:	adds	r4, r4, r6
   143bc:	adc	r5, r5, r7
   143c0:	strd	r4, [sp, #104]	; 0x68
   143c4:	mov	r8, r4
   143c8:	mov	r9, r5
   143cc:	eor	r8, r8, r2
   143d0:	eor	r9, r9, r3
   143d4:	lsl	r1, r9, #1
   143d8:	orr	r1, r1, r8, lsr #31
   143dc:	str	r1, [sp, #52]	; 0x34
   143e0:	lsl	r2, r8, #1
   143e4:	orr	r3, r2, r9, lsr #31
   143e8:	str	r3, [sp, #48]	; 0x30
   143ec:	add	r3, sp, #328	; 0x148
   143f0:	ldrd	r0, [r3]
   143f4:	ldrd	r4, [sp, #64]	; 0x40
   143f8:	adds	r0, r0, r4
   143fc:	adc	r1, r1, r5
   14400:	ldrd	r4, [sp, #16]
   14404:	adds	r4, r4, r0
   14408:	adc	r5, r5, r1
   1440c:	mov	r0, r4
   14410:	mov	r1, r5
   14414:	ldrd	r2, [sp, #8]
   14418:	eor	r2, r2, r4
   1441c:	eor	r3, r3, r5
   14420:	mov	r8, r3
   14424:	mov	r9, r2
   14428:	ldrd	r6, [sp, #96]	; 0x60
   1442c:	adds	r6, r6, r3
   14430:	adc	r7, r7, r2
   14434:	ldrd	r4, [sp, #16]
   14438:	eor	r4, r4, r6
   1443c:	eor	r5, r5, r7
   14440:	lsr	ip, r4, #24
   14444:	orr	r2, ip, r5, lsl #8
   14448:	lsr	ip, r5, #24
   1444c:	orr	r3, ip, r4, lsl #8
   14450:	add	ip, sp, #280	; 0x118
   14454:	ldrd	r4, [ip]
   14458:	adds	r4, r4, r0
   1445c:	adc	r5, r5, r1
   14460:	adds	r4, r4, r2
   14464:	adc	r5, r5, r3
   14468:	strd	r4, [sp, #64]	; 0x40
   1446c:	eor	r4, r4, r8
   14470:	eor	r5, r5, r9
   14474:	lsr	ip, r4, #16
   14478:	orr	r1, ip, r5, lsl #16
   1447c:	str	r1, [sp, #8]
   14480:	lsr	r1, r5, #16
   14484:	orr	r1, r1, r4, lsl #16
   14488:	str	r1, [sp, #12]
   1448c:	ldrd	r4, [sp, #8]
   14490:	adds	r4, r4, r6
   14494:	adc	r5, r5, r7
   14498:	mov	r8, r4
   1449c:	mov	r9, r5
   144a0:	eor	r2, r2, r4
   144a4:	eor	r3, r3, r5
   144a8:	lsl	r1, r3, #1
   144ac:	orr	r1, r1, r2, lsr #31
   144b0:	str	r1, [sp, #20]
   144b4:	lsl	r2, r2, #1
   144b8:	orr	r3, r2, r3, lsr #31
   144bc:	str	r3, [sp, #16]
   144c0:	add	r3, sp, #344	; 0x158
   144c4:	ldrd	r0, [r3]
   144c8:	ldrd	r2, [sp, #80]	; 0x50
   144cc:	adds	r0, r0, r2
   144d0:	adc	r1, r1, r3
   144d4:	ldrd	r4, [sp, #56]	; 0x38
   144d8:	adds	r2, r4, r0
   144dc:	adc	r3, r5, r1
   144e0:	mov	r0, r2
   144e4:	mov	r1, r3
   144e8:	ldrd	r2, [sp, #24]
   144ec:	eor	r2, r2, r0
   144f0:	eor	r3, r3, r1
   144f4:	str	r3, [sp, #24]
   144f8:	str	r2, [sp, #28]
   144fc:	ldrd	r6, [sp, #120]	; 0x78
   14500:	ldrd	r2, [sp, #24]
   14504:	adds	r6, r6, r2
   14508:	adc	r7, r7, r3
   1450c:	mov	r2, r4
   14510:	mov	r3, r5
   14514:	eor	r2, r2, r6
   14518:	eor	r3, r3, r7
   1451c:	mov	r4, r2
   14520:	lsr	ip, r2, #24
   14524:	orr	r2, ip, r3, lsl #8
   14528:	lsr	ip, r3, #24
   1452c:	orr	r3, ip, r4, lsl #8
   14530:	add	ip, sp, #304	; 0x130
   14534:	ldrd	r4, [ip]
   14538:	adds	r4, r4, r0
   1453c:	adc	r5, r5, r1
   14540:	adds	r4, r4, r2
   14544:	adc	r5, r5, r3
   14548:	ldrd	r0, [sp, #24]
   1454c:	strd	r4, [sp, #80]	; 0x50
   14550:	eor	r0, r0, r4
   14554:	eor	r1, r1, r5
   14558:	lsr	ip, r0, #16
   1455c:	orr	ip, ip, r1, lsl #16
   14560:	str	ip, [sp, #24]
   14564:	lsr	r1, r1, #16
   14568:	orr	r1, r1, r0, lsl #16
   1456c:	str	r1, [sp, #28]
   14570:	ldrd	r0, [sp, #24]
   14574:	adds	r0, r0, r6
   14578:	adc	r1, r1, r7
   1457c:	mov	r6, r0
   14580:	mov	r7, r1
   14584:	eor	r2, r2, r0
   14588:	eor	r3, r3, r1
   1458c:	lsl	r1, r3, #1
   14590:	orr	r5, r1, r2, lsr #31
   14594:	lsl	r2, r2, #1
   14598:	orr	r4, r2, r3, lsr #31
   1459c:	add	r3, sp, #328	; 0x148
   145a0:	ldrd	r0, [r3]
   145a4:	ldrd	r2, [sp, #72]	; 0x48
   145a8:	adds	r0, r0, r2
   145ac:	adc	r1, r1, r3
   145b0:	adds	r0, r0, r4
   145b4:	adc	r1, r1, r5
   145b8:	ldrd	r2, [sp]
   145bc:	eor	r2, r2, r0
   145c0:	eor	r3, r3, r1
   145c4:	strd	r2, [sp, #56]	; 0x38
   145c8:	ldrd	r2, [sp, #56]	; 0x38
   145cc:	str	r3, [sp]
   145d0:	str	r2, [sp, #4]
   145d4:	ldrd	r2, [sp]
   145d8:	adds	r2, r2, r8
   145dc:	adc	r3, r3, r9
   145e0:	mov	r8, r2
   145e4:	mov	r9, r3
   145e8:	eor	r4, r4, r2
   145ec:	eor	r5, r5, r3
   145f0:	lsr	ip, r4, #24
   145f4:	orr	r2, ip, r5, lsl #8
   145f8:	lsr	ip, r5, #24
   145fc:	orr	r3, ip, r4, lsl #8
   14600:	add	ip, sp, #344	; 0x158
   14604:	ldrd	r4, [ip]
   14608:	adds	r4, r4, r0
   1460c:	adc	r5, r5, r1
   14610:	adds	r4, r4, r2
   14614:	adc	r5, r5, r3
   14618:	ldrd	r0, [sp]
   1461c:	strd	r4, [sp, #72]	; 0x48
   14620:	eor	r0, r0, r4
   14624:	eor	r1, r1, r5
   14628:	lsr	ip, r0, #16
   1462c:	orr	ip, ip, r1, lsl #16
   14630:	str	ip, [sp]
   14634:	lsr	r1, r1, #16
   14638:	orr	r1, r1, r0, lsl #16
   1463c:	str	r1, [sp, #4]
   14640:	ldrd	r4, [sp]
   14644:	adds	r4, r4, r8
   14648:	adc	r5, r5, r9
   1464c:	strd	r4, [sp, #96]	; 0x60
   14650:	mov	r0, r4
   14654:	mov	r1, r5
   14658:	eor	r0, r0, r2
   1465c:	eor	r1, r1, r3
   14660:	mov	r3, r1
   14664:	lsl	r1, r1, #1
   14668:	orr	r1, r1, r0, lsr #31
   1466c:	str	r1, [sp, #60]	; 0x3c
   14670:	lsl	r2, r0, #1
   14674:	orr	r3, r2, r3, lsr #31
   14678:	str	r3, [sp, #56]	; 0x38
   1467c:	add	r3, sp, #296	; 0x128
   14680:	ldrd	r8, [r3]
   14684:	ldrd	r4, [sp, #88]	; 0x58
   14688:	adds	r8, r8, r4
   1468c:	adc	r9, r9, r5
   14690:	ldrd	r2, [sp, #40]	; 0x28
   14694:	adds	r2, r2, r8
   14698:	adc	r3, r3, r9
   1469c:	mov	r0, r2
   146a0:	mov	r1, r3
   146a4:	ldrd	r4, [sp, #8]
   146a8:	eor	r4, r4, r2
   146ac:	eor	r5, r5, r3
   146b0:	mov	r8, r5
   146b4:	mov	r9, r4
   146b8:	adds	r6, r6, r5
   146bc:	adc	r7, r7, r4
   146c0:	ldrd	r4, [sp, #40]	; 0x28
   146c4:	eor	r4, r4, r6
   146c8:	eor	r5, r5, r7
   146cc:	lsr	ip, r4, #24
   146d0:	orr	r2, ip, r5, lsl #8
   146d4:	lsr	ip, r5, #24
   146d8:	orr	r3, ip, r4, lsl #8
   146dc:	add	ip, sp, #280	; 0x118
   146e0:	ldrd	r4, [ip]
   146e4:	adds	r4, r4, r0
   146e8:	adc	r5, r5, r1
   146ec:	adds	r4, r4, r2
   146f0:	adc	r5, r5, r3
   146f4:	mov	r0, r4
   146f8:	mov	r1, r5
   146fc:	strd	r0, [sp, #88]	; 0x58
   14700:	eor	r0, r0, r8
   14704:	eor	r1, r1, r9
   14708:	mov	r9, r1
   1470c:	lsr	ip, r0, #16
   14710:	orr	r1, ip, r1, lsl #16
   14714:	str	r1, [sp, #8]
   14718:	lsr	r1, r9, #16
   1471c:	orr	r1, r1, r0, lsl #16
   14720:	str	r1, [sp, #12]
   14724:	ldrd	r4, [sp, #8]
   14728:	adds	r4, r4, r6
   1472c:	adc	r5, r5, r7
   14730:	strd	r4, [sp, #120]	; 0x78
   14734:	mov	r0, r4
   14738:	mov	r1, r5
   1473c:	eor	r0, r0, r2
   14740:	eor	r1, r1, r3
   14744:	mov	r3, r1
   14748:	lsl	r1, r1, #1
   1474c:	orr	r1, r1, r0, lsr #31
   14750:	str	r1, [sp, #44]	; 0x2c
   14754:	lsl	r2, r0, #1
   14758:	orr	r3, r2, r3, lsr #31
   1475c:	str	r3, [sp, #40]	; 0x28
   14760:	add	r3, sp, #376	; 0x178
   14764:	ldrd	r8, [r3]
   14768:	ldrd	r4, [sp, #64]	; 0x40
   1476c:	adds	r8, r8, r4
   14770:	adc	r9, r9, r5
   14774:	ldrd	r4, [sp, #48]	; 0x30
   14778:	adds	r4, r4, r8
   1477c:	adc	r5, r5, r9
   14780:	mov	r0, r4
   14784:	mov	r1, r5
   14788:	ldrd	r2, [sp, #24]
   1478c:	eor	r2, r2, r4
   14790:	eor	r3, r3, r5
   14794:	mov	r8, r3
   14798:	mov	r9, r2
   1479c:	ldrd	r6, [sp, #112]	; 0x70
   147a0:	adds	r6, r6, r3
   147a4:	adc	r7, r7, r2
   147a8:	ldrd	r4, [sp, #48]	; 0x30
   147ac:	eor	r4, r4, r6
   147b0:	eor	r5, r5, r7
   147b4:	lsr	ip, r4, #24
   147b8:	orr	r2, ip, r5, lsl #8
   147bc:	lsr	ip, r5, #24
   147c0:	orr	r3, ip, r4, lsl #8
   147c4:	add	ip, sp, #368	; 0x170
   147c8:	ldrd	r4, [ip]
   147cc:	adds	r4, r4, r0
   147d0:	adc	r5, r5, r1
   147d4:	adds	r4, r4, r2
   147d8:	adc	r5, r5, r3
   147dc:	strd	r4, [sp, #64]	; 0x40
   147e0:	eor	r4, r4, r8
   147e4:	eor	r5, r5, r9
   147e8:	lsr	ip, r4, #16
   147ec:	orr	r1, ip, r5, lsl #16
   147f0:	str	r1, [sp, #24]
   147f4:	lsr	r1, r5, #16
   147f8:	orr	r1, r1, r4, lsl #16
   147fc:	str	r1, [sp, #28]
   14800:	ldrd	r8, [sp, #24]
   14804:	adds	r8, r8, r6
   14808:	adc	r9, r9, r7
   1480c:	mov	r0, r8
   14810:	mov	r1, r9
   14814:	strd	r0, [sp, #112]	; 0x70
   14818:	eor	r0, r0, r2
   1481c:	eor	r1, r1, r3
   14820:	mov	r3, r1
   14824:	lsl	r1, r1, #1
   14828:	orr	r1, r1, r0, lsr #31
   1482c:	str	r1, [sp, #52]	; 0x34
   14830:	lsl	r2, r0, #1
   14834:	orr	r3, r2, r3, lsr #31
   14838:	str	r3, [sp, #48]	; 0x30
   1483c:	add	r3, sp, #360	; 0x168
   14840:	ldrd	r0, [r3]
   14844:	ldrd	r6, [sp, #80]	; 0x50
   14848:	adds	r0, r0, r6
   1484c:	adc	r1, r1, r7
   14850:	ldrd	r4, [sp, #16]
   14854:	adds	r4, r4, r0
   14858:	adc	r5, r5, r1
   1485c:	mov	r0, r4
   14860:	mov	r1, r5
   14864:	ldrd	r2, [sp, #32]
   14868:	eor	r2, r2, r4
   1486c:	eor	r3, r3, r5
   14870:	mov	r4, r3
   14874:	mov	r5, r2
   14878:	ldrd	r6, [sp, #104]	; 0x68
   1487c:	mov	r8, r3
   14880:	mov	r9, r2
   14884:	adds	r6, r6, r4
   14888:	adc	r7, r7, r5
   1488c:	ldrd	r4, [sp, #16]
   14890:	eor	r4, r4, r6
   14894:	eor	r5, r5, r7
   14898:	lsr	ip, r4, #24
   1489c:	orr	r2, ip, r5, lsl #8
   148a0:	lsr	ip, r5, #24
   148a4:	orr	r3, ip, r4, lsl #8
   148a8:	add	ip, sp, #384	; 0x180
   148ac:	ldrd	r4, [ip]
   148b0:	adds	r4, r4, r0
   148b4:	adc	r5, r5, r1
   148b8:	adds	r4, r4, r2
   148bc:	adc	r5, r5, r3
   148c0:	mov	r0, r8
   148c4:	mov	r1, r9
   148c8:	strd	r4, [sp, #80]	; 0x50
   148cc:	eor	r0, r0, r4
   148d0:	eor	r1, r1, r5
   148d4:	lsr	ip, r0, #16
   148d8:	orr	r4, ip, r1, lsl #16
   148dc:	lsr	r1, r1, #16
   148e0:	orr	r5, r1, r0, lsl #16
   148e4:	adds	r6, r6, r4
   148e8:	adc	r7, r7, r5
   148ec:	eor	r2, r2, r6
   148f0:	eor	r3, r3, r7
   148f4:	lsl	r1, r3, #1
   148f8:	orr	r1, r1, r2, lsr #31
   148fc:	str	r1, [sp, #20]
   14900:	lsl	r2, r2, #1
   14904:	orr	r3, r2, r3, lsr #31
   14908:	str	r3, [sp, #16]
   1490c:	add	r3, sp, #288	; 0x120
   14910:	ldrd	r0, [r3]
   14914:	ldrd	r2, [sp, #72]	; 0x48
   14918:	adds	r0, r0, r2
   1491c:	adc	r1, r1, r3
   14920:	ldrd	r2, [sp, #40]	; 0x28
   14924:	adds	r2, r2, r0
   14928:	adc	r3, r3, r1
   1492c:	mov	r0, r2
   14930:	mov	r1, r3
   14934:	eor	r4, r4, r2
   14938:	eor	r5, r5, r3
   1493c:	str	r5, [sp, #32]
   14940:	str	r4, [sp, #36]	; 0x24
   14944:	ldrd	r4, [sp, #32]
   14948:	ldrd	r2, [sp, #112]	; 0x70
   1494c:	adds	r2, r2, r4
   14950:	adc	r3, r3, r5
   14954:	mov	r8, r2
   14958:	mov	r9, r3
   1495c:	ldrd	r4, [sp, #40]	; 0x28
   14960:	eor	r4, r4, r2
   14964:	eor	r5, r5, r3
   14968:	lsr	ip, r4, #24
   1496c:	orr	r2, ip, r5, lsl #8
   14970:	lsr	ip, r5, #24
   14974:	orr	r3, ip, r4, lsl #8
   14978:	add	ip, sp, #320	; 0x140
   1497c:	ldrd	r4, [ip]
   14980:	adds	r4, r4, r0
   14984:	adc	r5, r5, r1
   14988:	adds	r4, r4, r2
   1498c:	adc	r5, r5, r3
   14990:	ldrd	r0, [sp, #32]
   14994:	strd	r4, [sp, #72]	; 0x48
   14998:	eor	r0, r0, r4
   1499c:	eor	r1, r1, r5
   149a0:	lsr	ip, r0, #16
   149a4:	orr	ip, ip, r1, lsl #16
   149a8:	str	ip, [sp, #32]
   149ac:	lsr	r1, r1, #16
   149b0:	orr	r1, r1, r0, lsl #16
   149b4:	str	r1, [sp, #36]	; 0x24
   149b8:	ldrd	r0, [sp, #32]
   149bc:	adds	r0, r0, r8
   149c0:	adc	r1, r1, r9
   149c4:	mov	r8, r0
   149c8:	mov	r9, r1
   149cc:	strd	r8, [sp, #104]	; 0x68
   149d0:	eor	r8, r8, r2
   149d4:	eor	r9, r9, r3
   149d8:	lsl	r1, r9, #1
   149dc:	orr	r1, r1, r8, lsr #31
   149e0:	str	r1, [sp, #44]	; 0x2c
   149e4:	lsl	r2, r8, #1
   149e8:	orr	r3, r2, r9, lsr #31
   149ec:	str	r3, [sp, #40]	; 0x28
   149f0:	add	r3, sp, #312	; 0x138
   149f4:	ldrd	r8, [r3]
   149f8:	ldrd	r4, [sp, #88]	; 0x58
   149fc:	adds	r8, r8, r4
   14a00:	adc	r9, r9, r5
   14a04:	ldrd	r4, [sp, #48]	; 0x30
   14a08:	adds	r4, r4, r8
   14a0c:	adc	r5, r5, r9
   14a10:	mov	r0, r4
   14a14:	mov	r1, r5
   14a18:	ldrd	r2, [sp]
   14a1c:	eor	r2, r2, r4
   14a20:	eor	r3, r3, r5
   14a24:	mov	r8, r3
   14a28:	mov	r9, r2
   14a2c:	adds	r6, r6, r3
   14a30:	adc	r7, r7, r2
   14a34:	ldrd	r4, [sp, #48]	; 0x30
   14a38:	eor	r4, r4, r6
   14a3c:	eor	r5, r5, r7
   14a40:	lsr	ip, r4, #24
   14a44:	orr	r2, ip, r5, lsl #8
   14a48:	lsr	ip, r5, #24
   14a4c:	orr	r3, ip, r4, lsl #8
   14a50:	add	ip, sp, #352	; 0x160
   14a54:	ldrd	r4, [ip]
   14a58:	adds	r4, r4, r0
   14a5c:	adc	r5, r5, r1
   14a60:	adds	r4, r4, r2
   14a64:	adc	r5, r5, r3
   14a68:	mov	r0, r4
   14a6c:	mov	r1, r5
   14a70:	strd	r0, [sp, #88]	; 0x58
   14a74:	eor	r0, r0, r8
   14a78:	eor	r1, r1, r9
   14a7c:	mov	r9, r1
   14a80:	lsr	ip, r0, #16
   14a84:	orr	r1, ip, r1, lsl #16
   14a88:	str	r1, [sp]
   14a8c:	lsr	r1, r9, #16
   14a90:	orr	r1, r1, r0, lsl #16
   14a94:	str	r1, [sp, #4]
   14a98:	ldrd	r4, [sp]
   14a9c:	adds	r4, r4, r6
   14aa0:	adc	r5, r5, r7
   14aa4:	strd	r4, [sp, #112]	; 0x70
   14aa8:	mov	r8, r4
   14aac:	mov	r9, r5
   14ab0:	eor	r8, r8, r2
   14ab4:	eor	r9, r9, r3
   14ab8:	lsl	r1, r9, #1
   14abc:	orr	r1, r1, r8, lsr #31
   14ac0:	str	r1, [sp, #52]	; 0x34
   14ac4:	lsl	r2, r8, #1
   14ac8:	orr	r3, r2, r9, lsr #31
   14acc:	str	r3, [sp, #48]	; 0x30
   14ad0:	add	r3, sp, #304	; 0x130
   14ad4:	ldrd	r0, [r3]
   14ad8:	ldrd	r4, [sp, #64]	; 0x40
   14adc:	adds	r0, r0, r4
   14ae0:	adc	r1, r1, r5
   14ae4:	ldrd	r4, [sp, #16]
   14ae8:	adds	r4, r4, r0
   14aec:	adc	r5, r5, r1
   14af0:	mov	r0, r4
   14af4:	mov	r1, r5
   14af8:	ldrd	r2, [sp, #8]
   14afc:	eor	r2, r2, r4
   14b00:	eor	r3, r3, r5
   14b04:	mov	r8, r3
   14b08:	mov	r9, r2
   14b0c:	ldrd	r6, [sp, #96]	; 0x60
   14b10:	adds	r6, r6, r3
   14b14:	adc	r7, r7, r2
   14b18:	ldrd	r4, [sp, #16]
   14b1c:	eor	r4, r4, r6
   14b20:	eor	r5, r5, r7
   14b24:	lsr	ip, r4, #24
   14b28:	orr	r2, ip, r5, lsl #8
   14b2c:	lsr	ip, r5, #24
   14b30:	orr	r3, ip, r4, lsl #8
   14b34:	add	ip, sp, #272	; 0x110
   14b38:	ldrd	r4, [ip]
   14b3c:	adds	r4, r4, r0
   14b40:	adc	r5, r5, r1
   14b44:	adds	r4, r4, r2
   14b48:	adc	r5, r5, r3
   14b4c:	strd	r4, [sp, #64]	; 0x40
   14b50:	eor	r4, r4, r8
   14b54:	eor	r5, r5, r9
   14b58:	lsr	ip, r4, #16
   14b5c:	orr	r1, ip, r5, lsl #16
   14b60:	str	r1, [sp, #8]
   14b64:	lsr	r1, r5, #16
   14b68:	orr	r1, r1, r4, lsl #16
   14b6c:	str	r1, [sp, #12]
   14b70:	ldrd	r4, [sp, #8]
   14b74:	adds	r4, r4, r6
   14b78:	adc	r5, r5, r7
   14b7c:	mov	r8, r4
   14b80:	mov	r9, r5
   14b84:	eor	r2, r2, r4
   14b88:	eor	r3, r3, r5
   14b8c:	lsl	r1, r3, #1
   14b90:	orr	r1, r1, r2, lsr #31
   14b94:	str	r1, [sp, #20]
   14b98:	lsl	r2, r2, #1
   14b9c:	orr	r3, r2, r3, lsr #31
   14ba0:	str	r3, [sp, #16]
   14ba4:	add	r3, sp, #392	; 0x188
   14ba8:	ldrd	r0, [r3]
   14bac:	ldrd	r2, [sp, #80]	; 0x50
   14bb0:	adds	r0, r0, r2
   14bb4:	adc	r1, r1, r3
   14bb8:	ldrd	r4, [sp, #56]	; 0x38
   14bbc:	adds	r2, r4, r0
   14bc0:	adc	r3, r5, r1
   14bc4:	mov	r0, r2
   14bc8:	mov	r1, r3
   14bcc:	ldrd	r2, [sp, #24]
   14bd0:	eor	r2, r2, r0
   14bd4:	eor	r3, r3, r1
   14bd8:	str	r3, [sp, #24]
   14bdc:	str	r2, [sp, #28]
   14be0:	ldrd	r6, [sp, #120]	; 0x78
   14be4:	ldrd	r2, [sp, #24]
   14be8:	adds	r6, r6, r2
   14bec:	adc	r7, r7, r3
   14bf0:	mov	r2, r4
   14bf4:	mov	r3, r5
   14bf8:	eor	r2, r2, r6
   14bfc:	eor	r3, r3, r7
   14c00:	mov	r4, r2
   14c04:	lsr	ip, r2, #24
   14c08:	orr	r2, ip, r3, lsl #8
   14c0c:	lsr	ip, r3, #24
   14c10:	orr	r3, ip, r4, lsl #8
   14c14:	add	ip, sp, #336	; 0x150
   14c18:	ldrd	r4, [ip]
   14c1c:	adds	r4, r4, r0
   14c20:	adc	r5, r5, r1
   14c24:	adds	r4, r4, r2
   14c28:	adc	r5, r5, r3
   14c2c:	ldrd	r0, [sp, #24]
   14c30:	strd	r4, [sp, #80]	; 0x50
   14c34:	eor	r0, r0, r4
   14c38:	eor	r1, r1, r5
   14c3c:	lsr	ip, r0, #16
   14c40:	orr	ip, ip, r1, lsl #16
   14c44:	str	ip, [sp, #24]
   14c48:	lsr	r1, r1, #16
   14c4c:	orr	r1, r1, r0, lsl #16
   14c50:	str	r1, [sp, #28]
   14c54:	ldrd	r0, [sp, #24]
   14c58:	adds	r0, r0, r6
   14c5c:	adc	r1, r1, r7
   14c60:	mov	r6, r0
   14c64:	mov	r7, r1
   14c68:	eor	r2, r2, r0
   14c6c:	eor	r3, r3, r1
   14c70:	lsl	r1, r3, #1
   14c74:	orr	r5, r1, r2, lsr #31
   14c78:	lsl	r2, r2, #1
   14c7c:	orr	r4, r2, r3, lsr #31
   14c80:	add	r3, sp, #344	; 0x158
   14c84:	ldrd	r0, [r3]
   14c88:	ldrd	r2, [sp, #72]	; 0x48
   14c8c:	adds	r0, r0, r2
   14c90:	adc	r1, r1, r3
   14c94:	adds	r0, r0, r4
   14c98:	adc	r1, r1, r5
   14c9c:	ldrd	r2, [sp]
   14ca0:	eor	r2, r2, r0
   14ca4:	eor	r3, r3, r1
   14ca8:	strd	r2, [sp, #56]	; 0x38
   14cac:	ldrd	r2, [sp, #56]	; 0x38
   14cb0:	str	r3, [sp]
   14cb4:	str	r2, [sp, #4]
   14cb8:	ldrd	r2, [sp]
   14cbc:	adds	r2, r2, r8
   14cc0:	adc	r3, r3, r9
   14cc4:	mov	r8, r2
   14cc8:	mov	r9, r3
   14ccc:	eor	r4, r4, r2
   14cd0:	eor	r5, r5, r3
   14cd4:	lsr	ip, r4, #24
   14cd8:	orr	r2, ip, r5, lsl #8
   14cdc:	lsr	ip, r5, #24
   14ce0:	orr	r3, ip, r4, lsl #8
   14ce4:	add	ip, sp, #272	; 0x110
   14ce8:	ldrd	r4, [ip]
   14cec:	adds	r4, r4, r0
   14cf0:	adc	r5, r5, r1
   14cf4:	adds	r4, r4, r2
   14cf8:	adc	r5, r5, r3
   14cfc:	ldrd	r0, [sp]
   14d00:	strd	r4, [sp, #72]	; 0x48
   14d04:	eor	r0, r0, r4
   14d08:	eor	r1, r1, r5
   14d0c:	lsr	ip, r0, #16
   14d10:	orr	ip, ip, r1, lsl #16
   14d14:	str	ip, [sp]
   14d18:	lsr	r1, r1, #16
   14d1c:	orr	r1, r1, r0, lsl #16
   14d20:	str	r1, [sp, #4]
   14d24:	ldrd	r4, [sp]
   14d28:	adds	r4, r4, r8
   14d2c:	adc	r5, r5, r9
   14d30:	strd	r4, [sp, #96]	; 0x60
   14d34:	mov	r0, r4
   14d38:	mov	r1, r5
   14d3c:	eor	r0, r0, r2
   14d40:	eor	r1, r1, r3
   14d44:	mov	r3, r1
   14d48:	lsl	r1, r1, #1
   14d4c:	orr	r1, r1, r0, lsr #31
   14d50:	str	r1, [sp, #60]	; 0x3c
   14d54:	lsl	r2, r0, #1
   14d58:	orr	r3, r2, r3, lsr #31
   14d5c:	str	r3, [sp, #56]	; 0x38
   14d60:	add	r3, sp, #312	; 0x138
   14d64:	ldrd	r8, [r3]
   14d68:	ldrd	r4, [sp, #88]	; 0x58
   14d6c:	adds	r8, r8, r4
   14d70:	adc	r9, r9, r5
   14d74:	ldrd	r2, [sp, #40]	; 0x28
   14d78:	adds	r2, r2, r8
   14d7c:	adc	r3, r3, r9
   14d80:	mov	r0, r2
   14d84:	mov	r1, r3
   14d88:	ldrd	r4, [sp, #8]
   14d8c:	eor	r4, r4, r2
   14d90:	eor	r5, r5, r3
   14d94:	mov	r8, r5
   14d98:	mov	r9, r4
   14d9c:	adds	r6, r6, r5
   14da0:	adc	r7, r7, r4
   14da4:	ldrd	r4, [sp, #40]	; 0x28
   14da8:	eor	r4, r4, r6
   14dac:	eor	r5, r5, r7
   14db0:	lsr	ip, r4, #24
   14db4:	orr	r2, ip, r5, lsl #8
   14db8:	lsr	ip, r5, #24
   14dbc:	orr	r3, ip, r4, lsl #8
   14dc0:	add	ip, sp, #328	; 0x148
   14dc4:	ldrd	r4, [ip]
   14dc8:	adds	r4, r4, r0
   14dcc:	adc	r5, r5, r1
   14dd0:	adds	r4, r4, r2
   14dd4:	adc	r5, r5, r3
   14dd8:	mov	r0, r4
   14ddc:	mov	r1, r5
   14de0:	strd	r0, [sp, #88]	; 0x58
   14de4:	eor	r0, r0, r8
   14de8:	eor	r1, r1, r9
   14dec:	mov	r9, r1
   14df0:	lsr	ip, r0, #16
   14df4:	orr	r1, ip, r1, lsl #16
   14df8:	str	r1, [sp, #8]
   14dfc:	lsr	r1, r9, #16
   14e00:	orr	r1, r1, r0, lsl #16
   14e04:	str	r1, [sp, #12]
   14e08:	ldrd	r4, [sp, #8]
   14e0c:	adds	r4, r4, r6
   14e10:	adc	r5, r5, r7
   14e14:	strd	r4, [sp, #120]	; 0x78
   14e18:	mov	r0, r4
   14e1c:	mov	r1, r5
   14e20:	eor	r0, r0, r2
   14e24:	eor	r1, r1, r3
   14e28:	mov	r3, r1
   14e2c:	lsl	r1, r1, #1
   14e30:	orr	r1, r1, r0, lsr #31
   14e34:	str	r1, [sp, #44]	; 0x2c
   14e38:	lsl	r2, r0, #1
   14e3c:	orr	r3, r2, r3, lsr #31
   14e40:	str	r3, [sp, #40]	; 0x28
   14e44:	add	r3, sp, #288	; 0x120
   14e48:	ldrd	r8, [r3]
   14e4c:	ldrd	r4, [sp, #64]	; 0x40
   14e50:	adds	r8, r8, r4
   14e54:	adc	r9, r9, r5
   14e58:	ldrd	r4, [sp, #48]	; 0x30
   14e5c:	adds	r4, r4, r8
   14e60:	adc	r5, r5, r9
   14e64:	mov	r0, r4
   14e68:	mov	r1, r5
   14e6c:	ldrd	r2, [sp, #24]
   14e70:	eor	r2, r2, r4
   14e74:	eor	r3, r3, r5
   14e78:	mov	r8, r3
   14e7c:	mov	r9, r2
   14e80:	ldrd	r6, [sp, #104]	; 0x68
   14e84:	adds	r6, r6, r3
   14e88:	adc	r7, r7, r2
   14e8c:	ldrd	r4, [sp, #48]	; 0x30
   14e90:	eor	r4, r4, r6
   14e94:	eor	r5, r5, r7
   14e98:	lsr	ip, r4, #24
   14e9c:	orr	r2, ip, r5, lsl #8
   14ea0:	lsr	ip, r5, #24
   14ea4:	orr	r3, ip, r4, lsl #8
   14ea8:	add	ip, sp, #304	; 0x130
   14eac:	ldrd	r4, [ip]
   14eb0:	adds	r4, r4, r0
   14eb4:	adc	r5, r5, r1
   14eb8:	adds	r4, r4, r2
   14ebc:	adc	r5, r5, r3
   14ec0:	strd	r4, [sp, #64]	; 0x40
   14ec4:	eor	r4, r4, r8
   14ec8:	eor	r5, r5, r9
   14ecc:	lsr	ip, r4, #16
   14ed0:	orr	r1, ip, r5, lsl #16
   14ed4:	str	r1, [sp, #24]
   14ed8:	lsr	r1, r5, #16
   14edc:	orr	r1, r1, r4, lsl #16
   14ee0:	str	r1, [sp, #28]
   14ee4:	ldrd	r8, [sp, #24]
   14ee8:	adds	r8, r8, r6
   14eec:	adc	r9, r9, r7
   14ef0:	mov	r0, r8
   14ef4:	mov	r1, r9
   14ef8:	strd	r0, [sp, #104]	; 0x68
   14efc:	eor	r0, r0, r2
   14f00:	eor	r1, r1, r3
   14f04:	mov	r3, r1
   14f08:	lsl	r1, r1, #1
   14f0c:	orr	r1, r1, r0, lsr #31
   14f10:	str	r1, [sp, #52]	; 0x34
   14f14:	lsl	r2, r0, #1
   14f18:	orr	r3, r2, r3, lsr #31
   14f1c:	str	r3, [sp, #48]	; 0x30
   14f20:	add	r3, sp, #352	; 0x160
   14f24:	ldrd	r0, [r3]
   14f28:	ldrd	r6, [sp, #80]	; 0x50
   14f2c:	adds	r0, r0, r6
   14f30:	adc	r1, r1, r7
   14f34:	ldrd	r4, [sp, #16]
   14f38:	adds	r4, r4, r0
   14f3c:	adc	r5, r5, r1
   14f40:	mov	r0, r4
   14f44:	mov	r1, r5
   14f48:	ldrd	r2, [sp, #32]
   14f4c:	eor	r2, r2, r4
   14f50:	eor	r3, r3, r5
   14f54:	mov	r4, r3
   14f58:	mov	r5, r2
   14f5c:	ldrd	r6, [sp, #112]	; 0x70
   14f60:	mov	r8, r3
   14f64:	mov	r9, r2
   14f68:	adds	r6, r6, r4
   14f6c:	adc	r7, r7, r5
   14f70:	ldrd	r4, [sp, #16]
   14f74:	eor	r4, r4, r6
   14f78:	eor	r5, r5, r7
   14f7c:	lsr	ip, r4, #24
   14f80:	orr	r2, ip, r5, lsl #8
   14f84:	lsr	ip, r5, #24
   14f88:	orr	r3, ip, r4, lsl #8
   14f8c:	add	ip, sp, #392	; 0x188
   14f90:	ldrd	r4, [ip]
   14f94:	adds	r4, r4, r0
   14f98:	adc	r5, r5, r1
   14f9c:	adds	r4, r4, r2
   14fa0:	adc	r5, r5, r3
   14fa4:	mov	r0, r8
   14fa8:	mov	r1, r9
   14fac:	strd	r4, [sp, #80]	; 0x50
   14fb0:	eor	r0, r0, r4
   14fb4:	eor	r1, r1, r5
   14fb8:	lsr	ip, r0, #16
   14fbc:	orr	r4, ip, r1, lsl #16
   14fc0:	lsr	r1, r1, #16
   14fc4:	orr	r5, r1, r0, lsl #16
   14fc8:	adds	r6, r6, r4
   14fcc:	adc	r7, r7, r5
   14fd0:	eor	r2, r2, r6
   14fd4:	eor	r3, r3, r7
   14fd8:	lsl	r1, r3, #1
   14fdc:	orr	r1, r1, r2, lsr #31
   14fe0:	str	r1, [sp, #20]
   14fe4:	lsl	r2, r2, #1
   14fe8:	orr	r3, r2, r3, lsr #31
   14fec:	str	r3, [sp, #16]
   14ff0:	add	r3, sp, #384	; 0x180
   14ff4:	ldrd	r0, [r3]
   14ff8:	ldrd	r2, [sp, #72]	; 0x48
   14ffc:	adds	r0, r0, r2
   15000:	adc	r1, r1, r3
   15004:	ldrd	r2, [sp, #40]	; 0x28
   15008:	adds	r2, r2, r0
   1500c:	adc	r3, r3, r1
   15010:	mov	r0, r2
   15014:	mov	r1, r3
   15018:	eor	r4, r4, r2
   1501c:	eor	r5, r5, r3
   15020:	str	r5, [sp, #32]
   15024:	str	r4, [sp, #36]	; 0x24
   15028:	ldrd	r4, [sp, #32]
   1502c:	ldrd	r2, [sp, #104]	; 0x68
   15030:	adds	r2, r2, r4
   15034:	adc	r3, r3, r5
   15038:	mov	r8, r2
   1503c:	mov	r9, r3
   15040:	ldrd	r4, [sp, #40]	; 0x28
   15044:	eor	r4, r4, r2
   15048:	eor	r5, r5, r3
   1504c:	lsr	ip, r4, #24
   15050:	orr	r2, ip, r5, lsl #8
   15054:	lsr	ip, r5, #24
   15058:	orr	r3, ip, r4, lsl #8
   1505c:	add	ip, sp, #280	; 0x118
   15060:	ldrd	r4, [ip]
   15064:	adds	r4, r4, r0
   15068:	adc	r5, r5, r1
   1506c:	adds	r4, r4, r2
   15070:	adc	r5, r5, r3
   15074:	ldrd	r0, [sp, #32]
   15078:	strd	r4, [sp, #72]	; 0x48
   1507c:	eor	r0, r0, r4
   15080:	eor	r1, r1, r5
   15084:	lsr	ip, r0, #16
   15088:	orr	ip, ip, r1, lsl #16
   1508c:	str	ip, [sp, #32]
   15090:	lsr	r1, r1, #16
   15094:	orr	r1, r1, r0, lsl #16
   15098:	str	r1, [sp, #36]	; 0x24
   1509c:	ldrd	r0, [sp, #32]
   150a0:	adds	r0, r0, r8
   150a4:	adc	r1, r1, r9
   150a8:	mov	r8, r0
   150ac:	mov	r9, r1
   150b0:	strd	r8, [sp, #104]	; 0x68
   150b4:	eor	r8, r8, r2
   150b8:	eor	r9, r9, r3
   150bc:	lsl	r1, r9, #1
   150c0:	orr	r1, r1, r8, lsr #31
   150c4:	str	r1, [sp, #44]	; 0x2c
   150c8:	lsl	r2, r8, #1
   150cc:	orr	r3, r2, r9, lsr #31
   150d0:	str	r3, [sp, #40]	; 0x28
   150d4:	add	r3, sp, #360	; 0x168
   150d8:	ldrd	r8, [r3]
   150dc:	ldrd	r4, [sp, #88]	; 0x58
   150e0:	adds	r8, r8, r4
   150e4:	adc	r9, r9, r5
   150e8:	ldrd	r4, [sp, #48]	; 0x30
   150ec:	adds	r4, r4, r8
   150f0:	adc	r5, r5, r9
   150f4:	mov	r0, r4
   150f8:	mov	r1, r5
   150fc:	ldrd	r2, [sp]
   15100:	eor	r2, r2, r4
   15104:	eor	r3, r3, r5
   15108:	mov	r8, r3
   1510c:	mov	r9, r2
   15110:	adds	r6, r6, r3
   15114:	adc	r7, r7, r2
   15118:	ldrd	r4, [sp, #48]	; 0x30
   1511c:	eor	r4, r4, r6
   15120:	eor	r5, r5, r7
   15124:	lsr	ip, r4, #24
   15128:	orr	r2, ip, r5, lsl #8
   1512c:	lsr	ip, r5, #24
   15130:	orr	r3, ip, r4, lsl #8
   15134:	add	ip, sp, #368	; 0x170
   15138:	ldrd	r4, [ip]
   1513c:	adds	r4, r4, r0
   15140:	adc	r5, r5, r1
   15144:	adds	r4, r4, r2
   15148:	adc	r5, r5, r3
   1514c:	mov	r0, r4
   15150:	mov	r1, r5
   15154:	strd	r0, [sp, #88]	; 0x58
   15158:	eor	r0, r0, r8
   1515c:	eor	r1, r1, r9
   15160:	mov	r9, r1
   15164:	lsr	ip, r0, #16
   15168:	orr	r1, ip, r1, lsl #16
   1516c:	str	r1, [sp]
   15170:	lsr	r1, r9, #16
   15174:	orr	r1, r1, r0, lsl #16
   15178:	str	r1, [sp, #4]
   1517c:	ldrd	r4, [sp]
   15180:	adds	r4, r4, r6
   15184:	adc	r5, r5, r7
   15188:	strd	r4, [sp, #112]	; 0x70
   1518c:	mov	r8, r4
   15190:	mov	r9, r5
   15194:	eor	r8, r8, r2
   15198:	eor	r9, r9, r3
   1519c:	lsl	r1, r9, #1
   151a0:	orr	r1, r1, r8, lsr #31
   151a4:	str	r1, [sp, #52]	; 0x34
   151a8:	lsl	r2, r8, #1
   151ac:	orr	r3, r2, r9, lsr #31
   151b0:	str	r3, [sp, #48]	; 0x30
   151b4:	add	r3, sp, #320	; 0x140
   151b8:	ldrd	r0, [r3]
   151bc:	ldrd	r4, [sp, #64]	; 0x40
   151c0:	adds	r0, r0, r4
   151c4:	adc	r1, r1, r5
   151c8:	ldrd	r4, [sp, #16]
   151cc:	adds	r4, r4, r0
   151d0:	adc	r5, r5, r1
   151d4:	mov	r0, r4
   151d8:	mov	r1, r5
   151dc:	ldrd	r2, [sp, #8]
   151e0:	eor	r2, r2, r4
   151e4:	eor	r3, r3, r5
   151e8:	mov	r8, r3
   151ec:	mov	r9, r2
   151f0:	ldrd	r6, [sp, #96]	; 0x60
   151f4:	adds	r6, r6, r3
   151f8:	adc	r7, r7, r2
   151fc:	ldrd	r4, [sp, #16]
   15200:	eor	r4, r4, r6
   15204:	eor	r5, r5, r7
   15208:	lsr	ip, r4, #24
   1520c:	orr	r2, ip, r5, lsl #8
   15210:	lsr	ip, r5, #24
   15214:	orr	r3, ip, r4, lsl #8
   15218:	add	ip, sp, #336	; 0x150
   1521c:	ldrd	r4, [ip]
   15220:	adds	r4, r4, r0
   15224:	adc	r5, r5, r1
   15228:	adds	r4, r4, r2
   1522c:	adc	r5, r5, r3
   15230:	strd	r4, [sp, #64]	; 0x40
   15234:	eor	r4, r4, r8
   15238:	eor	r5, r5, r9
   1523c:	lsr	ip, r4, #16
   15240:	orr	r1, ip, r5, lsl #16
   15244:	str	r1, [sp, #8]
   15248:	lsr	r1, r5, #16
   1524c:	orr	r1, r1, r4, lsl #16
   15250:	str	r1, [sp, #12]
   15254:	ldrd	r4, [sp, #8]
   15258:	adds	r4, r4, r6
   1525c:	adc	r5, r5, r7
   15260:	mov	r8, r4
   15264:	mov	r9, r5
   15268:	eor	r2, r2, r4
   1526c:	eor	r3, r3, r5
   15270:	lsl	r1, r3, #1
   15274:	orr	r1, r1, r2, lsr #31
   15278:	str	r1, [sp, #20]
   1527c:	lsl	r2, r2, #1
   15280:	orr	r3, r2, r3, lsr #31
   15284:	str	r3, [sp, #16]
   15288:	add	r3, sp, #296	; 0x128
   1528c:	ldrd	r0, [r3]
   15290:	ldrd	r2, [sp, #80]	; 0x50
   15294:	adds	r0, r0, r2
   15298:	adc	r1, r1, r3
   1529c:	ldrd	r4, [sp, #56]	; 0x38
   152a0:	adds	r2, r4, r0
   152a4:	adc	r3, r5, r1
   152a8:	mov	r0, r2
   152ac:	mov	r1, r3
   152b0:	ldrd	r2, [sp, #24]
   152b4:	eor	r2, r2, r0
   152b8:	eor	r3, r3, r1
   152bc:	str	r3, [sp, #24]
   152c0:	str	r2, [sp, #28]
   152c4:	ldrd	r6, [sp, #120]	; 0x78
   152c8:	ldrd	r2, [sp, #24]
   152cc:	adds	r6, r6, r2
   152d0:	adc	r7, r7, r3
   152d4:	mov	r2, r4
   152d8:	mov	r3, r5
   152dc:	eor	r2, r2, r6
   152e0:	eor	r3, r3, r7
   152e4:	mov	r4, r2
   152e8:	lsr	ip, r2, #24
   152ec:	orr	r2, ip, r3, lsl #8
   152f0:	lsr	ip, r3, #24
   152f4:	orr	r3, ip, r4, lsl #8
   152f8:	add	ip, sp, #376	; 0x178
   152fc:	ldrd	r4, [ip]
   15300:	adds	r4, r4, r0
   15304:	adc	r5, r5, r1
   15308:	adds	r4, r4, r2
   1530c:	adc	r5, r5, r3
   15310:	ldrd	r0, [sp, #24]
   15314:	strd	r4, [sp, #80]	; 0x50
   15318:	eor	r0, r0, r4
   1531c:	eor	r1, r1, r5
   15320:	lsr	ip, r0, #16
   15324:	orr	ip, ip, r1, lsl #16
   15328:	str	ip, [sp, #24]
   1532c:	lsr	r1, r1, #16
   15330:	orr	r1, r1, r0, lsl #16
   15334:	str	r1, [sp, #28]
   15338:	ldrd	r0, [sp, #24]
   1533c:	adds	r0, r0, r6
   15340:	adc	r1, r1, r7
   15344:	mov	r6, r0
   15348:	mov	r7, r1
   1534c:	eor	r2, r2, r0
   15350:	eor	r3, r3, r1
   15354:	lsl	r1, r3, #1
   15358:	orr	r5, r1, r2, lsr #31
   1535c:	lsl	r2, r2, #1
   15360:	orr	r4, r2, r3, lsr #31
   15364:	add	r3, sp, #288	; 0x120
   15368:	ldrd	r0, [r3]
   1536c:	ldrd	r2, [sp, #72]	; 0x48
   15370:	adds	r0, r0, r2
   15374:	adc	r1, r1, r3
   15378:	adds	r0, r0, r4
   1537c:	adc	r1, r1, r5
   15380:	ldrd	r2, [sp]
   15384:	eor	r2, r2, r0
   15388:	eor	r3, r3, r1
   1538c:	strd	r2, [sp, #56]	; 0x38
   15390:	ldrd	r2, [sp, #56]	; 0x38
   15394:	str	r3, [sp]
   15398:	str	r2, [sp, #4]
   1539c:	ldrd	r2, [sp]
   153a0:	adds	r2, r2, r8
   153a4:	adc	r3, r3, r9
   153a8:	mov	r8, r2
   153ac:	mov	r9, r3
   153b0:	eor	r4, r4, r2
   153b4:	eor	r5, r5, r3
   153b8:	lsr	ip, r4, #24
   153bc:	orr	r2, ip, r5, lsl #8
   153c0:	lsr	ip, r5, #24
   153c4:	orr	r3, ip, r4, lsl #8
   153c8:	add	ip, sp, #368	; 0x170
   153cc:	ldrd	r4, [ip]
   153d0:	adds	r4, r4, r0
   153d4:	adc	r5, r5, r1
   153d8:	adds	r4, r4, r2
   153dc:	adc	r5, r5, r3
   153e0:	ldrd	r0, [sp]
   153e4:	strd	r4, [sp, #72]	; 0x48
   153e8:	eor	r0, r0, r4
   153ec:	eor	r1, r1, r5
   153f0:	lsr	ip, r0, #16
   153f4:	orr	ip, ip, r1, lsl #16
   153f8:	str	ip, [sp]
   153fc:	lsr	r1, r1, #16
   15400:	orr	r1, r1, r0, lsl #16
   15404:	str	r1, [sp, #4]
   15408:	ldrd	r4, [sp]
   1540c:	adds	r4, r4, r8
   15410:	adc	r5, r5, r9
   15414:	strd	r4, [sp, #96]	; 0x60
   15418:	mov	r0, r4
   1541c:	mov	r1, r5
   15420:	eor	r0, r0, r2
   15424:	eor	r1, r1, r3
   15428:	mov	r3, r1
   1542c:	lsl	r1, r1, #1
   15430:	orr	r1, r1, r0, lsr #31
   15434:	str	r1, [sp, #60]	; 0x3c
   15438:	lsl	r2, r0, #1
   1543c:	orr	r3, r2, r3, lsr #31
   15440:	str	r3, [sp, #56]	; 0x38
   15444:	add	r3, sp, #320	; 0x140
   15448:	ldrd	r8, [r3]
   1544c:	ldrd	r4, [sp, #88]	; 0x58
   15450:	adds	r8, r8, r4
   15454:	adc	r9, r9, r5
   15458:	ldrd	r2, [sp, #40]	; 0x28
   1545c:	adds	r2, r2, r8
   15460:	adc	r3, r3, r9
   15464:	mov	r0, r2
   15468:	mov	r1, r3
   1546c:	ldrd	r4, [sp, #8]
   15470:	eor	r4, r4, r2
   15474:	eor	r5, r5, r3
   15478:	mov	r8, r5
   1547c:	mov	r9, r4
   15480:	adds	r6, r6, r5
   15484:	adc	r7, r7, r4
   15488:	ldrd	r4, [sp, #40]	; 0x28
   1548c:	eor	r4, r4, r6
   15490:	eor	r5, r5, r7
   15494:	lsr	ip, r4, #24
   15498:	orr	r2, ip, r5, lsl #8
   1549c:	lsr	ip, r5, #24
   154a0:	orr	r3, ip, r4, lsl #8
   154a4:	add	ip, sp, #352	; 0x160
   154a8:	ldrd	r4, [ip]
   154ac:	adds	r4, r4, r0
   154b0:	adc	r5, r5, r1
   154b4:	adds	r4, r4, r2
   154b8:	adc	r5, r5, r3
   154bc:	mov	r0, r4
   154c0:	mov	r1, r5
   154c4:	strd	r0, [sp, #88]	; 0x58
   154c8:	eor	r0, r0, r8
   154cc:	eor	r1, r1, r9
   154d0:	mov	r9, r1
   154d4:	lsr	ip, r0, #16
   154d8:	orr	r1, ip, r1, lsl #16
   154dc:	str	r1, [sp, #8]
   154e0:	lsr	r1, r9, #16
   154e4:	orr	r1, r1, r0, lsl #16
   154e8:	str	r1, [sp, #12]
   154ec:	ldrd	r4, [sp, #8]
   154f0:	adds	r4, r4, r6
   154f4:	adc	r5, r5, r7
   154f8:	strd	r4, [sp, #120]	; 0x78
   154fc:	mov	r0, r4
   15500:	mov	r1, r5
   15504:	eor	r0, r0, r2
   15508:	eor	r1, r1, r3
   1550c:	mov	r3, r1
   15510:	lsl	r1, r1, #1
   15514:	orr	r1, r1, r0, lsr #31
   15518:	str	r1, [sp, #44]	; 0x2c
   1551c:	lsl	r2, r0, #1
   15520:	orr	r3, r2, r3, lsr #31
   15524:	str	r3, [sp, #40]	; 0x28
   15528:	add	r3, sp, #272	; 0x110
   1552c:	ldrd	r8, [r3]
   15530:	ldrd	r4, [sp, #64]	; 0x40
   15534:	adds	r8, r8, r4
   15538:	adc	r9, r9, r5
   1553c:	ldrd	r4, [sp, #48]	; 0x30
   15540:	adds	r4, r4, r8
   15544:	adc	r5, r5, r9
   15548:	mov	r0, r4
   1554c:	mov	r1, r5
   15550:	ldrd	r2, [sp, #24]
   15554:	eor	r2, r2, r4
   15558:	eor	r3, r3, r5
   1555c:	mov	r8, r3
   15560:	mov	r9, r2
   15564:	ldrd	r6, [sp, #104]	; 0x68
   15568:	adds	r6, r6, r3
   1556c:	adc	r7, r7, r2
   15570:	ldrd	r4, [sp, #48]	; 0x30
   15574:	eor	r4, r4, r6
   15578:	eor	r5, r5, r7
   1557c:	lsr	ip, r4, #24
   15580:	orr	r2, ip, r5, lsl #8
   15584:	lsr	ip, r5, #24
   15588:	orr	r3, ip, r4, lsl #8
   1558c:	add	ip, sp, #360	; 0x168
   15590:	ldrd	r4, [ip]
   15594:	adds	r4, r4, r0
   15598:	adc	r5, r5, r1
   1559c:	adds	r4, r4, r2
   155a0:	adc	r5, r5, r3
   155a4:	strd	r4, [sp, #64]	; 0x40
   155a8:	eor	r4, r4, r8
   155ac:	eor	r5, r5, r9
   155b0:	lsr	ip, r4, #16
   155b4:	orr	r1, ip, r5, lsl #16
   155b8:	str	r1, [sp, #24]
   155bc:	lsr	r1, r5, #16
   155c0:	orr	r1, r1, r4, lsl #16
   155c4:	str	r1, [sp, #28]
   155c8:	ldrd	r8, [sp, #24]
   155cc:	adds	r8, r8, r6
   155d0:	adc	r9, r9, r7
   155d4:	mov	r0, r8
   155d8:	mov	r1, r9
   155dc:	strd	r0, [sp, #104]	; 0x68
   155e0:	eor	r0, r0, r2
   155e4:	eor	r1, r1, r3
   155e8:	mov	r3, r1
   155ec:	lsl	r1, r1, #1
   155f0:	orr	r1, r1, r0, lsr #31
   155f4:	str	r1, [sp, #52]	; 0x34
   155f8:	lsl	r2, r0, #1
   155fc:	orr	r3, r2, r3, lsr #31
   15600:	str	r3, [sp, #48]	; 0x30
   15604:	add	r3, sp, #336	; 0x150
   15608:	ldrd	r0, [r3]
   1560c:	ldrd	r6, [sp, #80]	; 0x50
   15610:	adds	r0, r0, r6
   15614:	adc	r1, r1, r7
   15618:	ldrd	r4, [sp, #16]
   1561c:	adds	r4, r4, r0
   15620:	adc	r5, r5, r1
   15624:	mov	r0, r4
   15628:	mov	r1, r5
   1562c:	ldrd	r2, [sp, #32]
   15630:	eor	r2, r2, r4
   15634:	eor	r3, r3, r5
   15638:	mov	r4, r3
   1563c:	mov	r5, r2
   15640:	ldrd	r6, [sp, #112]	; 0x70
   15644:	mov	r8, r3
   15648:	mov	r9, r2
   1564c:	adds	r6, r6, r4
   15650:	adc	r7, r7, r5
   15654:	ldrd	r4, [sp, #16]
   15658:	eor	r4, r4, r6
   1565c:	eor	r5, r5, r7
   15660:	lsr	ip, r4, #24
   15664:	orr	r2, ip, r5, lsl #8
   15668:	lsr	ip, r5, #24
   1566c:	orr	r3, ip, r4, lsl #8
   15670:	add	ip, sp, #296	; 0x128
   15674:	ldrd	r4, [ip]
   15678:	adds	r4, r4, r0
   1567c:	adc	r5, r5, r1
   15680:	adds	r4, r4, r2
   15684:	adc	r5, r5, r3
   15688:	mov	r0, r8
   1568c:	mov	r1, r9
   15690:	strd	r4, [sp, #80]	; 0x50
   15694:	eor	r0, r0, r4
   15698:	eor	r1, r1, r5
   1569c:	lsr	ip, r0, #16
   156a0:	orr	r4, ip, r1, lsl #16
   156a4:	lsr	r1, r1, #16
   156a8:	orr	r5, r1, r0, lsl #16
   156ac:	adds	r6, r6, r4
   156b0:	adc	r7, r7, r5
   156b4:	eor	r2, r2, r6
   156b8:	eor	r3, r3, r7
   156bc:	lsl	r1, r3, #1
   156c0:	orr	r1, r1, r2, lsr #31
   156c4:	str	r1, [sp, #20]
   156c8:	lsl	r2, r2, #1
   156cc:	orr	r3, r2, r3, lsr #31
   156d0:	str	r3, [sp, #16]
   156d4:	add	r3, sp, #304	; 0x130
   156d8:	ldrd	r0, [r3]
   156dc:	ldrd	r2, [sp, #72]	; 0x48
   156e0:	adds	r0, r0, r2
   156e4:	adc	r1, r1, r3
   156e8:	ldrd	r2, [sp, #40]	; 0x28
   156ec:	adds	r2, r2, r0
   156f0:	adc	r3, r3, r1
   156f4:	mov	r0, r2
   156f8:	mov	r1, r3
   156fc:	eor	r4, r4, r2
   15700:	eor	r5, r5, r3
   15704:	str	r5, [sp, #32]
   15708:	str	r4, [sp, #36]	; 0x24
   1570c:	ldrd	r4, [sp, #32]
   15710:	ldrd	r2, [sp, #104]	; 0x68
   15714:	adds	r2, r2, r4
   15718:	adc	r3, r3, r5
   1571c:	mov	r8, r2
   15720:	mov	r9, r3
   15724:	ldrd	r4, [sp, #40]	; 0x28
   15728:	eor	r4, r4, r2
   1572c:	eor	r5, r5, r3
   15730:	lsr	ip, r4, #24
   15734:	orr	r2, ip, r5, lsl #8
   15738:	lsr	ip, r5, #24
   1573c:	orr	r3, ip, r4, lsl #8
   15740:	add	ip, sp, #376	; 0x178
   15744:	ldrd	r4, [ip]
   15748:	adds	r4, r4, r0
   1574c:	adc	r5, r5, r1
   15750:	adds	r4, r4, r2
   15754:	adc	r5, r5, r3
   15758:	ldrd	r0, [sp, #32]
   1575c:	strd	r4, [sp, #72]	; 0x48
   15760:	eor	r0, r0, r4
   15764:	eor	r1, r1, r5
   15768:	lsr	ip, r0, #16
   1576c:	orr	ip, ip, r1, lsl #16
   15770:	str	ip, [sp, #32]
   15774:	lsr	r1, r1, #16
   15778:	orr	r1, r1, r0, lsl #16
   1577c:	str	r1, [sp, #36]	; 0x24
   15780:	ldrd	r0, [sp, #32]
   15784:	adds	r0, r0, r8
   15788:	adc	r1, r1, r9
   1578c:	mov	r8, r0
   15790:	mov	r9, r1
   15794:	strd	r8, [sp, #104]	; 0x68
   15798:	eor	r8, r8, r2
   1579c:	eor	r9, r9, r3
   157a0:	lsl	r1, r9, #1
   157a4:	orr	r1, r1, r8, lsr #31
   157a8:	str	r1, [sp, #44]	; 0x2c
   157ac:	lsl	r2, r8, #1
   157b0:	orr	r3, r2, r9, lsr #31
   157b4:	str	r3, [sp, #40]	; 0x28
   157b8:	add	r3, sp, #328	; 0x148
   157bc:	ldrd	r8, [r3]
   157c0:	ldrd	r4, [sp, #88]	; 0x58
   157c4:	adds	r8, r8, r4
   157c8:	adc	r9, r9, r5
   157cc:	ldrd	r4, [sp, #48]	; 0x30
   157d0:	adds	r4, r4, r8
   157d4:	adc	r5, r5, r9
   157d8:	mov	r0, r4
   157dc:	mov	r1, r5
   157e0:	ldrd	r2, [sp]
   157e4:	eor	r2, r2, r4
   157e8:	eor	r3, r3, r5
   157ec:	mov	r8, r3
   157f0:	mov	r9, r2
   157f4:	adds	r6, r6, r3
   157f8:	adc	r7, r7, r2
   157fc:	ldrd	r4, [sp, #48]	; 0x30
   15800:	eor	r4, r4, r6
   15804:	eor	r5, r5, r7
   15808:	lsr	ip, r4, #24
   1580c:	orr	r2, ip, r5, lsl #8
   15810:	lsr	ip, r5, #24
   15814:	orr	r3, ip, r4, lsl #8
   15818:	add	ip, sp, #312	; 0x138
   1581c:	ldrd	r4, [ip]
   15820:	adds	r4, r4, r0
   15824:	adc	r5, r5, r1
   15828:	adds	r4, r4, r2
   1582c:	adc	r5, r5, r3
   15830:	mov	r0, r4
   15834:	mov	r1, r5
   15838:	strd	r0, [sp, #88]	; 0x58
   1583c:	eor	r0, r0, r8
   15840:	eor	r1, r1, r9
   15844:	mov	r9, r1
   15848:	lsr	ip, r0, #16
   1584c:	orr	r1, ip, r1, lsl #16
   15850:	str	r1, [sp]
   15854:	lsr	r1, r9, #16
   15858:	orr	r1, r1, r0, lsl #16
   1585c:	str	r1, [sp, #4]
   15860:	ldrd	r4, [sp]
   15864:	adds	r4, r4, r6
   15868:	adc	r5, r5, r7
   1586c:	strd	r4, [sp, #112]	; 0x70
   15870:	mov	r8, r4
   15874:	mov	r9, r5
   15878:	eor	r8, r8, r2
   1587c:	eor	r9, r9, r3
   15880:	lsl	r1, r9, #1
   15884:	orr	r1, r1, r8, lsr #31
   15888:	str	r1, [sp, #52]	; 0x34
   1588c:	lsl	r2, r8, #1
   15890:	orr	r3, r2, r9, lsr #31
   15894:	str	r3, [sp, #48]	; 0x30
   15898:	add	r3, sp, #392	; 0x188
   1589c:	ldrd	r0, [r3]
   158a0:	ldrd	r4, [sp, #64]	; 0x40
   158a4:	adds	r0, r0, r4
   158a8:	adc	r1, r1, r5
   158ac:	ldrd	r4, [sp, #16]
   158b0:	adds	r4, r4, r0
   158b4:	adc	r5, r5, r1
   158b8:	mov	r0, r4
   158bc:	mov	r1, r5
   158c0:	ldrd	r2, [sp, #8]
   158c4:	eor	r2, r2, r4
   158c8:	eor	r3, r3, r5
   158cc:	mov	r8, r3
   158d0:	mov	r9, r2
   158d4:	ldrd	r6, [sp, #96]	; 0x60
   158d8:	adds	r6, r6, r3
   158dc:	adc	r7, r7, r2
   158e0:	ldrd	r4, [sp, #16]
   158e4:	eor	r4, r4, r6
   158e8:	eor	r5, r5, r7
   158ec:	lsr	ip, r4, #24
   158f0:	orr	r2, ip, r5, lsl #8
   158f4:	lsr	ip, r5, #24
   158f8:	orr	r3, ip, r4, lsl #8
   158fc:	add	ip, sp, #384	; 0x180
   15900:	ldrd	r4, [ip]
   15904:	adds	r4, r4, r0
   15908:	adc	r5, r5, r1
   1590c:	adds	r4, r4, r2
   15910:	adc	r5, r5, r3
   15914:	strd	r4, [sp, #64]	; 0x40
   15918:	eor	r4, r4, r8
   1591c:	eor	r5, r5, r9
   15920:	lsr	ip, r4, #16
   15924:	orr	r1, ip, r5, lsl #16
   15928:	str	r1, [sp, #8]
   1592c:	lsr	r1, r5, #16
   15930:	orr	r1, r1, r4, lsl #16
   15934:	str	r1, [sp, #12]
   15938:	ldrd	r4, [sp, #8]
   1593c:	adds	r4, r4, r6
   15940:	adc	r5, r5, r7
   15944:	mov	r8, r4
   15948:	mov	r9, r5
   1594c:	eor	r2, r2, r4
   15950:	eor	r3, r3, r5
   15954:	lsl	r1, r3, #1
   15958:	orr	r1, r1, r2, lsr #31
   1595c:	str	r1, [sp, #20]
   15960:	lsl	r2, r2, #1
   15964:	orr	r3, r2, r3, lsr #31
   15968:	str	r3, [sp, #16]
   1596c:	add	r3, sp, #280	; 0x118
   15970:	ldrd	r0, [r3]
   15974:	ldrd	r2, [sp, #80]	; 0x50
   15978:	adds	r0, r0, r2
   1597c:	adc	r1, r1, r3
   15980:	ldrd	r4, [sp, #56]	; 0x38
   15984:	adds	r2, r4, r0
   15988:	adc	r3, r5, r1
   1598c:	mov	r0, r2
   15990:	mov	r1, r3
   15994:	ldrd	r2, [sp, #24]
   15998:	eor	r2, r2, r0
   1599c:	eor	r3, r3, r1
   159a0:	str	r3, [sp, #24]
   159a4:	str	r2, [sp, #28]
   159a8:	ldrd	r6, [sp, #120]	; 0x78
   159ac:	ldrd	r2, [sp, #24]
   159b0:	adds	r6, r6, r2
   159b4:	adc	r7, r7, r3
   159b8:	mov	r2, r4
   159bc:	mov	r3, r5
   159c0:	eor	r2, r2, r6
   159c4:	eor	r3, r3, r7
   159c8:	mov	r4, r2
   159cc:	lsr	ip, r2, #24
   159d0:	orr	r2, ip, r3, lsl #8
   159d4:	lsr	ip, r3, #24
   159d8:	orr	r3, ip, r4, lsl #8
   159dc:	add	ip, sp, #344	; 0x158
   159e0:	ldrd	r4, [ip]
   159e4:	adds	r4, r4, r0
   159e8:	adc	r5, r5, r1
   159ec:	adds	r4, r4, r2
   159f0:	adc	r5, r5, r3
   159f4:	ldrd	r0, [sp, #24]
   159f8:	strd	r4, [sp, #80]	; 0x50
   159fc:	eor	r0, r0, r4
   15a00:	eor	r1, r1, r5
   15a04:	lsr	ip, r0, #16
   15a08:	orr	ip, ip, r1, lsl #16
   15a0c:	str	ip, [sp, #24]
   15a10:	lsr	r1, r1, #16
   15a14:	orr	r1, r1, r0, lsl #16
   15a18:	str	r1, [sp, #28]
   15a1c:	ldrd	r0, [sp, #24]
   15a20:	adds	r0, r0, r6
   15a24:	adc	r1, r1, r7
   15a28:	mov	r6, r0
   15a2c:	mov	r7, r1
   15a30:	eor	r2, r2, r0
   15a34:	eor	r3, r3, r1
   15a38:	lsl	r1, r3, #1
   15a3c:	orr	r5, r1, r2, lsr #31
   15a40:	lsl	r2, r2, #1
   15a44:	orr	r4, r2, r3, lsr #31
   15a48:	add	r3, sp, #368	; 0x170
   15a4c:	ldrd	r0, [r3]
   15a50:	ldrd	r2, [sp, #72]	; 0x48
   15a54:	adds	r0, r0, r2
   15a58:	adc	r1, r1, r3
   15a5c:	adds	r0, r0, r4
   15a60:	adc	r1, r1, r5
   15a64:	ldrd	r2, [sp]
   15a68:	eor	r2, r2, r0
   15a6c:	eor	r3, r3, r1
   15a70:	strd	r2, [sp, #56]	; 0x38
   15a74:	ldrd	r2, [sp, #56]	; 0x38
   15a78:	str	r3, [sp]
   15a7c:	str	r2, [sp, #4]
   15a80:	ldrd	r2, [sp]
   15a84:	adds	r2, r2, r8
   15a88:	adc	r3, r3, r9
   15a8c:	mov	r8, r2
   15a90:	mov	r9, r3
   15a94:	eor	r4, r4, r2
   15a98:	eor	r5, r5, r3
   15a9c:	lsr	ip, r4, #24
   15aa0:	orr	r2, ip, r5, lsl #8
   15aa4:	lsr	ip, r5, #24
   15aa8:	orr	r3, ip, r4, lsl #8
   15aac:	add	ip, sp, #312	; 0x138
   15ab0:	ldrd	r4, [ip]
   15ab4:	adds	r4, r4, r0
   15ab8:	adc	r5, r5, r1
   15abc:	adds	r4, r4, r2
   15ac0:	adc	r5, r5, r3
   15ac4:	ldrd	r0, [sp]
   15ac8:	strd	r4, [sp, #72]	; 0x48
   15acc:	eor	r0, r0, r4
   15ad0:	eor	r1, r1, r5
   15ad4:	lsr	ip, r0, #16
   15ad8:	orr	ip, ip, r1, lsl #16
   15adc:	str	ip, [sp]
   15ae0:	lsr	r1, r1, #16
   15ae4:	orr	r1, r1, r0, lsl #16
   15ae8:	str	r1, [sp, #4]
   15aec:	ldrd	r4, [sp]
   15af0:	adds	r4, r4, r8
   15af4:	adc	r5, r5, r9
   15af8:	strd	r4, [sp, #96]	; 0x60
   15afc:	mov	r0, r4
   15b00:	mov	r1, r5
   15b04:	eor	r0, r0, r2
   15b08:	eor	r1, r1, r3
   15b0c:	mov	r3, r1
   15b10:	lsl	r1, r1, #1
   15b14:	orr	r1, r1, r0, lsr #31
   15b18:	str	r1, [sp, #60]	; 0x3c
   15b1c:	lsl	r2, r0, #1
   15b20:	orr	r3, r2, r3, lsr #31
   15b24:	str	r3, [sp, #56]	; 0x38
   15b28:	add	r3, sp, #280	; 0x118
   15b2c:	ldrd	r8, [r3]
   15b30:	ldrd	r4, [sp, #88]	; 0x58
   15b34:	adds	r8, r8, r4
   15b38:	adc	r9, r9, r5
   15b3c:	ldrd	r2, [sp, #40]	; 0x28
   15b40:	adds	r2, r2, r8
   15b44:	adc	r3, r3, r9
   15b48:	mov	r0, r2
   15b4c:	mov	r1, r3
   15b50:	ldrd	r4, [sp, #8]
   15b54:	eor	r4, r4, r2
   15b58:	eor	r5, r5, r3
   15b5c:	mov	r8, r5
   15b60:	mov	r9, r4
   15b64:	adds	r6, r6, r5
   15b68:	adc	r7, r7, r4
   15b6c:	ldrd	r4, [sp, #40]	; 0x28
   15b70:	eor	r4, r4, r6
   15b74:	eor	r5, r5, r7
   15b78:	lsr	ip, r4, #24
   15b7c:	orr	r2, ip, r5, lsl #8
   15b80:	lsr	ip, r5, #24
   15b84:	orr	r3, ip, r4, lsl #8
   15b88:	add	ip, sp, #392	; 0x188
   15b8c:	ldrd	r4, [ip]
   15b90:	adds	r4, r4, r0
   15b94:	adc	r5, r5, r1
   15b98:	adds	r4, r4, r2
   15b9c:	adc	r5, r5, r3
   15ba0:	mov	r0, r4
   15ba4:	mov	r1, r5
   15ba8:	strd	r0, [sp, #88]	; 0x58
   15bac:	eor	r0, r0, r8
   15bb0:	eor	r1, r1, r9
   15bb4:	mov	r9, r1
   15bb8:	lsr	ip, r0, #16
   15bbc:	orr	r1, ip, r1, lsl #16
   15bc0:	str	r1, [sp, #8]
   15bc4:	lsr	r1, r9, #16
   15bc8:	orr	r1, r1, r0, lsl #16
   15bcc:	str	r1, [sp, #12]
   15bd0:	ldrd	r4, [sp, #8]
   15bd4:	adds	r4, r4, r6
   15bd8:	adc	r5, r5, r7
   15bdc:	strd	r4, [sp, #120]	; 0x78
   15be0:	mov	r0, r4
   15be4:	mov	r1, r5
   15be8:	eor	r0, r0, r2
   15bec:	eor	r1, r1, r3
   15bf0:	mov	r3, r1
   15bf4:	lsl	r1, r1, #1
   15bf8:	orr	r1, r1, r0, lsr #31
   15bfc:	str	r1, [sp, #44]	; 0x2c
   15c00:	lsl	r2, r0, #1
   15c04:	orr	r3, r2, r3, lsr #31
   15c08:	str	r3, [sp, #40]	; 0x28
   15c0c:	add	r3, sp, #384	; 0x180
   15c10:	ldrd	r8, [r3]
   15c14:	ldrd	r4, [sp, #64]	; 0x40
   15c18:	adds	r8, r8, r4
   15c1c:	adc	r9, r9, r5
   15c20:	ldrd	r4, [sp, #48]	; 0x30
   15c24:	adds	r4, r4, r8
   15c28:	adc	r5, r5, r9
   15c2c:	mov	r0, r4
   15c30:	mov	r1, r5
   15c34:	ldrd	r2, [sp, #24]
   15c38:	eor	r2, r2, r4
   15c3c:	eor	r3, r3, r5
   15c40:	mov	r8, r3
   15c44:	mov	r9, r2
   15c48:	ldrd	r6, [sp, #104]	; 0x68
   15c4c:	adds	r6, r6, r3
   15c50:	adc	r7, r7, r2
   15c54:	ldrd	r4, [sp, #48]	; 0x30
   15c58:	eor	r4, r4, r6
   15c5c:	eor	r5, r5, r7
   15c60:	lsr	ip, r4, #24
   15c64:	orr	r2, ip, r5, lsl #8
   15c68:	lsr	ip, r5, #24
   15c6c:	orr	r3, ip, r4, lsl #8
   15c70:	add	ip, sp, #376	; 0x178
   15c74:	ldrd	r4, [ip]
   15c78:	adds	r4, r4, r0
   15c7c:	adc	r5, r5, r1
   15c80:	adds	r4, r4, r2
   15c84:	adc	r5, r5, r3
   15c88:	strd	r4, [sp, #64]	; 0x40
   15c8c:	eor	r4, r4, r8
   15c90:	eor	r5, r5, r9
   15c94:	lsr	ip, r4, #16
   15c98:	orr	r1, ip, r5, lsl #16
   15c9c:	str	r1, [sp, #24]
   15ca0:	lsr	r1, r5, #16
   15ca4:	orr	r1, r1, r4, lsl #16
   15ca8:	str	r1, [sp, #28]
   15cac:	ldrd	r8, [sp, #24]
   15cb0:	adds	r8, r8, r6
   15cb4:	adc	r9, r9, r7
   15cb8:	mov	r0, r8
   15cbc:	mov	r1, r9
   15cc0:	strd	r0, [sp, #104]	; 0x68
   15cc4:	eor	r0, r0, r2
   15cc8:	eor	r1, r1, r3
   15ccc:	mov	r3, r1
   15cd0:	lsl	r1, r1, #1
   15cd4:	orr	r1, r1, r0, lsr #31
   15cd8:	str	r1, [sp, #52]	; 0x34
   15cdc:	lsl	r2, r0, #1
   15ce0:	orr	r3, r2, r3, lsr #31
   15ce4:	str	r3, [sp, #48]	; 0x30
   15ce8:	add	r3, sp, #304	; 0x130
   15cec:	ldrd	r0, [r3]
   15cf0:	ldrd	r6, [sp, #80]	; 0x50
   15cf4:	adds	r0, r0, r6
   15cf8:	adc	r1, r1, r7
   15cfc:	ldrd	r4, [sp, #16]
   15d00:	adds	r4, r4, r0
   15d04:	adc	r5, r5, r1
   15d08:	mov	r0, r4
   15d0c:	mov	r1, r5
   15d10:	ldrd	r2, [sp, #32]
   15d14:	eor	r2, r2, r4
   15d18:	eor	r3, r3, r5
   15d1c:	mov	r4, r3
   15d20:	mov	r5, r2
   15d24:	ldrd	r6, [sp, #112]	; 0x70
   15d28:	mov	r8, r3
   15d2c:	mov	r9, r2
   15d30:	adds	r6, r6, r4
   15d34:	adc	r7, r7, r5
   15d38:	ldrd	r4, [sp, #16]
   15d3c:	eor	r4, r4, r6
   15d40:	eor	r5, r5, r7
   15d44:	lsr	ip, r4, #24
   15d48:	orr	r2, ip, r5, lsl #8
   15d4c:	lsr	ip, r5, #24
   15d50:	orr	r3, ip, r4, lsl #8
   15d54:	add	ip, sp, #352	; 0x160
   15d58:	ldrd	r4, [ip]
   15d5c:	adds	r4, r4, r0
   15d60:	adc	r5, r5, r1
   15d64:	adds	r4, r4, r2
   15d68:	adc	r5, r5, r3
   15d6c:	mov	r0, r8
   15d70:	mov	r1, r9
   15d74:	strd	r4, [sp, #80]	; 0x50
   15d78:	eor	r0, r0, r4
   15d7c:	eor	r1, r1, r5
   15d80:	lsr	ip, r0, #16
   15d84:	orr	r4, ip, r1, lsl #16
   15d88:	lsr	r1, r1, #16
   15d8c:	orr	r5, r1, r0, lsl #16
   15d90:	adds	r6, r6, r4
   15d94:	adc	r7, r7, r5
   15d98:	eor	r2, r2, r6
   15d9c:	eor	r3, r3, r7
   15da0:	lsl	r1, r3, #1
   15da4:	orr	r1, r1, r2, lsr #31
   15da8:	str	r1, [sp, #20]
   15dac:	lsl	r2, r2, #1
   15db0:	orr	r3, r2, r3, lsr #31
   15db4:	str	r3, [sp, #16]
   15db8:	add	r3, sp, #272	; 0x110
   15dbc:	ldrd	r0, [r3]
   15dc0:	ldrd	r2, [sp, #72]	; 0x48
   15dc4:	adds	r0, r0, r2
   15dc8:	adc	r1, r1, r3
   15dcc:	ldrd	r2, [sp, #40]	; 0x28
   15dd0:	adds	r2, r2, r0
   15dd4:	adc	r3, r3, r1
   15dd8:	mov	r0, r2
   15ddc:	mov	r1, r3
   15de0:	eor	r4, r4, r2
   15de4:	eor	r5, r5, r3
   15de8:	str	r5, [sp, #32]
   15dec:	str	r4, [sp, #36]	; 0x24
   15df0:	ldrd	r4, [sp, #32]
   15df4:	ldrd	r2, [sp, #104]	; 0x68
   15df8:	adds	r2, r2, r4
   15dfc:	adc	r3, r3, r5
   15e00:	mov	r8, r2
   15e04:	mov	r9, r3
   15e08:	ldrd	r4, [sp, #40]	; 0x28
   15e0c:	eor	r4, r4, r2
   15e10:	eor	r5, r5, r3
   15e14:	lsr	ip, r4, #24
   15e18:	orr	r2, ip, r5, lsl #8
   15e1c:	lsr	ip, r5, #24
   15e20:	orr	r3, ip, r4, lsl #8
   15e24:	add	ip, sp, #328	; 0x148
   15e28:	ldrd	r4, [ip]
   15e2c:	adds	r4, r4, r0
   15e30:	adc	r5, r5, r1
   15e34:	adds	r4, r4, r2
   15e38:	adc	r5, r5, r3
   15e3c:	ldrd	r0, [sp, #32]
   15e40:	strd	r4, [sp, #72]	; 0x48
   15e44:	eor	r0, r0, r4
   15e48:	eor	r1, r1, r5
   15e4c:	lsr	ip, r0, #16
   15e50:	orr	ip, ip, r1, lsl #16
   15e54:	str	ip, [sp, #32]
   15e58:	lsr	r1, r1, #16
   15e5c:	orr	r1, r1, r0, lsl #16
   15e60:	str	r1, [sp, #36]	; 0x24
   15e64:	ldrd	r0, [sp, #32]
   15e68:	adds	r0, r0, r8
   15e6c:	adc	r1, r1, r9
   15e70:	mov	r8, r0
   15e74:	mov	r9, r1
   15e78:	strd	r8, [sp, #104]	; 0x68
   15e7c:	eor	r8, r8, r2
   15e80:	eor	r9, r9, r3
   15e84:	lsl	r1, r9, #1
   15e88:	orr	r1, r1, r8, lsr #31
   15e8c:	str	r1, [sp, #44]	; 0x2c
   15e90:	lsl	r2, r8, #1
   15e94:	orr	r3, r2, r9, lsr #31
   15e98:	str	r3, [sp, #40]	; 0x28
   15e9c:	add	r3, sp, #320	; 0x140
   15ea0:	ldrd	r8, [r3]
   15ea4:	ldrd	r4, [sp, #88]	; 0x58
   15ea8:	adds	r8, r8, r4
   15eac:	adc	r9, r9, r5
   15eb0:	ldrd	r4, [sp, #48]	; 0x30
   15eb4:	adds	r4, r4, r8
   15eb8:	adc	r5, r5, r9
   15ebc:	mov	r0, r4
   15ec0:	mov	r1, r5
   15ec4:	ldrd	r2, [sp]
   15ec8:	eor	r2, r2, r4
   15ecc:	eor	r3, r3, r5
   15ed0:	mov	r8, r3
   15ed4:	mov	r9, r2
   15ed8:	adds	r6, r6, r3
   15edc:	adc	r7, r7, r2
   15ee0:	ldrd	r4, [sp, #48]	; 0x30
   15ee4:	eor	r4, r4, r6
   15ee8:	eor	r5, r5, r7
   15eec:	lsr	ip, r4, #24
   15ef0:	orr	r2, ip, r5, lsl #8
   15ef4:	lsr	ip, r5, #24
   15ef8:	orr	r3, ip, r4, lsl #8
   15efc:	add	ip, sp, #296	; 0x128
   15f00:	ldrd	r4, [ip]
   15f04:	adds	r4, r4, r0
   15f08:	adc	r5, r5, r1
   15f0c:	adds	r4, r4, r2
   15f10:	adc	r5, r5, r3
   15f14:	mov	r0, r4
   15f18:	mov	r1, r5
   15f1c:	strd	r0, [sp, #88]	; 0x58
   15f20:	eor	r0, r0, r8
   15f24:	eor	r1, r1, r9
   15f28:	mov	r9, r1
   15f2c:	lsr	ip, r0, #16
   15f30:	orr	r1, ip, r1, lsl #16
   15f34:	str	r1, [sp]
   15f38:	lsr	r1, r9, #16
   15f3c:	orr	r1, r1, r0, lsl #16
   15f40:	str	r1, [sp, #4]
   15f44:	ldrd	r4, [sp]
   15f48:	adds	r4, r4, r6
   15f4c:	adc	r5, r5, r7
   15f50:	strd	r4, [sp, #112]	; 0x70
   15f54:	mov	r8, r4
   15f58:	mov	r9, r5
   15f5c:	eor	r8, r8, r2
   15f60:	eor	r9, r9, r3
   15f64:	lsl	r1, r9, #1
   15f68:	orr	r1, r1, r8, lsr #31
   15f6c:	str	r1, [sp, #52]	; 0x34
   15f70:	lsl	r2, r8, #1
   15f74:	orr	r3, r2, r9, lsr #31
   15f78:	str	r3, [sp, #48]	; 0x30
   15f7c:	add	r3, sp, #344	; 0x158
   15f80:	ldrd	r0, [r3]
   15f84:	ldrd	r4, [sp, #64]	; 0x40
   15f88:	adds	r0, r0, r4
   15f8c:	adc	r1, r1, r5
   15f90:	ldrd	r4, [sp, #16]
   15f94:	adds	r4, r4, r0
   15f98:	adc	r5, r5, r1
   15f9c:	mov	r0, r4
   15fa0:	mov	r1, r5
   15fa4:	ldrd	r2, [sp, #8]
   15fa8:	eor	r2, r2, r4
   15fac:	eor	r3, r3, r5
   15fb0:	mov	r8, r3
   15fb4:	mov	r9, r2
   15fb8:	ldrd	r6, [sp, #96]	; 0x60
   15fbc:	adds	r6, r6, r3
   15fc0:	adc	r7, r7, r2
   15fc4:	ldrd	r4, [sp, #16]
   15fc8:	eor	r4, r4, r6
   15fcc:	eor	r5, r5, r7
   15fd0:	lsr	ip, r4, #24
   15fd4:	orr	r2, ip, r5, lsl #8
   15fd8:	lsr	ip, r5, #24
   15fdc:	orr	r3, ip, r4, lsl #8
   15fe0:	add	ip, sp, #288	; 0x120
   15fe4:	ldrd	r4, [ip]
   15fe8:	adds	r4, r4, r0
   15fec:	adc	r5, r5, r1
   15ff0:	adds	r4, r4, r2
   15ff4:	adc	r5, r5, r3
   15ff8:	strd	r4, [sp, #64]	; 0x40
   15ffc:	eor	r4, r4, r8
   16000:	eor	r5, r5, r9
   16004:	lsr	ip, r4, #16
   16008:	orr	r1, ip, r5, lsl #16
   1600c:	str	r1, [sp, #8]
   16010:	lsr	r1, r5, #16
   16014:	orr	r1, r1, r4, lsl #16
   16018:	str	r1, [sp, #12]
   1601c:	ldrd	r4, [sp, #8]
   16020:	adds	r4, r4, r6
   16024:	adc	r5, r5, r7
   16028:	mov	r8, r4
   1602c:	mov	r9, r5
   16030:	eor	r2, r2, r4
   16034:	eor	r3, r3, r5
   16038:	lsl	r1, r3, #1
   1603c:	orr	r1, r1, r2, lsr #31
   16040:	str	r1, [sp, #20]
   16044:	lsl	r2, r2, #1
   16048:	orr	r3, r2, r3, lsr #31
   1604c:	str	r3, [sp, #16]
   16050:	add	r3, sp, #336	; 0x150
   16054:	ldrd	r0, [r3]
   16058:	ldrd	r2, [sp, #80]	; 0x50
   1605c:	adds	r0, r0, r2
   16060:	adc	r1, r1, r3
   16064:	ldrd	r4, [sp, #56]	; 0x38
   16068:	adds	r2, r4, r0
   1606c:	adc	r3, r5, r1
   16070:	mov	r0, r2
   16074:	mov	r1, r3
   16078:	ldrd	r2, [sp, #24]
   1607c:	eor	r2, r2, r0
   16080:	eor	r3, r3, r1
   16084:	str	r3, [sp, #24]
   16088:	str	r2, [sp, #28]
   1608c:	ldrd	r6, [sp, #120]	; 0x78
   16090:	ldrd	r2, [sp, #24]
   16094:	adds	r6, r6, r2
   16098:	adc	r7, r7, r3
   1609c:	mov	r2, r4
   160a0:	mov	r3, r5
   160a4:	eor	r2, r2, r6
   160a8:	eor	r3, r3, r7
   160ac:	mov	r4, r2
   160b0:	lsr	ip, r2, #24
   160b4:	orr	r2, ip, r3, lsl #8
   160b8:	lsr	ip, r3, #24
   160bc:	orr	r3, ip, r4, lsl #8
   160c0:	add	ip, sp, #360	; 0x168
   160c4:	ldrd	r4, [ip]
   160c8:	adds	r4, r4, r0
   160cc:	adc	r5, r5, r1
   160d0:	adds	r4, r4, r2
   160d4:	adc	r5, r5, r3
   160d8:	ldrd	r0, [sp, #24]
   160dc:	strd	r4, [sp, #80]	; 0x50
   160e0:	eor	r0, r0, r4
   160e4:	eor	r1, r1, r5
   160e8:	lsr	ip, r0, #16
   160ec:	orr	ip, ip, r1, lsl #16
   160f0:	str	ip, [sp, #24]
   160f4:	lsr	r1, r1, #16
   160f8:	orr	r1, r1, r0, lsl #16
   160fc:	str	r1, [sp, #28]
   16100:	ldrd	r0, [sp, #24]
   16104:	adds	r0, r0, r6
   16108:	adc	r1, r1, r7
   1610c:	mov	r6, r0
   16110:	mov	r7, r1
   16114:	eor	r2, r2, r0
   16118:	eor	r3, r3, r1
   1611c:	lsl	r1, r3, #1
   16120:	orr	r5, r1, r2, lsr #31
   16124:	lsl	r2, r2, #1
   16128:	orr	r4, r2, r3, lsr #31
   1612c:	add	r3, sp, #376	; 0x178
   16130:	ldrd	r0, [r3]
   16134:	ldrd	r2, [sp, #72]	; 0x48
   16138:	adds	r0, r0, r2
   1613c:	adc	r1, r1, r3
   16140:	adds	r0, r0, r4
   16144:	adc	r1, r1, r5
   16148:	ldrd	r2, [sp]
   1614c:	eor	r2, r2, r0
   16150:	eor	r3, r3, r1
   16154:	strd	r2, [sp, #56]	; 0x38
   16158:	ldrd	r2, [sp, #56]	; 0x38
   1615c:	str	r3, [sp]
   16160:	str	r2, [sp, #4]
   16164:	ldrd	r2, [sp]
   16168:	adds	r2, r2, r8
   1616c:	adc	r3, r3, r9
   16170:	mov	r8, r2
   16174:	mov	r9, r3
   16178:	eor	r4, r4, r2
   1617c:	eor	r5, r5, r3
   16180:	lsr	ip, r4, #24
   16184:	orr	r2, ip, r5, lsl #8
   16188:	lsr	ip, r5, #24
   1618c:	orr	r3, ip, r4, lsl #8
   16190:	add	ip, sp, #360	; 0x168
   16194:	ldrd	r4, [ip]
   16198:	adds	r4, r4, r0
   1619c:	adc	r5, r5, r1
   161a0:	adds	r4, r4, r2
   161a4:	adc	r5, r5, r3
   161a8:	ldrd	r0, [sp]
   161ac:	strd	r4, [sp, #72]	; 0x48
   161b0:	eor	r0, r0, r4
   161b4:	eor	r1, r1, r5
   161b8:	lsr	ip, r0, #16
   161bc:	orr	ip, ip, r1, lsl #16
   161c0:	str	ip, [sp]
   161c4:	lsr	r1, r1, #16
   161c8:	orr	r1, r1, r0, lsl #16
   161cc:	str	r1, [sp, #4]
   161d0:	ldrd	r4, [sp]
   161d4:	adds	r4, r4, r8
   161d8:	adc	r5, r5, r9
   161dc:	strd	r4, [sp, #96]	; 0x60
   161e0:	mov	r0, r4
   161e4:	mov	r1, r5
   161e8:	eor	r0, r0, r2
   161ec:	eor	r1, r1, r3
   161f0:	mov	r3, r1
   161f4:	lsl	r1, r1, #1
   161f8:	orr	r1, r1, r0, lsr #31
   161fc:	str	r1, [sp, #60]	; 0x3c
   16200:	lsl	r2, r0, #1
   16204:	orr	r3, r2, r3, lsr #31
   16208:	str	r3, [sp, #56]	; 0x38
   1620c:	add	r3, sp, #328	; 0x148
   16210:	ldrd	r8, [r3]
   16214:	ldrd	r4, [sp, #88]	; 0x58
   16218:	adds	r8, r8, r4
   1621c:	adc	r9, r9, r5
   16220:	ldrd	r2, [sp, #40]	; 0x28
   16224:	adds	r2, r2, r8
   16228:	adc	r3, r3, r9
   1622c:	mov	r0, r2
   16230:	mov	r1, r3
   16234:	ldrd	r4, [sp, #8]
   16238:	eor	r4, r4, r2
   1623c:	eor	r5, r5, r3
   16240:	mov	r8, r5
   16244:	mov	r9, r4
   16248:	adds	r6, r6, r5
   1624c:	adc	r7, r7, r4
   16250:	ldrd	r4, [sp, #40]	; 0x28
   16254:	eor	r4, r4, r6
   16258:	eor	r5, r5, r7
   1625c:	lsr	ip, r4, #24
   16260:	orr	r2, ip, r5, lsl #8
   16264:	lsr	ip, r5, #24
   16268:	orr	r3, ip, r4, lsl #8
   1626c:	add	ip, sp, #384	; 0x180
   16270:	ldrd	r4, [ip]
   16274:	adds	r4, r4, r0
   16278:	adc	r5, r5, r1
   1627c:	adds	r4, r4, r2
   16280:	adc	r5, r5, r3
   16284:	mov	r0, r4
   16288:	mov	r1, r5
   1628c:	strd	r0, [sp, #88]	; 0x58
   16290:	eor	r0, r0, r8
   16294:	eor	r1, r1, r9
   16298:	mov	r9, r1
   1629c:	lsr	ip, r0, #16
   162a0:	orr	r1, ip, r1, lsl #16
   162a4:	str	r1, [sp, #8]
   162a8:	lsr	r1, r9, #16
   162ac:	orr	r1, r1, r0, lsl #16
   162b0:	str	r1, [sp, #12]
   162b4:	ldrd	r4, [sp, #8]
   162b8:	adds	r4, r4, r6
   162bc:	adc	r5, r5, r7
   162c0:	strd	r4, [sp, #120]	; 0x78
   162c4:	mov	r0, r4
   162c8:	mov	r1, r5
   162cc:	eor	r0, r0, r2
   162d0:	eor	r1, r1, r3
   162d4:	mov	r3, r1
   162d8:	lsl	r1, r1, #1
   162dc:	orr	r1, r1, r0, lsr #31
   162e0:	str	r1, [sp, #44]	; 0x2c
   162e4:	lsl	r2, r0, #1
   162e8:	orr	r3, r2, r3, lsr #31
   162ec:	str	r3, [sp, #40]	; 0x28
   162f0:	add	r3, sp, #368	; 0x170
   162f4:	ldrd	r8, [r3]
   162f8:	ldrd	r4, [sp, #64]	; 0x40
   162fc:	adds	r8, r8, r4
   16300:	adc	r9, r9, r5
   16304:	ldrd	r4, [sp, #48]	; 0x30
   16308:	adds	r4, r4, r8
   1630c:	adc	r5, r5, r9
   16310:	mov	r0, r4
   16314:	mov	r1, r5
   16318:	ldrd	r2, [sp, #24]
   1631c:	eor	r2, r2, r4
   16320:	eor	r3, r3, r5
   16324:	mov	r8, r3
   16328:	mov	r9, r2
   1632c:	ldrd	r6, [sp, #104]	; 0x68
   16330:	adds	r6, r6, r3
   16334:	adc	r7, r7, r2
   16338:	ldrd	r4, [sp, #48]	; 0x30
   1633c:	eor	r4, r4, r6
   16340:	eor	r5, r5, r7
   16344:	lsr	ip, r4, #24
   16348:	orr	r2, ip, r5, lsl #8
   1634c:	lsr	ip, r5, #24
   16350:	orr	r3, ip, r4, lsl #8
   16354:	add	ip, sp, #280	; 0x118
   16358:	ldrd	r4, [ip]
   1635c:	adds	r4, r4, r0
   16360:	adc	r5, r5, r1
   16364:	adds	r4, r4, r2
   16368:	adc	r5, r5, r3
   1636c:	strd	r4, [sp, #64]	; 0x40
   16370:	eor	r4, r4, r8
   16374:	eor	r5, r5, r9
   16378:	lsr	ip, r4, #16
   1637c:	orr	r1, ip, r5, lsl #16
   16380:	str	r1, [sp, #24]
   16384:	lsr	r1, r5, #16
   16388:	orr	r1, r1, r4, lsl #16
   1638c:	str	r1, [sp, #28]
   16390:	ldrd	r8, [sp, #24]
   16394:	adds	r8, r8, r6
   16398:	adc	r9, r9, r7
   1639c:	mov	r0, r8
   163a0:	mov	r1, r9
   163a4:	strd	r0, [sp, #104]	; 0x68
   163a8:	eor	r0, r0, r2
   163ac:	eor	r1, r1, r3
   163b0:	mov	r3, r1
   163b4:	lsl	r1, r1, #1
   163b8:	orr	r1, r1, r0, lsr #31
   163bc:	str	r1, [sp, #52]	; 0x34
   163c0:	lsl	r2, r0, #1
   163c4:	orr	r3, r2, r3, lsr #31
   163c8:	str	r3, [sp, #48]	; 0x30
   163cc:	add	r3, sp, #296	; 0x128
   163d0:	ldrd	r0, [r3]
   163d4:	ldrd	r6, [sp, #80]	; 0x50
   163d8:	adds	r0, r0, r6
   163dc:	adc	r1, r1, r7
   163e0:	ldrd	r4, [sp, #16]
   163e4:	adds	r4, r4, r0
   163e8:	adc	r5, r5, r1
   163ec:	mov	r0, r4
   163f0:	mov	r1, r5
   163f4:	ldrd	r2, [sp, #32]
   163f8:	eor	r2, r2, r4
   163fc:	eor	r3, r3, r5
   16400:	mov	r4, r3
   16404:	mov	r5, r2
   16408:	ldrd	r6, [sp, #112]	; 0x70
   1640c:	mov	r8, r3
   16410:	mov	r9, r2
   16414:	adds	r6, r6, r4
   16418:	adc	r7, r7, r5
   1641c:	ldrd	r4, [sp, #16]
   16420:	eor	r4, r4, r6
   16424:	eor	r5, r5, r7
   16428:	lsr	ip, r4, #24
   1642c:	orr	r2, ip, r5, lsl #8
   16430:	lsr	ip, r5, #24
   16434:	orr	r3, ip, r4, lsl #8
   16438:	add	ip, sp, #344	; 0x158
   1643c:	ldrd	r4, [ip]
   16440:	adds	r4, r4, r0
   16444:	adc	r5, r5, r1
   16448:	adds	r4, r4, r2
   1644c:	adc	r5, r5, r3
   16450:	mov	r0, r8
   16454:	mov	r1, r9
   16458:	strd	r4, [sp, #80]	; 0x50
   1645c:	eor	r0, r0, r4
   16460:	eor	r1, r1, r5
   16464:	lsr	ip, r0, #16
   16468:	orr	r4, ip, r1, lsl #16
   1646c:	lsr	r1, r1, #16
   16470:	orr	r5, r1, r0, lsl #16
   16474:	adds	r6, r6, r4
   16478:	adc	r7, r7, r5
   1647c:	eor	r2, r2, r6
   16480:	eor	r3, r3, r7
   16484:	lsl	r1, r3, #1
   16488:	orr	r1, r1, r2, lsr #31
   1648c:	str	r1, [sp, #20]
   16490:	lsl	r2, r2, #1
   16494:	orr	r3, r2, r3, lsr #31
   16498:	str	r3, [sp, #16]
   1649c:	add	r3, sp, #312	; 0x138
   164a0:	ldrd	r0, [r3]
   164a4:	ldrd	r2, [sp, #72]	; 0x48
   164a8:	adds	r0, r0, r2
   164ac:	adc	r1, r1, r3
   164b0:	ldrd	r2, [sp, #40]	; 0x28
   164b4:	adds	r2, r2, r0
   164b8:	adc	r3, r3, r1
   164bc:	mov	r0, r2
   164c0:	mov	r1, r3
   164c4:	eor	r4, r4, r2
   164c8:	eor	r5, r5, r3
   164cc:	str	r5, [sp, #32]
   164d0:	str	r4, [sp, #36]	; 0x24
   164d4:	ldrd	r4, [sp, #32]
   164d8:	ldrd	r2, [sp, #104]	; 0x68
   164dc:	adds	r2, r2, r4
   164e0:	adc	r3, r3, r5
   164e4:	mov	r8, r2
   164e8:	mov	r9, r3
   164ec:	ldrd	r4, [sp, #40]	; 0x28
   164f0:	eor	r4, r4, r2
   164f4:	eor	r5, r5, r3
   164f8:	lsr	ip, r4, #24
   164fc:	orr	r2, ip, r5, lsl #8
   16500:	lsr	ip, r5, #24
   16504:	orr	r3, ip, r4, lsl #8
   16508:	add	ip, sp, #272	; 0x110
   1650c:	ldrd	r4, [ip]
   16510:	adds	r4, r4, r0
   16514:	adc	r5, r5, r1
   16518:	adds	r4, r4, r2
   1651c:	adc	r5, r5, r3
   16520:	ldrd	r0, [sp, #32]
   16524:	strd	r4, [sp, #72]	; 0x48
   16528:	eor	r0, r0, r4
   1652c:	eor	r1, r1, r5
   16530:	lsr	ip, r0, #16
   16534:	orr	ip, ip, r1, lsl #16
   16538:	str	ip, [sp, #32]
   1653c:	lsr	r1, r1, #16
   16540:	orr	r1, r1, r0, lsl #16
   16544:	str	r1, [sp, #36]	; 0x24
   16548:	ldrd	r0, [sp, #32]
   1654c:	adds	r0, r0, r8
   16550:	adc	r1, r1, r9
   16554:	mov	r8, r0
   16558:	mov	r9, r1
   1655c:	strd	r8, [sp, #104]	; 0x68
   16560:	eor	r8, r8, r2
   16564:	eor	r9, r9, r3
   16568:	lsl	r1, r9, #1
   1656c:	orr	r1, r1, r8, lsr #31
   16570:	str	r1, [sp, #44]	; 0x2c
   16574:	lsl	r2, r8, #1
   16578:	orr	r3, r2, r9, lsr #31
   1657c:	str	r3, [sp, #40]	; 0x28
   16580:	add	r3, sp, #392	; 0x188
   16584:	ldrd	r8, [r3]
   16588:	ldrd	r4, [sp, #88]	; 0x58
   1658c:	adds	r8, r8, r4
   16590:	adc	r9, r9, r5
   16594:	ldrd	r4, [sp, #48]	; 0x30
   16598:	adds	r4, r4, r8
   1659c:	adc	r5, r5, r9
   165a0:	mov	r0, r4
   165a4:	mov	r1, r5
   165a8:	ldrd	r2, [sp]
   165ac:	eor	r2, r2, r4
   165b0:	eor	r3, r3, r5
   165b4:	mov	r8, r3
   165b8:	mov	r9, r2
   165bc:	adds	r6, r6, r3
   165c0:	adc	r7, r7, r2
   165c4:	ldrd	r4, [sp, #48]	; 0x30
   165c8:	eor	r4, r4, r6
   165cc:	eor	r5, r5, r7
   165d0:	lsr	ip, r4, #24
   165d4:	orr	r2, ip, r5, lsl #8
   165d8:	lsr	ip, r5, #24
   165dc:	orr	r3, ip, r4, lsl #8
   165e0:	add	ip, sp, #304	; 0x130
   165e4:	ldrd	r4, [ip]
   165e8:	adds	r4, r4, r0
   165ec:	adc	r5, r5, r1
   165f0:	adds	r4, r4, r2
   165f4:	adc	r5, r5, r3
   165f8:	mov	r0, r4
   165fc:	mov	r1, r5
   16600:	strd	r0, [sp, #88]	; 0x58
   16604:	eor	r0, r0, r8
   16608:	eor	r1, r1, r9
   1660c:	mov	r9, r1
   16610:	lsr	ip, r0, #16
   16614:	orr	r1, ip, r1, lsl #16
   16618:	str	r1, [sp]
   1661c:	lsr	r1, r9, #16
   16620:	orr	r1, r1, r0, lsl #16
   16624:	str	r1, [sp, #4]
   16628:	ldrd	r4, [sp]
   1662c:	adds	r4, r4, r6
   16630:	adc	r5, r5, r7
   16634:	strd	r4, [sp, #112]	; 0x70
   16638:	mov	r8, r4
   1663c:	mov	r9, r5
   16640:	eor	r8, r8, r2
   16644:	eor	r9, r9, r3
   16648:	lsl	r1, r9, #1
   1664c:	orr	r1, r1, r8, lsr #31
   16650:	str	r1, [sp, #52]	; 0x34
   16654:	lsl	r2, r8, #1
   16658:	orr	r3, r2, r9, lsr #31
   1665c:	str	r3, [sp, #48]	; 0x30
   16660:	add	r3, sp, #336	; 0x150
   16664:	ldrd	r0, [r3]
   16668:	ldrd	r4, [sp, #64]	; 0x40
   1666c:	adds	r0, r0, r4
   16670:	adc	r1, r1, r5
   16674:	ldrd	r4, [sp, #16]
   16678:	adds	r4, r4, r0
   1667c:	adc	r5, r5, r1
   16680:	mov	r0, r4
   16684:	mov	r1, r5
   16688:	ldrd	r2, [sp, #8]
   1668c:	eor	r2, r2, r4
   16690:	eor	r3, r3, r5
   16694:	mov	r8, r3
   16698:	mov	r9, r2
   1669c:	ldrd	r6, [sp, #96]	; 0x60
   166a0:	adds	r6, r6, r3
   166a4:	adc	r7, r7, r2
   166a8:	ldrd	r4, [sp, #16]
   166ac:	eor	r4, r4, r6
   166b0:	eor	r5, r5, r7
   166b4:	lsr	ip, r4, #24
   166b8:	orr	r2, ip, r5, lsl #8
   166bc:	lsr	ip, r5, #24
   166c0:	orr	r3, ip, r4, lsl #8
   166c4:	add	ip, sp, #320	; 0x140
   166c8:	ldrd	r4, [ip]
   166cc:	adds	r4, r4, r0
   166d0:	adc	r5, r5, r1
   166d4:	adds	r4, r4, r2
   166d8:	adc	r5, r5, r3
   166dc:	strd	r4, [sp, #64]	; 0x40
   166e0:	eor	r4, r4, r8
   166e4:	eor	r5, r5, r9
   166e8:	lsr	ip, r4, #16
   166ec:	orr	r1, ip, r5, lsl #16
   166f0:	str	r1, [sp, #8]
   166f4:	lsr	r1, r5, #16
   166f8:	orr	r1, r1, r4, lsl #16
   166fc:	str	r1, [sp, #12]
   16700:	ldrd	r4, [sp, #8]
   16704:	adds	r4, r4, r6
   16708:	adc	r5, r5, r7
   1670c:	mov	r8, r4
   16710:	mov	r9, r5
   16714:	eor	r2, r2, r4
   16718:	eor	r3, r3, r5
   1671c:	lsl	r1, r3, #1
   16720:	orr	r1, r1, r2, lsr #31
   16724:	str	r1, [sp, #20]
   16728:	lsl	r2, r2, #1
   1672c:	orr	r3, r2, r3, lsr #31
   16730:	str	r3, [sp, #16]
   16734:	add	r3, sp, #288	; 0x120
   16738:	ldrd	r0, [r3]
   1673c:	ldrd	r2, [sp, #80]	; 0x50
   16740:	adds	r0, r0, r2
   16744:	adc	r1, r1, r3
   16748:	ldrd	r4, [sp, #56]	; 0x38
   1674c:	adds	r2, r4, r0
   16750:	adc	r3, r5, r1
   16754:	mov	r0, r2
   16758:	mov	r1, r3
   1675c:	ldrd	r2, [sp, #24]
   16760:	eor	r2, r2, r0
   16764:	eor	r3, r3, r1
   16768:	str	r3, [sp, #24]
   1676c:	str	r2, [sp, #28]
   16770:	ldrd	r6, [sp, #120]	; 0x78
   16774:	ldrd	r2, [sp, #24]
   16778:	adds	r6, r6, r2
   1677c:	adc	r7, r7, r3
   16780:	mov	r2, r4
   16784:	mov	r3, r5
   16788:	eor	r2, r2, r6
   1678c:	eor	r3, r3, r7
   16790:	mov	r4, r2
   16794:	lsr	ip, r2, #24
   16798:	orr	r2, ip, r3, lsl #8
   1679c:	lsr	ip, r3, #24
   167a0:	orr	r3, ip, r4, lsl #8
   167a4:	add	ip, sp, #352	; 0x160
   167a8:	ldrd	r4, [ip]
   167ac:	adds	r4, r4, r0
   167b0:	adc	r5, r5, r1
   167b4:	adds	r4, r4, r2
   167b8:	adc	r5, r5, r3
   167bc:	ldrd	r0, [sp, #24]
   167c0:	strd	r4, [sp, #80]	; 0x50
   167c4:	eor	r0, r0, r4
   167c8:	eor	r1, r1, r5
   167cc:	lsr	ip, r0, #16
   167d0:	orr	ip, ip, r1, lsl #16
   167d4:	str	ip, [sp, #24]
   167d8:	lsr	r1, r1, #16
   167dc:	orr	r1, r1, r0, lsl #16
   167e0:	str	r1, [sp, #28]
   167e4:	ldrd	r0, [sp, #24]
   167e8:	adds	r0, r0, r6
   167ec:	adc	r1, r1, r7
   167f0:	mov	r6, r0
   167f4:	mov	r7, r1
   167f8:	eor	r2, r2, r0
   167fc:	eor	r3, r3, r1
   16800:	lsl	r1, r3, #1
   16804:	orr	r5, r1, r2, lsr #31
   16808:	lsl	r2, r2, #1
   1680c:	orr	r4, r2, r3, lsr #31
   16810:	add	r3, sp, #320	; 0x140
   16814:	ldrd	r0, [r3]
   16818:	ldrd	r2, [sp, #72]	; 0x48
   1681c:	adds	r0, r0, r2
   16820:	adc	r1, r1, r3
   16824:	adds	r0, r0, r4
   16828:	adc	r1, r1, r5
   1682c:	ldrd	r2, [sp]
   16830:	eor	r2, r2, r0
   16834:	eor	r3, r3, r1
   16838:	strd	r2, [sp, #56]	; 0x38
   1683c:	ldrd	r2, [sp, #56]	; 0x38
   16840:	str	r3, [sp]
   16844:	str	r2, [sp, #4]
   16848:	ldrd	r2, [sp]
   1684c:	adds	r2, r2, r8
   16850:	adc	r3, r3, r9
   16854:	mov	r8, r2
   16858:	mov	r9, r3
   1685c:	eor	r4, r4, r2
   16860:	eor	r5, r5, r3
   16864:	lsr	ip, r4, #24
   16868:	orr	r2, ip, r5, lsl #8
   1686c:	lsr	ip, r5, #24
   16870:	orr	r3, ip, r4, lsl #8
   16874:	add	ip, sp, #392	; 0x188
   16878:	ldrd	r4, [ip]
   1687c:	adds	r4, r4, r0
   16880:	adc	r5, r5, r1
   16884:	adds	r4, r4, r2
   16888:	adc	r5, r5, r3
   1688c:	ldrd	r0, [sp]
   16890:	strd	r4, [sp, #72]	; 0x48
   16894:	eor	r0, r0, r4
   16898:	eor	r1, r1, r5
   1689c:	lsr	ip, r0, #16
   168a0:	orr	ip, ip, r1, lsl #16
   168a4:	str	ip, [sp]
   168a8:	lsr	r1, r1, #16
   168ac:	orr	r1, r1, r0, lsl #16
   168b0:	str	r1, [sp, #4]
   168b4:	ldrd	r4, [sp]
   168b8:	adds	r4, r4, r8
   168bc:	adc	r5, r5, r9
   168c0:	strd	r4, [sp, #96]	; 0x60
   168c4:	mov	r0, r4
   168c8:	mov	r1, r5
   168cc:	eor	r0, r0, r2
   168d0:	eor	r1, r1, r3
   168d4:	mov	r3, r1
   168d8:	lsl	r1, r1, #1
   168dc:	orr	r1, r1, r0, lsr #31
   168e0:	str	r1, [sp, #60]	; 0x3c
   168e4:	lsl	r2, r0, #1
   168e8:	orr	r3, r2, r3, lsr #31
   168ec:	str	r3, [sp, #56]	; 0x38
   168f0:	add	r3, sp, #384	; 0x180
   168f4:	ldrd	r8, [r3]
   168f8:	ldrd	r4, [sp, #88]	; 0x58
   168fc:	adds	r8, r8, r4
   16900:	adc	r9, r9, r5
   16904:	ldrd	r2, [sp, #40]	; 0x28
   16908:	adds	r2, r2, r8
   1690c:	adc	r3, r3, r9
   16910:	mov	r0, r2
   16914:	mov	r1, r3
   16918:	ldrd	r4, [sp, #8]
   1691c:	eor	r4, r4, r2
   16920:	eor	r5, r5, r3
   16924:	mov	r8, r5
   16928:	mov	r9, r4
   1692c:	adds	r6, r6, r5
   16930:	adc	r7, r7, r4
   16934:	ldrd	r4, [sp, #40]	; 0x28
   16938:	eor	r4, r4, r6
   1693c:	eor	r5, r5, r7
   16940:	lsr	ip, r4, #24
   16944:	orr	r2, ip, r5, lsl #8
   16948:	lsr	ip, r5, #24
   1694c:	orr	r3, ip, r4, lsl #8
   16950:	add	ip, sp, #344	; 0x158
   16954:	ldrd	r4, [ip]
   16958:	adds	r4, r4, r0
   1695c:	adc	r5, r5, r1
   16960:	adds	r4, r4, r2
   16964:	adc	r5, r5, r3
   16968:	mov	r0, r4
   1696c:	mov	r1, r5
   16970:	strd	r0, [sp, #88]	; 0x58
   16974:	eor	r0, r0, r8
   16978:	eor	r1, r1, r9
   1697c:	mov	r9, r1
   16980:	lsr	ip, r0, #16
   16984:	orr	r1, ip, r1, lsl #16
   16988:	str	r1, [sp, #8]
   1698c:	lsr	r1, r9, #16
   16990:	orr	r1, r1, r0, lsl #16
   16994:	str	r1, [sp, #12]
   16998:	ldrd	r4, [sp, #8]
   1699c:	adds	r4, r4, r6
   169a0:	adc	r5, r5, r7
   169a4:	strd	r4, [sp, #120]	; 0x78
   169a8:	mov	r0, r4
   169ac:	mov	r1, r5
   169b0:	eor	r0, r0, r2
   169b4:	eor	r1, r1, r3
   169b8:	mov	r3, r1
   169bc:	lsl	r1, r1, #1
   169c0:	orr	r1, r1, r0, lsr #31
   169c4:	str	r1, [sp, #44]	; 0x2c
   169c8:	lsl	r2, r0, #1
   169cc:	orr	r3, r2, r3, lsr #31
   169d0:	str	r3, [sp, #40]	; 0x28
   169d4:	add	r3, sp, #360	; 0x168
   169d8:	ldrd	r8, [r3]
   169dc:	ldrd	r4, [sp, #64]	; 0x40
   169e0:	adds	r8, r8, r4
   169e4:	adc	r9, r9, r5
   169e8:	ldrd	r4, [sp, #48]	; 0x30
   169ec:	adds	r4, r4, r8
   169f0:	adc	r5, r5, r9
   169f4:	mov	r0, r4
   169f8:	mov	r1, r5
   169fc:	ldrd	r2, [sp, #24]
   16a00:	eor	r2, r2, r4
   16a04:	eor	r3, r3, r5
   16a08:	mov	r8, r3
   16a0c:	mov	r9, r2
   16a10:	ldrd	r6, [sp, #104]	; 0x68
   16a14:	adds	r6, r6, r3
   16a18:	adc	r7, r7, r2
   16a1c:	ldrd	r4, [sp, #48]	; 0x30
   16a20:	eor	r4, r4, r6
   16a24:	eor	r5, r5, r7
   16a28:	lsr	ip, r4, #24
   16a2c:	orr	r2, ip, r5, lsl #8
   16a30:	lsr	ip, r5, #24
   16a34:	orr	r3, ip, r4, lsl #8
   16a38:	add	ip, sp, #296	; 0x128
   16a3c:	ldrd	r4, [ip]
   16a40:	adds	r4, r4, r0
   16a44:	adc	r5, r5, r1
   16a48:	adds	r4, r4, r2
   16a4c:	adc	r5, r5, r3
   16a50:	strd	r4, [sp, #64]	; 0x40
   16a54:	eor	r4, r4, r8
   16a58:	eor	r5, r5, r9
   16a5c:	lsr	ip, r4, #16
   16a60:	orr	r1, ip, r5, lsl #16
   16a64:	str	r1, [sp, #24]
   16a68:	lsr	r1, r5, #16
   16a6c:	orr	r1, r1, r4, lsl #16
   16a70:	str	r1, [sp, #28]
   16a74:	ldrd	r8, [sp, #24]
   16a78:	adds	r8, r8, r6
   16a7c:	adc	r9, r9, r7
   16a80:	mov	r0, r8
   16a84:	mov	r1, r9
   16a88:	strd	r0, [sp, #104]	; 0x68
   16a8c:	eor	r0, r0, r2
   16a90:	eor	r1, r1, r3
   16a94:	mov	r3, r1
   16a98:	lsl	r1, r1, #1
   16a9c:	orr	r1, r1, r0, lsr #31
   16aa0:	str	r1, [sp, #52]	; 0x34
   16aa4:	lsl	r2, r0, #1
   16aa8:	orr	r3, r2, r3, lsr #31
   16aac:	str	r3, [sp, #48]	; 0x30
   16ab0:	add	r3, sp, #272	; 0x110
   16ab4:	ldrd	r0, [r3]
   16ab8:	ldrd	r6, [sp, #80]	; 0x50
   16abc:	adds	r0, r0, r6
   16ac0:	adc	r1, r1, r7
   16ac4:	ldrd	r4, [sp, #16]
   16ac8:	adds	r4, r4, r0
   16acc:	adc	r5, r5, r1
   16ad0:	mov	r0, r4
   16ad4:	mov	r1, r5
   16ad8:	ldrd	r2, [sp, #32]
   16adc:	eor	r2, r2, r4
   16ae0:	eor	r3, r3, r5
   16ae4:	mov	r4, r3
   16ae8:	mov	r5, r2
   16aec:	ldrd	r6, [sp, #112]	; 0x70
   16af0:	mov	r8, r3
   16af4:	mov	r9, r2
   16af8:	adds	r6, r6, r4
   16afc:	adc	r7, r7, r5
   16b00:	ldrd	r4, [sp, #16]
   16b04:	eor	r4, r4, r6
   16b08:	eor	r5, r5, r7
   16b0c:	lsr	ip, r4, #24
   16b10:	orr	r2, ip, r5, lsl #8
   16b14:	lsr	ip, r5, #24
   16b18:	orr	r3, ip, r4, lsl #8
   16b1c:	add	ip, sp, #336	; 0x150
   16b20:	ldrd	r4, [ip]
   16b24:	adds	r4, r4, r0
   16b28:	adc	r5, r5, r1
   16b2c:	adds	r4, r4, r2
   16b30:	adc	r5, r5, r3
   16b34:	mov	r0, r8
   16b38:	mov	r1, r9
   16b3c:	strd	r4, [sp, #80]	; 0x50
   16b40:	eor	r0, r0, r4
   16b44:	eor	r1, r1, r5
   16b48:	lsr	ip, r0, #16
   16b4c:	orr	r4, ip, r1, lsl #16
   16b50:	lsr	r1, r1, #16
   16b54:	orr	r5, r1, r0, lsl #16
   16b58:	adds	r6, r6, r4
   16b5c:	adc	r7, r7, r5
   16b60:	eor	r2, r2, r6
   16b64:	eor	r3, r3, r7
   16b68:	lsl	r1, r3, #1
   16b6c:	orr	r1, r1, r2, lsr #31
   16b70:	str	r1, [sp, #20]
   16b74:	lsl	r2, r2, #1
   16b78:	orr	r3, r2, r3, lsr #31
   16b7c:	str	r3, [sp, #16]
   16b80:	add	r3, sp, #368	; 0x170
   16b84:	ldrd	r0, [r3]
   16b88:	ldrd	r2, [sp, #72]	; 0x48
   16b8c:	adds	r0, r0, r2
   16b90:	adc	r1, r1, r3
   16b94:	ldrd	r2, [sp, #40]	; 0x28
   16b98:	adds	r2, r2, r0
   16b9c:	adc	r3, r3, r1
   16ba0:	mov	r0, r2
   16ba4:	mov	r1, r3
   16ba8:	eor	r4, r4, r2
   16bac:	eor	r5, r5, r3
   16bb0:	str	r5, [sp, #32]
   16bb4:	str	r4, [sp, #36]	; 0x24
   16bb8:	ldrd	r4, [sp, #32]
   16bbc:	ldrd	r2, [sp, #104]	; 0x68
   16bc0:	adds	r2, r2, r4
   16bc4:	adc	r3, r3, r5
   16bc8:	mov	r8, r2
   16bcc:	mov	r9, r3
   16bd0:	ldrd	r4, [sp, #40]	; 0x28
   16bd4:	eor	r4, r4, r2
   16bd8:	eor	r5, r5, r3
   16bdc:	lsr	ip, r4, #24
   16be0:	orr	r2, ip, r5, lsl #8
   16be4:	lsr	ip, r5, #24
   16be8:	orr	r3, ip, r4, lsl #8
   16bec:	add	ip, sp, #288	; 0x120
   16bf0:	ldrd	r4, [ip]
   16bf4:	adds	r4, r4, r0
   16bf8:	adc	r5, r5, r1
   16bfc:	adds	r4, r4, r2
   16c00:	adc	r5, r5, r3
   16c04:	ldrd	r0, [sp, #32]
   16c08:	strd	r4, [sp, #72]	; 0x48
   16c0c:	eor	r0, r0, r4
   16c10:	eor	r1, r1, r5
   16c14:	lsr	ip, r0, #16
   16c18:	orr	ip, ip, r1, lsl #16
   16c1c:	str	ip, [sp, #32]
   16c20:	lsr	r1, r1, #16
   16c24:	orr	r1, r1, r0, lsl #16
   16c28:	str	r1, [sp, #36]	; 0x24
   16c2c:	ldrd	r0, [sp, #32]
   16c30:	adds	r0, r0, r8
   16c34:	adc	r1, r1, r9
   16c38:	mov	r8, r0
   16c3c:	mov	r9, r1
   16c40:	strd	r8, [sp, #104]	; 0x68
   16c44:	eor	r8, r8, r2
   16c48:	eor	r9, r9, r3
   16c4c:	lsl	r1, r9, #1
   16c50:	orr	r1, r1, r8, lsr #31
   16c54:	str	r1, [sp, #44]	; 0x2c
   16c58:	lsl	r2, r8, #1
   16c5c:	orr	r3, r2, r9, lsr #31
   16c60:	str	r3, [sp, #40]	; 0x28
   16c64:	add	r3, sp, #376	; 0x178
   16c68:	ldrd	r8, [r3]
   16c6c:	ldrd	r4, [sp, #88]	; 0x58
   16c70:	adds	r8, r8, r4
   16c74:	adc	r9, r9, r5
   16c78:	ldrd	r4, [sp, #48]	; 0x30
   16c7c:	adds	r4, r4, r8
   16c80:	adc	r5, r5, r9
   16c84:	mov	r0, r4
   16c88:	mov	r1, r5
   16c8c:	ldrd	r2, [sp]
   16c90:	eor	r2, r2, r4
   16c94:	eor	r3, r3, r5
   16c98:	mov	r8, r3
   16c9c:	mov	r9, r2
   16ca0:	adds	r6, r6, r3
   16ca4:	adc	r7, r7, r2
   16ca8:	ldrd	r4, [sp, #48]	; 0x30
   16cac:	eor	r4, r4, r6
   16cb0:	eor	r5, r5, r7
   16cb4:	lsr	ip, r4, #24
   16cb8:	orr	r2, ip, r5, lsl #8
   16cbc:	lsr	ip, r5, #24
   16cc0:	orr	r3, ip, r4, lsl #8
   16cc4:	add	ip, sp, #328	; 0x148
   16cc8:	ldrd	r4, [ip]
   16ccc:	adds	r4, r4, r0
   16cd0:	adc	r5, r5, r1
   16cd4:	adds	r4, r4, r2
   16cd8:	adc	r5, r5, r3
   16cdc:	mov	r0, r4
   16ce0:	mov	r1, r5
   16ce4:	strd	r0, [sp, #88]	; 0x58
   16ce8:	eor	r0, r0, r8
   16cec:	eor	r1, r1, r9
   16cf0:	mov	r9, r1
   16cf4:	lsr	ip, r0, #16
   16cf8:	orr	r1, ip, r1, lsl #16
   16cfc:	str	r1, [sp]
   16d00:	lsr	r1, r9, #16
   16d04:	orr	r1, r1, r0, lsl #16
   16d08:	str	r1, [sp, #4]
   16d0c:	ldrd	r4, [sp]
   16d10:	adds	r4, r4, r6
   16d14:	adc	r5, r5, r7
   16d18:	strd	r4, [sp, #112]	; 0x70
   16d1c:	mov	r8, r4
   16d20:	mov	r9, r5
   16d24:	eor	r8, r8, r2
   16d28:	eor	r9, r9, r3
   16d2c:	lsl	r1, r9, #1
   16d30:	orr	r1, r1, r8, lsr #31
   16d34:	str	r1, [sp, #52]	; 0x34
   16d38:	lsl	r2, r8, #1
   16d3c:	orr	r3, r2, r9, lsr #31
   16d40:	str	r3, [sp, #48]	; 0x30
   16d44:	add	r3, sp, #280	; 0x118
   16d48:	ldrd	r0, [r3]
   16d4c:	ldrd	r4, [sp, #64]	; 0x40
   16d50:	adds	r0, r0, r4
   16d54:	adc	r1, r1, r5
   16d58:	ldrd	r4, [sp, #16]
   16d5c:	adds	r4, r4, r0
   16d60:	adc	r5, r5, r1
   16d64:	mov	r0, r4
   16d68:	mov	r1, r5
   16d6c:	ldrd	r2, [sp, #8]
   16d70:	eor	r2, r2, r4
   16d74:	eor	r3, r3, r5
   16d78:	mov	r8, r3
   16d7c:	mov	r9, r2
   16d80:	ldrd	r6, [sp, #96]	; 0x60
   16d84:	adds	r6, r6, r3
   16d88:	adc	r7, r7, r2
   16d8c:	ldrd	r4, [sp, #16]
   16d90:	eor	r4, r4, r6
   16d94:	eor	r5, r5, r7
   16d98:	lsr	ip, r4, #24
   16d9c:	orr	r2, ip, r5, lsl #8
   16da0:	lsr	ip, r5, #24
   16da4:	orr	r3, ip, r4, lsl #8
   16da8:	add	ip, sp, #304	; 0x130
   16dac:	ldrd	r4, [ip]
   16db0:	adds	r4, r4, r0
   16db4:	adc	r5, r5, r1
   16db8:	adds	r4, r4, r2
   16dbc:	adc	r5, r5, r3
   16dc0:	strd	r4, [sp, #64]	; 0x40
   16dc4:	eor	r4, r4, r8
   16dc8:	eor	r5, r5, r9
   16dcc:	lsr	ip, r4, #16
   16dd0:	orr	r1, ip, r5, lsl #16
   16dd4:	str	r1, [sp, #8]
   16dd8:	lsr	r1, r5, #16
   16ddc:	orr	r1, r1, r4, lsl #16
   16de0:	str	r1, [sp, #12]
   16de4:	ldrd	r4, [sp, #8]
   16de8:	adds	r4, r4, r6
   16dec:	adc	r5, r5, r7
   16df0:	mov	r8, r4
   16df4:	mov	r9, r5
   16df8:	eor	r2, r2, r4
   16dfc:	eor	r3, r3, r5
   16e00:	lsl	r1, r3, #1
   16e04:	orr	r1, r1, r2, lsr #31
   16e08:	str	r1, [sp, #20]
   16e0c:	lsl	r2, r2, #1
   16e10:	orr	r3, r2, r3, lsr #31
   16e14:	str	r3, [sp, #16]
   16e18:	add	r3, sp, #352	; 0x160
   16e1c:	ldrd	r0, [r3]
   16e20:	ldrd	r2, [sp, #80]	; 0x50
   16e24:	adds	r0, r0, r2
   16e28:	adc	r1, r1, r3
   16e2c:	ldrd	r4, [sp, #56]	; 0x38
   16e30:	adds	r2, r4, r0
   16e34:	adc	r3, r5, r1
   16e38:	mov	r0, r2
   16e3c:	mov	r1, r3
   16e40:	ldrd	r2, [sp, #24]
   16e44:	eor	r2, r2, r0
   16e48:	eor	r3, r3, r1
   16e4c:	str	r3, [sp, #24]
   16e50:	str	r2, [sp, #28]
   16e54:	ldrd	r6, [sp, #120]	; 0x78
   16e58:	ldrd	r2, [sp, #24]
   16e5c:	adds	r6, r6, r2
   16e60:	adc	r7, r7, r3
   16e64:	mov	r2, r4
   16e68:	mov	r3, r5
   16e6c:	eor	r2, r2, r6
   16e70:	eor	r3, r3, r7
   16e74:	mov	r4, r2
   16e78:	lsr	ip, r2, #24
   16e7c:	orr	r2, ip, r3, lsl #8
   16e80:	lsr	ip, r3, #24
   16e84:	orr	r3, ip, r4, lsl #8
   16e88:	add	ip, sp, #312	; 0x138
   16e8c:	ldrd	r4, [ip]
   16e90:	adds	r4, r4, r0
   16e94:	adc	r5, r5, r1
   16e98:	adds	r4, r4, r2
   16e9c:	adc	r5, r5, r3
   16ea0:	ldrd	r0, [sp, #24]
   16ea4:	strd	r4, [sp, #80]	; 0x50
   16ea8:	eor	r0, r0, r4
   16eac:	eor	r1, r1, r5
   16eb0:	lsr	ip, r0, #16
   16eb4:	orr	ip, ip, r1, lsl #16
   16eb8:	str	ip, [sp, #24]
   16ebc:	lsr	r1, r1, #16
   16ec0:	orr	r1, r1, r0, lsl #16
   16ec4:	str	r1, [sp, #28]
   16ec8:	ldrd	r0, [sp, #24]
   16ecc:	adds	r0, r0, r6
   16ed0:	adc	r1, r1, r7
   16ed4:	mov	r6, r0
   16ed8:	mov	r7, r1
   16edc:	eor	r2, r2, r0
   16ee0:	eor	r3, r3, r1
   16ee4:	lsl	r1, r3, #1
   16ee8:	orr	r5, r1, r2, lsr #31
   16eec:	lsl	r2, r2, #1
   16ef0:	orr	r4, r2, r3, lsr #31
   16ef4:	add	r3, sp, #352	; 0x160
   16ef8:	ldrd	r0, [r3]
   16efc:	ldrd	r2, [sp, #72]	; 0x48
   16f00:	adds	r0, r0, r2
   16f04:	adc	r1, r1, r3
   16f08:	adds	r0, r0, r4
   16f0c:	adc	r1, r1, r5
   16f10:	ldrd	r2, [sp]
   16f14:	eor	r2, r2, r0
   16f18:	eor	r3, r3, r1
   16f1c:	strd	r2, [sp, #56]	; 0x38
   16f20:	ldrd	r2, [sp, #56]	; 0x38
   16f24:	str	r3, [sp]
   16f28:	str	r2, [sp, #4]
   16f2c:	ldrd	r2, [sp]
   16f30:	adds	r2, r2, r8
   16f34:	adc	r3, r3, r9
   16f38:	mov	r8, r2
   16f3c:	mov	r9, r3
   16f40:	eor	r4, r4, r2
   16f44:	eor	r5, r5, r3
   16f48:	lsr	ip, r4, #24
   16f4c:	orr	r2, ip, r5, lsl #8
   16f50:	lsr	ip, r5, #24
   16f54:	orr	r3, ip, r4, lsl #8
   16f58:	add	ip, sp, #288	; 0x120
   16f5c:	ldrd	r4, [ip]
   16f60:	adds	r4, r4, r0
   16f64:	adc	r5, r5, r1
   16f68:	adds	r4, r4, r2
   16f6c:	adc	r5, r5, r3
   16f70:	ldrd	r0, [sp]
   16f74:	strd	r4, [sp, #72]	; 0x48
   16f78:	eor	r0, r0, r4
   16f7c:	eor	r1, r1, r5
   16f80:	lsr	ip, r0, #16
   16f84:	orr	ip, ip, r1, lsl #16
   16f88:	str	ip, [sp]
   16f8c:	lsr	r1, r1, #16
   16f90:	orr	r1, r1, r0, lsl #16
   16f94:	str	r1, [sp, #4]
   16f98:	ldrd	r4, [sp]
   16f9c:	adds	r4, r4, r8
   16fa0:	adc	r5, r5, r9
   16fa4:	strd	r4, [sp, #96]	; 0x60
   16fa8:	mov	r0, r4
   16fac:	mov	r1, r5
   16fb0:	eor	r0, r0, r2
   16fb4:	eor	r1, r1, r3
   16fb8:	mov	r3, r1
   16fbc:	lsl	r1, r1, #1
   16fc0:	orr	r1, r1, r0, lsr #31
   16fc4:	str	r1, [sp, #60]	; 0x3c
   16fc8:	lsl	r2, r0, #1
   16fcc:	orr	r3, r2, r3, lsr #31
   16fd0:	str	r3, [sp, #56]	; 0x38
   16fd4:	add	r3, sp, #336	; 0x150
   16fd8:	ldrd	r8, [r3]
   16fdc:	ldrd	r4, [sp, #88]	; 0x58
   16fe0:	adds	r8, r8, r4
   16fe4:	adc	r9, r9, r5
   16fe8:	ldrd	r2, [sp, #40]	; 0x28
   16fec:	adds	r2, r2, r8
   16ff0:	adc	r3, r3, r9
   16ff4:	mov	r0, r2
   16ff8:	mov	r1, r3
   16ffc:	ldrd	r4, [sp, #8]
   17000:	eor	r4, r4, r2
   17004:	eor	r5, r5, r3
   17008:	mov	r8, r5
   1700c:	mov	r9, r4
   17010:	adds	r6, r6, r5
   17014:	adc	r7, r7, r4
   17018:	ldrd	r4, [sp, #40]	; 0x28
   1701c:	eor	r4, r4, r6
   17020:	eor	r5, r5, r7
   17024:	lsr	ip, r4, #24
   17028:	orr	r2, ip, r5, lsl #8
   1702c:	lsr	ip, r5, #24
   17030:	orr	r3, ip, r4, lsl #8
   17034:	add	ip, sp, #304	; 0x130
   17038:	ldrd	r4, [ip]
   1703c:	adds	r4, r4, r0
   17040:	adc	r5, r5, r1
   17044:	adds	r4, r4, r2
   17048:	adc	r5, r5, r3
   1704c:	mov	r0, r4
   17050:	mov	r1, r5
   17054:	strd	r0, [sp, #88]	; 0x58
   17058:	eor	r0, r0, r8
   1705c:	eor	r1, r1, r9
   17060:	mov	r9, r1
   17064:	lsr	ip, r0, #16
   17068:	orr	r1, ip, r1, lsl #16
   1706c:	str	r1, [sp, #8]
   17070:	lsr	r1, r9, #16
   17074:	orr	r1, r1, r0, lsl #16
   17078:	str	r1, [sp, #12]
   1707c:	ldrd	r4, [sp, #8]
   17080:	adds	r4, r4, r6
   17084:	adc	r5, r5, r7
   17088:	strd	r4, [sp, #120]	; 0x78
   1708c:	mov	r0, r4
   17090:	mov	r1, r5
   17094:	eor	r0, r0, r2
   17098:	eor	r1, r1, r3
   1709c:	mov	r3, r1
   170a0:	lsl	r1, r1, #1
   170a4:	orr	r1, r1, r0, lsr #31
   170a8:	str	r1, [sp, #44]	; 0x2c
   170ac:	lsl	r2, r0, #1
   170b0:	orr	r3, r2, r3, lsr #31
   170b4:	str	r3, [sp, #40]	; 0x28
   170b8:	add	r3, sp, #328	; 0x148
   170bc:	ldrd	r8, [r3]
   170c0:	ldrd	r4, [sp, #64]	; 0x40
   170c4:	adds	r8, r8, r4
   170c8:	adc	r9, r9, r5
   170cc:	ldrd	r4, [sp, #48]	; 0x30
   170d0:	adds	r4, r4, r8
   170d4:	adc	r5, r5, r9
   170d8:	mov	r0, r4
   170dc:	mov	r1, r5
   170e0:	ldrd	r2, [sp, #24]
   170e4:	eor	r2, r2, r4
   170e8:	eor	r3, r3, r5
   170ec:	mov	r8, r3
   170f0:	mov	r9, r2
   170f4:	ldrd	r6, [sp, #104]	; 0x68
   170f8:	adds	r6, r6, r3
   170fc:	adc	r7, r7, r2
   17100:	ldrd	r4, [sp, #48]	; 0x30
   17104:	eor	r4, r4, r6
   17108:	eor	r5, r5, r7
   1710c:	lsr	ip, r4, #24
   17110:	orr	r2, ip, r5, lsl #8
   17114:	lsr	ip, r5, #24
   17118:	orr	r3, ip, r4, lsl #8
   1711c:	add	ip, sp, #320	; 0x140
   17120:	ldrd	r4, [ip]
   17124:	adds	r4, r4, r0
   17128:	adc	r5, r5, r1
   1712c:	adds	r4, r4, r2
   17130:	adc	r5, r5, r3
   17134:	strd	r4, [sp, #64]	; 0x40
   17138:	eor	r4, r4, r8
   1713c:	eor	r5, r5, r9
   17140:	lsr	ip, r4, #16
   17144:	orr	r1, ip, r5, lsl #16
   17148:	str	r1, [sp, #24]
   1714c:	lsr	r1, r5, #16
   17150:	orr	r1, r1, r4, lsl #16
   17154:	str	r1, [sp, #28]
   17158:	ldrd	r8, [sp, #24]
   1715c:	adds	r8, r8, r6
   17160:	adc	r9, r9, r7
   17164:	mov	r0, r8
   17168:	mov	r1, r9
   1716c:	strd	r0, [sp, #104]	; 0x68
   17170:	eor	r0, r0, r2
   17174:	eor	r1, r1, r3
   17178:	mov	r3, r1
   1717c:	lsl	r1, r1, #1
   17180:	orr	r1, r1, r0, lsr #31
   17184:	str	r1, [sp, #52]	; 0x34
   17188:	lsl	r2, r0, #1
   1718c:	orr	r3, r2, r3, lsr #31
   17190:	str	r3, [sp, #48]	; 0x30
   17194:	add	r3, sp, #280	; 0x118
   17198:	ldrd	r0, [r3]
   1719c:	ldrd	r6, [sp, #80]	; 0x50
   171a0:	adds	r0, r0, r6
   171a4:	adc	r1, r1, r7
   171a8:	ldrd	r4, [sp, #16]
   171ac:	adds	r4, r4, r0
   171b0:	adc	r5, r5, r1
   171b4:	mov	r0, r4
   171b8:	mov	r1, r5
   171bc:	ldrd	r2, [sp, #32]
   171c0:	eor	r2, r2, r4
   171c4:	eor	r3, r3, r5
   171c8:	mov	r4, r3
   171cc:	mov	r5, r2
   171d0:	ldrd	r6, [sp, #112]	; 0x70
   171d4:	mov	r8, r3
   171d8:	mov	r9, r2
   171dc:	adds	r6, r6, r4
   171e0:	adc	r7, r7, r5
   171e4:	ldrd	r4, [sp, #16]
   171e8:	eor	r4, r4, r6
   171ec:	eor	r5, r5, r7
   171f0:	lsr	ip, r4, #24
   171f4:	orr	r2, ip, r5, lsl #8
   171f8:	lsr	ip, r5, #24
   171fc:	orr	r3, ip, r4, lsl #8
   17200:	add	ip, sp, #312	; 0x138
   17204:	ldrd	r4, [ip]
   17208:	adds	r4, r4, r0
   1720c:	adc	r5, r5, r1
   17210:	adds	r4, r4, r2
   17214:	adc	r5, r5, r3
   17218:	mov	r0, r8
   1721c:	mov	r1, r9
   17220:	strd	r4, [sp, #80]	; 0x50
   17224:	eor	r0, r0, r4
   17228:	eor	r1, r1, r5
   1722c:	lsr	ip, r0, #16
   17230:	orr	r4, ip, r1, lsl #16
   17234:	lsr	r1, r1, #16
   17238:	orr	r5, r1, r0, lsl #16
   1723c:	adds	r6, r6, r4
   17240:	adc	r7, r7, r5
   17244:	eor	r2, r2, r6
   17248:	eor	r3, r3, r7
   1724c:	lsl	r1, r3, #1
   17250:	orr	r1, r1, r2, lsr #31
   17254:	str	r1, [sp, #20]
   17258:	lsl	r2, r2, #1
   1725c:	orr	r3, r2, r3, lsr #31
   17260:	str	r3, [sp, #16]
   17264:	add	r3, sp, #392	; 0x188
   17268:	ldrd	r0, [r3]
   1726c:	ldrd	r2, [sp, #72]	; 0x48
   17270:	adds	r0, r0, r2
   17274:	adc	r1, r1, r3
   17278:	ldrd	r2, [sp, #40]	; 0x28
   1727c:	adds	r2, r2, r0
   17280:	adc	r3, r3, r1
   17284:	mov	r0, r2
   17288:	mov	r1, r3
   1728c:	eor	r4, r4, r2
   17290:	eor	r5, r5, r3
   17294:	str	r5, [sp, #32]
   17298:	str	r4, [sp, #36]	; 0x24
   1729c:	ldrd	r4, [sp, #32]
   172a0:	ldrd	r2, [sp, #104]	; 0x68
   172a4:	adds	r2, r2, r4
   172a8:	adc	r3, r3, r5
   172ac:	mov	r8, r2
   172b0:	mov	r9, r3
   172b4:	ldrd	r4, [sp, #40]	; 0x28
   172b8:	eor	r4, r4, r2
   172bc:	eor	r5, r5, r3
   172c0:	lsr	ip, r4, #24
   172c4:	orr	r2, ip, r5, lsl #8
   172c8:	lsr	ip, r5, #24
   172cc:	orr	r3, ip, r4, lsl #8
   172d0:	add	ip, sp, #360	; 0x168
   172d4:	ldrd	r4, [ip]
   172d8:	adds	r4, r4, r0
   172dc:	adc	r5, r5, r1
   172e0:	adds	r4, r4, r2
   172e4:	adc	r5, r5, r3
   172e8:	ldrd	r0, [sp, #32]
   172ec:	strd	r4, [sp, #72]	; 0x48
   172f0:	eor	r0, r0, r4
   172f4:	eor	r1, r1, r5
   172f8:	lsr	ip, r0, #16
   172fc:	orr	ip, ip, r1, lsl #16
   17300:	str	ip, [sp, #32]
   17304:	lsr	r1, r1, #16
   17308:	orr	r1, r1, r0, lsl #16
   1730c:	str	r1, [sp, #36]	; 0x24
   17310:	ldrd	r0, [sp, #32]
   17314:	adds	r0, r0, r8
   17318:	adc	r1, r1, r9
   1731c:	mov	r8, r0
   17320:	mov	r9, r1
   17324:	strd	r8, [sp, #104]	; 0x68
   17328:	eor	r8, r8, r2
   1732c:	eor	r9, r9, r3
   17330:	lsl	r1, r9, #1
   17334:	orr	r1, r1, r8, lsr #31
   17338:	str	r1, [sp, #44]	; 0x2c
   1733c:	lsl	r2, r8, #1
   17340:	orr	r3, r2, r9, lsr #31
   17344:	str	r3, [sp, #40]	; 0x28
   17348:	add	r3, sp, #344	; 0x158
   1734c:	ldrd	r8, [r3]
   17350:	ldrd	r4, [sp, #88]	; 0x58
   17354:	adds	r8, r8, r4
   17358:	adc	r9, r9, r5
   1735c:	ldrd	r4, [sp, #48]	; 0x30
   17360:	adds	r4, r4, r8
   17364:	adc	r5, r5, r9
   17368:	mov	r0, r4
   1736c:	mov	r1, r5
   17370:	ldrd	r2, [sp]
   17374:	eor	r2, r2, r4
   17378:	eor	r3, r3, r5
   1737c:	mov	r8, r3
   17380:	mov	r9, r2
   17384:	adds	r6, r6, r3
   17388:	adc	r7, r7, r2
   1738c:	ldrd	r4, [sp, #48]	; 0x30
   17390:	eor	r4, r4, r6
   17394:	eor	r5, r5, r7
   17398:	lsr	ip, r4, #24
   1739c:	orr	r2, ip, r5, lsl #8
   173a0:	lsr	ip, r5, #24
   173a4:	orr	r3, ip, r4, lsl #8
   173a8:	add	ip, sp, #384	; 0x180
   173ac:	ldrd	r4, [ip]
   173b0:	adds	r4, r4, r0
   173b4:	adc	r5, r5, r1
   173b8:	adds	r4, r4, r2
   173bc:	adc	r5, r5, r3
   173c0:	mov	r0, r4
   173c4:	mov	r1, r5
   173c8:	strd	r0, [sp, #88]	; 0x58
   173cc:	eor	r0, r0, r8
   173d0:	eor	r1, r1, r9
   173d4:	mov	r9, r1
   173d8:	lsr	ip, r0, #16
   173dc:	orr	r1, ip, r1, lsl #16
   173e0:	str	r1, [sp]
   173e4:	lsr	r1, r9, #16
   173e8:	orr	r1, r1, r0, lsl #16
   173ec:	str	r1, [sp, #4]
   173f0:	ldrd	r4, [sp]
   173f4:	adds	r4, r4, r6
   173f8:	adc	r5, r5, r7
   173fc:	strd	r4, [sp, #112]	; 0x70
   17400:	mov	r8, r4
   17404:	mov	r9, r5
   17408:	eor	r8, r8, r2
   1740c:	eor	r9, r9, r3
   17410:	lsl	r1, r9, #1
   17414:	orr	r1, r1, r8, lsr #31
   17418:	str	r1, [sp, #52]	; 0x34
   1741c:	lsl	r2, r8, #1
   17420:	orr	r3, r2, r9, lsr #31
   17424:	str	r3, [sp, #48]	; 0x30
   17428:	add	r3, sp, #296	; 0x128
   1742c:	ldrd	r0, [r3]
   17430:	ldrd	r4, [sp, #64]	; 0x40
   17434:	adds	r0, r0, r4
   17438:	adc	r1, r1, r5
   1743c:	ldrd	r4, [sp, #16]
   17440:	adds	r4, r4, r0
   17444:	adc	r5, r5, r1
   17448:	mov	r0, r4
   1744c:	mov	r1, r5
   17450:	ldrd	r2, [sp, #8]
   17454:	eor	r2, r2, r4
   17458:	eor	r3, r3, r5
   1745c:	mov	r8, r3
   17460:	mov	r9, r2
   17464:	ldrd	r6, [sp, #96]	; 0x60
   17468:	adds	r6, r6, r3
   1746c:	adc	r7, r7, r2
   17470:	ldrd	r4, [sp, #16]
   17474:	eor	r4, r4, r6
   17478:	eor	r5, r5, r7
   1747c:	lsr	ip, r4, #24
   17480:	orr	r2, ip, r5, lsl #8
   17484:	lsr	ip, r5, #24
   17488:	orr	r3, ip, r4, lsl #8
   1748c:	add	ip, sp, #368	; 0x170
   17490:	ldrd	r4, [ip]
   17494:	adds	r4, r4, r0
   17498:	adc	r5, r5, r1
   1749c:	adds	r4, r4, r2
   174a0:	adc	r5, r5, r3
   174a4:	strd	r4, [sp, #64]	; 0x40
   174a8:	eor	r4, r4, r8
   174ac:	eor	r5, r5, r9
   174b0:	lsr	ip, r4, #16
   174b4:	orr	r1, ip, r5, lsl #16
   174b8:	str	r1, [sp, #8]
   174bc:	lsr	r1, r5, #16
   174c0:	orr	r1, r1, r4, lsl #16
   174c4:	str	r1, [sp, #12]
   174c8:	ldrd	r4, [sp, #8]
   174cc:	adds	r4, r4, r6
   174d0:	adc	r5, r5, r7
   174d4:	mov	r8, r4
   174d8:	mov	r9, r5
   174dc:	eor	r2, r2, r4
   174e0:	eor	r3, r3, r5
   174e4:	lsl	r1, r3, #1
   174e8:	orr	r1, r1, r2, lsr #31
   174ec:	str	r1, [sp, #20]
   174f0:	lsl	r2, r2, #1
   174f4:	orr	r3, r2, r3, lsr #31
   174f8:	str	r3, [sp, #16]
   174fc:	add	r3, sp, #376	; 0x178
   17500:	ldrd	r0, [r3]
   17504:	ldrd	r2, [sp, #80]	; 0x50
   17508:	adds	r0, r0, r2
   1750c:	adc	r1, r1, r3
   17510:	ldrd	r4, [sp, #56]	; 0x38
   17514:	adds	r2, r4, r0
   17518:	adc	r3, r5, r1
   1751c:	mov	r0, r2
   17520:	mov	r1, r3
   17524:	ldrd	r2, [sp, #24]
   17528:	eor	r2, r2, r0
   1752c:	eor	r3, r3, r1
   17530:	str	r3, [sp, #24]
   17534:	str	r2, [sp, #28]
   17538:	ldrd	r6, [sp, #120]	; 0x78
   1753c:	ldrd	r2, [sp, #24]
   17540:	adds	r6, r6, r2
   17544:	adc	r7, r7, r3
   17548:	mov	r2, r4
   1754c:	mov	r3, r5
   17550:	eor	r2, r2, r6
   17554:	eor	r3, r3, r7
   17558:	mov	r4, r2
   1755c:	lsr	ip, r2, #24
   17560:	orr	r2, ip, r3, lsl #8
   17564:	lsr	ip, r3, #24
   17568:	orr	r3, ip, r4, lsl #8
   1756c:	add	ip, sp, #272	; 0x110
   17570:	ldrd	r4, [ip]
   17574:	adds	r4, r4, r0
   17578:	adc	r5, r5, r1
   1757c:	adds	r4, r4, r2
   17580:	adc	r5, r5, r3
   17584:	ldrd	r0, [sp, #24]
   17588:	strd	r4, [sp, #80]	; 0x50
   1758c:	eor	r0, r0, r4
   17590:	eor	r1, r1, r5
   17594:	lsr	ip, r0, #16
   17598:	orr	ip, ip, r1, lsl #16
   1759c:	str	ip, [sp, #24]
   175a0:	lsr	r1, r1, #16
   175a4:	orr	r1, r1, r0, lsl #16
   175a8:	str	r1, [sp, #28]
   175ac:	ldrd	r0, [sp, #24]
   175b0:	adds	r0, r0, r6
   175b4:	adc	r1, r1, r7
   175b8:	mov	r6, r0
   175bc:	mov	r7, r1
   175c0:	eor	r2, r2, r0
   175c4:	eor	r3, r3, r1
   175c8:	lsl	r1, r3, #1
   175cc:	orr	r5, r1, r2, lsr #31
   175d0:	lsl	r2, r2, #1
   175d4:	orr	r4, r2, r3, lsr #31
   175d8:	add	r3, sp, #272	; 0x110
   175dc:	ldrd	r0, [r3]
   175e0:	ldrd	r2, [sp, #72]	; 0x48
   175e4:	adds	r0, r0, r2
   175e8:	adc	r1, r1, r3
   175ec:	adds	r0, r0, r4
   175f0:	adc	r1, r1, r5
   175f4:	ldrd	r2, [sp]
   175f8:	eor	r2, r2, r0
   175fc:	eor	r3, r3, r1
   17600:	strd	r2, [sp, #56]	; 0x38
   17604:	ldrd	r2, [sp, #56]	; 0x38
   17608:	str	r3, [sp]
   1760c:	str	r2, [sp, #4]
   17610:	ldrd	r2, [sp]
   17614:	adds	r2, r2, r8
   17618:	adc	r3, r3, r9
   1761c:	mov	r8, r2
   17620:	mov	r9, r3
   17624:	eor	r4, r4, r2
   17628:	eor	r5, r5, r3
   1762c:	lsr	ip, r4, #24
   17630:	orr	r2, ip, r5, lsl #8
   17634:	lsr	ip, r5, #24
   17638:	orr	r3, ip, r4, lsl #8
   1763c:	add	ip, sp, #280	; 0x118
   17640:	ldrd	r4, [ip]
   17644:	adds	r4, r4, r0
   17648:	adc	r5, r5, r1
   1764c:	adds	r4, r4, r2
   17650:	adc	r5, r5, r3
   17654:	ldrd	r0, [sp]
   17658:	strd	r4, [sp, #72]	; 0x48
   1765c:	eor	r0, r0, r4
   17660:	eor	r1, r1, r5
   17664:	lsr	ip, r0, #16
   17668:	orr	ip, ip, r1, lsl #16
   1766c:	str	ip, [sp]
   17670:	lsr	r1, r1, #16
   17674:	orr	r1, r1, r0, lsl #16
   17678:	str	r1, [sp, #4]
   1767c:	ldrd	r4, [sp]
   17680:	adds	r4, r4, r8
   17684:	adc	r5, r5, r9
   17688:	strd	r4, [sp, #96]	; 0x60
   1768c:	mov	r0, r4
   17690:	mov	r1, r5
   17694:	eor	r0, r0, r2
   17698:	eor	r1, r1, r3
   1769c:	mov	r3, r1
   176a0:	lsl	r1, r1, #1
   176a4:	orr	r1, r1, r0, lsr #31
   176a8:	str	r1, [sp, #60]	; 0x3c
   176ac:	lsl	r2, r0, #1
   176b0:	orr	r3, r2, r3, lsr #31
   176b4:	str	r3, [sp, #56]	; 0x38
   176b8:	add	r3, sp, #288	; 0x120
   176bc:	ldrd	r8, [r3]
   176c0:	ldrd	r4, [sp, #88]	; 0x58
   176c4:	adds	r8, r8, r4
   176c8:	adc	r9, r9, r5
   176cc:	ldrd	r2, [sp, #40]	; 0x28
   176d0:	adds	r2, r2, r8
   176d4:	adc	r3, r3, r9
   176d8:	mov	r0, r2
   176dc:	mov	r1, r3
   176e0:	ldrd	r4, [sp, #8]
   176e4:	eor	r4, r4, r2
   176e8:	eor	r5, r5, r3
   176ec:	mov	r8, r5
   176f0:	mov	r9, r4
   176f4:	adds	r6, r6, r5
   176f8:	adc	r7, r7, r4
   176fc:	ldrd	r4, [sp, #40]	; 0x28
   17700:	eor	r4, r4, r6
   17704:	eor	r5, r5, r7
   17708:	lsr	ip, r4, #24
   1770c:	orr	r2, ip, r5, lsl #8
   17710:	lsr	ip, r5, #24
   17714:	orr	r3, ip, r4, lsl #8
   17718:	add	ip, sp, #296	; 0x128
   1771c:	ldrd	r4, [ip]
   17720:	adds	r4, r4, r0
   17724:	adc	r5, r5, r1
   17728:	adds	r4, r4, r2
   1772c:	adc	r5, r5, r3
   17730:	mov	r0, r4
   17734:	mov	r1, r5
   17738:	strd	r0, [sp, #88]	; 0x58
   1773c:	eor	r0, r0, r8
   17740:	eor	r1, r1, r9
   17744:	mov	r9, r1
   17748:	lsr	ip, r0, #16
   1774c:	orr	r1, ip, r1, lsl #16
   17750:	str	r1, [sp, #8]
   17754:	lsr	r1, r9, #16
   17758:	orr	r1, r1, r0, lsl #16
   1775c:	str	r1, [sp, #12]
   17760:	ldrd	r4, [sp, #8]
   17764:	adds	r4, r4, r6
   17768:	adc	r5, r5, r7
   1776c:	strd	r4, [sp, #120]	; 0x78
   17770:	mov	r0, r4
   17774:	mov	r1, r5
   17778:	eor	r0, r0, r2
   1777c:	eor	r1, r1, r3
   17780:	mov	r3, r1
   17784:	lsl	r1, r1, #1
   17788:	orr	r1, r1, r0, lsr #31
   1778c:	str	r1, [sp, #44]	; 0x2c
   17790:	lsl	r2, r0, #1
   17794:	orr	r3, r2, r3, lsr #31
   17798:	str	r3, [sp, #40]	; 0x28
   1779c:	add	r3, sp, #304	; 0x130
   177a0:	ldrd	r8, [r3]
   177a4:	ldrd	r4, [sp, #64]	; 0x40
   177a8:	adds	r8, r8, r4
   177ac:	adc	r9, r9, r5
   177b0:	ldrd	r4, [sp, #48]	; 0x30
   177b4:	adds	r4, r4, r8
   177b8:	adc	r5, r5, r9
   177bc:	mov	r0, r4
   177c0:	mov	r1, r5
   177c4:	ldrd	r2, [sp, #24]
   177c8:	eor	r2, r2, r4
   177cc:	eor	r3, r3, r5
   177d0:	mov	r8, r3
   177d4:	mov	r9, r2
   177d8:	ldrd	r6, [sp, #104]	; 0x68
   177dc:	adds	r6, r6, r3
   177e0:	adc	r7, r7, r2
   177e4:	ldrd	r4, [sp, #48]	; 0x30
   177e8:	eor	r4, r4, r6
   177ec:	eor	r5, r5, r7
   177f0:	lsr	ip, r4, #24
   177f4:	orr	r2, ip, r5, lsl #8
   177f8:	lsr	ip, r5, #24
   177fc:	orr	r3, ip, r4, lsl #8
   17800:	add	ip, sp, #312	; 0x138
   17804:	ldrd	r4, [ip]
   17808:	adds	r4, r4, r0
   1780c:	adc	r5, r5, r1
   17810:	adds	r4, r4, r2
   17814:	adc	r5, r5, r3
   17818:	strd	r4, [sp, #64]	; 0x40
   1781c:	eor	r4, r4, r8
   17820:	eor	r5, r5, r9
   17824:	lsr	ip, r4, #16
   17828:	orr	r1, ip, r5, lsl #16
   1782c:	str	r1, [sp, #24]
   17830:	lsr	r1, r5, #16
   17834:	orr	r1, r1, r4, lsl #16
   17838:	str	r1, [sp, #28]
   1783c:	ldrd	r8, [sp, #24]
   17840:	adds	r8, r8, r6
   17844:	adc	r9, r9, r7
   17848:	mov	r0, r8
   1784c:	mov	r1, r9
   17850:	strd	r0, [sp, #104]	; 0x68
   17854:	eor	r0, r0, r2
   17858:	eor	r1, r1, r3
   1785c:	mov	r3, r1
   17860:	lsl	r1, r1, #1
   17864:	orr	r1, r1, r0, lsr #31
   17868:	str	r1, [sp, #52]	; 0x34
   1786c:	lsl	r2, r0, #1
   17870:	orr	r3, r2, r3, lsr #31
   17874:	str	r3, [sp, #48]	; 0x30
   17878:	add	r3, sp, #320	; 0x140
   1787c:	ldrd	r0, [r3]
   17880:	ldrd	r6, [sp, #80]	; 0x50
   17884:	adds	r0, r0, r6
   17888:	adc	r1, r1, r7
   1788c:	ldrd	r4, [sp, #16]
   17890:	adds	r4, r4, r0
   17894:	adc	r5, r5, r1
   17898:	mov	r0, r4
   1789c:	mov	r1, r5
   178a0:	ldrd	r2, [sp, #32]
   178a4:	eor	r2, r2, r4
   178a8:	eor	r3, r3, r5
   178ac:	mov	r4, r3
   178b0:	mov	r5, r2
   178b4:	ldrd	r6, [sp, #112]	; 0x70
   178b8:	mov	r8, r3
   178bc:	mov	r9, r2
   178c0:	adds	r6, r6, r4
   178c4:	adc	r7, r7, r5
   178c8:	ldrd	r4, [sp, #16]
   178cc:	eor	r4, r4, r6
   178d0:	eor	r5, r5, r7
   178d4:	lsr	ip, r4, #24
   178d8:	orr	r2, ip, r5, lsl #8
   178dc:	lsr	ip, r5, #24
   178e0:	orr	r3, ip, r4, lsl #8
   178e4:	add	ip, sp, #328	; 0x148
   178e8:	ldrd	r4, [ip]
   178ec:	adds	r4, r4, r0
   178f0:	adc	r5, r5, r1
   178f4:	adds	r4, r4, r2
   178f8:	adc	r5, r5, r3
   178fc:	mov	r0, r8
   17900:	mov	r1, r9
   17904:	strd	r4, [sp, #80]	; 0x50
   17908:	eor	r0, r0, r4
   1790c:	eor	r1, r1, r5
   17910:	lsr	ip, r0, #16
   17914:	orr	r4, ip, r1, lsl #16
   17918:	lsr	r1, r1, #16
   1791c:	orr	r5, r1, r0, lsl #16
   17920:	adds	r6, r6, r4
   17924:	adc	r7, r7, r5
   17928:	eor	r2, r2, r6
   1792c:	eor	r3, r3, r7
   17930:	lsl	r1, r3, #1
   17934:	orr	r1, r1, r2, lsr #31
   17938:	str	r1, [sp, #36]	; 0x24
   1793c:	lsl	r2, r2, #1
   17940:	orr	r3, r2, r3, lsr #31
   17944:	str	r3, [sp, #32]
   17948:	add	r3, sp, #336	; 0x150
   1794c:	ldrd	r0, [r3]
   17950:	ldrd	r2, [sp, #72]	; 0x48
   17954:	adds	r0, r0, r2
   17958:	adc	r1, r1, r3
   1795c:	ldrd	r2, [sp, #40]	; 0x28
   17960:	adds	r2, r2, r0
   17964:	adc	r3, r3, r1
   17968:	mov	r0, r2
   1796c:	mov	r1, r3
   17970:	eor	r4, r4, r2
   17974:	eor	r5, r5, r3
   17978:	str	r5, [sp, #16]
   1797c:	str	r4, [sp, #20]
   17980:	ldrd	r4, [sp, #16]
   17984:	ldrd	r2, [sp, #104]	; 0x68
   17988:	adds	r2, r2, r4
   1798c:	adc	r3, r3, r5
   17990:	mov	r8, r2
   17994:	mov	r9, r3
   17998:	ldrd	r4, [sp, #40]	; 0x28
   1799c:	eor	r4, r4, r2
   179a0:	eor	r5, r5, r3
   179a4:	lsr	ip, r4, #24
   179a8:	orr	r2, ip, r5, lsl #8
   179ac:	lsr	ip, r5, #24
   179b0:	orr	r3, ip, r4, lsl #8
   179b4:	add	ip, sp, #344	; 0x158
   179b8:	ldrd	r4, [ip]
   179bc:	adds	r4, r4, r0
   179c0:	adc	r5, r5, r1
   179c4:	adds	r4, r4, r2
   179c8:	adc	r5, r5, r3
   179cc:	ldrd	r0, [sp, #16]
   179d0:	strd	r4, [sp, #72]	; 0x48
   179d4:	eor	r0, r0, r4
   179d8:	eor	r1, r1, r5
   179dc:	lsr	ip, r0, #16
   179e0:	orr	ip, ip, r1, lsl #16
   179e4:	str	ip, [sp, #16]
   179e8:	lsr	r1, r1, #16
   179ec:	orr	r1, r1, r0, lsl #16
   179f0:	str	r1, [sp, #20]
   179f4:	ldrd	r0, [sp, #16]
   179f8:	adds	r0, r0, r8
   179fc:	adc	r1, r1, r9
   17a00:	mov	r8, r0
   17a04:	mov	r9, r1
   17a08:	strd	r8, [sp, #104]	; 0x68
   17a0c:	eor	r8, r8, r2
   17a10:	eor	r9, r9, r3
   17a14:	lsl	r1, r9, #1
   17a18:	orr	r1, r1, r8, lsr #31
   17a1c:	str	r1, [sp, #44]	; 0x2c
   17a20:	lsl	r2, r8, #1
   17a24:	orr	r3, r2, r9, lsr #31
   17a28:	str	r3, [sp, #40]	; 0x28
   17a2c:	add	r3, sp, #352	; 0x160
   17a30:	ldrd	r8, [r3]
   17a34:	ldrd	r4, [sp, #88]	; 0x58
   17a38:	adds	r8, r8, r4
   17a3c:	adc	r9, r9, r5
   17a40:	ldrd	r4, [sp, #48]	; 0x30
   17a44:	adds	r4, r4, r8
   17a48:	adc	r5, r5, r9
   17a4c:	mov	r0, r4
   17a50:	mov	r1, r5
   17a54:	ldrd	r2, [sp]
   17a58:	eor	r2, r2, r4
   17a5c:	eor	r3, r3, r5
   17a60:	mov	r8, r3
   17a64:	mov	r9, r2
   17a68:	adds	r6, r6, r3
   17a6c:	adc	r7, r7, r2
   17a70:	ldrd	r4, [sp, #48]	; 0x30
   17a74:	eor	r4, r4, r6
   17a78:	eor	r5, r5, r7
   17a7c:	lsr	ip, r4, #24
   17a80:	orr	r2, ip, r5, lsl #8
   17a84:	lsr	ip, r5, #24
   17a88:	orr	r3, ip, r4, lsl #8
   17a8c:	add	ip, sp, #360	; 0x168
   17a90:	ldrd	r4, [ip]
   17a94:	adds	r4, r4, r0
   17a98:	adc	r5, r5, r1
   17a9c:	adds	r4, r4, r2
   17aa0:	adc	r5, r5, r3
   17aa4:	strd	r4, [sp, #88]	; 0x58
   17aa8:	eor	r4, r4, r8
   17aac:	eor	r5, r5, r9
   17ab0:	lsr	ip, r4, #16
   17ab4:	orr	r1, ip, r5, lsl #16
   17ab8:	str	r1, [sp]
   17abc:	lsr	r1, r5, #16
   17ac0:	orr	r1, r1, r4, lsl #16
   17ac4:	str	r1, [sp, #4]
   17ac8:	ldrd	r4, [sp]
   17acc:	adds	r4, r4, r6
   17ad0:	adc	r5, r5, r7
   17ad4:	strd	r4, [sp, #112]	; 0x70
   17ad8:	mov	r8, r4
   17adc:	mov	r9, r5
   17ae0:	eor	r8, r8, r2
   17ae4:	eor	r9, r9, r3
   17ae8:	lsl	r1, r9, #1
   17aec:	orr	r1, r1, r8, lsr #31
   17af0:	str	r1, [sp, #52]	; 0x34
   17af4:	lsl	r2, r8, #1
   17af8:	orr	r3, r2, r9, lsr #31
   17afc:	str	r3, [sp, #48]	; 0x30
   17b00:	add	r3, sp, #368	; 0x170
   17b04:	ldrd	r6, [r3]
   17b08:	ldrd	r2, [sp, #64]	; 0x40
   17b0c:	adds	r6, r6, r2
   17b10:	adc	r7, r7, r3
   17b14:	ldrd	r4, [sp, #32]
   17b18:	adds	r2, r4, r6
   17b1c:	adc	r3, r5, r7
   17b20:	mov	r0, r2
   17b24:	mov	r1, r3
   17b28:	ldrd	r2, [sp, #8]
   17b2c:	eor	r2, r2, r0
   17b30:	eor	r3, r3, r1
   17b34:	mov	r8, r3
   17b38:	mov	r9, r2
   17b3c:	ldrd	r6, [sp, #96]	; 0x60
   17b40:	adds	r6, r6, r3
   17b44:	adc	r7, r7, r2
   17b48:	mov	r2, r4
   17b4c:	mov	r3, r5
   17b50:	eor	r2, r2, r6
   17b54:	eor	r3, r3, r7
   17b58:	mov	r4, r2
   17b5c:	lsr	ip, r2, #24
   17b60:	orr	r2, ip, r3, lsl #8
   17b64:	lsr	ip, r3, #24
   17b68:	orr	r3, ip, r4, lsl #8
   17b6c:	add	ip, sp, #376	; 0x178
   17b70:	ldrd	r4, [ip]
   17b74:	adds	r4, r4, r0
   17b78:	adc	r5, r5, r1
   17b7c:	adds	r4, r4, r2
   17b80:	adc	r5, r5, r3
   17b84:	mov	r0, r4
   17b88:	mov	r1, r5
   17b8c:	strd	r0, [sp, #96]	; 0x60
   17b90:	eor	r0, r0, r8
   17b94:	eor	r1, r1, r9
   17b98:	mov	r9, r1
   17b9c:	lsr	ip, r0, #16
   17ba0:	orr	r1, ip, r1, lsl #16
   17ba4:	str	r1, [sp, #8]
   17ba8:	lsr	r1, r9, #16
   17bac:	orr	r1, r1, r0, lsl #16
   17bb0:	str	r1, [sp, #12]
   17bb4:	ldrd	r4, [sp, #8]
   17bb8:	adds	r4, r4, r6
   17bbc:	adc	r5, r5, r7
   17bc0:	mov	r8, r4
   17bc4:	mov	r9, r5
   17bc8:	eor	r2, r2, r4
   17bcc:	eor	r3, r3, r5
   17bd0:	lsl	r1, r3, #1
   17bd4:	orr	r1, r1, r2, lsr #31
   17bd8:	str	r1, [sp, #68]	; 0x44
   17bdc:	lsl	r2, r2, #1
   17be0:	orr	r3, r2, r3, lsr #31
   17be4:	str	r3, [sp, #64]	; 0x40
   17be8:	add	r3, sp, #384	; 0x180
   17bec:	ldrd	r6, [r3]
   17bf0:	ldrd	r2, [sp, #80]	; 0x50
   17bf4:	adds	r6, r6, r2
   17bf8:	adc	r7, r7, r3
   17bfc:	ldrd	r4, [sp, #56]	; 0x38
   17c00:	adds	r2, r4, r6
   17c04:	adc	r3, r5, r7
   17c08:	mov	r0, r2
   17c0c:	mov	r1, r3
   17c10:	ldrd	r2, [sp, #24]
   17c14:	eor	r2, r2, r0
   17c18:	eor	r3, r3, r1
   17c1c:	str	r3, [sp, #24]
   17c20:	str	r2, [sp, #28]
   17c24:	ldrd	r6, [sp, #120]	; 0x78
   17c28:	ldrd	r2, [sp, #24]
   17c2c:	adds	r6, r6, r2
   17c30:	adc	r7, r7, r3
   17c34:	mov	r2, r4
   17c38:	mov	r3, r5
   17c3c:	eor	r2, r2, r6
   17c40:	eor	r3, r3, r7
   17c44:	mov	r4, r2
   17c48:	lsr	ip, r2, #24
   17c4c:	orr	r2, ip, r3, lsl #8
   17c50:	lsr	ip, r3, #24
   17c54:	orr	r3, ip, r4, lsl #8
   17c58:	add	ip, sp, #392	; 0x188
   17c5c:	ldrd	r4, [ip]
   17c60:	adds	r4, r4, r0
   17c64:	adc	r5, r5, r1
   17c68:	adds	r4, r4, r2
   17c6c:	adc	r5, r5, r3
   17c70:	ldrd	r0, [sp, #24]
   17c74:	strd	r4, [sp, #56]	; 0x38
   17c78:	eor	r0, r0, r4
   17c7c:	eor	r1, r1, r5
   17c80:	lsr	ip, r0, #16
   17c84:	orr	ip, ip, r1, lsl #16
   17c88:	str	ip, [sp, #24]
   17c8c:	lsr	r1, r1, #16
   17c90:	orr	r1, r1, r0, lsl #16
   17c94:	str	r1, [sp, #28]
   17c98:	ldrd	r4, [sp, #24]
   17c9c:	adds	r4, r4, r6
   17ca0:	adc	r5, r5, r7
   17ca4:	mov	r6, r4
   17ca8:	mov	r7, r5
   17cac:	eor	r2, r2, r4
   17cb0:	eor	r3, r3, r5
   17cb4:	lsl	r1, r3, #1
   17cb8:	orr	r5, r1, r2, lsr #31
   17cbc:	lsl	r2, r2, #1
   17cc0:	orr	r4, r2, r3, lsr #31
   17cc4:	add	r3, sp, #384	; 0x180
   17cc8:	ldrd	r0, [r3]
   17ccc:	ldrd	r2, [sp, #72]	; 0x48
   17cd0:	adds	r0, r0, r2
   17cd4:	adc	r1, r1, r3
   17cd8:	adds	r0, r0, r4
   17cdc:	adc	r1, r1, r5
   17ce0:	mov	r2, r0
   17ce4:	mov	r3, r1
   17ce8:	ldrd	r0, [sp]
   17cec:	strd	r2, [sp, #32]
   17cf0:	eor	r2, r2, r0
   17cf4:	eor	r3, r3, r1
   17cf8:	str	r3, [sp]
   17cfc:	str	r2, [sp, #4]
   17d00:	ldrd	r0, [sp]
   17d04:	adds	r0, r0, r8
   17d08:	adc	r1, r1, r9
   17d0c:	mov	r8, r0
   17d10:	mov	r9, r1
   17d14:	eor	r4, r4, r0
   17d18:	eor	r5, r5, r1
   17d1c:	lsr	ip, r4, #24
   17d20:	orr	r0, ip, r5, lsl #8
   17d24:	lsr	ip, r5, #24
   17d28:	orr	r1, ip, r4, lsl #8
   17d2c:	add	r3, sp, #352	; 0x160
   17d30:	ldrd	r4, [r3]
   17d34:	ldrd	r2, [sp, #32]
   17d38:	adds	r2, r2, r4
   17d3c:	adc	r3, r3, r5
   17d40:	adds	r4, r2, r0
   17d44:	adc	r5, r3, r1
   17d48:	ldrd	r2, [sp]
   17d4c:	strd	r4, [sp, #72]	; 0x48
   17d50:	eor	r2, r2, r4
   17d54:	eor	r3, r3, r5
   17d58:	lsr	ip, r2, #16
   17d5c:	orr	ip, ip, r3, lsl #16
   17d60:	str	ip, [sp]
   17d64:	lsr	r3, r3, #16
   17d68:	orr	r3, r3, r2, lsl #16
   17d6c:	str	r3, [sp, #4]
   17d70:	ldrd	r2, [sp]
   17d74:	adds	r2, r2, r8
   17d78:	adc	r3, r3, r9
   17d7c:	strd	r2, [sp, #80]	; 0x50
   17d80:	eor	r2, r2, r0
   17d84:	eor	r3, r3, r1
   17d88:	mov	r1, r3
   17d8c:	lsl	r3, r3, #1
   17d90:	orr	r3, r3, r2, lsr #31
   17d94:	str	r3, [sp, #36]	; 0x24
   17d98:	lsl	r3, r2, #1
   17d9c:	orr	r3, r3, r1, lsr #31
   17da0:	str	r3, [sp, #32]
   17da4:	add	r3, sp, #304	; 0x130
   17da8:	ldrd	r2, [r3]
   17dac:	ldrd	r4, [sp, #88]	; 0x58
   17db0:	adds	r2, r2, r4
   17db4:	adc	r3, r3, r5
   17db8:	ldrd	r4, [sp, #40]	; 0x28
   17dbc:	adds	r8, r4, r2
   17dc0:	adc	r9, r5, r3
   17dc4:	mov	r2, r8
   17dc8:	mov	r3, r9
   17dcc:	ldrd	r0, [sp, #8]
   17dd0:	eor	r0, r0, r8
   17dd4:	eor	r1, r1, r9
   17dd8:	mov	r8, r1
   17ddc:	mov	r9, r0
   17de0:	adds	r6, r6, r1
   17de4:	adc	r7, r7, r0
   17de8:	eor	r4, r4, r6
   17dec:	eor	r5, r5, r7
   17df0:	lsr	ip, r4, #24
   17df4:	orr	r0, ip, r5, lsl #8
   17df8:	lsr	ip, r5, #24
   17dfc:	orr	r1, ip, r4, lsl #8
   17e00:	add	ip, sp, #336	; 0x150
   17e04:	ldrd	r4, [ip]
   17e08:	adds	r4, r4, r2
   17e0c:	adc	r5, r5, r3
   17e10:	adds	r4, r4, r0
   17e14:	adc	r5, r5, r1
   17e18:	strd	r4, [sp, #88]	; 0x58
   17e1c:	mov	r2, r4
   17e20:	mov	r3, r5
   17e24:	eor	r2, r2, r8
   17e28:	eor	r3, r3, r9
   17e2c:	mov	r9, r3
   17e30:	lsr	ip, r2, #16
   17e34:	orr	r3, ip, r3, lsl #16
   17e38:	str	r3, [sp, #8]
   17e3c:	lsr	r3, r9, #16
   17e40:	orr	r3, r3, r2, lsl #16
   17e44:	str	r3, [sp, #12]
   17e48:	ldrd	r4, [sp, #8]
   17e4c:	adds	r4, r4, r6
   17e50:	adc	r5, r5, r7
   17e54:	mov	r6, r4
   17e58:	mov	r7, r5
   17e5c:	strd	r6, [sp, #120]	; 0x78
   17e60:	eor	r6, r6, r0
   17e64:	eor	r7, r7, r1
   17e68:	lsl	r3, r7, #1
   17e6c:	orr	r3, r3, r6, lsr #31
   17e70:	str	r3, [sp, #44]	; 0x2c
   17e74:	lsl	r3, r6, #1
   17e78:	orr	r3, r3, r7, lsr #31
   17e7c:	str	r3, [sp, #40]	; 0x28
   17e80:	add	r3, sp, #344	; 0x158
   17e84:	ldrd	r2, [r3]
   17e88:	ldrd	r6, [sp, #96]	; 0x60
   17e8c:	adds	r2, r2, r6
   17e90:	adc	r3, r3, r7
   17e94:	ldrd	r4, [sp, #48]	; 0x30
   17e98:	adds	r6, r4, r2
   17e9c:	adc	r7, r5, r3
   17ea0:	mov	r2, r6
   17ea4:	mov	r3, r7
   17ea8:	ldrd	r0, [sp, #24]
   17eac:	eor	r0, r0, r6
   17eb0:	eor	r1, r1, r7
   17eb4:	mov	r8, r1
   17eb8:	mov	r9, r0
   17ebc:	ldrd	r6, [sp, #104]	; 0x68
   17ec0:	adds	r6, r6, r1
   17ec4:	adc	r7, r7, r0
   17ec8:	eor	r4, r4, r6
   17ecc:	eor	r5, r5, r7
   17ed0:	lsr	ip, r4, #24
   17ed4:	orr	r0, ip, r5, lsl #8
   17ed8:	lsr	ip, r5, #24
   17edc:	orr	r1, ip, r4, lsl #8
   17ee0:	add	ip, sp, #392	; 0x188
   17ee4:	ldrd	r4, [ip]
   17ee8:	adds	r4, r4, r2
   17eec:	adc	r5, r5, r3
   17ef0:	adds	r4, r4, r0
   17ef4:	adc	r5, r5, r1
   17ef8:	strd	r4, [sp, #96]	; 0x60
   17efc:	eor	r4, r4, r8
   17f00:	eor	r5, r5, r9
   17f04:	lsr	ip, r4, #16
   17f08:	orr	r3, ip, r5, lsl #16
   17f0c:	str	r3, [sp, #24]
   17f10:	lsr	r3, r5, #16
   17f14:	orr	r3, r3, r4, lsl #16
   17f18:	str	r3, [sp, #28]
   17f1c:	ldrd	r8, [sp, #24]
   17f20:	adds	r8, r8, r6
   17f24:	adc	r9, r9, r7
   17f28:	mov	r6, r8
   17f2c:	mov	r7, r9
   17f30:	eor	r0, r0, r8
   17f34:	eor	r1, r1, r9
   17f38:	lsl	r3, r1, #1
   17f3c:	orr	r3, r3, r0, lsr #31
   17f40:	str	r3, [sp, #52]	; 0x34
   17f44:	lsl	r3, r0, #1
   17f48:	orr	r3, r3, r1, lsr #31
   17f4c:	str	r3, [sp, #48]	; 0x30
   17f50:	add	r3, sp, #376	; 0x178
   17f54:	ldrd	r2, [r3]
   17f58:	ldrd	r8, [sp, #56]	; 0x38
   17f5c:	adds	r2, r2, r8
   17f60:	adc	r3, r3, r9
   17f64:	ldrd	r4, [sp, #64]	; 0x40
   17f68:	adds	r8, r4, r2
   17f6c:	adc	r9, r5, r3
   17f70:	mov	r2, r8
   17f74:	mov	r3, r9
   17f78:	ldrd	r0, [sp, #16]
   17f7c:	eor	r0, r0, r8
   17f80:	eor	r1, r1, r9
   17f84:	str	r1, [sp, #16]
   17f88:	str	r0, [sp, #20]
   17f8c:	ldrd	r8, [sp, #112]	; 0x70
   17f90:	ldrd	r0, [sp, #16]
   17f94:	adds	r8, r8, r0
   17f98:	adc	r9, r9, r1
   17f9c:	eor	r4, r4, r8
   17fa0:	eor	r5, r5, r9
   17fa4:	lsr	ip, r4, #24
   17fa8:	orr	r0, ip, r5, lsl #8
   17fac:	lsr	ip, r5, #24
   17fb0:	orr	r1, ip, r4, lsl #8
   17fb4:	add	ip, sp, #320	; 0x140
   17fb8:	ldrd	r4, [ip]
   17fbc:	adds	r4, r4, r2
   17fc0:	adc	r5, r5, r3
   17fc4:	adds	r4, r4, r0
   17fc8:	adc	r5, r5, r1
   17fcc:	ldrd	r2, [sp, #16]
   17fd0:	strd	r4, [sp, #56]	; 0x38
   17fd4:	eor	r2, r2, r4
   17fd8:	eor	r3, r3, r5
   17fdc:	lsr	ip, r2, #16
   17fe0:	orr	r4, ip, r3, lsl #16
   17fe4:	lsr	r3, r3, #16
   17fe8:	orr	r5, r3, r2, lsl #16
   17fec:	adds	r2, r8, r4
   17ff0:	adc	r3, r9, r5
   17ff4:	mov	r8, r2
   17ff8:	mov	r9, r3
   17ffc:	strd	r8, [sp, #64]	; 0x40
   18000:	eor	r8, r8, r0
   18004:	eor	r9, r9, r1
   18008:	lsl	r3, r9, #1
   1800c:	orr	r3, r3, r8, lsr #31
   18010:	str	r3, [sp, #20]
   18014:	lsl	r3, r8, #1
   18018:	orr	r3, r3, r9, lsr #31
   1801c:	str	r3, [sp, #16]
   18020:	add	r3, sp, #280	; 0x118
   18024:	ldrd	r2, [r3]
   18028:	ldrd	r0, [sp, #72]	; 0x48
   1802c:	adds	r2, r2, r0
   18030:	adc	r3, r3, r1
   18034:	ldrd	r0, [sp, #40]	; 0x28
   18038:	adds	r0, r0, r2
   1803c:	adc	r1, r1, r3
   18040:	mov	r2, r0
   18044:	mov	r3, r1
   18048:	eor	r4, r4, r0
   1804c:	eor	r5, r5, r1
   18050:	mov	r8, r5
   18054:	mov	r9, r4
   18058:	adds	r4, r6, r5
   1805c:	adc	r5, r7, r9
   18060:	ldrd	r6, [sp, #40]	; 0x28
   18064:	eor	r6, r6, r4
   18068:	eor	r7, r7, r5
   1806c:	lsr	ip, r6, #24
   18070:	orr	r0, ip, r7, lsl #8
   18074:	lsr	ip, r7, #24
   18078:	orr	r1, ip, r6, lsl #8
   1807c:	add	ip, sp, #368	; 0x170
   18080:	ldrd	r6, [ip]
   18084:	adds	r6, r6, r2
   18088:	adc	r7, r7, r3
   1808c:	adds	r2, r6, r0
   18090:	adc	r3, r7, r1
   18094:	strd	r2, [sp, #144]	; 0x90
   18098:	eor	r2, r2, r8
   1809c:	eor	r3, r3, r9
   180a0:	lsr	ip, r2, #16
   180a4:	orr	r6, ip, r3, lsl #16
   180a8:	lsr	r3, r3, #16
   180ac:	orr	r7, r3, r2, lsl #16
   180b0:	add	r3, sp, #264	; 0x108
   180b4:	strd	r6, [r3]
   180b8:	adds	r4, r4, r6
   180bc:	adc	r5, r5, r7
   180c0:	strd	r4, [sp, #224]	; 0xe0
   180c4:	eor	r4, r4, r0
   180c8:	eor	r5, r5, r1
   180cc:	lsl	r3, r5, #1
   180d0:	orr	r3, r3, r4, lsr #31
   180d4:	lsl	r2, r4, #1
   180d8:	orr	r2, r2, r5, lsr #31
   180dc:	str	r2, [sp, #184]	; 0xb8
   180e0:	str	r3, [sp, #188]	; 0xbc
   180e4:	add	r3, sp, #272	; 0x110
   180e8:	ldrd	r6, [r3]
   180ec:	ldrd	r0, [sp, #88]	; 0x58
   180f0:	adds	r6, r6, r0
   180f4:	adc	r7, r7, r1
   180f8:	mov	r2, r6
   180fc:	mov	r3, r7
   18100:	ldrd	r6, [sp, #48]	; 0x30
   18104:	adds	r0, r6, r2
   18108:	adc	r1, r7, r3
   1810c:	mov	r2, r0
   18110:	mov	r3, r1
   18114:	ldrd	r0, [sp]
   18118:	eor	r0, r0, r2
   1811c:	eor	r1, r1, r3
   18120:	mov	r8, r1
   18124:	mov	r9, r0
   18128:	ldrd	r4, [sp, #64]	; 0x40
   1812c:	adds	r4, r4, r1
   18130:	adc	r5, r5, r0
   18134:	mov	r0, r6
   18138:	mov	r1, r7
   1813c:	eor	r0, r0, r4
   18140:	eor	r1, r1, r5
   18144:	mov	r6, r0
   18148:	lsr	ip, r0, #24
   1814c:	orr	r0, ip, r1, lsl #8
   18150:	lsr	ip, r1, #24
   18154:	orr	r1, ip, r6, lsl #8
   18158:	add	ip, sp, #288	; 0x120
   1815c:	ldrd	r6, [ip]
   18160:	adds	r6, r6, r2
   18164:	adc	r7, r7, r3
   18168:	adds	r2, r6, r0
   1816c:	adc	r3, r7, r1
   18170:	strd	r2, [sp, #152]	; 0x98
   18174:	eor	r2, r2, r8
   18178:	eor	r3, r3, r9
   1817c:	lsr	ip, r2, #16
   18180:	orr	r6, ip, r3, lsl #16
   18184:	lsr	r3, r3, #16
   18188:	orr	r7, r3, r2, lsl #16
   1818c:	strd	r6, [sp, #240]	; 0xf0
   18190:	adds	r4, r4, r6
   18194:	adc	r5, r5, r7
   18198:	strd	r4, [sp, #232]	; 0xe8
   1819c:	eor	r4, r4, r0
   181a0:	eor	r5, r5, r1
   181a4:	lsl	r3, r5, #1
   181a8:	orr	r3, r3, r4, lsr #31
   181ac:	lsl	r2, r4, #1
   181b0:	orr	r2, r2, r5, lsr #31
   181b4:	str	r2, [sp, #192]	; 0xc0
   181b8:	str	r3, [sp, #196]	; 0xc4
   181bc:	add	r3, sp, #360	; 0x168
   181c0:	ldrd	r2, [r3]
   181c4:	ldrd	r8, [sp, #96]	; 0x60
   181c8:	adds	r2, r2, r8
   181cc:	adc	r3, r3, r9
   181d0:	ldrd	r6, [sp, #16]
   181d4:	adds	r8, r6, r2
   181d8:	adc	r9, r7, r3
   181dc:	mov	r2, r8
   181e0:	mov	r3, r9
   181e4:	ldrd	r0, [sp, #8]
   181e8:	eor	r0, r0, r8
   181ec:	eor	r1, r1, r9
   181f0:	mov	r8, r1
   181f4:	mov	r9, r0
   181f8:	ldrd	r4, [sp, #80]	; 0x50
   181fc:	adds	r4, r4, r1
   18200:	adc	r5, r5, r0
   18204:	mov	r0, r6
   18208:	mov	r1, r7
   1820c:	eor	r0, r0, r4
   18210:	eor	r1, r1, r5
   18214:	mov	r6, r0
   18218:	lsr	ip, r0, #24
   1821c:	orr	r0, ip, r1, lsl #8
   18220:	lsr	ip, r1, #24
   18224:	orr	r1, ip, r6, lsl #8
   18228:	add	ip, sp, #328	; 0x148
   1822c:	ldrd	r6, [ip]
   18230:	adds	r6, r6, r2
   18234:	adc	r7, r7, r3
   18238:	adds	r2, r6, r0
   1823c:	adc	r3, r7, r1
   18240:	strd	r2, [sp, #160]	; 0xa0
   18244:	eor	r2, r2, r8
   18248:	eor	r3, r3, r9
   1824c:	lsr	ip, r2, #16
   18250:	orr	r6, ip, r3, lsl #16
   18254:	lsr	r3, r3, #16
   18258:	orr	r7, r3, r2, lsl #16
   1825c:	strd	r6, [sp, #248]	; 0xf8
   18260:	adds	r4, r4, r6
   18264:	adc	r5, r5, r7
   18268:	strd	r4, [sp, #208]	; 0xd0
   1826c:	eor	r4, r4, r0
   18270:	eor	r5, r5, r1
   18274:	lsl	r3, r5, #1
   18278:	orr	r3, r3, r4, lsr #31
   1827c:	lsl	r2, r4, #1
   18280:	orr	r2, r2, r5, lsr #31
   18284:	str	r2, [sp, #200]	; 0xc8
   18288:	str	r3, [sp, #204]	; 0xcc
   1828c:	add	r3, sp, #312	; 0x138
   18290:	ldrd	r2, [r3]
   18294:	ldrd	r4, [sp, #56]	; 0x38
   18298:	adds	r2, r2, r4
   1829c:	adc	r3, r3, r5
   182a0:	ldrd	r4, [sp, #32]
   182a4:	adds	r4, r4, r2
   182a8:	adc	r5, r5, r3
   182ac:	mov	r2, r4
   182b0:	mov	r3, r5
   182b4:	ldrd	r0, [sp, #24]
   182b8:	eor	r0, r0, r4
   182bc:	eor	r1, r1, r5
   182c0:	mov	r8, r1
   182c4:	mov	r9, r0
   182c8:	ldrd	r6, [sp, #120]	; 0x78
   182cc:	adds	r6, r6, r1
   182d0:	adc	r7, r7, r0
   182d4:	ldrd	r4, [sp, #32]
   182d8:	eor	r4, r4, r6
   182dc:	eor	r5, r5, r7
   182e0:	lsr	ip, r4, #24
   182e4:	orr	r0, ip, r5, lsl #8
   182e8:	lsr	ip, r5, #24
   182ec:	orr	r1, ip, r4, lsl #8
   182f0:	add	ip, sp, #296	; 0x128
   182f4:	ldrd	r4, [ip]
   182f8:	adds	r4, r4, r2
   182fc:	adc	r5, r5, r3
   18300:	adds	r2, r4, r0
   18304:	adc	r3, r5, r1
   18308:	strd	r2, [sp, #168]	; 0xa8
   1830c:	eor	r8, r8, r2
   18310:	eor	r9, r9, r3
   18314:	lsr	ip, r8, #16
   18318:	orr	r2, ip, r9, lsl #16
   1831c:	lsr	ip, r9, #16
   18320:	orr	r3, ip, r8, lsl #16
   18324:	add	ip, sp, #256	; 0x100
   18328:	strd	r2, [ip]
   1832c:	adds	r6, r6, r2
   18330:	adc	r7, r7, r3
   18334:	strd	r6, [sp, #216]	; 0xd8
   18338:	eor	r0, r0, r6
   1833c:	eor	r1, r1, r7
   18340:	lsl	r3, r1, #1
   18344:	orr	r3, r3, r0, lsr #31
   18348:	lsl	r2, r0, #1
   1834c:	orr	r2, r2, r1, lsr #31
   18350:	str	r2, [sp, #176]	; 0xb0
   18354:	str	r3, [sp, #180]	; 0xb4
   18358:	ldrd	r2, [sl], #8
   1835c:	ldrd	r0, [lr, #8]
   18360:	eor	r2, r2, r0
   18364:	eor	r3, r3, r1
   18368:	ldrd	r0, [sl, #56]	; 0x38
   1836c:	eor	r2, r2, r0
   18370:	eor	r3, r3, r1
   18374:	strd	r2, [lr, #8]!
   18378:	cmp	lr, fp
   1837c:	bne	18358 <__assert_fail@plt+0x71cc>
   18380:	add	sp, sp, #404	; 0x194
   18384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18388:	push	{r4, r5, r6, r7, lr}
   1838c:	sub	sp, sp, #12
   18390:	mov	r6, r0
   18394:	mov	r7, r1
   18398:	mov	r2, #240	; 0xf0
   1839c:	mov	r1, #0
   183a0:	bl	110b4 <memset@plt>
   183a4:	ldr	r3, [pc, #96]	; 1840c <__assert_fail@plt+0x7280>
   183a8:	sub	r2, r6, #8
   183ac:	add	lr, r6, #56	; 0x38
   183b0:	mov	ip, r2
   183b4:	ldrd	r0, [r3], #8
   183b8:	strd	r0, [ip, #8]!
   183bc:	cmp	ip, lr
   183c0:	bne	183b4 <__assert_fail@plt+0x7228>
   183c4:	mov	lr, r7
   183c8:	mov	r3, sp
   183cc:	ldr	r0, [lr]
   183d0:	ldr	r1, [lr, #4]
   183d4:	stmia	r3!, {r0, r1}
   183d8:	ldrd	r4, [r2, #8]
   183dc:	ldrd	r0, [sp]
   183e0:	eor	r0, r0, r4
   183e4:	eor	r1, r1, r5
   183e8:	strd	r0, [r2, #8]!
   183ec:	add	lr, lr, #8
   183f0:	cmp	r2, ip
   183f4:	bne	183c8 <__assert_fail@plt+0x723c>
   183f8:	ldrb	r3, [r7]
   183fc:	str	r3, [r6, #228]	; 0xe4
   18400:	mov	r0, #0
   18404:	add	sp, sp, #12
   18408:	pop	{r4, r5, r6, r7, pc}
   1840c:	andeq	sp, r1, r8, asr r6
   18410:	sub	r3, r1, #1
   18414:	cmp	r3, #63	; 0x3f
   18418:	bhi	18490 <__assert_fail@plt+0x7304>
   1841c:	push	{lr}		; (str lr, [sp, #-4]!)
   18420:	sub	sp, sp, #68	; 0x44
   18424:	strb	r1, [sp]
   18428:	mov	r3, #0
   1842c:	strb	r3, [sp, #1]
   18430:	mov	r2, #1
   18434:	strb	r2, [sp, #2]
   18438:	strb	r2, [sp, #3]
   1843c:	str	r3, [sp, #4]
   18440:	str	r3, [sp, #8]
   18444:	str	r3, [sp, #12]
   18448:	strb	r3, [sp, #16]
   1844c:	strb	r3, [sp, #17]
   18450:	str	r3, [sp, #18]
   18454:	str	r3, [sp, #22]
   18458:	str	r3, [sp, #26]
   1845c:	strh	r3, [sp, #30]
   18460:	str	r3, [sp, #32]
   18464:	str	r3, [sp, #36]	; 0x24
   18468:	str	r3, [sp, #40]	; 0x28
   1846c:	str	r3, [sp, #44]	; 0x2c
   18470:	str	r3, [sp, #48]	; 0x30
   18474:	str	r3, [sp, #52]	; 0x34
   18478:	str	r3, [sp, #56]	; 0x38
   1847c:	str	r3, [sp, #60]	; 0x3c
   18480:	mov	r1, sp
   18484:	bl	18388 <__assert_fail@plt+0x71fc>
   18488:	add	sp, sp, #68	; 0x44
   1848c:	pop	{pc}		; (ldr pc, [sp], #4)
   18490:	mvn	r0, #0
   18494:	bx	lr
   18498:	push	{r4, r5, r6, r7, r8, lr}
   1849c:	subs	r7, r2, #0
   184a0:	beq	184e0 <__assert_fail@plt+0x7354>
   184a4:	mov	r4, r0
   184a8:	mov	r8, r1
   184ac:	ldr	r0, [r0, #224]	; 0xe0
   184b0:	rsb	r5, r0, #128	; 0x80
   184b4:	cmp	r7, r5
   184b8:	bhi	184e8 <__assert_fail@plt+0x735c>
   184bc:	add	r0, r4, #96	; 0x60
   184c0:	ldr	r3, [r4, #224]	; 0xe0
   184c4:	mov	r2, r7
   184c8:	mov	r1, r8
   184cc:	add	r0, r0, r3
   184d0:	bl	10f34 <memcpy@plt>
   184d4:	ldr	r3, [r4, #224]	; 0xe0
   184d8:	add	r7, r3, r7
   184dc:	str	r7, [r4, #224]	; 0xe0
   184e0:	mov	r0, #0
   184e4:	pop	{r4, r5, r6, r7, r8, pc}
   184e8:	mov	r3, #0
   184ec:	str	r3, [r4, #224]	; 0xe0
   184f0:	add	r6, r4, #96	; 0x60
   184f4:	mov	r2, r5
   184f8:	add	r0, r6, r0
   184fc:	bl	10f34 <memcpy@plt>
   18500:	ldrd	r2, [r4, #64]	; 0x40
   18504:	adds	r2, r2, #128	; 0x80
   18508:	adc	r3, r3, #0
   1850c:	strd	r2, [r4, #64]	; 0x40
   18510:	cmp	r3, #0
   18514:	cmpeq	r2, #127	; 0x7f
   18518:	movls	r1, #1
   1851c:	movhi	r1, #0
   18520:	ldrd	r2, [r4, #72]	; 0x48
   18524:	adds	r2, r2, r1
   18528:	adc	r3, r3, #0
   1852c:	strd	r2, [r4, #72]	; 0x48
   18530:	mov	r1, r6
   18534:	mov	r0, r4
   18538:	bl	12fe8 <__assert_fail@plt+0x1e5c>
   1853c:	add	r8, r8, r5
   18540:	sub	r7, r7, r5
   18544:	cmp	r7, #128	; 0x80
   18548:	bls	184bc <__assert_fail@plt+0x7330>
   1854c:	mov	r6, r8
   18550:	mov	r5, r7
   18554:	ldrd	r2, [r4, #64]	; 0x40
   18558:	adds	r2, r2, #128	; 0x80
   1855c:	adc	r3, r3, #0
   18560:	strd	r2, [r4, #64]	; 0x40
   18564:	cmp	r3, #0
   18568:	cmpeq	r2, #127	; 0x7f
   1856c:	movls	r1, #1
   18570:	movhi	r1, #0
   18574:	ldrd	r2, [r4, #72]	; 0x48
   18578:	adds	r2, r2, r1
   1857c:	adc	r3, r3, #0
   18580:	strd	r2, [r4, #72]	; 0x48
   18584:	mov	r1, r6
   18588:	mov	r0, r4
   1858c:	bl	12fe8 <__assert_fail@plt+0x1e5c>
   18590:	add	r6, r6, #128	; 0x80
   18594:	sub	r5, r5, #128	; 0x80
   18598:	cmp	r5, #128	; 0x80
   1859c:	bhi	18554 <__assert_fail@plt+0x73c8>
   185a0:	sub	r3, r7, #129	; 0x81
   185a4:	bic	r2, r3, #127	; 0x7f
   185a8:	add	r2, r2, #128	; 0x80
   185ac:	add	r8, r8, r2
   185b0:	sub	r7, r7, #128	; 0x80
   185b4:	bic	r3, r3, #127	; 0x7f
   185b8:	sub	r7, r7, r3
   185bc:	b	184bc <__assert_fail@plt+0x7330>
   185c0:	sub	ip, r1, #1
   185c4:	cmp	ip, #63	; 0x3f
   185c8:	bhi	186c4 <__assert_fail@plt+0x7538>
   185cc:	push	{r4, r5, r6, r7, lr}
   185d0:	sub	sp, sp, #196	; 0xc4
   185d4:	sub	lr, r3, #1
   185d8:	clz	ip, r2
   185dc:	lsr	ip, ip, #5
   185e0:	cmp	lr, #63	; 0x3f
   185e4:	orrhi	ip, ip, #1
   185e8:	cmp	ip, #0
   185ec:	bne	186cc <__assert_fail@plt+0x7540>
   185f0:	mov	r4, r3
   185f4:	mov	r7, r2
   185f8:	mov	r5, r0
   185fc:	strb	r1, [sp, #128]	; 0x80
   18600:	strb	r3, [sp, #129]	; 0x81
   18604:	mov	r3, #1
   18608:	strb	r3, [sp, #130]	; 0x82
   1860c:	strb	r3, [sp, #131]	; 0x83
   18610:	mov	r1, #0
   18614:	str	r1, [sp, #132]	; 0x84
   18618:	str	r1, [sp, #136]	; 0x88
   1861c:	str	r1, [sp, #140]	; 0x8c
   18620:	strb	r1, [sp, #144]	; 0x90
   18624:	strb	r1, [sp, #145]	; 0x91
   18628:	str	r1, [sp, #146]	; 0x92
   1862c:	str	r1, [sp, #150]	; 0x96
   18630:	str	r1, [sp, #154]	; 0x9a
   18634:	strh	r1, [sp, #158]	; 0x9e
   18638:	str	r1, [sp, #160]	; 0xa0
   1863c:	str	r1, [sp, #164]	; 0xa4
   18640:	str	r1, [sp, #168]	; 0xa8
   18644:	str	r1, [sp, #172]	; 0xac
   18648:	str	r1, [sp, #176]	; 0xb0
   1864c:	str	r1, [sp, #180]	; 0xb4
   18650:	str	r1, [sp, #184]	; 0xb8
   18654:	str	r1, [sp, #188]	; 0xbc
   18658:	add	r1, sp, #128	; 0x80
   1865c:	bl	18388 <__assert_fail@plt+0x71fc>
   18660:	cmp	r0, #0
   18664:	blt	186d4 <__assert_fail@plt+0x7548>
   18668:	mov	r6, #128	; 0x80
   1866c:	mov	r2, r6
   18670:	mov	r1, #0
   18674:	mov	r0, sp
   18678:	bl	110b4 <memset@plt>
   1867c:	mov	r3, r6
   18680:	mov	r2, r4
   18684:	mov	r1, r7
   18688:	mov	r0, sp
   1868c:	bl	10fac <__memcpy_chk@plt>
   18690:	mov	r2, r6
   18694:	mov	r1, sp
   18698:	mov	r0, r5
   1869c:	bl	18498 <__assert_fail@plt+0x730c>
   186a0:	ldr	r3, [pc, #52]	; 186dc <__assert_fail@plt+0x7550>
   186a4:	ldr	r3, [r3]
   186a8:	mov	r2, r6
   186ac:	mov	r1, #0
   186b0:	mov	r0, sp
   186b4:	blx	r3
   186b8:	mov	r0, #0
   186bc:	add	sp, sp, #196	; 0xc4
   186c0:	pop	{r4, r5, r6, r7, pc}
   186c4:	mvn	r0, #0
   186c8:	bx	lr
   186cc:	mvn	r0, #0
   186d0:	b	186bc <__assert_fail@plt+0x7530>
   186d4:	mvn	r0, #0
   186d8:	b	186bc <__assert_fail@plt+0x7530>
   186dc:	andeq	lr, r2, r8, lsl r1
   186e0:	push	{r4, r5, r6, r7, lr}
   186e4:	sub	sp, sp, #76	; 0x4c
   186e8:	mov	r4, r0
   186ec:	mov	r5, r1
   186f0:	mov	r6, r2
   186f4:	mov	r2, #64	; 0x40
   186f8:	mov	r1, #0
   186fc:	add	r0, sp, #8
   18700:	bl	110b4 <memset@plt>
   18704:	cmp	r5, #0
   18708:	beq	18808 <__assert_fail@plt+0x767c>
   1870c:	ldr	r3, [r4, #228]	; 0xe4
   18710:	cmp	r3, r6
   18714:	bhi	18810 <__assert_fail@plt+0x7684>
   18718:	ldrd	r2, [r4, #80]	; 0x50
   1871c:	orrs	r3, r2, r3
   18720:	bne	18818 <__assert_fail@plt+0x768c>
   18724:	ldr	r0, [r4, #224]	; 0xe0
   18728:	mov	r7, #0
   1872c:	ldrd	r2, [r4, #64]	; 0x40
   18730:	adds	r2, r2, r0
   18734:	adc	r3, r3, r7
   18738:	strd	r2, [r4, #64]	; 0x40
   1873c:	cmp	r7, r3
   18740:	cmpeq	r0, r2
   18744:	movhi	r1, #1
   18748:	movls	r1, #0
   1874c:	ldrd	r2, [r4, #72]	; 0x48
   18750:	adds	r2, r2, r1
   18754:	adc	r3, r3, #0
   18758:	strd	r2, [r4, #72]	; 0x48
   1875c:	ldrb	r3, [r4, #232]	; 0xe8
   18760:	cmp	r3, #0
   18764:	bne	187f8 <__assert_fail@plt+0x766c>
   18768:	mvn	r2, #0
   1876c:	mvn	r3, #0
   18770:	strd	r2, [r4, #80]	; 0x50
   18774:	add	r6, r4, #96	; 0x60
   18778:	rsb	r2, r0, #128	; 0x80
   1877c:	mov	r1, #0
   18780:	add	r0, r6, r0
   18784:	bl	110b4 <memset@plt>
   18788:	mov	r1, r6
   1878c:	mov	r0, r4
   18790:	bl	12fe8 <__assert_fail@plt+0x1e5c>
   18794:	sub	ip, r4, #8
   18798:	add	r2, sp, #8
   1879c:	add	lr, r4, #56	; 0x38
   187a0:	ldrd	r0, [ip, #8]!
   187a4:	strd	r0, [sp]
   187a8:	mov	r3, sp
   187ac:	ldm	r3!, {r0, r1}
   187b0:	str	r0, [r2]
   187b4:	str	r1, [r2, #4]
   187b8:	add	r2, r2, #8
   187bc:	cmp	ip, lr
   187c0:	bne	187a0 <__assert_fail@plt+0x7614>
   187c4:	ldr	r2, [r4, #228]	; 0xe4
   187c8:	mov	r1, r3
   187cc:	mov	r0, r5
   187d0:	bl	10f34 <memcpy@plt>
   187d4:	ldr	r3, [pc, #68]	; 18820 <__assert_fail@plt+0x7694>
   187d8:	ldr	r3, [r3]
   187dc:	mov	r2, #64	; 0x40
   187e0:	mov	r1, #0
   187e4:	add	r0, sp, #8
   187e8:	blx	r3
   187ec:	mov	r0, #0
   187f0:	add	sp, sp, #76	; 0x4c
   187f4:	pop	{r4, r5, r6, r7, pc}
   187f8:	mvn	r2, #0
   187fc:	mvn	r3, #0
   18800:	strd	r2, [r4, #88]	; 0x58
   18804:	b	18768 <__assert_fail@plt+0x75dc>
   18808:	mvn	r0, #0
   1880c:	b	187f0 <__assert_fail@plt+0x7664>
   18810:	mvn	r0, #0
   18814:	b	187f0 <__assert_fail@plt+0x7664>
   18818:	mvn	r0, #0
   1881c:	b	187f0 <__assert_fail@plt+0x7664>
   18820:	andeq	lr, r2, r8, lsl r1
   18824:	push	{r4, r5, r6, r7, lr}
   18828:	sub	sp, sp, #244	; 0xf4
   1882c:	ldr	ip, [sp, #268]	; 0x10c
   18830:	mov	r6, r3
   18834:	clz	lr, r2
   18838:	lsr	lr, lr, #5
   1883c:	cmp	r3, #0
   18840:	moveq	lr, #0
   18844:	mov	r3, lr
   18848:	cmp	r0, #0
   1884c:	orreq	r3, r3, #1
   18850:	cmp	r3, #0
   18854:	bne	188f4 <__assert_fail@plt+0x7768>
   18858:	mov	r5, r0
   1885c:	ldr	r3, [sp, #264]	; 0x108
   18860:	clz	r3, r3
   18864:	lsr	r3, r3, #5
   18868:	cmp	ip, #0
   1886c:	moveq	r3, #0
   18870:	cmp	r3, #0
   18874:	bne	188fc <__assert_fail@plt+0x7770>
   18878:	sub	r3, r1, #1
   1887c:	cmp	ip, #64	; 0x40
   18880:	cmpls	r3, #63	; 0x3f
   18884:	bhi	18904 <__assert_fail@plt+0x7778>
   18888:	mov	r7, r2
   1888c:	mov	r4, r1
   18890:	cmp	ip, #0
   18894:	beq	188dc <__assert_fail@plt+0x7750>
   18898:	mov	r3, ip
   1889c:	ldr	r2, [sp, #264]	; 0x108
   188a0:	mov	r0, sp
   188a4:	bl	185c0 <__assert_fail@plt+0x7434>
   188a8:	cmp	r0, #0
   188ac:	blt	1890c <__assert_fail@plt+0x7780>
   188b0:	mov	r2, r6
   188b4:	mov	r1, r7
   188b8:	mov	r0, sp
   188bc:	bl	18498 <__assert_fail@plt+0x730c>
   188c0:	mov	r2, r4
   188c4:	mov	r1, r5
   188c8:	mov	r0, sp
   188cc:	bl	186e0 <__assert_fail@plt+0x7554>
   188d0:	mov	r0, #0
   188d4:	add	sp, sp, #244	; 0xf4
   188d8:	pop	{r4, r5, r6, r7, pc}
   188dc:	mov	r0, sp
   188e0:	bl	18410 <__assert_fail@plt+0x7284>
   188e4:	cmp	r0, #0
   188e8:	bge	188b0 <__assert_fail@plt+0x7724>
   188ec:	mvn	r0, #0
   188f0:	b	188d4 <__assert_fail@plt+0x7748>
   188f4:	mvn	r0, #0
   188f8:	b	188d4 <__assert_fail@plt+0x7748>
   188fc:	mvn	r0, #0
   18900:	b	188d4 <__assert_fail@plt+0x7748>
   18904:	mvn	r0, #0
   18908:	b	188d4 <__assert_fail@plt+0x7748>
   1890c:	mvn	r0, #0
   18910:	b	188d4 <__assert_fail@plt+0x7748>
   18914:	push	{lr}		; (str lr, [sp, #-4]!)
   18918:	sub	sp, sp, #12
   1891c:	ldr	ip, [sp, #20]
   18920:	str	ip, [sp, #4]
   18924:	ldr	ip, [sp, #16]
   18928:	str	ip, [sp]
   1892c:	bl	18824 <__assert_fail@plt+0x7698>
   18930:	add	sp, sp, #12
   18934:	pop	{pc}		; (ldr pc, [sp], #4)
   18938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1893c:	sub	sp, sp, #240	; 0xf0
   18940:	mov	r5, r0
   18944:	mov	r9, r1
   18948:	mov	r8, r2
   1894c:	mov	r0, #32768	; 0x8000
   18950:	bl	1bc40 <__assert_fail@plt+0xaab4>
   18954:	subs	r6, r0, #0
   18958:	beq	18a1c <__assert_fail@plt+0x7890>
   1895c:	mov	r1, r8
   18960:	mov	r0, sp
   18964:	bl	18410 <__assert_fail@plt+0x7284>
   18968:	mov	r7, #1
   1896c:	mov	sl, #32768	; 0x8000
   18970:	mov	r4, #0
   18974:	mov	r3, r5
   18978:	rsb	r2, r4, #32768	; 0x8000
   1897c:	mov	r1, r7
   18980:	add	r0, r6, r4
   18984:	bl	10fdc <fread@plt>
   18988:	add	r4, r4, r0
   1898c:	cmp	r4, #32768	; 0x8000
   18990:	beq	189f4 <__assert_fail@plt+0x7868>
   18994:	cmp	r0, #0
   18998:	beq	189dc <__assert_fail@plt+0x7850>
   1899c:	mov	r0, r5
   189a0:	bl	1106c <feof@plt>
   189a4:	cmp	r0, #0
   189a8:	beq	18974 <__assert_fail@plt+0x77e8>
   189ac:	cmp	r4, #0
   189b0:	bne	18a08 <__assert_fail@plt+0x787c>
   189b4:	mov	r2, r8
   189b8:	mov	r1, r9
   189bc:	mov	r0, sp
   189c0:	bl	186e0 <__assert_fail@plt+0x7554>
   189c4:	mov	r4, #0
   189c8:	mov	r0, r6
   189cc:	bl	18d38 <__assert_fail@plt+0x7bac>
   189d0:	mov	r0, r4
   189d4:	add	sp, sp, #240	; 0xf0
   189d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189dc:	mov	r0, r5
   189e0:	bl	10f1c <ferror@plt>
   189e4:	cmp	r0, #0
   189e8:	mvnne	r4, #0
   189ec:	bne	189c8 <__assert_fail@plt+0x783c>
   189f0:	b	189ac <__assert_fail@plt+0x7820>
   189f4:	mov	r2, sl
   189f8:	mov	r1, r6
   189fc:	mov	r0, sp
   18a00:	bl	18498 <__assert_fail@plt+0x730c>
   18a04:	b	18970 <__assert_fail@plt+0x77e4>
   18a08:	mov	r2, r4
   18a0c:	mov	r1, r6
   18a10:	mov	r0, sp
   18a14:	bl	18498 <__assert_fail@plt+0x730c>
   18a18:	b	189b4 <__assert_fail@plt+0x7828>
   18a1c:	mvn	r4, #0
   18a20:	b	189d0 <__assert_fail@plt+0x7844>
   18a24:	ldr	r3, [pc, #4]	; 18a30 <__assert_fail@plt+0x78a4>
   18a28:	str	r0, [r3]
   18a2c:	bx	lr
   18a30:	andeq	lr, r2, ip, lsr #3
   18a34:	ldr	r3, [pc, #4]	; 18a40 <__assert_fail@plt+0x78b4>
   18a38:	strb	r0, [r3, #4]
   18a3c:	bx	lr
   18a40:	andeq	lr, r2, ip, lsr #3
   18a44:	push	{r4, r5, r6, lr}
   18a48:	sub	sp, sp, #8
   18a4c:	ldr	r3, [pc, #200]	; 18b1c <__assert_fail@plt+0x7990>
   18a50:	ldr	r0, [r3]
   18a54:	bl	1bcc0 <__assert_fail@plt+0xab34>
   18a58:	cmp	r0, #0
   18a5c:	beq	18a80 <__assert_fail@plt+0x78f4>
   18a60:	ldr	r3, [pc, #184]	; 18b20 <__assert_fail@plt+0x7994>
   18a64:	ldrb	r3, [r3, #4]
   18a68:	cmp	r3, #0
   18a6c:	beq	18a9c <__assert_fail@plt+0x7910>
   18a70:	bl	11090 <__errno_location@plt>
   18a74:	ldr	r3, [r0]
   18a78:	cmp	r3, #32
   18a7c:	bne	18a9c <__assert_fail@plt+0x7910>
   18a80:	ldr	r3, [pc, #156]	; 18b24 <__assert_fail@plt+0x7998>
   18a84:	ldr	r0, [r3]
   18a88:	bl	1bcc0 <__assert_fail@plt+0xab34>
   18a8c:	cmp	r0, #0
   18a90:	bne	18b10 <__assert_fail@plt+0x7984>
   18a94:	add	sp, sp, #8
   18a98:	pop	{r4, r5, r6, pc}
   18a9c:	mov	r2, #5
   18aa0:	ldr	r1, [pc, #128]	; 18b28 <__assert_fail@plt+0x799c>
   18aa4:	mov	r0, #0
   18aa8:	bl	10f7c <dcgettext@plt>
   18aac:	mov	r4, r0
   18ab0:	ldr	r3, [pc, #104]	; 18b20 <__assert_fail@plt+0x7994>
   18ab4:	ldr	r5, [r3]
   18ab8:	cmp	r5, #0
   18abc:	beq	18af4 <__assert_fail@plt+0x7968>
   18ac0:	bl	11090 <__errno_location@plt>
   18ac4:	ldr	r6, [r0]
   18ac8:	mov	r0, r5
   18acc:	bl	1a800 <__assert_fail@plt+0x9674>
   18ad0:	str	r4, [sp]
   18ad4:	mov	r3, r0
   18ad8:	ldr	r2, [pc, #76]	; 18b2c <__assert_fail@plt+0x79a0>
   18adc:	mov	r1, r6
   18ae0:	mov	r0, #0
   18ae4:	bl	11000 <error@plt>
   18ae8:	ldr	r3, [pc, #64]	; 18b30 <__assert_fail@plt+0x79a4>
   18aec:	ldr	r0, [r3]
   18af0:	bl	10f28 <_exit@plt>
   18af4:	bl	11090 <__errno_location@plt>
   18af8:	mov	r3, r4
   18afc:	ldr	r2, [pc, #48]	; 18b34 <__assert_fail@plt+0x79a8>
   18b00:	ldr	r1, [r0]
   18b04:	mov	r0, #0
   18b08:	bl	11000 <error@plt>
   18b0c:	b	18ae8 <__assert_fail@plt+0x795c>
   18b10:	ldr	r3, [pc, #24]	; 18b30 <__assert_fail@plt+0x79a4>
   18b14:	ldr	r0, [r3]
   18b18:	bl	10f28 <_exit@plt>
   18b1c:	andeq	lr, r2, r4, lsl #3
   18b20:	andeq	lr, r2, ip, lsr #3
   18b24:	andeq	lr, r2, r8, ror r1
   18b28:	andeq	sp, r1, r8, lsr #13
   18b2c:			; <UNDEFINED> instruction: 0x0001d6b4
   18b30:	andeq	lr, r2, r0, lsr #2
   18b34:	andeq	sp, r1, ip, asr #1
   18b38:	push	{r4, r5, lr}
   18b3c:	sub	sp, sp, #20
   18b40:	ldr	r1, [sp, #40]	; 0x28
   18b44:	str	r1, [sp, #8]
   18b48:	ldrd	r4, [sp, #32]
   18b4c:	strd	r4, [sp]
   18b50:	bl	10ef8 <posix_fadvise64@plt>
   18b54:	add	sp, sp, #20
   18b58:	pop	{r4, r5, pc}
   18b5c:	cmp	r0, #0
   18b60:	bxeq	lr
   18b64:	push	{r4, lr}
   18b68:	sub	sp, sp, #16
   18b6c:	mov	r4, r1
   18b70:	bl	110cc <fileno@plt>
   18b74:	str	r4, [sp, #8]
   18b78:	mov	r2, #0
   18b7c:	mov	r3, #0
   18b80:	strd	r2, [sp]
   18b84:	bl	10ef8 <posix_fadvise64@plt>
   18b88:	add	sp, sp, #16
   18b8c:	pop	{r4, pc}
   18b90:	push	{r4, r5, r6, lr}
   18b94:	sub	sp, sp, #8
   18b98:	mov	r4, r0
   18b9c:	bl	110cc <fileno@plt>
   18ba0:	cmp	r0, #0
   18ba4:	blt	18c1c <__assert_fail@plt+0x7a90>
   18ba8:	mov	r0, r4
   18bac:	bl	11024 <__freading@plt>
   18bb0:	cmp	r0, #0
   18bb4:	beq	18be8 <__assert_fail@plt+0x7a5c>
   18bb8:	mov	r0, r4
   18bbc:	bl	110cc <fileno@plt>
   18bc0:	mov	r3, #1
   18bc4:	str	r3, [sp]
   18bc8:	mov	r2, #0
   18bcc:	mov	r3, #0
   18bd0:	bl	10fc4 <lseek64@plt>
   18bd4:	mvn	r2, #0
   18bd8:	mvn	r3, #0
   18bdc:	cmp	r1, r3
   18be0:	cmpeq	r0, r2
   18be4:	beq	18c28 <__assert_fail@plt+0x7a9c>
   18be8:	mov	r0, r4
   18bec:	bl	18c38 <__assert_fail@plt+0x7aac>
   18bf0:	cmp	r0, #0
   18bf4:	beq	18c28 <__assert_fail@plt+0x7a9c>
   18bf8:	bl	11090 <__errno_location@plt>
   18bfc:	mov	r5, r0
   18c00:	ldr	r6, [r0]
   18c04:	mov	r0, r4
   18c08:	bl	110e4 <fclose@plt>
   18c0c:	cmp	r6, #0
   18c10:	strne	r6, [r5]
   18c14:	mvnne	r0, #0
   18c18:	b	18c30 <__assert_fail@plt+0x7aa4>
   18c1c:	mov	r0, r4
   18c20:	bl	110e4 <fclose@plt>
   18c24:	b	18c30 <__assert_fail@plt+0x7aa4>
   18c28:	mov	r0, r4
   18c2c:	bl	110e4 <fclose@plt>
   18c30:	add	sp, sp, #8
   18c34:	pop	{r4, r5, r6, pc}
   18c38:	push	{r4, lr}
   18c3c:	sub	sp, sp, #8
   18c40:	subs	r4, r0, #0
   18c44:	beq	18c58 <__assert_fail@plt+0x7acc>
   18c48:	mov	r0, r4
   18c4c:	bl	11024 <__freading@plt>
   18c50:	cmp	r0, #0
   18c54:	bne	18c68 <__assert_fail@plt+0x7adc>
   18c58:	mov	r0, r4
   18c5c:	bl	10f04 <fflush@plt>
   18c60:	add	sp, sp, #8
   18c64:	pop	{r4, pc}
   18c68:	ldr	r3, [r4]
   18c6c:	tst	r3, #256	; 0x100
   18c70:	bne	18c80 <__assert_fail@plt+0x7af4>
   18c74:	mov	r0, r4
   18c78:	bl	10f04 <fflush@plt>
   18c7c:	b	18c60 <__assert_fail@plt+0x7ad4>
   18c80:	mov	r3, #1
   18c84:	str	r3, [sp]
   18c88:	mov	r2, #0
   18c8c:	mov	r3, #0
   18c90:	mov	r0, r4
   18c94:	bl	18d90 <__assert_fail@plt+0x7c04>
   18c98:	b	18c74 <__assert_fail@plt+0x7ae8>
   18c9c:	push	{r4, r5, r6, lr}
   18ca0:	mov	r5, r1
   18ca4:	bl	11144 <fopen64@plt>
   18ca8:	subs	r4, r0, #0
   18cac:	beq	18cc0 <__assert_fail@plt+0x7b34>
   18cb0:	mov	r0, r4
   18cb4:	bl	110cc <fileno@plt>
   18cb8:	cmp	r0, #2
   18cbc:	bls	18cc8 <__assert_fail@plt+0x7b3c>
   18cc0:	mov	r0, r4
   18cc4:	pop	{r4, r5, r6, pc}
   18cc8:	bl	1a99c <__assert_fail@plt+0x9810>
   18ccc:	subs	r6, r0, #0
   18cd0:	blt	18d18 <__assert_fail@plt+0x7b8c>
   18cd4:	mov	r0, r4
   18cd8:	bl	18b90 <__assert_fail@plt+0x7a04>
   18cdc:	cmp	r0, #0
   18ce0:	bne	18cf8 <__assert_fail@plt+0x7b6c>
   18ce4:	mov	r1, r5
   18ce8:	mov	r0, r6
   18cec:	bl	10eb0 <fdopen@plt>
   18cf0:	subs	r4, r0, #0
   18cf4:	bne	18cc0 <__assert_fail@plt+0x7b34>
   18cf8:	bl	11090 <__errno_location@plt>
   18cfc:	mov	r4, r0
   18d00:	ldr	r5, [r0]
   18d04:	mov	r0, r6
   18d08:	bl	11174 <close@plt>
   18d0c:	str	r5, [r4]
   18d10:	mov	r4, #0
   18d14:	b	18cc0 <__assert_fail@plt+0x7b34>
   18d18:	bl	11090 <__errno_location@plt>
   18d1c:	mov	r5, r0
   18d20:	ldr	r6, [r0]
   18d24:	mov	r0, r4
   18d28:	bl	18b90 <__assert_fail@plt+0x7a04>
   18d2c:	str	r6, [r5]
   18d30:	mov	r4, #0
   18d34:	b	18cc0 <__assert_fail@plt+0x7b34>
   18d38:	push	{r4, r5, lr}
   18d3c:	sub	sp, sp, #12
   18d40:	mov	r5, r0
   18d44:	bl	11090 <__errno_location@plt>
   18d48:	mov	r4, r0
   18d4c:	ldr	r3, [r0]
   18d50:	str	r3, [sp]
   18d54:	str	r3, [sp, #4]
   18d58:	mov	r3, #0
   18d5c:	str	r3, [r0]
   18d60:	mov	r0, r5
   18d64:	bl	10f10 <free@plt>
   18d68:	ldr	r3, [r4]
   18d6c:	cmp	r3, #0
   18d70:	moveq	r3, #4
   18d74:	movne	r3, #0
   18d78:	add	r2, sp, #8
   18d7c:	add	r3, r2, r3
   18d80:	ldr	r3, [r3, #-8]
   18d84:	str	r3, [r4]
   18d88:	add	sp, sp, #12
   18d8c:	pop	{r4, r5, pc}
   18d90:	push	{r4, r5, r6, r7, lr}
   18d94:	sub	sp, sp, #12
   18d98:	mov	r4, r0
   18d9c:	mov	r6, r2
   18da0:	mov	r7, r3
   18da4:	ldr	r5, [sp, #32]
   18da8:	ldr	r2, [r0, #8]
   18dac:	ldr	r3, [r0, #4]
   18db0:	cmp	r2, r3
   18db4:	beq	18dd4 <__assert_fail@plt+0x7c48>
   18db8:	str	r5, [sp]
   18dbc:	mov	r2, r6
   18dc0:	mov	r3, r7
   18dc4:	mov	r0, r4
   18dc8:	bl	110f0 <fseeko64@plt>
   18dcc:	add	sp, sp, #12
   18dd0:	pop	{r4, r5, r6, r7, pc}
   18dd4:	ldr	r2, [r0, #20]
   18dd8:	ldr	r3, [r0, #16]
   18ddc:	cmp	r2, r3
   18de0:	bne	18db8 <__assert_fail@plt+0x7c2c>
   18de4:	ldr	r3, [r0, #36]	; 0x24
   18de8:	cmp	r3, #0
   18dec:	bne	18db8 <__assert_fail@plt+0x7c2c>
   18df0:	bl	110cc <fileno@plt>
   18df4:	str	r5, [sp]
   18df8:	mov	r2, r6
   18dfc:	mov	r3, r7
   18e00:	bl	10fc4 <lseek64@plt>
   18e04:	mvn	r2, #0
   18e08:	mvn	r3, #0
   18e0c:	cmp	r1, r3
   18e10:	cmpeq	r0, r2
   18e14:	beq	18e30 <__assert_fail@plt+0x7ca4>
   18e18:	ldr	r3, [r4]
   18e1c:	bic	r3, r3, #16
   18e20:	str	r3, [r4]
   18e24:	strd	r0, [r4, #80]	; 0x50
   18e28:	mov	r0, #0
   18e2c:	b	18dcc <__assert_fail@plt+0x7c40>
   18e30:	mvn	r0, #0
   18e34:	b	18dcc <__assert_fail@plt+0x7c40>
   18e38:	push	{r4, r5, r6, lr}
   18e3c:	subs	r4, r0, #0
   18e40:	beq	18eb8 <__assert_fail@plt+0x7d2c>
   18e44:	mov	r1, #47	; 0x2f
   18e48:	mov	r0, r4
   18e4c:	bl	11120 <strrchr@plt>
   18e50:	cmp	r0, #0
   18e54:	addne	r5, r0, #1
   18e58:	moveq	r5, r4
   18e5c:	sub	r3, r5, r4
   18e60:	cmp	r3, #6
   18e64:	ble	18ea4 <__assert_fail@plt+0x7d18>
   18e68:	mov	r2, #7
   18e6c:	ldr	r1, [pc, #96]	; 18ed4 <__assert_fail@plt+0x7d48>
   18e70:	sub	r0, r5, #7
   18e74:	bl	1115c <strncmp@plt>
   18e78:	cmp	r0, #0
   18e7c:	bne	18ea4 <__assert_fail@plt+0x7d18>
   18e80:	mov	r2, #3
   18e84:	ldr	r1, [pc, #76]	; 18ed8 <__assert_fail@plt+0x7d4c>
   18e88:	mov	r0, r5
   18e8c:	bl	1115c <strncmp@plt>
   18e90:	cmp	r0, #0
   18e94:	addeq	r4, r5, #3
   18e98:	ldreq	r3, [pc, #60]	; 18edc <__assert_fail@plt+0x7d50>
   18e9c:	streq	r4, [r3]
   18ea0:	movne	r4, r5
   18ea4:	ldr	r3, [pc, #52]	; 18ee0 <__assert_fail@plt+0x7d54>
   18ea8:	str	r4, [r3]
   18eac:	ldr	r3, [pc, #48]	; 18ee4 <__assert_fail@plt+0x7d58>
   18eb0:	str	r4, [r3]
   18eb4:	pop	{r4, r5, r6, pc}
   18eb8:	ldr	r3, [pc, #40]	; 18ee8 <__assert_fail@plt+0x7d5c>
   18ebc:	ldr	r3, [r3]
   18ec0:	mov	r2, #55	; 0x37
   18ec4:	mov	r1, #1
   18ec8:	ldr	r0, [pc, #28]	; 18eec <__assert_fail@plt+0x7d60>
   18ecc:	bl	10fb8 <fwrite@plt>
   18ed0:	bl	11168 <abort@plt>
   18ed4:	strdeq	sp, [r1], -r4
   18ed8:	strdeq	sp, [r1], -ip
   18edc:	andeq	lr, r2, r8, ror #2
   18ee0:			; <UNDEFINED> instruction: 0x0002e1b4
   18ee4:	andeq	lr, r2, ip, ror #2
   18ee8:	andeq	lr, r2, r8, ror r1
   18eec:			; <UNDEFINED> instruction: 0x0001d6bc
   18ef0:	push	{r4, r5, r6, lr}
   18ef4:	mov	r5, r0
   18ef8:	mov	r4, r1
   18efc:	mov	r2, #48	; 0x30
   18f00:	mov	r1, #0
   18f04:	bl	110b4 <memset@plt>
   18f08:	cmp	r4, #10
   18f0c:	beq	18f1c <__assert_fail@plt+0x7d90>
   18f10:	str	r4, [r5]
   18f14:	mov	r0, r5
   18f18:	pop	{r4, r5, r6, pc}
   18f1c:	bl	11168 <abort@plt>
   18f20:	push	{r4, r5, r6, lr}
   18f24:	mov	r4, r0
   18f28:	mov	r5, r1
   18f2c:	mov	r2, #5
   18f30:	mov	r1, r0
   18f34:	mov	r0, #0
   18f38:	bl	10f7c <dcgettext@plt>
   18f3c:	cmp	r4, r0
   18f40:	popne	{r4, r5, r6, pc}
   18f44:	bl	1bf90 <__assert_fail@plt+0xae04>
   18f48:	ldrb	r3, [r0]
   18f4c:	bic	r3, r3, #32
   18f50:	cmp	r3, #85	; 0x55
   18f54:	beq	18fd0 <__assert_fail@plt+0x7e44>
   18f58:	cmp	r3, #71	; 0x47
   18f5c:	bne	1902c <__assert_fail@plt+0x7ea0>
   18f60:	ldrb	r3, [r0, #1]
   18f64:	bic	r3, r3, #32
   18f68:	cmp	r3, #66	; 0x42
   18f6c:	bne	1902c <__assert_fail@plt+0x7ea0>
   18f70:	ldrb	r3, [r0, #2]
   18f74:	cmp	r3, #49	; 0x31
   18f78:	bne	1902c <__assert_fail@plt+0x7ea0>
   18f7c:	ldrb	r3, [r0, #3]
   18f80:	cmp	r3, #56	; 0x38
   18f84:	bne	1902c <__assert_fail@plt+0x7ea0>
   18f88:	ldrb	r3, [r0, #4]
   18f8c:	cmp	r3, #48	; 0x30
   18f90:	bne	1902c <__assert_fail@plt+0x7ea0>
   18f94:	ldrb	r3, [r0, #5]
   18f98:	cmp	r3, #51	; 0x33
   18f9c:	bne	1902c <__assert_fail@plt+0x7ea0>
   18fa0:	ldrb	r3, [r0, #6]
   18fa4:	cmp	r3, #48	; 0x30
   18fa8:	bne	1902c <__assert_fail@plt+0x7ea0>
   18fac:	ldrb	r3, [r0, #7]
   18fb0:	cmp	r3, #0
   18fb4:	bne	1902c <__assert_fail@plt+0x7ea0>
   18fb8:	ldrb	r2, [r4]
   18fbc:	ldr	r3, [pc, #124]	; 19040 <__assert_fail@plt+0x7eb4>
   18fc0:	ldr	r0, [pc, #124]	; 19044 <__assert_fail@plt+0x7eb8>
   18fc4:	cmp	r2, #96	; 0x60
   18fc8:	movne	r0, r3
   18fcc:	pop	{r4, r5, r6, pc}
   18fd0:	ldrb	r3, [r0, #1]
   18fd4:	bic	r3, r3, #32
   18fd8:	cmp	r3, #84	; 0x54
   18fdc:	bne	1902c <__assert_fail@plt+0x7ea0>
   18fe0:	ldrb	r3, [r0, #2]
   18fe4:	bic	r3, r3, #32
   18fe8:	cmp	r3, #70	; 0x46
   18fec:	bne	1902c <__assert_fail@plt+0x7ea0>
   18ff0:	ldrb	r3, [r0, #3]
   18ff4:	cmp	r3, #45	; 0x2d
   18ff8:	bne	1902c <__assert_fail@plt+0x7ea0>
   18ffc:	ldrb	r3, [r0, #4]
   19000:	cmp	r3, #56	; 0x38
   19004:	bne	1902c <__assert_fail@plt+0x7ea0>
   19008:	ldrb	r3, [r0, #5]
   1900c:	cmp	r3, #0
   19010:	bne	1902c <__assert_fail@plt+0x7ea0>
   19014:	ldrb	r2, [r4]
   19018:	ldr	r3, [pc, #40]	; 19048 <__assert_fail@plt+0x7ebc>
   1901c:	ldr	r0, [pc, #40]	; 1904c <__assert_fail@plt+0x7ec0>
   19020:	cmp	r2, #96	; 0x60
   19024:	movne	r0, r3
   19028:	pop	{r4, r5, r6, pc}
   1902c:	ldr	r3, [pc, #28]	; 19050 <__assert_fail@plt+0x7ec4>
   19030:	ldr	r0, [pc, #28]	; 19054 <__assert_fail@plt+0x7ec8>
   19034:	cmp	r5, #9
   19038:	movne	r0, r3
   1903c:	pop	{r4, r5, r6, pc}
   19040:	andeq	sp, r1, r8, asr r7
   19044:	andeq	sp, r1, r4, ror #14
   19048:	andeq	sp, r1, r4, asr r7
   1904c:	andeq	sp, r1, r8, ror #14
   19050:	andeq	sp, r1, ip, asr r7
   19054:	andeq	sp, r1, r0, ror #14
   19058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1905c:	sub	sp, sp, #116	; 0x74
   19060:	str	r0, [sp, #36]	; 0x24
   19064:	mov	sl, r1
   19068:	str	r2, [sp, #52]	; 0x34
   1906c:	str	r3, [sp, #28]
   19070:	ldr	r8, [sp, #152]	; 0x98
   19074:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   19078:	str	r0, [sp, #84]	; 0x54
   1907c:	ldr	r3, [sp, #156]	; 0x9c
   19080:	lsr	r3, r3, #1
   19084:	and	r3, r3, #1
   19088:	str	r3, [sp, #32]
   1908c:	mov	r3, #1
   19090:	str	r3, [sp, #40]	; 0x28
   19094:	mov	r3, #0
   19098:	str	r3, [sp, #80]	; 0x50
   1909c:	str	r3, [sp, #44]	; 0x2c
   190a0:	str	r3, [sp, #48]	; 0x30
   190a4:	str	r3, [sp, #60]	; 0x3c
   190a8:	str	r3, [sp, #72]	; 0x48
   190ac:	str	r3, [sp, #76]	; 0x4c
   190b0:	mov	r7, sl
   190b4:	mov	sl, r8
   190b8:	cmp	sl, #10
   190bc:	ldrls	pc, [pc, sl, lsl #2]
   190c0:	b	19278 <__assert_fail@plt+0x80ec>
   190c4:	andeq	r9, r1, r8, lsr #2
   190c8:	strdeq	r9, [r1], -r8
   190cc:	andeq	r9, r1, r4, asr r2
   190d0:	strdeq	r9, [r1], -r0
   190d4:	andeq	r9, r1, r8, lsl #4
   190d8:	andeq	r9, r1, r8, lsr r1
   190dc:	andeq	sl, r1, r4, lsr #3
   190e0:	andeq	r9, r1, ip, ror r2
   190e4:	andeq	r9, r1, r4, ror r1
   190e8:	andeq	r9, r1, r4, ror r1
   190ec:	andeq	r9, r1, r4, ror r1
   190f0:	mov	r3, #1
   190f4:	str	r3, [sp, #48]	; 0x30
   190f8:	mov	r3, #1
   190fc:	str	r3, [sp, #32]
   19100:	str	r3, [sp, #60]	; 0x3c
   19104:	ldr	r3, [pc, #4068]	; 1a0f0 <__assert_fail@plt+0x8f64>
   19108:	str	r3, [sp, #72]	; 0x48
   1910c:	mov	fp, #0
   19110:	mov	sl, #2
   19114:	mov	r6, #0
   19118:	ldr	r3, [sp, #48]	; 0x30
   1911c:	eor	r3, r3, #1
   19120:	str	r3, [sp, #68]	; 0x44
   19124:	b	19a0c <__assert_fail@plt+0x8880>
   19128:	mov	r3, #0
   1912c:	str	r3, [sp, #32]
   19130:	mov	fp, r3
   19134:	b	19114 <__assert_fail@plt+0x7f88>
   19138:	ldr	r3, [sp, #32]
   1913c:	cmp	r3, #0
   19140:	bne	19294 <__assert_fail@plt+0x8108>
   19144:	cmp	r7, #0
   19148:	beq	192b4 <__assert_fail@plt+0x8128>
   1914c:	ldr	r3, [sp, #36]	; 0x24
   19150:	mov	r2, #34	; 0x22
   19154:	strb	r2, [r3]
   19158:	mov	r3, #1
   1915c:	str	r3, [sp, #48]	; 0x30
   19160:	str	r3, [sp, #60]	; 0x3c
   19164:	ldr	r3, [pc, #3980]	; 1a0f8 <__assert_fail@plt+0x8f6c>
   19168:	str	r3, [sp, #72]	; 0x48
   1916c:	mov	fp, #1
   19170:	b	19114 <__assert_fail@plt+0x7f88>
   19174:	cmp	sl, #10
   19178:	beq	1919c <__assert_fail@plt+0x8010>
   1917c:	mov	r1, sl
   19180:	ldr	r0, [pc, #3948]	; 1a0f4 <__assert_fail@plt+0x8f68>
   19184:	bl	18f20 <__assert_fail@plt+0x7d94>
   19188:	str	r0, [sp, #164]	; 0xa4
   1918c:	mov	r1, sl
   19190:	ldr	r0, [pc, #3928]	; 1a0f0 <__assert_fail@plt+0x8f64>
   19194:	bl	18f20 <__assert_fail@plt+0x7d94>
   19198:	str	r0, [sp, #168]	; 0xa8
   1919c:	ldr	r3, [sp, #32]
   191a0:	cmp	r3, #0
   191a4:	movne	fp, #0
   191a8:	bne	191e0 <__assert_fail@plt+0x8054>
   191ac:	ldr	r3, [sp, #164]	; 0xa4
   191b0:	ldrb	r3, [r3]
   191b4:	cmp	r3, #0
   191b8:	beq	19200 <__assert_fail@plt+0x8074>
   191bc:	ldr	r2, [sp, #164]	; 0xa4
   191c0:	mov	fp, #0
   191c4:	ldr	r1, [sp, #36]	; 0x24
   191c8:	cmp	r7, fp
   191cc:	strbhi	r3, [r1, fp]
   191d0:	add	fp, fp, #1
   191d4:	ldrb	r3, [r2, #1]!
   191d8:	cmp	r3, #0
   191dc:	bne	191c8 <__assert_fail@plt+0x803c>
   191e0:	ldr	r0, [sp, #168]	; 0xa8
   191e4:	bl	11078 <strlen@plt>
   191e8:	str	r0, [sp, #60]	; 0x3c
   191ec:	ldr	r3, [sp, #168]	; 0xa8
   191f0:	str	r3, [sp, #72]	; 0x48
   191f4:	mov	r3, #1
   191f8:	str	r3, [sp, #48]	; 0x30
   191fc:	b	19114 <__assert_fail@plt+0x7f88>
   19200:	mov	fp, #0
   19204:	b	191e0 <__assert_fail@plt+0x8054>
   19208:	ldr	r3, [sp, #32]
   1920c:	cmp	r3, #0
   19210:	bne	192d0 <__assert_fail@plt+0x8144>
   19214:	mov	r3, #1
   19218:	str	r3, [sp, #48]	; 0x30
   1921c:	cmp	r7, #0
   19220:	beq	192ec <__assert_fail@plt+0x8160>
   19224:	ldr	r3, [sp, #36]	; 0x24
   19228:	mov	r2, #39	; 0x27
   1922c:	strb	r2, [r3]
   19230:	mov	r3, #0
   19234:	str	r3, [sp, #32]
   19238:	mov	r3, #1
   1923c:	str	r3, [sp, #60]	; 0x3c
   19240:	ldr	r3, [pc, #3752]	; 1a0f0 <__assert_fail@plt+0x8f64>
   19244:	str	r3, [sp, #72]	; 0x48
   19248:	mov	fp, #1
   1924c:	mov	sl, #2
   19250:	b	19114 <__assert_fail@plt+0x7f88>
   19254:	ldr	r3, [sp, #32]
   19258:	cmp	r3, #0
   1925c:	beq	1921c <__assert_fail@plt+0x8090>
   19260:	mov	r3, #1
   19264:	str	r3, [sp, #60]	; 0x3c
   19268:	ldr	r3, [pc, #3712]	; 1a0f0 <__assert_fail@plt+0x8f64>
   1926c:	str	r3, [sp, #72]	; 0x48
   19270:	mov	fp, #0
   19274:	b	19114 <__assert_fail@plt+0x7f88>
   19278:	bl	11168 <abort@plt>
   1927c:	mov	r3, #0
   19280:	str	r3, [sp, #32]
   19284:	mov	r3, #1
   19288:	str	r3, [sp, #48]	; 0x30
   1928c:	mov	fp, #0
   19290:	b	19114 <__assert_fail@plt+0x7f88>
   19294:	ldr	r3, [sp, #32]
   19298:	str	r3, [sp, #48]	; 0x30
   1929c:	mov	r3, #1
   192a0:	str	r3, [sp, #60]	; 0x3c
   192a4:	ldr	r3, [pc, #3660]	; 1a0f8 <__assert_fail@plt+0x8f6c>
   192a8:	str	r3, [sp, #72]	; 0x48
   192ac:	mov	fp, #0
   192b0:	b	19114 <__assert_fail@plt+0x7f88>
   192b4:	mov	r3, #1
   192b8:	str	r3, [sp, #48]	; 0x30
   192bc:	str	r3, [sp, #60]	; 0x3c
   192c0:	ldr	r3, [pc, #3632]	; 1a0f8 <__assert_fail@plt+0x8f6c>
   192c4:	str	r3, [sp, #72]	; 0x48
   192c8:	mov	fp, #1
   192cc:	b	19114 <__assert_fail@plt+0x7f88>
   192d0:	mov	r3, #1
   192d4:	str	r3, [sp, #60]	; 0x3c
   192d8:	ldr	r3, [pc, #3600]	; 1a0f0 <__assert_fail@plt+0x8f64>
   192dc:	str	r3, [sp, #72]	; 0x48
   192e0:	mov	fp, #0
   192e4:	mov	sl, #2
   192e8:	b	19114 <__assert_fail@plt+0x7f88>
   192ec:	mov	r3, #0
   192f0:	str	r3, [sp, #32]
   192f4:	mov	r3, #1
   192f8:	str	r3, [sp, #60]	; 0x3c
   192fc:	ldr	r3, [pc, #3564]	; 1a0f0 <__assert_fail@plt+0x8f64>
   19300:	str	r3, [sp, #72]	; 0x48
   19304:	mov	fp, #1
   19308:	mov	sl, #2
   1930c:	b	19114 <__assert_fail@plt+0x7f88>
   19310:	mov	r3, #0
   19314:	str	r3, [sp, #56]	; 0x38
   19318:	ldr	r3, [sp, #52]	; 0x34
   1931c:	add	r2, r3, r6
   19320:	str	r2, [sp, #64]	; 0x40
   19324:	ldrb	r4, [r3, r6]
   19328:	cmp	r4, #126	; 0x7e
   1932c:	ldrls	pc, [pc, r4, lsl #2]
   19330:	b	19b6c <__assert_fail@plt+0x89e0>
   19334:	andeq	r9, r1, ip, asr #10
   19338:	andeq	r9, r1, ip, ror #22
   1933c:	andeq	r9, r1, ip, ror #22
   19340:	andeq	r9, r1, ip, ror #22
   19344:	andeq	r9, r1, ip, ror #22
   19348:	andeq	r9, r1, ip, ror #22
   1934c:	andeq	r9, r1, ip, ror #22
   19350:	andeq	r9, r1, r8, lsr #17
   19354:	andeq	r9, r1, r4, asr #10
   19358:	andeq	r9, r1, r0, ror #16
   1935c:	andeq	r9, r1, r8, asr r8
   19360:	andeq	r9, r1, r8, asr #15
   19364:	andeq	r9, r1, r0, asr #15
   19368:	andeq	r9, r1, ip, lsr r5
   1936c:	andeq	r9, r1, ip, ror #22
   19370:	andeq	r9, r1, ip, ror #22
   19374:	andeq	r9, r1, ip, ror #22
   19378:	andeq	r9, r1, ip, ror #22
   1937c:	andeq	r9, r1, ip, ror #22
   19380:	andeq	r9, r1, ip, ror #22
   19384:	andeq	r9, r1, ip, ror #22
   19388:	andeq	r9, r1, ip, ror #22
   1938c:	andeq	r9, r1, ip, ror #22
   19390:	andeq	r9, r1, ip, ror #22
   19394:	andeq	r9, r1, ip, ror #22
   19398:	andeq	r9, r1, ip, ror #22
   1939c:	andeq	r9, r1, ip, ror #22
   193a0:	andeq	r9, r1, ip, ror #22
   193a4:	andeq	r9, r1, ip, ror #22
   193a8:	andeq	r9, r1, ip, ror #22
   193ac:	andeq	r9, r1, ip, ror #22
   193b0:	andeq	r9, r1, ip, ror #22
   193b4:	strdeq	r9, [r1], -ip
   193b8:	strdeq	r9, [r1], -r8
   193bc:	strdeq	r9, [r1], -r8
   193c0:	ldrdeq	r9, [r1], -r0
   193c4:	strdeq	r9, [r1], -r8
   193c8:	andeq	r9, r1, r0, asr #30
   193cc:	strdeq	r9, [r1], -r8
   193d0:	ldrdeq	r9, [r1], -r0
   193d4:	strdeq	r9, [r1], -r8
   193d8:	strdeq	r9, [r1], -r8
   193dc:	strdeq	r9, [r1], -r8
   193e0:	andeq	r9, r1, r0, asr #30
   193e4:	andeq	r9, r1, r0, asr #30
   193e8:	andeq	r9, r1, r0, asr #30
   193ec:	andeq	r9, r1, r0, asr #30
   193f0:	andeq	r9, r1, r0, asr #30
   193f4:	andeq	r9, r1, r0, asr #30
   193f8:	andeq	r9, r1, r0, asr #30
   193fc:	andeq	r9, r1, r0, asr #30
   19400:	andeq	r9, r1, r0, asr #30
   19404:	andeq	r9, r1, r0, asr #30
   19408:	andeq	r9, r1, r0, asr #30
   1940c:	andeq	r9, r1, r0, asr #30
   19410:	andeq	r9, r1, r0, asr #30
   19414:	andeq	r9, r1, r0, asr #30
   19418:	andeq	r9, r1, r0, asr #30
   1941c:	andeq	r9, r1, r0, asr #30
   19420:	strdeq	r9, [r1], -r8
   19424:	strdeq	r9, [r1], -r8
   19428:	strdeq	r9, [r1], -r8
   1942c:	strdeq	r9, [r1], -r8
   19430:	andeq	r9, r1, r4, asr r6
   19434:	andeq	r9, r1, ip, ror #22
   19438:	andeq	r9, r1, r0, asr #30
   1943c:	andeq	r9, r1, r0, asr #30
   19440:	andeq	r9, r1, r0, asr #30
   19444:	andeq	r9, r1, r0, asr #30
   19448:	andeq	r9, r1, r0, asr #30
   1944c:	andeq	r9, r1, r0, asr #30
   19450:	andeq	r9, r1, r0, asr #30
   19454:	andeq	r9, r1, r0, asr #30
   19458:	andeq	r9, r1, r0, asr #30
   1945c:	andeq	r9, r1, r0, asr #30
   19460:	andeq	r9, r1, r0, asr #30
   19464:	andeq	r9, r1, r0, asr #30
   19468:	andeq	r9, r1, r0, asr #30
   1946c:	andeq	r9, r1, r0, asr #30
   19470:	andeq	r9, r1, r0, asr #30
   19474:	andeq	r9, r1, r0, asr #30
   19478:	andeq	r9, r1, r0, asr #30
   1947c:	andeq	r9, r1, r0, asr #30
   19480:	andeq	r9, r1, r0, asr #30
   19484:	andeq	r9, r1, r0, asr #30
   19488:	andeq	r9, r1, r0, asr #30
   1948c:	andeq	r9, r1, r0, asr #30
   19490:	andeq	r9, r1, r0, asr #30
   19494:	andeq	r9, r1, r0, asr #30
   19498:	andeq	r9, r1, r0, asr #30
   1949c:	andeq	r9, r1, r0, asr #30
   194a0:	strdeq	r9, [r1], -r8
   194a4:	ldrdeq	r9, [r1], -r0
   194a8:	andeq	r9, r1, r0, asr #30
   194ac:	strdeq	r9, [r1], -r8
   194b0:	andeq	r9, r1, r0, asr #30
   194b4:	strdeq	r9, [r1], -r8
   194b8:	andeq	r9, r1, r0, asr #30
   194bc:	andeq	r9, r1, r0, asr #30
   194c0:	andeq	r9, r1, r0, asr #30
   194c4:	andeq	r9, r1, r0, asr #30
   194c8:	andeq	r9, r1, r0, asr #30
   194cc:	andeq	r9, r1, r0, asr #30
   194d0:	andeq	r9, r1, r0, asr #30
   194d4:	andeq	r9, r1, r0, asr #30
   194d8:	andeq	r9, r1, r0, asr #30
   194dc:	andeq	r9, r1, r0, asr #30
   194e0:	andeq	r9, r1, r0, asr #30
   194e4:	andeq	r9, r1, r0, asr #30
   194e8:	andeq	r9, r1, r0, asr #30
   194ec:	andeq	r9, r1, r0, asr #30
   194f0:	andeq	r9, r1, r0, asr #30
   194f4:	andeq	r9, r1, r0, asr #30
   194f8:	andeq	r9, r1, r0, asr #30
   194fc:	andeq	r9, r1, r0, asr #30
   19500:	andeq	r9, r1, r0, asr #30
   19504:	andeq	r9, r1, r0, asr #30
   19508:	andeq	r9, r1, r0, asr #30
   1950c:	andeq	r9, r1, r0, asr #30
   19510:	andeq	r9, r1, r0, asr #30
   19514:	andeq	r9, r1, r0, asr #30
   19518:	andeq	r9, r1, r0, asr #30
   1951c:	andeq	r9, r1, r0, asr #30
   19520:			; <UNDEFINED> instruction: 0x000198b0
   19524:	strdeq	r9, [r1], -r8
   19528:			; <UNDEFINED> instruction: 0x000198b0
   1952c:	ldrdeq	r9, [r1], -r0
   19530:	mov	r3, #0
   19534:	str	r3, [sp, #56]	; 0x38
   19538:	b	19318 <__assert_fail@plt+0x818c>
   1953c:	mov	r3, #114	; 0x72
   19540:	b	19864 <__assert_fail@plt+0x86d8>
   19544:	mov	r3, #98	; 0x62
   19548:	b	1987c <__assert_fail@plt+0x86f0>
   1954c:	ldr	r3, [sp, #48]	; 0x30
   19550:	cmp	r3, #0
   19554:	beq	1963c <__assert_fail@plt+0x84b0>
   19558:	ldr	r3, [sp, #32]
   1955c:	cmp	r3, #0
   19560:	bne	1a0c4 <__assert_fail@plt+0x8f38>
   19564:	ldr	r3, [sp, #44]	; 0x2c
   19568:	eor	r3, r3, #1
   1956c:	cmp	sl, #2
   19570:	movne	r3, #0
   19574:	andeq	r3, r3, #1
   19578:	cmp	r3, #0
   1957c:	moveq	r2, fp
   19580:	beq	195c4 <__assert_fail@plt+0x8438>
   19584:	cmp	r7, fp
   19588:	ldrhi	r2, [sp, #36]	; 0x24
   1958c:	movhi	r1, #39	; 0x27
   19590:	strbhi	r1, [r2, fp]
   19594:	add	r2, fp, #1
   19598:	cmp	r7, r2
   1959c:	ldrhi	r1, [sp, #36]	; 0x24
   195a0:	movhi	r0, #36	; 0x24
   195a4:	strbhi	r0, [r1, r2]
   195a8:	add	r2, fp, #2
   195ac:	cmp	r7, r2
   195b0:	ldrhi	r1, [sp, #36]	; 0x24
   195b4:	movhi	r0, #39	; 0x27
   195b8:	strbhi	r0, [r1, r2]
   195bc:	add	r2, fp, #3
   195c0:	str	r3, [sp, #44]	; 0x2c
   195c4:	cmp	r7, r2
   195c8:	ldrhi	r3, [sp, #36]	; 0x24
   195cc:	movhi	r1, #92	; 0x5c
   195d0:	strbhi	r1, [r3, r2]
   195d4:	add	fp, r2, #1
   195d8:	cmp	r5, #0
   195dc:	beq	19f48 <__assert_fail@plt+0x8dbc>
   195e0:	add	r3, r6, #1
   195e4:	ldr	r1, [sp, #28]
   195e8:	cmp	r1, r3
   195ec:	bls	19f58 <__assert_fail@plt+0x8dcc>
   195f0:	ldr	r1, [sp, #52]	; 0x34
   195f4:	ldrb	r3, [r1, r3]
   195f8:	sub	r3, r3, #48	; 0x30
   195fc:	uxtb	r3, r3
   19600:	cmp	r3, #9
   19604:	bhi	19f64 <__assert_fail@plt+0x8dd8>
   19608:	cmp	r7, fp
   1960c:	movhi	r3, #48	; 0x30
   19610:	ldrhi	r1, [sp, #36]	; 0x24
   19614:	strbhi	r3, [r1, fp]
   19618:	add	r3, r2, #2
   1961c:	cmp	r7, r3
   19620:	movhi	r1, #48	; 0x30
   19624:	ldrhi	r0, [sp, #36]	; 0x24
   19628:	strbhi	r1, [r0, r3]
   1962c:	add	fp, r2, #3
   19630:	ldr	r8, [sp, #32]
   19634:	mov	r4, #48	; 0x30
   19638:	b	19914 <__assert_fail@plt+0x8788>
   1963c:	ldr	r3, [sp, #156]	; 0x9c
   19640:	tst	r3, #1
   19644:	bne	19a08 <__assert_fail@plt+0x887c>
   19648:	ldr	r5, [sp, #48]	; 0x30
   1964c:	mov	r8, r5
   19650:	b	19914 <__assert_fail@plt+0x8788>
   19654:	cmp	sl, #2
   19658:	beq	19670 <__assert_fail@plt+0x84e4>
   1965c:	cmp	sl, #5
   19660:	beq	19688 <__assert_fail@plt+0x84fc>
   19664:	mov	r8, #0
   19668:	mov	r5, r8
   1966c:	b	19914 <__assert_fail@plt+0x8788>
   19670:	ldr	r3, [sp, #32]
   19674:	cmp	r3, #0
   19678:	bne	1a0d8 <__assert_fail@plt+0x8f4c>
   1967c:	mov	r8, r3
   19680:	mov	r5, r3
   19684:	b	19914 <__assert_fail@plt+0x8788>
   19688:	ldr	r3, [sp, #156]	; 0x9c
   1968c:	tst	r3, #4
   19690:	beq	19f70 <__assert_fail@plt+0x8de4>
   19694:	add	r3, r6, #2
   19698:	ldr	r2, [sp, #28]
   1969c:	cmp	r2, r3
   196a0:	bls	19f7c <__assert_fail@plt+0x8df0>
   196a4:	ldr	r2, [sp, #52]	; 0x34
   196a8:	add	r2, r2, r6
   196ac:	ldrb	r2, [r2, #1]
   196b0:	cmp	r2, #63	; 0x3f
   196b4:	movne	r8, #0
   196b8:	movne	r5, r8
   196bc:	bne	19914 <__assert_fail@plt+0x8788>
   196c0:	ldr	r2, [sp, #52]	; 0x34
   196c4:	ldrb	r2, [r2, r3]
   196c8:	sub	r1, r2, #33	; 0x21
   196cc:	cmp	r1, #29
   196d0:	ldrls	pc, [pc, r1, lsl #2]
   196d4:	b	19f88 <__assert_fail@plt+0x8dfc>
   196d8:	andeq	r9, r1, r0, asr r7
   196dc:	andeq	r9, r1, r8, lsl #31
   196e0:	andeq	r9, r1, r8, lsl #31
   196e4:	andeq	r9, r1, r8, lsl #31
   196e8:	andeq	r9, r1, r8, lsl #31
   196ec:	andeq	r9, r1, r8, lsl #31
   196f0:	andeq	r9, r1, r0, asr r7
   196f4:	andeq	r9, r1, r0, asr r7
   196f8:	andeq	r9, r1, r0, asr r7
   196fc:	andeq	r9, r1, r8, lsl #31
   19700:	andeq	r9, r1, r8, lsl #31
   19704:	andeq	r9, r1, r8, lsl #31
   19708:	andeq	r9, r1, r0, asr r7
   1970c:	andeq	r9, r1, r8, lsl #31
   19710:	andeq	r9, r1, r0, asr r7
   19714:	andeq	r9, r1, r8, lsl #31
   19718:	andeq	r9, r1, r8, lsl #31
   1971c:	andeq	r9, r1, r8, lsl #31
   19720:	andeq	r9, r1, r8, lsl #31
   19724:	andeq	r9, r1, r8, lsl #31
   19728:	andeq	r9, r1, r8, lsl #31
   1972c:	andeq	r9, r1, r8, lsl #31
   19730:	andeq	r9, r1, r8, lsl #31
   19734:	andeq	r9, r1, r8, lsl #31
   19738:	andeq	r9, r1, r8, lsl #31
   1973c:	andeq	r9, r1, r8, lsl #31
   19740:	andeq	r9, r1, r8, lsl #31
   19744:	andeq	r9, r1, r0, asr r7
   19748:	andeq	r9, r1, r0, asr r7
   1974c:	andeq	r9, r1, r0, asr r7
   19750:	ldr	r1, [sp, #32]
   19754:	cmp	r1, #0
   19758:	bne	1a198 <__assert_fail@plt+0x900c>
   1975c:	cmp	r7, fp
   19760:	movhi	r1, #63	; 0x3f
   19764:	ldrhi	r0, [sp, #36]	; 0x24
   19768:	strbhi	r1, [r0, fp]
   1976c:	add	r1, fp, #1
   19770:	cmp	r7, r1
   19774:	ldrhi	r0, [sp, #36]	; 0x24
   19778:	movhi	ip, #34	; 0x22
   1977c:	strbhi	ip, [r0, r1]
   19780:	add	r1, fp, #2
   19784:	cmp	r7, r1
   19788:	ldrhi	r0, [sp, #36]	; 0x24
   1978c:	movhi	ip, #34	; 0x22
   19790:	strbhi	ip, [r0, r1]
   19794:	add	r1, fp, #3
   19798:	cmp	r7, r1
   1979c:	movhi	r0, #63	; 0x3f
   197a0:	ldrhi	ip, [sp, #36]	; 0x24
   197a4:	strbhi	r0, [ip, r1]
   197a8:	add	fp, fp, #4
   197ac:	ldr	r5, [sp, #32]
   197b0:	mov	r8, r5
   197b4:	mov	r4, r2
   197b8:	mov	r6, r3
   197bc:	b	19914 <__assert_fail@plt+0x8788>
   197c0:	mov	r3, #102	; 0x66
   197c4:	b	1987c <__assert_fail@plt+0x86f0>
   197c8:	mov	r3, #118	; 0x76
   197cc:	b	1987c <__assert_fail@plt+0x86f0>
   197d0:	cmp	sl, #2
   197d4:	beq	19840 <__assert_fail@plt+0x86b4>
   197d8:	ldr	r3, [sp, #48]	; 0x30
   197dc:	ldr	r2, [sp, #32]
   197e0:	and	r3, r3, r2
   197e4:	tst	r9, r3
   197e8:	moveq	r3, r4
   197ec:	beq	1987c <__assert_fail@plt+0x86f0>
   197f0:	mov	r8, #0
   197f4:	mov	r5, r8
   197f8:	eor	r5, r5, #1
   197fc:	ldr	r3, [sp, #44]	; 0x2c
   19800:	and	r5, r5, r3
   19804:	tst	r5, #255	; 0xff
   19808:	beq	199e8 <__assert_fail@plt+0x885c>
   1980c:	cmp	r7, fp
   19810:	ldrhi	r3, [sp, #36]	; 0x24
   19814:	movhi	r2, #39	; 0x27
   19818:	strbhi	r2, [r3, fp]
   1981c:	add	r3, fp, #1
   19820:	cmp	r7, r3
   19824:	ldrhi	r2, [sp, #36]	; 0x24
   19828:	movhi	r1, #39	; 0x27
   1982c:	strbhi	r1, [r2, r3]
   19830:	add	fp, fp, #2
   19834:	mov	r3, #0
   19838:	str	r3, [sp, #44]	; 0x2c
   1983c:	b	199e8 <__assert_fail@plt+0x885c>
   19840:	ldr	r3, [sp, #32]
   19844:	cmp	r3, #0
   19848:	bne	1a0e4 <__assert_fail@plt+0x8f58>
   1984c:	mov	r8, r3
   19850:	mov	r5, r3
   19854:	b	197f8 <__assert_fail@plt+0x866c>
   19858:	mov	r3, #110	; 0x6e
   1985c:	b	19864 <__assert_fail@plt+0x86d8>
   19860:	mov	r3, #116	; 0x74
   19864:	ldr	r2, [sp, #32]
   19868:	cmp	sl, #2
   1986c:	movne	r2, #0
   19870:	andeq	r2, r2, #1
   19874:	cmp	r2, #0
   19878:	bne	1989c <__assert_fail@plt+0x8710>
   1987c:	ldr	r2, [sp, #48]	; 0x30
   19880:	cmp	r2, #0
   19884:	moveq	r8, r2
   19888:	moveq	r5, r2
   1988c:	beq	19914 <__assert_fail@plt+0x8788>
   19890:	mov	r4, r3
   19894:	mov	r8, #0
   19898:	b	1996c <__assert_fail@plt+0x87e0>
   1989c:	mov	r8, sl
   198a0:	mov	sl, r7
   198a4:	b	1a110 <__assert_fail@plt+0x8f84>
   198a8:	mov	r3, #97	; 0x61
   198ac:	b	1987c <__assert_fail@plt+0x86f0>
   198b0:	ldr	r3, [sp, #28]
   198b4:	cmn	r3, #1
   198b8:	beq	198e4 <__assert_fail@plt+0x8758>
   198bc:	ldr	r3, [sp, #28]
   198c0:	subs	r3, r3, #1
   198c4:	movne	r3, #1
   198c8:	cmp	r3, #0
   198cc:	bne	19f94 <__assert_fail@plt+0x8e08>
   198d0:	cmp	r6, #0
   198d4:	beq	198fc <__assert_fail@plt+0x8770>
   198d8:	mov	r8, #0
   198dc:	mov	r5, r8
   198e0:	b	19914 <__assert_fail@plt+0x8788>
   198e4:	ldr	r3, [sp, #52]	; 0x34
   198e8:	ldrb	r3, [r3, #1]
   198ec:	adds	r3, r3, #0
   198f0:	movne	r3, #1
   198f4:	b	198c8 <__assert_fail@plt+0x873c>
   198f8:	mov	r8, #0
   198fc:	ldr	r5, [sp, #32]
   19900:	cmp	sl, #2
   19904:	movne	r5, #0
   19908:	andeq	r5, r5, #1
   1990c:	cmp	r5, #0
   19910:	bne	19ac4 <__assert_fail@plt+0x8938>
   19914:	ldr	r3, [sp, #68]	; 0x44
   19918:	cmp	sl, #2
   1991c:	orreq	r3, r3, #1
   19920:	eor	r3, r3, #1
   19924:	ldr	r2, [sp, #32]
   19928:	orr	r3, r2, r3
   1992c:	tst	r3, #255	; 0xff
   19930:	beq	19960 <__assert_fail@plt+0x87d4>
   19934:	ldr	r3, [sp, #160]	; 0xa0
   19938:	cmp	r3, #0
   1993c:	beq	19960 <__assert_fail@plt+0x87d4>
   19940:	lsr	r2, r4, #5
   19944:	uxtb	r2, r2
   19948:	and	r3, r4, #31
   1994c:	ldr	r1, [sp, #160]	; 0xa0
   19950:	ldr	r2, [r1, r2, lsl #2]
   19954:	lsr	r3, r2, r3
   19958:	tst	r3, #1
   1995c:	bne	1996c <__assert_fail@plt+0x87e0>
   19960:	ldr	r3, [sp, #56]	; 0x38
   19964:	cmp	r3, #0
   19968:	beq	197f8 <__assert_fail@plt+0x866c>
   1996c:	ldr	r3, [sp, #32]
   19970:	cmp	r3, #0
   19974:	bne	1a180 <__assert_fail@plt+0x8ff4>
   19978:	ldr	r3, [sp, #44]	; 0x2c
   1997c:	eor	r3, r3, #1
   19980:	cmp	sl, #2
   19984:	movne	r3, #0
   19988:	andeq	r3, r3, #1
   1998c:	cmp	r3, #0
   19990:	beq	199d4 <__assert_fail@plt+0x8848>
   19994:	cmp	r7, fp
   19998:	ldrhi	r2, [sp, #36]	; 0x24
   1999c:	movhi	r1, #39	; 0x27
   199a0:	strbhi	r1, [r2, fp]
   199a4:	add	r2, fp, #1
   199a8:	cmp	r7, r2
   199ac:	ldrhi	r1, [sp, #36]	; 0x24
   199b0:	movhi	r0, #36	; 0x24
   199b4:	strbhi	r0, [r1, r2]
   199b8:	add	r2, fp, #2
   199bc:	cmp	r7, r2
   199c0:	ldrhi	r1, [sp, #36]	; 0x24
   199c4:	movhi	r0, #39	; 0x27
   199c8:	strbhi	r0, [r1, r2]
   199cc:	add	fp, fp, #3
   199d0:	str	r3, [sp, #44]	; 0x2c
   199d4:	cmp	r7, fp
   199d8:	ldrhi	r3, [sp, #36]	; 0x24
   199dc:	movhi	r2, #92	; 0x5c
   199e0:	strbhi	r2, [r3, fp]
   199e4:	add	fp, fp, #1
   199e8:	cmp	fp, r7
   199ec:	ldrcc	r3, [sp, #36]	; 0x24
   199f0:	strbcc	r4, [r3, fp]
   199f4:	add	fp, fp, #1
   199f8:	ldr	r3, [sp, #40]	; 0x28
   199fc:	cmp	r8, #0
   19a00:	moveq	r3, #0
   19a04:	str	r3, [sp, #40]	; 0x28
   19a08:	add	r6, r6, #1
   19a0c:	ldr	r3, [sp, #28]
   19a10:	cmn	r3, #1
   19a14:	beq	19fa0 <__assert_fail@plt+0x8e14>
   19a18:	ldr	r3, [sp, #28]
   19a1c:	subs	r8, r3, r6
   19a20:	movne	r8, #1
   19a24:	cmp	r8, #0
   19a28:	beq	19fb4 <__assert_fail@plt+0x8e28>
   19a2c:	ldr	r5, [sp, #48]	; 0x30
   19a30:	cmp	sl, #2
   19a34:	moveq	r5, #0
   19a38:	andne	r5, r5, #1
   19a3c:	ldr	r3, [sp, #60]	; 0x3c
   19a40:	adds	r9, r3, #0
   19a44:	movne	r9, #1
   19a48:	ands	r2, r5, r9
   19a4c:	str	r2, [sp, #56]	; 0x38
   19a50:	beq	19318 <__assert_fail@plt+0x818c>
   19a54:	add	r4, r6, r3
   19a58:	ldr	r2, [sp, #28]
   19a5c:	cmp	r3, #1
   19a60:	movls	r3, #0
   19a64:	movhi	r3, #1
   19a68:	cmn	r2, #1
   19a6c:	movne	r3, #0
   19a70:	cmp	r3, #0
   19a74:	beq	19a84 <__assert_fail@plt+0x88f8>
   19a78:	ldr	r0, [sp, #52]	; 0x34
   19a7c:	bl	11078 <strlen@plt>
   19a80:	str	r0, [sp, #28]
   19a84:	ldr	r3, [sp, #28]
   19a88:	cmp	r3, r4
   19a8c:	bcc	19310 <__assert_fail@plt+0x8184>
   19a90:	ldr	r2, [sp, #60]	; 0x3c
   19a94:	ldr	r1, [sp, #72]	; 0x48
   19a98:	ldr	r3, [sp, #52]	; 0x34
   19a9c:	add	r0, r3, r6
   19aa0:	bl	10f64 <memcmp@plt>
   19aa4:	cmp	r0, #0
   19aa8:	bne	19530 <__assert_fail@plt+0x83a4>
   19aac:	ldr	r3, [sp, #32]
   19ab0:	cmp	r3, #0
   19ab4:	beq	19318 <__assert_fail@plt+0x818c>
   19ab8:	mov	r8, sl
   19abc:	mov	sl, r7
   19ac0:	b	1a110 <__assert_fail@plt+0x8f84>
   19ac4:	mov	r8, sl
   19ac8:	mov	sl, r7
   19acc:	b	1a110 <__assert_fail@plt+0x8f84>
   19ad0:	cmp	sl, #2
   19ad4:	strne	r8, [sp, #80]	; 0x50
   19ad8:	movne	r5, #0
   19adc:	bne	19914 <__assert_fail@plt+0x8788>
   19ae0:	ldr	r3, [sp, #32]
   19ae4:	cmp	r3, #0
   19ae8:	bne	1a0fc <__assert_fail@plt+0x8f70>
   19aec:	ldr	r2, [sp, #76]	; 0x4c
   19af0:	adds	r3, r7, #0
   19af4:	movne	r3, #1
   19af8:	cmp	r2, #0
   19afc:	movne	r3, #0
   19b00:	cmp	r3, #0
   19b04:	movne	r3, #0
   19b08:	bne	19b38 <__assert_fail@plt+0x89ac>
   19b0c:	cmp	r7, fp
   19b10:	ldrhi	r3, [sp, #36]	; 0x24
   19b14:	movhi	r2, #39	; 0x27
   19b18:	strbhi	r2, [r3, fp]
   19b1c:	add	r3, fp, #1
   19b20:	cmp	r7, r3
   19b24:	ldrhi	r2, [sp, #36]	; 0x24
   19b28:	movhi	r1, #92	; 0x5c
   19b2c:	strbhi	r1, [r2, r3]
   19b30:	mov	r3, r7
   19b34:	ldr	r7, [sp, #76]	; 0x4c
   19b38:	add	r2, fp, #2
   19b3c:	cmp	r2, r3
   19b40:	ldrcc	r1, [sp, #36]	; 0x24
   19b44:	movcc	r0, #39	; 0x27
   19b48:	strbcc	r0, [r1, r2]
   19b4c:	add	fp, fp, #3
   19b50:	ldr	r2, [sp, #32]
   19b54:	mov	r5, r2
   19b58:	str	r8, [sp, #80]	; 0x50
   19b5c:	str	r2, [sp, #44]	; 0x2c
   19b60:	str	r7, [sp, #76]	; 0x4c
   19b64:	mov	r7, r3
   19b68:	b	19914 <__assert_fail@plt+0x8788>
   19b6c:	ldr	r5, [sp, #84]	; 0x54
   19b70:	cmp	r5, #1
   19b74:	beq	19ba4 <__assert_fail@plt+0x8a18>
   19b78:	mov	r3, #0
   19b7c:	str	r3, [sp, #104]	; 0x68
   19b80:	str	r3, [sp, #108]	; 0x6c
   19b84:	ldr	r3, [sp, #28]
   19b88:	cmn	r3, #1
   19b8c:	beq	19bd8 <__assert_fail@plt+0x8a4c>
   19b90:	mov	r3, #0
   19b94:	str	r4, [sp, #88]	; 0x58
   19b98:	str	fp, [sp, #92]	; 0x5c
   19b9c:	mov	fp, r3
   19ba0:	b	19d00 <__assert_fail@plt+0x8b74>
   19ba4:	bl	11054 <__ctype_b_loc@plt>
   19ba8:	ldr	r2, [r0]
   19bac:	lsl	r3, r4, #1
   19bb0:	ldrh	r8, [r2, r3]
   19bb4:	lsr	r8, r8, #14
   19bb8:	and	r8, r8, #1
   19bbc:	mov	r2, r5
   19bc0:	eor	r5, r8, #1
   19bc4:	ldr	r3, [sp, #48]	; 0x30
   19bc8:	and	r5, r5, r3
   19bcc:	ands	r5, r5, #255	; 0xff
   19bd0:	beq	19914 <__assert_fail@plt+0x8788>
   19bd4:	b	19d98 <__assert_fail@plt+0x8c0c>
   19bd8:	ldr	r0, [sp, #52]	; 0x34
   19bdc:	bl	11078 <strlen@plt>
   19be0:	str	r0, [sp, #28]
   19be4:	b	19b90 <__assert_fail@plt+0x8a04>
   19be8:	mov	r2, fp
   19bec:	mov	r1, r4
   19bf0:	ldr	r4, [sp, #88]	; 0x58
   19bf4:	ldr	fp, [sp, #92]	; 0x5c
   19bf8:	ldr	r0, [sp, #28]
   19bfc:	cmp	r0, r5
   19c00:	bls	19dcc <__assert_fail@plt+0x8c40>
   19c04:	ldrb	r3, [r1]
   19c08:	cmp	r3, #0
   19c0c:	beq	19dd4 <__assert_fail@plt+0x8c48>
   19c10:	mov	r3, r1
   19c14:	add	r2, r2, #1
   19c18:	add	r1, r6, r2
   19c1c:	cmp	r0, r1
   19c20:	bls	19ddc <__assert_fail@plt+0x8c50>
   19c24:	ldrb	r1, [r3, #1]!
   19c28:	cmp	r1, #0
   19c2c:	bne	19c14 <__assert_fail@plt+0x8a88>
   19c30:	mov	r8, #0
   19c34:	b	19d90 <__assert_fail@plt+0x8c04>
   19c38:	cmp	r4, r5
   19c3c:	beq	19cdc <__assert_fail@plt+0x8b50>
   19c40:	ldrb	r3, [r4, #1]!
   19c44:	sub	r3, r3, #91	; 0x5b
   19c48:	cmp	r3, #33	; 0x21
   19c4c:	ldrls	pc, [pc, r3, lsl #2]
   19c50:	b	19c38 <__assert_fail@plt+0x8aac>
   19c54:	andeq	sl, r1, r8, lsl #2
   19c58:	andeq	sl, r1, r8, lsl #2
   19c5c:	andeq	r9, r1, r8, lsr ip
   19c60:	andeq	sl, r1, r8, lsl #2
   19c64:	andeq	r9, r1, r8, lsr ip
   19c68:	andeq	sl, r1, r8, lsl #2
   19c6c:	andeq	r9, r1, r8, lsr ip
   19c70:	andeq	r9, r1, r8, lsr ip
   19c74:	andeq	r9, r1, r8, lsr ip
   19c78:	andeq	r9, r1, r8, lsr ip
   19c7c:	andeq	r9, r1, r8, lsr ip
   19c80:	andeq	r9, r1, r8, lsr ip
   19c84:	andeq	r9, r1, r8, lsr ip
   19c88:	andeq	r9, r1, r8, lsr ip
   19c8c:	andeq	r9, r1, r8, lsr ip
   19c90:	andeq	r9, r1, r8, lsr ip
   19c94:	andeq	r9, r1, r8, lsr ip
   19c98:	andeq	r9, r1, r8, lsr ip
   19c9c:	andeq	r9, r1, r8, lsr ip
   19ca0:	andeq	r9, r1, r8, lsr ip
   19ca4:	andeq	r9, r1, r8, lsr ip
   19ca8:	andeq	r9, r1, r8, lsr ip
   19cac:	andeq	r9, r1, r8, lsr ip
   19cb0:	andeq	r9, r1, r8, lsr ip
   19cb4:	andeq	r9, r1, r8, lsr ip
   19cb8:	andeq	r9, r1, r8, lsr ip
   19cbc:	andeq	r9, r1, r8, lsr ip
   19cc0:	andeq	r9, r1, r8, lsr ip
   19cc4:	andeq	r9, r1, r8, lsr ip
   19cc8:	andeq	r9, r1, r8, lsr ip
   19ccc:	andeq	r9, r1, r8, lsr ip
   19cd0:	andeq	r9, r1, r8, lsr ip
   19cd4:	andeq	r9, r1, r8, lsr ip
   19cd8:	andeq	sl, r1, r8, lsl #2
   19cdc:	ldr	r0, [sp, #100]	; 0x64
   19ce0:	bl	10fa0 <iswprint@plt>
   19ce4:	cmp	r0, #0
   19ce8:	moveq	r8, #0
   19cec:	add	fp, fp, r9
   19cf0:	add	r0, sp, #104	; 0x68
   19cf4:	bl	10f4c <mbsinit@plt>
   19cf8:	cmp	r0, #0
   19cfc:	bne	19d70 <__assert_fail@plt+0x8be4>
   19d00:	add	r5, r6, fp
   19d04:	ldr	r3, [sp, #52]	; 0x34
   19d08:	add	r4, r3, r5
   19d0c:	add	r3, sp, #104	; 0x68
   19d10:	ldr	r2, [sp, #28]
   19d14:	sub	r2, r2, r5
   19d18:	mov	r1, r4
   19d1c:	add	r0, sp, #100	; 0x64
   19d20:	bl	1bfc4 <__assert_fail@plt+0xae38>
   19d24:	subs	r9, r0, #0
   19d28:	beq	19de4 <__assert_fail@plt+0x8c58>
   19d2c:	cmn	r9, #1
   19d30:	beq	19d80 <__assert_fail@plt+0x8bf4>
   19d34:	cmn	r9, #2
   19d38:	beq	19be8 <__assert_fail@plt+0x8a5c>
   19d3c:	ldr	r3, [sp, #32]
   19d40:	cmp	sl, #2
   19d44:	movne	r3, #0
   19d48:	andeq	r3, r3, #1
   19d4c:	cmp	r3, #0
   19d50:	beq	19cdc <__assert_fail@plt+0x8b50>
   19d54:	cmp	r9, #1
   19d58:	bls	19cdc <__assert_fail@plt+0x8b50>
   19d5c:	sub	r3, r9, #1
   19d60:	add	r5, r3, r5
   19d64:	ldr	r3, [sp, #52]	; 0x34
   19d68:	add	r5, r3, r5
   19d6c:	b	19c40 <__assert_fail@plt+0x8ab4>
   19d70:	ldr	r4, [sp, #88]	; 0x58
   19d74:	mov	r2, fp
   19d78:	ldr	fp, [sp, #92]	; 0x5c
   19d7c:	b	19d90 <__assert_fail@plt+0x8c04>
   19d80:	ldr	r4, [sp, #88]	; 0x58
   19d84:	mov	r2, fp
   19d88:	ldr	fp, [sp, #92]	; 0x5c
   19d8c:	mov	r8, #0
   19d90:	cmp	r2, #1
   19d94:	bls	19bc0 <__assert_fail@plt+0x8a34>
   19d98:	add	r1, r6, r2
   19d9c:	ldr	ip, [sp, #64]	; 0x40
   19da0:	mov	r5, #0
   19da4:	eor	r3, r8, #1
   19da8:	ldr	r2, [sp, #48]	; 0x30
   19dac:	and	r3, r3, r2
   19db0:	uxtb	r3, r3
   19db4:	ldr	r9, [sp, #32]
   19db8:	ldr	lr, [sp, #44]	; 0x2c
   19dbc:	ldr	r2, [sp, #56]	; 0x38
   19dc0:	str	r8, [sp, #56]	; 0x38
   19dc4:	ldr	r0, [sp, #36]	; 0x24
   19dc8:	b	19e64 <__assert_fail@plt+0x8cd8>
   19dcc:	mov	r8, #0
   19dd0:	b	19d90 <__assert_fail@plt+0x8c04>
   19dd4:	mov	r8, #0
   19dd8:	b	19d90 <__assert_fail@plt+0x8c04>
   19ddc:	mov	r8, #0
   19de0:	b	19d90 <__assert_fail@plt+0x8c04>
   19de4:	ldr	r4, [sp, #88]	; 0x58
   19de8:	mov	r2, fp
   19dec:	ldr	fp, [sp, #92]	; 0x5c
   19df0:	b	19d90 <__assert_fail@plt+0x8c04>
   19df4:	cmp	r2, #0
   19df8:	beq	19e0c <__assert_fail@plt+0x8c80>
   19dfc:	cmp	r7, fp
   19e00:	movhi	r2, #92	; 0x5c
   19e04:	strbhi	r2, [r0, fp]
   19e08:	add	fp, fp, #1
   19e0c:	add	r8, r6, #1
   19e10:	cmp	r1, r8
   19e14:	bls	19f1c <__assert_fail@plt+0x8d90>
   19e18:	eor	r2, r5, #1
   19e1c:	and	r2, r2, lr
   19e20:	ands	r2, r2, #255	; 0xff
   19e24:	beq	19f38 <__assert_fail@plt+0x8dac>
   19e28:	cmp	r7, fp
   19e2c:	movhi	r2, #39	; 0x27
   19e30:	strbhi	r2, [r0, fp]
   19e34:	add	r2, fp, #1
   19e38:	cmp	r7, r2
   19e3c:	movhi	lr, #39	; 0x27
   19e40:	strbhi	lr, [r0, r2]
   19e44:	add	fp, fp, #2
   19e48:	mov	r6, r8
   19e4c:	mov	r2, r3
   19e50:	mov	lr, r3
   19e54:	cmp	r7, fp
   19e58:	strbhi	r4, [r0, fp]
   19e5c:	add	fp, fp, #1
   19e60:	ldrb	r4, [ip, #1]!
   19e64:	cmp	r3, #0
   19e68:	beq	19df4 <__assert_fail@plt+0x8c68>
   19e6c:	cmp	r9, #0
   19e70:	bne	1a174 <__assert_fail@plt+0x8fe8>
   19e74:	eor	r5, lr, #1
   19e78:	cmp	sl, #2
   19e7c:	movne	r5, #0
   19e80:	andeq	r5, r5, #1
   19e84:	cmp	r5, #0
   19e88:	beq	19ec0 <__assert_fail@plt+0x8d34>
   19e8c:	cmp	r7, fp
   19e90:	movhi	lr, #39	; 0x27
   19e94:	strbhi	lr, [r0, fp]
   19e98:	add	lr, fp, #1
   19e9c:	cmp	r7, lr
   19ea0:	movhi	r8, #36	; 0x24
   19ea4:	strbhi	r8, [r0, lr]
   19ea8:	add	lr, fp, #2
   19eac:	cmp	r7, lr
   19eb0:	movhi	r8, #39	; 0x27
   19eb4:	strbhi	r8, [r0, lr]
   19eb8:	add	fp, fp, #3
   19ebc:	mov	lr, r5
   19ec0:	cmp	r7, fp
   19ec4:	movhi	r5, #92	; 0x5c
   19ec8:	strbhi	r5, [r0, fp]
   19ecc:	add	r5, fp, #1
   19ed0:	cmp	r7, r5
   19ed4:	lsrhi	r8, r4, #6
   19ed8:	addhi	r8, r8, #48	; 0x30
   19edc:	strbhi	r8, [r0, r5]
   19ee0:	add	r8, fp, #2
   19ee4:	cmp	r7, r8
   19ee8:	lsrhi	r5, r4, #3
   19eec:	andhi	r5, r5, #7
   19ef0:	addhi	r5, r5, #48	; 0x30
   19ef4:	strbhi	r5, [r0, r8]
   19ef8:	add	fp, fp, #3
   19efc:	and	r4, r4, #7
   19f00:	add	r4, r4, #48	; 0x30
   19f04:	add	r5, r6, #1
   19f08:	cmp	r1, r5
   19f0c:	bls	19f28 <__assert_fail@plt+0x8d9c>
   19f10:	mov	r6, r5
   19f14:	mov	r5, r3
   19f18:	b	19e54 <__assert_fail@plt+0x8cc8>
   19f1c:	str	lr, [sp, #44]	; 0x2c
   19f20:	ldr	r8, [sp, #56]	; 0x38
   19f24:	b	197f8 <__assert_fail@plt+0x866c>
   19f28:	str	lr, [sp, #44]	; 0x2c
   19f2c:	ldr	r8, [sp, #56]	; 0x38
   19f30:	mov	r5, r3
   19f34:	b	197f8 <__assert_fail@plt+0x866c>
   19f38:	mov	r6, r8
   19f3c:	b	19e54 <__assert_fail@plt+0x8cc8>
   19f40:	mov	r5, #0
   19f44:	b	19914 <__assert_fail@plt+0x8788>
   19f48:	mov	r8, r5
   19f4c:	ldr	r5, [sp, #48]	; 0x30
   19f50:	mov	r4, #48	; 0x30
   19f54:	b	19914 <__assert_fail@plt+0x8788>
   19f58:	ldr	r8, [sp, #32]
   19f5c:	mov	r4, #48	; 0x30
   19f60:	b	19914 <__assert_fail@plt+0x8788>
   19f64:	ldr	r8, [sp, #32]
   19f68:	mov	r4, #48	; 0x30
   19f6c:	b	19914 <__assert_fail@plt+0x8788>
   19f70:	mov	r8, #0
   19f74:	mov	r5, r8
   19f78:	b	19914 <__assert_fail@plt+0x8788>
   19f7c:	mov	r8, #0
   19f80:	mov	r5, r8
   19f84:	b	19914 <__assert_fail@plt+0x8788>
   19f88:	mov	r8, #0
   19f8c:	mov	r5, r8
   19f90:	b	19914 <__assert_fail@plt+0x8788>
   19f94:	mov	r8, #0
   19f98:	mov	r5, r8
   19f9c:	b	19914 <__assert_fail@plt+0x8788>
   19fa0:	ldr	r3, [sp, #52]	; 0x34
   19fa4:	ldrb	r8, [r3, r6]
   19fa8:	adds	r8, r8, #0
   19fac:	movne	r8, #1
   19fb0:	b	19a24 <__assert_fail@plt+0x8898>
   19fb4:	cmp	sl, #2
   19fb8:	movne	r3, #0
   19fbc:	moveq	r3, #1
   19fc0:	ldr	r1, [sp, #32]
   19fc4:	mov	r2, r1
   19fc8:	and	r2, r2, r3
   19fcc:	cmp	fp, #0
   19fd0:	movne	r2, #0
   19fd4:	andeq	r2, r2, #1
   19fd8:	cmp	r2, #0
   19fdc:	bne	1a18c <__assert_fail@plt+0x9000>
   19fe0:	eor	r2, r1, #1
   19fe4:	and	r3, r3, r2
   19fe8:	ldr	r1, [sp, #80]	; 0x50
   19fec:	tst	r1, r3
   19ff0:	beq	1a068 <__assert_fail@plt+0x8edc>
   19ff4:	ldr	r3, [sp, #40]	; 0x28
   19ff8:	cmp	r3, #0
   19ffc:	bne	1a024 <__assert_fail@plt+0x8e98>
   1a000:	ldr	r1, [sp, #76]	; 0x4c
   1a004:	clz	r3, r7
   1a008:	lsr	r3, r3, #5
   1a00c:	cmp	r1, #0
   1a010:	moveq	r3, #0
   1a014:	cmp	r3, #0
   1a018:	beq	1a068 <__assert_fail@plt+0x8edc>
   1a01c:	ldr	r7, [sp, #76]	; 0x4c
   1a020:	b	190b8 <__assert_fail@plt+0x7f2c>
   1a024:	ldr	r3, [sp, #168]	; 0xa8
   1a028:	str	r3, [sp, #16]
   1a02c:	ldr	r3, [sp, #164]	; 0xa4
   1a030:	str	r3, [sp, #12]
   1a034:	ldr	r3, [sp, #160]	; 0xa0
   1a038:	str	r3, [sp, #8]
   1a03c:	ldr	r3, [sp, #156]	; 0x9c
   1a040:	str	r3, [sp, #4]
   1a044:	mov	r3, #5
   1a048:	str	r3, [sp]
   1a04c:	ldr	r3, [sp, #28]
   1a050:	ldr	r2, [sp, #52]	; 0x34
   1a054:	ldr	r1, [sp, #76]	; 0x4c
   1a058:	ldr	r0, [sp, #36]	; 0x24
   1a05c:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a060:	mov	fp, r0
   1a064:	b	1a168 <__assert_fail@plt+0x8fdc>
   1a068:	mov	sl, r7
   1a06c:	ldr	r3, [sp, #72]	; 0x48
   1a070:	cmp	r3, #0
   1a074:	moveq	r2, #0
   1a078:	andne	r2, r2, #1
   1a07c:	cmp	r2, #0
   1a080:	beq	1a0b0 <__assert_fail@plt+0x8f24>
   1a084:	mov	r2, r3
   1a088:	ldrb	r3, [r3]
   1a08c:	cmp	r3, #0
   1a090:	beq	1a0b0 <__assert_fail@plt+0x8f24>
   1a094:	ldr	r1, [sp, #36]	; 0x24
   1a098:	cmp	sl, fp
   1a09c:	strbhi	r3, [r1, fp]
   1a0a0:	add	fp, fp, #1
   1a0a4:	ldrb	r3, [r2, #1]!
   1a0a8:	cmp	r3, #0
   1a0ac:	bne	1a098 <__assert_fail@plt+0x8f0c>
   1a0b0:	cmp	sl, fp
   1a0b4:	movhi	r3, #0
   1a0b8:	ldrhi	r2, [sp, #36]	; 0x24
   1a0bc:	strbhi	r3, [r2, fp]
   1a0c0:	b	1a168 <__assert_fail@plt+0x8fdc>
   1a0c4:	mov	r8, sl
   1a0c8:	mov	sl, r7
   1a0cc:	ldr	r3, [sp, #32]
   1a0d0:	str	r3, [sp, #48]	; 0x30
   1a0d4:	b	1a110 <__assert_fail@plt+0x8f84>
   1a0d8:	mov	r8, sl
   1a0dc:	mov	sl, r7
   1a0e0:	b	1a110 <__assert_fail@plt+0x8f84>
   1a0e4:	mov	r8, sl
   1a0e8:	mov	sl, r7
   1a0ec:	b	1a110 <__assert_fail@plt+0x8f84>
   1a0f0:	andeq	sp, r1, ip, asr r7
   1a0f4:	andeq	sp, r1, ip, ror #14
   1a0f8:	andeq	sp, r1, r0, ror #14
   1a0fc:	mov	r8, sl
   1a100:	mov	sl, r7
   1a104:	b	1a110 <__assert_fail@plt+0x8f84>
   1a108:	mov	r8, sl
   1a10c:	mov	sl, r7
   1a110:	ldr	r3, [sp, #48]	; 0x30
   1a114:	cmp	r8, #2
   1a118:	movne	r3, #0
   1a11c:	andeq	r3, r3, #1
   1a120:	cmp	r3, #0
   1a124:	movne	r8, #4
   1a128:	ldr	r3, [sp, #168]	; 0xa8
   1a12c:	str	r3, [sp, #16]
   1a130:	ldr	r3, [sp, #164]	; 0xa4
   1a134:	str	r3, [sp, #12]
   1a138:	mov	r3, #0
   1a13c:	str	r3, [sp, #8]
   1a140:	ldr	r3, [sp, #156]	; 0x9c
   1a144:	bic	r3, r3, #2
   1a148:	str	r3, [sp, #4]
   1a14c:	str	r8, [sp]
   1a150:	ldr	r3, [sp, #28]
   1a154:	ldr	r2, [sp, #52]	; 0x34
   1a158:	mov	r1, sl
   1a15c:	ldr	r0, [sp, #36]	; 0x24
   1a160:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a164:	mov	fp, r0
   1a168:	mov	r0, fp
   1a16c:	add	sp, sp, #116	; 0x74
   1a170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a174:	mov	r8, sl
   1a178:	mov	sl, r7
   1a17c:	b	1a110 <__assert_fail@plt+0x8f84>
   1a180:	mov	r8, sl
   1a184:	mov	sl, r7
   1a188:	b	1a110 <__assert_fail@plt+0x8f84>
   1a18c:	mov	r8, sl
   1a190:	mov	sl, r7
   1a194:	b	1a110 <__assert_fail@plt+0x8f84>
   1a198:	mov	r8, sl
   1a19c:	mov	sl, r7
   1a1a0:	b	1a128 <__assert_fail@plt+0x8f9c>
   1a1a4:	mov	r3, #1
   1a1a8:	str	r3, [sp, #32]
   1a1ac:	str	r3, [sp, #48]	; 0x30
   1a1b0:	str	r3, [sp, #60]	; 0x3c
   1a1b4:	ldr	r3, [pc, #-196]	; 1a0f8 <__assert_fail@plt+0x8f6c>
   1a1b8:	str	r3, [sp, #72]	; 0x48
   1a1bc:	mov	fp, #0
   1a1c0:	mov	sl, #5
   1a1c4:	b	19114 <__assert_fail@plt+0x7f88>
   1a1c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1cc:	sub	sp, sp, #52	; 0x34
   1a1d0:	mov	r5, r0
   1a1d4:	str	r1, [sp, #24]
   1a1d8:	str	r2, [sp, #28]
   1a1dc:	mov	r4, r3
   1a1e0:	bl	11090 <__errno_location@plt>
   1a1e4:	str	r0, [sp, #32]
   1a1e8:	ldr	r3, [r0]
   1a1ec:	str	r3, [sp, #36]	; 0x24
   1a1f0:	ldr	r3, [pc, #396]	; 1a384 <__assert_fail@plt+0x91f8>
   1a1f4:	ldr	r6, [r3]
   1a1f8:	cmn	r5, #-2147483647	; 0x80000001
   1a1fc:	movne	r3, #0
   1a200:	moveq	r3, #1
   1a204:	orrs	r3, r3, r5, lsr #31
   1a208:	bne	1a348 <__assert_fail@plt+0x91bc>
   1a20c:	ldr	r3, [pc, #368]	; 1a384 <__assert_fail@plt+0x91f8>
   1a210:	ldr	r2, [r3, #4]
   1a214:	cmp	r5, r2
   1a218:	blt	1a280 <__assert_fail@plt+0x90f4>
   1a21c:	str	r2, [sp, #44]	; 0x2c
   1a220:	add	r3, r3, #8
   1a224:	cmp	r6, r3
   1a228:	beq	1a34c <__assert_fail@plt+0x91c0>
   1a22c:	sub	r2, r5, r2
   1a230:	mov	r3, #8
   1a234:	str	r3, [sp]
   1a238:	mvn	r3, #-2147483648	; 0x80000000
   1a23c:	add	r2, r2, #1
   1a240:	add	r1, sp, #44	; 0x2c
   1a244:	mov	r0, r6
   1a248:	bl	1b0e0 <__assert_fail@plt+0x9f54>
   1a24c:	mov	r6, r0
   1a250:	ldr	r3, [pc, #300]	; 1a384 <__assert_fail@plt+0x91f8>
   1a254:	str	r0, [r3]
   1a258:	ldr	r7, [pc, #292]	; 1a384 <__assert_fail@plt+0x91f8>
   1a25c:	ldr	r0, [r7, #4]
   1a260:	ldr	r2, [sp, #44]	; 0x2c
   1a264:	sub	r2, r2, r0
   1a268:	lsl	r2, r2, #3
   1a26c:	mov	r1, #0
   1a270:	add	r0, r6, r0, lsl #3
   1a274:	bl	110b4 <memset@plt>
   1a278:	ldr	r3, [sp, #44]	; 0x2c
   1a27c:	str	r3, [r7, #4]
   1a280:	add	fp, r6, r5, lsl #3
   1a284:	ldr	r8, [r6, r5, lsl #3]
   1a288:	ldr	r7, [fp, #4]
   1a28c:	ldr	r9, [r4, #4]
   1a290:	orr	r9, r9, #1
   1a294:	add	sl, r4, #8
   1a298:	ldr	r3, [r4, #44]	; 0x2c
   1a29c:	str	r3, [sp, #16]
   1a2a0:	ldr	r3, [r4, #40]	; 0x28
   1a2a4:	str	r3, [sp, #12]
   1a2a8:	str	sl, [sp, #8]
   1a2ac:	str	r9, [sp, #4]
   1a2b0:	ldr	r3, [r4]
   1a2b4:	str	r3, [sp]
   1a2b8:	ldr	r3, [sp, #28]
   1a2bc:	ldr	r2, [sp, #24]
   1a2c0:	mov	r1, r8
   1a2c4:	mov	r0, r7
   1a2c8:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a2cc:	cmp	r8, r0
   1a2d0:	bhi	1a330 <__assert_fail@plt+0x91a4>
   1a2d4:	add	r8, r0, #1
   1a2d8:	str	r8, [r6, r5, lsl #3]
   1a2dc:	ldr	r3, [pc, #164]	; 1a388 <__assert_fail@plt+0x91fc>
   1a2e0:	cmp	r7, r3
   1a2e4:	beq	1a2f0 <__assert_fail@plt+0x9164>
   1a2e8:	mov	r0, r7
   1a2ec:	bl	18d38 <__assert_fail@plt+0x7bac>
   1a2f0:	mov	r0, r8
   1a2f4:	bl	1af5c <__assert_fail@plt+0x9dd0>
   1a2f8:	mov	r7, r0
   1a2fc:	str	r0, [fp, #4]
   1a300:	ldr	r3, [r4, #44]	; 0x2c
   1a304:	str	r3, [sp, #16]
   1a308:	ldr	r3, [r4, #40]	; 0x28
   1a30c:	str	r3, [sp, #12]
   1a310:	str	sl, [sp, #8]
   1a314:	str	r9, [sp, #4]
   1a318:	ldr	r3, [r4]
   1a31c:	str	r3, [sp]
   1a320:	ldr	r3, [sp, #28]
   1a324:	ldr	r2, [sp, #24]
   1a328:	mov	r1, r8
   1a32c:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a330:	ldr	r3, [sp, #32]
   1a334:	ldr	r2, [sp, #36]	; 0x24
   1a338:	str	r2, [r3]
   1a33c:	mov	r0, r7
   1a340:	add	sp, sp, #52	; 0x34
   1a344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a348:	bl	11168 <abort@plt>
   1a34c:	sub	r2, r5, r2
   1a350:	mov	r3, #8
   1a354:	str	r3, [sp]
   1a358:	mvn	r3, #-2147483648	; 0x80000000
   1a35c:	add	r2, r2, #1
   1a360:	add	r1, sp, #44	; 0x2c
   1a364:	mov	r0, #0
   1a368:	bl	1b0e0 <__assert_fail@plt+0x9f54>
   1a36c:	mov	r6, r0
   1a370:	ldr	r3, [pc, #12]	; 1a384 <__assert_fail@plt+0x91f8>
   1a374:	str	r0, [r3], #8
   1a378:	ldm	r3, {r0, r1}
   1a37c:	stm	r6, {r0, r1}
   1a380:	b	1a258 <__assert_fail@plt+0x90cc>
   1a384:	andeq	lr, r2, r4, lsr #2
   1a388:			; <UNDEFINED> instruction: 0x0002e1b8
   1a38c:	push	{r4, r5, r6, lr}
   1a390:	mov	r4, r0
   1a394:	bl	11090 <__errno_location@plt>
   1a398:	mov	r5, r0
   1a39c:	ldr	r6, [r0]
   1a3a0:	cmp	r4, #0
   1a3a4:	ldr	r3, [pc, #20]	; 1a3c0 <__assert_fail@plt+0x9234>
   1a3a8:	moveq	r4, r3
   1a3ac:	mov	r1, #48	; 0x30
   1a3b0:	mov	r0, r4
   1a3b4:	bl	1b448 <__assert_fail@plt+0xa2bc>
   1a3b8:	str	r6, [r5]
   1a3bc:	pop	{r4, r5, r6, pc}
   1a3c0:			; <UNDEFINED> instruction: 0x0002e2b8
   1a3c4:	subs	r3, r0, #0
   1a3c8:	ldr	r2, [pc, #8]	; 1a3d8 <__assert_fail@plt+0x924c>
   1a3cc:	moveq	r3, r2
   1a3d0:	ldr	r0, [r3]
   1a3d4:	bx	lr
   1a3d8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a3dc:	subs	r3, r0, #0
   1a3e0:	ldr	r2, [pc, #8]	; 1a3f0 <__assert_fail@plt+0x9264>
   1a3e4:	moveq	r3, r2
   1a3e8:	str	r1, [r3]
   1a3ec:	bx	lr
   1a3f0:			; <UNDEFINED> instruction: 0x0002e2b8
   1a3f4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a3f8:	subs	r3, r0, #0
   1a3fc:	ldr	r0, [pc, #44]	; 1a430 <__assert_fail@plt+0x92a4>
   1a400:	moveq	r3, r0
   1a404:	add	r3, r3, #8
   1a408:	lsr	lr, r1, #5
   1a40c:	and	r1, r1, #31
   1a410:	ldr	ip, [r3, lr, lsl #2]
   1a414:	lsr	r0, ip, r1
   1a418:	eor	r2, r2, r0
   1a41c:	and	r2, r2, #1
   1a420:	eor	r1, ip, r2, lsl r1
   1a424:	str	r1, [r3, lr, lsl #2]
   1a428:	and	r0, r0, #1
   1a42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a430:			; <UNDEFINED> instruction: 0x0002e2b8
   1a434:	subs	r3, r0, #0
   1a438:	ldr	r2, [pc, #12]	; 1a44c <__assert_fail@plt+0x92c0>
   1a43c:	moveq	r3, r2
   1a440:	ldr	r0, [r3, #4]
   1a444:	str	r1, [r3, #4]
   1a448:	bx	lr
   1a44c:			; <UNDEFINED> instruction: 0x0002e2b8
   1a450:	subs	r3, r0, #0
   1a454:	ldr	r0, [pc, #40]	; 1a484 <__assert_fail@plt+0x92f8>
   1a458:	moveq	r3, r0
   1a45c:	mov	r0, #10
   1a460:	str	r0, [r3]
   1a464:	cmp	r2, #0
   1a468:	cmpne	r1, #0
   1a46c:	beq	1a47c <__assert_fail@plt+0x92f0>
   1a470:	str	r1, [r3, #40]	; 0x28
   1a474:	str	r2, [r3, #44]	; 0x2c
   1a478:	bx	lr
   1a47c:	push	{r4, lr}
   1a480:	bl	11168 <abort@plt>
   1a484:			; <UNDEFINED> instruction: 0x0002e2b8
   1a488:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a48c:	sub	sp, sp, #24
   1a490:	mov	r7, r0
   1a494:	mov	r8, r1
   1a498:	mov	r9, r2
   1a49c:	mov	sl, r3
   1a4a0:	ldr	r4, [sp, #56]	; 0x38
   1a4a4:	cmp	r4, #0
   1a4a8:	ldr	r3, [pc, #84]	; 1a504 <__assert_fail@plt+0x9378>
   1a4ac:	moveq	r4, r3
   1a4b0:	bl	11090 <__errno_location@plt>
   1a4b4:	mov	r5, r0
   1a4b8:	ldr	r6, [r0]
   1a4bc:	ldr	r3, [r4, #44]	; 0x2c
   1a4c0:	str	r3, [sp, #16]
   1a4c4:	ldr	r3, [r4, #40]	; 0x28
   1a4c8:	str	r3, [sp, #12]
   1a4cc:	add	r3, r4, #8
   1a4d0:	str	r3, [sp, #8]
   1a4d4:	ldr	r3, [r4, #4]
   1a4d8:	str	r3, [sp, #4]
   1a4dc:	ldr	r3, [r4]
   1a4e0:	str	r3, [sp]
   1a4e4:	mov	r3, sl
   1a4e8:	mov	r2, r9
   1a4ec:	mov	r1, r8
   1a4f0:	mov	r0, r7
   1a4f4:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a4f8:	str	r6, [r5]
   1a4fc:	add	sp, sp, #24
   1a500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a504:			; <UNDEFINED> instruction: 0x0002e2b8
   1a508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a50c:	sub	sp, sp, #44	; 0x2c
   1a510:	str	r0, [sp, #28]
   1a514:	str	r1, [sp, #32]
   1a518:	mov	r6, r2
   1a51c:	subs	r4, r3, #0
   1a520:	ldr	r3, [pc, #172]	; 1a5d4 <__assert_fail@plt+0x9448>
   1a524:	moveq	r4, r3
   1a528:	bl	11090 <__errno_location@plt>
   1a52c:	mov	r7, r0
   1a530:	ldr	fp, [r0]
   1a534:	ldr	r5, [r4, #4]
   1a538:	cmp	r6, #0
   1a53c:	orreq	r5, r5, #1
   1a540:	add	r9, r4, #8
   1a544:	ldr	r3, [r4, #44]	; 0x2c
   1a548:	str	r3, [sp, #16]
   1a54c:	ldr	r3, [r4, #40]	; 0x28
   1a550:	str	r3, [sp, #12]
   1a554:	str	r9, [sp, #8]
   1a558:	str	r5, [sp, #4]
   1a55c:	ldr	r3, [r4]
   1a560:	str	r3, [sp]
   1a564:	ldr	r3, [sp, #32]
   1a568:	ldr	r2, [sp, #28]
   1a56c:	mov	r1, #0
   1a570:	mov	r0, r1
   1a574:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a578:	mov	sl, r0
   1a57c:	add	r8, r0, #1
   1a580:	mov	r0, r8
   1a584:	bl	1af5c <__assert_fail@plt+0x9dd0>
   1a588:	str	r0, [sp, #36]	; 0x24
   1a58c:	ldr	r3, [r4, #44]	; 0x2c
   1a590:	str	r3, [sp, #16]
   1a594:	ldr	r3, [r4, #40]	; 0x28
   1a598:	str	r3, [sp, #12]
   1a59c:	str	r9, [sp, #8]
   1a5a0:	str	r5, [sp, #4]
   1a5a4:	ldr	r3, [r4]
   1a5a8:	str	r3, [sp]
   1a5ac:	ldr	r3, [sp, #32]
   1a5b0:	ldr	r2, [sp, #28]
   1a5b4:	mov	r1, r8
   1a5b8:	bl	19058 <__assert_fail@plt+0x7ecc>
   1a5bc:	str	fp, [r7]
   1a5c0:	cmp	r6, #0
   1a5c4:	strne	sl, [r6]
   1a5c8:	ldr	r0, [sp, #36]	; 0x24
   1a5cc:	add	sp, sp, #44	; 0x2c
   1a5d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5d4:			; <UNDEFINED> instruction: 0x0002e2b8
   1a5d8:	push	{r4, lr}
   1a5dc:	mov	r3, r2
   1a5e0:	mov	r2, #0
   1a5e4:	bl	1a508 <__assert_fail@plt+0x937c>
   1a5e8:	pop	{r4, pc}
   1a5ec:	push	{r4, r5, r6, r7, r8, lr}
   1a5f0:	ldr	r3, [pc, #140]	; 1a684 <__assert_fail@plt+0x94f8>
   1a5f4:	ldr	r7, [r3]
   1a5f8:	ldr	r3, [r3, #4]
   1a5fc:	cmp	r3, #1
   1a600:	ble	1a62c <__assert_fail@plt+0x94a0>
   1a604:	mov	r5, r7
   1a608:	mov	r4, #1
   1a60c:	ldr	r6, [pc, #112]	; 1a684 <__assert_fail@plt+0x94f8>
   1a610:	ldr	r0, [r5, #12]
   1a614:	bl	18d38 <__assert_fail@plt+0x7bac>
   1a618:	add	r4, r4, #1
   1a61c:	add	r5, r5, #8
   1a620:	ldr	r3, [r6, #4]
   1a624:	cmp	r3, r4
   1a628:	bgt	1a610 <__assert_fail@plt+0x9484>
   1a62c:	ldr	r0, [r7, #4]
   1a630:	ldr	r3, [pc, #80]	; 1a688 <__assert_fail@plt+0x94fc>
   1a634:	cmp	r0, r3
   1a638:	beq	1a654 <__assert_fail@plt+0x94c8>
   1a63c:	bl	18d38 <__assert_fail@plt+0x7bac>
   1a640:	ldr	r3, [pc, #60]	; 1a684 <__assert_fail@plt+0x94f8>
   1a644:	mov	r2, #256	; 0x100
   1a648:	str	r2, [r3, #8]
   1a64c:	ldr	r2, [pc, #52]	; 1a688 <__assert_fail@plt+0x94fc>
   1a650:	str	r2, [r3, #12]
   1a654:	ldr	r3, [pc, #48]	; 1a68c <__assert_fail@plt+0x9500>
   1a658:	cmp	r7, r3
   1a65c:	beq	1a674 <__assert_fail@plt+0x94e8>
   1a660:	mov	r0, r7
   1a664:	bl	18d38 <__assert_fail@plt+0x7bac>
   1a668:	ldr	r3, [pc, #20]	; 1a684 <__assert_fail@plt+0x94f8>
   1a66c:	add	r2, r3, #8
   1a670:	str	r2, [r3]
   1a674:	mov	r2, #1
   1a678:	ldr	r3, [pc, #4]	; 1a684 <__assert_fail@plt+0x94f8>
   1a67c:	str	r2, [r3, #4]
   1a680:	pop	{r4, r5, r6, r7, r8, pc}
   1a684:	andeq	lr, r2, r4, lsr #2
   1a688:			; <UNDEFINED> instruction: 0x0002e1b8
   1a68c:	andeq	lr, r2, ip, lsr #2
   1a690:	push	{r4, lr}
   1a694:	ldr	r3, [pc, #8]	; 1a6a4 <__assert_fail@plt+0x9518>
   1a698:	mvn	r2, #0
   1a69c:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a6a0:	pop	{r4, pc}
   1a6a4:			; <UNDEFINED> instruction: 0x0002e2b8
   1a6a8:	push	{r4, lr}
   1a6ac:	ldr	r3, [pc, #4]	; 1a6b8 <__assert_fail@plt+0x952c>
   1a6b0:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a6b4:	pop	{r4, pc}
   1a6b8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a6bc:	push	{r4, lr}
   1a6c0:	mov	r1, r0
   1a6c4:	mov	r0, #0
   1a6c8:	bl	1a690 <__assert_fail@plt+0x9504>
   1a6cc:	pop	{r4, pc}
   1a6d0:	push	{r4, lr}
   1a6d4:	mov	r2, r1
   1a6d8:	mov	r1, r0
   1a6dc:	mov	r0, #0
   1a6e0:	bl	1a6a8 <__assert_fail@plt+0x951c>
   1a6e4:	pop	{r4, pc}
   1a6e8:	push	{r4, r5, lr}
   1a6ec:	sub	sp, sp, #52	; 0x34
   1a6f0:	mov	r4, r0
   1a6f4:	mov	r5, r2
   1a6f8:	mov	r0, sp
   1a6fc:	bl	18ef0 <__assert_fail@plt+0x7d64>
   1a700:	mov	r3, sp
   1a704:	mvn	r2, #0
   1a708:	mov	r1, r5
   1a70c:	mov	r0, r4
   1a710:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a714:	add	sp, sp, #52	; 0x34
   1a718:	pop	{r4, r5, pc}
   1a71c:	push	{r4, r5, r6, lr}
   1a720:	sub	sp, sp, #48	; 0x30
   1a724:	mov	r4, r0
   1a728:	mov	r5, r2
   1a72c:	mov	r6, r3
   1a730:	mov	r0, sp
   1a734:	bl	18ef0 <__assert_fail@plt+0x7d64>
   1a738:	mov	r3, sp
   1a73c:	mov	r2, r6
   1a740:	mov	r1, r5
   1a744:	mov	r0, r4
   1a748:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a74c:	add	sp, sp, #48	; 0x30
   1a750:	pop	{r4, r5, r6, pc}
   1a754:	push	{r4, lr}
   1a758:	mov	r2, r1
   1a75c:	mov	r1, r0
   1a760:	mov	r0, #0
   1a764:	bl	1a6e8 <__assert_fail@plt+0x955c>
   1a768:	pop	{r4, pc}
   1a76c:	push	{r4, lr}
   1a770:	mov	r3, r2
   1a774:	mov	r2, r1
   1a778:	mov	r1, r0
   1a77c:	mov	r0, #0
   1a780:	bl	1a71c <__assert_fail@plt+0x9590>
   1a784:	pop	{r4, pc}
   1a788:	push	{r4, r5, r6, lr}
   1a78c:	sub	sp, sp, #48	; 0x30
   1a790:	mov	r4, r0
   1a794:	mov	r5, r1
   1a798:	mov	r6, r2
   1a79c:	mov	ip, sp
   1a7a0:	ldr	lr, [pc, #64]	; 1a7e8 <__assert_fail@plt+0x965c>
   1a7a4:	ldm	lr!, {r0, r1, r2, r3}
   1a7a8:	stmia	ip!, {r0, r1, r2, r3}
   1a7ac:	ldm	lr!, {r0, r1, r2, r3}
   1a7b0:	stmia	ip!, {r0, r1, r2, r3}
   1a7b4:	ldm	lr, {r0, r1, r2, r3}
   1a7b8:	stm	ip, {r0, r1, r2, r3}
   1a7bc:	mov	r2, #1
   1a7c0:	mov	r1, r6
   1a7c4:	mov	r0, sp
   1a7c8:	bl	1a3f4 <__assert_fail@plt+0x9268>
   1a7cc:	mov	r3, sp
   1a7d0:	mov	r2, r5
   1a7d4:	mov	r1, r4
   1a7d8:	mov	r0, #0
   1a7dc:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a7e0:	add	sp, sp, #48	; 0x30
   1a7e4:	pop	{r4, r5, r6, pc}
   1a7e8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a7ec:	push	{r4, lr}
   1a7f0:	mov	r2, r1
   1a7f4:	mvn	r1, #0
   1a7f8:	bl	1a788 <__assert_fail@plt+0x95fc>
   1a7fc:	pop	{r4, pc}
   1a800:	push	{r4, lr}
   1a804:	mov	r1, #58	; 0x3a
   1a808:	bl	1a7ec <__assert_fail@plt+0x9660>
   1a80c:	pop	{r4, pc}
   1a810:	push	{r4, lr}
   1a814:	mov	r2, #58	; 0x3a
   1a818:	bl	1a788 <__assert_fail@plt+0x95fc>
   1a81c:	pop	{r4, pc}
   1a820:	push	{r4, r5, lr}
   1a824:	sub	sp, sp, #100	; 0x64
   1a828:	mov	r4, r0
   1a82c:	mov	r5, r2
   1a830:	mov	r0, sp
   1a834:	bl	18ef0 <__assert_fail@plt+0x7d64>
   1a838:	add	lr, sp, #48	; 0x30
   1a83c:	mov	ip, sp
   1a840:	ldm	ip!, {r0, r1, r2, r3}
   1a844:	stmia	lr!, {r0, r1, r2, r3}
   1a848:	ldm	ip!, {r0, r1, r2, r3}
   1a84c:	stmia	lr!, {r0, r1, r2, r3}
   1a850:	ldm	ip, {r0, r1, r2, r3}
   1a854:	stm	lr, {r0, r1, r2, r3}
   1a858:	mov	r2, #1
   1a85c:	mov	r1, #58	; 0x3a
   1a860:	add	r0, sp, #48	; 0x30
   1a864:	bl	1a3f4 <__assert_fail@plt+0x9268>
   1a868:	add	r3, sp, #48	; 0x30
   1a86c:	mvn	r2, #0
   1a870:	mov	r1, r5
   1a874:	mov	r0, r4
   1a878:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a87c:	add	sp, sp, #100	; 0x64
   1a880:	pop	{r4, r5, pc}
   1a884:	push	{r4, r5, r6, r7, lr}
   1a888:	sub	sp, sp, #52	; 0x34
   1a88c:	mov	r4, r0
   1a890:	mov	r6, r1
   1a894:	mov	r7, r2
   1a898:	mov	r5, r3
   1a89c:	mov	ip, sp
   1a8a0:	ldr	lr, [pc, #64]	; 1a8e8 <__assert_fail@plt+0x975c>
   1a8a4:	ldm	lr!, {r0, r1, r2, r3}
   1a8a8:	stmia	ip!, {r0, r1, r2, r3}
   1a8ac:	ldm	lr!, {r0, r1, r2, r3}
   1a8b0:	stmia	ip!, {r0, r1, r2, r3}
   1a8b4:	ldm	lr, {r0, r1, r2, r3}
   1a8b8:	stm	ip, {r0, r1, r2, r3}
   1a8bc:	mov	r2, r7
   1a8c0:	mov	r1, r6
   1a8c4:	mov	r0, sp
   1a8c8:	bl	1a450 <__assert_fail@plt+0x92c4>
   1a8cc:	mov	r3, sp
   1a8d0:	ldr	r2, [sp, #72]	; 0x48
   1a8d4:	mov	r1, r5
   1a8d8:	mov	r0, r4
   1a8dc:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a8e0:	add	sp, sp, #52	; 0x34
   1a8e4:	pop	{r4, r5, r6, r7, pc}
   1a8e8:			; <UNDEFINED> instruction: 0x0002e2b8
   1a8ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1a8f0:	sub	sp, sp, #12
   1a8f4:	mvn	ip, #0
   1a8f8:	str	ip, [sp]
   1a8fc:	bl	1a884 <__assert_fail@plt+0x96f8>
   1a900:	add	sp, sp, #12
   1a904:	pop	{pc}		; (ldr pc, [sp], #4)
   1a908:	push	{r4, lr}
   1a90c:	mov	r3, r2
   1a910:	mov	r2, r1
   1a914:	mov	r1, r0
   1a918:	mov	r0, #0
   1a91c:	bl	1a8ec <__assert_fail@plt+0x9760>
   1a920:	pop	{r4, pc}
   1a924:	push	{lr}		; (str lr, [sp, #-4]!)
   1a928:	sub	sp, sp, #12
   1a92c:	str	r3, [sp]
   1a930:	mov	r3, r2
   1a934:	mov	r2, r1
   1a938:	mov	r1, r0
   1a93c:	mov	r0, #0
   1a940:	bl	1a884 <__assert_fail@plt+0x96f8>
   1a944:	add	sp, sp, #12
   1a948:	pop	{pc}		; (ldr pc, [sp], #4)
   1a94c:	push	{r4, lr}
   1a950:	ldr	r3, [pc, #4]	; 1a95c <__assert_fail@plt+0x97d0>
   1a954:	bl	1a1c8 <__assert_fail@plt+0x903c>
   1a958:	pop	{r4, pc}
   1a95c:	andeq	lr, r2, r4, lsr r1
   1a960:	push	{r4, lr}
   1a964:	mov	r2, r1
   1a968:	mov	r1, r0
   1a96c:	mov	r0, #0
   1a970:	bl	1a94c <__assert_fail@plt+0x97c0>
   1a974:	pop	{r4, pc}
   1a978:	push	{r4, lr}
   1a97c:	mvn	r2, #0
   1a980:	bl	1a94c <__assert_fail@plt+0x97c0>
   1a984:	pop	{r4, pc}
   1a988:	push	{r4, lr}
   1a98c:	mov	r1, r0
   1a990:	mov	r0, #0
   1a994:	bl	1a978 <__assert_fail@plt+0x97ec>
   1a998:	pop	{r4, pc}
   1a99c:	push	{r4, lr}
   1a9a0:	mov	r2, #3
   1a9a4:	mov	r1, #0
   1a9a8:	bl	1bd38 <__assert_fail@plt+0xabac>
   1a9ac:	pop	{r4, pc}
   1a9b0:	push	{r4, r5, r6, lr}
   1a9b4:	sub	sp, sp, #32
   1a9b8:	mov	r4, r0
   1a9bc:	ldr	r5, [sp, #48]	; 0x30
   1a9c0:	ldr	r6, [sp, #52]	; 0x34
   1a9c4:	cmp	r1, #0
   1a9c8:	beq	1aa80 <__assert_fail@plt+0x98f4>
   1a9cc:	str	r3, [sp, #4]
   1a9d0:	str	r2, [sp]
   1a9d4:	mov	r3, r1
   1a9d8:	ldr	r2, [pc, #940]	; 1ad8c <__assert_fail@plt+0x9c00>
   1a9dc:	mov	r1, #1
   1a9e0:	bl	110d8 <__fprintf_chk@plt>
   1a9e4:	mov	r2, #5
   1a9e8:	ldr	r1, [pc, #928]	; 1ad90 <__assert_fail@plt+0x9c04>
   1a9ec:	mov	r0, #0
   1a9f0:	bl	10f7c <dcgettext@plt>
   1a9f4:	ldr	r3, [pc, #920]	; 1ad94 <__assert_fail@plt+0x9c08>
   1a9f8:	str	r3, [sp]
   1a9fc:	mov	r3, r0
   1aa00:	ldr	r2, [pc, #912]	; 1ad98 <__assert_fail@plt+0x9c0c>
   1aa04:	mov	r1, #1
   1aa08:	mov	r0, r4
   1aa0c:	bl	110d8 <__fprintf_chk@plt>
   1aa10:	mov	r1, r4
   1aa14:	mov	r0, #10
   1aa18:	bl	10f70 <fputc_unlocked@plt>
   1aa1c:	mov	r2, #5
   1aa20:	ldr	r1, [pc, #884]	; 1ad9c <__assert_fail@plt+0x9c10>
   1aa24:	mov	r0, #0
   1aa28:	bl	10f7c <dcgettext@plt>
   1aa2c:	ldr	r3, [pc, #876]	; 1ada0 <__assert_fail@plt+0x9c14>
   1aa30:	mov	r2, r0
   1aa34:	mov	r1, #1
   1aa38:	mov	r0, r4
   1aa3c:	bl	110d8 <__fprintf_chk@plt>
   1aa40:	mov	r1, r4
   1aa44:	mov	r0, #10
   1aa48:	bl	10f70 <fputc_unlocked@plt>
   1aa4c:	cmp	r6, #9
   1aa50:	ldrls	pc, [pc, r6, lsl #2]
   1aa54:	b	1ad24 <__assert_fail@plt+0x9b98>
   1aa58:			; <UNDEFINED> instruction: 0x0001aabc
   1aa5c:	muleq	r1, r8, sl
   1aa60:	andeq	sl, r1, r4, asr #21
   1aa64:	strdeq	sl, [r1], -r4
   1aa68:	andeq	sl, r1, ip, lsr #22
   1aa6c:	andeq	sl, r1, ip, ror #22
   1aa70:			; <UNDEFINED> instruction: 0x0001abb4
   1aa74:	andeq	sl, r1, r4, lsl #24
   1aa78:	andeq	sl, r1, ip, asr ip
   1aa7c:			; <UNDEFINED> instruction: 0x0001acbc
   1aa80:	str	r3, [sp]
   1aa84:	mov	r3, r2
   1aa88:	ldr	r2, [pc, #788]	; 1ada4 <__assert_fail@plt+0x9c18>
   1aa8c:	mov	r1, #1
   1aa90:	bl	110d8 <__fprintf_chk@plt>
   1aa94:	b	1a9e4 <__assert_fail@plt+0x9858>
   1aa98:	mov	r2, #5
   1aa9c:	ldr	r1, [pc, #772]	; 1ada8 <__assert_fail@plt+0x9c1c>
   1aaa0:	mov	r0, #0
   1aaa4:	bl	10f7c <dcgettext@plt>
   1aaa8:	ldr	r3, [r5]
   1aaac:	mov	r2, r0
   1aab0:	mov	r1, #1
   1aab4:	mov	r0, r4
   1aab8:	bl	110d8 <__fprintf_chk@plt>
   1aabc:	add	sp, sp, #32
   1aac0:	pop	{r4, r5, r6, pc}
   1aac4:	mov	r2, #5
   1aac8:	ldr	r1, [pc, #732]	; 1adac <__assert_fail@plt+0x9c20>
   1aacc:	mov	r0, #0
   1aad0:	bl	10f7c <dcgettext@plt>
   1aad4:	ldr	r3, [r5]
   1aad8:	ldr	r2, [r5, #4]
   1aadc:	str	r2, [sp]
   1aae0:	mov	r2, r0
   1aae4:	mov	r1, #1
   1aae8:	mov	r0, r4
   1aaec:	bl	110d8 <__fprintf_chk@plt>
   1aaf0:	b	1aabc <__assert_fail@plt+0x9930>
   1aaf4:	mov	r2, #5
   1aaf8:	ldr	r1, [pc, #688]	; 1adb0 <__assert_fail@plt+0x9c24>
   1aafc:	mov	r0, #0
   1ab00:	bl	10f7c <dcgettext@plt>
   1ab04:	ldr	r3, [r5]
   1ab08:	ldr	r2, [r5, #8]
   1ab0c:	str	r2, [sp, #4]
   1ab10:	ldr	r2, [r5, #4]
   1ab14:	str	r2, [sp]
   1ab18:	mov	r2, r0
   1ab1c:	mov	r1, #1
   1ab20:	mov	r0, r4
   1ab24:	bl	110d8 <__fprintf_chk@plt>
   1ab28:	b	1aabc <__assert_fail@plt+0x9930>
   1ab2c:	mov	r2, #5
   1ab30:	ldr	r1, [pc, #636]	; 1adb4 <__assert_fail@plt+0x9c28>
   1ab34:	mov	r0, #0
   1ab38:	bl	10f7c <dcgettext@plt>
   1ab3c:	ldr	r3, [r5]
   1ab40:	ldr	r2, [r5, #12]
   1ab44:	str	r2, [sp, #8]
   1ab48:	ldr	r2, [r5, #8]
   1ab4c:	str	r2, [sp, #4]
   1ab50:	ldr	r2, [r5, #4]
   1ab54:	str	r2, [sp]
   1ab58:	mov	r2, r0
   1ab5c:	mov	r1, #1
   1ab60:	mov	r0, r4
   1ab64:	bl	110d8 <__fprintf_chk@plt>
   1ab68:	b	1aabc <__assert_fail@plt+0x9930>
   1ab6c:	mov	r2, #5
   1ab70:	ldr	r1, [pc, #576]	; 1adb8 <__assert_fail@plt+0x9c2c>
   1ab74:	mov	r0, #0
   1ab78:	bl	10f7c <dcgettext@plt>
   1ab7c:	ldr	r3, [r5]
   1ab80:	ldr	r2, [r5, #16]
   1ab84:	str	r2, [sp, #12]
   1ab88:	ldr	r2, [r5, #12]
   1ab8c:	str	r2, [sp, #8]
   1ab90:	ldr	r2, [r5, #8]
   1ab94:	str	r2, [sp, #4]
   1ab98:	ldr	r2, [r5, #4]
   1ab9c:	str	r2, [sp]
   1aba0:	mov	r2, r0
   1aba4:	mov	r1, #1
   1aba8:	mov	r0, r4
   1abac:	bl	110d8 <__fprintf_chk@plt>
   1abb0:	b	1aabc <__assert_fail@plt+0x9930>
   1abb4:	mov	r2, #5
   1abb8:	ldr	r1, [pc, #508]	; 1adbc <__assert_fail@plt+0x9c30>
   1abbc:	mov	r0, #0
   1abc0:	bl	10f7c <dcgettext@plt>
   1abc4:	ldr	r3, [r5]
   1abc8:	ldr	r2, [r5, #20]
   1abcc:	str	r2, [sp, #16]
   1abd0:	ldr	r2, [r5, #16]
   1abd4:	str	r2, [sp, #12]
   1abd8:	ldr	r2, [r5, #12]
   1abdc:	str	r2, [sp, #8]
   1abe0:	ldr	r2, [r5, #8]
   1abe4:	str	r2, [sp, #4]
   1abe8:	ldr	r2, [r5, #4]
   1abec:	str	r2, [sp]
   1abf0:	mov	r2, r0
   1abf4:	mov	r1, #1
   1abf8:	mov	r0, r4
   1abfc:	bl	110d8 <__fprintf_chk@plt>
   1ac00:	b	1aabc <__assert_fail@plt+0x9930>
   1ac04:	mov	r2, #5
   1ac08:	ldr	r1, [pc, #432]	; 1adc0 <__assert_fail@plt+0x9c34>
   1ac0c:	mov	r0, #0
   1ac10:	bl	10f7c <dcgettext@plt>
   1ac14:	ldr	r3, [r5]
   1ac18:	ldr	r2, [r5, #24]
   1ac1c:	str	r2, [sp, #20]
   1ac20:	ldr	r2, [r5, #20]
   1ac24:	str	r2, [sp, #16]
   1ac28:	ldr	r2, [r5, #16]
   1ac2c:	str	r2, [sp, #12]
   1ac30:	ldr	r2, [r5, #12]
   1ac34:	str	r2, [sp, #8]
   1ac38:	ldr	r2, [r5, #8]
   1ac3c:	str	r2, [sp, #4]
   1ac40:	ldr	r2, [r5, #4]
   1ac44:	str	r2, [sp]
   1ac48:	mov	r2, r0
   1ac4c:	mov	r1, #1
   1ac50:	mov	r0, r4
   1ac54:	bl	110d8 <__fprintf_chk@plt>
   1ac58:	b	1aabc <__assert_fail@plt+0x9930>
   1ac5c:	mov	r2, #5
   1ac60:	ldr	r1, [pc, #348]	; 1adc4 <__assert_fail@plt+0x9c38>
   1ac64:	mov	r0, #0
   1ac68:	bl	10f7c <dcgettext@plt>
   1ac6c:	ldr	r3, [r5]
   1ac70:	ldr	r2, [r5, #28]
   1ac74:	str	r2, [sp, #24]
   1ac78:	ldr	r2, [r5, #24]
   1ac7c:	str	r2, [sp, #20]
   1ac80:	ldr	r2, [r5, #20]
   1ac84:	str	r2, [sp, #16]
   1ac88:	ldr	r2, [r5, #16]
   1ac8c:	str	r2, [sp, #12]
   1ac90:	ldr	r2, [r5, #12]
   1ac94:	str	r2, [sp, #8]
   1ac98:	ldr	r2, [r5, #8]
   1ac9c:	str	r2, [sp, #4]
   1aca0:	ldr	r2, [r5, #4]
   1aca4:	str	r2, [sp]
   1aca8:	mov	r2, r0
   1acac:	mov	r1, #1
   1acb0:	mov	r0, r4
   1acb4:	bl	110d8 <__fprintf_chk@plt>
   1acb8:	b	1aabc <__assert_fail@plt+0x9930>
   1acbc:	mov	r2, #5
   1acc0:	ldr	r1, [pc, #256]	; 1adc8 <__assert_fail@plt+0x9c3c>
   1acc4:	mov	r0, #0
   1acc8:	bl	10f7c <dcgettext@plt>
   1accc:	ldr	r3, [r5]
   1acd0:	ldr	r2, [r5, #32]
   1acd4:	str	r2, [sp, #28]
   1acd8:	ldr	r2, [r5, #28]
   1acdc:	str	r2, [sp, #24]
   1ace0:	ldr	r2, [r5, #24]
   1ace4:	str	r2, [sp, #20]
   1ace8:	ldr	r2, [r5, #20]
   1acec:	str	r2, [sp, #16]
   1acf0:	ldr	r2, [r5, #16]
   1acf4:	str	r2, [sp, #12]
   1acf8:	ldr	r2, [r5, #12]
   1acfc:	str	r2, [sp, #8]
   1ad00:	ldr	r2, [r5, #8]
   1ad04:	str	r2, [sp, #4]
   1ad08:	ldr	r2, [r5, #4]
   1ad0c:	str	r2, [sp]
   1ad10:	mov	r2, r0
   1ad14:	mov	r1, #1
   1ad18:	mov	r0, r4
   1ad1c:	bl	110d8 <__fprintf_chk@plt>
   1ad20:	b	1aabc <__assert_fail@plt+0x9930>
   1ad24:	mov	r2, #5
   1ad28:	ldr	r1, [pc, #156]	; 1adcc <__assert_fail@plt+0x9c40>
   1ad2c:	mov	r0, #0
   1ad30:	bl	10f7c <dcgettext@plt>
   1ad34:	ldr	r3, [r5]
   1ad38:	ldr	r2, [r5, #32]
   1ad3c:	str	r2, [sp, #28]
   1ad40:	ldr	r2, [r5, #28]
   1ad44:	str	r2, [sp, #24]
   1ad48:	ldr	r2, [r5, #24]
   1ad4c:	str	r2, [sp, #20]
   1ad50:	ldr	r2, [r5, #20]
   1ad54:	str	r2, [sp, #16]
   1ad58:	ldr	r2, [r5, #16]
   1ad5c:	str	r2, [sp, #12]
   1ad60:	ldr	r2, [r5, #12]
   1ad64:	str	r2, [sp, #8]
   1ad68:	ldr	r2, [r5, #8]
   1ad6c:	str	r2, [sp, #4]
   1ad70:	ldr	r2, [r5, #4]
   1ad74:	str	r2, [sp]
   1ad78:	mov	r2, r0
   1ad7c:	mov	r1, #1
   1ad80:	mov	r0, r4
   1ad84:	bl	110d8 <__fprintf_chk@plt>
   1ad88:	b	1aabc <__assert_fail@plt+0x9930>
   1ad8c:	ldrdeq	sp, [r1], -r4
   1ad90:	andeq	sp, r1, r8, ror #15
   1ad94:	andeq	r0, r0, r6, ror #15
   1ad98:	andeq	sp, r1, r0, asr #21
   1ad9c:	andeq	sp, r1, ip, ror #15
   1ada0:	muleq	r1, r8, r8
   1ada4:	andeq	sp, r1, r0, ror #15
   1ada8:			; <UNDEFINED> instruction: 0x0001d8bc
   1adac:	andeq	sp, r1, ip, asr #17
   1adb0:	andeq	sp, r1, r4, ror #17
   1adb4:	andeq	sp, r1, r0, lsl #18
   1adb8:	andeq	sp, r1, r0, lsr #18
   1adbc:	andeq	sp, r1, r4, asr #18
   1adc0:	andeq	sp, r1, ip, ror #18
   1adc4:	muleq	r1, r8, r9
   1adc8:	andeq	sp, r1, r8, asr #19
   1adcc:	strdeq	sp, [r1], -ip
   1add0:	push	{r4, r5, lr}
   1add4:	sub	sp, sp, #12
   1add8:	ldr	r5, [sp, #24]
   1addc:	ldr	ip, [r5]
   1ade0:	cmp	ip, #0
   1ade4:	beq	1ae14 <__assert_fail@plt+0x9c88>
   1ade8:	mov	lr, r5
   1adec:	mov	ip, #0
   1adf0:	add	ip, ip, #1
   1adf4:	ldr	r4, [lr, #4]!
   1adf8:	cmp	r4, #0
   1adfc:	bne	1adf0 <__assert_fail@plt+0x9c64>
   1ae00:	str	ip, [sp, #4]
   1ae04:	str	r5, [sp]
   1ae08:	bl	1a9b0 <__assert_fail@plt+0x9824>
   1ae0c:	add	sp, sp, #12
   1ae10:	pop	{r4, r5, pc}
   1ae14:	mov	ip, #0
   1ae18:	b	1ae00 <__assert_fail@plt+0x9c74>
   1ae1c:	push	{r4, r5, lr}
   1ae20:	sub	sp, sp, #52	; 0x34
   1ae24:	ldr	r4, [sp, #64]	; 0x40
   1ae28:	sub	r4, r4, #4
   1ae2c:	add	r5, sp, #4
   1ae30:	mov	ip, #0
   1ae34:	ldr	lr, [r4, #4]!
   1ae38:	str	lr, [r5, #4]!
   1ae3c:	cmp	lr, #0
   1ae40:	beq	1ae50 <__assert_fail@plt+0x9cc4>
   1ae44:	add	ip, ip, #1
   1ae48:	cmp	ip, #10
   1ae4c:	bne	1ae34 <__assert_fail@plt+0x9ca8>
   1ae50:	str	ip, [sp, #4]
   1ae54:	add	ip, sp, #8
   1ae58:	str	ip, [sp]
   1ae5c:	bl	1a9b0 <__assert_fail@plt+0x9824>
   1ae60:	add	sp, sp, #52	; 0x34
   1ae64:	pop	{r4, r5, pc}
   1ae68:	push	{r3}		; (str r3, [sp, #-4]!)
   1ae6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae70:	sub	sp, sp, #16
   1ae74:	add	r3, sp, #24
   1ae78:	str	r3, [sp, #12]
   1ae7c:	str	r3, [sp]
   1ae80:	ldr	r3, [sp, #20]
   1ae84:	bl	1ae1c <__assert_fail@plt+0x9c90>
   1ae88:	add	sp, sp, #16
   1ae8c:	pop	{lr}		; (ldr lr, [sp], #4)
   1ae90:	add	sp, sp, #4
   1ae94:	bx	lr
   1ae98:	push	{r4, lr}
   1ae9c:	ldr	r3, [pc, #112]	; 1af14 <__assert_fail@plt+0x9d88>
   1aea0:	ldr	r1, [r3]
   1aea4:	mov	r0, #10
   1aea8:	bl	10f70 <fputc_unlocked@plt>
   1aeac:	mov	r2, #5
   1aeb0:	ldr	r1, [pc, #96]	; 1af18 <__assert_fail@plt+0x9d8c>
   1aeb4:	mov	r0, #0
   1aeb8:	bl	10f7c <dcgettext@plt>
   1aebc:	ldr	r2, [pc, #88]	; 1af1c <__assert_fail@plt+0x9d90>
   1aec0:	mov	r1, r0
   1aec4:	mov	r0, #1
   1aec8:	bl	110c0 <__printf_chk@plt>
   1aecc:	mov	r2, #5
   1aed0:	ldr	r1, [pc, #72]	; 1af20 <__assert_fail@plt+0x9d94>
   1aed4:	mov	r0, #0
   1aed8:	bl	10f7c <dcgettext@plt>
   1aedc:	ldr	r3, [pc, #64]	; 1af24 <__assert_fail@plt+0x9d98>
   1aee0:	ldr	r2, [pc, #64]	; 1af28 <__assert_fail@plt+0x9d9c>
   1aee4:	mov	r1, r0
   1aee8:	mov	r0, #1
   1aeec:	bl	110c0 <__printf_chk@plt>
   1aef0:	mov	r2, #5
   1aef4:	ldr	r1, [pc, #48]	; 1af2c <__assert_fail@plt+0x9da0>
   1aef8:	mov	r0, #0
   1aefc:	bl	10f7c <dcgettext@plt>
   1af00:	ldr	r2, [pc, #40]	; 1af30 <__assert_fail@plt+0x9da4>
   1af04:	mov	r1, r0
   1af08:	mov	r0, #1
   1af0c:	bl	110c0 <__printf_chk@plt>
   1af10:	pop	{r4, pc}
   1af14:	andeq	lr, r2, r4, lsl #3
   1af18:	andeq	sp, r1, r8, lsr sl
   1af1c:	andeq	sp, r1, ip, asr #20
   1af20:	andeq	sp, r1, r4, ror #20
   1af24:	andeq	ip, r1, r0, asr #31
   1af28:	andeq	ip, r1, r8, ror #31
   1af2c:	andeq	sp, r1, r8, ror sl
   1af30:	andeq	sp, r1, r0, lsr #21
   1af34:	push	{r4, lr}
   1af38:	bl	1bc40 <__assert_fail@plt+0xaab4>
   1af3c:	cmp	r0, #0
   1af40:	popne	{r4, pc}
   1af44:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1af48:	push	{r4, lr}
   1af4c:	bl	1bc40 <__assert_fail@plt+0xaab4>
   1af50:	cmp	r0, #0
   1af54:	popne	{r4, pc}
   1af58:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1af5c:	push	{r4, lr}
   1af60:	bl	1af34 <__assert_fail@plt+0x9da8>
   1af64:	pop	{r4, pc}
   1af68:	push	{r4, r5, r6, lr}
   1af6c:	mov	r5, r0
   1af70:	mov	r4, r1
   1af74:	bl	1bc70 <__assert_fail@plt+0xaae4>
   1af78:	cmp	r0, #0
   1af7c:	popne	{r4, r5, r6, pc}
   1af80:	adds	r4, r4, #0
   1af84:	movne	r4, #1
   1af88:	cmp	r5, #0
   1af8c:	orreq	r4, r4, #1
   1af90:	cmp	r4, #0
   1af94:	popeq	{r4, r5, r6, pc}
   1af98:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1af9c:	push	{r4, lr}
   1afa0:	cmp	r1, #0
   1afa4:	orreq	r1, r1, #1
   1afa8:	bl	1bc70 <__assert_fail@plt+0xaae4>
   1afac:	cmp	r0, #0
   1afb0:	popne	{r4, pc}
   1afb4:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1afb8:	push	{r4, r5, r6, lr}
   1afbc:	mov	r6, r0
   1afc0:	mov	r5, r1
   1afc4:	mov	r4, r2
   1afc8:	bl	1c01c <__assert_fail@plt+0xae90>
   1afcc:	cmp	r0, #0
   1afd0:	popne	{r4, r5, r6, pc}
   1afd4:	cmp	r6, #0
   1afd8:	beq	1afe8 <__assert_fail@plt+0x9e5c>
   1afdc:	cmp	r5, #0
   1afe0:	cmpne	r4, #0
   1afe4:	popeq	{r4, r5, r6, pc}
   1afe8:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1afec:	push	{r4, lr}
   1aff0:	bl	1afb8 <__assert_fail@plt+0x9e2c>
   1aff4:	pop	{r4, pc}
   1aff8:	push	{r4, lr}
   1affc:	mov	ip, r1
   1b000:	mov	r3, r2
   1b004:	cmp	r2, #0
   1b008:	cmpne	r1, #0
   1b00c:	moveq	r3, #1
   1b010:	moveq	ip, r3
   1b014:	mov	r2, r3
   1b018:	mov	r1, ip
   1b01c:	bl	1c01c <__assert_fail@plt+0xae90>
   1b020:	cmp	r0, #0
   1b024:	popne	{r4, pc}
   1b028:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1b02c:	push	{r4, lr}
   1b030:	mov	r2, r1
   1b034:	mov	r1, r0
   1b038:	mov	r0, #0
   1b03c:	bl	1afb8 <__assert_fail@plt+0x9e2c>
   1b040:	pop	{r4, pc}
   1b044:	push	{r4, lr}
   1b048:	mov	r2, r1
   1b04c:	mov	r1, r0
   1b050:	mov	r0, #0
   1b054:	bl	1aff8 <__assert_fail@plt+0x9e6c>
   1b058:	pop	{r4, pc}
   1b05c:	push	{r4, r5, r6, r7, r8, lr}
   1b060:	mov	r5, r1
   1b064:	mov	r6, r2
   1b068:	ldr	r4, [r1]
   1b06c:	subs	r7, r0, #0
   1b070:	beq	1b08c <__assert_fail@plt+0x9f00>
   1b074:	lsr	r2, r4, #1
   1b078:	add	r3, r2, #1
   1b07c:	mvn	r3, r3
   1b080:	cmp	r4, r3
   1b084:	bls	1b0b0 <__assert_fail@plt+0x9f24>
   1b088:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1b08c:	cmp	r4, #0
   1b090:	bne	1b0b8 <__assert_fail@plt+0x9f2c>
   1b094:	mov	r1, r2
   1b098:	mov	r0, #64	; 0x40
   1b09c:	bl	1c170 <__assert_fail@plt+0xafe4>
   1b0a0:	cmp	r0, #0
   1b0a4:	movne	r4, r0
   1b0a8:	addeq	r4, r0, #1
   1b0ac:	b	1b0b8 <__assert_fail@plt+0x9f2c>
   1b0b0:	add	r4, r4, #1
   1b0b4:	add	r4, r4, r2
   1b0b8:	mov	r2, r6
   1b0bc:	mov	r1, r4
   1b0c0:	mov	r0, r7
   1b0c4:	bl	1afb8 <__assert_fail@plt+0x9e2c>
   1b0c8:	str	r4, [r5]
   1b0cc:	pop	{r4, r5, r6, r7, r8, pc}
   1b0d0:	push	{r4, lr}
   1b0d4:	mov	r2, #1
   1b0d8:	bl	1b05c <__assert_fail@plt+0x9ed0>
   1b0dc:	pop	{r4, pc}
   1b0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0e4:	sub	sp, sp, #12
   1b0e8:	mov	fp, r0
   1b0ec:	mov	sl, r1
   1b0f0:	mov	r9, r2
   1b0f4:	mov	r7, r3
   1b0f8:	ldr	r6, [sp, #48]	; 0x30
   1b0fc:	ldr	r5, [r1]
   1b100:	asrs	r4, r5, #1
   1b104:	bmi	1b260 <__assert_fail@plt+0xa0d4>
   1b108:	cmp	r5, #0
   1b10c:	blt	1b274 <__assert_fail@plt+0xa0e8>
   1b110:	mvn	r3, #-2147483648	; 0x80000000
   1b114:	sub	r3, r3, r4
   1b118:	cmp	r5, r3
   1b11c:	movle	r3, #0
   1b120:	movgt	r3, #1
   1b124:	cmp	r3, #0
   1b128:	addeq	r4, r4, r5
   1b12c:	mvnne	r4, #-2147483648	; 0x80000000
   1b130:	mvn	r8, r7
   1b134:	lsr	r8, r8, #31
   1b138:	cmp	r7, r4
   1b13c:	movge	r3, #0
   1b140:	andlt	r3, r8, #1
   1b144:	cmp	r3, #0
   1b148:	movne	r4, r7
   1b14c:	cmp	r6, #0
   1b150:	blt	1b288 <__assert_fail@plt+0xa0fc>
   1b154:	cmp	r6, #0
   1b158:	beq	1b334 <__assert_fail@plt+0xa1a8>
   1b15c:	cmp	r4, #0
   1b160:	blt	1b2e4 <__assert_fail@plt+0xa158>
   1b164:	mov	r1, r6
   1b168:	mvn	r0, #-2147483648	; 0x80000000
   1b16c:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b170:	cmp	r0, r4
   1b174:	movge	r0, #0
   1b178:	movlt	r0, #1
   1b17c:	cmp	r0, #0
   1b180:	mvnne	r3, #-2147483648	; 0x80000000
   1b184:	strne	r3, [sp, #4]
   1b188:	beq	1b31c <__assert_fail@plt+0xa190>
   1b18c:	mov	r1, r6
   1b190:	ldr	r0, [sp, #4]
   1b194:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b198:	mov	r4, r0
   1b19c:	mov	r1, r6
   1b1a0:	ldr	r0, [sp, #4]
   1b1a4:	bl	1c59c <__assert_fail@plt+0xb410>
   1b1a8:	ldr	r3, [sp, #4]
   1b1ac:	sub	r1, r3, r1
   1b1b0:	cmp	fp, #0
   1b1b4:	moveq	r3, #0
   1b1b8:	streq	r3, [sl]
   1b1bc:	sub	r3, r4, r5
   1b1c0:	cmp	r3, r9
   1b1c4:	bge	1b24c <__assert_fail@plt+0xa0c0>
   1b1c8:	cmp	r9, #0
   1b1cc:	blt	1b340 <__assert_fail@plt+0xa1b4>
   1b1d0:	cmp	r5, #0
   1b1d4:	blt	1b354 <__assert_fail@plt+0xa1c8>
   1b1d8:	mvn	r3, #-2147483648	; 0x80000000
   1b1dc:	sub	r3, r3, r9
   1b1e0:	cmp	r5, r3
   1b1e4:	movle	r3, #0
   1b1e8:	movgt	r3, #1
   1b1ec:	cmp	r3, #0
   1b1f0:	bne	1b3fc <__assert_fail@plt+0xa270>
   1b1f4:	add	r5, r5, r9
   1b1f8:	mov	r4, r5
   1b1fc:	cmp	r7, r5
   1b200:	movge	r7, #0
   1b204:	andlt	r7, r8, #1
   1b208:	cmp	r7, #0
   1b20c:	bne	1b3fc <__assert_fail@plt+0xa270>
   1b210:	cmp	r6, #0
   1b214:	blt	1b368 <__assert_fail@plt+0xa1dc>
   1b218:	cmp	r6, #0
   1b21c:	beq	1b248 <__assert_fail@plt+0xa0bc>
   1b220:	cmp	r5, #0
   1b224:	blt	1b3c4 <__assert_fail@plt+0xa238>
   1b228:	mov	r1, r6
   1b22c:	mvn	r0, #-2147483648	; 0x80000000
   1b230:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b234:	cmp	r5, r0
   1b238:	movle	r0, #0
   1b23c:	movgt	r0, #1
   1b240:	cmp	r0, #0
   1b244:	bne	1b3fc <__assert_fail@plt+0xa270>
   1b248:	mul	r1, r5, r6
   1b24c:	mov	r0, fp
   1b250:	bl	1af68 <__assert_fail@plt+0x9ddc>
   1b254:	str	r4, [sl]
   1b258:	add	sp, sp, #12
   1b25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b260:	rsb	r3, r4, #-2147483648	; 0x80000000
   1b264:	cmp	r5, r3
   1b268:	movge	r3, #0
   1b26c:	movlt	r3, #1
   1b270:	b	1b124 <__assert_fail@plt+0x9f98>
   1b274:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b278:	cmp	r4, r3
   1b27c:	movge	r3, #0
   1b280:	movlt	r3, #1
   1b284:	b	1b124 <__assert_fail@plt+0x9f98>
   1b288:	cmp	r4, #0
   1b28c:	blt	1b2b4 <__assert_fail@plt+0xa128>
   1b290:	cmn	r6, #1
   1b294:	beq	1b2d0 <__assert_fail@plt+0xa144>
   1b298:	mov	r1, r6
   1b29c:	mov	r0, #-2147483648	; 0x80000000
   1b2a0:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b2a4:	cmp	r0, r4
   1b2a8:	movge	r0, #0
   1b2ac:	movlt	r0, #1
   1b2b0:	b	1b17c <__assert_fail@plt+0x9ff0>
   1b2b4:	mov	r1, r6
   1b2b8:	mvn	r0, #-2147483648	; 0x80000000
   1b2bc:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b2c0:	cmp	r0, r4
   1b2c4:	movle	r0, #0
   1b2c8:	movgt	r0, #1
   1b2cc:	b	1b17c <__assert_fail@plt+0x9ff0>
   1b2d0:	add	r0, r4, #-2147483648	; 0x80000000
   1b2d4:	cmp	r0, #0
   1b2d8:	movle	r0, #0
   1b2dc:	movgt	r0, #1
   1b2e0:	b	1b17c <__assert_fail@plt+0x9ff0>
   1b2e4:	cmn	r4, #1
   1b2e8:	beq	1b308 <__assert_fail@plt+0xa17c>
   1b2ec:	mov	r1, r4
   1b2f0:	mov	r0, #-2147483648	; 0x80000000
   1b2f4:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b2f8:	cmp	r6, r0
   1b2fc:	movle	r0, #0
   1b300:	movgt	r0, #1
   1b304:	b	1b17c <__assert_fail@plt+0x9ff0>
   1b308:	add	r0, r6, #-2147483648	; 0x80000000
   1b30c:	cmp	r0, #0
   1b310:	movle	r0, #0
   1b314:	movgt	r0, #1
   1b318:	b	1b17c <__assert_fail@plt+0x9ff0>
   1b31c:	mul	r1, r6, r4
   1b320:	cmp	r1, #63	; 0x3f
   1b324:	movle	r3, #64	; 0x40
   1b328:	strle	r3, [sp, #4]
   1b32c:	bgt	1b1b0 <__assert_fail@plt+0xa024>
   1b330:	b	1b18c <__assert_fail@plt+0xa000>
   1b334:	mov	r3, #64	; 0x40
   1b338:	str	r3, [sp, #4]
   1b33c:	b	1b18c <__assert_fail@plt+0xa000>
   1b340:	rsb	r3, r9, #-2147483648	; 0x80000000
   1b344:	cmp	r5, r3
   1b348:	movge	r3, #0
   1b34c:	movlt	r3, #1
   1b350:	b	1b1ec <__assert_fail@plt+0xa060>
   1b354:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b358:	cmp	r9, r3
   1b35c:	movge	r3, #0
   1b360:	movlt	r3, #1
   1b364:	b	1b1ec <__assert_fail@plt+0xa060>
   1b368:	cmp	r5, #0
   1b36c:	blt	1b394 <__assert_fail@plt+0xa208>
   1b370:	cmn	r6, #1
   1b374:	beq	1b3b0 <__assert_fail@plt+0xa224>
   1b378:	mov	r1, r6
   1b37c:	mov	r0, #-2147483648	; 0x80000000
   1b380:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b384:	cmp	r5, r0
   1b388:	movle	r0, #0
   1b38c:	movgt	r0, #1
   1b390:	b	1b240 <__assert_fail@plt+0xa0b4>
   1b394:	mov	r1, r6
   1b398:	mvn	r0, #-2147483648	; 0x80000000
   1b39c:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b3a0:	cmp	r5, r0
   1b3a4:	movge	r0, #0
   1b3a8:	movlt	r0, #1
   1b3ac:	b	1b240 <__assert_fail@plt+0xa0b4>
   1b3b0:	add	r0, r5, #-2147483648	; 0x80000000
   1b3b4:	cmp	r0, #0
   1b3b8:	movle	r0, #0
   1b3bc:	movgt	r0, #1
   1b3c0:	b	1b240 <__assert_fail@plt+0xa0b4>
   1b3c4:	cmn	r5, #1
   1b3c8:	beq	1b3e8 <__assert_fail@plt+0xa25c>
   1b3cc:	mov	r1, r5
   1b3d0:	mov	r0, #-2147483648	; 0x80000000
   1b3d4:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b3d8:	cmp	r6, r0
   1b3dc:	movle	r0, #0
   1b3e0:	movgt	r0, #1
   1b3e4:	b	1b240 <__assert_fail@plt+0xa0b4>
   1b3e8:	add	r0, r6, #-2147483648	; 0x80000000
   1b3ec:	cmp	r0, #0
   1b3f0:	movle	r0, #0
   1b3f4:	movgt	r0, #1
   1b3f8:	b	1b240 <__assert_fail@plt+0xa0b4>
   1b3fc:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1b400:	push	{r4, lr}
   1b404:	bl	1bbf0 <__assert_fail@plt+0xaa64>
   1b408:	cmp	r0, #0
   1b40c:	popne	{r4, pc}
   1b410:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1b414:	push	{r4, lr}
   1b418:	mov	r1, #1
   1b41c:	bl	1b400 <__assert_fail@plt+0xa274>
   1b420:	pop	{r4, pc}
   1b424:	push	{r4, lr}
   1b428:	bl	1bbf0 <__assert_fail@plt+0xaa64>
   1b42c:	cmp	r0, #0
   1b430:	popne	{r4, pc}
   1b434:	bl	1b4d8 <__assert_fail@plt+0xa34c>
   1b438:	push	{r4, lr}
   1b43c:	mov	r1, #1
   1b440:	bl	1b424 <__assert_fail@plt+0xa298>
   1b444:	pop	{r4, pc}
   1b448:	push	{r4, r5, r6, lr}
   1b44c:	mov	r5, r0
   1b450:	mov	r4, r1
   1b454:	mov	r0, r1
   1b458:	bl	1af34 <__assert_fail@plt+0x9da8>
   1b45c:	mov	r2, r4
   1b460:	mov	r1, r5
   1b464:	bl	10f34 <memcpy@plt>
   1b468:	pop	{r4, r5, r6, pc}
   1b46c:	push	{r4, r5, r6, lr}
   1b470:	mov	r5, r0
   1b474:	mov	r4, r1
   1b478:	mov	r0, r1
   1b47c:	bl	1af48 <__assert_fail@plt+0x9dbc>
   1b480:	mov	r2, r4
   1b484:	mov	r1, r5
   1b488:	bl	10f34 <memcpy@plt>
   1b48c:	pop	{r4, r5, r6, pc}
   1b490:	push	{r4, r5, r6, lr}
   1b494:	mov	r5, r0
   1b498:	mov	r4, r1
   1b49c:	add	r0, r1, #1
   1b4a0:	bl	1af48 <__assert_fail@plt+0x9dbc>
   1b4a4:	mov	r2, #0
   1b4a8:	strb	r2, [r0, r4]
   1b4ac:	mov	r2, r4
   1b4b0:	mov	r1, r5
   1b4b4:	bl	10f34 <memcpy@plt>
   1b4b8:	pop	{r4, r5, r6, pc}
   1b4bc:	push	{r4, lr}
   1b4c0:	mov	r4, r0
   1b4c4:	bl	11078 <strlen@plt>
   1b4c8:	add	r1, r0, #1
   1b4cc:	mov	r0, r4
   1b4d0:	bl	1b448 <__assert_fail@plt+0xa2bc>
   1b4d4:	pop	{r4, pc}
   1b4d8:	push	{r4, lr}
   1b4dc:	ldr	r3, [pc, #40]	; 1b50c <__assert_fail@plt+0xa380>
   1b4e0:	ldr	r4, [r3]
   1b4e4:	mov	r2, #5
   1b4e8:	ldr	r1, [pc, #32]	; 1b510 <__assert_fail@plt+0xa384>
   1b4ec:	mov	r0, #0
   1b4f0:	bl	10f7c <dcgettext@plt>
   1b4f4:	mov	r3, r0
   1b4f8:	ldr	r2, [pc, #20]	; 1b514 <__assert_fail@plt+0xa388>
   1b4fc:	mov	r1, #0
   1b500:	mov	r0, r4
   1b504:	bl	11000 <error@plt>
   1b508:	bl	11168 <abort@plt>
   1b50c:	andeq	lr, r2, r0, lsr #2
   1b510:	strdeq	sp, [r1], -r0
   1b514:	andeq	sp, r1, ip, asr #1
   1b518:	push	{r4, r5, r6, r7, lr}
   1b51c:	sub	sp, sp, #20
   1b520:	mov	r7, r0
   1b524:	mov	r4, r2
   1b528:	mov	r5, r3
   1b52c:	ldr	r6, [sp, #56]	; 0x38
   1b530:	ldr	r3, [sp, #48]	; 0x30
   1b534:	str	r3, [sp]
   1b538:	add	r3, sp, #8
   1b53c:	mov	r2, r1
   1b540:	mov	r1, #0
   1b544:	bl	1b770 <__assert_fail@plt+0xa5e4>
   1b548:	cmp	r0, #0
   1b54c:	bne	1b5cc <__assert_fail@plt+0xa440>
   1b550:	ldrd	r0, [sp, #8]
   1b554:	ldrd	r2, [sp, #40]	; 0x28
   1b558:	cmp	r1, r3
   1b55c:	cmpeq	r0, r2
   1b560:	movhi	r3, #1
   1b564:	movls	r3, #0
   1b568:	cmp	r1, r5
   1b56c:	cmpeq	r0, r4
   1b570:	orrcc	r3, r3, #1
   1b574:	cmp	r3, #0
   1b578:	beq	1b644 <__assert_fail@plt+0xa4b8>
   1b57c:	mvn	r2, #-1073741824	; 0xc0000000
   1b580:	mov	r3, #0
   1b584:	cmp	r1, r3
   1b588:	cmpeq	r0, r2
   1b58c:	bls	1b5bc <__assert_fail@plt+0xa430>
   1b590:	bl	11090 <__errno_location@plt>
   1b594:	mov	r3, #75	; 0x4b
   1b598:	str	r3, [r0]
   1b59c:	cmp	r6, #0
   1b5a0:	bne	1b61c <__assert_fail@plt+0xa490>
   1b5a4:	mov	r6, #1
   1b5a8:	bl	11090 <__errno_location@plt>
   1b5ac:	ldr	r4, [r0]
   1b5b0:	cmp	r4, #22
   1b5b4:	moveq	r4, #0
   1b5b8:	b	1b624 <__assert_fail@plt+0xa498>
   1b5bc:	bl	11090 <__errno_location@plt>
   1b5c0:	mov	r3, #34	; 0x22
   1b5c4:	str	r3, [r0]
   1b5c8:	b	1b59c <__assert_fail@plt+0xa410>
   1b5cc:	cmp	r0, #1
   1b5d0:	beq	1b5e8 <__assert_fail@plt+0xa45c>
   1b5d4:	cmp	r0, #3
   1b5d8:	beq	1b60c <__assert_fail@plt+0xa480>
   1b5dc:	cmp	r6, #0
   1b5e0:	moveq	r6, #1
   1b5e4:	b	1b5a8 <__assert_fail@plt+0xa41c>
   1b5e8:	bl	11090 <__errno_location@plt>
   1b5ec:	mov	r3, #75	; 0x4b
   1b5f0:	str	r3, [r0]
   1b5f4:	cmp	r6, #0
   1b5f8:	bne	1b5a8 <__assert_fail@plt+0xa41c>
   1b5fc:	bl	11090 <__errno_location@plt>
   1b600:	ldr	r4, [r0]
   1b604:	mov	r6, #1
   1b608:	b	1b624 <__assert_fail@plt+0xa498>
   1b60c:	bl	11090 <__errno_location@plt>
   1b610:	mov	r3, #0
   1b614:	str	r3, [r0]
   1b618:	b	1b5f4 <__assert_fail@plt+0xa468>
   1b61c:	bl	11090 <__errno_location@plt>
   1b620:	ldr	r4, [r0]
   1b624:	mov	r0, r7
   1b628:	bl	1a988 <__assert_fail@plt+0x97fc>
   1b62c:	str	r0, [sp]
   1b630:	ldr	r3, [sp, #52]	; 0x34
   1b634:	ldr	r2, [pc, #16]	; 1b64c <__assert_fail@plt+0xa4c0>
   1b638:	mov	r1, r4
   1b63c:	mov	r0, r6
   1b640:	bl	11000 <error@plt>
   1b644:	add	sp, sp, #20
   1b648:	pop	{r4, r5, r6, r7, pc}
   1b64c:			; <UNDEFINED> instruction: 0x0001d6b4
   1b650:	push	{r4, r5, lr}
   1b654:	sub	sp, sp, #28
   1b658:	ldr	r1, [sp, #56]	; 0x38
   1b65c:	str	r1, [sp, #16]
   1b660:	ldr	r1, [sp, #52]	; 0x34
   1b664:	str	r1, [sp, #12]
   1b668:	ldr	r1, [sp, #48]	; 0x30
   1b66c:	str	r1, [sp, #8]
   1b670:	ldrd	r4, [sp, #40]	; 0x28
   1b674:	strd	r4, [sp]
   1b678:	mov	r1, #10
   1b67c:	bl	1b518 <__assert_fail@plt+0xa38c>
   1b680:	add	sp, sp, #28
   1b684:	pop	{r4, r5, pc}
   1b688:	push	{r4, r5, r6, lr}
   1b68c:	mov	r5, r0
   1b690:	subs	r4, r1, #0
   1b694:	blt	1b6e8 <__assert_fail@plt+0xa55c>
   1b698:	cmp	r4, #0
   1b69c:	moveq	r3, #0
   1b6a0:	beq	1b6cc <__assert_fail@plt+0xa540>
   1b6a4:	mov	r2, r4
   1b6a8:	asr	r3, r4, #31
   1b6ac:	mvn	r0, #0
   1b6b0:	mvn	r1, #0
   1b6b4:	bl	1c5bc <__assert_fail@plt+0xb430>
   1b6b8:	ldrd	r2, [r5]
   1b6bc:	cmp	r1, r3
   1b6c0:	cmpeq	r0, r2
   1b6c4:	movcc	r3, #1
   1b6c8:	movcs	r3, #0
   1b6cc:	cmp	r3, #0
   1b6d0:	beq	1b708 <__assert_fail@plt+0xa57c>
   1b6d4:	mvn	r2, #0
   1b6d8:	mvn	r3, #0
   1b6dc:	strd	r2, [r5]
   1b6e0:	mov	r0, #1
   1b6e4:	pop	{r4, r5, r6, pc}
   1b6e8:	mov	r1, r4
   1b6ec:	mov	r0, #0
   1b6f0:	bl	1c37c <__assert_fail@plt+0xb1f0>
   1b6f4:	ldrd	r2, [r5]
   1b6f8:	orrs	r3, r2, r3
   1b6fc:	movne	r3, #1
   1b700:	moveq	r3, #0
   1b704:	b	1b6cc <__assert_fail@plt+0xa540>
   1b708:	asr	r3, r4, #31
   1b70c:	ldr	r1, [r5, #4]
   1b710:	ldr	r2, [r5]
   1b714:	mul	r3, r3, r2
   1b718:	mla	r1, r4, r1, r3
   1b71c:	umull	r2, r3, r2, r4
   1b720:	add	r3, r1, r3
   1b724:	strd	r2, [r5]
   1b728:	mov	r0, #0
   1b72c:	pop	{r4, r5, r6, pc}
   1b730:	push	{r4, r5, r6, r7, r8, lr}
   1b734:	subs	r4, r2, #0
   1b738:	beq	1b768 <__assert_fail@plt+0xa5dc>
   1b73c:	mov	r7, r1
   1b740:	mov	r6, r0
   1b744:	mov	r5, #0
   1b748:	mov	r1, r7
   1b74c:	mov	r0, r6
   1b750:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1b754:	orr	r5, r5, r0
   1b758:	subs	r4, r4, #1
   1b75c:	bne	1b748 <__assert_fail@plt+0xa5bc>
   1b760:	mov	r0, r5
   1b764:	pop	{r4, r5, r6, r7, r8, pc}
   1b768:	mov	r5, #0
   1b76c:	b	1b760 <__assert_fail@plt+0xa5d4>
   1b770:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b774:	sub	sp, sp, #20
   1b778:	cmp	r2, #36	; 0x24
   1b77c:	bhi	1b7bc <__assert_fail@plt+0xa630>
   1b780:	mov	r5, r0
   1b784:	mov	r6, r1
   1b788:	mov	r7, r2
   1b78c:	mov	r9, r3
   1b790:	cmp	r1, #0
   1b794:	addeq	r6, sp, #12
   1b798:	bl	11090 <__errno_location@plt>
   1b79c:	mov	r8, r0
   1b7a0:	mov	r3, #0
   1b7a4:	str	r3, [r0]
   1b7a8:	ldrb	r4, [r5]
   1b7ac:	bl	11054 <__ctype_b_loc@plt>
   1b7b0:	ldr	r1, [r0]
   1b7b4:	mov	r2, r5
   1b7b8:	b	1b7d4 <__assert_fail@plt+0xa648>
   1b7bc:	ldr	r3, [pc, #1056]	; 1bbe4 <__assert_fail@plt+0xaa58>
   1b7c0:	mov	r2, #85	; 0x55
   1b7c4:	ldr	r1, [pc, #1052]	; 1bbe8 <__assert_fail@plt+0xaa5c>
   1b7c8:	ldr	r0, [pc, #1052]	; 1bbec <__assert_fail@plt+0xaa60>
   1b7cc:	bl	1118c <__assert_fail@plt>
   1b7d0:	ldrb	r4, [r2, #1]!
   1b7d4:	lsl	r3, r4, #1
   1b7d8:	ldrh	r3, [r1, r3]
   1b7dc:	tst	r3, #8192	; 0x2000
   1b7e0:	bne	1b7d0 <__assert_fail@plt+0xa644>
   1b7e4:	cmp	r4, #45	; 0x2d
   1b7e8:	moveq	r4, #4
   1b7ec:	bne	1b7fc <__assert_fail@plt+0xa670>
   1b7f0:	mov	r0, r4
   1b7f4:	add	sp, sp, #20
   1b7f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b7fc:	mov	r3, #0
   1b800:	mov	r2, r7
   1b804:	mov	r1, r6
   1b808:	mov	r0, r5
   1b80c:	bl	10f40 <__strtoull_internal@plt>
   1b810:	strd	r0, [sp]
   1b814:	ldr	r7, [r6]
   1b818:	cmp	r5, r7
   1b81c:	beq	1b840 <__assert_fail@plt+0xa6b4>
   1b820:	ldr	r3, [r8]
   1b824:	cmp	r3, #0
   1b828:	beq	1b888 <__assert_fail@plt+0xa6fc>
   1b82c:	cmp	r3, #34	; 0x22
   1b830:	moveq	r4, #1
   1b834:	beq	1b88c <__assert_fail@plt+0xa700>
   1b838:	mov	r4, #4
   1b83c:	b	1b7f0 <__assert_fail@plt+0xa664>
   1b840:	ldr	r3, [sp, #48]	; 0x30
   1b844:	cmp	r3, #0
   1b848:	moveq	r4, #4
   1b84c:	beq	1b7f0 <__assert_fail@plt+0xa664>
   1b850:	ldrb	r1, [r7]
   1b854:	cmp	r1, #0
   1b858:	moveq	r4, #4
   1b85c:	beq	1b7f0 <__assert_fail@plt+0xa664>
   1b860:	mov	r0, r3
   1b864:	bl	11084 <strchr@plt>
   1b868:	cmp	r0, #0
   1b86c:	moveq	r4, #4
   1b870:	beq	1b7f0 <__assert_fail@plt+0xa664>
   1b874:	mov	r2, #1
   1b878:	mov	r3, #0
   1b87c:	strd	r2, [sp]
   1b880:	mov	r4, #0
   1b884:	b	1b898 <__assert_fail@plt+0xa70c>
   1b888:	mov	r4, #0
   1b88c:	ldr	r3, [sp, #48]	; 0x30
   1b890:	cmp	r3, #0
   1b894:	beq	1b988 <__assert_fail@plt+0xa7fc>
   1b898:	ldrb	r5, [r7]
   1b89c:	cmp	r5, #0
   1b8a0:	beq	1bb20 <__assert_fail@plt+0xa994>
   1b8a4:	mov	r1, r5
   1b8a8:	ldr	r0, [sp, #48]	; 0x30
   1b8ac:	bl	11084 <strchr@plt>
   1b8b0:	cmp	r0, #0
   1b8b4:	beq	1b990 <__assert_fail@plt+0xa804>
   1b8b8:	sub	r3, r5, #69	; 0x45
   1b8bc:	cmp	r3, #47	; 0x2f
   1b8c0:	ldrls	pc, [pc, r3, lsl #2]
   1b8c4:	b	1b9fc <__assert_fail@plt+0xa870>
   1b8c8:	andeq	fp, r1, r0, lsr #19
   1b8cc:	strdeq	fp, [r1], -ip
   1b8d0:	andeq	fp, r1, r0, lsr #19
   1b8d4:	strdeq	fp, [r1], -ip
   1b8d8:	strdeq	fp, [r1], -ip
   1b8dc:	strdeq	fp, [r1], -ip
   1b8e0:	andeq	fp, r1, r0, lsr #19
   1b8e4:	strdeq	fp, [r1], -ip
   1b8e8:	andeq	fp, r1, r0, lsr #19
   1b8ec:	strdeq	fp, [r1], -ip
   1b8f0:	strdeq	fp, [r1], -ip
   1b8f4:	andeq	fp, r1, r0, lsr #19
   1b8f8:	strdeq	fp, [r1], -ip
   1b8fc:	strdeq	fp, [r1], -ip
   1b900:	strdeq	fp, [r1], -ip
   1b904:	andeq	fp, r1, r0, lsr #19
   1b908:	strdeq	fp, [r1], -ip
   1b90c:	strdeq	fp, [r1], -ip
   1b910:	strdeq	fp, [r1], -ip
   1b914:	strdeq	fp, [r1], -ip
   1b918:	andeq	fp, r1, r0, lsr #19
   1b91c:	andeq	fp, r1, r0, lsr #19
   1b920:	strdeq	fp, [r1], -ip
   1b924:	strdeq	fp, [r1], -ip
   1b928:	strdeq	fp, [r1], -ip
   1b92c:	strdeq	fp, [r1], -ip
   1b930:	strdeq	fp, [r1], -ip
   1b934:	strdeq	fp, [r1], -ip
   1b938:	strdeq	fp, [r1], -ip
   1b93c:	strdeq	fp, [r1], -ip
   1b940:	strdeq	fp, [r1], -ip
   1b944:	strdeq	fp, [r1], -ip
   1b948:	strdeq	fp, [r1], -ip
   1b94c:	strdeq	fp, [r1], -ip
   1b950:	andeq	fp, r1, r0, lsr #19
   1b954:	strdeq	fp, [r1], -ip
   1b958:	strdeq	fp, [r1], -ip
   1b95c:	strdeq	fp, [r1], -ip
   1b960:	andeq	fp, r1, r0, lsr #19
   1b964:	strdeq	fp, [r1], -ip
   1b968:	andeq	fp, r1, r0, lsr #19
   1b96c:	strdeq	fp, [r1], -ip
   1b970:	strdeq	fp, [r1], -ip
   1b974:	strdeq	fp, [r1], -ip
   1b978:	strdeq	fp, [r1], -ip
   1b97c:	strdeq	fp, [r1], -ip
   1b980:	strdeq	fp, [r1], -ip
   1b984:	andeq	fp, r1, r0, lsr #19
   1b988:	strd	r0, [r9]
   1b98c:	b	1b7f0 <__assert_fail@plt+0xa664>
   1b990:	ldrd	r2, [sp]
   1b994:	strd	r2, [r9]
   1b998:	orr	r4, r4, #2
   1b99c:	b	1b7f0 <__assert_fail@plt+0xa664>
   1b9a0:	mov	r1, #48	; 0x30
   1b9a4:	ldr	r0, [sp, #48]	; 0x30
   1b9a8:	bl	11084 <strchr@plt>
   1b9ac:	cmp	r0, #0
   1b9b0:	beq	1baec <__assert_fail@plt+0xa960>
   1b9b4:	ldrb	r3, [r7, #1]
   1b9b8:	cmp	r3, #68	; 0x44
   1b9bc:	beq	1b9d8 <__assert_fail@plt+0xa84c>
   1b9c0:	cmp	r3, #105	; 0x69
   1b9c4:	beq	1b9e4 <__assert_fail@plt+0xa858>
   1b9c8:	cmp	r3, #66	; 0x42
   1b9cc:	movne	r7, #1
   1b9d0:	movne	r1, #1024	; 0x400
   1b9d4:	bne	1ba04 <__assert_fail@plt+0xa878>
   1b9d8:	mov	r7, #2
   1b9dc:	mov	r1, #1000	; 0x3e8
   1b9e0:	b	1ba04 <__assert_fail@plt+0xa878>
   1b9e4:	ldrb	r7, [r7, #2]
   1b9e8:	cmp	r7, #66	; 0x42
   1b9ec:	movne	r7, #1
   1b9f0:	moveq	r7, #3
   1b9f4:	mov	r1, #1024	; 0x400
   1b9f8:	b	1ba04 <__assert_fail@plt+0xa878>
   1b9fc:	mov	r7, #1
   1ba00:	mov	r1, #1024	; 0x400
   1ba04:	sub	r5, r5, #66	; 0x42
   1ba08:	cmp	r5, #53	; 0x35
   1ba0c:	ldrls	pc, [pc, r5, lsl #2]
   1ba10:	b	1bbcc <__assert_fail@plt+0xaa40>
   1ba14:	andeq	fp, r1, ip, lsr #22
   1ba18:	andeq	fp, r1, ip, asr #23
   1ba1c:	andeq	fp, r1, ip, asr #23
   1ba20:	andeq	fp, r1, ip, lsr fp
   1ba24:	andeq	fp, r1, ip, asr #23
   1ba28:	andeq	fp, r1, ip, asr #22
   1ba2c:	andeq	fp, r1, ip, asr #23
   1ba30:	andeq	fp, r1, ip, asr #23
   1ba34:	andeq	fp, r1, ip, asr #23
   1ba38:	andeq	fp, r1, ip, asr fp
   1ba3c:	andeq	fp, r1, ip, asr #23
   1ba40:	andeq	fp, r1, ip, ror #22
   1ba44:	andeq	fp, r1, ip, asr #23
   1ba48:	andeq	fp, r1, ip, asr #23
   1ba4c:	andeq	fp, r1, ip, ror fp
   1ba50:	andeq	fp, r1, ip, asr #23
   1ba54:	andeq	fp, r1, ip, asr #23
   1ba58:	andeq	fp, r1, ip, asr #23
   1ba5c:	andeq	fp, r1, ip, lsl #23
   1ba60:	andeq	fp, r1, ip, asr #23
   1ba64:	andeq	fp, r1, ip, asr #23
   1ba68:	andeq	fp, r1, ip, asr #23
   1ba6c:	andeq	fp, r1, ip, asr #23
   1ba70:	andeq	fp, r1, ip, lsr #23
   1ba74:			; <UNDEFINED> instruction: 0x0001bbbc
   1ba78:	andeq	fp, r1, ip, asr #23
   1ba7c:	andeq	fp, r1, ip, asr #23
   1ba80:	andeq	fp, r1, ip, asr #23
   1ba84:	andeq	fp, r1, ip, asr #23
   1ba88:	andeq	fp, r1, ip, asr #23
   1ba8c:	andeq	fp, r1, ip, asr #23
   1ba90:	andeq	fp, r1, ip, asr #23
   1ba94:	strdeq	fp, [r1], -r8
   1ba98:	ldrdeq	fp, [r1], -ip
   1ba9c:	andeq	fp, r1, ip, asr #23
   1baa0:	andeq	fp, r1, ip, asr #23
   1baa4:	andeq	fp, r1, ip, asr #23
   1baa8:	andeq	fp, r1, ip, asr #22
   1baac:	andeq	fp, r1, ip, asr #23
   1bab0:	andeq	fp, r1, ip, asr #23
   1bab4:	andeq	fp, r1, ip, asr #23
   1bab8:	andeq	fp, r1, ip, asr fp
   1babc:	andeq	fp, r1, ip, asr #23
   1bac0:	andeq	fp, r1, ip, ror #22
   1bac4:	andeq	fp, r1, ip, asr #23
   1bac8:	andeq	fp, r1, ip, asr #23
   1bacc:	andeq	fp, r1, ip, asr #23
   1bad0:	andeq	fp, r1, ip, asr #23
   1bad4:	andeq	fp, r1, ip, asr #23
   1bad8:	andeq	fp, r1, ip, asr #23
   1badc:	andeq	fp, r1, ip, lsl #23
   1bae0:	andeq	fp, r1, ip, asr #23
   1bae4:	andeq	fp, r1, ip, asr #23
   1bae8:	muleq	r1, ip, fp
   1baec:	mov	r7, #1
   1baf0:	mov	r1, #1024	; 0x400
   1baf4:	b	1ba04 <__assert_fail@plt+0xa878>
   1baf8:	mov	r1, #512	; 0x200
   1bafc:	mov	r0, sp
   1bb00:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1bb04:	orr	r4, r4, r0
   1bb08:	ldr	r3, [r6]
   1bb0c:	add	r2, r3, r7
   1bb10:	str	r2, [r6]
   1bb14:	ldrb	r3, [r3, r7]
   1bb18:	cmp	r3, #0
   1bb1c:	orrne	r4, r4, #2
   1bb20:	ldrd	r2, [sp]
   1bb24:	strd	r2, [r9]
   1bb28:	b	1b7f0 <__assert_fail@plt+0xa664>
   1bb2c:	mov	r1, #1024	; 0x400
   1bb30:	mov	r0, sp
   1bb34:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1bb38:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb3c:	mov	r2, #6
   1bb40:	mov	r0, sp
   1bb44:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bb48:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb4c:	mov	r2, #3
   1bb50:	mov	r0, sp
   1bb54:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bb58:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb5c:	mov	r2, #1
   1bb60:	mov	r0, sp
   1bb64:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bb68:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb6c:	mov	r2, #2
   1bb70:	mov	r0, sp
   1bb74:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bb78:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb7c:	mov	r2, #5
   1bb80:	mov	r0, sp
   1bb84:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bb88:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb8c:	mov	r2, #4
   1bb90:	mov	r0, sp
   1bb94:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bb98:	b	1bb04 <__assert_fail@plt+0xa978>
   1bb9c:	mov	r1, #2
   1bba0:	mov	r0, sp
   1bba4:	bl	1b688 <__assert_fail@plt+0xa4fc>
   1bba8:	b	1bb04 <__assert_fail@plt+0xa978>
   1bbac:	mov	r2, #8
   1bbb0:	mov	r0, sp
   1bbb4:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bbb8:	b	1bb04 <__assert_fail@plt+0xa978>
   1bbbc:	mov	r2, #7
   1bbc0:	mov	r0, sp
   1bbc4:	bl	1b730 <__assert_fail@plt+0xa5a4>
   1bbc8:	b	1bb04 <__assert_fail@plt+0xa978>
   1bbcc:	ldrd	r2, [sp]
   1bbd0:	strd	r2, [r9]
   1bbd4:	orr	r4, r4, #2
   1bbd8:	b	1b7f0 <__assert_fail@plt+0xa664>
   1bbdc:	mov	r0, #0
   1bbe0:	b	1bb04 <__assert_fail@plt+0xa978>
   1bbe4:	andeq	sp, r1, r4, lsl #22
   1bbe8:	andeq	sp, r1, r0, lsl fp
   1bbec:	andeq	sp, r1, r0, lsr #22
   1bbf0:	push	{r4, lr}
   1bbf4:	mov	r2, r0
   1bbf8:	mov	r3, r1
   1bbfc:	cmp	r1, #0
   1bc00:	cmpne	r0, #0
   1bc04:	moveq	r3, #1
   1bc08:	moveq	r2, r3
   1bc0c:	umull	r0, r1, r2, r3
   1bc10:	cmp	r0, #0
   1bc14:	cmpge	r1, #0
   1bc18:	bne	1bc2c <__assert_fail@plt+0xaaa0>
   1bc1c:	mov	r1, r3
   1bc20:	mov	r0, r2
   1bc24:	bl	10ebc <calloc@plt>
   1bc28:	pop	{r4, pc}
   1bc2c:	bl	11090 <__errno_location@plt>
   1bc30:	mov	r3, #12
   1bc34:	str	r3, [r0]
   1bc38:	mov	r0, #0
   1bc3c:	pop	{r4, pc}
   1bc40:	push	{r4, lr}
   1bc44:	cmp	r0, #0
   1bc48:	moveq	r0, #1
   1bc4c:	cmp	r0, #0
   1bc50:	blt	1bc5c <__assert_fail@plt+0xaad0>
   1bc54:	bl	1100c <malloc@plt>
   1bc58:	pop	{r4, pc}
   1bc5c:	bl	11090 <__errno_location@plt>
   1bc60:	mov	r3, #12
   1bc64:	str	r3, [r0]
   1bc68:	mov	r0, #0
   1bc6c:	pop	{r4, pc}
   1bc70:	push	{r4, lr}
   1bc74:	cmp	r0, #0
   1bc78:	beq	1bc94 <__assert_fail@plt+0xab08>
   1bc7c:	cmp	r1, #0
   1bc80:	beq	1bca0 <__assert_fail@plt+0xab14>
   1bc84:	cmp	r1, #0
   1bc88:	blt	1bcac <__assert_fail@plt+0xab20>
   1bc8c:	bl	10f88 <realloc@plt>
   1bc90:	pop	{r4, pc}
   1bc94:	mov	r0, r1
   1bc98:	bl	1bc40 <__assert_fail@plt+0xaab4>
   1bc9c:	pop	{r4, pc}
   1bca0:	bl	18d38 <__assert_fail@plt+0x7bac>
   1bca4:	mov	r0, #0
   1bca8:	pop	{r4, pc}
   1bcac:	bl	11090 <__errno_location@plt>
   1bcb0:	mov	r3, #12
   1bcb4:	str	r3, [r0]
   1bcb8:	mov	r0, #0
   1bcbc:	pop	{r4, pc}
   1bcc0:	push	{r4, r5, r6, lr}
   1bcc4:	mov	r5, r0
   1bcc8:	bl	10fe8 <__fpending@plt>
   1bccc:	mov	r6, r0
   1bcd0:	ldr	r4, [r5]
   1bcd4:	and	r4, r4, #32
   1bcd8:	mov	r0, r5
   1bcdc:	bl	18b90 <__assert_fail@plt+0x7a04>
   1bce0:	cmp	r4, #0
   1bce4:	bne	1bd0c <__assert_fail@plt+0xab80>
   1bce8:	cmp	r0, #0
   1bcec:	popeq	{r4, r5, r6, pc}
   1bcf0:	cmp	r6, #0
   1bcf4:	bne	1bd28 <__assert_fail@plt+0xab9c>
   1bcf8:	bl	11090 <__errno_location@plt>
   1bcfc:	ldr	r0, [r0]
   1bd00:	subs	r0, r0, #9
   1bd04:	mvnne	r0, #0
   1bd08:	pop	{r4, r5, r6, pc}
   1bd0c:	cmp	r0, #0
   1bd10:	bne	1bd30 <__assert_fail@plt+0xaba4>
   1bd14:	bl	11090 <__errno_location@plt>
   1bd18:	mov	r3, #0
   1bd1c:	str	r3, [r0]
   1bd20:	mvn	r0, #0
   1bd24:	pop	{r4, r5, r6, pc}
   1bd28:	mvn	r0, #0
   1bd2c:	pop	{r4, r5, r6, pc}
   1bd30:	mvn	r0, #0
   1bd34:	pop	{r4, r5, r6, pc}
   1bd38:	push	{r1, r2, r3}
   1bd3c:	push	{r4, r5, r6, lr}
   1bd40:	sub	sp, sp, #12
   1bd44:	mov	r5, r0
   1bd48:	ldr	r1, [sp, #28]
   1bd4c:	add	r3, sp, #32
   1bd50:	str	r3, [sp, #4]
   1bd54:	cmp	r1, #0
   1bd58:	beq	1bda0 <__assert_fail@plt+0xac14>
   1bd5c:	ldr	r3, [pc, #540]	; 1bf80 <__assert_fail@plt+0xadf4>
   1bd60:	cmp	r1, r3
   1bd64:	beq	1bdd0 <__assert_fail@plt+0xac44>
   1bd68:	cmp	r1, #11
   1bd6c:	beq	1bf70 <__assert_fail@plt+0xade4>
   1bd70:	bgt	1befc <__assert_fail@plt+0xad70>
   1bd74:	cmp	r1, #3
   1bd78:	beq	1bf70 <__assert_fail@plt+0xade4>
   1bd7c:	ble	1bebc <__assert_fail@plt+0xad30>
   1bd80:	cmp	r1, #8
   1bd84:	beq	1bedc <__assert_fail@plt+0xad50>
   1bd88:	ble	1bed4 <__assert_fail@plt+0xad48>
   1bd8c:	cmp	r1, #9
   1bd90:	beq	1bf70 <__assert_fail@plt+0xade4>
   1bd94:	cmp	r1, #10
   1bd98:	bne	1bf34 <__assert_fail@plt+0xada8>
   1bd9c:	b	1bedc <__assert_fail@plt+0xad50>
   1bda0:	ldr	r3, [sp, #4]
   1bda4:	add	r2, r3, #4
   1bda8:	str	r2, [sp, #4]
   1bdac:	ldr	r2, [r3]
   1bdb0:	mov	r1, #0
   1bdb4:	bl	110fc <fcntl64@plt>
   1bdb8:	mov	r4, r0
   1bdbc:	mov	r0, r4
   1bdc0:	add	sp, sp, #12
   1bdc4:	pop	{r4, r5, r6, lr}
   1bdc8:	add	sp, sp, #12
   1bdcc:	bx	lr
   1bdd0:	ldr	r3, [sp, #4]
   1bdd4:	add	r2, r3, #4
   1bdd8:	str	r2, [sp, #4]
   1bddc:	ldr	r6, [r3]
   1bde0:	ldr	r3, [pc, #412]	; 1bf84 <__assert_fail@plt+0xadf8>
   1bde4:	ldr	r3, [r3]
   1bde8:	cmp	r3, #0
   1bdec:	blt	1be4c <__assert_fail@plt+0xacc0>
   1bdf0:	mov	r2, r6
   1bdf4:	ldr	r1, [pc, #388]	; 1bf80 <__assert_fail@plt+0xadf4>
   1bdf8:	bl	110fc <fcntl64@plt>
   1bdfc:	subs	r4, r0, #0
   1be00:	blt	1be14 <__assert_fail@plt+0xac88>
   1be04:	mov	r2, #1
   1be08:	ldr	r3, [pc, #372]	; 1bf84 <__assert_fail@plt+0xadf8>
   1be0c:	str	r2, [r3]
   1be10:	b	1bdbc <__assert_fail@plt+0xac30>
   1be14:	bl	11090 <__errno_location@plt>
   1be18:	ldr	r3, [r0]
   1be1c:	cmp	r3, #22
   1be20:	bne	1be04 <__assert_fail@plt+0xac78>
   1be24:	mov	r2, r6
   1be28:	mov	r1, #0
   1be2c:	mov	r0, r5
   1be30:	bl	110fc <fcntl64@plt>
   1be34:	subs	r4, r0, #0
   1be38:	blt	1bdbc <__assert_fail@plt+0xac30>
   1be3c:	mvn	r2, #0
   1be40:	ldr	r3, [pc, #316]	; 1bf84 <__assert_fail@plt+0xadf8>
   1be44:	str	r2, [r3]
   1be48:	b	1be70 <__assert_fail@plt+0xace4>
   1be4c:	mov	r2, r6
   1be50:	mov	r1, #0
   1be54:	bl	110fc <fcntl64@plt>
   1be58:	subs	r4, r0, #0
   1be5c:	blt	1bdbc <__assert_fail@plt+0xac30>
   1be60:	ldr	r3, [pc, #284]	; 1bf84 <__assert_fail@plt+0xadf8>
   1be64:	ldr	r3, [r3]
   1be68:	cmn	r3, #1
   1be6c:	bne	1bdbc <__assert_fail@plt+0xac30>
   1be70:	mov	r1, #1
   1be74:	mov	r0, r4
   1be78:	bl	110fc <fcntl64@plt>
   1be7c:	subs	r2, r0, #0
   1be80:	blt	1be9c <__assert_fail@plt+0xad10>
   1be84:	orr	r2, r2, #1
   1be88:	mov	r1, #2
   1be8c:	mov	r0, r4
   1be90:	bl	110fc <fcntl64@plt>
   1be94:	cmn	r0, #1
   1be98:	bne	1bdbc <__assert_fail@plt+0xac30>
   1be9c:	bl	11090 <__errno_location@plt>
   1bea0:	mov	r5, r0
   1bea4:	ldr	r6, [r0]
   1bea8:	mov	r0, r4
   1beac:	bl	11174 <close@plt>
   1beb0:	str	r6, [r5]
   1beb4:	mvn	r4, #0
   1beb8:	b	1bdbc <__assert_fail@plt+0xac30>
   1bebc:	cmp	r1, #1
   1bec0:	beq	1bf70 <__assert_fail@plt+0xade4>
   1bec4:	bgt	1bedc <__assert_fail@plt+0xad50>
   1bec8:	cmp	r1, #0
   1becc:	bne	1bf34 <__assert_fail@plt+0xada8>
   1bed0:	b	1bedc <__assert_fail@plt+0xad50>
   1bed4:	cmp	r1, #4
   1bed8:	bne	1bf34 <__assert_fail@plt+0xada8>
   1bedc:	ldr	r3, [sp, #4]
   1bee0:	add	r2, r3, #4
   1bee4:	str	r2, [sp, #4]
   1bee8:	ldr	r2, [r3]
   1beec:	mov	r0, r5
   1bef0:	bl	110fc <fcntl64@plt>
   1bef4:	mov	r4, r0
   1bef8:	b	1bdbc <__assert_fail@plt+0xac30>
   1befc:	ldr	r3, [pc, #132]	; 1bf88 <__assert_fail@plt+0xadfc>
   1bf00:	cmp	r1, r3
   1bf04:	bgt	1bf54 <__assert_fail@plt+0xadc8>
   1bf08:	sub	r3, r3, #1
   1bf0c:	cmp	r1, r3
   1bf10:	bge	1bedc <__assert_fail@plt+0xad50>
   1bf14:	sub	r3, r3, #5
   1bf18:	cmp	r1, r3
   1bf1c:	beq	1bf70 <__assert_fail@plt+0xade4>
   1bf20:	add	r3, r3, #1
   1bf24:	cmp	r1, r3
   1bf28:	beq	1bedc <__assert_fail@plt+0xad50>
   1bf2c:	cmp	r1, #1024	; 0x400
   1bf30:	beq	1bedc <__assert_fail@plt+0xad50>
   1bf34:	ldr	r3, [sp, #4]
   1bf38:	add	r2, r3, #4
   1bf3c:	str	r2, [sp, #4]
   1bf40:	ldr	r2, [r3]
   1bf44:	mov	r0, r5
   1bf48:	bl	110fc <fcntl64@plt>
   1bf4c:	mov	r4, r0
   1bf50:	b	1bdbc <__assert_fail@plt+0xac30>
   1bf54:	ldr	r3, [pc, #48]	; 1bf8c <__assert_fail@plt+0xae00>
   1bf58:	cmp	r1, r3
   1bf5c:	beq	1bedc <__assert_fail@plt+0xad50>
   1bf60:	blt	1bf70 <__assert_fail@plt+0xade4>
   1bf64:	add	r3, r3, #1
   1bf68:	cmp	r1, r3
   1bf6c:	bne	1bf34 <__assert_fail@plt+0xada8>
   1bf70:	mov	r0, r5
   1bf74:	bl	110fc <fcntl64@plt>
   1bf78:	mov	r4, r0
   1bf7c:	b	1bdbc <__assert_fail@plt+0xac30>
   1bf80:	andeq	r0, r0, r6, lsl #8
   1bf84:	andeq	lr, r2, r8, ror #5
   1bf88:	andeq	r0, r0, r7, lsl #8
   1bf8c:	andeq	r0, r0, r9, lsl #8
   1bf90:	push	{r4, lr}
   1bf94:	mov	r0, #14
   1bf98:	bl	1112c <nl_langinfo@plt>
   1bf9c:	cmp	r0, #0
   1bfa0:	beq	1bfb8 <__assert_fail@plt+0xae2c>
   1bfa4:	ldrb	r2, [r0]
   1bfa8:	ldr	r3, [pc, #16]	; 1bfc0 <__assert_fail@plt+0xae34>
   1bfac:	cmp	r2, #0
   1bfb0:	moveq	r0, r3
   1bfb4:	pop	{r4, pc}
   1bfb8:	ldr	r0, [pc]	; 1bfc0 <__assert_fail@plt+0xae34>
   1bfbc:	pop	{r4, pc}
   1bfc0:	andeq	sp, r1, r8, asr #22
   1bfc4:	push	{r4, r5, r6, r7, lr}
   1bfc8:	sub	sp, sp, #12
   1bfcc:	mov	r7, r1
   1bfd0:	mov	r5, r2
   1bfd4:	subs	r6, r0, #0
   1bfd8:	addeq	r6, sp, #4
   1bfdc:	mov	r0, r6
   1bfe0:	bl	10ff4 <mbrtowc@plt>
   1bfe4:	mov	r4, r0
   1bfe8:	cmp	r5, #0
   1bfec:	cmnne	r0, #3
   1bff0:	bhi	1c000 <__assert_fail@plt+0xae74>
   1bff4:	mov	r0, r4
   1bff8:	add	sp, sp, #12
   1bffc:	pop	{r4, r5, r6, r7, pc}
   1c000:	mov	r0, #0
   1c004:	bl	1c068 <__assert_fail@plt+0xaedc>
   1c008:	cmp	r0, #0
   1c00c:	ldrbeq	r3, [r7]
   1c010:	streq	r3, [r6]
   1c014:	moveq	r4, #1
   1c018:	b	1bff4 <__assert_fail@plt+0xae68>
   1c01c:	push	{r4, r5, r6, lr}
   1c020:	mov	r6, r0
   1c024:	mov	r5, r1
   1c028:	subs	r4, r2, #0
   1c02c:	beq	1c058 <__assert_fail@plt+0xaecc>
   1c030:	mov	r1, r4
   1c034:	mvn	r0, #0
   1c038:	bl	1c170 <__assert_fail@plt+0xafe4>
   1c03c:	cmp	r0, r5
   1c040:	bcs	1c058 <__assert_fail@plt+0xaecc>
   1c044:	bl	11090 <__errno_location@plt>
   1c048:	mov	r3, #12
   1c04c:	str	r3, [r0]
   1c050:	mov	r0, #0
   1c054:	pop	{r4, r5, r6, pc}
   1c058:	mul	r1, r5, r4
   1c05c:	mov	r0, r6
   1c060:	bl	1bc70 <__assert_fail@plt+0xaae4>
   1c064:	pop	{r4, r5, r6, pc}
   1c068:	push	{lr}		; (str lr, [sp, #-4]!)
   1c06c:	sub	sp, sp, #268	; 0x10c
   1c070:	ldr	r2, [pc, #68]	; 1c0bc <__assert_fail@plt+0xaf30>
   1c074:	add	r1, sp, #4
   1c078:	bl	1c0c8 <__assert_fail@plt+0xaf3c>
   1c07c:	cmp	r0, #0
   1c080:	movne	r0, #0
   1c084:	bne	1c0b4 <__assert_fail@plt+0xaf28>
   1c088:	ldr	r1, [pc, #48]	; 1c0c0 <__assert_fail@plt+0xaf34>
   1c08c:	add	r0, sp, #4
   1c090:	bl	10eec <strcmp@plt>
   1c094:	cmp	r0, #0
   1c098:	moveq	r0, #0
   1c09c:	beq	1c0b4 <__assert_fail@plt+0xaf28>
   1c0a0:	ldr	r1, [pc, #28]	; 1c0c4 <__assert_fail@plt+0xaf38>
   1c0a4:	add	r0, sp, #4
   1c0a8:	bl	10eec <strcmp@plt>
   1c0ac:	adds	r0, r0, #0
   1c0b0:	movne	r0, #1
   1c0b4:	add	sp, sp, #268	; 0x10c
   1c0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0bc:	andeq	r0, r0, r1, lsl #2
   1c0c0:	andeq	sp, r1, r0, asr fp
   1c0c4:	andeq	sp, r1, r4, asr fp
   1c0c8:	push	{r4, r5, r6, lr}
   1c0cc:	mov	r6, r1
   1c0d0:	mov	r4, r2
   1c0d4:	mov	r1, #0
   1c0d8:	bl	11114 <setlocale@plt>
   1c0dc:	subs	r5, r0, #0
   1c0e0:	beq	1c104 <__assert_fail@plt+0xaf78>
   1c0e4:	mov	r0, r5
   1c0e8:	bl	11078 <strlen@plt>
   1c0ec:	cmp	r4, r0
   1c0f0:	bhi	1c11c <__assert_fail@plt+0xaf90>
   1c0f4:	cmp	r4, #0
   1c0f8:	bne	1c134 <__assert_fail@plt+0xafa8>
   1c0fc:	mov	r0, #34	; 0x22
   1c100:	pop	{r4, r5, r6, pc}
   1c104:	cmp	r4, #0
   1c108:	beq	1c158 <__assert_fail@plt+0xafcc>
   1c10c:	mov	r3, #0
   1c110:	strb	r3, [r6]
   1c114:	mov	r0, #22
   1c118:	pop	{r4, r5, r6, pc}
   1c11c:	add	r2, r0, #1
   1c120:	mov	r1, r5
   1c124:	mov	r0, r6
   1c128:	bl	10f34 <memcpy@plt>
   1c12c:	mov	r0, #0
   1c130:	pop	{r4, r5, r6, pc}
   1c134:	sub	r4, r4, #1
   1c138:	mov	r2, r4
   1c13c:	mov	r1, r5
   1c140:	mov	r0, r6
   1c144:	bl	10f34 <memcpy@plt>
   1c148:	mov	r3, #0
   1c14c:	strb	r3, [r6, r4]
   1c150:	mov	r0, #34	; 0x22
   1c154:	pop	{r4, r5, r6, pc}
   1c158:	mov	r0, #22
   1c15c:	pop	{r4, r5, r6, pc}
   1c160:	push	{r4, lr}
   1c164:	mov	r1, #0
   1c168:	bl	11114 <setlocale@plt>
   1c16c:	pop	{r4, pc}
   1c170:	subs	r2, r1, #1
   1c174:	bxeq	lr
   1c178:	bcc	1c350 <__assert_fail@plt+0xb1c4>
   1c17c:	cmp	r0, r1
   1c180:	bls	1c334 <__assert_fail@plt+0xb1a8>
   1c184:	tst	r1, r2
   1c188:	beq	1c340 <__assert_fail@plt+0xb1b4>
   1c18c:	clz	r3, r0
   1c190:	clz	r2, r1
   1c194:	sub	r3, r2, r3
   1c198:	rsbs	r3, r3, #31
   1c19c:	addne	r3, r3, r3, lsl #1
   1c1a0:	mov	r2, #0
   1c1a4:	addne	pc, pc, r3, lsl #2
   1c1a8:	nop			; (mov r0, r0)
   1c1ac:	cmp	r0, r1, lsl #31
   1c1b0:	adc	r2, r2, r2
   1c1b4:	subcs	r0, r0, r1, lsl #31
   1c1b8:	cmp	r0, r1, lsl #30
   1c1bc:	adc	r2, r2, r2
   1c1c0:	subcs	r0, r0, r1, lsl #30
   1c1c4:	cmp	r0, r1, lsl #29
   1c1c8:	adc	r2, r2, r2
   1c1cc:	subcs	r0, r0, r1, lsl #29
   1c1d0:	cmp	r0, r1, lsl #28
   1c1d4:	adc	r2, r2, r2
   1c1d8:	subcs	r0, r0, r1, lsl #28
   1c1dc:	cmp	r0, r1, lsl #27
   1c1e0:	adc	r2, r2, r2
   1c1e4:	subcs	r0, r0, r1, lsl #27
   1c1e8:	cmp	r0, r1, lsl #26
   1c1ec:	adc	r2, r2, r2
   1c1f0:	subcs	r0, r0, r1, lsl #26
   1c1f4:	cmp	r0, r1, lsl #25
   1c1f8:	adc	r2, r2, r2
   1c1fc:	subcs	r0, r0, r1, lsl #25
   1c200:	cmp	r0, r1, lsl #24
   1c204:	adc	r2, r2, r2
   1c208:	subcs	r0, r0, r1, lsl #24
   1c20c:	cmp	r0, r1, lsl #23
   1c210:	adc	r2, r2, r2
   1c214:	subcs	r0, r0, r1, lsl #23
   1c218:	cmp	r0, r1, lsl #22
   1c21c:	adc	r2, r2, r2
   1c220:	subcs	r0, r0, r1, lsl #22
   1c224:	cmp	r0, r1, lsl #21
   1c228:	adc	r2, r2, r2
   1c22c:	subcs	r0, r0, r1, lsl #21
   1c230:	cmp	r0, r1, lsl #20
   1c234:	adc	r2, r2, r2
   1c238:	subcs	r0, r0, r1, lsl #20
   1c23c:	cmp	r0, r1, lsl #19
   1c240:	adc	r2, r2, r2
   1c244:	subcs	r0, r0, r1, lsl #19
   1c248:	cmp	r0, r1, lsl #18
   1c24c:	adc	r2, r2, r2
   1c250:	subcs	r0, r0, r1, lsl #18
   1c254:	cmp	r0, r1, lsl #17
   1c258:	adc	r2, r2, r2
   1c25c:	subcs	r0, r0, r1, lsl #17
   1c260:	cmp	r0, r1, lsl #16
   1c264:	adc	r2, r2, r2
   1c268:	subcs	r0, r0, r1, lsl #16
   1c26c:	cmp	r0, r1, lsl #15
   1c270:	adc	r2, r2, r2
   1c274:	subcs	r0, r0, r1, lsl #15
   1c278:	cmp	r0, r1, lsl #14
   1c27c:	adc	r2, r2, r2
   1c280:	subcs	r0, r0, r1, lsl #14
   1c284:	cmp	r0, r1, lsl #13
   1c288:	adc	r2, r2, r2
   1c28c:	subcs	r0, r0, r1, lsl #13
   1c290:	cmp	r0, r1, lsl #12
   1c294:	adc	r2, r2, r2
   1c298:	subcs	r0, r0, r1, lsl #12
   1c29c:	cmp	r0, r1, lsl #11
   1c2a0:	adc	r2, r2, r2
   1c2a4:	subcs	r0, r0, r1, lsl #11
   1c2a8:	cmp	r0, r1, lsl #10
   1c2ac:	adc	r2, r2, r2
   1c2b0:	subcs	r0, r0, r1, lsl #10
   1c2b4:	cmp	r0, r1, lsl #9
   1c2b8:	adc	r2, r2, r2
   1c2bc:	subcs	r0, r0, r1, lsl #9
   1c2c0:	cmp	r0, r1, lsl #8
   1c2c4:	adc	r2, r2, r2
   1c2c8:	subcs	r0, r0, r1, lsl #8
   1c2cc:	cmp	r0, r1, lsl #7
   1c2d0:	adc	r2, r2, r2
   1c2d4:	subcs	r0, r0, r1, lsl #7
   1c2d8:	cmp	r0, r1, lsl #6
   1c2dc:	adc	r2, r2, r2
   1c2e0:	subcs	r0, r0, r1, lsl #6
   1c2e4:	cmp	r0, r1, lsl #5
   1c2e8:	adc	r2, r2, r2
   1c2ec:	subcs	r0, r0, r1, lsl #5
   1c2f0:	cmp	r0, r1, lsl #4
   1c2f4:	adc	r2, r2, r2
   1c2f8:	subcs	r0, r0, r1, lsl #4
   1c2fc:	cmp	r0, r1, lsl #3
   1c300:	adc	r2, r2, r2
   1c304:	subcs	r0, r0, r1, lsl #3
   1c308:	cmp	r0, r1, lsl #2
   1c30c:	adc	r2, r2, r2
   1c310:	subcs	r0, r0, r1, lsl #2
   1c314:	cmp	r0, r1, lsl #1
   1c318:	adc	r2, r2, r2
   1c31c:	subcs	r0, r0, r1, lsl #1
   1c320:	cmp	r0, r1
   1c324:	adc	r2, r2, r2
   1c328:	subcs	r0, r0, r1
   1c32c:	mov	r0, r2
   1c330:	bx	lr
   1c334:	moveq	r0, #1
   1c338:	movne	r0, #0
   1c33c:	bx	lr
   1c340:	clz	r2, r1
   1c344:	rsb	r2, r2, #31
   1c348:	lsr	r0, r0, r2
   1c34c:	bx	lr
   1c350:	cmp	r0, #0
   1c354:	mvnne	r0, #0
   1c358:	b	1c5f8 <__assert_fail@plt+0xb46c>
   1c35c:	cmp	r1, #0
   1c360:	beq	1c350 <__assert_fail@plt+0xb1c4>
   1c364:	push	{r0, r1, lr}
   1c368:	bl	1c170 <__assert_fail@plt+0xafe4>
   1c36c:	pop	{r1, r2, lr}
   1c370:	mul	r3, r2, r0
   1c374:	sub	r1, r1, r3
   1c378:	bx	lr
   1c37c:	cmp	r1, #0
   1c380:	beq	1c58c <__assert_fail@plt+0xb400>
   1c384:	eor	ip, r0, r1
   1c388:	rsbmi	r1, r1, #0
   1c38c:	subs	r2, r1, #1
   1c390:	beq	1c558 <__assert_fail@plt+0xb3cc>
   1c394:	movs	r3, r0
   1c398:	rsbmi	r3, r0, #0
   1c39c:	cmp	r3, r1
   1c3a0:	bls	1c564 <__assert_fail@plt+0xb3d8>
   1c3a4:	tst	r1, r2
   1c3a8:	beq	1c574 <__assert_fail@plt+0xb3e8>
   1c3ac:	clz	r2, r3
   1c3b0:	clz	r0, r1
   1c3b4:	sub	r2, r0, r2
   1c3b8:	rsbs	r2, r2, #31
   1c3bc:	addne	r2, r2, r2, lsl #1
   1c3c0:	mov	r0, #0
   1c3c4:	addne	pc, pc, r2, lsl #2
   1c3c8:	nop			; (mov r0, r0)
   1c3cc:	cmp	r3, r1, lsl #31
   1c3d0:	adc	r0, r0, r0
   1c3d4:	subcs	r3, r3, r1, lsl #31
   1c3d8:	cmp	r3, r1, lsl #30
   1c3dc:	adc	r0, r0, r0
   1c3e0:	subcs	r3, r3, r1, lsl #30
   1c3e4:	cmp	r3, r1, lsl #29
   1c3e8:	adc	r0, r0, r0
   1c3ec:	subcs	r3, r3, r1, lsl #29
   1c3f0:	cmp	r3, r1, lsl #28
   1c3f4:	adc	r0, r0, r0
   1c3f8:	subcs	r3, r3, r1, lsl #28
   1c3fc:	cmp	r3, r1, lsl #27
   1c400:	adc	r0, r0, r0
   1c404:	subcs	r3, r3, r1, lsl #27
   1c408:	cmp	r3, r1, lsl #26
   1c40c:	adc	r0, r0, r0
   1c410:	subcs	r3, r3, r1, lsl #26
   1c414:	cmp	r3, r1, lsl #25
   1c418:	adc	r0, r0, r0
   1c41c:	subcs	r3, r3, r1, lsl #25
   1c420:	cmp	r3, r1, lsl #24
   1c424:	adc	r0, r0, r0
   1c428:	subcs	r3, r3, r1, lsl #24
   1c42c:	cmp	r3, r1, lsl #23
   1c430:	adc	r0, r0, r0
   1c434:	subcs	r3, r3, r1, lsl #23
   1c438:	cmp	r3, r1, lsl #22
   1c43c:	adc	r0, r0, r0
   1c440:	subcs	r3, r3, r1, lsl #22
   1c444:	cmp	r3, r1, lsl #21
   1c448:	adc	r0, r0, r0
   1c44c:	subcs	r3, r3, r1, lsl #21
   1c450:	cmp	r3, r1, lsl #20
   1c454:	adc	r0, r0, r0
   1c458:	subcs	r3, r3, r1, lsl #20
   1c45c:	cmp	r3, r1, lsl #19
   1c460:	adc	r0, r0, r0
   1c464:	subcs	r3, r3, r1, lsl #19
   1c468:	cmp	r3, r1, lsl #18
   1c46c:	adc	r0, r0, r0
   1c470:	subcs	r3, r3, r1, lsl #18
   1c474:	cmp	r3, r1, lsl #17
   1c478:	adc	r0, r0, r0
   1c47c:	subcs	r3, r3, r1, lsl #17
   1c480:	cmp	r3, r1, lsl #16
   1c484:	adc	r0, r0, r0
   1c488:	subcs	r3, r3, r1, lsl #16
   1c48c:	cmp	r3, r1, lsl #15
   1c490:	adc	r0, r0, r0
   1c494:	subcs	r3, r3, r1, lsl #15
   1c498:	cmp	r3, r1, lsl #14
   1c49c:	adc	r0, r0, r0
   1c4a0:	subcs	r3, r3, r1, lsl #14
   1c4a4:	cmp	r3, r1, lsl #13
   1c4a8:	adc	r0, r0, r0
   1c4ac:	subcs	r3, r3, r1, lsl #13
   1c4b0:	cmp	r3, r1, lsl #12
   1c4b4:	adc	r0, r0, r0
   1c4b8:	subcs	r3, r3, r1, lsl #12
   1c4bc:	cmp	r3, r1, lsl #11
   1c4c0:	adc	r0, r0, r0
   1c4c4:	subcs	r3, r3, r1, lsl #11
   1c4c8:	cmp	r3, r1, lsl #10
   1c4cc:	adc	r0, r0, r0
   1c4d0:	subcs	r3, r3, r1, lsl #10
   1c4d4:	cmp	r3, r1, lsl #9
   1c4d8:	adc	r0, r0, r0
   1c4dc:	subcs	r3, r3, r1, lsl #9
   1c4e0:	cmp	r3, r1, lsl #8
   1c4e4:	adc	r0, r0, r0
   1c4e8:	subcs	r3, r3, r1, lsl #8
   1c4ec:	cmp	r3, r1, lsl #7
   1c4f0:	adc	r0, r0, r0
   1c4f4:	subcs	r3, r3, r1, lsl #7
   1c4f8:	cmp	r3, r1, lsl #6
   1c4fc:	adc	r0, r0, r0
   1c500:	subcs	r3, r3, r1, lsl #6
   1c504:	cmp	r3, r1, lsl #5
   1c508:	adc	r0, r0, r0
   1c50c:	subcs	r3, r3, r1, lsl #5
   1c510:	cmp	r3, r1, lsl #4
   1c514:	adc	r0, r0, r0
   1c518:	subcs	r3, r3, r1, lsl #4
   1c51c:	cmp	r3, r1, lsl #3
   1c520:	adc	r0, r0, r0
   1c524:	subcs	r3, r3, r1, lsl #3
   1c528:	cmp	r3, r1, lsl #2
   1c52c:	adc	r0, r0, r0
   1c530:	subcs	r3, r3, r1, lsl #2
   1c534:	cmp	r3, r1, lsl #1
   1c538:	adc	r0, r0, r0
   1c53c:	subcs	r3, r3, r1, lsl #1
   1c540:	cmp	r3, r1
   1c544:	adc	r0, r0, r0
   1c548:	subcs	r3, r3, r1
   1c54c:	cmp	ip, #0
   1c550:	rsbmi	r0, r0, #0
   1c554:	bx	lr
   1c558:	teq	ip, r0
   1c55c:	rsbmi	r0, r0, #0
   1c560:	bx	lr
   1c564:	movcc	r0, #0
   1c568:	asreq	r0, ip, #31
   1c56c:	orreq	r0, r0, #1
   1c570:	bx	lr
   1c574:	clz	r2, r1
   1c578:	rsb	r2, r2, #31
   1c57c:	cmp	ip, #0
   1c580:	lsr	r0, r3, r2
   1c584:	rsbmi	r0, r0, #0
   1c588:	bx	lr
   1c58c:	cmp	r0, #0
   1c590:	mvngt	r0, #-2147483648	; 0x80000000
   1c594:	movlt	r0, #-2147483648	; 0x80000000
   1c598:	b	1c5f8 <__assert_fail@plt+0xb46c>
   1c59c:	cmp	r1, #0
   1c5a0:	beq	1c58c <__assert_fail@plt+0xb400>
   1c5a4:	push	{r0, r1, lr}
   1c5a8:	bl	1c384 <__assert_fail@plt+0xb1f8>
   1c5ac:	pop	{r1, r2, lr}
   1c5b0:	mul	r3, r2, r0
   1c5b4:	sub	r1, r1, r3
   1c5b8:	bx	lr
   1c5bc:	cmp	r3, #0
   1c5c0:	cmpeq	r2, #0
   1c5c4:	bne	1c5dc <__assert_fail@plt+0xb450>
   1c5c8:	cmp	r1, #0
   1c5cc:	cmpeq	r0, #0
   1c5d0:	mvnne	r1, #0
   1c5d4:	mvnne	r0, #0
   1c5d8:	b	1c5f8 <__assert_fail@plt+0xb46c>
   1c5dc:	sub	sp, sp, #8
   1c5e0:	push	{sp, lr}
   1c5e4:	bl	1c608 <__assert_fail@plt+0xb47c>
   1c5e8:	ldr	lr, [sp, #4]
   1c5ec:	add	sp, sp, #8
   1c5f0:	pop	{r2, r3}
   1c5f4:	bx	lr
   1c5f8:	push	{r1, lr}
   1c5fc:	mov	r0, #8
   1c600:	bl	10ed4 <raise@plt>
   1c604:	pop	{r1, pc}
   1c608:	cmp	r1, r3
   1c60c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c610:	cmpeq	r0, r2
   1c614:	mov	r4, r0
   1c618:	mov	r5, r1
   1c61c:	ldr	r9, [sp, #28]
   1c620:	movcc	r0, #0
   1c624:	movcc	r1, #0
   1c628:	bcc	1c720 <__assert_fail@plt+0xb594>
   1c62c:	cmp	r3, #0
   1c630:	clzeq	ip, r2
   1c634:	clzne	ip, r3
   1c638:	addeq	ip, ip, #32
   1c63c:	cmp	r5, #0
   1c640:	clzeq	r1, r4
   1c644:	addeq	r1, r1, #32
   1c648:	clzne	r1, r5
   1c64c:	sub	ip, ip, r1
   1c650:	sub	lr, ip, #32
   1c654:	lsl	r7, r3, ip
   1c658:	rsb	r8, ip, #32
   1c65c:	orr	r7, r7, r2, lsl lr
   1c660:	orr	r7, r7, r2, lsr r8
   1c664:	lsl	r6, r2, ip
   1c668:	cmp	r5, r7
   1c66c:	cmpeq	r4, r6
   1c670:	movcc	r0, #0
   1c674:	movcc	r1, #0
   1c678:	bcc	1c694 <__assert_fail@plt+0xb508>
   1c67c:	mov	r3, #1
   1c680:	subs	r4, r4, r6
   1c684:	lsl	r1, r3, lr
   1c688:	lsl	r0, r3, ip
   1c68c:	orr	r1, r1, r3, lsr r8
   1c690:	sbc	r5, r5, r7
   1c694:	cmp	ip, #0
   1c698:	beq	1c720 <__assert_fail@plt+0xb594>
   1c69c:	lsrs	r3, r7, #1
   1c6a0:	rrx	r2, r6
   1c6a4:	mov	r6, ip
   1c6a8:	b	1c6cc <__assert_fail@plt+0xb540>
   1c6ac:	subs	r4, r4, r2
   1c6b0:	sbc	r5, r5, r3
   1c6b4:	adds	r4, r4, r4
   1c6b8:	adc	r5, r5, r5
   1c6bc:	adds	r4, r4, #1
   1c6c0:	adc	r5, r5, #0
   1c6c4:	subs	r6, r6, #1
   1c6c8:	beq	1c6e8 <__assert_fail@plt+0xb55c>
   1c6cc:	cmp	r5, r3
   1c6d0:	cmpeq	r4, r2
   1c6d4:	bcs	1c6ac <__assert_fail@plt+0xb520>
   1c6d8:	adds	r4, r4, r4
   1c6dc:	adc	r5, r5, r5
   1c6e0:	subs	r6, r6, #1
   1c6e4:	bne	1c6cc <__assert_fail@plt+0xb540>
   1c6e8:	lsr	r6, r4, ip
   1c6ec:	lsr	r7, r5, ip
   1c6f0:	orr	r6, r6, r5, lsl r8
   1c6f4:	adds	r2, r0, r4
   1c6f8:	orr	r6, r6, r5, lsr lr
   1c6fc:	adc	r3, r1, r5
   1c700:	lsl	r1, r7, ip
   1c704:	orr	r1, r1, r6, lsl lr
   1c708:	lsl	r0, r6, ip
   1c70c:	orr	r1, r1, r6, lsr r8
   1c710:	subs	r0, r2, r0
   1c714:	mov	r4, r6
   1c718:	mov	r5, r7
   1c71c:	sbc	r1, r3, r1
   1c720:	cmp	r9, #0
   1c724:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1c728:	strd	r4, [r9]
   1c72c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c734:	mov	r7, r0
   1c738:	ldr	r6, [pc, #72]	; 1c788 <__assert_fail@plt+0xb5fc>
   1c73c:	ldr	r5, [pc, #72]	; 1c78c <__assert_fail@plt+0xb600>
   1c740:	add	r6, pc, r6
   1c744:	add	r5, pc, r5
   1c748:	sub	r6, r6, r5
   1c74c:	mov	r8, r1
   1c750:	mov	r9, r2
   1c754:	bl	10e90 <fdopen@plt-0x20>
   1c758:	asrs	r6, r6, #2
   1c75c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c760:	mov	r4, #0
   1c764:	add	r4, r4, #1
   1c768:	ldr	r3, [r5], #4
   1c76c:	mov	r2, r9
   1c770:	mov	r1, r8
   1c774:	mov	r0, r7
   1c778:	blx	r3
   1c77c:	cmp	r6, r4
   1c780:	bne	1c764 <__assert_fail@plt+0xb5d8>
   1c784:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c788:	andeq	r1, r1, r8, asr #15
   1c78c:	andeq	r1, r1, r0, asr #15
   1c790:	bx	lr
   1c794:	ldr	r3, [pc, #12]	; 1c7a8 <__assert_fail@plt+0xb61c>
   1c798:	mov	r1, #0
   1c79c:	add	r3, pc, r3
   1c7a0:	ldr	r2, [r3]
   1c7a4:	b	1109c <__cxa_atexit@plt>
   1c7a8:	andeq	r1, r1, r8, ror #18

Disassembly of section .fini:

0001c7ac <.fini>:
   1c7ac:	push	{r3, lr}
   1c7b0:	pop	{r3, pc}
