
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011498 <.init>:
   11498:	push	{r3, lr}
   1149c:	bl	118dc <__assert_fail@plt+0x4c>
   114a0:	pop	{r3, pc}

Disassembly of section .plt:

000114a4 <fstatfs64@plt-0x14>:
   114a4:	push	{lr}		; (str lr, [sp, #-4]!)
   114a8:	ldr	lr, [pc, #4]	; 114b4 <fstatfs64@plt-0x4>
   114ac:	add	lr, pc, lr
   114b0:	ldr	pc, [lr, #8]!
   114b4:	andeq	sl, r1, ip, asr #22

000114b8 <fstatfs64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #2892]!	; 0xb4c

000114c4 <calloc@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #2884]!	; 0xb44

000114d0 <fputs_unlocked@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #2876]!	; 0xb3c

000114dc <raise@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #2868]!	; 0xb34

000114e8 <is_selinux_enabled@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #2860]!	; 0xb2c

000114f4 <strcmp@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #106496	; 0x1a000
   114fc:	ldr	pc, [ip, #2852]!	; 0xb24

00011500 <fflush@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #106496	; 0x1a000
   11508:	ldr	pc, [ip, #2844]!	; 0xb1c

0001150c <lsetfilecon@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #106496	; 0x1a000
   11514:	ldr	pc, [ip, #2836]!	; 0xb14

00011518 <memmove@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #106496	; 0x1a000
   11520:	ldr	pc, [ip, #2828]!	; 0xb0c

00011524 <free@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #106496	; 0x1a000
   1152c:	ldr	pc, [ip, #2820]!	; 0xb04

00011530 <_exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #106496	; 0x1a000
   11538:	ldr	pc, [ip, #2812]!	; 0xafc

0001153c <memcpy@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #106496	; 0x1a000
   11544:	ldr	pc, [ip, #2804]!	; 0xaf4

00011548 <mbsinit@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #106496	; 0x1a000
   11550:	ldr	pc, [ip, #2796]!	; 0xaec

00011554 <context_new@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #106496	; 0x1a000
   1155c:	ldr	pc, [ip, #2788]!	; 0xae4

00011560 <context_role_set@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #106496	; 0x1a000
   11568:	ldr	pc, [ip, #2780]!	; 0xadc

0001156c <dcgettext@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #106496	; 0x1a000
   11574:	ldr	pc, [ip, #2772]!	; 0xad4

00011578 <context_type_set@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #106496	; 0x1a000
   11580:	ldr	pc, [ip, #2764]!	; 0xacc

00011584 <realloc@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #106496	; 0x1a000
   1158c:	ldr	pc, [ip, #2756]!	; 0xac4

00011590 <fgetfilecon@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #106496	; 0x1a000
   11598:	ldr	pc, [ip, #2748]!	; 0xabc

0001159c <textdomain@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #106496	; 0x1a000
   115a4:	ldr	pc, [ip, #2740]!	; 0xab4

000115a8 <chdir@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #106496	; 0x1a000
   115b0:	ldr	pc, [ip, #2732]!	; 0xaac

000115b4 <__fxstatat64@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #106496	; 0x1a000
   115bc:	ldr	pc, [ip, #2724]!	; 0xaa4

000115c0 <iswprint@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #106496	; 0x1a000
   115c8:	ldr	pc, [ip, #2716]!	; 0xa9c

000115cc <__fxstat64@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #106496	; 0x1a000
   115d4:	ldr	pc, [ip, #2708]!	; 0xa94

000115d8 <fwrite@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #106496	; 0x1a000
   115e0:	ldr	pc, [ip, #2700]!	; 0xa8c

000115e4 <lseek64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #106496	; 0x1a000
   115ec:	ldr	pc, [ip, #2692]!	; 0xa84

000115f0 <__ctype_get_mb_cur_max@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #106496	; 0x1a000
   115f8:	ldr	pc, [ip, #2684]!	; 0xa7c

000115fc <strcpy@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #106496	; 0x1a000
   11604:	ldr	pc, [ip, #2676]!	; 0xa74

00011608 <__fpending@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #106496	; 0x1a000
   11610:	ldr	pc, [ip, #2668]!	; 0xa6c

00011614 <ferror_unlocked@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #106496	; 0x1a000
   1161c:	ldr	pc, [ip, #2660]!	; 0xa64

00011620 <mbrtowc@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #106496	; 0x1a000
   11628:	ldr	pc, [ip, #2652]!	; 0xa5c

0001162c <error@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #106496	; 0x1a000
   11634:	ldr	pc, [ip, #2644]!	; 0xa54

00011638 <security_check_context@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #106496	; 0x1a000
   11640:	ldr	pc, [ip, #2636]!	; 0xa4c

00011644 <open64@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #106496	; 0x1a000
   1164c:	ldr	pc, [ip, #2628]!	; 0xa44

00011650 <lgetfilecon@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #106496	; 0x1a000
   11658:	ldr	pc, [ip, #2620]!	; 0xa3c

0001165c <malloc@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #106496	; 0x1a000
   11664:	ldr	pc, [ip, #2612]!	; 0xa34

00011668 <__libc_start_main@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #106496	; 0x1a000
   11670:	ldr	pc, [ip, #2604]!	; 0xa2c

00011674 <__freading@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #106496	; 0x1a000
   1167c:	ldr	pc, [ip, #2596]!	; 0xa24

00011680 <__gmon_start__@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #106496	; 0x1a000
   11688:	ldr	pc, [ip, #2588]!	; 0xa1c

0001168c <context_free@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #106496	; 0x1a000
   11694:	ldr	pc, [ip, #2580]!	; 0xa14

00011698 <getopt_long@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #106496	; 0x1a000
   116a0:	ldr	pc, [ip, #2572]!	; 0xa0c

000116a4 <__ctype_b_loc@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #106496	; 0x1a000
   116ac:	ldr	pc, [ip, #2564]!	; 0xa04

000116b0 <getcwd@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #106496	; 0x1a000
   116b8:	ldr	pc, [ip, #2556]!	; 0x9fc

000116bc <exit@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #106496	; 0x1a000
   116c4:	ldr	pc, [ip, #2548]!	; 0x9f4

000116c8 <context_user_set@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #106496	; 0x1a000
   116d0:	ldr	pc, [ip, #2540]!	; 0x9ec

000116d4 <getfilecon@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #106496	; 0x1a000
   116dc:	ldr	pc, [ip, #2532]!	; 0x9e4

000116e0 <bcmp@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #106496	; 0x1a000
   116e8:	ldr	pc, [ip, #2524]!	; 0x9dc

000116ec <strlen@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #106496	; 0x1a000
   116f4:	ldr	pc, [ip, #2516]!	; 0x9d4

000116f8 <openat64@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #106496	; 0x1a000
   11700:	ldr	pc, [ip, #2508]!	; 0x9cc

00011704 <memrchr@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #106496	; 0x1a000
   1170c:	ldr	pc, [ip, #2500]!	; 0x9c4

00011710 <__errno_location@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #106496	; 0x1a000
   11718:	ldr	pc, [ip, #2492]!	; 0x9bc

0001171c <__sprintf_chk@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #106496	; 0x1a000
   11724:	ldr	pc, [ip, #2484]!	; 0x9b4

00011728 <__cxa_atexit@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #106496	; 0x1a000
   11730:	ldr	pc, [ip, #2476]!	; 0x9ac

00011734 <memset@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #106496	; 0x1a000
   1173c:	ldr	pc, [ip, #2468]!	; 0x9a4

00011740 <__printf_chk@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #106496	; 0x1a000
   11748:	ldr	pc, [ip, #2460]!	; 0x99c

0001174c <fileno@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #106496	; 0x1a000
   11754:	ldr	pc, [ip, #2452]!	; 0x994

00011758 <__fprintf_chk@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #106496	; 0x1a000
   11760:	ldr	pc, [ip, #2444]!	; 0x98c

00011764 <memchr@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #106496	; 0x1a000
   1176c:	ldr	pc, [ip, #2436]!	; 0x984

00011770 <setfilecon@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #106496	; 0x1a000
   11778:	ldr	pc, [ip, #2428]!	; 0x97c

0001177c <access@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #106496	; 0x1a000
   11784:	ldr	pc, [ip, #2420]!	; 0x974

00011788 <fclose@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #106496	; 0x1a000
   11790:	ldr	pc, [ip, #2412]!	; 0x96c

00011794 <fseeko64@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #106496	; 0x1a000
   1179c:	ldr	pc, [ip, #2404]!	; 0x964

000117a0 <fcntl64@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #106496	; 0x1a000
   117a8:	ldr	pc, [ip, #2396]!	; 0x95c

000117ac <setlocale@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #106496	; 0x1a000
   117b4:	ldr	pc, [ip, #2388]!	; 0x954

000117b8 <strrchr@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #106496	; 0x1a000
   117c0:	ldr	pc, [ip, #2380]!	; 0x94c

000117c4 <nl_langinfo@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #106496	; 0x1a000
   117cc:	ldr	pc, [ip, #2372]!	; 0x944

000117d0 <readdir64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #106496	; 0x1a000
   117d8:	ldr	pc, [ip, #2364]!	; 0x93c

000117dc <fdopendir@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #106496	; 0x1a000
   117e4:	ldr	pc, [ip, #2356]!	; 0x934

000117e8 <dirfd@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #106496	; 0x1a000
   117f0:	ldr	pc, [ip, #2348]!	; 0x92c

000117f4 <fchdir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #106496	; 0x1a000
   117fc:	ldr	pc, [ip, #2340]!	; 0x924

00011800 <qsort@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #106496	; 0x1a000
   11808:	ldr	pc, [ip, #2332]!	; 0x91c

0001180c <freecon@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #106496	; 0x1a000
   11814:	ldr	pc, [ip, #2324]!	; 0x914

00011818 <bindtextdomain@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #106496	; 0x1a000
   11820:	ldr	pc, [ip, #2316]!	; 0x90c

00011824 <context_range_set@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #106496	; 0x1a000
   1182c:	ldr	pc, [ip, #2308]!	; 0x904

00011830 <context_str@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #106496	; 0x1a000
   11838:	ldr	pc, [ip, #2300]!	; 0x8fc

0001183c <__xstat64@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #106496	; 0x1a000
   11844:	ldr	pc, [ip, #2292]!	; 0x8f4

00011848 <strncmp@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #106496	; 0x1a000
   11850:	ldr	pc, [ip, #2284]!	; 0x8ec

00011854 <abort@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #106496	; 0x1a000
   1185c:	ldr	pc, [ip, #2276]!	; 0x8e4

00011860 <close@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #106496	; 0x1a000
   11868:	ldr	pc, [ip, #2268]!	; 0x8dc

0001186c <__lxstat64@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #106496	; 0x1a000
   11874:	ldr	pc, [ip, #2260]!	; 0x8d4

00011878 <closedir@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #106496	; 0x1a000
   11880:	ldr	pc, [ip, #2252]!	; 0x8cc

00011884 <strspn@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #106496	; 0x1a000
   1188c:	ldr	pc, [ip, #2244]!	; 0x8c4

00011890 <__assert_fail@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #106496	; 0x1a000
   11898:	ldr	pc, [ip, #2236]!	; 0x8bc

Disassembly of section .text:

000118a0 <.text>:
   118a0:	mov	fp, #0
   118a4:	mov	lr, #0
   118a8:	pop	{r1}		; (ldr r1, [sp], #4)
   118ac:	mov	r2, sp
   118b0:	push	{r2}		; (str r2, [sp, #-4]!)
   118b4:	push	{r0}		; (str r0, [sp, #-4]!)
   118b8:	ldr	ip, [pc, #16]	; 118d0 <__assert_fail@plt+0x40>
   118bc:	push	{ip}		; (str ip, [sp, #-4]!)
   118c0:	ldr	r0, [pc, #12]	; 118d4 <__assert_fail@plt+0x44>
   118c4:	ldr	r3, [pc, #12]	; 118d8 <__assert_fail@plt+0x48>
   118c8:	bl	11668 <__libc_start_main@plt>
   118cc:	bl	11854 <abort@plt>
   118d0:	andeq	sl, r1, r0, asr #9
   118d4:	andeq	r1, r1, r8, lsl #26
   118d8:	andeq	sl, r1, r0, ror #8
   118dc:	ldr	r3, [pc, #20]	; 118f8 <__assert_fail@plt+0x68>
   118e0:	ldr	r2, [pc, #20]	; 118fc <__assert_fail@plt+0x6c>
   118e4:	add	r3, pc, r3
   118e8:	ldr	r2, [r3, r2]
   118ec:	cmp	r2, #0
   118f0:	bxeq	lr
   118f4:	b	11680 <__gmon_start__@plt>
   118f8:	andeq	sl, r1, r4, lsl r7
   118fc:	andeq	r0, r0, r8, asr r1
   11900:	ldr	r0, [pc, #24]	; 11920 <__assert_fail@plt+0x90>
   11904:	ldr	r3, [pc, #24]	; 11924 <__assert_fail@plt+0x94>
   11908:	cmp	r3, r0
   1190c:	bxeq	lr
   11910:	ldr	r3, [pc, #16]	; 11928 <__assert_fail@plt+0x98>
   11914:	cmp	r3, #0
   11918:	bxeq	lr
   1191c:	bx	r3
   11920:			; <UNDEFINED> instruction: 0x0002c1b0
   11924:			; <UNDEFINED> instruction: 0x0002c1b0
   11928:	andeq	r0, r0, r0
   1192c:	ldr	r0, [pc, #36]	; 11958 <__assert_fail@plt+0xc8>
   11930:	ldr	r1, [pc, #36]	; 1195c <__assert_fail@plt+0xcc>
   11934:	sub	r1, r1, r0
   11938:	asr	r1, r1, #2
   1193c:	add	r1, r1, r1, lsr #31
   11940:	asrs	r1, r1, #1
   11944:	bxeq	lr
   11948:	ldr	r3, [pc, #16]	; 11960 <__assert_fail@plt+0xd0>
   1194c:	cmp	r3, #0
   11950:	bxeq	lr
   11954:	bx	r3
   11958:			; <UNDEFINED> instruction: 0x0002c1b0
   1195c:			; <UNDEFINED> instruction: 0x0002c1b0
   11960:	andeq	r0, r0, r0
   11964:	push	{r4, lr}
   11968:	ldr	r4, [pc, #24]	; 11988 <__assert_fail@plt+0xf8>
   1196c:	ldrb	r3, [r4]
   11970:	cmp	r3, #0
   11974:	popne	{r4, pc}
   11978:	bl	11900 <__assert_fail@plt+0x70>
   1197c:	mov	r3, #1
   11980:	strb	r3, [r4]
   11984:	pop	{r4, pc}
   11988:	andeq	ip, r2, ip, asr #3
   1198c:	b	1192c <__assert_fail@plt+0x9c>
   11990:	push	{fp, lr}
   11994:	mov	fp, sp
   11998:	sub	sp, sp, #8
   1199c:	mov	r4, r0
   119a0:	cmp	r0, #0
   119a4:	bne	11b0c <__assert_fail@plt+0x27c>
   119a8:	movw	r1, #42347	; 0xa56b
   119ac:	movt	r1, #1
   119b0:	mov	r0, #0
   119b4:	mov	r2, #5
   119b8:	bl	1156c <dcgettext@plt>
   119bc:	mov	r1, r0
   119c0:	movw	r0, #49676	; 0xc20c
   119c4:	movt	r0, #2
   119c8:	ldr	r2, [r0]
   119cc:	str	r2, [sp]
   119d0:	mov	r0, #1
   119d4:	mov	r3, r2
   119d8:	bl	11740 <__printf_chk@plt>
   119dc:	movw	r1, #42505	; 0xa609
   119e0:	movt	r1, #1
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	bl	1156c <dcgettext@plt>
   119f0:	movw	r5, #49604	; 0xc1c4
   119f4:	movt	r5, #2
   119f8:	ldr	r1, [r5]
   119fc:	bl	114d0 <fputs_unlocked@plt>
   11a00:	bl	11b50 <__assert_fail@plt+0x2c0>
   11a04:	movw	r1, #42644	; 0xa694
   11a08:	movt	r1, #1
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	bl	1156c <dcgettext@plt>
   11a18:	ldr	r1, [r5]
   11a1c:	bl	114d0 <fputs_unlocked@plt>
   11a20:	movw	r1, #42875	; 0xa77b
   11a24:	movt	r1, #1
   11a28:	mov	r0, #0
   11a2c:	mov	r2, #5
   11a30:	bl	1156c <dcgettext@plt>
   11a34:	ldr	r1, [r5]
   11a38:	bl	114d0 <fputs_unlocked@plt>
   11a3c:	movw	r1, #43158	; 0xa896
   11a40:	movt	r1, #1
   11a44:	mov	r0, #0
   11a48:	mov	r2, #5
   11a4c:	bl	1156c <dcgettext@plt>
   11a50:	ldr	r1, [r5]
   11a54:	bl	114d0 <fputs_unlocked@plt>
   11a58:	movw	r1, #43286	; 0xa916
   11a5c:	movt	r1, #1
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	bl	1156c <dcgettext@plt>
   11a6c:	ldr	r1, [r5]
   11a70:	bl	114d0 <fputs_unlocked@plt>
   11a74:	movw	r1, #43405	; 0xa98d
   11a78:	movt	r1, #1
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	bl	1156c <dcgettext@plt>
   11a88:	ldr	r1, [r5]
   11a8c:	bl	114d0 <fputs_unlocked@plt>
   11a90:	movw	r1, #43476	; 0xa9d4
   11a94:	movt	r1, #1
   11a98:	mov	r0, #0
   11a9c:	mov	r2, #5
   11aa0:	bl	1156c <dcgettext@plt>
   11aa4:	ldr	r1, [r5]
   11aa8:	bl	114d0 <fputs_unlocked@plt>
   11aac:	movw	r1, #43547	; 0xaa1b
   11ab0:	movt	r1, #1
   11ab4:	mov	r0, #0
   11ab8:	mov	r2, #5
   11abc:	bl	1156c <dcgettext@plt>
   11ac0:	ldr	r1, [r5]
   11ac4:	bl	114d0 <fputs_unlocked@plt>
   11ac8:	movw	r1, #44012	; 0xabec
   11acc:	movt	r1, #1
   11ad0:	mov	r0, #0
   11ad4:	mov	r2, #5
   11ad8:	bl	1156c <dcgettext@plt>
   11adc:	ldr	r1, [r5]
   11ae0:	bl	114d0 <fputs_unlocked@plt>
   11ae4:	movw	r1, #44057	; 0xac19
   11ae8:	movt	r1, #1
   11aec:	mov	r0, #0
   11af0:	mov	r2, #5
   11af4:	bl	1156c <dcgettext@plt>
   11af8:	ldr	r1, [r5]
   11afc:	bl	114d0 <fputs_unlocked@plt>
   11b00:	bl	11b80 <__assert_fail@plt+0x2f0>
   11b04:	mov	r0, r4
   11b08:	bl	116bc <exit@plt>
   11b0c:	movw	r0, #49600	; 0xc1c0
   11b10:	movt	r0, #2
   11b14:	ldr	r5, [r0]
   11b18:	movw	r1, #42308	; 0xa544
   11b1c:	movt	r1, #1
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	bl	1156c <dcgettext@plt>
   11b2c:	mov	r2, r0
   11b30:	movw	r0, #49676	; 0xc20c
   11b34:	movt	r0, #2
   11b38:	ldr	r3, [r0]
   11b3c:	mov	r0, r5
   11b40:	mov	r1, #1
   11b44:	bl	11758 <__fprintf_chk@plt>
   11b48:	mov	r0, r4
   11b4c:	bl	116bc <exit@plt>
   11b50:	push	{fp, lr}
   11b54:	mov	fp, sp
   11b58:	movw	r1, #44432	; 0xad90
   11b5c:	movt	r1, #1
   11b60:	mov	r0, #0
   11b64:	mov	r2, #5
   11b68:	bl	1156c <dcgettext@plt>
   11b6c:	movw	r1, #49604	; 0xc1c4
   11b70:	movt	r1, #2
   11b74:	ldr	r1, [r1]
   11b78:	pop	{fp, lr}
   11b7c:	b	114d0 <fputs_unlocked@plt>
   11b80:	push	{r4, r5, r6, sl, fp, lr}
   11b84:	add	fp, sp, #16
   11b88:	sub	sp, sp, #56	; 0x38
   11b8c:	movw	r0, #45752	; 0xb2b8
   11b90:	movt	r0, #1
   11b94:	add	r1, r0, #32
   11b98:	mov	r2, #48	; 0x30
   11b9c:	vld1.64	{d16-d17}, [r1]
   11ba0:	mov	r6, sp
   11ba4:	add	r1, r6, #32
   11ba8:	add	r3, r0, #16
   11bac:	vld1.64	{d18-d19}, [r0], r2
   11bb0:	vld1.64	{d20-d21}, [r3]
   11bb4:	vldr	d22, [r0]
   11bb8:	vst1.64	{d16-d17}, [r1]
   11bbc:	add	r0, r6, #16
   11bc0:	vst1.64	{d20-d21}, [r0]
   11bc4:	mov	r0, r6
   11bc8:	vst1.64	{d18-d19}, [r0], r2
   11bcc:	vstr	d22, [r0]
   11bd0:	ldr	r1, [sp]
   11bd4:	cmp	r1, #0
   11bd8:	movw	r4, #44111	; 0xac4f
   11bdc:	movt	r4, #1
   11be0:	beq	11c08 <__assert_fail@plt+0x378>
   11be4:	mov	r6, sp
   11be8:	movw	r5, #44111	; 0xac4f
   11bec:	movt	r5, #1
   11bf0:	mov	r0, r5
   11bf4:	bl	114f4 <strcmp@plt>
   11bf8:	cmp	r0, #0
   11bfc:	ldrne	r1, [r6, #8]!
   11c00:	cmpne	r1, #0
   11c04:	bne	11bf0 <__assert_fail@plt+0x360>
   11c08:	ldr	r5, [r6, #4]
   11c0c:	movw	r1, #44602	; 0xae3a
   11c10:	movt	r1, #1
   11c14:	mov	r0, #0
   11c18:	mov	r2, #5
   11c1c:	bl	1156c <dcgettext@plt>
   11c20:	mov	r1, r0
   11c24:	movw	r2, #44156	; 0xac7c
   11c28:	movt	r2, #1
   11c2c:	movw	r3, #44625	; 0xae51
   11c30:	movt	r3, #1
   11c34:	mov	r0, #1
   11c38:	bl	11740 <__printf_chk@plt>
   11c3c:	cmp	r5, #0
   11c40:	moveq	r5, r4
   11c44:	mov	r0, #5
   11c48:	mov	r1, #0
   11c4c:	bl	117ac <setlocale@plt>
   11c50:	cmp	r0, #0
   11c54:	beq	11c94 <__assert_fail@plt+0x404>
   11c58:	movw	r1, #44665	; 0xae79
   11c5c:	movt	r1, #1
   11c60:	mov	r2, #3
   11c64:	bl	11848 <strncmp@plt>
   11c68:	cmp	r0, #0
   11c6c:	beq	11c94 <__assert_fail@plt+0x404>
   11c70:	movw	r1, #44669	; 0xae7d
   11c74:	movt	r1, #1
   11c78:	mov	r0, #0
   11c7c:	mov	r2, #5
   11c80:	bl	1156c <dcgettext@plt>
   11c84:	movw	r1, #49604	; 0xc1c4
   11c88:	movt	r1, #2
   11c8c:	ldr	r1, [r1]
   11c90:	bl	114d0 <fputs_unlocked@plt>
   11c94:	movw	r1, #44740	; 0xaec4
   11c98:	movt	r1, #1
   11c9c:	mov	r0, #0
   11ca0:	mov	r2, #5
   11ca4:	bl	1156c <dcgettext@plt>
   11ca8:	mov	r1, r0
   11cac:	movw	r2, #44625	; 0xae51
   11cb0:	movt	r2, #1
   11cb4:	mov	r0, #1
   11cb8:	mov	r3, r4
   11cbc:	bl	11740 <__printf_chk@plt>
   11cc0:	movw	r0, #44535	; 0xadf7
   11cc4:	movt	r0, #1
   11cc8:	movw	r6, #44011	; 0xabeb
   11ccc:	movt	r6, #1
   11cd0:	cmp	r5, r4
   11cd4:	moveq	r6, r0
   11cd8:	movw	r1, #44767	; 0xaedf
   11cdc:	movt	r1, #1
   11ce0:	mov	r0, #0
   11ce4:	mov	r2, #5
   11ce8:	bl	1156c <dcgettext@plt>
   11cec:	mov	r1, r0
   11cf0:	mov	r0, #1
   11cf4:	mov	r2, r5
   11cf8:	mov	r3, r6
   11cfc:	sub	sp, fp, #16
   11d00:	pop	{r4, r5, r6, sl, fp, lr}
   11d04:	b	11740 <__printf_chk@plt>
   11d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d0c:	add	fp, sp, #28
   11d10:	sub	sp, sp, #28
   11d14:	mov	r4, r1
   11d18:	mov	r5, r0
   11d1c:	ldr	r0, [r1]
   11d20:	bl	160f4 <__assert_fail@plt+0x4864>
   11d24:	movw	r1, #44011	; 0xabeb
   11d28:	movt	r1, #1
   11d2c:	mov	r0, #6
   11d30:	bl	117ac <setlocale@plt>
   11d34:	movw	r6, #44160	; 0xac80
   11d38:	movt	r6, #1
   11d3c:	movw	r1, #44117	; 0xac55
   11d40:	movt	r1, #1
   11d44:	mov	r0, r6
   11d48:	bl	11818 <bindtextdomain@plt>
   11d4c:	mov	r0, r6
   11d50:	bl	1159c <textdomain@plt>
   11d54:	movw	r0, #11868	; 0x2e5c
   11d58:	movt	r0, #1
   11d5c:	bl	1a4c4 <__assert_fail@plt+0x8c34>
   11d60:	mov	r8, #0
   11d64:	mov	r0, #16
   11d68:	str	r0, [sp, #20]
   11d6c:	mvn	r9, #0
   11d70:	movw	r7, #44141	; 0xac6d
   11d74:	movt	r7, #1
   11d78:	movw	r6, #45528	; 0xb1d8
   11d7c:	movt	r6, #1
   11d80:	mov	r0, #0
   11d84:	str	r0, [sp, #16]
   11d88:	mov	sl, #0
   11d8c:	mov	r0, #0
   11d90:	str	r0, [sp, #12]
   11d94:	b	11db4 <__assert_fail@plt+0x524>
   11d98:	movw	r0, #49608	; 0xc1c8
   11d9c:	movt	r0, #2
   11da0:	ldr	r0, [r0]
   11da4:	movw	r1, #49632	; 0xc1e0
   11da8:	movt	r1, #2
   11dac:	str	r0, [r1]
   11db0:	mov	sl, #1
   11db4:	str	r8, [sp]
   11db8:	mov	r0, r5
   11dbc:	mov	r1, r4
   11dc0:	mov	r2, r7
   11dc4:	mov	r3, r6
   11dc8:	bl	11698 <getopt_long@plt>
   11dcc:	add	r1, r0, #3
   11dd0:	cmp	r1, #121	; 0x79
   11dd4:	bhi	11fd4 <__assert_fail@plt+0x744>
   11dd8:	add	r0, pc, #0
   11ddc:	ldr	pc, [r0, r1, lsl #2]
   11de0:	andeq	r2, r1, ip, lsl #5
   11de4:	andeq	r2, r1, r0, ror #5
   11de8:	strheq	r2, [r1], -r8
   11dec:	andeq	r2, r1, r8, lsr #6
   11df0:	andeq	r2, r1, r8, lsr #6
   11df4:	andeq	r2, r1, r8, lsr #6
   11df8:	andeq	r2, r1, r8, lsr #6
   11dfc:	andeq	r2, r1, r8, lsr #6
   11e00:	andeq	r2, r1, r8, lsr #6
   11e04:	andeq	r2, r1, r8, lsr #6
   11e08:	andeq	r2, r1, r8, lsr #6
   11e0c:	andeq	r2, r1, r8, lsr #6
   11e10:	andeq	r2, r1, r8, lsr #6
   11e14:	andeq	r2, r1, r8, lsr #6
   11e18:	andeq	r2, r1, r8, lsr #6
   11e1c:	andeq	r2, r1, r8, lsr #6
   11e20:	andeq	r2, r1, r8, lsr #6
   11e24:	andeq	r2, r1, r8, lsr #6
   11e28:	andeq	r2, r1, r8, lsr #6
   11e2c:	andeq	r2, r1, r8, lsr #6
   11e30:	andeq	r2, r1, r8, lsr #6
   11e34:	andeq	r2, r1, r8, lsr #6
   11e38:	andeq	r2, r1, r8, lsr #6
   11e3c:	andeq	r2, r1, r8, lsr #6
   11e40:	andeq	r2, r1, r8, lsr #6
   11e44:	andeq	r2, r1, r8, lsr #6
   11e48:	andeq	r2, r1, r8, lsr #6
   11e4c:	andeq	r2, r1, r8, lsr #6
   11e50:	andeq	r2, r1, r8, lsr #6
   11e54:	andeq	r2, r1, r8, lsr #6
   11e58:	andeq	r2, r1, r8, lsr #6
   11e5c:	andeq	r2, r1, r8, lsr #6
   11e60:	andeq	r2, r1, r8, lsr #6
   11e64:	andeq	r2, r1, r8, lsr #6
   11e68:	andeq	r2, r1, r8, lsr #6
   11e6c:	andeq	r2, r1, r8, lsr #6
   11e70:	andeq	r2, r1, r8, lsr #6
   11e74:	andeq	r2, r1, r8, lsr #6
   11e78:	andeq	r2, r1, r8, lsr #6
   11e7c:	andeq	r2, r1, r8, lsr #6
   11e80:	andeq	r2, r1, r8, lsr #6
   11e84:	andeq	r2, r1, r8, lsr #6
   11e88:	andeq	r2, r1, r8, lsr #6
   11e8c:	andeq	r2, r1, r8, lsr #6
   11e90:	andeq	r2, r1, r8, lsr #6
   11e94:	andeq	r2, r1, r8, lsr #6
   11e98:	andeq	r2, r1, r8, lsr #6
   11e9c:	andeq	r2, r1, r8, lsr #6
   11ea0:	andeq	r2, r1, r8, lsr #6
   11ea4:	andeq	r2, r1, r8, lsr #6
   11ea8:	andeq	r2, r1, r8, lsr #6
   11eac:	andeq	r2, r1, r8, lsr #6
   11eb0:	andeq	r2, r1, r8, lsr #6
   11eb4:	andeq	r2, r1, r8, lsr #6
   11eb8:	andeq	r2, r1, r8, lsr #6
   11ebc:	andeq	r2, r1, r8, lsr #6
   11ec0:	andeq	r2, r1, r8, lsr #6
   11ec4:	andeq	r2, r1, r8, lsr #6
   11ec8:	andeq	r2, r1, r8, lsr #6
   11ecc:	andeq	r2, r1, r8, lsr #6
   11ed0:	andeq	r2, r1, r8, lsr #6
   11ed4:	andeq	r2, r1, r8, lsr #6
   11ed8:	andeq	r2, r1, r8, lsr #6
   11edc:	andeq	r2, r1, r8, lsr #6
   11ee0:	andeq	r2, r1, r8, lsr #6
   11ee4:	andeq	r2, r1, r8, lsr #6
   11ee8:	andeq	r2, r1, r8, lsr #6
   11eec:	andeq	r2, r1, r8, lsr #6
   11ef0:	andeq	r2, r1, r8, lsr #6
   11ef4:	andeq	r2, r1, r8, lsr #6
   11ef8:	andeq	r2, r1, r8, lsr #6
   11efc:	andeq	r2, r1, r8, lsr #6
   11f00:	andeq	r2, r1, r8, lsr #6
   11f04:	andeq	r2, r1, r8, lsr #6
   11f08:	andeq	r2, r1, r8, lsr #6
   11f0c:	andeq	r1, r1, r8, asr #31
   11f10:	andeq	r2, r1, r8, lsr #6
   11f14:	andeq	r2, r1, r8, lsr #6
   11f18:	andeq	r2, r1, r8, lsr #6
   11f1c:	andeq	r2, r1, r4, lsr #32
   11f20:	andeq	r2, r1, r8, lsr #6
   11f24:	andeq	r2, r1, r8, lsr #6
   11f28:	andeq	r2, r1, r8, lsr #6
   11f2c:	andeq	r2, r1, r8, lsl r0
   11f30:	andeq	r2, r1, r8, lsr #6
   11f34:	andeq	r2, r1, r4, asr #32
   11f38:	andeq	r2, r1, r8, lsr #6
   11f3c:	andeq	r2, r1, r8, lsr #6
   11f40:	andeq	r2, r1, r8, lsr #6
   11f44:	andeq	r2, r1, r8, lsr #6
   11f48:	andeq	r2, r1, r8, lsr #6
   11f4c:	andeq	r2, r1, r8, lsr #6
   11f50:	andeq	r2, r1, r8, lsr #6
   11f54:	andeq	r2, r1, r8, lsr #6
   11f58:	andeq	r2, r1, r8, lsr #6
   11f5c:	andeq	r2, r1, r8, lsr #6
   11f60:	andeq	r2, r1, r8, lsr #6
   11f64:	andeq	r2, r1, r8, lsr #6
   11f68:	andeq	r2, r1, r8, lsr #6
   11f6c:	andeq	r2, r1, r8, lsr #6
   11f70:	andeq	r2, r1, r8, lsr #6
   11f74:	andeq	r2, r1, r8, lsr #6
   11f78:	andeq	r2, r1, r8, lsr #6
   11f7c:	andeq	r2, r1, r8, lsr #6
   11f80:	andeq	r2, r1, r8, lsr #6
   11f84:			; <UNDEFINED> instruction: 0x00011db4
   11f88:	andeq	r2, r1, r8, lsr #6
   11f8c:	andeq	r2, r1, r4, rrx
   11f90:	andeq	r2, r1, r8, lsr #6
   11f94:	andeq	r2, r1, r8, lsr #6
   11f98:	andeq	r2, r1, r8, lsr #6
   11f9c:	muleq	r1, r8, sp
   11fa0:	andeq	r2, r1, r8, lsr #6
   11fa4:	andeq	r2, r1, r8, lsr #6
   11fa8:	andeq	r2, r1, r8, lsr #6
   11fac:	andeq	r2, r1, r8, lsr #6
   11fb0:	andeq	r2, r1, r8, lsr #6
   11fb4:	andeq	r2, r1, r8, ror r0
   11fb8:	andeq	r2, r1, r8, lsr #6
   11fbc:	andeq	r2, r1, r0
   11fc0:	muleq	r1, r0, r0
   11fc4:	andeq	r2, r1, r0, lsr r0
   11fc8:	mov	r0, #17
   11fcc:	str	r0, [sp, #20]
   11fd0:	b	11db4 <__assert_fail@plt+0x524>
   11fd4:	sub	r0, r0, #256	; 0x100
   11fd8:	cmp	r0, #3
   11fdc:	bhi	12328 <__assert_fail@plt+0xa98>
   11fe0:	add	r1, pc, #0
   11fe4:	ldr	pc, [r1, r0, lsl #2]
   11fe8:	strdeq	r1, [r1], -r8
   11fec:	andeq	r2, r1, ip, rrx
   11ff0:	andeq	r2, r1, r8, asr r0
   11ff4:	andeq	r2, r1, r8, lsr #1
   11ff8:	mov	r9, #1
   11ffc:	b	11db4 <__assert_fail@plt+0x524>
   12000:	movw	r0, #49608	; 0xc1c8
   12004:	movt	r0, #2
   12008:	ldr	r0, [r0]
   1200c:	movw	r1, #49628	; 0xc1dc
   12010:	movt	r1, #2
   12014:	b	11dac <__assert_fail@plt+0x51c>
   12018:	mov	r0, #16
   1201c:	str	r0, [sp, #20]
   12020:	b	11db4 <__assert_fail@plt+0x524>
   12024:	mov	r0, #2
   12028:	str	r0, [sp, #20]
   1202c:	b	11db4 <__assert_fail@plt+0x524>
   12030:	mov	r0, #1
   12034:	movw	r1, #49617	; 0xc1d1
   12038:	movt	r1, #2
   1203c:	strb	r0, [r1]
   12040:	b	11db4 <__assert_fail@plt+0x524>
   12044:	movw	r0, #49616	; 0xc1d0
   12048:	movt	r0, #2
   1204c:	mov	r1, #1
   12050:	strb	r1, [r0]
   12054:	b	11db4 <__assert_fail@plt+0x524>
   12058:	mov	r0, #1
   1205c:	str	r0, [sp, #16]
   12060:	b	11db4 <__assert_fail@plt+0x524>
   12064:	mov	r9, #0
   12068:	b	11db4 <__assert_fail@plt+0x524>
   1206c:	mov	r0, #0
   12070:	str	r0, [sp, #16]
   12074:	b	11db4 <__assert_fail@plt+0x524>
   12078:	movw	r0, #49608	; 0xc1c8
   1207c:	movt	r0, #2
   12080:	ldr	r0, [r0]
   12084:	movw	r1, #49624	; 0xc1d8
   12088:	movt	r1, #2
   1208c:	b	11dac <__assert_fail@plt+0x51c>
   12090:	movw	r0, #49608	; 0xc1c8
   12094:	movt	r0, #2
   12098:	ldr	r0, [r0]
   1209c:	movw	r1, #49620	; 0xc1d4
   120a0:	movt	r1, #2
   120a4:	b	11dac <__assert_fail@plt+0x51c>
   120a8:	movw	r0, #49608	; 0xc1c8
   120ac:	movt	r0, #2
   120b0:	ldr	r0, [r0]
   120b4:	b	11d90 <__assert_fail@plt+0x500>
   120b8:	movw	r0, #49616	; 0xc1d0
   120bc:	movt	r0, #2
   120c0:	ldrb	r0, [r0]
   120c4:	cmp	r0, #1
   120c8:	bne	120ec <__assert_fail@plt+0x85c>
   120cc:	ldr	r7, [sp, #20]
   120d0:	cmp	r7, #16
   120d4:	bne	12104 <__assert_fail@plt+0x874>
   120d8:	cmp	r9, #1
   120dc:	beq	1239c <__assert_fail@plt+0xb0c>
   120e0:	mov	r7, #16
   120e4:	mov	r0, #0
   120e8:	b	120fc <__assert_fail@plt+0x86c>
   120ec:	cmp	r9, #0
   120f0:	movwne	r9, #1
   120f4:	mov	r7, #16
   120f8:	mov	r0, r9
   120fc:	ldr	r6, [sp, #12]
   12100:	b	12114 <__assert_fail@plt+0x884>
   12104:	mov	r0, #1
   12108:	cmp	r9, #0
   1210c:	ldr	r6, [sp, #12]
   12110:	beq	123a8 <__assert_fail@plt+0xb18>
   12114:	movw	r1, #49636	; 0xc1e4
   12118:	movt	r1, #2
   1211c:	strb	r0, [r1]
   12120:	mov	r1, #2
   12124:	cmp	r6, #0
   12128:	movwne	r1, #1
   1212c:	tst	sl, #1
   12130:	movwne	r1, #1
   12134:	movw	r8, #49592	; 0xc1b8
   12138:	movt	r8, #2
   1213c:	ldr	r0, [r8]
   12140:	sub	r2, r5, r0
   12144:	cmp	r2, r1
   12148:	blt	122e8 <__assert_fail@plt+0xa58>
   1214c:	cmp	r6, #0
   12150:	beq	121a4 <__assert_fail@plt+0x914>
   12154:	mov	r0, #0
   12158:	str	r0, [sp, #24]
   1215c:	add	r1, sp, #24
   12160:	mov	r0, r6
   12164:	bl	18634 <__assert_fail@plt+0x6da4>
   12168:	cmn	r0, #1
   1216c:	ble	12330 <__assert_fail@plt+0xaa0>
   12170:	ldr	r0, [sp, #24]
   12174:	movw	r1, #49640	; 0xc1e8
   12178:	movt	r1, #2
   1217c:	str	r0, [r1]
   12180:	mvn	r0, sl
   12184:	clz	r1, r6
   12188:	lsr	r1, r1, #5
   1218c:	orr	r0, r0, r1
   12190:	tst	r0, #1
   12194:	bne	121f4 <__assert_fail@plt+0x964>
   12198:	movw	r1, #44355	; 0xad43
   1219c:	movt	r1, #1
   121a0:	b	12378 <__assert_fail@plt+0xae8>
   121a4:	tst	sl, #1
   121a8:	beq	121c0 <__assert_fail@plt+0x930>
   121ac:	movw	r0, #49640	; 0xc1e8
   121b0:	movt	r0, #2
   121b4:	mov	r1, #0
   121b8:	str	r1, [r0]
   121bc:	b	121f4 <__assert_fail@plt+0x964>
   121c0:	add	r1, r0, #1
   121c4:	str	r1, [r8]
   121c8:	ldr	r0, [r4, r0, lsl #2]
   121cc:	movw	r5, #49640	; 0xc1e8
   121d0:	movt	r5, #2
   121d4:	str	r0, [r5]
   121d8:	bl	114e8 <is_selinux_enabled@plt>
   121dc:	cmp	r0, #1
   121e0:	blt	121f4 <__assert_fail@plt+0x964>
   121e4:	ldr	r0, [r5]
   121e8:	bl	11638 <security_check_context@plt>
   121ec:	cmn	r0, #1
   121f0:	ble	123cc <__assert_fail@plt+0xb3c>
   121f4:	movw	r0, #49616	; 0xc1d0
   121f8:	movt	r0, #2
   121fc:	ldrb	r0, [r0]
   12200:	ldr	r1, [sp, #16]
   12204:	and	r0, r1, r0
   12208:	tst	r0, #1
   1220c:	beq	12260 <__assert_fail@plt+0x9d0>
   12210:	movw	r0, #49648	; 0xc1f0
   12214:	movt	r0, #2
   12218:	bl	17d00 <__assert_fail@plt+0x6470>
   1221c:	movw	r1, #49664	; 0xc200
   12220:	movt	r1, #2
   12224:	str	r0, [r1]
   12228:	cmp	r0, #0
   1222c:	bne	12270 <__assert_fail@plt+0x9e0>
   12230:	bl	11710 <__errno_location@plt>
   12234:	ldr	r4, [r0]
   12238:	movw	r1, #44401	; 0xad71
   1223c:	movt	r1, #1
   12240:	mov	r0, #0
   12244:	mov	r2, #5
   12248:	bl	1156c <dcgettext@plt>
   1224c:	mov	r5, r0
   12250:	movw	r1, #47245	; 0xb88d
   12254:	movt	r1, #1
   12258:	mov	r0, #4
   1225c:	b	12358 <__assert_fail@plt+0xac8>
   12260:	movw	r0, #49664	; 0xc200
   12264:	movt	r0, #2
   12268:	mov	r1, #0
   1226c:	str	r1, [r0]
   12270:	ldr	r0, [r8]
   12274:	add	r0, r4, r0, lsl #2
   12278:	orr	r1, r7, #8
   1227c:	bl	12408 <__assert_fail@plt+0xb78>
   12280:	eor	r0, r0, #1
   12284:	sub	sp, fp, #28
   12288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1228c:	movw	r0, #49512	; 0xc168
   12290:	movt	r0, #2
   12294:	ldr	r3, [r0]
   12298:	movw	r0, #49604	; 0xc1c4
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	mov	r1, #0
   122a8:	movw	r2, #44184	; 0xac98
   122ac:	movt	r2, #1
   122b0:	movw	r7, #44170	; 0xac8a
   122b4:	movt	r7, #1
   122b8:	str	r7, [sp]
   122bc:	str	r2, [sp, #4]
   122c0:	str	r1, [sp, #8]
   122c4:	movw	r1, #44111	; 0xac4f
   122c8:	movt	r1, #1
   122cc:	movw	r2, #44156	; 0xac7c
   122d0:	movt	r2, #1
   122d4:	bl	18b00 <__assert_fail@plt+0x7270>
   122d8:	mov	r0, #0
   122dc:	bl	116bc <exit@plt>
   122e0:	mov	r0, #0
   122e4:	bl	11990 <__assert_fail@plt+0x100>
   122e8:	cmp	r0, r5
   122ec:	bge	12370 <__assert_fail@plt+0xae0>
   122f0:	movw	r1, #44273	; 0xacf1
   122f4:	movt	r1, #1
   122f8:	mov	r0, #0
   122fc:	mov	r2, #5
   12300:	bl	1156c <dcgettext@plt>
   12304:	mov	r6, r0
   12308:	add	r0, r4, r5, lsl #2
   1230c:	ldr	r0, [r0, #-4]
   12310:	bl	178e8 <__assert_fail@plt+0x6058>
   12314:	mov	r3, r0
   12318:	mov	r0, #0
   1231c:	mov	r1, #0
   12320:	mov	r2, r6
   12324:	bl	1162c <error@plt>
   12328:	mov	r0, #1
   1232c:	bl	11990 <__assert_fail@plt+0x100>
   12330:	bl	11710 <__errno_location@plt>
   12334:	ldr	r4, [r0]
   12338:	movw	r1, #44298	; 0xad0a
   1233c:	movt	r1, #1
   12340:	mov	r0, #0
   12344:	mov	r2, #5
   12348:	bl	1156c <dcgettext@plt>
   1234c:	mov	r5, r0
   12350:	mov	r0, #4
   12354:	mov	r1, r6
   12358:	bl	176f4 <__assert_fail@plt+0x5e64>
   1235c:	mov	r3, r0
   12360:	mov	r0, #1
   12364:	mov	r1, r4
   12368:	mov	r2, r5
   1236c:	bl	1162c <error@plt>
   12370:	movw	r1, #44257	; 0xace1
   12374:	movt	r1, #1
   12378:	mov	r0, #0
   1237c:	mov	r2, #5
   12380:	bl	1156c <dcgettext@plt>
   12384:	mov	r2, r0
   12388:	mov	r0, #0
   1238c:	mov	r1, #0
   12390:	bl	1162c <error@plt>
   12394:	mov	r0, #1
   12398:	bl	11990 <__assert_fail@plt+0x100>
   1239c:	movw	r1, #44197	; 0xaca5
   123a0:	movt	r1, #1
   123a4:	b	123b0 <__assert_fail@plt+0xb20>
   123a8:	movw	r1, #44239	; 0xaccf
   123ac:	movt	r1, #1
   123b0:	mov	r0, #0
   123b4:	mov	r2, #5
   123b8:	bl	1156c <dcgettext@plt>
   123bc:	mov	r2, r0
   123c0:	mov	r0, #1
   123c4:	mov	r1, #0
   123c8:	bl	1162c <error@plt>
   123cc:	bl	11710 <__errno_location@plt>
   123d0:	ldr	r4, [r0]
   123d4:	movw	r1, #44335	; 0xad2f
   123d8:	movt	r1, #1
   123dc:	mov	r0, #0
   123e0:	mov	r2, #5
   123e4:	bl	1156c <dcgettext@plt>
   123e8:	mov	r6, r0
   123ec:	ldr	r0, [r5]
   123f0:	bl	178e8 <__assert_fail@plt+0x6058>
   123f4:	mov	r3, r0
   123f8:	mov	r0, #1
   123fc:	mov	r1, r4
   12400:	mov	r2, r6
   12404:	bl	1162c <error@plt>
   12408:	push	{r4, r5, r6, sl, fp, lr}
   1240c:	add	fp, sp, #16
   12410:	mov	r2, #0
   12414:	bl	18fd4 <__assert_fail@plt+0x7744>
   12418:	mov	r5, r0
   1241c:	bl	138a4 <__assert_fail@plt+0x2014>
   12420:	cmp	r0, #0
   12424:	beq	12454 <__assert_fail@plt+0xbc4>
   12428:	mov	r1, r0
   1242c:	mov	r4, #1
   12430:	mov	r0, r5
   12434:	bl	124d8 <__assert_fail@plt+0xc48>
   12438:	and	r4, r4, r0
   1243c:	mov	r0, r5
   12440:	bl	138a4 <__assert_fail@plt+0x2014>
   12444:	mov	r1, r0
   12448:	cmp	r0, #0
   1244c:	bne	12430 <__assert_fail@plt+0xba0>
   12450:	b	12458 <__assert_fail@plt+0xbc8>
   12454:	mov	r4, #1
   12458:	bl	11710 <__errno_location@plt>
   1245c:	ldr	r6, [r0]
   12460:	cmp	r6, #0
   12464:	beq	12490 <__assert_fail@plt+0xc00>
   12468:	mov	r4, #0
   1246c:	movw	r1, #44902	; 0xaf66
   12470:	movt	r1, #1
   12474:	mov	r0, #0
   12478:	mov	r2, #5
   1247c:	bl	1156c <dcgettext@plt>
   12480:	mov	r2, r0
   12484:	mov	r0, #0
   12488:	mov	r1, r6
   1248c:	bl	1162c <error@plt>
   12490:	mov	r0, r5
   12494:	bl	13710 <__assert_fail@plt+0x1e80>
   12498:	cmp	r0, #0
   1249c:	beq	124d0 <__assert_fail@plt+0xc40>
   124a0:	bl	11710 <__errno_location@plt>
   124a4:	ldr	r5, [r0]
   124a8:	mov	r4, #0
   124ac:	movw	r1, #44918	; 0xaf76
   124b0:	movt	r1, #1
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	bl	1156c <dcgettext@plt>
   124c0:	mov	r2, r0
   124c4:	mov	r0, #0
   124c8:	mov	r1, r5
   124cc:	bl	1162c <error@plt>
   124d0:	mov	r0, r4
   124d4:	pop	{r4, r5, r6, sl, fp, pc}
   124d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124dc:	add	fp, sp, #28
   124e0:	sub	sp, sp, #12
   124e4:	mov	r5, r1
   124e8:	mov	r7, r0
   124ec:	add	r9, r1, #64	; 0x40
   124f0:	add	sl, r1, #160	; 0xa0
   124f4:	ldr	r8, [r1, #24]
   124f8:	ldr	r0, [r1, #28]
   124fc:	str	r0, [sp, #8]
   12500:	ldrh	r0, [r1, #56]	; 0x38
   12504:	sub	r1, r0, #1
   12508:	mov	r6, #1
   1250c:	cmp	r1, #9
   12510:	bhi	12770 <__assert_fail@plt+0xee0>
   12514:	add	r2, pc, #0
   12518:	ldr	pc, [r2, r1, lsl #2]
   1251c:	andeq	r2, r1, r4, asr #10
   12520:	andeq	r2, r1, ip, lsl r6
   12524:	andeq	r2, r1, r0, ror r7
   12528:	andeq	r2, r1, r4, ror r6
   1252c:	andeq	r2, r1, r0, ror r7
   12530:			; <UNDEFINED> instruction: 0x000126b8
   12534:	ldrdeq	r2, [r1], -r4
   12538:	andeq	r2, r1, r0, ror r7
   1253c:	andeq	r2, r1, r0, ror r7
   12540:	andeq	r2, r1, r0, lsl #14
   12544:	movw	r0, #49616	; 0xc1d0
   12548:	movt	r0, #2
   1254c:	ldrb	r0, [r0]
   12550:	cmp	r0, #1
   12554:	bne	12850 <__assert_fail@plt+0xfc0>
   12558:	movw	r0, #49664	; 0xc200
   1255c:	movt	r0, #2
   12560:	ldr	r0, [r0]
   12564:	mov	r6, #1
   12568:	cmp	r0, #0
   1256c:	beq	128d4 <__assert_fail@plt+0x1044>
   12570:	ldrd	r2, [r0]
   12574:	ldr	r8, [sl]
   12578:	ldr	r1, [sl, #4]
   1257c:	eor	r1, r1, r3
   12580:	eor	r2, r8, r2
   12584:	orrs	r1, r2, r1
   12588:	bne	128d4 <__assert_fail@plt+0x1044>
   1258c:	ldrd	r0, [r0, #8]
   12590:	ldrd	r2, [r9]
   12594:	eor	r1, r3, r1
   12598:	eor	r0, r2, r0
   1259c:	orrs	r0, r0, r1
   125a0:	bne	128d4 <__assert_fail@plt+0x1044>
   125a4:	movw	r1, #47245	; 0xb88d
   125a8:	movt	r1, #1
   125ac:	ldr	r0, [sp, #8]
   125b0:	bl	114f4 <strcmp@plt>
   125b4:	cmp	r0, #0
   125b8:	beq	12960 <__assert_fail@plt+0x10d0>
   125bc:	movw	r1, #44980	; 0xafb4
   125c0:	movt	r1, #1
   125c4:	mov	r0, #0
   125c8:	mov	r2, #5
   125cc:	bl	1156c <dcgettext@plt>
   125d0:	mov	r6, r0
   125d4:	mov	r0, #0
   125d8:	mov	r1, #4
   125dc:	ldr	r2, [sp, #8]
   125e0:	bl	17644 <__assert_fail@plt+0x5db4>
   125e4:	mov	r4, r7
   125e8:	mov	r7, r0
   125ec:	movw	r2, #47245	; 0xb88d
   125f0:	movt	r2, #1
   125f4:	mov	r0, #1
   125f8:	mov	r1, #4
   125fc:	bl	17644 <__assert_fail@plt+0x5db4>
   12600:	str	r0, [sp]
   12604:	mov	r0, #0
   12608:	mov	r1, #0
   1260c:	mov	r2, r6
   12610:	mov	r3, r7
   12614:	mov	r7, r4
   12618:	b	12994 <__assert_fail@plt+0x1104>
   1261c:	mov	r0, r7
   12620:	mov	r1, r5
   12624:	bl	19020 <__assert_fail@plt+0x7790>
   12628:	cmp	r0, #0
   1262c:	beq	12850 <__assert_fail@plt+0xfc0>
   12630:	mov	r6, #0
   12634:	movw	r1, #45129	; 0xb049
   12638:	movt	r1, #1
   1263c:	mov	r0, #0
   12640:	mov	r2, #5
   12644:	bl	1156c <dcgettext@plt>
   12648:	mov	r4, r0
   1264c:	mov	r0, #0
   12650:	mov	r1, #3
   12654:	ldr	r2, [sp, #8]
   12658:	bl	177a8 <__assert_fail@plt+0x5f18>
   1265c:	mov	r3, r0
   12660:	mov	r0, #0
   12664:	mov	r1, #0
   12668:	mov	r2, r4
   1266c:	bl	1162c <error@plt>
   12670:	b	128d4 <__assert_fail@plt+0x1044>
   12674:	ldr	r6, [r5, #32]
   12678:	movw	r1, #45104	; 0xb030
   1267c:	movt	r1, #1
   12680:	mov	r0, #0
   12684:	mov	r2, #5
   12688:	bl	1156c <dcgettext@plt>
   1268c:	mov	r4, r7
   12690:	mov	r7, r0
   12694:	mov	r0, #4
   12698:	ldr	r1, [sp, #8]
   1269c:	bl	176f4 <__assert_fail@plt+0x5e64>
   126a0:	mov	r3, r0
   126a4:	mov	r0, #0
   126a8:	mov	r1, r6
   126ac:	mov	r2, r7
   126b0:	mov	r7, r4
   126b4:	b	12764 <__assert_fail@plt+0xed4>
   126b8:	movw	r0, #49616	; 0xc1d0
   126bc:	movt	r0, #2
   126c0:	ldrb	r0, [r0]
   126c4:	mov	r6, #1
   126c8:	cmp	r0, #0
   126cc:	bne	12778 <__assert_fail@plt+0xee8>
   126d0:	b	128d4 <__assert_fail@plt+0x1044>
   126d4:	ldr	r6, [r5, #32]
   126d8:	mov	r0, #0
   126dc:	mov	r1, #3
   126e0:	ldr	r2, [sp, #8]
   126e4:	bl	177a8 <__assert_fail@plt+0x5f18>
   126e8:	mov	r3, r0
   126ec:	movw	r2, #45839	; 0xb30f
   126f0:	movt	r2, #1
   126f4:	mov	r0, #0
   126f8:	mov	r1, r6
   126fc:	b	12764 <__assert_fail@plt+0xed4>
   12700:	ldr	r0, [r5, #48]	; 0x30
   12704:	cmp	r0, #0
   12708:	bne	12718 <__assert_fail@plt+0xe88>
   1270c:	ldr	r0, [r5, #16]
   12710:	cmp	r0, #0
   12714:	beq	128e0 <__assert_fail@plt+0x1050>
   12718:	ldr	r0, [r5, #32]
   1271c:	str	r0, [sp, #4]
   12720:	movw	r1, #45087	; 0xb01f
   12724:	movt	r1, #1
   12728:	mov	r0, #0
   1272c:	mov	r2, #5
   12730:	bl	1156c <dcgettext@plt>
   12734:	mov	r6, r9
   12738:	mov	r9, r7
   1273c:	mov	r7, r0
   12740:	mov	r0, #4
   12744:	ldr	r1, [sp, #8]
   12748:	bl	176f4 <__assert_fail@plt+0x5e64>
   1274c:	mov	r3, r0
   12750:	mov	r0, #0
   12754:	ldr	r1, [sp, #4]
   12758:	mov	r2, r7
   1275c:	mov	r7, r9
   12760:	mov	r9, r6
   12764:	bl	1162c <error@plt>
   12768:	ldrh	r0, [r5, #56]	; 0x38
   1276c:	mov	r6, #0
   12770:	cmp	r0, #6
   12774:	bne	12844 <__assert_fail@plt+0xfb4>
   12778:	cmp	r6, #0
   1277c:	beq	12844 <__assert_fail@plt+0xfb4>
   12780:	movw	r0, #49664	; 0xc200
   12784:	movt	r0, #2
   12788:	ldr	r0, [r0]
   1278c:	cmp	r0, #0
   12790:	beq	12844 <__assert_fail@plt+0xfb4>
   12794:	str	r7, [sp, #4]
   12798:	ldrd	r2, [r0]
   1279c:	ldm	sl, {r1, r7}
   127a0:	eor	r3, r7, r3
   127a4:	eor	r1, r1, r2
   127a8:	orrs	r1, r1, r3
   127ac:	bne	12840 <__assert_fail@plt+0xfb0>
   127b0:	ldrd	r0, [r0, #8]
   127b4:	ldrd	r2, [r9]
   127b8:	eor	r1, r3, r1
   127bc:	eor	r0, r2, r0
   127c0:	orrs	r0, r0, r1
   127c4:	ldr	r7, [sp, #4]
   127c8:	bne	12844 <__assert_fail@plt+0xfb4>
   127cc:	movw	r1, #47245	; 0xb88d
   127d0:	movt	r1, #1
   127d4:	ldr	r0, [sp, #8]
   127d8:	bl	114f4 <strcmp@plt>
   127dc:	cmp	r0, #0
   127e0:	beq	128fc <__assert_fail@plt+0x106c>
   127e4:	movw	r1, #44980	; 0xafb4
   127e8:	movt	r1, #1
   127ec:	mov	r0, #0
   127f0:	mov	r2, #5
   127f4:	bl	1156c <dcgettext@plt>
   127f8:	mov	r6, r0
   127fc:	mov	r0, #0
   12800:	mov	r1, #4
   12804:	ldr	r2, [sp, #8]
   12808:	bl	17644 <__assert_fail@plt+0x5db4>
   1280c:	mov	r7, r0
   12810:	movw	r2, #47245	; 0xb88d
   12814:	movt	r2, #1
   12818:	mov	r0, #1
   1281c:	mov	r1, #4
   12820:	bl	17644 <__assert_fail@plt+0x5db4>
   12824:	str	r0, [sp]
   12828:	mov	r0, #0
   1282c:	mov	r1, #0
   12830:	mov	r2, r6
   12834:	mov	r3, r7
   12838:	ldr	r7, [sp, #4]
   1283c:	b	12930 <__assert_fail@plt+0x10a0>
   12840:	ldr	r7, [sp, #4]
   12844:	mov	r4, #0
   12848:	cmp	r6, #0
   1284c:	beq	128ac <__assert_fail@plt+0x101c>
   12850:	movw	r0, #49617	; 0xc1d1
   12854:	movt	r0, #2
   12858:	ldrb	r0, [r0]
   1285c:	cmp	r0, #1
   12860:	bne	12898 <__assert_fail@plt+0x1008>
   12864:	movw	r1, #45315	; 0xb103
   12868:	movt	r1, #1
   1286c:	mov	r0, #0
   12870:	mov	r2, #5
   12874:	bl	1156c <dcgettext@plt>
   12878:	mov	r6, r0
   1287c:	mov	r0, #4
   12880:	ldr	r1, [sp, #8]
   12884:	bl	176f4 <__assert_fail@plt+0x5e64>
   12888:	mov	r2, r0
   1288c:	mov	r0, #1
   12890:	mov	r1, r6
   12894:	bl	11740 <__printf_chk@plt>
   12898:	ldr	r0, [r7, #32]
   1289c:	mov	r1, r8
   128a0:	bl	129dc <__assert_fail@plt+0x114c>
   128a4:	clz	r0, r0
   128a8:	lsr	r4, r0, #5
   128ac:	movw	r0, #49616	; 0xc1d0
   128b0:	movt	r0, #2
   128b4:	ldrb	r0, [r0]
   128b8:	cmp	r0, #0
   128bc:	bne	128d0 <__assert_fail@plt+0x1040>
   128c0:	mov	r0, r7
   128c4:	mov	r1, r5
   128c8:	mov	r2, #4
   128cc:	bl	14b54 <__assert_fail@plt+0x32c4>
   128d0:	mov	r6, r4
   128d4:	mov	r0, r6
   128d8:	sub	sp, fp, #28
   128dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128e0:	mov	r6, #1
   128e4:	str	r6, [r5, #16]
   128e8:	mov	r0, r7
   128ec:	mov	r1, r5
   128f0:	mov	r2, #1
   128f4:	bl	14b54 <__assert_fail@plt+0x32c4>
   128f8:	b	128d4 <__assert_fail@plt+0x1044>
   128fc:	movw	r1, #44935	; 0xaf87
   12900:	movt	r1, #1
   12904:	mov	r0, #0
   12908:	mov	r2, #5
   1290c:	bl	1156c <dcgettext@plt>
   12910:	mov	r6, r0
   12914:	mov	r0, #4
   12918:	ldr	r1, [sp, #8]
   1291c:	bl	176f4 <__assert_fail@plt+0x5e64>
   12920:	mov	r3, r0
   12924:	mov	r0, #0
   12928:	mov	r1, #0
   1292c:	mov	r2, r6
   12930:	bl	1162c <error@plt>
   12934:	mov	r4, #0
   12938:	movw	r1, #45038	; 0xafee
   1293c:	movt	r1, #1
   12940:	mov	r0, #0
   12944:	mov	r2, #5
   12948:	bl	1156c <dcgettext@plt>
   1294c:	mov	r2, r0
   12950:	mov	r0, #0
   12954:	mov	r1, #0
   12958:	bl	1162c <error@plt>
   1295c:	b	128ac <__assert_fail@plt+0x101c>
   12960:	movw	r1, #44935	; 0xaf87
   12964:	movt	r1, #1
   12968:	mov	r0, #0
   1296c:	mov	r2, #5
   12970:	bl	1156c <dcgettext@plt>
   12974:	mov	r6, r0
   12978:	mov	r0, #4
   1297c:	ldr	r1, [sp, #8]
   12980:	bl	176f4 <__assert_fail@plt+0x5e64>
   12984:	mov	r3, r0
   12988:	mov	r0, #0
   1298c:	mov	r1, #0
   12990:	mov	r2, r6
   12994:	bl	1162c <error@plt>
   12998:	mov	r6, #0
   1299c:	movw	r1, #45038	; 0xafee
   129a0:	movt	r1, #1
   129a4:	mov	r0, #0
   129a8:	mov	r2, #5
   129ac:	bl	1156c <dcgettext@plt>
   129b0:	mov	r2, r0
   129b4:	mov	r0, #0
   129b8:	mov	r1, #0
   129bc:	bl	1162c <error@plt>
   129c0:	mov	r0, r7
   129c4:	mov	r1, r5
   129c8:	mov	r2, #4
   129cc:	bl	14b54 <__assert_fail@plt+0x32c4>
   129d0:	mov	r0, r7
   129d4:	bl	138a4 <__assert_fail@plt+0x2014>
   129d8:	b	128d4 <__assert_fail@plt+0x1044>
   129dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129e0:	add	fp, sp, #28
   129e4:	sub	sp, sp, #12
   129e8:	mov	r8, r1
   129ec:	mov	r5, r0
   129f0:	mov	r0, #0
   129f4:	str	r0, [sp, #8]
   129f8:	movw	sl, #49640	; 0xc1e8
   129fc:	movt	sl, #2
   12a00:	ldr	r6, [sl]
   12a04:	cmp	r6, #0
   12a08:	movw	r4, #49636	; 0xc1e4
   12a0c:	movt	r4, #2
   12a10:	beq	12a3c <__assert_fail@plt+0x11ac>
   12a14:	ldrb	r0, [r4]
   12a18:	cmp	r0, #0
   12a1c:	beq	12a64 <__assert_fail@plt+0x11d4>
   12a20:	mov	r0, r5
   12a24:	mov	r1, r8
   12a28:	mov	r2, r6
   12a2c:	bl	181c4 <__assert_fail@plt+0x6934>
   12a30:	cmp	r0, #0
   12a34:	bne	12a7c <__assert_fail@plt+0x11ec>
   12a38:	b	12b48 <__assert_fail@plt+0x12b8>
   12a3c:	ldrb	r0, [r4]
   12a40:	add	r2, sp, #8
   12a44:	cmp	r0, #0
   12a48:	beq	12adc <__assert_fail@plt+0x124c>
   12a4c:	mov	r0, r5
   12a50:	mov	r1, r8
   12a54:	bl	17d54 <__assert_fail@plt+0x64c4>
   12a58:	cmn	r0, #1
   12a5c:	bgt	12b00 <__assert_fail@plt+0x1270>
   12a60:	b	12af0 <__assert_fail@plt+0x1260>
   12a64:	mov	r0, r5
   12a68:	mov	r1, r8
   12a6c:	mov	r2, r6
   12a70:	bl	183fc <__assert_fail@plt+0x6b6c>
   12a74:	cmp	r0, #0
   12a78:	beq	12b48 <__assert_fail@plt+0x12b8>
   12a7c:	bl	11710 <__errno_location@plt>
   12a80:	ldr	r9, [r0]
   12a84:	movw	r1, #45397	; 0xb155
   12a88:	movt	r1, #1
   12a8c:	mov	r0, #0
   12a90:	mov	r2, #5
   12a94:	bl	1156c <dcgettext@plt>
   12a98:	mov	r4, r0
   12a9c:	mov	r0, #0
   12aa0:	mov	r1, #4
   12aa4:	mov	r2, r8
   12aa8:	bl	17644 <__assert_fail@plt+0x5db4>
   12aac:	mov	r5, r0
   12ab0:	mov	r7, #1
   12ab4:	mov	r0, #1
   12ab8:	mov	r1, r6
   12abc:	bl	178e0 <__assert_fail@plt+0x6050>
   12ac0:	str	r0, [sp]
   12ac4:	mov	r0, #0
   12ac8:	mov	r1, r9
   12acc:	mov	r2, r4
   12ad0:	mov	r3, r5
   12ad4:	bl	1162c <error@plt>
   12ad8:	b	12b4c <__assert_fail@plt+0x12bc>
   12adc:	mov	r0, r5
   12ae0:	mov	r1, r8
   12ae4:	bl	17f8c <__assert_fail@plt+0x66fc>
   12ae8:	cmn	r0, #1
   12aec:	bgt	12b00 <__assert_fail@plt+0x1270>
   12af0:	bl	11710 <__errno_location@plt>
   12af4:	ldr	r6, [r0]
   12af8:	cmp	r6, #61	; 0x3d
   12afc:	bne	12ba0 <__assert_fail@plt+0x1310>
   12b00:	ldr	r0, [sp, #8]
   12b04:	cmp	r0, #0
   12b08:	beq	12b6c <__assert_fail@plt+0x12dc>
   12b0c:	add	r1, sp, #4
   12b10:	bl	12be8 <__assert_fail@plt+0x1358>
   12b14:	mov	r7, #1
   12b18:	cmp	r0, #0
   12b1c:	bne	12bdc <__assert_fail@plt+0x134c>
   12b20:	ldr	r0, [sp, #4]
   12b24:	bl	11830 <context_str@plt>
   12b28:	mov	r6, r0
   12b2c:	ldr	r1, [sp, #8]
   12b30:	cmp	r1, #0
   12b34:	beq	12a14 <__assert_fail@plt+0x1184>
   12b38:	mov	r0, r6
   12b3c:	bl	114f4 <strcmp@plt>
   12b40:	cmp	r0, #0
   12b44:	bne	12a14 <__assert_fail@plt+0x1184>
   12b48:	mov	r7, #0
   12b4c:	ldr	r0, [sl]
   12b50:	cmp	r0, #0
   12b54:	bne	12bdc <__assert_fail@plt+0x134c>
   12b58:	ldr	r0, [sp, #4]
   12b5c:	bl	1168c <context_free@plt>
   12b60:	ldr	r0, [sp, #8]
   12b64:	bl	1180c <freecon@plt>
   12b68:	b	12bdc <__assert_fail@plt+0x134c>
   12b6c:	movw	r1, #45348	; 0xb124
   12b70:	movt	r1, #1
   12b74:	mov	r0, #0
   12b78:	mov	r2, #5
   12b7c:	bl	1156c <dcgettext@plt>
   12b80:	mov	r5, r0
   12b84:	mov	r0, #4
   12b88:	mov	r1, r8
   12b8c:	bl	176f4 <__assert_fail@plt+0x5e64>
   12b90:	mov	r3, r0
   12b94:	mov	r0, #0
   12b98:	mov	r1, #0
   12b9c:	b	12bd0 <__assert_fail@plt+0x1340>
   12ba0:	movw	r1, #44298	; 0xad0a
   12ba4:	movt	r1, #1
   12ba8:	mov	r0, #0
   12bac:	mov	r2, #5
   12bb0:	bl	1156c <dcgettext@plt>
   12bb4:	mov	r5, r0
   12bb8:	mov	r0, #4
   12bbc:	mov	r1, r8
   12bc0:	bl	176f4 <__assert_fail@plt+0x5e64>
   12bc4:	mov	r3, r0
   12bc8:	mov	r0, #0
   12bcc:	mov	r1, r6
   12bd0:	mov	r2, r5
   12bd4:	bl	1162c <error@plt>
   12bd8:	mov	r7, #1
   12bdc:	mov	r0, r7
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bec:	add	fp, sp, #24
   12bf0:	sub	sp, sp, #8
   12bf4:	mov	r8, r1
   12bf8:	mov	r6, r0
   12bfc:	bl	11554 <context_new@plt>
   12c00:	cmp	r0, #0
   12c04:	beq	12dc0 <__assert_fail@plt+0x1530>
   12c08:	mov	r4, r0
   12c0c:	movw	r5, #49620	; 0xc1d4
   12c10:	movt	r5, #2
   12c14:	ldr	r1, [r5]
   12c18:	mov	r9, #1
   12c1c:	cmp	r1, #0
   12c20:	beq	12c7c <__assert_fail@plt+0x13ec>
   12c24:	mov	r0, r4
   12c28:	bl	116c8 <context_user_set@plt>
   12c2c:	cmp	r0, #0
   12c30:	beq	12c7c <__assert_fail@plt+0x13ec>
   12c34:	bl	11710 <__errno_location@plt>
   12c38:	ldr	r6, [r0]
   12c3c:	mov	r9, #0
   12c40:	movw	r1, #45472	; 0xb1a0
   12c44:	movt	r1, #1
   12c48:	mov	r0, #0
   12c4c:	mov	r2, #5
   12c50:	bl	1156c <dcgettext@plt>
   12c54:	mov	r7, r0
   12c58:	ldr	r0, [r5]
   12c5c:	bl	178e8 <__assert_fail@plt+0x6058>
   12c60:	str	r0, [sp]
   12c64:	movw	r3, #44860	; 0xaf3c
   12c68:	movt	r3, #1
   12c6c:	mov	r0, #0
   12c70:	mov	r1, r6
   12c74:	mov	r2, r7
   12c78:	bl	1162c <error@plt>
   12c7c:	movw	r5, #49632	; 0xc1e0
   12c80:	movt	r5, #2
   12c84:	ldr	r1, [r5]
   12c88:	cmp	r1, #0
   12c8c:	beq	12ce8 <__assert_fail@plt+0x1458>
   12c90:	mov	r0, r4
   12c94:	bl	11824 <context_range_set@plt>
   12c98:	cmp	r0, #0
   12c9c:	beq	12ce8 <__assert_fail@plt+0x1458>
   12ca0:	bl	11710 <__errno_location@plt>
   12ca4:	ldr	r6, [r0]
   12ca8:	mov	r9, #0
   12cac:	movw	r1, #45472	; 0xb1a0
   12cb0:	movt	r1, #1
   12cb4:	mov	r0, #0
   12cb8:	mov	r2, #5
   12cbc:	bl	1156c <dcgettext@plt>
   12cc0:	mov	r7, r0
   12cc4:	ldr	r0, [r5]
   12cc8:	bl	178e8 <__assert_fail@plt+0x6058>
   12ccc:	str	r0, [sp]
   12cd0:	movw	r3, #44875	; 0xaf4b
   12cd4:	movt	r3, #1
   12cd8:	mov	r0, #0
   12cdc:	mov	r1, r6
   12ce0:	mov	r2, r7
   12ce4:	bl	1162c <error@plt>
   12ce8:	movw	r5, #49624	; 0xc1d8
   12cec:	movt	r5, #2
   12cf0:	ldr	r1, [r5]
   12cf4:	cmp	r1, #0
   12cf8:	beq	12d54 <__assert_fail@plt+0x14c4>
   12cfc:	mov	r0, r4
   12d00:	bl	11560 <context_role_set@plt>
   12d04:	cmp	r0, #0
   12d08:	beq	12d54 <__assert_fail@plt+0x14c4>
   12d0c:	bl	11710 <__errno_location@plt>
   12d10:	ldr	r6, [r0]
   12d14:	mov	r9, #0
   12d18:	movw	r1, #45472	; 0xb1a0
   12d1c:	movt	r1, #1
   12d20:	mov	r0, #0
   12d24:	mov	r2, #5
   12d28:	bl	1156c <dcgettext@plt>
   12d2c:	mov	r7, r0
   12d30:	ldr	r0, [r5]
   12d34:	bl	178e8 <__assert_fail@plt+0x6058>
   12d38:	str	r0, [sp]
   12d3c:	movw	r3, #44865	; 0xaf41
   12d40:	movt	r3, #1
   12d44:	mov	r0, #0
   12d48:	mov	r1, r6
   12d4c:	mov	r2, r7
   12d50:	bl	1162c <error@plt>
   12d54:	movw	r7, #49628	; 0xc1dc
   12d58:	movt	r7, #2
   12d5c:	ldr	r1, [r7]
   12d60:	cmp	r1, #0
   12d64:	beq	12e00 <__assert_fail@plt+0x1570>
   12d68:	mov	r0, r4
   12d6c:	bl	11578 <context_type_set@plt>
   12d70:	cmp	r0, #0
   12d74:	beq	12e00 <__assert_fail@plt+0x1570>
   12d78:	bl	11710 <__errno_location@plt>
   12d7c:	ldr	r5, [r0]
   12d80:	movw	r1, #45472	; 0xb1a0
   12d84:	movt	r1, #1
   12d88:	mov	r0, #0
   12d8c:	mov	r2, #5
   12d90:	bl	1156c <dcgettext@plt>
   12d94:	mov	r6, r0
   12d98:	ldr	r0, [r7]
   12d9c:	bl	178e8 <__assert_fail@plt+0x6058>
   12da0:	str	r0, [sp]
   12da4:	movw	r3, #44870	; 0xaf46
   12da8:	movt	r3, #1
   12dac:	mov	r0, #0
   12db0:	mov	r1, r5
   12db4:	mov	r2, r6
   12db8:	bl	1162c <error@plt>
   12dbc:	b	12e18 <__assert_fail@plt+0x1588>
   12dc0:	bl	11710 <__errno_location@plt>
   12dc4:	ldr	r4, [r0]
   12dc8:	movw	r1, #45434	; 0xb17a
   12dcc:	movt	r1, #1
   12dd0:	mov	r0, #0
   12dd4:	mov	r2, #5
   12dd8:	bl	1156c <dcgettext@plt>
   12ddc:	mov	r5, r0
   12de0:	mov	r0, r6
   12de4:	bl	178e8 <__assert_fail@plt+0x6058>
   12de8:	mov	r3, r0
   12dec:	mov	r0, #0
   12df0:	mov	r1, r4
   12df4:	mov	r2, r5
   12df8:	bl	1162c <error@plt>
   12dfc:	b	12e30 <__assert_fail@plt+0x15a0>
   12e00:	cmp	r9, #0
   12e04:	beq	12e18 <__assert_fail@plt+0x1588>
   12e08:	str	r4, [r8]
   12e0c:	mov	r0, #0
   12e10:	sub	sp, fp, #24
   12e14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e18:	bl	11710 <__errno_location@plt>
   12e1c:	mov	r5, r0
   12e20:	ldr	r6, [r0]
   12e24:	mov	r0, r4
   12e28:	bl	1168c <context_free@plt>
   12e2c:	str	r6, [r5]
   12e30:	mov	r0, #1
   12e34:	sub	sp, fp, #24
   12e38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e3c:	movw	r1, #49668	; 0xc204
   12e40:	movt	r1, #2
   12e44:	str	r0, [r1]
   12e48:	bx	lr
   12e4c:	movw	r1, #49672	; 0xc208
   12e50:	movt	r1, #2
   12e54:	strb	r0, [r1]
   12e58:	bx	lr
   12e5c:	push	{r4, r5, r6, sl, fp, lr}
   12e60:	add	fp, sp, #16
   12e64:	sub	sp, sp, #8
   12e68:	movw	r0, #49604	; 0xc1c4
   12e6c:	movt	r0, #2
   12e70:	ldr	r0, [r0]
   12e74:	bl	196b8 <__assert_fail@plt+0x7e28>
   12e78:	cmp	r0, #0
   12e7c:	beq	12ea4 <__assert_fail@plt+0x1614>
   12e80:	movw	r0, #49672	; 0xc208
   12e84:	movt	r0, #2
   12e88:	ldrb	r0, [r0]
   12e8c:	cmp	r0, #0
   12e90:	beq	12ec4 <__assert_fail@plt+0x1634>
   12e94:	bl	11710 <__errno_location@plt>
   12e98:	ldr	r0, [r0]
   12e9c:	cmp	r0, #32
   12ea0:	bne	12ec4 <__assert_fail@plt+0x1634>
   12ea4:	movw	r0, #49600	; 0xc1c0
   12ea8:	movt	r0, #2
   12eac:	ldr	r0, [r0]
   12eb0:	bl	196b8 <__assert_fail@plt+0x7e28>
   12eb4:	cmp	r0, #0
   12eb8:	subeq	sp, fp, #16
   12ebc:	popeq	{r4, r5, r6, sl, fp, pc}
   12ec0:	b	12f34 <__assert_fail@plt+0x16a4>
   12ec4:	movw	r1, #45823	; 0xb2ff
   12ec8:	movt	r1, #1
   12ecc:	mov	r0, #0
   12ed0:	mov	r2, #5
   12ed4:	bl	1156c <dcgettext@plt>
   12ed8:	mov	r4, r0
   12edc:	movw	r0, #49668	; 0xc204
   12ee0:	movt	r0, #2
   12ee4:	ldr	r6, [r0]
   12ee8:	bl	11710 <__errno_location@plt>
   12eec:	ldr	r5, [r0]
   12ef0:	cmp	r6, #0
   12ef4:	bne	12f10 <__assert_fail@plt+0x1680>
   12ef8:	movw	r2, #45839	; 0xb30f
   12efc:	movt	r2, #1
   12f00:	mov	r0, #0
   12f04:	mov	r1, r5
   12f08:	mov	r3, r4
   12f0c:	b	12f30 <__assert_fail@plt+0x16a0>
   12f10:	mov	r0, r6
   12f14:	bl	17798 <__assert_fail@plt+0x5f08>
   12f18:	mov	r3, r0
   12f1c:	str	r4, [sp]
   12f20:	movw	r2, #45835	; 0xb30b
   12f24:	movt	r2, #1
   12f28:	mov	r0, #0
   12f2c:	mov	r1, r5
   12f30:	bl	1162c <error@plt>
   12f34:	movw	r0, #49516	; 0xc16c
   12f38:	movt	r0, #2
   12f3c:	ldr	r0, [r0]
   12f40:	bl	11530 <_exit@plt>
   12f44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f48:	add	fp, sp, #28
   12f4c:	sub	sp, sp, #12
   12f50:	cmp	r1, #4096	; 0x1000
   12f54:	bcs	12f70 <__assert_fail@plt+0x16e0>
   12f58:	mov	r6, r1
   12f5c:	mov	r7, r0
   12f60:	and	r0, r1, #516	; 0x204
   12f64:	cmp	r0, #516	; 0x204
   12f68:	tstne	r6, #18
   12f6c:	bne	12f8c <__assert_fail@plt+0x16fc>
   12f70:	bl	11710 <__errno_location@plt>
   12f74:	mov	r1, #22
   12f78:	str	r1, [r0]
   12f7c:	mov	r4, #0
   12f80:	mov	r0, r4
   12f84:	sub	sp, fp, #28
   12f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f8c:	mov	sl, r2
   12f90:	mov	r0, #1
   12f94:	mov	r1, #96	; 0x60
   12f98:	bl	19050 <__assert_fail@plt+0x77c0>
   12f9c:	cmp	r0, #0
   12fa0:	beq	12f7c <__assert_fail@plt+0x16ec>
   12fa4:	mov	r4, r0
   12fa8:	mvn	r0, #99	; 0x63
   12fac:	str	r0, [r4, #32]
   12fb0:	bic	r0, r6, #516	; 0x204
   12fb4:	tst	r6, #2
   12fb8:	mov	r1, r6
   12fbc:	orrne	r1, r0, #4
   12fc0:	str	sl, [r4, #44]	; 0x2c
   12fc4:	str	r1, [r4, #48]	; 0x30
   12fc8:	mov	r0, r7
   12fcc:	bl	13250 <__assert_fail@plt+0x19c0>
   12fd0:	mov	r1, r0
   12fd4:	cmp	r0, #4096	; 0x1000
   12fd8:	movls	r1, #4096	; 0x1000
   12fdc:	mov	r0, r4
   12fe0:	bl	13298 <__assert_fail@plt+0x1a08>
   12fe4:	cmp	r0, #0
   12fe8:	beq	13244 <__assert_fail@plt+0x19b4>
   12fec:	ldr	r0, [r7]
   12ff0:	cmp	r0, #0
   12ff4:	beq	13034 <__assert_fail@plt+0x17a4>
   12ff8:	movw	r1, #44011	; 0xabeb
   12ffc:	movt	r1, #1
   13000:	mov	r0, r4
   13004:	mov	r2, #0
   13008:	bl	13314 <__assert_fail@plt+0x1a84>
   1300c:	cmp	r0, #0
   13010:	beq	1323c <__assert_fail@plt+0x19ac>
   13014:	mov	r8, r0
   13018:	mvn	r0, #0
   1301c:	str	r0, [r8, #48]	; 0x30
   13020:	cmp	sl, #0
   13024:	beq	13040 <__assert_fail@plt+0x17b0>
   13028:	ldrb	r0, [r4, #49]	; 0x31
   1302c:	ubfx	r0, r0, #2, #1
   13030:	b	13044 <__assert_fail@plt+0x17b4>
   13034:	mov	r8, #0
   13038:	cmp	sl, #0
   1303c:	bne	13028 <__assert_fail@plt+0x1798>
   13040:	mov	r0, #1
   13044:	ldr	r5, [r7]
   13048:	cmp	r5, #0
   1304c:	beq	13178 <__assert_fail@plt+0x18e8>
   13050:	and	r1, r6, #2048	; 0x800
   13054:	str	r1, [sp, #8]
   13058:	eor	r0, r0, #1
   1305c:	str	r0, [sp, #4]
   13060:	mov	r9, #0
   13064:	mov	r0, #0
   13068:	str	r0, [sp]
   1306c:	mov	r6, #0
   13070:	b	130a8 <__assert_fail@plt+0x1818>
   13074:	mov	r0, r4
   13078:	mov	r1, r5
   1307c:	mov	r2, #0
   13080:	bl	133c8 <__assert_fail@plt+0x1b38>
   13084:	strh	r0, [r5, #56]	; 0x38
   13088:	cmp	sl, #0
   1308c:	beq	13150 <__assert_fail@plt+0x18c0>
   13090:	str	r9, [r5, #8]
   13094:	mov	r9, r5
   13098:	add	r6, r6, #1
   1309c:	ldr	r5, [r7, #4]!
   130a0:	cmp	r5, #0
   130a4:	beq	13180 <__assert_fail@plt+0x18f0>
   130a8:	mov	r0, r5
   130ac:	bl	116ec <strlen@plt>
   130b0:	mov	r2, r0
   130b4:	ldr	r0, [sp, #8]
   130b8:	cmp	r0, #0
   130bc:	bne	130f4 <__assert_fail@plt+0x1864>
   130c0:	cmp	r2, #3
   130c4:	bcc	130f4 <__assert_fail@plt+0x1864>
   130c8:	add	r0, r2, r5
   130cc:	ldrb	r0, [r0, #-1]
   130d0:	cmp	r0, #47	; 0x2f
   130d4:	bne	130f4 <__assert_fail@plt+0x1864>
   130d8:	sub	r0, r5, #2
   130dc:	ldrb	r1, [r0, r2]
   130e0:	cmp	r1, #47	; 0x2f
   130e4:	bne	130f4 <__assert_fail@plt+0x1864>
   130e8:	sub	r2, r2, #1
   130ec:	cmp	r2, #1
   130f0:	bhi	130dc <__assert_fail@plt+0x184c>
   130f4:	mov	r0, r4
   130f8:	mov	r1, r5
   130fc:	bl	13314 <__assert_fail@plt+0x1a84>
   13100:	cmp	r0, #0
   13104:	beq	1322c <__assert_fail@plt+0x199c>
   13108:	mov	r5, r0
   1310c:	str	r8, [r0, #4]
   13110:	mov	r0, #0
   13114:	str	r0, [r5, #48]	; 0x30
   13118:	add	r0, r5, #168	; 0xa8
   1311c:	str	r0, [r5, #24]
   13120:	clz	r0, r9
   13124:	lsr	r0, r0, #5
   13128:	ldr	r1, [sp, #4]
   1312c:	orrs	r0, r1, r0
   13130:	bne	13074 <__assert_fail@plt+0x17e4>
   13134:	mov	r0, #11
   13138:	strh	r0, [r5, #56]	; 0x38
   1313c:	mov	r0, r5
   13140:	mov	r1, #1
   13144:	bl	13398 <__assert_fail@plt+0x1b08>
   13148:	cmp	sl, #0
   1314c:	bne	13090 <__assert_fail@plt+0x1800>
   13150:	mov	r0, #0
   13154:	str	r0, [r5, #8]
   13158:	cmp	r9, #0
   1315c:	beq	13170 <__assert_fail@plt+0x18e0>
   13160:	ldr	r0, [sp]
   13164:	str	r5, [r0, #8]
   13168:	str	r5, [sp]
   1316c:	b	13098 <__assert_fail@plt+0x1808>
   13170:	str	r5, [sp]
   13174:	b	13094 <__assert_fail@plt+0x1804>
   13178:	mov	r9, #0
   1317c:	b	131a4 <__assert_fail@plt+0x1914>
   13180:	cmp	sl, #0
   13184:	beq	131a4 <__assert_fail@plt+0x1914>
   13188:	cmp	r6, #2
   1318c:	bcc	131a4 <__assert_fail@plt+0x1914>
   13190:	mov	r0, r4
   13194:	mov	r1, r9
   13198:	mov	r2, r6
   1319c:	bl	1353c <__assert_fail@plt+0x1cac>
   131a0:	mov	r9, r0
   131a4:	movw	r1, #44011	; 0xabeb
   131a8:	movt	r1, #1
   131ac:	mov	r0, r4
   131b0:	mov	r2, #0
   131b4:	bl	13314 <__assert_fail@plt+0x1a84>
   131b8:	str	r0, [r4]
   131bc:	cmp	r0, #0
   131c0:	beq	1322c <__assert_fail@plt+0x199c>
   131c4:	mov	r1, #9
   131c8:	strh	r1, [r0, #56]	; 0x38
   131cc:	str	r9, [r0, #8]
   131d0:	mov	r1, #1
   131d4:	str	r1, [r0, #48]	; 0x30
   131d8:	mov	r0, r4
   131dc:	bl	1360c <__assert_fail@plt+0x1d7c>
   131e0:	cmp	r0, #0
   131e4:	beq	1322c <__assert_fail@plt+0x199c>
   131e8:	ldrh	r0, [r4, #48]	; 0x30
   131ec:	tst	r0, #516	; 0x204
   131f0:	bne	1321c <__assert_fail@plt+0x198c>
   131f4:	movw	r1, #45843	; 0xb313
   131f8:	movt	r1, #1
   131fc:	mov	r0, r4
   13200:	bl	13698 <__assert_fail@plt+0x1e08>
   13204:	str	r0, [r4, #28]
   13208:	cmn	r0, #1
   1320c:	bgt	1321c <__assert_fail@plt+0x198c>
   13210:	ldr	r0, [r4, #48]	; 0x30
   13214:	orr	r0, r0, #4
   13218:	str	r0, [r4, #48]	; 0x30
   1321c:	add	r0, r4, #60	; 0x3c
   13220:	mvn	r1, #0
   13224:	bl	15f94 <__assert_fail@plt+0x4704>
   13228:	b	12f80 <__assert_fail@plt+0x16f0>
   1322c:	mov	r0, r9
   13230:	bl	136c8 <__assert_fail@plt+0x1e38>
   13234:	mov	r0, r8
   13238:	bl	19b78 <__assert_fail@plt+0x82e8>
   1323c:	ldr	r0, [r4, #24]
   13240:	bl	19b78 <__assert_fail@plt+0x82e8>
   13244:	mov	r0, r4
   13248:	bl	19b78 <__assert_fail@plt+0x82e8>
   1324c:	b	12f7c <__assert_fail@plt+0x16ec>
   13250:	push	{r4, r5, fp, lr}
   13254:	add	fp, sp, #8
   13258:	mov	r1, r0
   1325c:	ldr	r0, [r0]
   13260:	cmp	r0, #0
   13264:	beq	13290 <__assert_fail@plt+0x1a00>
   13268:	add	r5, r1, #4
   1326c:	mov	r4, #0
   13270:	bl	116ec <strlen@plt>
   13274:	cmp	r0, r4
   13278:	movhi	r4, r0
   1327c:	ldr	r0, [r5], #4
   13280:	cmp	r0, #0
   13284:	bne	13270 <__assert_fail@plt+0x19e0>
   13288:	add	r0, r4, #1
   1328c:	pop	{r4, r5, fp, pc}
   13290:	mov	r0, #1
   13294:	pop	{r4, r5, fp, pc}
   13298:	push	{r4, r5, fp, lr}
   1329c:	add	fp, sp, #8
   132a0:	mov	r4, r0
   132a4:	ldr	r0, [r0, #36]	; 0x24
   132a8:	add	r1, r1, #256	; 0x100
   132ac:	adds	r1, r1, r0
   132b0:	bcc	132d8 <__assert_fail@plt+0x1a48>
   132b4:	ldr	r0, [r4, #24]
   132b8:	bl	19b78 <__assert_fail@plt+0x82e8>
   132bc:	mov	r5, #0
   132c0:	str	r5, [r4, #24]
   132c4:	bl	11710 <__errno_location@plt>
   132c8:	mov	r1, #36	; 0x24
   132cc:	str	r1, [r0]
   132d0:	mov	r0, r5
   132d4:	pop	{r4, r5, fp, pc}
   132d8:	str	r1, [r4, #36]	; 0x24
   132dc:	ldr	r0, [r4, #24]
   132e0:	bl	190d4 <__assert_fail@plt+0x7844>
   132e4:	cmp	r0, #0
   132e8:	beq	132fc <__assert_fail@plt+0x1a6c>
   132ec:	str	r0, [r4, #24]
   132f0:	mov	r5, #1
   132f4:	mov	r0, r5
   132f8:	pop	{r4, r5, fp, pc}
   132fc:	ldr	r0, [r4, #24]
   13300:	bl	19b78 <__assert_fail@plt+0x82e8>
   13304:	mov	r5, #0
   13308:	str	r5, [r4, #24]
   1330c:	mov	r0, r5
   13310:	pop	{r4, r5, fp, pc}
   13314:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13318:	add	fp, sp, #24
   1331c:	mov	r6, r2
   13320:	mov	r8, r1
   13324:	mov	r5, r0
   13328:	add	r0, r2, #176	; 0xb0
   1332c:	bic	r0, r0, #7
   13330:	bl	190a4 <__assert_fail@plt+0x7814>
   13334:	cmp	r0, #0
   13338:	beq	1338c <__assert_fail@plt+0x1afc>
   1333c:	mov	r4, r0
   13340:	add	r7, r0, #168	; 0xa8
   13344:	mov	r0, r7
   13348:	mov	r1, r8
   1334c:	mov	r2, r6
   13350:	bl	1153c <memcpy@plt>
   13354:	mov	r0, #0
   13358:	strb	r0, [r7, r6]
   1335c:	str	r6, [r4, #52]	; 0x34
   13360:	str	r5, [r4, #44]	; 0x2c
   13364:	ldr	r1, [r5, #24]
   13368:	str	r0, [r4, #12]
   1336c:	str	r0, [r4, #16]
   13370:	str	r0, [r4, #20]
   13374:	mov	r2, #196608	; 0x30000
   13378:	str	r2, [r4, #58]	; 0x3a
   1337c:	str	r1, [r4, #28]
   13380:	str	r0, [r4, #32]
   13384:	mov	r0, r4
   13388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1338c:	mov	r4, #0
   13390:	mov	r0, r4
   13394:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13398:	push	{fp, lr}
   1339c:	mov	fp, sp
   133a0:	ldrh	r2, [r0, #56]	; 0x38
   133a4:	cmp	r2, #11
   133a8:	bne	133c4 <__assert_fail@plt+0x1b34>
   133ac:	mov	r3, #0
   133b0:	mov	r2, #1
   133b4:	cmp	r1, #0
   133b8:	movwne	r2, #2
   133bc:	strd	r2, [r0, #112]	; 0x70
   133c0:	pop	{fp, pc}
   133c4:	bl	11854 <abort@plt>
   133c8:	push	{r4, r5, r6, sl, fp, lr}
   133cc:	add	fp, sp, #16
   133d0:	mov	r4, r1
   133d4:	ldr	r1, [r1, #48]	; 0x30
   133d8:	cmp	r1, #0
   133dc:	bne	133ec <__assert_fail@plt+0x1b5c>
   133e0:	ldrb	r1, [r0, #48]	; 0x30
   133e4:	and	r1, r1, #1
   133e8:	orr	r2, r1, r2
   133ec:	add	r5, r4, #64	; 0x40
   133f0:	cmp	r2, #0
   133f4:	ldreq	r1, [r0, #48]	; 0x30
   133f8:	andseq	r1, r1, #2
   133fc:	beq	1344c <__assert_fail@plt+0x1bbc>
   13400:	ldr	r0, [r4, #24]
   13404:	mov	r1, r5
   13408:	bl	1a4dc <__assert_fail@plt+0x8c4c>
   1340c:	cmp	r0, #0
   13410:	beq	134c0 <__assert_fail@plt+0x1c30>
   13414:	bl	11710 <__errno_location@plt>
   13418:	mov	r6, r0
   1341c:	ldr	r0, [r0]
   13420:	cmp	r0, #2
   13424:	bne	13470 <__assert_fail@plt+0x1be0>
   13428:	ldr	r0, [r4, #24]
   1342c:	mov	r1, r5
   13430:	bl	1a4fc <__assert_fail@plt+0x8c6c>
   13434:	cmp	r0, #0
   13438:	bne	13470 <__assert_fail@plt+0x1be0>
   1343c:	mov	r0, #0
   13440:	str	r0, [r6]
   13444:	mov	r0, #13
   13448:	pop	{r4, r5, r6, sl, fp, pc}
   1344c:	ldr	r1, [r4, #24]
   13450:	ldr	r0, [r0, #32]
   13454:	mov	r2, r5
   13458:	mov	r3, #256	; 0x100
   1345c:	bl	1a50c <__assert_fail@plt+0x8c7c>
   13460:	cmp	r0, #0
   13464:	beq	134c0 <__assert_fail@plt+0x1c30>
   13468:	bl	11710 <__errno_location@plt>
   1346c:	mov	r6, r0
   13470:	ldr	r0, [r6]
   13474:	str	r0, [r4, #32]
   13478:	mov	r0, #0
   1347c:	vmov.i32	q8, #0	; 0x00000000
   13480:	str	r0, [r5, #96]	; 0x60
   13484:	add	r1, r5, #80	; 0x50
   13488:	vst1.64	{d16-d17}, [r1]
   1348c:	add	r1, r5, #64	; 0x40
   13490:	vst1.64	{d16-d17}, [r1]
   13494:	add	r1, r5, #48	; 0x30
   13498:	vst1.64	{d16-d17}, [r1]
   1349c:	add	r1, r5, #32
   134a0:	vst1.64	{d16-d17}, [r1]
   134a4:	add	r1, r5, #16
   134a8:	vst1.64	{d16-d17}, [r1]
   134ac:	mov	r1, #100	; 0x64
   134b0:	vst1.64	{d16-d17}, [r5], r1
   134b4:	str	r0, [r5]
   134b8:	mov	r0, #10
   134bc:	pop	{r4, r5, r6, sl, fp, pc}
   134c0:	ldr	r0, [r4, #80]	; 0x50
   134c4:	and	r0, r0, #61440	; 0xf000
   134c8:	cmp	r0, #40960	; 0xa000
   134cc:	beq	13524 <__assert_fail@plt+0x1c94>
   134d0:	cmp	r0, #32768	; 0x8000
   134d4:	beq	1352c <__assert_fail@plt+0x1c9c>
   134d8:	cmp	r0, #16384	; 0x4000
   134dc:	bne	13534 <__assert_fail@plt+0x1ca4>
   134e0:	ldrb	r1, [r4, #168]	; 0xa8
   134e4:	mov	r0, #1
   134e8:	cmp	r1, #46	; 0x2e
   134ec:	bne	13538 <__assert_fail@plt+0x1ca8>
   134f0:	ldrb	r1, [r4, #169]	; 0xa9
   134f4:	cmp	r1, #0
   134f8:	beq	13510 <__assert_fail@plt+0x1c80>
   134fc:	cmp	r1, #46	; 0x2e
   13500:	bne	13538 <__assert_fail@plt+0x1ca8>
   13504:	ldrb	r1, [r4, #170]	; 0xaa
   13508:	cmp	r1, #0
   1350c:	popne	{r4, r5, r6, sl, fp, pc}
   13510:	ldr	r1, [r4, #48]	; 0x30
   13514:	mov	r0, #5
   13518:	cmp	r1, #0
   1351c:	movweq	r0, #1
   13520:	pop	{r4, r5, r6, sl, fp, pc}
   13524:	mov	r0, #12
   13528:	pop	{r4, r5, r6, sl, fp, pc}
   1352c:	mov	r0, #8
   13530:	pop	{r4, r5, r6, sl, fp, pc}
   13534:	mov	r0, #3
   13538:	pop	{r4, r5, r6, sl, fp, pc}
   1353c:	push	{r4, r5, r6, r7, fp, lr}
   13540:	add	fp, sp, #16
   13544:	mov	r6, r2
   13548:	mov	r4, r1
   1354c:	mov	r5, r0
   13550:	ldr	r7, [r0, #44]	; 0x2c
   13554:	ldr	r0, [r0, #40]	; 0x28
   13558:	cmp	r0, r2
   1355c:	bcs	13588 <__assert_fail@plt+0x1cf8>
   13560:	add	r1, r6, #40	; 0x28
   13564:	str	r1, [r5, #40]	; 0x28
   13568:	cmn	r1, #-1073741823	; 0xc0000001
   1356c:	bhi	135f0 <__assert_fail@plt+0x1d60>
   13570:	ldr	r0, [r5, #8]
   13574:	lsl	r1, r1, #2
   13578:	bl	190d4 <__assert_fail@plt+0x7844>
   1357c:	cmp	r0, #0
   13580:	beq	135f0 <__assert_fail@plt+0x1d60>
   13584:	str	r0, [r5, #8]
   13588:	cmp	r4, #0
   1358c:	beq	135a4 <__assert_fail@plt+0x1d14>
   13590:	ldr	r0, [r5, #8]
   13594:	str	r4, [r0], #4
   13598:	ldr	r4, [r4, #8]
   1359c:	cmp	r4, #0
   135a0:	bne	13594 <__assert_fail@plt+0x1d04>
   135a4:	ldr	r0, [r5, #8]
   135a8:	mov	r1, r6
   135ac:	mov	r2, #4
   135b0:	mov	r3, r7
   135b4:	bl	11800 <qsort@plt>
   135b8:	subs	r1, r6, #1
   135bc:	ldr	r0, [r5, #8]
   135c0:	ldr	r4, [r0]
   135c4:	beq	135dc <__assert_fail@plt+0x1d4c>
   135c8:	ldr	r2, [r0]
   135cc:	ldr	r3, [r0, #4]!
   135d0:	str	r3, [r2, #8]
   135d4:	subs	r1, r1, #1
   135d8:	bne	135c8 <__assert_fail@plt+0x1d38>
   135dc:	ldr	r0, [r0]
   135e0:	mov	r1, #0
   135e4:	str	r1, [r0, #8]
   135e8:	mov	r0, r4
   135ec:	pop	{r4, r5, r6, r7, fp, pc}
   135f0:	ldr	r0, [r5, #8]
   135f4:	bl	19b78 <__assert_fail@plt+0x82e8>
   135f8:	mov	r0, #0
   135fc:	str	r0, [r5, #40]	; 0x28
   13600:	str	r0, [r5, #8]
   13604:	mov	r0, r4
   13608:	pop	{r4, r5, r6, r7, fp, pc}
   1360c:	push	{r4, r5, fp, lr}
   13610:	add	fp, sp, #8
   13614:	sub	sp, sp, #8
   13618:	mov	r4, r0
   1361c:	ldrh	r0, [r0, #48]	; 0x30
   13620:	movw	r1, #258	; 0x102
   13624:	tst	r0, r1
   13628:	beq	13668 <__assert_fail@plt+0x1dd8>
   1362c:	movw	r0, #39800	; 0x9b78
   13630:	movt	r0, #1
   13634:	str	r0, [sp]
   13638:	mov	r5, #0
   1363c:	movw	r2, #19692	; 0x4cec
   13640:	movt	r2, #1
   13644:	movw	r3, #19724	; 0x4d0c
   13648:	movt	r3, #1
   1364c:	mov	r0, #31
   13650:	mov	r1, #0
   13654:	bl	154ec <__assert_fail@plt+0x3c5c>
   13658:	str	r0, [r4, #56]	; 0x38
   1365c:	cmp	r0, #0
   13660:	movne	r5, #1
   13664:	b	1368c <__assert_fail@plt+0x1dfc>
   13668:	mov	r0, #32
   1366c:	bl	190a4 <__assert_fail@plt+0x7814>
   13670:	str	r0, [r4, #56]	; 0x38
   13674:	cmp	r0, #0
   13678:	beq	13688 <__assert_fail@plt+0x1df8>
   1367c:	bl	1973c <__assert_fail@plt+0x7eac>
   13680:	mov	r5, #1
   13684:	b	1368c <__assert_fail@plt+0x1dfc>
   13688:	mov	r5, #0
   1368c:	mov	r0, r5
   13690:	sub	sp, fp, #8
   13694:	pop	{r4, r5, fp, pc}
   13698:	ldr	r3, [r0, #48]	; 0x30
   1369c:	mov	r2, #32768	; 0x8000
   136a0:	and	r2, r2, r3, lsl #11
   136a4:	orr	r2, r2, #18688	; 0x4900
   136a8:	orr	r2, r2, #524288	; 0x80000
   136ac:	tst	r3, #512	; 0x200
   136b0:	bne	136c0 <__assert_fail@plt+0x1e30>
   136b4:	mov	r0, r1
   136b8:	mov	r1, r2
   136bc:	b	19ad4 <__assert_fail@plt+0x8244>
   136c0:	ldr	r0, [r0, #32]
   136c4:	b	1605c <__assert_fail@plt+0x47cc>
   136c8:	push	{r4, r6, r7, sl, fp, lr}
   136cc:	add	fp, sp, #16
   136d0:	cmp	r0, #0
   136d4:	beq	1370c <__assert_fail@plt+0x1e7c>
   136d8:	mov	r4, r0
   136dc:	b	136f4 <__assert_fail@plt+0x1e64>
   136e0:	mov	r0, r4
   136e4:	bl	19b78 <__assert_fail@plt+0x82e8>
   136e8:	cmp	r6, #0
   136ec:	mov	r4, r6
   136f0:	beq	1370c <__assert_fail@plt+0x1e7c>
   136f4:	ldrd	r6, [r4, #8]
   136f8:	cmp	r7, #0
   136fc:	beq	136e0 <__assert_fail@plt+0x1e50>
   13700:	mov	r0, r7
   13704:	bl	11878 <closedir@plt>
   13708:	b	136e0 <__assert_fail@plt+0x1e50>
   1370c:	pop	{r4, r6, r7, sl, fp, pc}
   13710:	push	{r4, r5, fp, lr}
   13714:	add	fp, sp, #8
   13718:	mov	r4, r0
   1371c:	ldr	r0, [r0]
   13720:	cmp	r0, #0
   13724:	beq	13764 <__assert_fail@plt+0x1ed4>
   13728:	ldr	r1, [r0, #48]	; 0x30
   1372c:	cmp	r1, #0
   13730:	bmi	13758 <__assert_fail@plt+0x1ec8>
   13734:	ldr	r5, [r0, #8]
   13738:	cmp	r5, #0
   1373c:	ldreq	r5, [r0, #4]
   13740:	bl	19b78 <__assert_fail@plt+0x82e8>
   13744:	ldr	r0, [r5, #48]	; 0x30
   13748:	cmn	r0, #1
   1374c:	mov	r0, r5
   13750:	bgt	13734 <__assert_fail@plt+0x1ea4>
   13754:	b	1375c <__assert_fail@plt+0x1ecc>
   13758:	mov	r5, r0
   1375c:	mov	r0, r5
   13760:	bl	19b78 <__assert_fail@plt+0x82e8>
   13764:	ldr	r0, [r4, #4]
   13768:	cmp	r0, #0
   1376c:	blne	136c8 <__assert_fail@plt+0x1e38>
   13770:	ldr	r0, [r4, #8]
   13774:	bl	19b78 <__assert_fail@plt+0x82e8>
   13778:	ldr	r0, [r4, #24]
   1377c:	bl	19b78 <__assert_fail@plt+0x82e8>
   13780:	ldr	r0, [r4, #48]	; 0x30
   13784:	tst	r0, #512	; 0x200
   13788:	bne	137b4 <__assert_fail@plt+0x1f24>
   1378c:	mov	r5, #0
   13790:	tst	r0, #4
   13794:	bne	137f8 <__assert_fail@plt+0x1f68>
   13798:	ldr	r0, [r4, #28]
   1379c:	bl	117f4 <fchdir@plt>
   137a0:	cmp	r0, #0
   137a4:	beq	137d4 <__assert_fail@plt+0x1f44>
   137a8:	bl	11710 <__errno_location@plt>
   137ac:	ldr	r5, [r0]
   137b0:	b	137d8 <__assert_fail@plt+0x1f48>
   137b4:	ldr	r0, [r4, #32]
   137b8:	mov	r5, #0
   137bc:	cmp	r0, #0
   137c0:	bmi	137f8 <__assert_fail@plt+0x1f68>
   137c4:	bl	11860 <close@plt>
   137c8:	cmp	r0, #0
   137cc:	bne	137f0 <__assert_fail@plt+0x1f60>
   137d0:	b	137f8 <__assert_fail@plt+0x1f68>
   137d4:	mov	r5, #0
   137d8:	ldr	r0, [r4, #28]
   137dc:	bl	11860 <close@plt>
   137e0:	cmp	r5, #0
   137e4:	bne	137f8 <__assert_fail@plt+0x1f68>
   137e8:	cmp	r0, #0
   137ec:	beq	137f8 <__assert_fail@plt+0x1f68>
   137f0:	bl	11710 <__errno_location@plt>
   137f4:	ldr	r5, [r0]
   137f8:	add	r0, r4, #60	; 0x3c
   137fc:	bl	13840 <__assert_fail@plt+0x1fb0>
   13800:	ldr	r0, [r4, #52]	; 0x34
   13804:	cmp	r0, #0
   13808:	beq	13810 <__assert_fail@plt+0x1f80>
   1380c:	bl	157c8 <__assert_fail@plt+0x3f38>
   13810:	mov	r0, r4
   13814:	bl	1387c <__assert_fail@plt+0x1fec>
   13818:	mov	r0, r4
   1381c:	bl	19b78 <__assert_fail@plt+0x82e8>
   13820:	cmp	r5, #0
   13824:	beq	13838 <__assert_fail@plt+0x1fa8>
   13828:	bl	11710 <__errno_location@plt>
   1382c:	str	r5, [r0]
   13830:	mvn	r0, #0
   13834:	pop	{r4, r5, fp, pc}
   13838:	mov	r0, #0
   1383c:	pop	{r4, r5, fp, pc}
   13840:	push	{r4, sl, fp, lr}
   13844:	add	fp, sp, #8
   13848:	mov	r4, r0
   1384c:	b	13854 <__assert_fail@plt+0x1fc4>
   13850:	mov	r0, r4
   13854:	bl	15fc0 <__assert_fail@plt+0x4730>
   13858:	cmp	r0, #0
   1385c:	bne	13878 <__assert_fail@plt+0x1fe8>
   13860:	mov	r0, r4
   13864:	bl	1600c <__assert_fail@plt+0x477c>
   13868:	cmp	r0, #0
   1386c:	bmi	13850 <__assert_fail@plt+0x1fc0>
   13870:	bl	11860 <close@plt>
   13874:	b	13850 <__assert_fail@plt+0x1fc0>
   13878:	pop	{r4, sl, fp, pc}
   1387c:	ldrh	r1, [r0, #48]	; 0x30
   13880:	movw	r2, #258	; 0x102
   13884:	tst	r1, r2
   13888:	beq	1389c <__assert_fail@plt+0x200c>
   1388c:	ldr	r0, [r0, #56]	; 0x38
   13890:	cmp	r0, #0
   13894:	bxeq	lr
   13898:	b	157c8 <__assert_fail@plt+0x3f38>
   1389c:	ldr	r0, [r0, #56]	; 0x38
   138a0:	b	19b78 <__assert_fail@plt+0x82e8>
   138a4:	push	{r4, r5, r6, r7, fp, lr}
   138a8:	add	fp, sp, #16
   138ac:	ldr	r6, [r0]
   138b0:	mov	r5, #0
   138b4:	cmp	r6, #0
   138b8:	beq	13e5c <__assert_fail@plt+0x25cc>
   138bc:	mov	r4, r0
   138c0:	ldr	r1, [r0, #48]	; 0x30
   138c4:	tst	r1, #8192	; 0x2000
   138c8:	bne	13e5c <__assert_fail@plt+0x25cc>
   138cc:	ldrh	r0, [r6, #60]	; 0x3c
   138d0:	mov	r2, #3
   138d4:	strh	r2, [r6, #60]	; 0x3c
   138d8:	cmp	r0, #2
   138dc:	beq	13904 <__assert_fail@plt+0x2074>
   138e0:	cmp	r0, #1
   138e4:	bne	1396c <__assert_fail@plt+0x20dc>
   138e8:	mov	r0, r4
   138ec:	mov	r1, r6
   138f0:	mov	r2, #0
   138f4:	bl	133c8 <__assert_fail@plt+0x1b38>
   138f8:	strh	r0, [r6, #56]	; 0x38
   138fc:	mov	r0, r6
   13900:	pop	{r4, r5, r6, r7, fp, pc}
   13904:	ldrh	r2, [r6, #56]	; 0x38
   13908:	bic	r2, r2, #1
   1390c:	cmp	r2, #12
   13910:	bne	1396c <__assert_fail@plt+0x20dc>
   13914:	mov	r0, r4
   13918:	mov	r1, r6
   1391c:	mov	r2, #1
   13920:	bl	133c8 <__assert_fail@plt+0x1b38>
   13924:	strh	r0, [r6, #56]	; 0x38
   13928:	cmp	r0, #1
   1392c:	bne	13a58 <__assert_fail@plt+0x21c8>
   13930:	ldrb	r0, [r4, #48]	; 0x30
   13934:	tst	r0, #4
   13938:	bne	13a58 <__assert_fail@plt+0x21c8>
   1393c:	movw	r1, #45843	; 0xb313
   13940:	movt	r1, #1
   13944:	mov	r0, r4
   13948:	bl	13698 <__assert_fail@plt+0x1e08>
   1394c:	str	r0, [r6, #36]	; 0x24
   13950:	cmn	r0, #1
   13954:	ble	13c98 <__assert_fail@plt+0x2408>
   13958:	ldrh	r0, [r6, #58]	; 0x3a
   1395c:	orr	r0, r0, #2
   13960:	strh	r0, [r6, #58]	; 0x3a
   13964:	mov	r5, r6
   13968:	b	13d7c <__assert_fail@plt+0x24ec>
   1396c:	ldrh	r2, [r6, #56]	; 0x38
   13970:	cmp	r2, #1
   13974:	bne	139c8 <__assert_fail@plt+0x2138>
   13978:	cmp	r0, #4
   1397c:	bne	13a60 <__assert_fail@plt+0x21d0>
   13980:	ldrb	r0, [r6, #58]	; 0x3a
   13984:	tst	r0, #2
   13988:	beq	13994 <__assert_fail@plt+0x2104>
   1398c:	ldr	r0, [r6, #36]	; 0x24
   13990:	bl	11860 <close@plt>
   13994:	ldr	r0, [r4, #4]
   13998:	cmp	r0, #0
   1399c:	beq	139ac <__assert_fail@plt+0x211c>
   139a0:	bl	136c8 <__assert_fail@plt+0x1e38>
   139a4:	mov	r0, #0
   139a8:	str	r0, [r4, #4]
   139ac:	mov	r0, #6
   139b0:	strh	r0, [r6, #56]	; 0x38
   139b4:	mov	r0, r4
   139b8:	mov	r1, r6
   139bc:	bl	13e68 <__assert_fail@plt+0x25d8>
   139c0:	mov	r0, r6
   139c4:	pop	{r4, r5, r6, r7, fp, pc}
   139c8:	ldr	r5, [r6, #8]
   139cc:	cmp	r5, #0
   139d0:	beq	13af8 <__assert_fail@plt+0x2268>
   139d4:	str	r5, [r4]
   139d8:	mov	r0, r6
   139dc:	bl	19b78 <__assert_fail@plt+0x82e8>
   139e0:	ldr	r0, [r5, #48]	; 0x30
   139e4:	cmp	r0, #0
   139e8:	beq	13b44 <__assert_fail@plt+0x22b4>
   139ec:	ldrh	r0, [r5, #60]	; 0x3c
   139f0:	cmp	r0, #4
   139f4:	mov	r6, r5
   139f8:	beq	139c8 <__assert_fail@plt+0x2138>
   139fc:	cmp	r0, #2
   13a00:	bne	13d40 <__assert_fail@plt+0x24b0>
   13a04:	mov	r0, r4
   13a08:	mov	r1, r5
   13a0c:	mov	r2, #1
   13a10:	bl	133c8 <__assert_fail@plt+0x1b38>
   13a14:	strh	r0, [r5, #56]	; 0x38
   13a18:	cmp	r0, #1
   13a1c:	bne	13d38 <__assert_fail@plt+0x24a8>
   13a20:	ldrb	r0, [r4, #48]	; 0x30
   13a24:	tst	r0, #4
   13a28:	bne	13d38 <__assert_fail@plt+0x24a8>
   13a2c:	movw	r1, #45843	; 0xb313
   13a30:	movt	r1, #1
   13a34:	mov	r0, r4
   13a38:	bl	13698 <__assert_fail@plt+0x1e08>
   13a3c:	str	r0, [r5, #36]	; 0x24
   13a40:	cmn	r0, #1
   13a44:	ble	13d24 <__assert_fail@plt+0x2494>
   13a48:	ldrh	r0, [r5, #58]	; 0x3a
   13a4c:	orr	r0, r0, #2
   13a50:	strh	r0, [r5, #58]	; 0x3a
   13a54:	b	13d38 <__assert_fail@plt+0x24a8>
   13a58:	mov	r5, r6
   13a5c:	b	13d7c <__assert_fail@plt+0x24ec>
   13a60:	tst	r1, #64	; 0x40
   13a64:	beq	13a88 <__assert_fail@plt+0x21f8>
   13a68:	ldr	r0, [r4, #16]
   13a6c:	ldr	r3, [r4, #20]
   13a70:	ldr	r2, [r6, #64]	; 0x40
   13a74:	ldr	r5, [r6, #68]	; 0x44
   13a78:	eor	r3, r5, r3
   13a7c:	eor	r0, r2, r0
   13a80:	orrs	r0, r0, r3
   13a84:	bne	13980 <__assert_fail@plt+0x20f0>
   13a88:	ldr	r0, [r4, #4]
   13a8c:	cmp	r0, #0
   13a90:	beq	13b98 <__assert_fail@plt+0x2308>
   13a94:	tst	r1, #4096	; 0x1000
   13a98:	bne	13b84 <__assert_fail@plt+0x22f4>
   13a9c:	ldr	r3, [r6, #24]
   13aa0:	mov	r0, r4
   13aa4:	mov	r1, r6
   13aa8:	mvn	r2, #0
   13aac:	bl	13f44 <__assert_fail@plt+0x26b4>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13bb0 <__assert_fail@plt+0x2320>
   13ab8:	bl	11710 <__errno_location@plt>
   13abc:	ldr	r0, [r0]
   13ac0:	str	r0, [r6, #32]
   13ac4:	ldrh	r0, [r6, #58]	; 0x3a
   13ac8:	orr	r0, r0, #1
   13acc:	strh	r0, [r6, #58]	; 0x3a
   13ad0:	ldr	r0, [r4, #4]
   13ad4:	cmp	r0, #0
   13ad8:	beq	13bb0 <__assert_fail@plt+0x2320>
   13adc:	ldmib	r0, {r1, r2}
   13ae0:	ldr	r1, [r1, #24]
   13ae4:	str	r1, [r0, #24]
   13ae8:	cmp	r2, #0
   13aec:	mov	r0, r2
   13af0:	bne	13adc <__assert_fail@plt+0x224c>
   13af4:	b	13bb0 <__assert_fail@plt+0x2320>
   13af8:	ldr	r0, [r6, #4]
   13afc:	ldr	r1, [r0, #12]
   13b00:	cmp	r1, #0
   13b04:	beq	13bfc <__assert_fail@plt+0x236c>
   13b08:	str	r0, [r4]
   13b0c:	ldr	r1, [r4, #24]
   13b10:	ldr	r0, [r0, #40]	; 0x28
   13b14:	mov	r5, #0
   13b18:	strb	r5, [r1, r0]
   13b1c:	mov	r0, r4
   13b20:	mov	r1, #3
   13b24:	bl	1412c <__assert_fail@plt+0x289c>
   13b28:	cmp	r0, #0
   13b2c:	beq	13bf0 <__assert_fail@plt+0x2360>
   13b30:	mov	r7, r0
   13b34:	mov	r0, r6
   13b38:	bl	19b78 <__assert_fail@plt+0x82e8>
   13b3c:	mov	r5, r7
   13b40:	b	13d40 <__assert_fail@plt+0x24b0>
   13b44:	mov	r0, r4
   13b48:	bl	14948 <__assert_fail@plt+0x30b8>
   13b4c:	cmp	r0, #0
   13b50:	beq	13b64 <__assert_fail@plt+0x22d4>
   13b54:	ldr	r0, [r4, #48]	; 0x30
   13b58:	orr	r0, r0, #8192	; 0x2000
   13b5c:	str	r0, [r4, #48]	; 0x30
   13b60:	b	13e00 <__assert_fail@plt+0x2570>
   13b64:	mov	r0, r4
   13b68:	bl	1387c <__assert_fail@plt+0x1fec>
   13b6c:	mov	r0, r4
   13b70:	mov	r1, r5
   13b74:	bl	149a4 <__assert_fail@plt+0x3114>
   13b78:	mov	r0, r4
   13b7c:	bl	1360c <__assert_fail@plt+0x1d7c>
   13b80:	b	13d7c <__assert_fail@plt+0x24ec>
   13b84:	bic	r1, r1, #4096	; 0x1000
   13b88:	str	r1, [r4, #48]	; 0x30
   13b8c:	bl	136c8 <__assert_fail@plt+0x1e38>
   13b90:	mov	r0, #0
   13b94:	str	r0, [r4, #4]
   13b98:	mov	r0, r4
   13b9c:	mov	r1, #3
   13ba0:	bl	1412c <__assert_fail@plt+0x289c>
   13ba4:	str	r0, [r4, #4]
   13ba8:	cmp	r0, #0
   13bac:	beq	13bc0 <__assert_fail@plt+0x2330>
   13bb0:	ldr	r5, [r4, #4]
   13bb4:	mov	r0, #0
   13bb8:	str	r0, [r4, #4]
   13bbc:	b	13d40 <__assert_fail@plt+0x24b0>
   13bc0:	ldrb	r0, [r4, #49]	; 0x31
   13bc4:	tst	r0, #32
   13bc8:	mov	r5, #0
   13bcc:	bne	13e5c <__assert_fail@plt+0x25cc>
   13bd0:	ldr	r0, [r6, #32]
   13bd4:	cmp	r0, #0
   13bd8:	beq	139b4 <__assert_fail@plt+0x2124>
   13bdc:	ldrh	r0, [r6, #56]	; 0x38
   13be0:	cmp	r0, #4
   13be4:	beq	139b4 <__assert_fail@plt+0x2124>
   13be8:	mov	r0, #7
   13bec:	b	139b0 <__assert_fail@plt+0x2120>
   13bf0:	ldrb	r0, [r4, #49]	; 0x31
   13bf4:	tst	r0, #32
   13bf8:	bne	13e5c <__assert_fail@plt+0x25cc>
   13bfc:	ldr	r5, [r6, #4]
   13c00:	str	r5, [r4]
   13c04:	mov	r0, r6
   13c08:	bl	19b78 <__assert_fail@plt+0x82e8>
   13c0c:	ldr	r0, [r5, #48]	; 0x30
   13c10:	cmn	r0, #1
   13c14:	beq	13c78 <__assert_fail@plt+0x23e8>
   13c18:	ldrh	r0, [r5, #56]	; 0x38
   13c1c:	cmp	r0, #11
   13c20:	beq	13e64 <__assert_fail@plt+0x25d4>
   13c24:	ldr	r0, [r5, #40]	; 0x28
   13c28:	ldr	r1, [r4, #24]
   13c2c:	mov	r2, #0
   13c30:	strb	r2, [r1, r0]
   13c34:	ldr	r0, [r5, #48]	; 0x30
   13c38:	cmp	r0, #0
   13c3c:	beq	13cb4 <__assert_fail@plt+0x2424>
   13c40:	ldrh	r0, [r5, #58]	; 0x3a
   13c44:	tst	r0, #2
   13c48:	bne	13ce0 <__assert_fail@plt+0x2450>
   13c4c:	tst	r0, #1
   13c50:	bne	13e20 <__assert_fail@plt+0x2590>
   13c54:	ldr	r1, [r5, #4]
   13c58:	movw	r3, #45842	; 0xb312
   13c5c:	movt	r3, #1
   13c60:	mov	r0, r4
   13c64:	mvn	r2, #0
   13c68:	bl	13f44 <__assert_fail@plt+0x26b4>
   13c6c:	cmp	r0, #0
   13c70:	bne	13cc4 <__assert_fail@plt+0x2434>
   13c74:	b	13e20 <__assert_fail@plt+0x2590>
   13c78:	mov	r0, r5
   13c7c:	bl	19b78 <__assert_fail@plt+0x82e8>
   13c80:	bl	11710 <__errno_location@plt>
   13c84:	mov	r5, #0
   13c88:	str	r5, [r0]
   13c8c:	str	r5, [r4]
   13c90:	mov	r0, r5
   13c94:	pop	{r4, r5, r6, r7, fp, pc}
   13c98:	bl	11710 <__errno_location@plt>
   13c9c:	ldr	r0, [r0]
   13ca0:	mov	r1, #7
   13ca4:	strh	r1, [r6, #56]	; 0x38
   13ca8:	str	r0, [r6, #32]
   13cac:	mov	r5, r6
   13cb0:	b	13d7c <__assert_fail@plt+0x24ec>
   13cb4:	mov	r0, r4
   13cb8:	bl	14948 <__assert_fail@plt+0x30b8>
   13cbc:	cmp	r0, #0
   13cc0:	beq	13e20 <__assert_fail@plt+0x2590>
   13cc4:	bl	11710 <__errno_location@plt>
   13cc8:	ldr	r0, [r0]
   13ccc:	str	r0, [r5, #32]
   13cd0:	ldr	r0, [r4, #48]	; 0x30
   13cd4:	orr	r0, r0, #8192	; 0x2000
   13cd8:	str	r0, [r4, #48]	; 0x30
   13cdc:	b	13e20 <__assert_fail@plt+0x2590>
   13ce0:	ldr	r0, [r4, #48]	; 0x30
   13ce4:	tst	r0, #4
   13ce8:	bne	13e18 <__assert_fail@plt+0x2588>
   13cec:	ldr	r1, [r5, #36]	; 0x24
   13cf0:	tst	r0, #512	; 0x200
   13cf4:	bne	13e0c <__assert_fail@plt+0x257c>
   13cf8:	mov	r0, r1
   13cfc:	bl	117f4 <fchdir@plt>
   13d00:	cmp	r0, #0
   13d04:	beq	13e18 <__assert_fail@plt+0x2588>
   13d08:	bl	11710 <__errno_location@plt>
   13d0c:	ldr	r0, [r0]
   13d10:	str	r0, [r5, #32]
   13d14:	ldr	r0, [r4, #48]	; 0x30
   13d18:	orr	r0, r0, #8192	; 0x2000
   13d1c:	str	r0, [r4, #48]	; 0x30
   13d20:	b	13e18 <__assert_fail@plt+0x2588>
   13d24:	bl	11710 <__errno_location@plt>
   13d28:	ldr	r0, [r0]
   13d2c:	mov	r1, #7
   13d30:	strh	r1, [r5, #56]	; 0x38
   13d34:	str	r0, [r5, #32]
   13d38:	mov	r0, #3
   13d3c:	strh	r0, [r5, #60]	; 0x3c
   13d40:	ldr	r0, [r5, #4]
   13d44:	ldr	r1, [r0, #28]
   13d48:	ldr	r0, [r0, #40]	; 0x28
   13d4c:	sub	r2, r0, #1
   13d50:	ldrb	r1, [r1, r2]
   13d54:	cmp	r1, #47	; 0x2f
   13d58:	moveq	r0, r2
   13d5c:	ldr	r1, [r4, #24]
   13d60:	mov	r2, #47	; 0x2f
   13d64:	strb	r2, [r1, r0]!
   13d68:	add	r0, r1, #1
   13d6c:	add	r1, r5, #168	; 0xa8
   13d70:	ldr	r2, [r5, #52]	; 0x34
   13d74:	add	r2, r2, #1
   13d78:	bl	11518 <memmove@plt>
   13d7c:	str	r5, [r4]
   13d80:	ldrh	r0, [r5, #56]	; 0x38
   13d84:	cmp	r0, #11
   13d88:	bne	13dc0 <__assert_fail@plt+0x2530>
   13d8c:	add	r0, r5, #112	; 0x70
   13d90:	ldrd	r0, [r0]
   13d94:	eor	r2, r0, #1
   13d98:	orrs	r2, r2, r1
   13d9c:	beq	13e5c <__assert_fail@plt+0x25cc>
   13da0:	eor	r0, r0, #2
   13da4:	orrs	r0, r0, r1
   13da8:	bne	13e64 <__assert_fail@plt+0x25d4>
   13dac:	mov	r0, r4
   13db0:	mov	r1, r5
   13db4:	mov	r2, #0
   13db8:	bl	133c8 <__assert_fail@plt+0x1b38>
   13dbc:	strh	r0, [r5, #56]	; 0x38
   13dc0:	cmp	r0, #1
   13dc4:	bne	13e5c <__assert_fail@plt+0x25cc>
   13dc8:	ldr	r0, [r5, #48]	; 0x30
   13dcc:	cmp	r0, #0
   13dd0:	bne	13de0 <__assert_fail@plt+0x2550>
   13dd4:	add	r0, r5, #64	; 0x40
   13dd8:	ldrd	r0, [r0]
   13ddc:	strd	r0, [r4, #16]
   13de0:	mov	r0, r4
   13de4:	mov	r1, r5
   13de8:	bl	14a2c <__assert_fail@plt+0x319c>
   13dec:	cmp	r0, #0
   13df0:	bne	13e5c <__assert_fail@plt+0x25cc>
   13df4:	bl	11710 <__errno_location@plt>
   13df8:	mov	r1, #12
   13dfc:	str	r1, [r0]
   13e00:	mov	r5, #0
   13e04:	mov	r0, r5
   13e08:	pop	{r4, r5, r6, r7, fp, pc}
   13e0c:	mov	r0, r4
   13e10:	mov	r2, #1
   13e14:	bl	14aec <__assert_fail@plt+0x325c>
   13e18:	ldr	r0, [r5, #36]	; 0x24
   13e1c:	bl	11860 <close@plt>
   13e20:	ldrh	r0, [r5, #56]	; 0x38
   13e24:	cmp	r0, #2
   13e28:	beq	13e50 <__assert_fail@plt+0x25c0>
   13e2c:	ldr	r0, [r5, #32]
   13e30:	mov	r1, #7
   13e34:	cmp	r0, #0
   13e38:	movweq	r1, #6
   13e3c:	strh	r1, [r5, #56]	; 0x38
   13e40:	bne	13e50 <__assert_fail@plt+0x25c0>
   13e44:	mov	r0, r4
   13e48:	mov	r1, r5
   13e4c:	bl	13e68 <__assert_fail@plt+0x25d8>
   13e50:	ldrb	r0, [r4, #49]	; 0x31
   13e54:	tst	r0, #32
   13e58:	movne	r5, #0
   13e5c:	mov	r0, r5
   13e60:	pop	{r4, r5, r6, r7, fp, pc}
   13e64:	bl	11854 <abort@plt>
   13e68:	push	{r4, r5, r7, sl, fp, lr}
   13e6c:	add	fp, sp, #16
   13e70:	sub	sp, sp, #24
   13e74:	add	lr, r1, #64	; 0x40
   13e78:	add	r4, r1, #160	; 0xa0
   13e7c:	ldrh	r2, [r0, #48]	; 0x30
   13e80:	movw	r3, #258	; 0x102
   13e84:	tst	r2, r3
   13e88:	beq	13ec0 <__assert_fail@plt+0x2630>
   13e8c:	ldrd	r2, [lr]
   13e90:	stm	sp, {r2, r3}
   13e94:	ldrd	r2, [r4]
   13e98:	str	r3, [sp, #12]
   13e9c:	str	r2, [sp, #8]
   13ea0:	ldr	r0, [r0, #56]	; 0x38
   13ea4:	mov	r1, sp
   13ea8:	bl	15dc8 <__assert_fail@plt+0x4538>
   13eac:	cmp	r0, #0
   13eb0:	beq	13f40 <__assert_fail@plt+0x26b0>
   13eb4:	bl	19b78 <__assert_fail@plt+0x82e8>
   13eb8:	sub	sp, fp, #16
   13ebc:	pop	{r4, r5, r7, sl, fp, pc}
   13ec0:	ldr	r1, [r1, #4]
   13ec4:	cmp	r1, #0
   13ec8:	beq	13f38 <__assert_fail@plt+0x26a8>
   13ecc:	ldr	r2, [r1, #48]	; 0x30
   13ed0:	cmp	r2, #0
   13ed4:	bmi	13f38 <__assert_fail@plt+0x26a8>
   13ed8:	ldr	ip, [r0, #56]	; 0x38
   13edc:	ldrd	r2, [ip, #16]
   13ee0:	orrs	r2, r2, r3
   13ee4:	beq	13f40 <__assert_fail@plt+0x26b0>
   13ee8:	ldrd	r2, [r4]
   13eec:	ldrd	r4, [ip]
   13ef0:	eor	r3, r5, r3
   13ef4:	eor	r2, r4, r2
   13ef8:	orrs	r2, r2, r3
   13efc:	bne	13f38 <__assert_fail@plt+0x26a8>
   13f00:	add	r3, ip, #8
   13f04:	ldm	lr, {r2, r5}
   13f08:	ldm	r3, {r4, r7}
   13f0c:	eor	r7, r7, r5
   13f10:	eor	r2, r4, r2
   13f14:	orrs	r2, r2, r7
   13f18:	bne	13f38 <__assert_fail@plt+0x26a8>
   13f1c:	add	r2, r1, #64	; 0x40
   13f20:	add	r1, r1, #160	; 0xa0
   13f24:	ldm	r2, {r2, r5}
   13f28:	stm	r3, {r2, r5}
   13f2c:	ldr	r0, [r0, #56]	; 0x38
   13f30:	ldrd	r2, [r1]
   13f34:	strd	r2, [r0]
   13f38:	sub	sp, fp, #16
   13f3c:	pop	{r4, r5, r7, sl, fp, pc}
   13f40:	bl	11854 <abort@plt>
   13f44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f48:	add	fp, sp, #24
   13f4c:	sub	sp, sp, #104	; 0x68
   13f50:	mov	r7, r3
   13f54:	mov	r4, r2
   13f58:	mov	r8, r1
   13f5c:	mov	r5, r0
   13f60:	cmp	r3, #0
   13f64:	beq	13f88 <__assert_fail@plt+0x26f8>
   13f68:	movw	r1, #45842	; 0xb312
   13f6c:	movt	r1, #1
   13f70:	mov	r0, r7
   13f74:	bl	114f4 <strcmp@plt>
   13f78:	mov	r6, r0
   13f7c:	cmp	r0, #0
   13f80:	movwne	r6, #1
   13f84:	b	13f8c <__assert_fail@plt+0x26fc>
   13f88:	mov	r6, #1
   13f8c:	ldr	r0, [r5, #48]	; 0x30
   13f90:	tst	r0, #4
   13f94:	bne	13fec <__assert_fail@plt+0x275c>
   13f98:	mov	r9, #0
   13f9c:	cmn	r4, #1
   13fa0:	mov	r1, #0
   13fa4:	movwgt	r1, #1
   13fa8:	orrs	r1, r1, r6
   13fac:	bne	1400c <__assert_fail@plt+0x277c>
   13fb0:	ands	r0, r0, #512	; 0x200
   13fb4:	beq	1400c <__assert_fail@plt+0x277c>
   13fb8:	add	r4, r5, #60	; 0x3c
   13fbc:	mov	r0, r4
   13fc0:	bl	15fc0 <__assert_fail@plt+0x4730>
   13fc4:	cmp	r0, #0
   13fc8:	bne	14014 <__assert_fail@plt+0x2784>
   13fcc:	mov	r0, r4
   13fd0:	bl	1600c <__assert_fail@plt+0x477c>
   13fd4:	cmn	r0, #1
   13fd8:	ble	14014 <__assert_fail@plt+0x2784>
   13fdc:	mov	r4, r0
   13fe0:	mov	r9, #0
   13fe4:	mov	r7, #0
   13fe8:	b	14030 <__assert_fail@plt+0x27a0>
   13fec:	mov	r5, #0
   13ff0:	cmp	r4, #0
   13ff4:	bmi	14120 <__assert_fail@plt+0x2890>
   13ff8:	ands	r0, r0, #512	; 0x200
   13ffc:	beq	14120 <__assert_fail@plt+0x2890>
   14000:	mov	r0, r4
   14004:	bl	11860 <close@plt>
   14008:	b	14120 <__assert_fail@plt+0x2890>
   1400c:	cmn	r4, #1
   14010:	bgt	14030 <__assert_fail@plt+0x27a0>
   14014:	mov	r0, r5
   14018:	mov	r1, r7
   1401c:	bl	13698 <__assert_fail@plt+0x1e08>
   14020:	cmp	r0, #0
   14024:	bmi	140d0 <__assert_fail@plt+0x2840>
   14028:	mov	r4, r0
   1402c:	mov	r9, #1
   14030:	ldrb	r0, [r5, #48]	; 0x30
   14034:	tst	r0, #2
   14038:	bne	1405c <__assert_fail@plt+0x27cc>
   1403c:	cmp	r7, #0
   14040:	beq	140ac <__assert_fail@plt+0x281c>
   14044:	movw	r1, #45842	; 0xb312
   14048:	movt	r1, #1
   1404c:	mov	r0, r7
   14050:	bl	114f4 <strcmp@plt>
   14054:	cmp	r0, #0
   14058:	bne	140ac <__assert_fail@plt+0x281c>
   1405c:	mov	r1, sp
   14060:	mov	r0, r4
   14064:	bl	1a4ec <__assert_fail@plt+0x8c5c>
   14068:	cmp	r0, #0
   1406c:	bne	140fc <__assert_fail@plt+0x286c>
   14070:	add	r0, r8, #64	; 0x40
   14074:	ldrd	r0, [r0]
   14078:	ldm	sp, {r2, r3}
   1407c:	eor	r1, r1, r3
   14080:	eor	r0, r0, r2
   14084:	orrs	r0, r0, r1
   14088:	bne	140f0 <__assert_fail@plt+0x2860>
   1408c:	add	r0, r8, #160	; 0xa0
   14090:	ldrd	r0, [r0]
   14094:	ldr	r2, [sp, #96]	; 0x60
   14098:	ldr	r3, [sp, #100]	; 0x64
   1409c:	eor	r1, r1, r3
   140a0:	eor	r0, r0, r2
   140a4:	orrs	r0, r0, r1
   140a8:	bne	140f0 <__assert_fail@plt+0x2860>
   140ac:	ldrb	r0, [r5, #49]	; 0x31
   140b0:	tst	r0, #2
   140b4:	bne	140d8 <__assert_fail@plt+0x2848>
   140b8:	mov	r0, r4
   140bc:	bl	117f4 <fchdir@plt>
   140c0:	mov	r5, r0
   140c4:	cmp	r9, #0
   140c8:	bne	14108 <__assert_fail@plt+0x2878>
   140cc:	b	14120 <__assert_fail@plt+0x2890>
   140d0:	mvn	r5, #0
   140d4:	b	14120 <__assert_fail@plt+0x2890>
   140d8:	mov	r0, r5
   140dc:	mov	r1, r4
   140e0:	mov	r2, r6
   140e4:	bl	14aec <__assert_fail@plt+0x325c>
   140e8:	mov	r5, #0
   140ec:	b	14120 <__assert_fail@plt+0x2890>
   140f0:	bl	11710 <__errno_location@plt>
   140f4:	mov	r1, #2
   140f8:	str	r1, [r0]
   140fc:	mvn	r5, #0
   14100:	cmp	r9, #0
   14104:	beq	14120 <__assert_fail@plt+0x2890>
   14108:	bl	11710 <__errno_location@plt>
   1410c:	mov	r6, r0
   14110:	ldr	r7, [r0]
   14114:	mov	r0, r4
   14118:	bl	11860 <close@plt>
   1411c:	str	r7, [r6]
   14120:	mov	r0, r5
   14124:	sub	sp, fp, #24
   14128:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1412c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14130:	add	fp, sp, #28
   14134:	sub	sp, sp, #68	; 0x44
   14138:	mov	r4, r1
   1413c:	mov	r6, r0
   14140:	ldr	sl, [r0]
   14144:	ldr	r7, [sl, #12]
   14148:	cmp	r7, #0
   1414c:	beq	144a8 <__assert_fail@plt+0x2c18>
   14150:	mov	r0, r7
   14154:	bl	117e8 <dirfd@plt>
   14158:	str	r0, [fp, #-32]	; 0xffffffe0
   1415c:	cmn	r0, #1
   14160:	ble	144dc <__assert_fail@plt+0x2c4c>
   14164:	mov	r1, r6
   14168:	ldr	r0, [r1, #44]!	; 0x2c
   1416c:	str	r1, [fp, #-40]	; 0xffffffd8
   14170:	mvn	r1, #0
   14174:	cmp	r0, #0
   14178:	movweq	r1, #34464	; 0x86a0
   1417c:	movteq	r1, #1
   14180:	str	r1, [sp, #28]
   14184:	mov	r0, #1
   14188:	str	r0, [sp, #4]
   1418c:	str	r4, [sp, #8]
   14190:	ldr	r1, [sl, #28]
   14194:	ldr	r0, [sl, #40]	; 0x28
   14198:	sub	r2, r0, #1
   1419c:	ldrb	r1, [r1, r2]
   141a0:	cmp	r1, #47	; 0x2f
   141a4:	moveq	r0, r2
   141a8:	ldrb	r1, [r6, #48]	; 0x30
   141ac:	mov	r9, #0
   141b0:	tst	r1, #4
   141b4:	mov	r1, #0
   141b8:	str	r1, [sp, #44]	; 0x2c
   141bc:	beq	141d4 <__assert_fail@plt+0x2944>
   141c0:	ldr	r1, [r6, #24]
   141c4:	mov	r2, #47	; 0x2f
   141c8:	strb	r2, [r1, r0]!
   141cc:	add	r1, r1, #1
   141d0:	str	r1, [sp, #44]	; 0x2c
   141d4:	add	r1, r0, #1
   141d8:	ldr	r4, [sl, #12]
   141dc:	cmp	r4, #0
   141e0:	str	r1, [fp, #-36]	; 0xffffffdc
   141e4:	str	r7, [sp, #12]
   141e8:	beq	144f8 <__assert_fail@plt+0x2c68>
   141ec:	ldr	r0, [sl, #48]	; 0x30
   141f0:	add	r0, r0, #1
   141f4:	str	r0, [sp, #24]
   141f8:	str	r6, [sp, #36]	; 0x24
   141fc:	ldr	r0, [r6, #36]	; 0x24
   14200:	sub	r0, r0, r1
   14204:	str	r0, [sp, #48]	; 0x30
   14208:	mov	r6, #0
   1420c:	bl	11710 <__errno_location@plt>
   14210:	str	r0, [sp, #40]	; 0x28
   14214:	mov	r9, #0
   14218:	mov	r7, #0
   1421c:	mov	r0, #0
   14220:	str	r0, [fp, #-44]	; 0xffffffd4
   14224:	mov	r0, #0
   14228:	str	r0, [sp, #20]
   1422c:	mov	r0, #0
   14230:	str	r0, [sp, #16]
   14234:	str	sl, [sp, #32]
   14238:	ldr	r0, [sp, #40]	; 0x28
   1423c:	str	r6, [r0]
   14240:	mov	r0, r4
   14244:	bl	117d0 <readdir64@plt>
   14248:	cmp	r0, #0
   1424c:	beq	14728 <__assert_fail@plt+0x2e98>
   14250:	mov	r8, r0
   14254:	mov	r5, r9
   14258:	ldr	r6, [sp, #36]	; 0x24
   1425c:	ldrb	r0, [r6, #48]	; 0x30
   14260:	tst	r0, #32
   14264:	bne	14294 <__assert_fail@plt+0x2a04>
   14268:	ldrb	r0, [r8, #19]
   1426c:	cmp	r0, #46	; 0x2e
   14270:	bne	14294 <__assert_fail@plt+0x2a04>
   14274:	ldrb	r0, [r8, #20]
   14278:	cmp	r0, #0
   1427c:	beq	14498 <__assert_fail@plt+0x2c08>
   14280:	cmp	r0, #46	; 0x2e
   14284:	bne	14294 <__assert_fail@plt+0x2a04>
   14288:	ldrb	r0, [r8, #21]
   1428c:	cmp	r0, #0
   14290:	beq	14498 <__assert_fail@plt+0x2c08>
   14294:	add	r4, r8, #19
   14298:	mov	r0, r4
   1429c:	bl	116ec <strlen@plt>
   142a0:	mov	sl, r0
   142a4:	mov	r0, r6
   142a8:	mov	r1, r4
   142ac:	mov	r2, sl
   142b0:	bl	13314 <__assert_fail@plt+0x1a84>
   142b4:	mov	r9, r0
   142b8:	cmp	r0, #0
   142bc:	beq	1450c <__assert_fail@plt+0x2c7c>
   142c0:	ldr	r0, [sp, #48]	; 0x30
   142c4:	cmp	sl, r0
   142c8:	bcs	142dc <__assert_fail@plt+0x2a4c>
   142cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   142d0:	adds	r0, sl, r2
   142d4:	bcc	14344 <__assert_fail@plt+0x2ab4>
   142d8:	b	14784 <__assert_fail@plt+0x2ef4>
   142dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   142e0:	add	r0, sl, r0
   142e4:	add	r1, r0, #1
   142e8:	ldr	r4, [r6, #24]
   142ec:	mov	r0, r6
   142f0:	bl	13298 <__assert_fail@plt+0x1a08>
   142f4:	cmp	r0, #0
   142f8:	beq	1450c <__assert_fail@plt+0x2c7c>
   142fc:	ldr	r0, [r6, #24]
   14300:	cmp	r4, r0
   14304:	beq	1432c <__assert_fail@plt+0x2a9c>
   14308:	ldrb	r1, [r6, #48]	; 0x30
   1430c:	tst	r1, #4
   14310:	ldr	r1, [sp, #44]	; 0x2c
   14314:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14318:	addne	r1, r0, r2
   1431c:	str	r1, [sp, #44]	; 0x2c
   14320:	mov	r0, #1
   14324:	str	r0, [sp, #16]
   14328:	b	14330 <__assert_fail@plt+0x2aa0>
   1432c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14330:	ldr	r0, [r6, #36]	; 0x24
   14334:	sub	r0, r0, r2
   14338:	str	r0, [sp, #48]	; 0x30
   1433c:	adds	r0, sl, r2
   14340:	bcs	14784 <__assert_fail@plt+0x2ef4>
   14344:	ldr	r1, [sp, #24]
   14348:	str	r1, [r9, #48]	; 0x30
   1434c:	ldr	r1, [r6]
   14350:	str	r0, [r9, #40]	; 0x28
   14354:	str	r1, [r9, #4]
   14358:	ldrd	r0, [r8]
   1435c:	strd	r0, [r9, #160]	; 0xa0
   14360:	ldrb	r0, [r6, #48]	; 0x30
   14364:	tst	r0, #4
   14368:	bne	14378 <__assert_fail@plt+0x2ae8>
   1436c:	add	r0, r9, #168	; 0xa8
   14370:	str	r0, [r9, #24]
   14374:	b	14394 <__assert_fail@plt+0x2b04>
   14378:	ldr	r0, [r9, #28]
   1437c:	ldr	r2, [r9, #52]	; 0x34
   14380:	str	r0, [r9, #24]
   14384:	add	r1, r9, #168	; 0xa8
   14388:	add	r2, r2, #1
   1438c:	ldr	r0, [sp, #44]	; 0x2c
   14390:	bl	11518 <memmove@plt>
   14394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14398:	ldr	r0, [r0]
   1439c:	cmp	r0, #0
   143a0:	beq	143cc <__assert_fail@plt+0x2b3c>
   143a4:	ldrb	r0, [r6, #49]	; 0x31
   143a8:	tst	r0, #4
   143ac:	bne	143cc <__assert_fail@plt+0x2b3c>
   143b0:	mov	r0, r6
   143b4:	mov	r1, r9
   143b8:	mov	r2, #0
   143bc:	bl	133c8 <__assert_fail@plt+0x1b38>
   143c0:	strh	r0, [r9, #56]	; 0x38
   143c4:	ldr	sl, [sp, #32]
   143c8:	b	14428 <__assert_fail@plt+0x2b98>
   143cc:	add	r0, r9, #64	; 0x40
   143d0:	ldr	r1, [r6, #48]	; 0x30
   143d4:	mov	r4, #0
   143d8:	tst	r1, #8
   143dc:	bne	143e8 <__assert_fail@plt+0x2b58>
   143e0:	ldr	sl, [sp, #32]
   143e4:	b	1440c <__assert_fail@plt+0x2b7c>
   143e8:	ldrb	r2, [r8, #18]
   143ec:	orr	r3, r2, #4
   143f0:	cmp	r3, #4
   143f4:	ldr	sl, [sp, #32]
   143f8:	beq	1440c <__assert_fail@plt+0x2b7c>
   143fc:	eor	r2, r2, #10
   14400:	and	r1, r1, #16
   14404:	orrs	r4, r1, r2
   14408:	movwne	r4, #1
   1440c:	mov	r1, #11
   14410:	strh	r1, [r9, #56]	; 0x38
   14414:	ldrb	r1, [r8, #18]
   14418:	bl	14dbc <__assert_fail@plt+0x352c>
   1441c:	eor	r1, r4, #1
   14420:	mov	r0, r9
   14424:	bl	13398 <__assert_fail@plt+0x1b08>
   14428:	mov	r6, #0
   1442c:	str	r6, [r9, #8]
   14430:	cmp	r5, #0
   14434:	mov	r4, r9
   14438:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   1443c:	strne	r9, [r0, #8]
   14440:	movne	r4, r5
   14444:	movw	r0, #10000	; 0x2710
   14448:	cmp	r7, r0
   1444c:	bne	14470 <__assert_fail@plt+0x2be0>
   14450:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14454:	ldr	r0, [r0]
   14458:	cmp	r0, #0
   1445c:	bne	14470 <__assert_fail@plt+0x2be0>
   14460:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14464:	mov	r0, sl
   14468:	bl	14de0 <__assert_fail@plt+0x3550>
   1446c:	str	r0, [sp, #20]
   14470:	add	r7, r7, #1
   14474:	ldr	r0, [sp, #28]
   14478:	cmp	r0, r7
   1447c:	bls	147cc <__assert_fail@plt+0x2f3c>
   14480:	str	r9, [fp, #-44]	; 0xffffffd4
   14484:	mov	r9, r4
   14488:	ldr	r4, [sl, #12]
   1448c:	cmp	r4, #0
   14490:	bne	14238 <__assert_fail@plt+0x29a8>
   14494:	b	14778 <__assert_fail@plt+0x2ee8>
   14498:	ldr	sl, [sp, #32]
   1449c:	mov	r9, r5
   144a0:	mov	r6, #0
   144a4:	b	14488 <__assert_fail@plt+0x2bf8>
   144a8:	ldr	r3, [r6, #48]	; 0x30
   144ac:	and	r1, r3, #516	; 0x204
   144b0:	mvn	r0, #99	; 0x63
   144b4:	cmp	r1, #512	; 0x200
   144b8:	ldreq	r0, [r6, #32]
   144bc:	ldr	r1, [sl, #24]
   144c0:	mov	r2, #0
   144c4:	tst	r3, #16
   144c8:	beq	14560 <__assert_fail@plt+0x2cd0>
   144cc:	tst	r3, #1
   144d0:	bne	14554 <__assert_fail@plt+0x2cc4>
   144d4:	mov	r2, #32768	; 0x8000
   144d8:	b	14560 <__assert_fail@plt+0x2cd0>
   144dc:	ldr	r0, [sl, #12]
   144e0:	bl	11878 <closedir@plt>
   144e4:	mov	r9, #0
   144e8:	str	r9, [sl, #12]
   144ec:	cmp	r4, #3
   144f0:	beq	145a4 <__assert_fail@plt+0x2d14>
   144f4:	b	1493c <__assert_fail@plt+0x30ac>
   144f8:	mov	r7, #0
   144fc:	mov	r0, #0
   14500:	str	r0, [sp, #20]
   14504:	ldr	r4, [sp, #8]
   14508:	b	147ec <__assert_fail@plt+0x2f5c>
   1450c:	ldr	r7, [sp, #40]	; 0x28
   14510:	ldr	r4, [r7]
   14514:	mov	r0, r9
   14518:	bl	19b78 <__assert_fail@plt+0x82e8>
   1451c:	mov	r0, r5
   14520:	bl	136c8 <__assert_fail@plt+0x1e38>
   14524:	ldr	r5, [sp, #32]
   14528:	ldr	r0, [r5, #12]
   1452c:	bl	11878 <closedir@plt>
   14530:	mov	r0, #7
   14534:	strh	r0, [r5, #56]	; 0x38
   14538:	mov	r9, #0
   1453c:	str	r9, [r5, #12]
   14540:	ldr	r0, [r6, #48]	; 0x30
   14544:	orr	r0, r0, #8192	; 0x2000
   14548:	str	r0, [r6, #48]	; 0x30
   1454c:	str	r4, [r7]
   14550:	b	1493c <__assert_fail@plt+0x30ac>
   14554:	ldr	r3, [sl, #48]	; 0x30
   14558:	cmp	r3, #0
   1455c:	movne	r2, #32768	; 0x8000
   14560:	sub	r3, fp, #32
   14564:	bl	16094 <__assert_fail@plt+0x4804>
   14568:	str	r0, [sl, #12]
   1456c:	cmp	r0, #0
   14570:	beq	14598 <__assert_fail@plt+0x2d08>
   14574:	ldrh	r0, [sl, #56]	; 0x38
   14578:	cmp	r0, #11
   1457c:	bne	145bc <__assert_fail@plt+0x2d2c>
   14580:	mov	r0, r6
   14584:	mov	r1, sl
   14588:	mov	r2, #0
   1458c:	bl	133c8 <__assert_fail@plt+0x1b38>
   14590:	strh	r0, [sl, #56]	; 0x38
   14594:	b	145fc <__assert_fail@plt+0x2d6c>
   14598:	mov	r9, #0
   1459c:	cmp	r4, #3
   145a0:	bne	1493c <__assert_fail@plt+0x30ac>
   145a4:	mov	r0, #4
   145a8:	strh	r0, [sl, #56]	; 0x38
   145ac:	bl	11710 <__errno_location@plt>
   145b0:	ldr	r0, [r0]
   145b4:	str	r0, [sl, #32]
   145b8:	b	1493c <__assert_fail@plt+0x30ac>
   145bc:	ldrb	r0, [r6, #49]	; 0x31
   145c0:	tst	r0, #1
   145c4:	beq	145fc <__assert_fail@plt+0x2d6c>
   145c8:	mov	r0, r6
   145cc:	mov	r1, sl
   145d0:	bl	13e68 <__assert_fail@plt+0x25d8>
   145d4:	mov	r9, #0
   145d8:	mov	r0, r6
   145dc:	mov	r1, sl
   145e0:	mov	r2, #0
   145e4:	bl	133c8 <__assert_fail@plt+0x1b38>
   145e8:	mov	r0, r6
   145ec:	mov	r1, sl
   145f0:	bl	14a2c <__assert_fail@plt+0x319c>
   145f4:	cmp	r0, #0
   145f8:	beq	148fc <__assert_fail@plt+0x306c>
   145fc:	mov	r1, r6
   14600:	ldr	r0, [r1, #44]!	; 0x2c
   14604:	str	r1, [fp, #-40]	; 0xffffffd8
   14608:	mvn	r1, #0
   1460c:	cmp	r0, #0
   14610:	movweq	r1, #34464	; 0x86a0
   14614:	movteq	r1, #1
   14618:	str	r1, [sp, #28]
   1461c:	mov	r5, #0
   14620:	cmp	r4, #2
   14624:	beq	14660 <__assert_fail@plt+0x2dd0>
   14628:	ldr	r0, [r6, #48]	; 0x30
   1462c:	and	r1, r0, #56	; 0x38
   14630:	mov	r0, #0
   14634:	cmp	r1, #24
   14638:	bne	1465c <__assert_fail@plt+0x2dcc>
   1463c:	ldr	r1, [sl, #84]	; 0x54
   14640:	cmp	r1, #2
   14644:	bne	1465c <__assert_fail@plt+0x2dcc>
   14648:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1464c:	mov	r0, sl
   14650:	bl	14d54 <__assert_fail@plt+0x34c4>
   14654:	cmp	r0, #0
   14658:	movwne	r0, #1
   1465c:	eor	r5, r0, #1
   14660:	cmp	r4, #3
   14664:	beq	14678 <__assert_fail@plt+0x2de8>
   14668:	cmp	r5, #0
   1466c:	bne	14678 <__assert_fail@plt+0x2de8>
   14670:	str	r5, [sp, #4]
   14674:	b	1418c <__assert_fail@plt+0x28fc>
   14678:	ldrb	r0, [r6, #49]	; 0x31
   1467c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14680:	tst	r0, #2
   14684:	beq	146a0 <__assert_fail@plt+0x2e10>
   14688:	mov	r0, r2
   1468c:	movw	r1, #1030	; 0x406
   14690:	mov	r2, #3
   14694:	bl	198f0 <__assert_fail@plt+0x8060>
   14698:	mov	r2, r0
   1469c:	str	r0, [fp, #-32]	; 0xffffffe0
   146a0:	cmp	r2, #0
   146a4:	bmi	146c0 <__assert_fail@plt+0x2e30>
   146a8:	mov	r0, r6
   146ac:	mov	r1, sl
   146b0:	mov	r3, #0
   146b4:	bl	13f44 <__assert_fail@plt+0x26b4>
   146b8:	cmp	r0, #0
   146bc:	beq	14184 <__assert_fail@plt+0x28f4>
   146c0:	subs	r0, r4, #3
   146c4:	movwne	r0, #1
   146c8:	eor	r1, r5, #1
   146cc:	orrs	r0, r0, r1
   146d0:	bne	146e0 <__assert_fail@plt+0x2e50>
   146d4:	bl	11710 <__errno_location@plt>
   146d8:	ldr	r0, [r0]
   146dc:	str	r0, [sl, #32]
   146e0:	ldrh	r0, [sl, #58]	; 0x3a
   146e4:	orr	r0, r0, #1
   146e8:	strh	r0, [sl, #58]	; 0x3a
   146ec:	ldr	r0, [sl, #12]
   146f0:	bl	11878 <closedir@plt>
   146f4:	mov	r5, #0
   146f8:	str	r5, [sl, #12]
   146fc:	ldrb	r0, [r6, #49]	; 0x31
   14700:	tst	r0, #2
   14704:	beq	14718 <__assert_fail@plt+0x2e88>
   14708:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1470c:	cmp	r0, #0
   14710:	bmi	14718 <__assert_fail@plt+0x2e88>
   14714:	bl	11860 <close@plt>
   14718:	mov	r0, #0
   1471c:	str	r0, [sp, #4]
   14720:	str	r5, [sl, #12]
   14724:	b	1418c <__assert_fail@plt+0x28fc>
   14728:	ldr	r0, [sp, #40]	; 0x28
   1472c:	ldr	r0, [r0]
   14730:	cmp	r0, #0
   14734:	beq	14750 <__assert_fail@plt+0x2ec0>
   14738:	str	r0, [sl, #32]
   1473c:	ldr	r0, [sp, #12]
   14740:	orrs	r0, r0, r7
   14744:	mov	r0, #4
   14748:	movwne	r0, #7
   1474c:	strh	r0, [sl, #56]	; 0x38
   14750:	ldr	r0, [sl, #12]
   14754:	cmp	r0, #0
   14758:	ldr	r4, [sp, #8]
   1475c:	beq	1476c <__assert_fail@plt+0x2edc>
   14760:	bl	11878 <closedir@plt>
   14764:	mov	r0, #0
   14768:	str	r0, [sl, #12]
   1476c:	ldr	r0, [sp, #16]
   14770:	tst	r0, #1
   14774:	b	147dc <__assert_fail@plt+0x2f4c>
   14778:	ldr	r0, [sp, #16]
   1477c:	tst	r0, #1
   14780:	b	147d8 <__assert_fail@plt+0x2f48>
   14784:	mov	r0, r9
   14788:	bl	19b78 <__assert_fail@plt+0x82e8>
   1478c:	mov	r0, r5
   14790:	bl	136c8 <__assert_fail@plt+0x1e38>
   14794:	ldr	r4, [sp, #32]
   14798:	ldr	r0, [r4, #12]
   1479c:	bl	11878 <closedir@plt>
   147a0:	mov	r0, #7
   147a4:	strh	r0, [r4, #56]	; 0x38
   147a8:	mov	r9, #0
   147ac:	str	r9, [r4, #12]
   147b0:	ldr	r0, [r6, #48]	; 0x30
   147b4:	orr	r0, r0, #8192	; 0x2000
   147b8:	str	r0, [r6, #48]	; 0x30
   147bc:	mov	r0, #36	; 0x24
   147c0:	ldr	r1, [sp, #40]	; 0x28
   147c4:	str	r0, [r1]
   147c8:	b	1493c <__assert_fail@plt+0x30ac>
   147cc:	ldr	r0, [sp, #16]
   147d0:	tst	r0, #1
   147d4:	mov	r9, r4
   147d8:	ldr	r4, [sp, #8]
   147dc:	ldr	r6, [sp, #36]	; 0x24
   147e0:	movne	r0, r6
   147e4:	movne	r1, r9
   147e8:	blne	14e24 <__assert_fail@plt+0x3594>
   147ec:	ldrb	r0, [r6, #48]	; 0x30
   147f0:	tst	r0, #4
   147f4:	beq	14820 <__assert_fail@plt+0x2f90>
   147f8:	ldr	r0, [r6, #36]	; 0x24
   147fc:	ldr	r2, [sp, #44]	; 0x2c
   14800:	sub	r1, r2, #1
   14804:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14808:	cmp	r3, r0
   1480c:	moveq	r2, r1
   14810:	cmp	r7, #0
   14814:	moveq	r2, r1
   14818:	mov	r0, #0
   1481c:	strb	r0, [r2]
   14820:	ldr	r0, [sp, #12]
   14824:	cmp	r0, #0
   14828:	ldreq	r0, [sp, #4]
   1482c:	eorseq	r0, r0, #1
   14830:	beq	1485c <__assert_fail@plt+0x2fcc>
   14834:	cmp	r7, #0
   14838:	bne	14898 <__assert_fail@plt+0x3008>
   1483c:	cmp	r4, #3
   14840:	bne	14930 <__assert_fail@plt+0x30a0>
   14844:	ldrh	r0, [sl, #56]	; 0x38
   14848:	cmp	r0, #4
   1484c:	cmpne	r0, #7
   14850:	movne	r0, #6
   14854:	strhne	r0, [sl, #56]	; 0x38
   14858:	b	14930 <__assert_fail@plt+0x30a0>
   1485c:	cmp	r4, #1
   14860:	cmpne	r7, #0
   14864:	bne	14898 <__assert_fail@plt+0x3008>
   14868:	ldr	r0, [sl, #48]	; 0x30
   1486c:	cmp	r0, #0
   14870:	beq	1490c <__assert_fail@plt+0x307c>
   14874:	ldr	r1, [sl, #4]
   14878:	movw	r3, #45842	; 0xb312
   1487c:	movt	r3, #1
   14880:	mov	r0, r6
   14884:	mvn	r2, #0
   14888:	bl	13f44 <__assert_fail@plt+0x26b4>
   1488c:	cmp	r0, #0
   14890:	bne	1491c <__assert_fail@plt+0x308c>
   14894:	b	14834 <__assert_fail@plt+0x2fa4>
   14898:	ldr	r0, [sp, #20]
   1489c:	tst	r0, #1
   148a0:	beq	148cc <__assert_fail@plt+0x303c>
   148a4:	movw	r0, #20164	; 0x4ec4
   148a8:	movt	r0, #1
   148ac:	str	r0, [r6, #44]	; 0x2c
   148b0:	mov	r0, r6
   148b4:	mov	r1, r9
   148b8:	mov	r2, r7
   148bc:	bl	1353c <__assert_fail@plt+0x1cac>
   148c0:	mov	r9, r0
   148c4:	mov	r0, #0
   148c8:	str	r0, [r6, #44]	; 0x2c
   148cc:	cmp	r7, #2
   148d0:	bcc	1493c <__assert_fail@plt+0x30ac>
   148d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   148d8:	ldr	r0, [r0]
   148dc:	cmp	r0, #0
   148e0:	beq	1493c <__assert_fail@plt+0x30ac>
   148e4:	mov	r0, r6
   148e8:	mov	r1, r9
   148ec:	mov	r2, r7
   148f0:	bl	1353c <__assert_fail@plt+0x1cac>
   148f4:	mov	r9, r0
   148f8:	b	1493c <__assert_fail@plt+0x30ac>
   148fc:	bl	11710 <__errno_location@plt>
   14900:	mov	r1, #12
   14904:	str	r1, [r0]
   14908:	b	1493c <__assert_fail@plt+0x30ac>
   1490c:	mov	r0, r6
   14910:	bl	14948 <__assert_fail@plt+0x30b8>
   14914:	cmp	r0, #0
   14918:	beq	14834 <__assert_fail@plt+0x2fa4>
   1491c:	mov	r0, #7
   14920:	strh	r0, [sl, #56]	; 0x38
   14924:	ldr	r0, [r6, #48]	; 0x30
   14928:	orr	r0, r0, #8192	; 0x2000
   1492c:	str	r0, [r6, #48]	; 0x30
   14930:	mov	r0, r9
   14934:	bl	136c8 <__assert_fail@plt+0x1e38>
   14938:	mov	r9, #0
   1493c:	mov	r0, r9
   14940:	sub	sp, fp, #28
   14944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14948:	push	{r4, r5, fp, lr}
   1494c:	add	fp, sp, #8
   14950:	mov	r4, r0
   14954:	ldr	r0, [r0, #48]	; 0x30
   14958:	mov	r5, #0
   1495c:	tst	r0, #4
   14960:	bne	14994 <__assert_fail@plt+0x3104>
   14964:	tst	r0, #512	; 0x200
   14968:	bne	14984 <__assert_fail@plt+0x30f4>
   1496c:	ldr	r0, [r4, #28]
   14970:	bl	117f4 <fchdir@plt>
   14974:	mov	r5, r0
   14978:	cmp	r0, #0
   1497c:	movwne	r5, #1
   14980:	b	14994 <__assert_fail@plt+0x3104>
   14984:	mov	r0, r4
   14988:	mvn	r1, #99	; 0x63
   1498c:	mov	r2, #1
   14990:	bl	14aec <__assert_fail@plt+0x325c>
   14994:	add	r0, r4, #60	; 0x3c
   14998:	bl	13840 <__assert_fail@plt+0x1fb0>
   1499c:	mov	r0, r5
   149a0:	pop	{r4, r5, fp, pc}
   149a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149a8:	add	fp, sp, #24
   149ac:	mov	r4, r1
   149b0:	mov	r8, r0
   149b4:	ldr	r1, [r1, #52]	; 0x34
   149b8:	str	r1, [r4, #40]	; 0x28
   149bc:	ldr	r0, [r0, #24]
   149c0:	add	r6, r4, #168	; 0xa8
   149c4:	add	r2, r1, #1
   149c8:	mov	r1, r6
   149cc:	bl	11518 <memmove@plt>
   149d0:	mov	r0, r6
   149d4:	mov	r1, #47	; 0x2f
   149d8:	bl	117b8 <strrchr@plt>
   149dc:	cmp	r0, #0
   149e0:	beq	14a1c <__assert_fail@plt+0x318c>
   149e4:	cmp	r0, r6
   149e8:	bne	149f8 <__assert_fail@plt+0x3168>
   149ec:	ldrb	r1, [r0, #1]
   149f0:	cmp	r1, #0
   149f4:	beq	14a1c <__assert_fail@plt+0x318c>
   149f8:	add	r7, r0, #1
   149fc:	mov	r0, r7
   14a00:	bl	116ec <strlen@plt>
   14a04:	mov	r5, r0
   14a08:	add	r2, r0, #1
   14a0c:	mov	r0, r6
   14a10:	mov	r1, r7
   14a14:	bl	11518 <memmove@plt>
   14a18:	str	r5, [r4, #52]	; 0x34
   14a1c:	ldr	r0, [r8, #24]
   14a20:	str	r0, [r4, #24]
   14a24:	str	r0, [r4, #28]
   14a28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a30:	add	fp, sp, #24
   14a34:	mov	r4, r1
   14a38:	mov	r6, r0
   14a3c:	add	r5, r1, #64	; 0x40
   14a40:	ldrh	r0, [r0, #48]	; 0x30
   14a44:	movw	r1, #258	; 0x102
   14a48:	tst	r0, r1
   14a4c:	beq	14ac4 <__assert_fail@plt+0x3234>
   14a50:	mov	r0, #24
   14a54:	bl	190a4 <__assert_fail@plt+0x7814>
   14a58:	mov	r8, #0
   14a5c:	cmp	r0, #0
   14a60:	beq	14ae4 <__assert_fail@plt+0x3254>
   14a64:	mov	r7, r0
   14a68:	add	r0, r4, #160	; 0xa0
   14a6c:	ldrd	r2, [r5]
   14a70:	stm	r7, {r2, r3}
   14a74:	ldrd	r0, [r0]
   14a78:	add	r2, r7, #8
   14a7c:	stm	r2, {r0, r1, r4}
   14a80:	ldr	r0, [r6, #56]	; 0x38
   14a84:	mov	r1, r7
   14a88:	bl	15d88 <__assert_fail@plt+0x44f8>
   14a8c:	cmp	r0, r7
   14a90:	beq	14ab8 <__assert_fail@plt+0x3228>
   14a94:	mov	r5, r0
   14a98:	mov	r0, r7
   14a9c:	bl	19b78 <__assert_fail@plt+0x82e8>
   14aa0:	cmp	r5, #0
   14aa4:	beq	14ae4 <__assert_fail@plt+0x3254>
   14aa8:	ldr	r0, [r5, #16]
   14aac:	mov	r1, #2
   14ab0:	strh	r1, [r4, #56]	; 0x38
   14ab4:	str	r0, [r4]
   14ab8:	mov	r8, #1
   14abc:	mov	r0, r8
   14ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ac4:	ldr	r0, [r6, #56]	; 0x38
   14ac8:	mov	r1, r5
   14acc:	bl	19758 <__assert_fail@plt+0x7ec8>
   14ad0:	mov	r8, #1
   14ad4:	cmp	r0, #0
   14ad8:	movne	r0, #2
   14adc:	strhne	r0, [r4, #56]	; 0x38
   14ae0:	strne	r4, [r4]
   14ae4:	mov	r0, r8
   14ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aec:	push	{r4, r5, fp, lr}
   14af0:	add	fp, sp, #8
   14af4:	mov	r4, r1
   14af8:	mov	r5, r0
   14afc:	ldr	r1, [r0, #32]
   14b00:	cmp	r1, r4
   14b04:	bne	14b10 <__assert_fail@plt+0x3280>
   14b08:	cmn	r1, #100	; 0x64
   14b0c:	bne	14b50 <__assert_fail@plt+0x32c0>
   14b10:	cmp	r2, #0
   14b14:	beq	14b2c <__assert_fail@plt+0x329c>
   14b18:	add	r0, r5, #60	; 0x3c
   14b1c:	bl	15fc8 <__assert_fail@plt+0x4738>
   14b20:	cmp	r0, #0
   14b24:	bpl	14b44 <__assert_fail@plt+0x32b4>
   14b28:	b	14b48 <__assert_fail@plt+0x32b8>
   14b2c:	cmp	r1, #0
   14b30:	bmi	14b48 <__assert_fail@plt+0x32b8>
   14b34:	ldr	r0, [r5, #48]	; 0x30
   14b38:	ands	r0, r0, #4
   14b3c:	bne	14b48 <__assert_fail@plt+0x32b8>
   14b40:	mov	r0, r1
   14b44:	bl	11860 <close@plt>
   14b48:	str	r4, [r5, #32]
   14b4c:	pop	{r4, r5, fp, pc}
   14b50:	bl	11854 <abort@plt>
   14b54:	push	{fp, lr}
   14b58:	mov	fp, sp
   14b5c:	cmp	r2, #5
   14b60:	bcc	14b78 <__assert_fail@plt+0x32e8>
   14b64:	bl	11710 <__errno_location@plt>
   14b68:	mov	r1, #22
   14b6c:	str	r1, [r0]
   14b70:	mov	r0, #1
   14b74:	pop	{fp, pc}
   14b78:	strh	r2, [r1, #60]	; 0x3c
   14b7c:	mov	r0, #0
   14b80:	pop	{fp, pc}
   14b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b88:	add	fp, sp, #28
   14b8c:	sub	sp, sp, #4
   14b90:	mov	r5, r0
   14b94:	mvn	r0, #4096	; 0x1000
   14b98:	tst	r1, r0
   14b9c:	beq	14bb4 <__assert_fail@plt+0x3324>
   14ba0:	bl	11710 <__errno_location@plt>
   14ba4:	mov	r1, #22
   14ba8:	str	r1, [r0]
   14bac:	mov	r4, #0
   14bb0:	b	14cb0 <__assert_fail@plt+0x3420>
   14bb4:	mov	r7, r1
   14bb8:	ldr	r6, [r5]
   14bbc:	bl	11710 <__errno_location@plt>
   14bc0:	mov	sl, r0
   14bc4:	mov	r4, #0
   14bc8:	str	r4, [r0]
   14bcc:	ldrb	r0, [r5, #49]	; 0x31
   14bd0:	tst	r0, #32
   14bd4:	bne	14cb0 <__assert_fail@plt+0x3420>
   14bd8:	ldrh	r0, [r6, #56]	; 0x38
   14bdc:	cmp	r0, #1
   14be0:	beq	14bf0 <__assert_fail@plt+0x3360>
   14be4:	cmp	r0, #9
   14be8:	ldreq	r4, [r6, #8]
   14bec:	b	14cb0 <__assert_fail@plt+0x3420>
   14bf0:	ldr	r0, [r5, #4]
   14bf4:	cmp	r0, #0
   14bf8:	blne	136c8 <__assert_fail@plt+0x1e38>
   14bfc:	mov	r9, #1
   14c00:	cmp	r7, #4096	; 0x1000
   14c04:	bne	14c18 <__assert_fail@plt+0x3388>
   14c08:	ldr	r0, [r5, #48]	; 0x30
   14c0c:	orr	r0, r0, #4096	; 0x1000
   14c10:	str	r0, [r5, #48]	; 0x30
   14c14:	mov	r9, #2
   14c18:	ldr	r0, [r6, #48]	; 0x30
   14c1c:	cmp	r0, #0
   14c20:	bne	14c9c <__assert_fail@plt+0x340c>
   14c24:	ldr	r0, [r6, #24]
   14c28:	ldrb	r0, [r0]
   14c2c:	cmp	r0, #47	; 0x2f
   14c30:	beq	14c9c <__assert_fail@plt+0x340c>
   14c34:	ldrb	r0, [r5, #48]	; 0x30
   14c38:	tst	r0, #4
   14c3c:	bne	14c9c <__assert_fail@plt+0x340c>
   14c40:	movw	r1, #45843	; 0xb313
   14c44:	movt	r1, #1
   14c48:	mov	r0, r5
   14c4c:	bl	13698 <__assert_fail@plt+0x1e08>
   14c50:	cmn	r0, #1
   14c54:	ble	14cbc <__assert_fail@plt+0x342c>
   14c58:	mov	r8, r0
   14c5c:	mov	r0, r5
   14c60:	mov	r1, r9
   14c64:	bl	1412c <__assert_fail@plt+0x289c>
   14c68:	str	r0, [r5, #4]
   14c6c:	ldrb	r0, [r5, #49]	; 0x31
   14c70:	tst	r0, #2
   14c74:	bne	14cc8 <__assert_fail@plt+0x3438>
   14c78:	mov	r0, r8
   14c7c:	bl	117f4 <fchdir@plt>
   14c80:	cmp	r0, #0
   14c84:	beq	14cdc <__assert_fail@plt+0x344c>
   14c88:	ldr	r5, [sl]
   14c8c:	mov	r0, r8
   14c90:	bl	11860 <close@plt>
   14c94:	str	r5, [sl]
   14c98:	b	14cb0 <__assert_fail@plt+0x3420>
   14c9c:	mov	r0, r5
   14ca0:	mov	r1, r9
   14ca4:	bl	1412c <__assert_fail@plt+0x289c>
   14ca8:	mov	r4, r0
   14cac:	str	r0, [r5, #4]
   14cb0:	mov	r0, r4
   14cb4:	sub	sp, fp, #28
   14cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cbc:	mov	r4, #0
   14cc0:	str	r4, [r5, #4]
   14cc4:	b	14cb0 <__assert_fail@plt+0x3420>
   14cc8:	mov	r0, r5
   14ccc:	mov	r1, r8
   14cd0:	mov	r2, #1
   14cd4:	bl	14aec <__assert_fail@plt+0x325c>
   14cd8:	b	14ce4 <__assert_fail@plt+0x3454>
   14cdc:	mov	r0, r8
   14ce0:	bl	11860 <close@plt>
   14ce4:	ldr	r4, [r5, #4]
   14ce8:	b	14cb0 <__assert_fail@plt+0x3420>
   14cec:	push	{fp, lr}
   14cf0:	mov	fp, sp
   14cf4:	mov	r2, r1
   14cf8:	ldrd	r0, [r0, #8]
   14cfc:	mov	r3, #0
   14d00:	bl	1a2ec <__assert_fail@plt+0x8a5c>
   14d04:	mov	r0, r2
   14d08:	pop	{fp, pc}
   14d0c:	push	{r4, r5, fp, lr}
   14d10:	add	fp, sp, #8
   14d14:	ldrd	r2, [r1, #8]
   14d18:	ldrd	r4, [r0, #8]
   14d1c:	eor	r3, r5, r3
   14d20:	eor	r2, r4, r2
   14d24:	orrs	r2, r2, r3
   14d28:	mov	r2, #0
   14d2c:	bne	14d4c <__assert_fail@plt+0x34bc>
   14d30:	ldrd	r2, [r1]
   14d34:	ldrd	r0, [r0]
   14d38:	eor	r1, r1, r3
   14d3c:	eor	r0, r0, r2
   14d40:	orr	r0, r0, r1
   14d44:	clz	r0, r0
   14d48:	lsr	r2, r0, #5
   14d4c:	mov	r0, r2
   14d50:	pop	{r4, r5, fp, pc}
   14d54:	push	{fp, lr}
   14d58:	mov	fp, sp
   14d5c:	bl	14efc <__assert_fail@plt+0x366c>
   14d60:	mov	r1, r0
   14d64:	mov	r0, #0
   14d68:	movw	r2, #26984	; 0x6968
   14d6c:	cmp	r1, r2
   14d70:	ble	14da0 <__assert_fail@plt+0x3510>
   14d74:	movw	r2, #26985	; 0x6969
   14d78:	cmp	r1, r2
   14d7c:	movwne	r2, #40864	; 0x9fa0
   14d80:	cmpne	r1, r2
   14d84:	beq	14db8 <__assert_fail@plt+0x3528>
   14d88:	movw	r2, #16719	; 0x414f
   14d8c:	movt	r2, #21318	; 0x5346
   14d90:	cmp	r1, r2
   14d94:	popeq	{fp, pc}
   14d98:	mov	r0, #1
   14d9c:	pop	{fp, pc}
   14da0:	movw	r2, #19778	; 0x4d42
   14da4:	movt	r2, #65363	; 0xff53
   14da8:	cmp	r1, r2
   14dac:	beq	14db8 <__assert_fail@plt+0x3528>
   14db0:	cmp	r1, #0
   14db4:	movne	r0, #1
   14db8:	pop	{fp, pc}
   14dbc:	sub	r2, r1, #1
   14dc0:	mov	r1, #0
   14dc4:	cmp	r2, #11
   14dc8:	bhi	14dd8 <__assert_fail@plt+0x3548>
   14dcc:	movw	r1, #45848	; 0xb318
   14dd0:	movt	r1, #1
   14dd4:	ldr	r1, [r1, r2, lsl #2]
   14dd8:	str	r1, [r0, #16]
   14ddc:	bx	lr
   14de0:	push	{fp, lr}
   14de4:	mov	fp, sp
   14de8:	bl	14efc <__assert_fail@plt+0x366c>
   14dec:	mov	r1, r0
   14df0:	mov	r0, #0
   14df4:	movw	r2, #19778	; 0x4d42
   14df8:	movt	r2, #65363	; 0xff53
   14dfc:	cmp	r1, r2
   14e00:	movwne	r2, #26985	; 0x6969
   14e04:	cmpne	r1, r2
   14e08:	bne	14e10 <__assert_fail@plt+0x3580>
   14e0c:	pop	{fp, pc}
   14e10:	movw	r2, #6548	; 0x1994
   14e14:	movt	r2, #258	; 0x102
   14e18:	cmp	r1, r2
   14e1c:	movne	r0, #1
   14e20:	pop	{fp, pc}
   14e24:	ldr	r2, [r0, #4]
   14e28:	ldr	ip, [r0, #24]
   14e2c:	cmp	r2, #0
   14e30:	bne	14e48 <__assert_fail@plt+0x35b8>
   14e34:	b	14e6c <__assert_fail@plt+0x35dc>
   14e38:	str	ip, [r2, #28]
   14e3c:	ldr	r2, [r2, #8]
   14e40:	cmp	r2, #0
   14e44:	beq	14e6c <__assert_fail@plt+0x35dc>
   14e48:	ldr	r3, [r2, #24]
   14e4c:	add	r0, r2, #168	; 0xa8
   14e50:	cmp	r3, r0
   14e54:	beq	14e38 <__assert_fail@plt+0x35a8>
   14e58:	ldr	r0, [r2, #28]
   14e5c:	sub	r0, r3, r0
   14e60:	add	r0, ip, r0
   14e64:	str	r0, [r2, #24]
   14e68:	b	14e38 <__assert_fail@plt+0x35a8>
   14e6c:	ldr	r2, [r1, #48]	; 0x30
   14e70:	cmp	r2, #0
   14e74:	bxmi	lr
   14e78:	b	14e9c <__assert_fail@plt+0x360c>
   14e7c:	str	ip, [r1, #28]
   14e80:	ldr	r2, [r1, #8]
   14e84:	cmp	r2, #0
   14e88:	ldreq	r2, [r1, #4]
   14e8c:	ldr	r0, [r2, #48]	; 0x30
   14e90:	cmn	r0, #1
   14e94:	mov	r1, r2
   14e98:	ble	14ec0 <__assert_fail@plt+0x3630>
   14e9c:	ldr	r2, [r1, #24]
   14ea0:	add	r0, r1, #168	; 0xa8
   14ea4:	cmp	r2, r0
   14ea8:	beq	14e7c <__assert_fail@plt+0x35ec>
   14eac:	ldr	r0, [r1, #28]
   14eb0:	sub	r0, r2, r0
   14eb4:	add	r0, ip, r0
   14eb8:	str	r0, [r1, #24]
   14ebc:	b	14e7c <__assert_fail@plt+0x35ec>
   14ec0:	bx	lr
   14ec4:	push	{r4, r5, fp, lr}
   14ec8:	add	fp, sp, #8
   14ecc:	ldr	r0, [r0]
   14ed0:	ldrd	r2, [r0, #160]	; 0xa0
   14ed4:	ldr	r0, [r1]
   14ed8:	ldrd	r4, [r0, #160]	; 0xa0
   14edc:	mov	r0, #0
   14ee0:	subs	r1, r4, r2
   14ee4:	sbcs	r1, r5, r3
   14ee8:	movwcc	r0, #1
   14eec:	subs	r1, r2, r4
   14ef0:	sbcs	r1, r3, r5
   14ef4:	subcc	r0, r0, #1
   14ef8:	pop	{r4, r5, fp, pc}
   14efc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f00:	add	fp, sp, #24
   14f04:	sub	sp, sp, #96	; 0x60
   14f08:	mov	r4, r0
   14f0c:	ldr	r7, [r0, #44]	; 0x2c
   14f10:	ldrb	r0, [r7, #49]	; 0x31
   14f14:	mov	r5, #0
   14f18:	tst	r0, #2
   14f1c:	beq	15018 <__assert_fail@plt+0x3788>
   14f20:	mov	r9, r1
   14f24:	ldr	r6, [r7, #52]	; 0x34
   14f28:	cmp	r6, #0
   14f2c:	bne	14f6c <__assert_fail@plt+0x36dc>
   14f30:	movw	r0, #39800	; 0x9b78
   14f34:	movt	r0, #1
   14f38:	str	r0, [sp]
   14f3c:	mov	r8, #0
   14f40:	movw	r2, #20516	; 0x5024
   14f44:	movt	r2, #1
   14f48:	movw	r3, #20548	; 0x5044
   14f4c:	movt	r3, #1
   14f50:	mov	r0, #13
   14f54:	mov	r1, #0
   14f58:	bl	154ec <__assert_fail@plt+0x3c5c>
   14f5c:	mov	r6, r0
   14f60:	str	r0, [r7, #52]	; 0x34
   14f64:	cmp	r0, #0
   14f68:	beq	14fa4 <__assert_fail@plt+0x3714>
   14f6c:	ldrd	r0, [r4, #64]	; 0x40
   14f70:	str	r1, [sp, #12]
   14f74:	str	r0, [sp, #8]
   14f78:	add	r1, sp, #8
   14f7c:	mov	r0, r6
   14f80:	bl	15240 <__assert_fail@plt+0x39b0>
   14f84:	cmp	r0, #0
   14f88:	beq	14f94 <__assert_fail@plt+0x3704>
   14f8c:	ldr	r5, [r0, #8]
   14f90:	b	15018 <__assert_fail@plt+0x3788>
   14f94:	mov	r8, #1
   14f98:	cmp	r9, #0
   14f9c:	bpl	14fb0 <__assert_fail@plt+0x3720>
   14fa0:	b	15018 <__assert_fail@plt+0x3788>
   14fa4:	mov	r6, #0
   14fa8:	cmp	r9, #0
   14fac:	bmi	15018 <__assert_fail@plt+0x3788>
   14fb0:	add	r1, sp, #8
   14fb4:	mov	r0, r9
   14fb8:	bl	114b8 <fstatfs64@plt>
   14fbc:	cmp	r0, #0
   14fc0:	bne	15018 <__assert_fail@plt+0x3788>
   14fc4:	cmp	r8, #0
   14fc8:	beq	15014 <__assert_fail@plt+0x3784>
   14fcc:	mov	r0, #16
   14fd0:	bl	190a4 <__assert_fail@plt+0x7814>
   14fd4:	cmp	r0, #0
   14fd8:	beq	15014 <__assert_fail@plt+0x3784>
   14fdc:	mov	r5, r0
   14fe0:	ldrd	r0, [r4, #64]	; 0x40
   14fe4:	ldr	r2, [sp, #8]
   14fe8:	stm	r5, {r0, r1, r2}
   14fec:	mov	r0, r6
   14ff0:	mov	r1, r5
   14ff4:	bl	15d88 <__assert_fail@plt+0x44f8>
   14ff8:	cmp	r0, #0
   14ffc:	beq	1500c <__assert_fail@plt+0x377c>
   15000:	cmp	r0, r5
   15004:	beq	15014 <__assert_fail@plt+0x3784>
   15008:	bl	11854 <abort@plt>
   1500c:	mov	r0, r5
   15010:	bl	19b78 <__assert_fail@plt+0x82e8>
   15014:	ldr	r5, [sp, #8]
   15018:	mov	r0, r5
   1501c:	sub	sp, fp, #24
   15020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15024:	push	{fp, lr}
   15028:	mov	fp, sp
   1502c:	mov	r2, r1
   15030:	ldrd	r0, [r0]
   15034:	mov	r3, #0
   15038:	bl	1a2ec <__assert_fail@plt+0x8a5c>
   1503c:	mov	r0, r2
   15040:	pop	{fp, pc}
   15044:	ldrd	r2, [r1]
   15048:	ldrd	r0, [r0]
   1504c:	eor	r1, r1, r3
   15050:	eor	r0, r0, r2
   15054:	orr	r0, r0, r1
   15058:	clz	r0, r0
   1505c:	lsr	r0, r0, #5
   15060:	bx	lr
   15064:	andeq	r0, r0, r0
   15068:	ldr	r0, [r0, #8]
   1506c:	bx	lr
   15070:	ldr	r0, [r0, #12]
   15074:	bx	lr
   15078:	ldr	r0, [r0, #16]
   1507c:	bx	lr
   15080:	mov	r2, r0
   15084:	ldm	r0, {r1, r3}
   15088:	mov	r0, #0
   1508c:	cmp	r1, r3
   15090:	bxcs	lr
   15094:	ldr	ip, [r2, #4]
   15098:	mov	r0, #0
   1509c:	b	150ac <__assert_fail@plt+0x381c>
   150a0:	add	r1, r1, #8
   150a4:	cmp	r1, ip
   150a8:	bcs	150dc <__assert_fail@plt+0x384c>
   150ac:	ldr	r2, [r1]
   150b0:	cmp	r2, #0
   150b4:	beq	150a0 <__assert_fail@plt+0x3810>
   150b8:	mov	r3, #0
   150bc:	mov	r2, r1
   150c0:	add	r3, r3, #1
   150c4:	ldr	r2, [r2, #4]
   150c8:	cmp	r2, #0
   150cc:	bne	150c0 <__assert_fail@plt+0x3830>
   150d0:	cmp	r3, r0
   150d4:	movhi	r0, r3
   150d8:	b	150a0 <__assert_fail@plt+0x3810>
   150dc:	bx	lr
   150e0:	push	{fp, lr}
   150e4:	mov	fp, sp
   150e8:	ldr	r3, [r0]
   150ec:	ldr	r1, [r0, #4]
   150f0:	mov	lr, #0
   150f4:	cmp	r3, r1
   150f8:	mov	r1, #0
   150fc:	bcs	15144 <__assert_fail@plt+0x38b4>
   15100:	ldr	ip, [r0, #4]
   15104:	mov	r1, #0
   15108:	mov	lr, #0
   1510c:	b	1511c <__assert_fail@plt+0x388c>
   15110:	add	r3, r3, #8
   15114:	cmp	r3, ip
   15118:	bcs	15144 <__assert_fail@plt+0x38b4>
   1511c:	ldr	r2, [r3]
   15120:	cmp	r2, #0
   15124:	beq	15110 <__assert_fail@plt+0x3880>
   15128:	mov	r2, r3
   1512c:	add	r1, r1, #1
   15130:	ldr	r2, [r2, #4]
   15134:	cmp	r2, #0
   15138:	bne	1512c <__assert_fail@plt+0x389c>
   1513c:	add	lr, lr, #1
   15140:	b	15110 <__assert_fail@plt+0x3880>
   15144:	ldr	r2, [r0, #12]
   15148:	cmp	lr, r2
   1514c:	bne	15164 <__assert_fail@plt+0x38d4>
   15150:	ldr	r2, [r0, #16]
   15154:	mov	r0, #1
   15158:	cmp	r1, r2
   1515c:	movne	r0, #0
   15160:	pop	{fp, pc}
   15164:	mov	r0, #0
   15168:	pop	{fp, pc}
   1516c:	nop	{0}
   15170:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15174:	add	fp, sp, #24
   15178:	sub	sp, sp, #8
   1517c:	mov	r4, r1
   15180:	mov	r5, r0
   15184:	bl	15078 <__assert_fail@plt+0x37e8>
   15188:	mov	r8, r0
   1518c:	mov	r0, r5
   15190:	bl	15068 <__assert_fail@plt+0x37d8>
   15194:	mov	r7, r0
   15198:	mov	r0, r5
   1519c:	bl	15070 <__assert_fail@plt+0x37e0>
   151a0:	mov	r6, r0
   151a4:	mov	r0, r5
   151a8:	bl	15080 <__assert_fail@plt+0x37f0>
   151ac:	mov	r5, r0
   151b0:	movw	r2, #45896	; 0xb348
   151b4:	movt	r2, #1
   151b8:	mov	r0, r4
   151bc:	mov	r1, #1
   151c0:	mov	r3, r8
   151c4:	bl	11758 <__fprintf_chk@plt>
   151c8:	movw	r2, #45920	; 0xb360
   151cc:	movt	r2, #1
   151d0:	mov	r0, r4
   151d4:	mov	r1, #1
   151d8:	mov	r3, r7
   151dc:	bl	11758 <__fprintf_chk@plt>
   151e0:	vldr	d16, [pc, #80]	; 15238 <__assert_fail@plt+0x39a8>
   151e4:	vmov	s0, r6
   151e8:	vmov	s2, r7
   151ec:	vcvt.f64.u32	d17, s0
   151f0:	vcvt.f64.u32	d18, s2
   151f4:	vmul.f64	d16, d17, d16
   151f8:	vdiv.f64	d16, d16, d18
   151fc:	vstr	d16, [sp]
   15200:	movw	r2, #45944	; 0xb378
   15204:	movt	r2, #1
   15208:	mov	r0, r4
   1520c:	mov	r1, #1
   15210:	mov	r3, r6
   15214:	bl	11758 <__fprintf_chk@plt>
   15218:	movw	r2, #45977	; 0xb399
   1521c:	movt	r2, #1
   15220:	mov	r0, r4
   15224:	mov	r1, #1
   15228:	mov	r3, r5
   1522c:	sub	sp, fp, #24
   15230:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15234:	b	11758 <__fprintf_chk@plt>
   15238:	andeq	r0, r0, r0
   1523c:	subsmi	r0, r9, r0
   15240:	push	{r4, r5, r6, r7, fp, lr}
   15244:	add	fp, sp, #16
   15248:	mov	r5, r1
   1524c:	mov	r6, r0
   15250:	bl	152b0 <__assert_fail@plt+0x3a20>
   15254:	mov	r7, r0
   15258:	ldr	r0, [r0]
   1525c:	mov	r4, #0
   15260:	cmp	r0, #0
   15264:	beq	1529c <__assert_fail@plt+0x3a0c>
   15268:	cmp	r7, #0
   1526c:	beq	1529c <__assert_fail@plt+0x3a0c>
   15270:	ldr	r1, [r7]
   15274:	cmp	r1, r5
   15278:	beq	152a4 <__assert_fail@plt+0x3a14>
   1527c:	ldr	r2, [r6, #28]
   15280:	mov	r0, r5
   15284:	blx	r2
   15288:	cmp	r0, #0
   1528c:	bne	152a4 <__assert_fail@plt+0x3a14>
   15290:	ldr	r7, [r7, #4]
   15294:	cmp	r7, #0
   15298:	bne	15270 <__assert_fail@plt+0x39e0>
   1529c:	mov	r0, r4
   152a0:	pop	{r4, r5, r6, r7, fp, pc}
   152a4:	ldr	r4, [r7]
   152a8:	mov	r0, r4
   152ac:	pop	{r4, r5, r6, r7, fp, pc}
   152b0:	push	{r4, sl, fp, lr}
   152b4:	add	fp, sp, #8
   152b8:	mov	r2, r1
   152bc:	mov	r4, r0
   152c0:	ldr	r1, [r0, #8]
   152c4:	ldr	r3, [r0, #24]
   152c8:	mov	r0, r2
   152cc:	blx	r3
   152d0:	ldr	r1, [r4, #8]
   152d4:	cmp	r0, r1
   152d8:	ldrcc	r1, [r4]
   152dc:	addcc	r0, r1, r0, lsl #3
   152e0:	popcc	{r4, sl, fp, pc}
   152e4:	bl	11854 <abort@plt>
   152e8:	push	{fp, lr}
   152ec:	mov	fp, sp
   152f0:	ldr	r1, [r0, #16]
   152f4:	cmp	r1, #0
   152f8:	beq	15320 <__assert_fail@plt+0x3a90>
   152fc:	ldr	r2, [r0]
   15300:	ldr	r1, [r0, #4]
   15304:	cmp	r2, r1
   15308:	bcs	1532c <__assert_fail@plt+0x3a9c>
   1530c:	ldr	r1, [r2], #8
   15310:	cmp	r1, #0
   15314:	beq	15300 <__assert_fail@plt+0x3a70>
   15318:	mov	r0, r1
   1531c:	pop	{fp, pc}
   15320:	mov	r1, #0
   15324:	mov	r0, r1
   15328:	pop	{fp, pc}
   1532c:	bl	11854 <abort@plt>
   15330:	push	{r4, r5, fp, lr}
   15334:	add	fp, sp, #8
   15338:	mov	r5, r1
   1533c:	mov	r4, r0
   15340:	bl	152b0 <__assert_fail@plt+0x3a20>
   15344:	mov	r1, r0
   15348:	b	15358 <__assert_fail@plt+0x3ac8>
   1534c:	ldr	r1, [r1, #4]
   15350:	cmp	r1, #0
   15354:	beq	15378 <__assert_fail@plt+0x3ae8>
   15358:	ldr	r2, [r1]
   1535c:	cmp	r2, r5
   15360:	bne	1534c <__assert_fail@plt+0x3abc>
   15364:	ldr	r2, [r1, #4]
   15368:	cmp	r2, #0
   1536c:	beq	1534c <__assert_fail@plt+0x3abc>
   15370:	ldr	r0, [r2]
   15374:	pop	{r4, r5, fp, pc}
   15378:	add	r1, r0, #8
   1537c:	ldr	r2, [r4, #4]
   15380:	cmp	r1, r2
   15384:	bcs	15398 <__assert_fail@plt+0x3b08>
   15388:	ldr	r0, [r1], #8
   1538c:	cmp	r0, #0
   15390:	beq	15380 <__assert_fail@plt+0x3af0>
   15394:	pop	{r4, r5, fp, pc}
   15398:	mov	r0, #0
   1539c:	pop	{r4, r5, fp, pc}
   153a0:	push	{r4, sl, fp, lr}
   153a4:	add	fp, sp, #8
   153a8:	mov	ip, r0
   153ac:	ldr	lr, [r0]
   153b0:	ldr	r3, [r0, #4]
   153b4:	mov	r0, #0
   153b8:	cmp	lr, r3
   153bc:	popcs	{r4, sl, fp, pc}
   153c0:	mov	r0, #0
   153c4:	b	153d8 <__assert_fail@plt+0x3b48>
   153c8:	ldr	r3, [ip, #4]
   153cc:	add	lr, lr, #8
   153d0:	cmp	lr, r3
   153d4:	bcs	15410 <__assert_fail@plt+0x3b80>
   153d8:	ldr	r3, [lr]
   153dc:	cmp	r3, #0
   153e0:	cmpne	lr, #0
   153e4:	beq	153c8 <__assert_fail@plt+0x3b38>
   153e8:	mov	r3, lr
   153ec:	cmp	r0, r2
   153f0:	bcs	15410 <__assert_fail@plt+0x3b80>
   153f4:	ldr	r4, [r3]
   153f8:	str	r4, [r1, r0, lsl #2]
   153fc:	add	r0, r0, #1
   15400:	ldr	r3, [r3, #4]
   15404:	cmp	r3, #0
   15408:	bne	153ec <__assert_fail@plt+0x3b5c>
   1540c:	b	153c8 <__assert_fail@plt+0x3b38>
   15410:	pop	{r4, sl, fp, pc}
   15414:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15418:	add	fp, sp, #24
   1541c:	mov	r8, r0
   15420:	ldr	r9, [r0]
   15424:	ldr	r0, [r0, #4]
   15428:	mov	r6, #0
   1542c:	cmp	r9, r0
   15430:	bcs	15490 <__assert_fail@plt+0x3c00>
   15434:	mov	r4, r2
   15438:	mov	r5, r1
   1543c:	mov	r6, #0
   15440:	b	15454 <__assert_fail@plt+0x3bc4>
   15444:	ldr	r0, [r8, #4]
   15448:	add	r9, r9, #8
   1544c:	cmp	r9, r0
   15450:	bcs	15490 <__assert_fail@plt+0x3c00>
   15454:	ldr	r0, [r9]
   15458:	cmp	r0, #0
   1545c:	cmpne	r9, #0
   15460:	beq	15444 <__assert_fail@plt+0x3bb4>
   15464:	mov	r7, r9
   15468:	ldr	r0, [r7]
   1546c:	mov	r1, r4
   15470:	blx	r5
   15474:	cmp	r0, #0
   15478:	beq	15490 <__assert_fail@plt+0x3c00>
   1547c:	add	r6, r6, #1
   15480:	ldr	r7, [r7, #4]
   15484:	cmp	r7, #0
   15488:	bne	15468 <__assert_fail@plt+0x3bd8>
   1548c:	b	15444 <__assert_fail@plt+0x3bb4>
   15490:	mov	r0, r6
   15494:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15498:	ldrb	r2, [r0]
   1549c:	cmp	r2, #0
   154a0:	moveq	r0, #0
   154a4:	bxeq	lr
   154a8:	add	r3, r0, #1
   154ac:	mov	r0, #0
   154b0:	rsb	r0, r0, r0, lsl #5
   154b4:	uxtab	r0, r0, r2
   154b8:	udiv	r2, r0, r1
   154bc:	mls	r0, r2, r1, r0
   154c0:	ldrb	r2, [r3], #1
   154c4:	cmp	r2, #0
   154c8:	bne	154b0 <__assert_fail@plt+0x3c20>
   154cc:	bx	lr
   154d0:	movw	r1, #46008	; 0xb3b8
   154d4:	movt	r1, #1
   154d8:	vld1.32	{d16-d17}, [r1]!
   154dc:	vst1.32	{d16-d17}, [r0]!
   154e0:	ldr	r1, [r1]
   154e4:	str	r1, [r0]
   154e8:	bx	lr
   154ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f0:	add	fp, sp, #28
   154f4:	sub	sp, sp, #4
   154f8:	mov	r7, r1
   154fc:	mov	r8, r0
   15500:	movw	sl, #21996	; 0x55ec
   15504:	movt	sl, #1
   15508:	cmp	r3, #0
   1550c:	movne	sl, r3
   15510:	movw	r5, #21964	; 0x55cc
   15514:	movt	r5, #1
   15518:	cmp	r2, #0
   1551c:	movne	r5, r2
   15520:	mov	r0, #40	; 0x28
   15524:	bl	190a4 <__assert_fail@plt+0x7814>
   15528:	mov	r9, #0
   1552c:	cmp	r0, #0
   15530:	beq	155c0 <__assert_fail@plt+0x3d30>
   15534:	mov	r4, r0
   15538:	movw	r6, #46008	; 0xb3b8
   1553c:	movt	r6, #1
   15540:	cmp	r7, #0
   15544:	movne	r6, r7
   15548:	str	r6, [r0, #20]
   1554c:	bl	155fc <__assert_fail@plt+0x3d6c>
   15550:	cmp	r0, #0
   15554:	beq	155b8 <__assert_fail@plt+0x3d28>
   15558:	mov	r0, r8
   1555c:	mov	r1, r6
   15560:	bl	156a8 <__assert_fail@plt+0x3e18>
   15564:	str	r0, [r4, #8]
   15568:	cmp	r0, #0
   1556c:	beq	155b8 <__assert_fail@plt+0x3d28>
   15570:	mov	r1, #8
   15574:	bl	19050 <__assert_fail@plt+0x77c0>
   15578:	str	r0, [r4]
   1557c:	cmp	r0, #0
   15580:	beq	155b8 <__assert_fail@plt+0x3d28>
   15584:	ldr	r1, [fp, #8]
   15588:	mov	r2, #0
   1558c:	str	r5, [r4, #24]
   15590:	str	sl, [r4, #28]
   15594:	str	r1, [r4, #32]
   15598:	str	r2, [r4, #36]	; 0x24
   1559c:	str	r2, [r4, #12]
   155a0:	str	r2, [r4, #16]
   155a4:	ldr	r1, [r4, #8]
   155a8:	add	r0, r0, r1, lsl #3
   155ac:	str	r0, [r4, #4]
   155b0:	mov	r9, r4
   155b4:	b	155c0 <__assert_fail@plt+0x3d30>
   155b8:	mov	r0, r4
   155bc:	bl	19b78 <__assert_fail@plt+0x82e8>
   155c0:	mov	r0, r9
   155c4:	sub	sp, fp, #28
   155c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155cc:	push	{r4, sl, fp, lr}
   155d0:	add	fp, sp, #8
   155d4:	mov	r4, r1
   155d8:	mov	r1, #3
   155dc:	bl	1931c <__assert_fail@plt+0x7a8c>
   155e0:	udiv	r1, r0, r4
   155e4:	mls	r0, r1, r4, r0
   155e8:	pop	{r4, sl, fp, pc}
   155ec:	sub	r0, r0, r1
   155f0:	clz	r0, r0
   155f4:	lsr	r0, r0, #5
   155f8:	bx	lr
   155fc:	mov	r1, r0
   15600:	ldr	r3, [r0, #20]
   15604:	mov	r0, #1
   15608:	movw	r2, #46008	; 0xb3b8
   1560c:	movt	r2, #1
   15610:	cmp	r3, r2
   15614:	beq	15698 <__assert_fail@plt+0x3e08>
   15618:	vldr	s2, [pc, #124]	; 1569c <__assert_fail@plt+0x3e0c>
   1561c:	vldr	s0, [r3, #8]
   15620:	vcmpe.f32	s0, s2
   15624:	vmrs	APSR_nzcv, fpscr
   15628:	ble	15690 <__assert_fail@plt+0x3e00>
   1562c:	vldr	s4, [pc, #108]	; 156a0 <__assert_fail@plt+0x3e10>
   15630:	vcmpe.f32	s0, s4
   15634:	vmrs	APSR_nzcv, fpscr
   15638:	bpl	15690 <__assert_fail@plt+0x3e00>
   1563c:	vldr	s4, [pc, #96]	; 156a4 <__assert_fail@plt+0x3e14>
   15640:	vldr	s6, [r3, #12]
   15644:	vcmpe.f32	s6, s4
   15648:	vmrs	APSR_nzcv, fpscr
   1564c:	ble	15690 <__assert_fail@plt+0x3e00>
   15650:	vldr	s4, [r3]
   15654:	vcmpe.f32	s4, #0.0
   15658:	vmrs	APSR_nzcv, fpscr
   1565c:	blt	15690 <__assert_fail@plt+0x3e00>
   15660:	vadd.f32	s2, s4, s2
   15664:	vcmpe.f32	s2, s0
   15668:	vmrs	APSR_nzcv, fpscr
   1566c:	bpl	15690 <__assert_fail@plt+0x3e00>
   15670:	vldr	s0, [r3, #4]
   15674:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15678:	vcmpe.f32	s0, s4
   1567c:	vmrs	APSR_nzcv, fpscr
   15680:	bhi	15690 <__assert_fail@plt+0x3e00>
   15684:	vcmpe.f32	s2, s0
   15688:	vmrs	APSR_nzcv, fpscr
   1568c:	bxmi	lr
   15690:	str	r2, [r1, #20]
   15694:	mov	r0, #0
   15698:	bx	lr
   1569c:	stclcc	12, cr12, [ip, #820]	; 0x334
   156a0:	svccc	0x00666666
   156a4:	svccc	0x008ccccd
   156a8:	push	{fp, lr}
   156ac:	mov	fp, sp
   156b0:	ldrb	r2, [r1, #16]
   156b4:	cmp	r2, #0
   156b8:	bne	156e8 <__assert_fail@plt+0x3e58>
   156bc:	vldr	s0, [r1, #8]
   156c0:	vmov	s2, r0
   156c4:	vcvt.f32.u32	s2, s2
   156c8:	vdiv.f32	s2, s2, s0
   156cc:	vcvt.u32.f32	s0, s2
   156d0:	vldr	s4, [pc, #32]	; 156f8 <__assert_fail@plt+0x3e68>
   156d4:	mov	r0, #0
   156d8:	vcmpe.f32	s2, s4
   156dc:	vmrs	APSR_nzcv, fpscr
   156e0:	popge	{fp, pc}
   156e4:	vmov	r0, s0
   156e8:	bl	15edc <__assert_fail@plt+0x464c>
   156ec:	cmn	r0, #-536870911	; 0xe0000001
   156f0:	movwhi	r0, #0
   156f4:	pop	{fp, pc}
   156f8:	svcmi	0x00800000
   156fc:	push	{r4, r5, r6, r7, fp, lr}
   15700:	add	fp, sp, #16
   15704:	mov	r4, r0
   15708:	ldr	r5, [r0]
   1570c:	ldr	r0, [r0, #4]
   15710:	cmp	r5, r0
   15714:	bcs	157b8 <__assert_fail@plt+0x3f28>
   15718:	mov	r6, #0
   1571c:	b	15738 <__assert_fail@plt+0x3ea8>
   15720:	str	r6, [r5]
   15724:	str	r6, [r5, #4]
   15728:	ldr	r0, [r4, #4]
   1572c:	add	r5, r5, #8
   15730:	cmp	r5, r0
   15734:	bcs	157b8 <__assert_fail@plt+0x3f28>
   15738:	ldr	r0, [r5]
   1573c:	cmp	r0, #0
   15740:	beq	15728 <__assert_fail@plt+0x3e98>
   15744:	ldr	r7, [r5, #4]
   15748:	ldr	r1, [r4, #32]
   1574c:	cmp	r1, #0
   15750:	mov	r0, r1
   15754:	movwne	r0, #1
   15758:	cmp	r7, #0
   1575c:	bne	157a4 <__assert_fail@plt+0x3f14>
   15760:	cmp	r0, #0
   15764:	beq	15720 <__assert_fail@plt+0x3e90>
   15768:	ldr	r0, [r5]
   1576c:	blx	r1
   15770:	b	15720 <__assert_fail@plt+0x3e90>
   15774:	str	r6, [r7]
   15778:	ldr	r2, [r7, #4]
   1577c:	ldr	r0, [r4, #36]	; 0x24
   15780:	str	r0, [r7, #4]
   15784:	str	r7, [r4, #36]	; 0x24
   15788:	ldr	r1, [r4, #32]
   1578c:	cmp	r1, #0
   15790:	mov	r0, r1
   15794:	movwne	r0, #1
   15798:	cmp	r2, #0
   1579c:	mov	r7, r2
   157a0:	beq	15760 <__assert_fail@plt+0x3ed0>
   157a4:	tst	r0, #1
   157a8:	beq	15774 <__assert_fail@plt+0x3ee4>
   157ac:	ldr	r0, [r7]
   157b0:	blx	r1
   157b4:	b	15774 <__assert_fail@plt+0x3ee4>
   157b8:	mov	r0, #0
   157bc:	str	r0, [r4, #12]
   157c0:	str	r0, [r4, #16]
   157c4:	pop	{r4, r5, r6, r7, fp, pc}
   157c8:	push	{r4, r5, r6, sl, fp, lr}
   157cc:	add	fp, sp, #16
   157d0:	mov	r4, r0
   157d4:	ldr	r0, [r0, #32]
   157d8:	cmp	r0, #0
   157dc:	beq	15840 <__assert_fail@plt+0x3fb0>
   157e0:	ldr	r0, [r4, #16]
   157e4:	cmp	r0, #0
   157e8:	beq	15840 <__assert_fail@plt+0x3fb0>
   157ec:	ldr	r5, [r4]
   157f0:	ldr	r0, [r4, #4]
   157f4:	cmp	r5, r0
   157f8:	bcc	15810 <__assert_fail@plt+0x3f80>
   157fc:	b	15840 <__assert_fail@plt+0x3fb0>
   15800:	ldr	r0, [r4, #4]
   15804:	add	r5, r5, #8
   15808:	cmp	r5, r0
   1580c:	bcs	15840 <__assert_fail@plt+0x3fb0>
   15810:	ldr	r0, [r5]
   15814:	cmp	r0, #0
   15818:	cmpne	r5, #0
   1581c:	beq	15800 <__assert_fail@plt+0x3f70>
   15820:	mov	r6, r5
   15824:	ldr	r0, [r6]
   15828:	ldr	r1, [r4, #32]
   1582c:	blx	r1
   15830:	ldr	r6, [r6, #4]
   15834:	cmp	r6, #0
   15838:	bne	15824 <__assert_fail@plt+0x3f94>
   1583c:	b	15800 <__assert_fail@plt+0x3f70>
   15840:	ldr	r5, [r4]
   15844:	ldr	r0, [r4, #4]
   15848:	cmp	r5, r0
   1584c:	bcc	15864 <__assert_fail@plt+0x3fd4>
   15850:	b	15888 <__assert_fail@plt+0x3ff8>
   15854:	ldr	r0, [r4, #4]
   15858:	add	r5, r5, #8
   1585c:	cmp	r5, r0
   15860:	bcs	15888 <__assert_fail@plt+0x3ff8>
   15864:	ldr	r0, [r5, #4]
   15868:	cmp	r0, #0
   1586c:	beq	15854 <__assert_fail@plt+0x3fc4>
   15870:	ldr	r6, [r0, #4]
   15874:	bl	19b78 <__assert_fail@plt+0x82e8>
   15878:	cmp	r6, #0
   1587c:	mov	r0, r6
   15880:	bne	15870 <__assert_fail@plt+0x3fe0>
   15884:	b	15854 <__assert_fail@plt+0x3fc4>
   15888:	ldr	r0, [r4, #36]	; 0x24
   1588c:	cmp	r0, #0
   15890:	beq	158a8 <__assert_fail@plt+0x4018>
   15894:	ldr	r5, [r0, #4]
   15898:	bl	19b78 <__assert_fail@plt+0x82e8>
   1589c:	cmp	r5, #0
   158a0:	mov	r0, r5
   158a4:	bne	15894 <__assert_fail@plt+0x4004>
   158a8:	ldr	r0, [r4]
   158ac:	bl	19b78 <__assert_fail@plt+0x82e8>
   158b0:	mov	r0, r4
   158b4:	pop	{r4, r5, r6, sl, fp, lr}
   158b8:	b	19b78 <__assert_fail@plt+0x82e8>
   158bc:	push	{r4, r5, r6, sl, fp, lr}
   158c0:	add	fp, sp, #16
   158c4:	sub	sp, sp, #40	; 0x28
   158c8:	mov	r2, r1
   158cc:	mov	r4, r0
   158d0:	ldr	r1, [r0, #20]
   158d4:	mov	r0, r2
   158d8:	bl	156a8 <__assert_fail@plt+0x3e18>
   158dc:	mov	r5, #0
   158e0:	cmp	r0, #0
   158e4:	beq	159c0 <__assert_fail@plt+0x4130>
   158e8:	mov	r6, r0
   158ec:	ldr	r0, [r4, #8]
   158f0:	cmp	r6, r0
   158f4:	bne	15900 <__assert_fail@plt+0x4070>
   158f8:	mov	r5, #1
   158fc:	b	159c0 <__assert_fail@plt+0x4130>
   15900:	mov	r0, r6
   15904:	mov	r1, #8
   15908:	bl	19050 <__assert_fail@plt+0x77c0>
   1590c:	str	r0, [sp]
   15910:	cmp	r0, #0
   15914:	beq	159c0 <__assert_fail@plt+0x4130>
   15918:	mov	r0, #0
   1591c:	str	r0, [sp, #16]
   15920:	str	r0, [sp, #12]
   15924:	str	r6, [sp, #8]
   15928:	ldr	r0, [sp]
   1592c:	add	r0, r0, r6, lsl #3
   15930:	str	r0, [sp, #4]
   15934:	add	r6, r4, #20
   15938:	ldm	r6, {r0, r1, r2, r3, r6}
   1593c:	add	ip, sp, #20
   15940:	stm	ip, {r0, r1, r2, r3, r6}
   15944:	mov	r0, sp
   15948:	mov	r1, r4
   1594c:	mov	r2, #0
   15950:	bl	159d0 <__assert_fail@plt+0x4140>
   15954:	cmp	r0, #0
   15958:	beq	1597c <__assert_fail@plt+0x40ec>
   1595c:	ldr	r0, [r4]
   15960:	bl	19b78 <__assert_fail@plt+0x82e8>
   15964:	ldm	sp, {r0, r1, r2, r3}
   15968:	stm	r4, {r0, r1, r2, r3}
   1596c:	ldr	r0, [sp, #36]	; 0x24
   15970:	str	r0, [r4, #36]	; 0x24
   15974:	mov	r5, #1
   15978:	b	159c0 <__assert_fail@plt+0x4130>
   1597c:	ldr	r0, [sp, #36]	; 0x24
   15980:	str	r0, [r4, #36]	; 0x24
   15984:	mov	r1, sp
   15988:	mov	r0, r4
   1598c:	mov	r2, #1
   15990:	bl	159d0 <__assert_fail@plt+0x4140>
   15994:	cmp	r0, #0
   15998:	beq	159cc <__assert_fail@plt+0x413c>
   1599c:	mov	r1, sp
   159a0:	mov	r5, #0
   159a4:	mov	r0, r4
   159a8:	mov	r2, #0
   159ac:	bl	159d0 <__assert_fail@plt+0x4140>
   159b0:	cmp	r0, #0
   159b4:	beq	159cc <__assert_fail@plt+0x413c>
   159b8:	ldr	r0, [sp]
   159bc:	bl	19b78 <__assert_fail@plt+0x82e8>
   159c0:	mov	r0, r5
   159c4:	sub	sp, fp, #16
   159c8:	pop	{r4, r5, r6, sl, fp, pc}
   159cc:	bl	11854 <abort@plt>
   159d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d4:	add	fp, sp, #28
   159d8:	sub	sp, sp, #4
   159dc:	mov	r7, r0
   159e0:	ldr	r6, [r1]
   159e4:	ldr	r0, [r1, #4]
   159e8:	cmp	r6, r0
   159ec:	bcs	15af8 <__assert_fail@plt+0x4268>
   159f0:	mov	r9, r2
   159f4:	mov	sl, r1
   159f8:	b	15a30 <__assert_fail@plt+0x41a0>
   159fc:	str	r4, [r5]
   15a00:	ldr	r0, [r7, #12]
   15a04:	add	r0, r0, #1
   15a08:	str	r0, [r7, #12]
   15a0c:	mov	r0, #0
   15a10:	str	r0, [r6]
   15a14:	ldr	r0, [sl, #12]
   15a18:	sub	r0, r0, #1
   15a1c:	str	r0, [sl, #12]
   15a20:	add	r6, r6, #8
   15a24:	ldr	r0, [sl, #4]
   15a28:	cmp	r6, r0
   15a2c:	bcs	15af8 <__assert_fail@plt+0x4268>
   15a30:	ldr	r0, [r6]
   15a34:	cmp	r0, #0
   15a38:	beq	15a20 <__assert_fail@plt+0x4190>
   15a3c:	ldr	r4, [r6, #4]
   15a40:	cmp	r4, #0
   15a44:	bne	15a74 <__assert_fail@plt+0x41e4>
   15a48:	b	15aa4 <__assert_fail@plt+0x4214>
   15a4c:	str	r5, [r0]
   15a50:	ldr	r0, [r7, #12]
   15a54:	add	r0, r0, #1
   15a58:	str	r0, [r7, #12]
   15a5c:	mov	r0, r7
   15a60:	mov	r1, r4
   15a64:	bl	15f7c <__assert_fail@plt+0x46ec>
   15a68:	cmp	r8, #0
   15a6c:	mov	r4, r8
   15a70:	beq	15aa4 <__assert_fail@plt+0x4214>
   15a74:	ldr	r5, [r4]
   15a78:	mov	r0, r7
   15a7c:	mov	r1, r5
   15a80:	bl	152b0 <__assert_fail@plt+0x3a20>
   15a84:	ldr	r1, [r0]
   15a88:	ldr	r8, [r4, #4]
   15a8c:	cmp	r1, #0
   15a90:	beq	15a4c <__assert_fail@plt+0x41bc>
   15a94:	ldr	r1, [r0, #4]
   15a98:	str	r1, [r4, #4]
   15a9c:	str	r4, [r0, #4]
   15aa0:	b	15a68 <__assert_fail@plt+0x41d8>
   15aa4:	mov	r0, #0
   15aa8:	str	r0, [r6, #4]
   15aac:	cmp	r9, #0
   15ab0:	bne	15a20 <__assert_fail@plt+0x4190>
   15ab4:	ldr	r4, [r6]
   15ab8:	mov	r0, r7
   15abc:	mov	r1, r4
   15ac0:	bl	152b0 <__assert_fail@plt+0x3a20>
   15ac4:	mov	r5, r0
   15ac8:	ldr	r0, [r0]
   15acc:	cmp	r0, #0
   15ad0:	beq	159fc <__assert_fail@plt+0x416c>
   15ad4:	mov	r0, r7
   15ad8:	bl	15d68 <__assert_fail@plt+0x44d8>
   15adc:	cmp	r0, #0
   15ae0:	beq	15b04 <__assert_fail@plt+0x4274>
   15ae4:	str	r4, [r0]
   15ae8:	ldr	r1, [r5, #4]
   15aec:	str	r1, [r0, #4]
   15af0:	str	r0, [r5, #4]
   15af4:	b	15a0c <__assert_fail@plt+0x417c>
   15af8:	mov	r0, #1
   15afc:	sub	sp, fp, #28
   15b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b04:	mov	r0, #0
   15b08:	sub	sp, fp, #28
   15b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b10:	push	{r4, r5, r6, r7, fp, lr}
   15b14:	add	fp, sp, #16
   15b18:	sub	sp, sp, #8
   15b1c:	cmp	r1, #0
   15b20:	beq	15c80 <__assert_fail@plt+0x43f0>
   15b24:	mov	r7, r2
   15b28:	mov	r5, r1
   15b2c:	mov	r4, r0
   15b30:	add	r2, sp, #4
   15b34:	mov	r6, #0
   15b38:	mov	r3, #0
   15b3c:	bl	15c88 <__assert_fail@plt+0x43f8>
   15b40:	cmp	r0, #0
   15b44:	beq	15b54 <__assert_fail@plt+0x42c4>
   15b48:	cmp	r7, #0
   15b4c:	strne	r0, [r7]
   15b50:	b	15c74 <__assert_fail@plt+0x43e4>
   15b54:	vldr	s0, [r4, #8]
   15b58:	vldr	s2, [r4, #12]
   15b5c:	ldr	r0, [r4, #20]
   15b60:	vldr	s4, [r0, #8]
   15b64:	vcvt.f32.u32	s0, s0
   15b68:	vcvt.f32.u32	s2, s2
   15b6c:	vmul.f32	s0, s4, s0
   15b70:	vcmpe.f32	s0, s2
   15b74:	vmrs	APSR_nzcv, fpscr
   15b78:	bpl	15c0c <__assert_fail@plt+0x437c>
   15b7c:	mov	r0, r4
   15b80:	bl	155fc <__assert_fail@plt+0x3d6c>
   15b84:	vldr	s0, [r4, #8]
   15b88:	vldr	s4, [r4, #12]
   15b8c:	ldr	r0, [r4, #20]
   15b90:	vcvt.f32.u32	s2, s0
   15b94:	vldr	s0, [r0, #8]
   15b98:	vcvt.f32.u32	s4, s4
   15b9c:	vmul.f32	s6, s0, s2
   15ba0:	vcmpe.f32	s6, s4
   15ba4:	vmrs	APSR_nzcv, fpscr
   15ba8:	bpl	15c0c <__assert_fail@plt+0x437c>
   15bac:	vldr	s4, [r0, #12]
   15bb0:	vmul.f32	s2, s4, s2
   15bb4:	ldrb	r0, [r0, #16]
   15bb8:	vmul.f32	s0, s0, s2
   15bbc:	mvn	r6, #0
   15bc0:	vldr	s4, [pc, #188]	; 15c84 <__assert_fail@plt+0x43f4>
   15bc4:	cmp	r0, #0
   15bc8:	vseleq.f32	s0, s0, s2
   15bcc:	vcmpe.f32	s0, s4
   15bd0:	vmrs	APSR_nzcv, fpscr
   15bd4:	bge	15c74 <__assert_fail@plt+0x43e4>
   15bd8:	vcvt.u32.f32	s0, s0
   15bdc:	vmov	r1, s0
   15be0:	mov	r0, r4
   15be4:	bl	158bc <__assert_fail@plt+0x402c>
   15be8:	cmp	r0, #0
   15bec:	beq	15c74 <__assert_fail@plt+0x43e4>
   15bf0:	add	r2, sp, #4
   15bf4:	mov	r0, r4
   15bf8:	mov	r1, r5
   15bfc:	mov	r3, #0
   15c00:	bl	15c88 <__assert_fail@plt+0x43f8>
   15c04:	cmp	r0, #0
   15c08:	bne	15c80 <__assert_fail@plt+0x43f0>
   15c0c:	ldr	r6, [sp, #4]
   15c10:	ldr	r0, [r6]
   15c14:	cmp	r0, #0
   15c18:	beq	15c4c <__assert_fail@plt+0x43bc>
   15c1c:	mov	r0, r4
   15c20:	bl	15d68 <__assert_fail@plt+0x44d8>
   15c24:	cmp	r0, #0
   15c28:	beq	15c70 <__assert_fail@plt+0x43e0>
   15c2c:	str	r5, [r0]
   15c30:	ldr	r1, [r6, #4]
   15c34:	str	r1, [r0, #4]
   15c38:	str	r0, [r6, #4]
   15c3c:	ldr	r0, [r4, #16]
   15c40:	add	r0, r0, #1
   15c44:	str	r0, [r4, #16]
   15c48:	b	15c68 <__assert_fail@plt+0x43d8>
   15c4c:	str	r5, [r6]
   15c50:	ldr	r0, [r4, #12]
   15c54:	ldr	r1, [r4, #16]
   15c58:	add	r1, r1, #1
   15c5c:	add	r0, r0, #1
   15c60:	str	r0, [r4, #12]
   15c64:	str	r1, [r4, #16]
   15c68:	mov	r6, #1
   15c6c:	b	15c74 <__assert_fail@plt+0x43e4>
   15c70:	mvn	r6, #0
   15c74:	mov	r0, r6
   15c78:	sub	sp, fp, #16
   15c7c:	pop	{r4, r5, r6, r7, fp, pc}
   15c80:	bl	11854 <abort@plt>
   15c84:	svcmi	0x00800000
   15c88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c8c:	add	fp, sp, #24
   15c90:	mov	r8, r3
   15c94:	mov	r4, r2
   15c98:	mov	r7, r1
   15c9c:	mov	r5, r0
   15ca0:	bl	152b0 <__assert_fail@plt+0x3a20>
   15ca4:	str	r0, [r4]
   15ca8:	ldr	r1, [r0]
   15cac:	mov	r4, #0
   15cb0:	cmp	r1, #0
   15cb4:	beq	15d60 <__assert_fail@plt+0x44d0>
   15cb8:	mov	r6, r0
   15cbc:	cmp	r1, r7
   15cc0:	beq	15cd8 <__assert_fail@plt+0x4448>
   15cc4:	ldr	r2, [r5, #28]
   15cc8:	mov	r0, r7
   15ccc:	blx	r2
   15cd0:	cmp	r0, #0
   15cd4:	beq	15cfc <__assert_fail@plt+0x446c>
   15cd8:	ldr	r4, [r6]
   15cdc:	cmp	r8, #0
   15ce0:	beq	15d60 <__assert_fail@plt+0x44d0>
   15ce4:	ldr	r1, [r6, #4]
   15ce8:	cmp	r1, #0
   15cec:	beq	15d58 <__assert_fail@plt+0x44c8>
   15cf0:	ldm	r1, {r0, r2}
   15cf4:	stm	r6, {r0, r2}
   15cf8:	b	15d48 <__assert_fail@plt+0x44b8>
   15cfc:	ldr	r0, [r6, #4]!
   15d00:	cmp	r0, #0
   15d04:	beq	15d60 <__assert_fail@plt+0x44d0>
   15d08:	ldr	r1, [r0]
   15d0c:	cmp	r1, r7
   15d10:	beq	15d30 <__assert_fail@plt+0x44a0>
   15d14:	ldr	r2, [r5, #28]
   15d18:	mov	r0, r7
   15d1c:	blx	r2
   15d20:	cmp	r0, #0
   15d24:	bne	15d30 <__assert_fail@plt+0x44a0>
   15d28:	ldr	r6, [r6]
   15d2c:	b	15cfc <__assert_fail@plt+0x446c>
   15d30:	ldr	r1, [r6]
   15d34:	ldr	r4, [r1]
   15d38:	cmp	r8, #0
   15d3c:	beq	15d60 <__assert_fail@plt+0x44d0>
   15d40:	ldr	r0, [r1, #4]
   15d44:	str	r0, [r6]
   15d48:	mov	r0, r5
   15d4c:	bl	15f7c <__assert_fail@plt+0x46ec>
   15d50:	mov	r0, r4
   15d54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d58:	mov	r0, #0
   15d5c:	str	r0, [r6]
   15d60:	mov	r0, r4
   15d64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d68:	mov	r1, r0
   15d6c:	ldr	r0, [r0, #36]	; 0x24
   15d70:	cmp	r0, #0
   15d74:	ldrne	r2, [r0, #4]
   15d78:	strne	r2, [r1, #36]	; 0x24
   15d7c:	bxne	lr
   15d80:	mov	r0, #8
   15d84:	b	190a4 <__assert_fail@plt+0x7814>
   15d88:	push	{r4, sl, fp, lr}
   15d8c:	add	fp, sp, #8
   15d90:	sub	sp, sp, #8
   15d94:	mov	r4, r1
   15d98:	add	r2, sp, #4
   15d9c:	bl	15b10 <__assert_fail@plt+0x4280>
   15da0:	cmn	r0, #1
   15da4:	beq	15db8 <__assert_fail@plt+0x4528>
   15da8:	ldr	r1, [sp, #4]
   15dac:	cmp	r0, #0
   15db0:	moveq	r4, r1
   15db4:	b	15dbc <__assert_fail@plt+0x452c>
   15db8:	mov	r4, #0
   15dbc:	mov	r0, r4
   15dc0:	sub	sp, fp, #8
   15dc4:	pop	{r4, sl, fp, pc}
   15dc8:	push	{r4, r5, r6, sl, fp, lr}
   15dcc:	add	fp, sp, #16
   15dd0:	sub	sp, sp, #8
   15dd4:	mov	r4, r0
   15dd8:	add	r2, sp, #4
   15ddc:	mov	r3, #1
   15de0:	bl	15c88 <__assert_fail@plt+0x43f8>
   15de4:	mov	r5, r0
   15de8:	cmp	r0, #0
   15dec:	beq	15ecc <__assert_fail@plt+0x463c>
   15df0:	ldr	r0, [r4, #16]
   15df4:	sub	r0, r0, #1
   15df8:	str	r0, [r4, #16]
   15dfc:	ldr	r0, [sp, #4]
   15e00:	ldr	r0, [r0]
   15e04:	cmp	r0, #0
   15e08:	bne	15ecc <__assert_fail@plt+0x463c>
   15e0c:	ldr	r0, [r4, #12]
   15e10:	sub	r0, r0, #1
   15e14:	vldr	s0, [r4, #8]
   15e18:	str	r0, [r4, #12]
   15e1c:	ldr	r1, [r4, #20]
   15e20:	vldr	s2, [r1]
   15e24:	vcvt.f32.u32	s0, s0
   15e28:	vmov	s4, r0
   15e2c:	vcvt.f32.u32	s4, s4
   15e30:	vmul.f32	s0, s2, s0
   15e34:	vcmpe.f32	s0, s4
   15e38:	vmrs	APSR_nzcv, fpscr
   15e3c:	ble	15ecc <__assert_fail@plt+0x463c>
   15e40:	mov	r0, r4
   15e44:	bl	155fc <__assert_fail@plt+0x3d6c>
   15e48:	vldr	s0, [r4, #8]
   15e4c:	vldr	s2, [r4, #12]
   15e50:	ldr	r0, [r4, #20]
   15e54:	vcvt.f32.u32	s0, s0
   15e58:	vldr	s4, [r0]
   15e5c:	vcvt.f32.u32	s2, s2
   15e60:	vmul.f32	s4, s4, s0
   15e64:	vcmpe.f32	s4, s2
   15e68:	vmrs	APSR_nzcv, fpscr
   15e6c:	ble	15ecc <__assert_fail@plt+0x463c>
   15e70:	vldr	s2, [r0, #4]
   15e74:	ldrb	r1, [r0, #16]
   15e78:	vmul.f32	s0, s2, s0
   15e7c:	cmp	r1, #0
   15e80:	bne	15e8c <__assert_fail@plt+0x45fc>
   15e84:	vldr	s2, [r0, #8]
   15e88:	vmul.f32	s0, s0, s2
   15e8c:	vcvt.u32.f32	s0, s0
   15e90:	vmov	r1, s0
   15e94:	mov	r0, r4
   15e98:	bl	158bc <__assert_fail@plt+0x402c>
   15e9c:	cmp	r0, #0
   15ea0:	bne	15ecc <__assert_fail@plt+0x463c>
   15ea4:	ldr	r0, [r4, #36]	; 0x24
   15ea8:	cmp	r0, #0
   15eac:	beq	15ec4 <__assert_fail@plt+0x4634>
   15eb0:	ldr	r6, [r0, #4]
   15eb4:	bl	19b78 <__assert_fail@plt+0x82e8>
   15eb8:	cmp	r6, #0
   15ebc:	mov	r0, r6
   15ec0:	bne	15eb0 <__assert_fail@plt+0x4620>
   15ec4:	mov	r0, #0
   15ec8:	str	r0, [r4, #36]	; 0x24
   15ecc:	mov	r0, r5
   15ed0:	sub	sp, fp, #16
   15ed4:	pop	{r4, r5, r6, sl, fp, pc}
   15ed8:	b	15dc8 <__assert_fail@plt+0x4538>
   15edc:	push	{r4, r5, fp, lr}
   15ee0:	add	fp, sp, #8
   15ee4:	cmp	r0, #10
   15ee8:	movls	r0, #10
   15eec:	orr	r5, r0, #1
   15ef0:	mvn	r4, #0
   15ef4:	cmn	r5, #1
   15ef8:	beq	15f18 <__assert_fail@plt+0x4688>
   15efc:	mov	r0, r5
   15f00:	bl	15f2c <__assert_fail@plt+0x469c>
   15f04:	cmp	r0, #0
   15f08:	bne	15f20 <__assert_fail@plt+0x4690>
   15f0c:	add	r5, r5, #2
   15f10:	cmn	r5, #1
   15f14:	bne	15efc <__assert_fail@plt+0x466c>
   15f18:	mov	r0, r4
   15f1c:	pop	{r4, r5, fp, pc}
   15f20:	mov	r4, r5
   15f24:	mov	r0, r4
   15f28:	pop	{r4, r5, fp, pc}
   15f2c:	mov	ip, #3
   15f30:	cmp	r0, #10
   15f34:	bcc	15f68 <__assert_fail@plt+0x46d8>
   15f38:	mov	ip, #3
   15f3c:	mov	r2, #9
   15f40:	mov	r3, #16
   15f44:	udiv	r1, r0, ip
   15f48:	mls	r1, r1, ip, r0
   15f4c:	cmp	r1, #0
   15f50:	beq	15f68 <__assert_fail@plt+0x46d8>
   15f54:	add	r2, r3, r2
   15f58:	add	r3, r3, #8
   15f5c:	add	ip, ip, #2
   15f60:	cmp	r2, r0
   15f64:	bcc	15f44 <__assert_fail@plt+0x46b4>
   15f68:	udiv	r1, r0, ip
   15f6c:	mls	r0, r1, ip, r0
   15f70:	cmp	r0, #0
   15f74:	movwne	r0, #1
   15f78:	bx	lr
   15f7c:	mov	r2, #0
   15f80:	str	r2, [r1]
   15f84:	ldr	r2, [r0, #36]	; 0x24
   15f88:	str	r2, [r1, #4]
   15f8c:	str	r1, [r0, #36]	; 0x24
   15f90:	bx	lr
   15f94:	mov	r2, #0
   15f98:	str	r2, [r0, #20]
   15f9c:	str	r2, [r0, #24]
   15fa0:	mov	r3, #1
   15fa4:	strb	r3, [r0, #28]
   15fa8:	str	r1, [r0, r2, lsl #2]
   15fac:	add	r2, r2, #1
   15fb0:	cmp	r2, #4
   15fb4:	bne	15fa8 <__assert_fail@plt+0x4718>
   15fb8:	str	r1, [r0, #16]
   15fbc:	bx	lr
   15fc0:	ldrb	r0, [r0, #28]
   15fc4:	bx	lr
   15fc8:	ldr	r2, [r0, #20]
   15fcc:	ldrb	r3, [r0, #28]
   15fd0:	eor	r3, r3, #1
   15fd4:	add	r2, r2, r3
   15fd8:	and	r2, r2, #3
   15fdc:	ldr	ip, [r0, r2, lsl #2]
   15fe0:	str	r1, [r0, r2, lsl #2]
   15fe4:	str	r2, [r0, #20]
   15fe8:	ldr	r1, [r0, #24]
   15fec:	cmp	r2, r1
   15ff0:	addeq	r1, r1, r3
   15ff4:	andeq	r1, r1, #3
   15ff8:	streq	r1, [r0, #24]
   15ffc:	mov	r1, #0
   16000:	strb	r1, [r0, #28]
   16004:	mov	r0, ip
   16008:	bx	lr
   1600c:	push	{r4, sl, fp, lr}
   16010:	add	fp, sp, #8
   16014:	mov	r4, r0
   16018:	bl	15fc0 <__assert_fail@plt+0x4730>
   1601c:	cmp	r0, #0
   16020:	bne	16058 <__assert_fail@plt+0x47c8>
   16024:	ldr	r1, [r4, #16]
   16028:	ldr	r2, [r4, #20]
   1602c:	ldr	r0, [r4, r2, lsl #2]
   16030:	str	r1, [r4, r2, lsl #2]
   16034:	ldr	r1, [r4, #20]
   16038:	ldr	r2, [r4, #24]
   1603c:	cmp	r1, r2
   16040:	moveq	r1, #1
   16044:	strbeq	r1, [r4, #28]
   16048:	subne	r1, r1, #1
   1604c:	andne	r1, r1, #3
   16050:	strne	r1, [r4, #20]
   16054:	pop	{r4, sl, fp, pc}
   16058:	bl	11854 <abort@plt>
   1605c:	sub	sp, sp, #4
   16060:	push	{fp, lr}
   16064:	mov	fp, sp
   16068:	sub	sp, sp, #4
   1606c:	str	r3, [fp, #8]
   16070:	mov	r3, #0
   16074:	tst	r2, #64	; 0x40
   16078:	ldrne	r3, [fp, #8]
   1607c:	bl	116f8 <openat64@plt>
   16080:	bl	186f8 <__assert_fail@plt+0x6e68>
   16084:	mov	sp, fp
   16088:	pop	{fp, lr}
   1608c:	add	sp, sp, #4
   16090:	bx	lr
   16094:	push	{r4, r5, r6, sl, fp, lr}
   16098:	add	fp, sp, #16
   1609c:	mov	r4, r3
   160a0:	orr	r2, r2, #18688	; 0x4900
   160a4:	orr	r2, r2, #524288	; 0x80000
   160a8:	bl	1605c <__assert_fail@plt+0x47cc>
   160ac:	mov	r5, r0
   160b0:	mov	r0, #0
   160b4:	cmp	r5, #0
   160b8:	bmi	160f0 <__assert_fail@plt+0x4860>
   160bc:	mov	r0, r5
   160c0:	bl	117dc <fdopendir@plt>
   160c4:	cmp	r0, #0
   160c8:	beq	160d4 <__assert_fail@plt+0x4844>
   160cc:	str	r5, [r4]
   160d0:	pop	{r4, r5, r6, sl, fp, pc}
   160d4:	bl	11710 <__errno_location@plt>
   160d8:	mov	r4, r0
   160dc:	ldr	r6, [r0]
   160e0:	mov	r0, r5
   160e4:	bl	11860 <close@plt>
   160e8:	str	r6, [r4]
   160ec:	mov	r0, #0
   160f0:	pop	{r4, r5, r6, sl, fp, pc}
   160f4:	push	{r4, r5, fp, lr}
   160f8:	add	fp, sp, #8
   160fc:	cmp	r0, #0
   16100:	beq	16194 <__assert_fail@plt+0x4904>
   16104:	mov	r4, r0
   16108:	mov	r1, #47	; 0x2f
   1610c:	bl	117b8 <strrchr@plt>
   16110:	cmp	r0, #0
   16114:	mov	r5, r4
   16118:	addne	r5, r0, #1
   1611c:	sub	r0, r5, r4
   16120:	cmp	r0, #7
   16124:	blt	16178 <__assert_fail@plt+0x48e8>
   16128:	sub	r0, r5, #7
   1612c:	movw	r1, #46084	; 0xb404
   16130:	movt	r1, #1
   16134:	mov	r2, #7
   16138:	bl	11848 <strncmp@plt>
   1613c:	cmp	r0, #0
   16140:	bne	16178 <__assert_fail@plt+0x48e8>
   16144:	movw	r1, #46092	; 0xb40c
   16148:	movt	r1, #1
   1614c:	mov	r0, r5
   16150:	mov	r2, #3
   16154:	bl	11848 <strncmp@plt>
   16158:	cmp	r0, #0
   1615c:	beq	16168 <__assert_fail@plt+0x48d8>
   16160:	mov	r4, r5
   16164:	b	16178 <__assert_fail@plt+0x48e8>
   16168:	add	r4, r5, #3
   1616c:	movw	r0, #49584	; 0xc1b0
   16170:	movt	r0, #2
   16174:	str	r4, [r0]
   16178:	movw	r0, #49588	; 0xc1b4
   1617c:	movt	r0, #2
   16180:	str	r4, [r0]
   16184:	movw	r0, #49676	; 0xc20c
   16188:	movt	r0, #2
   1618c:	str	r4, [r0]
   16190:	pop	{r4, r5, fp, pc}
   16194:	movw	r0, #49600	; 0xc1c0
   16198:	movt	r0, #2
   1619c:	ldr	r3, [r0]
   161a0:	movw	r0, #46028	; 0xb3cc
   161a4:	movt	r0, #1
   161a8:	mov	r1, #55	; 0x37
   161ac:	mov	r2, #1
   161b0:	bl	115d8 <fwrite@plt>
   161b4:	bl	11854 <abort@plt>
   161b8:	push	{r4, r5, r6, sl, fp, lr}
   161bc:	add	fp, sp, #16
   161c0:	mov	r4, r0
   161c4:	movw	r0, #49680	; 0xc210
   161c8:	movt	r0, #2
   161cc:	cmp	r4, #0
   161d0:	moveq	r4, r0
   161d4:	bl	11710 <__errno_location@plt>
   161d8:	mov	r5, r0
   161dc:	ldr	r6, [r0]
   161e0:	mov	r0, r4
   161e4:	mov	r1, #48	; 0x30
   161e8:	bl	18ef0 <__assert_fail@plt+0x7660>
   161ec:	str	r6, [r5]
   161f0:	pop	{r4, r5, r6, sl, fp, pc}
   161f4:	movw	r1, #49680	; 0xc210
   161f8:	movt	r1, #2
   161fc:	cmp	r0, #0
   16200:	movne	r1, r0
   16204:	ldr	r0, [r1]
   16208:	bx	lr
   1620c:	movw	r2, #49680	; 0xc210
   16210:	movt	r2, #2
   16214:	cmp	r0, #0
   16218:	movne	r2, r0
   1621c:	str	r1, [r2]
   16220:	bx	lr
   16224:	movw	r3, #49680	; 0xc210
   16228:	movt	r3, #2
   1622c:	cmp	r0, #0
   16230:	movne	r3, r0
   16234:	ubfx	r0, r1, #5, #3
   16238:	add	ip, r3, r0, lsl #2
   1623c:	ldr	r3, [ip, #8]
   16240:	and	r1, r1, #31
   16244:	mov	r0, #1
   16248:	and	r0, r0, r3, lsr r1
   1624c:	and	r2, r2, #1
   16250:	eor	r2, r0, r2
   16254:	eor	r1, r3, r2, lsl r1
   16258:	str	r1, [ip, #8]
   1625c:	bx	lr
   16260:	movw	r2, #49680	; 0xc210
   16264:	movt	r2, #2
   16268:	cmp	r0, #0
   1626c:	movne	r2, r0
   16270:	ldr	r0, [r2, #4]
   16274:	str	r1, [r2, #4]
   16278:	bx	lr
   1627c:	push	{fp, lr}
   16280:	mov	fp, sp
   16284:	movw	r3, #49680	; 0xc210
   16288:	movt	r3, #2
   1628c:	cmp	r0, #0
   16290:	movne	r3, r0
   16294:	mov	r0, #10
   16298:	str	r0, [r3]
   1629c:	cmp	r1, #0
   162a0:	cmpne	r2, #0
   162a4:	bne	162ac <__assert_fail@plt+0x4a1c>
   162a8:	bl	11854 <abort@plt>
   162ac:	str	r1, [r3, #40]	; 0x28
   162b0:	str	r2, [r3, #44]	; 0x2c
   162b4:	pop	{fp, pc}
   162b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162bc:	add	fp, sp, #28
   162c0:	sub	sp, sp, #20
   162c4:	mov	r8, r3
   162c8:	mov	r9, r2
   162cc:	mov	sl, r1
   162d0:	mov	r7, r0
   162d4:	ldr	r0, [fp, #8]
   162d8:	movw	r5, #49680	; 0xc210
   162dc:	movt	r5, #2
   162e0:	cmp	r0, #0
   162e4:	movne	r5, r0
   162e8:	bl	11710 <__errno_location@plt>
   162ec:	mov	r4, r0
   162f0:	ldm	r5, {r0, r1}
   162f4:	ldr	r2, [r5, #40]	; 0x28
   162f8:	ldr	r3, [r5, #44]	; 0x2c
   162fc:	ldr	r6, [r4]
   16300:	add	r5, r5, #8
   16304:	stm	sp, {r0, r1, r5}
   16308:	str	r2, [sp, #12]
   1630c:	str	r3, [sp, #16]
   16310:	mov	r0, r7
   16314:	mov	r1, sl
   16318:	mov	r2, r9
   1631c:	mov	r3, r8
   16320:	bl	16330 <__assert_fail@plt+0x4aa0>
   16324:	str	r6, [r4]
   16328:	sub	sp, fp, #28
   1632c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16334:	add	fp, sp, #28
   16338:	sub	sp, sp, #156	; 0x9c
   1633c:	mov	r9, r3
   16340:	mov	r7, r1
   16344:	mov	r6, r0
   16348:	str	r2, [fp, #-80]	; 0xffffffb0
   1634c:	add	r0, r2, #1
   16350:	str	r0, [sp, #76]	; 0x4c
   16354:	ldr	r0, [fp, #12]
   16358:	and	r1, r0, #1
   1635c:	str	r1, [sp, #40]	; 0x28
   16360:	and	r1, r0, #4
   16364:	str	r1, [sp, #36]	; 0x24
   16368:	ubfx	r4, r0, #1, #1
   1636c:	bl	115f0 <__ctype_get_mb_cur_max@plt>
   16370:	str	r0, [sp, #44]	; 0x2c
   16374:	ldr	r0, [fp, #24]
   16378:	str	r0, [sp, #88]	; 0x58
   1637c:	ldr	r0, [fp, #20]
   16380:	str	r0, [sp, #80]	; 0x50
   16384:	ldr	r1, [fp, #8]
   16388:	mov	r0, #0
   1638c:	str	r0, [sp, #84]	; 0x54
   16390:	mov	r0, #0
   16394:	str	r0, [fp, #-84]	; 0xffffffac
   16398:	mov	r0, #0
   1639c:	str	r0, [fp, #-72]	; 0xffffffb8
   163a0:	mov	r0, #0
   163a4:	mov	r2, #0
   163a8:	str	r2, [fp, #-56]	; 0xffffffc8
   163ac:	mov	r2, #0
   163b0:	str	r2, [sp, #64]	; 0x40
   163b4:	mov	r2, #1
   163b8:	str	r2, [fp, #-48]	; 0xffffffd0
   163bc:	cmp	r1, #10
   163c0:	bhi	172ec <__assert_fail@plt+0x5a5c>
   163c4:	mov	sl, r7
   163c8:	mov	r7, r1
   163cc:	add	r1, pc, #24
   163d0:	mov	r8, #0
   163d4:	mov	r2, #1
   163d8:	mov	r3, #0
   163dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   163e0:	mov	lr, r9
   163e4:	mov	r5, r6
   163e8:	ldr	pc, [r1, r7, lsl #2]
   163ec:	andeq	r6, r1, r0, asr #9
   163f0:	andeq	r6, r1, r0, lsl #10
   163f4:	ldrdeq	r6, [r1], -r0
   163f8:			; <UNDEFINED> instruction: 0x000164b8
   163fc:	strdeq	r6, [r1], -r4
   16400:	andeq	r6, r1, r4, asr r5
   16404:	andeq	r6, r1, r0, ror #9
   16408:			; <UNDEFINED> instruction: 0x000165b0
   1640c:	andeq	r6, r1, r8, lsl r4
   16410:	andeq	r6, r1, r8, lsl r4
   16414:	andeq	r6, r1, r4, asr #8
   16418:	movw	r0, #46174	; 0xb45e
   1641c:	movt	r0, #1
   16420:	mov	r1, r7
   16424:	bl	178f4 <__assert_fail@plt+0x6064>
   16428:	str	r0, [sp, #80]	; 0x50
   1642c:	movw	r0, #47521	; 0xb9a1
   16430:	movt	r0, #1
   16434:	mov	r1, r7
   16438:	bl	178f4 <__assert_fail@plt+0x6064>
   1643c:	mov	r5, r6
   16440:	str	r0, [sp, #88]	; 0x58
   16444:	mov	r8, #0
   16448:	tst	r4, #1
   1644c:	str	r7, [fp, #-64]	; 0xffffffc0
   16450:	bne	16488 <__assert_fail@plt+0x4bf8>
   16454:	ldr	r0, [sp, #80]	; 0x50
   16458:	ldrb	r0, [r0]
   1645c:	cmp	r0, #0
   16460:	beq	16488 <__assert_fail@plt+0x4bf8>
   16464:	ldr	r1, [sp, #80]	; 0x50
   16468:	add	r1, r1, #1
   1646c:	mov	r8, #0
   16470:	cmp	r8, sl
   16474:	strbcc	r0, [r5, r8]
   16478:	ldrb	r0, [r1, r8]
   1647c:	add	r8, r8, #1
   16480:	cmp	r0, #0
   16484:	bne	16470 <__assert_fail@plt+0x4be0>
   16488:	ldr	r7, [sp, #88]	; 0x58
   1648c:	mov	r0, r7
   16490:	bl	116ec <strlen@plt>
   16494:	mov	r5, r6
   16498:	str	r0, [fp, #-72]	; 0xffffffb8
   1649c:	str	r7, [fp, #-84]	; 0xffffffac
   164a0:	mov	r2, #1
   164a4:	mov	r3, r4
   164a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   164ac:	mov	lr, r9
   164b0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   164b4:	b	165b0 <__assert_fail@plt+0x4d20>
   164b8:	mov	r0, #1
   164bc:	b	16500 <__assert_fail@plt+0x4c70>
   164c0:	mov	r7, #0
   164c4:	mov	r8, #0
   164c8:	mov	r2, r0
   164cc:	b	165ac <__assert_fail@plt+0x4d1c>
   164d0:	tst	r4, #1
   164d4:	bne	16500 <__assert_fail@plt+0x4c70>
   164d8:	mov	r2, r0
   164dc:	b	16528 <__assert_fail@plt+0x4c98>
   164e0:	mov	r0, #1
   164e4:	str	r0, [fp, #-72]	; 0xffffffb8
   164e8:	mov	r8, #0
   164ec:	mov	r7, #5
   164f0:	b	1656c <__assert_fail@plt+0x4cdc>
   164f4:	mov	r2, #1
   164f8:	tst	r4, #1
   164fc:	beq	16528 <__assert_fail@plt+0x4c98>
   16500:	mov	r1, #1
   16504:	str	r1, [fp, #-72]	; 0xffffffb8
   16508:	mov	r8, #0
   1650c:	mov	r7, #2
   16510:	movw	r1, #47521	; 0xb9a1
   16514:	movt	r1, #1
   16518:	str	r1, [fp, #-84]	; 0xffffffac
   1651c:	mov	r2, r0
   16520:	mov	r3, #1
   16524:	b	165b0 <__assert_fail@plt+0x4d20>
   16528:	mov	r8, #1
   1652c:	mov	r7, #2
   16530:	cmp	sl, #0
   16534:	movne	r0, #39	; 0x27
   16538:	strbne	r0, [r5]
   1653c:	movw	r0, #47521	; 0xb9a1
   16540:	movt	r0, #1
   16544:	str	r0, [fp, #-84]	; 0xffffffac
   16548:	mov	r0, #1
   1654c:	str	r0, [fp, #-72]	; 0xffffffb8
   16550:	b	165ac <__assert_fail@plt+0x4d1c>
   16554:	mov	r7, #5
   16558:	tst	r4, #1
   1655c:	beq	16584 <__assert_fail@plt+0x4cf4>
   16560:	mov	r0, #1
   16564:	str	r0, [fp, #-72]	; 0xffffffb8
   16568:	mov	r8, #0
   1656c:	movw	r0, #46172	; 0xb45c
   16570:	movt	r0, #1
   16574:	str	r0, [fp, #-84]	; 0xffffffac
   16578:	mov	r2, #1
   1657c:	mov	r3, #1
   16580:	b	165b0 <__assert_fail@plt+0x4d20>
   16584:	cmp	sl, #0
   16588:	movne	r0, #34	; 0x22
   1658c:	strbne	r0, [r5]
   16590:	mov	r8, #1
   16594:	movw	r0, #46172	; 0xb45c
   16598:	movt	r0, #1
   1659c:	str	r0, [fp, #-84]	; 0xffffffac
   165a0:	mov	r0, #1
   165a4:	str	r0, [fp, #-72]	; 0xffffffb8
   165a8:	mov	r2, #1
   165ac:	mov	r3, #0
   165b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165b4:	cmp	r0, #0
   165b8:	movwne	r0, #1
   165bc:	and	r1, r0, r3
   165c0:	and	r1, r2, r1
   165c4:	str	r1, [sp, #56]	; 0x38
   165c8:	sub	r1, r7, #2
   165cc:	clz	r1, r1
   165d0:	lsr	r1, r1, #5
   165d4:	and	r1, r1, r3
   165d8:	str	r1, [sp, #68]	; 0x44
   165dc:	str	r7, [fp, #-64]	; 0xffffffc0
   165e0:	subs	r1, r7, #2
   165e4:	movwne	r1, #1
   165e8:	eor	r4, r3, #1
   165ec:	str	r4, [fp, #-88]	; 0xffffffa8
   165f0:	orr	r4, r1, r4
   165f4:	str	r4, [sp, #72]	; 0x48
   165f8:	and	r1, r1, r2
   165fc:	and	r0, r0, r1
   16600:	str	r0, [fp, #-60]	; 0xffffffc4
   16604:	str	r3, [fp, #-76]	; 0xffffffb4
   16608:	orr	r0, r1, r3
   1660c:	eor	r0, r0, #1
   16610:	ldr	r1, [fp, #16]
   16614:	clz	r1, r1
   16618:	lsr	r1, r1, #5
   1661c:	orr	r0, r1, r0
   16620:	str	r0, [fp, #-68]	; 0xffffffbc
   16624:	str	r2, [sp, #92]	; 0x5c
   16628:	eor	r0, r2, #1
   1662c:	str	r0, [sp, #60]	; 0x3c
   16630:	mov	r7, #0
   16634:	cmn	lr, #1
   16638:	beq	16648 <__assert_fail@plt+0x4db8>
   1663c:	cmp	r7, lr
   16640:	bne	16654 <__assert_fail@plt+0x4dc4>
   16644:	b	17160 <__assert_fail@plt+0x58d0>
   16648:	ldrb	r0, [ip, r7]
   1664c:	cmp	r0, #0
   16650:	beq	17160 <__assert_fail@plt+0x58d0>
   16654:	mov	r9, #0
   16658:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1665c:	cmp	r0, #0
   16660:	beq	16694 <__assert_fail@plt+0x4e04>
   16664:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16668:	add	r4, r7, r0
   1666c:	cmp	r0, #2
   16670:	bcc	1668c <__assert_fail@plt+0x4dfc>
   16674:	cmn	lr, #1
   16678:	bne	1668c <__assert_fail@plt+0x4dfc>
   1667c:	mov	r0, ip
   16680:	bl	116ec <strlen@plt>
   16684:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16688:	mov	lr, r0
   1668c:	cmp	r4, lr
   16690:	bls	166a0 <__assert_fail@plt+0x4e10>
   16694:	mov	r0, #0
   16698:	str	r0, [fp, #-52]	; 0xffffffcc
   1669c:	b	166e4 <__assert_fail@plt+0x4e54>
   166a0:	mov	r4, lr
   166a4:	add	r0, ip, r7
   166a8:	ldr	r1, [fp, #-84]	; 0xffffffac
   166ac:	ldr	r2, [fp, #-72]	; 0xffffffb8
   166b0:	bl	116e0 <bcmp@plt>
   166b4:	cmp	r0, #0
   166b8:	mov	r1, r0
   166bc:	movwne	r1, #1
   166c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   166c4:	orr	r1, r1, r2
   166c8:	tst	r1, #1
   166cc:	beq	17234 <__assert_fail@plt+0x59a4>
   166d0:	clz	r0, r0
   166d4:	lsr	r0, r0, #5
   166d8:	str	r0, [fp, #-52]	; 0xffffffcc
   166dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   166e0:	mov	lr, r4
   166e4:	ldrb	r4, [ip, r7]
   166e8:	cmp	r4, #126	; 0x7e
   166ec:	bhi	16c1c <__assert_fail@plt+0x538c>
   166f0:	mov	r6, #1
   166f4:	mov	r2, #110	; 0x6e
   166f8:	mov	r0, #97	; 0x61
   166fc:	add	r3, pc, #4
   16700:	mov	r1, #0
   16704:	ldr	pc, [r3, r4, lsl #2]
   16708:	andeq	r6, r1, ip, ror sl
   1670c:	andeq	r6, r1, ip, lsl ip
   16710:	andeq	r6, r1, ip, lsl ip
   16714:	andeq	r6, r1, ip, lsl ip
   16718:	andeq	r6, r1, ip, lsl ip
   1671c:	andeq	r6, r1, ip, lsl ip
   16720:	andeq	r6, r1, ip, lsl ip
   16724:	strdeq	r6, [r1], -r0
   16728:	andeq	r6, r1, ip, asr sl
   1672c:	andeq	r6, r1, r4, asr sl
   16730:	andeq	r6, r1, r8, ror #20
   16734:	andeq	r6, r1, r4, lsl #23
   16738:	andeq	r6, r1, ip, asr #20
   1673c:	andeq	r6, r1, r4, ror #20
   16740:	andeq	r6, r1, ip, lsl ip
   16744:	andeq	r6, r1, ip, lsl ip
   16748:	andeq	r6, r1, ip, lsl ip
   1674c:	andeq	r6, r1, ip, lsl ip
   16750:	andeq	r6, r1, ip, lsl ip
   16754:	andeq	r6, r1, ip, lsl ip
   16758:	andeq	r6, r1, ip, lsl ip
   1675c:	andeq	r6, r1, ip, lsl ip
   16760:	andeq	r6, r1, ip, lsl ip
   16764:	andeq	r6, r1, ip, lsl ip
   16768:	andeq	r6, r1, ip, lsl ip
   1676c:	andeq	r6, r1, ip, lsl ip
   16770:	andeq	r6, r1, ip, lsl ip
   16774:	andeq	r6, r1, ip, lsl ip
   16778:	andeq	r6, r1, ip, lsl ip
   1677c:	andeq	r6, r1, ip, lsl ip
   16780:	andeq	r6, r1, ip, lsl ip
   16784:	andeq	r6, r1, ip, lsl ip
   16788:	andeq	r6, r1, r0, lsl #20
   1678c:	andeq	r6, r1, r4, lsl #20
   16790:	andeq	r6, r1, r4, lsl #20
   16794:	andeq	r6, r1, ip, ror #19
   16798:	andeq	r6, r1, r4, lsl #20
   1679c:	andeq	r6, r1, r4, lsl #18
   167a0:	andeq	r6, r1, r4, lsl #20
   167a4:	andeq	r6, r1, ip, lsl #23
   167a8:	andeq	r6, r1, r4, lsl #20
   167ac:	andeq	r6, r1, r4, lsl #20
   167b0:	andeq	r6, r1, r4, lsl #20
   167b4:	andeq	r6, r1, r4, lsl #18
   167b8:	andeq	r6, r1, r4, lsl #18
   167bc:	andeq	r6, r1, r4, lsl #18
   167c0:	andeq	r6, r1, r4, lsl #18
   167c4:	andeq	r6, r1, r4, lsl #18
   167c8:	andeq	r6, r1, r4, lsl #18
   167cc:	andeq	r6, r1, r4, lsl #18
   167d0:	andeq	r6, r1, r4, lsl #18
   167d4:	andeq	r6, r1, r4, lsl #18
   167d8:	andeq	r6, r1, r4, lsl #18
   167dc:	andeq	r6, r1, r4, lsl #18
   167e0:	andeq	r6, r1, r4, lsl #18
   167e4:	andeq	r6, r1, r4, lsl #18
   167e8:	andeq	r6, r1, r4, lsl #18
   167ec:	andeq	r6, r1, r4, lsl #18
   167f0:	andeq	r6, r1, r4, lsl #18
   167f4:	andeq	r6, r1, r4, lsl #20
   167f8:	andeq	r6, r1, r4, lsl #20
   167fc:	andeq	r6, r1, r4, lsl #20
   16800:	andeq	r6, r1, r4, lsl #20
   16804:	andeq	r6, r1, r4, asr fp
   16808:	andeq	r6, r1, ip, lsl ip
   1680c:	andeq	r6, r1, r4, lsl #18
   16810:	andeq	r6, r1, r4, lsl #18
   16814:	andeq	r6, r1, r4, lsl #18
   16818:	andeq	r6, r1, r4, lsl #18
   1681c:	andeq	r6, r1, r4, lsl #18
   16820:	andeq	r6, r1, r4, lsl #18
   16824:	andeq	r6, r1, r4, lsl #18
   16828:	andeq	r6, r1, r4, lsl #18
   1682c:	andeq	r6, r1, r4, lsl #18
   16830:	andeq	r6, r1, r4, lsl #18
   16834:	andeq	r6, r1, r4, lsl #18
   16838:	andeq	r6, r1, r4, lsl #18
   1683c:	andeq	r6, r1, r4, lsl #18
   16840:	andeq	r6, r1, r4, lsl #18
   16844:	andeq	r6, r1, r4, lsl #18
   16848:	andeq	r6, r1, r4, lsl #18
   1684c:	andeq	r6, r1, r4, lsl #18
   16850:	andeq	r6, r1, r4, lsl #18
   16854:	andeq	r6, r1, r4, lsl #18
   16858:	andeq	r6, r1, r4, lsl #18
   1685c:	andeq	r6, r1, r4, lsl #18
   16860:	andeq	r6, r1, r4, lsl #18
   16864:	andeq	r6, r1, r4, lsl #18
   16868:	andeq	r6, r1, r4, lsl #18
   1686c:	andeq	r6, r1, r4, lsl #18
   16870:	andeq	r6, r1, r4, lsl #18
   16874:	andeq	r6, r1, r4, lsl #20
   16878:	andeq	r6, r1, ip, lsr #20
   1687c:	andeq	r6, r1, r4, lsl #18
   16880:	andeq	r6, r1, r4, lsl #20
   16884:	andeq	r6, r1, r4, lsl #18
   16888:	andeq	r6, r1, r4, lsl #20
   1688c:	andeq	r6, r1, r4, lsl #18
   16890:	andeq	r6, r1, r4, lsl #18
   16894:	andeq	r6, r1, r4, lsl #18
   16898:	andeq	r6, r1, r4, lsl #18
   1689c:	andeq	r6, r1, r4, lsl #18
   168a0:	andeq	r6, r1, r4, lsl #18
   168a4:	andeq	r6, r1, r4, lsl #18
   168a8:	andeq	r6, r1, r4, lsl #18
   168ac:	andeq	r6, r1, r4, lsl #18
   168b0:	andeq	r6, r1, r4, lsl #18
   168b4:	andeq	r6, r1, r4, lsl #18
   168b8:	andeq	r6, r1, r4, lsl #18
   168bc:	andeq	r6, r1, r4, lsl #18
   168c0:	andeq	r6, r1, r4, lsl #18
   168c4:	andeq	r6, r1, r4, lsl #18
   168c8:	andeq	r6, r1, r4, lsl #18
   168cc:	andeq	r6, r1, r4, lsl #18
   168d0:	andeq	r6, r1, r4, lsl #18
   168d4:	andeq	r6, r1, r4, lsl #18
   168d8:	andeq	r6, r1, r4, lsl #18
   168dc:	andeq	r6, r1, r4, lsl #18
   168e0:	andeq	r6, r1, r4, lsl #18
   168e4:	andeq	r6, r1, r4, lsl #18
   168e8:	andeq	r6, r1, r4, lsl #18
   168ec:	andeq	r6, r1, r4, lsl #18
   168f0:	andeq	r6, r1, r4, lsl #18
   168f4:	andeq	r6, r1, r0, asr #19
   168f8:	andeq	r6, r1, r4, lsl #20
   168fc:	andeq	r6, r1, r0, asr #19
   16900:	andeq	r6, r1, ip, ror #19
   16904:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16908:	tst	r0, #1
   1690c:	bne	16938 <__assert_fail@plt+0x50a8>
   16910:	ubfx	r0, r4, #5, #3
   16914:	ldr	r1, [fp, #16]
   16918:	ldr	r0, [r1, r0, lsl #2]
   1691c:	and	r1, r4, #31
   16920:	mov	r2, #1
   16924:	tst	r0, r2, lsl r1
   16928:	beq	16938 <__assert_fail@plt+0x50a8>
   1692c:	mov	r0, r4
   16930:	mov	r1, r6
   16934:	b	1694c <__assert_fail@plt+0x50bc>
   16938:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1693c:	cmp	r0, #0
   16940:	mov	r0, r4
   16944:	mov	r1, r6
   16948:	beq	16c84 <__assert_fail@plt+0x53f4>
   1694c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16950:	tst	r2, #1
   16954:	bne	17248 <__assert_fail@plt+0x59b8>
   16958:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1695c:	subs	r2, r2, #2
   16960:	movwne	r2, #1
   16964:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16968:	orr	r2, r2, r3
   1696c:	tst	r2, #1
   16970:	bne	169ac <__assert_fail@plt+0x511c>
   16974:	cmp	r8, sl
   16978:	movcc	r2, #39	; 0x27
   1697c:	strbcc	r2, [r5, r8]
   16980:	add	r2, r8, #1
   16984:	cmp	r2, sl
   16988:	movcc	r3, #36	; 0x24
   1698c:	strbcc	r3, [r5, r2]
   16990:	add	r2, r8, #2
   16994:	cmp	r2, sl
   16998:	movcc	r3, #39	; 0x27
   1699c:	strbcc	r3, [r5, r2]
   169a0:	add	r8, r8, #3
   169a4:	mov	r2, #1
   169a8:	str	r2, [fp, #-56]	; 0xffffffc8
   169ac:	cmp	r8, sl
   169b0:	movcc	r2, #92	; 0x5c
   169b4:	strbcc	r2, [r5, r8]
   169b8:	add	r8, r8, #1
   169bc:	b	16cc8 <__assert_fail@plt+0x5438>
   169c0:	cmp	lr, #1
   169c4:	beq	169ec <__assert_fail@plt+0x515c>
   169c8:	mov	r6, #0
   169cc:	cmn	lr, #1
   169d0:	bne	169f8 <__assert_fail@plt+0x5168>
   169d4:	ldrb	r0, [ip, #1]
   169d8:	cmp	r0, #0
   169dc:	beq	169ec <__assert_fail@plt+0x515c>
   169e0:	mvn	lr, #0
   169e4:	mov	r9, #0
   169e8:	b	16904 <__assert_fail@plt+0x5074>
   169ec:	mov	r6, #0
   169f0:	cmp	r7, #0
   169f4:	beq	16a00 <__assert_fail@plt+0x5170>
   169f8:	mov	r9, #0
   169fc:	b	16904 <__assert_fail@plt+0x5074>
   16a00:	mov	r1, #1
   16a04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16a08:	cmp	r0, #2
   16a0c:	bne	16a24 <__assert_fail@plt+0x5194>
   16a10:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a14:	tst	r0, #1
   16a18:	mov	r6, r1
   16a1c:	beq	16904 <__assert_fail@plt+0x5074>
   16a20:	b	17248 <__assert_fail@plt+0x59b8>
   16a24:	mov	r6, r1
   16a28:	b	16904 <__assert_fail@plt+0x5074>
   16a2c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16a30:	cmp	r0, #2
   16a34:	bne	16c68 <__assert_fail@plt+0x53d8>
   16a38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a3c:	tst	r0, #1
   16a40:	bne	17248 <__assert_fail@plt+0x59b8>
   16a44:	mov	r9, #0
   16a48:	b	16c7c <__assert_fail@plt+0x53ec>
   16a4c:	mov	r0, #102	; 0x66
   16a50:	b	16cf0 <__assert_fail@plt+0x5460>
   16a54:	mov	r2, #116	; 0x74
   16a58:	b	16a68 <__assert_fail@plt+0x51d8>
   16a5c:	mov	r0, #98	; 0x62
   16a60:	b	16cf0 <__assert_fail@plt+0x5460>
   16a64:	mov	r2, #114	; 0x72
   16a68:	ldr	r0, [sp, #72]	; 0x48
   16a6c:	tst	r0, #1
   16a70:	mov	r0, r2
   16a74:	bne	16cf0 <__assert_fail@plt+0x5460>
   16a78:	b	17248 <__assert_fail@plt+0x59b8>
   16a7c:	ldr	r0, [sp, #92]	; 0x5c
   16a80:	tst	r0, #1
   16a84:	beq	16d0c <__assert_fail@plt+0x547c>
   16a88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a8c:	tst	r0, #1
   16a90:	bne	17248 <__assert_fail@plt+0x59b8>
   16a94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16a98:	subs	r0, r0, #2
   16a9c:	movwne	r0, #1
   16aa0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16aa4:	orr	r0, r0, r1
   16aa8:	tst	r0, #1
   16aac:	bne	16ae8 <__assert_fail@plt+0x5258>
   16ab0:	cmp	r8, sl
   16ab4:	movcc	r0, #39	; 0x27
   16ab8:	strbcc	r0, [r5, r8]
   16abc:	add	r0, r8, #1
   16ac0:	cmp	r0, sl
   16ac4:	movcc	r1, #36	; 0x24
   16ac8:	strbcc	r1, [r5, r0]
   16acc:	add	r0, r8, #2
   16ad0:	cmp	r0, sl
   16ad4:	movcc	r1, #39	; 0x27
   16ad8:	strbcc	r1, [r5, r0]
   16adc:	add	r8, r8, #3
   16ae0:	mov	r0, #1
   16ae4:	str	r0, [fp, #-56]	; 0xffffffc8
   16ae8:	cmp	r8, sl
   16aec:	movcc	r0, #92	; 0x5c
   16af0:	strbcc	r0, [r5, r8]
   16af4:	add	r0, r8, #1
   16af8:	mov	r6, #0
   16afc:	mov	r9, #1
   16b00:	mov	r4, #48	; 0x30
   16b04:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16b08:	cmp	r1, #2
   16b0c:	beq	16ed0 <__assert_fail@plt+0x5640>
   16b10:	add	r1, r7, #1
   16b14:	cmp	r1, lr
   16b18:	bcs	16ed0 <__assert_fail@plt+0x5640>
   16b1c:	ldrb	r1, [ip, r1]
   16b20:	sub	r1, r1, #48	; 0x30
   16b24:	uxtb	r1, r1
   16b28:	cmp	r1, #9
   16b2c:	bhi	16ed0 <__assert_fail@plt+0x5640>
   16b30:	cmp	r0, sl
   16b34:	movcc	r1, #48	; 0x30
   16b38:	strbcc	r1, [r5, r0]
   16b3c:	add	r0, r8, #2
   16b40:	cmp	r0, sl
   16b44:	movcc	r1, #48	; 0x30
   16b48:	strbcc	r1, [r5, r0]
   16b4c:	add	r8, r8, #3
   16b50:	b	16904 <__assert_fail@plt+0x5074>
   16b54:	mov	r9, #0
   16b58:	mov	r4, #63	; 0x3f
   16b5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16b60:	cmp	r0, #5
   16b64:	beq	16ed8 <__assert_fail@plt+0x5648>
   16b68:	cmp	r0, #2
   16b6c:	bne	16f80 <__assert_fail@plt+0x56f0>
   16b70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b74:	tst	r0, #1
   16b78:	mov	r6, #0
   16b7c:	beq	16904 <__assert_fail@plt+0x5074>
   16b80:	b	17248 <__assert_fail@plt+0x59b8>
   16b84:	mov	r0, #118	; 0x76
   16b88:	b	16cf0 <__assert_fail@plt+0x5460>
   16b8c:	mov	r4, #39	; 0x27
   16b90:	mov	r0, #1
   16b94:	str	r0, [sp, #64]	; 0x40
   16b98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16b9c:	cmp	r0, #2
   16ba0:	bne	16d28 <__assert_fail@plt+0x5498>
   16ba4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ba8:	tst	r0, #1
   16bac:	bne	17248 <__assert_fail@plt+0x59b8>
   16bb0:	ldr	r2, [sp, #84]	; 0x54
   16bb4:	cmp	r2, #0
   16bb8:	mov	r0, r2
   16bbc:	movwne	r0, #1
   16bc0:	clz	r1, sl
   16bc4:	lsr	r1, r1, #5
   16bc8:	orrs	r0, r0, r1
   16bcc:	moveq	r2, sl
   16bd0:	str	r2, [sp, #84]	; 0x54
   16bd4:	moveq	sl, r0
   16bd8:	cmp	r8, sl
   16bdc:	movcc	r0, #39	; 0x27
   16be0:	strbcc	r0, [r5, r8]
   16be4:	add	r0, r8, #1
   16be8:	cmp	r0, sl
   16bec:	movcc	r1, #92	; 0x5c
   16bf0:	strbcc	r1, [r5, r0]
   16bf4:	add	r0, r8, #2
   16bf8:	cmp	r0, sl
   16bfc:	movcc	r1, #39	; 0x27
   16c00:	strbcc	r1, [r5, r0]
   16c04:	add	r8, r8, #3
   16c08:	mov	r0, #0
   16c0c:	str	r0, [fp, #-56]	; 0xffffffc8
   16c10:	mov	r9, #0
   16c14:	mov	r6, #1
   16c18:	b	16904 <__assert_fail@plt+0x5074>
   16c1c:	ldr	r0, [sp, #44]	; 0x2c
   16c20:	cmp	r0, #1
   16c24:	bne	16d30 <__assert_fail@plt+0x54a0>
   16c28:	str	lr, [sp, #32]
   16c2c:	bl	116a4 <__ctype_b_loc@plt>
   16c30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16c34:	ldr	r0, [r0]
   16c38:	add	r0, r0, r4, lsl #1
   16c3c:	ldrb	r0, [r0, #1]
   16c40:	ubfx	r6, r0, #6, #1
   16c44:	mov	r2, #1
   16c48:	ldr	r0, [sp, #60]	; 0x3c
   16c4c:	orr	r1, r6, r0
   16c50:	cmp	r2, #1
   16c54:	bhi	16f88 <__assert_fail@plt+0x56f8>
   16c58:	tst	r1, #1
   16c5c:	beq	16f88 <__assert_fail@plt+0x56f8>
   16c60:	ldr	lr, [sp, #32]
   16c64:	b	16904 <__assert_fail@plt+0x5074>
   16c68:	mov	r9, #0
   16c6c:	mov	r0, #92	; 0x5c
   16c70:	ldr	r1, [sp, #56]	; 0x38
   16c74:	cmp	r1, #0
   16c78:	beq	16cf0 <__assert_fail@plt+0x5460>
   16c7c:	mov	r4, #92	; 0x5c
   16c80:	mov	r6, #0
   16c84:	cmp	r9, #0
   16c88:	bne	16cc0 <__assert_fail@plt+0x5430>
   16c8c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16c90:	tst	r0, #1
   16c94:	beq	16cc0 <__assert_fail@plt+0x5430>
   16c98:	cmp	r8, sl
   16c9c:	movcc	r0, #39	; 0x27
   16ca0:	strbcc	r0, [r5, r8]
   16ca4:	add	r0, r8, #1
   16ca8:	cmp	r0, sl
   16cac:	movcc	r1, #39	; 0x27
   16cb0:	strbcc	r1, [r5, r0]
   16cb4:	add	r8, r8, #2
   16cb8:	mov	r0, #0
   16cbc:	str	r0, [fp, #-56]	; 0xffffffc8
   16cc0:	mov	r1, r6
   16cc4:	mov	r0, r4
   16cc8:	cmp	r8, sl
   16ccc:	strbcc	r0, [r5, r8]
   16cd0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16cd4:	and	r0, r0, r1
   16cd8:	str	r0, [fp, #-48]	; 0xffffffd0
   16cdc:	add	r8, r8, #1
   16ce0:	add	r7, r7, #1
   16ce4:	cmn	lr, #1
   16ce8:	bne	1663c <__assert_fail@plt+0x4dac>
   16cec:	b	16648 <__assert_fail@plt+0x4db8>
   16cf0:	mov	r9, #0
   16cf4:	ldr	r1, [sp, #92]	; 0x5c
   16cf8:	tst	r1, #1
   16cfc:	mov	r6, #0
   16d00:	mov	r1, #0
   16d04:	beq	16904 <__assert_fail@plt+0x5074>
   16d08:	b	1694c <__assert_fail@plt+0x50bc>
   16d0c:	mov	r4, #0
   16d10:	ldr	r0, [sp, #40]	; 0x28
   16d14:	cmp	r0, #0
   16d18:	mov	r9, #0
   16d1c:	mov	r6, #0
   16d20:	beq	16904 <__assert_fail@plt+0x5074>
   16d24:	b	16ce0 <__assert_fail@plt+0x5450>
   16d28:	mov	r6, #1
   16d2c:	b	16904 <__assert_fail@plt+0x5074>
   16d30:	mov	r0, #0
   16d34:	str	r0, [fp, #-36]	; 0xffffffdc
   16d38:	str	r0, [fp, #-40]	; 0xffffffd8
   16d3c:	cmn	lr, #1
   16d40:	bne	16d54 <__assert_fail@plt+0x54c4>
   16d44:	mov	r0, ip
   16d48:	bl	116ec <strlen@plt>
   16d4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16d50:	mov	lr, r0
   16d54:	ldr	r0, [sp, #76]	; 0x4c
   16d58:	add	r0, r0, r7
   16d5c:	str	r0, [sp, #24]
   16d60:	mov	r6, #1
   16d64:	mov	r2, #0
   16d68:	sub	r0, fp, #40	; 0x28
   16d6c:	mov	r3, r0
   16d70:	str	r5, [sp, #28]
   16d74:	str	lr, [sp, #32]
   16d78:	b	16dbc <__assert_fail@plt+0x552c>
   16d7c:	ldr	r5, [sp, #52]	; 0x34
   16d80:	add	r5, r0, r5
   16d84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16d88:	bl	115c0 <iswprint@plt>
   16d8c:	cmp	r0, #0
   16d90:	movwne	r0, #1
   16d94:	and	r6, r6, r0
   16d98:	sub	r0, fp, #40	; 0x28
   16d9c:	bl	11548 <mbsinit@plt>
   16da0:	sub	r3, fp, #40	; 0x28
   16da4:	mov	r2, r5
   16da8:	ldr	lr, [sp, #32]
   16dac:	cmp	r0, #0
   16db0:	ldr	r5, [sp, #28]
   16db4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16db8:	bne	16c48 <__assert_fail@plt+0x53b8>
   16dbc:	str	r2, [sp, #52]	; 0x34
   16dc0:	add	r0, r2, r7
   16dc4:	add	r1, ip, r0
   16dc8:	str	r0, [sp, #48]	; 0x30
   16dcc:	sub	r2, lr, r0
   16dd0:	sub	r0, fp, #44	; 0x2c
   16dd4:	bl	19cd0 <__assert_fail@plt+0x8440>
   16dd8:	cmp	r0, #0
   16ddc:	beq	17154 <__assert_fail@plt+0x58c4>
   16de0:	cmn	r0, #1
   16de4:	beq	17110 <__assert_fail@plt+0x5880>
   16de8:	cmn	r0, #2
   16dec:	ldr	lr, [sp, #32]
   16df0:	beq	17118 <__assert_fail@plt+0x5888>
   16df4:	cmp	r0, #2
   16df8:	mov	r1, #0
   16dfc:	movwcc	r1, #1
   16e00:	ldr	r2, [sp, #68]	; 0x44
   16e04:	eor	r2, r2, #1
   16e08:	orrs	r1, r2, r1
   16e0c:	bne	16d7c <__assert_fail@plt+0x54ec>
   16e10:	ldr	r1, [sp, #52]	; 0x34
   16e14:	ldr	r2, [sp, #24]
   16e18:	add	r1, r2, r1
   16e1c:	sub	r2, r0, #1
   16e20:	b	16e30 <__assert_fail@plt+0x55a0>
   16e24:	add	r1, r1, #1
   16e28:	subs	r2, r2, #1
   16e2c:	beq	16d7c <__assert_fail@plt+0x54ec>
   16e30:	ldrb	r3, [r1]
   16e34:	sub	r3, r3, #91	; 0x5b
   16e38:	cmp	r3, #33	; 0x21
   16e3c:	bhi	16e24 <__assert_fail@plt+0x5594>
   16e40:	add	r5, pc, #0
   16e44:	ldr	pc, [r5, r3, lsl #2]
   16e48:	andeq	r7, r1, r0, asr #4
   16e4c:	andeq	r7, r1, r0, asr #4
   16e50:	andeq	r6, r1, r4, lsr #28
   16e54:	andeq	r7, r1, r0, asr #4
   16e58:	andeq	r6, r1, r4, lsr #28
   16e5c:	andeq	r7, r1, r0, asr #4
   16e60:	andeq	r6, r1, r4, lsr #28
   16e64:	andeq	r6, r1, r4, lsr #28
   16e68:	andeq	r6, r1, r4, lsr #28
   16e6c:	andeq	r6, r1, r4, lsr #28
   16e70:	andeq	r6, r1, r4, lsr #28
   16e74:	andeq	r6, r1, r4, lsr #28
   16e78:	andeq	r6, r1, r4, lsr #28
   16e7c:	andeq	r6, r1, r4, lsr #28
   16e80:	andeq	r6, r1, r4, lsr #28
   16e84:	andeq	r6, r1, r4, lsr #28
   16e88:	andeq	r6, r1, r4, lsr #28
   16e8c:	andeq	r6, r1, r4, lsr #28
   16e90:	andeq	r6, r1, r4, lsr #28
   16e94:	andeq	r6, r1, r4, lsr #28
   16e98:	andeq	r6, r1, r4, lsr #28
   16e9c:	andeq	r6, r1, r4, lsr #28
   16ea0:	andeq	r6, r1, r4, lsr #28
   16ea4:	andeq	r6, r1, r4, lsr #28
   16ea8:	andeq	r6, r1, r4, lsr #28
   16eac:	andeq	r6, r1, r4, lsr #28
   16eb0:	andeq	r6, r1, r4, lsr #28
   16eb4:	andeq	r6, r1, r4, lsr #28
   16eb8:	andeq	r6, r1, r4, lsr #28
   16ebc:	andeq	r6, r1, r4, lsr #28
   16ec0:	andeq	r6, r1, r4, lsr #28
   16ec4:	andeq	r6, r1, r4, lsr #28
   16ec8:	andeq	r6, r1, r4, lsr #28
   16ecc:	andeq	r7, r1, r0, asr #4
   16ed0:	mov	r8, r0
   16ed4:	b	16904 <__assert_fail@plt+0x5074>
   16ed8:	ldr	r0, [sp, #36]	; 0x24
   16edc:	cmp	r0, #0
   16ee0:	beq	16f80 <__assert_fail@plt+0x56f0>
   16ee4:	add	r0, r7, #2
   16ee8:	cmp	r0, lr
   16eec:	bcs	16f80 <__assert_fail@plt+0x56f0>
   16ef0:	add	r1, r7, ip
   16ef4:	ldrb	r1, [r1, #1]
   16ef8:	cmp	r1, #63	; 0x3f
   16efc:	bne	16f80 <__assert_fail@plt+0x56f0>
   16f00:	ldrb	r1, [ip, r0]
   16f04:	sub	r2, r1, #33	; 0x21
   16f08:	cmp	r2, #29
   16f0c:	bhi	16f80 <__assert_fail@plt+0x56f0>
   16f10:	mov	r3, #1
   16f14:	movw	r6, #20929	; 0x51c1
   16f18:	movt	r6, #14336	; 0x3800
   16f1c:	tst	r6, r3, lsl r2
   16f20:	beq	16f80 <__assert_fail@plt+0x56f0>
   16f24:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16f28:	tst	r2, #1
   16f2c:	bne	17248 <__assert_fail@plt+0x59b8>
   16f30:	cmp	r8, sl
   16f34:	movcc	r2, #63	; 0x3f
   16f38:	strbcc	r2, [r5, r8]
   16f3c:	add	r2, r8, #1
   16f40:	cmp	r2, sl
   16f44:	movcc	r3, #34	; 0x22
   16f48:	strbcc	r3, [r5, r2]
   16f4c:	add	r2, r8, #2
   16f50:	cmp	r2, sl
   16f54:	movcc	r3, #34	; 0x22
   16f58:	strbcc	r3, [r5, r2]
   16f5c:	add	r2, r8, #3
   16f60:	cmp	r2, sl
   16f64:	movcc	r3, #63	; 0x3f
   16f68:	strbcc	r3, [r5, r2]
   16f6c:	add	r8, r8, #4
   16f70:	mov	r7, r0
   16f74:	mov	r4, r1
   16f78:	mov	r6, #0
   16f7c:	b	16904 <__assert_fail@plt+0x5074>
   16f80:	mov	r6, #0
   16f84:	b	16904 <__assert_fail@plt+0x5074>
   16f88:	add	r0, r2, r7
   16f8c:	str	r0, [sp, #52]	; 0x34
   16f90:	mov	r2, #0
   16f94:	ldr	lr, [sp, #32]
   16f98:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16f9c:	str	r1, [sp, #48]	; 0x30
   16fa0:	tst	r1, #1
   16fa4:	bne	17080 <__assert_fail@plt+0x57f0>
   16fa8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16fac:	tst	r1, #1
   16fb0:	bne	17248 <__assert_fail@plt+0x59b8>
   16fb4:	mov	r3, r0
   16fb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16fbc:	subs	r1, r0, #2
   16fc0:	movwne	r1, #1
   16fc4:	orr	r1, r1, r3
   16fc8:	tst	r1, #1
   16fcc:	bne	17004 <__assert_fail@plt+0x5774>
   16fd0:	cmp	r8, sl
   16fd4:	movcc	r0, #39	; 0x27
   16fd8:	strbcc	r0, [r5, r8]
   16fdc:	add	r2, r8, #1
   16fe0:	cmp	r2, sl
   16fe4:	movcc	r0, #36	; 0x24
   16fe8:	strbcc	r0, [r5, r2]
   16fec:	add	r2, r8, #2
   16ff0:	cmp	r2, sl
   16ff4:	movcc	r0, #39	; 0x27
   16ff8:	strbcc	r0, [r5, r2]
   16ffc:	add	r8, r8, #3
   17000:	mov	r3, #1
   17004:	cmp	r8, sl
   17008:	movcc	r1, #92	; 0x5c
   1700c:	strbcc	r1, [r5, r8]
   17010:	add	r2, r8, #1
   17014:	cmp	r2, sl
   17018:	bcs	1702c <__assert_fail@plt+0x579c>
   1701c:	uxtb	r1, r4
   17020:	mov	r0, #48	; 0x30
   17024:	orr	r1, r0, r1, lsr #6
   17028:	strb	r1, [r5, r2]
   1702c:	add	r2, r8, #2
   17030:	cmp	r2, sl
   17034:	lsrcc	r1, r4, #3
   17038:	movcc	r0, #6
   1703c:	bficc	r1, r0, #3, #29
   17040:	strbcc	r1, [r5, r2]
   17044:	mov	r0, #6
   17048:	bfi	r4, r0, #3, #29
   1704c:	add	r8, r8, #3
   17050:	mov	r2, #1
   17054:	mov	r0, r3
   17058:	b	170a4 <__assert_fail@plt+0x5814>
   1705c:	cmp	r8, sl
   17060:	strbcc	r4, [r5, r8]
   17064:	ldr	r1, [sp, #76]	; 0x4c
   17068:	ldrb	r4, [r1, r7]
   1706c:	add	r8, r8, #1
   17070:	mov	r7, r3
   17074:	ldr	r1, [sp, #48]	; 0x30
   17078:	tst	r1, #1
   1707c:	beq	16fa8 <__assert_fail@plt+0x5718>
   17080:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17084:	tst	r1, #1
   17088:	beq	1709c <__assert_fail@plt+0x580c>
   1708c:	cmp	r8, sl
   17090:	movcc	r1, #92	; 0x5c
   17094:	strbcc	r1, [r5, r8]
   17098:	add	r8, r8, #1
   1709c:	mov	r1, #0
   170a0:	str	r1, [fp, #-52]	; 0xffffffcc
   170a4:	and	r9, r2, #1
   170a8:	add	r3, r7, #1
   170ac:	ldr	r1, [sp, #52]	; 0x34
   170b0:	cmp	r1, r3
   170b4:	bls	170f8 <__assert_fail@plt+0x5868>
   170b8:	cmp	r9, #0
   170bc:	movwne	r9, #1
   170c0:	mvn	r1, r0
   170c4:	orr	r1, r1, r9
   170c8:	tst	r1, #1
   170cc:	bne	1705c <__assert_fail@plt+0x57cc>
   170d0:	cmp	r8, sl
   170d4:	movcc	r1, #39	; 0x27
   170d8:	strbcc	r1, [r5, r8]
   170dc:	add	r1, r8, #1
   170e0:	cmp	r1, sl
   170e4:	movcc	r0, #39	; 0x27
   170e8:	strbcc	r0, [r5, r1]
   170ec:	add	r8, r8, #2
   170f0:	mov	r0, #0
   170f4:	b	1705c <__assert_fail@plt+0x57cc>
   170f8:	str	r0, [fp, #-56]	; 0xffffffc8
   170fc:	cmp	r9, #0
   17100:	movwne	r9, #1
   17104:	cmp	r9, #0
   17108:	beq	16c8c <__assert_fail@plt+0x53fc>
   1710c:	b	16cc0 <__assert_fail@plt+0x5430>
   17110:	mov	r6, #0
   17114:	b	17154 <__assert_fail@plt+0x58c4>
   17118:	mov	r6, #0
   1711c:	ldr	r0, [sp, #48]	; 0x30
   17120:	cmp	r0, lr
   17124:	bcs	17154 <__assert_fail@plt+0x58c4>
   17128:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1712c:	add	r0, ip, r7
   17130:	ldr	r2, [sp, #52]	; 0x34
   17134:	ldrb	r1, [r0, r2]
   17138:	cmp	r1, #0
   1713c:	beq	16c48 <__assert_fail@plt+0x53b8>
   17140:	add	r2, r2, #1
   17144:	add	r1, r7, r2
   17148:	cmp	r1, lr
   1714c:	bcc	17134 <__assert_fail@plt+0x58a4>
   17150:	b	16c48 <__assert_fail@plt+0x53b8>
   17154:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17158:	ldr	r2, [sp, #52]	; 0x34
   1715c:	b	16c48 <__assert_fail@plt+0x53b8>
   17160:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17164:	eor	r0, r1, #2
   17168:	orr	r0, r0, r8
   1716c:	clz	r0, r0
   17170:	lsr	r0, r0, #5
   17174:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17178:	tst	r3, r0
   1717c:	bne	17248 <__assert_fail@plt+0x59b8>
   17180:	mov	r6, r5
   17184:	subs	r0, r1, #2
   17188:	movwne	r0, #1
   1718c:	orr	r0, r3, r0
   17190:	tst	r0, #1
   17194:	ldr	r2, [sp, #92]	; 0x5c
   17198:	ldreq	r0, [sp, #64]	; 0x40
   1719c:	eoreq	r0, r0, #1
   171a0:	tsteq	r0, #1
   171a4:	bne	171e4 <__assert_fail@plt+0x5954>
   171a8:	mov	r9, lr
   171ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   171b0:	tst	r0, #1
   171b4:	bne	172b0 <__assert_fail@plt+0x5a20>
   171b8:	ldr	r0, [sp, #84]	; 0x54
   171bc:	cmp	r0, #0
   171c0:	beq	171e4 <__assert_fail@plt+0x5954>
   171c4:	mov	r0, #0
   171c8:	str	r0, [fp, #-48]	; 0xffffffd0
   171cc:	mov	r1, #2
   171d0:	cmp	sl, #0
   171d4:	mov	r0, r2
   171d8:	mov	r4, r3
   171dc:	ldr	r7, [sp, #84]	; 0x54
   171e0:	beq	163bc <__assert_fail@plt+0x4b2c>
   171e4:	ldr	r1, [fp, #-84]	; 0xffffffac
   171e8:	clz	r0, r1
   171ec:	lsr	r0, r0, #5
   171f0:	orr	r0, r0, r3
   171f4:	tst	r0, #1
   171f8:	bne	17224 <__assert_fail@plt+0x5994>
   171fc:	ldrb	r0, [r1]
   17200:	cmp	r0, #0
   17204:	beq	17224 <__assert_fail@plt+0x5994>
   17208:	add	r1, r1, #1
   1720c:	cmp	r8, sl
   17210:	strbcc	r0, [r6, r8]
   17214:	add	r8, r8, #1
   17218:	ldrb	r0, [r1], #1
   1721c:	cmp	r0, #0
   17220:	bne	1720c <__assert_fail@plt+0x597c>
   17224:	cmp	r8, sl
   17228:	movcc	r0, #0
   1722c:	strbcc	r0, [r6, r8]
   17230:	b	172a4 <__assert_fail@plt+0x5a14>
   17234:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17238:	mov	lr, r4
   1723c:	b	17248 <__assert_fail@plt+0x59b8>
   17240:	ldr	r5, [sp, #28]
   17244:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17248:	mov	r0, #0
   1724c:	ldr	r1, [fp, #12]
   17250:	bic	r1, r1, #2
   17254:	mov	r2, #2
   17258:	ldr	r3, [sp, #92]	; 0x5c
   1725c:	tst	r3, #1
   17260:	movwne	r2, #4
   17264:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17268:	cmp	r3, #2
   1726c:	movne	r2, r3
   17270:	str	r2, [sp]
   17274:	str	r1, [sp, #4]
   17278:	str	r0, [sp, #8]
   1727c:	ldr	r0, [sp, #80]	; 0x50
   17280:	str	r0, [sp, #12]
   17284:	ldr	r0, [sp, #88]	; 0x58
   17288:	str	r0, [sp, #16]
   1728c:	mov	r0, r5
   17290:	mov	r1, sl
   17294:	mov	r2, ip
   17298:	mov	r3, lr
   1729c:	bl	16330 <__assert_fail@plt+0x4aa0>
   172a0:	mov	r8, r0
   172a4:	mov	r0, r8
   172a8:	sub	sp, fp, #28
   172ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172b0:	mov	r0, #5
   172b4:	str	r0, [sp]
   172b8:	ldr	r0, [fp, #12]
   172bc:	str	r0, [sp, #4]
   172c0:	ldr	r0, [fp, #16]
   172c4:	str	r0, [sp, #8]
   172c8:	ldr	r0, [sp, #80]	; 0x50
   172cc:	str	r0, [sp, #12]
   172d0:	ldr	r0, [sp, #88]	; 0x58
   172d4:	str	r0, [sp, #16]
   172d8:	mov	r0, r6
   172dc:	ldr	r1, [sp, #84]	; 0x54
   172e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   172e4:	mov	r3, r9
   172e8:	b	1729c <__assert_fail@plt+0x5a0c>
   172ec:	bl	11854 <abort@plt>
   172f0:	mov	r3, r2
   172f4:	mov	r2, #0
   172f8:	b	172fc <__assert_fail@plt+0x5a6c>
   172fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17300:	add	fp, sp, #28
   17304:	sub	sp, sp, #36	; 0x24
   17308:	mov	r4, r2
   1730c:	str	r2, [sp, #24]
   17310:	mov	r5, r1
   17314:	mov	r6, r0
   17318:	str	r0, [sp, #20]
   1731c:	movw	r8, #49680	; 0xc210
   17320:	movt	r8, #2
   17324:	cmp	r3, #0
   17328:	movne	r8, r3
   1732c:	bl	11710 <__errno_location@plt>
   17330:	str	r0, [sp, #28]
   17334:	ldm	r8, {r3, r9}
   17338:	ldr	r1, [r8, #40]	; 0x28
   1733c:	ldr	r2, [r8, #44]	; 0x2c
   17340:	ldr	r7, [r0]
   17344:	str	r7, [sp, #32]
   17348:	add	sl, r8, #8
   1734c:	cmp	r4, #0
   17350:	orreq	r9, r9, #1
   17354:	stm	sp, {r3, r9, sl}
   17358:	str	r1, [sp, #12]
   1735c:	str	r2, [sp, #16]
   17360:	mov	r0, #0
   17364:	mov	r1, #0
   17368:	mov	r2, r6
   1736c:	mov	r3, r5
   17370:	mov	r7, r5
   17374:	bl	16330 <__assert_fail@plt+0x4aa0>
   17378:	mov	r5, r0
   1737c:	add	r4, r0, #1
   17380:	mov	r0, r4
   17384:	bl	18c44 <__assert_fail@plt+0x73b4>
   17388:	mov	r6, r0
   1738c:	ldr	r0, [r8]
   17390:	ldr	r1, [r8, #40]	; 0x28
   17394:	ldr	r2, [r8, #44]	; 0x2c
   17398:	stm	sp, {r0, r9, sl}
   1739c:	str	r1, [sp, #12]
   173a0:	str	r2, [sp, #16]
   173a4:	mov	r0, r6
   173a8:	mov	r1, r4
   173ac:	ldr	r2, [sp, #20]
   173b0:	mov	r3, r7
   173b4:	bl	16330 <__assert_fail@plt+0x4aa0>
   173b8:	ldr	r0, [sp, #24]
   173bc:	ldr	r1, [sp, #32]
   173c0:	ldr	r2, [sp, #28]
   173c4:	str	r1, [r2]
   173c8:	cmp	r0, #0
   173cc:	strne	r5, [r0]
   173d0:	mov	r0, r6
   173d4:	sub	sp, fp, #28
   173d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   173e0:	add	fp, sp, #24
   173e4:	movw	r8, #49520	; 0xc170
   173e8:	movt	r8, #2
   173ec:	ldr	r4, [r8]
   173f0:	movw	r5, #49524	; 0xc174
   173f4:	movt	r5, #2
   173f8:	ldr	r0, [r5]
   173fc:	cmp	r0, #2
   17400:	blt	1742c <__assert_fail@plt+0x5b9c>
   17404:	add	r7, r4, #12
   17408:	mov	r6, #0
   1740c:	ldr	r0, [r7, r6, lsl #3]
   17410:	bl	19b78 <__assert_fail@plt+0x82e8>
   17414:	add	r0, r6, #1
   17418:	ldr	r1, [r5]
   1741c:	add	r2, r6, #2
   17420:	cmp	r2, r1
   17424:	mov	r6, r0
   17428:	blt	1740c <__assert_fail@plt+0x5b7c>
   1742c:	ldr	r0, [r4, #4]
   17430:	movw	r9, #49728	; 0xc240
   17434:	movt	r9, #2
   17438:	cmp	r0, r9
   1743c:	movw	r7, #49528	; 0xc178
   17440:	movt	r7, #2
   17444:	beq	17454 <__assert_fail@plt+0x5bc4>
   17448:	bl	19b78 <__assert_fail@plt+0x82e8>
   1744c:	mov	r0, #256	; 0x100
   17450:	stm	r7, {r0, r9}
   17454:	cmp	r4, r7
   17458:	beq	17468 <__assert_fail@plt+0x5bd8>
   1745c:	mov	r0, r4
   17460:	bl	19b78 <__assert_fail@plt+0x82e8>
   17464:	str	r7, [r8]
   17468:	mov	r0, #1
   1746c:	str	r0, [r5]
   17470:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17474:	movw	r3, #49680	; 0xc210
   17478:	movt	r3, #2
   1747c:	mvn	r2, #0
   17480:	b	17484 <__assert_fail@plt+0x5bf4>
   17484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17488:	add	fp, sp, #28
   1748c:	sub	sp, sp, #44	; 0x2c
   17490:	mov	r7, r3
   17494:	str	r2, [sp, #36]	; 0x24
   17498:	str	r1, [sp, #32]
   1749c:	mov	r5, r0
   174a0:	bl	11710 <__errno_location@plt>
   174a4:	cmp	r5, #0
   174a8:	bmi	17618 <__assert_fail@plt+0x5d88>
   174ac:	cmn	r5, #-2147483647	; 0x80000001
   174b0:	beq	17618 <__assert_fail@plt+0x5d88>
   174b4:	movw	r4, #49520	; 0xc170
   174b8:	movt	r4, #2
   174bc:	ldr	r6, [r4]
   174c0:	str	r0, [sp, #28]
   174c4:	ldr	r0, [r0]
   174c8:	str	r0, [sp, #24]
   174cc:	movw	r8, #49524	; 0xc174
   174d0:	movt	r8, #2
   174d4:	ldr	r1, [r8]
   174d8:	cmp	r1, r5
   174dc:	ble	174e8 <__assert_fail@plt+0x5c58>
   174e0:	mov	sl, r6
   174e4:	b	17554 <__assert_fail@plt+0x5cc4>
   174e8:	str	r1, [fp, #-32]	; 0xffffffe0
   174ec:	mov	r0, #8
   174f0:	str	r0, [sp]
   174f4:	movw	r9, #49528	; 0xc178
   174f8:	movt	r9, #2
   174fc:	subs	r0, r6, r9
   17500:	movne	r0, r6
   17504:	sub	r1, r5, r1
   17508:	add	r2, r1, #1
   1750c:	sub	r1, fp, #32
   17510:	mvn	r3, #-2147483648	; 0x80000000
   17514:	bl	18d20 <__assert_fail@plt+0x7490>
   17518:	mov	sl, r0
   1751c:	str	r0, [r4]
   17520:	cmp	r6, r9
   17524:	bne	17530 <__assert_fail@plt+0x5ca0>
   17528:	ldrd	r0, [r9]
   1752c:	stm	sl, {r0, r1}
   17530:	ldr	r1, [r8]
   17534:	add	r0, sl, r1, lsl #3
   17538:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1753c:	sub	r1, r2, r1
   17540:	lsl	r2, r1, #3
   17544:	mov	r1, #0
   17548:	bl	11734 <memset@plt>
   1754c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17550:	str	r0, [r8]
   17554:	mov	r9, sl
   17558:	ldr	r6, [r9, r5, lsl #3]!
   1755c:	ldr	r4, [r9, #4]!
   17560:	ldm	r7, {r0, r1}
   17564:	ldr	r2, [r7, #40]	; 0x28
   17568:	ldr	r3, [r7, #44]	; 0x2c
   1756c:	orr	r8, r1, #1
   17570:	add	r1, r7, #8
   17574:	stm	sp, {r0, r8}
   17578:	str	r1, [sp, #20]
   1757c:	add	r0, sp, #8
   17580:	stm	r0, {r1, r2, r3}
   17584:	mov	r0, r4
   17588:	mov	r1, r6
   1758c:	ldr	r2, [sp, #32]
   17590:	ldr	r3, [sp, #36]	; 0x24
   17594:	bl	16330 <__assert_fail@plt+0x4aa0>
   17598:	cmp	r6, r0
   1759c:	bhi	17600 <__assert_fail@plt+0x5d70>
   175a0:	add	r6, r0, #1
   175a4:	str	r6, [sl, r5, lsl #3]
   175a8:	movw	r0, #49728	; 0xc240
   175ac:	movt	r0, #2
   175b0:	cmp	r4, r0
   175b4:	beq	175c0 <__assert_fail@plt+0x5d30>
   175b8:	mov	r0, r4
   175bc:	bl	19b78 <__assert_fail@plt+0x82e8>
   175c0:	mov	r0, r6
   175c4:	bl	18c44 <__assert_fail@plt+0x73b4>
   175c8:	mov	r4, r0
   175cc:	str	r0, [r9]
   175d0:	ldr	r0, [r7]
   175d4:	ldr	r1, [r7, #40]	; 0x28
   175d8:	ldr	r2, [r7, #44]	; 0x2c
   175dc:	stm	sp, {r0, r8}
   175e0:	ldr	r0, [sp, #20]
   175e4:	add	r3, sp, #8
   175e8:	stm	r3, {r0, r1, r2}
   175ec:	mov	r0, r4
   175f0:	mov	r1, r6
   175f4:	ldr	r2, [sp, #32]
   175f8:	ldr	r3, [sp, #36]	; 0x24
   175fc:	bl	16330 <__assert_fail@plt+0x4aa0>
   17600:	ldr	r0, [sp, #28]
   17604:	ldr	r1, [sp, #24]
   17608:	str	r1, [r0]
   1760c:	mov	r0, r4
   17610:	sub	sp, fp, #28
   17614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17618:	bl	11854 <abort@plt>
   1761c:	movw	r3, #49680	; 0xc210
   17620:	movt	r3, #2
   17624:	b	17484 <__assert_fail@plt+0x5bf4>
   17628:	mov	r1, r0
   1762c:	mov	r0, #0
   17630:	b	17474 <__assert_fail@plt+0x5be4>
   17634:	mov	r2, r1
   17638:	mov	r1, r0
   1763c:	mov	r0, #0
   17640:	b	1761c <__assert_fail@plt+0x5d8c>
   17644:	push	{r4, r5, r6, sl, fp, lr}
   17648:	add	fp, sp, #16
   1764c:	sub	sp, sp, #48	; 0x30
   17650:	mov	r4, r2
   17654:	mov	r5, r0
   17658:	mov	r6, sp
   1765c:	mov	r0, r6
   17660:	bl	17680 <__assert_fail@plt+0x5df0>
   17664:	mov	r0, r5
   17668:	mov	r1, r4
   1766c:	mvn	r2, #0
   17670:	mov	r3, r6
   17674:	bl	17484 <__assert_fail@plt+0x5bf4>
   17678:	sub	sp, fp, #16
   1767c:	pop	{r4, r5, r6, sl, fp, pc}
   17680:	push	{fp, lr}
   17684:	mov	fp, sp
   17688:	vmov.i32	q8, #0	; 0x00000000
   1768c:	mov	r2, #32
   17690:	mov	r3, r0
   17694:	vst1.32	{d16-d17}, [r3], r2
   17698:	vst1.32	{d16-d17}, [r3]
   1769c:	add	r2, r0, #16
   176a0:	vst1.32	{d16-d17}, [r2]
   176a4:	cmp	r1, #10
   176a8:	strne	r1, [r0]
   176ac:	popne	{fp, pc}
   176b0:	bl	11854 <abort@plt>
   176b4:	push	{r4, r5, r6, r7, fp, lr}
   176b8:	add	fp, sp, #16
   176bc:	sub	sp, sp, #48	; 0x30
   176c0:	mov	r4, r3
   176c4:	mov	r5, r2
   176c8:	mov	r6, r0
   176cc:	mov	r7, sp
   176d0:	mov	r0, r7
   176d4:	bl	17680 <__assert_fail@plt+0x5df0>
   176d8:	mov	r0, r6
   176dc:	mov	r1, r5
   176e0:	mov	r2, r4
   176e4:	mov	r3, r7
   176e8:	bl	17484 <__assert_fail@plt+0x5bf4>
   176ec:	sub	sp, fp, #16
   176f0:	pop	{r4, r5, r6, r7, fp, pc}
   176f4:	mov	r2, r1
   176f8:	mov	r1, r0
   176fc:	mov	r0, #0
   17700:	b	17644 <__assert_fail@plt+0x5db4>
   17704:	mov	r3, r2
   17708:	mov	r2, r1
   1770c:	mov	r1, r0
   17710:	mov	r0, #0
   17714:	b	176b4 <__assert_fail@plt+0x5e24>
   17718:	push	{r4, r5, r6, sl, fp, lr}
   1771c:	add	fp, sp, #16
   17720:	sub	sp, sp, #48	; 0x30
   17724:	mov	r4, r1
   17728:	mov	r5, r0
   1772c:	movw	r0, #49680	; 0xc210
   17730:	movt	r0, #2
   17734:	add	r1, r0, #16
   17738:	mov	r3, #32
   1773c:	vld1.64	{d16-d17}, [r0], r3
   17740:	vld1.64	{d18-d19}, [r1]
   17744:	mov	r6, sp
   17748:	add	r1, r6, #16
   1774c:	vld1.64	{d20-d21}, [r0]
   17750:	vst1.64	{d18-d19}, [r1]
   17754:	mov	r0, r6
   17758:	vst1.64	{d16-d17}, [r0], r3
   1775c:	vst1.64	{d20-d21}, [r0]
   17760:	mov	r0, r6
   17764:	mov	r1, r2
   17768:	mov	r2, #1
   1776c:	bl	16224 <__assert_fail@plt+0x4994>
   17770:	mov	r0, #0
   17774:	mov	r1, r5
   17778:	mov	r2, r4
   1777c:	mov	r3, r6
   17780:	bl	17484 <__assert_fail@plt+0x5bf4>
   17784:	sub	sp, fp, #16
   17788:	pop	{r4, r5, r6, sl, fp, pc}
   1778c:	mov	r2, r1
   17790:	mvn	r1, #0
   17794:	b	17718 <__assert_fail@plt+0x5e88>
   17798:	mov	r1, #58	; 0x3a
   1779c:	b	1778c <__assert_fail@plt+0x5efc>
   177a0:	mov	r2, #58	; 0x3a
   177a4:	b	17718 <__assert_fail@plt+0x5e88>
   177a8:	push	{r4, r5, r6, sl, fp, lr}
   177ac:	add	fp, sp, #16
   177b0:	sub	sp, sp, #48	; 0x30
   177b4:	mov	r4, r2
   177b8:	mov	r5, r0
   177bc:	mov	r6, sp
   177c0:	mov	r0, r6
   177c4:	bl	17680 <__assert_fail@plt+0x5df0>
   177c8:	mov	r0, r6
   177cc:	mov	r1, #58	; 0x3a
   177d0:	mov	r2, #1
   177d4:	bl	16224 <__assert_fail@plt+0x4994>
   177d8:	mov	r0, r5
   177dc:	mov	r1, r4
   177e0:	mvn	r2, #0
   177e4:	mov	r3, r6
   177e8:	bl	17484 <__assert_fail@plt+0x5bf4>
   177ec:	sub	sp, fp, #16
   177f0:	pop	{r4, r5, r6, sl, fp, pc}
   177f4:	push	{fp, lr}
   177f8:	mov	fp, sp
   177fc:	sub	sp, sp, #8
   17800:	mvn	ip, #0
   17804:	str	ip, [sp]
   17808:	bl	17814 <__assert_fail@plt+0x5f84>
   1780c:	mov	sp, fp
   17810:	pop	{fp, pc}
   17814:	push	{r4, r5, r6, r7, fp, lr}
   17818:	add	fp, sp, #16
   1781c:	sub	sp, sp, #48	; 0x30
   17820:	mov	r7, r3
   17824:	mov	r5, r0
   17828:	movw	r0, #49680	; 0xc210
   1782c:	movt	r0, #2
   17830:	add	r3, r0, #16
   17834:	mov	r4, #32
   17838:	vld1.64	{d16-d17}, [r0], r4
   1783c:	vld1.64	{d18-d19}, [r3]
   17840:	mov	r6, sp
   17844:	add	r3, r6, #16
   17848:	vld1.64	{d20-d21}, [r0]
   1784c:	vst1.64	{d18-d19}, [r3]
   17850:	mov	r0, r6
   17854:	vst1.64	{d16-d17}, [r0], r4
   17858:	vst1.64	{d20-d21}, [r0]
   1785c:	mov	r0, r6
   17860:	bl	1627c <__assert_fail@plt+0x49ec>
   17864:	ldr	r2, [fp, #8]
   17868:	mov	r0, r5
   1786c:	mov	r1, r7
   17870:	mov	r3, r6
   17874:	bl	17484 <__assert_fail@plt+0x5bf4>
   17878:	sub	sp, fp, #16
   1787c:	pop	{r4, r5, r6, r7, fp, pc}
   17880:	mov	r3, r2
   17884:	mov	r2, r1
   17888:	mov	r1, r0
   1788c:	mov	r0, #0
   17890:	b	177f4 <__assert_fail@plt+0x5f64>
   17894:	push	{fp, lr}
   17898:	mov	fp, sp
   1789c:	sub	sp, sp, #8
   178a0:	mov	ip, r2
   178a4:	mov	r2, r1
   178a8:	mov	r1, r0
   178ac:	str	r3, [sp]
   178b0:	mov	r0, #0
   178b4:	mov	r3, ip
   178b8:	bl	17814 <__assert_fail@plt+0x5f84>
   178bc:	mov	sp, fp
   178c0:	pop	{fp, pc}
   178c4:	movw	r3, #49536	; 0xc180
   178c8:	movt	r3, #2
   178cc:	b	17484 <__assert_fail@plt+0x5bf4>
   178d0:	mov	r2, r1
   178d4:	mov	r1, r0
   178d8:	mov	r0, #0
   178dc:	b	178c4 <__assert_fail@plt+0x6034>
   178e0:	mvn	r2, #0
   178e4:	b	178c4 <__assert_fail@plt+0x6034>
   178e8:	mov	r1, r0
   178ec:	mov	r0, #0
   178f0:	b	178e0 <__assert_fail@plt+0x6050>
   178f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178f8:	add	fp, sp, #24
   178fc:	sub	sp, sp, #16
   17900:	mov	r4, r1
   17904:	mov	r5, r0
   17908:	mov	r7, #0
   1790c:	mov	r0, #0
   17910:	mov	r1, r5
   17914:	mov	r2, #5
   17918:	bl	1156c <dcgettext@plt>
   1791c:	cmp	r0, r5
   17920:	beq	1792c <__assert_fail@plt+0x609c>
   17924:	sub	sp, fp, #24
   17928:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1792c:	bl	19c98 <__assert_fail@plt+0x8408>
   17930:	mov	r6, r0
   17934:	mov	r8, #56	; 0x38
   17938:	mov	r0, #45	; 0x2d
   1793c:	stm	sp, {r0, r8}
   17940:	str	r7, [sp, #8]
   17944:	str	r7, [sp, #12]
   17948:	mov	r0, r6
   1794c:	mov	r1, #85	; 0x55
   17950:	mov	r2, #84	; 0x54
   17954:	mov	r3, #70	; 0x46
   17958:	bl	179f0 <__assert_fail@plt+0x6160>
   1795c:	cmp	r0, #0
   17960:	beq	1797c <__assert_fail@plt+0x60ec>
   17964:	ldrb	r1, [r5]
   17968:	movw	r2, #46176	; 0xb460
   1796c:	movt	r2, #1
   17970:	movw	r0, #46180	; 0xb464
   17974:	movt	r0, #1
   17978:	b	179c0 <__assert_fail@plt+0x6130>
   1797c:	mov	r0, #48	; 0x30
   17980:	mov	r1, #51	; 0x33
   17984:	str	r8, [sp]
   17988:	stmib	sp, {r0, r1}
   1798c:	str	r0, [sp, #12]
   17990:	mov	r0, r6
   17994:	mov	r1, #71	; 0x47
   17998:	mov	r2, #66	; 0x42
   1799c:	mov	r3, #49	; 0x31
   179a0:	bl	179f0 <__assert_fail@plt+0x6160>
   179a4:	cmp	r0, #0
   179a8:	beq	179d0 <__assert_fail@plt+0x6140>
   179ac:	ldrb	r1, [r5]
   179b0:	movw	r2, #46184	; 0xb468
   179b4:	movt	r2, #1
   179b8:	movw	r0, #46188	; 0xb46c
   179bc:	movt	r0, #1
   179c0:	cmp	r1, #96	; 0x60
   179c4:	moveq	r0, r2
   179c8:	sub	sp, fp, #24
   179cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179d0:	movw	r1, #46172	; 0xb45c
   179d4:	movt	r1, #1
   179d8:	movw	r0, #47521	; 0xb9a1
   179dc:	movt	r0, #1
   179e0:	cmp	r4, #9
   179e4:	moveq	r0, r1
   179e8:	sub	sp, fp, #24
   179ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179f0:	push	{r4, r5, r6, r7, fp, lr}
   179f4:	add	fp, sp, #16
   179f8:	sub	sp, sp, #16
   179fc:	mov	r4, r3
   17a00:	mov	r5, r2
   17a04:	mov	r7, r1
   17a08:	mov	r6, r0
   17a0c:	mov	r0, r1
   17a10:	bl	19648 <__assert_fail@plt+0x7db8>
   17a14:	ldrb	r1, [r6]
   17a18:	cmp	r0, #0
   17a1c:	andne	r1, r1, #223	; 0xdf
   17a20:	mov	r0, #0
   17a24:	cmp	r1, r7
   17a28:	bne	17a60 <__assert_fail@plt+0x61d0>
   17a2c:	cmp	r7, #0
   17a30:	beq	17a68 <__assert_fail@plt+0x61d8>
   17a34:	ldr	r0, [fp, #20]
   17a38:	ldr	r1, [fp, #16]
   17a3c:	ldr	r2, [fp, #12]
   17a40:	ldr	r3, [fp, #8]
   17a44:	str	r2, [sp]
   17a48:	str	r1, [sp, #4]
   17a4c:	str	r0, [sp, #8]
   17a50:	mov	r0, r6
   17a54:	mov	r1, r5
   17a58:	mov	r2, r4
   17a5c:	bl	17a74 <__assert_fail@plt+0x61e4>
   17a60:	sub	sp, fp, #16
   17a64:	pop	{r4, r5, r6, r7, fp, pc}
   17a68:	mov	r0, #1
   17a6c:	sub	sp, fp, #16
   17a70:	pop	{r4, r5, r6, r7, fp, pc}
   17a74:	push	{r4, r5, r6, r7, fp, lr}
   17a78:	add	fp, sp, #16
   17a7c:	sub	sp, sp, #8
   17a80:	mov	r4, r3
   17a84:	mov	r5, r2
   17a88:	mov	r7, r1
   17a8c:	mov	r6, r0
   17a90:	mov	r0, r1
   17a94:	bl	19648 <__assert_fail@plt+0x7db8>
   17a98:	ldrb	r1, [r6, #1]
   17a9c:	cmp	r0, #0
   17aa0:	andne	r1, r1, #223	; 0xdf
   17aa4:	mov	r0, #0
   17aa8:	cmp	r1, r7
   17aac:	bne	17adc <__assert_fail@plt+0x624c>
   17ab0:	cmp	r7, #0
   17ab4:	beq	17ae4 <__assert_fail@plt+0x6254>
   17ab8:	ldr	r0, [fp, #16]
   17abc:	ldr	r1, [fp, #12]
   17ac0:	ldr	r3, [fp, #8]
   17ac4:	str	r1, [sp]
   17ac8:	str	r0, [sp, #4]
   17acc:	mov	r0, r6
   17ad0:	mov	r1, r5
   17ad4:	mov	r2, r4
   17ad8:	bl	17af0 <__assert_fail@plt+0x6260>
   17adc:	sub	sp, fp, #16
   17ae0:	pop	{r4, r5, r6, r7, fp, pc}
   17ae4:	mov	r0, #1
   17ae8:	sub	sp, fp, #16
   17aec:	pop	{r4, r5, r6, r7, fp, pc}
   17af0:	push	{r4, r5, r6, r7, fp, lr}
   17af4:	add	fp, sp, #16
   17af8:	sub	sp, sp, #8
   17afc:	mov	r4, r3
   17b00:	mov	r5, r2
   17b04:	mov	r7, r1
   17b08:	mov	r6, r0
   17b0c:	mov	r0, r1
   17b10:	bl	19648 <__assert_fail@plt+0x7db8>
   17b14:	ldrb	r1, [r6, #2]
   17b18:	cmp	r0, #0
   17b1c:	andne	r1, r1, #223	; 0xdf
   17b20:	mov	r0, #0
   17b24:	cmp	r1, r7
   17b28:	bne	17b50 <__assert_fail@plt+0x62c0>
   17b2c:	cmp	r7, #0
   17b30:	beq	17b58 <__assert_fail@plt+0x62c8>
   17b34:	ldr	r0, [fp, #12]
   17b38:	ldr	r3, [fp, #8]
   17b3c:	str	r0, [sp]
   17b40:	mov	r0, r6
   17b44:	mov	r1, r5
   17b48:	mov	r2, r4
   17b4c:	bl	17b64 <__assert_fail@plt+0x62d4>
   17b50:	sub	sp, fp, #16
   17b54:	pop	{r4, r5, r6, r7, fp, pc}
   17b58:	mov	r0, #1
   17b5c:	sub	sp, fp, #16
   17b60:	pop	{r4, r5, r6, r7, fp, pc}
   17b64:	push	{r4, r5, r6, r7, fp, lr}
   17b68:	add	fp, sp, #16
   17b6c:	mov	r4, r3
   17b70:	mov	r5, r2
   17b74:	mov	r7, r1
   17b78:	mov	r6, r0
   17b7c:	mov	r0, r1
   17b80:	bl	19648 <__assert_fail@plt+0x7db8>
   17b84:	ldrb	r1, [r6, #3]
   17b88:	ldr	r3, [fp, #8]
   17b8c:	cmp	r0, #0
   17b90:	andne	r1, r1, #223	; 0xdf
   17b94:	mov	r0, #0
   17b98:	cmp	r1, r7
   17b9c:	bne	17bc0 <__assert_fail@plt+0x6330>
   17ba0:	cmp	r7, #0
   17ba4:	beq	17bbc <__assert_fail@plt+0x632c>
   17ba8:	mov	r0, r6
   17bac:	mov	r1, r5
   17bb0:	mov	r2, r4
   17bb4:	pop	{r4, r5, r6, r7, fp, lr}
   17bb8:	b	17bc4 <__assert_fail@plt+0x6334>
   17bbc:	mov	r0, #1
   17bc0:	pop	{r4, r5, r6, r7, fp, pc}
   17bc4:	push	{r4, r5, r6, r7, fp, lr}
   17bc8:	add	fp, sp, #16
   17bcc:	mov	r4, r3
   17bd0:	mov	r5, r2
   17bd4:	mov	r7, r1
   17bd8:	mov	r6, r0
   17bdc:	mov	r0, r1
   17be0:	bl	19648 <__assert_fail@plt+0x7db8>
   17be4:	ldrb	r1, [r6, #4]
   17be8:	cmp	r0, #0
   17bec:	andne	r1, r1, #223	; 0xdf
   17bf0:	mov	r0, #0
   17bf4:	cmp	r1, r7
   17bf8:	bne	17c1c <__assert_fail@plt+0x638c>
   17bfc:	cmp	r7, #0
   17c00:	beq	17c18 <__assert_fail@plt+0x6388>
   17c04:	mov	r0, r6
   17c08:	mov	r1, r5
   17c0c:	mov	r2, r4
   17c10:	pop	{r4, r5, r6, r7, fp, lr}
   17c14:	b	17c20 <__assert_fail@plt+0x6390>
   17c18:	mov	r0, #1
   17c1c:	pop	{r4, r5, r6, r7, fp, pc}
   17c20:	push	{r4, r5, r6, sl, fp, lr}
   17c24:	add	fp, sp, #16
   17c28:	mov	r4, r2
   17c2c:	mov	r6, r1
   17c30:	mov	r5, r0
   17c34:	mov	r0, r1
   17c38:	bl	19648 <__assert_fail@plt+0x7db8>
   17c3c:	ldrb	r1, [r5, #5]
   17c40:	cmp	r0, #0
   17c44:	andne	r1, r1, #223	; 0xdf
   17c48:	mov	r0, #0
   17c4c:	cmp	r1, r6
   17c50:	bne	17c70 <__assert_fail@plt+0x63e0>
   17c54:	cmp	r6, #0
   17c58:	beq	17c6c <__assert_fail@plt+0x63dc>
   17c5c:	mov	r0, r5
   17c60:	mov	r1, r4
   17c64:	pop	{r4, r5, r6, sl, fp, lr}
   17c68:	b	17c74 <__assert_fail@plt+0x63e4>
   17c6c:	mov	r0, #1
   17c70:	pop	{r4, r5, r6, sl, fp, pc}
   17c74:	push	{r4, r5, fp, lr}
   17c78:	add	fp, sp, #8
   17c7c:	mov	r5, r1
   17c80:	mov	r4, r0
   17c84:	mov	r0, r1
   17c88:	bl	19648 <__assert_fail@plt+0x7db8>
   17c8c:	ldrb	r1, [r4, #6]
   17c90:	cmp	r0, #0
   17c94:	andne	r1, r1, #223	; 0xdf
   17c98:	mov	r0, #0
   17c9c:	cmp	r1, r5
   17ca0:	popne	{r4, r5, fp, pc}
   17ca4:	cmp	r5, #0
   17ca8:	beq	17cb8 <__assert_fail@plt+0x6428>
   17cac:	mov	r0, r4
   17cb0:	pop	{r4, r5, fp, lr}
   17cb4:	b	17cc0 <__assert_fail@plt+0x6430>
   17cb8:	mov	r0, #1
   17cbc:	pop	{r4, r5, fp, pc}
   17cc0:	push	{r4, sl, fp, lr}
   17cc4:	add	fp, sp, #8
   17cc8:	mov	r4, r0
   17ccc:	mov	r0, #0
   17cd0:	bl	19648 <__assert_fail@plt+0x7db8>
   17cd4:	ldrb	r1, [r4, #7]
   17cd8:	cmp	r0, #0
   17cdc:	beq	17cf0 <__assert_fail@plt+0x6460>
   17ce0:	tst	r1, #223	; 0xdf
   17ce4:	bne	17cf8 <__assert_fail@plt+0x6468>
   17ce8:	mov	r0, #1
   17cec:	pop	{r4, sl, fp, pc}
   17cf0:	cmp	r1, #0
   17cf4:	beq	17ce8 <__assert_fail@plt+0x6458>
   17cf8:	mov	r0, #0
   17cfc:	pop	{r4, sl, fp, pc}
   17d00:	push	{r4, sl, fp, lr}
   17d04:	add	fp, sp, #8
   17d08:	sub	sp, sp, #104	; 0x68
   17d0c:	mov	r4, r0
   17d10:	movw	r0, #47245	; 0xb88d
   17d14:	movt	r0, #1
   17d18:	mov	r1, sp
   17d1c:	bl	1a4fc <__assert_fail@plt+0x8c6c>
   17d20:	mov	r1, r0
   17d24:	mov	r0, #0
   17d28:	cmp	r1, #0
   17d2c:	beq	17d38 <__assert_fail@plt+0x64a8>
   17d30:	sub	sp, fp, #8
   17d34:	pop	{r4, sl, fp, pc}
   17d38:	ldr	r0, [sp, #96]	; 0x60
   17d3c:	ldr	r1, [sp, #100]	; 0x64
   17d40:	ldm	sp, {r2, r3}
   17d44:	stm	r4, {r0, r1, r2, r3}
   17d48:	mov	r0, r4
   17d4c:	sub	sp, fp, #8
   17d50:	pop	{r4, sl, fp, pc}
   17d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d58:	add	fp, sp, #28
   17d5c:	sub	sp, sp, #964	; 0x3c4
   17d60:	sub	sp, sp, #3072	; 0xc00
   17d64:	mov	r4, r2
   17d68:	mov	r5, r1
   17d6c:	cmn	r0, #100	; 0x64
   17d70:	beq	17d84 <__assert_fail@plt+0x64f4>
   17d74:	mov	r7, r0
   17d78:	ldrb	r0, [r5]
   17d7c:	cmp	r0, #47	; 0x2f
   17d80:	bne	17d98 <__assert_fail@plt+0x6508>
   17d84:	mov	r0, r5
   17d88:	mov	r1, r4
   17d8c:	sub	sp, fp, #28
   17d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d94:	b	18634 <__assert_fail@plt+0x6da4>
   17d98:	mov	sl, sp
   17d9c:	mov	r0, sl
   17da0:	mov	r1, r7
   17da4:	mov	r2, r5
   17da8:	bl	19128 <__assert_fail@plt+0x7898>
   17dac:	cmp	r0, #0
   17db0:	beq	17e9c <__assert_fail@plt+0x660c>
   17db4:	mov	r6, r0
   17db8:	mov	r1, r4
   17dbc:	bl	18634 <__assert_fail@plt+0x6da4>
   17dc0:	mov	r9, r0
   17dc4:	bl	11710 <__errno_location@plt>
   17dc8:	mov	r8, r0
   17dcc:	ldr	r2, [r0]
   17dd0:	cmp	r6, sl
   17dd4:	beq	17de8 <__assert_fail@plt+0x6558>
   17dd8:	mov	r0, r6
   17ddc:	mov	r6, r2
   17de0:	bl	19b78 <__assert_fail@plt+0x82e8>
   17de4:	mov	r2, r6
   17de8:	cmn	r9, #1
   17dec:	bne	17f68 <__assert_fail@plt+0x66d8>
   17df0:	sub	r0, r2, #1
   17df4:	cmp	r0, #37	; 0x25
   17df8:	bhi	17f5c <__assert_fail@plt+0x66cc>
   17dfc:	add	r1, pc, #0
   17e00:	ldr	pc, [r1, r0, lsl #2]
   17e04:	muleq	r1, ip, lr
   17e08:	muleq	r1, ip, lr
   17e0c:	andeq	r7, r1, r4, ror #30
   17e10:	andeq	r7, r1, r4, ror #30
   17e14:	andeq	r7, r1, r4, ror #30
   17e18:	andeq	r7, r1, r4, ror #30
   17e1c:	andeq	r7, r1, r4, ror #30
   17e20:	andeq	r7, r1, r4, ror #30
   17e24:	andeq	r7, r1, r4, ror #30
   17e28:	andeq	r7, r1, r4, ror #30
   17e2c:	andeq	r7, r1, r4, ror #30
   17e30:	andeq	r7, r1, r4, ror #30
   17e34:	muleq	r1, ip, lr
   17e38:	andeq	r7, r1, r4, ror #30
   17e3c:	andeq	r7, r1, r4, ror #30
   17e40:	andeq	r7, r1, r4, ror #30
   17e44:	andeq	r7, r1, r4, ror #30
   17e48:	andeq	r7, r1, r4, ror #30
   17e4c:	andeq	r7, r1, r4, ror #30
   17e50:	muleq	r1, ip, lr
   17e54:	andeq	r7, r1, r4, ror #30
   17e58:	andeq	r7, r1, r4, ror #30
   17e5c:	andeq	r7, r1, r4, ror #30
   17e60:	andeq	r7, r1, r4, ror #30
   17e64:	andeq	r7, r1, r4, ror #30
   17e68:	andeq	r7, r1, r4, ror #30
   17e6c:	andeq	r7, r1, r4, ror #30
   17e70:	andeq	r7, r1, r4, ror #30
   17e74:	andeq	r7, r1, r4, ror #30
   17e78:	andeq	r7, r1, r4, ror #30
   17e7c:	andeq	r7, r1, r4, ror #30
   17e80:	andeq	r7, r1, r4, ror #30
   17e84:	andeq	r7, r1, r4, ror #30
   17e88:	andeq	r7, r1, r4, ror #30
   17e8c:	andeq	r7, r1, r4, ror #30
   17e90:	andeq	r7, r1, r4, ror #30
   17e94:	andeq	r7, r1, r4, ror #30
   17e98:	muleq	r1, ip, lr
   17e9c:	mov	r0, sp
   17ea0:	bl	19df0 <__assert_fail@plt+0x8560>
   17ea4:	cmp	r0, #0
   17ea8:	bne	17f74 <__assert_fail@plt+0x66e4>
   17eac:	cmp	r7, #0
   17eb0:	bmi	17edc <__assert_fail@plt+0x664c>
   17eb4:	ldr	r0, [sp]
   17eb8:	cmp	r0, r7
   17ebc:	bne	17edc <__assert_fail@plt+0x664c>
   17ec0:	mov	r0, sp
   17ec4:	bl	19e68 <__assert_fail@plt+0x85d8>
   17ec8:	bl	11710 <__errno_location@plt>
   17ecc:	mov	r1, #9
   17ed0:	str	r1, [r0]
   17ed4:	mvn	r9, #0
   17ed8:	b	17f68 <__assert_fail@plt+0x66d8>
   17edc:	mov	r0, r7
   17ee0:	bl	117f4 <fchdir@plt>
   17ee4:	cmp	r0, #0
   17ee8:	beq	17f0c <__assert_fail@plt+0x667c>
   17eec:	bl	11710 <__errno_location@plt>
   17ef0:	mov	r4, r0
   17ef4:	ldr	r5, [r0]
   17ef8:	mov	r0, sp
   17efc:	bl	19e68 <__assert_fail@plt+0x85d8>
   17f00:	str	r5, [r4]
   17f04:	mvn	r9, #0
   17f08:	b	17f68 <__assert_fail@plt+0x66d8>
   17f0c:	mov	r0, r5
   17f10:	mov	r1, r4
   17f14:	bl	18634 <__assert_fail@plt+0x6da4>
   17f18:	mov	r9, r0
   17f1c:	mov	r4, #0
   17f20:	cmn	r0, #1
   17f24:	bne	17f30 <__assert_fail@plt+0x66a0>
   17f28:	bl	11710 <__errno_location@plt>
   17f2c:	ldr	r4, [r0]
   17f30:	mov	r0, sp
   17f34:	bl	19e4c <__assert_fail@plt+0x85bc>
   17f38:	cmp	r0, #0
   17f3c:	bne	17f80 <__assert_fail@plt+0x66f0>
   17f40:	mov	r0, sp
   17f44:	bl	19e68 <__assert_fail@plt+0x85d8>
   17f48:	cmp	r4, #0
   17f4c:	beq	17f68 <__assert_fail@plt+0x66d8>
   17f50:	bl	11710 <__errno_location@plt>
   17f54:	str	r4, [r0]
   17f58:	b	17f68 <__assert_fail@plt+0x66d8>
   17f5c:	cmp	r2, #95	; 0x5f
   17f60:	beq	17e9c <__assert_fail@plt+0x660c>
   17f64:	str	r2, [r8]
   17f68:	mov	r0, r9
   17f6c:	sub	sp, fp, #28
   17f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f74:	bl	11710 <__errno_location@plt>
   17f78:	ldr	r0, [r0]
   17f7c:	bl	19d34 <__assert_fail@plt+0x84a4>
   17f80:	bl	11710 <__errno_location@plt>
   17f84:	ldr	r0, [r0]
   17f88:	bl	19d74 <__assert_fail@plt+0x84e4>
   17f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f90:	add	fp, sp, #28
   17f94:	sub	sp, sp, #964	; 0x3c4
   17f98:	sub	sp, sp, #3072	; 0xc00
   17f9c:	mov	r4, r2
   17fa0:	mov	r5, r1
   17fa4:	cmn	r0, #100	; 0x64
   17fa8:	beq	17fbc <__assert_fail@plt+0x672c>
   17fac:	mov	r7, r0
   17fb0:	ldrb	r0, [r5]
   17fb4:	cmp	r0, #47	; 0x2f
   17fb8:	bne	17fd0 <__assert_fail@plt+0x6740>
   17fbc:	mov	r0, r5
   17fc0:	mov	r1, r4
   17fc4:	sub	sp, fp, #28
   17fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fcc:	b	186c0 <__assert_fail@plt+0x6e30>
   17fd0:	mov	sl, sp
   17fd4:	mov	r0, sl
   17fd8:	mov	r1, r7
   17fdc:	mov	r2, r5
   17fe0:	bl	19128 <__assert_fail@plt+0x7898>
   17fe4:	cmp	r0, #0
   17fe8:	beq	180d4 <__assert_fail@plt+0x6844>
   17fec:	mov	r6, r0
   17ff0:	mov	r1, r4
   17ff4:	bl	186c0 <__assert_fail@plt+0x6e30>
   17ff8:	mov	r9, r0
   17ffc:	bl	11710 <__errno_location@plt>
   18000:	mov	r8, r0
   18004:	ldr	r2, [r0]
   18008:	cmp	r6, sl
   1800c:	beq	18020 <__assert_fail@plt+0x6790>
   18010:	mov	r0, r6
   18014:	mov	r6, r2
   18018:	bl	19b78 <__assert_fail@plt+0x82e8>
   1801c:	mov	r2, r6
   18020:	cmn	r9, #1
   18024:	bne	181a0 <__assert_fail@plt+0x6910>
   18028:	sub	r0, r2, #1
   1802c:	cmp	r0, #37	; 0x25
   18030:	bhi	18194 <__assert_fail@plt+0x6904>
   18034:	add	r1, pc, #0
   18038:	ldr	pc, [r1, r0, lsl #2]
   1803c:	ldrdeq	r8, [r1], -r4
   18040:	ldrdeq	r8, [r1], -r4
   18044:	muleq	r1, ip, r1
   18048:	muleq	r1, ip, r1
   1804c:	muleq	r1, ip, r1
   18050:	muleq	r1, ip, r1
   18054:	muleq	r1, ip, r1
   18058:	muleq	r1, ip, r1
   1805c:	muleq	r1, ip, r1
   18060:	muleq	r1, ip, r1
   18064:	muleq	r1, ip, r1
   18068:	muleq	r1, ip, r1
   1806c:	ldrdeq	r8, [r1], -r4
   18070:	muleq	r1, ip, r1
   18074:	muleq	r1, ip, r1
   18078:	muleq	r1, ip, r1
   1807c:	muleq	r1, ip, r1
   18080:	muleq	r1, ip, r1
   18084:	muleq	r1, ip, r1
   18088:	ldrdeq	r8, [r1], -r4
   1808c:	muleq	r1, ip, r1
   18090:	muleq	r1, ip, r1
   18094:	muleq	r1, ip, r1
   18098:	muleq	r1, ip, r1
   1809c:	muleq	r1, ip, r1
   180a0:	muleq	r1, ip, r1
   180a4:	muleq	r1, ip, r1
   180a8:	muleq	r1, ip, r1
   180ac:	muleq	r1, ip, r1
   180b0:	muleq	r1, ip, r1
   180b4:	muleq	r1, ip, r1
   180b8:	muleq	r1, ip, r1
   180bc:	muleq	r1, ip, r1
   180c0:	muleq	r1, ip, r1
   180c4:	muleq	r1, ip, r1
   180c8:	muleq	r1, ip, r1
   180cc:	muleq	r1, ip, r1
   180d0:	ldrdeq	r8, [r1], -r4
   180d4:	mov	r0, sp
   180d8:	bl	19df0 <__assert_fail@plt+0x8560>
   180dc:	cmp	r0, #0
   180e0:	bne	181ac <__assert_fail@plt+0x691c>
   180e4:	cmp	r7, #0
   180e8:	bmi	18114 <__assert_fail@plt+0x6884>
   180ec:	ldr	r0, [sp]
   180f0:	cmp	r0, r7
   180f4:	bne	18114 <__assert_fail@plt+0x6884>
   180f8:	mov	r0, sp
   180fc:	bl	19e68 <__assert_fail@plt+0x85d8>
   18100:	bl	11710 <__errno_location@plt>
   18104:	mov	r1, #9
   18108:	str	r1, [r0]
   1810c:	mvn	r9, #0
   18110:	b	181a0 <__assert_fail@plt+0x6910>
   18114:	mov	r0, r7
   18118:	bl	117f4 <fchdir@plt>
   1811c:	cmp	r0, #0
   18120:	beq	18144 <__assert_fail@plt+0x68b4>
   18124:	bl	11710 <__errno_location@plt>
   18128:	mov	r4, r0
   1812c:	ldr	r5, [r0]
   18130:	mov	r0, sp
   18134:	bl	19e68 <__assert_fail@plt+0x85d8>
   18138:	str	r5, [r4]
   1813c:	mvn	r9, #0
   18140:	b	181a0 <__assert_fail@plt+0x6910>
   18144:	mov	r0, r5
   18148:	mov	r1, r4
   1814c:	bl	186c0 <__assert_fail@plt+0x6e30>
   18150:	mov	r9, r0
   18154:	mov	r4, #0
   18158:	cmn	r0, #1
   1815c:	bne	18168 <__assert_fail@plt+0x68d8>
   18160:	bl	11710 <__errno_location@plt>
   18164:	ldr	r4, [r0]
   18168:	mov	r0, sp
   1816c:	bl	19e4c <__assert_fail@plt+0x85bc>
   18170:	cmp	r0, #0
   18174:	bne	181b8 <__assert_fail@plt+0x6928>
   18178:	mov	r0, sp
   1817c:	bl	19e68 <__assert_fail@plt+0x85d8>
   18180:	cmp	r4, #0
   18184:	beq	181a0 <__assert_fail@plt+0x6910>
   18188:	bl	11710 <__errno_location@plt>
   1818c:	str	r4, [r0]
   18190:	b	181a0 <__assert_fail@plt+0x6910>
   18194:	cmp	r2, #95	; 0x5f
   18198:	beq	180d4 <__assert_fail@plt+0x6844>
   1819c:	str	r2, [r8]
   181a0:	mov	r0, r9
   181a4:	sub	sp, fp, #28
   181a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ac:	bl	11710 <__errno_location@plt>
   181b0:	ldr	r0, [r0]
   181b4:	bl	19d34 <__assert_fail@plt+0x84a4>
   181b8:	bl	11710 <__errno_location@plt>
   181bc:	ldr	r0, [r0]
   181c0:	bl	19d74 <__assert_fail@plt+0x84e4>
   181c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181c8:	add	fp, sp, #28
   181cc:	sub	sp, sp, #964	; 0x3c4
   181d0:	sub	sp, sp, #3072	; 0xc00
   181d4:	mov	r4, r2
   181d8:	mov	r5, r1
   181dc:	cmn	r0, #100	; 0x64
   181e0:	beq	181f4 <__assert_fail@plt+0x6964>
   181e4:	mov	r7, r0
   181e8:	ldrb	r0, [r5]
   181ec:	cmp	r0, #47	; 0x2f
   181f0:	bne	18208 <__assert_fail@plt+0x6978>
   181f4:	mov	r0, r5
   181f8:	mov	r1, r4
   181fc:	sub	sp, fp, #28
   18200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18204:	b	11770 <setfilecon@plt>
   18208:	mov	sl, sp
   1820c:	mov	r0, sl
   18210:	mov	r1, r7
   18214:	mov	r2, r5
   18218:	bl	19128 <__assert_fail@plt+0x7898>
   1821c:	cmp	r0, #0
   18220:	beq	1830c <__assert_fail@plt+0x6a7c>
   18224:	mov	r6, r0
   18228:	mov	r1, r4
   1822c:	bl	11770 <setfilecon@plt>
   18230:	mov	r9, r0
   18234:	bl	11710 <__errno_location@plt>
   18238:	mov	r8, r0
   1823c:	ldr	r2, [r0]
   18240:	cmp	r6, sl
   18244:	beq	18258 <__assert_fail@plt+0x69c8>
   18248:	mov	r0, r6
   1824c:	mov	r6, r2
   18250:	bl	19b78 <__assert_fail@plt+0x82e8>
   18254:	mov	r2, r6
   18258:	cmn	r9, #1
   1825c:	bne	183d8 <__assert_fail@plt+0x6b48>
   18260:	sub	r0, r2, #1
   18264:	cmp	r0, #37	; 0x25
   18268:	bhi	183cc <__assert_fail@plt+0x6b3c>
   1826c:	add	r1, pc, #0
   18270:	ldr	pc, [r1, r0, lsl #2]
   18274:	andeq	r8, r1, ip, lsl #6
   18278:	andeq	r8, r1, ip, lsl #6
   1827c:	ldrdeq	r8, [r1], -r4
   18280:	ldrdeq	r8, [r1], -r4
   18284:	ldrdeq	r8, [r1], -r4
   18288:	ldrdeq	r8, [r1], -r4
   1828c:	ldrdeq	r8, [r1], -r4
   18290:	ldrdeq	r8, [r1], -r4
   18294:	ldrdeq	r8, [r1], -r4
   18298:	ldrdeq	r8, [r1], -r4
   1829c:	ldrdeq	r8, [r1], -r4
   182a0:	ldrdeq	r8, [r1], -r4
   182a4:	andeq	r8, r1, ip, lsl #6
   182a8:	ldrdeq	r8, [r1], -r4
   182ac:	ldrdeq	r8, [r1], -r4
   182b0:	ldrdeq	r8, [r1], -r4
   182b4:	ldrdeq	r8, [r1], -r4
   182b8:	ldrdeq	r8, [r1], -r4
   182bc:	ldrdeq	r8, [r1], -r4
   182c0:	andeq	r8, r1, ip, lsl #6
   182c4:	ldrdeq	r8, [r1], -r4
   182c8:	ldrdeq	r8, [r1], -r4
   182cc:	ldrdeq	r8, [r1], -r4
   182d0:	ldrdeq	r8, [r1], -r4
   182d4:	ldrdeq	r8, [r1], -r4
   182d8:	ldrdeq	r8, [r1], -r4
   182dc:	ldrdeq	r8, [r1], -r4
   182e0:	ldrdeq	r8, [r1], -r4
   182e4:	ldrdeq	r8, [r1], -r4
   182e8:	ldrdeq	r8, [r1], -r4
   182ec:	ldrdeq	r8, [r1], -r4
   182f0:	ldrdeq	r8, [r1], -r4
   182f4:	ldrdeq	r8, [r1], -r4
   182f8:	ldrdeq	r8, [r1], -r4
   182fc:	ldrdeq	r8, [r1], -r4
   18300:	ldrdeq	r8, [r1], -r4
   18304:	ldrdeq	r8, [r1], -r4
   18308:	andeq	r8, r1, ip, lsl #6
   1830c:	mov	r0, sp
   18310:	bl	19df0 <__assert_fail@plt+0x8560>
   18314:	cmp	r0, #0
   18318:	bne	183e4 <__assert_fail@plt+0x6b54>
   1831c:	cmp	r7, #0
   18320:	bmi	1834c <__assert_fail@plt+0x6abc>
   18324:	ldr	r0, [sp]
   18328:	cmp	r0, r7
   1832c:	bne	1834c <__assert_fail@plt+0x6abc>
   18330:	mov	r0, sp
   18334:	bl	19e68 <__assert_fail@plt+0x85d8>
   18338:	bl	11710 <__errno_location@plt>
   1833c:	mov	r1, #9
   18340:	str	r1, [r0]
   18344:	mvn	r9, #0
   18348:	b	183d8 <__assert_fail@plt+0x6b48>
   1834c:	mov	r0, r7
   18350:	bl	117f4 <fchdir@plt>
   18354:	cmp	r0, #0
   18358:	beq	1837c <__assert_fail@plt+0x6aec>
   1835c:	bl	11710 <__errno_location@plt>
   18360:	mov	r4, r0
   18364:	ldr	r5, [r0]
   18368:	mov	r0, sp
   1836c:	bl	19e68 <__assert_fail@plt+0x85d8>
   18370:	str	r5, [r4]
   18374:	mvn	r9, #0
   18378:	b	183d8 <__assert_fail@plt+0x6b48>
   1837c:	mov	r0, r5
   18380:	mov	r1, r4
   18384:	bl	11770 <setfilecon@plt>
   18388:	mov	r9, r0
   1838c:	mov	r4, #0
   18390:	cmn	r0, #1
   18394:	bne	183a0 <__assert_fail@plt+0x6b10>
   18398:	bl	11710 <__errno_location@plt>
   1839c:	ldr	r4, [r0]
   183a0:	mov	r0, sp
   183a4:	bl	19e4c <__assert_fail@plt+0x85bc>
   183a8:	cmp	r0, #0
   183ac:	bne	183f0 <__assert_fail@plt+0x6b60>
   183b0:	mov	r0, sp
   183b4:	bl	19e68 <__assert_fail@plt+0x85d8>
   183b8:	cmp	r4, #0
   183bc:	beq	183d8 <__assert_fail@plt+0x6b48>
   183c0:	bl	11710 <__errno_location@plt>
   183c4:	str	r4, [r0]
   183c8:	b	183d8 <__assert_fail@plt+0x6b48>
   183cc:	cmp	r2, #95	; 0x5f
   183d0:	beq	1830c <__assert_fail@plt+0x6a7c>
   183d4:	str	r2, [r8]
   183d8:	mov	r0, r9
   183dc:	sub	sp, fp, #28
   183e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183e4:	bl	11710 <__errno_location@plt>
   183e8:	ldr	r0, [r0]
   183ec:	bl	19d34 <__assert_fail@plt+0x84a4>
   183f0:	bl	11710 <__errno_location@plt>
   183f4:	ldr	r0, [r0]
   183f8:	bl	19d74 <__assert_fail@plt+0x84e4>
   183fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18400:	add	fp, sp, #28
   18404:	sub	sp, sp, #964	; 0x3c4
   18408:	sub	sp, sp, #3072	; 0xc00
   1840c:	mov	r4, r2
   18410:	mov	r5, r1
   18414:	cmn	r0, #100	; 0x64
   18418:	beq	1842c <__assert_fail@plt+0x6b9c>
   1841c:	mov	r7, r0
   18420:	ldrb	r0, [r5]
   18424:	cmp	r0, #47	; 0x2f
   18428:	bne	18440 <__assert_fail@plt+0x6bb0>
   1842c:	mov	r0, r5
   18430:	mov	r1, r4
   18434:	sub	sp, fp, #28
   18438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1843c:	b	1150c <lsetfilecon@plt>
   18440:	mov	sl, sp
   18444:	mov	r0, sl
   18448:	mov	r1, r7
   1844c:	mov	r2, r5
   18450:	bl	19128 <__assert_fail@plt+0x7898>
   18454:	cmp	r0, #0
   18458:	beq	18544 <__assert_fail@plt+0x6cb4>
   1845c:	mov	r6, r0
   18460:	mov	r1, r4
   18464:	bl	1150c <lsetfilecon@plt>
   18468:	mov	r9, r0
   1846c:	bl	11710 <__errno_location@plt>
   18470:	mov	r8, r0
   18474:	ldr	r2, [r0]
   18478:	cmp	r6, sl
   1847c:	beq	18490 <__assert_fail@plt+0x6c00>
   18480:	mov	r0, r6
   18484:	mov	r6, r2
   18488:	bl	19b78 <__assert_fail@plt+0x82e8>
   1848c:	mov	r2, r6
   18490:	cmn	r9, #1
   18494:	bne	18610 <__assert_fail@plt+0x6d80>
   18498:	sub	r0, r2, #1
   1849c:	cmp	r0, #37	; 0x25
   184a0:	bhi	18604 <__assert_fail@plt+0x6d74>
   184a4:	add	r1, pc, #0
   184a8:	ldr	pc, [r1, r0, lsl #2]
   184ac:	andeq	r8, r1, r4, asr #10
   184b0:	andeq	r8, r1, r4, asr #10
   184b4:	andeq	r8, r1, ip, lsl #12
   184b8:	andeq	r8, r1, ip, lsl #12
   184bc:	andeq	r8, r1, ip, lsl #12
   184c0:	andeq	r8, r1, ip, lsl #12
   184c4:	andeq	r8, r1, ip, lsl #12
   184c8:	andeq	r8, r1, ip, lsl #12
   184cc:	andeq	r8, r1, ip, lsl #12
   184d0:	andeq	r8, r1, ip, lsl #12
   184d4:	andeq	r8, r1, ip, lsl #12
   184d8:	andeq	r8, r1, ip, lsl #12
   184dc:	andeq	r8, r1, r4, asr #10
   184e0:	andeq	r8, r1, ip, lsl #12
   184e4:	andeq	r8, r1, ip, lsl #12
   184e8:	andeq	r8, r1, ip, lsl #12
   184ec:	andeq	r8, r1, ip, lsl #12
   184f0:	andeq	r8, r1, ip, lsl #12
   184f4:	andeq	r8, r1, ip, lsl #12
   184f8:	andeq	r8, r1, r4, asr #10
   184fc:	andeq	r8, r1, ip, lsl #12
   18500:	andeq	r8, r1, ip, lsl #12
   18504:	andeq	r8, r1, ip, lsl #12
   18508:	andeq	r8, r1, ip, lsl #12
   1850c:	andeq	r8, r1, ip, lsl #12
   18510:	andeq	r8, r1, ip, lsl #12
   18514:	andeq	r8, r1, ip, lsl #12
   18518:	andeq	r8, r1, ip, lsl #12
   1851c:	andeq	r8, r1, ip, lsl #12
   18520:	andeq	r8, r1, ip, lsl #12
   18524:	andeq	r8, r1, ip, lsl #12
   18528:	andeq	r8, r1, ip, lsl #12
   1852c:	andeq	r8, r1, ip, lsl #12
   18530:	andeq	r8, r1, ip, lsl #12
   18534:	andeq	r8, r1, ip, lsl #12
   18538:	andeq	r8, r1, ip, lsl #12
   1853c:	andeq	r8, r1, ip, lsl #12
   18540:	andeq	r8, r1, r4, asr #10
   18544:	mov	r0, sp
   18548:	bl	19df0 <__assert_fail@plt+0x8560>
   1854c:	cmp	r0, #0
   18550:	bne	1861c <__assert_fail@plt+0x6d8c>
   18554:	cmp	r7, #0
   18558:	bmi	18584 <__assert_fail@plt+0x6cf4>
   1855c:	ldr	r0, [sp]
   18560:	cmp	r0, r7
   18564:	bne	18584 <__assert_fail@plt+0x6cf4>
   18568:	mov	r0, sp
   1856c:	bl	19e68 <__assert_fail@plt+0x85d8>
   18570:	bl	11710 <__errno_location@plt>
   18574:	mov	r1, #9
   18578:	str	r1, [r0]
   1857c:	mvn	r9, #0
   18580:	b	18610 <__assert_fail@plt+0x6d80>
   18584:	mov	r0, r7
   18588:	bl	117f4 <fchdir@plt>
   1858c:	cmp	r0, #0
   18590:	beq	185b4 <__assert_fail@plt+0x6d24>
   18594:	bl	11710 <__errno_location@plt>
   18598:	mov	r4, r0
   1859c:	ldr	r5, [r0]
   185a0:	mov	r0, sp
   185a4:	bl	19e68 <__assert_fail@plt+0x85d8>
   185a8:	str	r5, [r4]
   185ac:	mvn	r9, #0
   185b0:	b	18610 <__assert_fail@plt+0x6d80>
   185b4:	mov	r0, r5
   185b8:	mov	r1, r4
   185bc:	bl	1150c <lsetfilecon@plt>
   185c0:	mov	r9, r0
   185c4:	mov	r4, #0
   185c8:	cmn	r0, #1
   185cc:	bne	185d8 <__assert_fail@plt+0x6d48>
   185d0:	bl	11710 <__errno_location@plt>
   185d4:	ldr	r4, [r0]
   185d8:	mov	r0, sp
   185dc:	bl	19e4c <__assert_fail@plt+0x85bc>
   185e0:	cmp	r0, #0
   185e4:	bne	18628 <__assert_fail@plt+0x6d98>
   185e8:	mov	r0, sp
   185ec:	bl	19e68 <__assert_fail@plt+0x85d8>
   185f0:	cmp	r4, #0
   185f4:	beq	18610 <__assert_fail@plt+0x6d80>
   185f8:	bl	11710 <__errno_location@plt>
   185fc:	str	r4, [r0]
   18600:	b	18610 <__assert_fail@plt+0x6d80>
   18604:	cmp	r2, #95	; 0x5f
   18608:	beq	18544 <__assert_fail@plt+0x6cb4>
   1860c:	str	r2, [r8]
   18610:	mov	r0, r9
   18614:	sub	sp, fp, #28
   18618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1861c:	bl	11710 <__errno_location@plt>
   18620:	ldr	r0, [r0]
   18624:	bl	19d34 <__assert_fail@plt+0x84a4>
   18628:	bl	11710 <__errno_location@plt>
   1862c:	ldr	r0, [r0]
   18630:	bl	19d74 <__assert_fail@plt+0x84e4>
   18634:	push	{r4, sl, fp, lr}
   18638:	add	fp, sp, #8
   1863c:	mov	r4, r1
   18640:	bl	116d4 <getfilecon@plt>
   18644:	mov	r1, r4
   18648:	pop	{r4, sl, fp, lr}
   1864c:	b	18650 <__assert_fail@plt+0x6dc0>
   18650:	push	{r4, r5, fp, lr}
   18654:	add	fp, sp, #8
   18658:	cmp	r0, #10
   1865c:	beq	18674 <__assert_fail@plt+0x6de4>
   18660:	cmp	r0, #0
   18664:	bne	186bc <__assert_fail@plt+0x6e2c>
   18668:	bl	11710 <__errno_location@plt>
   1866c:	mov	r1, #95	; 0x5f
   18670:	b	186b4 <__assert_fail@plt+0x6e24>
   18674:	mov	r4, r1
   18678:	ldr	r5, [r1]
   1867c:	movw	r1, #46276	; 0xb4c4
   18680:	movt	r1, #1
   18684:	mov	r0, r5
   18688:	bl	114f4 <strcmp@plt>
   1868c:	mov	r1, r0
   18690:	mov	r0, #10
   18694:	cmp	r1, #0
   18698:	popne	{r4, r5, fp, pc}
   1869c:	mov	r0, r5
   186a0:	bl	1180c <freecon@plt>
   186a4:	mov	r0, #0
   186a8:	str	r0, [r4]
   186ac:	bl	11710 <__errno_location@plt>
   186b0:	mov	r1, #61	; 0x3d
   186b4:	str	r1, [r0]
   186b8:	mvn	r0, #0
   186bc:	pop	{r4, r5, fp, pc}
   186c0:	push	{r4, sl, fp, lr}
   186c4:	add	fp, sp, #8
   186c8:	mov	r4, r1
   186cc:	bl	11650 <lgetfilecon@plt>
   186d0:	mov	r1, r4
   186d4:	pop	{r4, sl, fp, lr}
   186d8:	b	18650 <__assert_fail@plt+0x6dc0>
   186dc:	push	{r4, sl, fp, lr}
   186e0:	add	fp, sp, #8
   186e4:	mov	r4, r1
   186e8:	bl	11590 <fgetfilecon@plt>
   186ec:	mov	r1, r4
   186f0:	pop	{r4, sl, fp, lr}
   186f4:	b	18650 <__assert_fail@plt+0x6dc0>
   186f8:	push	{r4, r5, r6, r7, fp, lr}
   186fc:	add	fp, sp, #16
   18700:	mov	r4, r0
   18704:	cmp	r0, #2
   18708:	bhi	18738 <__assert_fail@plt+0x6ea8>
   1870c:	mov	r0, r4
   18710:	bl	19e90 <__assert_fail@plt+0x8600>
   18714:	mov	r5, r0
   18718:	bl	11710 <__errno_location@plt>
   1871c:	mov	r6, r0
   18720:	ldr	r7, [r0]
   18724:	mov	r0, r4
   18728:	bl	11860 <close@plt>
   1872c:	str	r7, [r6]
   18730:	mov	r0, r5
   18734:	pop	{r4, r5, r6, r7, fp, pc}
   18738:	mov	r0, r4
   1873c:	pop	{r4, r5, r6, r7, fp, pc}
   18740:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18744:	add	fp, sp, #24
   18748:	sub	sp, sp, #32
   1874c:	mov	r4, r2
   18750:	mov	r8, r0
   18754:	ldr	r6, [fp, #12]
   18758:	ldr	r7, [fp, #8]
   1875c:	cmp	r1, #0
   18760:	beq	18788 <__assert_fail@plt+0x6ef8>
   18764:	mov	r5, r1
   18768:	str	r4, [sp]
   1876c:	str	r3, [sp, #4]
   18770:	movw	r2, #46286	; 0xb4ce
   18774:	movt	r2, #1
   18778:	mov	r0, r8
   1877c:	mov	r1, #1
   18780:	mov	r3, r5
   18784:	b	187a0 <__assert_fail@plt+0x6f10>
   18788:	str	r3, [sp]
   1878c:	movw	r2, #46298	; 0xb4da
   18790:	movt	r2, #1
   18794:	mov	r0, r8
   18798:	mov	r1, #1
   1879c:	mov	r3, r4
   187a0:	bl	11758 <__fprintf_chk@plt>
   187a4:	movw	r1, #46305	; 0xb4e1
   187a8:	movt	r1, #1
   187ac:	mov	r0, #0
   187b0:	mov	r2, #5
   187b4:	bl	1156c <dcgettext@plt>
   187b8:	mov	r3, r0
   187bc:	movw	r0, #2022	; 0x7e6
   187c0:	str	r0, [sp]
   187c4:	movw	r2, #47023	; 0xb7af
   187c8:	movt	r2, #1
   187cc:	mov	r0, r8
   187d0:	mov	r1, #1
   187d4:	bl	11758 <__fprintf_chk@plt>
   187d8:	movw	r4, #44010	; 0xabea
   187dc:	movt	r4, #1
   187e0:	mov	r0, r4
   187e4:	mov	r1, r8
   187e8:	bl	114d0 <fputs_unlocked@plt>
   187ec:	movw	r1, #46309	; 0xb4e5
   187f0:	movt	r1, #1
   187f4:	mov	r0, #0
   187f8:	mov	r2, #5
   187fc:	bl	1156c <dcgettext@plt>
   18800:	mov	r2, r0
   18804:	movw	r3, #46480	; 0xb590
   18808:	movt	r3, #1
   1880c:	mov	r0, r8
   18810:	mov	r1, #1
   18814:	bl	11758 <__fprintf_chk@plt>
   18818:	mov	r0, r4
   1881c:	mov	r1, r8
   18820:	bl	114d0 <fputs_unlocked@plt>
   18824:	cmp	r6, #9
   18828:	bhi	18864 <__assert_fail@plt+0x6fd4>
   1882c:	add	r0, pc, #0
   18830:	ldr	pc, [r0, r6, lsl #2]
   18834:	andeq	r8, r1, ip, asr r8
   18838:	andeq	r8, r1, r0, ror r8
   1883c:	andeq	r8, r1, r0, lsr #17
   18840:	andeq	r8, r1, r8, asr #17
   18844:	strdeq	r8, [r1], -r0
   18848:	andeq	r8, r1, r8, lsl r9
   1884c:	andeq	r8, r1, r0, asr #18
   18850:	andeq	r8, r1, r8, ror r9
   18854:	andeq	r8, r1, r8, lsl sl
   18858:	andeq	r8, r1, r0, asr #19
   1885c:	sub	sp, fp, #24
   18860:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18864:	movw	r1, #46833	; 0xb6f1
   18868:	movt	r1, #1
   1886c:	b	189c8 <__assert_fail@plt+0x7138>
   18870:	movw	r1, #46514	; 0xb5b2
   18874:	movt	r1, #1
   18878:	mov	r0, #0
   1887c:	mov	r2, #5
   18880:	bl	1156c <dcgettext@plt>
   18884:	mov	r2, r0
   18888:	ldr	r3, [r7]
   1888c:	mov	r0, r8
   18890:	mov	r1, #1
   18894:	sub	sp, fp, #24
   18898:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1889c:	b	11758 <__fprintf_chk@plt>
   188a0:	movw	r1, #46530	; 0xb5c2
   188a4:	movt	r1, #1
   188a8:	mov	r0, #0
   188ac:	mov	r2, #5
   188b0:	bl	1156c <dcgettext@plt>
   188b4:	mov	r2, r0
   188b8:	ldr	r3, [r7]
   188bc:	ldr	r0, [r7, #4]
   188c0:	str	r0, [sp]
   188c4:	b	189b4 <__assert_fail@plt+0x7124>
   188c8:	movw	r1, #46553	; 0xb5d9
   188cc:	movt	r1, #1
   188d0:	mov	r0, #0
   188d4:	mov	r2, #5
   188d8:	bl	1156c <dcgettext@plt>
   188dc:	mov	r2, r0
   188e0:	ldr	r3, [r7]
   188e4:	ldmib	r7, {r0, r1}
   188e8:	stm	sp, {r0, r1}
   188ec:	b	189b4 <__assert_fail@plt+0x7124>
   188f0:	movw	r1, #46581	; 0xb5f5
   188f4:	movt	r1, #1
   188f8:	mov	r0, #0
   188fc:	mov	r2, #5
   18900:	bl	1156c <dcgettext@plt>
   18904:	mov	r2, r0
   18908:	ldr	r3, [r7]
   1890c:	ldmib	r7, {r0, r1, r7}
   18910:	stm	sp, {r0, r1, r7}
   18914:	b	189b4 <__assert_fail@plt+0x7124>
   18918:	movw	r1, #46613	; 0xb615
   1891c:	movt	r1, #1
   18920:	mov	r0, #0
   18924:	mov	r2, #5
   18928:	bl	1156c <dcgettext@plt>
   1892c:	mov	r2, r0
   18930:	ldr	r3, [r7]
   18934:	ldmib	r7, {r0, r1, r6, r7}
   18938:	stm	sp, {r0, r1, r6, r7}
   1893c:	b	189b4 <__assert_fail@plt+0x7124>
   18940:	movw	r1, #46649	; 0xb639
   18944:	movt	r1, #1
   18948:	mov	r0, #0
   1894c:	mov	r2, #5
   18950:	bl	1156c <dcgettext@plt>
   18954:	mov	r2, r0
   18958:	ldr	r3, [r7]
   1895c:	ldmib	r7, {r0, r1, r6}
   18960:	ldr	r5, [r7, #16]
   18964:	ldr	r7, [r7, #20]
   18968:	stm	sp, {r0, r1, r6}
   1896c:	str	r5, [sp, #12]
   18970:	str	r7, [sp, #16]
   18974:	b	189b4 <__assert_fail@plt+0x7124>
   18978:	movw	r1, #46689	; 0xb661
   1897c:	movt	r1, #1
   18980:	mov	r0, #0
   18984:	mov	r2, #5
   18988:	bl	1156c <dcgettext@plt>
   1898c:	mov	r2, r0
   18990:	ldr	r3, [r7]
   18994:	ldmib	r7, {r0, r1, r6}
   18998:	ldr	r5, [r7, #16]
   1899c:	ldr	r4, [r7, #20]
   189a0:	ldr	r7, [r7, #24]
   189a4:	stm	sp, {r0, r1, r6}
   189a8:	str	r5, [sp, #12]
   189ac:	str	r4, [sp, #16]
   189b0:	str	r7, [sp, #20]
   189b4:	mov	r0, r8
   189b8:	mov	r1, #1
   189bc:	b	18a68 <__assert_fail@plt+0x71d8>
   189c0:	movw	r1, #46781	; 0xb6bd
   189c4:	movt	r1, #1
   189c8:	mov	r0, #0
   189cc:	mov	r2, #5
   189d0:	bl	1156c <dcgettext@plt>
   189d4:	mov	ip, r0
   189d8:	ldr	r3, [r7]
   189dc:	ldr	r0, [r7, #4]
   189e0:	ldr	r1, [r7, #8]
   189e4:	ldr	r6, [r7, #12]
   189e8:	ldr	r5, [r7, #16]
   189ec:	ldr	r4, [r7, #20]
   189f0:	ldr	r2, [r7, #24]
   189f4:	ldr	lr, [r7, #28]
   189f8:	ldr	r7, [r7, #32]
   189fc:	stm	sp, {r0, r1, r6}
   18a00:	str	r5, [sp, #12]
   18a04:	str	r4, [sp, #16]
   18a08:	str	r2, [sp, #20]
   18a0c:	str	lr, [sp, #24]
   18a10:	str	r7, [sp, #28]
   18a14:	b	18a5c <__assert_fail@plt+0x71cc>
   18a18:	movw	r1, #46733	; 0xb68d
   18a1c:	movt	r1, #1
   18a20:	mov	r0, #0
   18a24:	mov	r2, #5
   18a28:	bl	1156c <dcgettext@plt>
   18a2c:	mov	ip, r0
   18a30:	ldr	r3, [r7]
   18a34:	ldmib	r7, {r0, r1, r6}
   18a38:	ldr	r5, [r7, #16]
   18a3c:	ldr	r4, [r7, #20]
   18a40:	ldr	r2, [r7, #24]
   18a44:	ldr	r7, [r7, #28]
   18a48:	stm	sp, {r0, r1, r6}
   18a4c:	str	r5, [sp, #12]
   18a50:	str	r4, [sp, #16]
   18a54:	str	r2, [sp, #20]
   18a58:	str	r7, [sp, #24]
   18a5c:	mov	r0, r8
   18a60:	mov	r1, #1
   18a64:	mov	r2, ip
   18a68:	bl	11758 <__fprintf_chk@plt>
   18a6c:	sub	sp, fp, #24
   18a70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a74:	push	{r4, sl, fp, lr}
   18a78:	add	fp, sp, #8
   18a7c:	sub	sp, sp, #8
   18a80:	mov	lr, #0
   18a84:	ldr	ip, [fp, #8]
   18a88:	ldr	r4, [ip, lr, lsl #2]
   18a8c:	add	lr, lr, #1
   18a90:	cmp	r4, #0
   18a94:	bne	18a88 <__assert_fail@plt+0x71f8>
   18a98:	sub	r4, lr, #1
   18a9c:	str	ip, [sp]
   18aa0:	str	r4, [sp, #4]
   18aa4:	bl	18740 <__assert_fail@plt+0x6eb0>
   18aa8:	sub	sp, fp, #8
   18aac:	pop	{r4, sl, fp, pc}
   18ab0:	push	{r4, r5, fp, lr}
   18ab4:	add	fp, sp, #8
   18ab8:	sub	sp, sp, #48	; 0x30
   18abc:	mov	ip, #0
   18ac0:	ldr	r4, [fp, #8]
   18ac4:	add	lr, sp, #8
   18ac8:	ldr	r5, [r4]
   18acc:	str	r5, [lr, ip, lsl #2]
   18ad0:	cmp	r5, #0
   18ad4:	beq	18aec <__assert_fail@plt+0x725c>
   18ad8:	add	ip, ip, #1
   18adc:	add	r4, r4, #4
   18ae0:	cmp	ip, #10
   18ae4:	bne	18ac8 <__assert_fail@plt+0x7238>
   18ae8:	mov	ip, #10
   18aec:	str	lr, [sp]
   18af0:	str	ip, [sp, #4]
   18af4:	bl	18740 <__assert_fail@plt+0x6eb0>
   18af8:	sub	sp, fp, #8
   18afc:	pop	{r4, r5, fp, pc}
   18b00:	push	{fp, lr}
   18b04:	mov	fp, sp
   18b08:	sub	sp, sp, #8
   18b0c:	add	ip, fp, #8
   18b10:	str	ip, [sp, #4]
   18b14:	str	ip, [sp]
   18b18:	bl	18ab0 <__assert_fail@plt+0x7220>
   18b1c:	mov	sp, fp
   18b20:	pop	{fp, pc}
   18b24:	push	{fp, lr}
   18b28:	mov	fp, sp
   18b2c:	movw	r0, #49604	; 0xc1c4
   18b30:	movt	r0, #2
   18b34:	ldr	r1, [r0]
   18b38:	movw	r0, #44010	; 0xabea
   18b3c:	movt	r0, #1
   18b40:	bl	114d0 <fputs_unlocked@plt>
   18b44:	movw	r1, #46893	; 0xb72d
   18b48:	movt	r1, #1
   18b4c:	mov	r0, #0
   18b50:	mov	r2, #5
   18b54:	bl	1156c <dcgettext@plt>
   18b58:	mov	r1, r0
   18b5c:	movw	r2, #46913	; 0xb741
   18b60:	movt	r2, #1
   18b64:	mov	r0, #1
   18b68:	bl	11740 <__printf_chk@plt>
   18b6c:	movw	r1, #46935	; 0xb757
   18b70:	movt	r1, #1
   18b74:	mov	r0, #0
   18b78:	mov	r2, #5
   18b7c:	bl	1156c <dcgettext@plt>
   18b80:	mov	r1, r0
   18b84:	movw	r2, #44156	; 0xac7c
   18b88:	movt	r2, #1
   18b8c:	movw	r3, #44625	; 0xae51
   18b90:	movt	r3, #1
   18b94:	mov	r0, #1
   18b98:	bl	11740 <__printf_chk@plt>
   18b9c:	movw	r1, #46955	; 0xb76b
   18ba0:	movt	r1, #1
   18ba4:	mov	r0, #0
   18ba8:	mov	r2, #5
   18bac:	bl	1156c <dcgettext@plt>
   18bb0:	mov	r1, r0
   18bb4:	movw	r2, #46994	; 0xb792
   18bb8:	movt	r2, #1
   18bbc:	mov	r0, #1
   18bc0:	pop	{fp, lr}
   18bc4:	b	11740 <__printf_chk@plt>
   18bc8:	b	18bcc <__assert_fail@plt+0x733c>
   18bcc:	push	{r4, r5, r6, sl, fp, lr}
   18bd0:	add	fp, sp, #16
   18bd4:	mov	r4, r2
   18bd8:	mov	r5, r1
   18bdc:	mov	r6, r0
   18be0:	bl	19db4 <__assert_fail@plt+0x8524>
   18be4:	cmp	r0, #0
   18be8:	popne	{r4, r5, r6, sl, fp, pc}
   18bec:	cmp	r6, #0
   18bf0:	beq	18c04 <__assert_fail@plt+0x7374>
   18bf4:	cmp	r5, #0
   18bf8:	cmpne	r4, #0
   18bfc:	bne	18c04 <__assert_fail@plt+0x7374>
   18c00:	pop	{r4, r5, r6, sl, fp, pc}
   18c04:	bl	18f90 <__assert_fail@plt+0x7700>
   18c08:	push	{fp, lr}
   18c0c:	mov	fp, sp
   18c10:	bl	190a4 <__assert_fail@plt+0x7814>
   18c14:	pop	{fp, lr}
   18c18:	b	18c1c <__assert_fail@plt+0x738c>
   18c1c:	cmp	r0, #0
   18c20:	bxne	lr
   18c24:	push	{fp, lr}
   18c28:	mov	fp, sp
   18c2c:	bl	18f90 <__assert_fail@plt+0x7700>
   18c30:	push	{fp, lr}
   18c34:	mov	fp, sp
   18c38:	bl	19c64 <__assert_fail@plt+0x83d4>
   18c3c:	pop	{fp, lr}
   18c40:	b	18c1c <__assert_fail@plt+0x738c>
   18c44:	b	18c08 <__assert_fail@plt+0x7378>
   18c48:	push	{r4, r5, fp, lr}
   18c4c:	add	fp, sp, #8
   18c50:	mov	r4, r1
   18c54:	mov	r5, r0
   18c58:	bl	190d4 <__assert_fail@plt+0x7844>
   18c5c:	cmp	r0, #0
   18c60:	popne	{r4, r5, fp, pc}
   18c64:	cmp	r5, #0
   18c68:	beq	18c78 <__assert_fail@plt+0x73e8>
   18c6c:	cmp	r4, #0
   18c70:	bne	18c78 <__assert_fail@plt+0x73e8>
   18c74:	pop	{r4, r5, fp, pc}
   18c78:	bl	18f90 <__assert_fail@plt+0x7700>
   18c7c:	push	{fp, lr}
   18c80:	mov	fp, sp
   18c84:	bl	19c68 <__assert_fail@plt+0x83d8>
   18c88:	pop	{fp, lr}
   18c8c:	b	18c1c <__assert_fail@plt+0x738c>
   18c90:	push	{fp, lr}
   18c94:	mov	fp, sp
   18c98:	bl	19c78 <__assert_fail@plt+0x83e8>
   18c9c:	pop	{fp, lr}
   18ca0:	b	18c1c <__assert_fail@plt+0x738c>
   18ca4:	mov	r2, r1
   18ca8:	mov	r1, r0
   18cac:	mov	r0, #0
   18cb0:	b	18bcc <__assert_fail@plt+0x733c>
   18cb4:	mov	r2, r1
   18cb8:	mov	r1, r0
   18cbc:	mov	r0, #0
   18cc0:	b	18c90 <__assert_fail@plt+0x7400>
   18cc4:	mov	r2, #1
   18cc8:	b	18ccc <__assert_fail@plt+0x743c>
   18ccc:	push	{r4, r5, fp, lr}
   18cd0:	add	fp, sp, #8
   18cd4:	mov	r4, r1
   18cd8:	ldr	r5, [r1]
   18cdc:	cmp	r0, #0
   18ce0:	beq	18cf8 <__assert_fail@plt+0x7468>
   18ce4:	mov	r1, #1
   18ce8:	add	r1, r1, r5, lsr #1
   18cec:	adds	r5, r5, r1
   18cf0:	bcc	18d10 <__assert_fail@plt+0x7480>
   18cf4:	bl	18f90 <__assert_fail@plt+0x7700>
   18cf8:	cmp	r5, #0
   18cfc:	bne	18d10 <__assert_fail@plt+0x7480>
   18d00:	mov	r1, #64	; 0x40
   18d04:	udiv	r5, r1, r2
   18d08:	cmp	r2, #64	; 0x40
   18d0c:	addhi	r5, r5, #1
   18d10:	mov	r1, r5
   18d14:	bl	18bcc <__assert_fail@plt+0x733c>
   18d18:	str	r5, [r4]
   18d1c:	pop	{r4, r5, fp, pc}
   18d20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18d24:	add	fp, sp, #24
   18d28:	mov	r8, r1
   18d2c:	ldr	r6, [r1]
   18d30:	add	r1, r6, r6, asr #1
   18d34:	cmp	r1, r6
   18d38:	mvnvs	r1, #-2147483648	; 0x80000000
   18d3c:	cmp	r1, r3
   18d40:	mov	r5, r1
   18d44:	movgt	r5, r3
   18d48:	cmn	r3, #1
   18d4c:	movle	r5, r1
   18d50:	ldr	r4, [fp, #8]
   18d54:	cmn	r4, #1
   18d58:	ble	18d80 <__assert_fail@plt+0x74f0>
   18d5c:	cmp	r4, #0
   18d60:	beq	18dd4 <__assert_fail@plt+0x7544>
   18d64:	cmn	r5, #1
   18d68:	ble	18da8 <__assert_fail@plt+0x7518>
   18d6c:	mvn	r7, #-2147483648	; 0x80000000
   18d70:	udiv	r1, r7, r4
   18d74:	cmp	r1, r5
   18d78:	bge	18dd4 <__assert_fail@plt+0x7544>
   18d7c:	b	18de4 <__assert_fail@plt+0x7554>
   18d80:	cmn	r5, #1
   18d84:	ble	18dc4 <__assert_fail@plt+0x7534>
   18d88:	cmn	r4, #1
   18d8c:	beq	18dd4 <__assert_fail@plt+0x7544>
   18d90:	mov	r1, #-2147483648	; 0x80000000
   18d94:	sdiv	r1, r1, r4
   18d98:	mvn	r7, #-2147483648	; 0x80000000
   18d9c:	cmp	r1, r5
   18da0:	bge	18dd4 <__assert_fail@plt+0x7544>
   18da4:	b	18de4 <__assert_fail@plt+0x7554>
   18da8:	beq	18dd4 <__assert_fail@plt+0x7544>
   18dac:	mov	r1, #-2147483648	; 0x80000000
   18db0:	sdiv	r1, r1, r5
   18db4:	mvn	r7, #-2147483648	; 0x80000000
   18db8:	cmp	r1, r4
   18dbc:	bge	18dd4 <__assert_fail@plt+0x7544>
   18dc0:	b	18de4 <__assert_fail@plt+0x7554>
   18dc4:	mvn	r7, #-2147483648	; 0x80000000
   18dc8:	sdiv	r1, r7, r4
   18dcc:	cmp	r5, r1
   18dd0:	blt	18de4 <__assert_fail@plt+0x7554>
   18dd4:	mul	r1, r5, r4
   18dd8:	mov	r7, #64	; 0x40
   18ddc:	cmp	r1, #63	; 0x3f
   18de0:	bgt	18dec <__assert_fail@plt+0x755c>
   18de4:	sdiv	r5, r7, r4
   18de8:	mul	r1, r5, r4
   18dec:	cmp	r0, #0
   18df0:	moveq	r7, #0
   18df4:	streq	r7, [r8]
   18df8:	sub	r7, r5, r6
   18dfc:	cmp	r7, r2
   18e00:	bge	18eac <__assert_fail@plt+0x761c>
   18e04:	add	r5, r6, r2
   18e08:	mov	r1, #0
   18e0c:	cmp	r5, r3
   18e10:	mov	r2, #0
   18e14:	movwgt	r2, #1
   18e18:	cmn	r3, #1
   18e1c:	movwgt	r1, #1
   18e20:	cmp	r5, r6
   18e24:	bvs	18e94 <__assert_fail@plt+0x7604>
   18e28:	ands	r1, r1, r2
   18e2c:	bne	18e94 <__assert_fail@plt+0x7604>
   18e30:	cmn	r4, #1
   18e34:	ble	18e5c <__assert_fail@plt+0x75cc>
   18e38:	cmp	r4, #0
   18e3c:	beq	18ea8 <__assert_fail@plt+0x7618>
   18e40:	cmn	r5, #1
   18e44:	ble	18e80 <__assert_fail@plt+0x75f0>
   18e48:	mvn	r1, #-2147483648	; 0x80000000
   18e4c:	udiv	r1, r1, r4
   18e50:	cmp	r1, r5
   18e54:	bge	18ea8 <__assert_fail@plt+0x7618>
   18e58:	b	18e94 <__assert_fail@plt+0x7604>
   18e5c:	cmn	r5, #1
   18e60:	ble	18e98 <__assert_fail@plt+0x7608>
   18e64:	cmn	r4, #1
   18e68:	beq	18ea8 <__assert_fail@plt+0x7618>
   18e6c:	mov	r1, #-2147483648	; 0x80000000
   18e70:	sdiv	r1, r1, r4
   18e74:	cmp	r1, r5
   18e78:	bge	18ea8 <__assert_fail@plt+0x7618>
   18e7c:	b	18e94 <__assert_fail@plt+0x7604>
   18e80:	beq	18ea8 <__assert_fail@plt+0x7618>
   18e84:	mov	r1, #-2147483648	; 0x80000000
   18e88:	sdiv	r1, r1, r5
   18e8c:	cmp	r1, r4
   18e90:	bge	18ea8 <__assert_fail@plt+0x7618>
   18e94:	bl	18f90 <__assert_fail@plt+0x7700>
   18e98:	mvn	r1, #-2147483648	; 0x80000000
   18e9c:	sdiv	r1, r1, r4
   18ea0:	cmp	r5, r1
   18ea4:	blt	18e94 <__assert_fail@plt+0x7604>
   18ea8:	mul	r1, r5, r4
   18eac:	bl	18c48 <__assert_fail@plt+0x73b8>
   18eb0:	str	r5, [r8]
   18eb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18eb8:	mov	r1, #1
   18ebc:	b	18ec0 <__assert_fail@plt+0x7630>
   18ec0:	push	{fp, lr}
   18ec4:	mov	fp, sp
   18ec8:	bl	19050 <__assert_fail@plt+0x77c0>
   18ecc:	pop	{fp, lr}
   18ed0:	b	18c1c <__assert_fail@plt+0x738c>
   18ed4:	mov	r1, #1
   18ed8:	b	18edc <__assert_fail@plt+0x764c>
   18edc:	push	{fp, lr}
   18ee0:	mov	fp, sp
   18ee4:	bl	19c74 <__assert_fail@plt+0x83e4>
   18ee8:	pop	{fp, lr}
   18eec:	b	18c1c <__assert_fail@plt+0x738c>
   18ef0:	push	{r4, r5, fp, lr}
   18ef4:	add	fp, sp, #8
   18ef8:	mov	r4, r1
   18efc:	mov	r5, r0
   18f00:	mov	r0, r1
   18f04:	bl	18c08 <__assert_fail@plt+0x7378>
   18f08:	mov	r1, r5
   18f0c:	mov	r2, r4
   18f10:	pop	{r4, r5, fp, lr}
   18f14:	b	1153c <memcpy@plt>
   18f18:	push	{r4, r5, fp, lr}
   18f1c:	add	fp, sp, #8
   18f20:	mov	r4, r1
   18f24:	mov	r5, r0
   18f28:	mov	r0, r1
   18f2c:	bl	18c30 <__assert_fail@plt+0x73a0>
   18f30:	mov	r1, r5
   18f34:	mov	r2, r4
   18f38:	pop	{r4, r5, fp, lr}
   18f3c:	b	1153c <memcpy@plt>
   18f40:	push	{r4, r5, fp, lr}
   18f44:	add	fp, sp, #8
   18f48:	mov	r4, r1
   18f4c:	mov	r5, r0
   18f50:	add	r0, r1, #1
   18f54:	bl	18c30 <__assert_fail@plt+0x73a0>
   18f58:	mov	r1, #0
   18f5c:	strb	r1, [r0, r4]
   18f60:	mov	r1, r5
   18f64:	mov	r2, r4
   18f68:	pop	{r4, r5, fp, lr}
   18f6c:	b	1153c <memcpy@plt>
   18f70:	push	{r4, sl, fp, lr}
   18f74:	add	fp, sp, #8
   18f78:	mov	r4, r0
   18f7c:	bl	116ec <strlen@plt>
   18f80:	add	r1, r0, #1
   18f84:	mov	r0, r4
   18f88:	pop	{r4, sl, fp, lr}
   18f8c:	b	18ef0 <__assert_fail@plt+0x7660>
   18f90:	push	{fp, lr}
   18f94:	mov	fp, sp
   18f98:	movw	r0, #49516	; 0xc16c
   18f9c:	movt	r0, #2
   18fa0:	ldr	r4, [r0]
   18fa4:	movw	r1, #47070	; 0xb7de
   18fa8:	movt	r1, #1
   18fac:	mov	r0, #0
   18fb0:	mov	r2, #5
   18fb4:	bl	1156c <dcgettext@plt>
   18fb8:	mov	r3, r0
   18fbc:	movw	r2, #45839	; 0xb30f
   18fc0:	movt	r2, #1
   18fc4:	mov	r0, r4
   18fc8:	mov	r1, #0
   18fcc:	bl	1162c <error@plt>
   18fd0:	bl	11854 <abort@plt>
   18fd4:	push	{fp, lr}
   18fd8:	mov	fp, sp
   18fdc:	orr	r1, r1, #512	; 0x200
   18fe0:	bl	12f44 <__assert_fail@plt+0x16b4>
   18fe4:	cmp	r0, #0
   18fe8:	popne	{fp, pc}
   18fec:	bl	11710 <__errno_location@plt>
   18ff0:	ldr	r0, [r0]
   18ff4:	cmp	r0, #22
   18ff8:	bne	1901c <__assert_fail@plt+0x778c>
   18ffc:	movw	r0, #47087	; 0xb7ef
   19000:	movt	r0, #1
   19004:	movw	r1, #47103	; 0xb7ff
   19008:	movt	r1, #1
   1900c:	movw	r3, #47114	; 0xb80a
   19010:	movt	r3, #1
   19014:	mov	r2, #41	; 0x29
   19018:	bl	11890 <__assert_fail@plt>
   1901c:	bl	18f90 <__assert_fail@plt+0x7700>
   19020:	ldr	r0, [r0, #48]	; 0x30
   19024:	and	r2, r0, #17
   19028:	mov	r0, #1
   1902c:	cmp	r2, #16
   19030:	beq	1904c <__assert_fail@plt+0x77bc>
   19034:	mov	r0, #0
   19038:	cmp	r2, #17
   1903c:	bxne	lr
   19040:	ldr	r0, [r1, #48]	; 0x30
   19044:	cmp	r0, #0
   19048:	movwne	r0, #1
   1904c:	bx	lr
   19050:	clz	r2, r1
   19054:	lsr	r2, r2, #5
   19058:	clz	r3, r0
   1905c:	lsr	r3, r3, #5
   19060:	orrs	r2, r3, r2
   19064:	movwne	r1, #1
   19068:	movwne	r0, #1
   1906c:	cmp	r1, #0
   19070:	beq	190a0 <__assert_fail@plt+0x7810>
   19074:	mvn	r2, #-2147483648	; 0x80000000
   19078:	udiv	r2, r2, r1
   1907c:	cmp	r2, r0
   19080:	bcs	190a0 <__assert_fail@plt+0x7810>
   19084:	push	{fp, lr}
   19088:	mov	fp, sp
   1908c:	bl	11710 <__errno_location@plt>
   19090:	mov	r1, #12
   19094:	str	r1, [r0]
   19098:	mov	r0, #0
   1909c:	pop	{fp, pc}
   190a0:	b	114c4 <calloc@plt>
   190a4:	cmp	r0, #0
   190a8:	movweq	r0, #1
   190ac:	cmn	r0, #1
   190b0:	ble	190b8 <__assert_fail@plt+0x7828>
   190b4:	b	1165c <malloc@plt>
   190b8:	push	{fp, lr}
   190bc:	mov	fp, sp
   190c0:	bl	11710 <__errno_location@plt>
   190c4:	mov	r1, #12
   190c8:	str	r1, [r0]
   190cc:	mov	r0, #0
   190d0:	pop	{fp, pc}
   190d4:	push	{fp, lr}
   190d8:	mov	fp, sp
   190dc:	cmp	r0, #0
   190e0:	beq	190fc <__assert_fail@plt+0x786c>
   190e4:	cmp	r1, #0
   190e8:	beq	19108 <__assert_fail@plt+0x7878>
   190ec:	cmn	r1, #1
   190f0:	ble	19114 <__assert_fail@plt+0x7884>
   190f4:	pop	{fp, lr}
   190f8:	b	11584 <realloc@plt>
   190fc:	mov	r0, r1
   19100:	pop	{fp, lr}
   19104:	b	190a4 <__assert_fail@plt+0x7814>
   19108:	bl	19b78 <__assert_fail@plt+0x82e8>
   1910c:	mov	r0, #0
   19110:	pop	{fp, pc}
   19114:	bl	11710 <__errno_location@plt>
   19118:	mov	r1, #12
   1911c:	str	r1, [r0]
   19120:	mov	r0, #0
   19124:	pop	{fp, pc}
   19128:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1912c:	add	fp, sp, #24
   19130:	sub	sp, sp, #40	; 0x28
   19134:	mov	r5, r0
   19138:	ldrb	r0, [r2]
   1913c:	cmp	r0, #0
   19140:	beq	19224 <__assert_fail@plt+0x7994>
   19144:	mov	r4, r2
   19148:	mov	r6, r1
   1914c:	movw	r9, #49984	; 0xc340
   19150:	movt	r9, #2
   19154:	ldr	r0, [r9]
   19158:	cmp	r0, #0
   1915c:	bne	191c8 <__assert_fail@plt+0x7938>
   19160:	movw	r0, #47192	; 0xb858
   19164:	movt	r0, #1
   19168:	movw	r1, #18688	; 0x4900
   1916c:	movt	r1, #8
   19170:	bl	11644 <open64@plt>
   19174:	cmn	r0, #1
   19178:	ble	1923c <__assert_fail@plt+0x79ac>
   1917c:	mov	r7, r0
   19180:	str	r0, [sp]
   19184:	add	r8, sp, #8
   19188:	movw	r3, #47206	; 0xb866
   1918c:	movt	r3, #1
   19190:	mov	r0, r8
   19194:	mov	r1, #1
   19198:	mov	r2, #32
   1919c:	bl	1171c <__sprintf_chk@plt>
   191a0:	mov	r0, r8
   191a4:	mov	r1, #0
   191a8:	bl	1177c <access@plt>
   191ac:	mvn	r1, #0
   191b0:	cmp	r0, #0
   191b4:	movweq	r1, #1
   191b8:	str	r1, [r9]
   191bc:	mov	r0, r7
   191c0:	bl	11860 <close@plt>
   191c4:	ldr	r0, [r9]
   191c8:	mov	r7, #0
   191cc:	cmp	r0, #0
   191d0:	bmi	19230 <__assert_fail@plt+0x79a0>
   191d4:	mov	r0, r4
   191d8:	bl	116ec <strlen@plt>
   191dc:	add	r0, r0, #27
   191e0:	cmp	r0, #4032	; 0xfc0
   191e4:	bls	191f8 <__assert_fail@plt+0x7968>
   191e8:	bl	190a4 <__assert_fail@plt+0x7814>
   191ec:	mov	r5, r0
   191f0:	cmp	r0, #0
   191f4:	beq	19230 <__assert_fail@plt+0x79a0>
   191f8:	str	r6, [sp]
   191fc:	movw	r3, #47229	; 0xb87d
   19200:	movt	r3, #1
   19204:	mov	r0, r5
   19208:	mov	r1, #1
   1920c:	mvn	r2, #0
   19210:	bl	1171c <__sprintf_chk@plt>
   19214:	add	r0, r5, r0
   19218:	mov	r1, r4
   1921c:	bl	115fc <strcpy@plt>
   19220:	b	1922c <__assert_fail@plt+0x799c>
   19224:	mov	r0, #0
   19228:	strb	r0, [r5]
   1922c:	mov	r7, r5
   19230:	mov	r0, r7
   19234:	sub	sp, fp, #24
   19238:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1923c:	mvn	r0, #0
   19240:	str	r0, [r9]
   19244:	mov	r7, #0
   19248:	b	19230 <__assert_fail@plt+0x79a0>
   1924c:	push	{r4, r5, r6, sl, fp, lr}
   19250:	add	fp, sp, #16
   19254:	rsb	lr, r2, #64	; 0x40
   19258:	lsr	ip, r0, lr
   1925c:	rsb	r3, lr, #32
   19260:	orr	r3, ip, r1, lsl r3
   19264:	rsbs	r5, r2, #32
   19268:	lsrpl	r3, r1, r5
   1926c:	lsl	r4, r0, r2
   19270:	subs	r6, r2, #32
   19274:	movwpl	r4, #0
   19278:	orr	ip, r3, r4
   1927c:	lsr	r3, r0, r5
   19280:	orr	r2, r3, r1, lsl r2
   19284:	lslpl	r2, r0, r6
   19288:	lsr	r0, r1, lr
   1928c:	cmp	r5, #0
   19290:	movwpl	r0, #0
   19294:	orr	r1, r0, r2
   19298:	mov	r0, ip
   1929c:	pop	{r4, r5, r6, sl, fp, pc}
   192a0:	push	{r4, r5, fp, lr}
   192a4:	add	fp, sp, #8
   192a8:	lsr	ip, r0, r2
   192ac:	rsb	r3, r2, #32
   192b0:	orr	ip, ip, r1, lsl r3
   192b4:	subs	lr, r2, #32
   192b8:	lsrpl	ip, r1, lr
   192bc:	rsb	r4, r2, #64	; 0x40
   192c0:	lsl	r5, r0, r4
   192c4:	cmp	r3, #0
   192c8:	movwpl	r5, #0
   192cc:	orr	ip, r5, ip
   192d0:	rsb	r5, r4, #32
   192d4:	lsr	r5, r0, r5
   192d8:	orr	r4, r5, r1, lsl r4
   192dc:	cmp	r3, #0
   192e0:	lslpl	r4, r0, r3
   192e4:	lsr	r0, r1, r2
   192e8:	cmp	lr, #0
   192ec:	movwpl	r0, #0
   192f0:	orr	r1, r4, r0
   192f4:	mov	r0, ip
   192f8:	pop	{r4, r5, fp, pc}
   192fc:	rsb	r1, r1, #32
   19300:	ror	r0, r0, r1
   19304:	bx	lr
   19308:	ror	r0, r0, r1
   1930c:	bx	lr
   19310:	rsb	r1, r1, #32
   19314:	ror	r0, r0, r1
   19318:	bx	lr
   1931c:	ror	r0, r0, r1
   19320:	bx	lr
   19324:	and	r2, r1, #15
   19328:	lsl	r2, r0, r2
   1932c:	rsb	r1, r1, #0
   19330:	and	r1, r1, #15
   19334:	orr	r0, r2, r0, lsr r1
   19338:	uxth	r0, r0
   1933c:	bx	lr
   19340:	rsb	r2, r1, #0
   19344:	and	r2, r2, #15
   19348:	lsl	r2, r0, r2
   1934c:	and	r1, r1, #15
   19350:	orr	r0, r2, r0, lsr r1
   19354:	uxth	r0, r0
   19358:	bx	lr
   1935c:	and	r2, r1, #7
   19360:	lsl	r2, r0, r2
   19364:	rsb	r1, r1, #0
   19368:	and	r1, r1, #7
   1936c:	orr	r0, r2, r0, lsr r1
   19370:	uxtb	r0, r0
   19374:	bx	lr
   19378:	rsb	r2, r1, #0
   1937c:	and	r2, r2, #7
   19380:	lsl	r2, r0, r2
   19384:	and	r1, r1, #7
   19388:	orr	r0, r2, r0, lsr r1
   1938c:	uxtb	r0, r0
   19390:	bx	lr
   19394:	mov	r1, r0
   19398:	sub	r2, r0, #65	; 0x41
   1939c:	mov	r0, #1
   193a0:	cmp	r2, #26
   193a4:	subcs	r2, r1, #97	; 0x61
   193a8:	cmpcs	r2, #26
   193ac:	bcs	193b4 <__assert_fail@plt+0x7b24>
   193b0:	bx	lr
   193b4:	sub	r1, r1, #48	; 0x30
   193b8:	cmp	r1, #10
   193bc:	movcs	r0, #0
   193c0:	bx	lr
   193c4:	mov	r1, r0
   193c8:	sub	r2, r0, #65	; 0x41
   193cc:	mov	r0, #1
   193d0:	cmp	r2, #26
   193d4:	subcs	r1, r1, #97	; 0x61
   193d8:	cmpcs	r1, #26
   193dc:	movcs	r0, #0
   193e0:	bx	lr
   193e4:	mov	r1, #0
   193e8:	cmp	r0, #128	; 0x80
   193ec:	movwcc	r1, #1
   193f0:	mov	r0, r1
   193f4:	bx	lr
   193f8:	sub	r1, r0, #9
   193fc:	clz	r1, r1
   19400:	lsr	r1, r1, #5
   19404:	sub	r0, r0, #32
   19408:	clz	r0, r0
   1940c:	lsr	r0, r0, #5
   19410:	orr	r0, r0, r1
   19414:	bx	lr
   19418:	mov	r1, r0
   1941c:	mov	r0, #1
   19420:	cmp	r1, #32
   19424:	bxcc	lr
   19428:	cmp	r1, #127	; 0x7f
   1942c:	movne	r0, #0
   19430:	bx	lr
   19434:	sub	r1, r0, #48	; 0x30
   19438:	mov	r0, #0
   1943c:	cmp	r1, #10
   19440:	movwcc	r0, #1
   19444:	bx	lr
   19448:	sub	r1, r0, #33	; 0x21
   1944c:	mov	r0, #0
   19450:	cmp	r1, #94	; 0x5e
   19454:	movwcc	r0, #1
   19458:	bx	lr
   1945c:	sub	r1, r0, #97	; 0x61
   19460:	mov	r0, #0
   19464:	cmp	r1, #26
   19468:	movwcc	r0, #1
   1946c:	bx	lr
   19470:	sub	r1, r0, #32
   19474:	mov	r0, #0
   19478:	cmp	r1, #95	; 0x5f
   1947c:	movwcc	r0, #1
   19480:	bx	lr
   19484:	sub	r1, r0, #33	; 0x21
   19488:	cmp	r1, #93	; 0x5d
   1948c:	bhi	19618 <__assert_fail@plt+0x7d88>
   19490:	mov	r0, #1
   19494:	add	r2, pc, #0
   19498:	ldr	pc, [r2, r1, lsl #2]
   1949c:	andeq	r9, r1, r4, lsl r6
   194a0:	andeq	r9, r1, r4, lsl r6
   194a4:	andeq	r9, r1, r4, lsl r6
   194a8:	andeq	r9, r1, r4, lsl r6
   194ac:	andeq	r9, r1, r4, lsl r6
   194b0:	andeq	r9, r1, r4, lsl r6
   194b4:	andeq	r9, r1, r4, lsl r6
   194b8:	andeq	r9, r1, r4, lsl r6
   194bc:	andeq	r9, r1, r4, lsl r6
   194c0:	andeq	r9, r1, r4, lsl r6
   194c4:	andeq	r9, r1, r4, lsl r6
   194c8:	andeq	r9, r1, r4, lsl r6
   194cc:	andeq	r9, r1, r4, lsl r6
   194d0:	andeq	r9, r1, r4, lsl r6
   194d4:	andeq	r9, r1, r4, lsl r6
   194d8:	andeq	r9, r1, r8, lsl r6
   194dc:	andeq	r9, r1, r8, lsl r6
   194e0:	andeq	r9, r1, r8, lsl r6
   194e4:	andeq	r9, r1, r8, lsl r6
   194e8:	andeq	r9, r1, r8, lsl r6
   194ec:	andeq	r9, r1, r8, lsl r6
   194f0:	andeq	r9, r1, r8, lsl r6
   194f4:	andeq	r9, r1, r8, lsl r6
   194f8:	andeq	r9, r1, r8, lsl r6
   194fc:	andeq	r9, r1, r8, lsl r6
   19500:	andeq	r9, r1, r4, lsl r6
   19504:	andeq	r9, r1, r4, lsl r6
   19508:	andeq	r9, r1, r4, lsl r6
   1950c:	andeq	r9, r1, r4, lsl r6
   19510:	andeq	r9, r1, r4, lsl r6
   19514:	andeq	r9, r1, r4, lsl r6
   19518:	andeq	r9, r1, r4, lsl r6
   1951c:	andeq	r9, r1, r8, lsl r6
   19520:	andeq	r9, r1, r8, lsl r6
   19524:	andeq	r9, r1, r8, lsl r6
   19528:	andeq	r9, r1, r8, lsl r6
   1952c:	andeq	r9, r1, r8, lsl r6
   19530:	andeq	r9, r1, r8, lsl r6
   19534:	andeq	r9, r1, r8, lsl r6
   19538:	andeq	r9, r1, r8, lsl r6
   1953c:	andeq	r9, r1, r8, lsl r6
   19540:	andeq	r9, r1, r8, lsl r6
   19544:	andeq	r9, r1, r8, lsl r6
   19548:	andeq	r9, r1, r8, lsl r6
   1954c:	andeq	r9, r1, r8, lsl r6
   19550:	andeq	r9, r1, r8, lsl r6
   19554:	andeq	r9, r1, r8, lsl r6
   19558:	andeq	r9, r1, r8, lsl r6
   1955c:	andeq	r9, r1, r8, lsl r6
   19560:	andeq	r9, r1, r8, lsl r6
   19564:	andeq	r9, r1, r8, lsl r6
   19568:	andeq	r9, r1, r8, lsl r6
   1956c:	andeq	r9, r1, r8, lsl r6
   19570:	andeq	r9, r1, r8, lsl r6
   19574:	andeq	r9, r1, r8, lsl r6
   19578:	andeq	r9, r1, r8, lsl r6
   1957c:	andeq	r9, r1, r8, lsl r6
   19580:	andeq	r9, r1, r8, lsl r6
   19584:	andeq	r9, r1, r4, lsl r6
   19588:	andeq	r9, r1, r4, lsl r6
   1958c:	andeq	r9, r1, r4, lsl r6
   19590:	andeq	r9, r1, r4, lsl r6
   19594:	andeq	r9, r1, r4, lsl r6
   19598:	andeq	r9, r1, r4, lsl r6
   1959c:	andeq	r9, r1, r8, lsl r6
   195a0:	andeq	r9, r1, r8, lsl r6
   195a4:	andeq	r9, r1, r8, lsl r6
   195a8:	andeq	r9, r1, r8, lsl r6
   195ac:	andeq	r9, r1, r8, lsl r6
   195b0:	andeq	r9, r1, r8, lsl r6
   195b4:	andeq	r9, r1, r8, lsl r6
   195b8:	andeq	r9, r1, r8, lsl r6
   195bc:	andeq	r9, r1, r8, lsl r6
   195c0:	andeq	r9, r1, r8, lsl r6
   195c4:	andeq	r9, r1, r8, lsl r6
   195c8:	andeq	r9, r1, r8, lsl r6
   195cc:	andeq	r9, r1, r8, lsl r6
   195d0:	andeq	r9, r1, r8, lsl r6
   195d4:	andeq	r9, r1, r8, lsl r6
   195d8:	andeq	r9, r1, r8, lsl r6
   195dc:	andeq	r9, r1, r8, lsl r6
   195e0:	andeq	r9, r1, r8, lsl r6
   195e4:	andeq	r9, r1, r8, lsl r6
   195e8:	andeq	r9, r1, r8, lsl r6
   195ec:	andeq	r9, r1, r8, lsl r6
   195f0:	andeq	r9, r1, r8, lsl r6
   195f4:	andeq	r9, r1, r8, lsl r6
   195f8:	andeq	r9, r1, r8, lsl r6
   195fc:	andeq	r9, r1, r8, lsl r6
   19600:	andeq	r9, r1, r8, lsl r6
   19604:	andeq	r9, r1, r4, lsl r6
   19608:	andeq	r9, r1, r4, lsl r6
   1960c:	andeq	r9, r1, r4, lsl r6
   19610:	andeq	r9, r1, r4, lsl r6
   19614:	bx	lr
   19618:	mov	r0, #0
   1961c:	bx	lr
   19620:	sub	r0, r0, #9
   19624:	cmp	r0, #23
   19628:	movhi	r0, #0
   1962c:	bxhi	lr
   19630:	bic	r0, r0, #-16777216	; 0xff000000
   19634:	movw	r1, #31
   19638:	movt	r1, #128	; 0x80
   1963c:	mov	r2, #1
   19640:	and	r0, r2, r1, lsr r0
   19644:	bx	lr
   19648:	sub	r1, r0, #65	; 0x41
   1964c:	mov	r0, #0
   19650:	cmp	r1, #26
   19654:	movwcc	r0, #1
   19658:	bx	lr
   1965c:	mov	r1, r0
   19660:	sub	r2, r0, #48	; 0x30
   19664:	mov	r0, #1
   19668:	cmp	r2, #22
   1966c:	bhi	19684 <__assert_fail@plt+0x7df4>
   19670:	mov	ip, #1
   19674:	movw	r3, #1023	; 0x3ff
   19678:	movt	r3, #126	; 0x7e
   1967c:	tst	r3, ip, lsl r2
   19680:	bxne	lr
   19684:	sub	r1, r1, #97	; 0x61
   19688:	cmp	r1, #6
   1968c:	movcs	r0, #0
   19690:	bxcs	lr
   19694:	bx	lr
   19698:	sub	r1, r0, #65	; 0x41
   1969c:	cmp	r1, #26
   196a0:	addcc	r0, r0, #32
   196a4:	bx	lr
   196a8:	sub	r1, r0, #97	; 0x61
   196ac:	cmp	r1, #26
   196b0:	subcc	r0, r0, #32
   196b4:	bx	lr
   196b8:	push	{r4, r5, r6, sl, fp, lr}
   196bc:	add	fp, sp, #16
   196c0:	mov	r4, r0
   196c4:	bl	11608 <__fpending@plt>
   196c8:	mov	r5, r0
   196cc:	mov	r0, r4
   196d0:	bl	11614 <ferror_unlocked@plt>
   196d4:	mov	r6, r0
   196d8:	mov	r0, r4
   196dc:	bl	19850 <__assert_fail@plt+0x7fc0>
   196e0:	cmp	r6, #0
   196e4:	beq	19708 <__assert_fail@plt+0x7e78>
   196e8:	mvn	r4, #0
   196ec:	cmp	r0, #0
   196f0:	bne	19734 <__assert_fail@plt+0x7ea4>
   196f4:	bl	11710 <__errno_location@plt>
   196f8:	mov	r1, #0
   196fc:	str	r1, [r0]
   19700:	mov	r0, r4
   19704:	pop	{r4, r5, r6, sl, fp, pc}
   19708:	cmp	r0, #0
   1970c:	mov	r4, r0
   19710:	mvnne	r4, #0
   19714:	cmp	r5, #0
   19718:	bne	19734 <__assert_fail@plt+0x7ea4>
   1971c:	cmp	r0, #0
   19720:	beq	19734 <__assert_fail@plt+0x7ea4>
   19724:	bl	11710 <__errno_location@plt>
   19728:	ldr	r0, [r0]
   1972c:	subs	r4, r0, #9
   19730:	mvnne	r4, #0
   19734:	mov	r0, r4
   19738:	pop	{r4, r5, r6, sl, fp, pc}
   1973c:	mov	r1, #0
   19740:	movw	r2, #62998	; 0xf616
   19744:	movt	r2, #149	; 0x95
   19748:	str	r1, [r0, #16]
   1974c:	str	r1, [r0, #20]
   19750:	str	r2, [r0, #24]
   19754:	bx	lr
   19758:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1975c:	add	fp, sp, #24
   19760:	mov	r5, r1
   19764:	mov	r4, r0
   19768:	ldr	r0, [r0, #24]
   1976c:	movw	r1, #62998	; 0xf616
   19770:	movt	r1, #149	; 0x95
   19774:	cmp	r0, r1
   19778:	bne	19810 <__assert_fail@plt+0x7f80>
   1977c:	add	r6, r4, #8
   19780:	add	r1, r4, #16
   19784:	ldrd	r2, [r1]
   19788:	orrs	r0, r2, r3
   1978c:	beq	197c4 <__assert_fail@plt+0x7f34>
   19790:	ldm	r4, {r0, r7}
   19794:	ldrd	r8, [r5, #96]	; 0x60
   19798:	eor	r7, r9, r7
   1979c:	eor	r0, r8, r0
   197a0:	orrs	r0, r0, r7
   197a4:	bne	197c4 <__assert_fail@plt+0x7f34>
   197a8:	ldm	r6, {r0, r7}
   197ac:	ldrd	r8, [r5]
   197b0:	eor	r7, r9, r7
   197b4:	eor	r0, r8, r0
   197b8:	orrs	r0, r0, r7
   197bc:	mov	r0, #1
   197c0:	beq	19804 <__assert_fail@plt+0x7f74>
   197c4:	adds	r8, r2, #1
   197c8:	adc	r9, r3, #0
   197cc:	strd	r8, [r1]
   197d0:	mov	r0, r8
   197d4:	mov	r1, r9
   197d8:	bl	19830 <__assert_fail@plt+0x7fa0>
   197dc:	mov	r1, r0
   197e0:	mov	r0, #0
   197e4:	cmp	r1, #0
   197e8:	beq	19804 <__assert_fail@plt+0x7f74>
   197ec:	orrs	r1, r8, r9
   197f0:	beq	19808 <__assert_fail@plt+0x7f78>
   197f4:	ldrd	r2, [r5]
   197f8:	strd	r2, [r6]
   197fc:	ldrd	r2, [r5, #96]	; 0x60
   19800:	strd	r2, [r4]
   19804:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19808:	mov	r0, #1
   1980c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19810:	movw	r0, #47247	; 0xb88f
   19814:	movt	r0, #1
   19818:	movw	r1, #47271	; 0xb8a7
   1981c:	movt	r1, #1
   19820:	movw	r3, #47289	; 0xb8b9
   19824:	movt	r3, #1
   19828:	mov	r2, #60	; 0x3c
   1982c:	bl	11890 <__assert_fail@plt>
   19830:	subs	r2, r0, #1
   19834:	and	r0, r0, r2
   19838:	sbc	r2, r1, #0
   1983c:	and	r1, r1, r2
   19840:	orr	r0, r0, r1
   19844:	clz	r0, r0
   19848:	lsr	r0, r0, #5
   1984c:	bx	lr
   19850:	push	{r4, r5, fp, lr}
   19854:	add	fp, sp, #8
   19858:	sub	sp, sp, #8
   1985c:	mov	r4, r0
   19860:	bl	1174c <fileno@plt>
   19864:	cmn	r0, #1
   19868:	ble	198e0 <__assert_fail@plt+0x8050>
   1986c:	mov	r0, r4
   19870:	bl	11674 <__freading@plt>
   19874:	cmp	r0, #0
   19878:	beq	198a4 <__assert_fail@plt+0x8014>
   1987c:	mov	r0, r4
   19880:	bl	1174c <fileno@plt>
   19884:	mov	r1, #1
   19888:	str	r1, [sp]
   1988c:	mov	r2, #0
   19890:	mov	r3, #0
   19894:	bl	115e4 <lseek64@plt>
   19898:	and	r0, r0, r1
   1989c:	cmn	r0, #1
   198a0:	beq	198e0 <__assert_fail@plt+0x8050>
   198a4:	mov	r0, r4
   198a8:	bl	19b10 <__assert_fail@plt+0x8280>
   198ac:	cmp	r0, #0
   198b0:	beq	198e0 <__assert_fail@plt+0x8050>
   198b4:	bl	11710 <__errno_location@plt>
   198b8:	ldr	r5, [r0]
   198bc:	mov	r0, r4
   198c0:	bl	11788 <fclose@plt>
   198c4:	cmp	r5, #0
   198c8:	beq	198d8 <__assert_fail@plt+0x8048>
   198cc:	bl	11710 <__errno_location@plt>
   198d0:	str	r5, [r0]
   198d4:	mvn	r0, #0
   198d8:	sub	sp, fp, #8
   198dc:	pop	{r4, r5, fp, pc}
   198e0:	mov	r0, r4
   198e4:	sub	sp, fp, #8
   198e8:	pop	{r4, r5, fp, lr}
   198ec:	b	11788 <fclose@plt>
   198f0:	sub	sp, sp, #8
   198f4:	push	{fp, lr}
   198f8:	mov	fp, sp
   198fc:	sub	sp, sp, #8
   19900:	str	r2, [fp, #8]
   19904:	str	r3, [fp, #12]
   19908:	add	r2, fp, #8
   1990c:	str	r2, [sp, #4]
   19910:	cmp	r1, #11
   19914:	bhi	19954 <__assert_fail@plt+0x80c4>
   19918:	mov	r2, #1
   1991c:	movw	r3, #1300	; 0x514
   19920:	tst	r3, r2, lsl r1
   19924:	bne	199a4 <__assert_fail@plt+0x8114>
   19928:	movw	r3, #2570	; 0xa0a
   1992c:	tst	r3, r2, lsl r1
   19930:	bne	1997c <__assert_fail@plt+0x80ec>
   19934:	cmp	r1, #0
   19938:	bne	19954 <__assert_fail@plt+0x80c4>
   1993c:	ldr	r1, [sp, #4]
   19940:	add	r2, r1, #4
   19944:	str	r2, [sp, #4]
   19948:	ldr	r1, [r1]
   1994c:	bl	199c8 <__assert_fail@plt+0x8138>
   19950:	b	199b8 <__assert_fail@plt+0x8128>
   19954:	sub	r2, r1, #1024	; 0x400
   19958:	cmp	r2, #10
   1995c:	bhi	199a4 <__assert_fail@plt+0x8114>
   19960:	mov	ip, #1
   19964:	movw	r3, #645	; 0x285
   19968:	tst	r3, ip, lsl r2
   1996c:	bne	199a4 <__assert_fail@plt+0x8114>
   19970:	movw	r3, #1282	; 0x502
   19974:	tst	r3, ip, lsl r2
   19978:	beq	19984 <__assert_fail@plt+0x80f4>
   1997c:	bl	117a0 <fcntl64@plt>
   19980:	b	199b8 <__assert_fail@plt+0x8128>
   19984:	cmp	r2, #6
   19988:	bne	199a4 <__assert_fail@plt+0x8114>
   1998c:	ldr	r1, [sp, #4]
   19990:	add	r2, r1, #4
   19994:	str	r2, [sp, #4]
   19998:	ldr	r1, [r1]
   1999c:	bl	199d4 <__assert_fail@plt+0x8144>
   199a0:	b	199b8 <__assert_fail@plt+0x8128>
   199a4:	ldr	r2, [sp, #4]
   199a8:	add	r3, r2, #4
   199ac:	str	r3, [sp, #4]
   199b0:	ldr	r2, [r2]
   199b4:	bl	117a0 <fcntl64@plt>
   199b8:	mov	sp, fp
   199bc:	pop	{fp, lr}
   199c0:	add	sp, sp, #8
   199c4:	bx	lr
   199c8:	mov	r2, r1
   199cc:	mov	r1, #0
   199d0:	b	117a0 <fcntl64@plt>
   199d4:	push	{r4, r5, r6, r7, fp, lr}
   199d8:	add	fp, sp, #16
   199dc:	mov	r5, r1
   199e0:	mov	r6, r0
   199e4:	movw	r7, #49988	; 0xc344
   199e8:	movt	r7, #2
   199ec:	ldr	r0, [r7]
   199f0:	cmp	r0, #0
   199f4:	bmi	19a58 <__assert_fail@plt+0x81c8>
   199f8:	mov	r0, r6
   199fc:	movw	r1, #1030	; 0x406
   19a00:	mov	r2, r5
   19a04:	bl	117a0 <fcntl64@plt>
   19a08:	mov	r4, r0
   19a0c:	cmn	r0, #1
   19a10:	bgt	19a44 <__assert_fail@plt+0x81b4>
   19a14:	bl	11710 <__errno_location@plt>
   19a18:	ldr	r0, [r0]
   19a1c:	cmp	r0, #22
   19a20:	bne	19a44 <__assert_fail@plt+0x81b4>
   19a24:	mov	r0, r6
   19a28:	mov	r1, r5
   19a2c:	bl	199c8 <__assert_fail@plt+0x8138>
   19a30:	mov	r4, r0
   19a34:	cmp	r0, #0
   19a38:	bmi	19aa8 <__assert_fail@plt+0x8218>
   19a3c:	mvn	r0, #0
   19a40:	b	19a48 <__assert_fail@plt+0x81b8>
   19a44:	mov	r0, #1
   19a48:	str	r0, [r7]
   19a4c:	cmp	r4, #0
   19a50:	bpl	19a70 <__assert_fail@plt+0x81e0>
   19a54:	b	19aa8 <__assert_fail@plt+0x8218>
   19a58:	mov	r0, r6
   19a5c:	mov	r1, r5
   19a60:	bl	199c8 <__assert_fail@plt+0x8138>
   19a64:	mov	r4, r0
   19a68:	cmp	r4, #0
   19a6c:	bmi	19aa8 <__assert_fail@plt+0x8218>
   19a70:	ldr	r0, [r7]
   19a74:	cmn	r0, #1
   19a78:	bne	19aa8 <__assert_fail@plt+0x8218>
   19a7c:	mov	r0, r4
   19a80:	mov	r1, #1
   19a84:	bl	117a0 <fcntl64@plt>
   19a88:	cmp	r0, #0
   19a8c:	bmi	19ab0 <__assert_fail@plt+0x8220>
   19a90:	orr	r2, r0, #1
   19a94:	mov	r0, r4
   19a98:	mov	r1, #2
   19a9c:	bl	117a0 <fcntl64@plt>
   19aa0:	cmn	r0, #1
   19aa4:	beq	19ab0 <__assert_fail@plt+0x8220>
   19aa8:	mov	r0, r4
   19aac:	pop	{r4, r5, r6, r7, fp, pc}
   19ab0:	bl	11710 <__errno_location@plt>
   19ab4:	mov	r5, r0
   19ab8:	ldr	r6, [r0]
   19abc:	mov	r0, r4
   19ac0:	bl	11860 <close@plt>
   19ac4:	str	r6, [r5]
   19ac8:	mvn	r4, #0
   19acc:	mov	r0, r4
   19ad0:	pop	{r4, r5, r6, r7, fp, pc}
   19ad4:	sub	sp, sp, #8
   19ad8:	push	{fp, lr}
   19adc:	mov	fp, sp
   19ae0:	sub	sp, sp, #8
   19ae4:	str	r2, [fp, #8]
   19ae8:	str	r3, [fp, #12]
   19aec:	mov	r2, #0
   19af0:	tst	r1, #64	; 0x40
   19af4:	ldrne	r2, [fp, #8]
   19af8:	bl	11644 <open64@plt>
   19afc:	bl	186f8 <__assert_fail@plt+0x6e68>
   19b00:	mov	sp, fp
   19b04:	pop	{fp, lr}
   19b08:	add	sp, sp, #8
   19b0c:	bx	lr
   19b10:	push	{r4, sl, fp, lr}
   19b14:	add	fp, sp, #8
   19b18:	mov	r4, r0
   19b1c:	cmp	r0, #0
   19b20:	beq	19b38 <__assert_fail@plt+0x82a8>
   19b24:	mov	r0, r4
   19b28:	bl	11674 <__freading@plt>
   19b2c:	cmp	r0, #0
   19b30:	movne	r0, r4
   19b34:	blne	19b44 <__assert_fail@plt+0x82b4>
   19b38:	mov	r0, r4
   19b3c:	pop	{r4, sl, fp, lr}
   19b40:	b	11500 <fflush@plt>
   19b44:	push	{fp, lr}
   19b48:	mov	fp, sp
   19b4c:	sub	sp, sp, #8
   19b50:	ldrb	r1, [r0, #1]
   19b54:	tst	r1, #1
   19b58:	beq	19b70 <__assert_fail@plt+0x82e0>
   19b5c:	mov	r1, #1
   19b60:	str	r1, [sp]
   19b64:	mov	r2, #0
   19b68:	mov	r3, #0
   19b6c:	bl	19ba0 <__assert_fail@plt+0x8310>
   19b70:	mov	sp, fp
   19b74:	pop	{fp, pc}
   19b78:	push	{r4, r5, r6, sl, fp, lr}
   19b7c:	add	fp, sp, #16
   19b80:	mov	r4, r0
   19b84:	bl	11710 <__errno_location@plt>
   19b88:	mov	r5, r0
   19b8c:	ldr	r6, [r0]
   19b90:	mov	r0, r4
   19b94:	bl	11524 <free@plt>
   19b98:	str	r6, [r5]
   19b9c:	pop	{r4, r5, r6, sl, fp, pc}
   19ba0:	push	{r4, r5, r6, r7, fp, lr}
   19ba4:	add	fp, sp, #16
   19ba8:	sub	sp, sp, #8
   19bac:	mov	r5, r3
   19bb0:	mov	r6, r2
   19bb4:	mov	r4, r0
   19bb8:	ldr	r0, [r0, #4]
   19bbc:	ldr	r1, [r4, #8]
   19bc0:	cmp	r1, r0
   19bc4:	bne	19be0 <__assert_fail@plt+0x8350>
   19bc8:	ldrd	r0, [r4, #16]
   19bcc:	cmp	r1, r0
   19bd0:	bne	19be0 <__assert_fail@plt+0x8350>
   19bd4:	ldr	r0, [r4, #36]	; 0x24
   19bd8:	cmp	r0, #0
   19bdc:	beq	19bf8 <__assert_fail@plt+0x8368>
   19be0:	mov	r0, r4
   19be4:	mov	r2, r6
   19be8:	mov	r3, r5
   19bec:	sub	sp, fp, #16
   19bf0:	pop	{r4, r5, r6, r7, fp, lr}
   19bf4:	b	11794 <fseeko64@plt>
   19bf8:	ldr	r7, [fp, #8]
   19bfc:	mov	r0, r4
   19c00:	bl	1174c <fileno@plt>
   19c04:	str	r7, [sp]
   19c08:	mov	r2, r6
   19c0c:	mov	r3, r5
   19c10:	bl	115e4 <lseek64@plt>
   19c14:	and	r2, r0, r1
   19c18:	cmn	r2, #1
   19c1c:	beq	19c3c <__assert_fail@plt+0x83ac>
   19c20:	strd	r0, [r4, #80]	; 0x50
   19c24:	ldr	r0, [r4]
   19c28:	bic	r0, r0, #16
   19c2c:	str	r0, [r4]
   19c30:	mov	r0, #0
   19c34:	sub	sp, fp, #16
   19c38:	pop	{r4, r5, r6, r7, fp, pc}
   19c3c:	mvn	r0, #0
   19c40:	sub	sp, fp, #16
   19c44:	pop	{r4, r5, r6, r7, fp, pc}
   19c48:	push	{fp, lr}
   19c4c:	mov	fp, sp
   19c50:	bl	11710 <__errno_location@plt>
   19c54:	mov	r1, #12
   19c58:	str	r1, [r0]
   19c5c:	mov	r0, #0
   19c60:	pop	{fp, pc}
   19c64:	b	190a4 <__assert_fail@plt+0x7814>
   19c68:	cmp	r1, #0
   19c6c:	orreq	r1, r1, #1
   19c70:	b	190d4 <__assert_fail@plt+0x7844>
   19c74:	b	19050 <__assert_fail@plt+0x77c0>
   19c78:	clz	r3, r2
   19c7c:	lsr	ip, r3, #5
   19c80:	clz	r3, r1
   19c84:	lsr	r3, r3, #5
   19c88:	orrs	r3, r3, ip
   19c8c:	movwne	r1, #1
   19c90:	movwne	r2, #1
   19c94:	b	19db4 <__assert_fail@plt+0x8524>
   19c98:	push	{fp, lr}
   19c9c:	mov	fp, sp
   19ca0:	mov	r0, #14
   19ca4:	bl	117c4 <nl_langinfo@plt>
   19ca8:	movw	r1, #44011	; 0xabeb
   19cac:	movt	r1, #1
   19cb0:	cmp	r0, #0
   19cb4:	movne	r1, r0
   19cb8:	ldrb	r2, [r1]
   19cbc:	movw	r0, #47356	; 0xb8fc
   19cc0:	movt	r0, #1
   19cc4:	cmp	r2, #0
   19cc8:	movne	r0, r1
   19ccc:	pop	{fp, pc}
   19cd0:	push	{r4, r5, r6, r7, fp, lr}
   19cd4:	add	fp, sp, #16
   19cd8:	sub	sp, sp, #8
   19cdc:	mov	r7, r2
   19ce0:	mov	r4, r1
   19ce4:	add	r5, sp, #4
   19ce8:	cmp	r0, #0
   19cec:	movne	r5, r0
   19cf0:	mov	r0, r5
   19cf4:	bl	11620 <mbrtowc@plt>
   19cf8:	mov	r6, r0
   19cfc:	cmp	r7, #0
   19d00:	beq	19d28 <__assert_fail@plt+0x8498>
   19d04:	cmn	r6, #2
   19d08:	bcc	19d28 <__assert_fail@plt+0x8498>
   19d0c:	mov	r0, #0
   19d10:	bl	1a1dc <__assert_fail@plt+0x894c>
   19d14:	cmp	r0, #0
   19d18:	bne	19d28 <__assert_fail@plt+0x8498>
   19d1c:	ldrb	r0, [r4]
   19d20:	str	r0, [r5]
   19d24:	mov	r6, #1
   19d28:	mov	r0, r6
   19d2c:	sub	sp, fp, #16
   19d30:	pop	{r4, r5, r6, r7, fp, pc}
   19d34:	push	{fp, lr}
   19d38:	mov	fp, sp
   19d3c:	mov	r4, r0
   19d40:	movw	r0, #49516	; 0xc16c
   19d44:	movt	r0, #2
   19d48:	ldr	r5, [r0]
   19d4c:	movw	r1, #47362	; 0xb902
   19d50:	movt	r1, #1
   19d54:	mov	r0, #0
   19d58:	mov	r2, #5
   19d5c:	bl	1156c <dcgettext@plt>
   19d60:	mov	r2, r0
   19d64:	mov	r0, r5
   19d68:	mov	r1, r4
   19d6c:	bl	1162c <error@plt>
   19d70:	bl	11854 <abort@plt>
   19d74:	push	{fp, lr}
   19d78:	mov	fp, sp
   19d7c:	mov	r4, r0
   19d80:	movw	r0, #49516	; 0xc16c
   19d84:	movt	r0, #2
   19d88:	ldr	r5, [r0]
   19d8c:	movw	r1, #47405	; 0xb92d
   19d90:	movt	r1, #1
   19d94:	mov	r0, #0
   19d98:	mov	r2, #5
   19d9c:	bl	1156c <dcgettext@plt>
   19da0:	mov	r2, r0
   19da4:	mov	r0, r5
   19da8:	mov	r1, r4
   19dac:	bl	1162c <error@plt>
   19db0:	bl	11854 <abort@plt>
   19db4:	cmp	r2, #0
   19db8:	beq	19de8 <__assert_fail@plt+0x8558>
   19dbc:	mvn	r3, #0
   19dc0:	udiv	r3, r3, r2
   19dc4:	cmp	r3, r1
   19dc8:	bcs	19de8 <__assert_fail@plt+0x8558>
   19dcc:	push	{fp, lr}
   19dd0:	mov	fp, sp
   19dd4:	bl	11710 <__errno_location@plt>
   19dd8:	mov	r1, #12
   19ddc:	str	r1, [r0]
   19de0:	mov	r0, #0
   19de4:	pop	{fp, pc}
   19de8:	mul	r1, r2, r1
   19dec:	b	190d4 <__assert_fail@plt+0x7844>
   19df0:	push	{r4, r5, fp, lr}
   19df4:	add	fp, sp, #8
   19df8:	mov	r5, r0
   19dfc:	mov	r4, #0
   19e00:	str	r4, [r0, #4]
   19e04:	movw	r0, #45843	; 0xb313
   19e08:	movt	r0, #1
   19e0c:	mov	r1, #524288	; 0x80000
   19e10:	bl	19ad4 <__assert_fail@plt+0x8244>
   19e14:	str	r0, [r5]
   19e18:	cmn	r0, #1
   19e1c:	ble	19e28 <__assert_fail@plt+0x8598>
   19e20:	mov	r0, r4
   19e24:	pop	{r4, r5, fp, pc}
   19e28:	mov	r4, #0
   19e2c:	mov	r0, #0
   19e30:	mov	r1, #0
   19e34:	bl	116b0 <getcwd@plt>
   19e38:	str	r0, [r5, #4]
   19e3c:	cmp	r0, #0
   19e40:	mvneq	r4, #0
   19e44:	mov	r0, r4
   19e48:	pop	{r4, r5, fp, pc}
   19e4c:	ldr	r1, [r0]
   19e50:	cmp	r1, #0
   19e54:	bmi	19e60 <__assert_fail@plt+0x85d0>
   19e58:	mov	r0, r1
   19e5c:	b	117f4 <fchdir@plt>
   19e60:	ldr	r0, [r0, #4]
   19e64:	b	19e9c <__assert_fail@plt+0x860c>
   19e68:	push	{r4, sl, fp, lr}
   19e6c:	add	fp, sp, #8
   19e70:	mov	r4, r0
   19e74:	ldr	r0, [r0]
   19e78:	cmp	r0, #0
   19e7c:	bmi	19e84 <__assert_fail@plt+0x85f4>
   19e80:	bl	11860 <close@plt>
   19e84:	ldr	r0, [r4, #4]
   19e88:	pop	{r4, sl, fp, lr}
   19e8c:	b	19b78 <__assert_fail@plt+0x82e8>
   19e90:	mov	r1, #0
   19e94:	mov	r2, #3
   19e98:	b	198f0 <__assert_fail@plt+0x8060>
   19e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ea0:	add	fp, sp, #28
   19ea4:	sub	sp, sp, #4
   19ea8:	mov	r5, r0
   19eac:	bl	115a8 <chdir@plt>
   19eb0:	cmp	r0, #0
   19eb4:	beq	19f70 <__assert_fail@plt+0x86e0>
   19eb8:	mov	r6, r0
   19ebc:	bl	11710 <__errno_location@plt>
   19ec0:	mov	r8, r0
   19ec4:	ldr	r0, [r0]
   19ec8:	cmp	r0, #36	; 0x24
   19ecc:	bne	1a068 <__assert_fail@plt+0x87d8>
   19ed0:	mov	r0, r5
   19ed4:	bl	116ec <strlen@plt>
   19ed8:	mov	r6, r0
   19edc:	mov	r0, sp
   19ee0:	bl	1a124 <__assert_fail@plt+0x8894>
   19ee4:	cmp	r6, #0
   19ee8:	beq	1a0a4 <__assert_fail@plt+0x8814>
   19eec:	mov	r0, #0
   19ef0:	cmp	r0, r6, lsr #12
   19ef4:	beq	1a0c4 <__assert_fail@plt+0x8834>
   19ef8:	movw	r1, #47245	; 0xb88d
   19efc:	movt	r1, #1
   19f00:	mov	r0, r5
   19f04:	bl	11884 <strspn@plt>
   19f08:	cmp	r0, #0
   19f0c:	mov	r7, r5
   19f10:	beq	19f94 <__assert_fail@plt+0x8704>
   19f14:	mov	r4, r0
   19f18:	cmp	r0, #2
   19f1c:	bne	19f78 <__assert_fail@plt+0x86e8>
   19f20:	add	r0, r5, #3
   19f24:	sub	r2, r6, #3
   19f28:	mov	r7, #47	; 0x2f
   19f2c:	mov	r1, #47	; 0x2f
   19f30:	bl	11764 <memchr@plt>
   19f34:	cmp	r0, #0
   19f38:	beq	1a05c <__assert_fail@plt+0x87cc>
   19f3c:	mov	r4, r0
   19f40:	mov	r0, #0
   19f44:	strb	r0, [r4]
   19f48:	mov	r0, sp
   19f4c:	mov	r1, r5
   19f50:	bl	1a130 <__assert_fail@plt+0x88a0>
   19f54:	strb	r7, [r4]
   19f58:	cmp	r0, #0
   19f5c:	bne	1a048 <__assert_fail@plt+0x87b8>
   19f60:	add	r0, r4, #1
   19f64:	bl	1a170 <__assert_fail@plt+0x88e0>
   19f68:	mov	r7, r0
   19f6c:	b	19f94 <__assert_fail@plt+0x8704>
   19f70:	mov	r6, #0
   19f74:	b	1a068 <__assert_fail@plt+0x87d8>
   19f78:	mov	r0, sp
   19f7c:	movw	r1, #47245	; 0xb88d
   19f80:	movt	r1, #1
   19f84:	bl	1a130 <__assert_fail@plt+0x88a0>
   19f88:	cmp	r0, #0
   19f8c:	bne	1a048 <__assert_fail@plt+0x87b8>
   19f90:	add	r7, r5, r4
   19f94:	ldrb	r0, [r7]
   19f98:	cmp	r0, #47	; 0x2f
   19f9c:	beq	1a0e4 <__assert_fail@plt+0x8854>
   19fa0:	add	r4, r5, r6
   19fa4:	cmp	r7, r4
   19fa8:	bhi	1a104 <__assert_fail@plt+0x8874>
   19fac:	sub	r0, r4, r7
   19fb0:	cmp	r0, #4096	; 0x1000
   19fb4:	blt	1a01c <__assert_fail@plt+0x878c>
   19fb8:	mov	r9, #47	; 0x2f
   19fbc:	mov	sl, #0
   19fc0:	mov	r5, sp
   19fc4:	mov	r0, r7
   19fc8:	mov	r1, #47	; 0x2f
   19fcc:	mov	r2, #4096	; 0x1000
   19fd0:	bl	11704 <memrchr@plt>
   19fd4:	cmp	r0, #0
   19fd8:	beq	1a05c <__assert_fail@plt+0x87cc>
   19fdc:	mov	r6, r0
   19fe0:	strb	sl, [r0], -r7
   19fe4:	cmp	r0, #4096	; 0x1000
   19fe8:	bge	1a084 <__assert_fail@plt+0x87f4>
   19fec:	mov	r0, r5
   19ff0:	mov	r1, r7
   19ff4:	bl	1a130 <__assert_fail@plt+0x88a0>
   19ff8:	strb	r9, [r6]
   19ffc:	cmp	r0, #0
   1a000:	bne	1a048 <__assert_fail@plt+0x87b8>
   1a004:	add	r0, r6, #1
   1a008:	bl	1a170 <__assert_fail@plt+0x88e0>
   1a00c:	mov	r7, r0
   1a010:	sub	r0, r4, r0
   1a014:	cmp	r0, #4096	; 0x1000
   1a018:	bge	19fc4 <__assert_fail@plt+0x8734>
   1a01c:	cmp	r7, r4
   1a020:	bcs	1a038 <__assert_fail@plt+0x87a8>
   1a024:	mov	r0, sp
   1a028:	mov	r1, r7
   1a02c:	bl	1a130 <__assert_fail@plt+0x88a0>
   1a030:	cmp	r0, #0
   1a034:	bne	1a048 <__assert_fail@plt+0x87b8>
   1a038:	mov	r0, sp
   1a03c:	bl	1a190 <__assert_fail@plt+0x8900>
   1a040:	cmp	r0, #0
   1a044:	beq	1a074 <__assert_fail@plt+0x87e4>
   1a048:	ldr	r4, [r8]
   1a04c:	mov	r0, sp
   1a050:	bl	1a198 <__assert_fail@plt+0x8908>
   1a054:	str	r4, [r8]
   1a058:	b	1a064 <__assert_fail@plt+0x87d4>
   1a05c:	mov	r0, #36	; 0x24
   1a060:	str	r0, [r8]
   1a064:	mvn	r6, #0
   1a068:	mov	r0, r6
   1a06c:	sub	sp, fp, #28
   1a070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a074:	mov	r0, sp
   1a078:	bl	1a198 <__assert_fail@plt+0x8908>
   1a07c:	mov	r6, #0
   1a080:	b	1a068 <__assert_fail@plt+0x87d8>
   1a084:	movw	r0, #47538	; 0xb9b2
   1a088:	movt	r0, #1
   1a08c:	movw	r1, #47459	; 0xb963
   1a090:	movt	r1, #1
   1a094:	movw	r3, #47476	; 0xb974
   1a098:	movt	r3, #1
   1a09c:	mov	r2, #179	; 0xb3
   1a0a0:	bl	11890 <__assert_fail@plt>
   1a0a4:	movw	r0, #47451	; 0xb95b
   1a0a8:	movt	r0, #1
   1a0ac:	movw	r1, #47459	; 0xb963
   1a0b0:	movt	r1, #1
   1a0b4:	movw	r3, #47476	; 0xb974
   1a0b8:	movt	r3, #1
   1a0bc:	mov	r2, #126	; 0x7e
   1a0c0:	bl	11890 <__assert_fail@plt>
   1a0c4:	movw	r0, #47499	; 0xb98b
   1a0c8:	movt	r0, #1
   1a0cc:	movw	r1, #47459	; 0xb963
   1a0d0:	movt	r1, #1
   1a0d4:	movw	r3, #47476	; 0xb974
   1a0d8:	movt	r3, #1
   1a0dc:	mov	r2, #127	; 0x7f
   1a0e0:	bl	11890 <__assert_fail@plt>
   1a0e4:	movw	r0, #47511	; 0xb997
   1a0e8:	movt	r0, #1
   1a0ec:	movw	r1, #47459	; 0xb963
   1a0f0:	movt	r1, #1
   1a0f4:	movw	r3, #47476	; 0xb974
   1a0f8:	movt	r3, #1
   1a0fc:	mov	r2, #162	; 0xa2
   1a100:	bl	11890 <__assert_fail@plt>
   1a104:	movw	r0, #47523	; 0xb9a3
   1a108:	movt	r0, #1
   1a10c:	movw	r1, #47459	; 0xb963
   1a110:	movt	r1, #1
   1a114:	movw	r3, #47476	; 0xb974
   1a118:	movt	r3, #1
   1a11c:	mov	r2, #163	; 0xa3
   1a120:	bl	11890 <__assert_fail@plt>
   1a124:	mvn	r1, #99	; 0x63
   1a128:	str	r1, [r0]
   1a12c:	bx	lr
   1a130:	push	{r4, r5, fp, lr}
   1a134:	add	fp, sp, #8
   1a138:	mov	r4, r0
   1a13c:	ldr	r0, [r0]
   1a140:	mov	r2, #18688	; 0x4900
   1a144:	bl	116f8 <openat64@plt>
   1a148:	cmp	r0, #0
   1a14c:	bmi	1a168 <__assert_fail@plt+0x88d8>
   1a150:	mov	r5, r0
   1a154:	mov	r0, r4
   1a158:	bl	1a198 <__assert_fail@plt+0x8908>
   1a15c:	str	r5, [r4]
   1a160:	mov	r0, #0
   1a164:	pop	{r4, r5, fp, pc}
   1a168:	mvn	r0, #0
   1a16c:	pop	{r4, r5, fp, pc}
   1a170:	push	{r4, sl, fp, lr}
   1a174:	add	fp, sp, #8
   1a178:	mov	r4, r0
   1a17c:	movw	r1, #47245	; 0xb88d
   1a180:	movt	r1, #1
   1a184:	bl	11884 <strspn@plt>
   1a188:	add	r0, r4, r0
   1a18c:	pop	{r4, sl, fp, pc}
   1a190:	ldr	r0, [r0]
   1a194:	b	117f4 <fchdir@plt>
   1a198:	push	{fp, lr}
   1a19c:	mov	fp, sp
   1a1a0:	ldr	r0, [r0]
   1a1a4:	cmp	r0, #0
   1a1a8:	popmi	{fp, pc}
   1a1ac:	bl	11860 <close@plt>
   1a1b0:	cmp	r0, #0
   1a1b4:	bne	1a1bc <__assert_fail@plt+0x892c>
   1a1b8:	pop	{fp, pc}
   1a1bc:	movw	r0, #47557	; 0xb9c5
   1a1c0:	movt	r0, #1
   1a1c4:	movw	r1, #47459	; 0xb963
   1a1c8:	movt	r1, #1
   1a1cc:	movw	r3, #47570	; 0xb9d2
   1a1d0:	movt	r3, #1
   1a1d4:	mov	r2, #64	; 0x40
   1a1d8:	bl	11890 <__assert_fail@plt>
   1a1dc:	push	{r4, sl, fp, lr}
   1a1e0:	add	fp, sp, #8
   1a1e4:	sub	sp, sp, #264	; 0x108
   1a1e8:	add	r1, sp, #7
   1a1ec:	movw	r2, #257	; 0x101
   1a1f0:	bl	1a248 <__assert_fail@plt+0x89b8>
   1a1f4:	mov	r4, #0
   1a1f8:	cmp	r0, #0
   1a1fc:	bne	1a23c <__assert_fail@plt+0x89ac>
   1a200:	add	r0, sp, #7
   1a204:	movw	r1, #47607	; 0xb9f7
   1a208:	movt	r1, #1
   1a20c:	mov	r2, #2
   1a210:	bl	116e0 <bcmp@plt>
   1a214:	cmp	r0, #0
   1a218:	beq	1a23c <__assert_fail@plt+0x89ac>
   1a21c:	add	r0, sp, #7
   1a220:	movw	r1, #47609	; 0xb9f9
   1a224:	movt	r1, #1
   1a228:	mov	r2, #6
   1a22c:	bl	116e0 <bcmp@plt>
   1a230:	mov	r4, r0
   1a234:	cmp	r0, #0
   1a238:	movwne	r4, #1
   1a23c:	mov	r0, r4
   1a240:	sub	sp, fp, #8
   1a244:	pop	{r4, sl, fp, pc}
   1a248:	b	1a24c <__assert_fail@plt+0x89bc>
   1a24c:	push	{r4, r5, r6, r7, fp, lr}
   1a250:	add	fp, sp, #16
   1a254:	mov	r6, r2
   1a258:	mov	r4, r1
   1a25c:	bl	1a2e4 <__assert_fail@plt+0x8a54>
   1a260:	cmp	r0, #0
   1a264:	beq	1a294 <__assert_fail@plt+0x8a04>
   1a268:	mov	r7, r0
   1a26c:	bl	116ec <strlen@plt>
   1a270:	cmp	r0, r6
   1a274:	bcs	1a2b0 <__assert_fail@plt+0x8a20>
   1a278:	add	r2, r0, #1
   1a27c:	mov	r0, r4
   1a280:	mov	r1, r7
   1a284:	bl	1153c <memcpy@plt>
   1a288:	mov	r5, #0
   1a28c:	mov	r0, r5
   1a290:	pop	{r4, r5, r6, r7, fp, pc}
   1a294:	mov	r5, #22
   1a298:	cmp	r6, #0
   1a29c:	beq	1a2d8 <__assert_fail@plt+0x8a48>
   1a2a0:	mov	r0, #0
   1a2a4:	strb	r0, [r4]
   1a2a8:	mov	r0, r5
   1a2ac:	pop	{r4, r5, r6, r7, fp, pc}
   1a2b0:	mov	r5, #34	; 0x22
   1a2b4:	cmp	r6, #0
   1a2b8:	beq	1a2d8 <__assert_fail@plt+0x8a48>
   1a2bc:	sub	r6, r6, #1
   1a2c0:	mov	r0, r4
   1a2c4:	mov	r1, r7
   1a2c8:	mov	r2, r6
   1a2cc:	bl	1153c <memcpy@plt>
   1a2d0:	mov	r0, #0
   1a2d4:	strb	r0, [r4, r6]
   1a2d8:	mov	r0, r5
   1a2dc:	pop	{r4, r5, r6, r7, fp, pc}
   1a2e0:	b	1a2e4 <__assert_fail@plt+0x8a54>
   1a2e4:	mov	r1, #0
   1a2e8:	b	117ac <setlocale@plt>
   1a2ec:	cmp	r3, #0
   1a2f0:	cmpeq	r2, #0
   1a2f4:	bne	1a30c <__assert_fail@plt+0x8a7c>
   1a2f8:	cmp	r1, #0
   1a2fc:	cmpeq	r0, #0
   1a300:	mvnne	r1, #0
   1a304:	mvnne	r0, #0
   1a308:	b	1a328 <__assert_fail@plt+0x8a98>
   1a30c:	sub	sp, sp, #8
   1a310:	push	{sp, lr}
   1a314:	bl	1a338 <__assert_fail@plt+0x8aa8>
   1a318:	ldr	lr, [sp, #4]
   1a31c:	add	sp, sp, #8
   1a320:	pop	{r2, r3}
   1a324:	bx	lr
   1a328:	push	{r1, lr}
   1a32c:	mov	r0, #8
   1a330:	bl	114dc <raise@plt>
   1a334:	pop	{r1, pc}
   1a338:	cmp	r1, r3
   1a33c:	cmpeq	r0, r2
   1a340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a344:	mov	r4, r0
   1a348:	movcc	r0, #0
   1a34c:	mov	r5, r1
   1a350:	ldr	lr, [sp, #36]	; 0x24
   1a354:	movcc	r1, r0
   1a358:	bcc	1a454 <__assert_fail@plt+0x8bc4>
   1a35c:	cmp	r3, #0
   1a360:	clzeq	ip, r2
   1a364:	clzne	ip, r3
   1a368:	addeq	ip, ip, #32
   1a36c:	cmp	r5, #0
   1a370:	clzeq	r1, r4
   1a374:	addeq	r1, r1, #32
   1a378:	clzne	r1, r5
   1a37c:	sub	ip, ip, r1
   1a380:	sub	sl, ip, #32
   1a384:	lsl	r9, r3, ip
   1a388:	rsb	fp, ip, #32
   1a38c:	orr	r9, r9, r2, lsl sl
   1a390:	orr	r9, r9, r2, lsr fp
   1a394:	lsl	r8, r2, ip
   1a398:	cmp	r5, r9
   1a39c:	cmpeq	r4, r8
   1a3a0:	movcc	r0, #0
   1a3a4:	movcc	r1, r0
   1a3a8:	bcc	1a3c4 <__assert_fail@plt+0x8b34>
   1a3ac:	mov	r0, #1
   1a3b0:	subs	r4, r4, r8
   1a3b4:	lsl	r1, r0, sl
   1a3b8:	orr	r1, r1, r0, lsr fp
   1a3bc:	lsl	r0, r0, ip
   1a3c0:	sbc	r5, r5, r9
   1a3c4:	cmp	ip, #0
   1a3c8:	beq	1a454 <__assert_fail@plt+0x8bc4>
   1a3cc:	lsr	r6, r8, #1
   1a3d0:	orr	r6, r6, r9, lsl #31
   1a3d4:	lsr	r7, r9, #1
   1a3d8:	mov	r2, ip
   1a3dc:	b	1a400 <__assert_fail@plt+0x8b70>
   1a3e0:	subs	r3, r4, r6
   1a3e4:	sbc	r8, r5, r7
   1a3e8:	adds	r3, r3, r3
   1a3ec:	adc	r8, r8, r8
   1a3f0:	adds	r4, r3, #1
   1a3f4:	adc	r5, r8, #0
   1a3f8:	subs	r2, r2, #1
   1a3fc:	beq	1a41c <__assert_fail@plt+0x8b8c>
   1a400:	cmp	r5, r7
   1a404:	cmpeq	r4, r6
   1a408:	bcs	1a3e0 <__assert_fail@plt+0x8b50>
   1a40c:	adds	r4, r4, r4
   1a410:	adc	r5, r5, r5
   1a414:	subs	r2, r2, #1
   1a418:	bne	1a400 <__assert_fail@plt+0x8b70>
   1a41c:	lsr	r3, r4, ip
   1a420:	orr	r3, r3, r5, lsl fp
   1a424:	lsr	r2, r5, ip
   1a428:	orr	r3, r3, r5, lsr sl
   1a42c:	adds	r0, r0, r4
   1a430:	mov	r4, r3
   1a434:	lsl	r3, r2, ip
   1a438:	orr	r3, r3, r4, lsl sl
   1a43c:	lsl	ip, r4, ip
   1a440:	orr	r3, r3, r4, lsr fp
   1a444:	adc	r1, r1, r5
   1a448:	subs	r0, r0, ip
   1a44c:	mov	r5, r2
   1a450:	sbc	r1, r1, r3
   1a454:	cmp	lr, #0
   1a458:	strdne	r4, [lr]
   1a45c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a460:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a464:	mov	r7, r0
   1a468:	ldr	r6, [pc, #72]	; 1a4b8 <__assert_fail@plt+0x8c28>
   1a46c:	ldr	r5, [pc, #72]	; 1a4bc <__assert_fail@plt+0x8c2c>
   1a470:	add	r6, pc, r6
   1a474:	add	r5, pc, r5
   1a478:	sub	r6, r6, r5
   1a47c:	mov	r8, r1
   1a480:	mov	r9, r2
   1a484:	bl	11498 <fstatfs64@plt-0x20>
   1a488:	asrs	r6, r6, #2
   1a48c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a490:	mov	r4, #0
   1a494:	add	r4, r4, #1
   1a498:	ldr	r3, [r5], #4
   1a49c:	mov	r2, r9
   1a4a0:	mov	r1, r8
   1a4a4:	mov	r0, r7
   1a4a8:	blx	r3
   1a4ac:	cmp	r6, r4
   1a4b0:	bne	1a494 <__assert_fail@plt+0x8c04>
   1a4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4b8:	andeq	r1, r1, ip, lsl #21
   1a4bc:	andeq	r1, r1, r4, lsl #21
   1a4c0:	bx	lr
   1a4c4:	ldr	r3, [pc, #12]	; 1a4d8 <__assert_fail@plt+0x8c48>
   1a4c8:	mov	r1, #0
   1a4cc:	add	r3, pc, r3
   1a4d0:	ldr	r2, [r3]
   1a4d4:	b	11728 <__cxa_atexit@plt>
   1a4d8:	muleq	r1, r0, ip
   1a4dc:	mov	r2, r1
   1a4e0:	mov	r1, r0
   1a4e4:	mov	r0, #3
   1a4e8:	b	1183c <__xstat64@plt>
   1a4ec:	mov	r2, r1
   1a4f0:	mov	r1, r0
   1a4f4:	mov	r0, #3
   1a4f8:	b	115cc <__fxstat64@plt>
   1a4fc:	mov	r2, r1
   1a500:	mov	r1, r0
   1a504:	mov	r0, #3
   1a508:	b	1186c <__lxstat64@plt>
   1a50c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a510:	sub	sp, sp, #12
   1a514:	str	r3, [sp]
   1a518:	mov	r3, r2
   1a51c:	mov	r2, r1
   1a520:	mov	r1, r0
   1a524:	mov	r0, #3
   1a528:	bl	115b4 <__fxstatat64@plt>
   1a52c:	add	sp, sp, #12
   1a530:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001a534 <.fini>:
   1a534:	push	{r3, lr}
   1a538:	pop	{r3, pc}
