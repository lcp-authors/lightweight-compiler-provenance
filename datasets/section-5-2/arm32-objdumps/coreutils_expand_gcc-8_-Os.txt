
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c58 <.init>:
   10c58:	push	{r3, lr}
   10c5c:	bl	11248 <__assert_fail@plt+0x378>
   10c60:	pop	{r3, pc}

Disassembly of section .plt:

00010c64 <calloc@plt-0x14>:
   10c64:	push	{lr}		; (str lr, [sp, #-4]!)
   10c68:	ldr	lr, [pc, #4]	; 10c74 <calloc@plt-0x4>
   10c6c:	add	lr, pc, lr
   10c70:	ldr	pc, [lr, #8]!
   10c74:	andeq	r5, r1, ip, lsl #7

00010c78 <calloc@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #86016	; 0x15000
   10c80:	ldr	pc, [ip, #908]!	; 0x38c

00010c84 <fputs_unlocked@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #86016	; 0x15000
   10c8c:	ldr	pc, [ip, #900]!	; 0x384

00010c90 <raise@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #86016	; 0x15000
   10c98:	ldr	pc, [ip, #892]!	; 0x37c

00010c9c <strcmp@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #86016	; 0x15000
   10ca4:	ldr	pc, [ip, #884]!	; 0x374

00010ca8 <posix_fadvise64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #876]!	; 0x36c

00010cb4 <fflush@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #868]!	; 0x364

00010cc0 <free@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #860]!	; 0x35c

00010ccc <_exit@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #852]!	; 0x354

00010cd8 <memcpy@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #844]!	; 0x34c

00010ce4 <mbsinit@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #836]!	; 0x344

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #828]!	; 0x33c

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #820]!	; 0x334

00010d08 <getc_unlocked@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #812]!	; 0x32c

00010d14 <dcgettext@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #804]!	; 0x324

00010d20 <realloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #796]!	; 0x31c

00010d2c <textdomain@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #788]!	; 0x314

00010d38 <iswprint@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #780]!	; 0x30c

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #772]!	; 0x304

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #764]!	; 0x2fc

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #756]!	; 0x2f4

00010d68 <ferror_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #748]!	; 0x2ec

00010d74 <mbrtowc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d80 <error@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #732]!	; 0x2dc

00010d8c <malloc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #724]!	; 0x2d4

00010d98 <__libc_start_main@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #716]!	; 0x2cc

00010da4 <__freading@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #708]!	; 0x2c4

00010db0 <__gmon_start__@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #700]!	; 0x2bc

00010dbc <getopt_long@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc8 <__ctype_b_loc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #684]!	; 0x2ac

00010dd4 <exit@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #676]!	; 0x2a4

00010de0 <strlen@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #668]!	; 0x29c

00010dec <__errno_location@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #660]!	; 0x294

00010df8 <__cxa_atexit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #652]!	; 0x28c

00010e04 <memset@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #644]!	; 0x284

00010e10 <__printf_chk@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #636]!	; 0x27c

00010e1c <fileno@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #628]!	; 0x274

00010e28 <__fprintf_chk@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #620]!	; 0x26c

00010e34 <fclose@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #612]!	; 0x264

00010e40 <fseeko64@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #604]!	; 0x25c

00010e4c <setlocale@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #596]!	; 0x254

00010e58 <strrchr@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #588]!	; 0x24c

00010e64 <nl_langinfo@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #580]!	; 0x244

00010e70 <clearerr_unlocked@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #572]!	; 0x23c

00010e7c <fopen64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #564]!	; 0x234

00010e88 <bindtextdomain@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #556]!	; 0x22c

00010e94 <fputs@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #548]!	; 0x224

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #540]!	; 0x21c

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #532]!	; 0x214

00010eb8 <putchar_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #524]!	; 0x20c

00010ec4 <strspn@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #516]!	; 0x204

00010ed0 <__assert_fail@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #508]!	; 0x1fc

Disassembly of section .text:

00010ee0 <.text>:
   10ee0:	push	{r4, lr}
   10ee4:	bl	10dec <__errno_location@plt>
   10ee8:	mov	r3, #12
   10eec:	str	r3, [r0]
   10ef0:	mov	r0, #0
   10ef4:	pop	{r4, pc}
   10ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10efc:	mov	r6, r0
   10f00:	sub	sp, sp, #20
   10f04:	mov	r4, r1
   10f08:	mov	r5, #0
   10f0c:	ldr	r0, [r1]
   10f10:	bl	12148 <__assert_fail@plt+0x1278>
   10f14:	ldr	r1, [pc, #684]	; 111c8 <__assert_fail@plt+0x2f8>
   10f18:	mov	r0, #6
   10f1c:	bl	10e4c <setlocale@plt>
   10f20:	ldr	r7, [pc, #676]	; 111cc <__assert_fail@plt+0x2fc>
   10f24:	ldr	r1, [pc, #676]	; 111d0 <__assert_fail@plt+0x300>
   10f28:	ldr	r0, [pc, #676]	; 111d4 <__assert_fail@plt+0x304>
   10f2c:	bl	10e88 <bindtextdomain@plt>
   10f30:	ldr	r9, [pc, #672]	; 111d8 <__assert_fail@plt+0x308>
   10f34:	ldr	r8, [pc, #672]	; 111dc <__assert_fail@plt+0x30c>
   10f38:	ldr	r0, [pc, #660]	; 111d4 <__assert_fail@plt+0x304>
   10f3c:	bl	10d2c <textdomain@plt>
   10f40:	ldr	r0, [pc, #664]	; 111e0 <__assert_fail@plt+0x310>
   10f44:	bl	14418 <__assert_fail@plt+0x3548>
   10f48:	mov	r3, #1
   10f4c:	strb	r3, [r7]
   10f50:	mov	r3, r9
   10f54:	ldr	r2, [pc, #648]	; 111e4 <__assert_fail@plt+0x314>
   10f58:	mov	r1, r4
   10f5c:	mov	r0, r6
   10f60:	str	r5, [sp]
   10f64:	bl	10dbc <getopt_long@plt>
   10f68:	cmn	r0, #1
   10f6c:	bne	10fec <__assert_fail@plt+0x11c>
   10f70:	bl	119f4 <__assert_fail@plt+0xb24>
   10f74:	ldr	r3, [pc, #620]	; 111e8 <__assert_fail@plt+0x318>
   10f78:	ldr	r0, [r3]
   10f7c:	cmp	r0, r6
   10f80:	addlt	r0, r4, r0, lsl #2
   10f84:	movge	r0, #0
   10f88:	bl	11c0c <__assert_fail@plt+0xd3c>
   10f8c:	mov	r0, #0
   10f90:	bl	11c34 <__assert_fail@plt+0xd64>
   10f94:	subs	r8, r0, #0
   10f98:	beq	10fd8 <__assert_fail@plt+0x108>
   10f9c:	mov	r9, #0
   10fa0:	mov	r4, #0
   10fa4:	mov	r5, #0
   10fa8:	str	r9, [sp, #12]
   10fac:	mov	r6, #1
   10fb0:	mov	r0, r8
   10fb4:	bl	10d08 <getc_unlocked@plt>
   10fb8:	subs	sl, r0, #0
   10fbc:	bge	1115c <__assert_fail@plt+0x28c>
   10fc0:	mov	r0, r8
   10fc4:	bl	11c34 <__assert_fail@plt+0xd64>
   10fc8:	subs	r8, r0, #0
   10fcc:	bne	10fb0 <__assert_fail@plt+0xe0>
   10fd0:	cmp	r6, #0
   10fd4:	bne	11148 <__assert_fail@plt+0x278>
   10fd8:	bl	11db0 <__assert_fail@plt+0xee0>
   10fdc:	ldr	r3, [pc, #520]	; 111ec <__assert_fail@plt+0x31c>
   10fe0:	ldr	r0, [r3]
   10fe4:	add	sp, sp, #20
   10fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fec:	cmp	r0, #57	; 0x39
   10ff0:	bgt	11018 <__assert_fail@plt+0x148>
   10ff4:	cmp	r0, #48	; 0x30
   10ff8:	bge	1103c <__assert_fail@plt+0x16c>
   10ffc:	cmn	r0, #3
   11000:	beq	11058 <__assert_fail@plt+0x188>
   11004:	cmn	r0, #2
   11008:	moveq	r0, #0
   1100c:	beq	11014 <__assert_fail@plt+0x144>
   11010:	mov	r0, #1
   11014:	bl	112fc <__assert_fail@plt+0x42c>
   11018:	cmp	r0, #105	; 0x69
   1101c:	beq	11034 <__assert_fail@plt+0x164>
   11020:	cmp	r0, #116	; 0x74
   11024:	bne	11010 <__assert_fail@plt+0x140>
   11028:	ldr	r0, [r8]
   1102c:	bl	11708 <__assert_fail@plt+0x838>
   11030:	b	10f50 <__assert_fail@plt+0x80>
   11034:	strb	r5, [r7]
   11038:	b	10f50 <__assert_fail@plt+0x80>
   1103c:	ldr	r3, [r8]
   11040:	cmp	r3, #0
   11044:	subne	r0, r3, #1
   11048:	strbeq	r0, [sp, #12]
   1104c:	addeq	r0, sp, #12
   11050:	strbeq	r3, [sp, #13]
   11054:	b	1102c <__assert_fail@plt+0x15c>
   11058:	ldr	r3, [pc, #400]	; 111f0 <__assert_fail@plt+0x320>
   1105c:	ldr	r0, [pc, #400]	; 111f4 <__assert_fail@plt+0x324>
   11060:	ldr	r2, [pc, #400]	; 111f8 <__assert_fail@plt+0x328>
   11064:	stm	sp, {r3, r5}
   11068:	ldr	r3, [pc, #396]	; 111fc <__assert_fail@plt+0x32c>
   1106c:	ldr	r1, [pc, #396]	; 11200 <__assert_fail@plt+0x330>
   11070:	ldr	r0, [r0]
   11074:	ldr	r3, [r3]
   11078:	bl	13b94 <__assert_fail@plt+0x2cc4>
   1107c:	mov	r0, #0
   11080:	bl	10dd4 <exit@plt>
   11084:	mov	r0, #32
   11088:	bl	10eb8 <putchar_unlocked@plt>
   1108c:	cmp	r0, #0
   11090:	bge	110b8 <__assert_fail@plt+0x1e8>
   11094:	bl	10dec <__errno_location@plt>
   11098:	ldr	r4, [r0]
   1109c:	mov	r2, #5
   110a0:	mov	r0, #0
   110a4:	ldr	r1, [pc, #344]	; 11204 <__assert_fail@plt+0x334>
   110a8:	bl	10d14 <dcgettext@plt>
   110ac:	mov	r2, r0
   110b0:	mov	r1, r4
   110b4:	b	111c0 <__assert_fail@plt+0x2f0>
   110b8:	adds	r4, r4, #1
   110bc:	adc	r5, r5, #0
   110c0:	cmp	fp, r5
   110c4:	cmpeq	sl, r4
   110c8:	bhi	11084 <__assert_fail@plt+0x1b4>
   110cc:	mov	sl, #32
   110d0:	ldrb	r3, [r7]
   110d4:	cmp	r3, #0
   110d8:	movne	r6, #1
   110dc:	bne	110f4 <__assert_fail@plt+0x224>
   110e0:	bl	10dc8 <__ctype_b_loc@plt>
   110e4:	ldr	r2, [r0]
   110e8:	lsl	r3, sl, #1
   110ec:	ldrh	r6, [r2, r3]
   110f0:	and	r6, r6, #1
   110f4:	cmp	sl, #0
   110f8:	blt	10fd8 <__assert_fail@plt+0x108>
   110fc:	mov	r0, sl
   11100:	bl	10eb8 <putchar_unlocked@plt>
   11104:	cmp	r0, #0
   11108:	blt	11094 <__assert_fail@plt+0x1c4>
   1110c:	cmp	sl, #10
   11110:	bne	10fb0 <__assert_fail@plt+0xe0>
   11114:	b	10fa0 <__assert_fail@plt+0xd0>
   11118:	cmp	sl, #8
   1111c:	bne	11148 <__assert_fail@plt+0x278>
   11120:	orrs	r3, r4, r5
   11124:	movne	r3, #1
   11128:	moveq	r3, #0
   1112c:	subs	r4, r4, r3
   11130:	ldr	r3, [sp, #12]
   11134:	sbc	r5, r5, r9
   11138:	cmp	r3, #0
   1113c:	subne	r3, r3, #1
   11140:	str	r3, [sp, #12]
   11144:	b	110d0 <__assert_fail@plt+0x200>
   11148:	adds	r4, r4, #1
   1114c:	adc	r5, r5, #0
   11150:	orrs	r3, r4, r5
   11154:	bne	110d0 <__assert_fail@plt+0x200>
   11158:	b	111a8 <__assert_fail@plt+0x2d8>
   1115c:	cmp	r6, #0
   11160:	beq	110fc <__assert_fail@plt+0x22c>
   11164:	cmp	sl, #9
   11168:	bne	11118 <__assert_fail@plt+0x248>
   1116c:	add	r3, sp, #11
   11170:	add	r2, sp, #12
   11174:	mov	r0, r4
   11178:	mov	r1, r5
   1117c:	bl	11b08 <__assert_fail@plt+0xc38>
   11180:	ldrb	r3, [sp, #11]
   11184:	mov	sl, r0
   11188:	mov	fp, r1
   1118c:	cmp	r3, #0
   11190:	beq	1119c <__assert_fail@plt+0x2cc>
   11194:	adds	sl, r4, #1
   11198:	adc	fp, r5, #0
   1119c:	cmp	r5, fp
   111a0:	cmpeq	r4, sl
   111a4:	bls	110b8 <__assert_fail@plt+0x1e8>
   111a8:	mov	r2, #5
   111ac:	ldr	r1, [pc, #84]	; 11208 <__assert_fail@plt+0x338>
   111b0:	mov	r0, #0
   111b4:	bl	10d14 <dcgettext@plt>
   111b8:	mov	r2, r0
   111bc:	mov	r1, #0
   111c0:	mov	r0, #1
   111c4:	bl	10d80 <error@plt>
   111c8:			; <UNDEFINED> instruction: 0x000147b2
   111cc:	muleq	r2, r8, r1
   111d0:			; <UNDEFINED> instruction: 0x000147b3
   111d4:	andeq	r4, r1, r0, lsl r7
   111d8:	andeq	r4, r1, r4, ror r4
   111dc:	andeq	r6, r2, r8, asr r1
   111e0:	andeq	r1, r1, r0, ror #28
   111e4:	andeq	r4, r1, r4, asr #9
   111e8:	andeq	r6, r2, r0, asr #2
   111ec:	muleq	r2, r4, r1
   111f0:	andeq	r4, r1, fp, asr #15
   111f4:	andeq	r6, r2, r4, asr r1
   111f8:	andeq	r4, r1, ip, lsl #14
   111fc:	andeq	r6, r2, ip, ror #1
   11200:	andeq	r4, r1, r6, ror #9
   11204:	strdeq	r4, [r1], -r2
   11208:	ldrdeq	r4, [r1], -fp
   1120c:	mov	fp, #0
   11210:	mov	lr, #0
   11214:	pop	{r1}		; (ldr r1, [sp], #4)
   11218:	mov	r2, sp
   1121c:	push	{r2}		; (str r2, [sp, #-4]!)
   11220:	push	{r0}		; (str r0, [sp, #-4]!)
   11224:	ldr	ip, [pc, #16]	; 1123c <__assert_fail@plt+0x36c>
   11228:	push	{ip}		; (str ip, [sp, #-4]!)
   1122c:	ldr	r0, [pc, #12]	; 11240 <__assert_fail@plt+0x370>
   11230:	ldr	r3, [pc, #12]	; 11244 <__assert_fail@plt+0x374>
   11234:	bl	10d98 <__libc_start_main@plt>
   11238:	bl	10eac <abort@plt>
   1123c:	andeq	r4, r1, r4, lsl r4
   11240:	strdeq	r0, [r1], -r8
   11244:			; <UNDEFINED> instruction: 0x000143b4
   11248:	ldr	r3, [pc, #20]	; 11264 <__assert_fail@plt+0x394>
   1124c:	ldr	r2, [pc, #20]	; 11268 <__assert_fail@plt+0x398>
   11250:	add	r3, pc, r3
   11254:	ldr	r2, [r3, r2]
   11258:	cmp	r2, #0
   1125c:	bxeq	lr
   11260:	b	10db0 <__gmon_start__@plt>
   11264:	andeq	r4, r1, r8, lsr #27
   11268:	ldrdeq	r0, [r0], -r8
   1126c:	ldr	r0, [pc, #24]	; 1128c <__assert_fail@plt+0x3bc>
   11270:	ldr	r3, [pc, #24]	; 11290 <__assert_fail@plt+0x3c0>
   11274:	cmp	r3, r0
   11278:	bxeq	lr
   1127c:	ldr	r3, [pc, #16]	; 11294 <__assert_fail@plt+0x3c4>
   11280:	cmp	r3, #0
   11284:	bxeq	lr
   11288:	bx	r3
   1128c:	andeq	r6, r2, r4, lsr r1
   11290:	andeq	r6, r2, r4, lsr r1
   11294:	andeq	r0, r0, r0
   11298:	ldr	r0, [pc, #36]	; 112c4 <__assert_fail@plt+0x3f4>
   1129c:	ldr	r1, [pc, #36]	; 112c8 <__assert_fail@plt+0x3f8>
   112a0:	sub	r1, r1, r0
   112a4:	asr	r1, r1, #2
   112a8:	add	r1, r1, r1, lsr #31
   112ac:	asrs	r1, r1, #1
   112b0:	bxeq	lr
   112b4:	ldr	r3, [pc, #16]	; 112cc <__assert_fail@plt+0x3fc>
   112b8:	cmp	r3, #0
   112bc:	bxeq	lr
   112c0:	bx	r3
   112c4:	andeq	r6, r2, r4, lsr r1
   112c8:	andeq	r6, r2, r4, lsr r1
   112cc:	andeq	r0, r0, r0
   112d0:	push	{r4, lr}
   112d4:	ldr	r4, [pc, #24]	; 112f4 <__assert_fail@plt+0x424>
   112d8:	ldrb	r3, [r4]
   112dc:	cmp	r3, #0
   112e0:	popne	{r4, pc}
   112e4:	bl	1126c <__assert_fail@plt+0x39c>
   112e8:	mov	r3, #1
   112ec:	strb	r3, [r4]
   112f0:	pop	{r4, pc}
   112f4:	andeq	r6, r2, ip, asr r1
   112f8:	b	11298 <__assert_fail@plt+0x3c8>
   112fc:	subs	r5, r0, #0
   11300:	push	{r7, lr}
   11304:	sub	sp, sp, #56	; 0x38
   11308:	ldr	r4, [pc, #524]	; 1151c <__assert_fail@plt+0x64c>
   1130c:	beq	11344 <__assert_fail@plt+0x474>
   11310:	mov	r2, #5
   11314:	mov	r0, #0
   11318:	ldr	r3, [pc, #512]	; 11520 <__assert_fail@plt+0x650>
   1131c:	ldr	r1, [pc, #512]	; 11524 <__assert_fail@plt+0x654>
   11320:	ldr	r6, [r3]
   11324:	bl	10d14 <dcgettext@plt>
   11328:	mov	r2, r0
   1132c:	mov	r1, #1
   11330:	ldr	r3, [r4]
   11334:	mov	r0, r6
   11338:	bl	10e28 <__fprintf_chk@plt>
   1133c:	mov	r0, r5
   11340:	bl	10dd4 <exit@plt>
   11344:	mov	r2, #5
   11348:	ldr	r1, [pc, #472]	; 11528 <__assert_fail@plt+0x658>
   1134c:	mov	r6, sp
   11350:	bl	10d14 <dcgettext@plt>
   11354:	ldr	r2, [r4]
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	bl	10e10 <__printf_chk@plt>
   11364:	ldr	r4, [pc, #448]	; 1152c <__assert_fail@plt+0x65c>
   11368:	mov	r2, #5
   1136c:	mov	r0, r5
   11370:	ldr	r1, [pc, #440]	; 11530 <__assert_fail@plt+0x660>
   11374:	bl	10d14 <dcgettext@plt>
   11378:	ldr	r7, [pc, #436]	; 11534 <__assert_fail@plt+0x664>
   1137c:	ldr	r1, [r4]
   11380:	bl	10c84 <fputs_unlocked@plt>
   11384:	mov	r2, #5
   11388:	ldr	r1, [pc, #424]	; 11538 <__assert_fail@plt+0x668>
   1138c:	mov	r0, r5
   11390:	bl	10d14 <dcgettext@plt>
   11394:	ldr	r1, [r4]
   11398:	bl	10c84 <fputs_unlocked@plt>
   1139c:	mov	r2, #5
   113a0:	ldr	r1, [pc, #404]	; 1153c <__assert_fail@plt+0x66c>
   113a4:	mov	r0, r5
   113a8:	bl	10d14 <dcgettext@plt>
   113ac:	ldr	r1, [r4]
   113b0:	bl	10c84 <fputs_unlocked@plt>
   113b4:	mov	r2, #5
   113b8:	ldr	r1, [pc, #384]	; 11540 <__assert_fail@plt+0x670>
   113bc:	mov	r0, r5
   113c0:	bl	10d14 <dcgettext@plt>
   113c4:	ldr	r1, [r4]
   113c8:	bl	10c84 <fputs_unlocked@plt>
   113cc:	bl	11df8 <__assert_fail@plt+0xf28>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #360]	; 11544 <__assert_fail@plt+0x674>
   113d8:	mov	r0, r5
   113dc:	bl	10d14 <dcgettext@plt>
   113e0:	ldr	r1, [r4]
   113e4:	bl	10c84 <fputs_unlocked@plt>
   113e8:	mov	r2, #5
   113ec:	ldr	r1, [pc, #340]	; 11548 <__assert_fail@plt+0x678>
   113f0:	mov	r0, r5
   113f4:	bl	10d14 <dcgettext@plt>
   113f8:	ldr	r1, [r4]
   113fc:	bl	10c84 <fputs_unlocked@plt>
   11400:	ldr	lr, [pc, #324]	; 1154c <__assert_fail@plt+0x67c>
   11404:	mov	ip, sp
   11408:	ldm	lr!, {r0, r1, r2, r3}
   1140c:	stmia	ip!, {r0, r1, r2, r3}
   11410:	ldm	lr!, {r0, r1, r2, r3}
   11414:	stmia	ip!, {r0, r1, r2, r3}
   11418:	ldm	lr!, {r0, r1, r2, r3}
   1141c:	stmia	ip!, {r0, r1, r2, r3}
   11420:	ldm	lr, {r0, r1}
   11424:	stm	ip, {r0, r1}
   11428:	ldr	r1, [r6]
   1142c:	cmp	r1, #0
   11430:	bne	114d4 <__assert_fail@plt+0x604>
   11434:	ldr	r6, [r6, #4]
   11438:	mov	r2, #5
   1143c:	mov	r0, #0
   11440:	ldr	r7, [pc, #236]	; 11534 <__assert_fail@plt+0x664>
   11444:	ldr	r1, [pc, #260]	; 11550 <__assert_fail@plt+0x680>
   11448:	cmp	r6, #0
   1144c:	moveq	r6, r7
   11450:	bl	10d14 <dcgettext@plt>
   11454:	mov	r1, r0
   11458:	ldr	r3, [pc, #244]	; 11554 <__assert_fail@plt+0x684>
   1145c:	mov	r0, #1
   11460:	ldr	r2, [pc, #240]	; 11558 <__assert_fail@plt+0x688>
   11464:	bl	10e10 <__printf_chk@plt>
   11468:	mov	r1, #0
   1146c:	mov	r0, #5
   11470:	bl	10e4c <setlocale@plt>
   11474:	cmp	r0, #0
   11478:	bne	114ec <__assert_fail@plt+0x61c>
   1147c:	mov	r2, #5
   11480:	ldr	r1, [pc, #212]	; 1155c <__assert_fail@plt+0x68c>
   11484:	mov	r0, #0
   11488:	bl	10d14 <dcgettext@plt>
   1148c:	mov	r1, r0
   11490:	ldr	r3, [pc, #156]	; 11534 <__assert_fail@plt+0x664>
   11494:	mov	r0, #1
   11498:	ldr	r2, [pc, #180]	; 11554 <__assert_fail@plt+0x684>
   1149c:	bl	10e10 <__printf_chk@plt>
   114a0:	mov	r2, #5
   114a4:	ldr	r1, [pc, #180]	; 11560 <__assert_fail@plt+0x690>
   114a8:	mov	r0, #0
   114ac:	bl	10d14 <dcgettext@plt>
   114b0:	ldr	r2, [pc, #172]	; 11564 <__assert_fail@plt+0x694>
   114b4:	cmp	r6, r7
   114b8:	mov	r1, r0
   114bc:	mov	r0, #1
   114c0:	ldr	r3, [pc, #160]	; 11568 <__assert_fail@plt+0x698>
   114c4:	moveq	r3, r2
   114c8:	mov	r2, r6
   114cc:	bl	10e10 <__printf_chk@plt>
   114d0:	b	1133c <__assert_fail@plt+0x46c>
   114d4:	mov	r0, r7
   114d8:	bl	10c9c <strcmp@plt>
   114dc:	cmp	r0, #0
   114e0:	beq	11434 <__assert_fail@plt+0x564>
   114e4:	add	r6, r6, #8
   114e8:	b	11428 <__assert_fail@plt+0x558>
   114ec:	mov	r2, #3
   114f0:	ldr	r1, [pc, #116]	; 1156c <__assert_fail@plt+0x69c>
   114f4:	bl	10ea0 <strncmp@plt>
   114f8:	cmp	r0, #0
   114fc:	beq	1147c <__assert_fail@plt+0x5ac>
   11500:	mov	r2, #5
   11504:	ldr	r1, [pc, #100]	; 11570 <__assert_fail@plt+0x6a0>
   11508:	mov	r0, #0
   1150c:	bl	10d14 <dcgettext@plt>
   11510:	ldr	r1, [r4]
   11514:	bl	10c84 <fputs_unlocked@plt>
   11518:	b	1147c <__assert_fail@plt+0x5ac>
   1151c:	andeq	r6, r2, r4, lsr #3
   11520:	andeq	r6, r2, r8, asr #2
   11524:	andeq	r4, r1, sp, ror #9
   11528:	andeq	r4, r1, r4, lsl r5
   1152c:	andeq	r6, r2, r4, asr r1
   11530:	andeq	r4, r1, r5, lsr r5
   11534:	andeq	r4, r1, r6, ror #9
   11538:	andeq	r4, r1, r7, ror r5
   1153c:	andeq	r4, r1, pc, lsr #11
   11540:	strdeq	r4, [r1], -sl
   11544:	andeq	r4, r1, sl, ror #12
   11548:	muleq	r1, r7, r6
   1154c:	andeq	r4, r1, ip, lsr r4
   11550:	andeq	r4, r1, sp, asr #13
   11554:	andeq	r4, r1, r4, ror #13
   11558:	andeq	r4, r1, ip, lsl #14
   1155c:	andeq	r4, r1, r5, ror #14
   11560:	andeq	r4, r1, r0, lsl #15
   11564:	andeq	r4, r1, sl, lsl r8
   11568:			; <UNDEFINED> instruction: 0x000147b2
   1156c:	andeq	r4, r1, sl, lsl r7
   11570:	andeq	r4, r1, lr, lsl r7
   11574:	andeq	r0, r0, r0
   11578:	ldr	r3, [pc, #72]	; 115c8 <__assert_fail@plt+0x6f8>
   1157c:	push	{r4, r6, r7, lr}
   11580:	mov	r6, r0
   11584:	mov	r7, r1
   11588:	ldrd	r0, [r3]
   1158c:	mov	r4, r3
   11590:	orrs	r2, r0, r1
   11594:	moveq	r0, #1
   11598:	beq	115c0 <__assert_fail@plt+0x6f0>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #36]	; 115cc <__assert_fail@plt+0x6fc>
   115a4:	mov	r0, #0
   115a8:	bl	10d14 <dcgettext@plt>
   115ac:	mov	r1, #0
   115b0:	mov	r2, r0
   115b4:	mov	r0, r1
   115b8:	bl	10d80 <error@plt>
   115bc:	mov	r0, #0
   115c0:	strd	r6, [r4]
   115c4:	pop	{r4, r6, r7, pc}
   115c8:	andeq	r6, r2, r0, ror #2
   115cc:	andeq	r4, r1, r1, lsl #17
   115d0:	ldr	r3, [pc, #72]	; 11620 <__assert_fail@plt+0x750>
   115d4:	push	{r4, r6, r7, lr}
   115d8:	mov	r6, r0
   115dc:	mov	r7, r1
   115e0:	ldrd	r0, [r3, #8]
   115e4:	mov	r4, r3
   115e8:	orrs	r2, r0, r1
   115ec:	moveq	r0, #1
   115f0:	beq	11618 <__assert_fail@plt+0x748>
   115f4:	mov	r2, #5
   115f8:	ldr	r1, [pc, #36]	; 11624 <__assert_fail@plt+0x754>
   115fc:	mov	r0, #0
   11600:	bl	10d14 <dcgettext@plt>
   11604:	mov	r1, #0
   11608:	mov	r2, r0
   1160c:	mov	r0, r1
   11610:	bl	10d80 <error@plt>
   11614:	mov	r0, #0
   11618:	strd	r6, [r4, #8]
   1161c:	pop	{r4, r6, r7, pc}
   11620:	andeq	r6, r2, r0, ror #2
   11624:			; <UNDEFINED> instruction: 0x000148b0
   11628:	push	{r4, r6, r7, r8, r9, lr}
   1162c:	mov	r9, r1
   11630:	mov	r8, r0
   11634:	ldr	r4, [pc, #192]	; 116fc <__assert_fail@plt+0x82c>
   11638:	ldr	r1, [r4, #16]
   1163c:	ldr	r0, [r4, #20]
   11640:	cmp	r1, #0
   11644:	beq	116e8 <__assert_fail@plt+0x818>
   11648:	add	r3, r0, r1, lsl #3
   1164c:	ldrd	r2, [r3, #-8]
   11650:	cmp	r3, r9
   11654:	cmpeq	r2, r8
   11658:	movhi	r6, #0
   1165c:	movhi	r7, #0
   11660:	bhi	1166c <__assert_fail@plt+0x79c>
   11664:	subs	r6, r8, r2
   11668:	sbc	r7, r9, r3
   1166c:	ldr	r3, [r4, #24]
   11670:	cmp	r1, r3
   11674:	bne	11688 <__assert_fail@plt+0x7b8>
   11678:	mov	r2, #8
   1167c:	ldr	r1, [pc, #124]	; 11700 <__assert_fail@plt+0x830>
   11680:	bl	13d3c <__assert_fail@plt+0x2e6c>
   11684:	str	r0, [r4, #20]
   11688:	ldr	r3, [r4, #16]
   1168c:	ldr	r2, [r4, #20]
   11690:	add	r1, r3, #1
   11694:	lsl	r3, r3, #3
   11698:	str	r1, [r4, #16]
   1169c:	strd	r8, [r2, r3]
   116a0:	mov	r3, #0
   116a4:	ldr	r2, [r4, #28]
   116a8:	cmp	r3, r7
   116ac:	cmpeq	r2, r6
   116b0:	popcs	{r4, r6, r7, r8, r9, pc}
   116b4:	mov	r3, #0
   116b8:	mvn	r2, #0
   116bc:	cmp	r7, r3
   116c0:	cmpeq	r6, r2
   116c4:	bls	116f4 <__assert_fail@plt+0x824>
   116c8:	mov	r2, #5
   116cc:	ldr	r1, [pc, #48]	; 11704 <__assert_fail@plt+0x834>
   116d0:	mov	r0, #0
   116d4:	bl	10d14 <dcgettext@plt>
   116d8:	mov	r2, r0
   116dc:	mov	r1, #0
   116e0:	mov	r0, #1
   116e4:	bl	10d80 <error@plt>
   116e8:	mov	r2, #0
   116ec:	mov	r3, #0
   116f0:	b	11664 <__assert_fail@plt+0x794>
   116f4:	str	r6, [r4, #28]
   116f8:	pop	{r4, r6, r7, r8, r9, pc}
   116fc:	andeq	r6, r2, r0, ror #2
   11700:	andeq	r6, r2, r8, ror r1
   11704:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   11708:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1170c:	mov	r9, #0
   11710:	mov	r2, #0
   11714:	mov	r3, #0
   11718:	mov	r6, r0
   1171c:	mov	sl, #1
   11720:	mov	r7, r9
   11724:	mov	r8, r9
   11728:	mov	r5, r9
   1172c:	strd	r2, [sp]
   11730:	ldrb	fp, [r6]
   11734:	cmp	fp, #0
   11738:	moveq	r0, sl
   1173c:	beq	11784 <__assert_fail@plt+0x8b4>
   11740:	cmp	fp, #44	; 0x2c
   11744:	beq	11760 <__assert_fail@plt+0x890>
   11748:	bl	10dc8 <__ctype_b_loc@plt>
   1174c:	ldr	r2, [r0]
   11750:	lsl	r3, fp, #1
   11754:	ldrh	r4, [r2, r3]
   11758:	ands	r4, r4, #1
   1175c:	beq	117dc <__assert_fail@plt+0x90c>
   11760:	cmp	r5, #0
   11764:	beq	11830 <__assert_fail@plt+0x960>
   11768:	cmp	r8, #0
   1176c:	ldrd	r0, [sp]
   11770:	beq	117b0 <__assert_fail@plt+0x8e0>
   11774:	bl	11578 <__assert_fail@plt+0x6a8>
   11778:	cmp	r0, #0
   1177c:	bne	119a4 <__assert_fail@plt+0xad4>
   11780:	mov	r5, r8
   11784:	and	r5, r5, r0
   11788:	tst	r5, #255	; 0xff
   1178c:	beq	117a0 <__assert_fail@plt+0x8d0>
   11790:	cmp	r8, #0
   11794:	ldrd	r0, [sp]
   11798:	beq	119b4 <__assert_fail@plt+0xae4>
   1179c:	bl	11578 <__assert_fail@plt+0x6a8>
   117a0:	cmp	r0, #0
   117a4:	bne	119d0 <__assert_fail@plt+0xb00>
   117a8:	mov	r0, #1
   117ac:	bl	10dd4 <exit@plt>
   117b0:	cmp	r7, #0
   117b4:	beq	117cc <__assert_fail@plt+0x8fc>
   117b8:	bl	115d0 <__assert_fail@plt+0x700>
   117bc:	cmp	r0, #0
   117c0:	bne	119ac <__assert_fail@plt+0xadc>
   117c4:	mov	r5, r7
   117c8:	b	11784 <__assert_fail@plt+0x8b4>
   117cc:	mov	r8, r7
   117d0:	bl	11628 <__assert_fail@plt+0x758>
   117d4:	mov	r5, #0
   117d8:	b	11830 <__assert_fail@plt+0x960>
   117dc:	cmp	fp, #47	; 0x2f
   117e0:	bne	11838 <__assert_fail@plt+0x968>
   117e4:	cmp	r5, #0
   117e8:	moveq	r7, r5
   117ec:	moveq	r8, #1
   117f0:	beq	11830 <__assert_fail@plt+0x960>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #480]	; 119e0 <__assert_fail@plt+0xb10>
   117fc:	mov	r0, r4
   11800:	bl	10d14 <dcgettext@plt>
   11804:	mov	r7, r0
   11808:	mov	r0, r6
   1180c:	bl	13748 <__assert_fail@plt+0x2878>
   11810:	mov	r3, r0
   11814:	mov	r2, r7
   11818:	mov	r1, r4
   1181c:	mov	r0, r4
   11820:	mov	r8, r5
   11824:	mov	sl, r4
   11828:	mov	r7, r4
   1182c:	bl	10d80 <error@plt>
   11830:	add	r6, r6, #1
   11834:	b	11730 <__assert_fail@plt+0x860>
   11838:	cmp	fp, #43	; 0x2b
   1183c:	bne	11890 <__assert_fail@plt+0x9c0>
   11840:	cmp	r5, #0
   11844:	moveq	r8, r5
   11848:	moveq	r7, #1
   1184c:	beq	11830 <__assert_fail@plt+0x960>
   11850:	mov	r2, #5
   11854:	ldr	r1, [pc, #392]	; 119e4 <__assert_fail@plt+0xb14>
   11858:	mov	r0, r4
   1185c:	bl	10d14 <dcgettext@plt>
   11860:	mov	r7, r0
   11864:	mov	r0, r6
   11868:	bl	13748 <__assert_fail@plt+0x2878>
   1186c:	mov	r3, r0
   11870:	mov	r2, r7
   11874:	mov	r1, r4
   11878:	mov	r0, r4
   1187c:	bl	10d80 <error@plt>
   11880:	mov	r7, r5
   11884:	mov	sl, r4
   11888:	mov	r8, r4
   1188c:	b	11830 <__assert_fail@plt+0x960>
   11890:	sub	fp, fp, #48	; 0x30
   11894:	cmp	fp, #9
   11898:	bhi	1196c <__assert_fail@plt+0xa9c>
   1189c:	cmp	r5, #0
   118a0:	beq	11958 <__assert_fail@plt+0xa88>
   118a4:	add	r1, pc, #300	; 0x12c
   118a8:	ldrd	r0, [r1]
   118ac:	ldrd	r2, [sp]
   118b0:	cmp	r3, r1
   118b4:	cmpeq	r2, r0
   118b8:	bhi	118ec <__assert_fail@plt+0xa1c>
   118bc:	ldr	r3, [sp]
   118c0:	mov	r1, #10
   118c4:	ldr	r0, [sp, #4]
   118c8:	umull	r2, r3, r3, r1
   118cc:	mla	r3, r1, r0, r3
   118d0:	adds	r0, r2, fp
   118d4:	adc	r1, r3, fp, asr #31
   118d8:	ldrd	r2, [sp]
   118dc:	cmp	r1, r3
   118e0:	cmpeq	r0, r2
   118e4:	strdcs	r0, [sp]
   118e8:	bcs	11950 <__assert_fail@plt+0xa80>
   118ec:	ldr	r1, [pc, #244]	; 119e8 <__assert_fail@plt+0xb18>
   118f0:	mov	r0, r9
   118f4:	mov	sl, #0
   118f8:	bl	10ec4 <strspn@plt>
   118fc:	mov	r1, r0
   11900:	mov	r6, r0
   11904:	mov	r0, r9
   11908:	sub	r6, r6, #1
   1190c:	bl	13ecc <__assert_fail@plt+0x2ffc>
   11910:	mov	r4, r0
   11914:	mov	r2, #5
   11918:	ldr	r1, [pc, #204]	; 119ec <__assert_fail@plt+0xb1c>
   1191c:	mov	r0, #0
   11920:	add	r6, r9, r6
   11924:	bl	10d14 <dcgettext@plt>
   11928:	mov	r5, r0
   1192c:	mov	r0, r4
   11930:	bl	13748 <__assert_fail@plt+0x2878>
   11934:	mov	r1, #0
   11938:	mov	r3, r0
   1193c:	mov	r2, r5
   11940:	mov	r0, r1
   11944:	bl	10d80 <error@plt>
   11948:	mov	r0, r4
   1194c:	bl	12060 <__assert_fail@plt+0x1190>
   11950:	mov	r5, #1
   11954:	b	11830 <__assert_fail@plt+0x960>
   11958:	mov	r2, #0
   1195c:	mov	r3, #0
   11960:	mov	r9, r6
   11964:	strd	r2, [sp]
   11968:	b	118bc <__assert_fail@plt+0x9ec>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #120]	; 119f0 <__assert_fail@plt+0xb20>
   11974:	mov	r0, r4
   11978:	bl	10d14 <dcgettext@plt>
   1197c:	mov	r9, r0
   11980:	mov	r0, r6
   11984:	bl	13748 <__assert_fail@plt+0x2878>
   11988:	mov	r3, r0
   1198c:	mov	r2, r9
   11990:	mov	r0, r4
   11994:	mov	r1, r4
   11998:	bl	10d80 <error@plt>
   1199c:	mov	r0, r4
   119a0:	b	11784 <__assert_fail@plt+0x8b4>
   119a4:	mov	r8, r0
   119a8:	b	117d4 <__assert_fail@plt+0x904>
   119ac:	mov	r7, r0
   119b0:	b	117d4 <__assert_fail@plt+0x904>
   119b4:	cmp	r7, #0
   119b8:	beq	119c4 <__assert_fail@plt+0xaf4>
   119bc:	bl	115d0 <__assert_fail@plt+0x700>
   119c0:	b	117a0 <__assert_fail@plt+0x8d0>
   119c4:	add	sp, sp, #12
   119c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119cc:	b	11628 <__assert_fail@plt+0x758>
   119d0:	add	sp, sp, #12
   119d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119d8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   119dc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   119e0:	strdeq	r4, [r1], -r6
   119e4:	andeq	r4, r1, pc, lsl r9
   119e8:	andeq	r4, r1, r8, asr #18
   119ec:	andeq	r4, r1, r3, asr r9
   119f0:	andeq	r4, r1, ip, ror #18
   119f4:	ldr	r3, [pc, #252]	; 11af8 <__assert_fail@plt+0xc28>
   119f8:	mov	r2, #0
   119fc:	push	{r4, r5, r6, r7, r8, lr}
   11a00:	mov	r4, #0
   11a04:	mov	r5, #0
   11a08:	ldr	r6, [r3, #16]
   11a0c:	ldr	ip, [r3, #20]
   11a10:	sub	lr, ip, #8
   11a14:	cmp	r6, r2
   11a18:	bne	11a40 <__assert_fail@plt+0xb70>
   11a1c:	ldrd	r4, [r3, #8]
   11a20:	orrs	r1, r4, r5
   11a24:	beq	11a90 <__assert_fail@plt+0xbc0>
   11a28:	ldrd	r0, [r3]
   11a2c:	orrs	r1, r0, r1
   11a30:	beq	11a90 <__assert_fail@plt+0xbc0>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #188]	; 11afc <__assert_fail@plt+0xc2c>
   11a3c:	b	11a54 <__assert_fail@plt+0xb84>
   11a40:	ldrd	r0, [lr, #8]!
   11a44:	orrs	r7, r0, r1
   11a48:	bne	11a6c <__assert_fail@plt+0xb9c>
   11a4c:	ldr	r1, [pc, #172]	; 11b00 <__assert_fail@plt+0xc30>
   11a50:	mov	r2, #5
   11a54:	mov	r0, #0
   11a58:	bl	10d14 <dcgettext@plt>
   11a5c:	mov	r2, r0
   11a60:	mov	r1, #0
   11a64:	mov	r0, #1
   11a68:	bl	10d80 <error@plt>
   11a6c:	cmp	r1, r5
   11a70:	cmpeq	r0, r4
   11a74:	movls	r2, #5
   11a78:	ldrls	r1, [pc, #132]	; 11b04 <__assert_fail@plt+0xc34>
   11a7c:	bls	11a54 <__assert_fail@plt+0xb84>
   11a80:	add	r2, r2, #1
   11a84:	mov	r4, r0
   11a88:	mov	r5, r1
   11a8c:	b	11a14 <__assert_fail@plt+0xb44>
   11a90:	cmp	r2, #0
   11a94:	bne	11ac4 <__assert_fail@plt+0xbf4>
   11a98:	ldrd	r0, [r3]
   11a9c:	orrs	r2, r0, r1
   11aa0:	bne	11ab0 <__assert_fail@plt+0xbe0>
   11aa4:	orrs	r2, r4, r5
   11aa8:	movne	r0, r4
   11aac:	moveq	r0, #8
   11ab0:	mov	r2, #0
   11ab4:	str	r0, [r3, #28]
   11ab8:	str	r0, [r3, #32]
   11abc:	str	r2, [r3, #36]	; 0x24
   11ac0:	pop	{r4, r5, r6, r7, r8, pc}
   11ac4:	cmp	r2, #1
   11ac8:	bne	11ae8 <__assert_fail@plt+0xc18>
   11acc:	ldr	lr, [r3]
   11ad0:	ldr	r2, [r3, #4]
   11ad4:	orr	r0, r4, lr
   11ad8:	orr	r1, r5, r2
   11adc:	orrs	r2, r0, r1
   11ae0:	ldrdeq	r0, [ip]
   11ae4:	beq	11af0 <__assert_fail@plt+0xc20>
   11ae8:	mov	r0, #0
   11aec:	mov	r1, #0
   11af0:	strd	r0, [r3, #32]
   11af4:	pop	{r4, r5, r6, r7, r8, pc}
   11af8:	andeq	r6, r2, r0, ror #2
   11afc:	andeq	r4, r1, r8, asr #19
   11b00:	muleq	r1, r7, r9
   11b04:	andeq	r4, r1, ip, lsr #19
   11b08:	ldr	ip, [pc, #248]	; 11c08 <__assert_fail@plt+0xd38>
   11b0c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11b10:	mov	lr, r3
   11b14:	mov	r3, #0
   11b18:	mov	r8, r2
   11b1c:	strb	r3, [lr]
   11b20:	ldrd	r2, [ip, #32]
   11b24:	strd	r0, [sp]
   11b28:	orrs	r6, r2, r3
   11b2c:	ldreq	sl, [ip, #16]
   11b30:	ldreq	r1, [ip, #20]
   11b34:	beq	11b84 <__assert_fail@plt+0xcb4>
   11b38:	ldr	ip, [sp]
   11b3c:	adds	r6, r2, ip
   11b40:	ldr	ip, [sp, #4]
   11b44:	adc	r7, r3, ip
   11b48:	bl	14240 <__assert_fail@plt+0x3370>
   11b4c:	subs	r4, r6, r2
   11b50:	sbc	r5, r7, r3
   11b54:	mov	r0, r4
   11b58:	mov	r1, r5
   11b5c:	add	sp, sp, #8
   11b60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11b64:	lsl	r3, r0, #3
   11b68:	ldrd	r4, [r1, r3]
   11b6c:	ldrd	r2, [sp]
   11b70:	cmp	r3, r5
   11b74:	cmpeq	r2, r4
   11b78:	bcc	11b54 <__assert_fail@plt+0xc84>
   11b7c:	add	r0, r0, #1
   11b80:	str	r0, [r8]
   11b84:	ldr	r0, [r8]
   11b88:	cmp	r0, sl
   11b8c:	bcc	11b64 <__assert_fail@plt+0xc94>
   11b90:	ldrd	r2, [ip]
   11b94:	orrs	r0, r2, r3
   11b98:	beq	11bc0 <__assert_fail@plt+0xcf0>
   11b9c:	ldr	r1, [sp]
   11ba0:	adds	r8, r2, r1
   11ba4:	ldr	r1, [sp, #4]
   11ba8:	adc	r9, r3, r1
   11bac:	ldrd	r0, [sp]
   11bb0:	bl	14240 <__assert_fail@plt+0x3370>
   11bb4:	subs	r4, r8, r2
   11bb8:	sbc	r5, r9, r3
   11bbc:	b	11b54 <__assert_fail@plt+0xc84>
   11bc0:	ldrd	r4, [ip, #8]
   11bc4:	orrs	r3, r4, r5
   11bc8:	moveq	r3, #1
   11bcc:	strbeq	r3, [lr]
   11bd0:	beq	11b54 <__assert_fail@plt+0xc84>
   11bd4:	ldr	r3, [sp]
   11bd8:	add	r1, r1, sl, lsl #3
   11bdc:	mov	r2, r4
   11be0:	ldrd	r0, [r1, #-8]
   11be4:	ldr	ip, [sp]
   11be8:	adds	r8, r4, r3
   11bec:	ldr	r3, [sp, #4]
   11bf0:	adc	r9, r5, r3
   11bf4:	subs	r0, ip, r0
   11bf8:	ldr	ip, [sp, #4]
   11bfc:	mov	r3, r5
   11c00:	sbc	r1, ip, r1
   11c04:	b	11bb0 <__assert_fail@plt+0xce0>
   11c08:	andeq	r6, r2, r0, ror #2
   11c0c:	ldr	r2, [pc, #24]	; 11c2c <__assert_fail@plt+0xd5c>
   11c10:	mov	r3, #0
   11c14:	cmp	r0, #0
   11c18:	strb	r3, [r2, #40]	; 0x28
   11c1c:	ldr	r3, [pc, #12]	; 11c30 <__assert_fail@plt+0xd60>
   11c20:	moveq	r0, r3
   11c24:	str	r0, [r2, #44]	; 0x2c
   11c28:	bx	lr
   11c2c:	andeq	r6, r2, r0, ror #2
   11c30:	andeq	r6, r2, r4, ror #1
   11c34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c38:	subs	r6, r0, #0
   11c3c:	ldr	r4, [pc, #332]	; 11d90 <__assert_fail@plt+0xec0>
   11c40:	beq	11cd0 <__assert_fail@plt+0xe00>
   11c44:	ldr	r8, [r4, #48]	; 0x30
   11c48:	cmp	r8, #0
   11c4c:	bne	11c64 <__assert_fail@plt+0xd94>
   11c50:	ldr	r3, [pc, #316]	; 11d94 <__assert_fail@plt+0xec4>
   11c54:	mov	r2, #340	; 0x154
   11c58:	ldr	r1, [pc, #312]	; 11d98 <__assert_fail@plt+0xec8>
   11c5c:	ldr	r0, [pc, #312]	; 11d9c <__assert_fail@plt+0xecc>
   11c60:	bl	10ed0 <__assert_fail@plt>
   11c64:	bl	10dec <__errno_location@plt>
   11c68:	mov	r7, r0
   11c6c:	mov	r0, r6
   11c70:	ldr	r5, [r7]
   11c74:	bl	10d68 <ferror_unlocked@plt>
   11c78:	cmp	r0, #0
   11c7c:	ldr	r1, [pc, #284]	; 11da0 <__assert_fail@plt+0xed0>
   11c80:	mov	r0, r8
   11c84:	moveq	r5, #0
   11c88:	bl	10c9c <strcmp@plt>
   11c8c:	cmp	r0, #0
   11c90:	mov	r0, r6
   11c94:	bne	11d48 <__assert_fail@plt+0xe78>
   11c98:	bl	10e70 <clearerr_unlocked@plt>
   11c9c:	cmp	r5, #0
   11ca0:	beq	11cd0 <__assert_fail@plt+0xe00>
   11ca4:	mov	r1, #3
   11ca8:	mov	r0, #0
   11cac:	ldr	r2, [r4, #48]	; 0x30
   11cb0:	bl	13608 <__assert_fail@plt+0x2738>
   11cb4:	mov	r3, r0
   11cb8:	ldr	r2, [pc, #228]	; 11da4 <__assert_fail@plt+0xed4>
   11cbc:	mov	r1, r5
   11cc0:	mov	r0, #0
   11cc4:	bl	10d80 <error@plt>
   11cc8:	mov	r3, #1
   11ccc:	str	r3, [r4, #52]	; 0x34
   11cd0:	ldr	r7, [pc, #200]	; 11da0 <__assert_fail@plt+0xed0>
   11cd4:	ldr	r8, [pc, #204]	; 11da8 <__assert_fail@plt+0xed8>
   11cd8:	ldr	r9, [pc, #204]	; 11dac <__assert_fail@plt+0xedc>
   11cdc:	ldr	r3, [r4, #44]	; 0x2c
   11ce0:	ldr	r5, [r3]
   11ce4:	add	r2, r3, #4
   11ce8:	str	r2, [r4, #44]	; 0x2c
   11cec:	cmp	r5, #0
   11cf0:	beq	11d40 <__assert_fail@plt+0xe70>
   11cf4:	mov	r1, r7
   11cf8:	mov	r0, r5
   11cfc:	bl	10c9c <strcmp@plt>
   11d00:	cmp	r0, #0
   11d04:	moveq	r3, #1
   11d08:	ldreq	r6, [r9]
   11d0c:	strbeq	r3, [r4, #40]	; 0x28
   11d10:	beq	11d24 <__assert_fail@plt+0xe54>
   11d14:	mov	r1, r8
   11d18:	mov	r0, r5
   11d1c:	bl	10e7c <fopen64@plt>
   11d20:	mov	r6, r0
   11d24:	cmp	r6, #0
   11d28:	beq	11d58 <__assert_fail@plt+0xe88>
   11d2c:	mov	r1, #2
   11d30:	mov	r0, r6
   11d34:	str	r5, [r4, #48]	; 0x30
   11d38:	mov	r5, r6
   11d3c:	bl	11f38 <__assert_fail@plt+0x1068>
   11d40:	mov	r0, r5
   11d44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d48:	bl	11f68 <__assert_fail@plt+0x1098>
   11d4c:	cmp	r0, #0
   11d50:	ldrne	r5, [r7]
   11d54:	b	11c9c <__assert_fail@plt+0xdcc>
   11d58:	bl	10dec <__errno_location@plt>
   11d5c:	ldr	sl, [r0]
   11d60:	mov	r2, r5
   11d64:	mov	r1, #3
   11d68:	mov	r0, r6
   11d6c:	bl	13608 <__assert_fail@plt+0x2738>
   11d70:	mov	r3, r0
   11d74:	ldr	r2, [pc, #40]	; 11da4 <__assert_fail@plt+0xed4>
   11d78:	mov	r0, r6
   11d7c:	mov	r1, sl
   11d80:	bl	10d80 <error@plt>
   11d84:	mov	r3, #1
   11d88:	str	r3, [r4, #52]	; 0x34
   11d8c:	b	11cdc <__assert_fail@plt+0xe0c>
   11d90:	andeq	r6, r2, r0, ror #2
   11d94:	andeq	r4, r1, r7, ror r8
   11d98:	strdeq	r4, [r1], -r5
   11d9c:	andeq	r4, r1, r9, lsl #20
   11da0:	andeq	r4, r1, r7, lsl ip
   11da4:	muleq	r1, r4, r9
   11da8:	strdeq	r4, [r1], -ip
   11dac:	andeq	r6, r2, r0, asr r1
   11db0:	ldr	r3, [pc, #52]	; 11dec <__assert_fail@plt+0xf1c>
   11db4:	ldrb	r3, [r3, #40]	; 0x28
   11db8:	cmp	r3, #0
   11dbc:	bxeq	lr
   11dc0:	push	{r4, lr}
   11dc4:	ldr	r3, [pc, #36]	; 11df0 <__assert_fail@plt+0xf20>
   11dc8:	ldr	r0, [r3]
   11dcc:	bl	11f68 <__assert_fail@plt+0x1098>
   11dd0:	cmp	r0, #0
   11dd4:	popeq	{r4, pc}
   11dd8:	bl	10dec <__errno_location@plt>
   11ddc:	ldr	r2, [pc, #16]	; 11df4 <__assert_fail@plt+0xf24>
   11de0:	ldr	r1, [r0]
   11de4:	mov	r0, #1
   11de8:	bl	10d80 <error@plt>
   11dec:	andeq	r6, r2, r0, ror #2
   11df0:	andeq	r6, r2, r0, asr r1
   11df4:	andeq	r4, r1, r7, lsl ip
   11df8:	push	{r4, lr}
   11dfc:	mov	r2, #5
   11e00:	mov	r0, #0
   11e04:	ldr	r4, [pc, #40]	; 11e34 <__assert_fail@plt+0xf64>
   11e08:	ldr	r1, [pc, #40]	; 11e38 <__assert_fail@plt+0xf68>
   11e0c:	bl	10d14 <dcgettext@plt>
   11e10:	ldr	r1, [r4]
   11e14:	bl	10c84 <fputs_unlocked@plt>
   11e18:	ldr	r1, [pc, #28]	; 11e3c <__assert_fail@plt+0xf6c>
   11e1c:	mov	r2, #5
   11e20:	mov	r0, #0
   11e24:	bl	10d14 <dcgettext@plt>
   11e28:	ldr	r1, [r4]
   11e2c:	pop	{r4, lr}
   11e30:	b	10c84 <fputs_unlocked@plt>
   11e34:	andeq	r6, r2, r4, asr r1
   11e38:	andeq	r4, r1, r3, lsl sl
   11e3c:	andeq	r4, r1, r2, asr sl
   11e40:	ldr	r3, [pc, #4]	; 11e4c <__assert_fail@plt+0xf7c>
   11e44:	str	r0, [r3]
   11e48:	bx	lr
   11e4c:	muleq	r2, ip, r1
   11e50:	ldr	r3, [pc, #4]	; 11e5c <__assert_fail@plt+0xf8c>
   11e54:	strb	r0, [r3, #4]
   11e58:	bx	lr
   11e5c:	muleq	r2, ip, r1
   11e60:	ldr	r3, [pc, #176]	; 11f18 <__assert_fail@plt+0x1048>
   11e64:	push	{r0, r1, r4, r5, r6, lr}
   11e68:	ldr	r0, [r3]
   11e6c:	bl	14018 <__assert_fail@plt+0x3148>
   11e70:	cmp	r0, #0
   11e74:	beq	11efc <__assert_fail@plt+0x102c>
   11e78:	ldr	r4, [pc, #156]	; 11f1c <__assert_fail@plt+0x104c>
   11e7c:	bl	10dec <__errno_location@plt>
   11e80:	mov	r5, r0
   11e84:	ldrb	r6, [r4, #4]
   11e88:	cmp	r6, #0
   11e8c:	beq	11e9c <__assert_fail@plt+0xfcc>
   11e90:	ldr	r3, [r0]
   11e94:	cmp	r3, #32
   11e98:	beq	11efc <__assert_fail@plt+0x102c>
   11e9c:	mov	r2, #5
   11ea0:	ldr	r1, [pc, #120]	; 11f20 <__assert_fail@plt+0x1050>
   11ea4:	mov	r0, #0
   11ea8:	bl	10d14 <dcgettext@plt>
   11eac:	mov	r6, r0
   11eb0:	ldr	r0, [r4]
   11eb4:	cmp	r0, #0
   11eb8:	beq	11ee8 <__assert_fail@plt+0x1018>
   11ebc:	ldr	r4, [r5]
   11ec0:	bl	135f8 <__assert_fail@plt+0x2728>
   11ec4:	mov	r3, r0
   11ec8:	ldr	r2, [pc, #84]	; 11f24 <__assert_fail@plt+0x1054>
   11ecc:	mov	r0, #0
   11ed0:	str	r6, [sp]
   11ed4:	mov	r1, r4
   11ed8:	bl	10d80 <error@plt>
   11edc:	ldr	r3, [pc, #68]	; 11f28 <__assert_fail@plt+0x1058>
   11ee0:	ldr	r0, [r3]
   11ee4:	bl	10ccc <_exit@plt>
   11ee8:	mov	r3, r6
   11eec:	ldr	r2, [pc, #56]	; 11f2c <__assert_fail@plt+0x105c>
   11ef0:	ldr	r1, [r5]
   11ef4:	bl	10d80 <error@plt>
   11ef8:	b	11edc <__assert_fail@plt+0x100c>
   11efc:	ldr	r3, [pc, #44]	; 11f30 <__assert_fail@plt+0x1060>
   11f00:	ldr	r0, [r3]
   11f04:	bl	14018 <__assert_fail@plt+0x3148>
   11f08:	cmp	r0, #0
   11f0c:	bne	11edc <__assert_fail@plt+0x100c>
   11f10:	add	sp, sp, #8
   11f14:	pop	{r4, r5, r6, pc}
   11f18:	andeq	r6, r2, r4, asr r1
   11f1c:	muleq	r2, ip, r1
   11f20:	strdeq	r4, [r1], -r2
   11f24:	andeq	r4, r1, lr, asr #23
   11f28:	strdeq	r6, [r2], -r0
   11f2c:	muleq	r1, r4, r9
   11f30:	andeq	r6, r2, r8, asr #2
   11f34:	b	10ca8 <posix_fadvise64@plt>
   11f38:	cmp	r0, #0
   11f3c:	bxeq	lr
   11f40:	push	{r0, r1, r2, r3, r4, lr}
   11f44:	mov	r4, r1
   11f48:	bl	10e1c <fileno@plt>
   11f4c:	mov	r2, #0
   11f50:	mov	r3, #0
   11f54:	strd	r2, [sp]
   11f58:	str	r4, [sp, #8]
   11f5c:	bl	10ca8 <posix_fadvise64@plt>
   11f60:	add	sp, sp, #16
   11f64:	pop	{r4, pc}
   11f68:	push	{r0, r1, r2, r4, r5, lr}
   11f6c:	mov	r4, r0
   11f70:	bl	10e1c <fileno@plt>
   11f74:	cmp	r0, #0
   11f78:	mov	r0, r4
   11f7c:	bge	11f8c <__assert_fail@plt+0x10bc>
   11f80:	add	sp, sp, #12
   11f84:	pop	{r4, r5, lr}
   11f88:	b	10e34 <fclose@plt>
   11f8c:	bl	10da4 <__freading@plt>
   11f90:	cmp	r0, #0
   11f94:	bne	11fd0 <__assert_fail@plt+0x1100>
   11f98:	mov	r0, r4
   11f9c:	bl	12010 <__assert_fail@plt+0x1140>
   11fa0:	cmp	r0, #0
   11fa4:	bne	12004 <__assert_fail@plt+0x1134>
   11fa8:	mov	r5, #0
   11fac:	mov	r0, r4
   11fb0:	bl	10e34 <fclose@plt>
   11fb4:	cmp	r5, #0
   11fb8:	beq	11fc8 <__assert_fail@plt+0x10f8>
   11fbc:	bl	10dec <__errno_location@plt>
   11fc0:	str	r5, [r0]
   11fc4:	mvn	r0, #0
   11fc8:	add	sp, sp, #12
   11fcc:	pop	{r4, r5, pc}
   11fd0:	mov	r0, r4
   11fd4:	bl	10e1c <fileno@plt>
   11fd8:	mov	r3, #1
   11fdc:	mov	r2, #0
   11fe0:	str	r3, [sp]
   11fe4:	mov	r3, #0
   11fe8:	bl	10d44 <lseek64@plt>
   11fec:	mvn	r3, #0
   11ff0:	mvn	r2, #0
   11ff4:	cmp	r1, r3
   11ff8:	cmpeq	r0, r2
   11ffc:	bne	11f98 <__assert_fail@plt+0x10c8>
   12000:	b	11fa8 <__assert_fail@plt+0x10d8>
   12004:	bl	10dec <__errno_location@plt>
   12008:	ldr	r5, [r0]
   1200c:	b	11fac <__assert_fail@plt+0x10dc>
   12010:	push	{r0, r1, r4, lr}
   12014:	subs	r4, r0, #0
   12018:	bne	1202c <__assert_fail@plt+0x115c>
   1201c:	mov	r0, r4
   12020:	add	sp, sp, #8
   12024:	pop	{r4, lr}
   12028:	b	10cb4 <fflush@plt>
   1202c:	bl	10da4 <__freading@plt>
   12030:	cmp	r0, #0
   12034:	beq	1201c <__assert_fail@plt+0x114c>
   12038:	ldr	r3, [r4]
   1203c:	tst	r3, #256	; 0x100
   12040:	beq	1201c <__assert_fail@plt+0x114c>
   12044:	mov	r3, #1
   12048:	mov	r2, #0
   1204c:	mov	r0, r4
   12050:	str	r3, [sp]
   12054:	mov	r3, #0
   12058:	bl	120b0 <__assert_fail@plt+0x11e0>
   1205c:	b	1201c <__assert_fail@plt+0x114c>
   12060:	push	{r0, r1, r2, r4, r5, lr}
   12064:	mov	r5, r0
   12068:	bl	10dec <__errno_location@plt>
   1206c:	mov	r4, r0
   12070:	mov	r0, r5
   12074:	ldr	r3, [r4]
   12078:	str	r3, [sp]
   1207c:	str	r3, [sp, #4]
   12080:	mov	r3, #0
   12084:	str	r3, [r4]
   12088:	bl	10cc0 <free@plt>
   1208c:	ldr	r3, [r4]
   12090:	add	r2, sp, #8
   12094:	clz	r3, r3
   12098:	lsr	r3, r3, #5
   1209c:	add	r3, r2, r3, lsl #2
   120a0:	ldr	r3, [r3, #-8]
   120a4:	str	r3, [r4]
   120a8:	add	sp, sp, #12
   120ac:	pop	{r4, r5, pc}
   120b0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   120b4:	mov	r4, r0
   120b8:	ldmib	r0, {ip, lr}
   120bc:	ldr	r8, [sp, #32]
   120c0:	cmp	lr, ip
   120c4:	bne	12134 <__assert_fail@plt+0x1264>
   120c8:	ldr	ip, [r0, #16]
   120cc:	ldr	lr, [r0, #20]
   120d0:	cmp	lr, ip
   120d4:	bne	12134 <__assert_fail@plt+0x1264>
   120d8:	ldr	r5, [r0, #36]	; 0x24
   120dc:	cmp	r5, #0
   120e0:	bne	12134 <__assert_fail@plt+0x1264>
   120e4:	mov	r6, r2
   120e8:	mov	r7, r3
   120ec:	bl	10e1c <fileno@plt>
   120f0:	mov	r2, r6
   120f4:	mov	r3, r7
   120f8:	str	r8, [sp]
   120fc:	bl	10d44 <lseek64@plt>
   12100:	mvn	r3, #0
   12104:	mvn	r2, #0
   12108:	cmp	r1, r3
   1210c:	cmpeq	r0, r2
   12110:	mvneq	r0, #0
   12114:	beq	1212c <__assert_fail@plt+0x125c>
   12118:	ldr	r3, [r4]
   1211c:	strd	r0, [r4, #80]	; 0x50
   12120:	mov	r0, r5
   12124:	bic	r3, r3, #16
   12128:	str	r3, [r4]
   1212c:	add	sp, sp, #8
   12130:	pop	{r4, r5, r6, r7, r8, pc}
   12134:	mov	r0, r4
   12138:	str	r8, [sp, #32]
   1213c:	add	sp, sp, #8
   12140:	pop	{r4, r5, r6, r7, r8, lr}
   12144:	b	10e40 <fseeko64@plt>
   12148:	push	{r4, r5, r6, lr}
   1214c:	subs	r4, r0, #0
   12150:	bne	12168 <__assert_fail@plt+0x1298>
   12154:	ldr	r3, [pc, #124]	; 121d8 <__assert_fail@plt+0x1308>
   12158:	ldr	r0, [pc, #124]	; 121dc <__assert_fail@plt+0x130c>
   1215c:	ldr	r1, [r3]
   12160:	bl	10e94 <fputs@plt>
   12164:	bl	10eac <abort@plt>
   12168:	mov	r1, #47	; 0x2f
   1216c:	bl	10e58 <strrchr@plt>
   12170:	subs	r6, r0, #0
   12174:	beq	121c4 <__assert_fail@plt+0x12f4>
   12178:	add	r5, r6, #1
   1217c:	sub	r3, r5, r4
   12180:	cmp	r3, #6
   12184:	ble	121c4 <__assert_fail@plt+0x12f4>
   12188:	mov	r2, #7
   1218c:	ldr	r1, [pc, #76]	; 121e0 <__assert_fail@plt+0x1310>
   12190:	sub	r0, r6, #6
   12194:	bl	10ea0 <strncmp@plt>
   12198:	cmp	r0, #0
   1219c:	bne	121c4 <__assert_fail@plt+0x12f4>
   121a0:	mov	r2, #3
   121a4:	ldr	r1, [pc, #56]	; 121e4 <__assert_fail@plt+0x1314>
   121a8:	mov	r0, r5
   121ac:	bl	10ea0 <strncmp@plt>
   121b0:	cmp	r0, #0
   121b4:	ldreq	r3, [pc, #44]	; 121e8 <__assert_fail@plt+0x1318>
   121b8:	addeq	r4, r6, #4
   121bc:	movne	r4, r5
   121c0:	streq	r4, [r3]
   121c4:	ldr	r3, [pc, #32]	; 121ec <__assert_fail@plt+0x131c>
   121c8:	str	r4, [r3]
   121cc:	ldr	r3, [pc, #28]	; 121f0 <__assert_fail@plt+0x1320>
   121d0:	str	r4, [r3]
   121d4:	pop	{r4, r5, r6, pc}
   121d8:	andeq	r6, r2, r8, asr #2
   121dc:	ldrdeq	r4, [r1], -r5
   121e0:	andeq	r4, r1, sp, lsl #24
   121e4:	andeq	r4, r1, r5, lsl ip
   121e8:	andeq	r6, r2, r8, lsr r1
   121ec:	andeq	r6, r2, r4, lsr #3
   121f0:	andeq	r6, r2, ip, lsr r1
   121f4:	push	{r4, lr}
   121f8:	mov	r2, #48	; 0x30
   121fc:	mov	r4, r1
   12200:	mov	r1, #0
   12204:	bl	10e04 <memset@plt>
   12208:	cmp	r4, #10
   1220c:	bne	12214 <__assert_fail@plt+0x1344>
   12210:	bl	10eac <abort@plt>
   12214:	str	r4, [r0]
   12218:	pop	{r4, pc}
   1221c:	push	{r4, r5, r6, lr}
   12220:	mov	r2, #5
   12224:	mov	r6, r0
   12228:	mov	r5, r1
   1222c:	mov	r1, r0
   12230:	mov	r0, #0
   12234:	bl	10d14 <dcgettext@plt>
   12238:	cmp	r6, r0
   1223c:	mov	r4, r0
   12240:	bne	122b0 <__assert_fail@plt+0x13e0>
   12244:	bl	140b0 <__assert_fail@plt+0x31e0>
   12248:	ldrb	r3, [r0]
   1224c:	bic	r3, r3, #32
   12250:	cmp	r3, #85	; 0x55
   12254:	bne	122b8 <__assert_fail@plt+0x13e8>
   12258:	ldrb	r3, [r0, #1]
   1225c:	bic	r3, r3, #32
   12260:	cmp	r3, #84	; 0x54
   12264:	bne	12328 <__assert_fail@plt+0x1458>
   12268:	ldrb	r3, [r0, #2]
   1226c:	bic	r3, r3, #32
   12270:	cmp	r3, #70	; 0x46
   12274:	bne	12328 <__assert_fail@plt+0x1458>
   12278:	ldrb	r3, [r0, #3]
   1227c:	cmp	r3, #45	; 0x2d
   12280:	bne	12328 <__assert_fail@plt+0x1458>
   12284:	ldrb	r3, [r0, #4]
   12288:	cmp	r3, #56	; 0x38
   1228c:	bne	12328 <__assert_fail@plt+0x1458>
   12290:	ldrb	r3, [r0, #5]
   12294:	cmp	r3, #0
   12298:	bne	12328 <__assert_fail@plt+0x1458>
   1229c:	ldrb	r2, [r4]
   122a0:	ldr	r3, [pc, #144]	; 12338 <__assert_fail@plt+0x1468>
   122a4:	ldr	r4, [pc, #144]	; 1233c <__assert_fail@plt+0x146c>
   122a8:	cmp	r2, #96	; 0x60
   122ac:	movne	r4, r3
   122b0:	mov	r0, r4
   122b4:	pop	{r4, r5, r6, pc}
   122b8:	cmp	r3, #71	; 0x47
   122bc:	bne	12328 <__assert_fail@plt+0x1458>
   122c0:	ldrb	r3, [r0, #1]
   122c4:	bic	r3, r3, #32
   122c8:	cmp	r3, #66	; 0x42
   122cc:	bne	12328 <__assert_fail@plt+0x1458>
   122d0:	ldrb	r3, [r0, #2]
   122d4:	cmp	r3, #49	; 0x31
   122d8:	bne	12328 <__assert_fail@plt+0x1458>
   122dc:	ldrb	r3, [r0, #3]
   122e0:	cmp	r3, #56	; 0x38
   122e4:	bne	12328 <__assert_fail@plt+0x1458>
   122e8:	ldrb	r3, [r0, #4]
   122ec:	cmp	r3, #48	; 0x30
   122f0:	bne	12328 <__assert_fail@plt+0x1458>
   122f4:	ldrb	r3, [r0, #5]
   122f8:	cmp	r3, #51	; 0x33
   122fc:	bne	12328 <__assert_fail@plt+0x1458>
   12300:	ldrb	r3, [r0, #6]
   12304:	cmp	r3, #48	; 0x30
   12308:	bne	12328 <__assert_fail@plt+0x1458>
   1230c:	ldrb	r3, [r0, #7]
   12310:	cmp	r3, #0
   12314:	bne	12328 <__assert_fail@plt+0x1458>
   12318:	ldrb	r2, [r4]
   1231c:	ldr	r3, [pc, #28]	; 12340 <__assert_fail@plt+0x1470>
   12320:	ldr	r4, [pc, #28]	; 12344 <__assert_fail@plt+0x1474>
   12324:	b	122a8 <__assert_fail@plt+0x13d8>
   12328:	ldr	r4, [pc, #24]	; 12348 <__assert_fail@plt+0x1478>
   1232c:	cmp	r5, #9
   12330:	ldr	r3, [pc, #20]	; 1234c <__assert_fail@plt+0x147c>
   12334:	b	122ac <__assert_fail@plt+0x13dc>
   12338:	andeq	r4, r1, r2, ror ip
   1233c:	andeq	r4, r1, sp, ror ip
   12340:	andeq	r4, r1, r6, ror ip
   12344:	andeq	r4, r1, r9, ror ip
   12348:	andeq	r4, r1, r0, ror ip
   1234c:	strdeq	r4, [r1], -r3
   12350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12354:	sub	sp, sp, #108	; 0x6c
   12358:	mov	r8, r0
   1235c:	mov	r5, r1
   12360:	mov	r6, #0
   12364:	str	r3, [sp, #40]	; 0x28
   12368:	str	r2, [sp, #48]	; 0x30
   1236c:	ldr	sl, [sp, #144]	; 0x90
   12370:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   12374:	ldr	r3, [sp, #148]	; 0x94
   12378:	str	r6, [sp, #24]
   1237c:	str	r6, [sp, #32]
   12380:	str	r6, [sp, #44]	; 0x2c
   12384:	str	r6, [sp, #52]	; 0x34
   12388:	ubfx	r7, r3, #1, #1
   1238c:	mov	r3, #1
   12390:	str	r6, [sp, #60]	; 0x3c
   12394:	str	r3, [sp, #72]	; 0x48
   12398:	str	r0, [sp, #76]	; 0x4c
   1239c:	cmp	sl, #10
   123a0:	ldrls	pc, [pc, sl, lsl #2]
   123a4:	b	125e8 <__assert_fail@plt+0x1718>
   123a8:	ldrdeq	r2, [r1], -r4
   123ac:	andeq	r2, r1, r0, lsl #12
   123b0:	andeq	r2, r1, r4, lsl #11
   123b4:	muleq	r1, ip, r5
   123b8:	andeq	r2, r1, ip, ror #10
   123bc:	andeq	r2, r1, r4, asr #9
   123c0:	andeq	r2, r1, r4, lsr #9
   123c4:	andeq	r2, r1, ip, ror #11
   123c8:	strdeq	r2, [r1], -r4
   123cc:	strdeq	r2, [r1], -r4
   123d0:	strdeq	r2, [r1], -r4
   123d4:	mov	r4, sl
   123d8:	mov	r7, #0
   123dc:	mov	r9, r5
   123e0:	mov	r3, #0
   123e4:	str	r6, [sp, #68]	; 0x44
   123e8:	str	r3, [sp, #28]
   123ec:	ldr	r3, [sp, #40]	; 0x28
   123f0:	cmn	r3, #1
   123f4:	bne	12f94 <__assert_fail@plt+0x20c4>
   123f8:	ldr	r2, [sp, #28]
   123fc:	ldr	r3, [sp, #48]	; 0x30
   12400:	ldrb	r3, [r3, r2]
   12404:	adds	r3, r3, #0
   12408:	movne	r3, #1
   1240c:	str	r3, [sp, #36]	; 0x24
   12410:	ldr	r3, [sp, #36]	; 0x24
   12414:	cmp	r3, #0
   12418:	bne	12624 <__assert_fail@plt+0x1754>
   1241c:	sub	r3, sl, #2
   12420:	cmp	r4, #0
   12424:	clz	r3, r3
   12428:	movne	r2, #0
   1242c:	lsr	r3, r3, #5
   12430:	andeq	r2, r3, r7
   12434:	cmp	r2, #0
   12438:	bne	127e8 <__assert_fail@plt+0x1918>
   1243c:	eor	r7, r7, #1
   12440:	ands	r3, r3, r7
   12444:	beq	1300c <__assert_fail@plt+0x213c>
   12448:	ldr	r2, [sp, #68]	; 0x44
   1244c:	cmp	r2, #0
   12450:	beq	12fd4 <__assert_fail@plt+0x2104>
   12454:	ldr	r3, [sp, #72]	; 0x48
   12458:	cmp	r3, #0
   1245c:	beq	12fa8 <__assert_fail@plt+0x20d8>
   12460:	ldr	r2, [sp, #48]	; 0x30
   12464:	ldr	r3, [sp, #160]	; 0xa0
   12468:	ldr	r1, [sp, #60]	; 0x3c
   1246c:	str	r3, [sp, #16]
   12470:	ldr	r3, [sp, #156]	; 0x9c
   12474:	str	r3, [sp, #12]
   12478:	ldr	r3, [sp, #152]	; 0x98
   1247c:	str	r3, [sp, #8]
   12480:	ldr	r3, [sp, #148]	; 0x94
   12484:	str	r3, [sp, #4]
   12488:	mov	r3, #5
   1248c:	str	r3, [sp]
   12490:	ldr	r3, [sp, #40]	; 0x28
   12494:	mov	r0, r8
   12498:	bl	12350 <__assert_fail@plt+0x1480>
   1249c:	mov	r4, r0
   124a0:	b	13000 <__assert_fail@plt+0x2130>
   124a4:	ldr	r3, [pc, #2948]	; 13030 <__assert_fail@plt+0x2160>
   124a8:	mov	r7, #1
   124ac:	mov	r4, #0
   124b0:	mov	sl, #5
   124b4:	str	r7, [sp, #24]
   124b8:	str	r7, [sp, #32]
   124bc:	str	r3, [sp, #44]	; 0x2c
   124c0:	b	123dc <__assert_fail@plt+0x150c>
   124c4:	cmp	r7, #0
   124c8:	bne	1260c <__assert_fail@plt+0x173c>
   124cc:	cmp	r5, #0
   124d0:	mov	r4, #1
   124d4:	movne	r3, #34	; 0x22
   124d8:	strbne	r3, [r8]
   124dc:	mov	r3, #1
   124e0:	str	r3, [sp, #24]
   124e4:	str	r3, [sp, #32]
   124e8:	ldr	r3, [pc, #2880]	; 13030 <__assert_fail@plt+0x2160>
   124ec:	str	r3, [sp, #44]	; 0x2c
   124f0:	b	123dc <__assert_fail@plt+0x150c>
   124f4:	cmp	sl, #10
   124f8:	beq	1251c <__assert_fail@plt+0x164c>
   124fc:	mov	r1, sl
   12500:	ldr	r0, [pc, #2860]	; 13034 <__assert_fail@plt+0x2164>
   12504:	bl	1221c <__assert_fail@plt+0x134c>
   12508:	mov	r1, sl
   1250c:	str	r0, [sp, #156]	; 0x9c
   12510:	ldr	r0, [pc, #2848]	; 13038 <__assert_fail@plt+0x2168>
   12514:	bl	1221c <__assert_fail@plt+0x134c>
   12518:	str	r0, [sp, #160]	; 0xa0
   1251c:	cmp	r7, #0
   12520:	moveq	r4, r7
   12524:	beq	1253c <__assert_fail@plt+0x166c>
   12528:	mov	r4, #0
   1252c:	b	1254c <__assert_fail@plt+0x167c>
   12530:	cmp	r5, r4
   12534:	strbhi	r3, [r8, r4]
   12538:	add	r4, r4, #1
   1253c:	ldr	r3, [sp, #156]	; 0x9c
   12540:	ldrb	r3, [r3, r4]
   12544:	cmp	r3, #0
   12548:	bne	12530 <__assert_fail@plt+0x1660>
   1254c:	ldr	r0, [sp, #160]	; 0xa0
   12550:	bl	10de0 <strlen@plt>
   12554:	ldr	r3, [sp, #160]	; 0xa0
   12558:	str	r0, [sp, #32]
   1255c:	str	r3, [sp, #44]	; 0x2c
   12560:	mov	r3, #1
   12564:	str	r3, [sp, #24]
   12568:	b	123dc <__assert_fail@plt+0x150c>
   1256c:	mov	r3, #1
   12570:	cmp	r7, #0
   12574:	streq	r3, [sp, #24]
   12578:	beq	125bc <__assert_fail@plt+0x16ec>
   1257c:	str	r3, [sp, #32]
   12580:	b	125a8 <__assert_fail@plt+0x16d8>
   12584:	cmp	r7, #0
   12588:	beq	125bc <__assert_fail@plt+0x16ec>
   1258c:	mov	r3, #1
   12590:	str	r3, [sp, #32]
   12594:	ldr	r3, [pc, #2716]	; 13038 <__assert_fail@plt+0x2168>
   12598:	b	1261c <__assert_fail@plt+0x174c>
   1259c:	mov	r7, #1
   125a0:	str	r7, [sp, #24]
   125a4:	str	r7, [sp, #32]
   125a8:	ldr	r3, [pc, #2696]	; 13038 <__assert_fail@plt+0x2168>
   125ac:	mov	r4, #0
   125b0:	str	r3, [sp, #44]	; 0x2c
   125b4:	mov	sl, #2
   125b8:	b	123dc <__assert_fail@plt+0x150c>
   125bc:	cmp	r5, #0
   125c0:	movne	r3, #39	; 0x27
   125c4:	movne	r7, #0
   125c8:	strbne	r3, [r8]
   125cc:	moveq	r7, r5
   125d0:	mov	r3, #1
   125d4:	mov	r4, #1
   125d8:	str	r3, [sp, #32]
   125dc:	ldr	r3, [pc, #2644]	; 13038 <__assert_fail@plt+0x2168>
   125e0:	str	r3, [sp, #44]	; 0x2c
   125e4:	b	125b4 <__assert_fail@plt+0x16e4>
   125e8:	bl	10eac <abort@plt>
   125ec:	mov	r3, #1
   125f0:	mov	r7, #0
   125f4:	str	r3, [sp, #24]
   125f8:	mov	r4, #0
   125fc:	b	123dc <__assert_fail@plt+0x150c>
   12600:	mov	r7, #1
   12604:	str	sl, [sp, #32]
   12608:	b	125a8 <__assert_fail@plt+0x16d8>
   1260c:	mov	r3, #1
   12610:	str	r7, [sp, #24]
   12614:	str	r3, [sp, #32]
   12618:	ldr	r3, [pc, #2576]	; 13030 <__assert_fail@plt+0x2160>
   1261c:	str	r3, [sp, #44]	; 0x2c
   12620:	b	125f8 <__assert_fail@plt+0x1728>
   12624:	ldr	fp, [sp, #24]
   12628:	ldr	r3, [sp, #32]
   1262c:	cmp	sl, #2
   12630:	moveq	fp, #0
   12634:	andne	fp, fp, #1
   12638:	adds	r5, r3, #0
   1263c:	movne	r5, #1
   12640:	ands	r3, fp, r5
   12644:	str	r3, [sp, #64]	; 0x40
   12648:	beq	12718 <__assert_fail@plt+0x1848>
   1264c:	ldr	r3, [sp, #28]
   12650:	ldr	r2, [sp, #32]
   12654:	cmp	r2, #1
   12658:	add	r6, r3, r2
   1265c:	mov	r3, r2
   12660:	ldr	r2, [sp, #40]	; 0x28
   12664:	movls	r3, #0
   12668:	movhi	r3, #1
   1266c:	cmn	r2, #1
   12670:	movne	r3, #0
   12674:	cmp	r3, #0
   12678:	beq	12688 <__assert_fail@plt+0x17b8>
   1267c:	ldr	r0, [sp, #48]	; 0x30
   12680:	bl	10de0 <strlen@plt>
   12684:	str	r0, [sp, #40]	; 0x28
   12688:	ldr	r3, [sp, #40]	; 0x28
   1268c:	cmp	r6, r3
   12690:	bhi	12710 <__assert_fail@plt+0x1840>
   12694:	ldr	r0, [sp, #28]
   12698:	ldr	r2, [sp, #32]
   1269c:	ldr	r3, [sp, #48]	; 0x30
   126a0:	ldr	r1, [sp, #44]	; 0x2c
   126a4:	add	r0, r3, r0
   126a8:	bl	10cf0 <memcmp@plt>
   126ac:	cmp	r0, #0
   126b0:	bne	12710 <__assert_fail@plt+0x1840>
   126b4:	cmp	r7, #0
   126b8:	beq	12718 <__assert_fail@plt+0x1848>
   126bc:	str	r7, [sp, #24]
   126c0:	ldr	r3, [sp, #24]
   126c4:	mov	r1, r9
   126c8:	ldr	r2, [sp, #48]	; 0x30
   126cc:	cmp	sl, #2
   126d0:	movne	r3, #0
   126d4:	andeq	r3, r3, #1
   126d8:	cmp	r3, #0
   126dc:	ldr	r3, [sp, #160]	; 0xa0
   126e0:	movne	sl, #4
   126e4:	str	sl, [sp]
   126e8:	str	r3, [sp, #16]
   126ec:	ldr	r3, [sp, #156]	; 0x9c
   126f0:	str	r3, [sp, #12]
   126f4:	mov	r3, #0
   126f8:	str	r3, [sp, #8]
   126fc:	ldr	r3, [sp, #148]	; 0x94
   12700:	bic	r3, r3, #2
   12704:	str	r3, [sp, #4]
   12708:	ldr	r3, [sp, #40]	; 0x28
   1270c:	b	12494 <__assert_fail@plt+0x15c4>
   12710:	mov	r3, #0
   12714:	str	r3, [sp, #64]	; 0x40
   12718:	ldr	r2, [sp, #28]
   1271c:	ldr	r3, [sp, #48]	; 0x30
   12720:	add	r3, r3, r2
   12724:	str	r3, [sp, #80]	; 0x50
   12728:	ldr	r3, [sp, #48]	; 0x30
   1272c:	ldrb	r6, [r3, r2]
   12730:	cmp	r6, #58	; 0x3a
   12734:	bhi	12898 <__assert_fail@plt+0x19c8>
   12738:	cmp	r6, #43	; 0x2b
   1273c:	bcs	12a58 <__assert_fail@plt+0x1b88>
   12740:	cmp	r6, #32
   12744:	beq	12aac <__assert_fail@plt+0x1bdc>
   12748:	bhi	127f0 <__assert_fail@plt+0x1920>
   1274c:	cmp	r6, #9
   12750:	beq	12c54 <__assert_fail@plt+0x1d84>
   12754:	bhi	127b4 <__assert_fail@plt+0x18e4>
   12758:	cmp	r6, #7
   1275c:	beq	12c64 <__assert_fail@plt+0x1d94>
   12760:	bhi	12c80 <__assert_fail@plt+0x1db0>
   12764:	cmp	r6, #0
   12768:	beq	12ac8 <__assert_fail@plt+0x1bf8>
   1276c:	ldr	r3, [sp, #76]	; 0x4c
   12770:	cmp	r3, #1
   12774:	bne	12ccc <__assert_fail@plt+0x1dfc>
   12778:	bl	10dc8 <__ctype_b_loc@plt>
   1277c:	ldr	r2, [r0]
   12780:	sxth	r3, r6
   12784:	lsl	r3, r3, #1
   12788:	ldrh	r5, [r2, r3]
   1278c:	ldr	r3, [sp, #76]	; 0x4c
   12790:	ubfx	r5, r5, #14, #1
   12794:	str	r3, [sp, #56]	; 0x38
   12798:	ldr	r3, [sp, #24]
   1279c:	eor	fp, r5, #1
   127a0:	and	fp, fp, r3
   127a4:	ands	fp, fp, #255	; 0xff
   127a8:	beq	12988 <__assert_fail@plt+0x1ab8>
   127ac:	mov	r5, #0
   127b0:	b	12d78 <__assert_fail@plt+0x1ea8>
   127b4:	cmp	r6, #11
   127b8:	beq	12c88 <__assert_fail@plt+0x1db8>
   127bc:	bcc	12c5c <__assert_fail@plt+0x1d8c>
   127c0:	cmp	r6, #12
   127c4:	beq	12c90 <__assert_fail@plt+0x1dc0>
   127c8:	cmp	r6, #13
   127cc:	moveq	r3, #114	; 0x72
   127d0:	bne	1276c <__assert_fail@plt+0x189c>
   127d4:	cmp	sl, #2
   127d8:	movne	r2, #0
   127dc:	andeq	r2, r7, #1
   127e0:	cmp	r2, #0
   127e4:	beq	12c68 <__assert_fail@plt+0x1d98>
   127e8:	mov	sl, #2
   127ec:	b	126c0 <__assert_fail@plt+0x17f0>
   127f0:	cmp	r6, #37	; 0x25
   127f4:	beq	12a58 <__assert_fail@plt+0x1b88>
   127f8:	bhi	1280c <__assert_fail@plt+0x193c>
   127fc:	cmp	r6, #35	; 0x23
   12800:	beq	12aa0 <__assert_fail@plt+0x1bd0>
   12804:	mov	r5, #0
   12808:	b	12ab0 <__assert_fail@plt+0x1be0>
   1280c:	cmp	r6, #39	; 0x27
   12810:	bne	12804 <__assert_fail@plt+0x1934>
   12814:	cmp	sl, #2
   12818:	ldrne	r5, [sp, #36]	; 0x24
   1281c:	movne	r3, r5
   12820:	strne	r3, [sp, #68]	; 0x44
   12824:	bne	12ba4 <__assert_fail@plt+0x1cd4>
   12828:	cmp	r7, #0
   1282c:	bne	126c0 <__assert_fail@plt+0x17f0>
   12830:	ldr	r3, [sp, #60]	; 0x3c
   12834:	cmp	r9, #0
   12838:	clz	r3, r3
   1283c:	lsr	r3, r3, #5
   12840:	moveq	r3, #0
   12844:	cmp	r3, #0
   12848:	strne	r9, [sp, #60]	; 0x3c
   1284c:	movne	r9, #0
   12850:	bne	12860 <__assert_fail@plt+0x1990>
   12854:	cmp	r9, r4
   12858:	movhi	r3, #39	; 0x27
   1285c:	strbhi	r3, [r8, r4]
   12860:	add	r3, r4, #1
   12864:	ldr	r5, [sp, #36]	; 0x24
   12868:	mov	fp, #0
   1286c:	cmp	r3, r9
   12870:	movcc	r2, #92	; 0x5c
   12874:	str	fp, [sp, #52]	; 0x34
   12878:	strbcc	r2, [r8, r3]
   1287c:	add	r3, r4, #2
   12880:	add	r4, r4, #3
   12884:	cmp	r3, r9
   12888:	str	r5, [sp, #68]	; 0x44
   1288c:	movcc	r2, #39	; 0x27
   12890:	strbcc	r2, [r8, r3]
   12894:	b	12988 <__assert_fail@plt+0x1ab8>
   12898:	cmp	r6, #94	; 0x5e
   1289c:	beq	12804 <__assert_fail@plt+0x1934>
   128a0:	bhi	12a60 <__assert_fail@plt+0x1b90>
   128a4:	cmp	r6, #90	; 0x5a
   128a8:	bhi	12a4c <__assert_fail@plt+0x1b7c>
   128ac:	cmp	r6, #65	; 0x41
   128b0:	bcs	12a58 <__assert_fail@plt+0x1b88>
   128b4:	cmp	r6, #62	; 0x3e
   128b8:	bls	12804 <__assert_fail@plt+0x1934>
   128bc:	cmp	r6, #63	; 0x3f
   128c0:	bne	1276c <__assert_fail@plt+0x189c>
   128c4:	cmp	sl, #2
   128c8:	beq	12bac <__assert_fail@plt+0x1cdc>
   128cc:	cmp	sl, #5
   128d0:	movne	fp, #0
   128d4:	bne	12f7c <__assert_fail@plt+0x20ac>
   128d8:	ldr	r3, [sp, #148]	; 0x94
   128dc:	tst	r3, #4
   128e0:	beq	12bb4 <__assert_fail@plt+0x1ce4>
   128e4:	ldr	r3, [sp, #28]
   128e8:	add	r2, r3, #2
   128ec:	ldr	r3, [sp, #40]	; 0x28
   128f0:	cmp	r2, r3
   128f4:	bcs	12bb4 <__assert_fail@plt+0x1ce4>
   128f8:	ldr	r1, [sp, #28]
   128fc:	ldr	r3, [sp, #48]	; 0x30
   12900:	add	r3, r3, r1
   12904:	ldrb	r1, [r3, #1]
   12908:	cmp	r1, #63	; 0x3f
   1290c:	bne	12bb4 <__assert_fail@plt+0x1ce4>
   12910:	ldr	r3, [sp, #48]	; 0x30
   12914:	ldrb	r6, [r3, r2]
   12918:	sub	r3, r6, #33	; 0x21
   1291c:	uxtb	r3, r3
   12920:	cmp	r3, #29
   12924:	bhi	12f84 <__assert_fail@plt+0x20b4>
   12928:	ldr	r0, [pc, #1804]	; 1303c <__assert_fail@plt+0x216c>
   1292c:	mov	r5, #1
   12930:	ands	r5, r0, r5, lsl r3
   12934:	beq	12f8c <__assert_fail@plt+0x20bc>
   12938:	cmp	r7, #0
   1293c:	bne	126c0 <__assert_fail@plt+0x17f0>
   12940:	cmp	r9, r4
   12944:	add	r3, r4, #1
   12948:	str	r2, [sp, #28]
   1294c:	mov	r5, #0
   12950:	strbhi	r1, [r8, r4]
   12954:	cmp	r9, r3
   12958:	mov	fp, r5
   1295c:	movhi	r1, #34	; 0x22
   12960:	strbhi	r1, [r8, r3]
   12964:	add	r3, r4, #2
   12968:	cmp	r9, r3
   1296c:	movhi	r1, #34	; 0x22
   12970:	strbhi	r1, [r8, r3]
   12974:	add	r3, r4, #3
   12978:	add	r4, r4, #4
   1297c:	cmp	r9, r3
   12980:	movhi	r1, #63	; 0x3f
   12984:	strbhi	r1, [r8, r3]
   12988:	ldr	r3, [sp, #24]
   1298c:	eor	r3, r3, #1
   12990:	cmp	sl, #2
   12994:	orreq	r3, r3, #1
   12998:	eor	r3, r3, #1
   1299c:	orr	r3, r7, r3
   129a0:	tst	r3, #255	; 0xff
   129a4:	beq	129d0 <__assert_fail@plt+0x1b00>
   129a8:	ldr	r3, [sp, #152]	; 0x98
   129ac:	cmp	r3, #0
   129b0:	beq	129d0 <__assert_fail@plt+0x1b00>
   129b4:	ldr	r1, [sp, #152]	; 0x98
   129b8:	ubfx	r2, r6, #5, #8
   129bc:	and	r3, r6, #31
   129c0:	ldr	r2, [r1, r2, lsl #2]
   129c4:	lsr	r3, r2, r3
   129c8:	tst	r3, #1
   129cc:	bne	129dc <__assert_fail@plt+0x1b0c>
   129d0:	ldr	r3, [sp, #64]	; 0x40
   129d4:	cmp	r3, #0
   129d8:	beq	12bd4 <__assert_fail@plt+0x1d04>
   129dc:	sub	r3, sl, #2
   129e0:	cmp	r7, #0
   129e4:	clz	r3, r3
   129e8:	lsr	r3, r3, #5
   129ec:	bne	126c0 <__assert_fail@plt+0x17f0>
   129f0:	ldr	r2, [sp, #52]	; 0x34
   129f4:	eor	r2, r2, #1
   129f8:	ands	r3, r3, r2
   129fc:	beq	12a34 <__assert_fail@plt+0x1b64>
   12a00:	cmp	r9, r4
   12a04:	str	r3, [sp, #52]	; 0x34
   12a08:	movhi	r2, #39	; 0x27
   12a0c:	strbhi	r2, [r8, r4]
   12a10:	add	r2, r4, #1
   12a14:	cmp	r9, r2
   12a18:	movhi	r1, #36	; 0x24
   12a1c:	strbhi	r1, [r8, r2]
   12a20:	add	r2, r4, #2
   12a24:	add	r4, r4, #3
   12a28:	cmp	r9, r2
   12a2c:	movhi	r1, #39	; 0x27
   12a30:	strbhi	r1, [r8, r2]
   12a34:	cmp	r9, r4
   12a38:	ldr	fp, [sp, #36]	; 0x24
   12a3c:	movhi	r3, #92	; 0x5c
   12a40:	strbhi	r3, [r8, r4]
   12a44:	add	r4, r4, #1
   12a48:	b	12bd4 <__assert_fail@plt+0x1d04>
   12a4c:	cmp	r6, #92	; 0x5c
   12a50:	beq	12bbc <__assert_fail@plt+0x1cec>
   12a54:	bls	12804 <__assert_fail@plt+0x1934>
   12a58:	ldr	r5, [sp, #36]	; 0x24
   12a5c:	b	12ba4 <__assert_fail@plt+0x1cd4>
   12a60:	cmp	r6, #122	; 0x7a
   12a64:	bhi	12a84 <__assert_fail@plt+0x1bb4>
   12a68:	cmp	r6, #97	; 0x61
   12a6c:	bcs	12a58 <__assert_fail@plt+0x1b88>
   12a70:	cmp	r6, #95	; 0x5f
   12a74:	beq	12a58 <__assert_fail@plt+0x1b88>
   12a78:	cmp	r6, #96	; 0x60
   12a7c:	bne	1276c <__assert_fail@plt+0x189c>
   12a80:	b	12804 <__assert_fail@plt+0x1934>
   12a84:	cmp	r6, #124	; 0x7c
   12a88:	beq	12804 <__assert_fail@plt+0x1934>
   12a8c:	bcc	12c98 <__assert_fail@plt+0x1dc8>
   12a90:	cmp	r6, #125	; 0x7d
   12a94:	beq	12c98 <__assert_fail@plt+0x1dc8>
   12a98:	cmp	r6, #126	; 0x7e
   12a9c:	bne	1276c <__assert_fail@plt+0x189c>
   12aa0:	ldr	r3, [sp, #28]
   12aa4:	cmp	r3, #0
   12aa8:	bne	12bb4 <__assert_fail@plt+0x1ce4>
   12aac:	ldr	r5, [sp, #36]	; 0x24
   12ab0:	cmp	sl, #2
   12ab4:	movne	fp, #0
   12ab8:	andeq	fp, r7, #1
   12abc:	cmp	fp, #0
   12ac0:	beq	12988 <__assert_fail@plt+0x1ab8>
   12ac4:	b	127e8 <__assert_fail@plt+0x1918>
   12ac8:	ldr	r3, [sp, #24]
   12acc:	cmp	r3, #0
   12ad0:	beq	12b98 <__assert_fail@plt+0x1cc8>
   12ad4:	sub	r2, sl, #2
   12ad8:	cmp	r7, #0
   12adc:	clz	r2, r2
   12ae0:	lsr	r2, r2, #5
   12ae4:	bne	126bc <__assert_fail@plt+0x17ec>
   12ae8:	ldr	r3, [sp, #52]	; 0x34
   12aec:	eor	r3, r3, #1
   12af0:	ands	r2, r2, r3
   12af4:	moveq	r3, r4
   12af8:	beq	12b30 <__assert_fail@plt+0x1c60>
   12afc:	cmp	r9, r4
   12b00:	str	r2, [sp, #52]	; 0x34
   12b04:	movhi	r3, #39	; 0x27
   12b08:	strbhi	r3, [r8, r4]
   12b0c:	add	r3, r4, #1
   12b10:	cmp	r9, r3
   12b14:	movhi	r1, #36	; 0x24
   12b18:	strbhi	r1, [r8, r3]
   12b1c:	add	r3, r4, #2
   12b20:	cmp	r9, r3
   12b24:	movhi	r1, #39	; 0x27
   12b28:	strbhi	r1, [r8, r3]
   12b2c:	add	r3, r4, #3
   12b30:	cmp	r9, r3
   12b34:	add	r4, r3, #1
   12b38:	movhi	r2, #92	; 0x5c
   12b3c:	strbhi	r2, [r8, r3]
   12b40:	cmp	fp, #0
   12b44:	beq	12f6c <__assert_fail@plt+0x209c>
   12b48:	ldr	r2, [sp, #28]
   12b4c:	ldr	r1, [sp, #40]	; 0x28
   12b50:	add	r2, r2, #1
   12b54:	cmp	r2, r1
   12b58:	bcs	12b90 <__assert_fail@plt+0x1cc0>
   12b5c:	ldr	r1, [sp, #48]	; 0x30
   12b60:	mov	r6, #48	; 0x30
   12b64:	ldrb	r2, [r1, r2]
   12b68:	sub	r2, r2, #48	; 0x30
   12b6c:	cmp	r2, #9
   12b70:	bhi	12f7c <__assert_fail@plt+0x20ac>
   12b74:	cmp	r9, r4
   12b78:	add	r2, r3, #2
   12b7c:	strbhi	r6, [r8, r4]
   12b80:	cmp	r9, r2
   12b84:	add	r4, r3, #3
   12b88:	movhi	r1, #48	; 0x30
   12b8c:	strbhi	r1, [r8, r2]
   12b90:	mov	r5, #0
   12b94:	b	12f74 <__assert_fail@plt+0x20a4>
   12b98:	ldr	r3, [sp, #148]	; 0x94
   12b9c:	ands	r5, r3, #1
   12ba0:	bne	12c28 <__assert_fail@plt+0x1d58>
   12ba4:	mov	fp, #0
   12ba8:	b	12988 <__assert_fail@plt+0x1ab8>
   12bac:	cmp	r7, #0
   12bb0:	bne	126c0 <__assert_fail@plt+0x17f0>
   12bb4:	mov	r5, #0
   12bb8:	b	12ba4 <__assert_fail@plt+0x1cd4>
   12bbc:	cmp	sl, #2
   12bc0:	bne	12c34 <__assert_fail@plt+0x1d64>
   12bc4:	cmp	r7, #0
   12bc8:	bne	126c0 <__assert_fail@plt+0x17f0>
   12bcc:	mov	r5, r7
   12bd0:	mov	fp, r7
   12bd4:	ldr	r3, [sp, #52]	; 0x34
   12bd8:	eor	fp, fp, #1
   12bdc:	tst	r3, fp
   12be0:	beq	12c0c <__assert_fail@plt+0x1d3c>
   12be4:	cmp	r9, r4
   12be8:	movhi	r3, #39	; 0x27
   12bec:	strbhi	r3, [r8, r4]
   12bf0:	add	r3, r4, #1
   12bf4:	add	r4, r4, #2
   12bf8:	cmp	r9, r3
   12bfc:	movhi	r2, #39	; 0x27
   12c00:	strbhi	r2, [r8, r3]
   12c04:	mov	r3, #0
   12c08:	str	r3, [sp, #52]	; 0x34
   12c0c:	cmp	r9, r4
   12c10:	ldr	r3, [sp, #72]	; 0x48
   12c14:	strbhi	r6, [r8, r4]
   12c18:	cmp	r5, #0
   12c1c:	add	r4, r4, #1
   12c20:	moveq	r3, #0
   12c24:	str	r3, [sp, #72]	; 0x48
   12c28:	ldr	r3, [sp, #28]
   12c2c:	add	r3, r3, #1
   12c30:	b	123e8 <__assert_fail@plt+0x1518>
   12c34:	ldr	r3, [sp, #24]
   12c38:	and	r3, r3, r7
   12c3c:	tst	r5, r3
   12c40:	moveq	r3, r6
   12c44:	beq	127d4 <__assert_fail@plt+0x1904>
   12c48:	mov	fp, #0
   12c4c:	mov	r5, fp
   12c50:	b	12bd4 <__assert_fail@plt+0x1d04>
   12c54:	mov	r3, #116	; 0x74
   12c58:	b	127d4 <__assert_fail@plt+0x1904>
   12c5c:	mov	r3, #110	; 0x6e
   12c60:	b	127d4 <__assert_fail@plt+0x1904>
   12c64:	mov	r3, #97	; 0x61
   12c68:	ldr	r2, [sp, #24]
   12c6c:	cmp	r2, #0
   12c70:	beq	12bb4 <__assert_fail@plt+0x1ce4>
   12c74:	mov	r6, r3
   12c78:	mov	r5, #0
   12c7c:	b	129dc <__assert_fail@plt+0x1b0c>
   12c80:	mov	r3, #98	; 0x62
   12c84:	b	12c68 <__assert_fail@plt+0x1d98>
   12c88:	mov	r3, #118	; 0x76
   12c8c:	b	12c68 <__assert_fail@plt+0x1d98>
   12c90:	mov	r3, #102	; 0x66
   12c94:	b	12c68 <__assert_fail@plt+0x1d98>
   12c98:	ldr	r3, [sp, #40]	; 0x28
   12c9c:	cmn	r3, #1
   12ca0:	bne	12cc0 <__assert_fail@plt+0x1df0>
   12ca4:	ldr	r3, [sp, #48]	; 0x30
   12ca8:	ldrb	r3, [r3, #1]
   12cac:	adds	r3, r3, #0
   12cb0:	movne	r3, #1
   12cb4:	cmp	r3, #0
   12cb8:	bne	12bb4 <__assert_fail@plt+0x1ce4>
   12cbc:	b	12aa0 <__assert_fail@plt+0x1bd0>
   12cc0:	ldr	r3, [sp, #40]	; 0x28
   12cc4:	subs	r3, r3, #1
   12cc8:	b	12cb0 <__assert_fail@plt+0x1de0>
   12ccc:	mov	r3, #0
   12cd0:	mov	r2, #0
   12cd4:	strd	r2, [sp, #96]	; 0x60
   12cd8:	ldr	r3, [sp, #40]	; 0x28
   12cdc:	cmn	r3, #1
   12ce0:	bne	12cf0 <__assert_fail@plt+0x1e20>
   12ce4:	ldr	r0, [sp, #48]	; 0x30
   12ce8:	bl	10de0 <strlen@plt>
   12cec:	str	r0, [sp, #40]	; 0x28
   12cf0:	ldr	r5, [sp, #36]	; 0x24
   12cf4:	mov	r3, #0
   12cf8:	str	r3, [sp, #56]	; 0x38
   12cfc:	ldr	r3, [sp, #28]
   12d00:	add	r0, sp, #92	; 0x5c
   12d04:	ldr	r1, [sp, #40]	; 0x28
   12d08:	ldr	r2, [sp, #56]	; 0x38
   12d0c:	add	r2, r3, r2
   12d10:	ldr	r3, [sp, #48]	; 0x30
   12d14:	add	fp, r3, r2
   12d18:	sub	r2, r1, r2
   12d1c:	add	r3, sp, #96	; 0x60
   12d20:	mov	r1, fp
   12d24:	bl	140e4 <__assert_fail@plt+0x3214>
   12d28:	subs	r2, r0, #0
   12d2c:	beq	12d6c <__assert_fail@plt+0x1e9c>
   12d30:	cmn	r2, #1
   12d34:	beq	12f40 <__assert_fail@plt+0x2070>
   12d38:	cmn	r2, #2
   12d3c:	bne	12eb0 <__assert_fail@plt+0x1fe0>
   12d40:	ldr	r3, [sp, #28]
   12d44:	ldr	r2, [sp, #56]	; 0x38
   12d48:	add	r3, r3, r2
   12d4c:	ldr	r2, [sp, #40]	; 0x28
   12d50:	cmp	r2, r3
   12d54:	bls	12f40 <__assert_fail@plt+0x2070>
   12d58:	ldr	r2, [sp, #56]	; 0x38
   12d5c:	ldr	r3, [sp, #80]	; 0x50
   12d60:	ldrb	r5, [r3, r2]
   12d64:	cmp	r5, #0
   12d68:	bne	12ea0 <__assert_fail@plt+0x1fd0>
   12d6c:	ldr	r3, [sp, #56]	; 0x38
   12d70:	cmp	r3, #1
   12d74:	bls	12798 <__assert_fail@plt+0x18c8>
   12d78:	ldr	r3, [sp, #28]
   12d7c:	mov	fp, #0
   12d80:	mov	ip, #92	; 0x5c
   12d84:	ldr	r2, [sp, #56]	; 0x38
   12d88:	add	r3, r3, r2
   12d8c:	ldr	r2, [sp, #24]
   12d90:	str	r3, [sp, #36]	; 0x24
   12d94:	eor	r3, r5, #1
   12d98:	and	r3, r3, r2
   12d9c:	mov	r2, #39	; 0x27
   12da0:	uxtb	r3, r3
   12da4:	cmp	r3, #0
   12da8:	beq	12f48 <__assert_fail@plt+0x2078>
   12dac:	sub	r0, sl, #2
   12db0:	cmp	r7, #0
   12db4:	clz	r0, r0
   12db8:	lsr	r0, r0, #5
   12dbc:	bne	126bc <__assert_fail@plt+0x17ec>
   12dc0:	ldr	r1, [sp, #52]	; 0x34
   12dc4:	eor	r1, r1, #1
   12dc8:	ands	r1, r0, r1
   12dcc:	beq	12dfc <__assert_fail@plt+0x1f2c>
   12dd0:	cmp	r9, r4
   12dd4:	add	r0, r4, #1
   12dd8:	str	r1, [sp, #52]	; 0x34
   12ddc:	strbhi	r2, [r8, r4]
   12de0:	cmp	r9, r0
   12de4:	movhi	lr, #36	; 0x24
   12de8:	strbhi	lr, [r8, r0]
   12dec:	add	r0, r4, #2
   12df0:	add	r4, r4, #3
   12df4:	cmp	r9, r0
   12df8:	strbhi	r2, [r8, r0]
   12dfc:	cmp	r9, r4
   12e00:	add	r0, r4, #1
   12e04:	mov	fp, r3
   12e08:	strbhi	ip, [r8, r4]
   12e0c:	cmp	r9, r0
   12e10:	lsrhi	r1, r6, #6
   12e14:	addhi	r1, r1, #48	; 0x30
   12e18:	strbhi	r1, [r8, r0]
   12e1c:	add	r0, r4, #2
   12e20:	add	r4, r4, #3
   12e24:	cmp	r9, r0
   12e28:	ubfxhi	r1, r6, #3, #3
   12e2c:	and	r6, r6, #7
   12e30:	add	r6, r6, #48	; 0x30
   12e34:	addhi	r1, r1, #48	; 0x30
   12e38:	strbhi	r1, [r8, r0]
   12e3c:	eor	r0, fp, #1
   12e40:	ldr	r1, [sp, #28]
   12e44:	ldr	lr, [sp, #52]	; 0x34
   12e48:	add	r1, r1, #1
   12e4c:	and	r0, r0, lr
   12e50:	ldr	lr, [sp, #36]	; 0x24
   12e54:	cmp	r1, lr
   12e58:	bcs	12bd4 <__assert_fail@plt+0x1d04>
   12e5c:	cmp	r0, #0
   12e60:	beq	12e84 <__assert_fail@plt+0x1fb4>
   12e64:	cmp	r9, r4
   12e68:	add	r0, r4, #1
   12e6c:	strbhi	r2, [r8, r4]
   12e70:	cmp	r9, r0
   12e74:	add	r4, r4, #2
   12e78:	strbhi	r2, [r8, r0]
   12e7c:	mov	r0, #0
   12e80:	str	r0, [sp, #52]	; 0x34
   12e84:	ldr	r0, [sp, #48]	; 0x30
   12e88:	cmp	r9, r4
   12e8c:	str	r1, [sp, #28]
   12e90:	strbhi	r6, [r8, r4]
   12e94:	add	r4, r4, #1
   12e98:	ldrb	r6, [r0, r1]
   12e9c:	b	12da4 <__assert_fail@plt+0x1ed4>
   12ea0:	ldr	r3, [sp, #56]	; 0x38
   12ea4:	add	r3, r3, #1
   12ea8:	str	r3, [sp, #56]	; 0x38
   12eac:	b	12d40 <__assert_fail@plt+0x1e70>
   12eb0:	cmp	sl, #2
   12eb4:	movne	r3, #0
   12eb8:	andeq	r3, r7, #1
   12ebc:	cmp	r3, #0
   12ec0:	movne	r1, #1
   12ec4:	bne	12f20 <__assert_fail@plt+0x2050>
   12ec8:	ldr	r0, [sp, #92]	; 0x5c
   12ecc:	str	r2, [sp, #84]	; 0x54
   12ed0:	bl	10d38 <iswprint@plt>
   12ed4:	ldr	r3, [sp, #56]	; 0x38
   12ed8:	cmp	r0, #0
   12edc:	add	r0, sp, #96	; 0x60
   12ee0:	moveq	r5, #0
   12ee4:	ldr	r2, [sp, #84]	; 0x54
   12ee8:	add	r3, r3, r2
   12eec:	str	r3, [sp, #56]	; 0x38
   12ef0:	bl	10ce4 <mbsinit@plt>
   12ef4:	cmp	r0, #0
   12ef8:	beq	12cfc <__assert_fail@plt+0x1e2c>
   12efc:	b	12d6c <__assert_fail@plt+0x1e9c>
   12f00:	ldrb	r3, [fp, #1]!
   12f04:	cmp	r3, #94	; 0x5e
   12f08:	beq	127e8 <__assert_fail@plt+0x1918>
   12f0c:	bhi	12f2c <__assert_fail@plt+0x205c>
   12f10:	sub	r3, r3, #91	; 0x5b
   12f14:	cmp	r3, #1
   12f18:	bls	127e8 <__assert_fail@plt+0x1918>
   12f1c:	add	r1, r1, #1
   12f20:	cmp	r1, r2
   12f24:	bne	12f00 <__assert_fail@plt+0x2030>
   12f28:	b	12ec8 <__assert_fail@plt+0x1ff8>
   12f2c:	cmp	r3, #96	; 0x60
   12f30:	beq	127e8 <__assert_fail@plt+0x1918>
   12f34:	cmp	r3, #124	; 0x7c
   12f38:	bne	12f1c <__assert_fail@plt+0x204c>
   12f3c:	b	127e8 <__assert_fail@plt+0x1918>
   12f40:	mov	r5, #0
   12f44:	b	12d6c <__assert_fail@plt+0x1e9c>
   12f48:	ldr	r1, [sp, #64]	; 0x40
   12f4c:	cmp	r1, #0
   12f50:	beq	12e3c <__assert_fail@plt+0x1f6c>
   12f54:	cmp	r9, r4
   12f58:	mov	r1, #0
   12f5c:	strbhi	ip, [r8, r4]
   12f60:	add	r4, r4, #1
   12f64:	str	r1, [sp, #64]	; 0x40
   12f68:	b	12e3c <__assert_fail@plt+0x1f6c>
   12f6c:	mov	r5, fp
   12f70:	ldr	fp, [sp, #24]
   12f74:	mov	r6, #48	; 0x30
   12f78:	b	12988 <__assert_fail@plt+0x1ab8>
   12f7c:	mov	r5, #0
   12f80:	b	12988 <__assert_fail@plt+0x1ab8>
   12f84:	mov	r6, r1
   12f88:	b	12bb4 <__assert_fail@plt+0x1ce4>
   12f8c:	mov	r6, r1
   12f90:	b	12ba4 <__assert_fail@plt+0x1cd4>
   12f94:	ldr	r2, [sp, #28]
   12f98:	ldr	r3, [sp, #40]	; 0x28
   12f9c:	subs	r3, r3, r2
   12fa0:	movne	r3, #1
   12fa4:	b	1240c <__assert_fail@plt+0x153c>
   12fa8:	ldr	r3, [sp, #60]	; 0x3c
   12fac:	mov	sl, #2
   12fb0:	ldr	r7, [sp, #72]	; 0x48
   12fb4:	adds	r6, r3, #0
   12fb8:	mov	r5, r3
   12fbc:	movne	r6, #1
   12fc0:	cmp	r9, #0
   12fc4:	movne	r6, #0
   12fc8:	cmp	r6, #0
   12fcc:	bne	1239c <__assert_fail@plt+0x14cc>
   12fd0:	ldr	r3, [sp, #68]	; 0x44
   12fd4:	ldr	r2, [sp, #44]	; 0x2c
   12fd8:	cmp	r2, #0
   12fdc:	moveq	r3, #0
   12fe0:	andne	r3, r3, #1
   12fe4:	cmp	r3, #0
   12fe8:	movne	r3, r2
   12fec:	subne	r3, r3, #1
   12ff0:	bne	13020 <__assert_fail@plt+0x2150>
   12ff4:	cmp	r9, r4
   12ff8:	movhi	r3, #0
   12ffc:	strbhi	r3, [r8, r4]
   13000:	mov	r0, r4
   13004:	add	sp, sp, #108	; 0x6c
   13008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1300c:	mov	r3, r7
   13010:	b	12fd4 <__assert_fail@plt+0x2104>
   13014:	cmp	r9, r4
   13018:	strbhi	r2, [r8, r4]
   1301c:	add	r4, r4, #1
   13020:	ldrb	r2, [r3, #1]!
   13024:	cmp	r2, #0
   13028:	bne	13014 <__assert_fail@plt+0x2144>
   1302c:	b	12ff4 <__assert_fail@plt+0x2124>
   13030:	andeq	r4, r1, r0, ror ip
   13034:	andeq	r4, r1, r1, lsl #25
   13038:	strdeq	r4, [r1], -r3
   1303c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13044:	sub	sp, sp, #52	; 0x34
   13048:	mov	r6, r0
   1304c:	mov	r5, r3
   13050:	mov	r8, r1
   13054:	mov	r9, r2
   13058:	bl	10dec <__errno_location@plt>
   1305c:	ldr	r3, [r0]
   13060:	cmn	r6, #-2147483647	; 0x80000001
   13064:	str	r0, [sp, #24]
   13068:	ldr	r7, [pc, #368]	; 131e0 <__assert_fail@plt+0x2310>
   1306c:	str	r3, [sp, #32]
   13070:	movne	r3, #0
   13074:	moveq	r3, #1
   13078:	orrs	r3, r3, r6, lsr #31
   1307c:	ldr	r4, [r7]
   13080:	beq	13088 <__assert_fail@plt+0x21b8>
   13084:	bl	10eac <abort@plt>
   13088:	ldr	r2, [r7, #4]
   1308c:	cmp	r2, r6
   13090:	bgt	13100 <__assert_fail@plt+0x2230>
   13094:	add	sl, r7, #8
   13098:	mov	r3, #8
   1309c:	cmp	r4, sl
   130a0:	add	r1, sp, #44	; 0x2c
   130a4:	str	r2, [sp, #44]	; 0x2c
   130a8:	sub	r2, r6, r2
   130ac:	movne	r0, r4
   130b0:	moveq	r0, #0
   130b4:	add	r2, r2, #1
   130b8:	str	r3, [sp]
   130bc:	mvn	r3, #-2147483648	; 0x80000000
   130c0:	bl	13d94 <__assert_fail@plt+0x2ec4>
   130c4:	cmp	r4, sl
   130c8:	mov	fp, r0
   130cc:	str	r0, [r7]
   130d0:	ldmeq	r4, {r0, r1}
   130d4:	mov	r4, fp
   130d8:	ldr	r2, [sp, #44]	; 0x2c
   130dc:	stmeq	fp, {r0, r1}
   130e0:	mov	r1, #0
   130e4:	ldr	r0, [r7, #4]
   130e8:	sub	r2, r2, r0
   130ec:	add	r0, fp, r0, lsl #3
   130f0:	lsl	r2, r2, #3
   130f4:	bl	10e04 <memset@plt>
   130f8:	ldr	r3, [sp, #44]	; 0x2c
   130fc:	str	r3, [r7, #4]
   13100:	ldr	r3, [r5, #4]
   13104:	add	sl, r4, r6, lsl #3
   13108:	mov	r2, r8
   1310c:	ldr	fp, [r4, r6, lsl #3]
   13110:	ldr	r7, [sl, #4]
   13114:	orr	r3, r3, #1
   13118:	str	r3, [sp, #28]
   1311c:	add	r3, r5, #8
   13120:	mov	r1, fp
   13124:	str	r3, [sp, #36]	; 0x24
   13128:	mov	r0, r7
   1312c:	ldr	r3, [r5, #44]	; 0x2c
   13130:	str	r3, [sp, #16]
   13134:	ldr	r3, [r5, #40]	; 0x28
   13138:	str	r3, [sp, #12]
   1313c:	add	r3, r5, #8
   13140:	str	r3, [sp, #8]
   13144:	ldr	r3, [sp, #28]
   13148:	str	r3, [sp, #4]
   1314c:	ldr	r3, [r5]
   13150:	str	r3, [sp]
   13154:	mov	r3, r9
   13158:	bl	12350 <__assert_fail@plt+0x1480>
   1315c:	cmp	fp, r0
   13160:	bhi	131c8 <__assert_fail@plt+0x22f8>
   13164:	ldr	r3, [pc, #120]	; 131e4 <__assert_fail@plt+0x2314>
   13168:	add	fp, r0, #1
   1316c:	str	fp, [r4, r6, lsl #3]
   13170:	cmp	r7, r3
   13174:	beq	13180 <__assert_fail@plt+0x22b0>
   13178:	mov	r0, r7
   1317c:	bl	12060 <__assert_fail@plt+0x1190>
   13180:	mov	r0, fp
   13184:	bl	13c84 <__assert_fail@plt+0x2db4>
   13188:	ldr	r3, [r5, #44]	; 0x2c
   1318c:	mov	r2, r8
   13190:	mov	r1, fp
   13194:	str	r0, [sl, #4]
   13198:	mov	r7, r0
   1319c:	str	r3, [sp, #16]
   131a0:	ldr	r3, [r5, #40]	; 0x28
   131a4:	str	r3, [sp, #12]
   131a8:	add	r3, r5, #8
   131ac:	str	r3, [sp, #8]
   131b0:	ldr	r3, [sp, #28]
   131b4:	str	r3, [sp, #4]
   131b8:	ldr	r3, [r5]
   131bc:	str	r3, [sp]
   131c0:	mov	r3, r9
   131c4:	bl	12350 <__assert_fail@plt+0x1480>
   131c8:	ldr	r3, [sp, #24]
   131cc:	mov	r0, r7
   131d0:	ldr	r2, [sp, #32]
   131d4:	str	r2, [r3]
   131d8:	add	sp, sp, #52	; 0x34
   131dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e0:	strdeq	r6, [r2], -r4
   131e4:	andeq	r6, r2, r8, lsr #3
   131e8:	push	{r4, r5, r6, lr}
   131ec:	mov	r5, r0
   131f0:	bl	10dec <__errno_location@plt>
   131f4:	mov	r4, r0
   131f8:	cmp	r5, #0
   131fc:	ldr	r0, [pc, #20]	; 13218 <__assert_fail@plt+0x2348>
   13200:	mov	r1, #48	; 0x30
   13204:	movne	r0, r5
   13208:	ldr	r6, [r4]
   1320c:	bl	13e84 <__assert_fail@plt+0x2fb4>
   13210:	str	r6, [r4]
   13214:	pop	{r4, r5, r6, pc}
   13218:	andeq	r6, r2, r8, lsr #5
   1321c:	ldr	r3, [pc, #12]	; 13230 <__assert_fail@plt+0x2360>
   13220:	cmp	r0, #0
   13224:	moveq	r0, r3
   13228:	ldr	r0, [r0]
   1322c:	bx	lr
   13230:	andeq	r6, r2, r8, lsr #5
   13234:	ldr	r3, [pc, #12]	; 13248 <__assert_fail@plt+0x2378>
   13238:	cmp	r0, #0
   1323c:	moveq	r0, r3
   13240:	str	r1, [r0]
   13244:	bx	lr
   13248:	andeq	r6, r2, r8, lsr #5
   1324c:	ldr	r3, [pc, #52]	; 13288 <__assert_fail@plt+0x23b8>
   13250:	cmp	r0, #0
   13254:	push	{lr}		; (str lr, [sp, #-4]!)
   13258:	lsr	lr, r1, #5
   1325c:	and	r1, r1, #31
   13260:	moveq	r0, r3
   13264:	add	r3, r0, #8
   13268:	ldr	ip, [r3, lr, lsl #2]
   1326c:	lsr	r0, ip, r1
   13270:	eor	r2, r2, r0
   13274:	and	r0, r0, #1
   13278:	and	r2, r2, #1
   1327c:	eor	r1, ip, r2, lsl r1
   13280:	str	r1, [r3, lr, lsl #2]
   13284:	pop	{pc}		; (ldr pc, [sp], #4)
   13288:	andeq	r6, r2, r8, lsr #5
   1328c:	ldr	r3, [pc, #16]	; 132a4 <__assert_fail@plt+0x23d4>
   13290:	cmp	r0, #0
   13294:	movne	r3, r0
   13298:	ldr	r0, [r3, #4]
   1329c:	str	r1, [r3, #4]
   132a0:	bx	lr
   132a4:	andeq	r6, r2, r8, lsr #5
   132a8:	ldr	r3, [pc, #44]	; 132dc <__assert_fail@plt+0x240c>
   132ac:	cmp	r0, #0
   132b0:	moveq	r0, r3
   132b4:	mov	r3, #10
   132b8:	cmp	r2, #0
   132bc:	cmpne	r1, #0
   132c0:	str	r3, [r0]
   132c4:	bne	132d0 <__assert_fail@plt+0x2400>
   132c8:	push	{r4, lr}
   132cc:	bl	10eac <abort@plt>
   132d0:	str	r1, [r0, #40]	; 0x28
   132d4:	str	r2, [r0, #44]	; 0x2c
   132d8:	bx	lr
   132dc:	andeq	r6, r2, r8, lsr #5
   132e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132e4:	sub	sp, sp, #24
   132e8:	mov	sl, r3
   132ec:	mov	r7, r0
   132f0:	mov	r8, r1
   132f4:	mov	r9, r2
   132f8:	ldr	r4, [sp, #56]	; 0x38
   132fc:	ldr	r3, [pc, #88]	; 1335c <__assert_fail@plt+0x248c>
   13300:	cmp	r4, #0
   13304:	moveq	r4, r3
   13308:	bl	10dec <__errno_location@plt>
   1330c:	ldr	r3, [r4, #44]	; 0x2c
   13310:	mov	r5, r0
   13314:	mov	r2, r9
   13318:	mov	r1, r8
   1331c:	mov	r0, r7
   13320:	ldr	r6, [r5]
   13324:	str	r3, [sp, #16]
   13328:	ldr	r3, [r4, #40]	; 0x28
   1332c:	str	r3, [sp, #12]
   13330:	add	r3, r4, #8
   13334:	str	r3, [sp, #8]
   13338:	ldr	r3, [r4, #4]
   1333c:	str	r3, [sp, #4]
   13340:	ldr	r3, [r4]
   13344:	str	r3, [sp]
   13348:	mov	r3, sl
   1334c:	bl	12350 <__assert_fail@plt+0x1480>
   13350:	str	r6, [r5]
   13354:	add	sp, sp, #24
   13358:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1335c:	andeq	r6, r2, r8, lsr #5
   13360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13364:	cmp	r3, #0
   13368:	sub	sp, sp, #44	; 0x2c
   1336c:	mov	r6, r2
   13370:	mov	sl, r1
   13374:	mov	r9, r0
   13378:	ldr	r4, [pc, #176]	; 13430 <__assert_fail@plt+0x2560>
   1337c:	movne	r4, r3
   13380:	bl	10dec <__errno_location@plt>
   13384:	ldr	r3, [r0]
   13388:	mov	r1, #0
   1338c:	mov	r2, r9
   13390:	mov	r8, r0
   13394:	mov	r0, r1
   13398:	ldr	r5, [r4, #4]
   1339c:	add	fp, r4, #8
   133a0:	str	r3, [sp, #28]
   133a4:	ldr	r3, [r4, #44]	; 0x2c
   133a8:	cmp	r6, #0
   133ac:	orreq	r5, r5, #1
   133b0:	str	r3, [sp, #16]
   133b4:	ldr	r3, [r4, #40]	; 0x28
   133b8:	stmib	sp, {r5, fp}
   133bc:	str	r3, [sp, #12]
   133c0:	ldr	r3, [r4]
   133c4:	str	r3, [sp]
   133c8:	mov	r3, sl
   133cc:	bl	12350 <__assert_fail@plt+0x1480>
   133d0:	add	r1, r0, #1
   133d4:	mov	r7, r0
   133d8:	mov	r0, r1
   133dc:	str	r1, [sp, #36]	; 0x24
   133e0:	bl	13c84 <__assert_fail@plt+0x2db4>
   133e4:	ldr	r3, [r4, #44]	; 0x2c
   133e8:	mov	r2, r9
   133ec:	ldr	r1, [sp, #36]	; 0x24
   133f0:	str	r3, [sp, #16]
   133f4:	ldr	r3, [r4, #40]	; 0x28
   133f8:	stmib	sp, {r5, fp}
   133fc:	str	r0, [sp, #32]
   13400:	str	r3, [sp, #12]
   13404:	ldr	r3, [r4]
   13408:	str	r3, [sp]
   1340c:	mov	r3, sl
   13410:	bl	12350 <__assert_fail@plt+0x1480>
   13414:	ldr	r3, [sp, #28]
   13418:	cmp	r6, #0
   1341c:	ldr	r0, [sp, #32]
   13420:	str	r3, [r8]
   13424:	strne	r7, [r6]
   13428:	add	sp, sp, #44	; 0x2c
   1342c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13430:	andeq	r6, r2, r8, lsr #5
   13434:	mov	r3, r2
   13438:	mov	r2, #0
   1343c:	b	13360 <__assert_fail@plt+0x2490>
   13440:	push	{r4, r5, r6, r7, r8, lr}
   13444:	mov	r6, #1
   13448:	ldr	r4, [pc, #100]	; 134b4 <__assert_fail@plt+0x25e4>
   1344c:	ldr	r5, [r4]
   13450:	add	r7, r5, #4
   13454:	ldr	r3, [r4, #4]
   13458:	cmp	r3, r6
   1345c:	bgt	134a4 <__assert_fail@plt+0x25d4>
   13460:	ldr	r6, [pc, #80]	; 134b8 <__assert_fail@plt+0x25e8>
   13464:	ldr	r0, [r5, #4]
   13468:	cmp	r0, r6
   1346c:	beq	13480 <__assert_fail@plt+0x25b0>
   13470:	bl	12060 <__assert_fail@plt+0x1190>
   13474:	mov	r3, #256	; 0x100
   13478:	str	r3, [r4, #8]
   1347c:	str	r6, [r4, #12]
   13480:	ldr	r6, [pc, #52]	; 134bc <__assert_fail@plt+0x25ec>
   13484:	cmp	r5, r6
   13488:	beq	13498 <__assert_fail@plt+0x25c8>
   1348c:	mov	r0, r5
   13490:	bl	12060 <__assert_fail@plt+0x1190>
   13494:	str	r6, [r4]
   13498:	mov	r3, #1
   1349c:	str	r3, [r4, #4]
   134a0:	pop	{r4, r5, r6, r7, r8, pc}
   134a4:	ldr	r0, [r7, r6, lsl #3]
   134a8:	add	r6, r6, #1
   134ac:	bl	12060 <__assert_fail@plt+0x1190>
   134b0:	b	13454 <__assert_fail@plt+0x2584>
   134b4:	strdeq	r6, [r2], -r4
   134b8:	andeq	r6, r2, r8, lsr #3
   134bc:	strdeq	r6, [r2], -ip
   134c0:	ldr	r3, [pc, #4]	; 134cc <__assert_fail@plt+0x25fc>
   134c4:	mvn	r2, #0
   134c8:	b	13040 <__assert_fail@plt+0x2170>
   134cc:	andeq	r6, r2, r8, lsr #5
   134d0:	ldr	r3, [pc]	; 134d8 <__assert_fail@plt+0x2608>
   134d4:	b	13040 <__assert_fail@plt+0x2170>
   134d8:	andeq	r6, r2, r8, lsr #5
   134dc:	mov	r1, r0
   134e0:	mov	r0, #0
   134e4:	b	134c0 <__assert_fail@plt+0x25f0>
   134e8:	mov	r2, r1
   134ec:	mov	r1, r0
   134f0:	mov	r0, #0
   134f4:	b	134d0 <__assert_fail@plt+0x2600>
   134f8:	push	{r4, r5, lr}
   134fc:	sub	sp, sp, #52	; 0x34
   13500:	mov	r5, r2
   13504:	mov	r4, r0
   13508:	mov	r0, sp
   1350c:	bl	121f4 <__assert_fail@plt+0x1324>
   13510:	mov	r3, sp
   13514:	mvn	r2, #0
   13518:	mov	r1, r5
   1351c:	mov	r0, r4
   13520:	bl	13040 <__assert_fail@plt+0x2170>
   13524:	add	sp, sp, #52	; 0x34
   13528:	pop	{r4, r5, pc}
   1352c:	push	{r4, r5, r6, lr}
   13530:	sub	sp, sp, #48	; 0x30
   13534:	mov	r5, r2
   13538:	mov	r6, r3
   1353c:	mov	r4, r0
   13540:	mov	r0, sp
   13544:	bl	121f4 <__assert_fail@plt+0x1324>
   13548:	mov	r3, sp
   1354c:	mov	r2, r6
   13550:	mov	r1, r5
   13554:	mov	r0, r4
   13558:	bl	13040 <__assert_fail@plt+0x2170>
   1355c:	add	sp, sp, #48	; 0x30
   13560:	pop	{r4, r5, r6, pc}
   13564:	mov	r2, r1
   13568:	mov	r1, r0
   1356c:	mov	r0, #0
   13570:	b	134f8 <__assert_fail@plt+0x2628>
   13574:	mov	r3, r2
   13578:	mov	r2, r1
   1357c:	mov	r1, r0
   13580:	mov	r0, #0
   13584:	b	1352c <__assert_fail@plt+0x265c>
   13588:	push	{r4, r5, r6, lr}
   1358c:	mov	r4, r0
   13590:	mov	r5, r1
   13594:	mov	r6, r2
   13598:	sub	sp, sp, #48	; 0x30
   1359c:	mov	ip, sp
   135a0:	ldr	lr, [pc, #64]	; 135e8 <__assert_fail@plt+0x2718>
   135a4:	ldm	lr!, {r0, r1, r2, r3}
   135a8:	stmia	ip!, {r0, r1, r2, r3}
   135ac:	ldm	lr!, {r0, r1, r2, r3}
   135b0:	stmia	ip!, {r0, r1, r2, r3}
   135b4:	ldm	lr, {r0, r1, r2, r3}
   135b8:	stm	ip, {r0, r1, r2, r3}
   135bc:	mov	r1, r6
   135c0:	mov	r2, #1
   135c4:	mov	r0, sp
   135c8:	bl	1324c <__assert_fail@plt+0x237c>
   135cc:	mov	r3, sp
   135d0:	mov	r2, r5
   135d4:	mov	r1, r4
   135d8:	mov	r0, #0
   135dc:	bl	13040 <__assert_fail@plt+0x2170>
   135e0:	add	sp, sp, #48	; 0x30
   135e4:	pop	{r4, r5, r6, pc}
   135e8:	andeq	r6, r2, r8, lsr #5
   135ec:	mov	r2, r1
   135f0:	mvn	r1, #0
   135f4:	b	13588 <__assert_fail@plt+0x26b8>
   135f8:	mov	r1, #58	; 0x3a
   135fc:	b	135ec <__assert_fail@plt+0x271c>
   13600:	mov	r2, #58	; 0x3a
   13604:	b	13588 <__assert_fail@plt+0x26b8>
   13608:	push	{r4, r5, lr}
   1360c:	sub	sp, sp, #100	; 0x64
   13610:	mov	r4, r0
   13614:	mov	r0, sp
   13618:	mov	r5, r2
   1361c:	bl	121f4 <__assert_fail@plt+0x1324>
   13620:	mov	ip, sp
   13624:	add	lr, sp, #48	; 0x30
   13628:	ldm	ip!, {r0, r1, r2, r3}
   1362c:	stmia	lr!, {r0, r1, r2, r3}
   13630:	ldm	ip!, {r0, r1, r2, r3}
   13634:	stmia	lr!, {r0, r1, r2, r3}
   13638:	ldm	ip, {r0, r1, r2, r3}
   1363c:	stm	lr, {r0, r1, r2, r3}
   13640:	mov	r2, #1
   13644:	mov	r1, #58	; 0x3a
   13648:	add	r0, sp, #48	; 0x30
   1364c:	bl	1324c <__assert_fail@plt+0x237c>
   13650:	add	r3, sp, #48	; 0x30
   13654:	mvn	r2, #0
   13658:	mov	r1, r5
   1365c:	mov	r0, r4
   13660:	bl	13040 <__assert_fail@plt+0x2170>
   13664:	add	sp, sp, #100	; 0x64
   13668:	pop	{r4, r5, pc}
   1366c:	push	{r4, r5, r6, r7, lr}
   13670:	mov	r4, r0
   13674:	mov	r6, r1
   13678:	mov	r7, r2
   1367c:	mov	r5, r3
   13680:	sub	sp, sp, #52	; 0x34
   13684:	ldr	lr, [pc, #68]	; 136d0 <__assert_fail@plt+0x2800>
   13688:	mov	ip, sp
   1368c:	ldm	lr!, {r0, r1, r2, r3}
   13690:	stmia	ip!, {r0, r1, r2, r3}
   13694:	ldm	lr!, {r0, r1, r2, r3}
   13698:	stmia	ip!, {r0, r1, r2, r3}
   1369c:	ldm	lr, {r0, r1, r2, r3}
   136a0:	stm	ip, {r0, r1, r2, r3}
   136a4:	mov	r2, r7
   136a8:	mov	r1, r6
   136ac:	mov	r0, sp
   136b0:	bl	132a8 <__assert_fail@plt+0x23d8>
   136b4:	ldr	r2, [sp, #72]	; 0x48
   136b8:	mov	r3, sp
   136bc:	mov	r1, r5
   136c0:	mov	r0, r4
   136c4:	bl	13040 <__assert_fail@plt+0x2170>
   136c8:	add	sp, sp, #52	; 0x34
   136cc:	pop	{r4, r5, r6, r7, pc}
   136d0:	andeq	r6, r2, r8, lsr #5
   136d4:	mvn	ip, #0
   136d8:	push	{r0, r1, r2, lr}
   136dc:	str	ip, [sp]
   136e0:	bl	1366c <__assert_fail@plt+0x279c>
   136e4:	add	sp, sp, #12
   136e8:	pop	{pc}		; (ldr pc, [sp], #4)
   136ec:	mov	r3, r2
   136f0:	mov	r2, r1
   136f4:	mov	r1, r0
   136f8:	mov	r0, #0
   136fc:	b	136d4 <__assert_fail@plt+0x2804>
   13700:	push	{r0, r1, r2, lr}
   13704:	str	r3, [sp]
   13708:	mov	r3, r2
   1370c:	mov	r2, r1
   13710:	mov	r1, r0
   13714:	mov	r0, #0
   13718:	bl	1366c <__assert_fail@plt+0x279c>
   1371c:	add	sp, sp, #12
   13720:	pop	{pc}		; (ldr pc, [sp], #4)
   13724:	ldr	r3, [pc]	; 1372c <__assert_fail@plt+0x285c>
   13728:	b	13040 <__assert_fail@plt+0x2170>
   1372c:	andeq	r6, r2, r4, lsl #2
   13730:	mov	r2, r1
   13734:	mov	r1, r0
   13738:	mov	r0, #0
   1373c:	b	13724 <__assert_fail@plt+0x2854>
   13740:	mvn	r2, #0
   13744:	b	13724 <__assert_fail@plt+0x2854>
   13748:	mov	r1, r0
   1374c:	mov	r0, #0
   13750:	b	13740 <__assert_fail@plt+0x2870>
   13754:	push	{r4, r5, r6, lr}
   13758:	cmp	r1, #0
   1375c:	sub	sp, sp, #32
   13760:	mov	r5, r0
   13764:	ldr	r4, [sp, #48]	; 0x30
   13768:	ldr	r6, [sp, #52]	; 0x34
   1376c:	beq	13820 <__assert_fail@plt+0x2950>
   13770:	strd	r2, [sp]
   13774:	mov	r3, r1
   13778:	mov	r1, #1
   1377c:	ldr	r2, [pc, #856]	; 13adc <__assert_fail@plt+0x2c0c>
   13780:	bl	10e28 <__fprintf_chk@plt>
   13784:	mov	r2, #5
   13788:	ldr	r1, [pc, #848]	; 13ae0 <__assert_fail@plt+0x2c10>
   1378c:	mov	r0, #0
   13790:	bl	10d14 <dcgettext@plt>
   13794:	movw	r3, #2022	; 0x7e6
   13798:	ldr	r2, [pc, #836]	; 13ae4 <__assert_fail@plt+0x2c14>
   1379c:	mov	r1, #1
   137a0:	str	r3, [sp]
   137a4:	mov	r3, r0
   137a8:	mov	r0, r5
   137ac:	bl	10e28 <__fprintf_chk@plt>
   137b0:	mov	r1, r5
   137b4:	mov	r0, #10
   137b8:	bl	10cfc <fputc_unlocked@plt>
   137bc:	mov	r2, #5
   137c0:	ldr	r1, [pc, #800]	; 13ae8 <__assert_fail@plt+0x2c18>
   137c4:	mov	r0, #0
   137c8:	bl	10d14 <dcgettext@plt>
   137cc:	mov	r2, r0
   137d0:	mov	r1, #1
   137d4:	ldr	r3, [pc, #784]	; 13aec <__assert_fail@plt+0x2c1c>
   137d8:	mov	r0, r5
   137dc:	bl	10e28 <__fprintf_chk@plt>
   137e0:	mov	r1, r5
   137e4:	mov	r0, #10
   137e8:	bl	10cfc <fputc_unlocked@plt>
   137ec:	cmp	r6, #9
   137f0:	ldrls	pc, [pc, r6, lsl #2]
   137f4:	b	13ad0 <__assert_fail@plt+0x2c00>
   137f8:	andeq	r3, r1, r0, lsl r9
   137fc:	andeq	r3, r1, r8, lsr r8
   13800:	andeq	r3, r1, r4, ror #16
   13804:	muleq	r1, r8, r8
   13808:	ldrdeq	r3, [r1], -r4
   1380c:	andeq	r3, r1, r8, lsl r9
   13810:	andeq	r3, r1, r0, ror #18
   13814:			; <UNDEFINED> instruction: 0x000139b0
   13818:	andeq	r3, r1, r8, lsl #20
   1381c:	andeq	r3, r1, r8, ror #20
   13820:	mov	r1, #1
   13824:	str	r3, [sp]
   13828:	mov	r3, r2
   1382c:	ldr	r2, [pc, #700]	; 13af0 <__assert_fail@plt+0x2c20>
   13830:	bl	10e28 <__fprintf_chk@plt>
   13834:	b	13784 <__assert_fail@plt+0x28b4>
   13838:	mov	r2, #5
   1383c:	ldr	r1, [pc, #688]	; 13af4 <__assert_fail@plt+0x2c24>
   13840:	mov	r0, #0
   13844:	bl	10d14 <dcgettext@plt>
   13848:	ldr	r3, [r4]
   1384c:	mov	r2, r0
   13850:	mov	r1, #1
   13854:	mov	r0, r5
   13858:	add	sp, sp, #32
   1385c:	pop	{r4, r5, r6, lr}
   13860:	b	10e28 <__fprintf_chk@plt>
   13864:	mov	r2, #5
   13868:	ldr	r1, [pc, #648]	; 13af8 <__assert_fail@plt+0x2c28>
   1386c:	mov	r0, #0
   13870:	bl	10d14 <dcgettext@plt>
   13874:	ldr	r3, [r4, #4]
   13878:	mov	r2, r0
   1387c:	mov	r1, #1
   13880:	mov	r0, r5
   13884:	str	r3, [sp, #48]	; 0x30
   13888:	ldr	r3, [r4]
   1388c:	add	sp, sp, #32
   13890:	pop	{r4, r5, r6, lr}
   13894:	b	10e28 <__fprintf_chk@plt>
   13898:	mov	r2, #5
   1389c:	ldr	r1, [pc, #600]	; 13afc <__assert_fail@plt+0x2c2c>
   138a0:	mov	r0, #0
   138a4:	bl	10d14 <dcgettext@plt>
   138a8:	ldr	r3, [r4, #8]
   138ac:	mov	r2, r0
   138b0:	mov	r1, #1
   138b4:	mov	r0, r5
   138b8:	str	r3, [sp, #52]	; 0x34
   138bc:	ldr	r3, [r4, #4]
   138c0:	str	r3, [sp, #48]	; 0x30
   138c4:	ldr	r3, [r4]
   138c8:	add	sp, sp, #32
   138cc:	pop	{r4, r5, r6, lr}
   138d0:	b	10e28 <__fprintf_chk@plt>
   138d4:	mov	r2, #5
   138d8:	ldr	r1, [pc, #544]	; 13b00 <__assert_fail@plt+0x2c30>
   138dc:	mov	r0, #0
   138e0:	bl	10d14 <dcgettext@plt>
   138e4:	ldr	r3, [r4, #12]
   138e8:	mov	r2, r0
   138ec:	mov	r1, #1
   138f0:	mov	r0, r5
   138f4:	str	r3, [sp, #8]
   138f8:	ldr	r3, [r4, #8]
   138fc:	str	r3, [sp, #4]
   13900:	ldr	r3, [r4, #4]
   13904:	str	r3, [sp]
   13908:	ldr	r3, [r4]
   1390c:	bl	10e28 <__fprintf_chk@plt>
   13910:	add	sp, sp, #32
   13914:	pop	{r4, r5, r6, pc}
   13918:	mov	r2, #5
   1391c:	ldr	r1, [pc, #480]	; 13b04 <__assert_fail@plt+0x2c34>
   13920:	mov	r0, #0
   13924:	bl	10d14 <dcgettext@plt>
   13928:	ldr	r3, [r4, #16]
   1392c:	mov	r2, r0
   13930:	mov	r1, #1
   13934:	mov	r0, r5
   13938:	str	r3, [sp, #12]
   1393c:	ldr	r3, [r4, #12]
   13940:	str	r3, [sp, #8]
   13944:	ldr	r3, [r4, #8]
   13948:	str	r3, [sp, #4]
   1394c:	ldr	r3, [r4, #4]
   13950:	str	r3, [sp]
   13954:	ldr	r3, [r4]
   13958:	bl	10e28 <__fprintf_chk@plt>
   1395c:	b	13910 <__assert_fail@plt+0x2a40>
   13960:	mov	r2, #5
   13964:	ldr	r1, [pc, #412]	; 13b08 <__assert_fail@plt+0x2c38>
   13968:	mov	r0, #0
   1396c:	bl	10d14 <dcgettext@plt>
   13970:	ldr	r3, [r4, #20]
   13974:	mov	r2, r0
   13978:	mov	r1, #1
   1397c:	mov	r0, r5
   13980:	str	r3, [sp, #16]
   13984:	ldr	r3, [r4, #16]
   13988:	str	r3, [sp, #12]
   1398c:	ldr	r3, [r4, #12]
   13990:	str	r3, [sp, #8]
   13994:	ldr	r3, [r4, #8]
   13998:	str	r3, [sp, #4]
   1399c:	ldr	r3, [r4, #4]
   139a0:	str	r3, [sp]
   139a4:	ldr	r3, [r4]
   139a8:	bl	10e28 <__fprintf_chk@plt>
   139ac:	b	13910 <__assert_fail@plt+0x2a40>
   139b0:	mov	r2, #5
   139b4:	ldr	r1, [pc, #336]	; 13b0c <__assert_fail@plt+0x2c3c>
   139b8:	mov	r0, #0
   139bc:	bl	10d14 <dcgettext@plt>
   139c0:	ldr	r3, [r4, #24]
   139c4:	mov	r2, r0
   139c8:	mov	r1, #1
   139cc:	mov	r0, r5
   139d0:	str	r3, [sp, #20]
   139d4:	ldr	r3, [r4, #20]
   139d8:	str	r3, [sp, #16]
   139dc:	ldr	r3, [r4, #16]
   139e0:	str	r3, [sp, #12]
   139e4:	ldr	r3, [r4, #12]
   139e8:	str	r3, [sp, #8]
   139ec:	ldr	r3, [r4, #8]
   139f0:	str	r3, [sp, #4]
   139f4:	ldr	r3, [r4, #4]
   139f8:	str	r3, [sp]
   139fc:	ldr	r3, [r4]
   13a00:	bl	10e28 <__fprintf_chk@plt>
   13a04:	b	13910 <__assert_fail@plt+0x2a40>
   13a08:	mov	r2, #5
   13a0c:	ldr	r1, [pc, #252]	; 13b10 <__assert_fail@plt+0x2c40>
   13a10:	mov	r0, #0
   13a14:	bl	10d14 <dcgettext@plt>
   13a18:	ldr	r3, [r4, #28]
   13a1c:	mov	r2, r0
   13a20:	mov	r1, #1
   13a24:	mov	r0, r5
   13a28:	str	r3, [sp, #24]
   13a2c:	ldr	r3, [r4, #24]
   13a30:	str	r3, [sp, #20]
   13a34:	ldr	r3, [r4, #20]
   13a38:	str	r3, [sp, #16]
   13a3c:	ldr	r3, [r4, #16]
   13a40:	str	r3, [sp, #12]
   13a44:	ldr	r3, [r4, #12]
   13a48:	str	r3, [sp, #8]
   13a4c:	ldr	r3, [r4, #8]
   13a50:	str	r3, [sp, #4]
   13a54:	ldr	r3, [r4, #4]
   13a58:	str	r3, [sp]
   13a5c:	ldr	r3, [r4]
   13a60:	bl	10e28 <__fprintf_chk@plt>
   13a64:	b	13910 <__assert_fail@plt+0x2a40>
   13a68:	ldr	r1, [pc, #164]	; 13b14 <__assert_fail@plt+0x2c44>
   13a6c:	mov	r2, #5
   13a70:	mov	r0, #0
   13a74:	bl	10d14 <dcgettext@plt>
   13a78:	ldr	r3, [r4, #32]
   13a7c:	mov	r2, r0
   13a80:	mov	r1, #1
   13a84:	mov	r0, r5
   13a88:	str	r3, [sp, #28]
   13a8c:	ldr	r3, [r4, #28]
   13a90:	str	r3, [sp, #24]
   13a94:	ldr	r3, [r4, #24]
   13a98:	str	r3, [sp, #20]
   13a9c:	ldr	r3, [r4, #20]
   13aa0:	str	r3, [sp, #16]
   13aa4:	ldr	r3, [r4, #16]
   13aa8:	str	r3, [sp, #12]
   13aac:	ldr	r3, [r4, #12]
   13ab0:	str	r3, [sp, #8]
   13ab4:	ldr	r3, [r4, #8]
   13ab8:	str	r3, [sp, #4]
   13abc:	ldr	r3, [r4, #4]
   13ac0:	str	r3, [sp]
   13ac4:	ldr	r3, [r4]
   13ac8:	bl	10e28 <__fprintf_chk@plt>
   13acc:	b	13910 <__assert_fail@plt+0x2a40>
   13ad0:	mov	r2, #5
   13ad4:	ldr	r1, [pc, #60]	; 13b18 <__assert_fail@plt+0x2c48>
   13ad8:	b	13a70 <__assert_fail@plt+0x2ba0>
   13adc:	andeq	r4, r1, pc, asr #25
   13ae0:	andeq	r4, r1, r2, ror #25
   13ae4:			; <UNDEFINED> instruction: 0x00014fb0
   13ae8:	andeq	r4, r1, r6, ror #25
   13aec:	muleq	r1, r1, sp
   13af0:	ldrdeq	r4, [r1], -fp
   13af4:			; <UNDEFINED> instruction: 0x00014db3
   13af8:	andeq	r4, r1, r3, asr #27
   13afc:	ldrdeq	r4, [r1], -sl
   13b00:	strdeq	r4, [r1], -r6
   13b04:	andeq	r4, r1, r6, lsl lr
   13b08:	andeq	r4, r1, sl, lsr lr
   13b0c:	andeq	r4, r1, r2, ror #28
   13b10:	andeq	r4, r1, lr, lsl #29
   13b14:			; <UNDEFINED> instruction: 0x00014ebe
   13b18:	strdeq	r4, [r1], -r2
   13b1c:	push	{r0, r1, r4, lr}
   13b20:	mov	ip, #0
   13b24:	ldr	lr, [sp, #16]
   13b28:	ldr	r4, [lr, ip, lsl #2]
   13b2c:	cmp	r4, #0
   13b30:	bne	13b48 <__assert_fail@plt+0x2c78>
   13b34:	str	lr, [sp]
   13b38:	str	ip, [sp, #4]
   13b3c:	bl	13754 <__assert_fail@plt+0x2884>
   13b40:	add	sp, sp, #8
   13b44:	pop	{r4, pc}
   13b48:	add	ip, ip, #1
   13b4c:	b	13b28 <__assert_fail@plt+0x2c58>
   13b50:	push	{r4, r5, r6, lr}
   13b54:	sub	sp, sp, #48	; 0x30
   13b58:	mov	ip, #0
   13b5c:	add	lr, sp, #8
   13b60:	mov	r5, lr
   13b64:	ldr	r6, [sp, #64]	; 0x40
   13b68:	ldr	r4, [r6, ip, lsl #2]
   13b6c:	cmp	r4, #0
   13b70:	str	r4, [lr], #4
   13b74:	beq	13b84 <__assert_fail@plt+0x2cb4>
   13b78:	add	ip, ip, #1
   13b7c:	cmp	ip, #10
   13b80:	bne	13b68 <__assert_fail@plt+0x2c98>
   13b84:	stm	sp, {r5, ip}
   13b88:	bl	13754 <__assert_fail@plt+0x2884>
   13b8c:	add	sp, sp, #48	; 0x30
   13b90:	pop	{r4, r5, r6, pc}
   13b94:	push	{r3}		; (str r3, [sp, #-4]!)
   13b98:	push	{r0, r1, r2, r3, lr}
   13b9c:	add	r3, sp, #24
   13ba0:	str	r3, [sp]
   13ba4:	str	r3, [sp, #12]
   13ba8:	ldr	r3, [sp, #20]
   13bac:	bl	13b50 <__assert_fail@plt+0x2c80>
   13bb0:	add	sp, sp, #16
   13bb4:	pop	{lr}		; (ldr lr, [sp], #4)
   13bb8:	add	sp, sp, #4
   13bbc:	bx	lr
   13bc0:	ldr	r3, [pc, #116]	; 13c3c <__assert_fail@plt+0x2d6c>
   13bc4:	mov	r0, #10
   13bc8:	push	{r4, lr}
   13bcc:	ldr	r1, [r3]
   13bd0:	bl	10cfc <fputc_unlocked@plt>
   13bd4:	mov	r2, #5
   13bd8:	ldr	r1, [pc, #96]	; 13c40 <__assert_fail@plt+0x2d70>
   13bdc:	mov	r0, #0
   13be0:	bl	10d14 <dcgettext@plt>
   13be4:	mov	r1, r0
   13be8:	ldr	r2, [pc, #84]	; 13c44 <__assert_fail@plt+0x2d74>
   13bec:	mov	r0, #1
   13bf0:	bl	10e10 <__printf_chk@plt>
   13bf4:	mov	r2, #5
   13bf8:	ldr	r1, [pc, #72]	; 13c48 <__assert_fail@plt+0x2d78>
   13bfc:	mov	r0, #0
   13c00:	bl	10d14 <dcgettext@plt>
   13c04:	mov	r1, r0
   13c08:	ldr	r3, [pc, #60]	; 13c4c <__assert_fail@plt+0x2d7c>
   13c0c:	mov	r0, #1
   13c10:	ldr	r2, [pc, #56]	; 13c50 <__assert_fail@plt+0x2d80>
   13c14:	bl	10e10 <__printf_chk@plt>
   13c18:	mov	r2, #5
   13c1c:	ldr	r1, [pc, #48]	; 13c54 <__assert_fail@plt+0x2d84>
   13c20:	mov	r0, #0
   13c24:	bl	10d14 <dcgettext@plt>
   13c28:	mov	r1, r0
   13c2c:	ldr	r2, [pc, #36]	; 13c58 <__assert_fail@plt+0x2d88>
   13c30:	mov	r0, #1
   13c34:	pop	{r4, lr}
   13c38:	b	10e10 <__printf_chk@plt>
   13c3c:	andeq	r6, r2, r4, asr r1
   13c40:	andeq	r4, r1, lr, lsr #30
   13c44:	andeq	r4, r1, r2, asr #30
   13c48:	andeq	r4, r1, r8, asr pc
   13c4c:	andeq	r4, r1, r4, ror #13
   13c50:	andeq	r4, r1, ip, lsl #14
   13c54:	andeq	r4, r1, ip, ror #30
   13c58:	muleq	r1, r3, pc	; <UNPREDICTABLE>
   13c5c:	push	{r4, lr}
   13c60:	bl	13fa8 <__assert_fail@plt+0x30d8>
   13c64:	cmp	r0, #0
   13c68:	popne	{r4, pc}
   13c6c:	bl	13f14 <__assert_fail@plt+0x3044>
   13c70:	push	{r4, lr}
   13c74:	bl	13fa8 <__assert_fail@plt+0x30d8>
   13c78:	cmp	r0, #0
   13c7c:	popne	{r4, pc}
   13c80:	bl	13f14 <__assert_fail@plt+0x3044>
   13c84:	b	13c5c <__assert_fail@plt+0x2d8c>
   13c88:	push	{r4, r5, r6, lr}
   13c8c:	mov	r5, r0
   13c90:	mov	r4, r1
   13c94:	bl	13fd4 <__assert_fail@plt+0x3104>
   13c98:	cmp	r0, #0
   13c9c:	popne	{r4, r5, r6, pc}
   13ca0:	adds	r4, r4, #0
   13ca4:	movne	r4, #1
   13ca8:	cmp	r5, #0
   13cac:	moveq	r4, #1
   13cb0:	cmp	r4, #0
   13cb4:	popeq	{r4, r5, r6, pc}
   13cb8:	bl	13f14 <__assert_fail@plt+0x3044>
   13cbc:	push	{r4, lr}
   13cc0:	bl	1408c <__assert_fail@plt+0x31bc>
   13cc4:	cmp	r0, #0
   13cc8:	popne	{r4, pc}
   13ccc:	bl	13f14 <__assert_fail@plt+0x3044>
   13cd0:	push	{r4, r5, r6, lr}
   13cd4:	mov	r6, r0
   13cd8:	mov	r5, r1
   13cdc:	mov	r4, r2
   13ce0:	bl	14134 <__assert_fail@plt+0x3264>
   13ce4:	cmp	r0, #0
   13ce8:	popne	{r4, r5, r6, pc}
   13cec:	cmp	r6, #0
   13cf0:	beq	13d00 <__assert_fail@plt+0x2e30>
   13cf4:	cmp	r5, #0
   13cf8:	cmpne	r4, #0
   13cfc:	popeq	{r4, r5, r6, pc}
   13d00:	bl	13f14 <__assert_fail@plt+0x3044>
   13d04:	b	13cd0 <__assert_fail@plt+0x2e00>
   13d08:	push	{r4, lr}
   13d0c:	bl	1409c <__assert_fail@plt+0x31cc>
   13d10:	cmp	r0, #0
   13d14:	popne	{r4, pc}
   13d18:	bl	13f14 <__assert_fail@plt+0x3044>
   13d1c:	mov	r2, r1
   13d20:	mov	r1, r0
   13d24:	mov	r0, #0
   13d28:	b	13cd0 <__assert_fail@plt+0x2e00>
   13d2c:	mov	r2, r1
   13d30:	mov	r1, r0
   13d34:	mov	r0, #0
   13d38:	b	13d08 <__assert_fail@plt+0x2e38>
   13d3c:	cmp	r0, #0
   13d40:	push	{r4, r5, r6, lr}
   13d44:	mov	r5, r1
   13d48:	ldr	r4, [r1]
   13d4c:	bne	13d78 <__assert_fail@plt+0x2ea8>
   13d50:	cmp	r4, #0
   13d54:	bne	13d68 <__assert_fail@plt+0x2e98>
   13d58:	mov	r4, #64	; 0x40
   13d5c:	udiv	r4, r4, r2
   13d60:	cmp	r2, #64	; 0x40
   13d64:	addhi	r4, r4, #1
   13d68:	mov	r1, r4
   13d6c:	bl	13cd0 <__assert_fail@plt+0x2e00>
   13d70:	str	r4, [r5]
   13d74:	pop	{r4, r5, r6, pc}
   13d78:	lsr	r3, r4, #1
   13d7c:	add	r3, r3, #1
   13d80:	adds	r4, r4, r3
   13d84:	bcc	13d68 <__assert_fail@plt+0x2e98>
   13d88:	bl	13f14 <__assert_fail@plt+0x3044>
   13d8c:	mov	r2, #1
   13d90:	b	13d3c <__assert_fail@plt+0x2e6c>
   13d94:	ldr	ip, [r1]
   13d98:	push	{r4, r5, r6, r7, r8, lr}
   13d9c:	mov	r5, r1
   13da0:	mvn	r8, r3
   13da4:	lsr	r8, r8, #31
   13da8:	ldr	lr, [sp, #24]
   13dac:	asr	r1, ip, #1
   13db0:	adds	r4, ip, r1
   13db4:	mvnvs	r4, #-2147483648	; 0x80000000
   13db8:	cmp	r3, r4
   13dbc:	movge	r1, #0
   13dc0:	andlt	r1, r8, #1
   13dc4:	cmp	r1, #0
   13dc8:	movne	r4, r3
   13dcc:	smull	r6, r7, r4, lr
   13dd0:	cmp	r7, r6, asr #31
   13dd4:	bne	13dec <__assert_fail@plt+0x2f1c>
   13dd8:	cmp	r6, #63	; 0x3f
   13ddc:	mov	r1, r6
   13de0:	bgt	13dfc <__assert_fail@plt+0x2f2c>
   13de4:	mov	r1, #64	; 0x40
   13de8:	b	13df0 <__assert_fail@plt+0x2f20>
   13dec:	mvn	r1, #-2147483648	; 0x80000000
   13df0:	sdiv	r4, r1, lr
   13df4:	mls	r6, lr, r4, r1
   13df8:	sub	r1, r1, r6
   13dfc:	cmp	r0, #0
   13e00:	sub	r6, r4, ip
   13e04:	streq	r0, [r5]
   13e08:	cmp	r6, r2
   13e0c:	bge	13e40 <__assert_fail@plt+0x2f70>
   13e10:	adds	r4, ip, r2
   13e14:	bvs	13e3c <__assert_fail@plt+0x2f6c>
   13e18:	cmp	r4, r3
   13e1c:	movle	r3, #0
   13e20:	andgt	r3, r8, #1
   13e24:	cmp	r3, #0
   13e28:	bne	13e3c <__assert_fail@plt+0x2f6c>
   13e2c:	smull	r2, r3, r4, lr
   13e30:	cmp	r3, r2, asr #31
   13e34:	mov	r1, r2
   13e38:	beq	13e40 <__assert_fail@plt+0x2f70>
   13e3c:	bl	13f14 <__assert_fail@plt+0x3044>
   13e40:	bl	13c88 <__assert_fail@plt+0x2db8>
   13e44:	str	r4, [r5]
   13e48:	pop	{r4, r5, r6, r7, r8, pc}
   13e4c:	push	{r4, lr}
   13e50:	bl	13f54 <__assert_fail@plt+0x3084>
   13e54:	cmp	r0, #0
   13e58:	popne	{r4, pc}
   13e5c:	bl	13f14 <__assert_fail@plt+0x3044>
   13e60:	mov	r1, #1
   13e64:	b	13e4c <__assert_fail@plt+0x2f7c>
   13e68:	push	{r4, lr}
   13e6c:	bl	13f54 <__assert_fail@plt+0x3084>
   13e70:	cmp	r0, #0
   13e74:	popne	{r4, pc}
   13e78:	bl	13f14 <__assert_fail@plt+0x3044>
   13e7c:	mov	r1, #1
   13e80:	b	13e68 <__assert_fail@plt+0x2f98>
   13e84:	push	{r4, r5, r6, lr}
   13e88:	mov	r4, r1
   13e8c:	mov	r5, r0
   13e90:	mov	r0, r1
   13e94:	bl	13c5c <__assert_fail@plt+0x2d8c>
   13e98:	mov	r2, r4
   13e9c:	mov	r1, r5
   13ea0:	pop	{r4, r5, r6, lr}
   13ea4:	b	10cd8 <memcpy@plt>
   13ea8:	push	{r4, r5, r6, lr}
   13eac:	mov	r4, r1
   13eb0:	mov	r5, r0
   13eb4:	mov	r0, r1
   13eb8:	bl	13c70 <__assert_fail@plt+0x2da0>
   13ebc:	mov	r2, r4
   13ec0:	mov	r1, r5
   13ec4:	pop	{r4, r5, r6, lr}
   13ec8:	b	10cd8 <memcpy@plt>
   13ecc:	push	{r4, r5, r6, lr}
   13ed0:	mov	r5, r0
   13ed4:	add	r0, r1, #1
   13ed8:	mov	r4, r1
   13edc:	bl	13c70 <__assert_fail@plt+0x2da0>
   13ee0:	mov	r2, #0
   13ee4:	mov	r1, r5
   13ee8:	strb	r2, [r0, r4]
   13eec:	mov	r2, r4
   13ef0:	pop	{r4, r5, r6, lr}
   13ef4:	b	10cd8 <memcpy@plt>
   13ef8:	push	{r4, lr}
   13efc:	mov	r4, r0
   13f00:	bl	10de0 <strlen@plt>
   13f04:	add	r1, r0, #1
   13f08:	mov	r0, r4
   13f0c:	pop	{r4, lr}
   13f10:	b	13e84 <__assert_fail@plt+0x2fb4>
   13f14:	ldr	r3, [pc, #44]	; 13f48 <__assert_fail@plt+0x3078>
   13f18:	mov	r2, #5
   13f1c:	mov	r0, #0
   13f20:	push	{r4, lr}
   13f24:	ldr	r1, [pc, #32]	; 13f4c <__assert_fail@plt+0x307c>
   13f28:	ldr	r4, [r3]
   13f2c:	bl	10d14 <dcgettext@plt>
   13f30:	mov	r3, r0
   13f34:	ldr	r2, [pc, #20]	; 13f50 <__assert_fail@plt+0x3080>
   13f38:	mov	r1, #0
   13f3c:	mov	r0, r4
   13f40:	bl	10d80 <error@plt>
   13f44:	bl	10eac <abort@plt>
   13f48:	strdeq	r6, [r2], -r0
   13f4c:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   13f50:	muleq	r1, r4, r9
   13f54:	cmp	r1, #0
   13f58:	cmpne	r0, #0
   13f5c:	beq	13f94 <__assert_fail@plt+0x30c4>
   13f60:	push	{r4, r5, r6, lr}
   13f64:	umull	r4, r5, r0, r1
   13f68:	adds	r3, r5, #0
   13f6c:	movne	r3, #1
   13f70:	cmp	r4, #0
   13f74:	blt	13f80 <__assert_fail@plt+0x30b0>
   13f78:	cmp	r3, #0
   13f7c:	beq	13fa0 <__assert_fail@plt+0x30d0>
   13f80:	bl	10dec <__errno_location@plt>
   13f84:	mov	r3, #12
   13f88:	str	r3, [r0]
   13f8c:	mov	r0, #0
   13f90:	pop	{r4, r5, r6, pc}
   13f94:	mov	r1, #1
   13f98:	mov	r0, r1
   13f9c:	b	10c78 <calloc@plt>
   13fa0:	pop	{r4, r5, r6, lr}
   13fa4:	b	13f9c <__assert_fail@plt+0x30cc>
   13fa8:	cmp	r0, #0
   13fac:	beq	13fcc <__assert_fail@plt+0x30fc>
   13fb0:	bge	13fd0 <__assert_fail@plt+0x3100>
   13fb4:	push	{r4, lr}
   13fb8:	bl	10dec <__errno_location@plt>
   13fbc:	mov	r3, #12
   13fc0:	str	r3, [r0]
   13fc4:	mov	r0, #0
   13fc8:	pop	{r4, pc}
   13fcc:	mov	r0, #1
   13fd0:	b	10d8c <malloc@plt>
   13fd4:	cmp	r0, #0
   13fd8:	bne	13fe4 <__assert_fail@plt+0x3114>
   13fdc:	mov	r0, r1
   13fe0:	b	13fa8 <__assert_fail@plt+0x30d8>
   13fe4:	cmp	r1, #0
   13fe8:	push	{r4, lr}
   13fec:	bne	13ffc <__assert_fail@plt+0x312c>
   13ff0:	bl	12060 <__assert_fail@plt+0x1190>
   13ff4:	mov	r0, #0
   13ff8:	pop	{r4, pc}
   13ffc:	blt	14008 <__assert_fail@plt+0x3138>
   14000:	pop	{r4, lr}
   14004:	b	10d20 <realloc@plt>
   14008:	bl	10dec <__errno_location@plt>
   1400c:	mov	r3, #12
   14010:	str	r3, [r0]
   14014:	b	13ff4 <__assert_fail@plt+0x3124>
   14018:	push	{r4, r5, r6, lr}
   1401c:	mov	r4, r0
   14020:	bl	10d5c <__fpending@plt>
   14024:	mov	r5, r0
   14028:	mov	r0, r4
   1402c:	bl	10d68 <ferror_unlocked@plt>
   14030:	mov	r6, r0
   14034:	mov	r0, r4
   14038:	bl	11f68 <__assert_fail@plt+0x1098>
   1403c:	cmp	r6, #0
   14040:	mov	r4, r0
   14044:	bne	14070 <__assert_fail@plt+0x31a0>
   14048:	cmp	r0, #0
   1404c:	beq	14068 <__assert_fail@plt+0x3198>
   14050:	cmp	r5, #0
   14054:	bne	14080 <__assert_fail@plt+0x31b0>
   14058:	bl	10dec <__errno_location@plt>
   1405c:	ldr	r4, [r0]
   14060:	subs	r4, r4, #9
   14064:	mvnne	r4, #0
   14068:	mov	r0, r4
   1406c:	pop	{r4, r5, r6, pc}
   14070:	cmp	r0, #0
   14074:	bne	14080 <__assert_fail@plt+0x31b0>
   14078:	bl	10dec <__errno_location@plt>
   1407c:	str	r4, [r0]
   14080:	mvn	r4, #0
   14084:	b	14068 <__assert_fail@plt+0x3198>
   14088:	b	13fa8 <__assert_fail@plt+0x30d8>
   1408c:	cmp	r1, #0
   14090:	orreq	r1, r1, #1
   14094:	b	13fd4 <__assert_fail@plt+0x3104>
   14098:	b	13f54 <__assert_fail@plt+0x3084>
   1409c:	cmp	r2, #0
   140a0:	cmpne	r1, #0
   140a4:	moveq	r2, #1
   140a8:	moveq	r1, r2
   140ac:	b	14134 <__assert_fail@plt+0x3264>
   140b0:	push	{r4, lr}
   140b4:	mov	r0, #14
   140b8:	bl	10e64 <nl_langinfo@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	140d8 <__assert_fail@plt+0x3208>
   140c4:	ldrb	r2, [r0]
   140c8:	ldr	r3, [pc, #16]	; 140e0 <__assert_fail@plt+0x3210>
   140cc:	cmp	r2, #0
   140d0:	moveq	r0, r3
   140d4:	pop	{r4, pc}
   140d8:	ldr	r0, [pc]	; 140e0 <__assert_fail@plt+0x3210>
   140dc:	pop	{r4, pc}
   140e0:	strdeq	r4, [r1], -r0
   140e4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   140e8:	subs	r5, r0, #0
   140ec:	mov	r7, r2
   140f0:	addeq	r5, sp, #4
   140f4:	mov	r6, r1
   140f8:	mov	r0, r5
   140fc:	bl	10d74 <mbrtowc@plt>
   14100:	cmp	r7, #0
   14104:	cmnne	r0, #3
   14108:	mov	r4, r0
   1410c:	bls	14128 <__assert_fail@plt+0x3258>
   14110:	mov	r0, #0
   14114:	bl	14160 <__assert_fail@plt+0x3290>
   14118:	cmp	r0, #0
   1411c:	ldrbeq	r3, [r6]
   14120:	moveq	r4, #1
   14124:	streq	r3, [r5]
   14128:	mov	r0, r4
   1412c:	add	sp, sp, #12
   14130:	pop	{r4, r5, r6, r7, pc}
   14134:	umull	r2, r3, r1, r2
   14138:	cmp	r3, #0
   1413c:	bne	14148 <__assert_fail@plt+0x3278>
   14140:	mov	r1, r2
   14144:	b	13fd4 <__assert_fail@plt+0x3104>
   14148:	push	{r4, lr}
   1414c:	bl	10dec <__errno_location@plt>
   14150:	mov	r3, #12
   14154:	str	r3, [r0]
   14158:	mov	r0, #0
   1415c:	pop	{r4, pc}
   14160:	push	{lr}		; (str lr, [sp, #-4]!)
   14164:	sub	sp, sp, #268	; 0x10c
   14168:	movw	r2, #257	; 0x101
   1416c:	add	r1, sp, #4
   14170:	bl	141bc <__assert_fail@plt+0x32ec>
   14174:	cmp	r0, #0
   14178:	movne	r0, #0
   1417c:	bne	141ac <__assert_fail@plt+0x32dc>
   14180:	ldr	r1, [pc, #44]	; 141b4 <__assert_fail@plt+0x32e4>
   14184:	add	r0, sp, #4
   14188:	bl	10c9c <strcmp@plt>
   1418c:	cmp	r0, #0
   14190:	beq	141a8 <__assert_fail@plt+0x32d8>
   14194:	ldr	r1, [pc, #28]	; 141b8 <__assert_fail@plt+0x32e8>
   14198:	add	r0, sp, #4
   1419c:	bl	10c9c <strcmp@plt>
   141a0:	adds	r0, r0, #0
   141a4:	movne	r0, #1
   141a8:	and	r0, r0, #1
   141ac:	add	sp, sp, #268	; 0x10c
   141b0:	pop	{pc}		; (ldr pc, [sp], #4)
   141b4:	strdeq	r4, [r1], -r6
   141b8:	strdeq	r4, [r1], -r8
   141bc:	push	{r4, r5, r6, lr}
   141c0:	mov	r5, r1
   141c4:	mov	r1, #0
   141c8:	mov	r4, r2
   141cc:	bl	10e4c <setlocale@plt>
   141d0:	subs	r6, r0, #0
   141d4:	bne	141e8 <__assert_fail@plt+0x3318>
   141d8:	cmp	r4, #0
   141dc:	mov	r0, #22
   141e0:	strbne	r6, [r5]
   141e4:	pop	{r4, r5, r6, pc}
   141e8:	bl	10de0 <strlen@plt>
   141ec:	cmp	r4, r0
   141f0:	bls	1420c <__assert_fail@plt+0x333c>
   141f4:	add	r2, r0, #1
   141f8:	mov	r1, r6
   141fc:	mov	r0, r5
   14200:	bl	10cd8 <memcpy@plt>
   14204:	mov	r0, #0
   14208:	pop	{r4, r5, r6, pc}
   1420c:	cmp	r4, #0
   14210:	beq	14230 <__assert_fail@plt+0x3360>
   14214:	sub	r4, r4, #1
   14218:	mov	r1, r6
   1421c:	mov	r2, r4
   14220:	mov	r0, r5
   14224:	bl	10cd8 <memcpy@plt>
   14228:	mov	r3, #0
   1422c:	strb	r3, [r5, r4]
   14230:	mov	r0, #34	; 0x22
   14234:	pop	{r4, r5, r6, pc}
   14238:	mov	r1, #0
   1423c:	b	10e4c <setlocale@plt>
   14240:	cmp	r3, #0
   14244:	cmpeq	r2, #0
   14248:	bne	14260 <__assert_fail@plt+0x3390>
   1424c:	cmp	r1, #0
   14250:	cmpeq	r0, #0
   14254:	mvnne	r1, #0
   14258:	mvnne	r0, #0
   1425c:	b	1427c <__assert_fail@plt+0x33ac>
   14260:	sub	sp, sp, #8
   14264:	push	{sp, lr}
   14268:	bl	1428c <__assert_fail@plt+0x33bc>
   1426c:	ldr	lr, [sp, #4]
   14270:	add	sp, sp, #8
   14274:	pop	{r2, r3}
   14278:	bx	lr
   1427c:	push	{r1, lr}
   14280:	mov	r0, #8
   14284:	bl	10c90 <raise@plt>
   14288:	pop	{r1, pc}
   1428c:	cmp	r1, r3
   14290:	cmpeq	r0, r2
   14294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14298:	mov	r4, r0
   1429c:	movcc	r0, #0
   142a0:	mov	r5, r1
   142a4:	ldr	lr, [sp, #36]	; 0x24
   142a8:	movcc	r1, r0
   142ac:	bcc	143a8 <__assert_fail@plt+0x34d8>
   142b0:	cmp	r3, #0
   142b4:	clzeq	ip, r2
   142b8:	clzne	ip, r3
   142bc:	addeq	ip, ip, #32
   142c0:	cmp	r5, #0
   142c4:	clzeq	r1, r4
   142c8:	addeq	r1, r1, #32
   142cc:	clzne	r1, r5
   142d0:	sub	ip, ip, r1
   142d4:	sub	sl, ip, #32
   142d8:	lsl	r9, r3, ip
   142dc:	rsb	fp, ip, #32
   142e0:	orr	r9, r9, r2, lsl sl
   142e4:	orr	r9, r9, r2, lsr fp
   142e8:	lsl	r8, r2, ip
   142ec:	cmp	r5, r9
   142f0:	cmpeq	r4, r8
   142f4:	movcc	r0, #0
   142f8:	movcc	r1, r0
   142fc:	bcc	14318 <__assert_fail@plt+0x3448>
   14300:	mov	r0, #1
   14304:	subs	r4, r4, r8
   14308:	lsl	r1, r0, sl
   1430c:	orr	r1, r1, r0, lsr fp
   14310:	lsl	r0, r0, ip
   14314:	sbc	r5, r5, r9
   14318:	cmp	ip, #0
   1431c:	beq	143a8 <__assert_fail@plt+0x34d8>
   14320:	lsr	r6, r8, #1
   14324:	orr	r6, r6, r9, lsl #31
   14328:	lsr	r7, r9, #1
   1432c:	mov	r2, ip
   14330:	b	14354 <__assert_fail@plt+0x3484>
   14334:	subs	r3, r4, r6
   14338:	sbc	r8, r5, r7
   1433c:	adds	r3, r3, r3
   14340:	adc	r8, r8, r8
   14344:	adds	r4, r3, #1
   14348:	adc	r5, r8, #0
   1434c:	subs	r2, r2, #1
   14350:	beq	14370 <__assert_fail@plt+0x34a0>
   14354:	cmp	r5, r7
   14358:	cmpeq	r4, r6
   1435c:	bcs	14334 <__assert_fail@plt+0x3464>
   14360:	adds	r4, r4, r4
   14364:	adc	r5, r5, r5
   14368:	subs	r2, r2, #1
   1436c:	bne	14354 <__assert_fail@plt+0x3484>
   14370:	lsr	r3, r4, ip
   14374:	orr	r3, r3, r5, lsl fp
   14378:	lsr	r2, r5, ip
   1437c:	orr	r3, r3, r5, lsr sl
   14380:	adds	r0, r0, r4
   14384:	mov	r4, r3
   14388:	lsl	r3, r2, ip
   1438c:	orr	r3, r3, r4, lsl sl
   14390:	lsl	ip, r4, ip
   14394:	orr	r3, r3, r4, lsr fp
   14398:	adc	r1, r1, r5
   1439c:	subs	r0, r0, ip
   143a0:	mov	r5, r2
   143a4:	sbc	r1, r1, r3
   143a8:	cmp	lr, #0
   143ac:	strdne	r4, [lr]
   143b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143b8:	mov	r7, r0
   143bc:	ldr	r6, [pc, #72]	; 1440c <__assert_fail@plt+0x353c>
   143c0:	ldr	r5, [pc, #72]	; 14410 <__assert_fail@plt+0x3540>
   143c4:	add	r6, pc, r6
   143c8:	add	r5, pc, r5
   143cc:	sub	r6, r6, r5
   143d0:	mov	r8, r1
   143d4:	mov	r9, r2
   143d8:	bl	10c58 <calloc@plt-0x20>
   143dc:	asrs	r6, r6, #2
   143e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   143e4:	mov	r4, #0
   143e8:	add	r4, r4, #1
   143ec:	ldr	r3, [r5], #4
   143f0:	mov	r2, r9
   143f4:	mov	r1, r8
   143f8:	mov	r0, r7
   143fc:	blx	r3
   14400:	cmp	r6, r4
   14404:	bne	143e8 <__assert_fail@plt+0x3518>
   14408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1440c:	andeq	r1, r1, r8, asr #22
   14410:	andeq	r1, r1, r0, asr #22
   14414:	bx	lr
   14418:	ldr	r3, [pc, #12]	; 1442c <__assert_fail@plt+0x355c>
   1441c:	mov	r1, #0
   14420:	add	r3, pc, r3
   14424:	ldr	r2, [r3]
   14428:	b	10df8 <__cxa_atexit@plt>
   1442c:			; <UNDEFINED> instruction: 0x00011cb8

Disassembly of section .fini:

00014430 <.fini>:
   14430:	push	{r3, lr}
   14434:	pop	{r3, pc}
