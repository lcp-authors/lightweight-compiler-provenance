
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b14 <.init>:
   10b14:	push	{r3, lr}
   10b18:	bl	10d2c <__assert_fail@plt+0x48>
   10b1c:	pop	{r3, pc}

Disassembly of section .plt:

00010b20 <calloc@plt-0x14>:
   10b20:	push	{lr}		; (str lr, [sp, #-4]!)
   10b24:	ldr	lr, [pc, #4]	; 10b30 <calloc@plt-0x4>
   10b28:	add	lr, pc, lr
   10b2c:	ldr	pc, [lr, #8]!
   10b30:	ldrdeq	r6, [r1], -r0

00010b34 <calloc@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #90112	; 0x16000
   10b3c:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b40 <strcmp@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #90112	; 0x16000
   10b48:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b4c <printf@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #90112	; 0x16000
   10b54:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b58 <fopen@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #90112	; 0x16000
   10b60:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b64 <free@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #90112	; 0x16000
   10b6c:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b70 <utf8proc_get_property@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #90112	; 0x16000
   10b78:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b7c <fgets@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #90112	; 0x16000
   10b84:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b88 <utf8proc_encode_char@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #90112	; 0x16000
   10b90:	ldr	pc, [ip, #1176]!	; 0x498

00010b94 <strdup@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #90112	; 0x16000
   10b9c:	ldr	pc, [ip, #1168]!	; 0x490

00010ba0 <rewind@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #90112	; 0x16000
   10ba8:	ldr	pc, [ip, #1160]!	; 0x488

00010bac <unlink@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #90112	; 0x16000
   10bb4:	ldr	pc, [ip, #1152]!	; 0x480

00010bb8 <utf8proc_tolower@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #90112	; 0x16000
   10bc0:	ldr	pc, [ip, #1144]!	; 0x478

00010bc4 <__xstat@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #90112	; 0x16000
   10bcc:	ldr	pc, [ip, #1136]!	; 0x470

00010bd0 <fread@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #90112	; 0x16000
   10bd8:	ldr	pc, [ip, #1128]!	; 0x468

00010bdc <utf8proc_iterate@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #90112	; 0x16000
   10be4:	ldr	pc, [ip, #1120]!	; 0x460

00010be8 <puts@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #90112	; 0x16000
   10bf0:	ldr	pc, [ip, #1112]!	; 0x458

00010bf4 <malloc@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #90112	; 0x16000
   10bfc:	ldr	pc, [ip, #1104]!	; 0x450

00010c00 <__libc_start_main@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #90112	; 0x16000
   10c08:	ldr	pc, [ip, #1096]!	; 0x448

00010c0c <__sysv_signal@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #90112	; 0x16000
   10c14:	ldr	pc, [ip, #1088]!	; 0x440

00010c18 <__gmon_start__@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #90112	; 0x16000
   10c20:	ldr	pc, [ip, #1080]!	; 0x438

00010c24 <getpid@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #90112	; 0x16000
   10c2c:	ldr	pc, [ip, #1072]!	; 0x430

00010c30 <exit@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #90112	; 0x16000
   10c38:	ldr	pc, [ip, #1064]!	; 0x428

00010c3c <utf8proc_category@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #1056]!	; 0x420

00010c48 <strlen@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #1048]!	; 0x418

00010c54 <fprintf@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #1040]!	; 0x410

00010c60 <__isoc99_sscanf@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #1032]!	; 0x408

00010c6c <fclose@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #1024]!	; 0x400

00010c78 <utf8proc_NFC@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c84 <fputc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c90 <sprintf@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c9c <atoi@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #992]!	; 0x3e0

00010ca8 <utf8proc_errmsg@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #984]!	; 0x3d8

00010cb4 <fputs@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #976]!	; 0x3d0

00010cc0 <strncmp@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #968]!	; 0x3c8

00010ccc <abort@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #960]!	; 0x3c0

00010cd8 <getc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #952]!	; 0x3b8

00010ce4 <__assert_fail@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #944]!	; 0x3b0

Disassembly of section .text:

00010cf0 <error@@Base-0x1ac0>:
   10cf0:	mov	fp, #0
   10cf4:	mov	lr, #0
   10cf8:	pop	{r1}		; (ldr r1, [sp], #4)
   10cfc:	mov	r2, sp
   10d00:	push	{r2}		; (str r2, [sp, #-4]!)
   10d04:	push	{r0}		; (str r0, [sp, #-4]!)
   10d08:	ldr	ip, [pc, #16]	; 10d20 <__assert_fail@plt+0x3c>
   10d0c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d10:	ldr	r0, [pc, #12]	; 10d24 <__assert_fail@plt+0x40>
   10d14:	ldr	r3, [pc, #12]	; 10d28 <__assert_fail@plt+0x44>
   10d18:	bl	10c00 <__libc_start_main@plt>
   10d1c:	bl	10ccc <abort@plt>
   10d20:	ldrdeq	r2, [r1], -r0
   10d24:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   10d28:	andeq	r2, r1, r0, ror pc
   10d2c:	ldr	r3, [pc, #20]	; 10d48 <__assert_fail@plt+0x64>
   10d30:	ldr	r2, [pc, #20]	; 10d4c <__assert_fail@plt+0x68>
   10d34:	add	r3, pc, r3
   10d38:	ldr	r2, [r3, r2]
   10d3c:	cmp	r2, #0
   10d40:	bxeq	lr
   10d44:	b	10c18 <__gmon_start__@plt>
   10d48:	andeq	r6, r1, r4, asr #5
   10d4c:	andeq	r0, r0, r0, lsr #1
   10d50:	ldr	r0, [pc, #24]	; 10d70 <__assert_fail@plt+0x8c>
   10d54:	ldr	r3, [pc, #24]	; 10d74 <__assert_fail@plt+0x90>
   10d58:	cmp	r3, r0
   10d5c:	bxeq	lr
   10d60:	ldr	r3, [pc, #16]	; 10d78 <__assert_fail@plt+0x94>
   10d64:	cmp	r3, #0
   10d68:	bxeq	lr
   10d6c:	bx	r3
   10d70:	andeq	r7, r2, r0, asr #1
   10d74:	andeq	r7, r2, r0, asr #1
   10d78:	andeq	r0, r0, r0
   10d7c:	ldr	r0, [pc, #36]	; 10da8 <__assert_fail@plt+0xc4>
   10d80:	ldr	r1, [pc, #36]	; 10dac <__assert_fail@plt+0xc8>
   10d84:	sub	r1, r1, r0
   10d88:	asr	r1, r1, #2
   10d8c:	add	r1, r1, r1, lsr #31
   10d90:	asrs	r1, r1, #1
   10d94:	bxeq	lr
   10d98:	ldr	r3, [pc, #16]	; 10db0 <__assert_fail@plt+0xcc>
   10d9c:	cmp	r3, #0
   10da0:	bxeq	lr
   10da4:	bx	r3
   10da8:	andeq	r7, r2, r0, asr #1
   10dac:	andeq	r7, r2, r0, asr #1
   10db0:	andeq	r0, r0, r0
   10db4:	push	{r4, lr}
   10db8:	ldr	r4, [pc, #24]	; 10dd8 <__assert_fail@plt+0xf4>
   10dbc:	ldrb	r3, [r4]
   10dc0:	cmp	r3, #0
   10dc4:	popne	{r4, pc}
   10dc8:	bl	10d50 <__assert_fail@plt+0x6c>
   10dcc:	mov	r3, #1
   10dd0:	strb	r3, [r4]
   10dd4:	pop	{r4, pc}
   10dd8:	ldrdeq	r7, [r2], -r0
   10ddc:	b	10d7c <__assert_fail@plt+0x98>
   10de0:	push	{r4, r5, fp, lr}
   10de4:	add	fp, sp, #8
   10de8:	movw	r4, #28996	; 0x7144
   10dec:	movw	r2, #28844	; 0x70ac
   10df0:	mov	r1, r0
   10df4:	movt	r4, #2
   10df8:	movt	r2, #2
   10dfc:	mov	r0, r4
   10e00:	bl	12980 <error@@Base+0x1d0>
   10e04:	movw	r5, #29012	; 0x7154
   10e08:	mov	r1, r4
   10e0c:	movt	r5, #2
   10e10:	mov	r0, r5
   10e14:	bl	11e64 <__assert_fail@plt+0x1180>
   10e18:	ldr	r5, [r5]
   10e1c:	cmp	r5, #0
   10e20:	beq	10e4c <__assert_fail@plt+0x168>
   10e24:	movw	r4, #29028	; 0x7164
   10e28:	movt	r4, #2
   10e2c:	ldr	r1, [r5, #8]
   10e30:	mov	r0, r4
   10e34:	mov	r2, #1
   10e38:	mov	r3, #0
   10e3c:	bl	112d4 <__assert_fail@plt+0x5f0>
   10e40:	ldr	r5, [r5, #4]
   10e44:	cmp	r5, #0
   10e48:	bne	10e2c <__assert_fail@plt+0x148>
   10e4c:	movw	r0, #28996	; 0x7144
   10e50:	movw	r1, #2916	; 0xb64
   10e54:	movt	r0, #2
   10e58:	movt	r1, #1
   10e5c:	bl	11160 <__assert_fail@plt+0x47c>
   10e60:	movw	r0, #29012	; 0x7154
   10e64:	movw	r1, #8776	; 0x2248
   10e68:	movt	r0, #2
   10e6c:	movt	r1, #1
   10e70:	pop	{r4, r5, fp, lr}
   10e74:	b	11160 <__assert_fail@plt+0x47c>
   10e78:	ldr	r1, [r1, #8]
   10e7c:	ldr	r0, [r0, #8]
   10e80:	b	12344 <__assert_fail@plt+0x1660>
   10e84:	ldr	r2, [r1, #12]
   10e88:	ldr	r3, [r0, #12]
   10e8c:	cmp	r2, r3
   10e90:	subne	r0, r2, r3
   10e94:	bxne	lr
   10e98:	ldr	r1, [r1, #8]
   10e9c:	ldr	r0, [r0, #8]
   10ea0:	b	12344 <__assert_fail@plt+0x1660>
   10ea4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10ea8:	add	fp, sp, #24
   10eac:	movw	r0, #12357	; 0x3045
   10eb0:	movt	r0, #1
   10eb4:	bl	10be8 <puts@plt>
   10eb8:	movw	r7, #29028	; 0x7164
   10ebc:	movw	r8, #8052	; 0x1f74
   10ec0:	movt	r7, #2
   10ec4:	ldr	r0, [r7, r8]
   10ec8:	cmp	r0, #1
   10ecc:	blt	10f20 <__assert_fail@plt+0x23c>
   10ed0:	movw	r9, #8048	; 0x1f70
   10ed4:	movw	r5, #12272	; 0x2ff0
   10ed8:	mov	r4, #0
   10edc:	mov	r6, #0
   10ee0:	ldr	r0, [r7, r9]
   10ee4:	movt	r5, #1
   10ee8:	ldr	r0, [r0, r6, lsl #2]
   10eec:	ldr	r2, [r0, #8]
   10ef0:	ldr	r1, [r0, #12]
   10ef4:	mov	r0, r5
   10ef8:	bl	10b4c <printf@plt>
   10efc:	ldr	r0, [r7, r9]
   10f00:	ldr	r1, [r7, r8]
   10f04:	ldr	r2, [r0, r6, lsl #2]
   10f08:	add	r6, r6, #1
   10f0c:	cmp	r6, r1
   10f10:	ldr	r2, [r2, #12]
   10f14:	add	r4, r2, r4
   10f18:	blt	10ee8 <__assert_fail@plt+0x204>
   10f1c:	b	10f24 <__assert_fail@plt+0x240>
   10f20:	mov	r4, #0
   10f24:	movw	r0, #12283	; 0x2ffb
   10f28:	mov	r1, r4
   10f2c:	movt	r0, #1
   10f30:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f34:	b	10b4c <printf@plt>
   10f38:	push	{r4, sl, fp, lr}
   10f3c:	add	fp, sp, #8
   10f40:	movw	r4, #29028	; 0x7164
   10f44:	movt	r4, #2
   10f48:	mov	r0, r4
   10f4c:	bl	11d8c <__assert_fail@plt+0x10a8>
   10f50:	movw	r0, #8052	; 0x1f74
   10f54:	movw	r2, #3704	; 0xe78
   10f58:	ldr	r0, [r4, r0]!
   10f5c:	movt	r2, #1
   10f60:	ldr	r1, [r4, #-4]
   10f64:	bl	111a0 <__assert_fail@plt+0x4bc>
   10f68:	bl	10ea4 <__assert_fail@plt+0x1c0>
   10f6c:	movw	r0, #25935	; 0x654f
   10f70:	movt	r0, #1
   10f74:	bl	10be8 <puts@plt>
   10f78:	ldr	r1, [r4, #-4]
   10f7c:	ldr	r0, [r4]
   10f80:	movw	r2, #3716	; 0xe84
   10f84:	movt	r2, #1
   10f88:	bl	111a0 <__assert_fail@plt+0x4bc>
   10f8c:	pop	{r4, sl, fp, lr}
   10f90:	b	10ea4 <__assert_fail@plt+0x1c0>
   10f94:	push	{fp, lr}
   10f98:	mov	fp, sp
   10f9c:	sub	sp, sp, #8
   10fa0:	movw	r2, #12297	; 0x3009
   10fa4:	str	r0, [sp, #4]
   10fa8:	add	r0, sp, #4
   10fac:	mov	r3, #0
   10fb0:	mov	r4, r1
   10fb4:	movt	r2, #1
   10fb8:	bl	12544 <__assert_fail@plt+0x1860>
   10fbc:	ldr	r0, [sp, #4]
   10fc0:	cmp	r0, #0
   10fc4:	beq	10ff4 <__assert_fail@plt+0x310>
   10fc8:	cmp	r0, #1
   10fcc:	blt	10fec <__assert_fail@plt+0x308>
   10fd0:	mov	r5, #0
   10fd4:	ldr	r0, [r4, r5, lsl #2]
   10fd8:	bl	10de0 <__assert_fail@plt+0xfc>
   10fdc:	ldr	r0, [sp, #4]
   10fe0:	add	r5, r5, #1
   10fe4:	cmp	r5, r0
   10fe8:	blt	10fd4 <__assert_fail@plt+0x2f0>
   10fec:	bl	10f38 <__assert_fail@plt+0x254>
   10ff0:	bl	12770 <__assert_fail@plt+0x1a8c>
   10ff4:	movw	r0, #12333	; 0x302d
   10ff8:	movt	r0, #1
   10ffc:	bl	127b0 <error@@Base>
   11000:	vmov.i32	q8, #0	; 0x00000000
   11004:	vst1.32	{d16-d17}, [r0]
   11008:	bx	lr
   1100c:	ldr	r3, [r0]
   11010:	mov	r2, r1
   11014:	mov	r1, #0
   11018:	b	1101c <__assert_fail@plt+0x338>
   1101c:	push	{r4, sl, fp, lr}
   11020:	add	fp, sp, #8
   11024:	cmp	r1, #0
   11028:	mov	r4, r0
   1102c:	stm	r2, {r1, r3}
   11030:	addne	r0, r1, #4
   11034:	cmp	r3, #0
   11038:	addeq	r3, r4, #4
   1103c:	str	r2, [r0]
   11040:	str	r2, [r3]
   11044:	ldr	r0, [r4, #8]
   11048:	cmp	r0, #0
   1104c:	beq	1105c <__assert_fail@plt+0x378>
   11050:	bl	10b64 <free@plt>
   11054:	mov	r0, #0
   11058:	str	r0, [r4, #8]
   1105c:	ldr	r0, [r4, #12]
   11060:	add	r0, r0, #1
   11064:	str	r0, [r4, #12]
   11068:	pop	{r4, sl, fp, pc}
   1106c:	mov	r2, r1
   11070:	ldr	r1, [r0, #4]
   11074:	mov	r3, #0
   11078:	b	1101c <__assert_fail@plt+0x338>
   1107c:	mov	r3, r2
   11080:	mov	r2, r1
   11084:	ldr	r1, [r3]
   11088:	b	1101c <__assert_fail@plt+0x338>
   1108c:	ldr	r3, [r1, #4]
   11090:	b	1101c <__assert_fail@plt+0x338>
   11094:	push	{r4, r5, fp, lr}
   11098:	add	fp, sp, #8
   1109c:	mov	r4, r0
   110a0:	ldm	r1, {r0, r2}
   110a4:	mov	r5, #0
   110a8:	cmp	r0, #0
   110ac:	streq	r2, [r4]
   110b0:	strne	r2, [r0, #4]
   110b4:	ldrne	r2, [r1, #4]
   110b8:	cmp	r2, #0
   110bc:	addeq	r2, r4, #4
   110c0:	str	r0, [r2]
   110c4:	str	r5, [r1]
   110c8:	str	r5, [r1, #4]
   110cc:	ldr	r0, [r4, #8]
   110d0:	cmp	r0, #0
   110d4:	beq	110e0 <__assert_fail@plt+0x3fc>
   110d8:	bl	10b64 <free@plt>
   110dc:	str	r5, [r4, #8]
   110e0:	ldr	r0, [r4, #12]
   110e4:	sub	r0, r0, #1
   110e8:	str	r0, [r4, #12]
   110ec:	pop	{r4, r5, fp, pc}
   110f0:	push	{r4, sl, fp, lr}
   110f4:	add	fp, sp, #8
   110f8:	mov	r4, r0
   110fc:	ldr	r0, [r0, #8]
   11100:	cmp	r0, #0
   11104:	beq	1110c <__assert_fail@plt+0x428>
   11108:	pop	{r4, sl, fp, pc}
   1110c:	ldr	r0, [r4, #12]
   11110:	cmp	r0, #0
   11114:	beq	11108 <__assert_fail@plt+0x424>
   11118:	mov	r1, #4
   1111c:	bl	12324 <__assert_fail@plt+0x1640>
   11120:	str	r0, [r4, #8]
   11124:	ldr	r1, [r4]
   11128:	cmp	r1, #0
   1112c:	beq	11108 <__assert_fail@plt+0x424>
   11130:	str	r1, [r0]
   11134:	ldr	r0, [r1, #4]
   11138:	cmp	r0, #0
   1113c:	popeq	{r4, sl, fp, pc}
   11140:	mov	r1, #4
   11144:	ldr	r2, [r4, #8]
   11148:	str	r0, [r2, r1]
   1114c:	add	r1, r1, #4
   11150:	ldr	r0, [r0, #4]
   11154:	cmp	r0, #0
   11158:	bne	11144 <__assert_fail@plt+0x460>
   1115c:	b	11108 <__assert_fail@plt+0x424>
   11160:	push	{r4, r5, r6, sl, fp, lr}
   11164:	add	fp, sp, #16
   11168:	ldr	r6, [r0]
   1116c:	cmp	r6, #0
   11170:	popeq	{r4, r5, r6, sl, fp, pc}
   11174:	mov	r4, r1
   11178:	mov	r5, r0
   1117c:	mov	r0, r5
   11180:	mov	r1, r6
   11184:	bl	11094 <__assert_fail@plt+0x3b0>
   11188:	mov	r0, r6
   1118c:	blx	r4
   11190:	ldr	r6, [r5]
   11194:	cmp	r6, #0
   11198:	bne	1117c <__assert_fail@plt+0x498>
   1119c:	pop	{r4, r5, r6, sl, fp, pc}
   111a0:	cmp	r0, #2
   111a4:	bxlt	lr
   111a8:	movw	r3, #28888	; 0x70d8
   111ac:	movt	r3, #2
   111b0:	str	r2, [r3]
   111b4:	movw	r2, #28884	; 0x70d4
   111b8:	movt	r2, #2
   111bc:	str	r1, [r2]
   111c0:	sub	r1, r0, #1
   111c4:	mov	r0, #0
   111c8:	b	111cc <__assert_fail@plt+0x4e8>
   111cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111d0:	add	fp, sp, #28
   111d4:	sub	sp, sp, #4
   111d8:	movw	r7, #28884	; 0x70d4
   111dc:	movw	sl, #28888	; 0x70d8
   111e0:	mov	r8, r1
   111e4:	mov	r9, r0
   111e8:	movt	r7, #2
   111ec:	movt	sl, #2
   111f0:	ldr	r0, [r7]
   111f4:	cmp	r9, r8
   111f8:	mov	r4, r8
   111fc:	mov	r5, r9
   11200:	ldr	r6, [r0, r9, lsl #2]
   11204:	bge	11298 <__assert_fail@plt+0x5b4>
   11208:	mov	r5, r9
   1120c:	mov	r4, r8
   11210:	cmp	r5, r4
   11214:	bge	1123c <__assert_fail@plt+0x558>
   11218:	ldr	r0, [r7]
   1121c:	ldr	r2, [sl]
   11220:	ldr	r1, [r0, r4, lsl #2]
   11224:	mov	r0, r6
   11228:	blx	r2
   1122c:	cmn	r0, #1
   11230:	bgt	1123c <__assert_fail@plt+0x558>
   11234:	sub	r4, r4, #1
   11238:	b	11210 <__assert_fail@plt+0x52c>
   1123c:	cmp	r5, r4
   11240:	beq	11254 <__assert_fail@plt+0x570>
   11244:	ldr	r0, [r7]
   11248:	ldr	r1, [r0, r4, lsl #2]
   1124c:	str	r1, [r0, r5, lsl #2]
   11250:	add	r5, r5, #1
   11254:	cmp	r5, r4
   11258:	bge	11278 <__assert_fail@plt+0x594>
   1125c:	ldr	r0, [r7]
   11260:	ldr	r2, [sl]
   11264:	ldr	r1, [r0, r5, lsl #2]
   11268:	mov	r0, r6
   1126c:	blx	r2
   11270:	cmp	r0, #1
   11274:	bge	11250 <__assert_fail@plt+0x56c>
   11278:	cmp	r5, r4
   1127c:	ldrne	r0, [r7]
   11280:	ldrne	r1, [r0, r5, lsl #2]
   11284:	strne	r1, [r0, r4, lsl #2]
   11288:	subne	r4, r4, #1
   1128c:	cmp	r5, r4
   11290:	blt	11210 <__assert_fail@plt+0x52c>
   11294:	ldr	r0, [r7]
   11298:	sub	r1, r4, #1
   1129c:	str	r6, [r0, r4, lsl #2]
   112a0:	cmp	r1, r9
   112a4:	movgt	r0, r9
   112a8:	blgt	111cc <__assert_fail@plt+0x4e8>
   112ac:	add	r9, r5, #1
   112b0:	cmp	r9, r8
   112b4:	subge	sp, fp, #28
   112b8:	popge	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112bc:	b	111f0 <__assert_fail@plt+0x50c>
   112c0:	ldm	r0, {r3, ip}
   112c4:	add	r1, r3, r1
   112c8:	add	r2, ip, r2
   112cc:	stm	r0, {r1, r2}
   112d0:	bx	lr
   112d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   112d8:	add	fp, sp, #24
   112dc:	mov	r8, r3
   112e0:	mov	r5, r2
   112e4:	mov	r4, r1
   112e8:	mov	r6, r0
   112ec:	bl	11be4 <__assert_fail@plt+0xf00>
   112f0:	mov	r7, r0
   112f4:	cmp	r0, #0
   112f8:	bne	11324 <__assert_fail@plt+0x640>
   112fc:	mov	r0, #1
   11300:	mov	r1, #20
   11304:	bl	12324 <__assert_fail@plt+0x1640>
   11308:	mov	r7, r0
   1130c:	mov	r0, r4
   11310:	bl	10b94 <strdup@plt>
   11314:	str	r0, [r7, #8]
   11318:	mov	r0, r6
   1131c:	mov	r1, r7
   11320:	bl	11c6c <__assert_fail@plt+0xf88>
   11324:	ldr	r0, [r7, #12]
   11328:	ldr	r1, [r7, #16]
   1132c:	add	r0, r0, r5
   11330:	add	r1, r1, r8
   11334:	str	r0, [r7, #12]
   11338:	str	r1, [r7, #16]
   1133c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11340:	push	{r4, r5, r6, r7, fp, lr}
   11344:	add	fp, sp, #16
   11348:	sub	sp, sp, #8
   1134c:	mov	r6, r1
   11350:	movw	r1, #26221	; 0x666d
   11354:	mov	r5, r0
   11358:	movt	r1, #1
   1135c:	mov	r0, r6
   11360:	bl	123c0 <__assert_fail@plt+0x16dc>
   11364:	mov	r4, r0
   11368:	movw	r0, #28892	; 0x70dc
   1136c:	mov	r1, #99	; 0x63
   11370:	movt	r0, #2
   11374:	mov	r2, r4
   11378:	bl	10b7c <fgets@plt>
   1137c:	cmp	r0, #0
   11380:	beq	114d4 <__assert_fail@plt+0x7f0>
   11384:	movw	r0, #28892	; 0x70dc
   11388:	movw	r1, #12366	; 0x304e
   1138c:	mov	r2, #45	; 0x2d
   11390:	movt	r0, #2
   11394:	movt	r1, #1
   11398:	bl	10cc0 <strncmp@plt>
   1139c:	cmp	r0, #0
   113a0:	bne	114d4 <__assert_fail@plt+0x7f0>
   113a4:	movw	r0, #28892	; 0x70dc
   113a8:	mov	r1, #99	; 0x63
   113ac:	mov	r2, r4
   113b0:	movt	r0, #2
   113b4:	bl	10b7c <fgets@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	114d4 <__assert_fail@plt+0x7f0>
   113c0:	movw	r0, #28892	; 0x70dc
   113c4:	movw	r1, #26151	; 0x6627
   113c8:	movt	r0, #2
   113cc:	movt	r1, #1
   113d0:	bl	10b40 <strcmp@plt>
   113d4:	cmp	r0, #0
   113d8:	bne	114d4 <__assert_fail@plt+0x7f0>
   113dc:	add	r1, sp, #4
   113e0:	mov	r0, r4
   113e4:	bl	114f0 <__assert_fail@plt+0x80c>
   113e8:	cmp	r0, #0
   113ec:	beq	114d4 <__assert_fail@plt+0x7f0>
   113f0:	mov	r1, sp
   113f4:	mov	r0, r4
   113f8:	bl	114f0 <__assert_fail@plt+0x80c>
   113fc:	cmp	r0, #0
   11400:	beq	114d4 <__assert_fail@plt+0x7f0>
   11404:	movw	r0, #28892	; 0x70dc
   11408:	mov	r1, #99	; 0x63
   1140c:	mov	r2, r4
   11410:	movt	r0, #2
   11414:	bl	10b7c <fgets@plt>
   11418:	cmp	r0, #0
   1141c:	beq	114d4 <__assert_fail@plt+0x7f0>
   11420:	movw	r0, #28892	; 0x70dc
   11424:	mov	r1, #99	; 0x63
   11428:	mov	r2, r4
   1142c:	movt	r0, #2
   11430:	bl	10b7c <fgets@plt>
   11434:	cmp	r0, #0
   11438:	beq	114d4 <__assert_fail@plt+0x7f0>
   1143c:	ldm	r5, {r0, r1}
   11440:	ldr	r2, [sp, #4]
   11444:	add	r0, r0, r2
   11448:	ldr	r2, [sp]
   1144c:	add	r1, r1, r2
   11450:	stm	r5, {r0, r1}
   11454:	add	r1, r5, #8
   11458:	mov	r0, r4
   1145c:	bl	11544 <__assert_fail@plt+0x860>
   11460:	mov	r7, r0
   11464:	add	r1, r5, #416	; 0x1a0
   11468:	mov	r0, r4
   1146c:	bl	11544 <__assert_fail@plt+0x860>
   11470:	mov	r6, r0
   11474:	add	r1, r5, #824	; 0x338
   11478:	mov	r0, r4
   1147c:	bl	11544 <__assert_fail@plt+0x860>
   11480:	ldr	r0, [sp, #4]
   11484:	cmp	r0, #1
   11488:	blt	114c4 <__assert_fail@plt+0x7e0>
   1148c:	add	r1, r5, #920	; 0x398
   11490:	mov	r0, r4
   11494:	bl	11544 <__assert_fail@plt+0x860>
   11498:	cmp	r7, #1
   1149c:	blt	114ac <__assert_fail@plt+0x7c8>
   114a0:	add	r1, r5, #992	; 0x3e0
   114a4:	mov	r0, r4
   114a8:	bl	11640 <__assert_fail@plt+0x95c>
   114ac:	cmp	r6, #1
   114b0:	blt	114c4 <__assert_fail@plt+0x7e0>
   114b4:	movw	r0, #9048	; 0x2358
   114b8:	add	r1, r5, r0
   114bc:	mov	r0, r4
   114c0:	bl	11640 <__assert_fail@plt+0x95c>
   114c4:	mov	r0, r4
   114c8:	bl	12438 <__assert_fail@plt+0x1754>
   114cc:	sub	sp, fp, #16
   114d0:	pop	{r4, r5, r6, r7, fp, pc}
   114d4:	movw	r1, #12432	; 0x3090
   114d8:	movw	r0, #12414	; 0x307e
   114dc:	cmp	r6, #0
   114e0:	movt	r1, #1
   114e4:	movt	r0, #1
   114e8:	movne	r1, r6
   114ec:	bl	127f0 <error@@Base+0x40>
   114f0:	push	{r4, sl, fp, lr}
   114f4:	add	fp, sp, #8
   114f8:	mov	r2, r0
   114fc:	movw	r0, #28892	; 0x70dc
   11500:	mov	r4, r1
   11504:	mov	r1, #99	; 0x63
   11508:	movt	r0, #2
   1150c:	bl	10b7c <fgets@plt>
   11510:	cmp	r0, #0
   11514:	moveq	r0, #0
   11518:	popeq	{r4, sl, fp, pc}
   1151c:	movw	r0, #28892	; 0x70dc
   11520:	movw	r1, #12539	; 0x30fb
   11524:	mov	r2, r4
   11528:	movt	r0, #2
   1152c:	movt	r1, #1
   11530:	bl	10c60 <__isoc99_sscanf@plt>
   11534:	sub	r0, r0, #1
   11538:	clz	r0, r0
   1153c:	lsr	r0, r0, #5
   11540:	pop	{r4, sl, fp, pc}
   11544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11548:	add	fp, sp, #28
   1154c:	sub	sp, sp, #12
   11550:	mov	r5, r0
   11554:	movw	r0, #28892	; 0x70dc
   11558:	mov	r4, r1
   1155c:	mov	r1, #99	; 0x63
   11560:	movt	r0, #2
   11564:	mov	r2, r5
   11568:	bl	10b7c <fgets@plt>
   1156c:	mov	r6, #0
   11570:	cmp	r0, #0
   11574:	beq	11634 <__assert_fail@plt+0x950>
   11578:	movw	r7, #28892	; 0x70dc
   1157c:	mov	r1, #99	; 0x63
   11580:	mov	r2, r5
   11584:	movt	r7, #2
   11588:	mov	r0, r7
   1158c:	bl	10b7c <fgets@plt>
   11590:	cmp	r0, #0
   11594:	beq	11634 <__assert_fail@plt+0x950>
   11598:	add	r1, sp, #8
   1159c:	add	r2, sp, #4
   115a0:	mov	r0, r5
   115a4:	bl	11adc <__assert_fail@plt+0xdf8>
   115a8:	cmp	r0, #0
   115ac:	beq	11634 <__assert_fail@plt+0x950>
   115b0:	movw	r8, #12289	; 0x3001
   115b4:	mov	r6, #0
   115b8:	add	r7, r7, #29
   115bc:	add	r9, sp, #8
   115c0:	add	sl, sp, #4
   115c4:	movt	r8, #1
   115c8:	mov	r0, r7
   115cc:	bl	10c9c <atoi@plt>
   115d0:	cmp	r0, #0
   115d4:	beq	115e0 <__assert_fail@plt+0x8fc>
   115d8:	ldr	r1, [sp, #8]
   115dc:	b	115fc <__assert_fail@plt+0x918>
   115e0:	mov	r0, r7
   115e4:	mov	r1, r8
   115e8:	bl	10b40 <strcmp@plt>
   115ec:	ldr	r1, [sp, #8]
   115f0:	cmp	r0, #0
   115f4:	movwne	r0, #11
   115f8:	moveq	r6, r1
   115fc:	mov	r2, r4
   11600:	ldr	r0, [r2, r0, lsl #3]!
   11604:	add	r0, r0, r1
   11608:	ldr	r1, [sp, #4]
   1160c:	str	r0, [r2]
   11610:	ldr	r0, [r2, #4]
   11614:	add	r0, r0, r1
   11618:	mov	r1, r9
   1161c:	str	r0, [r2, #4]
   11620:	mov	r0, r5
   11624:	mov	r2, sl
   11628:	bl	11adc <__assert_fail@plt+0xdf8>
   1162c:	cmp	r0, #0
   11630:	bne	115c8 <__assert_fail@plt+0x8e4>
   11634:	mov	r0, r6
   11638:	sub	sp, fp, #28
   1163c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11644:	add	fp, sp, #28
   11648:	sub	sp, sp, #12
   1164c:	mov	r5, r0
   11650:	movw	r0, #28892	; 0x70dc
   11654:	mov	r4, r1
   11658:	mov	r1, #99	; 0x63
   1165c:	movt	r0, #2
   11660:	mov	r2, r5
   11664:	bl	10b7c <fgets@plt>
   11668:	cmp	r0, #0
   1166c:	beq	116f4 <__assert_fail@plt+0xa10>
   11670:	movw	r6, #28892	; 0x70dc
   11674:	mov	r1, #99	; 0x63
   11678:	mov	r2, r5
   1167c:	movt	r6, #2
   11680:	mov	r0, r6
   11684:	bl	10b7c <fgets@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116f4 <__assert_fail@plt+0xa10>
   11690:	add	r1, sp, #8
   11694:	add	r2, sp, #4
   11698:	mov	r0, r5
   1169c:	bl	11adc <__assert_fail@plt+0xdf8>
   116a0:	cmp	r0, #0
   116a4:	beq	116f4 <__assert_fail@plt+0xa10>
   116a8:	mov	sl, #0
   116ac:	add	r7, r6, #29
   116b0:	add	r8, sp, #8
   116b4:	add	r9, sp, #4
   116b8:	mov	r0, r6
   116bc:	bl	10c48 <strlen@plt>
   116c0:	ldr	r2, [sp, #8]
   116c4:	ldr	r3, [sp, #4]
   116c8:	add	r0, r6, r0
   116cc:	mov	r1, r7
   116d0:	strb	sl, [r0, #-1]
   116d4:	mov	r0, r4
   116d8:	bl	112d4 <__assert_fail@plt+0x5f0>
   116dc:	mov	r0, r5
   116e0:	mov	r1, r8
   116e4:	mov	r2, r9
   116e8:	bl	11adc <__assert_fail@plt+0xdf8>
   116ec:	cmp	r0, #0
   116f0:	bne	116b8 <__assert_fail@plt+0x9d4>
   116f4:	sub	sp, fp, #28
   116f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11700:	add	fp, sp, #24
   11704:	sub	sp, sp, #8
   11708:	mov	r2, r1
   1170c:	movw	r1, #12438	; 0x3096
   11710:	mov	r5, r0
   11714:	movt	r1, #1
   11718:	mov	r0, r2
   1171c:	bl	123c0 <__assert_fail@plt+0x16dc>
   11720:	movw	r1, #12440	; 0x3098
   11724:	movw	r2, #12366	; 0x304e
   11728:	movw	r3, #26151	; 0x6627
   1172c:	mov	r4, r0
   11730:	movt	r1, #1
   11734:	movt	r2, #1
   11738:	movt	r3, #1
   1173c:	bl	10c54 <fprintf@plt>
   11740:	ldr	r2, [r5]
   11744:	movw	r1, #12445	; 0x309d
   11748:	mov	r0, r4
   1174c:	movt	r1, #1
   11750:	bl	10c54 <fprintf@plt>
   11754:	ldr	r2, [r5, #4]
   11758:	movw	r1, #12459	; 0x30ab
   1175c:	mov	r0, r4
   11760:	movt	r1, #1
   11764:	bl	10c54 <fprintf@plt>
   11768:	mov	r0, r4
   1176c:	mov	r1, r5
   11770:	bl	11870 <__assert_fail@plt+0xb8c>
   11774:	movw	r0, #12481	; 0x30c1
   11778:	mov	r1, r4
   1177c:	movt	r0, #1
   11780:	bl	10cb4 <fputs@plt>
   11784:	movw	r3, #12494	; 0x30ce
   11788:	mov	r7, #1
   1178c:	mov	r8, #0
   11790:	add	r1, r5, #8
   11794:	mov	r0, r4
   11798:	mov	r2, #50	; 0x32
   1179c:	movt	r3, #1
   117a0:	str	r8, [sp]
   117a4:	str	r7, [sp, #4]
   117a8:	bl	118d0 <__assert_fail@plt+0xbec>
   117ac:	movw	r3, #12513	; 0x30e1
   117b0:	add	r6, r5, #416	; 0x1a0
   117b4:	mov	r0, r4
   117b8:	mov	r2, #50	; 0x32
   117bc:	str	r8, [sp]
   117c0:	str	r7, [sp, #4]
   117c4:	movt	r3, #1
   117c8:	mov	r1, r6
   117cc:	bl	118d0 <__assert_fail@plt+0xbec>
   117d0:	movw	r3, #12504	; 0x30d8
   117d4:	add	r1, r5, #824	; 0x338
   117d8:	mov	r0, r4
   117dc:	mov	r2, #10
   117e0:	str	r7, [sp]
   117e4:	str	r7, [sp, #4]
   117e8:	movt	r3, #1
   117ec:	bl	118d0 <__assert_fail@plt+0xbec>
   117f0:	ldr	r0, [r5]
   117f4:	cmp	r0, #1
   117f8:	blt	11860 <__assert_fail@plt+0xb7c>
   117fc:	movw	r3, #12527	; 0x30ef
   11800:	add	r1, r5, #920	; 0x398
   11804:	mov	r0, r4
   11808:	mov	r2, #8
   1180c:	str	r8, [sp]
   11810:	str	r8, [sp, #4]
   11814:	movt	r3, #1
   11818:	bl	118d0 <__assert_fail@plt+0xbec>
   1181c:	ldr	r0, [r5, #8]
   11820:	cmp	r0, #1
   11824:	blt	1183c <__assert_fail@plt+0xb58>
   11828:	movw	r2, #12494	; 0x30ce
   1182c:	add	r1, r5, #992	; 0x3e0
   11830:	mov	r0, r4
   11834:	movt	r2, #1
   11838:	bl	11a0c <__assert_fail@plt+0xd28>
   1183c:	ldr	r0, [r6]
   11840:	cmp	r0, #1
   11844:	blt	11860 <__assert_fail@plt+0xb7c>
   11848:	movw	r2, #12513	; 0x30e1
   1184c:	movw	r0, #9048	; 0x2358
   11850:	add	r1, r5, r0
   11854:	movt	r2, #1
   11858:	mov	r0, r4
   1185c:	bl	11a0c <__assert_fail@plt+0xd28>
   11860:	mov	r0, r4
   11864:	sub	sp, fp, #24
   11868:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1186c:	b	12438 <__assert_fail@plt+0x1754>
   11870:	mov	ip, r0
   11874:	ldr	r0, [r1]
   11878:	cmp	r0, #0
   1187c:	beq	118b8 <__assert_fail@plt+0xbd4>
   11880:	ldr	r1, [r1, #4]
   11884:	vldr	d16, [pc, #60]	; 118c8 <__assert_fail@plt+0xbe4>
   11888:	vmov	s2, r0
   1188c:	sub	r1, r0, r1
   11890:	mov	r0, ip
   11894:	vmov	s0, r1
   11898:	movw	r1, #12552	; 0x3108
   1189c:	vcvt.f64.s32	d17, s0
   118a0:	vcvt.f64.s32	d18, s2
   118a4:	movt	r1, #1
   118a8:	vmul.f64	d16, d17, d16
   118ac:	vdiv.f64	d16, d16, d18
   118b0:	vmov	r2, r3, d16
   118b4:	b	10c54 <fprintf@plt>
   118b8:	movw	r0, #12543	; 0x30ff
   118bc:	mov	r1, ip
   118c0:	movt	r0, #1
   118c4:	b	10cb4 <fputs@plt>
   118c8:	andeq	r0, r0, r0
   118cc:	subsmi	r0, r9, r0
   118d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d4:	add	fp, sp, #28
   118d8:	sub	sp, sp, #4
   118dc:	mov	r5, r1
   118e0:	movw	r1, #12558	; 0x310e
   118e4:	mov	r7, r2
   118e8:	mov	r2, r3
   118ec:	mov	r4, r0
   118f0:	movt	r1, #1
   118f4:	bl	10c54 <fprintf@plt>
   118f8:	movw	r0, #12606	; 0x313e
   118fc:	mov	r1, r4
   11900:	movt	r0, #1
   11904:	bl	10cb4 <fputs@plt>
   11908:	movw	r0, #12633	; 0x3159
   1190c:	mov	r1, r4
   11910:	movt	r0, #1
   11914:	bl	10cb4 <fputs@plt>
   11918:	ldrb	sl, [fp, #8]
   1191c:	movw	r0, #12563	; 0x3113
   11920:	movw	r2, #12570	; 0x311a
   11924:	movw	r1, #12559	; 0x310f
   11928:	movt	r0, #1
   1192c:	movt	r2, #1
   11930:	movt	r1, #1
   11934:	cmp	sl, #0
   11938:	movne	r2, r0
   1193c:	mov	r0, r4
   11940:	bl	10c54 <fprintf@plt>
   11944:	ldr	r1, [fp, #12]
   11948:	lsl	r0, r7, #16
   1194c:	sxth	r6, r7
   11950:	cmp	r0, #65536	; 0x10000
   11954:	str	r1, [sp]
   11958:	blt	119a4 <__assert_fail@plt+0xcc0>
   1195c:	movw	r8, #12577	; 0x3121
   11960:	mov	r7, #1
   11964:	mov	r9, #1
   11968:	movt	r8, #1
   1196c:	mov	r1, r5
   11970:	ldr	r0, [r1, r7, lsl #3]!
   11974:	cmp	r0, #1
   11978:	blt	11994 <__assert_fail@plt+0xcb0>
   1197c:	mov	r0, r4
   11980:	bl	11b38 <__assert_fail@plt+0xe54>
   11984:	mov	r0, r4
   11988:	mov	r1, r8
   1198c:	mov	r2, r7
   11990:	bl	10c54 <fprintf@plt>
   11994:	add	r9, r9, #1
   11998:	sxth	r7, r9
   1199c:	cmp	r6, r7
   119a0:	bge	1196c <__assert_fail@plt+0xc88>
   119a4:	cmp	sl, #0
   119a8:	beq	119d8 <__assert_fail@plt+0xcf4>
   119ac:	add	r1, r5, r6, lsl #3
   119b0:	ldr	r0, [r1, #8]!
   119b4:	cmp	r0, #1
   119b8:	blt	119d8 <__assert_fail@plt+0xcf4>
   119bc:	mov	r0, r4
   119c0:	bl	11b38 <__assert_fail@plt+0xe54>
   119c4:	movw	r1, #12586	; 0x312a
   119c8:	mov	r0, r4
   119cc:	mov	r2, r6
   119d0:	movt	r1, #1
   119d4:	bl	10c54 <fprintf@plt>
   119d8:	ldr	r0, [sp]
   119dc:	tst	r0, #255	; 0xff
   119e0:	subeq	sp, fp, #28
   119e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119e8:	mov	r0, r4
   119ec:	mov	r1, r5
   119f0:	bl	11b38 <__assert_fail@plt+0xe54>
   119f4:	movw	r0, #12289	; 0x3001
   119f8:	mov	r1, r4
   119fc:	movt	r0, #1
   11a00:	sub	sp, fp, #28
   11a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a08:	b	10cb4 <fputs@plt>
   11a0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a10:	add	fp, sp, #24
   11a14:	mov	r5, r0
   11a18:	mov	r0, r1
   11a1c:	mov	r6, r2
   11a20:	mov	r4, r1
   11a24:	bl	11d8c <__assert_fail@plt+0x10a8>
   11a28:	movw	r0, #8052	; 0x1f74
   11a2c:	movw	r2, #7064	; 0x1b98
   11a30:	ldr	r0, [r4, r0]!
   11a34:	movt	r2, #1
   11a38:	mov	r7, r4
   11a3c:	ldr	r1, [r7, #-4]!
   11a40:	bl	111a0 <__assert_fail@plt+0x4bc>
   11a44:	movw	r1, #12558	; 0x310e
   11a48:	mov	r0, r5
   11a4c:	mov	r2, r6
   11a50:	movt	r1, #1
   11a54:	bl	10c54 <fprintf@plt>
   11a58:	movw	r0, #12606	; 0x313e
   11a5c:	mov	r1, r5
   11a60:	movt	r0, #1
   11a64:	bl	10cb4 <fputs@plt>
   11a68:	movw	r0, #12633	; 0x3159
   11a6c:	mov	r1, r5
   11a70:	movt	r0, #1
   11a74:	bl	10cb4 <fputs@plt>
   11a78:	mov	r0, #10
   11a7c:	mov	r1, r5
   11a80:	bl	10c84 <fputc@plt>
   11a84:	ldr	r0, [r4]
   11a88:	cmp	r0, #1
   11a8c:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   11a90:	movw	r8, #12559	; 0x310f
   11a94:	mov	r6, #0
   11a98:	movt	r8, #1
   11a9c:	ldr	r0, [r7]
   11aa0:	ldr	r0, [r0, r6, lsl #2]
   11aa4:	add	r1, r0, #12
   11aa8:	mov	r0, r5
   11aac:	bl	11b38 <__assert_fail@plt+0xe54>
   11ab0:	ldr	r0, [r7]
   11ab4:	mov	r1, r8
   11ab8:	ldr	r0, [r0, r6, lsl #2]
   11abc:	ldr	r2, [r0, #8]
   11ac0:	mov	r0, r5
   11ac4:	bl	10c54 <fprintf@plt>
   11ac8:	ldr	r0, [r4]
   11acc:	add	r6, r6, #1
   11ad0:	cmp	r6, r0
   11ad4:	blt	11a9c <__assert_fail@plt+0xdb8>
   11ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11adc:	push	{r4, r5, fp, lr}
   11ae0:	add	fp, sp, #8
   11ae4:	mov	r4, r2
   11ae8:	mov	r2, r0
   11aec:	movw	r0, #28892	; 0x70dc
   11af0:	mov	r5, r1
   11af4:	mov	r1, #99	; 0x63
   11af8:	movt	r0, #2
   11afc:	bl	10b7c <fgets@plt>
   11b00:	cmp	r0, #0
   11b04:	moveq	r0, #0
   11b08:	popeq	{r4, r5, fp, pc}
   11b0c:	movw	r0, #28892	; 0x70dc
   11b10:	movw	r1, #12535	; 0x30f7
   11b14:	mov	r2, r5
   11b18:	mov	r3, r4
   11b1c:	movt	r0, #2
   11b20:	movt	r1, #1
   11b24:	bl	10c60 <__isoc99_sscanf@plt>
   11b28:	sub	r0, r0, #2
   11b2c:	clz	r0, r0
   11b30:	lsr	r0, r0, #5
   11b34:	pop	{r4, r5, fp, pc}
   11b38:	push	{r4, r5, fp, lr}
   11b3c:	add	fp, sp, #8
   11b40:	mov	r4, r0
   11b44:	cmp	r1, #0
   11b48:	beq	11b74 <__assert_fail@plt+0xe90>
   11b4c:	ldm	r1, {r2, r3}
   11b50:	mov	r5, r1
   11b54:	movw	r1, #12595	; 0x3133
   11b58:	mov	r0, r4
   11b5c:	movt	r1, #1
   11b60:	bl	10c54 <fprintf@plt>
   11b64:	mov	r0, r4
   11b68:	mov	r1, r5
   11b6c:	bl	11870 <__assert_fail@plt+0xb8c>
   11b70:	b	11b84 <__assert_fail@plt+0xea0>
   11b74:	movw	r0, #12606	; 0x313e
   11b78:	mov	r1, r4
   11b7c:	movt	r0, #1
   11b80:	bl	10cb4 <fputs@plt>
   11b84:	movw	r0, #12633	; 0x3159
   11b88:	mov	r1, r4
   11b8c:	movt	r0, #1
   11b90:	pop	{r4, r5, fp, lr}
   11b94:	b	10cb4 <fputs@plt>
   11b98:	ldr	r1, [r1, #8]
   11b9c:	ldr	r0, [r0, #8]
   11ba0:	b	12344 <__assert_fail@plt+0x1660>
   11ba4:	push	{r4, r5, r6, sl, fp, lr}
   11ba8:	add	fp, sp, #16
   11bac:	mov	r4, r0
   11bb0:	movw	r6, #503	; 0x1f7
   11bb4:	mov	r5, r0
   11bb8:	mov	r0, r5
   11bbc:	bl	11000 <__assert_fail@plt+0x31c>
   11bc0:	subs	r6, r6, #1
   11bc4:	add	r5, r5, #16
   11bc8:	bne	11bb8 <__assert_fail@plt+0xed4>
   11bcc:	movw	r0, #8052	; 0x1f74
   11bd0:	mov	r1, #0
   11bd4:	str	r1, [r4, r0]
   11bd8:	movw	r0, #8048	; 0x1f70
   11bdc:	str	r1, [r4, r0]
   11be0:	pop	{r4, r5, r6, sl, fp, pc}
   11be4:	push	{r4, r5, r6, sl, fp, lr}
   11be8:	add	fp, sp, #16
   11bec:	mov	r5, r1
   11bf0:	ldrb	r1, [r1]
   11bf4:	mov	r4, #0
   11bf8:	mov	r2, #0
   11bfc:	cmp	r1, #0
   11c00:	beq	11c34 <__assert_fail@plt+0xf50>
   11c04:	add	r3, r5, #1
   11c08:	mov	r2, #0
   11c0c:	uxtab	r2, r2, r1
   11c10:	ldrb	r1, [r3], #1
   11c14:	cmp	r1, #0
   11c18:	bne	11c0c <__assert_fail@plt+0xf28>
   11c1c:	movw	r1, #20065	; 0x4e61
   11c20:	movt	r1, #33354	; 0x824a
   11c24:	umull	r1, r3, r2, r1
   11c28:	lsr	r1, r3, #8
   11c2c:	movw	r3, #503	; 0x1f7
   11c30:	mls	r2, r1, r3, r2
   11c34:	ldr	r6, [r0, r2, lsl #4]
   11c38:	b	11c54 <__assert_fail@plt+0xf70>
   11c3c:	ldr	r1, [r6, #8]
   11c40:	mov	r0, r5
   11c44:	bl	10b40 <strcmp@plt>
   11c48:	cmp	r0, #0
   11c4c:	beq	11c60 <__assert_fail@plt+0xf7c>
   11c50:	ldr	r6, [r6, #4]
   11c54:	cmp	r6, #0
   11c58:	bne	11c3c <__assert_fail@plt+0xf58>
   11c5c:	b	11c64 <__assert_fail@plt+0xf80>
   11c60:	mov	r4, r6
   11c64:	mov	r0, r4
   11c68:	pop	{r4, r5, r6, sl, fp, pc}
   11c6c:	push	{r4, r5, fp, lr}
   11c70:	add	fp, sp, #8
   11c74:	mov	r4, r0
   11c78:	ldr	r0, [r1, #8]
   11c7c:	ldrb	r2, [r0]
   11c80:	cmp	r2, #0
   11c84:	beq	11cbc <__assert_fail@plt+0xfd8>
   11c88:	add	r3, r0, #1
   11c8c:	mov	r0, #0
   11c90:	uxtab	r0, r0, r2
   11c94:	ldrb	r2, [r3], #1
   11c98:	cmp	r2, #0
   11c9c:	bne	11c90 <__assert_fail@plt+0xfac>
   11ca0:	movw	r2, #20065	; 0x4e61
   11ca4:	movt	r2, #33354	; 0x824a
   11ca8:	umull	r2, r3, r0, r2
   11cac:	lsr	r2, r3, #8
   11cb0:	movw	r3, #503	; 0x1f7
   11cb4:	mls	r0, r2, r3, r0
   11cb8:	b	11cc0 <__assert_fail@plt+0xfdc>
   11cbc:	mov	r0, #0
   11cc0:	add	r0, r4, r0, lsl #4
   11cc4:	bl	1100c <__assert_fail@plt+0x328>
   11cc8:	movw	r0, #8048	; 0x1f70
   11ccc:	mov	r5, r4
   11cd0:	ldr	r0, [r5, r0]!
   11cd4:	cmp	r0, #0
   11cd8:	beq	11ce8 <__assert_fail@plt+0x1004>
   11cdc:	bl	10b64 <free@plt>
   11ce0:	mov	r0, #0
   11ce4:	str	r0, [r5]
   11ce8:	movw	r0, #8052	; 0x1f74
   11cec:	ldr	r0, [r4, r0]!
   11cf0:	add	r0, r0, #1
   11cf4:	str	r0, [r4]
   11cf8:	pop	{r4, r5, fp, pc}
   11cfc:	push	{r4, r5, fp, lr}
   11d00:	add	fp, sp, #8
   11d04:	mov	r4, r0
   11d08:	ldr	r0, [r1, #8]
   11d0c:	ldrb	r2, [r0]
   11d10:	cmp	r2, #0
   11d14:	beq	11d4c <__assert_fail@plt+0x1068>
   11d18:	add	r3, r0, #1
   11d1c:	mov	r0, #0
   11d20:	uxtab	r0, r0, r2
   11d24:	ldrb	r2, [r3], #1
   11d28:	cmp	r2, #0
   11d2c:	bne	11d20 <__assert_fail@plt+0x103c>
   11d30:	movw	r2, #20065	; 0x4e61
   11d34:	movt	r2, #33354	; 0x824a
   11d38:	umull	r2, r3, r0, r2
   11d3c:	lsr	r2, r3, #8
   11d40:	movw	r3, #503	; 0x1f7
   11d44:	mls	r0, r2, r3, r0
   11d48:	b	11d50 <__assert_fail@plt+0x106c>
   11d4c:	mov	r0, #0
   11d50:	add	r0, r4, r0, lsl #4
   11d54:	bl	11094 <__assert_fail@plt+0x3b0>
   11d58:	movw	r0, #8048	; 0x1f70
   11d5c:	mov	r5, r4
   11d60:	ldr	r0, [r5, r0]!
   11d64:	cmp	r0, #0
   11d68:	beq	11d78 <__assert_fail@plt+0x1094>
   11d6c:	bl	10b64 <free@plt>
   11d70:	mov	r0, #0
   11d74:	str	r0, [r5]
   11d78:	movw	r0, #8052	; 0x1f74
   11d7c:	ldr	r0, [r4, r0]!
   11d80:	sub	r0, r0, #1
   11d84:	str	r0, [r4]
   11d88:	pop	{r4, r5, fp, pc}
   11d8c:	push	{r4, r5, fp, lr}
   11d90:	add	fp, sp, #8
   11d94:	mov	r4, r0
   11d98:	movw	r0, #8048	; 0x1f70
   11d9c:	mov	r5, r4
   11da0:	ldr	r0, [r5, r0]!
   11da4:	cmp	r0, #0
   11da8:	bne	11e00 <__assert_fail@plt+0x111c>
   11dac:	movw	r0, #8052	; 0x1f74
   11db0:	ldr	r0, [r4, r0]
   11db4:	cmp	r0, #0
   11db8:	popeq	{r4, r5, fp, pc}
   11dbc:	mov	r1, #4
   11dc0:	bl	12324 <__assert_fail@plt+0x1640>
   11dc4:	str	r0, [r5]
   11dc8:	mov	r0, #0
   11dcc:	movw	ip, #503	; 0x1f7
   11dd0:	mov	r2, #0
   11dd4:	ldr	r3, [r4, r2, lsl #4]
   11dd8:	b	11dec <__assert_fail@plt+0x1108>
   11ddc:	ldr	r1, [r5]
   11de0:	str	r3, [r1, r0, lsl #2]
   11de4:	add	r0, r0, #1
   11de8:	ldr	r3, [r3, #4]
   11dec:	cmp	r3, #0
   11df0:	bne	11ddc <__assert_fail@plt+0x10f8>
   11df4:	add	r2, r2, #1
   11df8:	cmp	r2, ip
   11dfc:	bne	11dd4 <__assert_fail@plt+0x10f0>
   11e00:	pop	{r4, r5, fp, pc}
   11e04:	push	{r4, r5, r6, r7, fp, lr}
   11e08:	add	fp, sp, #16
   11e0c:	mov	r5, r1
   11e10:	mov	r4, r0
   11e14:	movw	r7, #503	; 0x1f7
   11e18:	mov	r6, r0
   11e1c:	mov	r0, r6
   11e20:	mov	r1, r5
   11e24:	bl	11160 <__assert_fail@plt+0x47c>
   11e28:	subs	r7, r7, #1
   11e2c:	add	r6, r6, #16
   11e30:	bne	11e1c <__assert_fail@plt+0x1138>
   11e34:	movw	r0, #8048	; 0x1f70
   11e38:	mov	r5, r4
   11e3c:	ldr	r0, [r5, r0]!
   11e40:	cmp	r0, #0
   11e44:	beq	11e54 <__assert_fail@plt+0x1170>
   11e48:	bl	10b64 <free@plt>
   11e4c:	mov	r0, #0
   11e50:	str	r0, [r5]
   11e54:	movw	r0, #8052	; 0x1f74
   11e58:	mov	r1, #0
   11e5c:	str	r1, [r4, r0]
   11e60:	pop	{r4, r5, r6, r7, fp, pc}
   11e64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e68:	add	fp, sp, #28
   11e6c:	sub	sp, sp, #20
   11e70:	ldr	sl, [r1]
   11e74:	str	r0, [sp]
   11e78:	cmp	sl, #0
   11e7c:	str	sl, [sp, #8]
   11e80:	beq	121e0 <__assert_fail@plt+0x14fc>
   11e84:	add	r9, sp, #4
   11e88:	b	11e98 <__assert_fail@plt+0x11b4>
   11e8c:	cmp	r0, #29
   11e90:	beq	12110 <__assert_fail@plt+0x142c>
   11e94:	b	121d0 <__assert_fail@plt+0x14ec>
   11e98:	mov	r7, #17
   11e9c:	mov	r6, r9
   11ea0:	mov	r0, r6
   11ea4:	mov	r8, r7
   11ea8:	bl	12268 <__assert_fail@plt+0x1584>
   11eac:	mov	r6, r0
   11eb0:	bl	122b4 <__assert_fail@plt+0x15d0>
   11eb4:	mov	r7, r0
   11eb8:	mov	r0, r6
   11ebc:	bl	12268 <__assert_fail@plt+0x1584>
   11ec0:	mov	r5, r0
   11ec4:	bl	122b4 <__assert_fail@plt+0x15d0>
   11ec8:	mov	r4, r0
   11ecc:	mov	r0, r5
   11ed0:	bl	12268 <__assert_fail@plt+0x1584>
   11ed4:	bl	122b4 <__assert_fail@plt+0x15d0>
   11ed8:	cmp	r7, #1
   11edc:	cmpeq	r4, #2
   11ee0:	beq	1204c <__assert_fail@plt+0x1368>
   11ee4:	sub	r1, r7, #1
   11ee8:	cmp	r1, #3
   11eec:	subcs	r1, r4, #1
   11ef0:	cmpcs	r1, #3
   11ef4:	bcc	120cc <__assert_fail@plt+0x13e8>
   11ef8:	orr	r2, r7, #1
   11efc:	orr	r1, r4, #1
   11f00:	cmp	r2, #9
   11f04:	cmpeq	r1, #9
   11f08:	beq	1204c <__assert_fail@plt+0x1368>
   11f0c:	cmp	r2, #9
   11f10:	bne	11f38 <__assert_fail@plt+0x1254>
   11f14:	cmp	r4, #13
   11f18:	bhi	11f38 <__assert_fail@plt+0x1254>
   11f1c:	mov	r3, #1
   11f20:	mov	r5, #13312	; 0x3400
   11f24:	tst	r5, r3, lsl r4
   11f28:	beq	11f38 <__assert_fail@plt+0x1254>
   11f2c:	orr	r3, r0, #1
   11f30:	cmp	r3, #9
   11f34:	beq	1204c <__assert_fail@plt+0x1368>
   11f38:	orr	r3, r8, #1
   11f3c:	cmp	r3, #9
   11f40:	bne	11f64 <__assert_fail@plt+0x1280>
   11f44:	cmp	r7, #13
   11f48:	bhi	11f64 <__assert_fail@plt+0x1280>
   11f4c:	mov	r3, #1
   11f50:	mov	r5, #13312	; 0x3400
   11f54:	tst	r5, r3, lsl r7
   11f58:	beq	11f64 <__assert_fail@plt+0x1280>
   11f5c:	cmp	r1, #9
   11f60:	beq	1204c <__assert_fail@plt+0x1368>
   11f64:	cmp	r7, #8
   11f68:	cmpeq	r4, #10
   11f6c:	beq	1204c <__assert_fail@plt+0x1368>
   11f70:	cmp	r7, #8
   11f74:	cmpeq	r4, #11
   11f78:	beq	12038 <__assert_fail@plt+0x1354>
   11f7c:	cmp	r8, #8
   11f80:	cmpeq	r7, #11
   11f84:	beq	12044 <__assert_fail@plt+0x1360>
   11f88:	sub	r2, r2, #9
   11f8c:	sub	r3, r7, #15
   11f90:	clz	r2, r2
   11f94:	clz	r3, r3
   11f98:	lsr	ip, r2, #5
   11f9c:	sub	r2, r4, #15
   11fa0:	lsr	r3, r3, #5
   11fa4:	clz	r2, r2
   11fa8:	orr	r5, r3, ip
   11fac:	lsr	r2, r2, #5
   11fb0:	tst	r5, r2
   11fb4:	subeq	r1, r1, #9
   11fb8:	clzeq	r1, r1
   11fbc:	lsreq	r1, r1, #5
   11fc0:	andseq	r1, r3, r1
   11fc4:	bne	1204c <__assert_fail@plt+0x1368>
   11fc8:	cmp	r8, #15
   11fcc:	bne	11ffc <__assert_fail@plt+0x1318>
   11fd0:	orr	r2, r7, #2
   11fd4:	sub	r1, r7, #10
   11fd8:	sub	r2, r2, #14
   11fdc:	clz	r1, r1
   11fe0:	clz	r2, r2
   11fe4:	lsr	r1, r1, #5
   11fe8:	lsr	r2, r2, #5
   11fec:	orr	r1, r1, r2
   11ff0:	cmp	r1, #1
   11ff4:	cmpeq	r4, #15
   11ff8:	beq	1204c <__assert_fail@plt+0x1368>
   11ffc:	cmp	r7, #15
   12000:	bne	1205c <__assert_fail@plt+0x1378>
   12004:	orr	r2, r4, #2
   12008:	sub	r1, r4, #10
   1200c:	sub	r2, r2, #14
   12010:	clz	r1, r1
   12014:	clz	r2, r2
   12018:	lsr	r1, r1, #5
   1201c:	lsr	r2, r2, #5
   12020:	orr	r1, r1, r2
   12024:	cmp	r1, #1
   12028:	bne	12068 <__assert_fail@plt+0x1384>
   1202c:	cmp	r0, #15
   12030:	beq	1204c <__assert_fail@plt+0x1368>
   12034:	b	12068 <__assert_fail@plt+0x1384>
   12038:	cmp	r0, #8
   1203c:	beq	1204c <__assert_fail@plt+0x1368>
   12040:	b	11f7c <__assert_fail@plt+0x1298>
   12044:	cmp	r4, #8
   12048:	bne	11f88 <__assert_fail@plt+0x12a4>
   1204c:	ldr	r0, [r6, #4]
   12050:	cmp	r0, #0
   12054:	bne	11ea0 <__assert_fail@plt+0x11bc>
   12058:	b	120d4 <__assert_fail@plt+0x13f0>
   1205c:	cmp	r7, #7
   12060:	cmpeq	r4, #7
   12064:	beq	1204c <__assert_fail@plt+0x1368>
   12068:	cmp	r4, #16
   1206c:	bne	12098 <__assert_fail@plt+0x13b4>
   12070:	orr	r0, r7, #8
   12074:	sub	r1, r7, #16
   12078:	sub	r0, r0, #15
   1207c:	clz	r1, r1
   12080:	clz	r0, r0
   12084:	lsr	r1, r1, #5
   12088:	lsr	r0, r0, #5
   1208c:	orr	r0, r0, ip
   12090:	orrs	r0, r1, r0
   12094:	bne	1204c <__assert_fail@plt+0x1368>
   12098:	cmp	r7, #16
   1209c:	bne	120c0 <__assert_fail@plt+0x13dc>
   120a0:	cmp	r4, #16
   120a4:	bhi	120cc <__assert_fail@plt+0x13e8>
   120a8:	movw	r1, #33664	; 0x8380
   120ac:	mov	r0, #1
   120b0:	movt	r1, #1
   120b4:	tst	r1, r0, lsl r4
   120b8:	bne	1204c <__assert_fail@plt+0x1368>
   120bc:	b	120cc <__assert_fail@plt+0x13e8>
   120c0:	cmp	r7, #5
   120c4:	cmpeq	r4, #5
   120c8:	beq	1204c <__assert_fail@plt+0x1368>
   120cc:	cmp	r6, #0
   120d0:	beq	121e0 <__assert_fail@plt+0x14fc>
   120d4:	mov	r7, r6
   120d8:	ldr	r6, [r6, #4]
   120dc:	cmp	r6, #0
   120e0:	beq	120f8 <__assert_fail@plt+0x1414>
   120e4:	mov	r0, r6
   120e8:	bl	122b4 <__assert_fail@plt+0x15d0>
   120ec:	orr	r0, r0, #2
   120f0:	cmp	r0, #6
   120f4:	beq	120d4 <__assert_fail@plt+0x13f0>
   120f8:	ldr	r0, [sl, #12]
   120fc:	bl	10b70 <utf8proc_get_property@plt>
   12100:	ldrsh	r0, [r0]
   12104:	sub	r1, r0, #1
   12108:	cmp	r1, #12
   1210c:	bcs	11e8c <__assert_fail@plt+0x11a8>
   12110:	ldr	r5, [r7, #4]
   12114:	cmp	r5, sl
   12118:	beq	12188 <__assert_fail@plt+0x14a4>
   1211c:	mov	r4, #0
   12120:	mov	r6, sl
   12124:	cmp	r6, #0
   12128:	beq	121e8 <__assert_fail@plt+0x1504>
   1212c:	ldr	r0, [r6, #12]
   12130:	mov	r1, r9
   12134:	bl	10b88 <utf8proc_encode_char@plt>
   12138:	cmp	r0, #0
   1213c:	beq	12208 <__assert_fail@plt+0x1524>
   12140:	ldr	r6, [r6, #4]
   12144:	add	r4, r0, r4
   12148:	cmp	r6, r5
   1214c:	bne	12124 <__assert_fail@plt+0x1440>
   12150:	add	r0, r4, #1
   12154:	bl	10bf4 <malloc@plt>
   12158:	mov	r4, r0
   1215c:	mov	r6, #0
   12160:	cmp	sl, #0
   12164:	beq	12228 <__assert_fail@plt+0x1544>
   12168:	ldr	r0, [sl, #12]
   1216c:	add	r1, r4, r6
   12170:	bl	10b88 <utf8proc_encode_char@plt>
   12174:	ldr	sl, [sl, #4]
   12178:	add	r6, r0, r6
   1217c:	cmp	sl, r5
   12180:	bne	12160 <__assert_fail@plt+0x147c>
   12184:	b	12198 <__assert_fail@plt+0x14b4>
   12188:	mov	r0, #1
   1218c:	bl	10bf4 <malloc@plt>
   12190:	mov	r4, r0
   12194:	mov	r6, #0
   12198:	mov	r0, #0
   1219c:	mov	r1, #12
   121a0:	strb	r0, [r4, r6]
   121a4:	mov	r0, #1
   121a8:	bl	12324 <__assert_fail@plt+0x1640>
   121ac:	mov	r5, r0
   121b0:	mov	r0, r4
   121b4:	bl	10c78 <utf8proc_NFC@plt>
   121b8:	str	r0, [r5, #8]
   121bc:	ldr	r0, [sp]
   121c0:	mov	r1, r5
   121c4:	bl	1106c <__assert_fail@plt+0x388>
   121c8:	mov	r0, r4
   121cc:	bl	10b64 <free@plt>
   121d0:	ldr	sl, [r7, #4]
   121d4:	cmp	sl, #0
   121d8:	str	sl, [sp, #8]
   121dc:	bne	11e98 <__assert_fail@plt+0x11b4>
   121e0:	sub	sp, fp, #28
   121e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e8:	movw	r0, #25763	; 0x64a3
   121ec:	movw	r1, #25756	; 0x649c
   121f0:	movw	r3, #25779	; 0x64b3
   121f4:	mov	r2, #249	; 0xf9
   121f8:	movt	r0, #1
   121fc:	movt	r1, #1
   12200:	movt	r3, #1
   12204:	bl	10ce4 <__assert_fail@plt>
   12208:	movw	r0, #25805	; 0x64cd
   1220c:	movw	r1, #25756	; 0x649c
   12210:	movw	r3, #25779	; 0x64b3
   12214:	mov	r2, #253	; 0xfd
   12218:	movt	r0, #1
   1221c:	movt	r1, #1
   12220:	movt	r3, #1
   12224:	bl	10ce4 <__assert_fail@plt>
   12228:	movw	r0, #25763	; 0x64a3
   1222c:	movw	r1, #25756	; 0x649c
   12230:	movw	r3, #25824	; 0x64e0
   12234:	movw	r2, #269	; 0x10d
   12238:	movt	r0, #1
   1223c:	movt	r1, #1
   12240:	movt	r3, #1
   12244:	bl	10ce4 <__assert_fail@plt>
   12248:	push	{r4, sl, fp, lr}
   1224c:	add	fp, sp, #8
   12250:	mov	r4, r0
   12254:	ldr	r0, [r0, #8]
   12258:	bl	10b64 <free@plt>
   1225c:	mov	r0, r4
   12260:	pop	{r4, sl, fp, lr}
   12264:	b	10b64 <free@plt>
   12268:	push	{r4, r5, fp, lr}
   1226c:	add	fp, sp, #8
   12270:	mov	r4, #0
   12274:	cmp	r0, #0
   12278:	beq	122ac <__assert_fail@plt+0x15c8>
   1227c:	ldr	r5, [r0, #4]
   12280:	b	1229c <__assert_fail@plt+0x15b8>
   12284:	mov	r0, r5
   12288:	bl	122b4 <__assert_fail@plt+0x15d0>
   1228c:	orr	r0, r0, #2
   12290:	cmp	r0, #6
   12294:	bne	122a8 <__assert_fail@plt+0x15c4>
   12298:	ldr	r5, [r5, #4]
   1229c:	cmp	r5, #0
   122a0:	bne	12284 <__assert_fail@plt+0x15a0>
   122a4:	b	122ac <__assert_fail@plt+0x15c8>
   122a8:	mov	r4, r5
   122ac:	mov	r0, r4
   122b0:	pop	{r4, r5, fp, pc}
   122b4:	push	{r4, sl, fp, lr}
   122b8:	add	fp, sp, #8
   122bc:	cmp	r0, #0
   122c0:	moveq	r0, #18
   122c4:	popeq	{r4, sl, fp, pc}
   122c8:	ldr	lr, [r0, #12]
   122cc:	movw	ip, #12640	; 0x3160
   122d0:	mov	r3, #0
   122d4:	movw	r2, #1092	; 0x444
   122d8:	movt	ip, #1
   122dc:	sub	r0, r2, r3
   122e0:	add	r1, r3, r0, lsr #1
   122e4:	add	r0, r1, r1, lsl #1
   122e8:	ldr	r4, [ip, r0, lsl #2]
   122ec:	cmp	r4, lr
   122f0:	bls	12308 <__assert_fail@plt+0x1624>
   122f4:	sub	r2, r1, #1
   122f8:	cmp	r2, r3
   122fc:	movcc	r0, #0
   12300:	popcc	{r4, sl, fp, pc}
   12304:	b	122dc <__assert_fail@plt+0x15f8>
   12308:	add	r0, ip, r0, lsl #2
   1230c:	ldr	r3, [r0, #4]
   12310:	cmp	r3, lr
   12314:	ldrcs	r0, [r0, #8]
   12318:	popcs	{r4, sl, fp, pc}
   1231c:	add	r3, r1, #1
   12320:	b	122f8 <__assert_fail@plt+0x1614>
   12324:	push	{fp, lr}
   12328:	mov	fp, sp
   1232c:	bl	10b34 <calloc@plt>
   12330:	cmp	r0, #0
   12334:	popne	{fp, pc}
   12338:	movw	r0, #25848	; 0x64f8
   1233c:	movt	r0, #1
   12340:	bl	127b0 <error@@Base>
   12344:	push	{r4, r5, r6, sl, fp, lr}
   12348:	add	fp, sp, #16
   1234c:	ldrb	r3, [r0]
   12350:	ldrb	ip, [r1]
   12354:	mov	r2, r0
   12358:	mov	r0, #0
   1235c:	cmp	r3, #0
   12360:	beq	12398 <__assert_fail@plt+0x16b4>
   12364:	add	r6, r2, #1
   12368:	add	lr, r1, #1
   1236c:	mov	r2, #0
   12370:	uxtb	r4, ip
   12374:	uxtb	r5, r3
   12378:	cmp	r5, r4
   1237c:	bne	123a8 <__assert_fail@plt+0x16c4>
   12380:	ldrb	r3, [r6, r2]
   12384:	ldrb	ip, [lr, r2]
   12388:	add	r2, r2, #1
   1238c:	cmp	r3, #0
   12390:	bne	12370 <__assert_fail@plt+0x168c>
   12394:	b	1239c <__assert_fail@plt+0x16b8>
   12398:	mov	r2, #0
   1239c:	cmp	ip, #0
   123a0:	popeq	{r4, r5, r6, sl, fp, pc}
   123a4:	mov	r3, #0
   123a8:	ldrb	r1, [r1, r2]
   123ac:	uxtb	r2, r3
   123b0:	mov	r0, #1
   123b4:	cmp	r2, r1
   123b8:	mvncc	r0, #0
   123bc:	pop	{r4, r5, r6, sl, fp, pc}
   123c0:	push	{r4, r5, fp, lr}
   123c4:	add	fp, sp, #8
   123c8:	mov	r5, r1
   123cc:	cmp	r0, #0
   123d0:	beq	12404 <__assert_fail@plt+0x1720>
   123d4:	mov	r1, r5
   123d8:	mov	r4, r0
   123dc:	bl	10b58 <fopen@plt>
   123e0:	cmp	r0, #0
   123e4:	popne	{r4, r5, fp, pc}
   123e8:	ldrb	r0, [r5]
   123ec:	cmp	r0, #119	; 0x77
   123f0:	bne	12428 <__assert_fail@plt+0x1744>
   123f4:	movw	r0, #25874	; 0x6512
   123f8:	mov	r1, r4
   123fc:	movt	r0, #1
   12400:	bl	127f0 <error@@Base+0x40>
   12404:	ldrb	r0, [r5]
   12408:	movw	r1, #28872	; 0x70c8
   1240c:	movw	r2, #28876	; 0x70cc
   12410:	movt	r1, #2
   12414:	movt	r2, #2
   12418:	cmp	r0, #114	; 0x72
   1241c:	moveq	r2, r1
   12420:	ldr	r0, [r2]
   12424:	pop	{r4, r5, fp, pc}
   12428:	movw	r0, #25896	; 0x6528
   1242c:	mov	r1, r4
   12430:	movt	r0, #1
   12434:	bl	127f0 <error@@Base+0x40>
   12438:	movw	r1, #28872	; 0x70c8
   1243c:	movt	r1, #2
   12440:	ldr	r1, [r1]
   12444:	cmp	r1, r0
   12448:	movwne	r1, #28876	; 0x70cc
   1244c:	movtne	r1, #2
   12450:	ldrne	r1, [r1]
   12454:	cmpne	r1, r0
   12458:	bxeq	lr
   1245c:	b	10c6c <fclose@plt>
   12460:	push	{fp, lr}
   12464:	mov	fp, sp
   12468:	sub	sp, sp, #88	; 0x58
   1246c:	mov	r1, sp
   12470:	bl	12fd4 <error@@Base+0x824>
   12474:	clz	r0, r0
   12478:	lsr	r0, r0, #5
   1247c:	mov	sp, fp
   12480:	pop	{fp, pc}
   12484:	push	{r4, sl, fp, lr}
   12488:	add	fp, sp, #8
   1248c:	movw	r0, #28992	; 0x7140
   12490:	movt	r0, #2
   12494:	ldrh	r1, [r0]
   12498:	add	r1, r1, #1
   1249c:	strh	r1, [r0]
   124a0:	sxth	r0, r1
   124a4:	bl	124b8 <__assert_fail@plt+0x17d4>
   124a8:	mov	r4, r0
   124ac:	bl	10bac <unlink@plt>
   124b0:	mov	r0, r4
   124b4:	pop	{r4, sl, fp, pc}
   124b8:	push	{r4, r5, fp, lr}
   124bc:	add	fp, sp, #8
   124c0:	sub	sp, sp, #104	; 0x68
   124c4:	mov	r4, r0
   124c8:	movw	r0, #37088	; 0x90e0
   124cc:	movt	r0, #2
   124d0:	ldr	r5, [r0]
   124d4:	bl	10c24 <getpid@plt>
   124d8:	movw	r1, #25937	; 0x6551
   124dc:	mov	r3, r0
   124e0:	sxth	r0, r4
   124e4:	add	r4, sp, #4
   124e8:	mov	r2, r5
   124ec:	str	r0, [sp]
   124f0:	movt	r1, #1
   124f4:	mov	r0, r4
   124f8:	bl	10c90 <sprintf@plt>
   124fc:	mov	r0, r4
   12500:	bl	10b94 <strdup@plt>
   12504:	sub	sp, fp, #8
   12508:	pop	{r4, r5, fp, pc}
   1250c:	push	{r4, sl, fp, lr}
   12510:	add	fp, sp, #8
   12514:	mov	r4, r0
   12518:	bl	10c48 <strlen@plt>
   1251c:	sub	r0, r0, #1
   12520:	sxth	r0, r0
   12524:	cmp	r0, #0
   12528:	blt	12538 <__assert_fail@plt+0x1854>
   1252c:	ldrb	r1, [r4, r0]
   12530:	cmp	r1, #47	; 0x2f
   12534:	bne	1251c <__assert_fail@plt+0x1838>
   12538:	add	r0, r4, r0
   1253c:	add	r0, r0, #1
   12540:	pop	{r4, sl, fp, pc}
   12544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12548:	add	fp, sp, #28
   1254c:	sub	sp, sp, #12
   12550:	str	r2, [sp]
   12554:	stmib	sp, {r0, r1}
   12558:	mov	r6, r3
   1255c:	ldr	r4, [r1]
   12560:	mov	r0, r4
   12564:	bl	10c48 <strlen@plt>
   12568:	sub	r0, r0, #1
   1256c:	sxth	r0, r0
   12570:	cmp	r0, #0
   12574:	blt	12584 <__assert_fail@plt+0x18a0>
   12578:	ldrb	r1, [r4, r0]
   1257c:	cmp	r1, #47	; 0x2f
   12580:	bne	12568 <__assert_fail@plt+0x1884>
   12584:	add	r0, r4, r0
   12588:	movw	r1, #37088	; 0x90e0
   1258c:	movw	r4, #10360	; 0x2878
   12590:	add	r0, r0, #1
   12594:	movt	r1, #2
   12598:	movt	r4, #1
   1259c:	str	r0, [r1]
   125a0:	mov	r0, #2
   125a4:	mov	r1, r4
   125a8:	bl	10c0c <__sysv_signal@plt>
   125ac:	mov	r0, #15
   125b0:	mov	r1, r4
   125b4:	bl	10c0c <__sysv_signal@plt>
   125b8:	ldr	r0, [sp, #4]
   125bc:	ldr	r5, [r0]
   125c0:	cmp	r5, #1
   125c4:	bne	125dc <__assert_fail@plt+0x18f8>
   125c8:	movw	r0, #28856	; 0x70b8
   125cc:	movt	r0, #2
   125d0:	ldrb	r0, [r0]
   125d4:	cmp	r0, #0
   125d8:	bne	12758 <__assert_fail@plt+0x1a74>
   125dc:	ldr	ip, [sp, #8]
   125e0:	mov	r8, #0
   125e4:	cmp	r5, #2
   125e8:	blt	12734 <__assert_fail@plt+0x1a50>
   125ec:	mov	r8, #0
   125f0:	mov	r7, #1
   125f4:	mov	r9, #1
   125f8:	ldr	r4, [ip, r7, lsl #2]
   125fc:	ldrb	r0, [r4]
   12600:	cmp	r0, #45	; 0x2d
   12604:	bne	126dc <__assert_fail@plt+0x19f8>
   12608:	ldrb	sl, [r4, #1]
   1260c:	cmp	sl, #0
   12610:	beq	126dc <__assert_fail@plt+0x19f8>
   12614:	mov	r0, r4
   12618:	bl	10c48 <strlen@plt>
   1261c:	mov	r2, r0
   12620:	movw	r0, #25966	; 0x656e
   12624:	mov	r1, r4
   12628:	movt	r0, #1
   1262c:	bl	10cc0 <strncmp@plt>
   12630:	cmp	r0, #0
   12634:	beq	12758 <__assert_fail@plt+0x1a74>
   12638:	ldr	ip, [sp, #8]
   1263c:	add	r1, r7, #1
   12640:	mov	r0, #0
   12644:	cmp	r1, r5
   12648:	ldrlt	r0, [ip, r1, lsl #2]
   1264c:	cmp	r6, #0
   12650:	ldrbne	r2, [r6]
   12654:	cmpne	r2, #0
   12658:	beq	12748 <__assert_fail@plt+0x1a64>
   1265c:	mov	r1, #0
   12660:	cmp	sl, r2
   12664:	beq	1268c <__assert_fail@plt+0x19a8>
   12668:	mov	r2, #1
   1266c:	sxth	r1, r2
   12670:	add	r3, r1, r1, lsl #1
   12674:	ldrb	r3, [r6, r3, lsl #2]
   12678:	cmp	r3, #0
   1267c:	beq	12748 <__assert_fail@plt+0x1a64>
   12680:	add	r2, r2, #1
   12684:	cmp	sl, r3
   12688:	bne	1266c <__assert_fail@plt+0x1988>
   1268c:	add	r1, r1, r1, lsl #1
   12690:	add	r3, r6, r1, lsl #2
   12694:	ldr	r1, [r3, #4]
   12698:	cmp	r1, #0
   1269c:	beq	126fc <__assert_fail@plt+0x1a18>
   126a0:	mov	r2, r4
   126a4:	cmp	r0, #0
   126a8:	ldrb	r7, [r2, #2]!
   126ac:	cmpeq	r7, #0
   126b0:	beq	126fc <__assert_fail@plt+0x1a18>
   126b4:	ldr	r3, [r1]
   126b8:	cmp	r3, #0
   126bc:	bne	12760 <__assert_fail@plt+0x1a7c>
   126c0:	cmp	r7, #0
   126c4:	movne	r0, r2
   126c8:	str	r0, [r1]
   126cc:	ldrb	r0, [r2]
   126d0:	cmp	r0, #0
   126d4:	addeq	r9, r9, #1
   126d8:	b	126e8 <__assert_fail@plt+0x1a04>
   126dc:	sxth	r0, r8
   126e0:	add	r8, r8, #1
   126e4:	str	r4, [ip, r0, lsl #2]
   126e8:	add	r9, r9, #1
   126ec:	sxth	r7, r9
   126f0:	cmp	r5, r7
   126f4:	bgt	125f8 <__assert_fail@plt+0x1914>
   126f8:	b	12734 <__assert_fail@plt+0x1a50>
   126fc:	ldr	r0, [r3, #8]
   12700:	cmp	r0, #0
   12704:	beq	12748 <__assert_fail@plt+0x1a64>
   12708:	ldrb	r1, [r4, #2]
   1270c:	cmp	r1, #0
   12710:	bne	12748 <__assert_fail@plt+0x1a64>
   12714:	ldrb	r1, [r0]
   12718:	cmp	r1, #0
   1271c:	bne	12760 <__assert_fail@plt+0x1a7c>
   12720:	mov	r1, #1
   12724:	strb	r1, [r0]
   12728:	ldr	r0, [sp, #4]
   1272c:	ldr	r5, [r0]
   12730:	b	126e8 <__assert_fail@plt+0x1a04>
   12734:	ldr	r1, [sp, #4]
   12738:	sxth	r0, r8
   1273c:	str	r0, [r1]
   12740:	sub	sp, fp, #28
   12744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12748:	movw	r0, #25987	; 0x6583
   1274c:	mov	r1, r4
   12750:	movt	r0, #1
   12754:	bl	127f0 <error@@Base+0x40>
   12758:	ldr	r0, [sp]
   1275c:	bl	128a8 <error@@Base+0xf8>
   12760:	movw	r0, #26002	; 0x6592
   12764:	mov	r1, r4
   12768:	movt	r0, #1
   1276c:	bl	127f0 <error@@Base+0x40>
   12770:	push	{fp, lr}
   12774:	mov	fp, sp
   12778:	mov	r0, #0
   1277c:	bl	12780 <__assert_fail@plt+0x1a9c>
   12780:	push	{fp, lr}
   12784:	mov	fp, sp
   12788:	mov	r4, r0
   1278c:	movw	r0, #37092	; 0x90e4
   12790:	movt	r0, #2
   12794:	ldr	r0, [r0]
   12798:	cmp	r0, #0
   1279c:	beq	127a4 <__assert_fail@plt+0x1ac0>
   127a0:	blx	r0
   127a4:	bl	128f8 <error@@Base+0x148>
   127a8:	mov	r0, r4
   127ac:	bl	10c30 <exit@plt>

000127b0 <error@@Base>:
   127b0:	push	{fp, lr}
   127b4:	mov	fp, sp
   127b8:	mov	r3, r0
   127bc:	movw	r0, #37088	; 0x90e0
   127c0:	movw	r1, #25916	; 0x653c
   127c4:	movt	r0, #2
   127c8:	movt	r1, #1
   127cc:	ldr	r2, [r0]
   127d0:	movw	r0, #28864	; 0x70c0
   127d4:	movt	r0, #2
   127d8:	ldr	r0, [r0]
   127dc:	bl	10c54 <fprintf@plt>
   127e0:	movw	r0, #28860	; 0x70bc
   127e4:	movt	r0, #2
   127e8:	ldr	r0, [r0]
   127ec:	bl	12780 <__assert_fail@plt+0x1a9c>
   127f0:	push	{fp, lr}
   127f4:	mov	fp, sp
   127f8:	sub	sp, sp, #8
   127fc:	mov	r3, r0
   12800:	movw	r0, #37088	; 0x90e0
   12804:	str	r1, [sp]
   12808:	movw	r1, #25924	; 0x6544
   1280c:	movt	r0, #2
   12810:	movt	r1, #1
   12814:	ldr	r2, [r0]
   12818:	movw	r0, #28864	; 0x70c0
   1281c:	movt	r0, #2
   12820:	ldr	r0, [r0]
   12824:	bl	10c54 <fprintf@plt>
   12828:	movw	r0, #28860	; 0x70bc
   1282c:	movt	r0, #2
   12830:	ldr	r0, [r0]
   12834:	bl	12780 <__assert_fail@plt+0x1a9c>
   12838:	push	{fp, lr}
   1283c:	mov	fp, sp
   12840:	sub	sp, sp, #8
   12844:	mov	r3, r0
   12848:	movw	r0, #37088	; 0x90e0
   1284c:	str	r1, [sp]
   12850:	movw	r1, #25924	; 0x6544
   12854:	movt	r0, #2
   12858:	movt	r1, #1
   1285c:	ldr	r2, [r0]
   12860:	movw	r0, #28864	; 0x70c0
   12864:	movt	r0, #2
   12868:	ldr	r0, [r0]
   1286c:	bl	10c54 <fprintf@plt>
   12870:	mov	sp, fp
   12874:	pop	{fp, pc}
   12878:	movw	r0, #28994	; 0x7142
   1287c:	movt	r0, #2
   12880:	ldrb	r1, [r0]
   12884:	cmp	r1, #1
   12888:	bxeq	lr
   1288c:	push	{fp, lr}
   12890:	mov	fp, sp
   12894:	mov	r1, #1
   12898:	strb	r1, [r0]
   1289c:	movw	r0, #25951	; 0x655f
   128a0:	movt	r0, #1
   128a4:	bl	127b0 <error@@Base>
   128a8:	push	{fp, lr}
   128ac:	mov	fp, sp
   128b0:	mov	r3, r0
   128b4:	movw	r0, #37084	; 0x90dc
   128b8:	movt	r0, #2
   128bc:	ldr	r0, [r0]
   128c0:	cmp	r0, #0
   128c4:	bne	128f0 <error@@Base+0x140>
   128c8:	movw	r0, #37088	; 0x90e0
   128cc:	movw	r1, #25972	; 0x6574
   128d0:	movt	r0, #2
   128d4:	movt	r1, #1
   128d8:	ldr	r2, [r0]
   128dc:	movw	r0, #28864	; 0x70c0
   128e0:	movt	r0, #2
   128e4:	ldr	r0, [r0]
   128e8:	bl	10c54 <fprintf@plt>
   128ec:	bl	12770 <__assert_fail@plt+0x1a8c>
   128f0:	blx	r0
   128f4:	bl	12770 <__assert_fail@plt+0x1a8c>
   128f8:	push	{r4, r5, r6, sl, fp, lr}
   128fc:	add	fp, sp, #16
   12900:	movw	r5, #28992	; 0x7140
   12904:	movt	r5, #2
   12908:	ldrsh	r0, [r5]
   1290c:	cmp	r0, #1
   12910:	poplt	{r4, r5, r6, sl, fp, pc}
   12914:	mov	r6, #1
   12918:	sxth	r0, r6
   1291c:	bl	124b8 <__assert_fail@plt+0x17d4>
   12920:	mov	r4, r0
   12924:	bl	10bac <unlink@plt>
   12928:	mov	r0, r4
   1292c:	bl	10b64 <free@plt>
   12930:	add	r0, r6, #1
   12934:	sxth	r6, r0
   12938:	ldrsh	r0, [r5]
   1293c:	cmp	r6, r0
   12940:	ble	12918 <error@@Base+0x168>
   12944:	pop	{r4, r5, r6, sl, fp, pc}
   12948:	push	{r4, r5, r6, sl, fp, lr}
   1294c:	add	fp, sp, #16
   12950:	mov	r5, r1
   12954:	mov	r6, r0
   12958:	mov	r0, #1
   1295c:	mov	r1, #16
   12960:	mov	r4, r2
   12964:	bl	12324 <__assert_fail@plt+0x1640>
   12968:	strb	r5, [r0, #8]
   1296c:	mov	r1, r0
   12970:	str	r4, [r0, #12]
   12974:	mov	r0, r6
   12978:	pop	{r4, r5, r6, sl, fp, lr}
   1297c:	b	1106c <__assert_fail@plt+0x388>
   12980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12984:	add	fp, sp, #28
   12988:	sub	sp, sp, #124	; 0x7c
   1298c:	mov	r4, r2
   12990:	mov	r2, r1
   12994:	cmp	r1, #0
   12998:	str	r0, [sp, #16]
   1299c:	bne	129ac <error@@Base+0x1fc>
   129a0:	ldrb	r0, [r4]
   129a4:	cmp	r0, #0
   129a8:	bne	12cd4 <error@@Base+0x524>
   129ac:	ldr	r0, [sp, #16]
   129b0:	movw	r1, #26221	; 0x666d
   129b4:	movt	r1, #1
   129b8:	ldr	r0, [r0, #4]
   129bc:	str	r0, [sp, #4]
   129c0:	mov	r0, r2
   129c4:	bl	123c0 <__assert_fail@plt+0x16dc>
   129c8:	mov	r6, r0
   129cc:	ldrb	r0, [r4]
   129d0:	cmp	r0, #0
   129d4:	beq	12a1c <error@@Base+0x26c>
   129d8:	add	r0, sp, #20
   129dc:	mov	r1, #99	; 0x63
   129e0:	mov	r2, r6
   129e4:	bl	10b7c <fgets@plt>
   129e8:	cmp	r0, #0
   129ec:	beq	12a0c <error@@Base+0x25c>
   129f0:	movw	r1, #26087	; 0x65e7
   129f4:	add	r0, sp, #20
   129f8:	mov	r2, #51	; 0x33
   129fc:	movt	r1, #1
   12a00:	bl	10cc0 <strncmp@plt>
   12a04:	cmp	r0, #0
   12a08:	beq	12c64 <error@@Base+0x4b4>
   12a0c:	mov	r0, r6
   12a10:	bl	10ba0 <rewind@plt>
   12a14:	mov	r5, #0
   12a18:	strb	r5, [r4, #11]
   12a1c:	ldr	r9, [r4, #4]
   12a20:	ldrb	r8, [r4, #1]
   12a24:	mov	r0, r6
   12a28:	str	r4, [sp, #8]
   12a2c:	cmp	r9, #0
   12a30:	movweq	r9, #94	; 0x5e
   12a34:	bl	10cd8 <getc@plt>
   12a38:	cmn	r0, #1
   12a3c:	beq	12b00 <error@@Base+0x350>
   12a40:	add	r1, sp, #20
   12a44:	mov	sl, #0
   12a48:	sub	r4, fp, #32
   12a4c:	add	r1, r1, #1
   12a50:	str	r1, [sp, #12]
   12a54:	movw	r1, #28160	; 0x6e00
   12a58:	movt	r1, #2
   12a5c:	add	r1, r1, r0
   12a60:	ldrsb	r5, [r1]
   12a64:	cmp	r5, #0
   12a68:	ble	12cb4 <error@@Base+0x504>
   12a6c:	cmp	r5, #1
   12a70:	strb	r0, [sp, #20]
   12a74:	beq	12a98 <error@@Base+0x2e8>
   12a78:	ldr	r0, [sp, #12]
   12a7c:	sub	r7, r5, #1
   12a80:	mov	r1, #1
   12a84:	mov	r3, r6
   12a88:	mov	r2, r7
   12a8c:	bl	10bd0 <fread@plt>
   12a90:	cmp	r0, r7
   12a94:	bne	12cc8 <error@@Base+0x518>
   12a98:	add	r0, sp, #20
   12a9c:	mov	r1, #4
   12aa0:	mov	r2, r4
   12aa4:	bl	10bdc <utf8proc_iterate@plt>
   12aa8:	cmp	r0, r5
   12aac:	bne	12cc0 <error@@Base+0x510>
   12ab0:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12ab4:	cmp	r8, #0
   12ab8:	beq	12ac8 <error@@Base+0x318>
   12abc:	mov	r7, #1
   12ac0:	cmp	r5, r9
   12ac4:	beq	12aec <error@@Base+0x33c>
   12ac8:	mov	r0, #1
   12acc:	mov	r1, #16
   12ad0:	bl	12324 <__assert_fail@plt+0x1640>
   12ad4:	strb	sl, [r0, #8]
   12ad8:	mov	r1, r0
   12adc:	str	r5, [r0, #12]
   12ae0:	ldr	r0, [sp, #16]
   12ae4:	bl	1106c <__assert_fail@plt+0x388>
   12ae8:	mov	r7, #0
   12aec:	mov	r0, r6
   12af0:	bl	10cd8 <getc@plt>
   12af4:	cmn	r0, #1
   12af8:	mov	sl, r7
   12afc:	bne	12a54 <error@@Base+0x2a4>
   12b00:	mov	r0, r6
   12b04:	bl	12438 <__assert_fail@plt+0x1754>
   12b08:	ldr	r8, [sp, #8]
   12b0c:	ldr	r9, [sp, #4]
   12b10:	ldrb	r0, [r8, #9]
   12b14:	cmp	r0, #0
   12b18:	beq	12c24 <error@@Base+0x474>
   12b1c:	ldr	r0, [sp, #16]
   12b20:	cmp	r9, #0
   12b24:	addne	r0, r9, #4
   12b28:	ldr	r6, [r0]
   12b2c:	cmp	r6, #0
   12b30:	beq	12c24 <error@@Base+0x474>
   12b34:	mov	r5, #32
   12b38:	mov	r7, r6
   12b3c:	ldr	r4, [r7, #12]
   12b40:	mov	r0, r4
   12b44:	bl	10b70 <utf8proc_get_property@plt>
   12b48:	cmp	r4, #10
   12b4c:	ble	12b68 <error@@Base+0x3b8>
   12b50:	sub	r1, r4, #11
   12b54:	cmp	r1, #3
   12b58:	bcc	12b8c <error@@Base+0x3dc>
   12b5c:	cmp	r4, #160	; 0xa0
   12b60:	beq	12b8c <error@@Base+0x3dc>
   12b64:	b	12b78 <error@@Base+0x3c8>
   12b68:	cmp	r4, #9
   12b6c:	beq	12b8c <error@@Base+0x3dc>
   12b70:	cmp	r4, #10
   12b74:	beq	12b90 <error@@Base+0x3e0>
   12b78:	ldrsh	r0, [r0]
   12b7c:	sub	r0, r0, #23
   12b80:	cmp	r0, #2
   12b84:	strls	r5, [r7, #12]
   12b88:	b	12b90 <error@@Base+0x3e0>
   12b8c:	str	r5, [r7, #12]
   12b90:	ldr	r7, [r7, #4]
   12b94:	cmp	r7, #0
   12b98:	bne	12b3c <error@@Base+0x38c>
   12b9c:	mov	r4, #0
   12ba0:	ldr	r1, [r6, #12]
   12ba4:	ldr	r5, [r6, #4]
   12ba8:	cmp	r1, #32
   12bac:	bne	12be8 <error@@Base+0x438>
   12bb0:	tst	r4, #255	; 0xff
   12bb4:	beq	12c04 <error@@Base+0x454>
   12bb8:	cmp	r5, #0
   12bbc:	ldrne	r1, [r5, #12]
   12bc0:	cmpne	r1, #10
   12bc4:	beq	12c04 <error@@Base+0x454>
   12bc8:	mov	r0, #1
   12bcc:	cmp	r1, #32
   12bd0:	bne	12bfc <error@@Base+0x44c>
   12bd4:	ldrb	r0, [r6, #8]
   12bd8:	ldrb	r1, [r5, #8]
   12bdc:	orr	r0, r1, r0
   12be0:	strb	r0, [r5, #8]
   12be4:	b	12c04 <error@@Base+0x454>
   12be8:	subs	r0, r1, #10
   12bec:	movwne	r0, #1
   12bf0:	tst	r4, #255	; 0xff
   12bf4:	cmpeq	r1, #10
   12bf8:	beq	12c04 <error@@Base+0x454>
   12bfc:	mov	r4, r0
   12c00:	b	12c18 <error@@Base+0x468>
   12c04:	ldr	r0, [sp, #16]
   12c08:	mov	r1, r6
   12c0c:	bl	11094 <__assert_fail@plt+0x3b0>
   12c10:	mov	r0, r6
   12c14:	bl	10b64 <free@plt>
   12c18:	cmp	r5, #0
   12c1c:	mov	r6, r5
   12c20:	bne	12ba0 <error@@Base+0x3f0>
   12c24:	ldrb	r0, [r8, #10]
   12c28:	cmp	r0, #0
   12c2c:	beq	12c5c <error@@Base+0x4ac>
   12c30:	ldr	r0, [sp, #16]
   12c34:	cmp	r9, #0
   12c38:	addne	r0, r9, #4
   12c3c:	ldr	r4, [r0]
   12c40:	b	12c54 <error@@Base+0x4a4>
   12c44:	ldr	r0, [r4, #12]
   12c48:	bl	10bb8 <utf8proc_tolower@plt>
   12c4c:	str	r0, [r4, #12]
   12c50:	ldr	r4, [r4, #4]
   12c54:	cmp	r4, #0
   12c58:	bne	12c44 <error@@Base+0x494>
   12c5c:	sub	sp, fp, #28
   12c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c64:	movw	r8, #26143	; 0x661f
   12c68:	mov	r7, #0
   12c6c:	add	r9, sp, #20
   12c70:	mov	r5, #1
   12c74:	movt	r8, #1
   12c78:	mov	r0, r9
   12c7c:	mov	r1, #99	; 0x63
   12c80:	mov	r2, r6
   12c84:	bl	10b7c <fgets@plt>
   12c88:	cmp	r0, #0
   12c8c:	beq	12a18 <error@@Base+0x268>
   12c90:	mov	r0, r9
   12c94:	mov	r1, r8
   12c98:	bl	10b40 <strcmp@plt>
   12c9c:	cmp	r0, #0
   12ca0:	addeq	r7, r7, #1
   12ca4:	sxth	r7, r7
   12ca8:	cmp	r7, #2
   12cac:	blt	12c78 <error@@Base+0x4c8>
   12cb0:	b	12a18 <error@@Base+0x268>
   12cb4:	movw	r0, #26199	; 0x6657
   12cb8:	movt	r0, #1
   12cbc:	bl	127b0 <error@@Base>
   12cc0:	bl	10ca8 <utf8proc_errmsg@plt>
   12cc4:	bl	127b0 <error@@Base>
   12cc8:	movw	r0, #26223	; 0x666f
   12ccc:	movt	r0, #1
   12cd0:	bl	127b0 <error@@Base>
   12cd4:	movw	r0, #26019	; 0x65a3
   12cd8:	movw	r1, #26035	; 0x65b3
   12cdc:	movt	r0, #1
   12ce0:	movt	r1, #1
   12ce4:	bl	127f0 <error@@Base+0x40>
   12ce8:	push	{fp, lr}
   12cec:	mov	fp, sp
   12cf0:	bl	10b88 <utf8proc_encode_char@plt>
   12cf4:	cmp	r0, #0
   12cf8:	sxtbgt	r0, r0
   12cfc:	popgt	{fp, pc}
   12d00:	movw	r0, #26045	; 0x65bd
   12d04:	movt	r0, #1
   12d08:	bl	127b0 <error@@Base>
   12d0c:	push	{r4, r5, r6, r7, fp, lr}
   12d10:	add	fp, sp, #16
   12d14:	mov	r6, r3
   12d18:	mov	r4, r2
   12d1c:	mov	r5, r1
   12d20:	tst	r0, #255	; 0xff
   12d24:	beq	12d44 <error@@Base+0x594>
   12d28:	mov	r0, #94	; 0x5e
   12d2c:	mov	r1, r4
   12d30:	bl	10b88 <utf8proc_encode_char@plt>
   12d34:	cmp	r0, #0
   12d38:	ble	12de0 <error@@Base+0x630>
   12d3c:	sxtb	r7, r0
   12d40:	b	12d48 <error@@Base+0x598>
   12d44:	mov	r7, #0
   12d48:	cmp	r5, #10
   12d4c:	bne	12d74 <error@@Base+0x5c4>
   12d50:	movw	r0, #25935	; 0x654f
   12d54:	movw	r1, #26068	; 0x65d4
   12d58:	tst	r6, #255	; 0xff
   12d5c:	movt	r0, #1
   12d60:	movt	r1, #1
   12d64:	moveq	r1, r0
   12d68:	add	r0, r4, r7
   12d6c:	pop	{r4, r5, r6, r7, fp, lr}
   12d70:	b	10c90 <sprintf@plt>
   12d74:	mov	r0, r5
   12d78:	bl	10b70 <utf8proc_get_property@plt>
   12d7c:	cmp	r5, #32
   12d80:	beq	12d94 <error@@Base+0x5e4>
   12d84:	ldrsh	r0, [r0]
   12d88:	sub	r1, r0, #1
   12d8c:	cmp	r1, #22
   12d90:	bcs	12dec <error@@Base+0x63c>
   12d94:	mov	r0, r5
   12d98:	bl	10c3c <utf8proc_category@plt>
   12d9c:	sub	r0, r0, #6
   12da0:	cmp	r0, #2
   12da4:	bhi	12dc0 <error@@Base+0x610>
   12da8:	add	r1, r4, r7
   12dac:	movw	r0, #9676	; 0x25cc
   12db0:	bl	10b88 <utf8proc_encode_char@plt>
   12db4:	cmp	r0, #0
   12db8:	ble	12de0 <error@@Base+0x630>
   12dbc:	sxtab	r7, r7, r0
   12dc0:	add	r1, r4, r7
   12dc4:	mov	r0, r5
   12dc8:	bl	10b88 <utf8proc_encode_char@plt>
   12dcc:	cmp	r0, #0
   12dd0:	sxtabgt	r0, r7, r0
   12dd4:	movgt	r1, #0
   12dd8:	strbgt	r1, [r4, r0]
   12ddc:	popgt	{r4, r5, r6, r7, fp, pc}
   12de0:	movw	r0, #26045	; 0x65bd
   12de4:	movt	r0, #1
   12de8:	bl	127b0 <error@@Base>
   12dec:	cmp	r0, #29
   12df0:	beq	12d94 <error@@Base+0x5e4>
   12df4:	add	r0, r4, r7
   12df8:	cmp	r5, #255	; 0xff
   12dfc:	bhi	12e0c <error@@Base+0x65c>
   12e00:	movw	r1, #26073	; 0x65d9
   12e04:	movt	r1, #1
   12e08:	b	12e14 <error@@Base+0x664>
   12e0c:	movw	r1, #26080	; 0x65e0
   12e10:	movt	r1, #1
   12e14:	mov	r2, r5
   12e18:	pop	{r4, r5, r6, r7, fp, lr}
   12e1c:	b	10c90 <sprintf@plt>
   12e20:	push	{r4, r5, r6, r7, fp, lr}
   12e24:	add	fp, sp, #16
   12e28:	sub	sp, sp, #16
   12e2c:	mov	r6, r2
   12e30:	mov	r2, r1
   12e34:	movw	r1, #12438	; 0x3096
   12e38:	mov	r5, r0
   12e3c:	movt	r1, #1
   12e40:	mov	r0, r2
   12e44:	bl	123c0 <__assert_fail@plt+0x16dc>
   12e48:	mov	r4, r0
   12e4c:	cmp	r6, #0
   12e50:	beq	12e8c <error@@Base+0x6dc>
   12e54:	movw	r0, #26087	; 0x65e7
   12e58:	mov	r1, r4
   12e5c:	movt	r0, #1
   12e60:	bl	10cb4 <fputs@plt>
   12e64:	movw	r7, #26143	; 0x661f
   12e68:	mov	r1, r4
   12e6c:	movt	r7, #1
   12e70:	mov	r0, r7
   12e74:	bl	10cb4 <fputs@plt>
   12e78:	mov	r0, r4
   12e7c:	blx	r6
   12e80:	mov	r0, r7
   12e84:	mov	r1, r4
   12e88:	bl	10cb4 <fputs@plt>
   12e8c:	ldr	r6, [r5]
   12e90:	cmp	r6, #0
   12e94:	beq	12ec8 <error@@Base+0x718>
   12e98:	add	r5, sp, #7
   12e9c:	ldr	r1, [r6, #12]
   12ea0:	ldrb	r0, [r6, #8]
   12ea4:	mov	r2, r5
   12ea8:	mov	r3, #0
   12eac:	bl	12d0c <error@@Base+0x55c>
   12eb0:	mov	r0, r5
   12eb4:	mov	r1, r4
   12eb8:	bl	10cb4 <fputs@plt>
   12ebc:	ldr	r6, [r6, #4]
   12ec0:	cmp	r6, #0
   12ec4:	bne	12e9c <error@@Base+0x6ec>
   12ec8:	mov	r0, r4
   12ecc:	bl	12438 <__assert_fail@plt+0x1754>
   12ed0:	sub	sp, fp, #16
   12ed4:	pop	{r4, r5, r6, r7, fp, pc}
   12ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12edc:	add	fp, sp, #28
   12ee0:	sub	sp, sp, #4
   12ee4:	mov	r9, #0
   12ee8:	mov	sl, r0
   12eec:	str	r9, [sp]
   12ef0:	ldrb	r0, [r1]
   12ef4:	cmp	r0, #0
   12ef8:	beq	12f58 <error@@Base+0x7a8>
   12efc:	mov	r4, r1
   12f00:	mov	r8, sp
   12f04:	mov	r7, #1
   12f08:	mov	r0, r4
   12f0c:	mvn	r1, #0
   12f10:	mov	r2, r8
   12f14:	bl	10bdc <utf8proc_iterate@plt>
   12f18:	cmp	r0, #1
   12f1c:	blt	12f60 <error@@Base+0x7b0>
   12f20:	ldr	r5, [sp]
   12f24:	mov	r6, r0
   12f28:	mov	r0, #1
   12f2c:	mov	r1, #16
   12f30:	bl	12324 <__assert_fail@plt+0x1640>
   12f34:	strb	r9, [r0, #8]
   12f38:	mov	r1, r0
   12f3c:	str	r5, [r0, #12]
   12f40:	mov	r0, sl
   12f44:	bl	1106c <__assert_fail@plt+0x388>
   12f48:	ldrb	r0, [r4, r6]!
   12f4c:	cmp	r0, #0
   12f50:	bne	12f08 <error@@Base+0x758>
   12f54:	b	12f64 <error@@Base+0x7b4>
   12f58:	mov	r7, #1
   12f5c:	b	12f64 <error@@Base+0x7b4>
   12f60:	mov	r7, #0
   12f64:	mov	r0, r7
   12f68:	sub	sp, fp, #28
   12f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f74:	mov	r7, r0
   12f78:	ldr	r6, [pc, #72]	; 12fc8 <error@@Base+0x818>
   12f7c:	ldr	r5, [pc, #72]	; 12fcc <error@@Base+0x81c>
   12f80:	add	r6, pc, r6
   12f84:	add	r5, pc, r5
   12f88:	sub	r6, r6, r5
   12f8c:	mov	r8, r1
   12f90:	mov	r9, r2
   12f94:	bl	10b14 <calloc@plt-0x20>
   12f98:	asrs	r6, r6, #2
   12f9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fa0:	mov	r4, #0
   12fa4:	add	r4, r4, #1
   12fa8:	ldr	r3, [r5], #4
   12fac:	mov	r2, r9
   12fb0:	mov	r1, r8
   12fb4:	mov	r0, r7
   12fb8:	blx	r3
   12fbc:	cmp	r6, r4
   12fc0:	bne	12fa4 <error@@Base+0x7f4>
   12fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fc8:	andeq	r3, r1, r4, ror lr
   12fcc:	andeq	r3, r1, ip, ror #28
   12fd0:	bx	lr
   12fd4:	mov	r2, r1
   12fd8:	mov	r1, r0
   12fdc:	mov	r0, #3
   12fe0:	b	10bc4 <__xstat@plt>

Disassembly of section .fini:

00012fe4 <.fini>:
   12fe4:	push	{r3, lr}
   12fe8:	pop	{r3, pc}
