
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010b10 <.init>:
   10b10:	push	{r3, lr}
   10b14:	bl	11198 <__assert_fail@plt+0x44c>
   10b18:	pop	{r3, pc}

Disassembly of section .plt:

00010b1c <calloc@plt-0x14>:
   10b1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b20:	ldr	lr, [pc, #4]	; 10b2c <calloc@plt-0x4>
   10b24:	add	lr, pc, lr
   10b28:	ldr	pc, [lr, #8]!
   10b2c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010b30 <calloc@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #20, 20	; 0x14000
   10b38:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b3c <fputs_unlocked@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #20, 20	; 0x14000
   10b44:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b48 <raise@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #20, 20	; 0x14000
   10b50:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b54 <strcmp@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #20, 20	; 0x14000
   10b5c:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b60 <fflush@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #20, 20	; 0x14000
   10b68:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b6c <free@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #20, 20	; 0x14000
   10b74:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b78 <_exit@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #20, 20	; 0x14000
   10b80:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b84 <memcpy@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #20, 20	; 0x14000
   10b8c:	ldr	pc, [ip, #1180]!	; 0x49c

00010b90 <mbsinit@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #20, 20	; 0x14000
   10b98:	ldr	pc, [ip, #1172]!	; 0x494

00010b9c <memcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #20, 20	; 0x14000
   10ba4:	ldr	pc, [ip, #1164]!	; 0x48c

00010ba8 <fputc_unlocked@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #20, 20	; 0x14000
   10bb0:	ldr	pc, [ip, #1156]!	; 0x484

00010bb4 <dcgettext@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #20, 20	; 0x14000
   10bbc:	ldr	pc, [ip, #1148]!	; 0x47c

00010bc0 <realloc@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #20, 20	; 0x14000
   10bc8:	ldr	pc, [ip, #1140]!	; 0x474

00010bcc <textdomain@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #20, 20	; 0x14000
   10bd4:	ldr	pc, [ip, #1132]!	; 0x46c

00010bd8 <iswprint@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #20, 20	; 0x14000
   10be0:	ldr	pc, [ip, #1124]!	; 0x464

00010be4 <lseek64@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #20, 20	; 0x14000
   10bec:	ldr	pc, [ip, #1116]!	; 0x45c

00010bf0 <__ctype_get_mb_cur_max@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #20, 20	; 0x14000
   10bf8:	ldr	pc, [ip, #1108]!	; 0x454

00010bfc <__fpending@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #20, 20	; 0x14000
   10c04:	ldr	pc, [ip, #1100]!	; 0x44c

00010c08 <ferror_unlocked@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #20, 20	; 0x14000
   10c10:	ldr	pc, [ip, #1092]!	; 0x444

00010c14 <mbrtowc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #20, 20	; 0x14000
   10c1c:	ldr	pc, [ip, #1084]!	; 0x43c

00010c20 <error@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #20, 20	; 0x14000
   10c28:	ldr	pc, [ip, #1076]!	; 0x434

00010c2c <getenv@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #20, 20	; 0x14000
   10c34:	ldr	pc, [ip, #1068]!	; 0x42c

00010c38 <malloc@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #20, 20	; 0x14000
   10c40:	ldr	pc, [ip, #1060]!	; 0x424

00010c44 <__libc_start_main@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #1052]!	; 0x41c

00010c50 <__freading@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #1044]!	; 0x414

00010c5c <__gmon_start__@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #1036]!	; 0x40c

00010c68 <__ctype_b_loc@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #1028]!	; 0x404

00010c74 <exit@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c80 <strlen@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c8c <__errno_location@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c98 <__cxa_atexit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #996]!	; 0x3e4

00010ca4 <memset@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #988]!	; 0x3dc

00010cb0 <__printf_chk@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #980]!	; 0x3d4

00010cbc <fileno@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #972]!	; 0x3cc

00010cc8 <__fprintf_chk@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #964]!	; 0x3c4

00010cd4 <fclose@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #956]!	; 0x3bc

00010ce0 <fseeko64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #948]!	; 0x3b4

00010cec <setlocale@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #940]!	; 0x3ac

00010cf8 <strrchr@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #932]!	; 0x3a4

00010d04 <nl_langinfo@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #924]!	; 0x39c

00010d10 <bindtextdomain@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #916]!	; 0x394

00010d1c <fputs@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #908]!	; 0x38c

00010d28 <strncmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #900]!	; 0x384

00010d34 <abort@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #892]!	; 0x37c

00010d40 <putchar_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #884]!	; 0x374

00010d4c <__assert_fail@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #876]!	; 0x36c

Disassembly of section .text:

00010d58 <.text>:
   10d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d5c:	mov	r5, r0
   10d60:	sub	sp, sp, #28
   10d64:	ldr	r0, [pc, #952]	; 11124 <__assert_fail@plt+0x3d8>
   10d68:	mov	r6, r1
   10d6c:	bl	10c2c <getenv@plt>
   10d70:	cmp	r0, #0
   10d74:	movne	r8, #1
   10d78:	moveq	r8, #0
   10d7c:	moveq	r4, #1
   10d80:	beq	10da4 <__assert_fail@plt+0x58>
   10d84:	cmp	r5, #1
   10d88:	movle	r4, #0
   10d8c:	ble	10da4 <__assert_fail@plt+0x58>
   10d90:	ldr	r1, [pc, #912]	; 11128 <__assert_fail@plt+0x3dc>
   10d94:	ldr	r0, [r6, #4]
   10d98:	bl	10b54 <strcmp@plt>
   10d9c:	clz	r4, r0
   10da0:	lsr	r4, r4, #5
   10da4:	ldr	r0, [r6]
   10da8:	bl	116e4 <__assert_fail@plt+0x998>
   10dac:	ldr	r1, [pc, #888]	; 1112c <__assert_fail@plt+0x3e0>
   10db0:	mov	r0, #6
   10db4:	bl	10cec <setlocale@plt>
   10db8:	ldr	r1, [pc, #880]	; 11130 <__assert_fail@plt+0x3e4>
   10dbc:	ldr	r0, [pc, #880]	; 11134 <__assert_fail@plt+0x3e8>
   10dc0:	bl	10d10 <bindtextdomain@plt>
   10dc4:	ldr	r0, [pc, #872]	; 11134 <__assert_fail@plt+0x3e8>
   10dc8:	bl	10bcc <textdomain@plt>
   10dcc:	ldr	r0, [pc, #868]	; 11138 <__assert_fail@plt+0x3ec>
   10dd0:	bl	140a4 <__assert_fail@plt+0x3358>
   10dd4:	cmp	r5, #2
   10dd8:	movne	r3, #0
   10ddc:	andeq	r3, r4, #1
   10de0:	cmp	r3, #0
   10de4:	beq	10e54 <__assert_fail@plt+0x108>
   10de8:	ldr	r7, [r6, #4]
   10dec:	ldr	r1, [pc, #840]	; 1113c <__assert_fail@plt+0x3f0>
   10df0:	mov	r0, r7
   10df4:	bl	10b54 <strcmp@plt>
   10df8:	cmp	r0, #0
   10dfc:	bne	10e04 <__assert_fail@plt+0xb8>
   10e00:	bl	11324 <__assert_fail@plt+0x5d8>
   10e04:	ldr	r1, [pc, #820]	; 11140 <__assert_fail@plt+0x3f4>
   10e08:	mov	r0, r7
   10e0c:	bl	10b54 <strcmp@plt>
   10e10:	cmp	r0, #0
   10e14:	bne	10e54 <__assert_fail@plt+0x108>
   10e18:	ldr	r3, [pc, #804]	; 11144 <__assert_fail@plt+0x3f8>
   10e1c:	str	r0, [sp, #8]
   10e20:	str	r3, [sp, #4]
   10e24:	ldr	r3, [pc, #796]	; 11148 <__assert_fail@plt+0x3fc>
   10e28:	ldr	r0, [pc, #796]	; 1114c <__assert_fail@plt+0x400>
   10e2c:	str	r3, [sp]
   10e30:	ldr	r3, [pc, #792]	; 11150 <__assert_fail@plt+0x404>
   10e34:	ldr	r2, [pc, #792]	; 11154 <__assert_fail@plt+0x408>
   10e38:	ldr	r1, [pc, #792]	; 11158 <__assert_fail@plt+0x40c>
   10e3c:	ldr	r3, [r3]
   10e40:	ldr	r0, [r0]
   10e44:	bl	13164 <__assert_fail@plt+0x2418>
   10e48:	mov	r0, #0
   10e4c:	add	sp, sp, #28
   10e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e54:	cmp	r4, #0
   10e58:	sub	r5, r5, #1
   10e5c:	add	r6, r6, #4
   10e60:	moveq	r7, #1
   10e64:	beq	10ee4 <__assert_fail@plt+0x198>
   10e68:	mov	r4, #0
   10e6c:	mov	r0, r6
   10e70:	mov	r7, #1
   10e74:	mov	lr, r4
   10e78:	cmp	r5, #0
   10e7c:	mov	r6, r0
   10e80:	ble	10ee4 <__assert_fail@plt+0x198>
   10e84:	ldr	r3, [r0], #4
   10e88:	ldrb	r2, [r3]
   10e8c:	cmp	r2, #45	; 0x2d
   10e90:	bne	10ee4 <__assert_fail@plt+0x198>
   10e94:	mov	ip, r3
   10e98:	mov	r2, r3
   10e9c:	ldrb	r1, [r2, #1]
   10ea0:	add	r9, r2, #1
   10ea4:	cmp	r1, #0
   10ea8:	bne	10ec8 <__assert_fail@plt+0x17c>
   10eac:	cmp	r3, r2
   10eb0:	beq	10ee4 <__assert_fail@plt+0x198>
   10eb4:	ldrb	r3, [ip, #1]!
   10eb8:	cmp	r3, #0
   10ebc:	bne	10f28 <__assert_fail@plt+0x1dc>
   10ec0:	sub	r5, r5, #1
   10ec4:	b	10e78 <__assert_fail@plt+0x12c>
   10ec8:	cmp	r1, #101	; 0x65
   10ecc:	mov	r2, r9
   10ed0:	beq	10e9c <__assert_fail@plt+0x150>
   10ed4:	cmp	r1, #110	; 0x6e
   10ed8:	beq	10e9c <__assert_fail@plt+0x150>
   10edc:	cmp	r1, #69	; 0x45
   10ee0:	beq	10e9c <__assert_fail@plt+0x150>
   10ee4:	orr	r4, r4, r8
   10ee8:	tst	r4, #255	; 0xff
   10eec:	moveq	r8, #32
   10ef0:	ldreq	r4, [pc, #596]	; 1114c <__assert_fail@plt+0x400>
   10ef4:	subne	r6, r6, #4
   10ef8:	movne	r9, #11
   10efc:	bne	10f74 <__assert_fail@plt+0x228>
   10f00:	cmp	r5, #0
   10f04:	ble	10f7c <__assert_fail@plt+0x230>
   10f08:	ldr	r1, [r4]
   10f0c:	ldr	r0, [r6], #4
   10f10:	bl	10b3c <fputs_unlocked@plt>
   10f14:	subs	r5, r5, #1
   10f18:	beq	10f7c <__assert_fail@plt+0x230>
   10f1c:	mov	r0, r8
   10f20:	bl	10d40 <putchar_unlocked@plt>
   10f24:	b	10f00 <__assert_fail@plt+0x1b4>
   10f28:	cmp	r3, #101	; 0x65
   10f2c:	moveq	r4, #1
   10f30:	beq	10eb4 <__assert_fail@plt+0x168>
   10f34:	cmp	r3, #110	; 0x6e
   10f38:	moveq	r7, lr
   10f3c:	beq	10eb4 <__assert_fail@plt+0x168>
   10f40:	cmp	r3, #69	; 0x45
   10f44:	moveq	r4, #0
   10f48:	b	10eb4 <__assert_fail@plt+0x168>
   10f4c:	ldr	r8, [r6, #4]!
   10f50:	mov	sl, #9
   10f54:	ldrb	r0, [r8]
   10f58:	add	fp, r8, #1
   10f5c:	cmp	r0, #0
   10f60:	bne	10f90 <__assert_fail@plt+0x244>
   10f64:	subs	r5, r5, #1
   10f68:	beq	10f7c <__assert_fail@plt+0x230>
   10f6c:	mov	r0, #32
   10f70:	bl	10d40 <putchar_unlocked@plt>
   10f74:	cmp	r5, #0
   10f78:	bgt	10f4c <__assert_fail@plt+0x200>
   10f7c:	cmp	r7, #0
   10f80:	beq	10e48 <__assert_fail@plt+0xfc>
   10f84:	mov	r0, #10
   10f88:	bl	10d40 <putchar_unlocked@plt>
   10f8c:	b	10e48 <__assert_fail@plt+0xfc>
   10f90:	cmp	r0, #92	; 0x5c
   10f94:	bne	10ff8 <__assert_fail@plt+0x2ac>
   10f98:	ldrb	r4, [r8, #1]
   10f9c:	cmp	r4, #0
   10fa0:	beq	10ff8 <__assert_fail@plt+0x2ac>
   10fa4:	cmp	r4, #99	; 0x63
   10fa8:	add	fp, r8, #2
   10fac:	beq	10e48 <__assert_fail@plt+0xfc>
   10fb0:	bhi	11004 <__assert_fail@plt+0x2b8>
   10fb4:	cmp	r4, #55	; 0x37
   10fb8:	bhi	10fdc <__assert_fail@plt+0x290>
   10fbc:	cmp	r4, #49	; 0x31
   10fc0:	bcs	110e0 <__assert_fail@plt+0x394>
   10fc4:	cmp	r4, #48	; 0x30
   10fc8:	beq	110c8 <__assert_fail@plt+0x37c>
   10fcc:	mov	r0, #92	; 0x5c
   10fd0:	bl	10d40 <putchar_unlocked@plt>
   10fd4:	mov	r0, r4
   10fd8:	b	10ff8 <__assert_fail@plt+0x2ac>
   10fdc:	cmp	r4, #97	; 0x61
   10fe0:	moveq	r0, #7
   10fe4:	beq	10ff8 <__assert_fail@plt+0x2ac>
   10fe8:	movhi	r0, #8
   10fec:	bhi	10ff8 <__assert_fail@plt+0x2ac>
   10ff0:	cmp	r4, #92	; 0x5c
   10ff4:	bne	10fcc <__assert_fail@plt+0x280>
   10ff8:	bl	10d40 <putchar_unlocked@plt>
   10ffc:	mov	r8, fp
   11000:	b	10f54 <__assert_fail@plt+0x208>
   11004:	cmp	r4, #114	; 0x72
   11008:	moveq	r0, #13
   1100c:	beq	10ff8 <__assert_fail@plt+0x2ac>
   11010:	bhi	1103c <__assert_fail@plt+0x2f0>
   11014:	cmp	r4, #102	; 0x66
   11018:	moveq	r0, #12
   1101c:	beq	10ff8 <__assert_fail@plt+0x2ac>
   11020:	cmp	r4, #110	; 0x6e
   11024:	moveq	r0, #10
   11028:	beq	10ff8 <__assert_fail@plt+0x2ac>
   1102c:	cmp	r4, #101	; 0x65
   11030:	bne	10fcc <__assert_fail@plt+0x280>
   11034:	mov	r0, #27
   11038:	b	10ff8 <__assert_fail@plt+0x2ac>
   1103c:	cmp	r4, #118	; 0x76
   11040:	moveq	r0, r9
   11044:	beq	10ff8 <__assert_fail@plt+0x2ac>
   11048:	cmp	r4, #120	; 0x78
   1104c:	beq	11060 <__assert_fail@plt+0x314>
   11050:	cmp	r4, #116	; 0x74
   11054:	bne	10fcc <__assert_fail@plt+0x280>
   11058:	mov	r0, sl
   1105c:	b	10ff8 <__assert_fail@plt+0x2ac>
   11060:	ldrb	r1, [r8, #2]
   11064:	str	r1, [sp, #20]
   11068:	bl	10c68 <__ctype_b_loc@plt>
   1106c:	ldr	r1, [sp, #20]
   11070:	ldr	r2, [r0]
   11074:	lsl	r0, r1, #1
   11078:	ldrh	r0, [r2, r0]
   1107c:	tst	r0, #4096	; 0x1000
   11080:	beq	10fcc <__assert_fail@plt+0x280>
   11084:	mov	r0, r1
   11088:	bl	11284 <__assert_fail@plt+0x538>
   1108c:	ldrb	r1, [r8, #3]
   11090:	lsl	ip, r1, #1
   11094:	ldrh	r2, [r2, ip]
   11098:	uxtb	r0, r0
   1109c:	tst	r2, #4096	; 0x1000
   110a0:	addeq	fp, r8, #3
   110a4:	beq	10ff8 <__assert_fail@plt+0x2ac>
   110a8:	lsl	r3, r0, #4
   110ac:	mov	r0, r1
   110b0:	uxtb	r3, r3
   110b4:	bl	11284 <__assert_fail@plt+0x538>
   110b8:	add	fp, r8, #4
   110bc:	add	r0, r3, r0
   110c0:	uxtb	r0, r0
   110c4:	b	10ff8 <__assert_fail@plt+0x2ac>
   110c8:	ldrb	r4, [r8, #2]
   110cc:	sub	r2, r4, #48	; 0x30
   110d0:	cmp	r2, #7
   110d4:	movhi	r0, #0
   110d8:	bhi	10ff8 <__assert_fail@plt+0x2ac>
   110dc:	add	fp, r8, #3
   110e0:	ldrb	r3, [fp]
   110e4:	sub	r4, r4, #48	; 0x30
   110e8:	sub	r3, r3, #48	; 0x30
   110ec:	uxtb	r0, r4
   110f0:	uxtb	r3, r3
   110f4:	cmp	r3, #7
   110f8:	addls	fp, fp, #1
   110fc:	addls	r0, r3, r0, lsl #3
   11100:	ldrb	r3, [fp]
   11104:	andls	r0, r0, #255	; 0xff
   11108:	sub	r2, r3, #48	; 0x30
   1110c:	cmp	r2, #7
   11110:	addls	r0, r3, r0, lsl #3
   11114:	subls	r0, r0, #48	; 0x30
   11118:	addls	fp, fp, #1
   1111c:	andls	r0, r0, #255	; 0xff
   11120:	b	10ff8 <__assert_fail@plt+0x2ac>
   11124:	andeq	r4, r1, r2, asr r6
   11128:	andeq	r4, r1, r2, ror #12
   1112c:	strdeq	r4, [r1], -r0
   11130:	andeq	r4, r1, r5, ror #12
   11134:	andeq	r4, r1, pc, lsr #11
   11138:	andeq	r1, r1, r0, lsl #12
   1113c:	andeq	r4, r1, sp, ror r6
   11140:	andeq	r4, r1, r4, lsl #13
   11144:	andeq	r4, r1, lr, lsl #13
   11148:	muleq	r1, r9, r6
   1114c:	andeq	r5, r2, r4, lsr #2
   11150:	ldrdeq	r5, [r2], -r0
   11154:	andeq	r4, r1, fp, lsr #11
   11158:	andeq	r4, r1, r8, lsl #2
   1115c:	mov	fp, #0
   11160:	mov	lr, #0
   11164:	pop	{r1}		; (ldr r1, [sp], #4)
   11168:	mov	r2, sp
   1116c:	push	{r2}		; (str r2, [sp, #-4]!)
   11170:	push	{r0}		; (str r0, [sp, #-4]!)
   11174:	ldr	ip, [pc, #16]	; 1118c <__assert_fail@plt+0x440>
   11178:	push	{ip}		; (str ip, [sp, #-4]!)
   1117c:	ldr	r0, [pc, #12]	; 11190 <__assert_fail@plt+0x444>
   11180:	ldr	r3, [pc, #12]	; 11194 <__assert_fail@plt+0x448>
   11184:	bl	10c44 <__libc_start_main@plt>
   11188:	bl	10d34 <abort@plt>
   1118c:	andeq	r4, r1, r0, lsr #1
   11190:	andeq	r0, r1, r8, asr sp
   11194:	andeq	r4, r1, r0, asr #32
   11198:	ldr	r3, [pc, #20]	; 111b4 <__assert_fail@plt+0x468>
   1119c:	ldr	r2, [pc, #20]	; 111b8 <__assert_fail@plt+0x46c>
   111a0:	add	r3, pc, r3
   111a4:	ldr	r2, [r3, r2]
   111a8:	cmp	r2, #0
   111ac:	bxeq	lr
   111b0:	b	10c5c <__gmon_start__@plt>
   111b4:	andeq	r3, r1, r8, asr lr
   111b8:	andeq	r0, r0, r4, asr #1
   111bc:	ldr	r3, [pc, #28]	; 111e0 <__assert_fail@plt+0x494>
   111c0:	ldr	r0, [pc, #28]	; 111e4 <__assert_fail@plt+0x498>
   111c4:	sub	r3, r3, r0
   111c8:	cmp	r3, #6
   111cc:	bxls	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0x49c>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r5, r2, fp, lsl r1
   111e4:	andeq	r5, r2, r8, lsl r1
   111e8:	andeq	r0, r0, r0
   111ec:	ldr	r1, [pc, #36]	; 11218 <__assert_fail@plt+0x4cc>
   111f0:	ldr	r0, [pc, #36]	; 1121c <__assert_fail@plt+0x4d0>
   111f4:	sub	r1, r1, r0
   111f8:	asr	r1, r1, #2
   111fc:	add	r1, r1, r1, lsr #31
   11200:	asrs	r1, r1, #1
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0x4d4>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	r5, r2, r8, lsl r1
   1121c:	andeq	r5, r2, r8, lsl r1
   11220:	andeq	r0, r0, r0
   11224:	push	{r4, lr}
   11228:	ldr	r4, [pc, #24]	; 11248 <__assert_fail@plt+0x4fc>
   1122c:	ldrb	r3, [r4]
   11230:	cmp	r3, #0
   11234:	popne	{r4, pc}
   11238:	bl	111bc <__assert_fail@plt+0x470>
   1123c:	mov	r3, #1
   11240:	strb	r3, [r4]
   11244:	pop	{r4, pc}
   11248:	andeq	r5, r2, r8, lsr #2
   1124c:	ldr	r0, [pc, #40]	; 1127c <__assert_fail@plt+0x530>
   11250:	ldr	r3, [r0]
   11254:	cmp	r3, #0
   11258:	bne	11260 <__assert_fail@plt+0x514>
   1125c:	b	111ec <__assert_fail@plt+0x4a0>
   11260:	ldr	r3, [pc, #24]	; 11280 <__assert_fail@plt+0x534>
   11264:	cmp	r3, #0
   11268:	beq	1125c <__assert_fail@plt+0x510>
   1126c:	push	{r4, lr}
   11270:	blx	r3
   11274:	pop	{r4, lr}
   11278:	b	111ec <__assert_fail@plt+0x4a0>
   1127c:	andeq	r4, r2, r4, lsl pc
   11280:	andeq	r0, r0, r0
   11284:	cmp	r0, #70	; 0x46
   11288:	beq	112fc <__assert_fail@plt+0x5b0>
   1128c:	bhi	112cc <__assert_fail@plt+0x580>
   11290:	cmp	r0, #67	; 0x43
   11294:	beq	11304 <__assert_fail@plt+0x5b8>
   11298:	bhi	112b4 <__assert_fail@plt+0x568>
   1129c:	cmp	r0, #65	; 0x41
   112a0:	beq	1131c <__assert_fail@plt+0x5d0>
   112a4:	cmp	r0, #66	; 0x42
   112a8:	bne	112c4 <__assert_fail@plt+0x578>
   112ac:	mov	r0, #11
   112b0:	bx	lr
   112b4:	cmp	r0, #68	; 0x44
   112b8:	beq	1130c <__assert_fail@plt+0x5c0>
   112bc:	cmp	r0, #69	; 0x45
   112c0:	beq	11314 <__assert_fail@plt+0x5c8>
   112c4:	sub	r0, r0, #48	; 0x30
   112c8:	bx	lr
   112cc:	cmp	r0, #99	; 0x63
   112d0:	beq	11304 <__assert_fail@plt+0x5b8>
   112d4:	bhi	112e8 <__assert_fail@plt+0x59c>
   112d8:	cmp	r0, #97	; 0x61
   112dc:	beq	1131c <__assert_fail@plt+0x5d0>
   112e0:	cmp	r0, #98	; 0x62
   112e4:	b	112a8 <__assert_fail@plt+0x55c>
   112e8:	cmp	r0, #101	; 0x65
   112ec:	beq	11314 <__assert_fail@plt+0x5c8>
   112f0:	bcc	1130c <__assert_fail@plt+0x5c0>
   112f4:	cmp	r0, #102	; 0x66
   112f8:	bne	112c4 <__assert_fail@plt+0x578>
   112fc:	mov	r0, #15
   11300:	bx	lr
   11304:	mov	r0, #12
   11308:	bx	lr
   1130c:	mov	r0, #13
   11310:	bx	lr
   11314:	mov	r0, #14
   11318:	bx	lr
   1131c:	mov	r0, #10
   11320:	bx	lr
   11324:	subs	r4, r0, #0
   11328:	push	{r7, lr}
   1132c:	sub	sp, sp, #56	; 0x38
   11330:	beq	11348 <__assert_fail@plt+0x5fc>
   11334:	ldr	r3, [pc, #572]	; 11578 <__assert_fail@plt+0x82c>
   11338:	mov	r2, #40	; 0x28
   1133c:	ldr	r1, [pc, #568]	; 1157c <__assert_fail@plt+0x830>
   11340:	ldr	r0, [pc, #568]	; 11580 <__assert_fail@plt+0x834>
   11344:	bl	10d4c <__assert_fail@plt>
   11348:	mov	r2, #5
   1134c:	ldr	r1, [pc, #560]	; 11584 <__assert_fail@plt+0x838>
   11350:	bl	10bb4 <dcgettext@plt>
   11354:	ldr	r3, [pc, #556]	; 11588 <__assert_fail@plt+0x83c>
   11358:	ldr	r5, [pc, #556]	; 1158c <__assert_fail@plt+0x840>
   1135c:	ldr	r7, [pc, #556]	; 11590 <__assert_fail@plt+0x844>
   11360:	ldr	r3, [r3]
   11364:	mov	r2, r3
   11368:	mov	r1, r0
   1136c:	mov	r0, #1
   11370:	bl	10cb0 <__printf_chk@plt>
   11374:	mov	r2, #5
   11378:	ldr	r1, [pc, #532]	; 11594 <__assert_fail@plt+0x848>
   1137c:	mov	r0, r4
   11380:	bl	10bb4 <dcgettext@plt>
   11384:	ldr	r1, [r5]
   11388:	bl	10b3c <fputs_unlocked@plt>
   1138c:	mov	r2, #5
   11390:	ldr	r1, [pc, #512]	; 11598 <__assert_fail@plt+0x84c>
   11394:	mov	r0, r4
   11398:	bl	10bb4 <dcgettext@plt>
   1139c:	ldr	r1, [r5]
   113a0:	bl	10b3c <fputs_unlocked@plt>
   113a4:	mov	r2, #5
   113a8:	ldr	r1, [pc, #492]	; 1159c <__assert_fail@plt+0x850>
   113ac:	mov	r0, r4
   113b0:	bl	10bb4 <dcgettext@plt>
   113b4:	ldr	r1, [r5]
   113b8:	bl	10b3c <fputs_unlocked@plt>
   113bc:	mov	r2, #5
   113c0:	ldr	r1, [pc, #472]	; 115a0 <__assert_fail@plt+0x854>
   113c4:	mov	r0, r4
   113c8:	bl	10bb4 <dcgettext@plt>
   113cc:	ldr	r1, [r5]
   113d0:	bl	10b3c <fputs_unlocked@plt>
   113d4:	mov	r2, #5
   113d8:	ldr	r1, [pc, #452]	; 115a4 <__assert_fail@plt+0x858>
   113dc:	mov	r0, r4
   113e0:	bl	10bb4 <dcgettext@plt>
   113e4:	ldr	r1, [r5]
   113e8:	bl	10b3c <fputs_unlocked@plt>
   113ec:	mov	r2, #5
   113f0:	ldr	r1, [pc, #432]	; 115a8 <__assert_fail@plt+0x85c>
   113f4:	mov	r0, r4
   113f8:	bl	10bb4 <dcgettext@plt>
   113fc:	ldr	r1, [r5]
   11400:	bl	10b3c <fputs_unlocked@plt>
   11404:	mov	r2, #5
   11408:	ldr	r1, [pc, #412]	; 115ac <__assert_fail@plt+0x860>
   1140c:	mov	r0, r4
   11410:	bl	10bb4 <dcgettext@plt>
   11414:	ldr	r1, [r5]
   11418:	bl	10b3c <fputs_unlocked@plt>
   1141c:	mov	r2, #5
   11420:	ldr	r1, [pc, #392]	; 115b0 <__assert_fail@plt+0x864>
   11424:	mov	r0, r4
   11428:	bl	10bb4 <dcgettext@plt>
   1142c:	ldr	r2, [pc, #348]	; 11590 <__assert_fail@plt+0x844>
   11430:	mov	r1, r0
   11434:	mov	r0, #1
   11438:	bl	10cb0 <__printf_chk@plt>
   1143c:	mov	r2, #5
   11440:	ldr	r1, [pc, #364]	; 115b4 <__assert_fail@plt+0x868>
   11444:	mov	r0, r4
   11448:	bl	10bb4 <dcgettext@plt>
   1144c:	ldr	r1, [r5]
   11450:	bl	10b3c <fputs_unlocked@plt>
   11454:	ldr	lr, [pc, #348]	; 115b8 <__assert_fail@plt+0x86c>
   11458:	mov	ip, sp
   1145c:	ldm	lr!, {r0, r1, r2, r3}
   11460:	stmia	ip!, {r0, r1, r2, r3}
   11464:	ldm	lr!, {r0, r1, r2, r3}
   11468:	stmia	ip!, {r0, r1, r2, r3}
   1146c:	ldm	lr!, {r0, r1, r2, r3}
   11470:	stmia	ip!, {r0, r1, r2, r3}
   11474:	ldm	lr, {r0, r1}
   11478:	stm	ip, {r0, r1}
   1147c:	ldr	r1, [sp, r4]
   11480:	add	r6, sp, r4
   11484:	cmp	r1, #0
   11488:	bne	11530 <__assert_fail@plt+0x7e4>
   1148c:	ldr	r4, [r6, #4]
   11490:	ldr	r6, [pc, #248]	; 11590 <__assert_fail@plt+0x844>
   11494:	cmp	r4, #0
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #280]	; 115bc <__assert_fail@plt+0x870>
   114a0:	mov	r0, #0
   114a4:	moveq	r4, r6
   114a8:	bl	10bb4 <dcgettext@plt>
   114ac:	ldr	r3, [pc, #268]	; 115c0 <__assert_fail@plt+0x874>
   114b0:	ldr	r2, [pc, #268]	; 115c4 <__assert_fail@plt+0x878>
   114b4:	mov	r1, r0
   114b8:	mov	r0, #1
   114bc:	bl	10cb0 <__printf_chk@plt>
   114c0:	mov	r1, #0
   114c4:	mov	r0, #5
   114c8:	bl	10cec <setlocale@plt>
   114cc:	cmp	r0, #0
   114d0:	bne	11548 <__assert_fail@plt+0x7fc>
   114d4:	mov	r2, #5
   114d8:	ldr	r1, [pc, #232]	; 115c8 <__assert_fail@plt+0x87c>
   114dc:	mov	r0, #0
   114e0:	bl	10bb4 <dcgettext@plt>
   114e4:	ldr	r3, [pc, #164]	; 11590 <__assert_fail@plt+0x844>
   114e8:	ldr	r2, [pc, #208]	; 115c0 <__assert_fail@plt+0x874>
   114ec:	mov	r1, r0
   114f0:	mov	r0, #1
   114f4:	bl	10cb0 <__printf_chk@plt>
   114f8:	mov	r2, #5
   114fc:	ldr	r1, [pc, #200]	; 115cc <__assert_fail@plt+0x880>
   11500:	mov	r0, #0
   11504:	bl	10bb4 <dcgettext@plt>
   11508:	ldr	r2, [pc, #192]	; 115d0 <__assert_fail@plt+0x884>
   1150c:	cmp	r4, r6
   11510:	ldr	r3, [pc, #188]	; 115d4 <__assert_fail@plt+0x888>
   11514:	moveq	r3, r2
   11518:	mov	r2, r4
   1151c:	mov	r1, r0
   11520:	mov	r0, #1
   11524:	bl	10cb0 <__printf_chk@plt>
   11528:	mov	r0, #0
   1152c:	bl	10c74 <exit@plt>
   11530:	mov	r0, r7
   11534:	bl	10b54 <strcmp@plt>
   11538:	add	r4, r4, #8
   1153c:	cmp	r0, #0
   11540:	bne	1147c <__assert_fail@plt+0x730>
   11544:	b	1148c <__assert_fail@plt+0x740>
   11548:	mov	r2, #3
   1154c:	ldr	r1, [pc, #132]	; 115d8 <__assert_fail@plt+0x88c>
   11550:	bl	10d28 <strncmp@plt>
   11554:	cmp	r0, #0
   11558:	beq	114d4 <__assert_fail@plt+0x788>
   1155c:	mov	r2, #5
   11560:	ldr	r1, [pc, #116]	; 115dc <__assert_fail@plt+0x890>
   11564:	mov	r0, #0
   11568:	bl	10bb4 <dcgettext@plt>
   1156c:	ldr	r1, [r5]
   11570:	bl	10b3c <fputs_unlocked@plt>
   11574:	b	114d4 <__assert_fail@plt+0x788>
   11578:	andeq	r4, r1, r8, asr #1
   1157c:	andeq	r4, r1, sp, lsl #2
   11580:	andeq	r4, r1, r8, lsl r1
   11584:	andeq	r4, r1, pc, lsr #2
   11588:	andeq	r5, r2, r4, lsr r1
   1158c:	andeq	r5, r2, r4, lsr #2
   11590:	andeq	r4, r1, r8, lsl #2
   11594:	andeq	r4, r1, lr, ror #2
   11598:	andeq	r4, r1, fp, asr #3
   1159c:	andeq	r4, r1, pc, asr #4
   115a0:	andeq	r4, r1, ip, ror r2
   115a4:			; <UNDEFINED> instruction: 0x000142b2
   115a8:	strdeq	r4, [r1], -r1
   115ac:	ldrdeq	r4, [r1], -r6
   115b0:	andeq	r4, r1, r4, asr #8
   115b4:	andeq	r4, r1, r3, lsl #10
   115b8:	ldrdeq	r4, [r1], -r0
   115bc:	andeq	r4, r1, ip, ror #10
   115c0:	andeq	r4, r1, r3, lsl #11
   115c4:	andeq	r4, r1, fp, lsr #11
   115c8:	andeq	r4, r1, r4, lsl #12
   115cc:	andeq	r4, r1, pc, lsl r6
   115d0:			; <UNDEFINED> instruction: 0x000146bf
   115d4:	strdeq	r4, [r1], -r0
   115d8:			; <UNDEFINED> instruction: 0x000145b9
   115dc:			; <UNDEFINED> instruction: 0x000145bd
   115e0:	ldr	r3, [pc, #4]	; 115ec <__assert_fail@plt+0x8a0>
   115e4:	str	r0, [r3]
   115e8:	bx	lr
   115ec:	andeq	r5, r2, ip, lsr #2
   115f0:	ldr	r3, [pc, #4]	; 115fc <__assert_fail@plt+0x8b0>
   115f4:	strb	r0, [r3, #4]
   115f8:	bx	lr
   115fc:	andeq	r5, r2, ip, lsr #2
   11600:	ldr	r3, [pc, #192]	; 116c8 <__assert_fail@plt+0x97c>
   11604:	push	{r0, r1, r4, r5, r6, lr}
   11608:	ldr	r0, [r3]
   1160c:	bl	137e4 <__assert_fail@plt+0x2a98>
   11610:	cmp	r0, #0
   11614:	beq	116ac <__assert_fail@plt+0x960>
   11618:	ldr	r3, [pc, #172]	; 116cc <__assert_fail@plt+0x980>
   1161c:	mov	r4, r3
   11620:	ldrb	r2, [r3, #4]
   11624:	cmp	r2, #0
   11628:	beq	1163c <__assert_fail@plt+0x8f0>
   1162c:	bl	10c8c <__errno_location@plt>
   11630:	ldr	r3, [r0]
   11634:	cmp	r3, #32
   11638:	beq	116ac <__assert_fail@plt+0x960>
   1163c:	mov	r2, #5
   11640:	ldr	r1, [pc, #136]	; 116d0 <__assert_fail@plt+0x984>
   11644:	mov	r0, #0
   11648:	bl	10bb4 <dcgettext@plt>
   1164c:	ldr	r4, [r4]
   11650:	cmp	r4, #0
   11654:	mov	r5, r0
   11658:	beq	11690 <__assert_fail@plt+0x944>
   1165c:	bl	10c8c <__errno_location@plt>
   11660:	ldr	r6, [r0]
   11664:	mov	r0, r4
   11668:	bl	12bc4 <__assert_fail@plt+0x1e78>
   1166c:	str	r5, [sp]
   11670:	ldr	r2, [pc, #92]	; 116d4 <__assert_fail@plt+0x988>
   11674:	mov	r1, r6
   11678:	mov	r3, r0
   1167c:	mov	r0, #0
   11680:	bl	10c20 <error@plt>
   11684:	ldr	r3, [pc, #76]	; 116d8 <__assert_fail@plt+0x98c>
   11688:	ldr	r0, [r3]
   1168c:	bl	10b78 <_exit@plt>
   11690:	bl	10c8c <__errno_location@plt>
   11694:	mov	r3, r5
   11698:	ldr	r2, [pc, #60]	; 116dc <__assert_fail@plt+0x990>
   1169c:	ldr	r1, [r0]
   116a0:	mov	r0, r4
   116a4:	bl	10c20 <error@plt>
   116a8:	b	11684 <__assert_fail@plt+0x938>
   116ac:	ldr	r3, [pc, #44]	; 116e0 <__assert_fail@plt+0x994>
   116b0:	ldr	r0, [r3]
   116b4:	bl	137e4 <__assert_fail@plt+0x2a98>
   116b8:	cmp	r0, #0
   116bc:	bne	11684 <__assert_fail@plt+0x938>
   116c0:	add	sp, sp, #8
   116c4:	pop	{r4, r5, r6, pc}
   116c8:	andeq	r5, r2, r4, lsr #2
   116cc:	andeq	r5, r2, ip, lsr #2
   116d0:	andeq	r4, r1, r1, lsl r7
   116d4:	andeq	r4, r1, sp, lsl r7
   116d8:	ldrdeq	r5, [r2], -r4
   116dc:	andeq	r4, r1, r1, lsr #14
   116e0:	andeq	r5, r2, r0, lsr #2
   116e4:	push	{r4, r5, r6, lr}
   116e8:	subs	r5, r0, #0
   116ec:	bne	11704 <__assert_fail@plt+0x9b8>
   116f0:	ldr	r3, [pc, #124]	; 11774 <__assert_fail@plt+0xa28>
   116f4:	ldr	r0, [pc, #124]	; 11778 <__assert_fail@plt+0xa2c>
   116f8:	ldr	r1, [r3]
   116fc:	bl	10d1c <fputs@plt>
   11700:	bl	10d34 <abort@plt>
   11704:	mov	r1, #47	; 0x2f
   11708:	bl	10cf8 <strrchr@plt>
   1170c:	cmp	r0, #0
   11710:	addne	r4, r0, #1
   11714:	moveq	r4, r5
   11718:	sub	r3, r4, r5
   1171c:	cmp	r3, #6
   11720:	ble	11760 <__assert_fail@plt+0xa14>
   11724:	mov	r2, #7
   11728:	ldr	r1, [pc, #76]	; 1177c <__assert_fail@plt+0xa30>
   1172c:	sub	r0, r4, #7
   11730:	bl	10d28 <strncmp@plt>
   11734:	cmp	r0, #0
   11738:	bne	11760 <__assert_fail@plt+0xa14>
   1173c:	mov	r2, #3
   11740:	ldr	r1, [pc, #56]	; 11780 <__assert_fail@plt+0xa34>
   11744:	mov	r0, r4
   11748:	bl	10d28 <strncmp@plt>
   1174c:	cmp	r0, #0
   11750:	movne	r5, r4
   11754:	ldreq	r3, [pc, #40]	; 11784 <__assert_fail@plt+0xa38>
   11758:	addeq	r5, r4, #3
   1175c:	streq	r5, [r3]
   11760:	ldr	r3, [pc, #32]	; 11788 <__assert_fail@plt+0xa3c>
   11764:	str	r5, [r3]
   11768:	ldr	r3, [pc, #28]	; 1178c <__assert_fail@plt+0xa40>
   1176c:	str	r5, [r3]
   11770:	pop	{r4, r5, r6, pc}
   11774:	andeq	r5, r2, r0, lsr #2
   11778:	andeq	r4, r1, r4, lsr #14
   1177c:	andeq	r4, r1, ip, asr r7
   11780:	andeq	r4, r1, r4, ror #14
   11784:	andeq	r5, r2, r8, lsl r1
   11788:	andeq	r5, r2, r4, lsr r1
   1178c:	andeq	r5, r2, ip, lsl r1
   11790:	push	{r4, r5, r6, lr}
   11794:	mov	r2, #48	; 0x30
   11798:	mov	r5, r1
   1179c:	mov	r1, #0
   117a0:	mov	r4, r0
   117a4:	bl	10ca4 <memset@plt>
   117a8:	cmp	r5, #10
   117ac:	bne	117b4 <__assert_fail@plt+0xa68>
   117b0:	bl	10d34 <abort@plt>
   117b4:	str	r5, [r4]
   117b8:	mov	r0, r4
   117bc:	pop	{r4, r5, r6, pc}
   117c0:	push	{r4, r5, r6, lr}
   117c4:	mov	r4, r0
   117c8:	mov	r5, r1
   117cc:	bl	13a34 <__assert_fail@plt+0x2ce8>
   117d0:	ldrb	r3, [r0]
   117d4:	bic	r3, r3, #32
   117d8:	cmp	r3, #85	; 0x55
   117dc:	bne	1184c <__assert_fail@plt+0xb00>
   117e0:	ldrb	r3, [r0, #1]
   117e4:	bic	r3, r3, #32
   117e8:	cmp	r3, #84	; 0x54
   117ec:	bne	11824 <__assert_fail@plt+0xad8>
   117f0:	ldrb	r3, [r0, #2]
   117f4:	bic	r3, r3, #32
   117f8:	cmp	r3, #70	; 0x46
   117fc:	bne	11824 <__assert_fail@plt+0xad8>
   11800:	ldrb	r3, [r0, #3]
   11804:	cmp	r3, #45	; 0x2d
   11808:	bne	11824 <__assert_fail@plt+0xad8>
   1180c:	ldrb	r3, [r0, #4]
   11810:	cmp	r3, #56	; 0x38
   11814:	bne	11824 <__assert_fail@plt+0xad8>
   11818:	ldrb	r3, [r0, #5]
   1181c:	cmp	r3, #0
   11820:	beq	11838 <__assert_fail@plt+0xaec>
   11824:	ldr	r1, [pc, #144]	; 118bc <__assert_fail@plt+0xb70>
   11828:	ldr	r0, [pc, #144]	; 118c0 <__assert_fail@plt+0xb74>
   1182c:	cmp	r5, #9
   11830:	movne	r0, r1
   11834:	pop	{r4, r5, r6, pc}
   11838:	ldrb	r3, [r4]
   1183c:	ldr	r1, [pc, #128]	; 118c4 <__assert_fail@plt+0xb78>
   11840:	ldr	r0, [pc, #128]	; 118c8 <__assert_fail@plt+0xb7c>
   11844:	cmp	r3, #96	; 0x60
   11848:	b	11830 <__assert_fail@plt+0xae4>
   1184c:	cmp	r3, #71	; 0x47
   11850:	bne	11824 <__assert_fail@plt+0xad8>
   11854:	ldrb	r3, [r0, #1]
   11858:	bic	r3, r3, #32
   1185c:	cmp	r3, #66	; 0x42
   11860:	bne	11824 <__assert_fail@plt+0xad8>
   11864:	ldrb	r3, [r0, #2]
   11868:	cmp	r3, #49	; 0x31
   1186c:	bne	11824 <__assert_fail@plt+0xad8>
   11870:	ldrb	r3, [r0, #3]
   11874:	cmp	r3, #56	; 0x38
   11878:	bne	11824 <__assert_fail@plt+0xad8>
   1187c:	ldrb	r3, [r0, #4]
   11880:	cmp	r3, #48	; 0x30
   11884:	bne	11824 <__assert_fail@plt+0xad8>
   11888:	ldrb	r3, [r0, #5]
   1188c:	cmp	r3, #51	; 0x33
   11890:	bne	11824 <__assert_fail@plt+0xad8>
   11894:	ldrb	r3, [r0, #6]
   11898:	cmp	r3, #48	; 0x30
   1189c:	bne	11824 <__assert_fail@plt+0xad8>
   118a0:	ldrb	r3, [r0, #7]
   118a4:	cmp	r3, #0
   118a8:	bne	11824 <__assert_fail@plt+0xad8>
   118ac:	ldrb	r3, [r4]
   118b0:	ldr	r1, [pc, #20]	; 118cc <__assert_fail@plt+0xb80>
   118b4:	ldr	r0, [pc, #20]	; 118d0 <__assert_fail@plt+0xb84>
   118b8:	b	11844 <__assert_fail@plt+0xaf8>
   118bc:	andeq	r4, r1, sp, asr #15
   118c0:	andeq	r4, r1, fp, asr #15
   118c4:	andeq	r4, r1, r0, asr #15
   118c8:			; <UNDEFINED> instruction: 0x000147bc
   118cc:	andeq	r4, r1, r8, asr #15
   118d0:	andeq	r4, r1, r4, asr #15
   118d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118d8:	sub	sp, sp, #108	; 0x6c
   118dc:	mov	r8, r0
   118e0:	str	r3, [sp, #36]	; 0x24
   118e4:	mov	r5, r1
   118e8:	str	r2, [sp, #44]	; 0x2c
   118ec:	ldr	sl, [sp, #144]	; 0x90
   118f0:	bl	10bf0 <__ctype_get_mb_cur_max@plt>
   118f4:	ldr	r3, [sp, #148]	; 0x94
   118f8:	mov	r7, #0
   118fc:	str	r7, [sp, #48]	; 0x30
   11900:	lsr	r6, r3, #1
   11904:	and	r6, r6, #1
   11908:	mov	r3, #1
   1190c:	str	r3, [sp, #72]	; 0x48
   11910:	str	r7, [sp, #24]
   11914:	str	r7, [sp, #32]
   11918:	str	r7, [sp, #40]	; 0x28
   1191c:	str	r7, [sp, #60]	; 0x3c
   11920:	str	r0, [sp, #76]	; 0x4c
   11924:	cmp	sl, #10
   11928:	ldrls	pc, [pc, sl, lsl #2]
   1192c:	b	11b68 <__assert_fail@plt+0xe1c>
   11930:	andeq	r1, r1, ip, asr r9
   11934:	strdeq	r2, [r1], -r0
   11938:	andeq	r1, r1, r4, lsr fp
   1193c:	andeq	r1, r1, r0, lsl #23
   11940:	andeq	r1, r1, r0, lsl fp
   11944:	andeq	r1, r1, r8, ror #18
   11948:	ldrdeq	r2, [r1], -r0
   1194c:	andeq	r1, r1, ip, ror #22
   11950:	andeq	r1, r1, r0, ror #20
   11954:	andeq	r1, r1, r0, ror #20
   11958:	andeq	r1, r1, r0, ror #20
   1195c:	mov	r6, #0
   11960:	mov	r4, #0
   11964:	b	11994 <__assert_fail@plt+0xc48>
   11968:	cmp	r6, #0
   1196c:	bne	11b90 <__assert_fail@plt+0xe44>
   11970:	cmp	r5, #0
   11974:	movne	r3, #34	; 0x22
   11978:	strbne	r3, [r8]
   1197c:	mov	r3, #1
   11980:	str	r3, [sp, #24]
   11984:	str	r3, [sp, #32]
   11988:	mov	r4, #1
   1198c:	ldr	r3, [pc, #3172]	; 125f8 <__assert_fail@plt+0x18ac>
   11990:	str	r3, [sp, #40]	; 0x28
   11994:	mov	r9, r5
   11998:	mov	r3, #0
   1199c:	str	r7, [sp, #68]	; 0x44
   119a0:	str	r3, [sp, #28]
   119a4:	ldr	r3, [sp, #36]	; 0x24
   119a8:	cmn	r3, #1
   119ac:	bne	1253c <__assert_fail@plt+0x17f0>
   119b0:	ldr	r3, [sp, #44]	; 0x2c
   119b4:	ldr	r2, [sp, #28]
   119b8:	ldrb	r3, [r3, r2]
   119bc:	adds	r3, r3, #0
   119c0:	movne	r3, #1
   119c4:	str	r3, [sp, #52]	; 0x34
   119c8:	ldr	r3, [sp, #52]	; 0x34
   119cc:	cmp	r3, #0
   119d0:	bne	11bb8 <__assert_fail@plt+0xe6c>
   119d4:	sub	r2, sl, #2
   119d8:	clz	r2, r2
   119dc:	lsr	r2, r2, #5
   119e0:	and	r3, r6, r2
   119e4:	cmp	r4, #0
   119e8:	movne	r3, #0
   119ec:	andeq	r3, r3, #1
   119f0:	cmp	r3, #0
   119f4:	bne	11d80 <__assert_fail@plt+0x1034>
   119f8:	eor	r3, r6, #1
   119fc:	ands	r2, r2, r3
   11a00:	beq	12574 <__assert_fail@plt+0x1828>
   11a04:	ldr	r3, [sp, #68]	; 0x44
   11a08:	cmp	r3, #0
   11a0c:	beq	125ac <__assert_fail@plt+0x1860>
   11a10:	ldr	r3, [sp, #72]	; 0x48
   11a14:	cmp	r3, #0
   11a18:	beq	12550 <__assert_fail@plt+0x1804>
   11a1c:	ldr	r3, [sp, #160]	; 0xa0
   11a20:	ldr	r2, [sp, #44]	; 0x2c
   11a24:	str	r3, [sp, #16]
   11a28:	ldr	r3, [sp, #156]	; 0x9c
   11a2c:	ldr	r1, [sp, #60]	; 0x3c
   11a30:	str	r3, [sp, #12]
   11a34:	ldr	r3, [sp, #152]	; 0x98
   11a38:	str	r3, [sp, #8]
   11a3c:	ldr	r3, [sp, #148]	; 0x94
   11a40:	str	r3, [sp, #4]
   11a44:	mov	r3, #5
   11a48:	str	r3, [sp]
   11a4c:	ldr	r3, [sp, #36]	; 0x24
   11a50:	mov	r0, r8
   11a54:	bl	118d4 <__assert_fail@plt+0xb88>
   11a58:	mov	r4, r0
   11a5c:	b	125a0 <__assert_fail@plt+0x1854>
   11a60:	cmp	sl, #10
   11a64:	beq	11ac0 <__assert_fail@plt+0xd74>
   11a68:	ldr	r4, [pc, #2956]	; 125fc <__assert_fail@plt+0x18b0>
   11a6c:	mov	r2, #5
   11a70:	mov	r1, r4
   11a74:	mov	r0, #0
   11a78:	bl	10bb4 <dcgettext@plt>
   11a7c:	cmp	r0, r4
   11a80:	str	r0, [sp, #156]	; 0x9c
   11a84:	bne	11a94 <__assert_fail@plt+0xd48>
   11a88:	mov	r1, sl
   11a8c:	bl	117c0 <__assert_fail@plt+0xa74>
   11a90:	str	r0, [sp, #156]	; 0x9c
   11a94:	ldr	r4, [pc, #2916]	; 12600 <__assert_fail@plt+0x18b4>
   11a98:	mov	r2, #5
   11a9c:	mov	r1, r4
   11aa0:	mov	r0, #0
   11aa4:	bl	10bb4 <dcgettext@plt>
   11aa8:	cmp	r0, r4
   11aac:	str	r0, [sp, #160]	; 0xa0
   11ab0:	bne	11ac0 <__assert_fail@plt+0xd74>
   11ab4:	mov	r1, sl
   11ab8:	bl	117c0 <__assert_fail@plt+0xa74>
   11abc:	str	r0, [sp, #160]	; 0xa0
   11ac0:	cmp	r6, #0
   11ac4:	moveq	r4, r6
   11ac8:	beq	11ae0 <__assert_fail@plt+0xd94>
   11acc:	mov	r4, #0
   11ad0:	b	11af0 <__assert_fail@plt+0xda4>
   11ad4:	cmp	r5, r4
   11ad8:	strbhi	r3, [r8, r4]
   11adc:	add	r4, r4, #1
   11ae0:	ldr	r3, [sp, #156]	; 0x9c
   11ae4:	ldrb	r3, [r3, r4]
   11ae8:	cmp	r3, #0
   11aec:	bne	11ad4 <__assert_fail@plt+0xd88>
   11af0:	ldr	r0, [sp, #160]	; 0xa0
   11af4:	bl	10c80 <strlen@plt>
   11af8:	ldr	r3, [sp, #160]	; 0xa0
   11afc:	str	r3, [sp, #40]	; 0x28
   11b00:	mov	r3, #1
   11b04:	str	r3, [sp, #24]
   11b08:	str	r0, [sp, #32]
   11b0c:	b	11994 <__assert_fail@plt+0xc48>
   11b10:	mov	r3, #1
   11b14:	cmp	r6, #0
   11b18:	streq	r3, [sp, #24]
   11b1c:	beq	11b3c <__assert_fail@plt+0xdf0>
   11b20:	str	r3, [sp, #32]
   11b24:	ldr	r3, [pc, #2772]	; 12600 <__assert_fail@plt+0x18b4>
   11b28:	mov	r4, #0
   11b2c:	str	r3, [sp, #40]	; 0x28
   11b30:	b	11b60 <__assert_fail@plt+0xe14>
   11b34:	cmp	r6, #0
   11b38:	bne	11ba8 <__assert_fail@plt+0xe5c>
   11b3c:	cmp	r5, #0
   11b40:	movne	r3, #39	; 0x27
   11b44:	strbne	r3, [r8]
   11b48:	mov	r3, #1
   11b4c:	str	r3, [sp, #32]
   11b50:	mov	r6, #0
   11b54:	ldr	r3, [pc, #2724]	; 12600 <__assert_fail@plt+0x18b4>
   11b58:	mov	r4, #1
   11b5c:	str	r3, [sp, #40]	; 0x28
   11b60:	mov	sl, #2
   11b64:	b	11994 <__assert_fail@plt+0xc48>
   11b68:	bl	10d34 <abort@plt>
   11b6c:	mov	r6, #0
   11b70:	mov	r3, #1
   11b74:	str	r3, [sp, #24]
   11b78:	mov	r4, r6
   11b7c:	b	11994 <__assert_fail@plt+0xc48>
   11b80:	mov	r6, #1
   11b84:	str	r6, [sp, #24]
   11b88:	str	r6, [sp, #32]
   11b8c:	b	11b24 <__assert_fail@plt+0xdd8>
   11b90:	mov	r3, #1
   11b94:	str	r3, [sp, #32]
   11b98:	ldr	r3, [pc, #2648]	; 125f8 <__assert_fail@plt+0x18ac>
   11b9c:	str	r6, [sp, #24]
   11ba0:	str	r3, [sp, #40]	; 0x28
   11ba4:	b	11960 <__assert_fail@plt+0xc14>
   11ba8:	mov	r3, #1
   11bac:	str	r3, [sp, #32]
   11bb0:	ldr	r3, [pc, #2632]	; 12600 <__assert_fail@plt+0x18b4>
   11bb4:	b	11ba0 <__assert_fail@plt+0xe54>
   11bb8:	ldr	r3, [sp, #32]
   11bbc:	ldr	fp, [sp, #24]
   11bc0:	cmp	sl, #2
   11bc4:	moveq	fp, #0
   11bc8:	andne	fp, fp, #1
   11bcc:	adds	r5, r3, #0
   11bd0:	movne	r5, #1
   11bd4:	ands	r3, r5, fp
   11bd8:	str	r3, [sp, #64]	; 0x40
   11bdc:	beq	11cac <__assert_fail@plt+0xf60>
   11be0:	ldr	r2, [sp, #32]
   11be4:	ldr	r3, [sp, #28]
   11be8:	add	r7, r3, r2
   11bec:	mov	r3, r2
   11bf0:	ldr	r2, [sp, #36]	; 0x24
   11bf4:	cmp	r3, #1
   11bf8:	movls	r3, #0
   11bfc:	movhi	r3, #1
   11c00:	cmn	r2, #1
   11c04:	movne	r3, #0
   11c08:	cmp	r3, #0
   11c0c:	beq	11c1c <__assert_fail@plt+0xed0>
   11c10:	ldr	r0, [sp, #44]	; 0x2c
   11c14:	bl	10c80 <strlen@plt>
   11c18:	str	r0, [sp, #36]	; 0x24
   11c1c:	ldr	r3, [sp, #36]	; 0x24
   11c20:	cmp	r3, r7
   11c24:	bcc	11ca4 <__assert_fail@plt+0xf58>
   11c28:	ldr	r3, [sp, #44]	; 0x2c
   11c2c:	ldr	r0, [sp, #28]
   11c30:	ldr	r2, [sp, #32]
   11c34:	ldr	r1, [sp, #40]	; 0x28
   11c38:	add	r0, r3, r0
   11c3c:	bl	10b9c <memcmp@plt>
   11c40:	cmp	r0, #0
   11c44:	bne	11ca4 <__assert_fail@plt+0xf58>
   11c48:	cmp	r6, #0
   11c4c:	beq	11cac <__assert_fail@plt+0xf60>
   11c50:	str	r6, [sp, #24]
   11c54:	ldr	r3, [sp, #24]
   11c58:	ldr	r2, [sp, #44]	; 0x2c
   11c5c:	cmp	sl, #2
   11c60:	movne	r3, #0
   11c64:	andeq	r3, r3, #1
   11c68:	cmp	r3, #0
   11c6c:	ldr	r3, [sp, #160]	; 0xa0
   11c70:	movne	sl, #4
   11c74:	str	r3, [sp, #16]
   11c78:	ldr	r3, [sp, #156]	; 0x9c
   11c7c:	str	sl, [sp]
   11c80:	str	r3, [sp, #12]
   11c84:	mov	r3, #0
   11c88:	str	r3, [sp, #8]
   11c8c:	ldr	r3, [sp, #148]	; 0x94
   11c90:	mov	r1, r9
   11c94:	bic	r3, r3, #2
   11c98:	str	r3, [sp, #4]
   11c9c:	ldr	r3, [sp, #36]	; 0x24
   11ca0:	b	11a50 <__assert_fail@plt+0xd04>
   11ca4:	mov	r3, #0
   11ca8:	str	r3, [sp, #64]	; 0x40
   11cac:	ldr	r2, [sp, #28]
   11cb0:	ldr	r3, [sp, #44]	; 0x2c
   11cb4:	add	r3, r3, r2
   11cb8:	str	r3, [sp, #80]	; 0x50
   11cbc:	ldr	r3, [sp, #44]	; 0x2c
   11cc0:	ldrb	r7, [r3, r2]
   11cc4:	cmp	r7, #58	; 0x3a
   11cc8:	bhi	11e30 <__assert_fail@plt+0x10e4>
   11ccc:	cmp	r7, #43	; 0x2b
   11cd0:	bcs	11e84 <__assert_fail@plt+0x1138>
   11cd4:	cmp	r7, #32
   11cd8:	beq	11edc <__assert_fail@plt+0x1190>
   11cdc:	bhi	11d88 <__assert_fail@plt+0x103c>
   11ce0:	cmp	r7, #9
   11ce4:	beq	12190 <__assert_fail@plt+0x1444>
   11ce8:	bhi	11d4c <__assert_fail@plt+0x1000>
   11cec:	cmp	r7, #7
   11cf0:	beq	1223c <__assert_fail@plt+0x14f0>
   11cf4:	bhi	11ef8 <__assert_fail@plt+0x11ac>
   11cf8:	cmp	r7, #0
   11cfc:	beq	11f14 <__assert_fail@plt+0x11c8>
   11d00:	ldr	r3, [sp, #76]	; 0x4c
   11d04:	cmp	r3, #1
   11d08:	bne	12280 <__assert_fail@plt+0x1534>
   11d0c:	bl	10c68 <__ctype_b_loc@plt>
   11d10:	sxth	r3, r7
   11d14:	lsl	r3, r3, #1
   11d18:	ldr	r2, [r0]
   11d1c:	ldrh	r5, [r2, r3]
   11d20:	ldr	r3, [sp, #76]	; 0x4c
   11d24:	str	r3, [sp, #56]	; 0x38
   11d28:	lsr	r5, r5, #14
   11d2c:	and	r5, r5, #1
   11d30:	ldr	r3, [sp, #24]
   11d34:	eor	fp, r5, #1
   11d38:	and	fp, fp, r3
   11d3c:	ands	fp, fp, #255	; 0xff
   11d40:	beq	120c8 <__assert_fail@plt+0x137c>
   11d44:	mov	r5, #0
   11d48:	b	1232c <__assert_fail@plt+0x15e0>
   11d4c:	cmp	r7, #11
   11d50:	beq	12198 <__assert_fail@plt+0x144c>
   11d54:	bcc	12234 <__assert_fail@plt+0x14e8>
   11d58:	cmp	r7, #12
   11d5c:	beq	12244 <__assert_fail@plt+0x14f8>
   11d60:	cmp	r7, #13
   11d64:	moveq	r3, #114	; 0x72
   11d68:	bne	11d00 <__assert_fail@plt+0xfb4>
   11d6c:	cmp	sl, #2
   11d70:	movne	r2, #0
   11d74:	andeq	r2, r6, #1
   11d78:	cmp	r2, #0
   11d7c:	beq	11efc <__assert_fail@plt+0x11b0>
   11d80:	mov	sl, #2
   11d84:	b	11c54 <__assert_fail@plt+0xf08>
   11d88:	cmp	r7, #37	; 0x25
   11d8c:	beq	11e84 <__assert_fail@plt+0x1138>
   11d90:	bhi	11da4 <__assert_fail@plt+0x1058>
   11d94:	cmp	r7, #35	; 0x23
   11d98:	beq	11ed0 <__assert_fail@plt+0x1184>
   11d9c:	mov	r5, #0
   11da0:	b	11ee0 <__assert_fail@plt+0x1194>
   11da4:	cmp	r7, #39	; 0x27
   11da8:	bne	11d9c <__assert_fail@plt+0x1050>
   11dac:	cmp	sl, #2
   11db0:	ldrne	r5, [sp, #52]	; 0x34
   11db4:	movne	r3, r5
   11db8:	strne	r3, [sp, #68]	; 0x44
   11dbc:	bne	11e88 <__assert_fail@plt+0x113c>
   11dc0:	cmp	r6, #0
   11dc4:	bne	11c54 <__assert_fail@plt+0xf08>
   11dc8:	ldr	r2, [sp, #60]	; 0x3c
   11dcc:	adds	r3, r9, #0
   11dd0:	movne	r3, #1
   11dd4:	cmp	r2, #0
   11dd8:	movne	r3, #0
   11ddc:	cmp	r3, #0
   11de0:	strne	r9, [sp, #60]	; 0x3c
   11de4:	movne	r9, #0
   11de8:	bne	11df8 <__assert_fail@plt+0x10ac>
   11dec:	cmp	r9, r4
   11df0:	movhi	r3, #39	; 0x27
   11df4:	strbhi	r3, [r8, r4]
   11df8:	add	r3, r4, #1
   11dfc:	cmp	r3, r9
   11e00:	movcc	r2, #92	; 0x5c
   11e04:	strbcc	r2, [r8, r3]
   11e08:	add	r3, r4, #2
   11e0c:	cmp	r3, r9
   11e10:	ldr	r5, [sp, #52]	; 0x34
   11e14:	movcc	r2, #39	; 0x27
   11e18:	strbcc	r2, [r8, r3]
   11e1c:	add	r4, r4, #3
   11e20:	mov	fp, r6
   11e24:	str	r5, [sp, #68]	; 0x44
   11e28:	str	r6, [sp, #48]	; 0x30
   11e2c:	b	120c8 <__assert_fail@plt+0x137c>
   11e30:	cmp	r7, #94	; 0x5e
   11e34:	beq	11d9c <__assert_fail@plt+0x1050>
   11e38:	bhi	11e90 <__assert_fail@plt+0x1144>
   11e3c:	cmp	r7, #90	; 0x5a
   11e40:	bhi	11e78 <__assert_fail@plt+0x112c>
   11e44:	cmp	r7, #65	; 0x41
   11e48:	bcs	11e84 <__assert_fail@plt+0x1138>
   11e4c:	cmp	r7, #62	; 0x3e
   11e50:	bls	11d9c <__assert_fail@plt+0x1050>
   11e54:	cmp	r7, #63	; 0x3f
   11e58:	bne	11d00 <__assert_fail@plt+0xfb4>
   11e5c:	cmp	sl, #2
   11e60:	beq	12004 <__assert_fail@plt+0x12b8>
   11e64:	cmp	sl, #5
   11e68:	beq	12014 <__assert_fail@plt+0x12c8>
   11e6c:	mov	fp, #0
   11e70:	mov	r5, fp
   11e74:	b	120c8 <__assert_fail@plt+0x137c>
   11e78:	cmp	r7, #92	; 0x5c
   11e7c:	beq	121a0 <__assert_fail@plt+0x1454>
   11e80:	bls	11d9c <__assert_fail@plt+0x1050>
   11e84:	ldr	r5, [sp, #52]	; 0x34
   11e88:	mov	fp, #0
   11e8c:	b	120c8 <__assert_fail@plt+0x137c>
   11e90:	cmp	r7, #122	; 0x7a
   11e94:	bhi	11eb4 <__assert_fail@plt+0x1168>
   11e98:	cmp	r7, #97	; 0x61
   11e9c:	bcs	11e84 <__assert_fail@plt+0x1138>
   11ea0:	cmp	r7, #95	; 0x5f
   11ea4:	beq	11e84 <__assert_fail@plt+0x1138>
   11ea8:	cmp	r7, #96	; 0x60
   11eac:	bne	11d00 <__assert_fail@plt+0xfb4>
   11eb0:	b	11d9c <__assert_fail@plt+0x1050>
   11eb4:	cmp	r7, #124	; 0x7c
   11eb8:	beq	11d9c <__assert_fail@plt+0x1050>
   11ebc:	bcc	1224c <__assert_fail@plt+0x1500>
   11ec0:	cmp	r7, #125	; 0x7d
   11ec4:	beq	1224c <__assert_fail@plt+0x1500>
   11ec8:	cmp	r7, #126	; 0x7e
   11ecc:	bne	11d00 <__assert_fail@plt+0xfb4>
   11ed0:	ldr	r3, [sp, #28]
   11ed4:	cmp	r3, #0
   11ed8:	bne	1200c <__assert_fail@plt+0x12c0>
   11edc:	ldr	r5, [sp, #52]	; 0x34
   11ee0:	cmp	sl, #2
   11ee4:	movne	fp, #0
   11ee8:	andeq	fp, r6, #1
   11eec:	cmp	fp, #0
   11ef0:	beq	120c8 <__assert_fail@plt+0x137c>
   11ef4:	b	11d80 <__assert_fail@plt+0x1034>
   11ef8:	mov	r3, #98	; 0x62
   11efc:	ldr	r2, [sp, #24]
   11f00:	cmp	r2, #0
   11f04:	beq	1200c <__assert_fail@plt+0x12c0>
   11f08:	mov	r7, r3
   11f0c:	mov	r5, #0
   11f10:	b	12120 <__assert_fail@plt+0x13d4>
   11f14:	ldr	r3, [sp, #24]
   11f18:	cmp	r3, #0
   11f1c:	beq	11fe8 <__assert_fail@plt+0x129c>
   11f20:	cmp	r6, #0
   11f24:	bne	11c50 <__assert_fail@plt+0xf04>
   11f28:	ldr	r3, [sp, #48]	; 0x30
   11f2c:	eor	r2, r3, #1
   11f30:	cmp	sl, #2
   11f34:	movne	r2, #0
   11f38:	andeq	r2, r2, #1
   11f3c:	cmp	r2, #0
   11f40:	moveq	r3, r4
   11f44:	beq	11f7c <__assert_fail@plt+0x1230>
   11f48:	cmp	r9, r4
   11f4c:	movhi	r3, #39	; 0x27
   11f50:	strbhi	r3, [r8, r4]
   11f54:	add	r3, r4, #1
   11f58:	cmp	r9, r3
   11f5c:	movhi	r1, #36	; 0x24
   11f60:	strbhi	r1, [r8, r3]
   11f64:	add	r3, r4, #2
   11f68:	cmp	r9, r3
   11f6c:	movhi	r1, #39	; 0x27
   11f70:	strbhi	r1, [r8, r3]
   11f74:	add	r3, r4, #3
   11f78:	str	r2, [sp, #48]	; 0x30
   11f7c:	cmp	r9, r3
   11f80:	movhi	r2, #92	; 0x5c
   11f84:	strbhi	r2, [r8, r3]
   11f88:	cmp	fp, #0
   11f8c:	add	r4, r3, #1
   11f90:	beq	12520 <__assert_fail@plt+0x17d4>
   11f94:	ldr	r2, [sp, #28]
   11f98:	ldr	r1, [sp, #36]	; 0x24
   11f9c:	add	r2, r2, #1
   11fa0:	cmp	r1, r2
   11fa4:	bls	11fe0 <__assert_fail@plt+0x1294>
   11fa8:	ldr	r1, [sp, #44]	; 0x2c
   11fac:	mov	r7, #48	; 0x30
   11fb0:	ldrb	r2, [r1, r2]
   11fb4:	sub	r2, r2, #48	; 0x30
   11fb8:	cmp	r2, #9
   11fbc:	movhi	r5, r6
   11fc0:	bhi	120c8 <__assert_fail@plt+0x137c>
   11fc4:	cmp	r9, r4
   11fc8:	add	r2, r3, #2
   11fcc:	strbhi	r7, [r8, r4]
   11fd0:	cmp	r9, r2
   11fd4:	add	r4, r3, #3
   11fd8:	movhi	r1, #48	; 0x30
   11fdc:	strbhi	r1, [r8, r2]
   11fe0:	mov	r5, r6
   11fe4:	b	12528 <__assert_fail@plt+0x17dc>
   11fe8:	ldr	r3, [sp, #148]	; 0x94
   11fec:	tst	r3, #1
   11ff0:	ldreq	r5, [sp, #24]
   11ff4:	beq	12534 <__assert_fail@plt+0x17e8>
   11ff8:	ldr	r3, [sp, #28]
   11ffc:	add	r3, r3, #1
   12000:	b	119a0 <__assert_fail@plt+0xc54>
   12004:	cmp	r6, #0
   12008:	bne	11c54 <__assert_fail@plt+0xf08>
   1200c:	mov	r5, #0
   12010:	b	11e88 <__assert_fail@plt+0x113c>
   12014:	ldr	r3, [sp, #148]	; 0x94
   12018:	tst	r3, #4
   1201c:	beq	1200c <__assert_fail@plt+0x12c0>
   12020:	ldr	r3, [sp, #28]
   12024:	add	r2, r3, #2
   12028:	ldr	r3, [sp, #36]	; 0x24
   1202c:	cmp	r3, r2
   12030:	bls	1200c <__assert_fail@plt+0x12c0>
   12034:	ldr	r3, [sp, #44]	; 0x2c
   12038:	ldr	r1, [sp, #28]
   1203c:	add	r3, r3, r1
   12040:	ldrb	r0, [r3, #1]
   12044:	cmp	r0, #63	; 0x3f
   12048:	bne	1200c <__assert_fail@plt+0x12c0>
   1204c:	ldr	r3, [sp, #44]	; 0x2c
   12050:	ldrb	r1, [r3, r2]
   12054:	sub	r3, r1, #33	; 0x21
   12058:	uxtb	r3, r3
   1205c:	cmp	r3, #29
   12060:	bhi	12530 <__assert_fail@plt+0x17e4>
   12064:	mov	ip, #1
   12068:	ldr	r5, [pc, #1428]	; 12604 <__assert_fail@plt+0x18b8>
   1206c:	ands	r5, r5, ip, lsl r3
   12070:	beq	11e88 <__assert_fail@plt+0x113c>
   12074:	cmp	r6, #0
   12078:	bne	11c54 <__assert_fail@plt+0xf08>
   1207c:	add	r3, r4, #1
   12080:	cmp	r9, r4
   12084:	strbhi	r0, [r8, r4]
   12088:	cmp	r9, r3
   1208c:	movhi	r0, #34	; 0x22
   12090:	strbhi	r0, [r8, r3]
   12094:	add	r3, r4, #2
   12098:	cmp	r9, r3
   1209c:	movhi	r0, #34	; 0x22
   120a0:	strbhi	r0, [r8, r3]
   120a4:	add	r3, r4, #3
   120a8:	cmp	r9, r3
   120ac:	add	r4, r4, #4
   120b0:	mov	r5, r6
   120b4:	mov	fp, r6
   120b8:	mov	r7, r1
   120bc:	movhi	r0, #63	; 0x3f
   120c0:	strbhi	r0, [r8, r3]
   120c4:	str	r2, [sp, #28]
   120c8:	ldr	r3, [sp, #24]
   120cc:	eor	r3, r3, #1
   120d0:	cmp	sl, #2
   120d4:	orreq	r3, r3, #1
   120d8:	eor	r3, r3, #1
   120dc:	orr	r3, r6, r3
   120e0:	tst	r3, #255	; 0xff
   120e4:	beq	12114 <__assert_fail@plt+0x13c8>
   120e8:	ldr	r3, [sp, #152]	; 0x98
   120ec:	cmp	r3, #0
   120f0:	beq	12114 <__assert_fail@plt+0x13c8>
   120f4:	lsr	r2, r7, #5
   120f8:	ldr	r1, [sp, #152]	; 0x98
   120fc:	uxtb	r2, r2
   12100:	and	r3, r7, #31
   12104:	ldr	r2, [r1, r2, lsl #2]
   12108:	lsr	r3, r2, r3
   1210c:	tst	r3, #1
   12110:	bne	12120 <__assert_fail@plt+0x13d4>
   12114:	ldr	r3, [sp, #64]	; 0x40
   12118:	cmp	r3, #0
   1211c:	beq	121b8 <__assert_fail@plt+0x146c>
   12120:	cmp	r6, #0
   12124:	bne	11c54 <__assert_fail@plt+0xf08>
   12128:	ldr	r3, [sp, #48]	; 0x30
   1212c:	eor	r3, r3, #1
   12130:	cmp	sl, #2
   12134:	movne	r3, #0
   12138:	andeq	r3, r3, #1
   1213c:	cmp	r3, #0
   12140:	beq	12178 <__assert_fail@plt+0x142c>
   12144:	cmp	r9, r4
   12148:	movhi	r2, #39	; 0x27
   1214c:	strbhi	r2, [r8, r4]
   12150:	add	r2, r4, #1
   12154:	cmp	r9, r2
   12158:	movhi	r1, #36	; 0x24
   1215c:	strbhi	r1, [r8, r2]
   12160:	add	r2, r4, #2
   12164:	cmp	r9, r2
   12168:	add	r4, r4, #3
   1216c:	movhi	r1, #39	; 0x27
   12170:	strbhi	r1, [r8, r2]
   12174:	str	r3, [sp, #48]	; 0x30
   12178:	cmp	r9, r4
   1217c:	movhi	r3, #92	; 0x5c
   12180:	strbhi	r3, [r8, r4]
   12184:	ldr	fp, [sp, #52]	; 0x34
   12188:	add	r4, r4, #1
   1218c:	b	121b8 <__assert_fail@plt+0x146c>
   12190:	mov	r3, #116	; 0x74
   12194:	b	11d6c <__assert_fail@plt+0x1020>
   12198:	mov	r3, #118	; 0x76
   1219c:	b	11efc <__assert_fail@plt+0x11b0>
   121a0:	cmp	sl, #2
   121a4:	bne	12214 <__assert_fail@plt+0x14c8>
   121a8:	cmp	r6, #0
   121ac:	bne	11c54 <__assert_fail@plt+0xf08>
   121b0:	mov	r5, r6
   121b4:	mov	fp, r6
   121b8:	ldr	r3, [sp, #48]	; 0x30
   121bc:	eor	fp, fp, #1
   121c0:	and	fp, fp, r3
   121c4:	tst	fp, #255	; 0xff
   121c8:	beq	121f4 <__assert_fail@plt+0x14a8>
   121cc:	cmp	r9, r4
   121d0:	movhi	r3, #39	; 0x27
   121d4:	strbhi	r3, [r8, r4]
   121d8:	add	r3, r4, #1
   121dc:	cmp	r9, r3
   121e0:	movhi	r2, #39	; 0x27
   121e4:	add	r4, r4, #2
   121e8:	strbhi	r2, [r8, r3]
   121ec:	mov	r3, #0
   121f0:	str	r3, [sp, #48]	; 0x30
   121f4:	cmp	r9, r4
   121f8:	strbhi	r7, [r8, r4]
   121fc:	ldr	r3, [sp, #72]	; 0x48
   12200:	cmp	r5, #0
   12204:	moveq	r3, #0
   12208:	add	r4, r4, #1
   1220c:	str	r3, [sp, #72]	; 0x48
   12210:	b	11ff8 <__assert_fail@plt+0x12ac>
   12214:	ldr	r3, [sp, #24]
   12218:	and	r3, r3, r6
   1221c:	tst	r5, r3
   12220:	moveq	r3, r7
   12224:	beq	11d6c <__assert_fail@plt+0x1020>
   12228:	mov	fp, #0
   1222c:	mov	r5, fp
   12230:	b	121b8 <__assert_fail@plt+0x146c>
   12234:	mov	r3, #110	; 0x6e
   12238:	b	11d6c <__assert_fail@plt+0x1020>
   1223c:	mov	r3, #97	; 0x61
   12240:	b	11efc <__assert_fail@plt+0x11b0>
   12244:	mov	r3, #102	; 0x66
   12248:	b	11efc <__assert_fail@plt+0x11b0>
   1224c:	ldr	r3, [sp, #36]	; 0x24
   12250:	cmn	r3, #1
   12254:	bne	12274 <__assert_fail@plt+0x1528>
   12258:	ldr	r3, [sp, #44]	; 0x2c
   1225c:	ldrb	r3, [r3, #1]
   12260:	adds	r3, r3, #0
   12264:	movne	r3, #1
   12268:	cmp	r3, #0
   1226c:	bne	1200c <__assert_fail@plt+0x12c0>
   12270:	b	11ed0 <__assert_fail@plt+0x1184>
   12274:	ldr	r3, [sp, #36]	; 0x24
   12278:	subs	r3, r3, #1
   1227c:	b	12264 <__assert_fail@plt+0x1518>
   12280:	mov	r3, #0
   12284:	str	r3, [sp, #96]	; 0x60
   12288:	str	r3, [sp, #100]	; 0x64
   1228c:	ldr	r3, [sp, #36]	; 0x24
   12290:	cmn	r3, #1
   12294:	bne	122a4 <__assert_fail@plt+0x1558>
   12298:	ldr	r0, [sp, #44]	; 0x2c
   1229c:	bl	10c80 <strlen@plt>
   122a0:	str	r0, [sp, #36]	; 0x24
   122a4:	ldr	r5, [sp, #52]	; 0x34
   122a8:	mov	r3, #0
   122ac:	str	r3, [sp, #56]	; 0x38
   122b0:	ldr	r3, [sp, #28]
   122b4:	ldr	r2, [sp, #56]	; 0x38
   122b8:	ldr	r1, [sp, #36]	; 0x24
   122bc:	add	r2, r3, r2
   122c0:	ldr	r3, [sp, #44]	; 0x2c
   122c4:	add	r0, sp, #92	; 0x5c
   122c8:	add	fp, r3, r2
   122cc:	sub	r2, r1, r2
   122d0:	add	r3, sp, #96	; 0x60
   122d4:	mov	r1, fp
   122d8:	bl	13a68 <__assert_fail@plt+0x2d1c>
   122dc:	subs	r2, r0, #0
   122e0:	beq	12320 <__assert_fail@plt+0x15d4>
   122e4:	cmn	r2, #1
   122e8:	beq	124f8 <__assert_fail@plt+0x17ac>
   122ec:	cmn	r2, #2
   122f0:	bne	12468 <__assert_fail@plt+0x171c>
   122f4:	ldr	r2, [sp, #56]	; 0x38
   122f8:	ldr	r3, [sp, #28]
   122fc:	add	r3, r3, r2
   12300:	ldr	r2, [sp, #36]	; 0x24
   12304:	cmp	r2, r3
   12308:	bls	124f8 <__assert_fail@plt+0x17ac>
   1230c:	ldr	r3, [sp, #80]	; 0x50
   12310:	ldr	r2, [sp, #56]	; 0x38
   12314:	ldrb	r5, [r3, r2]
   12318:	cmp	r5, #0
   1231c:	bne	12458 <__assert_fail@plt+0x170c>
   12320:	ldr	r3, [sp, #56]	; 0x38
   12324:	cmp	r3, #1
   12328:	bls	11d30 <__assert_fail@plt+0xfe4>
   1232c:	ldr	r2, [sp, #56]	; 0x38
   12330:	ldr	r3, [sp, #28]
   12334:	mov	fp, #0
   12338:	add	r3, r3, r2
   1233c:	ldr	r2, [sp, #24]
   12340:	str	r3, [sp, #52]	; 0x34
   12344:	eor	r3, r5, #1
   12348:	and	r3, r3, r2
   1234c:	mov	ip, #92	; 0x5c
   12350:	uxtb	r3, r3
   12354:	mov	r2, #39	; 0x27
   12358:	cmp	r3, #0
   1235c:	beq	12500 <__assert_fail@plt+0x17b4>
   12360:	cmp	r6, #0
   12364:	bne	11c50 <__assert_fail@plt+0xf04>
   12368:	ldr	r1, [sp, #48]	; 0x30
   1236c:	eor	r1, r1, #1
   12370:	cmp	sl, #2
   12374:	movne	r1, #0
   12378:	andeq	r1, r1, #1
   1237c:	cmp	r1, #0
   12380:	beq	123b0 <__assert_fail@plt+0x1664>
   12384:	add	r0, r4, #1
   12388:	cmp	r9, r4
   1238c:	strbhi	r2, [r8, r4]
   12390:	cmp	r9, r0
   12394:	movhi	lr, #36	; 0x24
   12398:	strbhi	lr, [r8, r0]
   1239c:	add	r0, r4, #2
   123a0:	add	r4, r4, #3
   123a4:	cmp	r9, r0
   123a8:	strbhi	r2, [r8, r0]
   123ac:	str	r1, [sp, #48]	; 0x30
   123b0:	add	r0, r4, #1
   123b4:	cmp	r9, r4
   123b8:	strbhi	ip, [r8, r4]
   123bc:	cmp	r9, r0
   123c0:	lsrhi	r1, r7, #6
   123c4:	addhi	r1, r1, #48	; 0x30
   123c8:	strbhi	r1, [r8, r0]
   123cc:	add	r0, r4, #2
   123d0:	cmp	r9, r0
   123d4:	lsrhi	r1, r7, #3
   123d8:	and	r7, r7, #7
   123dc:	andhi	r1, r1, #7
   123e0:	add	r4, r4, #3
   123e4:	add	r7, r7, #48	; 0x30
   123e8:	mov	fp, r3
   123ec:	addhi	r1, r1, #48	; 0x30
   123f0:	strbhi	r1, [r8, r0]
   123f4:	ldr	r1, [sp, #28]
   123f8:	ldr	r0, [sp, #52]	; 0x34
   123fc:	add	r1, r1, #1
   12400:	cmp	r0, r1
   12404:	bls	121b8 <__assert_fail@plt+0x146c>
   12408:	ldr	lr, [sp, #48]	; 0x30
   1240c:	eor	r0, fp, #1
   12410:	and	r0, r0, lr
   12414:	tst	r0, #255	; 0xff
   12418:	beq	1243c <__assert_fail@plt+0x16f0>
   1241c:	add	r0, r4, #1
   12420:	cmp	r9, r4
   12424:	strbhi	r2, [r8, r4]
   12428:	cmp	r9, r0
   1242c:	add	r4, r4, #2
   12430:	strbhi	r2, [r8, r0]
   12434:	mov	r0, #0
   12438:	str	r0, [sp, #48]	; 0x30
   1243c:	ldr	r0, [sp, #44]	; 0x2c
   12440:	cmp	r9, r4
   12444:	strbhi	r7, [r8, r4]
   12448:	str	r1, [sp, #28]
   1244c:	add	r4, r4, #1
   12450:	ldrb	r7, [r0, r1]
   12454:	b	12358 <__assert_fail@plt+0x160c>
   12458:	ldr	r3, [sp, #56]	; 0x38
   1245c:	add	r3, r3, #1
   12460:	str	r3, [sp, #56]	; 0x38
   12464:	b	122f4 <__assert_fail@plt+0x15a8>
   12468:	cmp	sl, #2
   1246c:	movne	r3, #0
   12470:	andeq	r3, r6, #1
   12474:	cmp	r3, #0
   12478:	movne	r1, #1
   1247c:	bne	124d8 <__assert_fail@plt+0x178c>
   12480:	ldr	r0, [sp, #92]	; 0x5c
   12484:	str	r2, [sp, #84]	; 0x54
   12488:	bl	10bd8 <iswprint@plt>
   1248c:	ldr	r3, [sp, #56]	; 0x38
   12490:	ldr	r2, [sp, #84]	; 0x54
   12494:	add	r3, r3, r2
   12498:	str	r3, [sp, #56]	; 0x38
   1249c:	cmp	r0, #0
   124a0:	add	r0, sp, #96	; 0x60
   124a4:	moveq	r5, #0
   124a8:	bl	10b90 <mbsinit@plt>
   124ac:	cmp	r0, #0
   124b0:	beq	122b0 <__assert_fail@plt+0x1564>
   124b4:	b	12320 <__assert_fail@plt+0x15d4>
   124b8:	ldrb	r3, [fp, r1]
   124bc:	cmp	r3, #94	; 0x5e
   124c0:	beq	11d80 <__assert_fail@plt+0x1034>
   124c4:	bhi	124e4 <__assert_fail@plt+0x1798>
   124c8:	sub	r3, r3, #91	; 0x5b
   124cc:	cmp	r3, #1
   124d0:	bls	11d80 <__assert_fail@plt+0x1034>
   124d4:	add	r1, r1, #1
   124d8:	cmp	r1, r2
   124dc:	bne	124b8 <__assert_fail@plt+0x176c>
   124e0:	b	12480 <__assert_fail@plt+0x1734>
   124e4:	cmp	r3, #96	; 0x60
   124e8:	beq	11d80 <__assert_fail@plt+0x1034>
   124ec:	cmp	r3, #124	; 0x7c
   124f0:	bne	124d4 <__assert_fail@plt+0x1788>
   124f4:	b	11d80 <__assert_fail@plt+0x1034>
   124f8:	mov	r5, #0
   124fc:	b	12320 <__assert_fail@plt+0x15d4>
   12500:	ldr	r1, [sp, #64]	; 0x40
   12504:	cmp	r1, #0
   12508:	beq	123f4 <__assert_fail@plt+0x16a8>
   1250c:	cmp	r9, r4
   12510:	strbhi	ip, [r8, r4]
   12514:	str	r3, [sp, #64]	; 0x40
   12518:	add	r4, r4, #1
   1251c:	b	123f4 <__assert_fail@plt+0x16a8>
   12520:	mov	r5, fp
   12524:	ldr	fp, [sp, #24]
   12528:	mov	r7, #48	; 0x30
   1252c:	b	120c8 <__assert_fail@plt+0x137c>
   12530:	mov	r5, #0
   12534:	mov	fp, r5
   12538:	b	120c8 <__assert_fail@plt+0x137c>
   1253c:	ldr	r3, [sp, #36]	; 0x24
   12540:	ldr	r2, [sp, #28]
   12544:	subs	r3, r3, r2
   12548:	movne	r3, #1
   1254c:	b	119c4 <__assert_fail@plt+0xc78>
   12550:	ldr	r3, [sp, #60]	; 0x3c
   12554:	clz	r7, r9
   12558:	cmp	r3, #0
   1255c:	lsr	r7, r7, #5
   12560:	moveq	r7, #0
   12564:	cmp	r7, #0
   12568:	mov	r5, r3
   1256c:	bne	11924 <__assert_fail@plt+0xbd8>
   12570:	ldr	r3, [sp, #68]	; 0x44
   12574:	ldr	r2, [sp, #40]	; 0x28
   12578:	cmp	r2, #0
   1257c:	moveq	r3, #0
   12580:	andne	r3, r3, #1
   12584:	cmp	r3, #0
   12588:	movne	r3, r2
   1258c:	subne	r2, r3, #1
   12590:	bne	125c0 <__assert_fail@plt+0x1874>
   12594:	cmp	r9, r4
   12598:	movhi	r3, #0
   1259c:	strbhi	r3, [r8, r4]
   125a0:	mov	r0, r4
   125a4:	add	sp, sp, #108	; 0x6c
   125a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125ac:	mov	r3, r2
   125b0:	b	12574 <__assert_fail@plt+0x1828>
   125b4:	cmp	r9, r4
   125b8:	strbhi	r3, [r8, r4]
   125bc:	add	r4, r4, #1
   125c0:	ldrb	r3, [r2, #1]!
   125c4:	cmp	r3, #0
   125c8:	bne	125b4 <__assert_fail@plt+0x1868>
   125cc:	b	12594 <__assert_fail@plt+0x1848>
   125d0:	ldr	r3, [pc, #32]	; 125f8 <__assert_fail@plt+0x18ac>
   125d4:	mov	r6, #1
   125d8:	str	r6, [sp, #24]
   125dc:	str	r6, [sp, #32]
   125e0:	str	r3, [sp, #40]	; 0x28
   125e4:	mov	r4, #0
   125e8:	mov	sl, #5
   125ec:	b	11994 <__assert_fail@plt+0xc48>
   125f0:	mov	r6, #1
   125f4:	b	11b88 <__assert_fail@plt+0xe3c>
   125f8:	andeq	r4, r1, fp, asr #15
   125fc:	andeq	r4, r1, pc, asr #15
   12600:	andeq	r4, r1, sp, asr #15
   12604:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1260c:	sub	sp, sp, #52	; 0x34
   12610:	mov	r6, r0
   12614:	mov	r5, r3
   12618:	mov	r8, r1
   1261c:	mov	r9, r2
   12620:	bl	10c8c <__errno_location@plt>
   12624:	ldr	r7, [pc, #380]	; 127a8 <__assert_fail@plt+0x1a5c>
   12628:	cmn	r6, #-2147483647	; 0x80000001
   1262c:	ldr	r4, [r7]
   12630:	ldr	r3, [r0]
   12634:	str	r0, [sp, #24]
   12638:	str	r3, [sp, #32]
   1263c:	movne	r3, #0
   12640:	moveq	r3, #1
   12644:	orrs	r3, r3, r6, lsr #31
   12648:	beq	12650 <__assert_fail@plt+0x1904>
   1264c:	bl	10d34 <abort@plt>
   12650:	ldr	r2, [r7, #4]
   12654:	cmp	r6, r2
   12658:	blt	126c8 <__assert_fail@plt+0x197c>
   1265c:	add	r1, sp, #48	; 0x30
   12660:	add	sl, r7, #8
   12664:	str	r2, [r1, #-4]!
   12668:	cmp	r4, sl
   1266c:	mov	r3, #8
   12670:	sub	r2, r6, r2
   12674:	movne	r0, r4
   12678:	str	r3, [sp]
   1267c:	add	r2, r2, #1
   12680:	mvn	r3, #-2147483648	; 0x80000000
   12684:	moveq	r0, #0
   12688:	bl	1339c <__assert_fail@plt+0x2650>
   1268c:	cmp	r4, sl
   12690:	ldr	r2, [sp, #44]	; 0x2c
   12694:	mov	fp, r0
   12698:	str	r0, [r7]
   1269c:	ldmeq	r4, {r0, r1}
   126a0:	mov	r4, fp
   126a4:	stmeq	fp, {r0, r1}
   126a8:	ldr	r0, [r7, #4]
   126ac:	mov	r1, #0
   126b0:	sub	r2, r2, r0
   126b4:	add	r0, fp, r0, lsl #3
   126b8:	lsl	r2, r2, #3
   126bc:	bl	10ca4 <memset@plt>
   126c0:	ldr	r3, [sp, #44]	; 0x2c
   126c4:	str	r3, [r7, #4]
   126c8:	ldr	r3, [r5, #4]
   126cc:	add	sl, r4, r6, lsl #3
   126d0:	orr	r3, r3, #1
   126d4:	str	r3, [sp, #28]
   126d8:	add	r3, r5, #8
   126dc:	str	r3, [sp, #36]	; 0x24
   126e0:	ldr	r3, [r5, #44]	; 0x2c
   126e4:	ldr	fp, [r4, r6, lsl #3]
   126e8:	ldr	r7, [sl, #4]
   126ec:	str	r3, [sp, #16]
   126f0:	ldr	r3, [r5, #40]	; 0x28
   126f4:	mov	r2, r8
   126f8:	str	r3, [sp, #12]
   126fc:	add	r3, r5, #8
   12700:	str	r3, [sp, #8]
   12704:	ldr	r3, [sp, #28]
   12708:	mov	r1, fp
   1270c:	str	r3, [sp, #4]
   12710:	ldr	r3, [r5]
   12714:	mov	r0, r7
   12718:	str	r3, [sp]
   1271c:	mov	r3, r9
   12720:	bl	118d4 <__assert_fail@plt+0xb88>
   12724:	cmp	fp, r0
   12728:	bhi	12790 <__assert_fail@plt+0x1a44>
   1272c:	ldr	r3, [pc, #120]	; 127ac <__assert_fail@plt+0x1a60>
   12730:	add	fp, r0, #1
   12734:	cmp	r7, r3
   12738:	str	fp, [r4, r6, lsl #3]
   1273c:	beq	12748 <__assert_fail@plt+0x19fc>
   12740:	mov	r0, r7
   12744:	bl	1394c <__assert_fail@plt+0x2c00>
   12748:	mov	r0, fp
   1274c:	bl	13254 <__assert_fail@plt+0x2508>
   12750:	ldr	r3, [r5, #44]	; 0x2c
   12754:	mov	r2, r8
   12758:	mov	r1, fp
   1275c:	str	r0, [sl, #4]
   12760:	str	r3, [sp, #16]
   12764:	ldr	r3, [r5, #40]	; 0x28
   12768:	mov	r7, r0
   1276c:	str	r3, [sp, #12]
   12770:	add	r3, r5, #8
   12774:	str	r3, [sp, #8]
   12778:	ldr	r3, [sp, #28]
   1277c:	str	r3, [sp, #4]
   12780:	ldr	r3, [r5]
   12784:	str	r3, [sp]
   12788:	mov	r3, r9
   1278c:	bl	118d4 <__assert_fail@plt+0xb88>
   12790:	ldr	r3, [sp, #24]
   12794:	ldr	r2, [sp, #32]
   12798:	mov	r0, r7
   1279c:	str	r2, [r3]
   127a0:	add	sp, sp, #52	; 0x34
   127a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a8:	ldrdeq	r5, [r2], -r8
   127ac:	andeq	r5, r2, r8, lsr r1
   127b0:	push	{r4, r5, r6, lr}
   127b4:	mov	r5, r0
   127b8:	bl	10c8c <__errno_location@plt>
   127bc:	cmp	r5, #0
   127c0:	mov	r1, #48	; 0x30
   127c4:	ldr	r6, [r0]
   127c8:	mov	r4, r0
   127cc:	ldr	r0, [pc, #12]	; 127e0 <__assert_fail@plt+0x1a94>
   127d0:	movne	r0, r5
   127d4:	bl	13630 <__assert_fail@plt+0x28e4>
   127d8:	str	r6, [r4]
   127dc:	pop	{r4, r5, r6, pc}
   127e0:	andeq	r5, r2, r8, lsr r2
   127e4:	ldr	r3, [pc, #12]	; 127f8 <__assert_fail@plt+0x1aac>
   127e8:	cmp	r0, #0
   127ec:	moveq	r0, r3
   127f0:	ldr	r0, [r0]
   127f4:	bx	lr
   127f8:	andeq	r5, r2, r8, lsr r2
   127fc:	ldr	r3, [pc, #12]	; 12810 <__assert_fail@plt+0x1ac4>
   12800:	cmp	r0, #0
   12804:	moveq	r0, r3
   12808:	str	r1, [r0]
   1280c:	bx	lr
   12810:	andeq	r5, r2, r8, lsr r2
   12814:	ldr	r3, [pc, #52]	; 12850 <__assert_fail@plt+0x1b04>
   12818:	cmp	r0, #0
   1281c:	moveq	r0, r3
   12820:	add	r3, r0, #8
   12824:	push	{lr}		; (str lr, [sp, #-4]!)
   12828:	lsr	lr, r1, #5
   1282c:	and	r1, r1, #31
   12830:	ldr	ip, [r3, lr, lsl #2]
   12834:	lsr	r0, ip, r1
   12838:	eor	r2, r2, r0
   1283c:	and	r2, r2, #1
   12840:	and	r0, r0, #1
   12844:	eor	r1, ip, r2, lsl r1
   12848:	str	r1, [r3, lr, lsl #2]
   1284c:	pop	{pc}		; (ldr pc, [sp], #4)
   12850:	andeq	r5, r2, r8, lsr r2
   12854:	ldr	r3, [pc, #16]	; 1286c <__assert_fail@plt+0x1b20>
   12858:	cmp	r0, #0
   1285c:	movne	r3, r0
   12860:	ldr	r0, [r3, #4]
   12864:	str	r1, [r3, #4]
   12868:	bx	lr
   1286c:	andeq	r5, r2, r8, lsr r2
   12870:	ldr	r3, [pc, #44]	; 128a4 <__assert_fail@plt+0x1b58>
   12874:	cmp	r0, #0
   12878:	moveq	r0, r3
   1287c:	mov	r3, #10
   12880:	cmp	r2, #0
   12884:	cmpne	r1, #0
   12888:	str	r3, [r0]
   1288c:	bne	12898 <__assert_fail@plt+0x1b4c>
   12890:	push	{r4, lr}
   12894:	bl	10d34 <abort@plt>
   12898:	str	r1, [r0, #40]	; 0x28
   1289c:	str	r2, [r0, #44]	; 0x2c
   128a0:	bx	lr
   128a4:	andeq	r5, r2, r8, lsr r2
   128a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128ac:	sub	sp, sp, #24
   128b0:	mov	sl, r3
   128b4:	ldr	r4, [sp, #56]	; 0x38
   128b8:	ldr	r3, [pc, #100]	; 12924 <__assert_fail@plt+0x1bd8>
   128bc:	cmp	r4, #0
   128c0:	moveq	r4, r3
   128c4:	mov	r7, r0
   128c8:	mov	r8, r1
   128cc:	mov	r9, r2
   128d0:	bl	10c8c <__errno_location@plt>
   128d4:	ldr	r3, [r4, #44]	; 0x2c
   128d8:	mov	r2, r9
   128dc:	mov	r1, r8
   128e0:	ldr	r6, [r0]
   128e4:	str	r3, [sp, #16]
   128e8:	ldr	r3, [r4, #40]	; 0x28
   128ec:	mov	r5, r0
   128f0:	str	r3, [sp, #12]
   128f4:	add	r3, r4, #8
   128f8:	str	r3, [sp, #8]
   128fc:	ldr	r3, [r4, #4]
   12900:	mov	r0, r7
   12904:	str	r3, [sp, #4]
   12908:	ldr	r3, [r4]
   1290c:	str	r3, [sp]
   12910:	mov	r3, sl
   12914:	bl	118d4 <__assert_fail@plt+0xb88>
   12918:	str	r6, [r5]
   1291c:	add	sp, sp, #24
   12920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12924:	andeq	r5, r2, r8, lsr r2
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	cmp	r3, #0
   12930:	sub	sp, sp, #44	; 0x2c
   12934:	ldr	r4, [pc, #188]	; 129f8 <__assert_fail@plt+0x1cac>
   12938:	mov	r6, r2
   1293c:	movne	r4, r3
   12940:	mov	sl, r1
   12944:	mov	r9, r0
   12948:	bl	10c8c <__errno_location@plt>
   1294c:	ldr	r5, [r4, #4]
   12950:	add	fp, r4, #8
   12954:	cmp	r6, #0
   12958:	orreq	r5, r5, #1
   1295c:	mov	r1, #0
   12960:	mov	r2, r9
   12964:	ldr	r3, [r0]
   12968:	mov	r8, r0
   1296c:	str	r3, [sp, #28]
   12970:	ldr	r3, [r4, #44]	; 0x2c
   12974:	mov	r0, r1
   12978:	str	r3, [sp, #16]
   1297c:	ldr	r3, [r4, #40]	; 0x28
   12980:	stmib	sp, {r5, fp}
   12984:	str	r3, [sp, #12]
   12988:	ldr	r3, [r4]
   1298c:	str	r3, [sp]
   12990:	mov	r3, sl
   12994:	bl	118d4 <__assert_fail@plt+0xb88>
   12998:	add	r1, r0, #1
   1299c:	mov	r7, r0
   129a0:	mov	r0, r1
   129a4:	str	r1, [sp, #36]	; 0x24
   129a8:	bl	13254 <__assert_fail@plt+0x2508>
   129ac:	ldr	r3, [r4, #44]	; 0x2c
   129b0:	mov	r2, r9
   129b4:	str	r3, [sp, #16]
   129b8:	ldr	r3, [r4, #40]	; 0x28
   129bc:	stmib	sp, {r5, fp}
   129c0:	str	r3, [sp, #12]
   129c4:	ldr	r3, [r4]
   129c8:	ldr	r1, [sp, #36]	; 0x24
   129cc:	str	r3, [sp]
   129d0:	mov	r3, sl
   129d4:	str	r0, [sp, #32]
   129d8:	bl	118d4 <__assert_fail@plt+0xb88>
   129dc:	ldr	r3, [sp, #28]
   129e0:	cmp	r6, #0
   129e4:	str	r3, [r8]
   129e8:	ldr	r0, [sp, #32]
   129ec:	strne	r7, [r6]
   129f0:	add	sp, sp, #44	; 0x2c
   129f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129f8:	andeq	r5, r2, r8, lsr r2
   129fc:	mov	r3, r2
   12a00:	mov	r2, #0
   12a04:	b	12928 <__assert_fail@plt+0x1bdc>
   12a08:	push	{r4, r5, r6, r7, r8, lr}
   12a0c:	mov	r6, #1
   12a10:	ldr	r4, [pc, #104]	; 12a80 <__assert_fail@plt+0x1d34>
   12a14:	ldr	r5, [r4]
   12a18:	add	r7, r5, #12
   12a1c:	ldr	r3, [r4, #4]
   12a20:	add	r7, r7, #8
   12a24:	cmp	r6, r3
   12a28:	blt	12a70 <__assert_fail@plt+0x1d24>
   12a2c:	ldr	r0, [r5, #4]
   12a30:	ldr	r6, [pc, #76]	; 12a84 <__assert_fail@plt+0x1d38>
   12a34:	cmp	r0, r6
   12a38:	beq	12a4c <__assert_fail@plt+0x1d00>
   12a3c:	bl	1394c <__assert_fail@plt+0x2c00>
   12a40:	mov	r3, #256	; 0x100
   12a44:	str	r3, [r4, #8]
   12a48:	str	r6, [r4, #12]
   12a4c:	ldr	r6, [pc, #52]	; 12a88 <__assert_fail@plt+0x1d3c>
   12a50:	cmp	r5, r6
   12a54:	beq	12a64 <__assert_fail@plt+0x1d18>
   12a58:	mov	r0, r5
   12a5c:	bl	1394c <__assert_fail@plt+0x2c00>
   12a60:	str	r6, [r4]
   12a64:	mov	r3, #1
   12a68:	str	r3, [r4, #4]
   12a6c:	pop	{r4, r5, r6, r7, r8, pc}
   12a70:	ldr	r0, [r7, #-8]
   12a74:	bl	1394c <__assert_fail@plt+0x2c00>
   12a78:	add	r6, r6, #1
   12a7c:	b	12a1c <__assert_fail@plt+0x1cd0>
   12a80:	ldrdeq	r5, [r2], -r8
   12a84:	andeq	r5, r2, r8, lsr r1
   12a88:	andeq	r5, r2, r0, ror #1
   12a8c:	ldr	r3, [pc, #4]	; 12a98 <__assert_fail@plt+0x1d4c>
   12a90:	mvn	r2, #0
   12a94:	b	12608 <__assert_fail@plt+0x18bc>
   12a98:	andeq	r5, r2, r8, lsr r2
   12a9c:	ldr	r3, [pc]	; 12aa4 <__assert_fail@plt+0x1d58>
   12aa0:	b	12608 <__assert_fail@plt+0x18bc>
   12aa4:	andeq	r5, r2, r8, lsr r2
   12aa8:	mov	r1, r0
   12aac:	mov	r0, #0
   12ab0:	b	12a8c <__assert_fail@plt+0x1d40>
   12ab4:	mov	r2, r1
   12ab8:	mov	r1, r0
   12abc:	mov	r0, #0
   12ac0:	b	12a9c <__assert_fail@plt+0x1d50>
   12ac4:	push	{r4, r5, lr}
   12ac8:	sub	sp, sp, #52	; 0x34
   12acc:	mov	r5, r2
   12ad0:	mov	r4, r0
   12ad4:	mov	r0, sp
   12ad8:	bl	11790 <__assert_fail@plt+0xa44>
   12adc:	mov	r3, sp
   12ae0:	mvn	r2, #0
   12ae4:	mov	r1, r5
   12ae8:	mov	r0, r4
   12aec:	bl	12608 <__assert_fail@plt+0x18bc>
   12af0:	add	sp, sp, #52	; 0x34
   12af4:	pop	{r4, r5, pc}
   12af8:	push	{r4, r5, r6, lr}
   12afc:	sub	sp, sp, #48	; 0x30
   12b00:	mov	r5, r2
   12b04:	mov	r6, r3
   12b08:	mov	r4, r0
   12b0c:	mov	r0, sp
   12b10:	bl	11790 <__assert_fail@plt+0xa44>
   12b14:	mov	r3, sp
   12b18:	mov	r2, r6
   12b1c:	mov	r1, r5
   12b20:	mov	r0, r4
   12b24:	bl	12608 <__assert_fail@plt+0x18bc>
   12b28:	add	sp, sp, #48	; 0x30
   12b2c:	pop	{r4, r5, r6, pc}
   12b30:	mov	r2, r1
   12b34:	mov	r1, r0
   12b38:	mov	r0, #0
   12b3c:	b	12ac4 <__assert_fail@plt+0x1d78>
   12b40:	mov	r3, r2
   12b44:	mov	r2, r1
   12b48:	mov	r1, r0
   12b4c:	mov	r0, #0
   12b50:	b	12af8 <__assert_fail@plt+0x1dac>
   12b54:	push	{r4, r5, r6, lr}
   12b58:	mov	r4, r0
   12b5c:	ldr	lr, [pc, #80]	; 12bb4 <__assert_fail@plt+0x1e68>
   12b60:	mov	r5, r1
   12b64:	mov	r6, r2
   12b68:	ldm	lr!, {r0, r1, r2, r3}
   12b6c:	sub	sp, sp, #48	; 0x30
   12b70:	mov	ip, sp
   12b74:	stmia	ip!, {r0, r1, r2, r3}
   12b78:	ldm	lr!, {r0, r1, r2, r3}
   12b7c:	stmia	ip!, {r0, r1, r2, r3}
   12b80:	ldm	lr, {r0, r1, r2, r3}
   12b84:	stm	ip, {r0, r1, r2, r3}
   12b88:	mov	r1, r6
   12b8c:	mov	r2, #1
   12b90:	mov	r0, sp
   12b94:	bl	12814 <__assert_fail@plt+0x1ac8>
   12b98:	mov	r3, sp
   12b9c:	mov	r2, r5
   12ba0:	mov	r1, r4
   12ba4:	mov	r0, #0
   12ba8:	bl	12608 <__assert_fail@plt+0x18bc>
   12bac:	add	sp, sp, #48	; 0x30
   12bb0:	pop	{r4, r5, r6, pc}
   12bb4:	andeq	r5, r2, r8, lsr r2
   12bb8:	mov	r2, r1
   12bbc:	mvn	r1, #0
   12bc0:	b	12b54 <__assert_fail@plt+0x1e08>
   12bc4:	mov	r1, #58	; 0x3a
   12bc8:	b	12bb8 <__assert_fail@plt+0x1e6c>
   12bcc:	mov	r2, #58	; 0x3a
   12bd0:	b	12b54 <__assert_fail@plt+0x1e08>
   12bd4:	push	{r4, r5, lr}
   12bd8:	sub	sp, sp, #100	; 0x64
   12bdc:	mov	r4, r0
   12be0:	mov	r0, sp
   12be4:	mov	r5, r2
   12be8:	bl	11790 <__assert_fail@plt+0xa44>
   12bec:	mov	ip, sp
   12bf0:	add	lr, sp, #48	; 0x30
   12bf4:	ldm	ip!, {r0, r1, r2, r3}
   12bf8:	stmia	lr!, {r0, r1, r2, r3}
   12bfc:	ldm	ip!, {r0, r1, r2, r3}
   12c00:	stmia	lr!, {r0, r1, r2, r3}
   12c04:	ldm	ip, {r0, r1, r2, r3}
   12c08:	stm	lr, {r0, r1, r2, r3}
   12c0c:	mov	r2, #1
   12c10:	mov	r1, #58	; 0x3a
   12c14:	add	r0, sp, #48	; 0x30
   12c18:	bl	12814 <__assert_fail@plt+0x1ac8>
   12c1c:	add	r3, sp, #48	; 0x30
   12c20:	mvn	r2, #0
   12c24:	mov	r1, r5
   12c28:	mov	r0, r4
   12c2c:	bl	12608 <__assert_fail@plt+0x18bc>
   12c30:	add	sp, sp, #100	; 0x64
   12c34:	pop	{r4, r5, pc}
   12c38:	push	{r4, r5, r6, r7, lr}
   12c3c:	mov	r4, r0
   12c40:	ldr	lr, [pc, #84]	; 12c9c <__assert_fail@plt+0x1f50>
   12c44:	mov	r6, r1
   12c48:	mov	r7, r2
   12c4c:	mov	r5, r3
   12c50:	ldm	lr!, {r0, r1, r2, r3}
   12c54:	sub	sp, sp, #52	; 0x34
   12c58:	mov	ip, sp
   12c5c:	stmia	ip!, {r0, r1, r2, r3}
   12c60:	ldm	lr!, {r0, r1, r2, r3}
   12c64:	stmia	ip!, {r0, r1, r2, r3}
   12c68:	ldm	lr, {r0, r1, r2, r3}
   12c6c:	stm	ip, {r0, r1, r2, r3}
   12c70:	mov	r2, r7
   12c74:	mov	r1, r6
   12c78:	mov	r0, sp
   12c7c:	bl	12870 <__assert_fail@plt+0x1b24>
   12c80:	mov	r3, sp
   12c84:	ldr	r2, [sp, #72]	; 0x48
   12c88:	mov	r1, r5
   12c8c:	mov	r0, r4
   12c90:	bl	12608 <__assert_fail@plt+0x18bc>
   12c94:	add	sp, sp, #52	; 0x34
   12c98:	pop	{r4, r5, r6, r7, pc}
   12c9c:	andeq	r5, r2, r8, lsr r2
   12ca0:	mvn	ip, #0
   12ca4:	push	{r0, r1, r2, lr}
   12ca8:	str	ip, [sp]
   12cac:	bl	12c38 <__assert_fail@plt+0x1eec>
   12cb0:	add	sp, sp, #12
   12cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cb8:	mov	r3, r2
   12cbc:	mov	r2, r1
   12cc0:	mov	r1, r0
   12cc4:	mov	r0, #0
   12cc8:	b	12ca0 <__assert_fail@plt+0x1f54>
   12ccc:	push	{r0, r1, r2, lr}
   12cd0:	str	r3, [sp]
   12cd4:	mov	r3, r2
   12cd8:	mov	r2, r1
   12cdc:	mov	r1, r0
   12ce0:	mov	r0, #0
   12ce4:	bl	12c38 <__assert_fail@plt+0x1eec>
   12ce8:	add	sp, sp, #12
   12cec:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf0:	ldr	r3, [pc]	; 12cf8 <__assert_fail@plt+0x1fac>
   12cf4:	b	12608 <__assert_fail@plt+0x18bc>
   12cf8:	andeq	r5, r2, r8, ror #1
   12cfc:	mov	r2, r1
   12d00:	mov	r1, r0
   12d04:	mov	r0, #0
   12d08:	b	12cf0 <__assert_fail@plt+0x1fa4>
   12d0c:	mvn	r2, #0
   12d10:	b	12cf0 <__assert_fail@plt+0x1fa4>
   12d14:	mov	r1, r0
   12d18:	mov	r0, #0
   12d1c:	b	12d0c <__assert_fail@plt+0x1fc0>
   12d20:	push	{r4, r5, r6, lr}
   12d24:	sub	sp, sp, #32
   12d28:	cmp	r1, #0
   12d2c:	mov	r5, r0
   12d30:	ldr	r4, [sp, #48]	; 0x30
   12d34:	ldr	r6, [sp, #52]	; 0x34
   12d38:	beq	12dec <__assert_fail@plt+0x20a0>
   12d3c:	stm	sp, {r2, r3}
   12d40:	mov	r3, r1
   12d44:	ldr	r2, [pc, #860]	; 130a8 <__assert_fail@plt+0x235c>
   12d48:	mov	r1, #1
   12d4c:	bl	10cc8 <__fprintf_chk@plt>
   12d50:	mov	r2, #5
   12d54:	ldr	r1, [pc, #848]	; 130ac <__assert_fail@plt+0x2360>
   12d58:	mov	r0, #0
   12d5c:	bl	10bb4 <dcgettext@plt>
   12d60:	ldr	r3, [pc, #840]	; 130b0 <__assert_fail@plt+0x2364>
   12d64:	ldr	r2, [pc, #840]	; 130b4 <__assert_fail@plt+0x2368>
   12d68:	str	r3, [sp]
   12d6c:	mov	r1, #1
   12d70:	mov	r3, r0
   12d74:	mov	r0, r5
   12d78:	bl	10cc8 <__fprintf_chk@plt>
   12d7c:	mov	r1, r5
   12d80:	mov	r0, #10
   12d84:	bl	10ba8 <fputc_unlocked@plt>
   12d88:	mov	r2, #5
   12d8c:	ldr	r1, [pc, #804]	; 130b8 <__assert_fail@plt+0x236c>
   12d90:	mov	r0, #0
   12d94:	bl	10bb4 <dcgettext@plt>
   12d98:	mov	r1, #1
   12d9c:	ldr	r3, [pc, #792]	; 130bc <__assert_fail@plt+0x2370>
   12da0:	mov	r2, r0
   12da4:	mov	r0, r5
   12da8:	bl	10cc8 <__fprintf_chk@plt>
   12dac:	mov	r1, r5
   12db0:	mov	r0, #10
   12db4:	bl	10ba8 <fputc_unlocked@plt>
   12db8:	cmp	r6, #9
   12dbc:	ldrls	pc, [pc, r6, lsl #2]
   12dc0:	b	1309c <__assert_fail@plt+0x2350>
   12dc4:	ldrdeq	r2, [r1], -ip
   12dc8:	andeq	r2, r1, r4, lsl #28
   12dcc:	andeq	r2, r1, r0, lsr lr
   12dd0:	andeq	r2, r1, r4, ror #28
   12dd4:	andeq	r2, r1, r0, lsr #29
   12dd8:	andeq	r2, r1, r4, ror #29
   12ddc:	andeq	r2, r1, ip, lsr #30
   12de0:	andeq	r2, r1, ip, ror pc
   12de4:	ldrdeq	r2, [r1], -r4
   12de8:	andeq	r3, r1, r4, lsr r0
   12dec:	str	r3, [sp]
   12df0:	mov	r1, #1
   12df4:	mov	r3, r2
   12df8:	ldr	r2, [pc, #704]	; 130c0 <__assert_fail@plt+0x2374>
   12dfc:	bl	10cc8 <__fprintf_chk@plt>
   12e00:	b	12d50 <__assert_fail@plt+0x2004>
   12e04:	mov	r2, #5
   12e08:	ldr	r1, [pc, #692]	; 130c4 <__assert_fail@plt+0x2378>
   12e0c:	mov	r0, #0
   12e10:	bl	10bb4 <dcgettext@plt>
   12e14:	ldr	r3, [r4]
   12e18:	mov	r1, #1
   12e1c:	mov	r2, r0
   12e20:	mov	r0, r5
   12e24:	add	sp, sp, #32
   12e28:	pop	{r4, r5, r6, lr}
   12e2c:	b	10cc8 <__fprintf_chk@plt>
   12e30:	mov	r2, #5
   12e34:	ldr	r1, [pc, #652]	; 130c8 <__assert_fail@plt+0x237c>
   12e38:	mov	r0, #0
   12e3c:	bl	10bb4 <dcgettext@plt>
   12e40:	ldr	r3, [r4, #4]
   12e44:	mov	r1, #1
   12e48:	str	r3, [sp, #48]	; 0x30
   12e4c:	ldr	r3, [r4]
   12e50:	mov	r2, r0
   12e54:	mov	r0, r5
   12e58:	add	sp, sp, #32
   12e5c:	pop	{r4, r5, r6, lr}
   12e60:	b	10cc8 <__fprintf_chk@plt>
   12e64:	mov	r2, #5
   12e68:	ldr	r1, [pc, #604]	; 130cc <__assert_fail@plt+0x2380>
   12e6c:	mov	r0, #0
   12e70:	bl	10bb4 <dcgettext@plt>
   12e74:	ldr	r3, [r4, #8]
   12e78:	mov	r1, #1
   12e7c:	str	r3, [sp, #52]	; 0x34
   12e80:	ldr	r3, [r4, #4]
   12e84:	str	r3, [sp, #48]	; 0x30
   12e88:	ldr	r3, [r4]
   12e8c:	mov	r2, r0
   12e90:	mov	r0, r5
   12e94:	add	sp, sp, #32
   12e98:	pop	{r4, r5, r6, lr}
   12e9c:	b	10cc8 <__fprintf_chk@plt>
   12ea0:	mov	r2, #5
   12ea4:	ldr	r1, [pc, #548]	; 130d0 <__assert_fail@plt+0x2384>
   12ea8:	mov	r0, #0
   12eac:	bl	10bb4 <dcgettext@plt>
   12eb0:	ldr	r3, [r4, #12]
   12eb4:	mov	r1, #1
   12eb8:	str	r3, [sp, #8]
   12ebc:	ldr	r3, [r4, #8]
   12ec0:	str	r3, [sp, #4]
   12ec4:	ldr	r3, [r4, #4]
   12ec8:	str	r3, [sp]
   12ecc:	ldr	r3, [r4]
   12ed0:	mov	r2, r0
   12ed4:	mov	r0, r5
   12ed8:	bl	10cc8 <__fprintf_chk@plt>
   12edc:	add	sp, sp, #32
   12ee0:	pop	{r4, r5, r6, pc}
   12ee4:	mov	r2, #5
   12ee8:	ldr	r1, [pc, #484]	; 130d4 <__assert_fail@plt+0x2388>
   12eec:	mov	r0, #0
   12ef0:	bl	10bb4 <dcgettext@plt>
   12ef4:	ldr	r3, [r4, #16]
   12ef8:	mov	r1, #1
   12efc:	str	r3, [sp, #12]
   12f00:	ldr	r3, [r4, #12]
   12f04:	str	r3, [sp, #8]
   12f08:	ldr	r3, [r4, #8]
   12f0c:	str	r3, [sp, #4]
   12f10:	ldr	r3, [r4, #4]
   12f14:	str	r3, [sp]
   12f18:	ldr	r3, [r4]
   12f1c:	mov	r2, r0
   12f20:	mov	r0, r5
   12f24:	bl	10cc8 <__fprintf_chk@plt>
   12f28:	b	12edc <__assert_fail@plt+0x2190>
   12f2c:	mov	r2, #5
   12f30:	ldr	r1, [pc, #416]	; 130d8 <__assert_fail@plt+0x238c>
   12f34:	mov	r0, #0
   12f38:	bl	10bb4 <dcgettext@plt>
   12f3c:	ldr	r3, [r4, #20]
   12f40:	mov	r1, #1
   12f44:	str	r3, [sp, #16]
   12f48:	ldr	r3, [r4, #16]
   12f4c:	str	r3, [sp, #12]
   12f50:	ldr	r3, [r4, #12]
   12f54:	str	r3, [sp, #8]
   12f58:	ldr	r3, [r4, #8]
   12f5c:	str	r3, [sp, #4]
   12f60:	ldr	r3, [r4, #4]
   12f64:	str	r3, [sp]
   12f68:	ldr	r3, [r4]
   12f6c:	mov	r2, r0
   12f70:	mov	r0, r5
   12f74:	bl	10cc8 <__fprintf_chk@plt>
   12f78:	b	12edc <__assert_fail@plt+0x2190>
   12f7c:	mov	r2, #5
   12f80:	ldr	r1, [pc, #340]	; 130dc <__assert_fail@plt+0x2390>
   12f84:	mov	r0, #0
   12f88:	bl	10bb4 <dcgettext@plt>
   12f8c:	ldr	r3, [r4, #24]
   12f90:	mov	r1, #1
   12f94:	str	r3, [sp, #20]
   12f98:	ldr	r3, [r4, #20]
   12f9c:	str	r3, [sp, #16]
   12fa0:	ldr	r3, [r4, #16]
   12fa4:	str	r3, [sp, #12]
   12fa8:	ldr	r3, [r4, #12]
   12fac:	str	r3, [sp, #8]
   12fb0:	ldr	r3, [r4, #8]
   12fb4:	str	r3, [sp, #4]
   12fb8:	ldr	r3, [r4, #4]
   12fbc:	str	r3, [sp]
   12fc0:	ldr	r3, [r4]
   12fc4:	mov	r2, r0
   12fc8:	mov	r0, r5
   12fcc:	bl	10cc8 <__fprintf_chk@plt>
   12fd0:	b	12edc <__assert_fail@plt+0x2190>
   12fd4:	mov	r2, #5
   12fd8:	ldr	r1, [pc, #256]	; 130e0 <__assert_fail@plt+0x2394>
   12fdc:	mov	r0, #0
   12fe0:	bl	10bb4 <dcgettext@plt>
   12fe4:	ldr	r3, [r4, #28]
   12fe8:	mov	r1, #1
   12fec:	str	r3, [sp, #24]
   12ff0:	ldr	r3, [r4, #24]
   12ff4:	str	r3, [sp, #20]
   12ff8:	ldr	r3, [r4, #20]
   12ffc:	str	r3, [sp, #16]
   13000:	ldr	r3, [r4, #16]
   13004:	str	r3, [sp, #12]
   13008:	ldr	r3, [r4, #12]
   1300c:	str	r3, [sp, #8]
   13010:	ldr	r3, [r4, #8]
   13014:	str	r3, [sp, #4]
   13018:	ldr	r3, [r4, #4]
   1301c:	str	r3, [sp]
   13020:	ldr	r3, [r4]
   13024:	mov	r2, r0
   13028:	mov	r0, r5
   1302c:	bl	10cc8 <__fprintf_chk@plt>
   13030:	b	12edc <__assert_fail@plt+0x2190>
   13034:	ldr	r1, [pc, #168]	; 130e4 <__assert_fail@plt+0x2398>
   13038:	mov	r2, #5
   1303c:	mov	r0, #0
   13040:	bl	10bb4 <dcgettext@plt>
   13044:	ldr	r3, [r4, #32]
   13048:	mov	r1, #1
   1304c:	str	r3, [sp, #28]
   13050:	ldr	r3, [r4, #28]
   13054:	str	r3, [sp, #24]
   13058:	ldr	r3, [r4, #24]
   1305c:	str	r3, [sp, #20]
   13060:	ldr	r3, [r4, #20]
   13064:	str	r3, [sp, #16]
   13068:	ldr	r3, [r4, #16]
   1306c:	str	r3, [sp, #12]
   13070:	ldr	r3, [r4, #12]
   13074:	str	r3, [sp, #8]
   13078:	ldr	r3, [r4, #8]
   1307c:	str	r3, [sp, #4]
   13080:	ldr	r3, [r4, #4]
   13084:	str	r3, [sp]
   13088:	ldr	r3, [r4]
   1308c:	mov	r2, r0
   13090:	mov	r0, r5
   13094:	bl	10cc8 <__fprintf_chk@plt>
   13098:	b	12edc <__assert_fail@plt+0x2190>
   1309c:	mov	r2, #5
   130a0:	ldr	r1, [pc, #64]	; 130e8 <__assert_fail@plt+0x239c>
   130a4:	b	1303c <__assert_fail@plt+0x22f0>
   130a8:	andeq	r4, r1, sp, lsl r8
   130ac:	andeq	r4, r1, r0, lsr r8
   130b0:	andeq	r0, r0, r6, ror #15
   130b4:	strdeq	r4, [r1], -lr
   130b8:	andeq	r4, r1, r4, lsr r8
   130bc:	ldrdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   130c0:	andeq	r4, r1, r9, lsr #16
   130c4:	andeq	r4, r1, r1, lsl #18
   130c8:	andeq	r4, r1, r1, lsl r9
   130cc:	andeq	r4, r1, r8, lsr #18
   130d0:	andeq	r4, r1, r4, asr #18
   130d4:	andeq	r4, r1, r4, ror #18
   130d8:	andeq	r4, r1, r8, lsl #19
   130dc:			; <UNDEFINED> instruction: 0x000149b0
   130e0:	ldrdeq	r4, [r1], -ip
   130e4:	andeq	r4, r1, ip, lsl #20
   130e8:	andeq	r4, r1, r0, asr #20
   130ec:	push	{r0, r1, r4, lr}
   130f0:	mov	ip, #0
   130f4:	ldr	lr, [sp, #16]
   130f8:	ldr	r4, [lr, ip, lsl #2]
   130fc:	cmp	r4, #0
   13100:	bne	13118 <__assert_fail@plt+0x23cc>
   13104:	str	ip, [sp, #4]
   13108:	str	lr, [sp]
   1310c:	bl	12d20 <__assert_fail@plt+0x1fd4>
   13110:	add	sp, sp, #8
   13114:	pop	{r4, pc}
   13118:	add	ip, ip, #1
   1311c:	b	130f8 <__assert_fail@plt+0x23ac>
   13120:	push	{r4, r5, lr}
   13124:	sub	sp, sp, #52	; 0x34
   13128:	mov	ip, #0
   1312c:	ldr	r5, [sp, #64]	; 0x40
   13130:	add	lr, sp, #8
   13134:	ldr	r4, [r5, ip, lsl #2]
   13138:	cmp	r4, #0
   1313c:	str	r4, [lr, ip, lsl #2]
   13140:	beq	13150 <__assert_fail@plt+0x2404>
   13144:	add	ip, ip, #1
   13148:	cmp	ip, #10
   1314c:	bne	13134 <__assert_fail@plt+0x23e8>
   13150:	str	ip, [sp, #4]
   13154:	str	lr, [sp]
   13158:	bl	12d20 <__assert_fail@plt+0x1fd4>
   1315c:	add	sp, sp, #52	; 0x34
   13160:	pop	{r4, r5, pc}
   13164:	push	{r3}		; (str r3, [sp, #-4]!)
   13168:	push	{r0, r1, r2, r3, lr}
   1316c:	add	r3, sp, #24
   13170:	str	r3, [sp, #12]
   13174:	str	r3, [sp]
   13178:	ldr	r3, [sp, #20]
   1317c:	bl	13120 <__assert_fail@plt+0x23d4>
   13180:	add	sp, sp, #16
   13184:	pop	{lr}		; (ldr lr, [sp], #4)
   13188:	add	sp, sp, #4
   1318c:	bx	lr
   13190:	ldr	r3, [pc, #116]	; 1320c <__assert_fail@plt+0x24c0>
   13194:	push	{r4, lr}
   13198:	mov	r0, #10
   1319c:	ldr	r1, [r3]
   131a0:	bl	10ba8 <fputc_unlocked@plt>
   131a4:	mov	r2, #5
   131a8:	ldr	r1, [pc, #96]	; 13210 <__assert_fail@plt+0x24c4>
   131ac:	mov	r0, #0
   131b0:	bl	10bb4 <dcgettext@plt>
   131b4:	ldr	r2, [pc, #88]	; 13214 <__assert_fail@plt+0x24c8>
   131b8:	mov	r1, r0
   131bc:	mov	r0, #1
   131c0:	bl	10cb0 <__printf_chk@plt>
   131c4:	mov	r2, #5
   131c8:	ldr	r1, [pc, #72]	; 13218 <__assert_fail@plt+0x24cc>
   131cc:	mov	r0, #0
   131d0:	bl	10bb4 <dcgettext@plt>
   131d4:	ldr	r3, [pc, #64]	; 1321c <__assert_fail@plt+0x24d0>
   131d8:	ldr	r2, [pc, #64]	; 13220 <__assert_fail@plt+0x24d4>
   131dc:	mov	r1, r0
   131e0:	mov	r0, #1
   131e4:	bl	10cb0 <__printf_chk@plt>
   131e8:	mov	r2, #5
   131ec:	ldr	r1, [pc, #48]	; 13224 <__assert_fail@plt+0x24d8>
   131f0:	mov	r0, #0
   131f4:	bl	10bb4 <dcgettext@plt>
   131f8:	ldr	r2, [pc, #40]	; 13228 <__assert_fail@plt+0x24dc>
   131fc:	pop	{r4, lr}
   13200:	mov	r1, r0
   13204:	mov	r0, #1
   13208:	b	10cb0 <__printf_chk@plt>
   1320c:	andeq	r5, r2, r4, lsr #2
   13210:	andeq	r4, r1, ip, ror sl
   13214:	muleq	r1, r0, sl
   13218:	andeq	r4, r1, r6, lsr #21
   1321c:	andeq	r4, r1, r3, lsl #11
   13220:	andeq	r4, r1, fp, lsr #11
   13224:			; <UNDEFINED> instruction: 0x00014aba
   13228:	andeq	r4, r1, r1, ror #21
   1322c:	push	{r4, lr}
   13230:	bl	13748 <__assert_fail@plt+0x29fc>
   13234:	cmp	r0, #0
   13238:	popne	{r4, pc}
   1323c:	bl	136c0 <__assert_fail@plt+0x2974>
   13240:	push	{r4, lr}
   13244:	bl	13748 <__assert_fail@plt+0x29fc>
   13248:	cmp	r0, #0
   1324c:	popne	{r4, pc}
   13250:	bl	136c0 <__assert_fail@plt+0x2974>
   13254:	b	1322c <__assert_fail@plt+0x24e0>
   13258:	push	{r4, r5, r6, lr}
   1325c:	mov	r5, r0
   13260:	mov	r4, r1
   13264:	bl	13788 <__assert_fail@plt+0x2a3c>
   13268:	cmp	r0, #0
   1326c:	popne	{r4, r5, r6, pc}
   13270:	adds	r4, r4, #0
   13274:	movne	r4, #1
   13278:	cmp	r5, #0
   1327c:	orreq	r4, r4, #1
   13280:	cmp	r4, #0
   13284:	popeq	{r4, r5, r6, pc}
   13288:	bl	136c0 <__assert_fail@plt+0x2974>
   1328c:	push	{r4, lr}
   13290:	cmp	r1, #0
   13294:	orreq	r1, r1, #1
   13298:	bl	13788 <__assert_fail@plt+0x2a3c>
   1329c:	cmp	r0, #0
   132a0:	popne	{r4, pc}
   132a4:	bl	136c0 <__assert_fail@plt+0x2974>
   132a8:	push	{r4, r5, r6, lr}
   132ac:	mov	r6, r0
   132b0:	mov	r5, r1
   132b4:	mov	r4, r2
   132b8:	bl	13ab8 <__assert_fail@plt+0x2d6c>
   132bc:	cmp	r0, #0
   132c0:	popne	{r4, r5, r6, pc}
   132c4:	cmp	r6, #0
   132c8:	beq	132d8 <__assert_fail@plt+0x258c>
   132cc:	cmp	r5, #0
   132d0:	cmpne	r4, #0
   132d4:	popeq	{r4, r5, r6, pc}
   132d8:	bl	136c0 <__assert_fail@plt+0x2974>
   132dc:	b	132a8 <__assert_fail@plt+0x255c>
   132e0:	cmp	r2, #0
   132e4:	cmpne	r1, #0
   132e8:	moveq	r2, #1
   132ec:	moveq	r1, r2
   132f0:	push	{r4, lr}
   132f4:	bl	13ab8 <__assert_fail@plt+0x2d6c>
   132f8:	cmp	r0, #0
   132fc:	popne	{r4, pc}
   13300:	bl	136c0 <__assert_fail@plt+0x2974>
   13304:	mov	r2, r1
   13308:	mov	r1, r0
   1330c:	mov	r0, #0
   13310:	b	132a8 <__assert_fail@plt+0x255c>
   13314:	mov	r2, r1
   13318:	mov	r1, r0
   1331c:	mov	r0, #0
   13320:	b	132e0 <__assert_fail@plt+0x2594>
   13324:	push	{r4, r5, r6, r7, r8, lr}
   13328:	subs	r7, r0, #0
   1332c:	mov	r5, r1
   13330:	mov	r6, r2
   13334:	ldr	r4, [r1]
   13338:	bne	13374 <__assert_fail@plt+0x2628>
   1333c:	cmp	r4, #0
   13340:	bne	1335c <__assert_fail@plt+0x2610>
   13344:	mov	r1, r2
   13348:	mov	r0, #64	; 0x40
   1334c:	bl	13be4 <__assert_fail@plt+0x2e98>
   13350:	cmp	r0, #0
   13354:	movne	r4, r0
   13358:	addeq	r4, r0, #1
   1335c:	mov	r2, r6
   13360:	mov	r1, r4
   13364:	mov	r0, r7
   13368:	bl	132a8 <__assert_fail@plt+0x255c>
   1336c:	str	r4, [r5]
   13370:	pop	{r4, r5, r6, r7, r8, pc}
   13374:	lsr	r2, r4, #1
   13378:	add	r3, r2, #1
   1337c:	mvn	r3, r3
   13380:	cmp	r4, r3
   13384:	addls	r4, r4, #1
   13388:	addls	r4, r4, r2
   1338c:	bls	1335c <__assert_fail@plt+0x2610>
   13390:	bl	136c0 <__assert_fail@plt+0x2974>
   13394:	mov	r2, #1
   13398:	b	13324 <__assert_fail@plt+0x25d8>
   1339c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133a0:	mov	sl, r0
   133a4:	ldr	r8, [r1]
   133a8:	mov	fp, r1
   133ac:	mov	r5, r2
   133b0:	asrs	r4, r8, #1
   133b4:	mov	r9, r3
   133b8:	ldr	r7, [sp, #48]	; 0x30
   133bc:	bpl	13458 <__assert_fail@plt+0x270c>
   133c0:	rsb	r2, r4, #-2147483648	; 0x80000000
   133c4:	cmp	r8, r2
   133c8:	movge	r2, #0
   133cc:	movlt	r2, #1
   133d0:	mvn	r3, r9
   133d4:	cmp	r2, #0
   133d8:	lsr	r3, r3, #31
   133dc:	addeq	r4, r4, r8
   133e0:	mvnne	r4, #-2147483648	; 0x80000000
   133e4:	mov	r0, r3
   133e8:	cmp	r9, r4
   133ec:	movge	r0, #0
   133f0:	andlt	r0, r0, #1
   133f4:	cmp	r0, #0
   133f8:	str	r3, [sp, #4]
   133fc:	bne	135cc <__assert_fail@plt+0x2880>
   13400:	cmp	r7, #0
   13404:	bge	13518 <__assert_fail@plt+0x27cc>
   13408:	cmp	r4, #0
   1340c:	bge	13470 <__assert_fail@plt+0x2724>
   13410:	mov	r1, r7
   13414:	mvn	r0, #-2147483648	; 0x80000000
   13418:	bl	13df0 <__assert_fail@plt+0x30a4>
   1341c:	cmp	r0, r4
   13420:	movle	r0, #0
   13424:	movgt	r0, #1
   13428:	cmp	r0, #0
   1342c:	mvnne	r6, #-2147483648	; 0x80000000
   13430:	beq	13480 <__assert_fail@plt+0x2734>
   13434:	mov	r1, r7
   13438:	mov	r0, r6
   1343c:	bl	13df0 <__assert_fail@plt+0x30a4>
   13440:	mov	r1, r7
   13444:	mov	r4, r0
   13448:	mov	r0, r6
   1344c:	bl	14010 <__assert_fail@plt+0x32c4>
   13450:	sub	r1, r6, r1
   13454:	b	13490 <__assert_fail@plt+0x2744>
   13458:	mvn	r2, #-2147483648	; 0x80000000
   1345c:	sub	r2, r2, r4
   13460:	cmp	r8, r2
   13464:	movle	r2, #0
   13468:	movgt	r2, #1
   1346c:	b	133d0 <__assert_fail@plt+0x2684>
   13470:	cmn	r7, #1
   13474:	movne	r1, r7
   13478:	movne	r0, #-2147483648	; 0x80000000
   1347c:	bne	135e4 <__assert_fail@plt+0x2898>
   13480:	mul	r1, r7, r4
   13484:	cmp	r1, #63	; 0x3f
   13488:	movle	r6, #64	; 0x40
   1348c:	ble	13434 <__assert_fail@plt+0x26e8>
   13490:	cmp	sl, #0
   13494:	sub	r2, r4, r8
   13498:	streq	sl, [fp]
   1349c:	cmp	r2, r5
   134a0:	bge	13574 <__assert_fail@plt+0x2828>
   134a4:	cmp	r5, #0
   134a8:	bge	13540 <__assert_fail@plt+0x27f4>
   134ac:	rsb	r2, r5, #-2147483648	; 0x80000000
   134b0:	cmp	r8, r2
   134b4:	movge	r2, #0
   134b8:	movlt	r2, #1
   134bc:	cmp	r2, #0
   134c0:	bne	13514 <__assert_fail@plt+0x27c8>
   134c4:	ldr	r0, [sp, #4]
   134c8:	add	r5, r8, r5
   134cc:	cmp	r9, r5
   134d0:	movge	r0, #0
   134d4:	andlt	r0, r0, #1
   134d8:	cmp	r0, #0
   134dc:	mov	r4, r5
   134e0:	bne	13514 <__assert_fail@plt+0x27c8>
   134e4:	cmp	r7, #0
   134e8:	bge	13588 <__assert_fail@plt+0x283c>
   134ec:	cmp	r5, #0
   134f0:	bge	13560 <__assert_fail@plt+0x2814>
   134f4:	mov	r1, r7
   134f8:	mvn	r0, #-2147483648	; 0x80000000
   134fc:	bl	13df0 <__assert_fail@plt+0x30a4>
   13500:	cmp	r5, r0
   13504:	movge	r0, #0
   13508:	movlt	r0, #1
   1350c:	cmp	r0, #0
   13510:	beq	13570 <__assert_fail@plt+0x2824>
   13514:	bl	136c0 <__assert_fail@plt+0x2974>
   13518:	beq	13480 <__assert_fail@plt+0x2734>
   1351c:	cmp	r4, #0
   13520:	bge	135dc <__assert_fail@plt+0x2890>
   13524:	cmn	r4, #1
   13528:	beq	13480 <__assert_fail@plt+0x2734>
   1352c:	mov	r1, r4
   13530:	mov	r0, #-2147483648	; 0x80000000
   13534:	bl	13df0 <__assert_fail@plt+0x30a4>
   13538:	cmp	r7, r0
   1353c:	b	13420 <__assert_fail@plt+0x26d4>
   13540:	cmp	r8, #0
   13544:	blt	134c4 <__assert_fail@plt+0x2778>
   13548:	mvn	r2, #-2147483648	; 0x80000000
   1354c:	sub	r2, r2, r5
   13550:	cmp	r8, r2
   13554:	movle	r2, #0
   13558:	movgt	r2, #1
   1355c:	b	134bc <__assert_fail@plt+0x2770>
   13560:	cmn	r7, #1
   13564:	movne	r1, r7
   13568:	movne	r0, #-2147483648	; 0x80000000
   1356c:	bne	135c0 <__assert_fail@plt+0x2874>
   13570:	mul	r1, r5, r7
   13574:	mov	r0, sl
   13578:	bl	13258 <__assert_fail@plt+0x250c>
   1357c:	str	r4, [fp]
   13580:	add	sp, sp, #12
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	beq	13570 <__assert_fail@plt+0x2824>
   1358c:	cmp	r5, #0
   13590:	movge	r1, r7
   13594:	mvnge	r0, #-2147483648	; 0x80000000
   13598:	bge	135c0 <__assert_fail@plt+0x2874>
   1359c:	cmn	r5, #1
   135a0:	beq	13570 <__assert_fail@plt+0x2824>
   135a4:	mov	r1, r5
   135a8:	mov	r0, #-2147483648	; 0x80000000
   135ac:	bl	13df0 <__assert_fail@plt+0x30a4>
   135b0:	cmp	r7, r0
   135b4:	movle	r0, #0
   135b8:	movgt	r0, #1
   135bc:	b	1350c <__assert_fail@plt+0x27c0>
   135c0:	bl	13df0 <__assert_fail@plt+0x30a4>
   135c4:	cmp	r5, r0
   135c8:	b	135b4 <__assert_fail@plt+0x2868>
   135cc:	cmp	r7, #0
   135d0:	mov	r4, r9
   135d4:	blt	13470 <__assert_fail@plt+0x2724>
   135d8:	beq	13480 <__assert_fail@plt+0x2734>
   135dc:	mov	r1, r7
   135e0:	mvn	r0, #-2147483648	; 0x80000000
   135e4:	bl	13df0 <__assert_fail@plt+0x30a4>
   135e8:	cmp	r0, r4
   135ec:	movge	r0, #0
   135f0:	movlt	r0, #1
   135f4:	b	13428 <__assert_fail@plt+0x26dc>
   135f8:	push	{r4, lr}
   135fc:	bl	13700 <__assert_fail@plt+0x29b4>
   13600:	cmp	r0, #0
   13604:	popne	{r4, pc}
   13608:	bl	136c0 <__assert_fail@plt+0x2974>
   1360c:	mov	r1, #1
   13610:	b	135f8 <__assert_fail@plt+0x28ac>
   13614:	push	{r4, lr}
   13618:	bl	13700 <__assert_fail@plt+0x29b4>
   1361c:	cmp	r0, #0
   13620:	popne	{r4, pc}
   13624:	bl	136c0 <__assert_fail@plt+0x2974>
   13628:	mov	r1, #1
   1362c:	b	13614 <__assert_fail@plt+0x28c8>
   13630:	push	{r4, r5, r6, lr}
   13634:	mov	r4, r1
   13638:	mov	r5, r0
   1363c:	mov	r0, r1
   13640:	bl	1322c <__assert_fail@plt+0x24e0>
   13644:	mov	r2, r4
   13648:	mov	r1, r5
   1364c:	pop	{r4, r5, r6, lr}
   13650:	b	10b84 <memcpy@plt>
   13654:	push	{r4, r5, r6, lr}
   13658:	mov	r4, r1
   1365c:	mov	r5, r0
   13660:	mov	r0, r1
   13664:	bl	13240 <__assert_fail@plt+0x24f4>
   13668:	mov	r2, r4
   1366c:	mov	r1, r5
   13670:	pop	{r4, r5, r6, lr}
   13674:	b	10b84 <memcpy@plt>
   13678:	push	{r4, r5, r6, lr}
   1367c:	mov	r5, r0
   13680:	add	r0, r1, #1
   13684:	mov	r4, r1
   13688:	bl	13240 <__assert_fail@plt+0x24f4>
   1368c:	mov	r2, #0
   13690:	mov	r1, r5
   13694:	strb	r2, [r0, r4]
   13698:	mov	r2, r4
   1369c:	pop	{r4, r5, r6, lr}
   136a0:	b	10b84 <memcpy@plt>
   136a4:	push	{r4, lr}
   136a8:	mov	r4, r0
   136ac:	bl	10c80 <strlen@plt>
   136b0:	add	r1, r0, #1
   136b4:	mov	r0, r4
   136b8:	pop	{r4, lr}
   136bc:	b	13630 <__assert_fail@plt+0x28e4>
   136c0:	ldr	r3, [pc, #44]	; 136f4 <__assert_fail@plt+0x29a8>
   136c4:	push	{r4, lr}
   136c8:	mov	r2, #5
   136cc:	ldr	r1, [pc, #36]	; 136f8 <__assert_fail@plt+0x29ac>
   136d0:	mov	r0, #0
   136d4:	ldr	r4, [r3]
   136d8:	bl	10bb4 <dcgettext@plt>
   136dc:	ldr	r2, [pc, #24]	; 136fc <__assert_fail@plt+0x29b0>
   136e0:	mov	r1, #0
   136e4:	mov	r3, r0
   136e8:	mov	r0, r4
   136ec:	bl	10c20 <error@plt>
   136f0:	bl	10d34 <abort@plt>
   136f4:	ldrdeq	r5, [r2], -r4
   136f8:	andeq	r4, r1, sp, lsr #22
   136fc:	andeq	r4, r1, r1, lsr #14
   13700:	cmp	r1, #0
   13704:	cmpne	r0, #0
   13708:	moveq	r1, #1
   1370c:	moveq	r0, r1
   13710:	umull	r2, r3, r0, r1
   13714:	adds	r3, r3, #0
   13718:	movne	r3, #1
   1371c:	cmp	r2, #0
   13720:	blt	13730 <__assert_fail@plt+0x29e4>
   13724:	cmp	r3, #0
   13728:	bne	13730 <__assert_fail@plt+0x29e4>
   1372c:	b	10b30 <calloc@plt>
   13730:	push	{r4, lr}
   13734:	bl	10c8c <__errno_location@plt>
   13738:	mov	r3, #12
   1373c:	str	r3, [r0]
   13740:	mov	r0, #0
   13744:	pop	{r4, pc}
   13748:	cmp	r0, #0
   1374c:	mov	r3, #0
   13750:	moveq	r0, #1
   13754:	adds	r3, r3, #0
   13758:	movne	r3, #1
   1375c:	cmp	r0, #0
   13760:	blt	13770 <__assert_fail@plt+0x2a24>
   13764:	cmp	r3, #0
   13768:	bne	13770 <__assert_fail@plt+0x2a24>
   1376c:	b	10c38 <malloc@plt>
   13770:	push	{r4, lr}
   13774:	bl	10c8c <__errno_location@plt>
   13778:	mov	r3, #12
   1377c:	str	r3, [r0]
   13780:	mov	r0, #0
   13784:	pop	{r4, pc}
   13788:	cmp	r0, #0
   1378c:	push	{r4, lr}
   13790:	mov	r4, r1
   13794:	bne	137a4 <__assert_fail@plt+0x2a58>
   13798:	mov	r0, r1
   1379c:	pop	{r4, lr}
   137a0:	b	13748 <__assert_fail@plt+0x29fc>
   137a4:	cmp	r1, #0
   137a8:	bne	137b8 <__assert_fail@plt+0x2a6c>
   137ac:	bl	1394c <__assert_fail@plt+0x2c00>
   137b0:	mov	r0, #0
   137b4:	pop	{r4, pc}
   137b8:	cmp	r1, #0
   137bc:	blt	137cc <__assert_fail@plt+0x2a80>
   137c0:	mov	r3, #0
   137c4:	cmp	r3, r3
   137c8:	beq	137dc <__assert_fail@plt+0x2a90>
   137cc:	bl	10c8c <__errno_location@plt>
   137d0:	mov	r3, #12
   137d4:	str	r3, [r0]
   137d8:	b	137b0 <__assert_fail@plt+0x2a64>
   137dc:	pop	{r4, lr}
   137e0:	b	10bc0 <realloc@plt>
   137e4:	push	{r4, r5, r6, lr}
   137e8:	mov	r4, r0
   137ec:	bl	10bfc <__fpending@plt>
   137f0:	mov	r5, r0
   137f4:	mov	r0, r4
   137f8:	bl	10c08 <ferror_unlocked@plt>
   137fc:	mov	r6, r0
   13800:	mov	r0, r4
   13804:	bl	13854 <__assert_fail@plt+0x2b08>
   13808:	cmp	r6, #0
   1380c:	mov	r4, r0
   13810:	bne	1383c <__assert_fail@plt+0x2af0>
   13814:	cmp	r0, #0
   13818:	beq	13834 <__assert_fail@plt+0x2ae8>
   1381c:	cmp	r5, #0
   13820:	bne	1384c <__assert_fail@plt+0x2b00>
   13824:	bl	10c8c <__errno_location@plt>
   13828:	ldr	r4, [r0]
   1382c:	subs	r4, r4, #9
   13830:	mvnne	r4, #0
   13834:	mov	r0, r4
   13838:	pop	{r4, r5, r6, pc}
   1383c:	cmp	r0, #0
   13840:	bne	1384c <__assert_fail@plt+0x2b00>
   13844:	bl	10c8c <__errno_location@plt>
   13848:	str	r4, [r0]
   1384c:	mvn	r4, #0
   13850:	b	13834 <__assert_fail@plt+0x2ae8>
   13854:	push	{r0, r1, r2, r4, r5, lr}
   13858:	mov	r4, r0
   1385c:	bl	10cbc <fileno@plt>
   13860:	cmp	r0, #0
   13864:	mov	r0, r4
   13868:	bge	13878 <__assert_fail@plt+0x2b2c>
   1386c:	add	sp, sp, #12
   13870:	pop	{r4, r5, lr}
   13874:	b	10cd4 <fclose@plt>
   13878:	bl	10c50 <__freading@plt>
   1387c:	cmp	r0, #0
   13880:	bne	138bc <__assert_fail@plt+0x2b70>
   13884:	mov	r0, r4
   13888:	bl	138fc <__assert_fail@plt+0x2bb0>
   1388c:	cmp	r0, #0
   13890:	bne	138f0 <__assert_fail@plt+0x2ba4>
   13894:	mov	r5, #0
   13898:	mov	r0, r4
   1389c:	bl	10cd4 <fclose@plt>
   138a0:	cmp	r5, #0
   138a4:	beq	138b4 <__assert_fail@plt+0x2b68>
   138a8:	bl	10c8c <__errno_location@plt>
   138ac:	str	r5, [r0]
   138b0:	mvn	r0, #0
   138b4:	add	sp, sp, #12
   138b8:	pop	{r4, r5, pc}
   138bc:	mov	r0, r4
   138c0:	bl	10cbc <fileno@plt>
   138c4:	mov	r3, #1
   138c8:	str	r3, [sp]
   138cc:	mov	r2, #0
   138d0:	mov	r3, #0
   138d4:	bl	10be4 <lseek64@plt>
   138d8:	mvn	r3, #0
   138dc:	mvn	r2, #0
   138e0:	cmp	r1, r3
   138e4:	cmpeq	r0, r2
   138e8:	bne	13884 <__assert_fail@plt+0x2b38>
   138ec:	b	13894 <__assert_fail@plt+0x2b48>
   138f0:	bl	10c8c <__errno_location@plt>
   138f4:	ldr	r5, [r0]
   138f8:	b	13898 <__assert_fail@plt+0x2b4c>
   138fc:	push	{r0, r1, r4, lr}
   13900:	subs	r4, r0, #0
   13904:	bne	13918 <__assert_fail@plt+0x2bcc>
   13908:	mov	r0, r4
   1390c:	add	sp, sp, #8
   13910:	pop	{r4, lr}
   13914:	b	10b60 <fflush@plt>
   13918:	bl	10c50 <__freading@plt>
   1391c:	cmp	r0, #0
   13920:	beq	13908 <__assert_fail@plt+0x2bbc>
   13924:	ldr	r3, [r4]
   13928:	tst	r3, #256	; 0x100
   1392c:	beq	13908 <__assert_fail@plt+0x2bbc>
   13930:	mov	r3, #1
   13934:	str	r3, [sp]
   13938:	mov	r2, #0
   1393c:	mov	r3, #0
   13940:	mov	r0, r4
   13944:	bl	139a0 <__assert_fail@plt+0x2c54>
   13948:	b	13908 <__assert_fail@plt+0x2bbc>
   1394c:	push	{r0, r1, r2, r4, r5, lr}
   13950:	mov	r5, r0
   13954:	bl	10c8c <__errno_location@plt>
   13958:	ldr	r3, [r0]
   1395c:	mov	r4, r0
   13960:	str	r3, [sp]
   13964:	str	r3, [sp, #4]
   13968:	mov	r3, #0
   1396c:	str	r3, [r0]
   13970:	mov	r0, r5
   13974:	bl	10b6c <free@plt>
   13978:	ldr	r3, [r4]
   1397c:	add	r2, sp, #8
   13980:	cmp	r3, #0
   13984:	moveq	r3, #4
   13988:	movne	r3, #0
   1398c:	add	r3, r2, r3
   13990:	ldr	r3, [r3, #-8]
   13994:	str	r3, [r4]
   13998:	add	sp, sp, #12
   1399c:	pop	{r4, r5, pc}
   139a0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   139a4:	mov	r4, r0
   139a8:	ldmib	r0, {ip, lr}
   139ac:	ldr	r8, [sp, #32]
   139b0:	cmp	lr, ip
   139b4:	bne	13a20 <__assert_fail@plt+0x2cd4>
   139b8:	ldr	lr, [r0, #20]
   139bc:	ldr	ip, [r0, #16]
   139c0:	cmp	lr, ip
   139c4:	bne	13a20 <__assert_fail@plt+0x2cd4>
   139c8:	ldr	r5, [r0, #36]	; 0x24
   139cc:	cmp	r5, #0
   139d0:	bne	13a20 <__assert_fail@plt+0x2cd4>
   139d4:	mov	r6, r2
   139d8:	mov	r7, r3
   139dc:	bl	10cbc <fileno@plt>
   139e0:	mov	r2, r6
   139e4:	mov	r3, r7
   139e8:	str	r8, [sp]
   139ec:	bl	10be4 <lseek64@plt>
   139f0:	mvn	r3, #0
   139f4:	mvn	r2, #0
   139f8:	cmp	r1, r3
   139fc:	cmpeq	r0, r2
   13a00:	mvneq	r0, #0
   13a04:	ldrne	r3, [r4]
   13a08:	strdne	r0, [r4, #80]	; 0x50
   13a0c:	movne	r0, r5
   13a10:	bicne	r3, r3, #16
   13a14:	strne	r3, [r4]
   13a18:	add	sp, sp, #8
   13a1c:	pop	{r4, r5, r6, r7, r8, pc}
   13a20:	str	r8, [sp, #32]
   13a24:	mov	r0, r4
   13a28:	add	sp, sp, #8
   13a2c:	pop	{r4, r5, r6, r7, r8, lr}
   13a30:	b	10ce0 <fseeko64@plt>
   13a34:	push	{r4, lr}
   13a38:	mov	r0, #14
   13a3c:	bl	10d04 <nl_langinfo@plt>
   13a40:	ldr	r3, [pc, #24]	; 13a60 <__assert_fail@plt+0x2d14>
   13a44:	cmp	r0, #0
   13a48:	moveq	r0, r3
   13a4c:	ldr	r3, [pc, #16]	; 13a64 <__assert_fail@plt+0x2d18>
   13a50:	ldrb	r2, [r0]
   13a54:	cmp	r2, #0
   13a58:	moveq	r0, r3
   13a5c:	pop	{r4, pc}
   13a60:	strdeq	r4, [r1], -r0
   13a64:	andeq	r4, r1, lr, lsr fp
   13a68:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13a6c:	subs	r5, r0, #0
   13a70:	addeq	r5, sp, #4
   13a74:	mov	r0, r5
   13a78:	mov	r7, r2
   13a7c:	mov	r6, r1
   13a80:	bl	10c14 <mbrtowc@plt>
   13a84:	cmp	r7, #0
   13a88:	cmnne	r0, #3
   13a8c:	mov	r4, r0
   13a90:	bls	13aac <__assert_fail@plt+0x2d60>
   13a94:	mov	r0, #0
   13a98:	bl	13b04 <__assert_fail@plt+0x2db8>
   13a9c:	cmp	r0, #0
   13aa0:	moveq	r4, #1
   13aa4:	ldrbeq	r3, [r6]
   13aa8:	streq	r3, [r5]
   13aac:	mov	r0, r4
   13ab0:	add	sp, sp, #12
   13ab4:	pop	{r4, r5, r6, r7, pc}
   13ab8:	push	{r4, r5, r6, lr}
   13abc:	subs	r4, r2, #0
   13ac0:	mov	r6, r0
   13ac4:	mov	r5, r1
   13ac8:	beq	13ae0 <__assert_fail@plt+0x2d94>
   13acc:	mov	r1, r4
   13ad0:	mvn	r0, #0
   13ad4:	bl	13be4 <__assert_fail@plt+0x2e98>
   13ad8:	cmp	r0, r5
   13adc:	bcc	13af0 <__assert_fail@plt+0x2da4>
   13ae0:	mul	r1, r5, r4
   13ae4:	mov	r0, r6
   13ae8:	pop	{r4, r5, r6, lr}
   13aec:	b	13788 <__assert_fail@plt+0x2a3c>
   13af0:	bl	10c8c <__errno_location@plt>
   13af4:	mov	r3, #12
   13af8:	str	r3, [r0]
   13afc:	mov	r0, #0
   13b00:	pop	{r4, r5, r6, pc}
   13b04:	push	{lr}		; (str lr, [sp, #-4]!)
   13b08:	sub	sp, sp, #268	; 0x10c
   13b0c:	ldr	r2, [pc, #64]	; 13b54 <__assert_fail@plt+0x2e08>
   13b10:	add	r1, sp, #4
   13b14:	bl	13b60 <__assert_fail@plt+0x2e14>
   13b18:	cmp	r0, #0
   13b1c:	movne	r0, #0
   13b20:	bne	13b4c <__assert_fail@plt+0x2e00>
   13b24:	ldr	r1, [pc, #44]	; 13b58 <__assert_fail@plt+0x2e0c>
   13b28:	add	r0, sp, #4
   13b2c:	bl	10b54 <strcmp@plt>
   13b30:	cmp	r0, #0
   13b34:	beq	13b4c <__assert_fail@plt+0x2e00>
   13b38:	ldr	r1, [pc, #28]	; 13b5c <__assert_fail@plt+0x2e10>
   13b3c:	add	r0, sp, #4
   13b40:	bl	10b54 <strcmp@plt>
   13b44:	adds	r0, r0, #0
   13b48:	movne	r0, #1
   13b4c:	add	sp, sp, #268	; 0x10c
   13b50:	pop	{pc}		; (ldr pc, [sp], #4)
   13b54:	andeq	r0, r0, r1, lsl #2
   13b58:	andeq	r4, r1, r4, asr #22
   13b5c:	andeq	r4, r1, r6, asr #22
   13b60:	push	{r4, r5, r6, lr}
   13b64:	mov	r5, r1
   13b68:	mov	r1, #0
   13b6c:	mov	r4, r2
   13b70:	bl	10cec <setlocale@plt>
   13b74:	subs	r6, r0, #0
   13b78:	bne	13b8c <__assert_fail@plt+0x2e40>
   13b7c:	cmp	r4, #0
   13b80:	strbne	r6, [r5]
   13b84:	mov	r0, #22
   13b88:	pop	{r4, r5, r6, pc}
   13b8c:	bl	10c80 <strlen@plt>
   13b90:	cmp	r4, r0
   13b94:	bls	13bb0 <__assert_fail@plt+0x2e64>
   13b98:	add	r2, r0, #1
   13b9c:	mov	r1, r6
   13ba0:	mov	r0, r5
   13ba4:	bl	10b84 <memcpy@plt>
   13ba8:	mov	r0, #0
   13bac:	pop	{r4, r5, r6, pc}
   13bb0:	cmp	r4, #0
   13bb4:	beq	13bd4 <__assert_fail@plt+0x2e88>
   13bb8:	sub	r4, r4, #1
   13bbc:	mov	r2, r4
   13bc0:	mov	r1, r6
   13bc4:	mov	r0, r5
   13bc8:	bl	10b84 <memcpy@plt>
   13bcc:	mov	r3, #0
   13bd0:	strb	r3, [r5, r4]
   13bd4:	mov	r0, #34	; 0x22
   13bd8:	pop	{r4, r5, r6, pc}
   13bdc:	mov	r1, #0
   13be0:	b	10cec <setlocale@plt>
   13be4:	subs	r2, r1, #1
   13be8:	bxeq	lr
   13bec:	bcc	13dc4 <__assert_fail@plt+0x3078>
   13bf0:	cmp	r0, r1
   13bf4:	bls	13da8 <__assert_fail@plt+0x305c>
   13bf8:	tst	r1, r2
   13bfc:	beq	13db4 <__assert_fail@plt+0x3068>
   13c00:	clz	r3, r0
   13c04:	clz	r2, r1
   13c08:	sub	r3, r2, r3
   13c0c:	rsbs	r3, r3, #31
   13c10:	addne	r3, r3, r3, lsl #1
   13c14:	mov	r2, #0
   13c18:	addne	pc, pc, r3, lsl #2
   13c1c:	nop			; (mov r0, r0)
   13c20:	cmp	r0, r1, lsl #31
   13c24:	adc	r2, r2, r2
   13c28:	subcs	r0, r0, r1, lsl #31
   13c2c:	cmp	r0, r1, lsl #30
   13c30:	adc	r2, r2, r2
   13c34:	subcs	r0, r0, r1, lsl #30
   13c38:	cmp	r0, r1, lsl #29
   13c3c:	adc	r2, r2, r2
   13c40:	subcs	r0, r0, r1, lsl #29
   13c44:	cmp	r0, r1, lsl #28
   13c48:	adc	r2, r2, r2
   13c4c:	subcs	r0, r0, r1, lsl #28
   13c50:	cmp	r0, r1, lsl #27
   13c54:	adc	r2, r2, r2
   13c58:	subcs	r0, r0, r1, lsl #27
   13c5c:	cmp	r0, r1, lsl #26
   13c60:	adc	r2, r2, r2
   13c64:	subcs	r0, r0, r1, lsl #26
   13c68:	cmp	r0, r1, lsl #25
   13c6c:	adc	r2, r2, r2
   13c70:	subcs	r0, r0, r1, lsl #25
   13c74:	cmp	r0, r1, lsl #24
   13c78:	adc	r2, r2, r2
   13c7c:	subcs	r0, r0, r1, lsl #24
   13c80:	cmp	r0, r1, lsl #23
   13c84:	adc	r2, r2, r2
   13c88:	subcs	r0, r0, r1, lsl #23
   13c8c:	cmp	r0, r1, lsl #22
   13c90:	adc	r2, r2, r2
   13c94:	subcs	r0, r0, r1, lsl #22
   13c98:	cmp	r0, r1, lsl #21
   13c9c:	adc	r2, r2, r2
   13ca0:	subcs	r0, r0, r1, lsl #21
   13ca4:	cmp	r0, r1, lsl #20
   13ca8:	adc	r2, r2, r2
   13cac:	subcs	r0, r0, r1, lsl #20
   13cb0:	cmp	r0, r1, lsl #19
   13cb4:	adc	r2, r2, r2
   13cb8:	subcs	r0, r0, r1, lsl #19
   13cbc:	cmp	r0, r1, lsl #18
   13cc0:	adc	r2, r2, r2
   13cc4:	subcs	r0, r0, r1, lsl #18
   13cc8:	cmp	r0, r1, lsl #17
   13ccc:	adc	r2, r2, r2
   13cd0:	subcs	r0, r0, r1, lsl #17
   13cd4:	cmp	r0, r1, lsl #16
   13cd8:	adc	r2, r2, r2
   13cdc:	subcs	r0, r0, r1, lsl #16
   13ce0:	cmp	r0, r1, lsl #15
   13ce4:	adc	r2, r2, r2
   13ce8:	subcs	r0, r0, r1, lsl #15
   13cec:	cmp	r0, r1, lsl #14
   13cf0:	adc	r2, r2, r2
   13cf4:	subcs	r0, r0, r1, lsl #14
   13cf8:	cmp	r0, r1, lsl #13
   13cfc:	adc	r2, r2, r2
   13d00:	subcs	r0, r0, r1, lsl #13
   13d04:	cmp	r0, r1, lsl #12
   13d08:	adc	r2, r2, r2
   13d0c:	subcs	r0, r0, r1, lsl #12
   13d10:	cmp	r0, r1, lsl #11
   13d14:	adc	r2, r2, r2
   13d18:	subcs	r0, r0, r1, lsl #11
   13d1c:	cmp	r0, r1, lsl #10
   13d20:	adc	r2, r2, r2
   13d24:	subcs	r0, r0, r1, lsl #10
   13d28:	cmp	r0, r1, lsl #9
   13d2c:	adc	r2, r2, r2
   13d30:	subcs	r0, r0, r1, lsl #9
   13d34:	cmp	r0, r1, lsl #8
   13d38:	adc	r2, r2, r2
   13d3c:	subcs	r0, r0, r1, lsl #8
   13d40:	cmp	r0, r1, lsl #7
   13d44:	adc	r2, r2, r2
   13d48:	subcs	r0, r0, r1, lsl #7
   13d4c:	cmp	r0, r1, lsl #6
   13d50:	adc	r2, r2, r2
   13d54:	subcs	r0, r0, r1, lsl #6
   13d58:	cmp	r0, r1, lsl #5
   13d5c:	adc	r2, r2, r2
   13d60:	subcs	r0, r0, r1, lsl #5
   13d64:	cmp	r0, r1, lsl #4
   13d68:	adc	r2, r2, r2
   13d6c:	subcs	r0, r0, r1, lsl #4
   13d70:	cmp	r0, r1, lsl #3
   13d74:	adc	r2, r2, r2
   13d78:	subcs	r0, r0, r1, lsl #3
   13d7c:	cmp	r0, r1, lsl #2
   13d80:	adc	r2, r2, r2
   13d84:	subcs	r0, r0, r1, lsl #2
   13d88:	cmp	r0, r1, lsl #1
   13d8c:	adc	r2, r2, r2
   13d90:	subcs	r0, r0, r1, lsl #1
   13d94:	cmp	r0, r1
   13d98:	adc	r2, r2, r2
   13d9c:	subcs	r0, r0, r1
   13da0:	mov	r0, r2
   13da4:	bx	lr
   13da8:	moveq	r0, #1
   13dac:	movne	r0, #0
   13db0:	bx	lr
   13db4:	clz	r2, r1
   13db8:	rsb	r2, r2, #31
   13dbc:	lsr	r0, r0, r2
   13dc0:	bx	lr
   13dc4:	cmp	r0, #0
   13dc8:	mvnne	r0, #0
   13dcc:	b	14030 <__assert_fail@plt+0x32e4>
   13dd0:	cmp	r1, #0
   13dd4:	beq	13dc4 <__assert_fail@plt+0x3078>
   13dd8:	push	{r0, r1, lr}
   13ddc:	bl	13be4 <__assert_fail@plt+0x2e98>
   13de0:	pop	{r1, r2, lr}
   13de4:	mul	r3, r2, r0
   13de8:	sub	r1, r1, r3
   13dec:	bx	lr
   13df0:	cmp	r1, #0
   13df4:	beq	14000 <__assert_fail@plt+0x32b4>
   13df8:	eor	ip, r0, r1
   13dfc:	rsbmi	r1, r1, #0
   13e00:	subs	r2, r1, #1
   13e04:	beq	13fcc <__assert_fail@plt+0x3280>
   13e08:	movs	r3, r0
   13e0c:	rsbmi	r3, r0, #0
   13e10:	cmp	r3, r1
   13e14:	bls	13fd8 <__assert_fail@plt+0x328c>
   13e18:	tst	r1, r2
   13e1c:	beq	13fe8 <__assert_fail@plt+0x329c>
   13e20:	clz	r2, r3
   13e24:	clz	r0, r1
   13e28:	sub	r2, r0, r2
   13e2c:	rsbs	r2, r2, #31
   13e30:	addne	r2, r2, r2, lsl #1
   13e34:	mov	r0, #0
   13e38:	addne	pc, pc, r2, lsl #2
   13e3c:	nop			; (mov r0, r0)
   13e40:	cmp	r3, r1, lsl #31
   13e44:	adc	r0, r0, r0
   13e48:	subcs	r3, r3, r1, lsl #31
   13e4c:	cmp	r3, r1, lsl #30
   13e50:	adc	r0, r0, r0
   13e54:	subcs	r3, r3, r1, lsl #30
   13e58:	cmp	r3, r1, lsl #29
   13e5c:	adc	r0, r0, r0
   13e60:	subcs	r3, r3, r1, lsl #29
   13e64:	cmp	r3, r1, lsl #28
   13e68:	adc	r0, r0, r0
   13e6c:	subcs	r3, r3, r1, lsl #28
   13e70:	cmp	r3, r1, lsl #27
   13e74:	adc	r0, r0, r0
   13e78:	subcs	r3, r3, r1, lsl #27
   13e7c:	cmp	r3, r1, lsl #26
   13e80:	adc	r0, r0, r0
   13e84:	subcs	r3, r3, r1, lsl #26
   13e88:	cmp	r3, r1, lsl #25
   13e8c:	adc	r0, r0, r0
   13e90:	subcs	r3, r3, r1, lsl #25
   13e94:	cmp	r3, r1, lsl #24
   13e98:	adc	r0, r0, r0
   13e9c:	subcs	r3, r3, r1, lsl #24
   13ea0:	cmp	r3, r1, lsl #23
   13ea4:	adc	r0, r0, r0
   13ea8:	subcs	r3, r3, r1, lsl #23
   13eac:	cmp	r3, r1, lsl #22
   13eb0:	adc	r0, r0, r0
   13eb4:	subcs	r3, r3, r1, lsl #22
   13eb8:	cmp	r3, r1, lsl #21
   13ebc:	adc	r0, r0, r0
   13ec0:	subcs	r3, r3, r1, lsl #21
   13ec4:	cmp	r3, r1, lsl #20
   13ec8:	adc	r0, r0, r0
   13ecc:	subcs	r3, r3, r1, lsl #20
   13ed0:	cmp	r3, r1, lsl #19
   13ed4:	adc	r0, r0, r0
   13ed8:	subcs	r3, r3, r1, lsl #19
   13edc:	cmp	r3, r1, lsl #18
   13ee0:	adc	r0, r0, r0
   13ee4:	subcs	r3, r3, r1, lsl #18
   13ee8:	cmp	r3, r1, lsl #17
   13eec:	adc	r0, r0, r0
   13ef0:	subcs	r3, r3, r1, lsl #17
   13ef4:	cmp	r3, r1, lsl #16
   13ef8:	adc	r0, r0, r0
   13efc:	subcs	r3, r3, r1, lsl #16
   13f00:	cmp	r3, r1, lsl #15
   13f04:	adc	r0, r0, r0
   13f08:	subcs	r3, r3, r1, lsl #15
   13f0c:	cmp	r3, r1, lsl #14
   13f10:	adc	r0, r0, r0
   13f14:	subcs	r3, r3, r1, lsl #14
   13f18:	cmp	r3, r1, lsl #13
   13f1c:	adc	r0, r0, r0
   13f20:	subcs	r3, r3, r1, lsl #13
   13f24:	cmp	r3, r1, lsl #12
   13f28:	adc	r0, r0, r0
   13f2c:	subcs	r3, r3, r1, lsl #12
   13f30:	cmp	r3, r1, lsl #11
   13f34:	adc	r0, r0, r0
   13f38:	subcs	r3, r3, r1, lsl #11
   13f3c:	cmp	r3, r1, lsl #10
   13f40:	adc	r0, r0, r0
   13f44:	subcs	r3, r3, r1, lsl #10
   13f48:	cmp	r3, r1, lsl #9
   13f4c:	adc	r0, r0, r0
   13f50:	subcs	r3, r3, r1, lsl #9
   13f54:	cmp	r3, r1, lsl #8
   13f58:	adc	r0, r0, r0
   13f5c:	subcs	r3, r3, r1, lsl #8
   13f60:	cmp	r3, r1, lsl #7
   13f64:	adc	r0, r0, r0
   13f68:	subcs	r3, r3, r1, lsl #7
   13f6c:	cmp	r3, r1, lsl #6
   13f70:	adc	r0, r0, r0
   13f74:	subcs	r3, r3, r1, lsl #6
   13f78:	cmp	r3, r1, lsl #5
   13f7c:	adc	r0, r0, r0
   13f80:	subcs	r3, r3, r1, lsl #5
   13f84:	cmp	r3, r1, lsl #4
   13f88:	adc	r0, r0, r0
   13f8c:	subcs	r3, r3, r1, lsl #4
   13f90:	cmp	r3, r1, lsl #3
   13f94:	adc	r0, r0, r0
   13f98:	subcs	r3, r3, r1, lsl #3
   13f9c:	cmp	r3, r1, lsl #2
   13fa0:	adc	r0, r0, r0
   13fa4:	subcs	r3, r3, r1, lsl #2
   13fa8:	cmp	r3, r1, lsl #1
   13fac:	adc	r0, r0, r0
   13fb0:	subcs	r3, r3, r1, lsl #1
   13fb4:	cmp	r3, r1
   13fb8:	adc	r0, r0, r0
   13fbc:	subcs	r3, r3, r1
   13fc0:	cmp	ip, #0
   13fc4:	rsbmi	r0, r0, #0
   13fc8:	bx	lr
   13fcc:	teq	ip, r0
   13fd0:	rsbmi	r0, r0, #0
   13fd4:	bx	lr
   13fd8:	movcc	r0, #0
   13fdc:	asreq	r0, ip, #31
   13fe0:	orreq	r0, r0, #1
   13fe4:	bx	lr
   13fe8:	clz	r2, r1
   13fec:	rsb	r2, r2, #31
   13ff0:	cmp	ip, #0
   13ff4:	lsr	r0, r3, r2
   13ff8:	rsbmi	r0, r0, #0
   13ffc:	bx	lr
   14000:	cmp	r0, #0
   14004:	mvngt	r0, #-2147483648	; 0x80000000
   14008:	movlt	r0, #-2147483648	; 0x80000000
   1400c:	b	14030 <__assert_fail@plt+0x32e4>
   14010:	cmp	r1, #0
   14014:	beq	14000 <__assert_fail@plt+0x32b4>
   14018:	push	{r0, r1, lr}
   1401c:	bl	13df8 <__assert_fail@plt+0x30ac>
   14020:	pop	{r1, r2, lr}
   14024:	mul	r3, r2, r0
   14028:	sub	r1, r1, r3
   1402c:	bx	lr
   14030:	push	{r1, lr}
   14034:	mov	r0, #8
   14038:	bl	10b48 <raise@plt>
   1403c:	pop	{r1, pc}
   14040:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14044:	mov	r7, r0
   14048:	ldr	r6, [pc, #72]	; 14098 <__assert_fail@plt+0x334c>
   1404c:	ldr	r5, [pc, #72]	; 1409c <__assert_fail@plt+0x3350>
   14050:	add	r6, pc, r6
   14054:	add	r5, pc, r5
   14058:	sub	r6, r6, r5
   1405c:	mov	r8, r1
   14060:	mov	r9, r2
   14064:	bl	10b10 <calloc@plt-0x20>
   14068:	asrs	r6, r6, #2
   1406c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14070:	mov	r4, #0
   14074:	add	r4, r4, #1
   14078:	ldr	r3, [r5], #4
   1407c:	mov	r2, r9
   14080:	mov	r1, r8
   14084:	mov	r0, r7
   14088:	blx	r3
   1408c:	cmp	r6, r4
   14090:	bne	14074 <__assert_fail@plt+0x3328>
   14094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14098:			; <UNDEFINED> instruction: 0x00010eb8
   1409c:			; <UNDEFINED> instruction: 0x00010eb0
   140a0:	bx	lr
   140a4:	ldr	r3, [pc, #12]	; 140b8 <__assert_fail@plt+0x336c>
   140a8:	mov	r1, #0
   140ac:	add	r3, pc, r3
   140b0:	ldr	r2, [r3]
   140b4:	b	10c98 <__cxa_atexit@plt>
   140b8:	andeq	r1, r1, r8, lsl r0

Disassembly of section .fini:

000140bc <.fini>:
   140bc:	push	{r3, lr}
   140c0:	pop	{r3, pc}
