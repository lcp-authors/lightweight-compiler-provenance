
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011320 <.init>:
   11320:	push	{r3, lr}
   11324:	bl	119c0 <__assert_fail@plt+0x26c>
   11328:	pop	{r3, pc}

Disassembly of section .plt:

0001132c <calloc@plt-0x14>:
   1132c:	push	{lr}		; (str lr, [sp, #-4]!)
   11330:	ldr	lr, [pc, #4]	; 1133c <calloc@plt-0x4>
   11334:	add	lr, pc, lr
   11338:	ldr	pc, [lr, #8]!
   1133c:	andeq	r4, r2, r4, asr #25

00011340 <calloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #36, 20	; 0x24000
   11348:	ldr	pc, [ip, #3268]!	; 0xcc4

0001134c <fputs_unlocked@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #36, 20	; 0x24000
   11354:	ldr	pc, [ip, #3260]!	; 0xcbc

00011358 <raise@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #36, 20	; 0x24000
   11360:	ldr	pc, [ip, #3252]!	; 0xcb4

00011364 <__gmpz_scan1@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #36, 20	; 0x24000
   1136c:	ldr	pc, [ip, #3244]!	; 0xcac

00011370 <iconv_close@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #36, 20	; 0x24000
   11378:	ldr	pc, [ip, #3236]!	; 0xca4

0001137c <iconv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #36, 20	; 0x24000
   11384:	ldr	pc, [ip, #3228]!	; 0xc9c

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #36, 20	; 0x24000
   11390:	ldr	pc, [ip, #3220]!	; 0xc94

00011394 <fflush@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #36, 20	; 0x24000
   1139c:	ldr	pc, [ip, #3212]!	; 0xc8c

000113a0 <__gmpz_sub_ui@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #36, 20	; 0x24000
   113a8:	ldr	pc, [ip, #3204]!	; 0xc84

000113ac <__gmpz_clears@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #36, 20	; 0x24000
   113b4:	ldr	pc, [ip, #3196]!	; 0xc7c

000113b8 <wcwidth@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #36, 20	; 0x24000
   113c0:	ldr	pc, [ip, #3188]!	; 0xc74

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #36, 20	; 0x24000
   113cc:	ldr	pc, [ip, #3180]!	; 0xc6c

000113d0 <__gmpz_set_ui@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #36, 20	; 0x24000
   113d8:	ldr	pc, [ip, #3172]!	; 0xc64

000113dc <free@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #36, 20	; 0x24000
   113e4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #36, 20	; 0x24000
   113f0:	ldr	pc, [ip, #3156]!	; 0xc54

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #36, 20	; 0x24000
   113fc:	ldr	pc, [ip, #3148]!	; 0xc4c

00011400 <__gmpz_sub@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #36, 20	; 0x24000
   11408:	ldr	pc, [ip, #3140]!	; 0xc44

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #36, 20	; 0x24000
   11414:	ldr	pc, [ip, #3132]!	; 0xc3c

00011418 <memcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #36, 20	; 0x24000
   11420:	ldr	pc, [ip, #3124]!	; 0xc34

00011424 <fputc_unlocked@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #36, 20	; 0x24000
   1142c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011430 <dcgettext@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #36, 20	; 0x24000
   11438:	ldr	pc, [ip, #3108]!	; 0xc24

0001143c <__gmpz_powm@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #36, 20	; 0x24000
   11444:	ldr	pc, [ip, #3100]!	; 0xc1c

00011448 <strdup@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #36, 20	; 0x24000
   11450:	ldr	pc, [ip, #3092]!	; 0xc14

00011454 <__gmpz_divexact@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #36, 20	; 0x24000
   1145c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011460 <__gmpz_inits@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #36, 20	; 0x24000
   11468:	ldr	pc, [ip, #3076]!	; 0xc04

0001146c <__gmpz_set@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #36, 20	; 0x24000
   11474:	ldr	pc, [ip, #3068]!	; 0xbfc

00011478 <realloc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #36, 20	; 0x24000
   11480:	ldr	pc, [ip, #3060]!	; 0xbf4

00011484 <__gmpz_mul@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #36, 20	; 0x24000
   1148c:	ldr	pc, [ip, #3052]!	; 0xbec

00011490 <__gmpz_tdiv_q_ui@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #36, 20	; 0x24000
   11498:	ldr	pc, [ip, #3044]!	; 0xbe4

0001149c <textdomain@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #36, 20	; 0x24000
   114a4:	ldr	pc, [ip, #3036]!	; 0xbdc

000114a8 <iswcntrl@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #36, 20	; 0x24000
   114b0:	ldr	pc, [ip, #3028]!	; 0xbd4

000114b4 <__gmpz_out_str@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #36, 20	; 0x24000
   114bc:	ldr	pc, [ip, #3020]!	; 0xbcc

000114c0 <fflush_unlocked@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #36, 20	; 0x24000
   114c8:	ldr	pc, [ip, #3012]!	; 0xbc4

000114cc <iswprint@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #36, 20	; 0x24000
   114d4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114d8 <fwrite@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #36, 20	; 0x24000
   114e0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114e4 <lseek64@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #36, 20	; 0x24000
   114ec:	ldr	pc, [ip, #2988]!	; 0xbac

000114f0 <__gmpz_fdiv_q_2exp@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #36, 20	; 0x24000
   114f8:	ldr	pc, [ip, #2980]!	; 0xba4

000114fc <__ctype_get_mb_cur_max@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #36, 20	; 0x24000
   11504:	ldr	pc, [ip, #2972]!	; 0xb9c

00011508 <__fpending@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #36, 20	; 0x24000
   11510:	ldr	pc, [ip, #2964]!	; 0xb94

00011514 <mbrtowc@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #36, 20	; 0x24000
   1151c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011520 <error@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #36, 20	; 0x24000
   11528:	ldr	pc, [ip, #2948]!	; 0xb84

0001152c <malloc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #36, 20	; 0x24000
   11534:	ldr	pc, [ip, #2940]!	; 0xb7c

00011538 <iconv_open@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #36, 20	; 0x24000
   11540:	ldr	pc, [ip, #2932]!	; 0xb74

00011544 <__libc_start_main@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #36, 20	; 0x24000
   1154c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011550 <__freading@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #36, 20	; 0x24000
   11558:	ldr	pc, [ip, #2916]!	; 0xb64

0001155c <__gmpz_init_set_si@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #36, 20	; 0x24000
   11564:	ldr	pc, [ip, #2908]!	; 0xb5c

00011568 <__gmpz_add_ui@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #36, 20	; 0x24000
   11570:	ldr	pc, [ip, #2900]!	; 0xb54

00011574 <__gmon_start__@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #36, 20	; 0x24000
   1157c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011580 <getopt_long@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #36, 20	; 0x24000
   11588:	ldr	pc, [ip, #2884]!	; 0xb44

0001158c <__ctype_b_loc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #36, 20	; 0x24000
   11594:	ldr	pc, [ip, #2876]!	; 0xb3c

00011598 <exit@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #36, 20	; 0x24000
   115a0:	ldr	pc, [ip, #2868]!	; 0xb34

000115a4 <iswspace@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #36, 20	; 0x24000
   115ac:	ldr	pc, [ip, #2860]!	; 0xb2c

000115b0 <strlen@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #36, 20	; 0x24000
   115b8:	ldr	pc, [ip, #2852]!	; 0xb24

000115bc <strchr@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #36, 20	; 0x24000
   115c4:	ldr	pc, [ip, #2844]!	; 0xb1c

000115c8 <__gmpz_divisible_ui_p@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #36, 20	; 0x24000
   115d0:	ldr	pc, [ip, #2836]!	; 0xb14

000115d4 <__gmpz_clear@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #36, 20	; 0x24000
   115dc:	ldr	pc, [ip, #2828]!	; 0xb0c

000115e0 <__errno_location@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #36, 20	; 0x24000
   115e8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ec <iswalnum@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #36, 20	; 0x24000
   115f4:	ldr	pc, [ip, #2812]!	; 0xafc

000115f8 <__sprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #36, 20	; 0x24000
   11600:	ldr	pc, [ip, #2804]!	; 0xaf4

00011604 <__cxa_atexit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #36, 20	; 0x24000
   1160c:	ldr	pc, [ip, #2796]!	; 0xaec

00011610 <memset@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #36, 20	; 0x24000
   11618:	ldr	pc, [ip, #2788]!	; 0xae4

0001161c <__gmpz_tdiv_q_2exp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #36, 20	; 0x24000
   11624:	ldr	pc, [ip, #2780]!	; 0xadc

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #36, 20	; 0x24000
   11630:	ldr	pc, [ip, #2772]!	; 0xad4

00011634 <write@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #36, 20	; 0x24000
   1163c:	ldr	pc, [ip, #2764]!	; 0xacc

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #36, 20	; 0x24000
   11648:	ldr	pc, [ip, #2756]!	; 0xac4

0001164c <__fprintf_chk@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #36, 20	; 0x24000
   11654:	ldr	pc, [ip, #2748]!	; 0xabc

00011658 <memchr@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #36, 20	; 0x24000
   11660:	ldr	pc, [ip, #2740]!	; 0xab4

00011664 <fclose@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #36, 20	; 0x24000
   1166c:	ldr	pc, [ip, #2732]!	; 0xaac

00011670 <strnlen@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #36, 20	; 0x24000
   11678:	ldr	pc, [ip, #2724]!	; 0xaa4

0001167c <fseeko64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #36, 20	; 0x24000
   11684:	ldr	pc, [ip, #2716]!	; 0xa9c

00011688 <__gmpz_mod@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #36, 20	; 0x24000
   11690:	ldr	pc, [ip, #2708]!	; 0xa94

00011694 <__gmpz_init_set_ui@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #36, 20	; 0x24000
   1169c:	ldr	pc, [ip, #2700]!	; 0xa8c

000116a0 <__gmpz_cmp@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #36, 20	; 0x24000
   116a8:	ldr	pc, [ip, #2692]!	; 0xa84

000116ac <__uflow@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #36, 20	; 0x24000
   116b4:	ldr	pc, [ip, #2684]!	; 0xa7c

000116b8 <__overflow@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #36, 20	; 0x24000
   116c0:	ldr	pc, [ip, #2676]!	; 0xa74

000116c4 <setlocale@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #36, 20	; 0x24000
   116cc:	ldr	pc, [ip, #2668]!	; 0xa6c

000116d0 <strrchr@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #36, 20	; 0x24000
   116d8:	ldr	pc, [ip, #2660]!	; 0xa64

000116dc <nl_langinfo@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #36, 20	; 0x24000
   116e4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116e8 <__gmpz_gcd@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #36, 20	; 0x24000
   116f0:	ldr	pc, [ip, #2644]!	; 0xa54

000116f4 <__gmpz_init_set_str@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #36, 20	; 0x24000
   116fc:	ldr	pc, [ip, #2636]!	; 0xa4c

00011700 <bindtextdomain@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #36, 20	; 0x24000
   11708:	ldr	pc, [ip, #2628]!	; 0xa44

0001170c <__gmpz_cmp_ui@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #36, 20	; 0x24000
   11714:	ldr	pc, [ip, #2620]!	; 0xa3c

00011718 <__gmpz_init@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #36, 20	; 0x24000
   11720:	ldr	pc, [ip, #2612]!	; 0xa34

00011724 <__gmpz_powm_ui@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #36, 20	; 0x24000
   1172c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011730 <isatty@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #36, 20	; 0x24000
   11738:	ldr	pc, [ip, #2596]!	; 0xa24

0001173c <strncmp@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #36, 20	; 0x24000
   11744:	ldr	pc, [ip, #2588]!	; 0xa1c

00011748 <abort@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #36, 20	; 0x24000
   11750:	ldr	pc, [ip, #2580]!	; 0xa14

00011754 <__assert_fail@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #36, 20	; 0x24000
   1175c:	ldr	pc, [ip, #2572]!	; 0xa0c

Disassembly of section .text:

00011760 <.text>:
   11760:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11764:	movw	r4, #25068	; 0x61ec
   11768:	movt	r4, #3
   1176c:	strd	r6, [sp, #8]
   11770:	mov	r6, r1
   11774:	strd	r8, [sp, #16]
   11778:	mov	r8, r0
   1177c:	str	lr, [sp, #24]
   11780:	sub	sp, sp, #28
   11784:	ldr	r0, [r1]
   11788:	bl	18e8c <__assert_fail@plt+0x7738>
   1178c:	movw	r1, #18620	; 0x48bc
   11790:	movt	r1, #2
   11794:	mov	r0, #6
   11798:	bl	116c4 <setlocale@plt>
   1179c:	movw	r1, #18916	; 0x49e4
   117a0:	movt	r1, #2
   117a4:	movw	r0, #18748	; 0x493c
   117a8:	movt	r0, #2
   117ac:	bl	11700 <bindtextdomain@plt>
   117b0:	movw	r0, #18748	; 0x493c
   117b4:	movt	r0, #2
   117b8:	bl	1149c <textdomain@plt>
   117bc:	ldr	r3, [r4]
   117c0:	cmp	r3, #0
   117c4:	beq	118b8 <__assert_fail@plt+0x164>
   117c8:	ldr	r9, [pc, #432]	; 11980 <__assert_fail@plt+0x22c>
   117cc:	movw	r0, #35904	; 0x8c40
   117d0:	movt	r0, #1
   117d4:	bl	214f8 <__assert_fail@plt+0xfda4>
   117d8:	movw	r5, #18620	; 0x48bc
   117dc:	movt	r5, #2
   117e0:	movw	r0, #9844	; 0x2674
   117e4:	movt	r0, #1
   117e8:	mov	r7, #0
   117ec:	bl	214f8 <__assert_fail@plt+0xfda4>
   117f0:	mov	r3, r9
   117f4:	mov	r2, r5
   117f8:	str	r7, [sp]
   117fc:	mov	r1, r6
   11800:	mov	r0, r8
   11804:	bl	11580 <getopt_long@plt>
   11808:	cmn	r0, #1
   1180c:	beq	118cc <__assert_fail@plt+0x178>
   11810:	cmn	r0, #2
   11814:	beq	11978 <__assert_fail@plt+0x224>
   11818:	cmp	r0, #256	; 0x100
   1181c:	bne	1182c <__assert_fail@plt+0xd8>
   11820:	mov	r3, #1
   11824:	strb	r3, [r4, #8]
   11828:	b	117f0 <__assert_fail@plt+0x9c>
   1182c:	cmn	r0, #3
   11830:	beq	1183c <__assert_fail@plt+0xe8>
   11834:	mov	r0, #1
   11838:	bl	188f4 <__assert_fail@plt+0x71a0>
   1183c:	movw	r2, #25060	; 0x61e4
   11840:	movt	r2, #3
   11844:	movw	r3, #24956	; 0x617c
   11848:	movt	r3, #3
   1184c:	ldr	r4, [r2]
   11850:	movw	r1, #18940	; 0x49fc
   11854:	movt	r1, #2
   11858:	movw	r0, #18960	; 0x4a10
   1185c:	movt	r0, #2
   11860:	ldr	r5, [r3]
   11864:	bl	19854 <__assert_fail@plt+0x8100>
   11868:	mov	r6, r0
   1186c:	movw	r1, #18980	; 0x4a24
   11870:	movt	r1, #2
   11874:	movw	r0, #18996	; 0x4a34
   11878:	movt	r0, #2
   1187c:	bl	19854 <__assert_fail@plt+0x8100>
   11880:	movw	r1, #19012	; 0x4a44
   11884:	movt	r1, #2
   11888:	mov	r3, r5
   1188c:	movw	r2, #18744	; 0x4938
   11890:	movt	r2, #2
   11894:	stm	sp, {r1, r6}
   11898:	movw	r1, #18352	; 0x47b0
   1189c:	movt	r1, #2
   118a0:	str	r0, [sp, #8]
   118a4:	mov	r0, r4
   118a8:	str	r7, [sp, #12]
   118ac:	bl	1e448 <__assert_fail@plt+0xccf4>
   118b0:	mov	r0, #0
   118b4:	bl	11598 <exit@plt>
   118b8:	mov	r0, #1024	; 0x400
   118bc:	bl	1e658 <__assert_fail@plt+0xcf04>
   118c0:	str	r0, [r4]
   118c4:	str	r0, [r4, #4]
   118c8:	b	117c8 <__assert_fail@plt+0x74>
   118cc:	movw	r3, #25040	; 0x61d0
   118d0:	movt	r3, #3
   118d4:	ldr	r5, [r3]
   118d8:	cmp	r5, r8
   118dc:	addlt	r5, r6, r5, lsl #2
   118e0:	movlt	r4, #1
   118e4:	addlt	r6, r6, r8, lsl #2
   118e8:	bge	11924 <__assert_fail@plt+0x1d0>
   118ec:	ldr	r0, [r5], #4
   118f0:	bl	1821c <__assert_fail@plt+0x6ac8>
   118f4:	cmp	r0, #0
   118f8:	moveq	r4, #0
   118fc:	cmp	r5, r6
   11900:	bne	118ec <__assert_fail@plt+0x198>
   11904:	eor	r0, r4, #1
   11908:	uxtb	r0, r0
   1190c:	add	sp, sp, #28
   11910:	ldrd	r4, [sp]
   11914:	ldrd	r6, [sp, #8]
   11918:	ldrd	r8, [sp, #16]
   1191c:	add	sp, sp, #24
   11920:	pop	{pc}		; (ldr pc, [sp], #4)
   11924:	add	r0, sp, #16
   11928:	movw	r6, #25056	; 0x61e0
   1192c:	movt	r6, #3
   11930:	movw	r5, #19024	; 0x4a50
   11934:	movt	r5, #2
   11938:	mov	r4, #1
   1193c:	bl	1d5dc <__assert_fail@plt+0xbe88>
   11940:	b	11950 <__assert_fail@plt+0x1fc>
   11944:	bl	1821c <__assert_fail@plt+0x6ac8>
   11948:	and	r4, r4, r0
   1194c:	uxtb	r4, r4
   11950:	add	r3, sp, #16
   11954:	mov	r2, #3
   11958:	ldr	r0, [r6]
   1195c:	mov	r1, r5
   11960:	bl	1d5ec <__assert_fail@plt+0xbe98>
   11964:	cmn	r0, #1
   11968:	ldr	r0, [sp, #20]
   1196c:	bne	11944 <__assert_fail@plt+0x1f0>
   11970:	bl	18d2c <__assert_fail@plt+0x75d8>
   11974:	b	11904 <__assert_fail@plt+0x1b0>
   11978:	mov	r0, #0
   1197c:	bl	188f4 <__assert_fail@plt+0x71a0>
   11980:	andeq	r1, r2, r0, ror fp
   11984:	mov	fp, #0
   11988:	mov	lr, #0
   1198c:	pop	{r1}		; (ldr r1, [sp], #4)
   11990:	mov	r2, sp
   11994:	push	{r2}		; (str r2, [sp, #-4]!)
   11998:	push	{r0}		; (str r0, [sp, #-4]!)
   1199c:	ldr	ip, [pc, #16]	; 119b4 <__assert_fail@plt+0x260>
   119a0:	push	{ip}		; (str ip, [sp, #-4]!)
   119a4:	ldr	r0, [pc, #12]	; 119b8 <__assert_fail@plt+0x264>
   119a8:	ldr	r3, [pc, #12]	; 119bc <__assert_fail@plt+0x268>
   119ac:	bl	11544 <__libc_start_main@plt>
   119b0:	bl	11748 <abort@plt>
   119b4:	strdeq	r1, [r2], -r4
   119b8:	andeq	r1, r1, r0, ror #14
   119bc:	muleq	r2, r4, r4
   119c0:	ldr	r3, [pc, #20]	; 119dc <__assert_fail@plt+0x288>
   119c4:	ldr	r2, [pc, #20]	; 119e0 <__assert_fail@plt+0x28c>
   119c8:	add	r3, pc, r3
   119cc:	ldr	r2, [r3, r2]
   119d0:	cmp	r2, #0
   119d4:	bxeq	lr
   119d8:	b	11574 <__gmon_start__@plt>
   119dc:	andeq	r4, r2, r0, lsr r6
   119e0:	andeq	r0, r0, ip, ror #2
   119e4:	ldr	r0, [pc, #24]	; 11a04 <__assert_fail@plt+0x2b0>
   119e8:	ldr	r3, [pc, #24]	; 11a08 <__assert_fail@plt+0x2b4>
   119ec:	cmp	r3, r0
   119f0:	bxeq	lr
   119f4:	ldr	r3, [pc, #16]	; 11a0c <__assert_fail@plt+0x2b8>
   119f8:	cmp	r3, #0
   119fc:	bxeq	lr
   11a00:	bx	r3
   11a04:	andeq	r6, r3, r4, asr #3
   11a08:	andeq	r6, r3, r4, asr #3
   11a0c:	andeq	r0, r0, r0
   11a10:	ldr	r0, [pc, #36]	; 11a3c <__assert_fail@plt+0x2e8>
   11a14:	ldr	r1, [pc, #36]	; 11a40 <__assert_fail@plt+0x2ec>
   11a18:	sub	r1, r1, r0
   11a1c:	asr	r1, r1, #2
   11a20:	add	r1, r1, r1, lsr #31
   11a24:	asrs	r1, r1, #1
   11a28:	bxeq	lr
   11a2c:	ldr	r3, [pc, #16]	; 11a44 <__assert_fail@plt+0x2f0>
   11a30:	cmp	r3, #0
   11a34:	bxeq	lr
   11a38:	bx	r3
   11a3c:	andeq	r6, r3, r4, asr #3
   11a40:	andeq	r6, r3, r4, asr #3
   11a44:	andeq	r0, r0, r0
   11a48:	push	{r4, lr}
   11a4c:	ldr	r4, [pc, #24]	; 11a6c <__assert_fail@plt+0x318>
   11a50:	ldrb	r3, [r4]
   11a54:	cmp	r3, #0
   11a58:	popne	{r4, pc}
   11a5c:	bl	119e4 <__assert_fail@plt+0x290>
   11a60:	mov	r3, #1
   11a64:	strb	r3, [r4]
   11a68:	pop	{r4, pc}
   11a6c:	andeq	r6, r3, r8, ror #3
   11a70:	b	11a10 <__assert_fail@plt+0x2bc>
   11a74:	andeq	r0, r0, r0
   11a78:	ldrb	r1, [r0, #250]	; 0xfa
   11a7c:	add	ip, r0, #224	; 0xe0
   11a80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a84:	strd	r6, [sp, #8]
   11a88:	mov	r6, r2
   11a8c:	mov	r7, r3
   11a90:	strd	r8, [sp, #16]
   11a94:	add	r2, r0, #16
   11a98:	strd	sl, [sp, #24]
   11a9c:	subs	r9, r1, #1
   11aa0:	str	lr, [sp, #32]
   11aa4:	bcc	11b8c <__assert_fail@plt+0x438>
   11aa8:	lsl	r3, r9, #3
   11aac:	ldrd	r4, [r2, r3]
   11ab0:	cmp	r7, r5
   11ab4:	cmpeq	r6, r4
   11ab8:	bcs	11b68 <__assert_fail@plt+0x414>
   11abc:	add	lr, r1, #1
   11ac0:	mov	sl, r9
   11ac4:	add	fp, r0, lr, lsl #3
   11ac8:	b	11ae0 <__assert_fail@plt+0x38c>
   11acc:	ldrd	r4, [fp, #-8]!
   11ad0:	cmp	r5, r7
   11ad4:	cmpeq	r4, r6
   11ad8:	bls	11b50 <__assert_fail@plt+0x3fc>
   11adc:	mov	sl, r3
   11ae0:	sub	r3, sl, #1
   11ae4:	cmn	r3, #1
   11ae8:	mov	r8, r3
   11aec:	bne	11acc <__assert_fail@plt+0x378>
   11af0:	add	sl, r1, #2
   11af4:	add	r1, r1, #224	; 0xe0
   11af8:	add	sl, r0, sl, lsl #3
   11afc:	add	r1, r0, r1
   11b00:	ldrd	r4, [sl, #-8]!
   11b04:	mov	r8, r1
   11b08:	sub	r9, r1, #226	; 0xe2
   11b0c:	sub	r9, r9, r0
   11b10:	cmp	r9, r3
   11b14:	strd	r4, [sl, #8]
   11b18:	ldrb	r1, [r1, #-1]
   11b1c:	strb	r1, [r8], #-1
   11b20:	mov	r1, r8
   11b24:	bgt	11b00 <__assert_fail@plt+0x3ac>
   11b28:	ldr	r3, [sp, #36]	; 0x24
   11b2c:	strd	r6, [r2]
   11b30:	strb	r3, [ip]
   11b34:	strb	lr, [r0, #250]	; 0xfa
   11b38:	ldrd	r4, [sp]
   11b3c:	ldrd	r6, [sp, #8]
   11b40:	ldrd	r8, [sp, #16]
   11b44:	ldrd	sl, [sp, #24]
   11b48:	add	sp, sp, #32
   11b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b50:	beq	11b70 <__assert_fail@plt+0x41c>
   11b54:	cmp	r9, r3
   11b58:	add	r2, r2, sl, lsl #3
   11b5c:	add	ip, ip, sl
   11b60:	bgt	11af0 <__assert_fail@plt+0x39c>
   11b64:	b	11b28 <__assert_fail@plt+0x3d4>
   11b68:	mov	r8, r9
   11b6c:	bne	11b84 <__assert_fail@plt+0x430>
   11b70:	ldrb	r3, [ip, r8]
   11b74:	ldr	r2, [sp, #36]	; 0x24
   11b78:	add	r3, r3, r2
   11b7c:	strb	r3, [ip, r8]
   11b80:	b	11b38 <__assert_fail@plt+0x3e4>
   11b84:	add	r2, r2, r1, lsl #3
   11b88:	add	ip, ip, r1
   11b8c:	add	lr, r1, #1
   11b90:	b	11b28 <__assert_fail@plt+0x3d4>
   11b94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b98:	strd	r6, [sp, #8]
   11b9c:	strd	r8, [sp, #16]
   11ba0:	strd	sl, [sp, #24]
   11ba4:	str	lr, [sp, #32]
   11ba8:	sub	sp, sp, #228	; 0xe4
   11bac:	add	r1, sp, #304	; 0x130
   11bb0:	ldr	ip, [sp, #264]	; 0x108
   11bb4:	strd	r2, [sp, #120]	; 0x78
   11bb8:	ldrd	r4, [r1]
   11bbc:	str	r0, [sp, #204]	; 0xcc
   11bc0:	ldr	lr, [sp, #268]	; 0x10c
   11bc4:	rsbs	r4, r4, #0
   11bc8:	rsc	r5, r5, #0
   11bcc:	cmp	r2, #0
   11bd0:	sbcs	r3, r3, #0
   11bd4:	ldr	r3, [sp, #280]	; 0x118
   11bd8:	strd	r4, [sp, #112]	; 0x70
   11bdc:	str	r3, [sp, #132]	; 0x84
   11be0:	ldr	r3, [sp, #284]	; 0x11c
   11be4:	str	r3, [sp, #16]
   11be8:	blt	12434 <__assert_fail@plt+0xce0>
   11bec:	add	r3, sp, #272	; 0x110
   11bf0:	ldrd	r2, [r3]
   11bf4:	cmp	r2, #0
   11bf8:	sbcs	r3, r3, #0
   11bfc:	blt	12414 <__assert_fail@plt+0xcc0>
   11c00:	add	r3, sp, #288	; 0x120
   11c04:	ldrd	r2, [r3]
   11c08:	cmp	r2, #0
   11c0c:	sbcs	r3, r3, #0
   11c10:	blt	123f4 <__assert_fail@plt+0xca0>
   11c14:	ldr	r3, [sp, #132]	; 0x84
   11c18:	mov	r8, #0
   11c1c:	umull	r4, r5, lr, r3
   11c20:	umull	r0, r1, ip, r3
   11c24:	ldr	r3, [sp, #16]
   11c28:	mov	r6, r4
   11c2c:	mov	r7, r5
   11c30:	umlal	r6, r7, ip, r3
   11c34:	umull	r2, r3, lr, r3
   11c38:	adds	sl, r1, r6
   11c3c:	adc	fp, r8, r7
   11c40:	strd	r2, [sp, #8]
   11c44:	cmp	r5, fp
   11c48:	cmpeq	r4, sl
   11c4c:	bls	11c64 <__assert_fail@plt+0x510>
   11c50:	adds	r3, r2, r8
   11c54:	str	r3, [sp, #8]
   11c58:	ldr	r3, [sp, #12]
   11c5c:	adc	r3, r3, #1
   11c60:	str	r3, [sp, #12]
   11c64:	ldr	r1, [sp, #8]
   11c68:	mov	r6, fp
   11c6c:	ldr	r3, [sp, #272]	; 0x110
   11c70:	ldr	r2, [sp, #272]	; 0x110
   11c74:	adds	r1, r6, r1
   11c78:	str	r1, [sp, #136]	; 0x88
   11c7c:	umull	r4, r5, lr, r3
   11c80:	mov	r3, #0
   11c84:	ldr	r1, [sp, #276]	; 0x114
   11c88:	umull	r8, r9, ip, r2
   11c8c:	mov	r2, r0
   11c90:	str	r3, [sp, #208]	; 0xd0
   11c94:	umull	r6, r7, lr, r1
   11c98:	strd	r6, [sp, #32]
   11c9c:	mov	r6, r4
   11ca0:	mov	r7, r5
   11ca4:	umlal	r6, r7, ip, r1
   11ca8:	ldr	r1, [sp, #12]
   11cac:	adc	r1, r3, r1
   11cb0:	adds	r2, r3, r2
   11cb4:	adc	fp, sl, r3
   11cb8:	str	r1, [sp, #140]	; 0x8c
   11cbc:	str	r2, [sp, #200]	; 0xc8
   11cc0:	adds	r2, r9, r6
   11cc4:	str	r2, [sp, #24]
   11cc8:	adc	r2, r3, r7
   11ccc:	str	r2, [sp, #28]
   11cd0:	ldrd	r0, [sp, #24]
   11cd4:	cmp	r5, r1
   11cd8:	cmpeq	r4, r0
   11cdc:	bls	11cf8 <__assert_fail@plt+0x5a4>
   11ce0:	ldr	r3, [sp, #32]
   11ce4:	adds	r3, r3, #0
   11ce8:	str	r3, [sp, #32]
   11cec:	ldr	r3, [sp, #36]	; 0x24
   11cf0:	adc	r3, r3, #1
   11cf4:	str	r3, [sp, #36]	; 0x24
   11cf8:	mov	lr, #0
   11cfc:	ldrd	r6, [sp, #112]	; 0x70
   11d00:	adds	r3, lr, r8
   11d04:	mov	r4, lr
   11d08:	ldr	r9, [sp, #200]	; 0xc8
   11d0c:	mov	sl, lr
   11d10:	str	r3, [sp, #144]	; 0x90
   11d14:	ldrd	r2, [sp, #24]
   11d18:	mul	ip, r6, fp
   11d1c:	umull	r0, r1, r6, r9
   11d20:	mla	ip, r9, r7, ip
   11d24:	str	r3, [sp, #212]	; 0xd4
   11d28:	adc	lr, r2, r4
   11d2c:	ldr	r3, [sp, #296]	; 0x128
   11d30:	add	ip, ip, r1
   11d34:	str	lr, [sp, #148]	; 0x94
   11d38:	mov	lr, r4
   11d3c:	umull	r6, r7, ip, r3
   11d40:	umull	r8, r9, r0, r3
   11d44:	ldr	r3, [sp, #300]	; 0x12c
   11d48:	mov	r8, r0
   11d4c:	mov	r4, r6
   11d50:	mov	r5, r7
   11d54:	umlal	r4, r5, r0, r3
   11d58:	adds	r3, r9, r4
   11d5c:	str	r3, [sp, #40]	; 0x28
   11d60:	adc	r3, sl, r5
   11d64:	str	r3, [sp, #44]	; 0x2c
   11d68:	ldrd	r0, [sp, #40]	; 0x28
   11d6c:	ldr	r3, [sp, #300]	; 0x12c
   11d70:	cmp	r7, r1
   11d74:	cmpeq	r6, r0
   11d78:	mov	r6, sl
   11d7c:	umull	r2, r3, ip, r3
   11d80:	strd	r2, [sp, #24]
   11d84:	bls	11d9c <__assert_fail@plt+0x648>
   11d88:	adds	r3, r2, sl
   11d8c:	str	r3, [sp, #24]
   11d90:	ldr	r3, [sp, #28]
   11d94:	adc	r3, r3, #1
   11d98:	str	r3, [sp, #28]
   11d9c:	ldr	r7, [sp, #44]	; 0x2c
   11da0:	mov	r9, #0
   11da4:	ldr	r3, [sp, #288]	; 0x120
   11da8:	umull	r0, r1, ip, r3
   11dac:	ldr	r3, [sp, #292]	; 0x124
   11db0:	umull	r2, r3, r3, r8
   11db4:	strd	r2, [sp, #8]
   11db8:	ldr	r2, [sp, #12]
   11dbc:	ldr	r3, [sp, #288]	; 0x120
   11dc0:	umull	r4, r5, r8, r3
   11dc4:	mla	r1, lr, r3, r1
   11dc8:	ldr	r3, [sp, #292]	; 0x124
   11dcc:	strd	r4, [sp, #40]	; 0x28
   11dd0:	mla	r3, r6, r3, r2
   11dd4:	str	r3, [sp, #12]
   11dd8:	ldr	r3, [sp, #288]	; 0x120
   11ddc:	mla	r6, r6, r3, r5
   11de0:	ldrd	r2, [sp, #8]
   11de4:	adds	r4, r2, r0
   11de8:	adc	r5, r3, r1
   11dec:	adds	r3, r6, r4
   11df0:	str	r3, [sp, #48]	; 0x30
   11df4:	ldr	r3, [sp, #292]	; 0x124
   11df8:	umull	r2, r3, ip, r3
   11dfc:	strd	r2, [sp, #8]
   11e00:	adc	r3, r9, r5
   11e04:	ldr	r2, [sp, #12]
   11e08:	str	r3, [sp, #52]	; 0x34
   11e0c:	ldrd	r4, [sp, #48]	; 0x30
   11e10:	ldr	r3, [sp, #292]	; 0x124
   11e14:	cmp	r1, r5
   11e18:	cmpeq	r0, r4
   11e1c:	mla	r3, lr, r3, r2
   11e20:	str	r3, [sp, #12]
   11e24:	bls	11e40 <__assert_fail@plt+0x6ec>
   11e28:	ldr	r3, [sp, #8]
   11e2c:	adds	r3, r3, r9
   11e30:	str	r3, [sp, #8]
   11e34:	ldr	r3, [sp, #12]
   11e38:	adc	r3, r3, #1
   11e3c:	str	r3, [sp, #12]
   11e40:	ldr	r8, [sp, #40]	; 0x28
   11e44:	mov	ip, #0
   11e48:	mov	lr, ip
   11e4c:	ldrd	r4, [sp, #48]	; 0x30
   11e50:	str	ip, [sp, #216]	; 0xd8
   11e54:	ldrd	r0, [sp, #144]	; 0x90
   11e58:	adds	r3, ip, r8
   11e5c:	ldr	r8, [sp, #16]
   11e60:	str	r3, [sp, #152]	; 0x98
   11e64:	adc	r3, r4, ip
   11e68:	str	r3, [sp, #156]	; 0x9c
   11e6c:	ldr	r3, [sp, #200]	; 0xc8
   11e70:	str	r5, [sp, #200]	; 0xc8
   11e74:	orrs	r3, r3, fp
   11e78:	ldrd	sl, [sp, #120]	; 0x78
   11e7c:	movne	r2, #1
   11e80:	moveq	r2, ip
   11e84:	adds	r0, r0, r2
   11e88:	ldrd	r2, [sp, #24]
   11e8c:	adc	r1, r1, #0
   11e90:	adds	r7, r7, r0
   11e94:	adc	r9, r9, r1
   11e98:	adds	r4, r7, r2
   11e9c:	adc	r3, r9, r3
   11ea0:	str	r4, [sp, #160]	; 0xa0
   11ea4:	str	r3, [sp, #164]	; 0xa4
   11ea8:	ldrd	r4, [sp, #136]	; 0x88
   11eac:	ldrd	r2, [sp, #160]	; 0xa0
   11eb0:	cmp	r1, r3
   11eb4:	cmpeq	r0, r2
   11eb8:	movhi	r1, #1
   11ebc:	movls	r1, ip
   11ec0:	adds	r0, r4, r2
   11ec4:	str	r1, [sp, #144]	; 0x90
   11ec8:	adcs	r1, r5, r3
   11ecc:	ldrd	r4, [sp, #152]	; 0x98
   11ed0:	movcs	lr, #1
   11ed4:	str	lr, [sp, #152]	; 0x98
   11ed8:	mov	lr, #0
   11edc:	mov	r9, lr
   11ee0:	str	lr, [sp, #220]	; 0xdc
   11ee4:	adds	r2, r4, r0
   11ee8:	adcs	r3, r5, r1
   11eec:	strd	r2, [sp, #136]	; 0x88
   11ef0:	mov	r2, #0
   11ef4:	ldr	r3, [sp, #132]	; 0x84
   11ef8:	mov	r1, r2
   11efc:	movcs	r1, #1
   11f00:	str	r1, [sp, #132]	; 0x84
   11f04:	str	r2, [sp, #160]	; 0xa0
   11f08:	umull	r4, r5, fp, r3
   11f0c:	umull	r0, r1, r3, sl
   11f10:	mov	r2, r4
   11f14:	mov	r3, r5
   11f18:	umlal	r2, r3, sl, r8
   11f1c:	mov	r6, r2
   11f20:	mov	r7, r3
   11f24:	ldr	r3, [sp, #16]
   11f28:	adds	lr, r1, r6
   11f2c:	str	lr, [sp, #56]	; 0x38
   11f30:	adc	lr, r9, r7
   11f34:	str	lr, [sp, #60]	; 0x3c
   11f38:	umull	r2, r3, r3, fp
   11f3c:	ldrd	r6, [sp, #56]	; 0x38
   11f40:	strd	r2, [sp, #40]	; 0x28
   11f44:	cmp	r5, r7
   11f48:	cmpeq	r4, r6
   11f4c:	bls	11f64 <__assert_fail@plt+0x810>
   11f50:	adds	r3, r2, r9
   11f54:	str	r3, [sp, #40]	; 0x28
   11f58:	ldr	r3, [sp, #44]	; 0x2c
   11f5c:	adc	r3, r3, #1
   11f60:	str	r3, [sp, #44]	; 0x2c
   11f64:	ldrd	r6, [sp, #120]	; 0x78
   11f68:	mov	r9, #0
   11f6c:	ldr	r2, [sp, #272]	; 0x110
   11f70:	mov	fp, r7
   11f74:	umull	r2, r3, r7, r2
   11f78:	strd	r2, [sp, #16]
   11f7c:	ldr	r3, [sp, #276]	; 0x114
   11f80:	umull	r2, r3, r3, r6
   11f84:	mov	r5, r3
   11f88:	mov	r4, r2
   11f8c:	ldrd	r2, [sp, #56]	; 0x38
   11f90:	strd	r4, [sp, #120]	; 0x78
   11f94:	mov	r8, r3
   11f98:	ldr	r3, [sp, #272]	; 0x110
   11f9c:	mov	r1, r2
   11fa0:	umull	r2, r3, r3, r6
   11fa4:	strd	r2, [sp, #48]	; 0x30
   11fa8:	ldr	r3, [sp, #20]
   11fac:	ldr	r2, [sp, #208]	; 0xd0
   11fb0:	mla	r3, r2, r7, r3
   11fb4:	ldr	r7, [sp, #16]
   11fb8:	str	r3, [sp, #20]
   11fbc:	mla	r3, r9, r6, r5
   11fc0:	str	r3, [sp, #124]	; 0x7c
   11fc4:	adds	r3, r9, r0
   11fc8:	mov	r0, r2
   11fcc:	ldr	r2, [sp, #52]	; 0x34
   11fd0:	str	r3, [sp, #168]	; 0xa8
   11fd4:	adc	r3, r1, r9
   11fd8:	ldrd	r4, [sp, #120]	; 0x78
   11fdc:	str	r3, [sp, #172]	; 0xac
   11fe0:	ldr	r3, [sp, #276]	; 0x114
   11fe4:	mla	r0, r0, r6, r2
   11fe8:	mov	r6, r4
   11fec:	ldr	r4, [sp, #20]
   11ff0:	adds	r6, r6, r7
   11ff4:	umull	r2, r3, r3, fp
   11ff8:	strd	r2, [sp, #24]
   11ffc:	mla	r3, r9, fp, r3
   12000:	adc	r7, r5, r4
   12004:	adds	r6, r0, r6
   12008:	ldrd	r0, [sp, #16]
   1200c:	str	r3, [sp, #28]
   12010:	adc	r3, r9, r7
   12014:	str	r6, [sp, #64]	; 0x40
   12018:	str	r3, [sp, #68]	; 0x44
   1201c:	ldrd	r2, [sp, #64]	; 0x40
   12020:	cmp	r1, r3
   12024:	cmpeq	r0, r2
   12028:	bls	12044 <__assert_fail@plt+0x8f0>
   1202c:	ldr	r3, [sp, #24]
   12030:	adds	r3, r3, r9
   12034:	str	r3, [sp, #24]
   12038:	ldr	r3, [sp, #28]
   1203c:	adc	r3, r3, #1
   12040:	str	r3, [sp, #28]
   12044:	mov	r0, #0
   12048:	ldrd	r6, [sp, #32]
   1204c:	mov	r4, r0
   12050:	ldr	r5, [sp, #48]	; 0x30
   12054:	adds	r3, r0, r5
   12058:	str	r3, [sp, #72]	; 0x48
   1205c:	ldrd	r2, [sp, #64]	; 0x40
   12060:	adc	r1, r2, r0
   12064:	str	r3, [sp, #48]	; 0x30
   12068:	str	r1, [sp, #76]	; 0x4c
   1206c:	ldrd	r2, [sp, #72]	; 0x48
   12070:	ldr	r1, [sp, #212]	; 0xd4
   12074:	adds	r1, r1, r2
   12078:	ldr	r2, [sp, #200]	; 0xc8
   1207c:	adc	r3, r3, r0
   12080:	adds	r1, r1, r2
   12084:	ldr	r2, [sp, #144]	; 0x90
   12088:	adc	r3, r3, ip
   1208c:	adds	r1, r1, r6
   12090:	adc	r3, r3, r7
   12094:	ldrd	r6, [sp, #168]	; 0xa8
   12098:	adds	r1, r1, r2
   1209c:	ldr	r2, [sp, #216]	; 0xd8
   120a0:	adc	r3, r3, r2
   120a4:	ldr	r2, [sp, #152]	; 0x98
   120a8:	adds	r1, r1, r2
   120ac:	ldr	r2, [sp, #160]	; 0xa0
   120b0:	adc	r3, r3, r2
   120b4:	ldr	r2, [sp, #132]	; 0x84
   120b8:	adds	r5, r1, r2
   120bc:	ldr	r2, [sp, #220]	; 0xdc
   120c0:	adc	lr, r3, r2
   120c4:	ldrd	r2, [sp, #136]	; 0x88
   120c8:	adds	sl, r2, r6
   120cc:	adcs	fp, r3, r7
   120d0:	ldrd	r2, [sp, #112]	; 0x70
   120d4:	movcs	r4, #1
   120d8:	adds	r6, r8, r4
   120dc:	strd	sl, [sp, #16]
   120e0:	adc	r7, r9, #0
   120e4:	ldr	r4, [sp, #16]
   120e8:	ldr	ip, [sp, #20]
   120ec:	ldrd	r8, [sp, #40]	; 0x28
   120f0:	umull	sl, fp, r2, r4
   120f4:	mul	r1, r2, ip
   120f8:	adds	ip, r6, r8
   120fc:	mov	r8, sl
   12100:	mla	r1, r4, r3, r1
   12104:	str	ip, [sp, #176]	; 0xb0
   12108:	adc	ip, r7, r9
   1210c:	ldrd	r6, [sp, #8]
   12110:	str	ip, [sp, #180]	; 0xb4
   12114:	add	r1, r1, fp
   12118:	adds	ip, r6, r5
   1211c:	adc	r3, r7, lr
   12120:	str	ip, [sp, #80]	; 0x50
   12124:	mov	ip, #0
   12128:	mov	lr, ip
   1212c:	str	r3, [sp, #84]	; 0x54
   12130:	ldrd	r2, [sp, #72]	; 0x48
   12134:	str	ip, [sp, #56]	; 0x38
   12138:	ldrd	r4, [sp, #80]	; 0x50
   1213c:	cmp	r3, r5
   12140:	cmpeq	r2, r4
   12144:	movls	r3, ip
   12148:	movhi	r3, #1
   1214c:	mov	ip, sl
   12150:	str	r3, [sp, #40]	; 0x28
   12154:	ldr	r3, [sp, #296]	; 0x128
   12158:	umull	r4, r5, r1, r3
   1215c:	ldr	r3, [sp, #300]	; 0x12c
   12160:	mla	r5, lr, r1, r5
   12164:	umull	r6, r7, r3, r8
   12168:	ldr	r3, [sp, #296]	; 0x128
   1216c:	mla	r7, lr, sl, r7
   12170:	adds	r2, r6, r4
   12174:	umull	r8, r9, r3, sl
   12178:	adc	r6, r7, r5
   1217c:	mla	r8, lr, sl, r9
   12180:	adds	r2, r8, r2
   12184:	str	r2, [sp, #88]	; 0x58
   12188:	adc	r2, lr, r6
   1218c:	str	r2, [sp, #92]	; 0x5c
   12190:	ldr	r2, [sp, #300]	; 0x12c
   12194:	umull	r8, r9, r2, r1
   12198:	ldrd	r2, [sp, #88]	; 0x58
   1219c:	mla	r9, lr, r1, r9
   121a0:	cmp	r5, r3
   121a4:	cmpeq	r4, r2
   121a8:	bls	121b4 <__assert_fail@plt+0xa60>
   121ac:	adds	r8, r8, lr
   121b0:	adc	r9, r9, #1
   121b4:	mov	r5, #0
   121b8:	ldr	lr, [sp, #92]	; 0x5c
   121bc:	ldr	r4, [sp, #292]	; 0x124
   121c0:	ldr	r3, [sp, #288]	; 0x120
   121c4:	umull	r6, r7, r4, ip
   121c8:	ldr	r4, [sp, #288]	; 0x120
   121cc:	umull	r2, r3, r1, r3
   121d0:	mla	r7, ip, r5, r7
   121d4:	umull	sl, fp, r4, ip
   121d8:	adds	r4, r6, r2
   121dc:	ldr	r6, [sp, #292]	; 0x124
   121e0:	mla	r3, r1, r5, r3
   121e4:	mla	ip, ip, r5, fp
   121e8:	strd	sl, [sp, #32]
   121ec:	adc	sl, r7, r3
   121f0:	umull	r6, r7, r6, r1
   121f4:	adds	ip, ip, r4
   121f8:	strd	r6, [sp, #8]
   121fc:	str	ip, [sp, #96]	; 0x60
   12200:	adc	ip, r5, sl
   12204:	str	ip, [sp, #100]	; 0x64
   12208:	ldrd	r4, [sp, #96]	; 0x60
   1220c:	cmp	r3, r5
   12210:	mov	r3, #0
   12214:	cmpeq	r2, r4
   12218:	mla	r3, r1, r3, r7
   1221c:	str	r3, [sp, #12]
   12220:	bls	1223c <__assert_fail@plt+0xae8>
   12224:	ldr	r3, [sp, #8]
   12228:	adds	r3, r3, #0
   1222c:	str	r3, [sp, #8]
   12230:	ldr	r3, [sp, #12]
   12234:	adc	r3, r3, #1
   12238:	str	r3, [sp, #12]
   1223c:	ldr	r6, [sp, #32]
   12240:	mov	r3, #0
   12244:	ldr	r1, [sp, #48]	; 0x30
   12248:	ldrd	r4, [sp, #96]	; 0x60
   1224c:	adds	r2, r5, r1
   12250:	adc	r0, r3, r0
   12254:	adds	ip, r3, r6
   12258:	ldrd	r6, [sp, #176]	; 0xb0
   1225c:	adc	r1, r4, r3
   12260:	str	ip, [sp, #184]	; 0xb8
   12264:	str	r1, [sp, #188]	; 0xbc
   12268:	ldr	ip, [sp, #16]
   1226c:	ldr	r1, [sp, #20]
   12270:	ldrd	r4, [sp, #80]	; 0x50
   12274:	orrs	r1, r1, ip
   12278:	moveq	r1, r3
   1227c:	movne	r1, #1
   12280:	adds	r4, r4, r1
   12284:	adc	r5, r5, #0
   12288:	adds	lr, lr, r4
   1228c:	adc	sl, r5, r3
   12290:	adds	r1, lr, r8
   12294:	str	r1, [sp, #104]	; 0x68
   12298:	adc	r1, sl, r9
   1229c:	str	r1, [sp, #108]	; 0x6c
   122a0:	ldr	r1, [sp, #40]	; 0x28
   122a4:	ldrd	sl, [sp, #104]	; 0x68
   122a8:	adds	r8, r6, sl
   122ac:	adcs	r9, r7, fp
   122b0:	ldrd	sl, [sp, #184]	; 0xb8
   122b4:	movcs	r3, #1
   122b8:	adds	r6, sl, r8
   122bc:	adcs	r7, fp, r9
   122c0:	ldrd	r8, [sp, #24]
   122c4:	movcs	ip, #1
   122c8:	movcc	ip, #0
   122cc:	adds	r2, r1, r2
   122d0:	ldr	r1, [sp, #56]	; 0x38
   122d4:	adc	r0, r1, r0
   122d8:	adds	r2, r2, r8
   122dc:	str	r2, [sp, #192]	; 0xc0
   122e0:	adc	r2, r0, r9
   122e4:	ldrd	r0, [sp, #104]	; 0x68
   122e8:	str	r2, [sp, #196]	; 0xc4
   122ec:	cmp	r5, r1
   122f0:	mov	r1, r7
   122f4:	cmpeq	r4, r0
   122f8:	ldrd	r4, [sp, #192]	; 0xc0
   122fc:	mov	r0, r6
   12300:	movhi	r2, #1
   12304:	movls	r2, #0
   12308:	adds	r4, r4, r2
   1230c:	adc	r5, r5, #0
   12310:	adds	r4, r4, r3
   12314:	ldrd	r2, [sp, #8]
   12318:	adc	r5, r5, #0
   1231c:	adds	r8, r4, ip
   12320:	adc	r9, r5, #0
   12324:	adds	ip, r8, r2
   12328:	adc	r3, r9, r3
   1232c:	str	ip, [sp]
   12330:	str	r3, [sp, #4]
   12334:	add	r3, sp, #288	; 0x120
   12338:	ldrd	r2, [r3]
   1233c:	ldrd	r4, [sp]
   12340:	cmp	r3, r5
   12344:	cmpeq	r2, r4
   12348:	bcs	123c8 <__assert_fail@plt+0xc74>
   1234c:	add	r3, sp, #296	; 0x128
   12350:	ldr	ip, [sp, #288]	; 0x120
   12354:	ldrd	r2, [r3]
   12358:	ldr	r1, [sp, #296]	; 0x128
   1235c:	cmp	r3, r7
   12360:	cmpeq	r2, r6
   12364:	mov	r2, #0
   12368:	movls	r3, r2
   1236c:	movhi	r3, #1
   12370:	subs	r0, r6, r1
   12374:	ldr	r1, [sp, #300]	; 0x12c
   12378:	sbc	r1, r7, r1
   1237c:	adds	r3, ip, r3
   12380:	ldr	ip, [sp, #292]	; 0x124
   12384:	adc	r2, ip, r2
   12388:	ldr	ip, [sp]
   1238c:	subs	r3, ip, r3
   12390:	str	r3, [sp]
   12394:	ldr	r3, [sp, #4]
   12398:	sbc	r3, r3, r2
   1239c:	str	r3, [sp, #4]
   123a0:	ldrd	r2, [sp]
   123a4:	ldr	ip, [sp, #204]	; 0xcc
   123a8:	strd	r2, [ip]
   123ac:	add	sp, sp, #228	; 0xe4
   123b0:	ldrd	r4, [sp]
   123b4:	ldrd	r6, [sp, #8]
   123b8:	ldrd	r8, [sp, #16]
   123bc:	ldrd	sl, [sp, #24]
   123c0:	add	sp, sp, #32
   123c4:	pop	{pc}		; (ldr pc, [sp], #4)
   123c8:	add	r2, sp, #296	; 0x128
   123cc:	moveq	r3, #1
   123d0:	ldrd	r4, [r2]
   123d4:	movne	r3, #0
   123d8:	cmp	r5, r7
   123dc:	cmpeq	r4, r6
   123e0:	movhi	r3, #0
   123e4:	andls	r3, r3, #1
   123e8:	cmp	r3, #0
   123ec:	beq	123a0 <__assert_fail@plt+0xc4c>
   123f0:	b	1234c <__assert_fail@plt+0xbf8>
   123f4:	movw	r3, #5408	; 0x1520
   123f8:	movt	r3, #2
   123fc:	movw	r1, #17888	; 0x45e0
   12400:	movt	r1, #2
   12404:	movw	r0, #17968	; 0x4630
   12408:	movt	r0, #2
   1240c:	movw	r2, #995	; 0x3e3
   12410:	bl	11754 <__assert_fail@plt>
   12414:	movw	r3, #5408	; 0x1520
   12418:	movt	r3, #2
   1241c:	movw	r1, #17888	; 0x45e0
   12420:	movt	r1, #2
   12424:	movw	r0, #17936	; 0x4610
   12428:	movt	r0, #2
   1242c:	movw	r2, #994	; 0x3e2
   12430:	bl	11754 <__assert_fail@plt>
   12434:	movw	r3, #5408	; 0x1520
   12438:	movt	r3, #2
   1243c:	movw	r1, #17888	; 0x45e0
   12440:	movt	r1, #2
   12444:	movw	r0, #17904	; 0x45f0
   12448:	movt	r0, #2
   1244c:	movw	r2, #993	; 0x3e1
   12450:	bl	11754 <__assert_fail@plt>
   12454:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12458:	ldr	r5, [r0]
   1245c:	ldr	r3, [r0, #4]
   12460:	strd	r6, [sp, #8]
   12464:	mov	r7, r1
   12468:	strd	r8, [sp, #16]
   1246c:	mov	r9, r0
   12470:	ldr	r8, [r0, #8]
   12474:	strd	sl, [sp, #24]
   12478:	str	lr, [sp, #32]
   1247c:	sub	sp, sp, #20
   12480:	str	r3, [sp, #4]
   12484:	subs	r6, r8, #1
   12488:	bmi	125f0 <__assert_fail@plt+0xe9c>
   1248c:	add	r4, r8, r8, lsl #1
   12490:	mov	fp, r6
   12494:	lsl	r4, r4, #2
   12498:	sub	sl, r4, #12
   1249c:	add	sl, r5, sl
   124a0:	b	124ac <__assert_fail@plt+0xd58>
   124a4:	subs	fp, fp, #1
   124a8:	bcc	124f4 <__assert_fail@plt+0xda0>
   124ac:	mov	r0, sl
   124b0:	mov	r1, r7
   124b4:	bl	116a0 <__gmpz_cmp@plt>
   124b8:	cmp	r0, #0
   124bc:	sub	sl, sl, #12
   124c0:	bgt	124a4 <__assert_fail@plt+0xd50>
   124c4:	bne	12598 <__assert_fail@plt+0xe44>
   124c8:	ldr	r3, [sp, #4]
   124cc:	ldr	r2, [r3, fp, lsl #2]
   124d0:	add	r2, r2, #1
   124d4:	str	r2, [r3, fp, lsl #2]
   124d8:	add	sp, sp, #20
   124dc:	ldrd	r4, [sp]
   124e0:	ldrd	r6, [sp, #8]
   124e4:	ldrd	r8, [sp, #16]
   124e8:	ldrd	sl, [sp, #24]
   124ec:	add	sp, sp, #32
   124f0:	pop	{pc}		; (ldr pc, [sp], #4)
   124f4:	add	r3, r8, #1
   124f8:	add	r1, r4, #12
   124fc:	mov	r0, r5
   12500:	lsl	r5, r3, #2
   12504:	mov	r8, #0
   12508:	str	r3, [sp, #8]
   1250c:	bl	1e6c4 <__assert_fail@plt+0xcf70>
   12510:	add	r4, r0, r4
   12514:	mov	r1, r5
   12518:	mov	sl, r0
   1251c:	ldr	r0, [sp, #4]
   12520:	bl	1e6c4 <__assert_fail@plt+0xcf70>
   12524:	str	r0, [sp, #4]
   12528:	mov	r0, r4
   1252c:	bl	11718 <__gmpz_init@plt>
   12530:	str	r8, [sp, #12]
   12534:	ldr	r3, [sp, #4]
   12538:	sub	r5, r5, #4
   1253c:	mov	r0, r4
   12540:	add	r5, r3, r5
   12544:	sub	r4, r0, #12
   12548:	sub	r6, r6, #1
   1254c:	mov	r1, r4
   12550:	bl	1146c <__gmpz_set@plt>
   12554:	ldr	r3, [r5, #-4]
   12558:	cmp	r6, fp
   1255c:	mov	r0, r4
   12560:	str	r3, [r5], #-4
   12564:	bgt	12544 <__assert_fail@plt+0xdf0>
   12568:	ldr	r3, [sp, #12]
   1256c:	add	r4, sl, r3
   12570:	mov	r1, r7
   12574:	mov	r0, r4
   12578:	bl	1146c <__gmpz_set@plt>
   1257c:	ldr	r2, [sp, #4]
   12580:	mov	r3, #1
   12584:	str	r3, [r2, r8, lsl #2]
   12588:	ldr	r3, [sp, #8]
   1258c:	str	sl, [r9]
   12590:	strd	r2, [r9, #4]
   12594:	b	124d8 <__assert_fail@plt+0xd84>
   12598:	add	r3, r8, #1
   1259c:	add	r1, r4, #12
   125a0:	mov	r0, r5
   125a4:	lsl	r5, r3, #2
   125a8:	add	r8, fp, #1
   125ac:	str	r3, [sp, #8]
   125b0:	bl	1e6c4 <__assert_fail@plt+0xcf70>
   125b4:	add	r4, r0, r4
   125b8:	mov	r1, r5
   125bc:	mov	sl, r0
   125c0:	ldr	r0, [sp, #4]
   125c4:	bl	1e6c4 <__assert_fail@plt+0xcf70>
   125c8:	str	r0, [sp, #4]
   125cc:	mov	r0, r4
   125d0:	bl	11718 <__gmpz_init@plt>
   125d4:	add	r2, r8, r8, lsl #1
   125d8:	cmp	fp, r6
   125dc:	lsl	r2, r2, #2
   125e0:	str	r2, [sp, #12]
   125e4:	blt	12534 <__assert_fail@plt+0xde0>
   125e8:	add	r4, sl, r2
   125ec:	b	12570 <__assert_fail@plt+0xe1c>
   125f0:	add	r3, r8, #1
   125f4:	mov	r0, r5
   125f8:	add	r4, r3, r3, lsl #1
   125fc:	mov	r5, r3
   12600:	str	r3, [sp, #8]
   12604:	lsl	r4, r4, #2
   12608:	mov	r1, r4
   1260c:	sub	r4, r4, #12
   12610:	bl	1e6c4 <__assert_fail@plt+0xcf70>
   12614:	add	r4, r0, r4
   12618:	mov	sl, r0
   1261c:	lsl	r1, r5, #2
   12620:	ldr	r0, [sp, #4]
   12624:	bl	1e6c4 <__assert_fail@plt+0xcf70>
   12628:	str	r0, [sp, #4]
   1262c:	mov	r0, r4
   12630:	bl	11718 <__gmpz_init@plt>
   12634:	b	12570 <__assert_fail@plt+0xe1c>
   12638:	str	r4, [sp, #-8]!
   1263c:	str	lr, [sp, #4]
   12640:	bl	115e0 <__errno_location@plt>
   12644:	ldr	r4, [r0]
   12648:	mov	r2, #5
   1264c:	movw	r1, #18000	; 0x4650
   12650:	movt	r1, #2
   12654:	mov	r0, #0
   12658:	bl	11430 <dcgettext@plt>
   1265c:	mov	r3, r0
   12660:	movw	r2, #19180	; 0x4aec
   12664:	movt	r2, #2
   12668:	mov	r0, #1
   1266c:	mov	r1, r4
   12670:	bl	11520 <error@plt>
   12674:	strd	r4, [sp, #-16]!
   12678:	movw	r4, #25068	; 0x61ec
   1267c:	movt	r4, #3
   12680:	ldm	r4, {r3, r5}
   12684:	mov	r0, #1
   12688:	str	r6, [sp, #8]
   1268c:	str	lr, [sp, #12]
   12690:	sub	r5, r5, r3
   12694:	mov	r1, r3
   12698:	mov	r2, r5
   1269c:	bl	18d8c <__assert_fail@plt+0x7638>
   126a0:	cmp	r0, r5
   126a4:	bne	126c0 <__assert_fail@plt+0xf6c>
   126a8:	ldr	r3, [r4]
   126ac:	ldr	r6, [sp, #8]
   126b0:	str	r3, [r4, #4]
   126b4:	ldrd	r4, [sp]
   126b8:	add	sp, sp, #12
   126bc:	pop	{pc}		; (ldr pc, [sp], #4)
   126c0:	bl	12638 <__assert_fail@plt+0xee4>
   126c4:	movw	r1, #17888	; 0x45e0
   126c8:	movt	r1, #2
   126cc:	ldr	r3, [pc, #20]	; 126e8 <__assert_fail@plt+0xf94>
   126d0:	movw	r0, #18012	; 0x465c
   126d4:	movt	r0, #2
   126d8:	str	r4, [sp, #-8]!
   126dc:	movw	r2, #558	; 0x22e
   126e0:	str	lr, [sp, #4]
   126e4:	bl	11754 <__assert_fail@plt>
   126e8:	andeq	r1, r2, ip, lsr #10
   126ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126f0:	strd	r6, [sp, #8]
   126f4:	strd	r8, [sp, #16]
   126f8:	mov	r9, #0
   126fc:	strd	sl, [sp, #24]
   12700:	mov	r7, r9
   12704:	str	lr, [sp, #32]
   12708:	sub	sp, sp, #60	; 0x3c
   1270c:	ldr	ip, [sp, #96]	; 0x60
   12710:	str	r0, [sp, #36]	; 0x24
   12714:	ldr	lr, [sp, #100]	; 0x64
   12718:	ldrd	r4, [sp, #104]	; 0x68
   1271c:	and	r6, ip, #1
   12720:	orrs	r1, r6, r7
   12724:	ldrd	r6, [sp, #112]	; 0x70
   12728:	bne	12768 <__assert_fail@plt+0x1014>
   1272c:	lsr	ip, ip, #1
   12730:	mov	r1, r9
   12734:	lsr	r8, r2, #1
   12738:	orr	ip, ip, lr, lsl #31
   1273c:	lsl	r7, r2, #31
   12740:	orr	r8, r8, r3, lsl #31
   12744:	and	r0, ip, #1
   12748:	lsr	r5, r3, #1
   1274c:	orrs	r4, r0, r1
   12750:	mov	r2, r8
   12754:	orr	lr, r7, lr, lsr #1
   12758:	mov	r3, r5
   1275c:	beq	1272c <__assert_fail@plt+0xfd8>
   12760:	ldrd	r4, [sp, #104]	; 0x68
   12764:	ldrd	r6, [sp, #112]	; 0x70
   12768:	mov	r0, ip
   1276c:	mov	r1, lr
   12770:	mov	ip, #0
   12774:	orr	lr, r2, r4
   12778:	str	lr, [sp]
   1277c:	orr	lr, r3, r5
   12780:	str	lr, [sp, #4]
   12784:	ldrd	r8, [sp]
   12788:	orrs	lr, r8, r9
   1278c:	beq	128c4 <__assert_fail@plt+0x1170>
   12790:	cmp	r3, r5
   12794:	cmpeq	r2, r4
   12798:	bhi	12850 <__assert_fail@plt+0x10fc>
   1279c:	moveq	lr, #1
   127a0:	movne	lr, #0
   127a4:	cmp	r1, r7
   127a8:	cmpeq	r0, r6
   127ac:	movhi	r8, #1
   127b0:	movls	r8, #0
   127b4:	tst	lr, r8
   127b8:	bne	12850 <__assert_fail@plt+0x10fc>
   127bc:	cmp	r3, r5
   127c0:	cmpeq	r2, r4
   127c4:	bcc	127e0 <__assert_fail@plt+0x108c>
   127c8:	cmp	r1, r7
   127cc:	cmpeq	r0, r6
   127d0:	movcs	lr, #0
   127d4:	andcc	lr, lr, #1
   127d8:	cmp	lr, #0
   127dc:	beq	12984 <__assert_fail@plt+0x1230>
   127e0:	subs	r6, r6, r0
   127e4:	strd	r2, [sp, #24]
   127e8:	sbc	r7, r7, r1
   127ec:	subs	lr, r4, r2
   127f0:	str	lr, [sp, #16]
   127f4:	sbc	lr, r5, r3
   127f8:	str	lr, [sp, #20]
   127fc:	mov	lr, r8
   12800:	ldrd	r8, [sp, #8]
   12804:	ldrd	r4, [sp, #16]
   12808:	subs	r4, r4, lr
   1280c:	sbc	r5, r5, #0
   12810:	lsr	lr, r6, #1
   12814:	mov	fp, ip
   12818:	lsr	r3, r7, #1
   1281c:	orr	r6, lr, r7, lsl #31
   12820:	lsr	lr, r4, #1
   12824:	orr	r7, r3, r4, lsl #31
   12828:	and	sl, r6, #1
   1282c:	lsr	r3, r5, #1
   12830:	orr	lr, lr, r5, lsl #31
   12834:	mov	r5, r3
   12838:	orrs	r3, sl, fp
   1283c:	mov	r4, lr
   12840:	beq	12810 <__assert_fail@plt+0x10bc>
   12844:	strd	r8, [sp, #8]
   12848:	ldrd	r2, [sp, #24]
   1284c:	b	12774 <__assert_fail@plt+0x1020>
   12850:	cmp	r1, r7
   12854:	strd	r4, [sp, #104]	; 0x68
   12858:	cmpeq	r0, r6
   1285c:	movcc	r8, #1
   12860:	movcs	r8, #0
   12864:	subs	r0, r0, r6
   12868:	sbc	r1, r1, r7
   1286c:	subs	r9, r2, r4
   12870:	sbc	lr, r3, r5
   12874:	subs	r2, r9, r8
   12878:	str	lr, [sp, #24]
   1287c:	ldr	r8, [sp, #24]
   12880:	sbc	r3, r8, ip
   12884:	lsr	lr, r0, #1
   12888:	mov	r9, ip
   1288c:	lsr	r5, r1, #1
   12890:	orr	r0, lr, r1, lsl #31
   12894:	lsr	lr, r2, #1
   12898:	orr	r1, r5, r2, lsl #31
   1289c:	and	r8, r0, #1
   128a0:	orr	lr, lr, r3, lsl #31
   128a4:	lsr	r5, r3, #1
   128a8:	mov	r2, lr
   128ac:	orrs	lr, r8, r9
   128b0:	mov	r3, r5
   128b4:	beq	12884 <__assert_fail@plt+0x1130>
   128b8:	strd	r8, [sp, #8]
   128bc:	ldrd	r4, [sp, #104]	; 0x68
   128c0:	b	12774 <__assert_fail@plt+0x1020>
   128c4:	ldr	ip, [sp, #36]	; 0x24
   128c8:	mov	r4, r8
   128cc:	mov	r5, r9
   128d0:	and	r2, r0, #1
   128d4:	mov	r3, #0
   128d8:	orrs	r3, r2, r3
   128dc:	strd	r4, [ip]
   128e0:	bne	12960 <__assert_fail@plt+0x120c>
   128e4:	lsr	ip, r6, #1
   128e8:	mov	lr, #0
   128ec:	lsr	r4, r7, #1
   128f0:	orr	ip, ip, r7, lsl #31
   128f4:	b	12920 <__assert_fail@plt+0x11cc>
   128f8:	and	r3, r2, r6
   128fc:	and	r1, r7, r2
   12900:	adds	ip, ip, r3
   12904:	eor	r3, r2, r6
   12908:	adc	r4, r4, r1
   1290c:	eor	r1, r7, r2
   12910:	subs	r3, r3, r2
   12914:	sbc	r2, r1, r2
   12918:	mov	r0, r3
   1291c:	mov	r1, r2
   12920:	and	r8, r0, #1
   12924:	lsr	r3, r0, #1
   12928:	mov	r9, lr
   1292c:	orrs	r5, r8, r9
   12930:	lsr	r2, r1, #1
   12934:	orr	r3, r3, r1, lsl #31
   12938:	beq	12918 <__assert_fail@plt+0x11c4>
   1293c:	subs	r6, r3, ip
   12940:	sbc	r7, r2, r4
   12944:	orrs	r3, r6, r7
   12948:	asr	r2, r7, #31
   1294c:	bne	128f8 <__assert_fail@plt+0x11a4>
   12950:	bic	r3, r0, #1
   12954:	adds	r0, r3, #1
   12958:	adc	r1, r1, #0
   1295c:	b	12968 <__assert_fail@plt+0x1214>
   12960:	orrs	r3, r6, r7
   12964:	bne	12990 <__assert_fail@plt+0x123c>
   12968:	add	sp, sp, #60	; 0x3c
   1296c:	ldrd	r4, [sp]
   12970:	ldrd	r6, [sp, #8]
   12974:	ldrd	r8, [sp, #16]
   12978:	ldrd	sl, [sp, #24]
   1297c:	add	sp, sp, #32
   12980:	pop	{pc}		; (ldr pc, [sp], #4)
   12984:	ldr	ip, [sp, #36]	; 0x24
   12988:	strd	r2, [ip]
   1298c:	b	12968 <__assert_fail@plt+0x1214>
   12990:	mov	r2, r0
   12994:	mov	r3, r1
   12998:	mov	r0, r6
   1299c:	mov	r1, r7
   129a0:	mov	r6, r2
   129a4:	mov	r7, r3
   129a8:	b	128e4 <__assert_fail@plt+0x1190>
   129ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129b0:	mov	ip, #0
   129b4:	strd	r6, [sp, #8]
   129b8:	strd	r8, [sp, #16]
   129bc:	mov	r8, ip
   129c0:	strd	sl, [sp, #24]
   129c4:	mov	fp, r3
   129c8:	mov	sl, r2
   129cc:	str	lr, [sp, #32]
   129d0:	sub	sp, sp, #28
   129d4:	ldr	lr, [sp, #72]	; 0x48
   129d8:	ldr	r1, [sp, #76]	; 0x4c
   129dc:	str	lr, [sp, #4]
   129e0:	str	r0, [sp, #20]
   129e4:	and	r9, r1, #-16777216	; 0xff000000
   129e8:	str	r1, [sp, #16]
   129ec:	orrs	r3, r8, r9
   129f0:	ldr	r9, [sp, #80]	; 0x50
   129f4:	ldr	r8, [sp, #84]	; 0x54
   129f8:	bne	12c00 <__assert_fail@plt+0x14ac>
   129fc:	mov	r0, r1
   12a00:	mov	r2, lr
   12a04:	mov	r1, ip
   12a08:	mov	r3, r0
   12a0c:	mov	lr, ip
   12a10:	lsl	r0, r3, #8
   12a14:	mov	r6, lr
   12a18:	add	r1, r1, #8
   12a1c:	lsl	ip, r2, #8
   12a20:	orr	r0, r0, r2, lsr #24
   12a24:	mov	r2, ip
   12a28:	and	r7, r0, #-16777216	; 0xff000000
   12a2c:	mov	r3, r0
   12a30:	orrs	r0, r6, r7
   12a34:	beq	12a10 <__assert_fail@plt+0x12bc>
   12a38:	cmp	r2, #0
   12a3c:	sbcs	r0, r3, #0
   12a40:	blt	12a5c <__assert_fail@plt+0x1308>
   12a44:	adds	r2, r2, r2
   12a48:	add	r1, r1, #1
   12a4c:	adc	r3, r3, r3
   12a50:	cmp	r2, #0
   12a54:	sbcs	r0, r3, #0
   12a58:	bge	12a44 <__assert_fail@plt+0x12f0>
   12a5c:	mov	ip, #0
   12a60:	and	r3, fp, #-16777216	; 0xff000000
   12a64:	mov	r2, ip
   12a68:	orrs	r3, r2, r3
   12a6c:	mov	r2, sl
   12a70:	mov	r3, fp
   12a74:	bne	12abc <__assert_fail@plt+0x1368>
   12a78:	mov	r6, ip
   12a7c:	lsl	r0, r3, #8
   12a80:	mov	r4, r6
   12a84:	add	ip, ip, #8
   12a88:	lsl	lr, r2, #8
   12a8c:	orr	r0, r0, r2, lsr #24
   12a90:	mov	r2, lr
   12a94:	and	r5, r0, #-16777216	; 0xff000000
   12a98:	mov	r3, r0
   12a9c:	orrs	r0, r4, r5
   12aa0:	beq	12a7c <__assert_fail@plt+0x1328>
   12aa4:	cmp	r2, #0
   12aa8:	sbcs	r0, r3, #0
   12aac:	blt	12ac8 <__assert_fail@plt+0x1374>
   12ab0:	adds	r2, r2, r2
   12ab4:	add	ip, ip, #1
   12ab8:	adc	r3, r3, r3
   12abc:	cmp	r2, #0
   12ac0:	sbcs	r0, r3, #0
   12ac4:	bge	12ab0 <__assert_fail@plt+0x135c>
   12ac8:	ldr	r3, [sp, #16]
   12acc:	sub	ip, r1, ip
   12ad0:	rsb	r4, ip, #64	; 0x40
   12ad4:	lsl	r1, r8, ip
   12ad8:	cmp	ip, #0
   12adc:	lsr	lr, r9, r4
   12ae0:	rsb	r5, r4, #32
   12ae4:	sub	r6, r4, #32
   12ae8:	lsl	r0, r9, ip
   12aec:	orr	lr, lr, r8, lsl r5
   12af0:	sub	r5, ip, #32
   12af4:	lsl	r7, r3, ip
   12af8:	ldr	r3, [sp, #4]
   12afc:	orr	r1, r1, r9, lsl r5
   12b00:	orr	lr, lr, r8, lsr r6
   12b04:	orr	r7, r7, r3, lsl r5
   12b08:	rsb	r5, ip, #32
   12b0c:	orr	r2, lr, r3, lsl ip
   12b10:	orr	r7, r7, r3, lsr r5
   12b14:	orr	r1, r1, r9, lsr r5
   12b18:	orr	r3, r7, r8, lsr r4
   12b1c:	strd	r2, [sp, #8]
   12b20:	ble	12bd8 <__assert_fail@plt+0x1484>
   12b24:	ldrd	r2, [sp, #8]
   12b28:	mov	r4, #0
   12b2c:	str	ip, [sp, #4]
   12b30:	cmp	r3, fp
   12b34:	lsr	ip, r0, #1
   12b38:	mov	r8, #0
   12b3c:	cmpeq	r2, sl
   12b40:	add	r4, r4, #1
   12b44:	lsr	r9, r1, #1
   12b48:	lsr	lr, r2, #1
   12b4c:	bcc	12b78 <__assert_fail@plt+0x1424>
   12b50:	ldrd	r6, [sp, #64]	; 0x40
   12b54:	cmp	r1, r7
   12b58:	cmpeq	r0, r6
   12b5c:	movls	r5, #1
   12b60:	movhi	r5, r8
   12b64:	cmp	r3, fp
   12b68:	cmpeq	r2, sl
   12b6c:	movne	r5, r8
   12b70:	cmp	r5, r8
   12b74:	beq	12bb4 <__assert_fail@plt+0x1460>
   12b78:	ldrd	r6, [sp, #64]	; 0x40
   12b7c:	cmp	r1, r7
   12b80:	cmpeq	r0, r6
   12b84:	ldr	r6, [sp, #64]	; 0x40
   12b88:	movhi	r5, #1
   12b8c:	movls	r5, #0
   12b90:	subs	r6, r6, r0
   12b94:	str	r6, [sp, #64]	; 0x40
   12b98:	ldr	r6, [sp, #68]	; 0x44
   12b9c:	sbc	r6, r6, r1
   12ba0:	str	r6, [sp, #68]	; 0x44
   12ba4:	subs	r6, sl, r2
   12ba8:	sbc	r7, fp, r3
   12bac:	subs	sl, r6, r5
   12bb0:	sbc	fp, r7, r8
   12bb4:	orr	r0, ip, r1, lsl #31
   12bb8:	ldr	ip, [sp, #4]
   12bbc:	orr	lr, lr, r3, lsl #31
   12bc0:	lsr	r5, r3, #1
   12bc4:	orr	r1, r9, r2, lsl #31
   12bc8:	mov	r2, lr
   12bcc:	mov	r3, r5
   12bd0:	cmp	ip, r4
   12bd4:	bne	12b30 <__assert_fail@plt+0x13dc>
   12bd8:	ldr	r3, [sp, #20]
   12bdc:	ldrd	r0, [sp, #64]	; 0x40
   12be0:	strd	sl, [r3]
   12be4:	add	sp, sp, #28
   12be8:	ldrd	r4, [sp]
   12bec:	ldrd	r6, [sp, #8]
   12bf0:	ldrd	r8, [sp, #16]
   12bf4:	ldrd	sl, [sp, #24]
   12bf8:	add	sp, sp, #32
   12bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12c00:	mov	r1, ip
   12c04:	ldr	r2, [sp, #4]
   12c08:	ldr	r3, [sp, #16]
   12c0c:	b	12a50 <__assert_fail@plt+0x12fc>
   12c10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c14:	mov	r4, #0
   12c18:	strd	r6, [sp, #8]
   12c1c:	mov	r5, r4
   12c20:	mov	r6, #64	; 0x40
   12c24:	strd	r8, [sp, #16]
   12c28:	strd	sl, [sp, #24]
   12c2c:	mov	sl, r2
   12c30:	mov	fp, r3
   12c34:	str	lr, [sp, #32]
   12c38:	sub	sp, sp, #44	; 0x2c
   12c3c:	add	r3, pc, #436	; 0x1b4
   12c40:	ldrd	r2, [r3]
   12c44:	strd	r0, [sp, #8]
   12c48:	bl	21320 <__assert_fail@plt+0xfbcc>
   12c4c:	mov	r8, r2
   12c50:	mov	r9, r3
   12c54:	add	r3, pc, #412	; 0x19c
   12c58:	ldrd	r2, [r3]
   12c5c:	mov	r0, r4
   12c60:	mov	r1, r4
   12c64:	lsr	lr, r0, #1
   12c68:	adds	ip, r4, r4
   12c6c:	adc	r7, r5, r5
   12c70:	lsr	r4, r1, #1
   12c74:	orr	r0, lr, r1, lsl #31
   12c78:	mov	r5, r7
   12c7c:	lsr	lr, r2, #1
   12c80:	orr	r1, r4, r2, lsl #31
   12c84:	mov	r4, ip
   12c88:	orr	lr, lr, r3, lsl #31
   12c8c:	lsr	r3, r3, #1
   12c90:	mov	r2, lr
   12c94:	str	r3, [sp, #4]
   12c98:	ldr	r3, [sp, #4]
   12c9c:	cmp	r3, r9
   12ca0:	cmpeq	lr, r8
   12ca4:	moveq	lr, #1
   12ca8:	movne	lr, #0
   12cac:	bcc	12cc8 <__assert_fail@plt+0x1574>
   12cb0:	cmp	r1, fp
   12cb4:	cmpeq	r0, sl
   12cb8:	movhi	lr, #0
   12cbc:	andls	lr, lr, #1
   12cc0:	cmp	lr, #0
   12cc4:	beq	12cfc <__assert_fail@plt+0x15a8>
   12cc8:	adds	r4, ip, #1
   12ccc:	adc	r5, r7, #0
   12cd0:	cmp	r1, fp
   12cd4:	cmpeq	r0, sl
   12cd8:	movhi	ip, #1
   12cdc:	movls	ip, #0
   12ce0:	subs	sl, sl, r0
   12ce4:	sbc	fp, fp, r1
   12ce8:	subs	lr, r8, r2
   12cec:	sbc	r7, r9, r3
   12cf0:	subs	r8, lr, ip
   12cf4:	mov	ip, #0
   12cf8:	sbc	r9, r7, ip
   12cfc:	subs	r6, r6, #1
   12d00:	bne	12c64 <__assert_fail@plt+0x1510>
   12d04:	add	r3, pc, #244	; 0xf4
   12d08:	ldrd	r2, [r3]
   12d0c:	ldrd	r0, [sp, #8]
   12d10:	cmp	r1, r3
   12d14:	cmpeq	r0, r2
   12d18:	bls	12db0 <__assert_fail@plt+0x165c>
   12d1c:	add	r3, pc, #212	; 0xd4
   12d20:	ldrd	r2, [r3]
   12d24:	movw	r7, #25068	; 0x61ec
   12d28:	movt	r7, #3
   12d2c:	bl	21320 <__assert_fail@plt+0xfbcc>
   12d30:	mov	r2, r4
   12d34:	mov	r3, r5
   12d38:	add	r6, sp, #16
   12d3c:	bl	12c10 <__assert_fail@plt+0x14bc>
   12d40:	mov	r2, r6
   12d44:	mov	r0, sl
   12d48:	mov	r1, fp
   12d4c:	bl	18e14 <__assert_fail@plt+0x76c0>
   12d50:	sub	r6, r0, r6
   12d54:	mov	r8, r0
   12d58:	rsb	r5, r6, #20
   12d5c:	cmp	r5, #8
   12d60:	ldrhi	r4, [r7, #4]
   12d64:	bhi	12d7c <__assert_fail@plt+0x1628>
   12d68:	sub	r2, r6, #11
   12d6c:	mov	r1, #48	; 0x30
   12d70:	ldr	r0, [r7, #4]
   12d74:	add	r4, r0, r2
   12d78:	bl	11610 <memset@plt>
   12d7c:	mov	r1, r8
   12d80:	mov	r2, r5
   12d84:	mov	r0, r4
   12d88:	add	r4, r4, r5
   12d8c:	bl	113f4 <memcpy@plt>
   12d90:	str	r4, [r7, #4]
   12d94:	add	sp, sp, #44	; 0x2c
   12d98:	ldrd	r4, [sp]
   12d9c:	ldrd	r6, [sp, #8]
   12da0:	ldrd	r8, [sp, #16]
   12da4:	ldrd	sl, [sp, #24]
   12da8:	add	sp, sp, #32
   12dac:	pop	{pc}		; (ldr pc, [sp], #4)
   12db0:	add	r6, sp, #16
   12db4:	mov	r0, r4
   12db8:	mov	r1, r5
   12dbc:	mov	r2, r6
   12dc0:	movw	r7, #25068	; 0x61ec
   12dc4:	movt	r7, #3
   12dc8:	bl	18e14 <__assert_fail@plt+0x76c0>
   12dcc:	ldr	r3, [r7, #4]
   12dd0:	sub	r4, r0, r6
   12dd4:	mov	r1, r0
   12dd8:	rsb	r4, r4, #20
   12ddc:	mov	r2, r4
   12de0:	mov	r0, r3
   12de4:	bl	113f4 <memcpy@plt>
   12de8:	add	r3, r0, r4
   12dec:	str	r3, [r7, #4]
   12df0:	b	12d40 <__assert_fail@plt+0x15ec>
   12df4:	nop	{0}
   12df8:	blcc	fe6c5600 <stdout@@GLIBC_2.4+0xfe68f41c>
   12dfc:	andeq	r0, r0, r0
   12e00:	blcc	fe6c5604 <stdout@@GLIBC_2.4+0xfe68f420>
   12e04:	andeq	r0, r0, r0
   12e08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12e0c:	mov	r5, #0
   12e10:	strd	r6, [sp, #8]
   12e14:	strd	r8, [sp, #16]
   12e18:	strd	sl, [sp, #24]
   12e1c:	str	lr, [sp, #32]
   12e20:	sub	sp, sp, #156	; 0x9c
   12e24:	ldrd	r8, [sp, #200]	; 0xc8
   12e28:	strd	r2, [sp, #80]	; 0x50
   12e2c:	strd	r0, [sp, #132]	; 0x84
   12e30:	ldr	r3, [sp, #192]	; 0xc0
   12e34:	and	r4, r8, #1
   12e38:	ldr	r2, [sp, #196]	; 0xc4
   12e3c:	orrs	r1, r4, r5
   12e40:	beq	132d4 <__assert_fail@plt+0x1b80>
   12e44:	mov	sl, r3
   12e48:	mov	fp, r2
   12e4c:	mov	ip, r0
   12e50:	ldr	r0, [sp, #136]	; 0x88
   12e54:	mov	r1, #0
   12e58:	mov	lr, ip
   12e5c:	strd	sl, [sp]
   12e60:	str	r1, [sp, #128]	; 0x80
   12e64:	str	r0, [sp, #140]	; 0x8c
   12e68:	umull	r4, r5, r2, r3
   12e6c:	ldr	ip, [sp, #128]	; 0x80
   12e70:	umull	sl, fp, r3, r3
   12e74:	adds	r7, r4, r4
   12e78:	adc	r6, r5, r5
   12e7c:	adds	r3, fp, r7
   12e80:	adc	r1, ip, r6
   12e84:	str	r3, [sp, #8]
   12e88:	umull	r2, r3, r2, r2
   12e8c:	str	r1, [sp, #12]
   12e90:	ldrd	r0, [sp, #8]
   12e94:	cmp	r5, r1
   12e98:	cmpeq	r4, r0
   12e9c:	bls	12ea8 <__assert_fail@plt+0x1754>
   12ea0:	adds	r2, r2, #0
   12ea4:	adc	r3, r3, #1
   12ea8:	ldrd	r4, [sp, #8]
   12eac:	mov	ip, #0
   12eb0:	adds	r1, r5, r2
   12eb4:	adc	r3, ip, r3
   12eb8:	adds	r0, ip, sl
   12ebc:	adc	r2, r4, ip
   12ec0:	ldr	r4, [sp, #80]	; 0x50
   12ec4:	str	r1, [sp, #24]
   12ec8:	str	r3, [sp, #28]
   12ecc:	ldr	r3, [sp, #84]	; 0x54
   12ed0:	mul	r3, r0, r3
   12ed4:	umull	r0, r1, r0, r4
   12ed8:	mla	r2, r4, r2, r3
   12edc:	ldr	r3, [sp, #140]	; 0x8c
   12ee0:	umull	r6, r7, r0, lr
   12ee4:	add	r2, r2, r1
   12ee8:	umull	sl, fp, r3, r0
   12eec:	umull	r0, r1, r2, lr
   12ef0:	umull	r2, r3, r2, r3
   12ef4:	adds	r4, sl, r0
   12ef8:	adc	r5, fp, r1
   12efc:	adds	r4, r7, r4
   12f00:	adc	ip, ip, r5
   12f04:	str	r4, [sp, #16]
   12f08:	str	ip, [sp, #20]
   12f0c:	ldrd	r4, [sp, #16]
   12f10:	cmp	r1, r5
   12f14:	cmpeq	r0, r4
   12f18:	bls	12f24 <__assert_fail@plt+0x17d0>
   12f1c:	adds	r2, r2, #0
   12f20:	adc	r3, r3, #1
   12f24:	ldr	r1, [sp, #20]
   12f28:	mov	r0, #0
   12f2c:	adds	r1, r1, r2
   12f30:	adc	r3, r0, r3
   12f34:	str	r1, [sp, #32]
   12f38:	str	r3, [sp, #36]	; 0x24
   12f3c:	ldrd	r0, [sp, #24]
   12f40:	ldrd	r4, [sp, #32]
   12f44:	subs	r3, r0, r4
   12f48:	sbc	r2, r1, r5
   12f4c:	cmp	r1, r5
   12f50:	cmpeq	r0, r4
   12f54:	bcs	12f68 <__assert_fail@plt+0x1814>
   12f58:	ldr	r1, [sp, #132]	; 0x84
   12f5c:	adds	r3, r3, r1
   12f60:	ldr	r1, [sp, #136]	; 0x88
   12f64:	adc	r2, r2, r1
   12f68:	lsr	r1, r8, #1
   12f6c:	ldr	ip, [sp, #128]	; 0x80
   12f70:	lsr	r0, r9, #1
   12f74:	orr	r1, r1, r9, lsl #31
   12f78:	mov	r9, r0
   12f7c:	mov	r8, r1
   12f80:	and	r1, r1, #1
   12f84:	str	r1, [sp, #40]	; 0x28
   12f88:	str	ip, [sp, #44]	; 0x2c
   12f8c:	ldrd	r0, [sp, #40]	; 0x28
   12f90:	orrs	r1, r0, r1
   12f94:	beq	130c4 <__assert_fail@plt+0x1970>
   12f98:	ldrd	sl, [sp]
   12f9c:	umull	r4, r5, fp, r3
   12fa0:	umull	r6, r7, sl, r3
   12fa4:	mov	r0, r4
   12fa8:	mov	r1, r5
   12fac:	umlal	r0, r1, sl, r2
   12fb0:	adds	sl, r7, r0
   12fb4:	adc	r1, ip, r1
   12fb8:	str	sl, [sp, #88]	; 0x58
   12fbc:	str	r1, [sp, #92]	; 0x5c
   12fc0:	ldr	r1, [sp, #4]
   12fc4:	ldrd	sl, [sp, #88]	; 0x58
   12fc8:	umull	r0, r1, r1, r2
   12fcc:	cmp	r5, fp
   12fd0:	cmpeq	r4, sl
   12fd4:	bls	12fe0 <__assert_fail@plt+0x188c>
   12fd8:	adds	r0, r0, #0
   12fdc:	adc	r1, r1, #1
   12fe0:	ldrd	sl, [sp, #88]	; 0x58
   12fe4:	mov	ip, #0
   12fe8:	ldr	r5, [sp, #140]	; 0x8c
   12fec:	adds	r4, fp, r0
   12ff0:	ldr	r0, [sp, #80]	; 0x50
   12ff4:	adc	r1, ip, r1
   12ff8:	adds	r6, ip, r6
   12ffc:	str	r4, [sp, #104]	; 0x68
   13000:	adc	r4, sl, ip
   13004:	str	r1, [sp, #108]	; 0x6c
   13008:	ldr	r1, [sp, #84]	; 0x54
   1300c:	mul	r1, r6, r1
   13010:	umull	r6, r7, r6, r0
   13014:	mla	r4, r0, r4, r1
   13018:	umull	r0, r1, r5, r6
   1301c:	add	r4, r4, r7
   13020:	strd	r0, [sp, #120]	; 0x78
   13024:	umull	r0, r1, r6, lr
   13028:	umull	r6, r7, r4, lr
   1302c:	umull	r4, r5, r5, r4
   13030:	mov	sl, r1
   13034:	ldr	r1, [sp, #120]	; 0x78
   13038:	adds	r0, r1, r6
   1303c:	ldr	r1, [sp, #124]	; 0x7c
   13040:	adc	r1, r1, r7
   13044:	adds	r0, sl, r0
   13048:	adc	r1, ip, r1
   1304c:	strd	r0, [sp, #96]	; 0x60
   13050:	ldrd	r0, [sp, #96]	; 0x60
   13054:	cmp	r7, r1
   13058:	cmpeq	r6, r0
   1305c:	bls	13068 <__assert_fail@plt+0x1914>
   13060:	adds	r4, r4, ip
   13064:	adc	r5, r5, #1
   13068:	ldr	r1, [sp, #100]	; 0x64
   1306c:	mov	r0, #0
   13070:	adds	r1, r1, r4
   13074:	str	r1, [sp, #112]	; 0x70
   13078:	adc	r1, r0, r5
   1307c:	str	r1, [sp, #116]	; 0x74
   13080:	ldrd	r0, [sp, #104]	; 0x68
   13084:	ldrd	r4, [sp, #112]	; 0x70
   13088:	subs	ip, r0, r4
   1308c:	str	ip, [sp]
   13090:	sbc	ip, r1, r5
   13094:	cmp	r1, r5
   13098:	cmpeq	r0, r4
   1309c:	str	ip, [sp, #4]
   130a0:	bcs	12e68 <__assert_fail@plt+0x1714>
   130a4:	ldr	r0, [sp]
   130a8:	ldr	r1, [sp, #132]	; 0x84
   130ac:	adds	r1, r0, r1
   130b0:	str	r1, [sp]
   130b4:	ldr	r1, [sp, #136]	; 0x88
   130b8:	adc	r1, ip, r1
   130bc:	str	r1, [sp, #4]
   130c0:	b	12e68 <__assert_fail@plt+0x1714>
   130c4:	orrs	r1, r8, r9
   130c8:	bne	12e68 <__assert_fail@plt+0x1714>
   130cc:	ldrd	sl, [sp]
   130d0:	ldr	lr, [sp, #132]	; 0x84
   130d4:	ldr	r3, [sp, #216]	; 0xd8
   130d8:	ldr	r6, [sp, #136]	; 0x88
   130dc:	subs	r3, lr, r3
   130e0:	str	r3, [sp, #144]	; 0x90
   130e4:	ldr	r3, [sp, #220]	; 0xdc
   130e8:	sbc	r3, r6, r3
   130ec:	str	r3, [sp, #148]	; 0x94
   130f0:	ldrd	r0, [sp, #144]	; 0x90
   130f4:	ldrd	r2, [sp, #216]	; 0xd8
   130f8:	cmp	r3, fp
   130fc:	cmpeq	r2, sl
   13100:	moveq	r3, #1
   13104:	movne	r3, #0
   13108:	cmp	r1, fp
   1310c:	cmpeq	r0, sl
   13110:	moveq	r3, #1
   13114:	cmp	r3, #0
   13118:	str	r3, [sp, #16]
   1311c:	bne	132b4 <__assert_fail@plt+0x1b60>
   13120:	ldr	r3, [sp, #208]	; 0xd0
   13124:	cmp	r3, #1
   13128:	bls	132b4 <__assert_fail@plt+0x1b60>
   1312c:	mov	r3, lr
   13130:	mov	r7, #1
   13134:	mov	lr, r6
   13138:	mov	r6, r3
   1313c:	b	1315c <__assert_fail@plt+0x1a08>
   13140:	ldrd	r2, [sp, #216]	; 0xd8
   13144:	cmp	r3, fp
   13148:	cmpeq	r2, sl
   1314c:	beq	132b4 <__assert_fail@plt+0x1b60>
   13150:	ldr	r3, [sp, #208]	; 0xd0
   13154:	cmp	r3, r7
   13158:	beq	132b4 <__assert_fail@plt+0x1b60>
   1315c:	umull	r0, r1, fp, sl
   13160:	mov	ip, #0
   13164:	add	r7, r7, #1
   13168:	umull	r4, r5, sl, sl
   1316c:	mov	r3, ip
   13170:	mov	r2, ip
   13174:	adds	r9, r0, r0
   13178:	str	r4, [sp]
   1317c:	mov	r4, r5
   13180:	adc	r5, r1, r1
   13184:	adds	r4, r4, r9
   13188:	str	ip, [sp, #8]
   1318c:	str	r4, [sp, #48]	; 0x30
   13190:	adc	r4, ip, r5
   13194:	str	r4, [sp, #52]	; 0x34
   13198:	ldrd	r8, [sp, #48]	; 0x30
   1319c:	cmp	r1, r9
   131a0:	mov	r5, r9
   131a4:	cmpeq	r0, r8
   131a8:	mov	r4, r8
   131ac:	umull	r0, r1, fp, fp
   131b0:	bls	131bc <__assert_fail@plt+0x1a68>
   131b4:	adds	r0, r0, ip
   131b8:	adc	r1, r1, #1
   131bc:	adds	r5, r5, r0
   131c0:	adc	r1, ip, r1
   131c4:	str	r5, [sp, #56]	; 0x38
   131c8:	str	r1, [sp, #60]	; 0x3c
   131cc:	ldr	r1, [sp]
   131d0:	adds	r8, r3, r1
   131d4:	ldr	r1, [sp, #16]
   131d8:	adc	r2, r4, r2
   131dc:	ldr	r3, [sp, #84]	; 0x54
   131e0:	mul	r4, r8, r3
   131e4:	ldr	r3, [sp, #80]	; 0x50
   131e8:	umull	r8, r9, r8, r3
   131ec:	mla	r2, r3, r2, r4
   131f0:	umull	r4, r5, lr, r8
   131f4:	mul	r3, r1, r8
   131f8:	add	r2, r2, r9
   131fc:	umull	r8, r9, r8, r6
   13200:	mul	ip, r2, r1
   13204:	strd	r4, [sp]
   13208:	add	r1, r3, r5
   1320c:	add	r8, r3, r9
   13210:	str	r1, [sp, #4]
   13214:	umull	r0, r1, r2, r6
   13218:	umull	r2, r3, r2, lr
   1321c:	add	r1, ip, r1
   13220:	add	r3, ip, r3
   13224:	ldm	sp, {r4, ip}
   13228:	adds	r4, r4, r0
   1322c:	adc	ip, ip, r1
   13230:	adds	r4, r8, r4
   13234:	str	r4, [sp, #64]	; 0x40
   13238:	ldr	r4, [sp, #8]
   1323c:	adc	ip, r4, ip
   13240:	str	ip, [sp, #68]	; 0x44
   13244:	ldrd	r4, [sp, #64]	; 0x40
   13248:	cmp	r1, r5
   1324c:	mov	ip, r5
   13250:	cmpeq	r0, r4
   13254:	bls	13260 <__assert_fail@plt+0x1b0c>
   13258:	adds	r2, r2, #0
   1325c:	adc	r3, r3, #1
   13260:	adds	r1, ip, r2
   13264:	adc	r3, r3, #0
   13268:	str	r1, [sp, #72]	; 0x48
   1326c:	str	r3, [sp, #76]	; 0x4c
   13270:	ldrd	r2, [sp, #56]	; 0x38
   13274:	ldrd	r0, [sp, #72]	; 0x48
   13278:	subs	sl, r2, r0
   1327c:	sbc	fp, r3, r1
   13280:	cmp	r3, r1
   13284:	cmpeq	r2, r0
   13288:	bcs	1329c <__assert_fail@plt+0x1b48>
   1328c:	ldr	r3, [sp, #132]	; 0x84
   13290:	adds	sl, sl, r3
   13294:	ldr	r3, [sp, #136]	; 0x88
   13298:	adc	fp, fp, r3
   1329c:	ldrd	r2, [sp, #144]	; 0x90
   132a0:	cmp	r3, fp
   132a4:	cmpeq	r2, sl
   132a8:	bne	13140 <__assert_fail@plt+0x19ec>
   132ac:	mov	r3, #1
   132b0:	str	r3, [sp, #16]
   132b4:	ldr	r0, [sp, #16]
   132b8:	add	sp, sp, #156	; 0x9c
   132bc:	ldrd	r4, [sp]
   132c0:	ldrd	r6, [sp, #8]
   132c4:	ldrd	r8, [sp, #16]
   132c8:	ldrd	sl, [sp, #24]
   132cc:	add	sp, sp, #32
   132d0:	pop	{pc}		; (ldr pc, [sp], #4)
   132d4:	orrs	r1, r8, r9
   132d8:	beq	132ac <__assert_fail@plt+0x1b58>
   132dc:	mov	ip, r0
   132e0:	ldrd	sl, [sp, #216]	; 0xd8
   132e4:	b	12e50 <__assert_fail@plt+0x16fc>
   132e8:	movw	r3, #25068	; 0x61ec
   132ec:	movt	r3, #3
   132f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   132f4:	strd	r6, [sp, #8]
   132f8:	mov	r7, r0
   132fc:	strd	r8, [sp, #16]
   13300:	mov	r8, r1
   13304:	strd	sl, [sp, #24]
   13308:	str	lr, [sp, #32]
   1330c:	sub	sp, sp, #132	; 0x84
   13310:	strd	r2, [sp, #40]	; 0x28
   13314:	ldrb	r3, [r3, #8]
   13318:	cmp	r3, #0
   1331c:	bne	136bc <__assert_fail@plt+0x1f68>
   13320:	mov	r2, #0
   13324:	add	r1, sp, #116	; 0x74
   13328:	add	r0, sp, #104	; 0x68
   1332c:	add	r6, sp, #56	; 0x38
   13330:	bl	11460 <__gmpz_inits@plt>
   13334:	add	r0, sp, #80	; 0x50
   13338:	mov	r1, #2
   1333c:	bl	1155c <__gmpz_init_set_si@plt>
   13340:	mov	r0, r6
   13344:	mov	r1, #2
   13348:	bl	1155c <__gmpz_init_set_si@plt>
   1334c:	mov	r3, #0
   13350:	mov	r2, #1
   13354:	mov	r5, r3
   13358:	mov	r4, r2
   1335c:	add	r0, sp, #68	; 0x44
   13360:	mov	r1, #2
   13364:	strd	r4, [sp, #16]
   13368:	bl	1155c <__gmpz_init_set_si@plt>
   1336c:	add	r0, sp, #92	; 0x5c
   13370:	mov	r1, #1
   13374:	bl	11694 <__gmpz_init_set_ui@plt>
   13378:	movw	r3, #60793	; 0xed79
   1337c:	movt	r3, #381	; 0x17d
   13380:	str	r3, [sp, #36]	; 0x24
   13384:	movw	r3, #25048	; 0x61d8
   13388:	movt	r3, #3
   1338c:	str	r3, [sp, #48]	; 0x30
   13390:	movw	r3, #18060	; 0x468c
   13394:	movt	r3, #2
   13398:	str	r3, [sp, #52]	; 0x34
   1339c:	mov	r1, #1
   133a0:	mov	r0, r7
   133a4:	bl	1170c <__gmpz_cmp_ui@plt>
   133a8:	cmp	r0, #0
   133ac:	beq	13660 <__assert_fail@plt+0x1f0c>
   133b0:	mov	r9, #0
   133b4:	b	133c8 <__assert_fail@plt+0x1c74>
   133b8:	subs	r4, r4, #1
   133bc:	sbc	r5, r5, #0
   133c0:	orrs	r3, r4, r5
   133c4:	beq	13478 <__assert_fail@plt+0x1d24>
   133c8:	mov	r2, r6
   133cc:	mov	r1, r6
   133d0:	add	r0, sp, #104	; 0x68
   133d4:	and	sl, r4, #31
   133d8:	bl	11484 <__gmpz_mul@plt>
   133dc:	mov	r2, r7
   133e0:	add	r1, sp, #104	; 0x68
   133e4:	mov	r0, r6
   133e8:	bl	11688 <__gmpz_mod@plt>
   133ec:	mov	r2, r8
   133f0:	mov	r1, r6
   133f4:	mov	r0, r6
   133f8:	bl	11568 <__gmpz_add_ui@plt>
   133fc:	mov	r2, r6
   13400:	add	r1, sp, #68	; 0x44
   13404:	add	r0, sp, #104	; 0x68
   13408:	bl	11400 <__gmpz_sub@plt>
   1340c:	add	r2, sp, #104	; 0x68
   13410:	add	r1, sp, #92	; 0x5c
   13414:	add	r0, sp, #116	; 0x74
   13418:	bl	11484 <__gmpz_mul@plt>
   1341c:	mov	r2, r7
   13420:	add	r1, sp, #116	; 0x74
   13424:	add	r0, sp, #92	; 0x5c
   13428:	bl	11688 <__gmpz_mod@plt>
   1342c:	cmp	r9, #0
   13430:	cmpeq	sl, #1
   13434:	bne	133b8 <__assert_fail@plt+0x1c64>
   13438:	mov	r2, r7
   1343c:	add	r1, sp, #92	; 0x5c
   13440:	add	r0, sp, #104	; 0x68
   13444:	bl	116e8 <__gmpz_gcd@plt>
   13448:	mov	r1, #1
   1344c:	add	r0, sp, #104	; 0x68
   13450:	bl	1170c <__gmpz_cmp_ui@plt>
   13454:	cmp	r0, #0
   13458:	bne	1350c <__assert_fail@plt+0x1db8>
   1345c:	mov	r1, r6
   13460:	add	r0, sp, #80	; 0x50
   13464:	bl	1146c <__gmpz_set@plt>
   13468:	subs	r4, r4, #1
   1346c:	sbc	r5, r5, #0
   13470:	orrs	r3, r4, r5
   13474:	bne	133c8 <__assert_fail@plt+0x1c74>
   13478:	mov	r1, r6
   1347c:	add	r0, sp, #68	; 0x44
   13480:	bl	1146c <__gmpz_set@plt>
   13484:	ldrd	r2, [sp, #16]
   13488:	adds	r1, r2, r2
   1348c:	str	r1, [sp, #28]
   13490:	adc	r1, r3, r3
   13494:	orrs	r3, r2, r3
   13498:	str	r1, [sp, #32]
   1349c:	beq	134e8 <__assert_fail@plt+0x1d94>
   134a0:	mov	r2, r6
   134a4:	mov	r1, r6
   134a8:	add	r0, sp, #104	; 0x68
   134ac:	bl	11484 <__gmpz_mul@plt>
   134b0:	mov	r2, r7
   134b4:	add	r1, sp, #104	; 0x68
   134b8:	mov	r0, r6
   134bc:	bl	11688 <__gmpz_mod@plt>
   134c0:	mov	r2, r8
   134c4:	mov	r1, r6
   134c8:	mov	r0, r6
   134cc:	bl	11568 <__gmpz_add_ui@plt>
   134d0:	ldrd	r2, [sp, #16]
   134d4:	adds	r4, r4, #1
   134d8:	adc	r5, r5, #0
   134dc:	cmp	r5, r3
   134e0:	cmpeq	r4, r2
   134e4:	bne	134a0 <__assert_fail@plt+0x1d4c>
   134e8:	mov	r1, r6
   134ec:	add	r0, sp, #80	; 0x50
   134f0:	ldrd	r4, [sp, #16]
   134f4:	bl	1146c <__gmpz_set@plt>
   134f8:	ldr	r3, [sp, #28]
   134fc:	str	r3, [sp, #16]
   13500:	ldr	r3, [sp, #32]
   13504:	str	r3, [sp, #20]
   13508:	b	133c8 <__assert_fail@plt+0x1c74>
   1350c:	add	r2, sp, #80	; 0x50
   13510:	add	r0, sp, #104	; 0x68
   13514:	mov	r1, r2
   13518:	bl	11484 <__gmpz_mul@plt>
   1351c:	mov	r2, r7
   13520:	add	r1, sp, #104	; 0x68
   13524:	add	r0, sp, #80	; 0x50
   13528:	bl	11688 <__gmpz_mod@plt>
   1352c:	add	r1, sp, #80	; 0x50
   13530:	mov	r2, r8
   13534:	mov	r0, r1
   13538:	bl	11568 <__gmpz_add_ui@plt>
   1353c:	add	r2, sp, #80	; 0x50
   13540:	add	r1, sp, #68	; 0x44
   13544:	add	r0, sp, #104	; 0x68
   13548:	bl	11400 <__gmpz_sub@plt>
   1354c:	add	r1, sp, #104	; 0x68
   13550:	mov	r2, r7
   13554:	mov	r0, r1
   13558:	bl	116e8 <__gmpz_gcd@plt>
   1355c:	mov	r1, #1
   13560:	add	r0, sp, #104	; 0x68
   13564:	bl	1170c <__gmpz_cmp_ui@plt>
   13568:	cmp	r0, #0
   1356c:	beq	1350c <__assert_fail@plt+0x1db8>
   13570:	add	r2, sp, #104	; 0x68
   13574:	mov	r1, r7
   13578:	mov	r0, r7
   1357c:	bl	11454 <__gmpz_divexact@plt>
   13580:	mov	r1, #1
   13584:	add	r0, sp, #104	; 0x68
   13588:	bl	1170c <__gmpz_cmp_ui@plt>
   1358c:	cmp	r0, #0
   13590:	ble	135b8 <__assert_fail@plt+0x1e64>
   13594:	add	r0, sp, #104	; 0x68
   13598:	ldr	r1, [sp, #36]	; 0x24
   1359c:	bl	1170c <__gmpz_cmp_ui@plt>
   135a0:	cmp	r0, #0
   135a4:	blt	13644 <__assert_fail@plt+0x1ef0>
   135a8:	add	r0, sp, #104	; 0x68
   135ac:	bl	138fc <__assert_fail@plt+0x21a8>
   135b0:	cmp	r0, #0
   135b4:	bne	13644 <__assert_fail@plt+0x1ef0>
   135b8:	ldr	r3, [sp, #44]	; 0x2c
   135bc:	ldrb	r3, [r3, #8]
   135c0:	cmp	r3, #0
   135c4:	bne	136a0 <__assert_fail@plt+0x1f4c>
   135c8:	add	r1, r8, #1
   135cc:	add	r0, sp, #104	; 0x68
   135d0:	ldr	r2, [sp, #40]	; 0x28
   135d4:	bl	132e8 <__assert_fail@plt+0x1b94>
   135d8:	mov	r1, #1
   135dc:	mov	r0, r7
   135e0:	bl	1170c <__gmpz_cmp_ui@plt>
   135e4:	cmp	r0, #0
   135e8:	ble	13610 <__assert_fail@plt+0x1ebc>
   135ec:	mov	r0, r7
   135f0:	ldr	r1, [sp, #36]	; 0x24
   135f4:	bl	1170c <__gmpz_cmp_ui@plt>
   135f8:	cmp	r0, #0
   135fc:	blt	13654 <__assert_fail@plt+0x1f00>
   13600:	mov	r0, r7
   13604:	bl	138fc <__assert_fail@plt+0x21a8>
   13608:	cmp	r0, #0
   1360c:	bne	13654 <__assert_fail@plt+0x1f00>
   13610:	mov	r2, r7
   13614:	mov	r1, r6
   13618:	mov	r0, r6
   1361c:	bl	11688 <__gmpz_mod@plt>
   13620:	add	r1, sp, #68	; 0x44
   13624:	mov	r2, r7
   13628:	mov	r0, r1
   1362c:	bl	11688 <__gmpz_mod@plt>
   13630:	add	r1, sp, #80	; 0x50
   13634:	mov	r2, r7
   13638:	mov	r0, r1
   1363c:	bl	11688 <__gmpz_mod@plt>
   13640:	b	1339c <__assert_fail@plt+0x1c48>
   13644:	add	r1, sp, #104	; 0x68
   13648:	ldr	r0, [sp, #40]	; 0x28
   1364c:	bl	12454 <__assert_fail@plt+0xd00>
   13650:	b	135d8 <__assert_fail@plt+0x1e84>
   13654:	mov	r1, r7
   13658:	ldr	r0, [sp, #40]	; 0x28
   1365c:	bl	12454 <__assert_fail@plt+0xd00>
   13660:	mov	ip, #0
   13664:	add	r0, sp, #80	; 0x50
   13668:	str	r6, [sp]
   1366c:	add	r3, sp, #68	; 0x44
   13670:	add	r2, sp, #104	; 0x68
   13674:	add	r1, sp, #116	; 0x74
   13678:	stmib	sp, {r0, ip}
   1367c:	add	r0, sp, #92	; 0x5c
   13680:	bl	113ac <__gmpz_clears@plt>
   13684:	add	sp, sp, #132	; 0x84
   13688:	ldrd	r4, [sp]
   1368c:	ldrd	r6, [sp, #8]
   13690:	ldrd	r8, [sp, #16]
   13694:	ldrd	sl, [sp, #24]
   13698:	add	sp, sp, #32
   1369c:	pop	{pc}		; (ldr pc, [sp], #4)
   136a0:	ldr	r3, [sp, #48]	; 0x30
   136a4:	mov	r2, #43	; 0x2b
   136a8:	mov	r1, #1
   136ac:	ldr	r0, [sp, #52]	; 0x34
   136b0:	ldr	r3, [r3]
   136b4:	bl	114d8 <fwrite@plt>
   136b8:	b	135c8 <__assert_fail@plt+0x1e74>
   136bc:	movw	r3, #25048	; 0x61d8
   136c0:	movt	r3, #3
   136c4:	movw	r2, #18036	; 0x4674
   136c8:	movt	r2, #2
   136cc:	ldr	r0, [r3]
   136d0:	mov	r1, #1
   136d4:	mov	r3, r8
   136d8:	bl	1164c <__fprintf_chk@plt>
   136dc:	b	13320 <__assert_fail@plt+0x1bcc>
   136e0:	ldr	r2, [r0, #4]
   136e4:	mov	r3, #0
   136e8:	str	r3, [r1]
   136ec:	str	r3, [r1, #4]
   136f0:	str	r3, [r1, #8]
   136f4:	cmp	r2, r3
   136f8:	bxeq	lr
   136fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13700:	mov	r4, r0
   13704:	strd	r6, [sp, #8]
   13708:	mov	r7, r1
   1370c:	strd	r8, [sp, #16]
   13710:	movw	r9, #25068	; 0x61ec
   13714:	movt	r9, #3
   13718:	ldrb	r3, [r9, #8]
   1371c:	str	sl, [sp, #24]
   13720:	str	lr, [sp, #28]
   13724:	sub	sp, sp, #24
   13728:	cmp	r3, #0
   1372c:	bne	13898 <__assert_fail@plt+0x2144>
   13730:	mov	r0, sp
   13734:	bl	11718 <__gmpz_init@plt>
   13738:	mov	r1, #0
   1373c:	mov	r0, r4
   13740:	bl	11364 <__gmpz_scan1@plt>
   13744:	mov	r5, r0
   13748:	mov	r2, r0
   1374c:	mov	r1, r4
   13750:	mov	r0, r4
   13754:	bl	114f0 <__gmpz_fdiv_q_2exp@plt>
   13758:	cmp	r5, #0
   1375c:	beq	13788 <__assert_fail@plt+0x2034>
   13760:	mov	r1, #2
   13764:	add	r0, sp, #12
   13768:	bl	11694 <__gmpz_init_set_ui@plt>
   1376c:	add	r1, sp, #12
   13770:	mov	r0, r7
   13774:	bl	12454 <__assert_fail@plt+0xd00>
   13778:	add	r0, sp, #12
   1377c:	bl	115d4 <__gmpz_clear@plt>
   13780:	subs	r5, r5, #1
   13784:	bne	13760 <__assert_fail@plt+0x200c>
   13788:	movw	r8, #5408	; 0x1520
   1378c:	movt	r8, #2
   13790:	mov	r6, #1
   13794:	mov	r5, #3
   13798:	movw	sl, #669	; 0x29d
   1379c:	b	137c4 <__assert_fail@plt+0x2070>
   137a0:	ldrb	r3, [r3, #32]
   137a4:	add	r6, r6, #1
   137a8:	add	r5, r5, r3
   137ac:	mul	r1, r5, r5
   137b0:	bl	1170c <__gmpz_cmp_ui@plt>
   137b4:	cmp	r0, #0
   137b8:	blt	13814 <__assert_fail@plt+0x20c0>
   137bc:	cmp	r6, sl
   137c0:	beq	13814 <__assert_fail@plt+0x20c0>
   137c4:	mov	r1, r5
   137c8:	mov	r0, r4
   137cc:	bl	115c8 <__gmpz_divisible_ui_p@plt>
   137d0:	cmp	r0, #0
   137d4:	add	r3, r8, r6
   137d8:	mov	r0, r4
   137dc:	beq	137a0 <__assert_fail@plt+0x204c>
   137e0:	mov	r2, r5
   137e4:	mov	r1, r4
   137e8:	bl	11490 <__gmpz_tdiv_q_ui@plt>
   137ec:	mov	r1, r5
   137f0:	add	r0, sp, #12
   137f4:	bl	11694 <__gmpz_init_set_ui@plt>
   137f8:	add	r1, sp, #12
   137fc:	mov	r0, r7
   13800:	bl	12454 <__assert_fail@plt+0xd00>
   13804:	add	r0, sp, #12
   13808:	bl	115d4 <__gmpz_clear@plt>
   1380c:	cmp	r6, sl
   13810:	bne	137c4 <__assert_fail@plt+0x2070>
   13814:	mov	r0, sp
   13818:	bl	115d4 <__gmpz_clear@plt>
   1381c:	mov	r1, #1
   13820:	mov	r0, r4
   13824:	bl	1170c <__gmpz_cmp_ui@plt>
   13828:	cmp	r0, #0
   1382c:	beq	1387c <__assert_fail@plt+0x2128>
   13830:	ldrb	r3, [r9, #8]
   13834:	cmp	r3, #0
   13838:	bne	138cc <__assert_fail@plt+0x2178>
   1383c:	cmp	r0, #0
   13840:	ble	1386c <__assert_fail@plt+0x2118>
   13844:	movw	r1, #60793	; 0xed79
   13848:	movt	r1, #381	; 0x17d
   1384c:	mov	r0, r4
   13850:	bl	1170c <__gmpz_cmp_ui@plt>
   13854:	cmp	r0, #0
   13858:	blt	138bc <__assert_fail@plt+0x2168>
   1385c:	mov	r0, r4
   13860:	bl	138fc <__assert_fail@plt+0x21a8>
   13864:	cmp	r0, #0
   13868:	bne	138bc <__assert_fail@plt+0x2168>
   1386c:	mov	r2, r7
   13870:	mov	r0, r4
   13874:	mov	r1, #1
   13878:	bl	132e8 <__assert_fail@plt+0x1b94>
   1387c:	add	sp, sp, #24
   13880:	ldrd	r4, [sp]
   13884:	ldrd	r6, [sp, #8]
   13888:	ldrd	r8, [sp, #16]
   1388c:	ldr	sl, [sp, #24]
   13890:	add	sp, sp, #28
   13894:	pop	{pc}		; (ldr pc, [sp], #4)
   13898:	movw	r3, #25048	; 0x61d8
   1389c:	movt	r3, #3
   138a0:	movw	r0, #18104	; 0x46b8
   138a4:	movt	r0, #2
   138a8:	ldr	r3, [r3]
   138ac:	mov	r2, #17
   138b0:	mov	r1, #1
   138b4:	bl	114d8 <fwrite@plt>
   138b8:	b	13730 <__assert_fail@plt+0x1fdc>
   138bc:	mov	r1, r4
   138c0:	mov	r0, r7
   138c4:	bl	12454 <__assert_fail@plt+0xd00>
   138c8:	b	1387c <__assert_fail@plt+0x2128>
   138cc:	movw	r3, #25048	; 0x61d8
   138d0:	movt	r3, #3
   138d4:	mov	r2, #19
   138d8:	mov	r1, #1
   138dc:	ldr	r3, [r3]
   138e0:	movw	r0, #18124	; 0x46cc
   138e4:	movt	r0, #2
   138e8:	bl	114d8 <fwrite@plt>
   138ec:	mov	r1, #1
   138f0:	mov	r0, r4
   138f4:	bl	1170c <__gmpz_cmp_ui@plt>
   138f8:	b	1383c <__assert_fail@plt+0x20e8>
   138fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13900:	mov	r4, #0
   13904:	strd	r6, [sp, #8]
   13908:	mov	r6, r0
   1390c:	strd	r8, [sp, #16]
   13910:	str	lr, [sp, #24]
   13914:	sub	sp, sp, #76	; 0x4c
   13918:	add	r3, sp, #48	; 0x30
   1391c:	add	r2, sp, #36	; 0x24
   13920:	add	r1, sp, #24
   13924:	add	r0, sp, #12
   13928:	str	r4, [sp]
   1392c:	bl	11460 <__gmpz_inits@plt>
   13930:	mov	r2, #1
   13934:	mov	r1, r6
   13938:	add	r0, sp, #36	; 0x24
   1393c:	bl	113a0 <__gmpz_sub_ui@plt>
   13940:	mov	r1, r4
   13944:	add	r0, sp, #36	; 0x24
   13948:	bl	11364 <__gmpz_scan1@plt>
   1394c:	mov	r2, r0
   13950:	add	r1, sp, #36	; 0x24
   13954:	mov	r7, r0
   13958:	add	r0, sp, #12
   1395c:	bl	1161c <__gmpz_tdiv_q_2exp@plt>
   13960:	add	r0, sp, #24
   13964:	mov	r1, #2
   13968:	bl	113d0 <__gmpz_set_ui@plt>
   1396c:	mov	r3, r6
   13970:	add	r2, sp, #12
   13974:	add	r1, sp, #24
   13978:	add	r0, sp, #48	; 0x30
   1397c:	bl	1143c <__gmpz_powm@plt>
   13980:	add	r0, sp, #48	; 0x30
   13984:	mov	r1, #1
   13988:	bl	1170c <__gmpz_cmp_ui@plt>
   1398c:	cmp	r0, r4
   13990:	beq	13a00 <__assert_fail@plt+0x22ac>
   13994:	add	r1, sp, #36	; 0x24
   13998:	add	r0, sp, #48	; 0x30
   1399c:	bl	116a0 <__gmpz_cmp@plt>
   139a0:	cmp	r0, r4
   139a4:	beq	13a00 <__assert_fail@plt+0x22ac>
   139a8:	cmp	r7, #1
   139ac:	movhi	r4, #1
   139b0:	bhi	139d8 <__assert_fail@plt+0x2284>
   139b4:	b	13bf0 <__assert_fail@plt+0x249c>
   139b8:	mov	r1, #1
   139bc:	add	r0, sp, #48	; 0x30
   139c0:	bl	1170c <__gmpz_cmp_ui@plt>
   139c4:	cmp	r0, #0
   139c8:	beq	13bf0 <__assert_fail@plt+0x249c>
   139cc:	add	r4, r4, #1
   139d0:	cmp	r7, r4
   139d4:	beq	13bf0 <__assert_fail@plt+0x249c>
   139d8:	add	r1, sp, #48	; 0x30
   139dc:	mov	r3, r6
   139e0:	mov	r0, r1
   139e4:	mov	r2, #2
   139e8:	bl	11724 <__gmpz_powm_ui@plt>
   139ec:	add	r1, sp, #36	; 0x24
   139f0:	add	r0, sp, #48	; 0x30
   139f4:	bl	116a0 <__gmpz_cmp@plt>
   139f8:	cmp	r0, #0
   139fc:	bne	139b8 <__assert_fail@plt+0x2264>
   13a00:	ldr	r8, [pc, #496]	; 13bf8 <__assert_fail@plt+0x24a4>
   13a04:	add	r1, sp, #36	; 0x24
   13a08:	add	r0, sp, #48	; 0x30
   13a0c:	bl	1146c <__gmpz_set@plt>
   13a10:	add	r1, sp, #60	; 0x3c
   13a14:	add	r0, sp, #48	; 0x30
   13a18:	bl	136e0 <__assert_fail@plt+0x1f8c>
   13a1c:	add	r9, r8, #668	; 0x29c
   13a20:	ldr	r3, [sp, #68]	; 0x44
   13a24:	cmp	r3, #0
   13a28:	beq	13ba4 <__assert_fail@plt+0x2450>
   13a2c:	mov	r5, #0
   13a30:	mov	r4, r5
   13a34:	ldr	r2, [sp, #60]	; 0x3c
   13a38:	add	r1, sp, #36	; 0x24
   13a3c:	add	r0, sp, #48	; 0x30
   13a40:	add	r4, r4, #1
   13a44:	add	r2, r2, r5
   13a48:	bl	11454 <__gmpz_divexact@plt>
   13a4c:	add	r2, sp, #48	; 0x30
   13a50:	mov	r3, r6
   13a54:	mov	r0, r2
   13a58:	add	r1, sp, #24
   13a5c:	bl	1143c <__gmpz_powm@plt>
   13a60:	mov	r1, #1
   13a64:	add	r0, sp, #48	; 0x30
   13a68:	bl	1170c <__gmpz_cmp_ui@plt>
   13a6c:	ldr	r3, [sp, #68]	; 0x44
   13a70:	cmp	r4, r3
   13a74:	bcs	13b58 <__assert_fail@plt+0x2404>
   13a78:	cmp	r0, #0
   13a7c:	add	r5, r5, #12
   13a80:	bne	13a34 <__assert_fail@plt+0x22e0>
   13a84:	add	r1, sp, #24
   13a88:	ldrb	r2, [r8], #1
   13a8c:	mov	r0, r1
   13a90:	bl	11568 <__gmpz_add_ui@plt>
   13a94:	mov	r3, r6
   13a98:	add	r2, sp, #12
   13a9c:	add	r1, sp, #24
   13aa0:	add	r0, sp, #48	; 0x30
   13aa4:	bl	1143c <__gmpz_powm@plt>
   13aa8:	mov	r1, #1
   13aac:	add	r0, sp, #48	; 0x30
   13ab0:	bl	1170c <__gmpz_cmp_ui@plt>
   13ab4:	cmp	r0, #0
   13ab8:	beq	13b28 <__assert_fail@plt+0x23d4>
   13abc:	add	r1, sp, #36	; 0x24
   13ac0:	add	r0, sp, #48	; 0x30
   13ac4:	bl	116a0 <__gmpz_cmp@plt>
   13ac8:	cmp	r0, #0
   13acc:	beq	13b28 <__assert_fail@plt+0x23d4>
   13ad0:	cmp	r7, #1
   13ad4:	bls	13b68 <__assert_fail@plt+0x2414>
   13ad8:	mov	r4, #1
   13adc:	b	13b00 <__assert_fail@plt+0x23ac>
   13ae0:	mov	r1, #1
   13ae4:	add	r0, sp, #48	; 0x30
   13ae8:	bl	1170c <__gmpz_cmp_ui@plt>
   13aec:	cmp	r0, #0
   13af0:	beq	13b68 <__assert_fail@plt+0x2414>
   13af4:	add	r4, r4, #1
   13af8:	cmp	r7, r4
   13afc:	beq	13b68 <__assert_fail@plt+0x2414>
   13b00:	add	r1, sp, #48	; 0x30
   13b04:	mov	r3, r6
   13b08:	mov	r0, r1
   13b0c:	mov	r2, #2
   13b10:	bl	11724 <__gmpz_powm_ui@plt>
   13b14:	add	r1, sp, #36	; 0x24
   13b18:	add	r0, sp, #48	; 0x30
   13b1c:	bl	116a0 <__gmpz_cmp@plt>
   13b20:	cmp	r0, #0
   13b24:	bne	13ae0 <__assert_fail@plt+0x238c>
   13b28:	cmp	r9, r8
   13b2c:	bne	13a20 <__assert_fail@plt+0x22cc>
   13b30:	mov	r2, #5
   13b34:	movw	r1, #18144	; 0x46e0
   13b38:	movt	r1, #2
   13b3c:	mov	r0, #0
   13b40:	bl	11430 <dcgettext@plt>
   13b44:	mov	r1, #0
   13b48:	mov	r2, r0
   13b4c:	mov	r0, r1
   13b50:	bl	11520 <error@plt>
   13b54:	bl	11748 <abort@plt>
   13b58:	cmp	r0, #0
   13b5c:	beq	13a84 <__assert_fail@plt+0x2330>
   13b60:	mov	r6, #1
   13b64:	b	13b70 <__assert_fail@plt+0x241c>
   13b68:	ldr	r3, [sp, #68]	; 0x44
   13b6c:	mov	r6, #0
   13b70:	cmp	r3, #0
   13b74:	beq	13ba8 <__assert_fail@plt+0x2454>
   13b78:	mov	r4, #0
   13b7c:	mov	r5, r4
   13b80:	ldr	r0, [sp, #60]	; 0x3c
   13b84:	add	r5, r5, #1
   13b88:	add	r0, r0, r4
   13b8c:	add	r4, r4, #12
   13b90:	bl	115d4 <__gmpz_clear@plt>
   13b94:	ldr	r3, [sp, #68]	; 0x44
   13b98:	cmp	r5, r3
   13b9c:	bcc	13b80 <__assert_fail@plt+0x242c>
   13ba0:	b	13ba8 <__assert_fail@plt+0x2454>
   13ba4:	mov	r6, #1
   13ba8:	ldr	r0, [sp, #60]	; 0x3c
   13bac:	bl	18d2c <__assert_fail@plt+0x75d8>
   13bb0:	ldr	r0, [sp, #64]	; 0x40
   13bb4:	bl	18d2c <__assert_fail@plt+0x75d8>
   13bb8:	mov	ip, #0
   13bbc:	add	r0, sp, #12
   13bc0:	add	r3, sp, #48	; 0x30
   13bc4:	add	r2, sp, #36	; 0x24
   13bc8:	add	r1, sp, #24
   13bcc:	str	ip, [sp]
   13bd0:	bl	113ac <__gmpz_clears@plt>
   13bd4:	mov	r0, r6
   13bd8:	add	sp, sp, #76	; 0x4c
   13bdc:	ldrd	r4, [sp]
   13be0:	ldrd	r6, [sp, #8]
   13be4:	ldrd	r8, [sp, #16]
   13be8:	add	sp, sp, #24
   13bec:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf0:	mov	r6, #0
   13bf4:	b	13bb8 <__assert_fail@plt+0x2464>
   13bf8:	andeq	r1, r2, r0, asr #10
   13bfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c00:	ldrd	r4, [r3]
   13c04:	strd	r6, [sp, #8]
   13c08:	strd	r8, [sp, #16]
   13c0c:	strd	sl, [sp, #24]
   13c10:	str	lr, [sp, #32]
   13c14:	sub	sp, sp, #364	; 0x16c
   13c18:	mov	lr, r2
   13c1c:	ldrd	r8, [r3, #8]
   13c20:	add	r3, sp, #400	; 0x190
   13c24:	mov	r2, #0
   13c28:	str	r5, [sp, #304]	; 0x130
   13c2c:	ldr	ip, [sp, #408]	; 0x198
   13c30:	strd	r4, [sp, #192]	; 0xc0
   13c34:	ldrd	r4, [r3]
   13c38:	add	r3, sp, #288	; 0x120
   13c3c:	str	r0, [sp, #352]	; 0x160
   13c40:	add	r0, sp, #336	; 0x150
   13c44:	str	r2, [sp, #200]	; 0xc8
   13c48:	mov	r2, #64	; 0x40
   13c4c:	strd	r8, [sp, #72]	; 0x48
   13c50:	str	r2, [sp, #296]	; 0x128
   13c54:	rsbs	r4, r4, #0
   13c58:	ldr	r7, [r1]
   13c5c:	rsc	r5, r5, #0
   13c60:	str	r9, [sp, #308]	; 0x134
   13c64:	ldr	r8, [r1, #4]
   13c68:	strd	r4, [r3]
   13c6c:	ldr	r3, [lr]
   13c70:	str	lr, [sp, #356]	; 0x164
   13c74:	str	r3, [sp, #204]	; 0xcc
   13c78:	ldrd	r2, [ip]
   13c7c:	strd	r2, [r0]
   13c80:	ldr	r3, [lr, #4]
   13c84:	str	r3, [sp, #300]	; 0x12c
   13c88:	ldrd	r2, [r1, #8]
   13c8c:	add	r1, sp, #328	; 0x148
   13c90:	strd	r2, [sp, #48]	; 0x30
   13c94:	ldrd	r2, [ip, #8]
   13c98:	strd	r2, [r1]
   13c9c:	b	142f4 <__assert_fail@plt+0x2ba0>
   13ca0:	adds	r2, sl, #0
   13ca4:	str	r2, [sp, #320]	; 0x140
   13ca8:	adc	r2, fp, #1
   13cac:	str	r2, [sp, #324]	; 0x144
   13cb0:	add	r2, sp, #288	; 0x120
   13cb4:	ldrd	r4, [sp, #88]	; 0x58
   13cb8:	mov	lr, r0
   13cbc:	ldrd	r6, [r2]
   13cc0:	ldr	r8, [sp, #280]	; 0x118
   13cc4:	umull	r0, r1, r8, r6
   13cc8:	mul	r2, r8, r7
   13ccc:	mov	r8, r5
   13cd0:	mov	r5, #0
   13cd4:	str	r8, [sp, #56]	; 0x38
   13cd8:	str	r5, [sp, #60]	; 0x3c
   13cdc:	ldrd	r8, [sp, #56]	; 0x38
   13ce0:	ldr	r5, [sp, #284]	; 0x11c
   13ce4:	adds	lr, r9, lr
   13ce8:	str	r9, [sp, #104]	; 0x68
   13cec:	str	lr, [sp, #128]	; 0x80
   13cf0:	adc	lr, r4, r9
   13cf4:	mla	r2, r6, r5, r2
   13cf8:	ldrd	r6, [sp, #192]	; 0xc0
   13cfc:	str	lr, [sp, #132]	; 0x84
   13d00:	mov	lr, r9
   13d04:	ldr	r9, [sp, #304]	; 0x130
   13d08:	add	r2, r2, r1
   13d0c:	umull	r4, r5, r2, r6
   13d10:	umull	r6, r7, r0, r6
   13d14:	umull	sl, fp, r9, r0
   13d18:	mov	r6, r7
   13d1c:	adds	r8, sl, r4
   13d20:	adc	r7, fp, r5
   13d24:	adds	r6, r6, r8
   13d28:	umull	r8, r9, r2, r9
   13d2c:	adc	r1, lr, r7
   13d30:	mov	r7, #0
   13d34:	str	r6, [sp, #136]	; 0x88
   13d38:	mov	r6, r0
   13d3c:	strd	r8, [sp, #120]	; 0x78
   13d40:	str	r1, [sp, #140]	; 0x8c
   13d44:	ldrd	r0, [sp, #136]	; 0x88
   13d48:	cmp	r5, r1
   13d4c:	cmpeq	r4, r0
   13d50:	bls	13d68 <__assert_fail@plt+0x2614>
   13d54:	adds	r1, r8, r7
   13d58:	str	r1, [sp, #120]	; 0x78
   13d5c:	ldr	r1, [sp, #124]	; 0x7c
   13d60:	adc	r1, r1, #1
   13d64:	str	r1, [sp, #124]	; 0x7c
   13d68:	ldrd	r4, [sp, #72]	; 0x48
   13d6c:	mov	fp, #0
   13d70:	ldr	sl, [sp, #308]	; 0x134
   13d74:	umull	r0, r1, r2, r4
   13d78:	umull	r8, r9, r6, sl
   13d7c:	mla	r1, lr, r4, r1
   13d80:	strd	r8, [sp, #104]	; 0x68
   13d84:	umull	r8, r9, r6, r4
   13d88:	ldr	r6, [sp, #108]	; 0x6c
   13d8c:	strd	r8, [sp, #232]	; 0xe8
   13d90:	ldr	r5, [sp, #236]	; 0xec
   13d94:	mla	r6, sl, r7, r6
   13d98:	str	r6, [sp, #108]	; 0x6c
   13d9c:	mla	r7, r7, r4, r5
   13da0:	ldrd	r8, [sp, #104]	; 0x68
   13da4:	adds	r4, r8, r0
   13da8:	adc	r5, r9, r1
   13dac:	adds	r4, r7, r4
   13db0:	umull	r8, r9, r2, sl
   13db4:	adc	r2, fp, r5
   13db8:	str	r4, [sp, #144]	; 0x90
   13dbc:	strd	r8, [sp, #112]	; 0x70
   13dc0:	str	r2, [sp, #148]	; 0x94
   13dc4:	ldr	r2, [sp, #140]	; 0x8c
   13dc8:	ldrd	r4, [sp, #144]	; 0x90
   13dcc:	cmp	r1, r5
   13dd0:	mla	r1, sl, lr, r9
   13dd4:	cmpeq	r0, r4
   13dd8:	str	r1, [sp, #116]	; 0x74
   13ddc:	bls	13df8 <__assert_fail@plt+0x26a4>
   13de0:	ldr	r1, [sp, #112]	; 0x70
   13de4:	adds	r1, r1, fp
   13de8:	str	r1, [sp, #112]	; 0x70
   13dec:	ldr	r1, [sp, #116]	; 0x74
   13df0:	adc	r1, r1, #1
   13df4:	str	r1, [sp, #116]	; 0x74
   13df8:	mov	r0, #0
   13dfc:	ldrd	r4, [sp, #128]	; 0x80
   13e00:	ldr	r6, [sp, #232]	; 0xe8
   13e04:	str	r0, [sp, #316]	; 0x13c
   13e08:	ldr	lr, [sp, #280]	; 0x118
   13e0c:	ldrd	r8, [sp, #216]	; 0xd8
   13e10:	adds	r1, r0, r6
   13e14:	ldrd	r6, [sp, #144]	; 0x90
   13e18:	str	r1, [sp, #240]	; 0xf0
   13e1c:	adc	r1, r6, r0
   13e20:	str	r1, [sp, #244]	; 0xf4
   13e24:	ldr	r1, [sp, #284]	; 0x11c
   13e28:	orrs	r1, lr, r1
   13e2c:	mov	lr, r0
   13e30:	movne	r1, #1
   13e34:	moveq	r1, r0
   13e38:	adds	r4, r4, r1
   13e3c:	mov	r1, r7
   13e40:	ldrd	r6, [sp, #120]	; 0x78
   13e44:	adc	r5, r5, #0
   13e48:	adds	r2, r2, r4
   13e4c:	adc	fp, fp, r5
   13e50:	str	r1, [sp, #280]	; 0x118
   13e54:	adds	r2, r2, r6
   13e58:	str	r2, [sp, #248]	; 0xf8
   13e5c:	adc	r2, fp, r7
   13e60:	str	r2, [sp, #252]	; 0xfc
   13e64:	ldrd	r6, [sp, #248]	; 0xf8
   13e68:	cmp	r5, r7
   13e6c:	cmpeq	r4, r6
   13e70:	movhi	r2, #1
   13e74:	movls	r2, r0
   13e78:	adds	r4, r8, r6
   13e7c:	adcs	r5, r9, r7
   13e80:	ldrd	r8, [sp, #240]	; 0xf0
   13e84:	movcs	lr, #1
   13e88:	str	r2, [sp, #284]	; 0x11c
   13e8c:	adds	r6, r8, r4
   13e90:	adcs	r7, r9, r5
   13e94:	ldrd	r8, [sp, #88]	; 0x58
   13e98:	ldrd	r4, [sp, #224]	; 0xe0
   13e9c:	strd	r6, [sp, #232]	; 0xe8
   13ea0:	movcs	r6, #1
   13ea4:	movcc	r6, #0
   13ea8:	cmp	r5, r9
   13eac:	cmpeq	r4, r8
   13eb0:	ldr	r8, [sp, #200]	; 0xc8
   13eb4:	mov	r9, r8
   13eb8:	bls	13ed4 <__assert_fail@plt+0x2780>
   13ebc:	ldr	r2, [sp, #64]	; 0x40
   13ec0:	adds	r2, r2, #0
   13ec4:	str	r2, [sp, #64]	; 0x40
   13ec8:	ldr	r2, [sp, #68]	; 0x44
   13ecc:	adc	r2, r2, #1
   13ed0:	str	r2, [sp, #68]	; 0x44
   13ed4:	ldr	r2, [sp, #312]	; 0x138
   13ed8:	umull	r4, r5, r3, r3
   13edc:	mov	sl, #0
   13ee0:	mul	fp, ip, sl
   13ee4:	strd	r4, [sp, #104]	; 0x68
   13ee8:	ldr	r5, [sp, #108]	; 0x6c
   13eec:	mul	r7, ip, r2
   13ef0:	mul	r1, r3, r2
   13ef4:	mla	r7, r3, sl, r7
   13ef8:	umull	r2, r3, ip, r3
   13efc:	add	r1, r5, r1, lsl #1
   13f00:	umull	r4, r5, ip, ip
   13f04:	add	r3, r7, r3
   13f08:	adds	ip, r2, r2
   13f0c:	adc	r7, r3, r3
   13f10:	adds	r1, r1, ip
   13f14:	str	r1, [sp, #96]	; 0x60
   13f18:	adc	r1, sl, r7
   13f1c:	strd	r4, [sp, #120]	; 0x78
   13f20:	str	r1, [sp, #100]	; 0x64
   13f24:	add	r1, r5, fp, lsl #1
   13f28:	ldrd	r4, [sp, #96]	; 0x60
   13f2c:	str	r1, [sp, #124]	; 0x7c
   13f30:	cmp	r3, r5
   13f34:	cmpeq	r2, r4
   13f38:	bls	13f50 <__assert_fail@plt+0x27fc>
   13f3c:	ldr	r3, [sp, #120]	; 0x78
   13f40:	adds	r3, r3, sl
   13f44:	str	r3, [sp, #120]	; 0x78
   13f48:	adc	r3, r1, #1
   13f4c:	str	r3, [sp, #124]	; 0x7c
   13f50:	mov	r2, #0
   13f54:	ldrd	sl, [sp, #56]	; 0x38
   13f58:	mov	ip, r2
   13f5c:	ldr	r4, [sp, #104]	; 0x68
   13f60:	adds	r3, r2, r4
   13f64:	str	r3, [sp, #152]	; 0x98
   13f68:	ldr	r3, [sp, #96]	; 0x60
   13f6c:	adc	r3, r3, r2
   13f70:	str	r3, [sp, #156]	; 0x9c
   13f74:	ldrd	r4, [sp, #152]	; 0x98
   13f78:	adds	r3, sl, r4
   13f7c:	ldr	r4, [sp, #280]	; 0x118
   13f80:	adc	r1, fp, r5
   13f84:	ldrd	sl, [sp, #232]	; 0xe8
   13f88:	adds	r3, r3, r4
   13f8c:	ldrd	r4, [sp, #128]	; 0x80
   13f90:	adc	r0, r1, r0
   13f94:	ldr	r1, [sp, #320]	; 0x140
   13f98:	adds	r3, r3, r1
   13f9c:	ldr	r1, [sp, #324]	; 0x144
   13fa0:	adc	r0, r0, r1
   13fa4:	ldr	r1, [sp, #284]	; 0x11c
   13fa8:	adds	r3, r3, r1
   13fac:	ldr	r1, [sp, #316]	; 0x13c
   13fb0:	adc	r0, r0, r1
   13fb4:	adds	r3, r3, lr
   13fb8:	ldr	lr, [sp, #200]	; 0xc8
   13fbc:	adc	r0, r0, r9
   13fc0:	adds	r6, r3, r6
   13fc4:	adc	r8, r0, r8
   13fc8:	adds	r0, r4, sl
   13fcc:	ldr	r3, [sp, #100]	; 0x64
   13fd0:	adcs	r1, r5, fp
   13fd4:	movcs	ip, #1
   13fd8:	strd	r0, [sp, #104]	; 0x68
   13fdc:	add	r1, sp, #288	; 0x120
   13fe0:	ldrd	r4, [r1]
   13fe4:	str	r3, [sp, #224]	; 0xe0
   13fe8:	ldrd	r0, [sp, #56]	; 0x38
   13fec:	ldrd	sl, [sp, #104]	; 0x68
   13ff0:	adds	r0, r0, ip
   13ff4:	ldr	ip, [sp, #64]	; 0x40
   13ff8:	adc	r1, r1, #0
   13ffc:	mul	r3, sl, r5
   14000:	umull	sl, fp, sl, r4
   14004:	adds	ip, r0, ip
   14008:	str	ip, [sp, #256]	; 0x100
   1400c:	ldr	ip, [sp, #68]	; 0x44
   14010:	adc	r1, r1, ip
   14014:	str	r1, [sp, #260]	; 0x104
   14018:	ldrd	r0, [sp, #112]	; 0x70
   1401c:	adds	ip, r0, r6
   14020:	adc	r1, r1, r8
   14024:	str	ip, [sp, #160]	; 0xa0
   14028:	ldr	ip, [sp, #108]	; 0x6c
   1402c:	str	r1, [sp, #164]	; 0xa4
   14030:	ldrd	r0, [sp, #152]	; 0x98
   14034:	mla	r3, r4, ip, r3
   14038:	ldrd	r4, [sp, #160]	; 0xa0
   1403c:	add	r3, r3, fp
   14040:	cmp	r1, r5
   14044:	cmpeq	r0, r4
   14048:	ldrd	r4, [sp, #192]	; 0xc0
   1404c:	movhi	r1, #1
   14050:	movls	r1, #0
   14054:	str	r1, [sp, #232]	; 0xe8
   14058:	mov	ip, r4
   1405c:	umull	r0, r1, r4, r3
   14060:	umull	r4, r5, ip, sl
   14064:	ldr	r4, [sp, #304]	; 0x130
   14068:	mov	ip, #0
   1406c:	mla	r1, ip, r3, r1
   14070:	mla	r6, ip, sl, r5
   14074:	mov	ip, sl
   14078:	umull	r8, r9, r4, sl
   1407c:	umull	sl, fp, r4, r3
   14080:	adds	r4, r8, r0
   14084:	adc	r5, r9, r1
   14088:	adds	r4, r6, r4
   1408c:	strd	sl, [sp, #56]	; 0x38
   14090:	str	r4, [sp, #168]	; 0xa8
   14094:	adc	r4, lr, r5
   14098:	str	r4, [sp, #172]	; 0xac
   1409c:	ldrd	r4, [sp, #168]	; 0xa8
   140a0:	cmp	r1, r5
   140a4:	cmpeq	r0, r4
   140a8:	bls	140c0 <__assert_fail@plt+0x296c>
   140ac:	adds	r1, sl, #0
   140b0:	str	r1, [sp, #56]	; 0x38
   140b4:	ldr	r1, [sp, #60]	; 0x3c
   140b8:	adc	r1, r1, #1
   140bc:	str	r1, [sp, #60]	; 0x3c
   140c0:	ldrd	r4, [sp, #72]	; 0x48
   140c4:	mov	sl, #0
   140c8:	umull	r0, r1, r4, r3
   140cc:	umull	r4, r5, r4, ip
   140d0:	mla	r1, r3, sl, r1
   140d4:	mov	r8, r4
   140d8:	ldr	r4, [sp, #308]	; 0x134
   140dc:	mov	r9, r5
   140e0:	strd	r8, [sp, #112]	; 0x70
   140e4:	umull	r6, r7, r4, ip
   140e8:	mla	ip, ip, sl, r9
   140ec:	umull	r4, r5, r4, r3
   140f0:	adds	r6, r6, r0
   140f4:	adc	r7, r7, r1
   140f8:	adds	ip, ip, r6
   140fc:	adc	r3, sl, r7
   14100:	strd	r4, [sp, #64]	; 0x40
   14104:	str	ip, [sp, #176]	; 0xb0
   14108:	str	r3, [sp, #180]	; 0xb4
   1410c:	ldr	ip, [sp, #172]	; 0xac
   14110:	ldrd	r6, [sp, #176]	; 0xb0
   14114:	cmp	r1, r7
   14118:	cmpeq	r0, r6
   1411c:	bls	14134 <__assert_fail@plt+0x29e0>
   14120:	adds	r3, r4, sl
   14124:	str	r3, [sp, #64]	; 0x40
   14128:	ldr	r3, [sp, #68]	; 0x44
   1412c:	adc	r3, r3, #1
   14130:	str	r3, [sp, #68]	; 0x44
   14134:	ldr	r4, [sp, #112]	; 0x70
   14138:	mov	r3, #0
   1413c:	ldrd	r6, [sp, #176]	; 0xb0
   14140:	ldr	r0, [sp, #224]	; 0xe0
   14144:	adds	r9, r7, r0
   14148:	adc	r2, r3, r2
   1414c:	adds	r1, r3, r4
   14150:	str	r1, [sp, #264]	; 0x108
   14154:	adc	r1, r6, r3
   14158:	str	r1, [sp, #268]	; 0x10c
   1415c:	ldrd	r0, [sp, #104]	; 0x68
   14160:	mov	r4, r1
   14164:	mov	r1, r0
   14168:	orrs	r1, r4, r1
   1416c:	ldrd	r0, [sp, #160]	; 0xa0
   14170:	moveq	r4, r3
   14174:	movne	r4, #1
   14178:	adds	r0, r0, r4
   1417c:	ldrd	r4, [sp, #56]	; 0x38
   14180:	adc	r1, r1, #0
   14184:	adds	ip, ip, r0
   14188:	adc	sl, sl, r1
   1418c:	adds	ip, ip, r4
   14190:	str	ip, [sp, #184]	; 0xb8
   14194:	adc	ip, sl, r5
   14198:	str	ip, [sp, #188]	; 0xbc
   1419c:	add	ip, sp, #256	; 0x100
   141a0:	ldrd	r6, [ip]
   141a4:	add	ip, sp, #264	; 0x108
   141a8:	ldrd	sl, [sp, #184]	; 0xb8
   141ac:	adds	r4, r6, sl
   141b0:	adcs	r5, r7, fp
   141b4:	ldrd	r6, [ip]
   141b8:	movcs	r3, #1
   141bc:	adds	sl, r6, r4
   141c0:	ldr	r4, [sp, #232]	; 0xe8
   141c4:	adcs	fp, r7, r5
   141c8:	mov	r7, sl
   141cc:	movcs	ip, #1
   141d0:	movcc	ip, #0
   141d4:	mov	r8, fp
   141d8:	adds	r9, r9, r4
   141dc:	ldrd	r4, [sp, #120]	; 0x78
   141e0:	adc	r2, r2, lr
   141e4:	adds	lr, r9, r4
   141e8:	adc	r2, r2, r5
   141ec:	str	lr, [sp, #272]	; 0x110
   141f0:	mov	lr, r5
   141f4:	ldrd	r4, [sp, #184]	; 0xb8
   141f8:	str	r2, [sp, #276]	; 0x114
   141fc:	cmp	r1, r5
   14200:	add	r1, sp, #272	; 0x110
   14204:	cmpeq	r0, r4
   14208:	ldrd	r0, [r1]
   1420c:	movhi	r2, #1
   14210:	movls	r2, #0
   14214:	adds	r0, r0, r2
   14218:	adc	r1, r1, #0
   1421c:	adds	r0, r0, r3
   14220:	ldrd	r2, [sp, #64]	; 0x40
   14224:	adc	r1, r1, #0
   14228:	adds	r4, r0, ip
   1422c:	adc	r5, r1, #0
   14230:	adds	r1, r4, r2
   14234:	adc	r3, r5, r3
   14238:	str	r1, [sp, #48]	; 0x30
   1423c:	str	r3, [sp, #52]	; 0x34
   14240:	ldrd	r0, [sp, #48]	; 0x30
   14244:	ldrd	r2, [sp, #72]	; 0x48
   14248:	cmp	r3, r1
   1424c:	cmpeq	r2, r0
   14250:	bcc	14278 <__assert_fail@plt+0x2b24>
   14254:	ldrd	r0, [sp, #192]	; 0xc0
   14258:	moveq	r3, #1
   1425c:	movne	r3, #0
   14260:	cmp	r1, fp
   14264:	cmpeq	r0, sl
   14268:	movhi	r3, #0
   1426c:	andls	r3, r3, #1
   14270:	cmp	r3, #0
   14274:	beq	142bc <__assert_fail@plt+0x2b68>
   14278:	ldrd	r0, [sp, #192]	; 0xc0
   1427c:	ldr	r3, [sp, #200]	; 0xc8
   14280:	cmp	r1, fp
   14284:	cmpeq	r0, sl
   14288:	movhi	r2, #1
   1428c:	movls	r2, #0
   14290:	subs	r7, sl, r0
   14294:	sbc	r8, fp, r1
   14298:	ldrd	r0, [sp, #72]	; 0x48
   1429c:	adds	r2, r0, r2
   142a0:	adc	r3, r1, r3
   142a4:	ldr	r1, [sp, #48]	; 0x30
   142a8:	subs	r2, r1, r2
   142ac:	str	r2, [sp, #48]	; 0x30
   142b0:	ldr	r2, [sp, #52]	; 0x34
   142b4:	sbc	r3, r2, r3
   142b8:	str	r3, [sp, #52]	; 0x34
   142bc:	ldrd	r0, [sp, #48]	; 0x30
   142c0:	ldr	r2, [sp, #296]	; 0x128
   142c4:	ldr	r3, [sp, #204]	; 0xcc
   142c8:	subs	r2, r2, #1
   142cc:	str	r2, [sp, #296]	; 0x128
   142d0:	lsr	r3, r3, #1
   142d4:	ldr	r2, [sp, #352]	; 0x160
   142d8:	strd	r0, [r2]
   142dc:	ldr	r2, [sp, #300]	; 0x12c
   142e0:	orr	r3, r3, r2, lsl #31
   142e4:	str	r3, [sp, #204]	; 0xcc
   142e8:	lsr	r3, r2, #1
   142ec:	str	r3, [sp, #300]	; 0x12c
   142f0:	beq	1446c <__assert_fail@plt+0x2d18>
   142f4:	ldr	r3, [sp, #204]	; 0xcc
   142f8:	and	r3, r3, #1
   142fc:	str	r3, [sp, #208]	; 0xd0
   14300:	ldr	r3, [sp, #200]	; 0xc8
   14304:	str	r3, [sp, #212]	; 0xd4
   14308:	ldrd	r2, [sp, #208]	; 0xd0
   1430c:	orrs	r3, r2, r3
   14310:	bne	14408 <__assert_fail@plt+0x2cb4>
   14314:	ldrd	r2, [sp, #48]	; 0x30
   14318:	cmp	r2, #0
   1431c:	sbcs	r3, r3, #0
   14320:	blt	145d8 <__assert_fail@plt+0x2e84>
   14324:	ldrd	r2, [sp, #72]	; 0x48
   14328:	cmp	r2, #0
   1432c:	sbcs	r3, r3, #0
   14330:	blt	145f8 <__assert_fail@plt+0x2ea4>
   14334:	umull	r2, r3, r8, r7
   14338:	ldr	r1, [sp, #200]	; 0xc8
   1433c:	mov	r0, r7
   14340:	umull	sl, fp, r7, r7
   14344:	adds	r4, r2, r2
   14348:	adc	ip, r3, r3
   1434c:	adds	lr, fp, r4
   14350:	umull	r4, r5, r8, r8
   14354:	adc	r1, r1, ip
   14358:	str	lr, [sp, #80]	; 0x50
   1435c:	str	r1, [sp, #84]	; 0x54
   14360:	ldrd	r6, [sp, #80]	; 0x50
   14364:	cmp	r3, r7
   14368:	cmpeq	r2, r6
   1436c:	bls	14378 <__assert_fail@plt+0x2c24>
   14370:	adds	r4, r4, #0
   14374:	adc	r5, r5, #1
   14378:	ldrd	r6, [sp, #48]	; 0x30
   1437c:	mov	ip, #0
   14380:	ldr	r1, [sp, #84]	; 0x54
   14384:	str	ip, [sp, #312]	; 0x138
   14388:	umull	r2, r3, r0, r7
   1438c:	adds	r1, r1, r4
   14390:	adc	r4, ip, r5
   14394:	str	r1, [sp, #216]	; 0xd8
   14398:	umull	r0, r1, r0, r6
   1439c:	str	r4, [sp, #220]	; 0xdc
   143a0:	adds	r4, ip, sl
   143a4:	umull	sl, fp, r8, r7
   143a8:	strd	r2, [sp, #224]	; 0xe0
   143ac:	umull	r2, r3, r8, r6
   143b0:	ldrd	r8, [sp, #224]	; 0xe0
   143b4:	str	r4, [sp, #280]	; 0x118
   143b8:	ldr	r4, [sp, #80]	; 0x50
   143bc:	strd	sl, [sp, #64]	; 0x40
   143c0:	adc	r4, r4, ip
   143c4:	adds	r5, r8, r2
   143c8:	adc	r6, r9, r3
   143cc:	str	r4, [sp, #284]	; 0x11c
   143d0:	adds	r4, r1, r5
   143d4:	adc	lr, ip, r6
   143d8:	ldrd	r6, [sp, #48]	; 0x30
   143dc:	str	r4, [sp, #88]	; 0x58
   143e0:	str	lr, [sp, #92]	; 0x5c
   143e4:	ldrd	r4, [sp, #88]	; 0x58
   143e8:	mov	ip, r7
   143ec:	cmp	r3, r5
   143f0:	mov	r3, r6
   143f4:	cmpeq	r2, r4
   143f8:	bhi	13ca0 <__assert_fail@plt+0x254c>
   143fc:	str	sl, [sp, #320]	; 0x140
   14400:	str	fp, [sp, #324]	; 0x144
   14404:	b	13cb0 <__assert_fail@plt+0x255c>
   14408:	ldrd	r4, [sp, #48]	; 0x30
   1440c:	add	r3, sp, #328	; 0x148
   14410:	add	r1, sp, #336	; 0x150
   14414:	ldrd	r0, [r1]
   14418:	ldrd	r2, [r3]
   1441c:	ldr	r6, [sp, #352]	; 0x160
   14420:	strd	r4, [sp, #8]
   14424:	ldrd	r4, [sp, #72]	; 0x48
   14428:	strd	r0, [sp]
   1442c:	add	r1, sp, #400	; 0x190
   14430:	str	r7, [sp, #16]
   14434:	str	r8, [sp, #20]
   14438:	mov	r0, r6
   1443c:	strd	r4, [sp, #24]
   14440:	ldrd	r4, [sp, #192]	; 0xc0
   14444:	strd	r4, [sp, #32]
   14448:	ldrd	r4, [r1]
   1444c:	strd	r4, [sp, #40]	; 0x28
   14450:	bl	11b94 <__assert_fail@plt+0x440>
   14454:	add	r3, sp, #336	; 0x150
   14458:	strd	r0, [r3]
   1445c:	add	r1, sp, #328	; 0x148
   14460:	ldrd	r2, [r6]
   14464:	strd	r2, [r1]
   14468:	b	14314 <__assert_fail@plt+0x2bc0>
   1446c:	ldr	r3, [sp, #356]	; 0x164
   14470:	ldrd	r4, [r3, #8]
   14474:	orrs	r3, r4, r5
   14478:	beq	145a4 <__assert_fail@plt+0x2e50>
   1447c:	ldr	r6, [sp, #296]	; 0x128
   14480:	ldr	r9, [sp, #352]	; 0x160
   14484:	b	144ec <__assert_fail@plt+0x2d98>
   14488:	ldrd	r2, [sp, #48]	; 0x30
   1448c:	add	r1, sp, #400	; 0x190
   14490:	mov	r0, r9
   14494:	stm	sp, {r7, r8}
   14498:	ldrd	sl, [sp, #72]	; 0x48
   1449c:	strd	r2, [sp, #8]
   144a0:	str	r7, [sp, #16]
   144a4:	str	r8, [sp, #20]
   144a8:	strd	sl, [sp, #24]
   144ac:	ldrd	sl, [sp, #192]	; 0xc0
   144b0:	strd	sl, [sp, #32]
   144b4:	ldrd	sl, [r1]
   144b8:	strd	sl, [sp, #40]	; 0x28
   144bc:	bl	11b94 <__assert_fail@plt+0x440>
   144c0:	lsr	r3, r4, #1
   144c4:	mov	r7, r0
   144c8:	mov	r8, r1
   144cc:	ldrd	r0, [r9]
   144d0:	lsr	r2, r5, #1
   144d4:	orr	r3, r3, r5, lsl #31
   144d8:	mov	r5, r2
   144dc:	mov	r4, r3
   144e0:	orrs	r3, r4, r5
   144e4:	strd	r0, [sp, #48]	; 0x30
   144e8:	beq	145a4 <__assert_fail@plt+0x2e50>
   144ec:	and	r3, r4, #1
   144f0:	str	r3, [sp, #344]	; 0x158
   144f4:	add	r3, sp, #344	; 0x158
   144f8:	str	r6, [sp, #348]	; 0x15c
   144fc:	ldrd	r2, [r3]
   14500:	orrs	r3, r2, r3
   14504:	beq	14488 <__assert_fail@plt+0x2d34>
   14508:	ldrd	sl, [sp, #48]	; 0x30
   1450c:	add	r3, sp, #328	; 0x148
   14510:	add	r1, sp, #336	; 0x150
   14514:	ldrd	r0, [r1]
   14518:	ldrd	r2, [r3]
   1451c:	strd	sl, [sp, #8]
   14520:	ldrd	sl, [sp, #72]	; 0x48
   14524:	strd	r0, [sp]
   14528:	add	r1, sp, #400	; 0x190
   1452c:	mov	r0, r9
   14530:	str	r7, [sp, #16]
   14534:	str	r8, [sp, #20]
   14538:	strd	sl, [sp, #24]
   1453c:	ldrd	sl, [sp, #192]	; 0xc0
   14540:	strd	sl, [sp, #32]
   14544:	ldrd	sl, [r1]
   14548:	strd	sl, [sp, #40]	; 0x28
   1454c:	bl	11b94 <__assert_fail@plt+0x440>
   14550:	ldrd	sl, [sp, #48]	; 0x30
   14554:	add	r3, sp, #336	; 0x150
   14558:	strd	r0, [r3]
   1455c:	add	r1, sp, #400	; 0x190
   14560:	mov	r0, r9
   14564:	stm	sp, {r7, r8}
   14568:	mov	r2, sl
   1456c:	mov	r3, fp
   14570:	strd	sl, [sp, #8]
   14574:	ldrd	sl, [sp, #72]	; 0x48
   14578:	str	r7, [sp, #16]
   1457c:	str	r8, [sp, #20]
   14580:	strd	sl, [sp, #24]
   14584:	ldrd	sl, [sp, #192]	; 0xc0
   14588:	strd	sl, [sp, #32]
   1458c:	ldrd	sl, [r1]
   14590:	add	r1, sp, #328	; 0x148
   14594:	strd	sl, [sp, #40]	; 0x28
   14598:	ldrd	sl, [r9]
   1459c:	strd	sl, [r1]
   145a0:	b	144bc <__assert_fail@plt+0x2d68>
   145a4:	add	r3, sp, #336	; 0x150
   145a8:	ldr	ip, [sp, #352]	; 0x160
   145ac:	ldrd	r0, [r3]
   145b0:	add	r3, sp, #328	; 0x148
   145b4:	ldrd	r2, [r3]
   145b8:	strd	r2, [ip]
   145bc:	add	sp, sp, #364	; 0x16c
   145c0:	ldrd	r4, [sp]
   145c4:	ldrd	r6, [sp, #8]
   145c8:	ldrd	r8, [sp, #16]
   145cc:	ldrd	sl, [sp, #24]
   145d0:	add	sp, sp, #32
   145d4:	pop	{pc}		; (ldr pc, [sp], #4)
   145d8:	movw	r3, #5408	; 0x1520
   145dc:	movt	r3, #2
   145e0:	movw	r1, #17888	; 0x45e0
   145e4:	movt	r1, #2
   145e8:	movw	r0, #17904	; 0x45f0
   145ec:	movt	r0, #2
   145f0:	movw	r2, #993	; 0x3e1
   145f4:	bl	11754 <__assert_fail@plt>
   145f8:	movw	r3, #5408	; 0x1520
   145fc:	movt	r3, #2
   14600:	movw	r1, #17888	; 0x45e0
   14604:	movt	r1, #2
   14608:	movw	r0, #17968	; 0x4630
   1460c:	movt	r0, #2
   14610:	movw	r2, #995	; 0x3e3
   14614:	bl	11754 <__assert_fail@plt>
   14618:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1461c:	mov	r4, r2
   14620:	mov	r5, r3
   14624:	strd	r6, [sp, #8]
   14628:	mov	r3, r0
   1462c:	mov	r7, r0
   14630:	strd	r8, [sp, #16]
   14634:	strd	sl, [sp, #24]
   14638:	str	lr, [sp, #32]
   1463c:	sub	sp, sp, #108	; 0x6c
   14640:	ldr	r8, [sp, #156]	; 0x9c
   14644:	add	r1, sp, #144	; 0x90
   14648:	add	r0, sp, #96	; 0x60
   1464c:	ldm	r1, {r1, r2, r9}
   14650:	strd	r4, [sp]
   14654:	str	r8, [sp, #8]
   14658:	strd	r4, [sp, #80]	; 0x50
   1465c:	bl	13bfc <__assert_fail@plt+0x24a8>
   14660:	ldrd	r2, [r8]
   14664:	mov	r4, r0
   14668:	mov	r5, r1
   1466c:	ldrd	r0, [sp, #96]	; 0x60
   14670:	cmp	r3, r5
   14674:	cmpeq	r2, r4
   14678:	strd	r0, [sp, #88]	; 0x58
   1467c:	beq	147e8 <__assert_fail@plt+0x3094>
   14680:	ldrd	r0, [r8, #8]
   14684:	ldrd	sl, [r7]
   14688:	strd	sl, [sp, #48]	; 0x30
   1468c:	ldrd	sl, [r7, #8]
   14690:	strd	sl, [sp, #56]	; 0x38
   14694:	ldrd	sl, [sp, #48]	; 0x30
   14698:	subs	ip, sl, r2
   1469c:	str	ip, [sp, #64]	; 0x40
   146a0:	sbc	ip, fp, r3
   146a4:	cmp	r3, fp
   146a8:	cmpeq	r2, sl
   146ac:	ldrd	r2, [sp, #56]	; 0x38
   146b0:	str	ip, [sp, #68]	; 0x44
   146b4:	movhi	ip, #1
   146b8:	movls	ip, #0
   146bc:	ldrd	sl, [sp, #88]	; 0x58
   146c0:	subs	r2, r2, ip
   146c4:	sbc	r3, r3, #0
   146c8:	subs	ip, r2, r0
   146cc:	sbc	r3, r3, r1
   146d0:	str	ip, [sp, #72]	; 0x48
   146d4:	str	r3, [sp, #76]	; 0x4c
   146d8:	ldrd	r2, [sp, #64]	; 0x40
   146dc:	ldrd	r0, [sp, #72]	; 0x48
   146e0:	cmp	r5, r3
   146e4:	cmpeq	r4, r2
   146e8:	movne	r3, #0
   146ec:	moveq	r3, #1
   146f0:	cmp	fp, r1
   146f4:	cmpeq	sl, r0
   146f8:	movne	r3, #0
   146fc:	cmp	r3, #0
   14700:	str	r3, [sp, #88]	; 0x58
   14704:	bne	14800 <__assert_fail@plt+0x30ac>
   14708:	cmp	r9, #1
   1470c:	bls	147c8 <__assert_fail@plt+0x3074>
   14710:	mov	r6, #1
   14714:	str	r9, [sp, #152]	; 0x98
   14718:	b	14738 <__assert_fail@plt+0x2fe4>
   1471c:	ldr	r3, [sp, #152]	; 0x98
   14720:	cmp	r3, r6
   14724:	beq	147c8 <__assert_fail@plt+0x3074>
   14728:	ldrd	r2, [r7]
   1472c:	strd	r2, [sp, #48]	; 0x30
   14730:	ldrd	r2, [r7, #8]
   14734:	strd	r2, [sp, #56]	; 0x38
   14738:	strd	r4, [sp]
   1473c:	mov	r2, sl
   14740:	mov	r3, fp
   14744:	add	r0, sp, #96	; 0x60
   14748:	strd	sl, [sp, #8]
   1474c:	add	r6, r6, #1
   14750:	strd	r4, [sp, #16]
   14754:	ldrd	r4, [sp, #56]	; 0x38
   14758:	strd	r4, [sp, #24]
   1475c:	ldrd	r4, [sp, #48]	; 0x30
   14760:	strd	r4, [sp, #32]
   14764:	ldrd	r4, [sp, #80]	; 0x50
   14768:	strd	r4, [sp, #40]	; 0x28
   1476c:	bl	11b94 <__assert_fail@plt+0x440>
   14770:	ldrd	r2, [sp, #64]	; 0x40
   14774:	mov	r4, r0
   14778:	mov	r5, r1
   1477c:	ldrd	r0, [sp, #72]	; 0x48
   14780:	ldrd	sl, [sp, #96]	; 0x60
   14784:	cmp	r3, r5
   14788:	cmpeq	r2, r4
   1478c:	movne	r3, #0
   14790:	moveq	r3, #1
   14794:	cmp	r1, fp
   14798:	cmpeq	r0, sl
   1479c:	movne	r3, #0
   147a0:	cmp	r3, #0
   147a4:	bne	14800 <__assert_fail@plt+0x30ac>
   147a8:	ldrd	r2, [r8]
   147ac:	cmp	r3, r5
   147b0:	cmpeq	r2, r4
   147b4:	bne	1471c <__assert_fail@plt+0x2fc8>
   147b8:	ldrd	r2, [r8, #8]
   147bc:	cmp	r3, fp
   147c0:	cmpeq	r2, sl
   147c4:	bne	1471c <__assert_fail@plt+0x2fc8>
   147c8:	ldr	r0, [sp, #88]	; 0x58
   147cc:	add	sp, sp, #108	; 0x6c
   147d0:	ldrd	r4, [sp]
   147d4:	ldrd	r6, [sp, #8]
   147d8:	ldrd	r8, [sp, #16]
   147dc:	ldrd	sl, [sp, #24]
   147e0:	add	sp, sp, #32
   147e4:	pop	{pc}		; (ldr pc, [sp], #4)
   147e8:	mov	sl, r0
   147ec:	mov	fp, r1
   147f0:	ldrd	r0, [r8, #8]
   147f4:	cmp	r1, fp
   147f8:	cmpeq	r0, sl
   147fc:	bne	14684 <__assert_fail@plt+0x2f30>
   14800:	mov	r3, #1
   14804:	str	r3, [sp, #88]	; 0x58
   14808:	b	147c8 <__assert_fail@plt+0x3074>
   1480c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14810:	mov	r5, r1
   14814:	mov	r4, r0
   14818:	strd	r6, [sp, #8]
   1481c:	mov	r1, r3
   14820:	strd	r8, [sp, #16]
   14824:	strd	sl, [sp, #24]
   14828:	str	lr, [sp, #32]
   1482c:	sub	sp, sp, #516	; 0x204
   14830:	strd	r4, [sp, #16]
   14834:	strd	r2, [sp, #64]	; 0x40
   14838:	orrs	r3, r2, r3
   1483c:	moveq	r3, #1
   14840:	movne	r3, #0
   14844:	subs	r4, r0, r3
   14848:	sbc	r5, r5, #0
   1484c:	subs	r3, r2, #1
   14850:	strd	r4, [sp, #72]	; 0x48
   14854:	str	r3, [sp, #88]	; 0x58
   14858:	sbc	r3, r1, #0
   1485c:	mov	r1, #0
   14860:	str	r3, [sp, #92]	; 0x5c
   14864:	ldrd	r4, [sp, #88]	; 0x58
   14868:	orrs	r3, r4, r5
   1486c:	beq	1493c <__assert_fail@plt+0x31e8>
   14870:	mov	r3, r1
   14874:	and	r2, r4, #1
   14878:	orrs	r3, r2, r3
   1487c:	mov	r0, r4
   14880:	moveq	r0, r1
   14884:	moveq	r3, r4
   14888:	moveq	r1, r0
   1488c:	moveq	r2, r5
   14890:	bne	152b8 <__assert_fail@plt+0x3b64>
   14894:	lsr	r3, r3, #1
   14898:	mov	r5, r1
   1489c:	add	r0, r0, #1
   148a0:	orr	r3, r3, r2, lsl #31
   148a4:	lsr	r2, r2, #1
   148a8:	and	r4, r3, #1
   148ac:	orrs	ip, r4, r5
   148b0:	beq	14894 <__assert_fail@plt+0x3140>
   148b4:	ldrd	r4, [sp, #72]	; 0x48
   148b8:	sub	r3, r0, #32
   148bc:	mov	lr, r0
   148c0:	rsb	ip, r0, #32
   148c4:	rsb	r1, lr, #64	; 0x40
   148c8:	ldrd	r6, [sp, #88]	; 0x58
   148cc:	str	r3, [sp, #32]
   148d0:	ldr	r3, [sp, #32]
   148d4:	str	lr, [sp, #124]	; 0x7c
   148d8:	lsr	r2, r6, r0
   148dc:	mov	r6, r4
   148e0:	lsr	r0, r4, r0
   148e4:	orr	r2, r2, r7, lsl ip
   148e8:	orr	r0, r0, r5, lsl ip
   148ec:	orr	r2, r2, r7, lsr r3
   148f0:	orr	r0, r0, r5, lsr r3
   148f4:	mov	r3, lr
   148f8:	lsr	ip, r5, r3
   148fc:	lsr	lr, r7, lr
   14900:	mov	r7, r5
   14904:	lsl	r3, r7, r1
   14908:	sub	r4, r1, #32
   1490c:	orr	r2, r2, r6, lsl r1
   14910:	rsb	r1, r1, #32
   14914:	orr	r3, r3, r6, lsl r4
   14918:	add	r4, sp, #160	; 0xa0
   1491c:	orr	r3, r3, r6, lsr r1
   14920:	str	r4, [sp, #128]	; 0x80
   14924:	str	r0, [r4, #8]
   14928:	orr	r3, r3, lr
   1492c:	str	r2, [sp, #160]	; 0xa0
   14930:	str	r3, [r4, #4]
   14934:	str	ip, [r4, #12]
   14938:	b	149c8 <__assert_fail@plt+0x3274>
   1493c:	ldrd	r4, [sp, #72]	; 0x48
   14940:	mov	r3, r1
   14944:	and	r2, r4, #1
   14948:	orrs	r3, r2, r3
   1494c:	bne	152a4 <__assert_fail@plt+0x3b50>
   14950:	mov	r3, r1
   14954:	mov	r0, r5
   14958:	mov	r1, r4
   1495c:	mov	ip, r3
   14960:	b	14968 <__assert_fail@plt+0x3214>
   14964:	mov	r3, r2
   14968:	lsr	r1, r1, #1
   1496c:	mov	r7, ip
   14970:	add	r2, r3, #1
   14974:	orr	r1, r1, r0, lsl #31
   14978:	lsr	r0, r0, #1
   1497c:	and	r6, r1, #1
   14980:	orrs	lr, r6, r7
   14984:	beq	14964 <__assert_fail@plt+0x3210>
   14988:	ldrd	r4, [sp, #72]	; 0x48
   1498c:	rsb	r0, r2, #32
   14990:	sub	r1, r3, #31
   14994:	add	r3, r3, #65	; 0x41
   14998:	str	r3, [sp, #124]	; 0x7c
   1499c:	lsr	ip, r4, r2
   149a0:	lsr	r2, r5, r2
   149a4:	orr	ip, ip, r5, lsl r0
   149a8:	orr	ip, ip, r5, lsr r1
   149ac:	add	r3, sp, #160	; 0xa0
   149b0:	mov	r0, #0
   149b4:	mov	r1, #0
   149b8:	str	r3, [sp, #128]	; 0x80
   149bc:	str	ip, [sp, #160]	; 0xa0
   149c0:	str	r2, [sp, #164]	; 0xa4
   149c4:	strd	r0, [sp, #168]	; 0xa8
   149c8:	ldrd	r6, [sp, #64]	; 0x40
   149cc:	movw	r2, #5408	; 0x1520
   149d0:	movt	r2, #2
   149d4:	mov	lr, #0
   149d8:	str	r2, [sp, #120]	; 0x78
   149dc:	ubfx	r3, r6, #1, #7
   149e0:	add	r3, r2, r3
   149e4:	ldrb	ip, [r3, #708]	; 0x2c4
   149e8:	umull	r2, r3, ip, ip
   149ec:	adds	ip, ip, ip
   149f0:	adc	lr, lr, lr
   149f4:	mul	r4, r2, r7
   149f8:	umull	r0, r1, r2, r6
   149fc:	mla	r4, r6, r3, r4
   14a00:	subs	r3, ip, r0
   14a04:	add	r1, r4, r1
   14a08:	sbc	lr, lr, r1
   14a0c:	adds	r2, r3, r3
   14a10:	umull	r0, r1, r3, r3
   14a14:	adc	ip, lr, lr
   14a18:	mul	lr, r3, lr
   14a1c:	mul	r3, r0, r7
   14a20:	umull	r4, r5, r0, r6
   14a24:	add	r1, r1, lr, lsl #1
   14a28:	mla	r3, r6, r1, r3
   14a2c:	add	r5, r3, r5
   14a30:	subs	r3, r2, r4
   14a34:	sbc	ip, ip, r5
   14a38:	adds	r4, r3, r3
   14a3c:	umull	r0, r1, r3, r3
   14a40:	adc	lr, ip, ip
   14a44:	mul	ip, r3, ip
   14a48:	umull	r2, r3, r0, r6
   14a4c:	add	r1, r1, ip, lsl #1
   14a50:	mul	ip, r0, r7
   14a54:	mla	ip, r6, r1, ip
   14a58:	subs	r1, r4, r2
   14a5c:	str	r1, [sp, #32]
   14a60:	add	r3, ip, r3
   14a64:	sbc	r3, lr, r3
   14a68:	str	r3, [sp, #80]	; 0x50
   14a6c:	ldrd	r2, [sp, #16]
   14a70:	cmp	r3, #0
   14a74:	cmpeq	r2, #1
   14a78:	bls	15238 <__assert_fail@plt+0x3ae4>
   14a7c:	mov	r4, #63	; 0x3f
   14a80:	mov	r5, #0
   14a84:	mov	r0, #0
   14a88:	mov	r1, #0
   14a8c:	mov	r2, #1
   14a90:	mov	r3, #0
   14a94:	ldrd	r6, [sp, #16]
   14a98:	strd	sl, [sp, #56]	; 0x38
   14a9c:	adds	lr, r2, r2
   14aa0:	adc	ip, r3, r3
   14aa4:	orr	r2, lr, r1, lsr #31
   14aa8:	adds	r8, r0, r0
   14aac:	adc	r9, r1, r1
   14ab0:	cmp	r7, ip
   14ab4:	cmpeq	r6, r2
   14ab8:	mov	r3, ip
   14abc:	mov	r0, r8
   14ac0:	mov	r1, r9
   14ac4:	bcc	14af0 <__assert_fail@plt+0x339c>
   14ac8:	ldrd	sl, [sp, #64]	; 0x40
   14acc:	cmp	fp, r9
   14ad0:	cmpeq	sl, r8
   14ad4:	movls	ip, #1
   14ad8:	movhi	ip, #0
   14adc:	cmp	r7, r3
   14ae0:	cmpeq	r6, r2
   14ae4:	movne	ip, #0
   14ae8:	cmp	ip, #0
   14aec:	beq	14b20 <__assert_fail@plt+0x33cc>
   14af0:	ldrd	sl, [sp, #64]	; 0x40
   14af4:	cmp	fp, r9
   14af8:	cmpeq	sl, r8
   14afc:	movhi	lr, #1
   14b00:	movls	lr, #0
   14b04:	subs	r0, r8, sl
   14b08:	sbc	r1, r9, fp
   14b0c:	subs	ip, r2, r6
   14b10:	sbc	fp, r3, r7
   14b14:	subs	r2, ip, lr
   14b18:	mov	ip, #0
   14b1c:	sbc	r3, fp, ip
   14b20:	subs	r4, r4, #1
   14b24:	mvn	fp, #0
   14b28:	sbc	r5, r5, #0
   14b2c:	mvn	sl, #0
   14b30:	cmp	r5, fp
   14b34:	cmpeq	r4, sl
   14b38:	bne	14a9c <__assert_fail@plt+0x3348>
   14b3c:	adds	ip, r0, r0
   14b40:	ldrd	sl, [sp, #56]	; 0x38
   14b44:	str	ip, [sp, #24]
   14b48:	adc	ip, r1, r1
   14b4c:	strd	r0, [sp, #192]	; 0xc0
   14b50:	str	ip, [sp, #28]
   14b54:	adds	ip, r2, r2
   14b58:	ldrd	r6, [sp, #24]
   14b5c:	str	ip, [sp, #40]	; 0x28
   14b60:	adc	ip, r3, r3
   14b64:	strd	r2, [sp, #200]	; 0xc8
   14b68:	str	ip, [sp, #44]	; 0x2c
   14b6c:	ldrd	r4, [sp, #40]	; 0x28
   14b70:	cmp	r7, r1
   14b74:	cmpeq	r6, r0
   14b78:	movcc	ip, #1
   14b7c:	movcs	ip, #0
   14b80:	adds	r4, r4, ip
   14b84:	adc	r5, r5, #0
   14b88:	mov	r8, r4
   14b8c:	mov	r9, r5
   14b90:	ldrd	r4, [sp, #16]
   14b94:	strd	r8, [sp, #184]	; 0xb8
   14b98:	cmp	r5, r9
   14b9c:	cmpeq	r4, r8
   14ba0:	bcc	151ec <__assert_fail@plt+0x3a98>
   14ba4:	ldrd	r0, [sp, #64]	; 0x40
   14ba8:	moveq	r3, #1
   14bac:	movne	r3, #0
   14bb0:	cmp	r1, r7
   14bb4:	cmpeq	r0, r6
   14bb8:	movhi	r3, #0
   14bbc:	andls	r3, r3, #1
   14bc0:	cmp	r3, #0
   14bc4:	bne	151ec <__assert_fail@plt+0x3a98>
   14bc8:	mov	r8, r4
   14bcc:	mov	r9, r5
   14bd0:	strd	r6, [sp, #176]	; 0xb0
   14bd4:	add	r3, sp, #176	; 0xb0
   14bd8:	add	r0, sp, #208	; 0xd0
   14bdc:	ldr	r2, [sp, #32]
   14be0:	ldr	r1, [sp, #128]	; 0x80
   14be4:	str	r3, [sp]
   14be8:	ldrd	r4, [sp, #64]	; 0x40
   14bec:	ldr	r3, [sp, #80]	; 0x50
   14bf0:	str	r1, [sp, #4]
   14bf4:	ldr	r1, [sp, #124]	; 0x7c
   14bf8:	str	r1, [sp, #8]
   14bfc:	add	r1, sp, #192	; 0xc0
   14c00:	strd	r4, [sp, #208]	; 0xd0
   14c04:	str	r1, [sp, #12]
   14c08:	strd	r8, [sp, #216]	; 0xd8
   14c0c:	bl	14618 <__assert_fail@plt+0x2ec4>
   14c10:	subs	r3, r0, #0
   14c14:	str	r3, [sp, #156]	; 0x9c
   14c18:	beq	14ebc <__assert_fail@plt+0x3768>
   14c1c:	ldrd	r4, [sp, #72]	; 0x48
   14c20:	add	lr, sp, #256	; 0x100
   14c24:	ldrd	r6, [sp, #88]	; 0x58
   14c28:	str	lr, [sp]
   14c2c:	ldr	r3, [pc, #1724]	; 152f0 <__assert_fail@plt+0x3b9c>
   14c30:	lsr	lr, r4, #1
   14c34:	mov	r0, r4
   14c38:	mov	r1, r5
   14c3c:	lsr	ip, r6, #1
   14c40:	mov	r2, r6
   14c44:	mov	r6, #2
   14c48:	str	r3, [sp, #56]	; 0x38
   14c4c:	mov	r3, r7
   14c50:	mov	r7, #0
   14c54:	str	lr, [sp, #132]	; 0x84
   14c58:	strd	r6, [sp, #24]
   14c5c:	str	ip, [sp, #136]	; 0x88
   14c60:	bl	152f8 <__assert_fail@plt+0x3ba4>
   14c64:	ldrd	r6, [sp, #88]	; 0x58
   14c68:	strd	sl, [sp, #96]	; 0x60
   14c6c:	ldr	r2, [sp, #136]	; 0x88
   14c70:	lsr	r3, r7, #1
   14c74:	orr	r2, r2, r7, lsl #31
   14c78:	str	r2, [sp, #136]	; 0x88
   14c7c:	orr	r2, r3, r4, lsl #31
   14c80:	ldr	r3, [sp, #132]	; 0x84
   14c84:	str	r2, [sp, #140]	; 0x8c
   14c88:	orr	r3, r3, r5, lsl #31
   14c8c:	str	r3, [sp, #132]	; 0x84
   14c90:	lsr	r3, r5, #1
   14c94:	str	r3, [sp, #152]	; 0x98
   14c98:	add	r3, sp, #264	; 0x108
   14c9c:	ldrd	r2, [r3]
   14ca0:	orrs	r3, r2, r3
   14ca4:	bne	150c8 <__assert_fail@plt+0x3974>
   14ca8:	ldrb	r3, [sp, #506]	; 0x1fa
   14cac:	cmp	r3, #0
   14cb0:	beq	14ebc <__assert_fail@plt+0x3768>
   14cb4:	add	r3, sp, #240	; 0xf0
   14cb8:	add	r7, sp, #224	; 0xe0
   14cbc:	str	r3, [sp, #40]	; 0x28
   14cc0:	add	r3, sp, #248	; 0xf8
   14cc4:	str	r3, [sp, #84]	; 0x54
   14cc8:	mov	r3, #0
   14ccc:	add	r2, sp, #264	; 0x108
   14cd0:	strd	r8, [sp, #144]	; 0x90
   14cd4:	mov	sl, r2
   14cd8:	mov	fp, r7
   14cdc:	mov	r9, r3
   14ce0:	mov	r3, sl
   14ce4:	ldrd	r0, [r3, #8]!
   14ce8:	cmp	r1, #0
   14cec:	mov	sl, r3
   14cf0:	strd	r0, [sp, #16]
   14cf4:	cmpeq	r0, #2
   14cf8:	beq	15074 <__assert_fail@plt+0x3920>
   14cfc:	ldr	r3, [sp, #120]	; 0x78
   14d00:	mov	r6, r0
   14d04:	ubfx	r0, r0, #1, #7
   14d08:	mov	r7, r1
   14d0c:	mov	r1, #0
   14d10:	add	r0, r3, r0
   14d14:	ldrb	r0, [r0, #708]	; 0x2c4
   14d18:	umull	r4, r5, r0, r0
   14d1c:	adds	ip, r0, r0
   14d20:	mov	r0, r6
   14d24:	adc	lr, r1, r1
   14d28:	mul	r6, r4, r7
   14d2c:	umull	r2, r3, r4, r0
   14d30:	mla	r6, r0, r5, r6
   14d34:	subs	r0, ip, r2
   14d38:	add	r3, r6, r3
   14d3c:	umull	r4, r5, r0, r0
   14d40:	sbc	r1, lr, r3
   14d44:	ldrd	r2, [sp, #16]
   14d48:	adds	lr, r0, r0
   14d4c:	adc	ip, r1, r1
   14d50:	mul	r0, r0, r1
   14d54:	mul	r6, r4, r3
   14d58:	add	r5, r5, r0, lsl #1
   14d5c:	umull	r0, r1, r4, r2
   14d60:	mla	r6, r2, r5, r6
   14d64:	subs	lr, lr, r0
   14d68:	add	r1, r6, r1
   14d6c:	sbc	r4, ip, r1
   14d70:	umull	r0, r1, lr, lr
   14d74:	adds	r6, lr, lr
   14d78:	adc	ip, r4, r4
   14d7c:	mul	lr, lr, r4
   14d80:	umull	r4, r5, r0, r2
   14d84:	add	r1, r1, lr, lsl #1
   14d88:	mul	lr, r0, r3
   14d8c:	mla	lr, r2, r1, lr
   14d90:	subs	r1, r6, r4
   14d94:	ldrd	r6, [sp, #16]
   14d98:	ldrd	r2, [sp, #72]	; 0x48
   14d9c:	add	r5, lr, r5
   14da0:	sbc	ip, ip, r5
   14da4:	cmp	r3, r7
   14da8:	cmpeq	r2, r6
   14dac:	ldrd	r2, [sp, #88]	; 0x58
   14db0:	mul	r0, r2, ip
   14db4:	umull	r4, r5, r2, r1
   14db8:	mla	r0, r1, r3, r0
   14dbc:	add	r0, r0, r5
   14dc0:	mov	r5, r0
   14dc4:	bcc	15098 <__assert_fail@plt+0x3944>
   14dc8:	ldr	r8, [sp, #20]
   14dcc:	umull	r2, r3, r0, r6
   14dd0:	mov	r7, r6
   14dd4:	mov	lr, #0
   14dd8:	umull	r6, r7, r4, r7
   14ddc:	strd	r2, [sp, #104]	; 0x68
   14de0:	umlal	r2, r3, r4, r8
   14de4:	strd	r2, [sp, #112]	; 0x70
   14de8:	mov	r2, r7
   14dec:	umull	r6, r7, r0, r8
   14df0:	strd	r6, [sp, #16]
   14df4:	ldrd	r6, [sp, #112]	; 0x70
   14df8:	adds	r3, r2, r6
   14dfc:	str	r3, [sp, #48]	; 0x30
   14e00:	adc	r3, lr, r7
   14e04:	str	r3, [sp, #52]	; 0x34
   14e08:	ldrd	r6, [sp, #48]	; 0x30
   14e0c:	ldrd	r2, [sp, #104]	; 0x68
   14e10:	cmp	r3, r7
   14e14:	cmpeq	r2, r6
   14e18:	bls	14e34 <__assert_fail@plt+0x36e0>
   14e1c:	ldr	r3, [sp, #16]
   14e20:	adds	r3, r3, lr
   14e24:	str	r3, [sp, #16]
   14e28:	ldr	r3, [sp, #20]
   14e2c:	adc	r3, r3, #1
   14e30:	str	r3, [sp, #20]
   14e34:	strd	r4, [fp]
   14e38:	mov	r3, #0
   14e3c:	ldr	r2, [sp, #52]	; 0x34
   14e40:	ldrd	r4, [sp, #72]	; 0x48
   14e44:	subs	r2, r4, r2
   14e48:	sbc	r3, r5, r3
   14e4c:	ldrd	r4, [sp, #16]
   14e50:	subs	r2, r2, r4
   14e54:	sbc	r0, r3, r5
   14e58:	mul	ip, r2, ip
   14e5c:	umull	r2, r3, r2, r1
   14e60:	mla	ip, r1, r0, ip
   14e64:	add	r3, ip, r3
   14e68:	strd	r2, [fp, #8]
   14e6c:	ldr	r1, [sp, #32]
   14e70:	add	r3, sp, #208	; 0xd0
   14e74:	mov	r2, fp
   14e78:	add	r9, r9, #1
   14e7c:	ldr	ip, [sp, #80]	; 0x50
   14e80:	ldr	r0, [sp, #84]	; 0x54
   14e84:	stm	sp, {r1, ip}
   14e88:	add	ip, sp, #192	; 0xc0
   14e8c:	add	r1, sp, #176	; 0xb0
   14e90:	str	ip, [sp, #8]
   14e94:	bl	13bfc <__assert_fail@plt+0x24a8>
   14e98:	ldr	ip, [sp, #40]	; 0x28
   14e9c:	ldrd	r2, [sp, #192]	; 0xc0
   14ea0:	strd	r0, [ip]
   14ea4:	cmp	r1, r3
   14ea8:	cmpeq	r0, r2
   14eac:	beq	14edc <__assert_fail@plt+0x3788>
   14eb0:	ldrb	r3, [sp, #506]	; 0x1fa
   14eb4:	cmp	r3, r9
   14eb8:	bhi	14ce0 <__assert_fail@plt+0x358c>
   14ebc:	ldr	r0, [sp, #156]	; 0x9c
   14ec0:	add	sp, sp, #516	; 0x204
   14ec4:	ldrd	r4, [sp]
   14ec8:	ldrd	r6, [sp, #8]
   14ecc:	ldrd	r8, [sp, #16]
   14ed0:	ldrd	sl, [sp, #24]
   14ed4:	add	sp, sp, #32
   14ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   14edc:	mov	r3, ip
   14ee0:	ldrb	ip, [sp, #506]	; 0x1fa
   14ee4:	ldrd	r0, [r3, #8]
   14ee8:	ldrd	r2, [sp, #200]	; 0xc8
   14eec:	cmp	ip, r9
   14ef0:	bls	15254 <__assert_fail@plt+0x3b00>
   14ef4:	cmp	r1, r3
   14ef8:	cmpeq	r0, r2
   14efc:	bne	14ce0 <__assert_fail@plt+0x358c>
   14f00:	ldrd	r8, [sp, #144]	; 0x90
   14f04:	mov	r3, #0
   14f08:	ldr	r1, [sp, #56]	; 0x38
   14f0c:	ldrb	r2, [r1], #1
   14f10:	str	r1, [sp, #56]	; 0x38
   14f14:	ldr	r1, [sp, #24]
   14f18:	adds	r1, r1, r2
   14f1c:	str	r1, [sp, #24]
   14f20:	ldr	r1, [sp, #28]
   14f24:	adc	r3, r1, r3
   14f28:	str	r3, [sp, #28]
   14f2c:	ldrd	r2, [sp, #24]
   14f30:	cmp	r9, r3
   14f34:	cmpeq	r8, r2
   14f38:	bls	150ac <__assert_fail@plt+0x3958>
   14f3c:	mov	r4, r2
   14f40:	mov	r5, r3
   14f44:	mov	r2, #63	; 0x3f
   14f48:	mov	r3, #0
   14f4c:	mov	r0, #0
   14f50:	mov	r1, #0
   14f54:	ldrd	r6, [sp, #64]	; 0x40
   14f58:	strd	r6, [sp, #16]
   14f5c:	adds	lr, r4, r4
   14f60:	adc	ip, r5, r5
   14f64:	orr	r4, lr, r1, lsr #31
   14f68:	adds	sl, r0, r0
   14f6c:	adc	fp, r1, r1
   14f70:	cmp	r9, ip
   14f74:	cmpeq	r8, r4
   14f78:	mov	r5, ip
   14f7c:	mov	r0, sl
   14f80:	mov	r1, fp
   14f84:	bcc	14fb0 <__assert_fail@plt+0x385c>
   14f88:	ldrd	r6, [sp, #16]
   14f8c:	cmp	r7, fp
   14f90:	cmpeq	r6, sl
   14f94:	movls	ip, #1
   14f98:	movhi	ip, #0
   14f9c:	cmp	r9, r5
   14fa0:	cmpeq	r8, r4
   14fa4:	movne	ip, #0
   14fa8:	cmp	ip, #0
   14fac:	beq	14fe0 <__assert_fail@plt+0x388c>
   14fb0:	ldrd	r6, [sp, #16]
   14fb4:	mov	ip, #0
   14fb8:	cmp	r7, fp
   14fbc:	cmpeq	r6, sl
   14fc0:	movhi	lr, #1
   14fc4:	movls	lr, #0
   14fc8:	subs	r0, sl, r6
   14fcc:	sbc	r1, fp, r7
   14fd0:	subs	r6, r4, r8
   14fd4:	sbc	r7, r5, r9
   14fd8:	subs	r4, r6, lr
   14fdc:	sbc	r5, r7, ip
   14fe0:	subs	r2, r2, #1
   14fe4:	mvn	r7, #0
   14fe8:	sbc	r3, r3, #0
   14fec:	mvn	r6, #0
   14ff0:	cmp	r3, r7
   14ff4:	cmpeq	r2, r6
   14ff8:	bne	14f5c <__assert_fail@plt+0x3808>
   14ffc:	add	r3, sp, #176	; 0xb0
   15000:	ldr	r2, [sp, #32]
   15004:	strd	r0, [sp, #176]	; 0xb0
   15008:	add	r0, sp, #208	; 0xd0
   1500c:	ldr	ip, [sp, #128]	; 0x80
   15010:	stm	sp, {r3, ip}
   15014:	ldr	r3, [sp, #80]	; 0x50
   15018:	strd	sl, [sp, #96]	; 0x60
   1501c:	ldr	ip, [sp, #124]	; 0x7c
   15020:	strd	r4, [sp, #184]	; 0xb8
   15024:	str	ip, [sp, #8]
   15028:	add	ip, sp, #192	; 0xc0
   1502c:	str	ip, [sp, #12]
   15030:	bl	14618 <__assert_fail@plt+0x2ec4>
   15034:	cmp	r0, #0
   15038:	beq	15274 <__assert_fail@plt+0x3b20>
   1503c:	ldr	r2, [pc, #688]	; 152f4 <__assert_fail@plt+0x3ba0>
   15040:	ldr	r3, [sp, #56]	; 0x38
   15044:	cmp	r3, r2
   15048:	bne	14c98 <__assert_fail@plt+0x3544>
   1504c:	mov	r2, #5
   15050:	movw	r1, #18144	; 0x46e0
   15054:	movt	r1, #2
   15058:	mov	r0, #0
   1505c:	bl	11430 <dcgettext@plt>
   15060:	mov	r1, #0
   15064:	mov	r2, r0
   15068:	mov	r0, r1
   1506c:	bl	11520 <error@plt>
   15070:	bl	11748 <abort@plt>
   15074:	ldr	r3, [sp, #136]	; 0x88
   15078:	str	r3, [fp]
   1507c:	ldr	r3, [sp, #140]	; 0x8c
   15080:	str	r3, [fp, #4]
   15084:	ldr	r3, [sp, #132]	; 0x84
   15088:	str	r3, [fp, #8]
   1508c:	ldr	r3, [sp, #152]	; 0x98
   15090:	str	r3, [fp, #12]
   15094:	b	14e6c <__assert_fail@plt+0x3718>
   15098:	mov	r2, #0
   1509c:	mov	r3, #0
   150a0:	strd	r4, [fp]
   150a4:	strd	r2, [fp, #8]
   150a8:	b	14e6c <__assert_fail@plt+0x3718>
   150ac:	mov	r0, r2
   150b0:	mov	r1, r3
   150b4:	mov	r2, #127	; 0x7f
   150b8:	mov	r3, #0
   150bc:	mov	r4, #0
   150c0:	mov	r5, #0
   150c4:	b	14f54 <__assert_fail@plt+0x3800>
   150c8:	ldr	r3, [sp, #32]
   150cc:	add	r7, sp, #224	; 0xe0
   150d0:	mov	r4, #0
   150d4:	mov	r5, #0
   150d8:	mov	r1, #0
   150dc:	ldr	r2, [sp, #120]	; 0x78
   150e0:	add	r0, sp, #248	; 0xf8
   150e4:	ldr	lr, [sp, #256]	; 0x100
   150e8:	str	r3, [sp]
   150ec:	ldr	r3, [sp, #80]	; 0x50
   150f0:	ldr	r6, [sp, #260]	; 0x104
   150f4:	str	r3, [sp, #4]
   150f8:	add	r3, sp, #192	; 0xc0
   150fc:	str	r0, [sp, #84]	; 0x54
   15100:	str	r3, [sp, #8]
   15104:	ubfx	r3, lr, #1, #7
   15108:	strd	r4, [r7, #8]
   1510c:	add	r3, r2, r3
   15110:	mov	r2, r7
   15114:	ldrb	r3, [r3, #708]	; 0x2c4
   15118:	umull	r4, r5, r3, r3
   1511c:	adds	r3, r3, r3
   15120:	adc	r1, r1, r1
   15124:	mul	ip, r4, r6
   15128:	mla	ip, lr, r5, ip
   1512c:	umull	r4, r5, r4, lr
   15130:	subs	r3, r3, r4
   15134:	add	r5, ip, r5
   15138:	sbc	r1, r1, r5
   1513c:	umull	r4, r5, r3, r3
   15140:	mul	ip, r3, r1
   15144:	adds	r3, r3, r3
   15148:	adc	r1, r1, r1
   1514c:	umull	sl, fp, r4, lr
   15150:	add	r5, r5, ip, lsl #1
   15154:	mul	ip, r4, r6
   15158:	subs	r4, r3, sl
   1515c:	mla	ip, lr, r5, ip
   15160:	add	fp, ip, fp
   15164:	sbc	r1, r1, fp
   15168:	umull	sl, fp, r4, r4
   1516c:	mul	r3, r4, r1
   15170:	adds	r4, r4, r4
   15174:	mul	ip, sl, r6
   15178:	adc	r1, r1, r1
   1517c:	add	r6, sp, #240	; 0xf0
   15180:	add	r3, fp, r3, lsl #1
   15184:	str	r6, [sp, #40]	; 0x28
   15188:	mov	fp, r3
   1518c:	add	r3, sp, #208	; 0xd0
   15190:	mla	ip, lr, fp, ip
   15194:	umull	sl, fp, sl, lr
   15198:	add	ip, ip, fp
   1519c:	subs	r4, r4, sl
   151a0:	mov	fp, ip
   151a4:	sbc	ip, r1, fp
   151a8:	ldrd	sl, [sp, #88]	; 0x58
   151ac:	add	r1, sp, #176	; 0xb0
   151b0:	mul	lr, r4, fp
   151b4:	umull	r4, r5, r4, sl
   151b8:	mla	ip, sl, ip, lr
   151bc:	add	r5, ip, r5
   151c0:	strd	r4, [r7]
   151c4:	bl	13bfc <__assert_fail@plt+0x24a8>
   151c8:	ldrd	r2, [sp, #192]	; 0xc0
   151cc:	strd	r0, [r6]
   151d0:	cmp	r1, r3
   151d4:	cmpeq	r0, r2
   151d8:	beq	1527c <__assert_fail@plt+0x3b28>
   151dc:	ldrb	r3, [sp, #506]	; 0x1fa
   151e0:	cmp	r3, #0
   151e4:	bne	14cc8 <__assert_fail@plt+0x3574>
   151e8:	b	14ebc <__assert_fail@plt+0x3768>
   151ec:	ldrd	r6, [sp, #24]
   151f0:	ldrd	r4, [sp, #64]	; 0x40
   151f4:	subs	r1, r6, r4
   151f8:	sbc	r3, r7, r5
   151fc:	cmp	r5, r7
   15200:	str	r1, [sp, #176]	; 0xb0
   15204:	cmpeq	r4, r6
   15208:	ldrd	r0, [sp, #16]
   1520c:	movhi	r2, #1
   15210:	movls	r2, #0
   15214:	subs	r4, r8, r2
   15218:	str	r3, [sp, #180]	; 0xb4
   1521c:	sbc	r5, r9, #0
   15220:	subs	r2, r4, r0
   15224:	mov	r8, r0
   15228:	sbc	r3, r5, r1
   1522c:	mov	r9, r1
   15230:	strd	r2, [sp, #184]	; 0xb8
   15234:	b	14bd4 <__assert_fail@plt+0x3480>
   15238:	mov	r4, #127	; 0x7f
   1523c:	mov	r5, #0
   15240:	mov	r0, #1
   15244:	mov	r1, #0
   15248:	mov	r2, #0
   1524c:	mov	r3, #0
   15250:	b	14a94 <__assert_fail@plt+0x3340>
   15254:	ldrd	r8, [sp, #144]	; 0x90
   15258:	cmp	r1, r3
   1525c:	cmpeq	r0, r2
   15260:	movne	r3, #1
   15264:	moveq	r3, #0
   15268:	cmp	r3, #0
   1526c:	beq	14f04 <__assert_fail@plt+0x37b0>
   15270:	b	14ebc <__assert_fail@plt+0x3768>
   15274:	str	r0, [sp, #156]	; 0x9c
   15278:	b	14ebc <__assert_fail@plt+0x3768>
   1527c:	ldrb	ip, [sp, #506]	; 0x1fa
   15280:	ldr	r3, [sp, #40]	; 0x28
   15284:	cmp	ip, #0
   15288:	ldrd	r0, [r3, #8]
   1528c:	ldrd	r2, [sp, #200]	; 0xc8
   15290:	beq	152dc <__assert_fail@plt+0x3b88>
   15294:	cmp	r1, r3
   15298:	cmpeq	r0, r2
   1529c:	beq	14f04 <__assert_fail@plt+0x37b0>
   152a0:	b	14cc8 <__assert_fail@plt+0x3574>
   152a4:	mov	r3, #64	; 0x40
   152a8:	mov	ip, r4
   152ac:	mov	r2, r5
   152b0:	str	r3, [sp, #124]	; 0x7c
   152b4:	b	149ac <__assert_fail@plt+0x3258>
   152b8:	ldrd	r2, [sp, #72]	; 0x48
   152bc:	mov	lr, r5
   152c0:	str	r1, [sp, #124]	; 0x7c
   152c4:	mov	r1, #64	; 0x40
   152c8:	ldrd	r6, [sp, #72]	; 0x48
   152cc:	mov	r0, r2
   152d0:	mov	ip, r3
   152d4:	mov	r2, r4
   152d8:	b	14904 <__assert_fail@plt+0x31b0>
   152dc:	cmp	r1, r3
   152e0:	cmpeq	r0, r2
   152e4:	movne	r3, #1
   152e8:	moveq	r3, #0
   152ec:	b	15268 <__assert_fail@plt+0x3b14>
   152f0:	andeq	r1, r2, r0, asr #10
   152f4:	ldrdeq	r1, [r2], -ip
   152f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152fc:	strd	r6, [sp, #8]
   15300:	strd	r8, [sp, #16]
   15304:	mov	r8, r0
   15308:	mov	r9, r1
   1530c:	strd	sl, [sp, #24]
   15310:	mov	fp, r3
   15314:	mov	r3, r0
   15318:	str	lr, [sp, #32]
   1531c:	sub	sp, sp, #92	; 0x5c
   15320:	orrs	r3, r3, r1
   15324:	mov	r0, #0
   15328:	ldr	ip, [sp, #128]	; 0x80
   1532c:	moveq	r3, #1
   15330:	movne	r3, r0
   15334:	cmp	fp, #0
   15338:	cmpeq	r2, #1
   1533c:	mov	sl, r2
   15340:	andls	r1, r3, #1
   15344:	movhi	r1, #0
   15348:	mov	r2, #0
   1534c:	mov	r3, #0
   15350:	cmp	r1, r0
   15354:	str	ip, [sp, #12]
   15358:	strd	r2, [ip, #8]
   1535c:	strd	r8, [sp, #16]
   15360:	strb	r0, [ip, #250]	; 0xfa
   15364:	beq	15384 <__assert_fail@plt+0x3c30>
   15368:	add	sp, sp, #92	; 0x5c
   1536c:	ldrd	r4, [sp]
   15370:	ldrd	r6, [sp, #8]
   15374:	ldrd	r8, [sp, #16]
   15378:	ldrd	sl, [sp, #24]
   1537c:	add	sp, sp, #32
   15380:	pop	{pc}		; (ldr pc, [sp], #4)
   15384:	and	r2, sl, #1
   15388:	mov	r3, r1
   1538c:	orrs	r3, r2, r3
   15390:	bne	154f4 <__assert_fail@plt+0x3da0>
   15394:	orrs	r3, sl, fp
   15398:	bne	1545c <__assert_fail@plt+0x3d08>
   1539c:	and	r2, r8, #1
   153a0:	mov	r3, r1
   153a4:	orrs	r3, r2, r3
   153a8:	bne	15df8 <__assert_fail@plt+0x46a4>
   153ac:	mov	r3, r1
   153b0:	mov	r2, r8
   153b4:	mov	ip, r1
   153b8:	mov	r0, r9
   153bc:	b	153c4 <__assert_fail@plt+0x3c70>
   153c0:	mov	r3, r1
   153c4:	lsr	r2, r2, #1
   153c8:	mov	r7, ip
   153cc:	add	r1, r3, #1
   153d0:	orr	r2, r2, r0, lsl #31
   153d4:	lsr	r0, r0, #1
   153d8:	and	r6, r2, #1
   153dc:	orrs	lr, r6, r7
   153e0:	beq	153c0 <__assert_fail@plt+0x3c6c>
   153e4:	ldrd	r4, [sp, #16]
   153e8:	rsb	lr, r1, #32
   153ec:	sub	ip, r3, #31
   153f0:	lsr	r0, r4, r1
   153f4:	lsr	r2, r5, r1
   153f8:	add	r1, r3, #65	; 0x41
   153fc:	orr	r0, r0, r5, lsl lr
   15400:	orr	r0, r0, r5, lsr ip
   15404:	str	r0, [sp, #16]
   15408:	str	r2, [sp, #20]
   1540c:	str	r1, [sp]
   15410:	movw	r1, #7088	; 0x1bb0
   15414:	movt	r1, #2
   15418:	mov	r4, #0
   1541c:	mov	r5, #0
   15420:	ldr	r0, [sp, #12]
   15424:	str	r1, [sp, #84]	; 0x54
   15428:	mov	r2, #2
   1542c:	mov	r3, #0
   15430:	ldr	r1, [pc, #1936]	; 15bc8 <__assert_fail@plt+0x4474>
   15434:	ldrd	sl, [sp, #16]
   15438:	strd	r4, [sp, #16]
   1543c:	str	r1, [sp, #80]	; 0x50
   15440:	bl	11a78 <__assert_fail@plt+0x324>
   15444:	mov	r3, #3
   15448:	str	r3, [sp, #24]
   1544c:	mov	r3, #0
   15450:	str	r3, [sp, #32]
   15454:	str	r3, [sp, #36]	; 0x24
   15458:	b	15674 <__assert_fail@plt+0x3f20>
   1545c:	mov	r3, r1
   15460:	mov	r0, r1
   15464:	mov	r2, sl
   15468:	mov	r1, fp
   1546c:	lsr	r2, r2, #1
   15470:	mov	r5, r0
   15474:	add	r3, r3, #1
   15478:	orr	r2, r2, r1, lsl #31
   1547c:	lsr	r1, r1, #1
   15480:	and	r4, r2, #1
   15484:	orrs	ip, r4, r5
   15488:	beq	1546c <__assert_fail@plt+0x3d18>
   1548c:	ldrd	r6, [sp, #16]
   15490:	rsb	r5, r3, #64	; 0x40
   15494:	lsr	r2, sl, r3
   15498:	rsb	r0, r3, #32
   1549c:	sub	r4, r5, #32
   154a0:	str	r3, [sp]
   154a4:	orr	r2, r2, fp, lsl r0
   154a8:	sub	r1, r3, #32
   154ac:	orr	r2, r2, fp, lsr r1
   154b0:	lsr	lr, r6, r3
   154b4:	lsl	ip, r7, r5
   154b8:	orr	lr, lr, r7, lsl r0
   154bc:	rsb	r0, r5, #32
   154c0:	orr	ip, ip, r6, lsl r4
   154c4:	orr	lr, lr, r7, lsr r1
   154c8:	lsr	r1, r7, r3
   154cc:	orr	ip, ip, r6, lsr r0
   154d0:	ldr	r0, [sp, #12]
   154d4:	lsr	r4, fp, r3
   154d8:	mov	r3, #0
   154dc:	str	lr, [sp, #16]
   154e0:	orr	sl, r2, r6, lsl r5
   154e4:	mov	r2, #2
   154e8:	str	r1, [sp, #20]
   154ec:	orr	fp, ip, r4
   154f0:	bl	11a78 <__assert_fail@plt+0x324>
   154f4:	ldrd	r2, [sp, #16]
   154f8:	orrs	r3, r2, r3
   154fc:	ldr	r3, [pc, #1732]	; 15bc8 <__assert_fail@plt+0x4474>
   15500:	str	r3, [sp, #80]	; 0x50
   15504:	beq	15e00 <__assert_fail@plt+0x46ac>
   15508:	mov	r2, #0
   1550c:	movw	r6, #7088	; 0x1bb0
   15510:	movt	r6, #2
   15514:	str	r2, [sp, #32]
   15518:	mov	r2, #3
   1551c:	str	r2, [sp, #24]
   15520:	mov	r2, #0
   15524:	strd	sl, [sp, #64]	; 0x40
   15528:	mov	fp, r6
   1552c:	str	r2, [sp, #36]	; 0x24
   15530:	str	r3, [sp, #60]	; 0x3c
   15534:	str	r6, [sp, #84]	; 0x54
   15538:	ldr	r3, [sp, #36]	; 0x24
   1553c:	str	r3, [sp, #56]	; 0x38
   15540:	ldr	r3, [sp, #24]
   15544:	str	r3, [sp, #72]	; 0x48
   15548:	ldm	fp, {ip, lr}
   1554c:	mov	sl, #0
   15550:	ldr	r4, [sp, #56]	; 0x38
   15554:	ldrd	r0, [sp, #64]	; 0x40
   15558:	ldr	r3, [sp, #72]	; 0x48
   1555c:	mul	r2, ip, r1
   15560:	umull	r6, r7, ip, r0
   15564:	mla	r2, lr, r0, r2
   15568:	add	r2, r2, r7
   1556c:	mov	r7, r2
   15570:	umull	r0, r1, r2, r3
   15574:	strd	r0, [sp, #40]	; 0x28
   15578:	umull	r0, r1, r4, r6
   1557c:	umull	r4, r5, r6, r3
   15580:	ldr	r3, [sp, #40]	; 0x28
   15584:	mov	r4, r5
   15588:	adds	r3, r0, r3
   1558c:	str	r3, [sp, #76]	; 0x4c
   15590:	ldr	r3, [sp, #44]	; 0x2c
   15594:	adc	r5, r1, r3
   15598:	ldr	r3, [sp, #56]	; 0x38
   1559c:	ldr	r1, [sp, #76]	; 0x4c
   155a0:	umull	r2, r3, r2, r3
   155a4:	adds	r1, r4, r1
   155a8:	str	r1, [sp, #48]	; 0x30
   155ac:	adc	r1, sl, r5
   155b0:	str	r1, [sp, #52]	; 0x34
   155b4:	ldrd	r0, [sp, #40]	; 0x28
   155b8:	ldrd	r4, [sp, #48]	; 0x30
   155bc:	cmp	r1, r5
   155c0:	cmpeq	r0, r4
   155c4:	bls	155d0 <__assert_fail@plt+0x3e7c>
   155c8:	adds	r2, r2, sl
   155cc:	adc	r3, r3, #1
   155d0:	ldr	r1, [sp, #52]	; 0x34
   155d4:	mov	r0, #0
   155d8:	adds	r8, r1, r2
   155dc:	adc	r9, r0, r3
   155e0:	ldrd	r2, [sp, #16]
   155e4:	cmp	r9, r3
   155e8:	cmpeq	r8, r2
   155ec:	bhi	15618 <__assert_fail@plt+0x3ec4>
   155f0:	subs	r4, r2, r8
   155f4:	sbc	r1, r3, r9
   155f8:	ldrd	r2, [fp, #8]
   155fc:	mul	lr, r4, lr
   15600:	umull	r4, r5, r4, ip
   15604:	mla	lr, ip, r1, lr
   15608:	add	r5, lr, r5
   1560c:	cmp	r5, r3
   15610:	cmpeq	r4, r2
   15614:	bls	15d40 <__assert_fail@plt+0x45ec>
   15618:	ldr	r3, [sp, #60]	; 0x3c
   1561c:	mov	r1, #0
   15620:	add	fp, fp, #16
   15624:	ldrb	r0, [r3, #1]!
   15628:	str	r3, [sp, #60]	; 0x3c
   1562c:	ldr	r3, [sp, #32]
   15630:	add	ip, r3, #1
   15634:	ldr	r3, [sp, #24]
   15638:	str	ip, [sp, #32]
   1563c:	adds	r3, r3, r0
   15640:	str	r3, [sp, #24]
   15644:	ldrd	r2, [sp, #16]
   15648:	orr	r3, r2, r3
   1564c:	mov	lr, r2
   15650:	ldr	r2, [sp, #36]	; 0x24
   15654:	adc	r2, r2, r1
   15658:	cmp	r3, #0
   1565c:	cmpne	ip, #668	; 0x29c
   15660:	str	r2, [sp, #36]	; 0x24
   15664:	bcc	15538 <__assert_fail@plt+0x3de4>
   15668:	cmp	ip, #668	; 0x29c
   1566c:	ldrd	sl, [sp, #64]	; 0x40
   15670:	bcs	15864 <__assert_fail@plt+0x4110>
   15674:	ldr	r9, [sp, #24]
   15678:	ldr	r3, [sp, #32]
   1567c:	ldr	r2, [sp, #84]	; 0x54
   15680:	ldr	r8, [sp, #36]	; 0x24
   15684:	add	r4, r2, r3, lsl #4
   15688:	ldr	r2, [sp, #80]	; 0x50
   1568c:	add	r5, r2, r3
   15690:	b	157f4 <__assert_fail@plt+0x40a0>
   15694:	ldr	ip, [r4, #16]
   15698:	ldr	lr, [r4, #20]
   1569c:	ldrd	r0, [r4, #24]
   156a0:	umull	r2, r3, ip, sl
   156a4:	mul	lr, sl, lr
   156a8:	mla	ip, ip, fp, lr
   156ac:	add	r3, ip, r3
   156b0:	cmp	r1, r3
   156b4:	cmpeq	r0, r2
   156b8:	bcs	15b5c <__assert_fail@plt+0x4408>
   156bc:	ldr	ip, [r4, #32]
   156c0:	ldr	lr, [r4, #36]	; 0x24
   156c4:	ldrd	r2, [r4, #40]	; 0x28
   156c8:	umull	r0, r1, ip, sl
   156cc:	mul	lr, sl, lr
   156d0:	mla	ip, ip, fp, lr
   156d4:	add	r1, ip, r1
   156d8:	cmp	r1, r3
   156dc:	cmpeq	r0, r2
   156e0:	bls	15ad8 <__assert_fail@plt+0x4384>
   156e4:	ldr	ip, [r4, #48]	; 0x30
   156e8:	ldr	lr, [r4, #52]	; 0x34
   156ec:	ldrd	r2, [r4, #56]	; 0x38
   156f0:	umull	r0, r1, ip, sl
   156f4:	mul	lr, sl, lr
   156f8:	mla	ip, ip, fp, lr
   156fc:	add	r1, ip, r1
   15700:	cmp	r1, r3
   15704:	cmpeq	r0, r2
   15708:	bls	15a44 <__assert_fail@plt+0x42f0>
   1570c:	ldr	ip, [r4, #64]	; 0x40
   15710:	ldr	lr, [r4, #68]	; 0x44
   15714:	ldrd	r0, [r4, #72]	; 0x48
   15718:	umull	r2, r3, ip, sl
   1571c:	mul	lr, sl, lr
   15720:	mla	ip, ip, fp, lr
   15724:	add	r3, ip, r3
   15728:	cmp	r3, r1
   1572c:	cmpeq	r2, r0
   15730:	bls	159a0 <__assert_fail@plt+0x424c>
   15734:	ldr	ip, [r4, #80]	; 0x50
   15738:	ldr	lr, [r4, #84]	; 0x54
   1573c:	ldrd	r0, [r4, #88]	; 0x58
   15740:	umull	r2, r3, ip, sl
   15744:	mul	lr, sl, lr
   15748:	mla	ip, ip, fp, lr
   1574c:	add	r3, ip, r3
   15750:	cmp	r1, r3
   15754:	cmpeq	r0, r2
   15758:	bcs	15c8c <__assert_fail@plt+0x4538>
   1575c:	ldr	ip, [r4, #96]	; 0x60
   15760:	ldr	lr, [r4, #100]	; 0x64
   15764:	ldrd	r0, [r4, #104]	; 0x68
   15768:	umull	r2, r3, ip, sl
   1576c:	mul	lr, sl, lr
   15770:	mla	ip, ip, fp, lr
   15774:	add	r3, ip, r3
   15778:	cmp	r1, r3
   1577c:	cmpeq	r0, r2
   15780:	bcs	15bd0 <__assert_fail@plt+0x447c>
   15784:	ldr	ip, [r4, #112]	; 0x70
   15788:	ldr	lr, [r4, #116]	; 0x74
   1578c:	ldrd	r0, [r4, #120]	; 0x78
   15790:	umull	r2, r3, ip, sl
   15794:	mul	lr, sl, lr
   15798:	mla	ip, ip, fp, lr
   1579c:	add	r3, ip, r3
   157a0:	cmp	r3, r1
   157a4:	cmpeq	r2, r0
   157a8:	bls	158d4 <__assert_fail@plt+0x4180>
   157ac:	ldr	r3, [pc, #1048]	; 15bcc <__assert_fail@plt+0x4478>
   157b0:	ldr	r0, [sp, #32]
   157b4:	ldrb	r2, [r3, r0]
   157b8:	mov	r3, #0
   157bc:	adds	r9, r9, r2
   157c0:	adc	r8, r8, r3
   157c4:	umull	r2, r3, r9, r9
   157c8:	mul	r1, r9, r8
   157cc:	add	r3, r3, r1, lsl #1
   157d0:	cmp	r3, fp
   157d4:	cmpeq	r2, sl
   157d8:	bhi	15864 <__assert_fail@plt+0x4110>
   157dc:	add	r3, r0, #8
   157e0:	add	r4, r4, #128	; 0x80
   157e4:	cmp	r3, #668	; 0x29c
   157e8:	add	r5, r5, #8
   157ec:	str	r3, [sp, #32]
   157f0:	bcs	15864 <__assert_fail@plt+0x4110>
   157f4:	ldrd	r6, [r4]
   157f8:	ldrd	r2, [r4, #8]
   157fc:	mul	r1, sl, r7
   15800:	strd	r2, [sp, #24]
   15804:	umull	r2, r3, sl, r6
   15808:	mla	r1, r6, fp, r1
   1580c:	add	r3, r1, r3
   15810:	ldrd	r0, [sp, #24]
   15814:	cmp	r1, r3
   15818:	cmpeq	r0, r2
   1581c:	bcc	15694 <__assert_fail@plt+0x3f40>
   15820:	mov	r1, #1
   15824:	mov	sl, r2
   15828:	ldr	r0, [sp, #12]
   1582c:	mov	fp, r3
   15830:	mov	r2, r9
   15834:	mov	r3, r8
   15838:	str	r1, [sp]
   1583c:	bl	11a78 <__assert_fail@plt+0x324>
   15840:	mul	r1, sl, r7
   15844:	umull	r2, r3, sl, r6
   15848:	mla	r1, r6, fp, r1
   1584c:	add	r3, r1, r3
   15850:	ldrd	r0, [sp, #24]
   15854:	cmp	r3, r1
   15858:	cmpeq	r2, r0
   1585c:	bhi	15694 <__assert_fail@plt+0x3f40>
   15860:	b	15820 <__assert_fail@plt+0x40cc>
   15864:	ldrd	r2, [sp, #16]
   15868:	orrs	r3, r2, r3
   1586c:	bne	15d64 <__assert_fail@plt+0x4610>
   15870:	cmp	fp, #0
   15874:	cmpeq	sl, #1
   15878:	bls	15368 <__assert_fail@plt+0x3c14>
   1587c:	add	r3, pc, #828	; 0x33c
   15880:	ldrd	r2, [r3]
   15884:	cmp	fp, r3
   15888:	cmpeq	sl, r2
   1588c:	bls	15dc4 <__assert_fail@plt+0x4670>
   15890:	mov	r0, sl
   15894:	mov	r1, fp
   15898:	bl	15e14 <__assert_fail@plt+0x46c0>
   1589c:	cmp	r0, #0
   158a0:	bne	15dc4 <__assert_fail@plt+0x4670>
   158a4:	ldr	r3, [sp, #12]
   158a8:	mov	r0, sl
   158ac:	mov	r1, fp
   158b0:	mov	r2, #1
   158b4:	add	sp, sp, #92	; 0x5c
   158b8:	ldrd	r4, [sp]
   158bc:	ldrd	r6, [sp, #8]
   158c0:	ldrd	r8, [sp, #16]
   158c4:	ldrd	sl, [sp, #24]
   158c8:	ldr	lr, [sp, #32]
   158cc:	add	sp, sp, #36	; 0x24
   158d0:	b	166d4 <__assert_fail@plt+0x4f80>
   158d4:	ldrb	r6, [r5, #7]
   158d8:	mov	r7, #0
   158dc:	mov	fp, r3
   158e0:	mov	r1, #0
   158e4:	mov	sl, r2
   158e8:	ldrb	r0, [r5, #1]
   158ec:	ldrb	r2, [r5, #5]
   158f0:	strd	r6, [sp, #24]
   158f4:	ldr	r3, [sp, #28]
   158f8:	adds	r6, r0, r6
   158fc:	ldrb	r0, [r5, #6]
   15900:	adc	r7, r1, r3
   15904:	adds	r6, r6, r9
   15908:	adc	r7, r7, r8
   1590c:	mov	r1, #0
   15910:	adds	r6, r6, r0
   15914:	ldrb	r0, [r5, #4]
   15918:	mov	r3, #0
   1591c:	adc	r7, r7, r1
   15920:	adds	r6, r6, r2
   15924:	ldrb	r2, [r5, #3]
   15928:	adc	r7, r7, r3
   1592c:	mov	r1, #0
   15930:	mov	r3, #0
   15934:	adds	r6, r6, r0
   15938:	ldrb	r0, [r5, #2]
   1593c:	adc	r7, r7, r1
   15940:	mov	r1, #0
   15944:	adds	r6, r6, r2
   15948:	adc	r7, r7, r3
   1594c:	adds	r6, r6, r0
   15950:	adc	r7, r7, r1
   15954:	mov	r1, #1
   15958:	mov	r2, r6
   1595c:	ldr	r0, [sp, #12]
   15960:	mov	r3, r7
   15964:	str	r1, [sp]
   15968:	bl	11a78 <__assert_fail@plt+0x324>
   1596c:	ldr	ip, [r4, #112]	; 0x70
   15970:	ldr	lr, [r4, #116]	; 0x74
   15974:	ldrd	r0, [r4, #120]	; 0x78
   15978:	umull	r2, r3, ip, sl
   1597c:	mul	lr, sl, lr
   15980:	mla	ip, ip, fp, lr
   15984:	add	r3, ip, r3
   15988:	cmp	r3, r1
   1598c:	cmpeq	r2, r0
   15990:	bhi	157ac <__assert_fail@plt+0x4058>
   15994:	mov	sl, r2
   15998:	mov	fp, r3
   1599c:	b	15954 <__assert_fail@plt+0x4200>
   159a0:	ldrb	r0, [r5, #1]
   159a4:	mov	r1, #0
   159a8:	mov	fp, r3
   159ac:	mov	r7, #0
   159b0:	mov	sl, r2
   159b4:	ldrb	r6, [r5, #4]
   159b8:	strd	r0, [sp, #24]
   159bc:	mov	r1, #0
   159c0:	ldr	r3, [sp, #28]
   159c4:	adds	r0, r0, r6
   159c8:	ldrb	r6, [r5, #3]
   159cc:	adc	r2, r3, r7
   159d0:	mov	r7, #0
   159d4:	adds	r3, r0, r9
   159d8:	ldrb	r0, [r5, #2]
   159dc:	strd	r6, [sp, #24]
   159e0:	adc	r2, r2, r8
   159e4:	adds	r6, r3, r6
   159e8:	ldr	r3, [sp, #28]
   159ec:	adc	r7, r2, r3
   159f0:	adds	r6, r6, r0
   159f4:	adc	r7, r7, r1
   159f8:	mov	r1, #1
   159fc:	mov	r2, r6
   15a00:	ldr	r0, [sp, #12]
   15a04:	mov	r3, r7
   15a08:	str	r1, [sp]
   15a0c:	bl	11a78 <__assert_fail@plt+0x324>
   15a10:	ldr	ip, [r4, #64]	; 0x40
   15a14:	ldr	lr, [r4, #68]	; 0x44
   15a18:	ldrd	r0, [r4, #72]	; 0x48
   15a1c:	umull	r2, r3, ip, sl
   15a20:	mul	lr, sl, lr
   15a24:	mla	ip, ip, fp, lr
   15a28:	add	r3, ip, r3
   15a2c:	cmp	r3, r1
   15a30:	cmpeq	r2, r0
   15a34:	bhi	15734 <__assert_fail@plt+0x3fe0>
   15a38:	mov	sl, r2
   15a3c:	mov	fp, r3
   15a40:	b	159f8 <__assert_fail@plt+0x42a4>
   15a44:	ldrb	r2, [r5, #1]
   15a48:	mov	r3, #0
   15a4c:	mov	fp, r1
   15a50:	mov	r7, r3
   15a54:	mov	r3, #0
   15a58:	mov	sl, r0
   15a5c:	mov	r6, r2
   15a60:	ldrb	r2, [r5, #3]
   15a64:	strd	r6, [sp, #24]
   15a68:	ldr	r1, [sp, #28]
   15a6c:	adds	r6, r6, r2
   15a70:	ldrb	r2, [r5, #2]
   15a74:	adc	r7, r1, r3
   15a78:	adds	r6, r6, r9
   15a7c:	adc	r7, r7, r8
   15a80:	mov	r3, #0
   15a84:	adds	r6, r6, r2
   15a88:	adc	r7, r7, r3
   15a8c:	mov	r1, #1
   15a90:	mov	r2, r6
   15a94:	ldr	r0, [sp, #12]
   15a98:	mov	r3, r7
   15a9c:	str	r1, [sp]
   15aa0:	bl	11a78 <__assert_fail@plt+0x324>
   15aa4:	ldr	ip, [r4, #48]	; 0x30
   15aa8:	ldr	lr, [r4, #52]	; 0x34
   15aac:	ldrd	r0, [r4, #56]	; 0x38
   15ab0:	umull	r2, r3, ip, sl
   15ab4:	mul	lr, sl, lr
   15ab8:	mla	ip, ip, fp, lr
   15abc:	add	r3, ip, r3
   15ac0:	cmp	r3, r1
   15ac4:	cmpeq	r2, r0
   15ac8:	bhi	1570c <__assert_fail@plt+0x3fb8>
   15acc:	mov	sl, r2
   15ad0:	mov	fp, r3
   15ad4:	b	15a8c <__assert_fail@plt+0x4338>
   15ad8:	ldrb	r2, [r5, #1]
   15adc:	mov	r3, #0
   15ae0:	mov	fp, r1
   15ae4:	mov	r7, r3
   15ae8:	mov	r3, #0
   15aec:	mov	sl, r0
   15af0:	mov	r6, r2
   15af4:	ldrb	r2, [r5, #2]
   15af8:	strd	r6, [sp, #24]
   15afc:	ldr	r1, [sp, #28]
   15b00:	adds	r6, r6, r2
   15b04:	adc	r7, r1, r3
   15b08:	adds	r6, r6, r9
   15b0c:	adc	r7, r7, r8
   15b10:	mov	r1, #1
   15b14:	mov	r2, r6
   15b18:	ldr	r0, [sp, #12]
   15b1c:	mov	r3, r7
   15b20:	str	r1, [sp]
   15b24:	bl	11a78 <__assert_fail@plt+0x324>
   15b28:	ldr	ip, [r4, #32]
   15b2c:	ldr	lr, [r4, #36]	; 0x24
   15b30:	ldrd	r0, [r4, #40]	; 0x28
   15b34:	umull	r2, r3, ip, sl
   15b38:	mul	lr, sl, lr
   15b3c:	mla	ip, ip, fp, lr
   15b40:	add	r3, ip, r3
   15b44:	cmp	r3, r1
   15b48:	cmpeq	r2, r0
   15b4c:	bhi	156e4 <__assert_fail@plt+0x3f90>
   15b50:	mov	sl, r2
   15b54:	mov	fp, r3
   15b58:	b	15b10 <__assert_fail@plt+0x43bc>
   15b5c:	ldrb	r0, [r5, #1]
   15b60:	mov	r1, #0
   15b64:	mov	sl, r2
   15b68:	mov	fp, r3
   15b6c:	adds	r6, r0, r9
   15b70:	adc	r7, r1, r8
   15b74:	mov	r1, #1
   15b78:	mov	r2, r6
   15b7c:	ldr	r0, [sp, #12]
   15b80:	mov	r3, r7
   15b84:	str	r1, [sp]
   15b88:	bl	11a78 <__assert_fail@plt+0x324>
   15b8c:	ldr	ip, [r4, #16]
   15b90:	ldr	lr, [r4, #20]
   15b94:	ldrd	r0, [r4, #24]
   15b98:	umull	r2, r3, ip, sl
   15b9c:	mul	lr, sl, lr
   15ba0:	mla	ip, ip, fp, lr
   15ba4:	add	r3, ip, r3
   15ba8:	cmp	r3, r1
   15bac:	cmpeq	r2, r0
   15bb0:	bhi	156bc <__assert_fail@plt+0x3f68>
   15bb4:	mov	sl, r2
   15bb8:	mov	fp, r3
   15bbc:	b	15b74 <__assert_fail@plt+0x4420>
   15bc0:	cmneq	sp, r8, ror sp
   15bc4:	andeq	r0, r0, r0
   15bc8:	andeq	r1, r2, r0, asr #10
   15bcc:	andeq	r1, r2, r4, ror #16
   15bd0:	ldrb	r6, [r5, #6]
   15bd4:	mov	r7, #0
   15bd8:	mov	fp, r3
   15bdc:	mov	sl, r2
   15be0:	mov	r1, #0
   15be4:	ldrb	r0, [r5, #1]
   15be8:	ldrb	r2, [r5, #5]
   15bec:	strd	r6, [sp, #24]
   15bf0:	ldr	r3, [sp, #28]
   15bf4:	adds	r6, r0, r6
   15bf8:	ldrb	r0, [r5, #4]
   15bfc:	adc	r7, r1, r3
   15c00:	adds	r6, r6, r9
   15c04:	mov	r3, #0
   15c08:	adc	r7, r7, r8
   15c0c:	adds	r6, r6, r2
   15c10:	ldrb	r2, [r5, #3]
   15c14:	mov	r1, #0
   15c18:	adc	r7, r7, r3
   15c1c:	adds	r6, r6, r0
   15c20:	ldrb	r0, [r5, #2]
   15c24:	adc	r7, r7, r1
   15c28:	mov	r3, #0
   15c2c:	mov	r1, #0
   15c30:	adds	r6, r6, r2
   15c34:	adc	r7, r7, r3
   15c38:	adds	r6, r6, r0
   15c3c:	adc	r7, r7, r1
   15c40:	mov	r1, #1
   15c44:	mov	r2, r6
   15c48:	ldr	r0, [sp, #12]
   15c4c:	mov	r3, r7
   15c50:	str	r1, [sp]
   15c54:	bl	11a78 <__assert_fail@plt+0x324>
   15c58:	ldr	ip, [r4, #96]	; 0x60
   15c5c:	ldr	lr, [r4, #100]	; 0x64
   15c60:	ldrd	r0, [r4, #104]	; 0x68
   15c64:	umull	r2, r3, ip, sl
   15c68:	mul	lr, sl, lr
   15c6c:	mla	ip, ip, fp, lr
   15c70:	add	r3, ip, r3
   15c74:	cmp	r3, r1
   15c78:	cmpeq	r2, r0
   15c7c:	bhi	15784 <__assert_fail@plt+0x4030>
   15c80:	mov	sl, r2
   15c84:	mov	fp, r3
   15c88:	b	15c40 <__assert_fail@plt+0x44ec>
   15c8c:	ldrb	r0, [r5, #1]
   15c90:	mov	r1, #0
   15c94:	mov	fp, r3
   15c98:	mov	r7, #0
   15c9c:	mov	sl, r2
   15ca0:	ldrb	r6, [r5, #5]
   15ca4:	strd	r0, [sp, #24]
   15ca8:	mov	r1, #0
   15cac:	ldr	r3, [sp, #28]
   15cb0:	adds	r0, r0, r6
   15cb4:	ldrb	r6, [r5, #4]
   15cb8:	adc	r2, r3, r7
   15cbc:	mov	r7, #0
   15cc0:	adds	r3, r0, r9
   15cc4:	ldrb	r0, [r5, #3]
   15cc8:	strd	r6, [sp, #24]
   15ccc:	adc	r2, r2, r8
   15cd0:	adds	r6, r3, r6
   15cd4:	ldr	r3, [sp, #28]
   15cd8:	adc	r7, r2, r3
   15cdc:	ldrb	r2, [r5, #2]
   15ce0:	adds	r6, r6, r0
   15ce4:	adc	r7, r7, r1
   15ce8:	mov	r3, #0
   15cec:	adds	r6, r6, r2
   15cf0:	adc	r7, r7, r3
   15cf4:	mov	r1, #1
   15cf8:	mov	r2, r6
   15cfc:	ldr	r0, [sp, #12]
   15d00:	mov	r3, r7
   15d04:	str	r1, [sp]
   15d08:	bl	11a78 <__assert_fail@plt+0x324>
   15d0c:	ldr	ip, [r4, #80]	; 0x50
   15d10:	ldr	lr, [r4, #84]	; 0x54
   15d14:	ldrd	r0, [r4, #88]	; 0x58
   15d18:	umull	r2, r3, ip, sl
   15d1c:	mul	lr, sl, lr
   15d20:	mla	ip, ip, fp, lr
   15d24:	add	r3, ip, r3
   15d28:	cmp	r3, r1
   15d2c:	cmpeq	r2, r0
   15d30:	bhi	1575c <__assert_fail@plt+0x4008>
   15d34:	mov	sl, r2
   15d38:	mov	fp, r3
   15d3c:	b	15cf4 <__assert_fail@plt+0x45a0>
   15d40:	mov	r1, #1
   15d44:	ldr	r0, [sp, #12]
   15d48:	str	r1, [sp]
   15d4c:	ldr	r2, [sp, #24]
   15d50:	strd	r4, [sp, #16]
   15d54:	ldr	r3, [sp, #36]	; 0x24
   15d58:	strd	r6, [sp, #64]	; 0x40
   15d5c:	bl	11a78 <__assert_fail@plt+0x324>
   15d60:	b	15548 <__assert_fail@plt+0x3df4>
   15d64:	mov	r2, sl
   15d68:	mov	r3, fp
   15d6c:	ldrd	r0, [sp, #16]
   15d70:	bl	1480c <__assert_fail@plt+0x30b8>
   15d74:	cmp	r0, #0
   15d78:	bne	15da0 <__assert_fail@plt+0x464c>
   15d7c:	ldr	r1, [sp, #12]
   15d80:	mov	ip, #1
   15d84:	mov	r2, sl
   15d88:	mov	r3, fp
   15d8c:	str	ip, [sp]
   15d90:	str	r1, [sp, #4]
   15d94:	ldrd	r0, [sp, #16]
   15d98:	bl	174a4 <__assert_fail@plt+0x5d50>
   15d9c:	b	15368 <__assert_fail@plt+0x3c14>
   15da0:	ldr	r3, [sp, #12]
   15da4:	ldrd	r2, [r3, #8]
   15da8:	orrs	r3, r2, r3
   15dac:	bne	15e10 <__assert_fail@plt+0x46bc>
   15db0:	ldr	r1, [sp, #12]
   15db4:	ldrd	r2, [sp, #16]
   15db8:	strd	sl, [r1]
   15dbc:	strd	r2, [r1, #8]
   15dc0:	b	15368 <__assert_fail@plt+0x3c14>
   15dc4:	ldr	r0, [sp, #12]
   15dc8:	mov	r1, #1
   15dcc:	mov	r2, sl
   15dd0:	mov	r3, fp
   15dd4:	str	r1, [sp, #128]	; 0x80
   15dd8:	add	sp, sp, #92	; 0x5c
   15ddc:	ldrd	r4, [sp]
   15de0:	ldrd	r6, [sp, #8]
   15de4:	ldrd	r8, [sp, #16]
   15de8:	ldrd	sl, [sp, #24]
   15dec:	ldr	lr, [sp, #32]
   15df0:	add	sp, sp, #36	; 0x24
   15df4:	b	11a78 <__assert_fail@plt+0x324>
   15df8:	mov	r1, #64	; 0x40
   15dfc:	b	1540c <__assert_fail@plt+0x3cb8>
   15e00:	movw	r3, #7088	; 0x1bb0
   15e04:	movt	r3, #2
   15e08:	str	r3, [sp, #84]	; 0x54
   15e0c:	b	15444 <__assert_fail@plt+0x3cf0>
   15e10:	bl	126c4 <__assert_fail@plt+0xf70>
   15e14:	subs	ip, r0, #1
   15e18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e1c:	mov	r4, r0
   15e20:	strd	r6, [sp, #8]
   15e24:	mov	r5, r1
   15e28:	strd	r8, [sp, #16]
   15e2c:	strd	sl, [sp, #24]
   15e30:	str	lr, [sp, #32]
   15e34:	sub	sp, sp, #516	; 0x204
   15e38:	sbc	lr, r1, #0
   15e3c:	strd	r4, [sp, #120]	; 0x78
   15e40:	str	ip, [sp, #192]	; 0xc0
   15e44:	mov	ip, #0
   15e48:	str	lr, [sp, #196]	; 0xc4
   15e4c:	mov	r1, ip
   15e50:	ldrd	r4, [sp, #192]	; 0xc0
   15e54:	and	r0, r4, #1
   15e58:	orrs	r1, r0, r1
   15e5c:	bne	16678 <__assert_fail@plt+0x4f24>
   15e60:	mov	r1, ip
   15e64:	mov	r0, r4
   15e68:	mov	lr, r5
   15e6c:	lsr	r0, r0, #1
   15e70:	mov	r3, ip
   15e74:	add	r1, r1, #1
   15e78:	orr	r0, r0, lr, lsl #31
   15e7c:	lsr	lr, lr, #1
   15e80:	and	r2, r0, #1
   15e84:	orrs	r4, r2, r3
   15e88:	beq	15e6c <__assert_fail@plt+0x4718>
   15e8c:	str	r1, [sp, #236]	; 0xec
   15e90:	str	r0, [sp, #240]	; 0xf0
   15e94:	str	lr, [sp, #244]	; 0xf4
   15e98:	ldrd	sl, [sp, #120]	; 0x78
   15e9c:	movw	r3, #5408	; 0x1520
   15ea0:	movt	r3, #2
   15ea4:	mov	r8, #0
   15ea8:	mov	ip, #64	; 0x40
   15eac:	mov	r0, #0
   15eb0:	mov	r1, #0
   15eb4:	mov	r4, #1
   15eb8:	mov	r5, #0
   15ebc:	ubfx	r2, sl, #1, #7
   15ec0:	strd	sl, [sp, #40]	; 0x28
   15ec4:	strd	r0, [sp, #176]	; 0xb0
   15ec8:	add	r3, r3, r2
   15ecc:	mov	r2, ip
   15ed0:	ldrb	lr, [r3, #708]	; 0x2c4
   15ed4:	mov	ip, r8
   15ed8:	umull	r6, r7, lr, lr
   15edc:	adds	lr, lr, lr
   15ee0:	adc	r8, r8, r8
   15ee4:	mul	r9, r6, fp
   15ee8:	mla	r9, sl, r7, r9
   15eec:	umull	r6, r7, r6, sl
   15ef0:	subs	lr, lr, r6
   15ef4:	add	r7, r9, r7
   15ef8:	sbc	r8, r8, r7
   15efc:	umull	sl, fp, lr, lr
   15f00:	mul	r6, lr, r8
   15f04:	adds	lr, lr, lr
   15f08:	adc	r8, r8, r8
   15f0c:	add	fp, fp, r6, lsl #1
   15f10:	ldrd	r6, [sp, #120]	; 0x78
   15f14:	mul	r9, sl, r7
   15f18:	mla	r9, r6, fp, r9
   15f1c:	umull	sl, fp, sl, r6
   15f20:	subs	lr, lr, sl
   15f24:	add	fp, r9, fp
   15f28:	sbc	r8, r8, fp
   15f2c:	umull	sl, fp, lr, lr
   15f30:	mul	r6, lr, r8
   15f34:	adds	lr, lr, lr
   15f38:	adc	r8, r8, r8
   15f3c:	add	fp, fp, r6, lsl #1
   15f40:	ldrd	r6, [sp, #120]	; 0x78
   15f44:	mul	r9, sl, r7
   15f48:	mov	r7, r1
   15f4c:	mla	r9, r6, fp, r9
   15f50:	umull	sl, fp, sl, r6
   15f54:	mov	r6, r0
   15f58:	subs	r3, lr, sl
   15f5c:	add	fp, r9, fp
   15f60:	str	r3, [sp, #140]	; 0x8c
   15f64:	sbc	r3, r8, fp
   15f68:	mov	r8, r2
   15f6c:	str	r3, [sp, #144]	; 0x90
   15f70:	ldrd	r2, [sp, #40]	; 0x28
   15f74:	lsr	lr, r0, #1
   15f78:	lsr	r9, r3, #1
   15f7c:	orr	r0, lr, r1, lsl #31
   15f80:	lsr	lr, r2, #1
   15f84:	cmp	r9, r5
   15f88:	lsr	sl, r1, #1
   15f8c:	orr	lr, lr, r3, lsl #31
   15f90:	mov	r3, r9
   15f94:	orr	r1, sl, r2, lsl #31
   15f98:	cmpeq	lr, r4
   15f9c:	mov	r2, lr
   15fa0:	bcc	15fc8 <__assert_fail@plt+0x4874>
   15fa4:	cmp	r1, r7
   15fa8:	cmpeq	r0, r6
   15fac:	movls	lr, #1
   15fb0:	movhi	lr, #0
   15fb4:	cmp	r9, r5
   15fb8:	cmpeq	r2, r4
   15fbc:	movne	lr, #0
   15fc0:	cmp	lr, #0
   15fc4:	beq	15ff0 <__assert_fail@plt+0x489c>
   15fc8:	cmp	r1, r7
   15fcc:	cmpeq	r0, r6
   15fd0:	movhi	r9, #1
   15fd4:	movls	r9, #0
   15fd8:	subs	r6, r6, r0
   15fdc:	sbc	r7, r7, r1
   15fe0:	subs	sl, r4, r2
   15fe4:	sbc	fp, r5, r3
   15fe8:	subs	r4, sl, r9
   15fec:	sbc	r5, fp, ip
   15ff0:	subs	r8, r8, #1
   15ff4:	bne	15f74 <__assert_fail@plt+0x4820>
   15ff8:	mov	r4, r6
   15ffc:	mov	r5, r7
   16000:	ldrd	r6, [sp, #120]	; 0x78
   16004:	strd	r4, [sp, #24]
   16008:	ldr	r1, [sp, #244]	; 0xf4
   1600c:	subs	r3, r6, r4
   16010:	ldr	r2, [sp, #140]	; 0x8c
   16014:	str	r3, [sp, #32]
   16018:	ldr	r3, [sp, #240]	; 0xf0
   1601c:	str	r8, [sp, #132]	; 0x84
   16020:	strd	r4, [sp, #176]	; 0xb0
   16024:	str	r3, [sp, #8]
   16028:	sbc	r3, r7, r5
   1602c:	str	r1, [sp, #12]
   16030:	str	r3, [sp, #36]	; 0x24
   16034:	ldrd	r0, [sp, #32]
   16038:	ldr	r3, [sp, #144]	; 0x90
   1603c:	cmp	r1, r5
   16040:	ldr	r1, [sp, #236]	; 0xec
   16044:	cmpeq	r0, r4
   16048:	movhi	r0, #1
   1604c:	movls	r0, #0
   16050:	rsbs	sl, r0, #0
   16054:	sbc	fp, fp, fp
   16058:	adds	ip, r4, r4
   1605c:	and	lr, sl, r6
   16060:	adc	r0, r5, r5
   16064:	str	r1, [sp, #16]
   16068:	subs	ip, ip, r6
   1606c:	mov	r1, r7
   16070:	sbc	r0, r0, r7
   16074:	and	r1, r1, fp
   16078:	adds	ip, lr, ip
   1607c:	adc	r1, r1, r0
   16080:	mov	r0, r6
   16084:	str	ip, [sp, #160]	; 0xa0
   16088:	str	r1, [sp, #164]	; 0xa4
   1608c:	mov	r1, r7
   16090:	ldrd	sl, [sp, #160]	; 0xa0
   16094:	strd	sl, [sp]
   16098:	bl	12e08 <__assert_fail@plt+0x16b4>
   1609c:	subs	r3, r0, #0
   160a0:	str	r3, [sp, #252]	; 0xfc
   160a4:	beq	1666c <__assert_fail@plt+0x4f18>
   160a8:	add	ip, sp, #256	; 0x100
   160ac:	mov	r0, #0
   160b0:	ldrd	r2, [sp, #192]	; 0xc0
   160b4:	mov	r1, #0
   160b8:	str	ip, [sp]
   160bc:	str	r7, [sp, #148]	; 0x94
   160c0:	bl	152f8 <__assert_fail@plt+0x3ba4>
   160c4:	ldrb	r3, [sp, #506]	; 0x1fa
   160c8:	cmp	r3, #0
   160cc:	str	r3, [sp, #216]	; 0xd8
   160d0:	str	r5, [sp, #248]	; 0xf8
   160d4:	beq	1664c <__assert_fail@plt+0x4ef8>
   160d8:	ldr	r3, [pc, #1516]	; 166cc <__assert_fail@plt+0x4f78>
   160dc:	mov	r4, #2
   160e0:	mov	r5, #0
   160e4:	mov	fp, r8
   160e8:	str	r3, [sp, #220]	; 0xdc
   160ec:	mov	r3, #1
   160f0:	strd	r4, [sp, #224]	; 0xe0
   160f4:	str	r3, [sp, #232]	; 0xe8
   160f8:	add	r3, sp, #264	; 0x108
   160fc:	str	r3, [sp, #188]	; 0xbc
   16100:	mov	r3, #0
   16104:	str	r3, [sp, #184]	; 0xb8
   16108:	ldr	r3, [sp, #188]	; 0xbc
   1610c:	ldrd	r0, [sp, #192]	; 0xc0
   16110:	ldrd	r4, [r3, #8]!
   16114:	mov	r2, r4
   16118:	str	r3, [sp, #188]	; 0xbc
   1611c:	mov	r3, r5
   16120:	bl	21320 <__assert_fail@plt+0xfbcc>
   16124:	and	r3, r0, #1
   16128:	strd	r0, [sp, #32]
   1612c:	str	fp, [sp, #172]	; 0xac
   16130:	str	r3, [sp, #168]	; 0xa8
   16134:	ldrd	r2, [sp, #168]	; 0xa8
   16138:	orrs	r3, r2, r3
   1613c:	ldrd	r2, [sp, #192]	; 0xc0
   16140:	ldrdne	r0, [sp, #160]	; 0xa0
   16144:	ldrdeq	r0, [sp, #176]	; 0xb0
   16148:	cmp	r3, r5
   1614c:	cmpeq	r2, r4
   16150:	bcc	16410 <__assert_fail@plt+0x4cbc>
   16154:	ldr	r3, [sp, #120]	; 0x78
   16158:	str	r3, [sp, #136]	; 0x88
   1615c:	ldrd	r2, [sp, #160]	; 0xa0
   16160:	mov	ip, r2
   16164:	mov	sl, r3
   16168:	umull	r4, r5, sl, ip
   1616c:	umull	r2, r3, ip, ip
   16170:	adds	r6, r4, r4
   16174:	adc	r8, r5, r5
   16178:	strd	r2, [sp, #40]	; 0x28
   1617c:	adds	r3, r3, r6
   16180:	umull	r6, r7, sl, sl
   16184:	str	r3, [sp, #48]	; 0x30
   16188:	adc	r3, fp, r8
   1618c:	str	r3, [sp, #52]	; 0x34
   16190:	ldrd	r2, [sp, #48]	; 0x30
   16194:	cmp	r5, r3
   16198:	cmpeq	r4, r2
   1619c:	bls	161a8 <__assert_fail@plt+0x4a54>
   161a0:	adds	r6, r6, #0
   161a4:	adc	r7, r7, #1
   161a8:	mov	lr, #0
   161ac:	ldr	ip, [sp, #40]	; 0x28
   161b0:	ldrd	r4, [sp, #48]	; 0x30
   161b4:	ldr	sl, [sp, #148]	; 0x94
   161b8:	adds	r3, r5, r6
   161bc:	str	r3, [sp, #80]	; 0x50
   161c0:	adc	r3, lr, r7
   161c4:	adds	r2, lr, ip
   161c8:	adc	r4, r4, lr
   161cc:	str	r3, [sp, #84]	; 0x54
   161d0:	ldr	r3, [sp, #144]	; 0x90
   161d4:	mul	r5, r2, r3
   161d8:	ldr	r3, [sp, #140]	; 0x8c
   161dc:	umull	r6, r7, r2, r3
   161e0:	ldr	r2, [sp, #136]	; 0x88
   161e4:	mla	ip, r3, r4, r5
   161e8:	mov	r9, r7
   161ec:	mov	r8, r6
   161f0:	umull	r6, r7, sl, r6
   161f4:	add	r3, ip, r9
   161f8:	ldr	ip, [sp, #132]	; 0x84
   161fc:	strd	r8, [sp, #40]	; 0x28
   16200:	umull	r4, r5, r8, r2
   16204:	mla	r7, ip, r8, r7
   16208:	umull	r8, r9, r3, r2
   1620c:	ldr	r2, [sp, #40]	; 0x28
   16210:	mla	r9, r3, fp, r9
   16214:	mla	r2, fp, r2, r5
   16218:	umull	r4, r5, r3, sl
   1621c:	mla	r5, r3, ip, r5
   16220:	adds	r3, r6, r8
   16224:	adc	ip, r7, r9
   16228:	adds	r3, r2, r3
   1622c:	str	r3, [sp, #56]	; 0x38
   16230:	adc	r3, lr, ip
   16234:	str	r3, [sp, #60]	; 0x3c
   16238:	ldrd	r2, [sp, #56]	; 0x38
   1623c:	cmp	r9, r3
   16240:	cmpeq	r8, r2
   16244:	bls	16250 <__assert_fail@plt+0x4afc>
   16248:	adds	r4, r4, lr
   1624c:	adc	r5, r5, #1
   16250:	ldr	r3, [sp, #60]	; 0x3c
   16254:	mov	r2, #0
   16258:	adds	r3, r3, r4
   1625c:	str	r3, [sp, #88]	; 0x58
   16260:	adc	r3, r2, r5
   16264:	str	r3, [sp, #92]	; 0x5c
   16268:	ldrd	r2, [sp, #80]	; 0x50
   1626c:	ldrd	r4, [sp, #88]	; 0x58
   16270:	subs	ip, r2, r4
   16274:	sbc	sl, r3, r5
   16278:	cmp	r3, r5
   1627c:	cmpeq	r2, r4
   16280:	bcs	16290 <__assert_fail@plt+0x4b3c>
   16284:	ldrd	r2, [sp, #120]	; 0x78
   16288:	adds	ip, ip, r2
   1628c:	adc	sl, sl, r3
   16290:	ldrd	r4, [sp, #32]
   16294:	str	fp, [sp, #116]	; 0x74
   16298:	lsr	r3, r4, #1
   1629c:	mov	lr, r5
   162a0:	lsr	r2, r5, #1
   162a4:	orr	r3, r3, r5, lsl #31
   162a8:	str	r3, [sp, #32]
   162ac:	and	r3, r3, #1
   162b0:	str	r2, [sp, #36]	; 0x24
   162b4:	str	r3, [sp, #112]	; 0x70
   162b8:	ldrd	r2, [sp, #112]	; 0x70
   162bc:	orrs	r3, r2, r3
   162c0:	beq	16404 <__assert_fail@plt+0x4cb0>
   162c4:	umull	r2, r3, r1, ip
   162c8:	umull	r6, r7, r0, ip
   162cc:	mov	r4, r2
   162d0:	mov	r5, r3
   162d4:	umlal	r4, r5, r0, sl
   162d8:	adds	r8, r7, r4
   162dc:	adc	lr, fp, r5
   162e0:	umull	r4, r5, r1, sl
   162e4:	str	r8, [sp, #64]	; 0x40
   162e8:	str	lr, [sp, #68]	; 0x44
   162ec:	ldrd	r8, [sp, #64]	; 0x40
   162f0:	cmp	r3, r9
   162f4:	cmpeq	r2, r8
   162f8:	bls	16304 <__assert_fail@plt+0x4bb0>
   162fc:	adds	r4, r4, #0
   16300:	adc	r5, r5, #1
   16304:	ldrd	r8, [sp, #64]	; 0x40
   16308:	mov	lr, #0
   1630c:	ldr	r7, [sp, #148]	; 0x94
   16310:	adds	r3, r9, r4
   16314:	str	r3, [sp, #96]	; 0x60
   16318:	adc	r3, lr, r5
   1631c:	adds	r2, lr, r6
   16320:	adc	r4, r8, lr
   16324:	str	r3, [sp, #100]	; 0x64
   16328:	ldr	r3, [sp, #144]	; 0x90
   1632c:	mul	r5, r2, r3
   16330:	ldr	r3, [sp, #140]	; 0x8c
   16334:	umull	r8, r9, r2, r3
   16338:	mla	r6, r3, r4, r5
   1633c:	umull	r2, r3, r7, r8
   16340:	strd	r2, [sp, #40]	; 0x28
   16344:	add	r3, r6, r9
   16348:	strd	r8, [sp, #152]	; 0x98
   1634c:	mov	r9, r8
   16350:	ldr	r2, [sp, #136]	; 0x88
   16354:	ldr	r6, [sp, #132]	; 0x84
   16358:	umull	r4, r5, r8, r2
   1635c:	ldr	r8, [sp, #44]	; 0x2c
   16360:	mov	r4, r7
   16364:	mla	r8, r6, r9, r8
   16368:	str	r8, [sp, #44]	; 0x2c
   1636c:	umull	r8, r9, r3, r2
   16370:	ldr	r2, [sp, #152]	; 0x98
   16374:	mla	r7, r3, fp, r9
   16378:	ldr	r9, [sp, #44]	; 0x2c
   1637c:	mla	r2, fp, r2, r5
   16380:	umull	r4, r5, r4, r3
   16384:	mla	r5, r3, r6, r5
   16388:	mov	r6, r8
   1638c:	ldr	r8, [sp, #40]	; 0x28
   16390:	adds	r3, r8, r6
   16394:	adc	r8, r9, r7
   16398:	adds	r3, r2, r3
   1639c:	str	r3, [sp, #72]	; 0x48
   163a0:	adc	r3, lr, r8
   163a4:	str	r3, [sp, #76]	; 0x4c
   163a8:	ldrd	r2, [sp, #72]	; 0x48
   163ac:	cmp	r7, r3
   163b0:	cmpeq	r6, r2
   163b4:	bls	163c0 <__assert_fail@plt+0x4c6c>
   163b8:	adds	r4, r4, lr
   163bc:	adc	r5, r5, #1
   163c0:	ldr	r3, [sp, #76]	; 0x4c
   163c4:	mov	r2, #0
   163c8:	adds	r3, r3, r4
   163cc:	str	r3, [sp, #104]	; 0x68
   163d0:	adc	r3, r2, r5
   163d4:	str	r3, [sp, #108]	; 0x6c
   163d8:	ldrd	r2, [sp, #96]	; 0x60
   163dc:	ldrd	r4, [sp, #104]	; 0x68
   163e0:	subs	r0, r2, r4
   163e4:	sbc	r1, r3, r5
   163e8:	cmp	r3, r5
   163ec:	cmpeq	r2, r4
   163f0:	bcs	16168 <__assert_fail@plt+0x4a14>
   163f4:	ldrd	r2, [sp, #120]	; 0x78
   163f8:	adds	r0, r0, r2
   163fc:	adc	r1, r1, r3
   16400:	b	16168 <__assert_fail@plt+0x4a14>
   16404:	ldrd	r2, [sp, #32]
   16408:	orrs	r3, r2, r3
   1640c:	bne	16168 <__assert_fail@plt+0x4a14>
   16410:	ldr	r3, [sp, #184]	; 0xb8
   16414:	ldr	r2, [sp, #216]	; 0xd8
   16418:	add	r3, r3, #1
   1641c:	cmp	r3, r2
   16420:	str	r3, [sp, #184]	; 0xb8
   16424:	ldrd	r2, [sp, #176]	; 0xb0
   16428:	beq	16640 <__assert_fail@plt+0x4eec>
   1642c:	cmp	r1, r3
   16430:	cmpeq	r0, r2
   16434:	bne	16108 <__assert_fail@plt+0x49b4>
   16438:	mov	r3, #0
   1643c:	ldrd	r6, [sp, #176]	; 0xb0
   16440:	ldr	r1, [sp, #220]	; 0xdc
   16444:	ldr	r0, [sp, #228]	; 0xe4
   16448:	ldr	sl, [sp, #248]	; 0xf8
   1644c:	ldrb	r2, [r1], #1
   16450:	str	r1, [sp, #220]	; 0xdc
   16454:	ldr	r1, [sp, #224]	; 0xe0
   16458:	adds	r1, r1, r2
   1645c:	adc	r2, r0, r3
   16460:	ldr	r0, [sp, #132]	; 0x84
   16464:	mov	r3, r1
   16468:	umull	r8, r9, sl, r1
   1646c:	str	r1, [sp, #224]	; 0xe0
   16470:	umull	r4, r5, r6, r3
   16474:	str	r2, [sp, #228]	; 0xe4
   16478:	mla	r9, r0, r1, r9
   1647c:	mov	r3, r5
   16480:	mov	lr, r4
   16484:	mov	r4, r8
   16488:	ldr	r0, [sp, #132]	; 0x84
   1648c:	mov	r5, r9
   16490:	umlal	r4, r5, r6, r2
   16494:	adds	r3, r3, r4
   16498:	mov	r4, r2
   1649c:	str	r3, [sp, #208]	; 0xd0
   164a0:	adc	r3, fp, r5
   164a4:	str	r3, [sp, #212]	; 0xd4
   164a8:	umull	r2, r3, sl, r2
   164ac:	strd	r2, [sp, #32]
   164b0:	adds	r3, fp, lr
   164b4:	str	r3, [sp, #160]	; 0xa0
   164b8:	ldrd	r2, [sp, #208]	; 0xd0
   164bc:	adc	ip, r2, fp
   164c0:	mov	r1, r3
   164c4:	cmp	r9, r3
   164c8:	ldr	r3, [sp, #36]	; 0x24
   164cc:	cmpeq	r8, r2
   164d0:	str	ip, [sp, #164]	; 0xa4
   164d4:	mla	r3, r0, r4, r3
   164d8:	str	r3, [sp, #36]	; 0x24
   164dc:	ldrd	r4, [sp, #32]
   164e0:	bls	16608 <__assert_fail@plt+0x4eb4>
   164e4:	adds	r2, r4, #0
   164e8:	adc	r3, r5, #1
   164ec:	adds	r2, r2, r1
   164f0:	adc	r3, r3, fp
   164f4:	strd	r2, [sp, #200]	; 0xc8
   164f8:	ldrd	r2, [sp, #120]	; 0x78
   164fc:	ldrd	r0, [sp, #200]	; 0xc8
   16500:	cmp	r3, r1
   16504:	cmpeq	r2, r0
   16508:	bls	166b0 <__assert_fail@plt+0x4f5c>
   1650c:	ldrd	r6, [sp, #160]	; 0xa0
   16510:	mov	r4, r0
   16514:	mov	r5, r1
   16518:	mov	lr, #64	; 0x40
   1651c:	mov	r0, #0
   16520:	mov	r1, #0
   16524:	lsr	ip, r0, #1
   16528:	lsr	r8, r3, #1
   1652c:	orr	r0, ip, r1, lsl #31
   16530:	lsr	ip, r2, #1
   16534:	cmp	r8, r5
   16538:	lsr	r9, r1, #1
   1653c:	orr	ip, ip, r3, lsl #31
   16540:	mov	r3, r8
   16544:	orr	r1, r9, r2, lsl #31
   16548:	cmpeq	ip, r4
   1654c:	mov	r2, ip
   16550:	bcc	16578 <__assert_fail@plt+0x4e24>
   16554:	cmp	r1, r7
   16558:	cmpeq	r0, r6
   1655c:	movls	ip, #1
   16560:	movhi	ip, #0
   16564:	cmp	r8, r5
   16568:	cmpeq	r2, r4
   1656c:	movne	ip, #0
   16570:	cmp	ip, #0
   16574:	beq	165a0 <__assert_fail@plt+0x4e4c>
   16578:	cmp	r1, r7
   1657c:	cmpeq	r0, r6
   16580:	movhi	r8, #1
   16584:	movls	r8, #0
   16588:	subs	r6, r6, r0
   1658c:	sbc	r7, r7, r1
   16590:	subs	r9, r4, r2
   16594:	sbc	sl, r5, r3
   16598:	subs	r4, r9, r8
   1659c:	sbc	r5, sl, fp
   165a0:	subs	lr, lr, #1
   165a4:	bne	16524 <__assert_fail@plt+0x4dd0>
   165a8:	mov	r0, r6
   165ac:	mov	r1, r7
   165b0:	strd	r6, [sp, #160]	; 0xa0
   165b4:	strd	r4, [sp, #200]	; 0xc8
   165b8:	strd	r0, [sp]
   165bc:	ldr	ip, [sp, #240]	; 0xf0
   165c0:	ldrd	r4, [sp, #176]	; 0xb0
   165c4:	ldrd	r0, [sp, #120]	; 0x78
   165c8:	str	ip, [sp, #8]
   165cc:	ldrd	r2, [sp, #140]	; 0x8c
   165d0:	strd	r4, [sp, #24]
   165d4:	ldr	ip, [sp, #244]	; 0xf4
   165d8:	str	ip, [sp, #12]
   165dc:	ldr	ip, [sp, #236]	; 0xec
   165e0:	str	ip, [sp, #16]
   165e4:	bl	12e08 <__assert_fail@plt+0x16b4>
   165e8:	cmp	r0, #0
   165ec:	beq	1666c <__assert_fail@plt+0x4f18>
   165f0:	ldr	r3, [sp, #232]	; 0xe8
   165f4:	cmp	r3, #668	; 0x29c
   165f8:	beq	16688 <__assert_fail@plt+0x4f34>
   165fc:	add	r3, r3, #1
   16600:	str	r3, [sp, #232]	; 0xe8
   16604:	b	160f8 <__assert_fail@plt+0x49a4>
   16608:	adds	r3, r4, r1
   1660c:	str	r3, [sp, #200]	; 0xc8
   16610:	adc	r3, r5, fp
   16614:	str	r3, [sp, #204]	; 0xcc
   16618:	ldrd	r2, [sp, #200]	; 0xc8
   1661c:	orrs	r3, r2, r3
   16620:	bne	164f8 <__assert_fail@plt+0x4da4>
   16624:	ldrd	r2, [sp, #120]	; 0x78
   16628:	ldrd	r0, [sp, #160]	; 0xa0
   1662c:	bl	21320 <__assert_fail@plt+0xfbcc>
   16630:	mov	r0, r2
   16634:	mov	r1, r3
   16638:	strd	r2, [sp, #160]	; 0xa0
   1663c:	b	165b8 <__assert_fail@plt+0x4e64>
   16640:	cmp	r1, r3
   16644:	cmpeq	r0, r2
   16648:	beq	16438 <__assert_fail@plt+0x4ce4>
   1664c:	ldr	r0, [sp, #252]	; 0xfc
   16650:	add	sp, sp, #516	; 0x204
   16654:	ldrd	r4, [sp]
   16658:	ldrd	r6, [sp, #8]
   1665c:	ldrd	r8, [sp, #16]
   16660:	ldrd	sl, [sp, #24]
   16664:	add	sp, sp, #32
   16668:	pop	{pc}		; (ldr pc, [sp], #4)
   1666c:	mov	r3, #0
   16670:	str	r3, [sp, #252]	; 0xfc
   16674:	b	1664c <__assert_fail@plt+0x4ef8>
   16678:	str	ip, [sp, #236]	; 0xec
   1667c:	str	r4, [sp, #240]	; 0xf0
   16680:	str	r5, [sp, #244]	; 0xf4
   16684:	b	15e98 <__assert_fail@plt+0x4744>
   16688:	mov	r2, #5
   1668c:	movw	r1, #18144	; 0x46e0
   16690:	movt	r1, #2
   16694:	mov	r0, #0
   16698:	bl	11430 <dcgettext@plt>
   1669c:	mov	r1, #0
   166a0:	mov	r2, r0
   166a4:	mov	r0, r1
   166a8:	bl	11520 <error@plt>
   166ac:	bl	11748 <abort@plt>
   166b0:	movw	r1, #17888	; 0x45e0
   166b4:	movt	r1, #2
   166b8:	ldr	r3, [pc, #16]	; 166d0 <__assert_fail@plt+0x4f7c>
   166bc:	movw	r0, #18196	; 0x4714
   166c0:	movt	r0, #2
   166c4:	movw	r2, #1262	; 0x4ee
   166c8:	bl	11754 <__assert_fail@plt>
   166cc:	andeq	r1, r2, r0, asr #10
   166d0:	andeq	r1, r2, r8, lsl #22
   166d4:	cmp	r1, #0
   166d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166dc:	strd	r6, [sp, #8]
   166e0:	cmpeq	r0, #1
   166e4:	strd	r8, [sp, #16]
   166e8:	strd	sl, [sp, #24]
   166ec:	str	lr, [sp, #32]
   166f0:	sub	sp, sp, #372	; 0x174
   166f4:	strd	r0, [sp, #80]	; 0x50
   166f8:	str	r3, [sp, #348]	; 0x15c
   166fc:	addhi	r3, r2, #1
   16700:	strhi	r3, [sp, #356]	; 0x164
   16704:	bls	17400 <__assert_fail@plt+0x5cac>
   16708:	ldr	r1, [sp, #356]	; 0x164
   1670c:	mov	r2, #0
   16710:	mov	r3, #0
   16714:	mov	r9, r3
   16718:	mov	r8, r2
   1671c:	strd	r6, [sp, #32]
   16720:	mov	r0, r2
   16724:	ldrd	r2, [sp, #80]	; 0x50
   16728:	mov	ip, #64	; 0x40
   1672c:	mov	r4, #1
   16730:	mov	r5, #0
   16734:	mov	fp, #0
   16738:	sub	r1, r1, #1
   1673c:	str	r1, [sp, #8]
   16740:	mov	r1, r9
   16744:	lsr	lr, r0, #1
   16748:	lsr	sl, r3, #1
   1674c:	orr	r0, lr, r1, lsl #31
   16750:	lsr	lr, r2, #1
   16754:	cmp	sl, r5
   16758:	lsr	r7, r1, #1
   1675c:	orr	lr, lr, r3, lsl #31
   16760:	mov	r3, sl
   16764:	orr	r1, r7, r2, lsl #31
   16768:	cmpeq	lr, r4
   1676c:	mov	r2, lr
   16770:	bcc	16798 <__assert_fail@plt+0x5044>
   16774:	cmp	r1, r9
   16778:	cmpeq	r0, r8
   1677c:	movls	lr, #1
   16780:	movhi	lr, #0
   16784:	cmp	sl, r5
   16788:	cmpeq	r2, r4
   1678c:	movne	lr, #0
   16790:	cmp	lr, #0
   16794:	beq	167c0 <__assert_fail@plt+0x506c>
   16798:	cmp	r1, r9
   1679c:	cmpeq	r0, r8
   167a0:	movhi	sl, #1
   167a4:	movls	sl, #0
   167a8:	subs	r8, r8, r0
   167ac:	sbc	r9, r9, r1
   167b0:	subs	r6, r4, r2
   167b4:	sbc	r7, r5, r3
   167b8:	subs	r4, r6, sl
   167bc:	sbc	r5, r7, fp
   167c0:	subs	ip, ip, #1
   167c4:	bne	16744 <__assert_fail@plt+0x4ff0>
   167c8:	ldr	sl, [sp, #8]
   167cc:	mov	fp, #0
   167d0:	ldrd	r4, [sp, #80]	; 0x50
   167d4:	ldrd	r6, [sp, #32]
   167d8:	strd	r8, [sp, #32]
   167dc:	strd	sl, [sp, #216]	; 0xd8
   167e0:	subs	r3, r4, r8
   167e4:	str	r3, [sp, #360]	; 0x168
   167e8:	sbc	r3, r5, r9
   167ec:	str	r3, [sp, #364]	; 0x16c
   167f0:	add	r3, sp, #360	; 0x168
   167f4:	ldrd	r2, [r3]
   167f8:	cmp	r3, r9
   167fc:	cmpeq	r2, r8
   16800:	movhi	r2, #1
   16804:	movls	r2, #0
   16808:	rsbs	r0, r2, #0
   1680c:	sbc	r1, r1, r1
   16810:	strd	r0, [sp, #8]
   16814:	adds	r1, r8, r8
   16818:	ldr	r2, [sp, #8]
   1681c:	adc	r3, r9, r9
   16820:	subs	r1, r1, r4
   16824:	sbc	r3, r3, r5
   16828:	ldr	r0, [sp, #12]
   1682c:	and	r2, r2, r4
   16830:	adds	r2, r2, r1
   16834:	and	r0, r0, r5
   16838:	adc	r3, r0, r3
   1683c:	cmp	r5, fp
   16840:	cmpeq	r4, sl
   16844:	strd	r2, [sp, #88]	; 0x58
   16848:	bls	1738c <__assert_fail@plt+0x5c38>
   1684c:	mov	r3, #1
   16850:	str	ip, [sp, #8]
   16854:	str	r3, [sp, #196]	; 0xc4
   16858:	str	r3, [sp, #228]	; 0xe4
   1685c:	str	r3, [sp, #344]	; 0x158
   16860:	movw	r3, #5408	; 0x1520
   16864:	movt	r3, #2
   16868:	str	r3, [sp, #352]	; 0x160
   1686c:	ldrd	r2, [sp, #88]	; 0x58
   16870:	mov	sl, r2
   16874:	mov	fp, r3
   16878:	strd	r2, [sp, #64]	; 0x40
   1687c:	ldrd	r8, [sp, #80]	; 0x50
   16880:	mov	lr, #0
   16884:	and	r2, r8, #1
   16888:	lsr	r3, r8, #1
   1688c:	str	r9, [sp, #44]	; 0x2c
   16890:	str	r8, [sp, #200]	; 0xc8
   16894:	orr	r3, r3, r9, lsl #31
   16898:	strd	sl, [sp, #232]	; 0xe8
   1689c:	str	r2, [sp, #296]	; 0x128
   168a0:	ldr	r2, [sp, #8]
   168a4:	strd	r6, [sp, #240]	; 0xf0
   168a8:	str	r3, [sp, #336]	; 0x150
   168ac:	and	r3, r3, #127	; 0x7f
   168b0:	str	r2, [sp, #300]	; 0x12c
   168b4:	lsr	r2, r9, #1
   168b8:	str	r2, [sp, #340]	; 0x154
   168bc:	ldr	r2, [sp, #352]	; 0x160
   168c0:	add	r3, r2, r3
   168c4:	ldrb	ip, [r3, #708]	; 0x2c4
   168c8:	umull	r0, r1, ip, ip
   168cc:	adds	ip, ip, ip
   168d0:	adc	lr, lr, lr
   168d4:	mul	r4, r0, r9
   168d8:	umull	r2, r3, r0, r8
   168dc:	mla	r4, r8, r1, r4
   168e0:	subs	ip, ip, r2
   168e4:	add	r3, r4, r3
   168e8:	umull	r0, r1, ip, ip
   168ec:	sbc	r4, lr, r3
   168f0:	mul	r3, ip, r4
   168f4:	adds	ip, ip, ip
   168f8:	mul	lr, r0, r9
   168fc:	adc	r4, r4, r4
   16900:	add	r1, r1, r3, lsl #1
   16904:	umull	r2, r3, r0, r8
   16908:	mla	lr, r8, r1, lr
   1690c:	add	r3, lr, r3
   16910:	subs	lr, ip, r2
   16914:	sbc	ip, r4, r3
   16918:	umull	r0, r1, lr, lr
   1691c:	mul	r3, lr, ip
   16920:	adds	lr, lr, lr
   16924:	adc	ip, ip, ip
   16928:	mul	r4, r0, r9
   1692c:	add	r1, r1, r3, lsl #1
   16930:	umull	r2, r3, r0, r8
   16934:	mla	r4, r8, r1, r4
   16938:	subs	lr, lr, r2
   1693c:	mov	r7, lr
   16940:	ldr	lr, [sp, #344]	; 0x158
   16944:	add	r3, r4, r3
   16948:	sbc	r3, ip, r3
   1694c:	str	r3, [sp, #192]	; 0xc0
   16950:	ldrd	r2, [sp, #216]	; 0xd8
   16954:	subs	r1, r8, r2
   16958:	str	r1, [sp, #144]	; 0x90
   1695c:	sbc	r1, r9, r3
   16960:	str	r1, [sp, #148]	; 0x94
   16964:	subs	r1, r2, r8
   16968:	sbc	r3, r3, r9
   1696c:	str	r1, [sp, #204]	; 0xcc
   16970:	str	r3, [sp, #224]	; 0xe0
   16974:	b	16988 <__assert_fail@plt+0x5234>
   16978:	subs	lr, lr, #1
   1697c:	beq	16d6c <__assert_fail@plt+0x5618>
   16980:	and	r3, lr, #31
   16984:	str	r3, [sp, #228]	; 0xe4
   16988:	ldr	ip, [sp, #8]
   1698c:	ldrd	r2, [sp, #88]	; 0x58
   16990:	umull	r0, r1, r3, r2
   16994:	umull	sl, fp, r2, r2
   16998:	adds	r5, r0, r0
   1699c:	adc	r8, r1, r1
   169a0:	adds	r4, fp, r5
   169a4:	str	r4, [sp, #120]	; 0x78
   169a8:	umull	r4, r5, r3, r3
   169ac:	adc	r3, ip, r8
   169b0:	str	r3, [sp, #124]	; 0x7c
   169b4:	ldrd	r2, [sp, #120]	; 0x78
   169b8:	cmp	r1, r3
   169bc:	cmpeq	r0, r2
   169c0:	bls	169cc <__assert_fail@plt+0x5278>
   169c4:	adds	r4, r4, #0
   169c8:	adc	r5, r5, #1
   169cc:	mov	ip, #0
   169d0:	ldr	r6, [sp, #44]	; 0x2c
   169d4:	ldrd	r0, [sp, #120]	; 0x78
   169d8:	adds	r3, r1, r4
   169dc:	str	r3, [sp, #176]	; 0xb0
   169e0:	adc	r3, ip, r5
   169e4:	adds	r2, ip, sl
   169e8:	adc	r8, r0, ip
   169ec:	str	r3, [sp, #180]	; 0xb4
   169f0:	umull	sl, fp, r2, r7
   169f4:	ldr	r3, [sp, #192]	; 0xc0
   169f8:	strd	sl, [sp, #136]	; 0x88
   169fc:	mul	r1, r2, r3
   16a00:	ldr	r2, [sp, #200]	; 0xc8
   16a04:	mov	r3, sl
   16a08:	mla	r8, r7, r8, r1
   16a0c:	umull	r0, r1, r6, sl
   16a10:	ldr	sl, [sp, #8]
   16a14:	umull	r4, r5, r3, r2
   16a18:	add	r3, r8, fp
   16a1c:	ldr	r8, [sp, #136]	; 0x88
   16a20:	mov	fp, ip
   16a24:	mla	r1, sl, r8, r1
   16a28:	umull	r8, r9, r3, r2
   16a2c:	ldr	r2, [sp, #136]	; 0x88
   16a30:	mla	r9, r3, ip, r9
   16a34:	mla	r2, ip, r2, r5
   16a38:	umull	r4, r5, r3, r6
   16a3c:	mla	r5, r3, sl, r5
   16a40:	adds	r3, r0, r8
   16a44:	adc	r1, r1, r9
   16a48:	adds	r3, r2, r3
   16a4c:	str	r3, [sp, #128]	; 0x80
   16a50:	adc	r3, ip, r1
   16a54:	str	r3, [sp, #132]	; 0x84
   16a58:	ldrd	r2, [sp, #128]	; 0x80
   16a5c:	cmp	r9, r3
   16a60:	cmpeq	r8, r2
   16a64:	bls	16a70 <__assert_fail@plt+0x531c>
   16a68:	adds	r4, r4, ip
   16a6c:	adc	r5, r5, #1
   16a70:	ldr	r3, [sp, #132]	; 0x84
   16a74:	mov	r2, #0
   16a78:	adds	r3, r3, r4
   16a7c:	str	r3, [sp, #184]	; 0xb8
   16a80:	adc	r3, r2, r5
   16a84:	str	r3, [sp, #188]	; 0xbc
   16a88:	ldrd	r2, [sp, #176]	; 0xb0
   16a8c:	ldrd	r0, [sp, #184]	; 0xb8
   16a90:	subs	ip, r2, r0
   16a94:	str	ip, [sp, #96]	; 0x60
   16a98:	sbc	ip, r3, r1
   16a9c:	cmp	r3, r1
   16aa0:	cmpeq	r2, r0
   16aa4:	str	ip, [sp, #100]	; 0x64
   16aa8:	bcs	16ac4 <__assert_fail@plt+0x5370>
   16aac:	ldrd	r2, [sp, #80]	; 0x50
   16ab0:	ldr	r1, [sp, #96]	; 0x60
   16ab4:	adds	r1, r1, r2
   16ab8:	adc	r3, ip, r3
   16abc:	str	r1, [sp, #96]	; 0x60
   16ac0:	str	r3, [sp, #100]	; 0x64
   16ac4:	ldr	ip, [sp, #8]
   16ac8:	ldrd	r8, [sp, #96]	; 0x60
   16acc:	ldrd	r2, [sp, #144]	; 0x90
   16ad0:	ldrd	r4, [sp, #80]	; 0x50
   16ad4:	ldr	r6, [sp, #224]	; 0xe0
   16ad8:	cmp	r9, r3
   16adc:	cmpeq	r8, r2
   16ae0:	movcc	r2, #1
   16ae4:	movcs	r2, #0
   16ae8:	rsbs	sl, r2, #0
   16aec:	ldr	r2, [sp, #204]	; 0xcc
   16af0:	sbc	fp, fp, fp
   16af4:	and	r0, fp, r5
   16af8:	adds	r1, r8, r2
   16afc:	and	r2, sl, r4
   16b00:	adc	r3, r9, r6
   16b04:	adds	r2, r2, r1
   16b08:	adc	r3, r0, r3
   16b0c:	strd	r2, [sp, #88]	; 0x58
   16b10:	ldrd	r2, [sp, #64]	; 0x40
   16b14:	ldrd	sl, [sp, #88]	; 0x58
   16b18:	cmp	r3, fp
   16b1c:	cmpeq	r2, sl
   16b20:	movcc	r0, #1
   16b24:	movcs	r0, #0
   16b28:	rsbs	r0, r0, #0
   16b2c:	sbc	r1, r1, r1
   16b30:	subs	r3, r2, sl
   16b34:	ldr	r2, [sp, #68]	; 0x44
   16b38:	and	r8, r0, r4
   16b3c:	sbc	r2, r2, fp
   16b40:	adds	r8, r8, r3
   16b44:	and	r3, r1, r5
   16b48:	ldrd	r0, [sp, #32]
   16b4c:	adc	r2, r3, r2
   16b50:	ldr	r3, [sp, #36]	; 0x24
   16b54:	umull	r4, r5, r1, r8
   16b58:	umull	sl, fp, r0, r8
   16b5c:	mov	r9, r5
   16b60:	mov	r8, r4
   16b64:	umlal	r8, r9, r0, r2
   16b68:	umull	r2, r3, r3, r2
   16b6c:	adds	r6, fp, r8
   16b70:	adc	r1, ip, r9
   16b74:	str	r6, [sp, #104]	; 0x68
   16b78:	str	r1, [sp, #108]	; 0x6c
   16b7c:	ldrd	r0, [sp, #104]	; 0x68
   16b80:	cmp	r5, r1
   16b84:	cmpeq	r4, r0
   16b88:	bls	16b94 <__assert_fail@plt+0x5440>
   16b8c:	adds	r2, r2, #0
   16b90:	adc	r3, r3, #1
   16b94:	mov	ip, #0
   16b98:	ldr	r6, [sp, #8]
   16b9c:	ldrd	r4, [sp, #104]	; 0x68
   16ba0:	adds	r1, r5, r2
   16ba4:	ldr	r2, [sp, #200]	; 0xc8
   16ba8:	adc	r3, ip, r3
   16bac:	adds	r8, ip, sl
   16bb0:	adc	r4, r4, ip
   16bb4:	str	r1, [sp, #160]	; 0xa0
   16bb8:	str	r3, [sp, #164]	; 0xa4
   16bbc:	umull	sl, fp, r8, r7
   16bc0:	ldr	r3, [sp, #192]	; 0xc0
   16bc4:	mul	r3, r8, r3
   16bc8:	mla	r4, r7, r4, r3
   16bcc:	ldr	r3, [sp, #44]	; 0x2c
   16bd0:	add	r9, r4, fp
   16bd4:	umull	r0, r1, sl, r3
   16bd8:	strd	r0, [sp, #136]	; 0x88
   16bdc:	umull	r0, r1, sl, r2
   16be0:	ldr	r4, [sp, #140]	; 0x8c
   16be4:	mla	r8, ip, sl, r1
   16be8:	umull	r0, r1, r9, r3
   16bec:	mla	r4, r6, sl, r4
   16bf0:	mla	r1, r9, r6, r1
   16bf4:	str	r4, [sp, #140]	; 0x8c
   16bf8:	umull	r4, r5, r9, r2
   16bfc:	ldrd	sl, [sp, #136]	; 0x88
   16c00:	mla	r5, r9, ip, r5
   16c04:	adds	r2, sl, r4
   16c08:	adc	r3, fp, r5
   16c0c:	adds	r2, r8, r2
   16c10:	adc	r3, ip, r3
   16c14:	strd	r2, [sp, #112]	; 0x70
   16c18:	ldrd	r2, [sp, #112]	; 0x70
   16c1c:	cmp	r5, r3
   16c20:	cmpeq	r4, r2
   16c24:	bls	16c30 <__assert_fail@plt+0x54dc>
   16c28:	adds	r0, r0, ip
   16c2c:	adc	r1, r1, #1
   16c30:	ldr	r3, [sp, #116]	; 0x74
   16c34:	mov	r2, #0
   16c38:	adds	r3, r3, r0
   16c3c:	str	r3, [sp, #168]	; 0xa8
   16c40:	adc	r3, r2, r1
   16c44:	str	r3, [sp, #172]	; 0xac
   16c48:	ldrd	r2, [sp, #160]	; 0xa0
   16c4c:	ldrd	r0, [sp, #168]	; 0xa8
   16c50:	subs	ip, r2, r0
   16c54:	str	ip, [sp, #32]
   16c58:	sbc	ip, r3, r1
   16c5c:	cmp	r3, r1
   16c60:	cmpeq	r2, r0
   16c64:	str	ip, [sp, #36]	; 0x24
   16c68:	bcs	16c84 <__assert_fail@plt+0x5530>
   16c6c:	ldr	r1, [sp, #32]
   16c70:	ldrd	r2, [sp, #80]	; 0x50
   16c74:	adds	r1, r1, r2
   16c78:	adc	r3, ip, r3
   16c7c:	str	r1, [sp, #32]
   16c80:	str	r3, [sp, #36]	; 0x24
   16c84:	ldr	r3, [sp, #228]	; 0xe4
   16c88:	cmp	r3, #1
   16c8c:	bne	16978 <__assert_fail@plt+0x5224>
   16c90:	add	r3, sp, #296	; 0x128
   16c94:	ldrd	r2, [r3]
   16c98:	orrs	r3, r2, r3
   16c9c:	ldrd	r2, [sp, #32]
   16ca0:	bne	16fac <__assert_fail@plt+0x5858>
   16ca4:	ldrd	r4, [sp, #80]	; 0x50
   16ca8:	lsr	ip, r2, #1
   16cac:	orr	ip, ip, r3, lsl #31
   16cb0:	mov	r0, r4
   16cb4:	lsr	r4, r3, #1
   16cb8:	mov	r1, r5
   16cbc:	mov	r5, r7
   16cc0:	str	lr, [sp, #136]	; 0x88
   16cc4:	ldrd	sl, [sp, #232]	; 0xe8
   16cc8:	b	16cf8 <__assert_fail@plt+0x55a4>
   16ccc:	asr	r2, r7, #31
   16cd0:	and	r3, r2, r6
   16cd4:	and	r1, r7, r2
   16cd8:	adds	ip, ip, r3
   16cdc:	eor	r3, r2, r6
   16ce0:	adc	r4, r4, r1
   16ce4:	eor	r1, r7, r2
   16ce8:	subs	r3, r3, r2
   16cec:	sbc	r2, r1, r2
   16cf0:	mov	r0, r3
   16cf4:	mov	r1, r2
   16cf8:	ldr	r9, [sp, #8]
   16cfc:	and	r8, r0, #1
   16d00:	lsr	r3, r0, #1
   16d04:	lsr	r2, r1, #1
   16d08:	orr	r3, r3, r1, lsl #31
   16d0c:	orrs	lr, r8, r9
   16d10:	beq	16cf0 <__assert_fail@plt+0x559c>
   16d14:	subs	r6, r3, ip
   16d18:	sbc	r7, r2, r4
   16d1c:	orrs	r3, r6, r7
   16d20:	bne	16ccc <__assert_fail@plt+0x5578>
   16d24:	add	r3, sp, #304	; 0x130
   16d28:	strd	sl, [sp, #232]	; 0xe8
   16d2c:	str	r1, [sp, #292]	; 0x124
   16d30:	strd	r6, [r3]
   16d34:	add	r3, sp, #320	; 0x140
   16d38:	mov	r7, r5
   16d3c:	ldr	lr, [sp, #136]	; 0x88
   16d40:	strd	r8, [r3]
   16d44:	bic	r3, r0, #1
   16d48:	str	r3, [sp, #288]	; 0x120
   16d4c:	add	r3, sp, #288	; 0x120
   16d50:	ldrd	r2, [r3]
   16d54:	orrs	r3, r2, r3
   16d58:	bne	16fc8 <__assert_fail@plt+0x5874>
   16d5c:	ldrd	r2, [sp, #88]	; 0x58
   16d60:	subs	lr, lr, #1
   16d64:	strd	r2, [sp, #232]	; 0xe8
   16d68:	bne	16980 <__assert_fail@plt+0x522c>
   16d6c:	ldr	r3, [sp, #196]	; 0xc4
   16d70:	cmp	r3, #0
   16d74:	lsl	r3, r3, #1
   16d78:	str	r3, [sp, #228]	; 0xe4
   16d7c:	beq	173c0 <__assert_fail@plt+0x5c6c>
   16d80:	ldrd	r2, [sp, #88]	; 0x58
   16d84:	mov	ip, r7
   16d88:	mov	fp, r3
   16d8c:	ldr	r3, [sp, #200]	; 0xc8
   16d90:	mov	sl, r2
   16d94:	str	r3, [sp, #136]	; 0x88
   16d98:	b	16e08 <__assert_fail@plt+0x56b4>
   16d9c:	ldrd	r6, [sp, #48]	; 0x30
   16da0:	add	lr, lr, #1
   16da4:	ldrd	r4, [sp, #80]	; 0x50
   16da8:	adds	r3, r6, r4
   16dac:	str	r3, [sp, #152]	; 0x98
   16db0:	adc	r3, r7, r5
   16db4:	str	r3, [sp, #156]	; 0x9c
   16db8:	ldrd	r2, [sp, #144]	; 0x90
   16dbc:	ldrd	r0, [sp, #152]	; 0x98
   16dc0:	cmp	r3, r1
   16dc4:	ldr	r3, [sp, #216]	; 0xd8
   16dc8:	cmpeq	r2, r0
   16dcc:	movhi	r2, #1
   16dd0:	movls	r2, #0
   16dd4:	rsbs	r8, r2, #0
   16dd8:	sbc	r9, r9, r9
   16ddc:	and	r2, r8, r4
   16de0:	adds	r1, r3, r6
   16de4:	ldr	r3, [sp, #220]	; 0xdc
   16de8:	and	r0, r9, r5
   16dec:	mov	r4, r7
   16df0:	adc	r3, r3, r4
   16df4:	adds	sl, r2, r1
   16df8:	adc	fp, r0, r3
   16dfc:	ldr	r3, [sp, #196]	; 0xc4
   16e00:	cmp	r3, lr
   16e04:	beq	16f84 <__assert_fail@plt+0x5830>
   16e08:	umull	r0, r1, sl, fp
   16e0c:	ldr	r6, [sp, #8]
   16e10:	umull	r2, r3, sl, sl
   16e14:	adds	r5, r0, r0
   16e18:	adc	r7, r1, r1
   16e1c:	strd	r2, [sp, #64]	; 0x40
   16e20:	adds	r3, r3, r5
   16e24:	umull	r4, r5, fp, fp
   16e28:	str	r3, [sp, #24]
   16e2c:	adc	r3, r6, r7
   16e30:	str	r3, [sp, #28]
   16e34:	ldrd	r2, [sp, #24]
   16e38:	cmp	r1, r3
   16e3c:	cmpeq	r0, r2
   16e40:	bls	16e4c <__assert_fail@plt+0x56f8>
   16e44:	adds	r4, r4, #0
   16e48:	adc	r5, r5, #1
   16e4c:	mov	r8, #0
   16e50:	ldr	r9, [sp, #8]
   16e54:	ldrd	r0, [sp, #24]
   16e58:	ldr	r2, [sp, #64]	; 0x40
   16e5c:	adds	r3, r1, r4
   16e60:	str	r3, [sp, #72]	; 0x48
   16e64:	adc	r3, r8, r5
   16e68:	adds	r2, r2, r8
   16e6c:	adc	r4, r8, r0
   16e70:	ldr	r5, [sp, #136]	; 0x88
   16e74:	str	r3, [sp, #76]	; 0x4c
   16e78:	umull	r6, r7, r2, ip
   16e7c:	ldr	r3, [sp, #192]	; 0xc0
   16e80:	mul	r1, r2, r3
   16e84:	ldr	r3, [sp, #44]	; 0x2c
   16e88:	mov	r2, r6
   16e8c:	mla	r4, ip, r4, r1
   16e90:	mov	r1, r7
   16e94:	umull	r6, r7, r3, r6
   16e98:	mov	r3, r1
   16e9c:	umull	r0, r1, r5, r2
   16ea0:	strd	r2, [sp, #64]	; 0x40
   16ea4:	add	r3, r4, r3
   16ea8:	ldr	r2, [sp, #8]
   16eac:	ldr	r4, [sp, #64]	; 0x40
   16eb0:	mla	r7, r2, r4, r7
   16eb4:	ldr	r2, [sp, #64]	; 0x40
   16eb8:	umull	r4, r5, r5, r3
   16ebc:	mla	r5, r3, r8, r5
   16ec0:	mla	r2, r8, r2, r1
   16ec4:	ldr	r1, [sp, #44]	; 0x2c
   16ec8:	umull	r0, r1, r1, r3
   16ecc:	mla	r1, r3, r9, r1
   16ed0:	adds	r3, r6, r4
   16ed4:	adc	r6, r7, r5
   16ed8:	adds	r3, r2, r3
   16edc:	str	r3, [sp, #16]
   16ee0:	adc	r3, r8, r6
   16ee4:	str	r3, [sp, #20]
   16ee8:	ldrd	r2, [sp, #16]
   16eec:	cmp	r3, r5
   16ef0:	cmpeq	r2, r4
   16ef4:	bcs	16f00 <__assert_fail@plt+0x57ac>
   16ef8:	adds	r0, r0, r8
   16efc:	adc	r1, r1, #1
   16f00:	ldr	r3, [sp, #20]
   16f04:	mov	r2, #0
   16f08:	adds	r3, r3, r0
   16f0c:	str	r3, [sp, #56]	; 0x38
   16f10:	adc	r3, r2, r1
   16f14:	ldrd	r0, [sp, #72]	; 0x48
   16f18:	str	r3, [sp, #60]	; 0x3c
   16f1c:	ldrd	r2, [sp, #56]	; 0x38
   16f20:	subs	r4, r0, r2
   16f24:	str	r4, [sp, #48]	; 0x30
   16f28:	sbc	r4, r1, r3
   16f2c:	cmp	r3, r1
   16f30:	cmpeq	r2, r0
   16f34:	str	r4, [sp, #52]	; 0x34
   16f38:	bhi	16d9c <__assert_fail@plt+0x5648>
   16f3c:	ldrd	r4, [sp, #48]	; 0x30
   16f40:	add	lr, lr, #1
   16f44:	ldrd	r6, [sp, #80]	; 0x50
   16f48:	ldrd	r2, [sp, #144]	; 0x90
   16f4c:	cmp	r3, r5
   16f50:	ldr	r3, [sp, #204]	; 0xcc
   16f54:	cmpeq	r2, r4
   16f58:	movhi	r2, #1
   16f5c:	movls	r2, #0
   16f60:	rsbs	r8, r2, #0
   16f64:	mov	r2, r4
   16f68:	sbc	r9, r9, r9
   16f6c:	mov	r4, r5
   16f70:	adds	r1, r3, r2
   16f74:	and	r0, r9, r7
   16f78:	ldr	r3, [sp, #224]	; 0xe0
   16f7c:	and	r2, r8, r6
   16f80:	b	16df0 <__assert_fail@plt+0x569c>
   16f84:	mov	lr, r3
   16f88:	ldrd	r2, [sp, #88]	; 0x58
   16f8c:	mov	r7, ip
   16f90:	strd	r2, [sp, #64]	; 0x40
   16f94:	ldr	r3, [sp, #228]	; 0xe4
   16f98:	strd	sl, [sp, #232]	; 0xe8
   16f9c:	str	r3, [sp, #196]	; 0xc4
   16fa0:	ldrd	r2, [sp, #232]	; 0xe8
   16fa4:	strd	r2, [sp, #88]	; 0x58
   16fa8:	b	16980 <__assert_fail@plt+0x522c>
   16fac:	orrs	r1, r2, r3
   16fb0:	beq	16fc8 <__assert_fail@plt+0x5874>
   16fb4:	mov	r0, r2
   16fb8:	mov	r1, r3
   16fbc:	ldr	ip, [sp, #336]	; 0x150
   16fc0:	ldr	r4, [sp, #340]	; 0x154
   16fc4:	b	16cbc <__assert_fail@plt+0x5568>
   16fc8:	ldrd	sl, [sp, #232]	; 0xe8
   16fcc:	add	r3, sp, #328	; 0x148
   16fd0:	str	lr, [sp, #344]	; 0x158
   16fd4:	ldrd	r4, [r3]
   16fd8:	str	r7, [sp, #328]	; 0x148
   16fdc:	umull	r2, r3, fp, sl
   16fe0:	ldr	ip, [sp, #8]
   16fe4:	umull	r0, r1, sl, sl
   16fe8:	mov	r8, r0
   16fec:	adds	r0, r2, r2
   16ff0:	adc	lr, r3, r3
   16ff4:	adds	r1, r1, r0
   16ff8:	adc	ip, ip, lr
   16ffc:	str	r1, [sp, #248]	; 0xf8
   17000:	umull	r0, r1, fp, fp
   17004:	str	ip, [sp, #252]	; 0xfc
   17008:	ldrd	r6, [sp, #248]	; 0xf8
   1700c:	cmp	r3, r7
   17010:	cmpeq	r2, r6
   17014:	bls	17020 <__assert_fail@plt+0x58cc>
   17018:	adds	r0, r0, #0
   1701c:	adc	r1, r1, #1
   17020:	mov	ip, #0
   17024:	ldr	r2, [sp, #192]	; 0xc0
   17028:	ldrd	r6, [sp, #248]	; 0xf8
   1702c:	adds	r3, r7, r0
   17030:	str	r3, [sp, #264]	; 0x108
   17034:	adc	r3, ip, r1
   17038:	str	r3, [sp, #268]	; 0x10c
   1703c:	adds	r3, ip, r8
   17040:	adc	lr, r6, ip
   17044:	mul	r1, r3, r2
   17048:	ldr	r2, [sp, #328]	; 0x148
   1704c:	umull	r6, r7, r3, r2
   17050:	ldr	r3, [sp, #44]	; 0x2c
   17054:	mla	lr, r2, lr, r1
   17058:	ldr	r2, [sp, #200]	; 0xc8
   1705c:	strd	r6, [sp, #232]	; 0xe8
   17060:	umull	r0, r1, r3, r6
   17064:	add	r3, lr, r7
   17068:	ldr	lr, [sp, #232]	; 0xe8
   1706c:	umull	r8, r9, r6, r2
   17070:	ldr	r6, [sp, #8]
   17074:	mla	r1, r6, lr, r1
   17078:	umull	r6, r7, r3, r2
   1707c:	mla	r2, ip, lr, r9
   17080:	ldr	lr, [sp, #44]	; 0x2c
   17084:	strd	r6, [sp, #136]	; 0x88
   17088:	umull	r8, r9, lr, r3
   1708c:	ldr	lr, [sp, #140]	; 0x8c
   17090:	mla	r7, r3, ip, lr
   17094:	ldr	lr, [sp, #8]
   17098:	str	r7, [sp, #140]	; 0x8c
   1709c:	ldrd	r6, [sp, #136]	; 0x88
   170a0:	mla	r3, r3, lr, r9
   170a4:	mov	r9, r3
   170a8:	adds	r3, r0, r6
   170ac:	adc	r1, r1, r7
   170b0:	adds	r3, r2, r3
   170b4:	str	r3, [sp, #256]	; 0x100
   170b8:	adc	r3, ip, r1
   170bc:	add	r1, sp, #256	; 0x100
   170c0:	str	r3, [sp, #260]	; 0x104
   170c4:	ldrd	r0, [r1]
   170c8:	cmp	r7, r1
   170cc:	cmpeq	r6, r0
   170d0:	bls	170e4 <__assert_fail@plt+0x5990>
   170d4:	adds	r3, r8, ip
   170d8:	mov	r8, r3
   170dc:	adc	r3, r9, #1
   170e0:	mov	r9, r3
   170e4:	ldr	r3, [sp, #260]	; 0x104
   170e8:	mov	r2, #0
   170ec:	add	r1, sp, #272	; 0x110
   170f0:	adds	r3, r3, r8
   170f4:	str	r3, [sp, #272]	; 0x110
   170f8:	adc	r3, r2, r9
   170fc:	str	r3, [sp, #276]	; 0x114
   17100:	add	r3, sp, #264	; 0x108
   17104:	ldrd	r0, [r1]
   17108:	ldrd	r2, [r3]
   1710c:	subs	ip, r2, r0
   17110:	str	ip, [sp, #208]	; 0xd0
   17114:	sbc	ip, r3, r1
   17118:	cmp	r3, r1
   1711c:	cmpeq	r2, r0
   17120:	str	ip, [sp, #212]	; 0xd4
   17124:	bcs	17140 <__assert_fail@plt+0x59ec>
   17128:	ldrd	r2, [sp, #80]	; 0x50
   1712c:	ldr	r1, [sp, #208]	; 0xd0
   17130:	adds	r1, r1, r2
   17134:	adc	r3, ip, r3
   17138:	str	r1, [sp, #208]	; 0xd0
   1713c:	str	r3, [sp, #212]	; 0xd4
   17140:	ldrd	r8, [sp, #80]	; 0x50
   17144:	ldrd	r2, [sp, #144]	; 0x90
   17148:	ldrd	r0, [sp, #208]	; 0xd0
   1714c:	ldr	ip, [sp, #224]	; 0xe0
   17150:	cmp	r1, r3
   17154:	ldr	r3, [sp, #212]	; 0xd4
   17158:	cmpeq	r0, r2
   1715c:	movcc	r2, #1
   17160:	movcs	r2, #0
   17164:	rsbs	r6, r2, #0
   17168:	ldr	r2, [sp, #204]	; 0xcc
   1716c:	sbc	r7, r7, r7
   17170:	adds	r1, r0, r2
   17174:	and	r2, r6, r8
   17178:	and	r0, r7, r9
   1717c:	adc	r3, r3, ip
   17180:	ldrd	r6, [sp, #80]	; 0x50
   17184:	adds	sl, r2, r1
   17188:	adc	fp, r0, r3
   1718c:	ldrd	r0, [sp, #64]	; 0x40
   17190:	ldr	r3, [sp, #68]	; 0x44
   17194:	cmp	r1, fp
   17198:	cmpeq	r0, sl
   1719c:	movcc	r2, #1
   171a0:	movcs	r2, #0
   171a4:	rsbs	r8, r2, #0
   171a8:	sbc	r9, r9, r9
   171ac:	and	r2, r8, r6
   171b0:	subs	r1, r0, sl
   171b4:	and	r0, r9, r7
   171b8:	sbc	r3, r3, fp
   171bc:	adds	r2, r2, r1
   171c0:	adc	r3, r0, r3
   171c4:	strd	r2, [sp, #240]	; 0xf0
   171c8:	add	r3, sp, #296	; 0x128
   171cc:	ldrd	r2, [r3]
   171d0:	orrs	r3, r2, r3
   171d4:	bne	173a8 <__assert_fail@plt+0x5c54>
   171d8:	ldrd	r2, [sp, #240]	; 0xf0
   171dc:	lsr	r1, r2, #1
   171e0:	lsr	r0, r3, #1
   171e4:	orr	r1, r1, r3, lsl #31
   171e8:	b	17218 <__assert_fail@plt+0x5ac4>
   171ec:	asr	r2, r9, #31
   171f0:	and	r3, r2, r8
   171f4:	and	ip, r9, r2
   171f8:	adds	r1, r1, r3
   171fc:	eor	r3, r2, r8
   17200:	adc	r0, r0, ip
   17204:	eor	ip, r9, r2
   17208:	subs	r3, r3, r2
   1720c:	sbc	r2, ip, r2
   17210:	mov	r6, r3
   17214:	mov	r7, r2
   17218:	ldr	r5, [sp, #8]
   1721c:	and	r4, r6, #1
   17220:	lsr	r3, r6, #1
   17224:	lsr	r2, r7, #1
   17228:	orr	r3, r3, r7, lsl #31
   1722c:	orrs	ip, r4, r5
   17230:	beq	17210 <__assert_fail@plt+0x5abc>
   17234:	subs	r8, r3, r1
   17238:	sbc	r9, r2, r0
   1723c:	orrs	r3, r8, r9
   17240:	bne	171ec <__assert_fail@plt+0x5a98>
   17244:	add	r3, sp, #312	; 0x138
   17248:	strd	r6, [sp, #240]	; 0xf0
   1724c:	strd	r8, [r3]
   17250:	bic	r3, r6, #1
   17254:	adds	r3, r3, #1
   17258:	str	r3, [sp, #280]	; 0x118
   1725c:	adc	r3, r7, #0
   17260:	str	r3, [sp, #284]	; 0x11c
   17264:	add	r3, sp, #280	; 0x118
   17268:	ldrd	r2, [r3]
   1726c:	cmp	r3, #0
   17270:	cmpeq	r2, #1
   17274:	beq	16fdc <__assert_fail@plt+0x5888>
   17278:	add	r3, sp, #328	; 0x148
   1727c:	ldrd	r0, [sp, #80]	; 0x50
   17280:	strd	r4, [r3]
   17284:	add	r3, sp, #280	; 0x118
   17288:	ldrd	r2, [r3]
   1728c:	ldrd	r6, [sp, #240]	; 0xf0
   17290:	cmp	r3, r1
   17294:	cmpeq	r2, r0
   17298:	beq	17488 <__assert_fail@plt+0x5d34>
   1729c:	add	r3, sp, #280	; 0x118
   172a0:	ldrd	r4, [r3]
   172a4:	mov	r2, r4
   172a8:	mov	r3, r5
   172ac:	bl	21320 <__assert_fail@plt+0xfbcc>
   172b0:	strd	r0, [sp, #80]	; 0x50
   172b4:	add	r1, pc, #476	; 0x1dc
   172b8:	ldrd	r0, [r1]
   172bc:	cmp	r5, r1
   172c0:	cmpeq	r4, r0
   172c4:	bls	172dc <__assert_fail@plt+0x5b88>
   172c8:	add	r3, sp, #280	; 0x118
   172cc:	ldrd	r0, [r3]
   172d0:	bl	15e14 <__assert_fail@plt+0x46c0>
   172d4:	cmp	r0, #0
   172d8:	beq	1741c <__assert_fail@plt+0x5cc8>
   172dc:	mov	r1, #1
   172e0:	add	r3, sp, #280	; 0x118
   172e4:	ldr	r0, [sp, #348]	; 0x15c
   172e8:	ldrd	r2, [r3]
   172ec:	str	r1, [sp]
   172f0:	bl	11a78 <__assert_fail@plt+0x324>
   172f4:	ldrd	r2, [sp, #80]	; 0x50
   172f8:	cmp	r3, #0
   172fc:	cmpeq	r2, #1
   17300:	bls	17440 <__assert_fail@plt+0x5cec>
   17304:	add	r1, pc, #396	; 0x18c
   17308:	ldrd	r0, [r1]
   1730c:	cmp	r3, r1
   17310:	cmpeq	r2, r0
   17314:	bls	17458 <__assert_fail@plt+0x5d04>
   17318:	mov	r0, r2
   1731c:	mov	r1, r3
   17320:	bl	15e14 <__assert_fail@plt+0x46c0>
   17324:	cmp	r0, #0
   17328:	bne	17458 <__assert_fail@plt+0x5d04>
   1732c:	ldrd	r4, [sp, #80]	; 0x50
   17330:	ldrd	r0, [sp, #88]	; 0x58
   17334:	mov	r2, r4
   17338:	mov	r3, r5
   1733c:	bl	21320 <__assert_fail@plt+0xfbcc>
   17340:	strd	r2, [sp, #88]	; 0x58
   17344:	mov	r2, r4
   17348:	mov	r3, r5
   1734c:	ldrd	r0, [sp, #64]	; 0x40
   17350:	bl	21320 <__assert_fail@plt+0xfbcc>
   17354:	mov	r0, sl
   17358:	mov	r1, fp
   1735c:	strd	r2, [sp, #64]	; 0x40
   17360:	mov	r2, r4
   17364:	mov	r3, r5
   17368:	bl	21320 <__assert_fail@plt+0xfbcc>
   1736c:	mov	sl, r2
   17370:	mov	fp, r3
   17374:	mov	r2, r4
   17378:	mov	r3, r5
   1737c:	ldrd	r0, [sp, #216]	; 0xd8
   17380:	cmp	r3, r1
   17384:	cmpeq	r2, r0
   17388:	bhi	1687c <__assert_fail@plt+0x5128>
   1738c:	movw	r1, #17888	; 0x45e0
   17390:	movt	r1, #2
   17394:	ldr	r3, [pc, #260]	; 174a0 <__assert_fail@plt+0x5d4c>
   17398:	movw	r0, #18220	; 0x472c
   1739c:	movt	r0, #2
   173a0:	mov	r2, #1472	; 0x5c0
   173a4:	bl	11754 <__assert_fail@plt>
   173a8:	ldrd	r6, [sp, #240]	; 0xf0
   173ac:	orrs	r3, r6, r7
   173b0:	beq	173dc <__assert_fail@plt+0x5c88>
   173b4:	ldr	r1, [sp, #336]	; 0x150
   173b8:	ldr	r0, [sp, #340]	; 0x154
   173bc:	b	17218 <__assert_fail@plt+0x5ac4>
   173c0:	mov	r1, r3
   173c4:	ldrd	r2, [sp, #88]	; 0x58
   173c8:	ldr	lr, [sp, #196]	; 0xc4
   173cc:	strd	r2, [sp, #64]	; 0x40
   173d0:	str	r1, [sp, #196]	; 0xc4
   173d4:	strd	r2, [sp, #232]	; 0xe8
   173d8:	b	16980 <__assert_fail@plt+0x522c>
   173dc:	add	r3, sp, #328	; 0x148
   173e0:	strd	r4, [r3]
   173e4:	ldrd	r2, [sp, #80]	; 0x50
   173e8:	cmp	r3, #0
   173ec:	ldr	r3, [sp, #356]	; 0x164
   173f0:	cmpeq	r2, #1
   173f4:	add	r3, r3, #1
   173f8:	str	r3, [sp, #356]	; 0x164
   173fc:	bne	16708 <__assert_fail@plt+0x4fb4>
   17400:	movw	r1, #17888	; 0x45e0
   17404:	movt	r1, #2
   17408:	ldr	r3, [pc, #144]	; 174a0 <__assert_fail@plt+0x5d4c>
   1740c:	movw	r0, #18208	; 0x4720
   17410:	movt	r0, #2
   17414:	movw	r2, #1466	; 0x5ba
   17418:	bl	11754 <__assert_fail@plt>
   1741c:	add	r1, sp, #280	; 0x118
   17420:	ldr	r3, [sp, #348]	; 0x15c
   17424:	ldrd	r0, [r1]
   17428:	ldr	r2, [sp, #356]	; 0x164
   1742c:	bl	166d4 <__assert_fail@plt+0x4f80>
   17430:	ldrd	r2, [sp, #80]	; 0x50
   17434:	cmp	r3, #0
   17438:	cmpeq	r2, #1
   1743c:	bhi	17304 <__assert_fail@plt+0x5bb0>
   17440:	beq	1746c <__assert_fail@plt+0x5d18>
   17444:	mov	sl, #0
   17448:	mov	fp, #0
   1744c:	strd	sl, [sp, #64]	; 0x40
   17450:	strd	sl, [sp, #88]	; 0x58
   17454:	b	1737c <__assert_fail@plt+0x5c28>
   17458:	mov	r1, #1
   1745c:	ldrd	r2, [sp, #80]	; 0x50
   17460:	str	r1, [sp]
   17464:	ldr	r0, [sp, #348]	; 0x15c
   17468:	bl	11a78 <__assert_fail@plt+0x324>
   1746c:	add	sp, sp, #372	; 0x174
   17470:	ldrd	r4, [sp]
   17474:	ldrd	r6, [sp, #8]
   17478:	ldrd	r8, [sp, #16]
   1747c:	ldrd	sl, [sp, #24]
   17480:	add	sp, sp, #32
   17484:	pop	{pc}		; (ldr pc, [sp], #4)
   17488:	ldr	r3, [sp, #356]	; 0x164
   1748c:	add	r3, r3, #1
   17490:	str	r3, [sp, #356]	; 0x164
   17494:	b	16708 <__assert_fail@plt+0x4fb4>
   17498:	cmneq	sp, r8, ror sp
   1749c:	andeq	r0, r0, r0
   174a0:	andeq	r1, r2, r0, lsl fp
   174a4:	cmp	r1, #0
   174a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   174ac:	cmpeq	r0, #1
   174b0:	strd	r6, [sp, #8]
   174b4:	mov	r6, r2
   174b8:	mov	r7, r3
   174bc:	strd	r8, [sp, #16]
   174c0:	mov	r8, r0
   174c4:	mov	r9, r1
   174c8:	strd	sl, [sp, #24]
   174cc:	str	lr, [sp, #32]
   174d0:	sub	sp, sp, #244	; 0xf4
   174d4:	bls	1810c <__assert_fail@plt+0x69b8>
   174d8:	mov	r2, #0
   174dc:	mov	r3, #0
   174e0:	mov	sl, #63	; 0x3f
   174e4:	mov	fp, #0
   174e8:	strd	r2, [sp, #120]	; 0x78
   174ec:	mov	r2, #1
   174f0:	mov	r3, #0
   174f4:	strd	r2, [sp, #112]	; 0x70
   174f8:	ldrd	r0, [sp, #120]	; 0x78
   174fc:	strd	r6, [sp, #48]	; 0x30
   17500:	adds	lr, r2, r2
   17504:	mov	r6, lr
   17508:	adc	lr, r3, r3
   1750c:	orr	r2, r6, r1, lsr #31
   17510:	adds	r4, r0, r0
   17514:	mov	r3, lr
   17518:	adc	r5, r1, r1
   1751c:	cmp	r9, lr
   17520:	cmpeq	r8, r2
   17524:	mov	r0, r4
   17528:	mov	r1, r5
   1752c:	bcc	17558 <__assert_fail@plt+0x5e04>
   17530:	ldrd	r6, [sp, #48]	; 0x30
   17534:	cmp	r7, r5
   17538:	cmpeq	r6, r4
   1753c:	movls	lr, #1
   17540:	movhi	lr, #0
   17544:	cmp	r9, r3
   17548:	cmpeq	r8, r2
   1754c:	movne	lr, #0
   17550:	cmp	lr, #0
   17554:	beq	17590 <__assert_fail@plt+0x5e3c>
   17558:	ldrd	r6, [sp, #48]	; 0x30
   1755c:	mov	lr, #0
   17560:	ldr	ip, [sp, #48]	; 0x30
   17564:	cmp	r7, r5
   17568:	cmpeq	r6, r4
   1756c:	movhi	r6, #1
   17570:	movls	r6, lr
   17574:	subs	r0, r4, ip
   17578:	ldr	ip, [sp, #52]	; 0x34
   1757c:	sbc	r1, r5, ip
   17580:	subs	r7, r2, r8
   17584:	sbc	ip, r3, r9
   17588:	subs	r2, r7, r6
   1758c:	sbc	r3, ip, lr
   17590:	subs	sl, sl, #1
   17594:	mvn	r7, #0
   17598:	sbc	fp, fp, #0
   1759c:	mvn	r6, #0
   175a0:	cmp	fp, r7
   175a4:	cmpeq	sl, r6
   175a8:	bne	17500 <__assert_fail@plt+0x5dac>
   175ac:	adds	ip, r0, r0
   175b0:	ldrd	r6, [sp, #48]	; 0x30
   175b4:	str	ip, [sp, #56]	; 0x38
   175b8:	adc	ip, r1, r1
   175bc:	strd	r2, [sp, #112]	; 0x70
   175c0:	str	ip, [sp, #60]	; 0x3c
   175c4:	adds	ip, r2, r2
   175c8:	adc	r3, r3, r3
   175cc:	ldrd	r4, [sp, #56]	; 0x38
   175d0:	strd	r0, [sp, #120]	; 0x78
   175d4:	str	ip, [sp, #72]	; 0x48
   175d8:	cmp	r5, r1
   175dc:	str	r3, [sp, #76]	; 0x4c
   175e0:	cmpeq	r4, r0
   175e4:	ldrd	r2, [sp, #72]	; 0x48
   175e8:	movcc	r1, #1
   175ec:	movcs	r1, #0
   175f0:	strd	r4, [sp, #64]	; 0x40
   175f4:	adds	r2, r2, r1
   175f8:	adc	r3, r3, #0
   175fc:	cmp	r3, r9
   17600:	cmpeq	r2, r8
   17604:	bhi	17a54 <__assert_fail@plt+0x6300>
   17608:	moveq	r1, #1
   1760c:	movne	r1, #0
   17610:	cmp	r7, r5
   17614:	cmpeq	r6, r4
   17618:	movhi	r1, #0
   1761c:	andls	r1, r1, #1
   17620:	cmp	r1, #0
   17624:	bne	17a54 <__assert_fail@plt+0x6300>
   17628:	mov	r1, #1
   1762c:	movw	r0, #5408	; 0x1520
   17630:	movt	r0, #2
   17634:	str	r1, [sp, #56]	; 0x38
   17638:	str	r1, [sp, #128]	; 0x80
   1763c:	str	r0, [sp, #196]	; 0xc4
   17640:	ldrd	r0, [sp, #64]	; 0x40
   17644:	strd	r2, [sp, #200]	; 0xc8
   17648:	mov	sl, r0
   1764c:	mov	fp, r1
   17650:	strd	r2, [sp, #208]	; 0xd0
   17654:	strd	r2, [sp, #216]	; 0xd8
   17658:	mov	r3, #0
   1765c:	ldr	r2, [sp, #280]	; 0x118
   17660:	strd	r0, [sp, #48]	; 0x30
   17664:	strd	r2, [sp, #96]	; 0x60
   17668:	strd	sl, [sp, #168]	; 0xa8
   1766c:	orrs	r3, r8, r9
   17670:	movne	r3, #1
   17674:	moveq	r3, #0
   17678:	cmp	r7, #0
   1767c:	cmpeq	r6, #1
   17680:	movne	r3, #1
   17684:	cmp	r3, #0
   17688:	beq	17e5c <__assert_fail@plt+0x6708>
   1768c:	ldr	r1, [sp, #196]	; 0xc4
   17690:	ubfx	r2, r6, #1, #7
   17694:	and	r3, r6, #1
   17698:	mov	r0, #0
   1769c:	ldrd	r4, [sp, #200]	; 0xc8
   176a0:	str	r3, [sp, #176]	; 0xb0
   176a4:	str	r0, [sp, #132]	; 0x84
   176a8:	add	r2, r1, r2
   176ac:	str	r0, [sp, #180]	; 0xb4
   176b0:	ldrb	r1, [r2, #708]	; 0x2c4
   176b4:	umull	r2, r3, r1, r1
   176b8:	adds	r1, r1, r1
   176bc:	adc	r0, r0, r0
   176c0:	mul	ip, r2, r7
   176c4:	mla	ip, r6, r3, ip
   176c8:	umull	r2, r3, r2, r6
   176cc:	subs	r1, r1, r2
   176d0:	add	r3, ip, r3
   176d4:	sbc	r0, r0, r3
   176d8:	umull	r2, r3, r1, r1
   176dc:	mul	ip, r1, r0
   176e0:	adds	r1, r1, r1
   176e4:	adc	r0, r0, r0
   176e8:	add	r3, r3, ip, lsl #1
   176ec:	mul	ip, r2, r7
   176f0:	mla	ip, r6, r3, ip
   176f4:	umull	r2, r3, r2, r6
   176f8:	subs	r1, r1, r2
   176fc:	add	r3, ip, r3
   17700:	sbc	r0, r0, r3
   17704:	umull	r2, r3, r1, r1
   17708:	mul	ip, r1, r0
   1770c:	adds	r1, r1, r1
   17710:	adc	r0, r0, r0
   17714:	add	r3, r3, ip, lsl #1
   17718:	mul	ip, r2, r7
   1771c:	mla	ip, r6, r3, ip
   17720:	umull	r2, r3, r2, r6
   17724:	subs	r1, r1, r2
   17728:	add	r3, ip, r3
   1772c:	sbc	r3, r0, r3
   17730:	str	r1, [sp, #72]	; 0x48
   17734:	str	r3, [sp, #84]	; 0x54
   17738:	ldrd	sl, [sp, #64]	; 0x40
   1773c:	mov	r2, r4
   17740:	mov	r3, r5
   17744:	strd	r4, [sp, #8]
   17748:	strd	r8, [sp, #24]
   1774c:	strd	r6, [sp, #32]
   17750:	mov	r0, sl
   17754:	mov	r1, fp
   17758:	mov	r4, sl
   1775c:	mov	r5, fp
   17760:	strd	r0, [sp]
   17764:	add	r1, sp, #232	; 0xe8
   17768:	mov	r0, r1
   1776c:	ldr	r1, [sp, #72]	; 0x48
   17770:	strd	r4, [sp, #16]
   17774:	str	r1, [sp, #40]	; 0x28
   17778:	ldr	r1, [sp, #84]	; 0x54
   1777c:	str	r1, [sp, #44]	; 0x2c
   17780:	bl	11b94 <__assert_fail@plt+0x440>
   17784:	ldrd	sl, [sp, #96]	; 0x60
   17788:	ldrd	r2, [sp, #232]	; 0xe8
   1778c:	adds	r4, r0, sl
   17790:	adcs	r5, r1, fp
   17794:	mov	r0, r4
   17798:	movcs	ip, #1
   1779c:	movcc	ip, #0
   177a0:	adds	sl, r2, ip
   177a4:	mov	r1, r5
   177a8:	strd	r4, [sp, #64]	; 0x40
   177ac:	adc	fp, r3, #0
   177b0:	cmp	fp, r9
   177b4:	cmpeq	sl, r8
   177b8:	bhi	177dc <__assert_fail@plt+0x6088>
   177bc:	moveq	ip, #1
   177c0:	movne	ip, #0
   177c4:	cmp	r7, r5
   177c8:	cmpeq	r6, r4
   177cc:	movhi	ip, #0
   177d0:	andls	ip, ip, #1
   177d4:	cmp	ip, #0
   177d8:	beq	17810 <__assert_fail@plt+0x60bc>
   177dc:	cmp	r7, r1
   177e0:	ldr	ip, [sp, #132]	; 0x84
   177e4:	cmpeq	r6, r0
   177e8:	movhi	lr, #1
   177ec:	movls	lr, #0
   177f0:	subs	r3, r0, r6
   177f4:	str	r3, [sp, #64]	; 0x40
   177f8:	sbc	r3, r1, r7
   177fc:	subs	lr, sl, lr
   17800:	sbc	ip, fp, ip
   17804:	subs	sl, lr, r8
   17808:	sbc	fp, ip, r9
   1780c:	str	r3, [sp, #68]	; 0x44
   17810:	ldrd	r4, [sp, #48]	; 0x30
   17814:	strd	sl, [sp, #200]	; 0xc8
   17818:	ldrd	r2, [sp, #64]	; 0x40
   1781c:	ldr	r1, [sp, #208]	; 0xd0
   17820:	subs	r0, r4, r2
   17824:	str	r0, [sp, #88]	; 0x58
   17828:	sbc	r0, r5, r3
   1782c:	subs	r1, r1, sl
   17830:	str	r0, [sp, #92]	; 0x5c
   17834:	ldr	r0, [sp, #212]	; 0xd4
   17838:	str	r1, [sp, #104]	; 0x68
   1783c:	sbc	r1, r0, fp
   17840:	cmp	r3, r5
   17844:	cmpeq	r2, r4
   17848:	str	r1, [sp, #108]	; 0x6c
   1784c:	movhi	r3, #1
   17850:	movls	r3, #0
   17854:	ldrd	r4, [sp, #104]	; 0x68
   17858:	subs	r4, r4, r3
   1785c:	sbc	r5, r5, #0
   17860:	cmp	r4, #0
   17864:	sbcs	r3, r5, #0
   17868:	bge	17894 <__assert_fail@plt+0x6140>
   1786c:	ldrd	r0, [sp, #88]	; 0x58
   17870:	adds	r2, r6, r0
   17874:	adcs	r3, r7, r1
   17878:	movcs	r1, #1
   1787c:	movcc	r1, #0
   17880:	strd	r2, [sp, #88]	; 0x58
   17884:	adds	r2, r4, r1
   17888:	adc	r3, r5, #0
   1788c:	adds	r4, r8, r2
   17890:	adc	r5, r9, r3
   17894:	strd	r4, [sp, #8]
   17898:	ldrd	r0, [sp, #120]	; 0x78
   1789c:	ldrd	r4, [sp, #88]	; 0x58
   178a0:	ldrd	r2, [sp, #112]	; 0x70
   178a4:	strd	r0, [sp]
   178a8:	add	r0, sp, #232	; 0xe8
   178ac:	ldr	r1, [sp, #72]	; 0x48
   178b0:	strd	r4, [sp, #16]
   178b4:	strd	r8, [sp, #24]
   178b8:	strd	r6, [sp, #32]
   178bc:	str	r1, [sp, #40]	; 0x28
   178c0:	ldr	r1, [sp, #84]	; 0x54
   178c4:	str	r1, [sp, #44]	; 0x2c
   178c8:	bl	11b94 <__assert_fail@plt+0x440>
   178cc:	ldr	r3, [sp, #56]	; 0x38
   178d0:	strd	r0, [sp, #120]	; 0x78
   178d4:	ldrd	r0, [sp, #232]	; 0xe8
   178d8:	and	r3, r3, #31
   178dc:	cmp	r3, #1
   178e0:	strd	r0, [sp, #112]	; 0x70
   178e4:	beq	17a90 <__assert_fail@plt+0x633c>
   178e8:	ldrd	r4, [sp, #200]	; 0xc8
   178ec:	ldr	r3, [sp, #56]	; 0x38
   178f0:	subs	r3, r3, #1
   178f4:	str	r3, [sp, #56]	; 0x38
   178f8:	bne	17738 <__assert_fail@plt+0x5fe4>
   178fc:	ldr	r3, [sp, #128]	; 0x80
   17900:	strd	r4, [sp, #208]	; 0xd0
   17904:	cmp	r3, #0
   17908:	lsl	r3, r3, #1
   1790c:	str	r3, [sp, #192]	; 0xc0
   17910:	ldrd	r2, [sp, #64]	; 0x40
   17914:	beq	17e78 <__assert_fail@plt+0x6724>
   17918:	mov	sl, r2
   1791c:	mov	fp, r3
   17920:	strd	r8, [sp, #48]	; 0x30
   17924:	ldr	r1, [sp, #72]	; 0x48
   17928:	mov	r2, r4
   1792c:	mov	r3, r5
   17930:	add	r0, sp, #232	; 0xe8
   17934:	strd	sl, [sp]
   17938:	strd	r4, [sp, #8]
   1793c:	ldrd	r4, [sp, #48]	; 0x30
   17940:	strd	sl, [sp, #16]
   17944:	str	r1, [sp, #40]	; 0x28
   17948:	ldr	r1, [sp, #84]	; 0x54
   1794c:	strd	r4, [sp, #24]
   17950:	strd	r6, [sp, #32]
   17954:	str	r1, [sp, #44]	; 0x2c
   17958:	bl	11b94 <__assert_fail@plt+0x440>
   1795c:	ldrd	sl, [sp, #96]	; 0x60
   17960:	ldrd	r4, [sp, #232]	; 0xe8
   17964:	adds	r2, r0, sl
   17968:	adcs	r3, r1, fp
   1796c:	mov	r0, r2
   17970:	mov	r1, r3
   17974:	movcs	r3, #1
   17978:	movcc	r3, #0
   1797c:	mov	sl, r2
   17980:	adds	r8, r4, r3
   17984:	ldrd	r2, [sp, #48]	; 0x30
   17988:	mov	fp, r1
   1798c:	adc	r9, r5, #0
   17990:	mov	r4, r8
   17994:	mov	r5, r9
   17998:	cmp	r9, r3
   1799c:	cmpeq	r8, r2
   179a0:	bhi	179c8 <__assert_fail@plt+0x6274>
   179a4:	moveq	r3, #1
   179a8:	movne	r3, #0
   179ac:	cmp	r7, r1
   179b0:	cmpeq	r6, r0
   179b4:	movhi	r3, #0
   179b8:	andls	r3, r3, #1
   179bc:	cmp	r3, #0
   179c0:	strdeq	r4, [sp, #200]	; 0xc8
   179c4:	beq	17a0c <__assert_fail@plt+0x62b8>
   179c8:	cmp	r7, r1
   179cc:	ldr	r3, [sp, #132]	; 0x84
   179d0:	cmpeq	r6, r0
   179d4:	movhi	r2, #1
   179d8:	movls	r2, #0
   179dc:	subs	sl, r0, r6
   179e0:	sbc	fp, r1, r7
   179e4:	ldr	r1, [sp, #48]	; 0x30
   179e8:	subs	r2, r4, r2
   179ec:	sbc	r3, r5, r3
   179f0:	subs	r2, r2, r1
   179f4:	mov	r4, r2
   179f8:	ldr	r2, [sp, #52]	; 0x34
   179fc:	sbc	r3, r3, r2
   17a00:	mov	r2, r4
   17a04:	mov	r5, r3
   17a08:	strd	r2, [sp, #200]	; 0xc8
   17a0c:	ldr	r3, [sp, #56]	; 0x38
   17a10:	ldr	r2, [sp, #128]	; 0x80
   17a14:	add	r3, r3, #1
   17a18:	cmp	r2, r3
   17a1c:	str	r3, [sp, #56]	; 0x38
   17a20:	bne	17924 <__assert_fail@plt+0x61d0>
   17a24:	ldrd	r8, [sp, #48]	; 0x30
   17a28:	mov	r3, r2
   17a2c:	strd	sl, [sp, #168]	; 0xa8
   17a30:	str	r3, [sp, #56]	; 0x38
   17a34:	ldrd	r2, [sp, #64]	; 0x40
   17a38:	strd	r2, [sp, #48]	; 0x30
   17a3c:	ldr	r3, [sp, #192]	; 0xc0
   17a40:	strd	r4, [sp, #216]	; 0xd8
   17a44:	str	r3, [sp, #128]	; 0x80
   17a48:	ldrd	r2, [sp, #168]	; 0xa8
   17a4c:	strd	r2, [sp, #64]	; 0x40
   17a50:	b	17738 <__assert_fail@plt+0x5fe4>
   17a54:	ldrd	r4, [sp, #56]	; 0x38
   17a58:	mov	r0, #0
   17a5c:	cmp	r7, r5
   17a60:	cmpeq	r6, r4
   17a64:	movls	r1, r0
   17a68:	movhi	r1, #1
   17a6c:	subs	ip, r4, r6
   17a70:	str	ip, [sp, #64]	; 0x40
   17a74:	sbc	ip, r5, r7
   17a78:	subs	r1, r2, r1
   17a7c:	sbc	r0, r3, r0
   17a80:	subs	r2, r1, r8
   17a84:	sbc	r3, r0, r9
   17a88:	str	ip, [sp, #68]	; 0x44
   17a8c:	b	17628 <__assert_fail@plt+0x5ed4>
   17a90:	ldrd	r2, [sp, #176]	; 0xb0
   17a94:	orrs	r3, r2, r3
   17a98:	beq	181b4 <__assert_fail@plt+0x6a60>
   17a9c:	mov	r2, r0
   17aa0:	mov	r3, r1
   17aa4:	ldrd	r0, [sp, #120]	; 0x78
   17aa8:	orr	ip, r0, r2
   17aac:	orr	r3, r1, r3
   17ab0:	str	ip, [sp, #144]	; 0x90
   17ab4:	str	r3, [sp, #148]	; 0x94
   17ab8:	ldrd	r2, [sp, #144]	; 0x90
   17abc:	orrs	r3, r2, r3
   17ac0:	beq	17b18 <__assert_fail@plt+0x63c4>
   17ac4:	add	r0, sp, #224	; 0xe0
   17ac8:	strd	r8, [sp, #8]
   17acc:	ldrd	r4, [sp, #120]	; 0x78
   17ad0:	ldrd	r2, [sp, #112]	; 0x70
   17ad4:	strd	r4, [sp]
   17ad8:	strd	r6, [sp, #16]
   17adc:	bl	126ec <__assert_fail@plt+0xf98>
   17ae0:	ldrd	r2, [sp, #224]	; 0xe0
   17ae4:	orrs	r3, r2, r3
   17ae8:	movne	r3, #1
   17aec:	moveq	r3, #0
   17af0:	cmp	r1, #0
   17af4:	cmpeq	r0, #1
   17af8:	movne	r3, #1
   17afc:	cmp	r3, #0
   17b00:	bne	181d4 <__assert_fail@plt+0x6a80>
   17b04:	ldrd	r2, [sp, #64]	; 0x40
   17b08:	ldrd	r4, [sp, #200]	; 0xc8
   17b0c:	strd	r2, [sp, #168]	; 0xa8
   17b10:	strd	r4, [sp, #216]	; 0xd8
   17b14:	b	178ec <__assert_fail@plt+0x6198>
   17b18:	ldrd	r2, [sp, #144]	; 0x90
   17b1c:	strd	r2, [sp, #112]	; 0x70
   17b20:	strd	r8, [sp, #224]	; 0xe0
   17b24:	ldrd	sl, [sp, #168]	; 0xa8
   17b28:	b	17b64 <__assert_fail@plt+0x6410>
   17b2c:	ldrd	r4, [sp, #136]	; 0x88
   17b30:	add	r0, sp, #224	; 0xe0
   17b34:	strd	r4, [sp]
   17b38:	strd	r8, [sp, #8]
   17b3c:	strd	r6, [sp, #16]
   17b40:	bl	126ec <__assert_fail@plt+0xf98>
   17b44:	mov	r4, r0
   17b48:	mov	r5, r1
   17b4c:	ldrd	r0, [sp, #224]	; 0xe0
   17b50:	orrs	r3, r0, r1
   17b54:	bne	17ce0 <__assert_fail@plt+0x658c>
   17b58:	cmp	r5, #0
   17b5c:	cmpeq	r4, #1
   17b60:	bne	17e84 <__assert_fail@plt+0x6730>
   17b64:	ldr	r1, [sp, #72]	; 0x48
   17b68:	add	r0, sp, #232	; 0xe8
   17b6c:	strd	sl, [sp]
   17b70:	ldrd	r4, [sp, #216]	; 0xd8
   17b74:	str	r1, [sp, #40]	; 0x28
   17b78:	mov	r2, r4
   17b7c:	mov	r3, r5
   17b80:	ldr	r1, [sp, #84]	; 0x54
   17b84:	strd	r4, [sp, #8]
   17b88:	strd	sl, [sp, #16]
   17b8c:	strd	r8, [sp, #24]
   17b90:	strd	r6, [sp, #32]
   17b94:	str	r1, [sp, #44]	; 0x2c
   17b98:	bl	11b94 <__assert_fail@plt+0x440>
   17b9c:	ldrd	sl, [sp, #96]	; 0x60
   17ba0:	ldrd	r2, [sp, #232]	; 0xe8
   17ba4:	adds	r4, r0, sl
   17ba8:	adcs	r5, r1, fp
   17bac:	mov	r0, r4
   17bb0:	movcs	ip, #1
   17bb4:	movcc	ip, #0
   17bb8:	mov	sl, r4
   17bbc:	adds	r4, r2, ip
   17bc0:	mov	r1, r5
   17bc4:	mov	fp, r5
   17bc8:	adc	r5, r3, #0
   17bcc:	cmp	r5, r9
   17bd0:	cmpeq	r4, r8
   17bd4:	bhi	17bf8 <__assert_fail@plt+0x64a4>
   17bd8:	moveq	ip, #1
   17bdc:	movne	ip, #0
   17be0:	cmp	r7, r1
   17be4:	cmpeq	r6, r0
   17be8:	movhi	ip, #0
   17bec:	andls	ip, ip, #1
   17bf0:	cmp	ip, #0
   17bf4:	beq	17c24 <__assert_fail@plt+0x64d0>
   17bf8:	cmp	r7, r1
   17bfc:	mov	ip, #0
   17c00:	cmpeq	r6, r0
   17c04:	movls	lr, ip
   17c08:	movhi	lr, #1
   17c0c:	subs	sl, r0, r6
   17c10:	sbc	fp, r1, r7
   17c14:	subs	lr, r4, lr
   17c18:	sbc	ip, r5, ip
   17c1c:	subs	r4, lr, r8
   17c20:	sbc	r5, ip, r9
   17c24:	ldrd	r2, [sp, #48]	; 0x30
   17c28:	strd	r4, [sp, #216]	; 0xd8
   17c2c:	ldr	r1, [sp, #208]	; 0xd0
   17c30:	subs	r0, r2, sl
   17c34:	str	r0, [sp, #136]	; 0x88
   17c38:	sbc	r0, r3, fp
   17c3c:	subs	r1, r1, r4
   17c40:	str	r0, [sp, #140]	; 0x8c
   17c44:	ldr	r0, [sp, #212]	; 0xd4
   17c48:	str	r1, [sp, #152]	; 0x98
   17c4c:	sbc	r1, r0, r5
   17c50:	cmp	r3, fp
   17c54:	cmpeq	r2, sl
   17c58:	str	r1, [sp, #156]	; 0x9c
   17c5c:	movcc	r1, #1
   17c60:	movcs	r1, #0
   17c64:	ldrd	r2, [sp, #152]	; 0x98
   17c68:	subs	r2, r2, r1
   17c6c:	sbc	r3, r3, #0
   17c70:	cmp	r2, #0
   17c74:	sbcs	r1, r3, #0
   17c78:	bge	17ca4 <__assert_fail@plt+0x6550>
   17c7c:	ldrd	r4, [sp, #136]	; 0x88
   17c80:	adds	r0, r6, r4
   17c84:	adcs	r1, r7, r5
   17c88:	movcs	ip, #1
   17c8c:	movcc	ip, #0
   17c90:	strd	r0, [sp, #136]	; 0x88
   17c94:	adds	r0, r2, ip
   17c98:	adc	r1, r3, #0
   17c9c:	adds	r2, r8, r0
   17ca0:	adc	r3, r9, r1
   17ca4:	ldrd	r0, [sp, #136]	; 0x88
   17ca8:	orr	ip, r2, r0
   17cac:	orr	r1, r3, r1
   17cb0:	str	ip, [sp, #160]	; 0xa0
   17cb4:	str	r1, [sp, #164]	; 0xa4
   17cb8:	ldrd	r0, [sp, #160]	; 0xa0
   17cbc:	orrs	r1, r0, r1
   17cc0:	bne	17b2c <__assert_fail@plt+0x63d8>
   17cc4:	mov	r0, r8
   17cc8:	mov	r1, r9
   17ccc:	strd	r8, [sp, #224]	; 0xe0
   17cd0:	orrs	r3, r0, r1
   17cd4:	mov	r4, r6
   17cd8:	mov	r5, r7
   17cdc:	beq	17b58 <__assert_fail@plt+0x6404>
   17ce0:	cmp	r9, r1
   17ce4:	cmpeq	r8, r0
   17ce8:	movne	r3, #0
   17cec:	moveq	r3, #1
   17cf0:	cmp	r7, r5
   17cf4:	cmpeq	r6, r4
   17cf8:	movne	r3, #0
   17cfc:	cmp	r3, #0
   17d00:	bne	181e0 <__assert_fail@plt+0x6a8c>
   17d04:	ldr	r2, [sp, #196]	; 0xc4
   17d08:	ubfx	r3, r4, #1, #7
   17d0c:	mov	lr, #0
   17d10:	add	r3, r2, r3
   17d14:	mov	r2, r4
   17d18:	ldrb	ip, [r3, #708]	; 0x2c4
   17d1c:	mov	r3, r5
   17d20:	umull	r8, r9, ip, ip
   17d24:	adds	ip, ip, ip
   17d28:	adc	lr, lr, lr
   17d2c:	str	lr, [sp, #48]	; 0x30
   17d30:	mul	lr, r8, r5
   17d34:	umull	sl, fp, r8, r4
   17d38:	mla	lr, r4, r9, lr
   17d3c:	add	fp, lr, fp
   17d40:	subs	lr, ip, sl
   17d44:	ldr	ip, [sp, #48]	; 0x30
   17d48:	sbc	r8, ip, fp
   17d4c:	umull	sl, fp, lr, lr
   17d50:	mul	ip, lr, r8
   17d54:	adds	lr, lr, lr
   17d58:	adc	r8, r8, r8
   17d5c:	add	fp, fp, ip, lsl #1
   17d60:	str	r8, [sp, #56]	; 0x38
   17d64:	mul	ip, sl, r5
   17d68:	umull	r8, r9, sl, r4
   17d6c:	mla	ip, r4, fp, ip
   17d70:	strd	r8, [sp, #48]	; 0x30
   17d74:	add	ip, ip, r9
   17d78:	str	ip, [sp, #52]	; 0x34
   17d7c:	ldrd	r8, [sp, #48]	; 0x30
   17d80:	subs	lr, lr, r8
   17d84:	ldr	r8, [sp, #56]	; 0x38
   17d88:	umull	sl, fp, lr, lr
   17d8c:	sbc	r8, r8, r9
   17d90:	mul	ip, lr, r8
   17d94:	adds	lr, lr, lr
   17d98:	adc	r8, r8, r8
   17d9c:	add	fp, fp, ip, lsl #1
   17da0:	str	r8, [sp, #56]	; 0x38
   17da4:	mul	ip, sl, r5
   17da8:	umull	r8, r9, sl, r4
   17dac:	mla	ip, r4, fp, ip
   17db0:	strd	r8, [sp, #48]	; 0x30
   17db4:	add	ip, ip, r9
   17db8:	str	ip, [sp, #52]	; 0x34
   17dbc:	ldrd	r8, [sp, #48]	; 0x30
   17dc0:	subs	lr, lr, r8
   17dc4:	ldr	r8, [sp, #56]	; 0x38
   17dc8:	sbc	ip, r8, r9
   17dcc:	mul	ip, r6, ip
   17dd0:	mla	ip, lr, r7, ip
   17dd4:	umull	r6, r7, r6, lr
   17dd8:	add	r7, ip, r7
   17ddc:	bl	1480c <__assert_fail@plt+0x30b8>
   17de0:	cmp	r0, #0
   17de4:	beq	18130 <__assert_fail@plt+0x69dc>
   17de8:	ldrd	r0, [sp, #224]	; 0xe0
   17dec:	orrs	r3, r0, r1
   17df0:	beq	18198 <__assert_fail@plt+0x6a44>
   17df4:	ldr	r3, [sp, #284]	; 0x11c
   17df8:	ldrd	r2, [r3, #8]
   17dfc:	orrs	r3, r2, r3
   17e00:	bne	181d0 <__assert_fail@plt+0x6a7c>
   17e04:	ldr	r3, [sp, #284]	; 0x11c
   17e08:	strd	r4, [r3]
   17e0c:	strd	r0, [r3, #8]
   17e10:	cmp	r7, #0
   17e14:	cmpeq	r6, #1
   17e18:	bls	18160 <__assert_fail@plt+0x6a0c>
   17e1c:	add	r3, pc, #1004	; 0x3ec
   17e20:	ldrd	r2, [r3]
   17e24:	cmp	r7, r3
   17e28:	cmpeq	r6, r2
   17e2c:	bls	17e44 <__assert_fail@plt+0x66f0>
   17e30:	mov	r0, r6
   17e34:	mov	r1, r7
   17e38:	bl	15e14 <__assert_fail@plt+0x46c0>
   17e3c:	cmp	r0, #0
   17e40:	beq	18160 <__assert_fail@plt+0x6a0c>
   17e44:	mov	r1, #1
   17e48:	mov	r2, r6
   17e4c:	ldr	r0, [sp, #284]	; 0x11c
   17e50:	mov	r3, r7
   17e54:	str	r1, [sp]
   17e58:	bl	11a78 <__assert_fail@plt+0x324>
   17e5c:	add	sp, sp, #244	; 0xf4
   17e60:	ldrd	r4, [sp]
   17e64:	ldrd	r6, [sp, #8]
   17e68:	ldrd	r8, [sp, #16]
   17e6c:	ldrd	sl, [sp, #24]
   17e70:	add	sp, sp, #32
   17e74:	pop	{pc}		; (ldr pc, [sp], #4)
   17e78:	strd	r2, [sp, #168]	; 0xa8
   17e7c:	ldr	r3, [sp, #128]	; 0x80
   17e80:	b	17a30 <__assert_fail@plt+0x62dc>
   17e84:	ldr	r2, [sp, #196]	; 0xc4
   17e88:	ubfx	r3, r4, #1, #7
   17e8c:	mov	lr, #0
   17e90:	strd	r0, [sp, #120]	; 0x78
   17e94:	strd	sl, [sp, #168]	; 0xa8
   17e98:	add	r3, r2, r3
   17e9c:	ldrb	ip, [r3, #708]	; 0x2c4
   17ea0:	umull	r2, r3, ip, ip
   17ea4:	adds	ip, ip, ip
   17ea8:	adc	lr, lr, lr
   17eac:	mul	sl, r2, r5
   17eb0:	mov	r1, sl
   17eb4:	umull	sl, fp, r2, r4
   17eb8:	mla	r3, r4, r3, r1
   17ebc:	add	r3, r3, fp
   17ec0:	mov	fp, r3
   17ec4:	subs	r3, ip, sl
   17ec8:	sbc	lr, lr, fp
   17ecc:	adds	r2, r3, r3
   17ed0:	umull	sl, fp, r3, r3
   17ed4:	adc	ip, lr, lr
   17ed8:	mul	lr, r3, lr
   17edc:	strd	sl, [sp, #72]	; 0x48
   17ee0:	add	r3, fp, lr, lsl #1
   17ee4:	str	r3, [sp, #76]	; 0x4c
   17ee8:	ldrd	r0, [sp, #72]	; 0x48
   17eec:	ldr	r1, [sp, #76]	; 0x4c
   17ef0:	mul	r3, r0, r5
   17ef4:	umull	sl, fp, r0, r4
   17ef8:	mla	r3, r4, r1, r3
   17efc:	add	r3, r3, fp
   17f00:	mov	fp, r3
   17f04:	subs	r3, r2, sl
   17f08:	sbc	ip, ip, fp
   17f0c:	adds	r1, r3, r3
   17f10:	umull	sl, fp, r3, r3
   17f14:	adc	lr, ip, ip
   17f18:	mul	ip, r3, ip
   17f1c:	add	r3, fp, ip, lsl #1
   17f20:	mul	ip, sl, r5
   17f24:	mov	fp, r3
   17f28:	umull	r2, r3, sl, r4
   17f2c:	mla	ip, r4, fp, ip
   17f30:	subs	r1, r1, r2
   17f34:	add	r3, ip, r3
   17f38:	str	r1, [sp, #84]	; 0x54
   17f3c:	sbc	lr, lr, r3
   17f40:	cmp	r9, r5
   17f44:	cmpeq	r8, r4
   17f48:	mul	r3, r6, lr
   17f4c:	mla	r3, r1, r7, r3
   17f50:	umull	r6, r7, r6, r1
   17f54:	add	r3, r3, r7
   17f58:	mov	r7, r3
   17f5c:	bcc	18104 <__assert_fail@plt+0x69b0>
   17f60:	umull	r0, r1, r3, r4
   17f64:	mov	ip, #0
   17f68:	umull	r2, r3, r3, r5
   17f6c:	mov	sl, r0
   17f70:	mov	fp, r1
   17f74:	umull	r0, r1, r6, r4
   17f78:	strd	r2, [sp, #72]	; 0x48
   17f7c:	strd	sl, [sp, #120]	; 0x78
   17f80:	umlal	sl, fp, r6, r5
   17f84:	adds	r1, r1, sl
   17f88:	mov	r3, fp
   17f8c:	ldrd	sl, [sp, #120]	; 0x78
   17f90:	adc	r3, ip, r3
   17f94:	str	r1, [sp, #184]	; 0xb8
   17f98:	str	r3, [sp, #188]	; 0xbc
   17f9c:	ldrd	r0, [sp, #184]	; 0xb8
   17fa0:	cmp	fp, r1
   17fa4:	cmpeq	sl, r0
   17fa8:	bls	17fc4 <__assert_fail@plt+0x6870>
   17fac:	ldr	r3, [sp, #72]	; 0x48
   17fb0:	adds	r3, r3, ip
   17fb4:	str	r3, [sp, #72]	; 0x48
   17fb8:	ldr	r3, [sp, #76]	; 0x4c
   17fbc:	adc	r3, r3, #1
   17fc0:	str	r3, [sp, #76]	; 0x4c
   17fc4:	mov	r1, #0
   17fc8:	ldr	r2, [sp, #84]	; 0x54
   17fcc:	ldr	r3, [sp, #188]	; 0xbc
   17fd0:	subs	r3, r8, r3
   17fd4:	sbc	r1, r9, r1
   17fd8:	ldrd	r8, [sp, #72]	; 0x48
   17fdc:	subs	r3, r3, r8
   17fe0:	sbc	r1, r1, r9
   17fe4:	mul	lr, r3, lr
   17fe8:	umull	r8, r9, r3, r2
   17fec:	mla	r2, r2, r1, lr
   17ff0:	add	r9, r2, r9
   17ff4:	cmp	r5, #0
   17ff8:	cmpeq	r4, #1
   17ffc:	bls	180e8 <__assert_fail@plt+0x6994>
   18000:	add	r3, pc, #520	; 0x208
   18004:	ldrd	r2, [r3]
   18008:	cmp	r5, r3
   1800c:	cmpeq	r4, r2
   18010:	bls	18028 <__assert_fail@plt+0x68d4>
   18014:	mov	r0, r4
   18018:	mov	r1, r5
   1801c:	bl	15e14 <__assert_fail@plt+0x46c0>
   18020:	cmp	r0, #0
   18024:	beq	180e8 <__assert_fail@plt+0x6994>
   18028:	mov	r1, #1
   1802c:	mov	r2, r4
   18030:	ldr	r0, [sp, #284]	; 0x11c
   18034:	mov	r3, r5
   18038:	str	r1, [sp]
   1803c:	bl	11a78 <__assert_fail@plt+0x324>
   18040:	orrs	r3, r8, r9
   18044:	beq	17e10 <__assert_fail@plt+0x66bc>
   18048:	mov	r2, r6
   1804c:	mov	r3, r7
   18050:	mov	r0, r8
   18054:	mov	r1, r9
   18058:	bl	1480c <__assert_fail@plt+0x30b8>
   1805c:	cmp	r0, #0
   18060:	bne	18178 <__assert_fail@plt+0x6a24>
   18064:	ldrd	r2, [sp, #200]	; 0xc8
   18068:	orrs	r1, r2, r3
   1806c:	beq	1808c <__assert_fail@plt+0x6938>
   18070:	ldrd	r0, [sp, #64]	; 0x40
   18074:	strd	r0, [sp]
   18078:	add	r0, sp, #200	; 0xc8
   1807c:	strd	r8, [sp, #8]
   18080:	strd	r6, [sp, #16]
   18084:	bl	129ac <__assert_fail@plt+0x1258>
   18088:	strd	r0, [sp, #64]	; 0x40
   1808c:	ldrd	r2, [sp, #208]	; 0xd0
   18090:	orrs	r1, r2, r3
   18094:	beq	180b4 <__assert_fail@plt+0x6960>
   18098:	ldrd	r0, [sp, #48]	; 0x30
   1809c:	strd	r0, [sp]
   180a0:	add	r0, sp, #208	; 0xd0
   180a4:	strd	r8, [sp, #8]
   180a8:	strd	r6, [sp, #16]
   180ac:	bl	129ac <__assert_fail@plt+0x1258>
   180b0:	strd	r0, [sp, #48]	; 0x30
   180b4:	ldrd	r2, [sp, #216]	; 0xd8
   180b8:	orrs	r1, r2, r3
   180bc:	beq	180dc <__assert_fail@plt+0x6988>
   180c0:	ldrd	r0, [sp, #168]	; 0xa8
   180c4:	strd	r0, [sp]
   180c8:	add	r0, sp, #216	; 0xd8
   180cc:	strd	r8, [sp, #8]
   180d0:	strd	r6, [sp, #16]
   180d4:	bl	129ac <__assert_fail@plt+0x1258>
   180d8:	strd	r0, [sp, #168]	; 0xa8
   180dc:	ldrd	r2, [sp, #144]	; 0x90
   180e0:	strd	r2, [sp, #120]	; 0x78
   180e4:	b	1766c <__assert_fail@plt+0x5f18>
   180e8:	ldr	r2, [sp, #280]	; 0x118
   180ec:	mov	r0, r4
   180f0:	mov	r1, r5
   180f4:	ldr	r3, [sp, #284]	; 0x11c
   180f8:	add	r2, r2, #1
   180fc:	bl	166d4 <__assert_fail@plt+0x4f80>
   18100:	b	18040 <__assert_fail@plt+0x68ec>
   18104:	ldrd	r8, [sp, #120]	; 0x78
   18108:	b	17ff4 <__assert_fail@plt+0x68a0>
   1810c:	mov	r2, #1
   18110:	mov	r3, #0
   18114:	mov	sl, #127	; 0x7f
   18118:	mov	fp, #0
   1811c:	strd	r2, [sp, #120]	; 0x78
   18120:	mov	r2, #0
   18124:	mov	r3, #0
   18128:	strd	r2, [sp, #112]	; 0x70
   1812c:	b	174f8 <__assert_fail@plt+0x5da4>
   18130:	ldr	r3, [sp, #280]	; 0x118
   18134:	mov	r2, r4
   18138:	ldr	r1, [sp, #284]	; 0x11c
   1813c:	add	ip, r3, #1
   18140:	mov	r3, r5
   18144:	str	ip, [sp]
   18148:	str	r1, [sp, #4]
   1814c:	ldrd	r0, [sp, #224]	; 0xe0
   18150:	bl	174a4 <__assert_fail@plt+0x5d50>
   18154:	cmp	r7, #0
   18158:	cmpeq	r6, #1
   1815c:	bhi	17e1c <__assert_fail@plt+0x66c8>
   18160:	mov	r0, r6
   18164:	mov	r1, r7
   18168:	ldr	r2, [sp, #280]	; 0x118
   1816c:	ldr	r3, [sp, #284]	; 0x11c
   18170:	bl	166d4 <__assert_fail@plt+0x4f80>
   18174:	b	17e5c <__assert_fail@plt+0x6708>
   18178:	ldr	r3, [sp, #284]	; 0x11c
   1817c:	ldrd	r2, [r3, #8]
   18180:	orrs	r3, r2, r3
   18184:	bne	181d0 <__assert_fail@plt+0x6a7c>
   18188:	ldr	r3, [sp, #284]	; 0x11c
   1818c:	strd	r6, [r3]
   18190:	strd	r8, [r3, #8]
   18194:	b	17e5c <__assert_fail@plt+0x6708>
   18198:	mov	r1, #1
   1819c:	mov	r2, r4
   181a0:	ldr	r0, [sp, #284]	; 0x11c
   181a4:	mov	r3, r5
   181a8:	str	r1, [sp]
   181ac:	bl	11a78 <__assert_fail@plt+0x324>
   181b0:	b	17e10 <__assert_fail@plt+0x66bc>
   181b4:	movw	r1, #17888	; 0x45e0
   181b8:	movt	r1, #2
   181bc:	ldr	r3, [pc, #84]	; 18218 <__assert_fail@plt+0x6ac4>
   181c0:	movw	r0, #18228	; 0x4734
   181c4:	movt	r0, #2
   181c8:	mov	r2, #476	; 0x1dc
   181cc:	bl	11754 <__assert_fail@plt>
   181d0:	bl	126c4 <__assert_fail@plt+0xf70>
   181d4:	ldrd	r2, [sp, #120]	; 0x78
   181d8:	strd	r2, [sp, #144]	; 0x90
   181dc:	b	17b24 <__assert_fail@plt+0x63d0>
   181e0:	ldr	r3, [sp, #280]	; 0x118
   181e4:	mov	r2, r6
   181e8:	mov	r0, r8
   181ec:	ldr	r1, [sp, #284]	; 0x11c
   181f0:	add	ip, r3, #1
   181f4:	mov	r3, r7
   181f8:	str	ip, [sp]
   181fc:	str	r1, [sp, #4]
   18200:	mov	r1, r9
   18204:	bl	174a4 <__assert_fail@plt+0x5d50>
   18208:	b	17e5c <__assert_fail@plt+0x6708>
   1820c:	nop	{0}
   18210:	cmneq	sp, r8, ror sp
   18214:	andeq	r0, r0, r0
   18218:	andeq	r1, r2, ip, lsr #22
   1821c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18220:	mov	r3, r0
   18224:	mov	r4, r0
   18228:	strd	r6, [sp, #8]
   1822c:	strd	r8, [sp, #16]
   18230:	strd	sl, [sp, #24]
   18234:	str	lr, [sp, #32]
   18238:	sub	sp, sp, #316	; 0x13c
   1823c:	ldrb	r9, [r0]
   18240:	cmp	r9, #32
   18244:	bne	18254 <__assert_fail@plt+0x6b00>
   18248:	ldrb	r9, [r3, #1]!
   1824c:	cmp	r9, #32
   18250:	beq	18248 <__assert_fail@plt+0x6af4>
   18254:	cmp	r9, #43	; 0x2b
   18258:	movne	r9, r3
   1825c:	addeq	r9, r3, #1
   18260:	mov	r5, #4
   18264:	mov	r2, r9
   18268:	ldrb	r3, [r2], #1
   1826c:	cmp	r3, #0
   18270:	beq	182d8 <__assert_fail@plt+0x6b84>
   18274:	sub	r3, r3, #48	; 0x30
   18278:	mov	r5, #0
   1827c:	cmp	r3, #9
   18280:	bls	18268 <__assert_fail@plt+0x6b14>
   18284:	mov	r2, #5
   18288:	movw	r1, #18276	; 0x4764
   1828c:	movt	r1, #2
   18290:	mov	r0, #0
   18294:	bl	11430 <dcgettext@plt>
   18298:	mov	r5, r0
   1829c:	mov	r0, r4
   182a0:	bl	1d448 <__assert_fail@plt+0xbcf4>
   182a4:	mov	r1, #0
   182a8:	mov	r3, r0
   182ac:	mov	r2, r5
   182b0:	mov	r0, r1
   182b4:	bl	11520 <error@plt>
   182b8:	mov	r0, #0
   182bc:	add	sp, sp, #316	; 0x13c
   182c0:	ldrd	r4, [sp]
   182c4:	ldrd	r6, [sp, #8]
   182c8:	ldrd	r8, [sp, #16]
   182cc:	ldrd	sl, [sp, #24]
   182d0:	add	sp, sp, #32
   182d4:	pop	{pc}		; (ldr pc, [sp], #4)
   182d8:	cmp	r5, #0
   182dc:	bne	18284 <__assert_fail@plt+0x6b30>
   182e0:	mov	ip, r9
   182e4:	ldrb	r2, [ip], #1
   182e8:	cmp	r2, #0
   182ec:	beq	18790 <__assert_fail@plt+0x703c>
   182f0:	mov	r4, #0
   182f4:	sub	r2, r2, #48	; 0x30
   182f8:	str	r5, [sp, #24]
   182fc:	mov	r8, r4
   18300:	mov	r6, r4
   18304:	str	r9, [sp, #28]
   18308:	mov	r7, r4
   1830c:	lsl	lr, r8, #2
   18310:	mov	r3, #0
   18314:	lsl	r9, r4, #2
   18318:	orr	lr, lr, r4, lsr #30
   1831c:	adds	r9, r9, r4
   18320:	lsr	r5, r8, #31
   18324:	adc	lr, lr, r8
   18328:	adds	sl, r9, r9
   1832c:	lsl	r9, r7, #2
   18330:	adc	fp, lr, lr
   18334:	adds	r1, r4, r4
   18338:	add	r5, r5, r8, lsr #29
   1833c:	lsl	lr, r6, #2
   18340:	str	r1, [sp, #8]
   18344:	adc	r1, r8, r8
   18348:	orr	r4, r9, r6, lsr #30
   1834c:	str	r1, [sp, #12]
   18350:	ldrd	r0, [sp, #8]
   18354:	cmp	fp, r1
   18358:	cmpeq	sl, r0
   1835c:	movcc	r1, #1
   18360:	movcs	r1, #0
   18364:	adds	r8, sl, r2
   18368:	add	r5, r1, r5
   1836c:	adcs	r9, fp, r3
   18370:	movcs	r2, #1
   18374:	movcc	r2, #0
   18378:	adds	lr, lr, r6
   1837c:	add	r2, r2, r5
   18380:	adc	r4, r4, r7
   18384:	adds	r3, lr, lr
   18388:	adc	r1, r4, r4
   1838c:	mov	r4, r8
   18390:	str	r3, [sp, #16]
   18394:	mov	r3, #0
   18398:	mov	r8, r9
   1839c:	str	r1, [sp, #20]
   183a0:	ldrd	r0, [sp, #16]
   183a4:	adds	r6, r0, r2
   183a8:	mov	r2, #0
   183ac:	adcs	r7, r1, r3
   183b0:	mov	r3, #0
   183b4:	movcs	r2, #1
   183b8:	movcs	r3, #0
   183bc:	orrs	r3, r2, r3
   183c0:	bne	183e8 <__assert_fail@plt+0x6c94>
   183c4:	ldrb	r2, [ip], #1
   183c8:	cmp	r2, #0
   183cc:	beq	18578 <__assert_fail@plt+0x6e24>
   183d0:	add	r1, pc, #944	; 0x3b0
   183d4:	ldrd	r0, [r1]
   183d8:	sub	r2, r2, #48	; 0x30
   183dc:	cmp	r7, r1
   183e0:	cmpeq	r6, r0
   183e4:	bls	1830c <__assert_fail@plt+0x6bb8>
   183e8:	ldr	r5, [sp, #24]
   183ec:	ldr	r9, [sp, #28]
   183f0:	movw	r3, #25068	; 0x61ec
   183f4:	movt	r3, #3
   183f8:	ldrb	r3, [r3, #8]
   183fc:	cmp	r3, #0
   18400:	bne	18748 <__assert_fail@plt+0x6ff4>
   18404:	mov	r1, r9
   18408:	mov	r2, #10
   1840c:	add	r0, sp, #32
   18410:	movw	r6, #25060	; 0x61e4
   18414:	movt	r6, #3
   18418:	bl	116f4 <__gmpz_init_set_str@plt>
   1841c:	mov	r1, #10
   18420:	add	r2, sp, #32
   18424:	ldr	r0, [r6]
   18428:	bl	114b4 <__gmpz_out_str@plt>
   1842c:	ldr	r0, [r6]
   18430:	ldr	r3, [r0, #20]
   18434:	ldr	r2, [r0, #24]
   18438:	cmp	r3, r2
   1843c:	addcc	r1, r3, #1
   18440:	movcc	r2, #58	; 0x3a
   18444:	strcc	r1, [r0, #20]
   18448:	strbcc	r2, [r3]
   1844c:	bcs	18778 <__assert_fail@plt+0x7024>
   18450:	add	r1, sp, #56	; 0x38
   18454:	add	r0, sp, #32
   18458:	bl	136e0 <__assert_fail@plt+0x1f8c>
   1845c:	ldr	r2, [sp, #64]	; 0x40
   18460:	cmp	r2, #0
   18464:	beq	18514 <__assert_fail@plt+0x6dc0>
   18468:	ldr	r3, [sp, #60]	; 0x3c
   1846c:	mov	r9, #0
   18470:	mov	r8, #32
   18474:	lsl	sl, r9, #2
   18478:	ldr	r1, [r3, r9, lsl #2]
   1847c:	cmp	r1, #0
   18480:	addne	r7, r9, r9, lsl #1
   18484:	movne	r4, #0
   18488:	lslne	r7, r7, #2
   1848c:	beq	184dc <__assert_fail@plt+0x6d88>
   18490:	ldr	r0, [r6]
   18494:	ldr	r3, [r0, #20]
   18498:	ldr	r2, [r0, #24]
   1849c:	cmp	r3, r2
   184a0:	bcs	18560 <__assert_fail@plt+0x6e0c>
   184a4:	add	r2, r3, #1
   184a8:	mov	r1, #10
   184ac:	add	r4, r4, #1
   184b0:	str	r2, [r0, #20]
   184b4:	strb	r8, [r3]
   184b8:	ldr	r2, [sp, #56]	; 0x38
   184bc:	add	r2, r2, r7
   184c0:	ldr	r0, [r6]
   184c4:	bl	114b4 <__gmpz_out_str@plt>
   184c8:	ldr	r3, [sp, #60]	; 0x3c
   184cc:	ldr	r2, [r3, sl]
   184d0:	cmp	r2, r4
   184d4:	bhi	18490 <__assert_fail@plt+0x6d3c>
   184d8:	ldr	r2, [sp, #64]	; 0x40
   184dc:	add	r9, r9, #1
   184e0:	cmp	r9, r2
   184e4:	bcc	18474 <__assert_fail@plt+0x6d20>
   184e8:	cmp	r2, #0
   184ec:	beq	18514 <__assert_fail@plt+0x6dc0>
   184f0:	mov	r4, #0
   184f4:	ldr	r0, [sp, #56]	; 0x38
   184f8:	add	r5, r5, #1
   184fc:	add	r0, r0, r4
   18500:	add	r4, r4, #12
   18504:	bl	115d4 <__gmpz_clear@plt>
   18508:	ldr	r3, [sp, #64]	; 0x40
   1850c:	cmp	r5, r3
   18510:	bcc	184f4 <__assert_fail@plt+0x6da0>
   18514:	ldr	r0, [sp, #56]	; 0x38
   18518:	bl	18d2c <__assert_fail@plt+0x75d8>
   1851c:	ldr	r0, [sp, #60]	; 0x3c
   18520:	bl	18d2c <__assert_fail@plt+0x75d8>
   18524:	add	r0, sp, #32
   18528:	bl	115d4 <__gmpz_clear@plt>
   1852c:	ldr	r0, [r6]
   18530:	ldr	r3, [r0, #20]
   18534:	ldr	r2, [r0, #24]
   18538:	cmp	r3, r2
   1853c:	addcc	r1, r3, #1
   18540:	movcc	r2, #10
   18544:	strcc	r1, [r0, #20]
   18548:	strbcc	r2, [r3]
   1854c:	bcs	1876c <__assert_fail@plt+0x7018>
   18550:	ldr	r0, [r6]
   18554:	bl	114c0 <fflush_unlocked@plt>
   18558:	mov	r0, #1
   1855c:	b	182bc <__assert_fail@plt+0x6b68>
   18560:	mov	r1, #32
   18564:	add	r4, r4, #1
   18568:	bl	116b8 <__overflow@plt>
   1856c:	mov	r1, #10
   18570:	ldr	r2, [sp, #56]	; 0x38
   18574:	b	184bc <__assert_fail@plt+0x6d68>
   18578:	bic	r3, r7, #-2147483648	; 0x80000000
   1857c:	ldr	r5, [sp, #24]
   18580:	cmp	r3, r7
   18584:	cmpeq	r6, r6
   18588:	ldr	r9, [sp, #28]
   1858c:	bne	183f0 <__assert_fail@plt+0x6c9c>
   18590:	movw	r5, #25068	; 0x61ec
   18594:	movt	r5, #3
   18598:	ldrb	r3, [r5, #8]
   1859c:	cmp	r3, #0
   185a0:	bne	18804 <__assert_fail@plt+0x70b0>
   185a4:	orrs	r3, r6, r7
   185a8:	beq	187ac <__assert_fail@plt+0x7058>
   185ac:	add	ip, sp, #56	; 0x38
   185b0:	mov	r2, r4
   185b4:	mov	r3, r8
   185b8:	mov	r0, r6
   185bc:	mov	r1, r7
   185c0:	str	ip, [sp, #16]
   185c4:	bl	12c10 <__assert_fail@plt+0x14bc>
   185c8:	ldr	ip, [r5, #4]
   185cc:	mov	r0, r6
   185d0:	add	lr, ip, #1
   185d4:	ldr	r6, [sp, #16]
   185d8:	mov	r9, #58	; 0x3a
   185dc:	mov	r2, r4
   185e0:	mov	r3, r8
   185e4:	mov	r1, r7
   185e8:	strb	r9, [ip]
   185ec:	str	r6, [sp]
   185f0:	str	lr, [r5, #4]
   185f4:	bl	152f8 <__assert_fail@plt+0x3ba4>
   185f8:	ldrb	r2, [sp, #306]	; 0x132
   185fc:	cmp	r2, #0
   18600:	beq	18894 <__assert_fail@plt+0x7140>
   18604:	ldr	r4, [r5, #4]
   18608:	mvn	fp, #222	; 0xde
   1860c:	add	r8, sp, #276	; 0x114
   18610:	sub	fp, fp, r6
   18614:	add	r8, r8, #3
   18618:	add	r9, sp, #72	; 0x48
   1861c:	add	r7, sp, #32
   18620:	mov	sl, #32
   18624:	str	fp, [sp, #8]
   18628:	ldrb	r3, [r8, #1]!
   1862c:	cmp	r3, #0
   18630:	movne	r6, #0
   18634:	beq	18688 <__assert_fail@plt+0x6f34>
   18638:	add	r3, r4, #1
   1863c:	mov	r2, r7
   18640:	strb	sl, [r4]
   18644:	ldrd	r0, [r9]
   18648:	add	r6, r6, #1
   1864c:	str	r3, [r5, #4]
   18650:	bl	18e14 <__assert_fail@plt+0x76c0>
   18654:	ldr	r4, [r5, #4]
   18658:	sub	r3, r0, r7
   1865c:	mov	r1, r0
   18660:	rsb	fp, r3, #20
   18664:	mov	r2, fp
   18668:	mov	r0, r4
   1866c:	add	r4, r4, fp
   18670:	bl	113f4 <memcpy@plt>
   18674:	ldrb	r2, [r8]
   18678:	str	r4, [r5, #4]
   1867c:	cmp	r6, r2
   18680:	bcc	18638 <__assert_fail@plt+0x6ee4>
   18684:	ldrb	r2, [sp, #306]	; 0x132
   18688:	add	r9, r9, #8
   1868c:	ldr	r3, [sp, #8]
   18690:	add	r3, r3, r8
   18694:	cmp	r2, r3
   18698:	bhi	18628 <__assert_fail@plt+0x6ed4>
   1869c:	ldr	r3, [sp, #16]
   186a0:	add	r6, r4, #1
   186a4:	ldrd	r2, [r3, #8]
   186a8:	orrs	r3, r2, r3
   186ac:	bne	18828 <__assert_fail@plt+0x70d4>
   186b0:	movw	r8, #24952	; 0x6178
   186b4:	movt	r8, #3
   186b8:	ldr	r7, [r5]
   186bc:	mov	r3, #10
   186c0:	str	r6, [r5, #4]
   186c4:	ldr	r0, [r8]
   186c8:	strb	r3, [r4]
   186cc:	sub	r4, r6, r7
   186d0:	cmn	r0, #1
   186d4:	beq	18858 <__assert_fail@plt+0x7104>
   186d8:	cmp	r0, #0
   186dc:	bne	18870 <__assert_fail@plt+0x711c>
   186e0:	cmp	r4, #512	; 0x200
   186e4:	addcs	r4, r7, #512	; 0x200
   186e8:	bcs	186f4 <__assert_fail@plt+0x6fa0>
   186ec:	b	18558 <__assert_fail@plt+0x6e04>
   186f0:	mov	r4, r2
   186f4:	ldrb	r3, [r4, #-1]
   186f8:	sub	r2, r4, #1
   186fc:	cmp	r3, #10
   18700:	bne	186f0 <__assert_fail@plt+0x6f9c>
   18704:	sub	r8, r4, r7
   18708:	mov	r1, r7
   1870c:	str	r4, [r5, #4]
   18710:	mov	r2, r8
   18714:	mov	r0, #1
   18718:	bl	18d8c <__assert_fail@plt+0x7638>
   1871c:	cmp	r8, r0
   18720:	bne	188f0 <__assert_fail@plt+0x719c>
   18724:	ldr	r3, [r5]
   18728:	sub	r6, r6, r4
   1872c:	mov	r1, r4
   18730:	mov	r2, r6
   18734:	mov	r0, r3
   18738:	bl	113f4 <memcpy@plt>
   1873c:	add	r6, r0, r6
   18740:	str	r6, [r5, #4]
   18744:	b	18558 <__assert_fail@plt+0x6e04>
   18748:	movw	r3, #25048	; 0x61d8
   1874c:	movt	r3, #3
   18750:	movw	r0, #18312	; 0x4788
   18754:	movt	r0, #2
   18758:	ldr	r3, [r3]
   1875c:	mov	r2, #39	; 0x27
   18760:	mov	r1, #1
   18764:	bl	114d8 <fwrite@plt>
   18768:	b	18404 <__assert_fail@plt+0x6cb0>
   1876c:	mov	r1, #10
   18770:	bl	116b8 <__overflow@plt>
   18774:	b	18550 <__assert_fail@plt+0x6dfc>
   18778:	mov	r1, #58	; 0x3a
   1877c:	bl	116b8 <__overflow@plt>
   18780:	b	18450 <__assert_fail@plt+0x6cfc>
   18784:	nop	{0}
   18788:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1878c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   18790:	movw	r5, #25068	; 0x61ec
   18794:	movt	r5, #3
   18798:	ldrb	r3, [r5, #8]
   1879c:	cmp	r3, #0
   187a0:	bne	187f4 <__assert_fail@plt+0x70a0>
   187a4:	mov	r4, #0
   187a8:	mov	r8, r4
   187ac:	add	r3, sp, #56	; 0x38
   187b0:	mov	r1, r8
   187b4:	mov	r2, r3
   187b8:	mov	r0, r4
   187bc:	mov	r6, r3
   187c0:	str	r3, [sp, #16]
   187c4:	mov	r7, #0
   187c8:	bl	18e14 <__assert_fail@plt+0x76c0>
   187cc:	ldr	r3, [r5, #4]
   187d0:	sub	ip, r0, r6
   187d4:	mov	r1, r0
   187d8:	rsb	r9, ip, #20
   187dc:	mov	r6, #0
   187e0:	mov	r2, r9
   187e4:	mov	r0, r3
   187e8:	bl	113f4 <memcpy@plt>
   187ec:	add	ip, r0, r9
   187f0:	b	185cc <__assert_fail@plt+0x6e78>
   187f4:	mov	r6, #0
   187f8:	mov	r7, #0
   187fc:	mov	r4, r6
   18800:	mov	r8, r7
   18804:	movw	r3, #25048	; 0x61d8
   18808:	movt	r3, #3
   1880c:	movw	r0, #18236	; 0x473c
   18810:	movt	r0, #2
   18814:	ldr	r3, [r3]
   18818:	mov	r2, #36	; 0x24
   1881c:	mov	r1, #1
   18820:	bl	114d8 <fwrite@plt>
   18824:	b	185a4 <__assert_fail@plt+0x6e50>
   18828:	mov	r3, #32
   1882c:	str	r6, [r5, #4]
   18830:	strb	r3, [r4]
   18834:	ldr	r3, [sp, #16]
   18838:	ldrd	r0, [r3, #8]
   1883c:	ldrd	r2, [r3]
   18840:	orrs	ip, r0, r1
   18844:	beq	1889c <__assert_fail@plt+0x7148>
   18848:	bl	12c10 <__assert_fail@plt+0x14bc>
   1884c:	ldr	r4, [r5, #4]
   18850:	add	r6, r4, #1
   18854:	b	186b0 <__assert_fail@plt+0x6f5c>
   18858:	mov	r0, #0
   1885c:	bl	11730 <isatty@plt>
   18860:	cmp	r0, #0
   18864:	beq	188d8 <__assert_fail@plt+0x7184>
   18868:	mov	r3, #1
   1886c:	str	r3, [r8]
   18870:	mov	r1, r7
   18874:	mov	r2, r4
   18878:	mov	r0, #1
   1887c:	bl	18d8c <__assert_fail@plt+0x7638>
   18880:	cmp	r4, r0
   18884:	bne	188f0 <__assert_fail@plt+0x719c>
   18888:	ldr	r3, [r5]
   1888c:	str	r3, [r5, #4]
   18890:	b	18558 <__assert_fail@plt+0x6e04>
   18894:	ldr	r4, [r5, #4]
   18898:	b	1869c <__assert_fail@plt+0x6f48>
   1889c:	add	r6, sp, #32
   188a0:	mov	r1, r3
   188a4:	mov	r0, r2
   188a8:	mov	r2, r6
   188ac:	bl	18e14 <__assert_fail@plt+0x76c0>
   188b0:	ldr	r3, [r5, #4]
   188b4:	sub	r6, r0, r6
   188b8:	mov	r1, r0
   188bc:	rsb	r4, r6, #20
   188c0:	mov	r2, r4
   188c4:	mov	r0, r3
   188c8:	bl	113f4 <memcpy@plt>
   188cc:	add	r4, r0, r4
   188d0:	add	r6, r4, #1
   188d4:	b	186b0 <__assert_fail@plt+0x6f5c>
   188d8:	mov	r0, #1
   188dc:	bl	11730 <isatty@plt>
   188e0:	adds	r0, r0, #0
   188e4:	movne	r0, #1
   188e8:	str	r0, [r8]
   188ec:	b	186d8 <__assert_fail@plt+0x6f84>
   188f0:	bl	12638 <__assert_fail@plt+0xee4>
   188f4:	subs	r6, r0, #0
   188f8:	str	r7, [sp, #-8]!
   188fc:	str	lr, [sp, #4]
   18900:	sub	sp, sp, #56	; 0x38
   18904:	beq	1894c <__assert_fail@plt+0x71f8>
   18908:	movw	r3, #25048	; 0x61d8
   1890c:	movt	r3, #3
   18910:	ldr	r4, [r3]
   18914:	mov	r2, #5
   18918:	movw	r1, #18360	; 0x47b8
   1891c:	movt	r1, #2
   18920:	mov	r0, #0
   18924:	bl	11430 <dcgettext@plt>
   18928:	movw	r3, #25088	; 0x6200
   1892c:	movt	r3, #3
   18930:	mov	r2, r0
   18934:	mov	r1, #1
   18938:	ldr	r3, [r3]
   1893c:	mov	r0, r4
   18940:	bl	1164c <__fprintf_chk@plt>
   18944:	mov	r0, r6
   18948:	bl	11598 <exit@plt>
   1894c:	mov	r2, #5
   18950:	movw	r1, #18400	; 0x47e0
   18954:	movt	r1, #2
   18958:	movw	r7, #25060	; 0x61e4
   1895c:	movt	r7, #3
   18960:	bl	11430 <dcgettext@plt>
   18964:	movw	r3, #25088	; 0x6200
   18968:	movt	r3, #3
   1896c:	ldr	r3, [r3]
   18970:	mov	r1, r0
   18974:	mov	r0, #1
   18978:	mov	r2, r3
   1897c:	bl	11628 <__printf_chk@plt>
   18980:	mov	r2, #5
   18984:	movw	r1, #18440	; 0x4808
   18988:	movt	r1, #2
   1898c:	mov	r0, r6
   18990:	bl	11430 <dcgettext@plt>
   18994:	ldr	r1, [r7]
   18998:	bl	1134c <fputs_unlocked@plt>
   1899c:	mov	r2, #5
   189a0:	movw	r1, #18576	; 0x4890
   189a4:	movt	r1, #2
   189a8:	mov	r0, r6
   189ac:	bl	11430 <dcgettext@plt>
   189b0:	ldr	r1, [r7]
   189b4:	bl	1134c <fputs_unlocked@plt>
   189b8:	mov	r2, #5
   189bc:	movw	r1, #18624	; 0x48c0
   189c0:	movt	r1, #2
   189c4:	mov	r0, r6
   189c8:	bl	11430 <dcgettext@plt>
   189cc:	ldr	r1, [r7]
   189d0:	bl	1134c <fputs_unlocked@plt>
   189d4:	movw	r2, #1560	; 0x618
   189d8:	movw	r3, #5408	; 0x1520
   189dc:	movt	r3, #2
   189e0:	ldr	lr, [pc, #564]	; 18c1c <__assert_fail@plt+0x74c8>
   189e4:	add	r1, r3, r2
   189e8:	ldr	r4, [r1, #4]
   189ec:	ldr	ip, [r3, r2]
   189f0:	ldrd	r8, [lr, #8]
   189f4:	ldrd	r2, [lr, #16]
   189f8:	str	r4, [sp, #4]
   189fc:	subs	r1, ip, #0
   18a00:	ldrd	r4, [lr, #24]
   18a04:	str	ip, [sp]
   18a08:	strd	r8, [sp, #8]
   18a0c:	strd	r2, [sp, #16]
   18a10:	ldrd	r8, [lr, #32]
   18a14:	strd	r4, [sp, #24]
   18a18:	ldrd	r2, [lr, #40]	; 0x28
   18a1c:	ldrd	r4, [lr, #48]	; 0x30
   18a20:	strd	r8, [sp, #32]
   18a24:	strd	r2, [sp, #40]	; 0x28
   18a28:	strd	r4, [sp, #48]	; 0x30
   18a2c:	movwne	r5, #18352	; 0x47b0
   18a30:	mov	r4, sp
   18a34:	movtne	r5, #2
   18a38:	bne	18b30 <__assert_fail@plt+0x73dc>
   18a3c:	ldr	r4, [r4, #4]
   18a40:	movw	r1, #18680	; 0x48f8
   18a44:	movt	r1, #2
   18a48:	mov	r2, #5
   18a4c:	cmp	r4, #0
   18a50:	beq	18b44 <__assert_fail@plt+0x73f0>
   18a54:	mov	r0, #0
   18a58:	bl	11430 <dcgettext@plt>
   18a5c:	mov	r1, r0
   18a60:	movw	r3, #18704	; 0x4910
   18a64:	movt	r3, #2
   18a68:	movw	r2, #18744	; 0x4938
   18a6c:	movt	r2, #2
   18a70:	mov	r0, #1
   18a74:	bl	11628 <__printf_chk@plt>
   18a78:	mov	r1, #0
   18a7c:	mov	r0, #5
   18a80:	bl	116c4 <setlocale@plt>
   18a84:	cmp	r0, #0
   18a88:	movweq	r5, #18352	; 0x47b0
   18a8c:	movteq	r5, #2
   18a90:	beq	18ab4 <__assert_fail@plt+0x7360>
   18a94:	movw	r1, #18760	; 0x4948
   18a98:	movt	r1, #2
   18a9c:	mov	r2, #3
   18aa0:	movw	r5, #18352	; 0x47b0
   18aa4:	movt	r5, #2
   18aa8:	bl	1173c <strncmp@plt>
   18aac:	cmp	r0, #0
   18ab0:	bne	18bfc <__assert_fail@plt+0x74a8>
   18ab4:	mov	r2, #5
   18ab8:	movw	r1, #18836	; 0x4994
   18abc:	movt	r1, #2
   18ac0:	mov	r0, #0
   18ac4:	bl	11430 <dcgettext@plt>
   18ac8:	mov	r1, r0
   18acc:	movw	r3, #18352	; 0x47b0
   18ad0:	movt	r3, #2
   18ad4:	movw	r2, #18704	; 0x4910
   18ad8:	movt	r2, #2
   18adc:	mov	r0, #1
   18ae0:	bl	11628 <__printf_chk@plt>
   18ae4:	mov	r2, #5
   18ae8:	movw	r1, #18864	; 0x49b0
   18aec:	movt	r1, #2
   18af0:	mov	r0, #0
   18af4:	bl	11430 <dcgettext@plt>
   18af8:	movw	r2, #19036	; 0x4a5c
   18afc:	movt	r2, #2
   18b00:	cmp	r4, r5
   18b04:	movw	r3, #18620	; 0x48bc
   18b08:	movt	r3, #2
   18b0c:	mov	r1, r0
   18b10:	moveq	r3, r2
   18b14:	mov	r2, r4
   18b18:	mov	r0, #1
   18b1c:	bl	11628 <__printf_chk@plt>
   18b20:	b	18944 <__assert_fail@plt+0x71f0>
   18b24:	ldr	r1, [r4, #8]!
   18b28:	cmp	r1, #0
   18b2c:	beq	18a3c <__assert_fail@plt+0x72e8>
   18b30:	mov	r0, r5
   18b34:	bl	11388 <strcmp@plt>
   18b38:	cmp	r0, #0
   18b3c:	bne	18b24 <__assert_fail@plt+0x73d0>
   18b40:	b	18a3c <__assert_fail@plt+0x72e8>
   18b44:	mov	r0, r4
   18b48:	bl	11430 <dcgettext@plt>
   18b4c:	mov	r1, r0
   18b50:	movw	r3, #18704	; 0x4910
   18b54:	movt	r3, #2
   18b58:	movw	r2, #18744	; 0x4938
   18b5c:	movt	r2, #2
   18b60:	mov	r0, #1
   18b64:	bl	11628 <__printf_chk@plt>
   18b68:	mov	r1, r4
   18b6c:	mov	r0, #5
   18b70:	bl	116c4 <setlocale@plt>
   18b74:	cmp	r0, #0
   18b78:	beq	18b94 <__assert_fail@plt+0x7440>
   18b7c:	movw	r1, #18760	; 0x4948
   18b80:	movt	r1, #2
   18b84:	mov	r2, #3
   18b88:	bl	1173c <strncmp@plt>
   18b8c:	cmp	r0, #0
   18b90:	bne	18bf0 <__assert_fail@plt+0x749c>
   18b94:	mov	r2, #5
   18b98:	movw	r1, #18836	; 0x4994
   18b9c:	movt	r1, #2
   18ba0:	mov	r0, #0
   18ba4:	bl	11430 <dcgettext@plt>
   18ba8:	mov	r1, r0
   18bac:	movw	r3, #18352	; 0x47b0
   18bb0:	movt	r3, #2
   18bb4:	movw	r2, #18704	; 0x4910
   18bb8:	movt	r2, #2
   18bbc:	mov	r0, #1
   18bc0:	bl	11628 <__printf_chk@plt>
   18bc4:	movw	r1, #18864	; 0x49b0
   18bc8:	movt	r1, #2
   18bcc:	mov	r2, #5
   18bd0:	mov	r0, #0
   18bd4:	bl	11430 <dcgettext@plt>
   18bd8:	movw	r4, #18352	; 0x47b0
   18bdc:	movt	r4, #2
   18be0:	movw	r3, #19036	; 0x4a5c
   18be4:	movt	r3, #2
   18be8:	mov	r1, r0
   18bec:	b	18b14 <__assert_fail@plt+0x73c0>
   18bf0:	movw	r5, #18352	; 0x47b0
   18bf4:	movt	r5, #2
   18bf8:	mov	r4, r5
   18bfc:	mov	r2, #5
   18c00:	movw	r1, #18764	; 0x494c
   18c04:	movt	r1, #2
   18c08:	mov	r0, #0
   18c0c:	bl	11430 <dcgettext@plt>
   18c10:	ldr	r1, [r7]
   18c14:	bl	1134c <fputs_unlocked@plt>
   18c18:	b	18ab4 <__assert_fail@plt+0x7360>
   18c1c:	andeq	r1, r2, r8, lsr fp
   18c20:	movw	r3, #25080	; 0x61f8
   18c24:	movt	r3, #3
   18c28:	str	r0, [r3]
   18c2c:	bx	lr
   18c30:	movw	r3, #25080	; 0x61f8
   18c34:	movt	r3, #3
   18c38:	strb	r0, [r3, #4]
   18c3c:	bx	lr
   18c40:	movw	r3, #25060	; 0x61e4
   18c44:	movt	r3, #3
   18c48:	strd	r4, [sp, #-16]!
   18c4c:	ldr	r0, [r3]
   18c50:	str	r6, [sp, #8]
   18c54:	str	lr, [sp, #12]
   18c58:	sub	sp, sp, #8
   18c5c:	bl	1ee90 <__assert_fail@plt+0xd73c>
   18c60:	cmp	r0, #0
   18c64:	beq	18c90 <__assert_fail@plt+0x753c>
   18c68:	movw	r4, #25080	; 0x61f8
   18c6c:	movt	r4, #3
   18c70:	ldrb	r6, [r4, #4]
   18c74:	bl	115e0 <__errno_location@plt>
   18c78:	mov	r5, r0
   18c7c:	cmp	r6, #0
   18c80:	beq	18cbc <__assert_fail@plt+0x7568>
   18c84:	ldr	r3, [r0]
   18c88:	cmp	r3, #32
   18c8c:	bne	18cbc <__assert_fail@plt+0x7568>
   18c90:	movw	r3, #25048	; 0x61d8
   18c94:	movt	r3, #3
   18c98:	ldr	r0, [r3]
   18c9c:	bl	1ee90 <__assert_fail@plt+0xd73c>
   18ca0:	cmp	r0, #0
   18ca4:	bne	18d04 <__assert_fail@plt+0x75b0>
   18ca8:	add	sp, sp, #8
   18cac:	ldrd	r4, [sp]
   18cb0:	ldr	r6, [sp, #8]
   18cb4:	add	sp, sp, #12
   18cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   18cbc:	movw	r1, #18000	; 0x4650
   18cc0:	movt	r1, #2
   18cc4:	mov	r2, #5
   18cc8:	mov	r0, #0
   18ccc:	bl	11430 <dcgettext@plt>
   18cd0:	mov	r6, r0
   18cd4:	ldr	r0, [r4]
   18cd8:	cmp	r0, #0
   18cdc:	beq	18d14 <__assert_fail@plt+0x75c0>
   18ce0:	ldr	r4, [r5]
   18ce4:	bl	1c8cc <__assert_fail@plt+0xb178>
   18ce8:	mov	r3, r0
   18cec:	movw	r2, #19176	; 0x4ae8
   18cf0:	movt	r2, #2
   18cf4:	mov	r0, #0
   18cf8:	str	r6, [sp]
   18cfc:	mov	r1, r4
   18d00:	bl	11520 <error@plt>
   18d04:	movw	r3, #24960	; 0x6180
   18d08:	movt	r3, #3
   18d0c:	ldr	r0, [r3]
   18d10:	bl	113e8 <_exit@plt>
   18d14:	mov	r3, r6
   18d18:	movw	r2, #19180	; 0x4aec
   18d1c:	movt	r2, #2
   18d20:	ldr	r1, [r5]
   18d24:	bl	11520 <error@plt>
   18d28:	b	18d04 <__assert_fail@plt+0x75b0>
   18d2c:	strd	r4, [sp, #-12]!
   18d30:	mov	r5, r0
   18d34:	str	lr, [sp, #8]
   18d38:	sub	sp, sp, #12
   18d3c:	bl	115e0 <__errno_location@plt>
   18d40:	mov	r4, r0
   18d44:	mov	r2, #0
   18d48:	ldr	r3, [r4]
   18d4c:	mov	r0, r5
   18d50:	str	r2, [r4]
   18d54:	str	r3, [sp]
   18d58:	str	r3, [sp, #4]
   18d5c:	bl	113dc <free@plt>
   18d60:	ldr	r3, [r4]
   18d64:	add	r2, sp, #8
   18d68:	clz	r3, r3
   18d6c:	lsr	r3, r3, #5
   18d70:	add	r3, r2, r3, lsl #2
   18d74:	ldr	r3, [r3, #-8]
   18d78:	str	r3, [r4]
   18d7c:	add	sp, sp, #12
   18d80:	ldrd	r4, [sp]
   18d84:	add	sp, sp, #8
   18d88:	pop	{pc}		; (ldr pc, [sp], #4)
   18d8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18d90:	subs	r4, r2, #0
   18d94:	strd	r6, [sp, #8]
   18d98:	str	r8, [sp, #16]
   18d9c:	str	lr, [sp, #20]
   18da0:	beq	18e0c <__assert_fail@plt+0x76b8>
   18da4:	mov	r7, r0
   18da8:	mov	r5, r1
   18dac:	mov	r6, #0
   18db0:	b	18dc8 <__assert_fail@plt+0x7674>
   18db4:	cmp	r0, #0
   18db8:	beq	18dfc <__assert_fail@plt+0x76a8>
   18dbc:	subs	r4, r4, r0
   18dc0:	add	r6, r6, r0
   18dc4:	beq	18de4 <__assert_fail@plt+0x7690>
   18dc8:	mov	r1, r5
   18dcc:	mov	r2, r4
   18dd0:	mov	r0, r7
   18dd4:	bl	1d924 <__assert_fail@plt+0xc1d0>
   18dd8:	cmn	r0, #1
   18ddc:	add	r5, r5, r0
   18de0:	bne	18db4 <__assert_fail@plt+0x7660>
   18de4:	mov	r0, r6
   18de8:	ldrd	r4, [sp]
   18dec:	ldrd	r6, [sp, #8]
   18df0:	ldr	r8, [sp, #16]
   18df4:	add	sp, sp, #20
   18df8:	pop	{pc}		; (ldr pc, [sp], #4)
   18dfc:	bl	115e0 <__errno_location@plt>
   18e00:	mov	r3, #28
   18e04:	str	r3, [r0]
   18e08:	b	18de4 <__assert_fail@plt+0x7690>
   18e0c:	mov	r6, r4
   18e10:	b	18de4 <__assert_fail@plt+0x7690>
   18e14:	mov	r3, #0
   18e18:	strd	r4, [sp, #-16]!
   18e1c:	mov	r4, r0
   18e20:	mov	r5, r1
   18e24:	str	r6, [sp, #8]
   18e28:	add	r6, r2, #20
   18e2c:	str	lr, [sp, #12]
   18e30:	strb	r3, [r2, #20]
   18e34:	mov	r0, r4
   18e38:	mov	r1, r5
   18e3c:	mov	r2, #10
   18e40:	mov	r3, #0
   18e44:	bl	21320 <__assert_fail@plt+0xfbcc>
   18e48:	add	ip, r2, #48	; 0x30
   18e4c:	mov	r0, r4
   18e50:	mov	r1, r5
   18e54:	mov	r2, #10
   18e58:	mov	r3, #0
   18e5c:	strb	ip, [r6, #-1]!
   18e60:	bl	21320 <__assert_fail@plt+0xfbcc>
   18e64:	cmp	r5, #0
   18e68:	mov	r5, r1
   18e6c:	cmpeq	r4, #9
   18e70:	mov	r4, r0
   18e74:	bhi	18e34 <__assert_fail@plt+0x76e0>
   18e78:	mov	r0, r6
   18e7c:	ldrd	r4, [sp]
   18e80:	ldr	r6, [sp, #8]
   18e84:	add	sp, sp, #12
   18e88:	pop	{pc}		; (ldr pc, [sp], #4)
   18e8c:	strd	r4, [sp, #-16]!
   18e90:	subs	r4, r0, #0
   18e94:	str	r6, [sp, #8]
   18e98:	str	lr, [sp, #12]
   18e9c:	beq	18f34 <__assert_fail@plt+0x77e0>
   18ea0:	mov	r1, #47	; 0x2f
   18ea4:	bl	116d0 <strrchr@plt>
   18ea8:	subs	r5, r0, #0
   18eac:	beq	18f0c <__assert_fail@plt+0x77b8>
   18eb0:	add	r6, r5, #1
   18eb4:	sub	r3, r6, r4
   18eb8:	cmp	r3, #6
   18ebc:	ble	18f0c <__assert_fail@plt+0x77b8>
   18ec0:	movw	r1, #19240	; 0x4b28
   18ec4:	movt	r1, #2
   18ec8:	mov	r2, #7
   18ecc:	sub	r0, r5, #6
   18ed0:	bl	1173c <strncmp@plt>
   18ed4:	cmp	r0, #0
   18ed8:	bne	18f0c <__assert_fail@plt+0x77b8>
   18edc:	movw	r1, #19248	; 0x4b30
   18ee0:	movt	r1, #2
   18ee4:	mov	r2, #3
   18ee8:	mov	r0, r6
   18eec:	bl	1173c <strncmp@plt>
   18ef0:	cmp	r0, #0
   18ef4:	movne	r4, r6
   18ef8:	bne	18f0c <__assert_fail@plt+0x77b8>
   18efc:	add	r4, r5, #4
   18f00:	movw	r3, #25032	; 0x61c8
   18f04:	movt	r3, #3
   18f08:	str	r4, [r3]
   18f0c:	movw	r2, #25088	; 0x6200
   18f10:	movt	r2, #3
   18f14:	ldr	r6, [sp, #8]
   18f18:	movw	r3, #25036	; 0x61cc
   18f1c:	movt	r3, #3
   18f20:	str	r4, [r2]
   18f24:	str	r4, [r3]
   18f28:	ldrd	r4, [sp]
   18f2c:	add	sp, sp, #12
   18f30:	pop	{pc}		; (ldr pc, [sp], #4)
   18f34:	movw	r3, #25048	; 0x61d8
   18f38:	movt	r3, #3
   18f3c:	movw	r0, #19184	; 0x4af0
   18f40:	movt	r0, #2
   18f44:	ldr	r3, [r3]
   18f48:	mov	r2, #55	; 0x37
   18f4c:	mov	r1, #1
   18f50:	bl	114d8 <fwrite@plt>
   18f54:	bl	11748 <abort@plt>
   18f58:	movw	r3, #19252	; 0x4b34
   18f5c:	movt	r3, #2
   18f60:	str	r4, [sp, #-8]!
   18f64:	movw	r1, #19272	; 0x4b48
   18f68:	movt	r1, #2
   18f6c:	str	lr, [sp, #4]
   18f70:	movw	r0, #19288	; 0x4b58
   18f74:	movt	r0, #2
   18f78:	mov	r2, #172	; 0xac
   18f7c:	bl	11754 <__assert_fail@plt>
   18f80:	mov	r3, r1
   18f84:	mov	r1, #2
   18f88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18f8c:	mov	r4, r0
   18f90:	mov	r0, r3
   18f94:	strd	r6, [sp, #8]
   18f98:	strd	r8, [sp, #16]
   18f9c:	movw	r6, #20460	; 0x4fec
   18fa0:	movt	r6, #2
   18fa4:	strd	sl, [sp, #24]
   18fa8:	mov	r8, #0
   18fac:	mov	r9, #0
   18fb0:	str	lr, [sp, #32]
   18fb4:	sub	sp, sp, #116	; 0x74
   18fb8:	bl	1da10 <__assert_fail@plt+0xc2bc>
   18fbc:	mov	sl, r0
   18fc0:	ldrb	r3, [r4]
   18fc4:	cmp	r3, #0
   18fc8:	beq	1905c <__assert_fail@plt+0x7908>
   18fcc:	mov	r1, sl
   18fd0:	mov	r0, r4
   18fd4:	bl	1fd30 <__assert_fail@plt+0xe5dc>
   18fd8:	subs	r7, r0, #0
   18fdc:	beq	1905c <__assert_fail@plt+0x7908>
   18fe0:	bl	114fc <__ctype_get_mb_cur_max@plt>
   18fe4:	cmp	r0, #1
   18fe8:	bhi	19088 <__assert_fail@plt+0x7934>
   18fec:	mov	r0, sl
   18ff0:	bl	115b0 <strlen@plt>
   18ff4:	cmp	r4, r7
   18ff8:	mov	r5, r0
   18ffc:	bcs	1901c <__assert_fail@plt+0x78c8>
   19000:	bl	1158c <__ctype_b_loc@plt>
   19004:	ldrb	r3, [r7, #-1]
   19008:	ldr	r2, [r0]
   1900c:	lsl	r3, r3, #1
   19010:	ldrh	r3, [r2, r3]
   19014:	tst	r3, #8
   19018:	bne	19040 <__assert_fail@plt+0x78ec>
   1901c:	ldrb	r4, [r7, r5]
   19020:	cmp	r4, #0
   19024:	beq	19770 <__assert_fail@plt+0x801c>
   19028:	bl	1158c <__ctype_b_loc@plt>
   1902c:	ldr	r3, [r0]
   19030:	lsl	r4, r4, #1
   19034:	ldrh	r3, [r3, r4]
   19038:	tst	r3, #8
   1903c:	beq	19770 <__assert_fail@plt+0x801c>
   19040:	ldrb	r3, [r7]
   19044:	cmp	r3, #0
   19048:	beq	1905c <__assert_fail@plt+0x7908>
   1904c:	add	r4, r7, #1
   19050:	ldrb	r3, [r4]
   19054:	cmp	r3, #0
   19058:	bne	18fcc <__assert_fail@plt+0x7878>
   1905c:	mov	fp, #0
   19060:	mov	r0, sl
   19064:	bl	18d2c <__assert_fail@plt+0x75d8>
   19068:	mov	r0, fp
   1906c:	add	sp, sp, #116	; 0x74
   19070:	ldrd	r4, [sp]
   19074:	ldrd	r6, [sp, #8]
   19078:	ldrd	r8, [sp, #16]
   1907c:	ldrd	sl, [sp, #24]
   19080:	add	sp, sp, #32
   19084:	pop	{pc}		; (ldr pc, [sp], #4)
   19088:	mov	r3, #0
   1908c:	cmp	r4, r7
   19090:	movcc	r5, #1
   19094:	strb	r3, [sp]
   19098:	strd	r8, [sp, #4]
   1909c:	strb	r3, [sp, #12]
   190a0:	str	r4, [sp, #16]
   190a4:	bcc	19108 <__assert_fail@plt+0x79b4>
   190a8:	b	19578 <__assert_fail@plt+0x7e24>
   190ac:	ldrb	r3, [r4]
   190b0:	lsr	r2, r3, #5
   190b4:	and	r3, r3, #31
   190b8:	ldr	r2, [r6, r2, lsl #2]
   190bc:	lsr	r3, r2, r3
   190c0:	tst	r3, #1
   190c4:	beq	1919c <__assert_fail@plt+0x7a48>
   190c8:	str	r5, [sp, #20]
   190cc:	ldrb	fp, [r4]
   190d0:	strb	r5, [sp, #12]
   190d4:	strb	r5, [sp, #24]
   190d8:	cmp	fp, #0
   190dc:	str	fp, [sp, #28]
   190e0:	beq	19198 <__assert_fail@plt+0x7a44>
   190e4:	ldr	r4, [sp, #16]
   190e8:	mov	r2, #0
   190ec:	ldr	r3, [sp, #20]
   190f0:	strb	r2, [sp, #12]
   190f4:	ldrb	r1, [sp, #24]
   190f8:	add	r4, r4, r3
   190fc:	cmp	r4, r7
   19100:	str	r4, [sp, #16]
   19104:	bcs	191f4 <__assert_fail@plt+0x7aa0>
   19108:	ldrb	r3, [sp]
   1910c:	cmp	r3, #0
   19110:	beq	190ac <__assert_fail@plt+0x7958>
   19114:	bl	114fc <__ctype_get_mb_cur_max@plt>
   19118:	mov	r1, r0
   1911c:	mov	r0, r4
   19120:	bl	1d9a8 <__assert_fail@plt+0xc254>
   19124:	mov	r2, r0
   19128:	add	r3, sp, #4
   1912c:	mov	r1, r4
   19130:	add	r0, sp, #28
   19134:	bl	1f208 <__assert_fail@plt+0xdab4>
   19138:	cmn	r0, #1
   1913c:	str	r0, [sp, #20]
   19140:	beq	191b4 <__assert_fail@plt+0x7a60>
   19144:	cmn	r0, #2
   19148:	beq	191cc <__assert_fail@plt+0x7a78>
   1914c:	cmp	r0, #0
   19150:	bne	191ec <__assert_fail@plt+0x7a98>
   19154:	ldr	r4, [sp, #16]
   19158:	str	r5, [sp, #20]
   1915c:	ldrb	r3, [r4]
   19160:	cmp	r3, #0
   19164:	bne	19798 <__assert_fail@plt+0x8044>
   19168:	ldr	fp, [sp, #28]
   1916c:	cmp	fp, #0
   19170:	bne	1947c <__assert_fail@plt+0x7d28>
   19174:	add	r0, sp, #4
   19178:	strb	r5, [sp, #24]
   1917c:	bl	1140c <mbsinit@plt>
   19180:	cmp	r0, #0
   19184:	strb	r5, [sp, #12]
   19188:	movne	r3, #0
   1918c:	strbne	r3, [sp]
   19190:	cmp	fp, #0
   19194:	bne	190e4 <__assert_fail@plt+0x7990>
   19198:	bl	11748 <abort@plt>
   1919c:	add	r0, sp, #4
   191a0:	bl	1140c <mbsinit@plt>
   191a4:	cmp	r0, #0
   191a8:	beq	19778 <__assert_fail@plt+0x8024>
   191ac:	strb	r5, [sp]
   191b0:	b	19114 <__assert_fail@plt+0x79c0>
   191b4:	mov	r3, #0
   191b8:	str	r5, [sp, #20]
   191bc:	ldr	r4, [sp, #16]
   191c0:	strb	r3, [sp, #24]
   191c4:	ldr	fp, [sp, #28]
   191c8:	b	190e8 <__assert_fail@plt+0x7994>
   191cc:	ldr	r4, [sp, #16]
   191d0:	mov	r0, r4
   191d4:	bl	115b0 <strlen@plt>
   191d8:	mov	r3, #0
   191dc:	str	r0, [sp, #20]
   191e0:	ldr	fp, [sp, #28]
   191e4:	strb	r3, [sp, #24]
   191e8:	b	190e8 <__assert_fail@plt+0x7994>
   191ec:	ldr	fp, [sp, #28]
   191f0:	b	19174 <__assert_fail@plt+0x7a20>
   191f4:	cmp	r1, r2
   191f8:	beq	19578 <__assert_fail@plt+0x7e24>
   191fc:	mov	r0, fp
   19200:	bl	115ec <iswalnum@plt>
   19204:	clz	fp, r0
   19208:	lsr	fp, fp, #5
   1920c:	mov	r3, #0
   19210:	mov	r4, sl
   19214:	mov	r5, #1
   19218:	strb	r3, [sp]
   1921c:	strd	r8, [sp, #4]
   19220:	strb	r3, [sp, #12]
   19224:	str	r7, [sp, #16]
   19228:	strb	r3, [sp, #56]	; 0x38
   1922c:	strd	r8, [sp, #60]	; 0x3c
   19230:	strb	r3, [sp, #68]	; 0x44
   19234:	str	sl, [sp, #72]	; 0x48
   19238:	b	192ec <__assert_fail@plt+0x7b98>
   1923c:	ldrb	r3, [r4]
   19240:	lsr	r2, r3, #5
   19244:	and	r3, r3, #31
   19248:	ldr	r2, [r6, r2, lsl #2]
   1924c:	lsr	r3, r2, r3
   19250:	tst	r3, #1
   19254:	beq	193f8 <__assert_fail@plt+0x7ca4>
   19258:	str	r5, [sp, #76]	; 0x4c
   1925c:	ldrb	r3, [r4]
   19260:	strb	r5, [sp, #68]	; 0x44
   19264:	strb	r5, [sp, #80]	; 0x50
   19268:	cmp	r3, #0
   1926c:	str	r3, [sp, #84]	; 0x54
   19270:	beq	19580 <__assert_fail@plt+0x7e2c>
   19274:	ldrb	r3, [sp]
   19278:	ldr	r4, [sp, #16]
   1927c:	cmp	r3, #0
   19280:	bne	19394 <__assert_fail@plt+0x7c40>
   19284:	ldrb	r3, [r4]
   19288:	lsr	r2, r3, #5
   1928c:	and	r3, r3, #31
   19290:	ldr	r2, [r6, r2, lsl #2]
   19294:	lsr	r3, r2, r3
   19298:	tst	r3, #1
   1929c:	beq	19380 <__assert_fail@plt+0x7c2c>
   192a0:	str	r5, [sp, #20]
   192a4:	ldrb	r3, [r4]
   192a8:	strb	r5, [sp, #12]
   192ac:	strb	r5, [sp, #24]
   192b0:	mov	r4, r3
   192b4:	str	r3, [sp, #28]
   192b8:	cmp	r4, #0
   192bc:	beq	19198 <__assert_fail@plt+0x7a44>
   192c0:	ldr	r4, [sp, #16]
   192c4:	mov	r3, #0
   192c8:	ldr	r1, [sp, #20]
   192cc:	strb	r3, [sp, #12]
   192d0:	strb	r3, [sp, #68]	; 0x44
   192d4:	ldr	r2, [sp, #72]	; 0x48
   192d8:	ldr	r3, [sp, #76]	; 0x4c
   192dc:	add	r4, r4, r1
   192e0:	str	r4, [sp, #16]
   192e4:	add	r4, r2, r3
   192e8:	str	r4, [sp, #72]	; 0x48
   192ec:	ldrb	r3, [sp, #56]	; 0x38
   192f0:	cmp	r3, #0
   192f4:	beq	1923c <__assert_fail@plt+0x7ae8>
   192f8:	bl	114fc <__ctype_get_mb_cur_max@plt>
   192fc:	mov	r1, r0
   19300:	mov	r0, r4
   19304:	bl	1d9a8 <__assert_fail@plt+0xc254>
   19308:	mov	r2, r0
   1930c:	add	r3, sp, #60	; 0x3c
   19310:	mov	r1, r4
   19314:	add	r0, sp, #84	; 0x54
   19318:	bl	1f208 <__assert_fail@plt+0xdab4>
   1931c:	cmn	r0, #1
   19320:	str	r0, [sp, #76]	; 0x4c
   19324:	beq	19410 <__assert_fail@plt+0x7cbc>
   19328:	cmn	r0, #2
   1932c:	beq	1943c <__assert_fail@plt+0x7ce8>
   19330:	cmp	r0, #0
   19334:	beq	1945c <__assert_fail@plt+0x7d08>
   19338:	ldr	r4, [sp, #84]	; 0x54
   1933c:	add	r0, sp, #60	; 0x3c
   19340:	strb	r5, [sp, #80]	; 0x50
   19344:	bl	1140c <mbsinit@plt>
   19348:	cmp	r0, #0
   1934c:	ldrb	r3, [sp, #12]
   19350:	movne	r2, #0
   19354:	strb	r5, [sp, #68]	; 0x44
   19358:	strbne	r2, [sp, #56]	; 0x38
   1935c:	cmp	r4, #0
   19360:	beq	194dc <__assert_fail@plt+0x7d88>
   19364:	cmp	r3, #0
   19368:	beq	19274 <__assert_fail@plt+0x7b20>
   1936c:	ldrb	r3, [sp, #24]
   19370:	cmp	r3, #0
   19374:	beq	192c0 <__assert_fail@plt+0x7b6c>
   19378:	ldr	r4, [sp, #28]
   1937c:	b	192b8 <__assert_fail@plt+0x7b64>
   19380:	add	r0, sp, #4
   19384:	bl	1140c <mbsinit@plt>
   19388:	cmp	r0, #0
   1938c:	beq	19778 <__assert_fail@plt+0x8024>
   19390:	strb	r5, [sp]
   19394:	bl	114fc <__ctype_get_mb_cur_max@plt>
   19398:	mov	r1, r0
   1939c:	mov	r0, r4
   193a0:	bl	1d9a8 <__assert_fail@plt+0xc254>
   193a4:	mov	r2, r0
   193a8:	add	r3, sp, #4
   193ac:	mov	r1, r4
   193b0:	add	r0, sp, #28
   193b4:	bl	1f208 <__assert_fail@plt+0xdab4>
   193b8:	cmn	r0, #1
   193bc:	str	r0, [sp, #20]
   193c0:	beq	19428 <__assert_fail@plt+0x7cd4>
   193c4:	cmn	r0, #2
   193c8:	beq	1949c <__assert_fail@plt+0x7d48>
   193cc:	cmp	r0, #0
   193d0:	beq	194b8 <__assert_fail@plt+0x7d64>
   193d4:	ldr	r4, [sp, #28]
   193d8:	add	r0, sp, #4
   193dc:	strb	r5, [sp, #24]
   193e0:	bl	1140c <mbsinit@plt>
   193e4:	cmp	r0, #0
   193e8:	strb	r5, [sp, #12]
   193ec:	movne	r3, #0
   193f0:	strbne	r3, [sp]
   193f4:	b	192b8 <__assert_fail@plt+0x7b64>
   193f8:	add	r0, sp, #60	; 0x3c
   193fc:	bl	1140c <mbsinit@plt>
   19400:	cmp	r0, #0
   19404:	beq	19778 <__assert_fail@plt+0x8024>
   19408:	strb	r5, [sp, #56]	; 0x38
   1940c:	b	192f8 <__assert_fail@plt+0x7ba4>
   19410:	mov	r2, #0
   19414:	ldrb	r3, [sp, #12]
   19418:	strb	r5, [sp, #68]	; 0x44
   1941c:	str	r5, [sp, #76]	; 0x4c
   19420:	strb	r2, [sp, #80]	; 0x50
   19424:	b	19364 <__assert_fail@plt+0x7c10>
   19428:	mov	r3, #0
   1942c:	str	r5, [sp, #20]
   19430:	ldr	r4, [sp, #16]
   19434:	strb	r3, [sp, #24]
   19438:	b	192c4 <__assert_fail@plt+0x7b70>
   1943c:	ldr	r0, [sp, #72]	; 0x48
   19440:	bl	115b0 <strlen@plt>
   19444:	mov	r2, #0
   19448:	ldrb	r3, [sp, #12]
   1944c:	strb	r5, [sp, #68]	; 0x44
   19450:	str	r0, [sp, #76]	; 0x4c
   19454:	strb	r2, [sp, #80]	; 0x50
   19458:	b	19364 <__assert_fail@plt+0x7c10>
   1945c:	ldr	r3, [sp, #72]	; 0x48
   19460:	str	r5, [sp, #76]	; 0x4c
   19464:	ldrb	r3, [r3]
   19468:	cmp	r3, #0
   1946c:	bne	19798 <__assert_fail@plt+0x8044>
   19470:	ldr	r4, [sp, #84]	; 0x54
   19474:	cmp	r4, #0
   19478:	beq	1933c <__assert_fail@plt+0x7be8>
   1947c:	movw	r3, #19252	; 0x4b34
   19480:	movt	r3, #2
   19484:	movw	r1, #19272	; 0x4b48
   19488:	movt	r1, #2
   1948c:	movw	r0, #19288	; 0x4b58
   19490:	movt	r0, #2
   19494:	mov	r2, #172	; 0xac
   19498:	bl	11754 <__assert_fail@plt>
   1949c:	ldr	r4, [sp, #16]
   194a0:	mov	r0, r4
   194a4:	bl	115b0 <strlen@plt>
   194a8:	mov	r3, #0
   194ac:	str	r0, [sp, #20]
   194b0:	strb	r3, [sp, #24]
   194b4:	b	192c4 <__assert_fail@plt+0x7b70>
   194b8:	ldr	r4, [sp, #16]
   194bc:	str	r5, [sp, #20]
   194c0:	ldrb	r3, [r4]
   194c4:	cmp	r3, #0
   194c8:	bne	19798 <__assert_fail@plt+0x8044>
   194cc:	ldr	r4, [sp, #28]
   194d0:	cmp	r4, #0
   194d4:	beq	193d8 <__assert_fail@plt+0x7c84>
   194d8:	b	1947c <__assert_fail@plt+0x7d28>
   194dc:	cmp	r3, #0
   194e0:	beq	19580 <__assert_fail@plt+0x7e2c>
   194e4:	ldrb	r3, [sp, #24]
   194e8:	ldr	r4, [sp, #28]
   194ec:	cmp	r3, #0
   194f0:	bne	195c4 <__assert_fail@plt+0x7e70>
   194f4:	ldrb	r3, [sp, #24]
   194f8:	cmp	r3, #0
   194fc:	beq	19510 <__assert_fail@plt+0x7dbc>
   19500:	mov	r0, r4
   19504:	bl	115ec <iswalnum@plt>
   19508:	cmp	r0, #0
   1950c:	bne	19518 <__assert_fail@plt+0x7dc4>
   19510:	cmp	fp, #0
   19514:	bne	19060 <__assert_fail@plt+0x790c>
   19518:	mov	r3, #0
   1951c:	strb	r3, [sp]
   19520:	strd	r8, [sp, #4]
   19524:	strb	r3, [sp, #12]
   19528:	str	r7, [sp, #16]
   1952c:	ldrb	r3, [r7]
   19530:	lsr	r2, r3, #5
   19534:	and	r3, r3, #31
   19538:	ldr	r2, [r6, r2, lsl #2]
   1953c:	lsr	r3, r2, r3
   19540:	tst	r3, #1
   19544:	beq	19650 <__assert_fail@plt+0x7efc>
   19548:	mov	r3, #1
   1954c:	str	r3, [sp, #20]
   19550:	ldrb	r2, [r7]
   19554:	strb	r3, [sp, #12]
   19558:	strb	r3, [sp, #24]
   1955c:	mov	r4, r2
   19560:	str	r2, [sp, #28]
   19564:	cmp	r4, #0
   19568:	beq	1905c <__assert_fail@plt+0x7908>
   1956c:	ldr	r4, [sp, #20]
   19570:	add	r4, r7, r4
   19574:	b	18fc0 <__assert_fail@plt+0x786c>
   19578:	mov	fp, #1
   1957c:	b	1920c <__assert_fail@plt+0x7ab8>
   19580:	ldrb	r3, [sp]
   19584:	ldr	r4, [sp, #16]
   19588:	cmp	r3, #0
   1958c:	bne	195e8 <__assert_fail@plt+0x7e94>
   19590:	ldrb	r3, [r4]
   19594:	lsr	r2, r3, #5
   19598:	and	r3, r3, #31
   1959c:	ldr	r2, [r6, r2, lsl #2]
   195a0:	lsr	r3, r2, r3
   195a4:	tst	r3, #1
   195a8:	beq	195d0 <__assert_fail@plt+0x7e7c>
   195ac:	mov	r3, #1
   195b0:	str	r3, [sp, #20]
   195b4:	ldrb	r4, [r4]
   195b8:	strb	r3, [sp, #12]
   195bc:	strb	r3, [sp, #24]
   195c0:	str	r4, [sp, #28]
   195c4:	cmp	r4, #0
   195c8:	beq	19510 <__assert_fail@plt+0x7dbc>
   195cc:	b	194f4 <__assert_fail@plt+0x7da0>
   195d0:	add	r0, sp, #4
   195d4:	bl	1140c <mbsinit@plt>
   195d8:	cmp	r0, #0
   195dc:	beq	19778 <__assert_fail@plt+0x8024>
   195e0:	mov	r3, #1
   195e4:	strb	r3, [sp]
   195e8:	bl	114fc <__ctype_get_mb_cur_max@plt>
   195ec:	mov	r1, r0
   195f0:	mov	r0, r4
   195f4:	bl	1d9a8 <__assert_fail@plt+0xc254>
   195f8:	mov	r2, r0
   195fc:	add	r3, sp, #4
   19600:	mov	r1, r4
   19604:	add	r0, sp, #28
   19608:	bl	1f208 <__assert_fail@plt+0xdab4>
   1960c:	cmn	r0, #1
   19610:	str	r0, [sp, #20]
   19614:	beq	196d0 <__assert_fail@plt+0x7f7c>
   19618:	cmn	r0, #2
   1961c:	beq	1974c <__assert_fail@plt+0x7ff8>
   19620:	cmp	r0, #0
   19624:	bne	19714 <__assert_fail@plt+0x7fc0>
   19628:	ldr	r3, [sp, #16]
   1962c:	mov	r2, #1
   19630:	str	r2, [sp, #20]
   19634:	ldrb	r3, [r3]
   19638:	cmp	r3, #0
   1963c:	bne	19798 <__assert_fail@plt+0x8044>
   19640:	ldr	r4, [sp, #28]
   19644:	cmp	r4, #0
   19648:	beq	19718 <__assert_fail@plt+0x7fc4>
   1964c:	bl	18f58 <__assert_fail@plt+0x7804>
   19650:	add	r0, sp, #4
   19654:	bl	1140c <mbsinit@plt>
   19658:	cmp	r0, #0
   1965c:	beq	19778 <__assert_fail@plt+0x8024>
   19660:	mov	r4, #1
   19664:	strb	r4, [sp]
   19668:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1966c:	mov	r1, r0
   19670:	mov	r0, r7
   19674:	bl	1d9a8 <__assert_fail@plt+0xc254>
   19678:	mov	r2, r0
   1967c:	add	r3, sp, #4
   19680:	mov	r1, r7
   19684:	add	r0, sp, #28
   19688:	bl	1f208 <__assert_fail@plt+0xdab4>
   1968c:	cmn	r0, #1
   19690:	str	r0, [sp, #20]
   19694:	streq	r4, [sp, #20]
   19698:	beq	1956c <__assert_fail@plt+0x7e18>
   1969c:	cmn	r0, #2
   196a0:	beq	1973c <__assert_fail@plt+0x7fe8>
   196a4:	cmp	r0, #0
   196a8:	bne	196ec <__assert_fail@plt+0x7f98>
   196ac:	ldr	r3, [sp, #16]
   196b0:	str	r4, [sp, #20]
   196b4:	ldrb	r3, [r3]
   196b8:	cmp	r3, #0
   196bc:	bne	19798 <__assert_fail@plt+0x8044>
   196c0:	ldr	r4, [sp, #28]
   196c4:	cmp	r4, #0
   196c8:	beq	196f0 <__assert_fail@plt+0x7f9c>
   196cc:	b	1964c <__assert_fail@plt+0x7ef8>
   196d0:	mov	r3, #1
   196d4:	mov	r2, #0
   196d8:	ldr	r4, [sp, #28]
   196dc:	strb	r3, [sp, #12]
   196e0:	str	r3, [sp, #20]
   196e4:	strb	r2, [sp, #24]
   196e8:	b	194f4 <__assert_fail@plt+0x7da0>
   196ec:	ldr	r4, [sp, #28]
   196f0:	mov	r5, #1
   196f4:	add	r0, sp, #4
   196f8:	strb	r5, [sp, #24]
   196fc:	bl	1140c <mbsinit@plt>
   19700:	cmp	r0, #0
   19704:	strb	r5, [sp, #12]
   19708:	movne	r3, #0
   1970c:	strbne	r3, [sp]
   19710:	b	19564 <__assert_fail@plt+0x7e10>
   19714:	ldr	r4, [sp, #28]
   19718:	mov	r5, #1
   1971c:	add	r0, sp, #4
   19720:	strb	r5, [sp, #24]
   19724:	bl	1140c <mbsinit@plt>
   19728:	cmp	r0, #0
   1972c:	strb	r5, [sp, #12]
   19730:	movne	r3, #0
   19734:	strbne	r3, [sp]
   19738:	b	195c4 <__assert_fail@plt+0x7e70>
   1973c:	ldr	r0, [sp, #16]
   19740:	bl	115b0 <strlen@plt>
   19744:	str	r0, [sp, #20]
   19748:	b	1956c <__assert_fail@plt+0x7e18>
   1974c:	ldr	r0, [sp, #16]
   19750:	bl	115b0 <strlen@plt>
   19754:	mov	r3, #0
   19758:	mov	r2, #1
   1975c:	ldr	r4, [sp, #28]
   19760:	strb	r2, [sp, #12]
   19764:	str	r0, [sp, #20]
   19768:	strb	r3, [sp, #24]
   1976c:	b	194f4 <__assert_fail@plt+0x7da0>
   19770:	mov	fp, #1
   19774:	b	19060 <__assert_fail@plt+0x790c>
   19778:	movw	r3, #19252	; 0x4b34
   1977c:	movt	r3, #2
   19780:	movw	r1, #19272	; 0x4b48
   19784:	movt	r1, #2
   19788:	movw	r0, #19308	; 0x4b6c
   1978c:	movt	r0, #2
   19790:	mov	r2, #143	; 0x8f
   19794:	bl	11754 <__assert_fail@plt>
   19798:	movw	r3, #19252	; 0x4b34
   1979c:	movt	r3, #2
   197a0:	movw	r1, #19272	; 0x4b48
   197a4:	movt	r1, #2
   197a8:	movw	r0, #19332	; 0x4b84
   197ac:	movt	r0, #2
   197b0:	mov	r2, #171	; 0xab
   197b4:	bl	11754 <__assert_fail@plt>
   197b8:	mov	r1, r0
   197bc:	mov	r2, #5
   197c0:	strd	r4, [sp, #-16]!
   197c4:	mov	r4, r0
   197c8:	mov	r0, #0
   197cc:	str	r6, [sp, #8]
   197d0:	str	lr, [sp, #12]
   197d4:	sub	sp, sp, #8
   197d8:	bl	11430 <dcgettext@plt>
   197dc:	cmp	r4, r0
   197e0:	mov	r5, r0
   197e4:	beq	197f8 <__assert_fail@plt+0x80a4>
   197e8:	mov	r1, r4
   197ec:	bl	18f80 <__assert_fail@plt+0x782c>
   197f0:	cmp	r0, #0
   197f4:	beq	19810 <__assert_fail@plt+0x80bc>
   197f8:	mov	r0, r5
   197fc:	add	sp, sp, #8
   19800:	ldrd	r4, [sp]
   19804:	ldr	r6, [sp, #8]
   19808:	add	sp, sp, #12
   1980c:	pop	{pc}		; (ldr pc, [sp], #4)
   19810:	mov	r0, r5
   19814:	bl	115b0 <strlen@plt>
   19818:	mov	r6, r0
   1981c:	mov	r0, r4
   19820:	bl	115b0 <strlen@plt>
   19824:	add	r0, r6, r0
   19828:	add	r0, r0, #4
   1982c:	bl	1e658 <__assert_fail@plt+0xcf04>
   19830:	movw	r3, #19356	; 0x4b9c
   19834:	movt	r3, #2
   19838:	str	r5, [sp]
   1983c:	mvn	r2, #0
   19840:	mov	r1, #1
   19844:	str	r4, [sp, #4]
   19848:	mov	r5, r0
   1984c:	bl	115f8 <__sprintf_chk@plt>
   19850:	b	197f8 <__assert_fail@plt+0x80a4>
   19854:	mov	r2, #5
   19858:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1985c:	mov	r4, r1
   19860:	mov	r1, r0
   19864:	strd	r6, [sp, #8]
   19868:	mov	r6, r0
   1986c:	mov	r0, #0
   19870:	strd	r8, [sp, #16]
   19874:	str	sl, [sp, #24]
   19878:	str	lr, [sp, #28]
   1987c:	sub	sp, sp, #8
   19880:	bl	11430 <dcgettext@plt>
   19884:	mov	r5, r0
   19888:	bl	1f0fc <__assert_fail@plt+0xd9a8>
   1988c:	movw	r1, #19364	; 0x4ba4
   19890:	movt	r1, #2
   19894:	mov	r7, r0
   19898:	bl	1ee14 <__assert_fail@plt+0xd6c0>
   1989c:	subs	r8, r0, #0
   198a0:	bne	199d0 <__assert_fail@plt+0x827c>
   198a4:	mov	r1, r6
   198a8:	mov	r0, r5
   198ac:	bl	11388 <strcmp@plt>
   198b0:	cmp	r4, #0
   198b4:	movne	sl, r4
   198b8:	movne	r9, r4
   198bc:	beq	1993c <__assert_fail@plt+0x81e8>
   198c0:	cmp	r0, #0
   198c4:	moveq	r5, r4
   198c8:	beq	1991c <__assert_fail@plt+0x81c8>
   198cc:	mov	r1, r6
   198d0:	mov	r0, r5
   198d4:	bl	18f80 <__assert_fail@plt+0x782c>
   198d8:	subs	r7, r0, #0
   198dc:	bne	1990c <__assert_fail@plt+0x81b8>
   198e0:	cmp	r9, #0
   198e4:	beq	1994c <__assert_fail@plt+0x81f8>
   198e8:	mov	r1, r9
   198ec:	mov	r0, r5
   198f0:	bl	18f80 <__assert_fail@plt+0x782c>
   198f4:	cmp	r0, #0
   198f8:	beq	1994c <__assert_fail@plt+0x81f8>
   198fc:	cmp	r7, #0
   19900:	beq	1990c <__assert_fail@plt+0x81b8>
   19904:	mov	r0, r7
   19908:	bl	18d2c <__assert_fail@plt+0x75d8>
   1990c:	cmp	r8, #0
   19910:	beq	1991c <__assert_fail@plt+0x81c8>
   19914:	mov	r0, r8
   19918:	bl	18d2c <__assert_fail@plt+0x75d8>
   1991c:	mov	r0, r5
   19920:	add	sp, sp, #8
   19924:	ldrd	r4, [sp]
   19928:	ldrd	r6, [sp, #8]
   1992c:	ldrd	r8, [sp, #16]
   19930:	ldr	sl, [sp, #24]
   19934:	add	sp, sp, #28
   19938:	pop	{pc}		; (ldr pc, [sp], #4)
   1993c:	cmp	r0, #0
   19940:	bne	19b20 <__assert_fail@plt+0x83cc>
   19944:	mov	r5, r6
   19948:	b	1991c <__assert_fail@plt+0x81c8>
   1994c:	cmp	sl, #0
   19950:	beq	19968 <__assert_fail@plt+0x8214>
   19954:	mov	r1, sl
   19958:	mov	r0, r5
   1995c:	bl	18f80 <__assert_fail@plt+0x782c>
   19960:	cmp	r0, #0
   19964:	bne	198fc <__assert_fail@plt+0x81a8>
   19968:	mov	r0, r5
   1996c:	bl	115b0 <strlen@plt>
   19970:	mov	r6, r0
   19974:	mov	r0, r4
   19978:	bl	115b0 <strlen@plt>
   1997c:	add	r0, r6, r0
   19980:	add	r0, r0, #4
   19984:	bl	1e658 <__assert_fail@plt+0xcf04>
   19988:	movw	r3, #19356	; 0x4b9c
   1998c:	movt	r3, #2
   19990:	str	r5, [sp]
   19994:	mvn	r2, #0
   19998:	mov	r1, #1
   1999c:	str	r4, [sp, #4]
   199a0:	mov	r6, r0
   199a4:	bl	115f8 <__sprintf_chk@plt>
   199a8:	cmp	r7, #0
   199ac:	beq	199b8 <__assert_fail@plt+0x8264>
   199b0:	mov	r0, r7
   199b4:	bl	18d2c <__assert_fail@plt+0x75d8>
   199b8:	cmp	r8, #0
   199bc:	beq	19944 <__assert_fail@plt+0x81f0>
   199c0:	mov	r0, r8
   199c4:	mov	r5, r6
   199c8:	bl	18d2c <__assert_fail@plt+0x75d8>
   199cc:	b	1991c <__assert_fail@plt+0x81c8>
   199d0:	mov	r2, r7
   199d4:	mov	r0, r4
   199d8:	movw	r1, #19364	; 0x4ba4
   199dc:	movt	r1, #2
   199e0:	bl	1ecd4 <__assert_fail@plt+0xd580>
   199e4:	mov	r9, r0
   199e8:	mov	r0, r7
   199ec:	bl	115b0 <strlen@plt>
   199f0:	mov	sl, r0
   199f4:	add	r0, r0, #11
   199f8:	bl	1e658 <__assert_fail@plt+0xcf04>
   199fc:	mov	r1, r7
   19a00:	mov	r2, sl
   19a04:	mov	r8, r0
   19a08:	bl	113f4 <memcpy@plt>
   19a0c:	movw	r3, #19372	; 0x4bac
   19a10:	movt	r3, #2
   19a14:	ldrb	lr, [r3, #10]
   19a18:	mov	r0, r4
   19a1c:	add	ip, r8, sl
   19a20:	mov	r2, r8
   19a24:	movw	r1, #19364	; 0x4ba4
   19a28:	movt	r1, #2
   19a2c:	ldrh	r7, [r3, #8]
   19a30:	ldr	r4, [r3]
   19a34:	ldr	r3, [r3, #4]
   19a38:	str	r4, [r8, sl]
   19a3c:	str	r3, [ip, #4]
   19a40:	strh	r7, [ip, #8]
   19a44:	strb	lr, [ip, #10]
   19a48:	bl	1ecd4 <__assert_fail@plt+0xd580>
   19a4c:	mov	r4, r0
   19a50:	mov	r0, r8
   19a54:	bl	18d2c <__assert_fail@plt+0x75d8>
   19a58:	cmp	r4, #0
   19a5c:	beq	19af4 <__assert_fail@plt+0x83a0>
   19a60:	mov	r1, #63	; 0x3f
   19a64:	mov	r0, r4
   19a68:	bl	115bc <strchr@plt>
   19a6c:	cmp	r0, #0
   19a70:	beq	19ac0 <__assert_fail@plt+0x836c>
   19a74:	mov	r0, r4
   19a78:	bl	18d2c <__assert_fail@plt+0x75d8>
   19a7c:	cmp	r9, #0
   19a80:	mov	r1, r6
   19a84:	mov	r0, r5
   19a88:	beq	19b44 <__assert_fail@plt+0x83f0>
   19a8c:	bl	11388 <strcmp@plt>
   19a90:	cmp	r0, #0
   19a94:	beq	19b18 <__assert_fail@plt+0x83c4>
   19a98:	mov	r1, r6
   19a9c:	mov	r0, r5
   19aa0:	bl	18f80 <__assert_fail@plt+0x782c>
   19aa4:	cmp	r0, #0
   19aa8:	bne	19b8c <__assert_fail@plt+0x8438>
   19aac:	mov	sl, r0
   19ab0:	mov	r7, r9
   19ab4:	mov	r8, r0
   19ab8:	mov	r4, r9
   19abc:	b	198e0 <__assert_fail@plt+0x818c>
   19ac0:	mov	r1, r6
   19ac4:	mov	r0, r5
   19ac8:	bl	11388 <strcmp@plt>
   19acc:	cmp	r9, #0
   19ad0:	beq	19b58 <__assert_fail@plt+0x8404>
   19ad4:	cmp	r0, #0
   19ad8:	bne	19b64 <__assert_fail@plt+0x8410>
   19adc:	cmp	r9, r4
   19ae0:	beq	19b18 <__assert_fail@plt+0x83c4>
   19ae4:	mov	r0, r4
   19ae8:	mov	r5, r9
   19aec:	bl	18d2c <__assert_fail@plt+0x75d8>
   19af0:	b	1991c <__assert_fail@plt+0x81c8>
   19af4:	mov	r1, r6
   19af8:	mov	r0, r5
   19afc:	bl	11388 <strcmp@plt>
   19b00:	cmp	r9, #0
   19b04:	bne	19a90 <__assert_fail@plt+0x833c>
   19b08:	mov	sl, r9
   19b0c:	mov	r8, r9
   19b10:	mov	r4, r6
   19b14:	b	198c0 <__assert_fail@plt+0x816c>
   19b18:	mov	r5, r9
   19b1c:	b	1991c <__assert_fail@plt+0x81c8>
   19b20:	mov	r1, r6
   19b24:	mov	r0, r5
   19b28:	bl	18f80 <__assert_fail@plt+0x782c>
   19b2c:	cmp	r0, #0
   19b30:	bne	1991c <__assert_fail@plt+0x81c8>
   19b34:	mov	r7, r4
   19b38:	mov	r8, r4
   19b3c:	mov	r4, r6
   19b40:	b	19968 <__assert_fail@plt+0x8214>
   19b44:	bl	11388 <strcmp@plt>
   19b48:	mov	sl, r9
   19b4c:	mov	r8, r9
   19b50:	mov	r4, r6
   19b54:	b	198c0 <__assert_fail@plt+0x816c>
   19b58:	mov	sl, r4
   19b5c:	mov	r8, r4
   19b60:	b	198c0 <__assert_fail@plt+0x816c>
   19b64:	mov	r1, r6
   19b68:	mov	r0, r5
   19b6c:	bl	18f80 <__assert_fail@plt+0x782c>
   19b70:	cmp	r0, #0
   19b74:	bne	19b98 <__assert_fail@plt+0x8444>
   19b78:	mov	sl, r4
   19b7c:	mov	r8, r4
   19b80:	mov	r7, r9
   19b84:	mov	r4, r9
   19b88:	b	198e0 <__assert_fail@plt+0x818c>
   19b8c:	mov	r7, r9
   19b90:	mov	r8, #0
   19b94:	b	198fc <__assert_fail@plt+0x81a8>
   19b98:	mov	r8, r4
   19b9c:	mov	r7, r9
   19ba0:	b	19904 <__assert_fail@plt+0x81b0>
   19ba4:	mov	r2, #5
   19ba8:	strd	r4, [sp, #-16]!
   19bac:	mov	r5, r0
   19bb0:	str	r6, [sp, #8]
   19bb4:	mov	r6, r1
   19bb8:	mov	r1, r0
   19bbc:	mov	r0, #0
   19bc0:	str	lr, [sp, #12]
   19bc4:	bl	11430 <dcgettext@plt>
   19bc8:	cmp	r5, r0
   19bcc:	mov	r4, r0
   19bd0:	beq	19be8 <__assert_fail@plt+0x8494>
   19bd4:	mov	r0, r4
   19bd8:	ldrd	r4, [sp]
   19bdc:	ldr	r6, [sp, #8]
   19be0:	add	sp, sp, #12
   19be4:	pop	{pc}		; (ldr pc, [sp], #4)
   19be8:	bl	1f0fc <__assert_fail@plt+0xd9a8>
   19bec:	ldrb	r3, [r0]
   19bf0:	bic	r3, r3, #32
   19bf4:	cmp	r3, #85	; 0x55
   19bf8:	bne	19c60 <__assert_fail@plt+0x850c>
   19bfc:	ldrb	r3, [r0, #1]
   19c00:	bic	r3, r3, #32
   19c04:	cmp	r3, #84	; 0x54
   19c08:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c0c:	ldrb	r3, [r0, #2]
   19c10:	bic	r3, r3, #32
   19c14:	cmp	r3, #70	; 0x46
   19c18:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c1c:	ldrb	r3, [r0, #3]
   19c20:	cmp	r3, #45	; 0x2d
   19c24:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c28:	ldrb	r3, [r0, #4]
   19c2c:	cmp	r3, #56	; 0x38
   19c30:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c34:	ldrb	r3, [r0, #5]
   19c38:	cmp	r3, #0
   19c3c:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c40:	ldrb	r2, [r4]
   19c44:	movw	r3, #19472	; 0x4c10
   19c48:	movt	r3, #2
   19c4c:	movw	r4, #19484	; 0x4c1c
   19c50:	movt	r4, #2
   19c54:	cmp	r2, #96	; 0x60
   19c58:	movne	r4, r3
   19c5c:	b	19bd4 <__assert_fail@plt+0x8480>
   19c60:	cmp	r3, #71	; 0x47
   19c64:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c68:	ldrb	r3, [r0, #1]
   19c6c:	bic	r3, r3, #32
   19c70:	cmp	r3, #66	; 0x42
   19c74:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c78:	ldrb	r3, [r0, #2]
   19c7c:	cmp	r3, #49	; 0x31
   19c80:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c84:	ldrb	r3, [r0, #3]
   19c88:	cmp	r3, #56	; 0x38
   19c8c:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c90:	ldrb	r3, [r0, #4]
   19c94:	cmp	r3, #48	; 0x30
   19c98:	bne	19ce0 <__assert_fail@plt+0x858c>
   19c9c:	ldrb	r3, [r0, #5]
   19ca0:	cmp	r3, #51	; 0x33
   19ca4:	bne	19ce0 <__assert_fail@plt+0x858c>
   19ca8:	ldrb	r3, [r0, #6]
   19cac:	cmp	r3, #48	; 0x30
   19cb0:	bne	19ce0 <__assert_fail@plt+0x858c>
   19cb4:	ldrb	r3, [r0, #7]
   19cb8:	cmp	r3, #0
   19cbc:	bne	19ce0 <__assert_fail@plt+0x858c>
   19cc0:	ldrb	r2, [r4]
   19cc4:	movw	r3, #19476	; 0x4c14
   19cc8:	movt	r3, #2
   19ccc:	movw	r4, #19480	; 0x4c18
   19cd0:	movt	r4, #2
   19cd4:	cmp	r2, #96	; 0x60
   19cd8:	movne	r4, r3
   19cdc:	b	19bd4 <__assert_fail@plt+0x8480>
   19ce0:	movw	r3, #19488	; 0x4c20
   19ce4:	movt	r3, #2
   19ce8:	cmp	r6, #9
   19cec:	movw	r4, #19468	; 0x4c0c
   19cf0:	movt	r4, #2
   19cf4:	movne	r4, r3
   19cf8:	b	19bd4 <__assert_fail@plt+0x8480>
   19cfc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d00:	strd	r6, [sp, #8]
   19d04:	strd	r8, [sp, #16]
   19d08:	mov	r8, r3
   19d0c:	strd	sl, [sp, #24]
   19d10:	mov	fp, r0
   19d14:	mov	sl, r1
   19d18:	str	lr, [sp, #32]
   19d1c:	sub	sp, sp, #140	; 0x8c
   19d20:	ldr	r3, [sp, #180]	; 0xb4
   19d24:	str	r2, [sp, #28]
   19d28:	and	r4, r3, #2
   19d2c:	ubfx	r3, r3, #1, #1
   19d30:	str	r3, [sp, #44]	; 0x2c
   19d34:	bl	114fc <__ctype_get_mb_cur_max@plt>
   19d38:	ldr	r3, [sp, #176]	; 0xb0
   19d3c:	str	r0, [sp, #76]	; 0x4c
   19d40:	cmp	r3, #10
   19d44:	ldrls	pc, [pc, r3, lsl #2]
   19d48:	b	1b6e4 <__assert_fail@plt+0x9f90>
   19d4c:	andeq	sl, r1, ip, asr #3
   19d50:	andeq	sl, r1, r8, ror #5
   19d54:	andeq	sl, r1, r4, ror #16
   19d58:	andeq	sl, r1, r4, asr r3
   19d5c:	ldrdeq	sl, [r1], -r4
   19d60:	andeq	sl, r1, r0, asr r1
   19d64:	andeq	sl, r1, r8, lsr #4
   19d68:	muleq	r1, r0, r2
   19d6c:	andeq	r9, r1, r8, ror sp
   19d70:	andeq	r9, r1, r8, ror sp
   19d74:	andeq	r9, r1, r8, ror sp
   19d78:	ldr	r3, [sp, #176]	; 0xb0
   19d7c:	cmp	r3, #10
   19d80:	beq	19dac <__assert_fail@plt+0x8658>
   19d84:	mov	r1, r3
   19d88:	movw	r0, #19492	; 0x4c24
   19d8c:	movt	r0, #2
   19d90:	bl	19ba4 <__assert_fail@plt+0x8450>
   19d94:	str	r0, [sp, #188]	; 0xbc
   19d98:	movw	r0, #19488	; 0x4c20
   19d9c:	movt	r0, #2
   19da0:	ldr	r1, [sp, #176]	; 0xb0
   19da4:	bl	19ba4 <__assert_fail@plt+0x8450>
   19da8:	str	r0, [sp, #192]	; 0xc0
   19dac:	cmp	r4, #0
   19db0:	movne	r4, #0
   19db4:	beq	1b470 <__assert_fail@plt+0x9d1c>
   19db8:	mov	r5, #0
   19dbc:	ldr	r0, [sp, #192]	; 0xc0
   19dc0:	mov	r9, r5
   19dc4:	str	r5, [sp, #64]	; 0x40
   19dc8:	bl	115b0 <strlen@plt>
   19dcc:	mov	r3, #1
   19dd0:	ldr	r2, [sp, #44]	; 0x2c
   19dd4:	cmp	r0, r5
   19dd8:	moveq	r2, r5
   19ddc:	str	r3, [sp, #32]
   19de0:	str	r3, [sp, #48]	; 0x30
   19de4:	str	r5, [sp, #52]	; 0x34
   19de8:	str	r3, [sp, #60]	; 0x3c
   19dec:	ldr	r3, [sp, #180]	; 0xb4
   19df0:	str	r0, [sp, #56]	; 0x38
   19df4:	str	r5, [sp, #68]	; 0x44
   19df8:	str	r5, [sp, #80]	; 0x50
   19dfc:	str	r5, [sp, #84]	; 0x54
   19e00:	and	r3, r3, #1
   19e04:	str	r2, [sp, #88]	; 0x58
   19e08:	str	r3, [sp, #92]	; 0x5c
   19e0c:	ldr	r3, [sp, #180]	; 0xb4
   19e10:	and	r3, r3, #4
   19e14:	str	r3, [sp, #96]	; 0x60
   19e18:	ldr	r3, [sp, #192]	; 0xc0
   19e1c:	str	r3, [sp, #72]	; 0x48
   19e20:	mov	r3, fp
   19e24:	mov	r7, #0
   19e28:	mov	fp, r9
   19e2c:	mov	r9, r3
   19e30:	cmn	r8, #1
   19e34:	beq	1a438 <__assert_fail@plt+0x8ce4>
   19e38:	subs	r6, r8, r7
   19e3c:	movne	r6, #1
   19e40:	cmp	r6, #0
   19e44:	beq	1a450 <__assert_fail@plt+0x8cfc>
   19e48:	ldr	r0, [sp, #28]
   19e4c:	ldr	r3, [sp, #48]	; 0x30
   19e50:	cmp	r3, #0
   19e54:	add	r3, r0, r7
   19e58:	str	r3, [sp, #36]	; 0x24
   19e5c:	beq	1a8dc <__assert_fail@plt+0x9188>
   19e60:	ldr	r2, [sp, #56]	; 0x38
   19e64:	cmp	r2, #0
   19e68:	beq	1addc <__assert_fail@plt+0x9688>
   19e6c:	cmp	r2, #1
   19e70:	mov	r3, r2
   19e74:	movls	r3, #0
   19e78:	movhi	r3, #1
   19e7c:	cmn	r8, #1
   19e80:	add	r5, r7, r2
   19e84:	movne	r3, #0
   19e88:	cmp	r3, #0
   19e8c:	beq	19e98 <__assert_fail@plt+0x8744>
   19e90:	bl	115b0 <strlen@plt>
   19e94:	mov	r8, r0
   19e98:	cmp	r5, r8
   19e9c:	bhi	1addc <__assert_fail@plt+0x9688>
   19ea0:	ldr	r0, [sp, #36]	; 0x24
   19ea4:	ldr	r2, [sp, #56]	; 0x38
   19ea8:	ldr	r1, [sp, #72]	; 0x48
   19eac:	bl	11418 <memcmp@plt>
   19eb0:	cmp	r0, #0
   19eb4:	bne	1addc <__assert_fail@plt+0x9688>
   19eb8:	ldr	r3, [sp, #44]	; 0x2c
   19ebc:	cmp	r3, #0
   19ec0:	bne	1b588 <__assert_fail@plt+0x9e34>
   19ec4:	ldr	r3, [sp, #36]	; 0x24
   19ec8:	ldrb	r5, [r3]
   19ecc:	cmp	r5, #126	; 0x7e
   19ed0:	ldrls	pc, [pc, r5, lsl #2]
   19ed4:	b	1b370 <__assert_fail@plt+0x9c1c>
   19ed8:	andeq	sl, r1, ip, lsr #11
   19edc:	andeq	fp, r1, r0, ror r3
   19ee0:	andeq	fp, r1, r0, ror r3
   19ee4:	andeq	fp, r1, r0, ror r3
   19ee8:	andeq	fp, r1, r0, ror r3
   19eec:	andeq	fp, r1, r0, ror r3
   19ef0:	andeq	fp, r1, r0, ror r3
   19ef4:	andeq	sl, r1, r4, lsl #10
   19ef8:	strdeq	sl, [r1], -ip
   19efc:	andeq	sl, r1, ip, lsl #10
   19f00:	muleq	r1, r0, r6
   19f04:	andeq	sl, r1, r0, lsl #13
   19f08:	andeq	sl, r1, r8, lsr #7
   19f0c:	andeq	sl, r1, ip, asr r6
   19f10:	andeq	fp, r1, r0, ror r3
   19f14:	andeq	fp, r1, r0, ror r3
   19f18:	andeq	fp, r1, r0, ror r3
   19f1c:	andeq	fp, r1, r0, ror r3
   19f20:	andeq	fp, r1, r0, ror r3
   19f24:	andeq	fp, r1, r0, ror r3
   19f28:	andeq	fp, r1, r0, ror r3
   19f2c:	andeq	fp, r1, r0, ror r3
   19f30:	andeq	fp, r1, r0, ror r3
   19f34:	andeq	fp, r1, r0, ror r3
   19f38:	andeq	fp, r1, r0, ror r3
   19f3c:	andeq	fp, r1, r0, ror r3
   19f40:	andeq	fp, r1, r0, ror r3
   19f44:	andeq	fp, r1, r0, ror r3
   19f48:	andeq	fp, r1, r0, ror r3
   19f4c:	andeq	fp, r1, r0, ror r3
   19f50:	andeq	fp, r1, r0, ror r3
   19f54:	andeq	fp, r1, r0, ror r3
   19f58:	andeq	sl, r1, r8, lsl #14
   19f5c:	strdeq	sl, [r1], -ip
   19f60:	strdeq	sl, [r1], -ip
   19f64:	strdeq	sl, [r1], -r0
   19f68:	strdeq	sl, [r1], -ip
   19f6c:	ldrdeq	sl, [r1], -r4
   19f70:	strdeq	sl, [r1], -ip
   19f74:	andeq	sl, r1, r4, asr #16
   19f78:	strdeq	sl, [r1], -ip
   19f7c:	strdeq	sl, [r1], -ip
   19f80:	strdeq	sl, [r1], -ip
   19f84:	ldrdeq	sl, [r1], -r4
   19f88:	ldrdeq	sl, [r1], -r4
   19f8c:	ldrdeq	sl, [r1], -r4
   19f90:	ldrdeq	sl, [r1], -r4
   19f94:	ldrdeq	sl, [r1], -r4
   19f98:	ldrdeq	sl, [r1], -r4
   19f9c:	ldrdeq	sl, [r1], -r4
   19fa0:	ldrdeq	sl, [r1], -r4
   19fa4:	ldrdeq	sl, [r1], -r4
   19fa8:	ldrdeq	sl, [r1], -r4
   19fac:	ldrdeq	sl, [r1], -r4
   19fb0:	ldrdeq	sl, [r1], -r4
   19fb4:	ldrdeq	sl, [r1], -r4
   19fb8:	ldrdeq	sl, [r1], -r4
   19fbc:	ldrdeq	sl, [r1], -r4
   19fc0:	ldrdeq	sl, [r1], -r4
   19fc4:	strdeq	sl, [r1], -ip
   19fc8:	strdeq	sl, [r1], -ip
   19fcc:	strdeq	sl, [r1], -ip
   19fd0:	strdeq	sl, [r1], -ip
   19fd4:	strdeq	sl, [r1], -r4
   19fd8:	andeq	fp, r1, r0, ror r3
   19fdc:	ldrdeq	sl, [r1], -r4
   19fe0:	ldrdeq	sl, [r1], -r4
   19fe4:	ldrdeq	sl, [r1], -r4
   19fe8:	ldrdeq	sl, [r1], -r4
   19fec:	ldrdeq	sl, [r1], -r4
   19ff0:	ldrdeq	sl, [r1], -r4
   19ff4:	ldrdeq	sl, [r1], -r4
   19ff8:	ldrdeq	sl, [r1], -r4
   19ffc:	ldrdeq	sl, [r1], -r4
   1a000:	ldrdeq	sl, [r1], -r4
   1a004:	ldrdeq	sl, [r1], -r4
   1a008:	ldrdeq	sl, [r1], -r4
   1a00c:	ldrdeq	sl, [r1], -r4
   1a010:	ldrdeq	sl, [r1], -r4
   1a014:	ldrdeq	sl, [r1], -r4
   1a018:	ldrdeq	sl, [r1], -r4
   1a01c:	ldrdeq	sl, [r1], -r4
   1a020:	ldrdeq	sl, [r1], -r4
   1a024:	ldrdeq	sl, [r1], -r4
   1a028:	ldrdeq	sl, [r1], -r4
   1a02c:	ldrdeq	sl, [r1], -r4
   1a030:	ldrdeq	sl, [r1], -r4
   1a034:	ldrdeq	sl, [r1], -r4
   1a038:	ldrdeq	sl, [r1], -r4
   1a03c:	ldrdeq	sl, [r1], -r4
   1a040:	ldrdeq	sl, [r1], -r4
   1a044:	strdeq	sl, [r1], -ip
   1a048:	muleq	r1, r8, r7
   1a04c:	ldrdeq	sl, [r1], -r4
   1a050:	strdeq	sl, [r1], -ip
   1a054:	ldrdeq	sl, [r1], -r4
   1a058:	strdeq	sl, [r1], -ip
   1a05c:	ldrdeq	sl, [r1], -r4
   1a060:	ldrdeq	sl, [r1], -r4
   1a064:	ldrdeq	sl, [r1], -r4
   1a068:	ldrdeq	sl, [r1], -r4
   1a06c:	ldrdeq	sl, [r1], -r4
   1a070:	ldrdeq	sl, [r1], -r4
   1a074:	ldrdeq	sl, [r1], -r4
   1a078:	ldrdeq	sl, [r1], -r4
   1a07c:	ldrdeq	sl, [r1], -r4
   1a080:	ldrdeq	sl, [r1], -r4
   1a084:	ldrdeq	sl, [r1], -r4
   1a088:	ldrdeq	sl, [r1], -r4
   1a08c:	ldrdeq	sl, [r1], -r4
   1a090:	ldrdeq	sl, [r1], -r4
   1a094:	ldrdeq	sl, [r1], -r4
   1a098:	ldrdeq	sl, [r1], -r4
   1a09c:	ldrdeq	sl, [r1], -r4
   1a0a0:	ldrdeq	sl, [r1], -r4
   1a0a4:	ldrdeq	sl, [r1], -r4
   1a0a8:	ldrdeq	sl, [r1], -r4
   1a0ac:	ldrdeq	sl, [r1], -r4
   1a0b0:	ldrdeq	sl, [r1], -r4
   1a0b4:	ldrdeq	sl, [r1], -r4
   1a0b8:	ldrdeq	sl, [r1], -r4
   1a0bc:	ldrdeq	sl, [r1], -r4
   1a0c0:	ldrdeq	sl, [r1], -r4
   1a0c4:	andeq	sl, r1, r4, lsr #13
   1a0c8:	strdeq	sl, [r1], -ip
   1a0cc:	andeq	sl, r1, r4, lsr #13
   1a0d0:	strdeq	sl, [r1], -r0
   1a0d4:	ldr	r3, [sp, #180]	; 0xb4
   1a0d8:	cmp	r4, #0
   1a0dc:	and	r3, r3, #1
   1a0e0:	str	r3, [sp, #92]	; 0x5c
   1a0e4:	ldr	r3, [sp, #180]	; 0xb4
   1a0e8:	and	r3, r3, #4
   1a0ec:	str	r3, [sp, #96]	; 0x60
   1a0f0:	moveq	r3, #1
   1a0f4:	streq	r3, [sp, #60]	; 0x3c
   1a0f8:	beq	1a888 <__assert_fail@plt+0x9134>
   1a0fc:	mov	r3, #0
   1a100:	mov	r2, #1
   1a104:	mov	r4, r3
   1a108:	mov	r9, r3
   1a10c:	str	r2, [sp, #32]
   1a110:	str	r2, [sp, #44]	; 0x2c
   1a114:	str	r3, [sp, #48]	; 0x30
   1a118:	str	r2, [sp, #52]	; 0x34
   1a11c:	str	r2, [sp, #56]	; 0x38
   1a120:	str	r3, [sp, #60]	; 0x3c
   1a124:	str	r2, [sp, #64]	; 0x40
   1a128:	str	r2, [sp, #68]	; 0x44
   1a12c:	str	r3, [sp, #80]	; 0x50
   1a130:	str	r3, [sp, #84]	; 0x54
   1a134:	str	r3, [sp, #88]	; 0x58
   1a138:	movw	r3, #19488	; 0x4c20
   1a13c:	movt	r3, #2
   1a140:	str	r3, [sp, #72]	; 0x48
   1a144:	mov	r3, #2
   1a148:	str	r3, [sp, #176]	; 0xb0
   1a14c:	b	19e20 <__assert_fail@plt+0x86cc>
   1a150:	ldr	r3, [sp, #180]	; 0xb4
   1a154:	cmp	r4, #0
   1a158:	and	r3, r3, #1
   1a15c:	str	r3, [sp, #92]	; 0x5c
   1a160:	ldr	r3, [sp, #180]	; 0xb4
   1a164:	and	r3, r3, #4
   1a168:	str	r3, [sp, #96]	; 0x60
   1a16c:	bne	1b540 <__assert_fail@plt+0x9dec>
   1a170:	cmp	sl, #0
   1a174:	beq	1b2ec <__assert_fail@plt+0x9b98>
   1a178:	mov	r3, #34	; 0x22
   1a17c:	mov	r2, r4
   1a180:	mov	r1, #1
   1a184:	mov	r9, r2
   1a188:	strb	r3, [fp]
   1a18c:	movw	r3, #19468	; 0x4c0c
   1a190:	movt	r3, #2
   1a194:	mov	r4, r1
   1a198:	str	r1, [sp, #32]
   1a19c:	str	r2, [sp, #44]	; 0x2c
   1a1a0:	str	r1, [sp, #48]	; 0x30
   1a1a4:	str	r2, [sp, #52]	; 0x34
   1a1a8:	str	r1, [sp, #56]	; 0x38
   1a1ac:	str	r1, [sp, #60]	; 0x3c
   1a1b0:	str	r2, [sp, #64]	; 0x40
   1a1b4:	str	r2, [sp, #68]	; 0x44
   1a1b8:	str	r3, [sp, #72]	; 0x48
   1a1bc:	str	r2, [sp, #80]	; 0x50
   1a1c0:	str	r2, [sp, #84]	; 0x54
   1a1c4:	str	r2, [sp, #88]	; 0x58
   1a1c8:	b	19e20 <__assert_fail@plt+0x86cc>
   1a1cc:	mov	r3, #0
   1a1d0:	mov	r2, #1
   1a1d4:	mov	r9, r3
   1a1d8:	str	r2, [sp, #32]
   1a1dc:	str	r3, [sp, #44]	; 0x2c
   1a1e0:	str	r3, [sp, #48]	; 0x30
   1a1e4:	str	r3, [sp, #52]	; 0x34
   1a1e8:	str	r3, [sp, #60]	; 0x3c
   1a1ec:	strd	r2, [sp, #64]	; 0x40
   1a1f0:	str	r3, [sp, #72]	; 0x48
   1a1f4:	str	r3, [sp, #80]	; 0x50
   1a1f8:	str	r3, [sp, #88]	; 0x58
   1a1fc:	ldr	r3, [sp, #180]	; 0xb4
   1a200:	and	r3, r3, r2
   1a204:	str	r3, [sp, #92]	; 0x5c
   1a208:	ldr	r3, [sp, #180]	; 0xb4
   1a20c:	and	r3, r3, #4
   1a210:	str	r3, [sp, #96]	; 0x60
   1a214:	ldr	r3, [sp, #176]	; 0xb0
   1a218:	mov	r4, r3
   1a21c:	str	r3, [sp, #56]	; 0x38
   1a220:	str	r3, [sp, #84]	; 0x54
   1a224:	b	19e20 <__assert_fail@plt+0x86cc>
   1a228:	mov	r3, #1
   1a22c:	mov	r4, #0
   1a230:	mov	r9, r4
   1a234:	str	r3, [sp, #32]
   1a238:	str	r3, [sp, #44]	; 0x2c
   1a23c:	str	r3, [sp, #48]	; 0x30
   1a240:	str	r4, [sp, #52]	; 0x34
   1a244:	str	r3, [sp, #56]	; 0x38
   1a248:	str	r3, [sp, #60]	; 0x3c
   1a24c:	str	r3, [sp, #88]	; 0x58
   1a250:	movw	r3, #19468	; 0x4c0c
   1a254:	movt	r3, #2
   1a258:	str	r4, [sp, #64]	; 0x40
   1a25c:	str	r4, [sp, #68]	; 0x44
   1a260:	str	r3, [sp, #72]	; 0x48
   1a264:	ldr	r3, [sp, #180]	; 0xb4
   1a268:	str	r4, [sp, #80]	; 0x50
   1a26c:	str	r4, [sp, #84]	; 0x54
   1a270:	and	r3, r3, #1
   1a274:	str	r3, [sp, #92]	; 0x5c
   1a278:	ldr	r3, [sp, #180]	; 0xb4
   1a27c:	and	r3, r3, #4
   1a280:	str	r3, [sp, #96]	; 0x60
   1a284:	mov	r3, #5
   1a288:	str	r3, [sp, #176]	; 0xb0
   1a28c:	b	19e20 <__assert_fail@plt+0x86cc>
   1a290:	mov	r3, #1
   1a294:	mov	r4, #0
   1a298:	mov	r9, r4
   1a29c:	str	r3, [sp, #32]
   1a2a0:	str	r4, [sp, #44]	; 0x2c
   1a2a4:	str	r3, [sp, #48]	; 0x30
   1a2a8:	str	r3, [sp, #60]	; 0x3c
   1a2ac:	ldr	r3, [sp, #180]	; 0xb4
   1a2b0:	str	r4, [sp, #52]	; 0x34
   1a2b4:	str	r4, [sp, #56]	; 0x38
   1a2b8:	str	r4, [sp, #64]	; 0x40
   1a2bc:	str	r4, [sp, #68]	; 0x44
   1a2c0:	and	r3, r3, #1
   1a2c4:	str	r4, [sp, #72]	; 0x48
   1a2c8:	str	r4, [sp, #80]	; 0x50
   1a2cc:	str	r4, [sp, #84]	; 0x54
   1a2d0:	str	r3, [sp, #92]	; 0x5c
   1a2d4:	ldr	r3, [sp, #180]	; 0xb4
   1a2d8:	str	r4, [sp, #88]	; 0x58
   1a2dc:	and	r3, r3, #4
   1a2e0:	str	r3, [sp, #96]	; 0x60
   1a2e4:	b	19e20 <__assert_fail@plt+0x86cc>
   1a2e8:	mov	r3, #0
   1a2ec:	mov	r2, #1
   1a2f0:	ldr	r1, [sp, #176]	; 0xb0
   1a2f4:	mov	r4, r3
   1a2f8:	mov	r9, r3
   1a2fc:	movw	r3, #19488	; 0x4c20
   1a300:	movt	r3, #2
   1a304:	str	r2, [sp, #32]
   1a308:	str	r2, [sp, #44]	; 0x2c
   1a30c:	str	r4, [sp, #48]	; 0x30
   1a310:	strd	r2, [sp, #68]	; 0x44
   1a314:	ldr	r3, [sp, #180]	; 0xb4
   1a318:	str	r2, [sp, #52]	; 0x34
   1a31c:	str	r1, [sp, #56]	; 0x38
   1a320:	str	r4, [sp, #60]	; 0x3c
   1a324:	str	r2, [sp, #64]	; 0x40
   1a328:	and	r3, r3, r2
   1a32c:	str	r4, [sp, #80]	; 0x50
   1a330:	str	r4, [sp, #84]	; 0x54
   1a334:	str	r4, [sp, #88]	; 0x58
   1a338:	str	r3, [sp, #92]	; 0x5c
   1a33c:	ldr	r3, [sp, #180]	; 0xb4
   1a340:	and	r3, r3, #4
   1a344:	str	r3, [sp, #96]	; 0x60
   1a348:	mov	r3, #2
   1a34c:	str	r3, [sp, #176]	; 0xb0
   1a350:	b	19e20 <__assert_fail@plt+0x86cc>
   1a354:	mov	r3, #1
   1a358:	mov	r2, #0
   1a35c:	mov	r4, r2
   1a360:	mov	r9, r2
   1a364:	str	r3, [sp, #32]
   1a368:	str	r3, [sp, #44]	; 0x2c
   1a36c:	str	r2, [sp, #48]	; 0x30
   1a370:	str	r3, [sp, #52]	; 0x34
   1a374:	str	r3, [sp, #56]	; 0x38
   1a378:	str	r3, [sp, #60]	; 0x3c
   1a37c:	str	r3, [sp, #64]	; 0x40
   1a380:	str	r3, [sp, #68]	; 0x44
   1a384:	str	r3, [sp, #88]	; 0x58
   1a388:	movw	r3, #19488	; 0x4c20
   1a38c:	movt	r3, #2
   1a390:	str	r3, [sp, #72]	; 0x48
   1a394:	ldr	r3, [sp, #180]	; 0xb4
   1a398:	str	r2, [sp, #80]	; 0x50
   1a39c:	str	r2, [sp, #84]	; 0x54
   1a3a0:	and	r3, r3, #1
   1a3a4:	b	1a338 <__assert_fail@plt+0x8be4>
   1a3a8:	mov	r5, #102	; 0x66
   1a3ac:	mov	r6, #0
   1a3b0:	ldr	r3, [sp, #44]	; 0x2c
   1a3b4:	cmp	r3, #0
   1a3b8:	bne	1b268 <__assert_fail@plt+0x9b14>
   1a3bc:	ldr	r2, [sp, #52]	; 0x34
   1a3c0:	eor	r3, fp, #1
   1a3c4:	ands	r3, r2, r3
   1a3c8:	beq	1a400 <__assert_fail@plt+0x8cac>
   1a3cc:	cmp	sl, r4
   1a3d0:	mov	fp, r3
   1a3d4:	movhi	r2, #39	; 0x27
   1a3d8:	strbhi	r2, [r9, r4]
   1a3dc:	add	r2, r4, #1
   1a3e0:	cmp	sl, r2
   1a3e4:	movhi	r1, #36	; 0x24
   1a3e8:	strbhi	r1, [r9, r2]
   1a3ec:	add	r2, r4, #2
   1a3f0:	add	r4, r4, #3
   1a3f4:	cmp	sl, r2
   1a3f8:	movhi	r1, #39	; 0x27
   1a3fc:	strbhi	r1, [r9, r2]
   1a400:	cmp	sl, r4
   1a404:	add	r7, r7, #1
   1a408:	movhi	r3, #92	; 0x5c
   1a40c:	strbhi	r3, [r9, r4]
   1a410:	add	r4, r4, #1
   1a414:	cmp	r4, sl
   1a418:	ldr	r3, [sp, #32]
   1a41c:	strbcc	r5, [r9, r4]
   1a420:	cmp	r6, #0
   1a424:	add	r4, r4, #1
   1a428:	moveq	r3, #0
   1a42c:	cmn	r8, #1
   1a430:	str	r3, [sp, #32]
   1a434:	bne	19e38 <__assert_fail@plt+0x86e4>
   1a438:	ldr	r3, [sp, #28]
   1a43c:	ldrb	r6, [r3, r7]
   1a440:	adds	r6, r6, #0
   1a444:	movne	r6, #1
   1a448:	cmp	r6, #0
   1a44c:	bne	19e48 <__assert_fail@plt+0x86f4>
   1a450:	mov	r3, r9
   1a454:	mov	r9, fp
   1a458:	mov	fp, r3
   1a45c:	ldr	r3, [sp, #68]	; 0x44
   1a460:	cmp	r4, #0
   1a464:	movne	r3, #0
   1a468:	cmp	r3, #0
   1a46c:	bne	1b660 <__assert_fail@plt+0x9f0c>
   1a470:	ldr	r3, [sp, #44]	; 0x2c
   1a474:	ldr	r2, [sp, #52]	; 0x34
   1a478:	eor	r3, r3, #1
   1a47c:	ands	r2, r3, r2
   1a480:	beq	1b598 <__assert_fail@plt+0x9e44>
   1a484:	ldr	r3, [sp, #80]	; 0x50
   1a488:	cmp	r3, #0
   1a48c:	beq	1b59c <__assert_fail@plt+0x9e48>
   1a490:	ldr	r3, [sp, #32]
   1a494:	cmp	r3, #0
   1a498:	bne	1b610 <__assert_fail@plt+0x9ebc>
   1a49c:	ldr	r3, [sp, #84]	; 0x54
   1a4a0:	adds	r3, r3, #0
   1a4a4:	movne	r3, #1
   1a4a8:	cmp	sl, #0
   1a4ac:	movne	r3, #0
   1a4b0:	cmp	r3, #0
   1a4b4:	ldreq	r2, [sp, #80]	; 0x50
   1a4b8:	beq	1b59c <__assert_fail@plt+0x9e48>
   1a4bc:	ldr	r2, [sp, #84]	; 0x54
   1a4c0:	mov	sl, r2
   1a4c4:	mov	r0, #0
   1a4c8:	mov	r4, #1
   1a4cc:	mov	r1, #39	; 0x27
   1a4d0:	str	r0, [sp, #44]	; 0x2c
   1a4d4:	strb	r1, [fp]
   1a4d8:	str	r0, [sp, #48]	; 0x30
   1a4dc:	str	r4, [sp, #52]	; 0x34
   1a4e0:	str	r4, [sp, #56]	; 0x38
   1a4e4:	str	r4, [sp, #64]	; 0x40
   1a4e8:	str	r0, [sp, #68]	; 0x44
   1a4ec:	str	r3, [sp, #80]	; 0x50
   1a4f0:	str	r2, [sp, #84]	; 0x54
   1a4f4:	str	r0, [sp, #88]	; 0x58
   1a4f8:	b	1a138 <__assert_fail@plt+0x89e4>
   1a4fc:	mov	r5, #98	; 0x62
   1a500:	b	1a3ac <__assert_fail@plt+0x8c58>
   1a504:	mov	r5, #97	; 0x61
   1a508:	b	1a3ac <__assert_fail@plt+0x8c58>
   1a50c:	ldr	r3, [sp, #48]	; 0x30
   1a510:	str	r3, [sp, #40]	; 0x28
   1a514:	mov	r3, #116	; 0x74
   1a518:	ldr	r2, [sp, #68]	; 0x44
   1a51c:	cmp	r2, #0
   1a520:	bne	1a71c <__assert_fail@plt+0x8fc8>
   1a524:	ldr	r2, [sp, #60]	; 0x3c
   1a528:	cmp	r2, #0
   1a52c:	bne	1a678 <__assert_fail@plt+0x8f24>
   1a530:	ldr	r3, [sp, #44]	; 0x2c
   1a534:	mov	r6, #0
   1a538:	cmp	r3, #0
   1a53c:	beq	1a6e8 <__assert_fail@plt+0x8f94>
   1a540:	mov	r3, fp
   1a544:	ldr	r2, [sp, #184]	; 0xb8
   1a548:	cmp	r2, #0
   1a54c:	beq	1a56c <__assert_fail@plt+0x8e18>
   1a550:	ubfx	r1, r5, #5, #8
   1a554:	mov	r0, r2
   1a558:	and	r2, r5, #31
   1a55c:	ldr	r1, [r0, r1, lsl #2]
   1a560:	lsr	r2, r1, r2
   1a564:	tst	r2, #1
   1a568:	bne	1a3b0 <__assert_fail@plt+0x8c5c>
   1a56c:	ldr	r2, [sp, #40]	; 0x28
   1a570:	cmp	r2, #0
   1a574:	addeq	r7, r7, #1
   1a578:	bne	1a3b0 <__assert_fail@plt+0x8c5c>
   1a57c:	cmp	r3, #0
   1a580:	beq	1a414 <__assert_fail@plt+0x8cc0>
   1a584:	cmp	sl, r4
   1a588:	mov	fp, #0
   1a58c:	movhi	r3, #39	; 0x27
   1a590:	strbhi	r3, [r9, r4]
   1a594:	add	r3, r4, #1
   1a598:	add	r4, r4, #2
   1a59c:	cmp	sl, r3
   1a5a0:	movhi	r2, #39	; 0x27
   1a5a4:	strbhi	r2, [r9, r3]
   1a5a8:	b	1a414 <__assert_fail@plt+0x8cc0>
   1a5ac:	ldr	r3, [sp, #48]	; 0x30
   1a5b0:	str	r3, [sp, #40]	; 0x28
   1a5b4:	eor	r3, fp, #1
   1a5b8:	ldr	r2, [sp, #52]	; 0x34
   1a5bc:	ands	r2, r2, r3
   1a5c0:	beq	1b280 <__assert_fail@plt+0x9b2c>
   1a5c4:	cmp	sl, r4
   1a5c8:	movhi	r3, #39	; 0x27
   1a5cc:	strbhi	r3, [r9, r4]
   1a5d0:	add	r3, r4, #1
   1a5d4:	cmp	sl, r3
   1a5d8:	movhi	r1, #36	; 0x24
   1a5dc:	strbhi	r1, [r9, r3]
   1a5e0:	add	r3, r4, #2
   1a5e4:	cmp	sl, r3
   1a5e8:	movhi	r1, #39	; 0x27
   1a5ec:	strbhi	r1, [r9, r3]
   1a5f0:	add	r3, r4, #3
   1a5f4:	cmp	sl, r3
   1a5f8:	bls	1b2cc <__assert_fail@plt+0x9b78>
   1a5fc:	mov	r4, r3
   1a600:	mov	r3, #92	; 0x5c
   1a604:	mov	fp, r2
   1a608:	mov	r2, r4
   1a60c:	strb	r3, [r9, r4]
   1a610:	ldr	r3, [sp, #176]	; 0xb0
   1a614:	add	r4, r4, #1
   1a618:	cmp	r3, #2
   1a61c:	beq	1b334 <__assert_fail@plt+0x9be0>
   1a620:	add	r3, r7, #1
   1a624:	cmp	r3, r8
   1a628:	bcs	1a640 <__assert_fail@plt+0x8eec>
   1a62c:	ldr	r1, [sp, #28]
   1a630:	ldrb	r3, [r1, r3]
   1a634:	sub	r3, r3, #48	; 0x30
   1a638:	cmp	r3, #9
   1a63c:	bls	1b344 <__assert_fail@plt+0x9bf0>
   1a640:	mov	r3, #0
   1a644:	mov	r5, #48	; 0x30
   1a648:	ldr	r6, [sp, #64]	; 0x40
   1a64c:	cmp	r6, #0
   1a650:	beq	1a544 <__assert_fail@plt+0x8df0>
   1a654:	mov	r6, #0
   1a658:	b	1a56c <__assert_fail@plt+0x8e18>
   1a65c:	ldr	r3, [sp, #48]	; 0x30
   1a660:	str	r3, [sp, #40]	; 0x28
   1a664:	ldr	r2, [sp, #60]	; 0x3c
   1a668:	mov	r5, #13
   1a66c:	mov	r3, #114	; 0x72
   1a670:	cmp	r2, #0
   1a674:	beq	1a530 <__assert_fail@plt+0x8ddc>
   1a678:	mov	r5, r3
   1a67c:	b	1a3ac <__assert_fail@plt+0x8c58>
   1a680:	ldr	r3, [sp, #48]	; 0x30
   1a684:	str	r3, [sp, #40]	; 0x28
   1a688:	mov	r3, #118	; 0x76
   1a68c:	b	1a524 <__assert_fail@plt+0x8dd0>
   1a690:	ldr	r3, [sp, #48]	; 0x30
   1a694:	str	r3, [sp, #40]	; 0x28
   1a698:	mov	r5, #10
   1a69c:	mov	r3, #110	; 0x6e
   1a6a0:	b	1a524 <__assert_fail@plt+0x8dd0>
   1a6a4:	ldr	r3, [sp, #48]	; 0x30
   1a6a8:	cmn	r8, #1
   1a6ac:	str	r3, [sp, #40]	; 0x28
   1a6b0:	beq	1aaf8 <__assert_fail@plt+0x93a4>
   1a6b4:	subs	r3, r8, #1
   1a6b8:	movne	r3, #1
   1a6bc:	cmp	r3, #0
   1a6c0:	bne	1a6cc <__assert_fail@plt+0x8f78>
   1a6c4:	cmp	r7, #0
   1a6c8:	beq	1a710 <__assert_fail@plt+0x8fbc>
   1a6cc:	mov	r6, #0
   1a6d0:	ldr	r3, [sp, #64]	; 0x40
   1a6d4:	cmp	r3, #0
   1a6d8:	beq	1a540 <__assert_fail@plt+0x8dec>
   1a6dc:	ldr	r3, [sp, #44]	; 0x2c
   1a6e0:	cmp	r3, #0
   1a6e4:	bne	1a540 <__assert_fail@plt+0x8dec>
   1a6e8:	mov	r3, fp
   1a6ec:	b	1a56c <__assert_fail@plt+0x8e18>
   1a6f0:	ldr	r3, [sp, #48]	; 0x30
   1a6f4:	str	r3, [sp, #40]	; 0x28
   1a6f8:	b	1a6c4 <__assert_fail@plt+0x8f70>
   1a6fc:	ldr	r3, [sp, #48]	; 0x30
   1a700:	str	r3, [sp, #40]	; 0x28
   1a704:	b	1a6cc <__assert_fail@plt+0x8f78>
   1a708:	ldr	r6, [sp, #48]	; 0x30
   1a70c:	str	r6, [sp, #40]	; 0x28
   1a710:	ldr	r3, [sp, #68]	; 0x44
   1a714:	cmp	r3, #0
   1a718:	beq	1a6d0 <__assert_fail@plt+0x8f7c>
   1a71c:	mov	r3, #2
   1a720:	mov	fp, r9
   1a724:	str	r3, [sp, #176]	; 0xb0
   1a728:	ldr	r3, [sp, #60]	; 0x3c
   1a72c:	cmp	r3, #0
   1a730:	ldr	r3, [sp, #176]	; 0xb0
   1a734:	movne	r3, #4
   1a738:	str	r3, [sp, #176]	; 0xb0
   1a73c:	mov	lr, #0
   1a740:	mov	r0, fp
   1a744:	ldr	r2, [sp, #28]
   1a748:	ldr	r3, [sp, #180]	; 0xb4
   1a74c:	ldr	r1, [sp, #188]	; 0xbc
   1a750:	bic	ip, r3, #2
   1a754:	ldr	r3, [sp, #176]	; 0xb0
   1a758:	stm	sp, {r3, ip, lr}
   1a75c:	mov	r3, r8
   1a760:	ldr	ip, [sp, #192]	; 0xc0
   1a764:	str	r1, [sp, #12]
   1a768:	mov	r1, sl
   1a76c:	str	ip, [sp, #16]
   1a770:	bl	19cfc <__assert_fail@plt+0x85a8>
   1a774:	mov	r4, r0
   1a778:	mov	r0, r4
   1a77c:	add	sp, sp, #140	; 0x8c
   1a780:	ldrd	r4, [sp]
   1a784:	ldrd	r6, [sp, #8]
   1a788:	ldrd	r8, [sp, #16]
   1a78c:	ldrd	sl, [sp, #24]
   1a790:	add	sp, sp, #32
   1a794:	pop	{pc}		; (ldr pc, [sp], #4)
   1a798:	ldr	r3, [sp, #48]	; 0x30
   1a79c:	str	r3, [sp, #40]	; 0x28
   1a7a0:	ldr	r3, [sp, #176]	; 0xb0
   1a7a4:	cmp	r3, #2
   1a7a8:	beq	1ab20 <__assert_fail@plt+0x93cc>
   1a7ac:	ldr	r3, [sp, #88]	; 0x58
   1a7b0:	cmp	r3, #0
   1a7b4:	moveq	r5, #92	; 0x5c
   1a7b8:	moveq	r3, r5
   1a7bc:	beq	1a524 <__assert_fail@plt+0x8dd0>
   1a7c0:	add	r7, r7, #1
   1a7c4:	mov	r3, fp
   1a7c8:	mov	r6, #0
   1a7cc:	mov	r5, #92	; 0x5c
   1a7d0:	b	1a57c <__assert_fail@plt+0x8e28>
   1a7d4:	ldr	r3, [sp, #64]	; 0x40
   1a7d8:	cmp	r3, #0
   1a7dc:	bne	1b654 <__assert_fail@plt+0x9f00>
   1a7e0:	ldr	r2, [sp, #48]	; 0x30
   1a7e4:	mov	r3, fp
   1a7e8:	mov	r6, r2
   1a7ec:	str	r2, [sp, #40]	; 0x28
   1a7f0:	b	1a544 <__assert_fail@plt+0x8df0>
   1a7f4:	ldr	r3, [sp, #176]	; 0xb0
   1a7f8:	cmp	r3, #2
   1a7fc:	beq	1b590 <__assert_fail@plt+0x9e3c>
   1a800:	cmp	r3, #5
   1a804:	ldr	r3, [sp, #48]	; 0x30
   1a808:	str	r3, [sp, #40]	; 0x28
   1a80c:	bne	1a838 <__assert_fail@plt+0x90e4>
   1a810:	ldr	r3, [sp, #96]	; 0x60
   1a814:	cmp	r3, #0
   1a818:	beq	1b294 <__assert_fail@plt+0x9b40>
   1a81c:	add	r3, r7, #2
   1a820:	cmp	r3, r8
   1a824:	bcs	1a838 <__assert_fail@plt+0x90e4>
   1a828:	ldr	r2, [sp, #36]	; 0x24
   1a82c:	ldrb	r5, [r2, #1]
   1a830:	cmp	r5, #63	; 0x3f
   1a834:	beq	1b37c <__assert_fail@plt+0x9c28>
   1a838:	mov	r6, #0
   1a83c:	mov	r5, #63	; 0x3f
   1a840:	b	1a6d0 <__assert_fail@plt+0x8f7c>
   1a844:	ldr	r3, [sp, #176]	; 0xb0
   1a848:	cmp	r3, #2
   1a84c:	ldr	r3, [sp, #48]	; 0x30
   1a850:	beq	1b038 <__assert_fail@plt+0x98e4>
   1a854:	mov	r5, #39	; 0x27
   1a858:	str	r3, [sp, #40]	; 0x28
   1a85c:	str	r6, [sp, #80]	; 0x50
   1a860:	b	1a6d0 <__assert_fail@plt+0x8f7c>
   1a864:	ldr	r3, [sp, #180]	; 0xb4
   1a868:	cmp	r4, #0
   1a86c:	and	r3, r3, #1
   1a870:	str	r3, [sp, #92]	; 0x5c
   1a874:	ldr	r3, [sp, #180]	; 0xb4
   1a878:	and	r3, r3, #4
   1a87c:	str	r3, [sp, #96]	; 0x60
   1a880:	bne	1b6a0 <__assert_fail@plt+0x9f4c>
   1a884:	str	r4, [sp, #60]	; 0x3c
   1a888:	cmp	sl, #0
   1a88c:	bne	1b684 <__assert_fail@plt+0x9f30>
   1a890:	mov	r3, #1
   1a894:	movw	r2, #19488	; 0x4c20
   1a898:	movt	r2, #2
   1a89c:	mov	r4, r3
   1a8a0:	mov	r3, #2
   1a8a4:	mov	r9, sl
   1a8a8:	str	r4, [sp, #32]
   1a8ac:	str	sl, [sp, #44]	; 0x2c
   1a8b0:	str	sl, [sp, #48]	; 0x30
   1a8b4:	str	r4, [sp, #52]	; 0x34
   1a8b8:	str	r4, [sp, #56]	; 0x38
   1a8bc:	str	r4, [sp, #64]	; 0x40
   1a8c0:	str	sl, [sp, #68]	; 0x44
   1a8c4:	str	r2, [sp, #72]	; 0x48
   1a8c8:	str	sl, [sp, #80]	; 0x50
   1a8cc:	str	sl, [sp, #84]	; 0x54
   1a8d0:	str	sl, [sp, #88]	; 0x58
   1a8d4:	str	r3, [sp, #176]	; 0xb0
   1a8d8:	b	19e20 <__assert_fail@plt+0x86cc>
   1a8dc:	ldrb	r5, [r0, r7]
   1a8e0:	cmp	r5, #126	; 0x7e
   1a8e4:	ldrls	pc, [pc, r5, lsl #2]
   1a8e8:	b	1ac4c <__assert_fail@plt+0x94f8>
   1a8ec:	andeq	sl, r1, r8, lsl ip
   1a8f0:	andeq	sl, r1, ip, asr #24
   1a8f4:	andeq	sl, r1, ip, asr #24
   1a8f8:	andeq	sl, r1, ip, asr #24
   1a8fc:	andeq	sl, r1, ip, asr #24
   1a900:	andeq	sl, r1, ip, asr #24
   1a904:	andeq	sl, r1, ip, asr #24
   1a908:	andeq	sl, r1, r8, lsl #24
   1a90c:	strdeq	sl, [r1], -r8
   1a910:	andeq	sl, r1, ip, ror fp
   1a914:	andeq	sl, r1, r8, ror #23
   1a918:	andeq	sl, r1, ip, asr fp
   1a91c:	andeq	sl, r1, ip, lsr ip
   1a920:	andeq	sl, r1, r8, asr #23
   1a924:	andeq	sl, r1, ip, asr #24
   1a928:	andeq	sl, r1, ip, asr #24
   1a92c:	andeq	sl, r1, ip, asr #24
   1a930:	andeq	sl, r1, ip, asr #24
   1a934:	andeq	sl, r1, ip, asr #24
   1a938:	andeq	sl, r1, ip, asr #24
   1a93c:	andeq	sl, r1, ip, asr #24
   1a940:	andeq	sl, r1, ip, asr #24
   1a944:	andeq	sl, r1, ip, asr #24
   1a948:	andeq	sl, r1, ip, asr #24
   1a94c:	andeq	sl, r1, ip, asr #24
   1a950:	andeq	sl, r1, ip, asr #24
   1a954:	andeq	sl, r1, ip, asr #24
   1a958:	andeq	sl, r1, ip, asr #24
   1a95c:	andeq	sl, r1, ip, asr #24
   1a960:	andeq	sl, r1, ip, asr #24
   1a964:	andeq	sl, r1, ip, asr #24
   1a968:	andeq	sl, r1, ip, asr #24
   1a96c:	andeq	sl, r1, r0, ror fp
   1a970:	ldrdeq	sl, [r1], -r8
   1a974:	ldrdeq	sl, [r1], -r8
   1a978:	andeq	sl, r1, r0, asr fp
   1a97c:	ldrdeq	sl, [r1], -r8
   1a980:	andeq	sl, r1, r4, asr #22
   1a984:	ldrdeq	sl, [r1], -r8
   1a988:			; <UNDEFINED> instruction: 0x0001abb4
   1a98c:	ldrdeq	sl, [r1], -r8
   1a990:	ldrdeq	sl, [r1], -r8
   1a994:	ldrdeq	sl, [r1], -r8
   1a998:	andeq	sl, r1, r4, asr #22
   1a99c:	andeq	sl, r1, r4, asr #22
   1a9a0:	andeq	sl, r1, r4, asr #22
   1a9a4:	andeq	sl, r1, r4, asr #22
   1a9a8:	andeq	sl, r1, r4, asr #22
   1a9ac:	andeq	sl, r1, r4, asr #22
   1a9b0:	andeq	sl, r1, r4, asr #22
   1a9b4:	andeq	sl, r1, r4, asr #22
   1a9b8:	andeq	sl, r1, r4, asr #22
   1a9bc:	andeq	sl, r1, r4, asr #22
   1a9c0:	andeq	sl, r1, r4, asr #22
   1a9c4:	andeq	sl, r1, r4, asr #22
   1a9c8:	andeq	sl, r1, r4, asr #22
   1a9cc:	andeq	sl, r1, r4, asr #22
   1a9d0:	andeq	sl, r1, r4, asr #22
   1a9d4:	andeq	sl, r1, r4, asr #22
   1a9d8:	ldrdeq	sl, [r1], -r8
   1a9dc:	ldrdeq	sl, [r1], -r8
   1a9e0:	ldrdeq	sl, [r1], -r8
   1a9e4:	ldrdeq	sl, [r1], -r8
   1a9e8:	andeq	sl, r1, ip, lsl #23
   1a9ec:	andeq	sl, r1, ip, asr #24
   1a9f0:	andeq	sl, r1, r4, asr #22
   1a9f4:	andeq	sl, r1, r4, asr #22
   1a9f8:	andeq	sl, r1, r4, asr #22
   1a9fc:	andeq	sl, r1, r4, asr #22
   1aa00:	andeq	sl, r1, r4, asr #22
   1aa04:	andeq	sl, r1, r4, asr #22
   1aa08:	andeq	sl, r1, r4, asr #22
   1aa0c:	andeq	sl, r1, r4, asr #22
   1aa10:	andeq	sl, r1, r4, asr #22
   1aa14:	andeq	sl, r1, r4, asr #22
   1aa18:	andeq	sl, r1, r4, asr #22
   1aa1c:	andeq	sl, r1, r4, asr #22
   1aa20:	andeq	sl, r1, r4, asr #22
   1aa24:	andeq	sl, r1, r4, asr #22
   1aa28:	andeq	sl, r1, r4, asr #22
   1aa2c:	andeq	sl, r1, r4, asr #22
   1aa30:	andeq	sl, r1, r4, asr #22
   1aa34:	andeq	sl, r1, r4, asr #22
   1aa38:	andeq	sl, r1, r4, asr #22
   1aa3c:	andeq	sl, r1, r4, asr #22
   1aa40:	andeq	sl, r1, r4, asr #22
   1aa44:	andeq	sl, r1, r4, asr #22
   1aa48:	andeq	sl, r1, r4, asr #22
   1aa4c:	andeq	sl, r1, r4, asr #22
   1aa50:	andeq	sl, r1, r4, asr #22
   1aa54:	andeq	sl, r1, r4, asr #22
   1aa58:	ldrdeq	sl, [r1], -r8
   1aa5c:	andeq	sl, r1, ip, lsl #22
   1aa60:	andeq	sl, r1, r4, asr #22
   1aa64:	ldrdeq	sl, [r1], -r8
   1aa68:	andeq	sl, r1, r4, asr #22
   1aa6c:	ldrdeq	sl, [r1], -r8
   1aa70:	andeq	sl, r1, r4, asr #22
   1aa74:	andeq	sl, r1, r4, asr #22
   1aa78:	andeq	sl, r1, r4, asr #22
   1aa7c:	andeq	sl, r1, r4, asr #22
   1aa80:	andeq	sl, r1, r4, asr #22
   1aa84:	andeq	sl, r1, r4, asr #22
   1aa88:	andeq	sl, r1, r4, asr #22
   1aa8c:	andeq	sl, r1, r4, asr #22
   1aa90:	andeq	sl, r1, r4, asr #22
   1aa94:	andeq	sl, r1, r4, asr #22
   1aa98:	andeq	sl, r1, r4, asr #22
   1aa9c:	andeq	sl, r1, r4, asr #22
   1aaa0:	andeq	sl, r1, r4, asr #22
   1aaa4:	andeq	sl, r1, r4, asr #22
   1aaa8:	andeq	sl, r1, r4, asr #22
   1aaac:	andeq	sl, r1, r4, asr #22
   1aab0:	andeq	sl, r1, r4, asr #22
   1aab4:	andeq	sl, r1, r4, asr #22
   1aab8:	andeq	sl, r1, r4, asr #22
   1aabc:	andeq	sl, r1, r4, asr #22
   1aac0:	andeq	sl, r1, r4, asr #22
   1aac4:	andeq	sl, r1, r4, asr #22
   1aac8:	andeq	sl, r1, r4, asr #22
   1aacc:	andeq	sl, r1, r4, asr #22
   1aad0:	andeq	sl, r1, r4, asr #22
   1aad4:	andeq	sl, r1, r4, asr #22
   1aad8:	andeq	sl, r1, r8, ror #21
   1aadc:	ldrdeq	sl, [r1], -r8
   1aae0:	andeq	sl, r1, r8, ror #21
   1aae4:	andeq	sl, r1, r0, asr fp
   1aae8:	mov	r3, #0
   1aaec:	cmn	r8, #1
   1aaf0:	str	r3, [sp, #40]	; 0x28
   1aaf4:	bne	1a6b4 <__assert_fail@plt+0x8f60>
   1aaf8:	ldr	r3, [sp, #28]
   1aafc:	ldrb	r3, [r3, #1]
   1ab00:	adds	r3, r3, #0
   1ab04:	movne	r3, #1
   1ab08:	b	1a6bc <__assert_fail@plt+0x8f68>
   1ab0c:	mov	r3, #0
   1ab10:	str	r3, [sp, #40]	; 0x28
   1ab14:	ldr	r3, [sp, #176]	; 0xb0
   1ab18:	cmp	r3, #2
   1ab1c:	bne	1a7ac <__assert_fail@plt+0x9058>
   1ab20:	ldr	r3, [sp, #44]	; 0x2c
   1ab24:	cmp	r3, #0
   1ab28:	bne	1b468 <__assert_fail@plt+0x9d14>
   1ab2c:	mov	r6, r3
   1ab30:	add	r7, r7, #1
   1ab34:	mov	r3, fp
   1ab38:	mov	r5, #92	; 0x5c
   1ab3c:	b	1a57c <__assert_fail@plt+0x8e28>
   1ab40:	ldr	r6, [sp, #48]	; 0x30
   1ab44:	mov	r3, #0
   1ab48:	str	r3, [sp, #40]	; 0x28
   1ab4c:	b	1a6d0 <__assert_fail@plt+0x8f7c>
   1ab50:	mov	r3, #0
   1ab54:	str	r3, [sp, #40]	; 0x28
   1ab58:	b	1a6c4 <__assert_fail@plt+0x8f70>
   1ab5c:	mov	r3, #0
   1ab60:	str	r3, [sp, #40]	; 0x28
   1ab64:	mov	r3, #118	; 0x76
   1ab68:	b	1a524 <__assert_fail@plt+0x8dd0>
   1ab6c:	ldr	r6, [sp, #48]	; 0x30
   1ab70:	mov	r3, #0
   1ab74:	str	r3, [sp, #40]	; 0x28
   1ab78:	b	1a710 <__assert_fail@plt+0x8fbc>
   1ab7c:	mov	r3, #0
   1ab80:	str	r3, [sp, #40]	; 0x28
   1ab84:	mov	r3, #116	; 0x74
   1ab88:	b	1a518 <__assert_fail@plt+0x8dc4>
   1ab8c:	ldr	r3, [sp, #176]	; 0xb0
   1ab90:	cmp	r3, #2
   1ab94:	beq	1b0a4 <__assert_fail@plt+0x9950>
   1ab98:	cmp	r3, #5
   1ab9c:	mov	r3, #0
   1aba0:	str	r3, [sp, #40]	; 0x28
   1aba4:	beq	1a810 <__assert_fail@plt+0x90bc>
   1aba8:	mov	r6, #0
   1abac:	mov	r5, #63	; 0x3f
   1abb0:	b	1a6d0 <__assert_fail@plt+0x8f7c>
   1abb4:	ldr	r3, [sp, #176]	; 0xb0
   1abb8:	cmp	r3, #2
   1abbc:	beq	1b02c <__assert_fail@plt+0x98d8>
   1abc0:	mov	r3, #0
   1abc4:	b	1a854 <__assert_fail@plt+0x9100>
   1abc8:	mov	r3, #0
   1abcc:	str	r3, [sp, #40]	; 0x28
   1abd0:	mov	r3, #114	; 0x72
   1abd4:	b	1a518 <__assert_fail@plt+0x8dc4>
   1abd8:	mov	r3, #0
   1abdc:	mov	r6, r3
   1abe0:	str	r3, [sp, #40]	; 0x28
   1abe4:	b	1a710 <__assert_fail@plt+0x8fbc>
   1abe8:	mov	r3, #0
   1abec:	str	r3, [sp, #40]	; 0x28
   1abf0:	mov	r3, #110	; 0x6e
   1abf4:	b	1a518 <__assert_fail@plt+0x8dc4>
   1abf8:	mov	r3, #0
   1abfc:	str	r3, [sp, #40]	; 0x28
   1ac00:	mov	r3, #98	; 0x62
   1ac04:	b	1a524 <__assert_fail@plt+0x8dd0>
   1ac08:	mov	r3, #0
   1ac0c:	str	r3, [sp, #40]	; 0x28
   1ac10:	mov	r3, #97	; 0x61
   1ac14:	b	1a524 <__assert_fail@plt+0x8dd0>
   1ac18:	ldr	r3, [sp, #60]	; 0x3c
   1ac1c:	cmp	r3, #0
   1ac20:	bne	1b010 <__assert_fail@plt+0x98bc>
   1ac24:	ldr	r3, [sp, #92]	; 0x5c
   1ac28:	cmp	r3, #0
   1ac2c:	addne	r7, r7, #1
   1ac30:	bne	19e30 <__assert_fail@plt+0x86dc>
   1ac34:	str	r3, [sp, #40]	; 0x28
   1ac38:	b	1a530 <__assert_fail@plt+0x8ddc>
   1ac3c:	mov	r3, #0
   1ac40:	str	r3, [sp, #40]	; 0x28
   1ac44:	mov	r3, #102	; 0x66
   1ac48:	b	1a524 <__assert_fail@plt+0x8dd0>
   1ac4c:	mov	r3, #0
   1ac50:	str	r3, [sp, #40]	; 0x28
   1ac54:	ldr	r3, [sp, #76]	; 0x4c
   1ac58:	cmp	r3, #1
   1ac5c:	bne	1b0c4 <__assert_fail@plt+0x9970>
   1ac60:	bl	1158c <__ctype_b_loc@plt>
   1ac64:	ldr	r2, [r0]
   1ac68:	sxth	r3, r5
   1ac6c:	lsl	r3, r3, #1
   1ac70:	ldr	r1, [sp, #76]	; 0x4c
   1ac74:	ldrh	r3, [r2, r3]
   1ac78:	mov	r0, r1
   1ac7c:	and	r3, r3, #16384	; 0x4000
   1ac80:	cmp	r3, #0
   1ac84:	ldr	r3, [sp, #60]	; 0x3c
   1ac88:	movne	r6, #1
   1ac8c:	moveq	r6, #0
   1ac90:	movne	r2, #0
   1ac94:	andeq	r2, r3, #1
   1ac98:	cmp	r2, #0
   1ac9c:	beq	1a6d0 <__assert_fail@plt+0x8f7c>
   1aca0:	ldr	r2, [sp, #60]	; 0x3c
   1aca4:	mov	r6, #0
   1aca8:	add	r1, r0, r7
   1acac:	mov	ip, #39	; 0x27
   1acb0:	str	r6, [sp, #100]	; 0x64
   1acb4:	mov	r0, #0
   1acb8:	ldr	lr, [sp, #36]	; 0x24
   1acbc:	str	r8, [sp, #36]	; 0x24
   1acc0:	ldr	r6, [sp, #40]	; 0x28
   1acc4:	ldr	r8, [sp, #44]	; 0x2c
   1acc8:	b	1ad78 <__assert_fail@plt+0x9624>
   1accc:	cmp	r8, #0
   1acd0:	bne	1b2ac <__assert_fail@plt+0x9b58>
   1acd4:	ldr	r0, [sp, #52]	; 0x34
   1acd8:	eor	r3, fp, #1
   1acdc:	ands	r3, r0, r3
   1ace0:	beq	1ad10 <__assert_fail@plt+0x95bc>
   1ace4:	cmp	sl, r4
   1ace8:	add	r0, r4, #1
   1acec:	strbhi	ip, [r9, r4]
   1acf0:	cmp	sl, r0
   1acf4:	movhi	fp, #36	; 0x24
   1acf8:	strbhi	fp, [r9, r0]
   1acfc:	add	r0, r4, #2
   1ad00:	mov	fp, r3
   1ad04:	cmp	sl, r0
   1ad08:	add	r4, r4, #3
   1ad0c:	strbhi	ip, [r9, r0]
   1ad10:	cmp	sl, r4
   1ad14:	movhi	r3, #92	; 0x5c
   1ad18:	strbhi	r3, [r9, r4]
   1ad1c:	add	r3, r4, #1
   1ad20:	cmp	sl, r3
   1ad24:	bls	1ad34 <__assert_fail@plt+0x95e0>
   1ad28:	lsr	r0, r5, #6
   1ad2c:	add	r0, r0, #48	; 0x30
   1ad30:	strb	r0, [r9, r3]
   1ad34:	add	r3, r4, #2
   1ad38:	cmp	sl, r3
   1ad3c:	bls	1ad4c <__assert_fail@plt+0x95f8>
   1ad40:	ubfx	r0, r5, #3, #3
   1ad44:	add	r0, r0, #48	; 0x30
   1ad48:	strb	r0, [r9, r3]
   1ad4c:	add	r7, r7, #1
   1ad50:	and	r5, r5, #7
   1ad54:	cmp	r1, r7
   1ad58:	add	r5, r5, #48	; 0x30
   1ad5c:	add	r4, r4, #3
   1ad60:	bls	1b2c0 <__assert_fail@plt+0x9b6c>
   1ad64:	mov	r0, r2
   1ad68:	cmp	sl, r4
   1ad6c:	strbhi	r5, [r9, r4]
   1ad70:	add	r4, r4, #1
   1ad74:	ldrb	r5, [lr, #1]!
   1ad78:	cmp	r2, #0
   1ad7c:	bne	1accc <__assert_fail@plt+0x9578>
   1ad80:	eor	r3, r0, #1
   1ad84:	cmp	r6, #0
   1ad88:	and	r3, r3, fp
   1ad8c:	uxtb	r3, r3
   1ad90:	beq	1ada4 <__assert_fail@plt+0x9650>
   1ad94:	cmp	sl, r4
   1ad98:	movhi	r6, #92	; 0x5c
   1ad9c:	strbhi	r6, [r9, r4]
   1ada0:	add	r4, r4, #1
   1ada4:	add	r7, r7, #1
   1ada8:	cmp	r7, r1
   1adac:	bcs	1b2a0 <__assert_fail@plt+0x9b4c>
   1adb0:	cmp	r3, #0
   1adb4:	beq	1b2e4 <__assert_fail@plt+0x9b90>
   1adb8:	cmp	sl, r4
   1adbc:	add	r3, r4, #1
   1adc0:	mov	r6, #0
   1adc4:	strbhi	ip, [r9, r4]
   1adc8:	cmp	sl, r3
   1adcc:	add	r4, r4, #2
   1add0:	mov	fp, r6
   1add4:	strbhi	ip, [r9, r3]
   1add8:	b	1ad68 <__assert_fail@plt+0x9614>
   1addc:	ldr	r3, [sp, #36]	; 0x24
   1ade0:	ldrb	r5, [r3]
   1ade4:	cmp	r5, #126	; 0x7e
   1ade8:	ldrls	pc, [pc, r5, lsl #2]
   1adec:	b	1ac4c <__assert_fail@plt+0x94f8>
   1adf0:	andeq	fp, r1, r0, lsl r0
   1adf4:	andeq	sl, r1, ip, asr #24
   1adf8:	andeq	sl, r1, ip, asr #24
   1adfc:	andeq	sl, r1, ip, asr #24
   1ae00:	andeq	sl, r1, ip, asr #24
   1ae04:	andeq	sl, r1, ip, asr #24
   1ae08:	andeq	sl, r1, ip, asr #24
   1ae0c:	andeq	sl, r1, r4, lsl #10
   1ae10:	strdeq	sl, [r1], -ip
   1ae14:	andeq	sl, r1, ip, ror fp
   1ae18:	andeq	fp, r1, r4
   1ae1c:	andeq	sl, r1, ip, asr fp
   1ae20:	andeq	sl, r1, r8, lsr #7
   1ae24:	strdeq	sl, [r1], -r8
   1ae28:	andeq	sl, r1, ip, asr #24
   1ae2c:	andeq	sl, r1, ip, asr #24
   1ae30:	andeq	sl, r1, ip, asr #24
   1ae34:	andeq	sl, r1, ip, asr #24
   1ae38:	andeq	sl, r1, ip, asr #24
   1ae3c:	andeq	sl, r1, ip, asr #24
   1ae40:	andeq	sl, r1, ip, asr #24
   1ae44:	andeq	sl, r1, ip, asr #24
   1ae48:	andeq	sl, r1, ip, asr #24
   1ae4c:	andeq	sl, r1, ip, asr #24
   1ae50:	andeq	sl, r1, ip, asr #24
   1ae54:	andeq	sl, r1, ip, asr #24
   1ae58:	andeq	sl, r1, ip, asr #24
   1ae5c:	andeq	sl, r1, ip, asr #24
   1ae60:	andeq	sl, r1, ip, asr #24
   1ae64:	andeq	sl, r1, ip, asr #24
   1ae68:	andeq	sl, r1, ip, asr #24
   1ae6c:	andeq	sl, r1, ip, asr #24
   1ae70:	andeq	sl, r1, ip, ror #22
   1ae74:	andeq	sl, r1, ip, ror #31
   1ae78:	andeq	sl, r1, ip, ror #31
   1ae7c:	andeq	sl, r1, r0, asr fp
   1ae80:	andeq	sl, r1, ip, ror #31
   1ae84:	andeq	sl, r1, r0, asr #22
   1ae88:	andeq	sl, r1, ip, ror #31
   1ae8c:			; <UNDEFINED> instruction: 0x0001abb4
   1ae90:	andeq	sl, r1, ip, ror #31
   1ae94:	andeq	sl, r1, ip, ror #31
   1ae98:	andeq	sl, r1, ip, ror #31
   1ae9c:	andeq	sl, r1, r0, asr #22
   1aea0:	andeq	sl, r1, r0, asr #22
   1aea4:	andeq	sl, r1, r0, asr #22
   1aea8:	andeq	sl, r1, r0, asr #22
   1aeac:	andeq	sl, r1, r0, asr #22
   1aeb0:	andeq	sl, r1, r0, asr #22
   1aeb4:	andeq	sl, r1, r0, asr #22
   1aeb8:	andeq	sl, r1, r0, asr #22
   1aebc:	andeq	sl, r1, r0, asr #22
   1aec0:	andeq	sl, r1, r0, asr #22
   1aec4:	andeq	sl, r1, r0, asr #22
   1aec8:	andeq	sl, r1, r0, asr #22
   1aecc:	andeq	sl, r1, r0, asr #22
   1aed0:	andeq	sl, r1, r0, asr #22
   1aed4:	andeq	sl, r1, r0, asr #22
   1aed8:	andeq	sl, r1, r0, asr #22
   1aedc:	andeq	sl, r1, ip, ror #31
   1aee0:	andeq	sl, r1, ip, ror #31
   1aee4:	andeq	sl, r1, ip, ror #31
   1aee8:	andeq	sl, r1, ip, ror #31
   1aeec:	andeq	sl, r1, ip, lsl #23
   1aef0:	andeq	sl, r1, ip, asr #24
   1aef4:	andeq	sl, r1, r0, asr #22
   1aef8:	andeq	sl, r1, r0, asr #22
   1aefc:	andeq	sl, r1, r0, asr #22
   1af00:	andeq	sl, r1, r0, asr #22
   1af04:	andeq	sl, r1, r0, asr #22
   1af08:	andeq	sl, r1, r0, asr #22
   1af0c:	andeq	sl, r1, r0, asr #22
   1af10:	andeq	sl, r1, r0, asr #22
   1af14:	andeq	sl, r1, r0, asr #22
   1af18:	andeq	sl, r1, r0, asr #22
   1af1c:	andeq	sl, r1, r0, asr #22
   1af20:	andeq	sl, r1, r0, asr #22
   1af24:	andeq	sl, r1, r0, asr #22
   1af28:	andeq	sl, r1, r0, asr #22
   1af2c:	andeq	sl, r1, r0, asr #22
   1af30:	andeq	sl, r1, r0, asr #22
   1af34:	andeq	sl, r1, r0, asr #22
   1af38:	andeq	sl, r1, r0, asr #22
   1af3c:	andeq	sl, r1, r0, asr #22
   1af40:	andeq	sl, r1, r0, asr #22
   1af44:	andeq	sl, r1, r0, asr #22
   1af48:	andeq	sl, r1, r0, asr #22
   1af4c:	andeq	sl, r1, r0, asr #22
   1af50:	andeq	sl, r1, r0, asr #22
   1af54:	andeq	sl, r1, r0, asr #22
   1af58:	andeq	sl, r1, r0, asr #22
   1af5c:	andeq	sl, r1, ip, ror #31
   1af60:	andeq	sl, r1, ip, lsl #22
   1af64:	andeq	sl, r1, r0, asr #22
   1af68:	andeq	sl, r1, ip, ror #31
   1af6c:	andeq	sl, r1, r0, asr #22
   1af70:	andeq	sl, r1, ip, ror #31
   1af74:	andeq	sl, r1, r0, asr #22
   1af78:	andeq	sl, r1, r0, asr #22
   1af7c:	andeq	sl, r1, r0, asr #22
   1af80:	andeq	sl, r1, r0, asr #22
   1af84:	andeq	sl, r1, r0, asr #22
   1af88:	andeq	sl, r1, r0, asr #22
   1af8c:	andeq	sl, r1, r0, asr #22
   1af90:	andeq	sl, r1, r0, asr #22
   1af94:	andeq	sl, r1, r0, asr #22
   1af98:	andeq	sl, r1, r0, asr #22
   1af9c:	andeq	sl, r1, r0, asr #22
   1afa0:	andeq	sl, r1, r0, asr #22
   1afa4:	andeq	sl, r1, r0, asr #22
   1afa8:	andeq	sl, r1, r0, asr #22
   1afac:	andeq	sl, r1, r0, asr #22
   1afb0:	andeq	sl, r1, r0, asr #22
   1afb4:	andeq	sl, r1, r0, asr #22
   1afb8:	andeq	sl, r1, r0, asr #22
   1afbc:	andeq	sl, r1, r0, asr #22
   1afc0:	andeq	sl, r1, r0, asr #22
   1afc4:	andeq	sl, r1, r0, asr #22
   1afc8:	andeq	sl, r1, r0, asr #22
   1afcc:	andeq	sl, r1, r0, asr #22
   1afd0:	andeq	sl, r1, r0, asr #22
   1afd4:	andeq	sl, r1, r0, asr #22
   1afd8:	andeq	sl, r1, r0, asr #22
   1afdc:	andeq	sl, r1, r8, ror #21
   1afe0:	andeq	sl, r1, ip, ror #31
   1afe4:	andeq	sl, r1, r8, ror #21
   1afe8:	andeq	sl, r1, r0, asr fp
   1afec:	mov	r3, #0
   1aff0:	str	r3, [sp, #40]	; 0x28
   1aff4:	b	1a6cc <__assert_fail@plt+0x8f78>
   1aff8:	mov	r3, #0
   1affc:	str	r3, [sp, #40]	; 0x28
   1b000:	b	1a664 <__assert_fail@plt+0x8f10>
   1b004:	mov	r3, #0
   1b008:	str	r3, [sp, #40]	; 0x28
   1b00c:	b	1a698 <__assert_fail@plt+0x8f44>
   1b010:	ldr	r3, [sp, #44]	; 0x2c
   1b014:	cmp	r3, #0
   1b018:	beq	1a5b0 <__assert_fail@plt+0x8e5c>
   1b01c:	ldr	r3, [sp, #52]	; 0x34
   1b020:	mov	fp, r9
   1b024:	str	r3, [sp, #60]	; 0x3c
   1b028:	b	1a728 <__assert_fail@plt+0x8fd4>
   1b02c:	ldr	r3, [sp, #44]	; 0x2c
   1b030:	cmp	r3, #0
   1b034:	bne	1b468 <__assert_fail@plt+0x9d14>
   1b038:	str	r3, [sp, #40]	; 0x28
   1b03c:	cmp	sl, #0
   1b040:	ldr	r3, [sp, #84]	; 0x54
   1b044:	clz	r3, r3
   1b048:	lsr	r3, r3, #5
   1b04c:	moveq	r3, #0
   1b050:	cmp	r3, #0
   1b054:	strne	sl, [sp, #84]	; 0x54
   1b058:	movne	sl, #0
   1b05c:	bne	1b08c <__assert_fail@plt+0x9938>
   1b060:	cmp	sl, r4
   1b064:	movhi	r3, #39	; 0x27
   1b068:	strbhi	r3, [r9, r4]
   1b06c:	add	r3, r4, #1
   1b070:	cmp	sl, r3
   1b074:	movhi	r2, #92	; 0x5c
   1b078:	strbhi	r2, [r9, r3]
   1b07c:	add	r3, r4, #2
   1b080:	cmp	sl, r3
   1b084:	movhi	r2, #39	; 0x27
   1b088:	strbhi	r2, [r9, r3]
   1b08c:	mov	r3, #0
   1b090:	add	r4, r4, #3
   1b094:	str	r6, [sp, #80]	; 0x50
   1b098:	mov	fp, r3
   1b09c:	mov	r5, #39	; 0x27
   1b0a0:	b	1a56c <__assert_fail@plt+0x8e18>
   1b0a4:	ldr	r3, [sp, #44]	; 0x2c
   1b0a8:	cmp	r3, #0
   1b0ac:	bne	1b468 <__assert_fail@plt+0x9d14>
   1b0b0:	mov	r6, #0
   1b0b4:	mov	r5, #63	; 0x3f
   1b0b8:	str	r3, [sp, #40]	; 0x28
   1b0bc:	mov	r3, fp
   1b0c0:	b	1a56c <__assert_fail@plt+0x8e18>
   1b0c4:	mov	r2, #0
   1b0c8:	mov	r3, #0
   1b0cc:	cmn	r8, #1
   1b0d0:	strd	r2, [sp, #128]	; 0x80
   1b0d4:	bne	1b0e4 <__assert_fail@plt+0x9990>
   1b0d8:	ldr	r0, [sp, #28]
   1b0dc:	bl	115b0 <strlen@plt>
   1b0e0:	mov	r8, r0
   1b0e4:	str	r9, [sp, #100]	; 0x64
   1b0e8:	mov	r3, #0
   1b0ec:	strd	sl, [sp, #104]	; 0x68
   1b0f0:	ldr	sl, [sp, #28]
   1b0f4:	str	r5, [sp, #112]	; 0x70
   1b0f8:	mov	r5, r3
   1b0fc:	ldr	r9, [sp, #68]	; 0x44
   1b100:	str	r4, [sp, #116]	; 0x74
   1b104:	add	r4, r7, r5
   1b108:	add	r3, sp, #128	; 0x80
   1b10c:	add	fp, sl, r4
   1b110:	sub	r2, r8, r4
   1b114:	mov	r1, fp
   1b118:	add	r0, sp, #124	; 0x7c
   1b11c:	bl	1f208 <__assert_fail@plt+0xdab4>
   1b120:	subs	r1, r0, #0
   1b124:	beq	1b164 <__assert_fail@plt+0x9a10>
   1b128:	cmn	r1, #1
   1b12c:	beq	1b4bc <__assert_fail@plt+0x9d68>
   1b130:	cmn	r1, #2
   1b134:	beq	1b4dc <__assert_fail@plt+0x9d88>
   1b138:	cmp	r9, #0
   1b13c:	bne	1b194 <__assert_fail@plt+0x9a40>
   1b140:	ldr	r0, [sp, #124]	; 0x7c
   1b144:	add	r5, r5, r1
   1b148:	bl	114cc <iswprint@plt>
   1b14c:	cmp	r0, #0
   1b150:	add	r0, sp, #128	; 0x80
   1b154:	moveq	r6, #0
   1b158:	bl	1140c <mbsinit@plt>
   1b15c:	cmp	r0, #0
   1b160:	beq	1b104 <__assert_fail@plt+0x99b0>
   1b164:	ldr	r3, [sp, #60]	; 0x3c
   1b168:	add	r9, sp, #100	; 0x64
   1b16c:	mov	r0, r5
   1b170:	ldm	r9, {r9, sl, fp}
   1b174:	eor	r2, r6, #1
   1b178:	ldr	r5, [sp, #112]	; 0x70
   1b17c:	and	r2, r2, r3
   1b180:	uxtb	r2, r2
   1b184:	ldr	r4, [sp, #116]	; 0x74
   1b188:	cmp	r0, #1
   1b18c:	bhi	1aca8 <__assert_fail@plt+0x9554>
   1b190:	b	1ac98 <__assert_fail@plt+0x9544>
   1b194:	cmp	r1, #1
   1b198:	beq	1b140 <__assert_fail@plt+0x99ec>
   1b19c:	add	r2, r4, #1
   1b1a0:	add	r3, sl, r1
   1b1a4:	add	r2, sl, r2
   1b1a8:	add	r4, r3, r4
   1b1ac:	ldrb	r3, [r2], #1
   1b1b0:	sub	r3, r3, #91	; 0x5b
   1b1b4:	cmp	r3, #33	; 0x21
   1b1b8:	ldrls	pc, [pc, r3, lsl #2]
   1b1bc:	b	1b248 <__assert_fail@plt+0x9af4>
   1b1c0:	andeq	fp, r1, r4, asr r2
   1b1c4:	andeq	fp, r1, r4, asr r2
   1b1c8:	andeq	fp, r1, r8, asr #4
   1b1cc:	andeq	fp, r1, r4, asr r2
   1b1d0:	andeq	fp, r1, r8, asr #4
   1b1d4:	andeq	fp, r1, r4, asr r2
   1b1d8:	andeq	fp, r1, r8, asr #4
   1b1dc:	andeq	fp, r1, r8, asr #4
   1b1e0:	andeq	fp, r1, r8, asr #4
   1b1e4:	andeq	fp, r1, r8, asr #4
   1b1e8:	andeq	fp, r1, r8, asr #4
   1b1ec:	andeq	fp, r1, r8, asr #4
   1b1f0:	andeq	fp, r1, r8, asr #4
   1b1f4:	andeq	fp, r1, r8, asr #4
   1b1f8:	andeq	fp, r1, r8, asr #4
   1b1fc:	andeq	fp, r1, r8, asr #4
   1b200:	andeq	fp, r1, r8, asr #4
   1b204:	andeq	fp, r1, r8, asr #4
   1b208:	andeq	fp, r1, r8, asr #4
   1b20c:	andeq	fp, r1, r8, asr #4
   1b210:	andeq	fp, r1, r8, asr #4
   1b214:	andeq	fp, r1, r8, asr #4
   1b218:	andeq	fp, r1, r8, asr #4
   1b21c:	andeq	fp, r1, r8, asr #4
   1b220:	andeq	fp, r1, r8, asr #4
   1b224:	andeq	fp, r1, r8, asr #4
   1b228:	andeq	fp, r1, r8, asr #4
   1b22c:	andeq	fp, r1, r8, asr #4
   1b230:	andeq	fp, r1, r8, asr #4
   1b234:	andeq	fp, r1, r8, asr #4
   1b238:	andeq	fp, r1, r8, asr #4
   1b23c:	andeq	fp, r1, r8, asr #4
   1b240:	andeq	fp, r1, r8, asr #4
   1b244:	andeq	fp, r1, r4, asr r2
   1b248:	cmp	r4, r2
   1b24c:	bne	1b1ac <__assert_fail@plt+0x9a58>
   1b250:	b	1b140 <__assert_fail@plt+0x99ec>
   1b254:	mov	r3, #2
   1b258:	ldr	fp, [sp, #100]	; 0x64
   1b25c:	str	r3, [sp, #176]	; 0xb0
   1b260:	ldr	sl, [sp, #104]	; 0x68
   1b264:	b	1a728 <__assert_fail@plt+0x8fd4>
   1b268:	ldr	r2, [sp, #52]	; 0x34
   1b26c:	mov	fp, r9
   1b270:	ldr	r3, [sp, #60]	; 0x3c
   1b274:	and	r3, r3, r2
   1b278:	str	r3, [sp, #60]	; 0x3c
   1b27c:	b	1a728 <__assert_fail@plt+0x8fd4>
   1b280:	cmp	sl, r4
   1b284:	movhi	r2, fp
   1b288:	bhi	1a600 <__assert_fail@plt+0x8eac>
   1b28c:	mov	r2, r4
   1b290:	b	1a610 <__assert_fail@plt+0x8ebc>
   1b294:	mov	r6, r3
   1b298:	mov	r5, #63	; 0x3f
   1b29c:	b	1a6d0 <__assert_fail@plt+0x8f7c>
   1b2a0:	ldr	r8, [sp, #36]	; 0x24
   1b2a4:	ldr	r6, [sp, #100]	; 0x64
   1b2a8:	b	1a57c <__assert_fail@plt+0x8e28>
   1b2ac:	mov	fp, r9
   1b2b0:	ldr	r8, [sp, #36]	; 0x24
   1b2b4:	ldr	r3, [sp, #52]	; 0x34
   1b2b8:	str	r3, [sp, #60]	; 0x3c
   1b2bc:	b	1a728 <__assert_fail@plt+0x8fd4>
   1b2c0:	ldr	r8, [sp, #36]	; 0x24
   1b2c4:	ldr	r6, [sp, #100]	; 0x64
   1b2c8:	b	1a414 <__assert_fail@plt+0x8cc0>
   1b2cc:	mov	r3, #0
   1b2d0:	add	r4, r4, #4
   1b2d4:	mov	fp, r2
   1b2d8:	mov	r6, r3
   1b2dc:	mov	r5, #48	; 0x30
   1b2e0:	b	1a56c <__assert_fail@plt+0x8e18>
   1b2e4:	mov	r6, r3
   1b2e8:	b	1ad68 <__assert_fail@plt+0x9614>
   1b2ec:	mov	r3, #1
   1b2f0:	movw	r2, #19468	; 0x4c0c
   1b2f4:	movt	r2, #2
   1b2f8:	mov	r4, r3
   1b2fc:	mov	r9, sl
   1b300:	str	r3, [sp, #32]
   1b304:	str	sl, [sp, #44]	; 0x2c
   1b308:	str	r3, [sp, #48]	; 0x30
   1b30c:	str	sl, [sp, #52]	; 0x34
   1b310:	str	r3, [sp, #56]	; 0x38
   1b314:	str	r3, [sp, #60]	; 0x3c
   1b318:	str	sl, [sp, #64]	; 0x40
   1b31c:	str	sl, [sp, #68]	; 0x44
   1b320:	str	r2, [sp, #72]	; 0x48
   1b324:	str	sl, [sp, #80]	; 0x50
   1b328:	str	sl, [sp, #84]	; 0x54
   1b32c:	str	sl, [sp, #88]	; 0x58
   1b330:	b	19e20 <__assert_fail@plt+0x86cc>
   1b334:	mov	r3, #0
   1b338:	mov	r5, #48	; 0x30
   1b33c:	mov	r6, r3
   1b340:	b	1a56c <__assert_fail@plt+0x8e18>
   1b344:	cmp	sl, r4
   1b348:	mov	r5, #48	; 0x30
   1b34c:	movhi	r3, #48	; 0x30
   1b350:	strbhi	r3, [r9, r4]
   1b354:	add	r3, r2, #2
   1b358:	add	r4, r2, #3
   1b35c:	cmp	sl, r3
   1b360:	movhi	r1, #48	; 0x30
   1b364:	strbhi	r1, [r9, r3]
   1b368:	mov	r3, #0
   1b36c:	b	1a648 <__assert_fail@plt+0x8ef4>
   1b370:	ldr	r3, [sp, #48]	; 0x30
   1b374:	str	r3, [sp, #40]	; 0x28
   1b378:	b	1ac54 <__assert_fail@plt+0x9500>
   1b37c:	ldr	r2, [sp, #28]
   1b380:	ldrb	r2, [r2, r3]
   1b384:	sub	r1, r2, #33	; 0x21
   1b388:	cmp	r1, #29
   1b38c:	ldrls	pc, [pc, r1, lsl #2]
   1b390:	b	1a6cc <__assert_fail@plt+0x8f78>
   1b394:	andeq	fp, r1, ip, lsl #8
   1b398:	andeq	sl, r1, ip, asr #13
   1b39c:	andeq	sl, r1, ip, asr #13
   1b3a0:	andeq	sl, r1, ip, asr #13
   1b3a4:	andeq	sl, r1, ip, asr #13
   1b3a8:	andeq	sl, r1, ip, asr #13
   1b3ac:	andeq	fp, r1, ip, lsl #8
   1b3b0:	andeq	fp, r1, ip, lsl #8
   1b3b4:	andeq	fp, r1, ip, lsl #8
   1b3b8:	andeq	sl, r1, ip, asr #13
   1b3bc:	andeq	sl, r1, ip, asr #13
   1b3c0:	andeq	sl, r1, ip, asr #13
   1b3c4:	andeq	fp, r1, ip, lsl #8
   1b3c8:	andeq	sl, r1, ip, asr #13
   1b3cc:	andeq	fp, r1, ip, lsl #8
   1b3d0:	andeq	sl, r1, ip, asr #13
   1b3d4:	andeq	sl, r1, ip, asr #13
   1b3d8:	andeq	sl, r1, ip, asr #13
   1b3dc:	andeq	sl, r1, ip, asr #13
   1b3e0:	andeq	sl, r1, ip, asr #13
   1b3e4:	andeq	sl, r1, ip, asr #13
   1b3e8:	andeq	sl, r1, ip, asr #13
   1b3ec:	andeq	sl, r1, ip, asr #13
   1b3f0:	andeq	sl, r1, ip, asr #13
   1b3f4:	andeq	sl, r1, ip, asr #13
   1b3f8:	andeq	sl, r1, ip, asr #13
   1b3fc:	andeq	sl, r1, ip, asr #13
   1b400:	andeq	fp, r1, ip, lsl #8
   1b404:	andeq	fp, r1, ip, lsl #8
   1b408:	andeq	fp, r1, ip, lsl #8
   1b40c:	ldr	r1, [sp, #44]	; 0x2c
   1b410:	cmp	r1, #0
   1b414:	bne	1b674 <__assert_fail@plt+0x9f20>
   1b418:	cmp	sl, r4
   1b41c:	mov	r7, r3
   1b420:	movhi	r1, #63	; 0x3f
   1b424:	mov	r5, r2
   1b428:	mov	r3, fp
   1b42c:	strbhi	r1, [r9, r4]
   1b430:	add	r1, r4, #1
   1b434:	cmp	sl, r1
   1b438:	movhi	r0, #34	; 0x22
   1b43c:	strbhi	r0, [r9, r1]
   1b440:	add	r1, r4, #2
   1b444:	cmp	sl, r1
   1b448:	movhi	r0, #34	; 0x22
   1b44c:	strbhi	r0, [r9, r1]
   1b450:	add	r1, r4, #3
   1b454:	add	r4, r4, #4
   1b458:	cmp	sl, r1
   1b45c:	movhi	r0, #63	; 0x3f
   1b460:	strbhi	r0, [r9, r1]
   1b464:	b	1a648 <__assert_fail@plt+0x8ef4>
   1b468:	mov	fp, r9
   1b46c:	b	1a728 <__assert_fail@plt+0x8fd4>
   1b470:	ldr	r3, [sp, #188]	; 0xbc
   1b474:	ldrb	r3, [r3]
   1b478:	cmp	r3, #0
   1b47c:	beq	19db8 <__assert_fail@plt+0x8664>
   1b480:	ldr	r2, [sp, #188]	; 0xbc
   1b484:	cmp	sl, r4
   1b488:	bls	1b4a8 <__assert_fail@plt+0x9d54>
   1b48c:	strb	r3, [fp, r4]
   1b490:	add	r4, r4, #1
   1b494:	ldrb	r3, [r2, #1]!
   1b498:	cmp	r3, #0
   1b49c:	beq	19db8 <__assert_fail@plt+0x8664>
   1b4a0:	cmp	sl, r4
   1b4a4:	bhi	1b48c <__assert_fail@plt+0x9d38>
   1b4a8:	ldrb	r3, [r2, #1]!
   1b4ac:	add	r4, r4, #1
   1b4b0:	cmp	r3, #0
   1b4b4:	bne	1b484 <__assert_fail@plt+0x9d30>
   1b4b8:	b	19db8 <__assert_fail@plt+0x8664>
   1b4bc:	add	r9, sp, #100	; 0x64
   1b4c0:	mov	r0, r5
   1b4c4:	ldr	r2, [sp, #60]	; 0x3c
   1b4c8:	mov	r6, #0
   1b4cc:	ldm	r9, {r9, sl, fp}
   1b4d0:	ldr	r5, [sp, #112]	; 0x70
   1b4d4:	ldr	r4, [sp, #116]	; 0x74
   1b4d8:	b	1b188 <__assert_fail@plt+0x9a34>
   1b4dc:	cmp	r4, r8
   1b4e0:	add	r9, sp, #100	; 0x64
   1b4e4:	mov	r1, r4
   1b4e8:	mov	r2, fp
   1b4ec:	ldm	r9, {r9, sl, fp}
   1b4f0:	mov	r3, r5
   1b4f4:	mov	r0, r5
   1b4f8:	ldr	r5, [sp, #112]	; 0x70
   1b4fc:	ldr	r4, [sp, #116]	; 0x74
   1b500:	bcs	1b534 <__assert_fail@plt+0x9de0>
   1b504:	ldrb	r6, [r2]
   1b508:	cmp	r6, #0
   1b50c:	bne	1b520 <__assert_fail@plt+0x9dcc>
   1b510:	b	1b66c <__assert_fail@plt+0x9f18>
   1b514:	ldrb	r6, [r2, #1]!
   1b518:	cmp	r6, #0
   1b51c:	beq	1b604 <__assert_fail@plt+0x9eb0>
   1b520:	add	r3, r3, #1
   1b524:	add	r1, r7, r3
   1b528:	cmp	r8, r1
   1b52c:	bhi	1b514 <__assert_fail@plt+0x9dc0>
   1b530:	mov	r0, r3
   1b534:	mov	r6, #0
   1b538:	ldr	r2, [sp, #60]	; 0x3c
   1b53c:	b	1b188 <__assert_fail@plt+0x9a34>
   1b540:	mov	r3, #1
   1b544:	mov	r4, #0
   1b548:	mov	r9, r4
   1b54c:	str	r3, [sp, #32]
   1b550:	str	r3, [sp, #44]	; 0x2c
   1b554:	str	r3, [sp, #48]	; 0x30
   1b558:	str	r4, [sp, #52]	; 0x34
   1b55c:	str	r3, [sp, #56]	; 0x38
   1b560:	str	r3, [sp, #60]	; 0x3c
   1b564:	str	r3, [sp, #88]	; 0x58
   1b568:	movw	r3, #19468	; 0x4c0c
   1b56c:	movt	r3, #2
   1b570:	str	r4, [sp, #64]	; 0x40
   1b574:	str	r4, [sp, #68]	; 0x44
   1b578:	str	r3, [sp, #72]	; 0x48
   1b57c:	str	r4, [sp, #80]	; 0x50
   1b580:	str	r4, [sp, #84]	; 0x54
   1b584:	b	19e20 <__assert_fail@plt+0x86cc>
   1b588:	mov	fp, r9
   1b58c:	b	1a73c <__assert_fail@plt+0x8fe8>
   1b590:	ldr	r3, [sp, #48]	; 0x30
   1b594:	b	1b0b0 <__assert_fail@plt+0x995c>
   1b598:	mov	r2, r3
   1b59c:	ldr	r3, [sp, #72]	; 0x48
   1b5a0:	cmp	r3, #0
   1b5a4:	moveq	r2, #0
   1b5a8:	andne	r2, r2, #1
   1b5ac:	cmp	r2, #0
   1b5b0:	beq	1b5e0 <__assert_fail@plt+0x9e8c>
   1b5b4:	mov	r2, r3
   1b5b8:	ldrb	r3, [r3]
   1b5bc:	cmp	r3, #0
   1b5c0:	beq	1b5e0 <__assert_fail@plt+0x9e8c>
   1b5c4:	cmp	sl, r4
   1b5c8:	bls	1b5f0 <__assert_fail@plt+0x9e9c>
   1b5cc:	strb	r3, [fp, r4]
   1b5d0:	add	r4, r4, #1
   1b5d4:	ldrb	r3, [r2, #1]!
   1b5d8:	cmp	r3, #0
   1b5dc:	bne	1b5c4 <__assert_fail@plt+0x9e70>
   1b5e0:	cmp	sl, r4
   1b5e4:	movhi	r3, #0
   1b5e8:	strbhi	r3, [fp, r4]
   1b5ec:	b	1a778 <__assert_fail@plt+0x9024>
   1b5f0:	ldrb	r3, [r2, #1]!
   1b5f4:	add	r4, r4, #1
   1b5f8:	cmp	r3, #0
   1b5fc:	bne	1b5c4 <__assert_fail@plt+0x9e70>
   1b600:	b	1b5e0 <__assert_fail@plt+0x9e8c>
   1b604:	mov	r0, r3
   1b608:	ldr	r2, [sp, #60]	; 0x3c
   1b60c:	b	1b188 <__assert_fail@plt+0x9a34>
   1b610:	mov	ip, #5
   1b614:	mov	r3, r8
   1b618:	ldr	r1, [sp, #84]	; 0x54
   1b61c:	str	ip, [sp]
   1b620:	ldr	r2, [sp, #180]	; 0xb4
   1b624:	ldr	ip, [sp, #188]	; 0xbc
   1b628:	ldr	r0, [sp, #184]	; 0xb8
   1b62c:	str	r2, [sp, #4]
   1b630:	ldr	r2, [sp, #28]
   1b634:	str	ip, [sp, #12]
   1b638:	ldr	ip, [sp, #192]	; 0xc0
   1b63c:	str	r0, [sp, #8]
   1b640:	mov	r0, fp
   1b644:	str	ip, [sp, #16]
   1b648:	bl	19cfc <__assert_fail@plt+0x85a8>
   1b64c:	mov	r4, r0
   1b650:	b	1a778 <__assert_fail@plt+0x9024>
   1b654:	mov	r6, r3
   1b658:	str	r3, [sp, #40]	; 0x28
   1b65c:	b	1a6e8 <__assert_fail@plt+0x8f94>
   1b660:	mov	r3, #2
   1b664:	str	r3, [sp, #176]	; 0xb0
   1b668:	b	1a728 <__assert_fail@plt+0x8fd4>
   1b66c:	ldr	r2, [sp, #60]	; 0x3c
   1b670:	b	1b188 <__assert_fail@plt+0x9a34>
   1b674:	mov	r3, #5
   1b678:	mov	fp, r9
   1b67c:	str	r3, [sp, #176]	; 0xb0
   1b680:	b	1a73c <__assert_fail@plt+0x8fe8>
   1b684:	mov	r1, #1
   1b688:	mov	r9, #0
   1b68c:	mov	r3, r9
   1b690:	mov	r2, r9
   1b694:	str	r1, [sp, #32]
   1b698:	str	sl, [sp, #84]	; 0x54
   1b69c:	b	1a4c4 <__assert_fail@plt+0x8d70>
   1b6a0:	mov	r3, #0
   1b6a4:	mov	r2, #1
   1b6a8:	mov	r9, r3
   1b6ac:	mov	r4, r3
   1b6b0:	str	r2, [sp, #32]
   1b6b4:	strd	r2, [sp, #44]	; 0x2c
   1b6b8:	strd	r2, [sp, #56]	; 0x38
   1b6bc:	str	r3, [sp, #80]	; 0x50
   1b6c0:	str	r3, [sp, #84]	; 0x54
   1b6c4:	str	r3, [sp, #88]	; 0x58
   1b6c8:	movw	r3, #19488	; 0x4c20
   1b6cc:	movt	r3, #2
   1b6d0:	str	r2, [sp, #52]	; 0x34
   1b6d4:	str	r2, [sp, #64]	; 0x40
   1b6d8:	str	r2, [sp, #68]	; 0x44
   1b6dc:	str	r3, [sp, #72]	; 0x48
   1b6e0:	b	19e20 <__assert_fail@plt+0x86cc>
   1b6e4:	bl	11748 <abort@plt>
   1b6e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b6ec:	mov	r4, r0
   1b6f0:	mov	r5, r3
   1b6f4:	strd	r6, [sp, #8]
   1b6f8:	movw	r7, #24964	; 0x6184
   1b6fc:	movt	r7, #3
   1b700:	strd	r8, [sp, #16]
   1b704:	strd	sl, [sp, #24]
   1b708:	mov	sl, r1
   1b70c:	mov	fp, r2
   1b710:	str	lr, [sp, #32]
   1b714:	sub	sp, sp, #60	; 0x3c
   1b718:	bl	115e0 <__errno_location@plt>
   1b71c:	mov	r8, r0
   1b720:	cmn	r4, #-2147483647	; 0x80000001
   1b724:	ldr	r6, [r7]
   1b728:	movne	r0, #0
   1b72c:	moveq	r0, #1
   1b730:	ldr	r3, [r8]
   1b734:	orrs	r0, r0, r4, lsr #31
   1b738:	str	r3, [sp, #28]
   1b73c:	bne	1b8cc <__assert_fail@plt+0xa178>
   1b740:	ldr	r3, [r7, #4]
   1b744:	cmp	r3, r4
   1b748:	bgt	1b7a8 <__assert_fail@plt+0xa054>
   1b74c:	add	r1, r7, #8
   1b750:	sub	r2, r4, r3
   1b754:	str	r3, [sp, #52]	; 0x34
   1b758:	cmp	r6, r1
   1b75c:	add	r2, r2, #1
   1b760:	beq	1b8a4 <__assert_fail@plt+0xa150>
   1b764:	mov	r1, #8
   1b768:	mov	r0, r6
   1b76c:	mvn	r3, #-2147483648	; 0x80000000
   1b770:	str	r1, [sp]
   1b774:	add	r1, sp, #52	; 0x34
   1b778:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1b77c:	mov	r6, r0
   1b780:	str	r0, [r7]
   1b784:	ldr	r0, [r7, #4]
   1b788:	mov	r1, #0
   1b78c:	ldr	r2, [sp, #52]	; 0x34
   1b790:	sub	r2, r2, r0
   1b794:	add	r0, r6, r0, lsl #3
   1b798:	lsl	r2, r2, #3
   1b79c:	bl	11610 <memset@plt>
   1b7a0:	ldr	r3, [sp, #52]	; 0x34
   1b7a4:	str	r3, [r7, #4]
   1b7a8:	ldr	r1, [r5, #4]
   1b7ac:	add	r0, r6, r4, lsl #3
   1b7b0:	add	ip, r5, #8
   1b7b4:	mov	r3, fp
   1b7b8:	mov	r2, sl
   1b7bc:	ldr	r7, [r0, #4]
   1b7c0:	str	r0, [sp, #36]	; 0x24
   1b7c4:	str	ip, [sp, #40]	; 0x28
   1b7c8:	orr	r0, r1, #1
   1b7cc:	ldr	r9, [r6, r4, lsl #3]
   1b7d0:	str	ip, [sp, #8]
   1b7d4:	ldr	lr, [r5, #44]	; 0x2c
   1b7d8:	str	r0, [sp, #4]
   1b7dc:	ldr	ip, [r5]
   1b7e0:	mov	r1, r9
   1b7e4:	str	ip, [sp, #32]
   1b7e8:	ldr	ip, [r5, #40]	; 0x28
   1b7ec:	str	ip, [sp, #12]
   1b7f0:	ldr	ip, [sp, #32]
   1b7f4:	str	lr, [sp, #16]
   1b7f8:	str	r0, [sp, #44]	; 0x2c
   1b7fc:	mov	r0, r7
   1b800:	str	ip, [sp]
   1b804:	bl	19cfc <__assert_fail@plt+0x85a8>
   1b808:	cmp	r9, r0
   1b80c:	bhi	1b87c <__assert_fail@plt+0xa128>
   1b810:	add	r9, r0, #1
   1b814:	movw	r3, #25092	; 0x6204
   1b818:	movt	r3, #3
   1b81c:	cmp	r7, r3
   1b820:	str	r9, [r6, r4, lsl #3]
   1b824:	beq	1b830 <__assert_fail@plt+0xa0dc>
   1b828:	mov	r0, r7
   1b82c:	bl	18d2c <__assert_fail@plt+0x75d8>
   1b830:	mov	r0, r9
   1b834:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1b838:	ldr	ip, [r5]
   1b83c:	mov	r3, fp
   1b840:	mov	r2, sl
   1b844:	mov	r1, r9
   1b848:	mov	r7, r0
   1b84c:	ldr	lr, [sp, #36]	; 0x24
   1b850:	ldr	r4, [r5, #40]	; 0x28
   1b854:	str	r0, [lr, #4]
   1b858:	ldr	lr, [r5, #44]	; 0x2c
   1b85c:	str	ip, [sp]
   1b860:	ldr	ip, [sp, #44]	; 0x2c
   1b864:	str	ip, [sp, #4]
   1b868:	ldr	ip, [sp, #40]	; 0x28
   1b86c:	str	r4, [sp, #12]
   1b870:	str	lr, [sp, #16]
   1b874:	str	ip, [sp, #8]
   1b878:	bl	19cfc <__assert_fail@plt+0x85a8>
   1b87c:	ldr	r3, [sp, #28]
   1b880:	mov	r0, r7
   1b884:	str	r3, [r8]
   1b888:	add	sp, sp, #60	; 0x3c
   1b88c:	ldrd	r4, [sp]
   1b890:	ldrd	r6, [sp, #8]
   1b894:	ldrd	r8, [sp, #16]
   1b898:	ldrd	sl, [sp, #24]
   1b89c:	add	sp, sp, #32
   1b8a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8a4:	mov	r1, #8
   1b8a8:	mvn	r3, #-2147483648	; 0x80000000
   1b8ac:	str	r1, [sp]
   1b8b0:	add	r1, sp, #52	; 0x34
   1b8b4:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1b8b8:	ldrd	r2, [r7, #8]
   1b8bc:	mov	r6, r0
   1b8c0:	str	r0, [r7]
   1b8c4:	strd	r2, [r0]
   1b8c8:	b	1b784 <__assert_fail@plt+0xa030>
   1b8cc:	bl	11748 <abort@plt>
   1b8d0:	strd	r4, [sp, #-16]!
   1b8d4:	mov	r5, r0
   1b8d8:	str	r6, [sp, #8]
   1b8dc:	str	lr, [sp, #12]
   1b8e0:	bl	115e0 <__errno_location@plt>
   1b8e4:	mov	r4, r0
   1b8e8:	cmp	r5, #0
   1b8ec:	ldr	r0, [pc, #32]	; 1b914 <__assert_fail@plt+0xa1c0>
   1b8f0:	mov	r1, #48	; 0x30
   1b8f4:	movne	r0, r5
   1b8f8:	ldr	r6, [r4]
   1b8fc:	bl	1eae4 <__assert_fail@plt+0xd390>
   1b900:	str	r6, [r4]
   1b904:	ldrd	r4, [sp]
   1b908:	ldr	r6, [sp, #8]
   1b90c:	add	sp, sp, #12
   1b910:	pop	{pc}		; (ldr pc, [sp], #4)
   1b914:	andeq	r6, r3, r4, lsl #6
   1b918:	ldr	r3, [pc, #12]	; 1b92c <__assert_fail@plt+0xa1d8>
   1b91c:	cmp	r0, #0
   1b920:	moveq	r0, r3
   1b924:	ldr	r0, [r0]
   1b928:	bx	lr
   1b92c:	andeq	r6, r3, r4, lsl #6
   1b930:	ldr	r3, [pc, #12]	; 1b944 <__assert_fail@plt+0xa1f0>
   1b934:	cmp	r0, #0
   1b938:	moveq	r0, r3
   1b93c:	str	r1, [r0]
   1b940:	bx	lr
   1b944:	andeq	r6, r3, r4, lsl #6
   1b948:	ldr	r3, [pc, #52]	; 1b984 <__assert_fail@plt+0xa230>
   1b94c:	cmp	r0, #0
   1b950:	push	{lr}		; (str lr, [sp, #-4]!)
   1b954:	lsr	lr, r1, #5
   1b958:	and	r1, r1, #31
   1b95c:	moveq	r0, r3
   1b960:	add	r3, r0, #8
   1b964:	ldr	ip, [r3, lr, lsl #2]
   1b968:	lsr	r0, ip, r1
   1b96c:	eor	r2, r2, r0
   1b970:	and	r0, r0, #1
   1b974:	and	r2, r2, #1
   1b978:	eor	r1, ip, r2, lsl r1
   1b97c:	str	r1, [r3, lr, lsl #2]
   1b980:	pop	{pc}		; (ldr pc, [sp], #4)
   1b984:	andeq	r6, r3, r4, lsl #6
   1b988:	ldr	r3, [pc, #16]	; 1b9a0 <__assert_fail@plt+0xa24c>
   1b98c:	cmp	r0, #0
   1b990:	movne	r3, r0
   1b994:	ldr	r0, [r3, #4]
   1b998:	str	r1, [r3, #4]
   1b99c:	bx	lr
   1b9a0:	andeq	r6, r3, r4, lsl #6
   1b9a4:	ldr	r3, [pc, #48]	; 1b9dc <__assert_fail@plt+0xa288>
   1b9a8:	cmp	r0, #0
   1b9ac:	mov	ip, #10
   1b9b0:	moveq	r0, r3
   1b9b4:	cmp	r2, #0
   1b9b8:	cmpne	r1, #0
   1b9bc:	str	ip, [r0]
   1b9c0:	beq	1b9d0 <__assert_fail@plt+0xa27c>
   1b9c4:	str	r1, [r0, #40]	; 0x28
   1b9c8:	str	r2, [r0, #44]	; 0x2c
   1b9cc:	bx	lr
   1b9d0:	str	r4, [sp, #-8]!
   1b9d4:	str	lr, [sp, #4]
   1b9d8:	bl	11748 <abort@plt>
   1b9dc:	andeq	r6, r3, r4, lsl #6
   1b9e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1b9e4:	strd	r6, [sp, #8]
   1b9e8:	mov	r7, r0
   1b9ec:	mov	r6, r1
   1b9f0:	strd	r8, [sp, #16]
   1b9f4:	mov	r8, r2
   1b9f8:	mov	r9, r3
   1b9fc:	str	lr, [sp, #24]
   1ba00:	sub	sp, sp, #28
   1ba04:	ldr	r4, [sp, #56]	; 0x38
   1ba08:	ldr	ip, [pc, #104]	; 1ba78 <__assert_fail@plt+0xa324>
   1ba0c:	cmp	r4, #0
   1ba10:	moveq	r4, ip
   1ba14:	bl	115e0 <__errno_location@plt>
   1ba18:	ldr	ip, [r4, #44]	; 0x2c
   1ba1c:	mov	r5, r0
   1ba20:	mov	r1, r6
   1ba24:	add	lr, r4, #8
   1ba28:	mov	r3, r9
   1ba2c:	ldr	r6, [r5]
   1ba30:	mov	r2, r8
   1ba34:	mov	r0, r7
   1ba38:	str	ip, [sp, #16]
   1ba3c:	ldr	ip, [r4, #40]	; 0x28
   1ba40:	str	lr, [sp, #8]
   1ba44:	str	ip, [sp, #12]
   1ba48:	ldr	ip, [r4, #4]
   1ba4c:	str	ip, [sp, #4]
   1ba50:	ldr	ip, [r4]
   1ba54:	str	ip, [sp]
   1ba58:	bl	19cfc <__assert_fail@plt+0x85a8>
   1ba5c:	str	r6, [r5]
   1ba60:	add	sp, sp, #28
   1ba64:	ldrd	r4, [sp]
   1ba68:	ldrd	r6, [sp, #8]
   1ba6c:	ldrd	r8, [sp, #16]
   1ba70:	add	sp, sp, #24
   1ba74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba78:	andeq	r6, r3, r4, lsl #6
   1ba7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba80:	cmp	r2, #0
   1ba84:	ldr	r4, [pc, #192]	; 1bb4c <__assert_fail@plt+0xa3f8>
   1ba88:	movne	r4, r2
   1ba8c:	strd	r6, [sp, #8]
   1ba90:	strd	r8, [sp, #16]
   1ba94:	mov	r9, r1
   1ba98:	mov	r8, r0
   1ba9c:	strd	sl, [sp, #24]
   1baa0:	str	lr, [sp, #32]
   1baa4:	sub	sp, sp, #36	; 0x24
   1baa8:	bl	115e0 <__errno_location@plt>
   1baac:	ldr	r5, [r4, #4]
   1bab0:	mov	r6, r0
   1bab4:	add	r7, r4, #8
   1bab8:	mov	r1, #0
   1babc:	mov	r3, r9
   1bac0:	ldr	ip, [r4, #44]	; 0x2c
   1bac4:	mov	r2, r8
   1bac8:	mov	r0, r1
   1bacc:	ldr	sl, [r6]
   1bad0:	orr	r5, r5, #1
   1bad4:	str	ip, [sp, #16]
   1bad8:	ldr	ip, [r4, #40]	; 0x28
   1badc:	stmib	sp, {r5, r7, ip}
   1bae0:	ldr	ip, [r4]
   1bae4:	str	ip, [sp]
   1bae8:	bl	19cfc <__assert_fail@plt+0x85a8>
   1baec:	add	r1, r0, #1
   1baf0:	mov	r0, r1
   1baf4:	str	r1, [sp, #28]
   1baf8:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1bafc:	ldr	ip, [r4, #44]	; 0x2c
   1bb00:	mov	fp, r0
   1bb04:	mov	r3, r9
   1bb08:	mov	r2, r8
   1bb0c:	ldr	r1, [sp, #28]
   1bb10:	str	ip, [sp, #16]
   1bb14:	ldr	ip, [r4, #40]	; 0x28
   1bb18:	stmib	sp, {r5, r7, ip}
   1bb1c:	ldr	ip, [r4]
   1bb20:	str	ip, [sp]
   1bb24:	bl	19cfc <__assert_fail@plt+0x85a8>
   1bb28:	mov	r0, fp
   1bb2c:	str	sl, [r6]
   1bb30:	add	sp, sp, #36	; 0x24
   1bb34:	ldrd	r4, [sp]
   1bb38:	ldrd	r6, [sp, #8]
   1bb3c:	ldrd	r8, [sp, #16]
   1bb40:	ldrd	sl, [sp, #24]
   1bb44:	add	sp, sp, #32
   1bb48:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb4c:	andeq	r6, r3, r4, lsl #6
   1bb50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bb54:	cmp	r3, #0
   1bb58:	ldr	r4, [pc, #220]	; 1bc3c <__assert_fail@plt+0xa4e8>
   1bb5c:	movne	r4, r3
   1bb60:	strd	r6, [sp, #8]
   1bb64:	mov	r6, r2
   1bb68:	strd	r8, [sp, #16]
   1bb6c:	mov	r9, r0
   1bb70:	strd	sl, [sp, #24]
   1bb74:	mov	sl, r1
   1bb78:	str	lr, [sp, #32]
   1bb7c:	sub	sp, sp, #44	; 0x2c
   1bb80:	bl	115e0 <__errno_location@plt>
   1bb84:	ldr	r5, [r4, #4]
   1bb88:	mov	r7, r0
   1bb8c:	mov	r1, #0
   1bb90:	add	r8, r4, #8
   1bb94:	mov	r3, sl
   1bb98:	ldr	ip, [r4, #44]	; 0x2c
   1bb9c:	mov	r2, r9
   1bba0:	mov	r0, r1
   1bba4:	ldr	lr, [r7]
   1bba8:	cmp	r6, r1
   1bbac:	orreq	r5, r5, #1
   1bbb0:	str	ip, [sp, #16]
   1bbb4:	ldr	ip, [r4, #40]	; 0x28
   1bbb8:	stmib	sp, {r5, r8, ip}
   1bbbc:	ldr	ip, [r4]
   1bbc0:	str	lr, [sp, #28]
   1bbc4:	str	ip, [sp]
   1bbc8:	bl	19cfc <__assert_fail@plt+0x85a8>
   1bbcc:	add	r1, r0, #1
   1bbd0:	mov	fp, r0
   1bbd4:	mov	r0, r1
   1bbd8:	str	r1, [sp, #36]	; 0x24
   1bbdc:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1bbe0:	ldr	ip, [r4, #44]	; 0x2c
   1bbe4:	mov	r3, sl
   1bbe8:	mov	r2, r9
   1bbec:	ldr	r1, [sp, #36]	; 0x24
   1bbf0:	str	ip, [sp, #16]
   1bbf4:	ldr	ip, [r4, #40]	; 0x28
   1bbf8:	str	r0, [sp, #32]
   1bbfc:	stmib	sp, {r5, r8, ip}
   1bc00:	ldr	ip, [r4]
   1bc04:	str	ip, [sp]
   1bc08:	bl	19cfc <__assert_fail@plt+0x85a8>
   1bc0c:	ldr	lr, [sp, #28]
   1bc10:	cmp	r6, #0
   1bc14:	ldr	r0, [sp, #32]
   1bc18:	str	lr, [r7]
   1bc1c:	strne	fp, [r6]
   1bc20:	add	sp, sp, #44	; 0x2c
   1bc24:	ldrd	r4, [sp]
   1bc28:	ldrd	r6, [sp, #8]
   1bc2c:	ldrd	r8, [sp, #16]
   1bc30:	ldrd	sl, [sp, #24]
   1bc34:	add	sp, sp, #32
   1bc38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc3c:	andeq	r6, r3, r4, lsl #6
   1bc40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bc44:	movw	r5, #24964	; 0x6184
   1bc48:	movt	r5, #3
   1bc4c:	ldr	r3, [r5, #4]
   1bc50:	strd	r6, [sp, #8]
   1bc54:	str	r8, [sp, #16]
   1bc58:	str	lr, [sp, #20]
   1bc5c:	ldr	r7, [r5]
   1bc60:	cmp	r3, #1
   1bc64:	ble	1bc88 <__assert_fail@plt+0xa534>
   1bc68:	mov	r4, #1
   1bc6c:	add	r6, r7, #4
   1bc70:	ldr	r0, [r6, r4, lsl #3]
   1bc74:	add	r4, r4, #1
   1bc78:	bl	18d2c <__assert_fail@plt+0x75d8>
   1bc7c:	ldr	r3, [r5, #4]
   1bc80:	cmp	r3, r4
   1bc84:	bgt	1bc70 <__assert_fail@plt+0xa51c>
   1bc88:	ldr	r0, [r7, #4]
   1bc8c:	movw	r4, #25092	; 0x6204
   1bc90:	movt	r4, #3
   1bc94:	cmp	r0, r4
   1bc98:	beq	1bcac <__assert_fail@plt+0xa558>
   1bc9c:	bl	18d2c <__assert_fail@plt+0x75d8>
   1bca0:	mov	r3, #256	; 0x100
   1bca4:	str	r3, [r5, #8]
   1bca8:	str	r4, [r5, #12]
   1bcac:	ldr	r4, [pc, #44]	; 1bce0 <__assert_fail@plt+0xa58c>
   1bcb0:	cmp	r7, r4
   1bcb4:	beq	1bcc4 <__assert_fail@plt+0xa570>
   1bcb8:	mov	r0, r7
   1bcbc:	bl	18d2c <__assert_fail@plt+0x75d8>
   1bcc0:	str	r4, [r5]
   1bcc4:	mov	r3, #1
   1bcc8:	ldrd	r6, [sp, #8]
   1bccc:	str	r3, [r5, #4]
   1bcd0:	ldrd	r4, [sp]
   1bcd4:	ldr	r8, [sp, #16]
   1bcd8:	add	sp, sp, #20
   1bcdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bce0:	andeq	r6, r3, ip, lsl #3
   1bce4:	ldr	r3, [pc, #4]	; 1bcf0 <__assert_fail@plt+0xa59c>
   1bce8:	mvn	r2, #0
   1bcec:	b	1b6e8 <__assert_fail@plt+0x9f94>
   1bcf0:	andeq	r6, r3, r4, lsl #6
   1bcf4:	ldr	r3, [pc]	; 1bcfc <__assert_fail@plt+0xa5a8>
   1bcf8:	b	1b6e8 <__assert_fail@plt+0x9f94>
   1bcfc:	andeq	r6, r3, r4, lsl #6
   1bd00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bd04:	movw	r4, #24964	; 0x6184
   1bd08:	movt	r4, #3
   1bd0c:	strd	r6, [sp, #8]
   1bd10:	strd	r8, [sp, #16]
   1bd14:	strd	sl, [sp, #24]
   1bd18:	mov	sl, r0
   1bd1c:	str	lr, [sp, #32]
   1bd20:	sub	sp, sp, #44	; 0x2c
   1bd24:	bl	115e0 <__errno_location@plt>
   1bd28:	ldr	r3, [r0]
   1bd2c:	mov	r8, r0
   1bd30:	ldr	r2, [r4, #4]
   1bd34:	ldr	r5, [r4]
   1bd38:	str	r3, [sp, #28]
   1bd3c:	cmp	r2, #0
   1bd40:	bgt	1bd9c <__assert_fail@plt+0xa648>
   1bd44:	add	r3, r4, #8
   1bd48:	str	r2, [sp, #36]	; 0x24
   1bd4c:	rsb	r2, r2, #1
   1bd50:	cmp	r5, r3
   1bd54:	beq	1be68 <__assert_fail@plt+0xa714>
   1bd58:	mov	r1, #8
   1bd5c:	mov	r0, r5
   1bd60:	mvn	r3, #-2147483648	; 0x80000000
   1bd64:	str	r1, [sp]
   1bd68:	add	r1, sp, #36	; 0x24
   1bd6c:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1bd70:	mov	r5, r0
   1bd74:	str	r0, [r4]
   1bd78:	ldr	r0, [r4, #4]
   1bd7c:	mov	r1, #0
   1bd80:	ldr	r2, [sp, #36]	; 0x24
   1bd84:	sub	r2, r2, r0
   1bd88:	add	r0, r5, r0, lsl #3
   1bd8c:	lsl	r2, r2, #3
   1bd90:	bl	11610 <memset@plt>
   1bd94:	ldr	r3, [sp, #36]	; 0x24
   1bd98:	str	r3, [r4, #4]
   1bd9c:	movw	r4, #25092	; 0x6204
   1bda0:	movt	r4, #3
   1bda4:	ldr	r9, [r5]
   1bda8:	add	fp, r4, #264	; 0x108
   1bdac:	mvn	r3, #0
   1bdb0:	ldr	r7, [r4, #260]	; 0x104
   1bdb4:	mov	r2, sl
   1bdb8:	ldr	r6, [r5, #4]
   1bdbc:	str	fp, [sp, #8]
   1bdc0:	mov	r1, r9
   1bdc4:	ldr	ip, [r4, #256]	; 0x100
   1bdc8:	orr	r7, r7, #1
   1bdcc:	ldr	lr, [r4, #300]	; 0x12c
   1bdd0:	mov	r0, r6
   1bdd4:	str	ip, [sp]
   1bdd8:	str	r7, [sp, #4]
   1bddc:	str	lr, [sp, #16]
   1bde0:	ldr	ip, [r4, #296]	; 0x128
   1bde4:	str	ip, [sp, #12]
   1bde8:	bl	19cfc <__assert_fail@plt+0x85a8>
   1bdec:	cmp	r9, r0
   1bdf0:	bhi	1be40 <__assert_fail@plt+0xa6ec>
   1bdf4:	add	r9, r0, #1
   1bdf8:	cmp	r6, r4
   1bdfc:	str	r9, [r5]
   1be00:	beq	1be0c <__assert_fail@plt+0xa6b8>
   1be04:	mov	r0, r6
   1be08:	bl	18d2c <__assert_fail@plt+0x75d8>
   1be0c:	mov	r0, r9
   1be10:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1be14:	ldr	r3, [r4, #256]	; 0x100
   1be18:	mov	r2, sl
   1be1c:	mov	r1, r9
   1be20:	mov	r6, r0
   1be24:	ldr	lr, [r4, #296]	; 0x128
   1be28:	ldr	ip, [r4, #300]	; 0x12c
   1be2c:	str	r0, [r5, #4]
   1be30:	stm	sp, {r3, r7, fp, lr}
   1be34:	mvn	r3, #0
   1be38:	str	ip, [sp, #16]
   1be3c:	bl	19cfc <__assert_fail@plt+0x85a8>
   1be40:	ldr	r3, [sp, #28]
   1be44:	mov	r0, r6
   1be48:	str	r3, [r8]
   1be4c:	add	sp, sp, #44	; 0x2c
   1be50:	ldrd	r4, [sp]
   1be54:	ldrd	r6, [sp, #8]
   1be58:	ldrd	r8, [sp, #16]
   1be5c:	ldrd	sl, [sp, #24]
   1be60:	add	sp, sp, #32
   1be64:	pop	{pc}		; (ldr pc, [sp], #4)
   1be68:	mov	r0, #8
   1be6c:	mvn	r3, #-2147483648	; 0x80000000
   1be70:	add	r1, sp, #36	; 0x24
   1be74:	str	r0, [sp]
   1be78:	mov	r0, #0
   1be7c:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1be80:	ldrd	r2, [r4, #8]
   1be84:	mov	r5, r0
   1be88:	str	r0, [r4]
   1be8c:	strd	r2, [r0]
   1be90:	b	1bd78 <__assert_fail@plt+0xa624>
   1be94:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be98:	movw	r4, #24964	; 0x6184
   1be9c:	movt	r4, #3
   1bea0:	strd	r6, [sp, #8]
   1bea4:	strd	r8, [sp, #16]
   1bea8:	strd	sl, [sp, #24]
   1beac:	mov	sl, r0
   1beb0:	mov	fp, r1
   1beb4:	str	lr, [sp, #32]
   1beb8:	sub	sp, sp, #44	; 0x2c
   1bebc:	bl	115e0 <__errno_location@plt>
   1bec0:	ldr	r3, [r0]
   1bec4:	mov	r8, r0
   1bec8:	ldr	r2, [r4, #4]
   1becc:	ldr	r5, [r4]
   1bed0:	str	r3, [sp, #28]
   1bed4:	cmp	r2, #0
   1bed8:	bgt	1bf34 <__assert_fail@plt+0xa7e0>
   1bedc:	add	r3, r4, #8
   1bee0:	str	r2, [sp, #36]	; 0x24
   1bee4:	rsb	r2, r2, #1
   1bee8:	cmp	r5, r3
   1beec:	beq	1c010 <__assert_fail@plt+0xa8bc>
   1bef0:	mov	r1, #8
   1bef4:	mov	r0, r5
   1bef8:	mvn	r3, #-2147483648	; 0x80000000
   1befc:	str	r1, [sp]
   1bf00:	add	r1, sp, #36	; 0x24
   1bf04:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1bf08:	mov	r5, r0
   1bf0c:	str	r0, [r4]
   1bf10:	ldr	r0, [r4, #4]
   1bf14:	mov	r1, #0
   1bf18:	ldr	r2, [sp, #36]	; 0x24
   1bf1c:	sub	r2, r2, r0
   1bf20:	add	r0, r5, r0, lsl #3
   1bf24:	lsl	r2, r2, #3
   1bf28:	bl	11610 <memset@plt>
   1bf2c:	ldr	r3, [sp, #36]	; 0x24
   1bf30:	str	r3, [r4, #4]
   1bf34:	movw	r4, #25092	; 0x6204
   1bf38:	movt	r4, #3
   1bf3c:	ldr	r9, [r5]
   1bf40:	add	r0, r4, #264	; 0x108
   1bf44:	mov	r3, fp
   1bf48:	ldr	r7, [r4, #260]	; 0x104
   1bf4c:	mov	r2, sl
   1bf50:	ldr	r6, [r5, #4]
   1bf54:	str	r0, [sp, #8]
   1bf58:	mov	r1, r9
   1bf5c:	ldr	ip, [r4, #256]	; 0x100
   1bf60:	orr	r7, r7, #1
   1bf64:	ldr	lr, [r4, #300]	; 0x12c
   1bf68:	mov	r0, r6
   1bf6c:	str	ip, [sp]
   1bf70:	str	r7, [sp, #4]
   1bf74:	str	lr, [sp, #16]
   1bf78:	ldr	ip, [r4, #296]	; 0x128
   1bf7c:	str	ip, [sp, #12]
   1bf80:	bl	19cfc <__assert_fail@plt+0x85a8>
   1bf84:	cmp	r9, r0
   1bf88:	bhi	1bfe8 <__assert_fail@plt+0xa894>
   1bf8c:	add	r9, r0, #1
   1bf90:	cmp	r6, r4
   1bf94:	str	r9, [r5]
   1bf98:	beq	1bfa4 <__assert_fail@plt+0xa850>
   1bf9c:	mov	r0, r6
   1bfa0:	bl	18d2c <__assert_fail@plt+0x75d8>
   1bfa4:	mov	r0, r9
   1bfa8:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1bfac:	ldr	ip, [r4, #256]	; 0x100
   1bfb0:	mov	r1, r9
   1bfb4:	mov	r3, fp
   1bfb8:	mov	r2, sl
   1bfbc:	mov	r6, r0
   1bfc0:	ldr	r9, [r4, #296]	; 0x128
   1bfc4:	ldr	lr, [r4, #300]	; 0x12c
   1bfc8:	str	r0, [r5, #4]
   1bfcc:	str	ip, [sp]
   1bfd0:	ldr	ip, [pc, #100]	; 1c03c <__assert_fail@plt+0xa8e8>
   1bfd4:	str	r7, [sp, #4]
   1bfd8:	str	ip, [sp, #8]
   1bfdc:	str	r9, [sp, #12]
   1bfe0:	str	lr, [sp, #16]
   1bfe4:	bl	19cfc <__assert_fail@plt+0x85a8>
   1bfe8:	ldr	r3, [sp, #28]
   1bfec:	mov	r0, r6
   1bff0:	str	r3, [r8]
   1bff4:	add	sp, sp, #44	; 0x2c
   1bff8:	ldrd	r4, [sp]
   1bffc:	ldrd	r6, [sp, #8]
   1c000:	ldrd	r8, [sp, #16]
   1c004:	ldrd	sl, [sp, #24]
   1c008:	add	sp, sp, #32
   1c00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c010:	mov	r0, #8
   1c014:	mvn	r3, #-2147483648	; 0x80000000
   1c018:	add	r1, sp, #36	; 0x24
   1c01c:	str	r0, [sp]
   1c020:	mov	r0, #0
   1c024:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c028:	ldrd	r2, [r4, #8]
   1c02c:	mov	r5, r0
   1c030:	str	r0, [r4]
   1c034:	strd	r2, [r0]
   1c038:	b	1bf10 <__assert_fail@plt+0xa7bc>
   1c03c:	andeq	r6, r3, ip, lsl #6
   1c040:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c044:	mov	r4, #0
   1c048:	mov	r5, #0
   1c04c:	strd	r6, [sp, #8]
   1c050:	cmp	r1, #10
   1c054:	str	lr, [sp, #16]
   1c058:	sub	sp, sp, #100	; 0x64
   1c05c:	strd	r4, [sp, #48]	; 0x30
   1c060:	beq	1c0a8 <__assert_fail@plt+0xa954>
   1c064:	mov	r3, sp
   1c068:	strd	r4, [sp, #8]
   1c06c:	str	r1, [sp, #48]	; 0x30
   1c070:	mov	r1, r2
   1c074:	mvn	r2, #0
   1c078:	ldrd	r6, [sp, #48]	; 0x30
   1c07c:	strd	r6, [sp]
   1c080:	strd	r4, [sp, #16]
   1c084:	strd	r4, [sp, #24]
   1c088:	strd	r4, [sp, #32]
   1c08c:	strd	r4, [sp, #40]	; 0x28
   1c090:	bl	1b6e8 <__assert_fail@plt+0x9f94>
   1c094:	add	sp, sp, #100	; 0x64
   1c098:	ldrd	r4, [sp]
   1c09c:	ldrd	r6, [sp, #8]
   1c0a0:	add	sp, sp, #16
   1c0a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0a8:	bl	11748 <abort@plt>
   1c0ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c0b0:	mov	r4, #0
   1c0b4:	mov	r5, #0
   1c0b8:	strd	r6, [sp, #8]
   1c0bc:	cmp	r1, #10
   1c0c0:	str	lr, [sp, #16]
   1c0c4:	sub	sp, sp, #100	; 0x64
   1c0c8:	strd	r4, [sp, #48]	; 0x30
   1c0cc:	beq	1c118 <__assert_fail@plt+0xa9c4>
   1c0d0:	mov	ip, r2
   1c0d4:	mov	r2, r3
   1c0d8:	strd	r4, [sp, #8]
   1c0dc:	str	r1, [sp, #48]	; 0x30
   1c0e0:	mov	r3, sp
   1c0e4:	mov	r1, ip
   1c0e8:	ldrd	r6, [sp, #48]	; 0x30
   1c0ec:	strd	r6, [sp]
   1c0f0:	strd	r4, [sp, #16]
   1c0f4:	strd	r4, [sp, #24]
   1c0f8:	strd	r4, [sp, #32]
   1c0fc:	strd	r4, [sp, #40]	; 0x28
   1c100:	bl	1b6e8 <__assert_fail@plt+0x9f94>
   1c104:	add	sp, sp, #100	; 0x64
   1c108:	ldrd	r4, [sp]
   1c10c:	ldrd	r6, [sp, #8]
   1c110:	add	sp, sp, #16
   1c114:	pop	{pc}		; (ldr pc, [sp], #4)
   1c118:	bl	11748 <abort@plt>
   1c11c:	mov	r2, #0
   1c120:	mov	r3, #0
   1c124:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c128:	strd	r6, [sp, #8]
   1c12c:	cmp	r0, #10
   1c130:	strd	r8, [sp, #16]
   1c134:	strd	sl, [sp, #24]
   1c138:	str	lr, [sp, #32]
   1c13c:	sub	sp, sp, #124	; 0x7c
   1c140:	strd	r2, [sp, #72]	; 0x48
   1c144:	strd	r2, [sp, #80]	; 0x50
   1c148:	strd	r2, [sp, #88]	; 0x58
   1c14c:	strd	r2, [sp, #96]	; 0x60
   1c150:	strd	r2, [sp, #104]	; 0x68
   1c154:	strd	r2, [sp, #112]	; 0x70
   1c158:	beq	1c2fc <__assert_fail@plt+0xaba8>
   1c15c:	mov	r6, r1
   1c160:	movw	r4, #24964	; 0x6184
   1c164:	movt	r4, #3
   1c168:	str	r0, [sp, #72]	; 0x48
   1c16c:	ldrd	r0, [sp, #72]	; 0x48
   1c170:	strd	r0, [sp, #24]
   1c174:	strd	r2, [sp, #32]
   1c178:	strd	r2, [sp, #40]	; 0x28
   1c17c:	strd	r2, [sp, #48]	; 0x30
   1c180:	strd	r2, [sp, #56]	; 0x38
   1c184:	strd	r2, [sp, #64]	; 0x40
   1c188:	bl	115e0 <__errno_location@plt>
   1c18c:	mov	r8, r0
   1c190:	ldr	r5, [r4]
   1c194:	ldr	r2, [r4, #4]
   1c198:	ldr	r9, [r0]
   1c19c:	cmp	r2, #0
   1c1a0:	bgt	1c1fc <__assert_fail@plt+0xaaa8>
   1c1a4:	add	r3, r4, #8
   1c1a8:	str	r2, [sp, #72]	; 0x48
   1c1ac:	rsb	r2, r2, #1
   1c1b0:	cmp	r5, r3
   1c1b4:	beq	1c2d0 <__assert_fail@plt+0xab7c>
   1c1b8:	mov	r3, #8
   1c1bc:	mov	r0, r5
   1c1c0:	add	r1, sp, #72	; 0x48
   1c1c4:	str	r3, [sp]
   1c1c8:	mvn	r3, #-2147483648	; 0x80000000
   1c1cc:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c1d0:	mov	r5, r0
   1c1d4:	str	r0, [r4]
   1c1d8:	ldr	r0, [r4, #4]
   1c1dc:	mov	r1, #0
   1c1e0:	ldr	r2, [sp, #72]	; 0x48
   1c1e4:	sub	r2, r2, r0
   1c1e8:	add	r0, r5, r0, lsl #3
   1c1ec:	lsl	r2, r2, #3
   1c1f0:	bl	11610 <memset@plt>
   1c1f4:	ldr	r3, [sp, #72]	; 0x48
   1c1f8:	str	r3, [r4, #4]
   1c1fc:	ldr	sl, [r5]
   1c200:	add	r0, sp, #32
   1c204:	mvn	r3, #0
   1c208:	mov	r2, r6
   1c20c:	ldr	r7, [sp, #28]
   1c210:	ldr	r4, [r5, #4]
   1c214:	mov	r1, sl
   1c218:	str	r0, [sp, #8]
   1c21c:	ldr	lr, [sp, #24]
   1c220:	orr	r7, r7, #1
   1c224:	ldr	ip, [sp, #64]	; 0x40
   1c228:	mov	r0, r4
   1c22c:	ldr	fp, [sp, #68]	; 0x44
   1c230:	str	lr, [sp]
   1c234:	str	r7, [sp, #4]
   1c238:	str	ip, [sp, #12]
   1c23c:	str	fp, [sp, #16]
   1c240:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c244:	cmp	sl, r0
   1c248:	bhi	1c2ac <__assert_fail@plt+0xab58>
   1c24c:	add	sl, r0, #1
   1c250:	movw	r3, #25092	; 0x6204
   1c254:	movt	r3, #3
   1c258:	cmp	r4, r3
   1c25c:	str	sl, [r5]
   1c260:	beq	1c26c <__assert_fail@plt+0xab18>
   1c264:	mov	r0, r4
   1c268:	bl	18d2c <__assert_fail@plt+0x75d8>
   1c26c:	mov	r0, sl
   1c270:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1c274:	ldr	r3, [sp, #24]
   1c278:	mov	r2, r6
   1c27c:	mov	r1, sl
   1c280:	mov	r4, r0
   1c284:	ldr	lr, [sp, #64]	; 0x40
   1c288:	ldr	ip, [sp, #68]	; 0x44
   1c28c:	str	r0, [r5, #4]
   1c290:	add	r5, sp, #32
   1c294:	stm	sp, {r3, r7}
   1c298:	mvn	r3, #0
   1c29c:	str	r5, [sp, #8]
   1c2a0:	str	lr, [sp, #12]
   1c2a4:	str	ip, [sp, #16]
   1c2a8:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c2ac:	mov	r0, r4
   1c2b0:	str	r9, [r8]
   1c2b4:	add	sp, sp, #124	; 0x7c
   1c2b8:	ldrd	r4, [sp]
   1c2bc:	ldrd	r6, [sp, #8]
   1c2c0:	ldrd	r8, [sp, #16]
   1c2c4:	ldrd	sl, [sp, #24]
   1c2c8:	add	sp, sp, #32
   1c2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2d0:	mov	r0, #8
   1c2d4:	mvn	r3, #-2147483648	; 0x80000000
   1c2d8:	add	r1, sp, #72	; 0x48
   1c2dc:	str	r0, [sp]
   1c2e0:	mov	r0, #0
   1c2e4:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c2e8:	ldrd	r2, [r4, #8]
   1c2ec:	mov	r5, r0
   1c2f0:	str	r0, [r4]
   1c2f4:	strd	r2, [r0]
   1c2f8:	b	1c1d8 <__assert_fail@plt+0xaa84>
   1c2fc:	bl	11748 <abort@plt>
   1c300:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c304:	cmp	r0, #10
   1c308:	strd	r6, [sp, #8]
   1c30c:	mov	r6, #0
   1c310:	mov	r7, #0
   1c314:	strd	r8, [sp, #16]
   1c318:	strd	sl, [sp, #24]
   1c31c:	str	lr, [sp, #32]
   1c320:	sub	sp, sp, #124	; 0x7c
   1c324:	strd	r6, [sp, #72]	; 0x48
   1c328:	strd	r6, [sp, #80]	; 0x50
   1c32c:	strd	r6, [sp, #88]	; 0x58
   1c330:	strd	r6, [sp, #96]	; 0x60
   1c334:	strd	r6, [sp, #104]	; 0x68
   1c338:	strd	r6, [sp, #112]	; 0x70
   1c33c:	beq	1c4e8 <__assert_fail@plt+0xad94>
   1c340:	mov	sl, r2
   1c344:	movw	r5, #24964	; 0x6184
   1c348:	movt	r5, #3
   1c34c:	str	r0, [sp, #72]	; 0x48
   1c350:	mov	r9, r1
   1c354:	ldrd	r2, [sp, #72]	; 0x48
   1c358:	strd	r2, [sp, #24]
   1c35c:	strd	r6, [sp, #32]
   1c360:	strd	r6, [sp, #40]	; 0x28
   1c364:	strd	r6, [sp, #48]	; 0x30
   1c368:	strd	r6, [sp, #56]	; 0x38
   1c36c:	strd	r6, [sp, #64]	; 0x40
   1c370:	bl	115e0 <__errno_location@plt>
   1c374:	mov	r7, r0
   1c378:	ldr	r4, [r5]
   1c37c:	ldr	r2, [r5, #4]
   1c380:	ldr	fp, [r0]
   1c384:	cmp	r2, #0
   1c388:	bgt	1c3e4 <__assert_fail@plt+0xac90>
   1c38c:	add	r3, r5, #8
   1c390:	str	r2, [sp, #72]	; 0x48
   1c394:	rsb	r2, r2, #1
   1c398:	cmp	r4, r3
   1c39c:	beq	1c4bc <__assert_fail@plt+0xad68>
   1c3a0:	mov	r3, #8
   1c3a4:	mov	r0, r4
   1c3a8:	add	r1, sp, #72	; 0x48
   1c3ac:	str	r3, [sp]
   1c3b0:	mvn	r3, #-2147483648	; 0x80000000
   1c3b4:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c3b8:	mov	r4, r0
   1c3bc:	str	r0, [r5]
   1c3c0:	ldr	r0, [r5, #4]
   1c3c4:	mov	r1, #0
   1c3c8:	ldr	r2, [sp, #72]	; 0x48
   1c3cc:	sub	r2, r2, r0
   1c3d0:	add	r0, r4, r0, lsl #3
   1c3d4:	lsl	r2, r2, #3
   1c3d8:	bl	11610 <memset@plt>
   1c3dc:	ldr	r3, [sp, #72]	; 0x48
   1c3e0:	str	r3, [r5, #4]
   1c3e4:	ldr	ip, [sp, #24]
   1c3e8:	add	r0, sp, #32
   1c3ec:	mov	r3, sl
   1c3f0:	mov	r2, r9
   1c3f4:	ldr	r6, [sp, #28]
   1c3f8:	ldr	r8, [r4]
   1c3fc:	ldr	r5, [r4, #4]
   1c400:	str	ip, [sp]
   1c404:	orr	r6, r6, #1
   1c408:	ldr	ip, [sp, #64]	; 0x40
   1c40c:	mov	r1, r8
   1c410:	str	r6, [sp, #4]
   1c414:	ldr	lr, [sp, #68]	; 0x44
   1c418:	str	r0, [sp, #8]
   1c41c:	mov	r0, r5
   1c420:	str	ip, [sp, #12]
   1c424:	str	lr, [sp, #16]
   1c428:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c42c:	cmp	r8, r0
   1c430:	bhi	1c498 <__assert_fail@plt+0xad44>
   1c434:	add	r8, r0, #1
   1c438:	movw	r3, #25092	; 0x6204
   1c43c:	movt	r3, #3
   1c440:	cmp	r5, r3
   1c444:	str	r8, [r4]
   1c448:	beq	1c454 <__assert_fail@plt+0xad00>
   1c44c:	mov	r0, r5
   1c450:	bl	18d2c <__assert_fail@plt+0x75d8>
   1c454:	mov	r0, r8
   1c458:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1c45c:	ldr	lr, [sp, #24]
   1c460:	mov	r1, r8
   1c464:	mov	r3, sl
   1c468:	mov	r2, r9
   1c46c:	mov	r5, r0
   1c470:	ldr	r8, [sp, #64]	; 0x40
   1c474:	ldr	ip, [sp, #68]	; 0x44
   1c478:	str	r0, [r4, #4]
   1c47c:	str	lr, [sp]
   1c480:	add	lr, sp, #32
   1c484:	str	r6, [sp, #4]
   1c488:	str	lr, [sp, #8]
   1c48c:	str	r8, [sp, #12]
   1c490:	str	ip, [sp, #16]
   1c494:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c498:	mov	r0, r5
   1c49c:	str	fp, [r7]
   1c4a0:	add	sp, sp, #124	; 0x7c
   1c4a4:	ldrd	r4, [sp]
   1c4a8:	ldrd	r6, [sp, #8]
   1c4ac:	ldrd	r8, [sp, #16]
   1c4b0:	ldrd	sl, [sp, #24]
   1c4b4:	add	sp, sp, #32
   1c4b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4bc:	mov	r0, #8
   1c4c0:	mvn	r3, #-2147483648	; 0x80000000
   1c4c4:	add	r1, sp, #72	; 0x48
   1c4c8:	str	r0, [sp]
   1c4cc:	mov	r0, #0
   1c4d0:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c4d4:	ldrd	r2, [r5, #8]
   1c4d8:	mov	r4, r0
   1c4dc:	str	r0, [r5]
   1c4e0:	strd	r2, [r0]
   1c4e4:	b	1c3c0 <__assert_fail@plt+0xac6c>
   1c4e8:	bl	11748 <abort@plt>
   1c4ec:	ldr	r3, [pc, #492]	; 1c6e0 <__assert_fail@plt+0xaf8c>
   1c4f0:	lsr	ip, r2, #5
   1c4f4:	and	r2, r2, #31
   1c4f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c4fc:	movw	r5, #24964	; 0x6184
   1c500:	movt	r5, #3
   1c504:	strd	r6, [sp, #8]
   1c508:	strd	r8, [sp, #16]
   1c50c:	strd	sl, [sp, #24]
   1c510:	mov	sl, r0
   1c514:	mov	fp, r1
   1c518:	ldrd	r0, [r3]
   1c51c:	str	lr, [sp, #32]
   1c520:	sub	sp, sp, #92	; 0x5c
   1c524:	ldrd	r8, [r3, #8]
   1c528:	add	r6, sp, #48	; 0x30
   1c52c:	strd	r0, [sp, #40]	; 0x28
   1c530:	ldrd	r0, [r3, #16]
   1c534:	strd	r8, [sp, #48]	; 0x30
   1c538:	ldrd	r8, [r3, #24]
   1c53c:	strd	r0, [sp, #56]	; 0x38
   1c540:	ldrd	r0, [r3, #32]
   1c544:	strd	r8, [sp, #64]	; 0x40
   1c548:	ldrd	r8, [r3, #40]	; 0x28
   1c54c:	strd	r0, [sp, #72]	; 0x48
   1c550:	strd	r8, [sp, #80]	; 0x50
   1c554:	ldr	r3, [r6, ip, lsl #2]
   1c558:	mvn	r1, r3, lsr r2
   1c55c:	and	r1, r1, #1
   1c560:	eor	r2, r3, r1, lsl r2
   1c564:	str	r2, [r6, ip, lsl #2]
   1c568:	bl	115e0 <__errno_location@plt>
   1c56c:	ldr	r3, [r0]
   1c570:	mov	r8, r0
   1c574:	ldr	r2, [r5, #4]
   1c578:	ldr	r4, [r5]
   1c57c:	str	r3, [sp, #28]
   1c580:	cmp	r2, #0
   1c584:	bgt	1c5e0 <__assert_fail@plt+0xae8c>
   1c588:	add	r3, r5, #8
   1c58c:	str	r2, [sp, #36]	; 0x24
   1c590:	rsb	r2, r2, #1
   1c594:	cmp	r4, r3
   1c598:	beq	1c6b4 <__assert_fail@plt+0xaf60>
   1c59c:	mov	r1, #8
   1c5a0:	mov	r0, r4
   1c5a4:	mvn	r3, #-2147483648	; 0x80000000
   1c5a8:	str	r1, [sp]
   1c5ac:	add	r1, sp, #36	; 0x24
   1c5b0:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c5b4:	mov	r4, r0
   1c5b8:	str	r0, [r5]
   1c5bc:	ldr	r0, [r5, #4]
   1c5c0:	mov	r1, #0
   1c5c4:	ldr	r2, [sp, #36]	; 0x24
   1c5c8:	sub	r2, r2, r0
   1c5cc:	add	r0, r4, r0, lsl #3
   1c5d0:	lsl	r2, r2, #3
   1c5d4:	bl	11610 <memset@plt>
   1c5d8:	ldr	r3, [sp, #36]	; 0x24
   1c5dc:	str	r3, [r5, #4]
   1c5e0:	ldr	ip, [sp, #40]	; 0x28
   1c5e4:	mov	r3, fp
   1c5e8:	mov	r2, sl
   1c5ec:	ldr	r7, [sp, #44]	; 0x2c
   1c5f0:	ldr	r9, [r4]
   1c5f4:	ldr	r5, [r4, #4]
   1c5f8:	str	ip, [sp]
   1c5fc:	orr	r7, r7, #1
   1c600:	ldr	ip, [sp, #80]	; 0x50
   1c604:	mov	r1, r9
   1c608:	str	r7, [sp, #4]
   1c60c:	ldr	lr, [sp, #84]	; 0x54
   1c610:	mov	r0, r5
   1c614:	str	r6, [sp, #8]
   1c618:	str	ip, [sp, #12]
   1c61c:	str	lr, [sp, #16]
   1c620:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c624:	cmp	r9, r0
   1c628:	bhi	1c68c <__assert_fail@plt+0xaf38>
   1c62c:	add	r9, r0, #1
   1c630:	movw	r3, #25092	; 0x6204
   1c634:	movt	r3, #3
   1c638:	cmp	r5, r3
   1c63c:	str	r9, [r4]
   1c640:	beq	1c64c <__assert_fail@plt+0xaef8>
   1c644:	mov	r0, r5
   1c648:	bl	18d2c <__assert_fail@plt+0x75d8>
   1c64c:	mov	r0, r9
   1c650:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1c654:	mov	r1, r9
   1c658:	ldr	ip, [sp, #40]	; 0x28
   1c65c:	mov	r3, fp
   1c660:	mov	r2, sl
   1c664:	mov	r5, r0
   1c668:	ldr	r9, [sp, #80]	; 0x50
   1c66c:	ldr	lr, [sp, #84]	; 0x54
   1c670:	str	r0, [r4, #4]
   1c674:	str	ip, [sp]
   1c678:	str	r7, [sp, #4]
   1c67c:	str	r6, [sp, #8]
   1c680:	str	r9, [sp, #12]
   1c684:	str	lr, [sp, #16]
   1c688:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c68c:	ldr	r3, [sp, #28]
   1c690:	mov	r0, r5
   1c694:	str	r3, [r8]
   1c698:	add	sp, sp, #92	; 0x5c
   1c69c:	ldrd	r4, [sp]
   1c6a0:	ldrd	r6, [sp, #8]
   1c6a4:	ldrd	r8, [sp, #16]
   1c6a8:	ldrd	sl, [sp, #24]
   1c6ac:	add	sp, sp, #32
   1c6b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6b4:	mov	r0, #8
   1c6b8:	mvn	r3, #-2147483648	; 0x80000000
   1c6bc:	add	r1, sp, #36	; 0x24
   1c6c0:	str	r0, [sp]
   1c6c4:	mov	r0, #0
   1c6c8:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c6cc:	ldrd	r2, [r5, #8]
   1c6d0:	mov	r4, r0
   1c6d4:	str	r0, [r5]
   1c6d8:	strd	r2, [r0]
   1c6dc:	b	1c5bc <__assert_fail@plt+0xae68>
   1c6e0:	andeq	r6, r3, r4, lsl #6
   1c6e4:	ldr	ip, [pc, #476]	; 1c8c8 <__assert_fail@plt+0xb174>
   1c6e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c6ec:	movw	r4, #24964	; 0x6184
   1c6f0:	movt	r4, #3
   1c6f4:	ldrd	r2, [ip, #8]
   1c6f8:	strd	r6, [sp, #8]
   1c6fc:	lsr	r7, r1, #5
   1c700:	mov	r6, r0
   1c704:	strd	r8, [sp, #16]
   1c708:	str	lr, [sp, #32]
   1c70c:	and	lr, r1, #31
   1c710:	ldrd	r0, [ip]
   1c714:	strd	sl, [sp, #24]
   1c718:	sub	sp, sp, #84	; 0x54
   1c71c:	add	r5, sp, #40	; 0x28
   1c720:	strd	r0, [sp, #32]
   1c724:	strd	r2, [sp, #40]	; 0x28
   1c728:	ldrd	r0, [ip, #16]
   1c72c:	ldrd	r2, [ip, #24]
   1c730:	strd	r0, [sp, #48]	; 0x30
   1c734:	ldrd	r0, [ip, #32]
   1c738:	strd	r2, [sp, #56]	; 0x38
   1c73c:	ldrd	r2, [ip, #40]	; 0x28
   1c740:	strd	r0, [sp, #64]	; 0x40
   1c744:	strd	r2, [sp, #72]	; 0x48
   1c748:	ldr	r1, [r5, r7, lsl #2]
   1c74c:	mvn	r3, r1, lsr lr
   1c750:	and	r3, r3, #1
   1c754:	eor	r1, r1, r3, lsl lr
   1c758:	str	r1, [r5, r7, lsl #2]
   1c75c:	bl	115e0 <__errno_location@plt>
   1c760:	mov	r9, r0
   1c764:	ldr	sl, [r0]
   1c768:	ldr	r2, [r4, #4]
   1c76c:	ldr	r7, [r4]
   1c770:	cmp	r2, #0
   1c774:	bgt	1c7d0 <__assert_fail@plt+0xb07c>
   1c778:	add	r3, r4, #8
   1c77c:	str	r2, [sp, #28]
   1c780:	rsb	r2, r2, #1
   1c784:	cmp	r7, r3
   1c788:	beq	1c89c <__assert_fail@plt+0xb148>
   1c78c:	mov	r1, #8
   1c790:	mov	r0, r7
   1c794:	mvn	r3, #-2147483648	; 0x80000000
   1c798:	str	r1, [sp]
   1c79c:	add	r1, sp, #28
   1c7a0:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c7a4:	mov	r7, r0
   1c7a8:	str	r0, [r4]
   1c7ac:	ldr	r0, [r4, #4]
   1c7b0:	mov	r1, #0
   1c7b4:	ldr	r2, [sp, #28]
   1c7b8:	sub	r2, r2, r0
   1c7bc:	add	r0, r7, r0, lsl #3
   1c7c0:	lsl	r2, r2, #3
   1c7c4:	bl	11610 <memset@plt>
   1c7c8:	ldr	r3, [sp, #28]
   1c7cc:	str	r3, [r4, #4]
   1c7d0:	ldr	ip, [sp, #32]
   1c7d4:	mvn	r3, #0
   1c7d8:	mov	r2, r6
   1c7dc:	ldr	r8, [sp, #36]	; 0x24
   1c7e0:	ldr	fp, [r7]
   1c7e4:	ldr	r4, [r7, #4]
   1c7e8:	str	ip, [sp]
   1c7ec:	orr	r8, r8, #1
   1c7f0:	ldr	ip, [sp, #72]	; 0x48
   1c7f4:	mov	r1, fp
   1c7f8:	str	r8, [sp, #4]
   1c7fc:	ldr	lr, [sp, #76]	; 0x4c
   1c800:	mov	r0, r4
   1c804:	str	r5, [sp, #8]
   1c808:	str	ip, [sp, #12]
   1c80c:	str	lr, [sp, #16]
   1c810:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c814:	cmp	fp, r0
   1c818:	bhi	1c878 <__assert_fail@plt+0xb124>
   1c81c:	add	fp, r0, #1
   1c820:	movw	r3, #25092	; 0x6204
   1c824:	movt	r3, #3
   1c828:	cmp	r4, r3
   1c82c:	str	fp, [r7]
   1c830:	beq	1c83c <__assert_fail@plt+0xb0e8>
   1c834:	mov	r0, r4
   1c838:	bl	18d2c <__assert_fail@plt+0x75d8>
   1c83c:	mov	r0, fp
   1c840:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1c844:	ldr	r3, [sp, #32]
   1c848:	mov	r2, r6
   1c84c:	mov	r1, fp
   1c850:	mov	r4, r0
   1c854:	ldr	lr, [sp, #72]	; 0x48
   1c858:	ldr	ip, [sp, #76]	; 0x4c
   1c85c:	str	r0, [r7, #4]
   1c860:	stm	sp, {r3, r8}
   1c864:	mvn	r3, #0
   1c868:	str	r5, [sp, #8]
   1c86c:	str	lr, [sp, #12]
   1c870:	str	ip, [sp, #16]
   1c874:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c878:	mov	r0, r4
   1c87c:	str	sl, [r9]
   1c880:	add	sp, sp, #84	; 0x54
   1c884:	ldrd	r4, [sp]
   1c888:	ldrd	r6, [sp, #8]
   1c88c:	ldrd	r8, [sp, #16]
   1c890:	ldrd	sl, [sp, #24]
   1c894:	add	sp, sp, #32
   1c898:	pop	{pc}		; (ldr pc, [sp], #4)
   1c89c:	mov	r0, #8
   1c8a0:	mvn	r3, #-2147483648	; 0x80000000
   1c8a4:	add	r1, sp, #28
   1c8a8:	str	r0, [sp]
   1c8ac:	mov	r0, #0
   1c8b0:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c8b4:	ldrd	r2, [r4, #8]
   1c8b8:	mov	r7, r0
   1c8bc:	str	r0, [r4]
   1c8c0:	strd	r2, [r0]
   1c8c4:	b	1c7ac <__assert_fail@plt+0xb058>
   1c8c8:	andeq	r6, r3, r4, lsl #6
   1c8cc:	ldr	ip, [pc, #472]	; 1caac <__assert_fail@plt+0xb358>
   1c8d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c8d4:	mov	r5, r0
   1c8d8:	movw	r4, #24964	; 0x6184
   1c8dc:	movt	r4, #3
   1c8e0:	ldrd	r2, [ip]
   1c8e4:	ldrd	r0, [ip, #8]
   1c8e8:	strd	r6, [sp, #8]
   1c8ec:	strd	r8, [sp, #16]
   1c8f0:	strd	sl, [sp, #24]
   1c8f4:	str	lr, [sp, #32]
   1c8f8:	sub	sp, sp, #84	; 0x54
   1c8fc:	strd	r2, [sp, #32]
   1c900:	strd	r0, [sp, #40]	; 0x28
   1c904:	ldr	r6, [sp, #44]	; 0x2c
   1c908:	ldrd	r2, [ip, #16]
   1c90c:	ldrd	r0, [ip, #24]
   1c910:	mvn	lr, r6
   1c914:	and	lr, lr, #67108864	; 0x4000000
   1c918:	eor	lr, lr, r6
   1c91c:	ldrd	r6, [ip, #40]	; 0x28
   1c920:	strd	r2, [sp, #48]	; 0x30
   1c924:	ldrd	r2, [ip, #32]
   1c928:	str	lr, [sp, #44]	; 0x2c
   1c92c:	strd	r0, [sp, #56]	; 0x38
   1c930:	strd	r2, [sp, #64]	; 0x40
   1c934:	strd	r6, [sp, #72]	; 0x48
   1c938:	bl	115e0 <__errno_location@plt>
   1c93c:	mov	r8, r0
   1c940:	ldr	r9, [r0]
   1c944:	ldr	r2, [r4, #4]
   1c948:	ldr	r6, [r4]
   1c94c:	cmp	r2, #0
   1c950:	bgt	1c9ac <__assert_fail@plt+0xb258>
   1c954:	add	r3, r4, #8
   1c958:	str	r2, [sp, #28]
   1c95c:	rsb	r2, r2, #1
   1c960:	cmp	r6, r3
   1c964:	beq	1ca80 <__assert_fail@plt+0xb32c>
   1c968:	mov	r1, #8
   1c96c:	mov	r0, r6
   1c970:	mvn	r3, #-2147483648	; 0x80000000
   1c974:	str	r1, [sp]
   1c978:	add	r1, sp, #28
   1c97c:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1c980:	mov	r6, r0
   1c984:	str	r0, [r4]
   1c988:	ldr	r0, [r4, #4]
   1c98c:	mov	r1, #0
   1c990:	ldr	r2, [sp, #28]
   1c994:	sub	r2, r2, r0
   1c998:	add	r0, r6, r0, lsl #3
   1c99c:	lsl	r2, r2, #3
   1c9a0:	bl	11610 <memset@plt>
   1c9a4:	ldr	r3, [sp, #28]
   1c9a8:	str	r3, [r4, #4]
   1c9ac:	ldr	sl, [r6]
   1c9b0:	add	r0, sp, #40	; 0x28
   1c9b4:	mvn	r3, #0
   1c9b8:	mov	r2, r5
   1c9bc:	ldr	r7, [sp, #36]	; 0x24
   1c9c0:	ldr	r4, [r6, #4]
   1c9c4:	mov	r1, sl
   1c9c8:	str	r0, [sp, #8]
   1c9cc:	ldr	lr, [sp, #32]
   1c9d0:	orr	r7, r7, #1
   1c9d4:	ldr	ip, [sp, #72]	; 0x48
   1c9d8:	mov	r0, r4
   1c9dc:	ldr	fp, [sp, #76]	; 0x4c
   1c9e0:	str	lr, [sp]
   1c9e4:	str	r7, [sp, #4]
   1c9e8:	str	ip, [sp, #12]
   1c9ec:	str	fp, [sp, #16]
   1c9f0:	bl	19cfc <__assert_fail@plt+0x85a8>
   1c9f4:	cmp	sl, r0
   1c9f8:	bhi	1ca5c <__assert_fail@plt+0xb308>
   1c9fc:	add	sl, r0, #1
   1ca00:	movw	r3, #25092	; 0x6204
   1ca04:	movt	r3, #3
   1ca08:	cmp	r4, r3
   1ca0c:	str	sl, [r6]
   1ca10:	beq	1ca1c <__assert_fail@plt+0xb2c8>
   1ca14:	mov	r0, r4
   1ca18:	bl	18d2c <__assert_fail@plt+0x75d8>
   1ca1c:	mov	r0, sl
   1ca20:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1ca24:	ldr	r3, [sp, #32]
   1ca28:	mov	r2, r5
   1ca2c:	add	r5, sp, #40	; 0x28
   1ca30:	mov	r1, sl
   1ca34:	mov	r4, r0
   1ca38:	ldr	lr, [sp, #72]	; 0x48
   1ca3c:	ldr	ip, [sp, #76]	; 0x4c
   1ca40:	str	r0, [r6, #4]
   1ca44:	stm	sp, {r3, r7}
   1ca48:	mvn	r3, #0
   1ca4c:	str	r5, [sp, #8]
   1ca50:	str	lr, [sp, #12]
   1ca54:	str	ip, [sp, #16]
   1ca58:	bl	19cfc <__assert_fail@plt+0x85a8>
   1ca5c:	mov	r0, r4
   1ca60:	str	r9, [r8]
   1ca64:	add	sp, sp, #84	; 0x54
   1ca68:	ldrd	r4, [sp]
   1ca6c:	ldrd	r6, [sp, #8]
   1ca70:	ldrd	r8, [sp, #16]
   1ca74:	ldrd	sl, [sp, #24]
   1ca78:	add	sp, sp, #32
   1ca7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca80:	mov	r0, #8
   1ca84:	mvn	r3, #-2147483648	; 0x80000000
   1ca88:	add	r1, sp, #28
   1ca8c:	str	r0, [sp]
   1ca90:	mov	r0, #0
   1ca94:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1ca98:	ldrd	r2, [r4, #8]
   1ca9c:	mov	r6, r0
   1caa0:	str	r0, [r4]
   1caa4:	strd	r2, [r0]
   1caa8:	b	1c988 <__assert_fail@plt+0xb234>
   1caac:	andeq	r6, r3, r4, lsl #6
   1cab0:	ldr	ip, [pc, #480]	; 1cc98 <__assert_fail@plt+0xb544>
   1cab4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cab8:	mov	r5, r0
   1cabc:	movw	r4, #24964	; 0x6184
   1cac0:	movt	r4, #3
   1cac4:	ldrd	r2, [ip]
   1cac8:	strd	r6, [sp, #8]
   1cacc:	mov	r6, r1
   1cad0:	ldrd	r0, [ip, #8]
   1cad4:	strd	r8, [sp, #16]
   1cad8:	strd	sl, [sp, #24]
   1cadc:	str	lr, [sp, #32]
   1cae0:	sub	sp, sp, #84	; 0x54
   1cae4:	ldrd	r8, [ip, #40]	; 0x28
   1cae8:	strd	r2, [sp, #32]
   1caec:	strd	r0, [sp, #40]	; 0x28
   1caf0:	ldrd	r2, [ip, #16]
   1caf4:	ldr	r7, [sp, #44]	; 0x2c
   1caf8:	ldrd	r0, [ip, #24]
   1cafc:	strd	r2, [sp, #48]	; 0x30
   1cb00:	ldrd	r2, [ip, #32]
   1cb04:	mvn	lr, r7
   1cb08:	and	lr, lr, #67108864	; 0x4000000
   1cb0c:	eor	lr, lr, r7
   1cb10:	str	lr, [sp, #44]	; 0x2c
   1cb14:	strd	r0, [sp, #56]	; 0x38
   1cb18:	strd	r2, [sp, #64]	; 0x40
   1cb1c:	strd	r8, [sp, #72]	; 0x48
   1cb20:	bl	115e0 <__errno_location@plt>
   1cb24:	mov	r9, r0
   1cb28:	ldr	sl, [r0]
   1cb2c:	ldr	r2, [r4, #4]
   1cb30:	ldr	r7, [r4]
   1cb34:	cmp	r2, #0
   1cb38:	bgt	1cb94 <__assert_fail@plt+0xb440>
   1cb3c:	add	r3, r4, #8
   1cb40:	str	r2, [sp, #28]
   1cb44:	rsb	r2, r2, #1
   1cb48:	cmp	r7, r3
   1cb4c:	beq	1cc6c <__assert_fail@plt+0xb518>
   1cb50:	mov	r1, #8
   1cb54:	mov	r0, r7
   1cb58:	mvn	r3, #-2147483648	; 0x80000000
   1cb5c:	str	r1, [sp]
   1cb60:	add	r1, sp, #28
   1cb64:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1cb68:	mov	r7, r0
   1cb6c:	str	r0, [r4]
   1cb70:	ldr	r0, [r4, #4]
   1cb74:	mov	r1, #0
   1cb78:	ldr	r2, [sp, #28]
   1cb7c:	sub	r2, r2, r0
   1cb80:	add	r0, r7, r0, lsl #3
   1cb84:	lsl	r2, r2, #3
   1cb88:	bl	11610 <memset@plt>
   1cb8c:	ldr	r3, [sp, #28]
   1cb90:	str	r3, [r4, #4]
   1cb94:	ldr	ip, [sp, #32]
   1cb98:	add	r0, sp, #40	; 0x28
   1cb9c:	mov	r3, r6
   1cba0:	mov	r2, r5
   1cba4:	ldr	r8, [sp, #36]	; 0x24
   1cba8:	ldr	fp, [r7]
   1cbac:	ldr	r4, [r7, #4]
   1cbb0:	str	ip, [sp]
   1cbb4:	orr	r8, r8, #1
   1cbb8:	ldr	ip, [sp, #72]	; 0x48
   1cbbc:	mov	r1, fp
   1cbc0:	str	r8, [sp, #4]
   1cbc4:	ldr	lr, [sp, #76]	; 0x4c
   1cbc8:	str	r0, [sp, #8]
   1cbcc:	mov	r0, r4
   1cbd0:	str	ip, [sp, #12]
   1cbd4:	str	lr, [sp, #16]
   1cbd8:	bl	19cfc <__assert_fail@plt+0x85a8>
   1cbdc:	cmp	fp, r0
   1cbe0:	bhi	1cc48 <__assert_fail@plt+0xb4f4>
   1cbe4:	add	fp, r0, #1
   1cbe8:	movw	r3, #25092	; 0x6204
   1cbec:	movt	r3, #3
   1cbf0:	cmp	r4, r3
   1cbf4:	str	fp, [r7]
   1cbf8:	beq	1cc04 <__assert_fail@plt+0xb4b0>
   1cbfc:	mov	r0, r4
   1cc00:	bl	18d2c <__assert_fail@plt+0x75d8>
   1cc04:	mov	r0, fp
   1cc08:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1cc0c:	ldr	lr, [sp, #32]
   1cc10:	mov	r2, r5
   1cc14:	mov	r3, r6
   1cc18:	mov	r1, fp
   1cc1c:	mov	r4, r0
   1cc20:	ldr	r5, [sp, #72]	; 0x48
   1cc24:	ldr	ip, [sp, #76]	; 0x4c
   1cc28:	str	r0, [r7, #4]
   1cc2c:	str	lr, [sp]
   1cc30:	add	lr, sp, #40	; 0x28
   1cc34:	str	r8, [sp, #4]
   1cc38:	str	lr, [sp, #8]
   1cc3c:	str	r5, [sp, #12]
   1cc40:	str	ip, [sp, #16]
   1cc44:	bl	19cfc <__assert_fail@plt+0x85a8>
   1cc48:	mov	r0, r4
   1cc4c:	str	sl, [r9]
   1cc50:	add	sp, sp, #84	; 0x54
   1cc54:	ldrd	r4, [sp]
   1cc58:	ldrd	r6, [sp, #8]
   1cc5c:	ldrd	r8, [sp, #16]
   1cc60:	ldrd	sl, [sp, #24]
   1cc64:	add	sp, sp, #32
   1cc68:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc6c:	mov	r0, #8
   1cc70:	mvn	r3, #-2147483648	; 0x80000000
   1cc74:	add	r1, sp, #28
   1cc78:	str	r0, [sp]
   1cc7c:	mov	r0, #0
   1cc80:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1cc84:	ldrd	r2, [r4, #8]
   1cc88:	mov	r7, r0
   1cc8c:	str	r0, [r4]
   1cc90:	strd	r2, [r0]
   1cc94:	b	1cb70 <__assert_fail@plt+0xb41c>
   1cc98:	andeq	r6, r3, r4, lsl #6
   1cc9c:	strd	r4, [sp, #-12]!
   1cca0:	mov	r4, #0
   1cca4:	mov	r5, #0
   1cca8:	str	lr, [sp, #8]
   1ccac:	sub	sp, sp, #100	; 0x64
   1ccb0:	cmp	r1, #10
   1ccb4:	strd	r4, [sp]
   1ccb8:	strd	r4, [sp, #8]
   1ccbc:	strd	r4, [sp, #16]
   1ccc0:	strd	r4, [sp, #24]
   1ccc4:	strd	r4, [sp, #32]
   1ccc8:	strd	r4, [sp, #40]	; 0x28
   1cccc:	beq	1ccfc <__assert_fail@plt+0xb5a8>
   1ccd0:	mov	ip, #67108864	; 0x4000000
   1ccd4:	mov	r3, sp
   1ccd8:	str	r1, [sp]
   1ccdc:	mov	r1, r2
   1cce0:	mvn	r2, #0
   1cce4:	str	ip, [sp, #12]
   1cce8:	bl	1b6e8 <__assert_fail@plt+0x9f94>
   1ccec:	add	sp, sp, #100	; 0x64
   1ccf0:	ldrd	r4, [sp]
   1ccf4:	add	sp, sp, #8
   1ccf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccfc:	bl	11748 <abort@plt>
   1cd00:	ldr	ip, [pc, #156]	; 1cda4 <__assert_fail@plt+0xb650>
   1cd04:	cmp	r2, #0
   1cd08:	cmpne	r1, #0
   1cd0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1cd10:	strd	r6, [sp, #8]
   1cd14:	mov	r6, r2
   1cd18:	str	r8, [sp, #16]
   1cd1c:	mov	r8, r3
   1cd20:	strd	sl, [sp, #20]
   1cd24:	ldrd	r4, [ip]
   1cd28:	str	lr, [sp, #28]
   1cd2c:	sub	sp, sp, #48	; 0x30
   1cd30:	mov	lr, #10
   1cd34:	ldrd	r2, [ip, #8]
   1cd38:	ldrd	sl, [ip, #16]
   1cd3c:	strd	r4, [sp]
   1cd40:	ldrd	r4, [ip, #32]
   1cd44:	str	lr, [sp]
   1cd48:	strd	r2, [sp, #8]
   1cd4c:	strd	sl, [sp, #16]
   1cd50:	ldrd	r2, [ip, #24]
   1cd54:	ldrd	sl, [ip, #40]	; 0x28
   1cd58:	strd	r2, [sp, #24]
   1cd5c:	strd	r4, [sp, #32]
   1cd60:	strd	sl, [sp, #40]	; 0x28
   1cd64:	beq	1cda0 <__assert_fail@plt+0xb64c>
   1cd68:	mov	r7, r1
   1cd6c:	mov	r3, sp
   1cd70:	mov	r1, r8
   1cd74:	mvn	r2, #0
   1cd78:	str	r7, [sp, #40]	; 0x28
   1cd7c:	str	r6, [sp, #44]	; 0x2c
   1cd80:	bl	1b6e8 <__assert_fail@plt+0x9f94>
   1cd84:	add	sp, sp, #48	; 0x30
   1cd88:	ldrd	r4, [sp]
   1cd8c:	ldrd	r6, [sp, #8]
   1cd90:	ldr	r8, [sp, #16]
   1cd94:	ldrd	sl, [sp, #20]
   1cd98:	add	sp, sp, #28
   1cd9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cda0:	bl	11748 <abort@plt>
   1cda4:	andeq	r6, r3, r4, lsl #6
   1cda8:	ldr	ip, [pc, #156]	; 1ce4c <__assert_fail@plt+0xb6f8>
   1cdac:	cmp	r2, #0
   1cdb0:	cmpne	r1, #0
   1cdb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1cdb8:	strd	r6, [sp, #8]
   1cdbc:	mov	r6, r2
   1cdc0:	str	r8, [sp, #16]
   1cdc4:	mov	r8, r3
   1cdc8:	strd	sl, [sp, #20]
   1cdcc:	ldrd	r4, [ip]
   1cdd0:	str	lr, [sp, #28]
   1cdd4:	sub	sp, sp, #48	; 0x30
   1cdd8:	mov	lr, #10
   1cddc:	ldrd	r2, [ip, #8]
   1cde0:	ldrd	sl, [ip, #16]
   1cde4:	strd	r4, [sp]
   1cde8:	ldrd	r4, [ip, #32]
   1cdec:	str	lr, [sp]
   1cdf0:	strd	r2, [sp, #8]
   1cdf4:	strd	sl, [sp, #16]
   1cdf8:	ldrd	r2, [ip, #24]
   1cdfc:	ldrd	sl, [ip, #40]	; 0x28
   1ce00:	strd	r2, [sp, #24]
   1ce04:	strd	r4, [sp, #32]
   1ce08:	strd	sl, [sp, #40]	; 0x28
   1ce0c:	beq	1ce48 <__assert_fail@plt+0xb6f4>
   1ce10:	ldr	r2, [sp, #80]	; 0x50
   1ce14:	mov	r7, r1
   1ce18:	mov	r3, sp
   1ce1c:	mov	r1, r8
   1ce20:	str	r7, [sp, #40]	; 0x28
   1ce24:	str	r6, [sp, #44]	; 0x2c
   1ce28:	bl	1b6e8 <__assert_fail@plt+0x9f94>
   1ce2c:	add	sp, sp, #48	; 0x30
   1ce30:	ldrd	r4, [sp]
   1ce34:	ldrd	r6, [sp, #8]
   1ce38:	ldr	r8, [sp, #16]
   1ce3c:	ldrd	sl, [sp, #20]
   1ce40:	add	sp, sp, #28
   1ce44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce48:	bl	11748 <abort@plt>
   1ce4c:	andeq	r6, r3, r4, lsl #6
   1ce50:	ldr	ip, [pc, #512]	; 1d058 <__assert_fail@plt+0xb904>
   1ce54:	cmp	r0, #0
   1ce58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ce5c:	ldrd	r4, [ip, #16]
   1ce60:	strd	r6, [sp, #8]
   1ce64:	clz	r6, r1
   1ce68:	mov	r7, r1
   1ce6c:	strd	r8, [sp, #16]
   1ce70:	mov	r8, r0
   1ce74:	lsr	r6, r6, #5
   1ce78:	strd	sl, [sp, #24]
   1ce7c:	mov	fp, r2
   1ce80:	mov	sl, #10
   1ce84:	ldrd	r2, [ip]
   1ce88:	moveq	r6, #1
   1ce8c:	str	lr, [sp, #32]
   1ce90:	sub	sp, sp, #92	; 0x5c
   1ce94:	cmp	r6, #0
   1ce98:	ldrd	r0, [ip, #8]
   1ce9c:	strd	r2, [sp, #40]	; 0x28
   1cea0:	strd	r4, [sp, #56]	; 0x38
   1cea4:	ldrd	r2, [ip, #24]
   1cea8:	strd	r0, [sp, #48]	; 0x30
   1ceac:	ldrd	r0, [ip, #32]
   1ceb0:	str	sl, [sp, #40]	; 0x28
   1ceb4:	ldrd	r4, [ip, #40]	; 0x28
   1ceb8:	strd	r2, [sp, #64]	; 0x40
   1cebc:	strd	r0, [sp, #72]	; 0x48
   1cec0:	strd	r4, [sp, #80]	; 0x50
   1cec4:	bne	1d054 <__assert_fail@plt+0xb900>
   1cec8:	movw	r5, #24964	; 0x6184
   1cecc:	movt	r5, #3
   1ced0:	str	r8, [sp, #80]	; 0x50
   1ced4:	str	r7, [sp, #84]	; 0x54
   1ced8:	bl	115e0 <__errno_location@plt>
   1cedc:	ldr	r3, [r0]
   1cee0:	mov	r9, r0
   1cee4:	ldr	r2, [r5, #4]
   1cee8:	ldr	r4, [r5]
   1ceec:	str	r3, [sp, #28]
   1cef0:	cmp	r2, #0
   1cef4:	movgt	r1, sl
   1cef8:	bgt	1cf60 <__assert_fail@plt+0xb80c>
   1cefc:	add	r3, r5, #8
   1cf00:	str	r2, [sp, #36]	; 0x24
   1cf04:	rsb	r2, r2, #1
   1cf08:	cmp	r4, r3
   1cf0c:	beq	1d028 <__assert_fail@plt+0xb8d4>
   1cf10:	mov	r1, #8
   1cf14:	mov	r0, r4
   1cf18:	mvn	r3, #-2147483648	; 0x80000000
   1cf1c:	str	r1, [sp]
   1cf20:	add	r1, sp, #36	; 0x24
   1cf24:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1cf28:	mov	r4, r0
   1cf2c:	str	r0, [r5]
   1cf30:	ldr	r0, [r5, #4]
   1cf34:	mov	r1, #0
   1cf38:	ldr	r2, [sp, #36]	; 0x24
   1cf3c:	sub	r2, r2, r0
   1cf40:	add	r0, r4, r0, lsl #3
   1cf44:	lsl	r2, r2, #3
   1cf48:	bl	11610 <memset@plt>
   1cf4c:	ldr	r3, [sp, #36]	; 0x24
   1cf50:	ldr	r1, [sp, #40]	; 0x28
   1cf54:	ldr	r8, [sp, #80]	; 0x50
   1cf58:	str	r3, [r5, #4]
   1cf5c:	ldr	r7, [sp, #84]	; 0x54
   1cf60:	mvn	r3, #0
   1cf64:	mov	r2, fp
   1cf68:	ldr	r6, [sp, #44]	; 0x2c
   1cf6c:	ldr	sl, [r4]
   1cf70:	ldr	r5, [r4, #4]
   1cf74:	orr	r6, r6, #1
   1cf78:	stm	sp, {r1, r6}
   1cf7c:	add	r1, sp, #48	; 0x30
   1cf80:	str	r8, [sp, #12]
   1cf84:	mov	r0, r5
   1cf88:	str	r1, [sp, #8]
   1cf8c:	mov	r1, sl
   1cf90:	str	r7, [sp, #16]
   1cf94:	bl	19cfc <__assert_fail@plt+0x85a8>
   1cf98:	cmp	sl, r0
   1cf9c:	bhi	1d000 <__assert_fail@plt+0xb8ac>
   1cfa0:	add	r7, r0, #1
   1cfa4:	movw	r3, #25092	; 0x6204
   1cfa8:	movt	r3, #3
   1cfac:	cmp	r5, r3
   1cfb0:	str	r7, [r4]
   1cfb4:	beq	1cfc0 <__assert_fail@plt+0xb86c>
   1cfb8:	mov	r0, r5
   1cfbc:	bl	18d2c <__assert_fail@plt+0x75d8>
   1cfc0:	mov	r0, r7
   1cfc4:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1cfc8:	ldr	r3, [sp, #40]	; 0x28
   1cfcc:	mov	r2, fp
   1cfd0:	mov	r1, r7
   1cfd4:	mov	r5, r0
   1cfd8:	ldr	lr, [sp, #80]	; 0x50
   1cfdc:	ldr	ip, [sp, #84]	; 0x54
   1cfe0:	str	r0, [r4, #4]
   1cfe4:	add	r4, sp, #48	; 0x30
   1cfe8:	stm	sp, {r3, r6}
   1cfec:	mvn	r3, #0
   1cff0:	str	r4, [sp, #8]
   1cff4:	str	lr, [sp, #12]
   1cff8:	str	ip, [sp, #16]
   1cffc:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d000:	ldr	r3, [sp, #28]
   1d004:	mov	r0, r5
   1d008:	str	r3, [r9]
   1d00c:	add	sp, sp, #92	; 0x5c
   1d010:	ldrd	r4, [sp]
   1d014:	ldrd	r6, [sp, #8]
   1d018:	ldrd	r8, [sp, #16]
   1d01c:	ldrd	sl, [sp, #24]
   1d020:	add	sp, sp, #32
   1d024:	pop	{pc}		; (ldr pc, [sp], #4)
   1d028:	mov	r1, #8
   1d02c:	mvn	r3, #-2147483648	; 0x80000000
   1d030:	mov	r0, r6
   1d034:	str	r1, [sp]
   1d038:	add	r1, sp, #36	; 0x24
   1d03c:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d040:	ldrd	r2, [r5, #8]
   1d044:	mov	r4, r0
   1d048:	str	r0, [r5]
   1d04c:	strd	r2, [r0]
   1d050:	b	1cf30 <__assert_fail@plt+0xb7dc>
   1d054:	bl	11748 <abort@plt>
   1d058:	andeq	r6, r3, r4, lsl #6
   1d05c:	ldr	ip, [pc, #536]	; 1d27c <__assert_fail@plt+0xbb28>
   1d060:	cmp	r0, #0
   1d064:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d068:	ldrd	r4, [ip, #16]
   1d06c:	strd	r6, [sp, #8]
   1d070:	mov	r6, r1
   1d074:	mov	r7, r0
   1d078:	strd	r8, [sp, #16]
   1d07c:	mov	r9, #10
   1d080:	strd	sl, [sp, #24]
   1d084:	mov	sl, r2
   1d088:	mov	fp, r3
   1d08c:	str	lr, [sp, #32]
   1d090:	clz	lr, r1
   1d094:	sub	sp, sp, #92	; 0x5c
   1d098:	ldrd	r2, [ip]
   1d09c:	lsr	lr, lr, #5
   1d0a0:	moveq	lr, #1
   1d0a4:	ldrd	r0, [ip, #8]
   1d0a8:	cmp	lr, #0
   1d0ac:	strd	r4, [sp, #56]	; 0x38
   1d0b0:	ldrd	r4, [ip, #40]	; 0x28
   1d0b4:	str	lr, [sp, #28]
   1d0b8:	strd	r2, [sp, #40]	; 0x28
   1d0bc:	ldrd	r2, [ip, #24]
   1d0c0:	strd	r0, [sp, #48]	; 0x30
   1d0c4:	ldrd	r0, [ip, #32]
   1d0c8:	str	r9, [sp, #40]	; 0x28
   1d0cc:	strd	r2, [sp, #64]	; 0x40
   1d0d0:	strd	r4, [sp, #80]	; 0x50
   1d0d4:	strd	r0, [sp, #72]	; 0x48
   1d0d8:	bne	1d278 <__assert_fail@plt+0xbb24>
   1d0dc:	movw	r5, #24964	; 0x6184
   1d0e0:	movt	r5, #3
   1d0e4:	str	r7, [sp, #80]	; 0x50
   1d0e8:	str	r6, [sp, #84]	; 0x54
   1d0ec:	bl	115e0 <__errno_location@plt>
   1d0f0:	ldr	r3, [r0]
   1d0f4:	mov	r8, r0
   1d0f8:	ldr	r2, [r5, #4]
   1d0fc:	ldr	r4, [r5]
   1d100:	str	r3, [sp, #24]
   1d104:	cmp	r2, #0
   1d108:	movgt	r1, r9
   1d10c:	bgt	1d174 <__assert_fail@plt+0xba20>
   1d110:	add	r3, r5, #8
   1d114:	str	r2, [sp, #36]	; 0x24
   1d118:	rsb	r2, r2, #1
   1d11c:	cmp	r4, r3
   1d120:	beq	1d24c <__assert_fail@plt+0xbaf8>
   1d124:	mov	r1, #8
   1d128:	mov	r0, r4
   1d12c:	mvn	r3, #-2147483648	; 0x80000000
   1d130:	str	r1, [sp]
   1d134:	add	r1, sp, #36	; 0x24
   1d138:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d13c:	mov	r4, r0
   1d140:	str	r0, [r5]
   1d144:	ldr	r0, [r5, #4]
   1d148:	mov	r1, #0
   1d14c:	ldr	r2, [sp, #36]	; 0x24
   1d150:	sub	r2, r2, r0
   1d154:	add	r0, r4, r0, lsl #3
   1d158:	lsl	r2, r2, #3
   1d15c:	bl	11610 <memset@plt>
   1d160:	ldr	r3, [sp, #36]	; 0x24
   1d164:	ldr	r1, [sp, #40]	; 0x28
   1d168:	ldr	r7, [sp, #80]	; 0x50
   1d16c:	str	r3, [r5, #4]
   1d170:	ldr	r6, [sp, #84]	; 0x54
   1d174:	mov	r3, fp
   1d178:	mov	r2, sl
   1d17c:	ldr	r0, [sp, #44]	; 0x2c
   1d180:	ldr	r9, [r4]
   1d184:	ldr	r5, [r4, #4]
   1d188:	orr	r0, r0, #1
   1d18c:	str	r1, [sp]
   1d190:	add	r1, sp, #48	; 0x30
   1d194:	str	r0, [sp, #4]
   1d198:	str	r1, [sp, #8]
   1d19c:	mov	r1, r9
   1d1a0:	str	r7, [sp, #12]
   1d1a4:	str	r6, [sp, #16]
   1d1a8:	str	r0, [sp, #28]
   1d1ac:	mov	r0, r5
   1d1b0:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d1b4:	cmp	r9, r0
   1d1b8:	bhi	1d224 <__assert_fail@plt+0xbad0>
   1d1bc:	add	r6, r0, #1
   1d1c0:	movw	r3, #25092	; 0x6204
   1d1c4:	movt	r3, #3
   1d1c8:	cmp	r5, r3
   1d1cc:	str	r6, [r4]
   1d1d0:	beq	1d1dc <__assert_fail@plt+0xba88>
   1d1d4:	mov	r0, r5
   1d1d8:	bl	18d2c <__assert_fail@plt+0x75d8>
   1d1dc:	mov	r0, r6
   1d1e0:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1d1e4:	ldr	lr, [sp, #40]	; 0x28
   1d1e8:	mov	r1, r6
   1d1ec:	mov	r3, fp
   1d1f0:	mov	r2, sl
   1d1f4:	mov	r5, r0
   1d1f8:	ldr	r6, [sp, #80]	; 0x50
   1d1fc:	ldr	ip, [sp, #84]	; 0x54
   1d200:	str	r0, [r4, #4]
   1d204:	str	lr, [sp]
   1d208:	ldr	lr, [sp, #28]
   1d20c:	str	lr, [sp, #4]
   1d210:	add	lr, sp, #48	; 0x30
   1d214:	str	r6, [sp, #12]
   1d218:	str	lr, [sp, #8]
   1d21c:	str	ip, [sp, #16]
   1d220:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d224:	ldr	r3, [sp, #24]
   1d228:	mov	r0, r5
   1d22c:	str	r3, [r8]
   1d230:	add	sp, sp, #92	; 0x5c
   1d234:	ldrd	r4, [sp]
   1d238:	ldrd	r6, [sp, #8]
   1d23c:	ldrd	r8, [sp, #16]
   1d240:	ldrd	sl, [sp, #24]
   1d244:	add	sp, sp, #32
   1d248:	pop	{pc}		; (ldr pc, [sp], #4)
   1d24c:	mov	r1, #8
   1d250:	mvn	r3, #-2147483648	; 0x80000000
   1d254:	ldr	r0, [sp, #28]
   1d258:	str	r1, [sp]
   1d25c:	add	r1, sp, #36	; 0x24
   1d260:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d264:	ldrd	r2, [r5, #8]
   1d268:	mov	r4, r0
   1d26c:	str	r0, [r5]
   1d270:	strd	r2, [r0]
   1d274:	b	1d144 <__assert_fail@plt+0xb9f0>
   1d278:	bl	11748 <abort@plt>
   1d27c:	andeq	r6, r3, r4, lsl #6
   1d280:	ldr	r3, [pc]	; 1d288 <__assert_fail@plt+0xbb34>
   1d284:	b	1b6e8 <__assert_fail@plt+0x9f94>
   1d288:	muleq	r3, r4, r1
   1d28c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d290:	movw	r4, #24964	; 0x6184
   1d294:	movt	r4, #3
   1d298:	strd	r6, [sp, #8]
   1d29c:	strd	r8, [sp, #16]
   1d2a0:	strd	sl, [sp, #24]
   1d2a4:	mov	sl, r0
   1d2a8:	mov	fp, r1
   1d2ac:	str	lr, [sp, #32]
   1d2b0:	sub	sp, sp, #44	; 0x2c
   1d2b4:	bl	115e0 <__errno_location@plt>
   1d2b8:	ldr	r3, [r0]
   1d2bc:	mov	r8, r0
   1d2c0:	ldr	r2, [r4, #4]
   1d2c4:	ldr	r5, [r4]
   1d2c8:	str	r3, [sp, #28]
   1d2cc:	cmp	r2, #0
   1d2d0:	bgt	1d32c <__assert_fail@plt+0xbbd8>
   1d2d4:	add	r3, r4, #8
   1d2d8:	str	r2, [sp, #36]	; 0x24
   1d2dc:	rsb	r2, r2, #1
   1d2e0:	cmp	r5, r3
   1d2e4:	beq	1d408 <__assert_fail@plt+0xbcb4>
   1d2e8:	mov	r1, #8
   1d2ec:	mov	r0, r5
   1d2f0:	mvn	r3, #-2147483648	; 0x80000000
   1d2f4:	str	r1, [sp]
   1d2f8:	add	r1, sp, #36	; 0x24
   1d2fc:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d300:	mov	r5, r0
   1d304:	str	r0, [r4]
   1d308:	ldr	r0, [r4, #4]
   1d30c:	mov	r1, #0
   1d310:	ldr	r2, [sp, #36]	; 0x24
   1d314:	sub	r2, r2, r0
   1d318:	add	r0, r5, r0, lsl #3
   1d31c:	lsl	r2, r2, #3
   1d320:	bl	11610 <memset@plt>
   1d324:	ldr	r3, [sp, #36]	; 0x24
   1d328:	str	r3, [r4, #4]
   1d32c:	ldr	ip, [r4, #16]
   1d330:	mov	r3, fp
   1d334:	mov	r2, sl
   1d338:	ldr	r7, [r4, #20]
   1d33c:	ldr	r0, [pc, #240]	; 1d434 <__assert_fail@plt+0xbce0>
   1d340:	ldr	r9, [r5]
   1d344:	orr	r7, r7, #1
   1d348:	ldr	r6, [r5, #4]
   1d34c:	str	ip, [sp]
   1d350:	ldr	ip, [r4, #56]	; 0x38
   1d354:	mov	r1, r9
   1d358:	str	r7, [sp, #4]
   1d35c:	ldr	lr, [r4, #60]	; 0x3c
   1d360:	str	r0, [sp, #8]
   1d364:	mov	r0, r6
   1d368:	str	ip, [sp, #12]
   1d36c:	str	lr, [sp, #16]
   1d370:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d374:	cmp	r9, r0
   1d378:	bhi	1d3e0 <__assert_fail@plt+0xbc8c>
   1d37c:	add	r9, r0, #1
   1d380:	movw	r3, #25092	; 0x6204
   1d384:	movt	r3, #3
   1d388:	cmp	r6, r3
   1d38c:	str	r9, [r5]
   1d390:	beq	1d39c <__assert_fail@plt+0xbc48>
   1d394:	mov	r0, r6
   1d398:	bl	18d2c <__assert_fail@plt+0x75d8>
   1d39c:	mov	r0, r9
   1d3a0:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1d3a4:	ldr	ip, [r4, #16]
   1d3a8:	mov	r1, r9
   1d3ac:	mov	r3, fp
   1d3b0:	mov	r2, sl
   1d3b4:	mov	r6, r0
   1d3b8:	ldr	r9, [r4, #56]	; 0x38
   1d3bc:	ldr	lr, [r4, #60]	; 0x3c
   1d3c0:	str	r0, [r5, #4]
   1d3c4:	str	ip, [sp]
   1d3c8:	ldr	ip, [pc, #100]	; 1d434 <__assert_fail@plt+0xbce0>
   1d3cc:	str	r7, [sp, #4]
   1d3d0:	str	ip, [sp, #8]
   1d3d4:	str	r9, [sp, #12]
   1d3d8:	str	lr, [sp, #16]
   1d3dc:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d3e0:	ldr	r3, [sp, #28]
   1d3e4:	mov	r0, r6
   1d3e8:	str	r3, [r8]
   1d3ec:	add	sp, sp, #44	; 0x2c
   1d3f0:	ldrd	r4, [sp]
   1d3f4:	ldrd	r6, [sp, #8]
   1d3f8:	ldrd	r8, [sp, #16]
   1d3fc:	ldrd	sl, [sp, #24]
   1d400:	add	sp, sp, #32
   1d404:	pop	{pc}		; (ldr pc, [sp], #4)
   1d408:	mov	r0, #8
   1d40c:	mvn	r3, #-2147483648	; 0x80000000
   1d410:	add	r1, sp, #36	; 0x24
   1d414:	str	r0, [sp]
   1d418:	mov	r0, #0
   1d41c:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d420:	ldrd	r2, [r4, #8]
   1d424:	mov	r5, r0
   1d428:	str	r0, [r4]
   1d42c:	strd	r2, [r0]
   1d430:	b	1d308 <__assert_fail@plt+0xbbb4>
   1d434:	muleq	r3, ip, r1
   1d438:	ldr	r3, [pc, #4]	; 1d444 <__assert_fail@plt+0xbcf0>
   1d43c:	mvn	r2, #0
   1d440:	b	1b6e8 <__assert_fail@plt+0x9f94>
   1d444:	muleq	r3, r4, r1
   1d448:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d44c:	movw	r4, #24964	; 0x6184
   1d450:	movt	r4, #3
   1d454:	strd	r6, [sp, #8]
   1d458:	strd	r8, [sp, #16]
   1d45c:	strd	sl, [sp, #24]
   1d460:	mov	sl, r0
   1d464:	str	lr, [sp, #32]
   1d468:	sub	sp, sp, #44	; 0x2c
   1d46c:	bl	115e0 <__errno_location@plt>
   1d470:	ldr	r3, [r0]
   1d474:	mov	r8, r0
   1d478:	ldr	r2, [r4, #4]
   1d47c:	ldr	r5, [r4]
   1d480:	str	r3, [sp, #28]
   1d484:	cmp	r2, #0
   1d488:	bgt	1d4e4 <__assert_fail@plt+0xbd90>
   1d48c:	add	r3, r4, #8
   1d490:	str	r2, [sp, #36]	; 0x24
   1d494:	rsb	r2, r2, #1
   1d498:	cmp	r5, r3
   1d49c:	beq	1d5ac <__assert_fail@plt+0xbe58>
   1d4a0:	mov	r1, #8
   1d4a4:	mov	r0, r5
   1d4a8:	mvn	r3, #-2147483648	; 0x80000000
   1d4ac:	str	r1, [sp]
   1d4b0:	add	r1, sp, #36	; 0x24
   1d4b4:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d4b8:	mov	r5, r0
   1d4bc:	str	r0, [r4]
   1d4c0:	ldr	r0, [r4, #4]
   1d4c4:	mov	r1, #0
   1d4c8:	ldr	r2, [sp, #36]	; 0x24
   1d4cc:	sub	r2, r2, r0
   1d4d0:	add	r0, r5, r0, lsl #3
   1d4d4:	lsl	r2, r2, #3
   1d4d8:	bl	11610 <memset@plt>
   1d4dc:	ldr	r3, [sp, #36]	; 0x24
   1d4e0:	str	r3, [r4, #4]
   1d4e4:	ldr	ip, [r4, #16]
   1d4e8:	mvn	r3, #0
   1d4ec:	mov	r2, sl
   1d4f0:	ldr	r7, [r4, #20]
   1d4f4:	ldr	fp, [pc, #220]	; 1d5d8 <__assert_fail@plt+0xbe84>
   1d4f8:	ldr	r9, [r5]
   1d4fc:	orr	r7, r7, #1
   1d500:	ldr	r6, [r5, #4]
   1d504:	str	ip, [sp]
   1d508:	ldr	ip, [r4, #56]	; 0x38
   1d50c:	mov	r1, r9
   1d510:	stmib	sp, {r7, fp}
   1d514:	ldr	lr, [r4, #60]	; 0x3c
   1d518:	mov	r0, r6
   1d51c:	str	ip, [sp, #12]
   1d520:	str	lr, [sp, #16]
   1d524:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d528:	cmp	r9, r0
   1d52c:	bhi	1d584 <__assert_fail@plt+0xbe30>
   1d530:	add	r9, r0, #1
   1d534:	movw	r3, #25092	; 0x6204
   1d538:	movt	r3, #3
   1d53c:	cmp	r6, r3
   1d540:	str	r9, [r5]
   1d544:	beq	1d550 <__assert_fail@plt+0xbdfc>
   1d548:	mov	r0, r6
   1d54c:	bl	18d2c <__assert_fail@plt+0x75d8>
   1d550:	mov	r0, r9
   1d554:	bl	1e6a0 <__assert_fail@plt+0xcf4c>
   1d558:	ldr	r3, [r4, #16]
   1d55c:	mov	r2, sl
   1d560:	mov	r1, r9
   1d564:	mov	r6, r0
   1d568:	ldr	lr, [r4, #56]	; 0x38
   1d56c:	ldr	ip, [r4, #60]	; 0x3c
   1d570:	str	r0, [r5, #4]
   1d574:	stm	sp, {r3, r7, fp, lr}
   1d578:	mvn	r3, #0
   1d57c:	str	ip, [sp, #16]
   1d580:	bl	19cfc <__assert_fail@plt+0x85a8>
   1d584:	ldr	r3, [sp, #28]
   1d588:	mov	r0, r6
   1d58c:	str	r3, [r8]
   1d590:	add	sp, sp, #44	; 0x2c
   1d594:	ldrd	r4, [sp]
   1d598:	ldrd	r6, [sp, #8]
   1d59c:	ldrd	r8, [sp, #16]
   1d5a0:	ldrd	sl, [sp, #24]
   1d5a4:	add	sp, sp, #32
   1d5a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5ac:	mov	r0, #8
   1d5b0:	mvn	r3, #-2147483648	; 0x80000000
   1d5b4:	add	r1, sp, #36	; 0x24
   1d5b8:	str	r0, [sp]
   1d5bc:	mov	r0, #0
   1d5c0:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d5c4:	ldrd	r2, [r4, #8]
   1d5c8:	mov	r5, r0
   1d5cc:	str	r0, [r4]
   1d5d0:	strd	r2, [r0]
   1d5d4:	b	1d4c0 <__assert_fail@plt+0xbd6c>
   1d5d8:	muleq	r3, ip, r1
   1d5dc:	mov	r3, #0
   1d5e0:	str	r3, [r0]
   1d5e4:	str	r3, [r0, #4]
   1d5e8:	bx	lr
   1d5ec:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d5f0:	cmp	r2, #0
   1d5f4:	mov	r5, r0
   1d5f8:	strd	r6, [sp, #8]
   1d5fc:	addne	r2, r1, r2
   1d600:	mov	r6, r3
   1d604:	strd	r8, [sp, #16]
   1d608:	mov	r8, #0
   1d60c:	mov	r9, #0
   1d610:	str	lr, [sp, #24]
   1d614:	sub	sp, sp, #52	; 0x34
   1d618:	subne	r1, r1, #1
   1d61c:	add	ip, sp, #16
   1d620:	subne	lr, r2, #1
   1d624:	movne	r4, #1
   1d628:	strd	r8, [sp, #16]
   1d62c:	strd	r8, [ip, #8]
   1d630:	strd	r8, [ip, #16]
   1d634:	strd	r8, [ip, #24]
   1d638:	beq	1d65c <__assert_fail@plt+0xbf08>
   1d63c:	ldrb	r3, [r1, #1]!
   1d640:	lsr	r0, r3, #5
   1d644:	and	r3, r3, #31
   1d648:	cmp	lr, r1
   1d64c:	ldr	r2, [ip, r0, lsl #2]
   1d650:	orr	r3, r2, r4, lsl r3
   1d654:	str	r3, [ip, r0, lsl #2]
   1d658:	bne	1d63c <__assert_fail@plt+0xbee8>
   1d65c:	ldr	r3, [r5, #4]
   1d660:	ldr	r2, [r5, #8]
   1d664:	cmp	r3, r2
   1d668:	bcs	1d6b8 <__assert_fail@plt+0xbf64>
   1d66c:	add	r2, r3, #1
   1d670:	str	r2, [r5, #4]
   1d674:	ldrb	r4, [r3]
   1d678:	b	1d684 <__assert_fail@plt+0xbf30>
   1d67c:	str	r1, [r5, #4]
   1d680:	ldrb	r4, [r3]
   1d684:	lsr	r3, r4, #5
   1d688:	add	r2, sp, #48	; 0x30
   1d68c:	and	r1, r4, #31
   1d690:	add	r3, r2, r3, lsl #2
   1d694:	ldr	r2, [r3, #-32]	; 0xffffffe0
   1d698:	lsr	r3, r2, r1
   1d69c:	tst	r3, #1
   1d6a0:	beq	1d6c8 <__assert_fail@plt+0xbf74>
   1d6a4:	ldr	r3, [r5, #4]
   1d6a8:	ldr	r2, [r5, #8]
   1d6ac:	add	r1, r3, #1
   1d6b0:	cmp	r3, r2
   1d6b4:	bcc	1d67c <__assert_fail@plt+0xbf28>
   1d6b8:	mov	r0, r5
   1d6bc:	bl	116ac <__uflow@plt>
   1d6c0:	subs	r4, r0, #0
   1d6c4:	bge	1d684 <__assert_fail@plt+0xbf30>
   1d6c8:	ldm	r6, {r3, r9}
   1d6cc:	mov	r7, #0
   1d6d0:	mov	r8, #1
   1d6d4:	str	r3, [sp, #12]
   1d6d8:	b	1d730 <__assert_fail@plt+0xbfdc>
   1d6dc:	lsr	r3, r4, #5
   1d6e0:	mov	r0, r7
   1d6e4:	add	r2, sp, #48	; 0x30
   1d6e8:	cmp	r4, #0
   1d6ec:	and	r1, r4, #31
   1d6f0:	add	r3, r2, r3, lsl #2
   1d6f4:	add	r7, r7, #1
   1d6f8:	add	r2, r9, r0
   1d6fc:	blt	1d790 <__assert_fail@plt+0xc03c>
   1d700:	ldr	r3, [r3, #-32]	; 0xffffffe0
   1d704:	lsr	r3, r3, r1
   1d708:	tst	r3, #1
   1d70c:	bne	1d790 <__assert_fail@plt+0xc03c>
   1d710:	strb	r4, [r2]
   1d714:	ldr	r3, [r5, #4]
   1d718:	ldr	r2, [r5, #8]
   1d71c:	add	r1, r3, #1
   1d720:	cmp	r3, r2
   1d724:	bcs	1d76c <__assert_fail@plt+0xc018>
   1d728:	str	r1, [r5, #4]
   1d72c:	ldrb	r4, [r3]
   1d730:	clz	r3, r7
   1d734:	lsr	r3, r3, #5
   1d738:	ands	r3, r3, r4, lsr #31
   1d73c:	bne	1d788 <__assert_fail@plt+0xc034>
   1d740:	ldr	r3, [sp, #12]
   1d744:	cmp	r3, r7
   1d748:	bne	1d6dc <__assert_fail@plt+0xbf88>
   1d74c:	mov	r0, r9
   1d750:	mvn	r3, #0
   1d754:	str	r8, [sp]
   1d758:	mov	r2, #1
   1d75c:	add	r1, sp, #12
   1d760:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d764:	mov	r9, r0
   1d768:	b	1d6dc <__assert_fail@plt+0xbf88>
   1d76c:	mov	r0, r5
   1d770:	bl	116ac <__uflow@plt>
   1d774:	clz	r3, r7
   1d778:	mov	r4, r0
   1d77c:	lsr	r3, r3, #5
   1d780:	ands	r3, r3, r4, lsr #31
   1d784:	beq	1d740 <__assert_fail@plt+0xbfec>
   1d788:	mvn	r0, #0
   1d78c:	b	1d7a0 <__assert_fail@plt+0xc04c>
   1d790:	mov	r3, #0
   1d794:	strb	r3, [r2]
   1d798:	ldr	r3, [sp, #12]
   1d79c:	stm	r6, {r3, r9}
   1d7a0:	add	sp, sp, #52	; 0x34
   1d7a4:	ldrd	r4, [sp]
   1d7a8:	ldrd	r6, [sp, #8]
   1d7ac:	ldrd	r8, [sp, #16]
   1d7b0:	add	sp, sp, #24
   1d7b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d7bc:	cmp	r1, #0
   1d7c0:	strd	r6, [sp, #8]
   1d7c4:	strd	r8, [sp, #16]
   1d7c8:	strd	sl, [sp, #24]
   1d7cc:	mov	fp, r3
   1d7d0:	moveq	r3, #64	; 0x40
   1d7d4:	str	lr, [sp, #32]
   1d7d8:	sub	sp, sp, #36	; 0x24
   1d7dc:	str	r0, [sp, #8]
   1d7e0:	addne	r0, r1, #1
   1d7e4:	moveq	r0, r3
   1d7e8:	movne	r3, r0
   1d7ec:	mov	r1, #4
   1d7f0:	str	r2, [sp, #12]
   1d7f4:	str	r3, [sp, #20]
   1d7f8:	bl	1e7bc <__assert_fail@plt+0xd068>
   1d7fc:	mov	r8, r0
   1d800:	mov	r1, #4
   1d804:	ldr	r0, [sp, #20]
   1d808:	bl	1e7bc <__assert_fail@plt+0xd068>
   1d80c:	mov	r3, #0
   1d810:	mov	r9, r0
   1d814:	mov	r5, r3
   1d818:	str	r3, [sp, #24]
   1d81c:	str	r3, [sp, #28]
   1d820:	b	1d850 <__assert_fail@plt+0xc0fc>
   1d824:	cmn	r0, #1
   1d828:	beq	1d8c8 <__assert_fail@plt+0xc174>
   1d82c:	mov	r1, #1
   1d830:	mov	r0, r7
   1d834:	bl	1e7bc <__assert_fail@plt+0xd068>
   1d838:	add	r5, r5, #1
   1d83c:	mov	r2, r7
   1d840:	ldr	r1, [sp, #28]
   1d844:	str	r6, [sl]
   1d848:	bl	113f4 <memcpy@plt>
   1d84c:	str	r0, [r4]
   1d850:	mov	r2, fp
   1d854:	add	r3, sp, #24
   1d858:	ldrd	r0, [sp, #8]
   1d85c:	bl	1d5ec <__assert_fail@plt+0xbe98>
   1d860:	ldr	r2, [sp, #20]
   1d864:	lsl	r4, r5, #2
   1d868:	mov	r6, r0
   1d86c:	add	r7, r0, #1
   1d870:	add	sl, r9, r4
   1d874:	add	r4, r8, r4
   1d878:	cmp	r2, r5
   1d87c:	bgt	1d824 <__assert_fail@plt+0xc0d0>
   1d880:	mov	r2, #4
   1d884:	mov	r0, r8
   1d888:	lsl	r4, r5, #2
   1d88c:	mvn	r3, #0
   1d890:	add	r1, sp, #20
   1d894:	str	r2, [sp]
   1d898:	mov	r2, #1
   1d89c:	bl	1e944 <__assert_fail@plt+0xd1f0>
   1d8a0:	mov	r8, r0
   1d8a4:	mov	r2, #4
   1d8a8:	ldr	r1, [sp, #20]
   1d8ac:	mov	r0, r9
   1d8b0:	bl	1e73c <__assert_fail@plt+0xcfe8>
   1d8b4:	cmn	r6, #1
   1d8b8:	add	sl, r0, r4
   1d8bc:	mov	r9, r0
   1d8c0:	add	r4, r8, r4
   1d8c4:	bne	1d82c <__assert_fail@plt+0xc0d8>
   1d8c8:	mov	r2, #0
   1d8cc:	str	r2, [r4]
   1d8d0:	str	r2, [sl]
   1d8d4:	ldr	r0, [sp, #28]
   1d8d8:	bl	18d2c <__assert_fail@plt+0x75d8>
   1d8dc:	ldr	r3, [sp, #76]	; 0x4c
   1d8e0:	cmp	r3, #0
   1d8e4:	ldr	r3, [sp, #72]	; 0x48
   1d8e8:	str	r8, [r3]
   1d8ec:	beq	1d918 <__assert_fail@plt+0xc1c4>
   1d8f0:	ldr	r3, [sp, #76]	; 0x4c
   1d8f4:	str	r9, [r3]
   1d8f8:	mov	r0, r5
   1d8fc:	add	sp, sp, #36	; 0x24
   1d900:	ldrd	r4, [sp]
   1d904:	ldrd	r6, [sp, #8]
   1d908:	ldrd	r8, [sp, #16]
   1d90c:	ldrd	sl, [sp, #24]
   1d910:	add	sp, sp, #32
   1d914:	pop	{pc}		; (ldr pc, [sp], #4)
   1d918:	mov	r0, r9
   1d91c:	bl	18d2c <__assert_fail@plt+0x75d8>
   1d920:	b	1d8f8 <__assert_fail@plt+0xc1a4>
   1d924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d928:	mov	r5, #0
   1d92c:	movt	r5, #32752	; 0x7ff0
   1d930:	mov	r4, r2
   1d934:	strd	r6, [sp, #8]
   1d938:	mov	r7, r1
   1d93c:	str	r8, [sp, #16]
   1d940:	mov	r8, r0
   1d944:	str	lr, [sp, #20]
   1d948:	mov	r2, r4
   1d94c:	mov	r1, r7
   1d950:	mov	r0, r8
   1d954:	bl	11634 <write@plt>
   1d958:	subs	r6, r0, #0
   1d95c:	bge	1d990 <__assert_fail@plt+0xc23c>
   1d960:	bl	115e0 <__errno_location@plt>
   1d964:	ldr	r2, [r0]
   1d968:	cmp	r2, #4
   1d96c:	beq	1d948 <__assert_fail@plt+0xc1f4>
   1d970:	sub	r3, r2, #22
   1d974:	cmp	r4, r5
   1d978:	clz	r3, r3
   1d97c:	mov	r4, r5
   1d980:	lsr	r3, r3, #5
   1d984:	movls	r3, #0
   1d988:	cmp	r3, #0
   1d98c:	bne	1d948 <__assert_fail@plt+0xc1f4>
   1d990:	mov	r0, r6
   1d994:	ldrd	r4, [sp]
   1d998:	ldrd	r6, [sp, #8]
   1d99c:	ldr	r8, [sp, #16]
   1d9a0:	add	sp, sp, #20
   1d9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9a8:	strd	r4, [sp, #-16]!
   1d9ac:	mov	r4, r1
   1d9b0:	mov	r1, #0
   1d9b4:	mov	r2, r4
   1d9b8:	mov	r5, r0
   1d9bc:	str	r6, [sp, #8]
   1d9c0:	str	lr, [sp, #12]
   1d9c4:	bl	11658 <memchr@plt>
   1d9c8:	cmp	r0, #0
   1d9cc:	ldr	r6, [sp, #8]
   1d9d0:	subne	r0, r0, r5
   1d9d4:	moveq	r0, r4
   1d9d8:	ldrd	r4, [sp]
   1d9dc:	add	sp, sp, #12
   1d9e0:	addne	r0, r0, #1
   1d9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9e8:	movw	r3, #19600	; 0x4c90
   1d9ec:	movt	r3, #2
   1d9f0:	str	r4, [sp, #-8]!
   1d9f4:	movw	r1, #19620	; 0x4ca4
   1d9f8:	movt	r1, #2
   1d9fc:	str	lr, [sp, #4]
   1da00:	movw	r0, #19288	; 0x4b58
   1da04:	movt	r0, #2
   1da08:	mov	r2, #163	; 0xa3
   1da0c:	bl	11754 <__assert_fail@plt>
   1da10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1da14:	strd	r6, [sp, #8]
   1da18:	mov	r7, r1
   1da1c:	strd	r8, [sp, #16]
   1da20:	strd	sl, [sp, #24]
   1da24:	str	lr, [sp, #32]
   1da28:	sub	sp, sp, #76	; 0x4c
   1da2c:	bl	11448 <strdup@plt>
   1da30:	subs	r5, r0, #0
   1da34:	beq	1ded4 <__assert_fail@plt+0xc780>
   1da38:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1da3c:	cmp	r0, #1
   1da40:	bls	1dc6c <__assert_fail@plt+0xc518>
   1da44:	cmp	r7, #0
   1da48:	bne	1dd5c <__assert_fail@plt+0xc608>
   1da4c:	mov	r0, r5
   1da50:	str	r5, [sp, #32]
   1da54:	mov	sl, #0
   1da58:	bl	115b0 <strlen@plt>
   1da5c:	add	fp, r5, r0
   1da60:	mov	r1, #0
   1da64:	mov	r0, #0
   1da68:	cmp	fp, r5
   1da6c:	str	fp, [sp, #12]
   1da70:	strb	sl, [sp, #16]
   1da74:	strd	r0, [sp, #20]
   1da78:	strb	sl, [sp, #28]
   1da7c:	bls	1dc28 <__assert_fail@plt+0xc4d4>
   1da80:	movw	r3, #20460	; 0x4fec
   1da84:	movt	r3, #2
   1da88:	mov	r7, sl
   1da8c:	mov	r4, r5
   1da90:	mov	r6, r5
   1da94:	mov	r9, #1
   1da98:	str	r3, [sp, #4]
   1da9c:	b	1dad4 <__assert_fail@plt+0xc380>
   1daa0:	ldrb	r3, [sp, #40]	; 0x28
   1daa4:	cmp	r3, #0
   1daa8:	beq	1db54 <__assert_fail@plt+0xc400>
   1daac:	ldr	r0, [sp, #44]	; 0x2c
   1dab0:	bl	115a4 <iswspace@plt>
   1dab4:	clz	r7, r0
   1dab8:	lsr	r7, r7, #5
   1dabc:	mov	r3, #0
   1dac0:	cmp	r4, fp
   1dac4:	strb	r3, [sp, #28]
   1dac8:	str	r4, [sp, #32]
   1dacc:	bcs	1dd34 <__assert_fail@plt+0xc5e0>
   1dad0:	mov	r6, r4
   1dad4:	ldrb	r3, [sp, #16]
   1dad8:	cmp	r3, #0
   1dadc:	addne	r8, sp, #20
   1dae0:	bne	1db74 <__assert_fail@plt+0xc420>
   1dae4:	ldrb	r3, [r6]
   1dae8:	ldr	r2, [sp, #4]
   1daec:	lsr	r1, r3, #5
   1daf0:	and	r3, r3, #31
   1daf4:	ldr	r1, [r2, r1, lsl #2]
   1daf8:	lsr	r3, r1, r3
   1dafc:	tst	r3, #1
   1db00:	beq	1db5c <__assert_fail@plt+0xc408>
   1db04:	str	r9, [sp, #36]	; 0x24
   1db08:	add	r4, r4, #1
   1db0c:	ldrb	r3, [r6]
   1db10:	strb	r9, [sp, #40]	; 0x28
   1db14:	str	r3, [sp, #44]	; 0x2c
   1db18:	cmp	r7, #0
   1db1c:	strb	r9, [sp, #28]
   1db20:	beq	1daa0 <__assert_fail@plt+0xc34c>
   1db24:	cmp	r7, #1
   1db28:	beq	1dc48 <__assert_fail@plt+0xc4f4>
   1db2c:	cmp	r7, #2
   1db30:	bne	1db54 <__assert_fail@plt+0xc400>
   1db34:	ldrb	r3, [sp, #40]	; 0x28
   1db38:	cmp	r3, #0
   1db3c:	beq	1db54 <__assert_fail@plt+0xc400>
   1db40:	ldr	r0, [sp, #44]	; 0x2c
   1db44:	bl	115a4 <iswspace@plt>
   1db48:	cmp	r0, #0
   1db4c:	moveq	r7, #1
   1db50:	b	1dabc <__assert_fail@plt+0xc368>
   1db54:	mov	r7, #1
   1db58:	b	1dabc <__assert_fail@plt+0xc368>
   1db5c:	add	r8, sp, #20
   1db60:	mov	r0, r8
   1db64:	bl	1140c <mbsinit@plt>
   1db68:	cmp	r0, #0
   1db6c:	beq	1def8 <__assert_fail@plt+0xc7a4>
   1db70:	strb	r9, [sp, #16]
   1db74:	sub	r2, fp, r6
   1db78:	mov	r1, r6
   1db7c:	mov	r3, r8
   1db80:	add	r0, sp, #44	; 0x2c
   1db84:	bl	1f208 <__assert_fail@plt+0xdab4>
   1db88:	cmn	r0, #1
   1db8c:	mov	r4, r0
   1db90:	str	r0, [sp, #36]	; 0x24
   1db94:	beq	1dd18 <__assert_fail@plt+0xc5c4>
   1db98:	cmn	r0, #2
   1db9c:	ldr	r6, [sp, #32]
   1dba0:	beq	1dd40 <__assert_fail@plt+0xc5ec>
   1dba4:	cmp	r0, #0
   1dba8:	bne	1dbcc <__assert_fail@plt+0xc478>
   1dbac:	str	r9, [sp, #36]	; 0x24
   1dbb0:	ldrb	r3, [r6]
   1dbb4:	cmp	r3, #0
   1dbb8:	bne	1ded8 <__assert_fail@plt+0xc784>
   1dbbc:	ldr	r3, [sp, #44]	; 0x2c
   1dbc0:	cmp	r3, #0
   1dbc4:	bne	1dec8 <__assert_fail@plt+0xc774>
   1dbc8:	mov	r4, #1
   1dbcc:	mov	r0, r8
   1dbd0:	strb	r9, [sp, #40]	; 0x28
   1dbd4:	add	r4, r6, r4
   1dbd8:	bl	1140c <mbsinit@plt>
   1dbdc:	cmp	r0, #0
   1dbe0:	ldr	fp, [sp, #12]
   1dbe4:	movne	r3, #0
   1dbe8:	strbne	r3, [sp, #16]
   1dbec:	b	1db18 <__assert_fail@plt+0xc3c4>
   1dbf0:	ldr	r4, [sp, #32]
   1dbf4:	mov	r3, #1
   1dbf8:	mov	r2, #0
   1dbfc:	strb	r3, [sp, #28]
   1dc00:	str	r3, [sp, #36]	; 0x24
   1dc04:	strb	r2, [sp, #40]	; 0x28
   1dc08:	mov	r0, r4
   1dc0c:	bl	115b0 <strlen@plt>
   1dc10:	add	r2, r0, #1
   1dc14:	mov	r1, r4
   1dc18:	mov	r0, r5
   1dc1c:	bl	113c4 <memmove@plt>
   1dc20:	cmp	r7, #1
   1dc24:	bne	1da4c <__assert_fail@plt+0xc2f8>
   1dc28:	mov	r0, r5
   1dc2c:	add	sp, sp, #76	; 0x4c
   1dc30:	ldrd	r4, [sp]
   1dc34:	ldrd	r6, [sp, #8]
   1dc38:	ldrd	r8, [sp, #16]
   1dc3c:	ldrd	sl, [sp, #24]
   1dc40:	add	sp, sp, #32
   1dc44:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc48:	ldrb	r3, [sp, #40]	; 0x28
   1dc4c:	cmp	r3, #0
   1dc50:	beq	1dabc <__assert_fail@plt+0xc368>
   1dc54:	ldr	r0, [sp, #44]	; 0x2c
   1dc58:	bl	115a4 <iswspace@plt>
   1dc5c:	cmp	r0, #0
   1dc60:	movne	sl, r6
   1dc64:	movne	r7, #2
   1dc68:	b	1dabc <__assert_fail@plt+0xc368>
   1dc6c:	cmp	r7, #0
   1dc70:	beq	1dccc <__assert_fail@plt+0xc578>
   1dc74:	ldrb	r4, [r5]
   1dc78:	cmp	r4, #0
   1dc7c:	beq	1decc <__assert_fail@plt+0xc778>
   1dc80:	bl	1158c <__ctype_b_loc@plt>
   1dc84:	mov	r6, r5
   1dc88:	ldr	r2, [r0]
   1dc8c:	b	1dc9c <__assert_fail@plt+0xc548>
   1dc90:	ldrb	r4, [r6, #1]!
   1dc94:	cmp	r4, #0
   1dc98:	beq	1dcac <__assert_fail@plt+0xc558>
   1dc9c:	lsl	r4, r4, #1
   1dca0:	ldrh	r3, [r2, r4]
   1dca4:	tst	r3, #8192	; 0x2000
   1dca8:	bne	1dc90 <__assert_fail@plt+0xc53c>
   1dcac:	mov	r0, r6
   1dcb0:	bl	115b0 <strlen@plt>
   1dcb4:	add	r2, r0, #1
   1dcb8:	mov	r1, r6
   1dcbc:	mov	r0, r5
   1dcc0:	bl	113c4 <memmove@plt>
   1dcc4:	cmp	r7, #1
   1dcc8:	beq	1dc28 <__assert_fail@plt+0xc4d4>
   1dccc:	mov	r0, r5
   1dcd0:	bl	115b0 <strlen@plt>
   1dcd4:	sub	r0, r0, #1
   1dcd8:	adds	r4, r5, r0
   1dcdc:	bcs	1dc28 <__assert_fail@plt+0xc4d4>
   1dce0:	bl	1158c <__ctype_b_loc@plt>
   1dce4:	mov	r3, r4
   1dce8:	mov	ip, #0
   1dcec:	ldr	r1, [r0]
   1dcf0:	b	1dd00 <__assert_fail@plt+0xc5ac>
   1dcf4:	cmp	r5, r3
   1dcf8:	strb	ip, [r3, #1]
   1dcfc:	bhi	1dc28 <__assert_fail@plt+0xc4d4>
   1dd00:	ldrb	r2, [r3], #-1
   1dd04:	lsl	r2, r2, #1
   1dd08:	ldrh	r2, [r1, r2]
   1dd0c:	tst	r2, #8192	; 0x2000
   1dd10:	bne	1dcf4 <__assert_fail@plt+0xc5a0>
   1dd14:	b	1dc28 <__assert_fail@plt+0xc4d4>
   1dd18:	mov	r3, #0
   1dd1c:	str	r9, [sp, #36]	; 0x24
   1dd20:	ldr	r6, [sp, #32]
   1dd24:	strb	r3, [sp, #40]	; 0x28
   1dd28:	ldr	fp, [sp, #12]
   1dd2c:	add	r4, r6, #1
   1dd30:	b	1db18 <__assert_fail@plt+0xc3c4>
   1dd34:	cmp	r7, #2
   1dd38:	strbeq	r3, [sl]
   1dd3c:	b	1dc28 <__assert_fail@plt+0xc4d4>
   1dd40:	ldr	r4, [sp, #12]
   1dd44:	mov	r3, #0
   1dd48:	strb	r3, [sp, #40]	; 0x28
   1dd4c:	sub	r3, r4, r6
   1dd50:	mov	fp, r4
   1dd54:	str	r3, [sp, #36]	; 0x24
   1dd58:	b	1db18 <__assert_fail@plt+0xc3c4>
   1dd5c:	mov	r0, r5
   1dd60:	str	r5, [sp, #32]
   1dd64:	bl	115b0 <strlen@plt>
   1dd68:	add	r6, r5, r0
   1dd6c:	mov	r3, #0
   1dd70:	mov	r0, #0
   1dd74:	mov	r1, #0
   1dd78:	cmp	r6, r5
   1dd7c:	str	r6, [sp, #12]
   1dd80:	movls	r4, r5
   1dd84:	strb	r3, [sp, #16]
   1dd88:	strd	r0, [sp, #20]
   1dd8c:	strb	r3, [sp, #28]
   1dd90:	bls	1dc08 <__assert_fail@plt+0xc4b4>
   1dd94:	movw	sl, #20460	; 0x4fec
   1dd98:	movt	sl, #2
   1dd9c:	mov	r4, r5
   1dda0:	mov	r9, #1
   1dda4:	b	1de08 <__assert_fail@plt+0xc6b4>
   1dda8:	ldrb	r3, [r4]
   1ddac:	lsr	r2, r3, #5
   1ddb0:	and	r3, r3, #31
   1ddb4:	ldr	r2, [sl, r2, lsl #2]
   1ddb8:	lsr	r3, r2, r3
   1ddbc:	tst	r3, #1
   1ddc0:	beq	1de70 <__assert_fail@plt+0xc71c>
   1ddc4:	str	r9, [sp, #36]	; 0x24
   1ddc8:	ldrb	r6, [r4]
   1ddcc:	strb	r9, [sp, #28]
   1ddd0:	strb	r9, [sp, #40]	; 0x28
   1ddd4:	str	r6, [sp, #44]	; 0x2c
   1ddd8:	mov	r0, r6
   1dddc:	bl	115a4 <iswspace@plt>
   1dde0:	cmp	r0, #0
   1dde4:	beq	1dc08 <__assert_fail@plt+0xc4b4>
   1dde8:	ldr	r6, [sp, #12]
   1ddec:	mov	r2, #0
   1ddf0:	ldr	r3, [sp, #36]	; 0x24
   1ddf4:	strb	r2, [sp, #28]
   1ddf8:	add	r4, r4, r3
   1ddfc:	cmp	r4, r6
   1de00:	str	r4, [sp, #32]
   1de04:	bcs	1dc08 <__assert_fail@plt+0xc4b4>
   1de08:	ldrb	r3, [sp, #16]
   1de0c:	cmp	r3, #0
   1de10:	addne	r8, sp, #20
   1de14:	beq	1dda8 <__assert_fail@plt+0xc654>
   1de18:	sub	r2, r6, r4
   1de1c:	mov	r1, r4
   1de20:	mov	r3, r8
   1de24:	add	r0, sp, #44	; 0x2c
   1de28:	bl	1f208 <__assert_fail@plt+0xdab4>
   1de2c:	cmn	r0, #1
   1de30:	str	r0, [sp, #36]	; 0x24
   1de34:	beq	1dbf0 <__assert_fail@plt+0xc49c>
   1de38:	cmn	r0, #2
   1de3c:	ldr	r4, [sp, #32]
   1de40:	beq	1de8c <__assert_fail@plt+0xc738>
   1de44:	cmp	r0, #0
   1de48:	beq	1deac <__assert_fail@plt+0xc758>
   1de4c:	ldr	r6, [sp, #44]	; 0x2c
   1de50:	mov	r0, r8
   1de54:	strb	r9, [sp, #40]	; 0x28
   1de58:	bl	1140c <mbsinit@plt>
   1de5c:	cmp	r0, #0
   1de60:	strb	r9, [sp, #28]
   1de64:	movne	r3, #0
   1de68:	strbne	r3, [sp, #16]
   1de6c:	b	1ddd8 <__assert_fail@plt+0xc684>
   1de70:	add	r8, sp, #20
   1de74:	mov	r0, r8
   1de78:	bl	1140c <mbsinit@plt>
   1de7c:	cmp	r0, #0
   1de80:	beq	1def8 <__assert_fail@plt+0xc7a4>
   1de84:	strb	r9, [sp, #16]
   1de88:	b	1de18 <__assert_fail@plt+0xc6c4>
   1de8c:	ldr	r3, [sp, #12]
   1de90:	mov	r2, #0
   1de94:	mov	r1, #1
   1de98:	strb	r1, [sp, #28]
   1de9c:	strb	r2, [sp, #40]	; 0x28
   1dea0:	sub	r3, r3, r4
   1dea4:	str	r3, [sp, #36]	; 0x24
   1dea8:	b	1dc08 <__assert_fail@plt+0xc4b4>
   1deac:	str	r9, [sp, #36]	; 0x24
   1deb0:	ldrb	r3, [r4]
   1deb4:	cmp	r3, #0
   1deb8:	bne	1ded8 <__assert_fail@plt+0xc784>
   1debc:	ldr	r6, [sp, #44]	; 0x2c
   1dec0:	cmp	r6, #0
   1dec4:	beq	1de50 <__assert_fail@plt+0xc6fc>
   1dec8:	bl	1d9e8 <__assert_fail@plt+0xc294>
   1decc:	mov	r6, r5
   1ded0:	b	1dcac <__assert_fail@plt+0xc558>
   1ded4:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ded8:	movw	r3, #19600	; 0x4c90
   1dedc:	movt	r3, #2
   1dee0:	movw	r1, #19620	; 0x4ca4
   1dee4:	movt	r1, #2
   1dee8:	movw	r0, #19332	; 0x4b84
   1deec:	movt	r0, #2
   1def0:	mov	r2, #162	; 0xa2
   1def4:	bl	11754 <__assert_fail@plt>
   1def8:	movw	r3, #19600	; 0x4c90
   1defc:	movt	r3, #2
   1df00:	movw	r1, #19620	; 0x4ca4
   1df04:	movt	r1, #2
   1df08:	movw	r0, #19308	; 0x4b6c
   1df0c:	movt	r0, #2
   1df10:	mov	r2, #135	; 0x87
   1df14:	bl	11754 <__assert_fail@plt>
   1df18:	cmp	r1, #0
   1df1c:	strd	r4, [sp, #-16]!
   1df20:	mov	ip, r3
   1df24:	str	r6, [sp, #8]
   1df28:	mov	r4, r0
   1df2c:	str	lr, [sp, #12]
   1df30:	sub	sp, sp, #32
   1df34:	ldr	r5, [sp, #48]	; 0x30
   1df38:	ldr	r6, [sp, #52]	; 0x34
   1df3c:	beq	1e080 <__assert_fail@plt+0xc92c>
   1df40:	mov	r3, r1
   1df44:	mov	r1, #1
   1df48:	stm	sp, {r2, ip}
   1df4c:	movw	r2, #19636	; 0x4cb4
   1df50:	movt	r2, #2
   1df54:	bl	1164c <__fprintf_chk@plt>
   1df58:	mov	r2, #5
   1df5c:	movw	r1, #19656	; 0x4cc8
   1df60:	movt	r1, #2
   1df64:	mov	r0, #0
   1df68:	bl	11430 <dcgettext@plt>
   1df6c:	movw	ip, #2022	; 0x7e6
   1df70:	mov	r3, r0
   1df74:	mov	r1, #1
   1df78:	movw	r2, #20384	; 0x4fa0
   1df7c:	movt	r2, #2
   1df80:	mov	r0, r4
   1df84:	str	ip, [sp]
   1df88:	bl	1164c <__fprintf_chk@plt>
   1df8c:	mov	r1, r4
   1df90:	mov	r0, #10
   1df94:	bl	11424 <fputc_unlocked@plt>
   1df98:	mov	r2, #5
   1df9c:	movw	r1, #19660	; 0x4ccc
   1dfa0:	movt	r1, #2
   1dfa4:	mov	r0, #0
   1dfa8:	bl	11430 <dcgettext@plt>
   1dfac:	mov	r2, r0
   1dfb0:	mov	r1, #1
   1dfb4:	movw	r3, #19832	; 0x4d78
   1dfb8:	movt	r3, #2
   1dfbc:	mov	r0, r4
   1dfc0:	bl	1164c <__fprintf_chk@plt>
   1dfc4:	mov	r1, r4
   1dfc8:	mov	r0, #10
   1dfcc:	bl	11424 <fputc_unlocked@plt>
   1dfd0:	cmp	r6, #9
   1dfd4:	ldrls	pc, [pc, r6, lsl #2]
   1dfd8:	b	1e2ec <__assert_fail@plt+0xcb98>
   1dfdc:	andeq	lr, r1, ip, rrx
   1dfe0:	muleq	r1, ip, r0
   1dfe4:	ldrdeq	lr, [r1], -r8
   1dfe8:	andeq	lr, r1, r8, lsl r1
   1dfec:	andeq	lr, r1, r0, ror #2
   1dff0:	muleq	r1, r8, r1
   1dff4:	andeq	lr, r1, r0, ror #3
   1dff8:	andeq	lr, r1, r4, lsr r2
   1dffc:	andeq	lr, r1, ip, lsl #5
   1e000:	andeq	lr, r1, r4
   1e004:	movw	r1, #20136	; 0x4ea8
   1e008:	movt	r1, #2
   1e00c:	mov	r2, #5
   1e010:	mov	r0, #0
   1e014:	bl	11430 <dcgettext@plt>
   1e018:	ldr	lr, [r5, #4]
   1e01c:	mov	r2, r0
   1e020:	mov	r1, #1
   1e024:	mov	r0, r4
   1e028:	ldr	r3, [r5, #8]
   1e02c:	ldr	ip, [r5, #32]
   1e030:	str	lr, [sp]
   1e034:	ldr	lr, [r5, #12]
   1e038:	str	ip, [sp, #28]
   1e03c:	ldr	ip, [r5, #28]
   1e040:	str	r3, [sp, #4]
   1e044:	ldr	r3, [r5, #16]
   1e048:	str	lr, [sp, #8]
   1e04c:	ldr	lr, [r5, #20]
   1e050:	str	ip, [sp, #24]
   1e054:	ldr	ip, [r5, #24]
   1e058:	str	r3, [sp, #12]
   1e05c:	ldr	r3, [r5]
   1e060:	str	lr, [sp, #16]
   1e064:	str	ip, [sp, #20]
   1e068:	bl	1164c <__fprintf_chk@plt>
   1e06c:	add	sp, sp, #32
   1e070:	ldrd	r4, [sp]
   1e074:	ldr	r6, [sp, #8]
   1e078:	add	sp, sp, #12
   1e07c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e080:	mov	r3, r2
   1e084:	mov	r1, #1
   1e088:	str	ip, [sp]
   1e08c:	movw	r2, #19648	; 0x4cc0
   1e090:	movt	r2, #2
   1e094:	bl	1164c <__fprintf_chk@plt>
   1e098:	b	1df58 <__assert_fail@plt+0xc804>
   1e09c:	mov	r2, #5
   1e0a0:	movw	r1, #19868	; 0x4d9c
   1e0a4:	movt	r1, #2
   1e0a8:	mov	r0, #0
   1e0ac:	bl	11430 <dcgettext@plt>
   1e0b0:	ldr	r3, [r5]
   1e0b4:	mov	r2, r0
   1e0b8:	mov	r1, #1
   1e0bc:	mov	r0, r4
   1e0c0:	add	sp, sp, #32
   1e0c4:	ldrd	r4, [sp]
   1e0c8:	ldr	r6, [sp, #8]
   1e0cc:	ldr	lr, [sp, #12]
   1e0d0:	add	sp, sp, #16
   1e0d4:	b	1164c <__fprintf_chk@plt>
   1e0d8:	mov	r2, #5
   1e0dc:	movw	r1, #19884	; 0x4dac
   1e0e0:	movt	r1, #2
   1e0e4:	mov	r0, #0
   1e0e8:	bl	11430 <dcgettext@plt>
   1e0ec:	ldm	r5, {r3, ip}
   1e0f0:	mov	r2, r0
   1e0f4:	mov	r1, #1
   1e0f8:	mov	r0, r4
   1e0fc:	str	ip, [sp, #48]	; 0x30
   1e100:	add	sp, sp, #32
   1e104:	ldrd	r4, [sp]
   1e108:	ldr	r6, [sp, #8]
   1e10c:	ldr	lr, [sp, #12]
   1e110:	add	sp, sp, #16
   1e114:	b	1164c <__fprintf_chk@plt>
   1e118:	mov	r2, #5
   1e11c:	movw	r1, #19908	; 0x4dc4
   1e120:	movt	r1, #2
   1e124:	mov	r0, #0
   1e128:	bl	11430 <dcgettext@plt>
   1e12c:	ldm	r5, {r3, lr}
   1e130:	mov	r2, r0
   1e134:	mov	r1, #1
   1e138:	mov	r0, r4
   1e13c:	ldr	ip, [r5, #8]
   1e140:	str	lr, [sp, #48]	; 0x30
   1e144:	str	ip, [sp, #52]	; 0x34
   1e148:	add	sp, sp, #32
   1e14c:	ldrd	r4, [sp]
   1e150:	ldr	r6, [sp, #8]
   1e154:	ldr	lr, [sp, #12]
   1e158:	add	sp, sp, #16
   1e15c:	b	1164c <__fprintf_chk@plt>
   1e160:	mov	r2, #5
   1e164:	movw	r1, #19936	; 0x4de0
   1e168:	movt	r1, #2
   1e16c:	mov	r0, #0
   1e170:	bl	11430 <dcgettext@plt>
   1e174:	ldmib	r5, {r3, ip, lr}
   1e178:	mov	r2, r0
   1e17c:	mov	r1, #1
   1e180:	mov	r0, r4
   1e184:	str	r3, [sp]
   1e188:	ldr	r3, [r5]
   1e18c:	stmib	sp, {ip, lr}
   1e190:	bl	1164c <__fprintf_chk@plt>
   1e194:	b	1e06c <__assert_fail@plt+0xc918>
   1e198:	mov	r2, #5
   1e19c:	movw	r1, #19968	; 0x4e00
   1e1a0:	movt	r1, #2
   1e1a4:	mov	r0, #0
   1e1a8:	bl	11430 <dcgettext@plt>
   1e1ac:	ldmib	r5, {ip, lr}
   1e1b0:	mov	r2, r0
   1e1b4:	mov	r1, #1
   1e1b8:	mov	r0, r4
   1e1bc:	ldr	r3, [r5, #16]
   1e1c0:	str	ip, [sp]
   1e1c4:	ldr	ip, [r5, #12]
   1e1c8:	str	r3, [sp, #12]
   1e1cc:	ldr	r3, [r5]
   1e1d0:	str	lr, [sp, #4]
   1e1d4:	str	ip, [sp, #8]
   1e1d8:	bl	1164c <__fprintf_chk@plt>
   1e1dc:	b	1e06c <__assert_fail@plt+0xc918>
   1e1e0:	mov	r2, #5
   1e1e4:	movw	r1, #20004	; 0x4e24
   1e1e8:	movt	r1, #2
   1e1ec:	mov	r0, #0
   1e1f0:	bl	11430 <dcgettext@plt>
   1e1f4:	ldr	lr, [r5, #4]
   1e1f8:	mov	r2, r0
   1e1fc:	mov	r1, #1
   1e200:	mov	r0, r4
   1e204:	ldr	r3, [r5, #8]
   1e208:	ldr	ip, [r5, #20]
   1e20c:	str	lr, [sp]
   1e210:	ldr	lr, [r5, #12]
   1e214:	str	ip, [sp, #16]
   1e218:	ldr	ip, [r5, #16]
   1e21c:	str	r3, [sp, #4]
   1e220:	ldr	r3, [r5]
   1e224:	str	lr, [sp, #8]
   1e228:	str	ip, [sp, #12]
   1e22c:	bl	1164c <__fprintf_chk@plt>
   1e230:	b	1e06c <__assert_fail@plt+0xc918>
   1e234:	mov	r2, #5
   1e238:	movw	r1, #20044	; 0x4e4c
   1e23c:	movt	r1, #2
   1e240:	mov	r0, #0
   1e244:	bl	11430 <dcgettext@plt>
   1e248:	ldmib	r5, {r3, ip}
   1e24c:	mov	r2, r0
   1e250:	mov	r1, #1
   1e254:	mov	r0, r4
   1e258:	ldr	lr, [r5, #24]
   1e25c:	str	r3, [sp]
   1e260:	ldr	r3, [r5, #12]
   1e264:	str	lr, [sp, #20]
   1e268:	ldr	lr, [r5, #20]
   1e26c:	str	ip, [sp, #4]
   1e270:	ldr	ip, [r5, #16]
   1e274:	str	r3, [sp, #8]
   1e278:	ldr	r3, [r5]
   1e27c:	str	ip, [sp, #12]
   1e280:	str	lr, [sp, #16]
   1e284:	bl	1164c <__fprintf_chk@plt>
   1e288:	b	1e06c <__assert_fail@plt+0xc918>
   1e28c:	mov	r2, #5
   1e290:	movw	r1, #20088	; 0x4e78
   1e294:	movt	r1, #2
   1e298:	mov	r0, #0
   1e29c:	bl	11430 <dcgettext@plt>
   1e2a0:	ldmib	r5, {ip, lr}
   1e2a4:	mov	r2, r0
   1e2a8:	mov	r1, #1
   1e2ac:	mov	r0, r4
   1e2b0:	ldr	r3, [r5, #28]
   1e2b4:	str	ip, [sp]
   1e2b8:	ldr	ip, [r5, #12]
   1e2bc:	str	r3, [sp, #24]
   1e2c0:	ldr	r3, [r5, #24]
   1e2c4:	str	lr, [sp, #4]
   1e2c8:	ldr	lr, [r5, #16]
   1e2cc:	str	ip, [sp, #8]
   1e2d0:	ldr	ip, [r5, #20]
   1e2d4:	str	r3, [sp, #20]
   1e2d8:	ldr	r3, [r5]
   1e2dc:	str	lr, [sp, #12]
   1e2e0:	str	ip, [sp, #16]
   1e2e4:	bl	1164c <__fprintf_chk@plt>
   1e2e8:	b	1e06c <__assert_fail@plt+0xc918>
   1e2ec:	movw	r1, #20188	; 0x4edc
   1e2f0:	movt	r1, #2
   1e2f4:	b	1e00c <__assert_fail@plt+0xc8b8>
   1e2f8:	strd	r4, [sp, #-12]!
   1e2fc:	str	lr, [sp, #8]
   1e300:	sub	sp, sp, #12
   1e304:	ldr	r5, [sp, #24]
   1e308:	ldr	ip, [r5]
   1e30c:	cmp	ip, #0
   1e310:	beq	1e32c <__assert_fail@plt+0xcbd8>
   1e314:	mov	lr, r5
   1e318:	mov	ip, #0
   1e31c:	ldr	r4, [lr, #4]!
   1e320:	add	ip, ip, #1
   1e324:	cmp	r4, #0
   1e328:	bne	1e31c <__assert_fail@plt+0xcbc8>
   1e32c:	stm	sp, {r5, ip}
   1e330:	bl	1df18 <__assert_fail@plt+0xc7c4>
   1e334:	add	sp, sp, #12
   1e338:	ldrd	r4, [sp]
   1e33c:	add	sp, sp, #8
   1e340:	pop	{pc}		; (ldr pc, [sp], #4)
   1e344:	push	{lr}		; (str lr, [sp, #-4]!)
   1e348:	sub	sp, sp, #52	; 0x34
   1e34c:	ldr	ip, [sp, #56]	; 0x38
   1e350:	ldr	lr, [ip]
   1e354:	cmp	lr, #0
   1e358:	str	lr, [sp, #8]
   1e35c:	beq	1e3f4 <__assert_fail@plt+0xcca0>
   1e360:	ldr	lr, [ip, #4]
   1e364:	cmp	lr, #0
   1e368:	str	lr, [sp, #12]
   1e36c:	beq	1e408 <__assert_fail@plt+0xccb4>
   1e370:	ldr	lr, [ip, #8]
   1e374:	cmp	lr, #0
   1e378:	str	lr, [sp, #16]
   1e37c:	beq	1e410 <__assert_fail@plt+0xccbc>
   1e380:	ldr	lr, [ip, #12]
   1e384:	cmp	lr, #0
   1e388:	str	lr, [sp, #20]
   1e38c:	beq	1e418 <__assert_fail@plt+0xccc4>
   1e390:	ldr	lr, [ip, #16]
   1e394:	cmp	lr, #0
   1e398:	str	lr, [sp, #24]
   1e39c:	beq	1e420 <__assert_fail@plt+0xcccc>
   1e3a0:	ldr	lr, [ip, #20]
   1e3a4:	cmp	lr, #0
   1e3a8:	str	lr, [sp, #28]
   1e3ac:	beq	1e428 <__assert_fail@plt+0xccd4>
   1e3b0:	ldr	lr, [ip, #24]
   1e3b4:	cmp	lr, #0
   1e3b8:	str	lr, [sp, #32]
   1e3bc:	beq	1e430 <__assert_fail@plt+0xccdc>
   1e3c0:	ldr	lr, [ip, #28]
   1e3c4:	cmp	lr, #0
   1e3c8:	str	lr, [sp, #36]	; 0x24
   1e3cc:	beq	1e438 <__assert_fail@plt+0xcce4>
   1e3d0:	ldr	lr, [ip, #32]
   1e3d4:	cmp	lr, #0
   1e3d8:	str	lr, [sp, #40]	; 0x28
   1e3dc:	beq	1e440 <__assert_fail@plt+0xccec>
   1e3e0:	ldr	ip, [ip, #36]	; 0x24
   1e3e4:	cmp	ip, #0
   1e3e8:	str	ip, [sp, #44]	; 0x2c
   1e3ec:	movne	lr, #10
   1e3f0:	moveq	lr, #9
   1e3f4:	add	ip, sp, #8
   1e3f8:	stm	sp, {ip, lr}
   1e3fc:	bl	1df18 <__assert_fail@plt+0xc7c4>
   1e400:	add	sp, sp, #52	; 0x34
   1e404:	pop	{pc}		; (ldr pc, [sp], #4)
   1e408:	mov	lr, #1
   1e40c:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e410:	mov	lr, #2
   1e414:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e418:	mov	lr, #3
   1e41c:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e420:	mov	lr, #4
   1e424:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e428:	mov	lr, #5
   1e42c:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e430:	mov	lr, #6
   1e434:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e438:	mov	lr, #7
   1e43c:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e440:	mov	lr, #8
   1e444:	b	1e3f4 <__assert_fail@plt+0xcca0>
   1e448:	push	{r3}		; (str r3, [sp, #-4]!)
   1e44c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e450:	sub	sp, sp, #56	; 0x38
   1e454:	ldr	ip, [sp, #64]	; 0x40
   1e458:	add	r3, sp, #64	; 0x40
   1e45c:	str	r3, [sp, #12]
   1e460:	cmp	ip, #0
   1e464:	str	ip, [sp, #16]
   1e468:	beq	1e500 <__assert_fail@plt+0xcdac>
   1e46c:	ldr	ip, [sp, #68]	; 0x44
   1e470:	cmp	ip, #0
   1e474:	str	ip, [sp, #20]
   1e478:	beq	1e524 <__assert_fail@plt+0xcdd0>
   1e47c:	ldr	ip, [sp, #72]	; 0x48
   1e480:	cmp	ip, #0
   1e484:	str	ip, [sp, #24]
   1e488:	beq	1e52c <__assert_fail@plt+0xcdd8>
   1e48c:	ldr	ip, [sp, #76]	; 0x4c
   1e490:	cmp	ip, #0
   1e494:	str	ip, [sp, #28]
   1e498:	beq	1e534 <__assert_fail@plt+0xcde0>
   1e49c:	ldr	ip, [sp, #80]	; 0x50
   1e4a0:	cmp	ip, #0
   1e4a4:	str	ip, [sp, #32]
   1e4a8:	beq	1e53c <__assert_fail@plt+0xcde8>
   1e4ac:	ldr	ip, [sp, #84]	; 0x54
   1e4b0:	cmp	ip, #0
   1e4b4:	str	ip, [sp, #36]	; 0x24
   1e4b8:	beq	1e544 <__assert_fail@plt+0xcdf0>
   1e4bc:	ldr	ip, [sp, #88]	; 0x58
   1e4c0:	cmp	ip, #0
   1e4c4:	str	ip, [sp, #40]	; 0x28
   1e4c8:	beq	1e54c <__assert_fail@plt+0xcdf8>
   1e4cc:	ldr	ip, [sp, #92]	; 0x5c
   1e4d0:	cmp	ip, #0
   1e4d4:	str	ip, [sp, #44]	; 0x2c
   1e4d8:	beq	1e554 <__assert_fail@plt+0xce00>
   1e4dc:	ldr	ip, [sp, #96]	; 0x60
   1e4e0:	cmp	ip, #0
   1e4e4:	str	ip, [sp, #48]	; 0x30
   1e4e8:	beq	1e55c <__assert_fail@plt+0xce08>
   1e4ec:	ldr	r3, [sp, #100]	; 0x64
   1e4f0:	cmp	r3, #0
   1e4f4:	str	r3, [sp, #52]	; 0x34
   1e4f8:	movne	ip, #10
   1e4fc:	moveq	ip, #9
   1e500:	ldr	r3, [sp, #60]	; 0x3c
   1e504:	add	lr, sp, #16
   1e508:	str	lr, [sp]
   1e50c:	str	ip, [sp, #4]
   1e510:	bl	1df18 <__assert_fail@plt+0xc7c4>
   1e514:	add	sp, sp, #56	; 0x38
   1e518:	pop	{lr}		; (ldr lr, [sp], #4)
   1e51c:	add	sp, sp, #4
   1e520:	bx	lr
   1e524:	mov	ip, #1
   1e528:	b	1e500 <__assert_fail@plt+0xcdac>
   1e52c:	mov	ip, #2
   1e530:	b	1e500 <__assert_fail@plt+0xcdac>
   1e534:	mov	ip, #3
   1e538:	b	1e500 <__assert_fail@plt+0xcdac>
   1e53c:	mov	ip, #4
   1e540:	b	1e500 <__assert_fail@plt+0xcdac>
   1e544:	mov	ip, #5
   1e548:	b	1e500 <__assert_fail@plt+0xcdac>
   1e54c:	mov	ip, #6
   1e550:	b	1e500 <__assert_fail@plt+0xcdac>
   1e554:	mov	ip, #7
   1e558:	b	1e500 <__assert_fail@plt+0xcdac>
   1e55c:	mov	ip, #8
   1e560:	b	1e500 <__assert_fail@plt+0xcdac>
   1e564:	movw	r3, #25060	; 0x61e4
   1e568:	movt	r3, #3
   1e56c:	str	r4, [sp, #-8]!
   1e570:	mov	r0, #10
   1e574:	ldr	r1, [r3]
   1e578:	str	lr, [sp, #4]
   1e57c:	bl	11424 <fputc_unlocked@plt>
   1e580:	mov	r2, #5
   1e584:	movw	r1, #20248	; 0x4f18
   1e588:	movt	r1, #2
   1e58c:	mov	r0, #0
   1e590:	bl	11430 <dcgettext@plt>
   1e594:	mov	r1, r0
   1e598:	movw	r2, #20268	; 0x4f2c
   1e59c:	movt	r2, #2
   1e5a0:	mov	r0, #1
   1e5a4:	bl	11628 <__printf_chk@plt>
   1e5a8:	mov	r2, #5
   1e5ac:	movw	r1, #20292	; 0x4f44
   1e5b0:	movt	r1, #2
   1e5b4:	mov	r0, #0
   1e5b8:	bl	11430 <dcgettext@plt>
   1e5bc:	mov	r1, r0
   1e5c0:	movw	r3, #18704	; 0x4910
   1e5c4:	movt	r3, #2
   1e5c8:	movw	r2, #18744	; 0x4938
   1e5cc:	movt	r2, #2
   1e5d0:	mov	r0, #1
   1e5d4:	bl	11628 <__printf_chk@plt>
   1e5d8:	mov	r2, #5
   1e5dc:	movw	r1, #20312	; 0x4f58
   1e5e0:	movt	r1, #2
   1e5e4:	mov	r0, #0
   1e5e8:	bl	11430 <dcgettext@plt>
   1e5ec:	mov	r1, r0
   1e5f0:	movw	r2, #20352	; 0x4f80
   1e5f4:	movt	r2, #2
   1e5f8:	mov	r0, #1
   1e5fc:	ldr	r4, [sp]
   1e600:	ldr	lr, [sp, #4]
   1e604:	add	sp, sp, #8
   1e608:	b	11628 <__printf_chk@plt>
   1e60c:	strd	r4, [sp, #-16]!
   1e610:	mov	r4, r0
   1e614:	mov	r5, r2
   1e618:	str	r6, [sp, #8]
   1e61c:	mov	r6, r1
   1e620:	str	lr, [sp, #12]
   1e624:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e628:	cmp	r0, #0
   1e62c:	beq	1e640 <__assert_fail@plt+0xceec>
   1e630:	ldrd	r4, [sp]
   1e634:	ldr	r6, [sp, #8]
   1e638:	add	sp, sp, #12
   1e63c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e640:	cmp	r4, #0
   1e644:	beq	1e654 <__assert_fail@plt+0xcf00>
   1e648:	cmp	r6, #0
   1e64c:	cmpne	r5, #0
   1e650:	beq	1e630 <__assert_fail@plt+0xcedc>
   1e654:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e658:	str	r4, [sp, #-8]!
   1e65c:	str	lr, [sp, #4]
   1e660:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1e664:	cmp	r0, #0
   1e668:	beq	1e678 <__assert_fail@plt+0xcf24>
   1e66c:	ldr	r4, [sp]
   1e670:	add	sp, sp, #4
   1e674:	pop	{pc}		; (ldr pc, [sp], #4)
   1e678:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e67c:	str	r4, [sp, #-8]!
   1e680:	str	lr, [sp, #4]
   1e684:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1e688:	cmp	r0, #0
   1e68c:	beq	1e69c <__assert_fail@plt+0xcf48>
   1e690:	ldr	r4, [sp]
   1e694:	add	sp, sp, #4
   1e698:	pop	{pc}		; (ldr pc, [sp], #4)
   1e69c:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e6a0:	str	r4, [sp, #-8]!
   1e6a4:	str	lr, [sp, #4]
   1e6a8:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1e6ac:	cmp	r0, #0
   1e6b0:	beq	1e6c0 <__assert_fail@plt+0xcf6c>
   1e6b4:	ldr	r4, [sp]
   1e6b8:	add	sp, sp, #4
   1e6bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6c0:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e6c4:	strd	r4, [sp, #-16]!
   1e6c8:	mov	r5, r0
   1e6cc:	mov	r4, r1
   1e6d0:	str	r6, [sp, #8]
   1e6d4:	str	lr, [sp, #12]
   1e6d8:	bl	1edbc <__assert_fail@plt+0xd668>
   1e6dc:	cmp	r0, #0
   1e6e0:	beq	1e6f4 <__assert_fail@plt+0xcfa0>
   1e6e4:	ldrd	r4, [sp]
   1e6e8:	ldr	r6, [sp, #8]
   1e6ec:	add	sp, sp, #12
   1e6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6f4:	adds	r4, r4, #0
   1e6f8:	movne	r4, #1
   1e6fc:	cmp	r5, #0
   1e700:	moveq	r4, #1
   1e704:	cmp	r4, #0
   1e708:	beq	1e6e4 <__assert_fail@plt+0xcf90>
   1e70c:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e710:	cmp	r1, #0
   1e714:	orreq	r1, r1, #1
   1e718:	str	r4, [sp, #-8]!
   1e71c:	str	lr, [sp, #4]
   1e720:	bl	1edbc <__assert_fail@plt+0xd668>
   1e724:	cmp	r0, #0
   1e728:	beq	1e738 <__assert_fail@plt+0xcfe4>
   1e72c:	ldr	r4, [sp]
   1e730:	add	sp, sp, #4
   1e734:	pop	{pc}		; (ldr pc, [sp], #4)
   1e738:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e73c:	strd	r4, [sp, #-16]!
   1e740:	mov	r4, r0
   1e744:	mov	r5, r2
   1e748:	str	r6, [sp, #8]
   1e74c:	mov	r6, r1
   1e750:	str	lr, [sp, #12]
   1e754:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e758:	cmp	r0, #0
   1e75c:	beq	1e770 <__assert_fail@plt+0xd01c>
   1e760:	ldrd	r4, [sp]
   1e764:	ldr	r6, [sp, #8]
   1e768:	add	sp, sp, #12
   1e76c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e770:	cmp	r4, #0
   1e774:	beq	1e784 <__assert_fail@plt+0xd030>
   1e778:	cmp	r6, #0
   1e77c:	cmpne	r5, #0
   1e780:	beq	1e760 <__assert_fail@plt+0xd00c>
   1e784:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e788:	cmp	r2, #0
   1e78c:	cmpne	r1, #0
   1e790:	str	r4, [sp, #-8]!
   1e794:	moveq	r2, #1
   1e798:	str	lr, [sp, #4]
   1e79c:	moveq	r1, r2
   1e7a0:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e7a4:	cmp	r0, #0
   1e7a8:	beq	1e7b8 <__assert_fail@plt+0xd064>
   1e7ac:	ldr	r4, [sp]
   1e7b0:	add	sp, sp, #4
   1e7b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7b8:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e7bc:	mov	r2, r1
   1e7c0:	mov	r1, r0
   1e7c4:	str	r4, [sp, #-8]!
   1e7c8:	mov	r0, #0
   1e7cc:	str	lr, [sp, #4]
   1e7d0:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e7d4:	cmp	r0, #0
   1e7d8:	beq	1e7e8 <__assert_fail@plt+0xd094>
   1e7dc:	ldr	r4, [sp]
   1e7e0:	add	sp, sp, #4
   1e7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7e8:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e7ec:	cmp	r1, #0
   1e7f0:	cmpne	r0, #0
   1e7f4:	str	r4, [sp, #-8]!
   1e7f8:	moveq	r2, #1
   1e7fc:	movne	r2, r1
   1e800:	str	lr, [sp, #4]
   1e804:	movne	r1, r0
   1e808:	moveq	r1, r2
   1e80c:	mov	r0, #0
   1e810:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e814:	cmp	r0, #0
   1e818:	beq	1e828 <__assert_fail@plt+0xd0d4>
   1e81c:	ldr	r4, [sp]
   1e820:	add	sp, sp, #4
   1e824:	pop	{pc}		; (ldr pc, [sp], #4)
   1e828:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e82c:	cmp	r0, #0
   1e830:	strd	r4, [sp, #-16]!
   1e834:	mov	r5, r1
   1e838:	ldr	r4, [r1]
   1e83c:	str	r6, [sp, #8]
   1e840:	str	lr, [sp, #12]
   1e844:	beq	1e88c <__assert_fail@plt+0xd138>
   1e848:	lsr	r3, r4, #1
   1e84c:	add	r3, r3, #1
   1e850:	adds	r4, r4, r3
   1e854:	bcs	1e888 <__assert_fail@plt+0xd134>
   1e858:	mov	r2, #1
   1e85c:	mov	r1, r4
   1e860:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e864:	cmp	r0, #0
   1e868:	beq	1e880 <__assert_fail@plt+0xd12c>
   1e86c:	ldr	r6, [sp, #8]
   1e870:	str	r4, [r5]
   1e874:	ldrd	r4, [sp]
   1e878:	add	sp, sp, #12
   1e87c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e880:	cmp	r4, #0
   1e884:	beq	1e86c <__assert_fail@plt+0xd118>
   1e888:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e88c:	cmp	r4, #0
   1e890:	mov	r2, #1
   1e894:	moveq	r4, #64	; 0x40
   1e898:	mov	r1, r4
   1e89c:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e8a0:	cmp	r0, #0
   1e8a4:	bne	1e86c <__assert_fail@plt+0xd118>
   1e8a8:	b	1e888 <__assert_fail@plt+0xd134>
   1e8ac:	cmp	r0, #0
   1e8b0:	strd	r4, [sp, #-16]!
   1e8b4:	mov	r5, r1
   1e8b8:	ldr	r4, [r1]
   1e8bc:	str	r6, [sp, #8]
   1e8c0:	mov	r6, r2
   1e8c4:	str	lr, [sp, #12]
   1e8c8:	beq	1e910 <__assert_fail@plt+0xd1bc>
   1e8cc:	lsr	r3, r4, #1
   1e8d0:	add	r3, r3, #1
   1e8d4:	adds	r4, r4, r3
   1e8d8:	bcs	1e90c <__assert_fail@plt+0xd1b8>
   1e8dc:	mov	r1, r4
   1e8e0:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e8e4:	cmp	r0, #0
   1e8e8:	beq	1e900 <__assert_fail@plt+0xd1ac>
   1e8ec:	ldr	r6, [sp, #8]
   1e8f0:	str	r4, [r5]
   1e8f4:	ldrd	r4, [sp]
   1e8f8:	add	sp, sp, #12
   1e8fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e900:	cmp	r4, #0
   1e904:	cmpne	r6, #0
   1e908:	beq	1e8ec <__assert_fail@plt+0xd198>
   1e90c:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1e910:	cmp	r4, #0
   1e914:	bne	1e928 <__assert_fail@plt+0xd1d4>
   1e918:	mov	r4, #64	; 0x40
   1e91c:	udiv	r4, r4, r2
   1e920:	cmp	r2, #64	; 0x40
   1e924:	addhi	r4, r4, #1
   1e928:	mov	r2, r6
   1e92c:	mov	r1, r4
   1e930:	mov	r0, #0
   1e934:	bl	20a00 <__assert_fail@plt+0xf2ac>
   1e938:	cmp	r0, #0
   1e93c:	bne	1e8ec <__assert_fail@plt+0xd198>
   1e940:	b	1e90c <__assert_fail@plt+0xd1b8>
   1e944:	ldr	ip, [r1]
   1e948:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e94c:	strd	r6, [sp, #8]
   1e950:	mov	r7, r1
   1e954:	mov	r6, r0
   1e958:	str	r8, [sp, #16]
   1e95c:	mvn	r8, r3
   1e960:	lsr	r8, r8, #31
   1e964:	str	lr, [sp, #20]
   1e968:	asr	r1, ip, #1
   1e96c:	ldr	lr, [sp, #24]
   1e970:	adds	r4, ip, r1
   1e974:	mvnvs	r4, #-2147483648	; 0x80000000
   1e978:	cmp	r3, r4
   1e97c:	movge	r1, #0
   1e980:	andlt	r1, r8, #1
   1e984:	cmp	r1, #0
   1e988:	movne	r4, r3
   1e98c:	smull	r0, r1, r4, lr
   1e990:	cmp	r1, r0, asr #31
   1e994:	bne	1ea44 <__assert_fail@plt+0xd2f0>
   1e998:	cmp	r0, #63	; 0x3f
   1e99c:	mov	r5, r0
   1e9a0:	ble	1ea10 <__assert_fail@plt+0xd2bc>
   1e9a4:	cmp	r6, #0
   1e9a8:	sub	r1, r4, ip
   1e9ac:	streq	r6, [r7]
   1e9b0:	cmp	r1, r2
   1e9b4:	bge	1e9e4 <__assert_fail@plt+0xd290>
   1e9b8:	adds	r4, ip, r2
   1e9bc:	bvs	1ea40 <__assert_fail@plt+0xd2ec>
   1e9c0:	cmp	r4, r3
   1e9c4:	movle	r3, #0
   1e9c8:	andgt	r3, r8, #1
   1e9cc:	cmp	r3, #0
   1e9d0:	bne	1ea40 <__assert_fail@plt+0xd2ec>
   1e9d4:	smull	r0, r1, r4, lr
   1e9d8:	cmp	r1, r0, asr #31
   1e9dc:	mov	r5, r0
   1e9e0:	bne	1ea40 <__assert_fail@plt+0xd2ec>
   1e9e4:	mov	r1, r5
   1e9e8:	mov	r0, r6
   1e9ec:	bl	1edbc <__assert_fail@plt+0xd668>
   1e9f0:	cmp	r0, #0
   1e9f4:	beq	1ea24 <__assert_fail@plt+0xd2d0>
   1e9f8:	ldr	r8, [sp, #16]
   1e9fc:	str	r4, [r7]
   1ea00:	ldrd	r4, [sp]
   1ea04:	ldrd	r6, [sp, #8]
   1ea08:	add	sp, sp, #20
   1ea0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea10:	mov	r0, #64	; 0x40
   1ea14:	sdiv	r4, r0, lr
   1ea18:	mls	r5, lr, r4, r0
   1ea1c:	sub	r5, r0, r5
   1ea20:	b	1e9a4 <__assert_fail@plt+0xd250>
   1ea24:	adds	r5, r5, #0
   1ea28:	movne	r5, #1
   1ea2c:	cmp	r6, #0
   1ea30:	movne	r6, r5
   1ea34:	moveq	r6, #1
   1ea38:	cmp	r6, #0
   1ea3c:	beq	1e9f8 <__assert_fail@plt+0xd2a4>
   1ea40:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ea44:	mvn	r0, #-2147483648	; 0x80000000
   1ea48:	b	1ea14 <__assert_fail@plt+0xd2c0>
   1ea4c:	mov	r1, #1
   1ea50:	str	r4, [sp, #-8]!
   1ea54:	str	lr, [sp, #4]
   1ea58:	bl	1ed0c <__assert_fail@plt+0xd5b8>
   1ea5c:	cmp	r0, #0
   1ea60:	beq	1ea70 <__assert_fail@plt+0xd31c>
   1ea64:	ldr	r4, [sp]
   1ea68:	add	sp, sp, #4
   1ea6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea70:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ea74:	mov	r1, #1
   1ea78:	str	r4, [sp, #-8]!
   1ea7c:	str	lr, [sp, #4]
   1ea80:	bl	1ed0c <__assert_fail@plt+0xd5b8>
   1ea84:	cmp	r0, #0
   1ea88:	beq	1ea98 <__assert_fail@plt+0xd344>
   1ea8c:	ldr	r4, [sp]
   1ea90:	add	sp, sp, #4
   1ea94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea98:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ea9c:	str	r4, [sp, #-8]!
   1eaa0:	str	lr, [sp, #4]
   1eaa4:	bl	1ed0c <__assert_fail@plt+0xd5b8>
   1eaa8:	cmp	r0, #0
   1eaac:	beq	1eabc <__assert_fail@plt+0xd368>
   1eab0:	ldr	r4, [sp]
   1eab4:	add	sp, sp, #4
   1eab8:	pop	{pc}		; (ldr pc, [sp], #4)
   1eabc:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1eac0:	str	r4, [sp, #-8]!
   1eac4:	str	lr, [sp, #4]
   1eac8:	bl	1ed0c <__assert_fail@plt+0xd5b8>
   1eacc:	cmp	r0, #0
   1ead0:	beq	1eae0 <__assert_fail@plt+0xd38c>
   1ead4:	ldr	r4, [sp]
   1ead8:	add	sp, sp, #4
   1eadc:	pop	{pc}		; (ldr pc, [sp], #4)
   1eae0:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1eae4:	strd	r4, [sp, #-16]!
   1eae8:	mov	r4, r1
   1eaec:	str	r6, [sp, #8]
   1eaf0:	mov	r6, r0
   1eaf4:	mov	r0, r1
   1eaf8:	str	lr, [sp, #12]
   1eafc:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1eb00:	subs	r5, r0, #0
   1eb04:	beq	1eb28 <__assert_fail@plt+0xd3d4>
   1eb08:	mov	r2, r4
   1eb0c:	mov	r1, r6
   1eb10:	bl	113f4 <memcpy@plt>
   1eb14:	mov	r0, r5
   1eb18:	ldrd	r4, [sp]
   1eb1c:	ldr	r6, [sp, #8]
   1eb20:	add	sp, sp, #12
   1eb24:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb28:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1eb2c:	strd	r4, [sp, #-16]!
   1eb30:	mov	r4, r1
   1eb34:	str	r6, [sp, #8]
   1eb38:	mov	r6, r0
   1eb3c:	mov	r0, r1
   1eb40:	str	lr, [sp, #12]
   1eb44:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1eb48:	subs	r5, r0, #0
   1eb4c:	beq	1eb70 <__assert_fail@plt+0xd41c>
   1eb50:	mov	r2, r4
   1eb54:	mov	r1, r6
   1eb58:	bl	113f4 <memcpy@plt>
   1eb5c:	mov	r0, r5
   1eb60:	ldrd	r4, [sp]
   1eb64:	ldr	r6, [sp, #8]
   1eb68:	add	sp, sp, #12
   1eb6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb70:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1eb74:	strd	r4, [sp, #-16]!
   1eb78:	mov	r4, r1
   1eb7c:	str	r6, [sp, #8]
   1eb80:	mov	r6, r0
   1eb84:	add	r0, r1, #1
   1eb88:	str	lr, [sp, #12]
   1eb8c:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1eb90:	subs	r5, r0, #0
   1eb94:	beq	1ebc0 <__assert_fail@plt+0xd46c>
   1eb98:	mov	r3, #0
   1eb9c:	mov	r1, r6
   1eba0:	mov	r2, r4
   1eba4:	strb	r3, [r5, r4]
   1eba8:	bl	113f4 <memcpy@plt>
   1ebac:	mov	r0, r5
   1ebb0:	ldrd	r4, [sp]
   1ebb4:	ldr	r6, [sp, #8]
   1ebb8:	add	sp, sp, #12
   1ebbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebc0:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ebc4:	strd	r4, [sp, #-16]!
   1ebc8:	str	r6, [sp, #8]
   1ebcc:	mov	r6, r0
   1ebd0:	str	lr, [sp, #12]
   1ebd4:	bl	115b0 <strlen@plt>
   1ebd8:	add	r4, r0, #1
   1ebdc:	mov	r0, r4
   1ebe0:	bl	1ed80 <__assert_fail@plt+0xd62c>
   1ebe4:	subs	r5, r0, #0
   1ebe8:	beq	1ec0c <__assert_fail@plt+0xd4b8>
   1ebec:	mov	r2, r4
   1ebf0:	mov	r1, r6
   1ebf4:	bl	113f4 <memcpy@plt>
   1ebf8:	mov	r0, r5
   1ebfc:	ldrd	r4, [sp]
   1ec00:	ldr	r6, [sp, #8]
   1ec04:	add	sp, sp, #12
   1ec08:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec0c:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ec10:	movw	r3, #24960	; 0x6180
   1ec14:	movt	r3, #3
   1ec18:	str	r4, [sp, #-8]!
   1ec1c:	ldr	r4, [r3]
   1ec20:	mov	r2, #5
   1ec24:	movw	r1, #20432	; 0x4fd0
   1ec28:	movt	r1, #2
   1ec2c:	mov	r0, #0
   1ec30:	str	lr, [sp, #4]
   1ec34:	bl	11430 <dcgettext@plt>
   1ec38:	mov	r3, r0
   1ec3c:	movw	r2, #19180	; 0x4aec
   1ec40:	movt	r2, #2
   1ec44:	mov	r1, #0
   1ec48:	mov	r0, r4
   1ec4c:	bl	11520 <error@plt>
   1ec50:	bl	11748 <abort@plt>
   1ec54:	str	r4, [sp, #-8]!
   1ec58:	str	lr, [sp, #4]
   1ec5c:	sub	sp, sp, #8
   1ec60:	ldr	ip, [sp, #16]
   1ec64:	str	ip, [sp]
   1ec68:	bl	20a38 <__assert_fail@plt+0xf2e4>
   1ec6c:	subs	r4, r0, #0
   1ec70:	blt	1ec88 <__assert_fail@plt+0xd534>
   1ec74:	mov	r0, r4
   1ec78:	add	sp, sp, #8
   1ec7c:	ldr	r4, [sp]
   1ec80:	add	sp, sp, #4
   1ec84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec88:	bl	115e0 <__errno_location@plt>
   1ec8c:	ldr	r3, [r0]
   1ec90:	cmp	r3, #12
   1ec94:	bne	1ec74 <__assert_fail@plt+0xd520>
   1ec98:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ec9c:	str	r4, [sp, #-8]!
   1eca0:	str	lr, [sp, #4]
   1eca4:	bl	20cb4 <__assert_fail@plt+0xf560>
   1eca8:	subs	r4, r0, #0
   1ecac:	beq	1ecc0 <__assert_fail@plt+0xd56c>
   1ecb0:	mov	r0, r4
   1ecb4:	ldr	r4, [sp]
   1ecb8:	add	sp, sp, #4
   1ecbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ecc0:	bl	115e0 <__errno_location@plt>
   1ecc4:	ldr	r3, [r0]
   1ecc8:	cmp	r3, #12
   1eccc:	bne	1ecb0 <__assert_fail@plt+0xd55c>
   1ecd0:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ecd4:	str	r4, [sp, #-8]!
   1ecd8:	str	lr, [sp, #4]
   1ecdc:	bl	20ea0 <__assert_fail@plt+0xf74c>
   1ece0:	subs	r4, r0, #0
   1ece4:	beq	1ecf8 <__assert_fail@plt+0xd5a4>
   1ece8:	mov	r0, r4
   1ecec:	ldr	r4, [sp]
   1ecf0:	add	sp, sp, #4
   1ecf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ecf8:	bl	115e0 <__errno_location@plt>
   1ecfc:	ldr	r3, [r0]
   1ed00:	cmp	r3, #12
   1ed04:	bne	1ece8 <__assert_fail@plt+0xd594>
   1ed08:	bl	1ec10 <__assert_fail@plt+0xd4bc>
   1ed0c:	cmp	r1, #0
   1ed10:	cmpne	r0, #0
   1ed14:	beq	1ed60 <__assert_fail@plt+0xd60c>
   1ed18:	strd	r4, [sp, #-16]!
   1ed1c:	umull	r4, r5, r0, r1
   1ed20:	str	r6, [sp, #8]
   1ed24:	str	lr, [sp, #12]
   1ed28:	adds	r3, r5, #0
   1ed2c:	movne	r3, #1
   1ed30:	cmp	r4, #0
   1ed34:	blt	1ed40 <__assert_fail@plt+0xd5ec>
   1ed38:	cmp	r3, #0
   1ed3c:	beq	1ed6c <__assert_fail@plt+0xd618>
   1ed40:	bl	115e0 <__errno_location@plt>
   1ed44:	mov	r3, #12
   1ed48:	ldrd	r4, [sp]
   1ed4c:	ldr	r6, [sp, #8]
   1ed50:	add	sp, sp, #12
   1ed54:	str	r3, [r0]
   1ed58:	mov	r0, #0
   1ed5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed60:	mov	r1, #1
   1ed64:	mov	r0, r1
   1ed68:	b	11340 <calloc@plt>
   1ed6c:	ldrd	r4, [sp]
   1ed70:	ldr	r6, [sp, #8]
   1ed74:	ldr	lr, [sp, #12]
   1ed78:	add	sp, sp, #16
   1ed7c:	b	11340 <calloc@plt>
   1ed80:	cmp	r0, #0
   1ed84:	beq	1ed90 <__assert_fail@plt+0xd63c>
   1ed88:	blt	1ed98 <__assert_fail@plt+0xd644>
   1ed8c:	b	1152c <malloc@plt>
   1ed90:	mov	r0, #1
   1ed94:	b	1152c <malloc@plt>
   1ed98:	str	r4, [sp, #-8]!
   1ed9c:	str	lr, [sp, #4]
   1eda0:	bl	115e0 <__errno_location@plt>
   1eda4:	mov	r3, #12
   1eda8:	ldr	r4, [sp]
   1edac:	add	sp, sp, #4
   1edb0:	str	r3, [r0]
   1edb4:	mov	r0, #0
   1edb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1edbc:	cmp	r0, #0
   1edc0:	beq	1ede8 <__assert_fail@plt+0xd694>
   1edc4:	cmp	r1, #0
   1edc8:	str	r4, [sp, #-8]!
   1edcc:	str	lr, [sp, #4]
   1edd0:	beq	1edf0 <__assert_fail@plt+0xd69c>
   1edd4:	blt	1ee04 <__assert_fail@plt+0xd6b0>
   1edd8:	ldr	r4, [sp]
   1eddc:	ldr	lr, [sp, #4]
   1ede0:	add	sp, sp, #8
   1ede4:	b	11478 <realloc@plt>
   1ede8:	mov	r0, r1
   1edec:	b	1ed80 <__assert_fail@plt+0xd62c>
   1edf0:	bl	18d2c <__assert_fail@plt+0x75d8>
   1edf4:	ldr	r4, [sp]
   1edf8:	add	sp, sp, #4
   1edfc:	mov	r0, #0
   1ee00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee04:	bl	115e0 <__errno_location@plt>
   1ee08:	mov	r3, #12
   1ee0c:	str	r3, [r0]
   1ee10:	b	1edf4 <__assert_fail@plt+0xd6a0>
   1ee14:	cmp	r0, r1
   1ee18:	beq	1ee88 <__assert_fail@plt+0xd734>
   1ee1c:	sub	r0, r0, #1
   1ee20:	sub	r1, r1, #1
   1ee24:	str	r4, [sp, #-8]!
   1ee28:	str	lr, [sp, #4]
   1ee2c:	b	1ee38 <__assert_fail@plt+0xd6e4>
   1ee30:	cmp	r3, r2
   1ee34:	bne	1ee70 <__assert_fail@plt+0xd71c>
   1ee38:	ldrb	r3, [r0, #1]!
   1ee3c:	sub	r2, r3, #65	; 0x41
   1ee40:	mov	ip, r3
   1ee44:	cmp	r2, #25
   1ee48:	ldrb	r2, [r1, #1]!
   1ee4c:	addls	ip, r3, #32
   1ee50:	uxtbls	r3, ip
   1ee54:	sub	r4, r2, #65	; 0x41
   1ee58:	mov	lr, r2
   1ee5c:	cmp	r4, #25
   1ee60:	addls	lr, r2, #32
   1ee64:	uxtbls	r2, lr
   1ee68:	cmp	r3, #0
   1ee6c:	bne	1ee30 <__assert_fail@plt+0xd6dc>
   1ee70:	uxtb	ip, ip
   1ee74:	uxtb	r0, lr
   1ee78:	ldr	r4, [sp]
   1ee7c:	add	sp, sp, #4
   1ee80:	sub	r0, ip, r0
   1ee84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee88:	mov	r0, #0
   1ee8c:	bx	lr
   1ee90:	strd	r4, [sp, #-16]!
   1ee94:	mov	r4, r0
   1ee98:	str	r6, [sp, #8]
   1ee9c:	str	lr, [sp, #12]
   1eea0:	bl	11508 <__fpending@plt>
   1eea4:	ldr	r5, [r4]
   1eea8:	mov	r6, r0
   1eeac:	mov	r0, r4
   1eeb0:	bl	1ef18 <__assert_fail@plt+0xd7c4>
   1eeb4:	mov	r4, r0
   1eeb8:	and	r5, r5, #32
   1eebc:	cmp	r5, #0
   1eec0:	bne	1eef8 <__assert_fail@plt+0xd7a4>
   1eec4:	cmp	r0, #0
   1eec8:	beq	1eee4 <__assert_fail@plt+0xd790>
   1eecc:	cmp	r6, #0
   1eed0:	bne	1ef10 <__assert_fail@plt+0xd7bc>
   1eed4:	bl	115e0 <__errno_location@plt>
   1eed8:	ldr	r4, [r0]
   1eedc:	subs	r4, r4, #9
   1eee0:	mvnne	r4, #0
   1eee4:	mov	r0, r4
   1eee8:	ldrd	r4, [sp]
   1eeec:	ldr	r6, [sp, #8]
   1eef0:	add	sp, sp, #12
   1eef4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eef8:	cmp	r0, #0
   1eefc:	bne	1ef10 <__assert_fail@plt+0xd7bc>
   1ef00:	bl	115e0 <__errno_location@plt>
   1ef04:	str	r4, [r0]
   1ef08:	mvn	r4, #0
   1ef0c:	b	1eee4 <__assert_fail@plt+0xd790>
   1ef10:	mvn	r4, #0
   1ef14:	b	1eee4 <__assert_fail@plt+0xd790>
   1ef18:	strd	r4, [sp, #-12]!
   1ef1c:	mov	r4, r0
   1ef20:	str	lr, [sp, #8]
   1ef24:	sub	sp, sp, #12
   1ef28:	bl	11640 <fileno@plt>
   1ef2c:	cmp	r0, #0
   1ef30:	mov	r0, r4
   1ef34:	blt	1efb8 <__assert_fail@plt+0xd864>
   1ef38:	bl	11550 <__freading@plt>
   1ef3c:	cmp	r0, #0
   1ef40:	bne	1ef84 <__assert_fail@plt+0xd830>
   1ef44:	mov	r0, r4
   1ef48:	bl	1efcc <__assert_fail@plt+0xd878>
   1ef4c:	cmp	r0, #0
   1ef50:	beq	1efb4 <__assert_fail@plt+0xd860>
   1ef54:	bl	115e0 <__errno_location@plt>
   1ef58:	mov	r5, r0
   1ef5c:	mov	r0, r4
   1ef60:	ldr	r4, [r5]
   1ef64:	bl	11664 <fclose@plt>
   1ef68:	cmp	r4, #0
   1ef6c:	mvnne	r0, #0
   1ef70:	strne	r4, [r5]
   1ef74:	add	sp, sp, #12
   1ef78:	ldrd	r4, [sp]
   1ef7c:	add	sp, sp, #8
   1ef80:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef84:	mov	r0, r4
   1ef88:	bl	11640 <fileno@plt>
   1ef8c:	mov	r1, #1
   1ef90:	mov	r2, #0
   1ef94:	mov	r3, #0
   1ef98:	str	r1, [sp]
   1ef9c:	bl	114e4 <lseek64@plt>
   1efa0:	mvn	r3, #0
   1efa4:	mvn	r2, #0
   1efa8:	cmp	r1, r3
   1efac:	cmpeq	r0, r2
   1efb0:	bne	1ef44 <__assert_fail@plt+0xd7f0>
   1efb4:	mov	r0, r4
   1efb8:	add	sp, sp, #12
   1efbc:	ldrd	r4, [sp]
   1efc0:	ldr	lr, [sp, #8]
   1efc4:	add	sp, sp, #12
   1efc8:	b	11664 <fclose@plt>
   1efcc:	str	r4, [sp, #-8]!
   1efd0:	subs	r4, r0, #0
   1efd4:	str	lr, [sp, #4]
   1efd8:	sub	sp, sp, #8
   1efdc:	beq	1eff8 <__assert_fail@plt+0xd8a4>
   1efe0:	bl	11550 <__freading@plt>
   1efe4:	cmp	r0, #0
   1efe8:	beq	1eff8 <__assert_fail@plt+0xd8a4>
   1efec:	ldr	r3, [r4]
   1eff0:	tst	r3, #256	; 0x100
   1eff4:	bne	1f010 <__assert_fail@plt+0xd8bc>
   1eff8:	mov	r0, r4
   1effc:	add	sp, sp, #8
   1f000:	ldr	r4, [sp]
   1f004:	ldr	lr, [sp, #4]
   1f008:	add	sp, sp, #8
   1f00c:	b	11394 <fflush@plt>
   1f010:	mov	r1, #1
   1f014:	mov	r2, #0
   1f018:	mov	r3, #0
   1f01c:	mov	r0, r4
   1f020:	str	r1, [sp]
   1f024:	bl	1f02c <__assert_fail@plt+0xd8d8>
   1f028:	b	1eff8 <__assert_fail@plt+0xd8a4>
   1f02c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f030:	mov	r4, r0
   1f034:	ldr	ip, [r0, #4]
   1f038:	strd	r6, [sp, #8]
   1f03c:	str	lr, [sp, #20]
   1f040:	ldr	lr, [r0, #8]
   1f044:	str	r8, [sp, #16]
   1f048:	sub	sp, sp, #8
   1f04c:	ldr	r5, [sp, #32]
   1f050:	cmp	lr, ip
   1f054:	beq	1f07c <__assert_fail@plt+0xd928>
   1f058:	mov	r0, r4
   1f05c:	str	r5, [sp, #32]
   1f060:	add	sp, sp, #8
   1f064:	ldrd	r4, [sp]
   1f068:	ldrd	r6, [sp, #8]
   1f06c:	ldr	r8, [sp, #16]
   1f070:	ldr	lr, [sp, #20]
   1f074:	add	sp, sp, #24
   1f078:	b	1167c <fseeko64@plt>
   1f07c:	ldr	ip, [r0, #16]
   1f080:	ldr	lr, [r0, #20]
   1f084:	cmp	lr, ip
   1f088:	bne	1f058 <__assert_fail@plt+0xd904>
   1f08c:	ldr	r8, [r0, #36]	; 0x24
   1f090:	cmp	r8, #0
   1f094:	bne	1f058 <__assert_fail@plt+0xd904>
   1f098:	mov	r6, r2
   1f09c:	mov	r7, r3
   1f0a0:	bl	11640 <fileno@plt>
   1f0a4:	mov	r2, r6
   1f0a8:	mov	r3, r7
   1f0ac:	str	r5, [sp]
   1f0b0:	bl	114e4 <lseek64@plt>
   1f0b4:	mvn	r3, #0
   1f0b8:	mvn	r2, #0
   1f0bc:	cmp	r1, r3
   1f0c0:	cmpeq	r0, r2
   1f0c4:	beq	1f0f4 <__assert_fail@plt+0xd9a0>
   1f0c8:	ldr	r3, [r4]
   1f0cc:	strd	r0, [r4, #80]	; 0x50
   1f0d0:	bic	r3, r3, #16
   1f0d4:	str	r3, [r4]
   1f0d8:	mov	r0, r8
   1f0dc:	add	sp, sp, #8
   1f0e0:	ldrd	r4, [sp]
   1f0e4:	ldrd	r6, [sp, #8]
   1f0e8:	ldr	r8, [sp, #16]
   1f0ec:	add	sp, sp, #20
   1f0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0f4:	mvn	r8, #0
   1f0f8:	b	1f0d8 <__assert_fail@plt+0xd984>
   1f0fc:	mov	r0, #14
   1f100:	str	r4, [sp, #-8]!
   1f104:	str	lr, [sp, #4]
   1f108:	bl	116dc <nl_langinfo@plt>
   1f10c:	cmp	r0, #0
   1f110:	beq	1f134 <__assert_fail@plt+0xd9e0>
   1f114:	ldrb	r2, [r0]
   1f118:	movw	r3, #20452	; 0x4fe4
   1f11c:	movt	r3, #2
   1f120:	ldr	r4, [sp]
   1f124:	add	sp, sp, #4
   1f128:	cmp	r2, #0
   1f12c:	moveq	r0, r3
   1f130:	pop	{pc}		; (ldr pc, [sp], #4)
   1f134:	ldr	r4, [sp]
   1f138:	add	sp, sp, #4
   1f13c:	movw	r0, #20452	; 0x4fe4
   1f140:	movt	r0, #2
   1f144:	pop	{pc}		; (ldr pc, [sp], #4)
   1f148:	str	r4, [sp, #-8]!
   1f14c:	mov	r4, r0
   1f150:	str	lr, [sp, #4]
   1f154:	bl	113b8 <wcwidth@plt>
   1f158:	cmp	r0, #0
   1f15c:	bge	1f170 <__assert_fail@plt+0xda1c>
   1f160:	mov	r0, r4
   1f164:	bl	114a8 <iswcntrl@plt>
   1f168:	clz	r0, r0
   1f16c:	lsr	r0, r0, #5
   1f170:	ldr	r4, [sp]
   1f174:	add	sp, sp, #4
   1f178:	pop	{pc}		; (ldr pc, [sp], #4)
   1f17c:	mov	r3, r1
   1f180:	strd	r4, [sp, #-16]!
   1f184:	mov	r4, r1
   1f188:	ldr	r2, [r1, #4]
   1f18c:	mov	r5, r0
   1f190:	ldr	r1, [r3], #16
   1f194:	str	r6, [sp, #8]
   1f198:	str	lr, [sp, #12]
   1f19c:	cmp	r1, r3
   1f1a0:	strne	r1, [r0]
   1f1a4:	beq	1f1d0 <__assert_fail@plt+0xda7c>
   1f1a8:	ldrb	r3, [r4, #8]
   1f1ac:	str	r2, [r5, #4]
   1f1b0:	ldr	r6, [sp, #8]
   1f1b4:	cmp	r3, #0
   1f1b8:	strb	r3, [r5, #8]
   1f1bc:	ldrne	r3, [r4, #12]
   1f1c0:	strne	r3, [r5, #12]
   1f1c4:	ldrd	r4, [sp]
   1f1c8:	add	sp, sp, #12
   1f1cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1d0:	add	r3, r0, #16
   1f1d4:	mov	r0, r3
   1f1d8:	bl	113f4 <memcpy@plt>
   1f1dc:	ldr	r2, [r4, #4]
   1f1e0:	str	r0, [r5]
   1f1e4:	b	1f1a8 <__assert_fail@plt+0xda54>
   1f1e8:	lsr	r2, r0, #5
   1f1ec:	movw	r3, #20460	; 0x4fec
   1f1f0:	movt	r3, #2
   1f1f4:	and	r0, r0, #31
   1f1f8:	ldr	r3, [r3, r2, lsl #2]
   1f1fc:	lsr	r0, r3, r0
   1f200:	and	r0, r0, #1
   1f204:	bx	lr
   1f208:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f20c:	mov	r5, r2
   1f210:	strd	r6, [sp, #8]
   1f214:	subs	r6, r0, #0
   1f218:	mov	r7, r1
   1f21c:	str	lr, [sp, #16]
   1f220:	sub	sp, sp, #12
   1f224:	addeq	r6, sp, #4
   1f228:	mov	r0, r6
   1f22c:	bl	11514 <mbrtowc@plt>
   1f230:	cmp	r5, #0
   1f234:	cmnne	r0, #3
   1f238:	mov	r4, r0
   1f23c:	bhi	1f258 <__assert_fail@plt+0xdb04>
   1f240:	mov	r0, r4
   1f244:	add	sp, sp, #12
   1f248:	ldrd	r4, [sp]
   1f24c:	ldrd	r6, [sp, #8]
   1f250:	add	sp, sp, #16
   1f254:	pop	{pc}		; (ldr pc, [sp], #4)
   1f258:	mov	r0, #0
   1f25c:	bl	20f78 <__assert_fail@plt+0xf824>
   1f260:	cmp	r0, #0
   1f264:	bne	1f240 <__assert_fail@plt+0xdaec>
   1f268:	ldrb	r3, [r7]
   1f26c:	mov	r4, #1
   1f270:	str	r3, [r6]
   1f274:	b	1f240 <__assert_fail@plt+0xdaec>
   1f278:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f27c:	mov	r5, r0
   1f280:	strd	r6, [sp, #8]
   1f284:	mov	r6, r2
   1f288:	lsrs	r2, r6, #30
   1f28c:	str	fp, [sp, #16]
   1f290:	add	fp, sp, #20
   1f294:	movne	r2, #1
   1f298:	moveq	r2, #0
   1f29c:	lsls	r0, r6, #2
   1f2a0:	str	lr, [sp, #20]
   1f2a4:	bmi	1f3cc <__assert_fail@plt+0xdc78>
   1f2a8:	cmp	r2, #0
   1f2ac:	bne	1f3cc <__assert_fail@plt+0xdc78>
   1f2b0:	cmp	r0, #4016	; 0xfb0
   1f2b4:	mov	r4, r1
   1f2b8:	mov	r7, r3
   1f2bc:	bhi	1f3c0 <__assert_fail@plt+0xdc6c>
   1f2c0:	add	r3, r0, #22
   1f2c4:	bic	r3, r3, #7
   1f2c8:	sub	sp, sp, r3
   1f2cc:	add	r0, sp, #15
   1f2d0:	bic	r0, r0, #15
   1f2d4:	cmp	r0, #0
   1f2d8:	beq	1f3cc <__assert_fail@plt+0xdc78>
   1f2dc:	mov	r3, #1
   1f2e0:	cmp	r6, #2
   1f2e4:	movhi	r2, r4
   1f2e8:	movhi	ip, #0
   1f2ec:	str	r3, [r0, #4]
   1f2f0:	movhi	r3, #2
   1f2f4:	bls	1f33c <__assert_fail@plt+0xdbe8>
   1f2f8:	ldrb	r1, [r2, #1]!
   1f2fc:	ldrb	lr, [r4, ip]
   1f300:	cmp	lr, r1
   1f304:	bne	1f320 <__assert_fail@plt+0xdbcc>
   1f308:	b	1f3e4 <__assert_fail@plt+0xdc90>
   1f30c:	ldr	lr, [r0, ip, lsl #2]
   1f310:	sub	ip, ip, lr
   1f314:	ldrb	lr, [r4, ip]
   1f318:	cmp	lr, r1
   1f31c:	beq	1f3e4 <__assert_fail@plt+0xdc90>
   1f320:	cmp	ip, #0
   1f324:	bne	1f30c <__assert_fail@plt+0xdbb8>
   1f328:	mov	ip, #0
   1f32c:	str	r3, [r0, r3, lsl #2]
   1f330:	add	r3, r3, #1
   1f334:	cmp	r6, r3
   1f338:	bne	1f2f8 <__assert_fail@plt+0xdba4>
   1f33c:	mov	r2, #0
   1f340:	str	r2, [r7]
   1f344:	ldrb	r3, [r5]
   1f348:	cmp	r3, r2
   1f34c:	movne	r1, r5
   1f350:	beq	1f3a0 <__assert_fail@plt+0xdc4c>
   1f354:	ldrb	ip, [r4, r2]
   1f358:	cmp	ip, r3
   1f35c:	beq	1f380 <__assert_fail@plt+0xdc2c>
   1f360:	cmp	r2, #0
   1f364:	beq	1f3d4 <__assert_fail@plt+0xdc80>
   1f368:	ldr	ip, [r0, r2, lsl #2]
   1f36c:	sub	r2, r2, ip
   1f370:	add	r5, r5, ip
   1f374:	ldrb	ip, [r4, r2]
   1f378:	cmp	ip, r3
   1f37c:	bne	1f360 <__assert_fail@plt+0xdc0c>
   1f380:	add	r2, r2, #1
   1f384:	add	ip, r1, #1
   1f388:	cmp	r6, r2
   1f38c:	beq	1f3f4 <__assert_fail@plt+0xdca0>
   1f390:	ldrb	r3, [r1, #1]
   1f394:	mov	r1, ip
   1f398:	cmp	r3, #0
   1f39c:	bne	1f354 <__assert_fail@plt+0xdc00>
   1f3a0:	bl	21028 <__assert_fail@plt+0xf8d4>
   1f3a4:	mov	r0, #1
   1f3a8:	sub	sp, fp, #20
   1f3ac:	ldrd	r4, [sp]
   1f3b0:	ldrd	r6, [sp, #8]
   1f3b4:	ldr	fp, [sp, #16]
   1f3b8:	add	sp, sp, #20
   1f3bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f3c0:	bl	20fd0 <__assert_fail@plt+0xf87c>
   1f3c4:	cmp	r0, #0
   1f3c8:	bne	1f2dc <__assert_fail@plt+0xdb88>
   1f3cc:	mov	r0, #0
   1f3d0:	b	1f3a8 <__assert_fail@plt+0xdc54>
   1f3d4:	ldrb	r3, [r1, #1]
   1f3d8:	add	r5, r5, #1
   1f3dc:	add	r1, r1, #1
   1f3e0:	b	1f398 <__assert_fail@plt+0xdc44>
   1f3e4:	add	ip, ip, #1
   1f3e8:	sub	r1, r3, ip
   1f3ec:	str	r1, [r0, r3, lsl #2]
   1f3f0:	b	1f330 <__assert_fail@plt+0xdbdc>
   1f3f4:	str	r5, [r7]
   1f3f8:	b	1f3a0 <__assert_fail@plt+0xdc4c>
   1f3fc:	movw	r3, #20492	; 0x500c
   1f400:	movt	r3, #2
   1f404:	str	r4, [sp, #-8]!
   1f408:	movw	r1, #19272	; 0x4b48
   1f40c:	movt	r1, #2
   1f410:	str	lr, [sp, #4]
   1f414:	movw	r0, #19288	; 0x4b58
   1f418:	movt	r0, #2
   1f41c:	mov	r2, #172	; 0xac
   1f420:	bl	11754 <__assert_fail@plt>
   1f424:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f428:	mov	r4, r1
   1f42c:	strd	r6, [sp, #8]
   1f430:	strd	r8, [sp, #16]
   1f434:	strd	sl, [sp, #24]
   1f438:	add	fp, sp, #32
   1f43c:	str	lr, [sp, #32]
   1f440:	sub	sp, sp, #188	; 0xbc
   1f444:	str	r2, [fp, #-216]	; 0xffffff28
   1f448:	str	r0, [fp, #-212]	; 0xffffff2c
   1f44c:	mov	r0, r1
   1f450:	bl	21050 <__assert_fail@plt+0xf8fc>
   1f454:	mov	r3, #44	; 0x2c
   1f458:	str	r0, [fp, #-208]	; 0xffffff30
   1f45c:	umull	r0, r1, r0, r3
   1f460:	adds	r2, r1, #0
   1f464:	movne	r2, #1
   1f468:	cmp	r0, #0
   1f46c:	blt	1f838 <__assert_fail@plt+0xe0e4>
   1f470:	cmp	r2, #0
   1f474:	bne	1f838 <__assert_fail@plt+0xe0e4>
   1f478:	ldr	r2, [fp, #-208]	; 0xffffff30
   1f47c:	mul	r0, r3, r2
   1f480:	cmp	r0, #4016	; 0xfb0
   1f484:	bhi	1f858 <__assert_fail@plt+0xe104>
   1f488:	add	r3, r0, #22
   1f48c:	bic	r3, r3, #7
   1f490:	sub	sp, sp, r3
   1f494:	add	r3, sp, #15
   1f498:	bic	sl, r3, #15
   1f49c:	cmp	sl, #0
   1f4a0:	beq	1f838 <__assert_fail@plt+0xe0e4>
   1f4a4:	ldr	r3, [fp, #-208]	; 0xffffff30
   1f4a8:	mov	r0, #0
   1f4ac:	mov	r1, #0
   1f4b0:	movw	r8, #20460	; 0x4fec
   1f4b4:	movt	r8, #2
   1f4b8:	add	r5, sl, #16
   1f4bc:	strd	r0, [fp, #-200]	; 0xffffff38
   1f4c0:	str	r4, [fp, #-188]	; 0xffffff44
   1f4c4:	add	r9, r3, r3, lsl #2
   1f4c8:	mov	r3, #0
   1f4cc:	mov	r6, r3
   1f4d0:	add	r9, sl, r9, lsl #3
   1f4d4:	str	r9, [fp, #-220]	; 0xffffff24
   1f4d8:	strb	r3, [fp, #-204]	; 0xffffff34
   1f4dc:	strb	r3, [fp, #-192]	; 0xffffff40
   1f4e0:	b	1f564 <__assert_fail@plt+0xde10>
   1f4e4:	ldrb	r3, [r4]
   1f4e8:	lsr	r2, r3, #5
   1f4ec:	and	r3, r3, #31
   1f4f0:	ldr	r2, [r8, r2, lsl #2]
   1f4f4:	lsr	r3, r2, r3
   1f4f8:	tst	r3, #1
   1f4fc:	beq	1f864 <__assert_fail@plt+0xe110>
   1f500:	mov	r3, #1
   1f504:	str	r3, [fp, #-184]	; 0xffffff48
   1f508:	ldrb	r2, [r4]
   1f50c:	strb	r3, [fp, #-192]	; 0xffffff40
   1f510:	strb	r3, [fp, #-180]	; 0xffffff4c
   1f514:	mov	r4, r2
   1f518:	str	r2, [fp, #-176]	; 0xffffff50
   1f51c:	cmp	r4, #0
   1f520:	beq	1f5dc <__assert_fail@plt+0xde88>
   1f524:	mov	r9, #1
   1f528:	ldr	r4, [fp, #-188]	; 0xffffff44
   1f52c:	sub	r2, fp, #172	; 0xac
   1f530:	ldr	r7, [fp, #-184]	; 0xffffff48
   1f534:	cmp	r4, r2
   1f538:	strne	r4, [r5, #-16]
   1f53c:	beq	1f884 <__assert_fail@plt+0xe130>
   1f540:	cmp	r9, #0
   1f544:	add	r4, r4, r7
   1f548:	str	r7, [r5, #-12]
   1f54c:	ldrne	r3, [fp, #-176]	; 0xffffff50
   1f550:	add	r5, r5, #40	; 0x28
   1f554:	strb	r9, [r5, #-48]	; 0xffffffd0
   1f558:	strb	r6, [fp, #-192]	; 0xffffff40
   1f55c:	str	r4, [fp, #-188]	; 0xffffff44
   1f560:	strne	r3, [r5, #-44]	; 0xffffffd4
   1f564:	ldrb	r3, [fp, #-204]	; 0xffffff34
   1f568:	cmp	r3, #0
   1f56c:	subne	r7, fp, #200	; 0xc8
   1f570:	beq	1f4e4 <__assert_fail@plt+0xdd90>
   1f574:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1f578:	mov	r1, r0
   1f57c:	mov	r0, r4
   1f580:	bl	1d9a8 <__assert_fail@plt+0xc254>
   1f584:	mov	r2, r0
   1f588:	mov	r3, r7
   1f58c:	mov	r1, r4
   1f590:	sub	r0, fp, #176	; 0xb0
   1f594:	bl	1f208 <__assert_fail@plt+0xdab4>
   1f598:	cmn	r0, #1
   1f59c:	str	r0, [fp, #-184]	; 0xffffff48
   1f5a0:	beq	1f89c <__assert_fail@plt+0xe148>
   1f5a4:	cmn	r0, #2
   1f5a8:	beq	1f8b4 <__assert_fail@plt+0xe160>
   1f5ac:	cmp	r0, #0
   1f5b0:	beq	1f8d4 <__assert_fail@plt+0xe180>
   1f5b4:	ldr	r4, [fp, #-176]	; 0xffffff50
   1f5b8:	mov	r9, #1
   1f5bc:	mov	r0, r7
   1f5c0:	strb	r9, [fp, #-180]	; 0xffffff4c
   1f5c4:	bl	1140c <mbsinit@plt>
   1f5c8:	cmp	r0, #0
   1f5cc:	strb	r9, [fp, #-192]	; 0xffffff40
   1f5d0:	strbne	r6, [fp, #-204]	; 0xffffff34
   1f5d4:	cmp	r4, #0
   1f5d8:	bne	1f524 <__assert_fail@plt+0xddd0>
   1f5dc:	ldr	r9, [fp, #-220]	; 0xffffff24
   1f5e0:	mov	r3, #1
   1f5e4:	mov	r7, r4
   1f5e8:	ldr	r2, [fp, #-208]	; 0xffffff30
   1f5ec:	str	r3, [r9, #4]
   1f5f0:	cmp	r2, #2
   1f5f4:	bls	1f67c <__assert_fail@plt+0xdf28>
   1f5f8:	mov	r6, r2
   1f5fc:	mov	r5, sl
   1f600:	str	r4, [fp, #-220]	; 0xffffff24
   1f604:	mov	r8, #2
   1f608:	ldrb	r3, [r5, #48]	; 0x30
   1f60c:	cmp	r3, #0
   1f610:	bne	1f91c <__assert_fail@plt+0xe1c8>
   1f614:	ldr	r7, [r5, #44]	; 0x2c
   1f618:	b	1f62c <__assert_fail@plt+0xded8>
   1f61c:	cmp	r4, #0
   1f620:	beq	1f660 <__assert_fail@plt+0xdf0c>
   1f624:	ldr	r3, [r9, r4, lsl #2]
   1f628:	sub	r4, r4, r3
   1f62c:	add	r3, r4, r4, lsl #2
   1f630:	add	r2, sl, r3, lsl #3
   1f634:	ldr	r2, [r2, #4]
   1f638:	cmp	r7, r2
   1f63c:	bne	1f61c <__assert_fail@plt+0xdec8>
   1f640:	mov	r2, r7
   1f644:	ldr	r1, [sl, r3, lsl #3]
   1f648:	ldr	r0, [r5, #40]	; 0x28
   1f64c:	bl	11418 <memcmp@plt>
   1f650:	cmp	r0, #0
   1f654:	beq	1f954 <__assert_fail@plt+0xe200>
   1f658:	cmp	r4, #0
   1f65c:	bne	1f624 <__assert_fail@plt+0xded0>
   1f660:	str	r8, [r9, r8, lsl #2]
   1f664:	add	r8, r8, #1
   1f668:	mov	r4, #0
   1f66c:	cmp	r6, r8
   1f670:	add	r5, r5, #40	; 0x28
   1f674:	bne	1f608 <__assert_fail@plt+0xdeb4>
   1f678:	ldr	r7, [fp, #-220]	; 0xffffff24
   1f67c:	mov	r1, #0
   1f680:	mov	r0, #0
   1f684:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1f688:	mov	r2, #0
   1f68c:	movw	ip, #20460	; 0x4fec
   1f690:	movt	ip, #2
   1f694:	mov	r6, #1
   1f698:	str	r9, [fp, #-212]	; 0xffffff2c
   1f69c:	strd	r0, [fp, #-144]	; 0xffffff70
   1f6a0:	mov	r9, ip
   1f6a4:	strd	r0, [fp, #-88]	; 0xffffffa8
   1f6a8:	ldr	r1, [fp, #-216]	; 0xffffff28
   1f6ac:	strb	r2, [fp, #-148]	; 0xffffff6c
   1f6b0:	str	r3, [fp, #-132]	; 0xffffff7c
   1f6b4:	str	r3, [fp, #-76]	; 0xffffffb4
   1f6b8:	mov	r3, r2
   1f6bc:	strb	r2, [fp, #-136]	; 0xffffff78
   1f6c0:	strb	r2, [fp, #-92]	; 0xffffffa4
   1f6c4:	strb	r2, [fp, #-80]	; 0xffffffb0
   1f6c8:	str	r2, [r1]
   1f6cc:	cmp	r3, #0
   1f6d0:	ldreq	r5, [fp, #-76]	; 0xffffffb4
   1f6d4:	beq	1f788 <__assert_fail@plt+0xe034>
   1f6d8:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1f6dc:	cmp	r3, #0
   1f6e0:	bne	1fc8c <__assert_fail@plt+0xe538>
   1f6e4:	add	r3, r7, r7, lsl #2
   1f6e8:	add	r3, sl, r3, lsl #3
   1f6ec:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1f6f0:	ldr	r2, [r3, #4]
   1f6f4:	cmp	r2, r4
   1f6f8:	beq	1f9f0 <__assert_fail@plt+0xe29c>
   1f6fc:	cmp	r7, #0
   1f700:	bne	1fa14 <__assert_fail@plt+0xe2c0>
   1f704:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1f708:	cmp	r3, #0
   1f70c:	bne	1fc78 <__assert_fail@plt+0xe524>
   1f710:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1f714:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1f718:	cmp	r3, #0
   1f71c:	subne	r8, fp, #144	; 0x90
   1f720:	bne	1fbd4 <__assert_fail@plt+0xe480>
   1f724:	ldrb	r3, [r4]
   1f728:	lsr	r2, r3, #5
   1f72c:	and	r3, r3, #31
   1f730:	ldr	r2, [r9, r2, lsl #2]
   1f734:	lsr	r3, r2, r3
   1f738:	tst	r3, #1
   1f73c:	beq	1fbbc <__assert_fail@plt+0xe468>
   1f740:	str	r6, [fp, #-128]	; 0xffffff80
   1f744:	ldrb	r4, [r4]
   1f748:	strb	r6, [fp, #-136]	; 0xffffff78
   1f74c:	strb	r6, [fp, #-124]	; 0xffffff84
   1f750:	str	r4, [fp, #-120]	; 0xffffff88
   1f754:	cmp	r4, #0
   1f758:	beq	1fab0 <__assert_fail@plt+0xe35c>
   1f75c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1f760:	mov	r3, #0
   1f764:	ldr	r2, [fp, #-128]	; 0xffffff80
   1f768:	strb	r3, [fp, #-136]	; 0xffffff78
   1f76c:	strb	r3, [fp, #-80]	; 0xffffffb0
   1f770:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1f774:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1f778:	add	r4, r4, r2
   1f77c:	str	r4, [fp, #-132]	; 0xffffff7c
   1f780:	add	r5, r5, r3
   1f784:	str	r5, [fp, #-76]	; 0xffffffb4
   1f788:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1f78c:	cmp	r3, #0
   1f790:	subne	r4, fp, #88	; 0x58
   1f794:	bne	1f98c <__assert_fail@plt+0xe238>
   1f798:	ldrb	r3, [r5]
   1f79c:	lsr	r2, r3, #5
   1f7a0:	and	r3, r3, #31
   1f7a4:	ldr	r2, [r9, r2, lsl #2]
   1f7a8:	lsr	r3, r2, r3
   1f7ac:	tst	r3, #1
   1f7b0:	beq	1f974 <__assert_fail@plt+0xe220>
   1f7b4:	str	r6, [fp, #-72]	; 0xffffffb8
   1f7b8:	ldrb	r3, [r5]
   1f7bc:	strb	r6, [fp, #-80]	; 0xffffffb0
   1f7c0:	strb	r6, [fp, #-68]	; 0xffffffbc
   1f7c4:	mov	r5, r3
   1f7c8:	str	r3, [fp, #-64]	; 0xffffffc0
   1f7cc:	cmp	r5, #0
   1f7d0:	beq	1f828 <__assert_fail@plt+0xe0d4>
   1f7d4:	add	r3, r7, r7, lsl #2
   1f7d8:	add	r3, sl, r3, lsl #3
   1f7dc:	ldrb	r2, [r3, #8]
   1f7e0:	cmp	r2, #0
   1f7e4:	beq	1f6ec <__assert_fail@plt+0xdf98>
   1f7e8:	ldr	r3, [r3, #12]
   1f7ec:	cmp	r3, r5
   1f7f0:	bne	1f6fc <__assert_fail@plt+0xdfa8>
   1f7f4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1f7f8:	ldr	r4, [fp, #-72]	; 0xffffffb8
   1f7fc:	add	r7, r7, #1
   1f800:	add	r5, r5, r4
   1f804:	ldr	r2, [fp, #-208]	; 0xffffff30
   1f808:	mov	r3, #0
   1f80c:	strb	r3, [fp, #-80]	; 0xffffffb0
   1f810:	str	r5, [fp, #-76]	; 0xffffffb4
   1f814:	cmp	r2, r7
   1f818:	bne	1f788 <__assert_fail@plt+0xe034>
   1f81c:	ldr	r2, [fp, #-216]	; 0xffffff28
   1f820:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1f824:	str	r3, [r2]
   1f828:	mov	r0, sl
   1f82c:	bl	21028 <__assert_fail@plt+0xf8d4>
   1f830:	mov	r0, #1
   1f834:	b	1f83c <__assert_fail@plt+0xe0e8>
   1f838:	mov	r0, #0
   1f83c:	sub	sp, fp, #32
   1f840:	ldrd	r4, [sp]
   1f844:	ldrd	r6, [sp, #8]
   1f848:	ldrd	r8, [sp, #16]
   1f84c:	ldrd	sl, [sp, #24]
   1f850:	add	sp, sp, #32
   1f854:	pop	{pc}		; (ldr pc, [sp], #4)
   1f858:	bl	20fd0 <__assert_fail@plt+0xf87c>
   1f85c:	mov	sl, r0
   1f860:	b	1f49c <__assert_fail@plt+0xdd48>
   1f864:	sub	r7, fp, #200	; 0xc8
   1f868:	mov	r0, r7
   1f86c:	bl	1140c <mbsinit@plt>
   1f870:	cmp	r0, #0
   1f874:	beq	1fcf0 <__assert_fail@plt+0xe59c>
   1f878:	mov	r3, #1
   1f87c:	strb	r3, [fp, #-204]	; 0xffffff34
   1f880:	b	1f574 <__assert_fail@plt+0xde20>
   1f884:	mov	r2, r7
   1f888:	mov	r1, r4
   1f88c:	mov	r0, r5
   1f890:	bl	113f4 <memcpy@plt>
   1f894:	str	r5, [r5, #-16]
   1f898:	b	1f540 <__assert_fail@plt+0xddec>
   1f89c:	mov	r2, #1
   1f8a0:	mov	r9, #0
   1f8a4:	strb	r2, [fp, #-192]	; 0xffffff40
   1f8a8:	str	r2, [fp, #-184]	; 0xffffff48
   1f8ac:	strb	r6, [fp, #-180]	; 0xffffff4c
   1f8b0:	b	1f528 <__assert_fail@plt+0xddd4>
   1f8b4:	ldr	r0, [fp, #-188]	; 0xffffff44
   1f8b8:	mov	r9, #0
   1f8bc:	bl	115b0 <strlen@plt>
   1f8c0:	mov	r2, #1
   1f8c4:	strb	r2, [fp, #-192]	; 0xffffff40
   1f8c8:	str	r0, [fp, #-184]	; 0xffffff48
   1f8cc:	strb	r6, [fp, #-180]	; 0xffffff4c
   1f8d0:	b	1f528 <__assert_fail@plt+0xddd4>
   1f8d4:	ldr	r3, [fp, #-188]	; 0xffffff44
   1f8d8:	mov	r2, #1
   1f8dc:	str	r2, [fp, #-184]	; 0xffffff48
   1f8e0:	ldrb	r3, [r3]
   1f8e4:	cmp	r3, #0
   1f8e8:	bne	1fd10 <__assert_fail@plt+0xe5bc>
   1f8ec:	ldr	r4, [fp, #-176]	; 0xffffff50
   1f8f0:	cmp	r4, #0
   1f8f4:	beq	1f5b8 <__assert_fail@plt+0xde64>
   1f8f8:	bl	1f3fc <__assert_fail@plt+0xdca8>
   1f8fc:	ldr	r3, [r3, #12]
   1f900:	ldr	r2, [r5, #52]	; 0x34
   1f904:	cmp	r2, r3
   1f908:	beq	1f954 <__assert_fail@plt+0xe200>
   1f90c:	cmp	r4, #0
   1f910:	beq	1f660 <__assert_fail@plt+0xdf0c>
   1f914:	ldr	r3, [r9, r4, lsl #2]
   1f918:	sub	r4, r4, r3
   1f91c:	add	r3, r4, r4, lsl #2
   1f920:	add	r3, sl, r3, lsl #3
   1f924:	ldrb	r2, [r3, #8]
   1f928:	cmp	r2, #0
   1f92c:	bne	1f8fc <__assert_fail@plt+0xe1a8>
   1f930:	ldr	r1, [r3, #4]
   1f934:	ldr	r2, [r5, #44]	; 0x2c
   1f938:	cmp	r2, r1
   1f93c:	bne	1f90c <__assert_fail@plt+0xe1b8>
   1f940:	ldr	r1, [r3]
   1f944:	ldr	r0, [r5, #40]	; 0x28
   1f948:	bl	11418 <memcmp@plt>
   1f94c:	cmp	r0, #0
   1f950:	bne	1f90c <__assert_fail@plt+0xe1b8>
   1f954:	add	r4, r4, #1
   1f958:	add	r5, r5, #40	; 0x28
   1f95c:	sub	r3, r8, r4
   1f960:	str	r3, [r9, r8, lsl #2]
   1f964:	add	r8, r8, #1
   1f968:	cmp	r6, r8
   1f96c:	bne	1f608 <__assert_fail@plt+0xdeb4>
   1f970:	b	1f678 <__assert_fail@plt+0xdf24>
   1f974:	sub	r4, fp, #88	; 0x58
   1f978:	mov	r0, r4
   1f97c:	bl	1140c <mbsinit@plt>
   1f980:	cmp	r0, #0
   1f984:	beq	1fcf0 <__assert_fail@plt+0xe59c>
   1f988:	strb	r6, [fp, #-92]	; 0xffffffa4
   1f98c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1f990:	mov	r1, r0
   1f994:	mov	r0, r5
   1f998:	bl	1d9a8 <__assert_fail@plt+0xc254>
   1f99c:	mov	r2, r0
   1f9a0:	mov	r3, r4
   1f9a4:	mov	r1, r5
   1f9a8:	sub	r0, fp, #64	; 0x40
   1f9ac:	bl	1f208 <__assert_fail@plt+0xdab4>
   1f9b0:	cmn	r0, #1
   1f9b4:	str	r0, [fp, #-72]	; 0xffffffb8
   1f9b8:	beq	1fba8 <__assert_fail@plt+0xe454>
   1f9bc:	cmn	r0, #2
   1f9c0:	beq	1fc38 <__assert_fail@plt+0xe4e4>
   1f9c4:	cmp	r0, #0
   1f9c8:	beq	1fc54 <__assert_fail@plt+0xe500>
   1f9cc:	ldr	r5, [fp, #-64]	; 0xffffffc0
   1f9d0:	mov	r0, r4
   1f9d4:	strb	r6, [fp, #-68]	; 0xffffffbc
   1f9d8:	bl	1140c <mbsinit@plt>
   1f9dc:	cmp	r0, #0
   1f9e0:	strb	r6, [fp, #-80]	; 0xffffffb0
   1f9e4:	movne	r3, #0
   1f9e8:	strbne	r3, [fp, #-92]	; 0xffffffa4
   1f9ec:	b	1f7cc <__assert_fail@plt+0xe078>
   1f9f0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1f9f4:	mov	r2, r4
   1f9f8:	ldr	r0, [r3]
   1f9fc:	mov	r1, r5
   1fa00:	bl	11418 <memcmp@plt>
   1fa04:	cmp	r0, #0
   1fa08:	beq	1f7fc <__assert_fail@plt+0xe0a8>
   1fa0c:	cmp	r7, #0
   1fa10:	beq	1f704 <__assert_fail@plt+0xdfb0>
   1fa14:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1fa18:	ldr	r5, [r3, r7, lsl #2]
   1fa1c:	cmp	r5, #0
   1fa20:	sub	r7, r7, r5
   1fa24:	beq	1f6d8 <__assert_fail@plt+0xdf84>
   1fa28:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1fa2c:	cmp	r3, #0
   1fa30:	beq	1fc94 <__assert_fail@plt+0xe540>
   1fa34:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1fa38:	cmp	r3, #0
   1fa3c:	bne	1fba0 <__assert_fail@plt+0xe44c>
   1fa40:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fa44:	mov	r2, #0
   1fa48:	subs	r5, r5, #1
   1fa4c:	ldr	r3, [fp, #-128]	; 0xffffff80
   1fa50:	strb	r2, [fp, #-136]	; 0xffffff78
   1fa54:	add	r4, r4, r3
   1fa58:	ldrbeq	r3, [fp, #-80]	; 0xffffffb0
   1fa5c:	str	r4, [fp, #-132]	; 0xffffff7c
   1fa60:	beq	1f6cc <__assert_fail@plt+0xdf78>
   1fa64:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1fa68:	cmp	r3, #0
   1fa6c:	subne	r8, fp, #144	; 0x90
   1fa70:	bne	1facc <__assert_fail@plt+0xe378>
   1fa74:	ldrb	r3, [r4]
   1fa78:	lsr	r2, r3, #5
   1fa7c:	and	r3, r3, #31
   1fa80:	ldr	r2, [r9, r2, lsl #2]
   1fa84:	lsr	r3, r2, r3
   1fa88:	tst	r3, #1
   1fa8c:	beq	1fab4 <__assert_fail@plt+0xe360>
   1fa90:	str	r6, [fp, #-128]	; 0xffffff80
   1fa94:	ldrb	r3, [r4]
   1fa98:	strb	r6, [fp, #-136]	; 0xffffff78
   1fa9c:	strb	r6, [fp, #-124]	; 0xffffff84
   1faa0:	mov	r4, r3
   1faa4:	str	r3, [fp, #-120]	; 0xffffff88
   1faa8:	cmp	r4, #0
   1faac:	bne	1fa40 <__assert_fail@plt+0xe2ec>
   1fab0:	bl	11748 <abort@plt>
   1fab4:	sub	r8, fp, #144	; 0x90
   1fab8:	mov	r0, r8
   1fabc:	bl	1140c <mbsinit@plt>
   1fac0:	cmp	r0, #0
   1fac4:	beq	1fcf0 <__assert_fail@plt+0xe59c>
   1fac8:	strb	r6, [fp, #-148]	; 0xffffff6c
   1facc:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1fad0:	mov	r1, r0
   1fad4:	mov	r0, r4
   1fad8:	bl	1d9a8 <__assert_fail@plt+0xc254>
   1fadc:	mov	r2, r0
   1fae0:	mov	r3, r8
   1fae4:	mov	r1, r4
   1fae8:	sub	r0, fp, #120	; 0x78
   1faec:	bl	1f208 <__assert_fail@plt+0xdab4>
   1faf0:	cmn	r0, #1
   1faf4:	str	r0, [fp, #-128]	; 0xffffff80
   1faf8:	beq	1fb30 <__assert_fail@plt+0xe3dc>
   1fafc:	cmn	r0, #2
   1fb00:	beq	1fb44 <__assert_fail@plt+0xe3f0>
   1fb04:	cmp	r0, #0
   1fb08:	beq	1fb60 <__assert_fail@plt+0xe40c>
   1fb0c:	ldr	r4, [fp, #-120]	; 0xffffff88
   1fb10:	mov	r0, r8
   1fb14:	strb	r6, [fp, #-124]	; 0xffffff84
   1fb18:	bl	1140c <mbsinit@plt>
   1fb1c:	cmp	r0, #0
   1fb20:	strb	r6, [fp, #-136]	; 0xffffff78
   1fb24:	movne	r3, #0
   1fb28:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1fb2c:	b	1faa8 <__assert_fail@plt+0xe354>
   1fb30:	mov	r3, #0
   1fb34:	str	r6, [fp, #-128]	; 0xffffff80
   1fb38:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fb3c:	strb	r3, [fp, #-124]	; 0xffffff84
   1fb40:	b	1fa44 <__assert_fail@plt+0xe2f0>
   1fb44:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fb48:	mov	r0, r4
   1fb4c:	bl	115b0 <strlen@plt>
   1fb50:	mov	r3, #0
   1fb54:	str	r0, [fp, #-128]	; 0xffffff80
   1fb58:	strb	r3, [fp, #-124]	; 0xffffff84
   1fb5c:	b	1fa44 <__assert_fail@plt+0xe2f0>
   1fb60:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fb64:	str	r6, [fp, #-128]	; 0xffffff80
   1fb68:	ldrb	r3, [r4]
   1fb6c:	cmp	r3, #0
   1fb70:	bne	1fd10 <__assert_fail@plt+0xe5bc>
   1fb74:	ldr	r4, [fp, #-120]	; 0xffffff88
   1fb78:	cmp	r4, #0
   1fb7c:	beq	1fb10 <__assert_fail@plt+0xe3bc>
   1fb80:	movw	r3, #20492	; 0x500c
   1fb84:	movt	r3, #2
   1fb88:	movw	r1, #19272	; 0x4b48
   1fb8c:	movt	r1, #2
   1fb90:	movw	r0, #19288	; 0x4b58
   1fb94:	movt	r0, #2
   1fb98:	mov	r2, #172	; 0xac
   1fb9c:	bl	11754 <__assert_fail@plt>
   1fba0:	ldr	r4, [fp, #-120]	; 0xffffff88
   1fba4:	b	1faa8 <__assert_fail@plt+0xe354>
   1fba8:	mov	r3, #0
   1fbac:	strb	r6, [fp, #-80]	; 0xffffffb0
   1fbb0:	str	r6, [fp, #-72]	; 0xffffffb8
   1fbb4:	strb	r3, [fp, #-68]	; 0xffffffbc
   1fbb8:	b	1f6e4 <__assert_fail@plt+0xdf90>
   1fbbc:	sub	r8, fp, #144	; 0x90
   1fbc0:	mov	r0, r8
   1fbc4:	bl	1140c <mbsinit@plt>
   1fbc8:	cmp	r0, #0
   1fbcc:	beq	1fcf0 <__assert_fail@plt+0xe59c>
   1fbd0:	strb	r6, [fp, #-148]	; 0xffffff6c
   1fbd4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1fbd8:	mov	r1, r0
   1fbdc:	mov	r0, r4
   1fbe0:	bl	1d9a8 <__assert_fail@plt+0xc254>
   1fbe4:	mov	r2, r0
   1fbe8:	mov	r3, r8
   1fbec:	mov	r1, r4
   1fbf0:	sub	r0, fp, #120	; 0x78
   1fbf4:	bl	1f208 <__assert_fail@plt+0xdab4>
   1fbf8:	cmn	r0, #1
   1fbfc:	str	r0, [fp, #-128]	; 0xffffff80
   1fc00:	beq	1fc9c <__assert_fail@plt+0xe548>
   1fc04:	cmn	r0, #2
   1fc08:	beq	1fcb0 <__assert_fail@plt+0xe55c>
   1fc0c:	cmp	r0, #0
   1fc10:	beq	1fccc <__assert_fail@plt+0xe578>
   1fc14:	ldr	r4, [fp, #-120]	; 0xffffff88
   1fc18:	mov	r0, r8
   1fc1c:	strb	r6, [fp, #-124]	; 0xffffff84
   1fc20:	bl	1140c <mbsinit@plt>
   1fc24:	cmp	r0, #0
   1fc28:	strb	r6, [fp, #-136]	; 0xffffff78
   1fc2c:	movne	r3, #0
   1fc30:	strbne	r3, [fp, #-148]	; 0xffffff6c
   1fc34:	b	1f754 <__assert_fail@plt+0xe000>
   1fc38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1fc3c:	bl	115b0 <strlen@plt>
   1fc40:	mov	r3, #0
   1fc44:	strb	r6, [fp, #-80]	; 0xffffffb0
   1fc48:	str	r0, [fp, #-72]	; 0xffffffb8
   1fc4c:	strb	r3, [fp, #-68]	; 0xffffffbc
   1fc50:	b	1f6e4 <__assert_fail@plt+0xdf90>
   1fc54:	ldr	r5, [fp, #-76]	; 0xffffffb4
   1fc58:	str	r6, [fp, #-72]	; 0xffffffb8
   1fc5c:	ldrb	r3, [r5]
   1fc60:	cmp	r3, #0
   1fc64:	bne	1fd10 <__assert_fail@plt+0xe5bc>
   1fc68:	ldr	r5, [fp, #-64]	; 0xffffffc0
   1fc6c:	cmp	r5, #0
   1fc70:	beq	1f9d0 <__assert_fail@plt+0xe27c>
   1fc74:	b	1f8f8 <__assert_fail@plt+0xe1a4>
   1fc78:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1fc7c:	cmp	r3, #0
   1fc80:	beq	1f75c <__assert_fail@plt+0xe008>
   1fc84:	ldr	r4, [fp, #-120]	; 0xffffff88
   1fc88:	b	1f754 <__assert_fail@plt+0xe000>
   1fc8c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   1fc90:	b	1f7cc <__assert_fail@plt+0xe078>
   1fc94:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fc98:	b	1fa64 <__assert_fail@plt+0xe310>
   1fc9c:	mov	r3, #0
   1fca0:	str	r6, [fp, #-128]	; 0xffffff80
   1fca4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fca8:	strb	r3, [fp, #-124]	; 0xffffff84
   1fcac:	b	1f760 <__assert_fail@plt+0xe00c>
   1fcb0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fcb4:	mov	r0, r4
   1fcb8:	bl	115b0 <strlen@plt>
   1fcbc:	mov	r3, #0
   1fcc0:	str	r0, [fp, #-128]	; 0xffffff80
   1fcc4:	strb	r3, [fp, #-124]	; 0xffffff84
   1fcc8:	b	1f760 <__assert_fail@plt+0xe00c>
   1fccc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1fcd0:	str	r6, [fp, #-128]	; 0xffffff80
   1fcd4:	ldrb	r3, [r4]
   1fcd8:	cmp	r3, #0
   1fcdc:	bne	1fd10 <__assert_fail@plt+0xe5bc>
   1fce0:	ldr	r4, [fp, #-120]	; 0xffffff88
   1fce4:	cmp	r4, #0
   1fce8:	beq	1fc18 <__assert_fail@plt+0xe4c4>
   1fcec:	b	1f8f8 <__assert_fail@plt+0xe1a4>
   1fcf0:	movw	r3, #20492	; 0x500c
   1fcf4:	movt	r3, #2
   1fcf8:	movw	r1, #19272	; 0x4b48
   1fcfc:	movt	r1, #2
   1fd00:	movw	r0, #19308	; 0x4b6c
   1fd04:	movt	r0, #2
   1fd08:	mov	r2, #143	; 0x8f
   1fd0c:	bl	11754 <__assert_fail@plt>
   1fd10:	movw	r3, #20492	; 0x500c
   1fd14:	movt	r3, #2
   1fd18:	movw	r1, #19272	; 0x4b48
   1fd1c:	movt	r1, #2
   1fd20:	movw	r0, #19332	; 0x4b84
   1fd24:	movt	r0, #2
   1fd28:	mov	r2, #171	; 0xab
   1fd2c:	bl	11754 <__assert_fail@plt>
   1fd30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fd34:	mov	r4, r0
   1fd38:	strd	r6, [sp, #8]
   1fd3c:	strd	r8, [sp, #16]
   1fd40:	mov	r8, r1
   1fd44:	strd	sl, [sp, #24]
   1fd48:	str	lr, [sp, #32]
   1fd4c:	sub	sp, sp, #316	; 0x13c
   1fd50:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1fd54:	cmp	r0, #1
   1fd58:	bhi	1ff48 <__assert_fail@plt+0xe7f4>
   1fd5c:	ldrb	r9, [r8]
   1fd60:	cmp	r9, #0
   1fd64:	beq	1fec4 <__assert_fail@plt+0xe770>
   1fd68:	ldrb	r3, [r4]
   1fd6c:	add	r2, r8, #1
   1fd70:	str	r2, [sp, #4]
   1fd74:	cmp	r3, #0
   1fd78:	beq	20420 <__assert_fail@plt+0xeccc>
   1fd7c:	mov	r6, #0
   1fd80:	mov	fp, r8
   1fd84:	mov	ip, r6
   1fd88:	mov	sl, r6
   1fd8c:	mov	r0, #1
   1fd90:	b	1fde8 <__assert_fail@plt+0xe694>
   1fd94:	cmp	fp, #0
   1fd98:	beq	1fdb8 <__assert_fail@plt+0xe664>
   1fd9c:	mov	r0, fp
   1fda0:	sub	r1, r5, sl
   1fda4:	bl	11670 <strnlen@plt>
   1fda8:	ldrb	r3, [fp, r0]!
   1fdac:	cmp	r3, #0
   1fdb0:	bne	20700 <__assert_fail@plt+0xefac>
   1fdb4:	mov	sl, r5
   1fdb8:	mov	r0, r8
   1fdbc:	bl	115b0 <strlen@plt>
   1fdc0:	mov	r2, r0
   1fdc4:	add	r3, sp, #256	; 0x100
   1fdc8:	mov	r1, r8
   1fdcc:	mov	r0, r7
   1fdd0:	bl	1f278 <__assert_fail@plt+0xdb24>
   1fdd4:	cmp	r0, #0
   1fdd8:	bne	209b8 <__assert_fail@plt+0xf264>
   1fddc:	mov	fp, r0
   1fde0:	mov	r4, r7
   1fde4:	mov	ip, r5
   1fde8:	mov	r7, r4
   1fdec:	add	r6, r6, #1
   1fdf0:	ldrb	r3, [r7], #1
   1fdf4:	add	r5, ip, #1
   1fdf8:	cmp	r3, r9
   1fdfc:	beq	1fee4 <__assert_fail@plt+0xe790>
   1fe00:	ldrb	r3, [r4, #1]
   1fe04:	cmp	r3, #0
   1fe08:	beq	20420 <__assert_fail@plt+0xeccc>
   1fe0c:	cmp	r6, #9
   1fe10:	movls	r4, #0
   1fe14:	andhi	r4, r0, #1
   1fe18:	cmp	r4, #0
   1fe1c:	beq	1fde0 <__assert_fail@plt+0xe68c>
   1fe20:	add	r3, r6, r6, lsl #2
   1fe24:	cmp	r5, r3
   1fe28:	bcs	1fd94 <__assert_fail@plt+0xe640>
   1fe2c:	mov	r0, r4
   1fe30:	b	1fde0 <__assert_fail@plt+0xe68c>
   1fe34:	add	r0, sp, #36	; 0x24
   1fe38:	bl	1140c <mbsinit@plt>
   1fe3c:	cmp	r0, #0
   1fe40:	beq	209c0 <__assert_fail@plt+0xf26c>
   1fe44:	mov	r6, #1
   1fe48:	strb	r6, [sp, #32]
   1fe4c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1fe50:	mov	r1, r0
   1fe54:	mov	r0, r8
   1fe58:	bl	1d9a8 <__assert_fail@plt+0xc254>
   1fe5c:	mov	r2, r0
   1fe60:	add	r3, sp, #36	; 0x24
   1fe64:	mov	r1, r8
   1fe68:	add	r0, sp, #60	; 0x3c
   1fe6c:	bl	1f208 <__assert_fail@plt+0xdab4>
   1fe70:	cmn	r0, #1
   1fe74:	str	r0, [sp, #52]	; 0x34
   1fe78:	strbeq	r6, [sp, #44]	; 0x2c
   1fe7c:	streq	r6, [sp, #52]	; 0x34
   1fe80:	strbeq	r5, [sp, #56]	; 0x38
   1fe84:	beq	1ffb8 <__assert_fail@plt+0xe864>
   1fe88:	cmn	r0, #2
   1fe8c:	beq	1ffa4 <__assert_fail@plt+0xe850>
   1fe90:	cmp	r0, #0
   1fe94:	beq	20924 <__assert_fail@plt+0xf1d0>
   1fe98:	ldr	r5, [sp, #60]	; 0x3c
   1fe9c:	mov	r6, #1
   1fea0:	add	r0, sp, #36	; 0x24
   1fea4:	strb	r6, [sp, #56]	; 0x38
   1fea8:	bl	1140c <mbsinit@plt>
   1feac:	cmp	r0, #0
   1feb0:	strb	r6, [sp, #44]	; 0x2c
   1feb4:	movne	r3, #0
   1feb8:	strbne	r3, [sp, #32]
   1febc:	cmp	r5, #0
   1fec0:	bne	1ffb8 <__assert_fail@plt+0xe864>
   1fec4:	mov	r0, r4
   1fec8:	add	sp, sp, #316	; 0x13c
   1fecc:	ldrd	r4, [sp]
   1fed0:	ldrd	r6, [sp, #8]
   1fed4:	ldrd	r8, [sp, #16]
   1fed8:	ldrd	sl, [sp, #24]
   1fedc:	add	sp, sp, #32
   1fee0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fee4:	ldrb	r3, [r8, #1]
   1fee8:	cmp	r3, #0
   1feec:	beq	1fec4 <__assert_fail@plt+0xe770>
   1fef0:	ldrb	r2, [r7]
   1fef4:	cmp	r2, #0
   1fef8:	beq	20420 <__assert_fail@plt+0xeccc>
   1fefc:	cmp	r3, r2
   1ff00:	add	r5, ip, #2
   1ff04:	bne	1fe0c <__assert_fail@plt+0xe6b8>
   1ff08:	ldr	r3, [sp, #4]
   1ff0c:	mov	r1, r7
   1ff10:	add	r3, r3, #1
   1ff14:	b	1ff38 <__assert_fail@plt+0xe7e4>
   1ff18:	ldrb	lr, [r1, #1]!
   1ff1c:	cmp	lr, #0
   1ff20:	beq	20420 <__assert_fail@plt+0xeccc>
   1ff24:	add	r3, r3, #1
   1ff28:	cmp	r2, lr
   1ff2c:	sub	r5, r3, r8
   1ff30:	add	r5, r5, ip
   1ff34:	bne	1fe0c <__assert_fail@plt+0xe6b8>
   1ff38:	ldrb	r2, [r3]
   1ff3c:	cmp	r2, #0
   1ff40:	bne	1ff18 <__assert_fail@plt+0xe7c4>
   1ff44:	b	1fec4 <__assert_fail@plt+0xe770>
   1ff48:	ldrb	r2, [r8]
   1ff4c:	mov	r3, #0
   1ff50:	movw	sl, #20460	; 0x4fec
   1ff54:	movt	sl, #2
   1ff58:	mov	r6, #0
   1ff5c:	strb	r3, [sp, #32]
   1ff60:	mov	r7, #0
   1ff64:	strb	r3, [sp, #44]	; 0x2c
   1ff68:	lsr	r3, r2, #5
   1ff6c:	and	r1, r2, #31
   1ff70:	strd	r6, [sp, #36]	; 0x24
   1ff74:	str	r8, [sp, #48]	; 0x30
   1ff78:	ldr	r3, [sl, r3, lsl #2]
   1ff7c:	lsr	r3, r3, r1
   1ff80:	ands	r5, r3, #1
   1ff84:	beq	1fe34 <__assert_fail@plt+0xe6e0>
   1ff88:	mov	r3, #1
   1ff8c:	mov	r5, r2
   1ff90:	strb	r3, [sp, #44]	; 0x2c
   1ff94:	str	r3, [sp, #52]	; 0x34
   1ff98:	strb	r3, [sp, #56]	; 0x38
   1ff9c:	str	r2, [sp, #60]	; 0x3c
   1ffa0:	b	1febc <__assert_fail@plt+0xe768>
   1ffa4:	ldr	r0, [sp, #48]	; 0x30
   1ffa8:	bl	115b0 <strlen@plt>
   1ffac:	strb	r6, [sp, #44]	; 0x2c
   1ffb0:	str	r0, [sp, #52]	; 0x34
   1ffb4:	strb	r5, [sp, #56]	; 0x38
   1ffb8:	mov	r3, #0
   1ffbc:	mov	r0, #1
   1ffc0:	mov	r7, r3
   1ffc4:	mov	r6, r4
   1ffc8:	str	r3, [sp, #4]
   1ffcc:	mov	r5, r0
   1ffd0:	mov	fp, r0
   1ffd4:	str	r0, [sp, #8]
   1ffd8:	str	r3, [sp, #16]
   1ffdc:	str	r3, [sp, #20]
   1ffe0:	str	r3, [sp, #24]
   1ffe4:	strb	r3, [sp, #88]	; 0x58
   1ffe8:	str	r3, [sp, #92]	; 0x5c
   1ffec:	str	r3, [sp, #96]	; 0x60
   1fff0:	strb	r3, [sp, #100]	; 0x64
   1fff4:	strb	r3, [sp, #144]	; 0x90
   1fff8:	str	r3, [sp, #148]	; 0x94
   1fffc:	str	r3, [sp, #152]	; 0x98
   20000:	strb	r3, [sp, #156]	; 0x9c
   20004:	ldrb	r3, [sp, #144]	; 0x90
   20008:	str	r8, [sp, #12]
   2000c:	str	r4, [sp, #28]
   20010:	str	r8, [sp, #104]	; 0x68
   20014:	str	r4, [sp, #160]	; 0xa0
   20018:	cmp	r3, #0
   2001c:	addne	r4, sp, #148	; 0x94
   20020:	bne	20334 <__assert_fail@plt+0xebe0>
   20024:	ldrb	r3, [r6]
   20028:	lsr	r2, r3, #5
   2002c:	and	r3, r3, #31
   20030:	ldr	r2, [sl, r2, lsl #2]
   20034:	lsr	r3, r2, r3
   20038:	tst	r3, #1
   2003c:	beq	20500 <__assert_fail@plt+0xedac>
   20040:	str	fp, [sp, #164]	; 0xa4
   20044:	ldrb	r6, [r6]
   20048:	strb	r5, [sp, #156]	; 0x9c
   2004c:	strb	r5, [sp, #168]	; 0xa8
   20050:	str	r6, [sp, #172]	; 0xac
   20054:	cmp	r6, #0
   20058:	beq	20420 <__assert_fail@plt+0xeccc>
   2005c:	ldrd	r2, [sp, #4]
   20060:	cmp	r2, #9
   20064:	movls	r3, #0
   20068:	andhi	r3, r3, #1
   2006c:	cmp	r3, #0
   20070:	addeq	r7, r7, #1
   20074:	beq	2008c <__assert_fail@plt+0xe938>
   20078:	add	r2, r2, r2, lsl #2
   2007c:	cmp	r7, r2
   20080:	addcc	r7, r7, #1
   20084:	strcc	r3, [sp, #8]
   20088:	bcs	20558 <__assert_fail@plt+0xee04>
   2008c:	ldrb	r3, [sp, #56]	; 0x38
   20090:	cmp	r3, #0
   20094:	beq	20470 <__assert_fail@plt+0xed1c>
   20098:	ldr	r3, [sp, #60]	; 0x3c
   2009c:	ldr	r2, [sp, #172]	; 0xac
   200a0:	cmp	r2, r3
   200a4:	bne	20300 <__assert_fail@plt+0xebac>
   200a8:	ldr	ip, [sp, #12]
   200ac:	ldr	r3, [sp, #16]
   200b0:	ldr	r0, [sp, #160]	; 0xa0
   200b4:	ldrb	r1, [ip]
   200b8:	str	r3, [sp, #260]	; 0x104
   200bc:	ldr	r3, [sp, #20]
   200c0:	str	ip, [sp, #272]	; 0x110
   200c4:	ldr	r2, [sp, #164]	; 0xa4
   200c8:	and	ip, r1, #31
   200cc:	ldrd	r8, [sp, #168]	; 0xa8
   200d0:	str	r3, [sp, #264]	; 0x108
   200d4:	lsr	r3, r1, #5
   200d8:	str	r2, [sp, #220]	; 0xdc
   200dc:	ldr	r6, [sl, r3, lsl #2]
   200e0:	strd	r8, [sp, #224]	; 0xe0
   200e4:	ldrd	r2, [sp, #152]	; 0x98
   200e8:	ldrd	r8, [sp, #184]	; 0xb8
   200ec:	lsr	r6, r6, ip
   200f0:	mov	ip, #0
   200f4:	ldr	lr, [sp, #220]	; 0xdc
   200f8:	strd	r2, [sp, #208]	; 0xd0
   200fc:	ands	r6, r6, #1
   20100:	ldrd	r2, [sp, #144]	; 0x90
   20104:	add	r0, lr, r0
   20108:	strd	r2, [sp, #200]	; 0xc8
   2010c:	ldrd	r2, [sp, #176]	; 0xb0
   20110:	strb	ip, [sp, #212]	; 0xd4
   20114:	str	r0, [sp, #216]	; 0xd8
   20118:	strd	r8, [sp, #240]	; 0xf0
   2011c:	strb	ip, [sp, #256]	; 0x100
   20120:	strd	r2, [sp, #232]	; 0xe8
   20124:	ldrd	r2, [sp, #192]	; 0xc0
   20128:	strb	ip, [sp, #268]	; 0x10c
   2012c:	strd	r2, [sp, #248]	; 0xf8
   20130:	beq	207d8 <__assert_fail@plt+0xf084>
   20134:	mov	r4, r1
   20138:	strb	r5, [sp, #268]	; 0x10c
   2013c:	cmp	r4, #0
   20140:	str	fp, [sp, #276]	; 0x114
   20144:	strb	r5, [sp, #280]	; 0x118
   20148:	str	r1, [sp, #284]	; 0x11c
   2014c:	beq	20858 <__assert_fail@plt+0xf104>
   20150:	ldr	r4, [sp, #272]	; 0x110
   20154:	mov	r3, #0
   20158:	add	r7, r7, #1
   2015c:	ldr	r2, [sp, #276]	; 0x114
   20160:	mov	r9, r3
   20164:	strb	r3, [sp, #268]	; 0x10c
   20168:	add	r4, r4, r2
   2016c:	str	r4, [sp, #272]	; 0x110
   20170:	b	20258 <__assert_fail@plt+0xeb04>
   20174:	ldrb	r3, [r4]
   20178:	lsr	r2, r3, #5
   2017c:	and	r3, r3, #31
   20180:	ldr	r2, [sl, r2, lsl #2]
   20184:	lsr	r3, r2, r3
   20188:	tst	r3, #1
   2018c:	beq	20454 <__assert_fail@plt+0xed00>
   20190:	str	fp, [sp, #276]	; 0x114
   20194:	ldrb	r4, [r4]
   20198:	strb	r5, [sp, #268]	; 0x10c
   2019c:	strb	r5, [sp, #280]	; 0x118
   201a0:	cmp	r4, #0
   201a4:	str	r4, [sp, #284]	; 0x11c
   201a8:	beq	202d4 <__assert_fail@plt+0xeb80>
   201ac:	ldrb	r3, [sp, #212]	; 0xd4
   201b0:	cmp	r3, #0
   201b4:	bne	20428 <__assert_fail@plt+0xecd4>
   201b8:	ldrb	r3, [sp, #200]	; 0xc8
   201bc:	ldr	r4, [sp, #216]	; 0xd8
   201c0:	cmp	r3, #0
   201c4:	addne	r8, sp, #204	; 0xcc
   201c8:	bne	203b0 <__assert_fail@plt+0xec5c>
   201cc:	ldrb	r3, [r4]
   201d0:	lsr	r2, r3, #5
   201d4:	and	r3, r3, #31
   201d8:	ldr	r2, [sl, r2, lsl #2]
   201dc:	lsr	r3, r2, r3
   201e0:	tst	r3, #1
   201e4:	beq	20398 <__assert_fail@plt+0xec44>
   201e8:	str	fp, [sp, #220]	; 0xdc
   201ec:	ldrb	r0, [r4]
   201f0:	strb	r5, [sp, #212]	; 0xd4
   201f4:	strb	r5, [sp, #224]	; 0xe0
   201f8:	mov	r6, r0
   201fc:	str	r0, [sp, #228]	; 0xe4
   20200:	cmp	r6, #0
   20204:	beq	20420 <__assert_fail@plt+0xeccc>
   20208:	ldrb	r3, [sp, #280]	; 0x118
   2020c:	cmp	r3, #0
   20210:	beq	202f0 <__assert_fail@plt+0xeb9c>
   20214:	ldr	r0, [sp, #284]	; 0x11c
   20218:	subs	r0, r0, r6
   2021c:	movne	r0, #1
   20220:	cmp	r0, #0
   20224:	add	r2, r7, #1
   20228:	bne	20300 <__assert_fail@plt+0xebac>
   2022c:	mov	r7, r2
   20230:	ldr	r3, [sp, #216]	; 0xd8
   20234:	strb	r0, [sp, #212]	; 0xd4
   20238:	ldr	r1, [sp, #220]	; 0xdc
   2023c:	strb	r0, [sp, #268]	; 0x10c
   20240:	ldr	r4, [sp, #272]	; 0x110
   20244:	ldr	r2, [sp, #276]	; 0x114
   20248:	add	r3, r3, r1
   2024c:	str	r3, [sp, #216]	; 0xd8
   20250:	add	r4, r4, r2
   20254:	str	r4, [sp, #272]	; 0x110
   20258:	ldrb	r3, [sp, #256]	; 0x100
   2025c:	cmp	r3, #0
   20260:	beq	20174 <__assert_fail@plt+0xea20>
   20264:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20268:	mov	r1, r0
   2026c:	mov	r0, r4
   20270:	bl	1d9a8 <__assert_fail@plt+0xc254>
   20274:	mov	r2, r0
   20278:	add	r3, sp, #260	; 0x104
   2027c:	mov	r1, r4
   20280:	add	r0, sp, #284	; 0x11c
   20284:	bl	1f208 <__assert_fail@plt+0xdab4>
   20288:	cmn	r0, #1
   2028c:	str	r0, [sp, #276]	; 0x114
   20290:	strbeq	r5, [sp, #268]	; 0x10c
   20294:	streq	fp, [sp, #276]	; 0x114
   20298:	strbeq	r9, [sp, #280]	; 0x118
   2029c:	beq	201ac <__assert_fail@plt+0xea58>
   202a0:	cmn	r0, #2
   202a4:	beq	204a0 <__assert_fail@plt+0xed4c>
   202a8:	cmp	r0, #0
   202ac:	beq	204b8 <__assert_fail@plt+0xed64>
   202b0:	ldr	r4, [sp, #284]	; 0x11c
   202b4:	add	r0, sp, #260	; 0x104
   202b8:	strb	r5, [sp, #280]	; 0x118
   202bc:	bl	1140c <mbsinit@plt>
   202c0:	cmp	r0, #0
   202c4:	strb	r5, [sp, #268]	; 0x10c
   202c8:	strbne	r9, [sp, #256]	; 0x100
   202cc:	cmp	r4, #0
   202d0:	bne	201ac <__assert_fail@plt+0xea58>
   202d4:	ldr	r0, [sp, #160]	; 0xa0
   202d8:	b	1fec8 <__assert_fail@plt+0xe774>
   202dc:	ldr	r0, [sp, #216]	; 0xd8
   202e0:	bl	115b0 <strlen@plt>
   202e4:	strb	r5, [sp, #212]	; 0xd4
   202e8:	str	r0, [sp, #220]	; 0xdc
   202ec:	strb	r9, [sp, #224]	; 0xe0
   202f0:	ldr	r2, [sp, #220]	; 0xdc
   202f4:	ldr	r3, [sp, #276]	; 0x114
   202f8:	cmp	r2, r3
   202fc:	beq	2043c <__assert_fail@plt+0xece8>
   20300:	ldr	r6, [sp, #160]	; 0xa0
   20304:	ldr	r4, [sp, #164]	; 0xa4
   20308:	mov	r3, #0
   2030c:	add	r6, r6, r4
   20310:	ldr	r2, [sp, #4]
   20314:	strb	r3, [sp, #156]	; 0x9c
   20318:	ldrb	r3, [sp, #144]	; 0x90
   2031c:	str	r6, [sp, #160]	; 0xa0
   20320:	add	r2, r2, #1
   20324:	cmp	r3, #0
   20328:	str	r2, [sp, #4]
   2032c:	addne	r4, sp, #148	; 0x94
   20330:	beq	20024 <__assert_fail@plt+0xe8d0>
   20334:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20338:	mov	r1, r0
   2033c:	mov	r0, r6
   20340:	bl	1d9a8 <__assert_fail@plt+0xc254>
   20344:	mov	r2, r0
   20348:	mov	r3, r4
   2034c:	mov	r1, r6
   20350:	add	r0, sp, #172	; 0xac
   20354:	bl	1f208 <__assert_fail@plt+0xdab4>
   20358:	cmn	r0, #1
   2035c:	str	r0, [sp, #164]	; 0xa4
   20360:	beq	2051c <__assert_fail@plt+0xedc8>
   20364:	cmn	r0, #2
   20368:	beq	2074c <__assert_fail@plt+0xeff8>
   2036c:	cmp	r0, #0
   20370:	bne	2071c <__assert_fail@plt+0xefc8>
   20374:	ldr	r6, [sp, #160]	; 0xa0
   20378:	str	fp, [sp, #164]	; 0xa4
   2037c:	ldrb	r3, [r6]
   20380:	cmp	r3, #0
   20384:	bne	209e0 <__assert_fail@plt+0xf28c>
   20388:	ldr	r6, [sp, #172]	; 0xac
   2038c:	cmp	r6, #0
   20390:	beq	20720 <__assert_fail@plt+0xefcc>
   20394:	b	20944 <__assert_fail@plt+0xf1f0>
   20398:	add	r8, sp, #204	; 0xcc
   2039c:	mov	r0, r8
   203a0:	bl	1140c <mbsinit@plt>
   203a4:	cmp	r0, #0
   203a8:	beq	209c0 <__assert_fail@plt+0xf26c>
   203ac:	strb	r5, [sp, #200]	; 0xc8
   203b0:	bl	114fc <__ctype_get_mb_cur_max@plt>
   203b4:	mov	r1, r0
   203b8:	mov	r0, r4
   203bc:	bl	1d9a8 <__assert_fail@plt+0xc254>
   203c0:	mov	r2, r0
   203c4:	mov	r3, r8
   203c8:	mov	r1, r4
   203cc:	add	r0, sp, #228	; 0xe4
   203d0:	bl	1f208 <__assert_fail@plt+0xdab4>
   203d4:	cmn	r0, #1
   203d8:	str	r0, [sp, #220]	; 0xdc
   203dc:	strbeq	r5, [sp, #212]	; 0xd4
   203e0:	streq	fp, [sp, #220]	; 0xdc
   203e4:	strbeq	r9, [sp, #224]	; 0xe0
   203e8:	beq	202f0 <__assert_fail@plt+0xeb9c>
   203ec:	cmn	r0, #2
   203f0:	beq	202dc <__assert_fail@plt+0xeb88>
   203f4:	cmp	r0, #0
   203f8:	beq	204dc <__assert_fail@plt+0xed88>
   203fc:	ldr	r6, [sp, #228]	; 0xe4
   20400:	mov	r0, r8
   20404:	strb	r5, [sp, #224]	; 0xe0
   20408:	bl	1140c <mbsinit@plt>
   2040c:	cmp	r0, #0
   20410:	strb	r5, [sp, #212]	; 0xd4
   20414:	strbne	r9, [sp, #200]	; 0xc8
   20418:	cmp	r6, #0
   2041c:	bne	20208 <__assert_fail@plt+0xeab4>
   20420:	mov	r0, #0
   20424:	b	1fec8 <__assert_fail@plt+0xe774>
   20428:	ldrb	r3, [sp, #224]	; 0xe0
   2042c:	cmp	r3, #0
   20430:	beq	202f0 <__assert_fail@plt+0xeb9c>
   20434:	ldr	r6, [sp, #228]	; 0xe4
   20438:	b	20200 <__assert_fail@plt+0xeaac>
   2043c:	ldr	r0, [sp, #216]	; 0xd8
   20440:	ldr	r1, [sp, #272]	; 0x110
   20444:	bl	11418 <memcmp@plt>
   20448:	adds	r0, r0, #0
   2044c:	movne	r0, #1
   20450:	b	20220 <__assert_fail@plt+0xeacc>
   20454:	add	r0, sp, #260	; 0x104
   20458:	bl	1140c <mbsinit@plt>
   2045c:	cmp	r0, #0
   20460:	beq	209c0 <__assert_fail@plt+0xf26c>
   20464:	strb	r5, [sp, #256]	; 0x100
   20468:	b	20264 <__assert_fail@plt+0xeb10>
   2046c:	add	r7, r7, #1
   20470:	ldr	r3, [sp, #52]	; 0x34
   20474:	ldr	r6, [sp, #160]	; 0xa0
   20478:	ldr	r4, [sp, #164]	; 0xa4
   2047c:	cmp	r4, r3
   20480:	bne	20308 <__assert_fail@plt+0xebb4>
   20484:	mov	r2, r4
   20488:	mov	r0, r6
   2048c:	ldr	r1, [sp, #48]	; 0x30
   20490:	bl	11418 <memcmp@plt>
   20494:	cmp	r0, #0
   20498:	bne	20308 <__assert_fail@plt+0xebb4>
   2049c:	b	200a8 <__assert_fail@plt+0xe954>
   204a0:	ldr	r0, [sp, #272]	; 0x110
   204a4:	bl	115b0 <strlen@plt>
   204a8:	strb	r5, [sp, #268]	; 0x10c
   204ac:	str	r0, [sp, #276]	; 0x114
   204b0:	strb	r9, [sp, #280]	; 0x118
   204b4:	b	201ac <__assert_fail@plt+0xea58>
   204b8:	ldr	r3, [sp, #272]	; 0x110
   204bc:	str	fp, [sp, #276]	; 0x114
   204c0:	ldrb	r3, [r3]
   204c4:	cmp	r3, #0
   204c8:	bne	209e0 <__assert_fail@plt+0xf28c>
   204cc:	ldr	r4, [sp, #284]	; 0x11c
   204d0:	cmp	r4, #0
   204d4:	beq	202b4 <__assert_fail@plt+0xeb60>
   204d8:	b	20944 <__assert_fail@plt+0xf1f0>
   204dc:	ldr	r3, [sp, #216]	; 0xd8
   204e0:	str	fp, [sp, #220]	; 0xdc
   204e4:	ldrb	r3, [r3]
   204e8:	cmp	r3, #0
   204ec:	bne	209e0 <__assert_fail@plt+0xf28c>
   204f0:	ldr	r6, [sp, #228]	; 0xe4
   204f4:	cmp	r6, #0
   204f8:	beq	20400 <__assert_fail@plt+0xecac>
   204fc:	b	20944 <__assert_fail@plt+0xf1f0>
   20500:	add	r4, sp, #148	; 0x94
   20504:	mov	r0, r4
   20508:	bl	1140c <mbsinit@plt>
   2050c:	cmp	r0, #0
   20510:	beq	209c0 <__assert_fail@plt+0xf26c>
   20514:	strb	r5, [sp, #144]	; 0x90
   20518:	b	20334 <__assert_fail@plt+0xebe0>
   2051c:	mov	r3, #0
   20520:	strb	r5, [sp, #156]	; 0x9c
   20524:	str	fp, [sp, #164]	; 0xa4
   20528:	strb	r3, [sp, #168]	; 0xa8
   2052c:	ldrd	r2, [sp, #4]
   20530:	cmp	r2, #9
   20534:	movls	r3, #0
   20538:	andhi	r3, r3, #1
   2053c:	cmp	r3, #0
   20540:	beq	2046c <__assert_fail@plt+0xed18>
   20544:	add	r2, r2, r2, lsl #2
   20548:	cmp	r7, r2
   2054c:	addcc	r7, r7, #1
   20550:	strcc	r3, [sp, #8]
   20554:	bcc	20470 <__assert_fail@plt+0xed1c>
   20558:	ldr	r3, [sp, #24]
   2055c:	subs	r6, r7, r3
   20560:	ldrb	r3, [sp, #100]	; 0x64
   20564:	beq	2099c <__assert_fail@plt+0xf248>
   20568:	cmp	r3, #0
   2056c:	beq	20740 <__assert_fail@plt+0xefec>
   20570:	ldrb	r3, [sp, #112]	; 0x70
   20574:	cmp	r3, #0
   20578:	bne	2070c <__assert_fail@plt+0xefb8>
   2057c:	ldrb	r1, [sp, #88]	; 0x58
   20580:	ldr	r4, [sp, #104]	; 0x68
   20584:	mov	r2, #0
   20588:	subs	r6, r6, #1
   2058c:	ldr	r3, [sp, #108]	; 0x6c
   20590:	strb	r2, [sp, #100]	; 0x64
   20594:	add	r4, r4, r3
   20598:	mov	r9, r4
   2059c:	str	r4, [sp, #104]	; 0x68
   205a0:	beq	20770 <__assert_fail@plt+0xf01c>
   205a4:	cmp	r1, #0
   205a8:	addne	r8, sp, #92	; 0x5c
   205ac:	bne	20624 <__assert_fail@plt+0xeed0>
   205b0:	ldrb	r3, [r4]
   205b4:	lsr	r2, r3, #5
   205b8:	and	r3, r3, #31
   205bc:	ldr	r2, [sl, r2, lsl #2]
   205c0:	lsr	r3, r2, r3
   205c4:	tst	r3, #1
   205c8:	beq	2060c <__assert_fail@plt+0xeeb8>
   205cc:	str	fp, [sp, #108]	; 0x6c
   205d0:	ldrb	r3, [r4]
   205d4:	strb	r5, [sp, #100]	; 0x64
   205d8:	strb	r5, [sp, #112]	; 0x70
   205dc:	cmp	r3, #0
   205e0:	str	r3, [sp, #116]	; 0x74
   205e4:	bne	20584 <__assert_fail@plt+0xee30>
   205e8:	add	r2, sp, #256	; 0x100
   205ec:	ldr	r1, [sp, #12]
   205f0:	ldr	r0, [sp, #28]
   205f4:	bl	1f424 <__assert_fail@plt+0xdcd0>
   205f8:	subs	r3, r0, #0
   205fc:	str	r3, [sp, #8]
   20600:	bne	209b8 <__assert_fail@plt+0xf264>
   20604:	ldrb	r3, [sp, #168]	; 0xa8
   20608:	b	207c0 <__assert_fail@plt+0xf06c>
   2060c:	add	r8, sp, #92	; 0x5c
   20610:	mov	r0, r8
   20614:	bl	1140c <mbsinit@plt>
   20618:	cmp	r0, #0
   2061c:	beq	209c0 <__assert_fail@plt+0xf26c>
   20620:	strb	r5, [sp, #88]	; 0x58
   20624:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20628:	mov	r1, r0
   2062c:	mov	r0, r4
   20630:	bl	1d9a8 <__assert_fail@plt+0xc254>
   20634:	mov	r2, r0
   20638:	mov	r3, r8
   2063c:	mov	r1, r4
   20640:	add	r0, sp, #116	; 0x74
   20644:	bl	1f208 <__assert_fail@plt+0xdab4>
   20648:	cmn	r0, #1
   2064c:	str	r0, [sp, #108]	; 0x6c
   20650:	beq	2068c <__assert_fail@plt+0xef38>
   20654:	cmn	r0, #2
   20658:	beq	206a4 <__assert_fail@plt+0xef50>
   2065c:	cmp	r0, #0
   20660:	beq	206dc <__assert_fail@plt+0xef88>
   20664:	ldr	r4, [sp, #116]	; 0x74
   20668:	mov	r0, r8
   2066c:	strb	r5, [sp, #112]	; 0x70
   20670:	bl	1140c <mbsinit@plt>
   20674:	cmp	r0, #0
   20678:	bne	206c4 <__assert_fail@plt+0xef70>
   2067c:	cmp	r4, #0
   20680:	strb	r5, [sp, #100]	; 0x64
   20684:	bne	2057c <__assert_fail@plt+0xee28>
   20688:	b	205e8 <__assert_fail@plt+0xee94>
   2068c:	mov	r3, #0
   20690:	ldrb	r1, [sp, #88]	; 0x58
   20694:	str	fp, [sp, #108]	; 0x6c
   20698:	strb	r3, [sp, #112]	; 0x70
   2069c:	ldr	r4, [sp, #104]	; 0x68
   206a0:	b	20584 <__assert_fail@plt+0xee30>
   206a4:	ldr	r4, [sp, #104]	; 0x68
   206a8:	mov	r0, r4
   206ac:	bl	115b0 <strlen@plt>
   206b0:	mov	r3, #0
   206b4:	ldrb	r1, [sp, #88]	; 0x58
   206b8:	str	r0, [sp, #108]	; 0x6c
   206bc:	strb	r3, [sp, #112]	; 0x70
   206c0:	b	20584 <__assert_fail@plt+0xee30>
   206c4:	mov	r1, #0
   206c8:	cmp	r4, r1
   206cc:	strb	r1, [sp, #88]	; 0x58
   206d0:	strb	r5, [sp, #100]	; 0x64
   206d4:	bne	20580 <__assert_fail@plt+0xee2c>
   206d8:	b	205e8 <__assert_fail@plt+0xee94>
   206dc:	ldr	r4, [sp, #104]	; 0x68
   206e0:	str	fp, [sp, #108]	; 0x6c
   206e4:	ldrb	r3, [r4]
   206e8:	cmp	r3, #0
   206ec:	bne	209e0 <__assert_fail@plt+0xf28c>
   206f0:	ldr	r4, [sp, #116]	; 0x74
   206f4:	cmp	r4, #0
   206f8:	beq	20668 <__assert_fail@plt+0xef14>
   206fc:	b	20944 <__assert_fail@plt+0xf1f0>
   20700:	mov	r0, r4
   20704:	mov	sl, r5
   20708:	b	1fde0 <__assert_fail@plt+0xe68c>
   2070c:	ldr	r3, [sp, #116]	; 0x74
   20710:	cmp	r3, #0
   20714:	bne	2057c <__assert_fail@plt+0xee28>
   20718:	b	205e8 <__assert_fail@plt+0xee94>
   2071c:	ldr	r6, [sp, #172]	; 0xac
   20720:	mov	r0, r4
   20724:	strb	r5, [sp, #168]	; 0xa8
   20728:	bl	1140c <mbsinit@plt>
   2072c:	cmp	r0, #0
   20730:	strb	r5, [sp, #156]	; 0x9c
   20734:	movne	r3, #0
   20738:	strbne	r3, [sp, #144]	; 0x90
   2073c:	b	20054 <__assert_fail@plt+0xe900>
   20740:	ldrb	r1, [sp, #88]	; 0x58
   20744:	ldr	r4, [sp, #104]	; 0x68
   20748:	b	205a4 <__assert_fail@plt+0xee50>
   2074c:	ldr	r0, [sp, #160]	; 0xa0
   20750:	bl	115b0 <strlen@plt>
   20754:	mov	r3, #0
   20758:	strb	r5, [sp, #156]	; 0x9c
   2075c:	str	r0, [sp, #164]	; 0xa4
   20760:	strb	r3, [sp, #168]	; 0xa8
   20764:	b	2052c <__assert_fail@plt+0xedd8>
   20768:	ldrb	r1, [sp, #88]	; 0x58
   2076c:	ldr	r9, [sp, #104]	; 0x68
   20770:	cmp	r1, #0
   20774:	addne	r8, sp, #92	; 0x5c
   20778:	bne	20874 <__assert_fail@plt+0xf120>
   2077c:	ldrb	r3, [r9]
   20780:	lsr	r2, r3, #5
   20784:	and	r3, r3, #31
   20788:	ldr	r2, [sl, r2, lsl #2]
   2078c:	lsr	r3, r2, r3
   20790:	tst	r3, #1
   20794:	beq	2085c <__assert_fail@plt+0xf108>
   20798:	str	fp, [sp, #108]	; 0x6c
   2079c:	ldrb	r4, [r9]
   207a0:	strb	r5, [sp, #100]	; 0x64
   207a4:	strb	r5, [sp, #112]	; 0x70
   207a8:	str	r4, [sp, #116]	; 0x74
   207ac:	cmp	r4, #0
   207b0:	beq	205e8 <__assert_fail@plt+0xee94>
   207b4:	ldrb	r3, [sp, #168]	; 0xa8
   207b8:	mov	r2, #1
   207bc:	str	r2, [sp, #8]
   207c0:	cmp	r3, #0
   207c4:	add	r3, r7, #1
   207c8:	str	r7, [sp, #24]
   207cc:	mov	r7, r3
   207d0:	bne	2008c <__assert_fail@plt+0xe938>
   207d4:	b	20470 <__assert_fail@plt+0xed1c>
   207d8:	add	r0, sp, #260	; 0x104
   207dc:	bl	1140c <mbsinit@plt>
   207e0:	cmp	r0, #0
   207e4:	beq	209c0 <__assert_fail@plt+0xf26c>
   207e8:	strb	r5, [sp, #256]	; 0x100
   207ec:	bl	114fc <__ctype_get_mb_cur_max@plt>
   207f0:	ldr	r4, [sp, #12]
   207f4:	mov	r1, r0
   207f8:	mov	r0, r4
   207fc:	bl	1d9a8 <__assert_fail@plt+0xc254>
   20800:	mov	r2, r0
   20804:	add	r3, sp, #260	; 0x104
   20808:	mov	r1, r4
   2080c:	add	r0, sp, #284	; 0x11c
   20810:	bl	1f208 <__assert_fail@plt+0xdab4>
   20814:	cmn	r0, #1
   20818:	str	r0, [sp, #276]	; 0x114
   2081c:	beq	208d8 <__assert_fail@plt+0xf184>
   20820:	cmn	r0, #2
   20824:	beq	208e8 <__assert_fail@plt+0xf194>
   20828:	cmp	r0, #0
   2082c:	beq	20900 <__assert_fail@plt+0xf1ac>
   20830:	ldr	r4, [sp, #284]	; 0x11c
   20834:	add	r0, sp, #260	; 0x104
   20838:	strb	r5, [sp, #280]	; 0x118
   2083c:	bl	1140c <mbsinit@plt>
   20840:	cmp	r0, #0
   20844:	strb	r5, [sp, #268]	; 0x10c
   20848:	movne	r3, #0
   2084c:	strbne	r3, [sp, #256]	; 0x100
   20850:	cmp	r4, #0
   20854:	bne	20150 <__assert_fail@plt+0xe9fc>
   20858:	bl	11748 <abort@plt>
   2085c:	add	r8, sp, #92	; 0x5c
   20860:	mov	r0, r8
   20864:	bl	1140c <mbsinit@plt>
   20868:	cmp	r0, #0
   2086c:	beq	209c0 <__assert_fail@plt+0xf26c>
   20870:	strb	r5, [sp, #88]	; 0x58
   20874:	bl	114fc <__ctype_get_mb_cur_max@plt>
   20878:	mov	r1, r0
   2087c:	mov	r0, r9
   20880:	bl	1d9a8 <__assert_fail@plt+0xc254>
   20884:	mov	r2, r0
   20888:	mov	r3, r8
   2088c:	mov	r1, r9
   20890:	add	r0, sp, #116	; 0x74
   20894:	bl	1f208 <__assert_fail@plt+0xdab4>
   20898:	cmn	r0, #1
   2089c:	str	r0, [sp, #108]	; 0x6c
   208a0:	beq	20964 <__assert_fail@plt+0xf210>
   208a4:	cmn	r0, #2
   208a8:	beq	20948 <__assert_fail@plt+0xf1f4>
   208ac:	cmp	r0, #0
   208b0:	beq	20978 <__assert_fail@plt+0xf224>
   208b4:	ldr	r4, [sp, #116]	; 0x74
   208b8:	mov	r0, r8
   208bc:	strb	r5, [sp, #112]	; 0x70
   208c0:	bl	1140c <mbsinit@plt>
   208c4:	cmp	r0, #0
   208c8:	strb	r5, [sp, #100]	; 0x64
   208cc:	movne	r3, #0
   208d0:	strbne	r3, [sp, #88]	; 0x58
   208d4:	b	207ac <__assert_fail@plt+0xf058>
   208d8:	str	fp, [sp, #276]	; 0x114
   208dc:	strb	r6, [sp, #280]	; 0x118
   208e0:	ldr	r4, [sp, #272]	; 0x110
   208e4:	b	20154 <__assert_fail@plt+0xea00>
   208e8:	ldr	r4, [sp, #272]	; 0x110
   208ec:	mov	r0, r4
   208f0:	bl	115b0 <strlen@plt>
   208f4:	str	r0, [sp, #276]	; 0x114
   208f8:	strb	r6, [sp, #280]	; 0x118
   208fc:	b	20154 <__assert_fail@plt+0xea00>
   20900:	ldr	r4, [sp, #272]	; 0x110
   20904:	str	fp, [sp, #276]	; 0x114
   20908:	ldrb	r3, [r4]
   2090c:	cmp	r3, #0
   20910:	bne	209e0 <__assert_fail@plt+0xf28c>
   20914:	ldr	r4, [sp, #284]	; 0x11c
   20918:	cmp	r4, #0
   2091c:	beq	20834 <__assert_fail@plt+0xf0e0>
   20920:	b	20944 <__assert_fail@plt+0xf1f0>
   20924:	ldr	r3, [sp, #48]	; 0x30
   20928:	str	r6, [sp, #52]	; 0x34
   2092c:	ldrb	r3, [r3]
   20930:	cmp	r3, #0
   20934:	bne	209e0 <__assert_fail@plt+0xf28c>
   20938:	ldr	r5, [sp, #60]	; 0x3c
   2093c:	cmp	r5, #0
   20940:	beq	1fe9c <__assert_fail@plt+0xe748>
   20944:	bl	1f3fc <__assert_fail@plt+0xdca8>
   20948:	ldr	r0, [sp, #104]	; 0x68
   2094c:	bl	115b0 <strlen@plt>
   20950:	mov	r3, #0
   20954:	strb	r5, [sp, #100]	; 0x64
   20958:	str	r0, [sp, #108]	; 0x6c
   2095c:	strb	r3, [sp, #112]	; 0x70
   20960:	b	207b4 <__assert_fail@plt+0xf060>
   20964:	mov	r3, #0
   20968:	strb	r5, [sp, #100]	; 0x64
   2096c:	str	fp, [sp, #108]	; 0x6c
   20970:	strb	r3, [sp, #112]	; 0x70
   20974:	b	207b4 <__assert_fail@plt+0xf060>
   20978:	ldr	r4, [sp, #104]	; 0x68
   2097c:	str	fp, [sp, #108]	; 0x6c
   20980:	ldrb	r3, [r4]
   20984:	cmp	r3, #0
   20988:	bne	209e0 <__assert_fail@plt+0xf28c>
   2098c:	ldr	r4, [sp, #116]	; 0x74
   20990:	cmp	r4, #0
   20994:	beq	208b8 <__assert_fail@plt+0xf164>
   20998:	b	20944 <__assert_fail@plt+0xf1f0>
   2099c:	cmp	r3, #0
   209a0:	beq	20768 <__assert_fail@plt+0xf014>
   209a4:	ldrb	r3, [sp, #112]	; 0x70
   209a8:	cmp	r3, #0
   209ac:	ldrne	r4, [sp, #116]	; 0x74
   209b0:	beq	207b4 <__assert_fail@plt+0xf060>
   209b4:	b	207ac <__assert_fail@plt+0xf058>
   209b8:	ldr	r0, [sp, #256]	; 0x100
   209bc:	b	1fec8 <__assert_fail@plt+0xe774>
   209c0:	movw	r3, #20492	; 0x500c
   209c4:	movt	r3, #2
   209c8:	movw	r1, #19272	; 0x4b48
   209cc:	movt	r1, #2
   209d0:	movw	r0, #19308	; 0x4b6c
   209d4:	movt	r0, #2
   209d8:	mov	r2, #143	; 0x8f
   209dc:	bl	11754 <__assert_fail@plt>
   209e0:	movw	r3, #20492	; 0x500c
   209e4:	movt	r3, #2
   209e8:	movw	r1, #19272	; 0x4b48
   209ec:	movt	r1, #2
   209f0:	movw	r0, #19332	; 0x4b84
   209f4:	movt	r0, #2
   209f8:	mov	r2, #171	; 0xab
   209fc:	bl	11754 <__assert_fail@plt>
   20a00:	umull	r2, r3, r1, r2
   20a04:	cmp	r3, #0
   20a08:	bne	20a14 <__assert_fail@plt+0xf2c0>
   20a0c:	mov	r1, r2
   20a10:	b	1edbc <__assert_fail@plt+0xd668>
   20a14:	str	r4, [sp, #-8]!
   20a18:	str	lr, [sp, #4]
   20a1c:	bl	115e0 <__errno_location@plt>
   20a20:	mov	r3, #12
   20a24:	ldr	r4, [sp]
   20a28:	add	sp, sp, #4
   20a2c:	str	r3, [r0]
   20a30:	mov	r0, #0
   20a34:	pop	{pc}		; (ldr pc, [sp], #4)
   20a38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20a3c:	mov	r5, #0
   20a40:	strd	r6, [sp, #8]
   20a44:	mov	r7, r0
   20a48:	mov	r6, r2
   20a4c:	strd	r8, [sp, #16]
   20a50:	strd	sl, [sp, #24]
   20a54:	mov	fp, r1
   20a58:	mov	r1, r5
   20a5c:	str	lr, [sp, #32]
   20a60:	sub	sp, sp, #4096	; 0x1000
   20a64:	sub	sp, sp, #36	; 0x24
   20a68:	add	r4, sp, #32
   20a6c:	str	r5, [sp]
   20a70:	str	r3, [sp, #8]
   20a74:	mov	r3, r5
   20a78:	str	r0, [sp, #12]
   20a7c:	mov	r0, r2
   20a80:	mov	r2, r5
   20a84:	bl	1137c <iconv@plt>
   20a88:	cmp	fp, r5
   20a8c:	str	r7, [r4, #-16]
   20a90:	str	fp, [r4, #-12]
   20a94:	beq	20ca0 <__assert_fail@plt+0xf54c>
   20a98:	add	r8, sp, #24
   20a9c:	add	r9, sp, #20
   20aa0:	add	r7, sp, #28
   20aa4:	mov	sl, #4096	; 0x1000
   20aa8:	b	20ac0 <__assert_fail@plt+0xf36c>
   20aac:	ldrd	r2, [r4, #-12]
   20ab0:	sub	r3, r3, r4
   20ab4:	cmp	r2, #0
   20ab8:	add	r5, r5, r3
   20abc:	beq	20afc <__assert_fail@plt+0xf3a8>
   20ac0:	mov	r3, r8
   20ac4:	mov	r2, r9
   20ac8:	str	r7, [sp]
   20acc:	add	r1, sp, #16
   20ad0:	mov	r0, r6
   20ad4:	stmdb	r4, {r4, sl}
   20ad8:	bl	1137c <iconv@plt>
   20adc:	cmn	r0, #1
   20ae0:	bne	20aac <__assert_fail@plt+0xf358>
   20ae4:	bl	115e0 <__errno_location@plt>
   20ae8:	ldr	r3, [r0]
   20aec:	cmp	r3, #7
   20af0:	beq	20aac <__assert_fail@plt+0xf358>
   20af4:	cmp	r3, #22
   20af8:	bne	20c98 <__assert_fail@plt+0xf544>
   20afc:	mov	ip, #4096	; 0x1000
   20b00:	mov	r2, #0
   20b04:	str	r7, [sp]
   20b08:	mov	r1, r2
   20b0c:	mov	r3, r8
   20b10:	mov	r0, r6
   20b14:	stmdb	r4, {r4, ip}
   20b18:	bl	1137c <iconv@plt>
   20b1c:	cmn	r0, #1
   20b20:	beq	20c98 <__assert_fail@plt+0xf544>
   20b24:	ldr	r3, [r4, #-8]
   20b28:	sub	r3, r3, r4
   20b2c:	adds	r5, r3, r5
   20b30:	beq	20c80 <__assert_fail@plt+0xf52c>
   20b34:	ldr	r3, [sp, #8]
   20b38:	ldr	sl, [r3]
   20b3c:	cmp	sl, #0
   20b40:	beq	20c3c <__assert_fail@plt+0xf4e8>
   20b44:	add	r3, sp, #4160	; 0x1040
   20b48:	add	r3, r3, #8
   20b4c:	ldr	r3, [r3]
   20b50:	ldr	r3, [r3]
   20b54:	cmp	r3, r5
   20b58:	bcc	20c3c <__assert_fail@plt+0xf4e8>
   20b5c:	mov	r3, #0
   20b60:	mov	r0, r6
   20b64:	mov	r2, r3
   20b68:	mov	r1, r3
   20b6c:	str	r3, [sp]
   20b70:	bl	1137c <iconv@plt>
   20b74:	ldr	r3, [sp, #12]
   20b78:	cmp	fp, #0
   20b7c:	str	r3, [r4, #-12]
   20b80:	str	fp, [r4, #-8]
   20b84:	str	sl, [r4, #-4]
   20b88:	str	r5, [r4]
   20b8c:	beq	20bd4 <__assert_fail@plt+0xf480>
   20b90:	add	r9, sp, #20
   20b94:	b	20ba4 <__assert_fail@plt+0xf450>
   20b98:	ldr	r3, [r4, #-8]
   20b9c:	cmp	r3, #0
   20ba0:	beq	20bd4 <__assert_fail@plt+0xf480>
   20ba4:	mov	r3, r7
   20ba8:	mov	r2, r8
   20bac:	str	r4, [sp]
   20bb0:	mov	r1, r9
   20bb4:	mov	r0, r6
   20bb8:	bl	1137c <iconv@plt>
   20bbc:	cmn	r0, #1
   20bc0:	bne	20b98 <__assert_fail@plt+0xf444>
   20bc4:	bl	115e0 <__errno_location@plt>
   20bc8:	ldr	r3, [r0]
   20bcc:	cmp	r3, #22
   20bd0:	bne	20c60 <__assert_fail@plt+0xf50c>
   20bd4:	mov	r2, #0
   20bd8:	mov	r3, r7
   20bdc:	str	r4, [sp]
   20be0:	mov	r0, r6
   20be4:	mov	r1, r2
   20be8:	bl	1137c <iconv@plt>
   20bec:	cmn	r0, #1
   20bf0:	beq	20c60 <__assert_fail@plt+0xf50c>
   20bf4:	ldr	r3, [r4]
   20bf8:	cmp	r3, #0
   20bfc:	bne	20cb0 <__assert_fail@plt+0xf55c>
   20c00:	ldr	r2, [sp, #8]
   20c04:	str	sl, [r2]
   20c08:	add	r2, sp, #4160	; 0x1040
   20c0c:	add	r2, r2, #8
   20c10:	ldr	r2, [r2]
   20c14:	str	r5, [r2]
   20c18:	mov	r0, r3
   20c1c:	add	sp, sp, #4096	; 0x1000
   20c20:	add	sp, sp, #36	; 0x24
   20c24:	ldrd	r4, [sp]
   20c28:	ldrd	r6, [sp, #8]
   20c2c:	ldrd	r8, [sp, #16]
   20c30:	ldrd	sl, [sp, #24]
   20c34:	add	sp, sp, #32
   20c38:	pop	{pc}		; (ldr pc, [sp], #4)
   20c3c:	mov	r0, r5
   20c40:	bl	1ed80 <__assert_fail@plt+0xd62c>
   20c44:	subs	sl, r0, #0
   20c48:	bne	20b5c <__assert_fail@plt+0xf408>
   20c4c:	bl	115e0 <__errno_location@plt>
   20c50:	mov	r2, #12
   20c54:	mvn	r3, #0
   20c58:	str	r2, [r0]
   20c5c:	b	20c18 <__assert_fail@plt+0xf4c4>
   20c60:	ldr	r3, [sp, #8]
   20c64:	ldr	r3, [r3]
   20c68:	cmp	r3, sl
   20c6c:	beq	20c98 <__assert_fail@plt+0xf544>
   20c70:	mov	r0, sl
   20c74:	bl	18d2c <__assert_fail@plt+0x75d8>
   20c78:	mvn	r3, #0
   20c7c:	b	20c18 <__assert_fail@plt+0xf4c4>
   20c80:	add	r2, sp, #4160	; 0x1040
   20c84:	mov	r3, r5
   20c88:	add	r2, r2, #8
   20c8c:	ldr	r2, [r2]
   20c90:	str	r5, [r2]
   20c94:	b	20c18 <__assert_fail@plt+0xf4c4>
   20c98:	mvn	r3, #0
   20c9c:	b	20c18 <__assert_fail@plt+0xf4c4>
   20ca0:	mov	r5, fp
   20ca4:	add	r8, sp, #24
   20ca8:	add	r7, sp, #28
   20cac:	b	20afc <__assert_fail@plt+0xf3a8>
   20cb0:	bl	11748 <abort@plt>
   20cb4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   20cb8:	strd	r6, [sp, #8]
   20cbc:	strd	r8, [sp, #16]
   20cc0:	mov	r8, r1
   20cc4:	str	sl, [sp, #24]
   20cc8:	str	lr, [sp, #28]
   20ccc:	sub	sp, sp, #24
   20cd0:	str	r0, [sp, #8]
   20cd4:	bl	115b0 <strlen@plt>
   20cd8:	cmp	r0, #4096	; 0x1000
   20cdc:	mov	r4, r0
   20ce0:	str	r0, [sp, #12]
   20ce4:	lslcc	r4, r0, #4
   20ce8:	add	r7, r4, #1
   20cec:	mov	r0, r7
   20cf0:	bl	1ed80 <__assert_fail@plt+0xd62c>
   20cf4:	subs	r6, r0, #0
   20cf8:	beq	20e90 <__assert_fail@plt+0xf73c>
   20cfc:	mov	r0, #0
   20d00:	add	r9, sp, #20
   20d04:	mov	r3, r0
   20d08:	mov	r2, r0
   20d0c:	mov	r1, r0
   20d10:	str	r0, [sp]
   20d14:	mov	r0, r8
   20d18:	bl	1137c <iconv@plt>
   20d1c:	str	r6, [sp, #16]
   20d20:	str	r4, [sp, #20]
   20d24:	b	20d84 <__assert_fail@plt+0xf630>
   20d28:	bl	115e0 <__errno_location@plt>
   20d2c:	mov	sl, r0
   20d30:	mov	r1, r4
   20d34:	ldr	r3, [sl]
   20d38:	mov	r0, r6
   20d3c:	cmp	r3, #22
   20d40:	beq	20e00 <__assert_fail@plt+0xf6ac>
   20d44:	cmp	r3, #7
   20d48:	bne	20e64 <__assert_fail@plt+0xf710>
   20d4c:	ldr	r5, [sp, #16]
   20d50:	cmp	r7, r4
   20d54:	mov	r7, r4
   20d58:	sub	r5, r5, r6
   20d5c:	bcs	20e5c <__assert_fail@plt+0xf708>
   20d60:	bl	1edbc <__assert_fail@plt+0xd668>
   20d64:	sub	r4, r4, #1
   20d68:	cmp	r0, #0
   20d6c:	add	r3, r0, r5
   20d70:	sub	r4, r4, r5
   20d74:	beq	20e5c <__assert_fail@plt+0xf708>
   20d78:	mov	r6, r0
   20d7c:	str	r3, [sp, #16]
   20d80:	str	r4, [sp, #20]
   20d84:	add	r3, sp, #16
   20d88:	add	r2, sp, #12
   20d8c:	str	r9, [sp]
   20d90:	add	r1, sp, #8
   20d94:	mov	r0, r8
   20d98:	lsl	r4, r7, #1
   20d9c:	bl	1137c <iconv@plt>
   20da0:	cmn	r0, #1
   20da4:	beq	20d28 <__assert_fail@plt+0xf5d4>
   20da8:	b	20e00 <__assert_fail@plt+0xf6ac>
   20dac:	bl	115e0 <__errno_location@plt>
   20db0:	mov	sl, r0
   20db4:	mov	r1, r4
   20db8:	ldr	r3, [sl]
   20dbc:	mov	r0, r6
   20dc0:	cmp	r3, #7
   20dc4:	bne	20e64 <__assert_fail@plt+0xf710>
   20dc8:	ldr	r5, [sp, #16]
   20dcc:	cmp	r7, r4
   20dd0:	mov	r7, r4
   20dd4:	sub	r5, r5, r6
   20dd8:	bcs	20e5c <__assert_fail@plt+0xf708>
   20ddc:	bl	1edbc <__assert_fail@plt+0xd668>
   20de0:	sub	r4, r4, #1
   20de4:	cmp	r0, #0
   20de8:	add	r3, r0, r5
   20dec:	sub	r4, r4, r5
   20df0:	beq	20e5c <__assert_fail@plt+0xf708>
   20df4:	mov	r6, r0
   20df8:	str	r3, [sp, #16]
   20dfc:	str	r4, [sp, #20]
   20e00:	mov	r2, #0
   20e04:	add	r3, sp, #16
   20e08:	str	r9, [sp]
   20e0c:	mov	r1, r2
   20e10:	mov	r0, r8
   20e14:	lsl	r4, r7, #1
   20e18:	bl	1137c <iconv@plt>
   20e1c:	cmn	r0, #1
   20e20:	beq	20dac <__assert_fail@plt+0xf658>
   20e24:	ldr	r3, [sp, #16]
   20e28:	mov	r2, #0
   20e2c:	add	r1, r3, #1
   20e30:	str	r1, [sp, #16]
   20e34:	strb	r2, [r3]
   20e38:	ldr	r1, [sp, #16]
   20e3c:	sub	r1, r1, r6
   20e40:	cmp	r7, r1
   20e44:	bls	20e70 <__assert_fail@plt+0xf71c>
   20e48:	mov	r0, r6
   20e4c:	bl	1edbc <__assert_fail@plt+0xd668>
   20e50:	cmp	r0, #0
   20e54:	movne	r6, r0
   20e58:	b	20e70 <__assert_fail@plt+0xf71c>
   20e5c:	mov	r3, #12
   20e60:	str	r3, [sl]
   20e64:	mov	r0, r6
   20e68:	mov	r6, #0
   20e6c:	bl	18d2c <__assert_fail@plt+0x75d8>
   20e70:	mov	r0, r6
   20e74:	add	sp, sp, #24
   20e78:	ldrd	r4, [sp]
   20e7c:	ldrd	r6, [sp, #8]
   20e80:	ldrd	r8, [sp, #16]
   20e84:	ldr	sl, [sp, #24]
   20e88:	add	sp, sp, #28
   20e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   20e90:	bl	115e0 <__errno_location@plt>
   20e94:	mov	r3, #12
   20e98:	str	r3, [r0]
   20e9c:	b	20e70 <__assert_fail@plt+0xf71c>
   20ea0:	strd	r4, [sp, #-16]!
   20ea4:	mov	r4, r0
   20ea8:	str	r6, [sp, #8]
   20eac:	str	lr, [sp, #12]
   20eb0:	ldrb	r3, [r0]
   20eb4:	cmp	r3, #0
   20eb8:	beq	20ed8 <__assert_fail@plt+0xf784>
   20ebc:	mov	r6, r1
   20ec0:	mov	r1, r2
   20ec4:	mov	r0, r6
   20ec8:	mov	r5, r2
   20ecc:	bl	1ee14 <__assert_fail@plt+0xd6c0>
   20ed0:	cmp	r0, #0
   20ed4:	bne	20efc <__assert_fail@plt+0xf7a8>
   20ed8:	mov	r0, r4
   20edc:	bl	11448 <strdup@plt>
   20ee0:	subs	r4, r0, #0
   20ee4:	beq	20f4c <__assert_fail@plt+0xf7f8>
   20ee8:	mov	r0, r4
   20eec:	ldrd	r4, [sp]
   20ef0:	ldr	r6, [sp, #8]
   20ef4:	add	sp, sp, #12
   20ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   20efc:	mov	r0, r5
   20f00:	mov	r1, r6
   20f04:	bl	11538 <iconv_open@plt>
   20f08:	cmn	r0, #1
   20f0c:	mov	r5, r0
   20f10:	moveq	r4, #0
   20f14:	beq	20ee8 <__assert_fail@plt+0xf794>
   20f18:	mov	r0, r4
   20f1c:	mov	r1, r5
   20f20:	bl	20cb4 <__assert_fail@plt+0xf560>
   20f24:	subs	r4, r0, #0
   20f28:	beq	20f5c <__assert_fail@plt+0xf808>
   20f2c:	mov	r0, r5
   20f30:	bl	11370 <iconv_close@plt>
   20f34:	cmp	r0, #0
   20f38:	bge	20ee8 <__assert_fail@plt+0xf794>
   20f3c:	mov	r0, r4
   20f40:	mov	r4, #0
   20f44:	bl	18d2c <__assert_fail@plt+0x75d8>
   20f48:	b	20ee8 <__assert_fail@plt+0xf794>
   20f4c:	bl	115e0 <__errno_location@plt>
   20f50:	mov	r3, #12
   20f54:	str	r3, [r0]
   20f58:	b	20ee8 <__assert_fail@plt+0xf794>
   20f5c:	bl	115e0 <__errno_location@plt>
   20f60:	mov	r6, r0
   20f64:	mov	r0, r5
   20f68:	ldr	r5, [r6]
   20f6c:	bl	11370 <iconv_close@plt>
   20f70:	str	r5, [r6]
   20f74:	b	20ee8 <__assert_fail@plt+0xf794>
   20f78:	push	{lr}		; (str lr, [sp, #-4]!)
   20f7c:	sub	sp, sp, #268	; 0x10c
   20f80:	movw	r2, #257	; 0x101
   20f84:	add	r1, sp, #4
   20f88:	bl	2125c <__assert_fail@plt+0xfb08>
   20f8c:	cmp	r0, #0
   20f90:	movne	r0, #0
   20f94:	bne	20fc8 <__assert_fail@plt+0xf874>
   20f98:	movw	r1, #20512	; 0x5020
   20f9c:	movt	r1, #2
   20fa0:	add	r0, sp, #4
   20fa4:	bl	11388 <strcmp@plt>
   20fa8:	cmp	r0, #0
   20fac:	beq	20fc8 <__assert_fail@plt+0xf874>
   20fb0:	add	r0, sp, #4
   20fb4:	movw	r1, #20516	; 0x5024
   20fb8:	movt	r1, #2
   20fbc:	bl	11388 <strcmp@plt>
   20fc0:	adds	r0, r0, #0
   20fc4:	movne	r0, #1
   20fc8:	add	sp, sp, #268	; 0x10c
   20fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   20fd0:	adds	r3, r0, #16
   20fd4:	bmi	21020 <__assert_fail@plt+0xf8cc>
   20fd8:	cmp	r3, r0
   20fdc:	bcc	21020 <__assert_fail@plt+0xf8cc>
   20fe0:	mov	r0, r3
   20fe4:	str	r4, [sp, #-8]!
   20fe8:	str	lr, [sp, #4]
   20fec:	bl	1152c <malloc@plt>
   20ff0:	cmp	r0, #0
   20ff4:	moveq	r0, #0
   20ff8:	beq	21014 <__assert_fail@plt+0xf8c0>
   20ffc:	add	r3, r0, #8
   21000:	rsb	r2, r0, #8
   21004:	bic	r3, r3, #15
   21008:	add	r3, r3, r2
   2100c:	add	r0, r0, r3
   21010:	strb	r3, [r0, #-1]
   21014:	ldr	r4, [sp]
   21018:	add	sp, sp, #4
   2101c:	pop	{pc}		; (ldr pc, [sp], #4)
   21020:	mov	r0, #0
   21024:	bx	lr
   21028:	tst	r0, #7
   2102c:	bne	21044 <__assert_fail@plt+0xf8f0>
   21030:	tst	r0, #8
   21034:	bxeq	lr
   21038:	ldrb	r3, [r0, #-1]
   2103c:	sub	r0, r0, r3
   21040:	b	18d2c <__assert_fail@plt+0x75d8>
   21044:	str	r4, [sp, #-8]!
   21048:	str	lr, [sp, #4]
   2104c:	bl	11748 <abort@plt>
   21050:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21054:	mov	r4, r0
   21058:	strd	r6, [sp, #8]
   2105c:	str	r8, [sp, #16]
   21060:	str	lr, [sp, #20]
   21064:	sub	sp, sp, #56	; 0x38
   21068:	bl	114fc <__ctype_get_mb_cur_max@plt>
   2106c:	cmp	r0, #1
   21070:	bhi	2109c <__assert_fail@plt+0xf948>
   21074:	mov	r0, r4
   21078:	bl	115b0 <strlen@plt>
   2107c:	mov	r5, r0
   21080:	mov	r0, r5
   21084:	add	sp, sp, #56	; 0x38
   21088:	ldrd	r4, [sp]
   2108c:	ldrd	r6, [sp, #8]
   21090:	ldr	r8, [sp, #16]
   21094:	add	sp, sp, #20
   21098:	pop	{pc}		; (ldr pc, [sp], #4)
   2109c:	mov	r3, #0
   210a0:	mov	r0, #0
   210a4:	mov	r1, #0
   210a8:	movw	r7, #20460	; 0x4fec
   210ac:	movt	r7, #2
   210b0:	mov	r5, r3
   210b4:	strb	r3, [sp]
   210b8:	mov	r6, #1
   210bc:	strd	r0, [sp, #4]
   210c0:	strb	r3, [sp, #12]
   210c4:	str	r4, [sp, #16]
   210c8:	b	21120 <__assert_fail@plt+0xf9cc>
   210cc:	ldrb	r3, [r4]
   210d0:	lsr	r2, r3, #5
   210d4:	and	r3, r3, #31
   210d8:	ldr	r2, [r7, r2, lsl #2]
   210dc:	lsr	r3, r2, r3
   210e0:	tst	r3, #1
   210e4:	beq	21190 <__assert_fail@plt+0xfa3c>
   210e8:	str	r6, [sp, #20]
   210ec:	ldrb	r3, [r4]
   210f0:	strb	r6, [sp, #24]
   210f4:	mov	r4, r3
   210f8:	str	r3, [sp, #28]
   210fc:	cmp	r4, #0
   21100:	beq	21080 <__assert_fail@plt+0xf92c>
   21104:	ldr	r4, [sp, #16]
   21108:	mov	r2, #0
   2110c:	add	r5, r5, #1
   21110:	ldr	r3, [sp, #20]
   21114:	strb	r2, [sp, #12]
   21118:	add	r4, r4, r3
   2111c:	str	r4, [sp, #16]
   21120:	ldrb	r3, [sp]
   21124:	cmp	r3, #0
   21128:	addne	r8, sp, #4
   2112c:	beq	210cc <__assert_fail@plt+0xf978>
   21130:	bl	114fc <__ctype_get_mb_cur_max@plt>
   21134:	mov	r1, r0
   21138:	mov	r0, r4
   2113c:	bl	1d9a8 <__assert_fail@plt+0xc254>
   21140:	mov	r2, r0
   21144:	mov	r3, r8
   21148:	mov	r1, r4
   2114c:	add	r0, sp, #28
   21150:	bl	1f208 <__assert_fail@plt+0xdab4>
   21154:	cmn	r0, #1
   21158:	str	r0, [sp, #20]
   2115c:	beq	211ac <__assert_fail@plt+0xfa58>
   21160:	cmn	r0, #2
   21164:	beq	211c0 <__assert_fail@plt+0xfa6c>
   21168:	cmp	r0, #0
   2116c:	beq	211dc <__assert_fail@plt+0xfa88>
   21170:	ldr	r4, [sp, #28]
   21174:	mov	r0, r8
   21178:	strb	r6, [sp, #24]
   2117c:	bl	1140c <mbsinit@plt>
   21180:	cmp	r0, #0
   21184:	movne	r3, #0
   21188:	strbne	r3, [sp]
   2118c:	b	210fc <__assert_fail@plt+0xf9a8>
   21190:	add	r8, sp, #4
   21194:	mov	r0, r8
   21198:	bl	1140c <mbsinit@plt>
   2119c:	cmp	r0, #0
   211a0:	beq	2121c <__assert_fail@plt+0xfac8>
   211a4:	strb	r6, [sp]
   211a8:	b	21130 <__assert_fail@plt+0xf9dc>
   211ac:	mov	r3, #0
   211b0:	str	r6, [sp, #20]
   211b4:	ldr	r4, [sp, #16]
   211b8:	strb	r3, [sp, #24]
   211bc:	b	21108 <__assert_fail@plt+0xf9b4>
   211c0:	ldr	r4, [sp, #16]
   211c4:	mov	r0, r4
   211c8:	bl	115b0 <strlen@plt>
   211cc:	mov	r3, #0
   211d0:	str	r0, [sp, #20]
   211d4:	strb	r3, [sp, #24]
   211d8:	b	21108 <__assert_fail@plt+0xf9b4>
   211dc:	ldr	r4, [sp, #16]
   211e0:	str	r6, [sp, #20]
   211e4:	ldrb	r3, [r4]
   211e8:	cmp	r3, #0
   211ec:	bne	2123c <__assert_fail@plt+0xfae8>
   211f0:	ldr	r4, [sp, #28]
   211f4:	cmp	r4, #0
   211f8:	beq	21174 <__assert_fail@plt+0xfa20>
   211fc:	movw	r3, #20524	; 0x502c
   21200:	movt	r3, #2
   21204:	movw	r1, #19272	; 0x4b48
   21208:	movt	r1, #2
   2120c:	movw	r0, #19288	; 0x4b58
   21210:	movt	r0, #2
   21214:	mov	r2, #172	; 0xac
   21218:	bl	11754 <__assert_fail@plt>
   2121c:	movw	r3, #20524	; 0x502c
   21220:	movt	r3, #2
   21224:	movw	r1, #19272	; 0x4b48
   21228:	movt	r1, #2
   2122c:	movw	r0, #19308	; 0x4b6c
   21230:	movt	r0, #2
   21234:	mov	r2, #143	; 0x8f
   21238:	bl	11754 <__assert_fail@plt>
   2123c:	movw	r3, #20524	; 0x502c
   21240:	movt	r3, #2
   21244:	movw	r1, #19272	; 0x4b48
   21248:	movt	r1, #2
   2124c:	movw	r0, #19332	; 0x4b84
   21250:	movt	r0, #2
   21254:	mov	r2, #171	; 0xab
   21258:	bl	11754 <__assert_fail@plt>
   2125c:	strd	r4, [sp, #-16]!
   21260:	mov	r5, r1
   21264:	mov	r1, #0
   21268:	mov	r4, r2
   2126c:	str	r6, [sp, #8]
   21270:	str	lr, [sp, #12]
   21274:	bl	116c4 <setlocale@plt>
   21278:	subs	r6, r0, #0
   2127c:	beq	212fc <__assert_fail@plt+0xfba8>
   21280:	bl	115b0 <strlen@plt>
   21284:	cmp	r4, r0
   21288:	bhi	212a8 <__assert_fail@plt+0xfb54>
   2128c:	cmp	r4, #0
   21290:	moveq	r0, #34	; 0x22
   21294:	bne	212cc <__assert_fail@plt+0xfb78>
   21298:	ldrd	r4, [sp]
   2129c:	ldr	r6, [sp, #8]
   212a0:	add	sp, sp, #12
   212a4:	pop	{pc}		; (ldr pc, [sp], #4)
   212a8:	add	r2, r0, #1
   212ac:	mov	r1, r6
   212b0:	mov	r0, r5
   212b4:	bl	113f4 <memcpy@plt>
   212b8:	ldrd	r4, [sp]
   212bc:	mov	r0, #0
   212c0:	ldr	r6, [sp, #8]
   212c4:	add	sp, sp, #12
   212c8:	pop	{pc}		; (ldr pc, [sp], #4)
   212cc:	sub	r4, r4, #1
   212d0:	mov	r1, r6
   212d4:	mov	r2, r4
   212d8:	mov	r0, r5
   212dc:	bl	113f4 <memcpy@plt>
   212e0:	mov	r3, #0
   212e4:	mov	r0, #34	; 0x22
   212e8:	strb	r3, [r5, r4]
   212ec:	ldrd	r4, [sp]
   212f0:	ldr	r6, [sp, #8]
   212f4:	add	sp, sp, #12
   212f8:	pop	{pc}		; (ldr pc, [sp], #4)
   212fc:	cmp	r4, #0
   21300:	mov	r0, #22
   21304:	strbne	r6, [r5]
   21308:	ldrd	r4, [sp]
   2130c:	ldr	r6, [sp, #8]
   21310:	add	sp, sp, #12
   21314:	pop	{pc}		; (ldr pc, [sp], #4)
   21318:	mov	r1, #0
   2131c:	b	116c4 <setlocale@plt>
   21320:	cmp	r3, #0
   21324:	cmpeq	r2, #0
   21328:	bne	21340 <__assert_fail@plt+0xfbec>
   2132c:	cmp	r1, #0
   21330:	cmpeq	r0, #0
   21334:	mvnne	r1, #0
   21338:	mvnne	r0, #0
   2133c:	b	2135c <__assert_fail@plt+0xfc08>
   21340:	sub	sp, sp, #8
   21344:	push	{sp, lr}
   21348:	bl	2136c <__assert_fail@plt+0xfc18>
   2134c:	ldr	lr, [sp, #4]
   21350:	add	sp, sp, #8
   21354:	pop	{r2, r3}
   21358:	bx	lr
   2135c:	push	{r1, lr}
   21360:	mov	r0, #8
   21364:	bl	11358 <raise@plt>
   21368:	pop	{r1, pc}
   2136c:	cmp	r1, r3
   21370:	cmpeq	r0, r2
   21374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21378:	mov	r4, r0
   2137c:	movcc	r0, #0
   21380:	mov	r5, r1
   21384:	ldr	lr, [sp, #36]	; 0x24
   21388:	movcc	r1, r0
   2138c:	bcc	21488 <__assert_fail@plt+0xfd34>
   21390:	cmp	r3, #0
   21394:	clzeq	ip, r2
   21398:	clzne	ip, r3
   2139c:	addeq	ip, ip, #32
   213a0:	cmp	r5, #0
   213a4:	clzeq	r1, r4
   213a8:	addeq	r1, r1, #32
   213ac:	clzne	r1, r5
   213b0:	sub	ip, ip, r1
   213b4:	sub	sl, ip, #32
   213b8:	lsl	r9, r3, ip
   213bc:	rsb	fp, ip, #32
   213c0:	orr	r9, r9, r2, lsl sl
   213c4:	orr	r9, r9, r2, lsr fp
   213c8:	lsl	r8, r2, ip
   213cc:	cmp	r5, r9
   213d0:	cmpeq	r4, r8
   213d4:	movcc	r0, #0
   213d8:	movcc	r1, r0
   213dc:	bcc	213f8 <__assert_fail@plt+0xfca4>
   213e0:	mov	r0, #1
   213e4:	subs	r4, r4, r8
   213e8:	lsl	r1, r0, sl
   213ec:	orr	r1, r1, r0, lsr fp
   213f0:	lsl	r0, r0, ip
   213f4:	sbc	r5, r5, r9
   213f8:	cmp	ip, #0
   213fc:	beq	21488 <__assert_fail@plt+0xfd34>
   21400:	lsr	r6, r8, #1
   21404:	orr	r6, r6, r9, lsl #31
   21408:	lsr	r7, r9, #1
   2140c:	mov	r2, ip
   21410:	b	21434 <__assert_fail@plt+0xfce0>
   21414:	subs	r3, r4, r6
   21418:	sbc	r8, r5, r7
   2141c:	adds	r3, r3, r3
   21420:	adc	r8, r8, r8
   21424:	adds	r4, r3, #1
   21428:	adc	r5, r8, #0
   2142c:	subs	r2, r2, #1
   21430:	beq	21450 <__assert_fail@plt+0xfcfc>
   21434:	cmp	r5, r7
   21438:	cmpeq	r4, r6
   2143c:	bcs	21414 <__assert_fail@plt+0xfcc0>
   21440:	adds	r4, r4, r4
   21444:	adc	r5, r5, r5
   21448:	subs	r2, r2, #1
   2144c:	bne	21434 <__assert_fail@plt+0xfce0>
   21450:	lsr	r3, r4, ip
   21454:	orr	r3, r3, r5, lsl fp
   21458:	lsr	r2, r5, ip
   2145c:	orr	r3, r3, r5, lsr sl
   21460:	adds	r0, r0, r4
   21464:	mov	r4, r3
   21468:	lsl	r3, r2, ip
   2146c:	orr	r3, r3, r4, lsl sl
   21470:	lsl	ip, r4, ip
   21474:	orr	r3, r3, r4, lsr fp
   21478:	adc	r1, r1, r5
   2147c:	subs	r0, r0, ip
   21480:	mov	r5, r2
   21484:	sbc	r1, r1, r3
   21488:	cmp	lr, #0
   2148c:	strdne	r4, [lr]
   21490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21494:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21498:	mov	r7, r0
   2149c:	ldr	r6, [pc, #72]	; 214ec <__assert_fail@plt+0xfd98>
   214a0:	ldr	r5, [pc, #72]	; 214f0 <__assert_fail@plt+0xfd9c>
   214a4:	add	r6, pc, r6
   214a8:	add	r5, pc, r5
   214ac:	sub	r6, r6, r5
   214b0:	mov	r8, r1
   214b4:	mov	r9, r2
   214b8:	bl	11320 <calloc@plt-0x20>
   214bc:	asrs	r6, r6, #2
   214c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   214c4:	mov	r4, #0
   214c8:	add	r4, r4, #1
   214cc:	ldr	r3, [r5], #4
   214d0:	mov	r2, r9
   214d4:	mov	r1, r8
   214d8:	mov	r0, r7
   214dc:	blx	r3
   214e0:	cmp	r6, r4
   214e4:	bne	214c8 <__assert_fail@plt+0xfd74>
   214e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   214ec:	andeq	r4, r1, r0, ror #20
   214f0:	andeq	r4, r1, r8, asr sl
   214f4:	bx	lr
   214f8:	ldr	r3, [pc, #12]	; 2150c <__assert_fail@plt+0xfdb8>
   214fc:	mov	r1, #0
   21500:	add	r3, pc, r3
   21504:	ldr	r2, [r3]
   21508:	b	11604 <__cxa_atexit@plt>
   2150c:	andeq	r4, r1, ip, ror #24

Disassembly of section .fini:

00021510 <.fini>:
   21510:	push	{r3, lr}
   21514:	pop	{r3, pc}
