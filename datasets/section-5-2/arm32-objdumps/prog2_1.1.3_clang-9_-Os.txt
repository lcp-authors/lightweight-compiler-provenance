
../repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	106f8 <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <fopen@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <fclose@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <abort@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <getc@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

Disassembly of section .text:

000106bc <_start@@Base>:
   106bc:	mov	fp, #0
   106c0:	mov	lr, #0
   106c4:	pop	{r1}		; (ldr r1, [sp], #4)
   106c8:	mov	r2, sp
   106cc:	push	{r2}		; (str r2, [sp, #-4]!)
   106d0:	push	{r0}		; (str r0, [sp, #-4]!)
   106d4:	ldr	ip, [pc, #16]	; 106ec <_start@@Base+0x30>
   106d8:	push	{ip}		; (str ip, [sp, #-4]!)
   106dc:	ldr	r0, [pc, #12]	; 106f0 <_start@@Base+0x34>
   106e0:	ldr	r3, [pc, #12]	; 106f4 <_start@@Base+0x38>
   106e4:	bl	10680 <__libc_start_main@plt>
   106e8:	bl	106a4 <abort@plt>
   106ec:	andeq	r0, r1, r4, asr #19
   106f0:	andeq	r0, r1, r4, ror #15
   106f4:	andeq	r0, r1, r4, ror #18
   106f8:	ldr	r3, [pc, #20]	; 10714 <_start@@Base+0x58>
   106fc:	ldr	r2, [pc, #20]	; 10718 <_start@@Base+0x5c>
   10700:	add	r3, pc, r3
   10704:	ldr	r2, [r3, r2]
   10708:	cmp	r2, #0
   1070c:	bxeq	lr
   10710:	b	1068c <__gmon_start__@plt>
   10714:	strdeq	r0, [r1], -r8
   10718:	andeq	r0, r0, r8, lsr #32
   1071c:	ldr	r0, [pc, #24]	; 1073c <_start@@Base+0x80>
   10720:	ldr	r3, [pc, #24]	; 10740 <_start@@Base+0x84>
   10724:	cmp	r3, r0
   10728:	bxeq	lr
   1072c:	ldr	r3, [pc, #16]	; 10744 <_start@@Base+0x88>
   10730:	cmp	r3, #0
   10734:	bxeq	lr
   10738:	bx	r3
   1073c:	andeq	r1, r2, r4, lsr r0
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r0, r0, r0
   10748:	ldr	r0, [pc, #36]	; 10774 <_start@@Base+0xb8>
   1074c:	ldr	r1, [pc, #36]	; 10778 <_start@@Base+0xbc>
   10750:	sub	r1, r1, r0
   10754:	asr	r1, r1, #2
   10758:	add	r1, r1, r1, lsr #31
   1075c:	asrs	r1, r1, #1
   10760:	bxeq	lr
   10764:	ldr	r3, [pc, #16]	; 1077c <_start@@Base+0xc0>
   10768:	cmp	r3, #0
   1076c:	bxeq	lr
   10770:	bx	r3
   10774:	andeq	r1, r2, r4, lsr r0
   10778:	andeq	r1, r2, r4, lsr r0
   1077c:	andeq	r0, r0, r0
   10780:	push	{r4, lr}
   10784:	ldr	r4, [pc, #24]	; 107a4 <_start@@Base+0xe8>
   10788:	ldrb	r3, [r4]
   1078c:	cmp	r3, #0
   10790:	popne	{r4, pc}
   10794:	bl	1071c <_start@@Base+0x60>
   10798:	mov	r3, #1
   1079c:	strb	r3, [r4]
   107a0:	pop	{r4, pc}
   107a4:	andeq	r1, r2, r4, lsr r0
   107a8:	b	10748 <_start@@Base+0x8c>

000107ac <in_array@@Base>:
   107ac:	mov	ip, r0
   107b0:	mov	r0, #0
   107b4:	cmp	r2, #0
   107b8:	bmi	107e0 <in_array@@Base+0x34>
   107bc:	add	r2, r2, #1
   107c0:	ldr	r3, [r1]
   107c4:	cmp	r3, ip
   107c8:	beq	107dc <in_array@@Base+0x30>
   107cc:	subs	r2, r2, #1
   107d0:	add	r1, r1, #4
   107d4:	bxeq	lr
   107d8:	b	107c0 <in_array@@Base+0x14>
   107dc:	mov	r0, #1
   107e0:	bx	lr

000107e4 <main@@Base>:
   107e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107e8:	add	fp, sp, #28
   107ec:	sub	sp, sp, #44	; 0x2c
   107f0:	mov	r0, #163	; 0xa3
   107f4:	movw	r1, #2544	; 0x9f0
   107f8:	str	r0, [sp, #36]	; 0x24
   107fc:	mov	r0, #131	; 0x83
   10800:	movt	r1, #1
   10804:	str	r0, [sp, #32]
   10808:	mov	r0, #181	; 0xb5
   1080c:	str	r0, [sp, #28]
   10810:	mov	r0, #149	; 0x95
   10814:	str	r0, [sp, #24]
   10818:	mov	r0, #167	; 0xa7
   1081c:	str	r0, [sp, #20]
   10820:	mov	r0, #135	; 0x87
   10824:	str	r0, [sp, #16]
   10828:	movw	r0, #2516	; 0x9d4
   1082c:	movt	r0, #1
   10830:	bl	10674 <fopen@plt>
   10834:	mov	r9, #0
   10838:	mov	r6, r0
   1083c:	add	r7, sp, #32
   10840:	add	r4, sp, #24
   10844:	add	r5, sp, #16
   10848:	mov	sl, #0
   1084c:	mov	r8, #0
   10850:	str	r9, [sp, #4]
   10854:	str	r9, [sp]
   10858:	str	r9, [sp, #8]
   1085c:	mov	r0, r6
   10860:	bl	106b0 <getc@plt>
   10864:	cmp	r0, #195	; 0xc3
   10868:	bne	108e0 <main@@Base+0xfc>
   1086c:	mov	r0, r6
   10870:	bl	106b0 <getc@plt>
   10874:	mov	r1, #0
   10878:	ldr	r2, [r7, -r1, lsl #2]
   1087c:	cmp	r2, r0
   10880:	beq	108cc <main@@Base+0xe8>
   10884:	sub	r1, r1, #1
   10888:	cmn	r1, #3
   1088c:	bne	10878 <main@@Base+0x94>
   10890:	mov	r1, #0
   10894:	ldr	r2, [r4, -r1, lsl #2]
   10898:	cmp	r2, r0
   1089c:	beq	108d4 <main@@Base+0xf0>
   108a0:	sub	r1, r1, #1
   108a4:	cmn	r1, #3
   108a8:	bne	10894 <main@@Base+0xb0>
   108ac:	mov	r1, #0
   108b0:	ldr	r2, [r5, -r1, lsl #2]
   108b4:	cmp	r2, r0
   108b8:	beq	108dc <main@@Base+0xf8>
   108bc:	sub	r1, r1, #1
   108c0:	cmn	r1, #3
   108c4:	bne	108b0 <main@@Base+0xcc>
   108c8:	b	108e0 <main@@Base+0xfc>
   108cc:	add	r9, r9, #1
   108d0:	b	108e0 <main@@Base+0xfc>
   108d4:	add	sl, sl, #1
   108d8:	b	108e0 <main@@Base+0xfc>
   108dc:	add	r8, r8, #1
   108e0:	cmn	r0, #1
   108e4:	bne	1085c <main@@Base+0x78>
   108e8:	mov	r0, r6
   108ec:	str	r8, [sp, #8]
   108f0:	stm	sp, {r9, sl}
   108f4:	bl	10698 <fclose@plt>
   108f8:	movw	r6, #2546	; 0x9f2
   108fc:	mov	r1, #65	; 0x41
   10900:	mov	r2, r9
   10904:	movt	r6, #1
   10908:	mov	r0, r6
   1090c:	bl	10668 <printf@plt>
   10910:	movw	r7, #2596	; 0xa24
   10914:	mov	r0, sp
   10918:	mov	r5, #0
   1091c:	movt	r7, #1
   10920:	orr	r4, r0, #4
   10924:	add	r0, r7, r5
   10928:	ldr	r2, [r4, r5, lsl #2]
   1092c:	ldrb	r1, [r0, #1]
   10930:	mov	r0, r6
   10934:	bl	10668 <printf@plt>
   10938:	add	r5, r5, #1
   1093c:	cmp	r5, #1
   10940:	bne	10924 <main@@Base+0x140>
   10944:	movw	r0, #2569	; 0xa09
   10948:	mov	r1, #67	; 0x43
   1094c:	mov	r2, r8
   10950:	movt	r0, #1
   10954:	bl	10668 <printf@plt>
   10958:	mov	r0, #0
   1095c:	sub	sp, fp, #28
   10960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010964 <__libc_csu_init@@Base>:
   10964:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10968:	mov	r7, r0
   1096c:	ldr	r6, [pc, #72]	; 109bc <__libc_csu_init@@Base+0x58>
   10970:	ldr	r5, [pc, #72]	; 109c0 <__libc_csu_init@@Base+0x5c>
   10974:	add	r6, pc, r6
   10978:	add	r5, pc, r5
   1097c:	sub	r6, r6, r5
   10980:	mov	r8, r1
   10984:	mov	r9, r2
   10988:	bl	10648 <printf@plt-0x20>
   1098c:	asrs	r6, r6, #2
   10990:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10994:	mov	r4, #0
   10998:	add	r4, r4, #1
   1099c:	ldr	r3, [r5], #4
   109a0:	mov	r2, r9
   109a4:	mov	r1, r8
   109a8:	mov	r0, r7
   109ac:	blx	r3
   109b0:	cmp	r6, r4
   109b4:	bne	10998 <__libc_csu_init@@Base+0x34>
   109b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109bc:	muleq	r1, r0, r5
   109c0:	andeq	r0, r1, r8, lsl #11

000109c4 <__libc_csu_fini@@Base>:
   109c4:	bx	lr

Disassembly of section .fini:

000109c8 <.fini>:
   109c8:	push	{r3, lr}
   109cc:	pop	{r3, pc}
