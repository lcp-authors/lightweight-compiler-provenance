
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011e60 <.init>:
   11e60:	push	{r3, lr}
   11e64:	bl	1260c <__assert_fail@plt+0x48>
   11e68:	pop	{r3, pc}

Disassembly of section .plt:

00011e6c <pthread_mutex_unlock@plt-0x14>:
   11e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e70:	ldr	lr, [pc, #4]	; 11e7c <pthread_mutex_unlock@plt-0x4>
   11e74:	add	lr, pc, lr
   11e78:	ldr	pc, [lr, #8]!
   11e7c:	andeq	r7, r4, r4, lsl #3

00011e80 <pthread_mutex_unlock@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #290816	; 0x47000
   11e88:	ldr	pc, [ip, #388]!	; 0x184

00011e8c <fdopen@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #290816	; 0x47000
   11e94:	ldr	pc, [ip, #380]!	; 0x17c

00011e98 <fstatfs64@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #290816	; 0x47000
   11ea0:	ldr	pc, [ip, #372]!	; 0x174

00011ea4 <calloc@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #290816	; 0x47000
   11eac:	ldr	pc, [ip, #364]!	; 0x16c

00011eb0 <endgrent@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #290816	; 0x47000
   11eb8:	ldr	pc, [ip, #356]!	; 0x164

00011ebc <wctype@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #290816	; 0x47000
   11ec4:	ldr	pc, [ip, #348]!	; 0x15c

00011ec8 <raise@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #290816	; 0x47000
   11ed0:	ldr	pc, [ip, #340]!	; 0x154

00011ed4 <wcrtomb@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #290816	; 0x47000
   11edc:	ldr	pc, [ip, #332]!	; 0x14c

00011ee0 <gmtime_r@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #290816	; 0x47000
   11ee8:	ldr	pc, [ip, #324]!	; 0x144

00011eec <__getdelim@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #290816	; 0x47000
   11ef4:	ldr	pc, [ip, #316]!	; 0x13c

00011ef8 <getpwnam@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #290816	; 0x47000
   11f00:	ldr	pc, [ip, #308]!	; 0x134

00011f04 <is_selinux_enabled@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #290816	; 0x47000
   11f0c:	ldr	pc, [ip, #300]!	; 0x12c

00011f10 <iswctype@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #290816	; 0x47000
   11f18:	ldr	pc, [ip, #292]!	; 0x124

00011f1c <strcmp@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #290816	; 0x47000
   11f24:	ldr	pc, [ip, #284]!	; 0x11c

00011f28 <strtol@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #290816	; 0x47000
   11f30:	ldr	pc, [ip, #276]!	; 0x114

00011f34 <getpwuid@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #290816	; 0x47000
   11f3c:	ldr	pc, [ip, #268]!	; 0x10c

00011f40 <printf@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #290816	; 0x47000
   11f48:	ldr	pc, [ip, #260]!	; 0x104

00011f4c <pthread_mutex_destroy@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #290816	; 0x47000
   11f54:	ldr	pc, [ip, #252]!	; 0xfc

00011f58 <mktime@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #290816	; 0x47000
   11f60:	ldr	pc, [ip, #244]!	; 0xf4

00011f64 <fflush@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #290816	; 0x47000
   11f6c:	ldr	pc, [ip, #236]!	; 0xec

00011f70 <unlinkat@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #290816	; 0x47000
   11f78:	ldr	pc, [ip, #228]!	; 0xe4

00011f7c <wcwidth@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #290816	; 0x47000
   11f84:	ldr	pc, [ip, #220]!	; 0xdc

00011f88 <lsetfilecon@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #290816	; 0x47000
   11f90:	ldr	pc, [ip, #212]!	; 0xd4

00011f94 <memmove@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #290816	; 0x47000
   11f9c:	ldr	pc, [ip, #204]!	; 0xcc

00011fa0 <free@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #290816	; 0x47000
   11fa8:	ldr	pc, [ip, #196]!	; 0xc4

00011fac <pthread_mutex_lock@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #290816	; 0x47000
   11fb4:	ldr	pc, [ip, #188]!	; 0xbc

00011fb8 <faccessat@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #290816	; 0x47000
   11fc0:	ldr	pc, [ip, #180]!	; 0xb4

00011fc4 <ferror@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #290816	; 0x47000
   11fcc:	ldr	pc, [ip, #172]!	; 0xac

00011fd0 <thrd_exit@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #290816	; 0x47000
   11fd8:	ldr	pc, [ip, #164]!	; 0xa4

00011fdc <strndup@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #290816	; 0x47000
   11fe4:	ldr	pc, [ip, #156]!	; 0x9c

00011fe8 <clock_gettime@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #290816	; 0x47000
   11ff0:	ldr	pc, [ip, #148]!	; 0x94

00011ff4 <_exit@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #290816	; 0x47000
   11ffc:	ldr	pc, [ip, #140]!	; 0x8c

00012000 <memcpy@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #290816	; 0x47000
   12008:	ldr	pc, [ip, #132]!	; 0x84

0001200c <execvp@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #290816	; 0x47000
   12014:	ldr	pc, [ip, #124]!	; 0x7c

00012018 <pthread_mutex_init@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #290816	; 0x47000
   12020:	ldr	pc, [ip, #116]!	; 0x74

00012024 <__strtoull_internal@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #290816	; 0x47000
   1202c:	ldr	pc, [ip, #108]!	; 0x6c

00012030 <towlower@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #290816	; 0x47000
   12038:	ldr	pc, [ip, #100]!	; 0x64

0001203c <mbsinit@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #290816	; 0x47000
   12044:	ldr	pc, [ip, #92]!	; 0x5c

00012048 <signal@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #290816	; 0x47000
   12050:	ldr	pc, [ip, #84]!	; 0x54

00012054 <time@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #290816	; 0x47000
   1205c:	ldr	pc, [ip, #76]!	; 0x4c

00012060 <memcmp@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #290816	; 0x47000
   12068:	ldr	pc, [ip, #68]!	; 0x44

0001206c <uname@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #290816	; 0x47000
   12074:	ldr	pc, [ip, #60]!	; 0x3c

00012078 <ctime@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #290816	; 0x47000
   12080:	ldr	pc, [ip, #52]!	; 0x34

00012084 <dcgettext@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #290816	; 0x47000
   1208c:	ldr	pc, [ip, #44]!	; 0x2c

00012090 <strdup@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #290816	; 0x47000
   12098:	ldr	pc, [ip, #36]!	; 0x24

0001209c <sysconf@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #290816	; 0x47000
   120a4:	ldr	pc, [ip, #28]!

000120a8 <getrlimit64@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #290816	; 0x47000
   120b0:	ldr	pc, [ip, #20]!

000120b4 <realloc@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #290816	; 0x47000
   120bc:	ldr	pc, [ip, #12]!

000120c0 <fgetfilecon@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #290816	; 0x47000
   120c8:	ldr	pc, [ip, #4]!

000120cc <localtime_r@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #286720	; 0x46000
   120d4:	ldr	pc, [ip, #4092]!	; 0xffc

000120d8 <textdomain@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #286720	; 0x46000
   120e0:	ldr	pc, [ip, #4084]!	; 0xff4

000120e4 <iswcntrl@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #286720	; 0x46000
   120ec:	ldr	pc, [ip, #4076]!	; 0xfec

000120f0 <chdir@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #286720	; 0x46000
   120f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000120fc <__fxstatat64@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #286720	; 0x46000
   12104:	ldr	pc, [ip, #4060]!	; 0xfdc

00012108 <iswprint@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #286720	; 0x46000
   12110:	ldr	pc, [ip, #4052]!	; 0xfd4

00012114 <tzset@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #286720	; 0x46000
   1211c:	ldr	pc, [ip, #4044]!	; 0xfcc

00012120 <poll@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #286720	; 0x46000
   12128:	ldr	pc, [ip, #4036]!	; 0xfc4

0001212c <__fxstat64@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #286720	; 0x46000
   12134:	ldr	pc, [ip, #4028]!	; 0xfbc

00012138 <fwrite@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #286720	; 0x46000
   12140:	ldr	pc, [ip, #4020]!	; 0xfb4

00012144 <strcat@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #286720	; 0x46000
   1214c:	ldr	pc, [ip, #4012]!	; 0xfac

00012150 <lseek64@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #286720	; 0x46000
   12158:	ldr	pc, [ip, #4004]!	; 0xfa4

0001215c <waitpid@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #286720	; 0x46000
   12164:	ldr	pc, [ip, #3996]!	; 0xf9c

00012168 <__ctype_get_mb_cur_max@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #286720	; 0x46000
   12170:	ldr	pc, [ip, #3988]!	; 0xf94

00012174 <hasmntopt@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #286720	; 0x46000
   1217c:	ldr	pc, [ip, #3980]!	; 0xf8c

00012180 <strcpy@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #286720	; 0x46000
   12188:	ldr	pc, [ip, #3972]!	; 0xf84

0001218c <gettimeofday@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #286720	; 0x46000
   12194:	ldr	pc, [ip, #3964]!	; 0xf7c

00012198 <__fpending@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #286720	; 0x46000
   121a0:	ldr	pc, [ip, #3956]!	; 0xf74

000121a4 <mbrtowc@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #286720	; 0x46000
   121ac:	ldr	pc, [ip, #3948]!	; 0xf6c

000121b0 <strtok_r@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #286720	; 0x46000
   121b8:	ldr	pc, [ip, #3940]!	; 0xf64

000121bc <error@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #286720	; 0x46000
   121c4:	ldr	pc, [ip, #3932]!	; 0xf5c

000121c8 <getmntent@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #286720	; 0x46000
   121d0:	ldr	pc, [ip, #3924]!	; 0xf54

000121d4 <opendir@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #286720	; 0x46000
   121dc:	ldr	pc, [ip, #3916]!	; 0xf4c

000121e0 <fnmatch@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #286720	; 0x46000
   121e8:	ldr	pc, [ip, #3908]!	; 0xf44

000121ec <open64@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #286720	; 0x46000
   121f4:	ldr	pc, [ip, #3900]!	; 0xf3c

000121f8 <getenv@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #286720	; 0x46000
   12200:	ldr	pc, [ip, #3892]!	; 0xf34

00012204 <lgetfilecon@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #286720	; 0x46000
   1220c:	ldr	pc, [ip, #3884]!	; 0xf2c

00012210 <malloc@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #286720	; 0x46000
   12218:	ldr	pc, [ip, #3876]!	; 0xf24

0001221c <__libc_start_main@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #286720	; 0x46000
   12224:	ldr	pc, [ip, #3868]!	; 0xf1c

00012228 <readlinkat@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #286720	; 0x46000
   12230:	ldr	pc, [ip, #3860]!	; 0xf14

00012234 <strftime@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #286720	; 0x46000
   1223c:	ldr	pc, [ip, #3852]!	; 0xf0c

00012240 <__freading@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #286720	; 0x46000
   12248:	ldr	pc, [ip, #3844]!	; 0xf04

0001224c <localtime@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #286720	; 0x46000
   12254:	ldr	pc, [ip, #3836]!	; 0xefc

00012258 <__ctype_tolower_loc@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #286720	; 0x46000
   12260:	ldr	pc, [ip, #3828]!	; 0xef4

00012264 <modf@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #286720	; 0x46000
   1226c:	ldr	pc, [ip, #3820]!	; 0xeec

00012270 <__ctype_toupper_loc@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #286720	; 0x46000
   12278:	ldr	pc, [ip, #3812]!	; 0xee4

0001227c <__gmon_start__@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #286720	; 0x46000
   12284:	ldr	pc, [ip, #3804]!	; 0xedc

00012288 <__ctype_b_loc@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #286720	; 0x46000
   12290:	ldr	pc, [ip, #3796]!	; 0xed4

00012294 <getcwd@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #286720	; 0x46000
   1229c:	ldr	pc, [ip, #3788]!	; 0xecc

000122a0 <exit@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #286720	; 0x46000
   122a8:	ldr	pc, [ip, #3780]!	; 0xec4

000122ac <feof@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #286720	; 0x46000
   122b4:	ldr	pc, [ip, #3772]!	; 0xebc

000122b8 <getfilecon@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #286720	; 0x46000
   122c0:	ldr	pc, [ip, #3764]!	; 0xeb4

000122c4 <strtoul@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #286720	; 0x46000
   122cc:	ldr	pc, [ip, #3756]!	; 0xeac

000122d0 <strlen@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #286720	; 0x46000
   122d8:	ldr	pc, [ip, #3748]!	; 0xea4

000122dc <strchr@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #286720	; 0x46000
   122e4:	ldr	pc, [ip, #3740]!	; 0xe9c

000122e8 <setenv@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #286720	; 0x46000
   122f0:	ldr	pc, [ip, #3732]!	; 0xe94

000122f4 <openat64@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #286720	; 0x46000
   122fc:	ldr	pc, [ip, #3724]!	; 0xe8c

00012300 <memrchr@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #286720	; 0x46000
   12308:	ldr	pc, [ip, #3716]!	; 0xe84

0001230c <fprintf@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #286720	; 0x46000
   12314:	ldr	pc, [ip, #3708]!	; 0xe7c

00012318 <__errno_location@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #286720	; 0x46000
   12320:	ldr	pc, [ip, #3700]!	; 0xe74

00012324 <iswalnum@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #286720	; 0x46000
   1232c:	ldr	pc, [ip, #3692]!	; 0xe6c

00012330 <snprintf@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #286720	; 0x46000
   12338:	ldr	pc, [ip, #3684]!	; 0xe64

0001233c <__cxa_atexit@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #286720	; 0x46000
   12344:	ldr	pc, [ip, #3676]!	; 0xe5c

00012348 <memset@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #286720	; 0x46000
   12350:	ldr	pc, [ip, #3668]!	; 0xe54

00012354 <putchar@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #286720	; 0x46000
   1235c:	ldr	pc, [ip, #3660]!	; 0xe4c

00012360 <strncpy@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #286720	; 0x46000
   12368:	ldr	pc, [ip, #3652]!	; 0xe44

0001236c <pthread_mutexattr_gettype@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #286720	; 0x46000
   12374:	ldr	pc, [ip, #3644]!	; 0xe3c

00012378 <btowc@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #286720	; 0x46000
   12380:	ldr	pc, [ip, #3636]!	; 0xe34

00012384 <strtod@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #286720	; 0x46000
   1238c:	ldr	pc, [ip, #3628]!	; 0xe2c

00012390 <fileno@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #286720	; 0x46000
   12398:	ldr	pc, [ip, #3620]!	; 0xe24

0001239c <difftime@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #286720	; 0x46000
   123a4:	ldr	pc, [ip, #3612]!	; 0xe1c

000123a8 <memchr@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #286720	; 0x46000
   123b0:	ldr	pc, [ip, #3604]!	; 0xe14

000123b4 <setfilecon@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #286720	; 0x46000
   123bc:	ldr	pc, [ip, #3596]!	; 0xe0c

000123c0 <access@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #286720	; 0x46000
   123c8:	ldr	pc, [ip, #3588]!	; 0xe04

000123cc <fclose@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #286720	; 0x46000
   123d4:	ldr	pc, [ip, #3580]!	; 0xdfc

000123d8 <strnlen@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #286720	; 0x46000
   123e0:	ldr	pc, [ip, #3572]!	; 0xdf4

000123e4 <fseeko64@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #286720	; 0x46000
   123ec:	ldr	pc, [ip, #3564]!	; 0xdec

000123f0 <endmntent@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #286720	; 0x46000
   123f8:	ldr	pc, [ip, #3556]!	; 0xde4

000123fc <fcntl64@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #286720	; 0x46000
   12404:	ldr	pc, [ip, #3548]!	; 0xddc

00012408 <rpmatch@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #286720	; 0x46000
   12410:	ldr	pc, [ip, #3540]!	; 0xdd4

00012414 <setlocale@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #286720	; 0x46000
   1241c:	ldr	pc, [ip, #3532]!	; 0xdcc

00012420 <fork@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #286720	; 0x46000
   12428:	ldr	pc, [ip, #3524]!	; 0xdc4

0001242c <endpwent@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #286720	; 0x46000
   12434:	ldr	pc, [ip, #3516]!	; 0xdbc

00012438 <strrchr@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #286720	; 0x46000
   12440:	ldr	pc, [ip, #3508]!	; 0xdb4

00012444 <vfprintf@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #286720	; 0x46000
   1244c:	ldr	pc, [ip, #3500]!	; 0xdac

00012450 <nl_langinfo@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #286720	; 0x46000
   12458:	ldr	pc, [ip, #3492]!	; 0xda4

0001245c <fputc@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #286720	; 0x46000
   12464:	ldr	pc, [ip, #3484]!	; 0xd9c

00012468 <sscanf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #286720	; 0x46000
   12470:	ldr	pc, [ip, #3476]!	; 0xd94

00012474 <localeconv@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #286720	; 0x46000
   1247c:	ldr	pc, [ip, #3468]!	; 0xd8c

00012480 <sprintf@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #286720	; 0x46000
   12488:	ldr	pc, [ip, #3460]!	; 0xd84

0001248c <readdir64@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #286720	; 0x46000
   12494:	ldr	pc, [ip, #3452]!	; 0xd7c

00012498 <fdopendir@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #286720	; 0x46000
   124a0:	ldr	pc, [ip, #3444]!	; 0xd74

000124a4 <timegm@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #286720	; 0x46000
   124ac:	ldr	pc, [ip, #3436]!	; 0xd6c

000124b0 <putc@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #286720	; 0x46000
   124b8:	ldr	pc, [ip, #3428]!	; 0xd64

000124bc <dirfd@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #286720	; 0x46000
   124c4:	ldr	pc, [ip, #3420]!	; 0xd5c

000124c8 <fchdir@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #286720	; 0x46000
   124d0:	ldr	pc, [ip, #3412]!	; 0xd54

000124d4 <fopen64@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #286720	; 0x46000
   124dc:	ldr	pc, [ip, #3404]!	; 0xd4c

000124e0 <qsort@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #286720	; 0x46000
   124e8:	ldr	pc, [ip, #3396]!	; 0xd44

000124ec <freecon@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #286720	; 0x46000
   124f4:	ldr	pc, [ip, #3388]!	; 0xd3c

000124f8 <strpbrk@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #286720	; 0x46000
   12500:	ldr	pc, [ip, #3380]!	; 0xd34

00012504 <setmntent@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #286720	; 0x46000
   1250c:	ldr	pc, [ip, #3372]!	; 0xd2c

00012510 <bindtextdomain@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #286720	; 0x46000
   12518:	ldr	pc, [ip, #3364]!	; 0xd24

0001251c <getdelim@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #286720	; 0x46000
   12524:	ldr	pc, [ip, #3356]!	; 0xd1c

00012528 <__xstat64@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #286720	; 0x46000
   12530:	ldr	pc, [ip, #3348]!	; 0xd14

00012534 <isatty@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #286720	; 0x46000
   1253c:	ldr	pc, [ip, #3340]!	; 0xd0c

00012540 <unsetenv@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #286720	; 0x46000
   12548:	ldr	pc, [ip, #3332]!	; 0xd04

0001254c <towupper@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #286720	; 0x46000
   12554:	ldr	pc, [ip, #3324]!	; 0xcfc

00012558 <fputs@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #286720	; 0x46000
   12560:	ldr	pc, [ip, #3316]!	; 0xcf4

00012564 <strncmp@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #286720	; 0x46000
   1256c:	ldr	pc, [ip, #3308]!	; 0xcec

00012570 <abort@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #286720	; 0x46000
   12578:	ldr	pc, [ip, #3300]!	; 0xce4

0001257c <close@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #286720	; 0x46000
   12584:	ldr	pc, [ip, #3292]!	; 0xcdc

00012588 <__lxstat64@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #286720	; 0x46000
   12590:	ldr	pc, [ip, #3284]!	; 0xcd4

00012594 <closedir@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #286720	; 0x46000
   1259c:	ldr	pc, [ip, #3276]!	; 0xccc

000125a0 <getgrgid@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #286720	; 0x46000
   125a8:	ldr	pc, [ip, #3268]!	; 0xcc4

000125ac <getgrnam@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #286720	; 0x46000
   125b4:	ldr	pc, [ip, #3260]!	; 0xcbc

000125b8 <strspn@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #286720	; 0x46000
   125c0:	ldr	pc, [ip, #3252]!	; 0xcb4

000125c4 <__assert_fail@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #286720	; 0x46000
   125cc:	ldr	pc, [ip, #3244]!	; 0xcac

Disassembly of section .text:

000125d0 <.text>:
   125d0:	mov	fp, #0
   125d4:	mov	lr, #0
   125d8:	pop	{r1}		; (ldr r1, [sp], #4)
   125dc:	mov	r2, sp
   125e0:	push	{r2}		; (str r2, [sp, #-4]!)
   125e4:	push	{r0}		; (str r0, [sp, #-4]!)
   125e8:	ldr	ip, [pc, #16]	; 12600 <__assert_fail@plt+0x3c>
   125ec:	push	{ip}		; (str ip, [sp, #-4]!)
   125f0:	ldr	r0, [pc, #12]	; 12604 <__assert_fail@plt+0x40>
   125f4:	ldr	r3, [pc, #12]	; 12608 <__assert_fail@plt+0x44>
   125f8:	bl	1221c <__libc_start_main@plt>
   125fc:	bl	12570 <abort@plt>
   12600:	andeq	r2, r4, r0, ror #10
   12604:	strheq	r3, [r1], -ip
   12608:	andeq	r2, r4, r0, lsl #10
   1260c:	ldr	r3, [pc, #20]	; 12628 <__assert_fail@plt+0x64>
   12610:	ldr	r2, [pc, #20]	; 1262c <__assert_fail@plt+0x68>
   12614:	add	r3, pc, r3
   12618:	ldr	r2, [r3, r2]
   1261c:	cmp	r2, #0
   12620:	bxeq	lr
   12624:	b	1227c <__gmon_start__@plt>
   12628:	andeq	r6, r4, r4, ror #19
   1262c:	andeq	r0, r0, ip, ror r2
   12630:	ldr	r3, [pc, #28]	; 12654 <__assert_fail@plt+0x90>
   12634:	ldr	r0, [pc, #28]	; 12658 <__assert_fail@plt+0x94>
   12638:	sub	r3, r3, r0
   1263c:	cmp	r3, #6
   12640:	bxls	lr
   12644:	ldr	r3, [pc, #16]	; 1265c <__assert_fail@plt+0x98>
   12648:	cmp	r3, #0
   1264c:	bxeq	lr
   12650:	bx	r3
   12654:	andeq	r9, r5, r7, lsr r5
   12658:	andeq	r9, r5, r4, lsr r5
   1265c:	andeq	r0, r0, r0
   12660:	ldr	r1, [pc, #36]	; 1268c <__assert_fail@plt+0xc8>
   12664:	ldr	r0, [pc, #36]	; 12690 <__assert_fail@plt+0xcc>
   12668:	sub	r1, r1, r0
   1266c:	asr	r1, r1, #2
   12670:	add	r1, r1, r1, lsr #31
   12674:	asrs	r1, r1, #1
   12678:	bxeq	lr
   1267c:	ldr	r3, [pc, #16]	; 12694 <__assert_fail@plt+0xd0>
   12680:	cmp	r3, #0
   12684:	bxeq	lr
   12688:	bx	r3
   1268c:	andeq	r9, r5, r4, lsr r5
   12690:	andeq	r9, r5, r4, lsr r5
   12694:	andeq	r0, r0, r0
   12698:	push	{r4, lr}
   1269c:	ldr	r4, [pc, #24]	; 126bc <__assert_fail@plt+0xf8>
   126a0:	ldrb	r3, [r4]
   126a4:	cmp	r3, #0
   126a8:	popne	{r4, pc}
   126ac:	bl	12630 <__assert_fail@plt+0x6c>
   126b0:	mov	r3, #1
   126b4:	strb	r3, [r4]
   126b8:	pop	{r4, pc}
   126bc:	andeq	r9, r5, r8, asr r5
   126c0:	ldr	r0, [pc, #40]	; 126f0 <__assert_fail@plt+0x12c>
   126c4:	ldr	r3, [r0]
   126c8:	cmp	r3, #0
   126cc:	bne	126d4 <__assert_fail@plt+0x110>
   126d0:	b	12660 <__assert_fail@plt+0x9c>
   126d4:	ldr	r3, [pc, #24]	; 126f4 <__assert_fail@plt+0x130>
   126d8:	cmp	r3, #0
   126dc:	beq	126d0 <__assert_fail@plt+0x10c>
   126e0:	push	{r4, lr}
   126e4:	blx	r3
   126e8:	pop	{r4, lr}
   126ec:	b	12660 <__assert_fail@plt+0x9c>
   126f0:	andeq	r8, r5, r4, lsl #30
   126f4:	andeq	r0, r0, r0
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	sub	sp, sp, #108	; 0x6c
   12700:	ldr	r3, [pc, #48]	; 12738 <__assert_fail@plt+0x174>
   12704:	ldr	r3, [r3, #52]	; 0x34
   12708:	mov	r1, sp
   1270c:	blx	r3
   12710:	cmp	r0, #0
   12714:	moveq	r0, #0
   12718:	beq	12730 <__assert_fail@plt+0x16c>
   1271c:	bl	12318 <__errno_location@plt>
   12720:	ldr	r0, [r0]
   12724:	cmp	r0, #40	; 0x28
   12728:	movne	r0, #0
   1272c:	moveq	r0, #1
   12730:	add	sp, sp, #108	; 0x6c
   12734:	pop	{pc}		; (ldr pc, [sp], #4)
   12738:	andeq	r9, r5, ip, ror #28
   1273c:	ldr	r3, [pc, #108]	; 127b0 <__assert_fail@plt+0x1ec>
   12740:	ldr	r3, [r3]
   12744:	tst	r3, #512	; 0x200
   12748:	bxeq	lr
   1274c:	push	{r4, lr}
   12750:	cmn	r0, #100	; 0x64
   12754:	cmpne	r0, #0
   12758:	blt	1278c <__assert_fail@plt+0x1c8>
   1275c:	ldr	r3, [pc, #80]	; 127b4 <__assert_fail@plt+0x1f0>
   12760:	str	r0, [r3, #16]
   12764:	ldr	r3, [pc, #68]	; 127b0 <__assert_fail@plt+0x1ec>
   12768:	ldr	r3, [r3, #4]
   1276c:	cmp	r3, #0
   12770:	popge	{r4, pc}
   12774:	cmn	r0, #100	; 0x64
   12778:	beq	127a0 <__assert_fail@plt+0x1dc>
   1277c:	bl	21668 <__assert_fail@plt+0xf0a4>
   12780:	ldr	r3, [pc, #40]	; 127b0 <__assert_fail@plt+0x1ec>
   12784:	str	r0, [r3, #4]
   12788:	pop	{r4, pc}
   1278c:	ldr	r3, [pc, #36]	; 127b8 <__assert_fail@plt+0x1f4>
   12790:	mov	r2, #107	; 0x6b
   12794:	ldr	r1, [pc, #32]	; 127bc <__assert_fail@plt+0x1f8>
   12798:	ldr	r0, [pc, #32]	; 127c0 <__assert_fail@plt+0x1fc>
   1279c:	bl	125c4 <__assert_fail@plt>
   127a0:	mvn	r2, #99	; 0x63
   127a4:	ldr	r3, [pc, #4]	; 127b0 <__assert_fail@plt+0x1ec>
   127a8:	str	r2, [r3, #4]
   127ac:	pop	{r4, pc}
   127b0:	andeq	r9, r5, r8, lsl #5
   127b4:	andeq	r9, r5, r0, asr #28
   127b8:	andeq	r2, r4, r8, lsl #11
   127bc:	andeq	r2, r4, r0, asr #11
   127c0:	andeq	r2, r4, ip, asr #11
   127c4:	ldr	r3, [pc, #48]	; 127fc <__assert_fail@plt+0x238>
   127c8:	ldr	r3, [r3]
   127cc:	tst	r3, #512	; 0x200
   127d0:	bxeq	lr
   127d4:	ldr	r3, [pc, #32]	; 127fc <__assert_fail@plt+0x238>
   127d8:	ldr	r0, [r3, #4]
   127dc:	cmp	r0, #0
   127e0:	bxlt	lr
   127e4:	push	{r4, lr}
   127e8:	bl	1257c <close@plt>
   127ec:	mvn	r2, #0
   127f0:	ldr	r3, [pc, #4]	; 127fc <__assert_fail@plt+0x238>
   127f4:	str	r2, [r3, #4]
   127f8:	pop	{r4, pc}
   127fc:	andeq	r9, r5, r8, lsl #5
   12800:	sub	r3, r0, #1
   12804:	cmp	r3, #13
   12808:	ldrls	pc, [pc, r3, lsl #2]
   1280c:	b	128b0 <__assert_fail@plt+0x2ec>
   12810:	ldrdeq	r2, [r1], -r0
   12814:	andeq	r2, r1, r8, asr #16
   12818:	andeq	r2, r1, r0, asr r8
   1281c:	andeq	r2, r1, r8, asr r8
   12820:	andeq	r2, r1, r0, ror #16
   12824:	andeq	r2, r1, r8, ror #16
   12828:	andeq	r2, r1, r0, ror r8
   1282c:	andeq	r2, r1, r8, ror r8
   12830:	andeq	r2, r1, r0, lsl #17
   12834:	andeq	r2, r1, r8, lsl #17
   12838:	muleq	r1, r0, r8
   1283c:	muleq	r1, r8, r8
   12840:	andeq	r2, r1, r0, lsr #17
   12844:	andeq	r2, r1, r8, lsr #17
   12848:	ldr	r0, [pc, #136]	; 128d8 <__assert_fail@plt+0x314>
   1284c:	bx	lr
   12850:	ldr	r0, [pc, #132]	; 128dc <__assert_fail@plt+0x318>
   12854:	bx	lr
   12858:	ldr	r0, [pc, #128]	; 128e0 <__assert_fail@plt+0x31c>
   1285c:	bx	lr
   12860:	ldr	r0, [pc, #124]	; 128e4 <__assert_fail@plt+0x320>
   12864:	bx	lr
   12868:	ldr	r0, [pc, #120]	; 128e8 <__assert_fail@plt+0x324>
   1286c:	bx	lr
   12870:	ldr	r0, [pc, #116]	; 128ec <__assert_fail@plt+0x328>
   12874:	bx	lr
   12878:	ldr	r0, [pc, #112]	; 128f0 <__assert_fail@plt+0x32c>
   1287c:	bx	lr
   12880:	ldr	r0, [pc, #108]	; 128f4 <__assert_fail@plt+0x330>
   12884:	bx	lr
   12888:	ldr	r0, [pc, #104]	; 128f8 <__assert_fail@plt+0x334>
   1288c:	bx	lr
   12890:	ldr	r0, [pc, #100]	; 128fc <__assert_fail@plt+0x338>
   12894:	bx	lr
   12898:	ldr	r0, [pc, #96]	; 12900 <__assert_fail@plt+0x33c>
   1289c:	bx	lr
   128a0:	ldr	r0, [pc, #92]	; 12904 <__assert_fail@plt+0x340>
   128a4:	bx	lr
   128a8:	ldr	r0, [pc, #88]	; 12908 <__assert_fail@plt+0x344>
   128ac:	bx	lr
   128b0:	push	{r4, lr}
   128b4:	mov	r2, r0
   128b8:	ldr	r4, [pc, #76]	; 1290c <__assert_fail@plt+0x348>
   128bc:	ldr	r1, [pc, #76]	; 12910 <__assert_fail@plt+0x34c>
   128c0:	mov	r0, r4
   128c4:	bl	12480 <sprintf@plt>
   128c8:	mov	r0, r4
   128cc:	pop	{r4, pc}
   128d0:	ldr	r0, [pc, #60]	; 12914 <__assert_fail@plt+0x350>
   128d4:	bx	lr
   128d8:	strdeq	r2, [r4], -r8
   128dc:	andeq	r2, r4, r0, lsl #12
   128e0:	andeq	r2, r4, ip, lsl #12
   128e4:	andeq	r2, r4, r4, lsl r6
   128e8:	andeq	r2, r4, ip, lsl r6
   128ec:	andeq	r2, r4, r4, lsr #12
   128f0:	andeq	r2, r4, ip, lsr #12
   128f4:	andeq	r2, r4, r4, lsr r6
   128f8:	andeq	r2, r4, r0, asr #12
   128fc:	andeq	r2, r4, r8, asr #12
   12900:	andeq	r2, r4, r4, asr r6
   12904:	andeq	r2, r4, ip, asr r6
   12908:	andeq	r2, r4, r8, ror #12
   1290c:	andeq	r9, r5, ip, asr r5
   12910:	andeq	r2, r4, r0, ror r6
   12914:	strdeq	r2, [r4], -r0
   12918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1291c:	sub	sp, sp, #164	; 0xa4
   12920:	mov	r4, r0
   12924:	str	r0, [sp, #36]	; 0x24
   12928:	bl	122d0 <strlen@plt>
   1292c:	ldr	r3, [pc, #1856]	; 13074 <__assert_fail@plt+0xab0>
   12930:	str	r0, [r3, #20]
   12934:	mvn	r0, #99	; 0x63
   12938:	bl	1273c <__assert_fail@plt+0x178>
   1293c:	str	r4, [sp, #152]	; 0x98
   12940:	mov	r3, #0
   12944:	str	r3, [sp, #156]	; 0x9c
   12948:	ldr	r3, [pc, #1832]	; 13078 <__assert_fail@plt+0xab4>
   1294c:	ldr	r3, [r3, #48]	; 0x30
   12950:	cmp	r3, #1
   12954:	beq	129b8 <__assert_fail@plt+0x3f4>
   12958:	bcc	129e0 <__assert_fail@plt+0x41c>
   1295c:	cmp	r3, #2
   12960:	beq	129cc <__assert_fail@plt+0x408>
   12964:	ldr	r3, [pc, #1804]	; 13078 <__assert_fail@plt+0xab4>
   12968:	ldrb	r3, [r3, #13]
   1296c:	cmp	r3, #0
   12970:	ldrne	r2, [pc, #1796]	; 1307c <__assert_fail@plt+0xab8>
   12974:	ldrne	r3, [r2]
   12978:	orrne	r3, r3, #64	; 0x40
   1297c:	strne	r3, [r2]
   12980:	mov	r2, #0
   12984:	ldr	r3, [pc, #1776]	; 1307c <__assert_fail@plt+0xab8>
   12988:	ldr	r1, [r3]
   1298c:	add	r0, sp, #152	; 0x98
   12990:	bl	2f9e0 <__assert_fail@plt+0x1d41c>
   12994:	subs	fp, r0, #0
   12998:	beq	129f4 <__assert_fail@plt+0x430>
   1299c:	bl	12318 <__errno_location@plt>
   129a0:	str	r0, [sp, #16]
   129a4:	mov	r8, #-2147483648	; 0x80000000
   129a8:	ldr	r5, [pc, #1732]	; 13074 <__assert_fail@plt+0xab0>
   129ac:	ldr	r9, [pc, #1732]	; 13078 <__assert_fail@plt+0xab4>
   129b0:	ldr	sl, [pc, #1732]	; 1307c <__assert_fail@plt+0xab8>
   129b4:	b	12d88 <__assert_fail@plt+0x7c4>
   129b8:	ldr	r2, [pc, #1724]	; 1307c <__assert_fail@plt+0xab8>
   129bc:	ldr	r3, [r2]
   129c0:	orr	r3, r3, #3
   129c4:	str	r3, [r2]
   129c8:	b	12964 <__assert_fail@plt+0x3a0>
   129cc:	ldr	r2, [pc, #1704]	; 1307c <__assert_fail@plt+0xab8>
   129d0:	ldr	r3, [r2]
   129d4:	orr	r3, r3, #17
   129d8:	str	r3, [r2]
   129dc:	b	12964 <__assert_fail@plt+0x3a0>
   129e0:	ldr	r2, [pc, #1684]	; 1307c <__assert_fail@plt+0xab8>
   129e4:	ldr	r3, [r2]
   129e8:	orr	r3, r3, #16
   129ec:	str	r3, [r2]
   129f0:	b	12964 <__assert_fail@plt+0x3a0>
   129f4:	bl	12318 <__errno_location@plt>
   129f8:	ldr	r4, [r0]
   129fc:	mov	r2, #5
   12a00:	ldr	r1, [pc, #1656]	; 13080 <__assert_fail@plt+0xabc>
   12a04:	mov	r0, #0
   12a08:	bl	12084 <dcgettext@plt>
   12a0c:	mov	r5, r0
   12a10:	ldr	r1, [sp, #36]	; 0x24
   12a14:	mov	r0, #0
   12a18:	bl	18a20 <__assert_fail@plt+0x645c>
   12a1c:	mov	r3, r0
   12a20:	mov	r2, r5
   12a24:	mov	r1, r4
   12a28:	mov	r0, #0
   12a2c:	bl	121bc <error@plt>
   12a30:	mov	r0, #1
   12a34:	ldr	r3, [pc, #1592]	; 13074 <__assert_fail@plt+0xab0>
   12a38:	str	r0, [r3, #28]
   12a3c:	b	1306c <__assert_fail@plt+0xaa8>
   12a40:	ldr	r3, [pc, #1596]	; 13084 <__assert_fail@plt+0xac0>
   12a44:	ldr	r3, [r3]
   12a48:	str	r3, [sp, #20]
   12a4c:	ldr	r2, [r4, #28]
   12a50:	ldr	r1, [r9, #72]	; 0x48
   12a54:	mov	r0, #0
   12a58:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12a5c:	str	r0, [sp, #24]
   12a60:	ldrh	r0, [r4, #56]	; 0x38
   12a64:	bl	12800 <__assert_fail@plt+0x23c>
   12a68:	str	r0, [sp, #28]
   12a6c:	ldr	r7, [r4, #48]	; 0x30
   12a70:	ldr	r6, [sl, #8]
   12a74:	ldr	r2, [r4, #28]
   12a78:	ldr	r1, [r9, #72]	; 0x48
   12a7c:	mov	r0, #1
   12a80:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12a84:	str	r0, [sp, #32]
   12a88:	ldr	r2, [r4, #24]
   12a8c:	ldr	r1, [r9, #72]	; 0x48
   12a90:	mov	r0, #2
   12a94:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12a98:	str	r0, [sp, #12]
   12a9c:	ldr	r1, [sp, #32]
   12aa0:	str	r1, [sp, #8]
   12aa4:	str	r6, [sp, #4]
   12aa8:	str	r7, [sp]
   12aac:	ldr	r3, [sp, #28]
   12ab0:	ldr	r2, [sp, #24]
   12ab4:	ldr	r1, [pc, #1484]	; 13088 <__assert_fail@plt+0xac4>
   12ab8:	ldr	r0, [sp, #20]
   12abc:	bl	1230c <fprintf@plt>
   12ac0:	b	12df0 <__assert_fail@plt+0x82c>
   12ac4:	bl	127c4 <__assert_fail@plt+0x200>
   12ac8:	b	12e20 <__assert_fail@plt+0x85c>
   12acc:	ldr	r1, [r4, #28]
   12ad0:	ldr	r0, [r4, #32]
   12ad4:	bl	18ad8 <__assert_fail@plt+0x6514>
   12ad8:	b	12d88 <__assert_fail@plt+0x7c4>
   12adc:	ldr	r1, [r4, #28]
   12ae0:	ldr	r0, [r4, #32]
   12ae4:	bl	18ad8 <__assert_fail@plt+0x6514>
   12ae8:	ldrb	r3, [r9]
   12aec:	cmp	r3, #0
   12af0:	bne	12d88 <__assert_fail@plt+0x7c4>
   12af4:	b	12e64 <__assert_fail@plt+0x8a0>
   12af8:	ldr	r3, [r4, #80]	; 0x50
   12afc:	and	r3, r3, #61440	; 0xf000
   12b00:	cmp	r3, #40960	; 0xa000
   12b04:	beq	12b84 <__assert_fail@plt+0x5c0>
   12b08:	mov	r2, #5
   12b0c:	ldr	r1, [pc, #1400]	; 1308c <__assert_fail@plt+0xac8>
   12b10:	mov	r0, #0
   12b14:	bl	12084 <dcgettext@plt>
   12b18:	str	r0, [sp, #20]
   12b1c:	ldr	r1, [r4, #28]
   12b20:	mov	r0, #0
   12b24:	bl	18a20 <__assert_fail@plt+0x645c>
   12b28:	str	r0, [sp, #24]
   12b2c:	ldr	r3, [r4]
   12b30:	ldr	r4, [r3, #40]	; 0x28
   12b34:	ldr	r1, [r9, #72]	; 0x48
   12b38:	cmp	r4, #0
   12b3c:	beq	12bbc <__assert_fail@plt+0x5f8>
   12b40:	ldr	r6, [r3, #28]
   12b44:	ldrb	r7, [r6, r4]
   12b48:	mov	r3, #0
   12b4c:	strb	r3, [r6, r4]
   12b50:	mov	r2, r6
   12b54:	mov	r0, #1
   12b58:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12b5c:	strb	r7, [r6, r4]
   12b60:	str	r0, [sp]
   12b64:	ldr	r3, [sp, #24]
   12b68:	ldr	r2, [sp, #20]
   12b6c:	mov	r1, #0
   12b70:	mov	r0, r1
   12b74:	bl	121bc <error@plt>
   12b78:	mov	r3, #1
   12b7c:	str	r3, [r5, #28]
   12b80:	b	12d88 <__assert_fail@plt+0x7c4>
   12b84:	mov	r2, #5
   12b88:	ldr	r1, [pc, #1280]	; 13090 <__assert_fail@plt+0xacc>
   12b8c:	mov	r0, #0
   12b90:	bl	12084 <dcgettext@plt>
   12b94:	mov	r6, r0
   12b98:	ldr	r1, [r4, #28]
   12b9c:	mov	r0, #0
   12ba0:	bl	18a20 <__assert_fail@plt+0x645c>
   12ba4:	mov	r3, r0
   12ba8:	mov	r2, r6
   12bac:	mov	r1, #0
   12bb0:	mov	r0, r1
   12bb4:	bl	121bc <error@plt>
   12bb8:	b	12b78 <__assert_fail@plt+0x5b4>
   12bbc:	ldr	r2, [pc, #1232]	; 13094 <__assert_fail@plt+0xad0>
   12bc0:	mov	r0, #1
   12bc4:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12bc8:	b	12b60 <__assert_fail@plt+0x59c>
   12bcc:	ldr	r0, [r4, #24]
   12bd0:	bl	126f8 <__assert_fail@plt+0x134>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12e64 <__assert_fail@plt+0x8a0>
   12bdc:	ldr	r1, [r4, #28]
   12be0:	mov	r0, #40	; 0x28
   12be4:	bl	18ad8 <__assert_fail@plt+0x6514>
   12be8:	b	12d88 <__assert_fail@plt+0x7c4>
   12bec:	cmp	r1, #0
   12bf0:	bne	12c04 <__assert_fail@plt+0x640>
   12bf4:	ldr	r1, [r4, #28]
   12bf8:	ldr	r0, [r4, #32]
   12bfc:	bl	18ad8 <__assert_fail@plt+0x6514>
   12c00:	b	12d88 <__assert_fail@plt+0x7c4>
   12c04:	ldr	r0, [r4, #24]
   12c08:	bl	126f8 <__assert_fail@plt+0x134>
   12c0c:	cmp	r0, #0
   12c10:	beq	12c24 <__assert_fail@plt+0x660>
   12c14:	ldr	r1, [r4, #28]
   12c18:	mov	r0, #40	; 0x28
   12c1c:	bl	18ad8 <__assert_fail@plt+0x6514>
   12c20:	b	12d88 <__assert_fail@plt+0x7c4>
   12c24:	ldr	r1, [r4, #28]
   12c28:	ldr	r0, [r4, #32]
   12c2c:	bl	18ad8 <__assert_fail@plt+0x6514>
   12c30:	b	12e64 <__assert_fail@plt+0x8a0>
   12c34:	ldrb	r3, [r5, #4]
   12c38:	cmp	r3, #0
   12c3c:	bne	12c60 <__assert_fail@plt+0x69c>
   12c40:	cmp	r2, #11
   12c44:	beq	12c54 <__assert_fail@plt+0x690>
   12c48:	ldr	r3, [r5, #8]
   12c4c:	cmp	r3, #0
   12c50:	bne	12c74 <__assert_fail@plt+0x6b0>
   12c54:	ldr	r3, [r5, #8]
   12c58:	str	r3, [sp, #44]	; 0x2c
   12c5c:	b	12ea8 <__assert_fail@plt+0x8e4>
   12c60:	ldr	r3, [pc, #1072]	; 13098 <__assert_fail@plt+0xad4>
   12c64:	mov	r2, #380	; 0x17c
   12c68:	ldr	r1, [pc, #1068]	; 1309c <__assert_fail@plt+0xad8>
   12c6c:	ldr	r0, [pc, #1068]	; 130a0 <__assert_fail@plt+0xadc>
   12c70:	bl	125c4 <__assert_fail@plt>
   12c74:	ldr	r3, [pc, #1052]	; 13098 <__assert_fail@plt+0xad4>
   12c78:	ldr	r2, [pc, #1060]	; 130a4 <__assert_fail@plt+0xae0>
   12c7c:	ldr	r1, [pc, #1048]	; 1309c <__assert_fail@plt+0xad8>
   12c80:	ldr	r0, [pc, #1056]	; 130a8 <__assert_fail@plt+0xae4>
   12c84:	bl	125c4 <__assert_fail@plt>
   12c88:	mov	r2, #5
   12c8c:	ldr	r1, [pc, #1048]	; 130ac <__assert_fail@plt+0xae8>
   12c90:	mov	r0, #0
   12c94:	bl	12084 <dcgettext@plt>
   12c98:	mov	r6, r0
   12c9c:	ldr	r2, [r4, #28]
   12ca0:	ldr	r1, [r9, #72]	; 0x48
   12ca4:	mov	r0, #0
   12ca8:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12cac:	mov	r3, r0
   12cb0:	mov	r2, r6
   12cb4:	mov	r1, #0
   12cb8:	mov	r0, r1
   12cbc:	bl	121bc <error@plt>
   12cc0:	b	12ea8 <__assert_fail@plt+0x8e4>
   12cc4:	ldr	r1, [r4, #28]
   12cc8:	mov	r3, #0
   12ccc:	str	r3, [sp]
   12cd0:	add	r3, sp, #48	; 0x30
   12cd4:	add	r2, r4, #168	; 0xa8
   12cd8:	add	r0, sp, #44	; 0x2c
   12cdc:	bl	18bf0 <__assert_fail@plt+0x662c>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d88 <__assert_fail@plt+0x7c4>
   12ce8:	ldr	r3, [sp, #44]	; 0x2c
   12cec:	and	r3, r3, #61440	; 0xf000
   12cf0:	cmp	r3, #16384	; 0x4000
   12cf4:	moveq	r6, #1
   12cf8:	bne	12ebc <__assert_fail@plt+0x8f8>
   12cfc:	ldrh	r3, [r4, #56]	; 0x38
   12d00:	cmp	r3, #11
   12d04:	bne	12edc <__assert_fail@plt+0x918>
   12d08:	mov	r2, #1
   12d0c:	mov	r1, r4
   12d10:	mov	r0, fp
   12d14:	bl	30550 <__assert_fail@plt+0x1df8c>
   12d18:	b	12d88 <__assert_fail@plt+0x7c4>
   12d1c:	mov	r2, #4
   12d20:	mov	r1, r4
   12d24:	mov	r0, fp
   12d28:	bl	30550 <__assert_fail@plt+0x1df8c>
   12d2c:	ldr	r7, [r4, #48]	; 0x30
   12d30:	ldr	r3, [r9, #4]
   12d34:	cmp	r7, r3
   12d38:	movle	r7, #0
   12d3c:	movgt	r7, #1
   12d40:	b	12efc <__assert_fail@plt+0x938>
   12d44:	ldrb	r3, [r9]
   12d48:	cmp	r3, #0
   12d4c:	moveq	r7, #1
   12d50:	beq	12d64 <__assert_fail@plt+0x7a0>
   12d54:	ldr	r2, [r4, #48]	; 0x30
   12d58:	ldr	r3, [r9, #8]
   12d5c:	cmp	r2, r3
   12d60:	movlt	r7, #1
   12d64:	ldr	r3, [r9, #44]	; 0x2c
   12d68:	tst	r3, #4
   12d6c:	bne	12f24 <__assert_fail@plt+0x960>
   12d70:	cmp	r7, #0
   12d74:	beq	12f7c <__assert_fail@plt+0x9b8>
   12d78:	ldrh	r3, [r4, #56]	; 0x38
   12d7c:	cmp	r3, #6
   12d80:	moveq	r3, #0
   12d84:	strbeq	r3, [r5, #24]
   12d88:	mov	r3, #0
   12d8c:	ldr	r2, [sp, #16]
   12d90:	str	r3, [r2]
   12d94:	mov	r0, fp
   12d98:	bl	2fee0 <__assert_fail@plt+0x1d91c>
   12d9c:	subs	r4, r0, #0
   12da0:	beq	12fdc <__assert_fail@plt+0xa18>
   12da4:	ldrb	r3, [r5, #32]
   12da8:	cmp	r3, #0
   12dac:	beq	12dc0 <__assert_fail@plt+0x7fc>
   12db0:	ldr	r3, [r4, #48]	; 0x30
   12db4:	cmp	r8, r3
   12db8:	beq	12dc0 <__assert_fail@plt+0x7fc>
   12dbc:	bl	17ff8 <__assert_fail@plt+0x5a34>
   12dc0:	ldr	r8, [r4, #48]	; 0x30
   12dc4:	mov	r3, #0
   12dc8:	strb	r3, [r5, #40]	; 0x28
   12dcc:	strb	r3, [r5, #4]
   12dd0:	ldr	r3, [r4, #80]	; 0x50
   12dd4:	adds	r2, r3, #0
   12dd8:	movne	r2, #1
   12ddc:	strb	r2, [r5, #5]
   12de0:	str	r3, [r5, #8]
   12de4:	ldr	r3, [r9, #44]	; 0x2c
   12de8:	tst	r3, #4
   12dec:	bne	12a40 <__assert_fail@plt+0x47c>
   12df0:	ldrh	r3, [r4, #56]	; 0x38
   12df4:	cmp	r3, #6
   12df8:	beq	12ac4 <__assert_fail@plt+0x500>
   12dfc:	ldr	r2, [r4, #48]	; 0x30
   12e00:	ldr	r1, [sl, #8]
   12e04:	clz	r3, r2
   12e08:	lsr	r3, r3, #5
   12e0c:	cmp	r2, r1
   12e10:	orrgt	r3, r3, #1
   12e14:	cmp	r3, #0
   12e18:	beq	12e20 <__assert_fail@plt+0x85c>
   12e1c:	bl	127c4 <__assert_fail@plt+0x200>
   12e20:	ldr	r0, [fp, #32]
   12e24:	bl	1273c <__assert_fail@plt+0x178>
   12e28:	ldr	r1, [r4, #48]	; 0x30
   12e2c:	str	r1, [sl, #8]
   12e30:	ldrd	r2, [r4, #160]	; 0xa0
   12e34:	strd	r2, [sp, #144]	; 0x90
   12e38:	ldrh	r3, [r4, #56]	; 0x38
   12e3c:	cmp	r3, #7
   12e40:	beq	12acc <__assert_fail@plt+0x508>
   12e44:	cmp	r3, #4
   12e48:	beq	12adc <__assert_fail@plt+0x518>
   12e4c:	cmp	r3, #2
   12e50:	beq	12af8 <__assert_fail@plt+0x534>
   12e54:	cmp	r3, #13
   12e58:	beq	12bcc <__assert_fail@plt+0x608>
   12e5c:	cmp	r3, #10
   12e60:	beq	12bec <__assert_fail@plt+0x628>
   12e64:	ldrh	r2, [r4, #56]	; 0x38
   12e68:	sub	r3, r2, #10
   12e6c:	uxth	r3, r3
   12e70:	cmp	r3, #1
   12e74:	bls	12c34 <__assert_fail@plt+0x670>
   12e78:	mov	r3, #1
   12e7c:	strb	r3, [r5, #4]
   12e80:	strb	r3, [r5, #5]
   12e84:	mov	r2, #104	; 0x68
   12e88:	add	r1, r4, #64	; 0x40
   12e8c:	add	r0, sp, #48	; 0x30
   12e90:	bl	12000 <memcpy@plt>
   12e94:	ldr	r3, [sp, #64]	; 0x40
   12e98:	str	r3, [sp, #44]	; 0x2c
   12e9c:	str	r3, [r5, #8]
   12ea0:	cmp	r3, #0
   12ea4:	beq	12c88 <__assert_fail@plt+0x6c4>
   12ea8:	ldr	r3, [r4, #48]	; 0x30
   12eac:	str	r3, [r5]
   12eb0:	ldr	r3, [sp, #44]	; 0x2c
   12eb4:	cmp	r3, #0
   12eb8:	bne	12cc4 <__assert_fail@plt+0x700>
   12ebc:	ldrh	r3, [r4, #56]	; 0x38
   12ec0:	sub	r6, r3, #1
   12ec4:	uxth	r6, r6
   12ec8:	cmp	r3, #6
   12ecc:	cmpne	r6, #1
   12ed0:	movls	r6, #1
   12ed4:	movhi	r6, #0
   12ed8:	bls	12cfc <__assert_fail@plt+0x738>
   12edc:	ldr	r3, [r9, #4]
   12ee0:	cmp	r3, #0
   12ee4:	movlt	r7, #0
   12ee8:	blt	12efc <__assert_fail@plt+0x938>
   12eec:	ldr	r2, [r4, #48]	; 0x30
   12ef0:	cmp	r3, r2
   12ef4:	movgt	r7, #0
   12ef8:	ble	12d1c <__assert_fail@plt+0x758>
   12efc:	ldrh	r3, [r4, #56]	; 0x38
   12f00:	cmp	r3, #1
   12f04:	beq	12d44 <__assert_fail@plt+0x780>
   12f08:	cmp	r3, #6
   12f0c:	bne	12d54 <__assert_fail@plt+0x790>
   12f10:	ldrb	r3, [r9]
   12f14:	cmp	r3, #0
   12f18:	movne	r7, #1
   12f1c:	bne	12d64 <__assert_fail@plt+0x7a0>
   12f20:	b	12d54 <__assert_fail@plt+0x790>
   12f24:	ldr	r3, [pc, #344]	; 13084 <__assert_fail@plt+0xac0>
   12f28:	ldr	r3, [r3]
   12f2c:	str	r3, [sp, #20]
   12f30:	ldr	r2, [r4, #28]
   12f34:	ldr	r1, [r9, #72]	; 0x48
   12f38:	mov	r0, #0
   12f3c:	bl	2bc6c <__assert_fail@plt+0x196a8>
   12f40:	str	r0, [sp, #24]
   12f44:	ldrh	r0, [r4, #56]	; 0x38
   12f48:	bl	12800 <__assert_fail@plt+0x23c>
   12f4c:	ldrb	r3, [r5, #5]
   12f50:	str	r3, [sp, #12]
   12f54:	ldrb	r3, [r5, #4]
   12f58:	str	r3, [sp, #8]
   12f5c:	str	r7, [sp, #4]
   12f60:	str	r6, [sp]
   12f64:	mov	r3, r0
   12f68:	ldr	r2, [sp, #24]
   12f6c:	ldr	r1, [pc, #316]	; 130b0 <__assert_fail@plt+0xaec>
   12f70:	ldr	r0, [sp, #20]
   12f74:	bl	1230c <fprintf@plt>
   12f78:	b	12d70 <__assert_fail@plt+0x7ac>
   12f7c:	ldrh	r3, [r4, #56]	; 0x38
   12f80:	sub	r3, r3, #10
   12f84:	uxth	r3, r3
   12f88:	cmp	r3, #1
   12f8c:	movls	r3, #0
   12f90:	movhi	r3, #1
   12f94:	strb	r3, [r5, #4]
   12f98:	ldr	r3, [r4, #24]
   12f9c:	str	r3, [r5, #12]
   12fa0:	ldr	r3, [fp, #32]
   12fa4:	str	r3, [r5, #16]
   12fa8:	bl	1621c <__assert_fail@plt+0x3c58>
   12fac:	mov	r2, r0
   12fb0:	add	r1, sp, #48	; 0x30
   12fb4:	ldr	r0, [r4, #28]
   12fb8:	bl	18cdc <__assert_fail@plt+0x6718>
   12fbc:	ldrb	r3, [r5, #24]
   12fc0:	cmp	r3, #0
   12fc4:	beq	12d78 <__assert_fail@plt+0x7b4>
   12fc8:	mov	r2, #4
   12fcc:	mov	r1, r4
   12fd0:	mov	r0, fp
   12fd4:	bl	30550 <__assert_fail@plt+0x1df8c>
   12fd8:	b	12d78 <__assert_fail@plt+0x7b4>
   12fdc:	ldr	r3, [sp, #16]
   12fe0:	ldr	r4, [r3]
   12fe4:	cmp	r4, #0
   12fe8:	bne	13040 <__assert_fail@plt+0xa7c>
   12fec:	mov	r0, fp
   12ff0:	bl	2fd7c <__assert_fail@plt+0x1d7b8>
   12ff4:	cmp	r0, #0
   12ff8:	moveq	r0, #1
   12ffc:	beq	1306c <__assert_fail@plt+0xaa8>
   13000:	ldr	r3, [sp, #16]
   13004:	ldr	r4, [r3]
   13008:	mov	r2, #5
   1300c:	ldr	r1, [pc, #160]	; 130b4 <__assert_fail@plt+0xaf0>
   13010:	mov	r0, #0
   13014:	bl	12084 <dcgettext@plt>
   13018:	ldr	r3, [sp, #36]	; 0x24
   1301c:	mov	r2, r0
   13020:	mov	r1, r4
   13024:	mov	r0, #0
   13028:	bl	121bc <error@plt>
   1302c:	mov	r2, #1
   13030:	ldr	r3, [pc, #60]	; 13074 <__assert_fail@plt+0xab0>
   13034:	str	r2, [r3, #28]
   13038:	mov	r0, #0
   1303c:	b	1306c <__assert_fail@plt+0xaa8>
   13040:	ldr	r1, [sp, #36]	; 0x24
   13044:	bl	18a20 <__assert_fail@plt+0x645c>
   13048:	mov	r3, r0
   1304c:	ldr	r2, [pc, #100]	; 130b8 <__assert_fail@plt+0xaf4>
   13050:	mov	r1, r4
   13054:	mov	r0, #0
   13058:	bl	121bc <error@plt>
   1305c:	mov	r2, #1
   13060:	ldr	r3, [pc, #12]	; 13074 <__assert_fail@plt+0xab0>
   13064:	str	r2, [r3, #28]
   13068:	mov	r0, #0
   1306c:	add	sp, sp, #164	; 0xa4
   13070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13074:	andeq	r9, r5, r0, asr #28
   13078:	andeq	r9, r5, ip, ror #28
   1307c:	andeq	r9, r5, r8, lsl #5
   13080:	andeq	r2, r4, r8, ror r6
   13084:	andeq	r9, r5, r8, asr #10
   13088:	andeq	r2, r4, ip, lsl #13
   1308c:	andeq	r2, r4, r0, ror r7
   13090:	strdeq	r2, [r4], -r4
   13094:	andeq	r4, r4, r0, lsl r3
   13098:	muleq	r4, r4, r5
   1309c:	andeq	r2, r4, r0, asr #11
   130a0:			; <UNDEFINED> instruction: 0x000427bc
   130a4:	andeq	r0, r0, sp, ror r1
   130a8:	ldrdeq	r2, [r4], -r0
   130ac:	andeq	r2, r4, r0, lsl #16
   130b0:	andeq	r2, r4, ip, lsr #16
   130b4:	andeq	r2, r4, r4, asr #17
   130b8:	andeq	r2, r4, r8, lsl #17
   130bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130c0:	sub	sp, sp, #228	; 0xe4
   130c4:	mov	r4, r0
   130c8:	mov	r5, r1
   130cc:	ldr	r0, [r1]
   130d0:	cmp	r0, #0
   130d4:	ldreq	r0, [pc, #1452]	; 13688 <__assert_fail@plt+0x10c4>
   130d8:	bl	2a3bc <__assert_fail@plt+0x17df8>
   130dc:	bl	18028 <__assert_fail@plt+0x5a64>
   130e0:	ldr	r3, [pc, #1444]	; 1368c <__assert_fail@plt+0x10c8>
   130e4:	mov	r2, #0
   130e8:	strb	r2, [r3, #40]	; 0x28
   130ec:	str	r2, [r3, #28]
   130f0:	strb	r2, [r3, #32]
   130f4:	mvn	r2, #99	; 0x63
   130f8:	str	r2, [r3, #16]
   130fc:	bl	20204 <__assert_fail@plt+0xdc40>
   13100:	cmp	r0, #0
   13104:	bne	13258 <__assert_fail@plt+0xc94>
   13108:	ldr	r0, [pc, #1408]	; 13690 <__assert_fail@plt+0x10cc>
   1310c:	bl	19034 <__assert_fail@plt+0x6a70>
   13110:	ldr	r3, [pc, #1396]	; 1368c <__assert_fail@plt+0x10c8>
   13114:	str	r0, [r3, #36]	; 0x24
   13118:	cmp	r0, #0
   1311c:	beq	13260 <__assert_fail@plt+0xc9c>
   13120:	ldr	r0, [pc, #1388]	; 13694 <__assert_fail@plt+0x10d0>
   13124:	bl	18874 <__assert_fail@plt+0x62b0>
   13128:	ldr	r1, [pc, #1384]	; 13698 <__assert_fail@plt+0x10d4>
   1312c:	mov	r0, #6
   13130:	bl	12414 <setlocale@plt>
   13134:	ldr	r6, [pc, #1376]	; 1369c <__assert_fail@plt+0x10d8>
   13138:	ldr	r1, [pc, #1376]	; 136a0 <__assert_fail@plt+0x10dc>
   1313c:	mov	r0, r6
   13140:	bl	12510 <bindtextdomain@plt>
   13144:	mov	r0, r6
   13148:	bl	120d8 <textdomain@plt>
   1314c:	ldr	r0, [pc, #1360]	; 136a4 <__assert_fail@plt+0x10e0>
   13150:	bl	42564 <__assert_fail@plt+0x2ffa0>
   13154:	cmp	r0, #0
   13158:	bne	13288 <__assert_fail@plt+0xcc4>
   1315c:	mov	r1, r5
   13160:	mov	r0, r4
   13164:	bl	18428 <__assert_fail@plt+0x5e64>
   13168:	mov	r6, r0
   1316c:	ldr	r3, [pc, #1312]	; 13694 <__assert_fail@plt+0x10d0>
   13170:	ldr	r3, [r3, #44]	; 0x2c
   13174:	tst	r3, #2
   13178:	ldrne	r1, [pc, #1320]	; 136a8 <__assert_fail@plt+0x10e4>
   1317c:	ldrne	r2, [pc, #1296]	; 13694 <__assert_fail@plt+0x10d0>
   13180:	strne	r1, [r2, #52]	; 0x34
   13184:	tst	r3, #128	; 0x80
   13188:	bne	132b0 <__assert_fail@plt+0xcec>
   1318c:	mov	r2, r6
   13190:	mov	r1, r5
   13194:	mov	r0, r4
   13198:	bl	173bc <__assert_fail@plt+0x4df8>
   1319c:	str	r0, [sp, #12]
   131a0:	add	r7, r5, r6, lsl #2
   131a4:	sub	r4, r4, r6
   131a8:	cmp	r4, #0
   131ac:	ble	1365c <__assert_fail@plt+0x1098>
   131b0:	mov	r1, #1
   131b4:	ldr	r0, [r5, r6, lsl #2]
   131b8:	bl	1839c <__assert_fail@plt+0x5dd8>
   131bc:	eor	r0, r0, #1
   131c0:	uxtb	r0, r0
   131c4:	ldr	r3, [pc, #1224]	; 13694 <__assert_fail@plt+0x10d0>
   131c8:	ldr	r4, [r3, #76]	; 0x4c
   131cc:	cmp	r4, #0
   131d0:	beq	13468 <__assert_fail@plt+0xea4>
   131d4:	cmp	r0, #0
   131d8:	bne	132d4 <__assert_fail@plt+0xd10>
   131dc:	ldr	r1, [pc, #1224]	; 136ac <__assert_fail@plt+0x10e8>
   131e0:	mov	r0, r4
   131e4:	bl	11f1c <strcmp@plt>
   131e8:	cmp	r0, #0
   131ec:	bne	1334c <__assert_fail@plt+0xd88>
   131f0:	ldr	r3, [pc, #1180]	; 13694 <__assert_fail@plt+0x10d0>
   131f4:	ldrb	r3, [r3, #80]	; 0x50
   131f8:	cmp	r3, #0
   131fc:	bne	1332c <__assert_fail@plt+0xd68>
   13200:	mov	r2, #5
   13204:	ldr	r1, [pc, #1188]	; 136b0 <__assert_fail@plt+0x10ec>
   13208:	mov	r0, #0
   1320c:	bl	12084 <dcgettext@plt>
   13210:	mov	r1, r0
   13214:	mov	r0, #0
   13218:	bl	18a20 <__assert_fail@plt+0x645c>
   1321c:	mov	r4, r0
   13220:	ldr	r3, [pc, #1164]	; 136b4 <__assert_fail@plt+0x10f0>
   13224:	ldr	r3, [r3]
   13228:	str	r3, [sp, #8]
   1322c:	ldr	r0, [sp, #8]
   13230:	bl	2135c <__assert_fail@plt+0xed98>
   13234:	mov	r7, r0
   13238:	cmp	r7, #0
   1323c:	beq	13488 <__assert_fail@plt+0xec4>
   13240:	mov	sl, #1
   13244:	ldr	r8, [pc, #1096]	; 13694 <__assert_fail@plt+0x10d0>
   13248:	ldr	r9, [pc, #1084]	; 1368c <__assert_fail@plt+0x10c8>
   1324c:	ldr	fp, [pc, #1124]	; 136b8 <__assert_fail@plt+0x10f4>
   13250:	ldr	r6, [pc, #1124]	; 136bc <__assert_fail@plt+0x10f8>
   13254:	b	1352c <__assert_fail@plt+0xf68>
   13258:	bl	200b8 <__assert_fail@plt+0xdaf4>
   1325c:	b	13108 <__assert_fail@plt+0xb44>
   13260:	bl	12318 <__errno_location@plt>
   13264:	ldr	r4, [r0]
   13268:	mov	r2, #5
   1326c:	ldr	r1, [pc, #1100]	; 136c0 <__assert_fail@plt+0x10fc>
   13270:	mov	r0, #0
   13274:	bl	12084 <dcgettext@plt>
   13278:	mov	r2, r0
   1327c:	mov	r1, r4
   13280:	mov	r0, #1
   13284:	bl	121bc <error@plt>
   13288:	bl	12318 <__errno_location@plt>
   1328c:	ldr	r4, [r0]
   13290:	mov	r2, #5
   13294:	ldr	r1, [pc, #1064]	; 136c4 <__assert_fail@plt+0x1100>
   13298:	mov	r0, #0
   1329c:	bl	12084 <dcgettext@plt>
   132a0:	mov	r2, r0
   132a4:	mov	r1, r4
   132a8:	mov	r0, #1
   132ac:	bl	121bc <error@plt>
   132b0:	ldr	r3, [pc, #1040]	; 136c8 <__assert_fail@plt+0x1104>
   132b4:	ldr	r7, [r3]
   132b8:	ldr	r0, [pc, #1036]	; 136cc <__assert_fail@plt+0x1108>
   132bc:	bl	12078 <ctime@plt>
   132c0:	mov	r2, r0
   132c4:	ldr	r1, [pc, #1028]	; 136d0 <__assert_fail@plt+0x110c>
   132c8:	mov	r0, r7
   132cc:	bl	1230c <fprintf@plt>
   132d0:	b	1318c <__assert_fail@plt+0xbc8>
   132d4:	mov	r2, #5
   132d8:	ldr	r1, [pc, #1012]	; 136d4 <__assert_fail@plt+0x1110>
   132dc:	mov	r0, #0
   132e0:	bl	12084 <dcgettext@plt>
   132e4:	mov	r4, r0
   132e8:	ldr	r1, [r5, r6, lsl #2]
   132ec:	mov	r0, #0
   132f0:	bl	18a20 <__assert_fail@plt+0x645c>
   132f4:	mov	r3, r0
   132f8:	mov	r2, r4
   132fc:	mov	r1, #0
   13300:	mov	r0, r1
   13304:	bl	121bc <error@plt>
   13308:	mov	r2, #5
   1330c:	ldr	r1, [pc, #964]	; 136d8 <__assert_fail@plt+0x1114>
   13310:	mov	r0, #0
   13314:	bl	12084 <dcgettext@plt>
   13318:	mov	r3, r0
   1331c:	ldr	r2, [pc, #952]	; 136dc <__assert_fail@plt+0x1118>
   13320:	mov	r1, #0
   13324:	mov	r0, #1
   13328:	bl	121bc <error@plt>
   1332c:	mov	r2, #5
   13330:	ldr	r1, [pc, #936]	; 136e0 <__assert_fail@plt+0x111c>
   13334:	bl	12084 <dcgettext@plt>
   13338:	mov	r3, r0
   1333c:	ldr	r2, [pc, #928]	; 136e4 <__assert_fail@plt+0x1120>
   13340:	mov	r1, #0
   13344:	mov	r0, #1
   13348:	bl	121bc <error@plt>
   1334c:	mov	r1, r4
   13350:	mov	r0, #0
   13354:	bl	18a20 <__assert_fail@plt+0x645c>
   13358:	mov	r4, r0
   1335c:	ldr	r1, [pc, #900]	; 136e8 <__assert_fail@plt+0x1124>
   13360:	ldr	r3, [pc, #812]	; 13694 <__assert_fail@plt+0x10d0>
   13364:	ldr	r0, [r3, #76]	; 0x4c
   13368:	bl	124d4 <fopen64@plt>
   1336c:	subs	r3, r0, #0
   13370:	str	r3, [sp, #8]
   13374:	beq	133c0 <__assert_fail@plt+0xdfc>
   13378:	ldr	r0, [sp, #8]
   1337c:	bl	12390 <fileno@plt>
   13380:	subs	r5, r0, #0
   13384:	blt	133ec <__assert_fail@plt+0xe28>
   13388:	ldr	r3, [pc, #772]	; 13694 <__assert_fail@plt+0x10d0>
   1338c:	ldrb	r3, [r3, #80]	; 0x50
   13390:	cmp	r3, #0
   13394:	beq	133b0 <__assert_fail@plt+0xdec>
   13398:	add	r2, sp, #16
   1339c:	mov	r1, r5
   133a0:	mov	r0, #3
   133a4:	bl	1212c <__fxstat64@plt>
   133a8:	cmp	r0, #0
   133ac:	beq	13400 <__assert_fail@plt+0xe3c>
   133b0:	mov	r1, #1
   133b4:	mov	r0, r5
   133b8:	bl	21604 <__assert_fail@plt+0xf040>
   133bc:	b	1322c <__assert_fail@plt+0xc68>
   133c0:	bl	12318 <__errno_location@plt>
   133c4:	ldr	r5, [r0]
   133c8:	mov	r2, #5
   133cc:	ldr	r1, [pc, #792]	; 136ec <__assert_fail@plt+0x1128>
   133d0:	mov	r0, #0
   133d4:	bl	12084 <dcgettext@plt>
   133d8:	mov	r3, r4
   133dc:	mov	r2, r0
   133e0:	mov	r1, r5
   133e4:	mov	r0, #1
   133e8:	bl	121bc <error@plt>
   133ec:	ldr	r3, [pc, #764]	; 136f0 <__assert_fail@plt+0x112c>
   133f0:	ldr	r2, [pc, #764]	; 136f4 <__assert_fail@plt+0x1130>
   133f4:	ldr	r1, [pc, #764]	; 136f8 <__assert_fail@plt+0x1134>
   133f8:	ldr	r0, [pc, #764]	; 136fc <__assert_fail@plt+0x1138>
   133fc:	bl	125c4 <__assert_fail@plt>
   13400:	add	r2, sp, #120	; 0x78
   13404:	mov	r1, #0
   13408:	mov	r0, #3
   1340c:	bl	1212c <__fxstat64@plt>
   13410:	cmp	r0, #0
   13414:	bne	133b0 <__assert_fail@plt+0xdec>
   13418:	ldrd	r2, [sp, #216]	; 0xd8
   1341c:	ldrd	r0, [sp, #112]	; 0x70
   13420:	cmp	r1, r3
   13424:	cmpeq	r0, r2
   13428:	bne	133b0 <__assert_fail@plt+0xdec>
   1342c:	ldrd	r2, [sp, #120]	; 0x78
   13430:	ldrd	r0, [sp, #16]
   13434:	cmp	r1, r3
   13438:	cmpeq	r0, r2
   1343c:	bne	133b0 <__assert_fail@plt+0xdec>
   13440:	mov	r2, #5
   13444:	ldr	r1, [pc, #692]	; 13700 <__assert_fail@plt+0x113c>
   13448:	mov	r0, #0
   1344c:	bl	12084 <dcgettext@plt>
   13450:	str	r4, [sp]
   13454:	mov	r3, r0
   13458:	ldr	r2, [pc, #676]	; 13704 <__assert_fail@plt+0x1140>
   1345c:	mov	r1, #0
   13460:	mov	r0, #1
   13464:	bl	121bc <error@plt>
   13468:	cmp	r0, #0
   1346c:	beq	1366c <__assert_fail@plt+0x10a8>
   13470:	mov	r0, r7
   13474:	bl	21334 <__assert_fail@plt+0xed70>
   13478:	mov	r7, r0
   1347c:	mov	r3, #0
   13480:	str	r3, [sp, #8]
   13484:	b	13238 <__assert_fail@plt+0xc74>
   13488:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   1348c:	ldr	r3, [sp, #120]	; 0x78
   13490:	cmp	r3, #3
   13494:	beq	134fc <__assert_fail@plt+0xf38>
   13498:	cmp	r3, #4
   1349c:	beq	134bc <__assert_fail@plt+0xef8>
   134a0:	cmp	r3, #2
   134a4:	beq	135c0 <__assert_fail@plt+0xffc>
   134a8:	ldr	r3, [pc, #576]	; 136f0 <__assert_fail@plt+0x112c>
   134ac:	ldr	r2, [pc, #596]	; 13708 <__assert_fail@plt+0x1144>
   134b0:	ldr	r1, [pc, #576]	; 136f8 <__assert_fail@plt+0x1134>
   134b4:	ldr	r0, [pc, #592]	; 1370c <__assert_fail@plt+0x1148>
   134b8:	bl	125c4 <__assert_fail@plt>
   134bc:	bl	12318 <__errno_location@plt>
   134c0:	ldr	r5, [r0]
   134c4:	mov	r2, #5
   134c8:	ldr	r1, [pc, #576]	; 13710 <__assert_fail@plt+0x114c>
   134cc:	mov	r0, #0
   134d0:	bl	12084 <dcgettext@plt>
   134d4:	mov	r3, r4
   134d8:	mov	r2, r0
   134dc:	mov	r1, r5
   134e0:	mov	r0, #0
   134e4:	bl	121bc <error@plt>
   134e8:	mov	r2, #1
   134ec:	ldr	r3, [pc, #408]	; 1368c <__assert_fail@plt+0x10c8>
   134f0:	str	r2, [r3, #28]
   134f4:	mov	sl, #0
   134f8:	b	135c0 <__assert_fail@plt+0xffc>
   134fc:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   13500:	mov	r1, r5
   13504:	mov	r0, #0
   13508:	bl	18a20 <__assert_fail@plt+0x645c>
   1350c:	mov	r3, r0
   13510:	ldr	r2, [pc, #452]	; 136dc <__assert_fail@plt+0x1118>
   13514:	mov	r1, #2
   13518:	mov	r0, #0
   1351c:	bl	121bc <error@plt>
   13520:	mov	r3, #1
   13524:	str	r3, [r9, #28]
   13528:	mov	sl, #0
   1352c:	add	r1, sp, #120	; 0x78
   13530:	mov	r0, r7
   13534:	bl	21390 <__assert_fail@plt+0xedcc>
   13538:	subs	r5, r0, #0
   1353c:	beq	1348c <__assert_fail@plt+0xec8>
   13540:	ldrb	r3, [r5]
   13544:	cmp	r3, #0
   13548:	bne	13594 <__assert_fail@plt+0xfd0>
   1354c:	ldr	r3, [r8, #76]	; 0x4c
   13550:	cmp	r3, #0
   13554:	beq	13500 <__assert_fail@plt+0xf3c>
   13558:	mov	r0, r7
   1355c:	bl	2142c <__assert_fail@plt+0xee68>
   13560:	mov	r5, r0
   13564:	mov	r2, #5
   13568:	mov	r1, fp
   1356c:	mov	r0, #0
   13570:	bl	12084 <dcgettext@plt>
   13574:	str	r0, [sp, #4]
   13578:	str	r5, [sp]
   1357c:	mov	r3, r4
   13580:	mov	r2, r6
   13584:	mov	r1, #0
   13588:	mov	r0, r1
   1358c:	bl	121bc <error@plt>
   13590:	b	13520 <__assert_fail@plt+0xf5c>
   13594:	ldr	r3, [r8, #76]	; 0x4c
   13598:	cmp	r3, #0
   1359c:	beq	13620 <__assert_fail@plt+0x105c>
   135a0:	mov	r0, r5
   135a4:	bl	122d0 <strlen@plt>
   135a8:	str	r0, [r9, #20]
   135ac:	mov	r0, r5
   135b0:	bl	12918 <__assert_fail@plt+0x354>
   135b4:	cmp	r0, #0
   135b8:	bne	1352c <__assert_fail@plt+0xf68>
   135bc:	mov	sl, r0
   135c0:	mov	r0, r7
   135c4:	bl	2144c <__assert_fail@plt+0xee88>
   135c8:	cmp	sl, #0
   135cc:	beq	13610 <__assert_fail@plt+0x104c>
   135d0:	ldr	r3, [pc, #188]	; 13694 <__assert_fail@plt+0x10d0>
   135d4:	ldr	r3, [r3, #76]	; 0x4c
   135d8:	cmp	r3, #0
   135dc:	beq	13604 <__assert_fail@plt+0x1040>
   135e0:	ldr	r5, [sp, #8]
   135e4:	mov	r0, r5
   135e8:	bl	11fc4 <ferror@plt>
   135ec:	cmp	r0, #0
   135f0:	bne	13638 <__assert_fail@plt+0x1074>
   135f4:	mov	r0, r5
   135f8:	bl	123cc <fclose@plt>
   135fc:	cmp	r0, #0
   13600:	bne	13638 <__assert_fail@plt+0x1074>
   13604:	ldr	r0, [sp, #12]
   13608:	bl	14f18 <__assert_fail@plt+0x2954>
   1360c:	bl	18e08 <__assert_fail@plt+0x6844>
   13610:	ldr	r3, [pc, #116]	; 1368c <__assert_fail@plt+0x10c8>
   13614:	ldr	r0, [r3, #28]
   13618:	add	sp, sp, #228	; 0xe4
   1361c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13620:	mov	r1, #1
   13624:	mov	r0, r5
   13628:	bl	1839c <__assert_fail@plt+0x5dd8>
   1362c:	cmp	r0, #0
   13630:	beq	135a0 <__assert_fail@plt+0xfdc>
   13634:	b	135c0 <__assert_fail@plt+0xffc>
   13638:	mov	r2, #5
   1363c:	ldr	r1, [pc, #208]	; 13714 <__assert_fail@plt+0x1150>
   13640:	mov	r0, #0
   13644:	bl	12084 <dcgettext@plt>
   13648:	mov	r3, r4
   1364c:	mov	r2, r0
   13650:	mov	r1, #0
   13654:	mov	r0, #1
   13658:	bl	121bc <error@plt>
   1365c:	ldr	r3, [pc, #48]	; 13694 <__assert_fail@plt+0x10d0>
   13660:	ldr	r4, [r3, #76]	; 0x4c
   13664:	cmp	r4, #0
   13668:	bne	131dc <__assert_fail@plt+0xc18>
   1366c:	add	r0, sp, #224	; 0xe0
   13670:	mov	r3, #46	; 0x2e
   13674:	strh	r3, [r0, #-104]!	; 0xffffff98
   13678:	bl	12918 <__assert_fail@plt+0x354>
   1367c:	cmp	r0, #0
   13680:	beq	13610 <__assert_fail@plt+0x104c>
   13684:	b	13604 <__assert_fail@plt+0x1040>
   13688:	strdeq	r2, [r4], -ip
   1368c:	andeq	r9, r5, r0, asr #28
   13690:	andeq	r2, r4, r4, lsl #18
   13694:	andeq	r9, r5, ip, ror #28
   13698:	andeq	r4, r4, r0, lsl r3
   1369c:	andeq	r6, r4, r8, ror #16
   136a0:	andeq	r2, r4, r4, lsr r9
   136a4:	andeq	r1, r2, r0, lsr #13
   136a8:	andeq	r8, r1, r4, ror #4
   136ac:	andeq	r2, r4, ip, asr #19
   136b0:	andeq	r2, r4, r4, lsr #20
   136b4:	andeq	r9, r5, r0, asr r5
   136b8:	andeq	r2, r4, r0, lsl #22
   136bc:	andeq	r2, r4, r0, lsr #22
   136c0:	andeq	r2, r4, r8, lsl #18
   136c4:	andeq	r2, r4, ip, asr #18
   136c8:	andeq	r9, r5, r8, asr #10
   136cc:	andeq	r9, r5, r8, lsl #29
   136d0:	andeq	r2, r4, r0, ror r9
   136d4:	andeq	r2, r4, r4, lsl #19
   136d8:	muleq	r4, r8, r9
   136dc:	andeq	r6, r4, r4, lsl #24
   136e0:	ldrdeq	r2, [r4], -r0
   136e4:	andeq	r7, r4, r0, asr #27
   136e8:			; <UNDEFINED> instruction: 0x000484b0
   136ec:	andeq	r2, r4, r8, lsr sl
   136f0:	andeq	r2, r4, r8, lsr #11
   136f4:	andeq	r0, r0, r2, ror #4
   136f8:	andeq	r2, r4, r0, asr #11
   136fc:	andeq	r2, r4, r4, asr sl
   13700:	andeq	r2, r4, ip, asr sl
   13704:	andeq	r2, r4, r0, asr #21
   13708:	andeq	r0, r0, r3, lsr #5
   1370c:	ldrdeq	r2, [r4], -r8
   13710:	andeq	r2, r4, r8, asr #21
   13714:	andeq	r2, r4, ip, lsr #22
   13718:	ldr	r3, [pc, #12]	; 1372c <__assert_fail@plt+0x1168>
   1371c:	ldr	r3, [r3]
   13720:	str	r3, [r0]
   13724:	mov	r0, #1
   13728:	bx	lr
   1372c:	andeq	r9, r5, r8, lsl #5
   13730:	ldr	r3, [pc, #88]	; 13790 <__assert_fail@plt+0x11cc>
   13734:	ldrb	r3, [r3]
   13738:	cmp	r3, #0
   1373c:	beq	13770 <__assert_fail@plt+0x11ac>
   13740:	ldr	r3, [pc, #76]	; 13794 <__assert_fail@plt+0x11d0>
   13744:	ldrb	r3, [r3, #4]
   13748:	cmp	r3, #0
   1374c:	beq	13778 <__assert_fail@plt+0x11b4>
   13750:	cmp	r1, #0
   13754:	beq	13770 <__assert_fail@plt+0x11ac>
   13758:	ldr	r3, [r1, #16]
   1375c:	and	r3, r3, #61440	; 0xf000
   13760:	cmp	r3, #16384	; 0x4000
   13764:	moveq	r2, #1
   13768:	ldreq	r3, [pc, #36]	; 13794 <__assert_fail@plt+0x11d0>
   1376c:	strbeq	r2, [r3, #24]
   13770:	mov	r0, #1
   13774:	bx	lr
   13778:	push	{r4, lr}
   1377c:	ldr	r3, [pc, #20]	; 13798 <__assert_fail@plt+0x11d4>
   13780:	ldr	r2, [pc, #20]	; 1379c <__assert_fail@plt+0x11d8>
   13784:	ldr	r1, [pc, #20]	; 137a0 <__assert_fail@plt+0x11dc>
   13788:	ldr	r0, [pc, #20]	; 137a4 <__assert_fail@plt+0x11e0>
   1378c:	bl	125c4 <__assert_fail@plt>
   13790:	andeq	r9, r5, ip, ror #28
   13794:	andeq	r9, r5, r0, asr #28
   13798:	andeq	r2, r4, r0, asr #22
   1379c:	andeq	r0, r0, r5, asr r3
   137a0:			; <UNDEFINED> instruction: 0x00042bb0
   137a4:			; <UNDEFINED> instruction: 0x00042bb8
   137a8:	push	{r4, r5, lr}
   137ac:	sub	sp, sp, #20
   137b0:	add	ip, sp, #16
   137b4:	stmdb	ip, {r0, r1}
   137b8:	stm	sp, {r2, r3}
   137bc:	ldr	r0, [sp, #8]
   137c0:	ldr	r4, [sp, #12]
   137c4:	mov	r1, r2
   137c8:	mov	r5, r3
   137cc:	cmp	r0, r2
   137d0:	beq	13804 <__assert_fail@plt+0x1240>
   137d4:	bl	1239c <difftime@plt>
   137d8:	sub	r4, r4, r5
   137dc:	vmov	s15, r4
   137e0:	vcvt.f64.s32	d7, s15
   137e4:	vldr	d6, [pc, #44]	; 13818 <__assert_fail@plt+0x1254>
   137e8:	vmla.f64	d0, d7, d6
   137ec:	vcmpe.f64	d0, #0.0
   137f0:	vmrs	APSR_nzcv, fpscr
   137f4:	mvnmi	r0, #0
   137f8:	movpl	r0, #1
   137fc:	add	sp, sp, #20
   13800:	pop	{r4, r5, pc}
   13804:	cmp	r3, r4
   13808:	moveq	r0, #0
   1380c:	bne	137d4 <__assert_fail@plt+0x1210>
   13810:	b	137fc <__assert_fail@plt+0x1238>
   13814:	nop			; (mov r0, r0)
   13818:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1381c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13820:	push	{r4, r5, r6, lr}
   13824:	mov	r5, r0
   13828:	mov	r6, r1
   1382c:	mov	r4, r2
   13830:	ldr	r2, [r2, #156]	; 0x9c
   13834:	cmp	r2, #0
   13838:	beq	13848 <__assert_fail@plt+0x1284>
   1383c:	bl	18cdc <__assert_fail@plt+0x6718>
   13840:	cmp	r0, #0
   13844:	popeq	{r4, r5, r6, pc}
   13848:	ldr	r2, [r4, #160]	; 0xa0
   1384c:	mov	r1, r6
   13850:	mov	r0, r5
   13854:	bl	18cdc <__assert_fail@plt+0x6718>
   13858:	pop	{r4, r5, r6, pc}
   1385c:	push	{r4, r5, r6, lr}
   13860:	mov	r5, r0
   13864:	mov	r6, r1
   13868:	mov	r4, r2
   1386c:	ldr	r2, [r2, #156]	; 0x9c
   13870:	cmp	r2, #0
   13874:	beq	13884 <__assert_fail@plt+0x12c0>
   13878:	bl	18cdc <__assert_fail@plt+0x6718>
   1387c:	cmp	r0, #0
   13880:	popne	{r4, r5, r6, pc}
   13884:	ldr	r2, [r4, #160]	; 0xa0
   13888:	mov	r1, r6
   1388c:	mov	r0, r5
   13890:	bl	18cdc <__assert_fail@plt+0x6718>
   13894:	pop	{r4, r5, r6, pc}
   13898:	push	{r4, r5, r6, r7, r8, lr}
   1389c:	ldr	ip, [r1, #16]
   138a0:	and	ip, ip, #61440	; 0xf000
   138a4:	cmp	ip, #40960	; 0xa000
   138a8:	movne	r4, #0
   138ac:	beq	138b8 <__assert_fail@plt+0x12f4>
   138b0:	mov	r0, r4
   138b4:	pop	{r4, r5, r6, r7, r8, pc}
   138b8:	mov	r5, r3
   138bc:	mov	r4, r2
   138c0:	mov	r6, r0
   138c4:	ldr	r3, [pc, #96]	; 1392c <__assert_fail@plt+0x1368>
   138c8:	ldr	r1, [r3, #12]
   138cc:	ldr	r0, [r3, #16]
   138d0:	bl	21308 <__assert_fail@plt+0xed44>
   138d4:	subs	r7, r0, #0
   138d8:	beq	13908 <__assert_fail@plt+0x1344>
   138dc:	cmp	r5, #0
   138e0:	movne	r2, #16
   138e4:	moveq	r2, #0
   138e8:	mov	r1, r7
   138ec:	ldr	r0, [r4, #40]	; 0x28
   138f0:	bl	121e0 <fnmatch@plt>
   138f4:	clz	r4, r0
   138f8:	lsr	r4, r4, #5
   138fc:	mov	r0, r7
   13900:	bl	2e3fc <__assert_fail@plt+0x1be38>
   13904:	b	138b0 <__assert_fail@plt+0x12ec>
   13908:	bl	12318 <__errno_location@plt>
   1390c:	mov	r1, r6
   13910:	ldr	r0, [r0]
   13914:	bl	18ad8 <__assert_fail@plt+0x6514>
   13918:	mov	r2, #1
   1391c:	ldr	r3, [pc, #8]	; 1392c <__assert_fail@plt+0x1368>
   13920:	str	r2, [r3, #28]
   13924:	mov	r4, #0
   13928:	b	138fc <__assert_fail@plt+0x1338>
   1392c:	andeq	r9, r5, r0, asr #28
   13930:	push	{r4, r5, r6, lr}
   13934:	mov	r5, r0
   13938:	mov	r6, r1
   1393c:	ldr	r3, [pc, #116]	; 139b8 <__assert_fail@plt+0x13f4>
   13940:	ldr	r0, [r3]
   13944:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   13948:	ldr	r3, [pc, #108]	; 139bc <__assert_fail@plt+0x13f8>
   1394c:	ldr	r4, [r3]
   13950:	mov	r2, #5
   13954:	ldr	r1, [pc, #100]	; 139c0 <__assert_fail@plt+0x13fc>
   13958:	mov	r0, #0
   1395c:	bl	12084 <dcgettext@plt>
   13960:	mov	r3, r6
   13964:	mov	r2, r5
   13968:	mov	r1, r0
   1396c:	mov	r0, r4
   13970:	bl	1230c <fprintf@plt>
   13974:	cmp	r0, #0
   13978:	blt	13990 <__assert_fail@plt+0x13cc>
   1397c:	ldr	r3, [pc, #56]	; 139bc <__assert_fail@plt+0x13f8>
   13980:	ldr	r0, [r3]
   13984:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   13988:	bl	2dd7c <__assert_fail@plt+0x1b7b8>
   1398c:	pop	{r4, r5, r6, pc}
   13990:	bl	12318 <__errno_location@plt>
   13994:	ldr	r4, [r0]
   13998:	mov	r2, #5
   1399c:	ldr	r1, [pc, #32]	; 139c4 <__assert_fail@plt+0x1400>
   139a0:	mov	r0, #0
   139a4:	bl	12084 <dcgettext@plt>
   139a8:	mov	r2, r0
   139ac:	mov	r1, r4
   139b0:	mov	r0, #1
   139b4:	bl	121bc <error@plt>
   139b8:	andeq	r9, r5, r4, asr r5
   139bc:	andeq	r9, r5, r8, asr #10
   139c0:	andeq	r2, r4, r8, asr #23
   139c4:	ldrdeq	r2, [r4], -ip
   139c8:	push	{r4, lr}
   139cc:	bl	18e08 <__assert_fail@plt+0x6844>
   139d0:	ldr	r3, [pc, #4]	; 139dc <__assert_fail@plt+0x1418>
   139d4:	ldr	r0, [r3, #28]
   139d8:	bl	122a0 <exit@plt>
   139dc:	andeq	r9, r5, r0, asr #28
   139e0:	push	{r4, r5, r6, lr}
   139e4:	sub	sp, sp, #8
   139e8:	add	ip, sp, #8
   139ec:	stmdb	ip, {r0, r1}
   139f0:	mov	r4, r2
   139f4:	mov	r5, r3
   139f8:	ldr	r3, [r2, #44]	; 0x2c
   139fc:	cmp	r3, #1
   13a00:	beq	13a4c <__assert_fail@plt+0x1488>
   13a04:	bcc	13a24 <__assert_fail@plt+0x1460>
   13a08:	cmp	r3, #2
   13a0c:	beq	13a68 <__assert_fail@plt+0x14a4>
   13a10:	ldr	r3, [pc, #176]	; 13ac8 <__assert_fail@plt+0x1504>
   13a14:	mov	r2, #138	; 0x8a
   13a18:	ldr	r1, [pc, #172]	; 13acc <__assert_fail@plt+0x1508>
   13a1c:	ldr	r0, [pc, #172]	; 13ad0 <__assert_fail@plt+0x150c>
   13a20:	bl	125c4 <__assert_fail@plt>
   13a24:	add	r4, r2, #48	; 0x30
   13a28:	ldm	r4, {r2, r3}
   13a2c:	add	r1, sp, #8
   13a30:	ldmdb	r1, {r0, r1}
   13a34:	bl	137a8 <__assert_fail@plt+0x11e4>
   13a38:	cmp	r0, #0
   13a3c:	movle	r0, #0
   13a40:	movgt	r0, #1
   13a44:	add	sp, sp, #8
   13a48:	pop	{r4, r5, r6, pc}
   13a4c:	add	r4, r2, #48	; 0x30
   13a50:	ldm	r4, {r2, r3}
   13a54:	add	r1, sp, #8
   13a58:	ldmdb	r1, {r0, r1}
   13a5c:	bl	137a8 <__assert_fail@plt+0x11e4>
   13a60:	lsr	r0, r0, #31
   13a64:	b	13a44 <__assert_fail@plt+0x1480>
   13a68:	ldr	r6, [sp, #4]
   13a6c:	ldr	r1, [r2, #48]	; 0x30
   13a70:	ldr	r0, [sp]
   13a74:	bl	1239c <difftime@plt>
   13a78:	ldr	r3, [r4, #52]	; 0x34
   13a7c:	sub	r6, r6, r3
   13a80:	vmov	s15, r6
   13a84:	vcvt.f64.s32	d7, s15
   13a88:	vldr	d6, [pc, #48]	; 13ac0 <__assert_fail@plt+0x14fc>
   13a8c:	vmla.f64	d0, d7, d6
   13a90:	vcmpe.f64	d0, #0.0
   13a94:	vmrs	APSR_nzcv, fpscr
   13a98:	movle	r0, #0
   13a9c:	ble	13a44 <__assert_fail@plt+0x1480>
   13aa0:	vmov	s15, r5
   13aa4:	vcvt.f64.s32	d7, s15
   13aa8:	vcmpe.f64	d7, d0
   13aac:	vmrs	APSR_nzcv, fpscr
   13ab0:	movge	r0, #1
   13ab4:	movlt	r0, #0
   13ab8:	b	13a44 <__assert_fail@plt+0x1480>
   13abc:	nop			; (mov r0, r0)
   13ac0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13ac4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13ac8:	andeq	r2, r4, ip, asr #22
   13acc:			; <UNDEFINED> instruction: 0x00042bb0
   13ad0:	andeq	r6, r4, r8, asr sp
   13ad4:	push	{lr}		; (str lr, [sp, #-4]!)
   13ad8:	sub	sp, sp, #12
   13adc:	add	r1, r1, #72	; 0x48
   13ae0:	ldm	r1, {r0, r1}
   13ae4:	stm	sp, {r0, r1}
   13ae8:	mov	r3, #60	; 0x3c
   13aec:	bl	139e0 <__assert_fail@plt+0x141c>
   13af0:	add	sp, sp, #12
   13af4:	pop	{pc}		; (ldr pc, [sp], #4)
   13af8:	push	{lr}		; (str lr, [sp, #-4]!)
   13afc:	sub	sp, sp, #12
   13b00:	ldr	r3, [r2, #44]	; 0x2c
   13b04:	cmp	r3, #0
   13b08:	bne	13b38 <__assert_fail@plt+0x1574>
   13b0c:	add	r1, r1, #72	; 0x48
   13b10:	ldm	r1, {r0, r1}
   13b14:	stm	sp, {r0, r1}
   13b18:	add	r2, r2, #48	; 0x30
   13b1c:	ldm	r2, {r2, r3}
   13b20:	bl	137a8 <__assert_fail@plt+0x11e4>
   13b24:	cmp	r0, #0
   13b28:	movle	r0, #0
   13b2c:	movgt	r0, #1
   13b30:	add	sp, sp, #12
   13b34:	pop	{pc}		; (ldr pc, [sp], #4)
   13b38:	ldr	r3, [pc, #12]	; 13b4c <__assert_fail@plt+0x1588>
   13b3c:	mov	r2, #166	; 0xa6
   13b40:	ldr	r1, [pc, #8]	; 13b50 <__assert_fail@plt+0x158c>
   13b44:	ldr	r0, [pc, #8]	; 13b54 <__assert_fail@plt+0x1590>
   13b48:	bl	125c4 <__assert_fail@plt>
   13b4c:	andeq	r2, r4, ip, asr fp
   13b50:			; <UNDEFINED> instruction: 0x00042bb0
   13b54:	strdeq	r2, [r4], -ip
   13b58:	push	{lr}		; (str lr, [sp, #-4]!)
   13b5c:	sub	sp, sp, #12
   13b60:	add	r1, r1, #72	; 0x48
   13b64:	ldm	r1, {r0, r1}
   13b68:	stm	sp, {r0, r1}
   13b6c:	ldr	r3, [pc, #8]	; 13b7c <__assert_fail@plt+0x15b8>
   13b70:	bl	139e0 <__assert_fail@plt+0x141c>
   13b74:	add	sp, sp, #12
   13b78:	pop	{pc}		; (ldr pc, [sp], #4)
   13b7c:	andeq	r5, r1, r0, lsl #3
   13b80:	mov	r0, #1
   13b84:	bx	lr
   13b88:	push	{lr}		; (str lr, [sp, #-4]!)
   13b8c:	sub	sp, sp, #12
   13b90:	add	r1, r1, #88	; 0x58
   13b94:	ldm	r1, {r0, r1}
   13b98:	stm	sp, {r0, r1}
   13b9c:	mov	r3, #60	; 0x3c
   13ba0:	bl	139e0 <__assert_fail@plt+0x141c>
   13ba4:	add	sp, sp, #12
   13ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bac:	push	{lr}		; (str lr, [sp, #-4]!)
   13bb0:	sub	sp, sp, #12
   13bb4:	ldr	r3, [r2, #44]	; 0x2c
   13bb8:	cmp	r3, #0
   13bbc:	bne	13bec <__assert_fail@plt+0x1628>
   13bc0:	add	r1, r1, #88	; 0x58
   13bc4:	ldm	r1, {r0, r1}
   13bc8:	stm	sp, {r0, r1}
   13bcc:	add	r2, r2, #48	; 0x30
   13bd0:	ldm	r2, {r2, r3}
   13bd4:	bl	137a8 <__assert_fail@plt+0x11e4>
   13bd8:	cmp	r0, #0
   13bdc:	movle	r0, #0
   13be0:	movgt	r0, #1
   13be4:	add	sp, sp, #12
   13be8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bec:	ldr	r3, [pc, #12]	; 13c00 <__assert_fail@plt+0x163c>
   13bf0:	mov	r2, #199	; 0xc7
   13bf4:	ldr	r1, [pc, #8]	; 13c04 <__assert_fail@plt+0x1640>
   13bf8:	ldr	r0, [pc, #8]	; 13c08 <__assert_fail@plt+0x1644>
   13bfc:	bl	125c4 <__assert_fail@plt>
   13c00:	andeq	r2, r4, r8, ror #22
   13c04:			; <UNDEFINED> instruction: 0x00042bb0
   13c08:	strdeq	r2, [r4], -ip
   13c0c:	push	{r4, r5, r6, lr}
   13c10:	mov	r5, r0
   13c14:	mov	r6, r1
   13c18:	mov	r4, r2
   13c1c:	ldr	r2, [r2, #156]	; 0x9c
   13c20:	cmp	r2, #0
   13c24:	beq	13c2c <__assert_fail@plt+0x1668>
   13c28:	bl	18cdc <__assert_fail@plt+0x6718>
   13c2c:	ldr	r2, [r4, #160]	; 0xa0
   13c30:	mov	r1, r6
   13c34:	mov	r0, r5
   13c38:	bl	18cdc <__assert_fail@plt+0x6718>
   13c3c:	pop	{r4, r5, r6, pc}
   13c40:	push	{lr}		; (str lr, [sp, #-4]!)
   13c44:	sub	sp, sp, #12
   13c48:	add	r1, r1, #88	; 0x58
   13c4c:	ldm	r1, {r0, r1}
   13c50:	stm	sp, {r0, r1}
   13c54:	ldr	r3, [pc, #8]	; 13c64 <__assert_fail@plt+0x16a0>
   13c58:	bl	139e0 <__assert_fail@plt+0x141c>
   13c5c:	add	sp, sp, #12
   13c60:	pop	{pc}		; (ldr pc, [sp], #4)
   13c64:	andeq	r5, r1, r0, lsl #3
   13c68:	push	{r4, r5, r6, lr}
   13c6c:	mov	r6, r0
   13c70:	mov	r5, r1
   13c74:	ldr	r3, [pc, #280]	; 13d94 <__assert_fail@plt+0x17d0>
   13c78:	ldr	r4, [r3, #12]
   13c7c:	ldr	r1, [pc, #276]	; 13d98 <__assert_fail@plt+0x17d4>
   13c80:	mov	r0, r4
   13c84:	bl	11f1c <strcmp@plt>
   13c88:	cmp	r0, #0
   13c8c:	beq	13d84 <__assert_fail@plt+0x17c0>
   13c90:	ldr	r3, [pc, #252]	; 13d94 <__assert_fail@plt+0x17d0>
   13c94:	ldrb	r3, [r3, #4]
   13c98:	cmp	r3, #0
   13c9c:	moveq	r5, #0
   13ca0:	beq	13cb8 <__assert_fail@plt+0x16f4>
   13ca4:	ldr	r5, [r5, #16]
   13ca8:	and	r5, r5, #61440	; 0xf000
   13cac:	cmp	r5, #16384	; 0x4000
   13cb0:	moveq	r5, #512	; 0x200
   13cb4:	movne	r5, #0
   13cb8:	mov	r2, r5
   13cbc:	mov	r1, r4
   13cc0:	ldr	r3, [pc, #204]	; 13d94 <__assert_fail@plt+0x17d0>
   13cc4:	ldr	r0, [r3, #16]
   13cc8:	bl	11f70 <unlinkat@plt>
   13ccc:	cmp	r0, #0
   13cd0:	beq	13d8c <__assert_fail@plt+0x17c8>
   13cd4:	bl	12318 <__errno_location@plt>
   13cd8:	mov	r4, r0
   13cdc:	ldr	r3, [r0]
   13ce0:	cmp	r3, #2
   13ce4:	beq	13d44 <__assert_fail@plt+0x1780>
   13ce8:	cmp	r3, #21
   13cec:	bne	13cf8 <__assert_fail@plt+0x1734>
   13cf0:	tst	r5, #512	; 0x200
   13cf4:	beq	13d60 <__assert_fail@plt+0x179c>
   13cf8:	ldr	r4, [r4]
   13cfc:	mov	r2, #5
   13d00:	ldr	r1, [pc, #148]	; 13d9c <__assert_fail@plt+0x17d8>
   13d04:	mov	r0, #0
   13d08:	bl	12084 <dcgettext@plt>
   13d0c:	mov	r5, r0
   13d10:	mov	r1, r6
   13d14:	mov	r0, #0
   13d18:	bl	18a20 <__assert_fail@plt+0x645c>
   13d1c:	mov	r3, r0
   13d20:	mov	r2, r5
   13d24:	mov	r1, r4
   13d28:	mov	r0, #0
   13d2c:	bl	121bc <error@plt>
   13d30:	mov	r2, #1
   13d34:	ldr	r3, [pc, #88]	; 13d94 <__assert_fail@plt+0x17d0>
   13d38:	str	r2, [r3, #28]
   13d3c:	mov	r0, #0
   13d40:	pop	{r4, r5, r6, pc}
   13d44:	ldr	r3, [pc, #84]	; 13da0 <__assert_fail@plt+0x17dc>
   13d48:	ldrb	r0, [r3, #14]
   13d4c:	cmp	r0, #0
   13d50:	beq	13cf8 <__assert_fail@plt+0x1734>
   13d54:	mov	r3, #0
   13d58:	str	r3, [r4]
   13d5c:	pop	{r4, r5, r6, pc}
   13d60:	ldr	r3, [pc, #44]	; 13d94 <__assert_fail@plt+0x17d0>
   13d64:	mov	r2, #512	; 0x200
   13d68:	ldr	r1, [r3, #12]
   13d6c:	ldr	r0, [r3, #16]
   13d70:	bl	11f70 <unlinkat@plt>
   13d74:	cmp	r0, #0
   13d78:	bne	13cf8 <__assert_fail@plt+0x1734>
   13d7c:	mov	r0, #1
   13d80:	pop	{r4, r5, r6, pc}
   13d84:	mov	r0, #1
   13d88:	pop	{r4, r5, r6, pc}
   13d8c:	mov	r0, #1
   13d90:	pop	{r4, r5, r6, pc}
   13d94:	andeq	r9, r5, r0, asr #28
   13d98:	andeq	r6, r4, r0, asr #3
   13d9c:	andeq	r2, r4, r4, lsr #24
   13da0:	andeq	r9, r5, ip, ror #28
   13da4:	push	{r4, r5, r6, r7, r8, lr}
   13da8:	ldr	r3, [r1, #16]
   13dac:	and	r3, r3, #61440	; 0xf000
   13db0:	cmp	r3, #16384	; 0x4000
   13db4:	beq	13dcc <__assert_fail@plt+0x1808>
   13db8:	cmp	r3, #32768	; 0x8000
   13dbc:	movne	r4, #0
   13dc0:	beq	13f8c <__assert_fail@plt+0x19c8>
   13dc4:	mov	r0, r4
   13dc8:	pop	{r4, r5, r6, r7, r8, pc}
   13dcc:	mov	r6, r0
   13dd0:	bl	12318 <__errno_location@plt>
   13dd4:	mov	r7, r0
   13dd8:	mov	r3, #0
   13ddc:	str	r3, [r0]
   13de0:	ldr	r3, [pc, #444]	; 13fa4 <__assert_fail@plt+0x19e0>
   13de4:	ldr	r2, [pc, #444]	; 13fa8 <__assert_fail@plt+0x19e4>
   13de8:	ldr	r1, [r3, #12]
   13dec:	ldr	r0, [r3, #16]
   13df0:	bl	258c8 <__assert_fail@plt+0x13304>
   13df4:	subs	r4, r0, #0
   13df8:	blt	13e38 <__assert_fail@plt+0x1874>
   13dfc:	mov	r0, r4
   13e00:	bl	12498 <fdopendir@plt>
   13e04:	subs	r5, r0, #0
   13e08:	beq	13e70 <__assert_fail@plt+0x18ac>
   13e0c:	mov	r3, #0
   13e10:	str	r3, [r7]
   13e14:	mov	r0, r5
   13e18:	bl	1248c <readdir64@plt>
   13e1c:	cmp	r0, #0
   13e20:	beq	13f40 <__assert_fail@plt+0x197c>
   13e24:	ldrb	r3, [r0, #19]
   13e28:	cmp	r3, #46	; 0x2e
   13e2c:	beq	13ec8 <__assert_fail@plt+0x1904>
   13e30:	mov	r4, #0
   13e34:	b	13eec <__assert_fail@plt+0x1928>
   13e38:	ldr	r4, [r7]
   13e3c:	mov	r1, r6
   13e40:	mov	r0, #0
   13e44:	bl	18a20 <__assert_fail@plt+0x645c>
   13e48:	mov	r3, r0
   13e4c:	ldr	r2, [pc, #344]	; 13fac <__assert_fail@plt+0x19e8>
   13e50:	mov	r1, r4
   13e54:	mov	r0, #0
   13e58:	bl	121bc <error@plt>
   13e5c:	mov	r2, #1
   13e60:	ldr	r3, [pc, #316]	; 13fa4 <__assert_fail@plt+0x19e0>
   13e64:	str	r2, [r3, #28]
   13e68:	mov	r4, #0
   13e6c:	b	13dc4 <__assert_fail@plt+0x1800>
   13e70:	ldr	r5, [r7]
   13e74:	mov	r1, r6
   13e78:	bl	18a20 <__assert_fail@plt+0x645c>
   13e7c:	mov	r3, r0
   13e80:	ldr	r2, [pc, #292]	; 13fac <__assert_fail@plt+0x19e8>
   13e84:	mov	r1, r5
   13e88:	mov	r0, #0
   13e8c:	bl	121bc <error@plt>
   13e90:	mov	r2, #1
   13e94:	ldr	r3, [pc, #264]	; 13fa4 <__assert_fail@plt+0x19e0>
   13e98:	str	r2, [r3, #28]
   13e9c:	mov	r0, r4
   13ea0:	bl	1257c <close@plt>
   13ea4:	mov	r4, #0
   13ea8:	b	13dc4 <__assert_fail@plt+0x1800>
   13eac:	mov	r0, r5
   13eb0:	bl	1248c <readdir64@plt>
   13eb4:	cmp	r0, #0
   13eb8:	beq	13ee8 <__assert_fail@plt+0x1924>
   13ebc:	ldrb	r3, [r0, #19]
   13ec0:	cmp	r3, #46	; 0x2e
   13ec4:	bne	13f48 <__assert_fail@plt+0x1984>
   13ec8:	ldrb	r3, [r0, #20]
   13ecc:	cmp	r3, #0
   13ed0:	beq	13eac <__assert_fail@plt+0x18e8>
   13ed4:	ldrh	r3, [r0, #20]
   13ed8:	cmp	r3, #46	; 0x2e
   13edc:	beq	13eac <__assert_fail@plt+0x18e8>
   13ee0:	mov	r4, #0
   13ee4:	b	13eec <__assert_fail@plt+0x1928>
   13ee8:	mov	r4, #1
   13eec:	ldr	r8, [r7]
   13ef0:	cmp	r8, #0
   13ef4:	bne	13f50 <__assert_fail@plt+0x198c>
   13ef8:	mov	r0, r5
   13efc:	bl	12594 <closedir@plt>
   13f00:	cmp	r0, #0
   13f04:	beq	13dc4 <__assert_fail@plt+0x1800>
   13f08:	ldr	r4, [r7]
   13f0c:	mov	r1, r6
   13f10:	mov	r0, #0
   13f14:	bl	18a20 <__assert_fail@plt+0x645c>
   13f18:	mov	r3, r0
   13f1c:	ldr	r2, [pc, #136]	; 13fac <__assert_fail@plt+0x19e8>
   13f20:	mov	r1, r4
   13f24:	mov	r0, #0
   13f28:	bl	121bc <error@plt>
   13f2c:	mov	r2, #1
   13f30:	ldr	r3, [pc, #108]	; 13fa4 <__assert_fail@plt+0x19e0>
   13f34:	str	r2, [r3, #28]
   13f38:	mov	r4, #0
   13f3c:	b	13dc4 <__assert_fail@plt+0x1800>
   13f40:	mov	r4, #1
   13f44:	b	13eec <__assert_fail@plt+0x1928>
   13f48:	mov	r4, #0
   13f4c:	b	13eec <__assert_fail@plt+0x1928>
   13f50:	mov	r1, r6
   13f54:	mov	r0, #0
   13f58:	bl	18a20 <__assert_fail@plt+0x645c>
   13f5c:	mov	r3, r0
   13f60:	ldr	r2, [pc, #68]	; 13fac <__assert_fail@plt+0x19e8>
   13f64:	mov	r1, r8
   13f68:	mov	r0, #0
   13f6c:	bl	121bc <error@plt>
   13f70:	mov	r2, #1
   13f74:	ldr	r3, [pc, #40]	; 13fa4 <__assert_fail@plt+0x19e0>
   13f78:	str	r2, [r3, #28]
   13f7c:	mov	r0, r5
   13f80:	bl	12594 <closedir@plt>
   13f84:	mov	r4, #0
   13f88:	b	13dc4 <__assert_fail@plt+0x1800>
   13f8c:	ldr	r2, [r1, #48]	; 0x30
   13f90:	ldr	r3, [r1, #52]	; 0x34
   13f94:	orrs	r3, r2, r3
   13f98:	moveq	r4, #1
   13f9c:	movne	r4, #0
   13fa0:	b	13dc4 <__assert_fail@plt+0x1800>
   13fa4:	andeq	r9, r5, r0, asr #28
   13fa8:	andeq	r4, sl, r0, lsl #18
   13fac:	andeq	r6, r4, r4, lsl #24
   13fb0:	push	{r4, lr}
   13fb4:	bl	151cc <__assert_fail@plt+0x2c08>
   13fb8:	pop	{r4, pc}
   13fbc:	push	{r4, lr}
   13fc0:	ldr	r3, [pc, #8]	; 13fd0 <__assert_fail@plt+0x1a0c>
   13fc4:	ldr	r0, [r3, #12]
   13fc8:	bl	151cc <__assert_fail@plt+0x2c08>
   13fcc:	pop	{r4, pc}
   13fd0:	andeq	r9, r5, r0, asr #28
   13fd4:	mov	r0, #0
   13fd8:	bx	lr
   13fdc:	push	{lr}		; (str lr, [sp, #-4]!)
   13fe0:	sub	sp, sp, #20
   13fe4:	mov	r3, r2
   13fe8:	ldr	ip, [pc, #64]	; 14030 <__assert_fail@plt+0x1a6c>
   13fec:	ldr	r2, [ip, #12]
   13ff0:	ldr	ip, [ip, #16]
   13ff4:	ldr	lr, [r3, #44]	; 0x2c
   13ff8:	str	lr, [sp, #12]
   13ffc:	ldrb	r3, [r3, #32]
   14000:	str	r3, [sp, #8]
   14004:	ldr	r3, [pc, #40]	; 14034 <__assert_fail@plt+0x1a70>
   14008:	ldr	lr, [r3, #40]	; 0x28
   1400c:	str	lr, [sp, #4]
   14010:	ldr	r3, [r3, #20]
   14014:	str	r3, [sp]
   14018:	mov	r3, r1
   1401c:	mov	r1, ip
   14020:	bl	204ec <__assert_fail@plt+0xdf28>
   14024:	mov	r0, #1
   14028:	add	sp, sp, #20
   1402c:	pop	{pc}		; (ldr pc, [sp], #4)
   14030:	andeq	r9, r5, r0, asr #28
   14034:	andeq	r9, r5, ip, ror #28
   14038:	push	{lr}		; (str lr, [sp, #-4]!)
   1403c:	sub	sp, sp, #12
   14040:	mov	r3, r2
   14044:	ldrb	r2, [r2, #52]	; 0x34
   14048:	ldr	r1, [r3, #56]	; 0x38
   1404c:	ldr	ip, [r3, #44]	; 0x2c
   14050:	str	r0, [sp]
   14054:	ldr	r3, [pc, #16]	; 1406c <__assert_fail@plt+0x1aa8>
   14058:	mov	r0, ip
   1405c:	bl	20c3c <__assert_fail@plt+0xe678>
   14060:	mov	r0, #1
   14064:	add	sp, sp, #12
   14068:	pop	{pc}		; (ldr pc, [sp], #4)
   1406c:	andeq	r7, r4, r0, asr #27
   14070:	push	{r4, lr}
   14074:	ldr	r4, [r2, #44]	; 0x2c
   14078:	mov	r1, r4
   1407c:	bl	12558 <fputs@plt>
   14080:	mov	r1, r4
   14084:	mov	r0, #0
   14088:	bl	124b0 <putc@plt>
   1408c:	mov	r0, #1
   14090:	pop	{r4, pc}
   14094:	push	{r4, lr}
   14098:	mov	r3, r1
   1409c:	mov	r4, r2
   140a0:	mov	r1, r0
   140a4:	mov	r0, r3
   140a8:	bl	1b10c <__assert_fail@plt+0x8b48>
   140ac:	ldr	r1, [r4, #40]	; 0x28
   140b0:	bl	11f1c <strcmp@plt>
   140b4:	clz	r0, r0
   140b8:	lsr	r0, r0, #5
   140bc:	pop	{r4, pc}
   140c0:	ldr	r3, [r2, #40]	; 0x28
   140c4:	cmp	r3, #1
   140c8:	beq	14100 <__assert_fail@plt+0x1b3c>
   140cc:	bcc	140e0 <__assert_fail@plt+0x1b1c>
   140d0:	cmp	r3, #2
   140d4:	beq	14120 <__assert_fail@plt+0x1b5c>
   140d8:	mov	r0, #0
   140dc:	bx	lr
   140e0:	ldr	r0, [r1, #28]
   140e4:	mov	r1, #0
   140e8:	ldrd	r2, [r2, #48]	; 0x30
   140ec:	cmp	r1, r3
   140f0:	cmpeq	r0, r2
   140f4:	movhi	r0, #1
   140f8:	movls	r0, #0
   140fc:	bx	lr
   14100:	ldr	r0, [r1, #28]
   14104:	mov	r1, #0
   14108:	ldrd	r2, [r2, #48]	; 0x30
   1410c:	cmp	r1, r3
   14110:	cmpeq	r0, r2
   14114:	movcc	r0, #1
   14118:	movcs	r0, #0
   1411c:	bx	lr
   14120:	ldr	r0, [r1, #28]
   14124:	mov	r1, #0
   14128:	ldrd	r2, [r2, #48]	; 0x30
   1412c:	cmp	r3, r1
   14130:	cmpeq	r2, r0
   14134:	moveq	r0, #1
   14138:	movne	r0, #0
   1413c:	bx	lr
   14140:	ldr	r0, [r2, #40]	; 0x28
   14144:	ldr	r3, [r1, #28]
   14148:	cmp	r0, r3
   1414c:	movne	r0, #0
   14150:	moveq	r0, #1
   14154:	bx	lr
   14158:	push	{r4, lr}
   1415c:	mov	r3, #1
   14160:	bl	13898 <__assert_fail@plt+0x12d4>
   14164:	pop	{r4, pc}
   14168:	push	{r4, r5, r6, lr}
   1416c:	ldr	r5, [r2, #40]	; 0x28
   14170:	bl	21824 <__assert_fail@plt+0xf260>
   14174:	mov	r4, r0
   14178:	bl	21964 <__assert_fail@plt+0xf3a0>
   1417c:	mov	r2, #16
   14180:	mov	r1, r4
   14184:	mov	r0, r5
   14188:	bl	121e0 <fnmatch@plt>
   1418c:	mov	r5, r0
   14190:	mov	r0, r4
   14194:	bl	2e3fc <__assert_fail@plt+0x1be38>
   14198:	clz	r0, r5
   1419c:	lsr	r0, r0, #5
   141a0:	pop	{r4, r5, r6, pc}
   141a4:	ldr	r3, [r2, #40]	; 0x28
   141a8:	cmp	r3, #1
   141ac:	beq	141e0 <__assert_fail@plt+0x1c1c>
   141b0:	bcc	141c4 <__assert_fail@plt+0x1c00>
   141b4:	cmp	r3, #2
   141b8:	beq	141fc <__assert_fail@plt+0x1c38>
   141bc:	mov	r0, #0
   141c0:	bx	lr
   141c4:	ldrd	r0, [r1, #96]	; 0x60
   141c8:	ldrd	r2, [r2, #48]	; 0x30
   141cc:	cmp	r1, r3
   141d0:	cmpeq	r0, r2
   141d4:	movhi	r0, #1
   141d8:	movls	r0, #0
   141dc:	bx	lr
   141e0:	ldrd	r0, [r1, #96]	; 0x60
   141e4:	ldrd	r2, [r2, #48]	; 0x30
   141e8:	cmp	r1, r3
   141ec:	cmpeq	r0, r2
   141f0:	movcc	r0, #1
   141f4:	movcs	r0, #0
   141f8:	bx	lr
   141fc:	ldrd	r0, [r1, #96]	; 0x60
   14200:	ldrd	r2, [r2, #48]	; 0x30
   14204:	cmp	r1, r3
   14208:	cmpeq	r0, r2
   1420c:	moveq	r0, #1
   14210:	movne	r0, #0
   14214:	bx	lr
   14218:	push	{r4, lr}
   1421c:	ldr	r3, [r2, #40]	; 0x28
   14220:	mov	r2, #16
   14224:	mov	r1, r0
   14228:	mov	r0, r3
   1422c:	bl	121e0 <fnmatch@plt>
   14230:	clz	r0, r0
   14234:	lsr	r0, r0, #5
   14238:	pop	{r4, pc}
   1423c:	ldr	r3, [r2, #40]	; 0x28
   14240:	cmp	r3, #1
   14244:	beq	1427c <__assert_fail@plt+0x1cb8>
   14248:	bcc	1425c <__assert_fail@plt+0x1c98>
   1424c:	cmp	r3, #2
   14250:	beq	1429c <__assert_fail@plt+0x1cd8>
   14254:	mov	r0, #0
   14258:	bx	lr
   1425c:	ldr	r0, [r1, #20]
   14260:	mov	r1, #0
   14264:	ldrd	r2, [r2, #48]	; 0x30
   14268:	cmp	r1, r3
   1426c:	cmpeq	r0, r2
   14270:	movhi	r0, #1
   14274:	movls	r0, #0
   14278:	bx	lr
   1427c:	ldr	r0, [r1, #20]
   14280:	mov	r1, #0
   14284:	ldrd	r2, [r2, #48]	; 0x30
   14288:	cmp	r1, r3
   1428c:	cmpeq	r0, r2
   14290:	movcc	r0, #1
   14294:	movcs	r0, #0
   14298:	bx	lr
   1429c:	ldr	r0, [r1, #20]
   142a0:	mov	r1, #0
   142a4:	ldrd	r2, [r2, #48]	; 0x30
   142a8:	cmp	r3, r1
   142ac:	cmpeq	r2, r0
   142b0:	moveq	r0, #1
   142b4:	movne	r0, #0
   142b8:	bx	lr
   142bc:	push	{r4, lr}
   142c0:	mov	r3, #0
   142c4:	bl	13898 <__assert_fail@plt+0x12d4>
   142c8:	pop	{r4, pc}
   142cc:	push	{r4, lr}
   142d0:	bl	13fdc <__assert_fail@plt+0x1a18>
   142d4:	pop	{r4, pc}
   142d8:	push	{lr}		; (str lr, [sp, #-4]!)
   142dc:	sub	sp, sp, #12
   142e0:	add	r1, r1, #80	; 0x50
   142e4:	ldm	r1, {r0, r1}
   142e8:	stm	sp, {r0, r1}
   142ec:	mov	r3, #60	; 0x3c
   142f0:	bl	139e0 <__assert_fail@plt+0x141c>
   142f4:	add	sp, sp, #12
   142f8:	pop	{pc}		; (ldr pc, [sp], #4)
   142fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14300:	sub	sp, sp, #12
   14304:	add	r1, r1, #80	; 0x50
   14308:	ldm	r1, {r0, r1}
   1430c:	stm	sp, {r0, r1}
   14310:	ldr	r3, [pc, #8]	; 14320 <__assert_fail@plt+0x1d5c>
   14314:	bl	139e0 <__assert_fail@plt+0x141c>
   14318:	add	sp, sp, #12
   1431c:	pop	{pc}		; (ldr pc, [sp], #4)
   14320:	andeq	r5, r1, r0, lsl #3
   14324:	push	{r4, r5, r6, lr}
   14328:	ldr	r5, [r2, #40]	; 0x28
   1432c:	bl	21824 <__assert_fail@plt+0xf260>
   14330:	mov	r4, r0
   14334:	bl	21964 <__assert_fail@plt+0xf3a0>
   14338:	mov	r2, #0
   1433c:	mov	r1, r4
   14340:	mov	r0, r5
   14344:	bl	121e0 <fnmatch@plt>
   14348:	mov	r5, r0
   1434c:	mov	r0, r4
   14350:	bl	2e3fc <__assert_fail@plt+0x1be38>
   14354:	clz	r0, r5
   14358:	lsr	r0, r0, #5
   1435c:	pop	{r4, r5, r6, pc}
   14360:	push	{r4, lr}
   14364:	ldr	r2, [r2, #160]	; 0xa0
   14368:	bl	18cdc <__assert_fail@plt+0x6718>
   1436c:	eor	r0, r0, #1
   14370:	uxtb	r0, r0
   14374:	pop	{r4, pc}
   14378:	push	{lr}		; (str lr, [sp, #-4]!)
   1437c:	sub	sp, sp, #12
   14380:	ldr	r3, [r2, #44]	; 0x2c
   14384:	cmp	r3, #0
   14388:	bne	143b8 <__assert_fail@plt+0x1df4>
   1438c:	add	r1, r1, #80	; 0x50
   14390:	ldm	r1, {r0, r1}
   14394:	stm	sp, {r0, r1}
   14398:	add	r2, r2, #48	; 0x30
   1439c:	ldm	r2, {r2, r3}
   143a0:	bl	137a8 <__assert_fail@plt+0x11e4>
   143a4:	cmp	r0, #0
   143a8:	movle	r0, #0
   143ac:	movgt	r0, #1
   143b0:	add	sp, sp, #12
   143b4:	pop	{pc}		; (ldr pc, [sp], #4)
   143b8:	ldr	r3, [pc, #12]	; 143cc <__assert_fail@plt+0x1e08>
   143bc:	ldr	r2, [pc, #12]	; 143d0 <__assert_fail@plt+0x1e0c>
   143c0:	ldr	r1, [pc, #12]	; 143d4 <__assert_fail@plt+0x1e10>
   143c4:	ldr	r0, [pc, #12]	; 143d8 <__assert_fail@plt+0x1e14>
   143c8:	bl	125c4 <__assert_fail@plt>
   143cc:	andeq	r2, r4, r4, ror fp
   143d0:	andeq	r0, r0, sp, ror #4
   143d4:			; <UNDEFINED> instruction: 0x00042bb0
   143d8:	strdeq	r2, [r4], -ip
   143dc:	push	{r4, r5, lr}
   143e0:	sub	sp, sp, #12
   143e4:	ldr	r3, [r2, #44]	; 0x2c
   143e8:	cmp	r3, #0
   143ec:	bne	1441c <__assert_fail@plt+0x1e58>
   143f0:	mov	r4, r0
   143f4:	mov	ip, r1
   143f8:	ldr	r3, [r2, #40]	; 0x28
   143fc:	cmp	r3, #4
   14400:	ldrls	pc, [pc, r3, lsl #2]
   14404:	b	144e0 <__assert_fail@plt+0x1f1c>
   14408:	andeq	r4, r1, r4, asr #8
   1440c:	andeq	r4, r1, r4, lsl #9
   14410:	andeq	r4, r1, r0, asr #9
   14414:	ldrdeq	r4, [r1], -r0
   14418:	andeq	r4, r1, r0, lsr r4
   1441c:	ldr	r3, [pc, #208]	; 144f4 <__assert_fail@plt+0x1f30>
   14420:	ldr	r2, [pc, #208]	; 144f8 <__assert_fail@plt+0x1f34>
   14424:	ldr	r1, [pc, #208]	; 144fc <__assert_fail@plt+0x1f38>
   14428:	ldr	r0, [pc, #208]	; 14500 <__assert_fail@plt+0x1f3c>
   1442c:	bl	125c4 <__assert_fail@plt>
   14430:	ldr	r3, [pc, #188]	; 144f4 <__assert_fail@plt+0x1f30>
   14434:	mov	r2, #636	; 0x27c
   14438:	ldr	r1, [pc, #188]	; 144fc <__assert_fail@plt+0x1f38>
   1443c:	ldr	r0, [pc, #192]	; 14504 <__assert_fail@plt+0x1f40>
   14440:	bl	125c4 <__assert_fail@plt>
   14444:	add	r3, r1, #72	; 0x48
   14448:	ldm	r3, {r0, r1}
   1444c:	add	r3, sp, #8
   14450:	stmdb	r3, {r0, r1}
   14454:	ldr	r3, [ip, #76]	; 0x4c
   14458:	str	r3, [sp, #4]
   1445c:	add	r2, r2, #48	; 0x30
   14460:	ldm	r2, {r2, r3}
   14464:	add	r1, sp, #8
   14468:	ldmdb	r1, {r0, r1}
   1446c:	bl	137a8 <__assert_fail@plt+0x11e4>
   14470:	cmp	r0, #0
   14474:	movle	r0, #0
   14478:	movgt	r0, #1
   1447c:	add	sp, sp, #12
   14480:	pop	{r4, r5, pc}
   14484:	mov	r2, #5
   14488:	ldr	r1, [pc, #120]	; 14508 <__assert_fail@plt+0x1f44>
   1448c:	mov	r0, #0
   14490:	bl	12084 <dcgettext@plt>
   14494:	mov	r5, r0
   14498:	mov	r1, r4
   1449c:	mov	r0, #0
   144a0:	bl	18a20 <__assert_fail@plt+0x645c>
   144a4:	mov	r3, r0
   144a8:	mov	r2, r5
   144ac:	mov	r1, #0
   144b0:	mov	r0, r1
   144b4:	bl	121bc <error@plt>
   144b8:	mov	r0, #0
   144bc:	b	1447c <__assert_fail@plt+0x1eb8>
   144c0:	ldr	r3, [r1, #92]	; 0x5c
   144c4:	ldr	r1, [r1, #88]	; 0x58
   144c8:	str	r1, [sp]
   144cc:	b	14458 <__assert_fail@plt+0x1e94>
   144d0:	ldr	r3, [r1, #84]	; 0x54
   144d4:	ldr	r1, [r1, #80]	; 0x50
   144d8:	str	r1, [sp]
   144dc:	b	14458 <__assert_fail@plt+0x1e94>
   144e0:	ldr	r3, [pc, #12]	; 144f4 <__assert_fail@plt+0x1f30>
   144e4:	ldr	r2, [pc, #32]	; 1450c <__assert_fail@plt+0x1f48>
   144e8:	ldr	r1, [pc, #12]	; 144fc <__assert_fail@plt+0x1f38>
   144ec:	ldr	r0, [pc, #28]	; 14510 <__assert_fail@plt+0x1f4c>
   144f0:	bl	125c4 <__assert_fail@plt>
   144f4:	andeq	r2, r4, r0, lsl #23
   144f8:	andeq	r0, r0, r7, ror r2
   144fc:			; <UNDEFINED> instruction: 0x00042bb0
   14500:	strdeq	r2, [r4], -ip
   14504:	andeq	r2, r4, r8, lsr ip
   14508:	andeq	r2, r4, r4, ror #24
   1450c:	muleq	r0, fp, r2
   14510:	muleq	r4, r4, ip
   14514:	push	{r4, lr}
   14518:	ldr	r0, [r1, #28]
   1451c:	bl	125a0 <getgrgid@plt>
   14520:	clz	r0, r0
   14524:	lsr	r0, r0, #5
   14528:	pop	{r4, pc}
   1452c:	push	{r4, lr}
   14530:	ldr	r0, [r1, #24]
   14534:	bl	11f34 <getpwuid@plt>
   14538:	clz	r0, r0
   1453c:	lsr	r0, r0, #5
   14540:	pop	{r4, pc}
   14544:	push	{r4, r5, r6, lr}
   14548:	mov	r4, r0
   1454c:	mov	r6, r1
   14550:	mov	r5, r2
   14554:	ldr	r3, [r2, #132]	; 0x84
   14558:	mov	r1, r0
   1455c:	ldr	r0, [r3]
   14560:	bl	13930 <__assert_fail@plt+0x136c>
   14564:	cmp	r0, #0
   14568:	popeq	{r4, r5, r6, pc}
   1456c:	mov	r2, r5
   14570:	mov	r1, r6
   14574:	mov	r0, r4
   14578:	bl	151cc <__assert_fail@plt+0x2c08>
   1457c:	pop	{r4, r5, r6, pc}
   14580:	push	{r4, r5, r6, lr}
   14584:	mov	r5, r1
   14588:	mov	r4, r2
   1458c:	ldr	r3, [r2, #132]	; 0x84
   14590:	mov	r1, r0
   14594:	ldr	r0, [r3]
   14598:	bl	13930 <__assert_fail@plt+0x136c>
   1459c:	cmp	r0, #0
   145a0:	popeq	{r4, r5, r6, pc}
   145a4:	mov	r2, r4
   145a8:	mov	r1, r5
   145ac:	ldr	r3, [pc, #8]	; 145bc <__assert_fail@plt+0x1ff8>
   145b0:	ldr	r0, [r3, #12]
   145b4:	bl	151cc <__assert_fail@plt+0x2c08>
   145b8:	pop	{r4, r5, r6, pc}
   145bc:	andeq	r9, r5, r0, asr #28
   145c0:	mov	r0, #1
   145c4:	bx	lr
   145c8:	push	{r4, lr}
   145cc:	ldr	r3, [r2, #40]	; 0x28
   145d0:	mov	r2, #0
   145d4:	mov	r1, r0
   145d8:	mov	r0, r3
   145dc:	bl	121e0 <fnmatch@plt>
   145e0:	clz	r0, r0
   145e4:	lsr	r0, r0, #5
   145e8:	pop	{r4, pc}
   145ec:	ldr	r1, [r1, #16]
   145f0:	and	r3, r1, #61440	; 0xf000
   145f4:	cmp	r3, #16384	; 0x4000
   145f8:	moveq	r3, #44	; 0x2c
   145fc:	movne	r3, #40	; 0x28
   14600:	add	r3, r2, r3
   14604:	ldr	r0, [r3, #4]
   14608:	ldr	r3, [r2, #40]	; 0x28
   1460c:	cmp	r3, #1
   14610:	beq	1463c <__assert_fail@plt+0x2078>
   14614:	bcc	14628 <__assert_fail@plt+0x2064>
   14618:	cmp	r3, #2
   1461c:	beq	14658 <__assert_fail@plt+0x2094>
   14620:	push	{r4, lr}
   14624:	bl	12570 <abort@plt>
   14628:	and	r1, r1, r0
   1462c:	cmp	r1, r0
   14630:	movne	r0, #0
   14634:	moveq	r0, #1
   14638:	bx	lr
   1463c:	cmp	r0, #0
   14640:	moveq	r0, #1
   14644:	beq	14638 <__assert_fail@plt+0x2074>
   14648:	tst	r1, r0
   1464c:	movne	r0, #1
   14650:	moveq	r0, #0
   14654:	b	14638 <__assert_fail@plt+0x2074>
   14658:	lsl	r1, r1, #20
   1465c:	cmp	r0, r1, lsr #20
   14660:	moveq	r0, #1
   14664:	movne	r0, #0
   14668:	b	14638 <__assert_fail@plt+0x2074>
   1466c:	push	{r4, lr}
   14670:	ldr	r0, [pc, #28]	; 14694 <__assert_fail@plt+0x20d0>
   14674:	mov	r3, #0
   14678:	mov	r2, #1
   1467c:	ldr	r1, [r0, #12]
   14680:	ldr	r0, [r0, #16]
   14684:	bl	11fb8 <faccessat@plt>
   14688:	clz	r0, r0
   1468c:	lsr	r0, r0, #5
   14690:	pop	{r4, pc}
   14694:	andeq	r9, r5, r0, asr #28
   14698:	push	{r4, lr}
   1469c:	ldr	r0, [pc, #28]	; 146c0 <__assert_fail@plt+0x20fc>
   146a0:	mov	r3, #0
   146a4:	mov	r2, #4
   146a8:	ldr	r1, [r0, #12]
   146ac:	ldr	r0, [r0, #16]
   146b0:	bl	11fb8 <faccessat@plt>
   146b4:	clz	r0, r0
   146b8:	lsr	r0, r0, #5
   146bc:	pop	{r4, pc}
   146c0:	andeq	r9, r5, r0, asr #28
   146c4:	push	{r4, lr}
   146c8:	ldr	r0, [pc, #28]	; 146ec <__assert_fail@plt+0x2128>
   146cc:	mov	r3, #0
   146d0:	mov	r2, #2
   146d4:	ldr	r1, [r0, #12]
   146d8:	ldr	r0, [r0, #16]
   146dc:	bl	11fb8 <faccessat@plt>
   146e0:	clz	r0, r0
   146e4:	lsr	r0, r0, #5
   146e8:	pop	{r4, pc}
   146ec:	andeq	r9, r5, r0, asr #28
   146f0:	push	{lr}		; (str lr, [sp, #-4]!)
   146f4:	sub	sp, sp, #12
   146f8:	mov	r3, r2
   146fc:	ldrb	r2, [r2, #52]	; 0x34
   14700:	ldr	r1, [r3, #56]	; 0x38
   14704:	ldr	ip, [r3, #44]	; 0x2c
   14708:	str	r0, [sp]
   1470c:	ldr	r3, [pc, #16]	; 14724 <__assert_fail@plt+0x2160>
   14710:	mov	r0, ip
   14714:	bl	20c3c <__assert_fail@plt+0xe678>
   14718:	mov	r0, #1
   1471c:	add	sp, sp, #12
   14720:	pop	{pc}		; (ldr pc, [sp], #4)
   14724:	andeq	r7, r4, r0, asr #27
   14728:	push	{r4, lr}
   1472c:	bl	14070 <__assert_fail@plt+0x1aac>
   14730:	pop	{r4, pc}
   14734:	push	{r4, r5, r6, lr}
   14738:	sub	sp, sp, #8
   1473c:	mov	r5, r0
   14740:	mov	r6, r2
   14744:	bl	122d0 <strlen@plt>
   14748:	mov	r4, r0
   1474c:	ldr	r0, [r6, #40]	; 0x28
   14750:	mov	r3, #0
   14754:	str	r3, [sp]
   14758:	mov	r2, r4
   1475c:	mov	r1, r5
   14760:	bl	3e5dc <__assert_fail@plt+0x2c018>
   14764:	cmp	r4, r0
   14768:	movne	r0, #0
   1476c:	moveq	r0, #1
   14770:	add	sp, sp, #8
   14774:	pop	{r4, r5, r6, pc}
   14778:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1477c:	mov	sl, r2
   14780:	ldrd	r8, [r1, #48]	; 0x30
   14784:	ldr	r6, [r2, #44]	; 0x2c
   14788:	asr	r7, r6, #31
   1478c:	mov	r2, r6
   14790:	mov	r3, r7
   14794:	mov	r0, r8
   14798:	mov	r1, r9
   1479c:	bl	4226c <__assert_fail@plt+0x2fca8>
   147a0:	orrs	r3, r2, r3
   147a4:	movne	r4, #1
   147a8:	moveq	r4, #0
   147ac:	mov	r5, #0
   147b0:	mov	r2, r6
   147b4:	mov	r3, r7
   147b8:	mov	r0, r8
   147bc:	mov	r1, r9
   147c0:	bl	4226c <__assert_fail@plt+0x2fca8>
   147c4:	adds	r0, r0, r4
   147c8:	adc	r1, r1, r5
   147cc:	ldr	r3, [sl, #40]	; 0x28
   147d0:	cmp	r3, #1
   147d4:	beq	14804 <__assert_fail@plt+0x2240>
   147d8:	bcc	147ec <__assert_fail@plt+0x2228>
   147dc:	cmp	r3, #2
   147e0:	beq	1481c <__assert_fail@plt+0x2258>
   147e4:	mov	r0, #0
   147e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147ec:	ldrd	r2, [sl, #48]	; 0x30
   147f0:	cmp	r1, r3
   147f4:	cmpeq	r0, r2
   147f8:	movhi	r0, #1
   147fc:	movls	r0, #0
   14800:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14804:	ldrd	r2, [sl, #48]	; 0x30
   14808:	cmp	r1, r3
   1480c:	cmpeq	r0, r2
   14810:	movcc	r0, #1
   14814:	movcs	r0, #0
   14818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1481c:	ldrd	r2, [sl, #48]	; 0x30
   14820:	cmp	r3, r1
   14824:	cmpeq	r2, r0
   14828:	moveq	r0, #1
   1482c:	movne	r0, #0
   14830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14834:	push	{r4, r5, r6, r7, r8, lr}
   14838:	ldrd	r4, [r1, #96]	; 0x60
   1483c:	orrs	r3, r4, r5
   14840:	beq	1485c <__assert_fail@plt+0x2298>
   14844:	ldrd	r6, [r2, #40]	; 0x28
   14848:	cmp	r5, r7
   1484c:	cmpeq	r4, r6
   14850:	beq	1485c <__assert_fail@plt+0x2298>
   14854:	mov	r0, #0
   14858:	pop	{r4, r5, r6, r7, r8, pc}
   1485c:	mov	r4, r2
   14860:	mov	r5, r1
   14864:	mov	r2, r1
   14868:	ldr	r3, [pc, #76]	; 148bc <__assert_fail@plt+0x22f8>
   1486c:	ldr	r1, [r3, #12]
   14870:	bl	18af4 <__assert_fail@plt+0x6530>
   14874:	cmp	r0, #0
   14878:	bne	148b4 <__assert_fail@plt+0x22f0>
   1487c:	ldrd	r0, [r5, #96]	; 0x60
   14880:	ldrd	r2, [r4, #40]	; 0x28
   14884:	cmp	r1, r3
   14888:	cmpeq	r0, r2
   1488c:	beq	14898 <__assert_fail@plt+0x22d4>
   14890:	mov	r0, #0
   14894:	pop	{r4, r5, r6, r7, r8, pc}
   14898:	ldrd	r0, [r5]
   1489c:	ldrd	r2, [r4, #48]	; 0x30
   148a0:	cmp	r1, r3
   148a4:	cmpeq	r0, r2
   148a8:	moveq	r0, #1
   148ac:	movne	r0, #0
   148b0:	pop	{r4, r5, r6, r7, r8, pc}
   148b4:	mov	r0, #0
   148b8:	pop	{r4, r5, r6, r7, r8, pc}
   148bc:	andeq	r9, r5, r0, asr #28
   148c0:	mov	r0, #1
   148c4:	bx	lr
   148c8:	ldr	r3, [pc, #204]	; 1499c <__assert_fail@plt+0x23d8>
   148cc:	ldrb	r3, [r3, #5]
   148d0:	cmp	r3, #0
   148d4:	beq	1492c <__assert_fail@plt+0x2368>
   148d8:	ldr	r3, [pc, #188]	; 1499c <__assert_fail@plt+0x23d8>
   148dc:	ldr	r3, [r3, #8]
   148e0:	cmp	r3, #0
   148e4:	moveq	r0, #0
   148e8:	beq	14950 <__assert_fail@plt+0x238c>
   148ec:	ldr	r0, [pc, #168]	; 1499c <__assert_fail@plt+0x23d8>
   148f0:	ldrb	r0, [r0, #4]
   148f4:	cmp	r0, #0
   148f8:	ldrne	r3, [r1, #16]
   148fc:	and	r3, r3, #61440	; 0xf000
   14900:	cmp	r3, #24576	; 0x6000
   14904:	beq	14944 <__assert_fail@plt+0x2380>
   14908:	bhi	1496c <__assert_fail@plt+0x23a8>
   1490c:	cmp	r3, #8192	; 0x2000
   14910:	beq	14954 <__assert_fail@plt+0x2390>
   14914:	cmp	r3, #16384	; 0x4000
   14918:	beq	1498c <__assert_fail@plt+0x23c8>
   1491c:	cmp	r3, #4096	; 0x1000
   14920:	beq	14964 <__assert_fail@plt+0x23a0>
   14924:	mov	r0, #0
   14928:	b	14950 <__assert_fail@plt+0x238c>
   1492c:	push	{r4, lr}
   14930:	ldr	r3, [pc, #104]	; 149a0 <__assert_fail@plt+0x23dc>
   14934:	ldr	r2, [pc, #104]	; 149a4 <__assert_fail@plt+0x23e0>
   14938:	ldr	r1, [pc, #104]	; 149a8 <__assert_fail@plt+0x23e4>
   1493c:	ldr	r0, [pc, #104]	; 149ac <__assert_fail@plt+0x23e8>
   14940:	bl	125c4 <__assert_fail@plt>
   14944:	mov	r3, #0
   14948:	add	r2, r2, r3
   1494c:	ldrb	r0, [r2, #40]	; 0x28
   14950:	bx	lr
   14954:	mov	r3, #1
   14958:	b	14948 <__assert_fail@plt+0x2384>
   1495c:	mov	r3, #6
   14960:	b	14948 <__assert_fail@plt+0x2384>
   14964:	mov	r3, #5
   14968:	b	14948 <__assert_fail@plt+0x2384>
   1496c:	cmp	r3, #40960	; 0xa000
   14970:	beq	14994 <__assert_fail@plt+0x23d0>
   14974:	cmp	r3, #49152	; 0xc000
   14978:	beq	1495c <__assert_fail@plt+0x2398>
   1497c:	cmp	r3, #32768	; 0x8000
   14980:	bne	14924 <__assert_fail@plt+0x2360>
   14984:	mov	r3, #3
   14988:	b	14948 <__assert_fail@plt+0x2384>
   1498c:	mov	r3, #2
   14990:	b	14948 <__assert_fail@plt+0x2384>
   14994:	mov	r3, #4
   14998:	b	14948 <__assert_fail@plt+0x2384>
   1499c:	andeq	r9, r5, r0, asr #28
   149a0:	muleq	r4, r0, fp
   149a4:	ldrdeq	r0, [r0], -r1
   149a8:			; <UNDEFINED> instruction: 0x00042bb0
   149ac:	andeq	r2, r4, r0, lsr #25
   149b0:	ldr	r3, [r2, #40]	; 0x28
   149b4:	cmp	r3, #1
   149b8:	beq	149f0 <__assert_fail@plt+0x242c>
   149bc:	bcc	149d0 <__assert_fail@plt+0x240c>
   149c0:	cmp	r3, #2
   149c4:	beq	14a10 <__assert_fail@plt+0x244c>
   149c8:	mov	r0, #0
   149cc:	bx	lr
   149d0:	ldr	r0, [r1, #24]
   149d4:	mov	r1, #0
   149d8:	ldrd	r2, [r2, #48]	; 0x30
   149dc:	cmp	r1, r3
   149e0:	cmpeq	r0, r2
   149e4:	movhi	r0, #1
   149e8:	movls	r0, #0
   149ec:	bx	lr
   149f0:	ldr	r0, [r1, #24]
   149f4:	mov	r1, #0
   149f8:	ldrd	r2, [r2, #48]	; 0x30
   149fc:	cmp	r1, r3
   14a00:	cmpeq	r0, r2
   14a04:	movcc	r0, #1
   14a08:	movcs	r0, #0
   14a0c:	bx	lr
   14a10:	ldr	r0, [r1, #24]
   14a14:	mov	r1, #0
   14a18:	ldrd	r2, [r2, #48]	; 0x30
   14a1c:	cmp	r3, r1
   14a20:	cmpeq	r2, r0
   14a24:	moveq	r0, #1
   14a28:	movne	r0, #0
   14a2c:	bx	lr
   14a30:	push	{r4, r5, r6, r7, r8, lr}
   14a34:	sub	sp, sp, #24
   14a38:	mov	r3, r1
   14a3c:	mov	r6, r2
   14a40:	add	ip, sp, #8
   14a44:	add	r2, r1, #72	; 0x48
   14a48:	ldm	r2, {r0, r1}
   14a4c:	stm	ip, {r0, r1}
   14a50:	mov	r8, r0
   14a54:	ldr	r7, [r3, #76]	; 0x4c
   14a58:	add	r1, r3, #88	; 0x58
   14a5c:	ldm	r1, {r0, r1}
   14a60:	stm	sp, {r0, r1}
   14a64:	mov	r5, r0
   14a68:	ldr	r4, [r3, #92]	; 0x5c
   14a6c:	str	r7, [sp, #12]
   14a70:	str	r4, [sp, #4]
   14a74:	ldm	sp, {r2, r3}
   14a78:	ldm	ip, {r0, r1}
   14a7c:	bl	137a8 <__assert_fail@plt+0x11e4>
   14a80:	cmp	r0, #0
   14a84:	movlt	r0, #0
   14a88:	blt	14ac0 <__assert_fail@plt+0x24fc>
   14a8c:	sub	r5, r5, r8
   14a90:	subs	r4, r4, r7
   14a94:	addmi	r4, r4, #998244352	; 0x3b800000
   14a98:	addmi	r4, r4, #1753088	; 0x1ac000
   14a9c:	addmi	r4, r4, #2560	; 0xa00
   14aa0:	submi	r5, r5, #1
   14aa4:	str	r5, [sp, #16]
   14aa8:	str	r4, [sp, #20]
   14aac:	ldr	r3, [pc, #20]	; 14ac8 <__assert_fail@plt+0x2504>
   14ab0:	mov	r2, r6
   14ab4:	add	r1, sp, #24
   14ab8:	ldmdb	r1, {r0, r1}
   14abc:	bl	139e0 <__assert_fail@plt+0x141c>
   14ac0:	add	sp, sp, #24
   14ac4:	pop	{r4, r5, r6, r7, r8, pc}
   14ac8:	andeq	r5, r1, r0, lsl #3
   14acc:	ldr	r0, [r2, #40]	; 0x28
   14ad0:	ldr	r3, [r1, #24]
   14ad4:	cmp	r0, r3
   14ad8:	movne	r0, #0
   14adc:	moveq	r0, #1
   14ae0:	bx	lr
   14ae4:	push	{r4, r5, r6, r7, lr}
   14ae8:	sub	sp, sp, #108	; 0x6c
   14aec:	mov	r5, r0
   14af0:	mov	r7, r1
   14af4:	mov	r6, r2
   14af8:	bl	18318 <__assert_fail@plt+0x5d54>
   14afc:	ldr	r3, [pc, #172]	; 14bb0 <__assert_fail@plt+0x25ec>
   14b00:	ldr	r4, [pc, #172]	; 14bb4 <__assert_fail@plt+0x25f0>
   14b04:	cmp	r0, #0
   14b08:	moveq	r4, r3
   14b0c:	mov	r0, sp
   14b10:	bl	17f50 <__assert_fail@plt+0x598c>
   14b14:	mov	r1, sp
   14b18:	ldr	r3, [pc, #152]	; 14bb8 <__assert_fail@plt+0x25f4>
   14b1c:	ldr	r0, [r3, #12]
   14b20:	blx	r4
   14b24:	cmp	r0, #0
   14b28:	beq	14b98 <__assert_fail@plt+0x25d4>
   14b2c:	bl	18318 <__assert_fail@plt+0x5d54>
   14b30:	cmp	r0, #0
   14b34:	beq	14b48 <__assert_fail@plt+0x2584>
   14b38:	bl	12318 <__errno_location@plt>
   14b3c:	ldr	r3, [r0]
   14b40:	cmp	r3, #2
   14b44:	beq	14b84 <__assert_fail@plt+0x25c0>
   14b48:	bl	12318 <__errno_location@plt>
   14b4c:	ldr	r4, [r0]
   14b50:	mov	r1, r5
   14b54:	mov	r0, #0
   14b58:	bl	18a20 <__assert_fail@plt+0x645c>
   14b5c:	mov	r3, r0
   14b60:	ldr	r2, [pc, #84]	; 14bbc <__assert_fail@plt+0x25f8>
   14b64:	mov	r1, r4
   14b68:	mov	r0, #0
   14b6c:	bl	121bc <error@plt>
   14b70:	mov	r2, #1
   14b74:	ldr	r3, [pc, #60]	; 14bb8 <__assert_fail@plt+0x25f4>
   14b78:	str	r2, [r3, #28]
   14b7c:	mov	r0, #0
   14b80:	b	14ba8 <__assert_fail@plt+0x25e4>
   14b84:	mov	r2, r6
   14b88:	mov	r1, r7
   14b8c:	mov	r0, r5
   14b90:	bl	148c8 <__assert_fail@plt+0x2304>
   14b94:	b	14ba8 <__assert_fail@plt+0x25e4>
   14b98:	mov	r2, r6
   14b9c:	mov	r1, sp
   14ba0:	mov	r0, r5
   14ba4:	bl	148c8 <__assert_fail@plt+0x2304>
   14ba8:	add	sp, sp, #108	; 0x6c
   14bac:	pop	{r4, r5, r6, r7, pc}
   14bb0:	andeq	r8, r1, r8, ror r1
   14bb4:	strdeq	r8, [r1], -ip
   14bb8:	andeq	r9, r5, r0, asr #28
   14bbc:	andeq	r6, r4, r4, lsl #24
   14bc0:	push	{r4, r5, r6, lr}
   14bc4:	sub	sp, sp, #8
   14bc8:	mov	r6, r0
   14bcc:	mov	r5, r2
   14bd0:	ldr	r3, [pc, #140]	; 14c64 <__assert_fail@plt+0x26a0>
   14bd4:	ldr	r2, [pc, #140]	; 14c68 <__assert_fail@plt+0x26a4>
   14bd8:	ldr	r4, [r2, #64]	; 0x40
   14bdc:	add	r2, sp, #4
   14be0:	ldr	r1, [r3, #12]
   14be4:	ldr	r0, [r3, #16]
   14be8:	blx	r4
   14bec:	cmp	r0, #0
   14bf0:	blt	14c20 <__assert_fail@plt+0x265c>
   14bf4:	mov	r2, #0
   14bf8:	ldr	r1, [sp, #4]
   14bfc:	ldr	r0, [r5, #40]	; 0x28
   14c00:	bl	121e0 <fnmatch@plt>
   14c04:	clz	r4, r0
   14c08:	lsr	r4, r4, #5
   14c0c:	ldr	r0, [sp, #4]
   14c10:	bl	124ec <freecon@plt>
   14c14:	mov	r0, r4
   14c18:	add	sp, sp, #8
   14c1c:	pop	{r4, r5, r6, pc}
   14c20:	bl	12318 <__errno_location@plt>
   14c24:	ldr	r4, [r0]
   14c28:	mov	r2, #5
   14c2c:	ldr	r1, [pc, #56]	; 14c6c <__assert_fail@plt+0x26a8>
   14c30:	mov	r0, #0
   14c34:	bl	12084 <dcgettext@plt>
   14c38:	mov	r5, r0
   14c3c:	mov	r1, r6
   14c40:	mov	r0, #0
   14c44:	bl	18a20 <__assert_fail@plt+0x645c>
   14c48:	mov	r3, r0
   14c4c:	mov	r2, r5
   14c50:	mov	r1, r4
   14c54:	mov	r0, #0
   14c58:	bl	121bc <error@plt>
   14c5c:	mov	r4, #0
   14c60:	b	14c14 <__assert_fail@plt+0x2650>
   14c64:	andeq	r9, r5, r0, asr #28
   14c68:	andeq	r9, r5, ip, ror #28
   14c6c:			; <UNDEFINED> instruction: 0x00042cb0
   14c70:	push	{r4, r5, r6, r7, lr}
   14c74:	sub	sp, sp, #260	; 0x104
   14c78:	mov	r5, r0
   14c7c:	subs	r4, r1, #0
   14c80:	beq	14d1c <__assert_fail@plt+0x2758>
   14c84:	mov	r7, #0
   14c88:	ldr	r6, [pc, #160]	; 14d30 <__assert_fail@plt+0x276c>
   14c8c:	b	14cb8 <__assert_fail@plt+0x26f4>
   14c90:	add	r2, sp, #256	; 0x100
   14c94:	add	r3, r2, r3
   14c98:	strb	r7, [r3, #-255]	; 0xffffff01
   14c9c:	mov	r2, sp
   14ca0:	mov	r1, r6
   14ca4:	mov	r0, r5
   14ca8:	bl	1230c <fprintf@plt>
   14cac:	ldr	r4, [r4, #152]	; 0x98
   14cb0:	cmp	r4, #0
   14cb4:	beq	14d1c <__assert_fail@plt+0x2758>
   14cb8:	ldr	r1, [r4, #4]
   14cbc:	cmp	r1, #0
   14cc0:	beq	14d14 <__assert_fail@plt+0x2750>
   14cc4:	mov	r0, sp
   14cc8:	bl	12180 <strcpy@plt>
   14ccc:	mov	r0, sp
   14cd0:	bl	122d0 <strlen@plt>
   14cd4:	sub	r0, r0, #1
   14cd8:	mov	r3, r0
   14cdc:	cmp	r0, #0
   14ce0:	blt	14c90 <__assert_fail@plt+0x26cc>
   14ce4:	add	r1, sp, r0
   14ce8:	ldrb	r2, [sp, r0]
   14cec:	cmp	r2, #9
   14cf0:	cmpne	r2, #32
   14cf4:	bne	14c90 <__assert_fail@plt+0x26cc>
   14cf8:	subs	r3, r3, #1
   14cfc:	bmi	14c90 <__assert_fail@plt+0x26cc>
   14d00:	ldrb	r2, [r1, #-1]!
   14d04:	cmp	r2, #9
   14d08:	cmpne	r2, #32
   14d0c:	beq	14cf8 <__assert_fail@plt+0x2734>
   14d10:	b	14c90 <__assert_fail@plt+0x26cc>
   14d14:	mov	r2, r7
   14d18:	b	14ca0 <__assert_fail@plt+0x26dc>
   14d1c:	mov	r1, r5
   14d20:	mov	r0, #10
   14d24:	bl	1245c <fputc@plt>
   14d28:	add	sp, sp, #260	; 0x104
   14d2c:	pop	{r4, r5, r6, r7, pc}
   14d30:	andeq	r2, r4, r8, asr #25
   14d34:	push	{r4, r5, lr}
   14d38:	sub	sp, sp, #12
   14d3c:	subs	r4, r1, #0
   14d40:	beq	14ddc <__assert_fail@plt+0x2818>
   14d44:	mov	r5, r0
   14d48:	ldr	r1, [r4, #156]	; 0x9c
   14d4c:	bl	14e6c <__assert_fail@plt+0x28a8>
   14d50:	ldrb	r0, [r4, #18]
   14d54:	ldrb	ip, [r4, #19]
   14d58:	ldrb	r2, [r4, #20]
   14d5c:	ldr	r3, [pc, #224]	; 14e44 <__assert_fail@plt+0x2880>
   14d60:	ldr	r1, [pc, #224]	; 14e48 <__assert_fail@plt+0x2884>
   14d64:	cmp	r2, #0
   14d68:	moveq	r1, r3
   14d6c:	str	r1, [sp]
   14d70:	mov	r2, r3
   14d74:	ldr	r3, [pc, #208]	; 14e4c <__assert_fail@plt+0x2888>
   14d78:	cmp	ip, #0
   14d7c:	moveq	r3, r2
   14d80:	mov	r1, r2
   14d84:	ldr	r2, [pc, #196]	; 14e50 <__assert_fail@plt+0x288c>
   14d88:	cmp	r0, #0
   14d8c:	moveq	r2, r1
   14d90:	ldr	r1, [pc, #188]	; 14e54 <__assert_fail@plt+0x2890>
   14d94:	mov	r0, r5
   14d98:	bl	1230c <fprintf@plt>
   14d9c:	mov	r1, r4
   14da0:	mov	r0, r5
   14da4:	bl	161e4 <__assert_fail@plt+0x3c20>
   14da8:	vldr	s15, [r4, #28]
   14dac:	vcvt.f64.f32	d7, s15
   14db0:	vmov	r2, r3, d7
   14db4:	ldr	r1, [pc, #156]	; 14e58 <__assert_fail@plt+0x2894>
   14db8:	mov	r0, r5
   14dbc:	bl	1230c <fprintf@plt>
   14dc0:	ldr	r3, [pc, #148]	; 14e5c <__assert_fail@plt+0x2898>
   14dc4:	ldr	r3, [r3, #44]	; 0x2c
   14dc8:	tst	r3, #64	; 0x40
   14dcc:	bne	14de4 <__assert_fail@plt+0x2820>
   14dd0:	ldr	r1, [r4, #160]	; 0xa0
   14dd4:	mov	r0, r5
   14dd8:	bl	14e6c <__assert_fail@plt+0x28a8>
   14ddc:	add	sp, sp, #12
   14de0:	pop	{r4, r5, pc}
   14de4:	ldr	r3, [r4, #164]	; 0xa4
   14de8:	ldr	r2, [r4, #168]	; 0xa8
   14dec:	ldr	r1, [pc, #108]	; 14e60 <__assert_fail@plt+0x289c>
   14df0:	mov	r0, r5
   14df4:	bl	1230c <fprintf@plt>
   14df8:	ldr	r3, [r4, #164]	; 0xa4
   14dfc:	cmp	r3, #0
   14e00:	beq	14e2c <__assert_fail@plt+0x2868>
   14e04:	vldr	s15, [r4, #168]	; 0xa8
   14e08:	vcvt.f64.u32	d6, s15
   14e0c:	vmov	s15, r3
   14e10:	vcvt.f64.u32	d7, s15
   14e14:	vdiv.f64	d5, d6, d7
   14e18:	vmov	r2, r3, d5
   14e1c:	ldr	r1, [pc, #64]	; 14e64 <__assert_fail@plt+0x28a0>
   14e20:	mov	r0, r5
   14e24:	bl	1230c <fprintf@plt>
   14e28:	b	14dd0 <__assert_fail@plt+0x280c>
   14e2c:	mov	r3, r5
   14e30:	mov	r2, #4
   14e34:	mov	r1, #1
   14e38:	ldr	r0, [pc, #40]	; 14e68 <__assert_fail@plt+0x28a4>
   14e3c:	bl	12138 <fwrite@plt>
   14e40:	b	14dd0 <__assert_fail@plt+0x280c>
   14e44:	andeq	r4, r4, r0, lsl r3
   14e48:	strdeq	r2, [r4], -r0
   14e4c:	andeq	r2, r4, r0, ror #25
   14e50:	ldrdeq	r2, [r4], -r0
   14e54:	andeq	r2, r4, r0, lsl #26
   14e58:	andeq	r2, r4, r8, lsl #26
   14e5c:	andeq	r9, r5, ip, ror #28
   14e60:	andeq	r2, r4, r4, lsr #26
   14e64:	andeq	r2, r4, r0, asr #26
   14e68:	andeq	r2, r4, r8, asr #26
   14e6c:	push	{r4, r5, r6, lr}
   14e70:	subs	r4, r1, #0
   14e74:	popeq	{r4, r5, r6, pc}
   14e78:	mov	r5, r0
   14e7c:	ldr	r3, [r4]
   14e80:	ldr	r2, [pc, #128]	; 14f08 <__assert_fail@plt+0x2944>
   14e84:	ldr	r1, [pc, #128]	; 14f0c <__assert_fail@plt+0x2948>
   14e88:	cmp	r3, r2
   14e8c:	cmpne	r3, r1
   14e90:	beq	14ed8 <__assert_fail@plt+0x2914>
   14e94:	ldr	r3, [r4, #156]	; 0x9c
   14e98:	cmp	r3, #0
   14e9c:	beq	14ef0 <__assert_fail@plt+0x292c>
   14ea0:	mov	r3, r5
   14ea4:	mov	r2, #3
   14ea8:	mov	r1, #1
   14eac:	ldr	r0, [pc, #92]	; 14f10 <__assert_fail@plt+0x294c>
   14eb0:	bl	12138 <fwrite@plt>
   14eb4:	mov	r1, r4
   14eb8:	mov	r0, r5
   14ebc:	bl	14d34 <__assert_fail@plt+0x2770>
   14ec0:	mov	r3, r5
   14ec4:	mov	r2, #3
   14ec8:	mov	r1, #1
   14ecc:	ldr	r0, [pc, #64]	; 14f14 <__assert_fail@plt+0x2950>
   14ed0:	bl	12138 <fwrite@plt>
   14ed4:	pop	{r4, r5, r6, pc}
   14ed8:	ldr	r3, [r4, #156]	; 0x9c
   14edc:	cmp	r3, #0
   14ee0:	bne	14ea0 <__assert_fail@plt+0x28dc>
   14ee4:	ldr	r1, [r4, #160]	; 0xa0
   14ee8:	bl	14e6c <__assert_fail@plt+0x28a8>
   14eec:	pop	{r4, r5, r6, pc}
   14ef0:	ldr	r3, [r4, #160]	; 0xa0
   14ef4:	cmp	r3, #0
   14ef8:	bne	14ea0 <__assert_fail@plt+0x28dc>
   14efc:	mov	r1, r4
   14f00:	bl	14d34 <__assert_fail@plt+0x2770>
   14f04:	pop	{r4, r5, r6, pc}
   14f08:	andeq	r3, r1, ip, asr r8
   14f0c:	andeq	r3, r1, r0, lsr #16
   14f10:	andeq	r2, r4, r0, asr sp
   14f14:	andeq	r2, r4, r4, asr sp
   14f18:	ldr	r3, [pc, #68]	; 14f64 <__assert_fail@plt+0x29a0>
   14f1c:	ldr	r3, [r3, #44]	; 0x2c
   14f20:	tst	r3, #64	; 0x40
   14f24:	bxeq	lr
   14f28:	push	{r4, r5, r6, lr}
   14f2c:	mov	r4, r0
   14f30:	ldr	r5, [pc, #48]	; 14f68 <__assert_fail@plt+0x29a4>
   14f34:	ldr	r3, [r5]
   14f38:	mov	r2, #42	; 0x2a
   14f3c:	mov	r1, #1
   14f40:	ldr	r0, [pc, #36]	; 14f6c <__assert_fail@plt+0x29a8>
   14f44:	bl	12138 <fwrite@plt>
   14f48:	mov	r1, r4
   14f4c:	ldr	r0, [r5]
   14f50:	bl	14d34 <__assert_fail@plt+0x2770>
   14f54:	ldr	r1, [r5]
   14f58:	mov	r0, #10
   14f5c:	bl	1245c <fputc@plt>
   14f60:	pop	{r4, r5, r6, pc}
   14f64:	andeq	r9, r5, ip, ror #28
   14f68:	andeq	r9, r5, r8, asr #10
   14f6c:	andeq	r2, r4, r8, asr sp
   14f70:	cmp	r0, #0
   14f74:	bxeq	lr
   14f78:	push	{r4, lr}
   14f7c:	ldr	r2, [r0]
   14f80:	cmp	r2, #0
   14f84:	beq	14fb0 <__assert_fail@plt+0x29ec>
   14f88:	ldr	r3, [r0, #172]	; 0xac
   14f8c:	cmp	r3, #0
   14f90:	beq	14fc4 <__assert_fail@plt+0x2a00>
   14f94:	ldr	r1, [r3, #12]
   14f98:	cmp	r1, #0
   14f9c:	cmpne	r2, r1
   14fa0:	bne	14fd8 <__assert_fail@plt+0x2a14>
   14fa4:	ldr	lr, [pc, #360]	; 15114 <__assert_fail@plt+0x2b50>
   14fa8:	ldr	ip, [pc, #360]	; 15118 <__assert_fail@plt+0x2b54>
   14fac:	b	15030 <__assert_fail@plt+0x2a6c>
   14fb0:	ldr	r3, [pc, #356]	; 1511c <__assert_fail@plt+0x2b58>
   14fb4:	ldr	r2, [pc, #356]	; 15120 <__assert_fail@plt+0x2b5c>
   14fb8:	ldr	r1, [pc, #356]	; 15124 <__assert_fail@plt+0x2b60>
   14fbc:	ldr	r0, [pc, #356]	; 15128 <__assert_fail@plt+0x2b64>
   14fc0:	bl	125c4 <__assert_fail@plt>
   14fc4:	ldr	r3, [pc, #336]	; 1511c <__assert_fail@plt+0x2b58>
   14fc8:	ldr	r2, [pc, #348]	; 1512c <__assert_fail@plt+0x2b68>
   14fcc:	ldr	r1, [pc, #336]	; 15124 <__assert_fail@plt+0x2b60>
   14fd0:	ldr	r0, [pc, #344]	; 15130 <__assert_fail@plt+0x2b6c>
   14fd4:	bl	125c4 <__assert_fail@plt>
   14fd8:	ldr	r3, [pc, #316]	; 1511c <__assert_fail@plt+0x2b58>
   14fdc:	ldr	r2, [pc, #336]	; 15134 <__assert_fail@plt+0x2b70>
   14fe0:	ldr	r1, [pc, #316]	; 15124 <__assert_fail@plt+0x2b60>
   14fe4:	ldr	r0, [pc, #332]	; 15138 <__assert_fail@plt+0x2b74>
   14fe8:	bl	125c4 <__assert_fail@plt>
   14fec:	cmp	r3, #0
   14ff0:	beq	1505c <__assert_fail@plt+0x2a98>
   14ff4:	cmp	r3, #2
   14ff8:	beq	15070 <__assert_fail@plt+0x2aac>
   14ffc:	ldr	r0, [r0, #152]	; 0x98
   15000:	cmp	r0, #0
   15004:	beq	15110 <__assert_fail@plt+0x2b4c>
   15008:	ldr	r2, [r0]
   1500c:	cmp	r2, #0
   15010:	beq	14fb0 <__assert_fail@plt+0x29ec>
   15014:	ldr	r3, [r0, #172]	; 0xac
   15018:	cmp	r3, #0
   1501c:	beq	14fc4 <__assert_fail@plt+0x2a00>
   15020:	ldr	r1, [r3, #12]
   15024:	cmp	r1, #0
   15028:	cmpne	r2, r1
   1502c:	bne	14fd8 <__assert_fail@plt+0x2a14>
   15030:	ldr	r3, [r3]
   15034:	cmp	r3, #6
   15038:	ldrls	pc, [pc, r3, lsl #2]
   1503c:	b	14ffc <__assert_fail@plt+0x2a38>
   15040:	andeq	r4, r1, ip, ror #31
   15044:	ldrdeq	r5, [r1], -r0
   15048:	andeq	r4, r1, ip, ror #31
   1504c:	ldrdeq	r5, [r1], -r0
   15050:	ldrdeq	r5, [r1], -r0
   15054:	ldrdeq	r5, [r1], -r0
   15058:	andeq	r5, r1, r4, lsl #1
   1505c:	ldr	r3, [pc, #184]	; 1511c <__assert_fail@plt+0x2b58>
   15060:	ldr	r2, [pc, #212]	; 1513c <__assert_fail@plt+0x2b78>
   15064:	ldr	r1, [pc, #184]	; 15124 <__assert_fail@plt+0x2b60>
   15068:	ldr	r0, [pc, #208]	; 15140 <__assert_fail@plt+0x2b7c>
   1506c:	bl	125c4 <__assert_fail@plt>
   15070:	ldr	r3, [pc, #164]	; 1511c <__assert_fail@plt+0x2b58>
   15074:	ldr	r2, [pc, #200]	; 15144 <__assert_fail@plt+0x2b80>
   15078:	ldr	r1, [pc, #164]	; 15124 <__assert_fail@plt+0x2b60>
   1507c:	ldr	r0, [pc, #196]	; 15148 <__assert_fail@plt+0x2b84>
   15080:	bl	125c4 <__assert_fail@plt>
   15084:	ldrb	r3, [r0, #16]
   15088:	cmp	r3, #0
   1508c:	beq	150bc <__assert_fail@plt+0x2af8>
   15090:	cmp	r2, lr
   15094:	cmpne	r2, ip
   15098:	beq	14ffc <__assert_fail@plt+0x2a38>
   1509c:	ldrb	r3, [r0, #17]
   150a0:	cmp	r3, #0
   150a4:	bne	14ffc <__assert_fail@plt+0x2a38>
   150a8:	ldr	r3, [pc, #108]	; 1511c <__assert_fail@plt+0x2b58>
   150ac:	ldr	r2, [pc, #152]	; 1514c <__assert_fail@plt+0x2b88>
   150b0:	ldr	r1, [pc, #108]	; 15124 <__assert_fail@plt+0x2b60>
   150b4:	ldr	r0, [pc, #148]	; 15150 <__assert_fail@plt+0x2b8c>
   150b8:	bl	125c4 <__assert_fail@plt>
   150bc:	ldr	r3, [pc, #88]	; 1511c <__assert_fail@plt+0x2b58>
   150c0:	ldr	r2, [pc, #140]	; 15154 <__assert_fail@plt+0x2b90>
   150c4:	ldr	r1, [pc, #88]	; 15124 <__assert_fail@plt+0x2b60>
   150c8:	ldr	r0, [pc, #136]	; 15158 <__assert_fail@plt+0x2b94>
   150cc:	bl	125c4 <__assert_fail@plt>
   150d0:	ldrb	r3, [r0, #17]
   150d4:	cmp	r3, #0
   150d8:	bne	150fc <__assert_fail@plt+0x2b38>
   150dc:	ldrb	r3, [r0, #16]
   150e0:	cmp	r3, #0
   150e4:	beq	14ffc <__assert_fail@plt+0x2a38>
   150e8:	ldr	r3, [pc, #44]	; 1511c <__assert_fail@plt+0x2b58>
   150ec:	ldr	r2, [pc, #104]	; 1515c <__assert_fail@plt+0x2b98>
   150f0:	ldr	r1, [pc, #44]	; 15124 <__assert_fail@plt+0x2b60>
   150f4:	ldr	r0, [pc, #100]	; 15160 <__assert_fail@plt+0x2b9c>
   150f8:	bl	125c4 <__assert_fail@plt>
   150fc:	ldr	r3, [pc, #24]	; 1511c <__assert_fail@plt+0x2b58>
   15100:	ldr	r2, [pc, #92]	; 15164 <__assert_fail@plt+0x2ba0>
   15104:	ldr	r1, [pc, #24]	; 15124 <__assert_fail@plt+0x2b60>
   15108:	ldr	r0, [pc, #88]	; 15168 <__assert_fail@plt+0x2ba4>
   1510c:	bl	125c4 <__assert_fail@plt>
   15110:	pop	{r4, pc}
   15114:	andeq	r3, r1, r8, asr #19
   15118:	andeq	r3, r1, r0, lsr r7
   1511c:	muleq	r4, ip, fp
   15120:	andeq	r0, r0, lr, lsl r5
   15124:			; <UNDEFINED> instruction: 0x00042bb0
   15128:	andeq	r2, r4, r4, lsl #27
   1512c:	andeq	r0, r0, r1, lsr #10
   15130:	muleq	r4, ip, sp
   15134:	andeq	r0, r0, sl, lsr #10
   15138:			; <UNDEFINED> instruction: 0x00042db4
   1513c:	andeq	r0, r0, sl, lsr r5
   15140:	andeq	r2, r4, r0, ror #27
   15144:	andeq	r0, r0, fp, lsr r5
   15148:	andeq	r2, r4, r4, lsl #28
   1514c:	andeq	r0, r0, r5, asr #10
   15150:	andeq	r2, r4, r4, asr #28
   15154:	andeq	r0, r0, pc, lsr r5
   15158:	andeq	r2, r4, r4, lsr lr
   1515c:	andeq	r0, r0, r4, asr r5
   15160:	andeq	r2, r4, r0, ror lr
   15164:	andeq	r0, r0, r3, asr r5
   15168:	andeq	r2, r4, r8, asr lr
   1516c:	push	{r4, r5, r6, r7, r8, lr}
   15170:	mov	r5, r0
   15174:	mov	r6, r1
   15178:	mov	r7, r2
   1517c:	mov	r0, #8
   15180:	bl	2cc14 <__assert_fail@plt+0x1a650>
   15184:	mov	r4, r0
   15188:	str	r0, [r5, #104]	; 0x68
   1518c:	mov	r2, #0
   15190:	str	r2, [r0, #4]
   15194:	mov	r1, r7
   15198:	mov	r0, r6
   1519c:	bl	258c8 <__assert_fail@plt+0x13304>
   151a0:	str	r0, [r4]
   151a4:	ldr	r3, [r5, #104]	; 0x68
   151a8:	ldr	r0, [r3]
   151ac:	cmp	r0, #0
   151b0:	blt	151c4 <__assert_fail@plt+0x2c00>
   151b4:	mov	r1, #1
   151b8:	bl	21604 <__assert_fail@plt+0xf040>
   151bc:	mov	r0, #1
   151c0:	pop	{r4, r5, r6, r7, r8, pc}
   151c4:	mov	r0, #0
   151c8:	pop	{r4, r5, r6, r7, r8, pc}
   151cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151d0:	sub	sp, sp, #52	; 0x34
   151d4:	mov	r7, r0
   151d8:	mov	r5, r2
   151dc:	ldr	r0, [r2]
   151e0:	bl	189fc <__assert_fail@plt+0x6438>
   151e4:	subs	r3, r0, #0
   151e8:	str	r3, [sp, #40]	; 0x28
   151ec:	bne	152f0 <__assert_fail@plt+0x2d2c>
   151f0:	ldr	r2, [r5, #144]	; 0x90
   151f4:	ldr	r3, [pc, #640]	; 1547c <__assert_fail@plt+0x2eb8>
   151f8:	ldr	r3, [r3]
   151fc:	cmp	r2, r3
   15200:	moveq	r9, #0
   15204:	moveq	sl, r9
   15208:	streq	r9, [sp, #36]	; 0x24
   1520c:	bne	153d4 <__assert_fail@plt+0x2e10>
   15210:	ldrb	r8, [r5, #40]	; 0x28
   15214:	cmp	r8, #0
   15218:	bne	153f8 <__assert_fail@plt+0x2e34>
   1521c:	ldr	r3, [r5, #136]	; 0x88
   15220:	cmp	r3, #0
   15224:	ble	1529c <__assert_fail@plt+0x2cd8>
   15228:	mov	r4, #0
   1522c:	add	r3, r5, #88	; 0x58
   15230:	str	r3, [sp, #28]
   15234:	add	r3, r5, #44	; 0x2c
   15238:	str	r3, [sp, #32]
   1523c:	mov	fp, r4
   15240:	str	r8, [sp, #44]	; 0x2c
   15244:	ldr	r3, [r5, #132]	; 0x84
   15248:	ldr	r6, [r3, r4, lsl #2]
   1524c:	mov	r0, r6
   15250:	bl	122d0 <strlen@plt>
   15254:	mov	r8, r0
   15258:	mov	r0, r7
   1525c:	bl	122d0 <strlen@plt>
   15260:	str	fp, [sp, #16]
   15264:	str	r0, [sp, #12]
   15268:	str	r7, [sp, #8]
   1526c:	str	r9, [sp, #4]
   15270:	str	sl, [sp]
   15274:	mov	r3, r8
   15278:	mov	r2, r6
   1527c:	ldr	r1, [sp, #28]
   15280:	ldr	r0, [sp, #32]
   15284:	bl	1f3ec <__assert_fail@plt+0xce28>
   15288:	add	r4, r4, #1
   1528c:	ldr	r3, [r5, #136]	; 0x88
   15290:	cmp	r3, r4
   15294:	bgt	15244 <__assert_fail@plt+0x2c80>
   15298:	ldr	r8, [sp, #44]	; 0x2c
   1529c:	add	r1, r5, #88	; 0x58
   152a0:	add	r0, r5, #44	; 0x2c
   152a4:	bl	1f580 <__assert_fail@plt+0xcfbc>
   152a8:	ldr	r3, [r5, #148]	; 0x94
   152ac:	tst	r3, #127	; 0x7f
   152b0:	bne	152c4 <__assert_fail@plt+0x2d00>
   152b4:	asr	r3, r3, #8
   152b8:	tst	r3, #255	; 0xff
   152bc:	moveq	r8, #1
   152c0:	movne	r8, #0
   152c4:	ldr	r3, [sp, #40]	; 0x28
   152c8:	cmp	r3, #0
   152cc:	bne	15464 <__assert_fail@plt+0x2ea0>
   152d0:	ldr	r3, [sp, #36]	; 0x24
   152d4:	cmp	r3, #0
   152d8:	beq	15458 <__assert_fail@plt+0x2e94>
   152dc:	ldr	r3, [pc, #412]	; 15480 <__assert_fail@plt+0x2ebc>
   152e0:	mov	r2, #208	; 0xd0
   152e4:	ldr	r1, [pc, #408]	; 15484 <__assert_fail@plt+0x2ec0>
   152e8:	ldr	r0, [pc, #408]	; 15488 <__assert_fail@plt+0x2ec4>
   152ec:	bl	125c4 <__assert_fail@plt>
   152f0:	ldr	r3, [r5, #116]	; 0x74
   152f4:	cmp	r3, #0
   152f8:	bne	15350 <__assert_fail@plt+0x2d8c>
   152fc:	add	r6, r5, #40	; 0x28
   15300:	ldr	r3, [pc, #388]	; 1548c <__assert_fail@plt+0x2ec8>
   15304:	ldr	r4, [r3, #12]
   15308:	mov	r1, #47	; 0x2f
   1530c:	mov	r0, r4
   15310:	bl	122dc <strchr@plt>
   15314:	cmp	r0, #0
   15318:	beq	1537c <__assert_fail@plt+0x2db8>
   1531c:	mov	r0, r4
   15320:	bl	21908 <__assert_fail@plt+0xf344>
   15324:	mov	r4, r0
   15328:	mov	r2, r0
   1532c:	ldr	r3, [pc, #344]	; 1548c <__assert_fail@plt+0x2ec8>
   15330:	ldr	r1, [r3, #16]
   15334:	mov	r0, r6
   15338:	bl	1516c <__assert_fail@plt+0x2ba8>
   1533c:	mov	r6, r0
   15340:	mov	r0, r4
   15344:	bl	2e3fc <__assert_fail@plt+0x1be38>
   15348:	cmp	r6, #0
   1534c:	beq	15398 <__assert_fail@plt+0x2dd4>
   15350:	ldr	r3, [pc, #308]	; 1548c <__assert_fail@plt+0x2ec8>
   15354:	ldr	r0, [r3, #12]
   15358:	bl	21824 <__assert_fail@plt+0xf260>
   1535c:	str	r0, [sp, #36]	; 0x24
   15360:	ldrb	r3, [r0]
   15364:	cmp	r3, #47	; 0x2f
   15368:	beq	153e8 <__assert_fail@plt+0x2e24>
   1536c:	mov	r7, r0
   15370:	mov	r9, #2
   15374:	ldr	sl, [pc, #276]	; 15490 <__assert_fail@plt+0x2ecc>
   15378:	b	15210 <__assert_fail@plt+0x2c4c>
   1537c:	ldr	r2, [pc, #272]	; 15494 <__assert_fail@plt+0x2ed0>
   15380:	ldr	r3, [pc, #260]	; 1548c <__assert_fail@plt+0x2ec8>
   15384:	ldr	r1, [r3, #16]
   15388:	mov	r0, r6
   1538c:	bl	1516c <__assert_fail@plt+0x2ba8>
   15390:	mov	r6, r0
   15394:	b	15348 <__assert_fail@plt+0x2d84>
   15398:	bl	12318 <__errno_location@plt>
   1539c:	ldr	r4, [r0]
   153a0:	mov	r2, #5
   153a4:	ldr	r1, [pc, #236]	; 15498 <__assert_fail@plt+0x2ed4>
   153a8:	mov	r0, #0
   153ac:	bl	12084 <dcgettext@plt>
   153b0:	mov	r5, r0
   153b4:	mov	r1, r7
   153b8:	mov	r0, #0
   153bc:	bl	18a20 <__assert_fail@plt+0x645c>
   153c0:	mov	r3, r0
   153c4:	mov	r2, r5
   153c8:	mov	r1, r4
   153cc:	mov	r0, #1
   153d0:	bl	121bc <error@plt>
   153d4:	ldr	r3, [pc, #164]	; 15480 <__assert_fail@plt+0x2ebc>
   153d8:	mov	r2, #148	; 0x94
   153dc:	ldr	r1, [pc, #160]	; 15484 <__assert_fail@plt+0x2ec0>
   153e0:	ldr	r0, [pc, #180]	; 1549c <__assert_fail@plt+0x2ed8>
   153e4:	bl	125c4 <__assert_fail@plt>
   153e8:	ldr	r7, [sp, #36]	; 0x24
   153ec:	mov	r9, #0
   153f0:	mov	sl, r9
   153f4:	b	15210 <__assert_fail@plt+0x2c4c>
   153f8:	mov	r0, r7
   153fc:	bl	122d0 <strlen@plt>
   15400:	mov	r3, #0
   15404:	str	r3, [sp, #8]
   15408:	str	r9, [sp, #4]
   1540c:	str	sl, [sp]
   15410:	add	r3, r0, #1
   15414:	mov	r2, r7
   15418:	add	r1, r5, #88	; 0x58
   1541c:	add	r0, r5, #44	; 0x2c
   15420:	bl	1f138 <__assert_fail@plt+0xcb74>
   15424:	ldr	r3, [r5, #116]	; 0x74
   15428:	cmp	r3, #0
   1542c:	movne	r2, #1
   15430:	ldrne	r3, [pc, #84]	; 1548c <__assert_fail@plt+0x2ec8>
   15434:	strbne	r2, [r3, #32]
   15438:	ldr	r3, [sp, #36]	; 0x24
   1543c:	cmp	r3, #0
   15440:	beq	15458 <__assert_fail@plt+0x2e94>
   15444:	ldr	r3, [sp, #40]	; 0x28
   15448:	cmp	r3, #0
   1544c:	beq	152dc <__assert_fail@plt+0x2d18>
   15450:	ldr	r0, [sp, #36]	; 0x24
   15454:	bl	2e3fc <__assert_fail@plt+0x1be38>
   15458:	mov	r0, r8
   1545c:	add	sp, sp, #52	; 0x34
   15460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15464:	ldr	r0, [r5, #144]	; 0x90
   15468:	bl	2bf9c <__assert_fail@plt+0x199d8>
   1546c:	ldr	r3, [sp, #36]	; 0x24
   15470:	cmp	r3, #0
   15474:	bne	15450 <__assert_fail@plt+0x2e8c>
   15478:	b	15458 <__assert_fail@plt+0x2e94>
   1547c:	andeq	r9, r5, ip, ror #10
   15480:	andeq	r2, r4, r4, lsl #29
   15484:	andeq	r2, r4, r4, ror #29
   15488:	andeq	r2, r4, r0, lsl pc
   1548c:	andeq	r9, r5, r0, asr #28
   15490:	muleq	r4, ip, lr
   15494:	andeq	r6, r4, r0, asr #3
   15498:	andeq	r2, r4, r0, lsr #29
   1549c:	andeq	r2, r4, ip, ror #29
   154a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154a4:	sub	sp, sp, #24
   154a8:	mov	r5, r1
   154ac:	mov	r8, r3
   154b0:	ldr	r3, [pc, #1068]	; 158e4 <__assert_fail@plt+0x3320>
   154b4:	ldr	r3, [r3, #44]	; 0x2c
   154b8:	tst	r3, #32
   154bc:	bne	15580 <__assert_fail@plt+0x2fbc>
   154c0:	ldr	r3, [pc, #1056]	; 158e8 <__assert_fail@plt+0x3324>
   154c4:	ldr	r0, [r3]
   154c8:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   154cc:	ldr	r3, [pc, #1048]	; 158ec <__assert_fail@plt+0x3328>
   154d0:	ldr	r0, [r3]
   154d4:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   154d8:	ldr	r3, [pc, #1040]	; 158f0 <__assert_fail@plt+0x332c>
   154dc:	ldr	r3, [r3]
   154e0:	cmp	r3, #0
   154e4:	bne	15608 <__assert_fail@plt+0x3044>
   154e8:	bl	12420 <fork@plt>
   154ec:	mov	r6, r0
   154f0:	cmn	r0, #1
   154f4:	beq	15620 <__assert_fail@plt+0x305c>
   154f8:	cmp	r0, #0
   154fc:	bne	15794 <__assert_fail@plt+0x31d0>
   15500:	ldr	r4, [r5, #104]	; 0x68
   15504:	cmp	r4, #0
   15508:	beq	15648 <__assert_fail@plt+0x3084>
   1550c:	ldrb	r3, [r5, #100]	; 0x64
   15510:	cmp	r3, #0
   15514:	bne	1565c <__assert_fail@plt+0x3098>
   15518:	mov	r0, r4
   1551c:	bl	2bf74 <__assert_fail@plt+0x199b0>
   15520:	cmp	r0, #0
   15524:	bne	156a4 <__assert_fail@plt+0x30e0>
   15528:	bl	20204 <__assert_fail@plt+0xdc40>
   1552c:	cmp	r0, #0
   15530:	bne	1577c <__assert_fail@plt+0x31b8>
   15534:	mov	r0, r8
   15538:	bl	1fa64 <__assert_fail@plt+0xd4a0>
   1553c:	cmp	r0, #0
   15540:	beq	15784 <__assert_fail@plt+0x31c0>
   15544:	bl	12318 <__errno_location@plt>
   15548:	mov	r3, #7
   1554c:	str	r3, [r0]
   15550:	bl	12318 <__errno_location@plt>
   15554:	ldr	r4, [r0]
   15558:	ldr	r1, [r8]
   1555c:	mov	r0, #0
   15560:	bl	18a20 <__assert_fail@plt+0x645c>
   15564:	mov	r3, r0
   15568:	ldr	r2, [pc, #900]	; 158f4 <__assert_fail@plt+0x3330>
   1556c:	mov	r1, r4
   15570:	mov	r0, #0
   15574:	bl	121bc <error@plt>
   15578:	mov	r0, #1
   1557c:	bl	11ff4 <_exit@plt>
   15580:	ldr	r2, [r1, #48]	; 0x30
   15584:	mov	r3, #0
   15588:	subs	r2, r2, #1
   1558c:	sbc	r3, r3, #0
   15590:	ldr	r1, [pc, #864]	; 158f8 <__assert_fail@plt+0x3334>
   15594:	ldr	r0, [pc, #848]	; 158ec <__assert_fail@plt+0x3328>
   15598:	ldr	r0, [r0]
   1559c:	bl	1230c <fprintf@plt>
   155a0:	ldr	r3, [r5, #48]	; 0x30
   155a4:	cmp	r3, #1
   155a8:	beq	155f4 <__assert_fail@plt+0x3030>
   155ac:	mov	r4, #0
   155b0:	ldr	r9, [pc, #820]	; 158ec <__assert_fail@plt+0x3328>
   155b4:	mov	r7, r4
   155b8:	ldr	r6, [pc, #828]	; 158fc <__assert_fail@plt+0x3338>
   155bc:	ldr	sl, [r9]
   155c0:	ldr	r3, [r5, #52]	; 0x34
   155c4:	ldr	r1, [r3, r4, lsl #2]
   155c8:	mov	r0, r7
   155cc:	bl	18a20 <__assert_fail@plt+0x645c>
   155d0:	mov	r2, r0
   155d4:	mov	r1, r6
   155d8:	mov	r0, sl
   155dc:	bl	1230c <fprintf@plt>
   155e0:	add	r4, r4, #1
   155e4:	ldr	r3, [r5, #48]	; 0x30
   155e8:	sub	r3, r3, #1
   155ec:	cmp	r3, r4
   155f0:	bhi	155bc <__assert_fail@plt+0x2ff8>
   155f4:	ldr	r3, [pc, #752]	; 158ec <__assert_fail@plt+0x3328>
   155f8:	ldr	r1, [r3]
   155fc:	mov	r0, #10
   15600:	bl	1245c <fputc@plt>
   15604:	b	154c0 <__assert_fail@plt+0x2efc>
   15608:	mov	r1, #0
   1560c:	ldr	r3, [pc, #732]	; 158f0 <__assert_fail@plt+0x332c>
   15610:	str	r1, [r3]
   15614:	mov	r0, #17
   15618:	bl	12048 <signal@plt>
   1561c:	b	154e8 <__assert_fail@plt+0x2f24>
   15620:	bl	12318 <__errno_location@plt>
   15624:	ldr	r4, [r0]
   15628:	mov	r2, #5
   1562c:	ldr	r1, [pc, #716]	; 15900 <__assert_fail@plt+0x333c>
   15630:	mov	r0, #0
   15634:	bl	12084 <dcgettext@plt>
   15638:	mov	r2, r0
   1563c:	mov	r1, r4
   15640:	mov	r0, #1
   15644:	bl	121bc <error@plt>
   15648:	ldr	r3, [pc, #692]	; 15904 <__assert_fail@plt+0x3340>
   1564c:	ldr	r2, [pc, #692]	; 15908 <__assert_fail@plt+0x3344>
   15650:	ldr	r1, [pc, #692]	; 1590c <__assert_fail@plt+0x3348>
   15654:	ldr	r0, [pc, #692]	; 15910 <__assert_fail@plt+0x334c>
   15658:	bl	125c4 <__assert_fail@plt>
   1565c:	ldr	r2, [pc, #688]	; 15914 <__assert_fail@plt+0x3350>
   15660:	add	r3, sp, #12
   15664:	ldm	r2, {r0, r1, r2}
   15668:	stmia	r3!, {r0, r1}
   1566c:	strh	r2, [r3]
   15670:	mov	r0, #0
   15674:	bl	1257c <close@plt>
   15678:	cmp	r0, #0
   1567c:	blt	156ec <__assert_fail@plt+0x3128>
   15680:	mov	r1, #131072	; 0x20000
   15684:	add	r0, sp, #12
   15688:	bl	219a0 <__assert_fail@plt+0xf3dc>
   1568c:	cmp	r0, #0
   15690:	blt	15728 <__assert_fail@plt+0x3164>
   15694:	mov	r0, r4
   15698:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1569c:	cmp	r0, #0
   156a0:	beq	15528 <__assert_fail@plt+0x2f64>
   156a4:	bl	12318 <__errno_location@plt>
   156a8:	ldr	r5, [r0]
   156ac:	mov	r2, #5
   156b0:	ldr	r1, [pc, #608]	; 15918 <__assert_fail@plt+0x3354>
   156b4:	mov	r0, #0
   156b8:	bl	12084 <dcgettext@plt>
   156bc:	mov	r2, r0
   156c0:	ldr	r3, [r4]
   156c4:	cmp	r3, #0
   156c8:	blt	15754 <__assert_fail@plt+0x3190>
   156cc:	ldr	r3, [pc, #584]	; 1591c <__assert_fail@plt+0x3358>
   156d0:	mov	r1, r3
   156d4:	str	r1, [sp]
   156d8:	mov	r1, r5
   156dc:	mov	r0, #0
   156e0:	bl	121bc <error@plt>
   156e4:	mov	r0, #1
   156e8:	bl	11ff4 <_exit@plt>
   156ec:	bl	12318 <__errno_location@plt>
   156f0:	ldr	r5, [r0]
   156f4:	mov	r2, #5
   156f8:	ldr	r1, [pc, #544]	; 15920 <__assert_fail@plt+0x335c>
   156fc:	mov	r0, #0
   15700:	bl	12084 <dcgettext@plt>
   15704:	mov	r2, r0
   15708:	mov	r1, r5
   1570c:	mov	r0, #0
   15710:	bl	121bc <error@plt>
   15714:	mov	r0, r4
   15718:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1571c:	cmp	r0, #0
   15720:	beq	156e4 <__assert_fail@plt+0x3120>
   15724:	b	156a4 <__assert_fail@plt+0x30e0>
   15728:	bl	12318 <__errno_location@plt>
   1572c:	ldr	r5, [r0]
   15730:	add	r1, sp, #12
   15734:	mov	r0, #0
   15738:	bl	18a20 <__assert_fail@plt+0x645c>
   1573c:	mov	r3, r0
   15740:	ldr	r2, [pc, #428]	; 158f4 <__assert_fail@plt+0x3330>
   15744:	mov	r1, r5
   15748:	mov	r0, #0
   1574c:	bl	121bc <error@plt>
   15750:	b	15694 <__assert_fail@plt+0x30d0>
   15754:	ldr	r3, [r4, #4]
   15758:	cmp	r3, #0
   1575c:	ldrne	r1, [r4, #4]
   15760:	ldrne	r3, [pc, #444]	; 15924 <__assert_fail@plt+0x3360>
   15764:	bne	156d4 <__assert_fail@plt+0x3110>
   15768:	mov	r1, r3
   1576c:	ldrne	r3, [pc, #424]	; 1591c <__assert_fail@plt+0x3358>
   15770:	ldreq	r3, [pc, #420]	; 1591c <__assert_fail@plt+0x3358>
   15774:	moveq	r1, r3
   15778:	b	156d4 <__assert_fail@plt+0x3110>
   1577c:	bl	20220 <__assert_fail@plt+0xdc5c>
   15780:	b	15534 <__assert_fail@plt+0x2f70>
   15784:	mov	r1, r8
   15788:	ldr	r0, [r8]
   1578c:	bl	1200c <execvp@plt>
   15790:	b	15550 <__assert_fail@plt+0x2f8c>
   15794:	add	r9, r5, #108	; 0x6c
   15798:	mov	r7, #0
   1579c:	mov	r2, r7
   157a0:	mov	r1, r9
   157a4:	mov	r0, r6
   157a8:	bl	1215c <waitpid@plt>
   157ac:	cmn	r0, #1
   157b0:	bne	15810 <__assert_fail@plt+0x324c>
   157b4:	bl	12318 <__errno_location@plt>
   157b8:	ldr	r4, [r0]
   157bc:	cmp	r4, #4
   157c0:	beq	1579c <__assert_fail@plt+0x31d8>
   157c4:	mov	r2, #5
   157c8:	ldr	r1, [pc, #344]	; 15928 <__assert_fail@plt+0x3364>
   157cc:	mov	r0, #0
   157d0:	bl	12084 <dcgettext@plt>
   157d4:	mov	r5, r0
   157d8:	ldr	r1, [r8]
   157dc:	mov	r0, #0
   157e0:	bl	18a20 <__assert_fail@plt+0x645c>
   157e4:	mov	r3, r0
   157e8:	mov	r2, r5
   157ec:	mov	r1, r4
   157f0:	mov	r0, #0
   157f4:	bl	121bc <error@plt>
   157f8:	mov	r2, #1
   157fc:	ldr	r3, [pc, #296]	; 1592c <__assert_fail@plt+0x3368>
   15800:	str	r2, [r3, #28]
   15804:	mov	r0, #0
   15808:	add	sp, sp, #24
   1580c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15810:	ldr	r2, [r5, #108]	; 0x6c
   15814:	and	r3, r2, #127	; 0x7f
   15818:	add	r3, r3, #1
   1581c:	sxtb	r3, r3
   15820:	cmp	r3, #1
   15824:	ble	1588c <__assert_fail@plt+0x32c8>
   15828:	mov	r2, #5
   1582c:	ldr	r1, [pc, #252]	; 15930 <__assert_fail@plt+0x336c>
   15830:	mov	r0, #0
   15834:	bl	12084 <dcgettext@plt>
   15838:	mov	r4, r0
   1583c:	ldr	r2, [r8]
   15840:	ldr	r3, [pc, #156]	; 158e4 <__assert_fail@plt+0x3320>
   15844:	ldr	r1, [r3, #72]	; 0x48
   15848:	mov	r0, #0
   1584c:	bl	2bc6c <__assert_fail@plt+0x196a8>
   15850:	ldr	r3, [r5, #108]	; 0x6c
   15854:	and	r3, r3, #127	; 0x7f
   15858:	str	r3, [sp]
   1585c:	mov	r3, r0
   15860:	mov	r2, r4
   15864:	mov	r1, #0
   15868:	mov	r0, r1
   1586c:	bl	121bc <error@plt>
   15870:	ldrb	r3, [r5]
   15874:	cmp	r3, #0
   15878:	moveq	r0, #1
   1587c:	movne	r0, #1
   15880:	ldrne	r3, [pc, #164]	; 1592c <__assert_fail@plt+0x3368>
   15884:	strne	r0, [r3, #28]
   15888:	b	15808 <__assert_fail@plt+0x3244>
   1588c:	asr	r2, r2, #8
   15890:	uxtb	r4, r2
   15894:	ldr	r3, [pc, #72]	; 158e4 <__assert_fail@plt+0x3320>
   15898:	ldr	r3, [r3, #44]	; 0x2c
   1589c:	tst	r3, #32
   158a0:	bne	158c8 <__assert_fail@plt+0x3304>
   158a4:	cmp	r4, #0
   158a8:	moveq	r0, #1
   158ac:	beq	15808 <__assert_fail@plt+0x3244>
   158b0:	ldrb	r3, [r5]
   158b4:	cmp	r3, #0
   158b8:	mov	r0, #1
   158bc:	ldrne	r3, [pc, #104]	; 1592c <__assert_fail@plt+0x3368>
   158c0:	strne	r0, [r3, #28]
   158c4:	b	15808 <__assert_fail@plt+0x3244>
   158c8:	mov	r3, r4
   158cc:	mov	r2, r6
   158d0:	ldr	r1, [pc, #92]	; 15934 <__assert_fail@plt+0x3370>
   158d4:	ldr	r0, [pc, #16]	; 158ec <__assert_fail@plt+0x3328>
   158d8:	ldr	r0, [r0]
   158dc:	bl	1230c <fprintf@plt>
   158e0:	b	158a4 <__assert_fail@plt+0x32e0>
   158e4:	andeq	r9, r5, ip, ror #28
   158e8:	andeq	r9, r5, r4, asr r5
   158ec:	andeq	r9, r5, r8, asr #10
   158f0:	muleq	r5, r4, r2
   158f4:	andeq	r6, r4, r4, lsl #24
   158f8:	andeq	r2, r4, r8, lsl pc
   158fc:	andeq	r8, r4, ip, ror #10
   15900:	andeq	r2, r4, r4, asr #30
   15904:	muleq	r4, r4, lr
   15908:	andeq	r0, r0, r1, asr #2
   1590c:	andeq	r2, r4, r4, ror #29
   15910:	andeq	r2, r4, r0, asr pc
   15914:	andeq	r3, r4, ip, lsl r0
   15918:	andeq	r2, r4, r8, lsl #31
   1591c:	andeq	r4, r4, r0, lsl r3
   15920:	andeq	r2, r4, ip, ror #30
   15924:			; <UNDEFINED> instruction: 0x000454b0
   15928:	andeq	r2, r4, r8, lsr #31
   1592c:	andeq	r9, r5, r0, asr #28
   15930:	andeq	r2, r4, r0, asr #31
   15934:	ldrdeq	r2, [r4], -ip
   15938:	push	{r4, lr}
   1593c:	subs	r4, r0, #0
   15940:	beq	1597c <__assert_fail@plt+0x33b8>
   15944:	ldrb	r3, [r4, #16]
   15948:	cmp	r3, #0
   1594c:	movne	r0, #1
   15950:	beq	1595c <__assert_fail@plt+0x3398>
   15954:	and	r0, r0, #1
   15958:	pop	{r4, pc}
   1595c:	ldr	r0, [r4, #156]	; 0x9c
   15960:	bl	15938 <__assert_fail@plt+0x3374>
   15964:	cmp	r0, #0
   15968:	movne	r0, #1
   1596c:	bne	15954 <__assert_fail@plt+0x3390>
   15970:	ldr	r0, [r4, #160]	; 0xa0
   15974:	bl	15938 <__assert_fail@plt+0x3374>
   15978:	b	15954 <__assert_fail@plt+0x3390>
   1597c:	mov	r0, #0
   15980:	pop	{r4, pc}
   15984:	push	{r4, r5, r6, lr}
   15988:	subs	r5, r0, #0
   1598c:	beq	159bc <__assert_fail@plt+0x33f8>
   15990:	ldr	r0, [r5, #156]	; 0x9c
   15994:	bl	15984 <__assert_fail@plt+0x33c0>
   15998:	mov	r4, r0
   1599c:	ldr	r0, [r5, #160]	; 0xa0
   159a0:	bl	15984 <__assert_fail@plt+0x33c0>
   159a4:	cmp	r4, r0
   159a8:	movcs	r0, r4
   159ac:	ldr	r4, [r5, #24]
   159b0:	cmp	r0, r4
   159b4:	movcc	r0, r4
   159b8:	pop	{r4, r5, r6, pc}
   159bc:	mov	r0, #0
   159c0:	pop	{r4, r5, r6, pc}
   159c4:	push	{r4, lr}
   159c8:	mov	r4, r0
   159cc:	cmp	r1, #0
   159d0:	beq	159e0 <__assert_fail@plt+0x341c>
   159d4:	ldr	r3, [r0, #8]
   159d8:	cmp	r3, #3
   159dc:	bne	15a18 <__assert_fail@plt+0x3454>
   159e0:	ldr	r0, [r4, #156]	; 0x9c
   159e4:	cmp	r0, #0
   159e8:	beq	15a00 <__assert_fail@plt+0x343c>
   159ec:	ldr	r3, [r0, #8]
   159f0:	cmp	r3, #3
   159f4:	bne	15a2c <__assert_fail@plt+0x3468>
   159f8:	mov	r1, #0
   159fc:	bl	159c4 <__assert_fail@plt+0x3400>
   15a00:	ldr	r0, [r4, #160]	; 0xa0
   15a04:	cmp	r0, #0
   15a08:	popeq	{r4, pc}
   15a0c:	mov	r1, #0
   15a10:	bl	159c4 <__assert_fail@plt+0x3400>
   15a14:	pop	{r4, pc}
   15a18:	ldr	r3, [pc, #32]	; 15a40 <__assert_fail@plt+0x347c>
   15a1c:	ldr	r2, [pc, #32]	; 15a44 <__assert_fail@plt+0x3480>
   15a20:	ldr	r1, [pc, #32]	; 15a48 <__assert_fail@plt+0x3484>
   15a24:	ldr	r0, [pc, #32]	; 15a4c <__assert_fail@plt+0x3488>
   15a28:	bl	125c4 <__assert_fail@plt>
   15a2c:	ldr	r3, [pc, #12]	; 15a40 <__assert_fail@plt+0x347c>
   15a30:	ldr	r2, [pc, #24]	; 15a50 <__assert_fail@plt+0x348c>
   15a34:	ldr	r1, [pc, #12]	; 15a48 <__assert_fail@plt+0x3484>
   15a38:	ldr	r0, [pc, #20]	; 15a54 <__assert_fail@plt+0x3490>
   15a3c:	bl	125c4 <__assert_fail@plt>
   15a40:	andeq	r3, r4, r8, lsr #32
   15a44:	andeq	r0, r0, lr, asr #9
   15a48:	andeq	r3, r4, r0, lsl r1
   15a4c:	andeq	r3, r4, r8, lsl r1
   15a50:	ldrdeq	r0, [r0], -r3
   15a54:	andeq	r3, r4, ip, lsr #2
   15a58:	push	{r4, r5, r6, r7, r8, lr}
   15a5c:	ldr	r4, [r0]
   15a60:	cmp	r4, #0
   15a64:	beq	15a9c <__assert_fail@plt+0x34d8>
   15a68:	mov	r5, r0
   15a6c:	mov	r6, r1
   15a70:	mov	r7, r2
   15a74:	ldr	r3, [r4, #8]
   15a78:	cmp	r3, #5
   15a7c:	ldrls	pc, [pc, r3, lsl #2]
   15a80:	b	15cf4 <__assert_fail@plt+0x3730>
   15a84:			; <UNDEFINED> instruction: 0x00015abc
   15a88:			; <UNDEFINED> instruction: 0x00015bbc
   15a8c:	andeq	r5, r1, r8, ror #23
   15a90:	ldrdeq	r5, [r1], -ip
   15a94:	andeq	r5, r1, r4, lsl #24
   15a98:	andeq	r5, r1, r0, lsl #22
   15a9c:	mov	r2, #5
   15aa0:	ldr	r1, [pc, #840]	; 15df0 <__assert_fail@plt+0x382c>
   15aa4:	mov	r0, #0
   15aa8:	bl	12084 <dcgettext@plt>
   15aac:	mov	r2, r0
   15ab0:	mov	r1, #0
   15ab4:	mov	r0, #1
   15ab8:	bl	121bc <error@plt>
   15abc:	mov	r2, #5
   15ac0:	ldr	r1, [pc, #808]	; 15df0 <__assert_fail@plt+0x382c>
   15ac4:	mov	r0, #0
   15ac8:	bl	12084 <dcgettext@plt>
   15acc:	mov	r2, r0
   15ad0:	mov	r1, #0
   15ad4:	mov	r0, #1
   15ad8:	bl	121bc <error@plt>
   15adc:	mov	r2, #5
   15ae0:	ldr	r1, [pc, #780]	; 15df4 <__assert_fail@plt+0x3830>
   15ae4:	mov	r0, #0
   15ae8:	bl	12084 <dcgettext@plt>
   15aec:	ldr	r3, [r4, #4]
   15af0:	mov	r2, r0
   15af4:	mov	r1, #0
   15af8:	mov	r0, #1
   15afc:	bl	121bc <error@plt>
   15b00:	cmp	r2, #0
   15b04:	beq	15b44 <__assert_fail@plt+0x3580>
   15b08:	ldr	r3, [r2, #8]
   15b0c:	sub	r3, r3, #2
   15b10:	cmp	r3, #1
   15b14:	bls	15b68 <__assert_fail@plt+0x35a4>
   15b18:	ldrb	r3, [r4, #33]	; 0x21
   15b1c:	cmp	r3, #0
   15b20:	bne	15b74 <__assert_fail@plt+0x35b0>
   15b24:	mov	r2, #5
   15b28:	ldr	r1, [pc, #712]	; 15df8 <__assert_fail@plt+0x3834>
   15b2c:	mov	r0, #0
   15b30:	bl	12084 <dcgettext@plt>
   15b34:	mov	r2, r0
   15b38:	mov	r1, #0
   15b3c:	mov	r0, #1
   15b40:	bl	121bc <error@plt>
   15b44:	mov	r2, #5
   15b48:	ldr	r1, [pc, #684]	; 15dfc <__assert_fail@plt+0x3838>
   15b4c:	mov	r0, #0
   15b50:	bl	12084 <dcgettext@plt>
   15b54:	ldr	r3, [r4, #4]
   15b58:	mov	r2, r0
   15b5c:	mov	r1, #0
   15b60:	mov	r0, #1
   15b64:	bl	121bc <error@plt>
   15b68:	ldrb	r3, [r4, #33]	; 0x21
   15b6c:	cmp	r3, #0
   15b70:	beq	15b98 <__assert_fail@plt+0x35d4>
   15b74:	mov	r2, #5
   15b78:	ldr	r1, [pc, #640]	; 15e00 <__assert_fail@plt+0x383c>
   15b7c:	mov	r0, #0
   15b80:	bl	12084 <dcgettext@plt>
   15b84:	ldr	r3, [r7, #4]
   15b88:	mov	r2, r0
   15b8c:	mov	r1, #0
   15b90:	mov	r0, #1
   15b94:	bl	121bc <error@plt>
   15b98:	mov	r2, #5
   15b9c:	ldr	r1, [pc, #608]	; 15e04 <__assert_fail@plt+0x3840>
   15ba0:	mov	r0, #0
   15ba4:	bl	12084 <dcgettext@plt>
   15ba8:	ldr	r3, [r7, #4]
   15bac:	mov	r2, r0
   15bb0:	mov	r1, #0
   15bb4:	mov	r0, #1
   15bb8:	bl	121bc <error@plt>
   15bbc:	ldr	r3, [r4, #152]	; 0x98
   15bc0:	str	r3, [r0]
   15bc4:	ldr	r2, [r5]
   15bc8:	cmp	r2, #0
   15bcc:	beq	15be0 <__assert_fail@plt+0x361c>
   15bd0:	mov	r7, r6
   15bd4:	ldr	r3, [r2, #12]
   15bd8:	cmp	r3, r6
   15bdc:	bgt	15d14 <__assert_fail@plt+0x3750>
   15be0:	mov	r0, r4
   15be4:	pop	{r4, r5, r6, r7, r8, pc}
   15be8:	ldr	r3, [r4, #152]	; 0x98
   15bec:	str	r3, [r0]
   15bf0:	mov	r2, r4
   15bf4:	mov	r1, #4
   15bf8:	bl	15a58 <__assert_fail@plt+0x3494>
   15bfc:	str	r0, [r4, #160]	; 0xa0
   15c00:	b	15bc4 <__assert_fail@plt+0x3600>
   15c04:	ldr	r3, [r4, #152]	; 0x98
   15c08:	cmp	r3, #0
   15c0c:	beq	15c7c <__assert_fail@plt+0x36b8>
   15c10:	ldrb	r2, [r3, #33]	; 0x21
   15c14:	cmp	r2, #0
   15c18:	bne	15c7c <__assert_fail@plt+0x36b8>
   15c1c:	str	r3, [r0]
   15c20:	ldr	r3, [r3, #8]
   15c24:	cmp	r3, #5
   15c28:	beq	15ca0 <__assert_fail@plt+0x36dc>
   15c2c:	mov	r2, r4
   15c30:	mov	r1, #0
   15c34:	bl	15a58 <__assert_fail@plt+0x3494>
   15c38:	mov	r4, r0
   15c3c:	ldr	r3, [r5]
   15c40:	cmp	r3, #0
   15c44:	beq	15c5c <__assert_fail@plt+0x3698>
   15c48:	ldr	r2, [r3, #8]
   15c4c:	cmp	r2, #5
   15c50:	ldreq	r3, [r3, #152]	; 0x98
   15c54:	streq	r3, [r5]
   15c58:	beq	15bc4 <__assert_fail@plt+0x3600>
   15c5c:	mov	r2, #5
   15c60:	ldr	r1, [pc, #416]	; 15e08 <__assert_fail@plt+0x3844>
   15c64:	mov	r0, #0
   15c68:	bl	12084 <dcgettext@plt>
   15c6c:	mov	r2, r0
   15c70:	mov	r1, #0
   15c74:	mov	r0, #1
   15c78:	bl	121bc <error@plt>
   15c7c:	mov	r2, #5
   15c80:	ldr	r1, [pc, #388]	; 15e0c <__assert_fail@plt+0x3848>
   15c84:	mov	r0, #0
   15c88:	bl	12084 <dcgettext@plt>
   15c8c:	ldr	r3, [r4, #4]
   15c90:	mov	r2, r0
   15c94:	mov	r1, #0
   15c98:	mov	r0, #1
   15c9c:	bl	121bc <error@plt>
   15ca0:	ldrb	r3, [r4, #33]	; 0x21
   15ca4:	cmp	r3, #0
   15ca8:	beq	15cd4 <__assert_fail@plt+0x3710>
   15cac:	mov	r2, #5
   15cb0:	ldr	r1, [pc, #324]	; 15dfc <__assert_fail@plt+0x3838>
   15cb4:	mov	r0, #0
   15cb8:	bl	12084 <dcgettext@plt>
   15cbc:	ldr	r3, [r5]
   15cc0:	ldr	r3, [r3, #4]
   15cc4:	mov	r2, r0
   15cc8:	mov	r1, #0
   15ccc:	mov	r0, #1
   15cd0:	bl	121bc <error@plt>
   15cd4:	mov	r2, #5
   15cd8:	ldr	r1, [pc, #304]	; 15e10 <__assert_fail@plt+0x384c>
   15cdc:	mov	r0, #0
   15ce0:	bl	12084 <dcgettext@plt>
   15ce4:	mov	r2, r0
   15ce8:	mov	r1, #0
   15cec:	mov	r0, #1
   15cf0:	bl	121bc <error@plt>
   15cf4:	mov	r2, #5
   15cf8:	ldr	r1, [pc, #276]	; 15e14 <__assert_fail@plt+0x3850>
   15cfc:	mov	r0, #0
   15d00:	bl	12084 <dcgettext@plt>
   15d04:	mov	r2, r0
   15d08:	mov	r1, #0
   15d0c:	mov	r0, #1
   15d10:	bl	121bc <error@plt>
   15d14:	ldr	r3, [r2, #8]
   15d18:	cmp	r3, #5
   15d1c:	beq	15da8 <__assert_fail@plt+0x37e4>
   15d20:	ldr	r3, [r2, #8]
   15d24:	cmp	r3, #5
   15d28:	ldrls	pc, [pc, r3, lsl #2]
   15d2c:	b	15dc8 <__assert_fail@plt+0x3804>
   15d30:	andeq	r5, r1, r8, asr #26
   15d34:	andeq	r5, r1, r8, asr #26
   15d38:	andeq	r5, r1, r8, asr #26
   15d3c:	andeq	r5, r1, r8, ror #26
   15d40:	andeq	r5, r1, r8, asr #26
   15d44:	andeq	r5, r1, r0, lsr #27
   15d48:	mov	r2, #5
   15d4c:	ldr	r1, [pc, #156]	; 15df0 <__assert_fail@plt+0x382c>
   15d50:	mov	r0, #0
   15d54:	bl	12084 <dcgettext@plt>
   15d58:	mov	r2, r0
   15d5c:	mov	r1, #0
   15d60:	mov	r0, #1
   15d64:	bl	121bc <error@plt>
   15d68:	str	r4, [r2, #156]	; 0x9c
   15d6c:	ldr	r4, [r5]
   15d70:	ldr	r3, [r4, #152]	; 0x98
   15d74:	str	r3, [r5]
   15d78:	ldrsh	r1, [r4, #12]
   15d7c:	mov	r0, r5
   15d80:	bl	15a58 <__assert_fail@plt+0x3494>
   15d84:	str	r0, [r4, #160]	; 0xa0
   15d88:	ldr	r2, [r5]
   15d8c:	cmp	r2, #0
   15d90:	beq	15da0 <__assert_fail@plt+0x37dc>
   15d94:	ldr	r3, [r2, #12]
   15d98:	cmp	r7, r3
   15d9c:	blt	15d20 <__assert_fail@plt+0x375c>
   15da0:	cmp	r4, #0
   15da4:	bne	15be0 <__assert_fail@plt+0x361c>
   15da8:	mov	r2, #5
   15dac:	ldr	r1, [pc, #60]	; 15df0 <__assert_fail@plt+0x382c>
   15db0:	mov	r0, #0
   15db4:	bl	12084 <dcgettext@plt>
   15db8:	mov	r2, r0
   15dbc:	mov	r1, #0
   15dc0:	mov	r0, #1
   15dc4:	bl	121bc <error@plt>
   15dc8:	mov	r2, #5
   15dcc:	ldr	r1, [pc, #68]	; 15e18 <__assert_fail@plt+0x3854>
   15dd0:	mov	r0, #0
   15dd4:	bl	12084 <dcgettext@plt>
   15dd8:	ldr	r3, [r5]
   15ddc:	ldr	r3, [r3, #8]
   15de0:	mov	r2, r0
   15de4:	mov	r1, #0
   15de8:	mov	r0, #1
   15dec:	bl	121bc <error@plt>
   15df0:	andeq	r3, r4, ip, asr #2
   15df4:	andeq	r3, r4, r0, ror #2
   15df8:	andeq	r3, r4, r0, asr r2
   15dfc:			; <UNDEFINED> instruction: 0x000431b4
   15e00:	andeq	r3, r4, ip, lsr #4
   15e04:	andeq	r3, r4, r0, lsl #4
   15e08:	andeq	r3, r4, r4, lsr #6
   15e0c:	andeq	r3, r4, ip, ror r2
   15e10:	andeq	r3, r4, ip, ror #5
   15e14:	andeq	r3, r4, r8, ror r3
   15e18:	muleq	r4, ip, r3
   15e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   15e20:	sub	sp, sp, #12
   15e24:	ldr	r3, [r0]
   15e28:	str	r3, [sp, #4]
   15e2c:	ldr	r3, [r1]
   15e30:	add	r1, sp, #8
   15e34:	str	r3, [r1, #-8]!
   15e38:	mov	r2, #4
   15e3c:	add	r0, sp, r2
   15e40:	bl	12060 <memcmp@plt>
   15e44:	add	sp, sp, #12
   15e48:	pop	{pc}		; (ldr pc, [sp], #4)
   15e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e50:	sub	sp, sp, #12
   15e54:	subs	r8, r0, #0
   15e58:	beq	16000 <__assert_fail@plt+0x3a3c>
   15e5c:	ldr	r0, [r8, #160]	; 0xa0
   15e60:	bl	15e4c <__assert_fail@plt+0x3888>
   15e64:	ldr	r0, [r8, #156]	; 0x9c
   15e68:	bl	15e4c <__assert_fail@plt+0x3888>
   15e6c:	ldrb	r3, [r8, #18]
   15e70:	cmp	r3, #0
   15e74:	movne	fp, #3
   15e78:	bne	15e9c <__assert_fail@plt+0x38d8>
   15e7c:	ldrb	r3, [r8, #20]
   15e80:	cmp	r3, #0
   15e84:	movne	fp, #1
   15e88:	bne	15e9c <__assert_fail@plt+0x38d8>
   15e8c:	ldrb	fp, [r8, #19]
   15e90:	cmp	fp, #0
   15e94:	movne	fp, #2
   15e98:	moveq	fp, #0
   15e9c:	ldr	r3, [r8]
   15ea0:	ldr	r2, [pc, #368]	; 16018 <__assert_fail@plt+0x3a54>
   15ea4:	ldr	r1, [pc, #368]	; 1601c <__assert_fail@plt+0x3a58>
   15ea8:	cmp	r3, r2
   15eac:	cmpne	r3, r1
   15eb0:	beq	15ef0 <__assert_fail@plt+0x392c>
   15eb4:	ldr	r2, [pc, #356]	; 16020 <__assert_fail@plt+0x3a5c>
   15eb8:	cmp	r3, r2
   15ebc:	ldreq	r3, [r8, #24]
   15ec0:	beq	15ff4 <__assert_fail@plt+0x3a30>
   15ec4:	ldr	r3, [pc, #344]	; 16024 <__assert_fail@plt+0x3a60>
   15ec8:	ldr	r3, [r3]
   15ecc:	cmp	r3, #0
   15ed0:	beq	15f04 <__assert_fail@plt+0x3940>
   15ed4:	ldr	r3, [r8]
   15ed8:	add	r9, sp, #8
   15edc:	str	r3, [r9, #-8]!
   15ee0:	mov	r5, #0
   15ee4:	mov	r7, #59	; 0x3b
   15ee8:	ldr	sl, [pc, #312]	; 16028 <__assert_fail@plt+0x3a64>
   15eec:	b	15f8c <__assert_fail@plt+0x39c8>
   15ef0:	ldrb	r3, [r8, #40]	; 0x28
   15ef4:	cmp	r3, #0
   15ef8:	movne	r3, #7
   15efc:	moveq	r3, #8
   15f00:	b	15ff4 <__assert_fail@plt+0x3a30>
   15f04:	ldr	r6, [pc, #284]	; 16028 <__assert_fail@plt+0x3a64>
   15f08:	ldr	r3, [pc, #284]	; 1602c <__assert_fail@plt+0x3a68>
   15f0c:	mov	r2, #8
   15f10:	mov	r1, #59	; 0x3b
   15f14:	mov	r0, r6
   15f18:	bl	124e0 <qsort@plt>
   15f1c:	mov	r5, r6
   15f20:	add	r6, r6, #464	; 0x1d0
   15f24:	add	r4, r5, #8
   15f28:	mov	r1, r5
   15f2c:	mov	r0, r4
   15f30:	bl	15e1c <__assert_fail@plt+0x3858>
   15f34:	cmp	r0, #0
   15f38:	blt	16008 <__assert_fail@plt+0x3a44>
   15f3c:	mov	r1, r4
   15f40:	mov	r0, r5
   15f44:	bl	15e1c <__assert_fail@plt+0x3858>
   15f48:	cmp	r0, #0
   15f4c:	bgt	15f6c <__assert_fail@plt+0x39a8>
   15f50:	mov	r5, r4
   15f54:	cmp	r4, r6
   15f58:	bne	15f24 <__assert_fail@plt+0x3960>
   15f5c:	mov	r2, #1
   15f60:	ldr	r3, [pc, #188]	; 16024 <__assert_fail@plt+0x3a60>
   15f64:	str	r2, [r3]
   15f68:	b	15ed4 <__assert_fail@plt+0x3910>
   15f6c:	ldr	r3, [pc, #188]	; 16030 <__assert_fail@plt+0x3a6c>
   15f70:	ldr	r2, [pc, #188]	; 16034 <__assert_fail@plt+0x3a70>
   15f74:	ldr	r1, [pc, #188]	; 16038 <__assert_fail@plt+0x3a74>
   15f78:	ldr	r0, [pc, #188]	; 1603c <__assert_fail@plt+0x3a78>
   15f7c:	bl	125c4 <__assert_fail@plt>
   15f80:	mov	r7, r4
   15f84:	cmp	r4, r5
   15f88:	bls	15fbc <__assert_fail@plt+0x39f8>
   15f8c:	add	r4, r7, r5
   15f90:	lsr	r4, r4, #1
   15f94:	add	r6, sl, r4, lsl #3
   15f98:	mov	r1, r6
   15f9c:	mov	r0, r9
   15fa0:	bl	15e1c <__assert_fail@plt+0x3858>
   15fa4:	cmp	r0, #0
   15fa8:	blt	15f80 <__assert_fail@plt+0x39bc>
   15fac:	ble	15fe8 <__assert_fail@plt+0x3a24>
   15fb0:	add	r5, r4, #1
   15fb4:	cmp	r5, r7
   15fb8:	bcc	15f8c <__assert_fail@plt+0x39c8>
   15fbc:	mov	r2, #5
   15fc0:	ldr	r1, [pc, #120]	; 16040 <__assert_fail@plt+0x3a7c>
   15fc4:	mov	r0, #0
   15fc8:	bl	12084 <dcgettext@plt>
   15fcc:	ldr	r3, [r8, #4]
   15fd0:	mov	r2, r0
   15fd4:	mov	r1, #0
   15fd8:	mov	r0, r1
   15fdc:	bl	121bc <error@plt>
   15fe0:	mov	r3, #10
   15fe4:	b	15ff4 <__assert_fail@plt+0x3a30>
   15fe8:	cmp	r6, #0
   15fec:	beq	15fbc <__assert_fail@plt+0x39f8>
   15ff0:	ldr	r3, [r6, #4]
   15ff4:	cmp	fp, r3
   15ff8:	movcc	fp, r3
   15ffc:	str	fp, [r8, #24]
   16000:	add	sp, sp, #12
   16004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16008:	ldr	r2, [pc, #52]	; 16044 <__assert_fail@plt+0x3a80>
   1600c:	mov	r1, #0
   16010:	mov	r0, #1
   16014:	bl	121bc <error@plt>
   16018:			; <UNDEFINED> instruction: 0x00013fbc
   1601c:			; <UNDEFINED> instruction: 0x00013fb0
   16020:	andeq	sl, r1, ip, ror r5
   16024:	andeq	r9, r5, r0, ror r5
   16028:	muleq	r5, r8, r2
   1602c:	andeq	r5, r1, ip, lsl lr
   16030:	andeq	r3, r4, ip, lsr r0
   16034:	strdeq	r0, [r0], -r5
   16038:	andeq	r3, r4, r0, lsl r1
   1603c:	andeq	r3, r4, r4, asr #7
   16040:	ldrdeq	r3, [r4], -r0
   16044:	andeq	r3, r4, r0, asr #8
   16048:	push	{r4, r5, r6, lr}
   1604c:	mov	r5, r0
   16050:	mov	r4, r1
   16054:	mov	r6, r2
   16058:	mov	r0, #176	; 0xb0
   1605c:	bl	2d0f4 <__assert_fail@plt+0x1ab30>
   16060:	mov	r3, #3
   16064:	str	r3, [r0, #8]
   16068:	str	r4, [r0, #12]
   1606c:	mov	r3, #0
   16070:	str	r3, [r0, #24]
   16074:	cmp	r4, #2
   16078:	beq	160b4 <__assert_fail@plt+0x3af0>
   1607c:	cmp	r4, #3
   16080:	beq	160f8 <__assert_fail@plt+0x3b34>
   16084:	cmp	r4, #1
   16088:	beq	16098 <__assert_fail@plt+0x3ad4>
   1608c:	str	r5, [r0, #160]	; 0xa0
   16090:	str	r0, [r6]
   16094:	pop	{r4, r5, r6, pc}
   16098:	ldr	r3, [pc, #164]	; 16144 <__assert_fail@plt+0x3b80>
   1609c:	str	r3, [r0]
   160a0:	ldr	r3, [pc, #160]	; 16148 <__assert_fail@plt+0x3b84>
   160a4:	str	r3, [r0, #4]
   160a8:	mov	r3, #1065353216	; 0x3f800000
   160ac:	str	r3, [r0, #28]
   160b0:	b	1608c <__assert_fail@plt+0x3ac8>
   160b4:	ldr	r3, [pc, #144]	; 1614c <__assert_fail@plt+0x3b88>
   160b8:	str	r3, [r0]
   160bc:	ldr	r3, [pc, #140]	; 16150 <__assert_fail@plt+0x3b8c>
   160c0:	str	r3, [r0, #4]
   160c4:	vldr	s15, [r5, #28]
   160c8:	vldr	s14, [pc, #108]	; 1613c <__assert_fail@plt+0x3b78>
   160cc:	vcmpe.f32	s15, s14
   160d0:	vmrs	APSR_nzcv, fpscr
   160d4:	ble	160e4 <__assert_fail@plt+0x3b20>
   160d8:	vldr	s15, [pc, #92]	; 1613c <__assert_fail@plt+0x3b78>
   160dc:	vstr	s15, [r0, #28]
   160e0:	b	1608c <__assert_fail@plt+0x3ac8>
   160e4:	vldr	s14, [pc, #84]	; 16140 <__assert_fail@plt+0x3b7c>
   160e8:	vcmp.f32	s15, s14
   160ec:	vmrs	APSR_nzcv, fpscr
   160f0:	vmovmi.f32	s15, s14
   160f4:	b	160dc <__assert_fail@plt+0x3b18>
   160f8:	ldr	r3, [pc, #84]	; 16154 <__assert_fail@plt+0x3b90>
   160fc:	str	r3, [r0]
   16100:	ldr	r3, [pc, #80]	; 16158 <__assert_fail@plt+0x3b94>
   16104:	str	r3, [r0, #4]
   16108:	vldr	s15, [r5, #28]
   1610c:	vldr	s14, [pc, #40]	; 1613c <__assert_fail@plt+0x3b78>
   16110:	vcmpe.f32	s15, s14
   16114:	vmrs	APSR_nzcv, fpscr
   16118:	ble	16128 <__assert_fail@plt+0x3b64>
   1611c:	vldr	s15, [pc, #24]	; 1613c <__assert_fail@plt+0x3b78>
   16120:	vstr	s15, [r0, #28]
   16124:	b	1608c <__assert_fail@plt+0x3ac8>
   16128:	vldr	s14, [pc, #16]	; 16140 <__assert_fail@plt+0x3b7c>
   1612c:	vcmp.f32	s15, s14
   16130:	vmrs	APSR_nzcv, fpscr
   16134:	vmovmi.f32	s15, s14
   16138:	b	16120 <__assert_fail@plt+0x3b5c>
   1613c:	svccc	0x00800000
   16140:	andeq	r0, r0, r0
   16144:	andeq	r3, r1, ip, lsl #24
   16148:	andeq	r3, r4, r4, ror #8
   1614c:	andeq	r3, r1, ip, asr r8
   16150:	andeq	r3, r4, r8, ror #8
   16154:	andeq	r3, r1, r0, lsr #16
   16158:	andeq	r3, r4, ip, ror #8
   1615c:	push	{r4, r5, r6, r7, r8, lr}
   16160:	mov	r7, r0
   16164:	cmp	r1, #0
   16168:	movne	r6, #16
   1616c:	moveq	r6, #0
   16170:	ldr	r3, [pc, #100]	; 161dc <__assert_fail@plt+0x3c18>
   16174:	ldr	r3, [r3, #4]
   16178:	cmp	r3, #0
   1617c:	beq	161bc <__assert_fail@plt+0x3bf8>
   16180:	mov	r4, #0
   16184:	ldr	r5, [pc, #80]	; 161dc <__assert_fail@plt+0x3c18>
   16188:	ldr	r3, [r5, #8]
   1618c:	mov	r2, r6
   16190:	ldr	r1, [r3, r4, lsl #2]
   16194:	mov	r0, r7
   16198:	bl	121e0 <fnmatch@plt>
   1619c:	cmp	r0, #0
   161a0:	beq	161d4 <__assert_fail@plt+0x3c10>
   161a4:	add	r4, r4, #1
   161a8:	ldr	r3, [r5, #4]
   161ac:	cmp	r3, r4
   161b0:	bhi	16188 <__assert_fail@plt+0x3bc4>
   161b4:	mov	r0, #0
   161b8:	pop	{r4, r5, r6, r7, r8, pc}
   161bc:	mov	r2, r6
   161c0:	ldr	r1, [pc, #24]	; 161e0 <__assert_fail@plt+0x3c1c>
   161c4:	bl	121e0 <fnmatch@plt>
   161c8:	clz	r0, r0
   161cc:	lsr	r0, r0, #5
   161d0:	pop	{r4, r5, r6, r7, r8, pc}
   161d4:	mov	r0, #1
   161d8:	pop	{r4, r5, r6, r7, r8, pc}
   161dc:	andeq	r9, r5, r0, ror r5
   161e0:	andeq	r6, r4, r0, asr #3
   161e4:	push	{r4, lr}
   161e8:	mov	r2, r1
   161ec:	ldr	r3, [r1, #36]	; 0x24
   161f0:	cmp	r3, #0
   161f4:	beq	16208 <__assert_fail@plt+0x3c44>
   161f8:	ldr	r2, [r1, #4]
   161fc:	ldr	r1, [pc, #20]	; 16218 <__assert_fail@plt+0x3c54>
   16200:	bl	1230c <fprintf@plt>
   16204:	pop	{r4, pc}
   16208:	mov	r1, r0
   1620c:	ldr	r0, [r2, #4]
   16210:	bl	12558 <fputs@plt>
   16214:	pop	{r4, pc}
   16218:	andeq	r3, r4, r0, ror r4
   1621c:	ldr	r3, [pc, #4]	; 16228 <__assert_fail@plt+0x3c64>
   16220:	ldr	r0, [r3, #12]
   16224:	bx	lr
   16228:	andeq	r9, r5, r0, ror r5
   1622c:	push	{r4, lr}
   16230:	subs	r4, r0, #0
   16234:	beq	16290 <__assert_fail@plt+0x3ccc>
   16238:	ldr	r0, [r4, #160]	; 0xa0
   1623c:	cmp	r0, #0
   16240:	beq	16248 <__assert_fail@plt+0x3c84>
   16244:	bl	1622c <__assert_fail@plt+0x3c68>
   16248:	ldr	r0, [r4, #156]	; 0x9c
   1624c:	cmp	r0, #0
   16250:	beq	16258 <__assert_fail@plt+0x3c94>
   16254:	bl	1622c <__assert_fail@plt+0x3c68>
   16258:	ldr	r3, [r4, #8]
   1625c:	cmp	r3, #5
   16260:	beq	162a4 <__assert_fail@plt+0x3ce0>
   16264:	cmp	r3, #4
   16268:	beq	162b8 <__assert_fail@plt+0x3cf4>
   1626c:	cmp	r3, #5
   16270:	ldrls	pc, [pc, r3, lsl #2]
   16274:	b	16484 <__assert_fail@plt+0x3ec0>
   16278:	andeq	r6, r1, ip, asr #5
   1627c:	andeq	r6, r1, r4, lsl r3
   16280:	andeq	r6, r1, ip, asr r3
   16284:			; <UNDEFINED> instruction: 0x000163b8
   16288:	andeq	r6, r1, r8, ror r4
   1628c:	andeq	r6, r1, r8, ror r4
   16290:	ldr	r3, [pc, #520]	; 164a0 <__assert_fail@plt+0x3edc>
   16294:	ldr	r2, [pc, #520]	; 164a4 <__assert_fail@plt+0x3ee0>
   16298:	ldr	r1, [pc, #520]	; 164a8 <__assert_fail@plt+0x3ee4>
   1629c:	ldr	r0, [pc, #520]	; 164ac <__assert_fail@plt+0x3ee8>
   162a0:	bl	125c4 <__assert_fail@plt>
   162a4:	ldr	r3, [pc, #500]	; 164a0 <__assert_fail@plt+0x3edc>
   162a8:	ldr	r2, [pc, #512]	; 164b0 <__assert_fail@plt+0x3eec>
   162ac:	ldr	r1, [pc, #500]	; 164a8 <__assert_fail@plt+0x3ee4>
   162b0:	ldr	r0, [pc, #508]	; 164b4 <__assert_fail@plt+0x3ef0>
   162b4:	bl	125c4 <__assert_fail@plt>
   162b8:	ldr	r3, [pc, #480]	; 164a0 <__assert_fail@plt+0x3edc>
   162bc:	ldr	r2, [pc, #500]	; 164b8 <__assert_fail@plt+0x3ef4>
   162c0:	ldr	r1, [pc, #480]	; 164a8 <__assert_fail@plt+0x3ee4>
   162c4:	ldr	r0, [pc, #496]	; 164bc <__assert_fail@plt+0x3ef8>
   162c8:	bl	125c4 <__assert_fail@plt>
   162cc:	ldr	r3, [r4, #160]	; 0xa0
   162d0:	cmp	r3, #0
   162d4:	bne	162ec <__assert_fail@plt+0x3d28>
   162d8:	ldr	r3, [r4, #156]	; 0x9c
   162dc:	cmp	r3, #0
   162e0:	bne	16300 <__assert_fail@plt+0x3d3c>
   162e4:	vldr	s0, [r4, #28]
   162e8:	pop	{r4, pc}
   162ec:	ldr	r3, [pc, #428]	; 164a0 <__assert_fail@plt+0x3edc>
   162f0:	ldr	r2, [pc, #456]	; 164c0 <__assert_fail@plt+0x3efc>
   162f4:	ldr	r1, [pc, #428]	; 164a8 <__assert_fail@plt+0x3ee4>
   162f8:	ldr	r0, [pc, #452]	; 164c4 <__assert_fail@plt+0x3f00>
   162fc:	bl	125c4 <__assert_fail@plt>
   16300:	ldr	r3, [pc, #408]	; 164a0 <__assert_fail@plt+0x3edc>
   16304:	ldr	r2, [pc, #444]	; 164c8 <__assert_fail@plt+0x3f04>
   16308:	ldr	r1, [pc, #408]	; 164a8 <__assert_fail@plt+0x3ee4>
   1630c:	ldr	r0, [pc, #440]	; 164cc <__assert_fail@plt+0x3f08>
   16310:	bl	125c4 <__assert_fail@plt>
   16314:	ldr	r3, [r4, #160]	; 0xa0
   16318:	cmp	r3, #0
   1631c:	bne	16334 <__assert_fail@plt+0x3d70>
   16320:	ldr	r3, [r4, #156]	; 0x9c
   16324:	cmp	r3, #0
   16328:	bne	16348 <__assert_fail@plt+0x3d84>
   1632c:	vldr	s0, [r4, #28]
   16330:	pop	{r4, pc}
   16334:	ldr	r3, [pc, #356]	; 164a0 <__assert_fail@plt+0x3edc>
   16338:	ldr	r2, [pc, #400]	; 164d0 <__assert_fail@plt+0x3f0c>
   1633c:	ldr	r1, [pc, #356]	; 164a8 <__assert_fail@plt+0x3ee4>
   16340:	ldr	r0, [pc, #380]	; 164c4 <__assert_fail@plt+0x3f00>
   16344:	bl	125c4 <__assert_fail@plt>
   16348:	ldr	r3, [pc, #336]	; 164a0 <__assert_fail@plt+0x3edc>
   1634c:	ldr	r2, [pc, #384]	; 164d4 <__assert_fail@plt+0x3f10>
   16350:	ldr	r1, [pc, #336]	; 164a8 <__assert_fail@plt+0x3ee4>
   16354:	ldr	r0, [pc, #368]	; 164cc <__assert_fail@plt+0x3f08>
   16358:	bl	125c4 <__assert_fail@plt>
   1635c:	ldr	r2, [r4]
   16360:	ldr	r3, [pc, #368]	; 164d8 <__assert_fail@plt+0x3f14>
   16364:	cmp	r2, r3
   16368:	bne	16390 <__assert_fail@plt+0x3dcc>
   1636c:	ldr	r3, [r4, #156]	; 0x9c
   16370:	cmp	r3, #0
   16374:	bne	163a4 <__assert_fail@plt+0x3de0>
   16378:	ldr	r3, [r4, #160]	; 0xa0
   1637c:	vldr	s15, [r3, #28]
   16380:	vldr	s0, [pc, #272]	; 16498 <__assert_fail@plt+0x3ed4>
   16384:	vsub.f32	s0, s0, s15
   16388:	vstr	s0, [r4, #28]
   1638c:	pop	{r4, pc}
   16390:	ldr	r3, [pc, #264]	; 164a0 <__assert_fail@plt+0x3edc>
   16394:	ldr	r2, [pc, #320]	; 164dc <__assert_fail@plt+0x3f18>
   16398:	ldr	r1, [pc, #264]	; 164a8 <__assert_fail@plt+0x3ee4>
   1639c:	ldr	r0, [pc, #316]	; 164e0 <__assert_fail@plt+0x3f1c>
   163a0:	bl	125c4 <__assert_fail@plt>
   163a4:	ldr	r3, [pc, #244]	; 164a0 <__assert_fail@plt+0x3edc>
   163a8:	ldr	r2, [pc, #308]	; 164e4 <__assert_fail@plt+0x3f20>
   163ac:	ldr	r1, [pc, #244]	; 164a8 <__assert_fail@plt+0x3ee4>
   163b0:	ldr	r0, [pc, #276]	; 164cc <__assert_fail@plt+0x3f08>
   163b4:	bl	125c4 <__assert_fail@plt>
   163b8:	ldr	r3, [r4]
   163bc:	ldr	r2, [pc, #292]	; 164e8 <__assert_fail@plt+0x3f24>
   163c0:	cmp	r3, r2
   163c4:	beq	16420 <__assert_fail@plt+0x3e5c>
   163c8:	ldr	r2, [pc, #284]	; 164ec <__assert_fail@plt+0x3f28>
   163cc:	cmp	r3, r2
   163d0:	beq	16470 <__assert_fail@plt+0x3eac>
   163d4:	ldr	r2, [pc, #276]	; 164f0 <__assert_fail@plt+0x3f2c>
   163d8:	cmp	r3, r2
   163dc:	bne	16448 <__assert_fail@plt+0x3e84>
   163e0:	ldr	r3, [r4, #160]	; 0xa0
   163e4:	cmp	r3, #0
   163e8:	vldrne	s15, [r3, #28]
   163ec:	vldreq	s15, [pc, #164]	; 16498 <__assert_fail@plt+0x3ed4>
   163f0:	ldr	r3, [r4, #156]	; 0x9c
   163f4:	cmp	r3, #0
   163f8:	vldrne	s0, [r3, #28]
   163fc:	vldreq	s0, [pc, #148]	; 16498 <__assert_fail@plt+0x3ed4>
   16400:	vadd.f32	s0, s0, s15
   16404:	vldr	s15, [pc, #140]	; 16498 <__assert_fail@plt+0x3ed4>
   16408:	vcmpe.f32	s0, s15
   1640c:	vmrs	APSR_nzcv, fpscr
   16410:	ble	1645c <__assert_fail@plt+0x3e98>
   16414:	vldr	s0, [pc, #124]	; 16498 <__assert_fail@plt+0x3ed4>
   16418:	vstr	s0, [r4, #28]
   1641c:	pop	{r4, pc}
   16420:	ldr	r3, [r4, #160]	; 0xa0
   16424:	cmp	r3, #0
   16428:	vldrne	s15, [r3, #28]
   1642c:	vldreq	s15, [pc, #100]	; 16498 <__assert_fail@plt+0x3ed4>
   16430:	ldr	r3, [r4, #156]	; 0x9c
   16434:	cmp	r3, #0
   16438:	vldrne	s0, [r3, #28]
   1643c:	vldreq	s0, [pc, #84]	; 16498 <__assert_fail@plt+0x3ed4>
   16440:	vmul.f32	s0, s0, s15
   16444:	b	16404 <__assert_fail@plt+0x3e40>
   16448:	ldr	r3, [pc, #80]	; 164a0 <__assert_fail@plt+0x3edc>
   1644c:	ldr	r2, [pc, #160]	; 164f4 <__assert_fail@plt+0x3f30>
   16450:	ldr	r1, [pc, #80]	; 164a8 <__assert_fail@plt+0x3ee4>
   16454:	ldr	r0, [pc, #156]	; 164f8 <__assert_fail@plt+0x3f34>
   16458:	bl	125c4 <__assert_fail@plt>
   1645c:	vcmp.f32	s0, #0.0
   16460:	vmrs	APSR_nzcv, fpscr
   16464:	vldr	s15, [pc, #48]	; 1649c <__assert_fail@plt+0x3ed8>
   16468:	vmovmi.f32	s0, s15
   1646c:	b	16418 <__assert_fail@plt+0x3e54>
   16470:	vldr	s0, [pc, #32]	; 16498 <__assert_fail@plt+0x3ed4>
   16474:	b	16418 <__assert_fail@plt+0x3e54>
   16478:	vldr	s0, [pc, #24]	; 16498 <__assert_fail@plt+0x3ed4>
   1647c:	vstr	s0, [r4, #28]
   16480:	pop	{r4, pc}
   16484:	ldr	r3, [pc, #20]	; 164a0 <__assert_fail@plt+0x3edc>
   16488:	mov	r2, #1216	; 0x4c0
   1648c:	ldr	r1, [pc, #20]	; 164a8 <__assert_fail@plt+0x3ee4>
   16490:	ldr	r0, [pc, #96]	; 164f8 <__assert_fail@plt+0x3f34>
   16494:	bl	125c4 <__assert_fail@plt>
   16498:	svccc	0x00800000
   1649c:	andeq	r0, r0, r0
   164a0:	andeq	r3, r4, ip, asr #32
   164a4:	andeq	r0, r0, r4, lsl #9
   164a8:	andeq	r3, r4, r0, lsl r1
   164ac:	andeq	r3, r4, r8, ror r4
   164b0:	andeq	r0, r0, fp, lsl #9
   164b4:	andeq	r3, r4, r4, lsl #9
   164b8:	andeq	r0, r0, ip, lsl #9
   164bc:	andeq	r3, r4, r0, lsr #9
   164c0:	muleq	r0, r1, r4
   164c4:			; <UNDEFINED> instruction: 0x000434b8
   164c8:	muleq	r0, r2, r4
   164cc:	ldrdeq	r3, [r4], -r0
   164d0:	muleq	r0, r6, r4
   164d4:	muleq	r0, r7, r4
   164d8:	andeq	r4, r1, r0, ror #6
   164dc:	muleq	r0, ip, r4
   164e0:	andeq	r3, r4, r8, ror #9
   164e4:	muleq	r0, sp, r4
   164e8:	andeq	r3, r1, r0, lsr #16
   164ec:	andeq	r3, r1, ip, lsl #24
   164f0:	andeq	r3, r1, ip, asr r8
   164f4:			; <UNDEFINED> instruction: 0x000004b4
   164f8:	andeq	r6, r4, r8, asr sp
   164fc:	push	{r4, lr}
   16500:	ldr	r3, [r0]
   16504:	cmp	r3, #0
   16508:	beq	16594 <__assert_fail@plt+0x3fd0>
   1650c:	mov	r4, r0
   16510:	cmp	r3, #2
   16514:	beq	165a8 <__assert_fail@plt+0x3fe4>
   16518:	mov	r0, #176	; 0xb0
   1651c:	bl	2d0f4 <__assert_fail@plt+0x1ab30>
   16520:	ldr	r3, [pc, #148]	; 165bc <__assert_fail@plt+0x3ff8>
   16524:	ldr	r3, [r3, #16]
   16528:	cmp	r3, #0
   1652c:	ldr	r3, [pc, #136]	; 165bc <__assert_fail@plt+0x3ff8>
   16530:	streq	r0, [r3, #16]
   16534:	ldrne	r2, [r3, #20]
   16538:	strne	r0, [r2, #152]	; 0x98
   1653c:	str	r0, [r3, #20]
   16540:	ldr	r3, [pc, #116]	; 165bc <__assert_fail@plt+0x3ff8>
   16544:	ldr	r0, [r3, #20]
   16548:	str	r4, [r0, #172]	; 0xac
   1654c:	mov	r3, #0
   16550:	str	r3, [r0, #8]
   16554:	str	r3, [r0, #12]
   16558:	mov	r2, #1
   1655c:	strb	r2, [r0, #18]
   16560:	strb	r2, [r0, #19]
   16564:	mov	r2, #10
   16568:	str	r2, [r0, #24]
   1656c:	ldr	r2, [pc, #76]	; 165c0 <__assert_fail@plt+0x3ffc>
   16570:	str	r2, [r0, #36]	; 0x24
   16574:	ldr	r2, [pc, #72]	; 165c4 <__assert_fail@plt+0x4000>
   16578:	ldrb	r2, [r2, #15]
   1657c:	strb	r2, [r0, #32]
   16580:	mov	r2, #1065353216	; 0x3f800000
   16584:	str	r2, [r0, #28]
   16588:	str	r3, [r0, #168]	; 0xa8
   1658c:	str	r3, [r0, #164]	; 0xa4
   16590:	pop	{r4, pc}
   16594:	ldr	r3, [pc, #44]	; 165c8 <__assert_fail@plt+0x4004>
   16598:	ldr	r2, [pc, #44]	; 165cc <__assert_fail@plt+0x4008>
   1659c:	ldr	r1, [pc, #44]	; 165d0 <__assert_fail@plt+0x400c>
   165a0:	ldr	r0, [pc, #44]	; 165d4 <__assert_fail@plt+0x4010>
   165a4:	bl	125c4 <__assert_fail@plt>
   165a8:	ldr	r3, [pc, #24]	; 165c8 <__assert_fail@plt+0x4004>
   165ac:	ldr	r2, [pc, #36]	; 165d8 <__assert_fail@plt+0x4014>
   165b0:	ldr	r1, [pc, #24]	; 165d0 <__assert_fail@plt+0x400c>
   165b4:	ldr	r0, [pc, #32]	; 165dc <__assert_fail@plt+0x4018>
   165b8:	bl	125c4 <__assert_fail@plt>
   165bc:	andeq	r9, r5, r0, ror r5
   165c0:	andeq	r3, r4, r8, asr #10
   165c4:	andeq	r9, r5, ip, ror #28
   165c8:	andeq	r3, r4, r4, rrx
   165cc:	andeq	r0, r0, sp, asr #11
   165d0:	andeq	r3, r4, r0, lsl r1
   165d4:	andeq	r3, r4, r4, lsl #10
   165d8:	andeq	r0, r0, lr, asr #11
   165dc:	andeq	r3, r4, r0, lsr #10
   165e0:	push	{r4, lr}
   165e4:	bl	164fc <__assert_fail@plt+0x3f38>
   165e8:	cmp	r0, #0
   165ec:	movne	r3, #0
   165f0:	strne	r3, [r0, #36]	; 0x24
   165f4:	pop	{r4, pc}
   165f8:	push	{r4, r5, r6, lr}
   165fc:	mov	r4, r0
   16600:	mov	r5, r1
   16604:	ldr	r3, [pc, #212]	; 166e0 <__assert_fail@plt+0x411c>
   16608:	ldr	r0, [r3, #24]
   1660c:	cmp	r0, #0
   16610:	beq	16650 <__assert_fail@plt+0x408c>
   16614:	ldr	r3, [pc, #196]	; 166e0 <__assert_fail@plt+0x411c>
   16618:	ldr	r3, [r3, #20]
   1661c:	cmp	r3, #0
   16620:	beq	1663c <__assert_fail@plt+0x4078>
   16624:	ldr	r3, [r3, #8]
   16628:	cmp	r3, #1
   1662c:	beq	1669c <__assert_fail@plt+0x40d8>
   16630:	bcc	1667c <__assert_fail@plt+0x40b8>
   16634:	cmp	r3, #5
   16638:	beq	1669c <__assert_fail@plt+0x40d8>
   1663c:	mov	r0, r4
   16640:	bl	164fc <__assert_fail@plt+0x3f38>
   16644:	str	r5, [r0, #36]	; 0x24
   16648:	str	r4, [r0, #172]	; 0xac
   1664c:	pop	{r4, r5, r6, pc}
   16650:	ldr	r0, [pc, #140]	; 166e4 <__assert_fail@plt+0x4120>
   16654:	bl	1eeb4 <__assert_fail@plt+0xc8f0>
   16658:	ldr	r3, [pc, #128]	; 166e0 <__assert_fail@plt+0x411c>
   1665c:	str	r0, [r3, #24]
   16660:	cmp	r0, #0
   16664:	bne	16614 <__assert_fail@plt+0x4050>
   16668:	ldr	r3, [pc, #120]	; 166e8 <__assert_fail@plt+0x4124>
   1666c:	ldr	r2, [pc, #120]	; 166ec <__assert_fail@plt+0x4128>
   16670:	ldr	r1, [pc, #120]	; 166f0 <__assert_fail@plt+0x412c>
   16674:	ldr	r0, [pc, #120]	; 166f4 <__assert_fail@plt+0x4130>
   16678:	bl	125c4 <__assert_fail@plt>
   1667c:	mov	r2, #5
   16680:	ldr	r1, [pc, #112]	; 166f8 <__assert_fail@plt+0x4134>
   16684:	mov	r0, #0
   16688:	bl	12084 <dcgettext@plt>
   1668c:	mov	r2, r0
   16690:	mov	r1, #0
   16694:	mov	r0, #1
   16698:	bl	121bc <error@plt>
   1669c:	bl	165e0 <__assert_fail@plt+0x401c>
   166a0:	ldr	r3, [pc, #84]	; 166fc <__assert_fail@plt+0x4138>
   166a4:	str	r3, [r0]
   166a8:	ldr	r3, [pc, #80]	; 16700 <__assert_fail@plt+0x413c>
   166ac:	str	r3, [r0, #4]
   166b0:	mov	r3, #3
   166b4:	str	r3, [r0, #8]
   166b8:	str	r3, [r0, #12]
   166bc:	mov	r3, #0
   166c0:	strb	r3, [r0, #18]
   166c4:	strb	r3, [r0, #19]
   166c8:	strb	r3, [r0, #20]
   166cc:	str	r3, [r0, #36]	; 0x24
   166d0:	str	r3, [r0, #40]	; 0x28
   166d4:	strb	r3, [r0, #16]
   166d8:	strb	r3, [r0, #17]
   166dc:	b	1663c <__assert_fail@plt+0x4078>
   166e0:	andeq	r9, r5, r0, ror r5
   166e4:	andeq	r3, r4, r8, ror #10
   166e8:	andeq	r3, r4, r4, ror r0
   166ec:	strdeq	r0, [r0], -r8
   166f0:	andeq	r3, r4, r0, lsl r1
   166f4:	andeq	r3, r4, ip, ror #10
   166f8:	andeq	r3, r4, r0, lsl #11
   166fc:	andeq	r3, r1, r0, lsr #16
   16700:	andeq	r3, r4, ip, ror #8
   16704:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16708:	sub	sp, sp, #16
   1670c:	subs	r7, r1, #0
   16710:	beq	169fc <__assert_fail@plt+0x4438>
   16714:	mov	r5, r2
   16718:	mov	r4, r0
   1671c:	cmp	r2, #0
   16720:	ble	16754 <__assert_fail@plt+0x4190>
   16724:	mov	r6, #0
   16728:	ldr	sl, [pc, #836]	; 16a74 <__assert_fail@plt+0x44b0>
   1672c:	mov	r9, #4
   16730:	mov	r8, #1
   16734:	mov	r3, r4
   16738:	mov	r2, r9
   1673c:	mov	r1, r8
   16740:	mov	r0, sl
   16744:	bl	12138 <fwrite@plt>
   16748:	add	r6, r6, #1
   1674c:	cmp	r5, r6
   16750:	bne	16734 <__assert_fail@plt+0x4170>
   16754:	mov	r3, r4
   16758:	mov	r2, #6
   1675c:	mov	r1, #1
   16760:	ldr	r0, [pc, #784]	; 16a78 <__assert_fail@plt+0x44b4>
   16764:	bl	12138 <fwrite@plt>
   16768:	mov	r1, r7
   1676c:	mov	r0, r4
   16770:	bl	161e4 <__assert_fail@plt+0x3c20>
   16774:	ldrsh	r1, [r7, #8]
   16778:	cmp	r1, #0
   1677c:	beq	168b0 <__assert_fail@plt+0x42ec>
   16780:	mov	r3, #0
   16784:	ldr	r0, [pc, #752]	; 16a7c <__assert_fail@plt+0x44b8>
   16788:	add	r3, r3, #1
   1678c:	lsl	r2, r3, #3
   16790:	ldrsh	r2, [r2, r0]
   16794:	cmn	r2, #1
   16798:	cmpne	r1, r2
   1679c:	bne	16788 <__assert_fail@plt+0x41c4>
   167a0:	ldr	r2, [pc, #728]	; 16a80 <__assert_fail@plt+0x44bc>
   167a4:	add	r3, r2, r3, lsl #3
   167a8:	ldr	r2, [r3, #100]	; 0x64
   167ac:	ldrsh	ip, [r7, #12]
   167b0:	cmp	ip, #0
   167b4:	beq	168b8 <__assert_fail@plt+0x42f4>
   167b8:	mov	r3, #0
   167bc:	ldr	lr, [pc, #704]	; 16a84 <__assert_fail@plt+0x44c0>
   167c0:	add	r3, r3, #1
   167c4:	lsl	r1, r3, #3
   167c8:	ldrsh	r0, [r1, lr]
   167cc:	cmn	r0, #1
   167d0:	cmpne	ip, r0
   167d4:	bne	167c0 <__assert_fail@plt+0x41fc>
   167d8:	ldr	r1, [pc, #672]	; 16a80 <__assert_fail@plt+0x44bc>
   167dc:	add	r3, r1, r3, lsl #3
   167e0:	ldr	r3, [r3, #156]	; 0x9c
   167e4:	ldr	r1, [pc, #668]	; 16a88 <__assert_fail@plt+0x44c4>
   167e8:	mov	r0, r4
   167ec:	bl	1230c <fprintf@plt>
   167f0:	ldr	r1, [r7, #24]
   167f4:	ldr	r3, [pc, #656]	; 16a8c <__assert_fail@plt+0x44c8>
   167f8:	ldr	r3, [r3, #472]	; 0x1d8
   167fc:	cmp	r1, r3
   16800:	beq	168c0 <__assert_fail@plt+0x42fc>
   16804:	mov	r3, #1
   16808:	ldr	r0, [pc, #640]	; 16a90 <__assert_fail@plt+0x44cc>
   1680c:	ldr	r2, [r0, r3, lsl #3]
   16810:	cmp	r1, r2
   16814:	beq	168c4 <__assert_fail@plt+0x4300>
   16818:	add	r3, r3, #1
   1681c:	cmp	r3, #11
   16820:	bne	1680c <__assert_fail@plt+0x4248>
   16824:	ldr	r2, [pc, #616]	; 16a94 <__assert_fail@plt+0x44d0>
   16828:	vldr	s14, [r7, #28]
   1682c:	vcvt.f64.f32	d7, s14
   16830:	ldrb	r0, [r7, #16]
   16834:	ldr	r1, [pc, #604]	; 16a98 <__assert_fail@plt+0x44d4>
   16838:	ldr	r3, [pc, #604]	; 16a9c <__assert_fail@plt+0x44d8>
   1683c:	cmp	r0, #0
   16840:	moveq	r3, r1
   16844:	str	r3, [sp, #8]
   16848:	vstr	d7, [sp]
   1684c:	ldr	r1, [pc, #588]	; 16aa0 <__assert_fail@plt+0x44dc>
   16850:	mov	r0, r4
   16854:	bl	1230c <fprintf@plt>
   16858:	ldrh	r3, [r7, #18]
   1685c:	cmp	r3, #0
   16860:	bne	16870 <__assert_fail@plt+0x42ac>
   16864:	ldrb	r3, [r7, #20]
   16868:	cmp	r3, #0
   1686c:	beq	16920 <__assert_fail@plt+0x435c>
   16870:	mov	r3, r4
   16874:	mov	r2, #6
   16878:	mov	r1, #1
   1687c:	ldr	r0, [pc, #544]	; 16aa4 <__assert_fail@plt+0x44e0>
   16880:	bl	12138 <fwrite@plt>
   16884:	ldrb	r3, [r7, #18]
   16888:	cmp	r3, #0
   1688c:	bne	168d4 <__assert_fail@plt+0x4310>
   16890:	ldrb	r3, [r7, #20]
   16894:	cmp	r3, #0
   16898:	bne	16a04 <__assert_fail@plt+0x4440>
   1689c:	ldrb	r3, [r7, #19]
   168a0:	cmp	r3, #0
   168a4:	beq	16920 <__assert_fail@plt+0x435c>
   168a8:	ldr	r2, [pc, #492]	; 16a9c <__assert_fail@plt+0x44d8>
   168ac:	b	16914 <__assert_fail@plt+0x4350>
   168b0:	mov	r3, #0
   168b4:	b	167a0 <__assert_fail@plt+0x41dc>
   168b8:	mov	r3, #0
   168bc:	b	167d8 <__assert_fail@plt+0x4214>
   168c0:	mov	r3, #0
   168c4:	ldr	r2, [pc, #448]	; 16a8c <__assert_fail@plt+0x44c8>
   168c8:	add	r3, r2, r3, lsl #3
   168cc:	ldr	r2, [r3, #476]	; 0x1dc
   168d0:	b	16828 <__assert_fail@plt+0x4264>
   168d4:	mov	r3, r4
   168d8:	mov	r2, #4
   168dc:	mov	r1, #1
   168e0:	ldr	r0, [pc, #448]	; 16aa8 <__assert_fail@plt+0x44e4>
   168e4:	bl	12138 <fwrite@plt>
   168e8:	ldrb	r3, [r7, #20]
   168ec:	cmp	r3, #0
   168f0:	beq	16a60 <__assert_fail@plt+0x449c>
   168f4:	ldr	r2, [pc, #432]	; 16aac <__assert_fail@plt+0x44e8>
   168f8:	ldr	r1, [pc, #432]	; 16ab0 <__assert_fail@plt+0x44ec>
   168fc:	mov	r0, r4
   16900:	bl	1230c <fprintf@plt>
   16904:	ldrb	r3, [r7, #19]
   16908:	cmp	r3, #0
   1690c:	beq	16920 <__assert_fail@plt+0x435c>
   16910:	ldr	r2, [pc, #404]	; 16aac <__assert_fail@plt+0x44e8>
   16914:	ldr	r1, [pc, #408]	; 16ab4 <__assert_fail@plt+0x44f0>
   16918:	mov	r0, r4
   1691c:	bl	1230c <fprintf@plt>
   16920:	mov	r1, r4
   16924:	mov	r0, #10
   16928:	bl	1245c <fputc@plt>
   1692c:	cmp	r5, #0
   16930:	ble	16964 <__assert_fail@plt+0x43a0>
   16934:	mov	r6, #0
   16938:	ldr	sl, [pc, #308]	; 16a74 <__assert_fail@plt+0x44b0>
   1693c:	mov	r9, #4
   16940:	mov	r8, #1
   16944:	mov	r3, r4
   16948:	mov	r2, r9
   1694c:	mov	r1, r8
   16950:	mov	r0, sl
   16954:	bl	12138 <fwrite@plt>
   16958:	add	r6, r6, #1
   1695c:	cmp	r5, r6
   16960:	bne	16944 <__assert_fail@plt+0x4380>
   16964:	ldr	r3, [r7, #156]	; 0x9c
   16968:	cmp	r3, #0
   1696c:	beq	16a0c <__assert_fail@plt+0x4448>
   16970:	mov	r3, r4
   16974:	mov	r2, #6
   16978:	mov	r1, #1
   1697c:	ldr	r0, [pc, #308]	; 16ab8 <__assert_fail@plt+0x44f4>
   16980:	bl	12138 <fwrite@plt>
   16984:	add	r2, r5, #1
   16988:	ldr	r1, [r7, #156]	; 0x9c
   1698c:	mov	r0, r4
   16990:	bl	16704 <__assert_fail@plt+0x4140>
   16994:	cmp	r5, #0
   16998:	ble	169cc <__assert_fail@plt+0x4408>
   1699c:	mov	r6, #0
   169a0:	ldr	sl, [pc, #204]	; 16a74 <__assert_fail@plt+0x44b0>
   169a4:	mov	r9, #4
   169a8:	mov	r8, #1
   169ac:	mov	r3, r4
   169b0:	mov	r2, r9
   169b4:	mov	r1, r8
   169b8:	mov	r0, sl
   169bc:	bl	12138 <fwrite@plt>
   169c0:	add	r6, r6, #1
   169c4:	cmp	r5, r6
   169c8:	bne	169ac <__assert_fail@plt+0x43e8>
   169cc:	ldr	r3, [r7, #160]	; 0xa0
   169d0:	cmp	r3, #0
   169d4:	beq	16a48 <__assert_fail@plt+0x4484>
   169d8:	mov	r3, r4
   169dc:	mov	r2, #7
   169e0:	mov	r1, #1
   169e4:	ldr	r0, [pc, #208]	; 16abc <__assert_fail@plt+0x44f8>
   169e8:	bl	12138 <fwrite@plt>
   169ec:	add	r2, r5, #1
   169f0:	ldr	r1, [r7, #160]	; 0xa0
   169f4:	mov	r0, r4
   169f8:	bl	16704 <__assert_fail@plt+0x4140>
   169fc:	add	sp, sp, #16
   16a00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a04:	ldr	r2, [pc, #144]	; 16a9c <__assert_fail@plt+0x44d8>
   16a08:	b	168f8 <__assert_fail@plt+0x4334>
   16a0c:	ldr	r3, [r7, #160]	; 0xa0
   16a10:	cmp	r3, #0
   16a14:	beq	16a30 <__assert_fail@plt+0x446c>
   16a18:	mov	r3, r4
   16a1c:	mov	r2, #9
   16a20:	mov	r1, #1
   16a24:	ldr	r0, [pc, #148]	; 16ac0 <__assert_fail@plt+0x44fc>
   16a28:	bl	12138 <fwrite@plt>
   16a2c:	b	16994 <__assert_fail@plt+0x43d0>
   16a30:	mov	r3, r4
   16a34:	mov	r2, #13
   16a38:	mov	r1, #1
   16a3c:	ldr	r0, [pc, #128]	; 16ac4 <__assert_fail@plt+0x4500>
   16a40:	bl	12138 <fwrite@plt>
   16a44:	b	169fc <__assert_fail@plt+0x4438>
   16a48:	mov	r3, r4
   16a4c:	mov	r2, #10
   16a50:	mov	r1, #1
   16a54:	ldr	r0, [pc, #108]	; 16ac8 <__assert_fail@plt+0x4504>
   16a58:	bl	12138 <fwrite@plt>
   16a5c:	b	169fc <__assert_fail@plt+0x4438>
   16a60:	ldrb	r3, [r7, #19]
   16a64:	cmp	r3, #0
   16a68:	beq	16920 <__assert_fail@plt+0x435c>
   16a6c:	ldr	r2, [pc, #56]	; 16aac <__assert_fail@plt+0x44e8>
   16a70:	b	16914 <__assert_fail@plt+0x4350>
   16a74:			; <UNDEFINED> instruction: 0x000435b8
   16a78:	andeq	r3, r4, r0, asr #11
   16a7c:	andeq	r3, r4, r8, lsl #1
   16a80:	andeq	r3, r4, r8, lsr #32
   16a84:	andeq	r3, r4, r0, asr #1
   16a88:	andeq	r3, r4, r8, asr #11
   16a8c:	muleq	r5, r8, r2
   16a90:	andeq	r9, r5, r0, ror r4
   16a94:	andeq	r3, r4, ip, lsr #11
   16a98:			; <UNDEFINED> instruction: 0x000435b4
   16a9c:	andeq	r4, r4, r0, lsl r3
   16aa0:	ldrdeq	r3, [r4], -ip
   16aa4:	andeq	r3, r4, ip, lsl #12
   16aa8:	andeq	r2, r4, r8, asr #15
   16aac:	andeq	r3, r4, r4, ror #8
   16ab0:	andeq	r3, r4, r4, lsl r6
   16ab4:	andeq	r3, r4, ip, lsl r6
   16ab8:	andeq	r3, r4, r4, lsr r6
   16abc:	andeq	r3, r4, r8, asr #12
   16ac0:	andeq	r3, r4, ip, lsr r6
   16ac4:	andeq	r3, r4, r4, lsr #12
   16ac8:	andeq	r3, r4, r0, asr r6
   16acc:	ldr	r3, [r0]
   16ad0:	cmp	r3, #0
   16ad4:	bxeq	lr
   16ad8:	push	{r4, r5, r6, r7, r8, lr}
   16adc:	mov	r7, r1
   16ae0:	mov	r4, r0
   16ae4:	ldr	r3, [pc, #356]	; 16c50 <__assert_fail@plt+0x468c>
   16ae8:	ldr	r3, [r3, #44]	; 0x2c
   16aec:	tst	r3, #8
   16af0:	bne	16b0c <__assert_fail@plt+0x4548>
   16af4:	ldr	r0, [r4]
   16af8:	bl	1622c <__assert_fail@plt+0x3c68>
   16afc:	mov	r6, #0
   16b00:	mov	r5, r6
   16b04:	mov	r8, r6
   16b08:	b	16ba0 <__assert_fail@plt+0x45dc>
   16b0c:	ldr	r5, [pc, #320]	; 16c54 <__assert_fail@plt+0x4690>
   16b10:	ldr	r2, [pc, #320]	; 16c58 <__assert_fail@plt+0x4694>
   16b14:	ldr	r1, [pc, #320]	; 16c5c <__assert_fail@plt+0x4698>
   16b18:	ldr	r0, [r5]
   16b1c:	bl	1230c <fprintf@plt>
   16b20:	mov	r2, #2
   16b24:	ldr	r1, [r4]
   16b28:	ldr	r0, [r5]
   16b2c:	bl	16704 <__assert_fail@plt+0x4140>
   16b30:	b	16af4 <__assert_fail@plt+0x4530>
   16b34:	ldr	r2, [r3, #12]
   16b38:	vldr	s14, [ip, #28]
   16b3c:	vldr	s15, [r0, #28]
   16b40:	vcmp.f32	s14, s15
   16b44:	vmrs	APSR_nzcv, fpscr
   16b48:	beq	16b84 <__assert_fail@plt+0x45c0>
   16b4c:	cmp	r2, #2
   16b50:	beq	16bd0 <__assert_fail@plt+0x460c>
   16b54:	vcmpe.f32	s14, s15
   16b58:	vmrs	APSR_nzcv, fpscr
   16b5c:	bpl	16b84 <__assert_fail@plt+0x45c0>
   16b60:	ldr	r3, [r3, #156]	; 0x9c
   16b64:	cmp	r3, #0
   16b68:	beq	16be0 <__assert_fail@plt+0x461c>
   16b6c:	ldr	ip, [r3, #160]	; 0xa0
   16b70:	ldr	r2, [ip, #24]
   16b74:	cmp	r2, lr
   16b78:	beq	16b34 <__assert_fail@plt+0x4570>
   16b7c:	cmp	r2, lr
   16b80:	bcc	16b60 <__assert_fail@plt+0x459c>
   16b84:	cmp	r3, #0
   16b88:	beq	16be0 <__assert_fail@plt+0x461c>
   16b8c:	ldr	r2, [r3, #156]	; 0x9c
   16b90:	str	r2, [r1, #156]	; 0x9c
   16b94:	cmp	r2, #0
   16b98:	moveq	r6, r1
   16b9c:	str	r1, [r3, #156]	; 0x9c
   16ba0:	ldr	r1, [r4]
   16ba4:	cmp	r1, #0
   16ba8:	beq	16bf4 <__assert_fail@plt+0x4630>
   16bac:	ldr	r3, [r1, #156]	; 0x9c
   16bb0:	str	r3, [r4]
   16bb4:	str	r8, [r1, #156]	; 0x9c
   16bb8:	cmp	r5, #0
   16bbc:	beq	16be0 <__assert_fail@plt+0x461c>
   16bc0:	ldr	r0, [r1, #160]	; 0xa0
   16bc4:	ldr	lr, [r0, #24]
   16bc8:	mov	r3, r5
   16bcc:	b	16b6c <__assert_fail@plt+0x45a8>
   16bd0:	vcmpe.f32	s14, s15
   16bd4:	vmrs	APSR_nzcv, fpscr
   16bd8:	bmi	16b84 <__assert_fail@plt+0x45c0>
   16bdc:	b	16b60 <__assert_fail@plt+0x459c>
   16be0:	str	r5, [r1, #156]	; 0x9c
   16be4:	cmp	r6, #0
   16be8:	moveq	r6, r1
   16bec:	mov	r5, r1
   16bf0:	b	16ba0 <__assert_fail@plt+0x45dc>
   16bf4:	ldr	r3, [pc, #84]	; 16c50 <__assert_fail@plt+0x468c>
   16bf8:	ldr	r3, [r3, #44]	; 0x2c
   16bfc:	tst	r3, #8
   16c00:	bne	16c28 <__assert_fail@plt+0x4664>
   16c04:	mov	r0, r5
   16c08:	bl	1622c <__assert_fail@plt+0x3c68>
   16c0c:	ldr	r3, [r7]
   16c10:	str	r3, [r6, #156]	; 0x9c
   16c14:	str	r5, [r7]
   16c18:	mov	r3, #0
   16c1c:	str	r3, [r4, #4]
   16c20:	str	r3, [r4]
   16c24:	pop	{r4, r5, r6, r7, r8, pc}
   16c28:	ldr	r8, [pc, #36]	; 16c54 <__assert_fail@plt+0x4690>
   16c2c:	ldr	r2, [pc, #44]	; 16c60 <__assert_fail@plt+0x469c>
   16c30:	ldr	r1, [pc, #36]	; 16c5c <__assert_fail@plt+0x4698>
   16c34:	ldr	r0, [r8]
   16c38:	bl	1230c <fprintf@plt>
   16c3c:	mov	r2, #2
   16c40:	mov	r1, r5
   16c44:	ldr	r0, [r8]
   16c48:	bl	16704 <__assert_fail@plt+0x4140>
   16c4c:	b	16c04 <__assert_fail@plt+0x4640>
   16c50:	andeq	r9, r5, ip, ror #28
   16c54:	andeq	r9, r5, r8, asr #10
   16c58:	andeq	r3, r4, ip, asr r6
   16c5c:	andeq	r3, r4, r8, ror r6
   16c60:	andeq	r3, r4, r0, lsl #13
   16c64:	push	{r4, r5, r6, r7, r8, lr}
   16c68:	mov	r4, r0
   16c6c:	mov	r7, r1
   16c70:	mov	r8, r3
   16c74:	ldr	r6, [sp, #24]
   16c78:	ldr	r5, [pc, #84]	; 16cd4 <__assert_fail@plt+0x4710>
   16c7c:	ldr	r3, [pc, #84]	; 16cd8 <__assert_fail@plt+0x4714>
   16c80:	str	r3, [r5, #28]
   16c84:	mov	r1, r6
   16c88:	mov	r0, r2
   16c8c:	bl	16acc <__assert_fail@plt+0x4508>
   16c90:	ldr	r3, [r5, #28]
   16c94:	mov	r1, r6
   16c98:	mov	r0, r8
   16c9c:	blx	r3
   16ca0:	cmp	r7, #0
   16ca4:	pople	{r4, r5, r6, r7, r8, pc}
   16ca8:	mov	r5, #0
   16cac:	ldr	r8, [pc, #32]	; 16cd4 <__assert_fail@plt+0x4710>
   16cb0:	mov	r1, r6
   16cb4:	mov	r0, r4
   16cb8:	ldr	r3, [r8, #28]
   16cbc:	blx	r3
   16cc0:	add	r5, r5, #1
   16cc4:	add	r4, r4, #8
   16cc8:	cmp	r7, r5
   16ccc:	bne	16cb0 <__assert_fail@plt+0x46ec>
   16cd0:	pop	{r4, r5, r6, r7, r8, pc}
   16cd4:	andeq	r9, r5, r0, ror r5
   16cd8:	andeq	r6, r1, ip, asr #21
   16cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ce0:	sub	sp, sp, #116	; 0x74
   16ce4:	mov	r3, #0
   16ce8:	str	r3, [sp, #104]	; 0x68
   16cec:	str	r3, [sp, #108]	; 0x6c
   16cf0:	str	r3, [sp, #96]	; 0x60
   16cf4:	str	r3, [sp, #100]	; 0x64
   16cf8:	subs	r5, r0, #0
   16cfc:	beq	170e0 <__assert_fail@plt+0x4b1c>
   16d00:	ldr	ip, [r5]
   16d04:	cmp	ip, r3
   16d08:	beq	170e8 <__assert_fail@plt+0x4b24>
   16d0c:	add	r3, sp, #8
   16d10:	add	r1, sp, #96	; 0x60
   16d14:	mov	r2, #0
   16d18:	str	r2, [r3, #4]
   16d1c:	str	r2, [r3], #8
   16d20:	cmp	r3, r1
   16d24:	bne	16d18 <__assert_fail@plt+0x4754>
   16d28:	ldr	r0, [ip, #156]	; 0x9c
   16d2c:	cmp	r0, #0
   16d30:	beq	16da8 <__assert_fail@plt+0x47e4>
   16d34:	mov	r2, ip
   16d38:	b	16d44 <__assert_fail@plt+0x4780>
   16d3c:	mov	r2, r0
   16d40:	mov	r0, r3
   16d44:	ldr	r1, [r2, #12]
   16d48:	ldr	r3, [r0, #156]	; 0x9c
   16d4c:	cmp	r3, #0
   16d50:	bne	16d3c <__assert_fail@plt+0x4778>
   16d54:	add	r2, r2, #156	; 0x9c
   16d58:	ldr	r3, [r0, #8]
   16d5c:	cmp	r3, #3
   16d60:	beq	170f0 <__assert_fail@plt+0x4b2c>
   16d64:	bl	16048 <__assert_fail@plt+0x3a84>
   16d68:	ldr	r3, [pc, #956]	; 1712c <__assert_fail@plt+0x4b68>
   16d6c:	ldr	r3, [r3, #44]	; 0x2c
   16d70:	tst	r3, #9
   16d74:	bne	17100 <__assert_fail@plt+0x4b3c>
   16d78:	ldr	ip, [r5]
   16d7c:	cmp	ip, #0
   16d80:	beq	170b8 <__assert_fail@plt+0x4af4>
   16d84:	ldr	r3, [ip, #8]
   16d88:	cmp	r3, #3
   16d8c:	ldreq	r8, [ip, #12]
   16d90:	movne	r8, #0
   16d94:	mov	r7, #0
   16d98:	ldr	sl, [pc, #912]	; 17130 <__assert_fail@plt+0x4b6c>
   16d9c:	ldr	r9, [pc, #912]	; 17134 <__assert_fail@plt+0x4b70>
   16da0:	add	fp, r9, #472	; 0x1d8
   16da4:	b	1702c <__assert_fail@plt+0x4a68>
   16da8:	mov	r2, r5
   16dac:	mov	r0, ip
   16db0:	mov	r1, #3
   16db4:	b	16d58 <__assert_fail@plt+0x4794>
   16db8:	ldr	r3, [r4, #12]
   16dbc:	cmp	r3, r8
   16dc0:	beq	17044 <__assert_fail@plt+0x4a80>
   16dc4:	mov	r2, r5
   16dc8:	mov	r1, r8
   16dcc:	mov	r0, r4
   16dd0:	bl	16048 <__assert_fail@plt+0x3a84>
   16dd4:	mov	r4, r0
   16dd8:	b	17044 <__assert_fail@plt+0x4a80>
   16ddc:	cmp	r8, #1
   16de0:	beq	17018 <__assert_fail@plt+0x4a54>
   16de4:	ldrb	r3, [r6, #16]
   16de8:	cmp	r3, #0
   16dec:	bne	17098 <__assert_fail@plt+0x4ad4>
   16df0:	ldr	r3, [r6]
   16df4:	ldr	r2, [pc, #828]	; 17138 <__assert_fail@plt+0x4b74>
   16df8:	cmp	r3, r2
   16dfc:	cmpne	r3, sl
   16e00:	moveq	r2, #1
   16e04:	movne	r2, #0
   16e08:	ldr	r1, [pc, #812]	; 1713c <__assert_fail@plt+0x4b78>
   16e0c:	cmp	r3, r1
   16e10:	orreq	r2, r2, #1
   16e14:	ldr	r1, [pc, #804]	; 17140 <__assert_fail@plt+0x4b7c>
   16e18:	cmp	r3, r1
   16e1c:	orreq	r2, r2, #1
   16e20:	cmp	r2, #0
   16e24:	bne	16ef8 <__assert_fail@plt+0x4934>
   16e28:	ldr	r2, [pc, #764]	; 1712c <__assert_fail@plt+0x4b68>
   16e2c:	ldrh	r2, [r2, #68]	; 0x44
   16e30:	ldr	r0, [pc, #780]	; 17144 <__assert_fail@plt+0x4b80>
   16e34:	ldr	r1, [pc, #780]	; 17148 <__assert_fail@plt+0x4b84>
   16e38:	cmp	r3, r0
   16e3c:	cmpne	r3, r1
   16e40:	moveq	r1, #1
   16e44:	movne	r1, #0
   16e48:	cmp	r2, #0
   16e4c:	orreq	r1, r1, #1
   16e50:	ldr	r0, [pc, #756]	; 1714c <__assert_fail@plt+0x4b88>
   16e54:	cmp	r3, r0
   16e58:	orreq	r1, r1, #1
   16e5c:	ldr	r0, [pc, #748]	; 17150 <__assert_fail@plt+0x4b8c>
   16e60:	cmp	r3, r0
   16e64:	orreq	r1, r1, #1
   16e68:	cmp	r1, #0
   16e6c:	bne	16e7c <__assert_fail@plt+0x48b8>
   16e70:	ldr	r1, [r6, #24]
   16e74:	cmp	r1, #0
   16e78:	beq	16ef8 <__assert_fail@plt+0x4934>
   16e7c:	ldr	r1, [pc, #720]	; 17154 <__assert_fail@plt+0x4b90>
   16e80:	cmp	r3, r1
   16e84:	beq	16f68 <__assert_fail@plt+0x49a4>
   16e88:	cmp	r2, #1
   16e8c:	bls	16ea0 <__assert_fail@plt+0x48dc>
   16e90:	ldr	r3, [r6, #24]
   16e94:	sub	r3, r3, #1
   16e98:	cmp	r3, #1
   16e9c:	bls	16f8c <__assert_fail@plt+0x49c8>
   16ea0:	cmp	r2, #2
   16ea4:	bls	17028 <__assert_fail@plt+0x4a64>
   16ea8:	ldr	r3, [pc, #636]	; 1712c <__assert_fail@plt+0x4b68>
   16eac:	ldr	r3, [r3, #44]	; 0x2c
   16eb0:	tst	r3, #8
   16eb4:	bne	16f9c <__assert_fail@plt+0x49d8>
   16eb8:	ldr	r3, [r4, #160]	; 0xa0
   16ebc:	ldr	r3, [r3, #24]
   16ec0:	add	r2, sp, #8
   16ec4:	ldr	r1, [r4, #156]	; 0x9c
   16ec8:	str	r1, [r5]
   16ecc:	ldr	r1, [r2, r3, lsl #3]
   16ed0:	str	r1, [r4, #156]	; 0x9c
   16ed4:	str	r4, [r2, r3, lsl #3]
   16ed8:	add	r2, sp, #112	; 0x70
   16edc:	add	r2, r2, r3, lsl #3
   16ee0:	ldr	r2, [r2, #-100]	; 0xffffff9c
   16ee4:	cmp	r2, #0
   16ee8:	addeq	r2, sp, #112	; 0x70
   16eec:	addeq	r3, r2, r3, lsl #3
   16ef0:	streq	r4, [r3, #-100]	; 0xffffff9c
   16ef4:	b	1702c <__assert_fail@plt+0x4a68>
   16ef8:	ldr	r3, [pc, #556]	; 1712c <__assert_fail@plt+0x4b68>
   16efc:	ldr	r3, [r3, #44]	; 0x2c
   16f00:	tst	r3, #8
   16f04:	bne	16f2c <__assert_fail@plt+0x4968>
   16f08:	ldr	r3, [r4, #156]	; 0x9c
   16f0c:	str	r3, [r5]
   16f10:	ldr	r3, [sp, #96]	; 0x60
   16f14:	str	r3, [r4, #156]	; 0x9c
   16f18:	str	r4, [sp, #96]	; 0x60
   16f1c:	ldr	r3, [sp, #100]	; 0x64
   16f20:	cmp	r3, #0
   16f24:	streq	r4, [sp, #100]	; 0x64
   16f28:	b	1702c <__assert_fail@plt+0x4a68>
   16f2c:	ldr	r6, [pc, #548]	; 17158 <__assert_fail@plt+0x4b94>
   16f30:	ldr	r3, [pc, #500]	; 1712c <__assert_fail@plt+0x4b68>
   16f34:	ldrh	r2, [r3, #68]	; 0x44
   16f38:	ldr	r1, [pc, #540]	; 1715c <__assert_fail@plt+0x4b98>
   16f3c:	ldr	r0, [r6]
   16f40:	bl	1230c <fprintf@plt>
   16f44:	ldr	r1, [r4, #160]	; 0xa0
   16f48:	ldr	r0, [r6]
   16f4c:	bl	161e4 <__assert_fail@plt+0x3c20>
   16f50:	ldr	r3, [r6]
   16f54:	mov	r2, #16
   16f58:	mov	r1, #1
   16f5c:	ldr	r0, [pc, #508]	; 17160 <__assert_fail@plt+0x4b9c>
   16f60:	bl	12138 <fwrite@plt>
   16f64:	b	16f08 <__assert_fail@plt+0x4944>
   16f68:	ldr	r3, [r4, #156]	; 0x9c
   16f6c:	str	r3, [r5]
   16f70:	ldr	r3, [sp, #104]	; 0x68
   16f74:	str	r3, [r4, #156]	; 0x9c
   16f78:	str	r4, [sp, #104]	; 0x68
   16f7c:	ldr	r3, [sp, #108]	; 0x6c
   16f80:	cmp	r3, #0
   16f84:	streq	r4, [sp, #108]	; 0x6c
   16f88:	b	1702c <__assert_fail@plt+0x4a68>
   16f8c:	ldrb	r3, [r6, #18]
   16f90:	cmp	r3, #0
   16f94:	beq	16ea8 <__assert_fail@plt+0x48e4>
   16f98:	b	16ea0 <__assert_fail@plt+0x48dc>
   16f9c:	ldr	r6, [pc, #436]	; 17158 <__assert_fail@plt+0x4b94>
   16fa0:	ldr	r1, [pc, #444]	; 17164 <__assert_fail@plt+0x4ba0>
   16fa4:	ldr	r0, [r6]
   16fa8:	bl	1230c <fprintf@plt>
   16fac:	ldr	r1, [r4, #160]	; 0xa0
   16fb0:	ldr	r0, [r6]
   16fb4:	bl	161e4 <__assert_fail@plt+0x3c20>
   16fb8:	ldr	r0, [r6]
   16fbc:	ldr	r3, [r4, #160]	; 0xa0
   16fc0:	ldr	r1, [r3, #24]
   16fc4:	ldr	r3, [r9, #472]	; 0x1d8
   16fc8:	cmp	r1, r3
   16fcc:	beq	16ffc <__assert_fail@plt+0x4a38>
   16fd0:	mov	r3, #1
   16fd4:	ldr	r2, [fp, r3, lsl #3]
   16fd8:	cmp	r1, r2
   16fdc:	beq	17000 <__assert_fail@plt+0x4a3c>
   16fe0:	add	r3, r3, #1
   16fe4:	cmp	r3, #11
   16fe8:	bne	16fd4 <__assert_fail@plt+0x4a10>
   16fec:	ldr	r2, [pc, #372]	; 17168 <__assert_fail@plt+0x4ba4>
   16ff0:	ldr	r1, [pc, #372]	; 1716c <__assert_fail@plt+0x4ba8>
   16ff4:	bl	1230c <fprintf@plt>
   16ff8:	b	16eb8 <__assert_fail@plt+0x48f4>
   16ffc:	mov	r3, #0
   17000:	add	r3, r9, r3, lsl #3
   17004:	ldr	r2, [r3, #476]	; 0x1dc
   17008:	b	16ff0 <__assert_fail@plt+0x4a2c>
   1700c:	add	r0, r6, #160	; 0xa0
   17010:	bl	16cdc <__assert_fail@plt+0x4718>
   17014:	strb	r0, [r6, #16]
   17018:	ldr	r3, [r4, #160]	; 0xa0
   1701c:	ldrb	r3, [r3, #16]
   17020:	cmp	r3, #0
   17024:	bne	17098 <__assert_fail@plt+0x4ad4>
   17028:	add	r5, r4, #156	; 0x9c
   1702c:	ldr	r4, [r5]
   17030:	cmp	r4, #0
   17034:	beq	170bc <__assert_fail@plt+0x4af8>
   17038:	ldr	r3, [r4, #8]
   1703c:	cmp	r3, #3
   17040:	beq	16db8 <__assert_fail@plt+0x47f4>
   17044:	ldr	r6, [r4, #160]	; 0xa0
   17048:	ldr	r3, [r6, #8]
   1704c:	cmp	r3, #3
   17050:	ldrls	pc, [pc, r3, lsl #2]
   17054:	b	17078 <__assert_fail@plt+0x4ab4>
   17058:	ldrdeq	r6, [r1], -ip
   1705c:	ldrdeq	r6, [r1], -ip
   17060:	andeq	r7, r1, ip
   17064:	andeq	r7, r1, r8, rrx
   17068:	add	r0, r4, #160	; 0xa0
   1706c:	bl	16cdc <__assert_fail@plt+0x4718>
   17070:	strb	r0, [r6, #16]
   17074:	b	17018 <__assert_fail@plt+0x4a54>
   17078:	mov	r2, #5
   1707c:	ldr	r1, [pc, #236]	; 17170 <__assert_fail@plt+0x4bac>
   17080:	mov	r0, #0
   17084:	bl	12084 <dcgettext@plt>
   17088:	mov	r2, r0
   1708c:	mov	r1, #0
   17090:	mov	r0, #1
   17094:	bl	121bc <error@plt>
   17098:	str	r5, [sp]
   1709c:	add	r3, sp, #104	; 0x68
   170a0:	add	r2, sp, #96	; 0x60
   170a4:	mov	r1, #11
   170a8:	add	r0, sp, #8
   170ac:	bl	16c64 <__assert_fail@plt+0x46a0>
   170b0:	mov	r7, #1
   170b4:	b	17028 <__assert_fail@plt+0x4a64>
   170b8:	mov	r7, #0
   170bc:	str	r5, [sp]
   170c0:	add	r3, sp, #104	; 0x68
   170c4:	add	r2, sp, #96	; 0x60
   170c8:	mov	r1, #11
   170cc:	add	r0, sp, #8
   170d0:	bl	16c64 <__assert_fail@plt+0x46a0>
   170d4:	mov	r0, r7
   170d8:	add	sp, sp, #116	; 0x74
   170dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e0:	mov	r7, #0
   170e4:	b	170d4 <__assert_fail@plt+0x4b10>
   170e8:	mov	r7, #0
   170ec:	b	170d4 <__assert_fail@plt+0x4b10>
   170f0:	ldr	r3, [pc, #52]	; 1712c <__assert_fail@plt+0x4b68>
   170f4:	ldr	r3, [r3, #44]	; 0x2c
   170f8:	tst	r3, #9
   170fc:	beq	16d84 <__assert_fail@plt+0x47c0>
   17100:	ldr	r4, [pc, #80]	; 17158 <__assert_fail@plt+0x4b94>
   17104:	ldr	r3, [r4]
   17108:	mov	r2, #22
   1710c:	mov	r1, #1
   17110:	ldr	r0, [pc, #92]	; 17174 <__assert_fail@plt+0x4bb0>
   17114:	bl	12138 <fwrite@plt>
   17118:	mov	r2, #0
   1711c:	ldr	r1, [r5]
   17120:	ldr	r0, [r4]
   17124:	bl	16704 <__assert_fail@plt+0x4140>
   17128:	b	16d78 <__assert_fail@plt+0x47b4>
   1712c:	andeq	r9, r5, ip, ror #28
   17130:	andeq	r4, r1, r8, asr #11
   17134:	muleq	r5, r8, r2
   17138:	andeq	r4, r1, r4, lsr #6
   1713c:	andeq	r4, r1, r8, ror #2
   17140:	andeq	r4, r1, r8, lsl r2
   17144:	andeq	r3, r1, r0, lsr #16
   17148:	andeq	r4, r1, r0, ror #6
   1714c:	andeq	r3, r1, ip, lsl #24
   17150:	andeq	r3, r1, ip, asr r8
   17154:	andeq	r4, r1, r4, lsr r7
   17158:	andeq	r9, r5, r8, asr #10
   1715c:			; <UNDEFINED> instruction: 0x000436b4
   17160:	ldrdeq	r3, [r4], -r8
   17164:	andeq	r3, r4, ip, ror #13
   17168:	andeq	r3, r4, ip, lsr #11
   1716c:	andeq	r3, r4, ip, lsl #14
   17170:	andeq	r3, r4, r8, ror r3
   17174:	muleq	r4, ip, r6
   17178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1717c:	vpush	{d8}
   17180:	sub	sp, sp, #12
   17184:	subs	r4, r0, #0
   17188:	beq	1725c <__assert_fail@plt+0x4c98>
   1718c:	ldr	r6, [pc, #488]	; 1737c <__assert_fail@plt+0x4db8>
   17190:	ldr	r7, [pc, #488]	; 17380 <__assert_fail@plt+0x4dbc>
   17194:	ldr	sl, [pc, #488]	; 17384 <__assert_fail@plt+0x4dc0>
   17198:	ldr	fp, [pc, #488]	; 17388 <__assert_fail@plt+0x4dc4>
   1719c:	b	17314 <__assert_fail@plt+0x4d50>
   171a0:	ldr	r3, [r5, #160]	; 0xa0
   171a4:	vldr	s17, [r3, #28]
   171a8:	ldr	r3, [r4, #160]	; 0xa0
   171ac:	vldr	s16, [r3, #28]
   171b0:	ldr	r3, [r6, #44]	; 0x2c
   171b4:	tst	r3, #8
   171b8:	bne	171e8 <__assert_fail@plt+0x4c24>
   171bc:	ldr	r3, [r4]
   171c0:	cmp	r3, sl
   171c4:	beq	17208 <__assert_fail@plt+0x4c44>
   171c8:	cmp	r3, fp
   171cc:	ldrne	r2, [pc, #440]	; 1738c <__assert_fail@plt+0x4dc8>
   171d0:	bne	17330 <__assert_fail@plt+0x4d6c>
   171d4:	vcmpe.f32	s17, s16
   171d8:	vmrs	APSR_nzcv, fpscr
   171dc:	bmi	172d8 <__assert_fail@plt+0x4d14>
   171e0:	ldr	r2, [pc, #424]	; 17390 <__assert_fail@plt+0x4dcc>
   171e4:	b	17330 <__assert_fail@plt+0x4d6c>
   171e8:	vcvt.f64.f32	d7, s16
   171ec:	vstr	d7, [sp]
   171f0:	vcvt.f64.f32	d7, s17
   171f4:	vmov	r2, r3, d7
   171f8:	ldr	r1, [pc, #404]	; 17394 <__assert_fail@plt+0x4dd0>
   171fc:	ldr	r0, [r7]
   17200:	bl	1230c <fprintf@plt>
   17204:	b	171bc <__assert_fail@plt+0x4bf8>
   17208:	vcmpe.f32	s17, s16
   1720c:	vmrs	APSR_nzcv, fpscr
   17210:	bgt	172d8 <__assert_fail@plt+0x4d14>
   17214:	ldr	r2, [pc, #380]	; 17398 <__assert_fail@plt+0x4dd4>
   17218:	b	17330 <__assert_fail@plt+0x4d6c>
   1721c:	ldr	r3, [r7]
   17220:	mov	r2, #24
   17224:	mov	r1, #1
   17228:	ldr	r0, [pc, #364]	; 1739c <__assert_fail@plt+0x4dd8>
   1722c:	bl	12138 <fwrite@plt>
   17230:	mov	r2, #0
   17234:	mov	r1, r4
   17238:	ldr	r0, [r7]
   1723c:	bl	16704 <__assert_fail@plt+0x4140>
   17240:	b	172e4 <__assert_fail@plt+0x4d20>
   17244:	ldr	r2, [pc, #340]	; 173a0 <__assert_fail@plt+0x4ddc>
   17248:	b	17330 <__assert_fail@plt+0x4d6c>
   1724c:	ldr	r0, [r4, #160]	; 0xa0
   17250:	bl	17178 <__assert_fail@plt+0x4bb4>
   17254:	cmp	r0, #0
   17258:	bne	17314 <__assert_fail@plt+0x4d50>
   1725c:	mov	r0, #0
   17260:	add	sp, sp, #12
   17264:	vpop	{d8}
   17268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1726c:	ldr	r5, [r4, #156]	; 0x9c
   17270:	cmp	r5, #0
   17274:	beq	1736c <__assert_fail@plt+0x4da8>
   17278:	ldr	r3, [r4, #160]	; 0xa0
   1727c:	cmp	r3, #0
   17280:	beq	17364 <__assert_fail@plt+0x4da0>
   17284:	ldr	r3, [r5, #160]	; 0xa0
   17288:	cmp	r3, #0
   1728c:	beq	1735c <__assert_fail@plt+0x4d98>
   17290:	ldr	r0, [r5, #160]	; 0xa0
   17294:	bl	15938 <__assert_fail@plt+0x3374>
   17298:	cmp	r0, #0
   1729c:	bne	17374 <__assert_fail@plt+0x4db0>
   172a0:	ldr	r0, [r4, #160]	; 0xa0
   172a4:	bl	15938 <__assert_fail@plt+0x3374>
   172a8:	cmp	r0, #0
   172ac:	bne	17244 <__assert_fail@plt+0x4c80>
   172b0:	ldr	r0, [r5, #160]	; 0xa0
   172b4:	bl	15984 <__assert_fail@plt+0x33c0>
   172b8:	mov	r8, r0
   172bc:	ldr	r0, [r4, #160]	; 0xa0
   172c0:	bl	15984 <__assert_fail@plt+0x33c0>
   172c4:	mov	r9, r0
   172c8:	cmp	r8, r0
   172cc:	blt	172fc <__assert_fail@plt+0x4d38>
   172d0:	cmp	r8, r9
   172d4:	beq	171a0 <__assert_fail@plt+0x4bdc>
   172d8:	ldr	r3, [r6, #44]	; 0x2c
   172dc:	tst	r3, #8
   172e0:	bne	1721c <__assert_fail@plt+0x4c58>
   172e4:	ldr	r3, [r4, #156]	; 0x9c
   172e8:	ldr	r2, [r3, #160]	; 0xa0
   172ec:	ldr	r1, [r4, #160]	; 0xa0
   172f0:	str	r1, [r3, #160]	; 0xa0
   172f4:	str	r2, [r4, #160]	; 0xa0
   172f8:	b	17314 <__assert_fail@plt+0x4d50>
   172fc:	ldr	r2, [pc, #160]	; 173a4 <__assert_fail@plt+0x4de0>
   17300:	b	17330 <__assert_fail@plt+0x4d6c>
   17304:	ldr	r0, [r4, #156]	; 0x9c
   17308:	bl	17178 <__assert_fail@plt+0x4bb4>
   1730c:	cmp	r0, #0
   17310:	beq	1724c <__assert_fail@plt+0x4c88>
   17314:	ldr	r3, [r4, #8]
   17318:	cmp	r3, #3
   1731c:	ldrne	r2, [pc, #132]	; 173a8 <__assert_fail@plt+0x4de4>
   17320:	beq	1726c <__assert_fail@plt+0x4ca8>
   17324:	ldr	r5, [r4, #156]	; 0x9c
   17328:	cmp	r2, #0
   1732c:	beq	172d0 <__assert_fail@plt+0x4d0c>
   17330:	ldr	r3, [r6, #44]	; 0x2c
   17334:	tst	r3, #8
   17338:	beq	17304 <__assert_fail@plt+0x4d40>
   1733c:	ldr	r1, [pc, #104]	; 173ac <__assert_fail@plt+0x4de8>
   17340:	ldr	r0, [r7]
   17344:	bl	1230c <fprintf@plt>
   17348:	mov	r2, #0
   1734c:	mov	r1, r4
   17350:	ldr	r0, [r7]
   17354:	bl	16704 <__assert_fail@plt+0x4140>
   17358:	b	17304 <__assert_fail@plt+0x4d40>
   1735c:	ldr	r2, [pc, #76]	; 173b0 <__assert_fail@plt+0x4dec>
   17360:	b	17324 <__assert_fail@plt+0x4d60>
   17364:	ldr	r2, [pc, #72]	; 173b4 <__assert_fail@plt+0x4df0>
   17368:	b	17330 <__assert_fail@plt+0x4d6c>
   1736c:	ldr	r2, [pc, #64]	; 173b4 <__assert_fail@plt+0x4df0>
   17370:	b	17330 <__assert_fail@plt+0x4d6c>
   17374:	ldr	r2, [pc, #60]	; 173b8 <__assert_fail@plt+0x4df4>
   17378:	b	17330 <__assert_fail@plt+0x4d6c>
   1737c:	andeq	r9, r5, ip, ror #28
   17380:	andeq	r9, r5, r8, asr #10
   17384:	andeq	r3, r1, ip, asr r8
   17388:	andeq	r3, r1, r0, lsr #16
   1738c:	andeq	r3, r4, ip, ror r7
   17390:	andeq	r3, r4, ip, asr #14
   17394:	andeq	r3, r4, ip, lsr #16
   17398:	muleq	r4, r0, r7
   1739c:	andeq	r3, r4, r8, asr #16
   173a0:	andeq	r3, r4, ip, lsl r7
   173a4:	andeq	r3, r4, ip, lsr r7
   173a8:			; <UNDEFINED> instruction: 0x000437bc
   173ac:	andeq	r3, r4, r4, ror #16
   173b0:	ldrdeq	r3, [r4], -r4
   173b4:	strdeq	r3, [r4], -r4
   173b8:	andeq	r3, r4, ip, lsl #16
   173bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c0:	sub	sp, sp, #36	; 0x24
   173c4:	str	r0, [sp, #20]
   173c8:	mov	r4, r1
   173cc:	ldr	r3, [pc, #1500]	; 179b0 <__assert_fail@plt+0x53ec>
   173d0:	mov	r1, #0
   173d4:	str	r1, [r3, #16]
   173d8:	add	r1, r4, r2, lsl #2
   173dc:	str	r1, [r3, #8]
   173e0:	str	r2, [sp, #24]
   173e4:	cmp	r2, r0
   173e8:	movlt	r6, #1
   173ec:	ldrlt	r5, [pc, #1468]	; 179b0 <__assert_fail@plt+0x53ec>
   173f0:	bge	1742c <__assert_fail@plt+0x4e68>
   173f4:	mov	r1, r6
   173f8:	ldr	r0, [r4, r2, lsl #2]
   173fc:	bl	1839c <__assert_fail@plt+0x5dd8>
   17400:	cmp	r0, #0
   17404:	bne	1742c <__assert_fail@plt+0x4e68>
   17408:	ldr	r3, [r5, #4]
   1740c:	add	r3, r3, #1
   17410:	str	r3, [r5, #4]
   17414:	ldr	r2, [sp, #24]
   17418:	add	r2, r2, #1
   1741c:	str	r2, [sp, #24]
   17420:	ldr	r3, [sp, #20]
   17424:	cmp	r3, r2
   17428:	bgt	173f4 <__assert_fail@plt+0x4e30>
   1742c:	ldr	r0, [pc, #1408]	; 179b4 <__assert_fail@plt+0x53f0>
   17430:	bl	1eeb4 <__assert_fail@plt+0xc8f0>
   17434:	mov	r5, r0
   17438:	ldr	r0, [pc, #1400]	; 179b8 <__assert_fail@plt+0x53f4>
   1743c:	bl	1eeb4 <__assert_fail@plt+0xc8f0>
   17440:	str	r0, [sp, #16]
   17444:	ldr	r0, [pc, #1392]	; 179bc <__assert_fail@plt+0x53f8>
   17448:	bl	1eeb4 <__assert_fail@plt+0xc8f0>
   1744c:	str	r0, [sp, #12]
   17450:	cmp	r5, #0
   17454:	beq	17650 <__assert_fail@plt+0x508c>
   17458:	ldr	r3, [sp, #16]
   1745c:	cmp	r3, #0
   17460:	beq	17664 <__assert_fail@plt+0x50a0>
   17464:	ldr	r3, [sp, #12]
   17468:	cmp	r3, #0
   1746c:	beq	17678 <__assert_fail@plt+0x50b4>
   17470:	add	r2, sp, #20
   17474:	mov	r1, r4
   17478:	mov	r0, r5
   1747c:	bl	1e3b8 <__assert_fail@plt+0xbdf4>
   17480:	ldr	r5, [pc, #1320]	; 179b0 <__assert_fail@plt+0x53ec>
   17484:	ldr	r2, [r5, #20]
   17488:	ldr	r3, [pc, #1316]	; 179b4 <__assert_fail@plt+0x53f0>
   1748c:	str	r3, [r2, #4]
   17490:	ldr	r3, [r5, #16]
   17494:	mov	r1, #1
   17498:	strb	r1, [r3, #33]	; 0x21
   1749c:	ldr	r1, [sp, #20]
   174a0:	mov	r0, r4
   174a4:	bl	1ee9c <__assert_fail@plt+0xc8d8>
   174a8:	ldr	r0, [r5, #20]
   174ac:	bl	14f70 <__assert_fail@plt+0x29ac>
   174b0:	ldr	r3, [sp, #24]
   174b4:	ldr	r1, [sp, #20]
   174b8:	cmp	r3, r1
   174bc:	bge	1756c <__assert_fail@plt+0x4fa8>
   174c0:	ldr	fp, [pc, #1272]	; 179c0 <__assert_fail@plt+0x53fc>
   174c4:	mov	r9, #0
   174c8:	mov	sl, r9
   174cc:	mov	r8, r5
   174d0:	strb	sl, [fp, #40]	; 0x28
   174d4:	mov	r1, r9
   174d8:	ldr	r0, [r4, r3, lsl #2]
   174dc:	bl	1839c <__assert_fail@plt+0x5dd8>
   174e0:	cmp	r0, #0
   174e4:	beq	1768c <__assert_fail@plt+0x50c8>
   174e8:	ldr	r3, [sp, #24]
   174ec:	ldr	r6, [r4, r3, lsl #2]
   174f0:	mov	r0, r6
   174f4:	bl	1eeb4 <__assert_fail@plt+0xc8f0>
   174f8:	subs	r5, r0, #0
   174fc:	beq	176fc <__assert_fail@plt+0x5138>
   17500:	ldr	r3, [r5]
   17504:	cmp	r3, #4
   17508:	ldrne	r3, [sp, #24]
   1750c:	addne	r3, r3, #1
   17510:	strne	r3, [sp, #24]
   17514:	ldr	r7, [sp, #24]
   17518:	ldr	r3, [r5, #8]
   1751c:	add	r2, sp, #24
   17520:	mov	r1, r4
   17524:	mov	r0, r5
   17528:	blx	r3
   1752c:	cmp	r0, #0
   17530:	beq	1771c <__assert_fail@plt+0x5158>
   17534:	ldr	r0, [r8, #20]
   17538:	str	r6, [r0, #4]
   1753c:	ldr	r3, [sp, #24]
   17540:	cmp	r7, r3
   17544:	ldrne	r3, [r4, r7, lsl #2]
   17548:	strne	r3, [r0, #36]	; 0x24
   1754c:	streq	r9, [r0, #36]	; 0x24
   17550:	bl	14f70 <__assert_fail@plt+0x29ac>
   17554:	ldr	r0, [r8, #16]
   17558:	bl	14f70 <__assert_fail@plt+0x29ac>
   1755c:	ldr	r3, [sp, #24]
   17560:	ldr	r1, [sp, #20]
   17564:	cmp	r3, r1
   17568:	blt	174d0 <__assert_fail@plt+0x4f0c>
   1756c:	ldr	r5, [pc, #1084]	; 179b0 <__assert_fail@plt+0x53ec>
   17570:	ldr	r3, [r5, #16]
   17574:	ldr	r2, [r5, #20]
   17578:	mov	r0, r4
   1757c:	bl	1eeb0 <__assert_fail@plt+0xc8ec>
   17580:	ldr	r3, [r5, #16]
   17584:	ldr	r0, [r3, #152]	; 0x98
   17588:	cmp	r0, #0
   1758c:	beq	177ac <__assert_fail@plt+0x51e8>
   17590:	bl	18354 <__assert_fail@plt+0x5d90>
   17594:	cmp	r0, #0
   17598:	bne	177f0 <__assert_fail@plt+0x522c>
   1759c:	ldr	r3, [pc, #1036]	; 179b0 <__assert_fail@plt+0x53ec>
   175a0:	ldr	r2, [r3, #16]
   175a4:	str	r2, [sp, #28]
   175a8:	ldr	r0, [r2, #152]	; 0x98
   175ac:	str	r0, [r3, #16]
   175b0:	bl	14f70 <__assert_fail@plt+0x29ac>
   175b4:	ldr	r0, [sp, #28]
   175b8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   175bc:	ldr	r3, [pc, #1024]	; 179c4 <__assert_fail@plt+0x5400>
   175c0:	ldr	r3, [r3, #44]	; 0x2c
   175c4:	tst	r3, #9
   175c8:	bne	1784c <__assert_fail@plt+0x5288>
   175cc:	ldr	r4, [pc, #988]	; 179b0 <__assert_fail@plt+0x53ec>
   175d0:	ldr	r0, [r4, #16]
   175d4:	bl	1ed34 <__assert_fail@plt+0xc770>
   175d8:	ldr	r0, [r4, #16]
   175dc:	bl	14f70 <__assert_fail@plt+0x29ac>
   175e0:	ldr	r3, [r4, #16]
   175e4:	add	r0, sp, #32
   175e8:	str	r3, [r0, #-4]!
   175ec:	mov	r2, #0
   175f0:	mov	r1, r2
   175f4:	bl	15a58 <__assert_fail@plt+0x3494>
   175f8:	str	r0, [r4, #12]
   175fc:	bl	1622c <__assert_fail@plt+0x3c68>
   17600:	ldr	r3, [sp, #28]
   17604:	cmp	r3, #0
   17608:	beq	178b8 <__assert_fail@plt+0x52f4>
   1760c:	ldr	r1, [r3]
   17610:	ldr	r2, [pc, #944]	; 179c8 <__assert_fail@plt+0x5404>
   17614:	cmp	r1, r2
   17618:	beq	17878 <__assert_fail@plt+0x52b4>
   1761c:	ldr	r3, [r3, #4]
   17620:	cmp	r3, #0
   17624:	beq	17898 <__assert_fail@plt+0x52d4>
   17628:	mov	r2, #5
   1762c:	ldr	r1, [pc, #920]	; 179cc <__assert_fail@plt+0x5408>
   17630:	mov	r0, #0
   17634:	bl	12084 <dcgettext@plt>
   17638:	ldr	r3, [sp, #28]
   1763c:	ldr	r3, [r3, #4]
   17640:	mov	r2, r0
   17644:	mov	r1, #0
   17648:	mov	r0, #1
   1764c:	bl	121bc <error@plt>
   17650:	ldr	r3, [pc, #888]	; 179d0 <__assert_fail@plt+0x540c>
   17654:	ldr	r2, [pc, #888]	; 179d4 <__assert_fail@plt+0x5410>
   17658:	ldr	r1, [pc, #888]	; 179d8 <__assert_fail@plt+0x5414>
   1765c:	ldr	r0, [pc, #888]	; 179dc <__assert_fail@plt+0x5418>
   17660:	bl	125c4 <__assert_fail@plt>
   17664:	ldr	r3, [pc, #868]	; 179d0 <__assert_fail@plt+0x540c>
   17668:	ldr	r2, [pc, #880]	; 179e0 <__assert_fail@plt+0x541c>
   1766c:	ldr	r1, [pc, #868]	; 179d8 <__assert_fail@plt+0x5414>
   17670:	ldr	r0, [pc, #876]	; 179e4 <__assert_fail@plt+0x5420>
   17674:	bl	125c4 <__assert_fail@plt>
   17678:	ldr	r3, [pc, #848]	; 179d0 <__assert_fail@plt+0x540c>
   1767c:	ldr	r2, [pc, #868]	; 179e8 <__assert_fail@plt+0x5424>
   17680:	ldr	r1, [pc, #848]	; 179d8 <__assert_fail@plt+0x5414>
   17684:	ldr	r0, [pc, #864]	; 179ec <__assert_fail@plt+0x5428>
   17688:	bl	125c4 <__assert_fail@plt>
   1768c:	mov	r2, #5
   17690:	ldr	r1, [pc, #856]	; 179f0 <__assert_fail@plt+0x542c>
   17694:	bl	12084 <dcgettext@plt>
   17698:	ldr	r3, [sp, #24]
   1769c:	ldr	r3, [r4, r3, lsl #2]
   176a0:	mov	r2, r0
   176a4:	mov	r1, #0
   176a8:	mov	r0, r1
   176ac:	bl	121bc <error@plt>
   176b0:	mov	r1, #0
   176b4:	ldr	r3, [sp, #24]
   176b8:	ldr	r0, [r4, r3, lsl #2]
   176bc:	bl	123c0 <access@plt>
   176c0:	cmp	r0, #0
   176c4:	beq	176d0 <__assert_fail@plt+0x510c>
   176c8:	mov	r0, #1
   176cc:	bl	122a0 <exit@plt>
   176d0:	mov	r2, #5
   176d4:	ldr	r1, [pc, #792]	; 179f4 <__assert_fail@plt+0x5430>
   176d8:	bl	12084 <dcgettext@plt>
   176dc:	ldr	r3, [pc, #716]	; 179b0 <__assert_fail@plt+0x53ec>
   176e0:	ldr	r3, [r3, #20]
   176e4:	ldr	r3, [r3, #4]
   176e8:	mov	r2, r0
   176ec:	mov	r1, #0
   176f0:	mov	r0, r1
   176f4:	bl	121bc <error@plt>
   176f8:	b	176c8 <__assert_fail@plt+0x5104>
   176fc:	mov	r2, #5
   17700:	ldr	r1, [pc, #752]	; 179f8 <__assert_fail@plt+0x5434>
   17704:	bl	12084 <dcgettext@plt>
   17708:	mov	r3, r6
   1770c:	mov	r2, r0
   17710:	mov	r1, #0
   17714:	mov	r0, #1
   17718:	bl	121bc <error@plt>
   1771c:	ldr	r3, [sp, #24]
   17720:	ldr	r2, [r4, r3, lsl #2]
   17724:	cmp	r2, #0
   17728:	beq	17788 <__assert_fail@plt+0x51c4>
   1772c:	ldr	r2, [r5]
   17730:	cmp	r2, #4
   17734:	cmpeq	r7, r3
   17738:	beq	17768 <__assert_fail@plt+0x51a4>
   1773c:	mov	r2, #5
   17740:	ldr	r1, [pc, #692]	; 179fc <__assert_fail@plt+0x5438>
   17744:	mov	r0, #0
   17748:	bl	12084 <dcgettext@plt>
   1774c:	ldr	r3, [sp, #24]
   17750:	ldr	r3, [r4, r3, lsl #2]
   17754:	str	r6, [sp]
   17758:	mov	r2, r0
   1775c:	mov	r1, #0
   17760:	mov	r0, #1
   17764:	bl	121bc <error@plt>
   17768:	mov	r2, #5
   1776c:	ldr	r1, [pc, #652]	; 17a00 <__assert_fail@plt+0x543c>
   17770:	bl	12084 <dcgettext@plt>
   17774:	mov	r3, r6
   17778:	mov	r2, r0
   1777c:	mov	r1, #0
   17780:	mov	r0, #1
   17784:	bl	121bc <error@plt>
   17788:	mov	r2, #5
   1778c:	ldr	r1, [pc, #624]	; 17a04 <__assert_fail@plt+0x5440>
   17790:	mov	r0, #0
   17794:	bl	12084 <dcgettext@plt>
   17798:	mov	r3, r6
   1779c:	mov	r2, r0
   177a0:	mov	r1, #0
   177a4:	mov	r0, #1
   177a8:	bl	121bc <error@plt>
   177ac:	str	r3, [sp, #28]
   177b0:	mov	r2, #0
   177b4:	str	r2, [r5, #20]
   177b8:	str	r2, [r5, #16]
   177bc:	mov	r0, r3
   177c0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   177c4:	add	r2, sp, #20
   177c8:	mov	r1, r4
   177cc:	ldr	r0, [sp, #12]
   177d0:	bl	1e900 <__assert_fail@plt+0xc33c>
   177d4:	ldr	r0, [r5, #20]
   177d8:	ldr	r3, [pc, #552]	; 17a08 <__assert_fail@plt+0x5444>
   177dc:	str	r3, [r0, #4]
   177e0:	bl	14f70 <__assert_fail@plt+0x29ac>
   177e4:	ldr	r0, [r5, #16]
   177e8:	bl	14f70 <__assert_fail@plt+0x29ac>
   177ec:	b	175bc <__assert_fail@plt+0x4ff8>
   177f0:	add	r2, sp, #20
   177f4:	mov	r1, r4
   177f8:	ldr	r0, [sp, #16]
   177fc:	bl	1ded4 <__assert_fail@plt+0xb910>
   17800:	ldr	r5, [pc, #424]	; 179b0 <__assert_fail@plt+0x53ec>
   17804:	ldr	r0, [r5, #20]
   17808:	ldr	r3, [pc, #424]	; 179b8 <__assert_fail@plt+0x53f4>
   1780c:	str	r3, [r0, #4]
   17810:	mov	r6, #1
   17814:	strb	r6, [r0, #33]	; 0x21
   17818:	bl	14f70 <__assert_fail@plt+0x29ac>
   1781c:	add	r2, sp, #20
   17820:	mov	r1, r4
   17824:	ldr	r0, [sp, #12]
   17828:	bl	1e900 <__assert_fail@plt+0xc33c>
   1782c:	ldr	r0, [r5, #20]
   17830:	ldr	r3, [pc, #464]	; 17a08 <__assert_fail@plt+0x5444>
   17834:	str	r3, [r0, #4]
   17838:	strb	r6, [r0, #33]	; 0x21
   1783c:	bl	14f70 <__assert_fail@plt+0x29ac>
   17840:	ldr	r0, [r5, #16]
   17844:	bl	14f70 <__assert_fail@plt+0x29ac>
   17848:	b	175bc <__assert_fail@plt+0x4ff8>
   1784c:	ldr	r4, [pc, #440]	; 17a0c <__assert_fail@plt+0x5448>
   17850:	ldr	r3, [r4]
   17854:	mov	r2, #16
   17858:	mov	r1, #1
   1785c:	ldr	r0, [pc, #428]	; 17a10 <__assert_fail@plt+0x544c>
   17860:	bl	12138 <fwrite@plt>
   17864:	ldr	r3, [pc, #324]	; 179b0 <__assert_fail@plt+0x53ec>
   17868:	ldr	r1, [r3, #16]
   1786c:	ldr	r0, [r4]
   17870:	bl	14c70 <__assert_fail@plt+0x26ac>
   17874:	b	175cc <__assert_fail@plt+0x5008>
   17878:	mov	r2, #5
   1787c:	ldr	r1, [pc, #400]	; 17a14 <__assert_fail@plt+0x5450>
   17880:	mov	r0, #0
   17884:	bl	12084 <dcgettext@plt>
   17888:	mov	r2, r0
   1788c:	mov	r1, #0
   17890:	mov	r0, #1
   17894:	bl	121bc <error@plt>
   17898:	mov	r2, #5
   1789c:	ldr	r1, [pc, #372]	; 17a18 <__assert_fail@plt+0x5454>
   178a0:	mov	r0, #0
   178a4:	bl	12084 <dcgettext@plt>
   178a8:	mov	r2, r0
   178ac:	mov	r1, #0
   178b0:	mov	r0, #1
   178b4:	bl	121bc <error@plt>
   178b8:	ldr	r3, [pc, #260]	; 179c4 <__assert_fail@plt+0x5400>
   178bc:	ldr	r3, [r3, #44]	; 0x2c
   178c0:	tst	r3, #9
   178c4:	bne	17924 <__assert_fail@plt+0x5360>
   178c8:	ldr	r4, [pc, #224]	; 179b0 <__assert_fail@plt+0x53ec>
   178cc:	mov	r5, r4
   178d0:	ldr	r0, [r5, #12]!
   178d4:	bl	15e4c <__assert_fail@plt+0x3888>
   178d8:	mov	r0, r5
   178dc:	bl	16cdc <__assert_fail@plt+0x4718>
   178e0:	ldr	r5, [r4, #12]
   178e4:	mov	r1, #1
   178e8:	mov	r0, r5
   178ec:	bl	159c4 <__assert_fail@plt+0x3400>
   178f0:	mov	r0, r5
   178f4:	bl	17178 <__assert_fail@plt+0x4bb4>
   178f8:	mov	r1, #1
   178fc:	ldr	r0, [r4, #12]
   17900:	bl	159c4 <__assert_fail@plt+0x3400>
   17904:	ldr	r3, [pc, #184]	; 179c4 <__assert_fail@plt+0x5400>
   17908:	ldr	r3, [r3, #44]	; 0x2c
   1790c:	tst	r3, #9
   17910:	bne	17954 <__assert_fail@plt+0x5390>
   17914:	ldr	r3, [pc, #148]	; 179b0 <__assert_fail@plt+0x53ec>
   17918:	ldr	r0, [r3, #12]
   1791c:	add	sp, sp, #36	; 0x24
   17920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17924:	ldr	r4, [pc, #224]	; 17a0c <__assert_fail@plt+0x5448>
   17928:	ldr	r3, [r4]
   1792c:	mov	r2, #11
   17930:	mov	r1, #1
   17934:	ldr	r0, [pc, #224]	; 17a1c <__assert_fail@plt+0x5458>
   17938:	bl	12138 <fwrite@plt>
   1793c:	mov	r2, #0
   17940:	ldr	r3, [pc, #104]	; 179b0 <__assert_fail@plt+0x53ec>
   17944:	ldr	r1, [r3, #12]
   17948:	ldr	r0, [r4]
   1794c:	bl	16704 <__assert_fail@plt+0x4140>
   17950:	b	178c8 <__assert_fail@plt+0x5304>
   17954:	ldr	r4, [pc, #176]	; 17a0c <__assert_fail@plt+0x5448>
   17958:	ldr	r3, [r4]
   1795c:	mov	r2, #21
   17960:	mov	r1, #1
   17964:	ldr	r0, [pc, #180]	; 17a20 <__assert_fail@plt+0x545c>
   17968:	bl	12138 <fwrite@plt>
   1796c:	ldr	r5, [pc, #60]	; 179b0 <__assert_fail@plt+0x53ec>
   17970:	mov	r2, #0
   17974:	ldr	r1, [r5, #12]
   17978:	ldr	r0, [r4]
   1797c:	bl	16704 <__assert_fail@plt+0x4140>
   17980:	ldr	r3, [r4]
   17984:	mov	r2, #24
   17988:	mov	r1, #1
   1798c:	ldr	r0, [pc, #144]	; 17a24 <__assert_fail@plt+0x5460>
   17990:	bl	12138 <fwrite@plt>
   17994:	ldr	r1, [r5, #12]
   17998:	ldr	r0, [r4]
   1799c:	bl	14d34 <__assert_fail@plt+0x2770>
   179a0:	ldr	r1, [r4]
   179a4:	mov	r0, #10
   179a8:	bl	1245c <fputc@plt>
   179ac:	b	17914 <__assert_fail@plt+0x5350>
   179b0:	andeq	r9, r5, r0, ror r5
   179b4:	andeq	r3, r4, r8, lsl #17
   179b8:	andeq	r4, r4, r4, ror #16
   179bc:	andeq	r3, r4, ip, lsl #17
   179c0:	andeq	r9, r5, r0, asr #28
   179c4:	andeq	r9, r5, ip, ror #28
   179c8:	andeq	r3, r1, r0, lsl #23
   179cc:	andeq	r3, r4, ip, lsr #19
   179d0:	strdeq	r3, [r4], -r8
   179d4:	strdeq	r0, [r0], -r6
   179d8:	andeq	r3, r4, r0, lsl r1
   179dc:	muleq	r4, r4, r8
   179e0:	strdeq	r0, [r0], -r7
   179e4:	andeq	r3, r4, r8, lsr #17
   179e8:	strdeq	r0, [r0], -r8
   179ec:			; <UNDEFINED> instruction: 0x000438bc
   179f0:	ldrdeq	r3, [r4], -r0
   179f4:	strdeq	r3, [r4], -r4
   179f8:	andeq	r3, r4, r4, lsr #18
   179fc:	andeq	r3, r4, r4, asr r9
   17a00:	andeq	r3, r4, ip, lsr r9
   17a04:	andeq	r3, r4, r4, ror r9
   17a08:	muleq	r4, r0, r9
   17a0c:	andeq	r9, r5, r8, asr #10
   17a10:	muleq	r4, r8, r9
   17a14:	andeq	r3, r4, r4, ror #4
   17a18:	andeq	r3, r4, ip, asr #19
   17a1c:	andeq	r3, r4, r8, ror #19
   17a20:	strdeq	r3, [r4], -r4
   17a24:	andeq	r3, r4, ip, lsl #20
   17a28:	push	{r4, r5, r6, lr}
   17a2c:	mov	r4, r0
   17a30:	mov	r5, r1
   17a34:	ldr	r0, [r0, #156]	; 0x9c
   17a38:	cmp	r0, #0
   17a3c:	beq	17a44 <__assert_fail@plt+0x5480>
   17a40:	bl	17a28 <__assert_fail@plt+0x5464>
   17a44:	mov	r0, r4
   17a48:	blx	r5
   17a4c:	ldr	r0, [r4, #160]	; 0xa0
   17a50:	cmp	r0, #0
   17a54:	popeq	{r4, r5, r6, pc}
   17a58:	mov	r1, r5
   17a5c:	bl	17a28 <__assert_fail@plt+0x5464>
   17a60:	pop	{r4, r5, r6, pc}
   17a64:	ldr	r2, [r0]
   17a68:	ldr	r1, [pc, #56]	; 17aa8 <__assert_fail@plt+0x54e4>
   17a6c:	ldr	r3, [pc, #56]	; 17aac <__assert_fail@plt+0x54e8>
   17a70:	cmp	r2, r1
   17a74:	cmpne	r2, r3
   17a78:	moveq	r3, #1
   17a7c:	movne	r3, #0
   17a80:	ldr	r1, [pc, #40]	; 17ab0 <__assert_fail@plt+0x54ec>
   17a84:	cmp	r2, r1
   17a88:	orreq	r3, r3, #1
   17a8c:	ldr	r1, [pc, #32]	; 17ab4 <__assert_fail@plt+0x54f0>
   17a90:	cmp	r2, r1
   17a94:	orreq	r3, r3, #1
   17a98:	cmp	r3, #0
   17a9c:	movne	r3, #0
   17aa0:	strne	r3, [r0, #44]	; 0x2c
   17aa4:	bx	lr
   17aa8:	andeq	r4, r1, r8, lsr r0
   17aac:	andeq	sl, r1, ip, ror r5
   17ab0:	ldrdeq	r3, [r1], -ip
   17ab4:	andeq	r4, r1, r0, ror r0
   17ab8:	push	{r4, lr}
   17abc:	subs	r4, r0, #0
   17ac0:	popeq	{r4, pc}
   17ac4:	ldr	r3, [pc, #156]	; 17b68 <__assert_fail@plt+0x55a4>
   17ac8:	ldrb	r3, [r3, #32]
   17acc:	cmp	r3, #0
   17ad0:	beq	17b00 <__assert_fail@plt+0x553c>
   17ad4:	ldr	r0, [r4, #156]	; 0x9c
   17ad8:	bl	17ab8 <__assert_fail@plt+0x54f4>
   17adc:	ldr	r3, [r4]
   17ae0:	ldr	r2, [pc, #132]	; 17b6c <__assert_fail@plt+0x55a8>
   17ae4:	ldr	r1, [pc, #132]	; 17b70 <__assert_fail@plt+0x55ac>
   17ae8:	cmp	r3, r2
   17aec:	cmpne	r3, r1
   17af0:	beq	17b14 <__assert_fail@plt+0x5550>
   17af4:	ldr	r0, [r4, #160]	; 0xa0
   17af8:	bl	17ab8 <__assert_fail@plt+0x54f4>
   17afc:	pop	{r4, pc}
   17b00:	ldr	r3, [pc, #108]	; 17b74 <__assert_fail@plt+0x55b0>
   17b04:	mov	r2, #396	; 0x18c
   17b08:	ldr	r1, [pc, #104]	; 17b78 <__assert_fail@plt+0x55b4>
   17b0c:	ldr	r0, [pc, #104]	; 17b7c <__assert_fail@plt+0x55b8>
   17b10:	bl	125c4 <__assert_fail@plt>
   17b14:	ldrb	r3, [r4, #40]	; 0x28
   17b18:	cmp	r3, #0
   17b1c:	beq	17af4 <__assert_fail@plt+0x5530>
   17b20:	ldr	r3, [r4, #116]	; 0x74
   17b24:	cmp	r3, #0
   17b28:	beq	17af4 <__assert_fail@plt+0x5530>
   17b2c:	add	r2, r4, #40	; 0x28
   17b30:	ldr	r1, [pc, #72]	; 17b80 <__assert_fail@plt+0x55bc>
   17b34:	ldr	r0, [r4, #144]	; 0x90
   17b38:	bl	1fae0 <__assert_fail@plt+0xd51c>
   17b3c:	ldr	r0, [r4, #144]	; 0x90
   17b40:	ldr	r3, [pc, #60]	; 17b84 <__assert_fail@plt+0x55c0>
   17b44:	ldr	r3, [r3]
   17b48:	cmp	r0, r3
   17b4c:	beq	17af4 <__assert_fail@plt+0x5530>
   17b50:	bl	2bf9c <__assert_fail@plt+0x199d8>
   17b54:	ldr	r0, [r4, #144]	; 0x90
   17b58:	bl	2e3fc <__assert_fail@plt+0x1be38>
   17b5c:	mov	r3, #0
   17b60:	str	r3, [r4, #144]	; 0x90
   17b64:	b	17af4 <__assert_fail@plt+0x5530>
   17b68:	andeq	r9, r5, r0, asr #28
   17b6c:			; <UNDEFINED> instruction: 0x00013fbc
   17b70:	andeq	r4, r1, r0, lsl #11
   17b74:	andeq	r3, r4, r8, lsl #22
   17b78:	andeq	r3, r4, r4, ror #23
   17b7c:	andeq	r3, r4, ip, ror #23
   17b80:	andeq	r7, r1, r8, lsl #23
   17b84:	andeq	r9, r5, ip, ror #10
   17b88:	push	{r4, lr}
   17b8c:	add	r1, r0, #48	; 0x30
   17b90:	add	r0, r0, #4
   17b94:	bl	1f580 <__assert_fail@plt+0xcfbc>
   17b98:	mov	r0, #0
   17b9c:	pop	{r4, pc}
   17ba0:	push	{r4, lr}
   17ba4:	subs	r4, r0, #0
   17ba8:	popeq	{r4, pc}
   17bac:	ldr	r0, [r4, #156]	; 0x9c
   17bb0:	bl	17ba0 <__assert_fail@plt+0x55dc>
   17bb4:	ldr	r2, [r4]
   17bb8:	ldr	r3, [pc, #56]	; 17bf8 <__assert_fail@plt+0x5634>
   17bbc:	cmp	r2, r3
   17bc0:	beq	17bd0 <__assert_fail@plt+0x560c>
   17bc4:	ldr	r0, [r4, #160]	; 0xa0
   17bc8:	bl	17ba0 <__assert_fail@plt+0x55dc>
   17bcc:	pop	{r4, pc}
   17bd0:	ldrb	r3, [r4, #40]	; 0x28
   17bd4:	cmp	r3, #0
   17bd8:	beq	17bc4 <__assert_fail@plt+0x5600>
   17bdc:	ldr	r3, [r4, #116]	; 0x74
   17be0:	cmp	r3, #0
   17be4:	beq	17bc4 <__assert_fail@plt+0x5600>
   17be8:	add	r1, r4, #88	; 0x58
   17bec:	add	r0, r4, #44	; 0x2c
   17bf0:	bl	1f580 <__assert_fail@plt+0xcfbc>
   17bf4:	b	17bc4 <__assert_fail@plt+0x5600>
   17bf8:			; <UNDEFINED> instruction: 0x00013fb0
   17bfc:	push	{r4, r5, r6, lr}
   17c00:	sub	sp, sp, #8
   17c04:	mov	r5, r0
   17c08:	mov	r6, r1
   17c0c:	mov	r4, r2
   17c10:	bl	12318 <__errno_location@plt>
   17c14:	ldr	r3, [r0]
   17c18:	cmp	r3, #2
   17c1c:	beq	17c2c <__assert_fail@plt+0x5668>
   17c20:	cmp	r3, #20
   17c24:	movne	r0, r4
   17c28:	bne	17c5c <__assert_fail@plt+0x5698>
   17c2c:	ldr	r3, [pc, #72]	; 17c7c <__assert_fail@plt+0x56b8>
   17c30:	ldr	r3, [r3, #44]	; 0x2c
   17c34:	tst	r3, #2
   17c38:	bne	17c64 <__assert_fail@plt+0x56a0>
   17c3c:	ldr	r3, [pc, #60]	; 17c80 <__assert_fail@plt+0x56bc>
   17c40:	ldr	r1, [r3, #16]
   17c44:	mov	r3, #256	; 0x100
   17c48:	str	r3, [sp]
   17c4c:	mov	r3, r6
   17c50:	mov	r2, r5
   17c54:	mov	r0, #3
   17c58:	bl	120fc <__fxstatat64@plt>
   17c5c:	add	sp, sp, #8
   17c60:	pop	{r4, r5, r6, pc}
   17c64:	mov	r2, r5
   17c68:	ldr	r1, [pc, #20]	; 17c84 <__assert_fail@plt+0x56c0>
   17c6c:	ldr	r3, [pc, #20]	; 17c88 <__assert_fail@plt+0x56c4>
   17c70:	ldr	r0, [r3]
   17c74:	bl	1230c <fprintf@plt>
   17c78:	b	17c3c <__assert_fail@plt+0x5678>
   17c7c:	andeq	r9, r5, ip, ror #28
   17c80:	andeq	r9, r5, r0, asr #28
   17c84:	andeq	r3, r4, r8, lsl #24
   17c88:	andeq	r9, r5, r8, asr #10
   17c8c:	push	{r4, r5, r6, lr}
   17c90:	mov	r4, r0
   17c94:	mov	r5, r1
   17c98:	mov	r1, r2
   17c9c:	bl	165f8 <__assert_fail@plt+0x4034>
   17ca0:	str	r5, [r0]
   17ca4:	ldr	r2, [r4, #4]
   17ca8:	str	r2, [r0, #4]
   17cac:	mov	r2, #0
   17cb0:	str	r2, [r0, #40]	; 0x28
   17cb4:	mov	r1, #1
   17cb8:	str	r1, [r0, #8]
   17cbc:	str	r2, [r0, #12]
   17cc0:	pop	{r4, r5, r6, pc}
   17cc4:	push	{r4, lr}
   17cc8:	ldr	r3, [r0, #12]
   17ccc:	cmp	r3, #0
   17cd0:	beq	17ce4 <__assert_fail@plt+0x5720>
   17cd4:	mov	r2, r1
   17cd8:	mov	r1, r3
   17cdc:	bl	17c8c <__assert_fail@plt+0x56c8>
   17ce0:	pop	{r4, pc}
   17ce4:	ldr	r3, [pc, #12]	; 17cf8 <__assert_fail@plt+0x5734>
   17ce8:	mov	r2, #123	; 0x7b
   17cec:	ldr	r1, [pc, #8]	; 17cfc <__assert_fail@plt+0x5738>
   17cf0:	ldr	r0, [pc, #8]	; 17d00 <__assert_fail@plt+0x573c>
   17cf4:	bl	125c4 <__assert_fail@plt>
   17cf8:	andeq	r3, r4, r8, lsr #22
   17cfc:	andeq	r3, r4, r4, ror #23
   17d00:	andeq	r3, r4, r4, asr #24
   17d04:	push	{r4, lr}
   17d08:	mov	r1, #0
   17d0c:	bl	17cc4 <__assert_fail@plt+0x5700>
   17d10:	pop	{r4, pc}
   17d14:	push	{r7, lr}
   17d18:	subs	r4, r0, #0
   17d1c:	beq	17d54 <__assert_fail@plt+0x5790>
   17d20:	ldr	r3, [pc, #472]	; 17f00 <__assert_fail@plt+0x593c>
   17d24:	ldr	r5, [r3]
   17d28:	mov	r2, #5
   17d2c:	ldr	r1, [pc, #464]	; 17f04 <__assert_fail@plt+0x5940>
   17d30:	mov	r0, #0
   17d34:	bl	12084 <dcgettext@plt>
   17d38:	ldr	r3, [pc, #456]	; 17f08 <__assert_fail@plt+0x5944>
   17d3c:	ldr	r2, [r3]
   17d40:	mov	r1, r0
   17d44:	mov	r0, r5
   17d48:	bl	1230c <fprintf@plt>
   17d4c:	mov	r0, r4
   17d50:	bl	122a0 <exit@plt>
   17d54:	ldr	r4, [pc, #432]	; 17f0c <__assert_fail@plt+0x5948>
   17d58:	ldr	r5, [r4]
   17d5c:	mov	r2, #5
   17d60:	ldr	r1, [pc, #424]	; 17f10 <__assert_fail@plt+0x594c>
   17d64:	mov	r0, #0
   17d68:	bl	12084 <dcgettext@plt>
   17d6c:	ldr	r3, [pc, #404]	; 17f08 <__assert_fail@plt+0x5944>
   17d70:	ldr	r2, [r3]
   17d74:	mov	r1, r0
   17d78:	mov	r0, r5
   17d7c:	bl	1230c <fprintf@plt>
   17d80:	mov	r2, #5
   17d84:	ldr	r1, [pc, #392]	; 17f14 <__assert_fail@plt+0x5950>
   17d88:	mov	r0, #0
   17d8c:	bl	12084 <dcgettext@plt>
   17d90:	ldr	r1, [r4]
   17d94:	bl	12558 <fputs@plt>
   17d98:	mov	r2, #5
   17d9c:	ldr	r1, [pc, #372]	; 17f18 <__assert_fail@plt+0x5954>
   17da0:	mov	r0, #0
   17da4:	bl	12084 <dcgettext@plt>
   17da8:	ldr	r1, [r4]
   17dac:	bl	12558 <fputs@plt>
   17db0:	mov	r2, #5
   17db4:	ldr	r1, [pc, #352]	; 17f1c <__assert_fail@plt+0x5958>
   17db8:	mov	r0, #0
   17dbc:	bl	12084 <dcgettext@plt>
   17dc0:	ldr	r1, [r4]
   17dc4:	bl	12558 <fputs@plt>
   17dc8:	mov	r2, #5
   17dcc:	ldr	r1, [pc, #332]	; 17f20 <__assert_fail@plt+0x595c>
   17dd0:	mov	r0, #0
   17dd4:	bl	12084 <dcgettext@plt>
   17dd8:	ldr	r1, [r4]
   17ddc:	bl	12558 <fputs@plt>
   17de0:	mov	r2, #5
   17de4:	ldr	r1, [pc, #312]	; 17f24 <__assert_fail@plt+0x5960>
   17de8:	mov	r0, #0
   17dec:	bl	12084 <dcgettext@plt>
   17df0:	ldr	r1, [r4]
   17df4:	bl	12558 <fputs@plt>
   17df8:	mov	r2, #5
   17dfc:	ldr	r1, [pc, #292]	; 17f28 <__assert_fail@plt+0x5964>
   17e00:	mov	r0, #0
   17e04:	bl	12084 <dcgettext@plt>
   17e08:	ldr	r1, [r4]
   17e0c:	bl	12558 <fputs@plt>
   17e10:	mov	r2, #5
   17e14:	ldr	r1, [pc, #272]	; 17f2c <__assert_fail@plt+0x5968>
   17e18:	mov	r0, #0
   17e1c:	bl	12084 <dcgettext@plt>
   17e20:	ldr	r1, [r4]
   17e24:	bl	12558 <fputs@plt>
   17e28:	mov	r2, #5
   17e2c:	ldr	r1, [pc, #252]	; 17f30 <__assert_fail@plt+0x596c>
   17e30:	mov	r0, #0
   17e34:	bl	12084 <dcgettext@plt>
   17e38:	ldr	r1, [r4]
   17e3c:	bl	12558 <fputs@plt>
   17e40:	mov	r2, #5
   17e44:	ldr	r1, [pc, #232]	; 17f34 <__assert_fail@plt+0x5970>
   17e48:	mov	r0, #0
   17e4c:	bl	12084 <dcgettext@plt>
   17e50:	ldr	r1, [r4]
   17e54:	bl	12558 <fputs@plt>
   17e58:	mov	r2, #5
   17e5c:	ldr	r1, [pc, #212]	; 17f38 <__assert_fail@plt+0x5974>
   17e60:	mov	r0, #0
   17e64:	bl	12084 <dcgettext@plt>
   17e68:	ldr	r1, [r4]
   17e6c:	bl	12558 <fputs@plt>
   17e70:	mov	r5, #0
   17e74:	mov	r4, #1
   17e78:	ldr	r8, [pc, #140]	; 17f0c <__assert_fail@plt+0x5948>
   17e7c:	ldr	r7, [pc, #184]	; 17f3c <__assert_fail@plt+0x5978>
   17e80:	ldr	sl, [pc, #184]	; 17f40 <__assert_fail@plt+0x597c>
   17e84:	ldr	r6, [pc, #184]	; 17f44 <__assert_fail@plt+0x5980>
   17e88:	ldr	r9, [pc, #184]	; 17f48 <__assert_fail@plt+0x5984>
   17e8c:	b	17ea8 <__assert_fail@plt+0x58e4>
   17e90:	ldr	r3, [r5, r7]
   17e94:	mov	r2, sl
   17e98:	mov	r1, r6
   17e9c:	bl	1230c <fprintf@plt>
   17ea0:	add	r4, r4, #1
   17ea4:	add	r5, r5, #12
   17ea8:	ldr	r0, [r8]
   17eac:	cmp	r4, #1
   17eb0:	beq	17e90 <__assert_fail@plt+0x58cc>
   17eb4:	ldr	r3, [r7, r5]
   17eb8:	mov	r2, r9
   17ebc:	mov	r1, r6
   17ec0:	bl	1230c <fprintf@plt>
   17ec4:	cmp	r4, #8
   17ec8:	bls	17ea0 <__assert_fail@plt+0x58dc>
   17ecc:	mov	r2, #5
   17ed0:	ldr	r1, [pc, #116]	; 17f4c <__assert_fail@plt+0x5988>
   17ed4:	mov	r0, #0
   17ed8:	bl	12084 <dcgettext@plt>
   17edc:	ldr	r4, [pc, #40]	; 17f0c <__assert_fail@plt+0x5948>
   17ee0:	ldr	r1, [r4]
   17ee4:	bl	12558 <fputs@plt>
   17ee8:	ldr	r3, [pc, #24]	; 17f08 <__assert_fail@plt+0x5944>
   17eec:	ldr	r1, [r3]
   17ef0:	ldr	r0, [r4]
   17ef4:	bl	212a0 <__assert_fail@plt+0xecdc>
   17ef8:	mov	r0, #0
   17efc:	bl	122a0 <exit@plt>
   17f00:	andeq	r9, r5, r8, asr #10
   17f04:	andeq	r3, r4, r0, ror #24
   17f08:	andeq	r9, r5, r4, lsl #26
   17f0c:	andeq	r9, r5, r4, asr r5
   17f10:	andeq	r3, r4, r8, lsl #25
   17f14:	ldrdeq	r3, [r4], -r4
   17f18:	andeq	r3, r4, r0, ror #26
   17f1c:	andeq	r3, r4, r0, lsr lr
   17f20:	andeq	r3, r4, r8, lsl #29
   17f24:	andeq	r3, r4, r8, asr pc
   17f28:	andeq	r4, r4, r8, ror r1
   17f2c:	andeq	r4, r4, r8, ror r2
   17f30:	muleq	r4, r0, r2
   17f34:	andeq	r4, r4, ip, asr #5
   17f38:	andeq	r4, r4, r4, lsl r3
   17f3c:	andeq	r3, r4, r8, lsr fp
   17f40:	andeq	r4, r4, r0, lsl r3
   17f44:			; <UNDEFINED> instruction: 0x000443b0
   17f48:	andeq	r4, r4, r0, lsr r3
   17f4c:	andeq	r4, r4, r4, lsr r3
   17f50:	bx	lr
   17f54:	push	{lr}		; (str lr, [sp, #-4]!)
   17f58:	vpush	{d8}
   17f5c:	sub	sp, sp, #396	; 0x18c
   17f60:	mov	r0, sp
   17f64:	bl	1206c <uname@plt>
   17f68:	cmp	r0, #0
   17f6c:	movne	r0, #1
   17f70:	bne	17fdc <__assert_fail@plt+0x5a18>
   17f74:	mov	r1, #0
   17f78:	add	r0, sp, #130	; 0x82
   17f7c:	bl	12384 <strtod@plt>
   17f80:	vcvt.f32.f64	s16, d0
   17f84:	mov	r1, sp
   17f88:	ldr	r0, [pc, #96]	; 17ff0 <__assert_fail@plt+0x5a2c>
   17f8c:	bl	11f1c <strcmp@plt>
   17f90:	cmp	r0, #0
   17f94:	beq	17fc8 <__assert_fail@plt+0x5a04>
   17f98:	mov	r1, sp
   17f9c:	ldr	r0, [pc, #80]	; 17ff4 <__assert_fail@plt+0x5a30>
   17fa0:	bl	11f1c <strcmp@plt>
   17fa4:	cmp	r0, #0
   17fa8:	movne	r0, #1
   17fac:	bne	17fdc <__assert_fail@plt+0x5a18>
   17fb0:	vldr	s15, [pc, #48]	; 17fe8 <__assert_fail@plt+0x5a24>
   17fb4:	vcmpe.f32	s16, s15
   17fb8:	vmrs	APSR_nzcv, fpscr
   17fbc:	movge	r0, #1
   17fc0:	movlt	r0, #0
   17fc4:	b	17fdc <__assert_fail@plt+0x5a18>
   17fc8:	vldr	s15, [pc, #28]	; 17fec <__assert_fail@plt+0x5a28>
   17fcc:	vcmpe.f32	s16, s15
   17fd0:	vmrs	APSR_nzcv, fpscr
   17fd4:	movge	r0, #1
   17fd8:	movlt	r0, #0
   17fdc:	add	sp, sp, #396	; 0x18c
   17fe0:	vpop	{d8}
   17fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   17fe8:	submi	r6, r6, r6, ror #12
   17fec:	andmi	ip, ip, sp, asr #25
   17ff0:	andeq	r4, r4, r8, ror r3
   17ff4:	andeq	r4, r4, r0, lsl #7
   17ff8:	ldr	r3, [pc, #36]	; 18024 <__assert_fail@plt+0x5a60>
   17ffc:	ldrb	r3, [r3, #32]
   18000:	cmp	r3, #0
   18004:	bxeq	lr
   18008:	push	{r4, lr}
   1800c:	bl	1621c <__assert_fail@plt+0x3c58>
   18010:	bl	17ab8 <__assert_fail@plt+0x54f4>
   18014:	mov	r2, #0
   18018:	ldr	r3, [pc, #4]	; 18024 <__assert_fail@plt+0x5a60>
   1801c:	strb	r2, [r3, #32]
   18020:	pop	{r4, pc}
   18024:	andeq	r9, r5, r0, asr #28
   18028:	push	{r4, lr}
   1802c:	sub	sp, sp, #8
   18030:	mov	r0, #8
   18034:	bl	2cc14 <__assert_fail@plt+0x1a650>
   18038:	ldr	r3, [pc, #124]	; 180bc <__assert_fail@plt+0x5af8>
   1803c:	str	r0, [r3]
   18040:	bl	2bf20 <__assert_fail@plt+0x1995c>
   18044:	cmp	r0, #0
   18048:	bne	18054 <__assert_fail@plt+0x5a90>
   1804c:	add	sp, sp, #8
   18050:	pop	{r4, pc}
   18054:	bl	12318 <__errno_location@plt>
   18058:	ldr	r4, [r0]
   1805c:	mov	r2, #5
   18060:	ldr	r1, [pc, #88]	; 180c0 <__assert_fail@plt+0x5afc>
   18064:	mov	r0, #0
   18068:	bl	12084 <dcgettext@plt>
   1806c:	mov	r2, r0
   18070:	ldr	r3, [pc, #68]	; 180bc <__assert_fail@plt+0x5af8>
   18074:	ldr	r3, [r3]
   18078:	ldr	r1, [r3]
   1807c:	cmp	r1, #0
   18080:	ldrge	r3, [pc, #60]	; 180c4 <__assert_fail@plt+0x5b00>
   18084:	movge	r1, r3
   18088:	blt	1809c <__assert_fail@plt+0x5ad8>
   1808c:	str	r1, [sp]
   18090:	mov	r1, r4
   18094:	mov	r0, #1
   18098:	bl	121bc <error@plt>
   1809c:	ldr	r1, [r3, #4]
   180a0:	cmp	r1, #0
   180a4:	ldrne	r1, [r3, #4]
   180a8:	ldrne	r3, [pc, #24]	; 180c8 <__assert_fail@plt+0x5b04>
   180ac:	bne	1808c <__assert_fail@plt+0x5ac8>
   180b0:	ldr	r3, [pc, #12]	; 180c4 <__assert_fail@plt+0x5b00>
   180b4:	moveq	r1, r3
   180b8:	b	1808c <__assert_fail@plt+0x5ac8>
   180bc:	andeq	r9, r5, ip, ror #10
   180c0:	andeq	r4, r4, r8, lsl #7
   180c4:	andeq	r4, r4, r0, lsl r3
   180c8:			; <UNDEFINED> instruction: 0x000454b0
   180cc:	push	{r4, r5, lr}
   180d0:	sub	sp, sp, #12
   180d4:	mov	r5, r1
   180d8:	ldr	r3, [pc, #132]	; 18164 <__assert_fail@plt+0x5ba0>
   180dc:	ldr	r1, [r3, #16]
   180e0:	cmn	r1, #100	; 0x64
   180e4:	cmpne	r1, #0
   180e8:	blt	18130 <__assert_fail@plt+0x5b6c>
   180ec:	mov	r4, r0
   180f0:	ldr	r3, [pc, #108]	; 18164 <__assert_fail@plt+0x5ba0>
   180f4:	ldr	r3, [r3]
   180f8:	cmp	r3, #0
   180fc:	bne	18144 <__assert_fail@plt+0x5b80>
   18100:	str	r3, [sp]
   18104:	mov	r3, r5
   18108:	mov	r2, r0
   1810c:	mov	r0, #3
   18110:	bl	120fc <__fxstatat64@plt>
   18114:	cmp	r0, #0
   18118:	beq	1815c <__assert_fail@plt+0x5b98>
   1811c:	mov	r2, r0
   18120:	mov	r1, r5
   18124:	mov	r0, r4
   18128:	bl	17bfc <__assert_fail@plt+0x5638>
   1812c:	b	1815c <__assert_fail@plt+0x5b98>
   18130:	ldr	r3, [pc, #48]	; 18168 <__assert_fail@plt+0x5ba4>
   18134:	ldr	r2, [pc, #48]	; 1816c <__assert_fail@plt+0x5ba8>
   18138:	ldr	r1, [pc, #48]	; 18170 <__assert_fail@plt+0x5bac>
   1813c:	ldr	r0, [pc, #48]	; 18174 <__assert_fail@plt+0x5bb0>
   18140:	bl	125c4 <__assert_fail@plt>
   18144:	mov	r3, #256	; 0x100
   18148:	str	r3, [sp]
   1814c:	mov	r3, r5
   18150:	mov	r2, r0
   18154:	mov	r0, #3
   18158:	bl	120fc <__fxstatat64@plt>
   1815c:	add	sp, sp, #12
   18160:	pop	{r4, r5, pc}
   18164:	andeq	r9, r5, r0, asr #28
   18168:	andeq	r3, r4, r4, lsr #23
   1816c:	andeq	r0, r0, sp, asr r2
   18170:	andeq	r3, r4, r4, ror #23
   18174:			; <UNDEFINED> instruction: 0x000443b8
   18178:	push	{r4, r5, lr}
   1817c:	sub	sp, sp, #12
   18180:	mov	r5, r1
   18184:	ldr	r3, [pc, #96]	; 181ec <__assert_fail@plt+0x5c28>
   18188:	ldr	r1, [r3, #16]
   1818c:	cmn	r1, #100	; 0x64
   18190:	cmpne	r1, #0
   18194:	blt	181c4 <__assert_fail@plt+0x5c00>
   18198:	mov	r4, r0
   1819c:	mov	r3, #0
   181a0:	str	r3, [sp]
   181a4:	mov	r3, r5
   181a8:	mov	r2, r0
   181ac:	mov	r0, #3
   181b0:	bl	120fc <__fxstatat64@plt>
   181b4:	cmp	r0, #0
   181b8:	bne	181d8 <__assert_fail@plt+0x5c14>
   181bc:	add	sp, sp, #12
   181c0:	pop	{r4, r5, pc}
   181c4:	ldr	r3, [pc, #36]	; 181f0 <__assert_fail@plt+0x5c2c>
   181c8:	mov	r2, #636	; 0x27c
   181cc:	ldr	r1, [pc, #32]	; 181f4 <__assert_fail@plt+0x5c30>
   181d0:	ldr	r0, [pc, #32]	; 181f8 <__assert_fail@plt+0x5c34>
   181d4:	bl	125c4 <__assert_fail@plt>
   181d8:	mov	r2, r0
   181dc:	mov	r1, r5
   181e0:	mov	r0, r4
   181e4:	bl	17bfc <__assert_fail@plt+0x5638>
   181e8:	b	181bc <__assert_fail@plt+0x5bf8>
   181ec:	andeq	r9, r5, r0, asr #28
   181f0:			; <UNDEFINED> instruction: 0x00043bb4
   181f4:	andeq	r3, r4, r4, ror #23
   181f8:			; <UNDEFINED> instruction: 0x000443b8
   181fc:	push	{lr}		; (str lr, [sp, #-4]!)
   18200:	sub	sp, sp, #12
   18204:	ldr	ip, [pc, #68]	; 18250 <__assert_fail@plt+0x5c8c>
   18208:	ldr	ip, [ip, #16]
   1820c:	cmn	ip, #100	; 0x64
   18210:	cmpne	ip, #0
   18214:	blt	1823c <__assert_fail@plt+0x5c78>
   18218:	mov	r3, #256	; 0x100
   1821c:	str	r3, [sp]
   18220:	mov	r3, r1
   18224:	mov	r2, r0
   18228:	mov	r1, ip
   1822c:	mov	r0, #3
   18230:	bl	120fc <__fxstatat64@plt>
   18234:	add	sp, sp, #12
   18238:	pop	{pc}		; (ldr pc, [sp], #4)
   1823c:	ldr	r3, [pc, #16]	; 18254 <__assert_fail@plt+0x5c90>
   18240:	ldr	r2, [pc, #16]	; 18258 <__assert_fail@plt+0x5c94>
   18244:	ldr	r1, [pc, #16]	; 1825c <__assert_fail@plt+0x5c98>
   18248:	ldr	r0, [pc, #16]	; 18260 <__assert_fail@plt+0x5c9c>
   1824c:	bl	125c4 <__assert_fail@plt>
   18250:	andeq	r9, r5, r0, asr #28
   18254:	andeq	r3, r4, r4, asr #23
   18258:	andeq	r0, r0, sp, lsl #5
   1825c:	andeq	r3, r4, r4, ror #23
   18260:	ldrdeq	r4, [r4], -r0
   18264:	push	{r4, r5, r6, lr}
   18268:	mov	r4, r0
   1826c:	mov	r5, r1
   18270:	ldr	r1, [pc, #128]	; 182f8 <__assert_fail@plt+0x5d34>
   18274:	ldrd	r2, [r1]
   18278:	adds	r2, r2, #1
   1827c:	adc	r3, r3, #0
   18280:	strd	r2, [r1]
   18284:	mov	r2, r0
   18288:	ldr	r1, [pc, #108]	; 182fc <__assert_fail@plt+0x5d38>
   1828c:	ldr	r3, [pc, #108]	; 18300 <__assert_fail@plt+0x5d3c>
   18290:	ldr	r0, [r3]
   18294:	bl	1230c <fprintf@plt>
   18298:	ldr	r3, [pc, #100]	; 18304 <__assert_fail@plt+0x5d40>
   1829c:	ldr	r3, [r3, #48]	; 0x30
   182a0:	cmp	r3, #1
   182a4:	beq	182c8 <__assert_fail@plt+0x5d04>
   182a8:	bcc	182e8 <__assert_fail@plt+0x5d24>
   182ac:	cmp	r3, #2
   182b0:	beq	182d8 <__assert_fail@plt+0x5d14>
   182b4:	ldr	r3, [pc, #76]	; 18308 <__assert_fail@plt+0x5d44>
   182b8:	ldr	r2, [pc, #76]	; 1830c <__assert_fail@plt+0x5d48>
   182bc:	ldr	r1, [pc, #76]	; 18310 <__assert_fail@plt+0x5d4c>
   182c0:	ldr	r0, [pc, #76]	; 18314 <__assert_fail@plt+0x5d50>
   182c4:	bl	125c4 <__assert_fail@plt>
   182c8:	mov	r1, r5
   182cc:	mov	r0, r4
   182d0:	bl	18178 <__assert_fail@plt+0x5bb4>
   182d4:	pop	{r4, r5, r6, pc}
   182d8:	mov	r1, r5
   182dc:	mov	r0, r4
   182e0:	bl	180cc <__assert_fail@plt+0x5b08>
   182e4:	pop	{r4, r5, r6, pc}
   182e8:	mov	r1, r5
   182ec:	mov	r0, r4
   182f0:	bl	181fc <__assert_fail@plt+0x5c38>
   182f4:	pop	{r4, r5, r6, pc}
   182f8:	muleq	r5, r0, r5
   182fc:	andeq	r4, r4, r8, lsl #8
   18300:	andeq	r9, r5, r8, asr #10
   18304:	andeq	r9, r5, ip, ror #28
   18308:	ldrdeq	r3, [r4], -r4
   1830c:	andeq	r0, r0, r5, lsr #5
   18310:	andeq	r3, r4, r4, ror #23
   18314:	andeq	r6, r4, r8, asr sp
   18318:	ldr	r3, [pc, #44]	; 1834c <__assert_fail@plt+0x5d88>
   1831c:	ldr	r3, [r3, #48]	; 0x30
   18320:	cmp	r3, #1
   18324:	beq	18344 <__assert_fail@plt+0x5d80>
   18328:	cmp	r3, #2
   1832c:	movne	r0, #0
   18330:	ldreq	r3, [pc, #24]	; 18350 <__assert_fail@plt+0x5d8c>
   18334:	ldreq	r0, [r3]
   18338:	clzeq	r0, r0
   1833c:	lsreq	r0, r0, #5
   18340:	bx	lr
   18344:	mov	r0, #1
   18348:	bx	lr
   1834c:	andeq	r9, r5, ip, ror #28
   18350:	andeq	r9, r5, r0, asr #28
   18354:	subs	r3, r0, #0
   18358:	beq	1838c <__assert_fail@plt+0x5dc8>
   1835c:	ldrb	r0, [r3, #17]
   18360:	cmp	r0, #0
   18364:	bne	18394 <__assert_fail@plt+0x5dd0>
   18368:	ldr	r3, [r3, #152]	; 0x98
   1836c:	cmp	r3, #0
   18370:	beq	18384 <__assert_fail@plt+0x5dc0>
   18374:	ldrb	r2, [r3, #17]
   18378:	cmp	r2, #0
   1837c:	beq	18368 <__assert_fail@plt+0x5da4>
   18380:	bx	lr
   18384:	mov	r0, #1
   18388:	bx	lr
   1838c:	mov	r0, #1
   18390:	bx	lr
   18394:	mov	r0, #0
   18398:	bx	lr
   1839c:	ldrb	r3, [r0]
   183a0:	sub	r3, r3, #33	; 0x21
   183a4:	cmp	r3, #12
   183a8:	ldrls	pc, [pc, r3, lsl #2]
   183ac:	b	18418 <__assert_fail@plt+0x5e54>
   183b0:	andeq	r8, r1, r8, lsl #8
   183b4:	andeq	r8, r1, r8, lsl r4
   183b8:	andeq	r8, r1, r8, lsl r4
   183bc:	andeq	r8, r1, r8, lsl r4
   183c0:	andeq	r8, r1, r8, lsl r4
   183c4:	andeq	r8, r1, r8, lsl r4
   183c8:	andeq	r8, r1, r8, lsl r4
   183cc:	andeq	r8, r1, r8, lsl #8
   183d0:	strdeq	r8, [r1], -r4
   183d4:	andeq	r8, r1, r8, lsl r4
   183d8:	andeq	r8, r1, r8, lsl r4
   183dc:	strdeq	r8, [r1], -r4
   183e0:	andeq	r8, r1, r4, ror #7
   183e4:	ldrb	r0, [r0, #1]
   183e8:	adds	r0, r0, #0
   183ec:	movne	r0, #1
   183f0:	bx	lr
   183f4:	ldrb	r3, [r0, #1]
   183f8:	cmp	r3, #0
   183fc:	bne	18420 <__assert_fail@plt+0x5e5c>
   18400:	eor	r0, r1, #1
   18404:	bx	lr
   18408:	ldrb	r0, [r0, #1]
   1840c:	clz	r0, r0
   18410:	lsr	r0, r0, #5
   18414:	bx	lr
   18418:	mov	r0, #0
   1841c:	bx	lr
   18420:	mov	r0, #0
   18424:	bx	lr
   18428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1842c:	sub	sp, sp, #20
   18430:	cmp	r0, #1
   18434:	ble	18798 <__assert_fail@plt+0x61d4>
   18438:	mov	r7, r1
   1843c:	mov	r9, r0
   18440:	mov	sl, #1
   18444:	ldr	r3, [pc, #992]	; 1882c <__assert_fail@plt+0x6268>
   18448:	add	fp, r3, #48	; 0x30
   1844c:	b	18464 <__assert_fail@plt+0x5ea0>
   18450:	mov	r0, #2
   18454:	bl	1edc4 <__assert_fail@plt+0xc800>
   18458:	add	sl, sl, #1
   1845c:	cmp	r9, sl
   18460:	ble	18530 <__assert_fail@plt+0x5f6c>
   18464:	lsl	r5, sl, #2
   18468:	ldr	r4, [r7, sl, lsl #2]
   1846c:	mov	r1, r4
   18470:	ldr	r0, [pc, #952]	; 18830 <__assert_fail@plt+0x626c>
   18474:	bl	11f1c <strcmp@plt>
   18478:	cmp	r0, #0
   1847c:	beq	18450 <__assert_fail@plt+0x5e8c>
   18480:	mov	r1, r4
   18484:	ldr	r0, [pc, #936]	; 18834 <__assert_fail@plt+0x6270>
   18488:	bl	11f1c <strcmp@plt>
   1848c:	cmp	r0, #0
   18490:	beq	18518 <__assert_fail@plt+0x5f54>
   18494:	mov	r1, r4
   18498:	ldr	r0, [pc, #920]	; 18838 <__assert_fail@plt+0x6274>
   1849c:	bl	11f1c <strcmp@plt>
   184a0:	cmp	r0, #0
   184a4:	beq	18524 <__assert_fail@plt+0x5f60>
   184a8:	mov	r1, r4
   184ac:	ldr	r0, [pc, #904]	; 1883c <__assert_fail@plt+0x6278>
   184b0:	bl	11f1c <strcmp@plt>
   184b4:	cmp	r0, #0
   184b8:	beq	1852c <__assert_fail@plt+0x5f68>
   184bc:	mov	r1, r4
   184c0:	ldr	r0, [pc, #888]	; 18840 <__assert_fail@plt+0x627c>
   184c4:	bl	11f1c <strcmp@plt>
   184c8:	cmp	r0, #0
   184cc:	bne	18604 <__assert_fail@plt+0x6040>
   184d0:	add	sl, sl, #1
   184d4:	cmp	r9, sl
   184d8:	ble	1853c <__assert_fail@plt+0x5f78>
   184dc:	add	r5, r7, r5
   184e0:	ldr	r3, [r5, #4]
   184e4:	mov	r0, r3
   184e8:	str	r3, [sp, #4]
   184ec:	mov	r3, #0
   184f0:	str	r3, [sp, #12]
   184f4:	mov	r3, #44	; 0x2c
   184f8:	strh	r3, [sp, #8]
   184fc:	add	r2, sp, #12
   18500:	add	r1, sp, #8
   18504:	bl	121b0 <strtok_r@plt>
   18508:	subs	r6, r0, #0
   1850c:	beq	187a0 <__assert_fail@plt+0x61dc>
   18510:	ldr	r8, [pc, #812]	; 18844 <__assert_fail@plt+0x6280>
   18514:	b	1859c <__assert_fail@plt+0x5fd8>
   18518:	mov	r0, #1
   1851c:	bl	1edc4 <__assert_fail@plt+0xc800>
   18520:	b	18458 <__assert_fail@plt+0x5e94>
   18524:	bl	1edc4 <__assert_fail@plt+0xc800>
   18528:	b	18458 <__assert_fail@plt+0x5e94>
   1852c:	add	sl, sl, #1
   18530:	mov	r0, sl
   18534:	add	sp, sp, #20
   18538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1853c:	mov	r2, #5
   18540:	ldr	r1, [pc, #768]	; 18848 <__assert_fail@plt+0x6284>
   18544:	bl	12084 <dcgettext@plt>
   18548:	mov	r2, r0
   1854c:	mov	r1, #0
   18550:	mov	r0, r1
   18554:	bl	121bc <error@plt>
   18558:	mov	r0, #1
   1855c:	bl	17d14 <__assert_fail@plt+0x5750>
   18560:	add	r2, r5, r5, lsl #1
   18564:	ldr	r3, [pc, #704]	; 1882c <__assert_fail@plt+0x6268>
   18568:	add	r2, r3, r2, lsl #2
   1856c:	ldr	r3, [r8, #44]	; 0x2c
   18570:	ldr	r2, [r2, #52]	; 0x34
   18574:	orr	r3, r3, r2
   18578:	str	r3, [r8, #44]	; 0x2c
   1857c:	cmp	r5, #8
   18580:	bhi	185c8 <__assert_fail@plt+0x6004>
   18584:	add	r2, sp, #12
   18588:	add	r1, sp, #8
   1858c:	mov	r0, #0
   18590:	bl	121b0 <strtok_r@plt>
   18594:	subs	r6, r0, #0
   18598:	beq	187c8 <__assert_fail@plt+0x6204>
   1859c:	mov	r4, #0
   185a0:	mov	r5, r4
   185a4:	mov	r1, r6
   185a8:	ldr	r0, [fp, r4]
   185ac:	bl	11f1c <strcmp@plt>
   185b0:	cmp	r0, #0
   185b4:	beq	18560 <__assert_fail@plt+0x5f9c>
   185b8:	add	r5, r5, #1
   185bc:	add	r4, r4, #12
   185c0:	cmp	r5, #9
   185c4:	bne	185a4 <__assert_fail@plt+0x5fe0>
   185c8:	mov	r2, #5
   185cc:	ldr	r1, [pc, #632]	; 1884c <__assert_fail@plt+0x6288>
   185d0:	mov	r0, #0
   185d4:	bl	12084 <dcgettext@plt>
   185d8:	mov	r4, r0
   185dc:	ldr	r2, [sp, #4]
   185e0:	ldr	r1, [r8, #72]	; 0x48
   185e4:	mov	r0, #0
   185e8:	bl	2bc6c <__assert_fail@plt+0x196a8>
   185ec:	mov	r3, r0
   185f0:	mov	r2, r4
   185f4:	mov	r1, #0
   185f8:	mov	r0, r1
   185fc:	bl	121bc <error@plt>
   18600:	b	18584 <__assert_fail@plt+0x5fc0>
   18604:	mov	r2, #2
   18608:	mov	r1, r4
   1860c:	ldr	r0, [pc, #572]	; 18850 <__assert_fail@plt+0x628c>
   18610:	bl	12564 <strncmp@plt>
   18614:	cmp	r0, #0
   18618:	bne	18530 <__assert_fail@plt+0x5f6c>
   1861c:	add	r6, r4, #2
   18620:	ldrb	r4, [r4, #2]
   18624:	cmp	r4, #0
   18628:	beq	18698 <__assert_fail@plt+0x60d4>
   1862c:	bl	12288 <__ctype_b_loc@plt>
   18630:	ldr	r3, [r0]
   18634:	lsl	r4, r4, #1
   18638:	ldrh	r3, [r3, r4]
   1863c:	tst	r3, #2048	; 0x800
   18640:	beq	186b4 <__assert_fail@plt+0x60f0>
   18644:	bl	12318 <__errno_location@plt>
   18648:	mov	r4, r0
   1864c:	ldr	r8, [r0]
   18650:	mov	r3, #0
   18654:	str	r3, [r0]
   18658:	mov	r2, #10
   1865c:	add	r1, sp, #12
   18660:	mov	r0, r6
   18664:	bl	122c4 <strtoul@plt>
   18668:	cmp	r0, #0
   1866c:	bne	186f4 <__assert_fail@plt+0x6130>
   18670:	ldr	r3, [sp, #12]
   18674:	cmp	r6, r3
   18678:	beq	186d4 <__assert_fail@plt+0x6110>
   1867c:	ldrb	r3, [r3]
   18680:	cmp	r3, #0
   18684:	bne	18740 <__assert_fail@plt+0x617c>
   18688:	ldr	r3, [pc, #436]	; 18844 <__assert_fail@plt+0x6280>
   1868c:	strh	r0, [r3, #68]	; 0x44
   18690:	str	r8, [r4]
   18694:	b	18458 <__assert_fail@plt+0x5e94>
   18698:	mov	r2, #5
   1869c:	ldr	r1, [pc, #432]	; 18854 <__assert_fail@plt+0x6290>
   186a0:	bl	12084 <dcgettext@plt>
   186a4:	mov	r2, r0
   186a8:	mov	r1, #0
   186ac:	mov	r0, #1
   186b0:	bl	121bc <error@plt>
   186b4:	mov	r2, #5
   186b8:	ldr	r1, [pc, #408]	; 18858 <__assert_fail@plt+0x6294>
   186bc:	mov	r0, #0
   186c0:	bl	12084 <dcgettext@plt>
   186c4:	mov	r2, r0
   186c8:	mov	r1, #0
   186cc:	mov	r0, #1
   186d0:	bl	121bc <error@plt>
   186d4:	mov	r2, #5
   186d8:	ldr	r1, [pc, #376]	; 18858 <__assert_fail@plt+0x6294>
   186dc:	mov	r0, #0
   186e0:	bl	12084 <dcgettext@plt>
   186e4:	mov	r2, r0
   186e8:	mov	r1, #0
   186ec:	mov	r0, #1
   186f0:	bl	121bc <error@plt>
   186f4:	ldr	r3, [sp, #12]
   186f8:	ldrb	r3, [r3]
   186fc:	cmp	r3, #0
   18700:	bne	18740 <__assert_fail@plt+0x617c>
   18704:	cmn	r0, #1
   18708:	bne	18788 <__assert_fail@plt+0x61c4>
   1870c:	mov	r5, r0
   18710:	ldr	r4, [r4]
   18714:	cmp	r4, #0
   18718:	bne	18764 <__assert_fail@plt+0x61a0>
   1871c:	mov	r2, #5
   18720:	ldr	r1, [pc, #308]	; 1885c <__assert_fail@plt+0x6298>
   18724:	mov	r0, #0
   18728:	bl	12084 <dcgettext@plt>
   1872c:	mov	r3, r5
   18730:	mov	r2, r0
   18734:	mov	r1, #0
   18738:	mov	r0, #1
   1873c:	bl	121bc <error@plt>
   18740:	mov	r2, #5
   18744:	ldr	r1, [pc, #276]	; 18860 <__assert_fail@plt+0x629c>
   18748:	mov	r0, #0
   1874c:	bl	12084 <dcgettext@plt>
   18750:	mov	r3, r6
   18754:	mov	r2, r0
   18758:	mov	r1, #0
   1875c:	mov	r0, #1
   18760:	bl	121bc <error@plt>
   18764:	mov	r2, #5
   18768:	ldr	r1, [pc, #240]	; 18860 <__assert_fail@plt+0x629c>
   1876c:	mov	r0, #0
   18770:	bl	12084 <dcgettext@plt>
   18774:	mov	r3, r6
   18778:	mov	r2, r0
   1877c:	mov	r1, r4
   18780:	mov	r0, #1
   18784:	bl	121bc <error@plt>
   18788:	cmp	r0, #65536	; 0x10000
   1878c:	bcc	18688 <__assert_fail@plt+0x60c4>
   18790:	mov	r5, r0
   18794:	b	1871c <__assert_fail@plt+0x6158>
   18798:	mov	sl, #1
   1879c:	b	18530 <__assert_fail@plt+0x5f6c>
   187a0:	mov	r2, #5
   187a4:	ldr	r1, [pc, #184]	; 18864 <__assert_fail@plt+0x62a0>
   187a8:	mov	r0, #0
   187ac:	bl	12084 <dcgettext@plt>
   187b0:	mov	r2, r0
   187b4:	mov	r1, #0
   187b8:	mov	r0, r1
   187bc:	bl	121bc <error@plt>
   187c0:	mov	r0, #1
   187c4:	bl	17d14 <__assert_fail@plt+0x5750>
   187c8:	ldr	r3, [pc, #116]	; 18844 <__assert_fail@plt+0x6280>
   187cc:	ldr	r3, [r3, #44]	; 0x2c
   187d0:	tst	r3, #16
   187d4:	beq	18458 <__assert_fail@plt+0x5e94>
   187d8:	mov	r2, #5
   187dc:	ldr	r1, [pc, #132]	; 18868 <__assert_fail@plt+0x62a4>
   187e0:	mov	r0, #0
   187e4:	bl	12084 <dcgettext@plt>
   187e8:	ldr	r3, [pc, #124]	; 1886c <__assert_fail@plt+0x62a8>
   187ec:	ldr	r1, [r3]
   187f0:	bl	12558 <fputs@plt>
   187f4:	ldr	r3, [pc, #48]	; 1882c <__assert_fail@plt+0x6268>
   187f8:	add	r5, r3, #48	; 0x30
   187fc:	add	r4, r3, #156	; 0x9c
   18800:	ldr	r7, [pc, #104]	; 18870 <__assert_fail@plt+0x62ac>
   18804:	ldr	r6, [pc, #96]	; 1886c <__assert_fail@plt+0x62a8>
   18808:	ldr	r3, [r5, #8]
   1880c:	ldr	r2, [r5], #12
   18810:	mov	r1, r7
   18814:	ldr	r0, [r6]
   18818:	bl	1230c <fprintf@plt>
   1881c:	cmp	r5, r4
   18820:	bne	18808 <__assert_fail@plt+0x6244>
   18824:	mov	r0, #0
   18828:	bl	122a0 <exit@plt>
   1882c:	andeq	r3, r4, r8, lsl #22
   18830:	andeq	r4, r4, ip, lsl r4
   18834:	andeq	r4, r4, r0, lsr #8
   18838:	andeq	r4, r4, r4, lsr #8
   1883c:	andeq	r4, r4, r8, lsr #8
   18840:	andeq	r4, r4, ip, lsr #8
   18844:	andeq	r9, r5, ip, ror #28
   18848:	andeq	r4, r4, r0, lsr r4
   1884c:	andeq	r4, r4, r8, asr r4
   18850:	andeq	r4, r4, r8, lsl #9
   18854:	andeq	r4, r4, ip, lsl #9
   18858:	andeq	r4, r4, ip, asr #9
   1885c:	andeq	r4, r4, r4, lsr #10
   18860:	andeq	r4, r4, r4, lsl #10
   18864:	andeq	r4, r4, ip, lsl #11
   18868:	andeq	r4, r4, r4, lsl r3
   1886c:	andeq	r9, r5, r4, asr r5
   18870:	andeq	r4, r4, ip, ror r4
   18874:	push	{r4, r5, lr}
   18878:	sub	sp, sp, #12
   1887c:	mov	r4, r0
   18880:	ldr	r0, [pc, #344]	; 189e0 <__assert_fail@plt+0x641c>
   18884:	bl	121f8 <getenv@plt>
   18888:	cmp	r0, #0
   1888c:	movne	r3, #1
   18890:	moveq	r3, #0
   18894:	strb	r3, [r4, #17]
   18898:	bl	17f54 <__assert_fail@plt+0x5990>
   1889c:	strb	r0, [r4, #56]	; 0x38
   188a0:	mov	r0, #0
   188a4:	str	r0, [r4, #60]	; 0x3c
   188a8:	bl	12534 <isatty@plt>
   188ac:	cmp	r0, #0
   188b0:	movne	r3, #1
   188b4:	strbne	r3, [r4, #16]
   188b8:	movne	r3, #0
   188bc:	moveq	r3, #0
   188c0:	strbeq	r3, [r4, #16]
   188c4:	strb	r3, [r4, #15]
   188c8:	ldrb	r3, [r4, #17]
   188cc:	cmp	r3, #0
   188d0:	movne	r3, #0
   188d4:	strbne	r3, [r4, #16]
   188d8:	mov	r3, #1
   188dc:	strb	r3, [r4]
   188e0:	mov	r1, #0
   188e4:	strb	r1, [r4, #1]
   188e8:	mvn	r3, #0
   188ec:	str	r3, [r4, #8]
   188f0:	str	r3, [r4, #4]
   188f4:	mov	r0, sp
   188f8:	bl	1218c <gettimeofday@plt>
   188fc:	cmp	r0, #0
   18900:	bne	18998 <__assert_fail@plt+0x63d4>
   18904:	ldr	r0, [sp]
   18908:	mov	r3, #1000	; 0x3e8
   1890c:	ldr	r2, [sp, #4]
   18910:	mul	r3, r3, r2
   18914:	str	r0, [r4, #20]
   18918:	str	r3, [r4, #24]
   1891c:	sub	r0, r0, #86016	; 0x15000
   18920:	sub	r0, r0, #384	; 0x180
   18924:	str	r0, [r4, #28]
   18928:	str	r3, [r4, #32]
   1892c:	mov	r3, #0
   18930:	strb	r3, [r4, #36]	; 0x24
   18934:	strb	r3, [r4, #13]
   18938:	strb	r3, [r4, #14]
   1893c:	ldrb	r3, [r4, #17]
   18940:	cmp	r3, #0
   18944:	movne	r3, #512	; 0x200
   18948:	moveq	r3, #1024	; 0x400
   1894c:	str	r3, [r4, #40]	; 0x28
   18950:	mov	r3, #0
   18954:	str	r3, [r4, #44]	; 0x2c
   18958:	mov	r3, #2
   1895c:	strh	r3, [r4, #68]	; 0x44
   18960:	ldr	r0, [pc, #124]	; 189e4 <__assert_fail@plt+0x6420>
   18964:	bl	121f8 <getenv@plt>
   18968:	cmp	r0, #0
   1896c:	bne	189c0 <__assert_fail@plt+0x63fc>
   18970:	mov	r5, #0
   18974:	strb	r5, [r4, #12]
   18978:	mov	r0, r5
   1897c:	bl	1edc4 <__assert_fail@plt+0xc800>
   18980:	mov	r3, #8
   18984:	str	r3, [r4, #72]	; 0x48
   18988:	str	r5, [r4, #76]	; 0x4c
   1898c:	strb	r5, [r4, #80]	; 0x50
   18990:	add	sp, sp, #12
   18994:	pop	{r4, r5, pc}
   18998:	mov	r0, #0
   1899c:	bl	12054 <time@plt>
   189a0:	cmn	r0, #1
   189a4:	movne	r3, #0
   189a8:	bne	18914 <__assert_fail@plt+0x6350>
   189ac:	ldr	r3, [pc, #52]	; 189e8 <__assert_fail@plt+0x6424>
   189b0:	ldr	r2, [pc, #52]	; 189ec <__assert_fail@plt+0x6428>
   189b4:	ldr	r1, [pc, #52]	; 189f0 <__assert_fail@plt+0x642c>
   189b8:	ldr	r0, [pc, #52]	; 189f4 <__assert_fail@plt+0x6430>
   189bc:	bl	125c4 <__assert_fail@plt>
   189c0:	mov	r2, #5
   189c4:	ldr	r1, [pc, #44]	; 189f8 <__assert_fail@plt+0x6434>
   189c8:	mov	r0, #0
   189cc:	bl	12084 <dcgettext@plt>
   189d0:	mov	r2, r0
   189d4:	mov	r1, #0
   189d8:	mov	r0, #1
   189dc:	bl	121bc <error@plt>
   189e0:			; <UNDEFINED> instruction: 0x000445b0
   189e4:	ldrdeq	r4, [r4], -r0
   189e8:	andeq	r3, r4, r0, ror #23
   189ec:	ldrdeq	r0, [r0], -r2
   189f0:	andeq	r3, r4, r4, ror #23
   189f4:	andeq	r4, r4, r0, asr #11
   189f8:	andeq	r4, r4, r0, ror #11
   189fc:	ldr	r3, [pc, #20]	; 18a18 <__assert_fail@plt+0x6454>
   18a00:	ldr	r2, [pc, #20]	; 18a1c <__assert_fail@plt+0x6458>
   18a04:	cmp	r3, r0
   18a08:	cmpne	r2, r0
   18a0c:	moveq	r0, #1
   18a10:	movne	r0, #0
   18a14:	bx	lr
   18a18:			; <UNDEFINED> instruction: 0x00013fbc
   18a1c:	andeq	r4, r1, r0, lsl #11
   18a20:	push	{r4, lr}
   18a24:	mov	r2, r1
   18a28:	ldr	r3, [pc, #8]	; 18a38 <__assert_fail@plt+0x6474>
   18a2c:	ldr	r1, [r3, #72]	; 0x48
   18a30:	bl	2bc6c <__assert_fail@plt+0x196a8>
   18a34:	pop	{r4, pc}
   18a38:	andeq	r9, r5, ip, ror #28
   18a3c:	push	{r4, r5, r6, lr}
   18a40:	mov	r4, r0
   18a44:	mov	r5, r1
   18a48:	cmp	r2, #0
   18a4c:	beq	18aa0 <__assert_fail@plt+0x64dc>
   18a50:	ldr	r2, [pc, #120]	; 18ad0 <__assert_fail@plt+0x650c>
   18a54:	ldrb	r2, [r2, #40]	; 0x28
   18a58:	cmp	r2, #0
   18a5c:	beq	18a70 <__assert_fail@plt+0x64ac>
   18a60:	mov	r2, #1
   18a64:	ldr	r3, [pc, #100]	; 18ad0 <__assert_fail@plt+0x650c>
   18a68:	strb	r2, [r3, #40]	; 0x28
   18a6c:	pop	{r4, r5, r6, pc}
   18a70:	mov	r1, r3
   18a74:	mov	r0, #0
   18a78:	bl	18a20 <__assert_fail@plt+0x645c>
   18a7c:	mov	r3, r0
   18a80:	ldr	r2, [pc, #76]	; 18ad4 <__assert_fail@plt+0x6510>
   18a84:	mov	r1, r5
   18a88:	mov	r0, r4
   18a8c:	bl	121bc <error@plt>
   18a90:	mov	r2, #1
   18a94:	ldr	r3, [pc, #52]	; 18ad0 <__assert_fail@plt+0x650c>
   18a98:	str	r2, [r3, #28]
   18a9c:	b	18a60 <__assert_fail@plt+0x649c>
   18aa0:	mov	r1, r3
   18aa4:	mov	r0, #0
   18aa8:	bl	18a20 <__assert_fail@plt+0x645c>
   18aac:	mov	r3, r0
   18ab0:	ldr	r2, [pc, #28]	; 18ad4 <__assert_fail@plt+0x6510>
   18ab4:	mov	r1, r5
   18ab8:	mov	r0, r4
   18abc:	bl	121bc <error@plt>
   18ac0:	mov	r2, #1
   18ac4:	ldr	r3, [pc, #4]	; 18ad0 <__assert_fail@plt+0x650c>
   18ac8:	str	r2, [r3, #28]
   18acc:	pop	{r4, r5, r6, pc}
   18ad0:	andeq	r9, r5, r0, asr #28
   18ad4:	andeq	r6, r4, r4, lsl #24
   18ad8:	push	{r4, lr}
   18adc:	mov	r3, r1
   18ae0:	mov	r2, #1
   18ae4:	mov	r1, r0
   18ae8:	mov	r0, #0
   18aec:	bl	18a3c <__assert_fail@plt+0x6478>
   18af0:	pop	{r4, pc}
   18af4:	push	{r4, r5, r6, lr}
   18af8:	mov	r4, r2
   18afc:	ldr	r3, [pc, #224]	; 18be4 <__assert_fail@plt+0x6620>
   18b00:	ldrb	r3, [r3, #4]
   18b04:	cmp	r3, #0
   18b08:	beq	18b2c <__assert_fail@plt+0x6568>
   18b0c:	ldr	r3, [pc, #208]	; 18be4 <__assert_fail@plt+0x6620>
   18b10:	mov	r2, #1
   18b14:	strb	r2, [r3, #4]
   18b18:	strb	r2, [r3, #5]
   18b1c:	ldr	r2, [r4, #16]
   18b20:	str	r2, [r3, #8]
   18b24:	mov	r0, #0
   18b28:	pop	{r4, r5, r6, pc}
   18b2c:	mov	r6, r0
   18b30:	mov	r5, r1
   18b34:	ldr	r3, [pc, #172]	; 18be8 <__assert_fail@plt+0x6624>
   18b38:	ldr	r3, [r3, #52]	; 0x34
   18b3c:	mov	r1, r2
   18b40:	mov	r0, r5
   18b44:	blx	r3
   18b48:	cmp	r0, #0
   18b4c:	bne	18ba4 <__assert_fail@plt+0x65e0>
   18b50:	ldr	r3, [r4, #16]
   18b54:	cmp	r3, #0
   18b58:	bne	18b0c <__assert_fail@plt+0x6548>
   18b5c:	mov	r2, #5
   18b60:	ldr	r1, [pc, #132]	; 18bec <__assert_fail@plt+0x6628>
   18b64:	bl	12084 <dcgettext@plt>
   18b68:	mov	r6, r0
   18b6c:	mov	r2, r5
   18b70:	ldr	r3, [pc, #112]	; 18be8 <__assert_fail@plt+0x6624>
   18b74:	ldr	r1, [r3, #72]	; 0x48
   18b78:	mov	r0, #0
   18b7c:	bl	2bc6c <__assert_fail@plt+0x196a8>
   18b80:	mov	r3, r0
   18b84:	mov	r2, r6
   18b88:	mov	r1, #0
   18b8c:	mov	r0, r1
   18b90:	bl	121bc <error@plt>
   18b94:	mov	r2, #1
   18b98:	ldr	r3, [pc, #68]	; 18be4 <__assert_fail@plt+0x6620>
   18b9c:	str	r2, [r3, #28]
   18ba0:	b	18b0c <__assert_fail@plt+0x6548>
   18ba4:	ldr	r3, [pc, #60]	; 18be8 <__assert_fail@plt+0x6624>
   18ba8:	ldrb	r3, [r3, #14]
   18bac:	cmp	r3, #0
   18bb0:	beq	18bc4 <__assert_fail@plt+0x6600>
   18bb4:	bl	12318 <__errno_location@plt>
   18bb8:	ldr	r3, [r0]
   18bbc:	cmp	r3, #2
   18bc0:	beq	18bdc <__assert_fail@plt+0x6618>
   18bc4:	bl	12318 <__errno_location@plt>
   18bc8:	mov	r1, r6
   18bcc:	ldr	r0, [r0]
   18bd0:	bl	18ad8 <__assert_fail@plt+0x6514>
   18bd4:	mvn	r0, #0
   18bd8:	pop	{r4, r5, r6, pc}
   18bdc:	mvn	r0, #0
   18be0:	pop	{r4, r5, r6, pc}
   18be4:	andeq	r9, r5, r0, asr #28
   18be8:	andeq	r9, r5, ip, ror #28
   18bec:	andeq	r2, r4, r0, lsl #16
   18bf0:	push	{r4, r5, r6, r7, r8, lr}
   18bf4:	mov	r5, r0
   18bf8:	mov	r7, r1
   18bfc:	mov	r8, r2
   18c00:	mov	r6, r3
   18c04:	ldrb	r4, [sp, #24]
   18c08:	ldr	r3, [r0]
   18c0c:	cmp	r3, #0
   18c10:	beq	18c84 <__assert_fail@plt+0x66c0>
   18c14:	and	r3, r3, #61440	; 0xf000
   18c18:	cmp	r3, #40960	; 0xa000
   18c1c:	beq	18c40 <__assert_fail@plt+0x667c>
   18c20:	ldr	r2, [pc, #176]	; 18cd8 <__assert_fail@plt+0x6714>
   18c24:	mov	r4, #1
   18c28:	strb	r4, [r2, #5]
   18c2c:	ldr	r3, [r5]
   18c30:	str	r3, [r2, #8]
   18c34:	str	r3, [r6, #16]
   18c38:	mov	r0, r4
   18c3c:	pop	{r4, r5, r6, r7, r8, pc}
   18c40:	bl	18318 <__assert_fail@plt+0x5d54>
   18c44:	subs	r4, r0, #0
   18c48:	beq	18c20 <__assert_fail@plt+0x665c>
   18c4c:	mov	r2, r6
   18c50:	mov	r1, r8
   18c54:	mov	r0, r7
   18c58:	bl	18af4 <__assert_fail@plt+0x6530>
   18c5c:	cmp	r0, #0
   18c60:	movne	r4, #0
   18c64:	bne	18c38 <__assert_fail@plt+0x6674>
   18c68:	ldr	r2, [r6, #16]
   18c6c:	ldr	r3, [pc, #100]	; 18cd8 <__assert_fail@plt+0x6714>
   18c70:	str	r2, [r3, #8]
   18c74:	str	r2, [r5]
   18c78:	mov	r2, #1
   18c7c:	strb	r2, [r3, #5]
   18c80:	b	18c38 <__assert_fail@plt+0x6674>
   18c84:	cmp	r4, #0
   18c88:	beq	18ca4 <__assert_fail@plt+0x66e0>
   18c8c:	ldr	r3, [pc, #68]	; 18cd8 <__assert_fail@plt+0x6714>
   18c90:	mov	r2, #0
   18c94:	strb	r2, [r3, #4]
   18c98:	strb	r2, [r3, #5]
   18c9c:	str	r2, [r3, #8]
   18ca0:	b	18c38 <__assert_fail@plt+0x6674>
   18ca4:	mov	r2, r6
   18ca8:	mov	r1, r8
   18cac:	mov	r0, r7
   18cb0:	bl	18af4 <__assert_fail@plt+0x6530>
   18cb4:	cmp	r0, #0
   18cb8:	bne	18c38 <__assert_fail@plt+0x6674>
   18cbc:	ldr	r2, [r6, #16]
   18cc0:	str	r2, [r5]
   18cc4:	ldr	r3, [pc, #12]	; 18cd8 <__assert_fail@plt+0x6714>
   18cc8:	str	r2, [r3, #8]
   18ccc:	mov	r4, #1
   18cd0:	strb	r4, [r3, #5]
   18cd4:	b	18c38 <__assert_fail@plt+0x6674>
   18cd8:	andeq	r9, r5, r0, asr #28
   18cdc:	push	{r4, r5, r6, lr}
   18ce0:	mov	r6, r0
   18ce4:	mov	r5, r1
   18ce8:	mov	r4, r2
   18cec:	ldr	r3, [r2, #164]	; 0xa4
   18cf0:	add	r3, r3, #1
   18cf4:	str	r3, [r2, #164]	; 0xa4
   18cf8:	ldrh	r3, [r2, #18]
   18cfc:	cmp	r3, #0
   18d00:	bne	18d10 <__assert_fail@plt+0x674c>
   18d04:	ldrb	r3, [r2, #20]
   18d08:	cmp	r3, #0
   18d0c:	beq	18d80 <__assert_fail@plt+0x67bc>
   18d10:	ldrb	r3, [r4, #18]
   18d14:	cmp	r3, #0
   18d18:	beq	18d2c <__assert_fail@plt+0x6768>
   18d1c:	ldr	r3, [pc, #168]	; 18dcc <__assert_fail@plt+0x6808>
   18d20:	ldrb	r3, [r3, #4]
   18d24:	cmp	r3, #0
   18d28:	beq	18da8 <__assert_fail@plt+0x67e4>
   18d2c:	ldrb	r3, [r4, #19]
   18d30:	cmp	r3, #0
   18d34:	beq	18d48 <__assert_fail@plt+0x6784>
   18d38:	ldr	r3, [pc, #140]	; 18dcc <__assert_fail@plt+0x6808>
   18d3c:	ldrb	r3, [r3, #5]
   18d40:	cmp	r3, #0
   18d44:	beq	18da8 <__assert_fail@plt+0x67e4>
   18d48:	ldrb	r3, [r4, #20]
   18d4c:	cmp	r3, #0
   18d50:	beq	18d80 <__assert_fail@plt+0x67bc>
   18d54:	ldrd	r2, [r5, #96]	; 0x60
   18d58:	orrs	r3, r2, r3
   18d5c:	beq	18da8 <__assert_fail@plt+0x67e4>
   18d60:	ldr	r3, [pc, #100]	; 18dcc <__assert_fail@plt+0x6808>
   18d64:	ldrb	r3, [r3, #5]
   18d68:	cmp	r3, #0
   18d6c:	beq	18da8 <__assert_fail@plt+0x67e4>
   18d70:	ldr	r3, [r5, #16]
   18d74:	and	r3, r3, #61440	; 0xf000
   18d78:	cmp	r3, #16384	; 0x4000
   18d7c:	beq	18da8 <__assert_fail@plt+0x67e4>
   18d80:	ldr	r3, [r4]
   18d84:	mov	r2, r4
   18d88:	mov	r1, r5
   18d8c:	mov	r0, r6
   18d90:	blx	r3
   18d94:	cmp	r0, #0
   18d98:	ldrne	r3, [r4, #168]	; 0xa8
   18d9c:	addne	r3, r3, #1
   18da0:	strne	r3, [r4, #168]	; 0xa8
   18da4:	pop	{r4, r5, r6, pc}
   18da8:	mov	r2, r5
   18dac:	ldr	r3, [pc, #24]	; 18dcc <__assert_fail@plt+0x6808>
   18db0:	ldr	r1, [r3, #12]
   18db4:	mov	r0, r6
   18db8:	bl	18af4 <__assert_fail@plt+0x6530>
   18dbc:	cmp	r0, #0
   18dc0:	beq	18d80 <__assert_fail@plt+0x67bc>
   18dc4:	mov	r0, #0
   18dc8:	pop	{r4, r5, r6, pc}
   18dcc:	andeq	r9, r5, r0, asr #28
   18dd0:	push	{r4, lr}
   18dd4:	mov	r3, r1
   18dd8:	mov	r2, #1
   18ddc:	mov	r1, r0
   18de0:	mov	r0, r2
   18de4:	bl	18a3c <__assert_fail@plt+0x6478>
   18de8:	bl	12570 <abort@plt>
   18dec:	push	{r4, lr}
   18df0:	mov	r3, r1
   18df4:	mov	r2, #0
   18df8:	mov	r1, r0
   18dfc:	mov	r0, r2
   18e00:	bl	18a3c <__assert_fail@plt+0x6478>
   18e04:	pop	{r4, pc}
   18e08:	push	{r4, lr}
   18e0c:	sub	sp, sp, #8
   18e10:	bl	1621c <__assert_fail@plt+0x3c58>
   18e14:	subs	r4, r0, #0
   18e18:	beq	18f2c <__assert_fail@plt+0x6968>
   18e1c:	ldr	r1, [pc, #280]	; 18f3c <__assert_fail@plt+0x6978>
   18e20:	mov	r0, r4
   18e24:	bl	17a28 <__assert_fail@plt+0x5464>
   18e28:	bl	17ff8 <__assert_fail@plt+0x5a34>
   18e2c:	ldr	r3, [pc, #268]	; 18f40 <__assert_fail@plt+0x697c>
   18e30:	ldr	r0, [r3, #36]	; 0x24
   18e34:	bl	190d4 <__assert_fail@plt+0x6b10>
   18e38:	ldr	r1, [pc, #260]	; 18f44 <__assert_fail@plt+0x6980>
   18e3c:	mov	r0, r4
   18e40:	bl	17a28 <__assert_fail@plt+0x5464>
   18e44:	ldr	r3, [pc, #252]	; 18f48 <__assert_fail@plt+0x6984>
   18e48:	ldr	r0, [r3]
   18e4c:	bl	2bf74 <__assert_fail@plt+0x199b0>
   18e50:	cmp	r0, #0
   18e54:	bne	18e9c <__assert_fail@plt+0x68d8>
   18e58:	ldr	r4, [pc, #232]	; 18f48 <__assert_fail@plt+0x6984>
   18e5c:	ldr	r0, [r4]
   18e60:	bl	2bf9c <__assert_fail@plt+0x199d8>
   18e64:	ldr	r0, [r4]
   18e68:	bl	2e3fc <__assert_fail@plt+0x1be38>
   18e6c:	mov	r3, #0
   18e70:	str	r3, [r4]
   18e74:	bl	20204 <__assert_fail@plt+0xdc40>
   18e78:	cmp	r0, #0
   18e7c:	bne	18f0c <__assert_fail@plt+0x6948>
   18e80:	ldr	r3, [pc, #196]	; 18f4c <__assert_fail@plt+0x6988>
   18e84:	ldr	r0, [r3]
   18e88:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   18e8c:	cmn	r0, #1
   18e90:	beq	18f18 <__assert_fail@plt+0x6954>
   18e94:	add	sp, sp, #8
   18e98:	pop	{r4, pc}
   18e9c:	bl	12318 <__errno_location@plt>
   18ea0:	ldr	r4, [r0]
   18ea4:	mov	r2, #5
   18ea8:	ldr	r1, [pc, #160]	; 18f50 <__assert_fail@plt+0x698c>
   18eac:	mov	r0, #0
   18eb0:	bl	12084 <dcgettext@plt>
   18eb4:	mov	r2, r0
   18eb8:	ldr	r3, [pc, #136]	; 18f48 <__assert_fail@plt+0x6984>
   18ebc:	ldr	r3, [r3]
   18ec0:	ldr	r1, [r3]
   18ec4:	cmp	r1, #0
   18ec8:	ldrge	r3, [pc, #132]	; 18f54 <__assert_fail@plt+0x6990>
   18ecc:	movge	r1, r3
   18ed0:	blt	18eec <__assert_fail@plt+0x6928>
   18ed4:	str	r1, [sp]
   18ed8:	mov	r1, r4
   18edc:	mov	r0, #0
   18ee0:	bl	121bc <error@plt>
   18ee4:	mov	r0, #1
   18ee8:	bl	11ff4 <_exit@plt>
   18eec:	ldr	r1, [r3, #4]
   18ef0:	cmp	r1, #0
   18ef4:	ldrne	r1, [r3, #4]
   18ef8:	ldrne	r3, [pc, #88]	; 18f58 <__assert_fail@plt+0x6994>
   18efc:	bne	18ed4 <__assert_fail@plt+0x6910>
   18f00:	ldr	r3, [pc, #76]	; 18f54 <__assert_fail@plt+0x6990>
   18f04:	moveq	r1, r3
   18f08:	b	18ed4 <__assert_fail@plt+0x6910>
   18f0c:	bl	20220 <__assert_fail@plt+0xdc5c>
   18f10:	bl	201e0 <__assert_fail@plt+0xdc1c>
   18f14:	b	18e80 <__assert_fail@plt+0x68bc>
   18f18:	bl	12318 <__errno_location@plt>
   18f1c:	ldr	r1, [pc, #56]	; 18f5c <__assert_fail@plt+0x6998>
   18f20:	ldr	r0, [r0]
   18f24:	bl	18dec <__assert_fail@plt+0x6828>
   18f28:	b	18e94 <__assert_fail@plt+0x68d0>
   18f2c:	ldr	r3, [pc, #12]	; 18f40 <__assert_fail@plt+0x697c>
   18f30:	ldr	r0, [r3, #36]	; 0x24
   18f34:	bl	190d4 <__assert_fail@plt+0x6b10>
   18f38:	b	18e44 <__assert_fail@plt+0x6880>
   18f3c:	andeq	r7, r1, r0, lsr #23
   18f40:	andeq	r9, r5, r0, asr #28
   18f44:	andeq	r7, r1, r4, ror #20
   18f48:	andeq	r9, r5, ip, ror #10
   18f4c:	andeq	r9, r5, r4, asr r5
   18f50:	andeq	r4, r4, r4, ror r6
   18f54:	andeq	r4, r4, r0, lsl r3
   18f58:			; <UNDEFINED> instruction: 0x000454b0
   18f5c:	andeq	r4, r4, r4, lsr #13
   18f60:	push	{r4, lr}
   18f64:	mov	r2, #0
   18f68:	ldr	r3, [pc, #20]	; 18f84 <__assert_fail@plt+0x69c0>
   18f6c:	strb	r2, [r3, #40]	; 0x28
   18f70:	mov	r3, r1
   18f74:	mov	r1, r0
   18f78:	mov	r0, #1
   18f7c:	bl	18a3c <__assert_fail@plt+0x6478>
   18f80:	bl	12570 <abort@plt>
   18f84:	andeq	r9, r5, r0, asr #28
   18f88:	push	{r4, r5}
   18f8c:	ldrd	r4, [r0, #8]
   18f90:	ldrd	r2, [r1, #8]
   18f94:	cmp	r5, r3
   18f98:	cmpeq	r4, r2
   18f9c:	movne	r0, #0
   18fa0:	beq	18fac <__assert_fail@plt+0x69e8>
   18fa4:	pop	{r4, r5}
   18fa8:	bx	lr
   18fac:	ldrd	r4, [r0]
   18fb0:	ldrd	r2, [r1]
   18fb4:	cmp	r5, r3
   18fb8:	cmpeq	r4, r2
   18fbc:	moveq	r0, #1
   18fc0:	movne	r0, #0
   18fc4:	b	18fa4 <__assert_fail@plt+0x69e0>
   18fc8:	push	{r4, r5, r6, r7, r8, lr}
   18fcc:	ldrd	r6, [r0]
   18fd0:	ldrd	r4, [r0, #8]
   18fd4:	mov	r2, r1
   18fd8:	mov	r3, #0
   18fdc:	eor	r0, r6, r4
   18fe0:	eor	r1, r7, r5
   18fe4:	bl	42340 <__assert_fail@plt+0x2fd7c>
   18fe8:	mov	r0, r2
   18fec:	pop	{r4, r5, r6, r7, r8, pc}
   18ff0:	push	{r4, lr}
   18ff4:	mov	r4, r0
   18ff8:	ldr	r0, [r0, #20]
   18ffc:	cmp	r0, #0
   19000:	beq	19010 <__assert_fail@plt+0x6a4c>
   19004:	bl	123cc <fclose@plt>
   19008:	cmp	r0, #0
   1900c:	bne	19024 <__assert_fail@plt+0x6a60>
   19010:	ldr	r0, [r4, #16]
   19014:	bl	2e3fc <__assert_fail@plt+0x1be38>
   19018:	mov	r0, r4
   1901c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   19020:	pop	{r4, pc}
   19024:	bl	12318 <__errno_location@plt>
   19028:	ldr	r1, [r4, #16]
   1902c:	ldr	r0, [r0]
   19030:	bl	18f60 <__assert_fail@plt+0x699c>
   19034:	push	{r4, r5, lr}
   19038:	sub	sp, sp, #12
   1903c:	mov	r5, r0
   19040:	mov	r0, #8
   19044:	bl	3079c <__assert_fail@plt+0x1e1d8>
   19048:	subs	r4, r0, #0
   1904c:	beq	190c0 <__assert_fail@plt+0x6afc>
   19050:	mov	r0, r5
   19054:	bl	12090 <strdup@plt>
   19058:	str	r0, [r4]
   1905c:	cmp	r0, #0
   19060:	beq	190b0 <__assert_fail@plt+0x6aec>
   19064:	ldr	r3, [pc, #92]	; 190c8 <__assert_fail@plt+0x6b04>
   19068:	str	r3, [sp]
   1906c:	ldr	r3, [pc, #88]	; 190cc <__assert_fail@plt+0x6b08>
   19070:	ldr	r2, [pc, #88]	; 190d0 <__assert_fail@plt+0x6b0c>
   19074:	mov	r1, #0
   19078:	mov	r0, #11
   1907c:	bl	224e0 <__assert_fail@plt+0xff1c>
   19080:	str	r0, [r4, #4]
   19084:	cmp	r0, #0
   19088:	movne	r0, r4
   1908c:	beq	19098 <__assert_fail@plt+0x6ad4>
   19090:	add	sp, sp, #12
   19094:	pop	{r4, r5, pc}
   19098:	ldr	r0, [r4]
   1909c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   190a0:	mov	r0, r4
   190a4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   190a8:	mov	r0, #0
   190ac:	b	19090 <__assert_fail@plt+0x6acc>
   190b0:	mov	r0, r4
   190b4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   190b8:	mov	r0, #0
   190bc:	b	19090 <__assert_fail@plt+0x6acc>
   190c0:	mov	r0, #0
   190c4:	b	19090 <__assert_fail@plt+0x6acc>
   190c8:	strdeq	r8, [r1], -r0
   190cc:	andeq	r8, r1, r8, lsl #31
   190d0:	andeq	r8, r1, r8, asr #31
   190d4:	push	{r4, lr}
   190d8:	mov	r4, r0
   190dc:	ldr	r0, [r0]
   190e0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   190e4:	ldr	r0, [r4, #4]
   190e8:	bl	22670 <__assert_fail@plt+0x100ac>
   190ec:	pop	{r4, pc}
   190f0:	push	{r4, r5, r6, lr}
   190f4:	sub	sp, sp, #104	; 0x68
   190f8:	mov	r6, r0
   190fc:	mov	r5, r1
   19100:	mov	r0, #24
   19104:	bl	3079c <__assert_fail@plt+0x1e1d8>
   19108:	subs	r4, r0, #0
   1910c:	beq	19224 <__assert_fail@plt+0x6c60>
   19110:	mov	r0, r5
   19114:	bl	12090 <strdup@plt>
   19118:	str	r0, [r4, #16]
   1911c:	cmp	r0, #0
   19120:	beq	191ac <__assert_fail@plt+0x6be8>
   19124:	ldr	r1, [r6]
   19128:	mov	r0, r5
   1912c:	bl	21b64 <__assert_fail@plt+0xf5a0>
   19130:	mov	r5, r0
   19134:	str	r0, [r4, #20]
   19138:	cmp	r0, #0
   1913c:	beq	191bc <__assert_fail@plt+0x6bf8>
   19140:	bl	12390 <fileno@plt>
   19144:	subs	r5, r0, #0
   19148:	blt	191c8 <__assert_fail@plt+0x6c04>
   1914c:	mov	r1, #1
   19150:	mov	r0, r5
   19154:	bl	21604 <__assert_fail@plt+0xf040>
   19158:	mov	r2, sp
   1915c:	mov	r1, r5
   19160:	mov	r0, #3
   19164:	bl	1212c <__fxstat64@plt>
   19168:	cmp	r0, #0
   1916c:	blt	191dc <__assert_fail@plt+0x6c18>
   19170:	ldrd	r2, [sp]
   19174:	strd	r2, [r4]
   19178:	ldrd	r2, [sp, #96]	; 0x60
   1917c:	strd	r2, [r4, #8]
   19180:	mov	r1, r4
   19184:	ldr	r0, [r6, #4]
   19188:	bl	22228 <__assert_fail@plt+0xfc64>
   1918c:	subs	r5, r0, #0
   19190:	beq	191ec <__assert_fail@plt+0x6c28>
   19194:	mov	r0, r4
   19198:	bl	18ff0 <__assert_fail@plt+0x6a2c>
   1919c:	ldr	r5, [r5, #20]
   191a0:	mov	r0, r5
   191a4:	add	sp, sp, #104	; 0x68
   191a8:	pop	{r4, r5, r6, pc}
   191ac:	mov	r0, r4
   191b0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   191b4:	mov	r5, #0
   191b8:	b	191a0 <__assert_fail@plt+0x6bdc>
   191bc:	mov	r0, r4
   191c0:	bl	18ff0 <__assert_fail@plt+0x6a2c>
   191c4:	b	191a0 <__assert_fail@plt+0x6bdc>
   191c8:	ldr	r3, [pc, #92]	; 1922c <__assert_fail@plt+0x6c68>
   191cc:	mov	r2, #166	; 0xa6
   191d0:	ldr	r1, [pc, #88]	; 19230 <__assert_fail@plt+0x6c6c>
   191d4:	ldr	r0, [pc, #88]	; 19234 <__assert_fail@plt+0x6c70>
   191d8:	bl	125c4 <__assert_fail@plt>
   191dc:	mov	r0, r4
   191e0:	bl	18ff0 <__assert_fail@plt+0x6a2c>
   191e4:	mov	r5, #0
   191e8:	b	191a0 <__assert_fail@plt+0x6bdc>
   191ec:	mov	r1, r4
   191f0:	ldr	r0, [r6, #4]
   191f4:	bl	22a2c <__assert_fail@plt+0x10468>
   191f8:	cmp	r0, #0
   191fc:	ldrne	r5, [r4, #20]
   19200:	bne	191a0 <__assert_fail@plt+0x6bdc>
   19204:	bl	12318 <__errno_location@plt>
   19208:	mov	r5, r0
   1920c:	ldr	r6, [r0]
   19210:	mov	r0, r4
   19214:	bl	18ff0 <__assert_fail@plt+0x6a2c>
   19218:	str	r6, [r5]
   1921c:	mov	r5, #0
   19220:	b	191a0 <__assert_fail@plt+0x6bdc>
   19224:	mov	r5, #0
   19228:	b	191a0 <__assert_fail@plt+0x6bdc>
   1922c:	muleq	r4, r0, r8
   19230:	andeq	r4, r4, r0, lsr #17
   19234:	andeq	r2, r4, r4, asr sl
   19238:	cmp	r0, #32768	; 0x8000
   1923c:	beq	19280 <__assert_fail@plt+0x6cbc>
   19240:	cmp	r0, #16384	; 0x4000
   19244:	beq	19288 <__assert_fail@plt+0x6cc4>
   19248:	cmp	r0, #40960	; 0xa000
   1924c:	beq	19290 <__assert_fail@plt+0x6ccc>
   19250:	cmp	r0, #49152	; 0xc000
   19254:	beq	19298 <__assert_fail@plt+0x6cd4>
   19258:	cmp	r0, #24576	; 0x6000
   1925c:	beq	192a0 <__assert_fail@plt+0x6cdc>
   19260:	cmp	r0, #8192	; 0x2000
   19264:	beq	192a8 <__assert_fail@plt+0x6ce4>
   19268:	ldr	r2, [pc, #64]	; 192b0 <__assert_fail@plt+0x6cec>
   1926c:	ldr	r3, [pc, #64]	; 192b4 <__assert_fail@plt+0x6cf0>
   19270:	cmp	r0, #4096	; 0x1000
   19274:	moveq	r0, r3
   19278:	movne	r0, r2
   1927c:	bx	lr
   19280:	ldr	r0, [pc, #48]	; 192b8 <__assert_fail@plt+0x6cf4>
   19284:	bx	lr
   19288:	ldr	r0, [pc, #44]	; 192bc <__assert_fail@plt+0x6cf8>
   1928c:	bx	lr
   19290:	ldr	r0, [pc, #40]	; 192c0 <__assert_fail@plt+0x6cfc>
   19294:	bx	lr
   19298:	ldr	r0, [pc, #36]	; 192c4 <__assert_fail@plt+0x6d00>
   1929c:	bx	lr
   192a0:	ldr	r0, [pc, #32]	; 192c8 <__assert_fail@plt+0x6d04>
   192a4:	bx	lr
   192a8:	ldr	r0, [pc, #28]	; 192cc <__assert_fail@plt+0x6d08>
   192ac:	bx	lr
   192b0:	andeq	r4, r4, r4, asr #18
   192b4:	andeq	r3, r4, r0, lsl #9
   192b8:	andeq	r6, r4, ip, lsr #25
   192bc:	andeq	r7, r4, r0, lsl r9
   192c0:	andeq	r2, r4, r4, lsl pc
   192c4:	andeq	r5, r4, r4, asr r9
   192c8:			; <UNDEFINED> instruction: 0x000482b4
   192cc:	andeq	r2, r4, r8, asr #11
   192d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192d4:	sub	sp, sp, #148	; 0x94
   192d8:	add	r3, sp, #48	; 0x30
   192dc:	stm	r3, {r0, r1}
   192e0:	cmp	r2, #43	; 0x2b
   192e4:	beq	19374 <__assert_fail@plt+0x6db0>
   192e8:	mov	r4, r2
   192ec:	mov	r3, #37	; 0x25
   192f0:	strb	r3, [sp, #100]	; 0x64
   192f4:	strb	r2, [sp, #101]	; 0x65
   192f8:	mov	r3, #0
   192fc:	strb	r3, [sp, #102]	; 0x66
   19300:	sub	r3, r2, #64	; 0x40
   19304:	cmp	r3, #24
   19308:	ldrls	pc, [pc, r3, lsl #2]
   1930c:	b	19494 <__assert_fail@plt+0x6ed0>
   19310:	andeq	r9, r1, r4, asr r4
   19314:	muleq	r1, r4, r4
   19318:	muleq	r1, r4, r4
   1931c:	muleq	r1, r4, r4
   19320:	muleq	r1, r4, r4
   19324:	muleq	r1, r4, r4
   19328:	muleq	r1, r4, r4
   1932c:	muleq	r1, r4, r4
   19330:	muleq	r1, r4, r4
   19334:	muleq	r1, r4, r4
   19338:	muleq	r1, r4, r4
   1933c:	muleq	r1, r4, r4
   19340:	muleq	r1, r4, r4
   19344:	muleq	r1, r4, r4
   19348:	muleq	r1, r4, r4
   1934c:	muleq	r1, r4, r4
   19350:	muleq	r1, r4, r4
   19354:	muleq	r1, r4, r4
   19358:	muleq	r1, r4, r4
   1935c:	andeq	r9, r1, r4, asr r4
   19360:	andeq	r9, r1, r4, asr r4
   19364:	muleq	r1, r4, r4
   19368:	muleq	r1, r4, r4
   1936c:	muleq	r1, r4, r4
   19370:	andeq	r9, r1, r4, asr r4
   19374:	ldr	r2, [pc, #1192]	; 19824 <__assert_fail@plt+0x7260>
   19378:	add	r3, sp, #100	; 0x64
   1937c:	ldm	r2, {r0, r1, r2}
   19380:	stm	r3, {r0, r1, r2}
   19384:	ldr	r3, [sp, #52]	; 0x34
   19388:	ldr	r2, [pc, #1176]	; 19828 <__assert_fail@plt+0x7264>
   1938c:	mov	r1, #32
   19390:	add	r0, sp, #112	; 0x70
   19394:	bl	12330 <snprintf@plt>
   19398:	mov	r3, r0
   1939c:	str	r0, [sp, #24]
   193a0:	cmp	r0, #31
   193a4:	movle	r3, #1
   193a8:	strle	r3, [sp, #20]
   193ac:	bgt	19480 <__assert_fail@plt+0x6ebc>
   193b0:	add	r0, sp, #48	; 0x30
   193b4:	bl	1224c <localtime@plt>
   193b8:	subs	r6, r0, #0
   193bc:	beq	194ac <__assert_fail@plt+0x6ee8>
   193c0:	ldr	r3, [sp, #24]
   193c4:	str	r3, [sp, #28]
   193c8:	add	r0, sp, #100	; 0x64
   193cc:	bl	122d0 <strlen@plt>
   193d0:	add	r0, r0, #2
   193d4:	bl	2cc14 <__assert_fail@plt+0x1a650>
   193d8:	str	r0, [sp, #16]
   193dc:	mov	r4, r0
   193e0:	mov	r3, #95	; 0x5f
   193e4:	strb	r3, [r4], #1
   193e8:	add	r0, sp, #100	; 0x64
   193ec:	bl	122d0 <strlen@plt>
   193f0:	add	r2, r0, #1
   193f4:	add	r1, sp, #100	; 0x64
   193f8:	mov	r0, r4
   193fc:	bl	12000 <memcpy@plt>
   19400:	add	ip, sp, #56	; 0x38
   19404:	mov	lr, r6
   19408:	ldm	lr!, {r0, r1, r2, r3}
   1940c:	stmia	ip!, {r0, r1, r2, r3}
   19410:	ldm	lr!, {r0, r1, r2, r3}
   19414:	stmia	ip!, {r0, r1, r2, r3}
   19418:	ldm	lr, {r0, r1, r2}
   1941c:	stm	ip, {r0, r1, r2}
   19420:	ldr	r3, [sp, #56]	; 0x38
   19424:	cmp	r3, #10
   19428:	subgt	r3, r3, #11
   1942c:	addle	r3, r3, #11
   19430:	str	r3, [sp, #56]	; 0x38
   19434:	ldr	r3, [pc, #1008]	; 1982c <__assert_fail@plt+0x7268>
   19438:	ldr	r3, [r3]
   1943c:	cmp	r3, #0
   19440:	beq	1956c <__assert_fail@plt+0x6fa8>
   19444:	ldr	r4, [pc, #992]	; 1982c <__assert_fail@plt+0x7268>
   19448:	add	r9, r4, #4
   1944c:	mov	r8, #1
   19450:	b	19620 <__assert_fail@plt+0x705c>
   19454:	ldr	r3, [sp, #52]	; 0x34
   19458:	ldr	r2, [pc, #968]	; 19828 <__assert_fail@plt+0x7264>
   1945c:	mov	r1, #32
   19460:	add	r0, sp, #112	; 0x70
   19464:	bl	12330 <snprintf@plt>
   19468:	mov	r3, r0
   1946c:	str	r0, [sp, #24]
   19470:	cmp	r0, #31
   19474:	movle	r3, #1
   19478:	strle	r3, [sp, #20]
   1947c:	ble	194a4 <__assert_fail@plt+0x6ee0>
   19480:	ldr	r3, [pc, #936]	; 19830 <__assert_fail@plt+0x726c>
   19484:	ldr	r2, [pc, #936]	; 19834 <__assert_fail@plt+0x7270>
   19488:	ldr	r1, [pc, #936]	; 19838 <__assert_fail@plt+0x7274>
   1948c:	ldr	r0, [pc, #936]	; 1983c <__assert_fail@plt+0x7278>
   19490:	bl	125c4 <__assert_fail@plt>
   19494:	mov	r3, #0
   19498:	strb	r3, [sp, #112]	; 0x70
   1949c:	str	r3, [sp, #20]
   194a0:	str	r3, [sp, #24]
   194a4:	cmp	r4, #64	; 0x40
   194a8:	bne	193b0 <__assert_fail@plt+0x6dec>
   194ac:	ldr	r3, [sp, #48]	; 0x30
   194b0:	mov	r0, r3
   194b4:	asr	r1, r3, #31
   194b8:	cmp	r3, #0
   194bc:	blt	196e0 <__assert_fail@plt+0x711c>
   194c0:	ldr	r2, [pc, #868]	; 1982c <__assert_fail@plt+0x7268>
   194c4:	add	r5, r2, #8
   194c8:	mov	r6, #1
   194cc:	mov	r7, #0
   194d0:	strd	r6, [sp, #8]
   194d4:	strd	r6, [sp]
   194d8:	mov	r3, #0
   194dc:	add	r2, r2, #9
   194e0:	bl	22c08 <__assert_fail@plt+0x10644>
   194e4:	mov	r4, r0
   194e8:	cmp	r0, r5
   194ec:	bls	196ec <__assert_fail@plt+0x7128>
   194f0:	ldr	r3, [pc, #840]	; 19840 <__assert_fail@plt+0x727c>
   194f4:	cmp	r0, r3
   194f8:	bcs	19700 <__assert_fail@plt+0x713c>
   194fc:	ldr	r3, [sp, #48]	; 0x30
   19500:	cmp	r3, #0
   19504:	movlt	r3, #45	; 0x2d
   19508:	strblt	r3, [r0, #-1]
   1950c:	sublt	r4, r0, #1
   19510:	ldr	r3, [sp, #20]
   19514:	cmp	r3, #0
   19518:	beq	19560 <__assert_fail@plt+0x6f9c>
   1951c:	mov	r0, r4
   19520:	bl	122d0 <strlen@plt>
   19524:	ldr	r3, [pc, #792]	; 19844 <__assert_fail@plt+0x7280>
   19528:	sub	r3, r4, r3
   1952c:	add	r0, r3, r0
   19530:	ldr	r3, [pc, #784]	; 19848 <__assert_fail@plt+0x7284>
   19534:	cmp	r0, r3
   19538:	bhi	19714 <__assert_fail@plt+0x7150>
   1953c:	rsb	r0, r0, #788	; 0x314
   19540:	add	r5, r0, #2
   19544:	add	r0, sp, #112	; 0x70
   19548:	bl	122d0 <strlen@plt>
   1954c:	cmp	r5, r0
   19550:	bls	19728 <__assert_fail@plt+0x7164>
   19554:	add	r1, sp, #112	; 0x70
   19558:	mov	r0, r4
   1955c:	bl	12144 <strcat@plt>
   19560:	mov	r0, r4
   19564:	add	sp, sp, #148	; 0x94
   19568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1956c:	ldr	r4, [pc, #696]	; 1982c <__assert_fail@plt+0x7268>
   19570:	mov	r0, #1
   19574:	str	r0, [r4, #4]
   19578:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1957c:	str	r0, [r4]
   19580:	b	19444 <__assert_fail@plt+0x6e80>
   19584:	mov	r7, r6
   19588:	mov	r8, #1
   1958c:	mov	fp, r8
   19590:	add	r6, r6, #1
   19594:	ldrb	r4, [r9, #1]!
   19598:	cmp	r4, #0
   1959c:	beq	1977c <__assert_fail@plt+0x71b8>
   195a0:	ldrb	r5, [sl, #1]!
   195a4:	cmp	r5, #0
   195a8:	beq	19800 <__assert_fail@plt+0x723c>
   195ac:	cmp	r5, r4
   195b0:	beq	19590 <__assert_fail@plt+0x6fcc>
   195b4:	bl	12288 <__ctype_b_loc@plt>
   195b8:	ldr	r3, [r0]
   195bc:	lsl	r4, r4, #1
   195c0:	ldrh	r2, [r3, r4]
   195c4:	tst	r2, #2048	; 0x800
   195c8:	beq	19800 <__assert_fail@plt+0x723c>
   195cc:	lsl	r5, r5, #1
   195d0:	ldrh	r3, [r3, r5]
   195d4:	tst	r3, #2048	; 0x800
   195d8:	beq	19800 <__assert_fail@plt+0x723c>
   195dc:	cmp	fp, #0
   195e0:	beq	19584 <__assert_fail@plt+0x6fc0>
   195e4:	sub	r3, r6, r7
   195e8:	cmp	r3, r8
   195ec:	bne	19800 <__assert_fail@plt+0x723c>
   195f0:	add	r8, r8, #1
   195f4:	b	19590 <__assert_fail@plt+0x6fcc>
   195f8:	ldr	r3, [pc, #588]	; 1984c <__assert_fail@plt+0x7288>
   195fc:	ldr	r2, [pc, #588]	; 19850 <__assert_fail@plt+0x728c>
   19600:	ldr	r1, [pc, #560]	; 19838 <__assert_fail@plt+0x7274>
   19604:	ldr	r0, [pc, #584]	; 19854 <__assert_fail@plt+0x7290>
   19608:	bl	125c4 <__assert_fail@plt>
   1960c:	mov	r2, r8
   19610:	mov	r1, r9
   19614:	mov	r0, r5
   19618:	bl	2cd3c <__assert_fail@plt+0x1a778>
   1961c:	str	r0, [r4]
   19620:	ldr	r5, [r4]
   19624:	mov	r3, r6
   19628:	ldr	r2, [sp, #16]
   1962c:	ldr	r1, [r4, #4]
   19630:	mov	r0, r5
   19634:	bl	12234 <strftime@plt>
   19638:	cmp	r0, #0
   1963c:	beq	1960c <__assert_fail@plt+0x7048>
   19640:	ldr	r3, [r4, #4]
   19644:	cmp	r0, r3
   19648:	bcs	1960c <__assert_fail@plt+0x7048>
   1964c:	mov	r7, r0
   19650:	ldr	r3, [sp, #28]
   19654:	add	r3, r3, #1
   19658:	add	r3, r3, r0
   1965c:	mov	r6, r3
   19660:	str	r3, [sp, #44]	; 0x2c
   19664:	mov	r1, r3
   19668:	mov	r0, r5
   1966c:	bl	2cc48 <__assert_fail@plt+0x1a684>
   19670:	ldr	r4, [pc, #436]	; 1982c <__assert_fail@plt+0x7268>
   19674:	str	r0, [r4]
   19678:	str	r6, [r4, #4]
   1967c:	mov	r0, r6
   19680:	bl	2cc14 <__assert_fail@plt+0x1a650>
   19684:	mov	r5, r0
   19688:	str	r0, [sp, #32]
   1968c:	add	r3, sp, #56	; 0x38
   19690:	ldr	r2, [sp, #16]
   19694:	ldr	r1, [r4, #4]
   19698:	bl	12234 <strftime@plt>
   1969c:	ldr	r3, [r4]
   196a0:	str	r3, [sp, #36]	; 0x24
   196a4:	ldrb	r4, [r3]
   196a8:	cmp	r4, #0
   196ac:	beq	1976c <__assert_fail@plt+0x71a8>
   196b0:	mov	r2, r5
   196b4:	ldrb	r5, [r5]
   196b8:	cmp	r5, #0
   196bc:	beq	19800 <__assert_fail@plt+0x723c>
   196c0:	mov	sl, r2
   196c4:	mov	r9, r3
   196c8:	mov	r8, #0
   196cc:	mov	r6, r8
   196d0:	mov	fp, r8
   196d4:	str	r7, [sp, #40]	; 0x28
   196d8:	mov	r7, r8
   196dc:	b	195ac <__assert_fail@plt+0x6fe8>
   196e0:	rsbs	r0, r3, #0
   196e4:	rsc	r1, r1, #0
   196e8:	b	194c0 <__assert_fail@plt+0x6efc>
   196ec:	ldr	r3, [pc, #316]	; 19830 <__assert_fail@plt+0x726c>
   196f0:	ldr	r2, [pc, #352]	; 19858 <__assert_fail@plt+0x7294>
   196f4:	ldr	r1, [pc, #316]	; 19838 <__assert_fail@plt+0x7274>
   196f8:	ldr	r0, [pc, #348]	; 1985c <__assert_fail@plt+0x7298>
   196fc:	bl	125c4 <__assert_fail@plt>
   19700:	ldr	r3, [pc, #296]	; 19830 <__assert_fail@plt+0x726c>
   19704:	ldr	r2, [pc, #340]	; 19860 <__assert_fail@plt+0x729c>
   19708:	ldr	r1, [pc, #296]	; 19838 <__assert_fail@plt+0x7274>
   1970c:	ldr	r0, [pc, #336]	; 19864 <__assert_fail@plt+0x72a0>
   19710:	bl	125c4 <__assert_fail@plt>
   19714:	ldr	r3, [pc, #276]	; 19830 <__assert_fail@plt+0x726c>
   19718:	ldr	r2, [pc, #328]	; 19868 <__assert_fail@plt+0x72a4>
   1971c:	ldr	r1, [pc, #276]	; 19838 <__assert_fail@plt+0x7274>
   19720:	ldr	r0, [pc, #324]	; 1986c <__assert_fail@plt+0x72a8>
   19724:	bl	125c4 <__assert_fail@plt>
   19728:	add	r6, sp, #112	; 0x70
   1972c:	str	r6, [sp, #4]
   19730:	str	r5, [sp]
   19734:	ldr	r3, [sp, #24]
   19738:	ldr	r2, [pc, #304]	; 19870 <__assert_fail@plt+0x72ac>
   1973c:	mov	r1, #0
   19740:	mov	r0, r1
   19744:	bl	121bc <error@plt>
   19748:	mov	r0, r6
   1974c:	bl	122d0 <strlen@plt>
   19750:	cmp	r5, r0
   19754:	bhi	19554 <__assert_fail@plt+0x6f90>
   19758:	ldr	r3, [pc, #208]	; 19830 <__assert_fail@plt+0x726c>
   1975c:	mov	r2, #720	; 0x2d0
   19760:	ldr	r1, [pc, #208]	; 19838 <__assert_fail@plt+0x7274>
   19764:	ldr	r0, [pc, #264]	; 19874 <__assert_fail@plt+0x72b0>
   19768:	bl	125c4 <__assert_fail@plt>
   1976c:	mov	r8, #0
   19770:	mov	r4, r8
   19774:	mov	r6, r8
   19778:	b	19784 <__assert_fail@plt+0x71c0>
   1977c:	mov	r4, r7
   19780:	ldr	r7, [sp, #40]	; 0x28
   19784:	ldr	r3, [sp, #32]
   19788:	ldrb	r3, [r3, r6]
   1978c:	cmp	r3, #0
   19790:	cmpeq	r8, #2
   19794:	bne	19800 <__assert_fail@plt+0x723c>
   19798:	bl	12288 <__ctype_b_loc@plt>
   1979c:	add	r8, r4, r8
   197a0:	ldr	r3, [sp, #36]	; 0x24
   197a4:	add	r4, r3, r8
   197a8:	ldrb	r3, [r3, r8]
   197ac:	ldr	r2, [r0]
   197b0:	lsl	r3, r3, #1
   197b4:	ldrh	r3, [r2, r3]
   197b8:	tst	r3, #2048	; 0x800
   197bc:	bne	19800 <__assert_fail@plt+0x723c>
   197c0:	add	r2, r7, #1
   197c4:	sub	r2, r2, r8
   197c8:	ldr	r3, [sp, #28]
   197cc:	add	r8, r3, r8
   197d0:	add	r3, r2, r8
   197d4:	ldr	r1, [sp, #44]	; 0x2c
   197d8:	cmp	r1, r3
   197dc:	bne	195f8 <__assert_fail@plt+0x7034>
   197e0:	mov	r1, r4
   197e4:	ldr	r3, [sp, #36]	; 0x24
   197e8:	add	r0, r3, r8
   197ec:	bl	11f94 <memmove@plt>
   197f0:	ldr	r2, [sp, #28]
   197f4:	add	r1, sp, #112	; 0x70
   197f8:	mov	r0, r4
   197fc:	bl	12000 <memcpy@plt>
   19800:	ldr	r0, [sp, #16]
   19804:	bl	2e3fc <__assert_fail@plt+0x1be38>
   19808:	ldr	r0, [sp, #32]
   1980c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   19810:	ldr	r3, [pc, #20]	; 1982c <__assert_fail@plt+0x7268>
   19814:	ldr	r4, [r3]
   19818:	adds	r4, r4, #1
   1981c:	bne	19560 <__assert_fail@plt+0x6f9c>
   19820:	b	194ac <__assert_fail@plt+0x6ee8>
   19824:	andeq	r4, r4, ip, lsr #20
   19828:	andeq	r4, r4, r8, asr #18
   1982c:	muleq	r5, r8, r5
   19830:	andeq	r4, r4, ip, lsr #17
   19834:	muleq	r0, r9, r2
   19838:	andeq	r4, r4, r0, asr r9
   1983c:	andeq	r4, r4, r8, asr r9
   19840:			; <UNDEFINED> instruction: 0x000598b7
   19844:	andeq	r9, r5, r0, lsr #11
   19848:	andeq	r0, r0, r6, lsl r3
   1984c:			; <UNDEFINED> instruction: 0x000448b8
   19850:	andeq	r0, r0, r5, lsr #4
   19854:	andeq	r4, r4, r4, ror r9
   19858:			; <UNDEFINED> instruction: 0x000002b9
   1985c:	andeq	r4, r4, r8, lsr #19
   19860:			; <UNDEFINED> instruction: 0x000002ba
   19864:			; <UNDEFINED> instruction: 0x000449b0
   19868:	andeq	r0, r0, r7, asr #5
   1986c:	andeq	r4, r4, ip, asr #19
   19870:	andeq	r4, r4, r0, ror #19
   19874:	andeq	r4, r4, r0, lsl sl
   19878:	push	{r4, r5, lr}
   1987c:	sub	sp, sp, #44	; 0x2c
   19880:	add	r3, sp, #32
   19884:	stm	r3, {r0, r1}
   19888:	mov	r0, r3
   1988c:	bl	1224c <localtime@plt>
   19890:	cmp	r0, #0
   19894:	beq	19a08 <__assert_fail@plt+0x7444>
   19898:	ldr	r3, [r0, #24]
   1989c:	cmp	r3, #0
   198a0:	blt	19954 <__assert_fail@plt+0x7390>
   198a4:	cmp	r3, #6
   198a8:	bgt	19968 <__assert_fail@plt+0x73a4>
   198ac:	ldr	ip, [r0, #16]
   198b0:	cmp	ip, #0
   198b4:	blt	1997c <__assert_fail@plt+0x73b8>
   198b8:	cmp	ip, #11
   198bc:	bgt	19990 <__assert_fail@plt+0x73cc>
   198c0:	ldr	lr, [r0, #8]
   198c4:	cmp	lr, #0
   198c8:	blt	199a4 <__assert_fail@plt+0x73e0>
   198cc:	cmp	lr, #23
   198d0:	bgt	199b8 <__assert_fail@plt+0x73f4>
   198d4:	ldr	r4, [r0, #4]
   198d8:	cmp	r4, #59	; 0x3b
   198dc:	bgt	199cc <__assert_fail@plt+0x7408>
   198e0:	ldr	r5, [r0]
   198e4:	cmp	r5, #61	; 0x3d
   198e8:	bgt	199e0 <__assert_fail@plt+0x741c>
   198ec:	ldr	r1, [pc, #296]	; 19a1c <__assert_fail@plt+0x7458>
   198f0:	add	r3, r1, r3, lsl #2
   198f4:	ldr	r3, [r3, #44]	; 0x2c
   198f8:	ldr	r2, [r0, #20]
   198fc:	add	r2, r2, #1888	; 0x760
   19900:	add	r2, r2, #12
   19904:	str	r2, [sp, #24]
   19908:	ldr	r2, [sp, #36]	; 0x24
   1990c:	str	r2, [sp, #20]
   19910:	str	r5, [sp, #16]
   19914:	str	r4, [sp, #12]
   19918:	str	lr, [sp, #8]
   1991c:	ldr	r2, [r0, #12]
   19920:	str	r2, [sp, #4]
   19924:	add	r1, r1, ip, lsl #2
   19928:	ldr	r2, [r1, #72]	; 0x48
   1992c:	str	r2, [sp]
   19930:	ldr	r2, [pc, #232]	; 19a20 <__assert_fail@plt+0x745c>
   19934:	mov	r1, #1024	; 0x400
   19938:	ldr	r0, [pc, #228]	; 19a24 <__assert_fail@plt+0x7460>
   1993c:	bl	12330 <snprintf@plt>
   19940:	cmp	r0, #1024	; 0x400
   19944:	ldrlt	r0, [pc, #216]	; 19a24 <__assert_fail@plt+0x7460>
   19948:	bge	199f4 <__assert_fail@plt+0x7430>
   1994c:	add	sp, sp, #44	; 0x2c
   19950:	pop	{r4, r5, pc}
   19954:	ldr	r3, [pc, #204]	; 19a28 <__assert_fail@plt+0x7464>
   19958:	ldr	r2, [pc, #204]	; 19a2c <__assert_fail@plt+0x7468>
   1995c:	ldr	r1, [pc, #204]	; 19a30 <__assert_fail@plt+0x746c>
   19960:	ldr	r0, [pc, #204]	; 19a34 <__assert_fail@plt+0x7470>
   19964:	bl	125c4 <__assert_fail@plt>
   19968:	ldr	r3, [pc, #184]	; 19a28 <__assert_fail@plt+0x7464>
   1996c:	ldr	r2, [pc, #196]	; 19a38 <__assert_fail@plt+0x7474>
   19970:	ldr	r1, [pc, #184]	; 19a30 <__assert_fail@plt+0x746c>
   19974:	ldr	r0, [pc, #192]	; 19a3c <__assert_fail@plt+0x7478>
   19978:	bl	125c4 <__assert_fail@plt>
   1997c:	ldr	r3, [pc, #164]	; 19a28 <__assert_fail@plt+0x7464>
   19980:	ldr	r2, [pc, #184]	; 19a40 <__assert_fail@plt+0x747c>
   19984:	ldr	r1, [pc, #164]	; 19a30 <__assert_fail@plt+0x746c>
   19988:	ldr	r0, [pc, #180]	; 19a44 <__assert_fail@plt+0x7480>
   1998c:	bl	125c4 <__assert_fail@plt>
   19990:	ldr	r3, [pc, #144]	; 19a28 <__assert_fail@plt+0x7464>
   19994:	mov	r2, #752	; 0x2f0
   19998:	ldr	r1, [pc, #144]	; 19a30 <__assert_fail@plt+0x746c>
   1999c:	ldr	r0, [pc, #164]	; 19a48 <__assert_fail@plt+0x7484>
   199a0:	bl	125c4 <__assert_fail@plt>
   199a4:	ldr	r3, [pc, #124]	; 19a28 <__assert_fail@plt+0x7464>
   199a8:	ldr	r2, [pc, #156]	; 19a4c <__assert_fail@plt+0x7488>
   199ac:	ldr	r1, [pc, #124]	; 19a30 <__assert_fail@plt+0x746c>
   199b0:	ldr	r0, [pc, #152]	; 19a50 <__assert_fail@plt+0x748c>
   199b4:	bl	125c4 <__assert_fail@plt>
   199b8:	ldr	r3, [pc, #104]	; 19a28 <__assert_fail@plt+0x7464>
   199bc:	ldr	r2, [pc, #144]	; 19a54 <__assert_fail@plt+0x7490>
   199c0:	ldr	r1, [pc, #104]	; 19a30 <__assert_fail@plt+0x746c>
   199c4:	ldr	r0, [pc, #140]	; 19a58 <__assert_fail@plt+0x7494>
   199c8:	bl	125c4 <__assert_fail@plt>
   199cc:	ldr	r3, [pc, #84]	; 19a28 <__assert_fail@plt+0x7464>
   199d0:	ldr	r2, [pc, #132]	; 19a5c <__assert_fail@plt+0x7498>
   199d4:	ldr	r1, [pc, #84]	; 19a30 <__assert_fail@plt+0x746c>
   199d8:	ldr	r0, [pc, #128]	; 19a60 <__assert_fail@plt+0x749c>
   199dc:	bl	125c4 <__assert_fail@plt>
   199e0:	ldr	r3, [pc, #64]	; 19a28 <__assert_fail@plt+0x7464>
   199e4:	mov	r2, #756	; 0x2f4
   199e8:	ldr	r1, [pc, #64]	; 19a30 <__assert_fail@plt+0x746c>
   199ec:	ldr	r0, [pc, #112]	; 19a64 <__assert_fail@plt+0x74a0>
   199f0:	bl	125c4 <__assert_fail@plt>
   199f4:	ldr	r3, [pc, #44]	; 19a28 <__assert_fail@plt+0x7464>
   199f8:	ldr	r2, [pc, #104]	; 19a68 <__assert_fail@plt+0x74a4>
   199fc:	ldr	r1, [pc, #44]	; 19a30 <__assert_fail@plt+0x746c>
   19a00:	ldr	r0, [pc, #100]	; 19a6c <__assert_fail@plt+0x74a8>
   19a04:	bl	125c4 <__assert_fail@plt>
   19a08:	mov	r2, #64	; 0x40
   19a0c:	add	r3, sp, #40	; 0x28
   19a10:	ldmdb	r3, {r0, r1}
   19a14:	bl	192d0 <__assert_fail@plt+0x6d0c>
   19a18:	b	1994c <__assert_fail@plt+0x7388>
   19a1c:	andeq	r4, r4, ip, lsr #17
   19a20:	ldrdeq	r4, [r4], -r8
   19a24:			; <UNDEFINED> instruction: 0x000598b8
   19a28:	andeq	r4, r4, r8, asr #17
   19a2c:	andeq	r0, r0, sp, ror #5
   19a30:	andeq	r4, r4, r0, asr r9
   19a34:	andeq	r4, r4, r8, lsr sl
   19a38:	andeq	r0, r0, lr, ror #5
   19a3c:	andeq	r4, r4, ip, asr #20
   19a40:	andeq	r0, r0, pc, ror #5
   19a44:	andeq	r4, r4, r0, ror #20
   19a48:	andeq	r4, r4, r4, ror sl
   19a4c:	strdeq	r0, [r0], -r1
   19a50:	andeq	r4, r4, r8, lsl #21
   19a54:	strdeq	r0, [r0], -r2
   19a58:	muleq	r4, ip, sl
   19a5c:	strdeq	r0, [r0], -r3
   19a60:			; <UNDEFINED> instruction: 0x00044ab0
   19a64:	andeq	r4, r4, r4, asr #21
   19a68:	andeq	r0, r0, r2, lsl #6
   19a6c:	andeq	r4, r4, r0, lsl #22
   19a70:	push	{r1, r2, r3}
   19a74:	push	{r4, lr}
   19a78:	sub	sp, sp, #12
   19a7c:	mov	r4, r0
   19a80:	add	r2, sp, #24
   19a84:	str	r2, [sp, #4]
   19a88:	ldr	r1, [sp, #20]
   19a8c:	ldr	r0, [r0, #4]
   19a90:	bl	12444 <vfprintf@plt>
   19a94:	cmp	r0, #0
   19a98:	blt	19aac <__assert_fail@plt+0x74e8>
   19a9c:	add	sp, sp, #12
   19aa0:	pop	{r4, lr}
   19aa4:	add	sp, sp, #12
   19aa8:	bx	lr
   19aac:	bl	12318 <__errno_location@plt>
   19ab0:	ldr	r1, [r4, #8]
   19ab4:	ldr	r0, [r0]
   19ab8:	bl	18dec <__assert_fail@plt+0x6828>
   19abc:	b	19a9c <__assert_fail@plt+0x74d8>
   19ac0:	push	{r4, lr}
   19ac4:	sub	sp, sp, #8
   19ac8:	mov	r4, r0
   19acc:	ldrb	r0, [r0, #12]
   19ad0:	str	r2, [sp]
   19ad4:	mov	r3, r1
   19ad8:	mov	r2, r0
   19adc:	ldr	r1, [r4, #16]
   19ae0:	ldr	r0, [r4, #4]
   19ae4:	bl	20c3c <__assert_fail@plt+0xe678>
   19ae8:	cmp	r0, #0
   19aec:	blt	19af8 <__assert_fail@plt+0x7534>
   19af0:	add	sp, sp, #8
   19af4:	pop	{r4, pc}
   19af8:	bl	12318 <__errno_location@plt>
   19afc:	ldr	r1, [r4, #8]
   19b00:	ldr	r0, [r0]
   19b04:	bl	18dec <__assert_fail@plt+0x6828>
   19b08:	b	19af0 <__assert_fail@plt+0x752c>
   19b0c:	push	{r4, r5, r6, lr}
   19b10:	mov	r5, r2
   19b14:	mov	r4, r3
   19b18:	ldr	r3, [r3, #4]
   19b1c:	bl	12138 <fwrite@plt>
   19b20:	cmp	r5, r0
   19b24:	popls	{r4, r5, r6, pc}
   19b28:	bl	12318 <__errno_location@plt>
   19b2c:	ldr	r1, [r4, #8]
   19b30:	ldr	r0, [r0]
   19b34:	bl	18dec <__assert_fail@plt+0x6828>
   19b38:	pop	{r4, r5, r6, pc}
   19b3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19b40:	vpush	{d8}
   19b44:	sub	sp, sp, #804	; 0x324
   19b48:	mov	r5, r0
   19b4c:	mov	r4, r1
   19b50:	mov	r6, r3
   19b54:	ldr	r3, [r1]
   19b58:	cmp	r3, #1
   19b5c:	beq	19b94 <__assert_fail@plt+0x75d0>
   19b60:	mov	r7, r2
   19b64:	bcc	19b7c <__assert_fail@plt+0x75b8>
   19b68:	cmp	r3, #2
   19b6c:	beq	19bcc <__assert_fail@plt+0x7608>
   19b70:	add	sp, sp, #804	; 0x324
   19b74:	vpop	{d8}
   19b78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19b7c:	mov	r3, r0
   19b80:	ldr	r2, [r1, #12]
   19b84:	mov	r1, #1
   19b88:	ldr	r0, [r4, #8]
   19b8c:	bl	19b0c <__assert_fail@plt+0x7548>
   19b90:	b	19b70 <__assert_fail@plt+0x75ac>
   19b94:	mov	r3, r0
   19b98:	ldr	r2, [r1, #12]
   19b9c:	mov	r1, #1
   19ba0:	ldr	r0, [r4, #8]
   19ba4:	bl	19b0c <__assert_fail@plt+0x7548>
   19ba8:	ldr	r0, [r5, #4]
   19bac:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   19bb0:	cmp	r0, #0
   19bb4:	beq	19b70 <__assert_fail@plt+0x75ac>
   19bb8:	bl	12318 <__errno_location@plt>
   19bbc:	ldr	r1, [r5, #8]
   19bc0:	ldr	r0, [r0]
   19bc4:	bl	18dec <__assert_fail@plt+0x6828>
   19bc8:	b	19b70 <__assert_fail@plt+0x75ac>
   19bcc:	ldrb	r3, [r1, #4]
   19bd0:	cmp	r3, #121	; 0x79
   19bd4:	ldrls	pc, [pc, r3, lsl #2]
   19bd8:	b	19b70 <__assert_fail@plt+0x75ac>
   19bdc:	andeq	sl, r1, ip, lsl #10
   19be0:	andeq	r9, r1, r0, ror fp
   19be4:	andeq	r9, r1, r0, ror fp
   19be8:	andeq	r9, r1, r0, ror fp
   19bec:	andeq	r9, r1, r0, ror fp
   19bf0:	andeq	r9, r1, r0, ror fp
   19bf4:	andeq	r9, r1, r0, ror fp
   19bf8:	andeq	r9, r1, r0, ror fp
   19bfc:	andeq	r9, r1, r0, ror fp
   19c00:	andeq	r9, r1, r0, ror fp
   19c04:	andeq	r9, r1, r0, ror fp
   19c08:	andeq	r9, r1, r0, ror fp
   19c0c:	andeq	r9, r1, r0, ror fp
   19c10:	andeq	r9, r1, r0, ror fp
   19c14:	andeq	r9, r1, r0, ror fp
   19c18:	andeq	r9, r1, r0, ror fp
   19c1c:	andeq	r9, r1, r0, ror fp
   19c20:	andeq	r9, r1, r0, ror fp
   19c24:	andeq	r9, r1, r0, ror fp
   19c28:	andeq	r9, r1, r0, ror fp
   19c2c:	andeq	r9, r1, r0, ror fp
   19c30:	andeq	r9, r1, r0, ror fp
   19c34:	andeq	r9, r1, r0, ror fp
   19c38:	andeq	r9, r1, r0, ror fp
   19c3c:	andeq	r9, r1, r0, ror fp
   19c40:	andeq	r9, r1, r0, ror fp
   19c44:	andeq	r9, r1, r0, ror fp
   19c48:	andeq	r9, r1, r0, ror fp
   19c4c:	andeq	r9, r1, r0, ror fp
   19c50:	andeq	r9, r1, r0, ror fp
   19c54:	andeq	r9, r1, r0, ror fp
   19c58:	andeq	r9, r1, r0, ror fp
   19c5c:	andeq	r9, r1, r0, ror fp
   19c60:	andeq	r9, r1, r0, ror fp
   19c64:	andeq	r9, r1, r0, ror fp
   19c68:	andeq	r9, r1, r0, ror fp
   19c6c:	andeq	r9, r1, r0, ror fp
   19c70:	strdeq	sl, [r1], -r4
   19c74:	andeq	r9, r1, r0, ror fp
   19c78:	andeq	r9, r1, r0, ror fp
   19c7c:	andeq	r9, r1, r0, ror fp
   19c80:	andeq	r9, r1, r0, ror fp
   19c84:	andeq	r9, r1, r0, ror fp
   19c88:	andeq	r9, r1, r0, ror fp
   19c8c:	andeq	r9, r1, r0, ror fp
   19c90:	andeq	r9, r1, r0, ror fp
   19c94:	andeq	r9, r1, r0, ror fp
   19c98:	andeq	r9, r1, r0, ror fp
   19c9c:	andeq	r9, r1, r0, ror fp
   19ca0:	andeq	r9, r1, r0, ror fp
   19ca4:	andeq	r9, r1, r0, ror fp
   19ca8:	andeq	r9, r1, r0, ror fp
   19cac:	andeq	r9, r1, r0, ror fp
   19cb0:	andeq	r9, r1, r0, ror fp
   19cb4:	andeq	r9, r1, r0, ror fp
   19cb8:	andeq	r9, r1, r0, ror fp
   19cbc:	andeq	r9, r1, r0, ror fp
   19cc0:	andeq	r9, r1, r0, ror fp
   19cc4:	andeq	r9, r1, r0, ror fp
   19cc8:	andeq	r9, r1, r0, ror fp
   19ccc:	andeq	r9, r1, r0, ror fp
   19cd0:	andeq	r9, r1, r0, ror fp
   19cd4:	andeq	r9, r1, r0, ror fp
   19cd8:	andeq	r9, r1, r0, ror fp
   19cdc:	andeq	r9, r1, r0, ror fp
   19ce0:	andeq	r9, r1, r0, ror fp
   19ce4:	andeq	r9, r1, r0, ror fp
   19ce8:	andeq	r9, r1, r0, ror fp
   19cec:	andeq	r9, r1, r8, ror #28
   19cf0:	andeq	r9, r1, r0, ror fp
   19cf4:	andeq	r9, r1, r8, asr #29
   19cf8:	andeq	r9, r1, r0, lsr #30
   19cfc:	strdeq	r9, [r1], -r8
   19d00:	andeq	r9, r1, r0, ror fp
   19d04:	andeq	r9, r1, r0, ror fp
   19d08:	andeq	r9, r1, r0, ror fp
   19d0c:	andeq	r9, r1, r0, ror fp
   19d10:	andeq	sl, r1, r4, lsr r1
   19d14:	andeq	r9, r1, r0, ror fp
   19d18:	andeq	r9, r1, r0, ror fp
   19d1c:			; <UNDEFINED> instruction: 0x0001a1bc
   19d20:	andeq	r9, r1, r0, ror fp
   19d24:	andeq	r9, r1, r0, ror fp
   19d28:	andeq	sl, r1, r4, lsr r2
   19d2c:	andeq	r9, r1, r0, ror fp
   19d30:	andeq	sl, r1, ip, lsl #6
   19d34:	andeq	r9, r1, r0, ror fp
   19d38:	andeq	r9, r1, r0, ror fp
   19d3c:	andeq	r9, r1, r0, ror fp
   19d40:	andeq	sl, r1, r8, asr #6
   19d44:	andeq	sl, r1, r8, asr r4
   19d48:	andeq	r9, r1, r0, ror fp
   19d4c:	andeq	r9, r1, r0, ror fp
   19d50:	andeq	r9, r1, r0, ror fp
   19d54:	andeq	r9, r1, r0, ror fp
   19d58:	andeq	r9, r1, r0, ror fp
   19d5c:	andeq	r9, r1, r0, ror fp
   19d60:	andeq	r9, r1, r4, asr #27
   19d64:	strdeq	r9, [r1], -r0
   19d68:	andeq	r9, r1, r8, lsr #28
   19d6c:	andeq	r9, r1, r4, asr lr
   19d70:	andeq	r9, r1, r0, ror fp
   19d74:	andeq	r9, r1, r0, lsr #29
   19d78:	andeq	r9, r1, ip, ror #29
   19d7c:	andeq	r9, r1, ip, asr pc
   19d80:	andeq	sl, r1, r0, asr #32
   19d84:	andeq	r9, r1, r0, ror fp
   19d88:	andeq	sl, r1, r8, ror r0
   19d8c:	strheq	sl, [r1], -r8
   19d90:	andeq	sl, r1, ip, asr r1
   19d94:	andeq	sl, r1, r4, ror r1
   19d98:	andeq	r9, r1, r0, ror fp
   19d9c:			; <UNDEFINED> instruction: 0x0001a1b0
   19da0:	andeq	r9, r1, r0, ror fp
   19da4:	andeq	r9, r1, r0, ror fp
   19da8:	strdeq	sl, [r1], -ip
   19dac:	andeq	sl, r1, ip, lsr #5
   19db0:	ldrdeq	sl, [r1], -r8
   19db4:	andeq	r9, r1, r0, ror fp
   19db8:	andeq	r9, r1, r0, ror fp
   19dbc:	andeq	r9, r1, r0, ror fp
   19dc0:	andeq	sl, r1, r8, lsr r4
   19dc4:	ldr	r4, [r1, #8]
   19dc8:	add	r3, sp, #776	; 0x308
   19dcc:	add	r6, r6, #72	; 0x48
   19dd0:	ldm	r6, {r0, r1}
   19dd4:	stm	r3, {r0, r1}
   19dd8:	bl	19878 <__assert_fail@plt+0x72b4>
   19ddc:	mov	r2, r0
   19de0:	mov	r1, r4
   19de4:	mov	r0, r5
   19de8:	bl	19a70 <__assert_fail@plt+0x74ac>
   19dec:	b	19b70 <__assert_fail@plt+0x75ac>
   19df0:	ldr	r4, [r1, #8]
   19df4:	ldrd	r0, [r6, #64]	; 0x40
   19df8:	mov	r2, #512	; 0x200
   19dfc:	mov	r3, #0
   19e00:	strd	r2, [sp, #8]
   19e04:	strd	r2, [sp]
   19e08:	mov	r3, #0
   19e0c:	add	r2, sp, #124	; 0x7c
   19e10:	bl	22c08 <__assert_fail@plt+0x10644>
   19e14:	mov	r2, r0
   19e18:	mov	r1, r4
   19e1c:	mov	r0, r5
   19e20:	bl	19a70 <__assert_fail@plt+0x74ac>
   19e24:	b	19b70 <__assert_fail@plt+0x75ac>
   19e28:	ldr	r4, [r1, #8]
   19e2c:	add	r3, sp, #784	; 0x310
   19e30:	add	r6, r6, #88	; 0x58
   19e34:	ldm	r6, {r0, r1}
   19e38:	stm	r3, {r0, r1}
   19e3c:	bl	19878 <__assert_fail@plt+0x72b4>
   19e40:	mov	r2, r0
   19e44:	mov	r1, r4
   19e48:	mov	r0, r5
   19e4c:	bl	19a70 <__assert_fail@plt+0x74ac>
   19e50:	b	19b70 <__assert_fail@plt+0x75ac>
   19e54:	ldr	r3, [pc, #1780]	; 1a550 <__assert_fail@plt+0x7f8c>
   19e58:	ldr	r2, [r3]
   19e5c:	ldr	r1, [r1, #8]
   19e60:	bl	19a70 <__assert_fail@plt+0x74ac>
   19e64:	b	19b70 <__assert_fail@plt+0x75ac>
   19e68:	ldr	r4, [r1, #8]
   19e6c:	ldrd	r0, [r6]
   19e70:	mov	r2, #1
   19e74:	mov	r3, #0
   19e78:	strd	r2, [sp, #8]
   19e7c:	strd	r2, [sp]
   19e80:	mov	r3, #0
   19e84:	add	r2, sp, #124	; 0x7c
   19e88:	bl	22c08 <__assert_fail@plt+0x10644>
   19e8c:	mov	r2, r0
   19e90:	mov	r1, r4
   19e94:	mov	r0, r5
   19e98:	bl	19a70 <__assert_fail@plt+0x74ac>
   19e9c:	b	19b70 <__assert_fail@plt+0x75ac>
   19ea0:	mov	r0, r2
   19ea4:	bl	21824 <__assert_fail@plt+0xf260>
   19ea8:	mov	r6, r0
   19eac:	mov	r2, r0
   19eb0:	ldr	r1, [r4, #8]
   19eb4:	mov	r0, r5
   19eb8:	bl	19ac0 <__assert_fail@plt+0x74fc>
   19ebc:	mov	r0, r6
   19ec0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   19ec4:	b	19b70 <__assert_fail@plt+0x75ac>
   19ec8:	ldr	r4, [r1, #8]
   19ecc:	mov	r1, r2
   19ed0:	mov	r0, r6
   19ed4:	bl	1b10c <__assert_fail@plt+0x8b48>
   19ed8:	mov	r2, r0
   19edc:	mov	r1, r4
   19ee0:	mov	r0, r5
   19ee4:	bl	19ac0 <__assert_fail@plt+0x74fc>
   19ee8:	b	19b70 <__assert_fail@plt+0x75ac>
   19eec:	ldr	r0, [r6, #28]
   19ef0:	bl	125a0 <getgrgid@plt>
   19ef4:	cmp	r0, #0
   19ef8:	beq	19f20 <__assert_fail@plt+0x795c>
   19efc:	ldr	r2, [r4, #8]
   19f00:	ldr	r3, [r4, #12]
   19f04:	mov	r1, #115	; 0x73
   19f08:	strb	r1, [r2, r3]
   19f0c:	ldr	r2, [r0]
   19f10:	ldr	r1, [r4, #8]
   19f14:	mov	r0, r5
   19f18:	bl	19a70 <__assert_fail@plt+0x74ac>
   19f1c:	b	19b70 <__assert_fail@plt+0x75ac>
   19f20:	ldr	r4, [r4, #8]
   19f24:	ldr	r0, [r6, #28]
   19f28:	mov	r1, #0
   19f2c:	mov	r2, #1
   19f30:	mov	r3, #0
   19f34:	strd	r2, [sp, #8]
   19f38:	strd	r2, [sp]
   19f3c:	mov	r3, r1
   19f40:	add	r2, sp, #124	; 0x7c
   19f44:	bl	22c08 <__assert_fail@plt+0x10644>
   19f48:	mov	r2, r0
   19f4c:	mov	r1, r4
   19f50:	mov	r0, r5
   19f54:	bl	19a70 <__assert_fail@plt+0x74ac>
   19f58:	b	19b70 <__assert_fail@plt+0x75ac>
   19f5c:	mov	r0, r2
   19f60:	bl	2d19c <__assert_fail@plt+0x1abd8>
   19f64:	mov	r6, r0
   19f68:	bl	122d0 <strlen@plt>
   19f6c:	sub	r0, r0, #1
   19f70:	adds	r2, r6, r0
   19f74:	bcs	19fa8 <__assert_fail@plt+0x79e4>
   19f78:	ldrb	r3, [r6, r0]
   19f7c:	cmp	r3, #47	; 0x2f
   19f80:	bne	19fa8 <__assert_fail@plt+0x79e4>
   19f84:	sub	r3, r2, #1
   19f88:	sub	r0, r6, #1
   19f8c:	mov	r2, r3
   19f90:	cmp	r3, r0
   19f94:	beq	19fa8 <__assert_fail@plt+0x79e4>
   19f98:	sub	r3, r3, #1
   19f9c:	ldrb	r1, [r2]
   19fa0:	cmp	r1, #47	; 0x2f
   19fa4:	beq	19f8c <__assert_fail@plt+0x79c8>
   19fa8:	cmp	r6, r2
   19fac:	bcs	19fc0 <__assert_fail@plt+0x79fc>
   19fb0:	ldrb	r3, [r2, #1]
   19fb4:	cmp	r3, #47	; 0x2f
   19fb8:	moveq	r3, #0
   19fbc:	strbeq	r3, [r2, #1]
   19fc0:	mov	r1, #47	; 0x2f
   19fc4:	mov	r0, r6
   19fc8:	bl	12438 <strrchr@plt>
   19fcc:	cmp	r0, #0
   19fd0:	ldreq	r2, [pc, #1404]	; 1a554 <__assert_fail@plt+0x7f90>
   19fd4:	movne	r3, #0
   19fd8:	strbne	r3, [r0]
   19fdc:	movne	r2, r6
   19fe0:	ldr	r1, [r4, #8]
   19fe4:	mov	r0, r5
   19fe8:	bl	19ac0 <__assert_fail@plt+0x74fc>
   19fec:	mov	r0, r6
   19ff0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   19ff4:	b	19b70 <__assert_fail@plt+0x75ac>
   19ff8:	ldr	r8, [pc, #1360]	; 1a550 <__assert_fail@plt+0x7f8c>
   19ffc:	ldr	r0, [r8, #20]
   1a000:	add	r0, r0, #1
   1a004:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1a008:	mov	r6, r0
   1a00c:	ldr	r8, [r8, #20]
   1a010:	mov	r2, r8
   1a014:	mov	r1, r7
   1a018:	bl	12000 <memcpy@plt>
   1a01c:	mov	r3, #0
   1a020:	strb	r3, [r6, r8]
   1a024:	mov	r2, r6
   1a028:	ldr	r1, [r4, #8]
   1a02c:	mov	r0, r5
   1a030:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a034:	mov	r0, r6
   1a038:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1a03c:	b	19b70 <__assert_fail@plt+0x75ac>
   1a040:	ldr	r4, [r1, #8]
   1a044:	ldrd	r0, [r6, #96]	; 0x60
   1a048:	mov	r2, #1
   1a04c:	mov	r3, #0
   1a050:	strd	r2, [sp, #8]
   1a054:	strd	r2, [sp]
   1a058:	mov	r3, #0
   1a05c:	add	r2, sp, #124	; 0x7c
   1a060:	bl	22c08 <__assert_fail@plt+0x10644>
   1a064:	mov	r2, r0
   1a068:	mov	r1, r4
   1a06c:	mov	r0, r5
   1a070:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a074:	b	19b70 <__assert_fail@plt+0x75ac>
   1a078:	ldr	r4, [r1, #8]
   1a07c:	ldrd	r0, [r6, #64]	; 0x40
   1a080:	mov	r2, #1024	; 0x400
   1a084:	mov	r3, #0
   1a088:	strd	r2, [sp, #8]
   1a08c:	mov	r2, #512	; 0x200
   1a090:	mov	r3, #0
   1a094:	strd	r2, [sp]
   1a098:	mov	r3, #0
   1a09c:	add	r2, sp, #124	; 0x7c
   1a0a0:	bl	22c08 <__assert_fail@plt+0x10644>
   1a0a4:	mov	r2, r0
   1a0a8:	mov	r1, r4
   1a0ac:	mov	r0, r5
   1a0b0:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a0b4:	b	19b70 <__assert_fail@plt+0x75ac>
   1a0b8:	ldr	r3, [r6, #16]
   1a0bc:	and	r3, r3, #61440	; 0xf000
   1a0c0:	cmp	r3, #40960	; 0xa000
   1a0c4:	beq	1a0e8 <__assert_fail@plt+0x7b24>
   1a0c8:	ldr	r2, [pc, #1160]	; 1a558 <__assert_fail@plt+0x7f94>
   1a0cc:	ldr	r1, [r4, #8]
   1a0d0:	mov	r0, r5
   1a0d4:	bl	19ac0 <__assert_fail@plt+0x74fc>
   1a0d8:	mov	r6, #0
   1a0dc:	mov	r0, r6
   1a0e0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1a0e4:	b	19b70 <__assert_fail@plt+0x75ac>
   1a0e8:	ldr	r3, [pc, #1120]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a0ec:	ldr	r1, [r3, #12]
   1a0f0:	ldr	r0, [r3, #16]
   1a0f4:	bl	21308 <__assert_fail@plt+0xed44>
   1a0f8:	subs	r6, r0, #0
   1a0fc:	beq	1a114 <__assert_fail@plt+0x7b50>
   1a100:	mov	r2, r6
   1a104:	ldr	r1, [r4, #8]
   1a108:	mov	r0, r5
   1a10c:	bl	19ac0 <__assert_fail@plt+0x74fc>
   1a110:	b	1a0dc <__assert_fail@plt+0x7b18>
   1a114:	bl	12318 <__errno_location@plt>
   1a118:	mov	r1, r7
   1a11c:	ldr	r0, [r0]
   1a120:	bl	18ad8 <__assert_fail@plt+0x6514>
   1a124:	mov	r2, #1
   1a128:	ldr	r3, [pc, #1056]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a12c:	str	r2, [r3, #28]
   1a130:	b	1a0c8 <__assert_fail@plt+0x7b04>
   1a134:	add	r1, sp, #16
   1a138:	mov	r0, r6
   1a13c:	bl	21b54 <__assert_fail@plt+0xf590>
   1a140:	mov	r3, #0
   1a144:	strb	r3, [sp, #26]
   1a148:	add	r2, sp, #16
   1a14c:	ldr	r1, [r4, #8]
   1a150:	mov	r0, r5
   1a154:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a158:	b	19b70 <__assert_fail@plt+0x75ac>
   1a15c:	ldr	r2, [r6, #16]
   1a160:	lsl	r2, r2, #20
   1a164:	lsr	r2, r2, #20
   1a168:	ldr	r1, [r1, #8]
   1a16c:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a170:	b	19b70 <__assert_fail@plt+0x75ac>
   1a174:	ldr	r4, [r1, #8]
   1a178:	ldr	r0, [r6, #20]
   1a17c:	mov	r1, #0
   1a180:	mov	r2, #1
   1a184:	mov	r3, #0
   1a188:	strd	r2, [sp, #8]
   1a18c:	strd	r2, [sp]
   1a190:	mov	r3, r1
   1a194:	add	r2, sp, #124	; 0x7c
   1a198:	bl	22c08 <__assert_fail@plt+0x10644>
   1a19c:	mov	r2, r0
   1a1a0:	mov	r1, r4
   1a1a4:	mov	r0, r5
   1a1a8:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a1ac:	b	19b70 <__assert_fail@plt+0x75ac>
   1a1b0:	ldr	r1, [r1, #8]
   1a1b4:	bl	19ac0 <__assert_fail@plt+0x74fc>
   1a1b8:	b	19b70 <__assert_fail@plt+0x75ac>
   1a1bc:	ldr	r3, [pc, #908]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a1c0:	ldr	r3, [r3]
   1a1c4:	cmp	r3, #0
   1a1c8:	ble	1a1f4 <__assert_fail@plt+0x7c30>
   1a1cc:	ldr	r3, [pc, #892]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a1d0:	ldr	r3, [r3, #20]
   1a1d4:	add	r2, r2, r3
   1a1d8:	ldrb	r3, [r7, r3]
   1a1dc:	cmp	r3, #47	; 0x2f
   1a1e0:	addeq	r2, r2, #1
   1a1e4:	ldr	r1, [r4, #8]
   1a1e8:	mov	r0, r5
   1a1ec:	bl	19ac0 <__assert_fail@plt+0x74fc>
   1a1f0:	b	19b70 <__assert_fail@plt+0x75ac>
   1a1f4:	ldr	r2, [pc, #860]	; 1a558 <__assert_fail@plt+0x7f94>
   1a1f8:	b	1a1e4 <__assert_fail@plt+0x7c20>
   1a1fc:	ldr	r4, [r1, #8]
   1a200:	ldrd	r0, [r6, #48]	; 0x30
   1a204:	mov	r2, #1
   1a208:	mov	r3, #0
   1a20c:	strd	r2, [sp, #8]
   1a210:	strd	r2, [sp]
   1a214:	mov	r3, #0
   1a218:	add	r2, sp, #124	; 0x7c
   1a21c:	bl	22c08 <__assert_fail@plt+0x10644>
   1a220:	mov	r2, r0
   1a224:	mov	r1, r4
   1a228:	mov	r0, r5
   1a22c:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a230:	b	19b70 <__assert_fail@plt+0x75ac>
   1a234:	ldr	r4, [r1, #8]
   1a238:	ldrd	r8, [r6, #48]	; 0x30
   1a23c:	orrs	r3, r8, r9
   1a240:	bne	1a268 <__assert_fail@plt+0x7ca4>
   1a244:	ldrd	r2, [r6, #64]	; 0x40
   1a248:	orrs	r1, r2, r3
   1a24c:	beq	1a2a4 <__assert_fail@plt+0x7ce0>
   1a250:	cmp	r2, #0
   1a254:	sbcs	r3, r3, #0
   1a258:	vldr	d6, [pc, #720]	; 1a530 <__assert_fail@plt+0x7f6c>
   1a25c:	vldr	d7, [pc, #724]	; 1a538 <__assert_fail@plt+0x7f74>
   1a260:	vmovge.f64	d7, d6
   1a264:	b	1a290 <__assert_fail@plt+0x7ccc>
   1a268:	ldrd	r0, [r6, #64]	; 0x40
   1a26c:	bl	4220c <__assert_fail@plt+0x2fc48>
   1a270:	vldr	d8, [pc, #712]	; 1a540 <__assert_fail@plt+0x7f7c>
   1a274:	vmov	d7, r0, r1
   1a278:	vmul.f64	d8, d7, d8
   1a27c:	mov	r0, r8
   1a280:	mov	r1, r9
   1a284:	bl	4220c <__assert_fail@plt+0x2fc48>
   1a288:	vmov	d6, r0, r1
   1a28c:	vdiv.f64	d7, d8, d6
   1a290:	vmov	r2, r3, d7
   1a294:	mov	r1, r4
   1a298:	mov	r0, r5
   1a29c:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a2a0:	b	19b70 <__assert_fail@plt+0x75ac>
   1a2a4:	vldr	d7, [pc, #668]	; 1a548 <__assert_fail@plt+0x7f84>
   1a2a8:	b	1a290 <__assert_fail@plt+0x7ccc>
   1a2ac:	ldr	r4, [r1, #8]
   1a2b0:	add	r3, sp, #792	; 0x318
   1a2b4:	add	r6, r6, #80	; 0x50
   1a2b8:	ldm	r6, {r0, r1}
   1a2bc:	stm	r3, {r0, r1}
   1a2c0:	bl	19878 <__assert_fail@plt+0x72b4>
   1a2c4:	mov	r2, r0
   1a2c8:	mov	r1, r4
   1a2cc:	mov	r0, r5
   1a2d0:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a2d4:	b	19b70 <__assert_fail@plt+0x75ac>
   1a2d8:	ldr	r0, [r6, #24]
   1a2dc:	bl	11f34 <getpwuid@plt>
   1a2e0:	cmp	r0, #0
   1a2e4:	beq	1a30c <__assert_fail@plt+0x7d48>
   1a2e8:	ldr	r2, [r4, #8]
   1a2ec:	ldr	r3, [r4, #12]
   1a2f0:	mov	r1, #115	; 0x73
   1a2f4:	strb	r1, [r2, r3]
   1a2f8:	ldr	r2, [r0]
   1a2fc:	ldr	r1, [r4, #8]
   1a300:	mov	r0, r5
   1a304:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a308:	b	19b70 <__assert_fail@plt+0x75ac>
   1a30c:	ldr	r4, [r4, #8]
   1a310:	ldr	r0, [r6, #24]
   1a314:	mov	r1, #0
   1a318:	mov	r2, #1
   1a31c:	mov	r3, #0
   1a320:	strd	r2, [sp, #8]
   1a324:	strd	r2, [sp]
   1a328:	mov	r3, r1
   1a32c:	add	r2, sp, #124	; 0x7c
   1a330:	bl	22c08 <__assert_fail@plt+0x10644>
   1a334:	mov	r2, r0
   1a338:	mov	r1, r4
   1a33c:	mov	r0, r5
   1a340:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a344:	b	19b70 <__assert_fail@plt+0x75ac>
   1a348:	ldr	r0, [r6, #16]
   1a34c:	and	r0, r0, #61440	; 0xf000
   1a350:	cmp	r0, #40960	; 0xa000
   1a354:	beq	1a370 <__assert_fail@plt+0x7dac>
   1a358:	bl	19238 <__assert_fail@plt+0x6c74>
   1a35c:	mov	r2, r0
   1a360:	ldr	r1, [r4, #8]
   1a364:	mov	r0, r5
   1a368:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a36c:	b	19b70 <__assert_fail@plt+0x75ac>
   1a370:	ldr	r3, [pc, #472]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a374:	ldr	r2, [r3, #12]
   1a378:	ldr	r1, [r3, #16]
   1a37c:	mov	r3, #0
   1a380:	str	r3, [sp]
   1a384:	add	r3, sp, #16
   1a388:	mov	r0, #3
   1a38c:	bl	120fc <__fxstatat64@plt>
   1a390:	cmp	r0, #0
   1a394:	beq	1a418 <__assert_fail@plt+0x7e54>
   1a398:	bl	12318 <__errno_location@plt>
   1a39c:	mov	r6, r0
   1a3a0:	ldr	r3, [r0]
   1a3a4:	cmp	r3, #20
   1a3a8:	cmpne	r3, #2
   1a3ac:	beq	1a3f0 <__assert_fail@plt+0x7e2c>
   1a3b0:	cmp	r3, #40	; 0x28
   1a3b4:	beq	1a404 <__assert_fail@plt+0x7e40>
   1a3b8:	ldr	r2, [pc, #412]	; 1a55c <__assert_fail@plt+0x7f98>
   1a3bc:	ldr	r1, [r4, #8]
   1a3c0:	mov	r0, r5
   1a3c4:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a3c8:	ldr	r4, [r6]
   1a3cc:	mov	r1, r7
   1a3d0:	mov	r0, #0
   1a3d4:	bl	18a20 <__assert_fail@plt+0x645c>
   1a3d8:	mov	r3, r0
   1a3dc:	ldr	r2, [pc, #380]	; 1a560 <__assert_fail@plt+0x7f9c>
   1a3e0:	mov	r1, r4
   1a3e4:	mov	r0, #0
   1a3e8:	bl	121bc <error@plt>
   1a3ec:	b	19b70 <__assert_fail@plt+0x75ac>
   1a3f0:	ldr	r2, [pc, #364]	; 1a564 <__assert_fail@plt+0x7fa0>
   1a3f4:	ldr	r1, [r4, #8]
   1a3f8:	mov	r0, r5
   1a3fc:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a400:	b	19b70 <__assert_fail@plt+0x75ac>
   1a404:	ldr	r2, [pc, #348]	; 1a568 <__assert_fail@plt+0x7fa4>
   1a408:	ldr	r1, [r4, #8]
   1a40c:	mov	r0, r5
   1a410:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a414:	b	19b70 <__assert_fail@plt+0x75ac>
   1a418:	ldr	r0, [sp, #32]
   1a41c:	and	r0, r0, #61440	; 0xf000
   1a420:	bl	19238 <__assert_fail@plt+0x6c74>
   1a424:	mov	r2, r0
   1a428:	ldr	r1, [r4, #8]
   1a42c:	mov	r0, r5
   1a430:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a434:	b	19b70 <__assert_fail@plt+0x75ac>
   1a438:	ldr	r0, [r6, #16]
   1a43c:	and	r0, r0, #61440	; 0xf000
   1a440:	bl	19238 <__assert_fail@plt+0x6c74>
   1a444:	mov	r2, r0
   1a448:	ldr	r1, [r4, #8]
   1a44c:	mov	r0, r5
   1a450:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a454:	b	19b70 <__assert_fail@plt+0x75ac>
   1a458:	ldr	r3, [pc, #240]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a45c:	ldr	r2, [pc, #264]	; 1a56c <__assert_fail@plt+0x7fa8>
   1a460:	ldr	r6, [r2, #64]	; 0x40
   1a464:	add	r2, sp, #16
   1a468:	ldr	r1, [r3, #12]
   1a46c:	ldr	r0, [r3, #16]
   1a470:	blx	r6
   1a474:	cmp	r0, #0
   1a478:	blt	1a498 <__assert_fail@plt+0x7ed4>
   1a47c:	ldr	r2, [sp, #16]
   1a480:	ldr	r1, [r4, #8]
   1a484:	mov	r0, r5
   1a488:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a48c:	ldr	r0, [sp, #16]
   1a490:	bl	124ec <freecon@plt>
   1a494:	b	19b70 <__assert_fail@plt+0x75ac>
   1a498:	ldr	r2, [pc, #184]	; 1a558 <__assert_fail@plt+0x7f94>
   1a49c:	ldr	r1, [r4, #8]
   1a4a0:	mov	r0, r5
   1a4a4:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a4a8:	bl	12318 <__errno_location@plt>
   1a4ac:	ldr	r4, [r0]
   1a4b0:	mov	r2, #5
   1a4b4:	ldr	r1, [pc, #180]	; 1a570 <__assert_fail@plt+0x7fac>
   1a4b8:	mov	r0, #0
   1a4bc:	bl	12084 <dcgettext@plt>
   1a4c0:	mov	r5, r0
   1a4c4:	mov	r1, r7
   1a4c8:	mov	r0, #0
   1a4cc:	bl	18a20 <__assert_fail@plt+0x645c>
   1a4d0:	mov	r3, r0
   1a4d4:	mov	r2, r5
   1a4d8:	mov	r1, r4
   1a4dc:	mov	r0, #0
   1a4e0:	bl	121bc <error@plt>
   1a4e4:	mov	r2, #1
   1a4e8:	ldr	r3, [pc, #96]	; 1a550 <__assert_fail@plt+0x7f8c>
   1a4ec:	str	r2, [r3, #28]
   1a4f0:	b	19b70 <__assert_fail@plt+0x75ac>
   1a4f4:	mov	r3, r0
   1a4f8:	ldr	r2, [r1, #12]
   1a4fc:	mov	r1, #1
   1a500:	ldr	r0, [r4, #8]
   1a504:	bl	19b0c <__assert_fail@plt+0x7548>
   1a508:	b	19b70 <__assert_fail@plt+0x75ac>
   1a50c:	mov	r2, #5
   1a510:	ldr	r1, [pc, #92]	; 1a574 <__assert_fail@plt+0x7fb0>
   1a514:	mov	r0, #0
   1a518:	bl	12084 <dcgettext@plt>
   1a51c:	ldr	r3, [pc, #84]	; 1a578 <__assert_fail@plt+0x7fb4>
   1a520:	mov	r2, r0
   1a524:	mov	r1, #0
   1a528:	mov	r0, #1
   1a52c:	bl	121bc <error@plt>
   1a530:	andeq	r0, r0, r0
   1a534:	svcvc	0x00f00000	; IMB
   1a538:	andeq	r0, r0, r0
   1a53c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a540:	andeq	r0, r0, r0
   1a544:	addmi	r0, r0, r0
   1a548:	andeq	r0, r0, r0
   1a54c:	svccc	0x00f00000	; IMB
   1a550:	andeq	r9, r5, r0, asr #28
   1a554:	andeq	r6, r4, r0, asr #3
   1a558:	andeq	r4, r4, r0, lsl r3
   1a55c:	andeq	r6, r4, r4, lsr #2
   1a560:	andeq	r6, r4, r4, lsl #24
   1a564:	andeq	r4, r4, r0, ror r9
   1a568:	ldrdeq	r7, [r4], -r8
   1a56c:	andeq	r9, r5, ip, ror #28
   1a570:			; <UNDEFINED> instruction: 0x00042cb0
   1a574:	andeq	r4, r4, r4, lsl fp
   1a578:	andeq	r4, r4, r8, lsr fp
   1a57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a580:	sub	sp, sp, #12
   1a584:	ldr	r4, [r2, #40]	; 0x28
   1a588:	cmp	r4, #0
   1a58c:	beq	1a6dc <__assert_fail@plt+0x8118>
   1a590:	add	r6, r2, #40	; 0x28
   1a594:	mov	r5, r1
   1a598:	mov	r7, r0
   1a59c:	mov	r8, sp
   1a5a0:	mvn	sl, #0
   1a5a4:	add	fp, r1, #72	; 0x48
   1a5a8:	b	1a660 <__assert_fail@plt+0x809c>
   1a5ac:	ldm	fp, {r0, r1}
   1a5b0:	stm	r8, {r0, r1}
   1a5b4:	ldr	r3, [r5, #76]	; 0x4c
   1a5b8:	ldr	r9, [r4, #8]
   1a5bc:	ldrb	r2, [r4, #5]
   1a5c0:	str	r3, [sp, #4]
   1a5c4:	ldm	r8, {r0, r1}
   1a5c8:	bl	192d0 <__assert_fail@plt+0x6d0c>
   1a5cc:	mov	r2, r0
   1a5d0:	mov	r1, r9
   1a5d4:	mov	r0, r6
   1a5d8:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a5dc:	b	1a654 <__assert_fail@plt+0x8090>
   1a5e0:	str	sl, [sp]
   1a5e4:	str	sl, [sp, #4]
   1a5e8:	cmp	r2, #64	; 0x40
   1a5ec:	beq	1a638 <__assert_fail@plt+0x8074>
   1a5f0:	ldr	r2, [pc, #240]	; 1a6e8 <__assert_fail@plt+0x8124>
   1a5f4:	ldr	r1, [r4, #8]
   1a5f8:	mov	r0, r6
   1a5fc:	bl	19a70 <__assert_fail@plt+0x74ac>
   1a600:	b	1a654 <__assert_fail@plt+0x8090>
   1a604:	ldr	r3, [r5, #92]	; 0x5c
   1a608:	ldr	r2, [r5, #88]	; 0x58
   1a60c:	str	r2, [sp]
   1a610:	b	1a5b8 <__assert_fail@plt+0x7ff4>
   1a614:	ldr	r3, [r5, #84]	; 0x54
   1a618:	ldr	r2, [r5, #80]	; 0x50
   1a61c:	str	r2, [sp]
   1a620:	b	1a5b8 <__assert_fail@plt+0x7ff4>
   1a624:	ldr	r3, [pc, #192]	; 1a6ec <__assert_fail@plt+0x8128>
   1a628:	ldr	r2, [pc, #192]	; 1a6f0 <__assert_fail@plt+0x812c>
   1a62c:	ldr	r1, [pc, #192]	; 1a6f4 <__assert_fail@plt+0x8130>
   1a630:	ldr	r0, [pc, #192]	; 1a6f8 <__assert_fail@plt+0x8134>
   1a634:	bl	125c4 <__assert_fail@plt>
   1a638:	mov	r3, sl
   1a63c:	b	1a5b8 <__assert_fail@plt+0x7ff4>
   1a640:	mov	r3, r5
   1a644:	mov	r2, r7
   1a648:	mov	r1, r4
   1a64c:	mov	r0, r6
   1a650:	bl	19b3c <__assert_fail@plt+0x7578>
   1a654:	ldr	r4, [r4, #16]
   1a658:	cmp	r4, #0
   1a65c:	beq	1a6dc <__assert_fail@plt+0x8118>
   1a660:	ldr	r3, [r4]
   1a664:	cmp	r3, #2
   1a668:	bne	1a640 <__assert_fail@plt+0x807c>
   1a66c:	ldrb	r2, [r4, #5]
   1a670:	cmp	r2, #0
   1a674:	beq	1a640 <__assert_fail@plt+0x807c>
   1a678:	ldrb	r3, [r4, #4]
   1a67c:	sub	r3, r3, #65	; 0x41
   1a680:	cmp	r3, #19
   1a684:	ldrls	pc, [pc, r3, lsl #2]
   1a688:	b	1a624 <__assert_fail@plt+0x8060>
   1a68c:	andeq	sl, r1, ip, lsr #11
   1a690:	andeq	sl, r1, r0, ror #11
   1a694:	andeq	sl, r1, r4, lsl #12
   1a698:	andeq	sl, r1, r4, lsr #12
   1a69c:	andeq	sl, r1, r4, lsr #12
   1a6a0:	andeq	sl, r1, r4, lsr #12
   1a6a4:	andeq	sl, r1, r4, lsr #12
   1a6a8:	andeq	sl, r1, r4, lsr #12
   1a6ac:	andeq	sl, r1, r4, lsr #12
   1a6b0:	andeq	sl, r1, r4, lsr #12
   1a6b4:	andeq	sl, r1, r4, lsr #12
   1a6b8:	andeq	sl, r1, r4, lsr #12
   1a6bc:	andeq	sl, r1, r4, lsr #12
   1a6c0:	andeq	sl, r1, r4, lsr #12
   1a6c4:	andeq	sl, r1, r4, lsr #12
   1a6c8:	andeq	sl, r1, r4, lsr #12
   1a6cc:	andeq	sl, r1, r4, lsr #12
   1a6d0:	andeq	sl, r1, r4, lsr #12
   1a6d4:	andeq	sl, r1, r4, lsr #12
   1a6d8:	andeq	sl, r1, r4, lsl r6
   1a6dc:	mov	r0, #1
   1a6e0:	add	sp, sp, #12
   1a6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6e8:	andeq	r4, r4, r0, lsl r3
   1a6ec:	andeq	r4, r4, r4, lsr #18
   1a6f0:	andeq	r0, r0, r8, lsl r5
   1a6f4:	andeq	r4, r4, r0, asr r9
   1a6f8:	andeq	r6, r4, r8, asr sp
   1a6fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a700:	sub	sp, sp, #12
   1a704:	str	r1, [sp, #4]
   1a708:	ldrb	r4, [sp, #48]	; 0x30
   1a70c:	ldrb	fp, [sp, #52]	; 0x34
   1a710:	ldr	sl, [sp, #56]	; 0x38
   1a714:	cmp	r4, #123	; 0x7b
   1a718:	beq	1a8f4 <__assert_fail@plt+0x8330>
   1a71c:	mov	r9, r0
   1a720:	mov	r6, r2
   1a724:	mov	r8, r3
   1a728:	cmp	r4, #91	; 0x5b
   1a72c:	beq	1a908 <__assert_fail@plt+0x8344>
   1a730:	cmp	r4, #40	; 0x28
   1a734:	beq	1a91c <__assert_fail@plt+0x8358>
   1a738:	mov	r0, #20
   1a73c:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1a740:	mov	r5, r0
   1a744:	str	r0, [r9]
   1a748:	str	r8, [r0]
   1a74c:	strb	r4, [r0, #4]
   1a750:	strb	fp, [r0, #5]
   1a754:	mov	r3, #0
   1a758:	str	r3, [r0, #16]
   1a75c:	str	r6, [r0, #12]
   1a760:	add	r0, r6, #2
   1a764:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1a768:	mov	r7, r0
   1a76c:	str	r0, [r5, #8]
   1a770:	mov	r2, r6
   1a774:	ldr	r1, [sp, #4]
   1a778:	bl	12360 <strncpy@plt>
   1a77c:	add	r3, r7, r6
   1a780:	cmp	r8, #1
   1a784:	bls	1a930 <__assert_fail@plt+0x836c>
   1a788:	cmp	r8, #2
   1a78c:	bne	1a97c <__assert_fail@plt+0x83b8>
   1a790:	sub	r4, r4, #37	; 0x25
   1a794:	cmp	r4, #84	; 0x54
   1a798:	ldrls	pc, [pc, r4, lsl #2]
   1a79c:	b	1aae8 <__assert_fail@plt+0x8524>
   1a7a0:	muleq	r1, r0, r9
   1a7a4:	andeq	sl, r1, r8, ror #21
   1a7a8:	andeq	sl, r1, r8, ror #21
   1a7ac:	andeq	sl, r1, r8, ror #21
   1a7b0:	andeq	sl, r1, r8, ror #21
   1a7b4:	andeq	sl, r1, r8, ror #21
   1a7b8:	andeq	sl, r1, r8, ror #21
   1a7bc:	andeq	sl, r1, r8, ror #21
   1a7c0:	andeq	sl, r1, r8, ror #21
   1a7c4:	andeq	sl, r1, r8, ror #21
   1a7c8:	andeq	sl, r1, r8, ror #21
   1a7cc:	andeq	sl, r1, r8, ror #21
   1a7d0:	andeq	sl, r1, r8, ror #21
   1a7d4:	andeq	sl, r1, r8, ror #21
   1a7d8:	andeq	sl, r1, r8, ror #21
   1a7dc:	andeq	sl, r1, r8, ror #21
   1a7e0:	andeq	sl, r1, r8, ror #21
   1a7e4:	andeq	sl, r1, r8, ror #21
   1a7e8:	andeq	sl, r1, r8, ror #21
   1a7ec:	andeq	sl, r1, r8, ror #21
   1a7f0:	andeq	sl, r1, r8, ror #21
   1a7f4:	andeq	sl, r1, r8, ror #21
   1a7f8:	andeq	sl, r1, r8, ror #21
   1a7fc:	andeq	sl, r1, r8, ror #21
   1a800:	andeq	sl, r1, r8, ror #21
   1a804:	andeq	sl, r1, r8, ror #21
   1a808:	andeq	sl, r1, r8, ror #21
   1a80c:	andeq	sl, r1, r8, ror #21
   1a810:	andeq	sl, r1, r8, lsl sl
   1a814:	andeq	sl, r1, r8, lsl sl
   1a818:	andeq	sl, r1, r8, lsl sl
   1a81c:	andeq	sl, r1, r0, lsr #21
   1a820:	andeq	sl, r1, r8, ror #21
   1a824:	andeq	sl, r1, r8, lsl sl
   1a828:	andeq	sl, r1, r0, lsr #21
   1a82c:	muleq	r1, r0, sl
   1a830:	andeq	sl, r1, r8, ror #21
   1a834:	andeq	sl, r1, r8, ror #21
   1a838:	andeq	sl, r1, r8, ror #21
   1a83c:	andeq	sl, r1, r8, ror #21
   1a840:	andeq	sl, r1, r8, lsl sl
   1a844:	andeq	sl, r1, r8, ror #21
   1a848:	andeq	sl, r1, r8, ror #21
   1a84c:	andeq	sl, r1, ip, ror #20
   1a850:	andeq	sl, r1, r8, ror #21
   1a854:	andeq	sl, r1, r8, ror #21
   1a858:	andeq	sl, r1, r4, lsr sl
   1a85c:	andeq	sl, r1, r8, lsl sl
   1a860:	andeq	sl, r1, r0, lsr #21
   1a864:	andeq	sl, r1, r8, ror #21
   1a868:	andeq	sl, r1, r8, ror #21
   1a86c:	andeq	sl, r1, r8, ror #21
   1a870:	andeq	sl, r1, r0, asr sl
   1a874:	andeq	sl, r1, ip, ror sl
   1a878:	andeq	sl, r1, r8, ror #21
   1a87c:	andeq	sl, r1, r8, ror #21
   1a880:	andeq	sl, r1, r8, ror #21
   1a884:	andeq	sl, r1, r8, ror #21
   1a888:	andeq	sl, r1, r8, ror #21
   1a88c:	andeq	sl, r1, r8, ror #21
   1a890:	andeq	sl, r1, r8, lsl sl
   1a894:	andeq	sl, r1, r0, lsr #21
   1a898:	andeq	sl, r1, r8, lsl sl
   1a89c:			; <UNDEFINED> instruction: 0x0001aabc
   1a8a0:	andeq	sl, r1, r8, ror #21
   1a8a4:	andeq	sl, r1, ip, ror #20
   1a8a8:	andeq	sl, r1, r8, lsl sl
   1a8ac:	andeq	sl, r1, ip, ror #20
   1a8b0:	andeq	sl, r1, r0, lsl #20
   1a8b4:	andeq	sl, r1, r8, ror #21
   1a8b8:	andeq	sl, r1, r0, lsr #21
   1a8bc:	andeq	sl, r1, r8, lsr #19
   1a8c0:	andeq	sl, r1, ip, asr #21
   1a8c4:	andeq	sl, r1, r0, lsr #21
   1a8c8:	andeq	sl, r1, r8, ror #21
   1a8cc:	andeq	sl, r1, ip, ror #20
   1a8d0:	andeq	sl, r1, r8, ror #21
   1a8d4:	andeq	sl, r1, r8, ror #21
   1a8d8:	andeq	sl, r1, r8, lsl sl
   1a8dc:	andeq	sl, r1, r8, lsl sl
   1a8e0:	andeq	sl, r1, r8, lsl sl
   1a8e4:	andeq	sl, r1, r8, ror #21
   1a8e8:	andeq	sl, r1, r8, ror #21
   1a8ec:	andeq	sl, r1, r8, ror #21
   1a8f0:	andeq	sl, r1, r4, ror #19
   1a8f4:	ldr	r3, [pc, #500]	; 1aaf0 <__assert_fail@plt+0x852c>
   1a8f8:	mov	r2, #78	; 0x4e
   1a8fc:	ldr	r1, [pc, #496]	; 1aaf4 <__assert_fail@plt+0x8530>
   1a900:	ldr	r0, [pc, #496]	; 1aaf8 <__assert_fail@plt+0x8534>
   1a904:	bl	125c4 <__assert_fail@plt>
   1a908:	ldr	r3, [pc, #480]	; 1aaf0 <__assert_fail@plt+0x852c>
   1a90c:	mov	r2, #79	; 0x4f
   1a910:	ldr	r1, [pc, #476]	; 1aaf4 <__assert_fail@plt+0x8530>
   1a914:	ldr	r0, [pc, #480]	; 1aafc <__assert_fail@plt+0x8538>
   1a918:	bl	125c4 <__assert_fail@plt>
   1a91c:	ldr	r3, [pc, #460]	; 1aaf0 <__assert_fail@plt+0x852c>
   1a920:	mov	r2, #80	; 0x50
   1a924:	ldr	r1, [pc, #456]	; 1aaf4 <__assert_fail@plt+0x8530>
   1a928:	ldr	r0, [pc, #464]	; 1ab00 <__assert_fail@plt+0x853c>
   1a92c:	bl	125c4 <__assert_fail@plt>
   1a930:	cmp	r4, #0
   1a934:	bne	1a954 <__assert_fail@plt+0x8390>
   1a938:	cmp	fp, #0
   1a93c:	bne	1a968 <__assert_fail@plt+0x83a4>
   1a940:	mov	r3, #0
   1a944:	strb	r3, [r7, r6]
   1a948:	ldr	r0, [r9]
   1a94c:	add	r0, r0, #16
   1a950:	b	1a9dc <__assert_fail@plt+0x8418>
   1a954:	ldr	r3, [pc, #404]	; 1aaf0 <__assert_fail@plt+0x852c>
   1a958:	mov	r2, #97	; 0x61
   1a95c:	ldr	r1, [pc, #400]	; 1aaf4 <__assert_fail@plt+0x8530>
   1a960:	ldr	r0, [pc, #412]	; 1ab04 <__assert_fail@plt+0x8540>
   1a964:	bl	125c4 <__assert_fail@plt>
   1a968:	ldr	r3, [pc, #384]	; 1aaf0 <__assert_fail@plt+0x852c>
   1a96c:	mov	r2, #98	; 0x62
   1a970:	ldr	r1, [pc, #380]	; 1aaf4 <__assert_fail@plt+0x8530>
   1a974:	ldr	r0, [pc, #396]	; 1ab08 <__assert_fail@plt+0x8544>
   1a978:	bl	125c4 <__assert_fail@plt>
   1a97c:	ldr	r3, [pc, #364]	; 1aaf0 <__assert_fail@plt+0x852c>
   1a980:	mov	r2, #105	; 0x69
   1a984:	ldr	r1, [pc, #360]	; 1aaf4 <__assert_fail@plt+0x8530>
   1a988:	ldr	r0, [pc, #380]	; 1ab0c <__assert_fail@plt+0x8548>
   1a98c:	bl	125c4 <__assert_fail@plt>
   1a990:	add	r3, r3, #1
   1a994:	mov	r2, #37	; 0x25
   1a998:	strb	r2, [r7, r6]
   1a99c:	mov	r2, #0
   1a9a0:	strb	r2, [r3]
   1a9a4:	b	1a9d4 <__assert_fail@plt+0x8410>
   1a9a8:	mov	r2, #1
   1a9ac:	strb	r2, [sl, #18]
   1a9b0:	mov	r2, #115	; 0x73
   1a9b4:	strb	r2, [r7, r6]
   1a9b8:	add	r3, r3, #1
   1a9bc:	mov	r2, #4
   1a9c0:	mov	r1, #0
   1a9c4:	strb	r1, [r3]
   1a9c8:	ldr	r3, [sl, #24]
   1a9cc:	cmp	r2, r3
   1a9d0:	strhi	r2, [sl, #24]
   1a9d4:	ldr	r0, [r9]
   1a9d8:	add	r0, r0, #16
   1a9dc:	add	sp, sp, #12
   1a9e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9e4:	mov	r2, #1
   1a9e8:	strb	r2, [sl, #19]
   1a9ec:	mov	r2, #115	; 0x73
   1a9f0:	strb	r2, [r7, r6]
   1a9f4:	add	r3, r3, #1
   1a9f8:	mov	r2, #2
   1a9fc:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aa00:	mov	r2, #1
   1aa04:	strb	r2, [sl, #20]
   1aa08:	mov	r1, #115	; 0x73
   1aa0c:	strb	r1, [r7, r6]
   1aa10:	add	r3, r3, r2
   1aa14:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aa18:	mov	r2, #1
   1aa1c:	strb	r2, [sl, #18]
   1aa20:	mov	r2, #115	; 0x73
   1aa24:	strb	r2, [r7, r6]
   1aa28:	add	r3, r3, #1
   1aa2c:	mov	r2, #3
   1aa30:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aa34:	mov	r2, #1
   1aa38:	strb	r2, [sl, #18]
   1aa3c:	mov	r2, #103	; 0x67
   1aa40:	strb	r2, [r7, r6]
   1aa44:	add	r3, r3, #1
   1aa48:	mov	r2, #3
   1aa4c:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aa50:	mov	r2, #1
   1aa54:	strb	r2, [sl, #18]
   1aa58:	mov	r2, #115	; 0x73
   1aa5c:	strb	r2, [r7, r6]
   1aa60:	add	r3, r3, #1
   1aa64:	mov	r2, #2
   1aa68:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aa6c:	add	r3, r3, #1
   1aa70:	mov	r2, #115	; 0x73
   1aa74:	strb	r2, [r7, r6]
   1aa78:	b	1a99c <__assert_fail@plt+0x83d8>
   1aa7c:	mov	r2, #115	; 0x73
   1aa80:	strb	r2, [r7, r6]
   1aa84:	add	r3, r3, #1
   1aa88:	mov	r2, #5
   1aa8c:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aa90:	add	r3, r3, #1
   1aa94:	mov	r2, #115	; 0x73
   1aa98:	strb	r2, [r7, r6]
   1aa9c:	b	1a99c <__assert_fail@plt+0x83d8>
   1aaa0:	mov	r2, #1
   1aaa4:	strb	r2, [sl, #18]
   1aaa8:	mov	r2, #115	; 0x73
   1aaac:	strb	r2, [r7, r6]
   1aab0:	add	r3, r3, #1
   1aab4:	mov	r2, #3
   1aab8:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aabc:	add	r3, r3, #1
   1aac0:	mov	r2, #100	; 0x64
   1aac4:	strb	r2, [r7, r6]
   1aac8:	b	1a99c <__assert_fail@plt+0x83d8>
   1aacc:	mov	r2, #111	; 0x6f
   1aad0:	strb	r2, [r7, r6]
   1aad4:	mov	r2, #1
   1aad8:	strb	r2, [sl, #18]
   1aadc:	add	r3, r3, r2
   1aae0:	mov	r2, #3
   1aae4:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aae8:	mov	r2, #0
   1aaec:	b	1a9c0 <__assert_fail@plt+0x83fc>
   1aaf0:	andeq	r4, r4, r4, lsr r9
   1aaf4:	andeq	r4, r4, r0, asr r9
   1aaf8:	andeq	r4, r4, ip, lsr fp
   1aafc:	andeq	r4, r4, r0, asr fp
   1ab00:	andeq	r4, r4, r4, ror #22
   1ab04:	andeq	r4, r4, r8, ror fp
   1ab08:	andeq	r4, r4, ip, lsl #23
   1ab0c:	andeq	r4, r4, r4, lsr #23
   1ab10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab14:	sub	sp, sp, #20
   1ab18:	mov	r4, r0
   1ab1c:	mov	r0, r1
   1ab20:	mov	r7, r2
   1ab24:	ldr	r1, [pc, #1244]	; 1b008 <__assert_fail@plt+0x8a44>
   1ab28:	bl	17c8c <__assert_fail@plt+0x56c8>
   1ab2c:	mov	sl, r0
   1ab30:	mov	r3, #1
   1ab34:	strb	r3, [r0, #17]
   1ab38:	strb	r3, [r0, #16]
   1ab3c:	add	lr, r0, #40	; 0x28
   1ab40:	mov	ip, r4
   1ab44:	ldm	ip!, {r0, r1, r2, r3}
   1ab48:	stmia	lr!, {r0, r1, r2, r3}
   1ab4c:	ldr	r3, [ip]
   1ab50:	str	r3, [lr]
   1ab54:	mov	r3, #0
   1ab58:	strb	r3, [sl, #19]
   1ab5c:	strb	r3, [sl, #18]
   1ab60:	str	r3, [sl, #24]
   1ab64:	str	r3, [sl, #40]	; 0x28
   1ab68:	ldrb	r3, [r7]
   1ab6c:	cmp	r3, #0
   1ab70:	beq	1aee8 <__assert_fail@plt+0x8924>
   1ab74:	add	r9, sl, #40	; 0x28
   1ab78:	mov	r6, r7
   1ab7c:	ldr	r8, [pc, #1160]	; 1b00c <__assert_fail@plt+0x8a48>
   1ab80:	b	1af6c <__assert_fail@plt+0x89a8>
   1ab84:	ldrb	r3, [r6, #1]
   1ab88:	cmp	r3, #99	; 0x63
   1ab8c:	beq	1ac24 <__assert_fail@plt+0x8660>
   1ab90:	cmp	r3, #0
   1ab94:	beq	1ac68 <__assert_fail@plt+0x86a4>
   1ab98:	sub	r2, r3, #48	; 0x30
   1ab9c:	uxtb	r2, r2
   1aba0:	cmp	r2, #7
   1aba4:	bls	1ac90 <__assert_fail@plt+0x86cc>
   1aba8:	sub	r2, r3, #92	; 0x5c
   1abac:	cmp	r2, #26
   1abb0:	ldrls	pc, [pc, r2, lsl #2]
   1abb4:	b	1ad04 <__assert_fail@plt+0x8740>
   1abb8:	andeq	sl, r1, r0, lsr #30
   1abbc:	andeq	sl, r1, r4, lsl #26
   1abc0:	andeq	sl, r1, r4, lsl #26
   1abc4:	andeq	sl, r1, r4, lsl #26
   1abc8:	andeq	sl, r1, r4, lsl #26
   1abcc:	andeq	sl, r1, r4, lsl pc
   1abd0:	ldrdeq	sl, [r1], -ip
   1abd4:	andeq	sl, r1, r4, lsl #26
   1abd8:	andeq	sl, r1, r4, lsl #26
   1abdc:	andeq	sl, r1, r4, lsl #26
   1abe0:	andeq	sl, r1, ip, lsl pc
   1abe4:	andeq	sl, r1, r4, lsl #26
   1abe8:	andeq	sl, r1, r4, lsl #26
   1abec:	andeq	sl, r1, r4, lsl #26
   1abf0:	andeq	sl, r1, r4, lsl #26
   1abf4:	andeq	sl, r1, r4, lsl #26
   1abf8:	andeq	sl, r1, r4, lsl #26
   1abfc:	andeq	sl, r1, r4, lsl #26
   1ac00:	andeq	sl, r1, r4, ror #25
   1ac04:	andeq	sl, r1, r4, lsl #26
   1ac08:	andeq	sl, r1, r4, lsl #26
   1ac0c:	andeq	sl, r1, r4, lsl #26
   1ac10:	andeq	sl, r1, ip, ror #25
   1ac14:	andeq	sl, r1, r4, lsl #26
   1ac18:	strdeq	sl, [r1], -r4
   1ac1c:	andeq	sl, r1, r4, lsl #26
   1ac20:	strdeq	sl, [r1], -ip
   1ac24:	str	sl, [sp, #8]
   1ac28:	mov	r3, #0
   1ac2c:	str	r3, [sp, #4]
   1ac30:	str	r3, [sp]
   1ac34:	mov	r3, #1
   1ac38:	sub	r2, r6, r7
   1ac3c:	mov	r1, r7
   1ac40:	mov	r0, r9
   1ac44:	bl	1a6fc <__assert_fail@plt+0x8138>
   1ac48:	ldrb	r3, [sl, #18]
   1ac4c:	cmp	r3, #0
   1ac50:	beq	1aee8 <__assert_fail@plt+0x8924>
   1ac54:	ldr	r3, [sl, #24]
   1ac58:	cmp	r3, #2
   1ac5c:	movls	r3, #3
   1ac60:	strls	r3, [sl, #24]
   1ac64:	b	1aee8 <__assert_fail@plt+0x8924>
   1ac68:	mov	r2, #5
   1ac6c:	ldr	r1, [pc, #924]	; 1b010 <__assert_fail@plt+0x8a4c>
   1ac70:	mov	r0, #0
   1ac74:	bl	12084 <dcgettext@plt>
   1ac78:	mov	r2, r0
   1ac7c:	mov	r1, #0
   1ac80:	mov	r0, r1
   1ac84:	bl	121bc <error@plt>
   1ac88:	mov	r5, #0
   1ac8c:	b	1af28 <__assert_fail@plt+0x8964>
   1ac90:	sub	r3, r3, #48	; 0x30
   1ac94:	ldrb	r1, [r6, #2]
   1ac98:	sub	r2, r1, #48	; 0x30
   1ac9c:	uxtb	r2, r2
   1aca0:	cmp	r2, #7
   1aca4:	movhi	r5, #1
   1aca8:	bhi	1acd4 <__assert_fail@plt+0x8710>
   1acac:	add	r3, r1, r3, lsl #3
   1acb0:	sub	r3, r3, #48	; 0x30
   1acb4:	ldrb	r1, [r6, #3]
   1acb8:	sub	r2, r1, #48	; 0x30
   1acbc:	uxtb	r2, r2
   1acc0:	cmp	r2, #7
   1acc4:	movhi	r5, #2
   1acc8:	addls	r3, r1, r3, lsl #3
   1accc:	subls	r3, r3, #48	; 0x30
   1acd0:	movls	r5, #3
   1acd4:	strb	r3, [r6]
   1acd8:	b	1af28 <__assert_fail@plt+0x8964>
   1acdc:	mov	r3, #8
   1ace0:	b	1af20 <__assert_fail@plt+0x895c>
   1ace4:	mov	r3, #10
   1ace8:	b	1af20 <__assert_fail@plt+0x895c>
   1acec:	mov	r3, #13
   1acf0:	b	1af20 <__assert_fail@plt+0x895c>
   1acf4:	mov	r3, #9
   1acf8:	b	1af20 <__assert_fail@plt+0x895c>
   1acfc:	mov	r3, #11
   1ad00:	b	1af20 <__assert_fail@plt+0x895c>
   1ad04:	mov	r2, #5
   1ad08:	ldr	r1, [pc, #772]	; 1b014 <__assert_fail@plt+0x8a50>
   1ad0c:	mov	r0, #0
   1ad10:	bl	12084 <dcgettext@plt>
   1ad14:	mov	r5, r6
   1ad18:	ldrb	r3, [r5, #1]!
   1ad1c:	mov	r2, r0
   1ad20:	mov	r1, #0
   1ad24:	mov	r0, r1
   1ad28:	bl	121bc <error@plt>
   1ad2c:	b	1af5c <__assert_fail@plt+0x8998>
   1ad30:	mov	r2, #5
   1ad34:	ldr	r1, [pc, #732]	; 1b018 <__assert_fail@plt+0x8a54>
   1ad38:	mov	r0, #0
   1ad3c:	bl	12084 <dcgettext@plt>
   1ad40:	mov	r3, r6
   1ad44:	mov	r2, r0
   1ad48:	mov	r1, #0
   1ad4c:	mov	r0, #1
   1ad50:	bl	121bc <error@plt>
   1ad54:	add	r4, r4, #1
   1ad58:	ldrb	r3, [r2], #1
   1ad5c:	lsl	r1, r3, #1
   1ad60:	ldrh	r1, [r0, r1]
   1ad64:	tst	r1, #2048	; 0x800
   1ad68:	bne	1ad54 <__assert_fail@plt+0x8790>
   1ad6c:	cmp	r3, #46	; 0x2e
   1ad70:	beq	1ae10 <__assert_fail@plt+0x884c>
   1ad74:	add	r5, r6, r4
   1ad78:	ldrb	fp, [r6, r4]
   1ad7c:	mov	r1, fp
   1ad80:	ldr	r0, [pc, #660]	; 1b01c <__assert_fail@plt+0x8a58>
   1ad84:	bl	122dc <strchr@plt>
   1ad88:	cmp	r0, #0
   1ad8c:	beq	1ae48 <__assert_fail@plt+0x8884>
   1ad90:	ldrb	r3, [r6, r4]
   1ad94:	cmp	r3, #0
   1ad98:	moveq	r4, #1
   1ad9c:	bne	1ae78 <__assert_fail@plt+0x88b4>
   1ada0:	mov	r1, fp
   1ada4:	ldr	r0, [pc, #628]	; 1b020 <__assert_fail@plt+0x8a5c>
   1ada8:	bl	122dc <strchr@plt>
   1adac:	cmp	r0, #0
   1adb0:	bne	1afe4 <__assert_fail@plt+0x8a20>
   1adb4:	cmp	r4, #2
   1adb8:	beq	1aeac <__assert_fail@plt+0x88e8>
   1adbc:	mov	r2, #5
   1adc0:	ldr	r1, [pc, #604]	; 1b024 <__assert_fail@plt+0x8a60>
   1adc4:	mov	r0, #0
   1adc8:	bl	12084 <dcgettext@plt>
   1adcc:	ldrb	r3, [r5]
   1add0:	mov	r2, r0
   1add4:	mov	r1, #0
   1add8:	mov	r0, r1
   1addc:	bl	121bc <error@plt>
   1ade0:	add	r2, r5, #1
   1ade4:	str	sl, [sp, #8]
   1ade8:	mov	r3, #0
   1adec:	str	r3, [sp, #4]
   1adf0:	str	r3, [sp]
   1adf4:	sub	r2, r2, r7
   1adf8:	mov	r1, r7
   1adfc:	mov	r0, r9
   1ae00:	bl	1a6fc <__assert_fail@plt+0x8138>
   1ae04:	mov	r9, r0
   1ae08:	add	r7, r5, #1
   1ae0c:	b	1af5c <__assert_fail@plt+0x8998>
   1ae10:	add	r4, r4, #1
   1ae14:	add	r2, r6, r4
   1ae18:	ldrb	r3, [r6, r4]
   1ae1c:	lsl	r3, r3, #1
   1ae20:	ldrh	r3, [r0, r3]
   1ae24:	tst	r3, #2048	; 0x800
   1ae28:	beq	1ad74 <__assert_fail@plt+0x87b0>
   1ae2c:	add	r4, r4, #1
   1ae30:	ldrb	r3, [r2, #1]!
   1ae34:	lsl	r3, r3, #1
   1ae38:	ldrh	r3, [r0, r3]
   1ae3c:	tst	r3, #2048	; 0x800
   1ae40:	bne	1ae2c <__assert_fail@plt+0x8868>
   1ae44:	b	1ad74 <__assert_fail@plt+0x87b0>
   1ae48:	mov	r1, fp
   1ae4c:	ldr	r0, [pc, #468]	; 1b028 <__assert_fail@plt+0x8a64>
   1ae50:	bl	122dc <strchr@plt>
   1ae54:	cmp	r0, #0
   1ae58:	beq	1afd0 <__assert_fail@plt+0x8a0c>
   1ae5c:	add	r4, r5, #1
   1ae60:	ldrb	r3, [r5, #1]
   1ae64:	cmp	r3, #0
   1ae68:	moveq	r4, #2
   1ae6c:	beq	1ada0 <__assert_fail@plt+0x87dc>
   1ae70:	ldrb	r3, [r5, #1]
   1ae74:	b	1ae80 <__assert_fail@plt+0x88bc>
   1ae78:	mov	r4, r5
   1ae7c:	mov	r3, #0
   1ae80:	str	sl, [sp, #8]
   1ae84:	str	r3, [sp, #4]
   1ae88:	str	fp, [sp]
   1ae8c:	mov	r3, #2
   1ae90:	sub	r2, r5, r7
   1ae94:	mov	r1, r7
   1ae98:	mov	r0, r9
   1ae9c:	bl	1a6fc <__assert_fail@plt+0x8138>
   1aea0:	mov	r9, r0
   1aea4:	mov	r5, r4
   1aea8:	b	1ae08 <__assert_fail@plt+0x8844>
   1aeac:	ldrb	r3, [r5, #1]
   1aeb0:	cmp	r3, #0
   1aeb4:	bne	1adbc <__assert_fail@plt+0x87f8>
   1aeb8:	mov	r2, #5
   1aebc:	ldr	r1, [pc, #360]	; 1b02c <__assert_fail@plt+0x8a68>
   1aec0:	mov	r0, #0
   1aec4:	bl	12084 <dcgettext@plt>
   1aec8:	ldrb	r3, [r5]
   1aecc:	mov	r2, r0
   1aed0:	mov	r1, #0
   1aed4:	mov	r0, r1
   1aed8:	bl	121bc <error@plt>
   1aedc:	b	1ade0 <__assert_fail@plt+0x881c>
   1aee0:	cmp	r7, r6
   1aee4:	bcc	1aef4 <__assert_fail@plt+0x8930>
   1aee8:	mov	r0, #1
   1aeec:	add	sp, sp, #20
   1aef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aef4:	str	sl, [sp, #8]
   1aef8:	str	r3, [sp, #4]
   1aefc:	str	r3, [sp]
   1af00:	sub	r2, r6, r7
   1af04:	mov	r1, r7
   1af08:	mov	r0, r9
   1af0c:	bl	1a6fc <__assert_fail@plt+0x8138>
   1af10:	b	1aee8 <__assert_fail@plt+0x8924>
   1af14:	mov	r3, #7
   1af18:	b	1af20 <__assert_fail@plt+0x895c>
   1af1c:	mov	r3, #12
   1af20:	strb	r3, [r6]
   1af24:	mov	r5, #1
   1af28:	sub	r2, r6, r7
   1af2c:	str	sl, [sp, #8]
   1af30:	mov	r3, #0
   1af34:	str	r3, [sp, #4]
   1af38:	str	r3, [sp]
   1af3c:	add	r2, r2, #1
   1af40:	mov	r1, r7
   1af44:	mov	r0, r9
   1af48:	bl	1a6fc <__assert_fail@plt+0x8138>
   1af4c:	mov	r9, r0
   1af50:	add	r7, r5, #1
   1af54:	add	r7, r6, r7
   1af58:	add	r5, r6, r5
   1af5c:	add	r6, r5, #1
   1af60:	ldrb	r3, [r5, #1]
   1af64:	cmp	r3, #0
   1af68:	beq	1aee0 <__assert_fail@plt+0x891c>
   1af6c:	cmp	r3, #92	; 0x5c
   1af70:	beq	1ab84 <__assert_fail@plt+0x85c0>
   1af74:	cmp	r3, #37	; 0x25
   1af78:	movne	r5, r6
   1af7c:	bne	1af5c <__assert_fail@plt+0x8998>
   1af80:	ldrb	r3, [r6, #1]
   1af84:	cmp	r3, #0
   1af88:	beq	1ad30 <__assert_fail@plt+0x876c>
   1af8c:	cmp	r3, #37	; 0x25
   1af90:	moveq	r4, #1
   1af94:	beq	1ad74 <__assert_fail@plt+0x87b0>
   1af98:	mov	r5, r6
   1af9c:	mov	r4, #0
   1afa0:	add	r4, r4, #1
   1afa4:	ldrb	r1, [r5, #1]!
   1afa8:	cmp	r1, #0
   1afac:	beq	1afc0 <__assert_fail@plt+0x89fc>
   1afb0:	mov	r0, r8
   1afb4:	bl	122dc <strchr@plt>
   1afb8:	cmp	r0, #0
   1afbc:	bne	1afa0 <__assert_fail@plt+0x89dc>
   1afc0:	bl	12288 <__ctype_b_loc@plt>
   1afc4:	ldr	r0, [r0]
   1afc8:	add	r2, r6, r4
   1afcc:	b	1ad58 <__assert_fail@plt+0x8794>
   1afd0:	mov	r1, fp
   1afd4:	ldr	r0, [pc, #68]	; 1b020 <__assert_fail@plt+0x8a5c>
   1afd8:	bl	122dc <strchr@plt>
   1afdc:	cmp	r0, #0
   1afe0:	beq	1adbc <__assert_fail@plt+0x87f8>
   1afe4:	mov	r2, #5
   1afe8:	ldr	r1, [pc, #64]	; 1b030 <__assert_fail@plt+0x8a6c>
   1afec:	mov	r0, #0
   1aff0:	bl	12084 <dcgettext@plt>
   1aff4:	ldrb	r3, [r5]
   1aff8:	mov	r2, r0
   1affc:	mov	r1, #0
   1b000:	mov	r0, #1
   1b004:	bl	121bc <error@plt>
   1b008:	andeq	sl, r1, ip, ror r5
   1b00c:	andeq	r4, r4, ip, lsl #24
   1b010:			; <UNDEFINED> instruction: 0x00044bb8
   1b014:	andeq	r4, r4, r8, ror #23
   1b018:	andeq	r4, r4, r4, lsl fp
   1b01c:	andeq	r4, r4, r4, lsl ip
   1b020:	andeq	r4, r4, ip, lsr ip
   1b024:	andeq	r4, r4, ip, asr #25
   1b028:	andeq	r4, r4, r4, lsr ip
   1b02c:	andeq	r4, r4, r0, lsl #25
   1b030:	andeq	r4, r4, r0, asr #24
   1b034:	push	{r4, r5, r6, lr}
   1b038:	mov	r5, r0
   1b03c:	ldr	r3, [pc, #92]	; 1b0a0 <__assert_fail@plt+0x8adc>
   1b040:	ldr	r0, [r3]
   1b044:	cmp	r0, #0
   1b048:	beq	1b088 <__assert_fail@plt+0x8ac4>
   1b04c:	ldrb	r3, [r3, #4]
   1b050:	eor	r3, r3, #1
   1b054:	tst	r5, r3
   1b058:	bne	1b068 <__assert_fail@plt+0x8aa4>
   1b05c:	ldr	r3, [pc, #60]	; 1b0a0 <__assert_fail@plt+0x8adc>
   1b060:	ldr	r0, [r3]
   1b064:	pop	{r4, r5, r6, pc}
   1b068:	ldr	r4, [r0, #28]
   1b06c:	bl	308f4 <__assert_fail@plt+0x1e330>
   1b070:	mov	r0, r4
   1b074:	cmp	r4, #0
   1b078:	bne	1b068 <__assert_fail@plt+0x8aa4>
   1b07c:	mov	r2, #0
   1b080:	ldr	r3, [pc, #24]	; 1b0a0 <__assert_fail@plt+0x8adc>
   1b084:	str	r2, [r3]
   1b088:	mov	r0, r5
   1b08c:	bl	30938 <__assert_fail@plt+0x1e374>
   1b090:	ldr	r3, [pc, #8]	; 1b0a0 <__assert_fail@plt+0x8adc>
   1b094:	str	r0, [r3]
   1b098:	strb	r5, [r3, #4]
   1b09c:	b	1b05c <__assert_fail@plt+0x8a98>
   1b0a0:			; <UNDEFINED> instruction: 0x00059cb8
   1b0a4:	push	{r4, r5, lr}
   1b0a8:	sub	sp, sp, #108	; 0x6c
   1b0ac:	ldrd	r4, [r0, #16]
   1b0b0:	mvn	r2, #0
   1b0b4:	mvn	r3, #0
   1b0b8:	cmp	r5, r3
   1b0bc:	cmpeq	r4, r2
   1b0c0:	movne	r0, #0
   1b0c4:	beq	1b0d0 <__assert_fail@plt+0x8b0c>
   1b0c8:	add	sp, sp, #108	; 0x6c
   1b0cc:	pop	{r4, r5, pc}
   1b0d0:	mov	r4, r0
   1b0d4:	mov	r0, sp
   1b0d8:	bl	17f50 <__assert_fail@plt+0x598c>
   1b0dc:	ldr	r3, [pc, #36]	; 1b108 <__assert_fail@plt+0x8b44>
   1b0e0:	ldr	r3, [r3, #52]	; 0x34
   1b0e4:	mov	r1, sp
   1b0e8:	ldr	r0, [r4, #4]
   1b0ec:	blx	r3
   1b0f0:	cmp	r0, #0
   1b0f4:	ldrdeq	r2, [sp]
   1b0f8:	strdeq	r2, [r4, #16]
   1b0fc:	beq	1b0c8 <__assert_fail@plt+0x8b04>
   1b100:	mvn	r0, #0
   1b104:	b	1b0c8 <__assert_fail@plt+0x8b04>
   1b108:	andeq	r9, r5, ip, ror #28
   1b10c:	push	{r4, r5, r6, r7, r8, lr}
   1b110:	mov	r6, r0
   1b114:	ldr	r3, [pc, #272]	; 1b22c <__assert_fail@plt+0x8c68>
   1b118:	ldr	r0, [r3, #8]
   1b11c:	cmp	r0, #0
   1b120:	beq	1b14c <__assert_fail@plt+0x8b88>
   1b124:	ldrb	r3, [r3, #12]
   1b128:	cmp	r3, #0
   1b12c:	beq	1b148 <__assert_fail@plt+0x8b84>
   1b130:	ldrd	r2, [r6]
   1b134:	ldr	r1, [pc, #240]	; 1b22c <__assert_fail@plt+0x8c68>
   1b138:	ldrd	r4, [r1, #16]
   1b13c:	cmp	r3, r5
   1b140:	cmpeq	r2, r4
   1b144:	popeq	{r4, r5, r6, r7, r8, pc}
   1b148:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1b14c:	ldrd	r0, [r6]
   1b150:	ldr	r3, [pc, #212]	; 1b22c <__assert_fail@plt+0x8c68>
   1b154:	strd	r0, [r3, #16]
   1b158:	mov	r0, #1
   1b15c:	bl	1b034 <__assert_fail@plt+0x8a70>
   1b160:	subs	r4, r0, #0
   1b164:	movne	r7, #0
   1b168:	ldrne	r5, [pc, #192]	; 1b230 <__assert_fail@plt+0x8c6c>
   1b16c:	bne	1b198 <__assert_fail@plt+0x8bd4>
   1b170:	mov	r2, #5
   1b174:	ldr	r1, [pc, #184]	; 1b234 <__assert_fail@plt+0x8c70>
   1b178:	bl	12084 <dcgettext@plt>
   1b17c:	mov	r2, r0
   1b180:	mov	r1, #0
   1b184:	mov	r0, #1
   1b188:	bl	121bc <error@plt>
   1b18c:	ldr	r4, [r4, #28]
   1b190:	cmp	r4, #0
   1b194:	beq	1b1d4 <__assert_fail@plt+0x8c10>
   1b198:	mov	r1, r5
   1b19c:	ldr	r0, [r4, #12]
   1b1a0:	bl	11f1c <strcmp@plt>
   1b1a4:	cmp	r0, #0
   1b1a8:	beq	1b18c <__assert_fail@plt+0x8bc8>
   1b1ac:	mov	r0, r4
   1b1b0:	bl	1b0a4 <__assert_fail@plt+0x8ae0>
   1b1b4:	cmp	r0, #0
   1b1b8:	bne	1b18c <__assert_fail@plt+0x8bc8>
   1b1bc:	ldrd	r0, [r4, #16]
   1b1c0:	ldrd	r2, [r6]
   1b1c4:	cmp	r1, r3
   1b1c8:	cmpeq	r0, r2
   1b1cc:	moveq	r7, r4
   1b1d0:	b	1b18c <__assert_fail@plt+0x8bc8>
   1b1d4:	cmp	r7, #0
   1b1d8:	beq	1b208 <__assert_fail@plt+0x8c44>
   1b1dc:	ldr	r0, [r7, #12]
   1b1e0:	bl	2d19c <__assert_fail@plt+0x1abd8>
   1b1e4:	cmp	r0, #0
   1b1e8:	movne	r2, #1
   1b1ec:	moveq	r2, #0
   1b1f0:	ldr	r3, [pc, #52]	; 1b22c <__assert_fail@plt+0x8c68>
   1b1f4:	strb	r2, [r3, #12]
   1b1f8:	beq	1b214 <__assert_fail@plt+0x8c50>
   1b1fc:	ldr	r3, [pc, #40]	; 1b22c <__assert_fail@plt+0x8c68>
   1b200:	str	r0, [r3, #8]
   1b204:	pop	{r4, r5, r6, r7, r8, pc}
   1b208:	mov	r2, #0
   1b20c:	ldr	r3, [pc, #24]	; 1b22c <__assert_fail@plt+0x8c68>
   1b210:	strb	r2, [r3, #12]
   1b214:	mov	r2, #5
   1b218:	ldr	r1, [pc, #24]	; 1b238 <__assert_fail@plt+0x8c74>
   1b21c:	mov	r0, #0
   1b220:	bl	12084 <dcgettext@plt>
   1b224:	bl	2d19c <__assert_fail@plt+0x1abd8>
   1b228:	b	1b1fc <__assert_fail@plt+0x8c38>
   1b22c:			; <UNDEFINED> instruction: 0x00059cb8
   1b230:	andeq	r4, r4, r0, ror sp
   1b234:	andeq	r4, r4, r8, asr #26
   1b238:	andeq	r3, r4, ip, lsr #11
   1b23c:	push	{r4, r5, r6, lr}
   1b240:	mov	r5, r0
   1b244:	mov	r1, r0
   1b248:	ldr	r0, [pc, #88]	; 1b2a8 <__assert_fail@plt+0x8ce4>
   1b24c:	bl	11f1c <strcmp@plt>
   1b250:	cmp	r0, #0
   1b254:	bne	1b260 <__assert_fail@plt+0x8c9c>
   1b258:	mov	r0, #1
   1b25c:	pop	{r4, r5, r6, pc}
   1b260:	mov	r0, #0
   1b264:	bl	1b034 <__assert_fail@plt+0x8a70>
   1b268:	subs	r4, r0, #0
   1b26c:	beq	1b298 <__assert_fail@plt+0x8cd4>
   1b270:	ldr	r1, [r4, #12]
   1b274:	mov	r0, r5
   1b278:	bl	11f1c <strcmp@plt>
   1b27c:	cmp	r0, #0
   1b280:	beq	1b2a0 <__assert_fail@plt+0x8cdc>
   1b284:	ldr	r4, [r4, #28]
   1b288:	cmp	r4, #0
   1b28c:	bne	1b270 <__assert_fail@plt+0x8cac>
   1b290:	mov	r0, #0
   1b294:	pop	{r4, r5, r6, pc}
   1b298:	mov	r0, #1
   1b29c:	pop	{r4, r5, r6, pc}
   1b2a0:	mov	r0, #1
   1b2a4:	pop	{r4, r5, r6, pc}
   1b2a8:	andeq	r4, r4, r8, ror sp
   1b2ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2b0:	sub	sp, sp, #12
   1b2b4:	mov	fp, r0
   1b2b8:	mov	r0, #0
   1b2bc:	str	r0, [sp, #4]
   1b2c0:	bl	30938 <__assert_fail@plt+0x1e374>
   1b2c4:	subs	r6, r0, #0
   1b2c8:	beq	1b36c <__assert_fail@plt+0x8da8>
   1b2cc:	mov	r4, r6
   1b2d0:	mov	r7, #0
   1b2d4:	mov	sl, r7
   1b2d8:	b	1b2f4 <__assert_fail@plt+0x8d30>
   1b2dc:	mov	r0, r7
   1b2e0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1b2e4:	mov	r7, #0
   1b2e8:	ldr	r4, [r4, #28]
   1b2ec:	cmp	r4, #0
   1b2f0:	beq	1b340 <__assert_fail@plt+0x8d7c>
   1b2f4:	add	r8, sl, #1
   1b2f8:	lsl	r5, r8, #3
   1b2fc:	add	r2, sp, #4
   1b300:	mov	r1, r5
   1b304:	mov	r0, r7
   1b308:	bl	1fc84 <__assert_fail@plt+0xd6c0>
   1b30c:	subs	r9, r0, #0
   1b310:	beq	1b2dc <__assert_fail@plt+0x8d18>
   1b314:	mov	r0, r4
   1b318:	bl	1b0a4 <__assert_fail@plt+0x8ae0>
   1b31c:	cmp	r0, #0
   1b320:	movne	r7, r9
   1b324:	bne	1b2e8 <__assert_fail@plt+0x8d24>
   1b328:	ldrd	r2, [r4, #16]
   1b32c:	add	r5, r9, r5
   1b330:	strd	r2, [r5, #-8]
   1b334:	mov	r7, r9
   1b338:	mov	sl, r8
   1b33c:	b	1b2e8 <__assert_fail@plt+0x8d24>
   1b340:	ldr	r4, [r6, #28]
   1b344:	mov	r0, r6
   1b348:	bl	308f4 <__assert_fail@plt+0x1e330>
   1b34c:	mov	r6, r4
   1b350:	cmp	r4, #0
   1b354:	bne	1b340 <__assert_fail@plt+0x8d7c>
   1b358:	cmp	r7, #0
   1b35c:	strne	sl, [fp]
   1b360:	mov	r0, r7
   1b364:	add	sp, sp, #12
   1b368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b36c:	mov	r7, #0
   1b370:	b	1b360 <__assert_fail@plt+0x8d9c>
   1b374:	andeq	r0, r0, r0
   1b378:	ldr	r3, [pc, #132]	; 1b404 <__assert_fail@plt+0x8e40>
   1b37c:	ldr	r3, [r3, #28]
   1b380:	sub	r0, r3, r0
   1b384:	ldr	r3, [pc, #124]	; 1b408 <__assert_fail@plt+0x8e44>
   1b388:	smull	r2, r3, r3, r0
   1b38c:	add	r3, r3, r0
   1b390:	asr	r0, r0, #31
   1b394:	rsb	r0, r0, r3, asr #16
   1b398:	vmov	s15, r0
   1b39c:	vcvt.f32.s32	s15, s15
   1b3a0:	vldr	s14, [pc, #68]	; 1b3ec <__assert_fail@plt+0x8e28>
   1b3a4:	vcmpe.f32	s15, s14
   1b3a8:	vmrs	APSR_nzcv, fpscr
   1b3ac:	bmi	1b3dc <__assert_fail@plt+0x8e18>
   1b3b0:	vldr	s14, [pc, #56]	; 1b3f0 <__assert_fail@plt+0x8e2c>
   1b3b4:	vcmpe.f32	s15, s14
   1b3b8:	vmrs	APSR_nzcv, fpscr
   1b3bc:	bmi	1b3e4 <__assert_fail@plt+0x8e20>
   1b3c0:	vldr	s14, [pc, #44]	; 1b3f4 <__assert_fail@plt+0x8e30>
   1b3c4:	vcmpe.f32	s15, s14
   1b3c8:	vmrs	APSR_nzcv, fpscr
   1b3cc:	vldr	s15, [pc, #36]	; 1b3f8 <__assert_fail@plt+0x8e34>
   1b3d0:	vldr	s0, [pc, #36]	; 1b3fc <__assert_fail@plt+0x8e38>
   1b3d4:	vmovle.f32	s0, s15
   1b3d8:	bx	lr
   1b3dc:	vldr	s0, [pc, #28]	; 1b400 <__assert_fail@plt+0x8e3c>
   1b3e0:	bx	lr
   1b3e4:	vldr	s0, [pc, #16]	; 1b3fc <__assert_fail@plt+0x8e38>
   1b3e8:	bx	lr
   1b3ec:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b3f0:	svccc	0x00800000
   1b3f4:	sbcmi	r0, r8, #0
   1b3f8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1b3fc:			; <UNDEFINED> instruction: 0x3e99999a
   1b400:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b404:	andeq	r9, r5, ip, ror #28
   1b408:	eorgt	r4, lr, #29360128	; 0x1c00000
   1b40c:	cmp	r0, #0
   1b410:	beq	1b43c <__assert_fail@plt+0x8e78>
   1b414:	ldr	r3, [r1]
   1b418:	ldr	r3, [r0, r3, lsl #2]
   1b41c:	cmp	r3, #0
   1b420:	beq	1b43c <__assert_fail@plt+0x8e78>
   1b424:	str	r3, [r2]
   1b428:	ldr	r3, [r1]
   1b42c:	add	r3, r3, #1
   1b430:	str	r3, [r1]
   1b434:	mov	r0, #1
   1b438:	bx	lr
   1b43c:	mov	r0, #0
   1b440:	str	r0, [r2]
   1b444:	bx	lr
   1b448:	push	{r4, lr}
   1b44c:	sub	sp, sp, #8
   1b450:	mov	r4, r2
   1b454:	add	r2, sp, #4
   1b458:	bl	1b40c <__assert_fail@plt+0x8e48>
   1b45c:	ldr	r3, [sp, #4]
   1b460:	str	r3, [r4]
   1b464:	add	sp, sp, #8
   1b468:	pop	{r4, pc}
   1b46c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b470:	sub	sp, sp, #12
   1b474:	mov	r0, r1
   1b478:	mov	r1, r2
   1b47c:	add	r2, sp, #4
   1b480:	bl	1b448 <__assert_fail@plt+0x8e84>
   1b484:	cmp	r0, #0
   1b488:	ldrne	r2, [sp, #4]
   1b48c:	ldrne	r3, [pc, #8]	; 1b49c <__assert_fail@plt+0x8ed8>
   1b490:	strne	r2, [r3, #76]	; 0x4c
   1b494:	add	sp, sp, #12
   1b498:	pop	{pc}		; (ldr pc, [sp], #4)
   1b49c:	andeq	r9, r5, ip, ror #28
   1b4a0:	ldr	r3, [r0]
   1b4a4:	ldrb	r3, [r3]
   1b4a8:	cmp	r3, #43	; 0x2b
   1b4ac:	beq	1b4c4 <__assert_fail@plt+0x8f00>
   1b4b0:	cmp	r3, #45	; 0x2d
   1b4b4:	beq	1b4e0 <__assert_fail@plt+0x8f1c>
   1b4b8:	mov	r3, #2
   1b4bc:	str	r3, [r1]
   1b4c0:	b	1b4d8 <__assert_fail@plt+0x8f14>
   1b4c4:	mov	r3, #0
   1b4c8:	str	r3, [r1]
   1b4cc:	ldr	r3, [r0]
   1b4d0:	add	r3, r3, #1
   1b4d4:	str	r3, [r0]
   1b4d8:	mov	r0, #1
   1b4dc:	bx	lr
   1b4e0:	mov	r3, #1
   1b4e4:	str	r3, [r1]
   1b4e8:	ldr	r3, [r0]
   1b4ec:	add	r3, r3, #1
   1b4f0:	str	r3, [r0]
   1b4f4:	b	1b4d8 <__assert_fail@plt+0x8f14>
   1b4f8:	push	{r4, r5, lr}
   1b4fc:	sub	sp, sp, #12
   1b500:	mov	r4, r1
   1b504:	ldr	r3, [r1]
   1b508:	cmp	r3, #2
   1b50c:	beq	1b59c <__assert_fail@plt+0x8fd8>
   1b510:	mov	r5, r0
   1b514:	cmp	r3, #1
   1b518:	beq	1b5b4 <__assert_fail@plt+0x8ff0>
   1b51c:	cmp	r3, #0
   1b520:	bne	1b58c <__assert_fail@plt+0x8fc8>
   1b524:	ldr	r3, [pc, #144]	; 1b5bc <__assert_fail@plt+0x8ff8>
   1b528:	ldr	r3, [r3]
   1b52c:	cmp	r3, #0
   1b530:	beq	1b59c <__assert_fail@plt+0x8fd8>
   1b534:	ldr	r3, [pc, #132]	; 1b5c0 <__assert_fail@plt+0x8ffc>
   1b538:	ldrb	r3, [r3, #17]
   1b53c:	cmp	r3, #0
   1b540:	bne	1b59c <__assert_fail@plt+0x8fd8>
   1b544:	ldr	r3, [pc, #116]	; 1b5c0 <__assert_fail@plt+0x8ffc>
   1b548:	ldrb	r3, [r3, #16]
   1b54c:	cmp	r3, #0
   1b550:	beq	1b59c <__assert_fail@plt+0x8fd8>
   1b554:	mov	r2, #5
   1b558:	ldr	r1, [pc, #100]	; 1b5c4 <__assert_fail@plt+0x9000>
   1b55c:	mov	r0, #0
   1b560:	bl	12084 <dcgettext@plt>
   1b564:	str	r5, [sp, #4]
   1b568:	ldr	r3, [pc, #76]	; 1b5bc <__assert_fail@plt+0x8ff8>
   1b56c:	ldr	r3, [r3]
   1b570:	str	r3, [sp]
   1b574:	mov	r3, r5
   1b578:	mov	r2, r0
   1b57c:	mov	r1, #0
   1b580:	mov	r0, r1
   1b584:	bl	121bc <error@plt>
   1b588:	b	1b59c <__assert_fail@plt+0x8fd8>
   1b58c:	ldr	r3, [pc, #40]	; 1b5bc <__assert_fail@plt+0x8ff8>
   1b590:	ldr	r3, [r3]
   1b594:	cmp	r3, #0
   1b598:	beq	1b5a8 <__assert_fail@plt+0x8fe4>
   1b59c:	mov	r0, r4
   1b5a0:	add	sp, sp, #12
   1b5a4:	pop	{r4, r5, pc}
   1b5a8:	ldr	r3, [pc, #12]	; 1b5bc <__assert_fail@plt+0x8ff8>
   1b5ac:	str	r0, [r3]
   1b5b0:	b	1b59c <__assert_fail@plt+0x8fd8>
   1b5b4:	mov	r4, #0
   1b5b8:	b	1b59c <__assert_fail@plt+0x8fd8>
   1b5bc:	ldrdeq	r9, [r5], -r0
   1b5c0:	andeq	r9, r5, ip, ror #28
   1b5c4:	andeq	r5, r4, r4, asr #6
   1b5c8:	push	{r4, lr}
   1b5cc:	bl	2c174 <__assert_fail@plt+0x19bb0>
   1b5d0:	pop	{r4, pc}
   1b5d4:	push	{r4, r5, r6, r7, r8, lr}
   1b5d8:	mov	r6, r0
   1b5dc:	mov	r5, r1
   1b5e0:	mov	r7, r2
   1b5e4:	mov	r4, r3
   1b5e8:	bl	12318 <__errno_location@plt>
   1b5ec:	ldr	r3, [r0]
   1b5f0:	cmp	r3, #2
   1b5f4:	beq	1b608 <__assert_fail@plt+0x9044>
   1b5f8:	cmp	r3, #20
   1b5fc:	beq	1b608 <__assert_fail@plt+0x9044>
   1b600:	mov	r0, r4
   1b604:	pop	{r4, r5, r6, r7, r8, pc}
   1b608:	ldr	r3, [pc, #52]	; 1b644 <__assert_fail@plt+0x9080>
   1b60c:	ldr	r3, [r3, #44]	; 0x2c
   1b610:	tst	r3, #2
   1b614:	bne	1b62c <__assert_fail@plt+0x9068>
   1b618:	mov	r2, r7
   1b61c:	mov	r1, r5
   1b620:	mov	r0, r6
   1b624:	bl	2c174 <__assert_fail@plt+0x19bb0>
   1b628:	pop	{r4, r5, r6, r7, r8, pc}
   1b62c:	mov	r2, r5
   1b630:	ldr	r1, [pc, #16]	; 1b648 <__assert_fail@plt+0x9084>
   1b634:	ldr	r3, [pc, #16]	; 1b64c <__assert_fail@plt+0x9088>
   1b638:	ldr	r0, [r3]
   1b63c:	bl	1230c <fprintf@plt>
   1b640:	b	1b618 <__assert_fail@plt+0x9054>
   1b644:	andeq	r9, r5, ip, ror #28
   1b648:	andeq	r5, r4, ip, lsr r4
   1b64c:	andeq	r9, r5, r8, asr #10
   1b650:	push	{r4, r5, r6, lr}
   1b654:	mov	r4, r0
   1b658:	mov	r5, r1
   1b65c:	mov	r6, r2
   1b660:	ldr	r3, [pc, #52]	; 1b69c <__assert_fail@plt+0x90d8>
   1b664:	ldr	r3, [r3]
   1b668:	cmp	r3, #0
   1b66c:	bne	1b694 <__assert_fail@plt+0x90d0>
   1b670:	bl	2bfc0 <__assert_fail@plt+0x199fc>
   1b674:	cmp	r0, #0
   1b678:	popeq	{r4, r5, r6, pc}
   1b67c:	mov	r3, r0
   1b680:	mov	r2, r6
   1b684:	mov	r1, r5
   1b688:	mov	r0, r4
   1b68c:	bl	1b5d4 <__assert_fail@plt+0x9010>
   1b690:	pop	{r4, r5, r6, pc}
   1b694:	bl	2c174 <__assert_fail@plt+0x19bb0>
   1b698:	pop	{r4, r5, r6, pc}
   1b69c:	andeq	r9, r5, r0, asr #28
   1b6a0:	push	{r4, r5, r6, lr}
   1b6a4:	mov	r4, r0
   1b6a8:	mov	r5, r1
   1b6ac:	mov	r6, r2
   1b6b0:	bl	2bfc0 <__assert_fail@plt+0x199fc>
   1b6b4:	cmp	r0, #0
   1b6b8:	popeq	{r4, r5, r6, pc}
   1b6bc:	mov	r3, r0
   1b6c0:	mov	r2, r6
   1b6c4:	mov	r1, r5
   1b6c8:	mov	r0, r4
   1b6cc:	bl	1b5d4 <__assert_fail@plt+0x9010>
   1b6d0:	pop	{r4, r5, r6, pc}
   1b6d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1b6d8:	sub	sp, sp, #12
   1b6dc:	ldr	r0, [pc, #192]	; 1b7a4 <__assert_fail@plt+0x91e0>
   1b6e0:	bl	202cc <__assert_fail@plt+0xdd08>
   1b6e4:	mov	r2, #5
   1b6e8:	ldr	r1, [pc, #184]	; 1b7a8 <__assert_fail@plt+0x91e4>
   1b6ec:	mov	r0, #0
   1b6f0:	bl	12084 <dcgettext@plt>
   1b6f4:	bl	11f40 <printf@plt>
   1b6f8:	ldr	r0, [pc, #172]	; 1b7ac <__assert_fail@plt+0x91e8>
   1b6fc:	bl	11f40 <printf@plt>
   1b700:	ldr	r3, [pc, #168]	; 1b7b0 <__assert_fail@plt+0x91ec>
   1b704:	ldrb	r1, [r3, #56]	; 0x38
   1b708:	ldr	r3, [pc, #164]	; 1b7b4 <__assert_fail@plt+0x91f0>
   1b70c:	ldr	r2, [pc, #164]	; 1b7b8 <__assert_fail@plt+0x91f4>
   1b710:	cmp	r1, #0
   1b714:	movne	r1, r2
   1b718:	moveq	r1, r3
   1b71c:	ldr	r0, [pc, #152]	; 1b7bc <__assert_fail@plt+0x91f8>
   1b720:	bl	11f40 <printf@plt>
   1b724:	ldr	r0, [pc, #148]	; 1b7c0 <__assert_fail@plt+0x91fc>
   1b728:	bl	11f40 <printf@plt>
   1b72c:	bl	11f04 <is_selinux_enabled@plt>
   1b730:	cmp	r0, #0
   1b734:	ble	1b740 <__assert_fail@plt+0x917c>
   1b738:	ldr	r0, [pc, #132]	; 1b7c4 <__assert_fail@plt+0x9200>
   1b73c:	bl	11f40 <printf@plt>
   1b740:	add	r0, sp, #8
   1b744:	mov	r3, #0
   1b748:	str	r3, [r0, #-4]!
   1b74c:	bl	13718 <__assert_fail@plt+0x1154>
   1b750:	cmp	r0, #0
   1b754:	bne	1b778 <__assert_fail@plt+0x91b4>
   1b758:	ldr	r3, [pc, #80]	; 1b7b0 <__assert_fail@plt+0x91ec>
   1b75c:	ldrh	r1, [r3, #68]	; 0x44
   1b760:	ldr	r0, [pc, #96]	; 1b7c8 <__assert_fail@plt+0x9204>
   1b764:	bl	11f40 <printf@plt>
   1b768:	mov	r0, #10
   1b76c:	bl	12354 <putchar@plt>
   1b770:	mov	r0, #0
   1b774:	bl	122a0 <exit@plt>
   1b778:	ldr	r0, [pc, #76]	; 1b7cc <__assert_fail@plt+0x9208>
   1b77c:	bl	11f40 <printf@plt>
   1b780:	ldr	r3, [sp, #4]
   1b784:	tst	r3, #512	; 0x200
   1b788:	bne	1b798 <__assert_fail@plt+0x91d4>
   1b78c:	ldr	r0, [pc, #60]	; 1b7d0 <__assert_fail@plt+0x920c>
   1b790:	bl	11f40 <printf@plt>
   1b794:	b	1b758 <__assert_fail@plt+0x9194>
   1b798:	ldr	r0, [pc, #52]	; 1b7d4 <__assert_fail@plt+0x9210>
   1b79c:	bl	11f40 <printf@plt>
   1b7a0:	b	1b78c <__assert_fail@plt+0x91c8>
   1b7a4:	strdeq	r2, [r4], -ip
   1b7a8:	andeq	r5, r4, r0, lsr #9
   1b7ac:			; <UNDEFINED> instruction: 0x000454b4
   1b7b0:	andeq	r9, r5, ip, ror #28
   1b7b4:	muleq	r4, r4, r4
   1b7b8:	andeq	r5, r4, ip, lsl #9
   1b7bc:			; <UNDEFINED> instruction: 0x000454bc
   1b7c0:	andeq	r5, r4, ip, asr #9
   1b7c4:	andeq	r5, r4, r0, ror #9
   1b7c8:	andeq	r5, r4, r0, lsl #10
   1b7cc:	andeq	r5, r4, ip, ror #9
   1b7d0:	andeq	r5, r4, ip, lsl #10
   1b7d4:	strdeq	r5, [r4], -r4
   1b7d8:	push	{r4, lr}
   1b7dc:	mov	r0, #0
   1b7e0:	bl	17d14 <__assert_fail@plt+0x5750>
   1b7e4:	push	{r4, lr}
   1b7e8:	bl	17d04 <__assert_fail@plt+0x5740>
   1b7ec:	mov	r3, #0
   1b7f0:	strb	r3, [r0, #19]
   1b7f4:	strb	r3, [r0, #18]
   1b7f8:	mov	r3, #1065353216	; 0x3f800000
   1b7fc:	str	r3, [r0, #28]
   1b800:	mov	r0, #1
   1b804:	pop	{r4, pc}
   1b808:	push	{r4, lr}
   1b80c:	ldr	r3, [pc, #80]	; 1b864 <__assert_fail@plt+0x92a0>
   1b810:	ldr	r3, [r3, #4]
   1b814:	cmp	r3, #0
   1b818:	beq	1b82c <__assert_fail@plt+0x9268>
   1b81c:	ldr	r3, [pc, #64]	; 1b864 <__assert_fail@plt+0x92a0>
   1b820:	ldr	r0, [r3, #4]
   1b824:	bl	1b7e4 <__assert_fail@plt+0x9220>
   1b828:	pop	{r4, pc}
   1b82c:	ldr	r3, [pc, #52]	; 1b868 <__assert_fail@plt+0x92a4>
   1b830:	mov	r0, #0
   1b834:	add	r0, r0, #1
   1b838:	ldr	ip, [r3, #20]
   1b83c:	cmp	ip, #0
   1b840:	beq	1b81c <__assert_fail@plt+0x9258>
   1b844:	ldr	ip, [r3, #16]!
   1b848:	cmp	ip, #1
   1b84c:	bne	1b834 <__assert_fail@plt+0x9270>
   1b850:	ldr	r3, [pc, #16]	; 1b868 <__assert_fail@plt+0x92a4>
   1b854:	add	r0, r3, r0, lsl #4
   1b858:	ldr	r3, [pc, #4]	; 1b864 <__assert_fail@plt+0x92a0>
   1b85c:	str	r0, [r3, #4]
   1b860:	b	1b81c <__assert_fail@plt+0x9258>
   1b864:	ldrdeq	r9, [r5], -r0
   1b868:	andeq	r4, r4, ip, ror sp
   1b86c:	push	{r4, lr}
   1b870:	mov	ip, #1
   1b874:	ldr	r3, [pc, #8]	; 1b884 <__assert_fail@plt+0x92c0>
   1b878:	strb	ip, [r3, #16]
   1b87c:	bl	1b808 <__assert_fail@plt+0x9244>
   1b880:	pop	{r4, pc}
   1b884:	andeq	r9, r5, ip, ror #28
   1b888:	push	{r4, lr}
   1b88c:	mov	ip, #0
   1b890:	ldr	r3, [pc, #8]	; 1b8a0 <__assert_fail@plt+0x92dc>
   1b894:	strb	ip, [r3, #16]
   1b898:	bl	1b808 <__assert_fail@plt+0x9244>
   1b89c:	pop	{r4, pc}
   1b8a0:	andeq	r9, r5, ip, ror #28
   1b8a4:	push	{r4, lr}
   1b8a8:	mov	ip, #0
   1b8ac:	ldr	r3, [pc, #8]	; 1b8bc <__assert_fail@plt+0x92f8>
   1b8b0:	strb	ip, [r3, #14]
   1b8b4:	bl	1b808 <__assert_fail@plt+0x9244>
   1b8b8:	pop	{r4, pc}
   1b8bc:	andeq	r9, r5, ip, ror #28
   1b8c0:	push	{r4, lr}
   1b8c4:	mov	ip, #1
   1b8c8:	ldr	r3, [pc, #8]	; 1b8d8 <__assert_fail@plt+0x9314>
   1b8cc:	strb	ip, [r3, #12]
   1b8d0:	bl	1b808 <__assert_fail@plt+0x9244>
   1b8d4:	pop	{r4, pc}
   1b8d8:	andeq	r9, r5, ip, ror #28
   1b8dc:	push	{r4, lr}
   1b8e0:	mov	ip, #1
   1b8e4:	ldr	r3, [pc, #8]	; 1b8f4 <__assert_fail@plt+0x9330>
   1b8e8:	strb	ip, [r3, #13]
   1b8ec:	bl	1b808 <__assert_fail@plt+0x9244>
   1b8f0:	pop	{r4, pc}
   1b8f4:	andeq	r9, r5, ip, ror #28
   1b8f8:	push	{r4, lr}
   1b8fc:	mov	ip, #1
   1b900:	ldr	r3, [pc, #8]	; 1b910 <__assert_fail@plt+0x934c>
   1b904:	strb	ip, [r3, #14]
   1b908:	bl	1b808 <__assert_fail@plt+0x9244>
   1b90c:	pop	{r4, pc}
   1b910:	andeq	r9, r5, ip, ror #28
   1b914:	push	{r4, lr}
   1b918:	ldr	r3, [pc, #20]	; 1b934 <__assert_fail@plt+0x9370>
   1b91c:	mov	ip, #0
   1b920:	strb	ip, [r3]
   1b924:	mov	ip, #1
   1b928:	strb	ip, [r3, #1]
   1b92c:	bl	1b808 <__assert_fail@plt+0x9244>
   1b930:	pop	{r4, pc}
   1b934:	andeq	r9, r5, ip, ror #28
   1b938:	push	{r4, lr}
   1b93c:	bl	17d04 <__assert_fail@plt+0x5740>
   1b940:	mov	r3, r0
   1b944:	mov	r2, #0
   1b948:	strb	r2, [r0, #19]
   1b94c:	strb	r2, [r0, #18]
   1b950:	mov	r0, #1
   1b954:	strb	r0, [r3, #16]
   1b958:	strb	r2, [r3, #17]
   1b95c:	mov	r2, #1065353216	; 0x3f800000
   1b960:	str	r2, [r3, #28]
   1b964:	pop	{r4, pc}
   1b968:	push	{r4, lr}
   1b96c:	bl	17d04 <__assert_fail@plt+0x5740>
   1b970:	mov	r3, r0
   1b974:	ldr	r2, [pc, #32]	; 1b99c <__assert_fail@plt+0x93d8>
   1b978:	ldrb	r2, [r2]
   1b97c:	cmp	r2, #0
   1b980:	strbeq	r2, [r0, #19]
   1b984:	strbeq	r2, [r0, #18]
   1b988:	mov	r0, #1
   1b98c:	strb	r0, [r3, #16]
   1b990:	mov	r2, #0
   1b994:	strb	r2, [r3, #17]
   1b998:	pop	{r4, pc}
   1b99c:	andeq	r9, r5, ip, ror #28
   1b9a0:	push	{r4, lr}
   1b9a4:	bl	17d04 <__assert_fail@plt+0x5740>
   1b9a8:	ldr	r3, [pc, #8]	; 1b9b8 <__assert_fail@plt+0x93f4>
   1b9ac:	str	r3, [r0, #28]
   1b9b0:	mov	r0, #1
   1b9b4:	pop	{r4, pc}
   1b9b8:	bcc	fe0e037c <stdout@@GLIBC_2.4+0xfe086e28>
   1b9bc:	push	{r4, lr}
   1b9c0:	bl	17d04 <__assert_fail@plt+0x5740>
   1b9c4:	mov	r3, #0
   1b9c8:	strb	r3, [r0, #19]
   1b9cc:	strb	r3, [r0, #18]
   1b9d0:	strb	r3, [r0, #17]
   1b9d4:	strb	r3, [r0, #16]
   1b9d8:	ldr	r2, [r0]
   1b9dc:	ldr	r3, [pc, #20]	; 1b9f8 <__assert_fail@plt+0x9434>
   1b9e0:	cmp	r2, r3
   1b9e4:	ldreq	r3, [pc, #16]	; 1b9fc <__assert_fail@plt+0x9438>
   1b9e8:	ldrne	r3, [pc, #16]	; 1ba00 <__assert_fail@plt+0x943c>
   1b9ec:	str	r3, [r0, #28]
   1b9f0:	mov	r0, #1
   1b9f4:	pop	{r4, pc}
   1b9f8:	andeq	r4, r1, ip, ror #12
   1b9fc:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ba00:	svccc	0x00666666
   1ba04:	push	{r4, lr}
   1ba08:	bl	17d04 <__assert_fail@plt+0x5740>
   1ba0c:	ldr	r3, [pc, #8]	; 1ba1c <__assert_fail@plt+0x9458>
   1ba10:	str	r3, [r0, #28]
   1ba14:	mov	r0, #1
   1ba18:	pop	{r4, pc}
   1ba1c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ba20:	push	{r4, lr}
   1ba24:	bl	17d04 <__assert_fail@plt+0x5740>
   1ba28:	mov	r3, r0
   1ba2c:	mov	r0, #1
   1ba30:	strb	r0, [r3, #17]
   1ba34:	strb	r0, [r3, #16]
   1ba38:	mov	r2, #0
   1ba3c:	ldr	r1, [pc, #20]	; 1ba58 <__assert_fail@plt+0x9494>
   1ba40:	strb	r2, [r1]
   1ba44:	strb	r2, [r3, #19]
   1ba48:	strb	r2, [r3, #18]
   1ba4c:	mov	r2, #1065353216	; 0x3f800000
   1ba50:	str	r2, [r3, #28]
   1ba54:	pop	{r4, pc}
   1ba58:	andeq	r9, r5, ip, ror #28
   1ba5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba60:	sub	sp, sp, #20
   1ba64:	mov	r7, r2
   1ba68:	mov	r6, r3
   1ba6c:	ldr	r3, [pc, #832]	; 1bdb4 <__assert_fail@plt+0x97f0>
   1ba70:	ldr	r4, [pc, #832]	; 1bdb8 <__assert_fail@plt+0x97f4>
   1ba74:	ldr	r2, [pc, #832]	; 1bdbc <__assert_fail@plt+0x97f8>
   1ba78:	cmp	r6, r2
   1ba7c:	movne	r4, r3
   1ba80:	add	r2, sp, #12
   1ba84:	bl	1b448 <__assert_fail@plt+0x8e84>
   1ba88:	subs	r5, r0, #0
   1ba8c:	beq	1bd98 <__assert_fail@plt+0x97d4>
   1ba90:	ldr	r2, [sp, #12]
   1ba94:	ldrb	r3, [r2]
   1ba98:	cmp	r3, #0
   1ba9c:	beq	1bb04 <__assert_fail@plt+0x9540>
   1baa0:	mov	r1, r6
   1baa4:	mov	r0, r7
   1baa8:	bl	17c8c <__assert_fail@plt+0x56c8>
   1baac:	mov	r3, #0
   1bab0:	str	r3, [r0, #28]
   1bab4:	ldr	r3, [pc, #768]	; 1bdbc <__assert_fail@plt+0x97f8>
   1bab8:	cmp	r6, r3
   1babc:	beq	1bb28 <__assert_fail@plt+0x9564>
   1bac0:	mov	r3, #0
   1bac4:	strb	r3, [r0, #18]
   1bac8:	mov	r3, #1
   1bacc:	strb	r3, [r0, #19]
   1bad0:	ldr	r9, [pc, #744]	; 1bdc0 <__assert_fail@plt+0x97fc>
   1bad4:	mov	ip, #2
   1bad8:	vldr	s10, [pc, #708]	; 1bda4 <__assert_fail@plt+0x97e0>
   1badc:	mov	r8, #0
   1bae0:	vldr	s11, [pc, #704]	; 1bda8 <__assert_fail@plt+0x97e4>
   1bae4:	mov	r7, #6
   1bae8:	vldr	s12, [pc, #700]	; 1bdac <__assert_fail@plt+0x97e8>
   1baec:	mov	r6, #5
   1baf0:	vldr	s13, [pc, #696]	; 1bdb0 <__assert_fail@plt+0x97ec>
   1baf4:	mov	lr, #4
   1baf8:	ldr	fp, [pc, #708]	; 1bdc4 <__assert_fail@plt+0x9800>
   1bafc:	ldr	sl, [pc, #708]	; 1bdc8 <__assert_fail@plt+0x9804>
   1bb00:	b	1bc28 <__assert_fail@plt+0x9664>
   1bb04:	mov	r2, #5
   1bb08:	ldr	r1, [pc, #700]	; 1bdcc <__assert_fail@plt+0x9808>
   1bb0c:	mov	r0, #0
   1bb10:	bl	12084 <dcgettext@plt>
   1bb14:	mov	r3, r4
   1bb18:	mov	r2, r0
   1bb1c:	mov	r1, #0
   1bb20:	mov	r0, #1
   1bb24:	bl	121bc <error@plt>
   1bb28:	mov	r3, #1
   1bb2c:	strb	r3, [r0, #18]
   1bb30:	mov	r3, #0
   1bb34:	strb	r3, [r0, #19]
   1bb38:	b	1bad0 <__assert_fail@plt+0x950c>
   1bb3c:	vmov	s15, sl
   1bb40:	mov	r3, #1
   1bb44:	b	1bbec <__assert_fail@plt+0x9628>
   1bb48:	vmov	s15, fp
   1bb4c:	mov	r3, #3
   1bb50:	b	1bbec <__assert_fail@plt+0x9628>
   1bb54:	vmov.f32	s15, s13
   1bb58:	mov	r3, lr
   1bb5c:	b	1bbec <__assert_fail@plt+0x9628>
   1bb60:	vmov.f32	s15, s12
   1bb64:	mov	r3, r6
   1bb68:	b	1bbec <__assert_fail@plt+0x9628>
   1bb6c:	vmov.f32	s15, s11
   1bb70:	mov	r3, r7
   1bb74:	b	1bbec <__assert_fail@plt+0x9628>
   1bb78:	mov	r2, #5
   1bb7c:	ldr	r1, [pc, #588]	; 1bdd0 <__assert_fail@plt+0x980c>
   1bb80:	mov	r0, #0
   1bb84:	bl	12084 <dcgettext@plt>
   1bb88:	ldr	r3, [sp, #12]
   1bb8c:	ldrb	r3, [r3]
   1bb90:	str	r3, [sp]
   1bb94:	mov	r3, r4
   1bb98:	mov	r2, r0
   1bb9c:	mov	r1, #0
   1bba0:	mov	r0, #1
   1bba4:	bl	121bc <error@plt>
   1bba8:	mov	r2, #5
   1bbac:	ldr	r1, [pc, #544]	; 1bdd4 <__assert_fail@plt+0x9810>
   1bbb0:	mov	r0, #0
   1bbb4:	bl	12084 <dcgettext@plt>
   1bbb8:	ldr	r3, [sp, #12]
   1bbbc:	ldrb	r3, [r3]
   1bbc0:	str	r3, [sp]
   1bbc4:	mov	r3, r4
   1bbc8:	mov	r2, r0
   1bbcc:	mov	r1, #0
   1bbd0:	mov	r0, #1
   1bbd4:	bl	121bc <error@plt>
   1bbd8:	vmov.f32	s15, s10
   1bbdc:	mov	r3, r8
   1bbe0:	b	1bbec <__assert_fail@plt+0x9628>
   1bbe4:	vmov	s15, r9
   1bbe8:	mov	r3, ip
   1bbec:	add	r1, r0, r3
   1bbf0:	ldrb	r1, [r1, #40]	; 0x28
   1bbf4:	cmp	r1, #0
   1bbf8:	bne	1bd08 <__assert_fail@plt+0x9744>
   1bbfc:	vldr	s14, [r0, #28]
   1bc00:	vadd.f32	s15, s14, s15
   1bc04:	vstr	s15, [r0, #28]
   1bc08:	add	r3, r0, r3
   1bc0c:	mov	r1, #1
   1bc10:	strb	r1, [r3, #40]	; 0x28
   1bc14:	add	r3, r2, r1
   1bc18:	str	r3, [sp, #12]
   1bc1c:	ldrb	r3, [r2, #1]
   1bc20:	cmp	r3, #0
   1bc24:	bne	1bd34 <__assert_fail@plt+0x9770>
   1bc28:	ldr	r2, [sp, #12]
   1bc2c:	ldrb	r3, [r2]
   1bc30:	cmp	r3, #0
   1bc34:	beq	1bd98 <__assert_fail@plt+0x97d4>
   1bc38:	sub	r3, r3, #68	; 0x44
   1bc3c:	cmp	r3, #47	; 0x2f
   1bc40:	ldrls	pc, [pc, r3, lsl #2]
   1bc44:	b	1bba8 <__assert_fail@plt+0x95e4>
   1bc48:	andeq	fp, r1, r8, ror fp
   1bc4c:	andeq	fp, r1, r8, lsr #23
   1bc50:	andeq	fp, r1, r8, lsr #23
   1bc54:	andeq	fp, r1, r8, lsr #23
   1bc58:	andeq	fp, r1, r8, lsr #23
   1bc5c:	andeq	fp, r1, r8, lsr #23
   1bc60:	andeq	fp, r1, r8, lsr #23
   1bc64:	andeq	fp, r1, r8, lsr #23
   1bc68:	andeq	fp, r1, r8, lsr #23
   1bc6c:	andeq	fp, r1, r8, lsr #23
   1bc70:	andeq	fp, r1, r8, lsr #23
   1bc74:	andeq	fp, r1, r8, lsr #23
   1bc78:	andeq	fp, r1, r8, lsr #23
   1bc7c:	andeq	fp, r1, r8, lsr #23
   1bc80:	andeq	fp, r1, r8, lsr #23
   1bc84:	andeq	fp, r1, r8, lsr #23
   1bc88:	andeq	fp, r1, r8, lsr #23
   1bc8c:	andeq	fp, r1, r8, lsr #23
   1bc90:	andeq	fp, r1, r8, lsr #23
   1bc94:	andeq	fp, r1, r8, lsr #23
   1bc98:	andeq	fp, r1, r8, lsr #23
   1bc9c:	andeq	fp, r1, r8, lsr #23
   1bca0:	andeq	fp, r1, r8, lsr #23
   1bca4:	andeq	fp, r1, r8, lsr #23
   1bca8:	andeq	fp, r1, r8, lsr #23
   1bcac:	andeq	fp, r1, r8, lsr #23
   1bcb0:	andeq	fp, r1, r8, lsr #23
   1bcb4:	andeq	fp, r1, r8, lsr #23
   1bcb8:	andeq	fp, r1, r8, lsr #23
   1bcbc:	andeq	fp, r1, r8, lsr #23
   1bcc0:	ldrdeq	fp, [r1], -r8
   1bcc4:	andeq	fp, r1, ip, lsr fp
   1bcc8:	andeq	fp, r1, r4, ror #23
   1bccc:	andeq	fp, r1, r8, lsr #23
   1bcd0:	andeq	fp, r1, r8, asr #22
   1bcd4:	andeq	fp, r1, r8, lsr #23
   1bcd8:	andeq	fp, r1, r8, lsr #23
   1bcdc:	andeq	fp, r1, r8, lsr #23
   1bce0:	andeq	fp, r1, r8, lsr #23
   1bce4:	andeq	fp, r1, r8, lsr #23
   1bce8:	andeq	fp, r1, r4, asr fp
   1bcec:	andeq	fp, r1, r8, lsr #23
   1bcf0:	andeq	fp, r1, r8, lsr #23
   1bcf4:	andeq	fp, r1, r8, lsr #23
   1bcf8:	andeq	fp, r1, r0, ror #22
   1bcfc:	andeq	fp, r1, r8, lsr #23
   1bd00:	andeq	fp, r1, r8, lsr #23
   1bd04:	andeq	fp, r1, ip, ror #22
   1bd08:	mov	r2, #5
   1bd0c:	ldr	r1, [pc, #196]	; 1bdd8 <__assert_fail@plt+0x9814>
   1bd10:	mov	r0, #0
   1bd14:	bl	12084 <dcgettext@plt>
   1bd18:	ldr	r3, [sp, #12]
   1bd1c:	ldrb	r3, [r3]
   1bd20:	str	r4, [sp]
   1bd24:	mov	r2, r0
   1bd28:	mov	r1, #0
   1bd2c:	mov	r0, #1
   1bd30:	bl	121bc <error@plt>
   1bd34:	cmp	r3, #44	; 0x2c
   1bd38:	bne	1bd74 <__assert_fail@plt+0x97b0>
   1bd3c:	add	r3, r2, #2
   1bd40:	str	r3, [sp, #12]
   1bd44:	ldrb	r3, [r2, #2]
   1bd48:	cmp	r3, #0
   1bd4c:	bne	1bc28 <__assert_fail@plt+0x9664>
   1bd50:	mov	r2, #5
   1bd54:	ldr	r1, [pc, #128]	; 1bddc <__assert_fail@plt+0x9818>
   1bd58:	mov	r0, #0
   1bd5c:	bl	12084 <dcgettext@plt>
   1bd60:	mov	r3, r4
   1bd64:	mov	r2, r0
   1bd68:	mov	r1, #0
   1bd6c:	mov	r0, #1
   1bd70:	bl	121bc <error@plt>
   1bd74:	mov	r2, #5
   1bd78:	ldr	r1, [pc, #96]	; 1bde0 <__assert_fail@plt+0x981c>
   1bd7c:	mov	r0, #0
   1bd80:	bl	12084 <dcgettext@plt>
   1bd84:	mov	r3, r4
   1bd88:	mov	r2, r0
   1bd8c:	mov	r1, #0
   1bd90:	mov	r0, #1
   1bd94:	bl	121bc <error@plt>
   1bd98:	mov	r0, r5
   1bd9c:	add	sp, sp, #20
   1bda0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bda4:	bcc	1a4e05c <stdout@@GLIBC_2.4+0x19f4b08>
   1bda8:			; <UNDEFINED> instruction: 0x378560fd
   1bdac:	usatcc	r7, #29, lr, asr #16
   1bdb0:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1bdb4:	andeq	r5, r4, r8, lsl r5
   1bdb8:	andeq	r5, r4, r0, lsl r5
   1bdbc:	andeq	r4, r1, r4, ror #21
   1bdc0:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1bdc4:	svccc	0x00600000
   1bdc8:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1bdcc:	andeq	r5, r4, r0, lsr #10
   1bdd0:	andeq	r5, r4, r4, asr r5
   1bdd4:			; <UNDEFINED> instruction: 0x000455bc
   1bdd8:	ldrdeq	r5, [r4], -r8
   1bddc:	andeq	r5, r4, r4, asr #12
   1bde0:	andeq	r5, r4, r0, lsl r6
   1bde4:	push	{r4, lr}
   1bde8:	mov	ip, r1
   1bdec:	mov	r1, r2
   1bdf0:	ldr	r3, [pc, #12]	; 1be04 <__assert_fail@plt+0x9840>
   1bdf4:	mov	r2, r0
   1bdf8:	mov	r0, ip
   1bdfc:	bl	1ba5c <__assert_fail@plt+0x9498>
   1be00:	pop	{r4, pc}
   1be04:	andeq	r4, r1, r4, ror #21
   1be08:	push	{r4, lr}
   1be0c:	mov	ip, r1
   1be10:	mov	r1, r2
   1be14:	ldr	r3, [pc, #12]	; 1be28 <__assert_fail@plt+0x9864>
   1be18:	mov	r2, r0
   1be1c:	mov	r0, ip
   1be20:	bl	1ba5c <__assert_fail@plt+0x9498>
   1be24:	pop	{r4, pc}
   1be28:	andeq	r4, r1, r8, asr #17
   1be2c:	ldr	r3, [pc, #152]	; 1becc <__assert_fail@plt+0x9908>
   1be30:	ldrb	r3, [r3, #8]
   1be34:	cmp	r3, #0
   1be38:	beq	1be48 <__assert_fail@plt+0x9884>
   1be3c:	ldr	r3, [pc, #136]	; 1becc <__assert_fail@plt+0x9908>
   1be40:	ldrb	r0, [r3, #8]
   1be44:	bx	lr
   1be48:	push	{r4, lr}
   1be4c:	ldr	r0, [pc, #124]	; 1bed0 <__assert_fail@plt+0x990c>
   1be50:	mov	r2, #0
   1be54:	mov	r1, r0
   1be58:	bl	121e0 <fnmatch@plt>
   1be5c:	cmp	r0, #0
   1be60:	bne	1beac <__assert_fail@plt+0x98e8>
   1be64:	mov	r2, #0
   1be68:	ldr	r1, [pc, #96]	; 1bed0 <__assert_fail@plt+0x990c>
   1be6c:	ldr	r0, [pc, #96]	; 1bed4 <__assert_fail@plt+0x9910>
   1be70:	bl	121e0 <fnmatch@plt>
   1be74:	cmp	r0, #0
   1be78:	beq	1beac <__assert_fail@plt+0x98e8>
   1be7c:	mov	r2, #16
   1be80:	ldr	r1, [pc, #72]	; 1bed0 <__assert_fail@plt+0x990c>
   1be84:	ldr	r0, [pc, #72]	; 1bed4 <__assert_fail@plt+0x9910>
   1be88:	bl	121e0 <fnmatch@plt>
   1be8c:	cmp	r0, #0
   1be90:	bne	1beac <__assert_fail@plt+0x98e8>
   1be94:	mov	r2, #1
   1be98:	ldr	r3, [pc, #44]	; 1becc <__assert_fail@plt+0x9908>
   1be9c:	strb	r2, [r3, #8]
   1bea0:	ldr	r3, [pc, #36]	; 1becc <__assert_fail@plt+0x9908>
   1bea4:	ldrb	r0, [r3, #8]
   1bea8:	pop	{r4, pc}
   1beac:	mov	r2, #5
   1beb0:	ldr	r1, [pc, #32]	; 1bed8 <__assert_fail@plt+0x9914>
   1beb4:	mov	r0, #0
   1beb8:	bl	12084 <dcgettext@plt>
   1bebc:	mov	r2, r0
   1bec0:	mov	r1, #0
   1bec4:	mov	r0, #1
   1bec8:	bl	121bc <error@plt>
   1becc:	ldrdeq	r9, [r5], -r0
   1bed0:	muleq	r4, r4, r6
   1bed4:	muleq	r4, r8, r6
   1bed8:	muleq	r4, ip, r6
   1bedc:	push	{r4, r5, r6, lr}
   1bee0:	mov	r5, r0
   1bee4:	mov	r4, r1
   1bee8:	ldr	r1, [pc, #72]	; 1bf38 <__assert_fail@plt+0x9974>
   1beec:	bl	124f8 <strpbrk@plt>
   1bef0:	cmp	r0, #0
   1bef4:	beq	1bf00 <__assert_fail@plt+0x993c>
   1bef8:	vldr	s0, [pc, #48]	; 1bf30 <__assert_fail@plt+0x996c>
   1befc:	pop	{r4, r5, r6, pc}
   1bf00:	cmp	r4, #0
   1bf04:	beq	1bf28 <__assert_fail@plt+0x9964>
   1bf08:	mov	r1, #46	; 0x2e
   1bf0c:	mov	r0, r5
   1bf10:	bl	122dc <strchr@plt>
   1bf14:	cmp	r0, #0
   1bf18:	vldr	s15, [pc, #16]	; 1bf30 <__assert_fail@plt+0x996c>
   1bf1c:	vldr	s0, [pc, #16]	; 1bf34 <__assert_fail@plt+0x9970>
   1bf20:	vmovne.f32	s0, s15
   1bf24:	pop	{r4, r5, r6, pc}
   1bf28:	vldr	s0, [pc, #4]	; 1bf34 <__assert_fail@plt+0x9970>
   1bf2c:	pop	{r4, r5, r6, pc}
   1bf30:	svccc	0x004ccccd
   1bf34:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bf38:	ldrdeq	r5, [r4], -r4
   1bf3c:	push	{r4, r5, r6, r7, lr}
   1bf40:	sub	sp, sp, #20
   1bf44:	mov	r6, r0
   1bf48:	mov	r4, r1
   1bf4c:	mov	r5, r2
   1bf50:	mov	r7, r3
   1bf54:	bl	1be2c <__assert_fail@plt+0x9868>
   1bf58:	add	r2, sp, #12
   1bf5c:	mov	r1, r5
   1bf60:	mov	r0, r4
   1bf64:	bl	1b448 <__assert_fail@plt+0x8e84>
   1bf68:	subs	r4, r0, #0
   1bf6c:	bne	1bf7c <__assert_fail@plt+0x99b8>
   1bf70:	mov	r0, r4
   1bf74:	add	sp, sp, #20
   1bf78:	pop	{r4, r5, r6, r7, pc}
   1bf7c:	ldr	r2, [sp, #12]
   1bf80:	ldr	r1, [sp, #40]	; 0x28
   1bf84:	mov	r0, r6
   1bf88:	bl	17c8c <__assert_fail@plt+0x56c8>
   1bf8c:	mov	r5, r0
   1bf90:	mov	r1, #0
   1bf94:	strb	r1, [r0, #19]
   1bf98:	strb	r1, [r0, #18]
   1bf9c:	ldr	r6, [sp, #12]
   1bfa0:	str	r6, [r0, #40]	; 0x28
   1bfa4:	mov	r0, r6
   1bfa8:	bl	1bedc <__assert_fail@plt+0x9918>
   1bfac:	vstr	s0, [r5, #28]
   1bfb0:	ldr	r3, [pc, #140]	; 1c044 <__assert_fail@plt+0x9a80>
   1bfb4:	ldrb	r3, [r3, #17]
   1bfb8:	cmp	r3, #0
   1bfbc:	movne	r4, r3
   1bfc0:	bne	1bf70 <__assert_fail@plt+0x99ac>
   1bfc4:	mov	r1, #47	; 0x2f
   1bfc8:	mov	r0, r6
   1bfcc:	bl	12438 <strrchr@plt>
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1bf70 <__assert_fail@plt+0x99ac>
   1bfd8:	ldrb	r3, [r0, #1]
   1bfdc:	cmp	r3, #0
   1bfe0:	bne	1bf70 <__assert_fail@plt+0x99ac>
   1bfe4:	ldr	r1, [pc, #92]	; 1c048 <__assert_fail@plt+0x9a84>
   1bfe8:	ldr	r3, [sp, #40]	; 0x28
   1bfec:	cmp	r3, r1
   1bff0:	movne	r1, #0
   1bff4:	moveq	r1, #1
   1bff8:	mov	r0, r6
   1bffc:	bl	1615c <__assert_fail@plt+0x3b98>
   1c000:	cmp	r0, #0
   1c004:	movne	r4, r0
   1c008:	bne	1bf70 <__assert_fail@plt+0x99ac>
   1c00c:	mov	r2, #5
   1c010:	ldr	r1, [pc, #52]	; 1c04c <__assert_fail@plt+0x9a88>
   1c014:	mov	r0, #0
   1c018:	bl	12084 <dcgettext@plt>
   1c01c:	ldr	r3, [sp, #12]
   1c020:	str	r3, [sp]
   1c024:	mov	r3, r7
   1c028:	mov	r2, r0
   1c02c:	mov	r1, #0
   1c030:	mov	r0, r1
   1c034:	bl	121bc <error@plt>
   1c038:	ldr	r3, [pc, #16]	; 1c050 <__assert_fail@plt+0x9a8c>
   1c03c:	str	r3, [r5, #28]
   1c040:	b	1bf70 <__assert_fail@plt+0x99ac>
   1c044:	andeq	r9, r5, ip, ror #28
   1c048:	andeq	r4, r1, r8, lsl r2
   1c04c:	ldrdeq	r5, [r4], -r8
   1c050:	eorcc	ip, fp, #30464	; 0x7700
   1c054:	push	{lr}		; (str lr, [sp, #-4]!)
   1c058:	sub	sp, sp, #12
   1c05c:	ldr	r3, [pc, #16]	; 1c074 <__assert_fail@plt+0x9ab0>
   1c060:	str	r3, [sp]
   1c064:	ldr	r3, [pc, #12]	; 1c078 <__assert_fail@plt+0x9ab4>
   1c068:	bl	1bf3c <__assert_fail@plt+0x9978>
   1c06c:	add	sp, sp, #12
   1c070:	pop	{pc}		; (ldr pc, [sp], #4)
   1c074:	andeq	r4, r1, r8, asr #11
   1c078:	andeq	r5, r4, r8, lsl r7
   1c07c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c080:	sub	sp, sp, #12
   1c084:	ldr	r3, [pc, #16]	; 1c09c <__assert_fail@plt+0x9ad8>
   1c088:	str	r3, [sp]
   1c08c:	ldr	r3, [pc, #12]	; 1c0a0 <__assert_fail@plt+0x9adc>
   1c090:	bl	1bf3c <__assert_fail@plt+0x9978>
   1c094:	add	sp, sp, #12
   1c098:	pop	{pc}		; (ldr pc, [sp], #4)
   1c09c:	andeq	r4, r1, r8, asr #11
   1c0a0:	andeq	r5, r4, r4, lsr #14
   1c0a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0a8:	sub	sp, sp, #12
   1c0ac:	ldr	r3, [pc, #16]	; 1c0c4 <__assert_fail@plt+0x9b00>
   1c0b0:	str	r3, [sp]
   1c0b4:	ldr	r3, [pc, #12]	; 1c0c8 <__assert_fail@plt+0x9b04>
   1c0b8:	bl	1bf3c <__assert_fail@plt+0x9978>
   1c0bc:	add	sp, sp, #12
   1c0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0c4:	andeq	r4, r1, r8, lsl r2
   1c0c8:	andeq	r5, r4, ip, lsr #14
   1c0cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0d0:	sub	sp, sp, #12
   1c0d4:	ldr	r3, [pc, #16]	; 1c0ec <__assert_fail@plt+0x9b28>
   1c0d8:	str	r3, [sp]
   1c0dc:	ldr	r3, [pc, #12]	; 1c0f0 <__assert_fail@plt+0x9b2c>
   1c0e0:	bl	1bf3c <__assert_fail@plt+0x9978>
   1c0e4:	add	sp, sp, #12
   1c0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0ec:	andeq	r4, r1, r8, lsl r2
   1c0f0:	andeq	r5, r4, r8, lsr r7
   1c0f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c0f8:	sub	sp, sp, #20
   1c0fc:	mov	r7, r0
   1c100:	mov	r4, r1
   1c104:	mov	r5, r2
   1c108:	mov	r8, r3
   1c10c:	ldr	r3, [r2]
   1c110:	sub	r3, r3, #-1073741823	; 0xc0000001
   1c114:	ldr	r9, [r1, r3, lsl #2]
   1c118:	add	r2, sp, #12
   1c11c:	mov	r1, r5
   1c120:	mov	r0, r4
   1c124:	bl	1b448 <__assert_fail@plt+0x8e84>
   1c128:	cmp	r0, #0
   1c12c:	beq	1c180 <__assert_fail@plt+0x9bbc>
   1c130:	ldr	r6, [sp, #12]
   1c134:	ldr	r1, [pc, #140]	; 1c1c8 <__assert_fail@plt+0x9c04>
   1c138:	mov	r0, r6
   1c13c:	bl	125b8 <strspn@plt>
   1c140:	cmp	r0, #0
   1c144:	ble	1c188 <__assert_fail@plt+0x9bc4>
   1c148:	ldrb	r3, [r6, r0]
   1c14c:	cmp	r3, #0
   1c150:	bne	1c188 <__assert_fail@plt+0x9bc4>
   1c154:	ldr	r3, [pc, #112]	; 1c1cc <__assert_fail@plt+0x9c08>
   1c158:	ldr	r1, [r3, #72]	; 0x48
   1c15c:	mov	r0, r6
   1c160:	bl	210f0 <__assert_fail@plt+0xeb2c>
   1c164:	str	r0, [r8]
   1c168:	cmp	r0, #0
   1c16c:	blt	1c188 <__assert_fail@plt+0x9bc4>
   1c170:	mov	r2, r5
   1c174:	mov	r1, r4
   1c178:	mov	r0, r7
   1c17c:	bl	1b808 <__assert_fail@plt+0x9244>
   1c180:	add	sp, sp, #20
   1c184:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c188:	mov	r2, #5
   1c18c:	ldr	r1, [pc, #60]	; 1c1d0 <__assert_fail@plt+0x9c0c>
   1c190:	mov	r0, #0
   1c194:	bl	12084 <dcgettext@plt>
   1c198:	mov	r4, r0
   1c19c:	ldr	r2, [sp, #12]
   1c1a0:	ldr	r3, [pc, #36]	; 1c1cc <__assert_fail@plt+0x9c08>
   1c1a4:	ldr	r1, [r3, #72]	; 0x48
   1c1a8:	mov	r0, #0
   1c1ac:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1c1b0:	str	r0, [sp]
   1c1b4:	mov	r3, r9
   1c1b8:	mov	r2, r4
   1c1bc:	mov	r1, #0
   1c1c0:	mov	r0, #1
   1c1c4:	bl	121bc <error@plt>
   1c1c8:	andeq	r5, r4, r0, asr #14
   1c1cc:	andeq	r9, r5, ip, ror #28
   1c1d0:	andeq	r5, r4, ip, asr #14
   1c1d4:	push	{r4, lr}
   1c1d8:	ldr	r3, [pc, #4]	; 1c1e4 <__assert_fail@plt+0x9c20>
   1c1dc:	bl	1c0f4 <__assert_fail@plt+0x9b30>
   1c1e0:	pop	{r4, pc}
   1c1e4:	andeq	r9, r5, r4, ror lr
   1c1e8:	push	{r4, lr}
   1c1ec:	ldr	r3, [pc, #4]	; 1c1f8 <__assert_fail@plt+0x9c34>
   1c1f0:	bl	1c0f4 <__assert_fail@plt+0x9b30>
   1c1f4:	pop	{r4, pc}
   1c1f8:	andeq	r9, r5, r0, ror lr
   1c1fc:	push	{r4, r5, r6, lr}
   1c200:	sub	sp, sp, #8
   1c204:	mov	r5, r0
   1c208:	mov	r0, r1
   1c20c:	mov	r1, r2
   1c210:	add	r2, sp, #4
   1c214:	bl	1b448 <__assert_fail@plt+0x8e84>
   1c218:	subs	r4, r0, #0
   1c21c:	bne	1c22c <__assert_fail@plt+0x9c68>
   1c220:	mov	r0, r4
   1c224:	add	sp, sp, #8
   1c228:	pop	{r4, r5, r6, pc}
   1c22c:	ldr	r0, [sp, #4]
   1c230:	bl	11ef8 <getpwnam@plt>
   1c234:	mov	r6, r0
   1c238:	bl	1242c <endpwent@plt>
   1c23c:	cmp	r6, #0
   1c240:	beq	1c270 <__assert_fail@plt+0x9cac>
   1c244:	ldr	r6, [r6, #8]
   1c248:	ldr	r1, [sp, #4]
   1c24c:	mov	r0, r5
   1c250:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c254:	str	r6, [r0, #40]	; 0x28
   1c258:	cmp	r6, #100	; 0x64
   1c25c:	vldr	s14, [pc, #176]	; 1c314 <__assert_fail@plt+0x9d50>
   1c260:	vldr	s15, [pc, #176]	; 1c318 <__assert_fail@plt+0x9d54>
   1c264:	vmovcs.f32	s15, s14
   1c268:	vstr	s15, [r0, #28]
   1c26c:	b	1c220 <__assert_fail@plt+0x9c5c>
   1c270:	ldr	r6, [sp, #4]
   1c274:	ldr	r1, [pc, #160]	; 1c31c <__assert_fail@plt+0x9d58>
   1c278:	mov	r0, r6
   1c27c:	bl	125b8 <strspn@plt>
   1c280:	cmp	r0, #0
   1c284:	beq	1c294 <__assert_fail@plt+0x9cd0>
   1c288:	ldrb	r3, [r6, r0]
   1c28c:	cmp	r3, #0
   1c290:	beq	1c2dc <__assert_fail@plt+0x9d18>
   1c294:	ldrb	r3, [r6]
   1c298:	cmp	r3, #0
   1c29c:	beq	1c2f4 <__assert_fail@plt+0x9d30>
   1c2a0:	mov	r2, #5
   1c2a4:	ldr	r1, [pc, #116]	; 1c320 <__assert_fail@plt+0x9d5c>
   1c2a8:	mov	r0, #0
   1c2ac:	bl	12084 <dcgettext@plt>
   1c2b0:	mov	r4, r0
   1c2b4:	ldr	r2, [sp, #4]
   1c2b8:	ldr	r3, [pc, #100]	; 1c324 <__assert_fail@plt+0x9d60>
   1c2bc:	ldr	r1, [r3, #72]	; 0x48
   1c2c0:	mov	r0, #0
   1c2c4:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1c2c8:	mov	r3, r0
   1c2cc:	mov	r2, r4
   1c2d0:	mov	r1, #0
   1c2d4:	mov	r0, #1
   1c2d8:	bl	121bc <error@plt>
   1c2dc:	ldr	r3, [pc, #64]	; 1c324 <__assert_fail@plt+0x9d60>
   1c2e0:	ldr	r1, [r3, #72]	; 0x48
   1c2e4:	mov	r0, r6
   1c2e8:	bl	210f0 <__assert_fail@plt+0xeb2c>
   1c2ec:	mov	r6, r0
   1c2f0:	b	1c248 <__assert_fail@plt+0x9c84>
   1c2f4:	mov	r2, #5
   1c2f8:	ldr	r1, [pc, #40]	; 1c328 <__assert_fail@plt+0x9d64>
   1c2fc:	mov	r0, #0
   1c300:	bl	12084 <dcgettext@plt>
   1c304:	mov	r2, r0
   1c308:	mov	r1, #0
   1c30c:	mov	r0, #1
   1c310:	bl	121bc <error@plt>
   1c314:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c318:	svccc	0x007d70a4
   1c31c:	andeq	r5, r4, r0, asr #14
   1c320:	andeq	r5, r4, ip, lsl #15
   1c324:	andeq	r9, r5, ip, ror #28
   1c328:			; <UNDEFINED> instruction: 0x000457b0
   1c32c:	push	{r4, lr}
   1c330:	mov	r1, #0
   1c334:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c338:	ldr	r3, [pc, #8]	; 1c348 <__assert_fail@plt+0x9d84>
   1c33c:	str	r3, [r0, #28]
   1c340:	mov	r0, #1
   1c344:	pop	{r4, pc}
   1c348:	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
   1c34c:	push	{r4, r5, r6, lr}
   1c350:	sub	sp, sp, #8
   1c354:	mov	r6, r0
   1c358:	mov	r4, r1
   1c35c:	mov	r5, r2
   1c360:	bl	1be2c <__assert_fail@plt+0x9868>
   1c364:	add	r2, sp, #4
   1c368:	mov	r1, r5
   1c36c:	mov	r0, r4
   1c370:	bl	1b448 <__assert_fail@plt+0x8e84>
   1c374:	subs	r4, r0, #0
   1c378:	bne	1c388 <__assert_fail@plt+0x9dc4>
   1c37c:	mov	r0, r4
   1c380:	add	sp, sp, #8
   1c384:	pop	{r4, r5, r6, pc}
   1c388:	ldr	r1, [sp, #4]
   1c38c:	mov	r0, r6
   1c390:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c394:	mov	r5, r0
   1c398:	ldr	r0, [sp, #4]
   1c39c:	str	r0, [r5, #40]	; 0x28
   1c3a0:	mov	r1, #0
   1c3a4:	bl	1bedc <__assert_fail@plt+0x9918>
   1c3a8:	vldr	s15, [pc, #8]	; 1c3b8 <__assert_fail@plt+0x9df4>
   1c3ac:	vmul.f32	s0, s0, s15
   1c3b0:	vstr	s0, [r5, #28]
   1c3b4:	b	1c37c <__assert_fail@plt+0x9db8>
   1c3b8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c3bc:	push	{r4, r5, lr}
   1c3c0:	sub	sp, sp, #12
   1c3c4:	mov	r5, r0
   1c3c8:	mov	r0, r1
   1c3cc:	mov	r1, r2
   1c3d0:	add	r2, sp, #4
   1c3d4:	bl	1b448 <__assert_fail@plt+0x8e84>
   1c3d8:	subs	r4, r0, #0
   1c3dc:	bne	1c3ec <__assert_fail@plt+0x9e28>
   1c3e0:	mov	r0, r4
   1c3e4:	add	sp, sp, #12
   1c3e8:	pop	{r4, r5, pc}
   1c3ec:	ldr	r1, [sp, #4]
   1c3f0:	mov	r0, r5
   1c3f4:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c3f8:	mov	r5, r0
   1c3fc:	ldr	r0, [sp, #4]
   1c400:	str	r0, [r5, #40]	; 0x28
   1c404:	mov	r1, #0
   1c408:	bl	1bedc <__assert_fail@plt+0x9918>
   1c40c:	vldr	s15, [pc, #8]	; 1c41c <__assert_fail@plt+0x9e58>
   1c410:	vmul.f32	s0, s0, s15
   1c414:	vstr	s0, [r5, #28]
   1c418:	b	1c3e0 <__assert_fail@plt+0x9e1c>
   1c41c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c420:	push	{r4, r5, r6, lr}
   1c424:	subs	r6, r1, #0
   1c428:	beq	1c4ac <__assert_fail@plt+0x9ee8>
   1c42c:	ldr	r3, [r2]
   1c430:	ldr	r3, [r6, r3, lsl #2]
   1c434:	cmp	r3, #0
   1c438:	beq	1c4b4 <__assert_fail@plt+0x9ef0>
   1c43c:	mov	r4, r2
   1c440:	mov	r5, r0
   1c444:	bl	11f04 <is_selinux_enabled@plt>
   1c448:	cmp	r0, #0
   1c44c:	ble	1c48c <__assert_fail@plt+0x9ec8>
   1c450:	mov	r1, #0
   1c454:	mov	r0, r5
   1c458:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c45c:	ldr	r3, [pc, #88]	; 1c4bc <__assert_fail@plt+0x9ef8>
   1c460:	str	r3, [r0, #28]
   1c464:	mov	r3, #0
   1c468:	strb	r3, [r0, #18]
   1c46c:	ldr	r3, [r4]
   1c470:	ldr	r3, [r6, r3, lsl #2]
   1c474:	str	r3, [r0, #40]	; 0x28
   1c478:	ldr	r3, [r4]
   1c47c:	add	r3, r3, #1
   1c480:	str	r3, [r4]
   1c484:	mov	r0, #1
   1c488:	pop	{r4, r5, r6, pc}
   1c48c:	mov	r2, #5
   1c490:	ldr	r1, [pc, #40]	; 1c4c0 <__assert_fail@plt+0x9efc>
   1c494:	mov	r0, #0
   1c498:	bl	12084 <dcgettext@plt>
   1c49c:	mov	r2, r0
   1c4a0:	mov	r1, #0
   1c4a4:	mov	r0, #1
   1c4a8:	bl	121bc <error@plt>
   1c4ac:	mov	r0, #0
   1c4b0:	pop	{r4, r5, r6, pc}
   1c4b4:	mov	r0, #0
   1c4b8:	pop	{r4, r5, r6, pc}
   1c4bc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c4c0:	ldrdeq	r5, [r4], -ip
   1c4c4:	push	{r4, r5, r6, r7, lr}
   1c4c8:	vpush	{d8}
   1c4cc:	sub	sp, sp, #36	; 0x24
   1c4d0:	str	r0, [sp, #12]
   1c4d4:	mov	r4, r1
   1c4d8:	add	r1, sp, #4
   1c4dc:	stm	r1, {r2, r3}
   1c4e0:	vmov.f64	d8, d0
   1c4e4:	mov	r7, r2
   1c4e8:	ldr	r6, [sp, #8]
   1c4ec:	add	r1, r4, #4
   1c4f0:	add	r0, sp, #12
   1c4f4:	bl	1b4a0 <__assert_fail@plt+0x8edc>
   1c4f8:	subs	r5, r0, #0
   1c4fc:	beq	1c534 <__assert_fail@plt+0x9f70>
   1c500:	ldr	r3, [r4, #4]
   1c504:	cmp	r3, #0
   1c508:	beq	1c544 <__assert_fail@plt+0x9f80>
   1c50c:	cmp	r3, #1
   1c510:	moveq	r3, #0
   1c514:	streq	r3, [r4, #4]
   1c518:	ldr	r3, [pc, #256]	; 1c620 <__assert_fail@plt+0xa05c>
   1c51c:	add	r2, sp, #24
   1c520:	mov	r1, #0
   1c524:	ldr	r0, [sp, #12]
   1c528:	bl	2d1f8 <__assert_fail@plt+0x1ac34>
   1c52c:	subs	r5, r0, #0
   1c530:	bne	1c550 <__assert_fail@plt+0x9f8c>
   1c534:	mov	r0, r5
   1c538:	add	sp, sp, #36	; 0x24
   1c53c:	vpop	{d8}
   1c540:	pop	{r4, r5, r6, r7, pc}
   1c544:	mov	r3, #1
   1c548:	str	r3, [r4, #4]
   1c54c:	b	1c518 <__assert_fail@plt+0x9f54>
   1c550:	add	r0, sp, #16
   1c554:	vldr	d0, [sp, #24]
   1c558:	vmul.f64	d0, d8, d0
   1c55c:	bl	12264 <modf@plt>
   1c560:	vldr	d7, [pc, #176]	; 1c618 <__assert_fail@plt+0xa054>
   1c564:	vmul.f64	d0, d0, d7
   1c568:	vcmpe.f64	d0, d7
   1c56c:	vmrs	APSR_nzcv, fpscr
   1c570:	bpl	1c5ec <__assert_fail@plt+0xa028>
   1c574:	vldr	d6, [sp, #16]
   1c578:	vmov	s15, r7
   1c57c:	vcvt.f64.s32	d7, s15
   1c580:	vsub.f64	d7, d7, d6
   1c584:	vcvt.s32.f64	s15, d7
   1c588:	vmov	r3, s15
   1c58c:	vstr	s15, [r4, #8]
   1c590:	vcmpe.f64	d6, #0.0
   1c594:	vmrs	APSR_nzcv, fpscr
   1c598:	movmi	r2, #1
   1c59c:	movpl	r2, #0
   1c5a0:	cmp	r3, r7
   1c5a4:	movle	r7, #0
   1c5a8:	movgt	r7, #1
   1c5ac:	cmp	r7, r2
   1c5b0:	bne	1c600 <__assert_fail@plt+0xa03c>
   1c5b4:	vmov	s15, r6
   1c5b8:	vcvt.f64.s32	d7, s15
   1c5bc:	vsub.f64	d6, d7, d0
   1c5c0:	vcvt.s32.f64	s12, d6
   1c5c4:	vcmpe.f64	d0, d7
   1c5c8:	vmrs	APSR_nzcv, fpscr
   1c5cc:	vstrle	s12, [r4, #12]
   1c5d0:	ldrgt	r2, [pc, #76]	; 1c624 <__assert_fail@plt+0xa060>
   1c5d4:	vmovgt	r1, s12
   1c5d8:	addgt	r2, r1, r2
   1c5dc:	strgt	r2, [r4, #12]
   1c5e0:	subgt	r3, r3, #1
   1c5e4:	strgt	r3, [r4, #8]
   1c5e8:	b	1c534 <__assert_fail@plt+0x9f70>
   1c5ec:	ldr	r3, [pc, #52]	; 1c628 <__assert_fail@plt+0xa064>
   1c5f0:	ldr	r2, [pc, #52]	; 1c62c <__assert_fail@plt+0xa068>
   1c5f4:	ldr	r1, [pc, #52]	; 1c630 <__assert_fail@plt+0xa06c>
   1c5f8:	ldr	r0, [pc, #52]	; 1c634 <__assert_fail@plt+0xa070>
   1c5fc:	bl	125c4 <__assert_fail@plt>
   1c600:	ldr	r3, [sp, #12]
   1c604:	ldr	r2, [sp, #64]	; 0x40
   1c608:	mov	r1, #0
   1c60c:	mov	r0, #1
   1c610:	bl	121bc <error@plt>
   1c614:	nop			; (mov r0, r0)
   1c618:	andeq	r0, r0, r0
   1c61c:	bicmi	ip, sp, r5, ror #26
   1c620:	andeq	r2, r1, r4, lsl #7
   1c624:	blcc	fe6cee2c <stdout@@GLIBC_2.4+0xfe6758d8>
   1c628:	andeq	r5, r4, ip, ror #5
   1c62c:	andeq	r0, r0, sp, asr #24
   1c630:	andeq	r5, r4, r0, lsl r8
   1c634:	andeq	r5, r4, ip, lsl r8
   1c638:	push	{r4, r5, r6, r7, r8, lr}
   1c63c:	sub	sp, sp, #40	; 0x28
   1c640:	mov	r7, r0
   1c644:	mov	r0, r1
   1c648:	mov	r4, r2
   1c64c:	mov	r8, r3
   1c650:	ldr	r6, [r2]
   1c654:	add	r2, sp, #36	; 0x24
   1c658:	mov	r1, r4
   1c65c:	bl	1b448 <__assert_fail@plt+0x8e84>
   1c660:	subs	r5, r0, #0
   1c664:	bne	1c674 <__assert_fail@plt+0xa0b0>
   1c668:	mov	r0, r5
   1c66c:	add	sp, sp, #40	; 0x28
   1c670:	pop	{r4, r5, r6, r7, r8, pc}
   1c674:	ldr	r3, [pc, #124]	; 1c6f8 <__assert_fail@plt+0xa134>
   1c678:	add	r2, sp, #12
   1c67c:	add	r1, r3, #28
   1c680:	ldm	r1, {r0, r1}
   1c684:	stm	r2, {r0, r1}
   1c688:	str	r8, [sp, #20]
   1c68c:	add	r3, r0, #86016	; 0x15000
   1c690:	add	r3, r3, #384	; 0x180
   1c694:	str	r3, [sp, #12]
   1c698:	ldr	r3, [pc, #92]	; 1c6fc <__assert_fail@plt+0xa138>
   1c69c:	str	r3, [sp]
   1c6a0:	vldr	d0, [pc, #72]	; 1c6f0 <__assert_fail@plt+0xa12c>
   1c6a4:	ldm	r2, {r2, r3}
   1c6a8:	add	r1, sp, #20
   1c6ac:	ldr	r0, [sp, #36]	; 0x24
   1c6b0:	bl	1c4c4 <__assert_fail@plt+0x9f00>
   1c6b4:	subs	r5, r0, #0
   1c6b8:	streq	r6, [r4]
   1c6bc:	beq	1c668 <__assert_fail@plt+0xa0a4>
   1c6c0:	ldr	r1, [sp, #36]	; 0x24
   1c6c4:	mov	r0, r7
   1c6c8:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c6cc:	mov	r4, r0
   1c6d0:	add	ip, r0, #40	; 0x28
   1c6d4:	add	r3, sp, #20
   1c6d8:	ldm	r3, {r0, r1, r2, r3}
   1c6dc:	stm	ip, {r0, r1, r2, r3}
   1c6e0:	ldr	r0, [sp, #28]
   1c6e4:	bl	1b378 <__assert_fail@plt+0x8db4>
   1c6e8:	vstr	s0, [r4, #28]
   1c6ec:	b	1c668 <__assert_fail@plt+0xa0a4>
   1c6f0:	andeq	r0, r0, r0
   1c6f4:	submi	r0, lr, r0
   1c6f8:	andeq	r9, r5, ip, ror #28
   1c6fc:	andeq	r5, r4, r8, lsr r8
   1c700:	push	{r4, lr}
   1c704:	mov	r3, #3
   1c708:	bl	1c638 <__assert_fail@plt+0xa074>
   1c70c:	pop	{r4, pc}
   1c710:	push	{r4, lr}
   1c714:	mov	r3, #2
   1c718:	bl	1c638 <__assert_fail@plt+0xa074>
   1c71c:	pop	{r4, pc}
   1c720:	push	{r4, lr}
   1c724:	mov	r3, #0
   1c728:	bl	1c638 <__assert_fail@plt+0xa074>
   1c72c:	pop	{r4, pc}
   1c730:	push	{r4, lr}
   1c734:	sub	sp, sp, #24
   1c738:	str	r0, [sp, #12]
   1c73c:	cmp	r0, #0
   1c740:	beq	1c790 <__assert_fail@plt+0xa1cc>
   1c744:	mov	r4, r1
   1c748:	cmp	r2, #0
   1c74c:	beq	1c764 <__assert_fail@plt+0xa1a0>
   1c750:	mov	r1, r2
   1c754:	add	r0, sp, #12
   1c758:	bl	1b4a0 <__assert_fail@plt+0x8edc>
   1c75c:	cmp	r0, #0
   1c760:	beq	1c788 <__assert_fail@plt+0xa1c4>
   1c764:	ldr	r3, [pc, #44]	; 1c798 <__assert_fail@plt+0xa1d4>
   1c768:	str	r3, [sp]
   1c76c:	mov	r3, r4
   1c770:	mov	r2, #10
   1c774:	add	r1, sp, #20
   1c778:	ldr	r0, [sp, #12]
   1c77c:	bl	2d85c <__assert_fail@plt+0x1b298>
   1c780:	clz	r0, r0
   1c784:	lsr	r0, r0, #5
   1c788:	add	sp, sp, #24
   1c78c:	pop	{r4, pc}
   1c790:	mov	r0, #0
   1c794:	b	1c788 <__assert_fail@plt+0xa1c4>
   1c798:	andeq	r4, r4, r0, lsl r3
   1c79c:	push	{r4, r5, lr}
   1c7a0:	sub	sp, sp, #28
   1c7a4:	mov	r4, r2
   1c7a8:	add	r2, sp, #20
   1c7ac:	bl	1b448 <__assert_fail@plt+0x8e84>
   1c7b0:	cmp	r0, #0
   1c7b4:	moveq	r4, #0
   1c7b8:	beq	1c808 <__assert_fail@plt+0xa244>
   1c7bc:	add	r2, sp, #4
   1c7c0:	add	r1, sp, #8
   1c7c4:	ldr	r0, [sp, #20]
   1c7c8:	bl	1c730 <__assert_fail@plt+0xa16c>
   1c7cc:	cmp	r0, #0
   1c7d0:	moveq	r4, #0
   1c7d4:	beq	1c808 <__assert_fail@plt+0xa244>
   1c7d8:	ldr	r1, [sp, #20]
   1c7dc:	mov	r0, r4
   1c7e0:	bl	17cc4 <__assert_fail@plt+0x5700>
   1c7e4:	mov	r4, r0
   1c7e8:	ldr	r3, [sp, #4]
   1c7ec:	str	r3, [r0, #40]	; 0x28
   1c7f0:	ldrd	r2, [sp, #8]
   1c7f4:	strd	r2, [r0, #48]	; 0x30
   1c7f8:	ldr	r3, [pc, #152]	; 1c898 <__assert_fail@plt+0xa2d4>
   1c7fc:	ldr	r3, [r3, #44]	; 0x2c
   1c800:	tst	r3, #1
   1c804:	bne	1c814 <__assert_fail@plt+0xa250>
   1c808:	mov	r0, r4
   1c80c:	add	sp, sp, #28
   1c810:	pop	{r4, r5, pc}
   1c814:	ldr	r5, [pc, #128]	; 1c89c <__assert_fail@plt+0xa2d8>
   1c818:	ldr	r2, [r0, #4]
   1c81c:	ldr	r1, [pc, #124]	; 1c8a0 <__assert_fail@plt+0xa2dc>
   1c820:	ldr	r0, [r5]
   1c824:	bl	1230c <fprintf@plt>
   1c828:	ldr	r0, [r5]
   1c82c:	ldr	r1, [sp, #4]
   1c830:	cmp	r1, #0
   1c834:	beq	1c864 <__assert_fail@plt+0xa2a0>
   1c838:	cmp	r1, #1
   1c83c:	beq	1c88c <__assert_fail@plt+0xa2c8>
   1c840:	ldr	r3, [pc, #92]	; 1c8a4 <__assert_fail@plt+0xa2e0>
   1c844:	ldr	r2, [pc, #92]	; 1c8a8 <__assert_fail@plt+0xa2e4>
   1c848:	cmp	r1, #2
   1c84c:	moveq	r2, r3
   1c850:	ldr	ip, [pc, #84]	; 1c8ac <__assert_fail@plt+0xa2e8>
   1c854:	ldr	r3, [pc, #84]	; 1c8b0 <__assert_fail@plt+0xa2ec>
   1c858:	cmp	r1, #2
   1c85c:	moveq	r3, ip
   1c860:	b	1c86c <__assert_fail@plt+0xa2a8>
   1c864:	ldr	r2, [pc, #72]	; 1c8b4 <__assert_fail@plt+0xa2f0>
   1c868:	ldr	r3, [pc, #72]	; 1c8b8 <__assert_fail@plt+0xa2f4>
   1c86c:	ldr	r1, [pc, #72]	; 1c8bc <__assert_fail@plt+0xa2f8>
   1c870:	bl	1230c <fprintf@plt>
   1c874:	ldrd	r2, [r4, #48]	; 0x30
   1c878:	ldr	r1, [pc, #64]	; 1c8c0 <__assert_fail@plt+0xa2fc>
   1c87c:	ldr	r0, [pc, #24]	; 1c89c <__assert_fail@plt+0xa2d8>
   1c880:	ldr	r0, [r0]
   1c884:	bl	1230c <fprintf@plt>
   1c888:	b	1c808 <__assert_fail@plt+0xa244>
   1c88c:	ldr	r2, [pc, #48]	; 1c8c4 <__assert_fail@plt+0xa300>
   1c890:	ldr	r3, [pc, #48]	; 1c8c8 <__assert_fail@plt+0xa304>
   1c894:	b	1c86c <__assert_fail@plt+0xa2a8>
   1c898:	andeq	r9, r5, ip, ror #28
   1c89c:	andeq	r9, r5, r8, asr #10
   1c8a0:	muleq	r4, ip, r8
   1c8a4:	muleq	r4, r4, r8
   1c8a8:	andeq	r6, r4, r4, lsr #2
   1c8ac:	muleq	r4, r8, r8
   1c8b0:	muleq	r4, r0, r8
   1c8b4:	andeq	r5, r4, r0, lsl #17
   1c8b8:	andeq	r5, r4, r4, lsl #17
   1c8bc:	andeq	r5, r4, ip, lsr #17
   1c8c0:	andeq	r5, r4, r4, asr #17
   1c8c4:	andeq	r5, r4, r8, lsl #17
   1c8c8:	andeq	r5, r4, ip, lsl #17
   1c8cc:	push	{r4, lr}
   1c8d0:	mov	r3, r1
   1c8d4:	mov	r4, r2
   1c8d8:	mov	r2, r0
   1c8dc:	mov	r1, r4
   1c8e0:	mov	r0, r3
   1c8e4:	bl	1c79c <__assert_fail@plt+0xa1d8>
   1c8e8:	cmp	r0, #0
   1c8ec:	beq	1c914 <__assert_fail@plt+0xa350>
   1c8f0:	ldrd	r2, [r0, #48]	; 0x30
   1c8f4:	cmp	r3, #0
   1c8f8:	cmpeq	r2, #100	; 0x64
   1c8fc:	vldr	s14, [pc, #36]	; 1c928 <__assert_fail@plt+0xa364>
   1c900:	vldr	s15, [pc, #36]	; 1c92c <__assert_fail@plt+0xa368>
   1c904:	vmovcs.f32	s15, s14
   1c908:	vstr	s15, [r0, #28]
   1c90c:	mov	r0, #1
   1c910:	pop	{r4, pc}
   1c914:	ldr	r3, [r4]
   1c918:	sub	r3, r3, #1
   1c91c:	str	r3, [r4]
   1c920:	mov	r0, #0
   1c924:	pop	{r4, pc}
   1c928:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c92c:	svccc	0x007d70a4
   1c930:	push	{r4, lr}
   1c934:	mov	r3, r1
   1c938:	mov	r4, r2
   1c93c:	mov	r2, r0
   1c940:	mov	r1, r4
   1c944:	mov	r0, r3
   1c948:	bl	1c79c <__assert_fail@plt+0xa1d8>
   1c94c:	cmp	r0, #0
   1c950:	beq	1c990 <__assert_fail@plt+0xa3cc>
   1c954:	ldrd	r2, [r0, #48]	; 0x30
   1c958:	cmp	r3, #0
   1c95c:	cmpeq	r2, #1
   1c960:	beq	1c980 <__assert_fail@plt+0xa3bc>
   1c964:	cmp	r3, #0
   1c968:	cmpeq	r2, #2
   1c96c:	ldreq	r3, [pc, #48]	; 1c9a4 <__assert_fail@plt+0xa3e0>
   1c970:	ldrne	r3, [pc, #48]	; 1c9a8 <__assert_fail@plt+0xa3e4>
   1c974:	str	r3, [r0, #28]
   1c978:	mov	r0, #1
   1c97c:	pop	{r4, pc}
   1c980:	ldr	r3, [pc, #36]	; 1c9ac <__assert_fail@plt+0xa3e8>
   1c984:	str	r3, [r0, #28]
   1c988:	mov	r0, #1
   1c98c:	pop	{r4, pc}
   1c990:	ldr	r3, [r4]
   1c994:	sub	r3, r3, #1
   1c998:	str	r3, [r4]
   1c99c:	mov	r0, #0
   1c9a0:	pop	{r4, pc}
   1c9a4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c9a8:	bcc	fe0e136c <stdout@@GLIBC_2.4+0xfe087e18>
   1c9ac:	svccc	0x007d70a4
   1c9b0:	push	{r4, lr}
   1c9b4:	mov	r3, r1
   1c9b8:	mov	r4, r2
   1c9bc:	mov	r2, r0
   1c9c0:	mov	r1, r4
   1c9c4:	mov	r0, r3
   1c9c8:	bl	1c79c <__assert_fail@plt+0xa1d8>
   1c9cc:	subs	r3, r0, #0
   1c9d0:	beq	1c9f4 <__assert_fail@plt+0xa430>
   1c9d4:	ldr	r2, [pc, #44]	; 1ca08 <__assert_fail@plt+0xa444>
   1c9d8:	str	r2, [r3, #28]
   1c9dc:	mov	r0, #1
   1c9e0:	strb	r0, [r3, #20]
   1c9e4:	mov	r2, #0
   1c9e8:	strb	r2, [r3, #18]
   1c9ec:	strb	r2, [r3, #19]
   1c9f0:	pop	{r4, pc}
   1c9f4:	ldr	r3, [r4]
   1c9f8:	sub	r3, r3, #1
   1c9fc:	str	r3, [r4]
   1ca00:	mov	r0, #0
   1ca04:	pop	{r4, pc}
   1ca08:	strcc	r3, [r6, #1981]	; 0x7bd
   1ca0c:	push	{r4, lr}
   1ca10:	mov	r3, r1
   1ca14:	mov	r4, r2
   1ca18:	mov	r2, r0
   1ca1c:	mov	r1, r4
   1ca20:	mov	r0, r3
   1ca24:	bl	1c79c <__assert_fail@plt+0xa1d8>
   1ca28:	cmp	r0, #0
   1ca2c:	beq	1ca54 <__assert_fail@plt+0xa490>
   1ca30:	ldrd	r2, [r0, #48]	; 0x30
   1ca34:	cmp	r3, #0
   1ca38:	cmpeq	r2, #100	; 0x64
   1ca3c:	vldr	s14, [pc, #36]	; 1ca68 <__assert_fail@plt+0xa4a4>
   1ca40:	vldr	s15, [pc, #36]	; 1ca6c <__assert_fail@plt+0xa4a8>
   1ca44:	vmovcs.f32	s15, s14
   1ca48:	vstr	s15, [r0, #28]
   1ca4c:	mov	r0, #1
   1ca50:	pop	{r4, pc}
   1ca54:	ldr	r3, [r4]
   1ca58:	sub	r3, r3, #1
   1ca5c:	str	r3, [r4]
   1ca60:	mov	r0, #0
   1ca64:	pop	{r4, pc}
   1ca68:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1ca6c:	svccc	0x007d70a4
   1ca70:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ca74:	sub	sp, sp, #28
   1ca78:	subs	r7, r1, #0
   1ca7c:	beq	1cda8 <__assert_fail@plt+0xa7e4>
   1ca80:	ldr	r3, [r2]
   1ca84:	ldr	r4, [r7, r3, lsl #2]
   1ca88:	cmp	r4, #0
   1ca8c:	beq	1cdb0 <__assert_fail@plt+0xa7ec>
   1ca90:	mov	r5, r2
   1ca94:	mov	r8, r0
   1ca98:	mov	r0, r4
   1ca9c:	bl	122d0 <strlen@plt>
   1caa0:	cmp	r0, #0
   1caa4:	beq	1cbe0 <__assert_fail@plt+0xa61c>
   1caa8:	sub	r6, r0, #1
   1caac:	ldrb	r9, [r4, r6]
   1cab0:	sub	r3, r9, #48	; 0x30
   1cab4:	cmp	r3, #71	; 0x47
   1cab8:	ldrls	pc, [pc, r3, lsl #2]
   1cabc:	b	1cc60 <__assert_fail@plt+0xa69c>
   1cac0:	andeq	ip, r1, ip, lsl #25
   1cac4:	andeq	ip, r1, ip, lsl #25
   1cac8:	andeq	ip, r1, ip, lsl #25
   1cacc:	andeq	ip, r1, ip, lsl #25
   1cad0:	andeq	ip, r1, ip, lsl #25
   1cad4:	andeq	ip, r1, ip, lsl #25
   1cad8:	andeq	ip, r1, ip, lsl #25
   1cadc:	andeq	ip, r1, ip, lsl #25
   1cae0:	andeq	ip, r1, ip, lsl #25
   1cae4:	andeq	ip, r1, ip, lsl #25
   1cae8:	andeq	ip, r1, r0, ror #24
   1caec:	andeq	ip, r1, r0, ror #24
   1caf0:	andeq	ip, r1, r0, ror #24
   1caf4:	andeq	ip, r1, r0, ror #24
   1caf8:	andeq	ip, r1, r0, ror #24
   1cafc:	andeq	ip, r1, r0, ror #24
   1cb00:	andeq	ip, r1, r0, ror #24
   1cb04:	andeq	ip, r1, r0, ror #24
   1cb08:	andeq	ip, r1, r0, ror #24
   1cb0c:	andeq	ip, r1, r0, ror #24
   1cb10:	andeq	ip, r1, r0, ror #24
   1cb14:	andeq	ip, r1, r0, ror #24
   1cb18:	andeq	ip, r1, r0, ror #24
   1cb1c:	andeq	ip, r1, r0, asr #24
   1cb20:	andeq	ip, r1, r0, ror #24
   1cb24:	andeq	ip, r1, r0, ror #24
   1cb28:	andeq	ip, r1, r0, ror #24
   1cb2c:	andeq	ip, r1, r0, ror #24
   1cb30:	andeq	ip, r1, r0, ror #24
   1cb34:	andeq	ip, r1, r0, lsr ip
   1cb38:	andeq	ip, r1, r0, ror #24
   1cb3c:	andeq	ip, r1, r0, ror #24
   1cb40:	andeq	ip, r1, r0, ror #24
   1cb44:	andeq	ip, r1, r0, ror #24
   1cb48:	andeq	ip, r1, r0, ror #24
   1cb4c:	andeq	ip, r1, r0, ror #24
   1cb50:	andeq	ip, r1, r0, ror #24
   1cb54:	andeq	ip, r1, r0, ror #24
   1cb58:	andeq	ip, r1, r0, ror #24
   1cb5c:	andeq	ip, r1, r0, ror #24
   1cb60:	andeq	ip, r1, r0, ror #24
   1cb64:	andeq	ip, r1, r0, ror #24
   1cb68:	andeq	ip, r1, r0, ror #24
   1cb6c:	andeq	ip, r1, r0, ror #24
   1cb70:	andeq	ip, r1, r0, ror #24
   1cb74:	andeq	ip, r1, r0, ror #24
   1cb78:	andeq	ip, r1, r0, ror #24
   1cb7c:	andeq	ip, r1, r0, ror #24
   1cb80:	andeq	ip, r1, r0, ror #24
   1cb84:	andeq	ip, r1, r0, ror #24
   1cb88:	andeq	ip, r1, r0, lsl #24
   1cb8c:	andeq	ip, r1, r0, lsl ip
   1cb90:	andeq	ip, r1, r0, ror #24
   1cb94:	andeq	ip, r1, r0, ror #24
   1cb98:	andeq	ip, r1, r0, ror #24
   1cb9c:	andeq	ip, r1, r0, ror #24
   1cba0:	andeq	ip, r1, r0, ror #24
   1cba4:	andeq	ip, r1, r0, ror #24
   1cba8:	andeq	ip, r1, r0, ror #24
   1cbac:	andeq	ip, r1, r0, lsr #24
   1cbb0:	andeq	ip, r1, r0, ror #24
   1cbb4:	andeq	ip, r1, r0, ror #24
   1cbb8:	andeq	ip, r1, r0, ror #24
   1cbbc:	andeq	ip, r1, r0, ror #24
   1cbc0:	andeq	ip, r1, r0, ror #24
   1cbc4:	andeq	ip, r1, r0, ror #24
   1cbc8:	andeq	ip, r1, r0, ror #24
   1cbcc:	andeq	ip, r1, r0, ror #24
   1cbd0:	andeq	ip, r1, r0, ror #24
   1cbd4:	andeq	ip, r1, r0, ror #24
   1cbd8:	andeq	ip, r1, r0, ror #24
   1cbdc:	andeq	ip, r1, r0, asr ip
   1cbe0:	mov	r2, #5
   1cbe4:	ldr	r1, [pc, #468]	; 1cdc0 <__assert_fail@plt+0xa7fc>
   1cbe8:	mov	r0, #0
   1cbec:	bl	12084 <dcgettext@plt>
   1cbf0:	mov	r2, r0
   1cbf4:	mov	r1, #0
   1cbf8:	mov	r0, #1
   1cbfc:	bl	121bc <error@plt>
   1cc00:	mov	r3, #0
   1cc04:	strb	r3, [r4, r6]
   1cc08:	mov	r6, #512	; 0x200
   1cc0c:	b	1cc94 <__assert_fail@plt+0xa6d0>
   1cc10:	mov	r3, #0
   1cc14:	strb	r3, [r4, r6]
   1cc18:	mov	r6, #1
   1cc1c:	b	1cc94 <__assert_fail@plt+0xa6d0>
   1cc20:	mov	r3, #0
   1cc24:	strb	r3, [r4, r6]
   1cc28:	mov	r6, #1024	; 0x400
   1cc2c:	b	1cc94 <__assert_fail@plt+0xa6d0>
   1cc30:	mov	r3, #0
   1cc34:	strb	r3, [r4, r6]
   1cc38:	mov	r6, #1048576	; 0x100000
   1cc3c:	b	1cc94 <__assert_fail@plt+0xa6d0>
   1cc40:	mov	r3, #0
   1cc44:	strb	r3, [r4, r6]
   1cc48:	mov	r6, #1073741824	; 0x40000000
   1cc4c:	b	1cc94 <__assert_fail@plt+0xa6d0>
   1cc50:	mov	r3, #0
   1cc54:	strb	r3, [r4, r6]
   1cc58:	mov	r6, #2
   1cc5c:	b	1cc94 <__assert_fail@plt+0xa6d0>
   1cc60:	mov	r2, #5
   1cc64:	ldr	r1, [pc, #344]	; 1cdc4 <__assert_fail@plt+0xa800>
   1cc68:	mov	r0, #0
   1cc6c:	bl	12084 <dcgettext@plt>
   1cc70:	ldr	r3, [r5]
   1cc74:	ldr	r3, [r7, r3, lsl #2]
   1cc78:	ldrb	r3, [r3, r6]
   1cc7c:	mov	r2, r0
   1cc80:	mov	r1, #0
   1cc84:	mov	r0, #1
   1cc88:	bl	121bc <error@plt>
   1cc8c:	mov	r6, #512	; 0x200
   1cc90:	mov	r9, #0
   1cc94:	add	r2, sp, #12
   1cc98:	add	r1, sp, #16
   1cc9c:	mov	r0, r4
   1cca0:	bl	1c730 <__assert_fail@plt+0xa16c>
   1cca4:	subs	r7, r0, #0
   1cca8:	beq	1cd30 <__assert_fail@plt+0xa76c>
   1ccac:	mov	r1, r4
   1ccb0:	mov	r0, r8
   1ccb4:	bl	17cc4 <__assert_fail@plt+0x5700>
   1ccb8:	ldr	r1, [sp, #12]
   1ccbc:	str	r1, [r0, #40]	; 0x28
   1ccc0:	str	r6, [r0, #44]	; 0x2c
   1ccc4:	ldr	r3, [sp, #16]
   1ccc8:	ldr	r2, [sp, #20]
   1cccc:	str	r3, [r0, #48]	; 0x30
   1ccd0:	str	r2, [r0, #52]	; 0x34
   1ccd4:	mov	ip, #1
   1ccd8:	strb	ip, [r0, #18]
   1ccdc:	mov	ip, #0
   1cce0:	strb	ip, [r0, #19]
   1cce4:	cmp	r1, ip
   1cce8:	bne	1cd68 <__assert_fail@plt+0xa7a4>
   1ccec:	asr	r9, r6, #31
   1ccf0:	mul	r2, r6, r2
   1ccf4:	mla	r2, r3, r9, r2
   1ccf8:	umull	r8, r9, r6, r3
   1ccfc:	add	r9, r2, r9
   1cd00:	cmp	r9, #0
   1cd04:	cmpeq	r8, #20480	; 0x5000
   1cd08:	vldr	s14, [pc, #168]	; 1cdb8 <__assert_fail@plt+0xa7f4>
   1cd0c:	vldr	s15, [pc, #168]	; 1cdbc <__assert_fail@plt+0xa7f8>
   1cd10:	vmovls.f32	s15, s14
   1cd14:	vstr	s15, [r0, #28]
   1cd18:	ldr	r3, [r5]
   1cd1c:	add	r3, r3, #1
   1cd20:	str	r3, [r5]
   1cd24:	mov	r0, r7
   1cd28:	add	sp, sp, #28
   1cd2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cd30:	strb	r9, [sp, #8]
   1cd34:	mov	r5, #0
   1cd38:	strb	r5, [sp, #9]
   1cd3c:	mov	r2, #5
   1cd40:	ldr	r1, [pc, #128]	; 1cdc8 <__assert_fail@plt+0xa804>
   1cd44:	mov	r0, r5
   1cd48:	bl	12084 <dcgettext@plt>
   1cd4c:	add	r3, sp, #8
   1cd50:	str	r3, [sp]
   1cd54:	mov	r3, r4
   1cd58:	mov	r2, r0
   1cd5c:	mov	r1, r5
   1cd60:	mov	r0, #1
   1cd64:	bl	121bc <error@plt>
   1cd68:	cmp	r1, #1
   1cd6c:	ldrne	r3, [pc, #88]	; 1cdcc <__assert_fail@plt+0xa808>
   1cd70:	strne	r3, [r0, #28]
   1cd74:	bne	1cd18 <__assert_fail@plt+0xa754>
   1cd78:	asr	r9, r6, #31
   1cd7c:	mul	r2, r6, r2
   1cd80:	mla	r2, r3, r9, r2
   1cd84:	umull	r8, r9, r6, r3
   1cd88:	add	r9, r2, r9
   1cd8c:	cmp	r9, #0
   1cd90:	cmpeq	r8, #20480	; 0x5000
   1cd94:	vldr	s14, [pc, #32]	; 1cdbc <__assert_fail@plt+0xa7f8>
   1cd98:	vldr	s15, [pc, #24]	; 1cdb8 <__assert_fail@plt+0xa7f4>
   1cd9c:	vmovls.f32	s15, s14
   1cda0:	vstr	s15, [r0, #28]
   1cda4:	b	1cd18 <__assert_fail@plt+0xa754>
   1cda8:	mov	r7, #0
   1cdac:	b	1cd24 <__assert_fail@plt+0xa760>
   1cdb0:	mov	r7, #0
   1cdb4:	b	1cd24 <__assert_fail@plt+0xa760>
   1cdb8:	svccc	0x00666666
   1cdbc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cdc0:	andeq	r5, r4, ip, asr #17
   1cdc4:	andeq	r5, r4, ip, ror #17
   1cdc8:	andeq	r5, r4, r4, lsl #18
   1cdcc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cdd0:	push	{r4, r5, r6, lr}
   1cdd4:	sub	sp, sp, #8
   1cdd8:	mov	r6, r2
   1cddc:	mov	r4, r3
   1cde0:	add	r2, sp, #4
   1cde4:	bl	1b448 <__assert_fail@plt+0x8e84>
   1cde8:	subs	r5, r0, #0
   1cdec:	moveq	r3, #0
   1cdf0:	streq	r3, [r4]
   1cdf4:	bne	1ce04 <__assert_fail@plt+0xa840>
   1cdf8:	mov	r0, r5
   1cdfc:	add	sp, sp, #8
   1ce00:	pop	{r4, r5, r6, pc}
   1ce04:	ldr	r0, [sp, #4]
   1ce08:	str	r0, [r4]
   1ce0c:	ldr	r3, [pc, #32]	; 1ce34 <__assert_fail@plt+0xa870>
   1ce10:	ldr	r3, [r3, #52]	; 0x34
   1ce14:	mov	r1, r6
   1ce18:	blx	r3
   1ce1c:	cmp	r0, #0
   1ce20:	beq	1cdf8 <__assert_fail@plt+0xa834>
   1ce24:	bl	12318 <__errno_location@plt>
   1ce28:	ldr	r1, [sp, #4]
   1ce2c:	ldr	r0, [r0]
   1ce30:	bl	18dd0 <__assert_fail@plt+0x680c>
   1ce34:	andeq	r9, r5, ip, ror #28
   1ce38:	push	{r4, r5, r6, lr}
   1ce3c:	sub	sp, sp, #112	; 0x70
   1ce40:	mov	r6, r0
   1ce44:	mov	r4, r1
   1ce48:	mov	r5, r2
   1ce4c:	add	r0, sp, #8
   1ce50:	bl	17f50 <__assert_fail@plt+0x598c>
   1ce54:	add	r3, sp, #4
   1ce58:	add	r2, sp, #8
   1ce5c:	mov	r1, r5
   1ce60:	mov	r0, r4
   1ce64:	bl	1cdd0 <__assert_fail@plt+0xa80c>
   1ce68:	subs	r5, r0, #0
   1ce6c:	bne	1ce7c <__assert_fail@plt+0xa8b8>
   1ce70:	mov	r0, r5
   1ce74:	add	sp, sp, #112	; 0x70
   1ce78:	pop	{r4, r5, r6, pc}
   1ce7c:	ldr	r1, [sp, #4]
   1ce80:	mov	r0, r6
   1ce84:	bl	17cc4 <__assert_fail@plt+0x5700>
   1ce88:	mov	r4, r0
   1ce8c:	ldr	r3, [sp, #92]	; 0x5c
   1ce90:	ldr	r2, [sp, #88]	; 0x58
   1ce94:	str	r2, [r0, #48]	; 0x30
   1ce98:	str	r3, [r0, #52]	; 0x34
   1ce9c:	mov	r3, #3
   1cea0:	str	r3, [r0, #40]	; 0x28
   1cea4:	mov	r3, #0
   1cea8:	str	r3, [r0, #44]	; 0x2c
   1ceac:	ldr	r0, [sp, #88]	; 0x58
   1ceb0:	bl	1b378 <__assert_fail@plt+0x8db4>
   1ceb4:	vstr	s0, [r4, #28]
   1ceb8:	b	1ce70 <__assert_fail@plt+0xa8ac>
   1cebc:	push	{r4, r5, r6, lr}
   1cec0:	sub	sp, sp, #112	; 0x70
   1cec4:	mov	r6, r0
   1cec8:	mov	r4, r1
   1cecc:	mov	r5, r2
   1ced0:	add	r0, sp, #8
   1ced4:	bl	17f50 <__assert_fail@plt+0x598c>
   1ced8:	add	r3, sp, #4
   1cedc:	add	r2, sp, #8
   1cee0:	mov	r1, r5
   1cee4:	mov	r0, r4
   1cee8:	bl	1cdd0 <__assert_fail@plt+0xa80c>
   1ceec:	subs	r5, r0, #0
   1cef0:	bne	1cf00 <__assert_fail@plt+0xa93c>
   1cef4:	mov	r0, r5
   1cef8:	add	sp, sp, #112	; 0x70
   1cefc:	pop	{r4, r5, r6, pc}
   1cf00:	ldr	r1, [sp, #4]
   1cf04:	mov	r0, r6
   1cf08:	bl	17cc4 <__assert_fail@plt+0x5700>
   1cf0c:	mov	r4, r0
   1cf10:	mov	r3, #2
   1cf14:	str	r3, [r0, #40]	; 0x28
   1cf18:	ldr	r3, [sp, #92]	; 0x5c
   1cf1c:	ldr	r2, [sp, #88]	; 0x58
   1cf20:	str	r2, [r0, #48]	; 0x30
   1cf24:	str	r3, [r0, #52]	; 0x34
   1cf28:	mov	r3, #0
   1cf2c:	str	r3, [r0, #44]	; 0x2c
   1cf30:	ldr	r0, [sp, #88]	; 0x58
   1cf34:	bl	1b378 <__assert_fail@plt+0x8db4>
   1cf38:	vstr	s0, [r4, #28]
   1cf3c:	b	1cef4 <__assert_fail@plt+0xa930>
   1cf40:	push	{r4, r5, r6, lr}
   1cf44:	sub	sp, sp, #112	; 0x70
   1cf48:	mov	r6, r0
   1cf4c:	mov	r4, r1
   1cf50:	mov	r5, r2
   1cf54:	add	r0, sp, #8
   1cf58:	bl	17f50 <__assert_fail@plt+0x598c>
   1cf5c:	add	r3, sp, #4
   1cf60:	add	r2, sp, #8
   1cf64:	mov	r1, r5
   1cf68:	mov	r0, r4
   1cf6c:	bl	1cdd0 <__assert_fail@plt+0xa80c>
   1cf70:	subs	r5, r0, #0
   1cf74:	bne	1cf84 <__assert_fail@plt+0xa9c0>
   1cf78:	mov	r0, r5
   1cf7c:	add	sp, sp, #112	; 0x70
   1cf80:	pop	{r4, r5, r6, pc}
   1cf84:	ldr	r1, [sp, #4]
   1cf88:	mov	r0, r6
   1cf8c:	bl	17cc4 <__assert_fail@plt+0x5700>
   1cf90:	mov	r4, r0
   1cf94:	mov	r3, #0
   1cf98:	str	r3, [r0, #40]	; 0x28
   1cf9c:	ldr	r2, [sp, #92]	; 0x5c
   1cfa0:	ldr	r1, [sp, #88]	; 0x58
   1cfa4:	str	r1, [r0, #48]	; 0x30
   1cfa8:	str	r2, [r0, #52]	; 0x34
   1cfac:	str	r3, [r0, #44]	; 0x2c
   1cfb0:	ldr	r0, [sp, #88]	; 0x58
   1cfb4:	bl	1b378 <__assert_fail@plt+0x8db4>
   1cfb8:	vstr	s0, [r4, #28]
   1cfbc:	b	1cf78 <__assert_fail@plt+0xa9b4>
   1cfc0:	push	{r4, r5, r6, lr}
   1cfc4:	sub	sp, sp, #216	; 0xd8
   1cfc8:	mov	r6, r0
   1cfcc:	mov	r4, r1
   1cfd0:	mov	r5, r2
   1cfd4:	add	r0, sp, #112	; 0x70
   1cfd8:	bl	17f50 <__assert_fail@plt+0x598c>
   1cfdc:	add	r3, sp, #4
   1cfe0:	add	r2, sp, #112	; 0x70
   1cfe4:	mov	r1, r5
   1cfe8:	mov	r0, r4
   1cfec:	bl	1cdd0 <__assert_fail@plt+0xa80c>
   1cff0:	subs	r4, r0, #0
   1cff4:	bne	1d004 <__assert_fail@plt+0xaa40>
   1cff8:	mov	r0, r4
   1cffc:	add	sp, sp, #216	; 0xd8
   1d000:	pop	{r4, r5, r6, pc}
   1d004:	add	r0, sp, #8
   1d008:	bl	17f50 <__assert_fail@plt+0x598c>
   1d00c:	ldr	r3, [pc, #364]	; 1d180 <__assert_fail@plt+0xabbc>
   1d010:	ldr	r3, [r3, #48]	; 0x30
   1d014:	cmp	r3, #0
   1d018:	bne	1d0dc <__assert_fail@plt+0xab18>
   1d01c:	ldr	r3, [pc, #348]	; 1d180 <__assert_fail@plt+0xabbc>
   1d020:	ldrb	r3, [r3, #56]	; 0x38
   1d024:	cmp	r3, #0
   1d028:	bne	1d178 <__assert_fail@plt+0xabb4>
   1d02c:	ldr	r3, [sp, #128]	; 0x80
   1d030:	and	r3, r3, #61440	; 0xf000
   1d034:	cmp	r3, #40960	; 0xa000
   1d038:	movne	r1, #0
   1d03c:	bne	1d0e0 <__assert_fail@plt+0xab1c>
   1d040:	mvn	r5, #1
   1d044:	b	1d0a0 <__assert_fail@plt+0xaadc>
   1d048:	bl	12318 <__errno_location@plt>
   1d04c:	ldr	r1, [sp, #4]
   1d050:	ldr	r0, [r0]
   1d054:	bl	18dd0 <__assert_fail@plt+0x680c>
   1d058:	bl	12318 <__errno_location@plt>
   1d05c:	ldr	r1, [sp, #4]
   1d060:	ldr	r0, [r0]
   1d064:	bl	18dd0 <__assert_fail@plt+0x680c>
   1d068:	mov	r0, r5
   1d06c:	bl	1257c <close@plt>
   1d070:	mvn	r5, #0
   1d074:	b	1d0a0 <__assert_fail@plt+0xaadc>
   1d078:	ldrd	r2, [sp, #104]	; 0x68
   1d07c:	ldrd	r0, [sp, #208]	; 0xd0
   1d080:	cmp	r1, r3
   1d084:	cmpeq	r0, r2
   1d088:	bne	1d168 <__assert_fail@plt+0xaba4>
   1d08c:	b	1d0a0 <__assert_fail@plt+0xaadc>
   1d090:	mov	r2, #104	; 0x68
   1d094:	add	r1, sp, #8
   1d098:	add	r0, sp, #112	; 0x70
   1d09c:	bl	12000 <memcpy@plt>
   1d0a0:	ldr	r1, [sp, #4]
   1d0a4:	mov	r0, r6
   1d0a8:	bl	17cc4 <__assert_fail@plt+0x5700>
   1d0ac:	ldrd	r2, [sp, #208]	; 0xd0
   1d0b0:	strd	r2, [r0, #40]	; 0x28
   1d0b4:	ldrd	r2, [sp, #112]	; 0x70
   1d0b8:	strd	r2, [r0, #48]	; 0x30
   1d0bc:	str	r5, [r0, #56]	; 0x38
   1d0c0:	mov	r3, #0
   1d0c4:	strb	r3, [r0, #19]
   1d0c8:	mov	r3, #1
   1d0cc:	strb	r3, [r0, #18]
   1d0d0:	ldr	r3, [pc, #172]	; 1d184 <__assert_fail@plt+0xabc0>
   1d0d4:	str	r3, [r0, #28]
   1d0d8:	b	1cff8 <__assert_fail@plt+0xaa34>
   1d0dc:	mov	r1, #0
   1d0e0:	ldr	r0, [sp, #4]
   1d0e4:	bl	20114 <__assert_fail@plt+0xdb50>
   1d0e8:	subs	r5, r0, #0
   1d0ec:	blt	1d0a0 <__assert_fail@plt+0xaadc>
   1d0f0:	add	r2, sp, #8
   1d0f4:	mov	r1, r5
   1d0f8:	mov	r0, #3
   1d0fc:	bl	1212c <__fxstat64@plt>
   1d100:	cmp	r0, #0
   1d104:	bne	1d048 <__assert_fail@plt+0xaa84>
   1d108:	ldr	r3, [pc, #112]	; 1d180 <__assert_fail@plt+0xabbc>
   1d10c:	ldr	r3, [r3, #52]	; 0x34
   1d110:	add	r1, sp, #112	; 0x70
   1d114:	ldr	r0, [sp, #4]
   1d118:	blx	r3
   1d11c:	cmp	r0, #0
   1d120:	bne	1d058 <__assert_fail@plt+0xaa94>
   1d124:	ldr	r3, [pc, #84]	; 1d180 <__assert_fail@plt+0xabbc>
   1d128:	ldr	r3, [r3, #48]	; 0x30
   1d12c:	cmp	r3, #0
   1d130:	bne	1d090 <__assert_fail@plt+0xaacc>
   1d134:	ldr	r3, [pc, #68]	; 1d180 <__assert_fail@plt+0xabbc>
   1d138:	ldrb	r3, [r3, #56]	; 0x38
   1d13c:	cmp	r3, #0
   1d140:	bne	1d090 <__assert_fail@plt+0xaacc>
   1d144:	ldr	r3, [sp, #128]	; 0x80
   1d148:	and	r3, r3, #61440	; 0xf000
   1d14c:	cmp	r3, #40960	; 0xa000
   1d150:	beq	1d068 <__assert_fail@plt+0xaaa4>
   1d154:	ldrd	r2, [sp, #8]
   1d158:	ldrd	r0, [sp, #112]	; 0x70
   1d15c:	cmp	r1, r3
   1d160:	cmpeq	r0, r2
   1d164:	beq	1d078 <__assert_fail@plt+0xaab4>
   1d168:	mov	r0, r5
   1d16c:	bl	1257c <close@plt>
   1d170:	mvn	r5, #0
   1d174:	b	1d0a0 <__assert_fail@plt+0xaadc>
   1d178:	mov	r1, #32768	; 0x8000
   1d17c:	b	1d0e0 <__assert_fail@plt+0xab1c>
   1d180:	andeq	r9, r5, ip, ror #28
   1d184:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d188:	push	{r4, r5, r6, lr}
   1d18c:	sub	sp, sp, #8
   1d190:	mov	r6, r0
   1d194:	mov	r4, r1
   1d198:	mov	r5, r2
   1d19c:	add	r2, sp, #4
   1d1a0:	mov	r1, r5
   1d1a4:	mov	r0, r4
   1d1a8:	bl	1b448 <__assert_fail@plt+0x8e84>
   1d1ac:	cmp	r0, #0
   1d1b0:	bne	1d1bc <__assert_fail@plt+0xabf8>
   1d1b4:	add	sp, sp, #8
   1d1b8:	pop	{r4, r5, r6, pc}
   1d1bc:	ldr	r0, [sp, #4]
   1d1c0:	bl	20edc <__assert_fail@plt+0xe918>
   1d1c4:	ldr	r3, [pc, #20]	; 1d1e0 <__assert_fail@plt+0xac1c>
   1d1c8:	str	r0, [r3, #60]	; 0x3c
   1d1cc:	mov	r2, r5
   1d1d0:	mov	r1, r4
   1d1d4:	mov	r0, r6
   1d1d8:	bl	1b808 <__assert_fail@plt+0x9244>
   1d1dc:	b	1d1b4 <__assert_fail@plt+0xabf0>
   1d1e0:	andeq	r9, r5, ip, ror #28
   1d1e4:	push	{r4, r5, r6, r7, r8, lr}
   1d1e8:	sub	sp, sp, #16
   1d1ec:	mov	r4, r2
   1d1f0:	mov	r8, r3
   1d1f4:	add	r2, sp, #12
   1d1f8:	bl	1b448 <__assert_fail@plt+0x8e84>
   1d1fc:	subs	r5, r0, #0
   1d200:	bne	1d210 <__assert_fail@plt+0xac4c>
   1d204:	mov	r0, r5
   1d208:	add	sp, sp, #16
   1d20c:	pop	{r4, r5, r6, r7, r8, pc}
   1d210:	ldr	r2, [sp, #12]
   1d214:	ldr	r1, [pc, #168]	; 1d2c4 <__assert_fail@plt+0xad00>
   1d218:	mov	r0, r4
   1d21c:	bl	17c8c <__assert_fail@plt+0x56c8>
   1d220:	mov	r6, r0
   1d224:	mov	r7, #0
   1d228:	strb	r7, [r0, #19]
   1d22c:	strb	r7, [r0, #18]
   1d230:	mov	r0, #32
   1d234:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1d238:	mov	r4, r0
   1d23c:	str	r0, [r6, #40]	; 0x28
   1d240:	mov	r0, #100	; 0x64
   1d244:	str	r0, [r4, #4]
   1d248:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1d24c:	str	r0, [r4]
   1d250:	str	r7, [r4, #16]
   1d254:	mov	r0, r8
   1d258:	bl	3dd64 <__assert_fail@plt+0x2b7a0>
   1d25c:	str	r8, [r4, #12]
   1d260:	str	r7, [r4, #20]
   1d264:	ldr	r7, [sp, #12]
   1d268:	mov	r0, r7
   1d26c:	bl	122d0 <strlen@plt>
   1d270:	mov	r2, r4
   1d274:	mov	r1, r0
   1d278:	mov	r0, r7
   1d27c:	bl	3dcec <__assert_fail@plt+0x2b728>
   1d280:	subs	r4, r0, #0
   1d284:	bne	1d29c <__assert_fail@plt+0xacd8>
   1d288:	mov	r1, #1
   1d28c:	ldr	r0, [sp, #12]
   1d290:	bl	1bedc <__assert_fail@plt+0x9918>
   1d294:	vstr	s0, [r6, #28]
   1d298:	b	1d204 <__assert_fail@plt+0xac40>
   1d29c:	mov	r2, #5
   1d2a0:	ldr	r1, [pc, #32]	; 1d2c8 <__assert_fail@plt+0xad04>
   1d2a4:	mov	r0, #0
   1d2a8:	bl	12084 <dcgettext@plt>
   1d2ac:	str	r4, [sp]
   1d2b0:	ldr	r3, [sp, #12]
   1d2b4:	mov	r2, r0
   1d2b8:	mov	r1, #0
   1d2bc:	mov	r0, #1
   1d2c0:	bl	121bc <error@plt>
   1d2c4:	andeq	r4, r1, r4, lsr r7
   1d2c8:	andeq	r5, r4, r8, lsr #18
   1d2cc:	push	{r4, lr}
   1d2d0:	mov	ip, r1
   1d2d4:	mov	r1, r2
   1d2d8:	ldr	r3, [pc, #16]	; 1d2f0 <__assert_fail@plt+0xad2c>
   1d2dc:	ldr	r3, [r3, #60]	; 0x3c
   1d2e0:	mov	r2, r0
   1d2e4:	mov	r0, ip
   1d2e8:	bl	1d1e4 <__assert_fail@plt+0xac20>
   1d2ec:	pop	{r4, pc}
   1d2f0:	andeq	r9, r5, ip, ror #28
   1d2f4:	push	{r4, lr}
   1d2f8:	mov	ip, r1
   1d2fc:	mov	r1, r2
   1d300:	ldr	r3, [pc, #20]	; 1d31c <__assert_fail@plt+0xad58>
   1d304:	ldr	r3, [r3, #60]	; 0x3c
   1d308:	orr	r3, r3, #4194304	; 0x400000
   1d30c:	mov	r2, r0
   1d310:	mov	r0, ip
   1d314:	bl	1d1e4 <__assert_fail@plt+0xac20>
   1d318:	pop	{r4, pc}
   1d31c:	andeq	r9, r5, ip, ror #28
   1d320:	push	{r4, r5, r6, lr}
   1d324:	mov	r5, r0
   1d328:	mov	r4, r1
   1d32c:	mov	r0, #0
   1d330:	str	r0, [r1]
   1d334:	bl	2b910 <__assert_fail@plt+0x1934c>
   1d338:	str	r0, [r4, #16]
   1d33c:	ldr	r1, [pc, #184]	; 1d3fc <__assert_fail@plt+0xae38>
   1d340:	mov	r0, r5
   1d344:	bl	11f1c <strcmp@plt>
   1d348:	cmp	r0, #0
   1d34c:	beq	1d3ac <__assert_fail@plt+0xade8>
   1d350:	ldr	r1, [pc, #168]	; 1d400 <__assert_fail@plt+0xae3c>
   1d354:	mov	r0, r5
   1d358:	bl	11f1c <strcmp@plt>
   1d35c:	cmp	r0, #0
   1d360:	beq	1d3cc <__assert_fail@plt+0xae08>
   1d364:	mov	r1, r5
   1d368:	ldr	r3, [pc, #148]	; 1d404 <__assert_fail@plt+0xae40>
   1d36c:	ldr	r0, [r3, #36]	; 0x24
   1d370:	bl	190f0 <__assert_fail@plt+0x6b2c>
   1d374:	str	r0, [r4, #4]
   1d378:	str	r5, [r4, #8]
   1d37c:	cmp	r0, #0
   1d380:	beq	1d3ec <__assert_fail@plt+0xae28>
   1d384:	ldr	r0, [r4, #4]
   1d388:	bl	12390 <fileno@plt>
   1d38c:	cmn	r0, #1
   1d390:	moveq	r0, #0
   1d394:	beq	1d3a4 <__assert_fail@plt+0xade0>
   1d398:	bl	12534 <isatty@plt>
   1d39c:	adds	r0, r0, #0
   1d3a0:	movne	r0, #1
   1d3a4:	strb	r0, [r4, #12]
   1d3a8:	pop	{r4, r5, r6, pc}
   1d3ac:	ldr	r3, [pc, #84]	; 1d408 <__assert_fail@plt+0xae44>
   1d3b0:	ldr	r3, [r3]
   1d3b4:	str	r3, [r4, #4]
   1d3b8:	mov	r2, #5
   1d3bc:	ldr	r1, [pc, #72]	; 1d40c <__assert_fail@plt+0xae48>
   1d3c0:	bl	12084 <dcgettext@plt>
   1d3c4:	str	r0, [r4, #8]
   1d3c8:	b	1d384 <__assert_fail@plt+0xadc0>
   1d3cc:	ldr	r3, [pc, #60]	; 1d410 <__assert_fail@plt+0xae4c>
   1d3d0:	ldr	r3, [r3]
   1d3d4:	str	r3, [r4, #4]
   1d3d8:	mov	r2, #5
   1d3dc:	ldr	r1, [pc, #48]	; 1d414 <__assert_fail@plt+0xae50>
   1d3e0:	bl	12084 <dcgettext@plt>
   1d3e4:	str	r0, [r4, #8]
   1d3e8:	b	1d384 <__assert_fail@plt+0xadc0>
   1d3ec:	bl	12318 <__errno_location@plt>
   1d3f0:	mov	r1, r5
   1d3f4:	ldr	r0, [r0]
   1d3f8:	bl	18f60 <__assert_fail@plt+0x699c>
   1d3fc:	andeq	r5, r4, r8, asr r9
   1d400:	andeq	r5, r4, r4, ror r9
   1d404:	andeq	r9, r5, r0, asr #28
   1d408:	andeq	r9, r5, r8, asr #10
   1d40c:	andeq	r5, r4, r4, ror #18
   1d410:	andeq	r9, r5, r4, asr r5
   1d414:	andeq	r4, r4, r4, lsr #13
   1d418:	push	{r4, r5, r6, lr}
   1d41c:	sub	sp, sp, #24
   1d420:	mov	r5, r0
   1d424:	mov	r0, r1
   1d428:	mov	r4, r2
   1d42c:	ldr	r6, [r2]
   1d430:	add	r2, sp, #20
   1d434:	mov	r1, r4
   1d438:	bl	1b40c <__assert_fail@plt+0x8e48>
   1d43c:	cmp	r0, #0
   1d440:	bne	1d44c <__assert_fail@plt+0xae88>
   1d444:	add	sp, sp, #24
   1d448:	pop	{r4, r5, r6, pc}
   1d44c:	mov	r1, sp
   1d450:	ldr	r0, [pc, #28]	; 1d474 <__assert_fail@plt+0xaeb0>
   1d454:	bl	1d320 <__assert_fail@plt+0xad5c>
   1d458:	ldr	r2, [sp, #20]
   1d45c:	mov	r1, r5
   1d460:	mov	r0, sp
   1d464:	bl	1ab10 <__assert_fail@plt+0x854c>
   1d468:	cmp	r0, #0
   1d46c:	streq	r6, [r4]
   1d470:	b	1d444 <__assert_fail@plt+0xae80>
   1d474:	andeq	r5, r4, r4, ror r9
   1d478:	push	{r4, r5, r6, r7, lr}
   1d47c:	sub	sp, sp, #36	; 0x24
   1d480:	mov	r7, r0
   1d484:	mov	r5, r1
   1d488:	mov	r4, r2
   1d48c:	ldr	r6, [r2]
   1d490:	add	r2, sp, #28
   1d494:	mov	r1, r4
   1d498:	mov	r0, r5
   1d49c:	bl	1b448 <__assert_fail@plt+0x8e84>
   1d4a0:	cmp	r0, #0
   1d4a4:	bne	1d4b8 <__assert_fail@plt+0xaef4>
   1d4a8:	str	r6, [r4]
   1d4ac:	mov	r0, #0
   1d4b0:	add	sp, sp, #36	; 0x24
   1d4b4:	pop	{r4, r5, r6, r7, pc}
   1d4b8:	add	r2, sp, #24
   1d4bc:	mov	r1, r4
   1d4c0:	mov	r0, r5
   1d4c4:	bl	1b40c <__assert_fail@plt+0x8e48>
   1d4c8:	cmp	r0, #0
   1d4cc:	beq	1d4a8 <__assert_fail@plt+0xaee4>
   1d4d0:	add	r1, sp, #4
   1d4d4:	ldr	r0, [sp, #28]
   1d4d8:	bl	1d320 <__assert_fail@plt+0xad5c>
   1d4dc:	ldr	r6, [r4]
   1d4e0:	ldr	r2, [sp, #24]
   1d4e4:	mov	r1, r7
   1d4e8:	add	r0, sp, #4
   1d4ec:	bl	1ab10 <__assert_fail@plt+0x854c>
   1d4f0:	cmp	r0, #0
   1d4f4:	beq	1d4a8 <__assert_fail@plt+0xaee4>
   1d4f8:	b	1d4b0 <__assert_fail@plt+0xaeec>
   1d4fc:	push	{r4, r5, lr}
   1d500:	sub	sp, sp, #12
   1d504:	mov	r4, r0
   1d508:	mov	r0, r1
   1d50c:	mov	r1, r2
   1d510:	add	r2, sp, #4
   1d514:	bl	1b448 <__assert_fail@plt+0x8e84>
   1d518:	subs	r5, r0, #0
   1d51c:	bne	1d52c <__assert_fail@plt+0xaf68>
   1d520:	mov	r0, r5
   1d524:	add	sp, sp, #12
   1d528:	pop	{r4, r5, pc}
   1d52c:	ldr	r1, [sp, #4]
   1d530:	mov	r0, r4
   1d534:	bl	17cc4 <__assert_fail@plt+0x5700>
   1d538:	mov	r4, r0
   1d53c:	add	r1, r0, #40	; 0x28
   1d540:	ldr	r0, [sp, #4]
   1d544:	bl	1d320 <__assert_fail@plt+0xad5c>
   1d548:	mov	r3, #1
   1d54c:	strb	r3, [r4, #17]
   1d550:	strb	r3, [r4, #16]
   1d554:	mov	r3, #0
   1d558:	strb	r3, [r4, #19]
   1d55c:	strb	r3, [r4, #18]
   1d560:	mov	r3, #1065353216	; 0x3f800000
   1d564:	str	r3, [r4, #28]
   1d568:	b	1d520 <__assert_fail@plt+0xaf5c>
   1d56c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d570:	sub	sp, sp, #24
   1d574:	mov	r9, r0
   1d578:	mov	r0, r1
   1d57c:	mov	r1, r2
   1d580:	add	r2, sp, #12
   1d584:	bl	1b448 <__assert_fail@plt+0x8e84>
   1d588:	subs	r7, r0, #0
   1d58c:	beq	1d67c <__assert_fail@plt+0xb0b8>
   1d590:	ldr	r3, [sp, #12]
   1d594:	ldrb	r2, [r3]
   1d598:	cmp	r2, #45	; 0x2d
   1d59c:	beq	1d688 <__assert_fail@plt+0xb0c4>
   1d5a0:	cmp	r2, #47	; 0x2f
   1d5a4:	moveq	r8, #1
   1d5a8:	moveq	r0, r8
   1d5ac:	ldreq	sl, [pc, #356]	; 1d718 <__assert_fail@plt+0xb154>
   1d5b0:	movne	r8, #2
   1d5b4:	movne	r0, #0
   1d5b8:	ldrne	sl, [pc, #348]	; 1d71c <__assert_fail@plt+0xb158>
   1d5bc:	add	r0, r3, r0
   1d5c0:	bl	25310 <__assert_fail@plt+0x12d4c>
   1d5c4:	subs	r6, r0, #0
   1d5c8:	beq	1d6ac <__assert_fail@plt+0xb0e8>
   1d5cc:	ldr	r3, [sp, #12]
   1d5d0:	ldrb	r2, [r3]
   1d5d4:	cmp	r2, #43	; 0x2b
   1d5d8:	beq	1d698 <__assert_fail@plt+0xb0d4>
   1d5dc:	mov	r4, #0
   1d5e0:	str	r4, [sp]
   1d5e4:	mov	r3, r6
   1d5e8:	mov	r2, r4
   1d5ec:	mov	r1, r4
   1d5f0:	mov	r0, r4
   1d5f4:	bl	25720 <__assert_fail@plt+0x1315c>
   1d5f8:	mov	r5, r0
   1d5fc:	str	r0, [sp, #16]
   1d600:	str	r4, [sp]
   1d604:	mov	r3, r6
   1d608:	mov	r2, r4
   1d60c:	mov	r1, #1
   1d610:	mov	r0, r4
   1d614:	bl	25720 <__assert_fail@plt+0x1315c>
   1d618:	mov	r4, r0
   1d61c:	str	r0, [sp, #20]
   1d620:	mov	r0, r6
   1d624:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1d628:	ldr	r3, [sp, #12]
   1d62c:	ldrb	r3, [r3]
   1d630:	cmp	r5, #0
   1d634:	cmpeq	r4, #0
   1d638:	moveq	r5, #1
   1d63c:	movne	r5, #0
   1d640:	cmp	r3, #47	; 0x2f
   1d644:	movne	r5, #0
   1d648:	andeq	r5, r5, #1
   1d64c:	cmp	r5, #0
   1d650:	bne	1d6e8 <__assert_fail@plt+0xb124>
   1d654:	ldr	r1, [sp, #12]
   1d658:	mov	r0, r9
   1d65c:	bl	17cc4 <__assert_fail@plt+0x5700>
   1d660:	mov	r3, r0
   1d664:	str	sl, [r0, #28]
   1d668:	str	r8, [r0, #40]	; 0x28
   1d66c:	add	r2, sp, #16
   1d670:	ldm	r2!, {r0, r1}
   1d674:	str	r0, [r3, #44]	; 0x2c
   1d678:	str	r1, [r3, #48]	; 0x30
   1d67c:	mov	r0, r7
   1d680:	add	sp, sp, #24
   1d684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d688:	mov	r8, #0
   1d68c:	mov	r0, #1
   1d690:	ldr	sl, [pc, #136]	; 1d720 <__assert_fail@plt+0xb15c>
   1d694:	b	1d5bc <__assert_fail@plt+0xaff8>
   1d698:	ldrb	r3, [r3, #1]
   1d69c:	sub	r3, r3, #48	; 0x30
   1d6a0:	uxtb	r3, r3
   1d6a4:	cmp	r3, #7
   1d6a8:	bhi	1d5dc <__assert_fail@plt+0xb018>
   1d6ac:	mov	r2, #5
   1d6b0:	ldr	r1, [pc, #108]	; 1d724 <__assert_fail@plt+0xb160>
   1d6b4:	mov	r0, #0
   1d6b8:	bl	12084 <dcgettext@plt>
   1d6bc:	mov	r4, r0
   1d6c0:	ldr	r2, [sp, #12]
   1d6c4:	ldr	r3, [pc, #92]	; 1d728 <__assert_fail@plt+0xb164>
   1d6c8:	ldr	r1, [r3, #72]	; 0x48
   1d6cc:	mov	r0, #0
   1d6d0:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1d6d4:	mov	r3, r0
   1d6d8:	mov	r2, r4
   1d6dc:	mov	r1, #0
   1d6e0:	mov	r0, #1
   1d6e4:	bl	121bc <error@plt>
   1d6e8:	mov	r2, #5
   1d6ec:	ldr	r1, [pc, #56]	; 1d72c <__assert_fail@plt+0xb168>
   1d6f0:	mov	r0, #0
   1d6f4:	bl	12084 <dcgettext@plt>
   1d6f8:	ldr	r3, [sp, #12]
   1d6fc:	mov	r2, r0
   1d700:	mov	r1, #0
   1d704:	mov	r0, r1
   1d708:	bl	121bc <error@plt>
   1d70c:	mov	r8, #0
   1d710:	ldr	sl, [pc, #24]	; 1d730 <__assert_fail@plt+0xb16c>
   1d714:	b	1d654 <__assert_fail@plt+0xb090>
   1d718:			; <UNDEFINED> instruction: 0x3e99999a
   1d71c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d720:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d724:	andeq	r5, r4, r0, lsl #19
   1d728:	andeq	r9, r5, ip, ror #28
   1d72c:	muleq	r4, r0, r9
   1d730:	svccc	0x007fa440
   1d734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d738:	sub	sp, sp, #76	; 0x4c
   1d73c:	subs	r9, r2, #0
   1d740:	beq	1dd34 <__assert_fail@plt+0xb770>
   1d744:	ldr	r2, [r3]
   1d748:	ldr	r2, [r9, r2, lsl #2]
   1d74c:	cmp	r2, #0
   1d750:	beq	1dd3c <__assert_fail@plt+0xb778>
   1d754:	str	r3, [sp, #24]
   1d758:	mov	r3, r1
   1d75c:	mov	r8, r0
   1d760:	ldr	r2, [r1, #12]
   1d764:	mov	r4, r2
   1d768:	str	r2, [sp, #28]
   1d76c:	ldr	r2, [pc, #1488]	; 1dd44 <__assert_fail@plt+0xb780>
   1d770:	mov	r1, r4
   1d774:	mov	r0, r3
   1d778:	bl	17c8c <__assert_fail@plt+0x56c8>
   1d77c:	mov	fp, r0
   1d780:	mov	r3, #1
   1d784:	strb	r3, [r0, #17]
   1d788:	strb	r3, [r0, #16]
   1d78c:	mov	r3, #0
   1d790:	strb	r3, [r0, #18]
   1d794:	strb	r3, [r0, #19]
   1d798:	str	r3, [r0, #144]	; 0x90
   1d79c:	ldr	r2, [pc, #1444]	; 1dd48 <__assert_fail@plt+0xb784>
   1d7a0:	ldr	r3, [pc, #1444]	; 1dd4c <__assert_fail@plt+0xb788>
   1d7a4:	cmp	r4, r2
   1d7a8:	cmpne	r4, r3
   1d7ac:	movne	r3, #1
   1d7b0:	moveq	r3, #0
   1d7b4:	str	r3, [sp, #20]
   1d7b8:	movne	r3, #0
   1d7bc:	moveq	r3, #1
   1d7c0:	ldreq	r2, [pc, #1416]	; 1dd50 <__assert_fail@plt+0xb78c>
   1d7c4:	strbeq	r3, [r2, #80]	; 0x50
   1d7c8:	strb	r3, [r0, #140]	; 0x8c
   1d7cc:	ldr	r2, [pc, #1400]	; 1dd4c <__assert_fail@plt+0xb788>
   1d7d0:	ldr	r3, [pc, #1404]	; 1dd54 <__assert_fail@plt+0xb790>
   1d7d4:	ldr	r1, [sp, #28]
   1d7d8:	cmp	r1, r3
   1d7dc:	cmpne	r1, r2
   1d7e0:	moveq	r3, #1
   1d7e4:	movne	r3, #0
   1d7e8:	str	r3, [sp, #32]
   1d7ec:	beq	1d85c <__assert_fail@plt+0xb298>
   1d7f0:	ldr	r3, [pc, #1376]	; 1dd58 <__assert_fail@plt+0xb794>
   1d7f4:	ldr	r3, [r3]
   1d7f8:	cmp	r3, #0
   1d7fc:	strne	r3, [r0, #144]	; 0x90
   1d800:	beq	1d970 <__assert_fail@plt+0xb3ac>
   1d804:	mov	r3, #0
   1d808:	strb	r3, [fp, #40]	; 0x28
   1d80c:	ldr	r3, [sp, #24]
   1d810:	ldr	r3, [r3]
   1d814:	str	r3, [sp, #40]	; 0x28
   1d818:	lsl	sl, r3, #2
   1d81c:	add	r5, r9, sl
   1d820:	ldr	r4, [r9, r3, lsl #2]
   1d824:	cmp	r4, #0
   1d828:	beq	1dae0 <__assert_fail@plt+0xb51c>
   1d82c:	str	r5, [sp, #44]	; 0x2c
   1d830:	sub	sl, sl, r5
   1d834:	mov	r7, r5
   1d838:	mov	r6, r3
   1d83c:	mov	r3, #0
   1d840:	mov	r2, r3
   1d844:	str	r3, [sp, #16]
   1d848:	mov	r8, r3
   1d84c:	add	sl, sl, #4
   1d850:	str	fp, [sp, #36]	; 0x24
   1d854:	ldr	fp, [sp, #32]
   1d858:	b	1d9cc <__assert_fail@plt+0xb408>
   1d85c:	mov	r3, #0
   1d860:	str	r3, [r0, #144]	; 0x90
   1d864:	ldr	r2, [pc, #1252]	; 1dd50 <__assert_fail@plt+0xb78c>
   1d868:	strb	r3, [r2, #14]
   1d86c:	ldr	r0, [pc, #1256]	; 1dd5c <__assert_fail@plt+0xb798>
   1d870:	bl	121f8 <getenv@plt>
   1d874:	subs	r4, r0, #0
   1d878:	beq	1d804 <__assert_fail@plt+0xb240>
   1d87c:	add	r3, sp, #52	; 0x34
   1d880:	str	r3, [sp]
   1d884:	add	r3, sp, #48	; 0x30
   1d888:	mov	r2, #1
   1d88c:	ldr	r1, [pc, #1228]	; 1dd60 <__assert_fail@plt+0xb79c>
   1d890:	mov	r0, r4
   1d894:	bl	21214 <__assert_fail@plt+0xec50>
   1d898:	ldr	r7, [pc, #1216]	; 1dd60 <__assert_fail@plt+0xb79c>
   1d89c:	add	r6, sp, #52	; 0x34
   1d8a0:	mov	r5, #0
   1d8a4:	b	1d8dc <__assert_fail@plt+0xb318>
   1d8a8:	ldr	r3, [sp, #48]	; 0x30
   1d8ac:	add	r0, r4, r3
   1d8b0:	ldrb	r3, [r4, r3]
   1d8b4:	cmp	r3, #47	; 0x2f
   1d8b8:	bne	1d924 <__assert_fail@plt+0xb360>
   1d8bc:	str	r6, [sp]
   1d8c0:	add	r3, sp, #48	; 0x30
   1d8c4:	mov	r2, r5
   1d8c8:	mov	r1, r7
   1d8cc:	mov	r0, r4
   1d8d0:	bl	21214 <__assert_fail@plt+0xec50>
   1d8d4:	cmp	r0, #0
   1d8d8:	beq	1d804 <__assert_fail@plt+0xb240>
   1d8dc:	ldr	r1, [sp, #52]	; 0x34
   1d8e0:	cmp	r1, #0
   1d8e4:	beq	1d900 <__assert_fail@plt+0xb33c>
   1d8e8:	cmp	r1, #1
   1d8ec:	bne	1d8a8 <__assert_fail@plt+0xb2e4>
   1d8f0:	ldr	r3, [sp, #48]	; 0x30
   1d8f4:	ldrb	r3, [r4, r3]
   1d8f8:	cmp	r3, #46	; 0x2e
   1d8fc:	bne	1d8a8 <__assert_fail@plt+0xb2e4>
   1d900:	mov	r2, #5
   1d904:	ldr	r1, [pc, #1112]	; 1dd64 <__assert_fail@plt+0xb7a0>
   1d908:	mov	r0, #0
   1d90c:	bl	12084 <dcgettext@plt>
   1d910:	mov	r3, r8
   1d914:	mov	r2, r0
   1d918:	mov	r1, #0
   1d91c:	mov	r0, #1
   1d920:	bl	121bc <error@plt>
   1d924:	bl	11fdc <strndup@plt>
   1d928:	mov	r5, r0
   1d92c:	mov	r2, #5
   1d930:	ldr	r1, [pc, #1072]	; 1dd68 <__assert_fail@plt+0xb7a4>
   1d934:	mov	r0, #0
   1d938:	bl	12084 <dcgettext@plt>
   1d93c:	mov	r6, r0
   1d940:	cmp	r5, #0
   1d944:	ldreq	r1, [sp, #48]	; 0x30
   1d948:	addeq	r1, r4, r1
   1d94c:	movne	r1, r5
   1d950:	mov	r0, #0
   1d954:	bl	18a20 <__assert_fail@plt+0x645c>
   1d958:	str	r8, [sp]
   1d95c:	mov	r3, r0
   1d960:	mov	r2, r6
   1d964:	mov	r1, #0
   1d968:	mov	r0, #1
   1d96c:	bl	121bc <error@plt>
   1d970:	ldr	r3, [pc, #1012]	; 1dd6c <__assert_fail@plt+0xb7a8>
   1d974:	ldr	r2, [pc, #1012]	; 1dd70 <__assert_fail@plt+0xb7ac>
   1d978:	ldr	r1, [pc, #1012]	; 1dd74 <__assert_fail@plt+0xb7b0>
   1d97c:	ldr	r0, [pc, #1012]	; 1dd78 <__assert_fail@plt+0xb7b4>
   1d980:	bl	125c4 <__assert_fail@plt>
   1d984:	mov	r2, #5
   1d988:	ldr	r1, [pc, #1004]	; 1dd7c <__assert_fail@plt+0xb7b8>
   1d98c:	mov	r0, #0
   1d990:	bl	12084 <dcgettext@plt>
   1d994:	mov	r2, r0
   1d998:	mov	r1, #0
   1d99c:	mov	r0, #1
   1d9a0:	bl	121bc <error@plt>
   1d9a4:	mov	r2, #0
   1d9a8:	b	1d9b4 <__assert_fail@plt+0xb3f0>
   1d9ac:	str	r4, [sp, #16]
   1d9b0:	mov	r2, #1
   1d9b4:	add	r6, r6, #1
   1d9b8:	add	r5, r5, sl
   1d9bc:	add	r5, r9, r5
   1d9c0:	ldr	r4, [r7, #4]!
   1d9c4:	cmp	r4, #0
   1d9c8:	beq	1dae8 <__assert_fail@plt+0xb524>
   1d9cc:	ldrb	r3, [r4]
   1d9d0:	cmp	r3, #59	; 0x3b
   1d9d4:	beq	1da18 <__assert_fail@plt+0xb454>
   1d9d8:	ldr	r1, [sp, #20]
   1d9dc:	cmp	r3, #43	; 0x2b
   1d9e0:	movne	r1, #0
   1d9e4:	andeq	r1, r1, #1
   1d9e8:	cmp	r1, #0
   1d9ec:	beq	1da24 <__assert_fail@plt+0xb460>
   1d9f0:	ldrb	r3, [r4, #1]
   1d9f4:	cmp	r3, #0
   1d9f8:	movne	r2, #0
   1d9fc:	andeq	r2, r2, #1
   1da00:	cmp	r2, #0
   1da04:	beq	1da24 <__assert_fail@plt+0xb460>
   1da08:	ldr	fp, [sp, #36]	; 0x24
   1da0c:	mov	r3, #1
   1da10:	strb	r3, [fp, #40]	; 0x28
   1da14:	b	1da5c <__assert_fail@plt+0xb498>
   1da18:	ldrb	r3, [r4, #1]
   1da1c:	cmp	r3, #0
   1da20:	beq	1da58 <__assert_fail@plt+0xb494>
   1da24:	ldr	r1, [pc, #852]	; 1dd80 <__assert_fail@plt+0xb7bc>
   1da28:	mov	r0, r4
   1da2c:	bl	243a4 <__assert_fail@plt+0x11de0>
   1da30:	cmp	r0, #0
   1da34:	beq	1d9a4 <__assert_fail@plt+0xb3e0>
   1da38:	add	r8, r8, #1
   1da3c:	cmp	r6, #0
   1da40:	bne	1d9ac <__assert_fail@plt+0xb3e8>
   1da44:	cmp	fp, #0
   1da48:	bne	1d984 <__assert_fail@plt+0xb3c0>
   1da4c:	str	r4, [sp, #16]
   1da50:	mov	r2, #1
   1da54:	b	1d9b4 <__assert_fail@plt+0xb3f0>
   1da58:	ldr	fp, [sp, #36]	; 0x24
   1da5c:	ldr	r3, [sp, #40]	; 0x28
   1da60:	cmp	r3, r6
   1da64:	beq	1daec <__assert_fail@plt+0xb528>
   1da68:	ldr	r3, [r5]
   1da6c:	cmp	r3, #0
   1da70:	beq	1daec <__assert_fail@plt+0xb528>
   1da74:	ldrb	r3, [fp, #40]	; 0x28
   1da78:	cmp	r3, #0
   1da7c:	beq	1db94 <__assert_fail@plt+0xb5d0>
   1da80:	ldr	r3, [pc, #764]	; 1dd84 <__assert_fail@plt+0xb7c0>
   1da84:	ldr	r4, [pc, #764]	; 1dd88 <__assert_fail@plt+0xb7c4>
   1da88:	ldr	r2, [pc, #708]	; 1dd54 <__assert_fail@plt+0xb790>
   1da8c:	ldr	r1, [sp, #28]
   1da90:	cmp	r1, r2
   1da94:	movne	r4, r3
   1da98:	cmp	r8, #1
   1da9c:	bgt	1db04 <__assert_fail@plt+0xb540>
   1daa0:	ldr	r0, [sp, #16]
   1daa4:	bl	122d0 <strlen@plt>
   1daa8:	cmp	r0, #2
   1daac:	beq	1db94 <__assert_fail@plt+0xb5d0>
   1dab0:	mov	r3, r4
   1dab4:	ldr	r2, [pc, #720]	; 1dd8c <__assert_fail@plt+0xb7c8>
   1dab8:	mov	r1, #19
   1dabc:	add	r0, sp, #52	; 0x34
   1dac0:	bl	12330 <snprintf@plt>
   1dac4:	cmp	r0, #19
   1dac8:	bls	1db28 <__assert_fail@plt+0xb564>
   1dacc:	ldr	r3, [pc, #664]	; 1dd6c <__assert_fail@plt+0xb7a8>
   1dad0:	ldr	r2, [pc, #696]	; 1dd90 <__assert_fail@plt+0xb7cc>
   1dad4:	ldr	r1, [pc, #664]	; 1dd74 <__assert_fail@plt+0xb7b0>
   1dad8:	ldr	r0, [pc, #692]	; 1dd94 <__assert_fail@plt+0xb7d0>
   1dadc:	bl	125c4 <__assert_fail@plt>
   1dae0:	ldr	r6, [sp, #40]	; 0x28
   1dae4:	b	1daec <__assert_fail@plt+0xb528>
   1dae8:	ldr	fp, [sp, #36]	; 0x24
   1daec:	ldr	r3, [sp, #24]
   1daf0:	str	r6, [r3]
   1daf4:	mov	r0, fp
   1daf8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1dafc:	mov	r0, #0
   1db00:	b	1dc94 <__assert_fail@plt+0xb6d0>
   1db04:	mov	r2, #5
   1db08:	ldr	r1, [pc, #648]	; 1dd98 <__assert_fail@plt+0xb7d4>
   1db0c:	mov	r0, #0
   1db10:	bl	12084 <dcgettext@plt>
   1db14:	mov	r3, r4
   1db18:	mov	r2, r0
   1db1c:	mov	r1, #0
   1db20:	mov	r0, #1
   1db24:	bl	121bc <error@plt>
   1db28:	mov	r2, #5
   1db2c:	ldr	r1, [pc, #616]	; 1dd9c <__assert_fail@plt+0xb7d8>
   1db30:	mov	r0, #0
   1db34:	bl	12084 <dcgettext@plt>
   1db38:	mov	r5, r0
   1db3c:	ldr	r4, [pc, #524]	; 1dd50 <__assert_fail@plt+0xb78c>
   1db40:	add	r2, sp, #52	; 0x34
   1db44:	ldr	r1, [r4, #72]	; 0x48
   1db48:	mov	r0, #0
   1db4c:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1db50:	mov	r6, r0
   1db54:	ldr	r2, [pc, #548]	; 1dd80 <__assert_fail@plt+0xb7bc>
   1db58:	ldr	r1, [r4, #72]	; 0x48
   1db5c:	mov	r0, #1
   1db60:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1db64:	mov	r7, r0
   1db68:	ldr	r2, [sp, #16]
   1db6c:	ldr	r1, [r4, #72]	; 0x48
   1db70:	mov	r0, #2
   1db74:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1db78:	str	r0, [sp, #4]
   1db7c:	str	r7, [sp]
   1db80:	mov	r3, r6
   1db84:	mov	r2, r5
   1db88:	mov	r1, #0
   1db8c:	mov	r0, #1
   1db90:	bl	121bc <error@plt>
   1db94:	add	r8, fp, #44	; 0x2c
   1db98:	mov	r1, #2048	; 0x800
   1db9c:	mov	r0, r8
   1dba0:	bl	1f8d0 <__assert_fail@plt+0xd30c>
   1dba4:	sub	r0, r0, #1
   1dba8:	cmp	r0, #1
   1dbac:	bls	1dc9c <__assert_fail@plt+0xb6d8>
   1dbb0:	add	r4, fp, #40	; 0x28
   1dbb4:	mov	r0, r8
   1dbb8:	bl	1f990 <__assert_fail@plt+0xd3cc>
   1dbbc:	ldr	r3, [pc, #476]	; 1dda0 <__assert_fail@plt+0xb7dc>
   1dbc0:	str	r3, [fp, #76]	; 0x4c
   1dbc4:	ldrb	r3, [fp, #40]	; 0x28
   1dbc8:	cmp	r3, #0
   1dbcc:	beq	1dcbc <__assert_fail@plt+0xb6f8>
   1dbd0:	mov	r3, #0
   1dbd4:	str	r3, [fp, #132]	; 0x84
   1dbd8:	str	r3, [fp, #68]	; 0x44
   1dbdc:	str	r3, [fp, #64]	; 0x40
   1dbe0:	str	r3, [fp, #80]	; 0x50
   1dbe4:	str	r3, [fp, #84]	; 0x54
   1dbe8:	ldr	r7, [sp, #40]	; 0x28
   1dbec:	sub	r3, r6, r7
   1dbf0:	sub	r3, r3, #1
   1dbf4:	str	r3, [fp, #72]	; 0x48
   1dbf8:	add	fp, fp, #88	; 0x58
   1dbfc:	mov	r2, r4
   1dc00:	mov	r1, fp
   1dc04:	mov	r0, r8
   1dc08:	bl	1f9b8 <__assert_fail@plt+0xd3f4>
   1dc0c:	sub	r9, r6, #1
   1dc10:	mov	r3, r7
   1dc14:	cmp	r7, r9
   1dc18:	bge	1dc7c <__assert_fail@plt+0xb6b8>
   1dc1c:	mov	sl, #1
   1dc20:	mov	r7, #0
   1dc24:	str	r6, [sp, #16]
   1dc28:	mov	r6, fp
   1dc2c:	mov	r4, r3
   1dc30:	ldr	fp, [sp, #44]	; 0x2c
   1dc34:	str	r5, [sp, #20]
   1dc38:	mov	r5, r8
   1dc3c:	ldr	r8, [fp], #4
   1dc40:	mov	r0, r8
   1dc44:	bl	122d0 <strlen@plt>
   1dc48:	str	sl, [sp, #8]
   1dc4c:	str	r7, [sp, #4]
   1dc50:	str	r7, [sp]
   1dc54:	add	r3, r0, #1
   1dc58:	mov	r2, r8
   1dc5c:	mov	r1, r6
   1dc60:	mov	r0, r5
   1dc64:	bl	1f138 <__assert_fail@plt+0xcb74>
   1dc68:	add	r4, r4, #1
   1dc6c:	cmp	r4, r9
   1dc70:	blt	1dc3c <__assert_fail@plt+0xb678>
   1dc74:	ldr	r6, [sp, #16]
   1dc78:	ldr	r5, [sp, #20]
   1dc7c:	ldr	r3, [r5]
   1dc80:	cmp	r3, #0
   1dc84:	addne	r6, r6, #1
   1dc88:	ldr	r3, [sp, #24]
   1dc8c:	str	r6, [r3]
   1dc90:	mov	r0, #1
   1dc94:	add	sp, sp, #76	; 0x4c
   1dc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc9c:	mov	r2, #5
   1dca0:	ldr	r1, [pc, #252]	; 1dda4 <__assert_fail@plt+0xb7e0>
   1dca4:	mov	r0, #0
   1dca8:	bl	12084 <dcgettext@plt>
   1dcac:	mov	r2, r0
   1dcb0:	mov	r1, #0
   1dcb4:	mov	r0, #1
   1dcb8:	bl	121bc <error@plt>
   1dcbc:	ldr	r3, [sp, #40]	; 0x28
   1dcc0:	sub	r0, r6, r3
   1dcc4:	str	r0, [fp, #136]	; 0x88
   1dcc8:	ldr	r3, [pc, #176]	; 1dd80 <__assert_fail@plt+0xb7bc>
   1dccc:	str	r3, [fp, #68]	; 0x44
   1dcd0:	mov	r3, #2
   1dcd4:	str	r3, [fp, #64]	; 0x40
   1dcd8:	mov	r3, #0
   1dcdc:	str	r3, [fp, #80]	; 0x50
   1dce0:	str	r3, [fp, #84]	; 0x54
   1dce4:	lsl	r0, r0, #2
   1dce8:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1dcec:	str	r0, [fp, #132]	; 0x84
   1dcf0:	mov	r2, r4
   1dcf4:	add	r1, fp, #88	; 0x58
   1dcf8:	mov	r0, r8
   1dcfc:	bl	1f9b8 <__assert_fail@plt+0xd3f4>
   1dd00:	ldr	r3, [fp, #136]	; 0x88
   1dd04:	cmp	r3, #0
   1dd08:	ble	1dc7c <__assert_fail@plt+0xb6b8>
   1dd0c:	mov	r3, #0
   1dd10:	ldr	r2, [sp, #44]	; 0x2c
   1dd14:	ldr	r0, [r2], #4
   1dd18:	ldr	r1, [fp, #132]	; 0x84
   1dd1c:	str	r0, [r1, r3, lsl #2]
   1dd20:	add	r3, r3, #1
   1dd24:	ldr	r1, [fp, #136]	; 0x88
   1dd28:	cmp	r1, r3
   1dd2c:	bgt	1dd14 <__assert_fail@plt+0xb750>
   1dd30:	b	1dc7c <__assert_fail@plt+0xb6b8>
   1dd34:	mov	r0, #0
   1dd38:	b	1dc94 <__assert_fail@plt+0xb6d0>
   1dd3c:	mov	r0, #0
   1dd40:	b	1dc94 <__assert_fail@plt+0xb6d0>
   1dd44:	andeq	r5, r4, r4, ror sl
   1dd48:	andeq	r4, r1, r4, asr #10
   1dd4c:	andeq	r4, r1, r0, lsl #11
   1dd50:	andeq	r9, r5, ip, ror #28
   1dd54:			; <UNDEFINED> instruction: 0x00013fbc
   1dd58:	andeq	r9, r5, ip, ror #10
   1dd5c:	andeq	r5, r4, r8, lsr #24
   1dd60:	andeq	r2, r4, r0, asr #30
   1dd64:	andeq	r5, r4, ip, lsl #21
   1dd68:	andeq	r5, r4, r8, lsl #23
   1dd6c:	andeq	r5, r4, r4, lsl #6
   1dd70:	andeq	r0, r0, r9, ror fp
   1dd74:	andeq	r5, r4, r0, lsl r8
   1dd78:	andeq	r5, r4, r0, lsr ip
   1dd7c:	andeq	r5, r4, r8, asr #24
   1dd80:	andeq	r5, r4, r4, asr #24
   1dd84:	andeq	r4, r4, r0, lsl r3
   1dd88:	andeq	r6, r4, r4, lsl r3
   1dd8c:	strdeq	r5, [r4], -r4
   1dd90:	andeq	r0, r0, r6, asr #23
   1dd94:	andeq	r5, r4, r8, lsl #26
   1dd98:			; <UNDEFINED> instruction: 0x00045cbc
   1dd9c:	andeq	r5, r4, r0, lsr #26
   1dda0:	andeq	r5, r1, r0, lsr #9
   1dda4:	andeq	r5, r4, ip, asr sp
   1dda8:	push	{r4, lr}
   1ddac:	mov	r3, r2
   1ddb0:	mov	r2, r1
   1ddb4:	mov	r1, r0
   1ddb8:	ldr	r0, [pc, #4]	; 1ddc4 <__assert_fail@plt+0xb800>
   1ddbc:	bl	1d734 <__assert_fail@plt+0xb170>
   1ddc0:	pop	{r4, pc}
   1ddc4:			; <UNDEFINED> instruction: 0x00042ab8
   1ddc8:	push	{r4, lr}
   1ddcc:	mov	r3, r2
   1ddd0:	mov	r2, r1
   1ddd4:	mov	r1, r0
   1ddd8:	ldr	r0, [pc, #4]	; 1dde4 <__assert_fail@plt+0xb820>
   1dddc:	bl	1d734 <__assert_fail@plt+0xb170>
   1dde0:	pop	{r4, pc}
   1dde4:	andeq	r5, r4, r8, lsl #27
   1dde8:	push	{r4, lr}
   1ddec:	mov	r3, r2
   1ddf0:	mov	r2, r1
   1ddf4:	mov	r1, r0
   1ddf8:	ldr	r0, [pc, #4]	; 1de04 <__assert_fail@plt+0xb840>
   1ddfc:	bl	1d734 <__assert_fail@plt+0xb170>
   1de00:	pop	{r4, pc}
   1de04:	andeq	r5, r4, ip, lsl #27
   1de08:	push	{r4, lr}
   1de0c:	mov	r3, r2
   1de10:	mov	r2, r1
   1de14:	mov	r1, r0
   1de18:	ldr	r0, [pc, #4]	; 1de24 <__assert_fail@plt+0xb860>
   1de1c:	bl	1d734 <__assert_fail@plt+0xb170>
   1de20:	pop	{r4, pc}
   1de24:	muleq	r4, r8, sp
   1de28:	push	{r4, lr}
   1de2c:	bl	165e0 <__assert_fail@plt+0x401c>
   1de30:	ldr	r3, [pc, #36]	; 1de5c <__assert_fail@plt+0xb898>
   1de34:	str	r3, [r0]
   1de38:	mov	r3, #3
   1de3c:	str	r3, [r0, #8]
   1de40:	mov	r3, #2
   1de44:	str	r3, [r0, #12]
   1de48:	mov	r3, #0
   1de4c:	strb	r3, [r0, #19]
   1de50:	strb	r3, [r0, #18]
   1de54:	mov	r0, #1
   1de58:	pop	{r4, pc}
   1de5c:	andeq	r3, r1, ip, asr r8
   1de60:	push	{r4, lr}
   1de64:	bl	165e0 <__assert_fail@plt+0x401c>
   1de68:	ldr	r3, [pc, #32]	; 1de90 <__assert_fail@plt+0xb8cc>
   1de6c:	str	r3, [r0]
   1de70:	mov	r3, #3
   1de74:	str	r3, [r0, #8]
   1de78:	str	r3, [r0, #12]
   1de7c:	mov	r3, #0
   1de80:	strb	r3, [r0, #19]
   1de84:	strb	r3, [r0, #18]
   1de88:	mov	r0, #1
   1de8c:	pop	{r4, pc}
   1de90:	andeq	r3, r1, r0, lsr #16
   1de94:	push	{r4, lr}
   1de98:	bl	165e0 <__assert_fail@plt+0x401c>
   1de9c:	mov	r3, r0
   1dea0:	ldr	r2, [pc, #40]	; 1ded0 <__assert_fail@plt+0xb90c>
   1dea4:	str	r2, [r0]
   1dea8:	mov	r2, #3
   1deac:	str	r2, [r0, #8]
   1deb0:	mov	r0, #1
   1deb4:	str	r0, [r3, #12]
   1deb8:	mov	r2, #0
   1debc:	strb	r2, [r3, #19]
   1dec0:	strb	r2, [r3, #18]
   1dec4:	mov	r2, #1065353216	; 0x3f800000
   1dec8:	str	r2, [r3, #28]
   1decc:	pop	{r4, pc}
   1ded0:	andeq	r3, r1, ip, lsl #24
   1ded4:	push	{r4, lr}
   1ded8:	bl	165e0 <__assert_fail@plt+0x401c>
   1dedc:	ldr	r3, [pc, #32]	; 1df04 <__assert_fail@plt+0xb940>
   1dee0:	str	r3, [r0]
   1dee4:	mov	r3, #5
   1dee8:	str	r3, [r0, #8]
   1deec:	mov	r3, #0
   1def0:	str	r3, [r0, #12]
   1def4:	strb	r3, [r0, #19]
   1def8:	strb	r3, [r0, #18]
   1defc:	mov	r0, #1
   1df00:	pop	{r4, pc}
   1df04:	andeq	r3, r1, r0, lsl #23
   1df08:	push	{r4, r5, r6, r7, lr}
   1df0c:	sub	sp, sp, #20
   1df10:	mov	r5, r0
   1df14:	mov	r0, r1
   1df18:	mov	r1, r2
   1df1c:	add	r2, sp, #12
   1df20:	bl	1b448 <__assert_fail@plt+0x8e84>
   1df24:	subs	r4, r0, #0
   1df28:	bne	1df38 <__assert_fail@plt+0xb974>
   1df2c:	mov	r0, r4
   1df30:	add	sp, sp, #20
   1df34:	pop	{r4, r5, r6, r7, pc}
   1df38:	ldr	r0, [sp, #12]
   1df3c:	bl	125ac <getgrnam@plt>
   1df40:	mov	r6, r0
   1df44:	bl	11eb0 <endgrent@plt>
   1df48:	cmp	r6, #0
   1df4c:	beq	1df84 <__assert_fail@plt+0xb9c0>
   1df50:	ldr	r6, [r6, #8]
   1df54:	ldr	r1, [sp, #12]
   1df58:	mov	r0, r5
   1df5c:	bl	17cc4 <__assert_fail@plt+0x5700>
   1df60:	str	r6, [r0, #40]	; 0x28
   1df64:	ldrd	r2, [r0, #48]	; 0x30
   1df68:	cmp	r3, #0
   1df6c:	cmpeq	r2, #100	; 0x64
   1df70:	vldr	s14, [pc, #264]	; 1e080 <__assert_fail@plt+0xbabc>
   1df74:	vldr	s15, [pc, #264]	; 1e084 <__assert_fail@plt+0xbac0>
   1df78:	vmovcs.f32	s15, s14
   1df7c:	vstr	s15, [r0, #28]
   1df80:	b	1df2c <__assert_fail@plt+0xb968>
   1df84:	ldr	r6, [sp, #12]
   1df88:	ldr	r1, [pc, #248]	; 1e088 <__assert_fail@plt+0xbac4>
   1df8c:	mov	r0, r6
   1df90:	bl	125b8 <strspn@plt>
   1df94:	subs	r7, r0, #0
   1df98:	beq	1e018 <__assert_fail@plt+0xba54>
   1df9c:	ldrb	r3, [r6, r7]
   1dfa0:	cmp	r3, #0
   1dfa4:	bne	1dfc0 <__assert_fail@plt+0xb9fc>
   1dfa8:	ldr	r3, [pc, #220]	; 1e08c <__assert_fail@plt+0xbac8>
   1dfac:	ldr	r1, [r3, #72]	; 0x48
   1dfb0:	mov	r0, r6
   1dfb4:	bl	210f0 <__assert_fail@plt+0xeb2c>
   1dfb8:	mov	r6, r0
   1dfbc:	b	1df54 <__assert_fail@plt+0xb990>
   1dfc0:	mov	r2, #5
   1dfc4:	ldr	r1, [pc, #196]	; 1e090 <__assert_fail@plt+0xbacc>
   1dfc8:	mov	r0, #0
   1dfcc:	bl	12084 <dcgettext@plt>
   1dfd0:	mov	r5, r0
   1dfd4:	ldr	r4, [pc, #176]	; 1e08c <__assert_fail@plt+0xbac8>
   1dfd8:	ldr	r2, [sp, #12]
   1dfdc:	ldr	r1, [r4, #72]	; 0x48
   1dfe0:	mov	r0, #0
   1dfe4:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1dfe8:	mov	r6, r0
   1dfec:	ldr	r2, [sp, #12]
   1dff0:	add	r2, r2, r7
   1dff4:	ldr	r1, [r4, #72]	; 0x48
   1dff8:	mov	r0, #1
   1dffc:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1e000:	str	r0, [sp]
   1e004:	mov	r3, r6
   1e008:	mov	r2, r5
   1e00c:	mov	r1, #0
   1e010:	mov	r0, #1
   1e014:	bl	121bc <error@plt>
   1e018:	ldrb	r3, [r6]
   1e01c:	cmp	r3, #0
   1e020:	beq	1e060 <__assert_fail@plt+0xba9c>
   1e024:	mov	r2, #5
   1e028:	ldr	r1, [pc, #100]	; 1e094 <__assert_fail@plt+0xbad0>
   1e02c:	mov	r0, #0
   1e030:	bl	12084 <dcgettext@plt>
   1e034:	mov	r4, r0
   1e038:	ldr	r2, [sp, #12]
   1e03c:	ldr	r3, [pc, #72]	; 1e08c <__assert_fail@plt+0xbac8>
   1e040:	ldr	r1, [r3, #72]	; 0x48
   1e044:	mov	r0, #0
   1e048:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1e04c:	mov	r3, r0
   1e050:	mov	r2, r4
   1e054:	mov	r1, #0
   1e058:	mov	r0, #1
   1e05c:	bl	121bc <error@plt>
   1e060:	mov	r2, #5
   1e064:	ldr	r1, [pc, #44]	; 1e098 <__assert_fail@plt+0xbad4>
   1e068:	mov	r0, #0
   1e06c:	bl	12084 <dcgettext@plt>
   1e070:	mov	r2, r0
   1e074:	mov	r1, #0
   1e078:	mov	r0, #1
   1e07c:	bl	121bc <error@plt>
   1e080:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e084:	svccc	0x007d70a4
   1e088:	andeq	r5, r4, r0, asr #14
   1e08c:	andeq	r9, r5, ip, ror #28
   1e090:	andeq	r5, r4, r0, lsr #27
   1e094:	andeq	r5, r4, r0, lsr #28
   1e098:	andeq	r5, r4, r8, asr #28
   1e09c:	ldr	r3, [pc, #160]	; 1e144 <__assert_fail@plt+0xbb80>
   1e0a0:	ldrb	r3, [r3, #36]	; 0x24
   1e0a4:	cmp	r3, #0
   1e0a8:	beq	1e0b4 <__assert_fail@plt+0xbaf0>
   1e0ac:	mov	r0, #1
   1e0b0:	bx	lr
   1e0b4:	push	{r4, lr}
   1e0b8:	ldr	r4, [pc, #132]	; 1e144 <__assert_fail@plt+0xbb80>
   1e0bc:	ldr	r3, [r4, #28]
   1e0c0:	add	r3, r3, #86016	; 0x15000
   1e0c4:	add	r3, r3, #384	; 0x180
   1e0c8:	str	r3, [r4, #28]
   1e0cc:	mov	r3, #0
   1e0d0:	str	r3, [r4, #32]
   1e0d4:	add	r0, r4, #28
   1e0d8:	bl	1224c <localtime@plt>
   1e0dc:	ldr	r3, [r4, #28]
   1e0e0:	cmp	r0, #0
   1e0e4:	beq	1e120 <__assert_fail@plt+0xbb5c>
   1e0e8:	ldr	r2, [r0, #4]
   1e0ec:	rsb	r2, r2, r2, lsl #4
   1e0f0:	ldr	r1, [r0]
   1e0f4:	add	r1, r1, r2, lsl #2
   1e0f8:	ldr	r2, [r0, #8]
   1e0fc:	mov	r0, #3600	; 0xe10
   1e100:	mla	r2, r0, r2, r1
   1e104:	ldr	r1, [pc, #56]	; 1e144 <__assert_fail@plt+0xbb80>
   1e108:	sub	r3, r3, r2
   1e10c:	str	r3, [r1, #28]
   1e110:	mov	r3, #1
   1e114:	strb	r3, [r1, #36]	; 0x24
   1e118:	mov	r0, #1
   1e11c:	pop	{r4, pc}
   1e120:	ldr	r2, [pc, #32]	; 1e148 <__assert_fail@plt+0xbb84>
   1e124:	smull	r1, r2, r2, r3
   1e128:	add	r1, r2, r3
   1e12c:	asr	r2, r3, #31
   1e130:	rsb	r2, r2, r1, asr #16
   1e134:	ldr	r1, [pc, #16]	; 1e14c <__assert_fail@plt+0xbb88>
   1e138:	mul	r2, r1, r2
   1e13c:	sub	r2, r3, r2
   1e140:	b	1e104 <__assert_fail@plt+0xbb40>
   1e144:	andeq	r9, r5, ip, ror #28
   1e148:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e14c:	andeq	r5, r1, r0, lsl #3
   1e150:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e154:	sub	sp, sp, #52	; 0x34
   1e158:	mov	r9, r0
   1e15c:	mov	r5, r1
   1e160:	mov	r4, r2
   1e164:	mov	r2, #5
   1e168:	ldr	r1, [pc, #464]	; 1e340 <__assert_fail@plt+0xbd7c>
   1e16c:	mov	r0, #0
   1e170:	bl	12084 <dcgettext@plt>
   1e174:	mov	r6, r0
   1e178:	ldr	r8, [r4]
   1e17c:	add	r2, sp, #24
   1e180:	mov	r1, r4
   1e184:	mov	r0, r5
   1e188:	bl	1b448 <__assert_fail@plt+0x8e84>
   1e18c:	subs	r5, r0, #0
   1e190:	bne	1e1a0 <__assert_fail@plt+0xbbdc>
   1e194:	mov	r0, r5
   1e198:	add	sp, sp, #52	; 0x34
   1e19c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e1a0:	ldr	r7, [sp, #24]
   1e1a4:	ldr	r3, [pc, #408]	; 1e344 <__assert_fail@plt+0xbd80>
   1e1a8:	add	r2, sp, #16
   1e1ac:	add	r1, r3, #28
   1e1b0:	ldm	r1, {r0, r1}
   1e1b4:	stm	r2, {r0, r1}
   1e1b8:	mov	r5, r0
   1e1bc:	add	r1, sp, #28
   1e1c0:	add	r0, sp, #24
   1e1c4:	bl	1b4a0 <__assert_fail@plt+0x8edc>
   1e1c8:	cmp	r0, #0
   1e1cc:	beq	1e1e4 <__assert_fail@plt+0xbc20>
   1e1d0:	ldr	r3, [sp, #28]
   1e1d4:	cmp	r3, #1
   1e1d8:	addeq	r5, r5, #86016	; 0x15000
   1e1dc:	addeq	r5, r5, #380	; 0x17c
   1e1e0:	addeq	r5, r5, #3
   1e1e4:	str	r7, [sp, #24]
   1e1e8:	str	r5, [sp, #16]
   1e1ec:	str	r6, [sp]
   1e1f0:	vldr	d0, [pc, #320]	; 1e338 <__assert_fail@plt+0xbd74>
   1e1f4:	add	r3, sp, #16
   1e1f8:	ldm	r3, {r2, r3}
   1e1fc:	add	r1, sp, #32
   1e200:	mov	r0, r7
   1e204:	bl	1c4c4 <__assert_fail@plt+0x9f00>
   1e208:	subs	r5, r0, #0
   1e20c:	streq	r8, [r4]
   1e210:	beq	1e194 <__assert_fail@plt+0xbbd0>
   1e214:	mov	r1, r7
   1e218:	mov	r0, r9
   1e21c:	bl	17cc4 <__assert_fail@plt+0x5700>
   1e220:	mov	r4, r0
   1e224:	add	ip, r0, #40	; 0x28
   1e228:	add	r3, sp, #48	; 0x30
   1e22c:	ldmdb	r3, {r0, r1, r2, r3}
   1e230:	stm	ip, {r0, r1, r2, r3}
   1e234:	ldr	r0, [sp, #40]	; 0x28
   1e238:	bl	1b378 <__assert_fail@plt+0x8db4>
   1e23c:	vstr	s0, [r4, #28]
   1e240:	ldr	r3, [pc, #252]	; 1e344 <__assert_fail@plt+0xbd80>
   1e244:	ldr	r3, [r3, #44]	; 0x2c
   1e248:	tst	r3, #1
   1e24c:	beq	1e194 <__assert_fail@plt+0xbbd0>
   1e250:	ldr	r6, [pc, #240]	; 1e348 <__assert_fail@plt+0xbd84>
   1e254:	ldr	r2, [r4, #4]
   1e258:	ldr	r1, [pc, #236]	; 1e34c <__assert_fail@plt+0xbd88>
   1e25c:	ldr	r0, [r6]
   1e260:	bl	1230c <fprintf@plt>
   1e264:	ldr	r0, [r6]
   1e268:	ldr	r3, [sp, #36]	; 0x24
   1e26c:	cmp	r3, #0
   1e270:	beq	1e2a4 <__assert_fail@plt+0xbce0>
   1e274:	cmp	r3, #1
   1e278:	beq	1e32c <__assert_fail@plt+0xbd68>
   1e27c:	ldr	r1, [pc, #204]	; 1e350 <__assert_fail@plt+0xbd8c>
   1e280:	ldr	r2, [pc, #204]	; 1e354 <__assert_fail@plt+0xbd90>
   1e284:	cmp	r3, #2
   1e288:	moveq	r2, r1
   1e28c:	ldr	ip, [pc, #196]	; 1e358 <__assert_fail@plt+0xbd94>
   1e290:	ldr	r1, [pc, #196]	; 1e35c <__assert_fail@plt+0xbd98>
   1e294:	cmp	r3, #2
   1e298:	movne	r3, r1
   1e29c:	moveq	r3, ip
   1e2a0:	b	1e2ac <__assert_fail@plt+0xbce8>
   1e2a4:	ldr	r2, [pc, #180]	; 1e360 <__assert_fail@plt+0xbd9c>
   1e2a8:	ldr	r3, [pc, #180]	; 1e364 <__assert_fail@plt+0xbda0>
   1e2ac:	ldr	r1, [pc, #180]	; 1e368 <__assert_fail@plt+0xbda4>
   1e2b0:	bl	1230c <fprintf@plt>
   1e2b4:	ldr	r6, [r4, #48]	; 0x30
   1e2b8:	add	r0, sp, #48	; 0x30
   1e2bc:	str	r6, [r0, #-36]!	; 0xffffffdc
   1e2c0:	ldr	r3, [pc, #128]	; 1e348 <__assert_fail@plt+0xbd84>
   1e2c4:	ldr	r7, [r3]
   1e2c8:	bl	12078 <ctime@plt>
   1e2cc:	str	r0, [sp]
   1e2d0:	mov	r2, r6
   1e2d4:	asr	r3, r6, #31
   1e2d8:	ldr	r1, [pc, #140]	; 1e36c <__assert_fail@plt+0xbda8>
   1e2dc:	mov	r0, r7
   1e2e0:	bl	1230c <fprintf@plt>
   1e2e4:	ldr	r3, [sp, #36]	; 0x24
   1e2e8:	cmp	r3, #2
   1e2ec:	bne	1e194 <__assert_fail@plt+0xbbd0>
   1e2f0:	ldr	r4, [r4, #48]	; 0x30
   1e2f4:	add	r4, r4, #86016	; 0x15000
   1e2f8:	add	r4, r4, #384	; 0x180
   1e2fc:	add	r0, sp, #48	; 0x30
   1e300:	str	r4, [r0, #-36]!	; 0xffffffdc
   1e304:	ldr	r3, [pc, #60]	; 1e348 <__assert_fail@plt+0xbd84>
   1e308:	ldr	r6, [r3]
   1e30c:	bl	12078 <ctime@plt>
   1e310:	str	r0, [sp]
   1e314:	mov	r2, r4
   1e318:	asr	r3, r4, #31
   1e31c:	ldr	r1, [pc, #76]	; 1e370 <__assert_fail@plt+0xbdac>
   1e320:	mov	r0, r6
   1e324:	bl	1230c <fprintf@plt>
   1e328:	b	1e194 <__assert_fail@plt+0xbbd0>
   1e32c:	ldr	r2, [pc, #64]	; 1e374 <__assert_fail@plt+0xbdb0>
   1e330:	ldr	r3, [pc, #64]	; 1e378 <__assert_fail@plt+0xbdb4>
   1e334:	b	1e2ac <__assert_fail@plt+0xbce8>
   1e338:	andeq	r0, r0, r0
   1e33c:	rscsmi	r1, r5, r0, lsl #16
   1e340:	andeq	r5, r4, r4, lsl #29
   1e344:	andeq	r9, r5, ip, ror #28
   1e348:	andeq	r9, r5, r8, asr #10
   1e34c:	muleq	r4, ip, r8
   1e350:	muleq	r4, r4, r8
   1e354:	andeq	r6, r4, r4, lsr #2
   1e358:	andeq	r5, r4, r0, lsl #29
   1e35c:	muleq	r4, r0, r8
   1e360:	andeq	r5, r4, r0, lsl #17
   1e364:	andeq	r5, r4, r4, lsl #17
   1e368:	andeq	r5, r4, ip, lsr #17
   1e36c:	ldrdeq	r5, [r4], -ip
   1e370:	andeq	r5, r4, r8, asr #29
   1e374:	andeq	r5, r4, r8, lsl #17
   1e378:	andeq	r5, r4, ip, lsl #17
   1e37c:	push	{r4, lr}
   1e380:	mov	r1, #0
   1e384:	bl	165f8 <__assert_fail@plt+0x4034>
   1e388:	ldr	r3, [pc, #36]	; 1e3b4 <__assert_fail@plt+0xbdf0>
   1e38c:	str	r3, [r0]
   1e390:	mov	r3, #2
   1e394:	str	r3, [r0, #8]
   1e398:	mov	r3, #4
   1e39c:	str	r3, [r0, #12]
   1e3a0:	mov	r3, #0
   1e3a4:	strb	r3, [r0, #19]
   1e3a8:	strb	r3, [r0, #18]
   1e3ac:	mov	r0, #1
   1e3b0:	pop	{r4, pc}
   1e3b4:	andeq	r4, r1, r0, ror #6
   1e3b8:	push	{r4, lr}
   1e3bc:	mov	r1, #0
   1e3c0:	bl	165f8 <__assert_fail@plt+0x4034>
   1e3c4:	ldr	r3, [pc, #32]	; 1e3ec <__assert_fail@plt+0xbe28>
   1e3c8:	str	r3, [r0]
   1e3cc:	mov	r3, #4
   1e3d0:	str	r3, [r0, #8]
   1e3d4:	mov	r3, #0
   1e3d8:	str	r3, [r0, #12]
   1e3dc:	strb	r3, [r0, #19]
   1e3e0:	strb	r3, [r0, #18]
   1e3e4:	mov	r0, #1
   1e3e8:	pop	{r4, pc}
   1e3ec:	andeq	r4, r1, r0, asr #11
   1e3f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3f4:	sub	sp, sp, #116	; 0x74
   1e3f8:	subs	r6, r1, #0
   1e3fc:	beq	1e7b0 <__assert_fail@plt+0xc1ec>
   1e400:	ldr	r9, [r2]
   1e404:	lsl	r8, r9, #2
   1e408:	ldr	r7, [r6, r9, lsl #2]
   1e40c:	cmp	r7, #0
   1e410:	beq	1e7b8 <__assert_fail@plt+0xc1f4>
   1e414:	mov	r4, r2
   1e418:	mov	r5, r0
   1e41c:	mov	r0, r7
   1e420:	bl	122d0 <strlen@plt>
   1e424:	cmp	r0, #8
   1e428:	movne	fp, #0
   1e42c:	beq	1e43c <__assert_fail@plt+0xbe78>
   1e430:	mov	r0, fp
   1e434:	add	sp, sp, #116	; 0x74
   1e438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e43c:	ldr	r3, [pc, #892]	; 1e7c0 <__assert_fail@plt+0xc1fc>
   1e440:	ldm	r3, {r0, r1}
   1e444:	str	r0, [sp]
   1e448:	strh	r1, [sp, #4]
   1e44c:	mov	r2, #6
   1e450:	mov	r1, r7
   1e454:	ldr	r0, [pc, #872]	; 1e7c4 <__assert_fail@plt+0xc200>
   1e458:	bl	12564 <strncmp@plt>
   1e45c:	cmp	r0, #0
   1e460:	bne	1e524 <__assert_fail@plt+0xbf60>
   1e464:	ldrb	sl, [r7, #6]
   1e468:	ldrb	r7, [r7, #7]
   1e46c:	cmp	r7, #66	; 0x42
   1e470:	cmpne	sl, #66	; 0x42
   1e474:	moveq	fp, #1
   1e478:	movne	fp, #0
   1e47c:	beq	1e538 <__assert_fail@plt+0xbf74>
   1e480:	cmp	sl, #116	; 0x74
   1e484:	beq	1e430 <__assert_fail@plt+0xbe6c>
   1e488:	mov	r1, sl
   1e48c:	mov	r0, sp
   1e490:	bl	122dc <strchr@plt>
   1e494:	cmp	r0, #0
   1e498:	beq	1e430 <__assert_fail@plt+0xbe6c>
   1e49c:	mov	r1, r7
   1e4a0:	mov	r0, sp
   1e4a4:	bl	122dc <strchr@plt>
   1e4a8:	cmp	r0, #0
   1e4ac:	beq	1e430 <__assert_fail@plt+0xbe6c>
   1e4b0:	add	r3, r9, #1
   1e4b4:	add	r8, r8, #4
   1e4b8:	ldr	r2, [r6, r8]
   1e4bc:	cmp	r2, #0
   1e4c0:	beq	1e560 <__assert_fail@plt+0xbf9c>
   1e4c4:	str	r3, [r4]
   1e4c8:	ldr	r1, [r6, r8]
   1e4cc:	mov	r0, r5
   1e4d0:	bl	17cc4 <__assert_fail@plt+0x5700>
   1e4d4:	mov	r5, r0
   1e4d8:	cmp	sl, #97	; 0x61
   1e4dc:	beq	1e610 <__assert_fail@plt+0xc04c>
   1e4e0:	bls	1e5a0 <__assert_fail@plt+0xbfdc>
   1e4e4:	cmp	sl, #99	; 0x63
   1e4e8:	beq	1e61c <__assert_fail@plt+0xc058>
   1e4ec:	cmp	sl, #109	; 0x6d
   1e4f0:	moveq	r3, #3
   1e4f4:	streq	r3, [r0, #40]	; 0x28
   1e4f8:	beq	1e5b0 <__assert_fail@plt+0xbfec>
   1e4fc:	mov	r1, sl
   1e500:	mov	r0, sp
   1e504:	bl	122dc <strchr@plt>
   1e508:	cmp	r0, #0
   1e50c:	beq	1e628 <__assert_fail@plt+0xc064>
   1e510:	ldr	r3, [pc, #688]	; 1e7c8 <__assert_fail@plt+0xc204>
   1e514:	ldr	r2, [pc, #688]	; 1e7cc <__assert_fail@plt+0xc208>
   1e518:	ldr	r1, [pc, #688]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e51c:	ldr	r0, [pc, #688]	; 1e7d4 <__assert_fail@plt+0xc210>
   1e520:	bl	125c4 <__assert_fail@plt>
   1e524:	ldr	r3, [pc, #668]	; 1e7c8 <__assert_fail@plt+0xc204>
   1e528:	ldr	r2, [pc, #680]	; 1e7d8 <__assert_fail@plt+0xc214>
   1e52c:	ldr	r1, [pc, #668]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e530:	ldr	r0, [pc, #676]	; 1e7dc <__assert_fail@plt+0xc218>
   1e534:	bl	125c4 <__assert_fail@plt>
   1e538:	mov	r2, #5
   1e53c:	ldr	r1, [pc, #668]	; 1e7e0 <__assert_fail@plt+0xc21c>
   1e540:	mov	r0, #0
   1e544:	bl	12084 <dcgettext@plt>
   1e548:	mov	r2, r0
   1e54c:	mov	r1, #0
   1e550:	mov	r0, r1
   1e554:	bl	121bc <error@plt>
   1e558:	mov	fp, #0
   1e55c:	b	1e430 <__assert_fail@plt+0xbe6c>
   1e560:	mov	r2, #5
   1e564:	ldr	r1, [pc, #632]	; 1e7e4 <__assert_fail@plt+0xc220>
   1e568:	mov	r0, #0
   1e56c:	bl	12084 <dcgettext@plt>
   1e570:	mov	r5, r0
   1e574:	ldr	r3, [r4]
   1e578:	ldr	r2, [r6, r3, lsl #2]
   1e57c:	ldr	r3, [pc, #612]	; 1e7e8 <__assert_fail@plt+0xc224>
   1e580:	ldr	r1, [r3, #72]	; 0x48
   1e584:	mov	r0, #0
   1e588:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1e58c:	mov	r3, r0
   1e590:	mov	r2, r5
   1e594:	mov	r1, #0
   1e598:	mov	r0, #1
   1e59c:	bl	121bc <error@plt>
   1e5a0:	cmp	sl, #66	; 0x42
   1e5a4:	moveq	r3, #1
   1e5a8:	streq	r3, [r0, #40]	; 0x28
   1e5ac:	bne	1e4fc <__assert_fail@plt+0xbf38>
   1e5b0:	cmp	r7, #116	; 0x74
   1e5b4:	beq	1e63c <__assert_fail@plt+0xc078>
   1e5b8:	add	r0, sp, #8
   1e5bc:	bl	17f50 <__assert_fail@plt+0x598c>
   1e5c0:	ldr	r2, [r4]
   1e5c4:	ldr	r3, [pc, #540]	; 1e7e8 <__assert_fail@plt+0xc224>
   1e5c8:	ldr	r3, [r3, #52]	; 0x34
   1e5cc:	add	r1, sp, #8
   1e5d0:	ldr	r0, [r6, r2, lsl #2]
   1e5d4:	blx	r3
   1e5d8:	cmp	r0, #0
   1e5dc:	bne	1e6ec <__assert_fail@plt+0xc128>
   1e5e0:	cmp	r7, #97	; 0x61
   1e5e4:	beq	1e74c <__assert_fail@plt+0xc188>
   1e5e8:	bls	1e700 <__assert_fail@plt+0xc13c>
   1e5ec:	cmp	r7, #99	; 0x63
   1e5f0:	beq	1e760 <__assert_fail@plt+0xc19c>
   1e5f4:	cmp	r7, #109	; 0x6d
   1e5f8:	bne	1e774 <__assert_fail@plt+0xc1b0>
   1e5fc:	ldr	r3, [sp, #92]	; 0x5c
   1e600:	ldr	r2, [sp, #88]	; 0x58
   1e604:	str	r2, [r5, #48]	; 0x30
   1e608:	str	r3, [r5, #52]	; 0x34
   1e60c:	b	1e658 <__assert_fail@plt+0xc094>
   1e610:	mov	r3, #0
   1e614:	str	r3, [r0, #40]	; 0x28
   1e618:	b	1e5b0 <__assert_fail@plt+0xbfec>
   1e61c:	mov	r3, #2
   1e620:	str	r3, [r0, #40]	; 0x28
   1e624:	b	1e5b0 <__assert_fail@plt+0xbfec>
   1e628:	ldr	r3, [pc, #408]	; 1e7c8 <__assert_fail@plt+0xc204>
   1e62c:	ldr	r2, [pc, #440]	; 1e7ec <__assert_fail@plt+0xc228>
   1e630:	ldr	r1, [pc, #408]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e634:	ldr	r0, [pc, #436]	; 1e7f0 <__assert_fail@plt+0xc22c>
   1e638:	bl	125c4 <__assert_fail@plt>
   1e63c:	ldr	r3, [r4]
   1e640:	ldr	r2, [pc, #428]	; 1e7f4 <__assert_fail@plt+0xc230>
   1e644:	ldr	r1, [r6, r3, lsl #2]
   1e648:	add	r0, r5, #48	; 0x30
   1e64c:	bl	2a354 <__assert_fail@plt+0x17d90>
   1e650:	cmp	r0, #0
   1e654:	beq	1e6b0 <__assert_fail@plt+0xc0ec>
   1e658:	mov	r3, #0
   1e65c:	str	r3, [r5, #44]	; 0x2c
   1e660:	ldr	r0, [r5, #48]	; 0x30
   1e664:	bl	1b378 <__assert_fail@plt+0x8db4>
   1e668:	vstr	s0, [r5, #28]
   1e66c:	ldr	r3, [r4]
   1e670:	add	r3, r3, #1
   1e674:	str	r3, [r4]
   1e678:	ldr	r3, [r5]
   1e67c:	cmp	r3, #0
   1e680:	beq	1e788 <__assert_fail@plt+0xc1c4>
   1e684:	ldr	r2, [pc, #364]	; 1e7f8 <__assert_fail@plt+0xc234>
   1e688:	cmp	r3, r2
   1e68c:	bne	1e79c <__assert_fail@plt+0xc1d8>
   1e690:	ldrb	fp, [r5, #18]
   1e694:	cmp	fp, #0
   1e698:	bne	1e430 <__assert_fail@plt+0xbe6c>
   1e69c:	ldr	r3, [pc, #292]	; 1e7c8 <__assert_fail@plt+0xc204>
   1e6a0:	ldr	r2, [pc, #340]	; 1e7fc <__assert_fail@plt+0xc238>
   1e6a4:	ldr	r1, [pc, #292]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e6a8:	ldr	r0, [pc, #336]	; 1e800 <__assert_fail@plt+0xc23c>
   1e6ac:	bl	125c4 <__assert_fail@plt>
   1e6b0:	mov	r2, #5
   1e6b4:	ldr	r1, [pc, #328]	; 1e804 <__assert_fail@plt+0xc240>
   1e6b8:	bl	12084 <dcgettext@plt>
   1e6bc:	mov	r5, r0
   1e6c0:	ldr	r3, [r4]
   1e6c4:	ldr	r2, [r6, r3, lsl #2]
   1e6c8:	ldr	r3, [pc, #280]	; 1e7e8 <__assert_fail@plt+0xc224>
   1e6cc:	ldr	r1, [r3, #72]	; 0x48
   1e6d0:	mov	r0, #0
   1e6d4:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1e6d8:	mov	r3, r0
   1e6dc:	mov	r2, r5
   1e6e0:	mov	r1, #0
   1e6e4:	mov	r0, #1
   1e6e8:	bl	121bc <error@plt>
   1e6ec:	bl	12318 <__errno_location@plt>
   1e6f0:	ldr	r3, [r4]
   1e6f4:	ldr	r1, [r6, r3, lsl #2]
   1e6f8:	ldr	r0, [r0]
   1e6fc:	bl	18dd0 <__assert_fail@plt+0x680c>
   1e700:	cmp	r7, #66	; 0x42
   1e704:	bne	1e774 <__assert_fail@plt+0xc1b0>
   1e708:	mvn	r3, #0
   1e70c:	str	r3, [r5, #48]	; 0x30
   1e710:	str	r3, [r5, #52]	; 0x34
   1e714:	mov	r2, #5
   1e718:	ldr	r1, [pc, #232]	; 1e808 <__assert_fail@plt+0xc244>
   1e71c:	mov	r0, #0
   1e720:	bl	12084 <dcgettext@plt>
   1e724:	mov	r5, r0
   1e728:	ldr	r3, [r4]
   1e72c:	ldr	r1, [r6, r3, lsl #2]
   1e730:	mov	r0, #0
   1e734:	bl	18a20 <__assert_fail@plt+0x645c>
   1e738:	mov	r3, r0
   1e73c:	mov	r2, r5
   1e740:	mov	r1, #0
   1e744:	mov	r0, #1
   1e748:	bl	121bc <error@plt>
   1e74c:	ldr	r3, [sp, #84]	; 0x54
   1e750:	ldr	r2, [sp, #80]	; 0x50
   1e754:	str	r2, [r5, #48]	; 0x30
   1e758:	str	r3, [r5, #52]	; 0x34
   1e75c:	b	1e658 <__assert_fail@plt+0xc094>
   1e760:	ldr	r3, [sp, #100]	; 0x64
   1e764:	ldr	r2, [sp, #96]	; 0x60
   1e768:	str	r2, [r5, #48]	; 0x30
   1e76c:	str	r3, [r5, #52]	; 0x34
   1e770:	b	1e658 <__assert_fail@plt+0xc094>
   1e774:	ldr	r3, [pc, #144]	; 1e80c <__assert_fail@plt+0xc248>
   1e778:	ldr	r2, [pc, #144]	; 1e810 <__assert_fail@plt+0xc24c>
   1e77c:	ldr	r1, [pc, #76]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e780:	ldr	r0, [pc, #76]	; 1e7d4 <__assert_fail@plt+0xc210>
   1e784:	bl	125c4 <__assert_fail@plt>
   1e788:	ldr	r3, [pc, #56]	; 1e7c8 <__assert_fail@plt+0xc204>
   1e78c:	ldr	r2, [pc, #128]	; 1e814 <__assert_fail@plt+0xc250>
   1e790:	ldr	r1, [pc, #56]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e794:	ldr	r0, [pc, #124]	; 1e818 <__assert_fail@plt+0xc254>
   1e798:	bl	125c4 <__assert_fail@plt>
   1e79c:	ldr	r3, [pc, #36]	; 1e7c8 <__assert_fail@plt+0xc204>
   1e7a0:	mov	r2, #1648	; 0x670
   1e7a4:	ldr	r1, [pc, #36]	; 1e7d0 <__assert_fail@plt+0xc20c>
   1e7a8:	ldr	r0, [pc, #108]	; 1e81c <__assert_fail@plt+0xc258>
   1e7ac:	bl	125c4 <__assert_fail@plt>
   1e7b0:	mov	fp, #0
   1e7b4:	b	1e430 <__assert_fail@plt+0xbe6c>
   1e7b8:	mov	fp, #0
   1e7bc:	b	1e430 <__assert_fail@plt+0xbe6c>
   1e7c0:	andeq	r6, r4, ip, asr #32
   1e7c4:	andeq	r5, r4, r4, ror #29
   1e7c8:	andeq	r5, r4, r4, lsl r3
   1e7cc:	andeq	r0, r0, ip, asr #12
   1e7d0:	andeq	r5, r4, r0, lsl r8
   1e7d4:	andeq	r6, r4, r8, asr sp
   1e7d8:	andeq	r0, r0, r3, lsl r6
   1e7dc:	andeq	r5, r4, ip, ror #29
   1e7e0:	andeq	r5, r4, r8, lsl pc
   1e7e4:	andeq	r5, r4, r0, ror #30
   1e7e8:	andeq	r9, r5, ip, ror #28
   1e7ec:	andeq	r0, r0, fp, asr #12
   1e7f0:	andeq	r5, r4, r0, lsl #31
   1e7f4:	andeq	r9, r5, r0, lsl #29
   1e7f8:	ldrdeq	r4, [r1], -ip
   1e7fc:	andeq	r0, r0, r1, ror r6
   1e800:	andeq	r6, r4, r8, lsr r0
   1e804:	muleq	r4, r8, pc	; <UNPREDICTABLE>
   1e808:	ldrdeq	r5, [r4], -r4
   1e80c:	andeq	r5, r4, r4, lsr #6
   1e810:	strdeq	r0, [r0], -r2
   1e814:	andeq	r0, r0, pc, ror #12
   1e818:	strdeq	r5, [r4], -r8
   1e81c:	andeq	r6, r4, r4, lsl r0
   1e820:	push	{r4, lr}
   1e824:	bl	17d04 <__assert_fail@plt+0x5740>
   1e828:	mov	r4, r0
   1e82c:	add	r1, r0, #40	; 0x28
   1e830:	ldr	r0, [pc, #24]	; 1e850 <__assert_fail@plt+0xc28c>
   1e834:	bl	1d320 <__assert_fail@plt+0xad5c>
   1e838:	mov	r0, #1
   1e83c:	strb	r0, [r4, #17]
   1e840:	strb	r0, [r4, #16]
   1e844:	mov	r3, #1065353216	; 0x3f800000
   1e848:	str	r3, [r4, #28]
   1e84c:	pop	{r4, pc}
   1e850:	andeq	r5, r4, r4, ror r9
   1e854:	push	{r4, r5, r6, lr}
   1e858:	mov	r5, r1
   1e85c:	bl	17cc4 <__assert_fail@plt+0x5700>
   1e860:	mov	r4, r0
   1e864:	cmp	r5, #0
   1e868:	add	r1, r0, #40	; 0x28
   1e86c:	movne	r0, r5
   1e870:	ldreq	r0, [pc, #36]	; 1e89c <__assert_fail@plt+0xc2d8>
   1e874:	bl	1d320 <__assert_fail@plt+0xad5c>
   1e878:	mov	r0, #1
   1e87c:	strb	r0, [r4, #17]
   1e880:	strb	r0, [r4, #16]
   1e884:	mov	r3, #0
   1e888:	strb	r3, [r4, #19]
   1e88c:	strb	r3, [r4, #18]
   1e890:	mov	r3, #1065353216	; 0x3f800000
   1e894:	str	r3, [r4, #28]
   1e898:	pop	{r4, r5, r6, pc}
   1e89c:	andeq	r5, r4, r4, ror r9
   1e8a0:	push	{r4, lr}
   1e8a4:	mov	r1, #0
   1e8a8:	bl	1e854 <__assert_fail@plt+0xc290>
   1e8ac:	pop	{r4, pc}
   1e8b0:	push	{r4, r5, lr}
   1e8b4:	sub	sp, sp, #12
   1e8b8:	mov	r5, r0
   1e8bc:	mov	r0, r1
   1e8c0:	mov	r4, r2
   1e8c4:	add	r2, sp, #4
   1e8c8:	mov	r1, r4
   1e8cc:	bl	1b448 <__assert_fail@plt+0x8e84>
   1e8d0:	cmp	r0, #0
   1e8d4:	bne	1e8e0 <__assert_fail@plt+0xc31c>
   1e8d8:	add	sp, sp, #12
   1e8dc:	pop	{r4, r5, pc}
   1e8e0:	ldr	r1, [sp, #4]
   1e8e4:	mov	r0, r5
   1e8e8:	bl	1e854 <__assert_fail@plt+0xc290>
   1e8ec:	cmp	r0, #0
   1e8f0:	ldreq	r3, [r4]
   1e8f4:	subeq	r3, r3, #1
   1e8f8:	streq	r3, [r4]
   1e8fc:	b	1e8d8 <__assert_fail@plt+0xc314>
   1e900:	push	{r4, lr}
   1e904:	bl	17d04 <__assert_fail@plt+0x5740>
   1e908:	mov	r4, #1
   1e90c:	strb	r4, [r0, #17]
   1e910:	strb	r4, [r0, #16]
   1e914:	mov	r3, #0
   1e918:	strb	r3, [r0, #19]
   1e91c:	strb	r3, [r0, #18]
   1e920:	add	r1, r0, #40	; 0x28
   1e924:	ldr	r0, [pc, #8]	; 1e934 <__assert_fail@plt+0xc370>
   1e928:	bl	1d320 <__assert_fail@plt+0xad5c>
   1e92c:	mov	r0, r4
   1e930:	pop	{r4, pc}
   1e934:	andeq	r5, r4, r4, ror r9
   1e938:	push	{r4, r5, r6, lr}
   1e93c:	sub	sp, sp, #8
   1e940:	mov	r5, r0
   1e944:	mov	r0, r1
   1e948:	mov	r1, r2
   1e94c:	add	r2, sp, #4
   1e950:	bl	1b448 <__assert_fail@plt+0x8e84>
   1e954:	subs	r4, r0, #0
   1e958:	bne	1e968 <__assert_fail@plt+0xc3a4>
   1e95c:	mov	r0, r4
   1e960:	add	sp, sp, #8
   1e964:	pop	{r4, r5, r6, pc}
   1e968:	ldr	r6, [sp, #4]
   1e96c:	mov	r0, r5
   1e970:	bl	17d04 <__assert_fail@plt+0x5740>
   1e974:	mov	r5, r0
   1e978:	cmp	r6, #0
   1e97c:	add	r1, r0, #40	; 0x28
   1e980:	movne	r0, r6
   1e984:	ldreq	r0, [pc, #24]	; 1e9a4 <__assert_fail@plt+0xc3e0>
   1e988:	bl	1d320 <__assert_fail@plt+0xad5c>
   1e98c:	mov	r3, #1
   1e990:	strb	r3, [r5, #17]
   1e994:	strb	r3, [r5, #16]
   1e998:	mov	r3, #1065353216	; 0x3f800000
   1e99c:	str	r3, [r5, #28]
   1e9a0:	b	1e95c <__assert_fail@plt+0xc398>
   1e9a4:	andeq	r5, r4, r4, ror r9
   1e9a8:	push	{r4, r5, lr}
   1e9ac:	sub	sp, sp, #44	; 0x2c
   1e9b0:	mov	r5, r0
   1e9b4:	mov	r0, r1
   1e9b8:	mov	r1, r2
   1e9bc:	add	r2, sp, #20
   1e9c0:	bl	1b448 <__assert_fail@plt+0x8e84>
   1e9c4:	subs	r4, r0, #0
   1e9c8:	bne	1e9d8 <__assert_fail@plt+0xc414>
   1e9cc:	mov	r0, r4
   1e9d0:	add	sp, sp, #44	; 0x2c
   1e9d4:	pop	{r4, r5, pc}
   1e9d8:	mov	r3, #0
   1e9dc:	str	r3, [sp, #12]
   1e9e0:	str	r3, [sp, #16]
   1e9e4:	ldr	r3, [pc, #244]	; 1eae0 <__assert_fail@plt+0xc51c>
   1e9e8:	str	r3, [sp]
   1e9ec:	vldr	d0, [pc, #204]	; 1eac0 <__assert_fail@plt+0xc4fc>
   1e9f0:	add	r3, sp, #12
   1e9f4:	ldm	r3, {r2, r3}
   1e9f8:	add	r1, sp, #24
   1e9fc:	ldr	r0, [sp, #20]
   1ea00:	bl	1c4c4 <__assert_fail@plt+0x9f00>
   1ea04:	subs	r4, r0, #0
   1ea08:	beq	1ea9c <__assert_fail@plt+0xc4d8>
   1ea0c:	ldr	r1, [sp, #20]
   1ea10:	mov	r0, r5
   1ea14:	bl	17cc4 <__assert_fail@plt+0x5700>
   1ea18:	mov	lr, r0
   1ea1c:	add	ip, r0, #40	; 0x28
   1ea20:	add	r3, sp, #40	; 0x28
   1ea24:	ldmdb	r3, {r0, r1, r2, r3}
   1ea28:	stm	ip, {r0, r1, r2, r3}
   1ea2c:	ldr	r3, [sp, #32]
   1ea30:	ldr	r2, [pc, #172]	; 1eae4 <__assert_fail@plt+0xc520>
   1ea34:	smull	r1, r2, r2, r3
   1ea38:	add	r2, r2, r3
   1ea3c:	asr	r3, r3, #31
   1ea40:	rsb	r3, r3, r2, asr #16
   1ea44:	vmov	s15, r3
   1ea48:	vcvt.f32.s32	s15, s15
   1ea4c:	vldr	s14, [pc, #116]	; 1eac8 <__assert_fail@plt+0xc504>
   1ea50:	vcmpe.f32	s15, s14
   1ea54:	vmrs	APSR_nzcv, fpscr
   1ea58:	bmi	1ea8c <__assert_fail@plt+0xc4c8>
   1ea5c:	vldr	s14, [pc, #104]	; 1eacc <__assert_fail@plt+0xc508>
   1ea60:	vcmpe.f32	s15, s14
   1ea64:	vmrs	APSR_nzcv, fpscr
   1ea68:	bmi	1ea94 <__assert_fail@plt+0xc4d0>
   1ea6c:	vldr	s14, [pc, #92]	; 1ead0 <__assert_fail@plt+0xc50c>
   1ea70:	vcmpe.f32	s15, s14
   1ea74:	vmrs	APSR_nzcv, fpscr
   1ea78:	vldr	s14, [pc, #84]	; 1ead4 <__assert_fail@plt+0xc510>
   1ea7c:	vldr	s15, [pc, #84]	; 1ead8 <__assert_fail@plt+0xc514>
   1ea80:	vmovle.f32	s15, s14
   1ea84:	vstr	s15, [lr, #28]
   1ea88:	b	1e9cc <__assert_fail@plt+0xc408>
   1ea8c:	vldr	s15, [pc, #72]	; 1eadc <__assert_fail@plt+0xc518>
   1ea90:	b	1ea84 <__assert_fail@plt+0xc4c0>
   1ea94:	vldr	s15, [pc, #60]	; 1ead8 <__assert_fail@plt+0xc514>
   1ea98:	b	1ea84 <__assert_fail@plt+0xc4c0>
   1ea9c:	mov	r2, #5
   1eaa0:	ldr	r1, [pc, #64]	; 1eae8 <__assert_fail@plt+0xc524>
   1eaa4:	mov	r0, #0
   1eaa8:	bl	12084 <dcgettext@plt>
   1eaac:	ldr	r3, [sp, #20]
   1eab0:	mov	r2, r0
   1eab4:	mov	r1, #0
   1eab8:	mov	r0, #1
   1eabc:	bl	121bc <error@plt>
   1eac0:	andeq	r0, r0, r0
   1eac4:	rscsmi	r1, r5, r0, lsl #16
   1eac8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1eacc:	svccc	0x00800000
   1ead0:	sbcmi	r0, r8, #0
   1ead4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ead8:			; <UNDEFINED> instruction: 0x3e99999a
   1eadc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1eae0:	andeq	r5, r4, r4, lsl #29
   1eae4:	eorgt	r4, lr, #29360128	; 0x1c00000
   1eae8:	andeq	r6, r4, r4, asr r0
   1eaec:	ldr	r3, [pc, #172]	; 1eba0 <__assert_fail@plt+0xc5dc>
   1eaf0:	ldrb	r3, [r3, #17]
   1eaf4:	cmp	r3, #0
   1eaf8:	bne	1eb98 <__assert_fail@plt+0xc5d4>
   1eafc:	ldr	r3, [pc, #156]	; 1eba0 <__assert_fail@plt+0xc5dc>
   1eb00:	ldrb	r3, [r3, #16]
   1eb04:	cmp	r3, #0
   1eb08:	beq	1eb98 <__assert_fail@plt+0xc5d4>
   1eb0c:	push	{r4, r5, r6, r7, lr}
   1eb10:	sub	sp, sp, #12
   1eb14:	mov	r4, r1
   1eb18:	mov	r5, r0
   1eb1c:	mov	r1, #47	; 0x2f
   1eb20:	mov	r0, r2
   1eb24:	bl	122dc <strchr@plt>
   1eb28:	cmp	r0, #0
   1eb2c:	beq	1eb8c <__assert_fail@plt+0xc5c8>
   1eb30:	mov	r2, #5
   1eb34:	ldr	r1, [pc, #104]	; 1eba4 <__assert_fail@plt+0xc5e0>
   1eb38:	mov	r0, #0
   1eb3c:	bl	12084 <dcgettext@plt>
   1eb40:	mov	r6, r0
   1eb44:	mov	r1, r5
   1eb48:	mov	r0, #0
   1eb4c:	bl	18a20 <__assert_fail@plt+0x645c>
   1eb50:	mov	r5, r0
   1eb54:	ldr	r1, [pc, #76]	; 1eba8 <__assert_fail@plt+0xc5e4>
   1eb58:	mov	r0, #1
   1eb5c:	bl	18a20 <__assert_fail@plt+0x645c>
   1eb60:	mov	r7, r0
   1eb64:	mov	r1, r4
   1eb68:	mov	r0, #2
   1eb6c:	bl	18a20 <__assert_fail@plt+0x645c>
   1eb70:	str	r0, [sp, #4]
   1eb74:	str	r7, [sp]
   1eb78:	mov	r3, r5
   1eb7c:	mov	r2, r6
   1eb80:	mov	r1, #0
   1eb84:	mov	r0, r1
   1eb88:	bl	121bc <error@plt>
   1eb8c:	mov	r0, #1
   1eb90:	add	sp, sp, #12
   1eb94:	pop	{r4, r5, r6, r7, pc}
   1eb98:	mov	r0, #1
   1eb9c:	bx	lr
   1eba0:	andeq	r9, r5, ip, ror #28
   1eba4:	andeq	r6, r4, r4, ror r0
   1eba8:	andeq	r8, r4, r0, lsr #11
   1ebac:	push	{r4, r5, r6, r7, lr}
   1ebb0:	sub	sp, sp, #12
   1ebb4:	mov	r7, r0
   1ebb8:	mov	r0, r1
   1ebbc:	mov	r4, r2
   1ebc0:	ldr	r6, [r2]
   1ebc4:	add	r2, sp, #4
   1ebc8:	mov	r1, r4
   1ebcc:	bl	1b448 <__assert_fail@plt+0x8e84>
   1ebd0:	subs	r5, r0, #0
   1ebd4:	bne	1ebe4 <__assert_fail@plt+0xc620>
   1ebd8:	mov	r0, r5
   1ebdc:	add	sp, sp, #12
   1ebe0:	pop	{r4, r5, r6, r7, pc}
   1ebe4:	bl	1be2c <__assert_fail@plt+0x9868>
   1ebe8:	ldr	r2, [sp, #4]
   1ebec:	ldr	r1, [pc, #64]	; 1ec34 <__assert_fail@plt+0xc670>
   1ebf0:	ldr	r0, [pc, #64]	; 1ec38 <__assert_fail@plt+0xc674>
   1ebf4:	bl	1eaec <__assert_fail@plt+0xc528>
   1ebf8:	subs	r5, r0, #0
   1ebfc:	streq	r6, [r4]
   1ec00:	beq	1ebd8 <__assert_fail@plt+0xc614>
   1ec04:	ldr	r1, [sp, #4]
   1ec08:	mov	r0, r7
   1ec0c:	bl	17cc4 <__assert_fail@plt+0x5700>
   1ec10:	mov	r4, r0
   1ec14:	mov	r1, #0
   1ec18:	strb	r1, [r0, #19]
   1ec1c:	strb	r1, [r0, #18]
   1ec20:	ldr	r0, [sp, #4]
   1ec24:	str	r0, [r4, #40]	; 0x28
   1ec28:	bl	1bedc <__assert_fail@plt+0x9918>
   1ec2c:	vstr	s0, [r4, #28]
   1ec30:	b	1ebd8 <__assert_fail@plt+0xc614>
   1ec34:	andeq	r6, r4, r8, lsr #2
   1ec38:	andeq	r6, r4, r4, lsr r1
   1ec3c:	push	{r4, r5, r6, lr}
   1ec40:	sub	sp, sp, #8
   1ec44:	mov	r6, r0
   1ec48:	mov	r4, r1
   1ec4c:	mov	r5, r2
   1ec50:	bl	1be2c <__assert_fail@plt+0x9868>
   1ec54:	add	r2, sp, #4
   1ec58:	mov	r1, r5
   1ec5c:	mov	r0, r4
   1ec60:	bl	1b448 <__assert_fail@plt+0x8e84>
   1ec64:	subs	r4, r0, #0
   1ec68:	bne	1ec78 <__assert_fail@plt+0xc6b4>
   1ec6c:	mov	r0, r4
   1ec70:	add	sp, sp, #8
   1ec74:	pop	{r4, r5, r6, pc}
   1ec78:	ldr	r2, [sp, #4]
   1ec7c:	ldr	r1, [pc, #60]	; 1ecc0 <__assert_fail@plt+0xc6fc>
   1ec80:	ldr	r0, [pc, #60]	; 1ecc4 <__assert_fail@plt+0xc700>
   1ec84:	bl	1eaec <__assert_fail@plt+0xc528>
   1ec88:	subs	r4, r0, #0
   1ec8c:	beq	1ec6c <__assert_fail@plt+0xc6a8>
   1ec90:	ldr	r1, [sp, #4]
   1ec94:	mov	r0, r6
   1ec98:	bl	17cc4 <__assert_fail@plt+0x5700>
   1ec9c:	mov	r5, r0
   1eca0:	mov	r1, #0
   1eca4:	strb	r1, [r0, #19]
   1eca8:	strb	r1, [r0, #18]
   1ecac:	ldr	r0, [sp, #4]
   1ecb0:	str	r0, [r5, #40]	; 0x28
   1ecb4:	bl	1bedc <__assert_fail@plt+0x9918>
   1ecb8:	vstr	s0, [r5, #28]
   1ecbc:	b	1ec6c <__assert_fail@plt+0xc6a8>
   1ecc0:	andeq	r6, r4, ip, lsr r1
   1ecc4:	andeq	r6, r4, r8, asr #2
   1ecc8:	push	{r4, r5, r6, lr}
   1eccc:	mov	r4, r0
   1ecd0:	mov	r5, r1
   1ecd4:	mov	r6, r2
   1ecd8:	ldr	r3, [pc, #76]	; 1ed2c <__assert_fail@plt+0xc768>
   1ecdc:	ldrb	r3, [r3, #17]
   1ece0:	cmp	r3, #0
   1ece4:	bne	1ed18 <__assert_fail@plt+0xc754>
   1ece8:	ldr	r3, [pc, #60]	; 1ed2c <__assert_fail@plt+0xc768>
   1ecec:	ldrb	r3, [r3, #16]
   1ecf0:	cmp	r3, #0
   1ecf4:	beq	1ed18 <__assert_fail@plt+0xc754>
   1ecf8:	mov	r2, #5
   1ecfc:	ldr	r1, [pc, #44]	; 1ed30 <__assert_fail@plt+0xc76c>
   1ed00:	mov	r0, #0
   1ed04:	bl	12084 <dcgettext@plt>
   1ed08:	mov	r2, r0
   1ed0c:	mov	r1, #0
   1ed10:	mov	r0, r1
   1ed14:	bl	121bc <error@plt>
   1ed18:	mov	r2, r6
   1ed1c:	mov	r1, r5
   1ed20:	mov	r0, r4
   1ed24:	bl	1b914 <__assert_fail@plt+0x9350>
   1ed28:	pop	{r4, r5, r6, pc}
   1ed2c:	andeq	r9, r5, ip, ror #28
   1ed30:	andeq	r6, r4, r0, asr r1
   1ed34:	cmp	r0, #0
   1ed38:	beq	1ed80 <__assert_fail@plt+0xc7bc>
   1ed3c:	mov	ip, #0
   1ed40:	ldr	r2, [pc, #108]	; 1edb4 <__assert_fail@plt+0xc7f0>
   1ed44:	ldr	r1, [pc, #108]	; 1edb8 <__assert_fail@plt+0xc7f4>
   1ed48:	b	1ed58 <__assert_fail@plt+0xc794>
   1ed4c:	ldr	r0, [r0, #152]	; 0x98
   1ed50:	cmp	r0, #0
   1ed54:	beq	1ed74 <__assert_fail@plt+0xc7b0>
   1ed58:	ldr	r3, [r0]
   1ed5c:	cmp	r3, r2
   1ed60:	orreq	ip, ip, #1
   1ed64:	beq	1ed4c <__assert_fail@plt+0xc788>
   1ed68:	cmp	r3, r1
   1ed6c:	orreq	ip, ip, #2
   1ed70:	b	1ed4c <__assert_fail@plt+0xc788>
   1ed74:	and	ip, ip, #3
   1ed78:	cmp	ip, #3
   1ed7c:	beq	1ed84 <__assert_fail@plt+0xc7c0>
   1ed80:	bx	lr
   1ed84:	ldr	r3, [pc, #48]	; 1edbc <__assert_fail@plt+0xc7f8>
   1ed88:	ldrb	r3, [r3, #1]
   1ed8c:	cmp	r3, #0
   1ed90:	bne	1ed80 <__assert_fail@plt+0xc7bc>
   1ed94:	push	{r4, lr}
   1ed98:	mov	r2, #5
   1ed9c:	ldr	r1, [pc, #28]	; 1edc0 <__assert_fail@plt+0xc7fc>
   1eda0:	bl	12084 <dcgettext@plt>
   1eda4:	mov	r2, r0
   1eda8:	mov	r1, #0
   1edac:	mov	r0, #1
   1edb0:	bl	121bc <error@plt>
   1edb4:	andeq	r3, r1, r8, ror #24
   1edb8:	andeq	r3, r1, r0, lsr r7
   1edbc:	andeq	r9, r5, ip, ror #28
   1edc0:	andeq	r6, r4, r4, asr #3
   1edc4:	cmp	r0, #1
   1edc8:	beq	1edf8 <__assert_fail@plt+0xc834>
   1edcc:	bcc	1ee18 <__assert_fail@plt+0xc854>
   1edd0:	cmp	r0, #2
   1edd4:	beq	1ee30 <__assert_fail@plt+0xc86c>
   1edd8:	ldr	r3, [pc, #112]	; 1ee50 <__assert_fail@plt+0xc88c>
   1eddc:	str	r0, [r3, #48]	; 0x30
   1ede0:	ldr	r3, [r3, #44]	; 0x2c
   1ede4:	tst	r3, #2
   1ede8:	ldrne	r2, [pc, #100]	; 1ee54 <__assert_fail@plt+0xc890>
   1edec:	ldrne	r3, [pc, #92]	; 1ee50 <__assert_fail@plt+0xc88c>
   1edf0:	strne	r2, [r3, #52]	; 0x34
   1edf4:	bx	lr
   1edf8:	ldr	r3, [pc, #80]	; 1ee50 <__assert_fail@plt+0xc88c>
   1edfc:	ldr	r2, [pc, #84]	; 1ee58 <__assert_fail@plt+0xc894>
   1ee00:	str	r2, [r3, #52]	; 0x34
   1ee04:	ldr	r2, [pc, #80]	; 1ee5c <__assert_fail@plt+0xc898>
   1ee08:	str	r2, [r3, #64]	; 0x40
   1ee0c:	mov	r2, #1
   1ee10:	strb	r2, [r3, #12]
   1ee14:	b	1edd8 <__assert_fail@plt+0xc814>
   1ee18:	ldr	r3, [pc, #48]	; 1ee50 <__assert_fail@plt+0xc88c>
   1ee1c:	ldr	r2, [pc, #60]	; 1ee60 <__assert_fail@plt+0xc89c>
   1ee20:	str	r2, [r3, #52]	; 0x34
   1ee24:	ldr	r2, [pc, #56]	; 1ee64 <__assert_fail@plt+0xc8a0>
   1ee28:	str	r2, [r3, #64]	; 0x40
   1ee2c:	b	1edd8 <__assert_fail@plt+0xc814>
   1ee30:	ldr	r3, [pc, #24]	; 1ee50 <__assert_fail@plt+0xc88c>
   1ee34:	ldr	r2, [pc, #44]	; 1ee68 <__assert_fail@plt+0xc8a4>
   1ee38:	str	r2, [r3, #52]	; 0x34
   1ee3c:	ldr	r2, [pc, #40]	; 1ee6c <__assert_fail@plt+0xc8a8>
   1ee40:	str	r2, [r3, #64]	; 0x40
   1ee44:	mov	r2, #1
   1ee48:	strb	r2, [r3, #12]
   1ee4c:	b	1edd8 <__assert_fail@plt+0xc814>
   1ee50:	andeq	r9, r5, ip, ror #28
   1ee54:	andeq	r8, r1, r4, ror #4
   1ee58:	andeq	r8, r1, r8, ror r1
   1ee5c:	andeq	fp, r1, r0, lsr #13
   1ee60:	strdeq	r8, [r1], -ip
   1ee64:	andeq	fp, r1, r8, asr #11
   1ee68:	andeq	r8, r1, ip, asr #1
   1ee6c:	andeq	fp, r1, r0, asr r6
   1ee70:	push	{r4, r5, r6, lr}
   1ee74:	mov	r4, r0
   1ee78:	mov	r5, r1
   1ee7c:	mov	r6, r2
   1ee80:	mov	r0, #1
   1ee84:	bl	1edc4 <__assert_fail@plt+0xc800>
   1ee88:	mov	r2, r6
   1ee8c:	mov	r1, r5
   1ee90:	mov	r0, r4
   1ee94:	bl	1b808 <__assert_fail@plt+0x9244>
   1ee98:	pop	{r4, r5, r6, pc}
   1ee9c:	mov	r2, #0
   1eea0:	ldr	r3, [pc, #4]	; 1eeac <__assert_fail@plt+0xc8e8>
   1eea4:	str	r2, [r3]
   1eea8:	bx	lr
   1eeac:	ldrdeq	r9, [r5], -r0
   1eeb0:	bx	lr
   1eeb4:	push	{r4, r5, r6, r7, r8, lr}
   1eeb8:	mov	r7, r0
   1eebc:	mov	r2, #6
   1eec0:	mov	r1, r0
   1eec4:	ldr	r0, [pc, #128]	; 1ef4c <__assert_fail@plt+0xc988>
   1eec8:	bl	12564 <strncmp@plt>
   1eecc:	cmp	r0, #0
   1eed0:	bne	1eee4 <__assert_fail@plt+0xc920>
   1eed4:	mov	r0, r7
   1eed8:	bl	122d0 <strlen@plt>
   1eedc:	cmp	r0, #8
   1eee0:	beq	1ef28 <__assert_fail@plt+0xc964>
   1eee4:	ldrb	r3, [r7]
   1eee8:	cmp	r3, #45	; 0x2d
   1eeec:	addeq	r6, r7, #1
   1eef0:	movne	r6, r7
   1eef4:	ldr	r4, [pc, #84]	; 1ef50 <__assert_fail@plt+0xc98c>
   1eef8:	ldr	r0, [pc, #84]	; 1ef54 <__assert_fail@plt+0xc990>
   1eefc:	mov	r5, #0
   1ef00:	mov	r1, r6
   1ef04:	bl	11f1c <strcmp@plt>
   1ef08:	cmp	r0, #0
   1ef0c:	beq	1ef38 <__assert_fail@plt+0xc974>
   1ef10:	add	r5, r5, #1
   1ef14:	add	r4, r4, #16
   1ef18:	ldr	r0, [r4, #4]
   1ef1c:	cmp	r0, #0
   1ef20:	bne	1ef00 <__assert_fail@plt+0xc93c>
   1ef24:	pop	{r4, r5, r6, r7, r8, pc}
   1ef28:	ldr	r1, [pc, #40]	; 1ef58 <__assert_fail@plt+0xc994>
   1ef2c:	mov	r0, r7
   1ef30:	bl	1b4f8 <__assert_fail@plt+0x8f34>
   1ef34:	pop	{r4, r5, r6, r7, r8, pc}
   1ef38:	ldr	r1, [pc, #16]	; 1ef50 <__assert_fail@plt+0xc98c>
   1ef3c:	add	r1, r1, r5, lsl #4
   1ef40:	mov	r0, r7
   1ef44:	bl	1b4f8 <__assert_fail@plt+0x8f34>
   1ef48:	pop	{r4, r5, r6, r7, r8, pc}
   1ef4c:	andeq	r5, r4, r4, ror #29
   1ef50:	andeq	r4, r4, ip, ror sp
   1ef54:	andeq	r3, r4, r0, asr #7
   1ef58:	andeq	r5, r4, r4, lsr r3
   1ef5c:	push	{r4, lr}
   1ef60:	ldr	r0, [pc, #40]	; 1ef90 <__assert_fail@plt+0xc9cc>
   1ef64:	bl	1eeb4 <__assert_fail@plt+0xc8f0>
   1ef68:	bl	17d04 <__assert_fail@plt+0x5740>
   1ef6c:	mov	r3, #0
   1ef70:	strb	r3, [r0, #19]
   1ef74:	strb	r3, [r0, #18]
   1ef78:	strb	r3, [r0, #17]
   1ef7c:	strb	r3, [r0, #16]
   1ef80:	mov	r3, #0
   1ef84:	str	r3, [r0, #28]
   1ef88:	mov	r0, #1
   1ef8c:	pop	{r4, pc}
   1ef90:	andeq	r6, r4, r0, ror r2
   1ef94:	push	{r4, lr}
   1ef98:	bl	1ef5c <__assert_fail@plt+0xc998>
   1ef9c:	pop	{r4, pc}
   1efa0:	push	{r4, r5, r6, lr}
   1efa4:	sub	sp, sp, #112	; 0x70
   1efa8:	mov	r5, r0
   1efac:	mov	r0, r1
   1efb0:	mov	r1, r2
   1efb4:	add	r2, sp, #108	; 0x6c
   1efb8:	bl	1b448 <__assert_fail@plt+0x8e84>
   1efbc:	subs	r4, r0, #0
   1efc0:	beq	1f038 <__assert_fail@plt+0xca74>
   1efc4:	ldr	r3, [pc, #200]	; 1f094 <__assert_fail@plt+0xcad0>
   1efc8:	ldrh	r3, [r3, #68]	; 0x44
   1efcc:	cmp	r3, #1
   1efd0:	bls	1f000 <__assert_fail@plt+0xca3c>
   1efd4:	ldr	r0, [sp, #108]	; 0x6c
   1efd8:	bl	1b23c <__assert_fail@plt+0x8c78>
   1efdc:	cmp	r0, #0
   1efe0:	bne	1f000 <__assert_fail@plt+0xca3c>
   1efe4:	ldr	r3, [pc, #168]	; 1f094 <__assert_fail@plt+0xcad0>
   1efe8:	ldr	r3, [r3, #44]	; 0x2c
   1efec:	tst	r3, #8
   1eff0:	bne	1f070 <__assert_fail@plt+0xcaac>
   1eff4:	bl	1ef5c <__assert_fail@plt+0xc998>
   1eff8:	mov	r4, r0
   1effc:	b	1f038 <__assert_fail@plt+0xca74>
   1f000:	ldr	r1, [sp, #108]	; 0x6c
   1f004:	mov	r0, r5
   1f008:	bl	17cc4 <__assert_fail@plt+0x5700>
   1f00c:	mov	r5, r0
   1f010:	ldr	r6, [sp, #108]	; 0x6c
   1f014:	str	r6, [r0, #40]	; 0x28
   1f018:	mov	r2, sp
   1f01c:	ldr	r1, [pc, #116]	; 1f098 <__assert_fail@plt+0xcad4>
   1f020:	mov	r0, #3
   1f024:	bl	12528 <__xstat64@plt>
   1f028:	cmp	r0, #0
   1f02c:	beq	1f044 <__assert_fail@plt+0xca80>
   1f030:	vldr	s15, [pc, #80]	; 1f088 <__assert_fail@plt+0xcac4>
   1f034:	vstr	s15, [r5, #28]
   1f038:	mov	r0, r4
   1f03c:	add	sp, sp, #112	; 0x70
   1f040:	pop	{r4, r5, r6, pc}
   1f044:	ldr	r1, [pc, #76]	; 1f098 <__assert_fail@plt+0xcad4>
   1f048:	mov	r0, sp
   1f04c:	bl	1b10c <__assert_fail@plt+0x8b48>
   1f050:	mov	r1, r0
   1f054:	mov	r0, r6
   1f058:	bl	11f1c <strcmp@plt>
   1f05c:	cmp	r0, #0
   1f060:	vldr	s14, [pc, #36]	; 1f08c <__assert_fail@plt+0xcac8>
   1f064:	vldr	s15, [pc, #36]	; 1f090 <__assert_fail@plt+0xcacc>
   1f068:	vmovne.f32	s15, s14
   1f06c:	b	1f034 <__assert_fail@plt+0xca70>
   1f070:	ldr	r2, [sp, #108]	; 0x6c
   1f074:	ldr	r1, [pc, #32]	; 1f09c <__assert_fail@plt+0xcad8>
   1f078:	ldr	r3, [pc, #32]	; 1f0a0 <__assert_fail@plt+0xcadc>
   1f07c:	ldr	r0, [r3]
   1f080:	bl	1230c <fprintf@plt>
   1f084:	b	1eff4 <__assert_fail@plt+0xca30>
   1f088:	svccc	0x00800000
   1f08c:			; <UNDEFINED> instruction: 0x3e99999a
   1f090:	svccc	0x00333333
   1f094:	andeq	r9, r5, ip, ror #28
   1f098:	andeq	r8, r4, r0, lsr #11
   1f09c:	andeq	r6, r4, r8, ror r2
   1f0a0:	andeq	r9, r5, r8, asr #10
   1f0a4:	mov	r0, #0
   1f0a8:	bx	lr
   1f0ac:	push	{r4, r5, lr}
   1f0b0:	sub	sp, sp, #20
   1f0b4:	mov	r5, r0
   1f0b8:	mov	r4, r1
   1f0bc:	bl	121f8 <getenv@plt>
   1f0c0:	cmp	r0, #0
   1f0c4:	beq	1f12c <__assert_fail@plt+0xcb68>
   1f0c8:	mov	r3, #0
   1f0cc:	str	r3, [sp]
   1f0d0:	add	r3, sp, #12
   1f0d4:	mov	r2, #10
   1f0d8:	add	r1, sp, #8
   1f0dc:	bl	2d30c <__assert_fail@plt+0x1ad48>
   1f0e0:	cmp	r0, #0
   1f0e4:	bne	1f100 <__assert_fail@plt+0xcb3c>
   1f0e8:	ldr	r0, [sp, #12]
   1f0ec:	cmp	r0, r4
   1f0f0:	movcs	r0, #0
   1f0f4:	movcc	r0, #1
   1f0f8:	add	sp, sp, #20
   1f0fc:	pop	{r4, r5, pc}
   1f100:	bl	12318 <__errno_location@plt>
   1f104:	ldr	r4, [r0]
   1f108:	mov	r2, #5
   1f10c:	ldr	r1, [pc, #32]	; 1f134 <__assert_fail@plt+0xcb70>
   1f110:	mov	r0, #0
   1f114:	bl	12084 <dcgettext@plt>
   1f118:	mov	r3, r5
   1f11c:	mov	r2, r0
   1f120:	mov	r1, r4
   1f124:	mov	r0, #1
   1f128:	bl	121bc <error@plt>
   1f12c:	mov	r0, #0
   1f130:	b	1f0f8 <__assert_fail@plt+0xcb34>
   1f134:	andeq	r6, r4, r8, lsl r5
   1f138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f13c:	ldr	r9, [sp, #36]	; 0x24
   1f140:	ldr	r7, [sp, #40]	; 0x28
   1f144:	subs	r6, r2, #0
   1f148:	beq	1f2f0 <__assert_fail@plt+0xcd2c>
   1f14c:	mov	r5, r0
   1f150:	mov	r4, r1
   1f154:	mov	r8, r3
   1f158:	ldr	r3, [pc, #624]	; 1f3d0 <__assert_fail@plt+0xce0c>
   1f15c:	cmp	r6, r3
   1f160:	beq	1f200 <__assert_fail@plt+0xcc3c>
   1f164:	add	r3, r8, r9
   1f168:	ldr	r2, [r1, #16]
   1f16c:	add	r3, r3, r2
   1f170:	ldr	r2, [r0, #12]
   1f174:	cmp	r3, r2
   1f178:	bls	1f344 <__assert_fail@plt+0xcd80>
   1f17c:	cmp	r7, #0
   1f180:	bne	1f304 <__assert_fail@plt+0xcd40>
   1f184:	ldr	r2, [r1]
   1f188:	ldr	r3, [r0, #28]
   1f18c:	cmp	r2, r3
   1f190:	beq	1f304 <__assert_fail@plt+0xcd40>
   1f194:	ldr	r3, [r0, #24]
   1f198:	cmp	r3, #0
   1f19c:	bne	1f324 <__assert_fail@plt+0xcd60>
   1f1a0:	ldr	r3, [r0]
   1f1a4:	cmp	r3, #0
   1f1a8:	beq	1f1c4 <__assert_fail@plt+0xcc00>
   1f1ac:	ldr	r3, [r0, #36]	; 0x24
   1f1b0:	cmp	r3, #0
   1f1b4:	bne	1f324 <__assert_fail@plt+0xcd60>
   1f1b8:	ldr	r3, [r0, #40]	; 0x28
   1f1bc:	cmp	r3, #0
   1f1c0:	bne	1f324 <__assert_fail@plt+0xcd60>
   1f1c4:	mov	r1, r4
   1f1c8:	mov	r0, r5
   1f1cc:	bl	1f580 <__assert_fail@plt+0xcfbc>
   1f1d0:	ldr	r3, [r5, #40]	; 0x28
   1f1d4:	cmp	r3, #0
   1f1d8:	beq	1f1f0 <__assert_fail@plt+0xcc2c>
   1f1dc:	ldr	r2, [r4]
   1f1e0:	ldr	r1, [r5, #28]
   1f1e4:	sub	r2, r2, r1
   1f1e8:	cmp	r3, r2
   1f1ec:	beq	1f35c <__assert_fail@plt+0xcd98>
   1f1f0:	ldr	r2, [r4]
   1f1f4:	ldr	r3, [r5, #16]
   1f1f8:	cmp	r2, r3
   1f1fc:	beq	1f35c <__assert_fail@plt+0xcd98>
   1f200:	cmp	r7, #0
   1f204:	moveq	r3, #1
   1f208:	streq	r3, [r4, #28]
   1f20c:	ldr	r1, [r4, #8]
   1f210:	ldr	r3, [r4]
   1f214:	cmp	r3, r1
   1f218:	bcc	1f23c <__assert_fail@plt+0xcc78>
   1f21c:	ldr	r0, [r4, #4]
   1f220:	cmp	r0, #0
   1f224:	beq	1f36c <__assert_fail@plt+0xcda8>
   1f228:	lsl	r3, r1, #1
   1f22c:	str	r3, [r4, #8]
   1f230:	lsl	r1, r1, #3
   1f234:	bl	2cc48 <__assert_fail@plt+0x1a684>
   1f238:	str	r0, [r4, #4]
   1f23c:	ldr	r3, [pc, #396]	; 1f3d0 <__assert_fail@plt+0xce0c>
   1f240:	cmp	r6, r3
   1f244:	beq	1f384 <__assert_fail@plt+0xcdc0>
   1f248:	ldr	r1, [r4, #4]
   1f24c:	ldr	r2, [r4]
   1f250:	add	r3, r2, #1
   1f254:	str	r3, [r4]
   1f258:	ldr	r3, [r4, #12]
   1f25c:	ldr	r0, [r4, #16]
   1f260:	add	r3, r3, r0
   1f264:	str	r3, [r1, r2, lsl #2]
   1f268:	ldr	r3, [sp, #32]
   1f26c:	cmp	r3, #0
   1f270:	beq	1f294 <__assert_fail@plt+0xccd0>
   1f274:	ldr	r0, [r4, #12]
   1f278:	ldr	r3, [r4, #16]
   1f27c:	ldr	r1, [sp, #32]
   1f280:	add	r0, r0, r3
   1f284:	bl	12180 <strcpy@plt>
   1f288:	ldr	r3, [r4, #16]
   1f28c:	add	r9, r3, r9
   1f290:	str	r9, [r4, #16]
   1f294:	ldr	r0, [r4, #12]
   1f298:	ldr	r3, [r4, #16]
   1f29c:	mov	r1, r6
   1f2a0:	add	r0, r0, r3
   1f2a4:	bl	12180 <strcpy@plt>
   1f2a8:	ldr	r3, [r4, #16]
   1f2ac:	add	r3, r3, r8
   1f2b0:	str	r3, [r4, #16]
   1f2b4:	cmp	r7, #0
   1f2b8:	bne	1f3a0 <__assert_fail@plt+0xcddc>
   1f2bc:	ldr	r3, [r5, #40]	; 0x28
   1f2c0:	cmp	r3, #0
   1f2c4:	beq	1f2dc <__assert_fail@plt+0xcd18>
   1f2c8:	ldr	r2, [r4]
   1f2cc:	ldr	r1, [r5, #28]
   1f2d0:	sub	r2, r2, r1
   1f2d4:	cmp	r3, r2
   1f2d8:	beq	1f3b0 <__assert_fail@plt+0xcdec>
   1f2dc:	ldr	r2, [r4]
   1f2e0:	ldr	r3, [r5, #16]
   1f2e4:	cmp	r2, r3
   1f2e8:	beq	1f3b0 <__assert_fail@plt+0xcdec>
   1f2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2f0:	ldr	r3, [pc, #220]	; 1f3d4 <__assert_fail@plt+0xce10>
   1f2f4:	ldr	r2, [pc, #220]	; 1f3d8 <__assert_fail@plt+0xce14>
   1f2f8:	ldr	r1, [pc, #220]	; 1f3dc <__assert_fail@plt+0xce18>
   1f2fc:	ldr	r0, [pc, #220]	; 1f3e0 <__assert_fail@plt+0xce1c>
   1f300:	bl	125c4 <__assert_fail@plt>
   1f304:	mov	r2, #5
   1f308:	ldr	r1, [pc, #212]	; 1f3e4 <__assert_fail@plt+0xce20>
   1f30c:	mov	r0, #0
   1f310:	bl	12084 <dcgettext@plt>
   1f314:	mov	r2, r0
   1f318:	mov	r1, #0
   1f31c:	mov	r0, #1
   1f320:	bl	121bc <error@plt>
   1f324:	mov	r2, #5
   1f328:	ldr	r1, [pc, #184]	; 1f3e8 <__assert_fail@plt+0xce24>
   1f32c:	mov	r0, #0
   1f330:	bl	12084 <dcgettext@plt>
   1f334:	mov	r2, r0
   1f338:	mov	r1, #0
   1f33c:	mov	r0, #1
   1f340:	bl	121bc <error@plt>
   1f344:	cmp	r7, #0
   1f348:	beq	1f1d0 <__assert_fail@plt+0xcc0c>
   1f34c:	ldr	r2, [r1]
   1f350:	ldr	r3, [r0, #16]
   1f354:	cmp	r2, r3
   1f358:	bne	1f20c <__assert_fail@plt+0xcc48>
   1f35c:	mov	r1, r4
   1f360:	mov	r0, r5
   1f364:	bl	1f580 <__assert_fail@plt+0xcfbc>
   1f368:	b	1f200 <__assert_fail@plt+0xcc3c>
   1f36c:	mov	r3, #64	; 0x40
   1f370:	str	r3, [r4, #8]
   1f374:	mov	r0, #256	; 0x100
   1f378:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1f37c:	str	r0, [r4, #4]
   1f380:	b	1f23c <__assert_fail@plt+0xcc78>
   1f384:	ldr	r2, [r4, #4]
   1f388:	ldr	r3, [r4]
   1f38c:	add	r1, r3, #1
   1f390:	str	r1, [r4]
   1f394:	mov	r1, #0
   1f398:	str	r1, [r2, r3, lsl #2]
   1f39c:	b	1f3bc <__assert_fail@plt+0xcdf8>
   1f3a0:	ldr	r2, [r4]
   1f3a4:	ldr	r3, [r5, #16]
   1f3a8:	cmp	r2, r3
   1f3ac:	bne	1f3c4 <__assert_fail@plt+0xce00>
   1f3b0:	mov	r1, r4
   1f3b4:	mov	r0, r5
   1f3b8:	bl	1f580 <__assert_fail@plt+0xcfbc>
   1f3bc:	cmp	r7, #0
   1f3c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f3c4:	ldr	r3, [r4, #16]
   1f3c8:	str	r3, [r4, #20]
   1f3cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f3d0:	andeq	r6, r4, r0, ror r5
   1f3d4:	ldrdeq	r6, [r4], -r0
   1f3d8:	andeq	r0, r0, r5, asr r1
   1f3dc:	andeq	r6, r4, r8, asr r5
   1f3e0:	andeq	r6, r4, r4, ror #10
   1f3e4:	andeq	r6, r4, ip, ror r5
   1f3e8:			; <UNDEFINED> instruction: 0x000465b8
   1f3ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3f0:	sub	sp, sp, #28
   1f3f4:	mov	sl, r0
   1f3f8:	str	r1, [sp, #20]
   1f3fc:	mov	r8, r2
   1f400:	mov	r5, r3
   1f404:	ldr	r0, [r0, #12]
   1f408:	sub	r7, r0, #1
   1f40c:	ldr	r3, [pc, #356]	; 1f578 <__assert_fail@plt+0xcfb4>
   1f410:	ldr	r3, [r3]
   1f414:	cmp	r3, #0
   1f418:	beq	1f43c <__assert_fail@plt+0xce78>
   1f41c:	ldr	r3, [pc, #340]	; 1f578 <__assert_fail@plt+0xcfb4>
   1f420:	ldr	r3, [r3]
   1f424:	str	r3, [sp, #16]
   1f428:	mov	r6, r3
   1f42c:	ldr	r3, [sp, #76]	; 0x4c
   1f430:	ldr	r2, [sp, #68]	; 0x44
   1f434:	add	fp, r3, r2
   1f438:	b	1f47c <__assert_fail@plt+0xceb8>
   1f43c:	add	r0, r0, #1
   1f440:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1f444:	ldr	r3, [pc, #300]	; 1f578 <__assert_fail@plt+0xcfb4>
   1f448:	str	r0, [r3]
   1f44c:	b	1f41c <__assert_fail@plt+0xce58>
   1f450:	ldr	r1, [sp, #72]	; 0x48
   1f454:	mov	r0, r6
   1f458:	bl	12180 <strcpy@plt>
   1f45c:	ldr	r3, [sp, #76]	; 0x4c
   1f460:	add	r6, r6, r3
   1f464:	ldr	r5, [sl, #20]
   1f468:	add	r8, r9, r5
   1f46c:	sub	r5, r4, r5
   1f470:	ldrb	r3, [r8]
   1f474:	cmp	r3, #0
   1f478:	beq	1f4f8 <__assert_fail@plt+0xcf34>
   1f47c:	ldr	r1, [sl, #24]
   1f480:	mov	r0, r8
   1f484:	bl	243a4 <__assert_fail@plt+0x11de0>
   1f488:	subs	r9, r0, #0
   1f48c:	beq	1f54c <__assert_fail@plt+0xcf88>
   1f490:	sub	r4, r9, r8
   1f494:	cmp	r7, r4
   1f498:	bls	1f4ec <__assert_fail@plt+0xcf28>
   1f49c:	sub	r7, r7, r4
   1f4a0:	mov	r2, r4
   1f4a4:	mov	r1, r8
   1f4a8:	mov	r0, r6
   1f4ac:	bl	12360 <strncpy@plt>
   1f4b0:	add	r6, r6, r4
   1f4b4:	sub	r4, r5, r4
   1f4b8:	cmp	fp, r7
   1f4bc:	bcs	1f4e8 <__assert_fail@plt+0xcf24>
   1f4c0:	sub	r7, r7, fp
   1f4c4:	ldr	r3, [sp, #64]	; 0x40
   1f4c8:	cmp	r3, #0
   1f4cc:	beq	1f450 <__assert_fail@plt+0xce8c>
   1f4d0:	mov	r1, r3
   1f4d4:	mov	r0, r6
   1f4d8:	bl	12180 <strcpy@plt>
   1f4dc:	ldr	r3, [sp, #68]	; 0x44
   1f4e0:	add	r6, r6, r3
   1f4e4:	b	1f450 <__assert_fail@plt+0xce8c>
   1f4e8:	mov	r8, r9
   1f4ec:	ldrb	r3, [r8]
   1f4f0:	cmp	r3, #0
   1f4f4:	bne	1f52c <__assert_fail@plt+0xcf68>
   1f4f8:	mov	r3, #0
   1f4fc:	strb	r3, [r6], #1
   1f500:	ldr	r2, [sp, #80]	; 0x50
   1f504:	str	r2, [sp, #8]
   1f508:	str	r3, [sp, #4]
   1f50c:	str	r3, [sp]
   1f510:	ldr	r2, [sp, #16]
   1f514:	sub	r3, r6, r2
   1f518:	ldr	r1, [sp, #20]
   1f51c:	mov	r0, sl
   1f520:	bl	1f138 <__assert_fail@plt+0xcb74>
   1f524:	add	sp, sp, #28
   1f528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f52c:	mov	r2, #5
   1f530:	ldr	r1, [pc, #68]	; 1f57c <__assert_fail@plt+0xcfb8>
   1f534:	mov	r0, #0
   1f538:	bl	12084 <dcgettext@plt>
   1f53c:	mov	r2, r0
   1f540:	mov	r1, #0
   1f544:	mov	r0, #1
   1f548:	bl	121bc <error@plt>
   1f54c:	cmp	r5, r7
   1f550:	bcs	1f4ec <__assert_fail@plt+0xcf28>
   1f554:	sub	r7, r7, r5
   1f558:	mov	r2, r5
   1f55c:	mov	r1, r8
   1f560:	mov	r0, r6
   1f564:	bl	12360 <strncpy@plt>
   1f568:	add	r6, r6, r5
   1f56c:	add	r8, r8, r5
   1f570:	mov	r5, #0
   1f574:	b	1f470 <__assert_fail@plt+0xceac>
   1f578:	ldrdeq	r9, [r5], -ip
   1f57c:	ldrdeq	r6, [r4], -r0
   1f580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f584:	sub	sp, sp, #20
   1f588:	mov	r8, r0
   1f58c:	mov	r7, r1
   1f590:	mov	r3, #0
   1f594:	str	r3, [sp, #8]
   1f598:	str	r3, [sp, #4]
   1f59c:	str	r3, [sp]
   1f5a0:	ldr	r2, [pc, #672]	; 1f848 <__assert_fail@plt+0xd284>
   1f5a4:	bl	1f138 <__assert_fail@plt+0xcb74>
   1f5a8:	ldr	r3, [r7]
   1f5ac:	cmp	r3, #0
   1f5b0:	beq	1f5e8 <__assert_fail@plt+0xd024>
   1f5b4:	sub	r3, r3, #-1073741823	; 0xc0000001
   1f5b8:	lsl	r0, r3, #2
   1f5bc:	ldr	r2, [r7, #4]
   1f5c0:	ldr	r3, [r2, r3, lsl #2]
   1f5c4:	cmp	r3, #0
   1f5c8:	bne	1f5fc <__assert_fail@plt+0xd038>
   1f5cc:	add	r0, r0, #8
   1f5d0:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1f5d4:	mov	r9, r0
   1f5d8:	ldr	r5, [r7]
   1f5dc:	mov	r6, #0
   1f5e0:	mov	sl, r6
   1f5e4:	b	1f6f8 <__assert_fail@plt+0xd134>
   1f5e8:	ldr	r3, [pc, #604]	; 1f84c <__assert_fail@plt+0xd288>
   1f5ec:	ldr	r2, [pc, #604]	; 1f850 <__assert_fail@plt+0xd28c>
   1f5f0:	ldr	r1, [pc, #604]	; 1f854 <__assert_fail@plt+0xd290>
   1f5f4:	ldr	r0, [pc, #604]	; 1f858 <__assert_fail@plt+0xd294>
   1f5f8:	bl	125c4 <__assert_fail@plt>
   1f5fc:	ldr	r3, [pc, #584]	; 1f84c <__assert_fail@plt+0xd288>
   1f600:	ldr	r2, [pc, #596]	; 1f85c <__assert_fail@plt+0xd298>
   1f604:	ldr	r1, [pc, #584]	; 1f854 <__assert_fail@plt+0xd290>
   1f608:	ldr	r0, [pc, #592]	; 1f860 <__assert_fail@plt+0xd29c>
   1f60c:	bl	125c4 <__assert_fail@plt>
   1f610:	ldr	r3, [pc, #588]	; 1f864 <__assert_fail@plt+0xd2a0>
   1f614:	mov	r2, #242	; 0xf2
   1f618:	ldr	r1, [pc, #564]	; 1f854 <__assert_fail@plt+0xd290>
   1f61c:	ldr	r0, [pc, #580]	; 1f868 <__assert_fail@plt+0xd2a4>
   1f620:	bl	125c4 <__assert_fail@plt>
   1f624:	mov	r4, r0
   1f628:	b	1f788 <__assert_fail@plt+0xd1c4>
   1f62c:	ldr	r3, [r7, #36]	; 0x24
   1f630:	cmp	r5, r3
   1f634:	strhi	r5, [r7, #36]	; 0x24
   1f638:	ldr	r3, [r7, #36]	; 0x24
   1f63c:	cmp	r3, #0
   1f640:	beq	1f650 <__assert_fail@plt+0xd08c>
   1f644:	ldr	r2, [r7, #40]	; 0x28
   1f648:	cmp	r3, r2
   1f64c:	bcc	1f688 <__assert_fail@plt+0xd0c4>
   1f650:	cmn	r5, #1
   1f654:	addne	r5, r5, #1
   1f658:	beq	1f838 <__assert_fail@plt+0xd274>
   1f65c:	ldr	r3, [r8, #28]
   1f660:	cmp	r3, #0
   1f664:	beq	1f674 <__assert_fail@plt+0xd0b0>
   1f668:	add	r2, r3, #1
   1f66c:	cmp	r5, r2
   1f670:	movcc	r5, r2
   1f674:	cmp	r5, #0
   1f678:	moveq	r5, #1
   1f67c:	add	r6, r6, r4
   1f680:	sub	r6, r6, r3
   1f684:	b	1f6e0 <__assert_fail@plt+0xd11c>
   1f688:	sub	r3, r2, r3
   1f68c:	lsrs	r3, r3, #1
   1f690:	addne	r5, r5, r3
   1f694:	addeq	r5, r5, #1
   1f698:	b	1f65c <__assert_fail@plt+0xd098>
   1f69c:	mov	r2, #5
   1f6a0:	ldr	r1, [pc, #452]	; 1f86c <__assert_fail@plt+0xd2a8>
   1f6a4:	mov	r0, #0
   1f6a8:	bl	12084 <dcgettext@plt>
   1f6ac:	mov	r2, r0
   1f6b0:	mov	r1, #0
   1f6b4:	mov	r0, #1
   1f6b8:	bl	121bc <error@plt>
   1f6bc:	lsr	r5, r5, #1
   1f6c0:	ldr	r3, [r8, #28]
   1f6c4:	cmp	r3, #0
   1f6c8:	beq	1f6d8 <__assert_fail@plt+0xd114>
   1f6cc:	add	r3, r3, #1
   1f6d0:	cmp	r5, r3
   1f6d4:	movcc	r5, r3
   1f6d8:	cmp	r5, #0
   1f6dc:	moveq	r5, #1
   1f6e0:	add	r2, r6, #1
   1f6e4:	ldr	r3, [r7]
   1f6e8:	ldr	r1, [r8, #28]
   1f6ec:	sub	r3, r3, r1
   1f6f0:	cmp	r2, r3
   1f6f4:	bcs	1f808 <__assert_fail@plt+0xd244>
   1f6f8:	ldr	r0, [r8, #28]
   1f6fc:	cmp	r0, #0
   1f700:	beq	1f720 <__assert_fail@plt+0xd15c>
   1f704:	ldr	r3, [r7, #4]
   1f708:	sub	r2, r9, #4
   1f70c:	add	ip, r3, r0, lsl #2
   1f710:	ldr	r1, [r3], #4
   1f714:	str	r1, [r2, #4]!
   1f718:	cmp	r3, ip
   1f71c:	bne	1f710 <__assert_fail@plt+0xd14c>
   1f720:	add	r3, r6, r0
   1f724:	ldr	ip, [r7]
   1f728:	cmp	r5, r0
   1f72c:	movls	r2, #0
   1f730:	movhi	r2, #1
   1f734:	cmp	r3, ip
   1f738:	movcs	r2, #0
   1f73c:	cmp	r2, #0
   1f740:	beq	1f624 <__assert_fail@plt+0xd060>
   1f744:	ldr	r2, [r7, #4]
   1f748:	add	r2, r2, r3, lsl #2
   1f74c:	add	r1, r9, r0, lsl #2
   1f750:	mov	r4, r0
   1f754:	add	r4, r4, #1
   1f758:	ldr	r3, [r2], #4
   1f75c:	str	r3, [r1], #4
   1f760:	add	r3, r6, r4
   1f764:	cmp	r3, ip
   1f768:	movcs	r3, #0
   1f76c:	movcc	r3, #1
   1f770:	cmp	r5, r4
   1f774:	movls	r3, #0
   1f778:	cmp	r3, #0
   1f77c:	bne	1f754 <__assert_fail@plt+0xd190>
   1f780:	cmp	r0, r4
   1f784:	bhi	1f610 <__assert_fail@plt+0xd04c>
   1f788:	str	sl, [r9, r4, lsl #2]
   1f78c:	ldr	fp, [r8, #32]
   1f790:	mov	r3, r9
   1f794:	mov	r2, r4
   1f798:	ldr	r1, [r7, #24]
   1f79c:	mov	r0, r8
   1f7a0:	blx	fp
   1f7a4:	cmp	r0, #0
   1f7a8:	bne	1f62c <__assert_fail@plt+0xd068>
   1f7ac:	ldr	r3, [r8, #28]
   1f7b0:	add	r3, r3, #1
   1f7b4:	cmp	r5, r3
   1f7b8:	bls	1f69c <__assert_fail@plt+0xd0d8>
   1f7bc:	ldr	r2, [r7, #40]	; 0x28
   1f7c0:	cmp	r5, r2
   1f7c4:	movcs	r3, #0
   1f7c8:	movcc	r3, #1
   1f7cc:	cmp	r2, #0
   1f7d0:	orreq	r3, r3, #1
   1f7d4:	cmp	r3, #0
   1f7d8:	strne	r5, [r7, #40]	; 0x28
   1f7dc:	ldr	r3, [r7, #36]	; 0x24
   1f7e0:	cmp	r3, #0
   1f7e4:	beq	1f6bc <__assert_fail@plt+0xd0f8>
   1f7e8:	ldr	r2, [r7, #40]	; 0x28
   1f7ec:	cmp	r3, r2
   1f7f0:	bcs	1f6bc <__assert_fail@plt+0xd0f8>
   1f7f4:	sub	r3, r2, r3
   1f7f8:	lsrs	r3, r3, #1
   1f7fc:	subne	r5, r5, r3
   1f800:	subeq	r5, r5, #1
   1f804:	b	1f6c0 <__assert_fail@plt+0xd0fc>
   1f808:	mov	r0, r9
   1f80c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1f810:	ldr	r3, [r8, #28]
   1f814:	str	r3, [r7]
   1f818:	ldr	r3, [r7, #20]
   1f81c:	str	r3, [r7, #16]
   1f820:	mov	r3, #0
   1f824:	str	r3, [r7, #28]
   1f828:	mvn	r3, #0
   1f82c:	str	r3, [r7, #32]
   1f830:	add	sp, sp, #20
   1f834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f838:	ldr	r3, [r8, #28]
   1f83c:	cmp	r3, #0
   1f840:	bne	1f668 <__assert_fail@plt+0xd0a4>
   1f844:	b	1f67c <__assert_fail@plt+0xd0b8>
   1f848:	andeq	r6, r4, r0, ror r5
   1f84c:	ldrdeq	r6, [r4], -ip
   1f850:	andeq	r0, r0, r5, lsl #2
   1f854:	andeq	r6, r4, r8, asr r5
   1f858:	andeq	r6, r4, r4, ror #11
   1f85c:	andeq	r0, r0, r6, lsl #2
   1f860:	strdeq	r6, [r4], -r8
   1f864:	andeq	r6, r4, r8, ror #9
   1f868:	andeq	r6, r4, r4, lsr #12
   1f86c:	andeq	r6, r4, r4, asr #12
   1f870:	push	{r4, lr}
   1f874:	mov	r0, #0
   1f878:	bl	1209c <sysconf@plt>
   1f87c:	cmp	r0, #0
   1f880:	mvnle	r0, #-2147483648	; 0x80000000
   1f884:	pop	{r4, pc}
   1f888:	push	{r4, r5, r6, lr}
   1f88c:	ldr	r3, [pc, #56]	; 1f8cc <__assert_fail@plt+0xd308>
   1f890:	ldr	r4, [r3]
   1f894:	ldr	r0, [r4]
   1f898:	cmp	r0, #0
   1f89c:	beq	1f8c4 <__assert_fail@plt+0xd300>
   1f8a0:	mov	r5, #0
   1f8a4:	bl	122d0 <strlen@plt>
   1f8a8:	add	r0, r0, #1
   1f8ac:	add	r5, r5, r0
   1f8b0:	ldr	r0, [r4, #4]!
   1f8b4:	cmp	r0, #0
   1f8b8:	bne	1f8a4 <__assert_fail@plt+0xd2e0>
   1f8bc:	mov	r0, r5
   1f8c0:	pop	{r4, r5, r6, pc}
   1f8c4:	mov	r5, #0
   1f8c8:	b	1f8bc <__assert_fail@plt+0xd2f8>
   1f8cc:	andeq	r9, r5, ip, lsr r5
   1f8d0:	push	{r4, r5, r6, lr}
   1f8d4:	mov	r4, r0
   1f8d8:	mov	r6, r1
   1f8dc:	bl	1f888 <__assert_fail@plt+0xd2c4>
   1f8e0:	mov	r5, r0
   1f8e4:	mov	r3, #4096	; 0x1000
   1f8e8:	str	r3, [r4, #8]
   1f8ec:	bl	1f870 <__assert_fail@plt+0xd2ac>
   1f8f0:	str	r0, [r4, #4]
   1f8f4:	mov	r3, #0
   1f8f8:	str	r3, [r4]
   1f8fc:	cmp	r5, r0
   1f900:	bhi	1f974 <__assert_fail@plt+0xd3b0>
   1f904:	add	r3, r5, r6
   1f908:	cmp	r0, r3
   1f90c:	bhi	1f918 <__assert_fail@plt+0xd354>
   1f910:	mov	r0, #2
   1f914:	pop	{r4, r5, r6, pc}
   1f918:	sub	r0, r0, r5
   1f91c:	sub	r1, r0, r6
   1f920:	str	r1, [r4, #4]
   1f924:	lsr	r3, r1, #2
   1f928:	sub	r3, r3, #2
   1f92c:	str	r3, [r4, #16]
   1f930:	cmp	r3, #0
   1f934:	beq	1f960 <__assert_fail@plt+0xd39c>
   1f938:	mov	r0, #0
   1f93c:	str	r0, [r4, #20]
   1f940:	str	r0, [r4, #24]
   1f944:	str	r0, [r4, #28]
   1f948:	ldr	r3, [pc, #44]	; 1f97c <__assert_fail@plt+0xd3b8>
   1f94c:	str	r3, [r4, #32]
   1f950:	str	r0, [r4, #36]	; 0x24
   1f954:	str	r0, [r4, #40]	; 0x28
   1f958:	str	r1, [r4, #12]
   1f95c:	pop	{r4, r5, r6, pc}
   1f960:	ldr	r3, [pc, #24]	; 1f980 <__assert_fail@plt+0xd3bc>
   1f964:	ldr	r2, [pc, #24]	; 1f984 <__assert_fail@plt+0xd3c0>
   1f968:	ldr	r1, [pc, #24]	; 1f988 <__assert_fail@plt+0xd3c4>
   1f96c:	ldr	r0, [pc, #24]	; 1f98c <__assert_fail@plt+0xd3c8>
   1f970:	bl	125c4 <__assert_fail@plt>
   1f974:	mov	r0, #1
   1f978:	pop	{r4, r5, r6, pc}
   1f97c:	andeq	pc, r1, r4, lsr #1
   1f980:	strdeq	r6, [r4], -r4
   1f984:	andeq	r0, r0, r6, lsl #4
   1f988:	andeq	r6, r4, r8, asr r5
   1f98c:	andeq	r6, r4, r8, ror r6
   1f990:	ldr	r3, [r0, #4]
   1f994:	cmp	r3, #131072	; 0x20000
   1f998:	bcc	1f9b0 <__assert_fail@plt+0xd3ec>
   1f99c:	ldr	r3, [r0, #8]
   1f9a0:	cmp	r3, #131072	; 0x20000
   1f9a4:	movls	r3, #131072	; 0x20000
   1f9a8:	str	r3, [r0, #12]
   1f9ac:	bx	lr
   1f9b0:	str	r3, [r0, #12]
   1f9b4:	bx	lr
   1f9b8:	push	{r4, r5, r6, lr}
   1f9bc:	mov	r3, #0
   1f9c0:	str	r3, [r1]
   1f9c4:	str	r3, [r1, #16]
   1f9c8:	str	r3, [r1, #4]
   1f9cc:	str	r3, [r1, #8]
   1f9d0:	str	r3, [r1, #36]	; 0x24
   1f9d4:	str	r3, [r1, #40]	; 0x28
   1f9d8:	ldr	r0, [r0, #12]
   1f9dc:	ldr	r3, [pc, #76]	; 1fa30 <__assert_fail@plt+0xd46c>
   1f9e0:	cmp	r0, r3
   1f9e4:	bhi	1fa1c <__assert_fail@plt+0xd458>
   1f9e8:	mov	r4, r1
   1f9ec:	mov	r5, r2
   1f9f0:	add	r0, r0, #1
   1f9f4:	bl	2cc14 <__assert_fail@plt+0x1a650>
   1f9f8:	str	r0, [r4, #12]
   1f9fc:	mov	r3, #0
   1fa00:	str	r3, [r4, #20]
   1fa04:	str	r3, [r4, #16]
   1fa08:	str	r3, [r4, #28]
   1fa0c:	mvn	r3, #0
   1fa10:	str	r3, [r4, #32]
   1fa14:	str	r5, [r4, #24]
   1fa18:	pop	{r4, r5, r6, pc}
   1fa1c:	ldr	r3, [pc, #16]	; 1fa34 <__assert_fail@plt+0xd470>
   1fa20:	mov	r2, #572	; 0x23c
   1fa24:	ldr	r1, [pc, #12]	; 1fa38 <__assert_fail@plt+0xd474>
   1fa28:	ldr	r0, [pc, #12]	; 1fa3c <__assert_fail@plt+0xd478>
   1fa2c:	bl	125c4 <__assert_fail@plt>
   1fa30:	svcvc	0x00fff7ff
   1fa34:	andeq	r6, r4, r8, lsl #10
   1fa38:	andeq	r6, r4, r8, asr r5
   1fa3c:	muleq	r4, r0, r6
   1fa40:	ldr	r3, [r0, #28]
   1fa44:	str	r3, [r1]
   1fa48:	ldr	r3, [r1, #20]
   1fa4c:	str	r3, [r1, #16]
   1fa50:	mov	r3, #0
   1fa54:	str	r3, [r1, #28]
   1fa58:	mvn	r3, #0
   1fa5c:	str	r3, [r1, #32]
   1fa60:	bx	lr
   1fa64:	push	{r4, r5, r6, lr}
   1fa68:	mov	r5, r0
   1fa6c:	ldr	r0, [r0]
   1fa70:	cmp	r0, #0
   1fa74:	beq	1fab4 <__assert_fail@plt+0xd4f0>
   1fa78:	mov	r4, #0
   1fa7c:	mov	r6, r4
   1fa80:	add	r4, r4, #1
   1fa84:	bl	122d0 <strlen@plt>
   1fa88:	add	r6, r6, r0
   1fa8c:	ldr	r0, [r5, #4]!
   1fa90:	cmp	r0, #0
   1fa94:	bne	1fa80 <__assert_fail@plt+0xd4bc>
   1fa98:	mov	r1, r4
   1fa9c:	ldr	r0, [pc, #52]	; 1fad8 <__assert_fail@plt+0xd514>
   1faa0:	bl	1f0ac <__assert_fail@plt+0xcae8>
   1faa4:	cmp	r0, #0
   1faa8:	beq	1fac0 <__assert_fail@plt+0xd4fc>
   1faac:	mov	r0, #1
   1fab0:	pop	{r4, r5, r6, pc}
   1fab4:	mov	r4, #0
   1fab8:	mov	r6, r4
   1fabc:	b	1fa98 <__assert_fail@plt+0xd4d4>
   1fac0:	mov	r1, r6
   1fac4:	ldr	r0, [pc, #16]	; 1fadc <__assert_fail@plt+0xd518>
   1fac8:	bl	1f0ac <__assert_fail@plt+0xcae8>
   1facc:	adds	r0, r0, #0
   1fad0:	movne	r0, #1
   1fad4:	pop	{r4, r5, r6, pc}
   1fad8:			; <UNDEFINED> instruction: 0x000466b4
   1fadc:	ldrdeq	r6, [r4], -ip
   1fae0:	push	{r4, r5, r6, lr}
   1fae4:	sub	sp, sp, #8
   1fae8:	mov	r6, r0
   1faec:	mov	r4, r1
   1faf0:	mov	r5, r2
   1faf4:	mov	r0, sp
   1faf8:	bl	2bf20 <__assert_fail@plt+0x1995c>
   1fafc:	cmp	r0, #0
   1fb00:	bne	1fb90 <__assert_fail@plt+0xd5cc>
   1fb04:	mov	r0, r6
   1fb08:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1fb0c:	cmp	r0, #0
   1fb10:	bne	1fb78 <__assert_fail@plt+0xd5b4>
   1fb14:	mov	r0, r5
   1fb18:	blx	r4
   1fb1c:	subs	r4, r0, #0
   1fb20:	blt	1fb40 <__assert_fail@plt+0xd57c>
   1fb24:	mov	r0, sp
   1fb28:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1fb2c:	cmp	r0, #0
   1fb30:	bne	1fb84 <__assert_fail@plt+0xd5c0>
   1fb34:	mov	r0, sp
   1fb38:	bl	2bf9c <__assert_fail@plt+0x199d8>
   1fb3c:	b	1fb6c <__assert_fail@plt+0xd5a8>
   1fb40:	bl	12318 <__errno_location@plt>
   1fb44:	mov	r6, r0
   1fb48:	ldr	r5, [r0]
   1fb4c:	mov	r0, sp
   1fb50:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1fb54:	cmp	r0, #0
   1fb58:	bne	1fb84 <__assert_fail@plt+0xd5c0>
   1fb5c:	mov	r0, sp
   1fb60:	bl	2bf9c <__assert_fail@plt+0x199d8>
   1fb64:	cmp	r5, #0
   1fb68:	strne	r5, [r6]
   1fb6c:	mov	r0, r4
   1fb70:	add	sp, sp, #8
   1fb74:	pop	{r4, r5, r6, pc}
   1fb78:	bl	12318 <__errno_location@plt>
   1fb7c:	ldr	r0, [r0]
   1fb80:	bl	2588c <__assert_fail@plt+0x132c8>
   1fb84:	bl	12318 <__errno_location@plt>
   1fb88:	ldr	r0, [r0]
   1fb8c:	bl	2588c <__assert_fail@plt+0x132c8>
   1fb90:	bl	12318 <__errno_location@plt>
   1fb94:	ldr	r0, [r0]
   1fb98:	bl	25850 <__assert_fail@plt+0x1328c>
   1fb9c:	push	{r4, r5, r6, lr}
   1fba0:	sub	sp, sp, #8
   1fba4:	mov	r5, r1
   1fba8:	mov	r6, r2
   1fbac:	cmn	r0, #100	; 0x64
   1fbb0:	beq	1fc00 <__assert_fail@plt+0xd63c>
   1fbb4:	mov	r4, r0
   1fbb8:	mov	r0, sp
   1fbbc:	bl	2bf20 <__assert_fail@plt+0x1995c>
   1fbc0:	cmp	r0, #0
   1fbc4:	bne	1fc10 <__assert_fail@plt+0xd64c>
   1fbc8:	mov	r0, r4
   1fbcc:	bl	124c8 <fchdir@plt>
   1fbd0:	cmp	r0, #0
   1fbd4:	beq	1fc1c <__assert_fail@plt+0xd658>
   1fbd8:	bl	12318 <__errno_location@plt>
   1fbdc:	mov	r4, r0
   1fbe0:	ldr	r5, [r0]
   1fbe4:	mov	r0, sp
   1fbe8:	bl	2bf9c <__assert_fail@plt+0x199d8>
   1fbec:	str	r5, [r4]
   1fbf0:	mvn	r4, #0
   1fbf4:	mov	r0, r4
   1fbf8:	add	sp, sp, #8
   1fbfc:	pop	{r4, r5, r6, pc}
   1fc00:	mov	r0, r2
   1fc04:	blx	r1
   1fc08:	mov	r4, r0
   1fc0c:	b	1fbf4 <__assert_fail@plt+0xd630>
   1fc10:	bl	12318 <__errno_location@plt>
   1fc14:	ldr	r0, [r0]
   1fc18:	bl	25850 <__assert_fail@plt+0x1328c>
   1fc1c:	mov	r0, r6
   1fc20:	blx	r5
   1fc24:	subs	r4, r0, #0
   1fc28:	blt	1fc48 <__assert_fail@plt+0xd684>
   1fc2c:	mov	r0, sp
   1fc30:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1fc34:	cmp	r0, #0
   1fc38:	bne	1fc78 <__assert_fail@plt+0xd6b4>
   1fc3c:	mov	r0, sp
   1fc40:	bl	2bf9c <__assert_fail@plt+0x199d8>
   1fc44:	b	1fbf4 <__assert_fail@plt+0xd630>
   1fc48:	bl	12318 <__errno_location@plt>
   1fc4c:	mov	r6, r0
   1fc50:	ldr	r5, [r0]
   1fc54:	mov	r0, sp
   1fc58:	bl	2bf74 <__assert_fail@plt+0x199b0>
   1fc5c:	cmp	r0, #0
   1fc60:	bne	1fc78 <__assert_fail@plt+0xd6b4>
   1fc64:	mov	r0, sp
   1fc68:	bl	2bf9c <__assert_fail@plt+0x199d8>
   1fc6c:	cmp	r5, #0
   1fc70:	strne	r5, [r6]
   1fc74:	b	1fbf4 <__assert_fail@plt+0xd630>
   1fc78:	bl	12318 <__errno_location@plt>
   1fc7c:	ldr	r0, [r0]
   1fc80:	bl	2588c <__assert_fail@plt+0x132c8>
   1fc84:	push	{r4, r5, r6, r7, r8, lr}
   1fc88:	mov	r5, r0
   1fc8c:	mov	r4, r1
   1fc90:	mov	r8, r2
   1fc94:	bl	12318 <__errno_location@plt>
   1fc98:	ldr	r7, [r0]
   1fc9c:	cmp	r4, #0
   1fca0:	beq	1fcd4 <__assert_fail@plt+0xd710>
   1fca4:	mov	r6, r0
   1fca8:	ldr	r2, [r8]
   1fcac:	cmp	r2, #0
   1fcb0:	beq	1fd54 <__assert_fail@plt+0xd790>
   1fcb4:	cmp	r4, r2
   1fcb8:	movls	r0, r5
   1fcbc:	bls	1fd04 <__assert_fail@plt+0xd740>
   1fcc0:	lsl	r0, r2, #1
   1fcc4:	cmp	r2, r0
   1fcc8:	bls	1fd64 <__assert_fail@plt+0xd7a0>
   1fccc:	mov	r0, r4
   1fcd0:	b	1fd30 <__assert_fail@plt+0xd76c>
   1fcd4:	ldr	r3, [pc, #164]	; 1fd80 <__assert_fail@plt+0xd7bc>
   1fcd8:	mov	r2, #71	; 0x47
   1fcdc:	ldr	r1, [pc, #160]	; 1fd84 <__assert_fail@plt+0xd7c0>
   1fce0:	ldr	r0, [pc, #160]	; 1fd88 <__assert_fail@plt+0xd7c4>
   1fce4:	bl	125c4 <__assert_fail@plt>
   1fce8:	mov	r0, r4
   1fcec:	cmp	r2, #0
   1fcf0:	bne	1fd28 <__assert_fail@plt+0xd764>
   1fcf4:	cmp	r5, #0
   1fcf8:	bne	1fd14 <__assert_fail@plt+0xd750>
   1fcfc:	str	r0, [r8]
   1fd00:	bl	3079c <__assert_fail@plt+0x1e1d8>
   1fd04:	cmp	r0, #0
   1fd08:	popeq	{r4, r5, r6, r7, r8, pc}
   1fd0c:	str	r7, [r6]
   1fd10:	pop	{r4, r5, r6, r7, r8, pc}
   1fd14:	ldr	r3, [pc, #100]	; 1fd80 <__assert_fail@plt+0xd7bc>
   1fd18:	mov	r2, #79	; 0x4f
   1fd1c:	ldr	r1, [pc, #96]	; 1fd84 <__assert_fail@plt+0xd7c0>
   1fd20:	ldr	r0, [pc, #100]	; 1fd8c <__assert_fail@plt+0xd7c8>
   1fd24:	bl	125c4 <__assert_fail@plt>
   1fd28:	cmp	r2, r0
   1fd2c:	beq	1fd4c <__assert_fail@plt+0xd788>
   1fd30:	str	r0, [r8]
   1fd34:	mov	r1, r0
   1fd38:	mov	r0, r5
   1fd3c:	bl	31320 <__assert_fail@plt+0x1ed5c>
   1fd40:	cmp	r0, #0
   1fd44:	bne	1fd0c <__assert_fail@plt+0xd748>
   1fd48:	pop	{r4, r5, r6, r7, r8, pc}
   1fd4c:	mov	r0, r5
   1fd50:	b	1fd04 <__assert_fail@plt+0xd740>
   1fd54:	cmp	r4, #16
   1fd58:	movls	r0, #16
   1fd5c:	bls	1fcf4 <__assert_fail@plt+0xd730>
   1fd60:	mov	r0, #32
   1fd64:	cmp	r4, r0
   1fd68:	bls	1fcec <__assert_fail@plt+0xd728>
   1fd6c:	lsl	r3, r0, #1
   1fd70:	cmp	r3, r0
   1fd74:	bcc	1fce8 <__assert_fail@plt+0xd724>
   1fd78:	mov	r0, r3
   1fd7c:	b	1fd64 <__assert_fail@plt+0xd7a0>
   1fd80:	andeq	r6, r4, r4, lsl #14
   1fd84:	andeq	r6, r4, r0, lsl r7
   1fd88:	andeq	r6, r4, ip, lsl r7
   1fd8c:	andeq	r6, r4, r8, lsr #14
   1fd90:	push	{r4, lr}
   1fd94:	mov	r4, r0
   1fd98:	bl	1fc84 <__assert_fail@plt+0xd6c0>
   1fd9c:	cmp	r0, #0
   1fda0:	popne	{r4, pc}
   1fda4:	mov	r0, r4
   1fda8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   1fdac:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   1fdb0:	push	{r4, r5, r6, lr}
   1fdb4:	mov	r6, r0
   1fdb8:	mov	r4, r1
   1fdbc:	mov	r1, #1
   1fdc0:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   1fdc4:	ands	r5, r0, #1
   1fdc8:	movne	r5, #0
   1fdcc:	beq	1fdd8 <__assert_fail@plt+0xd814>
   1fdd0:	mov	r0, r5
   1fdd4:	pop	{r4, r5, r6, pc}
   1fdd8:	ldr	r1, [r4, #4]
   1fddc:	add	r1, r1, #1
   1fde0:	add	r2, r4, #8
   1fde4:	lsl	r1, r1, #2
   1fde8:	ldr	r0, [r4]
   1fdec:	bl	1fc84 <__assert_fail@plt+0xd6c0>
   1fdf0:	cmp	r0, #0
   1fdf4:	strne	r0, [r4]
   1fdf8:	ldrne	r3, [r4, #4]
   1fdfc:	strne	r6, [r0, r3, lsl #2]
   1fe00:	ldrne	r3, [r4, #4]
   1fe04:	addne	r3, r3, #1
   1fe08:	strne	r3, [r4, #4]
   1fe0c:	mvneq	r5, #0
   1fe10:	b	1fdd0 <__assert_fail@plt+0xd80c>
   1fe14:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fe18:	sub	sp, sp, #20
   1fe1c:	ldr	r0, [pc, #280]	; 1ff3c <__assert_fail@plt+0xd978>
   1fe20:	bl	21794 <__assert_fail@plt+0xf1d0>
   1fe24:	subs	r7, r0, #0
   1fe28:	beq	1fea4 <__assert_fail@plt+0xd8e0>
   1fe2c:	bl	12318 <__errno_location@plt>
   1fe30:	mov	r6, r0
   1fe34:	mov	r8, #0
   1fe38:	mvn	r4, #0
   1fe3c:	mov	r5, r8
   1fe40:	mov	r9, #1
   1fe44:	b	1ff00 <__assert_fail@plt+0xd93c>
   1fe48:	ldr	r5, [r6]
   1fe4c:	cmp	r5, #0
   1fe50:	bne	1fe78 <__assert_fail@plt+0xd8b4>
   1fe54:	mov	r0, r7
   1fe58:	bl	12594 <closedir@plt>
   1fe5c:	cmp	r8, #0
   1fe60:	beq	1fea4 <__assert_fail@plt+0xd8e0>
   1fe64:	cmp	r4, #0
   1fe68:	blt	1fea4 <__assert_fail@plt+0xd8e0>
   1fe6c:	mov	r0, r4
   1fe70:	add	sp, sp, #20
   1fe74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fe78:	ldr	r2, [pc, #188]	; 1ff3c <__assert_fail@plt+0xd978>
   1fe7c:	mov	r1, #8
   1fe80:	mov	r0, #0
   1fe84:	bl	2bc6c <__assert_fail@plt+0x196a8>
   1fe88:	mov	r3, r0
   1fe8c:	ldr	r2, [pc, #172]	; 1ff40 <__assert_fail@plt+0xd97c>
   1fe90:	mov	r1, r5
   1fe94:	mov	r0, #0
   1fe98:	bl	121bc <error@plt>
   1fe9c:	mov	r0, r7
   1fea0:	bl	12594 <closedir@plt>
   1fea4:	mov	r0, #4
   1fea8:	bl	1209c <sysconf@plt>
   1feac:	mov	r4, r0
   1feb0:	cmn	r0, #1
   1feb4:	moveq	r4, #20
   1feb8:	mov	r1, sp
   1febc:	mov	r0, #7
   1fec0:	bl	120a8 <getrlimit64@plt>
   1fec4:	cmp	r0, #0
   1fec8:	bne	1fe6c <__assert_fail@plt+0xd8a8>
   1fecc:	ldrd	r2, [sp]
   1fed0:	mvn	r0, #0
   1fed4:	mvn	r1, #0
   1fed8:	cmp	r3, r1
   1fedc:	cmpeq	r2, r0
   1fee0:	movne	r4, r2
   1fee4:	b	1fe6c <__assert_fail@plt+0xd8a8>
   1fee8:	mov	r1, r5
   1feec:	add	r0, r0, #19
   1fef0:	bl	210f0 <__assert_fail@plt+0xeb2c>
   1fef4:	cmp	r4, r0
   1fef8:	movlt	r4, r0
   1fefc:	mov	r8, r9
   1ff00:	str	r5, [r6]
   1ff04:	mov	r0, r7
   1ff08:	bl	1248c <readdir64@plt>
   1ff0c:	cmp	r0, #0
   1ff10:	beq	1fe48 <__assert_fail@plt+0xd884>
   1ff14:	ldrb	r3, [r0, #19]
   1ff18:	cmp	r3, #46	; 0x2e
   1ff1c:	bne	1fee8 <__assert_fail@plt+0xd924>
   1ff20:	ldrb	r3, [r0, #20]
   1ff24:	cmp	r3, #0
   1ff28:	beq	1ff00 <__assert_fail@plt+0xd93c>
   1ff2c:	ldrh	r3, [r0, #20]
   1ff30:	cmp	r3, #46	; 0x2e
   1ff34:	bne	1fee8 <__assert_fail@plt+0xd924>
   1ff38:	b	1ff00 <__assert_fail@plt+0xd93c>
   1ff3c:	andeq	r6, r4, r8, asr r7
   1ff40:	andeq	r6, r4, r4, lsl #24
   1ff44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff48:	sub	sp, sp, #524	; 0x20c
   1ff4c:	str	r3, [sp, #4]
   1ff50:	cmp	r0, r1
   1ff54:	bge	1ffb4 <__assert_fail@plt+0xd9f0>
   1ff58:	mov	sl, r0
   1ff5c:	mov	fp, r1
   1ff60:	mov	r9, r2
   1ff64:	mov	r5, #5
   1ff68:	mov	r4, #0
   1ff6c:	b	1ffe0 <__assert_fail@plt+0xda1c>
   1ff70:	add	r6, r6, #1
   1ff74:	add	r7, r7, #8
   1ff78:	cmp	r8, r6
   1ff7c:	beq	1ffd4 <__assert_fail@plt+0xda10>
   1ff80:	ldrsh	r3, [r7, #6]
   1ff84:	cmp	r3, #32
   1ff88:	beq	1ff70 <__assert_fail@plt+0xd9ac>
   1ff8c:	ldr	r1, [sp, #4]
   1ff90:	add	r3, sp, #8
   1ff94:	ldr	r0, [r3, r6, lsl #3]
   1ff98:	blx	r9
   1ff9c:	cmp	r0, #0
   1ffa0:	beq	1ff70 <__assert_fail@plt+0xd9ac>
   1ffa4:	add	sp, sp, #524	; 0x20c
   1ffa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffac:	mov	r0, #0
   1ffb0:	b	1ffa4 <__assert_fail@plt+0xd9e0>
   1ffb4:	mov	r0, #0
   1ffb8:	b	1ffa4 <__assert_fail@plt+0xd9e0>
   1ffbc:	mov	r2, r4
   1ffc0:	mov	r1, r8
   1ffc4:	add	r0, sp, #8
   1ffc8:	bl	12120 <poll@plt>
   1ffcc:	cmn	r0, #1
   1ffd0:	beq	1ffa4 <__assert_fail@plt+0xd9e0>
   1ffd4:	add	sl, sl, r8
   1ffd8:	cmp	fp, sl
   1ffdc:	ble	1ffac <__assert_fail@plt+0xd9e8>
   1ffe0:	sub	r8, fp, sl
   1ffe4:	cmp	r8, #64	; 0x40
   1ffe8:	movge	r8, #64	; 0x40
   1ffec:	cmp	r8, #0
   1fff0:	ble	1ffbc <__assert_fail@plt+0xd9f8>
   1fff4:	add	r7, sp, #8
   1fff8:	mov	r2, sl
   1fffc:	add	r1, r7, r8, lsl #3
   20000:	mov	r3, r7
   20004:	strh	r5, [r3, #4]
   20008:	strh	r4, [r3, #6]
   2000c:	str	r2, [r3], #8
   20010:	add	r2, r2, #1
   20014:	cmp	r3, r1
   20018:	bne	20004 <__assert_fail@plt+0xda40>
   2001c:	mov	r2, r4
   20020:	mov	r1, r8
   20024:	add	r0, sp, #8
   20028:	bl	12120 <poll@plt>
   2002c:	cmn	r0, #1
   20030:	beq	1ffa4 <__assert_fail@plt+0xd9e0>
   20034:	mov	r6, #0
   20038:	b	1ff80 <__assert_fail@plt+0xd9bc>
   2003c:	push	{r4, r5, r6, lr}
   20040:	mov	r5, r0
   20044:	mov	r4, r1
   20048:	mov	r1, #1
   2004c:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   20050:	ands	r0, r0, #1
   20054:	bne	200b0 <__assert_fail@plt+0xdaec>
   20058:	ldr	r3, [r4, #8]
   2005c:	ldr	ip, [r4, #4]
   20060:	cmp	ip, r3
   20064:	bls	200a4 <__assert_fail@plt+0xdae0>
   20068:	ldr	r1, [r4]
   2006c:	add	r2, r1, r3, lsl #2
   20070:	ldr	r1, [r1, r3, lsl #2]
   20074:	cmp	r5, r1
   20078:	ble	2009c <__assert_fail@plt+0xdad8>
   2007c:	add	r3, r3, #1
   20080:	str	r3, [r4, #8]
   20084:	cmp	ip, r3
   20088:	beq	200a4 <__assert_fail@plt+0xdae0>
   2008c:	ldr	r1, [r2, #4]!
   20090:	add	r3, r3, #1
   20094:	cmp	r5, r1
   20098:	bgt	20080 <__assert_fail@plt+0xdabc>
   2009c:	cmp	r5, r1
   200a0:	popeq	{r4, r5, r6, pc}
   200a4:	str	r5, [r4, #12]
   200a8:	mvn	r0, #0
   200ac:	pop	{r4, r5, r6, pc}
   200b0:	mov	r0, #0
   200b4:	pop	{r4, r5, r6, pc}
   200b8:	push	{lr}		; (str lr, [sp, #-4]!)
   200bc:	sub	sp, sp, #20
   200c0:	bl	1fe14 <__assert_fail@plt+0xd850>
   200c4:	mov	r1, r0
   200c8:	mov	r3, #0
   200cc:	str	r3, [sp, #4]
   200d0:	str	r3, [sp, #12]
   200d4:	str	r3, [sp, #8]
   200d8:	cmn	r0, #-2147483647	; 0x80000001
   200dc:	addne	r1, r0, #1
   200e0:	add	r3, sp, #4
   200e4:	ldr	r2, [pc, #32]	; 2010c <__assert_fail@plt+0xdb48>
   200e8:	mov	r0, #0
   200ec:	bl	1ff44 <__assert_fail@plt+0xd980>
   200f0:	ldr	r3, [pc, #24]	; 20110 <__assert_fail@plt+0xdb4c>
   200f4:	ldr	r2, [sp, #4]
   200f8:	str	r2, [r3]
   200fc:	ldr	r2, [sp, #8]
   20100:	str	r2, [r3, #4]
   20104:	add	sp, sp, #20
   20108:	pop	{pc}		; (ldr pc, [sp], #4)
   2010c:			; <UNDEFINED> instruction: 0x0001fdb0
   20110:	andeq	r9, r5, r0, ror #25
   20114:	push	{r1, r2, r3}
   20118:	push	{r4, r5, r6, r7, r8, lr}
   2011c:	sub	sp, sp, #12
   20120:	mov	r6, r0
   20124:	ldr	r4, [sp, #36]	; 0x24
   20128:	tst	r4, #64	; 0x40
   2012c:	addne	r3, sp, #44	; 0x2c
   20130:	strne	r3, [sp, #4]
   20134:	ldrne	r7, [sp, #40]	; 0x28
   20138:	moveq	r7, #0
   2013c:	ldr	r3, [pc, #148]	; 201d8 <__assert_fail@plt+0xdc14>
   20140:	ldrb	r5, [r3, #8]
   20144:	cmp	r5, #0
   20148:	beq	20188 <__assert_fail@plt+0xdbc4>
   2014c:	mov	r2, r7
   20150:	orr	r1, r4, #524288	; 0x80000
   20154:	mov	r0, r6
   20158:	bl	219a0 <__assert_fail@plt+0xf3dc>
   2015c:	subs	r4, r0, #0
   20160:	blt	20174 <__assert_fail@plt+0xdbb0>
   20164:	ldr	r3, [pc, #108]	; 201d8 <__assert_fail@plt+0xdc14>
   20168:	ldrb	r3, [r3, #9]
   2016c:	cmp	r3, #0
   20170:	beq	201c8 <__assert_fail@plt+0xdc04>
   20174:	mov	r0, r4
   20178:	add	sp, sp, #12
   2017c:	pop	{r4, r5, r6, r7, r8, lr}
   20180:	add	sp, sp, #12
   20184:	bx	lr
   20188:	mov	r1, #524288	; 0x80000
   2018c:	ldr	r0, [pc, #72]	; 201dc <__assert_fail@plt+0xdc18>
   20190:	bl	219a0 <__assert_fail@plt+0xf3dc>
   20194:	subs	r8, r0, #0
   20198:	blt	201b4 <__assert_fail@plt+0xdbf0>
   2019c:	mov	r1, #1
   201a0:	mov	r0, r8
   201a4:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   201a8:	and	r5, r0, #1
   201ac:	mov	r0, r8
   201b0:	bl	1257c <close@plt>
   201b4:	ldr	r3, [pc, #28]	; 201d8 <__assert_fail@plt+0xdc14>
   201b8:	strb	r5, [r3, #9]
   201bc:	mov	r2, #1
   201c0:	strb	r2, [r3, #8]
   201c4:	b	2014c <__assert_fail@plt+0xdb88>
   201c8:	mov	r1, #1
   201cc:	mov	r0, r4
   201d0:	bl	21604 <__assert_fail@plt+0xf040>
   201d4:	b	20174 <__assert_fail@plt+0xdbb0>
   201d8:	andeq	r9, r5, r0, ror #25
   201dc:	andeq	r8, r4, r0, lsr #11
   201e0:	push	{r4, lr}
   201e4:	ldr	r4, [pc, #20]	; 20200 <__assert_fail@plt+0xdc3c>
   201e8:	ldr	r0, [r4]
   201ec:	bl	2e3fc <__assert_fail@plt+0x1be38>
   201f0:	mov	r3, #0
   201f4:	str	r3, [r4]
   201f8:	str	r3, [r4, #4]
   201fc:	pop	{r4, pc}
   20200:	andeq	r9, r5, r0, ror #25
   20204:	push	{r4, lr}
   20208:	ldr	r0, [pc, #12]	; 2021c <__assert_fail@plt+0xdc58>
   2020c:	bl	121f8 <getenv@plt>
   20210:	adds	r0, r0, #0
   20214:	movne	r0, #1
   20218:	pop	{r4, pc}
   2021c:	andeq	r6, r4, r8, ror #14
   20220:	push	{r4, r5, lr}
   20224:	sub	sp, sp, #20
   20228:	ldr	r3, [pc, #132]	; 202b4 <__assert_fail@plt+0xdcf0>
   2022c:	ldr	r5, [r3]
   20230:	ldr	r4, [r3, #4]
   20234:	bl	1fe14 <__assert_fail@plt+0xd850>
   20238:	mov	r1, r0
   2023c:	cmn	r0, #-2147483647	; 0x80000001
   20240:	addne	r1, r0, #1
   20244:	str	r5, [sp]
   20248:	str	r4, [sp, #4]
   2024c:	mov	r0, #0
   20250:	str	r0, [sp, #8]
   20254:	mvn	r3, #0
   20258:	str	r3, [sp, #12]
   2025c:	mov	r3, sp
   20260:	ldr	r2, [pc, #80]	; 202b8 <__assert_fail@plt+0xdcf4>
   20264:	bl	1ff44 <__assert_fail@plt+0xd980>
   20268:	ldr	r4, [sp, #12]
   2026c:	cmp	r4, #0
   20270:	blt	202ac <__assert_fail@plt+0xdce8>
   20274:	mov	r2, #5
   20278:	ldr	r1, [pc, #60]	; 202bc <__assert_fail@plt+0xdcf8>
   2027c:	mov	r0, #0
   20280:	bl	12084 <dcgettext@plt>
   20284:	mov	r3, r4
   20288:	mov	r2, r0
   2028c:	mov	r1, #0
   20290:	mov	r0, r1
   20294:	bl	121bc <error@plt>
   20298:	ldr	r3, [pc, #32]	; 202c0 <__assert_fail@plt+0xdcfc>
   2029c:	mov	r2, #396	; 0x18c
   202a0:	ldr	r1, [pc, #28]	; 202c4 <__assert_fail@plt+0xdd00>
   202a4:	ldr	r0, [pc, #28]	; 202c8 <__assert_fail@plt+0xdd04>
   202a8:	bl	125c4 <__assert_fail@plt>
   202ac:	add	sp, sp, #20
   202b0:	pop	{r4, r5, pc}
   202b4:	andeq	r9, r5, r0, ror #25
   202b8:	andeq	r0, r2, ip, lsr r0
   202bc:	andeq	r6, r4, r4, lsl #15
   202c0:	andeq	r6, r4, ip, lsr r7
   202c4:	andeq	r6, r4, ip, lsl r8
   202c8:	andeq	r6, r4, r8, lsr #16
   202cc:	push	{r4, r5, r6, r7, r8, lr}
   202d0:	sub	sp, sp, #16
   202d4:	mov	r5, r0
   202d8:	ldr	r3, [pc, #124]	; 2035c <__assert_fail@plt+0xdd98>
   202dc:	ldr	r0, [r3]
   202e0:	bl	2e398 <__assert_fail@plt+0x1bdd4>
   202e4:	ldr	r3, [pc, #116]	; 20360 <__assert_fail@plt+0xdd9c>
   202e8:	ldr	r4, [r3]
   202ec:	ldr	r3, [pc, #112]	; 20364 <__assert_fail@plt+0xdda0>
   202f0:	ldr	r6, [r3]
   202f4:	mov	r2, #5
   202f8:	ldr	r1, [pc, #104]	; 20368 <__assert_fail@plt+0xdda4>
   202fc:	mov	r0, #0
   20300:	bl	12084 <dcgettext@plt>
   20304:	mov	r7, r0
   20308:	mov	r2, #5
   2030c:	ldr	r1, [pc, #88]	; 2036c <__assert_fail@plt+0xdda8>
   20310:	mov	r0, #0
   20314:	bl	12084 <dcgettext@plt>
   20318:	mov	r8, r0
   2031c:	mov	r2, #5
   20320:	ldr	r1, [pc, #72]	; 20370 <__assert_fail@plt+0xddac>
   20324:	mov	r0, #0
   20328:	bl	12084 <dcgettext@plt>
   2032c:	mov	r3, #0
   20330:	str	r3, [sp, #12]
   20334:	str	r0, [sp, #8]
   20338:	str	r8, [sp, #4]
   2033c:	str	r7, [sp]
   20340:	mov	r3, r6
   20344:	ldr	r2, [pc, #40]	; 20374 <__assert_fail@plt+0xddb0>
   20348:	mov	r1, r5
   2034c:	mov	r0, r4
   20350:	bl	2cb60 <__assert_fail@plt+0x1a59c>
   20354:	add	sp, sp, #16
   20358:	pop	{r4, r5, r6, r7, r8, pc}
   2035c:	andeq	r9, r5, r8, asr #10
   20360:	andeq	r9, r5, r4, asr r5
   20364:	andeq	r9, r5, r8, asr #9
   20368:	andeq	r6, r4, r4, lsr r8
   2036c:	andeq	r6, r4, r4, asr #16
   20370:	andeq	r6, r4, r4, asr r8
   20374:	andeq	r6, r4, r4, ror #16
   20378:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2037c:	mov	r4, r0
   20380:	mov	r5, r1
   20384:	ldr	sl, [pc, #316]	; 204c8 <__assert_fail@plt+0xdf04>
   20388:	ldr	fp, [pc, #316]	; 204cc <__assert_fail@plt+0xdf08>
   2038c:	ldr	r9, [pc, #316]	; 204d0 <__assert_fail@plt+0xdf0c>
   20390:	ldr	r8, [pc, #316]	; 204d4 <__assert_fail@plt+0xdf10>
   20394:	ldr	r7, [pc, #316]	; 204d8 <__assert_fail@plt+0xdf14>
   20398:	ldr	r6, [pc, #316]	; 204dc <__assert_fail@plt+0xdf18>
   2039c:	b	20404 <__assert_fail@plt+0xde40>
   203a0:	cmp	r2, #9
   203a4:	beq	2045c <__assert_fail@plt+0xde98>
   203a8:	cmp	r2, #10
   203ac:	beq	2043c <__assert_fail@plt+0xde78>
   203b0:	cmp	r2, #8
   203b4:	beq	2044c <__assert_fail@plt+0xde88>
   203b8:	sub	r3, r2, #33	; 0x21
   203bc:	uxtb	r3, r3
   203c0:	cmp	r3, #93	; 0x5d
   203c4:	bls	2049c <__assert_fail@plt+0xded8>
   203c8:	mov	r1, fp
   203cc:	mov	r0, r5
   203d0:	bl	1230c <fprintf@plt>
   203d4:	b	203fc <__assert_fail@plt+0xde38>
   203d8:	cmp	r2, #13
   203dc:	bne	203b8 <__assert_fail@plt+0xddf4>
   203e0:	mov	r1, r6
   203e4:	mov	r0, r5
   203e8:	bl	1230c <fprintf@plt>
   203ec:	b	203fc <__assert_fail@plt+0xde38>
   203f0:	mov	r1, r7
   203f4:	mov	r0, r5
   203f8:	bl	1230c <fprintf@plt>
   203fc:	cmp	r0, #0
   20400:	blt	204c0 <__assert_fail@plt+0xdefc>
   20404:	ldrb	r2, [r4], #1
   20408:	cmp	r2, #0
   2040c:	beq	204b8 <__assert_fail@plt+0xdef4>
   20410:	cmp	r2, #12
   20414:	beq	2046c <__assert_fail@plt+0xdea8>
   20418:	bls	203a0 <__assert_fail@plt+0xdddc>
   2041c:	cmp	r2, #32
   20420:	beq	2047c <__assert_fail@plt+0xdeb8>
   20424:	bls	203d8 <__assert_fail@plt+0xde14>
   20428:	cmp	r2, #34	; 0x22
   2042c:	beq	2048c <__assert_fail@plt+0xdec8>
   20430:	cmp	r2, #92	; 0x5c
   20434:	beq	203f0 <__assert_fail@plt+0xde2c>
   20438:	b	203b8 <__assert_fail@plt+0xddf4>
   2043c:	ldr	r1, [pc, #156]	; 204e0 <__assert_fail@plt+0xdf1c>
   20440:	mov	r0, r5
   20444:	bl	1230c <fprintf@plt>
   20448:	b	203fc <__assert_fail@plt+0xde38>
   2044c:	ldr	r1, [pc, #144]	; 204e4 <__assert_fail@plt+0xdf20>
   20450:	mov	r0, r5
   20454:	bl	1230c <fprintf@plt>
   20458:	b	203fc <__assert_fail@plt+0xde38>
   2045c:	ldr	r1, [pc, #132]	; 204e8 <__assert_fail@plt+0xdf24>
   20460:	mov	r0, r5
   20464:	bl	1230c <fprintf@plt>
   20468:	b	203fc <__assert_fail@plt+0xde38>
   2046c:	mov	r1, sl
   20470:	mov	r0, r5
   20474:	bl	1230c <fprintf@plt>
   20478:	b	203fc <__assert_fail@plt+0xde38>
   2047c:	mov	r1, r9
   20480:	mov	r0, r5
   20484:	bl	1230c <fprintf@plt>
   20488:	b	203fc <__assert_fail@plt+0xde38>
   2048c:	mov	r1, r8
   20490:	mov	r0, r5
   20494:	bl	1230c <fprintf@plt>
   20498:	b	203fc <__assert_fail@plt+0xde38>
   2049c:	mov	r1, r5
   204a0:	mov	r0, r2
   204a4:	bl	124b0 <putc@plt>
   204a8:	cmn	r0, #1
   204ac:	bne	20404 <__assert_fail@plt+0xde40>
   204b0:	mov	r0, #0
   204b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204b8:	mov	r0, #1
   204bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204c0:	mov	r0, #0
   204c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   204c8:	muleq	r4, r8, r8
   204cc:	andeq	r6, r4, r4, lsr #17
   204d0:	muleq	r4, ip, r8
   204d4:	andeq	r6, r4, r0, lsr #17
   204d8:	andeq	r6, r4, r4, lsl #17
   204dc:	muleq	r4, r0, r8
   204e0:	andeq	r6, r4, r8, lsl #17
   204e4:	andeq	r6, r4, ip, lsl #17
   204e8:	muleq	r4, r4, r8
   204ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204f0:	add	fp, sp, #32
   204f4:	sub	sp, sp, #956	; 0x3bc
   204f8:	str	r0, [fp, #-960]	; 0xfffffc40
   204fc:	str	r1, [fp, #-964]	; 0xfffffc3c
   20500:	str	r2, [fp, #-968]	; 0xfffffc38
   20504:	mov	r5, r3
   20508:	ldr	r4, [fp, #8]
   2050c:	sub	r1, fp, #48	; 0x30
   20510:	ldr	r0, [r3, #16]
   20514:	bl	219dc <__assert_fail@plt+0xf418>
   20518:	ldr	r3, [pc, #1712]	; 20bd0 <__assert_fail@plt+0xe60c>
   2051c:	ldr	r6, [r3]
   20520:	mov	r2, #1
   20524:	mov	r3, #0
   20528:	strd	r2, [sp, #8]
   2052c:	strd	r2, [sp]
   20530:	mov	r3, #0
   20534:	sub	r2, fp, #700	; 0x2bc
   20538:	ldrd	r0, [r5, #96]	; 0x60
   2053c:	bl	22c08 <__assert_fail@plt+0x10644>
   20540:	mov	r3, r0
   20544:	mov	r2, r6
   20548:	ldr	r1, [pc, #1668]	; 20bd4 <__assert_fail@plt+0xe610>
   2054c:	ldr	r0, [fp, #16]
   20550:	bl	1230c <fprintf@plt>
   20554:	cmp	r0, #0
   20558:	blt	20b40 <__assert_fail@plt+0xe57c>
   2055c:	ldr	r3, [pc, #1644]	; 20bd0 <__assert_fail@plt+0xe60c>
   20560:	ldr	r3, [r3]
   20564:	cmp	r0, r3
   20568:	ldrgt	r3, [pc, #1632]	; 20bd0 <__assert_fail@plt+0xe60c>
   2056c:	strgt	r0, [r3]
   20570:	ldr	r1, [fp, #16]
   20574:	mov	r0, #32
   20578:	bl	124b0 <putc@plt>
   2057c:	cmn	r0, #1
   20580:	moveq	r7, #150	; 0x96
   20584:	movne	r7, #0
   20588:	adds	r6, r0, #1
   2058c:	movne	r6, #1
   20590:	ldr	r3, [pc, #1592]	; 20bd0 <__assert_fail@plt+0xe60c>
   20594:	ldr	r8, [r3, #4]
   20598:	mov	r2, r4
   2059c:	asr	r3, r4, #31
   205a0:	strd	r2, [sp, #8]
   205a4:	mov	r2, #512	; 0x200
   205a8:	mov	r3, #0
   205ac:	strd	r2, [sp]
   205b0:	mov	r3, #0
   205b4:	sub	r2, fp, #700	; 0x2bc
   205b8:	ldrd	r0, [r5, #64]	; 0x40
   205bc:	bl	22c08 <__assert_fail@plt+0x10644>
   205c0:	mov	r3, r0
   205c4:	mov	r2, r8
   205c8:	ldr	r1, [pc, #1540]	; 20bd4 <__assert_fail@plt+0xe610>
   205cc:	ldr	r0, [fp, #16]
   205d0:	bl	1230c <fprintf@plt>
   205d4:	cmp	r0, #0
   205d8:	blt	20b78 <__assert_fail@plt+0xe5b4>
   205dc:	ldr	r3, [pc, #1516]	; 20bd0 <__assert_fail@plt+0xe60c>
   205e0:	ldr	r3, [r3, #4]
   205e4:	cmp	r0, r3
   205e8:	ldrgt	r3, [pc, #1504]	; 20bd0 <__assert_fail@plt+0xe60c>
   205ec:	strgt	r0, [r3, #4]
   205f0:	cmp	r6, #0
   205f4:	beq	20b44 <__assert_fail@plt+0xe580>
   205f8:	ldr	r1, [fp, #16]
   205fc:	mov	r0, #32
   20600:	bl	124b0 <putc@plt>
   20604:	cmn	r0, #1
   20608:	beq	20b70 <__assert_fail@plt+0xe5ac>
   2060c:	ldr	r1, [fp, #16]
   20610:	sub	r0, fp, #48	; 0x30
   20614:	bl	12558 <fputs@plt>
   20618:	cmp	r0, #0
   2061c:	blt	20b80 <__assert_fail@plt+0xe5bc>
   20620:	ldr	r3, [r5, #20]
   20624:	ldr	r2, [pc, #1444]	; 20bd0 <__assert_fail@plt+0xe60c>
   20628:	ldr	r2, [r2, #8]
   2062c:	ldr	r1, [pc, #1444]	; 20bd8 <__assert_fail@plt+0xe614>
   20630:	ldr	r0, [fp, #16]
   20634:	bl	1230c <fprintf@plt>
   20638:	cmp	r0, #0
   2063c:	blt	20b88 <__assert_fail@plt+0xe5c4>
   20640:	ldr	r3, [pc, #1416]	; 20bd0 <__assert_fail@plt+0xe60c>
   20644:	ldr	r3, [r3, #8]
   20648:	cmp	r0, r3
   2064c:	ldrgt	r3, [pc, #1404]	; 20bd0 <__assert_fail@plt+0xe60c>
   20650:	strgt	r0, [r3, #8]
   20654:	ldr	r1, [fp, #16]
   20658:	mov	r0, #32
   2065c:	bl	124b0 <putc@plt>
   20660:	cmn	r0, #1
   20664:	moveq	r7, #250	; 0xfa
   20668:	ldr	r0, [r5, #24]
   2066c:	bl	23608 <__assert_fail@plt+0x11044>
   20670:	subs	r6, r0, #0
   20674:	beq	207fc <__assert_fail@plt+0xe238>
   20678:	mov	r1, #0
   2067c:	mov	r0, r6
   20680:	bl	252ec <__assert_fail@plt+0x12d28>
   20684:	ldr	r3, [pc, #1348]	; 20bd0 <__assert_fail@plt+0xe60c>
   20688:	ldr	r3, [r3, #12]
   2068c:	cmp	r0, r3
   20690:	ldrgt	r3, [pc, #1336]	; 20bd0 <__assert_fail@plt+0xe60c>
   20694:	strgt	r0, [r3, #12]
   20698:	mov	r3, r6
   2069c:	ldr	r2, [pc, #1324]	; 20bd0 <__assert_fail@plt+0xe60c>
   206a0:	ldr	r2, [r2, #12]
   206a4:	ldr	r1, [pc, #1328]	; 20bdc <__assert_fail@plt+0xe618>
   206a8:	ldr	r0, [fp, #16]
   206ac:	bl	1230c <fprintf@plt>
   206b0:	mvn	r9, r0
   206b4:	lsr	r9, r9, #31
   206b8:	cmp	r0, #0
   206bc:	movlt	r7, #400	; 0x190
   206c0:	cmp	r9, #0
   206c4:	beq	20b44 <__assert_fail@plt+0xe580>
   206c8:	ldr	r0, [r5, #28]
   206cc:	bl	237bc <__assert_fail@plt+0x111f8>
   206d0:	subs	r6, r0, #0
   206d4:	beq	2083c <__assert_fail@plt+0xe278>
   206d8:	mov	r1, #0
   206dc:	mov	r0, r6
   206e0:	bl	252ec <__assert_fail@plt+0x12d28>
   206e4:	ldr	r3, [pc, #1252]	; 20bd0 <__assert_fail@plt+0xe60c>
   206e8:	ldr	r3, [r3, #16]
   206ec:	cmp	r0, r3
   206f0:	ldrgt	r3, [pc, #1240]	; 20bd0 <__assert_fail@plt+0xe60c>
   206f4:	strgt	r0, [r3, #16]
   206f8:	mov	r3, r6
   206fc:	ldr	r2, [pc, #1228]	; 20bd0 <__assert_fail@plt+0xe60c>
   20700:	ldr	r2, [r2, #16]
   20704:	ldr	r1, [pc, #1232]	; 20bdc <__assert_fail@plt+0xe618>
   20708:	ldr	r0, [fp, #16]
   2070c:	bl	1230c <fprintf@plt>
   20710:	cmp	r0, #0
   20714:	movlt	r7, #500	; 0x1f4
   20718:	cmp	r0, #0
   2071c:	blt	20b44 <__assert_fail@plt+0xe580>
   20720:	ldr	r3, [r5, #16]
   20724:	and	r3, r3, #45056	; 0xb000
   20728:	cmp	r3, #8192	; 0x2000
   2072c:	beq	20888 <__assert_fail@plt+0xe2c4>
   20730:	cmp	r4, #0
   20734:	movge	r4, #1
   20738:	ldr	r3, [pc, #1168]	; 20bd0 <__assert_fail@plt+0xe60c>
   2073c:	ldr	r6, [r3, #28]
   20740:	mov	r2, r4
   20744:	asr	r3, r4, #31
   20748:	strd	r2, [sp, #8]
   2074c:	mov	r2, #1
   20750:	mov	r3, #0
   20754:	strd	r2, [sp]
   20758:	mov	r3, #0
   2075c:	sub	r2, fp, #700	; 0x2bc
   20760:	ldrd	r0, [r5, #48]	; 0x30
   20764:	bl	22c08 <__assert_fail@plt+0x10644>
   20768:	mov	r3, r0
   2076c:	mov	r2, r6
   20770:	ldr	r1, [pc, #1116]	; 20bd4 <__assert_fail@plt+0xe610>
   20774:	ldr	r0, [fp, #16]
   20778:	bl	1230c <fprintf@plt>
   2077c:	cmp	r0, #0
   20780:	blt	20ba0 <__assert_fail@plt+0xe5dc>
   20784:	ldr	r3, [pc, #1092]	; 20bd0 <__assert_fail@plt+0xe60c>
   20788:	ldr	r3, [r3, #28]
   2078c:	cmp	r0, r3
   20790:	ldrgt	r3, [pc, #1080]	; 20bd0 <__assert_fail@plt+0xe60c>
   20794:	strgt	r0, [r3, #28]
   20798:	ldr	r1, [fp, #16]
   2079c:	mov	r0, #32
   207a0:	bl	124b0 <putc@plt>
   207a4:	cmn	r0, #1
   207a8:	beq	20ba8 <__assert_fail@plt+0xe5e4>
   207ac:	add	r0, r5, #80	; 0x50
   207b0:	bl	1224c <localtime@plt>
   207b4:	subs	r8, r0, #0
   207b8:	beq	209e8 <__assert_fail@plt+0xe424>
   207bc:	ldr	r2, [r5, #80]	; 0x50
   207c0:	ldr	r3, [fp, #4]
   207c4:	sub	r3, r3, #15532032	; 0xed0000
   207c8:	sub	r3, r3, #19968	; 0x4e00
   207cc:	cmp	r3, r2
   207d0:	bgt	2093c <__assert_fail@plt+0xe378>
   207d4:	ldr	r3, [fp, #4]
   207d8:	add	r0, r3, #3600	; 0xe10
   207dc:	ldr	r3, [pc, #1020]	; 20be0 <__assert_fail@plt+0xe61c>
   207e0:	ldr	r1, [pc, #1020]	; 20be4 <__assert_fail@plt+0xe620>
   207e4:	cmp	r2, r0
   207e8:	movgt	sl, r1
   207ec:	movle	sl, r3
   207f0:	mov	r4, #256	; 0x100
   207f4:	sub	r6, fp, #956	; 0x3bc
   207f8:	b	20958 <__assert_fail@plt+0xe394>
   207fc:	ldr	r2, [r5, #24]
   20800:	ldr	r1, [pc, #992]	; 20be8 <__assert_fail@plt+0xe624>
   20804:	ldr	r0, [fp, #16]
   20808:	bl	1230c <fprintf@plt>
   2080c:	ldr	r3, [pc, #956]	; 20bd0 <__assert_fail@plt+0xe60c>
   20810:	ldr	r3, [r3, #12]
   20814:	cmp	r0, r3
   20818:	ldrgt	r3, [pc, #944]	; 20bd0 <__assert_fail@plt+0xe60c>
   2081c:	strgt	r0, [r3, #12]
   20820:	cmp	r0, #0
   20824:	movle	r9, #0
   20828:	movgt	r9, #1
   2082c:	ldr	r3, [pc, #952]	; 20bec <__assert_fail@plt+0xe628>
   20830:	cmp	r0, #0
   20834:	movle	r7, r3
   20838:	b	206c0 <__assert_fail@plt+0xe0fc>
   2083c:	ldr	r6, [pc, #908]	; 20bd0 <__assert_fail@plt+0xe60c>
   20840:	ldr	r3, [r5, #28]
   20844:	ldr	r2, [r6, #16]
   20848:	ldr	r1, [pc, #928]	; 20bf0 <__assert_fail@plt+0xe62c>
   2084c:	ldr	r0, [fp, #16]
   20850:	bl	1230c <fprintf@plt>
   20854:	ldr	r3, [r6, #16]
   20858:	cmp	r0, r3
   2085c:	movgt	r3, r6
   20860:	strgt	r0, [r3, #16]
   20864:	cmp	r0, #0
   20868:	blt	20b90 <__assert_fail@plt+0xe5cc>
   2086c:	ldr	r1, [fp, #16]
   20870:	mov	r0, #32
   20874:	bl	124b0 <putc@plt>
   20878:	cmn	r0, #1
   2087c:	bne	20720 <__assert_fail@plt+0xe15c>
   20880:	ldr	r7, [pc, #876]	; 20bf4 <__assert_fail@plt+0xe630>
   20884:	b	20b44 <__assert_fail@plt+0xe580>
   20888:	ldr	r2, [r5, #32]
   2088c:	ldr	r3, [r5, #36]	; 0x24
   20890:	lsl	r2, r2, #12
   20894:	bic	r3, r3, #4080	; 0xff0
   20898:	bic	r3, r3, #15
   2089c:	orr	r3, r3, r2, lsr #20
   208a0:	ldr	r2, [pc, #808]	; 20bd0 <__assert_fail@plt+0xe60c>
   208a4:	ldr	r2, [r2, #20]
   208a8:	ldr	r1, [pc, #808]	; 20bd8 <__assert_fail@plt+0xe614>
   208ac:	ldr	r0, [fp, #16]
   208b0:	bl	1230c <fprintf@plt>
   208b4:	cmp	r0, #0
   208b8:	blt	20b98 <__assert_fail@plt+0xe5d4>
   208bc:	ldr	r3, [pc, #780]	; 20bd0 <__assert_fail@plt+0xe60c>
   208c0:	ldr	r3, [r3, #20]
   208c4:	cmp	r0, r3
   208c8:	ldrgt	r3, [pc, #768]	; 20bd0 <__assert_fail@plt+0xe60c>
   208cc:	strgt	r0, [r3, #20]
   208d0:	ldr	r1, [pc, #800]	; 20bf8 <__assert_fail@plt+0xe634>
   208d4:	ldr	r0, [fp, #16]
   208d8:	bl	1230c <fprintf@plt>
   208dc:	cmp	r0, #0
   208e0:	ldrlt	r7, [pc, #788]	; 20bfc <__assert_fail@plt+0xe638>
   208e4:	blt	20b44 <__assert_fail@plt+0xe580>
   208e8:	ldr	r2, [r5, #32]
   208ec:	ldr	r1, [r5, #36]	; 0x24
   208f0:	uxtb	r3, r2
   208f4:	lsr	r2, r2, #12
   208f8:	orr	r2, r2, r1, lsl #20
   208fc:	bic	r2, r2, #255	; 0xff
   20900:	orr	r3, r2, r3
   20904:	ldr	r2, [pc, #708]	; 20bd0 <__assert_fail@plt+0xe60c>
   20908:	ldr	r2, [r2, #24]
   2090c:	ldr	r1, [pc, #708]	; 20bd8 <__assert_fail@plt+0xe614>
   20910:	ldr	r0, [fp, #16]
   20914:	bl	1230c <fprintf@plt>
   20918:	cmp	r0, #0
   2091c:	ldrlt	r7, [pc, #732]	; 20c00 <__assert_fail@plt+0xe63c>
   20920:	blt	20b44 <__assert_fail@plt+0xe580>
   20924:	ldr	r3, [pc, #676]	; 20bd0 <__assert_fail@plt+0xe60c>
   20928:	ldr	r3, [r3, #24]
   2092c:	cmp	r0, r3
   20930:	ldrgt	r3, [pc, #664]	; 20bd0 <__assert_fail@plt+0xe60c>
   20934:	strgt	r0, [r3, #24]
   20938:	b	20798 <__assert_fail@plt+0xe1d4>
   2093c:	ldr	sl, [pc, #672]	; 20be4 <__assert_fail@plt+0xe620>
   20940:	b	207f0 <__assert_fail@plt+0xe22c>
   20944:	lsl	r4, r4, #1
   20948:	add	r3, r4, #14
   2094c:	bic	r3, r3, #7
   20950:	sub	sp, sp, r3
   20954:	add	r6, sp, #16
   20958:	mov	r3, r8
   2095c:	mov	r2, sl
   20960:	mov	r1, r4
   20964:	mov	r0, r6
   20968:	bl	12234 <strftime@plt>
   2096c:	cmp	r0, #0
   20970:	beq	20944 <__assert_fail@plt+0xe380>
   20974:	mov	r2, r6
   20978:	ldr	r1, [pc, #644]	; 20c04 <__assert_fail@plt+0xe640>
   2097c:	ldr	r0, [fp, #16]
   20980:	bl	1230c <fprintf@plt>
   20984:	cmp	r0, #0
   20988:	movlt	r7, #900	; 0x384
   2098c:	cmp	r0, #0
   20990:	movlt	r9, #0
   20994:	cmp	r9, #0
   20998:	beq	20b44 <__assert_fail@plt+0xe580>
   2099c:	ldr	r3, [fp, #12]
   209a0:	cmp	r3, #0
   209a4:	bne	20a94 <__assert_fail@plt+0xe4d0>
   209a8:	ldr	r1, [fp, #16]
   209ac:	ldr	r0, [fp, #-960]	; 0xfffffc40
   209b0:	bl	20378 <__assert_fail@plt+0xddb4>
   209b4:	cmp	r0, #0
   209b8:	beq	20bb0 <__assert_fail@plt+0xe5ec>
   209bc:	ldr	r3, [r5, #16]
   209c0:	and	r3, r3, #61440	; 0xf000
   209c4:	cmp	r3, #40960	; 0xa000
   209c8:	beq	20ab0 <__assert_fail@plt+0xe4ec>
   209cc:	ldr	r1, [fp, #16]
   209d0:	mov	r0, #10
   209d4:	bl	124b0 <putc@plt>
   209d8:	cmn	r0, #1
   209dc:	beq	20bb8 <__assert_fail@plt+0xe5f4>
   209e0:	sub	sp, fp, #32
   209e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209e8:	ldr	r0, [r5, #80]	; 0x50
   209ec:	cmp	r0, #0
   209f0:	blt	20a38 <__assert_fail@plt+0xe474>
   209f4:	mov	r2, #1
   209f8:	mov	r3, #0
   209fc:	strd	r2, [sp, #8]
   20a00:	strd	r2, [sp]
   20a04:	mov	r3, #0
   20a08:	sub	r2, fp, #700	; 0x2bc
   20a0c:	asr	r1, r0, #31
   20a10:	bl	22c08 <__assert_fail@plt+0x10644>
   20a14:	mov	r3, r0
   20a18:	mov	r2, #12
   20a1c:	ldr	r1, [pc, #484]	; 20c08 <__assert_fail@plt+0xe644>
   20a20:	ldr	r0, [fp, #16]
   20a24:	bl	1230c <fprintf@plt>
   20a28:	cmp	r0, #0
   20a2c:	bge	2099c <__assert_fail@plt+0xe3d8>
   20a30:	ldr	r7, [pc, #468]	; 20c0c <__assert_fail@plt+0xe648>
   20a34:	b	20b44 <__assert_fail@plt+0xe580>
   20a38:	mov	r2, #1
   20a3c:	mov	r3, #0
   20a40:	strd	r2, [sp, #8]
   20a44:	strd	r2, [sp]
   20a48:	mov	r3, #0
   20a4c:	sub	r2, fp, #700	; 0x2bc
   20a50:	asr	r1, r0, #31
   20a54:	rsbs	r0, r0, #0
   20a58:	rsc	r1, r1, #0
   20a5c:	bl	22c08 <__assert_fail@plt+0x10644>
   20a60:	mov	r4, r0
   20a64:	bl	122d0 <strlen@plt>
   20a68:	rsb	r2, r0, #12
   20a6c:	str	r4, [sp]
   20a70:	ldr	r3, [pc, #408]	; 20c10 <__assert_fail@plt+0xe64c>
   20a74:	bic	r2, r2, r2, asr #31
   20a78:	ldr	r1, [pc, #404]	; 20c14 <__assert_fail@plt+0xe650>
   20a7c:	ldr	r0, [fp, #16]
   20a80:	bl	1230c <fprintf@plt>
   20a84:	cmp	r0, #0
   20a88:	bge	2099c <__assert_fail@plt+0xe3d8>
   20a8c:	mov	r7, #1000	; 0x3e8
   20a90:	b	20b44 <__assert_fail@plt+0xe580>
   20a94:	ldr	r2, [fp, #-960]	; 0xfffffc40
   20a98:	ldr	r1, [pc, #376]	; 20c18 <__assert_fail@plt+0xe654>
   20a9c:	ldr	r0, [fp, #16]
   20aa0:	bl	1230c <fprintf@plt>
   20aa4:	mvn	r0, r0
   20aa8:	lsr	r0, r0, #31
   20aac:	b	209b4 <__assert_fail@plt+0xe3f0>
   20ab0:	ldr	r1, [fp, #-968]	; 0xfffffc38
   20ab4:	ldr	r0, [fp, #-964]	; 0xfffffc3c
   20ab8:	bl	21308 <__assert_fail@plt+0xed44>
   20abc:	subs	r4, r0, #0
   20ac0:	beq	20b1c <__assert_fail@plt+0xe558>
   20ac4:	ldr	r1, [fp, #16]
   20ac8:	ldr	r0, [pc, #332]	; 20c1c <__assert_fail@plt+0xe658>
   20acc:	bl	12558 <fputs@plt>
   20ad0:	cmp	r0, #0
   20ad4:	blt	20bc0 <__assert_fail@plt+0xe5fc>
   20ad8:	ldr	r3, [fp, #12]
   20adc:	cmp	r3, #0
   20ae0:	bne	20b00 <__assert_fail@plt+0xe53c>
   20ae4:	ldr	r1, [fp, #16]
   20ae8:	mov	r0, r4
   20aec:	bl	20378 <__assert_fail@plt+0xddb4>
   20af0:	cmp	r0, #0
   20af4:	ldreq	r7, [pc, #292]	; 20c20 <__assert_fail@plt+0xe65c>
   20af8:	beq	20bc4 <__assert_fail@plt+0xe600>
   20afc:	b	20b34 <__assert_fail@plt+0xe570>
   20b00:	mov	r2, r4
   20b04:	ldr	r1, [pc, #268]	; 20c18 <__assert_fail@plt+0xe654>
   20b08:	ldr	r0, [fp, #16]
   20b0c:	bl	1230c <fprintf@plt>
   20b10:	mvn	r0, r0
   20b14:	lsr	r0, r0, #31
   20b18:	b	20af0 <__assert_fail@plt+0xe52c>
   20b1c:	bl	12318 <__errno_location@plt>
   20b20:	ldr	r3, [fp, #-960]	; 0xfffffc40
   20b24:	ldr	r2, [pc, #236]	; 20c18 <__assert_fail@plt+0xe654>
   20b28:	ldr	r1, [r0]
   20b2c:	mov	r0, #0
   20b30:	bl	121bc <error@plt>
   20b34:	mov	r0, r4
   20b38:	bl	2e3fc <__assert_fail@plt+0x1be38>
   20b3c:	b	209cc <__assert_fail@plt+0xe408>
   20b40:	mov	r7, #100	; 0x64
   20b44:	bl	12318 <__errno_location@plt>
   20b48:	ldr	r4, [r0]
   20b4c:	mov	r2, #5
   20b50:	ldr	r1, [pc, #204]	; 20c24 <__assert_fail@plt+0xe660>
   20b54:	mov	r0, #0
   20b58:	bl	12084 <dcgettext@plt>
   20b5c:	mov	r3, r7
   20b60:	mov	r2, r0
   20b64:	mov	r1, r4
   20b68:	mov	r0, #1
   20b6c:	bl	121bc <error@plt>
   20b70:	mov	r7, #250	; 0xfa
   20b74:	b	20b44 <__assert_fail@plt+0xe580>
   20b78:	mov	r7, #200	; 0xc8
   20b7c:	b	20b44 <__assert_fail@plt+0xe580>
   20b80:	ldr	r7, [pc, #160]	; 20c28 <__assert_fail@plt+0xe664>
   20b84:	b	20b44 <__assert_fail@plt+0xe580>
   20b88:	mov	r7, #300	; 0x12c
   20b8c:	b	20b44 <__assert_fail@plt+0xe580>
   20b90:	ldr	r7, [pc, #148]	; 20c2c <__assert_fail@plt+0xe668>
   20b94:	b	20b44 <__assert_fail@plt+0xe580>
   20b98:	mov	r7, #600	; 0x258
   20b9c:	b	20b44 <__assert_fail@plt+0xe580>
   20ba0:	mov	r7, #800	; 0x320
   20ba4:	b	20b44 <__assert_fail@plt+0xe580>
   20ba8:	ldr	r7, [pc, #128]	; 20c30 <__assert_fail@plt+0xe66c>
   20bac:	b	20b44 <__assert_fail@plt+0xe580>
   20bb0:	mov	r7, #1200	; 0x4b0
   20bb4:	b	20b44 <__assert_fail@plt+0xe580>
   20bb8:	ldr	r7, [pc, #116]	; 20c34 <__assert_fail@plt+0xe670>
   20bbc:	b	20b44 <__assert_fail@plt+0xe580>
   20bc0:	ldr	r7, [pc, #112]	; 20c38 <__assert_fail@plt+0xe674>
   20bc4:	mov	r0, r4
   20bc8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   20bcc:	b	20b44 <__assert_fail@plt+0xe580>
   20bd0:	andeq	r9, r5, ip, asr #9
   20bd4:	andeq	r6, r4, r4, asr #17
   20bd8:	andeq	r6, r4, r8, asr #17
   20bdc:	ldrdeq	r6, [r4], -r0
   20be0:	andeq	r6, r4, ip, lsr #17
   20be4:			; <UNDEFINED> instruction: 0x000468b8
   20be8:	ldrdeq	r6, [r4], -r8
   20bec:	andeq	r0, r0, r2, asr #3
   20bf0:	andeq	r6, r4, r0, ror #17
   20bf4:	andeq	r0, r0, sp, lsl #4
   20bf8:	andeq	r4, r4, r0, lsr r3
   20bfc:	andeq	r0, r0, r1, ror r2
   20c00:	andeq	r0, r0, sl, lsl #5
   20c04:	andeq	r6, r4, r8, ror #17
   20c08:	strdeq	r6, [r4], -r4
   20c0c:	andeq	r0, r0, ip, asr #8
   20c10:	andeq	r2, r4, ip, asr #19
   20c14:	andeq	r6, r4, ip, ror #17
   20c18:	andeq	r6, r4, r4, lsl #24
   20c1c:	strdeq	r6, [r4], -ip
   20c20:	andeq	r0, r0, r6, asr #10
   20c24:	andeq	r6, r4, r4, lsl #18
   20c28:	andeq	r0, r0, r3, lsl r1
   20c2c:	andeq	r0, r0, r6, lsr #4
   20c30:	andeq	r0, r0, r2, asr r3
   20c34:	andeq	r0, r0, r8, ror r5
   20c38:	andeq	r0, r0, r4, lsl r5
   20c3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   20c40:	sub	sp, sp, #8192	; 0x2000
   20c44:	sub	sp, sp, #12
   20c48:	mov	r4, r0
   20c4c:	mov	r5, r3
   20c50:	cmp	r2, #0
   20c54:	beq	20d24 <__assert_fail@plt+0xe760>
   20c58:	mov	r7, r1
   20c5c:	str	r1, [sp]
   20c60:	mvn	r3, #0
   20c64:	add	r2, sp, #8192	; 0x2000
   20c68:	add	r2, r2, #40	; 0x28
   20c6c:	ldr	r2, [r2]
   20c70:	mov	r1, #8192	; 0x2000
   20c74:	add	r0, sp, #8
   20c78:	bl	2ba0c <__assert_fail@plt+0x19448>
   20c7c:	mov	r6, r0
   20c80:	cmp	r0, #8192	; 0x2000
   20c84:	bcs	20cb8 <__assert_fail@plt+0xe6f4>
   20c88:	add	r7, sp, #8
   20c8c:	mov	r1, r0
   20c90:	mov	r0, r7
   20c94:	bl	20d4c <__assert_fail@plt+0xe788>
   20c98:	mov	r3, #0
   20c9c:	strb	r3, [r7, r0]
   20ca0:	mov	r2, r7
   20ca4:	mov	r1, r5
   20ca8:	mov	r0, r4
   20cac:	bl	1230c <fprintf@plt>
   20cb0:	mov	r4, r0
   20cb4:	b	20d3c <__assert_fail@plt+0xe778>
   20cb8:	add	r9, r0, #1
   20cbc:	mov	r0, r9
   20cc0:	bl	2cc14 <__assert_fail@plt+0x1a650>
   20cc4:	mov	r8, r0
   20cc8:	str	r7, [sp]
   20ccc:	mvn	r3, #0
   20cd0:	add	r2, sp, #8192	; 0x2000
   20cd4:	add	r2, r2, #40	; 0x28
   20cd8:	ldr	r2, [r2]
   20cdc:	mov	r1, r9
   20ce0:	bl	2ba0c <__assert_fail@plt+0x19448>
   20ce4:	mov	r1, r6
   20ce8:	mov	r0, r8
   20cec:	bl	20d4c <__assert_fail@plt+0xe788>
   20cf0:	mov	r3, #0
   20cf4:	strb	r3, [r8, r0]
   20cf8:	mov	r2, r8
   20cfc:	mov	r1, r5
   20d00:	mov	r0, r4
   20d04:	bl	1230c <fprintf@plt>
   20d08:	mov	r4, r0
   20d0c:	add	r3, sp, #8
   20d10:	cmp	r8, r3
   20d14:	beq	20d3c <__assert_fail@plt+0xe778>
   20d18:	mov	r0, r8
   20d1c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   20d20:	b	20d3c <__assert_fail@plt+0xe778>
   20d24:	add	r3, sp, #8192	; 0x2000
   20d28:	add	r3, r3, #40	; 0x28
   20d2c:	ldr	r2, [r3]
   20d30:	mov	r1, r5
   20d34:	bl	1230c <fprintf@plt>
   20d38:	mov	r4, r0
   20d3c:	mov	r0, r4
   20d40:	add	sp, sp, #8192	; 0x2000
   20d44:	add	sp, sp, #12
   20d48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d50:	sub	sp, sp, #20
   20d54:	mov	sl, r0
   20d58:	mov	r8, r1
   20d5c:	bl	12168 <__ctype_get_mb_cur_max@plt>
   20d60:	cmp	r0, #1
   20d64:	bls	20d88 <__assert_fail@plt+0xe7c4>
   20d68:	add	r8, sl, r8
   20d6c:	cmp	sl, r8
   20d70:	bcs	20ec4 <__assert_fail@plt+0xe900>
   20d74:	mov	r6, sl
   20d78:	mov	r4, sl
   20d7c:	mov	fp, #0
   20d80:	mov	r9, #63	; 0x3f
   20d84:	b	20df8 <__assert_fail@plt+0xe834>
   20d88:	add	r4, sl, r8
   20d8c:	cmp	sl, r4
   20d90:	bcs	20ed4 <__assert_fail@plt+0xe910>
   20d94:	bl	12288 <__ctype_b_loc@plt>
   20d98:	mov	r1, #63	; 0x3f
   20d9c:	ldrb	r3, [sl]
   20da0:	ldr	r2, [r0]
   20da4:	lsl	r3, r3, #1
   20da8:	ldrh	r3, [r2, r3]
   20dac:	tst	r3, #16384	; 0x4000
   20db0:	strbeq	r1, [sl]
   20db4:	add	sl, sl, #1
   20db8:	cmp	r4, sl
   20dbc:	bne	20d9c <__assert_fail@plt+0xe7d8>
   20dc0:	mov	r0, r8
   20dc4:	b	20ecc <__assert_fail@plt+0xe908>
   20dc8:	cmp	r3, #65	; 0x41
   20dcc:	bcc	20e18 <__assert_fail@plt+0xe854>
   20dd0:	cmp	r3, #95	; 0x5f
   20dd4:	bls	20de4 <__assert_fail@plt+0xe820>
   20dd8:	sub	r2, r3, #97	; 0x61
   20ddc:	cmp	r2, #29
   20de0:	bhi	20e18 <__assert_fail@plt+0xe854>
   20de4:	add	r4, r4, #1
   20de8:	strb	r3, [r6]
   20dec:	add	r6, r6, #1
   20df0:	cmp	r8, r4
   20df4:	bls	20ec8 <__assert_fail@plt+0xe904>
   20df8:	ldrb	r3, [r4]
   20dfc:	cmp	r3, #63	; 0x3f
   20e00:	bhi	20dc8 <__assert_fail@plt+0xe804>
   20e04:	cmp	r3, #37	; 0x25
   20e08:	bcs	20de4 <__assert_fail@plt+0xe820>
   20e0c:	sub	r2, r3, #32
   20e10:	cmp	r2, #3
   20e14:	bls	20de4 <__assert_fail@plt+0xe820>
   20e18:	add	r7, sp, #16
   20e1c:	str	fp, [r7, #-8]!
   20e20:	str	fp, [sp, #12]
   20e24:	b	20e64 <__assert_fail@plt+0xe8a0>
   20e28:	add	r4, r4, #1
   20e2c:	strb	r9, [r6]
   20e30:	add	r6, r6, #1
   20e34:	b	20df0 <__assert_fail@plt+0xe82c>
   20e38:	strb	r9, [r6]
   20e3c:	add	r6, r6, #1
   20e40:	mov	r4, r8
   20e44:	b	20df0 <__assert_fail@plt+0xe82c>
   20e48:	add	r4, r4, r5
   20e4c:	strb	r9, [r6]
   20e50:	add	r6, r6, #1
   20e54:	mov	r0, r7
   20e58:	bl	1203c <mbsinit@plt>
   20e5c:	cmp	r0, #0
   20e60:	bne	20df0 <__assert_fail@plt+0xe82c>
   20e64:	mov	r3, r7
   20e68:	sub	r2, r8, r4
   20e6c:	mov	r1, r4
   20e70:	add	r0, sp, #4
   20e74:	bl	307cc <__assert_fail@plt+0x1e208>
   20e78:	mov	r5, r0
   20e7c:	cmn	r0, #1
   20e80:	beq	20e28 <__assert_fail@plt+0xe864>
   20e84:	cmn	r0, #2
   20e88:	beq	20e38 <__assert_fail@plt+0xe874>
   20e8c:	cmp	r0, #0
   20e90:	moveq	r5, #1
   20e94:	ldr	r0, [sp, #4]
   20e98:	bl	11f7c <wcwidth@plt>
   20e9c:	cmp	r0, #0
   20ea0:	subge	r3, r6, #1
   20ea4:	addge	r1, r4, r5
   20ea8:	blt	20e48 <__assert_fail@plt+0xe884>
   20eac:	ldrb	r2, [r4], #1
   20eb0:	strb	r2, [r3, #1]!
   20eb4:	cmp	r1, r4
   20eb8:	bne	20eac <__assert_fail@plt+0xe8e8>
   20ebc:	add	r6, r6, r5
   20ec0:	b	20e54 <__assert_fail@plt+0xe890>
   20ec4:	mov	r6, sl
   20ec8:	sub	r0, r6, sl
   20ecc:	add	sp, sp, #20
   20ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ed4:	mov	r0, r8
   20ed8:	b	20ecc <__assert_fail@plt+0xe908>
   20edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ee0:	sub	sp, sp, #12
   20ee4:	mov	r8, r0
   20ee8:	mov	r4, #0
   20eec:	mov	r7, r4
   20ef0:	mov	r5, r4
   20ef4:	ldr	r9, [pc, #268]	; 21008 <__assert_fail@plt+0xea44>
   20ef8:	ldr	r6, [r4, r9]
   20efc:	mov	r1, r8
   20f00:	mov	r0, r6
   20f04:	bl	11f1c <strcmp@plt>
   20f08:	cmp	r0, #0
   20f0c:	beq	20ff0 <__assert_fail@plt+0xea2c>
   20f10:	mov	r0, r6
   20f14:	bl	2bf0c <__assert_fail@plt+0x19948>
   20f18:	bl	122d0 <strlen@plt>
   20f1c:	add	r0, r0, #2
   20f20:	add	r7, r7, r0
   20f24:	add	r5, r5, #1
   20f28:	add	r4, r4, #12
   20f2c:	cmp	r5, #13
   20f30:	bne	20ef8 <__assert_fail@plt+0xe934>
   20f34:	add	r0, r7, #1
   20f38:	bl	2cc14 <__assert_fail@plt+0x1a650>
   20f3c:	mov	fp, r0
   20f40:	mov	r4, r0
   20f44:	mov	r6, #0
   20f48:	mov	r5, #1
   20f4c:	ldr	sl, [pc, #180]	; 21008 <__assert_fail@plt+0xea44>
   20f50:	ldr	r9, [pc, #180]	; 2100c <__assert_fail@plt+0xea48>
   20f54:	ldr	r7, [pc, #180]	; 21010 <__assert_fail@plt+0xea4c>
   20f58:	b	20f80 <__assert_fail@plt+0xe9bc>
   20f5c:	ldr	r0, [sl, r6]
   20f60:	bl	2bf0c <__assert_fail@plt+0x19948>
   20f64:	mov	r2, r0
   20f68:	mov	r1, r9
   20f6c:	mov	r0, r4
   20f70:	bl	12480 <sprintf@plt>
   20f74:	add	r4, r4, r0
   20f78:	add	r5, r5, #1
   20f7c:	add	r6, r6, #12
   20f80:	cmp	r5, #1
   20f84:	beq	20f5c <__assert_fail@plt+0xe998>
   20f88:	ldrh	r2, [r7]
   20f8c:	ldrb	r3, [r7, #2]
   20f90:	strh	r2, [r4]
   20f94:	strb	r3, [r4, #2]!
   20f98:	ldr	r0, [sl, r6]
   20f9c:	bl	2bf0c <__assert_fail@plt+0x19948>
   20fa0:	mov	r2, r0
   20fa4:	mov	r1, r9
   20fa8:	mov	r0, r4
   20fac:	bl	12480 <sprintf@plt>
   20fb0:	add	r4, r4, r0
   20fb4:	cmp	r5, #12
   20fb8:	bls	20f78 <__assert_fail@plt+0xe9b4>
   20fbc:	mov	r2, #5
   20fc0:	ldr	r1, [pc, #76]	; 21014 <__assert_fail@plt+0xea50>
   20fc4:	mov	r0, #0
   20fc8:	bl	12084 <dcgettext@plt>
   20fcc:	mov	r4, r0
   20fd0:	mov	r0, r8
   20fd4:	bl	2bf0c <__assert_fail@plt+0x19948>
   20fd8:	str	fp, [sp]
   20fdc:	mov	r3, r0
   20fe0:	mov	r2, r4
   20fe4:	mov	r1, #0
   20fe8:	mov	r0, #1
   20fec:	bl	121bc <error@plt>
   20ff0:	add	r5, r5, r5, lsl #1
   20ff4:	ldr	r3, [pc, #12]	; 21008 <__assert_fail@plt+0xea44>
   20ff8:	add	r5, r3, r5, lsl #2
   20ffc:	ldr	r0, [r5, #8]
   21000:	add	sp, sp, #12
   21004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21008:	andeq	r6, r4, ip, lsr #18
   2100c:	andeq	r6, r4, r4, lsl #24
   21010:	andeq	r4, r4, r0, lsr r3
   21014:	andeq	r6, r4, r8, asr #19
   21018:	cmp	r0, #12
   2101c:	addls	r0, r0, r0, lsl #1
   21020:	ldrls	r3, [pc, #8]	; 21030 <__assert_fail@plt+0xea6c>
   21024:	ldrls	r0, [r3, r0, lsl #2]
   21028:	movhi	r0, #0
   2102c:	bx	lr
   21030:	andeq	r6, r4, ip, lsr #18
   21034:	cmp	r0, #12
   21038:	addls	r0, r0, r0, lsl #1
   2103c:	ldrls	r3, [pc, #12]	; 21050 <__assert_fail@plt+0xea8c>
   21040:	addls	r0, r3, r0, lsl #2
   21044:	ldrls	r0, [r0, #8]
   21048:	mvnhi	r0, #0
   2104c:	bx	lr
   21050:	andeq	r6, r4, ip, lsr #18
   21054:	cmp	r0, #12
   21058:	addls	r0, r0, r0, lsl #1
   2105c:	ldrls	r3, [pc, #12]	; 21070 <__assert_fail@plt+0xeaac>
   21060:	addls	r0, r3, r0, lsl #2
   21064:	ldrls	r0, [r0, #4]
   21068:	movhi	r0, #0
   2106c:	bx	lr
   21070:	andeq	r6, r4, ip, lsr #18
   21074:	cmp	r0, #12
   21078:	bhi	210dc <__assert_fail@plt+0xeb18>
   2107c:	push	{lr}		; (str lr, [sp, #-4]!)
   21080:	add	r3, r0, r0, lsl #1
   21084:	ldr	r2, [pc, #96]	; 210ec <__assert_fail@plt+0xeb28>
   21088:	add	r3, r2, r3, lsl #2
   2108c:	ldr	lr, [r3, #8]
   21090:	cmp	r0, #0
   21094:	beq	210e4 <__assert_fail@plt+0xeb20>
   21098:	mov	r3, r2
   2109c:	mov	r2, #0
   210a0:	b	210b4 <__assert_fail@plt+0xeaf0>
   210a4:	add	r2, r2, #1
   210a8:	add	r3, r3, #12
   210ac:	cmp	r0, r2
   210b0:	beq	210d4 <__assert_fail@plt+0xeb10>
   210b4:	ldr	ip, [r3, #4]
   210b8:	tst	r1, ip
   210bc:	beq	210a4 <__assert_fail@plt+0xeae0>
   210c0:	ldr	ip, [r3, #8]
   210c4:	cmp	lr, ip
   210c8:	bne	210a4 <__assert_fail@plt+0xeae0>
   210cc:	mov	r0, r2
   210d0:	pop	{pc}		; (ldr pc, [sp], #4)
   210d4:	mvn	r0, #0
   210d8:	pop	{pc}		; (ldr pc, [sp], #4)
   210dc:	mvn	r0, #0
   210e0:	bx	lr
   210e4:	mvn	r0, #0
   210e8:	pop	{pc}		; (ldr pc, [sp], #4)
   210ec:	andeq	r6, r4, ip, lsr #18
   210f0:	push	{r4, r5, r6, r7, r8, lr}
   210f4:	sub	sp, sp, #16
   210f8:	mov	r4, r0
   210fc:	mov	r6, r1
   21100:	bl	12318 <__errno_location@plt>
   21104:	mov	r5, r0
   21108:	mov	r3, #0
   2110c:	str	r3, [r0]
   21110:	mov	r2, #10
   21114:	add	r1, sp, #12
   21118:	mov	r0, r4
   2111c:	bl	11f28 <strtol@plt>
   21120:	sub	r3, r0, #-2147483647	; 0x80000001
   21124:	cmn	r3, #3
   21128:	bls	21158 <__assert_fail@plt+0xeb94>
   2112c:	ldr	r1, [r5]
   21130:	cmp	r1, #34	; 0x22
   21134:	beq	21148 <__assert_fail@plt+0xeb84>
   21138:	mov	r3, r4
   2113c:	ldr	r2, [pc, #196]	; 21208 <__assert_fail@plt+0xec44>
   21140:	mov	r0, #1
   21144:	bl	121bc <error@plt>
   21148:	mov	r3, r4
   2114c:	ldr	r2, [pc, #180]	; 21208 <__assert_fail@plt+0xec44>
   21150:	mov	r0, #1
   21154:	bl	121bc <error@plt>
   21158:	ldr	r3, [sp, #12]
   2115c:	ldrb	r2, [r3]
   21160:	cmp	r2, #0
   21164:	bne	21178 <__assert_fail@plt+0xebb4>
   21168:	cmp	r4, r3
   2116c:	beq	211cc <__assert_fail@plt+0xec08>
   21170:	add	sp, sp, #16
   21174:	pop	{r4, r5, r6, r7, r8, pc}
   21178:	ldr	r5, [r5]
   2117c:	mov	r2, #5
   21180:	ldr	r1, [pc, #132]	; 2120c <__assert_fail@plt+0xec48>
   21184:	mov	r0, #0
   21188:	bl	12084 <dcgettext@plt>
   2118c:	mov	r7, r0
   21190:	ldr	r2, [sp, #12]
   21194:	mov	r1, r6
   21198:	mov	r0, #0
   2119c:	bl	2bc6c <__assert_fail@plt+0x196a8>
   211a0:	mov	r8, r0
   211a4:	mov	r2, r4
   211a8:	mov	r1, r6
   211ac:	mov	r0, #1
   211b0:	bl	2bc6c <__assert_fail@plt+0x196a8>
   211b4:	str	r0, [sp]
   211b8:	mov	r3, r8
   211bc:	mov	r2, r7
   211c0:	mov	r1, r5
   211c4:	mov	r0, #1
   211c8:	bl	121bc <error@plt>
   211cc:	ldr	r5, [r5]
   211d0:	mov	r2, #5
   211d4:	ldr	r1, [pc, #52]	; 21210 <__assert_fail@plt+0xec4c>
   211d8:	mov	r0, #0
   211dc:	bl	12084 <dcgettext@plt>
   211e0:	mov	r7, r0
   211e4:	mov	r2, r4
   211e8:	mov	r1, r6
   211ec:	mov	r0, #0
   211f0:	bl	2bc6c <__assert_fail@plt+0x196a8>
   211f4:	mov	r3, r0
   211f8:	mov	r2, r7
   211fc:	mov	r1, r5
   21200:	mov	r0, #1
   21204:	bl	121bc <error@plt>
   21208:	andeq	r6, r4, r4, lsl #24
   2120c:	andeq	r6, r4, r0, lsl #21
   21210:	muleq	r4, ip, sl
   21214:	push	{r4, r5, r6, lr}
   21218:	ldr	r5, [sp, #16]
   2121c:	cmp	r2, #0
   21220:	beq	2125c <__assert_fail@plt+0xec98>
   21224:	mov	r2, #0
   21228:	str	r2, [r3]
   2122c:	str	r2, [r5]
   21230:	ldr	r4, [r3]
   21234:	add	r4, r0, r4
   21238:	ldrb	r3, [r1]
   2123c:	cmp	r3, #0
   21240:	beq	21284 <__assert_fail@plt+0xecc0>
   21244:	mov	r0, r4
   21248:	bl	124f8 <strpbrk@plt>
   2124c:	cmp	r0, #0
   21250:	beq	21284 <__assert_fail@plt+0xecc0>
   21254:	sub	r0, r0, r4
   21258:	b	2128c <__assert_fail@plt+0xecc8>
   2125c:	ldr	ip, [r3]
   21260:	ldr	lr, [r5]
   21264:	add	ip, ip, lr
   21268:	str	ip, [r3]
   2126c:	ldrb	lr, [r0, ip]
   21270:	cmp	lr, #0
   21274:	beq	21298 <__assert_fail@plt+0xecd4>
   21278:	add	ip, ip, #1
   2127c:	str	ip, [r3]
   21280:	b	21230 <__assert_fail@plt+0xec6c>
   21284:	mov	r0, r4
   21288:	bl	122d0 <strlen@plt>
   2128c:	str	r0, [r5]
   21290:	mov	r0, #1
   21294:	pop	{r4, r5, r6, pc}
   21298:	mov	r0, r2
   2129c:	pop	{r4, r5, r6, pc}
   212a0:	push	{r4, r5, lr}
   212a4:	sub	sp, sp, #20
   212a8:	mov	r4, r0
   212ac:	mov	r5, r1
   212b0:	mov	r2, #5
   212b4:	ldr	r1, [pc, #56]	; 212f4 <__assert_fail@plt+0xed30>
   212b8:	mov	r0, #0
   212bc:	bl	12084 <dcgettext@plt>
   212c0:	ldr	r3, [pc, #48]	; 212f8 <__assert_fail@plt+0xed34>
   212c4:	str	r3, [sp, #8]
   212c8:	ldr	r3, [pc, #44]	; 212fc <__assert_fail@plt+0xed38>
   212cc:	str	r3, [sp, #4]
   212d0:	ldr	r3, [pc, #40]	; 21300 <__assert_fail@plt+0xed3c>
   212d4:	str	r3, [sp]
   212d8:	mov	r3, r5
   212dc:	ldr	r2, [pc, #32]	; 21304 <__assert_fail@plt+0xed40>
   212e0:	mov	r1, r0
   212e4:	mov	r0, r4
   212e8:	bl	1230c <fprintf@plt>
   212ec:	add	sp, sp, #20
   212f0:	pop	{r4, r5, pc}
   212f4:			; <UNDEFINED> instruction: 0x00046ab4
   212f8:	andeq	r6, r4, ip, lsr #23
   212fc:	andeq	r6, r4, r4, asr #23
   21300:	andeq	r6, r4, r4, ror #16
   21304:	andeq	r6, r4, r4, lsl #23
   21308:	push	{lr}		; (str lr, [sp, #-4]!)
   2130c:	sub	sp, sp, #12
   21310:	ldr	r3, [pc, #24]	; 21330 <__assert_fail@plt+0xed6c>
   21314:	str	r3, [sp, #4]
   21318:	mov	r2, #0
   2131c:	str	r2, [sp]
   21320:	mov	r3, r2
   21324:	bl	21474 <__assert_fail@plt+0xeeb0>
   21328:	add	sp, sp, #12
   2132c:	pop	{pc}		; (ldr pc, [sp], #4)
   21330:	andeq	r2, r1, r8, lsr #4
   21334:	push	{r4, lr}
   21338:	mov	r4, r0
   2133c:	mov	r0, #24
   21340:	bl	3079c <__assert_fail@plt+0x1e1d8>
   21344:	cmp	r0, #0
   21348:	movne	r3, #0
   2134c:	strne	r3, [r0]
   21350:	strne	r4, [r0, #16]
   21354:	strne	r4, [r0, #20]
   21358:	pop	{r4, pc}
   2135c:	push	{r4, lr}
   21360:	mov	r4, r0
   21364:	mov	r0, #24
   21368:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2136c:	cmp	r0, #0
   21370:	popeq	{r4, pc}
   21374:	str	r4, [r0]
   21378:	mov	r3, #0
   2137c:	str	r3, [r0, #8]
   21380:	str	r3, [r0, #12]
   21384:	str	r3, [r0, #4]
   21388:	str	r3, [r0, #16]
   2138c:	pop	{r4, pc}
   21390:	push	{r4, r5, r6, lr}
   21394:	mov	r4, r0
   21398:	ldr	r3, [r0]
   2139c:	cmp	r3, #0
   213a0:	beq	213fc <__assert_fail@plt+0xee38>
   213a4:	mov	r5, r1
   213a8:	mov	r2, #0
   213ac:	add	r1, r0, #12
   213b0:	add	r0, r0, #8
   213b4:	bl	1251c <getdelim@plt>
   213b8:	cmp	r0, #0
   213bc:	blt	213dc <__assert_fail@plt+0xee18>
   213c0:	mov	r3, #1
   213c4:	str	r3, [r5]
   213c8:	ldr	r3, [r4, #4]
   213cc:	add	r3, r3, #1
   213d0:	str	r3, [r4, #4]
   213d4:	ldr	r0, [r4, #8]
   213d8:	pop	{r4, r5, r6, pc}
   213dc:	ldr	r0, [r4]
   213e0:	bl	122ac <feof@plt>
   213e4:	cmp	r0, #0
   213e8:	movne	r3, #2
   213ec:	moveq	r3, #4
   213f0:	str	r3, [r5]
   213f4:	mov	r0, #0
   213f8:	pop	{r4, r5, r6, pc}
   213fc:	ldr	r3, [r0, #20]
   21400:	ldr	r0, [r3]
   21404:	cmp	r0, #0
   21408:	moveq	r3, #2
   2140c:	streq	r3, [r1]
   21410:	movne	r3, #1
   21414:	strne	r3, [r1]
   21418:	ldrne	r3, [r4, #20]
   2141c:	addne	r2, r3, #4
   21420:	strne	r2, [r4, #20]
   21424:	ldrne	r0, [r3]
   21428:	pop	{r4, r5, r6, pc}
   2142c:	ldr	r3, [r0]
   21430:	cmp	r3, #0
   21434:	ldrne	r0, [r0, #4]
   21438:	ldreq	r3, [r0, #20]
   2143c:	ldreq	r0, [r0, #16]
   21440:	subeq	r0, r3, r0
   21444:	asreq	r0, r0, #2
   21448:	bx	lr
   2144c:	push	{r4, lr}
   21450:	mov	r4, r0
   21454:	ldr	r3, [r0]
   21458:	cmp	r3, #0
   2145c:	beq	21468 <__assert_fail@plt+0xeea4>
   21460:	ldr	r0, [r0, #8]
   21464:	bl	2e3fc <__assert_fail@plt+0x1be38>
   21468:	mov	r0, r4
   2146c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   21470:	pop	{r4, pc}
   21474:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21478:	sub	sp, sp, #1024	; 0x400
   2147c:	mov	r8, r0
   21480:	mov	r9, r1
   21484:	ldr	r6, [sp, #1056]	; 0x420
   21488:	ldr	sl, [sp, #1060]	; 0x424
   2148c:	ldr	r1, [pc, #364]	; 21600 <__assert_fail@plt+0xf03c>
   21490:	cmp	r6, #0
   21494:	moveq	r6, r1
   21498:	subs	r7, r2, #0
   2149c:	moveq	r3, #1024	; 0x400
   214a0:	moveq	r7, sp
   214a4:	mvn	r4, #-2147483648	; 0x80000000
   214a8:	cmp	r3, r4
   214ac:	movcc	r4, r3
   214b0:	mov	r5, r7
   214b4:	b	2157c <__assert_fail@plt+0xefb8>
   214b8:	cmp	r7, r5
   214bc:	moveq	r5, #0
   214c0:	beq	215f4 <__assert_fail@plt+0xf030>
   214c4:	bl	12318 <__errno_location@plt>
   214c8:	mov	r4, r0
   214cc:	ldr	r7, [r0]
   214d0:	ldr	r3, [r6, #8]
   214d4:	mov	r0, r5
   214d8:	blx	r3
   214dc:	str	r7, [r4]
   214e0:	mov	r5, #0
   214e4:	b	215f4 <__assert_fail@plt+0xf030>
   214e8:	add	r8, r0, #1
   214ec:	mov	r3, #0
   214f0:	strb	r3, [r5, r0]
   214f4:	mov	r3, sp
   214f8:	cmp	r5, r3
   214fc:	beq	21530 <__assert_fail@plt+0xef6c>
   21500:	cmp	r7, r5
   21504:	cmpne	r8, r4
   21508:	bge	215f4 <__assert_fail@plt+0xf030>
   2150c:	ldr	r3, [r6, #4]
   21510:	cmp	r3, #0
   21514:	beq	215f4 <__assert_fail@plt+0xf030>
   21518:	mov	r1, r8
   2151c:	mov	r0, r5
   21520:	blx	r3
   21524:	cmp	r0, #0
   21528:	movne	r5, r0
   2152c:	b	215f4 <__assert_fail@plt+0xf030>
   21530:	ldr	r3, [r6]
   21534:	mov	r0, r8
   21538:	blx	r3
   2153c:	cmp	r0, #0
   21540:	beq	215cc <__assert_fail@plt+0xf008>
   21544:	mov	r2, r8
   21548:	mov	r1, r5
   2154c:	bl	12000 <memcpy@plt>
   21550:	mov	r5, r0
   21554:	b	215f4 <__assert_fail@plt+0xf030>
   21558:	cmn	r4, #-1073741822	; 0xc0000002
   2155c:	bgt	215b8 <__assert_fail@plt+0xeff4>
   21560:	lsl	r4, r4, #1
   21564:	add	r4, r4, #1
   21568:	ldr	r3, [r6]
   2156c:	mov	r0, r4
   21570:	blx	r3
   21574:	subs	r5, r0, #0
   21578:	beq	215d0 <__assert_fail@plt+0xf00c>
   2157c:	mov	r3, r4
   21580:	mov	r2, r5
   21584:	mov	r1, r9
   21588:	mov	r0, r8
   2158c:	blx	sl
   21590:	cmp	r0, #0
   21594:	blt	214b8 <__assert_fail@plt+0xeef4>
   21598:	cmp	r0, r4
   2159c:	blt	214e8 <__assert_fail@plt+0xef24>
   215a0:	cmp	r7, r5
   215a4:	beq	21558 <__assert_fail@plt+0xef94>
   215a8:	ldr	r3, [r6, #8]
   215ac:	mov	r0, r5
   215b0:	blx	r3
   215b4:	b	21558 <__assert_fail@plt+0xef94>
   215b8:	bl	12318 <__errno_location@plt>
   215bc:	mov	r3, #36	; 0x24
   215c0:	str	r3, [r0]
   215c4:	mov	r5, #0
   215c8:	b	215f4 <__assert_fail@plt+0xf030>
   215cc:	mov	r4, r8
   215d0:	ldr	r3, [r6, #12]
   215d4:	cmp	r3, #0
   215d8:	beq	215e4 <__assert_fail@plt+0xf020>
   215dc:	mov	r0, r4
   215e0:	blx	r3
   215e4:	bl	12318 <__errno_location@plt>
   215e8:	mov	r3, #12
   215ec:	str	r3, [r0]
   215f0:	mov	r5, #0
   215f4:	mov	r0, r5
   215f8:	add	sp, sp, #1024	; 0x400
   215fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21600:	andeq	r8, r4, r4, lsl #10
   21604:	push	{r4, r5, r6, lr}
   21608:	mov	r5, r0
   2160c:	mov	r4, r1
   21610:	mov	r2, #0
   21614:	mov	r1, #1
   21618:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   2161c:	cmp	r0, #0
   21620:	blt	21658 <__assert_fail@plt+0xf094>
   21624:	cmp	r4, #0
   21628:	orrne	r2, r0, #1
   2162c:	biceq	r2, r0, #1
   21630:	cmp	r2, r0
   21634:	beq	21660 <__assert_fail@plt+0xf09c>
   21638:	mov	r1, #2
   2163c:	mov	r0, r5
   21640:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   21644:	cmn	r0, #1
   21648:	movne	r0, #0
   2164c:	moveq	r0, #1
   21650:	rsb	r0, r0, #0
   21654:	pop	{r4, r5, r6, pc}
   21658:	mvn	r0, #0
   2165c:	pop	{r4, r5, r6, pc}
   21660:	mov	r0, #0
   21664:	pop	{r4, r5, r6, pc}
   21668:	push	{r4, lr}
   2166c:	mov	r2, #0
   21670:	ldr	r1, [pc, #4]	; 2167c <__assert_fail@plt+0xf0b8>
   21674:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   21678:	pop	{r4, pc}
   2167c:	andeq	r0, r0, r6, lsl #8
   21680:	ldr	r3, [pc, #4]	; 2168c <__assert_fail@plt+0xf0c8>
   21684:	str	r0, [r3]
   21688:	bx	lr
   2168c:	andeq	r9, r5, ip, ror #25
   21690:	ldr	r3, [pc, #4]	; 2169c <__assert_fail@plt+0xf0d8>
   21694:	strb	r0, [r3, #4]
   21698:	bx	lr
   2169c:	andeq	r9, r5, ip, ror #25
   216a0:	push	{r4, r5, r6, lr}
   216a4:	sub	sp, sp, #8
   216a8:	ldr	r3, [pc, #200]	; 21778 <__assert_fail@plt+0xf1b4>
   216ac:	ldr	r0, [r3]
   216b0:	bl	3f8c4 <__assert_fail@plt+0x2d300>
   216b4:	cmp	r0, #0
   216b8:	beq	216dc <__assert_fail@plt+0xf118>
   216bc:	ldr	r3, [pc, #184]	; 2177c <__assert_fail@plt+0xf1b8>
   216c0:	ldrb	r3, [r3, #4]
   216c4:	cmp	r3, #0
   216c8:	beq	216f8 <__assert_fail@plt+0xf134>
   216cc:	bl	12318 <__errno_location@plt>
   216d0:	ldr	r3, [r0]
   216d4:	cmp	r3, #32
   216d8:	bne	216f8 <__assert_fail@plt+0xf134>
   216dc:	ldr	r3, [pc, #156]	; 21780 <__assert_fail@plt+0xf1bc>
   216e0:	ldr	r0, [r3]
   216e4:	bl	3f8c4 <__assert_fail@plt+0x2d300>
   216e8:	cmp	r0, #0
   216ec:	bne	2176c <__assert_fail@plt+0xf1a8>
   216f0:	add	sp, sp, #8
   216f4:	pop	{r4, r5, r6, pc}
   216f8:	mov	r2, #5
   216fc:	ldr	r1, [pc, #128]	; 21784 <__assert_fail@plt+0xf1c0>
   21700:	mov	r0, #0
   21704:	bl	12084 <dcgettext@plt>
   21708:	mov	r4, r0
   2170c:	ldr	r3, [pc, #104]	; 2177c <__assert_fail@plt+0xf1b8>
   21710:	ldr	r5, [r3]
   21714:	cmp	r5, #0
   21718:	beq	21750 <__assert_fail@plt+0xf18c>
   2171c:	bl	12318 <__errno_location@plt>
   21720:	ldr	r6, [r0]
   21724:	mov	r0, r5
   21728:	bl	2bd84 <__assert_fail@plt+0x197c0>
   2172c:	str	r4, [sp]
   21730:	mov	r3, r0
   21734:	ldr	r2, [pc, #76]	; 21788 <__assert_fail@plt+0xf1c4>
   21738:	mov	r1, r6
   2173c:	mov	r0, #0
   21740:	bl	121bc <error@plt>
   21744:	ldr	r3, [pc, #64]	; 2178c <__assert_fail@plt+0xf1c8>
   21748:	ldr	r0, [r3]
   2174c:	bl	11ff4 <_exit@plt>
   21750:	bl	12318 <__errno_location@plt>
   21754:	mov	r3, r4
   21758:	ldr	r2, [pc, #48]	; 21790 <__assert_fail@plt+0xf1cc>
   2175c:	ldr	r1, [r0]
   21760:	mov	r0, #0
   21764:	bl	121bc <error@plt>
   21768:	b	21744 <__assert_fail@plt+0xf180>
   2176c:	ldr	r3, [pc, #24]	; 2178c <__assert_fail@plt+0xf1c8>
   21770:	ldr	r0, [r3]
   21774:	bl	11ff4 <_exit@plt>
   21778:	andeq	r9, r5, r4, asr r5
   2177c:	andeq	r9, r5, ip, ror #25
   21780:	andeq	r9, r5, r8, asr #10
   21784:	strdeq	r6, [r4], -r4
   21788:	andeq	r6, r4, r0, lsl #24
   2178c:	andeq	r9, r5, ip, ror #9
   21790:	andeq	r6, r4, r4, lsl #24
   21794:	push	{r4, r5, r6, r7, r8, lr}
   21798:	bl	121d4 <opendir@plt>
   2179c:	subs	r4, r0, #0
   217a0:	beq	217b4 <__assert_fail@plt+0xf1f0>
   217a4:	mov	r0, r4
   217a8:	bl	124bc <dirfd@plt>
   217ac:	cmp	r0, #2
   217b0:	bls	217bc <__assert_fail@plt+0xf1f8>
   217b4:	mov	r0, r4
   217b8:	pop	{r4, r5, r6, r7, r8, pc}
   217bc:	mov	r2, #3
   217c0:	ldr	r1, [pc, #88]	; 21820 <__assert_fail@plt+0xf25c>
   217c4:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   217c8:	subs	r7, r0, #0
   217cc:	blt	21804 <__assert_fail@plt+0xf240>
   217d0:	mov	r0, r7
   217d4:	bl	12498 <fdopendir@plt>
   217d8:	mov	r5, r0
   217dc:	bl	12318 <__errno_location@plt>
   217e0:	ldr	r6, [r0]
   217e4:	cmp	r5, #0
   217e8:	beq	21814 <__assert_fail@plt+0xf250>
   217ec:	mov	r0, r4
   217f0:	bl	12594 <closedir@plt>
   217f4:	bl	12318 <__errno_location@plt>
   217f8:	str	r6, [r0]
   217fc:	mov	r4, r5
   21800:	b	217b4 <__assert_fail@plt+0xf1f0>
   21804:	bl	12318 <__errno_location@plt>
   21808:	ldr	r6, [r0]
   2180c:	mov	r5, #0
   21810:	b	217ec <__assert_fail@plt+0xf228>
   21814:	mov	r0, r7
   21818:	bl	1257c <close@plt>
   2181c:	b	217ec <__assert_fail@plt+0xf228>
   21820:	andeq	r0, r0, r6, lsl #8
   21824:	push	{r4, r5, r6, lr}
   21828:	mov	r6, r0
   2182c:	bl	3f804 <__assert_fail@plt+0x2d240>
   21830:	ldrb	r3, [r0]
   21834:	cmp	r3, #0
   21838:	bne	21870 <__assert_fail@plt+0xf2ac>
   2183c:	mov	r0, r6
   21840:	bl	3f86c <__assert_fail@plt+0x2d2a8>
   21844:	mov	r4, r0
   21848:	add	r0, r4, #1
   2184c:	bl	2cc28 <__assert_fail@plt+0x1a664>
   21850:	mov	r5, r0
   21854:	mov	r2, r4
   21858:	mov	r1, r6
   2185c:	bl	12000 <memcpy@plt>
   21860:	mov	r3, #0
   21864:	strb	r3, [r5, r4]
   21868:	mov	r0, r5
   2186c:	pop	{r4, r5, r6, pc}
   21870:	mov	r5, r0
   21874:	bl	3f86c <__assert_fail@plt+0x2d2a8>
   21878:	ldrb	r4, [r5, r0]
   2187c:	cmp	r4, #47	; 0x2f
   21880:	movne	r4, r0
   21884:	addeq	r4, r0, #1
   21888:	mov	r6, r5
   2188c:	b	21848 <__assert_fail@plt+0xf284>
   21890:	push	{r4, r5, r6, lr}
   21894:	mov	r5, r0
   21898:	ldrb	r4, [r0]
   2189c:	cmp	r4, #47	; 0x2f
   218a0:	movne	r4, #0
   218a4:	moveq	r4, #1
   218a8:	bl	3f804 <__assert_fail@plt+0x2d240>
   218ac:	sub	r0, r0, r5
   218b0:	cmp	r0, r4
   218b4:	bls	218ec <__assert_fail@plt+0xf328>
   218b8:	sub	r3, r0, #1
   218bc:	add	r2, r5, r3
   218c0:	ldrb	r1, [r5, r3]
   218c4:	cmp	r1, #47	; 0x2f
   218c8:	bne	218f4 <__assert_fail@plt+0xf330>
   218cc:	cmp	r4, r3
   218d0:	beq	21900 <__assert_fail@plt+0xf33c>
   218d4:	sub	r0, r3, #1
   218d8:	ldrb	r1, [r2, #-1]!
   218dc:	cmp	r1, #47	; 0x2f
   218e0:	bne	218fc <__assert_fail@plt+0xf338>
   218e4:	mov	r3, r0
   218e8:	b	218cc <__assert_fail@plt+0xf308>
   218ec:	mov	r4, r0
   218f0:	b	21900 <__assert_fail@plt+0xf33c>
   218f4:	mov	r4, r0
   218f8:	b	21900 <__assert_fail@plt+0xf33c>
   218fc:	mov	r4, r3
   21900:	mov	r0, r4
   21904:	pop	{r4, r5, r6, pc}
   21908:	push	{r4, r5, r6, r7, r8, lr}
   2190c:	mov	r7, r0
   21910:	bl	21890 <__assert_fail@plt+0xf2cc>
   21914:	mov	r4, r0
   21918:	add	r6, r0, #1
   2191c:	cmp	r0, #0
   21920:	movne	r0, r6
   21924:	addeq	r0, r6, #1
   21928:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2192c:	subs	r5, r0, #0
   21930:	beq	2195c <__assert_fail@plt+0xf398>
   21934:	mov	r2, r4
   21938:	mov	r1, r7
   2193c:	mov	r0, r5
   21940:	bl	12000 <memcpy@plt>
   21944:	cmp	r4, #0
   21948:	moveq	r3, #46	; 0x2e
   2194c:	strbeq	r3, [r5, r4]
   21950:	moveq	r4, r6
   21954:	mov	r3, #0
   21958:	strb	r3, [r5, r4]
   2195c:	mov	r0, r5
   21960:	pop	{r4, r5, r6, r7, r8, pc}
   21964:	push	{r4, r5, r6, lr}
   21968:	mov	r5, r0
   2196c:	bl	3f804 <__assert_fail@plt+0x2d240>
   21970:	mov	r4, r0
   21974:	ldrb	r3, [r0]
   21978:	cmp	r3, #0
   2197c:	moveq	r4, r5
   21980:	mov	r0, r4
   21984:	bl	3f86c <__assert_fail@plt+0x2d2a8>
   21988:	ldrb	r3, [r4, r0]
   2198c:	mov	r2, #0
   21990:	strb	r2, [r4, r0]
   21994:	subs	r0, r3, r2
   21998:	movne	r0, #1
   2199c:	pop	{r4, r5, r6, pc}
   219a0:	push	{r1, r2, r3}
   219a4:	push	{lr}		; (str lr, [sp, #-4]!)
   219a8:	sub	sp, sp, #8
   219ac:	ldr	r1, [sp, #12]
   219b0:	tst	r1, #64	; 0x40
   219b4:	addne	r3, sp, #20
   219b8:	strne	r3, [sp, #4]
   219bc:	ldrne	r2, [sp, #16]
   219c0:	moveq	r2, #0
   219c4:	bl	121ec <open64@plt>
   219c8:	bl	2c6d0 <__assert_fail@plt+0x1a10c>
   219cc:	add	sp, sp, #8
   219d0:	pop	{lr}		; (ldr lr, [sp], #4)
   219d4:	add	sp, sp, #12
   219d8:	bx	lr
   219dc:	and	r3, r0, #61440	; 0xf000
   219e0:	cmp	r3, #32768	; 0x8000
   219e4:	moveq	r3, #45	; 0x2d
   219e8:	beq	21a34 <__assert_fail@plt+0xf470>
   219ec:	cmp	r3, #16384	; 0x4000
   219f0:	moveq	r3, #100	; 0x64
   219f4:	beq	21a34 <__assert_fail@plt+0xf470>
   219f8:	cmp	r3, #24576	; 0x6000
   219fc:	moveq	r3, #98	; 0x62
   21a00:	beq	21a34 <__assert_fail@plt+0xf470>
   21a04:	cmp	r3, #8192	; 0x2000
   21a08:	moveq	r3, #99	; 0x63
   21a0c:	beq	21a34 <__assert_fail@plt+0xf470>
   21a10:	cmp	r3, #40960	; 0xa000
   21a14:	moveq	r3, #108	; 0x6c
   21a18:	beq	21a34 <__assert_fail@plt+0xf470>
   21a1c:	cmp	r3, #4096	; 0x1000
   21a20:	moveq	r3, #112	; 0x70
   21a24:	beq	21a34 <__assert_fail@plt+0xf470>
   21a28:	cmp	r3, #49152	; 0xc000
   21a2c:	moveq	r3, #115	; 0x73
   21a30:	movne	r3, #63	; 0x3f
   21a34:	strb	r3, [r1]
   21a38:	and	r3, r0, #256	; 0x100
   21a3c:	cmp	r3, #0
   21a40:	movne	r3, #114	; 0x72
   21a44:	moveq	r3, #45	; 0x2d
   21a48:	strb	r3, [r1, #1]
   21a4c:	and	r3, r0, #128	; 0x80
   21a50:	cmp	r3, #0
   21a54:	movne	r3, #119	; 0x77
   21a58:	moveq	r3, #45	; 0x2d
   21a5c:	strb	r3, [r1, #2]
   21a60:	tst	r0, #2048	; 0x800
   21a64:	beq	21b18 <__assert_fail@plt+0xf554>
   21a68:	and	r3, r0, #64	; 0x40
   21a6c:	cmp	r3, #0
   21a70:	movne	r3, #115	; 0x73
   21a74:	moveq	r3, #83	; 0x53
   21a78:	strb	r3, [r1, #3]
   21a7c:	and	r3, r0, #32
   21a80:	cmp	r3, #0
   21a84:	movne	r3, #114	; 0x72
   21a88:	moveq	r3, #45	; 0x2d
   21a8c:	strb	r3, [r1, #4]
   21a90:	and	r3, r0, #16
   21a94:	cmp	r3, #0
   21a98:	movne	r3, #119	; 0x77
   21a9c:	moveq	r3, #45	; 0x2d
   21aa0:	strb	r3, [r1, #5]
   21aa4:	tst	r0, #1024	; 0x400
   21aa8:	beq	21b2c <__assert_fail@plt+0xf568>
   21aac:	and	r3, r0, #8
   21ab0:	cmp	r3, #0
   21ab4:	movne	r3, #115	; 0x73
   21ab8:	moveq	r3, #83	; 0x53
   21abc:	strb	r3, [r1, #6]
   21ac0:	and	r3, r0, #4
   21ac4:	cmp	r3, #0
   21ac8:	movne	r3, #114	; 0x72
   21acc:	moveq	r3, #45	; 0x2d
   21ad0:	strb	r3, [r1, #7]
   21ad4:	and	r3, r0, #2
   21ad8:	cmp	r3, #0
   21adc:	movne	r3, #119	; 0x77
   21ae0:	moveq	r3, #45	; 0x2d
   21ae4:	strb	r3, [r1, #8]
   21ae8:	tst	r0, #512	; 0x200
   21aec:	beq	21b40 <__assert_fail@plt+0xf57c>
   21af0:	and	r0, r0, #1
   21af4:	cmp	r0, #0
   21af8:	movne	r0, #116	; 0x74
   21afc:	moveq	r0, #84	; 0x54
   21b00:	strb	r0, [r1, #9]
   21b04:	mov	r3, #32
   21b08:	strb	r3, [r1, #10]
   21b0c:	mov	r3, #0
   21b10:	strb	r3, [r1, #11]
   21b14:	bx	lr
   21b18:	and	r3, r0, #64	; 0x40
   21b1c:	cmp	r3, #0
   21b20:	movne	r3, #120	; 0x78
   21b24:	moveq	r3, #45	; 0x2d
   21b28:	b	21a78 <__assert_fail@plt+0xf4b4>
   21b2c:	and	r3, r0, #8
   21b30:	cmp	r3, #0
   21b34:	movne	r3, #120	; 0x78
   21b38:	moveq	r3, #45	; 0x2d
   21b3c:	b	21abc <__assert_fail@plt+0xf4f8>
   21b40:	and	r0, r0, #1
   21b44:	cmp	r0, #0
   21b48:	movne	r0, #120	; 0x78
   21b4c:	moveq	r0, #45	; 0x2d
   21b50:	b	21b00 <__assert_fail@plt+0xf53c>
   21b54:	push	{r4, lr}
   21b58:	ldr	r0, [r0, #16]
   21b5c:	bl	219dc <__assert_fail@plt+0xf418>
   21b60:	pop	{r4, pc}
   21b64:	push	{r4, r5, r6, lr}
   21b68:	mov	r5, r1
   21b6c:	bl	124d4 <fopen64@plt>
   21b70:	subs	r4, r0, #0
   21b74:	beq	21b88 <__assert_fail@plt+0xf5c4>
   21b78:	mov	r0, r4
   21b7c:	bl	12390 <fileno@plt>
   21b80:	cmp	r0, #2
   21b84:	bls	21b90 <__assert_fail@plt+0xf5cc>
   21b88:	mov	r0, r4
   21b8c:	pop	{r4, r5, r6, pc}
   21b90:	bl	2c6bc <__assert_fail@plt+0x1a0f8>
   21b94:	subs	r6, r0, #0
   21b98:	blt	21be0 <__assert_fail@plt+0xf61c>
   21b9c:	mov	r0, r4
   21ba0:	bl	123cc <fclose@plt>
   21ba4:	cmp	r0, #0
   21ba8:	bne	21bc0 <__assert_fail@plt+0xf5fc>
   21bac:	mov	r1, r5
   21bb0:	mov	r0, r6
   21bb4:	bl	11e8c <fdopen@plt>
   21bb8:	subs	r4, r0, #0
   21bbc:	bne	21b88 <__assert_fail@plt+0xf5c4>
   21bc0:	bl	12318 <__errno_location@plt>
   21bc4:	mov	r4, r0
   21bc8:	ldr	r5, [r0]
   21bcc:	mov	r0, r6
   21bd0:	bl	1257c <close@plt>
   21bd4:	str	r5, [r4]
   21bd8:	mov	r4, #0
   21bdc:	b	21b88 <__assert_fail@plt+0xf5c4>
   21be0:	bl	12318 <__errno_location@plt>
   21be4:	mov	r5, r0
   21be8:	ldr	r6, [r0]
   21bec:	mov	r0, r4
   21bf0:	bl	123cc <fclose@plt>
   21bf4:	str	r6, [r5]
   21bf8:	mov	r4, #0
   21bfc:	b	21b88 <__assert_fail@plt+0xf5c4>
   21c00:	push	{r4, lr}
   21c04:	ror	r0, r0, #3
   21c08:	bl	41c54 <__assert_fail@plt+0x2f690>
   21c0c:	mov	r0, r1
   21c10:	pop	{r4, pc}
   21c14:	cmp	r1, r0
   21c18:	movne	r0, #0
   21c1c:	moveq	r0, #1
   21c20:	bx	lr
   21c24:	ldr	r3, [r0, #20]
   21c28:	ldr	r2, [pc, #176]	; 21ce0 <__assert_fail@plt+0xf71c>
   21c2c:	cmp	r3, r2
   21c30:	beq	21cc8 <__assert_fail@plt+0xf704>
   21c34:	vldr	s15, [r3, #8]
   21c38:	vldr	s14, [pc, #144]	; 21cd0 <__assert_fail@plt+0xf70c>
   21c3c:	vcmpe.f32	s15, s14
   21c40:	vmrs	APSR_nzcv, fpscr
   21c44:	ble	21ca4 <__assert_fail@plt+0xf6e0>
   21c48:	vldr	s14, [pc, #132]	; 21cd4 <__assert_fail@plt+0xf710>
   21c4c:	vcmpe.f32	s15, s14
   21c50:	vmrs	APSR_nzcv, fpscr
   21c54:	bpl	21ca4 <__assert_fail@plt+0xf6e0>
   21c58:	vldr	s13, [r3, #12]
   21c5c:	vldr	s14, [pc, #116]	; 21cd8 <__assert_fail@plt+0xf714>
   21c60:	vcmpe.f32	s13, s14
   21c64:	vmrs	APSR_nzcv, fpscr
   21c68:	ble	21ca4 <__assert_fail@plt+0xf6e0>
   21c6c:	vldr	s14, [r3]
   21c70:	vcmpe.f32	s14, #0.0
   21c74:	vmrs	APSR_nzcv, fpscr
   21c78:	blt	21ca4 <__assert_fail@plt+0xf6e0>
   21c7c:	vldr	s13, [pc, #76]	; 21cd0 <__assert_fail@plt+0xf70c>
   21c80:	vadd.f32	s14, s14, s13
   21c84:	vldr	s13, [r3, #4]
   21c88:	vcmpe.f32	s14, s13
   21c8c:	vmrs	APSR_nzcv, fpscr
   21c90:	bpl	21ca4 <__assert_fail@plt+0xf6e0>
   21c94:	vldr	s12, [pc, #64]	; 21cdc <__assert_fail@plt+0xf718>
   21c98:	vcmpe.f32	s13, s12
   21c9c:	vmrs	APSR_nzcv, fpscr
   21ca0:	bls	21cb4 <__assert_fail@plt+0xf6f0>
   21ca4:	ldr	r3, [pc, #52]	; 21ce0 <__assert_fail@plt+0xf71c>
   21ca8:	str	r3, [r0, #20]
   21cac:	mov	r0, #0
   21cb0:	bx	lr
   21cb4:	vcmpe.f32	s15, s14
   21cb8:	vmrs	APSR_nzcv, fpscr
   21cbc:	ble	21ca4 <__assert_fail@plt+0xf6e0>
   21cc0:	mov	r0, #1
   21cc4:	bx	lr
   21cc8:	mov	r0, #1
   21ccc:	bx	lr
   21cd0:	stclcc	12, cr12, [ip, #820]	; 0x334
   21cd4:	svccc	0x00666666
   21cd8:	svccc	0x008ccccd
   21cdc:	svccc	0x00800000
   21ce0:	andeq	r6, r4, r8, lsl #24
   21ce4:	push	{r4, lr}
   21ce8:	mov	r4, r0
   21cec:	mov	r0, r1
   21cf0:	ldr	r3, [r4, #24]
   21cf4:	ldr	r1, [r4, #8]
   21cf8:	blx	r3
   21cfc:	ldr	r3, [r4, #8]
   21d00:	cmp	r0, r3
   21d04:	bcs	21d14 <__assert_fail@plt+0xf750>
   21d08:	ldr	r3, [r4]
   21d0c:	add	r0, r3, r0, lsl #3
   21d10:	pop	{r4, pc}
   21d14:	bl	12570 <abort@plt>
   21d18:	push	{r4, r5, r6, r7, r8, lr}
   21d1c:	ldrb	r3, [r1, #16]
   21d20:	cmp	r3, #0
   21d24:	bne	21d54 <__assert_fail@plt+0xf790>
   21d28:	vmov	s15, r0
   21d2c:	vcvt.f32.u32	s13, s15
   21d30:	vldr	s14, [r1, #8]
   21d34:	vdiv.f32	s15, s13, s14
   21d38:	vldr	s14, [pc, #204]	; 21e0c <__assert_fail@plt+0xf848>
   21d3c:	vcmpe.f32	s15, s14
   21d40:	vmrs	APSR_nzcv, fpscr
   21d44:	movge	r7, #0
   21d48:	bge	21d8c <__assert_fail@plt+0xf7c8>
   21d4c:	vcvt.u32.f32	s15, s15
   21d50:	vmov	r0, s15
   21d54:	cmp	r0, #10
   21d58:	movcc	r0, #10
   21d5c:	orr	r7, r0, #1
   21d60:	cmn	r7, #1
   21d64:	ldrne	r8, [pc, #164]	; 21e10 <__assert_fail@plt+0xf84c>
   21d68:	bne	21db8 <__assert_fail@plt+0xf7f4>
   21d6c:	lsr	r3, r7, #30
   21d70:	lsl	r2, r7, #2
   21d74:	adds	r3, r3, #0
   21d78:	movne	r3, #1
   21d7c:	cmp	r2, #0
   21d80:	movlt	r3, #1
   21d84:	cmp	r3, #0
   21d88:	movne	r7, #0
   21d8c:	mov	r0, r7
   21d90:	pop	{r4, r5, r6, r7, r8, pc}
   21d94:	mov	r4, #3
   21d98:	mov	r1, r4
   21d9c:	mov	r0, r7
   21da0:	bl	41c54 <__assert_fail@plt+0x2f690>
   21da4:	cmp	r1, #0
   21da8:	bne	21d6c <__assert_fail@plt+0xf7a8>
   21dac:	add	r7, r7, #2
   21db0:	cmn	r7, #1
   21db4:	beq	21d6c <__assert_fail@plt+0xf7a8>
   21db8:	cmp	r7, #9
   21dbc:	bls	21d94 <__assert_fail@plt+0xf7d0>
   21dc0:	umull	r2, r3, r8, r7
   21dc4:	lsr	r3, r3, #1
   21dc8:	add	r3, r3, r3, lsl #1
   21dcc:	cmp	r7, r3
   21dd0:	beq	21dac <__assert_fail@plt+0xf7e8>
   21dd4:	mov	r6, #16
   21dd8:	mov	r5, #9
   21ddc:	mov	r4, #3
   21de0:	add	r5, r5, r6
   21de4:	add	r4, r4, #2
   21de8:	cmp	r5, r7
   21dec:	bcs	21d98 <__assert_fail@plt+0xf7d4>
   21df0:	add	r6, r6, #8
   21df4:	mov	r1, r4
   21df8:	mov	r0, r7
   21dfc:	bl	41c54 <__assert_fail@plt+0x2f690>
   21e00:	cmp	r1, #0
   21e04:	bne	21de0 <__assert_fail@plt+0xf81c>
   21e08:	b	21dac <__assert_fail@plt+0xf7e8>
   21e0c:	svcmi	0x00800000
   21e10:	bge	feacc8c4 <stdout@@GLIBC_2.4+0xfea73370>
   21e14:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e18:	ldr	r7, [r1]
   21e1c:	ldr	r3, [r1, #4]
   21e20:	cmp	r7, r3
   21e24:	bcs	21f58 <__assert_fail@plt+0xf994>
   21e28:	mov	fp, r2
   21e2c:	mov	sl, r1
   21e30:	mov	r6, r0
   21e34:	add	r7, r7, #8
   21e38:	mov	r9, #0
   21e3c:	b	21ea4 <__assert_fail@plt+0xf8e0>
   21e40:	str	r5, [r0]
   21e44:	ldr	r2, [r6, #12]
   21e48:	add	r2, r2, #1
   21e4c:	str	r2, [r6, #12]
   21e50:	str	r9, [r4]
   21e54:	ldr	r2, [r6, #36]	; 0x24
   21e58:	str	r2, [r4, #4]
   21e5c:	str	r4, [r6, #36]	; 0x24
   21e60:	b	21eec <__assert_fail@plt+0xf928>
   21e64:	mov	r0, #8
   21e68:	bl	3079c <__assert_fail@plt+0x1e1d8>
   21e6c:	cmp	r0, #0
   21e70:	beq	21f60 <__assert_fail@plt+0xf99c>
   21e74:	str	r4, [r0]
   21e78:	ldr	r3, [r5, #4]
   21e7c:	str	r3, [r0, #4]
   21e80:	str	r0, [r5, #4]
   21e84:	str	r9, [r8, #-8]
   21e88:	ldr	r3, [sl, #12]
   21e8c:	sub	r3, r3, #1
   21e90:	str	r3, [sl, #12]
   21e94:	add	r7, r7, #8
   21e98:	ldr	r3, [sl, #4]
   21e9c:	cmp	r3, r8
   21ea0:	bls	21f50 <__assert_fail@plt+0xf98c>
   21ea4:	mov	r8, r7
   21ea8:	ldr	r3, [r7, #-8]
   21eac:	cmp	r3, #0
   21eb0:	beq	21e94 <__assert_fail@plt+0xf8d0>
   21eb4:	ldr	r4, [r7, #-4]
   21eb8:	cmp	r4, #0
   21ebc:	beq	21ef8 <__assert_fail@plt+0xf934>
   21ec0:	ldr	r5, [r4]
   21ec4:	mov	r1, r5
   21ec8:	mov	r0, r6
   21ecc:	bl	21ce4 <__assert_fail@plt+0xf720>
   21ed0:	ldr	r3, [r4, #4]
   21ed4:	ldr	r2, [r0]
   21ed8:	cmp	r2, #0
   21edc:	beq	21e40 <__assert_fail@plt+0xf87c>
   21ee0:	ldr	r2, [r0, #4]
   21ee4:	str	r2, [r4, #4]
   21ee8:	str	r4, [r0, #4]
   21eec:	mov	r4, r3
   21ef0:	cmp	r3, #0
   21ef4:	bne	21ec0 <__assert_fail@plt+0xf8fc>
   21ef8:	ldr	r4, [r8, #-8]
   21efc:	str	r9, [r8, #-4]
   21f00:	cmp	fp, #0
   21f04:	bne	21e94 <__assert_fail@plt+0xf8d0>
   21f08:	mov	r1, r4
   21f0c:	mov	r0, r6
   21f10:	bl	21ce4 <__assert_fail@plt+0xf720>
   21f14:	mov	r5, r0
   21f18:	ldr	r3, [r0]
   21f1c:	cmp	r3, #0
   21f20:	beq	21f3c <__assert_fail@plt+0xf978>
   21f24:	ldr	r0, [r6, #36]	; 0x24
   21f28:	cmp	r0, #0
   21f2c:	beq	21e64 <__assert_fail@plt+0xf8a0>
   21f30:	ldr	r3, [r0, #4]
   21f34:	str	r3, [r6, #36]	; 0x24
   21f38:	b	21e74 <__assert_fail@plt+0xf8b0>
   21f3c:	str	r4, [r0]
   21f40:	ldr	r3, [r6, #12]
   21f44:	add	r3, r3, #1
   21f48:	str	r3, [r6, #12]
   21f4c:	b	21e84 <__assert_fail@plt+0xf8c0>
   21f50:	mov	r0, #1
   21f54:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f58:	mov	r0, #1
   21f5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f60:	mov	r0, fp
   21f64:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f68:	push	{r4, r5, r6, r7, r8, lr}
   21f6c:	mov	r6, r0
   21f70:	mov	r5, r1
   21f74:	mov	r8, r2
   21f78:	mov	r7, r3
   21f7c:	bl	21ce4 <__assert_fail@plt+0xf720>
   21f80:	str	r0, [r8]
   21f84:	ldr	r3, [r0]
   21f88:	cmp	r3, #0
   21f8c:	beq	22064 <__assert_fail@plt+0xfaa0>
   21f90:	mov	r4, r0
   21f94:	cmp	r5, r3
   21f98:	beq	2202c <__assert_fail@plt+0xfa68>
   21f9c:	ldr	r2, [r6, #28]
   21fa0:	mov	r1, r3
   21fa4:	mov	r0, r5
   21fa8:	blx	r2
   21fac:	cmp	r0, #0
   21fb0:	bne	2202c <__assert_fail@plt+0xfa68>
   21fb4:	ldr	r3, [r4, #4]
   21fb8:	cmp	r3, #0
   21fbc:	beq	2206c <__assert_fail@plt+0xfaa8>
   21fc0:	ldr	r1, [r3]
   21fc4:	cmp	r5, r1
   21fc8:	beq	21ffc <__assert_fail@plt+0xfa38>
   21fcc:	ldr	r3, [r6, #28]
   21fd0:	mov	r0, r5
   21fd4:	blx	r3
   21fd8:	cmp	r0, #0
   21fdc:	bne	21ffc <__assert_fail@plt+0xfa38>
   21fe0:	ldr	r4, [r4, #4]
   21fe4:	ldr	r3, [r4, #4]
   21fe8:	cmp	r3, #0
   21fec:	beq	22064 <__assert_fail@plt+0xfaa0>
   21ff0:	ldr	r1, [r3]
   21ff4:	cmp	r5, r1
   21ff8:	bne	21fcc <__assert_fail@plt+0xfa08>
   21ffc:	ldr	r2, [r4, #4]
   22000:	ldr	r3, [r2]
   22004:	cmp	r7, #0
   22008:	beq	22064 <__assert_fail@plt+0xfaa0>
   2200c:	ldr	r1, [r2, #4]
   22010:	str	r1, [r4, #4]
   22014:	mov	r1, #0
   22018:	str	r1, [r2]
   2201c:	ldr	r1, [r6, #36]	; 0x24
   22020:	str	r1, [r2, #4]
   22024:	str	r2, [r6, #36]	; 0x24
   22028:	b	22064 <__assert_fail@plt+0xfaa0>
   2202c:	ldr	r3, [r4]
   22030:	cmp	r7, #0
   22034:	beq	22064 <__assert_fail@plt+0xfaa0>
   22038:	ldr	r2, [r4, #4]
   2203c:	cmp	r2, #0
   22040:	ldmne	r2, {r0, r1}
   22044:	stmne	r4, {r0, r1}
   22048:	movne	r1, #0
   2204c:	strne	r1, [r2]
   22050:	ldrne	r1, [r6, #36]	; 0x24
   22054:	strne	r1, [r2, #4]
   22058:	strne	r2, [r6, #36]	; 0x24
   2205c:	moveq	r2, #0
   22060:	streq	r2, [r4]
   22064:	mov	r0, r3
   22068:	pop	{r4, r5, r6, r7, r8, pc}
   2206c:	mov	r3, #0
   22070:	b	22064 <__assert_fail@plt+0xfaa0>
   22074:	ldr	r0, [r0, #8]
   22078:	bx	lr
   2207c:	ldr	r0, [r0, #12]
   22080:	bx	lr
   22084:	ldr	r0, [r0, #16]
   22088:	bx	lr
   2208c:	ldr	r1, [r0]
   22090:	ldr	ip, [r0, #4]
   22094:	cmp	r1, ip
   22098:	bcs	220f0 <__assert_fail@plt+0xfb2c>
   2209c:	mov	r0, #0
   220a0:	b	220bc <__assert_fail@plt+0xfaf8>
   220a4:	mov	r2, #1
   220a8:	cmp	r0, r2
   220ac:	movcc	r0, r2
   220b0:	add	r1, r1, #8
   220b4:	cmp	r1, ip
   220b8:	bcs	220ec <__assert_fail@plt+0xfb28>
   220bc:	ldr	r3, [r1]
   220c0:	cmp	r3, #0
   220c4:	beq	220b0 <__assert_fail@plt+0xfaec>
   220c8:	ldr	r3, [r1, #4]
   220cc:	cmp	r3, #0
   220d0:	beq	220a4 <__assert_fail@plt+0xfae0>
   220d4:	mov	r2, #1
   220d8:	add	r2, r2, #1
   220dc:	ldr	r3, [r3, #4]
   220e0:	cmp	r3, #0
   220e4:	bne	220d8 <__assert_fail@plt+0xfb14>
   220e8:	b	220a8 <__assert_fail@plt+0xfae4>
   220ec:	bx	lr
   220f0:	mov	r0, #0
   220f4:	bx	lr
   220f8:	push	{lr}		; (str lr, [sp, #-4]!)
   220fc:	ldr	r1, [r0]
   22100:	ldr	lr, [r0, #4]
   22104:	cmp	r1, lr
   22108:	bcs	22158 <__assert_fail@plt+0xfb94>
   2210c:	mov	r2, #0
   22110:	mov	ip, r2
   22114:	b	22124 <__assert_fail@plt+0xfb60>
   22118:	add	r1, r1, #8
   2211c:	cmp	r1, lr
   22120:	bcs	22160 <__assert_fail@plt+0xfb9c>
   22124:	ldr	r3, [r1]
   22128:	cmp	r3, #0
   2212c:	beq	22118 <__assert_fail@plt+0xfb54>
   22130:	add	ip, ip, #1
   22134:	add	r2, r2, #1
   22138:	ldr	r3, [r1, #4]
   2213c:	cmp	r3, #0
   22140:	beq	22118 <__assert_fail@plt+0xfb54>
   22144:	add	r2, r2, #1
   22148:	ldr	r3, [r3, #4]
   2214c:	cmp	r3, #0
   22150:	bne	22144 <__assert_fail@plt+0xfb80>
   22154:	b	22118 <__assert_fail@plt+0xfb54>
   22158:	mov	r2, #0
   2215c:	mov	ip, r2
   22160:	ldr	r3, [r0, #12]
   22164:	cmp	r3, ip
   22168:	beq	22174 <__assert_fail@plt+0xfbb0>
   2216c:	mov	r0, #0
   22170:	pop	{pc}		; (ldr pc, [sp], #4)
   22174:	ldr	r0, [r0, #16]
   22178:	cmp	r0, r2
   2217c:	movne	r0, #0
   22180:	moveq	r0, #1
   22184:	pop	{pc}		; (ldr pc, [sp], #4)
   22188:	push	{r4, r5, r6, r7, r8, lr}
   2218c:	sub	sp, sp, #8
   22190:	mov	r6, r0
   22194:	mov	r4, r1
   22198:	ldr	r5, [r0, #8]
   2219c:	ldr	r7, [r0, #12]
   221a0:	bl	2208c <__assert_fail@plt+0xfac8>
   221a4:	mov	r8, r0
   221a8:	ldr	r2, [r6, #16]
   221ac:	ldr	r1, [pc, #100]	; 22218 <__assert_fail@plt+0xfc54>
   221b0:	mov	r0, r4
   221b4:	bl	1230c <fprintf@plt>
   221b8:	mov	r2, r5
   221bc:	ldr	r1, [pc, #88]	; 2221c <__assert_fail@plt+0xfc58>
   221c0:	mov	r0, r4
   221c4:	bl	1230c <fprintf@plt>
   221c8:	vmov	s15, r7
   221cc:	vcvt.f64.u32	d6, s15
   221d0:	vldr	d7, [pc, #56]	; 22210 <__assert_fail@plt+0xfc4c>
   221d4:	vmul.f64	d6, d6, d7
   221d8:	vmov	s15, r5
   221dc:	vcvt.f64.u32	d7, s15
   221e0:	vdiv.f64	d5, d6, d7
   221e4:	vstr	d5, [sp]
   221e8:	mov	r2, r7
   221ec:	ldr	r1, [pc, #44]	; 22220 <__assert_fail@plt+0xfc5c>
   221f0:	mov	r0, r4
   221f4:	bl	1230c <fprintf@plt>
   221f8:	mov	r2, r8
   221fc:	ldr	r1, [pc, #32]	; 22224 <__assert_fail@plt+0xfc60>
   22200:	mov	r0, r4
   22204:	bl	1230c <fprintf@plt>
   22208:	add	sp, sp, #8
   2220c:	pop	{r4, r5, r6, r7, r8, pc}
   22210:	andeq	r0, r0, r0
   22214:	subsmi	r0, r9, r0
   22218:	andeq	r6, r4, ip, lsl ip
   2221c:	andeq	r6, r4, r4, lsr ip
   22220:	andeq	r6, r4, ip, asr #24
   22224:	andeq	r6, r4, r0, ror ip
   22228:	push	{r4, r5, r6, lr}
   2222c:	mov	r6, r0
   22230:	mov	r5, r1
   22234:	bl	21ce4 <__assert_fail@plt+0xf720>
   22238:	ldr	r1, [r0]
   2223c:	cmp	r1, #0
   22240:	beq	22294 <__assert_fail@plt+0xfcd0>
   22244:	mov	r4, r0
   22248:	cmp	r0, #0
   2224c:	beq	2229c <__assert_fail@plt+0xfcd8>
   22250:	cmp	r5, r1
   22254:	beq	22284 <__assert_fail@plt+0xfcc0>
   22258:	ldr	r3, [r6, #28]
   2225c:	mov	r0, r5
   22260:	blx	r3
   22264:	cmp	r0, #0
   22268:	bne	22284 <__assert_fail@plt+0xfcc0>
   2226c:	ldr	r4, [r4, #4]
   22270:	cmp	r4, #0
   22274:	beq	2228c <__assert_fail@plt+0xfcc8>
   22278:	ldr	r1, [r4]
   2227c:	cmp	r5, r1
   22280:	bne	22258 <__assert_fail@plt+0xfc94>
   22284:	ldr	r0, [r4]
   22288:	pop	{r4, r5, r6, pc}
   2228c:	mov	r0, #0
   22290:	pop	{r4, r5, r6, pc}
   22294:	mov	r0, #0
   22298:	pop	{r4, r5, r6, pc}
   2229c:	mov	r0, #0
   222a0:	pop	{r4, r5, r6, pc}
   222a4:	ldr	r3, [r0, #16]
   222a8:	cmp	r3, #0
   222ac:	beq	222f0 <__assert_fail@plt+0xfd2c>
   222b0:	ldr	r3, [r0]
   222b4:	ldr	r2, [r0, #4]
   222b8:	cmp	r3, r2
   222bc:	bcs	222e8 <__assert_fail@plt+0xfd24>
   222c0:	ldr	r0, [r3]
   222c4:	cmp	r0, #0
   222c8:	bne	222e4 <__assert_fail@plt+0xfd20>
   222cc:	add	r3, r3, #8
   222d0:	cmp	r3, r2
   222d4:	bcs	222e8 <__assert_fail@plt+0xfd24>
   222d8:	ldr	r0, [r3]
   222dc:	cmp	r0, #0
   222e0:	beq	222cc <__assert_fail@plt+0xfd08>
   222e4:	bx	lr
   222e8:	push	{r4, lr}
   222ec:	bl	12570 <abort@plt>
   222f0:	mov	r0, #0
   222f4:	b	222e4 <__assert_fail@plt+0xfd20>
   222f8:	push	{r4, r5, r6, lr}
   222fc:	mov	r5, r0
   22300:	mov	r4, r1
   22304:	bl	21ce4 <__assert_fail@plt+0xf720>
   22308:	mov	r2, r0
   2230c:	mov	r3, r0
   22310:	ldr	r1, [r3]
   22314:	cmp	r4, r1
   22318:	beq	2232c <__assert_fail@plt+0xfd68>
   2231c:	ldr	r3, [r3, #4]
   22320:	cmp	r3, #0
   22324:	bne	22310 <__assert_fail@plt+0xfd4c>
   22328:	b	22338 <__assert_fail@plt+0xfd74>
   2232c:	ldr	r3, [r3, #4]
   22330:	cmp	r3, #0
   22334:	bne	22358 <__assert_fail@plt+0xfd94>
   22338:	ldr	r3, [r5, #4]
   2233c:	add	r2, r2, #8
   22340:	cmp	r2, r3
   22344:	bcs	22360 <__assert_fail@plt+0xfd9c>
   22348:	ldr	r0, [r2]
   2234c:	cmp	r0, #0
   22350:	beq	2233c <__assert_fail@plt+0xfd78>
   22354:	pop	{r4, r5, r6, pc}
   22358:	ldr	r0, [r3]
   2235c:	pop	{r4, r5, r6, pc}
   22360:	mov	r0, #0
   22364:	pop	{r4, r5, r6, pc}
   22368:	push	{r4, r5, lr}
   2236c:	ldr	r4, [r0]
   22370:	ldr	r3, [r0, #4]
   22374:	cmp	r4, r3
   22378:	bcs	223e4 <__assert_fail@plt+0xfe20>
   2237c:	mov	r5, r0
   22380:	mov	r0, #0
   22384:	b	22398 <__assert_fail@plt+0xfdd4>
   22388:	add	r4, r4, #8
   2238c:	ldr	r3, [r5, #4]
   22390:	cmp	r3, r4
   22394:	bls	223e0 <__assert_fail@plt+0xfe1c>
   22398:	ldr	r3, [r4]
   2239c:	cmp	r3, #0
   223a0:	beq	22388 <__assert_fail@plt+0xfdc4>
   223a4:	cmp	r4, #0
   223a8:	beq	22388 <__assert_fail@plt+0xfdc4>
   223ac:	cmp	r2, r0
   223b0:	popls	{r4, r5, pc}
   223b4:	add	ip, r1, r0, lsl #2
   223b8:	mov	r3, r4
   223bc:	add	r0, r0, #1
   223c0:	ldr	lr, [r3]
   223c4:	str	lr, [ip], #4
   223c8:	ldr	r3, [r3, #4]
   223cc:	cmp	r3, #0
   223d0:	beq	22388 <__assert_fail@plt+0xfdc4>
   223d4:	cmp	r2, r0
   223d8:	bne	223bc <__assert_fail@plt+0xfdf8>
   223dc:	pop	{r4, r5, pc}
   223e0:	pop	{r4, r5, pc}
   223e4:	mov	r0, #0
   223e8:	pop	{r4, r5, pc}
   223ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   223f0:	ldr	r8, [r0]
   223f4:	ldr	r3, [r0, #4]
   223f8:	cmp	r8, r3
   223fc:	bcs	22464 <__assert_fail@plt+0xfea0>
   22400:	mov	r7, r2
   22404:	mov	r6, r1
   22408:	mov	r9, r0
   2240c:	mov	r5, #0
   22410:	b	22424 <__assert_fail@plt+0xfe60>
   22414:	add	r8, r8, #8
   22418:	ldr	r3, [r9, #4]
   2241c:	cmp	r3, r8
   22420:	bls	22468 <__assert_fail@plt+0xfea4>
   22424:	ldr	r3, [r8]
   22428:	cmp	r3, #0
   2242c:	beq	22414 <__assert_fail@plt+0xfe50>
   22430:	cmp	r8, #0
   22434:	beq	22414 <__assert_fail@plt+0xfe50>
   22438:	mov	r4, r8
   2243c:	mov	r1, r7
   22440:	ldr	r0, [r4]
   22444:	blx	r6
   22448:	cmp	r0, #0
   2244c:	beq	22468 <__assert_fail@plt+0xfea4>
   22450:	add	r5, r5, #1
   22454:	ldr	r4, [r4, #4]
   22458:	cmp	r4, #0
   2245c:	bne	2243c <__assert_fail@plt+0xfe78>
   22460:	b	22414 <__assert_fail@plt+0xfe50>
   22464:	mov	r5, #0
   22468:	mov	r0, r5
   2246c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22470:	ldrb	r3, [r0]
   22474:	cmp	r3, #0
   22478:	beq	224b0 <__assert_fail@plt+0xfeec>
   2247c:	push	{r4, r5, r6, lr}
   22480:	mov	r4, r0
   22484:	mov	r5, r1
   22488:	mov	r1, #0
   2248c:	rsb	r0, r1, r1, lsl #5
   22490:	mov	r1, r5
   22494:	add	r0, r0, r3
   22498:	bl	41c54 <__assert_fail@plt+0x2f690>
   2249c:	ldrb	r3, [r4, #1]!
   224a0:	cmp	r3, #0
   224a4:	bne	2248c <__assert_fail@plt+0xfec8>
   224a8:	mov	r0, r1
   224ac:	pop	{r4, r5, r6, pc}
   224b0:	mov	r1, #0
   224b4:	mov	r0, r1
   224b8:	bx	lr
   224bc:	push	{lr}		; (str lr, [sp, #-4]!)
   224c0:	mov	ip, r0
   224c4:	ldr	lr, [pc, #16]	; 224dc <__assert_fail@plt+0xff18>
   224c8:	ldm	lr!, {r0, r1, r2, r3}
   224cc:	stmia	ip!, {r0, r1, r2, r3}
   224d0:	ldr	r3, [lr]
   224d4:	str	r3, [ip]
   224d8:	pop	{pc}		; (ldr pc, [sp], #4)
   224dc:	andeq	r6, r4, r8, lsl #24
   224e0:	push	{r4, r5, r6, r7, r8, lr}
   224e4:	mov	r8, r0
   224e8:	mov	r5, r1
   224ec:	subs	r7, r2, #0
   224f0:	ldr	r2, [pc, #180]	; 225ac <__assert_fail@plt+0xffe8>
   224f4:	cmp	r7, #0
   224f8:	moveq	r7, r2
   224fc:	subs	r6, r3, #0
   22500:	ldr	r3, [pc, #168]	; 225b0 <__assert_fail@plt+0xffec>
   22504:	cmp	r6, #0
   22508:	moveq	r6, r3
   2250c:	mov	r0, #40	; 0x28
   22510:	bl	3079c <__assert_fail@plt+0x1e1d8>
   22514:	subs	r4, r0, #0
   22518:	beq	22594 <__assert_fail@plt+0xffd0>
   2251c:	ldr	r3, [pc, #144]	; 225b4 <__assert_fail@plt+0xfff0>
   22520:	cmp	r5, #0
   22524:	moveq	r5, r3
   22528:	str	r5, [r4, #20]
   2252c:	mov	r0, r4
   22530:	bl	21c24 <__assert_fail@plt+0xf660>
   22534:	cmp	r0, #0
   22538:	beq	2259c <__assert_fail@plt+0xffd8>
   2253c:	mov	r1, r5
   22540:	mov	r0, r8
   22544:	bl	21d18 <__assert_fail@plt+0xf754>
   22548:	str	r0, [r4, #8]
   2254c:	cmp	r0, #0
   22550:	beq	2259c <__assert_fail@plt+0xffd8>
   22554:	mov	r1, #8
   22558:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   2255c:	str	r0, [r4]
   22560:	cmp	r0, #0
   22564:	beq	2259c <__assert_fail@plt+0xffd8>
   22568:	ldr	r3, [r4, #8]
   2256c:	add	r0, r0, r3, lsl #3
   22570:	str	r0, [r4, #4]
   22574:	mov	r3, #0
   22578:	str	r3, [r4, #12]
   2257c:	str	r3, [r4, #16]
   22580:	str	r7, [r4, #24]
   22584:	str	r6, [r4, #28]
   22588:	ldr	r2, [sp, #24]
   2258c:	str	r2, [r4, #32]
   22590:	str	r3, [r4, #36]	; 0x24
   22594:	mov	r0, r4
   22598:	pop	{r4, r5, r6, r7, r8, pc}
   2259c:	mov	r0, r4
   225a0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   225a4:	mov	r4, #0
   225a8:	b	22594 <__assert_fail@plt+0xffd0>
   225ac:	andeq	r1, r2, r0, lsl #24
   225b0:	andeq	r1, r2, r4, lsl ip
   225b4:	andeq	r6, r4, r8, lsl #24
   225b8:	push	{r4, r5, r6, r7, r8, lr}
   225bc:	mov	r5, r0
   225c0:	ldr	r7, [r0]
   225c4:	ldr	r3, [r0, #4]
   225c8:	cmp	r7, r3
   225cc:	bcs	22660 <__assert_fail@plt+0x1009c>
   225d0:	add	r7, r7, #8
   225d4:	mov	r6, #0
   225d8:	b	22640 <__assert_fail@plt+0x1007c>
   225dc:	str	r6, [r4]
   225e0:	ldr	r3, [r4, #4]
   225e4:	ldr	r2, [r5, #36]	; 0x24
   225e8:	str	r2, [r4, #4]
   225ec:	str	r4, [r5, #36]	; 0x24
   225f0:	mov	r4, r3
   225f4:	cmp	r3, #0
   225f8:	beq	22614 <__assert_fail@plt+0x10050>
   225fc:	ldr	r3, [r5, #32]
   22600:	cmp	r3, #0
   22604:	beq	225dc <__assert_fail@plt+0x10018>
   22608:	ldr	r0, [r4]
   2260c:	blx	r3
   22610:	b	225dc <__assert_fail@plt+0x10018>
   22614:	ldr	r3, [r5, #32]
   22618:	cmp	r3, #0
   2261c:	beq	22628 <__assert_fail@plt+0x10064>
   22620:	ldr	r0, [r8, #-8]
   22624:	blx	r3
   22628:	str	r6, [r8, #-8]
   2262c:	str	r6, [r8, #-4]
   22630:	add	r7, r7, #8
   22634:	ldr	r3, [r5, #4]
   22638:	cmp	r3, r8
   2263c:	bls	22660 <__assert_fail@plt+0x1009c>
   22640:	mov	r8, r7
   22644:	ldr	r3, [r7, #-8]
   22648:	cmp	r3, #0
   2264c:	beq	22630 <__assert_fail@plt+0x1006c>
   22650:	ldr	r4, [r7, #-4]
   22654:	cmp	r4, #0
   22658:	bne	225fc <__assert_fail@plt+0x10038>
   2265c:	b	22614 <__assert_fail@plt+0x10050>
   22660:	mov	r3, #0
   22664:	str	r3, [r5, #12]
   22668:	str	r3, [r5, #16]
   2266c:	pop	{r4, r5, r6, r7, r8, pc}
   22670:	push	{r4, r5, r6, lr}
   22674:	mov	r5, r0
   22678:	ldr	r3, [r0, #32]
   2267c:	cmp	r3, #0
   22680:	beq	226e8 <__assert_fail@plt+0x10124>
   22684:	ldr	r3, [r0, #16]
   22688:	cmp	r3, #0
   2268c:	beq	226e8 <__assert_fail@plt+0x10124>
   22690:	ldr	r6, [r0]
   22694:	ldr	r3, [r0, #4]
   22698:	cmp	r6, r3
   2269c:	bcc	226b4 <__assert_fail@plt+0x100f0>
   226a0:	b	22728 <__assert_fail@plt+0x10164>
   226a4:	add	r6, r6, #8
   226a8:	ldr	r3, [r5, #4]
   226ac:	cmp	r3, r6
   226b0:	bls	226e8 <__assert_fail@plt+0x10124>
   226b4:	ldr	r3, [r6]
   226b8:	cmp	r3, #0
   226bc:	beq	226a4 <__assert_fail@plt+0x100e0>
   226c0:	cmp	r6, #0
   226c4:	beq	226a4 <__assert_fail@plt+0x100e0>
   226c8:	mov	r4, r6
   226cc:	ldr	r3, [r5, #32]
   226d0:	ldr	r0, [r4]
   226d4:	blx	r3
   226d8:	ldr	r4, [r4, #4]
   226dc:	cmp	r4, #0
   226e0:	bne	226cc <__assert_fail@plt+0x10108>
   226e4:	b	226a4 <__assert_fail@plt+0x100e0>
   226e8:	ldr	r6, [r5]
   226ec:	ldr	r3, [r5, #4]
   226f0:	cmp	r6, r3
   226f4:	bcs	22728 <__assert_fail@plt+0x10164>
   226f8:	ldr	r0, [r6, #4]
   226fc:	cmp	r0, #0
   22700:	beq	22718 <__assert_fail@plt+0x10154>
   22704:	ldr	r4, [r0, #4]
   22708:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2270c:	mov	r0, r4
   22710:	cmp	r4, #0
   22714:	bne	22704 <__assert_fail@plt+0x10140>
   22718:	add	r6, r6, #8
   2271c:	ldr	r3, [r5, #4]
   22720:	cmp	r3, r6
   22724:	bhi	226f8 <__assert_fail@plt+0x10134>
   22728:	ldr	r0, [r5, #36]	; 0x24
   2272c:	cmp	r0, #0
   22730:	beq	22748 <__assert_fail@plt+0x10184>
   22734:	ldr	r4, [r0, #4]
   22738:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2273c:	mov	r0, r4
   22740:	cmp	r4, #0
   22744:	bne	22734 <__assert_fail@plt+0x10170>
   22748:	ldr	r0, [r5]
   2274c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   22750:	mov	r0, r5
   22754:	bl	2e3fc <__assert_fail@plt+0x1be38>
   22758:	pop	{r4, r5, r6, pc}
   2275c:	push	{r4, r5, lr}
   22760:	sub	sp, sp, #44	; 0x2c
   22764:	mov	r4, r0
   22768:	mov	r0, r1
   2276c:	ldr	r1, [r4, #20]
   22770:	bl	21d18 <__assert_fail@plt+0xf754>
   22774:	subs	r5, r0, #0
   22778:	beq	22870 <__assert_fail@plt+0x102ac>
   2277c:	ldr	r3, [r4, #8]
   22780:	cmp	r5, r3
   22784:	beq	22880 <__assert_fail@plt+0x102bc>
   22788:	mov	r1, #8
   2278c:	mov	r0, r5
   22790:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   22794:	str	r0, [sp]
   22798:	cmp	r0, #0
   2279c:	beq	22888 <__assert_fail@plt+0x102c4>
   227a0:	str	r5, [sp, #8]
   227a4:	add	r0, r0, r5, lsl #3
   227a8:	str	r0, [sp, #4]
   227ac:	mov	r2, #0
   227b0:	str	r2, [sp, #12]
   227b4:	str	r2, [sp, #16]
   227b8:	ldr	r3, [r4, #20]
   227bc:	str	r3, [sp, #20]
   227c0:	ldr	r3, [r4, #24]
   227c4:	str	r3, [sp, #24]
   227c8:	ldr	r3, [r4, #28]
   227cc:	str	r3, [sp, #28]
   227d0:	ldr	r3, [r4, #32]
   227d4:	str	r3, [sp, #32]
   227d8:	ldr	r3, [r4, #36]	; 0x24
   227dc:	str	r3, [sp, #36]	; 0x24
   227e0:	mov	r1, r4
   227e4:	mov	r0, sp
   227e8:	bl	21e14 <__assert_fail@plt+0xf850>
   227ec:	subs	r5, r0, #0
   227f0:	bne	22838 <__assert_fail@plt+0x10274>
   227f4:	ldr	r3, [sp, #36]	; 0x24
   227f8:	str	r3, [r4, #36]	; 0x24
   227fc:	mov	r2, #1
   22800:	mov	r1, sp
   22804:	mov	r0, r4
   22808:	bl	21e14 <__assert_fail@plt+0xf850>
   2280c:	cmp	r0, #0
   22810:	beq	2286c <__assert_fail@plt+0x102a8>
   22814:	mov	r2, #0
   22818:	mov	r1, sp
   2281c:	mov	r0, r4
   22820:	bl	21e14 <__assert_fail@plt+0xf850>
   22824:	cmp	r0, #0
   22828:	beq	2286c <__assert_fail@plt+0x102a8>
   2282c:	ldr	r0, [sp]
   22830:	bl	2e3fc <__assert_fail@plt+0x1be38>
   22834:	b	22874 <__assert_fail@plt+0x102b0>
   22838:	ldr	r0, [r4]
   2283c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   22840:	ldr	r3, [sp]
   22844:	str	r3, [r4]
   22848:	ldr	r3, [sp, #4]
   2284c:	str	r3, [r4, #4]
   22850:	ldr	r3, [sp, #8]
   22854:	str	r3, [r4, #8]
   22858:	ldr	r3, [sp, #12]
   2285c:	str	r3, [r4, #12]
   22860:	ldr	r3, [sp, #36]	; 0x24
   22864:	str	r3, [r4, #36]	; 0x24
   22868:	b	22874 <__assert_fail@plt+0x102b0>
   2286c:	bl	12570 <abort@plt>
   22870:	mov	r5, #0
   22874:	mov	r0, r5
   22878:	add	sp, sp, #44	; 0x2c
   2287c:	pop	{r4, r5, pc}
   22880:	mov	r5, #1
   22884:	b	22874 <__assert_fail@plt+0x102b0>
   22888:	mov	r5, #0
   2288c:	b	22874 <__assert_fail@plt+0x102b0>
   22890:	push	{r4, r5, r6, lr}
   22894:	sub	sp, sp, #8
   22898:	subs	r6, r1, #0
   2289c:	beq	228d8 <__assert_fail@plt+0x10314>
   228a0:	mov	r4, r0
   228a4:	mov	r5, r2
   228a8:	mov	r3, #0
   228ac:	add	r2, sp, #4
   228b0:	mov	r1, r6
   228b4:	bl	21f68 <__assert_fail@plt+0xf9a4>
   228b8:	cmp	r0, #0
   228bc:	beq	228dc <__assert_fail@plt+0x10318>
   228c0:	cmp	r5, #0
   228c4:	moveq	r0, #0
   228c8:	strne	r0, [r5]
   228cc:	movne	r0, #0
   228d0:	add	sp, sp, #8
   228d4:	pop	{r4, r5, r6, pc}
   228d8:	bl	12570 <abort@plt>
   228dc:	vldr	s15, [r4, #12]
   228e0:	vcvt.f32.u32	s14, s15
   228e4:	ldr	r3, [r4, #20]
   228e8:	vldr	s15, [r4, #8]
   228ec:	vcvt.f32.u32	s15, s15
   228f0:	vldr	s13, [r3, #8]
   228f4:	vmul.f32	s15, s15, s13
   228f8:	vcmpe.f32	s14, s15
   228fc:	vmrs	APSR_nzcv, fpscr
   22900:	bgt	22950 <__assert_fail@plt+0x1038c>
   22904:	ldr	r3, [sp, #4]
   22908:	ldr	r2, [r3]
   2290c:	cmp	r2, #0
   22910:	beq	229f4 <__assert_fail@plt+0x10430>
   22914:	ldr	r0, [r4, #36]	; 0x24
   22918:	cmp	r0, #0
   2291c:	beq	229dc <__assert_fail@plt+0x10418>
   22920:	ldr	r3, [r0, #4]
   22924:	str	r3, [r4, #36]	; 0x24
   22928:	str	r6, [r0]
   2292c:	ldr	r3, [sp, #4]
   22930:	ldr	r2, [r3, #4]
   22934:	str	r2, [r0, #4]
   22938:	str	r0, [r3, #4]
   2293c:	ldr	r3, [r4, #16]
   22940:	add	r3, r3, #1
   22944:	str	r3, [r4, #16]
   22948:	mov	r0, #1
   2294c:	b	228d0 <__assert_fail@plt+0x1030c>
   22950:	mov	r0, r4
   22954:	bl	21c24 <__assert_fail@plt+0xf660>
   22958:	ldr	r3, [r4, #20]
   2295c:	vldr	s13, [r3, #8]
   22960:	vldr	s15, [r4, #8]
   22964:	vcvt.f32.u32	s15, s15
   22968:	vldr	s14, [r4, #12]
   2296c:	vcvt.f32.u32	s14, s14
   22970:	vmul.f32	s12, s13, s15
   22974:	vcmpe.f32	s14, s12
   22978:	vmrs	APSR_nzcv, fpscr
   2297c:	ble	22904 <__assert_fail@plt+0x10340>
   22980:	ldrb	r2, [r3, #16]
   22984:	cmp	r2, #0
   22988:	vldr	s14, [r3, #12]
   2298c:	vmul.f32	s15, s15, s14
   22990:	vmuleq.f32	s15, s15, s13
   22994:	vldr	s14, [pc, #140]	; 22a28 <__assert_fail@plt+0x10464>
   22998:	vcmpe.f32	s15, s14
   2299c:	vmrs	APSR_nzcv, fpscr
   229a0:	bge	22a18 <__assert_fail@plt+0x10454>
   229a4:	vcvt.u32.f32	s15, s15
   229a8:	vmov	r1, s15
   229ac:	mov	r0, r4
   229b0:	bl	2275c <__assert_fail@plt+0x10198>
   229b4:	cmp	r0, #0
   229b8:	beq	22a20 <__assert_fail@plt+0x1045c>
   229bc:	mov	r3, #0
   229c0:	add	r2, sp, #4
   229c4:	mov	r1, r6
   229c8:	mov	r0, r4
   229cc:	bl	21f68 <__assert_fail@plt+0xf9a4>
   229d0:	cmp	r0, #0
   229d4:	beq	22904 <__assert_fail@plt+0x10340>
   229d8:	bl	12570 <abort@plt>
   229dc:	mov	r0, #8
   229e0:	bl	3079c <__assert_fail@plt+0x1e1d8>
   229e4:	cmp	r0, #0
   229e8:	bne	22928 <__assert_fail@plt+0x10364>
   229ec:	mvn	r0, #0
   229f0:	b	228d0 <__assert_fail@plt+0x1030c>
   229f4:	str	r6, [r3]
   229f8:	ldr	r3, [r4, #16]
   229fc:	add	r3, r3, #1
   22a00:	str	r3, [r4, #16]
   22a04:	ldr	r3, [r4, #12]
   22a08:	add	r3, r3, #1
   22a0c:	str	r3, [r4, #12]
   22a10:	mov	r0, #1
   22a14:	b	228d0 <__assert_fail@plt+0x1030c>
   22a18:	mvn	r0, #0
   22a1c:	b	228d0 <__assert_fail@plt+0x1030c>
   22a20:	mvn	r0, #0
   22a24:	b	228d0 <__assert_fail@plt+0x1030c>
   22a28:	svcmi	0x00800000
   22a2c:	push	{r4, lr}
   22a30:	sub	sp, sp, #8
   22a34:	mov	r4, r1
   22a38:	add	r2, sp, #4
   22a3c:	bl	22890 <__assert_fail@plt+0x102cc>
   22a40:	cmn	r0, #1
   22a44:	beq	22a5c <__assert_fail@plt+0x10498>
   22a48:	cmp	r0, #0
   22a4c:	movne	r0, r4
   22a50:	ldreq	r0, [sp, #4]
   22a54:	add	sp, sp, #8
   22a58:	pop	{r4, pc}
   22a5c:	mov	r0, #0
   22a60:	b	22a54 <__assert_fail@plt+0x10490>
   22a64:	push	{r4, r5, r6, lr}
   22a68:	sub	sp, sp, #8
   22a6c:	mov	r4, r0
   22a70:	mov	r3, #1
   22a74:	add	r2, sp, #4
   22a78:	bl	21f68 <__assert_fail@plt+0xf9a4>
   22a7c:	subs	r5, r0, #0
   22a80:	beq	22aa0 <__assert_fail@plt+0x104dc>
   22a84:	ldr	r3, [r4, #16]
   22a88:	sub	r3, r3, #1
   22a8c:	str	r3, [r4, #16]
   22a90:	ldr	r3, [sp, #4]
   22a94:	ldr	r3, [r3]
   22a98:	cmp	r3, #0
   22a9c:	beq	22aac <__assert_fail@plt+0x104e8>
   22aa0:	mov	r0, r5
   22aa4:	add	sp, sp, #8
   22aa8:	pop	{r4, r5, r6, pc}
   22aac:	ldr	r3, [r4, #12]
   22ab0:	sub	r3, r3, #1
   22ab4:	str	r3, [r4, #12]
   22ab8:	vmov	s15, r3
   22abc:	vcvt.f32.u32	s15, s15
   22ac0:	ldr	r3, [r4, #20]
   22ac4:	vldr	s14, [r4, #8]
   22ac8:	vcvt.f32.u32	s14, s14
   22acc:	vldr	s13, [r3]
   22ad0:	vmul.f32	s14, s14, s13
   22ad4:	vcmpe.f32	s15, s14
   22ad8:	vmrs	APSR_nzcv, fpscr
   22adc:	bpl	22aa0 <__assert_fail@plt+0x104dc>
   22ae0:	mov	r0, r4
   22ae4:	bl	21c24 <__assert_fail@plt+0xf660>
   22ae8:	ldr	r3, [r4, #20]
   22aec:	vldr	s15, [r4, #8]
   22af0:	vcvt.f32.u32	s15, s15
   22af4:	vldr	s14, [r4, #12]
   22af8:	vcvt.f32.u32	s13, s14
   22afc:	vldr	s14, [r3]
   22b00:	vmul.f32	s14, s15, s14
   22b04:	vcmpe.f32	s13, s14
   22b08:	vmrs	APSR_nzcv, fpscr
   22b0c:	bpl	22aa0 <__assert_fail@plt+0x104dc>
   22b10:	ldrb	r2, [r3, #16]
   22b14:	cmp	r2, #0
   22b18:	vldr	s14, [r3, #4]
   22b1c:	vmuleq.f32	s15, s15, s14
   22b20:	vldreq	s14, [r3, #8]
   22b24:	vmul.f32	s15, s15, s14
   22b28:	vcvt.u32.f32	s15, s15
   22b2c:	vmov	r1, s15
   22b30:	mov	r0, r4
   22b34:	bl	2275c <__assert_fail@plt+0x10198>
   22b38:	cmp	r0, #0
   22b3c:	bne	22aa0 <__assert_fail@plt+0x104dc>
   22b40:	ldr	r0, [r4, #36]	; 0x24
   22b44:	cmp	r0, #0
   22b48:	beq	22b60 <__assert_fail@plt+0x1059c>
   22b4c:	ldr	r6, [r0, #4]
   22b50:	bl	2e3fc <__assert_fail@plt+0x1be38>
   22b54:	mov	r0, r6
   22b58:	cmp	r6, #0
   22b5c:	bne	22b4c <__assert_fail@plt+0x10588>
   22b60:	mov	r3, #0
   22b64:	str	r3, [r4, #36]	; 0x24
   22b68:	b	22aa0 <__assert_fail@plt+0x104dc>
   22b6c:	push	{r4, lr}
   22b70:	bl	22a64 <__assert_fail@plt+0x104a0>
   22b74:	pop	{r4, pc}
   22b78:	push	{r4, r6, r7, lr}
   22b7c:	vpush	{d8}
   22b80:	vmov.f64	d8, d0
   22b84:	cmp	r0, #1
   22b88:	beq	22bf0 <__assert_fail@plt+0x1062c>
   22b8c:	mov	r4, r0
   22b90:	vldr	d7, [pc, #104]	; 22c00 <__assert_fail@plt+0x1063c>
   22b94:	vcmpe.f64	d0, d7
   22b98:	vmrs	APSR_nzcv, fpscr
   22b9c:	bpl	22bf0 <__assert_fail@plt+0x1062c>
   22ba0:	vmov	r0, r1, d0
   22ba4:	bl	42390 <__assert_fail@plt+0x2fdcc>
   22ba8:	mov	r6, r0
   22bac:	mov	r7, r1
   22bb0:	cmp	r4, #0
   22bb4:	movne	r0, #0
   22bb8:	bne	22bd8 <__assert_fail@plt+0x10614>
   22bbc:	mov	r0, r6
   22bc0:	bl	421f8 <__assert_fail@plt+0x2fc34>
   22bc4:	vmov	d7, r0, r1
   22bc8:	vcmp.f64	d7, d8
   22bcc:	vmrs	APSR_nzcv, fpscr
   22bd0:	movne	r0, #1
   22bd4:	moveq	r0, #0
   22bd8:	adds	r2, r6, r0
   22bdc:	adc	r3, r7, r0, asr #31
   22be0:	mov	r0, r2
   22be4:	mov	r1, r3
   22be8:	bl	421f8 <__assert_fail@plt+0x2fc34>
   22bec:	vmov	d8, r0, r1
   22bf0:	vmov.f64	d0, d8
   22bf4:	vpop	{d8}
   22bf8:	pop	{r4, r6, r7, pc}
   22bfc:	nop			; (mov r0, r0)
   22c00:	andeq	r0, r0, r0
   22c04:	mvnsmi	r0, #0
   22c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c0c:	vpush	{d8-d9}
   22c10:	sub	sp, sp, #116	; 0x74
   22c14:	strd	r0, [sp, #24]
   22c18:	mov	r7, r2
   22c1c:	str	r2, [sp, #16]
   22c20:	mov	r8, r3
   22c24:	and	r3, r3, #3
   22c28:	str	r3, [sp, #20]
   22c2c:	and	r3, r8, #32
   22c30:	str	r3, [sp, #32]
   22c34:	cmp	r3, #0
   22c38:	movne	r3, #1024	; 0x400
   22c3c:	moveq	r3, #1000	; 0x3e8
   22c40:	str	r3, [sp, #36]	; 0x24
   22c44:	bl	12474 <localeconv@plt>
   22c48:	mov	r5, r0
   22c4c:	ldr	r6, [r0]
   22c50:	mov	r0, r6
   22c54:	bl	122d0 <strlen@plt>
   22c58:	mov	r4, r0
   22c5c:	sub	r3, r0, #1
   22c60:	ldr	r2, [pc, #1088]	; 230a8 <__assert_fail@plt+0x10ae4>
   22c64:	cmp	r3, #15
   22c68:	movhi	r6, r2
   22c6c:	str	r6, [sp, #56]	; 0x38
   22c70:	cmp	r3, #15
   22c74:	movhi	r4, #1
   22c78:	ldr	r9, [r5, #8]
   22c7c:	ldr	r5, [r5, #4]
   22c80:	mov	r0, r5
   22c84:	bl	122d0 <strlen@plt>
   22c88:	ldr	r3, [pc, #1052]	; 230ac <__assert_fail@plt+0x10ae8>
   22c8c:	cmp	r0, #16
   22c90:	movhi	r5, r3
   22c94:	str	r5, [sp, #4]
   22c98:	add	sl, r7, #644	; 0x284
   22c9c:	add	sl, sl, #3
   22ca0:	ldrd	r2, [sp, #176]	; 0xb0
   22ca4:	ldrd	r6, [sp, #168]	; 0xa8
   22ca8:	cmp	r3, r7
   22cac:	cmpeq	r2, r6
   22cb0:	bhi	22e24 <__assert_fail@plt+0x10860>
   22cb4:	mov	r0, r6
   22cb8:	mov	r1, r7
   22cbc:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22cc0:	orrs	r3, r2, r3
   22cc4:	bne	22d0c <__assert_fail@plt+0x10748>
   22cc8:	ldrd	r2, [sp, #176]	; 0xb0
   22ccc:	ldrd	r0, [sp, #168]	; 0xa8
   22cd0:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22cd4:	mov	r2, r0
   22cd8:	mov	r3, r1
   22cdc:	ldrd	r6, [sp, #24]
   22ce0:	mul	r0, r2, r7
   22ce4:	mla	ip, r6, r3, r0
   22ce8:	umull	r0, r1, r2, r6
   22cec:	strd	r0, [sp, #8]
   22cf0:	add	r1, ip, r1
   22cf4:	str	r1, [sp, #12]
   22cf8:	ldrd	r0, [sp, #8]
   22cfc:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22d00:	cmp	r7, r1
   22d04:	cmpeq	r6, r0
   22d08:	beq	22f94 <__assert_fail@plt+0x109d0>
   22d0c:	ldrd	r0, [sp, #168]	; 0xa8
   22d10:	bl	421f8 <__assert_fail@plt+0x2fc34>
   22d14:	vmov	d9, r0, r1
   22d18:	ldrd	r0, [sp, #176]	; 0xb0
   22d1c:	bl	421f8 <__assert_fail@plt+0x2fc34>
   22d20:	vmov	d7, r0, r1
   22d24:	vdiv.f64	d8, d9, d7
   22d28:	ldrd	r0, [sp, #24]
   22d2c:	bl	421f8 <__assert_fail@plt+0x2fc34>
   22d30:	vmov	d7, r0, r1
   22d34:	vmul.f64	d0, d8, d7
   22d38:	tst	r8, #16
   22d3c:	beq	22ef4 <__assert_fail@plt+0x10930>
   22d40:	vldr	d7, [pc, #848]	; 23098 <__assert_fail@plt+0x10ad4>
   22d44:	mov	r7, #0
   22d48:	vldr	s13, [sp, #36]	; 0x24
   22d4c:	vcvt.f64.u32	d6, s13
   22d50:	vmul.f64	d7, d7, d6
   22d54:	add	r7, r7, #1
   22d58:	vmul.f64	d5, d6, d7
   22d5c:	vcmpe.f64	d0, d5
   22d60:	vmrs	APSR_nzcv, fpscr
   22d64:	movge	r3, #1
   22d68:	movlt	r3, #0
   22d6c:	cmp	r7, #7
   22d70:	movgt	r3, #0
   22d74:	andle	r3, r3, #1
   22d78:	cmp	r3, #0
   22d7c:	bne	22d50 <__assert_fail@plt+0x1078c>
   22d80:	vdiv.f64	d8, d0, d7
   22d84:	vmov.f64	d0, d8
   22d88:	ldr	r0, [sp, #20]
   22d8c:	bl	22b78 <__assert_fail@plt+0x105b4>
   22d90:	vmov	r2, r3, d0
   22d94:	ldr	r1, [pc, #788]	; 230b0 <__assert_fail@plt+0x10aec>
   22d98:	ldr	r6, [sp, #16]
   22d9c:	mov	r0, r6
   22da0:	bl	12480 <sprintf@plt>
   22da4:	mov	r0, r6
   22da8:	bl	122d0 <strlen@plt>
   22dac:	mov	r5, r0
   22db0:	add	r4, r4, #1
   22db4:	ldr	r3, [sp, #32]
   22db8:	cmp	r3, #0
   22dbc:	movne	r3, #1
   22dc0:	moveq	r3, #2
   22dc4:	add	r3, r3, r4
   22dc8:	cmp	r0, r3
   22dcc:	bhi	22de8 <__assert_fail@plt+0x10824>
   22dd0:	tst	r8, #8
   22dd4:	beq	22f24 <__assert_fail@plt+0x10960>
   22dd8:	add	r3, r6, r0
   22ddc:	ldrb	r3, [r3, #-1]
   22de0:	cmp	r3, #48	; 0x30
   22de4:	bne	22f24 <__assert_fail@plt+0x10960>
   22de8:	vldr	d9, [pc, #688]	; 230a0 <__assert_fail@plt+0x10adc>
   22dec:	vmul.f64	d0, d8, d9
   22df0:	ldr	r0, [sp, #20]
   22df4:	bl	22b78 <__assert_fail@plt+0x105b4>
   22df8:	vdiv.f64	d7, d0, d9
   22dfc:	vmov	r2, r3, d7
   22e00:	ldr	r1, [pc, #684]	; 230b4 <__assert_fail@plt+0x10af0>
   22e04:	ldr	r4, [sp, #16]
   22e08:	mov	r0, r4
   22e0c:	bl	12480 <sprintf@plt>
   22e10:	mov	r0, r4
   22e14:	bl	122d0 <strlen@plt>
   22e18:	mov	r5, r0
   22e1c:	mov	r4, #0
   22e20:	b	22f24 <__assert_fail@plt+0x10960>
   22e24:	ldrd	r2, [sp, #168]	; 0xa8
   22e28:	orrs	r3, r2, r3
   22e2c:	beq	22d0c <__assert_fail@plt+0x10748>
   22e30:	ldrd	r2, [sp, #168]	; 0xa8
   22e34:	ldrd	r0, [sp, #176]	; 0xb0
   22e38:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22e3c:	orrs	r3, r2, r3
   22e40:	bne	22d0c <__assert_fail@plt+0x10748>
   22e44:	ldrd	r2, [sp, #168]	; 0xa8
   22e48:	ldrd	r0, [sp, #176]	; 0xb0
   22e4c:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22e50:	strd	r0, [sp, #40]	; 0x28
   22e54:	mov	r2, r0
   22e58:	mov	r3, r1
   22e5c:	ldrd	r0, [sp, #24]
   22e60:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22e64:	mov	r1, #10
   22e68:	umull	r6, r7, r2, r1
   22e6c:	mla	r7, r1, r3, r7
   22e70:	ldrd	r2, [sp, #40]	; 0x28
   22e74:	mov	r0, r6
   22e78:	mov	r1, r7
   22e7c:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22e80:	lsls	r0, r2, #1
   22e84:	adc	r1, r3, r3
   22e88:	strd	r0, [sp, #48]	; 0x30
   22e8c:	ldrd	r2, [sp, #40]	; 0x28
   22e90:	ldrd	r0, [sp, #24]
   22e94:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22e98:	strd	r0, [sp, #8]
   22e9c:	ldrd	r2, [sp, #40]	; 0x28
   22ea0:	mov	r0, r6
   22ea4:	mov	r1, r7
   22ea8:	bl	42340 <__assert_fail@plt+0x2fd7c>
   22eac:	mov	r6, r0
   22eb0:	ldrd	r2, [sp, #40]	; 0x28
   22eb4:	ldrd	r0, [sp, #48]	; 0x30
   22eb8:	cmp	r3, r1
   22ebc:	cmpeq	r2, r0
   22ec0:	bls	22ed8 <__assert_fail@plt+0x10914>
   22ec4:	mov	r3, r0
   22ec8:	orrs	r3, r3, r1
   22ecc:	movne	fp, #1
   22ed0:	moveq	fp, #0
   22ed4:	b	22f9c <__assert_fail@plt+0x109d8>
   22ed8:	ldrd	r2, [sp, #40]	; 0x28
   22edc:	ldrd	r0, [sp, #48]	; 0x30
   22ee0:	cmp	r3, r1
   22ee4:	cmpeq	r2, r0
   22ee8:	movcc	fp, #3
   22eec:	movcs	fp, #2
   22ef0:	b	22f9c <__assert_fail@plt+0x109d8>
   22ef4:	ldr	r0, [sp, #20]
   22ef8:	bl	22b78 <__assert_fail@plt+0x105b4>
   22efc:	vmov	r2, r3, d0
   22f00:	ldr	r1, [pc, #428]	; 230b4 <__assert_fail@plt+0x10af0>
   22f04:	ldr	r4, [sp, #16]
   22f08:	mov	r0, r4
   22f0c:	bl	12480 <sprintf@plt>
   22f10:	mov	r0, r4
   22f14:	bl	122d0 <strlen@plt>
   22f18:	mov	r5, r0
   22f1c:	mov	r4, #0
   22f20:	mvn	r7, #0
   22f24:	sub	r6, sl, r5
   22f28:	mov	r2, r5
   22f2c:	ldr	r1, [sp, #16]
   22f30:	mov	r0, r6
   22f34:	bl	11f94 <memmove@plt>
   22f38:	sub	r5, r5, r4
   22f3c:	add	r5, r6, r5
   22f40:	tst	r8, #4
   22f44:	bne	2331c <__assert_fail@plt+0x10d58>
   22f48:	tst	r8, #128	; 0x80
   22f4c:	beq	23444 <__assert_fail@plt+0x10e80>
   22f50:	cmp	r7, #0
   22f54:	blt	233a8 <__assert_fail@plt+0x10de4>
   22f58:	and	r3, r8, #256	; 0x100
   22f5c:	orrs	r2, r7, r3
   22f60:	beq	22f7c <__assert_fail@plt+0x109b8>
   22f64:	tst	r8, #64	; 0x40
   22f68:	beq	22f7c <__assert_fail@plt+0x109b8>
   22f6c:	ldr	r1, [sp, #16]
   22f70:	add	sl, r1, #648	; 0x288
   22f74:	mov	r2, #32
   22f78:	strb	r2, [r1, #647]	; 0x287
   22f7c:	cmp	r7, #0
   22f80:	bne	233fc <__assert_fail@plt+0x10e38>
   22f84:	cmp	r3, #0
   22f88:	beq	23444 <__assert_fail@plt+0x10e80>
   22f8c:	mov	r2, sl
   22f90:	b	23438 <__assert_fail@plt+0x10e74>
   22f94:	mov	fp, #0
   22f98:	mov	r6, fp
   22f9c:	ands	r3, r8, #16
   22fa0:	str	r3, [sp, #40]	; 0x28
   22fa4:	streq	sl, [sp, #24]
   22fa8:	mvneq	r7, #0
   22fac:	beq	23160 <__assert_fail@plt+0x10b9c>
   22fb0:	ldr	ip, [sp, #36]	; 0x24
   22fb4:	mov	r3, #0
   22fb8:	ldrd	r0, [sp, #8]
   22fbc:	cmp	r1, r3
   22fc0:	cmpeq	r0, ip
   22fc4:	strcc	sl, [sp, #24]
   22fc8:	movcc	r7, #0
   22fcc:	bcc	23160 <__assert_fail@plt+0x10b9c>
   22fd0:	mov	r7, #0
   22fd4:	str	sl, [sp, #24]
   22fd8:	mov	sl, ip
   22fdc:	str	r9, [sp, #48]	; 0x30
   22fe0:	str	r8, [sp, #60]	; 0x3c
   22fe4:	mov	r8, ip
   22fe8:	mov	r9, r3
   22fec:	b	2302c <__assert_fail@plt+0x10a68>
   22ff0:	add	fp, fp, r5
   22ff4:	cmp	sl, fp
   22ff8:	movcc	fp, #3
   22ffc:	movcs	fp, #2
   23000:	add	r7, r7, #1
   23004:	ldrd	r2, [sp, #8]
   23008:	cmp	r9, r3
   2300c:	cmpeq	r8, r2
   23010:	movls	r3, #1
   23014:	movhi	r3, #0
   23018:	cmp	r7, #7
   2301c:	movgt	r3, #0
   23020:	andle	r3, r3, #1
   23024:	cmp	r3, #0
   23028:	beq	230bc <__assert_fail@plt+0x10af8>
   2302c:	mov	r2, r8
   23030:	mov	r3, r9
   23034:	ldrd	r0, [sp, #8]
   23038:	bl	42340 <__assert_fail@plt+0x2fd7c>
   2303c:	add	r2, r2, r2, lsl #2
   23040:	add	r6, r6, r2, lsl #1
   23044:	mov	r1, sl
   23048:	mov	r0, r6
   2304c:	bl	41c54 <__assert_fail@plt+0x2f690>
   23050:	asr	r5, fp, #1
   23054:	add	r5, r5, r1, lsl #1
   23058:	mov	r2, r8
   2305c:	mov	r3, r9
   23060:	ldrd	r0, [sp, #8]
   23064:	bl	42340 <__assert_fail@plt+0x2fd7c>
   23068:	strd	r0, [sp, #8]
   2306c:	mov	r1, sl
   23070:	mov	r0, r6
   23074:	bl	41a68 <__assert_fail@plt+0x2f4a4>
   23078:	mov	r6, r0
   2307c:	cmp	sl, r5
   23080:	bls	22ff0 <__assert_fail@plt+0x10a2c>
   23084:	cmn	fp, r5
   23088:	movne	fp, #1
   2308c:	moveq	fp, #0
   23090:	b	23000 <__assert_fail@plt+0x10a3c>
   23094:	nop			; (mov r0, r0)
   23098:	andeq	r0, r0, r0
   2309c:	svccc	0x00f00000	; IMB
   230a0:	andeq	r0, r0, r0
   230a4:	eormi	r0, r4, r0
   230a8:	andeq	r6, r4, r0, asr #3
   230ac:	andeq	r4, r4, r0, lsl r3
   230b0:			; <UNDEFINED> instruction: 0x00046cb0
   230b4:	andeq	r6, r4, r8, lsr #25
   230b8:	andeq	r6, r4, r8, lsl #25
   230bc:	ldr	sl, [sp, #24]
   230c0:	ldr	r9, [sp, #48]	; 0x30
   230c4:	ldr	r8, [sp, #60]	; 0x3c
   230c8:	ldrd	r2, [sp, #8]
   230cc:	cmp	r3, #0
   230d0:	cmpeq	r2, #9
   230d4:	strhi	sl, [sp, #24]
   230d8:	bhi	23160 <__assert_fail@plt+0x10b9c>
   230dc:	ldr	r3, [sp, #20]
   230e0:	cmp	r3, #1
   230e4:	beq	23208 <__assert_fail@plt+0x10c44>
   230e8:	ldr	r3, [sp, #20]
   230ec:	clz	r3, r3
   230f0:	lsr	r3, r3, #5
   230f4:	cmp	fp, #0
   230f8:	moveq	r3, #0
   230fc:	cmp	r3, #0
   23100:	beq	23114 <__assert_fail@plt+0x10b50>
   23104:	add	r6, r6, #1
   23108:	cmp	r6, #10
   2310c:	movne	fp, #0
   23110:	beq	23220 <__assert_fail@plt+0x10c5c>
   23114:	cmp	r6, #0
   23118:	bne	2312c <__assert_fail@plt+0x10b68>
   2311c:	ands	r6, r8, #8
   23120:	strne	sl, [sp, #24]
   23124:	movne	r6, #0
   23128:	bne	23160 <__assert_fail@plt+0x10b9c>
   2312c:	ldr	r3, [sp, #16]
   23130:	add	r5, r3, #644	; 0x284
   23134:	add	r5, r5, #2
   23138:	add	r6, r6, #48	; 0x30
   2313c:	strb	r6, [r3, #646]	; 0x286
   23140:	sub	r3, r5, r4
   23144:	str	r3, [sp, #24]
   23148:	mov	r2, r4
   2314c:	ldr	r1, [sp, #56]	; 0x38
   23150:	mov	r0, r3
   23154:	bl	12000 <memcpy@plt>
   23158:	mov	r6, #0
   2315c:	mov	fp, r6
   23160:	ldr	r3, [sp, #20]
   23164:	cmp	r3, #1
   23168:	beq	23250 <__assert_fail@plt+0x10c8c>
   2316c:	ldr	r3, [sp, #20]
   23170:	cmp	r3, #0
   23174:	movne	fp, #0
   23178:	bne	2318c <__assert_fail@plt+0x10bc8>
   2317c:	add	fp, r6, fp
   23180:	cmp	fp, #0
   23184:	movle	fp, #0
   23188:	movgt	fp, #1
   2318c:	cmp	fp, #0
   23190:	beq	232ac <__assert_fail@plt+0x10ce8>
   23194:	ldrd	r2, [sp, #8]
   23198:	adds	r2, r2, #1
   2319c:	adc	r3, r3, #0
   231a0:	mov	r0, r2
   231a4:	mov	r1, r3
   231a8:	strd	r0, [sp, #8]
   231ac:	ldr	r3, [sp, #40]	; 0x28
   231b0:	cmp	r3, #0
   231b4:	beq	232ac <__assert_fail@plt+0x10ce8>
   231b8:	ldr	r2, [sp, #36]	; 0x24
   231bc:	mov	r3, #0
   231c0:	cmp	r3, r1
   231c4:	cmpeq	r2, r0
   231c8:	moveq	r3, #1
   231cc:	movne	r3, #0
   231d0:	cmp	r7, #7
   231d4:	movgt	r3, #0
   231d8:	andle	r3, r3, #1
   231dc:	cmp	r3, #0
   231e0:	beq	232ac <__assert_fail@plt+0x10ce8>
   231e4:	add	r7, r7, #1
   231e8:	tst	r8, #8
   231ec:	beq	23280 <__assert_fail@plt+0x10cbc>
   231f0:	ldr	r2, [sp, #24]
   231f4:	sub	r6, r2, #1
   231f8:	mov	r3, #49	; 0x31
   231fc:	strb	r3, [r2, #-1]
   23200:	mov	r5, r2
   23204:	b	22f40 <__assert_fail@plt+0x1097c>
   23208:	and	r3, r6, #1
   2320c:	add	r3, r3, fp
   23210:	cmp	r3, #2
   23214:	movle	r3, #0
   23218:	movgt	r3, #1
   2321c:	b	230fc <__assert_fail@plt+0x10b38>
   23220:	ldrd	r2, [sp, #8]
   23224:	adds	r2, r2, #1
   23228:	adc	r3, r3, #0
   2322c:	strd	r2, [sp, #8]
   23230:	cmp	r3, #0
   23234:	cmpeq	r2, #9
   23238:	strhi	sl, [sp, #24]
   2323c:	movhi	fp, #0
   23240:	movhi	r6, fp
   23244:	bhi	23160 <__assert_fail@plt+0x10b9c>
   23248:	mov	fp, #0
   2324c:	b	2311c <__assert_fail@plt+0x10b58>
   23250:	ldrd	r2, [sp, #8]
   23254:	and	r2, r2, #1
   23258:	mov	r3, #0
   2325c:	adds	r2, r2, fp
   23260:	adc	r3, r3, fp, asr #31
   23264:	orr	r2, r2, r3
   23268:	cmp	r2, #0
   2326c:	addne	r6, r6, #1
   23270:	cmp	r6, #5
   23274:	movle	fp, #0
   23278:	movgt	fp, #1
   2327c:	b	2318c <__assert_fail@plt+0x10bc8>
   23280:	mov	r3, #48	; 0x30
   23284:	ldr	r2, [sp, #24]
   23288:	strb	r3, [r2, #-1]
   2328c:	mvn	r3, r4
   23290:	add	r3, r2, r3
   23294:	str	r3, [sp, #24]
   23298:	mov	r2, r4
   2329c:	ldr	r1, [sp, #56]	; 0x38
   232a0:	mov	r0, r3
   232a4:	bl	12000 <memcpy@plt>
   232a8:	b	231f0 <__assert_fail@plt+0x10c2c>
   232ac:	ldr	r6, [sp, #24]
   232b0:	mov	r4, #10
   232b4:	mov	r5, #0
   232b8:	mov	fp, r6
   232bc:	str	r8, [sp, #20]
   232c0:	mov	r8, r7
   232c4:	ldrd	r6, [sp, #8]
   232c8:	mov	r2, r4
   232cc:	mov	r3, r5
   232d0:	mov	r0, r6
   232d4:	mov	r1, r7
   232d8:	bl	42340 <__assert_fail@plt+0x2fd7c>
   232dc:	add	r2, r2, #48	; 0x30
   232e0:	strb	r2, [fp, #-1]!
   232e4:	mov	r2, r4
   232e8:	mov	r3, r5
   232ec:	mov	r0, r6
   232f0:	mov	r1, r7
   232f4:	bl	42340 <__assert_fail@plt+0x2fd7c>
   232f8:	mov	r6, r0
   232fc:	mov	r7, r1
   23300:	orrs	r3, r6, r7
   23304:	bne	232c8 <__assert_fail@plt+0x10d04>
   23308:	mov	r7, r8
   2330c:	mov	r6, fp
   23310:	ldr	r8, [sp, #20]
   23314:	ldr	r5, [sp, #24]
   23318:	b	22f40 <__assert_fail@plt+0x1097c>
   2331c:	sub	r4, r5, r6
   23320:	ldr	r0, [sp, #4]
   23324:	bl	122d0 <strlen@plt>
   23328:	mov	fp, r0
   2332c:	mov	r2, r4
   23330:	mov	r1, r6
   23334:	add	r0, sp, #68	; 0x44
   23338:	bl	12000 <memcpy@plt>
   2333c:	mov	r6, r5
   23340:	mvn	r5, #0
   23344:	b	23388 <__assert_fail@plt+0x10dc4>
   23348:	cmp	r5, r4
   2334c:	movcs	r5, r4
   23350:	sub	r6, r6, r5
   23354:	sub	r4, r4, r5
   23358:	mov	r2, r5
   2335c:	add	r3, sp, #68	; 0x44
   23360:	add	r1, r3, r4
   23364:	mov	r0, r6
   23368:	bl	12000 <memcpy@plt>
   2336c:	cmp	r4, #0
   23370:	beq	22f48 <__assert_fail@plt+0x10984>
   23374:	sub	r6, r6, fp
   23378:	mov	r2, fp
   2337c:	ldr	r1, [sp, #4]
   23380:	mov	r0, r6
   23384:	bl	12000 <memcpy@plt>
   23388:	ldrb	r3, [r9]
   2338c:	cmp	r3, #0
   23390:	beq	23348 <__assert_fail@plt+0x10d84>
   23394:	cmp	r3, #255	; 0xff
   23398:	movne	r5, r3
   2339c:	moveq	r5, r4
   233a0:	add	r9, r9, #1
   233a4:	b	23348 <__assert_fail@plt+0x10d84>
   233a8:	ldrd	r2, [sp, #176]	; 0xb0
   233ac:	cmp	r3, #0
   233b0:	cmpeq	r2, #1
   233b4:	bls	23464 <__assert_fail@plt+0x10ea0>
   233b8:	mov	r7, #1
   233bc:	mov	r2, #1
   233c0:	mov	r3, #0
   233c4:	ldr	r1, [sp, #36]	; 0x24
   233c8:	ldrd	r4, [sp, #176]	; 0xb0
   233cc:	mul	r0, r1, r3
   233d0:	umull	r2, r3, r2, r1
   233d4:	add	r3, r0, r3
   233d8:	cmp	r5, r3
   233dc:	cmpeq	r4, r2
   233e0:	bls	22f58 <__assert_fail@plt+0x10994>
   233e4:	add	r7, r7, #1
   233e8:	cmp	r7, #8
   233ec:	bne	233cc <__assert_fail@plt+0x10e08>
   233f0:	and	r3, r8, #256	; 0x100
   233f4:	tst	r8, #64	; 0x40
   233f8:	bne	22f6c <__assert_fail@plt+0x109a8>
   233fc:	add	r2, sl, #1
   23400:	ldr	r1, [sp, #32]
   23404:	cmp	r7, #1
   23408:	cmpeq	r1, #0
   2340c:	ldrne	r1, [pc, #-860]	; 230b8 <__assert_fail@plt+0x10af4>
   23410:	ldrbne	r1, [r1, r7]
   23414:	moveq	r1, #107	; 0x6b
   23418:	strb	r1, [sl]
   2341c:	cmp	r3, #0
   23420:	beq	2345c <__assert_fail@plt+0x10e98>
   23424:	ldr	r3, [sp, #32]
   23428:	cmp	r3, #0
   2342c:	addne	r2, sl, #2
   23430:	movne	r3, #105	; 0x69
   23434:	strbne	r3, [sl, #1]
   23438:	add	sl, r2, #1
   2343c:	mov	r3, #66	; 0x42
   23440:	strb	r3, [r2]
   23444:	mov	r3, #0
   23448:	strb	r3, [sl]
   2344c:	mov	r0, r6
   23450:	add	sp, sp, #116	; 0x74
   23454:	vpop	{d8-d9}
   23458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2345c:	mov	sl, r2
   23460:	b	23444 <__assert_fail@plt+0x10e80>
   23464:	ands	r3, r8, #256	; 0x100
   23468:	movne	r7, #0
   2346c:	bne	22f64 <__assert_fail@plt+0x109a0>
   23470:	b	22f84 <__assert_fail@plt+0x109c0>
   23474:	push	{r4, r5, r6, r7, lr}
   23478:	sub	sp, sp, #20
   2347c:	mov	r7, r1
   23480:	mov	r6, r2
   23484:	subs	r4, r0, #0
   23488:	beq	234f8 <__assert_fail@plt+0x10f34>
   2348c:	ldrb	r3, [r4]
   23490:	cmp	r3, #39	; 0x27
   23494:	addeq	r4, r4, #1
   23498:	moveq	r5, #4
   2349c:	movne	r5, #0
   234a0:	ldr	r1, [pc, #332]	; 235f4 <__assert_fail@plt+0x11030>
   234a4:	mov	r3, #4
   234a8:	add	r2, r1, #12
   234ac:	add	r1, r1, #20
   234b0:	mov	r0, r4
   234b4:	bl	3f410 <__assert_fail@plt+0x2ce4c>
   234b8:	cmp	r0, #0
   234bc:	blt	2353c <__assert_fail@plt+0x10f78>
   234c0:	ldr	r3, [pc, #300]	; 235f4 <__assert_fail@plt+0x11030>
   234c4:	add	r0, r3, r0, lsl #2
   234c8:	ldr	r3, [r0, #12]
   234cc:	orr	r5, r5, r3
   234d0:	mov	r2, #1
   234d4:	mov	r3, #0
   234d8:	strd	r2, [r6]
   234dc:	str	r5, [r7]
   234e0:	mov	r0, #0
   234e4:	ldrd	r2, [r6]
   234e8:	orrs	r3, r2, r3
   234ec:	beq	235d0 <__assert_fail@plt+0x1100c>
   234f0:	add	sp, sp, #20
   234f4:	pop	{r4, r5, r6, r7, pc}
   234f8:	ldr	r0, [pc, #248]	; 235f8 <__assert_fail@plt+0x11034>
   234fc:	bl	121f8 <getenv@plt>
   23500:	subs	r4, r0, #0
   23504:	bne	2348c <__assert_fail@plt+0x10ec8>
   23508:	ldr	r0, [pc, #236]	; 235fc <__assert_fail@plt+0x11038>
   2350c:	bl	121f8 <getenv@plt>
   23510:	subs	r4, r0, #0
   23514:	bne	2348c <__assert_fail@plt+0x10ec8>
   23518:	ldr	r0, [pc, #224]	; 23600 <__assert_fail@plt+0x1103c>
   2351c:	bl	121f8 <getenv@plt>
   23520:	cmp	r0, #0
   23524:	moveq	r2, #1024	; 0x400
   23528:	movne	r2, #512	; 0x200
   2352c:	mov	r3, #0
   23530:	strd	r2, [r6]
   23534:	mov	r5, #0
   23538:	b	234dc <__assert_fail@plt+0x10f18>
   2353c:	ldr	r3, [pc, #192]	; 23604 <__assert_fail@plt+0x11040>
   23540:	str	r3, [sp]
   23544:	mov	r3, r6
   23548:	mov	r2, #0
   2354c:	add	r1, sp, #12
   23550:	mov	r0, r4
   23554:	bl	2d85c <__assert_fail@plt+0x1b298>
   23558:	cmp	r0, #0
   2355c:	movne	r3, #0
   23560:	strne	r3, [r7]
   23564:	bne	234e4 <__assert_fail@plt+0x10f20>
   23568:	ldrb	r3, [r4]
   2356c:	sub	r3, r3, #48	; 0x30
   23570:	uxtb	r3, r3
   23574:	cmp	r3, #9
   23578:	bls	234dc <__assert_fail@plt+0x10f18>
   2357c:	ldr	r2, [sp, #12]
   23580:	cmp	r4, r2
   23584:	beq	235a4 <__assert_fail@plt+0x10fe0>
   23588:	ldrb	r3, [r4, #1]!
   2358c:	sub	r3, r3, #48	; 0x30
   23590:	uxtb	r3, r3
   23594:	cmp	r3, #9
   23598:	bls	234dc <__assert_fail@plt+0x10f18>
   2359c:	cmp	r4, r2
   235a0:	bne	23588 <__assert_fail@plt+0x10fc4>
   235a4:	ldrb	r3, [r2, #-1]
   235a8:	cmp	r3, #66	; 0x42
   235ac:	orrne	r5, r5, #128	; 0x80
   235b0:	beq	235bc <__assert_fail@plt+0x10ff8>
   235b4:	orr	r5, r5, #32
   235b8:	b	234dc <__assert_fail@plt+0x10f18>
   235bc:	orr	r5, r5, #384	; 0x180
   235c0:	ldrb	r3, [r2, #-2]
   235c4:	cmp	r3, #105	; 0x69
   235c8:	bne	234dc <__assert_fail@plt+0x10f18>
   235cc:	b	235b4 <__assert_fail@plt+0x10ff0>
   235d0:	ldr	r0, [pc, #40]	; 23600 <__assert_fail@plt+0x1103c>
   235d4:	bl	121f8 <getenv@plt>
   235d8:	cmp	r0, #0
   235dc:	moveq	r2, #1024	; 0x400
   235e0:	movne	r2, #512	; 0x200
   235e4:	mov	r3, #0
   235e8:	strd	r2, [r6]
   235ec:	mov	r0, #4
   235f0:	b	234f0 <__assert_fail@plt+0x10f2c>
   235f4:	andeq	r6, r4, r8, lsl #25
   235f8:			; <UNDEFINED> instruction: 0x00046cb8
   235fc:	andeq	r6, r4, r4, asr #25
   23600:			; <UNDEFINED> instruction: 0x000445b0
   23604:	ldrdeq	r6, [r4], -r0
   23608:	push	{r4, r5, r6, lr}
   2360c:	ldr	r3, [pc, #140]	; 236a0 <__assert_fail@plt+0x110dc>
   23610:	ldr	r4, [r3]
   23614:	cmp	r4, #0
   23618:	beq	23654 <__assert_fail@plt+0x11090>
   2361c:	ldr	r3, [r4]
   23620:	cmp	r0, r3
   23624:	beq	23640 <__assert_fail@plt+0x1107c>
   23628:	ldr	r4, [r4, #4]
   2362c:	cmp	r4, #0
   23630:	beq	23654 <__assert_fail@plt+0x11090>
   23634:	ldr	r3, [r4]
   23638:	cmp	r3, r0
   2363c:	bne	23628 <__assert_fail@plt+0x11064>
   23640:	ldrb	r3, [r4, #8]
   23644:	cmp	r3, #0
   23648:	addne	r0, r4, #8
   2364c:	moveq	r0, #0
   23650:	pop	{r4, r5, r6, pc}
   23654:	mov	r5, r0
   23658:	bl	11f34 <getpwuid@plt>
   2365c:	cmp	r0, #0
   23660:	ldreq	r6, [pc, #60]	; 236a4 <__assert_fail@plt+0x110e0>
   23664:	ldrne	r6, [r0]
   23668:	mov	r0, r6
   2366c:	bl	122d0 <strlen@plt>
   23670:	add	r0, r0, #12
   23674:	bic	r0, r0, #3
   23678:	bl	2cc14 <__assert_fail@plt+0x1a650>
   2367c:	mov	r4, r0
   23680:	str	r5, [r0], #8
   23684:	mov	r1, r6
   23688:	bl	12180 <strcpy@plt>
   2368c:	ldr	r3, [pc, #12]	; 236a0 <__assert_fail@plt+0x110dc>
   23690:	ldr	r2, [r3]
   23694:	str	r2, [r4, #4]
   23698:	str	r4, [r3]
   2369c:	b	23640 <__assert_fail@plt+0x1107c>
   236a0:	strdeq	r9, [r5], -r4
   236a4:	andeq	r4, r4, r0, lsl r3
   236a8:	push	{r4, r5, r6, lr}
   236ac:	mov	r6, r0
   236b0:	ldr	r3, [pc, #256]	; 237b8 <__assert_fail@plt+0x111f4>
   236b4:	ldr	r4, [r3]
   236b8:	cmp	r4, #0
   236bc:	beq	236fc <__assert_fail@plt+0x11138>
   236c0:	ldrb	r5, [r0]
   236c4:	b	236d4 <__assert_fail@plt+0x11110>
   236c8:	ldr	r4, [r4, #4]
   236cc:	cmp	r4, #0
   236d0:	beq	236fc <__assert_fail@plt+0x11138>
   236d4:	ldrb	r3, [r4, #8]
   236d8:	cmp	r3, r5
   236dc:	bne	236c8 <__assert_fail@plt+0x11104>
   236e0:	mov	r1, r6
   236e4:	add	r0, r4, #8
   236e8:	bl	11f1c <strcmp@plt>
   236ec:	cmp	r0, #0
   236f0:	bne	236c8 <__assert_fail@plt+0x11104>
   236f4:	mov	r0, r4
   236f8:	pop	{r4, r5, r6, pc}
   236fc:	ldr	r3, [pc, #180]	; 237b8 <__assert_fail@plt+0x111f4>
   23700:	ldr	r4, [r3, #4]
   23704:	cmp	r4, #0
   23708:	beq	23748 <__assert_fail@plt+0x11184>
   2370c:	ldrb	r5, [r6]
   23710:	b	23720 <__assert_fail@plt+0x1115c>
   23714:	ldr	r4, [r4, #4]
   23718:	cmp	r4, #0
   2371c:	beq	23748 <__assert_fail@plt+0x11184>
   23720:	ldrb	r3, [r4, #8]
   23724:	cmp	r3, r5
   23728:	bne	23714 <__assert_fail@plt+0x11150>
   2372c:	mov	r1, r6
   23730:	add	r0, r4, #8
   23734:	bl	11f1c <strcmp@plt>
   23738:	cmp	r0, #0
   2373c:	bne	23714 <__assert_fail@plt+0x11150>
   23740:	mov	r0, #0
   23744:	pop	{r4, r5, r6, pc}
   23748:	mov	r0, r6
   2374c:	bl	11ef8 <getpwnam@plt>
   23750:	mov	r5, r0
   23754:	mov	r0, r6
   23758:	bl	122d0 <strlen@plt>
   2375c:	add	r0, r0, #12
   23760:	bic	r0, r0, #3
   23764:	bl	2cc14 <__assert_fail@plt+0x1a650>
   23768:	mov	r4, r0
   2376c:	mov	r1, r6
   23770:	add	r0, r0, #8
   23774:	bl	12180 <strcpy@plt>
   23778:	cmp	r5, #0
   2377c:	beq	237a0 <__assert_fail@plt+0x111dc>
   23780:	ldr	r3, [r5, #8]
   23784:	str	r3, [r4]
   23788:	ldr	r3, [pc, #40]	; 237b8 <__assert_fail@plt+0x111f4>
   2378c:	ldr	r2, [r3]
   23790:	str	r2, [r4, #4]
   23794:	str	r4, [r3]
   23798:	mov	r0, r4
   2379c:	pop	{r4, r5, r6, pc}
   237a0:	ldr	r3, [pc, #16]	; 237b8 <__assert_fail@plt+0x111f4>
   237a4:	ldr	r2, [r3, #4]
   237a8:	str	r2, [r4, #4]
   237ac:	str	r4, [r3, #4]
   237b0:	mov	r0, #0
   237b4:	pop	{r4, r5, r6, pc}
   237b8:	strdeq	r9, [r5], -r4
   237bc:	push	{r4, r5, r6, lr}
   237c0:	ldr	r3, [pc, #140]	; 23854 <__assert_fail@plt+0x11290>
   237c4:	ldr	r4, [r3, #8]
   237c8:	cmp	r4, #0
   237cc:	beq	23808 <__assert_fail@plt+0x11244>
   237d0:	ldr	r3, [r4]
   237d4:	cmp	r0, r3
   237d8:	beq	237f4 <__assert_fail@plt+0x11230>
   237dc:	ldr	r4, [r4, #4]
   237e0:	cmp	r4, #0
   237e4:	beq	23808 <__assert_fail@plt+0x11244>
   237e8:	ldr	r3, [r4]
   237ec:	cmp	r3, r0
   237f0:	bne	237dc <__assert_fail@plt+0x11218>
   237f4:	ldrb	r3, [r4, #8]
   237f8:	cmp	r3, #0
   237fc:	addne	r0, r4, #8
   23800:	moveq	r0, #0
   23804:	pop	{r4, r5, r6, pc}
   23808:	mov	r5, r0
   2380c:	bl	125a0 <getgrgid@plt>
   23810:	cmp	r0, #0
   23814:	ldreq	r6, [pc, #60]	; 23858 <__assert_fail@plt+0x11294>
   23818:	ldrne	r6, [r0]
   2381c:	mov	r0, r6
   23820:	bl	122d0 <strlen@plt>
   23824:	add	r0, r0, #12
   23828:	bic	r0, r0, #3
   2382c:	bl	2cc14 <__assert_fail@plt+0x1a650>
   23830:	mov	r4, r0
   23834:	str	r5, [r0], #8
   23838:	mov	r1, r6
   2383c:	bl	12180 <strcpy@plt>
   23840:	ldr	r3, [pc, #12]	; 23854 <__assert_fail@plt+0x11290>
   23844:	ldr	r2, [r3, #8]
   23848:	str	r2, [r4, #4]
   2384c:	str	r4, [r3, #8]
   23850:	b	237f4 <__assert_fail@plt+0x11230>
   23854:	strdeq	r9, [r5], -r4
   23858:	andeq	r4, r4, r0, lsl r3
   2385c:	push	{r4, r5, r6, lr}
   23860:	mov	r6, r0
   23864:	ldr	r3, [pc, #256]	; 2396c <__assert_fail@plt+0x113a8>
   23868:	ldr	r4, [r3, #8]
   2386c:	cmp	r4, #0
   23870:	beq	238b0 <__assert_fail@plt+0x112ec>
   23874:	ldrb	r5, [r0]
   23878:	b	23888 <__assert_fail@plt+0x112c4>
   2387c:	ldr	r4, [r4, #4]
   23880:	cmp	r4, #0
   23884:	beq	238b0 <__assert_fail@plt+0x112ec>
   23888:	ldrb	r3, [r4, #8]
   2388c:	cmp	r3, r5
   23890:	bne	2387c <__assert_fail@plt+0x112b8>
   23894:	mov	r1, r6
   23898:	add	r0, r4, #8
   2389c:	bl	11f1c <strcmp@plt>
   238a0:	cmp	r0, #0
   238a4:	bne	2387c <__assert_fail@plt+0x112b8>
   238a8:	mov	r0, r4
   238ac:	pop	{r4, r5, r6, pc}
   238b0:	ldr	r3, [pc, #180]	; 2396c <__assert_fail@plt+0x113a8>
   238b4:	ldr	r4, [r3, #12]
   238b8:	cmp	r4, #0
   238bc:	beq	238fc <__assert_fail@plt+0x11338>
   238c0:	ldrb	r5, [r6]
   238c4:	b	238d4 <__assert_fail@plt+0x11310>
   238c8:	ldr	r4, [r4, #4]
   238cc:	cmp	r4, #0
   238d0:	beq	238fc <__assert_fail@plt+0x11338>
   238d4:	ldrb	r3, [r4, #8]
   238d8:	cmp	r3, r5
   238dc:	bne	238c8 <__assert_fail@plt+0x11304>
   238e0:	mov	r1, r6
   238e4:	add	r0, r4, #8
   238e8:	bl	11f1c <strcmp@plt>
   238ec:	cmp	r0, #0
   238f0:	bne	238c8 <__assert_fail@plt+0x11304>
   238f4:	mov	r0, #0
   238f8:	pop	{r4, r5, r6, pc}
   238fc:	mov	r0, r6
   23900:	bl	125ac <getgrnam@plt>
   23904:	mov	r5, r0
   23908:	mov	r0, r6
   2390c:	bl	122d0 <strlen@plt>
   23910:	add	r0, r0, #12
   23914:	bic	r0, r0, #3
   23918:	bl	2cc14 <__assert_fail@plt+0x1a650>
   2391c:	mov	r4, r0
   23920:	mov	r1, r6
   23924:	add	r0, r0, #8
   23928:	bl	12180 <strcpy@plt>
   2392c:	cmp	r5, #0
   23930:	beq	23954 <__assert_fail@plt+0x11390>
   23934:	ldr	r3, [r5, #8]
   23938:	str	r3, [r4]
   2393c:	ldr	r3, [pc, #40]	; 2396c <__assert_fail@plt+0x113a8>
   23940:	ldr	r2, [r3, #8]
   23944:	str	r2, [r4, #4]
   23948:	str	r4, [r3, #8]
   2394c:	mov	r0, r4
   23950:	pop	{r4, r5, r6, pc}
   23954:	ldr	r3, [pc, #16]	; 2396c <__assert_fail@plt+0x113a8>
   23958:	ldr	r2, [r3, #12]
   2395c:	str	r2, [r4, #4]
   23960:	str	r4, [r3, #12]
   23964:	mov	r0, #0
   23968:	pop	{r4, r5, r6, pc}
   2396c:	strdeq	r9, [r5], -r4
   23970:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23974:	add	fp, sp, #28
   23978:	mov	r7, r3
   2397c:	lsr	r8, r2, #30
   23980:	lsl	r3, r2, #2
   23984:	adds	r8, r8, #0
   23988:	movne	r8, #1
   2398c:	cmp	r3, #0
   23990:	movlt	r8, #1
   23994:	cmp	r8, #0
   23998:	movne	r8, #0
   2399c:	bne	23abc <__assert_fail@plt+0x114f8>
   239a0:	mov	r5, r0
   239a4:	mov	r4, r1
   239a8:	mov	r6, r2
   239ac:	mov	r0, r3
   239b0:	cmp	r3, #4016	; 0xfb0
   239b4:	bhi	239f8 <__assert_fail@plt+0x11434>
   239b8:	add	r3, r3, #29
   239bc:	bic	r3, r3, #7
   239c0:	sub	sp, sp, r3
   239c4:	add	r0, sp, #15
   239c8:	bic	r0, r0, #15
   239cc:	cmp	r0, #0
   239d0:	beq	23abc <__assert_fail@plt+0x114f8>
   239d4:	mov	r3, #1
   239d8:	str	r3, [r0, #4]
   239dc:	cmp	r6, #2
   239e0:	bls	23a5c <__assert_fail@plt+0x11498>
   239e4:	mov	r8, r4
   239e8:	add	lr, r0, #8
   239ec:	mov	r3, #0
   239f0:	mov	ip, #2
   239f4:	b	23a1c <__assert_fail@plt+0x11458>
   239f8:	bl	3fc84 <__assert_fail@plt+0x2d6c0>
   239fc:	b	239cc <__assert_fail@plt+0x11408>
   23a00:	add	r3, r3, #1
   23a04:	sub	r2, ip, r3
   23a08:	str	r2, [lr]
   23a0c:	add	ip, ip, #1
   23a10:	add	lr, lr, #4
   23a14:	cmp	r6, ip
   23a18:	beq	23a5c <__assert_fail@plt+0x11498>
   23a1c:	ldrb	r1, [r8, #1]!
   23a20:	ldrb	r2, [r4, r3]
   23a24:	cmp	r2, r1
   23a28:	beq	23a00 <__assert_fail@plt+0x1143c>
   23a2c:	cmp	r3, #0
   23a30:	beq	23a50 <__assert_fail@plt+0x1148c>
   23a34:	ldr	r2, [r0, r3, lsl #2]
   23a38:	sub	r3, r3, r2
   23a3c:	ldrb	r2, [r4, r3]
   23a40:	cmp	r2, r1
   23a44:	beq	23a00 <__assert_fail@plt+0x1143c>
   23a48:	cmp	r3, #0
   23a4c:	bne	23a34 <__assert_fail@plt+0x11470>
   23a50:	str	ip, [lr]
   23a54:	mov	r3, #0
   23a58:	b	23a0c <__assert_fail@plt+0x11448>
   23a5c:	mov	r3, #0
   23a60:	str	r3, [r7]
   23a64:	mov	r1, r5
   23a68:	b	23a7c <__assert_fail@plt+0x114b8>
   23a6c:	add	r3, r3, #1
   23a70:	add	r1, r1, #1
   23a74:	cmp	r6, r3
   23a78:	beq	23ab0 <__assert_fail@plt+0x114ec>
   23a7c:	ldrb	r2, [r1]
   23a80:	cmp	r2, #0
   23a84:	beq	23ab4 <__assert_fail@plt+0x114f0>
   23a88:	ldrb	ip, [r4, r3]
   23a8c:	cmp	ip, r2
   23a90:	beq	23a6c <__assert_fail@plt+0x114a8>
   23a94:	cmp	r3, #0
   23a98:	ldrne	r2, [r0, r3, lsl #2]
   23a9c:	addne	r5, r5, r2
   23aa0:	subne	r3, r3, r2
   23aa4:	addeq	r5, r5, #1
   23aa8:	addeq	r1, r1, #1
   23aac:	b	23a7c <__assert_fail@plt+0x114b8>
   23ab0:	str	r5, [r7]
   23ab4:	bl	3fccc <__assert_fail@plt+0x2d708>
   23ab8:	mov	r8, #1
   23abc:	mov	r0, r8
   23ac0:	sub	sp, fp, #28
   23ac4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23acc:	add	fp, sp, #32
   23ad0:	sub	sp, sp, #140	; 0x8c
   23ad4:	str	r0, [fp, #-172]	; 0xffffff54
   23ad8:	mov	r4, r1
   23adc:	str	r2, [fp, #-168]	; 0xffffff58
   23ae0:	mov	r0, r1
   23ae4:	bl	3fd94 <__assert_fail@plt+0x2d7d0>
   23ae8:	str	r0, [fp, #-160]	; 0xffffff60
   23aec:	mov	r2, #44	; 0x2c
   23af0:	umull	r2, r3, r0, r2
   23af4:	adds	r3, r3, #0
   23af8:	movne	r3, #1
   23afc:	mov	r1, r3
   23b00:	cmp	r2, #0
   23b04:	movlt	r1, #1
   23b08:	str	r1, [fp, #-152]	; 0xffffff68
   23b0c:	cmp	r1, #0
   23b10:	bne	24374 <__assert_fail@plt+0x11db0>
   23b14:	mov	ip, r0
   23b18:	mov	r0, #44	; 0x2c
   23b1c:	mul	r0, r0, ip
   23b20:	cmp	r0, #4016	; 0xfb0
   23b24:	bhi	23b7c <__assert_fail@plt+0x115b8>
   23b28:	add	r3, r0, #29
   23b2c:	bic	r3, r3, #7
   23b30:	sub	sp, sp, r3
   23b34:	add	r3, sp, #15
   23b38:	bic	r9, r3, #15
   23b3c:	cmp	r9, #0
   23b40:	beq	24380 <__assert_fail@plt+0x11dbc>
   23b44:	ldr	r3, [fp, #-160]	; 0xffffff60
   23b48:	add	sl, r3, r3, lsl #2
   23b4c:	add	sl, r9, sl, lsl #3
   23b50:	str	r4, [fp, #-76]	; 0xffffffb4
   23b54:	mov	r3, #0
   23b58:	strb	r3, [fp, #-92]	; 0xffffffa4
   23b5c:	str	r3, [fp, #-88]	; 0xffffffa8
   23b60:	str	r3, [fp, #-84]	; 0xffffffac
   23b64:	strb	r3, [fp, #-80]	; 0xffffffb0
   23b68:	add	r4, r9, #16
   23b6c:	mov	r5, #1
   23b70:	mov	r6, r3
   23b74:	sub	r7, fp, #60	; 0x3c
   23b78:	b	23c84 <__assert_fail@plt+0x116c0>
   23b7c:	bl	3fc84 <__assert_fail@plt+0x2d6c0>
   23b80:	mov	r9, r0
   23b84:	b	23b3c <__assert_fail@plt+0x11578>
   23b88:	ldr	r2, [fp, #-72]	; 0xffffffb8
   23b8c:	mov	r1, r7
   23b90:	mov	r0, r4
   23b94:	bl	12000 <memcpy@plt>
   23b98:	str	r4, [r4, #-16]
   23b9c:	b	23c54 <__assert_fail@plt+0x11690>
   23ba0:	sub	r0, fp, #88	; 0x58
   23ba4:	bl	1203c <mbsinit@plt>
   23ba8:	cmp	r0, #0
   23bac:	beq	23cd4 <__assert_fail@plt+0x11710>
   23bb0:	strb	r5, [fp, #-92]	; 0xffffffa4
   23bb4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   23bb8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   23bbc:	mov	r1, r0
   23bc0:	mov	r0, r8
   23bc4:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   23bc8:	sub	r3, fp, #88	; 0x58
   23bcc:	mov	r2, r0
   23bd0:	mov	r1, r8
   23bd4:	sub	r0, fp, #64	; 0x40
   23bd8:	bl	307cc <__assert_fail@plt+0x1e208>
   23bdc:	str	r0, [fp, #-72]	; 0xffffffb8
   23be0:	cmn	r0, #1
   23be4:	streq	r5, [fp, #-72]	; 0xffffffb8
   23be8:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   23bec:	beq	23c34 <__assert_fail@plt+0x11670>
   23bf0:	cmn	r0, #2
   23bf4:	beq	23ce8 <__assert_fail@plt+0x11724>
   23bf8:	cmp	r0, #0
   23bfc:	bne	23c20 <__assert_fail@plt+0x1165c>
   23c00:	str	r5, [fp, #-72]	; 0xffffffb8
   23c04:	ldr	r3, [fp, #-76]	; 0xffffffb4
   23c08:	ldrb	r3, [r3]
   23c0c:	cmp	r3, #0
   23c10:	bne	23cfc <__assert_fail@plt+0x11738>
   23c14:	ldr	r3, [fp, #-64]	; 0xffffffc0
   23c18:	cmp	r3, #0
   23c1c:	bne	23d10 <__assert_fail@plt+0x1174c>
   23c20:	strb	r5, [fp, #-68]	; 0xffffffbc
   23c24:	sub	r0, fp, #88	; 0x58
   23c28:	bl	1203c <mbsinit@plt>
   23c2c:	cmp	r0, #0
   23c30:	strbne	r6, [fp, #-92]	; 0xffffffa4
   23c34:	strb	r5, [fp, #-80]	; 0xffffffb0
   23c38:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   23c3c:	cmp	r3, #0
   23c40:	bne	23d24 <__assert_fail@plt+0x11760>
   23c44:	ldr	r3, [fp, #-76]	; 0xffffffb4
   23c48:	cmp	r3, r7
   23c4c:	strne	r3, [r4, #-16]
   23c50:	beq	23b88 <__assert_fail@plt+0x115c4>
   23c54:	ldr	r2, [fp, #-72]	; 0xffffffb8
   23c58:	str	r2, [r4, #-12]
   23c5c:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   23c60:	strb	r3, [r4, #-8]
   23c64:	cmp	r3, #0
   23c68:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   23c6c:	strne	r3, [r4, #-4]
   23c70:	ldr	r3, [fp, #-76]	; 0xffffffb4
   23c74:	add	r3, r3, r2
   23c78:	str	r3, [fp, #-76]	; 0xffffffb4
   23c7c:	strb	r6, [fp, #-80]	; 0xffffffb0
   23c80:	add	r4, r4, #40	; 0x28
   23c84:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   23c88:	cmp	r3, #0
   23c8c:	bne	23c38 <__assert_fail@plt+0x11674>
   23c90:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   23c94:	cmp	r3, #0
   23c98:	bne	23bb4 <__assert_fail@plt+0x115f0>
   23c9c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   23ca0:	ldrb	r3, [r1]
   23ca4:	lsr	r2, r3, #5
   23ca8:	and	r3, r3, #31
   23cac:	ldr	r0, [pc, #1752]	; 2438c <__assert_fail@plt+0x11dc8>
   23cb0:	ldr	r2, [r0, r2, lsl #2]
   23cb4:	lsr	r3, r2, r3
   23cb8:	tst	r3, #1
   23cbc:	beq	23ba0 <__assert_fail@plt+0x115dc>
   23cc0:	str	r5, [fp, #-72]	; 0xffffffb8
   23cc4:	ldrb	r3, [r1]
   23cc8:	str	r3, [fp, #-64]	; 0xffffffc0
   23ccc:	strb	r5, [fp, #-68]	; 0xffffffbc
   23cd0:	b	23c34 <__assert_fail@plt+0x11670>
   23cd4:	ldr	r3, [pc, #1716]	; 24390 <__assert_fail@plt+0x11dcc>
   23cd8:	mov	r2, #143	; 0x8f
   23cdc:	ldr	r1, [pc, #1712]	; 24394 <__assert_fail@plt+0x11dd0>
   23ce0:	ldr	r0, [pc, #1712]	; 24398 <__assert_fail@plt+0x11dd4>
   23ce4:	bl	125c4 <__assert_fail@plt>
   23ce8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23cec:	bl	122d0 <strlen@plt>
   23cf0:	str	r0, [fp, #-72]	; 0xffffffb8
   23cf4:	strb	r6, [fp, #-68]	; 0xffffffbc
   23cf8:	b	23c34 <__assert_fail@plt+0x11670>
   23cfc:	ldr	r3, [pc, #1676]	; 24390 <__assert_fail@plt+0x11dcc>
   23d00:	mov	r2, #171	; 0xab
   23d04:	ldr	r1, [pc, #1672]	; 24394 <__assert_fail@plt+0x11dd0>
   23d08:	ldr	r0, [pc, #1676]	; 2439c <__assert_fail@plt+0x11dd8>
   23d0c:	bl	125c4 <__assert_fail@plt>
   23d10:	ldr	r3, [pc, #1656]	; 24390 <__assert_fail@plt+0x11dcc>
   23d14:	mov	r2, #172	; 0xac
   23d18:	ldr	r1, [pc, #1652]	; 24394 <__assert_fail@plt+0x11dd0>
   23d1c:	ldr	r0, [pc, #1660]	; 243a0 <__assert_fail@plt+0x11ddc>
   23d20:	bl	125c4 <__assert_fail@plt>
   23d24:	ldr	r2, [fp, #-64]	; 0xffffffc0
   23d28:	cmp	r2, #0
   23d2c:	bne	23c44 <__assert_fail@plt+0x11680>
   23d30:	str	r3, [fp, #-164]	; 0xffffff5c
   23d34:	mov	r3, #1
   23d38:	str	r3, [sl, #4]
   23d3c:	ldr	r3, [fp, #-160]	; 0xffffff60
   23d40:	cmp	r3, #2
   23d44:	bls	23e28 <__assert_fail@plt+0x11864>
   23d48:	mov	r8, r9
   23d4c:	add	r3, sl, #8
   23d50:	str	r3, [fp, #-156]	; 0xffffff64
   23d54:	mov	r4, #0
   23d58:	mov	r7, #2
   23d5c:	b	23e10 <__assert_fail@plt+0x1184c>
   23d60:	ldr	r2, [r5, #44]	; 0x2c
   23d64:	add	r3, r4, r4, lsl #2
   23d68:	add	r1, r9, r3, lsl #3
   23d6c:	ldr	r1, [r1, #4]
   23d70:	cmp	r2, r1
   23d74:	ldrne	r0, [fp, #-152]	; 0xffffff68
   23d78:	beq	23dc8 <__assert_fail@plt+0x11804>
   23d7c:	cmp	r0, #0
   23d80:	bne	23de0 <__assert_fail@plt+0x1181c>
   23d84:	cmp	r4, #0
   23d88:	beq	23e1c <__assert_fail@plt+0x11858>
   23d8c:	ldr	r3, [sl, r4, lsl #2]
   23d90:	sub	r4, r4, r3
   23d94:	cmp	r6, #0
   23d98:	beq	23d60 <__assert_fail@plt+0x1179c>
   23d9c:	add	r3, r4, r4, lsl #2
   23da0:	add	r3, r9, r3, lsl #3
   23da4:	ldrb	r2, [r3, #8]
   23da8:	cmp	r2, #0
   23dac:	beq	23d60 <__assert_fail@plt+0x1179c>
   23db0:	ldr	r0, [r5, #52]	; 0x34
   23db4:	ldr	r3, [r3, #12]
   23db8:	cmp	r0, r3
   23dbc:	movne	r0, #0
   23dc0:	moveq	r0, #1
   23dc4:	b	23d7c <__assert_fail@plt+0x117b8>
   23dc8:	ldr	r1, [r9, r3, lsl #3]
   23dcc:	ldr	r0, [r5, #40]	; 0x28
   23dd0:	bl	12060 <memcmp@plt>
   23dd4:	clz	r0, r0
   23dd8:	lsr	r0, r0, #5
   23ddc:	b	23d7c <__assert_fail@plt+0x117b8>
   23de0:	add	r4, r4, #1
   23de4:	sub	r3, r7, r4
   23de8:	ldr	r2, [fp, #-156]	; 0xffffff64
   23dec:	str	r3, [r2]
   23df0:	add	r7, r7, #1
   23df4:	add	r8, r8, #40	; 0x28
   23df8:	ldr	r3, [fp, #-156]	; 0xffffff64
   23dfc:	add	r3, r3, #4
   23e00:	str	r3, [fp, #-156]	; 0xffffff64
   23e04:	ldr	r3, [fp, #-160]	; 0xffffff60
   23e08:	cmp	r3, r7
   23e0c:	beq	23e28 <__assert_fail@plt+0x11864>
   23e10:	mov	r5, r8
   23e14:	ldrb	r6, [r8, #48]	; 0x30
   23e18:	b	23d94 <__assert_fail@plt+0x117d0>
   23e1c:	ldr	r3, [fp, #-156]	; 0xffffff64
   23e20:	str	r7, [r3]
   23e24:	b	23df0 <__assert_fail@plt+0x1182c>
   23e28:	mov	r8, #0
   23e2c:	ldr	r3, [fp, #-168]	; 0xffffff58
   23e30:	str	r8, [r3]
   23e34:	ldr	r3, [fp, #-172]	; 0xffffff54
   23e38:	str	r3, [fp, #-132]	; 0xffffff7c
   23e3c:	strb	r8, [fp, #-148]	; 0xffffff6c
   23e40:	str	r8, [fp, #-144]	; 0xffffff70
   23e44:	str	r8, [fp, #-140]	; 0xffffff74
   23e48:	strb	r8, [fp, #-136]	; 0xffffff78
   23e4c:	str	r3, [fp, #-76]	; 0xffffffb4
   23e50:	strb	r8, [fp, #-92]	; 0xffffffa4
   23e54:	str	r8, [fp, #-88]	; 0xffffffa8
   23e58:	str	r8, [fp, #-84]	; 0xffffffac
   23e5c:	strb	r8, [fp, #-80]	; 0xffffffb0
   23e60:	mov	r5, #1
   23e64:	mov	r6, r8
   23e68:	ldr	r7, [pc, #1308]	; 2438c <__assert_fail@plt+0x11dc8>
   23e6c:	str	sl, [fp, #-156]	; 0xffffff64
   23e70:	b	242a0 <__assert_fail@plt+0x11cdc>
   23e74:	ldr	r1, [fp, #-76]	; 0xffffffb4
   23e78:	ldr	r0, [r3]
   23e7c:	bl	12060 <memcmp@plt>
   23e80:	clz	r0, r0
   23e84:	lsr	r0, r0, #5
   23e88:	b	24274 <__assert_fail@plt+0x11cb0>
   23e8c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   23e90:	ldr	r2, [fp, #-168]	; 0xffffff58
   23e94:	str	r3, [r2]
   23e98:	mov	r0, r9
   23e9c:	bl	3fccc <__assert_fail@plt+0x2d708>
   23ea0:	ldr	r0, [fp, #-164]	; 0xffffff5c
   23ea4:	sub	sp, fp, #32
   23ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23eac:	cmp	r8, #0
   23eb0:	beq	24038 <__assert_fail@plt+0x11a74>
   23eb4:	ldr	r3, [fp, #-156]	; 0xffffff64
   23eb8:	ldr	r4, [r3, r8, lsl #2]
   23ebc:	sub	r8, r8, r4
   23ec0:	cmp	r4, #0
   23ec4:	bne	23f8c <__assert_fail@plt+0x119c8>
   23ec8:	b	242a0 <__assert_fail@plt+0x11cdc>
   23ecc:	sub	r0, fp, #144	; 0x90
   23ed0:	bl	1203c <mbsinit@plt>
   23ed4:	cmp	r0, #0
   23ed8:	beq	23fd8 <__assert_fail@plt+0x11a14>
   23edc:	strb	r5, [fp, #-148]	; 0xffffff6c
   23ee0:	ldr	sl, [fp, #-132]	; 0xffffff7c
   23ee4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   23ee8:	mov	r1, r0
   23eec:	mov	r0, sl
   23ef0:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   23ef4:	sub	r3, fp, #144	; 0x90
   23ef8:	mov	r2, r0
   23efc:	mov	r1, sl
   23f00:	sub	r0, fp, #120	; 0x78
   23f04:	bl	307cc <__assert_fail@plt+0x1e208>
   23f08:	str	r0, [fp, #-128]	; 0xffffff80
   23f0c:	cmn	r0, #1
   23f10:	streq	r5, [fp, #-128]	; 0xffffff80
   23f14:	strbeq	r6, [fp, #-124]	; 0xffffff84
   23f18:	beq	23f60 <__assert_fail@plt+0x1199c>
   23f1c:	cmn	r0, #2
   23f20:	beq	23fec <__assert_fail@plt+0x11a28>
   23f24:	cmp	r0, #0
   23f28:	bne	23f4c <__assert_fail@plt+0x11988>
   23f2c:	str	r5, [fp, #-128]	; 0xffffff80
   23f30:	ldr	r3, [fp, #-132]	; 0xffffff7c
   23f34:	ldrb	r3, [r3]
   23f38:	cmp	r3, #0
   23f3c:	bne	24000 <__assert_fail@plt+0x11a3c>
   23f40:	ldr	r3, [fp, #-120]	; 0xffffff88
   23f44:	cmp	r3, #0
   23f48:	bne	24014 <__assert_fail@plt+0x11a50>
   23f4c:	strb	r5, [fp, #-124]	; 0xffffff84
   23f50:	sub	r0, fp, #144	; 0x90
   23f54:	bl	1203c <mbsinit@plt>
   23f58:	cmp	r0, #0
   23f5c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   23f60:	strb	r5, [fp, #-136]	; 0xffffff78
   23f64:	ldrb	r3, [fp, #-124]	; 0xffffff84
   23f68:	cmp	r3, #0
   23f6c:	bne	24028 <__assert_fail@plt+0x11a64>
   23f70:	ldr	r2, [fp, #-128]	; 0xffffff80
   23f74:	ldr	r3, [fp, #-132]	; 0xffffff7c
   23f78:	add	r3, r3, r2
   23f7c:	str	r3, [fp, #-132]	; 0xffffff7c
   23f80:	strb	r6, [fp, #-136]	; 0xffffff78
   23f84:	subs	r4, r4, #1
   23f88:	beq	242a0 <__assert_fail@plt+0x11cdc>
   23f8c:	ldrb	r3, [fp, #-136]	; 0xffffff78
   23f90:	cmp	r3, #0
   23f94:	bne	23f64 <__assert_fail@plt+0x119a0>
   23f98:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   23f9c:	cmp	r3, #0
   23fa0:	bne	23ee0 <__assert_fail@plt+0x1191c>
   23fa4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   23fa8:	ldrb	r3, [r1]
   23fac:	lsr	r2, r3, #5
   23fb0:	and	r3, r3, #31
   23fb4:	ldr	r2, [r7, r2, lsl #2]
   23fb8:	lsr	r3, r2, r3
   23fbc:	tst	r3, #1
   23fc0:	beq	23ecc <__assert_fail@plt+0x11908>
   23fc4:	str	r5, [fp, #-128]	; 0xffffff80
   23fc8:	ldrb	r3, [r1]
   23fcc:	str	r3, [fp, #-120]	; 0xffffff88
   23fd0:	strb	r5, [fp, #-124]	; 0xffffff84
   23fd4:	b	23f60 <__assert_fail@plt+0x1199c>
   23fd8:	ldr	r3, [pc, #944]	; 24390 <__assert_fail@plt+0x11dcc>
   23fdc:	mov	r2, #143	; 0x8f
   23fe0:	ldr	r1, [pc, #940]	; 24394 <__assert_fail@plt+0x11dd0>
   23fe4:	ldr	r0, [pc, #940]	; 24398 <__assert_fail@plt+0x11dd4>
   23fe8:	bl	125c4 <__assert_fail@plt>
   23fec:	ldr	r0, [fp, #-132]	; 0xffffff7c
   23ff0:	bl	122d0 <strlen@plt>
   23ff4:	str	r0, [fp, #-128]	; 0xffffff80
   23ff8:	strb	r6, [fp, #-124]	; 0xffffff84
   23ffc:	b	23f60 <__assert_fail@plt+0x1199c>
   24000:	ldr	r3, [pc, #904]	; 24390 <__assert_fail@plt+0x11dcc>
   24004:	mov	r2, #171	; 0xab
   24008:	ldr	r1, [pc, #900]	; 24394 <__assert_fail@plt+0x11dd0>
   2400c:	ldr	r0, [pc, #904]	; 2439c <__assert_fail@plt+0x11dd8>
   24010:	bl	125c4 <__assert_fail@plt>
   24014:	ldr	r3, [pc, #884]	; 24390 <__assert_fail@plt+0x11dcc>
   24018:	mov	r2, #172	; 0xac
   2401c:	ldr	r1, [pc, #880]	; 24394 <__assert_fail@plt+0x11dd0>
   24020:	ldr	r0, [pc, #888]	; 243a0 <__assert_fail@plt+0x11ddc>
   24024:	bl	125c4 <__assert_fail@plt>
   24028:	ldr	r3, [fp, #-120]	; 0xffffff88
   2402c:	cmp	r3, #0
   24030:	bne	23f70 <__assert_fail@plt+0x119ac>
   24034:	bl	12570 <abort@plt>
   24038:	ldrb	r3, [fp, #-136]	; 0xffffff78
   2403c:	cmp	r3, #0
   24040:	bne	24084 <__assert_fail@plt+0x11ac0>
   24044:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   24048:	cmp	r3, #0
   2404c:	bne	240d0 <__assert_fail@plt+0x11b0c>
   24050:	ldr	r1, [fp, #-132]	; 0xffffff7c
   24054:	ldrb	r3, [r1]
   24058:	lsr	r2, r3, #5
   2405c:	and	r3, r3, #31
   24060:	ldr	r2, [r7, r2, lsl #2]
   24064:	lsr	r3, r2, r3
   24068:	tst	r3, #1
   2406c:	beq	240bc <__assert_fail@plt+0x11af8>
   24070:	str	r5, [fp, #-128]	; 0xffffff80
   24074:	ldrb	r3, [r1]
   24078:	str	r3, [fp, #-120]	; 0xffffff88
   2407c:	strb	r5, [fp, #-124]	; 0xffffff84
   24080:	strb	r5, [fp, #-136]	; 0xffffff78
   24084:	ldrb	r3, [fp, #-124]	; 0xffffff84
   24088:	cmp	r3, #0
   2408c:	bne	241a4 <__assert_fail@plt+0x11be0>
   24090:	ldr	r2, [fp, #-128]	; 0xffffff80
   24094:	ldr	r3, [fp, #-132]	; 0xffffff7c
   24098:	add	r3, r3, r2
   2409c:	str	r3, [fp, #-132]	; 0xffffff7c
   240a0:	strb	r6, [fp, #-136]	; 0xffffff78
   240a4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   240a8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   240ac:	add	r3, r3, r2
   240b0:	str	r3, [fp, #-76]	; 0xffffffb4
   240b4:	strb	r6, [fp, #-80]	; 0xffffffb0
   240b8:	b	242a0 <__assert_fail@plt+0x11cdc>
   240bc:	sub	r0, fp, #144	; 0x90
   240c0:	bl	1203c <mbsinit@plt>
   240c4:	cmp	r0, #0
   240c8:	beq	24154 <__assert_fail@plt+0x11b90>
   240cc:	strb	r5, [fp, #-148]	; 0xffffff6c
   240d0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   240d4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   240d8:	mov	r1, r0
   240dc:	mov	r0, r4
   240e0:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   240e4:	sub	r3, fp, #144	; 0x90
   240e8:	mov	r2, r0
   240ec:	mov	r1, r4
   240f0:	sub	r0, fp, #120	; 0x78
   240f4:	bl	307cc <__assert_fail@plt+0x1e208>
   240f8:	str	r0, [fp, #-128]	; 0xffffff80
   240fc:	cmn	r0, #1
   24100:	streq	r5, [fp, #-128]	; 0xffffff80
   24104:	strbeq	r6, [fp, #-124]	; 0xffffff84
   24108:	beq	24080 <__assert_fail@plt+0x11abc>
   2410c:	cmn	r0, #2
   24110:	beq	24168 <__assert_fail@plt+0x11ba4>
   24114:	cmp	r0, #0
   24118:	bne	2413c <__assert_fail@plt+0x11b78>
   2411c:	str	r5, [fp, #-128]	; 0xffffff80
   24120:	ldr	r3, [fp, #-132]	; 0xffffff7c
   24124:	ldrb	r3, [r3]
   24128:	cmp	r3, #0
   2412c:	bne	2417c <__assert_fail@plt+0x11bb8>
   24130:	ldr	r3, [fp, #-120]	; 0xffffff88
   24134:	cmp	r3, #0
   24138:	bne	24190 <__assert_fail@plt+0x11bcc>
   2413c:	strb	r5, [fp, #-124]	; 0xffffff84
   24140:	sub	r0, fp, #144	; 0x90
   24144:	bl	1203c <mbsinit@plt>
   24148:	cmp	r0, #0
   2414c:	strbne	r6, [fp, #-148]	; 0xffffff6c
   24150:	b	24080 <__assert_fail@plt+0x11abc>
   24154:	ldr	r3, [pc, #564]	; 24390 <__assert_fail@plt+0x11dcc>
   24158:	mov	r2, #143	; 0x8f
   2415c:	ldr	r1, [pc, #560]	; 24394 <__assert_fail@plt+0x11dd0>
   24160:	ldr	r0, [pc, #560]	; 24398 <__assert_fail@plt+0x11dd4>
   24164:	bl	125c4 <__assert_fail@plt>
   24168:	ldr	r0, [fp, #-132]	; 0xffffff7c
   2416c:	bl	122d0 <strlen@plt>
   24170:	str	r0, [fp, #-128]	; 0xffffff80
   24174:	strb	r6, [fp, #-124]	; 0xffffff84
   24178:	b	24080 <__assert_fail@plt+0x11abc>
   2417c:	ldr	r3, [pc, #524]	; 24390 <__assert_fail@plt+0x11dcc>
   24180:	mov	r2, #171	; 0xab
   24184:	ldr	r1, [pc, #520]	; 24394 <__assert_fail@plt+0x11dd0>
   24188:	ldr	r0, [pc, #524]	; 2439c <__assert_fail@plt+0x11dd8>
   2418c:	bl	125c4 <__assert_fail@plt>
   24190:	ldr	r3, [pc, #504]	; 24390 <__assert_fail@plt+0x11dcc>
   24194:	mov	r2, #172	; 0xac
   24198:	ldr	r1, [pc, #500]	; 24394 <__assert_fail@plt+0x11dd0>
   2419c:	ldr	r0, [pc, #508]	; 243a0 <__assert_fail@plt+0x11ddc>
   241a0:	bl	125c4 <__assert_fail@plt>
   241a4:	ldr	r3, [fp, #-120]	; 0xffffff88
   241a8:	cmp	r3, #0
   241ac:	bne	24090 <__assert_fail@plt+0x11acc>
   241b0:	bl	12570 <abort@plt>
   241b4:	sub	r0, fp, #88	; 0x58
   241b8:	bl	1203c <mbsinit@plt>
   241bc:	cmp	r0, #0
   241c0:	beq	242ec <__assert_fail@plt+0x11d28>
   241c4:	strb	r5, [fp, #-92]	; 0xffffffa4
   241c8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   241cc:	bl	12168 <__ctype_get_mb_cur_max@plt>
   241d0:	mov	r1, r0
   241d4:	mov	r0, r4
   241d8:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   241dc:	sub	r3, fp, #88	; 0x58
   241e0:	mov	r2, r0
   241e4:	mov	r1, r4
   241e8:	sub	r0, fp, #64	; 0x40
   241ec:	bl	307cc <__assert_fail@plt+0x1e208>
   241f0:	str	r0, [fp, #-72]	; 0xffffffb8
   241f4:	cmn	r0, #1
   241f8:	streq	r5, [fp, #-72]	; 0xffffffb8
   241fc:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   24200:	beq	24248 <__assert_fail@plt+0x11c84>
   24204:	cmn	r0, #2
   24208:	beq	24300 <__assert_fail@plt+0x11d3c>
   2420c:	cmp	r0, #0
   24210:	bne	24234 <__assert_fail@plt+0x11c70>
   24214:	str	r5, [fp, #-72]	; 0xffffffb8
   24218:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2421c:	ldrb	r3, [r3]
   24220:	cmp	r3, #0
   24224:	bne	24314 <__assert_fail@plt+0x11d50>
   24228:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2422c:	cmp	r3, #0
   24230:	bne	24328 <__assert_fail@plt+0x11d64>
   24234:	strb	r5, [fp, #-68]	; 0xffffffbc
   24238:	sub	r0, fp, #88	; 0x58
   2423c:	bl	1203c <mbsinit@plt>
   24240:	cmp	r0, #0
   24244:	strbne	r6, [fp, #-92]	; 0xffffffa4
   24248:	strb	r5, [fp, #-80]	; 0xffffffb0
   2424c:	ldrb	r2, [fp, #-68]	; 0xffffffbc
   24250:	cmp	r2, #0
   24254:	addeq	r3, r8, r8, lsl #2
   24258:	addeq	r3, r9, r3, lsl #3
   2425c:	bne	2433c <__assert_fail@plt+0x11d78>
   24260:	ldr	r2, [r3, #4]
   24264:	ldr	r1, [fp, #-72]	; 0xffffffb8
   24268:	cmp	r2, r1
   2426c:	ldrne	r0, [fp, #-152]	; 0xffffff68
   24270:	beq	23e74 <__assert_fail@plt+0x118b0>
   24274:	cmp	r0, #0
   24278:	beq	23eac <__assert_fail@plt+0x118e8>
   2427c:	add	r8, r8, #1
   24280:	ldr	r2, [fp, #-72]	; 0xffffffb8
   24284:	ldr	r3, [fp, #-76]	; 0xffffffb4
   24288:	add	r3, r3, r2
   2428c:	str	r3, [fp, #-76]	; 0xffffffb4
   24290:	strb	r6, [fp, #-80]	; 0xffffffb0
   24294:	ldr	r3, [fp, #-160]	; 0xffffff60
   24298:	cmp	r3, r8
   2429c:	beq	23e8c <__assert_fail@plt+0x118c8>
   242a0:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   242a4:	cmp	r3, #0
   242a8:	bne	2424c <__assert_fail@plt+0x11c88>
   242ac:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   242b0:	cmp	r3, #0
   242b4:	bne	241c8 <__assert_fail@plt+0x11c04>
   242b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   242bc:	ldrb	r3, [r1]
   242c0:	lsr	r2, r3, #5
   242c4:	and	r3, r3, #31
   242c8:	ldr	r2, [r7, r2, lsl #2]
   242cc:	lsr	r3, r2, r3
   242d0:	tst	r3, #1
   242d4:	beq	241b4 <__assert_fail@plt+0x11bf0>
   242d8:	str	r5, [fp, #-72]	; 0xffffffb8
   242dc:	ldrb	r3, [r1]
   242e0:	str	r3, [fp, #-64]	; 0xffffffc0
   242e4:	strb	r5, [fp, #-68]	; 0xffffffbc
   242e8:	b	24248 <__assert_fail@plt+0x11c84>
   242ec:	ldr	r3, [pc, #156]	; 24390 <__assert_fail@plt+0x11dcc>
   242f0:	mov	r2, #143	; 0x8f
   242f4:	ldr	r1, [pc, #152]	; 24394 <__assert_fail@plt+0x11dd0>
   242f8:	ldr	r0, [pc, #152]	; 24398 <__assert_fail@plt+0x11dd4>
   242fc:	bl	125c4 <__assert_fail@plt>
   24300:	ldr	r0, [fp, #-76]	; 0xffffffb4
   24304:	bl	122d0 <strlen@plt>
   24308:	str	r0, [fp, #-72]	; 0xffffffb8
   2430c:	strb	r6, [fp, #-68]	; 0xffffffbc
   24310:	b	24248 <__assert_fail@plt+0x11c84>
   24314:	ldr	r3, [pc, #116]	; 24390 <__assert_fail@plt+0x11dcc>
   24318:	mov	r2, #171	; 0xab
   2431c:	ldr	r1, [pc, #112]	; 24394 <__assert_fail@plt+0x11dd0>
   24320:	ldr	r0, [pc, #116]	; 2439c <__assert_fail@plt+0x11dd8>
   24324:	bl	125c4 <__assert_fail@plt>
   24328:	ldr	r3, [pc, #96]	; 24390 <__assert_fail@plt+0x11dcc>
   2432c:	mov	r2, #172	; 0xac
   24330:	ldr	r1, [pc, #92]	; 24394 <__assert_fail@plt+0x11dd0>
   24334:	ldr	r0, [pc, #100]	; 243a0 <__assert_fail@plt+0x11ddc>
   24338:	bl	125c4 <__assert_fail@plt>
   2433c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24340:	cmp	r3, #0
   24344:	beq	23e98 <__assert_fail@plt+0x118d4>
   24348:	add	r3, r8, r8, lsl #2
   2434c:	add	r3, r9, r3, lsl #3
   24350:	ldrb	r1, [r3, #8]
   24354:	tst	r2, r1
   24358:	beq	24260 <__assert_fail@plt+0x11c9c>
   2435c:	ldr	r0, [r3, #12]
   24360:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24364:	cmp	r0, r3
   24368:	movne	r0, #0
   2436c:	moveq	r0, #1
   24370:	b	24274 <__assert_fail@plt+0x11cb0>
   24374:	mov	r3, #0
   24378:	str	r3, [fp, #-164]	; 0xffffff5c
   2437c:	b	23ea0 <__assert_fail@plt+0x118dc>
   24380:	ldr	r3, [fp, #-152]	; 0xffffff68
   24384:	str	r3, [fp, #-164]	; 0xffffff5c
   24388:	b	23ea0 <__assert_fail@plt+0x118dc>
   2438c:	andeq	r8, r4, r8, ror #11
   24390:	strdeq	r6, [r4], -r8
   24394:	andeq	r6, r4, ip, lsl #26
   24398:	andeq	r6, r4, r8, lsl sp
   2439c:	andeq	r6, r4, r0, lsr sp
   243a0:	andeq	r6, r4, r8, asr #26
   243a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   243a8:	sub	sp, sp, #300	; 0x12c
   243ac:	str	r0, [sp, #4]
   243b0:	mov	sl, r1
   243b4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   243b8:	cmp	r0, #1
   243bc:	bls	24f64 <__assert_fail@plt+0x129a0>
   243c0:	str	sl, [sp, #32]
   243c4:	mov	r3, #0
   243c8:	strb	r3, [sp, #16]
   243cc:	str	r3, [sp, #20]
   243d0:	str	r3, [sp, #24]
   243d4:	strb	r3, [sp, #28]
   243d8:	ldrb	r2, [sl]
   243dc:	lsr	r0, r2, #5
   243e0:	and	r1, r2, #31
   243e4:	ldr	r3, [pc, #3320]	; 250e4 <__assert_fail@plt+0x12b20>
   243e8:	ldr	r3, [r3, r0, lsl #2]
   243ec:	lsr	r3, r3, r1
   243f0:	tst	r3, #1
   243f4:	beq	24434 <__assert_fail@plt+0x11e70>
   243f8:	mov	r3, #1
   243fc:	str	r3, [sp, #36]	; 0x24
   24400:	str	r2, [sp, #44]	; 0x2c
   24404:	strb	r3, [sp, #40]	; 0x28
   24408:	mov	r3, #1
   2440c:	strb	r3, [sp, #28]
   24410:	ldrb	r3, [sp, #40]	; 0x28
   24414:	cmp	r3, #0
   24418:	beq	24538 <__assert_fail@plt+0x11f74>
   2441c:	ldr	r3, [sp, #44]	; 0x2c
   24420:	cmp	r3, #0
   24424:	ldreq	r0, [sp, #4]
   24428:	bne	24538 <__assert_fail@plt+0x11f74>
   2442c:	add	sp, sp, #300	; 0x12c
   24430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24434:	add	r0, sp, #20
   24438:	bl	1203c <mbsinit@plt>
   2443c:	cmp	r0, #0
   24440:	beq	244d0 <__assert_fail@plt+0x11f0c>
   24444:	mov	r3, #1
   24448:	strb	r3, [sp, #16]
   2444c:	bl	12168 <__ctype_get_mb_cur_max@plt>
   24450:	mov	r1, r0
   24454:	mov	r0, sl
   24458:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   2445c:	add	r3, sp, #20
   24460:	mov	r2, r0
   24464:	mov	r1, sl
   24468:	add	r0, sp, #44	; 0x2c
   2446c:	bl	307cc <__assert_fail@plt+0x1e208>
   24470:	str	r0, [sp, #36]	; 0x24
   24474:	cmn	r0, #1
   24478:	beq	244e4 <__assert_fail@plt+0x11f20>
   2447c:	cmn	r0, #2
   24480:	beq	244f8 <__assert_fail@plt+0x11f34>
   24484:	cmp	r0, #0
   24488:	bne	244b0 <__assert_fail@plt+0x11eec>
   2448c:	mov	r3, #1
   24490:	str	r3, [sp, #36]	; 0x24
   24494:	ldr	r3, [sp, #32]
   24498:	ldrb	r3, [r3]
   2449c:	cmp	r3, #0
   244a0:	bne	24510 <__assert_fail@plt+0x11f4c>
   244a4:	ldr	r3, [sp, #44]	; 0x2c
   244a8:	cmp	r3, #0
   244ac:	bne	24524 <__assert_fail@plt+0x11f60>
   244b0:	mov	r3, #1
   244b4:	strb	r3, [sp, #40]	; 0x28
   244b8:	add	r0, sp, #20
   244bc:	bl	1203c <mbsinit@plt>
   244c0:	cmp	r0, #0
   244c4:	movne	r3, #0
   244c8:	strbne	r3, [sp, #16]
   244cc:	b	24408 <__assert_fail@plt+0x11e44>
   244d0:	ldr	r3, [pc, #3088]	; 250e8 <__assert_fail@plt+0x12b24>
   244d4:	mov	r2, #143	; 0x8f
   244d8:	ldr	r1, [pc, #3084]	; 250ec <__assert_fail@plt+0x12b28>
   244dc:	ldr	r0, [pc, #3084]	; 250f0 <__assert_fail@plt+0x12b2c>
   244e0:	bl	125c4 <__assert_fail@plt>
   244e4:	mov	r3, #1
   244e8:	str	r3, [sp, #36]	; 0x24
   244ec:	mov	r3, #0
   244f0:	strb	r3, [sp, #40]	; 0x28
   244f4:	b	24408 <__assert_fail@plt+0x11e44>
   244f8:	ldr	r0, [sp, #32]
   244fc:	bl	122d0 <strlen@plt>
   24500:	str	r0, [sp, #36]	; 0x24
   24504:	mov	r3, #0
   24508:	strb	r3, [sp, #40]	; 0x28
   2450c:	b	24408 <__assert_fail@plt+0x11e44>
   24510:	ldr	r3, [pc, #3024]	; 250e8 <__assert_fail@plt+0x12b24>
   24514:	mov	r2, #171	; 0xab
   24518:	ldr	r1, [pc, #3020]	; 250ec <__assert_fail@plt+0x12b28>
   2451c:	ldr	r0, [pc, #3024]	; 250f4 <__assert_fail@plt+0x12b30>
   24520:	bl	125c4 <__assert_fail@plt>
   24524:	ldr	r3, [pc, #3004]	; 250e8 <__assert_fail@plt+0x12b24>
   24528:	mov	r2, #172	; 0xac
   2452c:	ldr	r1, [pc, #3000]	; 250ec <__assert_fail@plt+0x12b28>
   24530:	ldr	r0, [pc, #3008]	; 250f8 <__assert_fail@plt+0x12b34>
   24534:	bl	125c4 <__assert_fail@plt>
   24538:	str	sl, [sp, #88]	; 0x58
   2453c:	mov	r7, #0
   24540:	strb	r7, [sp, #72]	; 0x48
   24544:	str	r7, [sp, #76]	; 0x4c
   24548:	str	r7, [sp, #80]	; 0x50
   2454c:	strb	r7, [sp, #84]	; 0x54
   24550:	ldr	r3, [sp, #4]
   24554:	str	r3, [sp, #144]	; 0x90
   24558:	strb	r7, [sp, #128]	; 0x80
   2455c:	str	r7, [sp, #132]	; 0x84
   24560:	str	r7, [sp, #136]	; 0x88
   24564:	strb	r7, [sp, #140]	; 0x8c
   24568:	str	r7, [sp, #12]
   2456c:	mov	fp, r7
   24570:	mov	r3, #1
   24574:	mov	r4, r3
   24578:	mov	r5, r7
   2457c:	ldr	r8, [pc, #2912]	; 250e4 <__assert_fail@plt+0x12b20>
   24580:	str	sl, [sp, #8]
   24584:	mov	sl, r3
   24588:	b	24e04 <__assert_fail@plt+0x12840>
   2458c:	add	r0, sp, #132	; 0x84
   24590:	bl	1203c <mbsinit@plt>
   24594:	cmp	r0, #0
   24598:	beq	24624 <__assert_fail@plt+0x12060>
   2459c:	strb	r4, [sp, #128]	; 0x80
   245a0:	ldr	r6, [sp, #144]	; 0x90
   245a4:	bl	12168 <__ctype_get_mb_cur_max@plt>
   245a8:	mov	r1, r0
   245ac:	mov	r0, r6
   245b0:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   245b4:	add	r3, sp, #132	; 0x84
   245b8:	mov	r2, r0
   245bc:	mov	r1, r6
   245c0:	add	r0, sp, #156	; 0x9c
   245c4:	bl	307cc <__assert_fail@plt+0x1e208>
   245c8:	str	r0, [sp, #148]	; 0x94
   245cc:	cmn	r0, #1
   245d0:	streq	r4, [sp, #148]	; 0x94
   245d4:	strbeq	r5, [sp, #152]	; 0x98
   245d8:	beq	24e4c <__assert_fail@plt+0x12888>
   245dc:	cmn	r0, #2
   245e0:	beq	24638 <__assert_fail@plt+0x12074>
   245e4:	cmp	r0, #0
   245e8:	bne	2460c <__assert_fail@plt+0x12048>
   245ec:	str	r4, [sp, #148]	; 0x94
   245f0:	ldr	r3, [sp, #144]	; 0x90
   245f4:	ldrb	r3, [r3]
   245f8:	cmp	r3, #0
   245fc:	bne	2464c <__assert_fail@plt+0x12088>
   24600:	ldr	r3, [sp, #156]	; 0x9c
   24604:	cmp	r3, #0
   24608:	bne	24660 <__assert_fail@plt+0x1209c>
   2460c:	strb	r4, [sp, #152]	; 0x98
   24610:	add	r0, sp, #132	; 0x84
   24614:	bl	1203c <mbsinit@plt>
   24618:	cmp	r0, #0
   2461c:	strbne	r5, [sp, #128]	; 0x80
   24620:	b	24e4c <__assert_fail@plt+0x12888>
   24624:	ldr	r3, [pc, #2748]	; 250e8 <__assert_fail@plt+0x12b24>
   24628:	mov	r2, #143	; 0x8f
   2462c:	ldr	r1, [pc, #2744]	; 250ec <__assert_fail@plt+0x12b28>
   24630:	ldr	r0, [pc, #2744]	; 250f0 <__assert_fail@plt+0x12b2c>
   24634:	bl	125c4 <__assert_fail@plt>
   24638:	ldr	r0, [sp, #144]	; 0x90
   2463c:	bl	122d0 <strlen@plt>
   24640:	str	r0, [sp, #148]	; 0x94
   24644:	strb	r5, [sp, #152]	; 0x98
   24648:	b	24e4c <__assert_fail@plt+0x12888>
   2464c:	ldr	r3, [pc, #2708]	; 250e8 <__assert_fail@plt+0x12b24>
   24650:	mov	r2, #171	; 0xab
   24654:	ldr	r1, [pc, #2704]	; 250ec <__assert_fail@plt+0x12b28>
   24658:	ldr	r0, [pc, #2708]	; 250f4 <__assert_fail@plt+0x12b30>
   2465c:	bl	125c4 <__assert_fail@plt>
   24660:	ldr	r3, [pc, #2688]	; 250e8 <__assert_fail@plt+0x12b24>
   24664:	mov	r2, #172	; 0xac
   24668:	ldr	r1, [pc, #2684]	; 250ec <__assert_fail@plt+0x12b28>
   2466c:	ldr	r0, [pc, #2692]	; 250f8 <__assert_fail@plt+0x12b34>
   24670:	bl	125c4 <__assert_fail@plt>
   24674:	ldr	r3, [sp, #156]	; 0x9c
   24678:	cmp	r3, #0
   2467c:	beq	24f5c <__assert_fail@plt+0x12998>
   24680:	cmp	r7, #9
   24684:	movls	r3, #0
   24688:	andhi	r3, sl, #1
   2468c:	cmp	r3, #0
   24690:	beq	250d8 <__assert_fail@plt+0x12b14>
   24694:	add	r3, r7, r7, lsl #2
   24698:	cmp	fp, r3
   2469c:	bcc	24708 <__assert_fail@plt+0x12144>
   246a0:	ldr	r3, [sp, #12]
   246a4:	subs	r6, fp, r3
   246a8:	bne	24800 <__assert_fail@plt+0x1223c>
   246ac:	ldrb	r3, [sp, #84]	; 0x54
   246b0:	cmp	r3, #0
   246b4:	bne	246f8 <__assert_fail@plt+0x12134>
   246b8:	ldrb	r3, [sp, #72]	; 0x48
   246bc:	cmp	r3, #0
   246c0:	bne	248f4 <__assert_fail@plt+0x12330>
   246c4:	ldr	r1, [sp, #88]	; 0x58
   246c8:	ldrb	r3, [r1]
   246cc:	lsr	r2, r3, #5
   246d0:	and	r3, r3, #31
   246d4:	ldr	r2, [r8, r2, lsl #2]
   246d8:	lsr	r3, r2, r3
   246dc:	tst	r3, #1
   246e0:	beq	248e0 <__assert_fail@plt+0x1231c>
   246e4:	str	r4, [sp, #92]	; 0x5c
   246e8:	ldrb	r3, [r1]
   246ec:	str	r3, [sp, #100]	; 0x64
   246f0:	strb	r4, [sp, #96]	; 0x60
   246f4:	strb	r4, [sp, #84]	; 0x54
   246f8:	ldrb	r3, [sp, #96]	; 0x60
   246fc:	cmp	r3, #0
   24700:	streq	fp, [sp, #12]
   24704:	bne	248b4 <__assert_fail@plt+0x122f0>
   24708:	add	r7, r7, #1
   2470c:	add	r6, fp, #1
   24710:	ldrb	r3, [sp, #152]	; 0x98
   24714:	cmp	r3, #0
   24718:	beq	24e78 <__assert_fail@plt+0x128b4>
   2471c:	ldrb	r3, [sp, #40]	; 0x28
   24720:	cmp	r3, #0
   24724:	beq	24e78 <__assert_fail@plt+0x128b4>
   24728:	ldr	r3, [sp, #44]	; 0x2c
   2472c:	ldr	r0, [sp, #156]	; 0x9c
   24730:	cmp	r0, r3
   24734:	movne	r0, #0
   24738:	moveq	r0, #1
   2473c:	b	24e8c <__assert_fail@plt+0x128c8>
   24740:	add	r0, sp, #76	; 0x4c
   24744:	bl	1203c <mbsinit@plt>
   24748:	cmp	r0, #0
   2474c:	beq	2484c <__assert_fail@plt+0x12288>
   24750:	strb	r4, [sp, #72]	; 0x48
   24754:	ldr	r9, [sp, #88]	; 0x58
   24758:	bl	12168 <__ctype_get_mb_cur_max@plt>
   2475c:	mov	r1, r0
   24760:	mov	r0, r9
   24764:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   24768:	add	r3, sp, #76	; 0x4c
   2476c:	mov	r2, r0
   24770:	mov	r1, r9
   24774:	add	r0, sp, #100	; 0x64
   24778:	bl	307cc <__assert_fail@plt+0x1e208>
   2477c:	str	r0, [sp, #92]	; 0x5c
   24780:	cmn	r0, #1
   24784:	streq	r4, [sp, #92]	; 0x5c
   24788:	strbeq	r5, [sp, #96]	; 0x60
   2478c:	beq	247d4 <__assert_fail@plt+0x12210>
   24790:	cmn	r0, #2
   24794:	beq	24860 <__assert_fail@plt+0x1229c>
   24798:	cmp	r0, #0
   2479c:	bne	247c0 <__assert_fail@plt+0x121fc>
   247a0:	str	r4, [sp, #92]	; 0x5c
   247a4:	ldr	r3, [sp, #88]	; 0x58
   247a8:	ldrb	r3, [r3]
   247ac:	cmp	r3, #0
   247b0:	bne	24874 <__assert_fail@plt+0x122b0>
   247b4:	ldr	r3, [sp, #100]	; 0x64
   247b8:	cmp	r3, #0
   247bc:	bne	24888 <__assert_fail@plt+0x122c4>
   247c0:	strb	r4, [sp, #96]	; 0x60
   247c4:	add	r0, sp, #76	; 0x4c
   247c8:	bl	1203c <mbsinit@plt>
   247cc:	cmp	r0, #0
   247d0:	strbne	r5, [sp, #72]	; 0x48
   247d4:	strb	r4, [sp, #84]	; 0x54
   247d8:	ldrb	r3, [sp, #96]	; 0x60
   247dc:	cmp	r3, #0
   247e0:	bne	2489c <__assert_fail@plt+0x122d8>
   247e4:	ldr	r2, [sp, #92]	; 0x5c
   247e8:	ldr	r3, [sp, #88]	; 0x58
   247ec:	add	r3, r3, r2
   247f0:	str	r3, [sp, #88]	; 0x58
   247f4:	strb	r5, [sp, #84]	; 0x54
   247f8:	subs	r6, r6, #1
   247fc:	beq	246b8 <__assert_fail@plt+0x120f4>
   24800:	ldrb	r3, [sp, #84]	; 0x54
   24804:	cmp	r3, #0
   24808:	bne	247d8 <__assert_fail@plt+0x12214>
   2480c:	ldrb	r3, [sp, #72]	; 0x48
   24810:	cmp	r3, #0
   24814:	bne	24754 <__assert_fail@plt+0x12190>
   24818:	ldr	r1, [sp, #88]	; 0x58
   2481c:	ldrb	r3, [r1]
   24820:	lsr	r2, r3, #5
   24824:	and	r3, r3, #31
   24828:	ldr	r2, [r8, r2, lsl #2]
   2482c:	lsr	r3, r2, r3
   24830:	tst	r3, #1
   24834:	beq	24740 <__assert_fail@plt+0x1217c>
   24838:	str	r4, [sp, #92]	; 0x5c
   2483c:	ldrb	r3, [r1]
   24840:	str	r3, [sp, #100]	; 0x64
   24844:	strb	r4, [sp, #96]	; 0x60
   24848:	b	247d4 <__assert_fail@plt+0x12210>
   2484c:	ldr	r3, [pc, #2196]	; 250e8 <__assert_fail@plt+0x12b24>
   24850:	mov	r2, #143	; 0x8f
   24854:	ldr	r1, [pc, #2192]	; 250ec <__assert_fail@plt+0x12b28>
   24858:	ldr	r0, [pc, #2192]	; 250f0 <__assert_fail@plt+0x12b2c>
   2485c:	bl	125c4 <__assert_fail@plt>
   24860:	ldr	r0, [sp, #88]	; 0x58
   24864:	bl	122d0 <strlen@plt>
   24868:	str	r0, [sp, #92]	; 0x5c
   2486c:	strb	r5, [sp, #96]	; 0x60
   24870:	b	247d4 <__assert_fail@plt+0x12210>
   24874:	ldr	r3, [pc, #2156]	; 250e8 <__assert_fail@plt+0x12b24>
   24878:	mov	r2, #171	; 0xab
   2487c:	ldr	r1, [pc, #2152]	; 250ec <__assert_fail@plt+0x12b28>
   24880:	ldr	r0, [pc, #2156]	; 250f4 <__assert_fail@plt+0x12b30>
   24884:	bl	125c4 <__assert_fail@plt>
   24888:	ldr	r3, [pc, #2136]	; 250e8 <__assert_fail@plt+0x12b24>
   2488c:	mov	r2, #172	; 0xac
   24890:	ldr	r1, [pc, #2132]	; 250ec <__assert_fail@plt+0x12b28>
   24894:	ldr	r0, [pc, #2140]	; 250f8 <__assert_fail@plt+0x12b34>
   24898:	bl	125c4 <__assert_fail@plt>
   2489c:	ldr	r3, [sp, #100]	; 0x64
   248a0:	cmp	r3, #0
   248a4:	bne	247e4 <__assert_fail@plt+0x12220>
   248a8:	ldrb	r3, [sp, #84]	; 0x54
   248ac:	cmp	r3, #0
   248b0:	beq	246b8 <__assert_fail@plt+0x120f4>
   248b4:	ldr	r3, [sp, #100]	; 0x64
   248b8:	cmp	r3, #0
   248bc:	bne	249d0 <__assert_fail@plt+0x1240c>
   248c0:	add	r2, sp, #240	; 0xf0
   248c4:	ldr	r1, [sp, #8]
   248c8:	ldr	r0, [sp, #4]
   248cc:	bl	23ac8 <__assert_fail@plt+0x11504>
   248d0:	subs	sl, r0, #0
   248d4:	bne	249c8 <__assert_fail@plt+0x12404>
   248d8:	str	fp, [sp, #12]
   248dc:	b	24708 <__assert_fail@plt+0x12144>
   248e0:	add	r0, sp, #76	; 0x4c
   248e4:	bl	1203c <mbsinit@plt>
   248e8:	cmp	r0, #0
   248ec:	beq	24978 <__assert_fail@plt+0x123b4>
   248f0:	strb	r4, [sp, #72]	; 0x48
   248f4:	ldr	r6, [sp, #88]	; 0x58
   248f8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   248fc:	mov	r1, r0
   24900:	mov	r0, r6
   24904:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   24908:	add	r3, sp, #76	; 0x4c
   2490c:	mov	r2, r0
   24910:	mov	r1, r6
   24914:	add	r0, sp, #100	; 0x64
   24918:	bl	307cc <__assert_fail@plt+0x1e208>
   2491c:	str	r0, [sp, #92]	; 0x5c
   24920:	cmn	r0, #1
   24924:	streq	r4, [sp, #92]	; 0x5c
   24928:	strbeq	r5, [sp, #96]	; 0x60
   2492c:	beq	246f4 <__assert_fail@plt+0x12130>
   24930:	cmn	r0, #2
   24934:	beq	2498c <__assert_fail@plt+0x123c8>
   24938:	cmp	r0, #0
   2493c:	bne	24960 <__assert_fail@plt+0x1239c>
   24940:	str	r4, [sp, #92]	; 0x5c
   24944:	ldr	r3, [sp, #88]	; 0x58
   24948:	ldrb	r3, [r3]
   2494c:	cmp	r3, #0
   24950:	bne	249a0 <__assert_fail@plt+0x123dc>
   24954:	ldr	r3, [sp, #100]	; 0x64
   24958:	cmp	r3, #0
   2495c:	bne	249b4 <__assert_fail@plt+0x123f0>
   24960:	strb	r4, [sp, #96]	; 0x60
   24964:	add	r0, sp, #76	; 0x4c
   24968:	bl	1203c <mbsinit@plt>
   2496c:	cmp	r0, #0
   24970:	strbne	r5, [sp, #72]	; 0x48
   24974:	b	246f4 <__assert_fail@plt+0x12130>
   24978:	ldr	r3, [pc, #1896]	; 250e8 <__assert_fail@plt+0x12b24>
   2497c:	mov	r2, #143	; 0x8f
   24980:	ldr	r1, [pc, #1892]	; 250ec <__assert_fail@plt+0x12b28>
   24984:	ldr	r0, [pc, #1892]	; 250f0 <__assert_fail@plt+0x12b2c>
   24988:	bl	125c4 <__assert_fail@plt>
   2498c:	ldr	r0, [sp, #88]	; 0x58
   24990:	bl	122d0 <strlen@plt>
   24994:	str	r0, [sp, #92]	; 0x5c
   24998:	strb	r5, [sp, #96]	; 0x60
   2499c:	b	246f4 <__assert_fail@plt+0x12130>
   249a0:	ldr	r3, [pc, #1856]	; 250e8 <__assert_fail@plt+0x12b24>
   249a4:	mov	r2, #171	; 0xab
   249a8:	ldr	r1, [pc, #1852]	; 250ec <__assert_fail@plt+0x12b28>
   249ac:	ldr	r0, [pc, #1856]	; 250f4 <__assert_fail@plt+0x12b30>
   249b0:	bl	125c4 <__assert_fail@plt>
   249b4:	ldr	r3, [pc, #1836]	; 250e8 <__assert_fail@plt+0x12b24>
   249b8:	mov	r2, #172	; 0xac
   249bc:	ldr	r1, [pc, #1832]	; 250ec <__assert_fail@plt+0x12b28>
   249c0:	ldr	r0, [pc, #1840]	; 250f8 <__assert_fail@plt+0x12b34>
   249c4:	bl	125c4 <__assert_fail@plt>
   249c8:	ldr	r0, [sp, #240]	; 0xf0
   249cc:	b	2442c <__assert_fail@plt+0x11e68>
   249d0:	str	fp, [sp, #12]
   249d4:	b	24708 <__assert_fail@plt+0x12144>
   249d8:	ldr	r1, [sp, #32]
   249dc:	ldr	r0, [sp, #144]	; 0x90
   249e0:	bl	12060 <memcmp@plt>
   249e4:	clz	r0, r0
   249e8:	lsr	r0, r0, #5
   249ec:	b	24e8c <__assert_fail@plt+0x128c8>
   249f0:	add	r0, sp, #244	; 0xf4
   249f4:	bl	1203c <mbsinit@plt>
   249f8:	cmp	r0, #0
   249fc:	beq	24a88 <__assert_fail@plt+0x124c4>
   24a00:	strb	r4, [sp, #240]	; 0xf0
   24a04:	bl	12168 <__ctype_get_mb_cur_max@plt>
   24a08:	mov	r1, r0
   24a0c:	ldr	r6, [sp, #8]
   24a10:	mov	r0, r6
   24a14:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   24a18:	add	r3, sp, #244	; 0xf4
   24a1c:	mov	r2, r0
   24a20:	mov	r1, r6
   24a24:	add	r0, sp, #268	; 0x10c
   24a28:	bl	307cc <__assert_fail@plt+0x1e208>
   24a2c:	str	r0, [sp, #260]	; 0x104
   24a30:	cmn	r0, #1
   24a34:	streq	r4, [sp, #260]	; 0x104
   24a38:	strbeq	r5, [sp, #264]	; 0x108
   24a3c:	beq	24f10 <__assert_fail@plt+0x1294c>
   24a40:	cmn	r0, #2
   24a44:	beq	24a9c <__assert_fail@plt+0x124d8>
   24a48:	cmp	r0, #0
   24a4c:	bne	24a70 <__assert_fail@plt+0x124ac>
   24a50:	str	r4, [sp, #260]	; 0x104
   24a54:	ldr	r3, [sp, #256]	; 0x100
   24a58:	ldrb	r3, [r3]
   24a5c:	cmp	r3, #0
   24a60:	bne	24ab0 <__assert_fail@plt+0x124ec>
   24a64:	ldr	r3, [sp, #268]	; 0x10c
   24a68:	cmp	r3, #0
   24a6c:	bne	24ac4 <__assert_fail@plt+0x12500>
   24a70:	strb	r4, [sp, #264]	; 0x108
   24a74:	add	r0, sp, #244	; 0xf4
   24a78:	bl	1203c <mbsinit@plt>
   24a7c:	cmp	r0, #0
   24a80:	strbne	r5, [sp, #240]	; 0xf0
   24a84:	b	24f10 <__assert_fail@plt+0x1294c>
   24a88:	ldr	r3, [pc, #1624]	; 250e8 <__assert_fail@plt+0x12b24>
   24a8c:	mov	r2, #143	; 0x8f
   24a90:	ldr	r1, [pc, #1620]	; 250ec <__assert_fail@plt+0x12b28>
   24a94:	ldr	r0, [pc, #1620]	; 250f0 <__assert_fail@plt+0x12b2c>
   24a98:	bl	125c4 <__assert_fail@plt>
   24a9c:	ldr	r0, [sp, #256]	; 0x100
   24aa0:	bl	122d0 <strlen@plt>
   24aa4:	str	r0, [sp, #260]	; 0x104
   24aa8:	strb	r5, [sp, #264]	; 0x108
   24aac:	b	24f10 <__assert_fail@plt+0x1294c>
   24ab0:	ldr	r3, [pc, #1584]	; 250e8 <__assert_fail@plt+0x12b24>
   24ab4:	mov	r2, #171	; 0xab
   24ab8:	ldr	r1, [pc, #1580]	; 250ec <__assert_fail@plt+0x12b28>
   24abc:	ldr	r0, [pc, #1584]	; 250f4 <__assert_fail@plt+0x12b30>
   24ac0:	bl	125c4 <__assert_fail@plt>
   24ac4:	ldr	r3, [pc, #1564]	; 250e8 <__assert_fail@plt+0x12b24>
   24ac8:	mov	r2, #172	; 0xac
   24acc:	ldr	r1, [pc, #1560]	; 250ec <__assert_fail@plt+0x12b28>
   24ad0:	ldr	r0, [pc, #1568]	; 250f8 <__assert_fail@plt+0x12b34>
   24ad4:	bl	125c4 <__assert_fail@plt>
   24ad8:	ldr	r3, [sp, #268]	; 0x10c
   24adc:	cmp	r3, #0
   24ae0:	bne	24f20 <__assert_fail@plt+0x1295c>
   24ae4:	bl	12570 <abort@plt>
   24ae8:	add	r0, sp, #244	; 0xf4
   24aec:	bl	1203c <mbsinit@plt>
   24af0:	cmp	r0, #0
   24af4:	beq	24b80 <__assert_fail@plt+0x125bc>
   24af8:	strb	r4, [sp, #240]	; 0xf0
   24afc:	ldr	r9, [sp, #256]	; 0x100
   24b00:	bl	12168 <__ctype_get_mb_cur_max@plt>
   24b04:	mov	r1, r0
   24b08:	mov	r0, r9
   24b0c:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   24b10:	add	r3, sp, #244	; 0xf4
   24b14:	mov	r2, r0
   24b18:	mov	r1, r9
   24b1c:	add	r0, sp, #268	; 0x10c
   24b20:	bl	307cc <__assert_fail@plt+0x1e208>
   24b24:	str	r0, [sp, #260]	; 0x104
   24b28:	cmn	r0, #1
   24b2c:	streq	r4, [sp, #260]	; 0x104
   24b30:	strbeq	r5, [sp, #264]	; 0x108
   24b34:	beq	24d74 <__assert_fail@plt+0x127b0>
   24b38:	cmn	r0, #2
   24b3c:	beq	24b94 <__assert_fail@plt+0x125d0>
   24b40:	cmp	r0, #0
   24b44:	bne	24b68 <__assert_fail@plt+0x125a4>
   24b48:	str	r4, [sp, #260]	; 0x104
   24b4c:	ldr	r3, [sp, #256]	; 0x100
   24b50:	ldrb	r3, [r3]
   24b54:	cmp	r3, #0
   24b58:	bne	24ba8 <__assert_fail@plt+0x125e4>
   24b5c:	ldr	r3, [sp, #268]	; 0x10c
   24b60:	cmp	r3, #0
   24b64:	bne	24bbc <__assert_fail@plt+0x125f8>
   24b68:	strb	r4, [sp, #264]	; 0x108
   24b6c:	add	r0, sp, #244	; 0xf4
   24b70:	bl	1203c <mbsinit@plt>
   24b74:	cmp	r0, #0
   24b78:	strbne	r5, [sp, #240]	; 0xf0
   24b7c:	b	24d74 <__assert_fail@plt+0x127b0>
   24b80:	ldr	r3, [pc, #1376]	; 250e8 <__assert_fail@plt+0x12b24>
   24b84:	mov	r2, #143	; 0x8f
   24b88:	ldr	r1, [pc, #1372]	; 250ec <__assert_fail@plt+0x12b28>
   24b8c:	ldr	r0, [pc, #1372]	; 250f0 <__assert_fail@plt+0x12b2c>
   24b90:	bl	125c4 <__assert_fail@plt>
   24b94:	ldr	r0, [sp, #256]	; 0x100
   24b98:	bl	122d0 <strlen@plt>
   24b9c:	str	r0, [sp, #260]	; 0x104
   24ba0:	strb	r5, [sp, #264]	; 0x108
   24ba4:	b	24d74 <__assert_fail@plt+0x127b0>
   24ba8:	ldr	r3, [pc, #1336]	; 250e8 <__assert_fail@plt+0x12b24>
   24bac:	mov	r2, #171	; 0xab
   24bb0:	ldr	r1, [pc, #1332]	; 250ec <__assert_fail@plt+0x12b28>
   24bb4:	ldr	r0, [pc, #1336]	; 250f4 <__assert_fail@plt+0x12b30>
   24bb8:	bl	125c4 <__assert_fail@plt>
   24bbc:	ldr	r3, [pc, #1316]	; 250e8 <__assert_fail@plt+0x12b24>
   24bc0:	mov	r2, #172	; 0xac
   24bc4:	ldr	r1, [pc, #1312]	; 250ec <__assert_fail@plt+0x12b28>
   24bc8:	ldr	r0, [pc, #1320]	; 250f8 <__assert_fail@plt+0x12b34>
   24bcc:	bl	125c4 <__assert_fail@plt>
   24bd0:	ldr	r3, [sp, #268]	; 0x10c
   24bd4:	cmp	r3, #0
   24bd8:	bne	24d84 <__assert_fail@plt+0x127c0>
   24bdc:	ldr	r0, [sp, #144]	; 0x90
   24be0:	b	2442c <__assert_fail@plt+0x11e68>
   24be4:	add	r0, sp, #188	; 0xbc
   24be8:	bl	1203c <mbsinit@plt>
   24bec:	cmp	r0, #0
   24bf0:	beq	24c7c <__assert_fail@plt+0x126b8>
   24bf4:	strb	r4, [sp, #184]	; 0xb8
   24bf8:	ldr	r9, [sp, #200]	; 0xc8
   24bfc:	bl	12168 <__ctype_get_mb_cur_max@plt>
   24c00:	mov	r1, r0
   24c04:	mov	r0, r9
   24c08:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   24c0c:	add	r3, sp, #188	; 0xbc
   24c10:	mov	r2, r0
   24c14:	mov	r1, r9
   24c18:	add	r0, sp, #212	; 0xd4
   24c1c:	bl	307cc <__assert_fail@plt+0x1e208>
   24c20:	str	r0, [sp, #204]	; 0xcc
   24c24:	cmn	r0, #1
   24c28:	streq	r4, [sp, #204]	; 0xcc
   24c2c:	strbeq	r5, [sp, #208]	; 0xd0
   24c30:	beq	24dcc <__assert_fail@plt+0x12808>
   24c34:	cmn	r0, #2
   24c38:	beq	24c90 <__assert_fail@plt+0x126cc>
   24c3c:	cmp	r0, #0
   24c40:	bne	24c64 <__assert_fail@plt+0x126a0>
   24c44:	str	r4, [sp, #204]	; 0xcc
   24c48:	ldr	r3, [sp, #200]	; 0xc8
   24c4c:	ldrb	r3, [r3]
   24c50:	cmp	r3, #0
   24c54:	bne	24ca4 <__assert_fail@plt+0x126e0>
   24c58:	ldr	r3, [sp, #212]	; 0xd4
   24c5c:	cmp	r3, #0
   24c60:	bne	24cb8 <__assert_fail@plt+0x126f4>
   24c64:	strb	r4, [sp, #208]	; 0xd0
   24c68:	add	r0, sp, #188	; 0xbc
   24c6c:	bl	1203c <mbsinit@plt>
   24c70:	cmp	r0, #0
   24c74:	strbne	r5, [sp, #184]	; 0xb8
   24c78:	b	24dcc <__assert_fail@plt+0x12808>
   24c7c:	ldr	r3, [pc, #1124]	; 250e8 <__assert_fail@plt+0x12b24>
   24c80:	mov	r2, #143	; 0x8f
   24c84:	ldr	r1, [pc, #1120]	; 250ec <__assert_fail@plt+0x12b28>
   24c88:	ldr	r0, [pc, #1120]	; 250f0 <__assert_fail@plt+0x12b2c>
   24c8c:	bl	125c4 <__assert_fail@plt>
   24c90:	ldr	r0, [sp, #200]	; 0xc8
   24c94:	bl	122d0 <strlen@plt>
   24c98:	str	r0, [sp, #204]	; 0xcc
   24c9c:	strb	r5, [sp, #208]	; 0xd0
   24ca0:	b	24dcc <__assert_fail@plt+0x12808>
   24ca4:	ldr	r3, [pc, #1084]	; 250e8 <__assert_fail@plt+0x12b24>
   24ca8:	mov	r2, #171	; 0xab
   24cac:	ldr	r1, [pc, #1080]	; 250ec <__assert_fail@plt+0x12b28>
   24cb0:	ldr	r0, [pc, #1084]	; 250f4 <__assert_fail@plt+0x12b30>
   24cb4:	bl	125c4 <__assert_fail@plt>
   24cb8:	ldr	r3, [pc, #1064]	; 250e8 <__assert_fail@plt+0x12b24>
   24cbc:	mov	r2, #172	; 0xac
   24cc0:	ldr	r1, [pc, #1060]	; 250ec <__assert_fail@plt+0x12b28>
   24cc4:	ldr	r0, [pc, #1068]	; 250f8 <__assert_fail@plt+0x12b34>
   24cc8:	bl	125c4 <__assert_fail@plt>
   24ccc:	ldr	r3, [sp, #212]	; 0xd4
   24cd0:	cmp	r3, #0
   24cd4:	beq	24f54 <__assert_fail@plt+0x12990>
   24cd8:	ldrb	r3, [sp, #264]	; 0x108
   24cdc:	cmp	r3, #0
   24ce0:	beq	24ddc <__assert_fail@plt+0x12818>
   24ce4:	ldr	r3, [sp, #268]	; 0x10c
   24ce8:	ldr	r0, [sp, #212]	; 0xd4
   24cec:	subs	r0, r0, r3
   24cf0:	movne	r0, #1
   24cf4:	add	r2, r6, #1
   24cf8:	cmp	r0, #0
   24cfc:	bne	24dec <__assert_fail@plt+0x12828>
   24d00:	ldr	r1, [sp, #204]	; 0xcc
   24d04:	ldr	r3, [sp, #200]	; 0xc8
   24d08:	add	r3, r3, r1
   24d0c:	str	r3, [sp, #200]	; 0xc8
   24d10:	strb	r5, [sp, #196]	; 0xc4
   24d14:	ldr	r1, [sp, #260]	; 0x104
   24d18:	ldr	r3, [sp, #256]	; 0x100
   24d1c:	add	r3, r3, r1
   24d20:	str	r3, [sp, #256]	; 0x100
   24d24:	strb	r5, [sp, #252]	; 0xfc
   24d28:	mov	r6, r2
   24d2c:	ldrb	r3, [sp, #252]	; 0xfc
   24d30:	cmp	r3, #0
   24d34:	bne	24d78 <__assert_fail@plt+0x127b4>
   24d38:	ldrb	r3, [sp, #240]	; 0xf0
   24d3c:	cmp	r3, #0
   24d40:	bne	24afc <__assert_fail@plt+0x12538>
   24d44:	ldr	r1, [sp, #256]	; 0x100
   24d48:	ldrb	r3, [r1]
   24d4c:	lsr	r2, r3, #5
   24d50:	and	r3, r3, #31
   24d54:	ldr	r2, [r8, r2, lsl #2]
   24d58:	lsr	r3, r2, r3
   24d5c:	tst	r3, #1
   24d60:	beq	24ae8 <__assert_fail@plt+0x12524>
   24d64:	str	r4, [sp, #260]	; 0x104
   24d68:	ldrb	r3, [r1]
   24d6c:	str	r3, [sp, #268]	; 0x10c
   24d70:	strb	r4, [sp, #264]	; 0x108
   24d74:	strb	r4, [sp, #252]	; 0xfc
   24d78:	ldrb	r3, [sp, #264]	; 0x108
   24d7c:	cmp	r3, #0
   24d80:	bne	24bd0 <__assert_fail@plt+0x1260c>
   24d84:	ldrb	r3, [sp, #196]	; 0xc4
   24d88:	cmp	r3, #0
   24d8c:	bne	24dd0 <__assert_fail@plt+0x1280c>
   24d90:	ldrb	r3, [sp, #184]	; 0xb8
   24d94:	cmp	r3, #0
   24d98:	bne	24bf8 <__assert_fail@plt+0x12634>
   24d9c:	ldr	r1, [sp, #200]	; 0xc8
   24da0:	ldrb	r3, [r1]
   24da4:	lsr	r2, r3, #5
   24da8:	and	r3, r3, #31
   24dac:	ldr	r2, [r8, r2, lsl #2]
   24db0:	lsr	r3, r2, r3
   24db4:	tst	r3, #1
   24db8:	beq	24be4 <__assert_fail@plt+0x12620>
   24dbc:	str	r4, [sp, #204]	; 0xcc
   24dc0:	ldrb	r3, [r1]
   24dc4:	str	r3, [sp, #212]	; 0xd4
   24dc8:	strb	r4, [sp, #208]	; 0xd0
   24dcc:	strb	r4, [sp, #196]	; 0xc4
   24dd0:	ldrb	r3, [sp, #208]	; 0xd0
   24dd4:	cmp	r3, #0
   24dd8:	bne	24ccc <__assert_fail@plt+0x12708>
   24ddc:	ldr	r2, [sp, #204]	; 0xcc
   24de0:	ldr	r3, [sp, #260]	; 0x104
   24de4:	cmp	r2, r3
   24de8:	beq	24f3c <__assert_fail@plt+0x12978>
   24dec:	ldr	r2, [sp, #148]	; 0x94
   24df0:	ldr	r3, [sp, #144]	; 0x90
   24df4:	add	r3, r3, r2
   24df8:	str	r3, [sp, #144]	; 0x90
   24dfc:	strb	r5, [sp, #140]	; 0x8c
   24e00:	mov	fp, r6
   24e04:	ldrb	r3, [sp, #140]	; 0x8c
   24e08:	cmp	r3, #0
   24e0c:	bne	24e50 <__assert_fail@plt+0x1288c>
   24e10:	ldrb	r3, [sp, #128]	; 0x80
   24e14:	cmp	r3, #0
   24e18:	bne	245a0 <__assert_fail@plt+0x11fdc>
   24e1c:	ldr	r1, [sp, #144]	; 0x90
   24e20:	ldrb	r3, [r1]
   24e24:	lsr	r2, r3, #5
   24e28:	and	r3, r3, #31
   24e2c:	ldr	r2, [r8, r2, lsl #2]
   24e30:	lsr	r3, r2, r3
   24e34:	tst	r3, #1
   24e38:	beq	2458c <__assert_fail@plt+0x11fc8>
   24e3c:	str	r4, [sp, #148]	; 0x94
   24e40:	ldrb	r3, [r1]
   24e44:	str	r3, [sp, #156]	; 0x9c
   24e48:	strb	r4, [sp, #152]	; 0x98
   24e4c:	strb	r4, [sp, #140]	; 0x8c
   24e50:	ldrb	r3, [sp, #152]	; 0x98
   24e54:	cmp	r3, #0
   24e58:	bne	24674 <__assert_fail@plt+0x120b0>
   24e5c:	cmp	r7, #9
   24e60:	movls	r3, #0
   24e64:	andhi	r3, sl, #1
   24e68:	cmp	r3, #0
   24e6c:	addeq	r7, r7, #1
   24e70:	addeq	r6, fp, #1
   24e74:	bne	24694 <__assert_fail@plt+0x120d0>
   24e78:	ldr	r2, [sp, #148]	; 0x94
   24e7c:	ldr	r3, [sp, #36]	; 0x24
   24e80:	cmp	r2, r3
   24e84:	movne	r0, r5
   24e88:	beq	249d8 <__assert_fail@plt+0x12414>
   24e8c:	cmp	r0, #0
   24e90:	beq	24dec <__assert_fail@plt+0x12828>
   24e94:	add	ip, sp, #184	; 0xb8
   24e98:	add	lr, sp, #128	; 0x80
   24e9c:	ldm	lr!, {r0, r1, r2, r3}
   24ea0:	stmia	ip!, {r0, r1, r2, r3}
   24ea4:	ldm	lr!, {r0, r1, r2, r3}
   24ea8:	stmia	ip!, {r0, r1, r2, r3}
   24eac:	ldm	lr!, {r0, r1, r2, r3}
   24eb0:	stmia	ip!, {r0, r1, r2, r3}
   24eb4:	ldm	lr, {r0, r1}
   24eb8:	stm	ip, {r0, r1}
   24ebc:	ldr	r2, [sp, #204]	; 0xcc
   24ec0:	ldr	r3, [sp, #200]	; 0xc8
   24ec4:	add	r3, r3, r2
   24ec8:	str	r3, [sp, #200]	; 0xc8
   24ecc:	strb	r5, [sp, #196]	; 0xc4
   24ed0:	ldr	r3, [sp, #8]
   24ed4:	str	r3, [sp, #256]	; 0x100
   24ed8:	strb	r5, [sp, #240]	; 0xf0
   24edc:	str	r5, [sp, #244]	; 0xf4
   24ee0:	str	r5, [sp, #248]	; 0xf8
   24ee4:	strb	r5, [sp, #252]	; 0xfc
   24ee8:	ldrb	r2, [r3]
   24eec:	lsr	r3, r2, #5
   24ef0:	and	r1, r2, #31
   24ef4:	ldr	r3, [r8, r3, lsl #2]
   24ef8:	lsr	r3, r3, r1
   24efc:	tst	r3, #1
   24f00:	beq	249f0 <__assert_fail@plt+0x1242c>
   24f04:	str	r4, [sp, #260]	; 0x104
   24f08:	str	r2, [sp, #268]	; 0x10c
   24f0c:	strb	r4, [sp, #264]	; 0x108
   24f10:	strb	r4, [sp, #252]	; 0xfc
   24f14:	ldrb	r3, [sp, #264]	; 0x108
   24f18:	cmp	r3, #0
   24f1c:	bne	24ad8 <__assert_fail@plt+0x12514>
   24f20:	ldr	r2, [sp, #260]	; 0x104
   24f24:	ldr	r3, [sp, #256]	; 0x100
   24f28:	add	r3, r3, r2
   24f2c:	str	r3, [sp, #256]	; 0x100
   24f30:	strb	r5, [sp, #252]	; 0xfc
   24f34:	add	r6, fp, #2
   24f38:	b	24d2c <__assert_fail@plt+0x12768>
   24f3c:	ldr	r1, [sp, #256]	; 0x100
   24f40:	ldr	r0, [sp, #200]	; 0xc8
   24f44:	bl	12060 <memcmp@plt>
   24f48:	adds	r0, r0, #0
   24f4c:	movne	r0, #1
   24f50:	b	24cf4 <__assert_fail@plt+0x12730>
   24f54:	mov	r0, #0
   24f58:	b	2442c <__assert_fail@plt+0x11e68>
   24f5c:	mov	r0, #0
   24f60:	b	2442c <__assert_fail@plt+0x11e68>
   24f64:	ldrb	r7, [sl]
   24f68:	cmp	r7, #0
   24f6c:	beq	25088 <__assert_fail@plt+0x12ac4>
   24f70:	add	r3, sl, #1
   24f74:	str	r3, [sp, #8]
   24f78:	ldr	r5, [sp, #4]
   24f7c:	ldrb	r3, [r5]
   24f80:	cmp	r3, #0
   24f84:	beq	25090 <__assert_fail@plt+0x12acc>
   24f88:	mov	r8, sl
   24f8c:	mov	r4, #0
   24f90:	mov	r6, r4
   24f94:	mov	r9, r4
   24f98:	mov	fp, #1
   24f9c:	mov	r0, r5
   24fa0:	add	r6, r6, #1
   24fa4:	add	r5, r5, #1
   24fa8:	ldrb	r3, [r0]
   24fac:	cmp	r3, r7
   24fb0:	beq	25024 <__assert_fail@plt+0x12a60>
   24fb4:	str	r5, [sp, #4]
   24fb8:	ldrb	r3, [r5]
   24fbc:	cmp	r3, #0
   24fc0:	beq	25080 <__assert_fail@plt+0x12abc>
   24fc4:	add	r4, r4, #1
   24fc8:	cmp	r6, #9
   24fcc:	movls	r3, #0
   24fd0:	andhi	r3, fp, #1
   24fd4:	cmp	r3, #0
   24fd8:	beq	24f9c <__assert_fail@plt+0x129d8>
   24fdc:	add	r3, r6, r6, lsl #2
   24fe0:	cmp	r3, r4
   24fe4:	bhi	24f9c <__assert_fail@plt+0x129d8>
   24fe8:	cmp	r8, #0
   24fec:	beq	250ac <__assert_fail@plt+0x12ae8>
   24ff0:	sub	r1, r4, r9
   24ff4:	mov	r0, r8
   24ff8:	bl	123d8 <strnlen@plt>
   24ffc:	ldrb	r3, [r8, r0]!
   25000:	cmp	r3, #0
   25004:	beq	250a8 <__assert_fail@plt+0x12ae4>
   25008:	cmp	r8, #0
   2500c:	movne	r9, r4
   25010:	bne	24f9c <__assert_fail@plt+0x129d8>
   25014:	mov	r9, r4
   25018:	b	250ac <__assert_fail@plt+0x12ae8>
   2501c:	ldr	r0, [sp, #240]	; 0xf0
   25020:	b	2442c <__assert_fail@plt+0x11e68>
   25024:	ldrb	r3, [sl, #1]
   25028:	cmp	r3, #0
   2502c:	beq	2442c <__assert_fail@plt+0x11e68>
   25030:	mov	lr, r5
   25034:	ldrb	r2, [r5]
   25038:	cmp	r2, #0
   2503c:	beq	25098 <__assert_fail@plt+0x12ad4>
   25040:	add	r4, r4, #2
   25044:	cmp	r3, r2
   25048:	bne	25078 <__assert_fail@plt+0x12ab4>
   2504c:	mov	ip, r5
   25050:	ldr	r1, [sp, #8]
   25054:	ldrb	r3, [r1, #1]!
   25058:	cmp	r3, #0
   2505c:	beq	2442c <__assert_fail@plt+0x11e68>
   25060:	ldrb	r2, [ip, #1]!
   25064:	cmp	r2, #0
   25068:	beq	250a0 <__assert_fail@plt+0x12adc>
   2506c:	add	r4, r4, #1
   25070:	cmp	r3, r2
   25074:	beq	25054 <__assert_fail@plt+0x12a90>
   25078:	str	lr, [sp, #4]
   2507c:	b	24fc8 <__assert_fail@plt+0x12a04>
   25080:	mov	r0, #0
   25084:	b	2442c <__assert_fail@plt+0x11e68>
   25088:	ldr	r0, [sp, #4]
   2508c:	b	2442c <__assert_fail@plt+0x11e68>
   25090:	mov	r0, #0
   25094:	b	2442c <__assert_fail@plt+0x11e68>
   25098:	mov	r0, #0
   2509c:	b	2442c <__assert_fail@plt+0x11e68>
   250a0:	mov	r0, #0
   250a4:	b	2442c <__assert_fail@plt+0x11e68>
   250a8:	mov	r9, r4
   250ac:	mov	r0, sl
   250b0:	bl	122d0 <strlen@plt>
   250b4:	add	r3, sp, #240	; 0xf0
   250b8:	mov	r2, r0
   250bc:	mov	r1, sl
   250c0:	ldr	r0, [sp, #4]
   250c4:	bl	23970 <__assert_fail@plt+0x113ac>
   250c8:	subs	fp, r0, #0
   250cc:	bne	2501c <__assert_fail@plt+0x12a58>
   250d0:	mov	r8, #0
   250d4:	b	24f9c <__assert_fail@plt+0x129d8>
   250d8:	add	r7, r7, #1
   250dc:	add	r6, fp, #1
   250e0:	b	2471c <__assert_fail@plt+0x12158>
   250e4:	andeq	r8, r4, r8, ror #11
   250e8:	strdeq	r6, [r4], -r8
   250ec:	andeq	r6, r4, ip, lsl #26
   250f0:	andeq	r6, r4, r8, lsl sp
   250f4:	andeq	r6, r4, r0, lsr sp
   250f8:	andeq	r6, r4, r8, asr #26
   250fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25100:	sub	sp, sp, #28
   25104:	mov	r5, r0
   25108:	mov	r4, r2
   2510c:	add	r8, r0, r1
   25110:	bl	12168 <__ctype_get_mb_cur_max@plt>
   25114:	cmp	r0, #1
   25118:	bls	25140 <__assert_fail@plt+0x12b7c>
   2511c:	cmp	r5, r8
   25120:	bcs	252dc <__assert_fail@plt+0x12d18>
   25124:	mov	r6, #0
   25128:	mov	fp, r6
   2512c:	and	sl, r4, #2
   25130:	mvn	r9, #-2147483648	; 0x80000000
   25134:	and	r3, r4, #1
   25138:	str	r3, [sp, #4]
   2513c:	b	2518c <__assert_fail@plt+0x12bc8>
   25140:	cmp	r5, r8
   25144:	movcs	r6, #0
   25148:	bcs	25284 <__assert_fail@plt+0x12cc0>
   2514c:	bl	12288 <__ctype_b_loc@plt>
   25150:	ldr	r1, [r0]
   25154:	mov	r6, #0
   25158:	and	r2, r4, #2
   2515c:	b	2529c <__assert_fail@plt+0x12cd8>
   25160:	cmp	r3, #65	; 0x41
   25164:	bcc	251ac <__assert_fail@plt+0x12be8>
   25168:	cmp	r3, #95	; 0x5f
   2516c:	bls	2517c <__assert_fail@plt+0x12bb8>
   25170:	sub	r3, r3, #97	; 0x61
   25174:	cmp	r3, #29
   25178:	bhi	251ac <__assert_fail@plt+0x12be8>
   2517c:	add	r5, r5, #1
   25180:	add	r6, r6, #1
   25184:	cmp	r8, r5
   25188:	bls	25284 <__assert_fail@plt+0x12cc0>
   2518c:	ldrb	r3, [r5]
   25190:	cmp	r3, #63	; 0x3f
   25194:	bhi	25160 <__assert_fail@plt+0x12b9c>
   25198:	cmp	r3, #37	; 0x25
   2519c:	bcs	2517c <__assert_fail@plt+0x12bb8>
   251a0:	sub	r3, r3, #32
   251a4:	cmp	r3, #3
   251a8:	bls	2517c <__assert_fail@plt+0x12bb8>
   251ac:	add	r7, sp, #24
   251b0:	str	fp, [r7, #-8]!
   251b4:	str	fp, [sp, #20]
   251b8:	b	25224 <__assert_fail@plt+0x12c60>
   251bc:	ldr	r3, [sp, #4]
   251c0:	cmp	r3, #0
   251c4:	bne	25278 <__assert_fail@plt+0x12cb4>
   251c8:	add	r5, r5, #1
   251cc:	add	r6, r6, #1
   251d0:	b	25184 <__assert_fail@plt+0x12bc0>
   251d4:	ldr	r3, [sp, #4]
   251d8:	cmp	r3, #0
   251dc:	bne	25278 <__assert_fail@plt+0x12cb4>
   251e0:	add	r6, r6, #1
   251e4:	mov	r5, r8
   251e8:	b	25184 <__assert_fail@plt+0x12bc0>
   251ec:	cmp	sl, #0
   251f0:	bne	25278 <__assert_fail@plt+0x12cb4>
   251f4:	ldr	r0, [sp, #12]
   251f8:	bl	120e4 <iswcntrl@plt>
   251fc:	cmp	r0, #0
   25200:	bne	25210 <__assert_fail@plt+0x12c4c>
   25204:	cmn	r6, #-2147483647	; 0x80000001
   25208:	beq	25280 <__assert_fail@plt+0x12cbc>
   2520c:	add	r6, r6, #1
   25210:	add	r5, r5, r4
   25214:	mov	r0, r7
   25218:	bl	1203c <mbsinit@plt>
   2521c:	cmp	r0, #0
   25220:	bne	25184 <__assert_fail@plt+0x12bc0>
   25224:	mov	r3, r7
   25228:	sub	r2, r8, r5
   2522c:	mov	r1, r5
   25230:	add	r0, sp, #12
   25234:	bl	307cc <__assert_fail@plt+0x1e208>
   25238:	mov	r4, r0
   2523c:	cmn	r0, #1
   25240:	beq	251bc <__assert_fail@plt+0x12bf8>
   25244:	cmn	r0, #2
   25248:	beq	251d4 <__assert_fail@plt+0x12c10>
   2524c:	cmp	r0, #0
   25250:	moveq	r4, #1
   25254:	ldr	r0, [sp, #12]
   25258:	bl	11f7c <wcwidth@plt>
   2525c:	cmp	r0, #0
   25260:	blt	251ec <__assert_fail@plt+0x12c28>
   25264:	sub	r3, r9, r6
   25268:	cmp	r0, r3
   2526c:	bgt	25280 <__assert_fail@plt+0x12cbc>
   25270:	add	r6, r6, r0
   25274:	b	25210 <__assert_fail@plt+0x12c4c>
   25278:	mvn	r6, #0
   2527c:	b	25284 <__assert_fail@plt+0x12cc0>
   25280:	mvn	r6, #-2147483648	; 0x80000000
   25284:	mov	r0, r6
   25288:	add	sp, sp, #28
   2528c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25290:	add	r6, r6, #1
   25294:	cmp	r8, r5
   25298:	beq	25284 <__assert_fail@plt+0x12cc0>
   2529c:	ldrb	r3, [r5], #1
   252a0:	lsl	r3, r3, #1
   252a4:	ldrh	r3, [r1, r3]
   252a8:	tst	r3, #16384	; 0x4000
   252ac:	beq	252bc <__assert_fail@plt+0x12cf8>
   252b0:	cmn	r6, #-2147483647	; 0x80000001
   252b4:	bne	25290 <__assert_fail@plt+0x12ccc>
   252b8:	b	25284 <__assert_fail@plt+0x12cc0>
   252bc:	cmp	r2, #0
   252c0:	bne	252e4 <__assert_fail@plt+0x12d20>
   252c4:	tst	r3, #2
   252c8:	bne	25294 <__assert_fail@plt+0x12cd0>
   252cc:	cmn	r6, #-2147483647	; 0x80000001
   252d0:	beq	25284 <__assert_fail@plt+0x12cc0>
   252d4:	add	r6, r6, #1
   252d8:	b	25294 <__assert_fail@plt+0x12cd0>
   252dc:	mov	r6, #0
   252e0:	b	25284 <__assert_fail@plt+0x12cc0>
   252e4:	mvn	r6, #0
   252e8:	b	25284 <__assert_fail@plt+0x12cc0>
   252ec:	push	{r4, r5, r6, lr}
   252f0:	mov	r4, r0
   252f4:	mov	r5, r1
   252f8:	bl	122d0 <strlen@plt>
   252fc:	mov	r2, r5
   25300:	mov	r1, r0
   25304:	mov	r0, r4
   25308:	bl	250fc <__assert_fail@plt+0x12b38>
   2530c:	pop	{r4, r5, r6, pc}
   25310:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25314:	mov	r4, r0
   25318:	ldrb	r3, [r0]
   2531c:	sub	r2, r3, #48	; 0x30
   25320:	uxtb	r2, r2
   25324:	cmp	r2, #7
   25328:	bls	253c0 <__assert_fail@plt+0x12dfc>
   2532c:	cmp	r3, #0
   25330:	moveq	r0, #1
   25334:	beq	25364 <__assert_fail@plt+0x12da0>
   25338:	mov	r1, r4
   2533c:	mov	r0, #1
   25340:	and	r2, r3, #239	; 0xef
   25344:	cmp	r3, #43	; 0x2b
   25348:	cmpne	r2, #45	; 0x2d
   2534c:	moveq	r3, #1
   25350:	movne	r3, #0
   25354:	add	r0, r0, r3
   25358:	ldrb	r3, [r1, #1]!
   2535c:	cmp	r3, #0
   25360:	bne	25340 <__assert_fail@plt+0x12d7c>
   25364:	mov	r1, #16
   25368:	bl	2cd0c <__assert_fail@plt+0x1a748>
   2536c:	mov	ip, #0
   25370:	mov	r8, #3
   25374:	mov	sl, #1
   25378:	mov	fp, #2
   2537c:	ldr	r5, [pc, #820]	; 256b8 <__assert_fail@plt+0x130f4>
   25380:	mov	r1, #0
   25384:	mov	r3, r4
   25388:	add	r4, r4, #1
   2538c:	ldrb	r2, [r3]
   25390:	cmp	r2, #97	; 0x61
   25394:	beq	25490 <__assert_fail@plt+0x12ecc>
   25398:	bls	2544c <__assert_fail@plt+0x12e88>
   2539c:	cmp	r2, #111	; 0x6f
   253a0:	beq	25484 <__assert_fail@plt+0x12ec0>
   253a4:	cmp	r2, #117	; 0x75
   253a8:	beq	25470 <__assert_fail@plt+0x12eac>
   253ac:	cmp	r2, #103	; 0x67
   253b0:	beq	25478 <__assert_fail@plt+0x12eb4>
   253b4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   253b8:	mov	r0, #0
   253bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253c0:	mov	r3, r0
   253c4:	mov	r5, #0
   253c8:	ldr	r0, [pc, #744]	; 256b8 <__assert_fail@plt+0x130f4>
   253cc:	lsl	r5, r5, #3
   253d0:	sub	r5, r5, #48	; 0x30
   253d4:	ldrb	r2, [r3], #1
   253d8:	add	r5, r2, r5
   253dc:	cmp	r5, r0
   253e0:	bhi	256a8 <__assert_fail@plt+0x130e4>
   253e4:	ldrb	r1, [r3]
   253e8:	sub	r2, r1, #48	; 0x30
   253ec:	uxtb	r2, r2
   253f0:	cmp	r2, #7
   253f4:	bls	253cc <__assert_fail@plt+0x12e08>
   253f8:	cmp	r1, #0
   253fc:	bne	256b0 <__assert_fail@plt+0x130ec>
   25400:	sub	r3, r3, r4
   25404:	cmp	r3, #4
   25408:	andle	r4, r5, #3072	; 0xc00
   2540c:	mvnle	r4, r4, lsr #10
   25410:	mvnle	r4, r4, lsl #10
   25414:	ldrgt	r4, [pc, #668]	; 256b8 <__assert_fail@plt+0x130f4>
   25418:	mov	r0, #32
   2541c:	bl	2cc14 <__assert_fail@plt+0x1a650>
   25420:	mov	r3, #61	; 0x3d
   25424:	strb	r3, [r0]
   25428:	mov	r3, #1
   2542c:	strb	r3, [r0, #1]
   25430:	ldr	r3, [pc, #640]	; 256b8 <__assert_fail@plt+0x130f4>
   25434:	str	r3, [r0, #4]
   25438:	str	r5, [r0, #8]
   2543c:	str	r4, [r0, #12]
   25440:	mov	r3, #0
   25444:	strb	r3, [r0, #17]
   25448:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2544c:	cmp	r2, #45	; 0x2d
   25450:	beq	25464 <__assert_fail@plt+0x12ea0>
   25454:	cmp	r2, #61	; 0x3d
   25458:	beq	25464 <__assert_fail@plt+0x12ea0>
   2545c:	cmp	r2, #43	; 0x2b
   25460:	bne	253b4 <__assert_fail@plt+0x12df0>
   25464:	add	r6, ip, #1
   25468:	add	ip, r0, ip, lsl #4
   2546c:	b	25554 <__assert_fail@plt+0x12f90>
   25470:	orr	r1, r1, #2496	; 0x9c0
   25474:	b	25384 <__assert_fail@plt+0x12dc0>
   25478:	orr	r1, r1, #1072	; 0x430
   2547c:	orr	r1, r1, #8
   25480:	b	25384 <__assert_fail@plt+0x12dc0>
   25484:	orr	r1, r1, #516	; 0x204
   25488:	orr	r1, r1, #3
   2548c:	b	25384 <__assert_fail@plt+0x12dc0>
   25490:	ldr	r1, [pc, #544]	; 256b8 <__assert_fail@plt+0x130f4>
   25494:	b	25384 <__assert_fail@plt+0x12dc0>
   25498:	sub	lr, lr, #48	; 0x30
   2549c:	cmp	lr, #7
   254a0:	movls	r3, #0
   254a4:	bhi	25584 <__assert_fail@plt+0x12fc0>
   254a8:	lsl	r3, r3, #3
   254ac:	sub	r3, r3, #48	; 0x30
   254b0:	ldrb	lr, [r2], #1
   254b4:	add	r3, lr, r3
   254b8:	cmp	r3, r5
   254bc:	bhi	253b4 <__assert_fail@plt+0x12df0>
   254c0:	ldrb	r7, [r2]
   254c4:	sub	lr, r7, #48	; 0x30
   254c8:	uxtb	lr, lr
   254cc:	cmp	lr, #7
   254d0:	bls	254a8 <__assert_fail@plt+0x12ee4>
   254d4:	cmp	r1, #0
   254d8:	bne	253b4 <__assert_fail@plt+0x12df0>
   254dc:	cmp	r7, #0
   254e0:	cmpne	r7, #44	; 0x2c
   254e4:	bne	253b4 <__assert_fail@plt+0x12df0>
   254e8:	mov	lr, ip
   254ec:	strb	r4, [ip]
   254f0:	strb	sl, [ip, #1]
   254f4:	str	r5, [ip, #4]
   254f8:	str	r3, [ip, #8]
   254fc:	mov	r3, r2
   25500:	mov	r1, r5
   25504:	mov	r7, r5
   25508:	b	25530 <__assert_fail@plt+0x12f6c>
   2550c:	add	r3, r3, #2
   25510:	mov	r7, #56	; 0x38
   25514:	mov	lr, ip
   25518:	strb	r4, [ip]
   2551c:	strb	r8, [ip, #1]
   25520:	str	r1, [ip, #4]
   25524:	str	r7, [ip, #8]
   25528:	cmp	r1, #0
   2552c:	andne	r7, r7, r1
   25530:	str	r7, [lr, #12]
   25534:	ldrb	r2, [r3]
   25538:	add	r4, r6, #1
   2553c:	add	ip, ip, #16
   25540:	and	lr, r2, #239	; 0xef
   25544:	cmp	r2, #43	; 0x2b
   25548:	cmpne	lr, #45	; 0x2d
   2554c:	bne	25680 <__assert_fail@plt+0x130bc>
   25550:	mov	r6, r4
   25554:	add	r2, r3, #1
   25558:	ldrb	r4, [r3]
   2555c:	ldrb	lr, [r3, #1]
   25560:	cmp	lr, #103	; 0x67
   25564:	beq	2550c <__assert_fail@plt+0x12f48>
   25568:	bls	25498 <__assert_fail@plt+0x12ed4>
   2556c:	cmp	lr, #111	; 0x6f
   25570:	beq	25590 <__assert_fail@plt+0x12fcc>
   25574:	cmp	lr, #117	; 0x75
   25578:	addeq	r3, r3, #2
   2557c:	moveq	r7, #448	; 0x1c0
   25580:	beq	25514 <__assert_fail@plt+0x12f50>
   25584:	mov	r9, sl
   25588:	mov	r7, #0
   2558c:	b	255c8 <__assert_fail@plt+0x13004>
   25590:	add	r3, r3, #2
   25594:	mov	r7, #7
   25598:	b	25514 <__assert_fail@plt+0x12f50>
   2559c:	orr	r7, r7, #292	; 0x124
   255a0:	b	255c8 <__assert_fail@plt+0x13004>
   255a4:	orr	r7, r7, #146	; 0x92
   255a8:	b	255c8 <__assert_fail@plt+0x13004>
   255ac:	orr	r7, r7, #73	; 0x49
   255b0:	b	255c8 <__assert_fail@plt+0x13004>
   255b4:	orr	r7, r7, #3072	; 0xc00
   255b8:	b	255c8 <__assert_fail@plt+0x13004>
   255bc:	orr	r7, r7, #512	; 0x200
   255c0:	b	255c8 <__assert_fail@plt+0x13004>
   255c4:	mov	r9, fp
   255c8:	mov	r3, r2
   255cc:	add	r2, r2, #1
   255d0:	ldrb	lr, [r3]
   255d4:	sub	lr, lr, #88	; 0x58
   255d8:	cmp	lr, #32
   255dc:	ldrls	pc, [pc, lr, lsl #2]
   255e0:	b	25668 <__assert_fail@plt+0x130a4>
   255e4:	andeq	r5, r2, r4, asr #11
   255e8:	andeq	r5, r2, r8, ror #12
   255ec:	andeq	r5, r2, r8, ror #12
   255f0:	andeq	r5, r2, r8, ror #12
   255f4:	andeq	r5, r2, r8, ror #12
   255f8:	andeq	r5, r2, r8, ror #12
   255fc:	andeq	r5, r2, r8, ror #12
   25600:	andeq	r5, r2, r8, ror #12
   25604:	andeq	r5, r2, r8, ror #12
   25608:	andeq	r5, r2, r8, ror #12
   2560c:	andeq	r5, r2, r8, ror #12
   25610:	andeq	r5, r2, r8, ror #12
   25614:	andeq	r5, r2, r8, ror #12
   25618:	andeq	r5, r2, r8, ror #12
   2561c:	andeq	r5, r2, r8, ror #12
   25620:	andeq	r5, r2, r8, ror #12
   25624:	andeq	r5, r2, r8, ror #12
   25628:	andeq	r5, r2, r8, ror #12
   2562c:	andeq	r5, r2, r8, ror #12
   25630:	andeq	r5, r2, r8, ror #12
   25634:	andeq	r5, r2, r8, ror #12
   25638:	andeq	r5, r2, r8, ror #12
   2563c:	andeq	r5, r2, r8, ror #12
   25640:	andeq	r5, r2, r8, ror #12
   25644:	andeq	r5, r2, r8, ror #12
   25648:	andeq	r5, r2, r8, ror #12
   2564c:	muleq	r2, ip, r5
   25650:			; <UNDEFINED> instruction: 0x000255b4
   25654:			; <UNDEFINED> instruction: 0x000255bc
   25658:	andeq	r5, r2, r8, ror #12
   2565c:	andeq	r5, r2, r8, ror #12
   25660:	andeq	r5, r2, r4, lsr #11
   25664:	andeq	r5, r2, ip, lsr #11
   25668:	mov	lr, ip
   2566c:	strb	r4, [ip]
   25670:	strb	r9, [ip, #1]
   25674:	str	r1, [ip, #4]
   25678:	str	r7, [ip, #8]
   2567c:	b	25528 <__assert_fail@plt+0x12f64>
   25680:	cmp	r2, #44	; 0x2c
   25684:	addeq	r4, r3, #1
   25688:	moveq	ip, r6
   2568c:	beq	25380 <__assert_fail@plt+0x12dbc>
   25690:	cmp	r2, #0
   25694:	bne	253b4 <__assert_fail@plt+0x12df0>
   25698:	add	r6, r0, r6, lsl #4
   2569c:	mov	r3, #0
   256a0:	strb	r3, [r6, #1]
   256a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256a8:	mov	r0, #0
   256ac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256b0:	mov	r0, #0
   256b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256b8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   256bc:	push	{r4, lr}
   256c0:	sub	sp, sp, #104	; 0x68
   256c4:	mov	r2, sp
   256c8:	mov	r1, r0
   256cc:	mov	r0, #3
   256d0:	bl	12528 <__xstat64@plt>
   256d4:	cmp	r0, #0
   256d8:	movne	r0, #0
   256dc:	bne	25714 <__assert_fail@plt+0x13150>
   256e0:	ldr	r4, [sp, #16]
   256e4:	mov	r0, #32
   256e8:	bl	2cc14 <__assert_fail@plt+0x1a650>
   256ec:	mov	r3, #61	; 0x3d
   256f0:	strb	r3, [r0]
   256f4:	mov	r3, #1
   256f8:	strb	r3, [r0, #1]
   256fc:	ldr	r3, [pc, #24]	; 2571c <__assert_fail@plt+0x13158>
   25700:	str	r3, [r0, #4]
   25704:	str	r4, [r0, #8]
   25708:	str	r3, [r0, #12]
   2570c:	mov	r3, #0
   25710:	strb	r3, [r0, #17]
   25714:	add	sp, sp, #104	; 0x68
   25718:	pop	{r4, pc}
   2571c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   25720:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25724:	ldr	r6, [sp, #32]
   25728:	lsl	r0, r0, #20
   2572c:	lsr	r0, r0, #20
   25730:	ldrb	r9, [r3, #1]
   25734:	cmp	r9, #0
   25738:	beq	25840 <__assert_fail@plt+0x1327c>
   2573c:	cmp	r1, #0
   25740:	movne	r7, #3072	; 0xc00
   25744:	moveq	r7, #0
   25748:	add	r3, r3, #16
   2574c:	mov	r5, #0
   25750:	mvn	r2, r2
   25754:	b	25798 <__assert_fail@plt+0x131d4>
   25758:	and	r9, r0, #73	; 0x49
   2575c:	orrs	r9, r9, r1
   25760:	orrne	ip, ip, #73	; 0x49
   25764:	b	257fc <__assert_fail@plt+0x13238>
   25768:	cmp	lr, #0
   2576c:	mvnne	lr, lr
   25770:	orr	lr, lr, r4
   25774:	mvn	r4, lr
   25778:	lsl	r4, r4, #20
   2577c:	orr	r5, r5, r4, lsr #20
   25780:	and	lr, lr, r0
   25784:	orr	r0, ip, lr
   25788:	add	r3, r3, #16
   2578c:	ldrb	r9, [r3, #-15]
   25790:	cmp	r9, #0
   25794:	beq	25844 <__assert_fail@plt+0x13280>
   25798:	mov	r8, r3
   2579c:	ldr	lr, [r3, #-12]
   257a0:	ldr	r4, [r3, #-4]
   257a4:	bic	r4, r7, r4
   257a8:	ldr	ip, [r3, #-8]
   257ac:	cmp	r9, #2
   257b0:	beq	25758 <__assert_fail@plt+0x13194>
   257b4:	cmp	r9, #3
   257b8:	bne	257fc <__assert_fail@plt+0x13238>
   257bc:	and	ip, ip, r0
   257c0:	and	r9, ip, #292	; 0x124
   257c4:	cmp	r9, #0
   257c8:	movne	r9, #292	; 0x124
   257cc:	moveq	r9, #0
   257d0:	and	sl, ip, #146	; 0x92
   257d4:	cmp	sl, #0
   257d8:	movne	sl, #146	; 0x92
   257dc:	moveq	sl, #0
   257e0:	orr	sl, r9, sl
   257e4:	and	r9, ip, #73	; 0x49
   257e8:	cmp	r9, #0
   257ec:	movne	r9, #73	; 0x49
   257f0:	moveq	r9, #0
   257f4:	orr	r9, r9, sl
   257f8:	orr	ip, r9, ip
   257fc:	cmp	lr, #0
   25800:	movne	r9, lr
   25804:	moveq	r9, r2
   25808:	bic	ip, ip, r4
   2580c:	and	ip, ip, r9
   25810:	ldrb	r8, [r8, #-16]
   25814:	cmp	r8, #45	; 0x2d
   25818:	beq	25834 <__assert_fail@plt+0x13270>
   2581c:	cmp	r8, #61	; 0x3d
   25820:	beq	25768 <__assert_fail@plt+0x131a4>
   25824:	cmp	r8, #43	; 0x2b
   25828:	orreq	r5, r5, ip
   2582c:	orreq	r0, r0, ip
   25830:	b	25788 <__assert_fail@plt+0x131c4>
   25834:	orr	r5, r5, ip
   25838:	bic	r0, r0, ip
   2583c:	b	25788 <__assert_fail@plt+0x131c4>
   25840:	mov	r5, #0
   25844:	cmp	r6, #0
   25848:	strne	r5, [r6]
   2584c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25850:	push	{r4, lr}
   25854:	mov	r5, r0
   25858:	ldr	r3, [pc, #36]	; 25884 <__assert_fail@plt+0x132c0>
   2585c:	ldr	r4, [r3]
   25860:	mov	r2, #5
   25864:	ldr	r1, [pc, #28]	; 25888 <__assert_fail@plt+0x132c4>
   25868:	mov	r0, #0
   2586c:	bl	12084 <dcgettext@plt>
   25870:	mov	r2, r0
   25874:	mov	r1, r5
   25878:	mov	r0, r4
   2587c:	bl	121bc <error@plt>
   25880:	bl	12570 <abort@plt>
   25884:	andeq	r9, r5, ip, ror #9
   25888:	andeq	r6, r4, ip, asr sp
   2588c:	push	{r4, lr}
   25890:	mov	r5, r0
   25894:	ldr	r3, [pc, #36]	; 258c0 <__assert_fail@plt+0x132fc>
   25898:	ldr	r4, [r3]
   2589c:	mov	r2, #5
   258a0:	ldr	r1, [pc, #28]	; 258c4 <__assert_fail@plt+0x13300>
   258a4:	mov	r0, #0
   258a8:	bl	12084 <dcgettext@plt>
   258ac:	mov	r2, r0
   258b0:	mov	r1, r5
   258b4:	mov	r0, r4
   258b8:	bl	121bc <error@plt>
   258bc:	bl	12570 <abort@plt>
   258c0:	andeq	r9, r5, ip, ror #9
   258c4:	andeq	r6, r4, r8, lsl #27
   258c8:	push	{r2, r3}
   258cc:	push	{lr}		; (str lr, [sp, #-4]!)
   258d0:	sub	sp, sp, #12
   258d4:	ldr	r2, [sp, #16]
   258d8:	tst	r2, #64	; 0x40
   258dc:	addne	r3, sp, #24
   258e0:	strne	r3, [sp, #4]
   258e4:	ldrne	r3, [sp, #20]
   258e8:	moveq	r3, #0
   258ec:	bl	122f4 <openat64@plt>
   258f0:	bl	2c6d0 <__assert_fail@plt+0x1a10c>
   258f4:	add	sp, sp, #12
   258f8:	pop	{lr}		; (ldr lr, [sp], #4)
   258fc:	add	sp, sp, #8
   25900:	bx	lr
   25904:	andeq	r0, r0, r0
   25908:	sub	sp, sp, #8
   2590c:	push	{r4, r5, r6, r7, r8, lr}
   25910:	add	r1, sp, #20
   25914:	stmib	r1, {r2, r3}
   25918:	ldrd	r6, [sp, #32]
   2591c:	ldr	r5, [sp, #40]	; 0x28
   25920:	ldr	r3, [r0, #156]	; 0x9c
   25924:	cmp	r3, #0
   25928:	beq	25954 <__assert_fail@plt+0x13390>
   2592c:	ldr	r2, [r0, #48]	; 0x30
   25930:	cmp	r2, #0
   25934:	bne	25954 <__assert_fail@plt+0x13390>
   25938:	ldrb	r2, [r0, #153]	; 0x99
   2593c:	cmp	r2, #0
   25940:	bne	25954 <__assert_fail@plt+0x13390>
   25944:	ldr	r2, [r0, #172]	; 0xac
   25948:	cmp	r5, #2
   2594c:	cmple	r2, #0
   25950:	bne	259a4 <__assert_fail@plt+0x133e0>
   25954:	mov	r4, r0
   25958:	cmp	r5, #4
   2595c:	bgt	259c8 <__assert_fail@plt+0x13404>
   25960:	ldr	r3, [r0, #172]	; 0xac
   25964:	add	r3, r3, #1
   25968:	str	r3, [r0, #172]	; 0xac
   2596c:	cmp	r5, #2
   25970:	bgt	25a30 <__assert_fail@plt+0x1346c>
   25974:	strd	r6, [r0, #72]	; 0x48
   25978:	mov	r2, #0
   2597c:	mov	r3, #0
   25980:	strd	r2, [r0, #80]	; 0x50
   25984:	mov	r3, #0
   25988:	str	r3, [r4, #88]	; 0x58
   2598c:	str	r3, [r4, #92]	; 0x5c
   25990:	mov	r3, #2
   25994:	str	r3, [r4, #28]
   25998:	pop	{r4, r5, r6, r7, r8, lr}
   2599c:	add	sp, sp, #8
   259a0:	bx	lr
   259a4:	mov	r3, #1
   259a8:	strb	r3, [r0, #180]	; 0xb4
   259ac:	add	r4, r0, #32
   259b0:	add	ip, sp, #24
   259b4:	ldm	ip!, {r0, r1, r2, r3}
   259b8:	stmia	r4!, {r0, r1, r2, r3}
   259bc:	ldm	ip, {r0, r1}
   259c0:	stm	r4, {r0, r1}
   259c4:	b	25998 <__assert_fail@plt+0x133d4>
   259c8:	add	r3, r3, #1
   259cc:	str	r3, [r0, #156]	; 0x9c
   259d0:	mov	r2, #100	; 0x64
   259d4:	mov	r3, #0
   259d8:	mov	r0, r6
   259dc:	mov	r1, r7
   259e0:	bl	4226c <__assert_fail@plt+0x2fca8>
   259e4:	strd	r2, [r4, #64]	; 0x40
   259e8:	mov	r2, #100	; 0x64
   259ec:	mov	r3, #0
   259f0:	mov	r0, r6
   259f4:	mov	r1, r7
   259f8:	bl	4226c <__assert_fail@plt+0x2fca8>
   259fc:	mov	r2, #100	; 0x64
   25a00:	mov	r3, #0
   25a04:	bl	4226c <__assert_fail@plt+0x2fca8>
   25a08:	strd	r2, [r4, #56]	; 0x38
   25a0c:	ldr	r2, [pc, #80]	; 25a64 <__assert_fail@plt+0x134a0>
   25a10:	mov	r3, #0
   25a14:	mov	r0, r6
   25a18:	mov	r1, r7
   25a1c:	bl	4226c <__assert_fail@plt+0x2fca8>
   25a20:	strd	r0, [r4, #40]	; 0x28
   25a24:	sub	r5, r5, #4
   25a28:	str	r5, [r4, #48]	; 0x30
   25a2c:	b	25998 <__assert_fail@plt+0x133d4>
   25a30:	mov	r2, #100	; 0x64
   25a34:	mov	r3, #0
   25a38:	mov	r0, r6
   25a3c:	mov	r1, r7
   25a40:	bl	4226c <__assert_fail@plt+0x2fca8>
   25a44:	strd	r0, [r4, #72]	; 0x48
   25a48:	mov	r2, #100	; 0x64
   25a4c:	mov	r3, #0
   25a50:	mov	r0, r6
   25a54:	mov	r1, r7
   25a58:	bl	4226c <__assert_fail@plt+0x2fca8>
   25a5c:	strd	r2, [r4, #80]	; 0x50
   25a60:	b	25984 <__assert_fail@plt+0x133c0>
   25a64:	andeq	r2, r0, r0, lsl r7
   25a68:	sub	sp, sp, #8
   25a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a70:	sub	sp, sp, #28
   25a74:	add	r1, sp, #60	; 0x3c
   25a78:	stmib	r1, {r2, r3}
   25a7c:	ldrd	r6, [sp, #64]	; 0x40
   25a80:	ldrd	r2, [sp, #72]	; 0x48
   25a84:	strd	r2, [sp]
   25a88:	ldrd	r2, [sp, #80]	; 0x50
   25a8c:	strd	r2, [sp, #8]
   25a90:	ldrd	r2, [sp, #88]	; 0x58
   25a94:	strd	r2, [sp, #16]
   25a98:	ldrd	sl, [sp, #96]	; 0x60
   25a9c:	ldrd	r8, [sp, #104]	; 0x68
   25aa0:	ldr	ip, [sp, #112]	; 0x70
   25aa4:	ldr	r1, [sp, #120]	; 0x78
   25aa8:	cmp	r1, #0
   25aac:	blt	25d70 <__assert_fail@plt+0x137ac>
   25ab0:	cmp	ip, #0
   25ab4:	blt	2615c <__assert_fail@plt+0x13b98>
   25ab8:	ldr	lr, [r0, #144]	; 0x90
   25abc:	cmp	lr, #0
   25ac0:	blt	26174 <__assert_fail@plt+0x13bb0>
   25ac4:	mvn	r1, #-2147483648	; 0x80000000
   25ac8:	sub	r1, r1, ip
   25acc:	cmp	lr, r1
   25ad0:	movle	r1, #0
   25ad4:	movgt	r1, #1
   25ad8:	cmp	r1, #0
   25adc:	ldr	r1, [r0, #144]	; 0x90
   25ae0:	add	ip, r1, ip
   25ae4:	str	ip, [r0, #144]	; 0x90
   25ae8:	movne	r1, #1
   25aec:	moveq	r1, #0
   25af0:	cmp	r8, #0
   25af4:	sbcs	r3, r9, #0
   25af8:	blt	26188 <__assert_fail@plt+0x13bc4>
   25afc:	ldrd	r4, [r0, #136]	; 0x88
   25b00:	cmp	r4, #0
   25b04:	sbcs	r3, r5, #0
   25b08:	blt	261b0 <__assert_fail@plt+0x13bec>
   25b0c:	mvn	r2, #0
   25b10:	mvn	r3, #-2147483648	; 0x80000000
   25b14:	subs	r2, r2, r8
   25b18:	sbc	r3, r3, r9
   25b1c:	cmp	r2, r4
   25b20:	sbcs	r3, r3, r5
   25b24:	movlt	ip, #1
   25b28:	movge	ip, #0
   25b2c:	cmp	ip, #0
   25b30:	beq	261d8 <__assert_fail@plt+0x13c14>
   25b34:	ldrd	r4, [r0, #136]	; 0x88
   25b38:	adds	r2, r8, r4
   25b3c:	adc	r3, r9, r5
   25b40:	strd	r2, [r0, #136]	; 0x88
   25b44:	mov	r3, #1
   25b48:	orr	r1, r1, r3
   25b4c:	cmp	sl, #0
   25b50:	sbcs	r3, fp, #0
   25b54:	blt	261f0 <__assert_fail@plt+0x13c2c>
   25b58:	ldrd	r8, [r0, #128]	; 0x80
   25b5c:	cmp	r8, #0
   25b60:	sbcs	r3, r9, #0
   25b64:	blt	26218 <__assert_fail@plt+0x13c54>
   25b68:	mvn	r4, #0
   25b6c:	mvn	r5, #-2147483648	; 0x80000000
   25b70:	subs	r2, r4, sl
   25b74:	sbc	r3, r5, fp
   25b78:	cmp	r2, r8
   25b7c:	sbcs	r3, r3, r9
   25b80:	movlt	r3, #1
   25b84:	movge	r3, #0
   25b88:	cmp	r3, #0
   25b8c:	beq	2623c <__assert_fail@plt+0x13c78>
   25b90:	ldrd	r2, [r0, #128]	; 0x80
   25b94:	adds	r8, sl, r2
   25b98:	adc	r9, fp, r3
   25b9c:	strd	r8, [r0, #128]	; 0x80
   25ba0:	mov	r3, #1
   25ba4:	orr	r1, r3, r1
   25ba8:	ldrd	r2, [sp, #16]
   25bac:	cmp	r2, #0
   25bb0:	sbcs	r3, r3, #0
   25bb4:	blt	26254 <__assert_fail@plt+0x13c90>
   25bb8:	ldrd	r8, [r0, #120]	; 0x78
   25bbc:	cmp	r8, #0
   25bc0:	sbcs	r3, r9, #0
   25bc4:	blt	26280 <__assert_fail@plt+0x13cbc>
   25bc8:	mvn	r4, #0
   25bcc:	mvn	r5, #-2147483648	; 0x80000000
   25bd0:	ldrd	r2, [sp, #16]
   25bd4:	subs	r2, r4, r2
   25bd8:	sbc	r3, r5, r3
   25bdc:	cmp	r2, r8
   25be0:	sbcs	r3, r3, r9
   25be4:	movlt	r3, #1
   25be8:	movge	r3, #0
   25bec:	cmp	r3, #0
   25bf0:	beq	262a8 <__assert_fail@plt+0x13ce4>
   25bf4:	ldrd	r2, [r0, #120]	; 0x78
   25bf8:	ldrd	sl, [sp, #16]
   25bfc:	adds	sl, sl, r2
   25c00:	adc	fp, fp, r3
   25c04:	strd	sl, [r0, #120]	; 0x78
   25c08:	mov	r3, #1
   25c0c:	orr	r1, r3, r1
   25c10:	ldrd	r2, [sp, #8]
   25c14:	cmp	r2, #0
   25c18:	sbcs	r3, r3, #0
   25c1c:	blt	262c4 <__assert_fail@plt+0x13d00>
   25c20:	ldrd	r8, [r0, #112]	; 0x70
   25c24:	cmp	r8, #0
   25c28:	sbcs	r3, r9, #0
   25c2c:	blt	262f8 <__assert_fail@plt+0x13d34>
   25c30:	mvn	r4, #0
   25c34:	mvn	r5, #-2147483648	; 0x80000000
   25c38:	ldrd	r2, [sp, #8]
   25c3c:	subs	r2, r4, r2
   25c40:	sbc	r3, r5, r3
   25c44:	cmp	r2, r8
   25c48:	sbcs	r3, r3, r9
   25c4c:	movlt	r3, #1
   25c50:	movge	r3, #0
   25c54:	cmp	r3, #0
   25c58:	beq	26320 <__assert_fail@plt+0x13d5c>
   25c5c:	ldrd	r2, [r0, #112]	; 0x70
   25c60:	ldrd	r4, [sp, #8]
   25c64:	adds	r4, r4, r2
   25c68:	adc	r5, r5, r3
   25c6c:	mov	r2, r4
   25c70:	mov	r3, r5
   25c74:	strd	r2, [r0, #112]	; 0x70
   25c78:	mov	r3, #1
   25c7c:	orr	r1, r3, r1
   25c80:	ldrd	r2, [sp]
   25c84:	cmp	r2, #0
   25c88:	sbcs	r3, r3, #0
   25c8c:	blt	26344 <__assert_fail@plt+0x13d80>
   25c90:	ldrd	r8, [r0, #104]	; 0x68
   25c94:	cmp	r8, #0
   25c98:	sbcs	r3, r9, #0
   25c9c:	blt	26378 <__assert_fail@plt+0x13db4>
   25ca0:	mvn	r4, #0
   25ca4:	mvn	r5, #-2147483648	; 0x80000000
   25ca8:	ldrd	r2, [sp]
   25cac:	subs	r2, r4, r2
   25cb0:	sbc	r3, r5, r3
   25cb4:	cmp	r2, r8
   25cb8:	sbcs	r3, r3, r9
   25cbc:	movlt	r3, #1
   25cc0:	movge	r3, #0
   25cc4:	cmp	r3, #0
   25cc8:	beq	263a0 <__assert_fail@plt+0x13ddc>
   25ccc:	ldrd	r2, [r0, #104]	; 0x68
   25cd0:	ldrd	r4, [sp]
   25cd4:	adds	r4, r4, r2
   25cd8:	adc	r5, r5, r3
   25cdc:	mov	r2, r4
   25ce0:	mov	r3, r5
   25ce4:	strd	r2, [r0, #104]	; 0x68
   25ce8:	mov	ip, #1
   25cec:	orr	ip, ip, r1
   25cf0:	cmp	r6, #0
   25cf4:	sbcs	r3, r7, #0
   25cf8:	blt	263c4 <__assert_fail@plt+0x13e00>
   25cfc:	ldrd	r8, [r0, #96]	; 0x60
   25d00:	cmp	r8, #0
   25d04:	sbcs	r3, r9, #0
   25d08:	blt	263ec <__assert_fail@plt+0x13e28>
   25d0c:	mvn	r4, #0
   25d10:	mvn	r5, #-2147483648	; 0x80000000
   25d14:	subs	r2, r4, r6
   25d18:	sbc	r3, r5, r7
   25d1c:	cmp	r2, r8
   25d20:	sbcs	r3, r3, r9
   25d24:	movlt	r3, #1
   25d28:	movge	r3, #0
   25d2c:	cmp	r3, #0
   25d30:	beq	26410 <__assert_fail@plt+0x13e4c>
   25d34:	ldrd	r2, [r0, #96]	; 0x60
   25d38:	adds	r4, r2, r6
   25d3c:	adc	r5, r3, r7
   25d40:	strd	r4, [r0, #96]	; 0x60
   25d44:	mov	r1, #1
   25d48:	orr	r1, r1, ip
   25d4c:	cmp	r1, #0
   25d50:	moveq	r3, #1
   25d54:	strbeq	r3, [r0, #153]	; 0x99
   25d58:	moveq	r0, r3
   25d5c:	movne	r0, #0
   25d60:	add	sp, sp, #28
   25d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d68:	add	sp, sp, #8
   25d6c:	bx	lr
   25d70:	ldr	r1, [r0, #144]	; 0x90
   25d74:	mvn	lr, r1
   25d78:	lsr	lr, lr, #31
   25d7c:	cmp	lr, ip, lsr #31
   25d80:	beq	25d94 <__assert_fail@plt+0x137d0>
   25d84:	sub	ip, r1, ip
   25d88:	str	ip, [r0, #144]	; 0x90
   25d8c:	mov	r1, #0
   25d90:	b	25dc0 <__assert_fail@plt+0x137fc>
   25d94:	cmp	r1, #0
   25d98:	blt	25de8 <__assert_fail@plt+0x13824>
   25d9c:	sub	lr, ip, #-2147483647	; 0x80000001
   25da0:	cmp	r1, lr
   25da4:	movle	lr, #0
   25da8:	movgt	lr, #1
   25dac:	cmp	lr, #0
   25db0:	beq	25d84 <__assert_fail@plt+0x137c0>
   25db4:	sub	ip, r1, ip
   25db8:	str	ip, [r0, #144]	; 0x90
   25dbc:	mov	r1, #1
   25dc0:	ldrd	r4, [r0, #136]	; 0x88
   25dc4:	mvn	ip, r5
   25dc8:	lsr	ip, ip, #31
   25dcc:	cmp	ip, r9, lsr #31
   25dd0:	beq	25dfc <__assert_fail@plt+0x13838>
   25dd4:	subs	r2, r4, r8
   25dd8:	sbc	r3, r5, r9
   25ddc:	strd	r2, [r0, #136]	; 0x88
   25de0:	mov	r3, #0
   25de4:	b	25e38 <__assert_fail@plt+0x13874>
   25de8:	add	lr, r1, #-2147483648	; 0x80000000
   25dec:	cmp	lr, ip
   25df0:	movge	lr, #0
   25df4:	movlt	lr, #1
   25df8:	b	25dac <__assert_fail@plt+0x137e8>
   25dfc:	cmp	r4, #0
   25e00:	sbcs	r3, r5, #0
   25e04:	blt	25e6c <__assert_fail@plt+0x138a8>
   25e08:	subs	r2, r8, #1
   25e0c:	sbc	r3, r9, #-2147483648	; 0x80000000
   25e10:	cmp	r2, r4
   25e14:	sbcs	r3, r3, r5
   25e18:	movlt	ip, #1
   25e1c:	movge	ip, #0
   25e20:	cmp	ip, #0
   25e24:	beq	25dd4 <__assert_fail@plt+0x13810>
   25e28:	subs	r2, r4, r8
   25e2c:	sbc	r3, r5, r9
   25e30:	strd	r2, [r0, #136]	; 0x88
   25e34:	mov	r3, #1
   25e38:	orr	r1, r1, r3
   25e3c:	ldrd	r2, [r0, #128]	; 0x80
   25e40:	mvn	ip, r3
   25e44:	lsr	ip, ip, #31
   25e48:	cmp	ip, fp, lsr #31
   25e4c:	beq	25e88 <__assert_fail@plt+0x138c4>
   25e50:	subs	r2, r2, sl
   25e54:	sbc	r3, r3, fp
   25e58:	mov	r8, r2
   25e5c:	mov	r9, r3
   25e60:	strd	r8, [r0, #128]	; 0x80
   25e64:	mov	r3, #0
   25e68:	b	25ecc <__assert_fail@plt+0x13908>
   25e6c:	adds	r2, r4, #0
   25e70:	adc	r3, r5, #-2147483648	; 0x80000000
   25e74:	cmp	r2, r8
   25e78:	sbcs	r3, r3, r9
   25e7c:	movlt	ip, #1
   25e80:	movge	ip, #0
   25e84:	b	25e20 <__assert_fail@plt+0x1385c>
   25e88:	cmp	r2, #0
   25e8c:	sbcs	ip, r3, #0
   25e90:	blt	25f00 <__assert_fail@plt+0x1393c>
   25e94:	subs	r4, sl, #1
   25e98:	sbc	r5, fp, #-2147483648	; 0x80000000
   25e9c:	cmp	r4, r2
   25ea0:	sbcs	ip, r5, r3
   25ea4:	movlt	ip, #1
   25ea8:	movge	ip, #0
   25eac:	cmp	ip, #0
   25eb0:	beq	25e50 <__assert_fail@plt+0x1388c>
   25eb4:	subs	r2, r2, sl
   25eb8:	sbc	r3, r3, fp
   25ebc:	mov	r8, r2
   25ec0:	mov	r9, r3
   25ec4:	strd	r8, [r0, #128]	; 0x80
   25ec8:	mov	r3, #1
   25ecc:	orr	r1, r3, r1
   25ed0:	ldrd	r2, [r0, #120]	; 0x78
   25ed4:	mvn	ip, r3
   25ed8:	lsr	ip, ip, #31
   25edc:	ldr	lr, [sp, #20]
   25ee0:	cmp	ip, lr, lsr #31
   25ee4:	beq	25f1c <__assert_fail@plt+0x13958>
   25ee8:	ldrd	sl, [sp, #16]
   25eec:	subs	sl, r2, sl
   25ef0:	sbc	fp, r3, fp
   25ef4:	strd	sl, [r0, #120]	; 0x78
   25ef8:	mov	r3, #0
   25efc:	b	25f60 <__assert_fail@plt+0x1399c>
   25f00:	adds	r4, r2, #0
   25f04:	adc	r5, r3, #-2147483648	; 0x80000000
   25f08:	cmp	r4, sl
   25f0c:	sbcs	ip, r5, fp
   25f10:	movlt	ip, #1
   25f14:	movge	ip, #0
   25f18:	b	25eac <__assert_fail@plt+0x138e8>
   25f1c:	cmp	r2, #0
   25f20:	sbcs	ip, r3, #0
   25f24:	blt	25f9c <__assert_fail@plt+0x139d8>
   25f28:	ldrd	r4, [sp, #16]
   25f2c:	subs	r4, r4, #1
   25f30:	sbc	r5, r5, #-2147483648	; 0x80000000
   25f34:	cmp	r4, r2
   25f38:	sbcs	ip, r5, r3
   25f3c:	movlt	ip, #1
   25f40:	movge	ip, #0
   25f44:	cmp	ip, #0
   25f48:	beq	25ee8 <__assert_fail@plt+0x13924>
   25f4c:	ldrd	sl, [sp, #16]
   25f50:	subs	sl, r2, sl
   25f54:	sbc	fp, r3, fp
   25f58:	strd	sl, [r0, #120]	; 0x78
   25f5c:	mov	r3, #1
   25f60:	orr	r1, r3, r1
   25f64:	ldrd	r2, [r0, #112]	; 0x70
   25f68:	mvn	ip, r3
   25f6c:	lsr	ip, ip, #31
   25f70:	ldr	lr, [sp, #12]
   25f74:	cmp	ip, lr, lsr #31
   25f78:	beq	25fbc <__assert_fail@plt+0x139f8>
   25f7c:	ldrd	r4, [sp, #8]
   25f80:	subs	r4, r2, r4
   25f84:	sbc	r5, r3, r5
   25f88:	mov	r2, r4
   25f8c:	mov	r3, r5
   25f90:	strd	r2, [r0, #112]	; 0x70
   25f94:	mov	ip, #0
   25f98:	b	26008 <__assert_fail@plt+0x13a44>
   25f9c:	adds	r4, r2, #0
   25fa0:	adc	r5, r3, #-2147483648	; 0x80000000
   25fa4:	ldrd	r8, [sp, #16]
   25fa8:	cmp	r4, r8
   25fac:	sbcs	ip, r5, r9
   25fb0:	movlt	ip, #1
   25fb4:	movge	ip, #0
   25fb8:	b	25f44 <__assert_fail@plt+0x13980>
   25fbc:	cmp	r2, #0
   25fc0:	sbcs	ip, r3, #0
   25fc4:	blt	26044 <__assert_fail@plt+0x13a80>
   25fc8:	ldrd	r4, [sp, #8]
   25fcc:	subs	r4, r4, #1
   25fd0:	sbc	r5, r5, #-2147483648	; 0x80000000
   25fd4:	cmp	r4, r2
   25fd8:	sbcs	ip, r5, r3
   25fdc:	movlt	ip, #1
   25fe0:	movge	ip, #0
   25fe4:	cmp	ip, #0
   25fe8:	beq	25f7c <__assert_fail@plt+0x139b8>
   25fec:	ldrd	r4, [sp, #8]
   25ff0:	subs	r4, r2, r4
   25ff4:	sbc	r5, r3, r5
   25ff8:	mov	r2, r4
   25ffc:	mov	r3, r5
   26000:	strd	r2, [r0, #112]	; 0x70
   26004:	mov	ip, #1
   26008:	orr	r1, ip, r1
   2600c:	ldrd	r2, [r0, #104]	; 0x68
   26010:	mvn	ip, r3
   26014:	lsr	ip, ip, #31
   26018:	ldr	lr, [sp, #4]
   2601c:	cmp	ip, lr, lsr #31
   26020:	beq	26064 <__assert_fail@plt+0x13aa0>
   26024:	ldrd	r4, [sp]
   26028:	subs	r4, r2, r4
   2602c:	sbc	r5, r3, r5
   26030:	mov	r2, r4
   26034:	mov	r3, r5
   26038:	strd	r2, [r0, #104]	; 0x68
   2603c:	mov	ip, #0
   26040:	b	260b0 <__assert_fail@plt+0x13aec>
   26044:	adds	r4, r2, #0
   26048:	adc	r5, r3, #-2147483648	; 0x80000000
   2604c:	ldrd	r8, [sp, #8]
   26050:	cmp	r4, r8
   26054:	sbcs	ip, r5, r9
   26058:	movlt	ip, #1
   2605c:	movge	ip, #0
   26060:	b	25fe4 <__assert_fail@plt+0x13a20>
   26064:	cmp	r2, #0
   26068:	sbcs	ip, r3, #0
   2606c:	blt	260dc <__assert_fail@plt+0x13b18>
   26070:	ldrd	r4, [sp]
   26074:	subs	r4, r4, #1
   26078:	sbc	r5, r5, #-2147483648	; 0x80000000
   2607c:	cmp	r4, r2
   26080:	sbcs	ip, r5, r3
   26084:	movlt	ip, #1
   26088:	movge	ip, #0
   2608c:	cmp	ip, #0
   26090:	beq	26024 <__assert_fail@plt+0x13a60>
   26094:	ldrd	r4, [sp]
   26098:	subs	r4, r2, r4
   2609c:	sbc	r5, r3, r5
   260a0:	mov	r2, r4
   260a4:	mov	r3, r5
   260a8:	strd	r2, [r0, #104]	; 0x68
   260ac:	mov	ip, #1
   260b0:	orr	ip, ip, r1
   260b4:	ldrd	r8, [r0, #96]	; 0x60
   260b8:	mvn	r1, r9
   260bc:	lsr	r1, r1, #31
   260c0:	cmp	r1, r7, lsr #31
   260c4:	beq	260fc <__assert_fail@plt+0x13b38>
   260c8:	subs	r2, r8, r6
   260cc:	sbc	r3, r9, r7
   260d0:	strd	r2, [r0, #96]	; 0x60
   260d4:	mov	r1, #0
   260d8:	b	26138 <__assert_fail@plt+0x13b74>
   260dc:	adds	r4, r2, #0
   260e0:	adc	r5, r3, #-2147483648	; 0x80000000
   260e4:	ldrd	r8, [sp]
   260e8:	cmp	r4, r8
   260ec:	sbcs	ip, r5, r9
   260f0:	movlt	ip, #1
   260f4:	movge	ip, #0
   260f8:	b	2608c <__assert_fail@plt+0x13ac8>
   260fc:	cmp	r8, #0
   26100:	sbcs	r3, r9, #0
   26104:	blt	26140 <__assert_fail@plt+0x13b7c>
   26108:	subs	r4, r6, #1
   2610c:	sbc	r5, r7, #-2147483648	; 0x80000000
   26110:	cmp	r4, r8
   26114:	sbcs	r3, r5, r9
   26118:	movlt	r1, #1
   2611c:	movge	r1, #0
   26120:	cmp	r1, #0
   26124:	beq	260c8 <__assert_fail@plt+0x13b04>
   26128:	subs	r2, r8, r6
   2612c:	sbc	r3, r9, r7
   26130:	strd	r2, [r0, #96]	; 0x60
   26134:	mov	r1, #1
   26138:	orr	r1, r1, ip
   2613c:	b	25d4c <__assert_fail@plt+0x13788>
   26140:	adds	r4, r8, #0
   26144:	adc	r5, r9, #-2147483648	; 0x80000000
   26148:	cmp	r4, r6
   2614c:	sbcs	r3, r5, r7
   26150:	movlt	r1, #1
   26154:	movge	r1, #0
   26158:	b	26120 <__assert_fail@plt+0x13b5c>
   2615c:	rsb	r1, ip, #-2147483648	; 0x80000000
   26160:	ldr	lr, [r0, #144]	; 0x90
   26164:	cmp	lr, r1
   26168:	movge	r1, #0
   2616c:	movlt	r1, #1
   26170:	b	25ad8 <__assert_fail@plt+0x13514>
   26174:	rsb	r1, lr, #-2147483648	; 0x80000000
   26178:	cmp	ip, r1
   2617c:	movge	r1, #0
   26180:	movlt	r1, #1
   26184:	b	25ad8 <__assert_fail@plt+0x13514>
   26188:	mov	r4, #0
   2618c:	mov	r5, #-2147483648	; 0x80000000
   26190:	subs	r4, r4, r8
   26194:	sbc	r5, r5, r9
   26198:	ldrd	r2, [r0, #136]	; 0x88
   2619c:	cmp	r2, r4
   261a0:	sbcs	r3, r3, r5
   261a4:	movlt	ip, #1
   261a8:	movge	ip, #0
   261ac:	b	25b2c <__assert_fail@plt+0x13568>
   261b0:	mov	r2, #0
   261b4:	mov	r3, #-2147483648	; 0x80000000
   261b8:	subs	r2, r2, r4
   261bc:	sbc	r3, r3, r5
   261c0:	mov	r5, r3
   261c4:	cmp	r8, r2
   261c8:	sbcs	r3, r9, r5
   261cc:	movlt	ip, #1
   261d0:	movge	ip, #0
   261d4:	b	25b2c <__assert_fail@plt+0x13568>
   261d8:	ldrd	r4, [r0, #136]	; 0x88
   261dc:	adds	r2, r8, r4
   261e0:	adc	r3, r9, r5
   261e4:	strd	r2, [r0, #136]	; 0x88
   261e8:	mov	r3, #0
   261ec:	b	25b48 <__assert_fail@plt+0x13584>
   261f0:	mov	r4, #0
   261f4:	mov	r5, #-2147483648	; 0x80000000
   261f8:	subs	r4, r4, sl
   261fc:	sbc	r5, r5, fp
   26200:	ldrd	r2, [r0, #128]	; 0x80
   26204:	cmp	r2, r4
   26208:	sbcs	r3, r3, r5
   2620c:	movlt	r3, #1
   26210:	movge	r3, #0
   26214:	b	25b88 <__assert_fail@plt+0x135c4>
   26218:	mov	r4, #0
   2621c:	mov	r5, #-2147483648	; 0x80000000
   26220:	subs	r2, r4, r8
   26224:	sbc	r3, r5, r9
   26228:	cmp	sl, r2
   2622c:	sbcs	r3, fp, r3
   26230:	movlt	r3, #1
   26234:	movge	r3, #0
   26238:	b	25b88 <__assert_fail@plt+0x135c4>
   2623c:	ldrd	r2, [r0, #128]	; 0x80
   26240:	adds	r8, sl, r2
   26244:	adc	r9, fp, r3
   26248:	strd	r8, [r0, #128]	; 0x80
   2624c:	mov	r3, #0
   26250:	b	25ba4 <__assert_fail@plt+0x135e0>
   26254:	mov	r4, #0
   26258:	mov	r5, #-2147483648	; 0x80000000
   2625c:	ldrd	r8, [sp, #16]
   26260:	subs	r8, r4, r8
   26264:	sbc	r9, r5, r9
   26268:	ldrd	r2, [r0, #120]	; 0x78
   2626c:	cmp	r2, r8
   26270:	sbcs	r3, r3, r9
   26274:	movlt	r3, #1
   26278:	movge	r3, #0
   2627c:	b	25bec <__assert_fail@plt+0x13628>
   26280:	mov	r4, #0
   26284:	mov	r5, #-2147483648	; 0x80000000
   26288:	subs	r2, r4, r8
   2628c:	sbc	r3, r5, r9
   26290:	ldrd	r4, [sp, #16]
   26294:	cmp	r4, r2
   26298:	sbcs	r3, r5, r3
   2629c:	movlt	r3, #1
   262a0:	movge	r3, #0
   262a4:	b	25bec <__assert_fail@plt+0x13628>
   262a8:	ldrd	r2, [r0, #120]	; 0x78
   262ac:	ldrd	sl, [sp, #16]
   262b0:	adds	sl, sl, r2
   262b4:	adc	fp, fp, r3
   262b8:	strd	sl, [r0, #120]	; 0x78
   262bc:	mov	r3, #0
   262c0:	b	25c0c <__assert_fail@plt+0x13648>
   262c4:	mov	r4, #0
   262c8:	mov	r5, #-2147483648	; 0x80000000
   262cc:	ldrd	r2, [sp, #8]
   262d0:	subs	r2, r4, r2
   262d4:	sbc	r3, r5, r3
   262d8:	mov	r4, r2
   262dc:	mov	r5, r3
   262e0:	ldrd	r2, [r0, #112]	; 0x70
   262e4:	cmp	r2, r4
   262e8:	sbcs	r3, r3, r5
   262ec:	movlt	r3, #1
   262f0:	movge	r3, #0
   262f4:	b	25c54 <__assert_fail@plt+0x13690>
   262f8:	mov	r4, #0
   262fc:	mov	r5, #-2147483648	; 0x80000000
   26300:	subs	r2, r4, r8
   26304:	sbc	r3, r5, r9
   26308:	ldrd	r4, [sp, #8]
   2630c:	cmp	r4, r2
   26310:	sbcs	r3, r5, r3
   26314:	movlt	r3, #1
   26318:	movge	r3, #0
   2631c:	b	25c54 <__assert_fail@plt+0x13690>
   26320:	ldrd	r2, [r0, #112]	; 0x70
   26324:	ldrd	r4, [sp, #8]
   26328:	adds	r4, r4, r2
   2632c:	adc	r5, r5, r3
   26330:	mov	r2, r4
   26334:	mov	r3, r5
   26338:	strd	r2, [r0, #112]	; 0x70
   2633c:	mov	r3, #0
   26340:	b	25c7c <__assert_fail@plt+0x136b8>
   26344:	mov	r4, #0
   26348:	mov	r5, #-2147483648	; 0x80000000
   2634c:	ldrd	r2, [sp]
   26350:	subs	r2, r4, r2
   26354:	sbc	r3, r5, r3
   26358:	mov	r4, r2
   2635c:	mov	r5, r3
   26360:	ldrd	r2, [r0, #104]	; 0x68
   26364:	cmp	r2, r4
   26368:	sbcs	r3, r3, r5
   2636c:	movlt	r3, #1
   26370:	movge	r3, #0
   26374:	b	25cc4 <__assert_fail@plt+0x13700>
   26378:	mov	r4, #0
   2637c:	mov	r5, #-2147483648	; 0x80000000
   26380:	subs	r2, r4, r8
   26384:	sbc	r3, r5, r9
   26388:	ldrd	r4, [sp]
   2638c:	cmp	r4, r2
   26390:	sbcs	r3, r5, r3
   26394:	movlt	r3, #1
   26398:	movge	r3, #0
   2639c:	b	25cc4 <__assert_fail@plt+0x13700>
   263a0:	ldrd	r2, [r0, #104]	; 0x68
   263a4:	ldrd	r4, [sp]
   263a8:	adds	r4, r4, r2
   263ac:	adc	r5, r5, r3
   263b0:	mov	r2, r4
   263b4:	mov	r3, r5
   263b8:	strd	r2, [r0, #104]	; 0x68
   263bc:	mov	ip, #0
   263c0:	b	25cec <__assert_fail@plt+0x13728>
   263c4:	mov	r4, #0
   263c8:	mov	r5, #-2147483648	; 0x80000000
   263cc:	subs	r4, r4, r6
   263d0:	sbc	r5, r5, r7
   263d4:	ldrd	r2, [r0, #96]	; 0x60
   263d8:	cmp	r2, r4
   263dc:	sbcs	r3, r3, r5
   263e0:	movlt	r3, #1
   263e4:	movge	r3, #0
   263e8:	b	25d2c <__assert_fail@plt+0x13768>
   263ec:	mov	r4, #0
   263f0:	mov	r5, #-2147483648	; 0x80000000
   263f4:	subs	r2, r4, r8
   263f8:	sbc	r3, r5, r9
   263fc:	cmp	r6, r2
   26400:	sbcs	r3, r7, r3
   26404:	movlt	r3, #1
   26408:	movge	r3, #0
   2640c:	b	25d2c <__assert_fail@plt+0x13768>
   26410:	ldrd	r2, [r0, #96]	; 0x60
   26414:	adds	r4, r2, r6
   26418:	adc	r5, r3, r7
   2641c:	strd	r4, [r0, #96]	; 0x60
   26420:	mov	r1, #0
   26424:	b	25d48 <__assert_fail@plt+0x13784>
   26428:	sub	sp, sp, #8
   2642c:	push	{r4, r5, r6, r7, r8, lr}
   26430:	mov	r8, r0
   26434:	add	r1, sp, #20
   26438:	stmib	r1, {r2, r3}
   2643c:	ldrd	r6, [sp, #48]	; 0x30
   26440:	ldrd	r4, [sp, #32]
   26444:	lsr	r3, r7, #31
   26448:	ldr	r2, [sp, #40]	; 0x28
   2644c:	cmp	r2, #2
   26450:	movgt	r3, #0
   26454:	andle	r3, r3, #1
   26458:	cmp	r3, #0
   2645c:	movne	r3, #100	; 0x64
   26460:	mulne	r2, r3, r5
   26464:	umullne	r4, r5, r4, r3
   26468:	addne	r5, r2, r5
   2646c:	cmp	r6, #0
   26470:	sbcs	r3, r7, #0
   26474:	blt	26528 <__assert_fail@plt+0x13f64>
   26478:	cmp	r4, #0
   2647c:	sbcs	r3, r5, #0
   26480:	blt	26568 <__assert_fail@plt+0x13fa4>
   26484:	add	r3, pc, #420	; 0x1a4
   26488:	ldrd	r2, [r3]
   2648c:	cmp	r2, r4
   26490:	sbcs	r3, r3, r5
   26494:	movlt	r3, #1
   26498:	movge	r3, #0
   2649c:	cmp	r3, #0
   264a0:	mov	r1, #60	; 0x3c
   264a4:	umull	r2, r3, r4, r1
   264a8:	mla	r3, r1, r5, r3
   264ac:	movne	r1, #1
   264b0:	moveq	r1, #0
   264b4:	ldrb	r0, [sp, #24]
   264b8:	cmp	r0, #0
   264bc:	beq	265b8 <__assert_fail@plt+0x13ff4>
   264c0:	cmp	r2, #0
   264c4:	sbcs	r0, r3, #0
   264c8:	bge	265a8 <__assert_fail@plt+0x13fe4>
   264cc:	adds	r4, r2, #0
   264d0:	adc	r5, r3, #-2147483648	; 0x80000000
   264d4:	cmp	r4, r6
   264d8:	sbcs	r0, r5, r7
   264dc:	bge	265a8 <__assert_fail@plt+0x13fe4>
   264e0:	subs	r2, r2, r6
   264e4:	sbc	r3, r3, r7
   264e8:	mov	r0, #1
   264ec:	orrs	r1, r1, r0
   264f0:	movne	r0, #0
   264f4:	bne	2651c <__assert_fail@plt+0x13f58>
   264f8:	adds	r0, r2, #1440	; 0x5a0
   264fc:	adc	r1, r3, #0
   26500:	cmp	r1, #0
   26504:	cmpeq	r0, #2880	; 0xb40
   26508:	rsbls	r2, r2, r2, lsl #4
   2650c:	lslls	r2, r2, #2
   26510:	strls	r2, [r8, #24]
   26514:	movls	r0, #1
   26518:	movhi	r0, #0
   2651c:	pop	{r4, r5, r6, r7, r8, lr}
   26520:	add	sp, sp, #8
   26524:	bx	lr
   26528:	mov	r2, #100	; 0x64
   2652c:	mov	r3, #0
   26530:	mov	r0, r4
   26534:	mov	r1, r5
   26538:	bl	4226c <__assert_fail@plt+0x2fca8>
   2653c:	mov	r3, #60	; 0x3c
   26540:	umull	r6, r7, r0, r3
   26544:	mla	r7, r3, r1, r7
   26548:	mov	r2, #100	; 0x64
   2654c:	mov	r3, #0
   26550:	mov	r0, r4
   26554:	mov	r1, r5
   26558:	bl	4226c <__assert_fail@plt+0x2fca8>
   2655c:	adds	r2, r2, r6
   26560:	adc	r3, r3, r7
   26564:	b	264f8 <__assert_fail@plt+0x13f34>
   26568:	mvn	r2, #0
   2656c:	mvn	r3, #0
   26570:	cmp	r5, r3
   26574:	cmpeq	r4, r2
   26578:	moveq	r3, #0
   2657c:	beq	2649c <__assert_fail@plt+0x13ed8>
   26580:	mov	r2, r4
   26584:	mov	r3, r5
   26588:	mov	r0, #0
   2658c:	mov	r1, #-2147483648	; 0x80000000
   26590:	bl	4226c <__assert_fail@plt+0x2fca8>
   26594:	cmp	r0, #60	; 0x3c
   26598:	sbcs	r3, r1, #0
   2659c:	movlt	r3, #1
   265a0:	movge	r3, #0
   265a4:	b	2649c <__assert_fail@plt+0x13ed8>
   265a8:	subs	r2, r2, r6
   265ac:	sbc	r3, r3, r7
   265b0:	mov	r0, #0
   265b4:	b	264ec <__assert_fail@plt+0x13f28>
   265b8:	cmp	r2, #0
   265bc:	sbcs	r0, r3, #0
   265c0:	blt	265fc <__assert_fail@plt+0x14038>
   265c4:	mvn	r4, #0
   265c8:	mvn	r5, #-2147483648	; 0x80000000
   265cc:	subs	r4, r4, r6
   265d0:	sbc	r5, r5, r7
   265d4:	cmp	r4, r2
   265d8:	sbcs	r0, r5, r3
   265dc:	movlt	r0, #1
   265e0:	movge	r0, #0
   265e4:	cmp	r0, #0
   265e8:	beq	26620 <__assert_fail@plt+0x1405c>
   265ec:	adds	r2, r2, r6
   265f0:	adc	r3, r3, r7
   265f4:	mov	r0, #1
   265f8:	b	264ec <__assert_fail@plt+0x13f28>
   265fc:	mov	r4, #0
   26600:	mov	r5, #-2147483648	; 0x80000000
   26604:	subs	r4, r4, r2
   26608:	sbc	r5, r5, r3
   2660c:	cmp	r6, r4
   26610:	sbcs	r0, r7, r5
   26614:	movlt	r0, #1
   26618:	movge	r0, #0
   2661c:	b	265e4 <__assert_fail@plt+0x14020>
   26620:	adds	r2, r2, r6
   26624:	adc	r3, r3, r7
   26628:	mov	r0, #0
   2662c:	b	264ec <__assert_fail@plt+0x13f28>
   26630:	eorcs	r2, r2, #536870914	; 0x20000002
   26634:	eoreq	r2, r2, #536870914	; 0x20000002
   26638:	ldr	r3, [r1, #24]
   2663c:	cmp	r3, #0
   26640:	blt	266ac <__assert_fail@plt+0x140e8>
   26644:	ldr	r3, [r0]
   26648:	ldr	r2, [r1]
   2664c:	eor	r3, r3, r2
   26650:	ldr	r2, [r0, #4]
   26654:	ldr	ip, [r1, #4]
   26658:	eor	r2, r2, ip
   2665c:	orr	r3, r3, r2
   26660:	ldr	r2, [r0, #8]
   26664:	ldr	ip, [r1, #8]
   26668:	eor	r2, r2, ip
   2666c:	orr	r3, r3, r2
   26670:	ldr	r2, [r0, #12]
   26674:	ldr	ip, [r1, #12]
   26678:	eor	r2, r2, ip
   2667c:	orr	r3, r3, r2
   26680:	ldr	r2, [r0, #16]
   26684:	ldr	ip, [r1, #16]
   26688:	eor	r2, r2, ip
   2668c:	orr	r3, r3, r2
   26690:	ldr	r2, [r0, #20]
   26694:	ldr	r1, [r1, #20]
   26698:	eor	r2, r2, r1
   2669c:	orrs	r3, r3, r2
   266a0:	moveq	r0, #1
   266a4:	movne	r0, #0
   266a8:	bx	lr
   266ac:	mov	r0, #0
   266b0:	bx	lr
   266b4:	push	{r4, r5, r6, r7, r8, lr}
   266b8:	mov	r7, r0
   266bc:	mov	r6, r1
   266c0:	ldr	r4, [pc, #132]	; 2674c <__assert_fail@plt+0x14188>
   266c4:	ldr	r1, [pc, #132]	; 26750 <__assert_fail@plt+0x1418c>
   266c8:	mov	r5, r4
   266cc:	mov	r0, r6
   266d0:	bl	11f1c <strcmp@plt>
   266d4:	cmp	r0, #0
   266d8:	beq	26744 <__assert_fail@plt+0x14180>
   266dc:	ldr	r1, [r4, #12]!
   266e0:	cmp	r1, #0
   266e4:	bne	266c8 <__assert_fail@plt+0x14104>
   266e8:	add	r4, r7, #188	; 0xbc
   266ec:	ldr	r1, [r7, #188]	; 0xbc
   266f0:	cmp	r1, #0
   266f4:	beq	26718 <__assert_fail@plt+0x14154>
   266f8:	mov	r5, r4
   266fc:	mov	r0, r6
   26700:	bl	11f1c <strcmp@plt>
   26704:	cmp	r0, #0
   26708:	beq	26744 <__assert_fail@plt+0x14180>
   2670c:	ldr	r1, [r4, #12]!
   26710:	cmp	r1, #0
   26714:	bne	266f8 <__assert_fail@plt+0x14134>
   26718:	ldr	r4, [pc, #52]	; 26754 <__assert_fail@plt+0x14190>
   2671c:	ldr	r1, [pc, #52]	; 26758 <__assert_fail@plt+0x14194>
   26720:	mov	r5, r4
   26724:	mov	r0, r6
   26728:	bl	11f1c <strcmp@plt>
   2672c:	cmp	r0, #0
   26730:	beq	26744 <__assert_fail@plt+0x14180>
   26734:	ldr	r1, [r4, #12]!
   26738:	cmp	r1, #0
   2673c:	bne	26720 <__assert_fail@plt+0x1415c>
   26740:	mov	r5, #0
   26744:	mov	r0, r5
   26748:	pop	{r4, r5, r6, r7, r8, pc}
   2674c:			; <UNDEFINED> instruction: 0x00046db8
   26750:	andeq	r7, r4, r4, ror #17
   26754:	andeq	r6, r4, r8, ror #27
   26758:	andeq	r7, r4, r8, ror #17
   2675c:	orrs	r1, r2, r3
   26760:	bxeq	lr
   26764:	push	{lr}		; (str lr, [sp, #-4]!)
   26768:	sub	sp, sp, #12
   2676c:	eor	r1, r0, #1
   26770:	ldr	r0, [pc, #32]	; 26798 <__assert_fail@plt+0x141d4>
   26774:	ldr	r0, [r0]
   26778:	ldr	ip, [sp, #16]
   2677c:	str	ip, [sp]
   26780:	ldr	ip, [pc, #20]	; 2679c <__assert_fail@plt+0x141d8>
   26784:	add	r1, ip, r1
   26788:	bl	1230c <fprintf@plt>
   2678c:	mov	r0, #1
   26790:	add	sp, sp, #12
   26794:	pop	{pc}		; (ldr pc, [sp], #4)
   26798:	andeq	r9, r5, r8, asr #10
   2679c:	andeq	r7, r4, ip, ror #17
   267a0:	push	{r4, r5, r6, lr}
   267a4:	sub	sp, sp, #8
   267a8:	mov	r4, r0
   267ac:	mov	r5, r1
   267b0:	mov	r6, r2
   267b4:	ldrb	r3, [r0, #187]	; 0xbb
   267b8:	cmp	r3, #0
   267bc:	moveq	r0, #0
   267c0:	strbeq	r0, [r1]
   267c4:	beq	26800 <__assert_fail@plt+0x1423c>
   267c8:	ldrd	r2, [r4, #8]
   267cc:	adds	r0, r2, #1
   267d0:	adc	r1, r3, #0
   267d4:	cmp	r1, #0
   267d8:	cmpeq	r0, #13
   267dc:	bhi	26830 <__assert_fail@plt+0x1426c>
   267e0:	add	r3, r0, r0, lsl #2
   267e4:	add	r2, r0, r3, lsl #1
   267e8:	ldr	r3, [pc, #124]	; 2686c <__assert_fail@plt+0x142a8>
   267ec:	add	r3, r3, r2
   267f0:	ldr	r2, [pc, #120]	; 26870 <__assert_fail@plt+0x142ac>
   267f4:	mov	r1, r6
   267f8:	mov	r0, r5
   267fc:	bl	12330 <snprintf@plt>
   26800:	ldr	r3, [r4, #16]
   26804:	cmp	r3, #6
   26808:	bhi	26824 <__assert_fail@plt+0x14260>
   2680c:	mvn	r2, r0
   26810:	lsr	r2, r2, #31
   26814:	cmp	r0, r6
   26818:	movge	r2, #0
   2681c:	cmp	r2, #0
   26820:	bne	26848 <__assert_fail@plt+0x14284>
   26824:	mov	r0, r5
   26828:	add	sp, sp, #8
   2682c:	pop	{r4, r5, r6, pc}
   26830:	strd	r2, [sp]
   26834:	ldr	r2, [pc, #56]	; 26874 <__assert_fail@plt+0x142b0>
   26838:	mov	r1, r6
   2683c:	mov	r0, r5
   26840:	bl	12330 <snprintf@plt>
   26844:	b	26800 <__assert_fail@plt+0x1423c>
   26848:	ldr	r2, [pc, #40]	; 26878 <__assert_fail@plt+0x142b4>
   2684c:	add	r3, r2, r3, lsl #2
   26850:	ldr	r2, [pc, #36]	; 2687c <__assert_fail@plt+0x142b8>
   26854:	cmp	r0, #0
   26858:	addeq	r2, r2, #1
   2685c:	sub	r1, r6, r0
   26860:	add	r0, r5, r0
   26864:	bl	12330 <snprintf@plt>
   26868:	b	26824 <__assert_fail@plt+0x14260>
   2686c:	andeq	r7, r4, r8, lsr #32
   26870:	andeq	r6, r4, r4, lsl #24
   26874:	strdeq	r7, [r4], -r8
   26878:	andeq	r7, r4, r4, asr #1
   2687c:	andeq	r8, r4, ip, ror #10
   26880:	push	{r4, r5, r6, lr}
   26884:	mov	r5, r1
   26888:	subs	r4, r0, #0
   2688c:	ldr	r3, [pc, #240]	; 26984 <__assert_fail@plt+0x143c0>
   26890:	smull	r2, r3, r3, r0
   26894:	add	r3, r3, r0
   26898:	asr	r6, r0, #31
   2689c:	rsb	r6, r6, r3, asr #11
   268a0:	eor	r3, r6, r6, asr #31
   268a4:	sub	r3, r3, r6, asr #31
   268a8:	cmp	r0, #0
   268ac:	movlt	r2, #45	; 0x2d
   268b0:	movge	r2, #43	; 0x2b
   268b4:	ldr	r1, [pc, #204]	; 26988 <__assert_fail@plt+0x143c4>
   268b8:	mov	r0, r5
   268bc:	bl	12480 <sprintf@plt>
   268c0:	mov	r3, #3600	; 0xe10
   268c4:	mul	r3, r3, r6
   268c8:	subs	r4, r4, r3
   268cc:	beq	2697c <__assert_fail@plt+0x143b8>
   268d0:	add	ip, r5, r0
   268d4:	cmp	r4, #0
   268d8:	rsblt	r4, r4, #0
   268dc:	ldr	r3, [pc, #168]	; 2698c <__assert_fail@plt+0x143c8>
   268e0:	smull	r2, r3, r3, r4
   268e4:	add	r3, r3, r4
   268e8:	asr	r1, r4, #31
   268ec:	rsb	r3, r1, r3, asr #5
   268f0:	mov	r2, r3
   268f4:	rsb	r3, r3, r3, lsl #4
   268f8:	mov	lr, #58	; 0x3a
   268fc:	strb	lr, [r5, r0]
   26900:	ldr	r0, [pc, #136]	; 26990 <__assert_fail@plt+0x143cc>
   26904:	smull	lr, r0, r0, r4
   26908:	rsb	r1, r1, r0, asr #6
   2690c:	add	r1, r1, #48	; 0x30
   26910:	strb	r1, [ip, #1]
   26914:	ldr	r1, [pc, #120]	; 26994 <__assert_fail@plt+0x143d0>
   26918:	smull	r1, r0, r1, r2
   2691c:	asr	r1, r2, #31
   26920:	rsb	r1, r1, r0, asr #2
   26924:	add	r1, r1, r1, lsl #2
   26928:	sub	r2, r2, r1, lsl #1
   2692c:	add	r2, r2, #48	; 0x30
   26930:	strb	r2, [ip, #2]
   26934:	subs	r3, r4, r3, lsl #2
   26938:	addeq	r1, ip, #3
   2693c:	beq	26974 <__assert_fail@plt+0x143b0>
   26940:	mov	r2, #58	; 0x3a
   26944:	strb	r2, [ip, #3]
   26948:	ldr	r2, [pc, #68]	; 26994 <__assert_fail@plt+0x143d0>
   2694c:	smull	r2, r1, r2, r3
   26950:	asr	r2, r3, #31
   26954:	rsb	r2, r2, r1, asr #2
   26958:	add	r1, r2, #48	; 0x30
   2695c:	strb	r1, [ip, #4]
   26960:	add	r1, ip, #6
   26964:	add	r2, r2, r2, lsl #2
   26968:	sub	r3, r3, r2, lsl #1
   2696c:	add	r3, r3, #48	; 0x30
   26970:	strb	r3, [ip, #5]
   26974:	mov	r3, #0
   26978:	strb	r3, [r1]
   2697c:	mov	r0, r5
   26980:	pop	{r4, r5, r6, pc}
   26984:			; <UNDEFINED> instruction: 0x91a2b3c5
   26988:	andeq	r7, r4, r0, lsl #18
   2698c:	stmhi	r8, {r0, r3, r7, fp, pc}
   26990:	blne	13c706c <stdout@@GLIBC_2.4+0x136db18>
   26994:	strbtvs	r6, [r6], -r7, ror #12
   26998:	push	{r4, r5, r6, lr}
   2699c:	mov	r5, r0
   269a0:	mov	r4, r1
   269a4:	mov	r1, #100	; 0x64
   269a8:	bl	41e94 <__assert_fail@plt+0x2f8d0>
   269ac:	eor	r6, r1, r1, asr #31
   269b0:	sub	r6, r6, r1, asr #31
   269b4:	mov	r1, #100	; 0x64
   269b8:	mov	r0, r5
   269bc:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   269c0:	add	r2, r0, #19
   269c4:	mov	r3, r6
   269c8:	cmp	r2, #0
   269cc:	rsblt	r2, r2, #0
   269d0:	ldr	r1, [pc, #24]	; 269f0 <__assert_fail@plt+0x1442c>
   269d4:	ldr	r0, [pc, #24]	; 269f4 <__assert_fail@plt+0x14430>
   269d8:	cmp	r5, r0
   269dc:	addge	r1, r1, #1
   269e0:	mov	r0, r4
   269e4:	bl	12480 <sprintf@plt>
   269e8:	mov	r0, r4
   269ec:	pop	{r4, r5, r6, pc}
   269f0:	andeq	r7, r4, r8, lsl #18
   269f4:			; <UNDEFINED> instruction: 0xfffff894
   269f8:	push	{r0, r1, r2, r3}
   269fc:	push	{r4, lr}
   26a00:	sub	sp, sp, #8
   26a04:	ldr	r4, [pc, #52]	; 26a40 <__assert_fail@plt+0x1447c>
   26a08:	ldr	r3, [r4]
   26a0c:	mov	r2, #6
   26a10:	mov	r1, #1
   26a14:	ldr	r0, [pc, #40]	; 26a44 <__assert_fail@plt+0x14480>
   26a18:	bl	12138 <fwrite@plt>
   26a1c:	add	r2, sp, #20
   26a20:	str	r2, [sp, #4]
   26a24:	ldr	r1, [sp, #16]
   26a28:	ldr	r0, [r4]
   26a2c:	bl	12444 <vfprintf@plt>
   26a30:	add	sp, sp, #8
   26a34:	pop	{r4, lr}
   26a38:	add	sp, sp, #16
   26a3c:	bx	lr
   26a40:	andeq	r9, r5, r8, asr #10
   26a44:	andeq	r7, r4, r4, lsl r9
   26a48:	push	{r4, r5, r6, r7, r8, lr}
   26a4c:	sub	sp, sp, #40	; 0x28
   26a50:	mov	r6, r1
   26a54:	mov	r4, r2
   26a58:	mov	r5, r3
   26a5c:	mov	r3, #0
   26a60:	str	r3, [sp, #4]
   26a64:	str	r3, [sp]
   26a68:	mov	r3, r0
   26a6c:	ldr	r2, [pc, #88]	; 26acc <__assert_fail@plt+0x14508>
   26a70:	mov	r1, r5
   26a74:	mov	r0, r4
   26a78:	bl	41920 <__assert_fail@plt+0x2f35c>
   26a7c:	cmp	r6, #0
   26a80:	cmpne	r5, r0
   26a84:	ble	26a98 <__assert_fail@plt+0x144d4>
   26a88:	mov	r7, r0
   26a8c:	ldr	r3, [r6, #176]	; 0xb0
   26a90:	cmp	r3, #0
   26a94:	bne	26aa4 <__assert_fail@plt+0x144e0>
   26a98:	mov	r0, r4
   26a9c:	add	sp, sp, #40	; 0x28
   26aa0:	pop	{r4, r5, r6, r7, r8, pc}
   26aa4:	add	r8, r4, r0
   26aa8:	add	r1, sp, #12
   26aac:	ldr	r0, [r6, #24]
   26ab0:	bl	26880 <__assert_fail@plt+0x142bc>
   26ab4:	mov	r3, r0
   26ab8:	ldr	r2, [pc, #16]	; 26ad0 <__assert_fail@plt+0x1450c>
   26abc:	sub	r1, r5, r7
   26ac0:	mov	r0, r8
   26ac4:	bl	12330 <snprintf@plt>
   26ac8:	b	26a98 <__assert_fail@plt+0x144d4>
   26acc:	andeq	r7, r4, ip, lsl r9
   26ad0:	andeq	r7, r4, r8, lsr r9
   26ad4:	bx	lr
   26ad8:	bx	lr
   26adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ae0:	sub	sp, sp, #1440	; 0x5a0
   26ae4:	sub	sp, sp, #4
   26ae8:	str	r0, [sp, #96]	; 0x60
   26aec:	mov	r3, #0
   26af0:	add	r2, sp, #1344	; 0x540
   26af4:	strh	r3, [r2]
   26af8:	add	sl, sp, #224	; 0xe0
   26afc:	mov	fp, r2
   26b00:	str	r3, [sp, #100]	; 0x64
   26b04:	mov	r8, r3
   26b08:	mvn	r7, #1
   26b0c:	ldr	r9, [pc, #3880]	; 27a3c <__assert_fail@plt+0x15478>
   26b10:	add	r3, r9, #1296	; 0x510
   26b14:	str	r3, [sp, #120]	; 0x78
   26b18:	b	2732c <__assert_fail@plt+0x14d68>
   26b1c:	add	r6, r6, #1
   26b20:	str	r6, [r0]
   26b24:	ldr	r6, [r0]
   26b28:	ldrb	r5, [r6]
   26b2c:	cmp	r5, #9
   26b30:	bcc	26b44 <__assert_fail@plt+0x14580>
   26b34:	cmp	r5, #13
   26b38:	bls	26b1c <__assert_fail@plt+0x14558>
   26b3c:	cmp	r5, #32
   26b40:	beq	26b1c <__assert_fail@plt+0x14558>
   26b44:	sub	r3, r5, #48	; 0x30
   26b48:	cmp	r3, #9
   26b4c:	bls	26b88 <__assert_fail@plt+0x145c4>
   26b50:	sub	r3, r5, #43	; 0x2b
   26b54:	tst	r3, #253	; 0xfd
   26b58:	beq	28d60 <__assert_fail@plt+0x1679c>
   26b5c:	cmp	r5, #65	; 0x41
   26b60:	bcc	26b78 <__assert_fail@plt+0x145b4>
   26b64:	cmp	r5, #90	; 0x5a
   26b68:	bls	26e10 <__assert_fail@plt+0x1484c>
   26b6c:	sub	r3, r5, #97	; 0x61
   26b70:	cmp	r3, #25
   26b74:	bls	26e10 <__assert_fail@plt+0x1484c>
   26b78:	cmp	r5, #40	; 0x28
   26b7c:	bne	27130 <__assert_fail@plt+0x14b6c>
   26b80:	mov	r1, #0
   26b84:	b	2714c <__assert_fail@plt+0x14b88>
   26b88:	cmp	r5, #45	; 0x2d
   26b8c:	movne	r3, #0
   26b90:	moveq	r3, #1
   26b94:	sub	r2, r5, #43	; 0x2b
   26b98:	tst	r2, #253	; 0xfd
   26b9c:	bne	26be4 <__assert_fail@plt+0x14620>
   26ba0:	cmp	r3, #0
   26ba4:	mvnne	r2, #0
   26ba8:	moveq	r2, #1
   26bac:	add	r6, r6, #1
   26bb0:	str	r6, [r0]
   26bb4:	ldrb	r5, [r6]
   26bb8:	cmp	r5, #9
   26bbc:	bcc	26bd0 <__assert_fail@plt+0x1460c>
   26bc0:	cmp	r5, #13
   26bc4:	bls	26bac <__assert_fail@plt+0x145e8>
   26bc8:	cmp	r5, #32
   26bcc:	beq	26bac <__assert_fail@plt+0x145e8>
   26bd0:	sub	r3, r5, #48	; 0x30
   26bd4:	cmp	r3, #9
   26bd8:	bhi	26b24 <__assert_fail@plt+0x14560>
   26bdc:	str	r2, [sp, #56]	; 0x38
   26be0:	b	26bec <__assert_fail@plt+0x14628>
   26be4:	mov	r3, #0
   26be8:	str	r3, [sp, #56]	; 0x38
   26bec:	mov	r7, #0
   26bf0:	cmp	r7, #0
   26bf4:	blt	26d44 <__assert_fail@plt+0x14780>
   26bf8:	ldr	r3, [pc, #3648]	; 27a40 <__assert_fail@plt+0x1547c>
   26bfc:	cmp	r7, r3
   26c00:	movle	r0, #0
   26c04:	movgt	r0, #1
   26c08:	cmp	r0, #0
   26c0c:	bne	2717c <__assert_fail@plt+0x14bb8>
   26c10:	add	r7, r7, r7, lsl #2
   26c14:	lsl	r7, r7, #1
   26c18:	ldr	r3, [sp, #56]	; 0x38
   26c1c:	cmp	r3, #0
   26c20:	blt	26d6c <__assert_fail@plt+0x147a8>
   26c24:	cmp	r5, #48	; 0x30
   26c28:	bpl	28d80 <__assert_fail@plt+0x167bc>
   26c2c:	rsb	r3, r5, #-2147483600	; 0x80000030
   26c30:	cmp	r7, r3
   26c34:	movge	r3, #0
   26c38:	movlt	r3, #1
   26c3c:	cmp	r3, #0
   26c40:	bne	27184 <__assert_fail@plt+0x14bc0>
   26c44:	ldr	r3, [sp, #56]	; 0x38
   26c48:	cmp	r3, #0
   26c4c:	rsblt	r5, r5, #48	; 0x30
   26c50:	subge	r5, r5, #48	; 0x30
   26c54:	add	r3, r7, r5
   26c58:	mov	r7, r3
   26c5c:	ldrb	r5, [r6, #1]!
   26c60:	sub	r2, r5, #48	; 0x30
   26c64:	cmp	r2, #9
   26c68:	bls	26bf0 <__assert_fail@plt+0x1462c>
   26c6c:	and	r5, r5, #253	; 0xfd
   26c70:	cmp	r5, #44	; 0x2c
   26c74:	bne	26dc8 <__assert_fail@plt+0x14804>
   26c78:	ldrb	r2, [r6, #1]
   26c7c:	sub	r1, r2, #48	; 0x30
   26c80:	cmp	r1, #9
   26c84:	bhi	26dc8 <__assert_fail@plt+0x14804>
   26c88:	add	r6, r6, #2
   26c8c:	mov	r2, r1
   26c90:	mov	lr, #8
   26c94:	add	r2, r2, r2, lsl #2
   26c98:	lsl	r0, r2, #1
   26c9c:	mov	r2, r0
   26ca0:	ldrb	r1, [r6]
   26ca4:	sub	ip, r1, #48	; 0x30
   26ca8:	cmp	ip, #9
   26cac:	addls	r6, r6, #1
   26cb0:	movls	r2, ip
   26cb4:	addls	r2, r0, r2
   26cb8:	subs	lr, lr, #1
   26cbc:	bne	26c94 <__assert_fail@plt+0x146d0>
   26cc0:	ldr	r1, [sp, #56]	; 0x38
   26cc4:	cmp	r1, #0
   26cc8:	movlt	r1, r6
   26ccc:	blt	26da4 <__assert_fail@plt+0x147e0>
   26cd0:	mov	r0, r6
   26cd4:	add	r6, r6, #1
   26cd8:	ldrb	r1, [r0]
   26cdc:	sub	r1, r1, #48	; 0x30
   26ce0:	cmp	r1, #9
   26ce4:	bls	26cd0 <__assert_fail@plt+0x1470c>
   26ce8:	adds	r1, r2, #0
   26cec:	movne	r1, #1
   26cf0:	ldr	ip, [sp, #56]	; 0x38
   26cf4:	ands	r1, r1, ip, lsr #31
   26cf8:	beq	26d20 <__assert_fail@plt+0x1475c>
   26cfc:	cmp	r7, #0
   26d00:	bge	26d10 <__assert_fail@plt+0x1474c>
   26d04:	add	r7, r7, #-2147483648	; 0x80000000
   26d08:	cmp	r7, #0
   26d0c:	ble	2718c <__assert_fail@plt+0x14bc8>
   26d10:	sub	r7, r3, #1
   26d14:	rsb	r2, r2, #998244352	; 0x3b800000
   26d18:	add	r2, r2, #1753088	; 0x1ac000
   26d1c:	add	r2, r2, #2560	; 0xa00
   26d20:	str	r7, [sp, #1384]	; 0x568
   26d24:	str	r2, [sp, #1388]	; 0x56c
   26d28:	ldr	r3, [sp, #96]	; 0x60
   26d2c:	str	r0, [r3]
   26d30:	ldr	r7, [pc, #3340]	; 27a44 <__assert_fail@plt+0x15480>
   26d34:	ldr	r3, [sp, #56]	; 0x38
   26d38:	cmp	r3, #0
   26d3c:	movne	r7, #276	; 0x114
   26d40:	b	26e04 <__assert_fail@plt+0x14840>
   26d44:	cmn	r7, #1
   26d48:	moveq	r0, #0
   26d4c:	beq	26c08 <__assert_fail@plt+0x14644>
   26d50:	mov	r1, r7
   26d54:	mov	r0, #-2147483648	; 0x80000000
   26d58:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   26d5c:	cmp	r0, #9
   26d60:	movgt	r0, #0
   26d64:	movle	r0, #1
   26d68:	b	26c08 <__assert_fail@plt+0x14644>
   26d6c:	rsbs	r3, r5, #48	; 0x30
   26d70:	bmi	26d84 <__assert_fail@plt+0x147c0>
   26d74:	cmp	r7, #0
   26d78:	bge	28d88 <__assert_fail@plt+0x167c4>
   26d7c:	rsb	r2, r5, #48	; 0x30
   26d80:	b	26d90 <__assert_fail@plt+0x147cc>
   26d84:	rsb	r3, r3, #-2147483648	; 0x80000000
   26d88:	b	26c30 <__assert_fail@plt+0x1466c>
   26d8c:	sub	r2, r5, #48	; 0x30
   26d90:	rsb	r3, r7, #-2147483648	; 0x80000000
   26d94:	cmp	r3, r2
   26d98:	movle	r3, #0
   26d9c:	movgt	r3, #1
   26da0:	b	26c3c <__assert_fail@plt+0x14678>
   26da4:	mov	r6, r1
   26da8:	ldrb	r0, [r1], #1
   26dac:	sub	ip, r0, #48	; 0x30
   26db0:	cmp	ip, #9
   26db4:	bhi	26cd0 <__assert_fail@plt+0x1470c>
   26db8:	cmp	r0, #48	; 0x30
   26dbc:	beq	26da4 <__assert_fail@plt+0x147e0>
   26dc0:	add	r2, r2, #1
   26dc4:	b	26cd0 <__assert_fail@plt+0x1470c>
   26dc8:	ldr	r1, [sp, #56]	; 0x38
   26dcc:	lsr	r3, r1, #31
   26dd0:	strb	r3, [sp, #1384]	; 0x568
   26dd4:	mov	r2, r7
   26dd8:	asr	r3, r7, #31
   26ddc:	strd	r2, [sp, #112]	; 0x70
   26de0:	ldr	r2, [sp, #96]	; 0x60
   26de4:	ldr	r3, [r2]
   26de8:	sub	r3, r6, r3
   26dec:	str	r3, [sp, #124]	; 0x7c
   26df0:	str	r6, [r2]
   26df4:	ldr	r7, [pc, #3148]	; 27a48 <__assert_fail@plt+0x15484>
   26df8:	ldr	r3, [pc, #3148]	; 27a4c <__assert_fail@plt+0x15488>
   26dfc:	cmp	r1, #0
   26e00:	movne	r7, r3
   26e04:	add	r3, r9, r7
   26e08:	ldrb	r3, [r3, #1992]	; 0x7c8
   26e0c:	b	27364 <__assert_fail@plt+0x14da0>
   26e10:	add	r3, sp, #148	; 0x94
   26e14:	add	r2, sp, #167	; 0xa7
   26e18:	ldr	r0, [sp, #96]	; 0x60
   26e1c:	b	26e28 <__assert_fail@plt+0x14864>
   26e20:	cmp	r5, #46	; 0x2e
   26e24:	bne	26e64 <__assert_fail@plt+0x148a0>
   26e28:	cmp	r3, r2
   26e2c:	strbcc	r5, [r3]
   26e30:	addcc	r3, r3, #1
   26e34:	ldr	r1, [r0]
   26e38:	add	ip, r1, #1
   26e3c:	str	ip, [r0]
   26e40:	ldrb	r5, [r1, #1]
   26e44:	cmp	r5, #65	; 0x41
   26e48:	bcc	26e20 <__assert_fail@plt+0x1485c>
   26e4c:	cmp	r5, #90	; 0x5a
   26e50:	bls	26e28 <__assert_fail@plt+0x14864>
   26e54:	sub	r1, r5, #97	; 0x61
   26e58:	cmp	r1, #25
   26e5c:	bhi	26e20 <__assert_fail@plt+0x1485c>
   26e60:	b	26e28 <__assert_fail@plt+0x14864>
   26e64:	mov	r2, #0
   26e68:	strb	r2, [r3]
   26e6c:	ldrb	r3, [sp, #148]	; 0x94
   26e70:	cmp	r3, r2
   26e74:	beq	26e9c <__assert_fail@plt+0x148d8>
   26e78:	add	r2, sp, #148	; 0x94
   26e7c:	mov	r1, r3
   26e80:	sub	r0, r3, #97	; 0x61
   26e84:	cmp	r0, #25
   26e88:	subls	r1, r3, #32
   26e8c:	strb	r1, [r2]
   26e90:	ldrb	r3, [r2, #1]!
   26e94:	cmp	r3, #0
   26e98:	bne	26e7c <__assert_fail@plt+0x148b8>
   26e9c:	add	r6, r9, #1248	; 0x4e0
   26ea0:	ldr	r1, [pc, #2984]	; 27a50 <__assert_fail@plt+0x1548c>
   26ea4:	add	r3, sp, #148	; 0x94
   26ea8:	str	r3, [sp, #56]	; 0x38
   26eac:	mov	r5, r6
   26eb0:	ldr	r0, [sp, #56]	; 0x38
   26eb4:	bl	11f1c <strcmp@plt>
   26eb8:	cmp	r0, #0
   26ebc:	beq	27100 <__assert_fail@plt+0x14b3c>
   26ec0:	ldr	r1, [r6, #12]!
   26ec4:	cmp	r1, #0
   26ec8:	bne	26eac <__assert_fail@plt+0x148e8>
   26ecc:	add	r0, sp, #148	; 0x94
   26ed0:	bl	122d0 <strlen@plt>
   26ed4:	mov	r3, r0
   26ed8:	str	r0, [sp, #68]	; 0x44
   26edc:	cmp	r0, #3
   26ee0:	moveq	r3, #1
   26ee4:	beq	26f04 <__assert_fail@plt+0x14940>
   26ee8:	cmp	r3, #4
   26eec:	movne	r3, #0
   26ef0:	bne	26f04 <__assert_fail@plt+0x14940>
   26ef4:	ldrb	r3, [sp, #151]	; 0x97
   26ef8:	cmp	r3, #46	; 0x2e
   26efc:	movne	r3, #0
   26f00:	moveq	r3, #1
   26f04:	str	r3, [sp, #56]	; 0x38
   26f08:	ldr	r3, [sp, #120]	; 0x78
   26f0c:	add	r6, r3, #12
   26f10:	ldr	r1, [pc, #2876]	; 27a54 <__assert_fail@plt+0x15490>
   26f14:	add	r3, sp, #148	; 0x94
   26f18:	mov	r7, r3
   26f1c:	b	26f44 <__assert_fail@plt+0x14980>
   26f20:	mov	r0, r7
   26f24:	bl	11f1c <strcmp@plt>
   26f28:	clz	r0, r0
   26f2c:	lsr	r0, r0, #5
   26f30:	cmp	r0, #0
   26f34:	bne	27100 <__assert_fail@plt+0x14b3c>
   26f38:	ldr	r1, [r6, #12]!
   26f3c:	cmp	r1, #0
   26f40:	beq	26f6c <__assert_fail@plt+0x149a8>
   26f44:	mov	r5, r6
   26f48:	ldr	r3, [sp, #56]	; 0x38
   26f4c:	cmp	r3, #0
   26f50:	beq	26f20 <__assert_fail@plt+0x1495c>
   26f54:	mov	r2, #3
   26f58:	mov	r0, r7
   26f5c:	bl	12564 <strncmp@plt>
   26f60:	clz	r0, r0
   26f64:	lsr	r0, r0, #5
   26f68:	b	26f30 <__assert_fail@plt+0x1496c>
   26f6c:	mov	r7, r0
   26f70:	add	r1, sp, #148	; 0x94
   26f74:	ldr	r0, [sp, #96]	; 0x60
   26f78:	bl	266b4 <__assert_fail@plt+0x140f0>
   26f7c:	subs	r5, r0, #0
   26f80:	bne	2710c <__assert_fail@plt+0x14b48>
   26f84:	ldr	r1, [pc, #2764]	; 27a58 <__assert_fail@plt+0x15494>
   26f88:	add	r0, sp, #148	; 0x94
   26f8c:	bl	11f1c <strcmp@plt>
   26f90:	cmp	r0, #0
   26f94:	beq	28d70 <__assert_fail@plt+0x167ac>
   26f98:	add	r3, r9, #1600	; 0x640
   26f9c:	add	r3, r3, #8
   26fa0:	str	r3, [sp, #56]	; 0x38
   26fa4:	mov	r6, r3
   26fa8:	ldr	r1, [pc, #2732]	; 27a5c <__assert_fail@plt+0x15498>
   26fac:	add	r3, sp, #148	; 0x94
   26fb0:	str	r3, [sp, #72]	; 0x48
   26fb4:	mov	r5, r6
   26fb8:	ldr	r0, [sp, #72]	; 0x48
   26fbc:	bl	11f1c <strcmp@plt>
   26fc0:	cmp	r0, #0
   26fc4:	beq	27100 <__assert_fail@plt+0x14b3c>
   26fc8:	ldr	r1, [r6, #12]!
   26fcc:	cmp	r1, #0
   26fd0:	bne	26fb4 <__assert_fail@plt+0x149f0>
   26fd4:	add	r6, sp, #148	; 0x94
   26fd8:	ldr	r3, [sp, #68]	; 0x44
   26fdc:	sub	r3, r3, #1
   26fe0:	str	r3, [sp, #72]	; 0x48
   26fe4:	ldrb	r3, [r6, r3]
   26fe8:	cmp	r3, #83	; 0x53
   26fec:	bne	27038 <__assert_fail@plt+0x14a74>
   26ff0:	mov	r3, #0
   26ff4:	ldr	r2, [sp, #72]	; 0x48
   26ff8:	strb	r3, [r6, r2]
   26ffc:	ldr	r1, [pc, #2648]	; 27a5c <__assert_fail@plt+0x15498>
   27000:	str	r6, [sp, #76]	; 0x4c
   27004:	ldr	r5, [sp, #56]	; 0x38
   27008:	ldr	r0, [sp, #76]	; 0x4c
   2700c:	bl	11f1c <strcmp@plt>
   27010:	cmp	r0, #0
   27014:	beq	27100 <__assert_fail@plt+0x14b3c>
   27018:	ldr	r3, [sp, #56]	; 0x38
   2701c:	ldr	r1, [r3, #12]!
   27020:	str	r3, [sp, #56]	; 0x38
   27024:	cmp	r1, #0
   27028:	bne	27004 <__assert_fail@plt+0x14a40>
   2702c:	mov	r3, #83	; 0x53
   27030:	ldr	r2, [sp, #72]	; 0x48
   27034:	strb	r3, [r6, r2]
   27038:	add	r6, r9, #1728	; 0x6c0
   2703c:	add	r6, r6, #12
   27040:	ldr	r1, [pc, #2584]	; 27a60 <__assert_fail@plt+0x1549c>
   27044:	add	r3, sp, #148	; 0x94
   27048:	str	r3, [sp, #56]	; 0x38
   2704c:	mov	r5, r6
   27050:	ldr	r0, [sp, #56]	; 0x38
   27054:	bl	11f1c <strcmp@plt>
   27058:	cmp	r0, #0
   2705c:	beq	27100 <__assert_fail@plt+0x14b3c>
   27060:	ldr	r1, [r6, #12]!
   27064:	cmp	r1, #0
   27068:	bne	2704c <__assert_fail@plt+0x14a88>
   2706c:	ldr	r3, [sp, #68]	; 0x44
   27070:	cmp	r3, #1
   27074:	bne	27094 <__assert_fail@plt+0x14ad0>
   27078:	ldrb	r3, [sp, #148]	; 0x94
   2707c:	cmp	r3, #65	; 0x41
   27080:	beq	28d78 <__assert_fail@plt+0x167b4>
   27084:	add	r5, r9, #808	; 0x328
   27088:	ldr	r2, [r5, #12]!
   2708c:	cmp	r2, #0
   27090:	bne	270f4 <__assert_fail@plt+0x14b30>
   27094:	ldrb	r3, [sp, #148]	; 0x94
   27098:	cmp	r3, #0
   2709c:	moveq	r7, #63	; 0x3f
   270a0:	beq	2734c <__assert_fail@plt+0x14d88>
   270a4:	add	r3, sp, #148	; 0x94
   270a8:	mov	r2, r3
   270ac:	mov	r0, #1
   270b0:	ldrb	r1, [r2]
   270b4:	cmp	r1, #46	; 0x2e
   270b8:	addne	r3, r3, #1
   270bc:	moveq	r7, r0
   270c0:	ldrb	r1, [r2, #1]!
   270c4:	strb	r1, [r3]
   270c8:	cmp	r1, #0
   270cc:	bne	270b0 <__assert_fail@plt+0x14aec>
   270d0:	cmp	r7, #0
   270d4:	beq	27128 <__assert_fail@plt+0x14b64>
   270d8:	add	r1, sp, #148	; 0x94
   270dc:	ldr	r0, [sp, #96]	; 0x60
   270e0:	bl	266b4 <__assert_fail@plt+0x140f0>
   270e4:	subs	r5, r0, #0
   270e8:	moveq	r7, #63	; 0x3f
   270ec:	bne	2710c <__assert_fail@plt+0x14b48>
   270f0:	b	2734c <__assert_fail@plt+0x14d88>
   270f4:	ldrb	r2, [r2]
   270f8:	cmp	r2, r3
   270fc:	bne	27088 <__assert_fail@plt+0x14ac4>
   27100:	cmp	r5, #0
   27104:	moveq	r7, #63	; 0x3f
   27108:	beq	2734c <__assert_fail@plt+0x14d88>
   2710c:	ldr	r2, [r5, #8]
   27110:	asr	r3, r2, #31
   27114:	add	r1, sp, #1376	; 0x560
   27118:	add	r1, r1, #8
   2711c:	strd	r2, [r1]
   27120:	ldr	r7, [r5, #4]
   27124:	b	2734c <__assert_fail@plt+0x14d88>
   27128:	mov	r7, #63	; 0x3f
   2712c:	b	2734c <__assert_fail@plt+0x14d88>
   27130:	add	r3, r6, #1
   27134:	ldr	r2, [sp, #96]	; 0x60
   27138:	str	r3, [r2]
   2713c:	ldrb	r7, [r6]
   27140:	b	2734c <__assert_fail@plt+0x14d88>
   27144:	cmp	r1, #0
   27148:	beq	26b24 <__assert_fail@plt+0x14560>
   2714c:	ldr	r3, [r0]
   27150:	add	r2, r3, #1
   27154:	str	r2, [r0]
   27158:	ldrb	r3, [r3]
   2715c:	cmp	r3, #0
   27160:	beq	27194 <__assert_fail@plt+0x14bd0>
   27164:	cmp	r3, #40	; 0x28
   27168:	addeq	r1, r1, #1
   2716c:	beq	27144 <__assert_fail@plt+0x14b80>
   27170:	cmp	r3, #41	; 0x29
   27174:	subeq	r1, r1, #1
   27178:	b	27144 <__assert_fail@plt+0x14b80>
   2717c:	mov	r7, #63	; 0x3f
   27180:	b	27354 <__assert_fail@plt+0x14d90>
   27184:	mov	r7, #63	; 0x3f
   27188:	b	27354 <__assert_fail@plt+0x14d90>
   2718c:	mov	r7, #63	; 0x3f
   27190:	b	27354 <__assert_fail@plt+0x14d90>
   27194:	mov	r3, #0
   27198:	mov	r7, r3
   2719c:	b	27364 <__assert_fail@plt+0x14da0>
   271a0:	mov	r3, #0
   271a4:	mov	r7, r3
   271a8:	b	27364 <__assert_fail@plt+0x14da0>
   271ac:	add	r4, r9, r4
   271b0:	ldrb	r8, [r4, #2388]	; 0x954
   271b4:	cmp	r8, #0
   271b8:	rsble	r6, r8, #0
   271bc:	ble	27394 <__assert_fail@plt+0x14dd0>
   271c0:	ldr	r3, [sp, #100]	; 0x64
   271c4:	cmp	r3, #0
   271c8:	subne	r3, r3, #1
   271cc:	strne	r3, [sp, #100]	; 0x64
   271d0:	add	sl, sl, #56	; 0x38
   271d4:	add	r1, sp, #1392	; 0x570
   271d8:	ldrd	r2, [sp, #112]	; 0x70
   271dc:	strd	r2, [r1]
   271e0:	ldr	r3, [sp, #124]	; 0x7c
   271e4:	str	r3, [sp, #1400]	; 0x578
   271e8:	mov	ip, sl
   271ec:	add	lr, sp, #1376	; 0x560
   271f0:	add	lr, lr, #8
   271f4:	ldm	lr!, {r0, r1, r2, r3}
   271f8:	stmia	ip!, {r0, r1, r2, r3}
   271fc:	ldm	lr!, {r0, r1, r2, r3}
   27200:	stmia	ip!, {r0, r1, r2, r3}
   27204:	ldm	lr!, {r0, r1, r2, r3}
   27208:	stmia	ip!, {r0, r1, r2, r3}
   2720c:	ldm	lr, {r0, r1}
   27210:	stm	ip, {r0, r1}
   27214:	mov	lr, fp
   27218:	mvn	r7, #1
   2721c:	b	2730c <__assert_fail@plt+0x14d48>
   27220:	ldr	r2, [sp, #96]	; 0x60
   27224:	add	r3, r2, #88	; 0x58
   27228:	ldm	sl, {r0, r1}
   2722c:	stm	r3, {r0, r1}
   27230:	mov	r3, #1
   27234:	strb	r3, [r2, #152]	; 0x98
   27238:	mov	r2, #5
   2723c:	ldr	r1, [pc, #2080]	; 27a64 <__assert_fail@plt+0x154a0>
   27240:	mov	r0, #0
   27244:	bl	12084 <dcgettext@plt>
   27248:	rsb	r3, r8, r8, lsl #3
   2724c:	sub	sl, sl, r3, lsl #3
   27250:	sub	lr, fp, r8, lsl #1
   27254:	add	sl, sl, #56	; 0x38
   27258:	ldr	r3, [sp, #72]	; 0x48
   2725c:	str	r3, [sp, #176]	; 0xb0
   27260:	ldr	r3, [sp, #76]	; 0x4c
   27264:	str	r3, [sp, #180]	; 0xb4
   27268:	ldrd	r2, [sp, #56]	; 0x38
   2726c:	strd	r2, [sp, #184]	; 0xb8
   27270:	ldr	r3, [sp, #88]	; 0x58
   27274:	str	r3, [sp, #192]	; 0xc0
   27278:	ldr	r3, [sp, #92]	; 0x5c
   2727c:	str	r3, [sp, #196]	; 0xc4
   27280:	ldr	r3, [sp, #80]	; 0x50
   27284:	str	r3, [sp, #200]	; 0xc8
   27288:	ldr	r3, [sp, #84]	; 0x54
   2728c:	str	r3, [sp, #204]	; 0xcc
   27290:	strd	r4, [sp, #208]	; 0xd0
   27294:	ldr	r3, [sp, #68]	; 0x44
   27298:	str	r3, [sp, #216]	; 0xd8
   2729c:	mov	r4, sl
   272a0:	add	ip, sp, #168	; 0xa8
   272a4:	ldm	ip!, {r0, r1, r2, r3}
   272a8:	stmia	r4!, {r0, r1, r2, r3}
   272ac:	ldm	ip!, {r0, r1, r2, r3}
   272b0:	stmia	r4!, {r0, r1, r2, r3}
   272b4:	ldm	ip!, {r0, r1, r2, r3}
   272b8:	stmia	r4!, {r0, r1, r2, r3}
   272bc:	ldm	ip, {r0, r1}
   272c0:	stm	r4, {r0, r1}
   272c4:	add	r6, r9, r6
   272c8:	ldrb	r3, [r6, #2712]	; 0xa98
   272cc:	sub	r3, r3, #28
   272d0:	ldrsh	r0, [lr]
   272d4:	add	r2, r9, r3
   272d8:	add	r2, r2, #2800	; 0xaf0
   272dc:	ldrsb	r2, [r2, #4]
   272e0:	add	r2, r2, r0
   272e4:	cmp	r2, #112	; 0x70
   272e8:	bhi	27300 <__assert_fail@plt+0x14d3c>
   272ec:	add	r1, r9, r2
   272f0:	add	r1, r1, #2272	; 0x8e0
   272f4:	ldrsb	r1, [r1]
   272f8:	cmp	r1, r0
   272fc:	beq	28bd8 <__assert_fail@plt+0x16614>
   27300:	add	r3, r9, r3
   27304:	add	r3, r3, #2832	; 0xb10
   27308:	ldrsb	r8, [r3]
   2730c:	add	fp, lr, #2
   27310:	strh	r8, [lr, #2]
   27314:	add	r3, sp, #1376	; 0x560
   27318:	add	r3, r3, #6
   2731c:	cmp	fp, r3
   27320:	bcs	28cb8 <__assert_fail@plt+0x166f4>
   27324:	cmp	r8, #12
   27328:	beq	28d08 <__assert_fail@plt+0x16744>
   2732c:	add	r3, r9, r8
   27330:	add	r3, r3, #1120	; 0x460
   27334:	ldrsb	r4, [r3, #12]
   27338:	cmn	r4, #93	; 0x5d
   2733c:	beq	27384 <__assert_fail@plt+0x14dc0>
   27340:	cmn	r7, #2
   27344:	ldreq	r0, [sp, #96]	; 0x60
   27348:	beq	26b24 <__assert_fail@plt+0x14560>
   2734c:	cmp	r7, #0
   27350:	ble	271a0 <__assert_fail@plt+0x14bdc>
   27354:	ldr	r3, [pc, #1768]	; 27a44 <__assert_fail@plt+0x15480>
   27358:	cmp	r7, r3
   2735c:	movhi	r3, #2
   27360:	bls	26e04 <__assert_fail@plt+0x14840>
   27364:	add	r4, r3, r4
   27368:	cmp	r4, #112	; 0x70
   2736c:	bhi	27384 <__assert_fail@plt+0x14dc0>
   27370:	add	r2, r9, r4
   27374:	add	r2, r2, #2272	; 0x8e0
   27378:	ldrsb	r2, [r2]
   2737c:	cmp	r3, r2
   27380:	beq	271ac <__assert_fail@plt+0x14be8>
   27384:	add	r3, r9, r8
   27388:	ldrb	r6, [r3, #2504]	; 0x9c8
   2738c:	cmp	r6, #0
   27390:	beq	28be4 <__assert_fail@plt+0x16620>
   27394:	add	r3, r9, r6
   27398:	ldrb	r8, [r3, #2620]	; 0xa3c
   2739c:	str	r8, [sp, #104]	; 0x68
   273a0:	rsb	lr, r8, #1
   273a4:	rsb	lr, lr, lr, lsl #3
   273a8:	add	lr, sl, lr, lsl #3
   273ac:	add	ip, sp, #168	; 0xa8
   273b0:	mov	r4, lr
   273b4:	ldm	r4!, {r0, r1, r2, r3}
   273b8:	stmia	ip!, {r0, r1, r2, r3}
   273bc:	ldm	r4!, {r0, r1, r2, r3}
   273c0:	stmia	ip!, {r0, r1, r2, r3}
   273c4:	ldm	r4!, {r0, r1, r2, r3}
   273c8:	stmia	ip!, {r0, r1, r2, r3}
   273cc:	ldm	r4, {r0, r1}
   273d0:	stm	ip, {r0, r1}
   273d4:	ldr	r3, [lr, #8]
   273d8:	str	r3, [sp, #72]	; 0x48
   273dc:	ldr	r3, [lr, #12]
   273e0:	str	r3, [sp, #76]	; 0x4c
   273e4:	ldrd	r2, [lr, #16]
   273e8:	strd	r2, [sp, #56]	; 0x38
   273ec:	ldr	r3, [lr, #24]
   273f0:	str	r3, [sp, #88]	; 0x58
   273f4:	ldr	r3, [lr, #28]
   273f8:	str	r3, [sp, #92]	; 0x5c
   273fc:	ldr	r3, [lr, #32]
   27400:	str	r3, [sp, #80]	; 0x50
   27404:	ldr	r3, [lr, #36]	; 0x24
   27408:	str	r3, [sp, #84]	; 0x54
   2740c:	ldrd	r4, [lr, #40]	; 0x28
   27410:	ldr	r3, [lr, #48]	; 0x30
   27414:	str	r3, [sp, #68]	; 0x44
   27418:	sub	r3, r6, #4
   2741c:	cmp	r3, #87	; 0x57
   27420:	ldrls	pc, [pc, r3, lsl #2]
   27424:	b	27248 <__assert_fail@plt+0x14c84>
   27428:	andeq	r7, r2, r0, lsr #4
   2742c:	andeq	r7, r2, r8, asr #4
   27430:	andeq	r7, r2, r8, asr #4
   27434:	andeq	r7, r2, r8, lsl #11
   27438:			; <UNDEFINED> instruction: 0x000275b8
   2743c:	ldrdeq	r7, [r2], -ip
   27440:	andeq	r7, r2, r0, lsl #12
   27444:	andeq	r7, r2, r4, lsr #12
   27448:	andeq	r7, r2, r8, asr #12
   2744c:	andeq	r7, r2, ip, ror #12
   27450:	andeq	r7, r2, r0, lsl #13
   27454:	muleq	r2, r4, r6
   27458:	andeq	r7, r2, r8, asr #4
   2745c:	andeq	r7, r2, r8, asr #4
   27460:	andeq	r7, r2, r8, lsr #13
   27464:	ldrdeq	r7, [r2], -r8
   27468:	andeq	r7, r2, r4, lsl #14
   2746c:	andeq	r7, r2, r8, asr #4
   27470:	andeq	r7, r2, r0, asr #14
   27474:	andeq	r7, r2, r0, ror r7
   27478:	muleq	r2, ip, r7
   2747c:	andeq	r7, r2, r8, asr #4
   27480:	andeq	r7, r2, r8, asr #4
   27484:	ldrdeq	r7, [r2], -r8
   27488:	andeq	r7, r2, ip, lsl r8
   2748c:	andeq	r7, r2, ip, lsr #16
   27490:	andeq	r7, r2, r8, asr #16
   27494:	andeq	r7, r2, r8, asr r8
   27498:	andeq	r7, r2, r8, ror #16
   2749c:	andeq	r7, r2, r4, asr #17
   274a0:	andeq	r7, r2, r0, lsr #18
   274a4:	andeq	r7, r2, r0, ror #21
   274a8:	strdeq	r7, [r2], -r4
   274ac:	andeq	r7, r2, r8, lsl #22
   274b0:	andeq	r7, r2, r4, lsr #22
   274b4:	andeq	r7, r2, r0, asr #22
   274b8:	andeq	r7, r2, r0, ror #22
   274bc:	andeq	r7, r2, r0, lsl #23
   274c0:	muleq	r2, r8, fp
   274c4:	andeq	r7, r2, r8, lsl #24
   274c8:	andeq	r7, r2, r4, ror ip
   274cc:	andeq	r7, r2, r4, lsr #26
   274d0:	andeq	r7, r2, ip, lsr sp
   274d4:	andeq	r7, r2, ip, ror #26
   274d8:	andeq	r7, r2, r4, lsl #27
   274dc:	andeq	r7, r2, r8, asr #4
   274e0:			; <UNDEFINED> instruction: 0x00027db4
   274e4:	andeq	r7, r2, ip, ror #28
   274e8:			; <UNDEFINED> instruction: 0x00027eb4
   274ec:	strdeq	r7, [r2], -r8
   274f0:	andeq	r7, r2, ip, lsr pc
   274f4:	andeq	r7, r2, r4, lsl #31
   274f8:	andeq	r7, r2, ip, asr #31
   274fc:	andeq	r8, r2, r8, lsl r0
   27500:	andeq	r8, r2, r0, rrx
   27504:	andeq	r8, r2, r8, lsr #1
   27508:	strdeq	r8, [r2], -r0
   2750c:	muleq	r2, r4, r2
   27510:	andeq	r8, r2, r8, lsr r4
   27514:	andeq	r8, r2, ip, ror r4
   27518:	andeq	r8, r2, r4, asr #9
   2751c:	andeq	r8, r2, ip, lsl #10
   27520:	andeq	r8, r2, r4, asr r5
   27524:	muleq	r2, ip, r5
   27528:	andeq	r8, r2, r4, ror #11
   2752c:	andeq	r8, r2, ip, lsr #12
   27530:	andeq	r8, r2, ip, ror #12
   27534:	andeq	r8, r2, ip, lsr #13
   27538:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2753c:	andeq	r8, r2, r4, asr #14
   27540:	andeq	r7, r2, r8, asr #4
   27544:	andeq	r8, r2, r8, lsl #15
   27548:	ldrdeq	r8, [r2], -r0
   2754c:	andeq	r8, r2, r8, lsl r8
   27550:			; <UNDEFINED> instruction: 0x000289bc
   27554:	andeq	r8, r2, r4, lsl #20
   27558:	andeq	r8, r2, ip, asr #20
   2755c:	andeq	r8, r2, ip, lsl #21
   27560:	andeq	r7, r2, r8, asr #4
   27564:	andeq	r7, r2, r8, asr #4
   27568:	andeq	r7, r2, r8, asr #4
   2756c:	ldrdeq	r8, [r2], -r0
   27570:	andeq	r7, r2, r8, asr #4
   27574:	andeq	r8, r2, r8, lsl #22
   27578:	andeq	r8, r2, r0, asr #22
   2757c:	andeq	r8, r2, ip, asr fp
   27580:			; <UNDEFINED> instruction: 0x00028bbc
   27584:	andeq	r8, r2, ip, asr #23
   27588:	ldr	r2, [sp, #96]	; 0x60
   2758c:	ldr	r3, [r2, #172]	; 0xac
   27590:	add	r3, r3, #1
   27594:	str	r3, [r2, #172]	; 0xac
   27598:	ldr	r3, [r2, #156]	; 0x9c
   2759c:	add	r3, r3, #1
   275a0:	str	r3, [r2, #156]	; 0x9c
   275a4:	mov	r2, #5
   275a8:	ldr	r1, [pc, #1208]	; 27a68 <__assert_fail@plt+0x154a4>
   275ac:	mov	r0, #0
   275b0:	bl	12084 <dcgettext@plt>
   275b4:	b	27248 <__assert_fail@plt+0x14c84>
   275b8:	ldr	r2, [sp, #96]	; 0x60
   275bc:	ldr	r3, [r2, #172]	; 0xac
   275c0:	add	r3, r3, #1
   275c4:	str	r3, [r2, #172]	; 0xac
   275c8:	mov	r2, #5
   275cc:	ldr	r1, [pc, #1176]	; 27a6c <__assert_fail@plt+0x154a8>
   275d0:	mov	r0, #0
   275d4:	bl	12084 <dcgettext@plt>
   275d8:	b	27248 <__assert_fail@plt+0x14c84>
   275dc:	ldr	r2, [sp, #96]	; 0x60
   275e0:	ldr	r3, [r2, #164]	; 0xa4
   275e4:	add	r3, r3, #1
   275e8:	str	r3, [r2, #164]	; 0xa4
   275ec:	mov	r2, #5
   275f0:	ldr	r1, [pc, #1144]	; 27a70 <__assert_fail@plt+0x154ac>
   275f4:	mov	r0, #0
   275f8:	bl	12084 <dcgettext@plt>
   275fc:	b	27248 <__assert_fail@plt+0x14c84>
   27600:	ldr	r2, [sp, #96]	; 0x60
   27604:	ldr	r3, [r2, #176]	; 0xb0
   27608:	add	r3, r3, #1
   2760c:	str	r3, [r2, #176]	; 0xb0
   27610:	mov	r2, #5
   27614:	ldr	r1, [pc, #1112]	; 27a74 <__assert_fail@plt+0x154b0>
   27618:	mov	r0, #0
   2761c:	bl	12084 <dcgettext@plt>
   27620:	b	27248 <__assert_fail@plt+0x14c84>
   27624:	ldr	r2, [sp, #96]	; 0x60
   27628:	ldr	r3, [r2, #156]	; 0x9c
   2762c:	add	r3, r3, #1
   27630:	str	r3, [r2, #156]	; 0x9c
   27634:	mov	r2, #5
   27638:	ldr	r1, [pc, #1080]	; 27a78 <__assert_fail@plt+0x154b4>
   2763c:	mov	r0, #0
   27640:	bl	12084 <dcgettext@plt>
   27644:	b	27248 <__assert_fail@plt+0x14c84>
   27648:	ldr	r2, [sp, #96]	; 0x60
   2764c:	ldr	r3, [r2, #160]	; 0xa0
   27650:	add	r3, r3, #1
   27654:	str	r3, [r2, #160]	; 0xa0
   27658:	mov	r2, #5
   2765c:	ldr	r1, [pc, #1048]	; 27a7c <__assert_fail@plt+0x154b8>
   27660:	mov	r0, #0
   27664:	bl	12084 <dcgettext@plt>
   27668:	b	27248 <__assert_fail@plt+0x14c84>
   2766c:	mov	r2, #5
   27670:	ldr	r1, [pc, #1032]	; 27a80 <__assert_fail@plt+0x154bc>
   27674:	mov	r0, #0
   27678:	bl	12084 <dcgettext@plt>
   2767c:	b	27248 <__assert_fail@plt+0x14c84>
   27680:	mov	r2, #5
   27684:	ldr	r1, [pc, #1016]	; 27a84 <__assert_fail@plt+0x154c0>
   27688:	mov	r0, #0
   2768c:	bl	12084 <dcgettext@plt>
   27690:	b	27248 <__assert_fail@plt+0x14c84>
   27694:	mov	r2, #5
   27698:	ldr	r1, [pc, #1000]	; 27a88 <__assert_fail@plt+0x154c4>
   2769c:	mov	r0, #0
   276a0:	bl	12084 <dcgettext@plt>
   276a4:	b	27248 <__assert_fail@plt+0x14c84>
   276a8:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   276ac:	ldr	r1, [sp, #96]	; 0x60
   276b0:	strd	r2, [r1, #72]	; 0x48
   276b4:	mov	r2, #0
   276b8:	mov	r3, #0
   276bc:	strd	r2, [r1, #80]	; 0x50
   276c0:	mov	r3, #0
   276c4:	str	r3, [r1, #88]	; 0x58
   276c8:	str	r3, [r1, #92]	; 0x5c
   276cc:	ldr	r3, [sl]
   276d0:	str	r3, [r1, #28]
   276d4:	b	27248 <__assert_fail@plt+0x14c84>
   276d8:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   276dc:	ldrd	r2, [sl, #-160]	; 0xffffff60
   276e0:	ldr	ip, [sp, #96]	; 0x60
   276e4:	strd	r2, [ip, #72]	; 0x48
   276e8:	strd	r0, [ip, #80]	; 0x50
   276ec:	mov	r3, #0
   276f0:	str	r3, [ip, #88]	; 0x58
   276f4:	str	r3, [ip, #92]	; 0x5c
   276f8:	ldr	r3, [sl]
   276fc:	str	r3, [ip, #28]
   27700:	b	27248 <__assert_fail@plt+0x14c84>
   27704:	ldrd	r2, [sl, #-160]	; 0xffffff60
   27708:	strd	r2, [sp, #104]	; 0x68
   2770c:	ldr	lr, [sl, #-56]	; 0xffffffc8
   27710:	ldr	ip, [sl, #-52]	; 0xffffffcc
   27714:	sub	r3, sl, #272	; 0x110
   27718:	ldrd	r2, [r3]
   2771c:	ldr	r1, [sp, #96]	; 0x60
   27720:	strd	r2, [r1, #72]	; 0x48
   27724:	ldrd	r2, [sp, #104]	; 0x68
   27728:	strd	r2, [r1, #80]	; 0x50
   2772c:	str	lr, [r1, #88]	; 0x58
   27730:	str	ip, [r1, #92]	; 0x5c
   27734:	ldr	r3, [sl]
   27738:	str	r3, [r1, #28]
   2773c:	b	27248 <__assert_fail@plt+0x14c84>
   27740:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   27744:	ldr	r1, [sp, #96]	; 0x60
   27748:	strd	r2, [r1, #72]	; 0x48
   2774c:	mov	r2, #0
   27750:	mov	r3, #0
   27754:	strd	r2, [r1, #80]	; 0x50
   27758:	mov	r3, #0
   2775c:	str	r3, [r1, #88]	; 0x58
   27760:	str	r3, [r1, #92]	; 0x5c
   27764:	mov	r3, #2
   27768:	str	r3, [r1, #28]
   2776c:	b	27248 <__assert_fail@plt+0x14c84>
   27770:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   27774:	ldrd	r2, [sl, #-160]	; 0xffffff60
   27778:	ldr	ip, [sp, #96]	; 0x60
   2777c:	strd	r2, [ip, #72]	; 0x48
   27780:	strd	r0, [ip, #80]	; 0x50
   27784:	mov	r3, #0
   27788:	str	r3, [ip, #88]	; 0x58
   2778c:	str	r3, [ip, #92]	; 0x5c
   27790:	mov	r3, #2
   27794:	str	r3, [ip, #28]
   27798:	b	27248 <__assert_fail@plt+0x14c84>
   2779c:	ldrd	r2, [sl, #-160]	; 0xffffff60
   277a0:	strd	r2, [sp, #104]	; 0x68
   277a4:	ldr	lr, [sl, #-56]	; 0xffffffc8
   277a8:	ldr	ip, [sl, #-52]	; 0xffffffcc
   277ac:	sub	r3, sl, #272	; 0x110
   277b0:	ldrd	r2, [r3]
   277b4:	ldr	r1, [sp, #96]	; 0x60
   277b8:	strd	r2, [r1, #72]	; 0x48
   277bc:	ldrd	r2, [sp, #104]	; 0x68
   277c0:	strd	r2, [r1, #80]	; 0x50
   277c4:	str	lr, [r1, #88]	; 0x58
   277c8:	str	ip, [r1, #92]	; 0x5c
   277cc:	mov	r3, #2
   277d0:	str	r3, [r1, #28]
   277d4:	b	27248 <__assert_fail@plt+0x14c84>
   277d8:	ldr	ip, [sp, #96]	; 0x60
   277dc:	ldr	r3, [ip, #176]	; 0xb0
   277e0:	add	r3, r3, #1
   277e4:	str	r3, [ip, #176]	; 0xb0
   277e8:	mov	r3, sl
   277ec:	ldrd	r0, [r3], #-48	; 0xffffffd0
   277f0:	strd	r0, [sp, #16]
   277f4:	ldm	r3, {r0, r1, r2, r3}
   277f8:	stm	sp, {r0, r1, r2, r3}
   277fc:	sub	r3, sl, #56	; 0x38
   27800:	ldm	r3, {r2, r3}
   27804:	mov	r0, ip
   27808:	bl	26428 <__assert_fail@plt+0x13e64>
   2780c:	cmp	r0, #0
   27810:	bne	27248 <__assert_fail@plt+0x14c84>
   27814:	mov	r0, #1
   27818:	b	28cc4 <__assert_fail@plt+0x16700>
   2781c:	ldr	r3, [sl]
   27820:	ldr	r2, [sp, #96]	; 0x60
   27824:	str	r3, [r2, #20]
   27828:	b	27248 <__assert_fail@plt+0x14c84>
   2782c:	mov	r3, #1
   27830:	ldr	r2, [sp, #96]	; 0x60
   27834:	str	r3, [r2, #20]
   27838:	ldr	r3, [r2, #168]	; 0xa8
   2783c:	add	r3, r3, #1
   27840:	str	r3, [r2, #168]	; 0xa8
   27844:	b	27248 <__assert_fail@plt+0x14c84>
   27848:	ldr	r3, [sl]
   2784c:	ldr	r2, [sp, #96]	; 0x60
   27850:	str	r3, [r2, #24]
   27854:	b	27248 <__assert_fail@plt+0x14c84>
   27858:	ldr	r3, [pc, #556]	; 27a8c <__assert_fail@plt+0x154c8>
   2785c:	ldr	r2, [sp, #96]	; 0x60
   27860:	str	r3, [r2, #24]
   27864:	b	27248 <__assert_fail@plt+0x14c84>
   27868:	ldr	r3, [sl, #-56]	; 0xffffffc8
   2786c:	ldr	r2, [sp, #96]	; 0x60
   27870:	str	r3, [r2, #24]
   27874:	mov	r3, #1
   27878:	str	r3, [sp, #48]	; 0x30
   2787c:	mov	ip, sp
   27880:	add	lr, sl, #8
   27884:	ldm	lr!, {r0, r1, r2, r3}
   27888:	stmia	ip!, {r0, r1, r2, r3}
   2788c:	ldm	lr!, {r0, r1, r2, r3}
   27890:	stmia	ip!, {r0, r1, r2, r3}
   27894:	ldm	lr, {r0, r1, r2, r3}
   27898:	stm	ip, {r0, r1, r2, r3}
   2789c:	ldm	sl, {r2, r3}
   278a0:	ldr	r0, [sp, #96]	; 0x60
   278a4:	bl	25a68 <__assert_fail@plt+0x134a4>
   278a8:	cmp	r0, #0
   278ac:	beq	28d18 <__assert_fail@plt+0x16754>
   278b0:	mov	r2, #5
   278b4:	ldr	r1, [pc, #452]	; 27a80 <__assert_fail@plt+0x154bc>
   278b8:	mov	r0, #0
   278bc:	bl	12084 <dcgettext@plt>
   278c0:	b	27248 <__assert_fail@plt+0x14c84>
   278c4:	ldr	r3, [pc, #448]	; 27a8c <__assert_fail@plt+0x154c8>
   278c8:	ldr	r2, [sp, #96]	; 0x60
   278cc:	str	r3, [r2, #24]
   278d0:	mov	r3, #1
   278d4:	str	r3, [sp, #48]	; 0x30
   278d8:	mov	ip, sp
   278dc:	add	lr, sl, #8
   278e0:	ldm	lr!, {r0, r1, r2, r3}
   278e4:	stmia	ip!, {r0, r1, r2, r3}
   278e8:	ldm	lr!, {r0, r1, r2, r3}
   278ec:	stmia	ip!, {r0, r1, r2, r3}
   278f0:	ldm	lr, {r0, r1, r2, r3}
   278f4:	stm	ip, {r0, r1, r2, r3}
   278f8:	ldm	sl, {r2, r3}
   278fc:	ldr	r0, [sp, #96]	; 0x60
   27900:	bl	25a68 <__assert_fail@plt+0x134a4>
   27904:	cmp	r0, #0
   27908:	beq	28d20 <__assert_fail@plt+0x1675c>
   2790c:	mov	r2, #5
   27910:	ldr	r1, [pc, #360]	; 27a80 <__assert_fail@plt+0x154bc>
   27914:	mov	r0, #0
   27918:	bl	12084 <dcgettext@plt>
   2791c:	b	27248 <__assert_fail@plt+0x14c84>
   27920:	mov	r3, sl
   27924:	ldrd	r0, [r3], #-48	; 0xffffffd0
   27928:	strd	r0, [sp, #16]
   2792c:	ldm	r3, {r0, r1, r2, r3}
   27930:	stm	sp, {r0, r1, r2, r3}
   27934:	sub	r3, sl, #56	; 0x38
   27938:	ldm	r3, {r2, r3}
   2793c:	ldr	r0, [sp, #96]	; 0x60
   27940:	bl	26428 <__assert_fail@plt+0x13e64>
   27944:	cmp	r0, #0
   27948:	beq	28d28 <__assert_fail@plt+0x16764>
   2794c:	ldrd	r2, [sl, #-112]	; 0xffffff90
   27950:	strd	r2, [sp, #128]	; 0x80
   27954:	cmp	r2, #0
   27958:	sbcs	r3, r3, #0
   2795c:	blt	279cc <__assert_fail@plt+0x15408>
   27960:	ldr	r3, [sp, #96]	; 0x60
   27964:	ldr	ip, [r3, #24]
   27968:	cmp	ip, #0
   2796c:	blt	27a90 <__assert_fail@plt+0x154cc>
   27970:	ldrd	r2, [sp, #128]	; 0x80
   27974:	cmp	r2, #-2147483648	; 0x80000000
   27978:	sbcs	r1, r3, #0
   2797c:	bge	27ac4 <__assert_fail@plt+0x15500>
   27980:	mvn	r0, #-2147483648	; 0x80000000
   27984:	mov	r1, #0
   27988:	subs	r2, r0, r2
   2798c:	sbc	r3, r1, r3
   27990:	mov	r0, r2
   27994:	mov	r1, r3
   27998:	asr	r3, ip, #31
   2799c:	cmp	r0, ip
   279a0:	sbcs	r3, r1, r3
   279a4:	movlt	r3, #1
   279a8:	movge	r3, #0
   279ac:	cmp	r3, #0
   279b0:	bne	27ac4 <__assert_fail@plt+0x15500>
   279b4:	ldr	r2, [sp, #96]	; 0x60
   279b8:	ldr	r3, [r2, #24]
   279bc:	ldr	r1, [sp, #128]	; 0x80
   279c0:	add	r3, r3, r1
   279c4:	str	r3, [r2, #24]
   279c8:	b	27248 <__assert_fail@plt+0x14c84>
   279cc:	ldr	r3, [sp, #96]	; 0x60
   279d0:	ldr	ip, [r3, #24]
   279d4:	mov	r2, ip
   279d8:	asr	r3, ip, #31
   279dc:	strd	r2, [sp, #136]	; 0x88
   279e0:	mov	r2, #-2147483648	; 0x80000000
   279e4:	mvn	r3, #0
   279e8:	ldrd	r0, [sp, #128]	; 0x80
   279ec:	subs	r0, r2, r0
   279f0:	sbc	r1, r3, r1
   279f4:	mov	r2, r0
   279f8:	mov	r3, r1
   279fc:	ldrd	r0, [sp, #136]	; 0x88
   27a00:	cmp	r0, r2
   27a04:	sbcs	r3, r1, r3
   27a08:	movlt	r3, #1
   27a0c:	blt	279ac <__assert_fail@plt+0x153e8>
   27a10:	cmp	ip, #0
   27a14:	movlt	r3, #0
   27a18:	blt	279ac <__assert_fail@plt+0x153e8>
   27a1c:	ldrd	r2, [sp, #128]	; 0x80
   27a20:	adds	r2, r2, r0
   27a24:	adc	r3, r3, r1
   27a28:	cmp	r2, #-2147483648	; 0x80000000
   27a2c:	sbcs	r3, r3, #0
   27a30:	movge	r3, #1
   27a34:	movlt	r3, #0
   27a38:	b	279ac <__assert_fail@plt+0x153e8>
   27a3c:			; <UNDEFINED> instruction: 0x00046db8
   27a40:	stcleq	12, cr12, [ip], {204}	; 0xcc
   27a44:	andeq	r0, r0, r5, lsl r1
   27a48:	andeq	r0, r0, r3, lsl r1
   27a4c:	andeq	r0, r0, r2, lsl r1
   27a50:	andeq	r7, r4, r0, asr #18
   27a54:	andeq	r7, r4, r4, asr #18
   27a58:	andeq	r7, r4, r0, ror #18
   27a5c:	andeq	r7, r4, ip, asr #18
   27a60:	andeq	r7, r4, r4, asr r9
   27a64:	andeq	r7, r4, r4, ror #18
   27a68:	andeq	r7, r4, r8, ror r9
   27a6c:	andeq	r7, r4, ip, ror r9
   27a70:	andeq	r7, r4, r4, lsl #19
   27a74:	muleq	r4, r0, r9
   27a78:	muleq	r4, r8, r9
   27a7c:	andeq	r7, r4, r0, lsr #19
   27a80:	andeq	r7, r4, r4, lsr #19
   27a84:			; <UNDEFINED> instruction: 0x000479b0
   27a88:			; <UNDEFINED> instruction: 0x000479b8
   27a8c:			; <UNDEFINED> instruction: 0xffff9d90
   27a90:	rsb	r0, ip, #-2147483648	; 0x80000000
   27a94:	asr	r1, r0, #31
   27a98:	ldrd	r2, [sp, #128]	; 0x80
   27a9c:	cmp	r2, r0
   27aa0:	sbcs	r1, r3, r1
   27aa4:	blt	27ac4 <__assert_fail@plt+0x15500>
   27aa8:	adds	r2, r2, ip
   27aac:	adc	r3, r3, ip, asr #31
   27ab0:	cmp	r2, #-2147483648	; 0x80000000
   27ab4:	sbcs	r3, r3, #0
   27ab8:	movge	r3, #1
   27abc:	movlt	r3, #0
   27ac0:	b	279ac <__assert_fail@plt+0x153e8>
   27ac4:	ldr	r2, [sp, #96]	; 0x60
   27ac8:	ldr	r3, [r2, #24]
   27acc:	ldr	r1, [sp, #128]	; 0x80
   27ad0:	add	r3, r3, r1
   27ad4:	str	r3, [r2, #24]
   27ad8:	mov	r0, #1
   27adc:	b	28cc4 <__assert_fail@plt+0x16700>
   27ae0:	ldr	r3, [sl]
   27ae4:	add	r3, r3, #3600	; 0xe10
   27ae8:	ldr	r2, [sp, #96]	; 0x60
   27aec:	str	r3, [r2, #24]
   27af0:	b	27248 <__assert_fail@plt+0x14c84>
   27af4:	ldr	r3, [sl, #-56]	; 0xffffffc8
   27af8:	add	r3, r3, #3600	; 0xe10
   27afc:	ldr	r2, [sp, #96]	; 0x60
   27b00:	str	r3, [r2, #24]
   27b04:	b	27248 <__assert_fail@plt+0x14c84>
   27b08:	mov	r2, #0
   27b0c:	mov	r3, #0
   27b10:	ldr	r1, [sp, #96]	; 0x60
   27b14:	strd	r2, [r1, #8]
   27b18:	ldr	r3, [sl]
   27b1c:	str	r3, [r1, #16]
   27b20:	b	27248 <__assert_fail@plt+0x14c84>
   27b24:	mov	r2, #0
   27b28:	mov	r3, #0
   27b2c:	ldr	r1, [sp, #96]	; 0x60
   27b30:	strd	r2, [r1, #8]
   27b34:	ldr	r3, [sl, #-56]	; 0xffffffc8
   27b38:	str	r3, [r1, #16]
   27b3c:	b	27248 <__assert_fail@plt+0x14c84>
   27b40:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   27b44:	ldr	r1, [sp, #96]	; 0x60
   27b48:	strd	r2, [r1, #8]
   27b4c:	ldr	r3, [sl]
   27b50:	str	r3, [r1, #16]
   27b54:	mov	r3, #1
   27b58:	strb	r3, [r1, #187]	; 0xbb
   27b5c:	b	27248 <__assert_fail@plt+0x14c84>
   27b60:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   27b64:	ldr	r1, [sp, #96]	; 0x60
   27b68:	strd	r2, [r1, #8]
   27b6c:	ldr	r3, [sl]
   27b70:	str	r3, [r1, #16]
   27b74:	mov	r3, #1
   27b78:	strb	r3, [r1, #187]	; 0xbb
   27b7c:	b	27248 <__assert_fail@plt+0x14c84>
   27b80:	ldrd	r2, [sl, #-104]	; 0xffffff98
   27b84:	ldr	r1, [sp, #96]	; 0x60
   27b88:	strd	r2, [r1, #56]	; 0x38
   27b8c:	ldrd	r2, [sl, #8]
   27b90:	strd	r2, [r1, #64]	; 0x40
   27b94:	b	27248 <__assert_fail@plt+0x14c84>
   27b98:	ldr	r3, [sl, #-208]	; 0xffffff30
   27b9c:	cmp	r3, #3
   27ba0:	ble	27bd8 <__assert_fail@plt+0x15614>
   27ba4:	ldr	r3, [sp, #96]	; 0x60
   27ba8:	add	ip, r3, #32
   27bac:	sub	lr, sl, #224	; 0xe0
   27bb0:	ldm	lr!, {r0, r1, r2, r3}
   27bb4:	stmia	ip!, {r0, r1, r2, r3}
   27bb8:	ldm	lr, {r0, r1}
   27bbc:	stm	ip, {r0, r1}
   27bc0:	ldrd	r2, [sl, #-104]	; 0xffffff98
   27bc4:	ldr	r1, [sp, #96]	; 0x60
   27bc8:	strd	r2, [r1, #56]	; 0x38
   27bcc:	ldrd	r2, [sl, #8]
   27bd0:	strd	r2, [r1, #64]	; 0x40
   27bd4:	b	27248 <__assert_fail@plt+0x14c84>
   27bd8:	ldrd	r2, [sl, #-216]	; 0xffffff28
   27bdc:	ldr	r1, [sp, #96]	; 0x60
   27be0:	strd	r2, [r1, #56]	; 0x38
   27be4:	ldrd	r2, [sl, #-104]	; 0xffffff98
   27be8:	strd	r2, [r1, #64]	; 0x40
   27bec:	add	ip, r1, #32
   27bf0:	mov	lr, sl
   27bf4:	ldm	lr!, {r0, r1, r2, r3}
   27bf8:	stmia	ip!, {r0, r1, r2, r3}
   27bfc:	ldm	lr, {r0, r1}
   27c00:	stm	ip, {r0, r1}
   27c04:	b	27248 <__assert_fail@plt+0x14c84>
   27c08:	ldrd	r2, [sl, #-104]	; 0xffffff98
   27c0c:	ldr	r1, [sp, #96]	; 0x60
   27c10:	strd	r2, [r1, #64]	; 0x40
   27c14:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   27c18:	strd	r2, [r1, #56]	; 0x38
   27c1c:	ldrd	r2, [sl, #8]
   27c20:	cmp	r2, #0
   27c24:	sbcs	r1, r3, #0
   27c28:	blt	27c48 <__assert_fail@plt+0x15684>
   27c2c:	rsbs	r2, r2, #0
   27c30:	rsc	r3, r3, #0
   27c34:	ldr	r1, [sp, #96]	; 0x60
   27c38:	strd	r2, [r1, #40]	; 0x28
   27c3c:	ldr	r3, [sl, #16]
   27c40:	str	r3, [r1, #48]	; 0x30
   27c44:	b	27248 <__assert_fail@plt+0x14c84>
   27c48:	subs	r0, r2, #1
   27c4c:	sbc	r1, r3, #-2147483648	; 0x80000000
   27c50:	cmp	r0, #0
   27c54:	sbcs	r1, r1, #0
   27c58:	bge	27c2c <__assert_fail@plt+0x15668>
   27c5c:	rsbs	r2, r2, #0
   27c60:	rsc	r3, r3, #0
   27c64:	ldr	r1, [sp, #96]	; 0x60
   27c68:	strd	r2, [r1, #40]	; 0x28
   27c6c:	mov	r0, #1
   27c70:	b	28cc4 <__assert_fail@plt+0x16700>
   27c74:	ldrd	r2, [sl, #-112]	; 0xffffff90
   27c78:	ldr	r1, [sp, #96]	; 0x60
   27c7c:	strd	r2, [r1, #56]	; 0x38
   27c80:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   27c84:	cmp	r2, #0
   27c88:	sbcs	r1, r3, #0
   27c8c:	blt	27ccc <__assert_fail@plt+0x15708>
   27c90:	rsbs	r2, r2, #0
   27c94:	rsc	r3, r3, #0
   27c98:	ldr	r1, [sp, #96]	; 0x60
   27c9c:	strd	r2, [r1, #64]	; 0x40
   27ca0:	ldrd	r2, [sl, #8]
   27ca4:	cmp	r2, #0
   27ca8:	sbcs	r1, r3, #0
   27cac:	blt	27cf8 <__assert_fail@plt+0x15734>
   27cb0:	rsbs	r2, r2, #0
   27cb4:	rsc	r3, r3, #0
   27cb8:	ldr	r1, [sp, #96]	; 0x60
   27cbc:	strd	r2, [r1, #40]	; 0x28
   27cc0:	ldr	r3, [sl, #16]
   27cc4:	str	r3, [r1, #48]	; 0x30
   27cc8:	b	27248 <__assert_fail@plt+0x14c84>
   27ccc:	subs	r0, r2, #1
   27cd0:	sbc	r1, r3, #-2147483648	; 0x80000000
   27cd4:	cmp	r0, #0
   27cd8:	sbcs	r1, r1, #0
   27cdc:	bge	27c90 <__assert_fail@plt+0x156cc>
   27ce0:	rsbs	r2, r2, #0
   27ce4:	rsc	r3, r3, #0
   27ce8:	ldr	r1, [sp, #96]	; 0x60
   27cec:	strd	r2, [r1, #64]	; 0x40
   27cf0:	mov	r0, #1
   27cf4:	b	28cc4 <__assert_fail@plt+0x16700>
   27cf8:	subs	r0, r2, #1
   27cfc:	sbc	r1, r3, #-2147483648	; 0x80000000
   27d00:	cmp	r0, #0
   27d04:	sbcs	r1, r1, #0
   27d08:	bge	27cb0 <__assert_fail@plt+0x156ec>
   27d0c:	rsbs	r2, r2, #0
   27d10:	rsc	r3, r3, #0
   27d14:	ldr	r1, [sp, #96]	; 0x60
   27d18:	strd	r2, [r1, #40]	; 0x28
   27d1c:	mov	r0, #1
   27d20:	b	28cc4 <__assert_fail@plt+0x16700>
   27d24:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   27d28:	ldr	r1, [sp, #96]	; 0x60
   27d2c:	strd	r2, [r1, #56]	; 0x38
   27d30:	ldrd	r2, [sl, #8]
   27d34:	strd	r2, [r1, #64]	; 0x40
   27d38:	b	27248 <__assert_fail@plt+0x14c84>
   27d3c:	ldrd	r2, [sl, #-168]	; 0xffffff58
   27d40:	ldr	r1, [sp, #96]	; 0x60
   27d44:	strd	r2, [r1, #56]	; 0x38
   27d48:	ldrd	r2, [sl, #-104]	; 0xffffff98
   27d4c:	strd	r2, [r1, #64]	; 0x40
   27d50:	add	ip, r1, #32
   27d54:	mov	lr, sl
   27d58:	ldm	lr!, {r0, r1, r2, r3}
   27d5c:	stmia	ip!, {r0, r1, r2, r3}
   27d60:	ldm	lr, {r0, r1}
   27d64:	stm	ip, {r0, r1}
   27d68:	b	27248 <__assert_fail@plt+0x14c84>
   27d6c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   27d70:	ldr	r1, [sp, #96]	; 0x60
   27d74:	strd	r2, [r1, #64]	; 0x40
   27d78:	ldrd	r2, [sl]
   27d7c:	strd	r2, [r1, #56]	; 0x38
   27d80:	b	27248 <__assert_fail@plt+0x14c84>
   27d84:	ldrd	r2, [sl, #-104]	; 0xffffff98
   27d88:	ldr	r1, [sp, #96]	; 0x60
   27d8c:	strd	r2, [r1, #64]	; 0x40
   27d90:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   27d94:	strd	r2, [r1, #56]	; 0x38
   27d98:	add	ip, r1, #32
   27d9c:	mov	lr, sl
   27da0:	ldm	lr!, {r0, r1, r2, r3}
   27da4:	stmia	ip!, {r0, r1, r2, r3}
   27da8:	ldm	lr, {r0, r1}
   27dac:	stm	ip, {r0, r1}
   27db0:	b	27248 <__assert_fail@plt+0x14c84>
   27db4:	ldr	r3, [sp, #96]	; 0x60
   27db8:	add	ip, r3, #32
   27dbc:	sub	lr, sl, #112	; 0x70
   27dc0:	ldm	lr!, {r0, r1, r2, r3}
   27dc4:	stmia	ip!, {r0, r1, r2, r3}
   27dc8:	ldm	lr, {r0, r1}
   27dcc:	stm	ip, {r0, r1}
   27dd0:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   27dd4:	cmp	r2, #0
   27dd8:	sbcs	r1, r3, #0
   27ddc:	blt	27e14 <__assert_fail@plt+0x15850>
   27de0:	rsbs	r2, r2, #0
   27de4:	rsc	r3, r3, #0
   27de8:	ldr	r1, [sp, #96]	; 0x60
   27dec:	strd	r2, [r1, #56]	; 0x38
   27df0:	ldrd	r2, [sl, #8]
   27df4:	cmp	r2, #0
   27df8:	sbcs	r1, r3, #0
   27dfc:	blt	27e40 <__assert_fail@plt+0x1587c>
   27e00:	rsbs	r2, r2, #0
   27e04:	rsc	r3, r3, #0
   27e08:	ldr	r1, [sp, #96]	; 0x60
   27e0c:	strd	r2, [r1, #64]	; 0x40
   27e10:	b	27248 <__assert_fail@plt+0x14c84>
   27e14:	subs	r0, r2, #1
   27e18:	sbc	r1, r3, #-2147483648	; 0x80000000
   27e1c:	cmp	r0, #0
   27e20:	sbcs	r1, r1, #0
   27e24:	bge	27de0 <__assert_fail@plt+0x1581c>
   27e28:	rsbs	r2, r2, #0
   27e2c:	rsc	r3, r3, #0
   27e30:	ldr	r1, [sp, #96]	; 0x60
   27e34:	strd	r2, [r1, #56]	; 0x38
   27e38:	mov	r0, #1
   27e3c:	b	28cc4 <__assert_fail@plt+0x16700>
   27e40:	subs	r0, r2, #1
   27e44:	sbc	r1, r3, #-2147483648	; 0x80000000
   27e48:	cmp	r0, #0
   27e4c:	sbcs	r1, r1, #0
   27e50:	bge	27e00 <__assert_fail@plt+0x1583c>
   27e54:	rsbs	r2, r2, #0
   27e58:	rsc	r3, r3, #0
   27e5c:	ldr	r1, [sp, #96]	; 0x60
   27e60:	strd	r2, [r1, #64]	; 0x40
   27e64:	mov	r0, #1
   27e68:	b	28cc4 <__assert_fail@plt+0x16700>
   27e6c:	mov	ip, sl
   27e70:	ldr	r3, [ip], #-48	; 0xffffffd0
   27e74:	str	r3, [sp, #48]	; 0x30
   27e78:	mov	lr, sp
   27e7c:	ldm	ip!, {r0, r1, r2, r3}
   27e80:	stmia	lr!, {r0, r1, r2, r3}
   27e84:	ldm	ip!, {r0, r1, r2, r3}
   27e88:	stmia	lr!, {r0, r1, r2, r3}
   27e8c:	ldm	ip, {r0, r1, r2, r3}
   27e90:	stm	lr, {r0, r1, r2, r3}
   27e94:	sub	r3, sl, #56	; 0x38
   27e98:	ldm	r3, {r2, r3}
   27e9c:	ldr	r0, [sp, #96]	; 0x60
   27ea0:	bl	25a68 <__assert_fail@plt+0x134a4>
   27ea4:	cmp	r0, #0
   27ea8:	bne	27248 <__assert_fail@plt+0x14c84>
   27eac:	mov	r0, #1
   27eb0:	b	28cc4 <__assert_fail@plt+0x16700>
   27eb4:	mov	r3, #1
   27eb8:	str	r3, [sp, #48]	; 0x30
   27ebc:	mov	ip, sp
   27ec0:	add	lr, sl, #8
   27ec4:	ldm	lr!, {r0, r1, r2, r3}
   27ec8:	stmia	ip!, {r0, r1, r2, r3}
   27ecc:	ldm	lr!, {r0, r1, r2, r3}
   27ed0:	stmia	ip!, {r0, r1, r2, r3}
   27ed4:	ldm	lr, {r0, r1, r2, r3}
   27ed8:	stm	ip, {r0, r1, r2, r3}
   27edc:	ldm	sl, {r2, r3}
   27ee0:	ldr	r0, [sp, #96]	; 0x60
   27ee4:	bl	25a68 <__assert_fail@plt+0x134a4>
   27ee8:	cmp	r0, #0
   27eec:	bne	27248 <__assert_fail@plt+0x14c84>
   27ef0:	mov	r0, #1
   27ef4:	b	28cc4 <__assert_fail@plt+0x16700>
   27ef8:	mov	r3, #1
   27efc:	str	r3, [sp, #48]	; 0x30
   27f00:	mov	ip, sp
   27f04:	add	lr, sl, #8
   27f08:	ldm	lr!, {r0, r1, r2, r3}
   27f0c:	stmia	ip!, {r0, r1, r2, r3}
   27f10:	ldm	lr!, {r0, r1, r2, r3}
   27f14:	stmia	ip!, {r0, r1, r2, r3}
   27f18:	ldm	lr, {r0, r1, r2, r3}
   27f1c:	stm	ip, {r0, r1, r2, r3}
   27f20:	ldm	sl, {r2, r3}
   27f24:	ldr	r0, [sp, #96]	; 0x60
   27f28:	bl	25a68 <__assert_fail@plt+0x134a4>
   27f2c:	cmp	r0, #0
   27f30:	bne	27248 <__assert_fail@plt+0x14c84>
   27f34:	mov	r0, #1
   27f38:	b	28cc4 <__assert_fail@plt+0x16700>
   27f3c:	mov	r2, #56	; 0x38
   27f40:	mov	r1, #0
   27f44:	add	r0, sp, #168	; 0xa8
   27f48:	bl	12348 <memset@plt>
   27f4c:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   27f50:	strd	r2, [sp, #168]	; 0xa8
   27f54:	mov	r3, #0
   27f58:	str	r3, [sp, #68]	; 0x44
   27f5c:	mov	r4, #0
   27f60:	mov	r5, #0
   27f64:	str	r4, [sp, #80]	; 0x50
   27f68:	str	r5, [sp, #84]	; 0x54
   27f6c:	str	r4, [sp, #88]	; 0x58
   27f70:	str	r5, [sp, #92]	; 0x5c
   27f74:	strd	r4, [sp, #56]	; 0x38
   27f78:	str	r4, [sp, #72]	; 0x48
   27f7c:	str	r5, [sp, #76]	; 0x4c
   27f80:	b	27248 <__assert_fail@plt+0x14c84>
   27f84:	mov	r2, #56	; 0x38
   27f88:	mov	r1, #0
   27f8c:	add	r0, sp, #168	; 0xa8
   27f90:	bl	12348 <memset@plt>
   27f94:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   27f98:	strd	r2, [sp, #168]	; 0xa8
   27f9c:	mov	r3, #0
   27fa0:	str	r3, [sp, #68]	; 0x44
   27fa4:	mov	r4, #0
   27fa8:	mov	r5, #0
   27fac:	str	r4, [sp, #80]	; 0x50
   27fb0:	str	r5, [sp, #84]	; 0x54
   27fb4:	str	r4, [sp, #88]	; 0x58
   27fb8:	str	r5, [sp, #92]	; 0x5c
   27fbc:	strd	r4, [sp, #56]	; 0x38
   27fc0:	str	r4, [sp, #72]	; 0x48
   27fc4:	str	r5, [sp, #76]	; 0x4c
   27fc8:	b	27248 <__assert_fail@plt+0x14c84>
   27fcc:	mov	r2, #56	; 0x38
   27fd0:	mov	r1, #0
   27fd4:	add	r0, sp, #168	; 0xa8
   27fd8:	bl	12348 <memset@plt>
   27fdc:	mov	r2, #1
   27fe0:	mov	r3, #0
   27fe4:	strd	r2, [sp, #168]	; 0xa8
   27fe8:	mov	r3, #0
   27fec:	str	r3, [sp, #68]	; 0x44
   27ff0:	mov	r4, #0
   27ff4:	mov	r5, #0
   27ff8:	str	r4, [sp, #80]	; 0x50
   27ffc:	str	r5, [sp, #84]	; 0x54
   28000:	str	r4, [sp, #88]	; 0x58
   28004:	str	r5, [sp, #92]	; 0x5c
   28008:	strd	r4, [sp, #56]	; 0x38
   2800c:	str	r4, [sp, #72]	; 0x48
   28010:	str	r5, [sp, #76]	; 0x4c
   28014:	b	27248 <__assert_fail@plt+0x14c84>
   28018:	mov	r2, #56	; 0x38
   2801c:	mov	r1, #0
   28020:	add	r0, sp, #168	; 0xa8
   28024:	bl	12348 <memset@plt>
   28028:	ldr	r3, [sl, #-56]	; 0xffffffc8
   2802c:	str	r3, [sp, #72]	; 0x48
   28030:	ldr	r3, [sl, #-52]	; 0xffffffcc
   28034:	str	r3, [sp, #76]	; 0x4c
   28038:	mov	r3, #0
   2803c:	str	r3, [sp, #68]	; 0x44
   28040:	mov	r4, #0
   28044:	mov	r5, #0
   28048:	str	r4, [sp, #80]	; 0x50
   2804c:	str	r5, [sp, #84]	; 0x54
   28050:	str	r4, [sp, #88]	; 0x58
   28054:	str	r5, [sp, #92]	; 0x5c
   28058:	strd	r4, [sp, #56]	; 0x38
   2805c:	b	27248 <__assert_fail@plt+0x14c84>
   28060:	mov	r2, #56	; 0x38
   28064:	mov	r1, #0
   28068:	add	r0, sp, #168	; 0xa8
   2806c:	bl	12348 <memset@plt>
   28070:	ldr	r3, [sl, #-48]	; 0xffffffd0
   28074:	str	r3, [sp, #72]	; 0x48
   28078:	ldr	r3, [sl, #-44]	; 0xffffffd4
   2807c:	str	r3, [sp, #76]	; 0x4c
   28080:	mov	r3, #0
   28084:	str	r3, [sp, #68]	; 0x44
   28088:	mov	r4, #0
   2808c:	mov	r5, #0
   28090:	str	r4, [sp, #80]	; 0x50
   28094:	str	r5, [sp, #84]	; 0x54
   28098:	str	r4, [sp, #88]	; 0x58
   2809c:	str	r5, [sp, #92]	; 0x5c
   280a0:	strd	r4, [sp, #56]	; 0x38
   280a4:	b	27248 <__assert_fail@plt+0x14c84>
   280a8:	mov	r2, #56	; 0x38
   280ac:	mov	r1, #0
   280b0:	add	r0, sp, #168	; 0xa8
   280b4:	bl	12348 <memset@plt>
   280b8:	mov	r3, #0
   280bc:	str	r3, [sp, #68]	; 0x44
   280c0:	mov	r4, #0
   280c4:	mov	r5, #0
   280c8:	str	r4, [sp, #80]	; 0x50
   280cc:	str	r5, [sp, #84]	; 0x54
   280d0:	str	r4, [sp, #88]	; 0x58
   280d4:	str	r5, [sp, #92]	; 0x5c
   280d8:	strd	r4, [sp, #56]	; 0x38
   280dc:	mov	r3, #1
   280e0:	str	r3, [sp, #72]	; 0x48
   280e4:	mov	r3, #0
   280e8:	str	r3, [sp, #76]	; 0x4c
   280ec:	b	27248 <__assert_fail@plt+0x14c84>
   280f0:	mov	r2, #56	; 0x38
   280f4:	mov	r1, #0
   280f8:	add	r0, sp, #168	; 0xa8
   280fc:	bl	12348 <memset@plt>
   28100:	ldrd	r2, [sl]
   28104:	strd	r2, [sp, #56]	; 0x38
   28108:	cmp	r2, #0
   2810c:	sbcs	r3, r3, #0
   28110:	blt	281a8 <__assert_fail@plt+0x15be4>
   28114:	ldrd	r2, [sp, #56]	; 0x38
   28118:	orrs	r3, r2, r3
   2811c:	beq	28158 <__assert_fail@plt+0x15b94>
   28120:	ldrd	r4, [sl, #-56]	; 0xffffffc8
   28124:	cmp	r4, #0
   28128:	sbcs	r3, r5, #0
   2812c:	blt	28234 <__assert_fail@plt+0x15c70>
   28130:	ldrd	r2, [sp, #56]	; 0x38
   28134:	mvn	r0, #0
   28138:	mvn	r1, #-2147483648	; 0x80000000
   2813c:	bl	4226c <__assert_fail@plt+0x2fca8>
   28140:	cmp	r0, r4
   28144:	sbcs	r3, r1, r5
   28148:	movlt	r3, #1
   2814c:	movge	r3, #0
   28150:	cmp	r3, #0
   28154:	bne	28d30 <__assert_fail@plt+0x1676c>
   28158:	ldr	r2, [sl, #-56]	; 0xffffffc8
   2815c:	ldr	r3, [sl, #-52]	; 0xffffffcc
   28160:	ldrd	r0, [sp, #56]	; 0x38
   28164:	mul	r3, r0, r3
   28168:	mla	r3, r2, r1, r3
   2816c:	umull	r0, r1, r2, r0
   28170:	strd	r0, [sp, #56]	; 0x38
   28174:	add	r3, r3, r1
   28178:	str	r3, [sp, #60]	; 0x3c
   2817c:	mov	r3, #0
   28180:	str	r3, [sp, #68]	; 0x44
   28184:	mov	r4, #0
   28188:	mov	r5, #0
   2818c:	str	r4, [sp, #80]	; 0x50
   28190:	str	r5, [sp, #84]	; 0x54
   28194:	str	r4, [sp, #88]	; 0x58
   28198:	str	r5, [sp, #92]	; 0x5c
   2819c:	str	r4, [sp, #72]	; 0x48
   281a0:	str	r5, [sp, #76]	; 0x4c
   281a4:	b	27248 <__assert_fail@plt+0x14c84>
   281a8:	ldrd	r4, [sl, #-56]	; 0xffffffc8
   281ac:	cmp	r4, #0
   281b0:	sbcs	r3, r5, #0
   281b4:	bge	281dc <__assert_fail@plt+0x15c18>
   281b8:	ldrd	r2, [sp, #56]	; 0x38
   281bc:	mvn	r0, #0
   281c0:	mvn	r1, #-2147483648	; 0x80000000
   281c4:	bl	4226c <__assert_fail@plt+0x2fca8>
   281c8:	cmp	r4, r0
   281cc:	sbcs	r3, r5, r1
   281d0:	movlt	r3, #1
   281d4:	movge	r3, #0
   281d8:	b	28150 <__assert_fail@plt+0x15b8c>
   281dc:	mvn	r2, #0
   281e0:	mvn	r3, #0
   281e4:	ldrd	r0, [sp, #56]	; 0x38
   281e8:	cmp	r1, r3
   281ec:	cmpeq	r0, r2
   281f0:	beq	28218 <__assert_fail@plt+0x15c54>
   281f4:	ldrd	r2, [sp, #56]	; 0x38
   281f8:	mov	r0, #0
   281fc:	mov	r1, #-2147483648	; 0x80000000
   28200:	bl	4226c <__assert_fail@plt+0x2fca8>
   28204:	cmp	r0, r4
   28208:	sbcs	r3, r1, r5
   2820c:	movlt	r3, #1
   28210:	movge	r3, #0
   28214:	b	28150 <__assert_fail@plt+0x15b8c>
   28218:	adds	r4, r4, #0
   2821c:	adc	r5, r5, #-2147483648	; 0x80000000
   28220:	cmp	r4, #1
   28224:	sbcs	r3, r5, #0
   28228:	movge	r3, #1
   2822c:	movlt	r3, #0
   28230:	b	28150 <__assert_fail@plt+0x15b8c>
   28234:	mvn	r2, #0
   28238:	mvn	r3, #0
   2823c:	cmp	r5, r3
   28240:	cmpeq	r4, r2
   28244:	beq	28274 <__assert_fail@plt+0x15cb0>
   28248:	mov	r2, r4
   2824c:	mov	r3, r5
   28250:	mov	r0, #0
   28254:	mov	r1, #-2147483648	; 0x80000000
   28258:	bl	4226c <__assert_fail@plt+0x2fca8>
   2825c:	ldrd	r2, [sp, #56]	; 0x38
   28260:	cmp	r0, r2
   28264:	sbcs	r3, r1, r3
   28268:	movlt	r3, #1
   2826c:	movge	r3, #0
   28270:	b	28150 <__assert_fail@plt+0x15b8c>
   28274:	ldrd	r2, [sp, #56]	; 0x38
   28278:	adds	r2, r2, #0
   2827c:	adc	r3, r3, #-2147483648	; 0x80000000
   28280:	cmp	r2, #1
   28284:	sbcs	r3, r3, #0
   28288:	movge	r3, #1
   2828c:	movlt	r3, #0
   28290:	b	28150 <__assert_fail@plt+0x15b8c>
   28294:	mov	r2, #56	; 0x38
   28298:	mov	r1, #0
   2829c:	add	r0, sp, #168	; 0xa8
   282a0:	bl	12348 <memset@plt>
   282a4:	ldrd	r2, [sl]
   282a8:	strd	r2, [sp, #56]	; 0x38
   282ac:	cmp	r2, #0
   282b0:	sbcs	r3, r3, #0
   282b4:	blt	2834c <__assert_fail@plt+0x15d88>
   282b8:	ldrd	r2, [sp, #56]	; 0x38
   282bc:	orrs	r3, r2, r3
   282c0:	beq	282fc <__assert_fail@plt+0x15d38>
   282c4:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   282c8:	cmp	r4, #0
   282cc:	sbcs	r3, r5, #0
   282d0:	blt	283d8 <__assert_fail@plt+0x15e14>
   282d4:	ldrd	r2, [sp, #56]	; 0x38
   282d8:	mvn	r0, #0
   282dc:	mvn	r1, #-2147483648	; 0x80000000
   282e0:	bl	4226c <__assert_fail@plt+0x2fca8>
   282e4:	cmp	r0, r4
   282e8:	sbcs	r3, r1, r5
   282ec:	movlt	r3, #1
   282f0:	movge	r3, #0
   282f4:	cmp	r3, #0
   282f8:	bne	28d38 <__assert_fail@plt+0x16774>
   282fc:	ldr	r2, [sl, #-48]	; 0xffffffd0
   28300:	ldr	r3, [sl, #-44]	; 0xffffffd4
   28304:	ldrd	r0, [sp, #56]	; 0x38
   28308:	mul	r3, r0, r3
   2830c:	mla	r3, r2, r1, r3
   28310:	umull	r0, r1, r2, r0
   28314:	strd	r0, [sp, #56]	; 0x38
   28318:	add	r3, r3, r1
   2831c:	str	r3, [sp, #60]	; 0x3c
   28320:	mov	r3, #0
   28324:	str	r3, [sp, #68]	; 0x44
   28328:	mov	r4, #0
   2832c:	mov	r5, #0
   28330:	str	r4, [sp, #80]	; 0x50
   28334:	str	r5, [sp, #84]	; 0x54
   28338:	str	r4, [sp, #88]	; 0x58
   2833c:	str	r5, [sp, #92]	; 0x5c
   28340:	str	r4, [sp, #72]	; 0x48
   28344:	str	r5, [sp, #76]	; 0x4c
   28348:	b	27248 <__assert_fail@plt+0x14c84>
   2834c:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   28350:	cmp	r4, #0
   28354:	sbcs	r3, r5, #0
   28358:	bge	28380 <__assert_fail@plt+0x15dbc>
   2835c:	ldrd	r2, [sp, #56]	; 0x38
   28360:	mvn	r0, #0
   28364:	mvn	r1, #-2147483648	; 0x80000000
   28368:	bl	4226c <__assert_fail@plt+0x2fca8>
   2836c:	cmp	r4, r0
   28370:	sbcs	r3, r5, r1
   28374:	movlt	r3, #1
   28378:	movge	r3, #0
   2837c:	b	282f4 <__assert_fail@plt+0x15d30>
   28380:	mvn	r2, #0
   28384:	mvn	r3, #0
   28388:	ldrd	r0, [sp, #56]	; 0x38
   2838c:	cmp	r1, r3
   28390:	cmpeq	r0, r2
   28394:	beq	283bc <__assert_fail@plt+0x15df8>
   28398:	ldrd	r2, [sp, #56]	; 0x38
   2839c:	mov	r0, #0
   283a0:	mov	r1, #-2147483648	; 0x80000000
   283a4:	bl	4226c <__assert_fail@plt+0x2fca8>
   283a8:	cmp	r0, r4
   283ac:	sbcs	r3, r1, r5
   283b0:	movlt	r3, #1
   283b4:	movge	r3, #0
   283b8:	b	282f4 <__assert_fail@plt+0x15d30>
   283bc:	adds	r4, r4, #0
   283c0:	adc	r5, r5, #-2147483648	; 0x80000000
   283c4:	cmp	r4, #1
   283c8:	sbcs	r3, r5, #0
   283cc:	movge	r3, #1
   283d0:	movlt	r3, #0
   283d4:	b	282f4 <__assert_fail@plt+0x15d30>
   283d8:	mvn	r2, #0
   283dc:	mvn	r3, #0
   283e0:	cmp	r5, r3
   283e4:	cmpeq	r4, r2
   283e8:	beq	28418 <__assert_fail@plt+0x15e54>
   283ec:	mov	r2, r4
   283f0:	mov	r3, r5
   283f4:	mov	r0, #0
   283f8:	mov	r1, #-2147483648	; 0x80000000
   283fc:	bl	4226c <__assert_fail@plt+0x2fca8>
   28400:	ldrd	r2, [sp, #56]	; 0x38
   28404:	cmp	r0, r2
   28408:	sbcs	r3, r1, r3
   2840c:	movlt	r3, #1
   28410:	movge	r3, #0
   28414:	b	282f4 <__assert_fail@plt+0x15d30>
   28418:	ldrd	r2, [sp, #56]	; 0x38
   2841c:	adds	r2, r2, #0
   28420:	adc	r3, r3, #-2147483648	; 0x80000000
   28424:	cmp	r2, #1
   28428:	sbcs	r3, r3, #0
   2842c:	movge	r3, #1
   28430:	movlt	r3, #0
   28434:	b	282f4 <__assert_fail@plt+0x15d30>
   28438:	mov	r2, #56	; 0x38
   2843c:	mov	r1, #0
   28440:	add	r0, sp, #168	; 0xa8
   28444:	bl	12348 <memset@plt>
   28448:	ldrd	r2, [sl]
   2844c:	strd	r2, [sp, #56]	; 0x38
   28450:	mov	r3, #0
   28454:	str	r3, [sp, #68]	; 0x44
   28458:	mov	r4, #0
   2845c:	mov	r5, #0
   28460:	str	r4, [sp, #80]	; 0x50
   28464:	str	r5, [sp, #84]	; 0x54
   28468:	str	r4, [sp, #88]	; 0x58
   2846c:	str	r5, [sp, #92]	; 0x5c
   28470:	str	r4, [sp, #72]	; 0x48
   28474:	str	r5, [sp, #76]	; 0x4c
   28478:	b	27248 <__assert_fail@plt+0x14c84>
   2847c:	mov	r2, #56	; 0x38
   28480:	mov	r1, #0
   28484:	add	r0, sp, #168	; 0xa8
   28488:	bl	12348 <memset@plt>
   2848c:	ldr	r3, [sl, #-56]	; 0xffffffc8
   28490:	str	r3, [sp, #88]	; 0x58
   28494:	ldr	r3, [sl, #-52]	; 0xffffffcc
   28498:	str	r3, [sp, #92]	; 0x5c
   2849c:	mov	r3, #0
   284a0:	str	r3, [sp, #68]	; 0x44
   284a4:	mov	r4, #0
   284a8:	mov	r5, #0
   284ac:	str	r4, [sp, #80]	; 0x50
   284b0:	str	r5, [sp, #84]	; 0x54
   284b4:	strd	r4, [sp, #56]	; 0x38
   284b8:	str	r4, [sp, #72]	; 0x48
   284bc:	str	r5, [sp, #76]	; 0x4c
   284c0:	b	27248 <__assert_fail@plt+0x14c84>
   284c4:	mov	r2, #56	; 0x38
   284c8:	mov	r1, #0
   284cc:	add	r0, sp, #168	; 0xa8
   284d0:	bl	12348 <memset@plt>
   284d4:	ldr	r3, [sl, #-48]	; 0xffffffd0
   284d8:	str	r3, [sp, #88]	; 0x58
   284dc:	ldr	r3, [sl, #-44]	; 0xffffffd4
   284e0:	str	r3, [sp, #92]	; 0x5c
   284e4:	mov	r3, #0
   284e8:	str	r3, [sp, #68]	; 0x44
   284ec:	mov	r4, #0
   284f0:	mov	r5, #0
   284f4:	str	r4, [sp, #80]	; 0x50
   284f8:	str	r5, [sp, #84]	; 0x54
   284fc:	strd	r4, [sp, #56]	; 0x38
   28500:	str	r4, [sp, #72]	; 0x48
   28504:	str	r5, [sp, #76]	; 0x4c
   28508:	b	27248 <__assert_fail@plt+0x14c84>
   2850c:	mov	r2, #56	; 0x38
   28510:	mov	r1, #0
   28514:	add	r0, sp, #168	; 0xa8
   28518:	bl	12348 <memset@plt>
   2851c:	mov	r3, #0
   28520:	str	r3, [sp, #68]	; 0x44
   28524:	mov	r4, #0
   28528:	mov	r5, #0
   2852c:	str	r4, [sp, #80]	; 0x50
   28530:	str	r5, [sp, #84]	; 0x54
   28534:	mov	r3, #1
   28538:	str	r3, [sp, #88]	; 0x58
   2853c:	mov	r3, #0
   28540:	str	r3, [sp, #92]	; 0x5c
   28544:	strd	r4, [sp, #56]	; 0x38
   28548:	str	r4, [sp, #72]	; 0x48
   2854c:	str	r5, [sp, #76]	; 0x4c
   28550:	b	27248 <__assert_fail@plt+0x14c84>
   28554:	mov	r2, #56	; 0x38
   28558:	mov	r1, #0
   2855c:	add	r0, sp, #168	; 0xa8
   28560:	bl	12348 <memset@plt>
   28564:	ldr	r3, [sl, #-56]	; 0xffffffc8
   28568:	str	r3, [sp, #80]	; 0x50
   2856c:	ldr	r3, [sl, #-52]	; 0xffffffcc
   28570:	str	r3, [sp, #84]	; 0x54
   28574:	mov	r3, #0
   28578:	str	r3, [sp, #68]	; 0x44
   2857c:	mov	r4, #0
   28580:	mov	r5, #0
   28584:	str	r4, [sp, #88]	; 0x58
   28588:	str	r5, [sp, #92]	; 0x5c
   2858c:	strd	r4, [sp, #56]	; 0x38
   28590:	str	r4, [sp, #72]	; 0x48
   28594:	str	r5, [sp, #76]	; 0x4c
   28598:	b	27248 <__assert_fail@plt+0x14c84>
   2859c:	mov	r2, #56	; 0x38
   285a0:	mov	r1, #0
   285a4:	add	r0, sp, #168	; 0xa8
   285a8:	bl	12348 <memset@plt>
   285ac:	ldr	r3, [sl, #-48]	; 0xffffffd0
   285b0:	str	r3, [sp, #80]	; 0x50
   285b4:	ldr	r3, [sl, #-44]	; 0xffffffd4
   285b8:	str	r3, [sp, #84]	; 0x54
   285bc:	mov	r3, #0
   285c0:	str	r3, [sp, #68]	; 0x44
   285c4:	mov	r4, #0
   285c8:	mov	r5, #0
   285cc:	str	r4, [sp, #88]	; 0x58
   285d0:	str	r5, [sp, #92]	; 0x5c
   285d4:	strd	r4, [sp, #56]	; 0x38
   285d8:	str	r4, [sp, #72]	; 0x48
   285dc:	str	r5, [sp, #76]	; 0x4c
   285e0:	b	27248 <__assert_fail@plt+0x14c84>
   285e4:	mov	r2, #56	; 0x38
   285e8:	mov	r1, #0
   285ec:	add	r0, sp, #168	; 0xa8
   285f0:	bl	12348 <memset@plt>
   285f4:	mov	r3, #0
   285f8:	str	r3, [sp, #68]	; 0x44
   285fc:	mov	r4, #0
   28600:	mov	r5, #0
   28604:	mov	r3, #1
   28608:	str	r3, [sp, #80]	; 0x50
   2860c:	mov	r3, #0
   28610:	str	r3, [sp, #84]	; 0x54
   28614:	str	r4, [sp, #88]	; 0x58
   28618:	str	r5, [sp, #92]	; 0x5c
   2861c:	strd	r4, [sp, #56]	; 0x38
   28620:	str	r4, [sp, #72]	; 0x48
   28624:	str	r5, [sp, #76]	; 0x4c
   28628:	b	27248 <__assert_fail@plt+0x14c84>
   2862c:	mov	r2, #56	; 0x38
   28630:	mov	r1, #0
   28634:	add	r0, sp, #168	; 0xa8
   28638:	bl	12348 <memset@plt>
   2863c:	ldrd	r4, [sl, #-56]	; 0xffffffc8
   28640:	mov	r3, #0
   28644:	str	r3, [sp, #68]	; 0x44
   28648:	str	r3, [sp, #80]	; 0x50
   2864c:	str	r3, [sp, #84]	; 0x54
   28650:	str	r3, [sp, #88]	; 0x58
   28654:	str	r3, [sp, #92]	; 0x5c
   28658:	str	r3, [sp, #56]	; 0x38
   2865c:	str	r3, [sp, #60]	; 0x3c
   28660:	str	r3, [sp, #72]	; 0x48
   28664:	str	r3, [sp, #76]	; 0x4c
   28668:	b	27248 <__assert_fail@plt+0x14c84>
   2866c:	mov	r2, #56	; 0x38
   28670:	mov	r1, #0
   28674:	add	r0, sp, #168	; 0xa8
   28678:	bl	12348 <memset@plt>
   2867c:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   28680:	mov	r3, #0
   28684:	str	r3, [sp, #68]	; 0x44
   28688:	str	r3, [sp, #80]	; 0x50
   2868c:	str	r3, [sp, #84]	; 0x54
   28690:	str	r3, [sp, #88]	; 0x58
   28694:	str	r3, [sp, #92]	; 0x5c
   28698:	str	r3, [sp, #56]	; 0x38
   2869c:	str	r3, [sp, #60]	; 0x3c
   286a0:	str	r3, [sp, #72]	; 0x48
   286a4:	str	r3, [sp, #76]	; 0x4c
   286a8:	b	27248 <__assert_fail@plt+0x14c84>
   286ac:	mov	r2, #56	; 0x38
   286b0:	mov	r1, #0
   286b4:	add	r0, sp, #168	; 0xa8
   286b8:	bl	12348 <memset@plt>
   286bc:	ldr	r3, [sl, #-56]	; 0xffffffc8
   286c0:	mov	r4, r3
   286c4:	asr	r5, r3, #31
   286c8:	ldr	r3, [sl, #-52]	; 0xffffffcc
   286cc:	str	r3, [sp, #68]	; 0x44
   286d0:	mov	r3, #0
   286d4:	str	r3, [sp, #80]	; 0x50
   286d8:	str	r3, [sp, #84]	; 0x54
   286dc:	str	r3, [sp, #88]	; 0x58
   286e0:	str	r3, [sp, #92]	; 0x5c
   286e4:	str	r3, [sp, #56]	; 0x38
   286e8:	str	r3, [sp, #60]	; 0x3c
   286ec:	str	r3, [sp, #72]	; 0x48
   286f0:	str	r3, [sp, #76]	; 0x4c
   286f4:	b	27248 <__assert_fail@plt+0x14c84>
   286f8:	mov	r2, #56	; 0x38
   286fc:	mov	r1, #0
   28700:	add	r0, sp, #168	; 0xa8
   28704:	bl	12348 <memset@plt>
   28708:	ldr	r3, [sl, #-56]	; 0xffffffc8
   2870c:	mov	r4, r3
   28710:	asr	r5, r3, #31
   28714:	ldr	r3, [sl, #-52]	; 0xffffffcc
   28718:	str	r3, [sp, #68]	; 0x44
   2871c:	mov	r3, #0
   28720:	str	r3, [sp, #80]	; 0x50
   28724:	str	r3, [sp, #84]	; 0x54
   28728:	str	r3, [sp, #88]	; 0x58
   2872c:	str	r3, [sp, #92]	; 0x5c
   28730:	str	r3, [sp, #56]	; 0x38
   28734:	str	r3, [sp, #60]	; 0x3c
   28738:	str	r3, [sp, #72]	; 0x48
   2873c:	str	r3, [sp, #76]	; 0x4c
   28740:	b	27248 <__assert_fail@plt+0x14c84>
   28744:	mov	r2, #56	; 0x38
   28748:	mov	r1, #0
   2874c:	add	r0, sp, #168	; 0xa8
   28750:	bl	12348 <memset@plt>
   28754:	mov	r3, #0
   28758:	str	r3, [sp, #68]	; 0x44
   2875c:	mov	r4, #1
   28760:	mov	r5, #0
   28764:	str	r3, [sp, #80]	; 0x50
   28768:	str	r3, [sp, #84]	; 0x54
   2876c:	str	r3, [sp, #88]	; 0x58
   28770:	str	r3, [sp, #92]	; 0x5c
   28774:	str	r3, [sp, #56]	; 0x38
   28778:	str	r3, [sp, #60]	; 0x3c
   2877c:	str	r3, [sp, #72]	; 0x48
   28780:	str	r3, [sp, #76]	; 0x4c
   28784:	b	27248 <__assert_fail@plt+0x14c84>
   28788:	mov	r2, #56	; 0x38
   2878c:	mov	r1, #0
   28790:	add	r0, sp, #168	; 0xa8
   28794:	bl	12348 <memset@plt>
   28798:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   2879c:	strd	r2, [sp, #168]	; 0xa8
   287a0:	mov	r3, #0
   287a4:	str	r3, [sp, #68]	; 0x44
   287a8:	mov	r4, #0
   287ac:	mov	r5, #0
   287b0:	str	r4, [sp, #80]	; 0x50
   287b4:	str	r5, [sp, #84]	; 0x54
   287b8:	str	r4, [sp, #88]	; 0x58
   287bc:	str	r5, [sp, #92]	; 0x5c
   287c0:	strd	r4, [sp, #56]	; 0x38
   287c4:	str	r4, [sp, #72]	; 0x48
   287c8:	str	r5, [sp, #76]	; 0x4c
   287cc:	b	27248 <__assert_fail@plt+0x14c84>
   287d0:	mov	r2, #56	; 0x38
   287d4:	mov	r1, #0
   287d8:	add	r0, sp, #168	; 0xa8
   287dc:	bl	12348 <memset@plt>
   287e0:	ldr	r3, [sl, #-48]	; 0xffffffd0
   287e4:	str	r3, [sp, #72]	; 0x48
   287e8:	ldr	r3, [sl, #-44]	; 0xffffffd4
   287ec:	str	r3, [sp, #76]	; 0x4c
   287f0:	mov	r3, #0
   287f4:	str	r3, [sp, #68]	; 0x44
   287f8:	mov	r4, #0
   287fc:	mov	r5, #0
   28800:	str	r4, [sp, #80]	; 0x50
   28804:	str	r5, [sp, #84]	; 0x54
   28808:	str	r4, [sp, #88]	; 0x58
   2880c:	str	r5, [sp, #92]	; 0x5c
   28810:	strd	r4, [sp, #56]	; 0x38
   28814:	b	27248 <__assert_fail@plt+0x14c84>
   28818:	mov	r2, #56	; 0x38
   2881c:	mov	r1, #0
   28820:	add	r0, sp, #168	; 0xa8
   28824:	bl	12348 <memset@plt>
   28828:	ldrd	r2, [sl]
   2882c:	strd	r2, [sp, #56]	; 0x38
   28830:	cmp	r2, #0
   28834:	sbcs	r3, r3, #0
   28838:	blt	288d0 <__assert_fail@plt+0x1630c>
   2883c:	ldrd	r2, [sp, #56]	; 0x38
   28840:	orrs	r3, r2, r3
   28844:	beq	28880 <__assert_fail@plt+0x162bc>
   28848:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   2884c:	cmp	r4, #0
   28850:	sbcs	r3, r5, #0
   28854:	blt	2895c <__assert_fail@plt+0x16398>
   28858:	ldrd	r2, [sp, #56]	; 0x38
   2885c:	mvn	r0, #0
   28860:	mvn	r1, #-2147483648	; 0x80000000
   28864:	bl	4226c <__assert_fail@plt+0x2fca8>
   28868:	cmp	r0, r4
   2886c:	sbcs	r3, r1, r5
   28870:	movlt	r3, #1
   28874:	movge	r3, #0
   28878:	cmp	r3, #0
   2887c:	bne	28d40 <__assert_fail@plt+0x1677c>
   28880:	ldr	r2, [sl, #-48]	; 0xffffffd0
   28884:	ldr	r3, [sl, #-44]	; 0xffffffd4
   28888:	ldrd	r0, [sp, #56]	; 0x38
   2888c:	mul	r3, r0, r3
   28890:	mla	r3, r2, r1, r3
   28894:	umull	r0, r1, r2, r0
   28898:	strd	r0, [sp, #56]	; 0x38
   2889c:	add	r3, r3, r1
   288a0:	str	r3, [sp, #60]	; 0x3c
   288a4:	mov	r3, #0
   288a8:	str	r3, [sp, #68]	; 0x44
   288ac:	mov	r4, #0
   288b0:	mov	r5, #0
   288b4:	str	r4, [sp, #80]	; 0x50
   288b8:	str	r5, [sp, #84]	; 0x54
   288bc:	str	r4, [sp, #88]	; 0x58
   288c0:	str	r5, [sp, #92]	; 0x5c
   288c4:	str	r4, [sp, #72]	; 0x48
   288c8:	str	r5, [sp, #76]	; 0x4c
   288cc:	b	27248 <__assert_fail@plt+0x14c84>
   288d0:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   288d4:	cmp	r4, #0
   288d8:	sbcs	r3, r5, #0
   288dc:	bge	28904 <__assert_fail@plt+0x16340>
   288e0:	ldrd	r2, [sp, #56]	; 0x38
   288e4:	mvn	r0, #0
   288e8:	mvn	r1, #-2147483648	; 0x80000000
   288ec:	bl	4226c <__assert_fail@plt+0x2fca8>
   288f0:	cmp	r4, r0
   288f4:	sbcs	r3, r5, r1
   288f8:	movlt	r3, #1
   288fc:	movge	r3, #0
   28900:	b	28878 <__assert_fail@plt+0x162b4>
   28904:	mvn	r2, #0
   28908:	mvn	r3, #0
   2890c:	ldrd	r0, [sp, #56]	; 0x38
   28910:	cmp	r1, r3
   28914:	cmpeq	r0, r2
   28918:	beq	28940 <__assert_fail@plt+0x1637c>
   2891c:	ldrd	r2, [sp, #56]	; 0x38
   28920:	mov	r0, #0
   28924:	mov	r1, #-2147483648	; 0x80000000
   28928:	bl	4226c <__assert_fail@plt+0x2fca8>
   2892c:	cmp	r0, r4
   28930:	sbcs	r3, r1, r5
   28934:	movlt	r3, #1
   28938:	movge	r3, #0
   2893c:	b	28878 <__assert_fail@plt+0x162b4>
   28940:	adds	r4, r4, #0
   28944:	adc	r5, r5, #-2147483648	; 0x80000000
   28948:	cmp	r4, #1
   2894c:	sbcs	r3, r5, #0
   28950:	movge	r3, #1
   28954:	movlt	r3, #0
   28958:	b	28878 <__assert_fail@plt+0x162b4>
   2895c:	mvn	r2, #0
   28960:	mvn	r3, #0
   28964:	cmp	r5, r3
   28968:	cmpeq	r4, r2
   2896c:	beq	2899c <__assert_fail@plt+0x163d8>
   28970:	mov	r2, r4
   28974:	mov	r3, r5
   28978:	mov	r0, #0
   2897c:	mov	r1, #-2147483648	; 0x80000000
   28980:	bl	4226c <__assert_fail@plt+0x2fca8>
   28984:	ldrd	r2, [sp, #56]	; 0x38
   28988:	cmp	r0, r2
   2898c:	sbcs	r3, r1, r3
   28990:	movlt	r3, #1
   28994:	movge	r3, #0
   28998:	b	28878 <__assert_fail@plt+0x162b4>
   2899c:	ldrd	r2, [sp, #56]	; 0x38
   289a0:	adds	r2, r2, #0
   289a4:	adc	r3, r3, #-2147483648	; 0x80000000
   289a8:	cmp	r2, #1
   289ac:	sbcs	r3, r3, #0
   289b0:	movge	r3, #1
   289b4:	movlt	r3, #0
   289b8:	b	28878 <__assert_fail@plt+0x162b4>
   289bc:	mov	r2, #56	; 0x38
   289c0:	mov	r1, #0
   289c4:	add	r0, sp, #168	; 0xa8
   289c8:	bl	12348 <memset@plt>
   289cc:	ldr	r3, [sl, #-48]	; 0xffffffd0
   289d0:	str	r3, [sp, #88]	; 0x58
   289d4:	ldr	r3, [sl, #-44]	; 0xffffffd4
   289d8:	str	r3, [sp, #92]	; 0x5c
   289dc:	mov	r3, #0
   289e0:	str	r3, [sp, #68]	; 0x44
   289e4:	mov	r4, #0
   289e8:	mov	r5, #0
   289ec:	str	r4, [sp, #80]	; 0x50
   289f0:	str	r5, [sp, #84]	; 0x54
   289f4:	strd	r4, [sp, #56]	; 0x38
   289f8:	str	r4, [sp, #72]	; 0x48
   289fc:	str	r5, [sp, #76]	; 0x4c
   28a00:	b	27248 <__assert_fail@plt+0x14c84>
   28a04:	mov	r2, #56	; 0x38
   28a08:	mov	r1, #0
   28a0c:	add	r0, sp, #168	; 0xa8
   28a10:	bl	12348 <memset@plt>
   28a14:	ldr	r3, [sl, #-48]	; 0xffffffd0
   28a18:	str	r3, [sp, #80]	; 0x50
   28a1c:	ldr	r3, [sl, #-44]	; 0xffffffd4
   28a20:	str	r3, [sp, #84]	; 0x54
   28a24:	mov	r3, #0
   28a28:	str	r3, [sp, #68]	; 0x44
   28a2c:	mov	r4, #0
   28a30:	mov	r5, #0
   28a34:	str	r4, [sp, #88]	; 0x58
   28a38:	str	r5, [sp, #92]	; 0x5c
   28a3c:	strd	r4, [sp, #56]	; 0x38
   28a40:	str	r4, [sp, #72]	; 0x48
   28a44:	str	r5, [sp, #76]	; 0x4c
   28a48:	b	27248 <__assert_fail@plt+0x14c84>
   28a4c:	mov	r2, #56	; 0x38
   28a50:	mov	r1, #0
   28a54:	add	r0, sp, #168	; 0xa8
   28a58:	bl	12348 <memset@plt>
   28a5c:	ldrd	r4, [sl, #-48]	; 0xffffffd0
   28a60:	mov	r3, #0
   28a64:	str	r3, [sp, #68]	; 0x44
   28a68:	str	r3, [sp, #80]	; 0x50
   28a6c:	str	r3, [sp, #84]	; 0x54
   28a70:	str	r3, [sp, #88]	; 0x58
   28a74:	str	r3, [sp, #92]	; 0x5c
   28a78:	str	r3, [sp, #56]	; 0x38
   28a7c:	str	r3, [sp, #60]	; 0x3c
   28a80:	str	r3, [sp, #72]	; 0x48
   28a84:	str	r3, [sp, #76]	; 0x4c
   28a88:	b	27248 <__assert_fail@plt+0x14c84>
   28a8c:	mov	r2, #56	; 0x38
   28a90:	mov	r1, #0
   28a94:	add	r0, sp, #168	; 0xa8
   28a98:	bl	12348 <memset@plt>
   28a9c:	ldrd	r2, [sl]
   28aa0:	strd	r2, [sp, #56]	; 0x38
   28aa4:	mov	r3, #0
   28aa8:	str	r3, [sp, #68]	; 0x44
   28aac:	mov	r4, #0
   28ab0:	mov	r5, #0
   28ab4:	str	r4, [sp, #80]	; 0x50
   28ab8:	str	r5, [sp, #84]	; 0x54
   28abc:	str	r4, [sp, #88]	; 0x58
   28ac0:	str	r5, [sp, #92]	; 0x5c
   28ac4:	str	r4, [sp, #72]	; 0x48
   28ac8:	str	r5, [sp, #76]	; 0x4c
   28acc:	b	27248 <__assert_fail@plt+0x14c84>
   28ad0:	ldrd	r0, [sl, #8]
   28ad4:	strd	r0, [sp, #128]	; 0x80
   28ad8:	adds	r0, r0, #-2147483648	; 0x80000000
   28adc:	adc	r1, r1, #0
   28ae0:	mvn	r2, #0
   28ae4:	mov	r3, #0
   28ae8:	cmp	r1, r3
   28aec:	cmpeq	r0, r2
   28af0:	bhi	28d48 <__assert_fail@plt+0x16784>
   28af4:	ldr	r3, [sp, #128]	; 0x80
   28af8:	str	r3, [sp, #168]	; 0xa8
   28afc:	mov	r3, #0
   28b00:	str	r3, [sp, #172]	; 0xac
   28b04:	b	27248 <__assert_fail@plt+0x14c84>
   28b08:	ldrd	r0, [sl, #8]
   28b0c:	strd	r0, [sp, #128]	; 0x80
   28b10:	adds	r0, r0, #-2147483648	; 0x80000000
   28b14:	adc	r1, r1, #0
   28b18:	mvn	r2, #0
   28b1c:	mov	r3, #0
   28b20:	cmp	r1, r3
   28b24:	cmpeq	r0, r2
   28b28:	bhi	28d50 <__assert_fail@plt+0x1678c>
   28b2c:	ldr	r3, [sp, #128]	; 0x80
   28b30:	str	r3, [sp, #168]	; 0xa8
   28b34:	mov	r3, #0
   28b38:	str	r3, [sp, #172]	; 0xac
   28b3c:	b	27248 <__assert_fail@plt+0x14c84>
   28b40:	add	r3, sl, #8
   28b44:	ldm	r3, {r0, r1, r2, r3}
   28b48:	stm	sp, {r0, r1, r2, r3}
   28b4c:	ldm	sl, {r2, r3}
   28b50:	ldr	r0, [sp, #96]	; 0x60
   28b54:	bl	25908 <__assert_fail@plt+0x13344>
   28b58:	b	27248 <__assert_fail@plt+0x14c84>
   28b5c:	sub	r3, sl, #48	; 0x30
   28b60:	ldm	r3, {r0, r1, r2, r3}
   28b64:	stm	sp, {r0, r1, r2, r3}
   28b68:	sub	r3, sl, #56	; 0x38
   28b6c:	ldm	r3, {r2, r3}
   28b70:	ldr	r0, [sp, #96]	; 0x60
   28b74:	bl	25908 <__assert_fail@plt+0x13344>
   28b78:	mov	r3, #1
   28b7c:	str	r3, [sp, #48]	; 0x30
   28b80:	mov	ip, sp
   28b84:	add	lr, sl, #8
   28b88:	ldm	lr!, {r0, r1, r2, r3}
   28b8c:	stmia	ip!, {r0, r1, r2, r3}
   28b90:	ldm	lr!, {r0, r1, r2, r3}
   28b94:	stmia	ip!, {r0, r1, r2, r3}
   28b98:	ldm	lr, {r0, r1, r2, r3}
   28b9c:	stm	ip, {r0, r1, r2, r3}
   28ba0:	ldm	sl, {r2, r3}
   28ba4:	ldr	r0, [sp, #96]	; 0x60
   28ba8:	bl	25a68 <__assert_fail@plt+0x134a4>
   28bac:	cmp	r0, #0
   28bb0:	bne	27248 <__assert_fail@plt+0x14c84>
   28bb4:	mov	r0, #1
   28bb8:	b	28cc4 <__assert_fail@plt+0x16700>
   28bbc:	mvn	r2, #0
   28bc0:	mvn	r3, #0
   28bc4:	strd	r2, [sp, #168]	; 0xa8
   28bc8:	b	27248 <__assert_fail@plt+0x14c84>
   28bcc:	ldrd	r2, [sl, #8]
   28bd0:	strd	r2, [sp, #168]	; 0xa8
   28bd4:	b	27248 <__assert_fail@plt+0x14c84>
   28bd8:	add	r2, r9, r2
   28bdc:	ldrb	r8, [r2, #2388]	; 0x954
   28be0:	b	2730c <__assert_fail@plt+0x14d48>
   28be4:	ldr	r3, [sp, #100]	; 0x64
   28be8:	cmp	r3, #3
   28bec:	beq	28bf8 <__assert_fail@plt+0x16634>
   28bf0:	add	r2, sp, #1344	; 0x540
   28bf4:	b	28c24 <__assert_fail@plt+0x16660>
   28bf8:	cmp	r7, #0
   28bfc:	mvngt	r7, #1
   28c00:	bgt	28bf0 <__assert_fail@plt+0x1662c>
   28c04:	bne	28bf0 <__assert_fail@plt+0x1662c>
   28c08:	str	r7, [sp, #104]	; 0x68
   28c0c:	mov	r0, #1
   28c10:	b	28cc4 <__assert_fail@plt+0x16700>
   28c14:	cmp	fp, r2
   28c18:	beq	28d58 <__assert_fail@plt+0x16794>
   28c1c:	sub	sl, sl, #56	; 0x38
   28c20:	ldrsh	r8, [fp, #-2]!
   28c24:	add	r8, r9, r8
   28c28:	add	r8, r8, #1120	; 0x460
   28c2c:	ldrsb	r3, [r8, #12]
   28c30:	cmn	r3, #93	; 0x5d
   28c34:	beq	28c14 <__assert_fail@plt+0x16650>
   28c38:	add	r3, r3, #1
   28c3c:	cmp	r3, #112	; 0x70
   28c40:	bhi	28c14 <__assert_fail@plt+0x16650>
   28c44:	add	r1, r9, r3
   28c48:	ldrb	r1, [r1, #2272]	; 0x8e0
   28c4c:	cmp	r1, #1
   28c50:	bne	28c14 <__assert_fail@plt+0x16650>
   28c54:	add	r3, r9, r3
   28c58:	ldrb	r8, [r3, #2388]	; 0x954
   28c5c:	cmp	r8, #0
   28c60:	ble	28c14 <__assert_fail@plt+0x16650>
   28c64:	add	sl, sl, #56	; 0x38
   28c68:	add	r1, sp, #1392	; 0x570
   28c6c:	ldrd	r2, [sp, #112]	; 0x70
   28c70:	strd	r2, [r1]
   28c74:	ldr	r3, [sp, #124]	; 0x7c
   28c78:	str	r3, [sp, #1400]	; 0x578
   28c7c:	mov	ip, sl
   28c80:	add	lr, sp, #1376	; 0x560
   28c84:	add	lr, lr, #8
   28c88:	ldm	lr!, {r0, r1, r2, r3}
   28c8c:	stmia	ip!, {r0, r1, r2, r3}
   28c90:	ldm	lr!, {r0, r1, r2, r3}
   28c94:	stmia	ip!, {r0, r1, r2, r3}
   28c98:	ldm	lr!, {r0, r1, r2, r3}
   28c9c:	stmia	ip!, {r0, r1, r2, r3}
   28ca0:	ldm	lr, {r0, r1}
   28ca4:	stm	ip, {r0, r1}
   28ca8:	mov	lr, fp
   28cac:	mov	r3, #3
   28cb0:	str	r3, [sp, #100]	; 0x64
   28cb4:	b	2730c <__assert_fail@plt+0x14d48>
   28cb8:	mov	r3, #0
   28cbc:	str	r3, [sp, #104]	; 0x68
   28cc0:	mov	r0, #2
   28cc4:	ldr	r3, [sp, #104]	; 0x68
   28cc8:	sub	r3, fp, r3, lsl #1
   28ccc:	add	r2, sp, #1344	; 0x540
   28cd0:	cmp	r3, r2
   28cd4:	beq	28cfc <__assert_fail@plt+0x16738>
   28cd8:	add	r2, sp, #1440	; 0x5a0
   28cdc:	sub	r3, r3, r2
   28ce0:	add	r3, r3, #94	; 0x5e
   28ce4:	lsr	r3, r3, #1
   28ce8:	add	r3, r3, #1
   28cec:	mov	r2, #0
   28cf0:	add	r2, r2, #1
   28cf4:	cmp	r2, r3
   28cf8:	bne	28cf0 <__assert_fail@plt+0x1672c>
   28cfc:	add	sp, sp, #1440	; 0x5a0
   28d00:	add	sp, sp, #4
   28d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d08:	mov	r3, #0
   28d0c:	str	r3, [sp, #104]	; 0x68
   28d10:	mov	r0, r3
   28d14:	b	28cc4 <__assert_fail@plt+0x16700>
   28d18:	mov	r0, #1
   28d1c:	b	28cc4 <__assert_fail@plt+0x16700>
   28d20:	mov	r0, #1
   28d24:	b	28cc4 <__assert_fail@plt+0x16700>
   28d28:	mov	r0, #1
   28d2c:	b	28cc4 <__assert_fail@plt+0x16700>
   28d30:	mov	r0, #1
   28d34:	b	28cc4 <__assert_fail@plt+0x16700>
   28d38:	mov	r0, #1
   28d3c:	b	28cc4 <__assert_fail@plt+0x16700>
   28d40:	mov	r0, #1
   28d44:	b	28cc4 <__assert_fail@plt+0x16700>
   28d48:	mov	r0, #1
   28d4c:	b	28cc4 <__assert_fail@plt+0x16700>
   28d50:	mov	r0, #1
   28d54:	b	28cc4 <__assert_fail@plt+0x16700>
   28d58:	mov	r0, #1
   28d5c:	b	28cfc <__assert_fail@plt+0x16738>
   28d60:	cmp	r5, #45	; 0x2d
   28d64:	movne	r3, #0
   28d68:	moveq	r3, #1
   28d6c:	b	26ba0 <__assert_fail@plt+0x145dc>
   28d70:	add	r5, r9, #1120	; 0x460
   28d74:	b	2710c <__assert_fail@plt+0x14b48>
   28d78:	add	r5, r9, #808	; 0x328
   28d7c:	b	2710c <__assert_fail@plt+0x14b48>
   28d80:	cmp	r7, #0
   28d84:	blt	26d8c <__assert_fail@plt+0x147c8>
   28d88:	ldr	r3, [sp, #56]	; 0x38
   28d8c:	cmp	r3, #0
   28d90:	sublt	r3, r5, #-2147483599	; 0x80000031
   28d94:	subge	r3, r5, #48	; 0x30
   28d98:	rsbge	r3, r3, #2130706432	; 0x7f000000
   28d9c:	addge	r3, r3, #16711680	; 0xff0000
   28da0:	addge	r3, r3, #65280	; 0xff00
   28da4:	addge	r3, r3, #255	; 0xff
   28da8:	cmp	r7, r3
   28dac:	movle	r3, #0
   28db0:	movgt	r3, #1
   28db4:	b	26c3c <__assert_fail@plt+0x14678>
   28db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28dbc:	sub	sp, sp, #620	; 0x26c
   28dc0:	mov	fp, r0
   28dc4:	mov	r4, r1
   28dc8:	subs	r7, r2, #0
   28dcc:	beq	28e44 <__assert_fail@plt+0x16880>
   28dd0:	ldr	r8, [r7]
   28dd4:	ldr	r9, [r7, #4]
   28dd8:	mov	r1, r4
   28ddc:	mov	r5, r1
   28de0:	add	r1, r1, #1
   28de4:	ldrb	r3, [r5]
   28de8:	cmp	r3, #9
   28dec:	bcc	28e00 <__assert_fail@plt+0x1683c>
   28df0:	cmp	r3, #13
   28df4:	bls	28ddc <__assert_fail@plt+0x16818>
   28df8:	cmp	r3, #32
   28dfc:	beq	28ddc <__assert_fail@plt+0x16818>
   28e00:	mov	r2, #56	; 0x38
   28e04:	mov	r1, #0
   28e08:	add	r0, sp, #360	; 0x168
   28e0c:	bl	12348 <memset@plt>
   28e10:	mov	r2, #4
   28e14:	ldr	r1, [pc, #2636]	; 29868 <__assert_fail@plt+0x172a4>
   28e18:	mov	r0, r5
   28e1c:	bl	12564 <strncmp@plt>
   28e20:	cmp	r0, #0
   28e24:	bne	2a1c8 <__assert_fail@plt+0x17c04>
   28e28:	add	r6, r5, #4
   28e2c:	ldrb	r3, [r5, #4]
   28e30:	cmp	r3, #0
   28e34:	beq	2a1c8 <__assert_fail@plt+0x17c04>
   28e38:	mov	r2, r6
   28e3c:	mov	r0, #1
   28e40:	b	28e7c <__assert_fail@plt+0x168b8>
   28e44:	add	r0, sp, #420	; 0x1a4
   28e48:	bl	3faf4 <__assert_fail@plt+0x2d530>
   28e4c:	add	r7, sp, #420	; 0x1a4
   28e50:	b	28dd0 <__assert_fail@plt+0x1680c>
   28e54:	add	r3, r2, #1
   28e58:	ldrb	r2, [r2, #1]
   28e5c:	cmp	r2, #92	; 0x5c
   28e60:	cmpne	r2, #34	; 0x22
   28e64:	bne	2a1c8 <__assert_fail@plt+0x17c04>
   28e68:	add	r2, r3, #1
   28e6c:	add	r0, r0, #1
   28e70:	ldrb	r3, [r3, #1]
   28e74:	cmp	r3, #0
   28e78:	beq	2a1c8 <__assert_fail@plt+0x17c04>
   28e7c:	cmp	r3, #92	; 0x5c
   28e80:	beq	28e54 <__assert_fail@plt+0x16890>
   28e84:	cmp	r3, #34	; 0x22
   28e88:	movne	r3, r2
   28e8c:	bne	28e68 <__assert_fail@plt+0x168a4>
   28e90:	cmp	r0, #100	; 0x64
   28e94:	addle	r0, sp, #428	; 0x1ac
   28e98:	movle	sl, #0
   28e9c:	bgt	28ef4 <__assert_fail@plt+0x16930>
   28ea0:	ldrb	r3, [r5, #4]
   28ea4:	cmp	r3, #34	; 0x22
   28ea8:	beq	28f08 <__assert_fail@plt+0x16944>
   28eac:	mov	r1, r0
   28eb0:	cmp	r3, #92	; 0x5c
   28eb4:	movne	r3, #0
   28eb8:	moveq	r3, #1
   28ebc:	add	r2, r6, r3
   28ec0:	ldrb	r3, [r6, r3]
   28ec4:	strb	r3, [r1], #1
   28ec8:	add	r6, r2, #1
   28ecc:	ldrb	r3, [r2, #1]
   28ed0:	cmp	r3, #34	; 0x22
   28ed4:	bne	28eb0 <__assert_fail@plt+0x168ec>
   28ed8:	mov	r3, #0
   28edc:	strb	r3, [r1]
   28ee0:	bl	3ef54 <__assert_fail@plt+0x2c990>
   28ee4:	subs	r4, r0, #0
   28ee8:	bne	28f10 <__assert_fail@plt+0x1694c>
   28eec:	mov	r9, #0
   28ef0:	b	28fa0 <__assert_fail@plt+0x169dc>
   28ef4:	bl	3079c <__assert_fail@plt+0x1e1d8>
   28ef8:	subs	sl, r0, #0
   28efc:	movne	r0, sl
   28f00:	bne	28ea0 <__assert_fail@plt+0x168dc>
   28f04:	b	28eec <__assert_fail@plt+0x16928>
   28f08:	mov	r1, r0
   28f0c:	b	28ed8 <__assert_fail@plt+0x16914>
   28f10:	add	r6, r6, #1
   28f14:	mov	r5, r6
   28f18:	add	r6, r6, #1
   28f1c:	ldrb	r3, [r5]
   28f20:	cmp	r3, #9
   28f24:	bcc	28f38 <__assert_fail@plt+0x16974>
   28f28:	cmp	r3, #13
   28f2c:	bls	28f14 <__assert_fail@plt+0x16950>
   28f30:	cmp	r3, #32
   28f34:	beq	28f14 <__assert_fail@plt+0x16950>
   28f38:	add	r2, sp, #316	; 0x13c
   28f3c:	mov	r1, r7
   28f40:	mov	r0, r4
   28f44:	bl	3f274 <__assert_fail@plt+0x2ccb0>
   28f48:	cmp	r0, #0
   28f4c:	moveq	r9, #0
   28f50:	bne	2a1e8 <__assert_fail@plt+0x17c24>
   28f54:	b	28f8c <__assert_fail@plt+0x169c8>
   28f58:	mov	r2, #0
   28f5c:	mov	r3, #-2147483648	; 0x80000000
   28f60:	subs	r2, r2, ip
   28f64:	sbc	r3, r3, ip, asr #31
   28f68:	ldr	r0, [pc, #2300]	; 2986c <__assert_fail@plt+0x172a8>
   28f6c:	mov	r1, #0
   28f70:	cmp	r0, r2
   28f74:	sbcs	r3, r1, r3
   28f78:	bge	2a208 <__assert_fail@plt+0x17c44>
   28f7c:	adds	r2, r0, ip
   28f80:	adc	r3, r1, ip, asr #31
   28f84:	strd	r2, [sp, #128]	; 0x80
   28f88:	mov	r9, #0
   28f8c:	ldr	r3, [sp, #656]	; 0x290
   28f90:	cmp	r4, r3
   28f94:	beq	28fa0 <__assert_fail@plt+0x169dc>
   28f98:	mov	r0, r4
   28f9c:	bl	3f12c <__assert_fail@plt+0x2cb68>
   28fa0:	mov	r0, sl
   28fa4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   28fa8:	mov	r0, r9
   28fac:	add	sp, sp, #620	; 0x26c
   28fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28fb4:	rsb	r3, r5, #-2147483648	; 0x80000000
   28fb8:	cmp	r3, r8
   28fbc:	movle	r3, #0
   28fc0:	movgt	r3, #1
   28fc4:	b	2900c <__assert_fail@plt+0x16a48>
   28fc8:	cmp	r9, r5
   28fcc:	movle	r3, #0
   28fd0:	movgt	r3, #1
   28fd4:	b	2900c <__assert_fail@plt+0x16a48>
   28fd8:	add	r5, r5, #7733248	; 0x760000
   28fdc:	add	r5, r5, #42752	; 0xa700
   28fe0:	cmp	r5, r6
   28fe4:	beq	29068 <__assert_fail@plt+0x16aa4>
   28fe8:	mov	r3, r5
   28fec:	cmp	r5, #0
   28ff0:	blt	28fb4 <__assert_fail@plt+0x169f0>
   28ff4:	cmp	r8, #0
   28ff8:	blt	28fc8 <__assert_fail@plt+0x16a04>
   28ffc:	sub	r3, r7, r5
   29000:	cmp	r3, r8
   29004:	movge	r3, #0
   29008:	movlt	r3, #1
   2900c:	cmp	r3, #0
   29010:	bne	29068 <__assert_fail@plt+0x16aa4>
   29014:	add	r3, r8, r5
   29018:	str	r3, [sp, #40]	; 0x28
   2901c:	add	r2, sp, #44	; 0x2c
   29020:	add	r1, sp, #40	; 0x28
   29024:	mov	r0, r4
   29028:	bl	3f274 <__assert_fail@plt+0x2ccb0>
   2902c:	cmp	r0, #0
   29030:	beq	28fd8 <__assert_fail@plt+0x16a14>
   29034:	ldr	r3, [sp, #84]	; 0x54
   29038:	cmp	r3, #0
   2903c:	beq	28fd8 <__assert_fail@plt+0x16a14>
   29040:	ldr	r2, [sp, #76]	; 0x4c
   29044:	ldr	r1, [sp, #284]	; 0x11c
   29048:	cmp	r2, r1
   2904c:	beq	28fd8 <__assert_fail@plt+0x16a14>
   29050:	str	r3, [sp, #288]	; 0x120
   29054:	ldr	r3, [pc, #2068]	; 29870 <__assert_fail@plt+0x172ac>
   29058:	str	r3, [sp, #292]	; 0x124
   2905c:	str	r2, [sp, #296]	; 0x128
   29060:	mov	r3, #0
   29064:	str	r3, [sp, #300]	; 0x12c
   29068:	ldr	r0, [sp, #276]	; 0x114
   2906c:	cmp	r0, #0
   29070:	beq	29098 <__assert_fail@plt+0x16ad4>
   29074:	ldr	r1, [sp, #288]	; 0x120
   29078:	cmp	r1, #0
   2907c:	beq	29098 <__assert_fail@plt+0x16ad4>
   29080:	bl	11f1c <strcmp@plt>
   29084:	cmp	r0, #0
   29088:	mvneq	r3, #0
   2908c:	streq	r3, [sp, #284]	; 0x11c
   29090:	moveq	r3, #0
   29094:	streq	r3, [sp, #288]	; 0x120
   29098:	add	r0, sp, #88	; 0x58
   2909c:	bl	26adc <__assert_fail@plt+0x14518>
   290a0:	subs	r8, r0, #0
   290a4:	movne	r9, #0
   290a8:	bne	28f8c <__assert_fail@plt+0x169c8>
   290ac:	ldrb	r9, [sp, #240]	; 0xf0
   290b0:	cmp	r9, #0
   290b4:	addne	r3, sp, #176	; 0xb0
   290b8:	ldmne	r3, {r0, r1}
   290bc:	stmne	fp, {r0, r1}
   290c0:	bne	28f8c <__assert_fail@plt+0x169c8>
   290c4:	ldr	r0, [sp, #260]	; 0x104
   290c8:	ldr	r1, [sp, #244]	; 0xf4
   290cc:	ldr	ip, [sp, #248]	; 0xf8
   290d0:	orr	r3, r0, r1
   290d4:	orr	r3, r3, ip
   290d8:	ldr	r2, [sp, #256]	; 0x100
   290dc:	orr	r3, r3, r2
   290e0:	ldr	lr, [sp, #264]	; 0x108
   290e4:	ldr	r2, [sp, #252]	; 0xfc
   290e8:	add	r2, r2, lr
   290ec:	orr	r3, r3, r2
   290f0:	cmp	r3, #1
   290f4:	bgt	28f8c <__assert_fail@plt+0x169c8>
   290f8:	ldrd	r2, [sp, #128]	; 0x80
   290fc:	cmp	r2, #0
   29100:	sbcs	lr, r3, #0
   29104:	blt	29180 <__assert_fail@plt+0x16bbc>
   29108:	ldr	lr, [sp, #136]	; 0x88
   2910c:	cmp	lr, #2
   29110:	beq	29158 <__assert_fail@plt+0x16b94>
   29114:	ldr	r6, [pc, #1880]	; 29874 <__assert_fail@plt+0x172b0>
   29118:	mov	r7, #0
   2911c:	cmp	r6, r2
   29120:	sbcs	lr, r7, r3
   29124:	blt	29210 <__assert_fail@plt+0x16c4c>
   29128:	subs	r6, r6, r2
   2912c:	sbc	r7, r7, r3
   29130:	cmp	r6, #-2147483648	; 0x80000000
   29134:	sbcs	lr, r7, #0
   29138:	movge	lr, #1
   2913c:	movlt	lr, #0
   29140:	cmp	lr, #0
   29144:	beq	29234 <__assert_fail@plt+0x16c70>
   29148:	sub	r3, r2, #1888	; 0x760
   2914c:	sub	r3, r3, #12
   29150:	str	r3, [sp, #592]	; 0x250
   29154:	b	28f8c <__assert_fail@plt+0x169c8>
   29158:	cmp	r2, #69	; 0x45
   2915c:	sbcs	lr, r3, #0
   29160:	ldrge	r6, [pc, #1796]	; 2986c <__assert_fail@plt+0x172a8>
   29164:	movlt	r6, #2000	; 0x7d0
   29168:	mov	r7, #0
   2916c:	adds	r2, r2, r6
   29170:	adc	r3, r3, r7
   29174:	cmp	r2, #0
   29178:	sbcs	lr, r3, #0
   2917c:	bge	29114 <__assert_fail@plt+0x16b50>
   29180:	ldr	r6, [pc, #1776]	; 29878 <__assert_fail@plt+0x172b4>
   29184:	mvn	r7, #0
   29188:	cmp	r2, r6
   2918c:	sbcs	lr, r3, r7
   29190:	blt	291d4 <__assert_fail@plt+0x16c10>
   29194:	ldr	r6, [pc, #1752]	; 29874 <__assert_fail@plt+0x172b0>
   29198:	mov	r7, #0
   2919c:	adds	r6, r6, r2
   291a0:	adc	r7, r7, r3
   291a4:	cmp	r6, #-2147483648	; 0x80000000
   291a8:	sbcs	lr, r7, #0
   291ac:	movge	lr, #1
   291b0:	movlt	lr, #0
   291b4:	cmp	lr, #0
   291b8:	beq	291f8 <__assert_fail@plt+0x16c34>
   291bc:	rsb	r2, r2, #-16777216	; 0xff000000
   291c0:	add	r2, r2, #16711680	; 0xff0000
   291c4:	add	r2, r2, #63488	; 0xf800
   291c8:	add	r2, r2, #148	; 0x94
   291cc:	str	r2, [sp, #592]	; 0x250
   291d0:	b	28f8c <__assert_fail@plt+0x169c8>
   291d4:	ldr	r6, [pc, #1696]	; 2987c <__assert_fail@plt+0x172b8>
   291d8:	mvn	r7, #0
   291dc:	subs	r6, r6, r2
   291e0:	sbc	r7, r7, r3
   291e4:	cmp	r6, #-2147483648	; 0x80000000
   291e8:	sbcs	lr, r7, #0
   291ec:	movge	lr, #1
   291f0:	movlt	lr, #0
   291f4:	b	291b4 <__assert_fail@plt+0x16bf0>
   291f8:	rsb	r2, r2, #-16777216	; 0xff000000
   291fc:	add	r2, r2, #16711680	; 0xff0000
   29200:	add	r2, r2, #63488	; 0xf800
   29204:	add	r2, r2, #148	; 0x94
   29208:	str	r2, [sp, #592]	; 0x250
   2920c:	b	29240 <__assert_fail@plt+0x16c7c>
   29210:	ldr	r6, [pc, #1636]	; 2987c <__assert_fail@plt+0x172b8>
   29214:	mvn	r7, #0
   29218:	adds	r6, r6, r2
   2921c:	adc	r7, r7, r3
   29220:	cmp	r6, #-2147483648	; 0x80000000
   29224:	sbcs	lr, r7, #0
   29228:	movge	lr, #1
   2922c:	movlt	lr, #0
   29230:	b	29140 <__assert_fail@plt+0x16b7c>
   29234:	sub	r3, r2, #1888	; 0x760
   29238:	sub	r3, r3, #12
   2923c:	str	r3, [sp, #592]	; 0x250
   29240:	ldrd	r2, [sp, #144]	; 0x90
   29244:	mov	r6, #-2147483647	; 0x80000001
   29248:	mvn	r7, #0
   2924c:	cmp	r2, r6
   29250:	sbcs	lr, r3, r7
   29254:	blt	29278 <__assert_fail@plt+0x16cb4>
   29258:	cmp	r2, #0
   2925c:	sbcs	lr, r3, #0
   29260:	blt	29284 <__assert_fail@plt+0x16cc0>
   29264:	subs	r6, r2, #1
   29268:	sbc	r7, r3, #0
   2926c:	cmp	r6, #-2147483648	; 0x80000000
   29270:	sbcs	lr, r7, #0
   29274:	blt	29284 <__assert_fail@plt+0x16cc0>
   29278:	sub	r2, r2, #1
   2927c:	str	r2, [sp, #588]	; 0x24c
   29280:	b	28f8c <__assert_fail@plt+0x169c8>
   29284:	sub	r2, r2, #1
   29288:	str	r2, [sp, #588]	; 0x24c
   2928c:	ldrd	r2, [sp, #152]	; 0x98
   29290:	cmp	r2, #0
   29294:	sbcs	lr, r3, #0
   29298:	blt	29680 <__assert_fail@plt+0x170bc>
   2929c:	cmp	r2, #-2147483648	; 0x80000000
   292a0:	sbcs	lr, r3, #0
   292a4:	movge	lr, #1
   292a8:	movlt	lr, #0
   292ac:	str	lr, [sp, #16]
   292b0:	ldr	lr, [sp, #16]
   292b4:	cmp	lr, #0
   292b8:	strne	r2, [sp, #584]	; 0x248
   292bc:	bne	28f8c <__assert_fail@plt+0x169c8>
   292c0:	str	r2, [sp, #584]	; 0x248
   292c4:	cmp	r0, #0
   292c8:	bne	292e8 <__assert_fail@plt+0x16d24>
   292cc:	cmp	ip, #0
   292d0:	cmpeq	r1, #0
   292d4:	moveq	r1, #1
   292d8:	movne	r1, #0
   292dc:	ldrb	r3, [sp, #241]	; 0xf1
   292e0:	tst	r1, r3
   292e4:	beq	29714 <__assert_fail@plt+0x17150>
   292e8:	ldrd	r2, [sp, #160]	; 0xa0
   292ec:	ldr	r1, [sp, #116]	; 0x74
   292f0:	cmp	r1, #0
   292f4:	beq	296b4 <__assert_fail@plt+0x170f0>
   292f8:	cmp	r1, #1
   292fc:	beq	296dc <__assert_fail@plt+0x17118>
   29300:	cmp	r3, #0
   29304:	cmpeq	r2, #23
   29308:	bhi	29708 <__assert_fail@plt+0x17144>
   2930c:	str	r2, [sp, #580]	; 0x244
   29310:	cmp	r2, #0
   29314:	blt	28f8c <__assert_fail@plt+0x169c8>
   29318:	ldr	r3, [sp, #168]	; 0xa8
   2931c:	str	r3, [sp, #576]	; 0x240
   29320:	ldr	r3, [sp, #176]	; 0xb0
   29324:	str	r3, [sp, #572]	; 0x23c
   29328:	ldr	r2, [sp, #248]	; 0xf8
   2932c:	ldr	r3, [sp, #244]	; 0xf4
   29330:	orr	r3, r3, r2
   29334:	ldr	r2, [sp, #260]	; 0x104
   29338:	orrs	r3, r3, r2
   2933c:	mvnne	r3, #0
   29340:	strne	r3, [sp, #604]	; 0x25c
   29344:	ldr	r3, [sp, #252]	; 0xfc
   29348:	cmp	r3, #0
   2934c:	ldrne	r3, [sp, #108]	; 0x6c
   29350:	strne	r3, [sp, #604]	; 0x25c
   29354:	ldr	r3, [sp, #572]	; 0x23c
   29358:	str	r3, [sp, #24]
   2935c:	str	r3, [sp, #528]	; 0x210
   29360:	ldr	r3, [sp, #576]	; 0x240
   29364:	str	r3, [sp, #28]
   29368:	str	r3, [sp, #532]	; 0x214
   2936c:	ldr	r3, [sp, #580]	; 0x244
   29370:	str	r3, [sp, #32]
   29374:	str	r3, [sp, #536]	; 0x218
   29378:	ldr	r3, [sp, #584]	; 0x248
   2937c:	str	r3, [sp]
   29380:	str	r3, [sp, #540]	; 0x21c
   29384:	ldr	r7, [sp, #588]	; 0x24c
   29388:	str	r7, [sp, #544]	; 0x220
   2938c:	ldr	r6, [sp, #592]	; 0x250
   29390:	str	r6, [sp, #548]	; 0x224
   29394:	ldr	r3, [sp, #604]	; 0x25c
   29398:	str	r3, [sp, #36]	; 0x24
   2939c:	str	r3, [sp, #560]	; 0x230
   293a0:	mvn	r3, #0
   293a4:	str	r3, [sp, #596]	; 0x254
   293a8:	add	r1, sp, #572	; 0x23c
   293ac:	mov	r0, r4
   293b0:	bl	3f308 <__assert_fail@plt+0x2cd44>
   293b4:	mov	r5, r0
   293b8:	add	r1, sp, #572	; 0x23c
   293bc:	add	r0, sp, #528	; 0x210
   293c0:	bl	26638 <__assert_fail@plt+0x14074>
   293c4:	cmp	r0, #0
   293c8:	bne	29478 <__assert_fail@plt+0x16eb4>
   293cc:	ldr	r3, [sp, #264]	; 0x108
   293d0:	cmp	r3, #0
   293d4:	beq	28f8c <__assert_fail@plt+0x169c8>
   293d8:	mov	r3, #88	; 0x58
   293dc:	strb	r3, [sp, #46]	; 0x2e
   293e0:	strb	r3, [sp, #45]	; 0x2d
   293e4:	add	r5, sp, #616	; 0x268
   293e8:	strb	r3, [r5, #-572]!	; 0xfffffdc4
   293ec:	add	r1, r5, #3
   293f0:	ldr	r0, [sp, #112]	; 0x70
   293f4:	bl	26880 <__assert_fail@plt+0x142bc>
   293f8:	mov	r0, r5
   293fc:	bl	3ef54 <__assert_fail@plt+0x2c990>
   29400:	subs	r3, r0, #0
   29404:	mov	r2, r3
   29408:	beq	28f8c <__assert_fail@plt+0x169c8>
   2940c:	ldr	r3, [sp, #24]
   29410:	str	r3, [sp, #572]	; 0x23c
   29414:	ldr	r3, [sp, #28]
   29418:	str	r3, [sp, #576]	; 0x240
   2941c:	ldr	r3, [sp, #32]
   29420:	str	r3, [sp, #580]	; 0x244
   29424:	ldr	r3, [sp]
   29428:	str	r3, [sp, #584]	; 0x248
   2942c:	str	r7, [sp, #588]	; 0x24c
   29430:	str	r6, [sp, #592]	; 0x250
   29434:	ldr	r3, [sp, #36]	; 0x24
   29438:	str	r3, [sp, #604]	; 0x25c
   2943c:	mvn	r3, #0
   29440:	str	r3, [sp, #596]	; 0x254
   29444:	add	r1, sp, #572	; 0x23c
   29448:	mov	r6, r2
   2944c:	mov	r0, r2
   29450:	bl	3f308 <__assert_fail@plt+0x2cd44>
   29454:	mov	r5, r0
   29458:	add	r1, sp, #572	; 0x23c
   2945c:	add	r0, sp, #528	; 0x210
   29460:	bl	26638 <__assert_fail@plt+0x14074>
   29464:	mov	r7, r0
   29468:	mov	r0, r6
   2946c:	bl	3f12c <__assert_fail@plt+0x2cb68>
   29470:	cmp	r7, #0
   29474:	beq	28f8c <__assert_fail@plt+0x169c8>
   29478:	ldr	r3, [sp, #248]	; 0xf8
   2947c:	cmp	r3, #0
   29480:	beq	298ac <__assert_fail@plt+0x172e8>
   29484:	ldr	r3, [sp, #244]	; 0xf4
   29488:	cmp	r3, #0
   2948c:	bne	298ac <__assert_fail@plt+0x172e8>
   29490:	ldrd	r6, [sp, #96]	; 0x60
   29494:	cmp	r6, #1
   29498:	sbcs	r3, r7, #0
   2949c:	blt	294b0 <__assert_fail@plt+0x16eec>
   294a0:	ldr	r3, [sp, #104]	; 0x68
   294a4:	ldr	r2, [sp, #596]	; 0x254
   294a8:	cmp	r2, r3
   294ac:	bne	2a308 <__assert_fail@plt+0x17d44>
   294b0:	cmp	r6, #0
   294b4:	sbcs	r3, r7, #0
   294b8:	bge	2972c <__assert_fail@plt+0x17168>
   294bc:	cmp	r6, #1
   294c0:	sbcs	r3, r7, #0
   294c4:	blt	2a334 <__assert_fail@plt+0x17d70>
   294c8:	ldr	r3, [sp, #104]	; 0x68
   294cc:	ldr	r2, [sp, #596]	; 0x254
   294d0:	cmp	r2, r3
   294d4:	bne	2a320 <__assert_fail@plt+0x17d5c>
   294d8:	mvn	r2, #0
   294dc:	mvn	r3, #0
   294e0:	cmp	r7, r3
   294e4:	cmpeq	r6, r2
   294e8:	moveq	r3, r8
   294ec:	beq	2953c <__assert_fail@plt+0x16f78>
   294f0:	cmp	r6, #1
   294f4:	sbcs	r3, r7, #0
   294f8:	movlt	r2, r8
   294fc:	blt	29510 <__assert_fail@plt+0x16f4c>
   29500:	ldr	r3, [sp, #104]	; 0x68
   29504:	ldr	r2, [sp, #596]	; 0x254
   29508:	subs	r2, r2, r3
   2950c:	movne	r2, #1
   29510:	subs	r0, r6, r2
   29514:	sbc	r1, r7, r2, asr #31
   29518:	mov	r2, r0
   2951c:	mov	r3, r1
   29520:	mov	r0, #0
   29524:	mov	r1, #-2147483648	; 0x80000000
   29528:	bl	4226c <__assert_fail@plt+0x2fca8>
   2952c:	cmp	r0, #7
   29530:	sbcs	r3, r1, #0
   29534:	movlt	r3, #1
   29538:	movge	r3, #0
   2953c:	and	r3, r3, #1
   29540:	cmp	r3, #0
   29544:	bne	28f8c <__assert_fail@plt+0x169c8>
   29548:	cmp	r6, #1
   2954c:	sbcs	r2, r7, #0
   29550:	blt	29564 <__assert_fail@plt+0x16fa0>
   29554:	ldr	r2, [sp, #104]	; 0x68
   29558:	ldr	r3, [sp, #596]	; 0x254
   2955c:	subs	r3, r3, r2
   29560:	movne	r3, #1
   29564:	subs	r6, r6, r3
   29568:	sbc	r7, r7, r3, asr #31
   2956c:	lsl	r1, r7, #3
   29570:	lsl	r2, r6, #3
   29574:	orr	r3, r1, r6, lsr #29
   29578:	subs	r6, r2, r6
   2957c:	sbc	r7, r3, r7
   29580:	cmp	r6, #0
   29584:	sbcs	r3, r7, #0
   29588:	bge	29770 <__assert_fail@plt+0x171ac>
   2958c:	ldr	r2, [sp, #596]	; 0x254
   29590:	ldr	r3, [sp, #104]	; 0x68
   29594:	sub	r3, r3, r2
   29598:	add	r3, r3, #7
   2959c:	ldr	r2, [pc, #732]	; 29880 <__assert_fail@plt+0x172bc>
   295a0:	smull	r1, r2, r2, r3
   295a4:	add	r1, r2, r3
   295a8:	asr	r2, r3, #31
   295ac:	rsb	r2, r2, r1, asr #2
   295b0:	rsb	r2, r2, r2, lsl #3
   295b4:	sub	r3, r3, r2
   295b8:	mov	r0, r3
   295bc:	asr	r1, r3, #31
   295c0:	mov	r2, #0
   295c4:	mov	r3, #-2147483648	; 0x80000000
   295c8:	subs	r2, r2, r6
   295cc:	sbc	r3, r3, r7
   295d0:	cmp	r0, r2
   295d4:	sbcs	r3, r1, r3
   295d8:	movlt	r3, #1
   295dc:	movge	r3, #0
   295e0:	cmp	r3, #0
   295e4:	bne	28f8c <__assert_fail@plt+0x169c8>
   295e8:	ldr	r2, [sp, #596]	; 0x254
   295ec:	ldr	r3, [sp, #104]	; 0x68
   295f0:	sub	r3, r3, r2
   295f4:	add	r3, r3, #7
   295f8:	ldr	r2, [pc, #640]	; 29880 <__assert_fail@plt+0x172bc>
   295fc:	smull	r1, r2, r2, r3
   29600:	add	r1, r2, r3
   29604:	asr	r2, r3, #31
   29608:	rsb	r2, r2, r1, asr #2
   2960c:	rsb	r2, r2, r2, lsl #3
   29610:	sub	r3, r3, r2
   29614:	adds	r6, r6, r3
   29618:	adc	r7, r7, r3, asr #31
   2961c:	ldr	ip, [sp, #584]	; 0x248
   29620:	cmp	ip, #0
   29624:	bge	297ec <__assert_fail@plt+0x17228>
   29628:	rsb	r0, ip, #-2147483648	; 0x80000000
   2962c:	asr	r1, r0, #31
   29630:	cmp	r6, r0
   29634:	sbcs	r3, r7, r1
   29638:	movlt	r2, #1
   2963c:	blt	29668 <__assert_fail@plt+0x170a4>
   29640:	cmp	r6, #0
   29644:	sbcs	r3, r7, #0
   29648:	movlt	r2, r8
   2964c:	blt	29668 <__assert_fail@plt+0x170a4>
   29650:	adds	r0, r6, ip
   29654:	adc	r1, r7, ip, asr #31
   29658:	cmp	r0, #-2147483648	; 0x80000000
   2965c:	sbcs	r3, r1, #0
   29660:	movge	r2, #1
   29664:	movlt	r2, #0
   29668:	and	r2, r2, #1
   2966c:	cmp	r2, #0
   29670:	beq	29884 <__assert_fail@plt+0x172c0>
   29674:	add	r3, ip, r6
   29678:	str	r3, [sp, #584]	; 0x248
   2967c:	b	28f8c <__assert_fail@plt+0x169c8>
   29680:	mov	r6, #-2147483648	; 0x80000000
   29684:	mvn	r7, #0
   29688:	subs	r6, r6, r2
   2968c:	sbc	r7, r7, r3
   29690:	cmp	r6, #1
   29694:	sbcs	lr, r7, #0
   29698:	movge	lr, #1
   2969c:	movlt	lr, #0
   296a0:	cmp	r2, #-2147483648	; 0x80000000
   296a4:	sbcs	r5, r3, #0
   296a8:	orrge	lr, lr, #1
   296ac:	str	lr, [sp, #16]
   296b0:	b	292b0 <__assert_fail@plt+0x16cec>
   296b4:	subs	r0, r2, #1
   296b8:	sbc	r1, r3, #0
   296bc:	cmp	r1, #0
   296c0:	cmpeq	r0, #10
   296c4:	bls	2930c <__assert_fail@plt+0x16d48>
   296c8:	cmp	r3, #0
   296cc:	cmpeq	r2, #12
   296d0:	mvnne	r2, #0
   296d4:	moveq	r2, #0
   296d8:	b	2930c <__assert_fail@plt+0x16d48>
   296dc:	subs	r0, r2, #1
   296e0:	sbc	r1, r3, #0
   296e4:	cmp	r1, #0
   296e8:	cmpeq	r0, #10
   296ec:	addls	r2, r2, #12
   296f0:	bls	2930c <__assert_fail@plt+0x16d48>
   296f4:	cmp	r3, #0
   296f8:	cmpeq	r2, #12
   296fc:	moveq	r3, #12
   29700:	streq	r3, [sp, #580]	; 0x244
   29704:	beq	29318 <__assert_fail@plt+0x16d54>
   29708:	mvn	r3, #0
   2970c:	str	r3, [sp, #580]	; 0x244
   29710:	b	28f8c <__assert_fail@plt+0x169c8>
   29714:	mov	r3, #0
   29718:	str	r3, [sp, #572]	; 0x23c
   2971c:	str	r3, [sp, #576]	; 0x240
   29720:	str	r3, [sp, #580]	; 0x244
   29724:	str	r3, [sp, #180]	; 0xb4
   29728:	b	29328 <__assert_fail@plt+0x16d64>
   2972c:	cmp	r6, #1
   29730:	sbcs	r3, r7, #0
   29734:	movlt	r3, r8
   29738:	blt	2974c <__assert_fail@plt+0x17188>
   2973c:	ldr	r2, [sp, #104]	; 0x68
   29740:	ldr	r3, [sp, #596]	; 0x254
   29744:	subs	r3, r3, r2
   29748:	movne	r3, #1
   2974c:	subs	r0, r6, r3
   29750:	sbc	r1, r7, r3, asr #31
   29754:	add	r3, pc, #260	; 0x104
   29758:	ldrd	r2, [r3]
   2975c:	cmp	r2, r0
   29760:	sbcs	r3, r3, r1
   29764:	movlt	r3, #1
   29768:	movge	r3, #0
   2976c:	b	29540 <__assert_fail@plt+0x16f7c>
   29770:	ldr	r2, [sp, #596]	; 0x254
   29774:	ldr	r3, [sp, #104]	; 0x68
   29778:	sub	r3, r3, r2
   2977c:	add	r3, r3, #7
   29780:	ldr	r2, [pc, #248]	; 29880 <__assert_fail@plt+0x172bc>
   29784:	smull	r1, r2, r2, r3
   29788:	add	r2, r2, r3
   2978c:	asr	r1, r3, #31
   29790:	rsb	r2, r1, r2, asr #2
   29794:	rsb	r2, r2, r2, lsl #3
   29798:	subs	r2, r3, r2
   2979c:	bpl	297c4 <__assert_fail@plt+0x17200>
   297a0:	mov	r0, #0
   297a4:	mov	r1, #-2147483648	; 0x80000000
   297a8:	subs	r0, r0, r2
   297ac:	sbc	r1, r1, r2, asr #31
   297b0:	cmp	r6, r0
   297b4:	sbcs	r3, r7, r1
   297b8:	movlt	r3, #1
   297bc:	movge	r3, #0
   297c0:	b	295e0 <__assert_fail@plt+0x1701c>
   297c4:	mvn	r0, #0
   297c8:	mvn	r1, #-2147483648	; 0x80000000
   297cc:	subs	r0, r0, r6
   297d0:	sbc	r1, r1, r7
   297d4:	asr	r3, r2, #31
   297d8:	cmp	r0, r2
   297dc:	sbcs	r3, r1, r3
   297e0:	movlt	r3, #1
   297e4:	movge	r3, #0
   297e8:	b	295e0 <__assert_fail@plt+0x1701c>
   297ec:	cmp	r6, #0
   297f0:	sbcs	r3, r7, #0
   297f4:	bge	2983c <__assert_fail@plt+0x17278>
   297f8:	asr	r1, ip, #31
   297fc:	mov	r2, ip
   29800:	mov	r3, r1
   29804:	mov	r0, #-2147483648	; 0x80000000
   29808:	mvn	r1, #0
   2980c:	subs	r0, r0, r6
   29810:	sbc	r1, r1, r7
   29814:	cmp	ip, r0
   29818:	sbcs	r1, r3, r1
   2981c:	blt	29674 <__assert_fail@plt+0x170b0>
   29820:	adds	r0, ip, r6
   29824:	adc	r1, r3, r7
   29828:	cmp	r0, #-2147483648	; 0x80000000
   2982c:	sbcs	r3, r1, #0
   29830:	movge	r2, #1
   29834:	movlt	r2, #0
   29838:	b	2966c <__assert_fail@plt+0x170a8>
   2983c:	mvn	r0, #-2147483648	; 0x80000000
   29840:	sub	r0, r0, ip
   29844:	asr	r1, r0, #31
   29848:	cmp	r0, r6
   2984c:	sbcs	r3, r1, r7
   29850:	movlt	r2, #1
   29854:	movge	r2, #0
   29858:	b	2966c <__assert_fail@plt+0x170a8>
   2985c:	nop			; (mov r0, r0)
   29860:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   29864:	subne	r2, r9, #-1845493760	; 0x92000000
   29868:	andeq	r7, r4, r0, asr #19
   2986c:	andeq	r0, r0, ip, ror #14
   29870:	andeq	r0, r0, sp, lsl #2
   29874:	andeq	r0, r0, fp, ror #14
   29878:			; <UNDEFINED> instruction: 0xfffff895
   2987c:			; <UNDEFINED> instruction: 0xfffff894
   29880:	subls	r2, r9, #-1828716544	; 0x93000000
   29884:	add	r3, ip, r6
   29888:	str	r3, [sp, #584]	; 0x248
   2988c:	mvn	r3, #0
   29890:	str	r3, [sp, #604]	; 0x25c
   29894:	add	r1, sp, #572	; 0x23c
   29898:	mov	r0, r4
   2989c:	bl	3f308 <__assert_fail@plt+0x2cd44>
   298a0:	mov	r5, r0
   298a4:	cmn	r0, #1
   298a8:	beq	28f8c <__assert_fail@plt+0x169c8>
   298ac:	ldrd	r6, [sp, #184]	; 0xb8
   298b0:	ldrd	r2, [sp, #192]	; 0xc0
   298b4:	strd	r2, [sp]
   298b8:	ldrd	r0, [sp, #200]	; 0xc8
   298bc:	strd	r0, [sp, #8]
   298c0:	orr	r2, r2, r6
   298c4:	orr	r3, r3, r7
   298c8:	orr	r0, r0, r2
   298cc:	orr	r1, r1, r3
   298d0:	mov	r2, r0
   298d4:	mov	r3, r1
   298d8:	orrs	r3, r2, r3
   298dc:	beq	29a94 <__assert_fail@plt+0x174d0>
   298e0:	cmp	r6, #0
   298e4:	sbcs	r3, r7, #0
   298e8:	bge	29dc4 <__assert_fail@plt+0x17800>
   298ec:	ldr	ip, [sp, #592]	; 0x250
   298f0:	asr	r3, ip, #31
   298f4:	mov	r1, r3
   298f8:	mov	r2, #-2147483648	; 0x80000000
   298fc:	mvn	r3, #0
   29900:	subs	r2, r2, r6
   29904:	sbc	r3, r3, r7
   29908:	cmp	ip, r2
   2990c:	sbcs	r3, r1, r3
   29910:	movlt	r3, #1
   29914:	blt	2993c <__assert_fail@plt+0x17378>
   29918:	cmp	ip, #0
   2991c:	movlt	r3, r8
   29920:	blt	2993c <__assert_fail@plt+0x17378>
   29924:	adds	r2, ip, r6
   29928:	adc	r3, r1, r7
   2992c:	cmp	r2, #-2147483648	; 0x80000000
   29930:	sbcs	r3, r3, #0
   29934:	movge	r3, #1
   29938:	movlt	r3, #0
   2993c:	and	r3, r3, #1
   29940:	cmp	r3, #0
   29944:	bne	28f8c <__assert_fail@plt+0x169c8>
   29948:	ldr	ip, [sp, #592]	; 0x250
   2994c:	add	ip, ip, r6
   29950:	ldrd	r2, [sp]
   29954:	cmp	r2, #0
   29958:	sbcs	r3, r3, #0
   2995c:	bge	29e34 <__assert_fail@plt+0x17870>
   29960:	ldr	lr, [sp, #588]	; 0x24c
   29964:	asr	r7, lr, #31
   29968:	mov	r2, #-2147483648	; 0x80000000
   2996c:	mvn	r3, #0
   29970:	ldrd	r0, [sp]
   29974:	subs	r0, r2, r0
   29978:	sbc	r1, r3, r1
   2997c:	mov	r3, r1
   29980:	cmp	lr, r0
   29984:	sbcs	r3, r7, r3
   29988:	movlt	r3, #1
   2998c:	blt	299b8 <__assert_fail@plt+0x173f4>
   29990:	cmp	lr, #0
   29994:	movlt	r3, r8
   29998:	blt	299b8 <__assert_fail@plt+0x173f4>
   2999c:	ldrd	r0, [sp]
   299a0:	adds	r0, r0, lr
   299a4:	adc	r1, r1, r7
   299a8:	cmp	r0, #-2147483648	; 0x80000000
   299ac:	sbcs	r3, r1, #0
   299b0:	movge	r3, #1
   299b4:	movlt	r3, #0
   299b8:	and	r3, r3, #1
   299bc:	cmp	r3, #0
   299c0:	bne	28f8c <__assert_fail@plt+0x169c8>
   299c4:	ldr	lr, [sp, #588]	; 0x24c
   299c8:	ldr	r3, [sp]
   299cc:	add	lr, lr, r3
   299d0:	ldrd	r2, [sp, #8]
   299d4:	cmp	r2, #0
   299d8:	sbcs	r3, r3, #0
   299dc:	bge	29eac <__assert_fail@plt+0x178e8>
   299e0:	ldr	r5, [sp, #584]	; 0x248
   299e4:	asr	r7, r5, #31
   299e8:	mov	r2, #-2147483648	; 0x80000000
   299ec:	mvn	r3, #0
   299f0:	ldrd	r0, [sp, #8]
   299f4:	subs	r0, r2, r0
   299f8:	sbc	r1, r3, r1
   299fc:	mov	r3, r1
   29a00:	cmp	r5, r0
   29a04:	sbcs	r3, r7, r3
   29a08:	movlt	r3, #1
   29a0c:	blt	29a38 <__assert_fail@plt+0x17474>
   29a10:	cmp	r5, #0
   29a14:	movlt	r3, r8
   29a18:	blt	29a38 <__assert_fail@plt+0x17474>
   29a1c:	ldrd	r0, [sp, #8]
   29a20:	adds	r0, r0, r5
   29a24:	adc	r1, r1, r7
   29a28:	cmp	r0, #-2147483648	; 0x80000000
   29a2c:	sbcs	r3, r1, #0
   29a30:	movge	r3, #1
   29a34:	movlt	r3, #0
   29a38:	and	r3, r3, #1
   29a3c:	cmp	r3, #0
   29a40:	bne	28f8c <__assert_fail@plt+0x169c8>
   29a44:	ldr	r3, [sp, #584]	; 0x248
   29a48:	ldr	r2, [sp, #8]
   29a4c:	add	r3, r3, r2
   29a50:	str	ip, [sp, #592]	; 0x250
   29a54:	str	lr, [sp, #588]	; 0x24c
   29a58:	str	r3, [sp, #584]	; 0x248
   29a5c:	ldr	r3, [sp, #32]
   29a60:	str	r3, [sp, #580]	; 0x244
   29a64:	ldr	r3, [sp, #28]
   29a68:	str	r3, [sp, #576]	; 0x240
   29a6c:	ldr	r3, [sp, #24]
   29a70:	str	r3, [sp, #572]	; 0x23c
   29a74:	ldr	r3, [sp, #36]	; 0x24
   29a78:	str	r3, [sp, #604]	; 0x25c
   29a7c:	add	r1, sp, #572	; 0x23c
   29a80:	mov	r0, r4
   29a84:	bl	3f308 <__assert_fail@plt+0x2cd44>
   29a88:	mov	r5, r0
   29a8c:	cmn	r0, #1
   29a90:	beq	28f8c <__assert_fail@plt+0x169c8>
   29a94:	ldr	r3, [sp, #264]	; 0x108
   29a98:	cmp	r3, #0
   29a9c:	beq	29b58 <__assert_fail@plt+0x17594>
   29aa0:	ldr	r0, [sp, #608]	; 0x260
   29aa4:	ldr	r1, [sp, #112]	; 0x70
   29aa8:	mvn	r3, r1
   29aac:	lsr	r3, r3, #31
   29ab0:	cmp	r3, r0, lsr #31
   29ab4:	bne	29f78 <__assert_fail@plt+0x179b4>
   29ab8:	cmp	r1, #0
   29abc:	bge	29f54 <__assert_fail@plt+0x17990>
   29ac0:	asr	r3, r1, #31
   29ac4:	adds	r2, r1, #0
   29ac8:	adc	r3, r3, #-2147483648	; 0x80000000
   29acc:	asr	r7, r0, #31
   29ad0:	cmp	r2, r0
   29ad4:	sbcs	r3, r3, r7
   29ad8:	movlt	r3, #1
   29adc:	movge	r3, #0
   29ae0:	cmp	r3, #0
   29ae4:	beq	29f78 <__assert_fail@plt+0x179b4>
   29ae8:	asr	r3, r0, #31
   29aec:	subs	r2, r1, r0
   29af0:	rsc	r3, r3, r1, asr #31
   29af4:	mov	ip, #1
   29af8:	adds	ip, ip, #0
   29afc:	movne	ip, #1
   29b00:	mvn	r1, r5
   29b04:	lsr	r1, r1, #31
   29b08:	cmp	r1, r3, lsr #31
   29b0c:	beq	29fa8 <__assert_fail@plt+0x179e4>
   29b10:	asr	r1, r5, #31
   29b14:	cmp	r5, r2
   29b18:	sbcs	lr, r1, r3
   29b1c:	bge	29f8c <__assert_fail@plt+0x179c8>
   29b20:	subs	r0, r2, r5
   29b24:	sbc	r1, r3, r1
   29b28:	subs	r0, r0, #1
   29b2c:	sbc	r1, r1, #0
   29b30:	cmp	r0, #-2147483648	; 0x80000000
   29b34:	sbcs	r1, r1, #0
   29b38:	movge	r1, #1
   29b3c:	movlt	r1, #0
   29b40:	cmp	r1, #0
   29b44:	sub	r5, r5, r2
   29b48:	movne	r3, #1
   29b4c:	moveq	r3, r8
   29b50:	orrs	r3, ip, r3
   29b54:	bne	28f8c <__assert_fail@plt+0x169c8>
   29b58:	ldr	r2, [sp, #232]	; 0xe8
   29b5c:	asr	r3, r2, #31
   29b60:	ldr	r1, [sp, #180]	; 0xb4
   29b64:	adds	r6, r2, r1
   29b68:	adc	r7, r3, r1, asr #31
   29b6c:	add	r3, pc, #948	; 0x3b4
   29b70:	ldrd	r2, [r3]
   29b74:	mov	r0, r6
   29b78:	mov	r1, r7
   29b7c:	bl	4226c <__assert_fail@plt+0x2fca8>
   29b80:	add	r1, pc, #928	; 0x3a0
   29b84:	ldrd	r0, [r1]
   29b88:	adds	r0, r0, r2
   29b8c:	adc	r1, r1, r3
   29b90:	add	r3, pc, #912	; 0x390
   29b94:	ldrd	r2, [r3]
   29b98:	bl	4226c <__assert_fail@plt+0x2fca8>
   29b9c:	mov	ip, r2
   29ba0:	str	r2, [sp, #24]
   29ba4:	add	r3, pc, #892	; 0x37c
   29ba8:	ldrd	r2, [r3]
   29bac:	subs	r0, r6, ip
   29bb0:	sbc	r1, r7, ip, asr #31
   29bb4:	bl	4226c <__assert_fail@plt+0x2fca8>
   29bb8:	str	r0, [sp, #8]
   29bbc:	ldrd	r6, [sp, #208]	; 0xd0
   29bc0:	cmp	r6, #0
   29bc4:	sbcs	r3, r7, #0
   29bc8:	bge	29fec <__assert_fail@plt+0x17a28>
   29bcc:	mvn	r2, #0
   29bd0:	mvn	r3, #0
   29bd4:	cmp	r7, r3
   29bd8:	cmpeq	r6, r2
   29bdc:	beq	29c08 <__assert_fail@plt+0x17644>
   29be0:	mov	r2, r6
   29be4:	mov	r3, r7
   29be8:	mov	r0, #0
   29bec:	mov	r1, #-2147483648	; 0x80000000
   29bf0:	bl	4226c <__assert_fail@plt+0x2fca8>
   29bf4:	cmp	r0, #3600	; 0xe10
   29bf8:	sbcs	r3, r1, #0
   29bfc:	movlt	r3, #1
   29c00:	movge	r3, #0
   29c04:	str	r3, [sp, #16]
   29c08:	ldr	r3, [sp, #16]
   29c0c:	cmp	r3, #0
   29c10:	bne	28f8c <__assert_fail@plt+0x169c8>
   29c14:	mov	r1, #3600	; 0xe10
   29c18:	umull	r2, r3, r6, r1
   29c1c:	mla	r3, r1, r7, r3
   29c20:	cmp	r2, #0
   29c24:	sbcs	r1, r3, #0
   29c28:	bge	2a008 <__assert_fail@plt+0x17a44>
   29c2c:	mov	r0, #0
   29c30:	mov	r1, #-2147483648	; 0x80000000
   29c34:	subs	r0, r0, r2
   29c38:	sbc	r1, r1, r3
   29c3c:	asr	r7, r5, #31
   29c40:	cmp	r5, r0
   29c44:	sbcs	r1, r7, r1
   29c48:	movlt	r1, #1
   29c4c:	movge	r1, #0
   29c50:	cmp	r1, #0
   29c54:	bne	28f8c <__assert_fail@plt+0x169c8>
   29c58:	adds	r6, r2, r5
   29c5c:	adc	r7, r3, r5, asr #31
   29c60:	strd	r6, [sp]
   29c64:	ldrd	r6, [sp, #216]	; 0xd8
   29c68:	cmp	r6, #0
   29c6c:	sbcs	r3, r7, #0
   29c70:	bge	2a05c <__assert_fail@plt+0x17a98>
   29c74:	mvn	r2, #0
   29c78:	mvn	r3, #0
   29c7c:	cmp	r7, r3
   29c80:	cmpeq	r6, r2
   29c84:	beq	29cac <__assert_fail@plt+0x176e8>
   29c88:	mov	r2, r6
   29c8c:	mov	r3, r7
   29c90:	mov	r0, #0
   29c94:	mov	r1, #-2147483648	; 0x80000000
   29c98:	bl	4226c <__assert_fail@plt+0x2fca8>
   29c9c:	cmp	r0, #60	; 0x3c
   29ca0:	sbcs	r3, r1, #0
   29ca4:	movlt	r1, #1
   29ca8:	movge	r1, #0
   29cac:	cmp	r1, #0
   29cb0:	bne	28f8c <__assert_fail@plt+0x169c8>
   29cb4:	mov	r1, #60	; 0x3c
   29cb8:	umull	r2, r3, r6, r1
   29cbc:	mla	r3, r1, r7, r3
   29cc0:	strd	r2, [sp, #16]
   29cc4:	cmp	r2, #0
   29cc8:	sbcs	r1, r3, #0
   29ccc:	bge	2a078 <__assert_fail@plt+0x17ab4>
   29cd0:	mov	r0, #0
   29cd4:	mov	r1, #-2147483648	; 0x80000000
   29cd8:	subs	r0, r0, r2
   29cdc:	sbc	r1, r1, r3
   29ce0:	ldrd	r6, [sp]
   29ce4:	cmp	r6, r0
   29ce8:	sbcs	r1, r7, r1
   29cec:	movlt	r1, #1
   29cf0:	movge	r1, #0
   29cf4:	cmp	r1, #0
   29cf8:	bne	28f8c <__assert_fail@plt+0x169c8>
   29cfc:	ldrd	r0, [sp]
   29d00:	adds	r0, r0, r2
   29d04:	adc	r1, r1, r3
   29d08:	mov	r2, r0
   29d0c:	mov	r3, r1
   29d10:	ldrd	r0, [sp, #224]	; 0xe0
   29d14:	cmp	r0, #0
   29d18:	sbcs	ip, r1, #0
   29d1c:	bge	2a0f0 <__assert_fail@plt+0x17b2c>
   29d20:	mov	r6, #0
   29d24:	mov	r7, #-2147483648	; 0x80000000
   29d28:	subs	r6, r6, r0
   29d2c:	sbc	r7, r7, r1
   29d30:	cmp	r2, r6
   29d34:	sbcs	ip, r3, r7
   29d38:	movlt	ip, #1
   29d3c:	movge	ip, #0
   29d40:	cmp	ip, #0
   29d44:	bne	28f8c <__assert_fail@plt+0x169c8>
   29d48:	adds	r2, r2, r0
   29d4c:	adc	r3, r3, r1
   29d50:	ldr	r1, [sp, #8]
   29d54:	cmp	r1, #0
   29d58:	bge	2a144 <__assert_fail@plt+0x17b80>
   29d5c:	mov	ip, r1
   29d60:	rsb	r0, r1, #-2147483648	; 0x80000000
   29d64:	asr	r1, r0, #31
   29d68:	cmp	r2, r0
   29d6c:	sbcs	r1, r3, r1
   29d70:	movlt	r8, #1
   29d74:	blt	29d9c <__assert_fail@plt+0x177d8>
   29d78:	cmp	r2, #0
   29d7c:	sbcs	r1, r3, #0
   29d80:	blt	29d9c <__assert_fail@plt+0x177d8>
   29d84:	adds	r0, r2, ip
   29d88:	adc	r1, r3, ip, asr #31
   29d8c:	cmp	r0, #-2147483648	; 0x80000000
   29d90:	sbcs	r1, r1, #0
   29d94:	movge	r8, #1
   29d98:	movlt	r8, #0
   29d9c:	and	r1, r8, #1
   29da0:	cmp	r1, #0
   29da4:	bne	28f8c <__assert_fail@plt+0x169c8>
   29da8:	ldr	r1, [sp, #8]
   29dac:	add	r2, r2, r1
   29db0:	str	r2, [fp]
   29db4:	ldr	r3, [sp, #24]
   29db8:	str	r3, [fp, #4]
   29dbc:	mov	r9, #1
   29dc0:	b	28f8c <__assert_fail@plt+0x169c8>
   29dc4:	ldr	r2, [sp, #592]	; 0x250
   29dc8:	cmp	r2, #0
   29dcc:	bge	29e00 <__assert_fail@plt+0x1783c>
   29dd0:	rsb	r0, r2, #-2147483648	; 0x80000000
   29dd4:	asr	r1, r0, #31
   29dd8:	cmp	r6, r0
   29ddc:	sbcs	r3, r7, r1
   29de0:	blt	28f8c <__assert_fail@plt+0x169c8>
   29de4:	adds	r0, r6, r2
   29de8:	adc	r1, r7, r2, asr #31
   29dec:	cmp	r0, #-2147483648	; 0x80000000
   29df0:	sbcs	r3, r1, #0
   29df4:	movge	r3, #1
   29df8:	movlt	r3, #0
   29dfc:	b	29940 <__assert_fail@plt+0x1737c>
   29e00:	cmp	r6, #-2147483648	; 0x80000000
   29e04:	sbcs	r3, r7, #0
   29e08:	bge	28f8c <__assert_fail@plt+0x169c8>
   29e0c:	mvn	r0, #-2147483648	; 0x80000000
   29e10:	mov	r1, #0
   29e14:	subs	r0, r0, r6
   29e18:	sbc	r1, r1, r7
   29e1c:	asr	r3, r2, #31
   29e20:	cmp	r0, r2
   29e24:	sbcs	r3, r1, r3
   29e28:	movlt	r3, #1
   29e2c:	movge	r3, #0
   29e30:	b	29940 <__assert_fail@plt+0x1737c>
   29e34:	ldr	r2, [sp, #588]	; 0x24c
   29e38:	cmp	r2, #0
   29e3c:	bge	29e74 <__assert_fail@plt+0x178b0>
   29e40:	rsb	r0, r2, #-2147483648	; 0x80000000
   29e44:	asr	r1, r0, #31
   29e48:	ldrd	r6, [sp]
   29e4c:	cmp	r6, r0
   29e50:	sbcs	r3, r7, r1
   29e54:	blt	28f8c <__assert_fail@plt+0x169c8>
   29e58:	adds	r0, r6, r2
   29e5c:	adc	r1, r7, r2, asr #31
   29e60:	cmp	r0, #-2147483648	; 0x80000000
   29e64:	sbcs	r3, r1, #0
   29e68:	movge	r3, #1
   29e6c:	movlt	r3, #0
   29e70:	b	299bc <__assert_fail@plt+0x173f8>
   29e74:	ldrd	r6, [sp]
   29e78:	cmp	r6, #-2147483648	; 0x80000000
   29e7c:	sbcs	r3, r7, #0
   29e80:	bge	28f8c <__assert_fail@plt+0x169c8>
   29e84:	mvn	r0, #-2147483648	; 0x80000000
   29e88:	mov	r1, #0
   29e8c:	subs	r6, r0, r6
   29e90:	sbc	r7, r1, r7
   29e94:	asr	r3, r2, #31
   29e98:	cmp	r6, r2
   29e9c:	sbcs	r3, r7, r3
   29ea0:	movlt	r3, #1
   29ea4:	movge	r3, #0
   29ea8:	b	299bc <__assert_fail@plt+0x173f8>
   29eac:	ldr	r2, [sp, #584]	; 0x248
   29eb0:	cmp	r2, #0
   29eb4:	bge	29eec <__assert_fail@plt+0x17928>
   29eb8:	rsb	r0, r2, #-2147483648	; 0x80000000
   29ebc:	asr	r1, r0, #31
   29ec0:	ldrd	r6, [sp, #8]
   29ec4:	cmp	r6, r0
   29ec8:	sbcs	r3, r7, r1
   29ecc:	blt	28f8c <__assert_fail@plt+0x169c8>
   29ed0:	adds	r0, r6, r2
   29ed4:	adc	r1, r7, r2, asr #31
   29ed8:	cmp	r0, #-2147483648	; 0x80000000
   29edc:	sbcs	r3, r1, #0
   29ee0:	movge	r3, #1
   29ee4:	movlt	r3, #0
   29ee8:	b	29a3c <__assert_fail@plt+0x17478>
   29eec:	ldrd	r6, [sp, #8]
   29ef0:	cmp	r6, #-2147483648	; 0x80000000
   29ef4:	sbcs	r3, r7, #0
   29ef8:	bge	28f8c <__assert_fail@plt+0x169c8>
   29efc:	mvn	r0, #-2147483648	; 0x80000000
   29f00:	mov	r1, #0
   29f04:	subs	r6, r0, r6
   29f08:	sbc	r7, r1, r7
   29f0c:	asr	r3, r2, #31
   29f10:	cmp	r6, r2
   29f14:	sbcs	r3, r7, r3
   29f18:	movlt	r3, #1
   29f1c:	movge	r3, #0
   29f20:	b	29a3c <__assert_fail@plt+0x17478>
   29f24:	nop			; (mov r0, r0)
   29f28:	blcc	fe6dc730 <stdout@@GLIBC_2.4+0xfe6831dc>
   29f2c:	andeq	r0, r0, r0
   29f30:	mcrrcc	14, 6, r5, sp, cr15
   29f34:	andeq	r1, r9, fp, lsr #20
   29f38:	eorcs	r2, r2, #536870914	; 0x20000002
   29f3c:	eoreq	r2, r2, #536870914	; 0x20000002
   29f40:	bicseq	r9, sl, r0, lsl #24
   29f44:	rsbseq	sl, r6, r0, lsl #14
   29f48:	andeq	r0, r0, sp, lsl #2
   29f4c:	andeq	r0, r0, ip, ror #14
   29f50:	andeq	r6, r4, r8, asr sp
   29f54:	asr	r3, r0, #31
   29f58:	subs	r2, r0, #1
   29f5c:	sbc	r3, r3, #-2147483648	; 0x80000000
   29f60:	asr	r7, r1, #31
   29f64:	cmp	r2, r1
   29f68:	sbcs	r3, r3, r7
   29f6c:	movlt	r3, #1
   29f70:	movge	r3, #0
   29f74:	b	29ae0 <__assert_fail@plt+0x1751c>
   29f78:	asr	r3, r0, #31
   29f7c:	subs	r2, r1, r0
   29f80:	rsc	r3, r3, r1, asr #31
   29f84:	mov	ip, r8
   29f88:	b	29af8 <__assert_fail@plt+0x17534>
   29f8c:	subs	r0, r5, r2
   29f90:	sbc	r1, r1, r3
   29f94:	cmp	r0, #-2147483648	; 0x80000000
   29f98:	sbcs	r1, r1, #0
   29f9c:	movge	r1, #1
   29fa0:	movlt	r1, #0
   29fa4:	b	29b40 <__assert_fail@plt+0x1757c>
   29fa8:	cmp	r5, #0
   29fac:	bge	29fcc <__assert_fail@plt+0x17a08>
   29fb0:	add	r0, r5, #-2147483648	; 0x80000000
   29fb4:	asr	r1, r0, #31
   29fb8:	cmp	r0, r2
   29fbc:	sbcs	r1, r1, r3
   29fc0:	movlt	r1, #1
   29fc4:	movge	r1, #0
   29fc8:	b	29b40 <__assert_fail@plt+0x1757c>
   29fcc:	subs	r6, r2, #-2147483647	; 0x80000001
   29fd0:	adc	r7, r3, #0
   29fd4:	asr	r1, r5, #31
   29fd8:	cmp	r6, r5
   29fdc:	sbcs	r1, r7, r1
   29fe0:	movlt	r1, #1
   29fe4:	movge	r1, #0
   29fe8:	b	29b40 <__assert_fail@plt+0x1757c>
   29fec:	sub	r3, pc, #196	; 0xc4
   29ff0:	ldrd	r2, [r3]
   29ff4:	cmp	r2, r6
   29ff8:	sbcs	r3, r3, r7
   29ffc:	movlt	r3, #1
   2a000:	movge	r3, #0
   2a004:	b	29c0c <__assert_fail@plt+0x17648>
   2a008:	cmp	r5, #0
   2a00c:	bge	2a034 <__assert_fail@plt+0x17a70>
   2a010:	mov	r0, #0
   2a014:	mov	r1, #-2147483648	; 0x80000000
   2a018:	subs	r0, r0, r5
   2a01c:	sbc	r1, r1, r5, asr #31
   2a020:	cmp	r2, r0
   2a024:	sbcs	r1, r3, r1
   2a028:	movlt	r1, #1
   2a02c:	movge	r1, #0
   2a030:	b	29c50 <__assert_fail@plt+0x1768c>
   2a034:	mvn	r0, #0
   2a038:	mvn	r1, #-2147483648	; 0x80000000
   2a03c:	subs	r0, r0, r2
   2a040:	sbc	r1, r1, r3
   2a044:	asr	r7, r5, #31
   2a048:	cmp	r0, r5
   2a04c:	sbcs	r1, r1, r7
   2a050:	movlt	r1, #1
   2a054:	movge	r1, #0
   2a058:	b	29c50 <__assert_fail@plt+0x1768c>
   2a05c:	sub	r3, pc, #300	; 0x12c
   2a060:	ldrd	r2, [r3]
   2a064:	cmp	r2, r6
   2a068:	sbcs	r3, r3, r7
   2a06c:	movlt	r1, #1
   2a070:	movge	r1, #0
   2a074:	b	29cac <__assert_fail@plt+0x176e8>
   2a078:	ldrd	r0, [sp]
   2a07c:	cmp	r0, #0
   2a080:	sbcs	r1, r1, #0
   2a084:	bge	2a0bc <__assert_fail@plt+0x17af8>
   2a088:	mov	r0, #0
   2a08c:	mov	r1, #-2147483648	; 0x80000000
   2a090:	ldrd	r6, [sp]
   2a094:	subs	r6, r0, r6
   2a098:	sbc	r7, r1, r7
   2a09c:	mov	r0, r6
   2a0a0:	mov	r1, r7
   2a0a4:	ldrd	r6, [sp, #16]
   2a0a8:	cmp	r6, r0
   2a0ac:	sbcs	r1, r7, r1
   2a0b0:	movlt	r1, #1
   2a0b4:	movge	r1, #0
   2a0b8:	b	29cf4 <__assert_fail@plt+0x17730>
   2a0bc:	mvn	r0, #0
   2a0c0:	mvn	r1, #-2147483648	; 0x80000000
   2a0c4:	ldrd	r6, [sp, #16]
   2a0c8:	subs	r6, r0, r6
   2a0cc:	sbc	r7, r1, r7
   2a0d0:	mov	r0, r6
   2a0d4:	mov	r1, r7
   2a0d8:	ldrd	r6, [sp]
   2a0dc:	cmp	r0, r6
   2a0e0:	sbcs	r1, r1, r7
   2a0e4:	movlt	r1, #1
   2a0e8:	movge	r1, #0
   2a0ec:	b	29cf4 <__assert_fail@plt+0x17730>
   2a0f0:	cmp	r2, #0
   2a0f4:	sbcs	ip, r3, #0
   2a0f8:	bge	2a120 <__assert_fail@plt+0x17b5c>
   2a0fc:	mov	r6, #0
   2a100:	mov	r7, #-2147483648	; 0x80000000
   2a104:	subs	r6, r6, r2
   2a108:	sbc	r7, r7, r3
   2a10c:	cmp	r0, r6
   2a110:	sbcs	ip, r1, r7
   2a114:	movlt	ip, #1
   2a118:	movge	ip, #0
   2a11c:	b	29d40 <__assert_fail@plt+0x1777c>
   2a120:	mvn	r6, #0
   2a124:	mvn	r7, #-2147483648	; 0x80000000
   2a128:	subs	r6, r6, r0
   2a12c:	sbc	r7, r7, r1
   2a130:	cmp	r6, r2
   2a134:	sbcs	ip, r7, r3
   2a138:	movlt	ip, #1
   2a13c:	movge	ip, #0
   2a140:	b	29d40 <__assert_fail@plt+0x1777c>
   2a144:	cmp	r2, #0
   2a148:	sbcs	r1, r3, #0
   2a14c:	bge	2a190 <__assert_fail@plt+0x17bcc>
   2a150:	ldr	r0, [sp, #8]
   2a154:	asr	r1, r0, #31
   2a158:	mov	r6, #-2147483648	; 0x80000000
   2a15c:	mvn	r7, #0
   2a160:	subs	r6, r6, r2
   2a164:	sbc	r7, r7, r3
   2a168:	cmp	r0, r6
   2a16c:	sbcs	ip, r1, r7
   2a170:	blt	28f8c <__assert_fail@plt+0x169c8>
   2a174:	adds	r0, r0, r2
   2a178:	adc	r1, r1, r3
   2a17c:	cmp	r0, #-2147483648	; 0x80000000
   2a180:	sbcs	r1, r1, #0
   2a184:	movge	r1, #1
   2a188:	movlt	r1, #0
   2a18c:	b	29da0 <__assert_fail@plt+0x177dc>
   2a190:	ldr	r1, [sp, #8]
   2a194:	rsb	r0, r1, #2130706432	; 0x7f000000
   2a198:	add	r0, r0, #16711680	; 0xff0000
   2a19c:	add	r0, r0, #65280	; 0xff00
   2a1a0:	add	r0, r0, #255	; 0xff
   2a1a4:	asr	r1, r0, #31
   2a1a8:	cmp	r0, r2
   2a1ac:	sbcs	r1, r1, r3
   2a1b0:	movlt	r1, #1
   2a1b4:	movge	r1, #0
   2a1b8:	b	29da0 <__assert_fail@plt+0x177dc>
   2a1bc:	mov	sl, #0
   2a1c0:	mov	r9, sl
   2a1c4:	b	28fa0 <__assert_fail@plt+0x169dc>
   2a1c8:	add	r2, sp, #316	; 0x13c
   2a1cc:	mov	r1, r7
   2a1d0:	ldr	r0, [sp, #656]	; 0x290
   2a1d4:	bl	3f274 <__assert_fail@plt+0x2ccb0>
   2a1d8:	cmp	r0, #0
   2a1dc:	beq	2a1bc <__assert_fail@plt+0x17bf8>
   2a1e0:	ldr	r4, [sp, #656]	; 0x290
   2a1e4:	mov	sl, #0
   2a1e8:	ldrb	r2, [r5]
   2a1ec:	ldr	r3, [pc, #-676]	; 29f50 <__assert_fail@plt+0x1798c>
   2a1f0:	cmp	r2, #0
   2a1f4:	moveq	r5, r3
   2a1f8:	str	r5, [sp, #88]	; 0x58
   2a1fc:	ldr	ip, [sp, #336]	; 0x150
   2a200:	cmp	ip, #0
   2a204:	blt	28f58 <__assert_fail@plt+0x16994>
   2a208:	ldr	r2, [pc, #-708]	; 29f4c <__assert_fail@plt+0x17988>
   2a20c:	mov	r3, #0
   2a210:	adds	r2, r2, ip
   2a214:	adc	r3, r3, ip, asr #31
   2a218:	strd	r2, [sp, #128]	; 0x80
   2a21c:	mov	r5, #0
   2a220:	str	r5, [sp, #136]	; 0x88
   2a224:	ldr	r2, [sp, #332]	; 0x14c
   2a228:	add	r2, r2, #1
   2a22c:	asr	r3, r2, #31
   2a230:	strd	r2, [sp, #144]	; 0x90
   2a234:	ldr	r2, [sp, #328]	; 0x148
   2a238:	asr	r3, r2, #31
   2a23c:	strd	r2, [sp, #152]	; 0x98
   2a240:	ldr	r2, [sp, #324]	; 0x144
   2a244:	asr	r3, r2, #31
   2a248:	strd	r2, [sp, #160]	; 0xa0
   2a24c:	ldr	r2, [sp, #320]	; 0x140
   2a250:	asr	r3, r2, #31
   2a254:	strd	r2, [sp, #168]	; 0xa8
   2a258:	ldr	r3, [sp, #316]	; 0x13c
   2a25c:	str	r3, [sp, #176]	; 0xb0
   2a260:	str	r9, [sp, #180]	; 0xb4
   2a264:	ldr	r6, [sp, #348]	; 0x15c
   2a268:	str	r6, [sp, #604]	; 0x25c
   2a26c:	mov	r3, #2
   2a270:	str	r3, [sp, #116]	; 0x74
   2a274:	add	ip, sp, #184	; 0xb8
   2a278:	add	lr, sp, #360	; 0x168
   2a27c:	ldm	lr!, {r0, r1, r2, r3}
   2a280:	stmia	ip!, {r0, r1, r2, r3}
   2a284:	ldm	lr!, {r0, r1, r2, r3}
   2a288:	stmia	ip!, {r0, r1, r2, r3}
   2a28c:	ldm	lr!, {r0, r1, r2, r3}
   2a290:	stmia	ip!, {r0, r1, r2, r3}
   2a294:	ldm	lr, {r0, r1}
   2a298:	stm	ip, {r0, r1}
   2a29c:	strb	r5, [sp, #240]	; 0xf0
   2a2a0:	strb	r5, [sp, #241]	; 0xf1
   2a2a4:	str	r5, [sp, #244]	; 0xf4
   2a2a8:	str	r5, [sp, #248]	; 0xf8
   2a2ac:	str	r5, [sp, #260]	; 0x104
   2a2b0:	str	r5, [sp, #252]	; 0xfc
   2a2b4:	str	r5, [sp, #256]	; 0x100
   2a2b8:	str	r5, [sp, #264]	; 0x108
   2a2bc:	strb	r5, [sp, #268]	; 0x10c
   2a2c0:	strb	r5, [sp, #269]	; 0x10d
   2a2c4:	strb	r5, [sp, #270]	; 0x10e
   2a2c8:	strb	r5, [sp, #272]	; 0x110
   2a2cc:	strb	r5, [sp, #271]	; 0x10f
   2a2d0:	strb	r5, [sp, #273]	; 0x111
   2a2d4:	strb	r5, [sp, #274]	; 0x112
   2a2d8:	strb	r5, [sp, #275]	; 0x113
   2a2dc:	ldr	r3, [sp, #356]	; 0x164
   2a2e0:	str	r3, [sp, #276]	; 0x114
   2a2e4:	ldr	r3, [pc, #-932]	; 29f48 <__assert_fail@plt+0x17984>
   2a2e8:	str	r3, [sp, #280]	; 0x118
   2a2ec:	str	r6, [sp, #284]	; 0x11c
   2a2f0:	str	r5, [sp, #288]	; 0x120
   2a2f4:	ldr	r5, [pc, #-952]	; 29f44 <__assert_fail@plt+0x17980>
   2a2f8:	mvn	r7, #-2147483648	; 0x80000000
   2a2fc:	rsb	r9, r8, #-2147483648	; 0x80000000
   2a300:	ldr	r6, [pc, #-968]	; 29f40 <__assert_fail@plt+0x1797c>
   2a304:	b	28fe8 <__assert_fail@plt+0x16a24>
   2a308:	subs	r2, r6, #1
   2a30c:	sbc	r3, r7, #0
   2a310:	cmp	r2, #0
   2a314:	sbcs	r3, r3, #0
   2a318:	bge	2973c <__assert_fail@plt+0x17178>
   2a31c:	b	29500 <__assert_fail@plt+0x16f3c>
   2a320:	orrs	r3, r6, r7
   2a324:	moveq	r3, r8
   2a328:	beq	2953c <__assert_fail@plt+0x16f78>
   2a32c:	mov	r2, #1
   2a330:	b	29510 <__assert_fail@plt+0x16f4c>
   2a334:	mvn	r2, #0
   2a338:	mvn	r3, #0
   2a33c:	cmp	r7, r3
   2a340:	cmpeq	r6, r2
   2a344:	moveq	r3, r8
   2a348:	beq	2953c <__assert_fail@plt+0x16f78>
   2a34c:	mov	r2, r8
   2a350:	b	29510 <__assert_fail@plt+0x16f4c>
   2a354:	push	{r4, r5, r6, r7, r8, lr}
   2a358:	sub	sp, sp, #8
   2a35c:	mov	r5, r0
   2a360:	mov	r6, r1
   2a364:	mov	r7, r2
   2a368:	ldr	r0, [pc, #72]	; 2a3b8 <__assert_fail@plt+0x17df4>
   2a36c:	bl	121f8 <getenv@plt>
   2a370:	mov	r8, r0
   2a374:	bl	3ef54 <__assert_fail@plt+0x2c990>
   2a378:	subs	r4, r0, #0
   2a37c:	moveq	r5, #0
   2a380:	beq	2a3ac <__assert_fail@plt+0x17de8>
   2a384:	str	r8, [sp, #4]
   2a388:	str	r4, [sp]
   2a38c:	mov	r3, #0
   2a390:	mov	r2, r7
   2a394:	mov	r1, r6
   2a398:	mov	r0, r5
   2a39c:	bl	28db8 <__assert_fail@plt+0x167f4>
   2a3a0:	mov	r5, r0
   2a3a4:	mov	r0, r4
   2a3a8:	bl	3f12c <__assert_fail@plt+0x2cb68>
   2a3ac:	mov	r0, r5
   2a3b0:	add	sp, sp, #8
   2a3b4:	pop	{r4, r5, r6, r7, r8, pc}
   2a3b8:	andeq	r7, r4, r8, asr #19
   2a3bc:	push	{r4, r5, r6, lr}
   2a3c0:	subs	r4, r0, #0
   2a3c4:	beq	2a43c <__assert_fail@plt+0x17e78>
   2a3c8:	mov	r1, #47	; 0x2f
   2a3cc:	mov	r0, r4
   2a3d0:	bl	12438 <strrchr@plt>
   2a3d4:	cmp	r0, #0
   2a3d8:	addne	r5, r0, #1
   2a3dc:	moveq	r5, r4
   2a3e0:	sub	r3, r5, r4
   2a3e4:	cmp	r3, #6
   2a3e8:	ble	2a428 <__assert_fail@plt+0x17e64>
   2a3ec:	mov	r2, #7
   2a3f0:	ldr	r1, [pc, #96]	; 2a458 <__assert_fail@plt+0x17e94>
   2a3f4:	sub	r0, r5, #7
   2a3f8:	bl	12564 <strncmp@plt>
   2a3fc:	cmp	r0, #0
   2a400:	bne	2a428 <__assert_fail@plt+0x17e64>
   2a404:	mov	r2, #3
   2a408:	ldr	r1, [pc, #76]	; 2a45c <__assert_fail@plt+0x17e98>
   2a40c:	mov	r0, r5
   2a410:	bl	12564 <strncmp@plt>
   2a414:	cmp	r0, #0
   2a418:	addeq	r4, r5, #3
   2a41c:	ldreq	r3, [pc, #60]	; 2a460 <__assert_fail@plt+0x17e9c>
   2a420:	streq	r4, [r3]
   2a424:	movne	r4, r5
   2a428:	ldr	r3, [pc, #52]	; 2a464 <__assert_fail@plt+0x17ea0>
   2a42c:	str	r4, [r3]
   2a430:	ldr	r3, [pc, #48]	; 2a468 <__assert_fail@plt+0x17ea4>
   2a434:	str	r4, [r3]
   2a438:	pop	{r4, r5, r6, pc}
   2a43c:	ldr	r3, [pc, #40]	; 2a46c <__assert_fail@plt+0x17ea8>
   2a440:	ldr	r3, [r3]
   2a444:	mov	r2, #55	; 0x37
   2a448:	mov	r1, #1
   2a44c:	ldr	r0, [pc, #28]	; 2a470 <__assert_fail@plt+0x17eac>
   2a450:	bl	12138 <fwrite@plt>
   2a454:	bl	12570 <abort@plt>
   2a458:	ldrdeq	r7, [r4], -ip
   2a45c:	andeq	r7, r4, r4, ror #25
   2a460:	andeq	r9, r5, r8, lsr r5
   2a464:	andeq	r9, r5, r4, lsl #26
   2a468:	andeq	r9, r5, r0, asr #10
   2a46c:	andeq	r9, r5, r8, asr #10
   2a470:	andeq	r7, r4, r4, lsr #25
   2a474:	push	{r4, r5, r6, lr}
   2a478:	mov	r5, r0
   2a47c:	mov	r4, r1
   2a480:	mov	r2, #48	; 0x30
   2a484:	mov	r1, #0
   2a488:	bl	12348 <memset@plt>
   2a48c:	cmp	r4, #10
   2a490:	beq	2a4a0 <__assert_fail@plt+0x17edc>
   2a494:	str	r4, [r5]
   2a498:	mov	r0, r5
   2a49c:	pop	{r4, r5, r6, pc}
   2a4a0:	bl	12570 <abort@plt>
   2a4a4:	push	{r4, r5, r6, lr}
   2a4a8:	mov	r4, r0
   2a4ac:	mov	r5, r1
   2a4b0:	mov	r2, #5
   2a4b4:	mov	r1, r0
   2a4b8:	mov	r0, #0
   2a4bc:	bl	12084 <dcgettext@plt>
   2a4c0:	cmp	r4, r0
   2a4c4:	popne	{r4, r5, r6, pc}
   2a4c8:	bl	3fc50 <__assert_fail@plt+0x2d68c>
   2a4cc:	ldrb	r3, [r0]
   2a4d0:	bic	r3, r3, #32
   2a4d4:	cmp	r3, #85	; 0x55
   2a4d8:	beq	2a554 <__assert_fail@plt+0x17f90>
   2a4dc:	cmp	r3, #71	; 0x47
   2a4e0:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a4e4:	ldrb	r3, [r0, #1]
   2a4e8:	bic	r3, r3, #32
   2a4ec:	cmp	r3, #66	; 0x42
   2a4f0:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a4f4:	ldrb	r3, [r0, #2]
   2a4f8:	cmp	r3, #49	; 0x31
   2a4fc:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a500:	ldrb	r3, [r0, #3]
   2a504:	cmp	r3, #56	; 0x38
   2a508:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a50c:	ldrb	r3, [r0, #4]
   2a510:	cmp	r3, #48	; 0x30
   2a514:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a518:	ldrb	r3, [r0, #5]
   2a51c:	cmp	r3, #51	; 0x33
   2a520:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a524:	ldrb	r3, [r0, #6]
   2a528:	cmp	r3, #48	; 0x30
   2a52c:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a530:	ldrb	r3, [r0, #7]
   2a534:	cmp	r3, #0
   2a538:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a53c:	ldrb	r2, [r4]
   2a540:	ldr	r3, [pc, #124]	; 2a5c4 <__assert_fail@plt+0x18000>
   2a544:	ldr	r0, [pc, #124]	; 2a5c8 <__assert_fail@plt+0x18004>
   2a548:	cmp	r2, #96	; 0x60
   2a54c:	movne	r0, r3
   2a550:	pop	{r4, r5, r6, pc}
   2a554:	ldrb	r3, [r0, #1]
   2a558:	bic	r3, r3, #32
   2a55c:	cmp	r3, #84	; 0x54
   2a560:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a564:	ldrb	r3, [r0, #2]
   2a568:	bic	r3, r3, #32
   2a56c:	cmp	r3, #70	; 0x46
   2a570:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a574:	ldrb	r3, [r0, #3]
   2a578:	cmp	r3, #45	; 0x2d
   2a57c:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a580:	ldrb	r3, [r0, #4]
   2a584:	cmp	r3, #56	; 0x38
   2a588:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a58c:	ldrb	r3, [r0, #5]
   2a590:	cmp	r3, #0
   2a594:	bne	2a5b0 <__assert_fail@plt+0x17fec>
   2a598:	ldrb	r2, [r4]
   2a59c:	ldr	r3, [pc, #40]	; 2a5cc <__assert_fail@plt+0x18008>
   2a5a0:	ldr	r0, [pc, #40]	; 2a5d0 <__assert_fail@plt+0x1800c>
   2a5a4:	cmp	r2, #96	; 0x60
   2a5a8:	movne	r0, r3
   2a5ac:	pop	{r4, r5, r6, pc}
   2a5b0:	ldr	r3, [pc, #28]	; 2a5d4 <__assert_fail@plt+0x18010>
   2a5b4:	ldr	r0, [pc, #28]	; 2a5d8 <__assert_fail@plt+0x18014>
   2a5b8:	cmp	r5, #9
   2a5bc:	movne	r0, r3
   2a5c0:	pop	{r4, r5, r6, pc}
   2a5c4:	andeq	r7, r4, r0, asr #26
   2a5c8:	andeq	r7, r4, r8, asr #26
   2a5cc:	andeq	r7, r4, ip, lsr sp
   2a5d0:	andeq	r7, r4, ip, asr #26
   2a5d4:	andeq	r3, r4, r8, ror r2
   2a5d8:	andeq	r7, r4, r4, asr #26
   2a5dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a5e0:	sub	sp, sp, #116	; 0x74
   2a5e4:	str	r0, [sp, #36]	; 0x24
   2a5e8:	mov	sl, r1
   2a5ec:	str	r2, [sp, #52]	; 0x34
   2a5f0:	str	r3, [sp, #28]
   2a5f4:	ldr	r8, [sp, #152]	; 0x98
   2a5f8:	bl	12168 <__ctype_get_mb_cur_max@plt>
   2a5fc:	str	r0, [sp, #84]	; 0x54
   2a600:	ldr	r3, [sp, #156]	; 0x9c
   2a604:	lsr	r3, r3, #1
   2a608:	and	r3, r3, #1
   2a60c:	str	r3, [sp, #32]
   2a610:	mov	r3, #1
   2a614:	str	r3, [sp, #40]	; 0x28
   2a618:	mov	r3, #0
   2a61c:	str	r3, [sp, #80]	; 0x50
   2a620:	str	r3, [sp, #44]	; 0x2c
   2a624:	str	r3, [sp, #48]	; 0x30
   2a628:	str	r3, [sp, #60]	; 0x3c
   2a62c:	str	r3, [sp, #72]	; 0x48
   2a630:	str	r3, [sp, #76]	; 0x4c
   2a634:	mov	r7, sl
   2a638:	mov	sl, r8
   2a63c:	cmp	sl, #10
   2a640:	ldrls	pc, [pc, sl, lsl #2]
   2a644:	b	2a7fc <__assert_fail@plt+0x18238>
   2a648:	andeq	sl, r2, ip, lsr #13
   2a64c:	andeq	sl, r2, ip, ror r6
   2a650:	ldrdeq	sl, [r2], -r8
   2a654:	andeq	sl, r2, r4, ror r6
   2a658:	andeq	sl, r2, ip, lsl #15
   2a65c:			; <UNDEFINED> instruction: 0x0002a6bc
   2a660:	andeq	fp, r2, r8, lsr #14
   2a664:	andeq	sl, r2, r0, lsl #16
   2a668:	strdeq	sl, [r2], -r8
   2a66c:	strdeq	sl, [r2], -r8
   2a670:	strdeq	sl, [r2], -r8
   2a674:	mov	r3, #1
   2a678:	str	r3, [sp, #48]	; 0x30
   2a67c:	mov	r3, #1
   2a680:	str	r3, [sp, #32]
   2a684:	str	r3, [sp, #60]	; 0x3c
   2a688:	ldr	r3, [pc, #4068]	; 2b674 <__assert_fail@plt+0x190b0>
   2a68c:	str	r3, [sp, #72]	; 0x48
   2a690:	mov	fp, #0
   2a694:	mov	sl, #2
   2a698:	mov	r6, #0
   2a69c:	ldr	r3, [sp, #48]	; 0x30
   2a6a0:	eor	r3, r3, #1
   2a6a4:	str	r3, [sp, #68]	; 0x44
   2a6a8:	b	2af90 <__assert_fail@plt+0x189cc>
   2a6ac:	mov	r3, #0
   2a6b0:	str	r3, [sp, #32]
   2a6b4:	mov	fp, r3
   2a6b8:	b	2a698 <__assert_fail@plt+0x180d4>
   2a6bc:	ldr	r3, [sp, #32]
   2a6c0:	cmp	r3, #0
   2a6c4:	bne	2a818 <__assert_fail@plt+0x18254>
   2a6c8:	cmp	r7, #0
   2a6cc:	beq	2a838 <__assert_fail@plt+0x18274>
   2a6d0:	ldr	r3, [sp, #36]	; 0x24
   2a6d4:	mov	r2, #34	; 0x22
   2a6d8:	strb	r2, [r3]
   2a6dc:	mov	r3, #1
   2a6e0:	str	r3, [sp, #48]	; 0x30
   2a6e4:	str	r3, [sp, #60]	; 0x3c
   2a6e8:	ldr	r3, [pc, #3980]	; 2b67c <__assert_fail@plt+0x190b8>
   2a6ec:	str	r3, [sp, #72]	; 0x48
   2a6f0:	mov	fp, #1
   2a6f4:	b	2a698 <__assert_fail@plt+0x180d4>
   2a6f8:	cmp	sl, #10
   2a6fc:	beq	2a720 <__assert_fail@plt+0x1815c>
   2a700:	mov	r1, sl
   2a704:	ldr	r0, [pc, #3948]	; 2b678 <__assert_fail@plt+0x190b4>
   2a708:	bl	2a4a4 <__assert_fail@plt+0x17ee0>
   2a70c:	str	r0, [sp, #164]	; 0xa4
   2a710:	mov	r1, sl
   2a714:	ldr	r0, [pc, #3928]	; 2b674 <__assert_fail@plt+0x190b0>
   2a718:	bl	2a4a4 <__assert_fail@plt+0x17ee0>
   2a71c:	str	r0, [sp, #168]	; 0xa8
   2a720:	ldr	r3, [sp, #32]
   2a724:	cmp	r3, #0
   2a728:	movne	fp, #0
   2a72c:	bne	2a764 <__assert_fail@plt+0x181a0>
   2a730:	ldr	r3, [sp, #164]	; 0xa4
   2a734:	ldrb	r3, [r3]
   2a738:	cmp	r3, #0
   2a73c:	beq	2a784 <__assert_fail@plt+0x181c0>
   2a740:	ldr	r2, [sp, #164]	; 0xa4
   2a744:	mov	fp, #0
   2a748:	ldr	r1, [sp, #36]	; 0x24
   2a74c:	cmp	r7, fp
   2a750:	strbhi	r3, [r1, fp]
   2a754:	add	fp, fp, #1
   2a758:	ldrb	r3, [r2, #1]!
   2a75c:	cmp	r3, #0
   2a760:	bne	2a74c <__assert_fail@plt+0x18188>
   2a764:	ldr	r0, [sp, #168]	; 0xa8
   2a768:	bl	122d0 <strlen@plt>
   2a76c:	str	r0, [sp, #60]	; 0x3c
   2a770:	ldr	r3, [sp, #168]	; 0xa8
   2a774:	str	r3, [sp, #72]	; 0x48
   2a778:	mov	r3, #1
   2a77c:	str	r3, [sp, #48]	; 0x30
   2a780:	b	2a698 <__assert_fail@plt+0x180d4>
   2a784:	mov	fp, #0
   2a788:	b	2a764 <__assert_fail@plt+0x181a0>
   2a78c:	ldr	r3, [sp, #32]
   2a790:	cmp	r3, #0
   2a794:	bne	2a854 <__assert_fail@plt+0x18290>
   2a798:	mov	r3, #1
   2a79c:	str	r3, [sp, #48]	; 0x30
   2a7a0:	cmp	r7, #0
   2a7a4:	beq	2a870 <__assert_fail@plt+0x182ac>
   2a7a8:	ldr	r3, [sp, #36]	; 0x24
   2a7ac:	mov	r2, #39	; 0x27
   2a7b0:	strb	r2, [r3]
   2a7b4:	mov	r3, #0
   2a7b8:	str	r3, [sp, #32]
   2a7bc:	mov	r3, #1
   2a7c0:	str	r3, [sp, #60]	; 0x3c
   2a7c4:	ldr	r3, [pc, #3752]	; 2b674 <__assert_fail@plt+0x190b0>
   2a7c8:	str	r3, [sp, #72]	; 0x48
   2a7cc:	mov	fp, #1
   2a7d0:	mov	sl, #2
   2a7d4:	b	2a698 <__assert_fail@plt+0x180d4>
   2a7d8:	ldr	r3, [sp, #32]
   2a7dc:	cmp	r3, #0
   2a7e0:	beq	2a7a0 <__assert_fail@plt+0x181dc>
   2a7e4:	mov	r3, #1
   2a7e8:	str	r3, [sp, #60]	; 0x3c
   2a7ec:	ldr	r3, [pc, #3712]	; 2b674 <__assert_fail@plt+0x190b0>
   2a7f0:	str	r3, [sp, #72]	; 0x48
   2a7f4:	mov	fp, #0
   2a7f8:	b	2a698 <__assert_fail@plt+0x180d4>
   2a7fc:	bl	12570 <abort@plt>
   2a800:	mov	r3, #0
   2a804:	str	r3, [sp, #32]
   2a808:	mov	r3, #1
   2a80c:	str	r3, [sp, #48]	; 0x30
   2a810:	mov	fp, #0
   2a814:	b	2a698 <__assert_fail@plt+0x180d4>
   2a818:	ldr	r3, [sp, #32]
   2a81c:	str	r3, [sp, #48]	; 0x30
   2a820:	mov	r3, #1
   2a824:	str	r3, [sp, #60]	; 0x3c
   2a828:	ldr	r3, [pc, #3660]	; 2b67c <__assert_fail@plt+0x190b8>
   2a82c:	str	r3, [sp, #72]	; 0x48
   2a830:	mov	fp, #0
   2a834:	b	2a698 <__assert_fail@plt+0x180d4>
   2a838:	mov	r3, #1
   2a83c:	str	r3, [sp, #48]	; 0x30
   2a840:	str	r3, [sp, #60]	; 0x3c
   2a844:	ldr	r3, [pc, #3632]	; 2b67c <__assert_fail@plt+0x190b8>
   2a848:	str	r3, [sp, #72]	; 0x48
   2a84c:	mov	fp, #1
   2a850:	b	2a698 <__assert_fail@plt+0x180d4>
   2a854:	mov	r3, #1
   2a858:	str	r3, [sp, #60]	; 0x3c
   2a85c:	ldr	r3, [pc, #3600]	; 2b674 <__assert_fail@plt+0x190b0>
   2a860:	str	r3, [sp, #72]	; 0x48
   2a864:	mov	fp, #0
   2a868:	mov	sl, #2
   2a86c:	b	2a698 <__assert_fail@plt+0x180d4>
   2a870:	mov	r3, #0
   2a874:	str	r3, [sp, #32]
   2a878:	mov	r3, #1
   2a87c:	str	r3, [sp, #60]	; 0x3c
   2a880:	ldr	r3, [pc, #3564]	; 2b674 <__assert_fail@plt+0x190b0>
   2a884:	str	r3, [sp, #72]	; 0x48
   2a888:	mov	fp, #1
   2a88c:	mov	sl, #2
   2a890:	b	2a698 <__assert_fail@plt+0x180d4>
   2a894:	mov	r3, #0
   2a898:	str	r3, [sp, #56]	; 0x38
   2a89c:	ldr	r3, [sp, #52]	; 0x34
   2a8a0:	add	r2, r3, r6
   2a8a4:	str	r2, [sp, #64]	; 0x40
   2a8a8:	ldrb	r4, [r3, r6]
   2a8ac:	cmp	r4, #126	; 0x7e
   2a8b0:	ldrls	pc, [pc, r4, lsl #2]
   2a8b4:	b	2b0f0 <__assert_fail@plt+0x18b2c>
   2a8b8:	ldrdeq	sl, [r2], -r0
   2a8bc:	strdeq	fp, [r2], -r0
   2a8c0:	strdeq	fp, [r2], -r0
   2a8c4:	strdeq	fp, [r2], -r0
   2a8c8:	strdeq	fp, [r2], -r0
   2a8cc:	strdeq	fp, [r2], -r0
   2a8d0:	strdeq	fp, [r2], -r0
   2a8d4:	andeq	sl, r2, ip, lsr #28
   2a8d8:	andeq	sl, r2, r8, asr #21
   2a8dc:	andeq	sl, r2, r4, ror #27
   2a8e0:	ldrdeq	sl, [r2], -ip
   2a8e4:	andeq	sl, r2, ip, asr #26
   2a8e8:	andeq	sl, r2, r4, asr #26
   2a8ec:	andeq	sl, r2, r0, asr #21
   2a8f0:	strdeq	fp, [r2], -r0
   2a8f4:	strdeq	fp, [r2], -r0
   2a8f8:	strdeq	fp, [r2], -r0
   2a8fc:	strdeq	fp, [r2], -r0
   2a900:	strdeq	fp, [r2], -r0
   2a904:	strdeq	fp, [r2], -r0
   2a908:	strdeq	fp, [r2], -r0
   2a90c:	strdeq	fp, [r2], -r0
   2a910:	strdeq	fp, [r2], -r0
   2a914:	strdeq	fp, [r2], -r0
   2a918:	strdeq	fp, [r2], -r0
   2a91c:	strdeq	fp, [r2], -r0
   2a920:	strdeq	fp, [r2], -r0
   2a924:	strdeq	fp, [r2], -r0
   2a928:	strdeq	fp, [r2], -r0
   2a92c:	strdeq	fp, [r2], -r0
   2a930:	strdeq	fp, [r2], -r0
   2a934:	strdeq	fp, [r2], -r0
   2a938:	andeq	sl, r2, r0, lsl #29
   2a93c:	andeq	sl, r2, ip, ror lr
   2a940:	andeq	sl, r2, ip, ror lr
   2a944:	andeq	sl, r2, r4, asr lr
   2a948:	andeq	sl, r2, ip, ror lr
   2a94c:	andeq	fp, r2, r4, asr #9
   2a950:	andeq	sl, r2, ip, ror lr
   2a954:	andeq	fp, r2, r4, asr r0
   2a958:	andeq	sl, r2, ip, ror lr
   2a95c:	andeq	sl, r2, ip, ror lr
   2a960:	andeq	sl, r2, ip, ror lr
   2a964:	andeq	fp, r2, r4, asr #9
   2a968:	andeq	fp, r2, r4, asr #9
   2a96c:	andeq	fp, r2, r4, asr #9
   2a970:	andeq	fp, r2, r4, asr #9
   2a974:	andeq	fp, r2, r4, asr #9
   2a978:	andeq	fp, r2, r4, asr #9
   2a97c:	andeq	fp, r2, r4, asr #9
   2a980:	andeq	fp, r2, r4, asr #9
   2a984:	andeq	fp, r2, r4, asr #9
   2a988:	andeq	fp, r2, r4, asr #9
   2a98c:	andeq	fp, r2, r4, asr #9
   2a990:	andeq	fp, r2, r4, asr #9
   2a994:	andeq	fp, r2, r4, asr #9
   2a998:	andeq	fp, r2, r4, asr #9
   2a99c:	andeq	fp, r2, r4, asr #9
   2a9a0:	andeq	fp, r2, r4, asr #9
   2a9a4:	andeq	sl, r2, ip, ror lr
   2a9a8:	andeq	sl, r2, ip, ror lr
   2a9ac:	andeq	sl, r2, ip, ror lr
   2a9b0:	andeq	sl, r2, ip, ror lr
   2a9b4:	ldrdeq	sl, [r2], -r8
   2a9b8:	strdeq	fp, [r2], -r0
   2a9bc:	andeq	fp, r2, r4, asr #9
   2a9c0:	andeq	fp, r2, r4, asr #9
   2a9c4:	andeq	fp, r2, r4, asr #9
   2a9c8:	andeq	fp, r2, r4, asr #9
   2a9cc:	andeq	fp, r2, r4, asr #9
   2a9d0:	andeq	fp, r2, r4, asr #9
   2a9d4:	andeq	fp, r2, r4, asr #9
   2a9d8:	andeq	fp, r2, r4, asr #9
   2a9dc:	andeq	fp, r2, r4, asr #9
   2a9e0:	andeq	fp, r2, r4, asr #9
   2a9e4:	andeq	fp, r2, r4, asr #9
   2a9e8:	andeq	fp, r2, r4, asr #9
   2a9ec:	andeq	fp, r2, r4, asr #9
   2a9f0:	andeq	fp, r2, r4, asr #9
   2a9f4:	andeq	fp, r2, r4, asr #9
   2a9f8:	andeq	fp, r2, r4, asr #9
   2a9fc:	andeq	fp, r2, r4, asr #9
   2aa00:	andeq	fp, r2, r4, asr #9
   2aa04:	andeq	fp, r2, r4, asr #9
   2aa08:	andeq	fp, r2, r4, asr #9
   2aa0c:	andeq	fp, r2, r4, asr #9
   2aa10:	andeq	fp, r2, r4, asr #9
   2aa14:	andeq	fp, r2, r4, asr #9
   2aa18:	andeq	fp, r2, r4, asr #9
   2aa1c:	andeq	fp, r2, r4, asr #9
   2aa20:	andeq	fp, r2, r4, asr #9
   2aa24:	andeq	sl, r2, ip, ror lr
   2aa28:	andeq	sl, r2, r4, asr sp
   2aa2c:	andeq	fp, r2, r4, asr #9
   2aa30:	andeq	sl, r2, ip, ror lr
   2aa34:	andeq	fp, r2, r4, asr #9
   2aa38:	andeq	sl, r2, ip, ror lr
   2aa3c:	andeq	fp, r2, r4, asr #9
   2aa40:	andeq	fp, r2, r4, asr #9
   2aa44:	andeq	fp, r2, r4, asr #9
   2aa48:	andeq	fp, r2, r4, asr #9
   2aa4c:	andeq	fp, r2, r4, asr #9
   2aa50:	andeq	fp, r2, r4, asr #9
   2aa54:	andeq	fp, r2, r4, asr #9
   2aa58:	andeq	fp, r2, r4, asr #9
   2aa5c:	andeq	fp, r2, r4, asr #9
   2aa60:	andeq	fp, r2, r4, asr #9
   2aa64:	andeq	fp, r2, r4, asr #9
   2aa68:	andeq	fp, r2, r4, asr #9
   2aa6c:	andeq	fp, r2, r4, asr #9
   2aa70:	andeq	fp, r2, r4, asr #9
   2aa74:	andeq	fp, r2, r4, asr #9
   2aa78:	andeq	fp, r2, r4, asr #9
   2aa7c:	andeq	fp, r2, r4, asr #9
   2aa80:	andeq	fp, r2, r4, asr #9
   2aa84:	andeq	fp, r2, r4, asr #9
   2aa88:	andeq	fp, r2, r4, asr #9
   2aa8c:	andeq	fp, r2, r4, asr #9
   2aa90:	andeq	fp, r2, r4, asr #9
   2aa94:	andeq	fp, r2, r4, asr #9
   2aa98:	andeq	fp, r2, r4, asr #9
   2aa9c:	andeq	fp, r2, r4, asr #9
   2aaa0:	andeq	fp, r2, r4, asr #9
   2aaa4:	andeq	sl, r2, r4, lsr lr
   2aaa8:	andeq	sl, r2, ip, ror lr
   2aaac:	andeq	sl, r2, r4, lsr lr
   2aab0:	andeq	sl, r2, r4, asr lr
   2aab4:	mov	r3, #0
   2aab8:	str	r3, [sp, #56]	; 0x38
   2aabc:	b	2a89c <__assert_fail@plt+0x182d8>
   2aac0:	mov	r3, #114	; 0x72
   2aac4:	b	2ade8 <__assert_fail@plt+0x18824>
   2aac8:	mov	r3, #98	; 0x62
   2aacc:	b	2ae00 <__assert_fail@plt+0x1883c>
   2aad0:	ldr	r3, [sp, #48]	; 0x30
   2aad4:	cmp	r3, #0
   2aad8:	beq	2abc0 <__assert_fail@plt+0x185fc>
   2aadc:	ldr	r3, [sp, #32]
   2aae0:	cmp	r3, #0
   2aae4:	bne	2b648 <__assert_fail@plt+0x19084>
   2aae8:	ldr	r3, [sp, #44]	; 0x2c
   2aaec:	eor	r3, r3, #1
   2aaf0:	cmp	sl, #2
   2aaf4:	movne	r3, #0
   2aaf8:	andeq	r3, r3, #1
   2aafc:	cmp	r3, #0
   2ab00:	moveq	r2, fp
   2ab04:	beq	2ab48 <__assert_fail@plt+0x18584>
   2ab08:	cmp	r7, fp
   2ab0c:	ldrhi	r2, [sp, #36]	; 0x24
   2ab10:	movhi	r1, #39	; 0x27
   2ab14:	strbhi	r1, [r2, fp]
   2ab18:	add	r2, fp, #1
   2ab1c:	cmp	r7, r2
   2ab20:	ldrhi	r1, [sp, #36]	; 0x24
   2ab24:	movhi	r0, #36	; 0x24
   2ab28:	strbhi	r0, [r1, r2]
   2ab2c:	add	r2, fp, #2
   2ab30:	cmp	r7, r2
   2ab34:	ldrhi	r1, [sp, #36]	; 0x24
   2ab38:	movhi	r0, #39	; 0x27
   2ab3c:	strbhi	r0, [r1, r2]
   2ab40:	add	r2, fp, #3
   2ab44:	str	r3, [sp, #44]	; 0x2c
   2ab48:	cmp	r7, r2
   2ab4c:	ldrhi	r3, [sp, #36]	; 0x24
   2ab50:	movhi	r1, #92	; 0x5c
   2ab54:	strbhi	r1, [r3, r2]
   2ab58:	add	fp, r2, #1
   2ab5c:	cmp	r5, #0
   2ab60:	beq	2b4cc <__assert_fail@plt+0x18f08>
   2ab64:	add	r3, r6, #1
   2ab68:	ldr	r1, [sp, #28]
   2ab6c:	cmp	r1, r3
   2ab70:	bls	2b4dc <__assert_fail@plt+0x18f18>
   2ab74:	ldr	r1, [sp, #52]	; 0x34
   2ab78:	ldrb	r3, [r1, r3]
   2ab7c:	sub	r3, r3, #48	; 0x30
   2ab80:	uxtb	r3, r3
   2ab84:	cmp	r3, #9
   2ab88:	bhi	2b4e8 <__assert_fail@plt+0x18f24>
   2ab8c:	cmp	r7, fp
   2ab90:	movhi	r3, #48	; 0x30
   2ab94:	ldrhi	r1, [sp, #36]	; 0x24
   2ab98:	strbhi	r3, [r1, fp]
   2ab9c:	add	r3, r2, #2
   2aba0:	cmp	r7, r3
   2aba4:	movhi	r1, #48	; 0x30
   2aba8:	ldrhi	r0, [sp, #36]	; 0x24
   2abac:	strbhi	r1, [r0, r3]
   2abb0:	add	fp, r2, #3
   2abb4:	ldr	r8, [sp, #32]
   2abb8:	mov	r4, #48	; 0x30
   2abbc:	b	2ae98 <__assert_fail@plt+0x188d4>
   2abc0:	ldr	r3, [sp, #156]	; 0x9c
   2abc4:	tst	r3, #1
   2abc8:	bne	2af8c <__assert_fail@plt+0x189c8>
   2abcc:	ldr	r5, [sp, #48]	; 0x30
   2abd0:	mov	r8, r5
   2abd4:	b	2ae98 <__assert_fail@plt+0x188d4>
   2abd8:	cmp	sl, #2
   2abdc:	beq	2abf4 <__assert_fail@plt+0x18630>
   2abe0:	cmp	sl, #5
   2abe4:	beq	2ac0c <__assert_fail@plt+0x18648>
   2abe8:	mov	r8, #0
   2abec:	mov	r5, r8
   2abf0:	b	2ae98 <__assert_fail@plt+0x188d4>
   2abf4:	ldr	r3, [sp, #32]
   2abf8:	cmp	r3, #0
   2abfc:	bne	2b65c <__assert_fail@plt+0x19098>
   2ac00:	mov	r8, r3
   2ac04:	mov	r5, r3
   2ac08:	b	2ae98 <__assert_fail@plt+0x188d4>
   2ac0c:	ldr	r3, [sp, #156]	; 0x9c
   2ac10:	tst	r3, #4
   2ac14:	beq	2b4f4 <__assert_fail@plt+0x18f30>
   2ac18:	add	r3, r6, #2
   2ac1c:	ldr	r2, [sp, #28]
   2ac20:	cmp	r2, r3
   2ac24:	bls	2b500 <__assert_fail@plt+0x18f3c>
   2ac28:	ldr	r2, [sp, #52]	; 0x34
   2ac2c:	add	r2, r2, r6
   2ac30:	ldrb	r2, [r2, #1]
   2ac34:	cmp	r2, #63	; 0x3f
   2ac38:	movne	r8, #0
   2ac3c:	movne	r5, r8
   2ac40:	bne	2ae98 <__assert_fail@plt+0x188d4>
   2ac44:	ldr	r2, [sp, #52]	; 0x34
   2ac48:	ldrb	r2, [r2, r3]
   2ac4c:	sub	r1, r2, #33	; 0x21
   2ac50:	cmp	r1, #29
   2ac54:	ldrls	pc, [pc, r1, lsl #2]
   2ac58:	b	2b50c <__assert_fail@plt+0x18f48>
   2ac5c:	ldrdeq	sl, [r2], -r4
   2ac60:	andeq	fp, r2, ip, lsl #10
   2ac64:	andeq	fp, r2, ip, lsl #10
   2ac68:	andeq	fp, r2, ip, lsl #10
   2ac6c:	andeq	fp, r2, ip, lsl #10
   2ac70:	andeq	fp, r2, ip, lsl #10
   2ac74:	ldrdeq	sl, [r2], -r4
   2ac78:	ldrdeq	sl, [r2], -r4
   2ac7c:	ldrdeq	sl, [r2], -r4
   2ac80:	andeq	fp, r2, ip, lsl #10
   2ac84:	andeq	fp, r2, ip, lsl #10
   2ac88:	andeq	fp, r2, ip, lsl #10
   2ac8c:	ldrdeq	sl, [r2], -r4
   2ac90:	andeq	fp, r2, ip, lsl #10
   2ac94:	ldrdeq	sl, [r2], -r4
   2ac98:	andeq	fp, r2, ip, lsl #10
   2ac9c:	andeq	fp, r2, ip, lsl #10
   2aca0:	andeq	fp, r2, ip, lsl #10
   2aca4:	andeq	fp, r2, ip, lsl #10
   2aca8:	andeq	fp, r2, ip, lsl #10
   2acac:	andeq	fp, r2, ip, lsl #10
   2acb0:	andeq	fp, r2, ip, lsl #10
   2acb4:	andeq	fp, r2, ip, lsl #10
   2acb8:	andeq	fp, r2, ip, lsl #10
   2acbc:	andeq	fp, r2, ip, lsl #10
   2acc0:	andeq	fp, r2, ip, lsl #10
   2acc4:	andeq	fp, r2, ip, lsl #10
   2acc8:	ldrdeq	sl, [r2], -r4
   2accc:	ldrdeq	sl, [r2], -r4
   2acd0:	ldrdeq	sl, [r2], -r4
   2acd4:	ldr	r1, [sp, #32]
   2acd8:	cmp	r1, #0
   2acdc:	bne	2b71c <__assert_fail@plt+0x19158>
   2ace0:	cmp	r7, fp
   2ace4:	movhi	r1, #63	; 0x3f
   2ace8:	ldrhi	r0, [sp, #36]	; 0x24
   2acec:	strbhi	r1, [r0, fp]
   2acf0:	add	r1, fp, #1
   2acf4:	cmp	r7, r1
   2acf8:	ldrhi	r0, [sp, #36]	; 0x24
   2acfc:	movhi	ip, #34	; 0x22
   2ad00:	strbhi	ip, [r0, r1]
   2ad04:	add	r1, fp, #2
   2ad08:	cmp	r7, r1
   2ad0c:	ldrhi	r0, [sp, #36]	; 0x24
   2ad10:	movhi	ip, #34	; 0x22
   2ad14:	strbhi	ip, [r0, r1]
   2ad18:	add	r1, fp, #3
   2ad1c:	cmp	r7, r1
   2ad20:	movhi	r0, #63	; 0x3f
   2ad24:	ldrhi	ip, [sp, #36]	; 0x24
   2ad28:	strbhi	r0, [ip, r1]
   2ad2c:	add	fp, fp, #4
   2ad30:	ldr	r5, [sp, #32]
   2ad34:	mov	r8, r5
   2ad38:	mov	r4, r2
   2ad3c:	mov	r6, r3
   2ad40:	b	2ae98 <__assert_fail@plt+0x188d4>
   2ad44:	mov	r3, #102	; 0x66
   2ad48:	b	2ae00 <__assert_fail@plt+0x1883c>
   2ad4c:	mov	r3, #118	; 0x76
   2ad50:	b	2ae00 <__assert_fail@plt+0x1883c>
   2ad54:	cmp	sl, #2
   2ad58:	beq	2adc4 <__assert_fail@plt+0x18800>
   2ad5c:	ldr	r3, [sp, #48]	; 0x30
   2ad60:	ldr	r2, [sp, #32]
   2ad64:	and	r3, r3, r2
   2ad68:	tst	r9, r3
   2ad6c:	moveq	r3, r4
   2ad70:	beq	2ae00 <__assert_fail@plt+0x1883c>
   2ad74:	mov	r8, #0
   2ad78:	mov	r5, r8
   2ad7c:	eor	r5, r5, #1
   2ad80:	ldr	r3, [sp, #44]	; 0x2c
   2ad84:	and	r5, r5, r3
   2ad88:	tst	r5, #255	; 0xff
   2ad8c:	beq	2af6c <__assert_fail@plt+0x189a8>
   2ad90:	cmp	r7, fp
   2ad94:	ldrhi	r3, [sp, #36]	; 0x24
   2ad98:	movhi	r2, #39	; 0x27
   2ad9c:	strbhi	r2, [r3, fp]
   2ada0:	add	r3, fp, #1
   2ada4:	cmp	r7, r3
   2ada8:	ldrhi	r2, [sp, #36]	; 0x24
   2adac:	movhi	r1, #39	; 0x27
   2adb0:	strbhi	r1, [r2, r3]
   2adb4:	add	fp, fp, #2
   2adb8:	mov	r3, #0
   2adbc:	str	r3, [sp, #44]	; 0x2c
   2adc0:	b	2af6c <__assert_fail@plt+0x189a8>
   2adc4:	ldr	r3, [sp, #32]
   2adc8:	cmp	r3, #0
   2adcc:	bne	2b668 <__assert_fail@plt+0x190a4>
   2add0:	mov	r8, r3
   2add4:	mov	r5, r3
   2add8:	b	2ad7c <__assert_fail@plt+0x187b8>
   2addc:	mov	r3, #110	; 0x6e
   2ade0:	b	2ade8 <__assert_fail@plt+0x18824>
   2ade4:	mov	r3, #116	; 0x74
   2ade8:	ldr	r2, [sp, #32]
   2adec:	cmp	sl, #2
   2adf0:	movne	r2, #0
   2adf4:	andeq	r2, r2, #1
   2adf8:	cmp	r2, #0
   2adfc:	bne	2ae20 <__assert_fail@plt+0x1885c>
   2ae00:	ldr	r2, [sp, #48]	; 0x30
   2ae04:	cmp	r2, #0
   2ae08:	moveq	r8, r2
   2ae0c:	moveq	r5, r2
   2ae10:	beq	2ae98 <__assert_fail@plt+0x188d4>
   2ae14:	mov	r4, r3
   2ae18:	mov	r8, #0
   2ae1c:	b	2aef0 <__assert_fail@plt+0x1892c>
   2ae20:	mov	r8, sl
   2ae24:	mov	sl, r7
   2ae28:	b	2b694 <__assert_fail@plt+0x190d0>
   2ae2c:	mov	r3, #97	; 0x61
   2ae30:	b	2ae00 <__assert_fail@plt+0x1883c>
   2ae34:	ldr	r3, [sp, #28]
   2ae38:	cmn	r3, #1
   2ae3c:	beq	2ae68 <__assert_fail@plt+0x188a4>
   2ae40:	ldr	r3, [sp, #28]
   2ae44:	subs	r3, r3, #1
   2ae48:	movne	r3, #1
   2ae4c:	cmp	r3, #0
   2ae50:	bne	2b518 <__assert_fail@plt+0x18f54>
   2ae54:	cmp	r6, #0
   2ae58:	beq	2ae80 <__assert_fail@plt+0x188bc>
   2ae5c:	mov	r8, #0
   2ae60:	mov	r5, r8
   2ae64:	b	2ae98 <__assert_fail@plt+0x188d4>
   2ae68:	ldr	r3, [sp, #52]	; 0x34
   2ae6c:	ldrb	r3, [r3, #1]
   2ae70:	adds	r3, r3, #0
   2ae74:	movne	r3, #1
   2ae78:	b	2ae4c <__assert_fail@plt+0x18888>
   2ae7c:	mov	r8, #0
   2ae80:	ldr	r5, [sp, #32]
   2ae84:	cmp	sl, #2
   2ae88:	movne	r5, #0
   2ae8c:	andeq	r5, r5, #1
   2ae90:	cmp	r5, #0
   2ae94:	bne	2b048 <__assert_fail@plt+0x18a84>
   2ae98:	ldr	r3, [sp, #68]	; 0x44
   2ae9c:	cmp	sl, #2
   2aea0:	orreq	r3, r3, #1
   2aea4:	eor	r3, r3, #1
   2aea8:	ldr	r2, [sp, #32]
   2aeac:	orr	r3, r2, r3
   2aeb0:	tst	r3, #255	; 0xff
   2aeb4:	beq	2aee4 <__assert_fail@plt+0x18920>
   2aeb8:	ldr	r3, [sp, #160]	; 0xa0
   2aebc:	cmp	r3, #0
   2aec0:	beq	2aee4 <__assert_fail@plt+0x18920>
   2aec4:	lsr	r2, r4, #5
   2aec8:	uxtb	r2, r2
   2aecc:	and	r3, r4, #31
   2aed0:	ldr	r1, [sp, #160]	; 0xa0
   2aed4:	ldr	r2, [r1, r2, lsl #2]
   2aed8:	lsr	r3, r2, r3
   2aedc:	tst	r3, #1
   2aee0:	bne	2aef0 <__assert_fail@plt+0x1892c>
   2aee4:	ldr	r3, [sp, #56]	; 0x38
   2aee8:	cmp	r3, #0
   2aeec:	beq	2ad7c <__assert_fail@plt+0x187b8>
   2aef0:	ldr	r3, [sp, #32]
   2aef4:	cmp	r3, #0
   2aef8:	bne	2b704 <__assert_fail@plt+0x19140>
   2aefc:	ldr	r3, [sp, #44]	; 0x2c
   2af00:	eor	r3, r3, #1
   2af04:	cmp	sl, #2
   2af08:	movne	r3, #0
   2af0c:	andeq	r3, r3, #1
   2af10:	cmp	r3, #0
   2af14:	beq	2af58 <__assert_fail@plt+0x18994>
   2af18:	cmp	r7, fp
   2af1c:	ldrhi	r2, [sp, #36]	; 0x24
   2af20:	movhi	r1, #39	; 0x27
   2af24:	strbhi	r1, [r2, fp]
   2af28:	add	r2, fp, #1
   2af2c:	cmp	r7, r2
   2af30:	ldrhi	r1, [sp, #36]	; 0x24
   2af34:	movhi	r0, #36	; 0x24
   2af38:	strbhi	r0, [r1, r2]
   2af3c:	add	r2, fp, #2
   2af40:	cmp	r7, r2
   2af44:	ldrhi	r1, [sp, #36]	; 0x24
   2af48:	movhi	r0, #39	; 0x27
   2af4c:	strbhi	r0, [r1, r2]
   2af50:	add	fp, fp, #3
   2af54:	str	r3, [sp, #44]	; 0x2c
   2af58:	cmp	r7, fp
   2af5c:	ldrhi	r3, [sp, #36]	; 0x24
   2af60:	movhi	r2, #92	; 0x5c
   2af64:	strbhi	r2, [r3, fp]
   2af68:	add	fp, fp, #1
   2af6c:	cmp	fp, r7
   2af70:	ldrcc	r3, [sp, #36]	; 0x24
   2af74:	strbcc	r4, [r3, fp]
   2af78:	add	fp, fp, #1
   2af7c:	ldr	r3, [sp, #40]	; 0x28
   2af80:	cmp	r8, #0
   2af84:	moveq	r3, #0
   2af88:	str	r3, [sp, #40]	; 0x28
   2af8c:	add	r6, r6, #1
   2af90:	ldr	r3, [sp, #28]
   2af94:	cmn	r3, #1
   2af98:	beq	2b524 <__assert_fail@plt+0x18f60>
   2af9c:	ldr	r3, [sp, #28]
   2afa0:	subs	r8, r3, r6
   2afa4:	movne	r8, #1
   2afa8:	cmp	r8, #0
   2afac:	beq	2b538 <__assert_fail@plt+0x18f74>
   2afb0:	ldr	r5, [sp, #48]	; 0x30
   2afb4:	cmp	sl, #2
   2afb8:	moveq	r5, #0
   2afbc:	andne	r5, r5, #1
   2afc0:	ldr	r3, [sp, #60]	; 0x3c
   2afc4:	adds	r9, r3, #0
   2afc8:	movne	r9, #1
   2afcc:	ands	r2, r5, r9
   2afd0:	str	r2, [sp, #56]	; 0x38
   2afd4:	beq	2a89c <__assert_fail@plt+0x182d8>
   2afd8:	add	r4, r6, r3
   2afdc:	ldr	r2, [sp, #28]
   2afe0:	cmp	r3, #1
   2afe4:	movls	r3, #0
   2afe8:	movhi	r3, #1
   2afec:	cmn	r2, #1
   2aff0:	movne	r3, #0
   2aff4:	cmp	r3, #0
   2aff8:	beq	2b008 <__assert_fail@plt+0x18a44>
   2affc:	ldr	r0, [sp, #52]	; 0x34
   2b000:	bl	122d0 <strlen@plt>
   2b004:	str	r0, [sp, #28]
   2b008:	ldr	r3, [sp, #28]
   2b00c:	cmp	r3, r4
   2b010:	bcc	2a894 <__assert_fail@plt+0x182d0>
   2b014:	ldr	r2, [sp, #60]	; 0x3c
   2b018:	ldr	r1, [sp, #72]	; 0x48
   2b01c:	ldr	r3, [sp, #52]	; 0x34
   2b020:	add	r0, r3, r6
   2b024:	bl	12060 <memcmp@plt>
   2b028:	cmp	r0, #0
   2b02c:	bne	2aab4 <__assert_fail@plt+0x184f0>
   2b030:	ldr	r3, [sp, #32]
   2b034:	cmp	r3, #0
   2b038:	beq	2a89c <__assert_fail@plt+0x182d8>
   2b03c:	mov	r8, sl
   2b040:	mov	sl, r7
   2b044:	b	2b694 <__assert_fail@plt+0x190d0>
   2b048:	mov	r8, sl
   2b04c:	mov	sl, r7
   2b050:	b	2b694 <__assert_fail@plt+0x190d0>
   2b054:	cmp	sl, #2
   2b058:	strne	r8, [sp, #80]	; 0x50
   2b05c:	movne	r5, #0
   2b060:	bne	2ae98 <__assert_fail@plt+0x188d4>
   2b064:	ldr	r3, [sp, #32]
   2b068:	cmp	r3, #0
   2b06c:	bne	2b680 <__assert_fail@plt+0x190bc>
   2b070:	ldr	r2, [sp, #76]	; 0x4c
   2b074:	adds	r3, r7, #0
   2b078:	movne	r3, #1
   2b07c:	cmp	r2, #0
   2b080:	movne	r3, #0
   2b084:	cmp	r3, #0
   2b088:	movne	r3, #0
   2b08c:	bne	2b0bc <__assert_fail@plt+0x18af8>
   2b090:	cmp	r7, fp
   2b094:	ldrhi	r3, [sp, #36]	; 0x24
   2b098:	movhi	r2, #39	; 0x27
   2b09c:	strbhi	r2, [r3, fp]
   2b0a0:	add	r3, fp, #1
   2b0a4:	cmp	r7, r3
   2b0a8:	ldrhi	r2, [sp, #36]	; 0x24
   2b0ac:	movhi	r1, #92	; 0x5c
   2b0b0:	strbhi	r1, [r2, r3]
   2b0b4:	mov	r3, r7
   2b0b8:	ldr	r7, [sp, #76]	; 0x4c
   2b0bc:	add	r2, fp, #2
   2b0c0:	cmp	r2, r3
   2b0c4:	ldrcc	r1, [sp, #36]	; 0x24
   2b0c8:	movcc	r0, #39	; 0x27
   2b0cc:	strbcc	r0, [r1, r2]
   2b0d0:	add	fp, fp, #3
   2b0d4:	ldr	r2, [sp, #32]
   2b0d8:	mov	r5, r2
   2b0dc:	str	r8, [sp, #80]	; 0x50
   2b0e0:	str	r2, [sp, #44]	; 0x2c
   2b0e4:	str	r7, [sp, #76]	; 0x4c
   2b0e8:	mov	r7, r3
   2b0ec:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b0f0:	ldr	r5, [sp, #84]	; 0x54
   2b0f4:	cmp	r5, #1
   2b0f8:	beq	2b128 <__assert_fail@plt+0x18b64>
   2b0fc:	mov	r3, #0
   2b100:	str	r3, [sp, #104]	; 0x68
   2b104:	str	r3, [sp, #108]	; 0x6c
   2b108:	ldr	r3, [sp, #28]
   2b10c:	cmn	r3, #1
   2b110:	beq	2b15c <__assert_fail@plt+0x18b98>
   2b114:	mov	r3, #0
   2b118:	str	r4, [sp, #88]	; 0x58
   2b11c:	str	fp, [sp, #92]	; 0x5c
   2b120:	mov	fp, r3
   2b124:	b	2b284 <__assert_fail@plt+0x18cc0>
   2b128:	bl	12288 <__ctype_b_loc@plt>
   2b12c:	ldr	r2, [r0]
   2b130:	lsl	r3, r4, #1
   2b134:	ldrh	r8, [r2, r3]
   2b138:	lsr	r8, r8, #14
   2b13c:	and	r8, r8, #1
   2b140:	mov	r2, r5
   2b144:	eor	r5, r8, #1
   2b148:	ldr	r3, [sp, #48]	; 0x30
   2b14c:	and	r5, r5, r3
   2b150:	ands	r5, r5, #255	; 0xff
   2b154:	beq	2ae98 <__assert_fail@plt+0x188d4>
   2b158:	b	2b31c <__assert_fail@plt+0x18d58>
   2b15c:	ldr	r0, [sp, #52]	; 0x34
   2b160:	bl	122d0 <strlen@plt>
   2b164:	str	r0, [sp, #28]
   2b168:	b	2b114 <__assert_fail@plt+0x18b50>
   2b16c:	mov	r2, fp
   2b170:	mov	r1, r4
   2b174:	ldr	r4, [sp, #88]	; 0x58
   2b178:	ldr	fp, [sp, #92]	; 0x5c
   2b17c:	ldr	r0, [sp, #28]
   2b180:	cmp	r0, r5
   2b184:	bls	2b350 <__assert_fail@plt+0x18d8c>
   2b188:	ldrb	r3, [r1]
   2b18c:	cmp	r3, #0
   2b190:	beq	2b358 <__assert_fail@plt+0x18d94>
   2b194:	mov	r3, r1
   2b198:	add	r2, r2, #1
   2b19c:	add	r1, r6, r2
   2b1a0:	cmp	r0, r1
   2b1a4:	bls	2b360 <__assert_fail@plt+0x18d9c>
   2b1a8:	ldrb	r1, [r3, #1]!
   2b1ac:	cmp	r1, #0
   2b1b0:	bne	2b198 <__assert_fail@plt+0x18bd4>
   2b1b4:	mov	r8, #0
   2b1b8:	b	2b314 <__assert_fail@plt+0x18d50>
   2b1bc:	cmp	r4, r5
   2b1c0:	beq	2b260 <__assert_fail@plt+0x18c9c>
   2b1c4:	ldrb	r3, [r4, #1]!
   2b1c8:	sub	r3, r3, #91	; 0x5b
   2b1cc:	cmp	r3, #33	; 0x21
   2b1d0:	ldrls	pc, [pc, r3, lsl #2]
   2b1d4:	b	2b1bc <__assert_fail@plt+0x18bf8>
   2b1d8:	andeq	fp, r2, ip, lsl #13
   2b1dc:	andeq	fp, r2, ip, lsl #13
   2b1e0:			; <UNDEFINED> instruction: 0x0002b1bc
   2b1e4:	andeq	fp, r2, ip, lsl #13
   2b1e8:			; <UNDEFINED> instruction: 0x0002b1bc
   2b1ec:	andeq	fp, r2, ip, lsl #13
   2b1f0:			; <UNDEFINED> instruction: 0x0002b1bc
   2b1f4:			; <UNDEFINED> instruction: 0x0002b1bc
   2b1f8:			; <UNDEFINED> instruction: 0x0002b1bc
   2b1fc:			; <UNDEFINED> instruction: 0x0002b1bc
   2b200:			; <UNDEFINED> instruction: 0x0002b1bc
   2b204:			; <UNDEFINED> instruction: 0x0002b1bc
   2b208:			; <UNDEFINED> instruction: 0x0002b1bc
   2b20c:			; <UNDEFINED> instruction: 0x0002b1bc
   2b210:			; <UNDEFINED> instruction: 0x0002b1bc
   2b214:			; <UNDEFINED> instruction: 0x0002b1bc
   2b218:			; <UNDEFINED> instruction: 0x0002b1bc
   2b21c:			; <UNDEFINED> instruction: 0x0002b1bc
   2b220:			; <UNDEFINED> instruction: 0x0002b1bc
   2b224:			; <UNDEFINED> instruction: 0x0002b1bc
   2b228:			; <UNDEFINED> instruction: 0x0002b1bc
   2b22c:			; <UNDEFINED> instruction: 0x0002b1bc
   2b230:			; <UNDEFINED> instruction: 0x0002b1bc
   2b234:			; <UNDEFINED> instruction: 0x0002b1bc
   2b238:			; <UNDEFINED> instruction: 0x0002b1bc
   2b23c:			; <UNDEFINED> instruction: 0x0002b1bc
   2b240:			; <UNDEFINED> instruction: 0x0002b1bc
   2b244:			; <UNDEFINED> instruction: 0x0002b1bc
   2b248:			; <UNDEFINED> instruction: 0x0002b1bc
   2b24c:			; <UNDEFINED> instruction: 0x0002b1bc
   2b250:			; <UNDEFINED> instruction: 0x0002b1bc
   2b254:			; <UNDEFINED> instruction: 0x0002b1bc
   2b258:			; <UNDEFINED> instruction: 0x0002b1bc
   2b25c:	andeq	fp, r2, ip, lsl #13
   2b260:	ldr	r0, [sp, #100]	; 0x64
   2b264:	bl	12108 <iswprint@plt>
   2b268:	cmp	r0, #0
   2b26c:	moveq	r8, #0
   2b270:	add	fp, fp, r9
   2b274:	add	r0, sp, #104	; 0x68
   2b278:	bl	1203c <mbsinit@plt>
   2b27c:	cmp	r0, #0
   2b280:	bne	2b2f4 <__assert_fail@plt+0x18d30>
   2b284:	add	r5, r6, fp
   2b288:	ldr	r3, [sp, #52]	; 0x34
   2b28c:	add	r4, r3, r5
   2b290:	add	r3, sp, #104	; 0x68
   2b294:	ldr	r2, [sp, #28]
   2b298:	sub	r2, r2, r5
   2b29c:	mov	r1, r4
   2b2a0:	add	r0, sp, #100	; 0x64
   2b2a4:	bl	307cc <__assert_fail@plt+0x1e208>
   2b2a8:	subs	r9, r0, #0
   2b2ac:	beq	2b368 <__assert_fail@plt+0x18da4>
   2b2b0:	cmn	r9, #1
   2b2b4:	beq	2b304 <__assert_fail@plt+0x18d40>
   2b2b8:	cmn	r9, #2
   2b2bc:	beq	2b16c <__assert_fail@plt+0x18ba8>
   2b2c0:	ldr	r3, [sp, #32]
   2b2c4:	cmp	sl, #2
   2b2c8:	movne	r3, #0
   2b2cc:	andeq	r3, r3, #1
   2b2d0:	cmp	r3, #0
   2b2d4:	beq	2b260 <__assert_fail@plt+0x18c9c>
   2b2d8:	cmp	r9, #1
   2b2dc:	bls	2b260 <__assert_fail@plt+0x18c9c>
   2b2e0:	sub	r3, r9, #1
   2b2e4:	add	r5, r3, r5
   2b2e8:	ldr	r3, [sp, #52]	; 0x34
   2b2ec:	add	r5, r3, r5
   2b2f0:	b	2b1c4 <__assert_fail@plt+0x18c00>
   2b2f4:	ldr	r4, [sp, #88]	; 0x58
   2b2f8:	mov	r2, fp
   2b2fc:	ldr	fp, [sp, #92]	; 0x5c
   2b300:	b	2b314 <__assert_fail@plt+0x18d50>
   2b304:	ldr	r4, [sp, #88]	; 0x58
   2b308:	mov	r2, fp
   2b30c:	ldr	fp, [sp, #92]	; 0x5c
   2b310:	mov	r8, #0
   2b314:	cmp	r2, #1
   2b318:	bls	2b144 <__assert_fail@plt+0x18b80>
   2b31c:	add	r1, r6, r2
   2b320:	ldr	ip, [sp, #64]	; 0x40
   2b324:	mov	r5, #0
   2b328:	eor	r3, r8, #1
   2b32c:	ldr	r2, [sp, #48]	; 0x30
   2b330:	and	r3, r3, r2
   2b334:	uxtb	r3, r3
   2b338:	ldr	r9, [sp, #32]
   2b33c:	ldr	lr, [sp, #44]	; 0x2c
   2b340:	ldr	r2, [sp, #56]	; 0x38
   2b344:	str	r8, [sp, #56]	; 0x38
   2b348:	ldr	r0, [sp, #36]	; 0x24
   2b34c:	b	2b3e8 <__assert_fail@plt+0x18e24>
   2b350:	mov	r8, #0
   2b354:	b	2b314 <__assert_fail@plt+0x18d50>
   2b358:	mov	r8, #0
   2b35c:	b	2b314 <__assert_fail@plt+0x18d50>
   2b360:	mov	r8, #0
   2b364:	b	2b314 <__assert_fail@plt+0x18d50>
   2b368:	ldr	r4, [sp, #88]	; 0x58
   2b36c:	mov	r2, fp
   2b370:	ldr	fp, [sp, #92]	; 0x5c
   2b374:	b	2b314 <__assert_fail@plt+0x18d50>
   2b378:	cmp	r2, #0
   2b37c:	beq	2b390 <__assert_fail@plt+0x18dcc>
   2b380:	cmp	r7, fp
   2b384:	movhi	r2, #92	; 0x5c
   2b388:	strbhi	r2, [r0, fp]
   2b38c:	add	fp, fp, #1
   2b390:	add	r8, r6, #1
   2b394:	cmp	r1, r8
   2b398:	bls	2b4a0 <__assert_fail@plt+0x18edc>
   2b39c:	eor	r2, r5, #1
   2b3a0:	and	r2, r2, lr
   2b3a4:	ands	r2, r2, #255	; 0xff
   2b3a8:	beq	2b4bc <__assert_fail@plt+0x18ef8>
   2b3ac:	cmp	r7, fp
   2b3b0:	movhi	r2, #39	; 0x27
   2b3b4:	strbhi	r2, [r0, fp]
   2b3b8:	add	r2, fp, #1
   2b3bc:	cmp	r7, r2
   2b3c0:	movhi	lr, #39	; 0x27
   2b3c4:	strbhi	lr, [r0, r2]
   2b3c8:	add	fp, fp, #2
   2b3cc:	mov	r6, r8
   2b3d0:	mov	r2, r3
   2b3d4:	mov	lr, r3
   2b3d8:	cmp	r7, fp
   2b3dc:	strbhi	r4, [r0, fp]
   2b3e0:	add	fp, fp, #1
   2b3e4:	ldrb	r4, [ip, #1]!
   2b3e8:	cmp	r3, #0
   2b3ec:	beq	2b378 <__assert_fail@plt+0x18db4>
   2b3f0:	cmp	r9, #0
   2b3f4:	bne	2b6f8 <__assert_fail@plt+0x19134>
   2b3f8:	eor	r5, lr, #1
   2b3fc:	cmp	sl, #2
   2b400:	movne	r5, #0
   2b404:	andeq	r5, r5, #1
   2b408:	cmp	r5, #0
   2b40c:	beq	2b444 <__assert_fail@plt+0x18e80>
   2b410:	cmp	r7, fp
   2b414:	movhi	lr, #39	; 0x27
   2b418:	strbhi	lr, [r0, fp]
   2b41c:	add	lr, fp, #1
   2b420:	cmp	r7, lr
   2b424:	movhi	r8, #36	; 0x24
   2b428:	strbhi	r8, [r0, lr]
   2b42c:	add	lr, fp, #2
   2b430:	cmp	r7, lr
   2b434:	movhi	r8, #39	; 0x27
   2b438:	strbhi	r8, [r0, lr]
   2b43c:	add	fp, fp, #3
   2b440:	mov	lr, r5
   2b444:	cmp	r7, fp
   2b448:	movhi	r5, #92	; 0x5c
   2b44c:	strbhi	r5, [r0, fp]
   2b450:	add	r5, fp, #1
   2b454:	cmp	r7, r5
   2b458:	lsrhi	r8, r4, #6
   2b45c:	addhi	r8, r8, #48	; 0x30
   2b460:	strbhi	r8, [r0, r5]
   2b464:	add	r8, fp, #2
   2b468:	cmp	r7, r8
   2b46c:	lsrhi	r5, r4, #3
   2b470:	andhi	r5, r5, #7
   2b474:	addhi	r5, r5, #48	; 0x30
   2b478:	strbhi	r5, [r0, r8]
   2b47c:	add	fp, fp, #3
   2b480:	and	r4, r4, #7
   2b484:	add	r4, r4, #48	; 0x30
   2b488:	add	r5, r6, #1
   2b48c:	cmp	r1, r5
   2b490:	bls	2b4ac <__assert_fail@plt+0x18ee8>
   2b494:	mov	r6, r5
   2b498:	mov	r5, r3
   2b49c:	b	2b3d8 <__assert_fail@plt+0x18e14>
   2b4a0:	str	lr, [sp, #44]	; 0x2c
   2b4a4:	ldr	r8, [sp, #56]	; 0x38
   2b4a8:	b	2ad7c <__assert_fail@plt+0x187b8>
   2b4ac:	str	lr, [sp, #44]	; 0x2c
   2b4b0:	ldr	r8, [sp, #56]	; 0x38
   2b4b4:	mov	r5, r3
   2b4b8:	b	2ad7c <__assert_fail@plt+0x187b8>
   2b4bc:	mov	r6, r8
   2b4c0:	b	2b3d8 <__assert_fail@plt+0x18e14>
   2b4c4:	mov	r5, #0
   2b4c8:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b4cc:	mov	r8, r5
   2b4d0:	ldr	r5, [sp, #48]	; 0x30
   2b4d4:	mov	r4, #48	; 0x30
   2b4d8:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b4dc:	ldr	r8, [sp, #32]
   2b4e0:	mov	r4, #48	; 0x30
   2b4e4:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b4e8:	ldr	r8, [sp, #32]
   2b4ec:	mov	r4, #48	; 0x30
   2b4f0:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b4f4:	mov	r8, #0
   2b4f8:	mov	r5, r8
   2b4fc:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b500:	mov	r8, #0
   2b504:	mov	r5, r8
   2b508:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b50c:	mov	r8, #0
   2b510:	mov	r5, r8
   2b514:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b518:	mov	r8, #0
   2b51c:	mov	r5, r8
   2b520:	b	2ae98 <__assert_fail@plt+0x188d4>
   2b524:	ldr	r3, [sp, #52]	; 0x34
   2b528:	ldrb	r8, [r3, r6]
   2b52c:	adds	r8, r8, #0
   2b530:	movne	r8, #1
   2b534:	b	2afa8 <__assert_fail@plt+0x189e4>
   2b538:	cmp	sl, #2
   2b53c:	movne	r3, #0
   2b540:	moveq	r3, #1
   2b544:	ldr	r1, [sp, #32]
   2b548:	mov	r2, r1
   2b54c:	and	r2, r2, r3
   2b550:	cmp	fp, #0
   2b554:	movne	r2, #0
   2b558:	andeq	r2, r2, #1
   2b55c:	cmp	r2, #0
   2b560:	bne	2b710 <__assert_fail@plt+0x1914c>
   2b564:	eor	r2, r1, #1
   2b568:	and	r3, r3, r2
   2b56c:	ldr	r1, [sp, #80]	; 0x50
   2b570:	tst	r1, r3
   2b574:	beq	2b5ec <__assert_fail@plt+0x19028>
   2b578:	ldr	r3, [sp, #40]	; 0x28
   2b57c:	cmp	r3, #0
   2b580:	bne	2b5a8 <__assert_fail@plt+0x18fe4>
   2b584:	ldr	r1, [sp, #76]	; 0x4c
   2b588:	clz	r3, r7
   2b58c:	lsr	r3, r3, #5
   2b590:	cmp	r1, #0
   2b594:	moveq	r3, #0
   2b598:	cmp	r3, #0
   2b59c:	beq	2b5ec <__assert_fail@plt+0x19028>
   2b5a0:	ldr	r7, [sp, #76]	; 0x4c
   2b5a4:	b	2a63c <__assert_fail@plt+0x18078>
   2b5a8:	ldr	r3, [sp, #168]	; 0xa8
   2b5ac:	str	r3, [sp, #16]
   2b5b0:	ldr	r3, [sp, #164]	; 0xa4
   2b5b4:	str	r3, [sp, #12]
   2b5b8:	ldr	r3, [sp, #160]	; 0xa0
   2b5bc:	str	r3, [sp, #8]
   2b5c0:	ldr	r3, [sp, #156]	; 0x9c
   2b5c4:	str	r3, [sp, #4]
   2b5c8:	mov	r3, #5
   2b5cc:	str	r3, [sp]
   2b5d0:	ldr	r3, [sp, #28]
   2b5d4:	ldr	r2, [sp, #52]	; 0x34
   2b5d8:	ldr	r1, [sp, #76]	; 0x4c
   2b5dc:	ldr	r0, [sp, #36]	; 0x24
   2b5e0:	bl	2a5dc <__assert_fail@plt+0x18018>
   2b5e4:	mov	fp, r0
   2b5e8:	b	2b6ec <__assert_fail@plt+0x19128>
   2b5ec:	mov	sl, r7
   2b5f0:	ldr	r3, [sp, #72]	; 0x48
   2b5f4:	cmp	r3, #0
   2b5f8:	moveq	r2, #0
   2b5fc:	andne	r2, r2, #1
   2b600:	cmp	r2, #0
   2b604:	beq	2b634 <__assert_fail@plt+0x19070>
   2b608:	mov	r2, r3
   2b60c:	ldrb	r3, [r3]
   2b610:	cmp	r3, #0
   2b614:	beq	2b634 <__assert_fail@plt+0x19070>
   2b618:	ldr	r1, [sp, #36]	; 0x24
   2b61c:	cmp	sl, fp
   2b620:	strbhi	r3, [r1, fp]
   2b624:	add	fp, fp, #1
   2b628:	ldrb	r3, [r2, #1]!
   2b62c:	cmp	r3, #0
   2b630:	bne	2b61c <__assert_fail@plt+0x19058>
   2b634:	cmp	sl, fp
   2b638:	movhi	r3, #0
   2b63c:	ldrhi	r2, [sp, #36]	; 0x24
   2b640:	strbhi	r3, [r2, fp]
   2b644:	b	2b6ec <__assert_fail@plt+0x19128>
   2b648:	mov	r8, sl
   2b64c:	mov	sl, r7
   2b650:	ldr	r3, [sp, #32]
   2b654:	str	r3, [sp, #48]	; 0x30
   2b658:	b	2b694 <__assert_fail@plt+0x190d0>
   2b65c:	mov	r8, sl
   2b660:	mov	sl, r7
   2b664:	b	2b694 <__assert_fail@plt+0x190d0>
   2b668:	mov	r8, sl
   2b66c:	mov	sl, r7
   2b670:	b	2b694 <__assert_fail@plt+0x190d0>
   2b674:	andeq	r3, r4, r8, ror r2
   2b678:	andeq	r7, r4, r0, asr sp
   2b67c:	andeq	r7, r4, r4, asr #26
   2b680:	mov	r8, sl
   2b684:	mov	sl, r7
   2b688:	b	2b694 <__assert_fail@plt+0x190d0>
   2b68c:	mov	r8, sl
   2b690:	mov	sl, r7
   2b694:	ldr	r3, [sp, #48]	; 0x30
   2b698:	cmp	r8, #2
   2b69c:	movne	r3, #0
   2b6a0:	andeq	r3, r3, #1
   2b6a4:	cmp	r3, #0
   2b6a8:	movne	r8, #4
   2b6ac:	ldr	r3, [sp, #168]	; 0xa8
   2b6b0:	str	r3, [sp, #16]
   2b6b4:	ldr	r3, [sp, #164]	; 0xa4
   2b6b8:	str	r3, [sp, #12]
   2b6bc:	mov	r3, #0
   2b6c0:	str	r3, [sp, #8]
   2b6c4:	ldr	r3, [sp, #156]	; 0x9c
   2b6c8:	bic	r3, r3, #2
   2b6cc:	str	r3, [sp, #4]
   2b6d0:	str	r8, [sp]
   2b6d4:	ldr	r3, [sp, #28]
   2b6d8:	ldr	r2, [sp, #52]	; 0x34
   2b6dc:	mov	r1, sl
   2b6e0:	ldr	r0, [sp, #36]	; 0x24
   2b6e4:	bl	2a5dc <__assert_fail@plt+0x18018>
   2b6e8:	mov	fp, r0
   2b6ec:	mov	r0, fp
   2b6f0:	add	sp, sp, #116	; 0x74
   2b6f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6f8:	mov	r8, sl
   2b6fc:	mov	sl, r7
   2b700:	b	2b694 <__assert_fail@plt+0x190d0>
   2b704:	mov	r8, sl
   2b708:	mov	sl, r7
   2b70c:	b	2b694 <__assert_fail@plt+0x190d0>
   2b710:	mov	r8, sl
   2b714:	mov	sl, r7
   2b718:	b	2b694 <__assert_fail@plt+0x190d0>
   2b71c:	mov	r8, sl
   2b720:	mov	sl, r7
   2b724:	b	2b6ac <__assert_fail@plt+0x190e8>
   2b728:	mov	r3, #1
   2b72c:	str	r3, [sp, #32]
   2b730:	str	r3, [sp, #48]	; 0x30
   2b734:	str	r3, [sp, #60]	; 0x3c
   2b738:	ldr	r3, [pc, #-196]	; 2b67c <__assert_fail@plt+0x190b8>
   2b73c:	str	r3, [sp, #72]	; 0x48
   2b740:	mov	fp, #0
   2b744:	mov	sl, #5
   2b748:	b	2a698 <__assert_fail@plt+0x180d4>
   2b74c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b750:	sub	sp, sp, #52	; 0x34
   2b754:	mov	r5, r0
   2b758:	str	r1, [sp, #24]
   2b75c:	str	r2, [sp, #28]
   2b760:	mov	r4, r3
   2b764:	bl	12318 <__errno_location@plt>
   2b768:	str	r0, [sp, #32]
   2b76c:	ldr	r3, [r0]
   2b770:	str	r3, [sp, #36]	; 0x24
   2b774:	ldr	r3, [pc, #396]	; 2b908 <__assert_fail@plt+0x19344>
   2b778:	ldr	r6, [r3]
   2b77c:	cmn	r5, #-2147483647	; 0x80000001
   2b780:	movne	r3, #0
   2b784:	moveq	r3, #1
   2b788:	orrs	r3, r3, r5, lsr #31
   2b78c:	bne	2b8cc <__assert_fail@plt+0x19308>
   2b790:	ldr	r3, [pc, #368]	; 2b908 <__assert_fail@plt+0x19344>
   2b794:	ldr	r2, [r3, #4]
   2b798:	cmp	r5, r2
   2b79c:	blt	2b804 <__assert_fail@plt+0x19240>
   2b7a0:	str	r2, [sp, #44]	; 0x2c
   2b7a4:	add	r3, r3, #8
   2b7a8:	cmp	r6, r3
   2b7ac:	beq	2b8d0 <__assert_fail@plt+0x1930c>
   2b7b0:	sub	r2, r5, r2
   2b7b4:	mov	r3, #8
   2b7b8:	str	r3, [sp]
   2b7bc:	mvn	r3, #-2147483648	; 0x80000000
   2b7c0:	add	r2, r2, #1
   2b7c4:	add	r1, sp, #44	; 0x2c
   2b7c8:	mov	r0, r6
   2b7cc:	bl	2cdc0 <__assert_fail@plt+0x1a7fc>
   2b7d0:	mov	r6, r0
   2b7d4:	ldr	r3, [pc, #300]	; 2b908 <__assert_fail@plt+0x19344>
   2b7d8:	str	r0, [r3]
   2b7dc:	ldr	r7, [pc, #292]	; 2b908 <__assert_fail@plt+0x19344>
   2b7e0:	ldr	r0, [r7, #4]
   2b7e4:	ldr	r2, [sp, #44]	; 0x2c
   2b7e8:	sub	r2, r2, r0
   2b7ec:	lsl	r2, r2, #3
   2b7f0:	mov	r1, #0
   2b7f4:	add	r0, r6, r0, lsl #3
   2b7f8:	bl	12348 <memset@plt>
   2b7fc:	ldr	r3, [sp, #44]	; 0x2c
   2b800:	str	r3, [r7, #4]
   2b804:	add	fp, r6, r5, lsl #3
   2b808:	ldr	r8, [r6, r5, lsl #3]
   2b80c:	ldr	r7, [fp, #4]
   2b810:	ldr	r9, [r4, #4]
   2b814:	orr	r9, r9, #1
   2b818:	add	sl, r4, #8
   2b81c:	ldr	r3, [r4, #44]	; 0x2c
   2b820:	str	r3, [sp, #16]
   2b824:	ldr	r3, [r4, #40]	; 0x28
   2b828:	str	r3, [sp, #12]
   2b82c:	str	sl, [sp, #8]
   2b830:	str	r9, [sp, #4]
   2b834:	ldr	r3, [r4]
   2b838:	str	r3, [sp]
   2b83c:	ldr	r3, [sp, #28]
   2b840:	ldr	r2, [sp, #24]
   2b844:	mov	r1, r8
   2b848:	mov	r0, r7
   2b84c:	bl	2a5dc <__assert_fail@plt+0x18018>
   2b850:	cmp	r8, r0
   2b854:	bhi	2b8b4 <__assert_fail@plt+0x192f0>
   2b858:	add	r8, r0, #1
   2b85c:	str	r8, [r6, r5, lsl #3]
   2b860:	ldr	r3, [pc, #164]	; 2b90c <__assert_fail@plt+0x19348>
   2b864:	cmp	r7, r3
   2b868:	beq	2b874 <__assert_fail@plt+0x192b0>
   2b86c:	mov	r0, r7
   2b870:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2b874:	mov	r0, r8
   2b878:	bl	2cc3c <__assert_fail@plt+0x1a678>
   2b87c:	mov	r7, r0
   2b880:	str	r0, [fp, #4]
   2b884:	ldr	r3, [r4, #44]	; 0x2c
   2b888:	str	r3, [sp, #16]
   2b88c:	ldr	r3, [r4, #40]	; 0x28
   2b890:	str	r3, [sp, #12]
   2b894:	str	sl, [sp, #8]
   2b898:	str	r9, [sp, #4]
   2b89c:	ldr	r3, [r4]
   2b8a0:	str	r3, [sp]
   2b8a4:	ldr	r3, [sp, #28]
   2b8a8:	ldr	r2, [sp, #24]
   2b8ac:	mov	r1, r8
   2b8b0:	bl	2a5dc <__assert_fail@plt+0x18018>
   2b8b4:	ldr	r3, [sp, #32]
   2b8b8:	ldr	r2, [sp, #36]	; 0x24
   2b8bc:	str	r2, [r3]
   2b8c0:	mov	r0, r7
   2b8c4:	add	sp, sp, #52	; 0x34
   2b8c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8cc:	bl	12570 <abort@plt>
   2b8d0:	sub	r2, r5, r2
   2b8d4:	mov	r3, #8
   2b8d8:	str	r3, [sp]
   2b8dc:	mvn	r3, #-2147483648	; 0x80000000
   2b8e0:	add	r2, r2, #1
   2b8e4:	add	r1, sp, #44	; 0x2c
   2b8e8:	mov	r0, #0
   2b8ec:	bl	2cdc0 <__assert_fail@plt+0x1a7fc>
   2b8f0:	mov	r6, r0
   2b8f4:	ldr	r3, [pc, #12]	; 2b908 <__assert_fail@plt+0x19344>
   2b8f8:	str	r0, [r3], #8
   2b8fc:	ldm	r3, {r0, r1}
   2b900:	stm	r6, {r0, r1}
   2b904:	b	2b7dc <__assert_fail@plt+0x19218>
   2b908:	strdeq	r9, [r5], -r0
   2b90c:	andeq	r9, r5, r8, lsl #26
   2b910:	push	{r4, r5, r6, lr}
   2b914:	mov	r4, r0
   2b918:	bl	12318 <__errno_location@plt>
   2b91c:	mov	r5, r0
   2b920:	ldr	r6, [r0]
   2b924:	cmp	r4, #0
   2b928:	ldr	r3, [pc, #20]	; 2b944 <__assert_fail@plt+0x19380>
   2b92c:	moveq	r4, r3
   2b930:	mov	r1, #48	; 0x30
   2b934:	mov	r0, r4
   2b938:	bl	2d128 <__assert_fail@plt+0x1ab64>
   2b93c:	str	r6, [r5]
   2b940:	pop	{r4, r5, r6, pc}
   2b944:	andeq	r9, r5, r8, lsl #28
   2b948:	subs	r3, r0, #0
   2b94c:	ldr	r2, [pc, #8]	; 2b95c <__assert_fail@plt+0x19398>
   2b950:	moveq	r3, r2
   2b954:	ldr	r0, [r3]
   2b958:	bx	lr
   2b95c:	andeq	r9, r5, r8, lsl #28
   2b960:	subs	r3, r0, #0
   2b964:	ldr	r2, [pc, #8]	; 2b974 <__assert_fail@plt+0x193b0>
   2b968:	moveq	r3, r2
   2b96c:	str	r1, [r3]
   2b970:	bx	lr
   2b974:	andeq	r9, r5, r8, lsl #28
   2b978:	push	{lr}		; (str lr, [sp, #-4]!)
   2b97c:	subs	r3, r0, #0
   2b980:	ldr	r0, [pc, #44]	; 2b9b4 <__assert_fail@plt+0x193f0>
   2b984:	moveq	r3, r0
   2b988:	add	r3, r3, #8
   2b98c:	lsr	lr, r1, #5
   2b990:	and	r1, r1, #31
   2b994:	ldr	ip, [r3, lr, lsl #2]
   2b998:	lsr	r0, ip, r1
   2b99c:	eor	r2, r2, r0
   2b9a0:	and	r2, r2, #1
   2b9a4:	eor	r1, ip, r2, lsl r1
   2b9a8:	str	r1, [r3, lr, lsl #2]
   2b9ac:	and	r0, r0, #1
   2b9b0:	pop	{pc}		; (ldr pc, [sp], #4)
   2b9b4:	andeq	r9, r5, r8, lsl #28
   2b9b8:	subs	r3, r0, #0
   2b9bc:	ldr	r2, [pc, #12]	; 2b9d0 <__assert_fail@plt+0x1940c>
   2b9c0:	moveq	r3, r2
   2b9c4:	ldr	r0, [r3, #4]
   2b9c8:	str	r1, [r3, #4]
   2b9cc:	bx	lr
   2b9d0:	andeq	r9, r5, r8, lsl #28
   2b9d4:	subs	r3, r0, #0
   2b9d8:	ldr	r0, [pc, #40]	; 2ba08 <__assert_fail@plt+0x19444>
   2b9dc:	moveq	r3, r0
   2b9e0:	mov	r0, #10
   2b9e4:	str	r0, [r3]
   2b9e8:	cmp	r2, #0
   2b9ec:	cmpne	r1, #0
   2b9f0:	beq	2ba00 <__assert_fail@plt+0x1943c>
   2b9f4:	str	r1, [r3, #40]	; 0x28
   2b9f8:	str	r2, [r3, #44]	; 0x2c
   2b9fc:	bx	lr
   2ba00:	push	{r4, lr}
   2ba04:	bl	12570 <abort@plt>
   2ba08:	andeq	r9, r5, r8, lsl #28
   2ba0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ba10:	sub	sp, sp, #24
   2ba14:	mov	r7, r0
   2ba18:	mov	r8, r1
   2ba1c:	mov	r9, r2
   2ba20:	mov	sl, r3
   2ba24:	ldr	r4, [sp, #56]	; 0x38
   2ba28:	cmp	r4, #0
   2ba2c:	ldr	r3, [pc, #84]	; 2ba88 <__assert_fail@plt+0x194c4>
   2ba30:	moveq	r4, r3
   2ba34:	bl	12318 <__errno_location@plt>
   2ba38:	mov	r5, r0
   2ba3c:	ldr	r6, [r0]
   2ba40:	ldr	r3, [r4, #44]	; 0x2c
   2ba44:	str	r3, [sp, #16]
   2ba48:	ldr	r3, [r4, #40]	; 0x28
   2ba4c:	str	r3, [sp, #12]
   2ba50:	add	r3, r4, #8
   2ba54:	str	r3, [sp, #8]
   2ba58:	ldr	r3, [r4, #4]
   2ba5c:	str	r3, [sp, #4]
   2ba60:	ldr	r3, [r4]
   2ba64:	str	r3, [sp]
   2ba68:	mov	r3, sl
   2ba6c:	mov	r2, r9
   2ba70:	mov	r1, r8
   2ba74:	mov	r0, r7
   2ba78:	bl	2a5dc <__assert_fail@plt+0x18018>
   2ba7c:	str	r6, [r5]
   2ba80:	add	sp, sp, #24
   2ba84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ba88:	andeq	r9, r5, r8, lsl #28
   2ba8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba90:	sub	sp, sp, #44	; 0x2c
   2ba94:	str	r0, [sp, #28]
   2ba98:	str	r1, [sp, #32]
   2ba9c:	mov	r6, r2
   2baa0:	subs	r4, r3, #0
   2baa4:	ldr	r3, [pc, #172]	; 2bb58 <__assert_fail@plt+0x19594>
   2baa8:	moveq	r4, r3
   2baac:	bl	12318 <__errno_location@plt>
   2bab0:	mov	r7, r0
   2bab4:	ldr	fp, [r0]
   2bab8:	ldr	r5, [r4, #4]
   2babc:	cmp	r6, #0
   2bac0:	orreq	r5, r5, #1
   2bac4:	add	r9, r4, #8
   2bac8:	ldr	r3, [r4, #44]	; 0x2c
   2bacc:	str	r3, [sp, #16]
   2bad0:	ldr	r3, [r4, #40]	; 0x28
   2bad4:	str	r3, [sp, #12]
   2bad8:	str	r9, [sp, #8]
   2badc:	str	r5, [sp, #4]
   2bae0:	ldr	r3, [r4]
   2bae4:	str	r3, [sp]
   2bae8:	ldr	r3, [sp, #32]
   2baec:	ldr	r2, [sp, #28]
   2baf0:	mov	r1, #0
   2baf4:	mov	r0, r1
   2baf8:	bl	2a5dc <__assert_fail@plt+0x18018>
   2bafc:	mov	sl, r0
   2bb00:	add	r8, r0, #1
   2bb04:	mov	r0, r8
   2bb08:	bl	2cc3c <__assert_fail@plt+0x1a678>
   2bb0c:	str	r0, [sp, #36]	; 0x24
   2bb10:	ldr	r3, [r4, #44]	; 0x2c
   2bb14:	str	r3, [sp, #16]
   2bb18:	ldr	r3, [r4, #40]	; 0x28
   2bb1c:	str	r3, [sp, #12]
   2bb20:	str	r9, [sp, #8]
   2bb24:	str	r5, [sp, #4]
   2bb28:	ldr	r3, [r4]
   2bb2c:	str	r3, [sp]
   2bb30:	ldr	r3, [sp, #32]
   2bb34:	ldr	r2, [sp, #28]
   2bb38:	mov	r1, r8
   2bb3c:	bl	2a5dc <__assert_fail@plt+0x18018>
   2bb40:	str	fp, [r7]
   2bb44:	cmp	r6, #0
   2bb48:	strne	sl, [r6]
   2bb4c:	ldr	r0, [sp, #36]	; 0x24
   2bb50:	add	sp, sp, #44	; 0x2c
   2bb54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb58:	andeq	r9, r5, r8, lsl #28
   2bb5c:	push	{r4, lr}
   2bb60:	mov	r3, r2
   2bb64:	mov	r2, #0
   2bb68:	bl	2ba8c <__assert_fail@plt+0x194c8>
   2bb6c:	pop	{r4, pc}
   2bb70:	push	{r4, r5, r6, r7, r8, lr}
   2bb74:	ldr	r3, [pc, #140]	; 2bc08 <__assert_fail@plt+0x19644>
   2bb78:	ldr	r7, [r3]
   2bb7c:	ldr	r3, [r3, #4]
   2bb80:	cmp	r3, #1
   2bb84:	ble	2bbb0 <__assert_fail@plt+0x195ec>
   2bb88:	mov	r5, r7
   2bb8c:	mov	r4, #1
   2bb90:	ldr	r6, [pc, #112]	; 2bc08 <__assert_fail@plt+0x19644>
   2bb94:	ldr	r0, [r5, #12]
   2bb98:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2bb9c:	add	r4, r4, #1
   2bba0:	add	r5, r5, #8
   2bba4:	ldr	r3, [r6, #4]
   2bba8:	cmp	r3, r4
   2bbac:	bgt	2bb94 <__assert_fail@plt+0x195d0>
   2bbb0:	ldr	r0, [r7, #4]
   2bbb4:	ldr	r3, [pc, #80]	; 2bc0c <__assert_fail@plt+0x19648>
   2bbb8:	cmp	r0, r3
   2bbbc:	beq	2bbd8 <__assert_fail@plt+0x19614>
   2bbc0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2bbc4:	ldr	r3, [pc, #60]	; 2bc08 <__assert_fail@plt+0x19644>
   2bbc8:	mov	r2, #256	; 0x100
   2bbcc:	str	r2, [r3, #8]
   2bbd0:	ldr	r2, [pc, #52]	; 2bc0c <__assert_fail@plt+0x19648>
   2bbd4:	str	r2, [r3, #12]
   2bbd8:	ldr	r3, [pc, #48]	; 2bc10 <__assert_fail@plt+0x1964c>
   2bbdc:	cmp	r7, r3
   2bbe0:	beq	2bbf8 <__assert_fail@plt+0x19634>
   2bbe4:	mov	r0, r7
   2bbe8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2bbec:	ldr	r3, [pc, #20]	; 2bc08 <__assert_fail@plt+0x19644>
   2bbf0:	add	r2, r3, #8
   2bbf4:	str	r2, [r3]
   2bbf8:	mov	r2, #1
   2bbfc:	ldr	r3, [pc, #4]	; 2bc08 <__assert_fail@plt+0x19644>
   2bc00:	str	r2, [r3, #4]
   2bc04:	pop	{r4, r5, r6, r7, r8, pc}
   2bc08:	strdeq	r9, [r5], -r0
   2bc0c:	andeq	r9, r5, r8, lsl #26
   2bc10:	strdeq	r9, [r5], -r8
   2bc14:	push	{r4, lr}
   2bc18:	ldr	r3, [pc, #8]	; 2bc28 <__assert_fail@plt+0x19664>
   2bc1c:	mvn	r2, #0
   2bc20:	bl	2b74c <__assert_fail@plt+0x19188>
   2bc24:	pop	{r4, pc}
   2bc28:	andeq	r9, r5, r8, lsl #28
   2bc2c:	push	{r4, lr}
   2bc30:	ldr	r3, [pc, #4]	; 2bc3c <__assert_fail@plt+0x19678>
   2bc34:	bl	2b74c <__assert_fail@plt+0x19188>
   2bc38:	pop	{r4, pc}
   2bc3c:	andeq	r9, r5, r8, lsl #28
   2bc40:	push	{r4, lr}
   2bc44:	mov	r1, r0
   2bc48:	mov	r0, #0
   2bc4c:	bl	2bc14 <__assert_fail@plt+0x19650>
   2bc50:	pop	{r4, pc}
   2bc54:	push	{r4, lr}
   2bc58:	mov	r2, r1
   2bc5c:	mov	r1, r0
   2bc60:	mov	r0, #0
   2bc64:	bl	2bc2c <__assert_fail@plt+0x19668>
   2bc68:	pop	{r4, pc}
   2bc6c:	push	{r4, r5, lr}
   2bc70:	sub	sp, sp, #52	; 0x34
   2bc74:	mov	r4, r0
   2bc78:	mov	r5, r2
   2bc7c:	mov	r0, sp
   2bc80:	bl	2a474 <__assert_fail@plt+0x17eb0>
   2bc84:	mov	r3, sp
   2bc88:	mvn	r2, #0
   2bc8c:	mov	r1, r5
   2bc90:	mov	r0, r4
   2bc94:	bl	2b74c <__assert_fail@plt+0x19188>
   2bc98:	add	sp, sp, #52	; 0x34
   2bc9c:	pop	{r4, r5, pc}
   2bca0:	push	{r4, r5, r6, lr}
   2bca4:	sub	sp, sp, #48	; 0x30
   2bca8:	mov	r4, r0
   2bcac:	mov	r5, r2
   2bcb0:	mov	r6, r3
   2bcb4:	mov	r0, sp
   2bcb8:	bl	2a474 <__assert_fail@plt+0x17eb0>
   2bcbc:	mov	r3, sp
   2bcc0:	mov	r2, r6
   2bcc4:	mov	r1, r5
   2bcc8:	mov	r0, r4
   2bccc:	bl	2b74c <__assert_fail@plt+0x19188>
   2bcd0:	add	sp, sp, #48	; 0x30
   2bcd4:	pop	{r4, r5, r6, pc}
   2bcd8:	push	{r4, lr}
   2bcdc:	mov	r2, r1
   2bce0:	mov	r1, r0
   2bce4:	mov	r0, #0
   2bce8:	bl	2bc6c <__assert_fail@plt+0x196a8>
   2bcec:	pop	{r4, pc}
   2bcf0:	push	{r4, lr}
   2bcf4:	mov	r3, r2
   2bcf8:	mov	r2, r1
   2bcfc:	mov	r1, r0
   2bd00:	mov	r0, #0
   2bd04:	bl	2bca0 <__assert_fail@plt+0x196dc>
   2bd08:	pop	{r4, pc}
   2bd0c:	push	{r4, r5, r6, lr}
   2bd10:	sub	sp, sp, #48	; 0x30
   2bd14:	mov	r4, r0
   2bd18:	mov	r5, r1
   2bd1c:	mov	r6, r2
   2bd20:	mov	ip, sp
   2bd24:	ldr	lr, [pc, #64]	; 2bd6c <__assert_fail@plt+0x197a8>
   2bd28:	ldm	lr!, {r0, r1, r2, r3}
   2bd2c:	stmia	ip!, {r0, r1, r2, r3}
   2bd30:	ldm	lr!, {r0, r1, r2, r3}
   2bd34:	stmia	ip!, {r0, r1, r2, r3}
   2bd38:	ldm	lr, {r0, r1, r2, r3}
   2bd3c:	stm	ip, {r0, r1, r2, r3}
   2bd40:	mov	r2, #1
   2bd44:	mov	r1, r6
   2bd48:	mov	r0, sp
   2bd4c:	bl	2b978 <__assert_fail@plt+0x193b4>
   2bd50:	mov	r3, sp
   2bd54:	mov	r2, r5
   2bd58:	mov	r1, r4
   2bd5c:	mov	r0, #0
   2bd60:	bl	2b74c <__assert_fail@plt+0x19188>
   2bd64:	add	sp, sp, #48	; 0x30
   2bd68:	pop	{r4, r5, r6, pc}
   2bd6c:	andeq	r9, r5, r8, lsl #28
   2bd70:	push	{r4, lr}
   2bd74:	mov	r2, r1
   2bd78:	mvn	r1, #0
   2bd7c:	bl	2bd0c <__assert_fail@plt+0x19748>
   2bd80:	pop	{r4, pc}
   2bd84:	push	{r4, lr}
   2bd88:	mov	r1, #58	; 0x3a
   2bd8c:	bl	2bd70 <__assert_fail@plt+0x197ac>
   2bd90:	pop	{r4, pc}
   2bd94:	push	{r4, lr}
   2bd98:	mov	r2, #58	; 0x3a
   2bd9c:	bl	2bd0c <__assert_fail@plt+0x19748>
   2bda0:	pop	{r4, pc}
   2bda4:	push	{r4, r5, lr}
   2bda8:	sub	sp, sp, #100	; 0x64
   2bdac:	mov	r4, r0
   2bdb0:	mov	r5, r2
   2bdb4:	mov	r0, sp
   2bdb8:	bl	2a474 <__assert_fail@plt+0x17eb0>
   2bdbc:	add	lr, sp, #48	; 0x30
   2bdc0:	mov	ip, sp
   2bdc4:	ldm	ip!, {r0, r1, r2, r3}
   2bdc8:	stmia	lr!, {r0, r1, r2, r3}
   2bdcc:	ldm	ip!, {r0, r1, r2, r3}
   2bdd0:	stmia	lr!, {r0, r1, r2, r3}
   2bdd4:	ldm	ip, {r0, r1, r2, r3}
   2bdd8:	stm	lr, {r0, r1, r2, r3}
   2bddc:	mov	r2, #1
   2bde0:	mov	r1, #58	; 0x3a
   2bde4:	add	r0, sp, #48	; 0x30
   2bde8:	bl	2b978 <__assert_fail@plt+0x193b4>
   2bdec:	add	r3, sp, #48	; 0x30
   2bdf0:	mvn	r2, #0
   2bdf4:	mov	r1, r5
   2bdf8:	mov	r0, r4
   2bdfc:	bl	2b74c <__assert_fail@plt+0x19188>
   2be00:	add	sp, sp, #100	; 0x64
   2be04:	pop	{r4, r5, pc}
   2be08:	push	{r4, r5, r6, r7, lr}
   2be0c:	sub	sp, sp, #52	; 0x34
   2be10:	mov	r4, r0
   2be14:	mov	r6, r1
   2be18:	mov	r7, r2
   2be1c:	mov	r5, r3
   2be20:	mov	ip, sp
   2be24:	ldr	lr, [pc, #64]	; 2be6c <__assert_fail@plt+0x198a8>
   2be28:	ldm	lr!, {r0, r1, r2, r3}
   2be2c:	stmia	ip!, {r0, r1, r2, r3}
   2be30:	ldm	lr!, {r0, r1, r2, r3}
   2be34:	stmia	ip!, {r0, r1, r2, r3}
   2be38:	ldm	lr, {r0, r1, r2, r3}
   2be3c:	stm	ip, {r0, r1, r2, r3}
   2be40:	mov	r2, r7
   2be44:	mov	r1, r6
   2be48:	mov	r0, sp
   2be4c:	bl	2b9d4 <__assert_fail@plt+0x19410>
   2be50:	mov	r3, sp
   2be54:	ldr	r2, [sp, #72]	; 0x48
   2be58:	mov	r1, r5
   2be5c:	mov	r0, r4
   2be60:	bl	2b74c <__assert_fail@plt+0x19188>
   2be64:	add	sp, sp, #52	; 0x34
   2be68:	pop	{r4, r5, r6, r7, pc}
   2be6c:	andeq	r9, r5, r8, lsl #28
   2be70:	push	{lr}		; (str lr, [sp, #-4]!)
   2be74:	sub	sp, sp, #12
   2be78:	mvn	ip, #0
   2be7c:	str	ip, [sp]
   2be80:	bl	2be08 <__assert_fail@plt+0x19844>
   2be84:	add	sp, sp, #12
   2be88:	pop	{pc}		; (ldr pc, [sp], #4)
   2be8c:	push	{r4, lr}
   2be90:	mov	r3, r2
   2be94:	mov	r2, r1
   2be98:	mov	r1, r0
   2be9c:	mov	r0, #0
   2bea0:	bl	2be70 <__assert_fail@plt+0x198ac>
   2bea4:	pop	{r4, pc}
   2bea8:	push	{lr}		; (str lr, [sp, #-4]!)
   2beac:	sub	sp, sp, #12
   2beb0:	str	r3, [sp]
   2beb4:	mov	r3, r2
   2beb8:	mov	r2, r1
   2bebc:	mov	r1, r0
   2bec0:	mov	r0, #0
   2bec4:	bl	2be08 <__assert_fail@plt+0x19844>
   2bec8:	add	sp, sp, #12
   2becc:	pop	{pc}		; (ldr pc, [sp], #4)
   2bed0:	push	{r4, lr}
   2bed4:	ldr	r3, [pc, #4]	; 2bee0 <__assert_fail@plt+0x1991c>
   2bed8:	bl	2b74c <__assert_fail@plt+0x19188>
   2bedc:	pop	{r4, pc}
   2bee0:	andeq	r9, r5, r0, lsl #10
   2bee4:	push	{r4, lr}
   2bee8:	mov	r2, r1
   2beec:	mov	r1, r0
   2bef0:	mov	r0, #0
   2bef4:	bl	2bed0 <__assert_fail@plt+0x1990c>
   2bef8:	pop	{r4, pc}
   2befc:	push	{r4, lr}
   2bf00:	mvn	r2, #0
   2bf04:	bl	2bed0 <__assert_fail@plt+0x1990c>
   2bf08:	pop	{r4, pc}
   2bf0c:	push	{r4, lr}
   2bf10:	mov	r1, r0
   2bf14:	mov	r0, #0
   2bf18:	bl	2befc <__assert_fail@plt+0x19938>
   2bf1c:	pop	{r4, pc}
   2bf20:	push	{r4, lr}
   2bf24:	mov	r4, r0
   2bf28:	mov	r3, #0
   2bf2c:	str	r3, [r0, #4]
   2bf30:	mov	r1, #524288	; 0x80000
   2bf34:	ldr	r0, [pc, #52]	; 2bf70 <__assert_fail@plt+0x199ac>
   2bf38:	bl	219a0 <__assert_fail@plt+0xf3dc>
   2bf3c:	str	r0, [r4]
   2bf40:	cmp	r0, #0
   2bf44:	blt	2bf50 <__assert_fail@plt+0x1998c>
   2bf48:	mov	r0, #0
   2bf4c:	pop	{r4, pc}
   2bf50:	mov	r1, #0
   2bf54:	mov	r0, r1
   2bf58:	bl	12294 <getcwd@plt>
   2bf5c:	str	r0, [r4, #4]
   2bf60:	cmp	r0, #0
   2bf64:	movne	r0, #0
   2bf68:	mvneq	r0, #0
   2bf6c:	pop	{r4, pc}
   2bf70:	andeq	r6, r4, r0, asr #3
   2bf74:	push	{r4, lr}
   2bf78:	ldr	r3, [r0]
   2bf7c:	cmp	r3, #0
   2bf80:	blt	2bf90 <__assert_fail@plt+0x199cc>
   2bf84:	mov	r0, r3
   2bf88:	bl	124c8 <fchdir@plt>
   2bf8c:	pop	{r4, pc}
   2bf90:	ldr	r0, [r0, #4]
   2bf94:	bl	2debc <__assert_fail@plt+0x1b8f8>
   2bf98:	pop	{r4, pc}
   2bf9c:	push	{r4, lr}
   2bfa0:	mov	r4, r0
   2bfa4:	ldr	r0, [r0]
   2bfa8:	cmp	r0, #0
   2bfac:	blt	2bfb4 <__assert_fail@plt+0x199f0>
   2bfb0:	bl	1257c <close@plt>
   2bfb4:	ldr	r0, [r4, #4]
   2bfb8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2bfbc:	pop	{r4, pc}
   2bfc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bfc4:	sub	sp, sp, #4032	; 0xfc0
   2bfc8:	mov	r5, r1
   2bfcc:	mov	r7, r2
   2bfd0:	cmn	r0, #100	; 0x64
   2bfd4:	beq	2c0a8 <__assert_fail@plt+0x19ae4>
   2bfd8:	mov	r4, r0
   2bfdc:	ldrb	r3, [r1]
   2bfe0:	cmp	r3, #47	; 0x2f
   2bfe4:	beq	2c0a8 <__assert_fail@plt+0x19ae4>
   2bfe8:	mov	r2, r1
   2bfec:	mov	r1, r0
   2bff0:	mov	r0, sp
   2bff4:	bl	3f6f4 <__assert_fail@plt+0x2d130>
   2bff8:	subs	r8, r0, #0
   2bffc:	beq	2c054 <__assert_fail@plt+0x19a90>
   2c000:	mov	r1, r7
   2c004:	mov	r0, r8
   2c008:	bl	30754 <__assert_fail@plt+0x1e190>
   2c00c:	mov	r6, r0
   2c010:	bl	12318 <__errno_location@plt>
   2c014:	mov	r9, r0
   2c018:	ldr	sl, [r0]
   2c01c:	mov	r3, sp
   2c020:	cmp	r8, r3
   2c024:	beq	2c030 <__assert_fail@plt+0x19a6c>
   2c028:	mov	r0, r8
   2c02c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2c030:	cmn	r6, #1
   2c034:	bne	2c0b8 <__assert_fail@plt+0x19af4>
   2c038:	sub	r3, sl, #1
   2c03c:	cmp	r3, #19
   2c040:	bhi	2c0c4 <__assert_fail@plt+0x19b00>
   2c044:	ldr	r2, [pc, #292]	; 2c170 <__assert_fail@plt+0x19bac>
   2c048:	lsr	r3, r2, r3
   2c04c:	tst	r3, #1
   2c050:	beq	2c0c4 <__assert_fail@plt+0x19b00>
   2c054:	mov	r0, sp
   2c058:	bl	2bf20 <__assert_fail@plt+0x1995c>
   2c05c:	cmp	r0, #0
   2c060:	bne	2c0d8 <__assert_fail@plt+0x19b14>
   2c064:	cmp	r4, #0
   2c068:	blt	2c078 <__assert_fail@plt+0x19ab4>
   2c06c:	ldr	r3, [sp]
   2c070:	cmp	r4, r3
   2c074:	beq	2c0e4 <__assert_fail@plt+0x19b20>
   2c078:	mov	r0, r4
   2c07c:	bl	124c8 <fchdir@plt>
   2c080:	cmp	r0, #0
   2c084:	beq	2c100 <__assert_fail@plt+0x19b3c>
   2c088:	bl	12318 <__errno_location@plt>
   2c08c:	mov	r4, r0
   2c090:	ldr	r5, [r0]
   2c094:	mov	r0, sp
   2c098:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c09c:	str	r5, [r4]
   2c0a0:	mvn	r6, #0
   2c0a4:	b	2c0b8 <__assert_fail@plt+0x19af4>
   2c0a8:	mov	r1, r7
   2c0ac:	mov	r0, r5
   2c0b0:	bl	30754 <__assert_fail@plt+0x1e190>
   2c0b4:	mov	r6, r0
   2c0b8:	mov	r0, r6
   2c0bc:	add	sp, sp, #4032	; 0xfc0
   2c0c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c0c4:	cmp	sl, #38	; 0x26
   2c0c8:	cmpne	sl, #95	; 0x5f
   2c0cc:	strne	sl, [r9]
   2c0d0:	bne	2c0b8 <__assert_fail@plt+0x19af4>
   2c0d4:	b	2c054 <__assert_fail@plt+0x19a90>
   2c0d8:	bl	12318 <__errno_location@plt>
   2c0dc:	ldr	r0, [r0]
   2c0e0:	bl	25850 <__assert_fail@plt+0x1328c>
   2c0e4:	mov	r0, sp
   2c0e8:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c0ec:	bl	12318 <__errno_location@plt>
   2c0f0:	mov	r3, #9
   2c0f4:	str	r3, [r0]
   2c0f8:	mvn	r6, #0
   2c0fc:	b	2c0b8 <__assert_fail@plt+0x19af4>
   2c100:	mov	r1, r7
   2c104:	mov	r0, r5
   2c108:	bl	30754 <__assert_fail@plt+0x1e190>
   2c10c:	mov	r6, r0
   2c110:	cmn	r0, #1
   2c114:	beq	2c134 <__assert_fail@plt+0x19b70>
   2c118:	mov	r0, sp
   2c11c:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c120:	cmp	r0, #0
   2c124:	bne	2c164 <__assert_fail@plt+0x19ba0>
   2c128:	mov	r0, sp
   2c12c:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c130:	b	2c0b8 <__assert_fail@plt+0x19af4>
   2c134:	bl	12318 <__errno_location@plt>
   2c138:	mov	r5, r0
   2c13c:	ldr	r4, [r0]
   2c140:	mov	r0, sp
   2c144:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c148:	cmp	r0, #0
   2c14c:	bne	2c164 <__assert_fail@plt+0x19ba0>
   2c150:	mov	r0, sp
   2c154:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c158:	cmp	r4, #0
   2c15c:	strne	r4, [r5]
   2c160:	b	2c0b8 <__assert_fail@plt+0x19af4>
   2c164:	bl	12318 <__errno_location@plt>
   2c168:	ldr	r0, [r0]
   2c16c:	bl	2588c <__assert_fail@plt+0x132c8>
   2c170:	andeq	r1, r8, r3
   2c174:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c178:	sub	sp, sp, #4032	; 0xfc0
   2c17c:	mov	r5, r1
   2c180:	mov	r7, r2
   2c184:	cmn	r0, #100	; 0x64
   2c188:	beq	2c25c <__assert_fail@plt+0x19c98>
   2c18c:	mov	r4, r0
   2c190:	ldrb	r3, [r1]
   2c194:	cmp	r3, #47	; 0x2f
   2c198:	beq	2c25c <__assert_fail@plt+0x19c98>
   2c19c:	mov	r2, r1
   2c1a0:	mov	r1, r0
   2c1a4:	mov	r0, sp
   2c1a8:	bl	3f6f4 <__assert_fail@plt+0x2d130>
   2c1ac:	subs	r8, r0, #0
   2c1b0:	beq	2c208 <__assert_fail@plt+0x19c44>
   2c1b4:	mov	r1, r7
   2c1b8:	mov	r0, r8
   2c1bc:	bl	3076c <__assert_fail@plt+0x1e1a8>
   2c1c0:	mov	r6, r0
   2c1c4:	bl	12318 <__errno_location@plt>
   2c1c8:	mov	r9, r0
   2c1cc:	ldr	sl, [r0]
   2c1d0:	mov	r3, sp
   2c1d4:	cmp	r8, r3
   2c1d8:	beq	2c1e4 <__assert_fail@plt+0x19c20>
   2c1dc:	mov	r0, r8
   2c1e0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2c1e4:	cmn	r6, #1
   2c1e8:	bne	2c26c <__assert_fail@plt+0x19ca8>
   2c1ec:	sub	r3, sl, #1
   2c1f0:	cmp	r3, #19
   2c1f4:	bhi	2c278 <__assert_fail@plt+0x19cb4>
   2c1f8:	ldr	r2, [pc, #292]	; 2c324 <__assert_fail@plt+0x19d60>
   2c1fc:	lsr	r3, r2, r3
   2c200:	tst	r3, #1
   2c204:	beq	2c278 <__assert_fail@plt+0x19cb4>
   2c208:	mov	r0, sp
   2c20c:	bl	2bf20 <__assert_fail@plt+0x1995c>
   2c210:	cmp	r0, #0
   2c214:	bne	2c28c <__assert_fail@plt+0x19cc8>
   2c218:	cmp	r4, #0
   2c21c:	blt	2c22c <__assert_fail@plt+0x19c68>
   2c220:	ldr	r3, [sp]
   2c224:	cmp	r4, r3
   2c228:	beq	2c298 <__assert_fail@plt+0x19cd4>
   2c22c:	mov	r0, r4
   2c230:	bl	124c8 <fchdir@plt>
   2c234:	cmp	r0, #0
   2c238:	beq	2c2b4 <__assert_fail@plt+0x19cf0>
   2c23c:	bl	12318 <__errno_location@plt>
   2c240:	mov	r4, r0
   2c244:	ldr	r5, [r0]
   2c248:	mov	r0, sp
   2c24c:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c250:	str	r5, [r4]
   2c254:	mvn	r6, #0
   2c258:	b	2c26c <__assert_fail@plt+0x19ca8>
   2c25c:	mov	r1, r7
   2c260:	mov	r0, r5
   2c264:	bl	3076c <__assert_fail@plt+0x1e1a8>
   2c268:	mov	r6, r0
   2c26c:	mov	r0, r6
   2c270:	add	sp, sp, #4032	; 0xfc0
   2c274:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c278:	cmp	sl, #38	; 0x26
   2c27c:	cmpne	sl, #95	; 0x5f
   2c280:	strne	sl, [r9]
   2c284:	bne	2c26c <__assert_fail@plt+0x19ca8>
   2c288:	b	2c208 <__assert_fail@plt+0x19c44>
   2c28c:	bl	12318 <__errno_location@plt>
   2c290:	ldr	r0, [r0]
   2c294:	bl	25850 <__assert_fail@plt+0x1328c>
   2c298:	mov	r0, sp
   2c29c:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c2a0:	bl	12318 <__errno_location@plt>
   2c2a4:	mov	r3, #9
   2c2a8:	str	r3, [r0]
   2c2ac:	mvn	r6, #0
   2c2b0:	b	2c26c <__assert_fail@plt+0x19ca8>
   2c2b4:	mov	r1, r7
   2c2b8:	mov	r0, r5
   2c2bc:	bl	3076c <__assert_fail@plt+0x1e1a8>
   2c2c0:	mov	r6, r0
   2c2c4:	cmn	r0, #1
   2c2c8:	beq	2c2e8 <__assert_fail@plt+0x19d24>
   2c2cc:	mov	r0, sp
   2c2d0:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c2d4:	cmp	r0, #0
   2c2d8:	bne	2c318 <__assert_fail@plt+0x19d54>
   2c2dc:	mov	r0, sp
   2c2e0:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c2e4:	b	2c26c <__assert_fail@plt+0x19ca8>
   2c2e8:	bl	12318 <__errno_location@plt>
   2c2ec:	mov	r5, r0
   2c2f0:	ldr	r4, [r0]
   2c2f4:	mov	r0, sp
   2c2f8:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c2fc:	cmp	r0, #0
   2c300:	bne	2c318 <__assert_fail@plt+0x19d54>
   2c304:	mov	r0, sp
   2c308:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c30c:	cmp	r4, #0
   2c310:	strne	r4, [r5]
   2c314:	b	2c26c <__assert_fail@plt+0x19ca8>
   2c318:	bl	12318 <__errno_location@plt>
   2c31c:	ldr	r0, [r0]
   2c320:	bl	2588c <__assert_fail@plt+0x132c8>
   2c324:	andeq	r1, r8, r3
   2c328:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c32c:	sub	sp, sp, #4032	; 0xfc0
   2c330:	mov	r5, r1
   2c334:	mov	r7, r2
   2c338:	cmn	r0, #100	; 0x64
   2c33c:	beq	2c410 <__assert_fail@plt+0x19e4c>
   2c340:	mov	r4, r0
   2c344:	ldrb	r3, [r1]
   2c348:	cmp	r3, #47	; 0x2f
   2c34c:	beq	2c410 <__assert_fail@plt+0x19e4c>
   2c350:	mov	r2, r1
   2c354:	mov	r1, r0
   2c358:	mov	r0, sp
   2c35c:	bl	3f6f4 <__assert_fail@plt+0x2d130>
   2c360:	subs	r8, r0, #0
   2c364:	beq	2c3bc <__assert_fail@plt+0x19df8>
   2c368:	mov	r1, r7
   2c36c:	mov	r0, r8
   2c370:	bl	123b4 <setfilecon@plt>
   2c374:	mov	r6, r0
   2c378:	bl	12318 <__errno_location@plt>
   2c37c:	mov	r9, r0
   2c380:	ldr	sl, [r0]
   2c384:	mov	r3, sp
   2c388:	cmp	r8, r3
   2c38c:	beq	2c398 <__assert_fail@plt+0x19dd4>
   2c390:	mov	r0, r8
   2c394:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2c398:	cmn	r6, #1
   2c39c:	bne	2c420 <__assert_fail@plt+0x19e5c>
   2c3a0:	sub	r3, sl, #1
   2c3a4:	cmp	r3, #19
   2c3a8:	bhi	2c42c <__assert_fail@plt+0x19e68>
   2c3ac:	ldr	r2, [pc, #292]	; 2c4d8 <__assert_fail@plt+0x19f14>
   2c3b0:	lsr	r3, r2, r3
   2c3b4:	tst	r3, #1
   2c3b8:	beq	2c42c <__assert_fail@plt+0x19e68>
   2c3bc:	mov	r0, sp
   2c3c0:	bl	2bf20 <__assert_fail@plt+0x1995c>
   2c3c4:	cmp	r0, #0
   2c3c8:	bne	2c440 <__assert_fail@plt+0x19e7c>
   2c3cc:	cmp	r4, #0
   2c3d0:	blt	2c3e0 <__assert_fail@plt+0x19e1c>
   2c3d4:	ldr	r3, [sp]
   2c3d8:	cmp	r4, r3
   2c3dc:	beq	2c44c <__assert_fail@plt+0x19e88>
   2c3e0:	mov	r0, r4
   2c3e4:	bl	124c8 <fchdir@plt>
   2c3e8:	cmp	r0, #0
   2c3ec:	beq	2c468 <__assert_fail@plt+0x19ea4>
   2c3f0:	bl	12318 <__errno_location@plt>
   2c3f4:	mov	r4, r0
   2c3f8:	ldr	r5, [r0]
   2c3fc:	mov	r0, sp
   2c400:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c404:	str	r5, [r4]
   2c408:	mvn	r6, #0
   2c40c:	b	2c420 <__assert_fail@plt+0x19e5c>
   2c410:	mov	r1, r7
   2c414:	mov	r0, r5
   2c418:	bl	123b4 <setfilecon@plt>
   2c41c:	mov	r6, r0
   2c420:	mov	r0, r6
   2c424:	add	sp, sp, #4032	; 0xfc0
   2c428:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c42c:	cmp	sl, #38	; 0x26
   2c430:	cmpne	sl, #95	; 0x5f
   2c434:	strne	sl, [r9]
   2c438:	bne	2c420 <__assert_fail@plt+0x19e5c>
   2c43c:	b	2c3bc <__assert_fail@plt+0x19df8>
   2c440:	bl	12318 <__errno_location@plt>
   2c444:	ldr	r0, [r0]
   2c448:	bl	25850 <__assert_fail@plt+0x1328c>
   2c44c:	mov	r0, sp
   2c450:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c454:	bl	12318 <__errno_location@plt>
   2c458:	mov	r3, #9
   2c45c:	str	r3, [r0]
   2c460:	mvn	r6, #0
   2c464:	b	2c420 <__assert_fail@plt+0x19e5c>
   2c468:	mov	r1, r7
   2c46c:	mov	r0, r5
   2c470:	bl	123b4 <setfilecon@plt>
   2c474:	mov	r6, r0
   2c478:	cmn	r0, #1
   2c47c:	beq	2c49c <__assert_fail@plt+0x19ed8>
   2c480:	mov	r0, sp
   2c484:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c488:	cmp	r0, #0
   2c48c:	bne	2c4cc <__assert_fail@plt+0x19f08>
   2c490:	mov	r0, sp
   2c494:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c498:	b	2c420 <__assert_fail@plt+0x19e5c>
   2c49c:	bl	12318 <__errno_location@plt>
   2c4a0:	mov	r5, r0
   2c4a4:	ldr	r4, [r0]
   2c4a8:	mov	r0, sp
   2c4ac:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c4b0:	cmp	r0, #0
   2c4b4:	bne	2c4cc <__assert_fail@plt+0x19f08>
   2c4b8:	mov	r0, sp
   2c4bc:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c4c0:	cmp	r4, #0
   2c4c4:	strne	r4, [r5]
   2c4c8:	b	2c420 <__assert_fail@plt+0x19e5c>
   2c4cc:	bl	12318 <__errno_location@plt>
   2c4d0:	ldr	r0, [r0]
   2c4d4:	bl	2588c <__assert_fail@plt+0x132c8>
   2c4d8:	andeq	r1, r8, r3
   2c4dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c4e0:	sub	sp, sp, #4032	; 0xfc0
   2c4e4:	mov	r5, r1
   2c4e8:	mov	r7, r2
   2c4ec:	cmn	r0, #100	; 0x64
   2c4f0:	beq	2c5c4 <__assert_fail@plt+0x1a000>
   2c4f4:	mov	r4, r0
   2c4f8:	ldrb	r3, [r1]
   2c4fc:	cmp	r3, #47	; 0x2f
   2c500:	beq	2c5c4 <__assert_fail@plt+0x1a000>
   2c504:	mov	r2, r1
   2c508:	mov	r1, r0
   2c50c:	mov	r0, sp
   2c510:	bl	3f6f4 <__assert_fail@plt+0x2d130>
   2c514:	subs	r8, r0, #0
   2c518:	beq	2c570 <__assert_fail@plt+0x19fac>
   2c51c:	mov	r1, r7
   2c520:	mov	r0, r8
   2c524:	bl	11f88 <lsetfilecon@plt>
   2c528:	mov	r6, r0
   2c52c:	bl	12318 <__errno_location@plt>
   2c530:	mov	r9, r0
   2c534:	ldr	sl, [r0]
   2c538:	mov	r3, sp
   2c53c:	cmp	r8, r3
   2c540:	beq	2c54c <__assert_fail@plt+0x19f88>
   2c544:	mov	r0, r8
   2c548:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2c54c:	cmn	r6, #1
   2c550:	bne	2c5d4 <__assert_fail@plt+0x1a010>
   2c554:	sub	r3, sl, #1
   2c558:	cmp	r3, #19
   2c55c:	bhi	2c5e0 <__assert_fail@plt+0x1a01c>
   2c560:	ldr	r2, [pc, #292]	; 2c68c <__assert_fail@plt+0x1a0c8>
   2c564:	lsr	r3, r2, r3
   2c568:	tst	r3, #1
   2c56c:	beq	2c5e0 <__assert_fail@plt+0x1a01c>
   2c570:	mov	r0, sp
   2c574:	bl	2bf20 <__assert_fail@plt+0x1995c>
   2c578:	cmp	r0, #0
   2c57c:	bne	2c5f4 <__assert_fail@plt+0x1a030>
   2c580:	cmp	r4, #0
   2c584:	blt	2c594 <__assert_fail@plt+0x19fd0>
   2c588:	ldr	r3, [sp]
   2c58c:	cmp	r4, r3
   2c590:	beq	2c600 <__assert_fail@plt+0x1a03c>
   2c594:	mov	r0, r4
   2c598:	bl	124c8 <fchdir@plt>
   2c59c:	cmp	r0, #0
   2c5a0:	beq	2c61c <__assert_fail@plt+0x1a058>
   2c5a4:	bl	12318 <__errno_location@plt>
   2c5a8:	mov	r4, r0
   2c5ac:	ldr	r5, [r0]
   2c5b0:	mov	r0, sp
   2c5b4:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c5b8:	str	r5, [r4]
   2c5bc:	mvn	r6, #0
   2c5c0:	b	2c5d4 <__assert_fail@plt+0x1a010>
   2c5c4:	mov	r1, r7
   2c5c8:	mov	r0, r5
   2c5cc:	bl	11f88 <lsetfilecon@plt>
   2c5d0:	mov	r6, r0
   2c5d4:	mov	r0, r6
   2c5d8:	add	sp, sp, #4032	; 0xfc0
   2c5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c5e0:	cmp	sl, #38	; 0x26
   2c5e4:	cmpne	sl, #95	; 0x5f
   2c5e8:	strne	sl, [r9]
   2c5ec:	bne	2c5d4 <__assert_fail@plt+0x1a010>
   2c5f0:	b	2c570 <__assert_fail@plt+0x19fac>
   2c5f4:	bl	12318 <__errno_location@plt>
   2c5f8:	ldr	r0, [r0]
   2c5fc:	bl	25850 <__assert_fail@plt+0x1328c>
   2c600:	mov	r0, sp
   2c604:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c608:	bl	12318 <__errno_location@plt>
   2c60c:	mov	r3, #9
   2c610:	str	r3, [r0]
   2c614:	mvn	r6, #0
   2c618:	b	2c5d4 <__assert_fail@plt+0x1a010>
   2c61c:	mov	r1, r7
   2c620:	mov	r0, r5
   2c624:	bl	11f88 <lsetfilecon@plt>
   2c628:	mov	r6, r0
   2c62c:	cmn	r0, #1
   2c630:	beq	2c650 <__assert_fail@plt+0x1a08c>
   2c634:	mov	r0, sp
   2c638:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c63c:	cmp	r0, #0
   2c640:	bne	2c680 <__assert_fail@plt+0x1a0bc>
   2c644:	mov	r0, sp
   2c648:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c64c:	b	2c5d4 <__assert_fail@plt+0x1a010>
   2c650:	bl	12318 <__errno_location@plt>
   2c654:	mov	r5, r0
   2c658:	ldr	r4, [r0]
   2c65c:	mov	r0, sp
   2c660:	bl	2bf74 <__assert_fail@plt+0x199b0>
   2c664:	cmp	r0, #0
   2c668:	bne	2c680 <__assert_fail@plt+0x1a0bc>
   2c66c:	mov	r0, sp
   2c670:	bl	2bf9c <__assert_fail@plt+0x199d8>
   2c674:	cmp	r4, #0
   2c678:	strne	r4, [r5]
   2c67c:	b	2c5d4 <__assert_fail@plt+0x1a010>
   2c680:	bl	12318 <__errno_location@plt>
   2c684:	ldr	r0, [r0]
   2c688:	bl	2588c <__assert_fail@plt+0x132c8>
   2c68c:	andeq	r1, r8, r3
   2c690:	push	{r4, r5, r6, lr}
   2c694:	mov	r5, r0
   2c698:	mov	r4, r1
   2c69c:	mov	r2, r1
   2c6a0:	mov	r1, #0
   2c6a4:	bl	123a8 <memchr@plt>
   2c6a8:	cmp	r0, #0
   2c6ac:	subne	r0, r0, r5
   2c6b0:	addne	r0, r0, #1
   2c6b4:	moveq	r0, r4
   2c6b8:	pop	{r4, r5, r6, pc}
   2c6bc:	push	{r4, lr}
   2c6c0:	mov	r2, #3
   2c6c4:	mov	r1, #0
   2c6c8:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   2c6cc:	pop	{r4, pc}
   2c6d0:	push	{r4, r5, r6, r7, r8, lr}
   2c6d4:	mov	r4, r0
   2c6d8:	cmp	r0, #2
   2c6dc:	bls	2c6e8 <__assert_fail@plt+0x1a124>
   2c6e0:	mov	r0, r4
   2c6e4:	pop	{r4, r5, r6, r7, r8, pc}
   2c6e8:	bl	2c6bc <__assert_fail@plt+0x1a0f8>
   2c6ec:	mov	r6, r0
   2c6f0:	bl	12318 <__errno_location@plt>
   2c6f4:	mov	r5, r0
   2c6f8:	ldr	r7, [r0]
   2c6fc:	mov	r0, r4
   2c700:	bl	1257c <close@plt>
   2c704:	str	r7, [r5]
   2c708:	mov	r4, r6
   2c70c:	b	2c6e0 <__assert_fail@plt+0x1a11c>
   2c710:	push	{r4, r5, r6, lr}
   2c714:	sub	sp, sp, #32
   2c718:	mov	r4, r0
   2c71c:	ldr	r5, [sp, #48]	; 0x30
   2c720:	ldr	r6, [sp, #52]	; 0x34
   2c724:	cmp	r1, #0
   2c728:	beq	2c7d0 <__assert_fail@plt+0x1a20c>
   2c72c:	str	r3, [sp]
   2c730:	mov	r3, r2
   2c734:	mov	r2, r1
   2c738:	ldr	r1, [pc, #836]	; 2ca84 <__assert_fail@plt+0x1a4c0>
   2c73c:	bl	1230c <fprintf@plt>
   2c740:	mov	r2, #5
   2c744:	ldr	r1, [pc, #828]	; 2ca88 <__assert_fail@plt+0x1a4c4>
   2c748:	mov	r0, #0
   2c74c:	bl	12084 <dcgettext@plt>
   2c750:	ldr	r3, [pc, #820]	; 2ca8c <__assert_fail@plt+0x1a4c8>
   2c754:	mov	r2, r0
   2c758:	ldr	r1, [pc, #816]	; 2ca90 <__assert_fail@plt+0x1a4cc>
   2c75c:	mov	r0, r4
   2c760:	bl	1230c <fprintf@plt>
   2c764:	mov	r1, r4
   2c768:	mov	r0, #10
   2c76c:	bl	1245c <fputc@plt>
   2c770:	mov	r2, #5
   2c774:	ldr	r1, [pc, #792]	; 2ca94 <__assert_fail@plt+0x1a4d0>
   2c778:	mov	r0, #0
   2c77c:	bl	12084 <dcgettext@plt>
   2c780:	ldr	r2, [pc, #784]	; 2ca98 <__assert_fail@plt+0x1a4d4>
   2c784:	mov	r1, r0
   2c788:	mov	r0, r4
   2c78c:	bl	1230c <fprintf@plt>
   2c790:	mov	r1, r4
   2c794:	mov	r0, #10
   2c798:	bl	1245c <fputc@plt>
   2c79c:	cmp	r6, #9
   2c7a0:	ldrls	pc, [pc, r6, lsl #2]
   2c7a4:	b	2ca24 <__assert_fail@plt+0x1a460>
   2c7a8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c7ac:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c7b0:	andeq	ip, r2, r4, lsl #16
   2c7b4:	andeq	ip, r2, ip, lsr #16
   2c7b8:	andeq	ip, r2, ip, asr r8
   2c7bc:	muleq	r2, r4, r8
   2c7c0:	ldrdeq	ip, [r2], -r4
   2c7c4:	andeq	ip, r2, ip, lsl r9
   2c7c8:	andeq	ip, r2, ip, ror #18
   2c7cc:	andeq	ip, r2, r4, asr #19
   2c7d0:	ldr	r1, [pc, #708]	; 2ca9c <__assert_fail@plt+0x1a4d8>
   2c7d4:	bl	1230c <fprintf@plt>
   2c7d8:	b	2c740 <__assert_fail@plt+0x1a17c>
   2c7dc:	mov	r2, #5
   2c7e0:	ldr	r1, [pc, #696]	; 2caa0 <__assert_fail@plt+0x1a4dc>
   2c7e4:	mov	r0, #0
   2c7e8:	bl	12084 <dcgettext@plt>
   2c7ec:	ldr	r2, [r5]
   2c7f0:	mov	r1, r0
   2c7f4:	mov	r0, r4
   2c7f8:	bl	1230c <fprintf@plt>
   2c7fc:	add	sp, sp, #32
   2c800:	pop	{r4, r5, r6, pc}
   2c804:	mov	r2, #5
   2c808:	ldr	r1, [pc, #660]	; 2caa4 <__assert_fail@plt+0x1a4e0>
   2c80c:	mov	r0, #0
   2c810:	bl	12084 <dcgettext@plt>
   2c814:	ldr	r3, [r5, #4]
   2c818:	ldr	r2, [r5]
   2c81c:	mov	r1, r0
   2c820:	mov	r0, r4
   2c824:	bl	1230c <fprintf@plt>
   2c828:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c82c:	mov	r2, #5
   2c830:	ldr	r1, [pc, #624]	; 2caa8 <__assert_fail@plt+0x1a4e4>
   2c834:	mov	r0, #0
   2c838:	bl	12084 <dcgettext@plt>
   2c83c:	ldr	r3, [r5, #4]
   2c840:	ldr	r2, [r5]
   2c844:	ldr	r1, [r5, #8]
   2c848:	str	r1, [sp]
   2c84c:	mov	r1, r0
   2c850:	mov	r0, r4
   2c854:	bl	1230c <fprintf@plt>
   2c858:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c85c:	mov	r2, #5
   2c860:	ldr	r1, [pc, #580]	; 2caac <__assert_fail@plt+0x1a4e8>
   2c864:	mov	r0, #0
   2c868:	bl	12084 <dcgettext@plt>
   2c86c:	ldr	r3, [r5, #4]
   2c870:	ldr	r2, [r5]
   2c874:	ldr	r1, [r5, #12]
   2c878:	str	r1, [sp, #4]
   2c87c:	ldr	r1, [r5, #8]
   2c880:	str	r1, [sp]
   2c884:	mov	r1, r0
   2c888:	mov	r0, r4
   2c88c:	bl	1230c <fprintf@plt>
   2c890:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c894:	mov	r2, #5
   2c898:	ldr	r1, [pc, #528]	; 2cab0 <__assert_fail@plt+0x1a4ec>
   2c89c:	mov	r0, #0
   2c8a0:	bl	12084 <dcgettext@plt>
   2c8a4:	ldr	r3, [r5, #4]
   2c8a8:	ldr	r2, [r5]
   2c8ac:	ldr	r1, [r5, #16]
   2c8b0:	str	r1, [sp, #8]
   2c8b4:	ldr	r1, [r5, #12]
   2c8b8:	str	r1, [sp, #4]
   2c8bc:	ldr	r1, [r5, #8]
   2c8c0:	str	r1, [sp]
   2c8c4:	mov	r1, r0
   2c8c8:	mov	r0, r4
   2c8cc:	bl	1230c <fprintf@plt>
   2c8d0:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c8d4:	mov	r2, #5
   2c8d8:	ldr	r1, [pc, #468]	; 2cab4 <__assert_fail@plt+0x1a4f0>
   2c8dc:	mov	r0, #0
   2c8e0:	bl	12084 <dcgettext@plt>
   2c8e4:	ldr	r3, [r5, #4]
   2c8e8:	ldr	r2, [r5]
   2c8ec:	ldr	r1, [r5, #20]
   2c8f0:	str	r1, [sp, #12]
   2c8f4:	ldr	r1, [r5, #16]
   2c8f8:	str	r1, [sp, #8]
   2c8fc:	ldr	r1, [r5, #12]
   2c900:	str	r1, [sp, #4]
   2c904:	ldr	r1, [r5, #8]
   2c908:	str	r1, [sp]
   2c90c:	mov	r1, r0
   2c910:	mov	r0, r4
   2c914:	bl	1230c <fprintf@plt>
   2c918:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c91c:	mov	r2, #5
   2c920:	ldr	r1, [pc, #400]	; 2cab8 <__assert_fail@plt+0x1a4f4>
   2c924:	mov	r0, #0
   2c928:	bl	12084 <dcgettext@plt>
   2c92c:	ldr	r3, [r5, #4]
   2c930:	ldr	r2, [r5]
   2c934:	ldr	r1, [r5, #24]
   2c938:	str	r1, [sp, #16]
   2c93c:	ldr	r1, [r5, #20]
   2c940:	str	r1, [sp, #12]
   2c944:	ldr	r1, [r5, #16]
   2c948:	str	r1, [sp, #8]
   2c94c:	ldr	r1, [r5, #12]
   2c950:	str	r1, [sp, #4]
   2c954:	ldr	r1, [r5, #8]
   2c958:	str	r1, [sp]
   2c95c:	mov	r1, r0
   2c960:	mov	r0, r4
   2c964:	bl	1230c <fprintf@plt>
   2c968:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c96c:	mov	r2, #5
   2c970:	ldr	r1, [pc, #324]	; 2cabc <__assert_fail@plt+0x1a4f8>
   2c974:	mov	r0, #0
   2c978:	bl	12084 <dcgettext@plt>
   2c97c:	ldr	r3, [r5, #4]
   2c980:	ldr	r2, [r5]
   2c984:	ldr	r1, [r5, #28]
   2c988:	str	r1, [sp, #20]
   2c98c:	ldr	r1, [r5, #24]
   2c990:	str	r1, [sp, #16]
   2c994:	ldr	r1, [r5, #20]
   2c998:	str	r1, [sp, #12]
   2c99c:	ldr	r1, [r5, #16]
   2c9a0:	str	r1, [sp, #8]
   2c9a4:	ldr	r1, [r5, #12]
   2c9a8:	str	r1, [sp, #4]
   2c9ac:	ldr	r1, [r5, #8]
   2c9b0:	str	r1, [sp]
   2c9b4:	mov	r1, r0
   2c9b8:	mov	r0, r4
   2c9bc:	bl	1230c <fprintf@plt>
   2c9c0:	b	2c7fc <__assert_fail@plt+0x1a238>
   2c9c4:	mov	r2, #5
   2c9c8:	ldr	r1, [pc, #240]	; 2cac0 <__assert_fail@plt+0x1a4fc>
   2c9cc:	mov	r0, #0
   2c9d0:	bl	12084 <dcgettext@plt>
   2c9d4:	ldr	r3, [r5, #4]
   2c9d8:	ldr	r2, [r5]
   2c9dc:	ldr	r1, [r5, #32]
   2c9e0:	str	r1, [sp, #24]
   2c9e4:	ldr	r1, [r5, #28]
   2c9e8:	str	r1, [sp, #20]
   2c9ec:	ldr	r1, [r5, #24]
   2c9f0:	str	r1, [sp, #16]
   2c9f4:	ldr	r1, [r5, #20]
   2c9f8:	str	r1, [sp, #12]
   2c9fc:	ldr	r1, [r5, #16]
   2ca00:	str	r1, [sp, #8]
   2ca04:	ldr	r1, [r5, #12]
   2ca08:	str	r1, [sp, #4]
   2ca0c:	ldr	r1, [r5, #8]
   2ca10:	str	r1, [sp]
   2ca14:	mov	r1, r0
   2ca18:	mov	r0, r4
   2ca1c:	bl	1230c <fprintf@plt>
   2ca20:	b	2c7fc <__assert_fail@plt+0x1a238>
   2ca24:	mov	r2, #5
   2ca28:	ldr	r1, [pc, #148]	; 2cac4 <__assert_fail@plt+0x1a500>
   2ca2c:	mov	r0, #0
   2ca30:	bl	12084 <dcgettext@plt>
   2ca34:	ldr	r3, [r5, #4]
   2ca38:	ldr	r2, [r5]
   2ca3c:	ldr	r1, [r5, #32]
   2ca40:	str	r1, [sp, #24]
   2ca44:	ldr	r1, [r5, #28]
   2ca48:	str	r1, [sp, #20]
   2ca4c:	ldr	r1, [r5, #24]
   2ca50:	str	r1, [sp, #16]
   2ca54:	ldr	r1, [r5, #20]
   2ca58:	str	r1, [sp, #12]
   2ca5c:	ldr	r1, [r5, #16]
   2ca60:	str	r1, [sp, #8]
   2ca64:	ldr	r1, [r5, #12]
   2ca68:	str	r1, [sp, #4]
   2ca6c:	ldr	r1, [r5, #8]
   2ca70:	str	r1, [sp]
   2ca74:	mov	r1, r0
   2ca78:	mov	r0, r4
   2ca7c:	bl	1230c <fprintf@plt>
   2ca80:	b	2c7fc <__assert_fail@plt+0x1a238>
   2ca84:			; <UNDEFINED> instruction: 0x00047db8
   2ca88:	andeq	r7, r4, ip, asr #27
   2ca8c:	andeq	r0, r0, r6, ror #15
   2ca90:	andeq	r8, r4, ip, lsl #1
   2ca94:	ldrdeq	r7, [r4], -r0
   2ca98:	andeq	r7, r4, ip, ror lr
   2ca9c:	andeq	r7, r4, r4, asr #27
   2caa0:	andeq	r7, r4, r0, lsr #29
   2caa4:			; <UNDEFINED> instruction: 0x00047eb0
   2caa8:	andeq	r7, r4, r8, asr #29
   2caac:	andeq	r7, r4, r4, ror #29
   2cab0:	andeq	r7, r4, r4, lsl #30
   2cab4:	andeq	r7, r4, r8, lsr #30
   2cab8:	andeq	r7, r4, r0, asr pc
   2cabc:	andeq	r7, r4, ip, ror pc
   2cac0:	andeq	r7, r4, ip, lsr #31
   2cac4:	andeq	r7, r4, r0, ror #31
   2cac8:	push	{r4, r5, lr}
   2cacc:	sub	sp, sp, #12
   2cad0:	ldr	r5, [sp, #24]
   2cad4:	ldr	ip, [r5]
   2cad8:	cmp	ip, #0
   2cadc:	beq	2cb0c <__assert_fail@plt+0x1a548>
   2cae0:	mov	lr, r5
   2cae4:	mov	ip, #0
   2cae8:	add	ip, ip, #1
   2caec:	ldr	r4, [lr, #4]!
   2caf0:	cmp	r4, #0
   2caf4:	bne	2cae8 <__assert_fail@plt+0x1a524>
   2caf8:	str	ip, [sp, #4]
   2cafc:	str	r5, [sp]
   2cb00:	bl	2c710 <__assert_fail@plt+0x1a14c>
   2cb04:	add	sp, sp, #12
   2cb08:	pop	{r4, r5, pc}
   2cb0c:	mov	ip, #0
   2cb10:	b	2caf8 <__assert_fail@plt+0x1a534>
   2cb14:	push	{r4, r5, lr}
   2cb18:	sub	sp, sp, #52	; 0x34
   2cb1c:	ldr	r4, [sp, #64]	; 0x40
   2cb20:	sub	r4, r4, #4
   2cb24:	add	r5, sp, #4
   2cb28:	mov	ip, #0
   2cb2c:	ldr	lr, [r4, #4]!
   2cb30:	str	lr, [r5, #4]!
   2cb34:	cmp	lr, #0
   2cb38:	beq	2cb48 <__assert_fail@plt+0x1a584>
   2cb3c:	add	ip, ip, #1
   2cb40:	cmp	ip, #10
   2cb44:	bne	2cb2c <__assert_fail@plt+0x1a568>
   2cb48:	str	ip, [sp, #4]
   2cb4c:	add	ip, sp, #8
   2cb50:	str	ip, [sp]
   2cb54:	bl	2c710 <__assert_fail@plt+0x1a14c>
   2cb58:	add	sp, sp, #52	; 0x34
   2cb5c:	pop	{r4, r5, pc}
   2cb60:	push	{r3}		; (str r3, [sp, #-4]!)
   2cb64:	push	{lr}		; (str lr, [sp, #-4]!)
   2cb68:	sub	sp, sp, #16
   2cb6c:	add	r3, sp, #24
   2cb70:	str	r3, [sp, #12]
   2cb74:	str	r3, [sp]
   2cb78:	ldr	r3, [sp, #20]
   2cb7c:	bl	2cb14 <__assert_fail@plt+0x1a550>
   2cb80:	add	sp, sp, #16
   2cb84:	pop	{lr}		; (ldr lr, [sp], #4)
   2cb88:	add	sp, sp, #4
   2cb8c:	bx	lr
   2cb90:	push	{r4, lr}
   2cb94:	ldr	r3, [pc, #88]	; 2cbf4 <__assert_fail@plt+0x1a630>
   2cb98:	ldr	r1, [r3]
   2cb9c:	mov	r0, #10
   2cba0:	bl	1245c <fputc@plt>
   2cba4:	mov	r2, #5
   2cba8:	ldr	r1, [pc, #72]	; 2cbf8 <__assert_fail@plt+0x1a634>
   2cbac:	mov	r0, #0
   2cbb0:	bl	12084 <dcgettext@plt>
   2cbb4:	ldr	r1, [pc, #64]	; 2cbfc <__assert_fail@plt+0x1a638>
   2cbb8:	bl	11f40 <printf@plt>
   2cbbc:	mov	r2, #5
   2cbc0:	ldr	r1, [pc, #56]	; 2cc00 <__assert_fail@plt+0x1a63c>
   2cbc4:	mov	r0, #0
   2cbc8:	bl	12084 <dcgettext@plt>
   2cbcc:	ldr	r2, [pc, #48]	; 2cc04 <__assert_fail@plt+0x1a640>
   2cbd0:	ldr	r1, [pc, #48]	; 2cc08 <__assert_fail@plt+0x1a644>
   2cbd4:	bl	11f40 <printf@plt>
   2cbd8:	mov	r2, #5
   2cbdc:	ldr	r1, [pc, #40]	; 2cc0c <__assert_fail@plt+0x1a648>
   2cbe0:	mov	r0, #0
   2cbe4:	bl	12084 <dcgettext@plt>
   2cbe8:	ldr	r1, [pc, #32]	; 2cc10 <__assert_fail@plt+0x1a64c>
   2cbec:	bl	11f40 <printf@plt>
   2cbf0:	pop	{r4, pc}
   2cbf4:	andeq	r9, r5, r4, asr r5
   2cbf8:	andeq	r8, r4, ip, lsl r0
   2cbfc:	andeq	r6, r4, ip, lsr #23
   2cc00:	andeq	r8, r4, r0, lsr r0
   2cc04:	andeq	r6, r4, r4, lsl #23
   2cc08:	andeq	r6, r4, r4, ror #16
   2cc0c:	andeq	r8, r4, r4, asr #32
   2cc10:	andeq	r8, r4, ip, rrx
   2cc14:	push	{r4, lr}
   2cc18:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2cc1c:	cmp	r0, #0
   2cc20:	popne	{r4, pc}
   2cc24:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cc28:	push	{r4, lr}
   2cc2c:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2cc30:	cmp	r0, #0
   2cc34:	popne	{r4, pc}
   2cc38:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cc3c:	push	{r4, lr}
   2cc40:	bl	2cc14 <__assert_fail@plt+0x1a650>
   2cc44:	pop	{r4, pc}
   2cc48:	push	{r4, r5, r6, lr}
   2cc4c:	mov	r5, r0
   2cc50:	mov	r4, r1
   2cc54:	bl	31320 <__assert_fail@plt+0x1ed5c>
   2cc58:	cmp	r0, #0
   2cc5c:	popne	{r4, r5, r6, pc}
   2cc60:	adds	r4, r4, #0
   2cc64:	movne	r4, #1
   2cc68:	cmp	r5, #0
   2cc6c:	orreq	r4, r4, #1
   2cc70:	cmp	r4, #0
   2cc74:	popeq	{r4, r5, r6, pc}
   2cc78:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cc7c:	push	{r4, lr}
   2cc80:	cmp	r1, #0
   2cc84:	orreq	r1, r1, #1
   2cc88:	bl	31320 <__assert_fail@plt+0x1ed5c>
   2cc8c:	cmp	r0, #0
   2cc90:	popne	{r4, pc}
   2cc94:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cc98:	push	{r4, r5, r6, lr}
   2cc9c:	mov	r6, r0
   2cca0:	mov	r5, r1
   2cca4:	mov	r4, r2
   2cca8:	bl	31370 <__assert_fail@plt+0x1edac>
   2ccac:	cmp	r0, #0
   2ccb0:	popne	{r4, r5, r6, pc}
   2ccb4:	cmp	r6, #0
   2ccb8:	beq	2ccc8 <__assert_fail@plt+0x1a704>
   2ccbc:	cmp	r5, #0
   2ccc0:	cmpne	r4, #0
   2ccc4:	popeq	{r4, r5, r6, pc}
   2ccc8:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cccc:	push	{r4, lr}
   2ccd0:	bl	2cc98 <__assert_fail@plt+0x1a6d4>
   2ccd4:	pop	{r4, pc}
   2ccd8:	push	{r4, lr}
   2ccdc:	mov	ip, r1
   2cce0:	mov	r3, r2
   2cce4:	cmp	r2, #0
   2cce8:	cmpne	r1, #0
   2ccec:	moveq	r3, #1
   2ccf0:	moveq	ip, r3
   2ccf4:	mov	r2, r3
   2ccf8:	mov	r1, ip
   2ccfc:	bl	31370 <__assert_fail@plt+0x1edac>
   2cd00:	cmp	r0, #0
   2cd04:	popne	{r4, pc}
   2cd08:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cd0c:	push	{r4, lr}
   2cd10:	mov	r2, r1
   2cd14:	mov	r1, r0
   2cd18:	mov	r0, #0
   2cd1c:	bl	2cc98 <__assert_fail@plt+0x1a6d4>
   2cd20:	pop	{r4, pc}
   2cd24:	push	{r4, lr}
   2cd28:	mov	r2, r1
   2cd2c:	mov	r1, r0
   2cd30:	mov	r0, #0
   2cd34:	bl	2ccd8 <__assert_fail@plt+0x1a714>
   2cd38:	pop	{r4, pc}
   2cd3c:	push	{r4, r5, r6, r7, r8, lr}
   2cd40:	mov	r5, r1
   2cd44:	mov	r6, r2
   2cd48:	ldr	r4, [r1]
   2cd4c:	subs	r7, r0, #0
   2cd50:	beq	2cd6c <__assert_fail@plt+0x1a7a8>
   2cd54:	lsr	r2, r4, #1
   2cd58:	add	r3, r2, #1
   2cd5c:	mvn	r3, r3
   2cd60:	cmp	r4, r3
   2cd64:	bls	2cd90 <__assert_fail@plt+0x1a7cc>
   2cd68:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2cd6c:	cmp	r4, #0
   2cd70:	bne	2cd98 <__assert_fail@plt+0x1a7d4>
   2cd74:	mov	r1, r2
   2cd78:	mov	r0, #64	; 0x40
   2cd7c:	bl	41a68 <__assert_fail@plt+0x2f4a4>
   2cd80:	cmp	r0, #0
   2cd84:	movne	r4, r0
   2cd88:	addeq	r4, r0, #1
   2cd8c:	b	2cd98 <__assert_fail@plt+0x1a7d4>
   2cd90:	add	r4, r4, #1
   2cd94:	add	r4, r4, r2
   2cd98:	mov	r2, r6
   2cd9c:	mov	r1, r4
   2cda0:	mov	r0, r7
   2cda4:	bl	2cc98 <__assert_fail@plt+0x1a6d4>
   2cda8:	str	r4, [r5]
   2cdac:	pop	{r4, r5, r6, r7, r8, pc}
   2cdb0:	push	{r4, lr}
   2cdb4:	mov	r2, #1
   2cdb8:	bl	2cd3c <__assert_fail@plt+0x1a778>
   2cdbc:	pop	{r4, pc}
   2cdc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cdc4:	sub	sp, sp, #12
   2cdc8:	mov	fp, r0
   2cdcc:	mov	sl, r1
   2cdd0:	mov	r9, r2
   2cdd4:	mov	r7, r3
   2cdd8:	ldr	r6, [sp, #48]	; 0x30
   2cddc:	ldr	r5, [r1]
   2cde0:	asrs	r4, r5, #1
   2cde4:	bmi	2cf40 <__assert_fail@plt+0x1a97c>
   2cde8:	cmp	r5, #0
   2cdec:	blt	2cf54 <__assert_fail@plt+0x1a990>
   2cdf0:	mvn	r3, #-2147483648	; 0x80000000
   2cdf4:	sub	r3, r3, r4
   2cdf8:	cmp	r5, r3
   2cdfc:	movle	r3, #0
   2ce00:	movgt	r3, #1
   2ce04:	cmp	r3, #0
   2ce08:	addeq	r4, r4, r5
   2ce0c:	mvnne	r4, #-2147483648	; 0x80000000
   2ce10:	mvn	r8, r7
   2ce14:	lsr	r8, r8, #31
   2ce18:	cmp	r7, r4
   2ce1c:	movge	r3, #0
   2ce20:	andlt	r3, r8, #1
   2ce24:	cmp	r3, #0
   2ce28:	movne	r4, r7
   2ce2c:	cmp	r6, #0
   2ce30:	blt	2cf68 <__assert_fail@plt+0x1a9a4>
   2ce34:	cmp	r6, #0
   2ce38:	beq	2d014 <__assert_fail@plt+0x1aa50>
   2ce3c:	cmp	r4, #0
   2ce40:	blt	2cfc4 <__assert_fail@plt+0x1aa00>
   2ce44:	mov	r1, r6
   2ce48:	mvn	r0, #-2147483648	; 0x80000000
   2ce4c:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2ce50:	cmp	r0, r4
   2ce54:	movge	r0, #0
   2ce58:	movlt	r0, #1
   2ce5c:	cmp	r0, #0
   2ce60:	mvnne	r3, #-2147483648	; 0x80000000
   2ce64:	strne	r3, [sp, #4]
   2ce68:	beq	2cffc <__assert_fail@plt+0x1aa38>
   2ce6c:	mov	r1, r6
   2ce70:	ldr	r0, [sp, #4]
   2ce74:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2ce78:	mov	r4, r0
   2ce7c:	mov	r1, r6
   2ce80:	ldr	r0, [sp, #4]
   2ce84:	bl	41e94 <__assert_fail@plt+0x2f8d0>
   2ce88:	ldr	r3, [sp, #4]
   2ce8c:	sub	r1, r3, r1
   2ce90:	cmp	fp, #0
   2ce94:	moveq	r3, #0
   2ce98:	streq	r3, [sl]
   2ce9c:	sub	r3, r4, r5
   2cea0:	cmp	r3, r9
   2cea4:	bge	2cf2c <__assert_fail@plt+0x1a968>
   2cea8:	cmp	r9, #0
   2ceac:	blt	2d020 <__assert_fail@plt+0x1aa5c>
   2ceb0:	cmp	r5, #0
   2ceb4:	blt	2d034 <__assert_fail@plt+0x1aa70>
   2ceb8:	mvn	r3, #-2147483648	; 0x80000000
   2cebc:	sub	r3, r3, r9
   2cec0:	cmp	r5, r3
   2cec4:	movle	r3, #0
   2cec8:	movgt	r3, #1
   2cecc:	cmp	r3, #0
   2ced0:	bne	2d0dc <__assert_fail@plt+0x1ab18>
   2ced4:	add	r5, r5, r9
   2ced8:	mov	r4, r5
   2cedc:	cmp	r7, r5
   2cee0:	movge	r7, #0
   2cee4:	andlt	r7, r8, #1
   2cee8:	cmp	r7, #0
   2ceec:	bne	2d0dc <__assert_fail@plt+0x1ab18>
   2cef0:	cmp	r6, #0
   2cef4:	blt	2d048 <__assert_fail@plt+0x1aa84>
   2cef8:	cmp	r6, #0
   2cefc:	beq	2cf28 <__assert_fail@plt+0x1a964>
   2cf00:	cmp	r5, #0
   2cf04:	blt	2d0a4 <__assert_fail@plt+0x1aae0>
   2cf08:	mov	r1, r6
   2cf0c:	mvn	r0, #-2147483648	; 0x80000000
   2cf10:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2cf14:	cmp	r5, r0
   2cf18:	movle	r0, #0
   2cf1c:	movgt	r0, #1
   2cf20:	cmp	r0, #0
   2cf24:	bne	2d0dc <__assert_fail@plt+0x1ab18>
   2cf28:	mul	r1, r5, r6
   2cf2c:	mov	r0, fp
   2cf30:	bl	2cc48 <__assert_fail@plt+0x1a684>
   2cf34:	str	r4, [sl]
   2cf38:	add	sp, sp, #12
   2cf3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf40:	rsb	r3, r4, #-2147483648	; 0x80000000
   2cf44:	cmp	r5, r3
   2cf48:	movge	r3, #0
   2cf4c:	movlt	r3, #1
   2cf50:	b	2ce04 <__assert_fail@plt+0x1a840>
   2cf54:	rsb	r3, r5, #-2147483648	; 0x80000000
   2cf58:	cmp	r4, r3
   2cf5c:	movge	r3, #0
   2cf60:	movlt	r3, #1
   2cf64:	b	2ce04 <__assert_fail@plt+0x1a840>
   2cf68:	cmp	r4, #0
   2cf6c:	blt	2cf94 <__assert_fail@plt+0x1a9d0>
   2cf70:	cmn	r6, #1
   2cf74:	beq	2cfb0 <__assert_fail@plt+0x1a9ec>
   2cf78:	mov	r1, r6
   2cf7c:	mov	r0, #-2147483648	; 0x80000000
   2cf80:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2cf84:	cmp	r0, r4
   2cf88:	movge	r0, #0
   2cf8c:	movlt	r0, #1
   2cf90:	b	2ce5c <__assert_fail@plt+0x1a898>
   2cf94:	mov	r1, r6
   2cf98:	mvn	r0, #-2147483648	; 0x80000000
   2cf9c:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2cfa0:	cmp	r0, r4
   2cfa4:	movle	r0, #0
   2cfa8:	movgt	r0, #1
   2cfac:	b	2ce5c <__assert_fail@plt+0x1a898>
   2cfb0:	add	r0, r4, #-2147483648	; 0x80000000
   2cfb4:	cmp	r0, #0
   2cfb8:	movle	r0, #0
   2cfbc:	movgt	r0, #1
   2cfc0:	b	2ce5c <__assert_fail@plt+0x1a898>
   2cfc4:	cmn	r4, #1
   2cfc8:	beq	2cfe8 <__assert_fail@plt+0x1aa24>
   2cfcc:	mov	r1, r4
   2cfd0:	mov	r0, #-2147483648	; 0x80000000
   2cfd4:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2cfd8:	cmp	r6, r0
   2cfdc:	movle	r0, #0
   2cfe0:	movgt	r0, #1
   2cfe4:	b	2ce5c <__assert_fail@plt+0x1a898>
   2cfe8:	add	r0, r6, #-2147483648	; 0x80000000
   2cfec:	cmp	r0, #0
   2cff0:	movle	r0, #0
   2cff4:	movgt	r0, #1
   2cff8:	b	2ce5c <__assert_fail@plt+0x1a898>
   2cffc:	mul	r1, r6, r4
   2d000:	cmp	r1, #63	; 0x3f
   2d004:	movle	r3, #64	; 0x40
   2d008:	strle	r3, [sp, #4]
   2d00c:	bgt	2ce90 <__assert_fail@plt+0x1a8cc>
   2d010:	b	2ce6c <__assert_fail@plt+0x1a8a8>
   2d014:	mov	r3, #64	; 0x40
   2d018:	str	r3, [sp, #4]
   2d01c:	b	2ce6c <__assert_fail@plt+0x1a8a8>
   2d020:	rsb	r3, r9, #-2147483648	; 0x80000000
   2d024:	cmp	r5, r3
   2d028:	movge	r3, #0
   2d02c:	movlt	r3, #1
   2d030:	b	2cecc <__assert_fail@plt+0x1a908>
   2d034:	rsb	r3, r5, #-2147483648	; 0x80000000
   2d038:	cmp	r9, r3
   2d03c:	movge	r3, #0
   2d040:	movlt	r3, #1
   2d044:	b	2cecc <__assert_fail@plt+0x1a908>
   2d048:	cmp	r5, #0
   2d04c:	blt	2d074 <__assert_fail@plt+0x1aab0>
   2d050:	cmn	r6, #1
   2d054:	beq	2d090 <__assert_fail@plt+0x1aacc>
   2d058:	mov	r1, r6
   2d05c:	mov	r0, #-2147483648	; 0x80000000
   2d060:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2d064:	cmp	r5, r0
   2d068:	movle	r0, #0
   2d06c:	movgt	r0, #1
   2d070:	b	2cf20 <__assert_fail@plt+0x1a95c>
   2d074:	mov	r1, r6
   2d078:	mvn	r0, #-2147483648	; 0x80000000
   2d07c:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2d080:	cmp	r5, r0
   2d084:	movge	r0, #0
   2d088:	movlt	r0, #1
   2d08c:	b	2cf20 <__assert_fail@plt+0x1a95c>
   2d090:	add	r0, r5, #-2147483648	; 0x80000000
   2d094:	cmp	r0, #0
   2d098:	movle	r0, #0
   2d09c:	movgt	r0, #1
   2d0a0:	b	2cf20 <__assert_fail@plt+0x1a95c>
   2d0a4:	cmn	r5, #1
   2d0a8:	beq	2d0c8 <__assert_fail@plt+0x1ab04>
   2d0ac:	mov	r1, r5
   2d0b0:	mov	r0, #-2147483648	; 0x80000000
   2d0b4:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   2d0b8:	cmp	r6, r0
   2d0bc:	movle	r0, #0
   2d0c0:	movgt	r0, #1
   2d0c4:	b	2cf20 <__assert_fail@plt+0x1a95c>
   2d0c8:	add	r0, r6, #-2147483648	; 0x80000000
   2d0cc:	cmp	r0, #0
   2d0d0:	movle	r0, #0
   2d0d4:	movgt	r0, #1
   2d0d8:	b	2cf20 <__assert_fail@plt+0x1a95c>
   2d0dc:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2d0e0:	push	{r4, lr}
   2d0e4:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   2d0e8:	cmp	r0, #0
   2d0ec:	popne	{r4, pc}
   2d0f0:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2d0f4:	push	{r4, lr}
   2d0f8:	mov	r1, #1
   2d0fc:	bl	2d0e0 <__assert_fail@plt+0x1ab1c>
   2d100:	pop	{r4, pc}
   2d104:	push	{r4, lr}
   2d108:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   2d10c:	cmp	r0, #0
   2d110:	popne	{r4, pc}
   2d114:	bl	2d1b8 <__assert_fail@plt+0x1abf4>
   2d118:	push	{r4, lr}
   2d11c:	mov	r1, #1
   2d120:	bl	2d104 <__assert_fail@plt+0x1ab40>
   2d124:	pop	{r4, pc}
   2d128:	push	{r4, r5, r6, lr}
   2d12c:	mov	r5, r0
   2d130:	mov	r4, r1
   2d134:	mov	r0, r1
   2d138:	bl	2cc14 <__assert_fail@plt+0x1a650>
   2d13c:	mov	r2, r4
   2d140:	mov	r1, r5
   2d144:	bl	12000 <memcpy@plt>
   2d148:	pop	{r4, r5, r6, pc}
   2d14c:	push	{r4, r5, r6, lr}
   2d150:	mov	r5, r0
   2d154:	mov	r4, r1
   2d158:	mov	r0, r1
   2d15c:	bl	2cc28 <__assert_fail@plt+0x1a664>
   2d160:	mov	r2, r4
   2d164:	mov	r1, r5
   2d168:	bl	12000 <memcpy@plt>
   2d16c:	pop	{r4, r5, r6, pc}
   2d170:	push	{r4, r5, r6, lr}
   2d174:	mov	r5, r0
   2d178:	mov	r4, r1
   2d17c:	add	r0, r1, #1
   2d180:	bl	2cc28 <__assert_fail@plt+0x1a664>
   2d184:	mov	r2, #0
   2d188:	strb	r2, [r0, r4]
   2d18c:	mov	r2, r4
   2d190:	mov	r1, r5
   2d194:	bl	12000 <memcpy@plt>
   2d198:	pop	{r4, r5, r6, pc}
   2d19c:	push	{r4, lr}
   2d1a0:	mov	r4, r0
   2d1a4:	bl	122d0 <strlen@plt>
   2d1a8:	add	r1, r0, #1
   2d1ac:	mov	r0, r4
   2d1b0:	bl	2d128 <__assert_fail@plt+0x1ab64>
   2d1b4:	pop	{r4, pc}
   2d1b8:	push	{r4, lr}
   2d1bc:	ldr	r3, [pc, #40]	; 2d1ec <__assert_fail@plt+0x1ac28>
   2d1c0:	ldr	r4, [r3]
   2d1c4:	mov	r2, #5
   2d1c8:	ldr	r1, [pc, #32]	; 2d1f0 <__assert_fail@plt+0x1ac2c>
   2d1cc:	mov	r0, #0
   2d1d0:	bl	12084 <dcgettext@plt>
   2d1d4:	mov	r3, r0
   2d1d8:	ldr	r2, [pc, #20]	; 2d1f4 <__assert_fail@plt+0x1ac30>
   2d1dc:	mov	r1, #0
   2d1e0:	mov	r0, r4
   2d1e4:	bl	121bc <error@plt>
   2d1e8:	bl	12570 <abort@plt>
   2d1ec:	andeq	r9, r5, ip, ror #9
   2d1f0:	strheq	r8, [r4], -ip
   2d1f4:	andeq	r6, r4, r4, lsl #24
   2d1f8:	push	{r4, r5, r6, r7, r8, lr}
   2d1fc:	sub	sp, sp, #8
   2d200:	mov	r5, r0
   2d204:	mov	r4, r1
   2d208:	mov	r7, r2
   2d20c:	mov	r8, r3
   2d210:	bl	12318 <__errno_location@plt>
   2d214:	mov	r6, r0
   2d218:	mov	r3, #0
   2d21c:	str	r3, [r0]
   2d220:	add	r1, sp, #4
   2d224:	mov	r0, r5
   2d228:	blx	r8
   2d22c:	ldr	r3, [sp, #4]
   2d230:	cmp	r5, r3
   2d234:	beq	2d298 <__assert_fail@plt+0x1acd4>
   2d238:	cmp	r4, #0
   2d23c:	beq	2d274 <__assert_fail@plt+0x1acb0>
   2d240:	vcmp.f64	d0, #0.0
   2d244:	vmrs	APSR_nzcv, fpscr
   2d248:	moveq	r0, #1
   2d24c:	beq	2d264 <__assert_fail@plt+0x1aca0>
   2d250:	ldr	r0, [r6]
   2d254:	subs	r0, r0, #34	; 0x22
   2d258:	movne	r0, #1
   2d25c:	cmp	r4, #0
   2d260:	beq	2d268 <__assert_fail@plt+0x1aca4>
   2d264:	str	r3, [r4]
   2d268:	vstr	d0, [r7]
   2d26c:	add	sp, sp, #8
   2d270:	pop	{r4, r5, r6, r7, r8, pc}
   2d274:	ldrb	r2, [r3]
   2d278:	cmp	r2, #0
   2d27c:	movne	r0, #0
   2d280:	bne	2d268 <__assert_fail@plt+0x1aca4>
   2d284:	vcmp.f64	d0, #0.0
   2d288:	vmrs	APSR_nzcv, fpscr
   2d28c:	bne	2d250 <__assert_fail@plt+0x1ac8c>
   2d290:	mov	r0, #1
   2d294:	b	2d268 <__assert_fail@plt+0x1aca4>
   2d298:	mov	r0, #0
   2d29c:	b	2d25c <__assert_fail@plt+0x1ac98>
   2d2a0:	cmp	r2, #0
   2d2a4:	beq	2d304 <__assert_fail@plt+0x1ad40>
   2d2a8:	push	{r4, r5, r6, lr}
   2d2ac:	sub	r4, r2, #1
   2d2b0:	mov	r5, r0
   2d2b4:	mov	r6, r1
   2d2b8:	mvn	r0, #0
   2d2bc:	bl	41a68 <__assert_fail@plt+0x2f4a4>
   2d2c0:	mov	r2, r0
   2d2c4:	mov	r0, #0
   2d2c8:	mov	r1, r0
   2d2cc:	mvn	lr, #0
   2d2d0:	mov	ip, #1
   2d2d4:	ldr	r3, [r5]
   2d2d8:	cmp	r2, r3
   2d2dc:	strcc	lr, [r5]
   2d2e0:	movcc	r3, ip
   2d2e4:	mulcs	r3, r3, r6
   2d2e8:	strcs	r3, [r5]
   2d2ec:	movcs	r3, r1
   2d2f0:	orr	r0, r0, r3
   2d2f4:	sub	r4, r4, #1
   2d2f8:	cmn	r4, #1
   2d2fc:	bne	2d2d4 <__assert_fail@plt+0x1ad10>
   2d300:	pop	{r4, r5, r6, pc}
   2d304:	mov	r0, #0
   2d308:	bx	lr
   2d30c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d310:	sub	sp, sp, #12
   2d314:	cmp	r2, #36	; 0x24
   2d318:	bhi	2d358 <__assert_fail@plt+0x1ad94>
   2d31c:	mov	r5, r0
   2d320:	mov	r6, r1
   2d324:	mov	r7, r2
   2d328:	mov	r9, r3
   2d32c:	cmp	r1, #0
   2d330:	addeq	r6, sp, #4
   2d334:	bl	12318 <__errno_location@plt>
   2d338:	mov	r8, r0
   2d33c:	mov	r3, #0
   2d340:	str	r3, [r0]
   2d344:	ldrb	r4, [r5]
   2d348:	bl	12288 <__ctype_b_loc@plt>
   2d34c:	ldr	r1, [r0]
   2d350:	mov	r2, r5
   2d354:	b	2d370 <__assert_fail@plt+0x1adac>
   2d358:	ldr	r3, [pc, #1104]	; 2d7b0 <__assert_fail@plt+0x1b1ec>
   2d35c:	mov	r2, #84	; 0x54
   2d360:	ldr	r1, [pc, #1100]	; 2d7b4 <__assert_fail@plt+0x1b1f0>
   2d364:	ldr	r0, [pc, #1100]	; 2d7b8 <__assert_fail@plt+0x1b1f4>
   2d368:	bl	125c4 <__assert_fail@plt>
   2d36c:	ldrb	r4, [r2, #1]!
   2d370:	lsl	r3, r4, #1
   2d374:	ldrh	r3, [r1, r3]
   2d378:	tst	r3, #8192	; 0x2000
   2d37c:	bne	2d36c <__assert_fail@plt+0x1ada8>
   2d380:	cmp	r4, #45	; 0x2d
   2d384:	moveq	r4, #4
   2d388:	bne	2d398 <__assert_fail@plt+0x1add4>
   2d38c:	mov	r0, r4
   2d390:	add	sp, sp, #12
   2d394:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d398:	mov	r2, r7
   2d39c:	mov	r1, r6
   2d3a0:	mov	r0, r5
   2d3a4:	bl	122c4 <strtoul@plt>
   2d3a8:	str	r0, [sp]
   2d3ac:	ldr	r7, [r6]
   2d3b0:	cmp	r5, r7
   2d3b4:	beq	2d3d8 <__assert_fail@plt+0x1ae14>
   2d3b8:	ldr	r3, [r8]
   2d3bc:	cmp	r3, #0
   2d3c0:	beq	2d41c <__assert_fail@plt+0x1ae58>
   2d3c4:	cmp	r3, #34	; 0x22
   2d3c8:	moveq	r4, #1
   2d3cc:	beq	2d420 <__assert_fail@plt+0x1ae5c>
   2d3d0:	mov	r4, #4
   2d3d4:	b	2d38c <__assert_fail@plt+0x1adc8>
   2d3d8:	ldr	r3, [sp, #40]	; 0x28
   2d3dc:	cmp	r3, #0
   2d3e0:	moveq	r4, #4
   2d3e4:	beq	2d38c <__assert_fail@plt+0x1adc8>
   2d3e8:	ldrb	r1, [r7]
   2d3ec:	cmp	r1, #0
   2d3f0:	moveq	r4, #4
   2d3f4:	beq	2d38c <__assert_fail@plt+0x1adc8>
   2d3f8:	mov	r0, r3
   2d3fc:	bl	122dc <strchr@plt>
   2d400:	cmp	r0, #0
   2d404:	moveq	r4, #4
   2d408:	beq	2d38c <__assert_fail@plt+0x1adc8>
   2d40c:	mov	r3, #1
   2d410:	str	r3, [sp]
   2d414:	mov	r4, #0
   2d418:	b	2d430 <__assert_fail@plt+0x1ae6c>
   2d41c:	mov	r4, #0
   2d420:	ldr	r3, [sp, #40]	; 0x28
   2d424:	cmp	r3, #0
   2d428:	streq	r0, [r9]
   2d42c:	beq	2d38c <__assert_fail@plt+0x1adc8>
   2d430:	ldrb	r5, [r7]
   2d434:	cmp	r5, #0
   2d438:	beq	2d6c4 <__assert_fail@plt+0x1b100>
   2d43c:	mov	r1, r5
   2d440:	ldr	r0, [sp, #40]	; 0x28
   2d444:	bl	122dc <strchr@plt>
   2d448:	cmp	r0, #0
   2d44c:	beq	2d520 <__assert_fail@plt+0x1af5c>
   2d450:	sub	r3, r5, #69	; 0x45
   2d454:	cmp	r3, #47	; 0x2f
   2d458:	ldrls	pc, [pc, r3, lsl #2]
   2d45c:	b	2d58c <__assert_fail@plt+0x1afc8>
   2d460:	andeq	sp, r2, r0, lsr r5
   2d464:	andeq	sp, r2, ip, lsl #11
   2d468:	andeq	sp, r2, r0, lsr r5
   2d46c:	andeq	sp, r2, ip, lsl #11
   2d470:	andeq	sp, r2, ip, lsl #11
   2d474:	andeq	sp, r2, ip, lsl #11
   2d478:	andeq	sp, r2, r0, lsr r5
   2d47c:	andeq	sp, r2, ip, lsl #11
   2d480:	andeq	sp, r2, r0, lsr r5
   2d484:	andeq	sp, r2, ip, lsl #11
   2d488:	andeq	sp, r2, ip, lsl #11
   2d48c:	andeq	sp, r2, r0, lsr r5
   2d490:	andeq	sp, r2, ip, lsl #11
   2d494:	andeq	sp, r2, ip, lsl #11
   2d498:	andeq	sp, r2, ip, lsl #11
   2d49c:	andeq	sp, r2, r0, lsr r5
   2d4a0:	andeq	sp, r2, ip, lsl #11
   2d4a4:	andeq	sp, r2, ip, lsl #11
   2d4a8:	andeq	sp, r2, ip, lsl #11
   2d4ac:	andeq	sp, r2, ip, lsl #11
   2d4b0:	andeq	sp, r2, r0, lsr r5
   2d4b4:	andeq	sp, r2, r0, lsr r5
   2d4b8:	andeq	sp, r2, ip, lsl #11
   2d4bc:	andeq	sp, r2, ip, lsl #11
   2d4c0:	andeq	sp, r2, ip, lsl #11
   2d4c4:	andeq	sp, r2, ip, lsl #11
   2d4c8:	andeq	sp, r2, ip, lsl #11
   2d4cc:	andeq	sp, r2, ip, lsl #11
   2d4d0:	andeq	sp, r2, ip, lsl #11
   2d4d4:	andeq	sp, r2, ip, lsl #11
   2d4d8:	andeq	sp, r2, ip, lsl #11
   2d4dc:	andeq	sp, r2, ip, lsl #11
   2d4e0:	andeq	sp, r2, ip, lsl #11
   2d4e4:	andeq	sp, r2, ip, lsl #11
   2d4e8:	andeq	sp, r2, r0, lsr r5
   2d4ec:	andeq	sp, r2, ip, lsl #11
   2d4f0:	andeq	sp, r2, ip, lsl #11
   2d4f4:	andeq	sp, r2, ip, lsl #11
   2d4f8:	andeq	sp, r2, r0, lsr r5
   2d4fc:	andeq	sp, r2, ip, lsl #11
   2d500:	andeq	sp, r2, r0, lsr r5
   2d504:	andeq	sp, r2, ip, lsl #11
   2d508:	andeq	sp, r2, ip, lsl #11
   2d50c:	andeq	sp, r2, ip, lsl #11
   2d510:	andeq	sp, r2, ip, lsl #11
   2d514:	andeq	sp, r2, ip, lsl #11
   2d518:	andeq	sp, r2, ip, lsl #11
   2d51c:	andeq	sp, r2, r0, lsr r5
   2d520:	ldr	r3, [sp]
   2d524:	str	r3, [r9]
   2d528:	orr	r4, r4, #2
   2d52c:	b	2d38c <__assert_fail@plt+0x1adc8>
   2d530:	mov	r1, #48	; 0x30
   2d534:	ldr	r0, [sp, #40]	; 0x28
   2d538:	bl	122dc <strchr@plt>
   2d53c:	cmp	r0, #0
   2d540:	beq	2d67c <__assert_fail@plt+0x1b0b8>
   2d544:	ldrb	r3, [r7, #1]
   2d548:	cmp	r3, #68	; 0x44
   2d54c:	beq	2d568 <__assert_fail@plt+0x1afa4>
   2d550:	cmp	r3, #105	; 0x69
   2d554:	beq	2d574 <__assert_fail@plt+0x1afb0>
   2d558:	cmp	r3, #66	; 0x42
   2d55c:	movne	r7, #1
   2d560:	movne	r1, #1024	; 0x400
   2d564:	bne	2d594 <__assert_fail@plt+0x1afd0>
   2d568:	mov	r7, #2
   2d56c:	mov	r1, #1000	; 0x3e8
   2d570:	b	2d594 <__assert_fail@plt+0x1afd0>
   2d574:	ldrb	r7, [r7, #2]
   2d578:	cmp	r7, #66	; 0x42
   2d57c:	movne	r7, #1
   2d580:	moveq	r7, #3
   2d584:	mov	r1, #1024	; 0x400
   2d588:	b	2d594 <__assert_fail@plt+0x1afd0>
   2d58c:	mov	r7, #1
   2d590:	mov	r1, #1024	; 0x400
   2d594:	sub	r5, r5, #66	; 0x42
   2d598:	cmp	r5, #53	; 0x35
   2d59c:	ldrls	pc, [pc, r5, lsl #2]
   2d5a0:	b	2d798 <__assert_fail@plt+0x1b1d4>
   2d5a4:	ldrdeq	sp, [r2], -r0
   2d5a8:	muleq	r2, r8, r7
   2d5ac:	muleq	r2, r8, r7
   2d5b0:	strdeq	sp, [r2], -r4
   2d5b4:	muleq	r2, r8, r7
   2d5b8:	andeq	sp, r2, r4, lsl #14
   2d5bc:	muleq	r2, r8, r7
   2d5c0:	muleq	r2, r8, r7
   2d5c4:	muleq	r2, r8, r7
   2d5c8:	andeq	sp, r2, r4, lsl r7
   2d5cc:	muleq	r2, r8, r7
   2d5d0:	andeq	sp, r2, r4, lsr #14
   2d5d4:	muleq	r2, r8, r7
   2d5d8:	muleq	r2, r8, r7
   2d5dc:	andeq	sp, r2, r4, lsr r7
   2d5e0:	muleq	r2, r8, r7
   2d5e4:	muleq	r2, r8, r7
   2d5e8:	muleq	r2, r8, r7
   2d5ec:	andeq	sp, r2, r4, asr #14
   2d5f0:	muleq	r2, r8, r7
   2d5f4:	muleq	r2, r8, r7
   2d5f8:	muleq	r2, r8, r7
   2d5fc:	muleq	r2, r8, r7
   2d600:	andeq	sp, r2, r8, ror r7
   2d604:	andeq	sp, r2, r8, lsl #15
   2d608:	muleq	r2, r8, r7
   2d60c:	muleq	r2, r8, r7
   2d610:	muleq	r2, r8, r7
   2d614:	muleq	r2, r8, r7
   2d618:	muleq	r2, r8, r7
   2d61c:	muleq	r2, r8, r7
   2d620:	muleq	r2, r8, r7
   2d624:	andeq	sp, r2, r8, lsl #13
   2d628:	andeq	sp, r2, r8, lsr #15
   2d62c:	muleq	r2, r8, r7
   2d630:	muleq	r2, r8, r7
   2d634:	muleq	r2, r8, r7
   2d638:	andeq	sp, r2, r4, lsl #14
   2d63c:	muleq	r2, r8, r7
   2d640:	muleq	r2, r8, r7
   2d644:	muleq	r2, r8, r7
   2d648:	andeq	sp, r2, r4, lsl r7
   2d64c:	muleq	r2, r8, r7
   2d650:	andeq	sp, r2, r4, lsr #14
   2d654:	muleq	r2, r8, r7
   2d658:	muleq	r2, r8, r7
   2d65c:	muleq	r2, r8, r7
   2d660:	muleq	r2, r8, r7
   2d664:	muleq	r2, r8, r7
   2d668:	muleq	r2, r8, r7
   2d66c:	andeq	sp, r2, r4, asr #14
   2d670:	muleq	r2, r8, r7
   2d674:	muleq	r2, r8, r7
   2d678:	andeq	sp, r2, r4, asr r7
   2d67c:	mov	r7, #1
   2d680:	mov	r1, #1024	; 0x400
   2d684:	b	2d594 <__assert_fail@plt+0x1afd0>
   2d688:	ldr	r3, [sp]
   2d68c:	cmp	r3, #8388608	; 0x800000
   2d690:	mvncs	r3, #0
   2d694:	strcs	r3, [sp]
   2d698:	movcs	r0, #1
   2d69c:	lslcc	r3, r3, #9
   2d6a0:	strcc	r3, [sp]
   2d6a4:	movcc	r0, #0
   2d6a8:	orr	r4, r4, r0
   2d6ac:	ldr	r3, [r6]
   2d6b0:	add	r2, r3, r7
   2d6b4:	str	r2, [r6]
   2d6b8:	ldrb	r3, [r3, r7]
   2d6bc:	cmp	r3, #0
   2d6c0:	orrne	r4, r4, #2
   2d6c4:	ldr	r3, [sp]
   2d6c8:	str	r3, [r9]
   2d6cc:	b	2d38c <__assert_fail@plt+0x1adc8>
   2d6d0:	ldr	r3, [sp]
   2d6d4:	cmp	r3, #4194304	; 0x400000
   2d6d8:	mvncs	r3, #0
   2d6dc:	strcs	r3, [sp]
   2d6e0:	movcs	r0, #1
   2d6e4:	lslcc	r3, r3, #10
   2d6e8:	strcc	r3, [sp]
   2d6ec:	movcc	r0, #0
   2d6f0:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d6f4:	mov	r2, #6
   2d6f8:	mov	r0, sp
   2d6fc:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d700:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d704:	mov	r2, #3
   2d708:	mov	r0, sp
   2d70c:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d710:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d714:	mov	r2, #1
   2d718:	mov	r0, sp
   2d71c:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d720:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d724:	mov	r2, #2
   2d728:	mov	r0, sp
   2d72c:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d730:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d734:	mov	r2, #5
   2d738:	mov	r0, sp
   2d73c:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d740:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d744:	mov	r2, #4
   2d748:	mov	r0, sp
   2d74c:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d750:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d754:	ldr	r3, [sp]
   2d758:	cmp	r3, #0
   2d75c:	mvnlt	r3, #0
   2d760:	strlt	r3, [sp]
   2d764:	movlt	r0, #1
   2d768:	lslge	r3, r3, #1
   2d76c:	strge	r3, [sp]
   2d770:	movge	r0, #0
   2d774:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d778:	mov	r2, #8
   2d77c:	mov	r0, sp
   2d780:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d784:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d788:	mov	r2, #7
   2d78c:	mov	r0, sp
   2d790:	bl	2d2a0 <__assert_fail@plt+0x1acdc>
   2d794:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d798:	ldr	r3, [sp]
   2d79c:	str	r3, [r9]
   2d7a0:	orr	r4, r4, #2
   2d7a4:	b	2d38c <__assert_fail@plt+0x1adc8>
   2d7a8:	mov	r0, #0
   2d7ac:	b	2d6a8 <__assert_fail@plt+0x1b0e4>
   2d7b0:	ldrdeq	r8, [r4], -r0
   2d7b4:	ldrdeq	r8, [r4], -ip
   2d7b8:	andeq	r8, r4, r8, ror #1
   2d7bc:	cmp	r2, #0
   2d7c0:	beq	2d854 <__assert_fail@plt+0x1b290>
   2d7c4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7c8:	sub	r4, r2, #1
   2d7cc:	mov	r5, r0
   2d7d0:	mov	r6, r1
   2d7d4:	asr	r7, r1, #31
   2d7d8:	mov	r2, r1
   2d7dc:	mov	r3, r7
   2d7e0:	mvn	r0, #0
   2d7e4:	mvn	r1, #0
   2d7e8:	bl	42340 <__assert_fail@plt+0x2fd7c>
   2d7ec:	mov	r8, r0
   2d7f0:	mov	r9, r1
   2d7f4:	mov	r0, #0
   2d7f8:	mov	r1, r0
   2d7fc:	mvn	sl, #0
   2d800:	mvn	fp, #0
   2d804:	mov	lr, #1
   2d808:	b	2d824 <__assert_fail@plt+0x1b260>
   2d80c:	strd	sl, [r5]
   2d810:	mov	r3, lr
   2d814:	orr	r0, r0, r3
   2d818:	sub	r4, r4, #1
   2d81c:	cmn	r4, #1
   2d820:	beq	2d850 <__assert_fail@plt+0x1b28c>
   2d824:	ldrd	r2, [r5]
   2d828:	cmp	r9, r3
   2d82c:	cmpeq	r8, r2
   2d830:	bcc	2d80c <__assert_fail@plt+0x1b248>
   2d834:	mul	ip, r6, r3
   2d838:	mla	ip, r2, r7, ip
   2d83c:	umull	r2, r3, r6, r2
   2d840:	add	r3, ip, r3
   2d844:	strd	r2, [r5]
   2d848:	mov	r3, r1
   2d84c:	b	2d814 <__assert_fail@plt+0x1b250>
   2d850:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d854:	mov	r0, #0
   2d858:	bx	lr
   2d85c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d860:	sub	sp, sp, #20
   2d864:	cmp	r2, #36	; 0x24
   2d868:	bhi	2d8a8 <__assert_fail@plt+0x1b2e4>
   2d86c:	mov	r5, r0
   2d870:	mov	r6, r1
   2d874:	mov	r7, r2
   2d878:	mov	r9, r3
   2d87c:	cmp	r1, #0
   2d880:	addeq	r6, sp, #12
   2d884:	bl	12318 <__errno_location@plt>
   2d888:	mov	r8, r0
   2d88c:	mov	r3, #0
   2d890:	str	r3, [r0]
   2d894:	ldrb	r4, [r5]
   2d898:	bl	12288 <__ctype_b_loc@plt>
   2d89c:	ldr	r1, [r0]
   2d8a0:	mov	r2, r5
   2d8a4:	b	2d8c0 <__assert_fail@plt+0x1b2fc>
   2d8a8:	ldr	r3, [pc, #1208]	; 2dd68 <__assert_fail@plt+0x1b7a4>
   2d8ac:	mov	r2, #84	; 0x54
   2d8b0:	ldr	r1, [pc, #1204]	; 2dd6c <__assert_fail@plt+0x1b7a8>
   2d8b4:	ldr	r0, [pc, #1204]	; 2dd70 <__assert_fail@plt+0x1b7ac>
   2d8b8:	bl	125c4 <__assert_fail@plt>
   2d8bc:	ldrb	r4, [r2, #1]!
   2d8c0:	lsl	r3, r4, #1
   2d8c4:	ldrh	r3, [r1, r3]
   2d8c8:	tst	r3, #8192	; 0x2000
   2d8cc:	bne	2d8bc <__assert_fail@plt+0x1b2f8>
   2d8d0:	cmp	r4, #45	; 0x2d
   2d8d4:	moveq	r4, #4
   2d8d8:	bne	2d8e8 <__assert_fail@plt+0x1b324>
   2d8dc:	mov	r0, r4
   2d8e0:	add	sp, sp, #20
   2d8e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d8e8:	mov	r3, #0
   2d8ec:	mov	r2, r7
   2d8f0:	mov	r1, r6
   2d8f4:	mov	r0, r5
   2d8f8:	bl	12024 <__strtoull_internal@plt>
   2d8fc:	strd	r0, [sp]
   2d900:	ldr	r7, [r6]
   2d904:	cmp	r5, r7
   2d908:	beq	2d92c <__assert_fail@plt+0x1b368>
   2d90c:	ldr	r3, [r8]
   2d910:	cmp	r3, #0
   2d914:	beq	2d974 <__assert_fail@plt+0x1b3b0>
   2d918:	cmp	r3, #34	; 0x22
   2d91c:	moveq	r4, #1
   2d920:	beq	2d978 <__assert_fail@plt+0x1b3b4>
   2d924:	mov	r4, #4
   2d928:	b	2d8dc <__assert_fail@plt+0x1b318>
   2d92c:	ldr	r3, [sp, #48]	; 0x30
   2d930:	cmp	r3, #0
   2d934:	moveq	r4, #4
   2d938:	beq	2d8dc <__assert_fail@plt+0x1b318>
   2d93c:	ldrb	r1, [r7]
   2d940:	cmp	r1, #0
   2d944:	moveq	r4, #4
   2d948:	beq	2d8dc <__assert_fail@plt+0x1b318>
   2d94c:	mov	r0, r3
   2d950:	bl	122dc <strchr@plt>
   2d954:	cmp	r0, #0
   2d958:	moveq	r4, #4
   2d95c:	beq	2d8dc <__assert_fail@plt+0x1b318>
   2d960:	mov	r2, #1
   2d964:	mov	r3, #0
   2d968:	strd	r2, [sp]
   2d96c:	mov	r4, #0
   2d970:	b	2d984 <__assert_fail@plt+0x1b3c0>
   2d974:	mov	r4, #0
   2d978:	ldr	r3, [sp, #48]	; 0x30
   2d97c:	cmp	r3, #0
   2d980:	beq	2da74 <__assert_fail@plt+0x1b4b0>
   2d984:	ldrb	r5, [r7]
   2d988:	cmp	r5, #0
   2d98c:	beq	2dc9c <__assert_fail@plt+0x1b6d8>
   2d990:	mov	r1, r5
   2d994:	ldr	r0, [sp, #48]	; 0x30
   2d998:	bl	122dc <strchr@plt>
   2d99c:	cmp	r0, #0
   2d9a0:	beq	2da7c <__assert_fail@plt+0x1b4b8>
   2d9a4:	sub	r3, r5, #69	; 0x45
   2d9a8:	cmp	r3, #47	; 0x2f
   2d9ac:	ldrls	pc, [pc, r3, lsl #2]
   2d9b0:	b	2dae8 <__assert_fail@plt+0x1b524>
   2d9b4:	andeq	sp, r2, ip, lsl #21
   2d9b8:	andeq	sp, r2, r8, ror #21
   2d9bc:	andeq	sp, r2, ip, lsl #21
   2d9c0:	andeq	sp, r2, r8, ror #21
   2d9c4:	andeq	sp, r2, r8, ror #21
   2d9c8:	andeq	sp, r2, r8, ror #21
   2d9cc:	andeq	sp, r2, ip, lsl #21
   2d9d0:	andeq	sp, r2, r8, ror #21
   2d9d4:	andeq	sp, r2, ip, lsl #21
   2d9d8:	andeq	sp, r2, r8, ror #21
   2d9dc:	andeq	sp, r2, r8, ror #21
   2d9e0:	andeq	sp, r2, ip, lsl #21
   2d9e4:	andeq	sp, r2, r8, ror #21
   2d9e8:	andeq	sp, r2, r8, ror #21
   2d9ec:	andeq	sp, r2, r8, ror #21
   2d9f0:	andeq	sp, r2, ip, lsl #21
   2d9f4:	andeq	sp, r2, r8, ror #21
   2d9f8:	andeq	sp, r2, r8, ror #21
   2d9fc:	andeq	sp, r2, r8, ror #21
   2da00:	andeq	sp, r2, r8, ror #21
   2da04:	andeq	sp, r2, ip, lsl #21
   2da08:	andeq	sp, r2, ip, lsl #21
   2da0c:	andeq	sp, r2, r8, ror #21
   2da10:	andeq	sp, r2, r8, ror #21
   2da14:	andeq	sp, r2, r8, ror #21
   2da18:	andeq	sp, r2, r8, ror #21
   2da1c:	andeq	sp, r2, r8, ror #21
   2da20:	andeq	sp, r2, r8, ror #21
   2da24:	andeq	sp, r2, r8, ror #21
   2da28:	andeq	sp, r2, r8, ror #21
   2da2c:	andeq	sp, r2, r8, ror #21
   2da30:	andeq	sp, r2, r8, ror #21
   2da34:	andeq	sp, r2, r8, ror #21
   2da38:	andeq	sp, r2, r8, ror #21
   2da3c:	andeq	sp, r2, ip, lsl #21
   2da40:	andeq	sp, r2, r8, ror #21
   2da44:	andeq	sp, r2, r8, ror #21
   2da48:	andeq	sp, r2, r8, ror #21
   2da4c:	andeq	sp, r2, ip, lsl #21
   2da50:	andeq	sp, r2, r8, ror #21
   2da54:	andeq	sp, r2, ip, lsl #21
   2da58:	andeq	sp, r2, r8, ror #21
   2da5c:	andeq	sp, r2, r8, ror #21
   2da60:	andeq	sp, r2, r8, ror #21
   2da64:	andeq	sp, r2, r8, ror #21
   2da68:	andeq	sp, r2, r8, ror #21
   2da6c:	andeq	sp, r2, r8, ror #21
   2da70:	andeq	sp, r2, ip, lsl #21
   2da74:	strd	r0, [r9]
   2da78:	b	2d8dc <__assert_fail@plt+0x1b318>
   2da7c:	ldrd	r2, [sp]
   2da80:	strd	r2, [r9]
   2da84:	orr	r4, r4, #2
   2da88:	b	2d8dc <__assert_fail@plt+0x1b318>
   2da8c:	mov	r1, #48	; 0x30
   2da90:	ldr	r0, [sp, #48]	; 0x30
   2da94:	bl	122dc <strchr@plt>
   2da98:	cmp	r0, #0
   2da9c:	beq	2dbd8 <__assert_fail@plt+0x1b614>
   2daa0:	ldrb	r3, [r7, #1]
   2daa4:	cmp	r3, #68	; 0x44
   2daa8:	beq	2dac4 <__assert_fail@plt+0x1b500>
   2daac:	cmp	r3, #105	; 0x69
   2dab0:	beq	2dad0 <__assert_fail@plt+0x1b50c>
   2dab4:	cmp	r3, #66	; 0x42
   2dab8:	movne	r7, #1
   2dabc:	movne	r1, #1024	; 0x400
   2dac0:	bne	2daf0 <__assert_fail@plt+0x1b52c>
   2dac4:	mov	r7, #2
   2dac8:	mov	r1, #1000	; 0x3e8
   2dacc:	b	2daf0 <__assert_fail@plt+0x1b52c>
   2dad0:	ldrb	r7, [r7, #2]
   2dad4:	cmp	r7, #66	; 0x42
   2dad8:	movne	r7, #1
   2dadc:	moveq	r7, #3
   2dae0:	mov	r1, #1024	; 0x400
   2dae4:	b	2daf0 <__assert_fail@plt+0x1b52c>
   2dae8:	mov	r7, #1
   2daec:	mov	r1, #1024	; 0x400
   2daf0:	sub	r5, r5, #66	; 0x42
   2daf4:	cmp	r5, #53	; 0x35
   2daf8:	ldrls	pc, [pc, r5, lsl #2]
   2dafc:	b	2dd50 <__assert_fail@plt+0x1b78c>
   2db00:	andeq	sp, r2, ip, lsr #24
   2db04:	andeq	sp, r2, r0, asr sp
   2db08:	andeq	sp, r2, r0, asr sp
   2db0c:	andeq	sp, r2, r4, ror ip
   2db10:	andeq	sp, r2, r0, asr sp
   2db14:	andeq	sp, r2, r8, lsr #25
   2db18:	andeq	sp, r2, r0, asr sp
   2db1c:	andeq	sp, r2, r0, asr sp
   2db20:	andeq	sp, r2, r0, asr sp
   2db24:			; <UNDEFINED> instruction: 0x0002dcb8
   2db28:	andeq	sp, r2, r0, asr sp
   2db2c:	andeq	sp, r2, r8, asr #25
   2db30:	andeq	sp, r2, r0, asr sp
   2db34:	andeq	sp, r2, r0, asr sp
   2db38:	ldrdeq	sp, [r2], -r8
   2db3c:	andeq	sp, r2, r0, asr sp
   2db40:	andeq	sp, r2, r0, asr sp
   2db44:	andeq	sp, r2, r0, asr sp
   2db48:	andeq	sp, r2, r8, ror #25
   2db4c:	andeq	sp, r2, r0, asr sp
   2db50:	andeq	sp, r2, r0, asr sp
   2db54:	andeq	sp, r2, r0, asr sp
   2db58:	andeq	sp, r2, r0, asr sp
   2db5c:	andeq	sp, r2, r0, lsr sp
   2db60:	andeq	sp, r2, r0, asr #26
   2db64:	andeq	sp, r2, r0, asr sp
   2db68:	andeq	sp, r2, r0, asr sp
   2db6c:	andeq	sp, r2, r0, asr sp
   2db70:	andeq	sp, r2, r0, asr sp
   2db74:	andeq	sp, r2, r0, asr sp
   2db78:	andeq	sp, r2, r0, asr sp
   2db7c:	andeq	sp, r2, r0, asr sp
   2db80:	andeq	sp, r2, r4, ror #23
   2db84:	andeq	sp, r2, r0, ror #26
   2db88:	andeq	sp, r2, r0, asr sp
   2db8c:	andeq	sp, r2, r0, asr sp
   2db90:	andeq	sp, r2, r0, asr sp
   2db94:	andeq	sp, r2, r8, lsr #25
   2db98:	andeq	sp, r2, r0, asr sp
   2db9c:	andeq	sp, r2, r0, asr sp
   2dba0:	andeq	sp, r2, r0, asr sp
   2dba4:			; <UNDEFINED> instruction: 0x0002dcb8
   2dba8:	andeq	sp, r2, r0, asr sp
   2dbac:	andeq	sp, r2, r8, asr #25
   2dbb0:	andeq	sp, r2, r0, asr sp
   2dbb4:	andeq	sp, r2, r0, asr sp
   2dbb8:	andeq	sp, r2, r0, asr sp
   2dbbc:	andeq	sp, r2, r0, asr sp
   2dbc0:	andeq	sp, r2, r0, asr sp
   2dbc4:	andeq	sp, r2, r0, asr sp
   2dbc8:	andeq	sp, r2, r8, ror #25
   2dbcc:	andeq	sp, r2, r0, asr sp
   2dbd0:	andeq	sp, r2, r0, asr sp
   2dbd4:	strdeq	sp, [r2], -r8
   2dbd8:	mov	r7, #1
   2dbdc:	mov	r1, #1024	; 0x400
   2dbe0:	b	2daf0 <__assert_fail@plt+0x1b52c>
   2dbe4:	ldrd	r2, [sp]
   2dbe8:	mvn	r0, #0
   2dbec:	ldr	r1, [pc, #384]	; 2dd74 <__assert_fail@plt+0x1b7b0>
   2dbf0:	cmp	r3, r1
   2dbf4:	cmpeq	r2, r0
   2dbf8:	bhi	2dc18 <__assert_fail@plt+0x1b654>
   2dbfc:	lsl	r3, r3, #9
   2dc00:	orr	r3, r3, r2, lsr #23
   2dc04:	lsl	r2, r2, #9
   2dc08:	str	r2, [sp]
   2dc0c:	str	r3, [sp, #4]
   2dc10:	mov	r0, #0
   2dc14:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dc18:	mvn	r2, #0
   2dc1c:	mvn	r3, #0
   2dc20:	strd	r2, [sp]
   2dc24:	mov	r0, #1
   2dc28:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dc2c:	ldrd	r2, [sp]
   2dc30:	mvn	r0, #0
   2dc34:	ldr	r1, [pc, #316]	; 2dd78 <__assert_fail@plt+0x1b7b4>
   2dc38:	cmp	r3, r1
   2dc3c:	cmpeq	r2, r0
   2dc40:	bhi	2dc60 <__assert_fail@plt+0x1b69c>
   2dc44:	lsl	r3, r3, #10
   2dc48:	orr	r3, r3, r2, lsr #22
   2dc4c:	lsl	r2, r2, #10
   2dc50:	str	r2, [sp]
   2dc54:	str	r3, [sp, #4]
   2dc58:	mov	r0, #0
   2dc5c:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dc60:	mvn	r2, #0
   2dc64:	mvn	r3, #0
   2dc68:	strd	r2, [sp]
   2dc6c:	mov	r0, #1
   2dc70:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dc74:	mov	r2, #6
   2dc78:	mov	r0, sp
   2dc7c:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dc80:	orr	r4, r4, r0
   2dc84:	ldr	r3, [r6]
   2dc88:	add	r2, r3, r7
   2dc8c:	str	r2, [r6]
   2dc90:	ldrb	r3, [r3, r7]
   2dc94:	cmp	r3, #0
   2dc98:	orrne	r4, r4, #2
   2dc9c:	ldrd	r2, [sp]
   2dca0:	strd	r2, [r9]
   2dca4:	b	2d8dc <__assert_fail@plt+0x1b318>
   2dca8:	mov	r2, #3
   2dcac:	mov	r0, sp
   2dcb0:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dcb4:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dcb8:	mov	r2, #1
   2dcbc:	mov	r0, sp
   2dcc0:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dcc4:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dcc8:	mov	r2, #2
   2dccc:	mov	r0, sp
   2dcd0:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dcd4:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dcd8:	mov	r2, #5
   2dcdc:	mov	r0, sp
   2dce0:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dce4:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dce8:	mov	r2, #4
   2dcec:	mov	r0, sp
   2dcf0:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dcf4:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dcf8:	ldrd	r2, [sp]
   2dcfc:	cmp	r2, #0
   2dd00:	sbcs	r1, r3, #0
   2dd04:	blt	2dd1c <__assert_fail@plt+0x1b758>
   2dd08:	adds	r2, r2, r2
   2dd0c:	adc	r3, r3, r3
   2dd10:	strd	r2, [sp]
   2dd14:	mov	r0, #0
   2dd18:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dd1c:	mvn	r2, #0
   2dd20:	mvn	r3, #0
   2dd24:	strd	r2, [sp]
   2dd28:	mov	r0, #1
   2dd2c:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dd30:	mov	r2, #8
   2dd34:	mov	r0, sp
   2dd38:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dd3c:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dd40:	mov	r2, #7
   2dd44:	mov	r0, sp
   2dd48:	bl	2d7bc <__assert_fail@plt+0x1b1f8>
   2dd4c:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dd50:	ldrd	r2, [sp]
   2dd54:	strd	r2, [r9]
   2dd58:	orr	r4, r4, #2
   2dd5c:	b	2d8dc <__assert_fail@plt+0x1b318>
   2dd60:	mov	r0, #0
   2dd64:	b	2dc80 <__assert_fail@plt+0x1b6bc>
   2dd68:	andeq	r8, r4, r0, lsl r1
   2dd6c:	ldrdeq	r8, [r4], -ip
   2dd70:	andeq	r8, r4, r8, ror #1
   2dd74:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   2dd78:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   2dd7c:	push	{r4, lr}
   2dd80:	sub	sp, sp, #8
   2dd84:	mov	r3, #0
   2dd88:	str	r3, [sp, #4]
   2dd8c:	add	r1, sp, #8
   2dd90:	str	r3, [r1, #-8]!
   2dd94:	ldr	r3, [pc, #88]	; 2ddf4 <__assert_fail@plt+0x1b830>
   2dd98:	ldr	r3, [r3]
   2dd9c:	mov	r2, #10
   2dda0:	add	r0, sp, #4
   2dda4:	bl	11eec <__getdelim@plt>
   2dda8:	cmp	r0, #0
   2ddac:	movle	r4, #0
   2ddb0:	ble	2dde0 <__assert_fail@plt+0x1b81c>
   2ddb4:	sub	r0, r0, #1
   2ddb8:	ldr	r3, [sp, #4]
   2ddbc:	ldrb	r2, [r3, r0]
   2ddc0:	cmp	r2, #10
   2ddc4:	moveq	r2, #0
   2ddc8:	strbeq	r2, [r3, r0]
   2ddcc:	ldr	r0, [sp, #4]
   2ddd0:	bl	12408 <rpmatch@plt>
   2ddd4:	cmp	r0, #0
   2ddd8:	movle	r4, #0
   2dddc:	movgt	r4, #1
   2dde0:	ldr	r0, [sp, #4]
   2dde4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2dde8:	mov	r0, r4
   2ddec:	add	sp, sp, #8
   2ddf0:	pop	{r4, pc}
   2ddf4:	andeq	r9, r5, r0, asr r5
   2ddf8:	push	{r4, lr}
   2ddfc:	mov	r2, r0
   2de00:	mov	r3, r1
   2de04:	cmp	r1, #0
   2de08:	cmpne	r0, #0
   2de0c:	moveq	r3, #1
   2de10:	moveq	r2, r3
   2de14:	umull	r0, r1, r2, r3
   2de18:	cmp	r0, #0
   2de1c:	cmpge	r1, #0
   2de20:	bne	2de34 <__assert_fail@plt+0x1b870>
   2de24:	mov	r1, r3
   2de28:	mov	r0, r2
   2de2c:	bl	11ea4 <calloc@plt>
   2de30:	pop	{r4, pc}
   2de34:	bl	12318 <__errno_location@plt>
   2de38:	mov	r3, #12
   2de3c:	str	r3, [r0]
   2de40:	mov	r0, #0
   2de44:	pop	{r4, pc}
   2de48:	ldr	r0, [r0]
   2de4c:	cmp	r0, #0
   2de50:	bxlt	lr
   2de54:	push	{r4, lr}
   2de58:	bl	1257c <close@plt>
   2de5c:	cmp	r0, #0
   2de60:	popeq	{r4, pc}
   2de64:	ldr	r3, [pc, #12]	; 2de78 <__assert_fail@plt+0x1b8b4>
   2de68:	mov	r2, #64	; 0x40
   2de6c:	ldr	r1, [pc, #8]	; 2de7c <__assert_fail@plt+0x1b8b8>
   2de70:	ldr	r0, [pc, #8]	; 2de80 <__assert_fail@plt+0x1b8bc>
   2de74:	bl	125c4 <__assert_fail@plt>
   2de78:	andeq	r8, r4, ip, lsl r1
   2de7c:	andeq	r8, r4, r4, lsr r1
   2de80:	andeq	r8, r4, r4, asr #2
   2de84:	push	{r4, r5, r6, lr}
   2de88:	mov	r4, r0
   2de8c:	mov	r2, #18688	; 0x4900
   2de90:	ldr	r0, [r0]
   2de94:	bl	122f4 <openat64@plt>
   2de98:	subs	r5, r0, #0
   2de9c:	blt	2deb4 <__assert_fail@plt+0x1b8f0>
   2dea0:	mov	r0, r4
   2dea4:	bl	2de48 <__assert_fail@plt+0x1b884>
   2dea8:	str	r5, [r4]
   2deac:	mov	r0, #0
   2deb0:	pop	{r4, r5, r6, pc}
   2deb4:	mvn	r0, #0
   2deb8:	pop	{r4, r5, r6, pc}
   2debc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dec0:	sub	sp, sp, #20
   2dec4:	mov	r5, r0
   2dec8:	bl	120f0 <chdir@plt>
   2decc:	subs	r4, r0, #0
   2ded0:	beq	2dee8 <__assert_fail@plt+0x1b924>
   2ded4:	bl	12318 <__errno_location@plt>
   2ded8:	mov	r9, r0
   2dedc:	ldr	r3, [r0]
   2dee0:	cmp	r3, #36	; 0x24
   2dee4:	beq	2def4 <__assert_fail@plt+0x1b930>
   2dee8:	mov	r0, r4
   2deec:	add	sp, sp, #20
   2def0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2def4:	mov	r0, r5
   2def8:	bl	122d0 <strlen@plt>
   2defc:	mvn	r3, #99	; 0x63
   2df00:	str	r3, [sp, #12]
   2df04:	subs	r6, r0, #0
   2df08:	beq	2e020 <__assert_fail@plt+0x1ba5c>
   2df0c:	cmp	r6, #4096	; 0x1000
   2df10:	bcc	2e034 <__assert_fail@plt+0x1ba70>
   2df14:	ldr	r1, [pc, #512]	; 2e11c <__assert_fail@plt+0x1bb58>
   2df18:	mov	r0, r5
   2df1c:	bl	125b8 <strspn@plt>
   2df20:	mov	r4, r0
   2df24:	cmp	r0, #2
   2df28:	beq	2e048 <__assert_fail@plt+0x1ba84>
   2df2c:	cmp	r0, #0
   2df30:	moveq	r4, r5
   2df34:	bne	2e0a8 <__assert_fail@plt+0x1bae4>
   2df38:	ldrb	r3, [r4]
   2df3c:	cmp	r3, #47	; 0x2f
   2df40:	beq	2e0c4 <__assert_fail@plt+0x1bb00>
   2df44:	add	r3, r5, r6
   2df48:	str	r3, [sp, #4]
   2df4c:	cmp	r4, r3
   2df50:	bhi	2e0d8 <__assert_fail@plt+0x1bb14>
   2df54:	mov	fp, r3
   2df58:	mov	r6, r4
   2df5c:	sub	r3, r3, r4
   2df60:	cmp	r3, #4096	; 0x1000
   2df64:	movge	r7, #47	; 0x2f
   2df68:	movge	sl, #0
   2df6c:	ldrge	r8, [pc, #428]	; 2e120 <__assert_fail@plt+0x1bb5c>
   2df70:	blt	2dfd8 <__assert_fail@plt+0x1ba14>
   2df74:	mov	r2, #4096	; 0x1000
   2df78:	mov	r1, r7
   2df7c:	mov	r0, r4
   2df80:	bl	12300 <memrchr@plt>
   2df84:	subs	r5, r0, #0
   2df88:	beq	2e0ec <__assert_fail@plt+0x1bb28>
   2df8c:	strb	sl, [r5]
   2df90:	sub	r6, r5, r6
   2df94:	cmp	r6, r8
   2df98:	bgt	2e0fc <__assert_fail@plt+0x1bb38>
   2df9c:	mov	r1, r4
   2dfa0:	add	r0, sp, #12
   2dfa4:	bl	2de84 <__assert_fail@plt+0x1b8c0>
   2dfa8:	strb	r7, [r5]
   2dfac:	cmp	r0, #0
   2dfb0:	bne	2e008 <__assert_fail@plt+0x1ba44>
   2dfb4:	add	r5, r5, #1
   2dfb8:	ldr	r1, [pc, #348]	; 2e11c <__assert_fail@plt+0x1bb58>
   2dfbc:	mov	r0, r5
   2dfc0:	bl	125b8 <strspn@plt>
   2dfc4:	add	r4, r5, r0
   2dfc8:	mov	r6, r4
   2dfcc:	sub	r3, fp, r4
   2dfd0:	cmp	r3, r8
   2dfd4:	bgt	2df74 <__assert_fail@plt+0x1b9b0>
   2dfd8:	ldr	r3, [sp, #4]
   2dfdc:	cmp	r3, r4
   2dfe0:	bls	2dff8 <__assert_fail@plt+0x1ba34>
   2dfe4:	mov	r1, r4
   2dfe8:	add	r0, sp, #12
   2dfec:	bl	2de84 <__assert_fail@plt+0x1b8c0>
   2dff0:	cmp	r0, #0
   2dff4:	bne	2e008 <__assert_fail@plt+0x1ba44>
   2dff8:	ldr	r0, [sp, #12]
   2dffc:	bl	124c8 <fchdir@plt>
   2e000:	subs	r4, r0, #0
   2e004:	beq	2e110 <__assert_fail@plt+0x1bb4c>
   2e008:	ldr	r4, [r9]
   2e00c:	add	r0, sp, #12
   2e010:	bl	2de48 <__assert_fail@plt+0x1b884>
   2e014:	str	r4, [r9]
   2e018:	mvn	r4, #0
   2e01c:	b	2dee8 <__assert_fail@plt+0x1b924>
   2e020:	ldr	r3, [pc, #252]	; 2e124 <__assert_fail@plt+0x1bb60>
   2e024:	mov	r2, #126	; 0x7e
   2e028:	ldr	r1, [pc, #248]	; 2e128 <__assert_fail@plt+0x1bb64>
   2e02c:	ldr	r0, [pc, #248]	; 2e12c <__assert_fail@plt+0x1bb68>
   2e030:	bl	125c4 <__assert_fail@plt>
   2e034:	ldr	r3, [pc, #232]	; 2e124 <__assert_fail@plt+0x1bb60>
   2e038:	mov	r2, #127	; 0x7f
   2e03c:	ldr	r1, [pc, #228]	; 2e128 <__assert_fail@plt+0x1bb64>
   2e040:	ldr	r0, [pc, #232]	; 2e130 <__assert_fail@plt+0x1bb6c>
   2e044:	bl	125c4 <__assert_fail@plt>
   2e048:	sub	r2, r6, #3
   2e04c:	mov	r1, #47	; 0x2f
   2e050:	add	r0, r5, #3
   2e054:	bl	123a8 <memchr@plt>
   2e058:	subs	r4, r0, #0
   2e05c:	moveq	r3, #36	; 0x24
   2e060:	streq	r3, [r9]
   2e064:	mvneq	r4, #0
   2e068:	beq	2dee8 <__assert_fail@plt+0x1b924>
   2e06c:	mov	r3, #0
   2e070:	strb	r3, [r4]
   2e074:	mov	r1, r5
   2e078:	add	r0, sp, #12
   2e07c:	bl	2de84 <__assert_fail@plt+0x1b8c0>
   2e080:	mov	r3, #47	; 0x2f
   2e084:	strb	r3, [r4]
   2e088:	cmp	r0, #0
   2e08c:	bne	2e008 <__assert_fail@plt+0x1ba44>
   2e090:	add	r4, r4, #1
   2e094:	ldr	r1, [pc, #128]	; 2e11c <__assert_fail@plt+0x1bb58>
   2e098:	mov	r0, r4
   2e09c:	bl	125b8 <strspn@plt>
   2e0a0:	add	r4, r4, r0
   2e0a4:	b	2df38 <__assert_fail@plt+0x1b974>
   2e0a8:	ldr	r1, [pc, #108]	; 2e11c <__assert_fail@plt+0x1bb58>
   2e0ac:	add	r0, sp, #12
   2e0b0:	bl	2de84 <__assert_fail@plt+0x1b8c0>
   2e0b4:	cmp	r0, #0
   2e0b8:	addeq	r4, r5, r4
   2e0bc:	beq	2df38 <__assert_fail@plt+0x1b974>
   2e0c0:	b	2e008 <__assert_fail@plt+0x1ba44>
   2e0c4:	ldr	r3, [pc, #88]	; 2e124 <__assert_fail@plt+0x1bb60>
   2e0c8:	mov	r2, #162	; 0xa2
   2e0cc:	ldr	r1, [pc, #84]	; 2e128 <__assert_fail@plt+0x1bb64>
   2e0d0:	ldr	r0, [pc, #92]	; 2e134 <__assert_fail@plt+0x1bb70>
   2e0d4:	bl	125c4 <__assert_fail@plt>
   2e0d8:	ldr	r3, [pc, #68]	; 2e124 <__assert_fail@plt+0x1bb60>
   2e0dc:	mov	r2, #163	; 0xa3
   2e0e0:	ldr	r1, [pc, #64]	; 2e128 <__assert_fail@plt+0x1bb64>
   2e0e4:	ldr	r0, [pc, #76]	; 2e138 <__assert_fail@plt+0x1bb74>
   2e0e8:	bl	125c4 <__assert_fail@plt>
   2e0ec:	mov	r3, #36	; 0x24
   2e0f0:	str	r3, [r9]
   2e0f4:	mvn	r4, #0
   2e0f8:	b	2dee8 <__assert_fail@plt+0x1b924>
   2e0fc:	ldr	r3, [pc, #32]	; 2e124 <__assert_fail@plt+0x1bb60>
   2e100:	mov	r2, #179	; 0xb3
   2e104:	ldr	r1, [pc, #28]	; 2e128 <__assert_fail@plt+0x1bb64>
   2e108:	ldr	r0, [pc, #44]	; 2e13c <__assert_fail@plt+0x1bb78>
   2e10c:	bl	125c4 <__assert_fail@plt>
   2e110:	add	r0, sp, #12
   2e114:	bl	2de48 <__assert_fail@plt+0x1b884>
   2e118:	b	2dee8 <__assert_fail@plt+0x1b924>
   2e11c:	andeq	r8, r4, r0, lsr #11
   2e120:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2e124:	andeq	r8, r4, r8, lsr #2
   2e128:	andeq	r8, r4, r4, lsr r1
   2e12c:	andeq	r8, r4, r4, asr r1
   2e130:	andeq	r8, r4, ip, asr r1
   2e134:	andeq	r8, r4, r8, ror #2
   2e138:	andeq	r8, r4, r4, ror r1
   2e13c:	andeq	r8, r4, r4, lsl #3
   2e140:	push	{r1, r2, r3}
   2e144:	push	{r4, r5, r6, lr}
   2e148:	sub	sp, sp, #12
   2e14c:	mov	r5, r0
   2e150:	ldr	r1, [sp, #28]
   2e154:	add	r3, sp, #32
   2e158:	str	r3, [sp, #4]
   2e15c:	cmp	r1, #0
   2e160:	beq	2e1a8 <__assert_fail@plt+0x1bbe4>
   2e164:	ldr	r3, [pc, #540]	; 2e388 <__assert_fail@plt+0x1bdc4>
   2e168:	cmp	r1, r3
   2e16c:	beq	2e1d8 <__assert_fail@plt+0x1bc14>
   2e170:	cmp	r1, #11
   2e174:	beq	2e378 <__assert_fail@plt+0x1bdb4>
   2e178:	bgt	2e304 <__assert_fail@plt+0x1bd40>
   2e17c:	cmp	r1, #3
   2e180:	beq	2e378 <__assert_fail@plt+0x1bdb4>
   2e184:	ble	2e2c4 <__assert_fail@plt+0x1bd00>
   2e188:	cmp	r1, #8
   2e18c:	beq	2e2e4 <__assert_fail@plt+0x1bd20>
   2e190:	ble	2e2dc <__assert_fail@plt+0x1bd18>
   2e194:	cmp	r1, #9
   2e198:	beq	2e378 <__assert_fail@plt+0x1bdb4>
   2e19c:	cmp	r1, #10
   2e1a0:	bne	2e33c <__assert_fail@plt+0x1bd78>
   2e1a4:	b	2e2e4 <__assert_fail@plt+0x1bd20>
   2e1a8:	ldr	r3, [sp, #4]
   2e1ac:	add	r2, r3, #4
   2e1b0:	str	r2, [sp, #4]
   2e1b4:	ldr	r2, [r3]
   2e1b8:	mov	r1, #0
   2e1bc:	bl	123fc <fcntl64@plt>
   2e1c0:	mov	r4, r0
   2e1c4:	mov	r0, r4
   2e1c8:	add	sp, sp, #12
   2e1cc:	pop	{r4, r5, r6, lr}
   2e1d0:	add	sp, sp, #12
   2e1d4:	bx	lr
   2e1d8:	ldr	r3, [sp, #4]
   2e1dc:	add	r2, r3, #4
   2e1e0:	str	r2, [sp, #4]
   2e1e4:	ldr	r6, [r3]
   2e1e8:	ldr	r3, [pc, #412]	; 2e38c <__assert_fail@plt+0x1bdc8>
   2e1ec:	ldr	r3, [r3]
   2e1f0:	cmp	r3, #0
   2e1f4:	blt	2e254 <__assert_fail@plt+0x1bc90>
   2e1f8:	mov	r2, r6
   2e1fc:	ldr	r1, [pc, #388]	; 2e388 <__assert_fail@plt+0x1bdc4>
   2e200:	bl	123fc <fcntl64@plt>
   2e204:	subs	r4, r0, #0
   2e208:	blt	2e21c <__assert_fail@plt+0x1bc58>
   2e20c:	mov	r2, #1
   2e210:	ldr	r3, [pc, #372]	; 2e38c <__assert_fail@plt+0x1bdc8>
   2e214:	str	r2, [r3]
   2e218:	b	2e1c4 <__assert_fail@plt+0x1bc00>
   2e21c:	bl	12318 <__errno_location@plt>
   2e220:	ldr	r3, [r0]
   2e224:	cmp	r3, #22
   2e228:	bne	2e20c <__assert_fail@plt+0x1bc48>
   2e22c:	mov	r2, r6
   2e230:	mov	r1, #0
   2e234:	mov	r0, r5
   2e238:	bl	123fc <fcntl64@plt>
   2e23c:	subs	r4, r0, #0
   2e240:	blt	2e1c4 <__assert_fail@plt+0x1bc00>
   2e244:	mvn	r2, #0
   2e248:	ldr	r3, [pc, #316]	; 2e38c <__assert_fail@plt+0x1bdc8>
   2e24c:	str	r2, [r3]
   2e250:	b	2e278 <__assert_fail@plt+0x1bcb4>
   2e254:	mov	r2, r6
   2e258:	mov	r1, #0
   2e25c:	bl	123fc <fcntl64@plt>
   2e260:	subs	r4, r0, #0
   2e264:	blt	2e1c4 <__assert_fail@plt+0x1bc00>
   2e268:	ldr	r3, [pc, #284]	; 2e38c <__assert_fail@plt+0x1bdc8>
   2e26c:	ldr	r3, [r3]
   2e270:	cmn	r3, #1
   2e274:	bne	2e1c4 <__assert_fail@plt+0x1bc00>
   2e278:	mov	r1, #1
   2e27c:	mov	r0, r4
   2e280:	bl	123fc <fcntl64@plt>
   2e284:	subs	r2, r0, #0
   2e288:	blt	2e2a4 <__assert_fail@plt+0x1bce0>
   2e28c:	orr	r2, r2, #1
   2e290:	mov	r1, #2
   2e294:	mov	r0, r4
   2e298:	bl	123fc <fcntl64@plt>
   2e29c:	cmn	r0, #1
   2e2a0:	bne	2e1c4 <__assert_fail@plt+0x1bc00>
   2e2a4:	bl	12318 <__errno_location@plt>
   2e2a8:	mov	r5, r0
   2e2ac:	ldr	r6, [r0]
   2e2b0:	mov	r0, r4
   2e2b4:	bl	1257c <close@plt>
   2e2b8:	str	r6, [r5]
   2e2bc:	mvn	r4, #0
   2e2c0:	b	2e1c4 <__assert_fail@plt+0x1bc00>
   2e2c4:	cmp	r1, #1
   2e2c8:	beq	2e378 <__assert_fail@plt+0x1bdb4>
   2e2cc:	bgt	2e2e4 <__assert_fail@plt+0x1bd20>
   2e2d0:	cmp	r1, #0
   2e2d4:	bne	2e33c <__assert_fail@plt+0x1bd78>
   2e2d8:	b	2e2e4 <__assert_fail@plt+0x1bd20>
   2e2dc:	cmp	r1, #4
   2e2e0:	bne	2e33c <__assert_fail@plt+0x1bd78>
   2e2e4:	ldr	r3, [sp, #4]
   2e2e8:	add	r2, r3, #4
   2e2ec:	str	r2, [sp, #4]
   2e2f0:	ldr	r2, [r3]
   2e2f4:	mov	r0, r5
   2e2f8:	bl	123fc <fcntl64@plt>
   2e2fc:	mov	r4, r0
   2e300:	b	2e1c4 <__assert_fail@plt+0x1bc00>
   2e304:	ldr	r3, [pc, #132]	; 2e390 <__assert_fail@plt+0x1bdcc>
   2e308:	cmp	r1, r3
   2e30c:	bgt	2e35c <__assert_fail@plt+0x1bd98>
   2e310:	sub	r3, r3, #1
   2e314:	cmp	r1, r3
   2e318:	bge	2e2e4 <__assert_fail@plt+0x1bd20>
   2e31c:	sub	r3, r3, #5
   2e320:	cmp	r1, r3
   2e324:	beq	2e378 <__assert_fail@plt+0x1bdb4>
   2e328:	add	r3, r3, #1
   2e32c:	cmp	r1, r3
   2e330:	beq	2e2e4 <__assert_fail@plt+0x1bd20>
   2e334:	cmp	r1, #1024	; 0x400
   2e338:	beq	2e2e4 <__assert_fail@plt+0x1bd20>
   2e33c:	ldr	r3, [sp, #4]
   2e340:	add	r2, r3, #4
   2e344:	str	r2, [sp, #4]
   2e348:	ldr	r2, [r3]
   2e34c:	mov	r0, r5
   2e350:	bl	123fc <fcntl64@plt>
   2e354:	mov	r4, r0
   2e358:	b	2e1c4 <__assert_fail@plt+0x1bc00>
   2e35c:	ldr	r3, [pc, #48]	; 2e394 <__assert_fail@plt+0x1bdd0>
   2e360:	cmp	r1, r3
   2e364:	beq	2e2e4 <__assert_fail@plt+0x1bd20>
   2e368:	blt	2e378 <__assert_fail@plt+0x1bdb4>
   2e36c:	add	r3, r3, #1
   2e370:	cmp	r1, r3
   2e374:	bne	2e33c <__assert_fail@plt+0x1bd78>
   2e378:	mov	r0, r5
   2e37c:	bl	123fc <fcntl64@plt>
   2e380:	mov	r4, r0
   2e384:	b	2e1c4 <__assert_fail@plt+0x1bc00>
   2e388:	andeq	r0, r0, r6, lsl #8
   2e38c:	andeq	r9, r5, r8, lsr lr
   2e390:	andeq	r0, r0, r7, lsl #8
   2e394:	andeq	r0, r0, r9, lsl #8
   2e398:	push	{r4, lr}
   2e39c:	sub	sp, sp, #8
   2e3a0:	subs	r4, r0, #0
   2e3a4:	beq	2e3b8 <__assert_fail@plt+0x1bdf4>
   2e3a8:	mov	r0, r4
   2e3ac:	bl	12240 <__freading@plt>
   2e3b0:	cmp	r0, #0
   2e3b4:	bne	2e3c8 <__assert_fail@plt+0x1be04>
   2e3b8:	mov	r0, r4
   2e3bc:	bl	11f64 <fflush@plt>
   2e3c0:	add	sp, sp, #8
   2e3c4:	pop	{r4, pc}
   2e3c8:	ldr	r3, [r4]
   2e3cc:	tst	r3, #256	; 0x100
   2e3d0:	bne	2e3e0 <__assert_fail@plt+0x1be1c>
   2e3d4:	mov	r0, r4
   2e3d8:	bl	11f64 <fflush@plt>
   2e3dc:	b	2e3c0 <__assert_fail@plt+0x1bdfc>
   2e3e0:	mov	r3, #1
   2e3e4:	str	r3, [sp]
   2e3e8:	mov	r2, #0
   2e3ec:	mov	r3, #0
   2e3f0:	mov	r0, r4
   2e3f4:	bl	2e454 <__assert_fail@plt+0x1be90>
   2e3f8:	b	2e3d4 <__assert_fail@plt+0x1be10>
   2e3fc:	push	{r4, r5, lr}
   2e400:	sub	sp, sp, #12
   2e404:	mov	r5, r0
   2e408:	bl	12318 <__errno_location@plt>
   2e40c:	mov	r4, r0
   2e410:	ldr	r3, [r0]
   2e414:	str	r3, [sp]
   2e418:	str	r3, [sp, #4]
   2e41c:	mov	r3, #0
   2e420:	str	r3, [r0]
   2e424:	mov	r0, r5
   2e428:	bl	11fa0 <free@plt>
   2e42c:	ldr	r3, [r4]
   2e430:	cmp	r3, #0
   2e434:	moveq	r3, #4
   2e438:	movne	r3, #0
   2e43c:	add	r2, sp, #8
   2e440:	add	r3, r2, r3
   2e444:	ldr	r3, [r3, #-8]
   2e448:	str	r3, [r4]
   2e44c:	add	sp, sp, #12
   2e450:	pop	{r4, r5, pc}
   2e454:	push	{r4, r5, r6, r7, lr}
   2e458:	sub	sp, sp, #12
   2e45c:	mov	r4, r0
   2e460:	mov	r6, r2
   2e464:	mov	r7, r3
   2e468:	ldr	r5, [sp, #32]
   2e46c:	ldr	r2, [r0, #8]
   2e470:	ldr	r3, [r0, #4]
   2e474:	cmp	r2, r3
   2e478:	beq	2e498 <__assert_fail@plt+0x1bed4>
   2e47c:	str	r5, [sp]
   2e480:	mov	r2, r6
   2e484:	mov	r3, r7
   2e488:	mov	r0, r4
   2e48c:	bl	123e4 <fseeko64@plt>
   2e490:	add	sp, sp, #12
   2e494:	pop	{r4, r5, r6, r7, pc}
   2e498:	ldr	r2, [r0, #20]
   2e49c:	ldr	r3, [r0, #16]
   2e4a0:	cmp	r2, r3
   2e4a4:	bne	2e47c <__assert_fail@plt+0x1beb8>
   2e4a8:	ldr	r3, [r0, #36]	; 0x24
   2e4ac:	cmp	r3, #0
   2e4b0:	bne	2e47c <__assert_fail@plt+0x1beb8>
   2e4b4:	bl	12390 <fileno@plt>
   2e4b8:	str	r5, [sp]
   2e4bc:	mov	r2, r6
   2e4c0:	mov	r3, r7
   2e4c4:	bl	12150 <lseek64@plt>
   2e4c8:	mvn	r2, #0
   2e4cc:	mvn	r3, #0
   2e4d0:	cmp	r1, r3
   2e4d4:	cmpeq	r0, r2
   2e4d8:	beq	2e4f4 <__assert_fail@plt+0x1bf30>
   2e4dc:	ldr	r3, [r4]
   2e4e0:	bic	r3, r3, #16
   2e4e4:	str	r3, [r4]
   2e4e8:	strd	r0, [r4, #80]	; 0x50
   2e4ec:	mov	r0, #0
   2e4f0:	b	2e490 <__assert_fail@plt+0x1becc>
   2e4f4:	mvn	r0, #0
   2e4f8:	b	2e490 <__assert_fail@plt+0x1becc>
   2e4fc:	push	{r4, r5}
   2e500:	ldrd	r4, [r0, #8]
   2e504:	ldrd	r2, [r1, #8]
   2e508:	cmp	r5, r3
   2e50c:	cmpeq	r4, r2
   2e510:	movne	r0, #0
   2e514:	beq	2e520 <__assert_fail@plt+0x1bf5c>
   2e518:	pop	{r4, r5}
   2e51c:	bx	lr
   2e520:	ldrd	r4, [r0]
   2e524:	ldrd	r2, [r1]
   2e528:	cmp	r5, r3
   2e52c:	cmpeq	r4, r2
   2e530:	moveq	r0, #1
   2e534:	movne	r0, #0
   2e538:	b	2e518 <__assert_fail@plt+0x1bf54>
   2e53c:	push	{r4, lr}
   2e540:	mov	r2, r1
   2e544:	mov	r3, #0
   2e548:	ldrd	r0, [r0, #8]
   2e54c:	bl	42340 <__assert_fail@plt+0x2fd7c>
   2e550:	mov	r0, r2
   2e554:	pop	{r4, pc}
   2e558:	push	{r4, lr}
   2e55c:	mov	r2, r1
   2e560:	mov	r3, #0
   2e564:	ldrd	r0, [r0]
   2e568:	bl	42340 <__assert_fail@plt+0x2fd7c>
   2e56c:	mov	r0, r2
   2e570:	pop	{r4, pc}
   2e574:	push	{r4, r5}
   2e578:	ldrd	r4, [r0]
   2e57c:	ldrd	r2, [r1]
   2e580:	cmp	r5, r3
   2e584:	cmpeq	r4, r2
   2e588:	moveq	r0, #1
   2e58c:	movne	r0, #0
   2e590:	pop	{r4, r5}
   2e594:	bx	lr
   2e598:	push	{r4, r5}
   2e59c:	ldr	r3, [r0]
   2e5a0:	ldrd	r4, [r3, #160]	; 0xa0
   2e5a4:	ldr	r3, [r1]
   2e5a8:	ldrd	r2, [r3, #160]	; 0xa0
   2e5ac:	cmp	r5, r3
   2e5b0:	cmpeq	r4, r2
   2e5b4:	movhi	r0, #1
   2e5b8:	movls	r0, #0
   2e5bc:	movcc	r3, #1
   2e5c0:	movcs	r3, #0
   2e5c4:	sub	r0, r0, r3
   2e5c8:	pop	{r4, r5}
   2e5cc:	bx	lr
   2e5d0:	push	{r4, r5, r6, lr}
   2e5d4:	mov	r4, r0
   2e5d8:	ldr	r3, [r0, #36]	; 0x24
   2e5dc:	add	r1, r1, #256	; 0x100
   2e5e0:	adds	r1, r1, r3
   2e5e4:	bcs	2e608 <__assert_fail@plt+0x1c044>
   2e5e8:	str	r1, [r0, #36]	; 0x24
   2e5ec:	ldr	r0, [r0, #24]
   2e5f0:	bl	31320 <__assert_fail@plt+0x1ed5c>
   2e5f4:	cmp	r0, #0
   2e5f8:	beq	2e62c <__assert_fail@plt+0x1c068>
   2e5fc:	str	r0, [r4, #24]
   2e600:	mov	r0, #1
   2e604:	pop	{r4, r5, r6, pc}
   2e608:	ldr	r0, [r0, #24]
   2e60c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2e610:	mov	r5, #0
   2e614:	str	r5, [r4, #24]
   2e618:	bl	12318 <__errno_location@plt>
   2e61c:	mov	r3, #36	; 0x24
   2e620:	str	r3, [r0]
   2e624:	mov	r0, r5
   2e628:	pop	{r4, r5, r6, pc}
   2e62c:	ldr	r0, [r4, #24]
   2e630:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2e634:	mov	r0, #0
   2e638:	str	r0, [r4, #24]
   2e63c:	pop	{r4, r5, r6, pc}
   2e640:	push	{r4, r5, r6, lr}
   2e644:	sub	sp, sp, #8
   2e648:	mov	r4, r1
   2e64c:	add	r5, r1, #64	; 0x40
   2e650:	ldr	r3, [r1, #48]	; 0x30
   2e654:	cmp	r3, #0
   2e658:	bne	2e668 <__assert_fail@plt+0x1c0a4>
   2e65c:	ldr	r3, [r0, #48]	; 0x30
   2e660:	tst	r3, #1
   2e664:	bne	2e678 <__assert_fail@plt+0x1c0b4>
   2e668:	ldr	r3, [r0, #48]	; 0x30
   2e66c:	lsl	r3, r3, #30
   2e670:	orrs	r3, r2, r3, lsr #31
   2e674:	beq	2e6f0 <__assert_fail@plt+0x1c12c>
   2e678:	mov	r2, r5
   2e67c:	ldr	r1, [r4, #24]
   2e680:	mov	r0, #3
   2e684:	bl	12528 <__xstat64@plt>
   2e688:	cmp	r0, #0
   2e68c:	beq	2e724 <__assert_fail@plt+0x1c160>
   2e690:	bl	12318 <__errno_location@plt>
   2e694:	mov	r6, r0
   2e698:	ldr	r3, [r0]
   2e69c:	cmp	r3, #2
   2e6a0:	beq	2e6c8 <__assert_fail@plt+0x1c104>
   2e6a4:	ldr	r3, [r6]
   2e6a8:	str	r3, [r4, #32]
   2e6ac:	mov	r2, #104	; 0x68
   2e6b0:	mov	r1, #0
   2e6b4:	mov	r0, r5
   2e6b8:	bl	12348 <memset@plt>
   2e6bc:	mov	r0, #10
   2e6c0:	add	sp, sp, #8
   2e6c4:	pop	{r4, r5, r6, pc}
   2e6c8:	mov	r2, r5
   2e6cc:	ldr	r1, [r4, #24]
   2e6d0:	mov	r0, #3
   2e6d4:	bl	12588 <__lxstat64@plt>
   2e6d8:	cmp	r0, #0
   2e6dc:	bne	2e6a4 <__assert_fail@plt+0x1c0e0>
   2e6e0:	mov	r3, #0
   2e6e4:	str	r3, [r6]
   2e6e8:	mov	r0, #13
   2e6ec:	b	2e6c0 <__assert_fail@plt+0x1c0fc>
   2e6f0:	ldr	r1, [r0, #32]
   2e6f4:	mov	r3, #256	; 0x100
   2e6f8:	str	r3, [sp]
   2e6fc:	mov	r3, r5
   2e700:	ldr	r2, [r4, #24]
   2e704:	mov	r0, #3
   2e708:	bl	120fc <__fxstatat64@plt>
   2e70c:	cmp	r0, #0
   2e710:	beq	2e724 <__assert_fail@plt+0x1c160>
   2e714:	bl	12318 <__errno_location@plt>
   2e718:	ldr	r3, [r0]
   2e71c:	str	r3, [r4, #32]
   2e720:	b	2e6ac <__assert_fail@plt+0x1c0e8>
   2e724:	ldr	r0, [r4, #80]	; 0x50
   2e728:	and	r0, r0, #61440	; 0xf000
   2e72c:	cmp	r0, #16384	; 0x4000
   2e730:	beq	2e750 <__assert_fail@plt+0x1c18c>
   2e734:	cmp	r0, #40960	; 0xa000
   2e738:	moveq	r0, #12
   2e73c:	beq	2e6c0 <__assert_fail@plt+0x1c0fc>
   2e740:	cmp	r0, #32768	; 0x8000
   2e744:	moveq	r0, #8
   2e748:	movne	r0, #3
   2e74c:	b	2e6c0 <__assert_fail@plt+0x1c0fc>
   2e750:	ldrb	r3, [r4, #168]	; 0xa8
   2e754:	cmp	r3, #46	; 0x2e
   2e758:	movne	r0, #1
   2e75c:	bne	2e6c0 <__assert_fail@plt+0x1c0fc>
   2e760:	ldrb	r3, [r4, #169]	; 0xa9
   2e764:	cmp	r3, #0
   2e768:	beq	2e784 <__assert_fail@plt+0x1c1c0>
   2e76c:	ldr	r3, [r4, #168]	; 0xa8
   2e770:	bic	r3, r3, #-16777216	; 0xff000000
   2e774:	bic	r3, r3, #255	; 0xff
   2e778:	cmp	r3, #11776	; 0x2e00
   2e77c:	movne	r0, #1
   2e780:	bne	2e6c0 <__assert_fail@plt+0x1c0fc>
   2e784:	ldr	r0, [r4, #48]	; 0x30
   2e788:	cmp	r0, #0
   2e78c:	moveq	r0, #1
   2e790:	movne	r0, #5
   2e794:	b	2e6c0 <__assert_fail@plt+0x1c0fc>
   2e798:	push	{r4, r5, r6, r7, r8, lr}
   2e79c:	mov	r6, r0
   2e7a0:	mov	r4, r1
   2e7a4:	mov	r5, r2
   2e7a8:	ldr	r7, [r0, #44]	; 0x2c
   2e7ac:	ldr	r3, [r0, #40]	; 0x28
   2e7b0:	cmp	r3, r2
   2e7b4:	bcs	2e7e0 <__assert_fail@plt+0x1c21c>
   2e7b8:	add	r1, r2, #40	; 0x28
   2e7bc:	str	r1, [r0, #40]	; 0x28
   2e7c0:	cmn	r1, #-1073741823	; 0xc0000001
   2e7c4:	bhi	2e850 <__assert_fail@plt+0x1c28c>
   2e7c8:	lsl	r1, r1, #2
   2e7cc:	ldr	r0, [r0, #8]
   2e7d0:	bl	31320 <__assert_fail@plt+0x1ed5c>
   2e7d4:	cmp	r0, #0
   2e7d8:	strne	r0, [r6, #8]
   2e7dc:	beq	2e850 <__assert_fail@plt+0x1c28c>
   2e7e0:	ldr	r3, [r6, #8]
   2e7e4:	cmp	r4, #0
   2e7e8:	beq	2e7fc <__assert_fail@plt+0x1c238>
   2e7ec:	str	r4, [r3], #4
   2e7f0:	ldr	r4, [r4, #8]
   2e7f4:	cmp	r4, #0
   2e7f8:	bne	2e7ec <__assert_fail@plt+0x1c228>
   2e7fc:	mov	r3, r7
   2e800:	mov	r2, #4
   2e804:	mov	r1, r5
   2e808:	ldr	r0, [r6, #8]
   2e80c:	bl	124e0 <qsort@plt>
   2e810:	ldr	lr, [r6, #8]
   2e814:	ldr	r0, [lr]
   2e818:	subs	r3, r5, #1
   2e81c:	beq	2e840 <__assert_fail@plt+0x1c27c>
   2e820:	mov	r2, lr
   2e824:	ldr	r1, [r2]
   2e828:	ldr	ip, [r2, #4]!
   2e82c:	str	ip, [r1, #8]
   2e830:	subs	r3, r3, #1
   2e834:	bne	2e824 <__assert_fail@plt+0x1c260>
   2e838:	sub	r5, r5, #-1073741823	; 0xc0000001
   2e83c:	add	lr, lr, r5, lsl #2
   2e840:	ldr	r3, [lr]
   2e844:	mov	r2, #0
   2e848:	str	r2, [r3, #8]
   2e84c:	pop	{r4, r5, r6, r7, r8, pc}
   2e850:	ldr	r0, [r6, #8]
   2e854:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2e858:	mov	r3, #0
   2e85c:	str	r3, [r6, #8]
   2e860:	str	r3, [r6, #40]	; 0x28
   2e864:	mov	r0, r4
   2e868:	pop	{r4, r5, r6, r7, r8, pc}
   2e86c:	push	{r4, r5, r6, r7, r8, lr}
   2e870:	mov	r6, r0
   2e874:	mov	r7, r1
   2e878:	mov	r5, r2
   2e87c:	add	r0, r2, #176	; 0xb0
   2e880:	bic	r0, r0, #7
   2e884:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2e888:	subs	r4, r0, #0
   2e88c:	beq	2e8d8 <__assert_fail@plt+0x1c314>
   2e890:	mov	r2, r5
   2e894:	mov	r1, r7
   2e898:	add	r0, r4, #168	; 0xa8
   2e89c:	bl	12000 <memcpy@plt>
   2e8a0:	add	r2, r4, r5
   2e8a4:	mov	r3, #0
   2e8a8:	strb	r3, [r2, #168]	; 0xa8
   2e8ac:	str	r5, [r4, #52]	; 0x34
   2e8b0:	str	r6, [r4, #44]	; 0x2c
   2e8b4:	ldr	r2, [r6, #24]
   2e8b8:	str	r2, [r4, #28]
   2e8bc:	str	r3, [r4, #32]
   2e8c0:	str	r3, [r4, #12]
   2e8c4:	strh	r3, [r4, #58]	; 0x3a
   2e8c8:	mov	r2, #3
   2e8cc:	strh	r2, [r4, #60]	; 0x3c
   2e8d0:	str	r3, [r4, #16]
   2e8d4:	str	r3, [r4, #20]
   2e8d8:	mov	r0, r4
   2e8dc:	pop	{r4, r5, r6, r7, r8, pc}
   2e8e0:	push	{r4, lr}
   2e8e4:	sub	sp, sp, #8
   2e8e8:	mov	r4, r0
   2e8ec:	ldr	r2, [r0, #48]	; 0x30
   2e8f0:	ldr	r3, [pc, #92]	; 2e954 <__assert_fail@plt+0x1c390>
   2e8f4:	and	r3, r3, r2
   2e8f8:	cmp	r3, #0
   2e8fc:	beq	2e930 <__assert_fail@plt+0x1c36c>
   2e900:	ldr	r3, [pc, #80]	; 2e958 <__assert_fail@plt+0x1c394>
   2e904:	str	r3, [sp]
   2e908:	ldr	r3, [pc, #76]	; 2e95c <__assert_fail@plt+0x1c398>
   2e90c:	ldr	r2, [pc, #76]	; 2e960 <__assert_fail@plt+0x1c39c>
   2e910:	mov	r1, #0
   2e914:	mov	r0, #31
   2e918:	bl	224e0 <__assert_fail@plt+0xff1c>
   2e91c:	str	r0, [r4, #56]	; 0x38
   2e920:	adds	r0, r0, #0
   2e924:	movne	r0, #1
   2e928:	add	sp, sp, #8
   2e92c:	pop	{r4, pc}
   2e930:	mov	r0, #32
   2e934:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2e938:	str	r0, [r4, #56]	; 0x38
   2e93c:	cmp	r0, #0
   2e940:	moveq	r0, #0
   2e944:	beq	2e928 <__assert_fail@plt+0x1c364>
   2e948:	bl	3f940 <__assert_fail@plt+0x2d37c>
   2e94c:	mov	r0, #1
   2e950:	b	2e928 <__assert_fail@plt+0x1c364>
   2e954:	andeq	r0, r0, r2, lsl #2
   2e958:	strdeq	lr, [r2], -ip
   2e95c:	strdeq	lr, [r2], -ip
   2e960:	andeq	lr, r2, ip, lsr r5
   2e964:	push	{r4, lr}
   2e968:	mov	ip, r1
   2e96c:	ldr	r3, [r0, #48]	; 0x30
   2e970:	and	lr, r3, #16
   2e974:	ldr	r2, [pc, #48]	; 2e9ac <__assert_fail@plt+0x1c3e8>
   2e978:	ldr	r1, [pc, #48]	; 2e9b0 <__assert_fail@plt+0x1c3ec>
   2e97c:	cmp	lr, #0
   2e980:	moveq	r1, r2
   2e984:	tst	r3, #512	; 0x200
   2e988:	bne	2e998 <__assert_fail@plt+0x1c3d4>
   2e98c:	mov	r0, ip
   2e990:	bl	219a0 <__assert_fail@plt+0xf3dc>
   2e994:	pop	{r4, pc}
   2e998:	mov	r2, r1
   2e99c:	mov	r1, ip
   2e9a0:	ldr	r0, [r0, #32]
   2e9a4:	bl	258c8 <__assert_fail@plt+0x13304>
   2e9a8:	pop	{r4, pc}
   2e9ac:	andeq	r4, r8, r0, lsl #18
   2e9b0:	andeq	ip, r8, r0, lsl #18
   2e9b4:	push	{r4, r5, r6, lr}
   2e9b8:	subs	r4, r0, #0
   2e9bc:	bne	2e9d8 <__assert_fail@plt+0x1c414>
   2e9c0:	pop	{r4, r5, r6, pc}
   2e9c4:	mov	r0, r4
   2e9c8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2e9cc:	mov	r4, r5
   2e9d0:	cmp	r5, #0
   2e9d4:	beq	2e9f0 <__assert_fail@plt+0x1c42c>
   2e9d8:	ldr	r5, [r4, #8]
   2e9dc:	ldr	r0, [r4, #12]
   2e9e0:	cmp	r0, #0
   2e9e4:	beq	2e9c4 <__assert_fail@plt+0x1c400>
   2e9e8:	bl	12594 <closedir@plt>
   2e9ec:	b	2e9c4 <__assert_fail@plt+0x1c400>
   2e9f0:	pop	{r4, r5, r6, pc}
   2e9f4:	push	{r4, lr}
   2e9f8:	ldr	r2, [r0, #48]	; 0x30
   2e9fc:	ldr	r3, [pc, #40]	; 2ea2c <__assert_fail@plt+0x1c468>
   2ea00:	and	r3, r3, r2
   2ea04:	cmp	r3, #0
   2ea08:	beq	2ea20 <__assert_fail@plt+0x1c45c>
   2ea0c:	ldr	r0, [r0, #56]	; 0x38
   2ea10:	cmp	r0, #0
   2ea14:	popeq	{r4, pc}
   2ea18:	bl	22670 <__assert_fail@plt+0x100ac>
   2ea1c:	pop	{r4, pc}
   2ea20:	ldr	r0, [r0, #56]	; 0x38
   2ea24:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2ea28:	pop	{r4, pc}
   2ea2c:	andeq	r0, r0, r2, lsl #2
   2ea30:	push	{r4, lr}
   2ea34:	mov	r4, r0
   2ea38:	mov	r0, r4
   2ea3c:	bl	3fbbc <__assert_fail@plt+0x2d5f8>
   2ea40:	cmp	r0, #0
   2ea44:	bne	2ea60 <__assert_fail@plt+0x1c49c>
   2ea48:	mov	r0, r4
   2ea4c:	bl	3fc08 <__assert_fail@plt+0x2d644>
   2ea50:	cmp	r0, #0
   2ea54:	blt	2ea38 <__assert_fail@plt+0x1c474>
   2ea58:	bl	1257c <close@plt>
   2ea5c:	b	2ea38 <__assert_fail@plt+0x1c474>
   2ea60:	pop	{r4, pc}
   2ea64:	push	{r4, r5, r6, r7, lr}
   2ea68:	sub	sp, sp, #116	; 0x74
   2ea6c:	ldr	r4, [r0, #44]	; 0x2c
   2ea70:	ldr	r3, [r4, #48]	; 0x30
   2ea74:	tst	r3, #512	; 0x200
   2ea78:	beq	2eb58 <__assert_fail@plt+0x1c594>
   2ea7c:	mov	r7, r1
   2ea80:	mov	r5, r0
   2ea84:	ldr	r6, [r4, #52]	; 0x34
   2ea88:	cmp	r6, #0
   2ea8c:	beq	2eab4 <__assert_fail@plt+0x1c4f0>
   2ea90:	ldrd	r2, [r5, #64]	; 0x40
   2ea94:	add	r1, sp, #112	; 0x70
   2ea98:	strd	r2, [r1, #-104]!	; 0xffffff98
   2ea9c:	mov	r0, r6
   2eaa0:	bl	22228 <__assert_fail@plt+0xfc64>
   2eaa4:	cmp	r0, #0
   2eaa8:	beq	2eae0 <__assert_fail@plt+0x1c51c>
   2eaac:	ldr	r0, [r0, #8]
   2eab0:	b	2eb5c <__assert_fail@plt+0x1c598>
   2eab4:	ldr	r3, [pc, #184]	; 2eb74 <__assert_fail@plt+0x1c5b0>
   2eab8:	str	r3, [sp]
   2eabc:	ldr	r3, [pc, #180]	; 2eb78 <__assert_fail@plt+0x1c5b4>
   2eac0:	ldr	r2, [pc, #180]	; 2eb7c <__assert_fail@plt+0x1c5b8>
   2eac4:	mov	r1, #0
   2eac8:	mov	r0, #13
   2eacc:	bl	224e0 <__assert_fail@plt+0xff1c>
   2ead0:	mov	r6, r0
   2ead4:	str	r0, [r4, #52]	; 0x34
   2ead8:	cmp	r0, #0
   2eadc:	bne	2ea90 <__assert_fail@plt+0x1c4cc>
   2eae0:	cmp	r7, #0
   2eae4:	blt	2eb64 <__assert_fail@plt+0x1c5a0>
   2eae8:	add	r1, sp, #24
   2eaec:	mov	r0, r7
   2eaf0:	bl	11e98 <fstatfs64@plt>
   2eaf4:	cmp	r0, #0
   2eaf8:	bne	2eb6c <__assert_fail@plt+0x1c5a8>
   2eafc:	cmp	r6, #0
   2eb00:	beq	2eb40 <__assert_fail@plt+0x1c57c>
   2eb04:	mov	r0, #16
   2eb08:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2eb0c:	subs	r4, r0, #0
   2eb10:	beq	2eb40 <__assert_fail@plt+0x1c57c>
   2eb14:	ldrd	r2, [r5, #64]	; 0x40
   2eb18:	strd	r2, [r4]
   2eb1c:	ldr	r3, [sp, #24]
   2eb20:	str	r3, [r4, #8]
   2eb24:	mov	r1, r4
   2eb28:	mov	r0, r6
   2eb2c:	bl	22a2c <__assert_fail@plt+0x10468>
   2eb30:	cmp	r0, #0
   2eb34:	beq	2eb4c <__assert_fail@plt+0x1c588>
   2eb38:	cmp	r4, r0
   2eb3c:	bne	2eb48 <__assert_fail@plt+0x1c584>
   2eb40:	ldr	r0, [sp, #24]
   2eb44:	b	2eb5c <__assert_fail@plt+0x1c598>
   2eb48:	bl	12570 <abort@plt>
   2eb4c:	mov	r0, r4
   2eb50:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2eb54:	b	2eb40 <__assert_fail@plt+0x1c57c>
   2eb58:	mov	r0, #0
   2eb5c:	add	sp, sp, #116	; 0x74
   2eb60:	pop	{r4, r5, r6, r7, pc}
   2eb64:	mov	r0, #0
   2eb68:	b	2eb5c <__assert_fail@plt+0x1c598>
   2eb6c:	mov	r0, #0
   2eb70:	b	2eb5c <__assert_fail@plt+0x1c598>
   2eb74:	strdeq	lr, [r2], -ip
   2eb78:	andeq	lr, r2, r4, ror r5
   2eb7c:	andeq	lr, r2, r8, asr r5
   2eb80:	push	{r4, r5, r6, lr}
   2eb84:	mov	r5, r0
   2eb88:	mov	r4, r1
   2eb8c:	ldr	r2, [r0, #48]	; 0x30
   2eb90:	ldr	r3, [pc, #176]	; 2ec48 <__assert_fail@plt+0x1c684>
   2eb94:	and	r3, r3, r2
   2eb98:	cmp	r3, #0
   2eb9c:	beq	2ec04 <__assert_fail@plt+0x1c640>
   2eba0:	mov	r0, #24
   2eba4:	bl	3079c <__assert_fail@plt+0x1e1d8>
   2eba8:	subs	r6, r0, #0
   2ebac:	beq	2ec28 <__assert_fail@plt+0x1c664>
   2ebb0:	ldrd	r2, [r4, #64]	; 0x40
   2ebb4:	strd	r2, [r6]
   2ebb8:	ldrd	r2, [r4, #160]	; 0xa0
   2ebbc:	strd	r2, [r6, #8]
   2ebc0:	str	r4, [r6, #16]
   2ebc4:	mov	r1, r6
   2ebc8:	ldr	r0, [r5, #56]	; 0x38
   2ebcc:	bl	22a2c <__assert_fail@plt+0x10468>
   2ebd0:	mov	r5, r0
   2ebd4:	cmp	r6, r0
   2ebd8:	beq	2ec30 <__assert_fail@plt+0x1c66c>
   2ebdc:	mov	r0, r6
   2ebe0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2ebe4:	cmp	r5, #0
   2ebe8:	beq	2ec38 <__assert_fail@plt+0x1c674>
   2ebec:	ldr	r3, [r5, #16]
   2ebf0:	str	r3, [r4]
   2ebf4:	mov	r3, #2
   2ebf8:	strh	r3, [r4, #56]	; 0x38
   2ebfc:	mov	r0, #1
   2ec00:	pop	{r4, r5, r6, pc}
   2ec04:	add	r1, r1, #64	; 0x40
   2ec08:	ldr	r0, [r0, #56]	; 0x38
   2ec0c:	bl	3f95c <__assert_fail@plt+0x2d398>
   2ec10:	cmp	r0, #0
   2ec14:	beq	2ec40 <__assert_fail@plt+0x1c67c>
   2ec18:	str	r4, [r4]
   2ec1c:	mov	r3, #2
   2ec20:	strh	r3, [r4, #56]	; 0x38
   2ec24:	pop	{r4, r5, r6, pc}
   2ec28:	mov	r0, #0
   2ec2c:	pop	{r4, r5, r6, pc}
   2ec30:	mov	r0, #1
   2ec34:	pop	{r4, r5, r6, pc}
   2ec38:	mov	r0, #0
   2ec3c:	pop	{r4, r5, r6, pc}
   2ec40:	mov	r0, #1
   2ec44:	pop	{r4, r5, r6, pc}
   2ec48:	andeq	r0, r0, r2, lsl #2
   2ec4c:	push	{r4, r5, r6, lr}
   2ec50:	mov	r5, r1
   2ec54:	ldr	r1, [r0, #32]
   2ec58:	cmp	r1, r5
   2ec5c:	movne	r3, #0
   2ec60:	moveq	r3, #1
   2ec64:	cmn	r1, #100	; 0x64
   2ec68:	moveq	r3, #0
   2ec6c:	cmp	r3, #0
   2ec70:	bne	2ecb0 <__assert_fail@plt+0x1c6ec>
   2ec74:	mov	r4, r0
   2ec78:	cmp	r2, #0
   2ec7c:	bne	2ecb4 <__assert_fail@plt+0x1c6f0>
   2ec80:	ldr	r3, [r0, #48]	; 0x30
   2ec84:	lsr	r3, r3, #2
   2ec88:	eor	r3, r3, #1
   2ec8c:	cmp	r1, #0
   2ec90:	movlt	r3, #0
   2ec94:	andge	r3, r3, #1
   2ec98:	cmp	r3, #0
   2ec9c:	beq	2eca8 <__assert_fail@plt+0x1c6e4>
   2eca0:	mov	r0, r1
   2eca4:	bl	1257c <close@plt>
   2eca8:	str	r5, [r4, #32]
   2ecac:	pop	{r4, r5, r6, pc}
   2ecb0:	bl	12570 <abort@plt>
   2ecb4:	add	r0, r0, #60	; 0x3c
   2ecb8:	bl	3fbc4 <__assert_fail@plt+0x2d600>
   2ecbc:	cmp	r0, #0
   2ecc0:	blt	2eca8 <__assert_fail@plt+0x1c6e4>
   2ecc4:	bl	1257c <close@plt>
   2ecc8:	b	2eca8 <__assert_fail@plt+0x1c6e4>
   2eccc:	push	{r4, r5, r6, lr}
   2ecd0:	mov	r4, r0
   2ecd4:	ldr	r3, [r0, #48]	; 0x30
   2ecd8:	ands	r5, r3, #4
   2ecdc:	movne	r5, #0
   2ece0:	bne	2ecfc <__assert_fail@plt+0x1c738>
   2ece4:	tst	r3, #512	; 0x200
   2ece8:	bne	2ed0c <__assert_fail@plt+0x1c748>
   2ecec:	ldr	r0, [r0, #28]
   2ecf0:	bl	124c8 <fchdir@plt>
   2ecf4:	adds	r5, r0, #0
   2ecf8:	movne	r5, #1
   2ecfc:	add	r0, r4, #60	; 0x3c
   2ed00:	bl	2ea30 <__assert_fail@plt+0x1c46c>
   2ed04:	mov	r0, r5
   2ed08:	pop	{r4, r5, r6, pc}
   2ed0c:	mov	r2, #1
   2ed10:	mvn	r1, #99	; 0x63
   2ed14:	bl	2ec4c <__assert_fail@plt+0x1c688>
   2ed18:	b	2ecfc <__assert_fail@plt+0x1c738>
   2ed1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ed20:	sub	sp, sp, #108	; 0x6c
   2ed24:	mov	r4, r0
   2ed28:	mov	r6, r1
   2ed2c:	mov	r5, r2
   2ed30:	subs	r9, r3, #0
   2ed34:	beq	2eed0 <__assert_fail@plt+0x1c90c>
   2ed38:	ldr	r1, [pc, #448]	; 2ef00 <__assert_fail@plt+0x1c93c>
   2ed3c:	mov	r0, r9
   2ed40:	bl	11f1c <strcmp@plt>
   2ed44:	cmp	r0, #0
   2ed48:	bne	2eed0 <__assert_fail@plt+0x1c90c>
   2ed4c:	ldr	r3, [r4, #48]	; 0x30
   2ed50:	tst	r3, #4
   2ed54:	bne	2eedc <__assert_fail@plt+0x1c918>
   2ed58:	cmp	r5, #0
   2ed5c:	bge	2ee6c <__assert_fail@plt+0x1c8a8>
   2ed60:	tst	r3, #512	; 0x200
   2ed64:	beq	2ed7c <__assert_fail@plt+0x1c7b8>
   2ed68:	add	r7, r4, #60	; 0x3c
   2ed6c:	mov	r0, r7
   2ed70:	bl	3fbbc <__assert_fail@plt+0x2d5f8>
   2ed74:	cmp	r0, #0
   2ed78:	beq	2ed9c <__assert_fail@plt+0x1c7d8>
   2ed7c:	mov	r7, #1
   2ed80:	mov	r1, r9
   2ed84:	mov	r0, r4
   2ed88:	bl	2e964 <__assert_fail@plt+0x1c3a0>
   2ed8c:	subs	r8, r0, #0
   2ed90:	bge	2edec <__assert_fail@plt+0x1c828>
   2ed94:	mvn	r4, #0
   2ed98:	b	2ee58 <__assert_fail@plt+0x1c894>
   2ed9c:	mov	r0, r7
   2eda0:	bl	3fc08 <__assert_fail@plt+0x2d644>
   2eda4:	subs	r8, r0, #0
   2eda8:	blt	2ed7c <__assert_fail@plt+0x1c7b8>
   2edac:	ldr	r3, [r4, #48]	; 0x30
   2edb0:	tst	r3, #2
   2edb4:	bne	2ee78 <__assert_fail@plt+0x1c8b4>
   2edb8:	mov	r5, r8
   2edbc:	mov	r7, #1
   2edc0:	ldr	r3, [r4, #48]	; 0x30
   2edc4:	tst	r3, #512	; 0x200
   2edc8:	bne	2ee9c <__assert_fail@plt+0x1c8d8>
   2edcc:	mov	r0, r8
   2edd0:	bl	124c8 <fchdir@plt>
   2edd4:	mov	r4, r0
   2edd8:	b	2ee50 <__assert_fail@plt+0x1c88c>
   2eddc:	cmp	r5, #0
   2ede0:	movge	r8, r5
   2ede4:	movge	r7, #0
   2ede8:	blt	2ee64 <__assert_fail@plt+0x1c8a0>
   2edec:	ldr	r3, [r4, #48]	; 0x30
   2edf0:	tst	r3, #2
   2edf4:	bne	2ee14 <__assert_fail@plt+0x1c850>
   2edf8:	cmp	r9, #0
   2edfc:	beq	2edc0 <__assert_fail@plt+0x1c7fc>
   2ee00:	ldr	r1, [pc, #248]	; 2ef00 <__assert_fail@plt+0x1c93c>
   2ee04:	mov	r0, r9
   2ee08:	bl	11f1c <strcmp@plt>
   2ee0c:	cmp	r0, #0
   2ee10:	bne	2edc0 <__assert_fail@plt+0x1c7fc>
   2ee14:	mov	r2, sp
   2ee18:	mov	r1, r8
   2ee1c:	mov	r0, #3
   2ee20:	bl	1212c <__fxstat64@plt>
   2ee24:	cmp	r0, #0
   2ee28:	bne	2ee4c <__assert_fail@plt+0x1c888>
   2ee2c:	ldrd	r0, [r6, #64]	; 0x40
   2ee30:	ldrd	r2, [sp]
   2ee34:	cmp	r1, r3
   2ee38:	cmpeq	r0, r2
   2ee3c:	beq	2ee84 <__assert_fail@plt+0x1c8c0>
   2ee40:	bl	12318 <__errno_location@plt>
   2ee44:	mov	r3, #2
   2ee48:	str	r3, [r0]
   2ee4c:	mvn	r4, #0
   2ee50:	cmp	r5, #0
   2ee54:	blt	2eeb4 <__assert_fail@plt+0x1c8f0>
   2ee58:	mov	r0, r4
   2ee5c:	add	sp, sp, #108	; 0x6c
   2ee60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ee64:	mov	r7, #0
   2ee68:	b	2ed80 <__assert_fail@plt+0x1c7bc>
   2ee6c:	mov	r8, r5
   2ee70:	mov	r7, #1
   2ee74:	b	2edec <__assert_fail@plt+0x1c828>
   2ee78:	mov	r5, r8
   2ee7c:	mov	r7, #1
   2ee80:	b	2ee14 <__assert_fail@plt+0x1c850>
   2ee84:	ldrd	r0, [r6, #160]	; 0xa0
   2ee88:	ldrd	r2, [sp, #96]	; 0x60
   2ee8c:	cmp	r1, r3
   2ee90:	cmpeq	r0, r2
   2ee94:	bne	2ee40 <__assert_fail@plt+0x1c87c>
   2ee98:	b	2edc0 <__assert_fail@plt+0x1c7fc>
   2ee9c:	eor	r2, r7, #1
   2eea0:	mov	r1, r8
   2eea4:	mov	r0, r4
   2eea8:	bl	2ec4c <__assert_fail@plt+0x1c688>
   2eeac:	mov	r4, #0
   2eeb0:	b	2ee58 <__assert_fail@plt+0x1c894>
   2eeb4:	bl	12318 <__errno_location@plt>
   2eeb8:	mov	r5, r0
   2eebc:	ldr	r6, [r0]
   2eec0:	mov	r0, r8
   2eec4:	bl	1257c <close@plt>
   2eec8:	str	r6, [r5]
   2eecc:	b	2ee58 <__assert_fail@plt+0x1c894>
   2eed0:	ldr	r3, [r4, #48]	; 0x30
   2eed4:	tst	r3, #4
   2eed8:	beq	2eddc <__assert_fail@plt+0x1c818>
   2eedc:	mvn	r2, r5
   2eee0:	lsr	r2, r2, #31
   2eee4:	ands	r3, r2, r3, lsr #9
   2eee8:	moveq	r4, #0
   2eeec:	beq	2ee58 <__assert_fail@plt+0x1c894>
   2eef0:	mov	r0, r5
   2eef4:	bl	1257c <close@plt>
   2eef8:	mov	r4, #0
   2eefc:	b	2ee58 <__assert_fail@plt+0x1c894>
   2ef00:	muleq	r4, r8, r1
   2ef04:	push	{r4, r5, lr}
   2ef08:	sub	sp, sp, #28
   2ef0c:	ldr	r2, [r0, #48]	; 0x30
   2ef10:	ldr	r3, [pc, #172]	; 2efc4 <__assert_fail@plt+0x1ca00>
   2ef14:	and	r3, r3, r2
   2ef18:	cmp	r3, #0
   2ef1c:	bne	2ef64 <__assert_fail@plt+0x1c9a0>
   2ef20:	ldr	ip, [r1, #4]
   2ef24:	cmp	ip, #0
   2ef28:	beq	2ef5c <__assert_fail@plt+0x1c998>
   2ef2c:	ldr	r3, [ip, #48]	; 0x30
   2ef30:	cmp	r3, #0
   2ef34:	blt	2ef5c <__assert_fail@plt+0x1c998>
   2ef38:	ldr	lr, [r0, #56]	; 0x38
   2ef3c:	ldrd	r2, [lr, #16]
   2ef40:	orrs	r3, r2, r3
   2ef44:	beq	2ef94 <__assert_fail@plt+0x1c9d0>
   2ef48:	ldrd	r4, [lr]
   2ef4c:	ldrd	r2, [r1, #160]	; 0xa0
   2ef50:	cmp	r5, r3
   2ef54:	cmpeq	r4, r2
   2ef58:	beq	2ef98 <__assert_fail@plt+0x1c9d4>
   2ef5c:	add	sp, sp, #28
   2ef60:	pop	{r4, r5, pc}
   2ef64:	ldrd	r2, [r1, #64]	; 0x40
   2ef68:	strd	r2, [sp]
   2ef6c:	ldrd	r2, [r1, #160]	; 0xa0
   2ef70:	strd	r2, [sp, #8]
   2ef74:	mov	r1, sp
   2ef78:	ldr	r0, [r0, #56]	; 0x38
   2ef7c:	bl	22a64 <__assert_fail@plt+0x104a0>
   2ef80:	cmp	r0, #0
   2ef84:	beq	2ef90 <__assert_fail@plt+0x1c9cc>
   2ef88:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2ef8c:	b	2ef5c <__assert_fail@plt+0x1c998>
   2ef90:	bl	12570 <abort@plt>
   2ef94:	bl	12570 <abort@plt>
   2ef98:	ldrd	r2, [lr, #8]
   2ef9c:	ldrd	r4, [r1, #64]	; 0x40
   2efa0:	cmp	r3, r5
   2efa4:	cmpeq	r2, r4
   2efa8:	bne	2ef5c <__assert_fail@plt+0x1c998>
   2efac:	ldrd	r2, [ip, #64]	; 0x40
   2efb0:	strd	r2, [lr, #8]
   2efb4:	ldr	r3, [r0, #56]	; 0x38
   2efb8:	ldrd	r0, [ip, #160]	; 0xa0
   2efbc:	strd	r0, [r3]
   2efc0:	b	2ef5c <__assert_fail@plt+0x1c998>
   2efc4:	andeq	r0, r0, r2, lsl #2
   2efc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efcc:	sub	sp, sp, #68	; 0x44
   2efd0:	mov	r5, r0
   2efd4:	str	r1, [sp, #40]	; 0x28
   2efd8:	ldr	r9, [r0]
   2efdc:	ldr	r3, [r9, #12]
   2efe0:	str	r3, [sp, #44]	; 0x2c
   2efe4:	cmp	r3, #0
   2efe8:	beq	2f0e8 <__assert_fail@plt+0x1cb24>
   2efec:	mov	r0, r3
   2eff0:	bl	124bc <dirfd@plt>
   2eff4:	str	r0, [sp, #60]	; 0x3c
   2eff8:	cmp	r0, #0
   2effc:	blt	2f0a4 <__assert_fail@plt+0x1cae0>
   2f000:	ldr	r3, [r5, #44]	; 0x2c
   2f004:	cmp	r3, #0
   2f008:	ldr	r3, [pc, #2472]	; 2f9b8 <__assert_fail@plt+0x1d3f4>
   2f00c:	mvnne	r3, #0
   2f010:	str	r3, [sp, #24]
   2f014:	mov	r3, #1
   2f018:	str	r3, [sp, #52]	; 0x34
   2f01c:	ldr	r3, [r9, #40]	; 0x28
   2f020:	mov	r1, r3
   2f024:	sub	r3, r3, #1
   2f028:	ldr	r2, [r9, #28]
   2f02c:	ldrb	r2, [r2, r3]
   2f030:	cmp	r2, #47	; 0x2f
   2f034:	moveq	r1, r3
   2f038:	str	r1, [sp, #32]
   2f03c:	ldr	r3, [r5, #48]	; 0x30
   2f040:	tst	r3, #4
   2f044:	ldrne	r3, [r5, #24]
   2f048:	addne	r2, r3, r1
   2f04c:	addne	r2, r2, #1
   2f050:	strne	r2, [sp, #28]
   2f054:	movne	r2, #47	; 0x2f
   2f058:	strbne	r2, [r3, r1]
   2f05c:	moveq	r3, #0
   2f060:	streq	r3, [sp, #28]
   2f064:	ldr	r3, [sp, #32]
   2f068:	add	r3, r3, #1
   2f06c:	str	r3, [sp, #12]
   2f070:	ldr	fp, [r5, #36]	; 0x24
   2f074:	sub	fp, fp, r3
   2f078:	ldr	r3, [r9, #48]	; 0x30
   2f07c:	add	r3, r3, #1
   2f080:	str	r3, [sp, #20]
   2f084:	mov	r3, #0
   2f088:	str	r3, [sp, #48]	; 0x30
   2f08c:	str	r3, [sp, #36]	; 0x24
   2f090:	str	r3, [sp, #4]
   2f094:	mov	r8, r3
   2f098:	str	r3, [sp, #8]
   2f09c:	mov	sl, r3
   2f0a0:	b	2f618 <__assert_fail@plt+0x1d054>
   2f0a4:	ldr	r0, [r9, #12]
   2f0a8:	bl	12594 <closedir@plt>
   2f0ac:	mov	r3, #0
   2f0b0:	str	r3, [r9, #12]
   2f0b4:	ldr	r3, [sp, #40]	; 0x28
   2f0b8:	cmp	r3, #3
   2f0bc:	movne	r3, #0
   2f0c0:	strne	r3, [sp, #8]
   2f0c4:	bne	2f488 <__assert_fail@plt+0x1cec4>
   2f0c8:	mov	r3, #4
   2f0cc:	strh	r3, [r9, #56]	; 0x38
   2f0d0:	bl	12318 <__errno_location@plt>
   2f0d4:	ldr	r3, [r0]
   2f0d8:	str	r3, [r9, #32]
   2f0dc:	mov	r3, #0
   2f0e0:	str	r3, [sp, #8]
   2f0e4:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f0e8:	ldr	r3, [r0, #48]	; 0x30
   2f0ec:	and	r2, r3, #516	; 0x204
   2f0f0:	cmp	r2, #512	; 0x200
   2f0f4:	ldreq	r0, [r0, #32]
   2f0f8:	mvnne	r0, #99	; 0x63
   2f0fc:	ldr	r1, [r9, #24]
   2f100:	ands	r2, r3, #16
   2f104:	beq	2f124 <__assert_fail@plt+0x1cb60>
   2f108:	tst	r3, #1
   2f10c:	moveq	r2, #32768	; 0x8000
   2f110:	beq	2f124 <__assert_fail@plt+0x1cb60>
   2f114:	ldr	r2, [r9, #48]	; 0x30
   2f118:	cmp	r2, #0
   2f11c:	movne	r2, #32768	; 0x8000
   2f120:	moveq	r2, #0
   2f124:	add	r3, sp, #60	; 0x3c
   2f128:	bl	41964 <__assert_fail@plt+0x2f3a0>
   2f12c:	str	r0, [r9, #12]
   2f130:	cmp	r0, #0
   2f134:	beq	2f228 <__assert_fail@plt+0x1cc64>
   2f138:	ldrh	r3, [r9, #56]	; 0x38
   2f13c:	cmp	r3, #11
   2f140:	beq	2f25c <__assert_fail@plt+0x1cc98>
   2f144:	ldr	r3, [r5, #48]	; 0x30
   2f148:	tst	r3, #256	; 0x100
   2f14c:	bne	2f274 <__assert_fail@plt+0x1ccb0>
   2f150:	ldr	r3, [r5, #44]	; 0x2c
   2f154:	cmp	r3, #0
   2f158:	ldr	r3, [pc, #2136]	; 2f9b8 <__assert_fail@plt+0x1d3f4>
   2f15c:	mvnne	r3, #0
   2f160:	str	r3, [sp, #24]
   2f164:	ldr	r3, [sp, #40]	; 0x28
   2f168:	cmp	r3, #2
   2f16c:	beq	2f364 <__assert_fail@plt+0x1cda0>
   2f170:	ldr	r3, [r5, #48]	; 0x30
   2f174:	and	r3, r3, #56	; 0x38
   2f178:	cmp	r3, #24
   2f17c:	beq	2f2bc <__assert_fail@plt+0x1ccf8>
   2f180:	ldr	r3, [sp, #40]	; 0x28
   2f184:	cmp	r3, #3
   2f188:	movne	r6, #0
   2f18c:	moveq	r6, #1
   2f190:	mov	r4, #1
   2f194:	ldr	r3, [r5, #48]	; 0x30
   2f198:	tst	r3, #512	; 0x200
   2f19c:	bne	2f34c <__assert_fail@plt+0x1cd88>
   2f1a0:	ldr	r2, [sp, #60]	; 0x3c
   2f1a4:	cmp	r2, #0
   2f1a8:	blt	2f1cc <__assert_fail@plt+0x1cc08>
   2f1ac:	mov	r3, #0
   2f1b0:	mov	r1, r9
   2f1b4:	mov	r0, r5
   2f1b8:	bl	2ed1c <__assert_fail@plt+0x1c758>
   2f1bc:	cmp	r0, #0
   2f1c0:	moveq	r3, #1
   2f1c4:	streq	r3, [sp, #52]	; 0x34
   2f1c8:	beq	2f01c <__assert_fail@plt+0x1ca58>
   2f1cc:	tst	r4, r6
   2f1d0:	beq	2f1e0 <__assert_fail@plt+0x1cc1c>
   2f1d4:	bl	12318 <__errno_location@plt>
   2f1d8:	ldr	r3, [r0]
   2f1dc:	str	r3, [r9, #32]
   2f1e0:	ldrh	r3, [r9, #58]	; 0x3a
   2f1e4:	orr	r3, r3, #1
   2f1e8:	strh	r3, [r9, #58]	; 0x3a
   2f1ec:	ldr	r0, [r9, #12]
   2f1f0:	bl	12594 <closedir@plt>
   2f1f4:	mov	r3, #0
   2f1f8:	str	r3, [r9, #12]
   2f1fc:	ldr	r3, [r5, #48]	; 0x30
   2f200:	tst	r3, #512	; 0x200
   2f204:	beq	2f218 <__assert_fail@plt+0x1cc54>
   2f208:	ldr	r0, [sp, #60]	; 0x3c
   2f20c:	cmp	r0, #0
   2f210:	blt	2f218 <__assert_fail@plt+0x1cc54>
   2f214:	bl	1257c <close@plt>
   2f218:	mov	r3, #0
   2f21c:	str	r3, [r9, #12]
   2f220:	str	r3, [sp, #52]	; 0x34
   2f224:	b	2f01c <__assert_fail@plt+0x1ca58>
   2f228:	ldr	r3, [sp, #40]	; 0x28
   2f22c:	cmp	r3, #3
   2f230:	movne	r3, #0
   2f234:	strne	r3, [sp, #8]
   2f238:	bne	2f488 <__assert_fail@plt+0x1cec4>
   2f23c:	mov	r3, #4
   2f240:	strh	r3, [r9, #56]	; 0x38
   2f244:	bl	12318 <__errno_location@plt>
   2f248:	ldr	r3, [r0]
   2f24c:	str	r3, [r9, #32]
   2f250:	mov	r3, #0
   2f254:	str	r3, [sp, #8]
   2f258:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f25c:	mov	r2, #0
   2f260:	mov	r1, r9
   2f264:	mov	r0, r5
   2f268:	bl	2e640 <__assert_fail@plt+0x1c07c>
   2f26c:	strh	r0, [r9, #56]	; 0x38
   2f270:	b	2f150 <__assert_fail@plt+0x1cb8c>
   2f274:	mov	r1, r9
   2f278:	mov	r0, r5
   2f27c:	bl	2ef04 <__assert_fail@plt+0x1c940>
   2f280:	mov	r2, #0
   2f284:	mov	r1, r9
   2f288:	mov	r0, r5
   2f28c:	bl	2e640 <__assert_fail@plt+0x1c07c>
   2f290:	mov	r1, r9
   2f294:	mov	r0, r5
   2f298:	bl	2eb80 <__assert_fail@plt+0x1c5bc>
   2f29c:	cmp	r0, #0
   2f2a0:	bne	2f150 <__assert_fail@plt+0x1cb8c>
   2f2a4:	bl	12318 <__errno_location@plt>
   2f2a8:	mov	r3, #12
   2f2ac:	str	r3, [r0]
   2f2b0:	mov	r3, #0
   2f2b4:	str	r3, [sp, #8]
   2f2b8:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f2bc:	ldr	r3, [r9, #84]	; 0x54
   2f2c0:	cmp	r3, #2
   2f2c4:	bne	2f180 <__assert_fail@plt+0x1cbbc>
   2f2c8:	ldr	r1, [sp, #60]	; 0x3c
   2f2cc:	mov	r0, r9
   2f2d0:	bl	2ea64 <__assert_fail@plt+0x1c4a0>
   2f2d4:	ldr	r3, [pc, #1760]	; 2f9bc <__assert_fail@plt+0x1d3f8>
   2f2d8:	cmp	r0, r3
   2f2dc:	beq	2f334 <__assert_fail@plt+0x1cd70>
   2f2e0:	bgt	2f31c <__assert_fail@plt+0x1cd58>
   2f2e4:	ldr	r3, [pc, #1748]	; 2f9c0 <__assert_fail@plt+0x1d3fc>
   2f2e8:	cmp	r0, r3
   2f2ec:	beq	2f334 <__assert_fail@plt+0x1cd70>
   2f2f0:	cmp	r0, #0
   2f2f4:	beq	2f334 <__assert_fail@plt+0x1cd70>
   2f2f8:	ldr	r3, [sp, #40]	; 0x28
   2f2fc:	cmp	r3, #3
   2f300:	moveq	r6, #1
   2f304:	movne	r6, #0
   2f308:	movne	r3, #0
   2f30c:	strne	r3, [sp, #52]	; 0x34
   2f310:	bne	2f01c <__assert_fail@plt+0x1ca58>
   2f314:	mov	r4, #0
   2f318:	b	2f194 <__assert_fail@plt+0x1cbd0>
   2f31c:	ldr	r3, [pc, #1696]	; 2f9c4 <__assert_fail@plt+0x1d400>
   2f320:	cmp	r0, r3
   2f324:	beq	2f334 <__assert_fail@plt+0x1cd70>
   2f328:	ldr	r3, [pc, #1688]	; 2f9c8 <__assert_fail@plt+0x1d404>
   2f32c:	cmp	r0, r3
   2f330:	bne	2f2f8 <__assert_fail@plt+0x1cd34>
   2f334:	ldr	r3, [sp, #40]	; 0x28
   2f338:	cmp	r3, #3
   2f33c:	movne	r6, #0
   2f340:	moveq	r6, #1
   2f344:	mov	r4, #1
   2f348:	b	2f194 <__assert_fail@plt+0x1cbd0>
   2f34c:	mov	r2, #3
   2f350:	ldr	r1, [pc, #1652]	; 2f9cc <__assert_fail@plt+0x1d408>
   2f354:	ldr	r0, [sp, #60]	; 0x3c
   2f358:	bl	2e140 <__assert_fail@plt+0x1bb7c>
   2f35c:	str	r0, [sp, #60]	; 0x3c
   2f360:	b	2f1a0 <__assert_fail@plt+0x1cbdc>
   2f364:	mov	r3, #0
   2f368:	str	r3, [sp, #52]	; 0x34
   2f36c:	b	2f01c <__assert_fail@plt+0x1ca58>
   2f370:	ldr	r3, [sp, #16]
   2f374:	ldr	r3, [r3]
   2f378:	cmp	r3, #0
   2f37c:	beq	2f3a8 <__assert_fail@plt+0x1cde4>
   2f380:	str	r3, [r9, #32]
   2f384:	ldr	r3, [sp, #44]	; 0x2c
   2f388:	cmp	r8, #0
   2f38c:	cmpeq	r3, #0
   2f390:	movne	r3, #1
   2f394:	moveq	r3, #0
   2f398:	cmp	r3, #0
   2f39c:	movne	r3, #7
   2f3a0:	moveq	r3, #4
   2f3a4:	strh	r3, [r9, #56]	; 0x38
   2f3a8:	ldr	r0, [r9, #12]
   2f3ac:	cmp	r0, #0
   2f3b0:	beq	2f3c0 <__assert_fail@plt+0x1cdfc>
   2f3b4:	bl	12594 <closedir@plt>
   2f3b8:	mov	r3, #0
   2f3bc:	str	r3, [r9, #12]
   2f3c0:	ldr	r3, [sp, #36]	; 0x24
   2f3c4:	cmp	r3, #0
   2f3c8:	bne	2f808 <__assert_fail@plt+0x1d244>
   2f3cc:	ldr	r3, [r5, #48]	; 0x30
   2f3d0:	tst	r3, #4
   2f3d4:	beq	2f400 <__assert_fail@plt+0x1ce3c>
   2f3d8:	ldr	r3, [r5, #36]	; 0x24
   2f3dc:	ldr	r2, [sp, #12]
   2f3e0:	cmp	r8, #0
   2f3e4:	cmpne	r3, r2
   2f3e8:	ldreq	r3, [sp, #28]
   2f3ec:	subeq	r3, r3, #1
   2f3f0:	streq	r3, [sp, #28]
   2f3f4:	mov	r3, #0
   2f3f8:	ldr	r2, [sp, #28]
   2f3fc:	strb	r3, [r2]
   2f400:	ldr	r3, [sp, #52]	; 0x34
   2f404:	ldr	r2, [sp, #44]	; 0x2c
   2f408:	cmp	r2, #0
   2f40c:	movne	r3, #0
   2f410:	andeq	r3, r3, #1
   2f414:	cmp	r3, #0
   2f418:	beq	2f450 <__assert_fail@plt+0x1ce8c>
   2f41c:	ldr	r3, [sp, #40]	; 0x28
   2f420:	cmp	r8, #0
   2f424:	cmpne	r3, #1
   2f428:	bne	2f450 <__assert_fail@plt+0x1ce8c>
   2f42c:	ldr	r3, [r9, #48]	; 0x30
   2f430:	cmp	r3, #0
   2f434:	bne	2f888 <__assert_fail@plt+0x1d2c4>
   2f438:	mov	r0, r5
   2f43c:	bl	2eccc <__assert_fail@plt+0x1c708>
   2f440:	adds	r0, r0, #0
   2f444:	movne	r0, #1
   2f448:	cmp	r0, #0
   2f44c:	bne	2f8a8 <__assert_fail@plt+0x1d2e4>
   2f450:	cmp	r8, #0
   2f454:	beq	2f8d0 <__assert_fail@plt+0x1d30c>
   2f458:	ldr	r3, [sp, #48]	; 0x30
   2f45c:	cmp	r3, #0
   2f460:	bne	2f908 <__assert_fail@plt+0x1d344>
   2f464:	ldr	r3, [r5, #44]	; 0x2c
   2f468:	cmp	r3, #0
   2f46c:	cmpne	r8, #1
   2f470:	bls	2f488 <__assert_fail@plt+0x1cec4>
   2f474:	mov	r2, r8
   2f478:	ldr	r1, [sp, #8]
   2f47c:	mov	r0, r5
   2f480:	bl	2e798 <__assert_fail@plt+0x1c1d4>
   2f484:	str	r0, [sp, #8]
   2f488:	ldr	r0, [sp, #8]
   2f48c:	add	sp, sp, #68	; 0x44
   2f490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f494:	ldrb	r3, [r7, #20]
   2f498:	cmp	r3, #0
   2f49c:	beq	2f800 <__assert_fail@plt+0x1d23c>
   2f4a0:	ldrh	r3, [r7, #20]
   2f4a4:	cmp	r3, #46	; 0x2e
   2f4a8:	bne	2f658 <__assert_fail@plt+0x1d094>
   2f4ac:	ldr	r4, [sp, #4]
   2f4b0:	b	2f614 <__assert_fail@plt+0x1d050>
   2f4b4:	ldr	fp, [r5, #24]
   2f4b8:	ldr	r3, [sp, #32]
   2f4bc:	add	r1, r3, #2
   2f4c0:	add	r1, r1, r6
   2f4c4:	mov	r0, r5
   2f4c8:	bl	2e5d0 <__assert_fail@plt+0x1c00c>
   2f4cc:	cmp	r0, #0
   2f4d0:	beq	2f508 <__assert_fail@plt+0x1cf44>
   2f4d4:	ldr	r3, [r5, #24]
   2f4d8:	cmp	fp, r3
   2f4dc:	beq	2f550 <__assert_fail@plt+0x1cf8c>
   2f4e0:	ldr	r2, [r5, #48]	; 0x30
   2f4e4:	tst	r2, #4
   2f4e8:	ldrne	r2, [sp, #12]
   2f4ec:	addne	r3, r3, r2
   2f4f0:	strne	r3, [sp, #28]
   2f4f4:	ldr	fp, [r5, #36]	; 0x24
   2f4f8:	ldr	r3, [sp, #12]
   2f4fc:	sub	fp, fp, r3
   2f500:	str	r0, [sp, #36]	; 0x24
   2f504:	b	2f688 <__assert_fail@plt+0x1d0c4>
   2f508:	ldr	r7, [sp, #16]
   2f50c:	ldr	r6, [r7]
   2f510:	mov	r0, r4
   2f514:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2f518:	ldr	r0, [sp, #8]
   2f51c:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2f520:	ldr	r0, [r9, #12]
   2f524:	bl	12594 <closedir@plt>
   2f528:	mov	r2, #0
   2f52c:	str	r2, [r9, #12]
   2f530:	mov	r3, #7
   2f534:	strh	r3, [r9, #56]	; 0x38
   2f538:	ldr	r3, [r5, #48]	; 0x30
   2f53c:	orr	r3, r3, #8192	; 0x2000
   2f540:	str	r3, [r5, #48]	; 0x30
   2f544:	str	r6, [r7]
   2f548:	str	r2, [sp, #8]
   2f54c:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f550:	ldr	r0, [sp, #36]	; 0x24
   2f554:	b	2f4f4 <__assert_fail@plt+0x1cf30>
   2f558:	mov	r0, r4
   2f55c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2f560:	ldr	r0, [sp, #8]
   2f564:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2f568:	ldr	r0, [r9, #12]
   2f56c:	bl	12594 <closedir@plt>
   2f570:	mov	r2, #0
   2f574:	str	r2, [r9, #12]
   2f578:	mov	r3, #7
   2f57c:	strh	r3, [r9, #56]	; 0x38
   2f580:	ldr	r3, [r5, #48]	; 0x30
   2f584:	orr	r3, r3, #8192	; 0x2000
   2f588:	str	r3, [r5, #48]	; 0x30
   2f58c:	mov	r3, #36	; 0x24
   2f590:	ldr	r1, [sp, #16]
   2f594:	str	r3, [r1]
   2f598:	str	r2, [sp, #8]
   2f59c:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f5a0:	ldr	r3, [r4, #28]
   2f5a4:	str	r3, [r4, #24]
   2f5a8:	ldr	r2, [r4, #52]	; 0x34
   2f5ac:	add	r2, r2, #1
   2f5b0:	add	r1, r4, #168	; 0xa8
   2f5b4:	ldr	r0, [sp, #28]
   2f5b8:	bl	11f94 <memmove@plt>
   2f5bc:	b	2f6c4 <__assert_fail@plt+0x1d100>
   2f5c0:	mov	r3, sl
   2f5c4:	mov	r2, #16384	; 0x4000
   2f5c8:	str	r2, [r4, #80]	; 0x50
   2f5cc:	cmp	r3, #0
   2f5d0:	movne	r2, #1
   2f5d4:	moveq	r2, #2
   2f5d8:	mov	r3, #0
   2f5dc:	strd	r2, [r4, #112]	; 0x70
   2f5e0:	str	sl, [r4, #8]
   2f5e4:	ldr	r3, [sp, #8]
   2f5e8:	cmp	r3, #0
   2f5ec:	ldrne	r3, [sp, #4]
   2f5f0:	strne	r4, [r3, #8]
   2f5f4:	streq	r4, [sp, #8]
   2f5f8:	ldr	r3, [pc, #976]	; 2f9d0 <__assert_fail@plt+0x1d40c>
   2f5fc:	cmp	r8, r3
   2f600:	beq	2f7b4 <__assert_fail@plt+0x1d1f0>
   2f604:	add	r8, r8, #1
   2f608:	ldr	r3, [sp, #24]
   2f60c:	cmp	r8, r3
   2f610:	bcs	2f3c0 <__assert_fail@plt+0x1cdfc>
   2f614:	str	r4, [sp, #4]
   2f618:	ldr	r3, [r9, #12]
   2f61c:	cmp	r3, #0
   2f620:	beq	2f3c0 <__assert_fail@plt+0x1cdfc>
   2f624:	bl	12318 <__errno_location@plt>
   2f628:	str	r0, [sp, #16]
   2f62c:	str	sl, [r0]
   2f630:	ldr	r0, [r9, #12]
   2f634:	bl	1248c <readdir64@plt>
   2f638:	subs	r7, r0, #0
   2f63c:	beq	2f370 <__assert_fail@plt+0x1cdac>
   2f640:	ldr	r3, [r5, #48]	; 0x30
   2f644:	tst	r3, #32
   2f648:	bne	2f658 <__assert_fail@plt+0x1d094>
   2f64c:	ldrb	r3, [r7, #19]
   2f650:	cmp	r3, #46	; 0x2e
   2f654:	beq	2f494 <__assert_fail@plt+0x1ced0>
   2f658:	add	r4, r7, #19
   2f65c:	mov	r0, r4
   2f660:	bl	122d0 <strlen@plt>
   2f664:	mov	r6, r0
   2f668:	mov	r2, r0
   2f66c:	mov	r1, r4
   2f670:	mov	r0, r5
   2f674:	bl	2e86c <__assert_fail@plt+0x1c2a8>
   2f678:	subs	r4, r0, #0
   2f67c:	beq	2f508 <__assert_fail@plt+0x1cf44>
   2f680:	cmp	fp, r6
   2f684:	bls	2f4b4 <__assert_fail@plt+0x1cef0>
   2f688:	ldr	r3, [sp, #12]
   2f68c:	adds	r6, r3, r6
   2f690:	bcs	2f558 <__assert_fail@plt+0x1cf94>
   2f694:	ldr	r3, [sp, #20]
   2f698:	str	r3, [r4, #48]	; 0x30
   2f69c:	ldr	r3, [r5]
   2f6a0:	str	r3, [r4, #4]
   2f6a4:	str	r6, [r4, #40]	; 0x28
   2f6a8:	ldrd	r2, [r7]
   2f6ac:	strd	r2, [r4, #160]	; 0xa0
   2f6b0:	ldr	r3, [r5, #48]	; 0x30
   2f6b4:	tst	r3, #4
   2f6b8:	addeq	r3, r4, #168	; 0xa8
   2f6bc:	streq	r3, [r4, #24]
   2f6c0:	bne	2f5a0 <__assert_fail@plt+0x1cfdc>
   2f6c4:	ldr	r3, [r5, #44]	; 0x2c
   2f6c8:	cmp	r3, #0
   2f6cc:	beq	2f6dc <__assert_fail@plt+0x1d118>
   2f6d0:	ldr	r3, [r5, #48]	; 0x30
   2f6d4:	tst	r3, #1024	; 0x400
   2f6d8:	beq	2f79c <__assert_fail@plt+0x1d1d8>
   2f6dc:	ldr	r3, [r5, #48]	; 0x30
   2f6e0:	tst	r3, #8
   2f6e4:	beq	2f96c <__assert_fail@plt+0x1d3a8>
   2f6e8:	ldrb	r2, [r7, #18]
   2f6ec:	tst	r2, #251	; 0xfb
   2f6f0:	beq	2f96c <__assert_fail@plt+0x1d3a8>
   2f6f4:	lsr	r3, r3, #4
   2f6f8:	and	r3, r3, #1
   2f6fc:	cmp	r2, #10
   2f700:	orrne	r3, r3, #1
   2f704:	cmp	r3, #0
   2f708:	beq	2f96c <__assert_fail@plt+0x1d3a8>
   2f70c:	mov	r2, #11
   2f710:	strh	r2, [r4, #56]	; 0x38
   2f714:	ldrb	r2, [r7, #18]
   2f718:	sub	r2, r2, #1
   2f71c:	cmp	r2, #11
   2f720:	ldrls	pc, [pc, r2, lsl #2]
   2f724:	b	2f78c <__assert_fail@plt+0x1d1c8>
   2f728:	andeq	pc, r2, ip, asr r7	; <UNPREDICTABLE>
   2f72c:	muleq	r2, r4, r7
   2f730:	andeq	pc, r2, ip, lsl #15
   2f734:	andeq	pc, r2, r4, asr #11
   2f738:	andeq	pc, r2, ip, lsl #15
   2f73c:	andeq	pc, r2, r0, lsr r9	; <UNPREDICTABLE>
   2f740:	andeq	pc, r2, ip, lsl #15
   2f744:	andeq	pc, r2, r4, ror r7	; <UNPREDICTABLE>
   2f748:	andeq	pc, r2, ip, lsl #15
   2f74c:	andeq	pc, r2, r8, ror #14
   2f750:	andeq	pc, r2, ip, lsl #15
   2f754:	andeq	pc, r2, r0, lsl #15
   2f758:	mov	r3, sl
   2f75c:	mov	r2, #4096	; 0x1000
   2f760:	b	2f5c8 <__assert_fail@plt+0x1d004>
   2f764:	mov	r3, sl
   2f768:	mov	r2, #40960	; 0xa000
   2f76c:	b	2f5c8 <__assert_fail@plt+0x1d004>
   2f770:	mov	r3, sl
   2f774:	mov	r2, #32768	; 0x8000
   2f778:	b	2f5c8 <__assert_fail@plt+0x1d004>
   2f77c:	mov	r3, sl
   2f780:	mov	r2, #49152	; 0xc000
   2f784:	b	2f5c8 <__assert_fail@plt+0x1d004>
   2f788:	mov	r3, sl
   2f78c:	mov	r2, sl
   2f790:	b	2f5c8 <__assert_fail@plt+0x1d004>
   2f794:	mov	r2, #8192	; 0x2000
   2f798:	b	2f5c8 <__assert_fail@plt+0x1d004>
   2f79c:	mov	r2, sl
   2f7a0:	mov	r1, r4
   2f7a4:	mov	r0, r5
   2f7a8:	bl	2e640 <__assert_fail@plt+0x1c07c>
   2f7ac:	strh	r0, [r4, #56]	; 0x38
   2f7b0:	b	2f5e0 <__assert_fail@plt+0x1d01c>
   2f7b4:	ldr	r3, [r5, #44]	; 0x2c
   2f7b8:	cmp	r3, #0
   2f7bc:	bne	2f604 <__assert_fail@plt+0x1d040>
   2f7c0:	ldr	r1, [sp, #60]	; 0x3c
   2f7c4:	mov	r0, r9
   2f7c8:	bl	2ea64 <__assert_fail@plt+0x1c4a0>
   2f7cc:	ldr	r3, [pc, #488]	; 2f9bc <__assert_fail@plt+0x1d3f8>
   2f7d0:	cmp	r0, r3
   2f7d4:	beq	2f7f8 <__assert_fail@plt+0x1d234>
   2f7d8:	ldr	r3, [pc, #500]	; 2f9d4 <__assert_fail@plt+0x1d410>
   2f7dc:	cmp	r0, r3
   2f7e0:	beq	2f7f8 <__assert_fail@plt+0x1d234>
   2f7e4:	ldr	r3, [pc, #468]	; 2f9c0 <__assert_fail@plt+0x1d3fc>
   2f7e8:	cmp	r0, r3
   2f7ec:	movne	r3, #1
   2f7f0:	strne	r3, [sp, #48]	; 0x30
   2f7f4:	bne	2f604 <__assert_fail@plt+0x1d040>
   2f7f8:	str	sl, [sp, #48]	; 0x30
   2f7fc:	b	2f604 <__assert_fail@plt+0x1d040>
   2f800:	ldr	r4, [sp, #4]
   2f804:	b	2f614 <__assert_fail@plt+0x1d050>
   2f808:	ldr	r0, [r5, #24]
   2f80c:	ldr	r1, [r5, #4]
   2f810:	cmp	r1, #0
   2f814:	beq	2f844 <__assert_fail@plt+0x1d280>
   2f818:	ldr	r3, [r1, #24]
   2f81c:	add	r2, r1, #168	; 0xa8
   2f820:	cmp	r3, r2
   2f824:	ldrne	r2, [r1, #28]
   2f828:	subne	r3, r3, r2
   2f82c:	addne	r3, r0, r3
   2f830:	strne	r3, [r1, #24]
   2f834:	str	r0, [r1, #28]
   2f838:	ldr	r1, [r1, #8]
   2f83c:	cmp	r1, #0
   2f840:	bne	2f818 <__assert_fail@plt+0x1d254>
   2f844:	ldr	r3, [sp, #8]
   2f848:	ldr	r2, [r3, #48]	; 0x30
   2f84c:	cmp	r2, #0
   2f850:	blt	2f3cc <__assert_fail@plt+0x1ce08>
   2f854:	ldr	r2, [r3, #24]
   2f858:	add	r1, r3, #168	; 0xa8
   2f85c:	cmp	r2, r1
   2f860:	ldrne	r1, [r3, #28]
   2f864:	subne	r2, r2, r1
   2f868:	addne	r2, r0, r2
   2f86c:	strne	r2, [r3, #24]
   2f870:	str	r0, [r3, #28]
   2f874:	ldr	r2, [r3, #8]
   2f878:	cmp	r2, #0
   2f87c:	ldreq	r2, [r3, #4]
   2f880:	mov	r3, r2
   2f884:	b	2f848 <__assert_fail@plt+0x1d284>
   2f888:	ldr	r3, [pc, #328]	; 2f9d8 <__assert_fail@plt+0x1d414>
   2f88c:	mvn	r2, #0
   2f890:	ldr	r1, [r9, #4]
   2f894:	mov	r0, r5
   2f898:	bl	2ed1c <__assert_fail@plt+0x1c758>
   2f89c:	adds	r0, r0, #0
   2f8a0:	movne	r0, #1
   2f8a4:	b	2f448 <__assert_fail@plt+0x1ce84>
   2f8a8:	mov	r3, #7
   2f8ac:	strh	r3, [r9, #56]	; 0x38
   2f8b0:	ldr	r3, [r5, #48]	; 0x30
   2f8b4:	orr	r3, r3, #8192	; 0x2000
   2f8b8:	str	r3, [r5, #48]	; 0x30
   2f8bc:	ldr	r0, [sp, #8]
   2f8c0:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2f8c4:	mov	r3, #0
   2f8c8:	str	r3, [sp, #8]
   2f8cc:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f8d0:	ldr	r3, [sp, #40]	; 0x28
   2f8d4:	cmp	r3, #3
   2f8d8:	beq	2f8f0 <__assert_fail@plt+0x1d32c>
   2f8dc:	ldr	r0, [sp, #8]
   2f8e0:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2f8e4:	mov	r3, #0
   2f8e8:	str	r3, [sp, #8]
   2f8ec:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f8f0:	ldrh	r3, [r9, #56]	; 0x38
   2f8f4:	cmp	r3, #4
   2f8f8:	cmpne	r3, #7
   2f8fc:	movne	r3, #6
   2f900:	strhne	r3, [r9, #56]	; 0x38
   2f904:	b	2f8dc <__assert_fail@plt+0x1d318>
   2f908:	ldr	r3, [pc, #204]	; 2f9dc <__assert_fail@plt+0x1d418>
   2f90c:	str	r3, [r5, #44]	; 0x2c
   2f910:	mov	r2, r8
   2f914:	ldr	r1, [sp, #8]
   2f918:	mov	r0, r5
   2f91c:	bl	2e798 <__assert_fail@plt+0x1c1d4>
   2f920:	str	r0, [sp, #8]
   2f924:	mov	r3, #0
   2f928:	str	r3, [r5, #44]	; 0x2c
   2f92c:	b	2f488 <__assert_fail@plt+0x1cec4>
   2f930:	mov	r3, #24576	; 0x6000
   2f934:	str	r3, [r4, #80]	; 0x50
   2f938:	mov	r2, #1
   2f93c:	mov	r3, #0
   2f940:	b	2f5dc <__assert_fail@plt+0x1d018>
   2f944:	mov	r3, #24576	; 0x6000
   2f948:	str	r3, [r4, #80]	; 0x50
   2f94c:	mov	r2, #2
   2f950:	mov	r3, #0
   2f954:	b	2f5dc <__assert_fail@plt+0x1d018>
   2f958:	mov	r3, #8192	; 0x2000
   2f95c:	str	r3, [r4, #80]	; 0x50
   2f960:	mov	r2, #2
   2f964:	mov	r3, #0
   2f968:	b	2f5dc <__assert_fail@plt+0x1d018>
   2f96c:	mov	r3, #11
   2f970:	strh	r3, [r4, #56]	; 0x38
   2f974:	ldrb	r3, [r7, #18]
   2f978:	sub	r3, r3, #1
   2f97c:	cmp	r3, #11
   2f980:	ldrls	pc, [pc, r3, lsl #2]
   2f984:	b	2f788 <__assert_fail@plt+0x1d1c4>
   2f988:	andeq	pc, r2, r8, asr r7	; <UNPREDICTABLE>
   2f98c:	andeq	pc, r2, r8, asr r9	; <UNPREDICTABLE>
   2f990:	andeq	pc, r2, r8, lsl #15
   2f994:	andeq	pc, r2, r0, asr #11
   2f998:	andeq	pc, r2, r8, lsl #15
   2f99c:	andeq	pc, r2, r4, asr #18
   2f9a0:	andeq	pc, r2, r8, lsl #15
   2f9a4:	andeq	pc, r2, r0, ror r7	; <UNPREDICTABLE>
   2f9a8:	andeq	pc, r2, r8, lsl #15
   2f9ac:	andeq	pc, r2, r4, ror #14
   2f9b0:	andeq	pc, r2, r8, lsl #15
   2f9b4:	andeq	pc, r2, ip, ror r7	; <UNPREDICTABLE>
   2f9b8:	andeq	r8, r1, r0, lsr #13
   2f9bc:	andeq	r6, r0, r9, ror #18
   2f9c0:			; <UNDEFINED> instruction: 0xff534d42
   2f9c4:	andeq	r9, r0, r0, lsr #31
   2f9c8:	movtpl	r4, #24911	; 0x614f
   2f9cc:	andeq	r0, r0, r6, lsl #8
   2f9d0:	andeq	r2, r0, r0, lsl r7
   2f9d4:			; <UNDEFINED> instruction: 0x01021994
   2f9d8:	muleq	r4, r8, r1
   2f9dc:	muleq	r2, r8, r5
   2f9e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f9e4:	sub	sp, sp, #20
   2f9e8:	bic	r3, r1, #4080	; 0xff0
   2f9ec:	bics	r3, r3, #15
   2f9f0:	bne	2fb10 <__assert_fail@plt+0x1d54c>
   2f9f4:	mov	r7, r0
   2f9f8:	mov	r9, r1
   2f9fc:	mov	fp, r2
   2fa00:	and	r3, r1, #516	; 0x204
   2fa04:	cmp	r3, #516	; 0x204
   2fa08:	beq	2fb24 <__assert_fail@plt+0x1d560>
   2fa0c:	tst	r1, #18
   2fa10:	beq	2fb38 <__assert_fail@plt+0x1d574>
   2fa14:	mov	r1, #96	; 0x60
   2fa18:	mov	r0, #1
   2fa1c:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   2fa20:	subs	r6, r0, #0
   2fa24:	beq	2fd54 <__assert_fail@plt+0x1d790>
   2fa28:	str	fp, [r6, #44]	; 0x2c
   2fa2c:	tst	r9, #2
   2fa30:	streq	r9, [r6, #48]	; 0x30
   2fa34:	bicne	r3, r9, #512	; 0x200
   2fa38:	orrne	r3, r3, #4
   2fa3c:	strne	r3, [r6, #48]	; 0x30
   2fa40:	mvn	r3, #99	; 0x63
   2fa44:	str	r3, [r6, #32]
   2fa48:	ldr	r0, [r7]
   2fa4c:	cmp	r0, #0
   2fa50:	beq	2fb4c <__assert_fail@plt+0x1d588>
   2fa54:	mov	r5, r7
   2fa58:	mov	r4, #0
   2fa5c:	bl	122d0 <strlen@plt>
   2fa60:	cmp	r4, r0
   2fa64:	movcc	r4, r0
   2fa68:	ldr	r0, [r5, #4]!
   2fa6c:	cmp	r0, #0
   2fa70:	bne	2fa5c <__assert_fail@plt+0x1d498>
   2fa74:	add	r1, r4, #1
   2fa78:	cmp	r1, #4096	; 0x1000
   2fa7c:	movcc	r1, #4096	; 0x1000
   2fa80:	mov	r0, r6
   2fa84:	bl	2e5d0 <__assert_fail@plt+0x1c00c>
   2fa88:	subs	sl, r0, #0
   2fa8c:	beq	2fd48 <__assert_fail@plt+0x1d784>
   2fa90:	ldr	r3, [r7]
   2fa94:	cmp	r3, #0
   2fa98:	beq	2fd60 <__assert_fail@plt+0x1d79c>
   2fa9c:	mov	r2, #0
   2faa0:	ldr	r1, [pc, #716]	; 2fd74 <__assert_fail@plt+0x1d7b0>
   2faa4:	mov	r0, r6
   2faa8:	bl	2e86c <__assert_fail@plt+0x1c2a8>
   2faac:	subs	r3, r0, #0
   2fab0:	mov	r2, r3
   2fab4:	str	r3, [sp, #8]
   2fab8:	beq	2fd40 <__assert_fail@plt+0x1d77c>
   2fabc:	mvn	r3, #0
   2fac0:	str	r3, [r2, #48]	; 0x30
   2fac4:	cmp	fp, #0
   2fac8:	beq	2fad8 <__assert_fail@plt+0x1d514>
   2facc:	ldr	sl, [r6, #48]	; 0x30
   2fad0:	lsr	sl, sl, #10
   2fad4:	and	sl, sl, #1
   2fad8:	ldr	r4, [r7]
   2fadc:	cmp	r4, #0
   2fae0:	beq	2fcf0 <__assert_fail@plt+0x1d72c>
   2fae4:	mov	r3, #0
   2fae8:	mov	r5, r3
   2faec:	str	r3, [sp, #12]
   2faf0:	mov	r8, r3
   2faf4:	lsr	r9, r9, #11
   2faf8:	eor	r9, r9, #1
   2fafc:	and	r3, r9, #1
   2fb00:	mov	r9, r5
   2fb04:	str	r6, [sp, #4]
   2fb08:	mov	r6, r3
   2fb0c:	b	2fbc4 <__assert_fail@plt+0x1d600>
   2fb10:	bl	12318 <__errno_location@plt>
   2fb14:	mov	r3, #22
   2fb18:	str	r3, [r0]
   2fb1c:	mov	r6, #0
   2fb20:	b	2fd54 <__assert_fail@plt+0x1d790>
   2fb24:	bl	12318 <__errno_location@plt>
   2fb28:	mov	r3, #22
   2fb2c:	str	r3, [r0]
   2fb30:	mov	r6, #0
   2fb34:	b	2fd54 <__assert_fail@plt+0x1d790>
   2fb38:	bl	12318 <__errno_location@plt>
   2fb3c:	mov	r3, #22
   2fb40:	str	r3, [r0]
   2fb44:	mov	r6, #0
   2fb48:	b	2fd54 <__assert_fail@plt+0x1d790>
   2fb4c:	mov	r4, #0
   2fb50:	b	2fa74 <__assert_fail@plt+0x1d4b0>
   2fb54:	mov	r1, r4
   2fb58:	ldr	r0, [sp, #4]
   2fb5c:	bl	2e86c <__assert_fail@plt+0x1c2a8>
   2fb60:	subs	r4, r0, #0
   2fb64:	beq	2fd2c <__assert_fail@plt+0x1d768>
   2fb68:	str	r9, [r4, #48]	; 0x30
   2fb6c:	ldr	r3, [sp, #8]
   2fb70:	str	r3, [r4, #4]
   2fb74:	add	r3, r4, #168	; 0xa8
   2fb78:	str	r3, [r4, #24]
   2fb7c:	cmp	r5, #0
   2fb80:	moveq	r3, #0
   2fb84:	andne	r3, sl, #1
   2fb88:	cmp	r3, #0
   2fb8c:	beq	2fc2c <__assert_fail@plt+0x1d668>
   2fb90:	mov	r3, #11
   2fb94:	strh	r3, [r4, #56]	; 0x38
   2fb98:	mov	r2, #2
   2fb9c:	mov	r3, #0
   2fba0:	strd	r2, [r4, #112]	; 0x70
   2fba4:	cmp	fp, #0
   2fba8:	beq	2fc44 <__assert_fail@plt+0x1d680>
   2fbac:	str	r5, [r4, #8]
   2fbb0:	mov	r5, r4
   2fbb4:	add	r8, r8, #1
   2fbb8:	ldr	r4, [r7, #4]!
   2fbbc:	cmp	r4, #0
   2fbc0:	beq	2fc64 <__assert_fail@plt+0x1d6a0>
   2fbc4:	mov	r0, r4
   2fbc8:	bl	122d0 <strlen@plt>
   2fbcc:	mov	r2, r0
   2fbd0:	cmp	r0, #2
   2fbd4:	movls	r3, #0
   2fbd8:	andhi	r3, r6, #1
   2fbdc:	cmp	r3, #0
   2fbe0:	beq	2fb54 <__assert_fail@plt+0x1d590>
   2fbe4:	add	r3, r4, r0
   2fbe8:	ldrb	r3, [r3, #-1]
   2fbec:	cmp	r3, #47	; 0x2f
   2fbf0:	bne	2fb54 <__assert_fail@plt+0x1d590>
   2fbf4:	cmp	r0, #1
   2fbf8:	bls	2fb54 <__assert_fail@plt+0x1d590>
   2fbfc:	sub	r1, r0, #2
   2fc00:	add	r3, r4, r1
   2fc04:	ldrb	r1, [r4, r1]
   2fc08:	cmp	r1, #47	; 0x2f
   2fc0c:	bne	2fb54 <__assert_fail@plt+0x1d590>
   2fc10:	sub	r2, r2, #1
   2fc14:	cmp	r2, #1
   2fc18:	beq	2fb54 <__assert_fail@plt+0x1d590>
   2fc1c:	ldrb	r1, [r3, #-1]!
   2fc20:	cmp	r1, #47	; 0x2f
   2fc24:	beq	2fc10 <__assert_fail@plt+0x1d64c>
   2fc28:	b	2fb54 <__assert_fail@plt+0x1d590>
   2fc2c:	mov	r2, r9
   2fc30:	mov	r1, r4
   2fc34:	ldr	r0, [sp, #4]
   2fc38:	bl	2e640 <__assert_fail@plt+0x1c07c>
   2fc3c:	strh	r0, [r4, #56]	; 0x38
   2fc40:	b	2fba4 <__assert_fail@plt+0x1d5e0>
   2fc44:	str	r9, [r4, #8]
   2fc48:	cmp	r5, #0
   2fc4c:	ldrne	r3, [sp, #12]
   2fc50:	strne	r4, [r3, #8]
   2fc54:	strne	r4, [sp, #12]
   2fc58:	streq	r4, [sp, #12]
   2fc5c:	moveq	r5, r4
   2fc60:	b	2fbb4 <__assert_fail@plt+0x1d5f0>
   2fc64:	ldr	r6, [sp, #4]
   2fc68:	cmp	fp, #0
   2fc6c:	cmpne	r8, #1
   2fc70:	bhi	2fcd8 <__assert_fail@plt+0x1d714>
   2fc74:	mov	r2, #0
   2fc78:	ldr	r1, [pc, #244]	; 2fd74 <__assert_fail@plt+0x1d7b0>
   2fc7c:	mov	r0, r6
   2fc80:	bl	2e86c <__assert_fail@plt+0x1c2a8>
   2fc84:	str	r0, [r6]
   2fc88:	cmp	r0, #0
   2fc8c:	beq	2fd30 <__assert_fail@plt+0x1d76c>
   2fc90:	str	r5, [r0, #8]
   2fc94:	ldr	r3, [r6]
   2fc98:	mov	r2, #9
   2fc9c:	strh	r2, [r3, #56]	; 0x38
   2fca0:	ldr	r3, [r6]
   2fca4:	mov	r2, #1
   2fca8:	str	r2, [r3, #48]	; 0x30
   2fcac:	mov	r0, r6
   2fcb0:	bl	2e8e0 <__assert_fail@plt+0x1c31c>
   2fcb4:	cmp	r0, #0
   2fcb8:	beq	2fd30 <__assert_fail@plt+0x1d76c>
   2fcbc:	ldr	r3, [r6, #48]	; 0x30
   2fcc0:	tst	r3, #516	; 0x204
   2fcc4:	beq	2fd08 <__assert_fail@plt+0x1d744>
   2fcc8:	mvn	r1, #0
   2fccc:	add	r0, r6, #60	; 0x3c
   2fcd0:	bl	3fb90 <__assert_fail@plt+0x2d5cc>
   2fcd4:	b	2fd54 <__assert_fail@plt+0x1d790>
   2fcd8:	mov	r2, r8
   2fcdc:	mov	r1, r5
   2fce0:	mov	r0, r6
   2fce4:	bl	2e798 <__assert_fail@plt+0x1c1d4>
   2fce8:	mov	r5, r0
   2fcec:	b	2fc74 <__assert_fail@plt+0x1d6b0>
   2fcf0:	mov	r5, #0
   2fcf4:	b	2fc74 <__assert_fail@plt+0x1d6b0>
   2fcf8:	mov	r3, #0
   2fcfc:	str	r3, [sp, #8]
   2fd00:	mov	r5, r3
   2fd04:	b	2fc74 <__assert_fail@plt+0x1d6b0>
   2fd08:	ldr	r1, [pc, #104]	; 2fd78 <__assert_fail@plt+0x1d7b4>
   2fd0c:	mov	r0, r6
   2fd10:	bl	2e964 <__assert_fail@plt+0x1c3a0>
   2fd14:	str	r0, [r6, #28]
   2fd18:	cmp	r0, #0
   2fd1c:	ldrlt	r3, [r6, #48]	; 0x30
   2fd20:	orrlt	r3, r3, #4
   2fd24:	strlt	r3, [r6, #48]	; 0x30
   2fd28:	b	2fcc8 <__assert_fail@plt+0x1d704>
   2fd2c:	ldr	r6, [sp, #4]
   2fd30:	mov	r0, r5
   2fd34:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2fd38:	ldr	r0, [sp, #8]
   2fd3c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fd40:	ldr	r0, [r6, #24]
   2fd44:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fd48:	mov	r0, r6
   2fd4c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fd50:	mov	r6, #0
   2fd54:	mov	r0, r6
   2fd58:	add	sp, sp, #20
   2fd5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd60:	cmp	fp, #0
   2fd64:	beq	2fcf8 <__assert_fail@plt+0x1d734>
   2fd68:	mov	r3, #0
   2fd6c:	str	r3, [sp, #8]
   2fd70:	b	2facc <__assert_fail@plt+0x1d508>
   2fd74:	andeq	r4, r4, r0, lsl r3
   2fd78:	andeq	r6, r4, r0, asr #3
   2fd7c:	push	{r4, r5, r6, lr}
   2fd80:	mov	r5, r0
   2fd84:	ldr	r0, [r0]
   2fd88:	cmp	r0, #0
   2fd8c:	beq	2fdc4 <__assert_fail@plt+0x1d800>
   2fd90:	ldr	r3, [r0, #48]	; 0x30
   2fd94:	cmp	r3, #0
   2fd98:	blt	2fe28 <__assert_fail@plt+0x1d864>
   2fd9c:	ldr	r4, [r0, #8]
   2fda0:	cmp	r4, #0
   2fda4:	ldreq	r4, [r0, #4]
   2fda8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fdac:	mov	r0, r4
   2fdb0:	ldr	r3, [r4, #48]	; 0x30
   2fdb4:	cmp	r3, #0
   2fdb8:	bge	2fd9c <__assert_fail@plt+0x1d7d8>
   2fdbc:	mov	r0, r4
   2fdc0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fdc4:	ldr	r0, [r5, #4]
   2fdc8:	cmp	r0, #0
   2fdcc:	beq	2fdd4 <__assert_fail@plt+0x1d810>
   2fdd0:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2fdd4:	ldr	r0, [r5, #8]
   2fdd8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fddc:	ldr	r0, [r5, #24]
   2fde0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fde4:	ldr	r3, [r5, #48]	; 0x30
   2fde8:	tst	r3, #512	; 0x200
   2fdec:	beq	2fe30 <__assert_fail@plt+0x1d86c>
   2fdf0:	ldr	r0, [r5, #32]
   2fdf4:	cmp	r0, #0
   2fdf8:	blt	2fe38 <__assert_fail@plt+0x1d874>
   2fdfc:	bl	1257c <close@plt>
   2fe00:	cmp	r0, #0
   2fe04:	beq	2fe38 <__assert_fail@plt+0x1d874>
   2fe08:	bl	12318 <__errno_location@plt>
   2fe0c:	ldr	r4, [r0]
   2fe10:	add	r0, r5, #60	; 0x3c
   2fe14:	bl	2ea30 <__assert_fail@plt+0x1c46c>
   2fe18:	ldr	r0, [r5, #52]	; 0x34
   2fe1c:	cmp	r0, #0
   2fe20:	bne	2fe50 <__assert_fail@plt+0x1d88c>
   2fe24:	b	2fe54 <__assert_fail@plt+0x1d890>
   2fe28:	mov	r4, r0
   2fe2c:	b	2fdbc <__assert_fail@plt+0x1d7f8>
   2fe30:	tst	r3, #4
   2fe34:	beq	2fe74 <__assert_fail@plt+0x1d8b0>
   2fe38:	add	r0, r5, #60	; 0x3c
   2fe3c:	bl	2ea30 <__assert_fail@plt+0x1c46c>
   2fe40:	ldr	r0, [r5, #52]	; 0x34
   2fe44:	cmp	r0, #0
   2fe48:	movne	r4, #0
   2fe4c:	beq	2fec8 <__assert_fail@plt+0x1d904>
   2fe50:	bl	22670 <__assert_fail@plt+0x100ac>
   2fe54:	mov	r0, r5
   2fe58:	bl	2e9f4 <__assert_fail@plt+0x1c430>
   2fe5c:	mov	r0, r5
   2fe60:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fe64:	cmp	r4, #0
   2fe68:	bne	2feb8 <__assert_fail@plt+0x1d8f4>
   2fe6c:	mov	r0, r4
   2fe70:	pop	{r4, r5, r6, pc}
   2fe74:	ldr	r0, [r5, #28]
   2fe78:	bl	124c8 <fchdir@plt>
   2fe7c:	subs	r4, r0, #0
   2fe80:	beq	2fe8c <__assert_fail@plt+0x1d8c8>
   2fe84:	bl	12318 <__errno_location@plt>
   2fe88:	ldr	r4, [r0]
   2fe8c:	ldr	r0, [r5, #28]
   2fe90:	bl	1257c <close@plt>
   2fe94:	clz	r3, r4
   2fe98:	lsr	r3, r3, #5
   2fe9c:	cmp	r0, #0
   2fea0:	moveq	r3, #0
   2fea4:	cmp	r3, #0
   2fea8:	beq	2fe10 <__assert_fail@plt+0x1d84c>
   2feac:	bl	12318 <__errno_location@plt>
   2feb0:	ldr	r4, [r0]
   2feb4:	b	2fe10 <__assert_fail@plt+0x1d84c>
   2feb8:	bl	12318 <__errno_location@plt>
   2febc:	str	r4, [r0]
   2fec0:	mvn	r4, #0
   2fec4:	b	2fe6c <__assert_fail@plt+0x1d8a8>
   2fec8:	mov	r0, r5
   2fecc:	bl	2e9f4 <__assert_fail@plt+0x1c430>
   2fed0:	mov	r0, r5
   2fed4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   2fed8:	mov	r4, #0
   2fedc:	b	2fe6c <__assert_fail@plt+0x1d8a8>
   2fee0:	push	{r4, r5, r6, r7, r8, lr}
   2fee4:	ldr	r5, [r0]
   2fee8:	cmp	r5, #0
   2feec:	beq	30530 <__assert_fail@plt+0x1df6c>
   2fef0:	ldr	r3, [r0, #48]	; 0x30
   2fef4:	tst	r3, #8192	; 0x2000
   2fef8:	bne	30538 <__assert_fail@plt+0x1df74>
   2fefc:	mov	r8, r0
   2ff00:	ldrh	r3, [r5, #60]	; 0x3c
   2ff04:	mov	r2, #3
   2ff08:	strh	r2, [r5, #60]	; 0x3c
   2ff0c:	cmp	r3, #1
   2ff10:	beq	2ff90 <__assert_fail@plt+0x1d9cc>
   2ff14:	cmp	r3, #2
   2ff18:	beq	2ffa8 <__assert_fail@plt+0x1d9e4>
   2ff1c:	ldrh	r2, [r5, #56]	; 0x38
   2ff20:	cmp	r2, #1
   2ff24:	bne	3019c <__assert_fail@plt+0x1dbd8>
   2ff28:	cmp	r3, #4
   2ff2c:	beq	2ff50 <__assert_fail@plt+0x1d98c>
   2ff30:	ldr	r1, [r8, #48]	; 0x30
   2ff34:	tst	r1, #64	; 0x40
   2ff38:	beq	30048 <__assert_fail@plt+0x1da84>
   2ff3c:	ldrd	r6, [r5, #64]	; 0x40
   2ff40:	ldrd	r2, [r8, #16]
   2ff44:	cmp	r7, r3
   2ff48:	cmpeq	r6, r2
   2ff4c:	beq	30048 <__assert_fail@plt+0x1da84>
   2ff50:	ldrh	r3, [r5, #58]	; 0x3a
   2ff54:	tst	r3, #2
   2ff58:	bne	3003c <__assert_fail@plt+0x1da78>
   2ff5c:	ldr	r0, [r8, #4]
   2ff60:	cmp	r0, #0
   2ff64:	beq	2ff74 <__assert_fail@plt+0x1d9b0>
   2ff68:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   2ff6c:	mov	r3, #0
   2ff70:	str	r3, [r8, #4]
   2ff74:	mov	r3, #6
   2ff78:	strh	r3, [r5, #56]	; 0x38
   2ff7c:	mov	r1, r5
   2ff80:	mov	r0, r8
   2ff84:	bl	2ef04 <__assert_fail@plt+0x1c940>
   2ff88:	mov	r4, r5
   2ff8c:	b	30278 <__assert_fail@plt+0x1dcb4>
   2ff90:	mov	r2, #0
   2ff94:	mov	r1, r5
   2ff98:	bl	2e640 <__assert_fail@plt+0x1c07c>
   2ff9c:	strh	r0, [r5, #56]	; 0x38
   2ffa0:	mov	r4, r5
   2ffa4:	b	30278 <__assert_fail@plt+0x1dcb4>
   2ffa8:	ldrh	r2, [r5, #56]	; 0x38
   2ffac:	sub	r3, r2, #12
   2ffb0:	uxth	r3, r3
   2ffb4:	cmp	r3, #1
   2ffb8:	bls	2ffc8 <__assert_fail@plt+0x1da04>
   2ffbc:	cmp	r2, #1
   2ffc0:	bne	3019c <__assert_fail@plt+0x1dbd8>
   2ffc4:	b	2ff30 <__assert_fail@plt+0x1d96c>
   2ffc8:	mov	r2, #1
   2ffcc:	mov	r1, r5
   2ffd0:	bl	2e640 <__assert_fail@plt+0x1c07c>
   2ffd4:	strh	r0, [r5, #56]	; 0x38
   2ffd8:	cmp	r0, #1
   2ffdc:	movne	r4, r5
   2ffe0:	bne	30378 <__assert_fail@plt+0x1ddb4>
   2ffe4:	ldr	r3, [r8, #48]	; 0x30
   2ffe8:	tst	r3, #4
   2ffec:	movne	r4, r5
   2fff0:	bne	30378 <__assert_fail@plt+0x1ddb4>
   2fff4:	ldr	r1, [pc, #1356]	; 30548 <__assert_fail@plt+0x1df84>
   2fff8:	mov	r0, r8
   2fffc:	bl	2e964 <__assert_fail@plt+0x1c3a0>
   30000:	str	r0, [r5, #36]	; 0x24
   30004:	cmp	r0, #0
   30008:	blt	30020 <__assert_fail@plt+0x1da5c>
   3000c:	ldrh	r3, [r5, #58]	; 0x3a
   30010:	orr	r3, r3, #2
   30014:	strh	r3, [r5, #58]	; 0x3a
   30018:	mov	r4, r5
   3001c:	b	30378 <__assert_fail@plt+0x1ddb4>
   30020:	bl	12318 <__errno_location@plt>
   30024:	ldr	r3, [r0]
   30028:	str	r3, [r5, #32]
   3002c:	mov	r3, #7
   30030:	strh	r3, [r5, #56]	; 0x38
   30034:	mov	r4, r5
   30038:	b	30378 <__assert_fail@plt+0x1ddb4>
   3003c:	ldr	r0, [r5, #36]	; 0x24
   30040:	bl	1257c <close@plt>
   30044:	b	2ff5c <__assert_fail@plt+0x1d998>
   30048:	ldr	r0, [r8, #4]
   3004c:	cmp	r0, #0
   30050:	beq	3009c <__assert_fail@plt+0x1dad8>
   30054:	tst	r1, #4096	; 0x1000
   30058:	bne	30088 <__assert_fail@plt+0x1dac4>
   3005c:	ldr	r3, [r5, #24]
   30060:	mvn	r2, #0
   30064:	mov	r1, r5
   30068:	mov	r0, r8
   3006c:	bl	2ed1c <__assert_fail@plt+0x1c758>
   30070:	cmp	r0, #0
   30074:	bne	300f0 <__assert_fail@plt+0x1db2c>
   30078:	ldr	r4, [r8, #4]
   3007c:	mov	r3, #0
   30080:	str	r3, [r8, #4]
   30084:	b	30338 <__assert_fail@plt+0x1dd74>
   30088:	bic	r1, r1, #4096	; 0x1000
   3008c:	str	r1, [r8, #48]	; 0x30
   30090:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   30094:	mov	r3, #0
   30098:	str	r3, [r8, #4]
   3009c:	mov	r1, #3
   300a0:	mov	r0, r8
   300a4:	bl	2efc8 <__assert_fail@plt+0x1ca04>
   300a8:	str	r0, [r8, #4]
   300ac:	cmp	r0, #0
   300b0:	bne	30078 <__assert_fail@plt+0x1dab4>
   300b4:	ldr	r3, [r8, #48]	; 0x30
   300b8:	tst	r3, #8192	; 0x2000
   300bc:	bne	30540 <__assert_fail@plt+0x1df7c>
   300c0:	ldr	r3, [r5, #32]
   300c4:	cmp	r3, #0
   300c8:	beq	300dc <__assert_fail@plt+0x1db18>
   300cc:	ldrh	r3, [r5, #56]	; 0x38
   300d0:	cmp	r3, #4
   300d4:	movne	r3, #7
   300d8:	strhne	r3, [r5, #56]	; 0x38
   300dc:	mov	r1, r5
   300e0:	mov	r0, r8
   300e4:	bl	2ef04 <__assert_fail@plt+0x1c940>
   300e8:	mov	r4, r5
   300ec:	b	30278 <__assert_fail@plt+0x1dcb4>
   300f0:	bl	12318 <__errno_location@plt>
   300f4:	ldr	r3, [r0]
   300f8:	str	r3, [r5, #32]
   300fc:	ldrh	r3, [r5, #58]	; 0x3a
   30100:	orr	r3, r3, #1
   30104:	strh	r3, [r5, #58]	; 0x3a
   30108:	ldr	r3, [r8, #4]
   3010c:	cmp	r3, #0
   30110:	beq	30078 <__assert_fail@plt+0x1dab4>
   30114:	ldr	r2, [r3, #4]
   30118:	ldr	r2, [r2, #24]
   3011c:	str	r2, [r3, #24]
   30120:	ldr	r3, [r3, #8]
   30124:	cmp	r3, #0
   30128:	bne	30114 <__assert_fail@plt+0x1db50>
   3012c:	b	30078 <__assert_fail@plt+0x1dab4>
   30130:	str	r3, [r8]
   30134:	ldr	r2, [r8, #24]
   30138:	ldr	r3, [r3, #40]	; 0x28
   3013c:	mov	r1, #0
   30140:	strb	r1, [r2, r3]
   30144:	mov	r1, #3
   30148:	mov	r0, r8
   3014c:	bl	2efc8 <__assert_fail@plt+0x1ca04>
   30150:	subs	r4, r0, #0
   30154:	beq	30164 <__assert_fail@plt+0x1dba0>
   30158:	mov	r0, r5
   3015c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30160:	b	30338 <__assert_fail@plt+0x1dd74>
   30164:	ldr	r3, [r8, #48]	; 0x30
   30168:	tst	r3, #8192	; 0x2000
   3016c:	beq	301b8 <__assert_fail@plt+0x1dbf4>
   30170:	b	30278 <__assert_fail@plt+0x1dcb4>
   30174:	str	r4, [r8]
   30178:	mov	r0, r5
   3017c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30180:	ldr	r3, [r4, #48]	; 0x30
   30184:	cmp	r3, #0
   30188:	beq	30280 <__assert_fail@plt+0x1dcbc>
   3018c:	ldrh	r3, [r4, #60]	; 0x3c
   30190:	mov	r5, r4
   30194:	cmp	r3, #4
   30198:	bne	30330 <__assert_fail@plt+0x1dd6c>
   3019c:	ldr	r4, [r5, #8]
   301a0:	cmp	r4, #0
   301a4:	bne	30174 <__assert_fail@plt+0x1dbb0>
   301a8:	ldr	r3, [r5, #4]
   301ac:	ldr	r2, [r3, #12]
   301b0:	cmp	r2, #0
   301b4:	bne	30130 <__assert_fail@plt+0x1db6c>
   301b8:	ldr	r4, [r5, #4]
   301bc:	str	r4, [r8]
   301c0:	mov	r0, r5
   301c4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   301c8:	ldr	r3, [r4, #48]	; 0x30
   301cc:	cmn	r3, #1
   301d0:	beq	30478 <__assert_fail@plt+0x1deb4>
   301d4:	ldrh	r3, [r4, #56]	; 0x38
   301d8:	cmp	r3, #11
   301dc:	beq	30494 <__assert_fail@plt+0x1ded0>
   301e0:	ldr	r2, [r8, #24]
   301e4:	ldr	r3, [r4, #40]	; 0x28
   301e8:	mov	r1, #0
   301ec:	strb	r1, [r2, r3]
   301f0:	ldr	r3, [r4, #48]	; 0x30
   301f4:	cmp	r3, r1
   301f8:	beq	30498 <__assert_fail@plt+0x1ded4>
   301fc:	ldrh	r3, [r4, #58]	; 0x3a
   30200:	tst	r3, #2
   30204:	beq	304f0 <__assert_fail@plt+0x1df2c>
   30208:	ldr	r3, [r8, #48]	; 0x30
   3020c:	tst	r3, #4
   30210:	bne	3022c <__assert_fail@plt+0x1dc68>
   30214:	tst	r3, #512	; 0x200
   30218:	beq	304c4 <__assert_fail@plt+0x1df00>
   3021c:	mov	r2, #1
   30220:	ldr	r1, [r4, #36]	; 0x24
   30224:	mov	r0, r8
   30228:	bl	2ec4c <__assert_fail@plt+0x1c688>
   3022c:	ldr	r0, [r4, #36]	; 0x24
   30230:	bl	1257c <close@plt>
   30234:	ldrh	r3, [r4, #56]	; 0x38
   30238:	cmp	r3, #2
   3023c:	beq	30268 <__assert_fail@plt+0x1dca4>
   30240:	ldr	r3, [r4, #32]
   30244:	cmp	r3, #0
   30248:	movne	r3, #7
   3024c:	strhne	r3, [r4, #56]	; 0x38
   30250:	bne	30268 <__assert_fail@plt+0x1dca4>
   30254:	mov	r3, #6
   30258:	strh	r3, [r4, #56]	; 0x38
   3025c:	mov	r1, r4
   30260:	mov	r0, r8
   30264:	bl	2ef04 <__assert_fail@plt+0x1c940>
   30268:	ldr	r3, [r8, #48]	; 0x30
   3026c:	and	r3, r3, #8192	; 0x2000
   30270:	cmp	r3, #0
   30274:	movne	r4, #0
   30278:	mov	r0, r4
   3027c:	pop	{r4, r5, r6, r7, r8, pc}
   30280:	mov	r0, r8
   30284:	bl	2eccc <__assert_fail@plt+0x1c708>
   30288:	cmp	r0, #0
   3028c:	bne	3030c <__assert_fail@plt+0x1dd48>
   30290:	mov	r0, r8
   30294:	bl	2e9f4 <__assert_fail@plt+0x1c430>
   30298:	ldr	r2, [r4, #52]	; 0x34
   3029c:	str	r2, [r4, #40]	; 0x28
   302a0:	add	r6, r4, #168	; 0xa8
   302a4:	add	r2, r2, #1
   302a8:	mov	r1, r6
   302ac:	ldr	r0, [r8, #24]
   302b0:	bl	11f94 <memmove@plt>
   302b4:	mov	r1, #47	; 0x2f
   302b8:	mov	r0, r6
   302bc:	bl	12438 <strrchr@plt>
   302c0:	cmp	r0, #0
   302c4:	beq	302f4 <__assert_fail@plt+0x1dd30>
   302c8:	cmp	r6, r0
   302cc:	beq	30320 <__assert_fail@plt+0x1dd5c>
   302d0:	add	r5, r0, #1
   302d4:	mov	r0, r5
   302d8:	bl	122d0 <strlen@plt>
   302dc:	mov	r7, r0
   302e0:	add	r2, r0, #1
   302e4:	mov	r1, r5
   302e8:	mov	r0, r6
   302ec:	bl	11f94 <memmove@plt>
   302f0:	str	r7, [r4, #52]	; 0x34
   302f4:	ldr	r3, [r8, #24]
   302f8:	str	r3, [r4, #28]
   302fc:	str	r3, [r4, #24]
   30300:	mov	r0, r8
   30304:	bl	2e8e0 <__assert_fail@plt+0x1c31c>
   30308:	b	30378 <__assert_fail@plt+0x1ddb4>
   3030c:	ldr	r3, [r8, #48]	; 0x30
   30310:	orr	r3, r3, #8192	; 0x2000
   30314:	str	r3, [r8, #48]	; 0x30
   30318:	mov	r4, #0
   3031c:	b	30278 <__assert_fail@plt+0x1dcb4>
   30320:	ldrb	r3, [r4, #169]	; 0xa9
   30324:	cmp	r3, #0
   30328:	bne	302d0 <__assert_fail@plt+0x1dd0c>
   3032c:	b	302f4 <__assert_fail@plt+0x1dd30>
   30330:	cmp	r3, #2
   30334:	beq	303cc <__assert_fail@plt+0x1de08>
   30338:	ldr	r2, [r8, #24]
   3033c:	ldr	r0, [r4, #4]
   30340:	ldr	r1, [r0, #40]	; 0x28
   30344:	sub	r3, r1, #1
   30348:	ldr	r0, [r0, #28]
   3034c:	ldrb	r0, [r0, r3]
   30350:	cmp	r0, #47	; 0x2f
   30354:	movne	r3, r1
   30358:	add	r0, r2, r3
   3035c:	mov	r1, #47	; 0x2f
   30360:	strb	r1, [r2, r3]
   30364:	ldr	r2, [r4, #52]	; 0x34
   30368:	add	r2, r2, #1
   3036c:	add	r1, r4, #168	; 0xa8
   30370:	add	r0, r0, #1
   30374:	bl	11f94 <memmove@plt>
   30378:	str	r4, [r8]
   3037c:	ldrh	r3, [r4, #56]	; 0x38
   30380:	cmp	r3, #11
   30384:	beq	30440 <__assert_fail@plt+0x1de7c>
   30388:	ldrh	r3, [r4, #56]	; 0x38
   3038c:	cmp	r3, #1
   30390:	bne	30278 <__assert_fail@plt+0x1dcb4>
   30394:	ldr	r3, [r4, #48]	; 0x30
   30398:	cmp	r3, #0
   3039c:	ldrdeq	r2, [r4, #64]	; 0x40
   303a0:	strdeq	r2, [r8, #16]
   303a4:	mov	r1, r4
   303a8:	mov	r0, r8
   303ac:	bl	2eb80 <__assert_fail@plt+0x1c5bc>
   303b0:	cmp	r0, #0
   303b4:	bne	30278 <__assert_fail@plt+0x1dcb4>
   303b8:	bl	12318 <__errno_location@plt>
   303bc:	mov	r3, #12
   303c0:	str	r3, [r0]
   303c4:	mov	r4, #0
   303c8:	b	30278 <__assert_fail@plt+0x1dcb4>
   303cc:	mov	r2, #1
   303d0:	mov	r1, r4
   303d4:	mov	r0, r8
   303d8:	bl	2e640 <__assert_fail@plt+0x1c07c>
   303dc:	strh	r0, [r4, #56]	; 0x38
   303e0:	cmp	r0, #1
   303e4:	beq	303f4 <__assert_fail@plt+0x1de30>
   303e8:	mov	r3, #3
   303ec:	strh	r3, [r4, #60]	; 0x3c
   303f0:	b	30338 <__assert_fail@plt+0x1dd74>
   303f4:	ldr	r3, [r8, #48]	; 0x30
   303f8:	tst	r3, #4
   303fc:	bne	303e8 <__assert_fail@plt+0x1de24>
   30400:	ldr	r1, [pc, #320]	; 30548 <__assert_fail@plt+0x1df84>
   30404:	mov	r0, r8
   30408:	bl	2e964 <__assert_fail@plt+0x1c3a0>
   3040c:	str	r0, [r4, #36]	; 0x24
   30410:	cmp	r0, #0
   30414:	bge	30430 <__assert_fail@plt+0x1de6c>
   30418:	bl	12318 <__errno_location@plt>
   3041c:	ldr	r3, [r0]
   30420:	str	r3, [r4, #32]
   30424:	mov	r3, #7
   30428:	strh	r3, [r4, #56]	; 0x38
   3042c:	b	303e8 <__assert_fail@plt+0x1de24>
   30430:	ldrh	r3, [r4, #58]	; 0x3a
   30434:	orr	r3, r3, #2
   30438:	strh	r3, [r4, #58]	; 0x3a
   3043c:	b	303e8 <__assert_fail@plt+0x1de24>
   30440:	ldrd	r2, [r4, #112]	; 0x70
   30444:	cmp	r3, #0
   30448:	cmpeq	r2, #2
   3044c:	beq	30460 <__assert_fail@plt+0x1de9c>
   30450:	cmp	r3, #0
   30454:	cmpeq	r2, #1
   30458:	beq	30278 <__assert_fail@plt+0x1dcb4>
   3045c:	bl	12570 <abort@plt>
   30460:	mov	r2, #0
   30464:	mov	r1, r4
   30468:	mov	r0, r8
   3046c:	bl	2e640 <__assert_fail@plt+0x1c07c>
   30470:	strh	r0, [r4, #56]	; 0x38
   30474:	b	30388 <__assert_fail@plt+0x1ddc4>
   30478:	mov	r0, r4
   3047c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30480:	bl	12318 <__errno_location@plt>
   30484:	mov	r4, #0
   30488:	str	r4, [r0]
   3048c:	str	r4, [r8]
   30490:	b	30278 <__assert_fail@plt+0x1dcb4>
   30494:	bl	12570 <abort@plt>
   30498:	mov	r0, r8
   3049c:	bl	2eccc <__assert_fail@plt+0x1c708>
   304a0:	cmp	r0, #0
   304a4:	beq	30234 <__assert_fail@plt+0x1dc70>
   304a8:	bl	12318 <__errno_location@plt>
   304ac:	ldr	r3, [r0]
   304b0:	str	r3, [r4, #32]
   304b4:	ldr	r3, [r8, #48]	; 0x30
   304b8:	orr	r3, r3, #8192	; 0x2000
   304bc:	str	r3, [r8, #48]	; 0x30
   304c0:	b	30234 <__assert_fail@plt+0x1dc70>
   304c4:	ldr	r0, [r4, #36]	; 0x24
   304c8:	bl	124c8 <fchdir@plt>
   304cc:	cmp	r0, #0
   304d0:	beq	3022c <__assert_fail@plt+0x1dc68>
   304d4:	bl	12318 <__errno_location@plt>
   304d8:	ldr	r3, [r0]
   304dc:	str	r3, [r4, #32]
   304e0:	ldr	r3, [r8, #48]	; 0x30
   304e4:	orr	r3, r3, #8192	; 0x2000
   304e8:	str	r3, [r8, #48]	; 0x30
   304ec:	b	3022c <__assert_fail@plt+0x1dc68>
   304f0:	tst	r3, #1
   304f4:	bne	30234 <__assert_fail@plt+0x1dc70>
   304f8:	ldr	r3, [pc, #76]	; 3054c <__assert_fail@plt+0x1df88>
   304fc:	mvn	r2, #0
   30500:	ldr	r1, [r4, #4]
   30504:	mov	r0, r8
   30508:	bl	2ed1c <__assert_fail@plt+0x1c758>
   3050c:	cmp	r0, #0
   30510:	beq	30234 <__assert_fail@plt+0x1dc70>
   30514:	bl	12318 <__errno_location@plt>
   30518:	ldr	r3, [r0]
   3051c:	str	r3, [r4, #32]
   30520:	ldr	r3, [r8, #48]	; 0x30
   30524:	orr	r3, r3, #8192	; 0x2000
   30528:	str	r3, [r8, #48]	; 0x30
   3052c:	b	30234 <__assert_fail@plt+0x1dc70>
   30530:	mov	r4, #0
   30534:	b	30278 <__assert_fail@plt+0x1dcb4>
   30538:	mov	r4, #0
   3053c:	b	30278 <__assert_fail@plt+0x1dcb4>
   30540:	mov	r4, #0
   30544:	b	30278 <__assert_fail@plt+0x1dcb4>
   30548:	andeq	r6, r4, r0, asr #3
   3054c:	muleq	r4, r8, r1
   30550:	cmp	r2, #4
   30554:	bhi	30564 <__assert_fail@plt+0x1dfa0>
   30558:	strh	r2, [r1, #60]	; 0x3c
   3055c:	mov	r0, #0
   30560:	bx	lr
   30564:	push	{r4, lr}
   30568:	bl	12318 <__errno_location@plt>
   3056c:	mov	r3, #22
   30570:	str	r3, [r0]
   30574:	mov	r0, #1
   30578:	pop	{r4, pc}
   3057c:	push	{r4, r5, r6, r7, r8, lr}
   30580:	bics	r3, r1, #4096	; 0x1000
   30584:	bne	30628 <__assert_fail@plt+0x1e064>
   30588:	mov	r4, r0
   3058c:	mov	r6, r1
   30590:	ldr	r5, [r0]
   30594:	bl	12318 <__errno_location@plt>
   30598:	mov	r7, r0
   3059c:	mov	r3, #0
   305a0:	str	r3, [r0]
   305a4:	ldr	r3, [r4, #48]	; 0x30
   305a8:	tst	r3, #8192	; 0x2000
   305ac:	bne	306cc <__assert_fail@plt+0x1e108>
   305b0:	ldrh	r3, [r5, #56]	; 0x38
   305b4:	cmp	r3, #9
   305b8:	beq	3063c <__assert_fail@plt+0x1e078>
   305bc:	cmp	r3, #1
   305c0:	bne	306d4 <__assert_fail@plt+0x1e110>
   305c4:	ldr	r0, [r4, #4]
   305c8:	cmp	r0, #0
   305cc:	beq	305d4 <__assert_fail@plt+0x1e010>
   305d0:	bl	2e9b4 <__assert_fail@plt+0x1c3f0>
   305d4:	cmp	r6, #4096	; 0x1000
   305d8:	ldreq	r3, [r4, #48]	; 0x30
   305dc:	orreq	r3, r3, #4096	; 0x1000
   305e0:	streq	r3, [r4, #48]	; 0x30
   305e4:	moveq	r6, #2
   305e8:	movne	r6, #1
   305ec:	ldr	r3, [r5, #48]	; 0x30
   305f0:	cmp	r3, #0
   305f4:	bne	30614 <__assert_fail@plt+0x1e050>
   305f8:	ldr	r3, [r5, #24]
   305fc:	ldrb	r3, [r3]
   30600:	cmp	r3, #47	; 0x2f
   30604:	beq	30614 <__assert_fail@plt+0x1e050>
   30608:	ldr	r3, [r4, #48]	; 0x30
   3060c:	tst	r3, #4
   30610:	beq	30644 <__assert_fail@plt+0x1e080>
   30614:	mov	r1, r6
   30618:	mov	r0, r4
   3061c:	bl	2efc8 <__assert_fail@plt+0x1ca04>
   30620:	str	r0, [r4, #4]
   30624:	pop	{r4, r5, r6, r7, r8, pc}
   30628:	bl	12318 <__errno_location@plt>
   3062c:	mov	r3, #22
   30630:	str	r3, [r0]
   30634:	mov	r0, #0
   30638:	pop	{r4, r5, r6, r7, r8, pc}
   3063c:	ldr	r0, [r5, #8]
   30640:	pop	{r4, r5, r6, r7, r8, pc}
   30644:	ldr	r1, [pc, #144]	; 306dc <__assert_fail@plt+0x1e118>
   30648:	mov	r0, r4
   3064c:	bl	2e964 <__assert_fail@plt+0x1c3a0>
   30650:	subs	r5, r0, #0
   30654:	blt	3068c <__assert_fail@plt+0x1e0c8>
   30658:	mov	r1, r6
   3065c:	mov	r0, r4
   30660:	bl	2efc8 <__assert_fail@plt+0x1ca04>
   30664:	str	r0, [r4, #4]
   30668:	ldr	r3, [r4, #48]	; 0x30
   3066c:	tst	r3, #512	; 0x200
   30670:	beq	30698 <__assert_fail@plt+0x1e0d4>
   30674:	mov	r2, #1
   30678:	mov	r1, r5
   3067c:	mov	r0, r4
   30680:	bl	2ec4c <__assert_fail@plt+0x1c688>
   30684:	ldr	r0, [r4, #4]
   30688:	pop	{r4, r5, r6, r7, r8, pc}
   3068c:	mov	r0, #0
   30690:	str	r0, [r4, #4]
   30694:	pop	{r4, r5, r6, r7, r8, pc}
   30698:	mov	r0, r5
   3069c:	bl	124c8 <fchdir@plt>
   306a0:	cmp	r0, #0
   306a4:	bne	306b4 <__assert_fail@plt+0x1e0f0>
   306a8:	mov	r0, r5
   306ac:	bl	1257c <close@plt>
   306b0:	b	30684 <__assert_fail@plt+0x1e0c0>
   306b4:	ldr	r4, [r7]
   306b8:	mov	r0, r5
   306bc:	bl	1257c <close@plt>
   306c0:	str	r4, [r7]
   306c4:	mov	r0, #0
   306c8:	pop	{r4, r5, r6, r7, r8, pc}
   306cc:	mov	r0, #0
   306d0:	pop	{r4, r5, r6, r7, r8, pc}
   306d4:	mov	r0, #0
   306d8:	pop	{r4, r5, r6, r7, r8, pc}
   306dc:	andeq	r6, r4, r0, asr #3
   306e0:	push	{r4, r5, r6, lr}
   306e4:	subs	r4, r0, #0
   306e8:	beq	30700 <__assert_fail@plt+0x1e13c>
   306ec:	mov	r5, r1
   306f0:	cmp	r4, #10
   306f4:	beq	30714 <__assert_fail@plt+0x1e150>
   306f8:	mov	r0, r4
   306fc:	pop	{r4, r5, r6, pc}
   30700:	bl	12318 <__errno_location@plt>
   30704:	mov	r3, #95	; 0x5f
   30708:	str	r3, [r0]
   3070c:	mvn	r4, #0
   30710:	b	306f8 <__assert_fail@plt+0x1e134>
   30714:	ldr	r6, [r1]
   30718:	ldr	r1, [pc, #48]	; 30750 <__assert_fail@plt+0x1e18c>
   3071c:	mov	r0, r6
   30720:	bl	11f1c <strcmp@plt>
   30724:	cmp	r0, #0
   30728:	bne	306f8 <__assert_fail@plt+0x1e134>
   3072c:	mov	r0, r6
   30730:	bl	124ec <freecon@plt>
   30734:	mov	r3, #0
   30738:	str	r3, [r5]
   3073c:	bl	12318 <__errno_location@plt>
   30740:	mov	r3, #61	; 0x3d
   30744:	str	r3, [r0]
   30748:	mvn	r4, #0
   3074c:	b	306f8 <__assert_fail@plt+0x1e134>
   30750:	muleq	r4, ip, r1
   30754:	push	{r4, lr}
   30758:	mov	r4, r1
   3075c:	bl	122b8 <getfilecon@plt>
   30760:	mov	r1, r4
   30764:	bl	306e0 <__assert_fail@plt+0x1e11c>
   30768:	pop	{r4, pc}
   3076c:	push	{r4, lr}
   30770:	mov	r4, r1
   30774:	bl	12204 <lgetfilecon@plt>
   30778:	mov	r1, r4
   3077c:	bl	306e0 <__assert_fail@plt+0x1e11c>
   30780:	pop	{r4, pc}
   30784:	push	{r4, lr}
   30788:	mov	r4, r1
   3078c:	bl	120c0 <fgetfilecon@plt>
   30790:	mov	r1, r4
   30794:	bl	306e0 <__assert_fail@plt+0x1e11c>
   30798:	pop	{r4, pc}
   3079c:	push	{r4, lr}
   307a0:	cmp	r0, #0
   307a4:	moveq	r0, #1
   307a8:	cmp	r0, #0
   307ac:	blt	307b8 <__assert_fail@plt+0x1e1f4>
   307b0:	bl	12210 <malloc@plt>
   307b4:	pop	{r4, pc}
   307b8:	bl	12318 <__errno_location@plt>
   307bc:	mov	r3, #12
   307c0:	str	r3, [r0]
   307c4:	mov	r0, #0
   307c8:	pop	{r4, pc}
   307cc:	push	{r4, r5, r6, r7, lr}
   307d0:	sub	sp, sp, #12
   307d4:	mov	r7, r1
   307d8:	mov	r5, r2
   307dc:	subs	r6, r0, #0
   307e0:	addeq	r6, sp, #4
   307e4:	mov	r0, r6
   307e8:	bl	121a4 <mbrtowc@plt>
   307ec:	mov	r4, r0
   307f0:	cmp	r5, #0
   307f4:	cmnne	r0, #3
   307f8:	bhi	30808 <__assert_fail@plt+0x1e244>
   307fc:	mov	r0, r4
   30800:	add	sp, sp, #12
   30804:	pop	{r4, r5, r6, r7, pc}
   30808:	mov	r0, #0
   3080c:	bl	3fb30 <__assert_fail@plt+0x2d56c>
   30810:	cmp	r0, #0
   30814:	ldrbeq	r3, [r7]
   30818:	streq	r3, [r6]
   3081c:	moveq	r4, #1
   30820:	b	307fc <__assert_fail@plt+0x1e238>
   30824:	andeq	r0, r0, r0
   30828:	push	{r4, lr}
   3082c:	mov	r1, #32
   30830:	bl	122dc <strchr@plt>
   30834:	cmp	r0, #0
   30838:	movne	r3, #0
   3083c:	strbne	r3, [r0]
   30840:	pop	{r4, pc}
   30844:	push	{r4, r5, r6, lr}
   30848:	mov	r4, r0
   3084c:	bl	122d0 <strlen@plt>
   30850:	adds	r0, r0, #1
   30854:	popeq	{r4, r5, r6, pc}
   30858:	mov	r2, r4
   3085c:	mov	r3, #0
   30860:	b	30878 <__assert_fail@plt+0x1e2b4>
   30864:	strb	r1, [r2]
   30868:	add	r3, r3, #1
   3086c:	add	r2, r2, #1
   30870:	cmp	r0, r3
   30874:	bls	308f0 <__assert_fail@plt+0x1e32c>
   30878:	ldrb	r1, [r4, r3]
   3087c:	cmp	r1, #92	; 0x5c
   30880:	bne	30864 <__assert_fail@plt+0x1e2a0>
   30884:	add	ip, r3, #4
   30888:	cmp	r0, ip
   3088c:	bls	30864 <__assert_fail@plt+0x1e2a0>
   30890:	add	ip, r4, r3
   30894:	ldrb	lr, [ip, #1]
   30898:	sub	ip, lr, #48	; 0x30
   3089c:	uxtb	ip, ip
   308a0:	cmp	ip, #3
   308a4:	bhi	30864 <__assert_fail@plt+0x1e2a0>
   308a8:	add	ip, r4, r3
   308ac:	ldrb	r5, [ip, #2]
   308b0:	sub	ip, r5, #48	; 0x30
   308b4:	uxtb	ip, ip
   308b8:	cmp	ip, #7
   308bc:	bhi	30864 <__assert_fail@plt+0x1e2a0>
   308c0:	add	r6, r3, #3
   308c4:	ldrb	ip, [r4, r6]
   308c8:	sub	ip, ip, #48	; 0x30
   308cc:	uxtb	ip, ip
   308d0:	cmp	ip, #7
   308d4:	bhi	30864 <__assert_fail@plt+0x1e2a0>
   308d8:	add	r3, r5, lr, lsl #3
   308dc:	sub	r3, r3, #432	; 0x1b0
   308e0:	add	r3, ip, r3, lsl #3
   308e4:	strb	r3, [r2]
   308e8:	mov	r3, r6
   308ec:	b	30868 <__assert_fail@plt+0x1e2a4>
   308f0:	pop	{r4, r5, r6, pc}
   308f4:	push	{r4, lr}
   308f8:	mov	r4, r0
   308fc:	ldr	r0, [r0]
   30900:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30904:	ldr	r0, [r4, #4]
   30908:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3090c:	ldr	r0, [r4, #8]
   30910:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30914:	ldrb	r3, [r4, #24]
   30918:	tst	r3, #4
   3091c:	bne	3092c <__assert_fail@plt+0x1e368>
   30920:	mov	r0, r4
   30924:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30928:	pop	{r4, pc}
   3092c:	ldr	r0, [r4, #12]
   30930:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30934:	b	30920 <__assert_fail@plt+0x1e35c>
   30938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3093c:	sub	sp, sp, #68	; 0x44
   30940:	ldr	r1, [pc, #1480]	; 30f10 <__assert_fail@plt+0x1e94c>
   30944:	ldr	r0, [pc, #1480]	; 30f14 <__assert_fail@plt+0x1e950>
   30948:	bl	124d4 <fopen64@plt>
   3094c:	subs	r8, r0, #0
   30950:	beq	30ee0 <__assert_fail@plt+0x1e91c>
   30954:	mov	r3, #0
   30958:	str	r3, [sp, #40]	; 0x28
   3095c:	str	r3, [sp, #44]	; 0x2c
   30960:	add	r9, sp, #60	; 0x3c
   30964:	ldr	sl, [pc, #1452]	; 30f18 <__assert_fail@plt+0x1e954>
   30968:	ldr	fp, [pc, #1452]	; 30f1c <__assert_fail@plt+0x1e958>
   3096c:	mov	r3, r8
   30970:	mov	r2, #10
   30974:	add	r1, sp, #44	; 0x2c
   30978:	add	r0, sp, #40	; 0x28
   3097c:	bl	11eec <__getdelim@plt>
   30980:	cmn	r0, #1
   30984:	beq	30e4c <__assert_fail@plt+0x1e888>
   30988:	add	r3, sp, #56	; 0x38
   3098c:	str	r3, [sp]
   30990:	add	r3, sp, #52	; 0x34
   30994:	add	r2, sp, #48	; 0x30
   30998:	mov	r1, sl
   3099c:	ldr	r0, [sp, #40]	; 0x28
   309a0:	bl	12468 <sscanf@plt>
   309a4:	sub	r0, r0, #2
   309a8:	cmp	r0, #1
   309ac:	bhi	3096c <__assert_fail@plt+0x1e3a8>
   309b0:	ldr	r3, [sp, #56]	; 0x38
   309b4:	ldr	r4, [sp, #40]	; 0x28
   309b8:	add	r4, r4, r3
   309bc:	mov	r0, r4
   309c0:	bl	30828 <__assert_fail@plt+0x1e264>
   309c4:	cmp	r0, #0
   309c8:	beq	3096c <__assert_fail@plt+0x1e3a8>
   309cc:	add	r5, r0, #1
   309d0:	mov	r0, r5
   309d4:	bl	30828 <__assert_fail@plt+0x1e264>
   309d8:	cmp	r0, #0
   309dc:	beq	3096c <__assert_fail@plt+0x1e3a8>
   309e0:	mov	r1, fp
   309e4:	add	r0, r0, #1
   309e8:	bl	3ebac <__assert_fail@plt+0x2c5e8>
   309ec:	cmp	r0, #0
   309f0:	beq	3096c <__assert_fail@plt+0x1e3a8>
   309f4:	add	r6, r0, #3
   309f8:	mov	r0, r6
   309fc:	bl	30828 <__assert_fail@plt+0x1e264>
   30a00:	cmp	r0, #0
   30a04:	beq	3096c <__assert_fail@plt+0x1e3a8>
   30a08:	add	r7, r0, #1
   30a0c:	mov	r0, r7
   30a10:	bl	30828 <__assert_fail@plt+0x1e264>
   30a14:	cmp	r0, #0
   30a18:	beq	3096c <__assert_fail@plt+0x1e3a8>
   30a1c:	mov	r0, r7
   30a20:	bl	30844 <__assert_fail@plt+0x1e280>
   30a24:	mov	r0, r5
   30a28:	bl	30844 <__assert_fail@plt+0x1e280>
   30a2c:	mov	r0, r4
   30a30:	bl	30844 <__assert_fail@plt+0x1e280>
   30a34:	mov	r0, r6
   30a38:	bl	30844 <__assert_fail@plt+0x1e280>
   30a3c:	mov	r0, #32
   30a40:	bl	2cc14 <__assert_fail@plt+0x1a650>
   30a44:	str	r0, [sp, #24]
   30a48:	mov	r0, r7
   30a4c:	bl	2d19c <__assert_fail@plt+0x1abd8>
   30a50:	ldr	r3, [sp, #24]
   30a54:	str	r0, [r3]
   30a58:	mov	r0, r5
   30a5c:	bl	2d19c <__assert_fail@plt+0x1abd8>
   30a60:	ldr	r3, [sp, #24]
   30a64:	str	r0, [r3, #4]
   30a68:	mov	r0, r4
   30a6c:	bl	2d19c <__assert_fail@plt+0x1abd8>
   30a70:	ldr	r3, [sp, #24]
   30a74:	str	r0, [r3, #8]
   30a78:	mov	r0, r6
   30a7c:	bl	2d19c <__assert_fail@plt+0x1abd8>
   30a80:	str	r0, [sp, #28]
   30a84:	ldr	r3, [sp, #24]
   30a88:	str	r0, [r3, #12]
   30a8c:	ldrb	r3, [r3, #24]
   30a90:	orr	r3, r3, #4
   30a94:	ldr	r2, [sp, #24]
   30a98:	strb	r3, [r2, #24]
   30a9c:	ldr	r1, [sp, #52]	; 0x34
   30aa0:	ldr	lr, [sp, #48]	; 0x30
   30aa4:	mov	ip, #0
   30aa8:	lsr	r3, lr, #24
   30aac:	str	r3, [sp, #12]
   30ab0:	lsl	r3, lr, #8
   30ab4:	str	r3, [sp, #8]
   30ab8:	ldr	r2, [pc, #1120]	; 30f20 <__assert_fail@plt+0x1e95c>
   30abc:	mov	r3, #0
   30ac0:	ldrd	r4, [sp, #8]
   30ac4:	and	r4, r4, r2
   30ac8:	and	r5, r5, r3
   30acc:	mov	r6, r4
   30ad0:	mov	r7, r5
   30ad4:	str	lr, [sp, #36]	; 0x24
   30ad8:	str	ip, [sp, #32]
   30adc:	mov	r4, #0
   30ae0:	ldr	r5, [pc, #1084]	; 30f24 <__assert_fail@plt+0x1e960>
   30ae4:	ldrd	r2, [sp, #32]
   30ae8:	and	r2, r2, r4
   30aec:	and	r3, r3, r5
   30af0:	mov	r4, r2
   30af4:	mov	r5, r3
   30af8:	orr	r2, r6, r4
   30afc:	orr	r3, r7, r5
   30b00:	uxtb	r4, r1
   30b04:	mov	r5, #0
   30b08:	orr	r6, r4, r2
   30b0c:	orr	r7, r5, r3
   30b10:	lsr	r3, r1, #20
   30b14:	str	r3, [sp, #20]
   30b18:	lsl	r3, r1, #12
   30b1c:	str	r3, [sp, #16]
   30b20:	add	r3, pc, #992	; 0x3e0
   30b24:	ldrd	r2, [r3]
   30b28:	ldrd	r4, [sp, #16]
   30b2c:	and	r4, r4, r2
   30b30:	and	r5, r5, r3
   30b34:	mov	r2, r4
   30b38:	mov	r3, r5
   30b3c:	orr	r4, r6, r2
   30b40:	orr	r5, r7, r3
   30b44:	mov	r2, r4
   30b48:	mov	r3, r5
   30b4c:	ldr	r1, [sp, #24]
   30b50:	strd	r2, [r1, #16]
   30b54:	ldr	r1, [pc, #972]	; 30f28 <__assert_fail@plt+0x1e964>
   30b58:	bl	11f1c <strcmp@plt>
   30b5c:	cmp	r0, #0
   30b60:	moveq	r0, #1
   30b64:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30b68:	ldr	r1, [pc, #956]	; 30f2c <__assert_fail@plt+0x1e968>
   30b6c:	ldr	r0, [sp, #28]
   30b70:	bl	11f1c <strcmp@plt>
   30b74:	cmp	r0, #0
   30b78:	moveq	r0, #1
   30b7c:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30b80:	ldr	r1, [pc, #948]	; 30f3c <__assert_fail@plt+0x1e978>
   30b84:	ldr	r0, [sp, #28]
   30b88:	bl	11f1c <strcmp@plt>
   30b8c:	cmp	r0, #0
   30b90:	moveq	r0, #1
   30b94:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30b98:	ldr	r1, [pc, #928]	; 30f40 <__assert_fail@plt+0x1e97c>
   30b9c:	ldr	r0, [sp, #28]
   30ba0:	bl	11f1c <strcmp@plt>
   30ba4:	cmp	r0, #0
   30ba8:	moveq	r0, #1
   30bac:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30bb0:	ldr	r1, [pc, #908]	; 30f44 <__assert_fail@plt+0x1e980>
   30bb4:	ldr	r0, [sp, #28]
   30bb8:	bl	11f1c <strcmp@plt>
   30bbc:	cmp	r0, #0
   30bc0:	moveq	r0, #1
   30bc4:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30bc8:	ldr	r1, [pc, #888]	; 30f48 <__assert_fail@plt+0x1e984>
   30bcc:	ldr	r0, [sp, #28]
   30bd0:	bl	11f1c <strcmp@plt>
   30bd4:	cmp	r0, #0
   30bd8:	moveq	r0, #1
   30bdc:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30be0:	ldr	r1, [pc, #868]	; 30f4c <__assert_fail@plt+0x1e988>
   30be4:	ldr	r0, [sp, #28]
   30be8:	bl	11f1c <strcmp@plt>
   30bec:	cmp	r0, #0
   30bf0:	moveq	r0, #1
   30bf4:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30bf8:	ldr	r1, [pc, #848]	; 30f50 <__assert_fail@plt+0x1e98c>
   30bfc:	ldr	r0, [sp, #28]
   30c00:	bl	11f1c <strcmp@plt>
   30c04:	cmp	r0, #0
   30c08:	moveq	r0, #1
   30c0c:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30c10:	ldr	r1, [pc, #828]	; 30f54 <__assert_fail@plt+0x1e990>
   30c14:	ldr	r0, [sp, #28]
   30c18:	bl	11f1c <strcmp@plt>
   30c1c:	cmp	r0, #0
   30c20:	moveq	r0, #1
   30c24:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30c28:	ldr	r1, [pc, #808]	; 30f58 <__assert_fail@plt+0x1e994>
   30c2c:	ldr	r0, [sp, #28]
   30c30:	bl	11f1c <strcmp@plt>
   30c34:	cmp	r0, #0
   30c38:	moveq	r0, #1
   30c3c:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30c40:	ldr	r1, [pc, #788]	; 30f5c <__assert_fail@plt+0x1e998>
   30c44:	ldr	r0, [sp, #28]
   30c48:	bl	11f1c <strcmp@plt>
   30c4c:	cmp	r0, #0
   30c50:	moveq	r0, #1
   30c54:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30c58:	ldr	r1, [pc, #768]	; 30f60 <__assert_fail@plt+0x1e99c>
   30c5c:	ldr	r0, [sp, #28]
   30c60:	bl	11f1c <strcmp@plt>
   30c64:	cmp	r0, #0
   30c68:	moveq	r0, #1
   30c6c:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30c70:	ldr	r1, [pc, #748]	; 30f64 <__assert_fail@plt+0x1e9a0>
   30c74:	ldr	r0, [sp, #28]
   30c78:	bl	11f1c <strcmp@plt>
   30c7c:	cmp	r0, #0
   30c80:	moveq	r0, #1
   30c84:	beq	30c9c <__assert_fail@plt+0x1e6d8>
   30c88:	ldr	r1, [pc, #728]	; 30f68 <__assert_fail@plt+0x1e9a4>
   30c8c:	ldr	r0, [sp, #28]
   30c90:	bl	11f1c <strcmp@plt>
   30c94:	clz	r0, r0
   30c98:	lsr	r0, r0, #5
   30c9c:	ldr	r3, [sp, #24]
   30ca0:	ldrb	r3, [r3, #24]
   30ca4:	bic	r3, r3, #1
   30ca8:	orr	r0, r0, r3
   30cac:	ldr	r3, [sp, #24]
   30cb0:	strb	r0, [r3, #24]
   30cb4:	ldr	r4, [r3]
   30cb8:	mov	r1, #58	; 0x3a
   30cbc:	mov	r0, r4
   30cc0:	bl	122dc <strchr@plt>
   30cc4:	cmp	r0, #0
   30cc8:	movne	r0, #1
   30ccc:	beq	30cf8 <__assert_fail@plt+0x1e734>
   30cd0:	ldr	r3, [sp, #24]
   30cd4:	ldrb	r3, [r3, #24]
   30cd8:	and	r0, r0, #1
   30cdc:	bic	r3, r3, #2
   30ce0:	orr	r3, r3, r0, lsl #1
   30ce4:	ldr	r2, [sp, #24]
   30ce8:	strb	r3, [r2, #24]
   30cec:	str	r2, [r9]
   30cf0:	add	r9, r2, #28
   30cf4:	b	3096c <__assert_fail@plt+0x1e3a8>
   30cf8:	ldrb	r3, [r4]
   30cfc:	cmp	r3, #47	; 0x2f
   30d00:	beq	30df4 <__assert_fail@plt+0x1e830>
   30d04:	ldr	r1, [pc, #608]	; 30f6c <__assert_fail@plt+0x1e9a8>
   30d08:	ldr	r0, [sp, #28]
   30d0c:	bl	11f1c <strcmp@plt>
   30d10:	cmp	r0, #0
   30d14:	moveq	r0, #1
   30d18:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30d1c:	ldr	r1, [pc, #588]	; 30f70 <__assert_fail@plt+0x1e9ac>
   30d20:	ldr	r0, [sp, #28]
   30d24:	bl	11f1c <strcmp@plt>
   30d28:	cmp	r0, #0
   30d2c:	moveq	r0, #1
   30d30:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30d34:	ldr	r1, [pc, #568]	; 30f74 <__assert_fail@plt+0x1e9b0>
   30d38:	ldr	r0, [sp, #28]
   30d3c:	bl	11f1c <strcmp@plt>
   30d40:	cmp	r0, #0
   30d44:	moveq	r0, #1
   30d48:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30d4c:	ldr	r1, [pc, #548]	; 30f78 <__assert_fail@plt+0x1e9b4>
   30d50:	ldr	r0, [sp, #28]
   30d54:	bl	11f1c <strcmp@plt>
   30d58:	cmp	r0, #0
   30d5c:	moveq	r0, #1
   30d60:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30d64:	ldr	r1, [pc, #528]	; 30f7c <__assert_fail@plt+0x1e9b8>
   30d68:	ldr	r0, [sp, #28]
   30d6c:	bl	11f1c <strcmp@plt>
   30d70:	cmp	r0, #0
   30d74:	moveq	r0, #1
   30d78:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30d7c:	ldr	r1, [pc, #508]	; 30f80 <__assert_fail@plt+0x1e9bc>
   30d80:	ldr	r0, [sp, #28]
   30d84:	bl	11f1c <strcmp@plt>
   30d88:	cmp	r0, #0
   30d8c:	moveq	r0, #1
   30d90:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30d94:	ldr	r1, [pc, #488]	; 30f84 <__assert_fail@plt+0x1e9c0>
   30d98:	ldr	r0, [sp, #28]
   30d9c:	bl	11f1c <strcmp@plt>
   30da0:	cmp	r0, #0
   30da4:	moveq	r0, #1
   30da8:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30dac:	ldr	r1, [pc, #468]	; 30f88 <__assert_fail@plt+0x1e9c4>
   30db0:	ldr	r0, [sp, #28]
   30db4:	bl	11f1c <strcmp@plt>
   30db8:	cmp	r0, #0
   30dbc:	moveq	r0, #1
   30dc0:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30dc4:	ldr	r1, [pc, #448]	; 30f8c <__assert_fail@plt+0x1e9c8>
   30dc8:	ldr	r0, [sp, #28]
   30dcc:	bl	11f1c <strcmp@plt>
   30dd0:	cmp	r0, #0
   30dd4:	moveq	r0, #1
   30dd8:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30ddc:	mov	r1, r4
   30de0:	ldr	r0, [pc, #424]	; 30f90 <__assert_fail@plt+0x1e9cc>
   30de4:	bl	11f1c <strcmp@plt>
   30de8:	clz	r0, r0
   30dec:	lsr	r0, r0, #5
   30df0:	b	30cd0 <__assert_fail@plt+0x1e70c>
   30df4:	ldrb	r3, [r4, #1]
   30df8:	cmp	r3, #47	; 0x2f
   30dfc:	bne	30d04 <__assert_fail@plt+0x1e740>
   30e00:	ldr	r1, [pc, #396]	; 30f94 <__assert_fail@plt+0x1e9d0>
   30e04:	ldr	r0, [sp, #28]
   30e08:	bl	11f1c <strcmp@plt>
   30e0c:	cmp	r0, #0
   30e10:	moveq	r0, #1
   30e14:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30e18:	ldr	r1, [pc, #376]	; 30f98 <__assert_fail@plt+0x1e9d4>
   30e1c:	ldr	r0, [sp, #28]
   30e20:	bl	11f1c <strcmp@plt>
   30e24:	cmp	r0, #0
   30e28:	moveq	r0, #1
   30e2c:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30e30:	ldr	r1, [pc, #356]	; 30f9c <__assert_fail@plt+0x1e9d8>
   30e34:	ldr	r0, [sp, #28]
   30e38:	bl	11f1c <strcmp@plt>
   30e3c:	cmp	r0, #0
   30e40:	moveq	r0, #1
   30e44:	beq	30cd0 <__assert_fail@plt+0x1e70c>
   30e48:	b	30d04 <__assert_fail@plt+0x1e740>
   30e4c:	ldr	r0, [sp, #40]	; 0x28
   30e50:	bl	2e3fc <__assert_fail@plt+0x1be38>
   30e54:	ldr	r3, [r8]
   30e58:	tst	r3, #32
   30e5c:	bne	30e84 <__assert_fail@plt+0x1e8c0>
   30e60:	mov	r0, r8
   30e64:	bl	123cc <fclose@plt>
   30e68:	cmn	r0, #1
   30e6c:	beq	30e9c <__assert_fail@plt+0x1e8d8>
   30e70:	mov	r3, #0
   30e74:	str	r3, [r9]
   30e78:	ldr	r0, [sp, #60]	; 0x3c
   30e7c:	add	sp, sp, #68	; 0x44
   30e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30e84:	bl	12318 <__errno_location@plt>
   30e88:	mov	r4, r0
   30e8c:	ldr	r5, [r0]
   30e90:	mov	r0, r8
   30e94:	bl	123cc <fclose@plt>
   30e98:	str	r5, [r4]
   30e9c:	bl	12318 <__errno_location@plt>
   30ea0:	mov	r5, r0
   30ea4:	ldr	r6, [r0]
   30ea8:	mov	r3, #0
   30eac:	str	r3, [r9]
   30eb0:	ldr	r0, [sp, #60]	; 0x3c
   30eb4:	cmp	r0, r3
   30eb8:	beq	30ed4 <__assert_fail@plt+0x1e910>
   30ebc:	ldr	r4, [r0, #28]
   30ec0:	bl	308f4 <__assert_fail@plt+0x1e330>
   30ec4:	str	r4, [sp, #60]	; 0x3c
   30ec8:	mov	r0, r4
   30ecc:	cmp	r4, #0
   30ed0:	bne	30ebc <__assert_fail@plt+0x1e8f8>
   30ed4:	str	r6, [r5]
   30ed8:	mov	r0, #0
   30edc:	b	30e7c <__assert_fail@plt+0x1e8b8>
   30ee0:	ldr	r1, [pc, #72]	; 30f30 <__assert_fail@plt+0x1e96c>
   30ee4:	ldr	r0, [pc, #72]	; 30f34 <__assert_fail@plt+0x1e970>
   30ee8:	bl	12504 <setmntent@plt>
   30eec:	subs	r7, r0, #0
   30ef0:	beq	31318 <__assert_fail@plt+0x1ed54>
   30ef4:	add	r9, sp, #60	; 0x3c
   30ef8:	ldr	sl, [pc, #56]	; 30f38 <__assert_fail@plt+0x1e974>
   30efc:	ldr	r8, [pc, #36]	; 30f28 <__assert_fail@plt+0x1e964>
   30f00:	ldr	fp, [pc, #36]	; 30f2c <__assert_fail@plt+0x1e968>
   30f04:	b	30ff4 <__assert_fail@plt+0x1ea30>
   30f08:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   30f0c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   30f10:	andeq	r4, r4, r4, ror sp
   30f14:	andeq	r8, r4, r8, lsr #3
   30f18:	andeq	r8, r4, r0, asr #3
   30f1c:	ldrdeq	r8, [r4], -r4
   30f20:	andeq	pc, pc, r0, lsl #30
   30f24:			; <UNDEFINED> instruction: 0xfffff000
   30f28:	ldrdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   30f2c:	andeq	r8, r4, r0, ror #3
   30f30:			; <UNDEFINED> instruction: 0x000484b0
   30f34:	andeq	r8, r4, ip, lsr #5
   30f38:			; <UNDEFINED> instruction: 0x000482b8
   30f3c:	andeq	r8, r4, r8, ror #3
   30f40:	strdeq	r8, [r4], -r0
   30f44:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   30f48:	andeq	r8, r4, r0, lsl #4
   30f4c:	andeq	r8, r4, r8, lsl #4
   30f50:	andeq	r8, r4, r4, lsl r2
   30f54:	andeq	r8, r4, ip, lsl r2
   30f58:	andeq	r8, r4, r8, lsr #4
   30f5c:	andeq	r8, r4, r0, lsr r2
   30f60:	andeq	r8, r4, r8, lsr r2
   30f64:	andeq	r4, r4, r0, ror sp
   30f68:	andeq	r8, r4, r0, asr #4
   30f6c:	andeq	r8, r4, r0, ror #4
   30f70:	andeq	r4, r4, r8, ror sp
   30f74:	andeq	r8, r4, r8, ror #4
   30f78:	andeq	r8, r4, r0, ror r2
   30f7c:	andeq	r8, r4, ip, ror r2
   30f80:	andeq	r8, r4, r4, lsl #5
   30f84:	andeq	r8, r4, ip, lsl #5
   30f88:	muleq	r4, r4, r2
   30f8c:	muleq	r4, ip, r2
   30f90:	andeq	r8, r4, r4, lsr #5
   30f94:	andeq	r8, r4, r8, asr #4
   30f98:	andeq	r8, r4, r0, asr r2
   30f9c:	andeq	r8, r4, r8, asr r2
   30fa0:	ldrb	r3, [r4, #24]
   30fa4:	bic	r3, r3, #1
   30fa8:	orr	r0, r0, r3
   30fac:	strb	r0, [r4, #24]
   30fb0:	ldr	r6, [r4]
   30fb4:	mov	r1, #58	; 0x3a
   30fb8:	mov	r0, r6
   30fbc:	bl	122dc <strchr@plt>
   30fc0:	cmp	r0, #0
   30fc4:	movne	r3, #1
   30fc8:	beq	311b0 <__assert_fail@plt+0x1ebec>
   30fcc:	ldrb	r0, [r4, #24]
   30fd0:	and	r3, r3, #1
   30fd4:	bic	r0, r0, #2
   30fd8:	orr	r0, r0, r3, lsl #1
   30fdc:	strb	r0, [r4, #24]
   30fe0:	mvn	r2, #0
   30fe4:	mvn	r3, #0
   30fe8:	strd	r2, [r4, #16]
   30fec:	str	r4, [r9]
   30ff0:	add	r9, r4, #28
   30ff4:	mov	r0, r7
   30ff8:	bl	121c8 <getmntent@plt>
   30ffc:	subs	r5, r0, #0
   31000:	beq	31304 <__assert_fail@plt+0x1ed40>
   31004:	mov	r1, sl
   31008:	mov	r0, r5
   3100c:	bl	12174 <hasmntopt@plt>
   31010:	mov	r6, r0
   31014:	mov	r0, #32
   31018:	bl	2cc14 <__assert_fail@plt+0x1a650>
   3101c:	mov	r4, r0
   31020:	ldr	r0, [r5]
   31024:	bl	2d19c <__assert_fail@plt+0x1abd8>
   31028:	str	r0, [r4]
   3102c:	ldr	r0, [r5, #4]
   31030:	bl	2d19c <__assert_fail@plt+0x1abd8>
   31034:	str	r0, [r4, #4]
   31038:	mov	r3, #0
   3103c:	str	r3, [r4, #8]
   31040:	ldr	r0, [r5, #8]
   31044:	bl	2d19c <__assert_fail@plt+0x1abd8>
   31048:	mov	r5, r0
   3104c:	str	r0, [r4, #12]
   31050:	ldrb	r3, [r4, #24]
   31054:	orr	r3, r3, #4
   31058:	strb	r3, [r4, #24]
   3105c:	mov	r1, r8
   31060:	bl	11f1c <strcmp@plt>
   31064:	cmp	r0, #0
   31068:	moveq	r0, #1
   3106c:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31070:	mov	r1, fp
   31074:	mov	r0, r5
   31078:	bl	11f1c <strcmp@plt>
   3107c:	cmp	r0, #0
   31080:	moveq	r0, #1
   31084:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31088:	ldr	r1, [pc, #-340]	; 30f3c <__assert_fail@plt+0x1e978>
   3108c:	mov	r0, r5
   31090:	bl	11f1c <strcmp@plt>
   31094:	cmp	r0, #0
   31098:	moveq	r0, #1
   3109c:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   310a0:	ldr	r1, [pc, #-360]	; 30f40 <__assert_fail@plt+0x1e97c>
   310a4:	mov	r0, r5
   310a8:	bl	11f1c <strcmp@plt>
   310ac:	cmp	r0, #0
   310b0:	moveq	r0, #1
   310b4:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   310b8:	ldr	r1, [pc, #-380]	; 30f44 <__assert_fail@plt+0x1e980>
   310bc:	mov	r0, r5
   310c0:	bl	11f1c <strcmp@plt>
   310c4:	cmp	r0, #0
   310c8:	moveq	r0, #1
   310cc:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   310d0:	ldr	r1, [pc, #-400]	; 30f48 <__assert_fail@plt+0x1e984>
   310d4:	mov	r0, r5
   310d8:	bl	11f1c <strcmp@plt>
   310dc:	cmp	r0, #0
   310e0:	moveq	r0, #1
   310e4:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   310e8:	ldr	r1, [pc, #-420]	; 30f4c <__assert_fail@plt+0x1e988>
   310ec:	mov	r0, r5
   310f0:	bl	11f1c <strcmp@plt>
   310f4:	cmp	r0, #0
   310f8:	moveq	r0, #1
   310fc:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31100:	ldr	r1, [pc, #-440]	; 30f50 <__assert_fail@plt+0x1e98c>
   31104:	mov	r0, r5
   31108:	bl	11f1c <strcmp@plt>
   3110c:	cmp	r0, #0
   31110:	moveq	r0, #1
   31114:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31118:	ldr	r1, [pc, #-460]	; 30f54 <__assert_fail@plt+0x1e990>
   3111c:	mov	r0, r5
   31120:	bl	11f1c <strcmp@plt>
   31124:	cmp	r0, #0
   31128:	moveq	r0, #1
   3112c:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31130:	ldr	r1, [pc, #-480]	; 30f58 <__assert_fail@plt+0x1e994>
   31134:	mov	r0, r5
   31138:	bl	11f1c <strcmp@plt>
   3113c:	cmp	r0, #0
   31140:	moveq	r0, #1
   31144:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31148:	ldr	r1, [pc, #-500]	; 30f5c <__assert_fail@plt+0x1e998>
   3114c:	mov	r0, r5
   31150:	bl	11f1c <strcmp@plt>
   31154:	cmp	r0, #0
   31158:	moveq	r0, #1
   3115c:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31160:	ldr	r1, [pc, #-520]	; 30f60 <__assert_fail@plt+0x1e99c>
   31164:	mov	r0, r5
   31168:	bl	11f1c <strcmp@plt>
   3116c:	cmp	r0, #0
   31170:	moveq	r0, #1
   31174:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31178:	ldr	r1, [pc, #-540]	; 30f64 <__assert_fail@plt+0x1e9a0>
   3117c:	mov	r0, r5
   31180:	bl	11f1c <strcmp@plt>
   31184:	cmp	r0, #0
   31188:	moveq	r0, #1
   3118c:	beq	30fa0 <__assert_fail@plt+0x1e9dc>
   31190:	ldr	r1, [pc, #-560]	; 30f68 <__assert_fail@plt+0x1e9a4>
   31194:	mov	r0, r5
   31198:	bl	11f1c <strcmp@plt>
   3119c:	cmp	r6, #0
   311a0:	cmpeq	r0, #0
   311a4:	moveq	r0, #1
   311a8:	movne	r0, #0
   311ac:	b	30fa0 <__assert_fail@plt+0x1e9dc>
   311b0:	ldrb	r3, [r6]
   311b4:	cmp	r3, #47	; 0x2f
   311b8:	beq	312ac <__assert_fail@plt+0x1ece8>
   311bc:	ldr	r1, [pc, #-600]	; 30f6c <__assert_fail@plt+0x1e9a8>
   311c0:	mov	r0, r5
   311c4:	bl	11f1c <strcmp@plt>
   311c8:	cmp	r0, #0
   311cc:	moveq	r3, #1
   311d0:	beq	30fcc <__assert_fail@plt+0x1ea08>
   311d4:	ldr	r1, [pc, #-620]	; 30f70 <__assert_fail@plt+0x1e9ac>
   311d8:	mov	r0, r5
   311dc:	bl	11f1c <strcmp@plt>
   311e0:	cmp	r0, #0
   311e4:	moveq	r3, #1
   311e8:	beq	30fcc <__assert_fail@plt+0x1ea08>
   311ec:	ldr	r1, [pc, #-640]	; 30f74 <__assert_fail@plt+0x1e9b0>
   311f0:	mov	r0, r5
   311f4:	bl	11f1c <strcmp@plt>
   311f8:	cmp	r0, #0
   311fc:	moveq	r3, #1
   31200:	beq	30fcc <__assert_fail@plt+0x1ea08>
   31204:	ldr	r1, [pc, #-660]	; 30f78 <__assert_fail@plt+0x1e9b4>
   31208:	mov	r0, r5
   3120c:	bl	11f1c <strcmp@plt>
   31210:	cmp	r0, #0
   31214:	moveq	r3, #1
   31218:	beq	30fcc <__assert_fail@plt+0x1ea08>
   3121c:	ldr	r1, [pc, #-680]	; 30f7c <__assert_fail@plt+0x1e9b8>
   31220:	mov	r0, r5
   31224:	bl	11f1c <strcmp@plt>
   31228:	cmp	r0, #0
   3122c:	moveq	r3, #1
   31230:	beq	30fcc <__assert_fail@plt+0x1ea08>
   31234:	ldr	r1, [pc, #-700]	; 30f80 <__assert_fail@plt+0x1e9bc>
   31238:	mov	r0, r5
   3123c:	bl	11f1c <strcmp@plt>
   31240:	cmp	r0, #0
   31244:	moveq	r3, #1
   31248:	beq	30fcc <__assert_fail@plt+0x1ea08>
   3124c:	ldr	r1, [pc, #-720]	; 30f84 <__assert_fail@plt+0x1e9c0>
   31250:	mov	r0, r5
   31254:	bl	11f1c <strcmp@plt>
   31258:	cmp	r0, #0
   3125c:	moveq	r3, #1
   31260:	beq	30fcc <__assert_fail@plt+0x1ea08>
   31264:	ldr	r1, [pc, #-740]	; 30f88 <__assert_fail@plt+0x1e9c4>
   31268:	mov	r0, r5
   3126c:	bl	11f1c <strcmp@plt>
   31270:	cmp	r0, #0
   31274:	moveq	r3, #1
   31278:	beq	30fcc <__assert_fail@plt+0x1ea08>
   3127c:	ldr	r1, [pc, #-760]	; 30f8c <__assert_fail@plt+0x1e9c8>
   31280:	mov	r0, r5
   31284:	bl	11f1c <strcmp@plt>
   31288:	cmp	r0, #0
   3128c:	moveq	r3, #1
   31290:	beq	30fcc <__assert_fail@plt+0x1ea08>
   31294:	mov	r1, r6
   31298:	ldr	r0, [pc, #-784]	; 30f90 <__assert_fail@plt+0x1e9cc>
   3129c:	bl	11f1c <strcmp@plt>
   312a0:	clz	r3, r0
   312a4:	lsr	r3, r3, #5
   312a8:	b	30fcc <__assert_fail@plt+0x1ea08>
   312ac:	ldrb	r3, [r6, #1]
   312b0:	cmp	r3, #47	; 0x2f
   312b4:	bne	311bc <__assert_fail@plt+0x1ebf8>
   312b8:	ldr	r1, [pc, #-812]	; 30f94 <__assert_fail@plt+0x1e9d0>
   312bc:	mov	r0, r5
   312c0:	bl	11f1c <strcmp@plt>
   312c4:	cmp	r0, #0
   312c8:	moveq	r3, #1
   312cc:	beq	30fcc <__assert_fail@plt+0x1ea08>
   312d0:	ldr	r1, [pc, #-832]	; 30f98 <__assert_fail@plt+0x1e9d4>
   312d4:	mov	r0, r5
   312d8:	bl	11f1c <strcmp@plt>
   312dc:	cmp	r0, #0
   312e0:	moveq	r3, #1
   312e4:	beq	30fcc <__assert_fail@plt+0x1ea08>
   312e8:	ldr	r1, [pc, #-852]	; 30f9c <__assert_fail@plt+0x1e9d8>
   312ec:	mov	r0, r5
   312f0:	bl	11f1c <strcmp@plt>
   312f4:	cmp	r0, #0
   312f8:	moveq	r3, #1
   312fc:	beq	30fcc <__assert_fail@plt+0x1ea08>
   31300:	b	311bc <__assert_fail@plt+0x1ebf8>
   31304:	mov	r0, r7
   31308:	bl	123f0 <endmntent@plt>
   3130c:	cmp	r0, #0
   31310:	bne	30e70 <__assert_fail@plt+0x1e8ac>
   31314:	b	30e9c <__assert_fail@plt+0x1e8d8>
   31318:	mov	r0, #0
   3131c:	b	30e7c <__assert_fail@plt+0x1e8b8>
   31320:	push	{r4, lr}
   31324:	cmp	r0, #0
   31328:	beq	31344 <__assert_fail@plt+0x1ed80>
   3132c:	cmp	r1, #0
   31330:	beq	31350 <__assert_fail@plt+0x1ed8c>
   31334:	cmp	r1, #0
   31338:	blt	3135c <__assert_fail@plt+0x1ed98>
   3133c:	bl	120b4 <realloc@plt>
   31340:	pop	{r4, pc}
   31344:	mov	r0, r1
   31348:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3134c:	pop	{r4, pc}
   31350:	bl	2e3fc <__assert_fail@plt+0x1be38>
   31354:	mov	r0, #0
   31358:	pop	{r4, pc}
   3135c:	bl	12318 <__errno_location@plt>
   31360:	mov	r3, #12
   31364:	str	r3, [r0]
   31368:	mov	r0, #0
   3136c:	pop	{r4, pc}
   31370:	push	{r4, r5, r6, lr}
   31374:	mov	r6, r0
   31378:	mov	r5, r1
   3137c:	subs	r4, r2, #0
   31380:	beq	313ac <__assert_fail@plt+0x1ede8>
   31384:	mov	r1, r4
   31388:	mvn	r0, #0
   3138c:	bl	41a68 <__assert_fail@plt+0x2f4a4>
   31390:	cmp	r0, r5
   31394:	bcs	313ac <__assert_fail@plt+0x1ede8>
   31398:	bl	12318 <__errno_location@plt>
   3139c:	mov	r3, #12
   313a0:	str	r3, [r0]
   313a4:	mov	r0, #0
   313a8:	pop	{r4, r5, r6, pc}
   313ac:	mul	r1, r5, r4
   313b0:	mov	r0, r6
   313b4:	bl	31320 <__assert_fail@plt+0x1ed5c>
   313b8:	pop	{r4, r5, r6, pc}
   313bc:	ldr	r3, [r0, #80]	; 0x50
   313c0:	cmp	r3, #1
   313c4:	beq	31418 <__assert_fail@plt+0x1ee54>
   313c8:	add	ip, r1, #1
   313cc:	ldr	r3, [r0, #28]
   313d0:	cmp	ip, r3
   313d4:	bge	31420 <__assert_fail@plt+0x1ee5c>
   313d8:	ldr	r0, [r0, #8]
   313dc:	add	r2, r0, ip, lsl #2
   313e0:	ldr	r0, [r0, ip, lsl #2]
   313e4:	cmn	r0, #1
   313e8:	bne	31428 <__assert_fail@plt+0x1ee64>
   313ec:	sub	r1, r3, r1
   313f0:	mov	r3, #2
   313f4:	mov	r0, r3
   313f8:	cmp	r3, r1
   313fc:	beq	31414 <__assert_fail@plt+0x1ee50>
   31400:	add	r3, r3, #1
   31404:	ldr	ip, [r2, #4]!
   31408:	cmn	ip, #1
   3140c:	beq	313f4 <__assert_fail@plt+0x1ee30>
   31410:	bx	lr
   31414:	bx	lr
   31418:	mov	r0, #1
   3141c:	bx	lr
   31420:	mov	r0, #1
   31424:	bx	lr
   31428:	mov	r0, #1
   3142c:	bx	lr
   31430:	ldr	r3, [r0, #80]	; 0x50
   31434:	cmp	r3, #1
   31438:	ldreq	r3, [r0, #4]
   3143c:	ldrbeq	r0, [r3, r1]
   31440:	ldrne	r3, [r0, #8]
   31444:	ldrne	r0, [r3, r1, lsl #2]
   31448:	bx	lr
   3144c:	ldr	ip, [r0, #36]	; 0x24
   31450:	ldr	r3, [r0, #48]	; 0x30
   31454:	cmp	ip, r3
   31458:	movge	ip, r3
   3145c:	ldr	r3, [r0, #28]
   31460:	cmp	ip, r3
   31464:	ble	31494 <__assert_fail@plt+0x1eed0>
   31468:	ldr	r2, [r0]
   3146c:	ldr	r1, [r0, #24]
   31470:	add	r2, r2, r3
   31474:	ldrb	r2, [r2, r1]
   31478:	ldr	r1, [r0, #64]	; 0x40
   3147c:	ldrb	r1, [r1, r2]
   31480:	ldr	r2, [r0, #4]
   31484:	strb	r1, [r2, r3]
   31488:	add	r3, r3, #1
   3148c:	cmp	ip, r3
   31490:	bne	31468 <__assert_fail@plt+0x1eea4>
   31494:	str	r3, [r0, #28]
   31498:	str	r3, [r0, #32]
   3149c:	bx	lr
   314a0:	push	{r4, r5, lr}
   314a4:	mov	r4, r0
   314a8:	cmp	r1, #0
   314ac:	cmpne	r0, #0
   314b0:	moveq	r0, #1
   314b4:	movne	r0, #0
   314b8:	beq	3150c <__assert_fail@plt+0x1ef48>
   314bc:	mov	r5, r1
   314c0:	ldr	r2, [r4, #4]
   314c4:	ldr	r3, [r1, #4]
   314c8:	cmp	r2, r3
   314cc:	subeq	r3, r2, #1
   314d0:	lsleq	r3, r3, #2
   314d4:	beq	314dc <__assert_fail@plt+0x1ef18>
   314d8:	pop	{r4, r5, pc}
   314dc:	subs	r2, r2, #1
   314e0:	bmi	31504 <__assert_fail@plt+0x1ef40>
   314e4:	ldr	ip, [r4, #8]
   314e8:	ldr	lr, [ip, r3]
   314ec:	ldr	ip, [r5, #8]
   314f0:	ldr	ip, [ip, r3]
   314f4:	sub	r3, r3, #4
   314f8:	cmp	lr, ip
   314fc:	beq	314dc <__assert_fail@plt+0x1ef18>
   31500:	pop	{r4, r5, pc}
   31504:	mov	r0, #1
   31508:	pop	{r4, r5, pc}
   3150c:	mov	r0, #0
   31510:	pop	{r4, r5, pc}
   31514:	push	{r4, lr}
   31518:	ldr	lr, [r0, #4]
   3151c:	cmp	lr, #0
   31520:	ble	315a4 <__assert_fail@plt+0x1efe0>
   31524:	sub	lr, lr, #1
   31528:	mov	ip, #0
   3152c:	cmp	ip, lr
   31530:	bcs	31584 <__assert_fail@plt+0x1efc0>
   31534:	add	r2, ip, lr
   31538:	lsr	r2, r2, #1
   3153c:	ldr	r4, [r0, #8]
   31540:	ldr	r3, [r4, r2, lsl #2]
   31544:	cmp	r1, r3
   31548:	bgt	31570 <__assert_fail@plt+0x1efac>
   3154c:	cmp	ip, r2
   31550:	bcs	31584 <__assert_fail@plt+0x1efc0>
   31554:	add	r3, ip, r2
   31558:	lsr	r3, r3, #1
   3155c:	ldr	lr, [r4, r3, lsl #2]
   31560:	cmp	lr, r1
   31564:	blt	31578 <__assert_fail@plt+0x1efb4>
   31568:	mov	r2, r3
   3156c:	b	3154c <__assert_fail@plt+0x1ef88>
   31570:	mov	r3, r2
   31574:	mov	r2, lr
   31578:	add	ip, r3, #1
   3157c:	mov	lr, r2
   31580:	b	3152c <__assert_fail@plt+0x1ef68>
   31584:	ldr	r3, [r0, #8]
   31588:	ldr	r3, [r3, ip, lsl #2]
   3158c:	cmp	r1, r3
   31590:	beq	3159c <__assert_fail@plt+0x1efd8>
   31594:	mov	r0, #0
   31598:	pop	{r4, pc}
   3159c:	add	r0, ip, #1
   315a0:	pop	{r4, pc}
   315a4:	mov	r0, #0
   315a8:	pop	{r4, pc}
   315ac:	cmp	r1, #0
   315b0:	bxlt	lr
   315b4:	ldr	r3, [r0, #4]
   315b8:	cmp	r1, r3
   315bc:	bxge	lr
   315c0:	sub	r3, r3, #1
   315c4:	str	r3, [r0, #4]
   315c8:	cmp	r1, r3
   315cc:	bxge	lr
   315d0:	push	{lr}		; (str lr, [sp, #-4]!)
   315d4:	lsl	r3, r1, #2
   315d8:	ldr	ip, [r0, #8]
   315dc:	add	r2, r3, #4
   315e0:	ldr	lr, [ip, r2]
   315e4:	str	lr, [ip, r3]
   315e8:	add	r1, r1, #1
   315ec:	mov	r3, r2
   315f0:	ldr	r2, [r0, #4]
   315f4:	cmp	r2, r1
   315f8:	bgt	315d8 <__assert_fail@plt+0x1f014>
   315fc:	pop	{pc}		; (ldr pc, [sp], #4)
   31600:	ldrb	r3, [r1, #24]
   31604:	cmp	r3, #4
   31608:	beq	3161c <__assert_fail@plt+0x1f058>
   3160c:	cmp	r3, #17
   31610:	beq	31648 <__assert_fail@plt+0x1f084>
   31614:	mov	r0, #0
   31618:	bx	lr
   3161c:	ldr	r3, [r0, #132]	; 0x84
   31620:	cmp	r3, #0
   31624:	beq	31614 <__assert_fail@plt+0x1f050>
   31628:	ldr	r2, [r1, #20]
   3162c:	ldr	r2, [r3, r2, lsl #2]
   31630:	str	r2, [r1, #20]
   31634:	ldr	r3, [r0, #80]	; 0x50
   31638:	mov	r1, #1
   3163c:	orr	r3, r3, r1, lsl r2
   31640:	str	r3, [r0, #80]	; 0x50
   31644:	b	31614 <__assert_fail@plt+0x1f050>
   31648:	ldr	r3, [r1, #4]
   3164c:	cmp	r3, #0
   31650:	beq	31614 <__assert_fail@plt+0x1f050>
   31654:	ldrb	r2, [r3, #24]
   31658:	cmp	r2, #17
   3165c:	bne	31614 <__assert_fail@plt+0x1f050>
   31660:	ldr	r2, [r3, #20]
   31664:	ldr	r3, [r3, #4]
   31668:	str	r3, [r1, #4]
   3166c:	cmp	r3, #0
   31670:	strne	r1, [r3]
   31674:	ldr	r3, [r0, #132]	; 0x84
   31678:	ldr	r1, [r1, #20]
   3167c:	ldr	r1, [r3, r1, lsl #2]
   31680:	str	r1, [r3, r2, lsl #2]
   31684:	cmp	r2, #31
   31688:	ldrle	r3, [r0, #80]	; 0x50
   3168c:	movle	r1, #1
   31690:	bicle	r2, r3, r1, lsl r2
   31694:	strle	r2, [r0, #80]	; 0x50
   31698:	b	31614 <__assert_fail@plt+0x1f050>
   3169c:	ldrb	r3, [r1, #24]
   316a0:	cmp	r3, #11
   316a4:	beq	316d4 <__assert_fail@plt+0x1f110>
   316a8:	cmp	r3, #16
   316ac:	beq	316e4 <__assert_fail@plt+0x1f120>
   316b0:	ldr	r3, [r1, #4]
   316b4:	cmp	r3, #0
   316b8:	ldrne	r2, [r1, #16]
   316bc:	strne	r2, [r3, #16]
   316c0:	ldr	r3, [r1, #8]
   316c4:	cmp	r3, #0
   316c8:	ldrne	r2, [r1, #16]
   316cc:	strne	r2, [r3, #16]
   316d0:	b	316dc <__assert_fail@plt+0x1f118>
   316d4:	ldr	r3, [r1, #4]
   316d8:	str	r1, [r3, #16]
   316dc:	mov	r0, #0
   316e0:	bx	lr
   316e4:	ldr	r3, [r1, #4]
   316e8:	ldr	r2, [r1, #8]
   316ec:	ldr	r2, [r2, #12]
   316f0:	str	r2, [r3, #16]
   316f4:	ldr	r3, [r1, #8]
   316f8:	ldr	r2, [r1, #16]
   316fc:	str	r2, [r3, #16]
   31700:	b	316dc <__assert_fail@plt+0x1f118>
   31704:	ldr	r3, [r1, #40]	; 0x28
   31708:	ldr	ip, [r1, #56]	; 0x38
   3170c:	cmp	ip, r3
   31710:	ble	31788 <__assert_fail@plt+0x1f1c4>
   31714:	push	{lr}		; (str lr, [sp, #-4]!)
   31718:	ldr	ip, [r1, #4]
   3171c:	ldrb	r3, [ip, r3]
   31720:	strb	r3, [r0]
   31724:	ldr	ip, [r1, #80]	; 0x50
   31728:	cmp	ip, #1
   3172c:	ble	31750 <__assert_fail@plt+0x1f18c>
   31730:	ldr	ip, [r1, #40]	; 0x28
   31734:	ldr	lr, [r1, #28]
   31738:	cmp	ip, lr
   3173c:	beq	31750 <__assert_fail@plt+0x1f18c>
   31740:	ldr	lr, [r1, #8]
   31744:	ldr	ip, [lr, ip, lsl #2]
   31748:	cmn	ip, #1
   3174c:	beq	31798 <__assert_fail@plt+0x1f1d4>
   31750:	cmp	r3, #92	; 0x5c
   31754:	beq	317a8 <__assert_fail@plt+0x1f1e4>
   31758:	cmp	r3, #91	; 0x5b
   3175c:	beq	317f4 <__assert_fail@plt+0x1f230>
   31760:	cmp	r3, #93	; 0x5d
   31764:	beq	31880 <__assert_fail@plt+0x1f2bc>
   31768:	cmp	r3, #94	; 0x5e
   3176c:	beq	31890 <__assert_fail@plt+0x1f2cc>
   31770:	cmp	r3, #45	; 0x2d
   31774:	bne	317c4 <__assert_fail@plt+0x1f200>
   31778:	mov	r3, #22
   3177c:	strb	r3, [r0, #4]
   31780:	mov	r0, #1
   31784:	pop	{pc}		; (ldr pc, [sp], #4)
   31788:	mov	r3, #2
   3178c:	strb	r3, [r0, #4]
   31790:	mov	r0, #0
   31794:	bx	lr
   31798:	mov	r3, #1
   3179c:	strb	r3, [r0, #4]
   317a0:	mov	r0, r3
   317a4:	pop	{pc}		; (ldr pc, [sp], #4)
   317a8:	tst	r2, #1
   317ac:	beq	317c4 <__assert_fail@plt+0x1f200>
   317b0:	ldr	r3, [r1, #40]	; 0x28
   317b4:	add	r3, r3, #1
   317b8:	ldr	r2, [r1, #48]	; 0x30
   317bc:	cmp	r3, r2
   317c0:	blt	317d4 <__assert_fail@plt+0x1f210>
   317c4:	mov	r3, #1
   317c8:	strb	r3, [r0, #4]
   317cc:	mov	r0, r3
   317d0:	pop	{pc}		; (ldr pc, [sp], #4)
   317d4:	str	r3, [r1, #40]	; 0x28
   317d8:	ldr	r2, [r1, #4]
   317dc:	ldrb	r3, [r2, r3]
   317e0:	strb	r3, [r0]
   317e4:	mov	r3, #1
   317e8:	strb	r3, [r0, #4]
   317ec:	mov	r0, r3
   317f0:	pop	{pc}		; (ldr pc, [sp], #4)
   317f4:	ldr	r3, [r1, #40]	; 0x28
   317f8:	add	lr, r3, #1
   317fc:	ldr	ip, [r1, #48]	; 0x30
   31800:	cmp	lr, ip
   31804:	bge	31868 <__assert_fail@plt+0x1f2a4>
   31808:	ldr	r1, [r1, #4]
   3180c:	add	r3, r1, r3
   31810:	ldrb	r3, [r3, #1]
   31814:	strb	r3, [r0]
   31818:	cmp	r3, #58	; 0x3a
   3181c:	beq	31850 <__assert_fail@plt+0x1f28c>
   31820:	cmp	r3, #61	; 0x3d
   31824:	beq	31840 <__assert_fail@plt+0x1f27c>
   31828:	cmp	r3, #46	; 0x2e
   3182c:	bne	31868 <__assert_fail@plt+0x1f2a4>
   31830:	mov	r3, #26
   31834:	strb	r3, [r0, #4]
   31838:	mov	r0, #2
   3183c:	pop	{pc}		; (ldr pc, [sp], #4)
   31840:	mov	r3, #28
   31844:	strb	r3, [r0, #4]
   31848:	mov	r0, #2
   3184c:	pop	{pc}		; (ldr pc, [sp], #4)
   31850:	tst	r2, #4
   31854:	beq	31868 <__assert_fail@plt+0x1f2a4>
   31858:	mov	r3, #30
   3185c:	strb	r3, [r0, #4]
   31860:	mov	r0, #2
   31864:	pop	{pc}		; (ldr pc, [sp], #4)
   31868:	mov	r3, #1
   3186c:	strb	r3, [r0, #4]
   31870:	mov	r2, #91	; 0x5b
   31874:	strb	r2, [r0]
   31878:	mov	r0, r3
   3187c:	pop	{pc}		; (ldr pc, [sp], #4)
   31880:	mov	r3, #21
   31884:	strb	r3, [r0, #4]
   31888:	mov	r0, #1
   3188c:	pop	{pc}		; (ldr pc, [sp], #4)
   31890:	mov	r3, #25
   31894:	strb	r3, [r0, #4]
   31898:	mov	r0, #1
   3189c:	pop	{pc}		; (ldr pc, [sp], #4)
   318a0:	ldrb	r3, [r1, #24]
   318a4:	cmp	r3, #17
   318a8:	beq	318b4 <__assert_fail@plt+0x1f2f0>
   318ac:	mov	r0, #0
   318b0:	bx	lr
   318b4:	ldr	r3, [r1, #20]
   318b8:	cmp	r0, r3
   318bc:	ldrbeq	r3, [r1, #26]
   318c0:	orreq	r3, r3, #8
   318c4:	strbeq	r3, [r1, #26]
   318c8:	b	318ac <__assert_fail@plt+0x1f2e8>
   318cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   318d0:	sub	sp, sp, #52	; 0x34
   318d4:	str	r0, [sp, #8]
   318d8:	str	r1, [sp, #12]
   318dc:	mov	r7, r2
   318e0:	str	r3, [sp, #40]	; 0x28
   318e4:	ldr	r9, [r0, #84]	; 0x54
   318e8:	add	r3, r3, r3, lsl #1
   318ec:	ldr	sl, [r9, #24]
   318f0:	add	sl, sl, r3, lsl #2
   318f4:	ldr	r3, [sl, #4]
   318f8:	cmp	r3, #0
   318fc:	ble	31aa8 <__assert_fail@plt+0x1f4e4>
   31900:	ldr	r3, [sp, #88]	; 0x58
   31904:	add	r3, r3, r3, lsl #1
   31908:	lsl	r3, r3, #3
   3190c:	mov	r2, #1
   31910:	lsl	r2, r2, r7
   31914:	str	r2, [sp, #20]
   31918:	mvn	r2, r2
   3191c:	str	r2, [sp, #24]
   31920:	mov	r8, #0
   31924:	mov	r2, r1
   31928:	and	r1, r1, #1
   3192c:	str	r1, [sp, #28]
   31930:	and	r2, r2, #2
   31934:	str	r2, [sp, #16]
   31938:	add	r3, r3, #24
   3193c:	str	r3, [sp, #44]	; 0x2c
   31940:	b	31a24 <__assert_fail@plt+0x1f460>
   31944:	ldr	r3, [r9, #20]
   31948:	add	r3, r3, fp
   3194c:	ldr	r3, [r3, #8]
   31950:	ldr	r3, [r3]
   31954:	cmp	sl, r3
   31958:	beq	319dc <__assert_fail@plt+0x1f418>
   3195c:	str	r8, [sp]
   31960:	mov	r2, r7
   31964:	ldr	r1, [sp, #12]
   31968:	ldr	r0, [sp, #8]
   3196c:	bl	318cc <__assert_fail@plt+0x1f308>
   31970:	cmn	r0, #1
   31974:	beq	319e8 <__assert_fail@plt+0x1f424>
   31978:	cmp	r0, #0
   3197c:	bne	3198c <__assert_fail@plt+0x1f3c8>
   31980:	ldr	r3, [sp, #16]
   31984:	cmp	r3, #0
   31988:	bne	319e8 <__assert_fail@plt+0x1f424>
   3198c:	cmp	r7, #31
   31990:	ldrle	r3, [r6, #-8]
   31994:	ldrle	r2, [sp, #24]
   31998:	andle	r3, r3, r2
   3199c:	strle	r3, [r6, #-8]
   319a0:	add	r4, r4, #24
   319a4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   319a8:	cmp	r3, #0
   319ac:	beq	319f0 <__assert_fail@plt+0x1f42c>
   319b0:	mov	r6, r4
   319b4:	ldr	r3, [r4, #-24]	; 0xffffffe8
   319b8:	cmp	r5, r3
   319bc:	bne	319a0 <__assert_fail@plt+0x1f3dc>
   319c0:	cmp	r7, #31
   319c4:	bgt	31944 <__assert_fail@plt+0x1f380>
   319c8:	ldr	r3, [r4, #-8]
   319cc:	ldr	r2, [sp, #20]
   319d0:	tst	r2, r3
   319d4:	beq	319a0 <__assert_fail@plt+0x1f3dc>
   319d8:	b	31944 <__assert_fail@plt+0x1f380>
   319dc:	ldr	r3, [sp, #12]
   319e0:	ands	r0, r3, #1
   319e4:	mvnne	r0, #0
   319e8:	add	sp, sp, #52	; 0x34
   319ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   319f0:	ldr	sl, [sp, #32]
   319f4:	ldr	r8, [sp, #36]	; 0x24
   319f8:	b	31a14 <__assert_fail@plt+0x1f450>
   319fc:	ldr	r3, [sp, #28]
   31a00:	cmp	r3, #0
   31a04:	beq	31a14 <__assert_fail@plt+0x1f450>
   31a08:	ldr	r3, [r2, r5, lsl #3]
   31a0c:	cmp	r3, r7
   31a10:	beq	31ab8 <__assert_fail@plt+0x1f4f4>
   31a14:	add	r8, r8, #1
   31a18:	ldr	r3, [sl, #4]
   31a1c:	cmp	r3, r8
   31a20:	ble	31aa8 <__assert_fail@plt+0x1f4e4>
   31a24:	ldr	r3, [sl, #8]
   31a28:	ldr	r5, [r3, r8, lsl #2]
   31a2c:	ldr	r2, [r9]
   31a30:	add	r3, r2, r5, lsl #3
   31a34:	ldrb	r3, [r3, #4]
   31a38:	cmp	r3, #8
   31a3c:	beq	319fc <__assert_fail@plt+0x1f438>
   31a40:	cmp	r3, #9
   31a44:	beq	31a88 <__assert_fail@plt+0x1f4c4>
   31a48:	cmp	r3, #4
   31a4c:	bne	31a14 <__assert_fail@plt+0x1f450>
   31a50:	ldr	r3, [sp, #88]	; 0x58
   31a54:	cmn	r3, #1
   31a58:	beq	31a14 <__assert_fail@plt+0x1f450>
   31a5c:	add	fp, r5, r5, lsl #1
   31a60:	lsl	fp, fp, #2
   31a64:	ldr	r3, [sp, #8]
   31a68:	ldr	r4, [r3, #116]	; 0x74
   31a6c:	ldr	r3, [sp, #44]	; 0x2c
   31a70:	add	r4, r4, r3
   31a74:	str	sl, [sp, #32]
   31a78:	str	r8, [sp, #36]	; 0x24
   31a7c:	ldr	sl, [sp, #40]	; 0x28
   31a80:	ldr	r8, [sp, #88]	; 0x58
   31a84:	b	319b0 <__assert_fail@plt+0x1f3ec>
   31a88:	ldr	r3, [sp, #16]
   31a8c:	cmp	r3, #0
   31a90:	beq	31a14 <__assert_fail@plt+0x1f450>
   31a94:	ldr	r3, [r2, r5, lsl #3]
   31a98:	cmp	r7, r3
   31a9c:	bne	31a14 <__assert_fail@plt+0x1f450>
   31aa0:	mov	r0, #0
   31aa4:	b	319e8 <__assert_fail@plt+0x1f424>
   31aa8:	ldr	r3, [sp, #12]
   31aac:	lsr	r0, r3, #1
   31ab0:	and	r0, r0, #1
   31ab4:	b	319e8 <__assert_fail@plt+0x1f424>
   31ab8:	mvn	r0, #0
   31abc:	b	319e8 <__assert_fail@plt+0x1f424>
   31ac0:	push	{lr}		; (str lr, [sp, #-4]!)
   31ac4:	sub	sp, sp, #12
   31ac8:	ldr	lr, [sp, #16]
   31acc:	add	r1, r1, r1, lsl #1
   31ad0:	ldr	ip, [r0, #116]	; 0x74
   31ad4:	add	r1, ip, r1, lsl #3
   31ad8:	ldr	ip, [r1, #8]
   31adc:	cmp	ip, lr
   31ae0:	bgt	31b30 <__assert_fail@plt+0x1f56c>
   31ae4:	ldr	r1, [r1, #12]
   31ae8:	cmp	lr, r1
   31aec:	movgt	r1, #1
   31af0:	bgt	31b10 <__assert_fail@plt+0x1f54c>
   31af4:	cmp	lr, r1
   31af8:	moveq	r1, #2
   31afc:	movne	r1, #0
   31b00:	cmp	ip, lr
   31b04:	orreq	r1, r1, #1
   31b08:	cmp	r1, #0
   31b0c:	bne	31b1c <__assert_fail@plt+0x1f558>
   31b10:	mov	r0, r1
   31b14:	add	sp, sp, #12
   31b18:	pop	{pc}		; (ldr pc, [sp], #4)
   31b1c:	ldr	ip, [sp, #20]
   31b20:	str	ip, [sp]
   31b24:	bl	318cc <__assert_fail@plt+0x1f308>
   31b28:	mov	r1, r0
   31b2c:	b	31b10 <__assert_fail@plt+0x1f54c>
   31b30:	mvn	r1, #0
   31b34:	b	31b10 <__assert_fail@plt+0x1f54c>
   31b38:	push	{r4, r5, lr}
   31b3c:	mov	r4, r0
   31b40:	ldr	r5, [r0, #108]	; 0x6c
   31b44:	mov	r2, r5
   31b48:	mov	r0, #0
   31b4c:	cmp	r0, r2
   31b50:	bge	31bbc <__assert_fail@plt+0x1f5f8>
   31b54:	add	ip, r0, r2
   31b58:	add	ip, ip, ip, lsr #31
   31b5c:	asr	ip, ip, #1
   31b60:	ldr	lr, [r4, #116]	; 0x74
   31b64:	add	r3, ip, ip, lsl #1
   31b68:	add	r3, lr, r3, lsl #3
   31b6c:	ldr	r3, [r3, #4]
   31b70:	cmp	r1, r3
   31b74:	bgt	31ba8 <__assert_fail@plt+0x1f5e4>
   31b78:	cmp	r0, ip
   31b7c:	bge	31bbc <__assert_fail@plt+0x1f5f8>
   31b80:	add	r3, r0, ip
   31b84:	add	r3, r3, r3, lsr #31
   31b88:	asr	r3, r3, #1
   31b8c:	add	r2, r3, r3, lsl #1
   31b90:	add	r2, lr, r2, lsl #3
   31b94:	ldr	r2, [r2, #4]
   31b98:	cmp	r2, r1
   31b9c:	blt	31bb0 <__assert_fail@plt+0x1f5ec>
   31ba0:	mov	ip, r3
   31ba4:	b	31b78 <__assert_fail@plt+0x1f5b4>
   31ba8:	mov	r3, ip
   31bac:	mov	ip, r2
   31bb0:	add	r0, r3, #1
   31bb4:	mov	r2, ip
   31bb8:	b	31b4c <__assert_fail@plt+0x1f588>
   31bbc:	cmp	r5, r0
   31bc0:	ble	31be0 <__assert_fail@plt+0x1f61c>
   31bc4:	ldr	r3, [r4, #116]	; 0x74
   31bc8:	add	r2, r0, r0, lsl #1
   31bcc:	add	r3, r3, r2, lsl #3
   31bd0:	ldr	r3, [r3, #4]
   31bd4:	cmp	r1, r3
   31bd8:	mvnne	r0, #0
   31bdc:	pop	{r4, r5, pc}
   31be0:	mvn	r0, #0
   31be4:	pop	{r4, r5, pc}
   31be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31bec:	sub	sp, sp, #20
   31bf0:	mov	r4, r0
   31bf4:	mov	r6, r1
   31bf8:	str	r2, [sp, #12]
   31bfc:	mov	r8, r3
   31c00:	ldr	sl, [r0, #84]	; 0x54
   31c04:	mov	r1, r3
   31c08:	bl	31b38 <__assert_fail@plt+0x1f574>
   31c0c:	mov	fp, r0
   31c10:	ldr	r1, [sp, #60]	; 0x3c
   31c14:	mov	r0, r4
   31c18:	bl	31b38 <__assert_fail@plt+0x1f574>
   31c1c:	str	r0, [sp, #8]
   31c20:	ldr	r3, [r6, #4]
   31c24:	cmp	r3, #0
   31c28:	ble	31cbc <__assert_fail@plt+0x1f6f8>
   31c2c:	mov	r5, #0
   31c30:	ldr	r3, [r6, #8]
   31c34:	ldr	r1, [r3, r5, lsl #2]
   31c38:	ldr	r3, [r4, #116]	; 0x74
   31c3c:	add	r2, r1, r1, lsl #1
   31c40:	ldr	r2, [r3, r2, lsl #3]
   31c44:	ldr	r3, [sl]
   31c48:	ldr	r7, [r3, r2, lsl #3]
   31c4c:	str	fp, [sp, #4]
   31c50:	str	r8, [sp]
   31c54:	ldr	r3, [sp, #12]
   31c58:	mov	r2, r7
   31c5c:	mov	r0, r4
   31c60:	bl	31ac0 <__assert_fail@plt+0x1f4fc>
   31c64:	mov	r9, r0
   31c68:	ldr	r3, [r6, #8]
   31c6c:	ldr	r1, [r3, r5, lsl #2]
   31c70:	ldr	r3, [sp, #8]
   31c74:	str	r3, [sp, #4]
   31c78:	ldr	r3, [sp, #60]	; 0x3c
   31c7c:	str	r3, [sp]
   31c80:	ldr	r3, [sp, #56]	; 0x38
   31c84:	mov	r2, r7
   31c88:	mov	r0, r4
   31c8c:	bl	31ac0 <__assert_fail@plt+0x1f4fc>
   31c90:	cmp	r9, r0
   31c94:	beq	31ca4 <__assert_fail@plt+0x1f6e0>
   31c98:	mov	r0, #1
   31c9c:	add	sp, sp, #20
   31ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ca4:	add	r5, r5, #1
   31ca8:	ldr	r3, [r6, #4]
   31cac:	cmp	r3, r5
   31cb0:	bgt	31c30 <__assert_fail@plt+0x1f66c>
   31cb4:	mov	r0, #0
   31cb8:	b	31c9c <__assert_fail@plt+0x1f6d8>
   31cbc:	mov	r0, #0
   31cc0:	b	31c9c <__assert_fail@plt+0x1f6d8>
   31cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31cc8:	sub	sp, sp, #8
   31ccc:	mov	r5, r0
   31cd0:	mov	r4, r1
   31cd4:	mov	r8, r2
   31cd8:	mov	r9, r3
   31cdc:	ldr	r6, [r1, #40]	; 0x28
   31ce0:	mov	r1, r6
   31ce4:	mov	r0, r4
   31ce8:	bl	313bc <__assert_fail@plt+0x1edf8>
   31cec:	cmp	r0, #1
   31cf0:	ble	31d28 <__assert_fail@plt+0x1f764>
   31cf4:	mov	r7, r0
   31cf8:	mov	r3, #1
   31cfc:	str	r3, [r5]
   31d00:	ldr	r1, [r4, #40]	; 0x28
   31d04:	mov	r0, r4
   31d08:	bl	31430 <__assert_fail@plt+0x1ee6c>
   31d0c:	str	r0, [r5, #4]
   31d10:	ldr	r3, [r4, #40]	; 0x28
   31d14:	add	r7, r3, r7
   31d18:	str	r7, [r4, #40]	; 0x28
   31d1c:	mov	r0, #0
   31d20:	add	sp, sp, #8
   31d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31d28:	add	r6, r6, r9
   31d2c:	str	r6, [r4, #40]	; 0x28
   31d30:	ldrb	r3, [r8, #4]
   31d34:	and	r2, r3, #251	; 0xfb
   31d38:	cmp	r3, #28
   31d3c:	cmpne	r2, #26
   31d40:	beq	31d70 <__assert_fail@plt+0x1f7ac>
   31d44:	ldrb	r2, [sp, #48]	; 0x30
   31d48:	cmp	r3, #22
   31d4c:	moveq	r3, r2
   31d50:	orrne	r3, r2, #1
   31d54:	cmp	r3, #0
   31d58:	beq	31f18 <__assert_fail@plt+0x1f954>
   31d5c:	mov	r0, #0
   31d60:	str	r0, [r5]
   31d64:	ldrb	r3, [r8]
   31d68:	strb	r3, [r5, #4]
   31d6c:	b	31d20 <__assert_fail@plt+0x1f75c>
   31d70:	ldr	r3, [r4, #56]	; 0x38
   31d74:	cmp	r6, r3
   31d78:	movge	r0, #7
   31d7c:	bge	31d20 <__assert_fail@plt+0x1f75c>
   31d80:	ldrb	r9, [r8]
   31d84:	mov	r6, #0
   31d88:	b	31e70 <__assert_fail@plt+0x1f8ac>
   31d8c:	ldrb	r3, [r4, #75]	; 0x4b
   31d90:	cmp	r3, #0
   31d94:	bne	31db0 <__assert_fail@plt+0x1f7ec>
   31d98:	ldr	r2, [r4, #4]
   31d9c:	ldr	r3, [r4, #40]	; 0x28
   31da0:	add	r1, r3, #1
   31da4:	str	r1, [r4, #40]	; 0x28
   31da8:	ldrb	r7, [r2, r3]
   31dac:	b	31e90 <__assert_fail@plt+0x1f8cc>
   31db0:	ldrb	r3, [r4, #76]	; 0x4c
   31db4:	cmp	r3, #0
   31db8:	beq	31e3c <__assert_fail@plt+0x1f878>
   31dbc:	ldr	sl, [r4, #40]	; 0x28
   31dc0:	ldr	r3, [r4, #28]
   31dc4:	cmp	sl, r3
   31dc8:	beq	31ddc <__assert_fail@plt+0x1f818>
   31dcc:	ldr	r3, [r4, #8]
   31dd0:	ldr	r3, [r3, sl, lsl #2]
   31dd4:	cmn	r3, #1
   31dd8:	beq	31e10 <__assert_fail@plt+0x1f84c>
   31ddc:	ldr	r2, [r4, #12]
   31de0:	ldr	r3, [r4]
   31de4:	ldr	r1, [r2, sl, lsl #2]
   31de8:	ldr	r2, [r4, #24]
   31dec:	add	r3, r3, r1
   31df0:	ldrb	r7, [r3, r2]
   31df4:	bics	r3, r7, #127	; 0x7f
   31df8:	beq	31e24 <__assert_fail@plt+0x1f860>
   31dfc:	ldr	r3, [r4, #4]
   31e00:	add	r2, sl, #1
   31e04:	str	r2, [r4, #40]	; 0x28
   31e08:	ldrb	r7, [r3, sl]
   31e0c:	b	31e90 <__assert_fail@plt+0x1f8cc>
   31e10:	ldr	r3, [r4, #4]
   31e14:	add	r2, sl, #1
   31e18:	str	r2, [r4, #40]	; 0x28
   31e1c:	ldrb	r7, [r3, sl]
   31e20:	b	31e90 <__assert_fail@plt+0x1f8cc>
   31e24:	mov	r1, sl
   31e28:	mov	r0, r4
   31e2c:	bl	313bc <__assert_fail@plt+0x1edf8>
   31e30:	add	r0, sl, r0
   31e34:	str	r0, [r4, #40]	; 0x28
   31e38:	b	31e90 <__assert_fail@plt+0x1f8cc>
   31e3c:	ldr	r3, [r4]
   31e40:	ldr	r1, [r4, #24]
   31e44:	ldr	r2, [r4, #40]	; 0x28
   31e48:	add	r0, r2, #1
   31e4c:	str	r0, [r4, #40]	; 0x28
   31e50:	add	r3, r3, r1
   31e54:	ldrb	r7, [r3, r2]
   31e58:	b	31e90 <__assert_fail@plt+0x1f8cc>
   31e5c:	ldr	r3, [r5, #4]
   31e60:	strb	r7, [r3, r6]
   31e64:	add	r6, r6, #1
   31e68:	cmp	r6, #32
   31e6c:	beq	31f44 <__assert_fail@plt+0x1f980>
   31e70:	ldrb	r3, [r8, #4]
   31e74:	cmp	r3, #30
   31e78:	beq	31d8c <__assert_fail@plt+0x1f7c8>
   31e7c:	ldr	r2, [r4, #4]
   31e80:	ldr	r3, [r4, #40]	; 0x28
   31e84:	add	r1, r3, #1
   31e88:	str	r1, [r4, #40]	; 0x28
   31e8c:	ldrb	r7, [r2, r3]
   31e90:	ldr	r3, [r4, #40]	; 0x28
   31e94:	ldr	r2, [r4, #56]	; 0x38
   31e98:	cmp	r2, r3
   31e9c:	ble	31f3c <__assert_fail@plt+0x1f978>
   31ea0:	cmp	r9, r7
   31ea4:	bne	31e5c <__assert_fail@plt+0x1f898>
   31ea8:	ldr	r2, [r4, #4]
   31eac:	ldrb	r2, [r2, r3]
   31eb0:	cmp	r2, #93	; 0x5d
   31eb4:	bne	31e5c <__assert_fail@plt+0x1f898>
   31eb8:	add	r3, r3, #1
   31ebc:	str	r3, [r4, #40]	; 0x28
   31ec0:	ldr	r3, [r5, #4]
   31ec4:	mov	r2, #0
   31ec8:	strb	r2, [r3, r6]
   31ecc:	ldrb	r3, [r8, #4]
   31ed0:	cmp	r3, #28
   31ed4:	beq	31ef8 <__assert_fail@plt+0x1f934>
   31ed8:	cmp	r3, #30
   31edc:	beq	31f08 <__assert_fail@plt+0x1f944>
   31ee0:	cmp	r3, #26
   31ee4:	moveq	r3, #3
   31ee8:	streq	r3, [r5]
   31eec:	moveq	r0, r2
   31ef0:	movne	r0, #0
   31ef4:	b	31d20 <__assert_fail@plt+0x1f75c>
   31ef8:	mov	r3, #2
   31efc:	str	r3, [r5]
   31f00:	mov	r0, #0
   31f04:	b	31d20 <__assert_fail@plt+0x1f75c>
   31f08:	mov	r3, #4
   31f0c:	str	r3, [r5]
   31f10:	mov	r0, #0
   31f14:	b	31d20 <__assert_fail@plt+0x1f75c>
   31f18:	ldr	r2, [sp, #44]	; 0x2c
   31f1c:	mov	r1, r4
   31f20:	mov	r0, sp
   31f24:	bl	31704 <__assert_fail@plt+0x1f140>
   31f28:	ldrb	r3, [sp, #4]
   31f2c:	cmp	r3, #21
   31f30:	movne	r0, #11
   31f34:	bne	31d20 <__assert_fail@plt+0x1f75c>
   31f38:	b	31d5c <__assert_fail@plt+0x1f798>
   31f3c:	mov	r0, #7
   31f40:	b	31d20 <__assert_fail@plt+0x1f75c>
   31f44:	mov	r0, #7
   31f48:	b	31d20 <__assert_fail@plt+0x1f75c>
   31f4c:	push	{r4, r5, r6, lr}
   31f50:	mov	r4, r0
   31f54:	mov	r6, r1
   31f58:	mov	r5, r2
   31f5c:	b	31f64 <__assert_fail@plt+0x1f9a0>
   31f60:	mov	r4, r3
   31f64:	ldr	r3, [r4, #4]
   31f68:	cmp	r3, #0
   31f6c:	bne	31f60 <__assert_fail@plt+0x1f99c>
   31f70:	ldr	r3, [r4, #8]
   31f74:	cmp	r3, #0
   31f78:	bne	31f60 <__assert_fail@plt+0x1f99c>
   31f7c:	mov	r1, r4
   31f80:	mov	r0, r5
   31f84:	blx	r6
   31f88:	cmp	r0, #0
   31f8c:	popne	{r4, r5, r6, pc}
   31f90:	ldr	r2, [r4]
   31f94:	cmp	r2, #0
   31f98:	popeq	{r4, r5, r6, pc}
   31f9c:	ldr	r3, [r2, #8]
   31fa0:	cmp	r4, r3
   31fa4:	cmpne	r3, #0
   31fa8:	moveq	r1, #1
   31fac:	movne	r1, #0
   31fb0:	mov	r4, r2
   31fb4:	cmp	r1, #0
   31fb8:	bne	31f7c <__assert_fail@plt+0x1f9b8>
   31fbc:	b	31f60 <__assert_fail@plt+0x1f99c>
   31fc0:	push	{r4, r5, r6, r7, r8, lr}
   31fc4:	mov	r4, r0
   31fc8:	mov	r6, r1
   31fcc:	mov	r5, r2
   31fd0:	mov	r7, #0
   31fd4:	b	31fdc <__assert_fail@plt+0x1fa18>
   31fd8:	mov	r4, r3
   31fdc:	mov	r1, r4
   31fe0:	mov	r0, r5
   31fe4:	blx	r6
   31fe8:	cmp	r0, #0
   31fec:	popne	{r4, r5, r6, r7, r8, pc}
   31ff0:	ldr	r3, [r4, #4]
   31ff4:	cmp	r3, #0
   31ff8:	moveq	r2, r7
   31ffc:	bne	31fd8 <__assert_fail@plt+0x1fa14>
   32000:	ldr	r3, [r4, #8]
   32004:	cmp	r3, #0
   32008:	cmpne	r2, r3
   3200c:	bne	31fd8 <__assert_fail@plt+0x1fa14>
   32010:	ldr	r3, [r4]
   32014:	mov	r2, r4
   32018:	cmp	r3, #0
   3201c:	popeq	{r4, r5, r6, r7, r8, pc}
   32020:	mov	r4, r3
   32024:	b	32000 <__assert_fail@plt+0x1fa3c>
   32028:	push	{r4, r5, r6, lr}
   3202c:	mov	r4, r0
   32030:	mov	r5, r1
   32034:	ldr	r3, [r0, #80]	; 0x50
   32038:	cmp	r3, #1
   3203c:	ble	32084 <__assert_fail@plt+0x1fac0>
   32040:	cmn	r1, #-1073741823	; 0xc0000001
   32044:	bhi	320b8 <__assert_fail@plt+0x1faf4>
   32048:	lsl	r6, r1, #2
   3204c:	mov	r1, r6
   32050:	ldr	r0, [r0, #8]
   32054:	bl	31320 <__assert_fail@plt+0x1ed5c>
   32058:	cmp	r0, #0
   3205c:	beq	320c0 <__assert_fail@plt+0x1fafc>
   32060:	str	r0, [r4, #8]
   32064:	ldr	r0, [r4, #12]
   32068:	cmp	r0, #0
   3206c:	beq	32084 <__assert_fail@plt+0x1fac0>
   32070:	mov	r1, r6
   32074:	bl	31320 <__assert_fail@plt+0x1ed5c>
   32078:	cmp	r0, #0
   3207c:	beq	320c8 <__assert_fail@plt+0x1fb04>
   32080:	str	r0, [r4, #12]
   32084:	ldrb	r3, [r4, #75]	; 0x4b
   32088:	cmp	r3, #0
   3208c:	bne	3209c <__assert_fail@plt+0x1fad8>
   32090:	str	r5, [r4, #36]	; 0x24
   32094:	mov	r0, #0
   32098:	pop	{r4, r5, r6, pc}
   3209c:	mov	r1, r5
   320a0:	ldr	r0, [r4, #4]
   320a4:	bl	31320 <__assert_fail@plt+0x1ed5c>
   320a8:	cmp	r0, #0
   320ac:	beq	320d0 <__assert_fail@plt+0x1fb0c>
   320b0:	str	r0, [r4, #4]
   320b4:	b	32090 <__assert_fail@plt+0x1facc>
   320b8:	mov	r0, #12
   320bc:	pop	{r4, r5, r6, pc}
   320c0:	mov	r0, #12
   320c4:	pop	{r4, r5, r6, pc}
   320c8:	mov	r0, #12
   320cc:	pop	{r4, r5, r6, pc}
   320d0:	mov	r0, #12
   320d4:	pop	{r4, r5, r6, pc}
   320d8:	push	{r4, r5, r6, lr}
   320dc:	mov	r4, r0
   320e0:	mov	r5, r1
   320e4:	ldr	r1, [r0]
   320e8:	ldr	r3, [r0, #4]
   320ec:	cmp	r1, r3
   320f0:	beq	32110 <__assert_fail@plt+0x1fb4c>
   320f4:	ldr	r2, [r4, #8]
   320f8:	ldr	r3, [r4, #4]
   320fc:	add	r1, r3, #1
   32100:	str	r1, [r4, #4]
   32104:	str	r5, [r2, r3, lsl #2]
   32108:	mov	r0, #1
   3210c:	pop	{r4, r5, r6, pc}
   32110:	add	r1, r1, #1
   32114:	lsl	r3, r1, #1
   32118:	str	r3, [r0]
   3211c:	lsl	r1, r1, #3
   32120:	ldr	r0, [r0, #8]
   32124:	bl	31320 <__assert_fail@plt+0x1ed5c>
   32128:	cmp	r0, #0
   3212c:	strne	r0, [r4, #8]
   32130:	bne	320f4 <__assert_fail@plt+0x1fb30>
   32134:	mov	r0, #0
   32138:	pop	{r4, r5, r6, pc}
   3213c:	push	{r4, r5, r6, r7, r8, lr}
   32140:	mov	r7, r0
   32144:	mov	r5, r1
   32148:	mov	r4, r2
   3214c:	mov	r6, r3
   32150:	ldr	r3, [r0, #64]	; 0x40
   32154:	cmp	r3, #31
   32158:	beq	321cc <__assert_fail@plt+0x1fc08>
   3215c:	ldr	r3, [r7, #56]	; 0x38
   32160:	ldr	r2, [r7, #64]	; 0x40
   32164:	add	r1, r2, #1
   32168:	str	r1, [r7, #64]	; 0x40
   3216c:	lsl	r2, r2, #5
   32170:	add	ip, r2, #4
   32174:	add	ip, r3, ip
   32178:	add	r3, r3, r2
   3217c:	mov	r2, #0
   32180:	str	r2, [r3, #4]
   32184:	str	r5, [r3, #8]
   32188:	str	r4, [r3, #12]
   3218c:	add	lr, r3, #24
   32190:	ldm	r6, {r0, r1}
   32194:	stm	lr, {r0, r1}
   32198:	ldrb	r1, [r3, #30]
   3219c:	and	r1, r1, #243	; 0xf3
   321a0:	strb	r1, [r3, #30]
   321a4:	str	r2, [r3, #16]
   321a8:	str	r2, [r3, #20]
   321ac:	mvn	r2, #0
   321b0:	str	r2, [r3, #32]
   321b4:	cmp	r5, #0
   321b8:	strne	ip, [r5]
   321bc:	cmp	r4, #0
   321c0:	strne	ip, [r4]
   321c4:	mov	r0, ip
   321c8:	pop	{r4, r5, r6, r7, r8, pc}
   321cc:	mov	r0, #996	; 0x3e4
   321d0:	bl	3079c <__assert_fail@plt+0x1e1d8>
   321d4:	cmp	r0, #0
   321d8:	beq	321f4 <__assert_fail@plt+0x1fc30>
   321dc:	ldr	r3, [r7, #56]	; 0x38
   321e0:	str	r3, [r0]
   321e4:	str	r0, [r7, #56]	; 0x38
   321e8:	mov	r3, #0
   321ec:	str	r3, [r7, #64]	; 0x40
   321f0:	b	3215c <__assert_fail@plt+0x1fb98>
   321f4:	mov	ip, #0
   321f8:	b	321c4 <__assert_fail@plt+0x1fc00>
   321fc:	push	{r4, r5, r6, r7, r8, lr}
   32200:	sub	sp, sp, #8
   32204:	mov	r4, r0
   32208:	mov	r8, r1
   3220c:	ldr	r5, [r0]
   32210:	add	r6, sp, #4
   32214:	mov	r7, #0
   32218:	add	r3, r4, #20
   3221c:	mov	r2, r7
   32220:	mov	r1, r7
   32224:	mov	r0, r8
   32228:	bl	3213c <__assert_fail@plt+0x1fb78>
   3222c:	str	r0, [r6]
   32230:	cmp	r0, #0
   32234:	beq	3226c <__assert_fail@plt+0x1fca8>
   32238:	str	r5, [r0]
   3223c:	ldr	r2, [r6]
   32240:	ldrb	r3, [r2, #26]
   32244:	orr	r3, r3, #4
   32248:	strb	r3, [r2, #26]
   3224c:	ldr	r5, [r6]
   32250:	ldr	r3, [r4, #4]
   32254:	cmp	r3, #0
   32258:	beq	32274 <__assert_fail@plt+0x1fcb0>
   3225c:	add	r6, r5, #4
   32260:	mov	r4, r3
   32264:	b	32218 <__assert_fail@plt+0x1fc54>
   32268:	ldr	r0, [sp, #4]
   3226c:	add	sp, sp, #8
   32270:	pop	{r4, r5, r6, r7, r8, pc}
   32274:	mov	r2, r7
   32278:	ldr	r3, [r4, #8]
   3227c:	cmp	r3, #0
   32280:	cmpne	r2, r3
   32284:	bne	322a4 <__assert_fail@plt+0x1fce0>
   32288:	ldr	r3, [r4]
   3228c:	ldr	r5, [r5]
   32290:	mov	r2, r4
   32294:	cmp	r3, #0
   32298:	beq	32268 <__assert_fail@plt+0x1fca4>
   3229c:	mov	r4, r3
   322a0:	b	32278 <__assert_fail@plt+0x1fcb4>
   322a4:	add	r6, r5, #8
   322a8:	mov	r4, r3
   322ac:	b	32218 <__assert_fail@plt+0x1fc54>
   322b0:	push	{lr}		; (str lr, [sp, #-4]!)
   322b4:	sub	sp, sp, #12
   322b8:	mov	ip, #0
   322bc:	str	ip, [sp]
   322c0:	str	ip, [sp, #4]
   322c4:	strb	r3, [sp, #4]
   322c8:	mov	r3, sp
   322cc:	bl	3213c <__assert_fail@plt+0x1fb78>
   322d0:	add	sp, sp, #12
   322d4:	pop	{pc}		; (ldr pc, [sp], #4)
   322d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   322dc:	ldr	r6, [r1]
   322e0:	ldr	r5, [r2, #4]
   322e4:	ldrb	r1, [r1, #28]
   322e8:	adds	r3, r5, #0
   322ec:	movne	r3, #1
   322f0:	ands	r3, r3, r1, lsr #4
   322f4:	beq	32314 <__assert_fail@plt+0x1fd50>
   322f8:	ldr	r3, [r2, #20]
   322fc:	cmp	r3, #31
   32300:	bgt	323dc <__assert_fail@plt+0x1fe18>
   32304:	ldr	r1, [r6, #80]	; 0x50
   32308:	lsr	r3, r1, r3
   3230c:	tst	r3, #1
   32310:	beq	323dc <__assert_fail@plt+0x1fe18>
   32314:	mov	r4, r2
   32318:	mov	r9, r0
   3231c:	mov	r3, #8
   32320:	mov	r2, #0
   32324:	mov	r1, r2
   32328:	mov	r0, r6
   3232c:	bl	322b0 <__assert_fail@plt+0x1fcec>
   32330:	mov	r7, r0
   32334:	mov	r3, #9
   32338:	mov	r2, #0
   3233c:	mov	r1, r2
   32340:	mov	r0, r6
   32344:	bl	322b0 <__assert_fail@plt+0x1fcec>
   32348:	mov	r8, r0
   3234c:	cmp	r5, #0
   32350:	moveq	sl, r0
   32354:	beq	32370 <__assert_fail@plt+0x1fdac>
   32358:	mov	r3, #16
   3235c:	mov	r2, r0
   32360:	mov	r1, r5
   32364:	mov	r0, r6
   32368:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3236c:	mov	sl, r0
   32370:	mov	r3, #16
   32374:	mov	r2, sl
   32378:	mov	r1, r7
   3237c:	mov	r0, r6
   32380:	bl	322b0 <__assert_fail@plt+0x1fcec>
   32384:	mov	r5, r0
   32388:	cmp	sl, #0
   3238c:	cmpne	r0, #0
   32390:	beq	323e4 <__assert_fail@plt+0x1fe20>
   32394:	cmp	r8, #0
   32398:	cmpne	r7, #0
   3239c:	beq	323e4 <__assert_fail@plt+0x1fe20>
   323a0:	ldr	r3, [r4, #20]
   323a4:	str	r3, [r8, #20]
   323a8:	str	r3, [r7, #20]
   323ac:	ldrb	r3, [r4, #26]
   323b0:	lsr	r3, r3, #3
   323b4:	and	r3, r3, #1
   323b8:	ldrb	r2, [r8, #26]
   323bc:	and	r1, r3, #1
   323c0:	bic	r2, r2, #8
   323c4:	orr	r2, r2, r1, lsl #3
   323c8:	strb	r2, [r8, #26]
   323cc:	ldrb	r2, [r7, #26]
   323d0:	bic	r2, r2, #8
   323d4:	orr	r3, r2, r1, lsl #3
   323d8:	strb	r3, [r7, #26]
   323dc:	mov	r0, r5
   323e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   323e4:	mov	r3, #12
   323e8:	str	r3, [r9]
   323ec:	mov	r5, #0
   323f0:	b	323dc <__assert_fail@plt+0x1fe18>
   323f4:	push	{r4, r5, lr}
   323f8:	sub	sp, sp, #12
   323fc:	mov	r5, r0
   32400:	mov	r4, r1
   32404:	mov	r3, #0
   32408:	str	r3, [sp, #4]
   3240c:	ldr	r2, [r1, #4]
   32410:	cmp	r2, r3
   32414:	beq	32424 <__assert_fail@plt+0x1fe60>
   32418:	ldrb	r3, [r2, #24]
   3241c:	cmp	r3, #17
   32420:	beq	32448 <__assert_fail@plt+0x1fe84>
   32424:	ldr	r2, [r4, #8]
   32428:	cmp	r2, #0
   3242c:	beq	3243c <__assert_fail@plt+0x1fe78>
   32430:	ldrb	r3, [r2, #24]
   32434:	cmp	r3, #17
   32438:	beq	32464 <__assert_fail@plt+0x1fea0>
   3243c:	ldr	r0, [sp, #4]
   32440:	add	sp, sp, #12
   32444:	pop	{r4, r5, pc}
   32448:	mov	r1, r0
   3244c:	add	r0, sp, #4
   32450:	bl	322d8 <__assert_fail@plt+0x1fd14>
   32454:	str	r0, [r4, #4]
   32458:	cmp	r0, #0
   3245c:	strne	r4, [r0]
   32460:	b	32424 <__assert_fail@plt+0x1fe60>
   32464:	mov	r1, r5
   32468:	add	r0, sp, #4
   3246c:	bl	322d8 <__assert_fail@plt+0x1fd14>
   32470:	str	r0, [r4, #8]
   32474:	cmp	r0, #0
   32478:	strne	r4, [r0]
   3247c:	b	3243c <__assert_fail@plt+0x1fe78>
   32480:	push	{r4, r5, r6, lr}
   32484:	mov	r4, r0
   32488:	mov	r5, r1
   3248c:	mov	r3, #1
   32490:	str	r3, [r0]
   32494:	str	r3, [r0, #4]
   32498:	mov	r0, #4
   3249c:	bl	3079c <__assert_fail@plt+0x1e1d8>
   324a0:	str	r0, [r4, #8]
   324a4:	cmp	r0, #0
   324a8:	moveq	r3, #0
   324ac:	streq	r3, [r4, #4]
   324b0:	streq	r3, [r4]
   324b4:	moveq	r0, #12
   324b8:	strne	r5, [r0]
   324bc:	movne	r0, #0
   324c0:	pop	{r4, r5, r6, pc}
   324c4:	push	{r4, lr}
   324c8:	mov	r4, r0
   324cc:	str	r1, [r0]
   324d0:	mov	r3, #0
   324d4:	str	r3, [r0, #4]
   324d8:	lsl	r0, r1, #2
   324dc:	bl	3079c <__assert_fail@plt+0x1e1d8>
   324e0:	str	r0, [r4, #8]
   324e4:	cmp	r0, #0
   324e8:	moveq	r0, #12
   324ec:	movne	r0, #0
   324f0:	pop	{r4, pc}
   324f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   324f8:	mov	r6, r0
   324fc:	mov	r5, r1
   32500:	mov	r7, r2
   32504:	mov	r8, r1
   32508:	str	r2, [r8], #16
   3250c:	ldr	r1, [r1, #8]
   32510:	mov	r0, r8
   32514:	bl	324c4 <__assert_fail@plt+0x1ff00>
   32518:	subs	r9, r0, #0
   3251c:	bne	325e4 <__assert_fail@plt+0x20020>
   32520:	ldr	r3, [r5, #8]
   32524:	cmp	r3, #0
   32528:	ble	32578 <__assert_fail@plt+0x1ffb4>
   3252c:	mov	r4, #0
   32530:	b	32544 <__assert_fail@plt+0x1ff80>
   32534:	add	r4, r4, #1
   32538:	ldr	r3, [r5, #8]
   3253c:	cmp	r3, r4
   32540:	ble	32578 <__assert_fail@plt+0x1ffb4>
   32544:	ldr	r3, [r5, #12]
   32548:	ldr	r1, [r3, r4, lsl #2]
   3254c:	ldr	r3, [r6]
   32550:	add	r3, r3, r1, lsl #3
   32554:	ldrb	r3, [r3, #4]
   32558:	tst	r3, #8
   3255c:	bne	32534 <__assert_fail@plt+0x1ff70>
   32560:	mov	r0, r8
   32564:	bl	320d8 <__assert_fail@plt+0x1fb14>
   32568:	cmp	r0, #0
   3256c:	bne	32534 <__assert_fail@plt+0x1ff70>
   32570:	mov	r9, #12
   32574:	b	325b4 <__assert_fail@plt+0x1fff0>
   32578:	ldr	r4, [r6, #68]	; 0x44
   3257c:	and	r7, r7, r4
   32580:	add	r7, r7, r7, lsl #1
   32584:	lsl	r4, r7, #2
   32588:	ldr	r6, [r6, #32]
   3258c:	add	r7, r6, r4
   32590:	ldr	r3, [r6, r4]
   32594:	ldr	r2, [r7, #4]
   32598:	cmp	r2, r3
   3259c:	ble	325bc <__assert_fail@plt+0x1fff8>
   325a0:	ldr	r2, [r7, #8]
   325a4:	ldr	r3, [r6, r4]
   325a8:	add	r1, r3, #1
   325ac:	str	r1, [r6, r4]
   325b0:	str	r5, [r2, r3, lsl #2]
   325b4:	mov	r0, r9
   325b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   325bc:	add	r3, r3, #1
   325c0:	lsl	r8, r3, #1
   325c4:	lsl	r1, r3, #3
   325c8:	ldr	r0, [r7, #8]
   325cc:	bl	31320 <__assert_fail@plt+0x1ed5c>
   325d0:	cmp	r0, #0
   325d4:	beq	325ec <__assert_fail@plt+0x20028>
   325d8:	str	r0, [r7, #8]
   325dc:	str	r8, [r7, #4]
   325e0:	b	325a0 <__assert_fail@plt+0x1ffdc>
   325e4:	mov	r9, #12
   325e8:	b	325b4 <__assert_fail@plt+0x1fff0>
   325ec:	mov	r9, #12
   325f0:	b	325b4 <__assert_fail@plt+0x1fff0>
   325f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   325f8:	sub	sp, sp, #80	; 0x50
   325fc:	mov	r4, r0
   32600:	ldr	r8, [r0, #36]	; 0x24
   32604:	ldr	r3, [r0, #48]	; 0x30
   32608:	cmp	r8, r3
   3260c:	movge	r8, r3
   32610:	ldr	sl, [r0, #28]
   32614:	cmp	r8, sl
   32618:	ble	32778 <__assert_fail@plt+0x201b4>
   3261c:	add	r7, sp, #8
   32620:	add	r6, r0, #16
   32624:	mov	r9, #1
   32628:	mvn	r5, #0
   3262c:	b	32710 <__assert_fail@plt+0x2014c>
   32630:	ldr	r3, [r4, #80]	; 0x50
   32634:	cmp	r3, #0
   32638:	cmpgt	r2, #0
   3263c:	ble	32690 <__assert_fail@plt+0x200cc>
   32640:	add	r0, sp, #15
   32644:	mov	r3, #0
   32648:	ldr	r1, [r4]
   3264c:	ldr	ip, [r4, #24]
   32650:	add	r1, r1, sl
   32654:	add	r1, r1, r3
   32658:	ldrb	r1, [r1, ip]
   3265c:	ldr	ip, [r4, #64]	; 0x40
   32660:	ldrb	ip, [ip, r1]
   32664:	ldr	r1, [r4, #4]
   32668:	add	r1, r1, sl
   3266c:	strb	ip, [r1, r3]
   32670:	strb	ip, [r0, #1]!
   32674:	add	r3, r3, #1
   32678:	ldr	r1, [r4, #80]	; 0x50
   3267c:	cmp	r1, r3
   32680:	cmpgt	r2, r3
   32684:	bgt	32648 <__assert_fail@plt+0x20084>
   32688:	add	r1, sp, #16
   3268c:	b	32738 <__assert_fail@plt+0x20174>
   32690:	add	r1, sp, #16
   32694:	b	32738 <__assert_fail@plt+0x20174>
   32698:	ldr	r3, [r4]
   3269c:	ldr	r2, [r4, #24]
   326a0:	add	r3, r3, sl
   326a4:	ldrb	r3, [r3, r2]
   326a8:	str	r3, [sp, #4]
   326ac:	ldr	r2, [r4, #64]	; 0x40
   326b0:	cmp	r2, #0
   326b4:	ldrbne	r3, [r2, r3]
   326b8:	strne	r3, [sp, #4]
   326bc:	ldm	r7, {r0, r1}
   326c0:	stm	r6, {r0, r1}
   326c4:	mov	r0, r9
   326c8:	add	r2, sl, #1
   326cc:	lsl	r3, sl, #2
   326d0:	ldr	r1, [r4, #8]
   326d4:	ldr	ip, [sp, #4]
   326d8:	str	ip, [r1, sl, lsl #2]
   326dc:	add	sl, sl, r0
   326e0:	mov	ip, sl
   326e4:	cmp	r2, sl
   326e8:	bge	32788 <__assert_fail@plt+0x201c4>
   326ec:	add	r3, r3, #4
   326f0:	add	r2, r2, #1
   326f4:	ldr	r1, [r4, #8]
   326f8:	str	r5, [r1, r3]
   326fc:	add	r3, r3, #4
   32700:	cmp	ip, r2
   32704:	bne	326f0 <__assert_fail@plt+0x2012c>
   32708:	cmp	r8, sl
   3270c:	ble	32778 <__assert_fail@plt+0x201b4>
   32710:	sub	r2, r8, sl
   32714:	ldm	r6, {r0, r1}
   32718:	stm	r7, {r0, r1}
   3271c:	ldr	r3, [r4, #64]	; 0x40
   32720:	cmp	r3, #0
   32724:	bne	32630 <__assert_fail@plt+0x2006c>
   32728:	ldr	r1, [r4, #24]
   3272c:	add	r3, sl, r1
   32730:	ldr	r1, [r4]
   32734:	add	r1, r1, r3
   32738:	mov	r3, r6
   3273c:	add	r0, sp, #4
   32740:	bl	307cc <__assert_fail@plt+0x1e208>
   32744:	sub	r3, r0, #1
   32748:	cmn	r3, #3
   3274c:	bhi	32698 <__assert_fail@plt+0x200d4>
   32750:	cmn	r0, #2
   32754:	bne	326c8 <__assert_fail@plt+0x20104>
   32758:	ldr	r2, [r4, #36]	; 0x24
   3275c:	ldr	r3, [r4, #48]	; 0x30
   32760:	cmp	r2, r3
   32764:	bge	32698 <__assert_fail@plt+0x200d4>
   32768:	add	r3, r4, #16
   3276c:	add	r2, sp, #8
   32770:	ldm	r2, {r0, r1}
   32774:	stm	r3, {r0, r1}
   32778:	str	sl, [r4, #28]
   3277c:	str	sl, [r4, #32]
   32780:	add	sp, sp, #80	; 0x50
   32784:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32788:	mov	sl, r2
   3278c:	b	32708 <__assert_fail@plt+0x20144>
   32790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32794:	sub	sp, sp, #92	; 0x5c
   32798:	mov	r5, r0
   3279c:	ldr	r4, [r0, #28]
   327a0:	ldr	r6, [r0, #36]	; 0x24
   327a4:	ldr	r3, [r0, #48]	; 0x30
   327a8:	cmp	r6, r3
   327ac:	movge	r6, r3
   327b0:	ldrb	r3, [r0, #74]	; 0x4a
   327b4:	cmp	r3, #0
   327b8:	bne	327c8 <__assert_fail@plt+0x20204>
   327bc:	ldr	r3, [r0, #64]	; 0x40
   327c0:	cmp	r3, #0
   327c4:	beq	327e8 <__assert_fail@plt+0x20224>
   327c8:	ldr	r7, [r5, #32]
   327cc:	cmp	r4, r6
   327d0:	blt	32928 <__assert_fail@plt+0x20364>
   327d4:	str	r4, [r5, #28]
   327d8:	str	r7, [r5, #32]
   327dc:	mov	r0, #0
   327e0:	add	sp, sp, #92	; 0x5c
   327e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327e8:	ldrb	r3, [r0, #76]	; 0x4c
   327ec:	cmp	r3, #0
   327f0:	bne	327c8 <__assert_fail@plt+0x20204>
   327f4:	cmp	r4, r6
   327f8:	bge	32ab0 <__assert_fail@plt+0x204ec>
   327fc:	add	r3, r0, #16
   32800:	str	r3, [sp, #4]
   32804:	mvn	r7, #0
   32808:	b	328d4 <__assert_fail@plt+0x20310>
   3280c:	ldr	r3, [sp, #4]
   32810:	ldm	r3, {r0, r1}
   32814:	add	r2, sp, #80	; 0x50
   32818:	stm	r2, {r0, r1}
   3281c:	mov	r9, r4
   32820:	add	r1, r8, r4
   32824:	sub	r2, r6, r4
   32828:	add	r1, fp, r1
   3282c:	add	r0, sp, #12
   32830:	bl	307cc <__assert_fail@plt+0x1e208>
   32834:	mov	r8, r0
   32838:	sub	r3, r0, #1
   3283c:	cmn	r3, #4
   32840:	bhi	32a3c <__assert_fail@plt+0x20478>
   32844:	ldr	fp, [sp, #12]
   32848:	mov	r0, fp
   3284c:	bl	1254c <towupper@plt>
   32850:	mov	sl, r0
   32854:	cmp	fp, r0
   32858:	beq	32a18 <__assert_fail@plt+0x20454>
   3285c:	add	r2, sp, #80	; 0x50
   32860:	mov	r1, r0
   32864:	add	r0, sp, #16
   32868:	bl	11ed4 <wcrtomb@plt>
   3286c:	cmp	r8, r0
   32870:	bne	32924 <__assert_fail@plt+0x20360>
   32874:	ldr	r0, [r5, #4]
   32878:	mov	r2, r8
   3287c:	add	r1, sp, #16
   32880:	add	r0, r0, r4
   32884:	bl	12000 <memcpy@plt>
   32888:	add	r4, r4, #1
   3288c:	lsl	r3, r9, #2
   32890:	ldr	r2, [r5, #8]
   32894:	str	sl, [r2, r9, lsl #2]
   32898:	sub	r2, r4, #1
   3289c:	add	r8, r2, r8
   328a0:	mov	r1, r8
   328a4:	cmp	r4, r8
   328a8:	bge	328cc <__assert_fail@plt+0x20308>
   328ac:	add	r3, r3, #4
   328b0:	add	r4, r4, #1
   328b4:	ldr	r2, [r5, #8]
   328b8:	str	r7, [r2, r3]
   328bc:	add	r3, r3, #4
   328c0:	cmp	r1, r4
   328c4:	bne	328b0 <__assert_fail@plt+0x202ec>
   328c8:	mov	r4, r8
   328cc:	cmp	r6, r4
   328d0:	ble	32ab0 <__assert_fail@plt+0x204ec>
   328d4:	ldr	fp, [r5]
   328d8:	ldr	r8, [r5, #24]
   328dc:	add	r3, fp, r8
   328e0:	ldrb	sl, [r3, r4]
   328e4:	bics	r3, sl, #127	; 0x7f
   328e8:	bne	3280c <__assert_fail@plt+0x20248>
   328ec:	ldr	r0, [sp, #4]
   328f0:	bl	1203c <mbsinit@plt>
   328f4:	cmp	r0, #0
   328f8:	beq	3280c <__assert_fail@plt+0x20248>
   328fc:	mov	r0, sl
   32900:	bl	1254c <towupper@plt>
   32904:	bics	r3, r0, #127	; 0x7f
   32908:	bne	3280c <__assert_fail@plt+0x20248>
   3290c:	ldr	r3, [r5, #4]
   32910:	strb	r0, [r3, r4]
   32914:	ldr	r3, [r5, #8]
   32918:	str	r0, [r3, r4, lsl #2]
   3291c:	add	r4, r4, #1
   32920:	b	328cc <__assert_fail@plt+0x20308>
   32924:	mov	r7, r4
   32928:	sub	r2, r6, r4
   3292c:	add	r3, r5, #16
   32930:	ldm	r3, {r0, r1}
   32934:	add	r3, sp, #88	; 0x58
   32938:	stmdb	r3, {r0, r1}
   3293c:	ldr	r1, [r5, #64]	; 0x40
   32940:	cmp	r1, #0
   32944:	bne	32ac0 <__assert_fail@plt+0x204fc>
   32948:	ldr	r3, [r5, #24]
   3294c:	add	r3, r7, r3
   32950:	ldr	r1, [r5]
   32954:	add	r3, r1, r3
   32958:	str	r3, [sp, #4]
   3295c:	add	r3, r5, #16
   32960:	ldr	r1, [sp, #4]
   32964:	add	r0, sp, #12
   32968:	bl	307cc <__assert_fail@plt+0x1e208>
   3296c:	mov	r8, r0
   32970:	sub	fp, r0, #1
   32974:	cmn	fp, #4
   32978:	bhi	32cb4 <__assert_fail@plt+0x206f0>
   3297c:	ldr	sl, [sp, #12]
   32980:	mov	r0, sl
   32984:	bl	1254c <towupper@plt>
   32988:	mov	r9, r0
   3298c:	cmp	sl, r0
   32990:	beq	32c6c <__assert_fail@plt+0x206a8>
   32994:	add	r2, sp, #80	; 0x50
   32998:	mov	r1, r0
   3299c:	add	r0, sp, #16
   329a0:	bl	11ed4 <wcrtomb@plt>
   329a4:	mov	sl, r0
   329a8:	cmp	r8, r0
   329ac:	bne	32b20 <__assert_fail@plt+0x2055c>
   329b0:	ldr	r0, [r5, #4]
   329b4:	mov	r2, r8
   329b8:	add	r1, sp, #16
   329bc:	add	r0, r0, r4
   329c0:	bl	12000 <memcpy@plt>
   329c4:	ldrb	r3, [r5, #76]	; 0x4c
   329c8:	cmp	r3, #0
   329cc:	bne	32c84 <__assert_fail@plt+0x206c0>
   329d0:	add	r7, r7, r8
   329d4:	add	r2, r4, #1
   329d8:	lsl	r3, r4, #2
   329dc:	ldr	r1, [r5, #8]
   329e0:	str	r9, [r1, r4, lsl #2]
   329e4:	add	r4, r4, r8
   329e8:	mov	ip, r4
   329ec:	cmp	r2, r4
   329f0:	bge	32d48 <__assert_fail@plt+0x20784>
   329f4:	add	r3, r3, #4
   329f8:	mvn	r0, #0
   329fc:	add	r2, r2, #1
   32a00:	ldr	r1, [r5, #8]
   32a04:	str	r0, [r1, r3]
   32a08:	add	r3, r3, #4
   32a0c:	cmp	ip, r2
   32a10:	bne	329fc <__assert_fail@plt+0x20438>
   32a14:	b	327cc <__assert_fail@plt+0x20208>
   32a18:	ldr	r0, [r5, #4]
   32a1c:	ldr	r3, [r5, #24]
   32a20:	add	r3, r4, r3
   32a24:	ldr	r1, [r5]
   32a28:	mov	r2, r8
   32a2c:	add	r1, r1, r3
   32a30:	add	r0, r0, r4
   32a34:	bl	12000 <memcpy@plt>
   32a38:	b	32888 <__assert_fail@plt+0x202c4>
   32a3c:	cmn	r3, #3
   32a40:	bhi	32a74 <__assert_fail@plt+0x204b0>
   32a44:	cmn	r0, #2
   32a48:	bne	32aa0 <__assert_fail@plt+0x204dc>
   32a4c:	ldr	r2, [r5, #36]	; 0x24
   32a50:	ldr	r3, [r5, #48]	; 0x30
   32a54:	cmp	r2, r3
   32a58:	blt	32aa0 <__assert_fail@plt+0x204dc>
   32a5c:	ldr	r3, [r5, #4]
   32a60:	strb	sl, [r3, r4]
   32a64:	add	r4, r4, #1
   32a68:	ldr	r3, [r5, #8]
   32a6c:	str	sl, [r3, r9, lsl #2]
   32a70:	b	328cc <__assert_fail@plt+0x20308>
   32a74:	ldr	r3, [r5, #4]
   32a78:	strb	sl, [r3, r4]
   32a7c:	add	r4, r4, #1
   32a80:	ldr	r3, [r5, #8]
   32a84:	str	sl, [r3, r9, lsl #2]
   32a88:	cmn	r0, #1
   32a8c:	addeq	r3, sp, #80	; 0x50
   32a90:	ldmeq	r3, {r0, r1}
   32a94:	ldreq	r3, [sp, #4]
   32a98:	stmeq	r3, {r0, r1}
   32a9c:	b	328cc <__assert_fail@plt+0x20308>
   32aa0:	add	r3, r5, #16
   32aa4:	add	r2, sp, #88	; 0x58
   32aa8:	ldmdb	r2, {r0, r1}
   32aac:	stm	r3, {r0, r1}
   32ab0:	str	r4, [r5, #28]
   32ab4:	str	r4, [r5, #32]
   32ab8:	mov	r0, #0
   32abc:	b	327e0 <__assert_fail@plt+0x2021c>
   32ac0:	ldr	r8, [r5, #80]	; 0x50
   32ac4:	cmp	r8, #0
   32ac8:	cmpgt	r2, #0
   32acc:	ble	32b14 <__assert_fail@plt+0x20550>
   32ad0:	ldr	r3, [r5, #24]
   32ad4:	add	r3, r7, r3
   32ad8:	sub	r3, r3, #1
   32adc:	ldr	r0, [r5]
   32ae0:	add	r0, r0, r3
   32ae4:	add	ip, sp, #15
   32ae8:	mov	r3, #0
   32aec:	ldrb	lr, [r0, #1]!
   32af0:	ldrb	lr, [r1, lr]
   32af4:	strb	lr, [ip, #1]!
   32af8:	add	r3, r3, #1
   32afc:	cmp	r8, r3
   32b00:	cmpgt	r2, r3
   32b04:	bgt	32aec <__assert_fail@plt+0x20528>
   32b08:	add	r3, sp, #16
   32b0c:	str	r3, [sp, #4]
   32b10:	b	3295c <__assert_fail@plt+0x20398>
   32b14:	add	r3, sp, #16
   32b18:	str	r3, [sp, #4]
   32b1c:	b	3295c <__assert_fail@plt+0x20398>
   32b20:	cmn	r0, #1
   32b24:	beq	32c54 <__assert_fail@plt+0x20690>
   32b28:	mov	r6, r4
   32b2c:	add	r3, r0, r4
   32b30:	str	r3, [sp, #4]
   32b34:	ldr	r0, [r5, #36]	; 0x24
   32b38:	cmp	r3, r0
   32b3c:	bls	32b54 <__assert_fail@plt+0x20590>
   32b40:	add	r3, r5, #16
   32b44:	add	r2, sp, #88	; 0x58
   32b48:	ldmdb	r2, {r0, r1}
   32b4c:	stm	r3, {r0, r1}
   32b50:	b	327d4 <__assert_fail@plt+0x20210>
   32b54:	ldr	r3, [r5, #12]
   32b58:	cmp	r3, #0
   32b5c:	beq	32c38 <__assert_fail@plt+0x20674>
   32b60:	ldrb	r3, [r5, #76]	; 0x4c
   32b64:	cmp	r3, #0
   32b68:	bne	32b90 <__assert_fail@plt+0x205cc>
   32b6c:	cmp	r6, #0
   32b70:	beq	32b88 <__assert_fail@plt+0x205c4>
   32b74:	ldr	r2, [r5, #12]
   32b78:	str	r3, [r2, r3, lsl #2]
   32b7c:	add	r3, r3, #1
   32b80:	cmp	r6, r3
   32b84:	bne	32b74 <__assert_fail@plt+0x205b0>
   32b88:	mov	r3, #1
   32b8c:	strb	r3, [r5, #76]	; 0x4c
   32b90:	ldr	r0, [r5, #4]
   32b94:	mov	r2, sl
   32b98:	add	r1, sp, #16
   32b9c:	add	r0, r0, r6
   32ba0:	bl	12000 <memcpy@plt>
   32ba4:	lsl	r3, r6, #2
   32ba8:	ldr	r2, [r5, #8]
   32bac:	str	r9, [r2, r6, lsl #2]
   32bb0:	ldr	r2, [r5, #12]
   32bb4:	str	r7, [r2, r6, lsl #2]
   32bb8:	cmp	sl, #1
   32bbc:	bls	32bfc <__assert_fail@plt+0x20638>
   32bc0:	add	r3, r3, #4
   32bc4:	mov	r2, #1
   32bc8:	mvn	r0, #0
   32bcc:	ldr	ip, [r5, #12]
   32bd0:	cmp	r2, r8
   32bd4:	movcc	r1, r2
   32bd8:	movcs	r1, fp
   32bdc:	add	r1, r7, r1
   32be0:	str	r1, [ip, r3]
   32be4:	ldr	r1, [r5, #8]
   32be8:	str	r0, [r1, r3]
   32bec:	add	r2, r2, #1
   32bf0:	add	r3, r3, #4
   32bf4:	cmp	sl, r2
   32bf8:	bne	32bcc <__assert_fail@plt+0x20608>
   32bfc:	sub	sl, sl, r8
   32c00:	ldr	r6, [r5, #48]	; 0x30
   32c04:	add	r6, sl, r6
   32c08:	str	r6, [r5, #48]	; 0x30
   32c0c:	ldr	r3, [r5, #52]	; 0x34
   32c10:	cmp	r7, r3
   32c14:	ldrlt	r3, [r5, #56]	; 0x38
   32c18:	addlt	sl, r3, sl
   32c1c:	strlt	sl, [r5, #56]	; 0x38
   32c20:	ldr	r3, [r5, #36]	; 0x24
   32c24:	cmp	r6, r3
   32c28:	movge	r6, r3
   32c2c:	ldr	r4, [sp, #4]
   32c30:	add	r7, r7, r8
   32c34:	b	327cc <__assert_fail@plt+0x20208>
   32c38:	lsl	r0, r0, #2
   32c3c:	bl	3079c <__assert_fail@plt+0x1e1d8>
   32c40:	str	r0, [r5, #12]
   32c44:	cmp	r0, #0
   32c48:	moveq	r0, #12
   32c4c:	bne	32b60 <__assert_fail@plt+0x2059c>
   32c50:	b	327e0 <__assert_fail@plt+0x2021c>
   32c54:	ldr	r0, [r5, #4]
   32c58:	mov	r2, r8
   32c5c:	ldr	r1, [sp, #4]
   32c60:	add	r0, r0, r4
   32c64:	bl	12000 <memcpy@plt>
   32c68:	b	329c4 <__assert_fail@plt+0x20400>
   32c6c:	ldr	r0, [r5, #4]
   32c70:	mov	r2, r8
   32c74:	ldr	r1, [sp, #4]
   32c78:	add	r0, r0, r4
   32c7c:	bl	12000 <memcpy@plt>
   32c80:	b	329c4 <__assert_fail@plt+0x20400>
   32c84:	cmp	r8, #0
   32c88:	beq	329d0 <__assert_fail@plt+0x2040c>
   32c8c:	lsl	r2, r4, #2
   32c90:	mov	r3, r7
   32c94:	add	r0, r8, r7
   32c98:	ldr	r1, [r5, #12]
   32c9c:	str	r3, [r1, r2]
   32ca0:	add	r2, r2, #4
   32ca4:	add	r3, r3, #1
   32ca8:	cmp	r3, r0
   32cac:	bne	32c98 <__assert_fail@plt+0x206d4>
   32cb0:	b	329d0 <__assert_fail@plt+0x2040c>
   32cb4:	cmn	fp, #3
   32cb8:	bhi	32ce8 <__assert_fail@plt+0x20724>
   32cbc:	cmn	r0, #2
   32cc0:	beq	32cd8 <__assert_fail@plt+0x20714>
   32cc4:	add	r3, r5, #16
   32cc8:	add	r2, sp, #88	; 0x58
   32ccc:	ldmdb	r2, {r0, r1}
   32cd0:	stm	r3, {r0, r1}
   32cd4:	b	327d4 <__assert_fail@plt+0x20210>
   32cd8:	ldr	r2, [r5, #36]	; 0x24
   32cdc:	ldr	r3, [r5, #48]	; 0x30
   32ce0:	cmp	r2, r3
   32ce4:	blt	32cc4 <__assert_fail@plt+0x20700>
   32ce8:	ldr	r3, [r5]
   32cec:	ldr	r2, [r5, #24]
   32cf0:	add	r3, r3, r7
   32cf4:	ldrb	r3, [r3, r2]
   32cf8:	ldr	r2, [r5, #64]	; 0x40
   32cfc:	cmp	r2, #0
   32d00:	ldrbne	r3, [r2, r3]
   32d04:	mov	r1, r4
   32d08:	ldr	r2, [r5, #4]
   32d0c:	strb	r3, [r2, r4]
   32d10:	ldrb	r2, [r5, #76]	; 0x4c
   32d14:	cmp	r2, #0
   32d18:	ldrne	r2, [r5, #12]
   32d1c:	strne	r7, [r2, r4, lsl #2]
   32d20:	add	r7, r7, #1
   32d24:	add	r4, r4, #1
   32d28:	ldr	r2, [r5, #8]
   32d2c:	str	r3, [r2, r1, lsl #2]
   32d30:	cmn	r8, #1
   32d34:	addeq	r3, r5, #16
   32d38:	addeq	r2, sp, #88	; 0x58
   32d3c:	ldmdbeq	r2, {r0, r1}
   32d40:	stmeq	r3, {r0, r1}
   32d44:	b	327cc <__assert_fail@plt+0x20208>
   32d48:	mov	r4, r2
   32d4c:	b	327cc <__assert_fail@plt+0x20208>
   32d50:	ldr	r3, [r1, #4]
   32d54:	str	r3, [r0, #4]
   32d58:	ldr	r2, [r1, #4]
   32d5c:	cmp	r2, #0
   32d60:	ble	32db4 <__assert_fail@plt+0x207f0>
   32d64:	push	{r4, r5, r6, lr}
   32d68:	mov	r5, r1
   32d6c:	mov	r4, r0
   32d70:	str	r3, [r0]
   32d74:	lsl	r0, r3, #2
   32d78:	bl	3079c <__assert_fail@plt+0x1e1d8>
   32d7c:	str	r0, [r4, #8]
   32d80:	cmp	r0, #0
   32d84:	beq	32da0 <__assert_fail@plt+0x207dc>
   32d88:	ldr	r2, [r5, #4]
   32d8c:	lsl	r2, r2, #2
   32d90:	ldr	r1, [r5, #8]
   32d94:	bl	12000 <memcpy@plt>
   32d98:	mov	r0, #0
   32d9c:	pop	{r4, r5, r6, pc}
   32da0:	mov	r3, #0
   32da4:	str	r3, [r4, #4]
   32da8:	str	r3, [r4]
   32dac:	mov	r0, #12
   32db0:	pop	{r4, r5, r6, pc}
   32db4:	mov	r3, #0
   32db8:	str	r3, [r0]
   32dbc:	str	r3, [r0, #4]
   32dc0:	str	r3, [r0, #8]
   32dc4:	mov	r0, r3
   32dc8:	bx	lr
   32dcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32dd0:	mov	r8, r0
   32dd4:	mov	r5, r2
   32dd8:	subs	r7, r1, #0
   32ddc:	beq	32e34 <__assert_fail@plt+0x20870>
   32de0:	ldr	r0, [r7, #4]
   32de4:	cmp	r2, #0
   32de8:	cmpne	r0, #0
   32dec:	ble	32e2c <__assert_fail@plt+0x20868>
   32df0:	ldr	r3, [r2, #4]
   32df4:	cmp	r3, #0
   32df8:	ble	32e2c <__assert_fail@plt+0x20868>
   32dfc:	add	r0, r0, r3
   32e00:	str	r0, [r8]
   32e04:	lsl	r0, r0, #2
   32e08:	bl	3079c <__assert_fail@plt+0x1e1d8>
   32e0c:	str	r0, [r8, #8]
   32e10:	cmp	r0, #0
   32e14:	beq	32f50 <__assert_fail@plt+0x2098c>
   32e18:	mov	r3, #0
   32e1c:	mov	r2, #1
   32e20:	mov	r4, r3
   32e24:	mov	r6, r3
   32e28:	b	32e98 <__assert_fail@plt+0x208d4>
   32e2c:	cmp	r0, #0
   32e30:	bgt	32e58 <__assert_fail@plt+0x20894>
   32e34:	cmp	r5, #0
   32e38:	beq	32e68 <__assert_fail@plt+0x208a4>
   32e3c:	ldr	r3, [r5, #4]
   32e40:	cmp	r3, #0
   32e44:	ble	32e68 <__assert_fail@plt+0x208a4>
   32e48:	mov	r1, r5
   32e4c:	mov	r0, r8
   32e50:	bl	32d50 <__assert_fail@plt+0x2078c>
   32e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32e58:	mov	r1, r7
   32e5c:	mov	r0, r8
   32e60:	bl	32d50 <__assert_fail@plt+0x2078c>
   32e64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32e68:	mov	r0, #0
   32e6c:	str	r0, [r8]
   32e70:	str	r0, [r8, #4]
   32e74:	str	r0, [r8, #8]
   32e78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32e7c:	cmp	r1, r0
   32e80:	addeq	r4, r4, #1
   32e84:	add	r6, r6, #1
   32e88:	ldr	r0, [r8, #8]
   32e8c:	str	r1, [r0, r3]
   32e90:	add	r2, r2, #1
   32e94:	add	r3, r3, #4
   32e98:	sub	r0, r2, #1
   32e9c:	mov	r9, r0
   32ea0:	ldr	r1, [r7, #4]
   32ea4:	cmp	r6, r1
   32ea8:	bge	32f0c <__assert_fail@plt+0x20948>
   32eac:	ldr	ip, [r5, #4]
   32eb0:	cmp	r4, ip
   32eb4:	bge	32ee0 <__assert_fail@plt+0x2091c>
   32eb8:	ldr	r1, [r7, #8]
   32ebc:	ldr	r1, [r1, r6, lsl #2]
   32ec0:	ldr	r0, [r5, #8]
   32ec4:	ldr	r0, [r0, r4, lsl #2]
   32ec8:	cmp	r1, r0
   32ecc:	ble	32e7c <__assert_fail@plt+0x208b8>
   32ed0:	add	r4, r4, #1
   32ed4:	ldr	r1, [r8, #8]
   32ed8:	str	r0, [r1, r3]
   32edc:	b	32e90 <__assert_fail@plt+0x208cc>
   32ee0:	ldr	r3, [r8, #8]
   32ee4:	sub	r2, r1, r6
   32ee8:	ldr	r1, [r7, #8]
   32eec:	lsl	r2, r2, #2
   32ef0:	add	r1, r1, r6, lsl #2
   32ef4:	add	r0, r3, r0, lsl #2
   32ef8:	bl	12000 <memcpy@plt>
   32efc:	ldr	r3, [r7, #4]
   32f00:	sub	r6, r3, r6
   32f04:	add	r9, r9, r6
   32f08:	b	32f18 <__assert_fail@plt+0x20954>
   32f0c:	ldr	r2, [r5, #4]
   32f10:	cmp	r4, r2
   32f14:	blt	32f24 <__assert_fail@plt+0x20960>
   32f18:	str	r9, [r8, #4]
   32f1c:	mov	r0, #0
   32f20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32f24:	ldr	r3, [r8, #8]
   32f28:	sub	r2, r2, r4
   32f2c:	ldr	r1, [r5, #8]
   32f30:	lsl	r2, r2, #2
   32f34:	add	r1, r1, r4, lsl #2
   32f38:	add	r0, r3, r0, lsl #2
   32f3c:	bl	12000 <memcpy@plt>
   32f40:	ldr	r3, [r5, #4]
   32f44:	sub	r4, r3, r4
   32f48:	add	r9, r9, r4
   32f4c:	b	32f18 <__assert_fail@plt+0x20954>
   32f50:	mov	r0, #12
   32f54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32f58:	ldr	r3, [r1, #4]
   32f5c:	cmp	r3, #0
   32f60:	beq	330f8 <__assert_fail@plt+0x20b34>
   32f64:	ldr	ip, [r2, #4]
   32f68:	cmp	ip, #0
   32f6c:	beq	33100 <__assert_fail@plt+0x20b3c>
   32f70:	push	{r4, r5, r6, r7, r8, lr}
   32f74:	mov	r6, r2
   32f78:	mov	r5, r1
   32f7c:	mov	r7, r0
   32f80:	add	r3, r3, ip
   32f84:	ldr	r4, [r0]
   32f88:	ldr	r2, [r0, #4]
   32f8c:	add	r2, r3, r2
   32f90:	cmp	r2, r4
   32f94:	bgt	32fbc <__assert_fail@plt+0x209f8>
   32f98:	ldr	r3, [r7, #4]
   32f9c:	ldr	r2, [r5, #4]
   32fa0:	ldr	r0, [r6, #4]
   32fa4:	add	r1, r3, r2
   32fa8:	add	r1, r1, r0
   32fac:	sub	r2, r2, #1
   32fb0:	sub	r0, r0, #1
   32fb4:	sub	r3, r3, #1
   32fb8:	b	33048 <__assert_fail@plt+0x20a84>
   32fbc:	add	r4, r3, r4
   32fc0:	lsl	r1, r4, #2
   32fc4:	ldr	r0, [r0, #8]
   32fc8:	bl	31320 <__assert_fail@plt+0x1ed5c>
   32fcc:	cmp	r0, #0
   32fd0:	beq	33108 <__assert_fail@plt+0x20b44>
   32fd4:	str	r0, [r7, #8]
   32fd8:	str	r4, [r7]
   32fdc:	b	32f98 <__assert_fail@plt+0x209d4>
   32fe0:	cmp	r3, #0
   32fe4:	blt	33020 <__assert_fail@plt+0x20a5c>
   32fe8:	ldr	r8, [r7, #8]
   32fec:	add	ip, r8, r3, lsl #2
   32ff0:	ldr	r4, [r8, r3, lsl #2]
   32ff4:	cmp	lr, r4
   32ff8:	bge	33014 <__assert_fail@plt+0x20a50>
   32ffc:	sub	r3, r3, #1
   33000:	cmn	r3, #1
   33004:	beq	33110 <__assert_fail@plt+0x20b4c>
   33008:	ldr	r4, [ip, #-4]!
   3300c:	cmp	lr, r4
   33010:	blt	32ffc <__assert_fail@plt+0x20a38>
   33014:	ldr	ip, [r8, r3, lsl #2]
   33018:	cmp	lr, ip
   3301c:	beq	3302c <__assert_fail@plt+0x20a68>
   33020:	sub	r1, r1, #1
   33024:	ldr	ip, [r7, #8]
   33028:	str	lr, [ip, r1, lsl #2]
   3302c:	subs	r2, r2, #1
   33030:	bmi	33070 <__assert_fail@plt+0x20aac>
   33034:	subs	r0, r0, #1
   33038:	bpl	33048 <__assert_fail@plt+0x20a84>
   3303c:	b	33070 <__assert_fail@plt+0x20aac>
   33040:	subs	r2, r2, #1
   33044:	bmi	33070 <__assert_fail@plt+0x20aac>
   33048:	ldr	ip, [r5, #8]
   3304c:	ldr	lr, [ip, r2, lsl #2]
   33050:	ldr	ip, [r6, #8]
   33054:	ldr	ip, [ip, r0, lsl #2]
   33058:	cmp	lr, ip
   3305c:	beq	32fe0 <__assert_fail@plt+0x20a1c>
   33060:	cmp	lr, ip
   33064:	bge	33040 <__assert_fail@plt+0x20a7c>
   33068:	subs	r0, r0, #1
   3306c:	bpl	33048 <__assert_fail@plt+0x20a84>
   33070:	ldr	r3, [r7, #4]
   33074:	sub	r0, r3, #1
   33078:	ldr	r2, [r5, #4]
   3307c:	add	r2, r3, r2
   33080:	ldr	ip, [r6, #4]
   33084:	add	r2, r2, ip
   33088:	sub	r4, r2, #1
   3308c:	sub	r2, r2, r1
   33090:	add	r3, r3, r2
   33094:	str	r3, [r7, #4]
   33098:	cmp	r0, #0
   3309c:	cmpge	r2, #0
   330a0:	bgt	330cc <__assert_fail@plt+0x20b08>
   330a4:	ldr	r0, [r7, #8]
   330a8:	lsl	r2, r2, #2
   330ac:	add	r1, r0, r1, lsl #2
   330b0:	bl	12000 <memcpy@plt>
   330b4:	mov	r0, #0
   330b8:	pop	{r4, r5, r6, r7, r8, pc}
   330bc:	add	lr, r0, r2
   330c0:	str	ip, [r3, lr, lsl #2]
   330c4:	subs	r0, r0, #1
   330c8:	bmi	330a4 <__assert_fail@plt+0x20ae0>
   330cc:	ldr	r3, [r7, #8]
   330d0:	ldr	lr, [r3, r4, lsl #2]
   330d4:	ldr	ip, [r3, r0, lsl #2]
   330d8:	cmp	lr, ip
   330dc:	ble	330bc <__assert_fail@plt+0x20af8>
   330e0:	sub	r4, r4, #1
   330e4:	add	ip, r0, r2
   330e8:	str	lr, [r3, ip, lsl #2]
   330ec:	subs	r2, r2, #1
   330f0:	bne	330cc <__assert_fail@plt+0x20b08>
   330f4:	b	330a4 <__assert_fail@plt+0x20ae0>
   330f8:	mov	r0, #0
   330fc:	bx	lr
   33100:	mov	r0, #0
   33104:	bx	lr
   33108:	mov	r0, #12
   3310c:	pop	{r4, r5, r6, r7, r8, pc}
   33110:	mvn	r3, #0
   33114:	b	33020 <__assert_fail@plt+0x20a5c>
   33118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3311c:	mov	r6, r0
   33120:	ldr	r8, [r0, #36]	; 0x24
   33124:	ldr	r3, [r0, #48]	; 0x30
   33128:	cmp	r8, r3
   3312c:	movge	r8, r3
   33130:	ldr	r4, [r0, #28]
   33134:	cmp	r8, r4
   33138:	ble	33194 <__assert_fail@plt+0x20bd0>
   3313c:	ldr	r9, [pc, #92]	; 331a0 <__assert_fail@plt+0x20bdc>
   33140:	b	33154 <__assert_fail@plt+0x20b90>
   33144:	strb	r5, [r7]
   33148:	add	r4, r4, #1
   3314c:	cmp	r8, r4
   33150:	beq	33194 <__assert_fail@plt+0x20bd0>
   33154:	ldr	r3, [r6]
   33158:	ldr	r2, [r6, #24]
   3315c:	add	r3, r3, r4
   33160:	ldrb	r5, [r3, r2]
   33164:	ldr	r3, [r6, #64]	; 0x40
   33168:	cmp	r3, #0
   3316c:	ldrbne	r5, [r3, r5]
   33170:	ldr	r7, [r6, #4]
   33174:	add	r7, r7, r4
   33178:	add	r3, r5, #128	; 0x80
   3317c:	cmp	r3, r9
   33180:	bhi	33144 <__assert_fail@plt+0x20b80>
   33184:	bl	12270 <__ctype_toupper_loc@plt>
   33188:	ldr	r3, [r0]
   3318c:	ldr	r5, [r3, r5, lsl #2]
   33190:	b	33144 <__assert_fail@plt+0x20b80>
   33194:	str	r4, [r6, #28]
   33198:	str	r4, [r6, #32]
   3319c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   331a0:	andeq	r0, r0, pc, ror r1
   331a4:	push	{r4, r5, r6, lr}
   331a8:	ldr	r3, [r0, #36]	; 0x24
   331ac:	cmn	r3, #-536870910	; 0xe0000002
   331b0:	bhi	3326c <__assert_fail@plt+0x20ca8>
   331b4:	mov	r4, r0
   331b8:	lsl	r3, r3, #1
   331bc:	ldr	r2, [r0, #48]	; 0x30
   331c0:	cmp	r3, r2
   331c4:	movge	r3, r2
   331c8:	cmp	r3, r1
   331cc:	movge	r1, r3
   331d0:	bl	32028 <__assert_fail@plt+0x1fa64>
   331d4:	subs	r5, r0, #0
   331d8:	bne	33228 <__assert_fail@plt+0x20c64>
   331dc:	ldr	r0, [r4, #100]	; 0x64
   331e0:	cmp	r0, #0
   331e4:	beq	33204 <__assert_fail@plt+0x20c40>
   331e8:	ldr	r1, [r4, #36]	; 0x24
   331ec:	add	r1, r1, #1
   331f0:	lsl	r1, r1, #2
   331f4:	bl	31320 <__assert_fail@plt+0x1ed5c>
   331f8:	cmp	r0, #0
   331fc:	beq	33274 <__assert_fail@plt+0x20cb0>
   33200:	str	r0, [r4, #100]	; 0x64
   33204:	ldrb	r3, [r4, #72]	; 0x48
   33208:	cmp	r3, #0
   3320c:	beq	3323c <__assert_fail@plt+0x20c78>
   33210:	ldr	r3, [r4, #80]	; 0x50
   33214:	cmp	r3, #1
   33218:	ble	33230 <__assert_fail@plt+0x20c6c>
   3321c:	mov	r0, r4
   33220:	bl	32790 <__assert_fail@plt+0x201cc>
   33224:	mov	r5, r0
   33228:	mov	r0, r5
   3322c:	pop	{r4, r5, r6, pc}
   33230:	mov	r0, r4
   33234:	bl	33118 <__assert_fail@plt+0x20b54>
   33238:	b	33228 <__assert_fail@plt+0x20c64>
   3323c:	ldr	r3, [r4, #80]	; 0x50
   33240:	cmp	r3, #1
   33244:	bgt	33260 <__assert_fail@plt+0x20c9c>
   33248:	ldr	r3, [r4, #64]	; 0x40
   3324c:	cmp	r3, #0
   33250:	beq	33228 <__assert_fail@plt+0x20c64>
   33254:	mov	r0, r4
   33258:	bl	3144c <__assert_fail@plt+0x1ee88>
   3325c:	b	33228 <__assert_fail@plt+0x20c64>
   33260:	mov	r0, r4
   33264:	bl	325f4 <__assert_fail@plt+0x20030>
   33268:	b	33228 <__assert_fail@plt+0x20c64>
   3326c:	mov	r5, #12
   33270:	b	33228 <__assert_fail@plt+0x20c64>
   33274:	mov	r5, #12
   33278:	b	33228 <__assert_fail@plt+0x20c64>
   3327c:	ldr	r3, [r1, #40]	; 0x28
   33280:	ldr	ip, [r1, #56]	; 0x38
   33284:	cmp	ip, r3
   33288:	ble	33514 <__assert_fail@plt+0x20f50>
   3328c:	push	{r4, r5, r6, r7, r8, lr}
   33290:	sub	sp, sp, #8
   33294:	ldr	ip, [r1, #4]
   33298:	ldrb	r6, [ip, r3]
   3329c:	strb	r6, [r0]
   332a0:	ldrb	r3, [r0, #6]
   332a4:	and	r3, r3, #159	; 0x9f
   332a8:	strb	r3, [r0, #6]
   332ac:	ldr	r3, [r1, #80]	; 0x50
   332b0:	cmp	r3, #1
   332b4:	ble	332d8 <__assert_fail@plt+0x20d14>
   332b8:	ldr	ip, [r1, #40]	; 0x28
   332bc:	ldr	lr, [r1, #28]
   332c0:	cmp	ip, lr
   332c4:	beq	332d8 <__assert_fail@plt+0x20d14>
   332c8:	ldr	lr, [r1, #8]
   332cc:	ldr	ip, [lr, ip, lsl #2]
   332d0:	cmn	ip, #1
   332d4:	beq	33524 <__assert_fail@plt+0x20f60>
   332d8:	mov	r7, r2
   332dc:	mov	r4, r1
   332e0:	mov	r5, r0
   332e4:	cmp	r6, #92	; 0x5c
   332e8:	beq	33544 <__assert_fail@plt+0x20f80>
   332ec:	mov	r3, #1
   332f0:	strb	r3, [r0, #4]
   332f4:	ldr	r3, [r1, #80]	; 0x50
   332f8:	cmp	r3, #1
   332fc:	ble	33a04 <__assert_fail@plt+0x21440>
   33300:	ldr	r1, [r1, #40]	; 0x28
   33304:	mov	r0, r4
   33308:	bl	31430 <__assert_fail@plt+0x1ee6c>
   3330c:	mov	r8, r0
   33310:	bl	12324 <iswalnum@plt>
   33314:	adds	r3, r0, #0
   33318:	movne	r3, #1
   3331c:	ldrb	r0, [r5, #6]
   33320:	cmp	r8, #95	; 0x5f
   33324:	orreq	r3, r3, #1
   33328:	bic	r0, r0, #64	; 0x40
   3332c:	orr	r0, r0, r3, lsl #6
   33330:	strb	r0, [r5, #6]
   33334:	sub	r6, r6, #10
   33338:	cmp	r6, #115	; 0x73
   3333c:	ldrls	pc, [pc, r6, lsl #2]
   33340:	b	33c14 <__assert_fail@plt+0x21650>
   33344:	andeq	r3, r3, r8, lsr sl
   33348:	andeq	r3, r3, r4, lsl ip
   3334c:	andeq	r3, r3, r4, lsl ip
   33350:	andeq	r3, r3, r4, lsl ip
   33354:	andeq	r3, r3, r4, lsl ip
   33358:	andeq	r3, r3, r4, lsl ip
   3335c:	andeq	r3, r3, r4, lsl ip
   33360:	andeq	r3, r3, r4, lsl ip
   33364:	andeq	r3, r3, r4, lsl ip
   33368:	andeq	r3, r3, r4, lsl ip
   3336c:	andeq	r3, r3, r4, lsl ip
   33370:	andeq	r3, r3, r4, lsl ip
   33374:	andeq	r3, r3, r4, lsl ip
   33378:	andeq	r3, r3, r4, lsl ip
   3337c:	andeq	r3, r3, r4, lsl ip
   33380:	andeq	r3, r3, r4, lsl ip
   33384:	andeq	r3, r3, r4, lsl ip
   33388:	andeq	r3, r3, r4, lsl ip
   3338c:	andeq	r3, r3, r4, lsl ip
   33390:	andeq	r3, r3, r4, lsl ip
   33394:	andeq	r3, r3, r4, lsl ip
   33398:	andeq	r3, r3, r4, lsl ip
   3339c:	andeq	r3, r3, r4, lsl ip
   333a0:	andeq	r3, r3, r4, lsl ip
   333a4:	andeq	r3, r3, r4, lsl ip
   333a8:	andeq	r3, r3, r4, lsl ip
   333ac:	andeq	r3, r3, r0, lsr #23
   333b0:	andeq	r3, r3, r4, lsl ip
   333b4:	andeq	r3, r3, r4, lsl ip
   333b8:	andeq	r3, r3, r4, lsl ip
   333bc:	strdeq	r3, [r3], -r4
   333c0:	andeq	r3, r3, ip, lsl #22
   333c4:	andeq	r3, r3, ip, ror #20
   333c8:	andeq	r3, r3, ip, ror sl
   333cc:	andeq	r3, r3, r4, lsl ip
   333d0:	andeq	r3, r3, r4, lsl ip
   333d4:	andeq	r3, r3, r4, lsr fp
   333d8:	andeq	r3, r3, r4, lsl ip
   333dc:	andeq	r3, r3, r4, lsl ip
   333e0:	andeq	r3, r3, r4, lsl ip
   333e4:	andeq	r3, r3, r4, lsl ip
   333e8:	andeq	r3, r3, r4, lsl ip
   333ec:	andeq	r3, r3, r4, lsl ip
   333f0:	andeq	r3, r3, r4, lsl ip
   333f4:	andeq	r3, r3, r4, lsl ip
   333f8:	andeq	r3, r3, r4, lsl ip
   333fc:	andeq	r3, r3, r4, lsl ip
   33400:	andeq	r3, r3, r4, lsl ip
   33404:	andeq	r3, r3, r4, lsl ip
   33408:	andeq	r3, r3, r4, lsl ip
   3340c:	andeq	r3, r3, r4, lsl ip
   33410:	andeq	r3, r3, r4, lsl ip
   33414:	andeq	r3, r3, r4, lsl ip
   33418:	muleq	r3, ip, sl
   3341c:	andeq	r3, r3, r4, lsl ip
   33420:	andeq	r3, r3, r4, lsl ip
   33424:	andeq	r3, r3, r4, lsl ip
   33428:	andeq	r3, r3, r4, lsl ip
   3342c:	andeq	r3, r3, r4, lsl ip
   33430:	andeq	r3, r3, r4, lsl ip
   33434:	andeq	r3, r3, r4, lsl ip
   33438:	andeq	r3, r3, r4, lsl ip
   3343c:	andeq	r3, r3, r4, lsl ip
   33440:	andeq	r3, r3, r4, lsl ip
   33444:	andeq	r3, r3, r4, lsl ip
   33448:	andeq	r3, r3, r4, lsl ip
   3344c:	andeq	r3, r3, r4, lsl ip
   33450:	andeq	r3, r3, r4, lsl ip
   33454:	andeq	r3, r3, r4, lsl ip
   33458:	andeq	r3, r3, r4, lsl ip
   3345c:	andeq	r3, r3, r4, lsl ip
   33460:	andeq	r3, r3, r4, lsl ip
   33464:	andeq	r3, r3, r4, lsl ip
   33468:	andeq	r3, r3, r4, lsl ip
   3346c:	andeq	r3, r3, r4, lsl ip
   33470:	andeq	r3, r3, r4, lsl ip
   33474:	andeq	r3, r3, r4, lsl ip
   33478:	andeq	r3, r3, r4, lsl ip
   3347c:	andeq	r3, r3, r4, lsl ip
   33480:	andeq	r3, r3, r4, lsl ip
   33484:	andeq	r3, r3, r4, lsl ip
   33488:	andeq	r3, r3, r4, lsr #22
   3348c:	andeq	r3, r3, r4, lsl ip
   33490:	andeq	r3, r3, r4, lsl ip
   33494:	andeq	r3, r3, r4, asr #22
   33498:	andeq	r3, r3, r4, lsl ip
   3349c:	andeq	r3, r3, r4, lsl ip
   334a0:	andeq	r3, r3, r4, lsl ip
   334a4:	andeq	r3, r3, r4, lsl ip
   334a8:	andeq	r3, r3, r4, lsl ip
   334ac:	andeq	r3, r3, r4, lsl ip
   334b0:	andeq	r3, r3, r4, lsl ip
   334b4:	andeq	r3, r3, r4, lsl ip
   334b8:	andeq	r3, r3, r4, lsl ip
   334bc:	andeq	r3, r3, r4, lsl ip
   334c0:	andeq	r3, r3, r4, lsl ip
   334c4:	andeq	r3, r3, r4, lsl ip
   334c8:	andeq	r3, r3, r4, lsl ip
   334cc:	andeq	r3, r3, r4, lsl ip
   334d0:	andeq	r3, r3, r4, lsl ip
   334d4:	andeq	r3, r3, r4, lsl ip
   334d8:	andeq	r3, r3, r4, lsl ip
   334dc:	andeq	r3, r3, r4, lsl ip
   334e0:	andeq	r3, r3, r4, lsl ip
   334e4:	andeq	r3, r3, r4, lsl ip
   334e8:	andeq	r3, r3, r4, lsl ip
   334ec:	andeq	r3, r3, r4, lsl ip
   334f0:	andeq	r3, r3, r4, lsl ip
   334f4:	andeq	r3, r3, r4, lsl ip
   334f8:	andeq	r3, r3, r4, lsl ip
   334fc:	andeq	r3, r3, r4, lsl ip
   33500:	andeq	r3, r3, r4, lsl ip
   33504:	andeq	r3, r3, r4, lsl ip
   33508:			; <UNDEFINED> instruction: 0x00033abc
   3350c:	andeq	r3, r3, r0, asr sl
   33510:	ldrdeq	r3, [r3], -r8
   33514:	mov	r3, #2
   33518:	strb	r3, [r0, #4]
   3351c:	mov	r0, #0
   33520:	bx	lr
   33524:	mov	r3, #1
   33528:	strb	r3, [r0, #4]
   3352c:	ldrb	r2, [r0, #6]
   33530:	orr	r2, r2, #32
   33534:	strb	r2, [r0, #6]
   33538:	mov	r0, r3
   3353c:	add	sp, sp, #8
   33540:	pop	{r4, r5, r6, r7, r8, pc}
   33544:	ldr	r1, [r1, #40]	; 0x28
   33548:	add	r2, r1, #1
   3354c:	ldr	r0, [r4, #48]	; 0x30
   33550:	cmp	r2, r0
   33554:	bge	33728 <__assert_fail@plt+0x21164>
   33558:	ldrb	r0, [r4, #75]	; 0x4b
   3355c:	cmp	r0, #0
   33560:	bne	33738 <__assert_fail@plt+0x21174>
   33564:	ldr	r3, [r4, #4]
   33568:	ldrb	r6, [r3, r2]
   3356c:	strb	r6, [r5]
   33570:	mov	r3, #1
   33574:	strb	r3, [r5, #4]
   33578:	ldr	r3, [r4, #80]	; 0x50
   3357c:	cmp	r3, #1
   33580:	ble	337b4 <__assert_fail@plt+0x211f0>
   33584:	ldr	r1, [r4, #40]	; 0x28
   33588:	add	r1, r1, #1
   3358c:	mov	r0, r4
   33590:	bl	31430 <__assert_fail@plt+0x1ee6c>
   33594:	mov	r4, r0
   33598:	bl	12324 <iswalnum@plt>
   3359c:	adds	r3, r0, #0
   335a0:	movne	r3, #1
   335a4:	ldrb	r0, [r5, #6]
   335a8:	cmp	r4, #95	; 0x5f
   335ac:	orreq	r3, r3, #1
   335b0:	bic	r0, r0, #64	; 0x40
   335b4:	orr	r0, r0, r3, lsl #6
   335b8:	strb	r0, [r5, #6]
   335bc:	sub	r3, r6, #39	; 0x27
   335c0:	cmp	r3, #86	; 0x56
   335c4:	ldrls	pc, [pc, r3, lsl #2]
   335c8:	b	33c0c <__assert_fail@plt+0x21648>
   335cc:	andeq	r3, r3, r8, lsr r9
   335d0:	andeq	r3, r3, ip, asr r9
   335d4:	andeq	r3, r3, r4, ror r9
   335d8:	andeq	r3, r3, ip, lsl #24
   335dc:	andeq	r3, r3, ip, lsl #19
   335e0:	andeq	r3, r3, ip, lsl #24
   335e4:	andeq	r3, r3, ip, lsl #24
   335e8:	andeq	r3, r3, ip, lsl #24
   335ec:	andeq	r3, r3, ip, lsl #24
   335f0:	andeq	r3, r3, ip, lsl #24
   335f4:	andeq	r3, r3, r0, lsl #16
   335f8:	andeq	r3, r3, r0, lsl #16
   335fc:	andeq	r3, r3, r0, lsl #16
   33600:	andeq	r3, r3, r0, lsl #16
   33604:	andeq	r3, r3, r0, lsl #16
   33608:	andeq	r3, r3, r0, lsl #16
   3360c:	andeq	r3, r3, r0, lsl #16
   33610:	andeq	r3, r3, r0, lsl #16
   33614:	andeq	r3, r3, r0, lsl #16
   33618:	andeq	r3, r3, ip, lsl #24
   3361c:	andeq	r3, r3, ip, lsl #24
   33620:	andeq	r3, r3, r4, lsr #16
   33624:	andeq	r3, r3, ip, lsl #24
   33628:	andeq	r3, r3, r8, asr #16
   3362c:	andeq	r3, r3, ip, lsr #19
   33630:	andeq	r3, r3, ip, lsl #24
   33634:	andeq	r3, r3, ip, lsl #24
   33638:	muleq	r3, r0, r8
   3363c:	andeq	r3, r3, ip, lsl #24
   33640:	andeq	r3, r3, ip, lsl #24
   33644:	andeq	r3, r3, ip, lsl #24
   33648:	andeq	r3, r3, ip, lsl #24
   3364c:	andeq	r3, r3, ip, lsl #24
   33650:	andeq	r3, r3, ip, lsl #24
   33654:	andeq	r3, r3, ip, lsl #24
   33658:	andeq	r3, r3, ip, lsl #24
   3365c:	andeq	r3, r3, ip, lsl #24
   33660:	andeq	r3, r3, ip, lsl #24
   33664:	andeq	r3, r3, ip, lsl #24
   33668:	andeq	r3, r3, ip, lsl #24
   3366c:	andeq	r3, r3, ip, lsl #24
   33670:	andeq	r3, r3, ip, lsl #24
   33674:	andeq	r3, r3, ip, lsl #24
   33678:	andeq	r3, r3, ip, lsl #24
   3367c:	strdeq	r3, [r3], -ip
   33680:	andeq	r3, r3, ip, lsl #24
   33684:	andeq	r3, r3, ip, lsl #24
   33688:	andeq	r3, r3, ip, lsl #24
   3368c:	andeq	r3, r3, ip, asr #17
   33690:	andeq	r3, r3, ip, lsl #24
   33694:	andeq	r3, r3, ip, lsl #24
   33698:	andeq	r3, r3, ip, lsl #24
   3369c:	andeq	r3, r3, ip, lsl #24
   336a0:	andeq	r3, r3, ip, lsl #24
   336a4:	andeq	r3, r3, ip, lsl #24
   336a8:	andeq	r3, r3, ip, lsl #24
   336ac:	andeq	r3, r3, ip, lsl #24
   336b0:	andeq	r3, r3, r4, lsl r9
   336b4:	andeq	r3, r3, ip, lsl #24
   336b8:	andeq	r3, r3, ip, ror #16
   336bc:	andeq	r3, r3, ip, lsl #24
   336c0:	andeq	r3, r3, ip, lsl #24
   336c4:	andeq	r3, r3, ip, lsl #24
   336c8:	andeq	r3, r3, ip, lsl #24
   336cc:	andeq	r3, r3, ip, lsl #24
   336d0:	andeq	r3, r3, ip, lsl #24
   336d4:	andeq	r3, r3, ip, lsl #24
   336d8:	andeq	r3, r3, ip, lsl #24
   336dc:	andeq	r3, r3, ip, lsl #24
   336e0:	andeq	r3, r3, ip, lsl #24
   336e4:	andeq	r3, r3, ip, lsl #24
   336e8:	andeq	r3, r3, ip, lsl #24
   336ec:	andeq	r3, r3, ip, lsl #24
   336f0:	andeq	r3, r3, ip, lsl #24
   336f4:	andeq	r3, r3, ip, lsl #24
   336f8:	andeq	r3, r3, ip, lsl #24
   336fc:	andeq	r3, r3, r4, ror #17
   33700:	andeq	r3, r3, ip, lsl #24
   33704:	andeq	r3, r3, ip, lsl #24
   33708:	andeq	r3, r3, ip, lsl #24
   3370c:			; <UNDEFINED> instruction: 0x000338b4
   33710:	andeq	r3, r3, ip, lsl #24
   33714:	andeq	r3, r3, ip, lsl #24
   33718:	andeq	r3, r3, ip, lsl #24
   3371c:	andeq	r3, r3, ip, asr #19
   33720:	andeq	r3, r3, r8, ror #15
   33724:	andeq	r3, r3, r8, ror #19
   33728:	mov	r3, #36	; 0x24
   3372c:	strb	r3, [r5, #4]
   33730:	mov	r0, #1
   33734:	b	3353c <__assert_fail@plt+0x20f78>
   33738:	cmp	r3, #1
   3373c:	ble	33774 <__assert_fail@plt+0x211b0>
   33740:	ldr	r3, [r4, #8]
   33744:	lsl	ip, r2, #2
   33748:	ldr	r0, [r3, r2, lsl #2]
   3374c:	cmn	r0, #1
   33750:	beq	337a8 <__assert_fail@plt+0x211e4>
   33754:	add	r1, r1, #2
   33758:	ldr	r0, [r4, #28]
   3375c:	cmp	r0, r1
   33760:	beq	33774 <__assert_fail@plt+0x211b0>
   33764:	add	r3, r3, ip
   33768:	ldr	r3, [r3, #4]
   3376c:	cmn	r3, #1
   33770:	beq	337a8 <__assert_fail@plt+0x211e4>
   33774:	ldrb	r3, [r4, #76]	; 0x4c
   33778:	cmp	r3, #0
   3377c:	beq	33c1c <__assert_fail@plt+0x21658>
   33780:	ldr	r1, [r4, #12]
   33784:	ldr	r3, [r4]
   33788:	ldr	r0, [r1, r2, lsl #2]
   3378c:	ldr	r1, [r4, #24]
   33790:	add	r3, r3, r0
   33794:	ldrb	r6, [r3, r1]
   33798:	bics	r3, r6, #127	; 0x7f
   3379c:	ldrne	r3, [r4, #4]
   337a0:	ldrbne	r6, [r3, r2]
   337a4:	b	3356c <__assert_fail@plt+0x20fa8>
   337a8:	ldr	r3, [r4, #4]
   337ac:	ldrb	r6, [r3, r2]
   337b0:	b	3356c <__assert_fail@plt+0x20fa8>
   337b4:	bl	12288 <__ctype_b_loc@plt>
   337b8:	ldr	r2, [r0]
   337bc:	lsl	r3, r6, #1
   337c0:	ldrh	r3, [r2, r3]
   337c4:	lsr	r3, r3, #3
   337c8:	and	r3, r3, #1
   337cc:	ldrb	r2, [r5, #6]
   337d0:	cmp	r6, #95	; 0x5f
   337d4:	orreq	r3, r3, #1
   337d8:	bic	r2, r2, #64	; 0x40
   337dc:	orr	r3, r2, r3, lsl #6
   337e0:	strb	r3, [r5, #6]
   337e4:	b	335bc <__assert_fail@plt+0x20ff8>
   337e8:	tst	r7, #33792	; 0x8400
   337ec:	movne	r0, #2
   337f0:	moveq	r3, #10
   337f4:	strbeq	r3, [r5, #4]
   337f8:	moveq	r0, #2
   337fc:	b	3353c <__assert_fail@plt+0x20f78>
   33800:	tst	r7, #16384	; 0x4000
   33804:	movne	r0, #2
   33808:	bne	3353c <__assert_fail@plt+0x20f78>
   3380c:	mov	r3, #4
   33810:	strb	r3, [r5, #4]
   33814:	sub	r6, r6, #49	; 0x31
   33818:	str	r6, [r5]
   3381c:	mov	r0, #2
   33820:	b	3353c <__assert_fail@plt+0x20f78>
   33824:	tst	r7, #524288	; 0x80000
   33828:	movne	r0, #2
   3382c:	bne	3353c <__assert_fail@plt+0x20f78>
   33830:	mov	r3, #12
   33834:	strb	r3, [r5, #4]
   33838:	mov	r3, #6
   3383c:	str	r3, [r5]
   33840:	mov	r0, #2
   33844:	b	3353c <__assert_fail@plt+0x20f78>
   33848:	tst	r7, #524288	; 0x80000
   3384c:	movne	r0, #2
   33850:	bne	3353c <__assert_fail@plt+0x20f78>
   33854:	mov	r3, #12
   33858:	strb	r3, [r5, #4]
   3385c:	mov	r3, #9
   33860:	str	r3, [r5]
   33864:	mov	r0, #2
   33868:	b	3353c <__assert_fail@plt+0x20f78>
   3386c:	tst	r7, #524288	; 0x80000
   33870:	movne	r0, #2
   33874:	bne	3353c <__assert_fail@plt+0x20f78>
   33878:	mov	r3, #12
   3387c:	strb	r3, [r5, #4]
   33880:	mov	r3, #256	; 0x100
   33884:	str	r3, [r5]
   33888:	mov	r0, #2
   3388c:	b	3353c <__assert_fail@plt+0x20f78>
   33890:	tst	r7, #524288	; 0x80000
   33894:	movne	r0, #2
   33898:	bne	3353c <__assert_fail@plt+0x20f78>
   3389c:	mov	r3, #12
   338a0:	strb	r3, [r5, #4]
   338a4:	mov	r3, #512	; 0x200
   338a8:	str	r3, [r5]
   338ac:	mov	r0, #2
   338b0:	b	3353c <__assert_fail@plt+0x20f78>
   338b4:	tst	r7, #524288	; 0x80000
   338b8:	movne	r0, #2
   338bc:	moveq	r3, #32
   338c0:	strbeq	r3, [r5, #4]
   338c4:	moveq	r0, #2
   338c8:	b	3353c <__assert_fail@plt+0x20f78>
   338cc:	tst	r7, #524288	; 0x80000
   338d0:	movne	r0, #2
   338d4:	moveq	r3, #33	; 0x21
   338d8:	strbeq	r3, [r5, #4]
   338dc:	moveq	r0, #2
   338e0:	b	3353c <__assert_fail@plt+0x20f78>
   338e4:	tst	r7, #524288	; 0x80000
   338e8:	movne	r0, #2
   338ec:	moveq	r3, #34	; 0x22
   338f0:	strbeq	r3, [r5, #4]
   338f4:	moveq	r0, #2
   338f8:	b	3353c <__assert_fail@plt+0x20f78>
   338fc:	tst	r7, #524288	; 0x80000
   33900:	movne	r0, #2
   33904:	moveq	r3, #35	; 0x23
   33908:	strbeq	r3, [r5, #4]
   3390c:	moveq	r0, #2
   33910:	b	3353c <__assert_fail@plt+0x20f78>
   33914:	tst	r7, #524288	; 0x80000
   33918:	movne	r0, #2
   3391c:	bne	3353c <__assert_fail@plt+0x20f78>
   33920:	mov	r3, #12
   33924:	strb	r3, [r5, #4]
   33928:	mov	r3, #64	; 0x40
   3392c:	str	r3, [r5]
   33930:	mov	r0, #2
   33934:	b	3353c <__assert_fail@plt+0x20f78>
   33938:	tst	r7, #524288	; 0x80000
   3393c:	movne	r0, #2
   33940:	bne	3353c <__assert_fail@plt+0x20f78>
   33944:	mov	r3, #12
   33948:	strb	r3, [r5, #4]
   3394c:	mov	r3, #128	; 0x80
   33950:	str	r3, [r5]
   33954:	mov	r0, #2
   33958:	b	3353c <__assert_fail@plt+0x20f78>
   3395c:	tst	r7, #8192	; 0x2000
   33960:	movne	r0, #2
   33964:	moveq	r3, #8
   33968:	strbeq	r3, [r5, #4]
   3396c:	moveq	r0, #2
   33970:	b	3353c <__assert_fail@plt+0x20f78>
   33974:	tst	r7, #8192	; 0x2000
   33978:	movne	r0, #2
   3397c:	moveq	r3, #9
   33980:	strbeq	r3, [r5, #4]
   33984:	moveq	r0, #2
   33988:	b	3353c <__assert_fail@plt+0x20f78>
   3398c:	ldr	r3, [pc, #668]	; 33c30 <__assert_fail@plt+0x2166c>
   33990:	and	r3, r3, r7
   33994:	cmp	r3, #2
   33998:	moveq	r3, #18
   3399c:	strbeq	r3, [r5, #4]
   339a0:	moveq	r0, #2
   339a4:	movne	r0, #2
   339a8:	b	3353c <__assert_fail@plt+0x20f78>
   339ac:	ldr	r3, [pc, #636]	; 33c30 <__assert_fail@plt+0x2166c>
   339b0:	and	r3, r3, r7
   339b4:	cmp	r3, #2
   339b8:	moveq	r3, #19
   339bc:	strbeq	r3, [r5, #4]
   339c0:	moveq	r0, #2
   339c4:	movne	r0, #2
   339c8:	b	3353c <__assert_fail@plt+0x20f78>
   339cc:	and	r7, r7, #4608	; 0x1200
   339d0:	cmp	r7, #512	; 0x200
   339d4:	moveq	r3, #23
   339d8:	strbeq	r3, [r5, #4]
   339dc:	moveq	r0, #2
   339e0:	movne	r0, #2
   339e4:	b	3353c <__assert_fail@plt+0x20f78>
   339e8:	and	r7, r7, #4608	; 0x1200
   339ec:	cmp	r7, #512	; 0x200
   339f0:	moveq	r3, #24
   339f4:	strbeq	r3, [r5, #4]
   339f8:	moveq	r0, #2
   339fc:	movne	r0, #2
   33a00:	b	3353c <__assert_fail@plt+0x20f78>
   33a04:	bl	12288 <__ctype_b_loc@plt>
   33a08:	ldr	r2, [r0]
   33a0c:	lsl	r3, r6, #1
   33a10:	ldrh	r3, [r2, r3]
   33a14:	lsr	r3, r3, #3
   33a18:	and	r3, r3, #1
   33a1c:	ldrb	r2, [r5, #6]
   33a20:	cmp	r6, #95	; 0x5f
   33a24:	orreq	r3, r3, #1
   33a28:	bic	r2, r2, #64	; 0x40
   33a2c:	orr	r3, r2, r3, lsl #6
   33a30:	strb	r3, [r5, #6]
   33a34:	b	33334 <__assert_fail@plt+0x20d70>
   33a38:	tst	r7, #2048	; 0x800
   33a3c:	moveq	r0, #1
   33a40:	movne	r3, #10
   33a44:	strbne	r3, [r5, #4]
   33a48:	movne	r0, #1
   33a4c:	b	3353c <__assert_fail@plt+0x20f78>
   33a50:	and	r7, r7, #33792	; 0x8400
   33a54:	cmp	r7, #32768	; 0x8000
   33a58:	moveq	r3, #10
   33a5c:	strbeq	r3, [r5, #4]
   33a60:	moveq	r0, #1
   33a64:	movne	r0, #1
   33a68:	b	3353c <__assert_fail@plt+0x20f78>
   33a6c:	mov	r3, #11
   33a70:	strb	r3, [r5, #4]
   33a74:	mov	r0, #1
   33a78:	b	3353c <__assert_fail@plt+0x20f78>
   33a7c:	ldr	r3, [pc, #428]	; 33c30 <__assert_fail@plt+0x2166c>
   33a80:	and	r3, r3, r7
   33a84:	cmp	r3, #0
   33a88:	movne	r0, #1
   33a8c:	moveq	r3, #18
   33a90:	strbeq	r3, [r5, #4]
   33a94:	moveq	r0, #1
   33a98:	b	3353c <__assert_fail@plt+0x20f78>
   33a9c:	ldr	r3, [pc, #396]	; 33c30 <__assert_fail@plt+0x2166c>
   33aa0:	and	r3, r3, r7
   33aa4:	cmp	r3, #0
   33aa8:	movne	r0, #1
   33aac:	moveq	r3, #19
   33ab0:	strbeq	r3, [r5, #4]
   33ab4:	moveq	r0, #1
   33ab8:	b	3353c <__assert_fail@plt+0x20f78>
   33abc:	and	r7, r7, #4608	; 0x1200
   33ac0:	cmp	r7, #4608	; 0x1200
   33ac4:	moveq	r3, #23
   33ac8:	strbeq	r3, [r5, #4]
   33acc:	moveq	r0, #1
   33ad0:	movne	r0, #1
   33ad4:	b	3353c <__assert_fail@plt+0x20f78>
   33ad8:	and	r7, r7, #4608	; 0x1200
   33adc:	cmp	r7, #4608	; 0x1200
   33ae0:	moveq	r3, #24
   33ae4:	strbeq	r3, [r5, #4]
   33ae8:	moveq	r0, #1
   33aec:	movne	r0, #1
   33af0:	b	3353c <__assert_fail@plt+0x20f78>
   33af4:	tst	r7, #8192	; 0x2000
   33af8:	moveq	r0, #1
   33afc:	movne	r3, #8
   33b00:	strbne	r3, [r5, #4]
   33b04:	movne	r0, #1
   33b08:	b	3353c <__assert_fail@plt+0x20f78>
   33b0c:	tst	r7, #8192	; 0x2000
   33b10:	moveq	r0, #1
   33b14:	movne	r3, #9
   33b18:	strbne	r3, [r5, #4]
   33b1c:	movne	r0, #1
   33b20:	b	3353c <__assert_fail@plt+0x20f78>
   33b24:	mov	r3, #20
   33b28:	strb	r3, [r5, #4]
   33b2c:	mov	r0, #1
   33b30:	b	3353c <__assert_fail@plt+0x20f78>
   33b34:	mov	r3, #5
   33b38:	strb	r3, [r5, #4]
   33b3c:	mov	r0, #1
   33b40:	b	3353c <__assert_fail@plt+0x20f78>
   33b44:	ldr	r3, [pc, #232]	; 33c34 <__assert_fail@plt+0x21670>
   33b48:	and	r3, r3, r7
   33b4c:	cmp	r3, #0
   33b50:	bne	33b88 <__assert_fail@plt+0x215c4>
   33b54:	ldr	r3, [r4, #40]	; 0x28
   33b58:	cmp	r3, #0
   33b5c:	beq	33b88 <__assert_fail@plt+0x215c4>
   33b60:	ldr	r2, [r4, #4]
   33b64:	add	r3, r2, r3
   33b68:	ldrb	r2, [r3, #-1]
   33b6c:	lsr	r3, r7, #11
   33b70:	eor	r3, r3, #1
   33b74:	cmp	r2, #10
   33b78:	orrne	r3, r3, #1
   33b7c:	tst	r3, #1
   33b80:	movne	r0, #1
   33b84:	bne	3353c <__assert_fail@plt+0x20f78>
   33b88:	mov	r3, #12
   33b8c:	strb	r3, [r5, #4]
   33b90:	mov	r3, #16
   33b94:	str	r3, [r5]
   33b98:	mov	r0, #1
   33b9c:	b	3353c <__assert_fail@plt+0x20f78>
   33ba0:	tst	r7, #8
   33ba4:	bne	33bf4 <__assert_fail@plt+0x21630>
   33ba8:	ldr	r3, [r4, #40]	; 0x28
   33bac:	add	r3, r3, #1
   33bb0:	ldr	r2, [r4, #48]	; 0x30
   33bb4:	cmp	r3, r2
   33bb8:	beq	33bf4 <__assert_fail@plt+0x21630>
   33bbc:	str	r3, [r4, #40]	; 0x28
   33bc0:	mov	r2, r7
   33bc4:	mov	r1, r4
   33bc8:	mov	r0, sp
   33bcc:	bl	3327c <__assert_fail@plt+0x20cb8>
   33bd0:	ldr	r3, [r4, #40]	; 0x28
   33bd4:	sub	r3, r3, #1
   33bd8:	str	r3, [r4, #40]	; 0x28
   33bdc:	ldrb	r3, [sp, #4]
   33be0:	sub	r3, r3, #9
   33be4:	uxtb	r3, r3
   33be8:	cmp	r3, #1
   33bec:	movhi	r0, #1
   33bf0:	bhi	3353c <__assert_fail@plt+0x20f78>
   33bf4:	mov	r3, #12
   33bf8:	strb	r3, [r5, #4]
   33bfc:	mov	r3, #32
   33c00:	str	r3, [r5]
   33c04:	mov	r0, #1
   33c08:	b	3353c <__assert_fail@plt+0x20f78>
   33c0c:	mov	r0, #2
   33c10:	b	3353c <__assert_fail@plt+0x20f78>
   33c14:	mov	r0, #1
   33c18:	b	3353c <__assert_fail@plt+0x20f78>
   33c1c:	ldr	r3, [r4]
   33c20:	ldr	r1, [r4, #24]
   33c24:	add	r2, r3, r2
   33c28:	ldrb	r6, [r2, r1]
   33c2c:	b	3356c <__assert_fail@plt+0x20fa8>
   33c30:	andeq	r0, r0, r2, lsl #8
   33c34:	addeq	r0, r0, r8
   33c38:	push	{r4, lr}
   33c3c:	mov	r4, r1
   33c40:	bl	3327c <__assert_fail@plt+0x20cb8>
   33c44:	ldr	r3, [r4, #40]	; 0x28
   33c48:	add	r0, r3, r0
   33c4c:	str	r0, [r4, #40]	; 0x28
   33c50:	pop	{r4, pc}
   33c54:	push	{r4, r5, r6, r7, r8, lr}
   33c58:	mov	r7, r0
   33c5c:	mov	r4, r1
   33c60:	mov	r6, r2
   33c64:	mvn	r5, #0
   33c68:	mov	r2, r6
   33c6c:	mov	r1, r7
   33c70:	mov	r0, r4
   33c74:	bl	33c38 <__assert_fail@plt+0x21674>
   33c78:	ldrb	r2, [r4]
   33c7c:	ldrb	r3, [r4, #4]
   33c80:	cmp	r3, #2
   33c84:	beq	33cec <__assert_fail@plt+0x21728>
   33c88:	cmp	r3, #24
   33c8c:	cmpne	r2, #44	; 0x2c
   33c90:	beq	33cf0 <__assert_fail@plt+0x2172c>
   33c94:	cmp	r3, #1
   33c98:	mvnne	r5, #1
   33c9c:	bne	33c68 <__assert_fail@plt+0x216a4>
   33ca0:	sub	r3, r2, #48	; 0x30
   33ca4:	uxtb	r3, r3
   33ca8:	cmp	r3, #9
   33cac:	movhi	r3, #0
   33cb0:	movls	r3, #1
   33cb4:	cmn	r5, #2
   33cb8:	moveq	r3, #0
   33cbc:	cmp	r3, #0
   33cc0:	mvneq	r5, #1
   33cc4:	beq	33c68 <__assert_fail@plt+0x216a4>
   33cc8:	cmn	r5, #1
   33ccc:	subeq	r5, r2, #48	; 0x30
   33cd0:	beq	33c68 <__assert_fail@plt+0x216a4>
   33cd4:	add	r5, r5, r5, lsl #2
   33cd8:	add	r2, r2, r5, lsl #1
   33cdc:	sub	r5, r2, #48	; 0x30
   33ce0:	cmp	r5, #32768	; 0x8000
   33ce4:	movge	r5, #32768	; 0x8000
   33ce8:	b	33c68 <__assert_fail@plt+0x216a4>
   33cec:	mvn	r5, #1
   33cf0:	mov	r0, r5
   33cf4:	pop	{r4, r5, r6, r7, r8, pc}
   33cf8:	push	{r4, lr}
   33cfc:	mov	r4, r0
   33d00:	ldr	r0, [r0]
   33d04:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33d08:	ldr	r0, [r4, #4]
   33d0c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33d10:	ldr	r0, [r4, #8]
   33d14:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33d18:	ldr	r0, [r4, #12]
   33d1c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33d20:	mov	r0, r4
   33d24:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33d28:	pop	{r4, pc}
   33d2c:	push	{r4, lr}
   33d30:	ldr	r2, [r0, #4]
   33d34:	ldr	r3, [pc, #40]	; 33d64 <__assert_fail@plt+0x217a0>
   33d38:	and	r3, r3, r2
   33d3c:	cmp	r3, #6
   33d40:	beq	33d58 <__assert_fail@plt+0x21794>
   33d44:	cmp	r3, #3
   33d48:	popne	{r4, pc}
   33d4c:	ldr	r0, [r0]
   33d50:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33d54:	pop	{r4, pc}
   33d58:	ldr	r0, [r0]
   33d5c:	bl	33cf8 <__assert_fail@plt+0x21734>
   33d60:	pop	{r4, pc}
   33d64:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   33d68:	push	{r4, lr}
   33d6c:	add	r0, r1, #20
   33d70:	bl	33d2c <__assert_fail@plt+0x21768>
   33d74:	mov	r0, #0
   33d78:	pop	{r4, pc}
   33d7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33d80:	sub	sp, sp, #8
   33d84:	mov	r4, r0
   33d88:	add	r3, sp, #8
   33d8c:	stmdb	r3, {r1, r2}
   33d90:	ldrb	r5, [sp, #4]
   33d94:	ldr	r3, [r0, #4]
   33d98:	ldr	r2, [r0, #8]
   33d9c:	cmp	r2, r3
   33da0:	bcs	33e74 <__assert_fail@plt+0x218b0>
   33da4:	ldr	r2, [r4, #8]
   33da8:	ldr	r3, [r4]
   33dac:	add	r3, r3, r2, lsl #3
   33db0:	add	r2, sp, #8
   33db4:	ldmdb	r2, {r0, r1}
   33db8:	stm	r3, {r0, r1}
   33dbc:	ldr	r3, [r4, #8]
   33dc0:	ldr	r2, [r4]
   33dc4:	add	r2, r2, r3, lsl #3
   33dc8:	ldr	r3, [r2, #4]
   33dcc:	bic	r3, r3, #261120	; 0x3fc00
   33dd0:	bic	r3, r3, #768	; 0x300
   33dd4:	str	r3, [r2, #4]
   33dd8:	ldr	r3, [r4, #8]
   33ddc:	ldr	r2, [r4]
   33de0:	add	r2, r2, r3, lsl #3
   33de4:	cmp	r5, #5
   33de8:	beq	33f40 <__assert_fail@plt+0x2197c>
   33dec:	cmp	r5, #6
   33df0:	movne	r5, #0
   33df4:	moveq	r5, #1
   33df8:	ldrb	r3, [r2, #6]
   33dfc:	and	r5, r5, #1
   33e00:	bic	r3, r3, #16
   33e04:	orr	r5, r3, r5, lsl #4
   33e08:	strb	r5, [r2, #6]
   33e0c:	ldr	r2, [r4, #8]
   33e10:	ldr	r3, [r4, #12]
   33e14:	mvn	r1, #0
   33e18:	str	r1, [r3, r2, lsl #2]
   33e1c:	ldr	r3, [r4, #8]
   33e20:	add	r3, r3, r3, lsl #1
   33e24:	lsl	r3, r3, #2
   33e28:	ldr	r0, [r4, #20]
   33e2c:	add	r1, r0, r3
   33e30:	mov	r2, #0
   33e34:	str	r2, [r0, r3]
   33e38:	str	r2, [r1, #4]
   33e3c:	str	r2, [r1, #8]
   33e40:	ldr	r3, [r4, #8]
   33e44:	add	r3, r3, r3, lsl #1
   33e48:	lsl	r3, r3, #2
   33e4c:	ldr	r0, [r4, #24]
   33e50:	add	r1, r0, r3
   33e54:	str	r2, [r0, r3]
   33e58:	str	r2, [r1, #4]
   33e5c:	str	r2, [r1, #8]
   33e60:	ldr	r0, [r4, #8]
   33e64:	add	r3, r0, #1
   33e68:	str	r3, [r4, #8]
   33e6c:	add	sp, sp, #8
   33e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33e74:	lsl	r6, r3, #1
   33e78:	ldr	r3, [pc, #228]	; 33f64 <__assert_fail@plt+0x219a0>
   33e7c:	cmp	r6, r3
   33e80:	bhi	33f54 <__assert_fail@plt+0x21990>
   33e84:	lsl	r1, r6, #3
   33e88:	ldr	r0, [r0]
   33e8c:	bl	31320 <__assert_fail@plt+0x1ed5c>
   33e90:	cmp	r0, #0
   33e94:	beq	33f5c <__assert_fail@plt+0x21998>
   33e98:	str	r0, [r4]
   33e9c:	lsl	r7, r6, #2
   33ea0:	mov	r1, r7
   33ea4:	ldr	r0, [r4, #12]
   33ea8:	bl	31320 <__assert_fail@plt+0x1ed5c>
   33eac:	mov	r9, r0
   33eb0:	mov	r1, r7
   33eb4:	ldr	r0, [r4, #16]
   33eb8:	bl	31320 <__assert_fail@plt+0x1ed5c>
   33ebc:	mov	r8, r0
   33ec0:	add	r7, r6, r6, lsl #1
   33ec4:	lsl	r7, r7, #2
   33ec8:	mov	r1, r7
   33ecc:	ldr	r0, [r4, #20]
   33ed0:	bl	31320 <__assert_fail@plt+0x1ed5c>
   33ed4:	mov	sl, r0
   33ed8:	mov	r1, r7
   33edc:	ldr	r0, [r4, #24]
   33ee0:	bl	31320 <__assert_fail@plt+0x1ed5c>
   33ee4:	mov	r7, r0
   33ee8:	cmp	r8, #0
   33eec:	cmpne	r9, #0
   33ef0:	beq	33f18 <__assert_fail@plt+0x21954>
   33ef4:	cmp	r0, #0
   33ef8:	cmpne	sl, #0
   33efc:	beq	33f18 <__assert_fail@plt+0x21954>
   33f00:	str	r9, [r4, #12]
   33f04:	str	r8, [r4, #16]
   33f08:	str	sl, [r4, #20]
   33f0c:	str	r0, [r4, #24]
   33f10:	str	r6, [r4, #4]
   33f14:	b	33da4 <__assert_fail@plt+0x217e0>
   33f18:	mov	r0, r9
   33f1c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33f20:	mov	r0, r8
   33f24:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33f28:	mov	r0, sl
   33f2c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33f30:	mov	r0, r7
   33f34:	bl	2e3fc <__assert_fail@plt+0x1be38>
   33f38:	mvn	r0, #0
   33f3c:	b	33e6c <__assert_fail@plt+0x218a8>
   33f40:	ldr	r3, [r4, #92]	; 0x5c
   33f44:	cmp	r3, #1
   33f48:	movgt	r5, #1
   33f4c:	bgt	33df8 <__assert_fail@plt+0x21834>
   33f50:	b	33dec <__assert_fail@plt+0x21828>
   33f54:	mvn	r0, #0
   33f58:	b	33e6c <__assert_fail@plt+0x218a8>
   33f5c:	mvn	r0, #0
   33f60:	b	33e6c <__assert_fail@plt+0x218a8>
   33f64:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   33f68:	ldrb	r3, [r1, #24]
   33f6c:	cmp	r3, #16
   33f70:	beq	33fb0 <__assert_fail@plt+0x219ec>
   33f74:	push	{r4, r5, r6, lr}
   33f78:	mov	r4, r1
   33f7c:	mov	r5, r0
   33f80:	str	r1, [r4, #12]
   33f84:	add	r3, r1, #20
   33f88:	ldm	r3, {r1, r2}
   33f8c:	bl	33d7c <__assert_fail@plt+0x217b8>
   33f90:	str	r0, [r4, #28]
   33f94:	cmn	r0, #1
   33f98:	beq	33ff8 <__assert_fail@plt+0x21a34>
   33f9c:	ldrb	r3, [r4, #24]
   33fa0:	cmp	r3, #12
   33fa4:	beq	33fcc <__assert_fail@plt+0x21a08>
   33fa8:	mov	r0, #0
   33fac:	pop	{r4, r5, r6, pc}
   33fb0:	ldr	r3, [r1, #4]
   33fb4:	ldr	r2, [r3, #12]
   33fb8:	str	r2, [r1, #12]
   33fbc:	ldr	r3, [r3, #28]
   33fc0:	str	r3, [r1, #28]
   33fc4:	mov	r0, #0
   33fc8:	bx	lr
   33fcc:	ldr	r3, [r5]
   33fd0:	ldr	r2, [r4, #20]
   33fd4:	add	r0, r3, r0, lsl #3
   33fd8:	ldr	r3, [r0, #4]
   33fdc:	ldr	r1, [pc, #28]	; 34000 <__assert_fail@plt+0x21a3c>
   33fe0:	and	r2, r2, r1
   33fe4:	bic	r3, r3, r1, lsl #8
   33fe8:	orr	r3, r3, r2, lsl #8
   33fec:	str	r3, [r0, #4]
   33ff0:	mov	r0, #0
   33ff4:	pop	{r4, r5, r6, pc}
   33ff8:	mov	r0, #12
   33ffc:	pop	{r4, r5, r6, pc}
   34000:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   34004:	push	{r4, r5, r6, r7, r8, lr}
   34008:	mov	r4, r0
   3400c:	mov	r5, r1
   34010:	mov	r7, r2
   34014:	lsl	r6, r1, #3
   34018:	ldr	r3, [r0]
   3401c:	add	r3, r3, r6
   34020:	ldm	r3, {r1, r2}
   34024:	bl	33d7c <__assert_fail@plt+0x217b8>
   34028:	cmn	r0, #1
   3402c:	popeq	{r4, r5, r6, r7, r8, pc}
   34030:	lsl	r1, r0, #3
   34034:	ldr	r2, [r4]
   34038:	add	r2, r2, r1
   3403c:	ldr	r3, [r2, #4]
   34040:	ldr	ip, [pc, #96]	; 340a8 <__assert_fail@plt+0x21ae4>
   34044:	and	r7, r7, ip
   34048:	lsl	ip, ip, #8
   3404c:	bic	r3, r3, ip
   34050:	orr	r3, r3, r7, lsl #8
   34054:	str	r3, [r2, #4]
   34058:	ldr	r3, [r4]
   3405c:	add	lr, r3, r1
   34060:	add	r6, r3, r6
   34064:	ldr	r2, [r6, #4]
   34068:	lsl	r6, r2, #14
   3406c:	ldr	r3, [lr, #4]
   34070:	lsl	r2, r3, #14
   34074:	lsr	r2, r2, #22
   34078:	orr	r2, r2, r6, lsr #22
   3407c:	bic	r3, r3, ip
   34080:	orr	r3, r3, r2, lsl #8
   34084:	str	r3, [lr, #4]
   34088:	ldr	r3, [r4]
   3408c:	add	r1, r3, r1
   34090:	ldrb	r3, [r1, #6]
   34094:	orr	r3, r3, #4
   34098:	strb	r3, [r1, #6]
   3409c:	ldr	r3, [r4, #16]
   340a0:	str	r5, [r3, r0, lsl #2]
   340a4:	pop	{r4, r5, r6, r7, r8, pc}
   340a8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   340ac:	push	{r4, lr}
   340b0:	mov	r4, r0
   340b4:	ldr	r0, [r0, #24]
   340b8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340bc:	ldr	r0, [r4, #36]	; 0x24
   340c0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340c4:	ldr	r3, [r4, #40]	; 0x28
   340c8:	add	r2, r4, #4
   340cc:	cmp	r3, r2
   340d0:	beq	340e4 <__assert_fail@plt+0x21b20>
   340d4:	ldr	r0, [r3, #8]
   340d8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340dc:	ldr	r0, [r4, #40]	; 0x28
   340e0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340e4:	ldr	r0, [r4, #12]
   340e8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340ec:	ldr	r0, [r4, #48]	; 0x30
   340f0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340f4:	ldr	r0, [r4, #44]	; 0x2c
   340f8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   340fc:	mov	r0, r4
   34100:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34104:	pop	{r4, pc}
   34108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3410c:	sub	sp, sp, #20
   34110:	ldr	r5, [r2, #4]
   34114:	cmp	r5, #0
   34118:	moveq	r6, #0
   3411c:	streq	r6, [r0]
   34120:	beq	343d8 <__assert_fail@plt+0x21e14>
   34124:	add	r8, r3, r5
   34128:	cmp	r5, #0
   3412c:	ble	34148 <__assert_fail@plt+0x21b84>
   34130:	ldr	ip, [r2, #8]
   34134:	add	r5, ip, r5, lsl #2
   34138:	ldr	lr, [ip], #4
   3413c:	add	r8, r8, lr
   34140:	cmp	r5, ip
   34144:	bne	34138 <__assert_fail@plt+0x21b74>
   34148:	mov	r4, r3
   3414c:	mov	r7, r2
   34150:	mov	r9, r1
   34154:	str	r0, [sp, #12]
   34158:	ldr	r3, [r1, #68]	; 0x44
   3415c:	and	r3, r3, r8
   34160:	add	r3, r3, r3, lsl #1
   34164:	lsl	r3, r3, #2
   34168:	ldr	r2, [r1, #32]
   3416c:	add	r1, r2, r3
   34170:	ldr	fp, [r2, r3]
   34174:	cmp	fp, #0
   34178:	ble	341d0 <__assert_fail@plt+0x21c0c>
   3417c:	ldr	sl, [r1, #8]
   34180:	sub	sl, sl, #4
   34184:	mov	r5, #0
   34188:	b	34198 <__assert_fail@plt+0x21bd4>
   3418c:	add	r5, r5, #1
   34190:	cmp	r5, fp
   34194:	beq	341d0 <__assert_fail@plt+0x21c0c>
   34198:	ldr	r6, [sl, #4]!
   3419c:	ldr	r3, [r6]
   341a0:	cmp	r3, r8
   341a4:	bne	3418c <__assert_fail@plt+0x21bc8>
   341a8:	ldrb	r3, [r6, #52]	; 0x34
   341ac:	and	r3, r3, #15
   341b0:	cmp	r4, r3
   341b4:	bne	3418c <__assert_fail@plt+0x21bc8>
   341b8:	mov	r1, r7
   341bc:	ldr	r0, [r6, #40]	; 0x28
   341c0:	bl	314a0 <__assert_fail@plt+0x1eedc>
   341c4:	cmp	r0, #0
   341c8:	beq	3418c <__assert_fail@plt+0x21bc8>
   341cc:	b	343d8 <__assert_fail@plt+0x21e14>
   341d0:	mov	r1, #1
   341d4:	mov	r0, #56	; 0x38
   341d8:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   341dc:	subs	r6, r0, #0
   341e0:	beq	34250 <__assert_fail@plt+0x21c8c>
   341e4:	add	fp, r6, #4
   341e8:	mov	r1, r7
   341ec:	mov	r0, fp
   341f0:	bl	32d50 <__assert_fail@plt+0x2078c>
   341f4:	cmp	r0, #0
   341f8:	bne	34248 <__assert_fail@plt+0x21c84>
   341fc:	ldrb	r2, [r6, #52]	; 0x34
   34200:	and	r3, r4, #15
   34204:	bic	r2, r2, #15
   34208:	orr	r3, r3, r2
   3420c:	strb	r3, [r6, #52]	; 0x34
   34210:	str	fp, [r6, #40]	; 0x28
   34214:	ldr	r3, [r7, #4]
   34218:	cmp	r3, #0
   3421c:	ble	343c0 <__assert_fail@plt+0x21dfc>
   34220:	mov	sl, #0
   34224:	mov	r5, sl
   34228:	and	r3, r4, #4
   3422c:	str	r3, [sp, #4]
   34230:	and	r3, r4, #2
   34234:	str	r3, [sp]
   34238:	and	r3, r4, #1
   3423c:	str	r8, [sp, #8]
   34240:	mov	r8, r3
   34244:	b	3430c <__assert_fail@plt+0x21d48>
   34248:	mov	r0, r6
   3424c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34250:	mov	r3, #12
   34254:	ldr	r2, [sp, #12]
   34258:	str	r3, [r2]
   3425c:	mov	r6, #0
   34260:	b	343d8 <__assert_fail@plt+0x21e14>
   34264:	mov	r0, #12
   34268:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3426c:	cmp	r0, #0
   34270:	beq	3429c <__assert_fail@plt+0x21cd8>
   34274:	str	r0, [r6, #40]	; 0x28
   34278:	mov	r1, r7
   3427c:	bl	32d50 <__assert_fail@plt+0x2078c>
   34280:	cmp	r0, #0
   34284:	bne	342a8 <__assert_fail@plt+0x21ce4>
   34288:	ldrb	r3, [r6, #52]	; 0x34
   3428c:	orr	r3, r3, #128	; 0x80
   34290:	strb	r3, [r6, #52]	; 0x34
   34294:	mov	sl, #0
   34298:	b	343a0 <__assert_fail@plt+0x21ddc>
   3429c:	mov	r0, r6
   342a0:	bl	340ac <__assert_fail@plt+0x21ae8>
   342a4:	b	34250 <__assert_fail@plt+0x21c8c>
   342a8:	mov	r0, r6
   342ac:	bl	340ac <__assert_fail@plt+0x21ae8>
   342b0:	b	34250 <__assert_fail@plt+0x21c8c>
   342b4:	tst	r4, #2
   342b8:	beq	342c4 <__assert_fail@plt+0x21d00>
   342bc:	cmp	r8, #0
   342c0:	bne	342ec <__assert_fail@plt+0x21d28>
   342c4:	tst	r4, #16
   342c8:	beq	342d8 <__assert_fail@plt+0x21d14>
   342cc:	ldr	r3, [sp]
   342d0:	cmp	r3, #0
   342d4:	beq	342ec <__assert_fail@plt+0x21d28>
   342d8:	tst	r4, #64	; 0x40
   342dc:	beq	342fc <__assert_fail@plt+0x21d38>
   342e0:	ldr	r3, [sp, #4]
   342e4:	cmp	r3, #0
   342e8:	bne	342fc <__assert_fail@plt+0x21d38>
   342ec:	sub	r1, r5, sl
   342f0:	mov	r0, fp
   342f4:	bl	315ac <__assert_fail@plt+0x1efe8>
   342f8:	add	sl, sl, #1
   342fc:	add	r5, r5, #1
   34300:	ldr	r3, [r7, #4]
   34304:	cmp	r5, r3
   34308:	bge	343bc <__assert_fail@plt+0x21df8>
   3430c:	ldr	r3, [r7, #8]
   34310:	ldr	r2, [r3, r5, lsl #2]
   34314:	ldr	r3, [r9]
   34318:	add	r3, r3, r2, lsl #3
   3431c:	ldrb	r2, [r3, #4]
   34320:	ldr	r4, [r3, #4]
   34324:	lsl	r4, r4, #14
   34328:	lsrs	r4, r4, #22
   3432c:	moveq	r1, #1
   34330:	movne	r1, #0
   34334:	cmp	r2, #1
   34338:	movne	r1, #0
   3433c:	andeq	r1, r1, #1
   34340:	cmp	r1, #0
   34344:	bne	342fc <__assert_fail@plt+0x21d38>
   34348:	ldrb	r1, [r6, #52]	; 0x34
   3434c:	ldrb	r3, [r3, #6]
   34350:	lsr	r3, r3, #4
   34354:	orr	r3, r3, r1, lsr #5
   34358:	and	r3, r3, #1
   3435c:	bic	r1, r1, #32
   34360:	orr	r3, r1, r3, lsl #5
   34364:	strb	r3, [r6, #52]	; 0x34
   34368:	cmp	r2, #2
   3436c:	uxtbeq	r3, r3
   34370:	orreq	r3, r3, #16
   34374:	strbeq	r3, [r6, #52]	; 0x34
   34378:	beq	3438c <__assert_fail@plt+0x21dc8>
   3437c:	cmp	r2, #4
   34380:	ldrbeq	r3, [r6, #52]	; 0x34
   34384:	orreq	r3, r3, #64	; 0x40
   34388:	strbeq	r3, [r6, #52]	; 0x34
   3438c:	cmp	r4, #0
   34390:	beq	342fc <__assert_fail@plt+0x21d38>
   34394:	ldr	r3, [r6, #40]	; 0x28
   34398:	cmp	fp, r3
   3439c:	beq	34264 <__assert_fail@plt+0x21ca0>
   343a0:	tst	r4, #1
   343a4:	beq	342b4 <__assert_fail@plt+0x21cf0>
   343a8:	cmp	r8, #0
   343ac:	beq	342ec <__assert_fail@plt+0x21d28>
   343b0:	tst	r4, #2
   343b4:	bne	342ec <__assert_fail@plt+0x21d28>
   343b8:	b	342c4 <__assert_fail@plt+0x21d00>
   343bc:	ldr	r8, [sp, #8]
   343c0:	mov	r2, r8
   343c4:	mov	r1, r6
   343c8:	mov	r0, r9
   343cc:	bl	324f4 <__assert_fail@plt+0x1ff30>
   343d0:	cmp	r0, #0
   343d4:	bne	343e4 <__assert_fail@plt+0x21e20>
   343d8:	mov	r0, r6
   343dc:	add	sp, sp, #20
   343e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343e4:	mov	r0, r6
   343e8:	bl	340ac <__assert_fail@plt+0x21ae8>
   343ec:	b	34250 <__assert_fail@plt+0x21c8c>
   343f0:	push	{r4, r5, r6, lr}
   343f4:	ldr	r5, [r0]
   343f8:	ldr	r0, [r5, #56]	; 0x38
   343fc:	cmp	r0, #0
   34400:	beq	34418 <__assert_fail@plt+0x21e54>
   34404:	ldr	r4, [r0]
   34408:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3440c:	mov	r0, r4
   34410:	cmp	r4, #0
   34414:	bne	34404 <__assert_fail@plt+0x21e40>
   34418:	mov	r4, #0
   3441c:	str	r4, [r5, #56]	; 0x38
   34420:	mov	r3, #31
   34424:	str	r3, [r5, #64]	; 0x40
   34428:	str	r4, [r5, #52]	; 0x34
   3442c:	ldr	r0, [r5, #16]
   34430:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34434:	str	r4, [r5, #16]
   34438:	pop	{r4, r5, r6, pc}
   3443c:	push	{r4, lr}
   34440:	mov	r4, r0
   34444:	ldr	r0, [r0, #8]
   34448:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3444c:	ldr	r0, [r4, #12]
   34450:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34454:	ldrb	r3, [r4, #75]	; 0x4b
   34458:	cmp	r3, #0
   3445c:	popeq	{r4, pc}
   34460:	ldr	r0, [r4, #4]
   34464:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34468:	pop	{r4, pc}
   3446c:	push	{r4, r5, r6, r7, r8, lr}
   34470:	mov	r6, r0
   34474:	ldr	r3, [r0]
   34478:	cmp	r3, #0
   3447c:	beq	344ac <__assert_fail@plt+0x21ee8>
   34480:	ldr	r3, [r0, #8]
   34484:	cmp	r3, #0
   34488:	beq	344ac <__assert_fail@plt+0x21ee8>
   3448c:	mov	r4, #0
   34490:	ldr	r0, [r6]
   34494:	add	r0, r0, r4, lsl #3
   34498:	bl	33d2c <__assert_fail@plt+0x21768>
   3449c:	add	r4, r4, #1
   344a0:	ldr	r3, [r6, #8]
   344a4:	cmp	r3, r4
   344a8:	bhi	34490 <__assert_fail@plt+0x21ecc>
   344ac:	ldr	r0, [r6, #12]
   344b0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   344b4:	ldr	r3, [r6, #8]
   344b8:	cmp	r3, #0
   344bc:	beq	3452c <__assert_fail@plt+0x21f68>
   344c0:	mov	r4, #0
   344c4:	mov	r5, r4
   344c8:	b	344e0 <__assert_fail@plt+0x21f1c>
   344cc:	add	r5, r5, #1
   344d0:	add	r4, r4, #12
   344d4:	ldr	r3, [r6, #8]
   344d8:	cmp	r3, r5
   344dc:	bls	3452c <__assert_fail@plt+0x21f68>
   344e0:	ldr	r3, [r6, #24]
   344e4:	cmp	r3, #0
   344e8:	beq	344f8 <__assert_fail@plt+0x21f34>
   344ec:	add	r3, r3, r4
   344f0:	ldr	r0, [r3, #8]
   344f4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   344f8:	ldr	r3, [r6, #28]
   344fc:	cmp	r3, #0
   34500:	beq	34510 <__assert_fail@plt+0x21f4c>
   34504:	add	r3, r3, r4
   34508:	ldr	r0, [r3, #8]
   3450c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34510:	ldr	r3, [r6, #20]
   34514:	cmp	r3, #0
   34518:	beq	344cc <__assert_fail@plt+0x21f08>
   3451c:	add	r3, r3, r4
   34520:	ldr	r0, [r3, #8]
   34524:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34528:	b	344cc <__assert_fail@plt+0x21f08>
   3452c:	ldr	r0, [r6, #20]
   34530:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34534:	ldr	r0, [r6, #24]
   34538:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3453c:	ldr	r0, [r6, #28]
   34540:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34544:	ldr	r0, [r6]
   34548:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3454c:	ldr	r3, [r6, #32]
   34550:	cmp	r3, #0
   34554:	beq	345b0 <__assert_fail@plt+0x21fec>
   34558:	mov	r7, #0
   3455c:	mov	r8, r7
   34560:	ldr	r3, [r6, #32]
   34564:	add	r5, r3, r7
   34568:	ldr	r3, [r3, r7]
   3456c:	cmp	r3, #0
   34570:	ble	34594 <__assert_fail@plt+0x21fd0>
   34574:	mov	r4, #0
   34578:	ldr	r3, [r5, #8]
   3457c:	ldr	r0, [r3, r4, lsl #2]
   34580:	bl	340ac <__assert_fail@plt+0x21ae8>
   34584:	add	r4, r4, #1
   34588:	ldr	r3, [r5]
   3458c:	cmp	r3, r4
   34590:	bgt	34578 <__assert_fail@plt+0x21fb4>
   34594:	ldr	r0, [r5, #8]
   34598:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3459c:	add	r8, r8, #1
   345a0:	add	r7, r7, #12
   345a4:	ldr	r3, [r6, #68]	; 0x44
   345a8:	cmp	r3, r8
   345ac:	bcs	34560 <__assert_fail@plt+0x21f9c>
   345b0:	ldr	r0, [r6, #32]
   345b4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   345b8:	ldr	r0, [r6, #60]	; 0x3c
   345bc:	ldr	r3, [pc, #28]	; 345e0 <__assert_fail@plt+0x2201c>
   345c0:	cmp	r0, r3
   345c4:	beq	345cc <__assert_fail@plt+0x22008>
   345c8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   345cc:	ldr	r0, [r6, #132]	; 0x84
   345d0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   345d4:	mov	r0, r6
   345d8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   345dc:	pop	{r4, r5, r6, r7, r8, pc}
   345e0:	andeq	r8, r4, r0, asr #5
   345e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   345e8:	sub	sp, sp, #28
   345ec:	str	r3, [sp, #4]
   345f0:	add	r3, r1, r1, lsl #1
   345f4:	ldr	r6, [r0, #28]
   345f8:	add	r6, r6, r3, lsl #2
   345fc:	mov	r3, #0
   34600:	str	r3, [sp, #12]
   34604:	str	r3, [sp, #16]
   34608:	str	r3, [sp, #20]
   3460c:	ldr	r3, [r6, #4]
   34610:	cmp	r3, #0
   34614:	ble	34690 <__assert_fail@plt+0x220cc>
   34618:	mov	r7, r0
   3461c:	mov	r8, r1
   34620:	mov	fp, r2
   34624:	mov	r5, #0
   34628:	b	346fc <__assert_fail@plt+0x22138>
   3462c:	ldr	r0, [sp, #20]
   34630:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34634:	b	3469c <__assert_fail@plt+0x220d8>
   34638:	cmp	r3, #0
   3463c:	ble	34690 <__assert_fail@plt+0x220cc>
   34640:	mov	r4, #0
   34644:	b	34658 <__assert_fail@plt+0x22094>
   34648:	add	r4, r4, #1
   3464c:	ldr	r3, [r6, #4]
   34650:	cmp	r3, r4
   34654:	ble	34690 <__assert_fail@plt+0x220cc>
   34658:	ldr	r3, [r6, #8]
   3465c:	ldr	r5, [r3, r4, lsl #2]
   34660:	mov	r1, r5
   34664:	add	r0, sp, #12
   34668:	bl	31514 <__assert_fail@plt+0x1ef50>
   3466c:	cmp	r0, #0
   34670:	bne	34648 <__assert_fail@plt+0x22084>
   34674:	mov	r1, r5
   34678:	mov	r0, fp
   3467c:	bl	31514 <__assert_fail@plt+0x1ef50>
   34680:	sub	r1, r0, #1
   34684:	mov	r0, fp
   34688:	bl	315ac <__assert_fail@plt+0x1efe8>
   3468c:	b	34648 <__assert_fail@plt+0x22084>
   34690:	ldr	r0, [sp, #20]
   34694:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34698:	mov	r4, #0
   3469c:	mov	r0, r4
   346a0:	add	sp, sp, #28
   346a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   346a8:	mov	r1, r9
   346ac:	mov	r0, r6
   346b0:	bl	31514 <__assert_fail@plt+0x1ef50>
   346b4:	cmp	r0, #0
   346b8:	bne	346ec <__assert_fail@plt+0x22128>
   346bc:	mov	r1, r9
   346c0:	mov	r0, fp
   346c4:	bl	31514 <__assert_fail@plt+0x1ef50>
   346c8:	cmp	r0, #0
   346cc:	beq	346ec <__assert_fail@plt+0x22128>
   346d0:	ldr	r2, [r7, #28]
   346d4:	add	r2, r2, r4
   346d8:	ldr	r1, [sp, #4]
   346dc:	add	r0, sp, #12
   346e0:	bl	32f58 <__assert_fail@plt+0x20994>
   346e4:	subs	r4, r0, #0
   346e8:	bne	3462c <__assert_fail@plt+0x22068>
   346ec:	add	r5, r5, #1
   346f0:	ldr	r3, [r6, #4]
   346f4:	cmp	r3, r5
   346f8:	ble	34638 <__assert_fail@plt+0x22074>
   346fc:	ldr	r3, [r6, #8]
   34700:	ldr	r4, [r3, r5, lsl #2]
   34704:	cmp	r8, r4
   34708:	beq	346ec <__assert_fail@plt+0x22128>
   3470c:	ldr	r3, [r7]
   34710:	add	r3, r3, r4, lsl #3
   34714:	ldrb	r3, [r3, #4]
   34718:	tst	r3, #8
   3471c:	beq	346ec <__assert_fail@plt+0x22128>
   34720:	add	r4, r4, r4, lsl #1
   34724:	lsl	r4, r4, #2
   34728:	ldr	r3, [r7, #20]
   3472c:	add	r3, r3, r4
   34730:	ldr	r2, [r3, #8]
   34734:	ldr	r9, [r2]
   34738:	ldr	r3, [r3, #4]
   3473c:	cmp	r3, #1
   34740:	ble	346a8 <__assert_fail@plt+0x220e4>
   34744:	ldr	sl, [r2, #4]
   34748:	mov	r1, r9
   3474c:	mov	r0, r6
   34750:	bl	31514 <__assert_fail@plt+0x1ef50>
   34754:	cmp	r0, #0
   34758:	bne	34770 <__assert_fail@plt+0x221ac>
   3475c:	mov	r1, r9
   34760:	mov	r0, fp
   34764:	bl	31514 <__assert_fail@plt+0x1ef50>
   34768:	cmp	r0, #0
   3476c:	bne	346d0 <__assert_fail@plt+0x2210c>
   34770:	cmp	sl, #0
   34774:	ble	346ec <__assert_fail@plt+0x22128>
   34778:	mov	r1, sl
   3477c:	mov	r0, r6
   34780:	bl	31514 <__assert_fail@plt+0x1ef50>
   34784:	cmp	r0, #0
   34788:	bne	346ec <__assert_fail@plt+0x22128>
   3478c:	mov	r1, sl
   34790:	mov	r0, fp
   34794:	bl	31514 <__assert_fail@plt+0x1ef50>
   34798:	cmp	r0, #0
   3479c:	beq	346ec <__assert_fail@plt+0x22128>
   347a0:	b	346d0 <__assert_fail@plt+0x2210c>
   347a4:	push	{r4, r5, r6, r7, r8, lr}
   347a8:	mov	r8, r0
   347ac:	ldr	r3, [r0, #124]	; 0x7c
   347b0:	cmp	r3, #0
   347b4:	ble	34840 <__assert_fail@plt+0x2227c>
   347b8:	mov	r7, #0
   347bc:	b	347d8 <__assert_fail@plt+0x22214>
   347c0:	mov	r0, r6
   347c4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   347c8:	add	r7, r7, #1
   347cc:	ldr	r3, [r8, #124]	; 0x7c
   347d0:	cmp	r3, r7
   347d4:	ble	34840 <__assert_fail@plt+0x2227c>
   347d8:	ldr	r3, [r8, #132]	; 0x84
   347dc:	ldr	r6, [r3, r7, lsl #2]
   347e0:	ldr	r3, [r6, #16]
   347e4:	cmp	r3, #0
   347e8:	ble	34818 <__assert_fail@plt+0x22254>
   347ec:	mov	r4, #0
   347f0:	ldr	r3, [r6, #20]
   347f4:	ldr	r5, [r3, r4, lsl #2]
   347f8:	ldr	r0, [r5, #16]
   347fc:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34800:	mov	r0, r5
   34804:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34808:	add	r4, r4, #1
   3480c:	ldr	r3, [r6, #16]
   34810:	cmp	r3, r4
   34814:	bgt	347f0 <__assert_fail@plt+0x2222c>
   34818:	ldr	r0, [r6, #20]
   3481c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34820:	ldr	r3, [r6, #8]
   34824:	cmp	r3, #0
   34828:	beq	347c0 <__assert_fail@plt+0x221fc>
   3482c:	ldr	r0, [r3, #8]
   34830:	bl	2e3fc <__assert_fail@plt+0x1be38>
   34834:	ldr	r0, [r6, #8]
   34838:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3483c:	b	347c0 <__assert_fail@plt+0x221fc>
   34840:	mov	r3, #0
   34844:	str	r3, [r8, #124]	; 0x7c
   34848:	str	r3, [r8, #108]	; 0x6c
   3484c:	pop	{r4, r5, r6, r7, r8, pc}
   34850:	push	{r4, r5, r6, lr}
   34854:	mov	r4, r0
   34858:	ldr	r0, [r0, #8]
   3485c:	add	r5, r4, #12
   34860:	cmp	r0, r5
   34864:	beq	3486c <__assert_fail@plt+0x222a8>
   34868:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3486c:	mov	r3, #0
   34870:	str	r3, [r4]
   34874:	mov	r3, #16
   34878:	str	r3, [r4, #4]
   3487c:	str	r5, [r4, #8]
   34880:	pop	{r4, r5, r6, pc}
   34884:	push	{r4, r5, r6, lr}
   34888:	subs	r5, r0, #0
   3488c:	beq	348e0 <__assert_fail@plt+0x2231c>
   34890:	ldr	r3, [r5]
   34894:	cmp	r3, #0
   34898:	ble	348d8 <__assert_fail@plt+0x22314>
   3489c:	mov	r4, #0
   348a0:	mov	r6, r4
   348a4:	ldr	r3, [r5, #8]
   348a8:	add	r3, r3, r4
   348ac:	ldr	r0, [r3, #20]
   348b0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   348b4:	ldr	r3, [r5, #8]
   348b8:	add	r3, r3, r4
   348bc:	ldr	r0, [r3, #8]
   348c0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   348c4:	add	r6, r6, #1
   348c8:	add	r4, r4, #24
   348cc:	ldr	r3, [r5]
   348d0:	cmp	r3, r6
   348d4:	bgt	348a4 <__assert_fail@plt+0x222e0>
   348d8:	ldr	r0, [r5, #8]
   348dc:	bl	2e3fc <__assert_fail@plt+0x1be38>
   348e0:	mov	r0, #0
   348e4:	pop	{r4, r5, r6, pc}
   348e8:	push	{r4, r5, r6, lr}
   348ec:	ldr	r2, [r1, #28]
   348f0:	ldrb	r3, [r1, #24]
   348f4:	sub	r3, r3, #2
   348f8:	cmp	r3, #14
   348fc:	ldrls	pc, [pc, r3, lsl #2]
   34900:	b	34a3c <__assert_fail@plt+0x22478>
   34904:	andeq	r4, r3, r4, asr sl
   34908:	andeq	r4, r3, ip, lsr sl
   3490c:	strdeq	r4, [r3], -ip
   34910:	andeq	r4, r3, ip, lsr sl
   34914:	andeq	r4, r3, ip, lsr sl
   34918:	andeq	r4, r3, ip, lsr sl
   3491c:	andeq	r4, r3, r0, ror #19
   34920:	andeq	r4, r3, r0, ror #19
   34924:	andeq	r4, r3, r0, asr #18
   34928:	andeq	r4, r3, r0, asr #18
   3492c:	andeq	r4, r3, r0, ror #19
   34930:	andeq	r4, r3, ip, lsr sl
   34934:	andeq	r4, r3, ip, lsr sl
   34938:	andeq	r4, r3, ip, lsr sl
   3493c:	andeq	r4, r3, r4, asr sl
   34940:	ldrb	r3, [r0, #88]	; 0x58
   34944:	orr	r3, r3, #1
   34948:	strb	r3, [r0, #88]	; 0x58
   3494c:	ldr	r3, [r1, #4]
   34950:	cmp	r3, #0
   34954:	ldrne	r3, [r3, #12]
   34958:	ldreq	r3, [r1, #16]
   3495c:	ldr	r4, [r3, #28]
   34960:	ldr	r3, [r1, #8]
   34964:	cmp	r3, #0
   34968:	ldrne	r3, [r3, #12]
   3496c:	ldreq	r3, [r1, #16]
   34970:	ldr	r5, [r3, #28]
   34974:	add	r2, r2, r2, lsl #1
   34978:	lsl	r2, r2, #2
   3497c:	ldr	r3, [r0, #20]
   34980:	add	r6, r3, r2
   34984:	mov	r1, #2
   34988:	str	r1, [r3, r2]
   3498c:	mov	r0, #8
   34990:	bl	3079c <__assert_fail@plt+0x1e1d8>
   34994:	str	r0, [r6, #8]
   34998:	cmp	r0, #0
   3499c:	beq	34a5c <__assert_fail@plt+0x22498>
   349a0:	cmp	r4, r5
   349a4:	beq	349cc <__assert_fail@plt+0x22408>
   349a8:	mov	r3, #2
   349ac:	str	r3, [r6, #4]
   349b0:	cmp	r4, r5
   349b4:	strlt	r4, [r0]
   349b8:	strlt	r5, [r0, #4]
   349bc:	strge	r5, [r0]
   349c0:	strge	r4, [r0, #4]
   349c4:	mov	r0, #0
   349c8:	pop	{r4, r5, r6, pc}
   349cc:	mov	r3, #1
   349d0:	str	r3, [r6, #4]
   349d4:	str	r4, [r0]
   349d8:	mov	r0, #0
   349dc:	pop	{r4, r5, r6, pc}
   349e0:	ldr	r1, [r1, #16]
   349e4:	add	r2, r2, r2, lsl #1
   349e8:	ldr	r0, [r0, #20]
   349ec:	ldr	r1, [r1, #28]
   349f0:	add	r0, r0, r2, lsl #2
   349f4:	bl	32480 <__assert_fail@plt+0x1febc>
   349f8:	pop	{r4, r5, r6, pc}
   349fc:	ldr	r3, [r1, #16]
   34a00:	ldr	ip, [r3, #28]
   34a04:	ldr	r3, [r0, #12]
   34a08:	str	ip, [r3, r2, lsl #2]
   34a0c:	ldrb	r3, [r1, #24]
   34a10:	cmp	r3, #4
   34a14:	beq	34a20 <__assert_fail@plt+0x2245c>
   34a18:	mov	r0, #0
   34a1c:	pop	{r4, r5, r6, pc}
   34a20:	ldr	r1, [r0, #12]
   34a24:	add	ip, r2, r2, lsl #1
   34a28:	ldr	r0, [r0, #20]
   34a2c:	ldr	r1, [r1, r2, lsl #2]
   34a30:	add	r0, r0, ip, lsl #2
   34a34:	bl	32480 <__assert_fail@plt+0x1febc>
   34a38:	pop	{r4, r5, r6, pc}
   34a3c:	ldr	r3, [r1, #16]
   34a40:	ldr	r1, [r3, #28]
   34a44:	ldr	r3, [r0, #12]
   34a48:	str	r1, [r3, r2, lsl #2]
   34a4c:	mov	r0, #0
   34a50:	pop	{r4, r5, r6, pc}
   34a54:	mov	r0, #0
   34a58:	pop	{r4, r5, r6, pc}
   34a5c:	mov	r0, #12
   34a60:	pop	{r4, r5, r6, pc}
   34a64:	push	{r4, r5, r6, lr}
   34a68:	mov	r4, r0
   34a6c:	mov	r5, r1
   34a70:	ldr	r1, [r0]
   34a74:	cmp	r1, #0
   34a78:	beq	34aa4 <__assert_fail@plt+0x224e0>
   34a7c:	ldr	r3, [r0, #4]
   34a80:	cmp	r3, #0
   34a84:	bne	34ab8 <__assert_fail@plt+0x224f4>
   34a88:	ldr	r3, [r0, #8]
   34a8c:	str	r5, [r3]
   34a90:	ldr	r3, [r0, #4]
   34a94:	add	r3, r3, #1
   34a98:	str	r3, [r0, #4]
   34a9c:	mov	r0, #1
   34aa0:	pop	{r4, r5, r6, pc}
   34aa4:	mov	r1, r5
   34aa8:	bl	32480 <__assert_fail@plt+0x1febc>
   34aac:	clz	r0, r0
   34ab0:	lsr	r0, r0, #5
   34ab4:	pop	{r4, r5, r6, pc}
   34ab8:	cmp	r1, r3
   34abc:	beq	34b18 <__assert_fail@plt+0x22554>
   34ac0:	ldr	r1, [r4, #8]
   34ac4:	ldr	r3, [r1]
   34ac8:	cmp	r5, r3
   34acc:	bge	34b3c <__assert_fail@plt+0x22578>
   34ad0:	ldr	r3, [r4, #4]
   34ad4:	cmp	r3, #0
   34ad8:	ble	34afc <__assert_fail@plt+0x22538>
   34adc:	lsl	r2, r3, #2
   34ae0:	ldr	r1, [r4, #8]
   34ae4:	add	r0, r1, r2
   34ae8:	ldr	r0, [r0, #-4]
   34aec:	str	r0, [r1, r2]
   34af0:	sub	r2, r2, #4
   34af4:	subs	r3, r3, #1
   34af8:	bne	34ae0 <__assert_fail@plt+0x2251c>
   34afc:	ldr	r2, [r4, #8]
   34b00:	str	r5, [r2, r3, lsl #2]
   34b04:	ldr	r3, [r4, #4]
   34b08:	add	r3, r3, #1
   34b0c:	str	r3, [r4, #4]
   34b10:	mov	r0, #1
   34b14:	pop	{r4, r5, r6, pc}
   34b18:	lsl	r3, r1, #1
   34b1c:	str	r3, [r0]
   34b20:	lsl	r1, r1, #3
   34b24:	ldr	r0, [r0, #8]
   34b28:	bl	31320 <__assert_fail@plt+0x1ed5c>
   34b2c:	cmp	r0, #0
   34b30:	beq	34b7c <__assert_fail@plt+0x225b8>
   34b34:	str	r0, [r4, #8]
   34b38:	b	34ac0 <__assert_fail@plt+0x224fc>
   34b3c:	ldr	r3, [r4, #4]
   34b40:	sub	r0, r3, #-1073741823	; 0xc0000001
   34b44:	lsl	r2, r0, #2
   34b48:	ldr	r0, [r1, r0, lsl #2]
   34b4c:	cmp	r5, r0
   34b50:	bge	34afc <__assert_fail@plt+0x22538>
   34b54:	add	r2, r2, #4
   34b58:	str	r0, [r1, r2]
   34b5c:	sub	r3, r3, #1
   34b60:	ldr	r1, [r4, #8]
   34b64:	add	r0, r1, r2
   34b68:	ldr	r0, [r0, #-8]
   34b6c:	sub	r2, r2, #4
   34b70:	cmp	r5, r0
   34b74:	blt	34b58 <__assert_fail@plt+0x22594>
   34b78:	b	34afc <__assert_fail@plt+0x22538>
   34b7c:	mov	r0, #0
   34b80:	pop	{r4, r5, r6, pc}
   34b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34b88:	sub	sp, sp, #20
   34b8c:	mov	r4, r0
   34b90:	mov	r5, r1
   34b94:	mov	r6, r2
   34b98:	mov	r9, r3
   34b9c:	ldr	r7, [sp, #56]	; 0x38
   34ba0:	mov	r8, #0
   34ba4:	b	34d78 <__assert_fail@plt+0x227b4>
   34ba8:	lsl	fp, r5, #2
   34bac:	ldr	r3, [r4, #12]
   34bb0:	ldr	r5, [r3, r5, lsl #2]
   34bb4:	str	r6, [sp, #12]
   34bb8:	add	r6, r6, r6, lsl #1
   34bbc:	lsl	sl, r6, #2
   34bc0:	ldr	r3, [r4, #20]
   34bc4:	add	r3, r3, sl
   34bc8:	str	r8, [r3, #4]
   34bcc:	mov	r2, r7
   34bd0:	mov	r1, r5
   34bd4:	mov	r0, r4
   34bd8:	bl	34004 <__assert_fail@plt+0x21a40>
   34bdc:	mov	r6, r0
   34be0:	cmn	r0, #1
   34be4:	beq	34e68 <__assert_fail@plt+0x228a4>
   34be8:	ldr	r3, [r4, #12]
   34bec:	ldr	r2, [r3, fp]
   34bf0:	ldr	r1, [sp, #12]
   34bf4:	str	r2, [r3, r1, lsl #2]
   34bf8:	ldr	r0, [r4, #20]
   34bfc:	mov	r1, r6
   34c00:	add	r0, r0, sl
   34c04:	bl	34a64 <__assert_fail@plt+0x224a0>
   34c08:	cmp	r0, #0
   34c0c:	bne	34d78 <__assert_fail@plt+0x227b4>
   34c10:	mov	r0, #12
   34c14:	b	34e94 <__assert_fail@plt+0x228d0>
   34c18:	ldr	r3, [r4, #12]
   34c1c:	ldr	r2, [r3, r5, lsl #2]
   34c20:	str	r2, [r3, r6, lsl #2]
   34c24:	mov	r0, #0
   34c28:	b	34e94 <__assert_fail@plt+0x228d0>
   34c2c:	ldr	r2, [r2, #8]
   34c30:	ldr	fp, [r2]
   34c34:	add	sl, r6, r6, lsl #1
   34c38:	lsl	sl, sl, #2
   34c3c:	add	r3, r3, sl
   34c40:	str	r8, [r3, #4]
   34c44:	cmp	r5, r9
   34c48:	movne	r3, #0
   34c4c:	moveq	r3, #1
   34c50:	cmp	r5, r6
   34c54:	moveq	r3, #0
   34c58:	cmp	r3, #0
   34c5c:	bne	34cb0 <__assert_fail@plt+0x226ec>
   34c60:	ldr	r3, [r4]
   34c64:	add	ip, r3, ip
   34c68:	ldr	r3, [ip, #4]
   34c6c:	lsl	r3, r3, #14
   34c70:	orr	r7, r7, r3, lsr #22
   34c74:	mov	r2, r7
   34c78:	mov	r1, fp
   34c7c:	mov	r0, r4
   34c80:	bl	34004 <__assert_fail@plt+0x21a40>
   34c84:	mov	r6, r0
   34c88:	cmn	r0, #1
   34c8c:	beq	34e70 <__assert_fail@plt+0x228ac>
   34c90:	ldr	r0, [r4, #20]
   34c94:	mov	r1, r6
   34c98:	add	r0, r0, sl
   34c9c:	bl	34a64 <__assert_fail@plt+0x224a0>
   34ca0:	cmp	r0, #0
   34ca4:	beq	34cd0 <__assert_fail@plt+0x2270c>
   34ca8:	mov	r5, fp
   34cac:	b	34d78 <__assert_fail@plt+0x227b4>
   34cb0:	ldr	r0, [r4, #20]
   34cb4:	mov	r1, fp
   34cb8:	add	r0, r0, sl
   34cbc:	bl	34a64 <__assert_fail@plt+0x224a0>
   34cc0:	cmp	r0, #0
   34cc4:	moveq	r0, #12
   34cc8:	movne	r0, #0
   34ccc:	b	34e94 <__assert_fail@plt+0x228d0>
   34cd0:	mov	r0, #12
   34cd4:	b	34e94 <__assert_fail@plt+0x228d0>
   34cd8:	sub	r1, r1, #1
   34cdc:	add	r3, r3, ip
   34ce0:	add	r3, lr, r3
   34ce4:	ldrb	r6, [r3, #6]
   34ce8:	cmp	r1, #0
   34cec:	movle	r0, #0
   34cf0:	movgt	r0, #1
   34cf4:	ands	r0, r0, r6, lsr #2
   34cf8:	beq	34e08 <__assert_fail@plt+0x22844>
   34cfc:	ldr	r0, [r2, #-4]!
   34d00:	cmp	r5, r0
   34d04:	bne	34cd8 <__assert_fail@plt+0x22714>
   34d08:	ldr	r0, [r3, #4]
   34d0c:	lsl	r0, r0, #14
   34d10:	cmp	r7, r0, lsr #22
   34d14:	bne	34cd8 <__assert_fail@plt+0x22714>
   34d18:	cmn	r1, #1
   34d1c:	beq	34e08 <__assert_fail@plt+0x22844>
   34d20:	ldr	r0, [r4, #20]
   34d24:	add	r0, r0, fp
   34d28:	bl	34a64 <__assert_fail@plt+0x224a0>
   34d2c:	cmp	r0, #0
   34d30:	beq	34e88 <__assert_fail@plt+0x228c4>
   34d34:	ldr	r3, [r4, #20]
   34d38:	add	sl, r3, sl
   34d3c:	ldr	r3, [sl, #8]
   34d40:	ldr	r5, [r3, #4]
   34d44:	mov	r2, r7
   34d48:	mov	r1, r5
   34d4c:	mov	r0, r4
   34d50:	bl	34004 <__assert_fail@plt+0x21a40>
   34d54:	mov	r6, r0
   34d58:	cmn	r0, #1
   34d5c:	beq	34e90 <__assert_fail@plt+0x228cc>
   34d60:	ldr	r0, [r4, #20]
   34d64:	mov	r1, r6
   34d68:	add	r0, r0, fp
   34d6c:	bl	34a64 <__assert_fail@plt+0x224a0>
   34d70:	cmp	r0, #0
   34d74:	beq	34e60 <__assert_fail@plt+0x2289c>
   34d78:	lsl	ip, r5, #3
   34d7c:	ldr	r3, [r4]
   34d80:	add	r3, r3, ip
   34d84:	ldrb	r3, [r3, #4]
   34d88:	cmp	r3, #4
   34d8c:	beq	34ba8 <__assert_fail@plt+0x225e4>
   34d90:	ldr	r3, [r4, #20]
   34d94:	add	sl, r5, r5, lsl #1
   34d98:	lsl	sl, sl, #2
   34d9c:	add	r2, r3, sl
   34da0:	ldr	r1, [r2, #4]
   34da4:	cmp	r1, #0
   34da8:	beq	34c18 <__assert_fail@plt+0x22654>
   34dac:	cmp	r1, #1
   34db0:	beq	34c2c <__assert_fail@plt+0x22668>
   34db4:	ldr	r2, [r2, #8]
   34db8:	ldr	r5, [r2]
   34dbc:	add	r6, r6, r6, lsl #1
   34dc0:	lsl	fp, r6, #2
   34dc4:	add	r3, r3, fp
   34dc8:	str	r8, [r3, #4]
   34dcc:	ldr	ip, [r4, #8]
   34dd0:	sub	r1, ip, #1
   34dd4:	ldr	lr, [r4]
   34dd8:	add	r3, lr, r1, lsl #3
   34ddc:	ldrb	r0, [r3, #6]
   34de0:	cmp	r1, #0
   34de4:	movle	r2, #0
   34de8:	movgt	r2, #1
   34dec:	ands	r2, r2, r0, lsr #2
   34df0:	beq	34e08 <__assert_fail@plt+0x22844>
   34df4:	ldr	r2, [r4, #16]
   34df8:	add	r2, r2, ip, lsl #2
   34dfc:	rsb	ip, r3, ip, lsl #3
   34e00:	sub	ip, ip, #16
   34e04:	b	34cfc <__assert_fail@plt+0x22738>
   34e08:	mov	r2, r7
   34e0c:	mov	r1, r5
   34e10:	mov	r0, r4
   34e14:	bl	34004 <__assert_fail@plt+0x21a40>
   34e18:	mov	r6, r0
   34e1c:	cmn	r0, #1
   34e20:	beq	34e78 <__assert_fail@plt+0x228b4>
   34e24:	ldr	r0, [r4, #20]
   34e28:	mov	r1, r6
   34e2c:	add	r0, r0, fp
   34e30:	bl	34a64 <__assert_fail@plt+0x224a0>
   34e34:	cmp	r0, #0
   34e38:	beq	34e80 <__assert_fail@plt+0x228bc>
   34e3c:	str	r7, [sp]
   34e40:	mov	r3, r9
   34e44:	mov	r2, r6
   34e48:	mov	r1, r5
   34e4c:	mov	r0, r4
   34e50:	bl	34b84 <__assert_fail@plt+0x225c0>
   34e54:	cmp	r0, #0
   34e58:	beq	34d34 <__assert_fail@plt+0x22770>
   34e5c:	b	34e94 <__assert_fail@plt+0x228d0>
   34e60:	mov	r0, #12
   34e64:	b	34e94 <__assert_fail@plt+0x228d0>
   34e68:	mov	r0, #12
   34e6c:	b	34e94 <__assert_fail@plt+0x228d0>
   34e70:	mov	r0, #12
   34e74:	b	34e94 <__assert_fail@plt+0x228d0>
   34e78:	mov	r0, #12
   34e7c:	b	34e94 <__assert_fail@plt+0x228d0>
   34e80:	mov	r0, #12
   34e84:	b	34e94 <__assert_fail@plt+0x228d0>
   34e88:	mov	r0, #12
   34e8c:	b	34e94 <__assert_fail@plt+0x228d0>
   34e90:	mov	r0, #12
   34e94:	add	sp, sp, #20
   34e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   34ea0:	sub	sp, sp, #12
   34ea4:	mov	r6, r0
   34ea8:	mov	r7, r1
   34eac:	mov	r4, r2
   34eb0:	mov	r9, r3
   34eb4:	ldr	r8, [sp, #40]	; 0x28
   34eb8:	b	34f04 <__assert_fail@plt+0x22940>
   34ebc:	mov	r1, r4
   34ec0:	mov	r0, r7
   34ec4:	bl	34a64 <__assert_fail@plt+0x224a0>
   34ec8:	cmp	r0, #0
   34ecc:	beq	34f94 <__assert_fail@plt+0x229d0>
   34ed0:	add	r5, r5, r5, lsl #1
   34ed4:	lsl	r5, r5, #2
   34ed8:	ldr	r3, [r6, #20]
   34edc:	add	r3, r3, r5
   34ee0:	ldr	r2, [r3, #4]
   34ee4:	cmp	r2, #0
   34ee8:	beq	34fa0 <__assert_fail@plt+0x229dc>
   34eec:	cmp	r2, #2
   34ef0:	beq	34f64 <__assert_fail@plt+0x229a0>
   34ef4:	ldr	r3, [r6, #20]
   34ef8:	add	r5, r3, r5
   34efc:	ldr	r3, [r5, #8]
   34f00:	ldr	r4, [r3]
   34f04:	mov	r1, r4
   34f08:	mov	r0, r7
   34f0c:	bl	31514 <__assert_fail@plt+0x1ef50>
   34f10:	cmp	r0, #0
   34f14:	bne	34f8c <__assert_fail@plt+0x229c8>
   34f18:	mov	r5, r4
   34f1c:	ldr	r3, [r6]
   34f20:	add	r2, r3, r4, lsl #3
   34f24:	ldrb	r2, [r2, #4]
   34f28:	cmp	r2, r8
   34f2c:	bne	34ebc <__assert_fail@plt+0x228f8>
   34f30:	ldr	r3, [r3, r4, lsl #3]
   34f34:	cmp	r9, r3
   34f38:	bne	34ebc <__assert_fail@plt+0x228f8>
   34f3c:	cmp	r2, #9
   34f40:	movne	r0, #0
   34f44:	bne	34f98 <__assert_fail@plt+0x229d4>
   34f48:	mov	r1, r4
   34f4c:	mov	r0, r7
   34f50:	bl	34a64 <__assert_fail@plt+0x224a0>
   34f54:	cmp	r0, #0
   34f58:	moveq	r0, #12
   34f5c:	movne	r0, #0
   34f60:	b	34f98 <__assert_fail@plt+0x229d4>
   34f64:	ldr	r3, [r3, #8]
   34f68:	ldr	r2, [r3, #4]
   34f6c:	str	r8, [sp]
   34f70:	mov	r3, r9
   34f74:	mov	r1, r7
   34f78:	mov	r0, r6
   34f7c:	bl	34e9c <__assert_fail@plt+0x228d8>
   34f80:	cmp	r0, #0
   34f84:	beq	34ef4 <__assert_fail@plt+0x22930>
   34f88:	b	34f98 <__assert_fail@plt+0x229d4>
   34f8c:	mov	r0, #0
   34f90:	b	34f98 <__assert_fail@plt+0x229d4>
   34f94:	mov	r0, #12
   34f98:	add	sp, sp, #12
   34f9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   34fa0:	mov	r0, #0
   34fa4:	b	34f98 <__assert_fail@plt+0x229d4>
   34fa8:	push	{r4, r5, r6, lr}
   34fac:	subs	r6, r1, #0
   34fb0:	beq	35130 <__assert_fail@plt+0x22b6c>
   34fb4:	ldr	r2, [r6, #4]
   34fb8:	cmp	r2, #0
   34fbc:	beq	35138 <__assert_fail@plt+0x22b74>
   34fc0:	mov	r4, r0
   34fc4:	ldr	r1, [r0]
   34fc8:	ldr	r3, [r0, #4]
   34fcc:	add	r0, r3, r2, lsl #1
   34fd0:	cmp	r1, r0
   34fd4:	blt	35034 <__assert_fail@plt+0x22a70>
   34fd8:	cmp	r3, #0
   34fdc:	beq	35068 <__assert_fail@plt+0x22aa4>
   34fe0:	ldr	r2, [r6, #4]
   34fe4:	add	r5, r3, r2, lsl #1
   34fe8:	sub	r2, r2, #1
   34fec:	sub	r3, r3, #1
   34ff0:	cmp	r2, #0
   34ff4:	cmpge	r3, #0
   34ff8:	blt	3508c <__assert_fail@plt+0x22ac8>
   34ffc:	ldr	ip, [r4, #8]
   35000:	ldr	r0, [ip, r3, lsl #2]
   35004:	ldr	r1, [r6, #8]
   35008:	ldr	r1, [r1, r2, lsl #2]
   3500c:	cmp	r0, r1
   35010:	subeq	r2, r2, #1
   35014:	subeq	r3, r3, #1
   35018:	beq	34ff0 <__assert_fail@plt+0x22a2c>
   3501c:	cmp	r0, r1
   35020:	sublt	r5, r5, #1
   35024:	sublt	r2, r2, #1
   35028:	strlt	r1, [ip, r5, lsl #2]
   3502c:	subge	r3, r3, #1
   35030:	b	34ff0 <__assert_fail@plt+0x22a2c>
   35034:	add	r1, r2, r1
   35038:	lsl	r5, r1, #1
   3503c:	lsl	r1, r1, #3
   35040:	ldr	r0, [r4, #8]
   35044:	bl	31320 <__assert_fail@plt+0x1ed5c>
   35048:	cmp	r0, #0
   3504c:	beq	35140 <__assert_fail@plt+0x22b7c>
   35050:	str	r0, [r4, #8]
   35054:	str	r5, [r4]
   35058:	ldr	r3, [r4, #4]
   3505c:	cmp	r3, #0
   35060:	bne	34fe0 <__assert_fail@plt+0x22a1c>
   35064:	b	3506c <__assert_fail@plt+0x22aa8>
   35068:	ldr	r0, [r4, #8]
   3506c:	ldr	r3, [r6, #4]
   35070:	str	r3, [r4, #4]
   35074:	ldr	r2, [r6, #4]
   35078:	lsl	r2, r2, #2
   3507c:	ldr	r1, [r6, #8]
   35080:	bl	12000 <memcpy@plt>
   35084:	mov	r0, #0
   35088:	pop	{r4, r5, r6, pc}
   3508c:	cmp	r2, #0
   35090:	blt	350b0 <__assert_fail@plt+0x22aec>
   35094:	add	r2, r2, #1
   35098:	sub	r5, r5, r2
   3509c:	ldr	r0, [r4, #8]
   350a0:	lsl	r2, r2, #2
   350a4:	ldr	r1, [r6, #8]
   350a8:	add	r0, r0, r5, lsl #2
   350ac:	bl	12000 <memcpy@plt>
   350b0:	ldr	r3, [r4, #4]
   350b4:	ldr	r2, [r6, #4]
   350b8:	add	r2, r3, r2, lsl #1
   350bc:	sub	lr, r2, #1
   350c0:	subs	r2, r2, r5
   350c4:	beq	35148 <__assert_fail@plt+0x22b84>
   350c8:	sub	r1, r3, #1
   350cc:	add	r3, r3, r2
   350d0:	str	r3, [r4, #4]
   350d4:	b	350e8 <__assert_fail@plt+0x22b24>
   350d8:	add	ip, r1, r2
   350dc:	str	r0, [r3, ip, lsl #2]
   350e0:	subs	r1, r1, #1
   350e4:	bmi	35118 <__assert_fail@plt+0x22b54>
   350e8:	ldr	r3, [r4, #8]
   350ec:	ldr	ip, [r3, lr, lsl #2]
   350f0:	ldr	r0, [r3, r1, lsl #2]
   350f4:	cmp	ip, r0
   350f8:	ble	350d8 <__assert_fail@plt+0x22b14>
   350fc:	sub	lr, lr, #1
   35100:	add	r0, r1, r2
   35104:	str	ip, [r3, r0, lsl #2]
   35108:	subs	r2, r2, #1
   3510c:	bne	350e8 <__assert_fail@plt+0x22b24>
   35110:	mov	r0, #0
   35114:	pop	{r4, r5, r6, pc}
   35118:	ldr	r0, [r4, #8]
   3511c:	lsl	r2, r2, #2
   35120:	add	r1, r0, r5, lsl #2
   35124:	bl	12000 <memcpy@plt>
   35128:	mov	r0, #0
   3512c:	pop	{r4, r5, r6, pc}
   35130:	mov	r0, #0
   35134:	pop	{r4, r5, r6, pc}
   35138:	mov	r0, #0
   3513c:	pop	{r4, r5, r6, pc}
   35140:	mov	r0, #12
   35144:	pop	{r4, r5, r6, pc}
   35148:	mov	r0, #0
   3514c:	pop	{r4, r5, r6, pc}
   35150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35154:	sub	sp, sp, #44	; 0x2c
   35158:	mov	sl, r0
   3515c:	mov	r5, r1
   35160:	mov	r4, r2
   35164:	str	r3, [sp, #12]
   35168:	add	r8, r2, r2, lsl #1
   3516c:	lsl	r8, r8, #2
   35170:	ldr	r3, [r1, #20]
   35174:	add	r3, r3, r8
   35178:	ldr	r1, [r3, #4]
   3517c:	add	r1, r1, #1
   35180:	add	r0, sp, #28
   35184:	bl	324c4 <__assert_fail@plt+0x1ff00>
   35188:	subs	fp, r0, #0
   3518c:	bne	35354 <__assert_fail@plt+0x22d90>
   35190:	mov	r9, r8
   35194:	ldr	r3, [sp, #32]
   35198:	add	r2, r3, #1
   3519c:	str	r2, [sp, #32]
   351a0:	ldr	r2, [sp, #36]	; 0x24
   351a4:	str	r4, [r2, r3, lsl #2]
   351a8:	ldr	r3, [r5, #24]
   351ac:	add	r3, r3, r8
   351b0:	mvn	r2, #0
   351b4:	str	r2, [r3, #4]
   351b8:	ldr	r2, [r5]
   351bc:	lsl	r6, r4, #3
   351c0:	add	r1, r2, r6
   351c4:	ldr	r0, [r1, #4]
   351c8:	ldr	r3, [pc, #424]	; 35378 <__assert_fail@plt+0x22db4>
   351cc:	and	r3, r3, r0
   351d0:	cmp	r3, #0
   351d4:	beq	35204 <__assert_fail@plt+0x22c40>
   351d8:	ldr	r3, [r5, #20]
   351dc:	add	r3, r3, r8
   351e0:	ldr	r0, [r3, #4]
   351e4:	cmp	r0, #0
   351e8:	beq	35360 <__assert_fail@plt+0x22d9c>
   351ec:	ldr	r3, [r3, #8]
   351f0:	ldr	r3, [r3]
   351f4:	add	r2, r2, r3, lsl #3
   351f8:	ldrb	r3, [r2, #6]
   351fc:	tst	r3, #4
   35200:	beq	35240 <__assert_fail@plt+0x22c7c>
   35204:	ldr	r3, [r5]
   35208:	add	r6, r3, r6
   3520c:	ldrb	r3, [r6, #4]
   35210:	tst	r3, #8
   35214:	beq	35360 <__assert_fail@plt+0x22d9c>
   35218:	ldr	r3, [r5, #20]
   3521c:	add	r3, r3, r8
   35220:	ldr	r2, [r3, #4]
   35224:	cmp	r2, #0
   35228:	ble	35360 <__assert_fail@plt+0x22d9c>
   3522c:	mov	r2, #0
   35230:	str	r2, [sp, #8]
   35234:	mov	r6, r2
   35238:	add	r7, sp, #16
   3523c:	b	352ac <__assert_fail@plt+0x22ce8>
   35240:	ldr	r3, [r1, #4]
   35244:	lsl	r3, r3, #14
   35248:	lsr	r3, r3, #22
   3524c:	str	r3, [sp]
   35250:	mov	r3, r4
   35254:	mov	r2, r4
   35258:	mov	r1, r4
   3525c:	mov	r0, r5
   35260:	bl	34b84 <__assert_fail@plt+0x225c0>
   35264:	cmp	r0, #0
   35268:	beq	35204 <__assert_fail@plt+0x22c40>
   3526c:	mov	fp, r0
   35270:	b	35354 <__assert_fail@plt+0x22d90>
   35274:	mov	r3, #0
   35278:	mov	r1, r5
   3527c:	mov	r0, r7
   35280:	bl	35150 <__assert_fail@plt+0x22b8c>
   35284:	cmp	r0, #0
   35288:	beq	352e8 <__assert_fail@plt+0x22d24>
   3528c:	mov	fp, r0
   35290:	b	35354 <__assert_fail@plt+0x22d90>
   35294:	add	r6, r6, #1
   35298:	ldr	r3, [r5, #20]
   3529c:	add	r3, r3, r9
   352a0:	ldr	r2, [r3, #4]
   352a4:	cmp	r2, r6
   352a8:	ble	35324 <__assert_fail@plt+0x22d60>
   352ac:	ldr	r3, [r3, #8]
   352b0:	ldr	r2, [r3, r6, lsl #2]
   352b4:	add	r4, r2, r2, lsl #1
   352b8:	lsl	r4, r4, #2
   352bc:	ldr	r3, [r5, #24]
   352c0:	add	r3, r3, r4
   352c4:	ldr	r1, [r3, #4]
   352c8:	cmn	r1, #1
   352cc:	moveq	r3, #1
   352d0:	streq	r3, [sp, #8]
   352d4:	beq	35294 <__assert_fail@plt+0x22cd0>
   352d8:	cmp	r1, #0
   352dc:	beq	35274 <__assert_fail@plt+0x22cb0>
   352e0:	ldm	r3, {r0, r1, r2}
   352e4:	stm	r7, {r0, r1, r2}
   352e8:	mov	r1, r7
   352ec:	add	r0, sp, #28
   352f0:	bl	34fa8 <__assert_fail@plt+0x229e4>
   352f4:	cmp	r0, #0
   352f8:	bne	3528c <__assert_fail@plt+0x22cc8>
   352fc:	ldr	r3, [r5, #24]
   35300:	add	r4, r3, r4
   35304:	ldr	r3, [r4, #4]
   35308:	cmp	r3, #0
   3530c:	bne	35294 <__assert_fail@plt+0x22cd0>
   35310:	ldr	r0, [sp, #24]
   35314:	bl	2e3fc <__assert_fail@plt+0x1be38>
   35318:	mov	r3, #1
   3531c:	str	r3, [sp, #8]
   35320:	b	35294 <__assert_fail@plt+0x22cd0>
   35324:	ldr	r3, [sp, #12]
   35328:	eor	r3, r3, #1
   3532c:	ldr	r2, [sp, #8]
   35330:	tst	r2, r3
   35334:	beq	35360 <__assert_fail@plt+0x22d9c>
   35338:	ldr	r3, [r5, #24]
   3533c:	add	r8, r3, r8
   35340:	mov	r3, #0
   35344:	str	r3, [r8, #4]
   35348:	add	r3, sp, #40	; 0x28
   3534c:	ldmdb	r3, {r0, r1, r2}
   35350:	stm	sl, {r0, r1, r2}
   35354:	mov	r0, fp
   35358:	add	sp, sp, #44	; 0x2c
   3535c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35360:	ldr	r3, [r5, #24]
   35364:	add	r8, r3, r8
   35368:	add	r3, sp, #40	; 0x28
   3536c:	ldmdb	r3, {r0, r1, r2}
   35370:	stm	r8, {r0, r1, r2}
   35374:	b	35348 <__assert_fail@plt+0x22d84>
   35378:	andeq	pc, r3, r0, lsl #30
   3537c:	push	{r4, r5, r6, lr}
   35380:	mov	r5, r0
   35384:	cmp	r1, #0
   35388:	blt	353cc <__assert_fail@plt+0x22e08>
   3538c:	ldr	r3, [r0, #48]	; 0x30
   35390:	cmp	r1, r3
   35394:	beq	353d4 <__assert_fail@plt+0x22e10>
   35398:	ldr	r3, [r0, #80]	; 0x50
   3539c:	cmp	r3, #1
   353a0:	ble	35440 <__assert_fail@plt+0x22e7c>
   353a4:	ldr	r3, [r0, #8]
   353a8:	add	r3, r3, r1, lsl #2
   353ac:	ldr	r4, [r3], #-4
   353b0:	cmn	r4, #1
   353b4:	bne	353e8 <__assert_fail@plt+0x22e24>
   353b8:	sub	r1, r1, #1
   353bc:	cmn	r1, #1
   353c0:	bne	353ac <__assert_fail@plt+0x22de8>
   353c4:	ldr	r0, [r5, #60]	; 0x3c
   353c8:	pop	{r4, r5, r6, pc}
   353cc:	ldr	r0, [r0, #60]	; 0x3c
   353d0:	pop	{r4, r5, r6, pc}
   353d4:	and	r2, r2, #2
   353d8:	cmp	r2, #0
   353dc:	movne	r0, #8
   353e0:	moveq	r0, #10
   353e4:	pop	{r4, r5, r6, pc}
   353e8:	ldrb	r3, [r5, #78]	; 0x4e
   353ec:	cmp	r3, #0
   353f0:	bne	35404 <__assert_fail@plt+0x22e40>
   353f4:	cmp	r4, #10
   353f8:	beq	3542c <__assert_fail@plt+0x22e68>
   353fc:	mov	r0, #0
   35400:	pop	{r4, r5, r6, pc}
   35404:	mov	r0, r4
   35408:	bl	12324 <iswalnum@plt>
   3540c:	adds	r3, r0, #0
   35410:	movne	r3, #1
   35414:	cmp	r4, #95	; 0x5f
   35418:	orreq	r3, r3, #1
   3541c:	cmp	r3, #0
   35420:	beq	353f4 <__assert_fail@plt+0x22e30>
   35424:	mov	r0, #1
   35428:	pop	{r4, r5, r6, pc}
   3542c:	ldrb	r0, [r5, #77]	; 0x4d
   35430:	cmp	r0, #0
   35434:	movne	r0, #2
   35438:	moveq	r0, #0
   3543c:	pop	{r4, r5, r6, pc}
   35440:	ldr	r3, [r0, #4]
   35444:	ldrb	r2, [r3, r1]
   35448:	asr	r0, r2, #5
   3544c:	ldr	r3, [r5, #68]	; 0x44
   35450:	and	r1, r2, #31
   35454:	ldr	r3, [r3, r0, lsl #2]
   35458:	lsr	r3, r3, r1
   3545c:	tst	r3, #1
   35460:	bne	35488 <__assert_fail@plt+0x22ec4>
   35464:	cmp	r2, #10
   35468:	beq	35474 <__assert_fail@plt+0x22eb0>
   3546c:	mov	r0, #0
   35470:	pop	{r4, r5, r6, pc}
   35474:	ldrb	r0, [r5, #77]	; 0x4d
   35478:	cmp	r0, #0
   3547c:	movne	r0, #2
   35480:	moveq	r0, #0
   35484:	pop	{r4, r5, r6, pc}
   35488:	mov	r0, #1
   3548c:	pop	{r4, r5, r6, pc}
   35490:	push	{r4, lr}
   35494:	ldr	r3, [r0, #4]
   35498:	ldrb	ip, [r3, r2]
   3549c:	ldrb	r3, [r1, #4]
   354a0:	sub	r3, r3, #1
   354a4:	cmp	r3, #6
   354a8:	ldrls	pc, [pc, r3, lsl #2]
   354ac:	b	355cc <__assert_fail@plt+0x23008>
   354b0:	andeq	r5, r3, ip, asr #9
   354b4:	andeq	r5, r3, ip, asr #11
   354b8:	andeq	r5, r3, r0, ror #9
   354bc:	andeq	r5, r3, ip, asr #11
   354c0:	andeq	r5, r3, r8, asr r5
   354c4:	andeq	r5, r3, ip, asr #11
   354c8:	andeq	r5, r3, r0, asr r5
   354cc:	ldrb	r3, [r1]
   354d0:	cmp	r3, ip
   354d4:	beq	354fc <__assert_fail@plt+0x22f38>
   354d8:	mov	r0, #0
   354dc:	pop	{r4, pc}
   354e0:	lsr	lr, ip, #5
   354e4:	ldr	r3, [r1]
   354e8:	and	ip, ip, #31
   354ec:	ldr	r3, [r3, lr, lsl #2]
   354f0:	lsr	ip, r3, ip
   354f4:	tst	ip, #1
   354f8:	beq	355d4 <__assert_fail@plt+0x23010>
   354fc:	ldr	ip, [r1, #4]
   35500:	ldr	r3, [pc, #260]	; 3560c <__assert_fail@plt+0x23048>
   35504:	and	r3, r3, ip
   35508:	cmp	r3, #0
   3550c:	beq	355e4 <__assert_fail@plt+0x23020>
   35510:	mov	r3, r2
   35514:	mov	r4, r1
   35518:	ldr	r2, [r0, #88]	; 0x58
   3551c:	mov	r1, r3
   35520:	bl	3537c <__assert_fail@plt+0x22db8>
   35524:	ldr	r3, [r4, #4]
   35528:	lsl	r3, r3, #14
   3552c:	lsr	r3, r3, #22
   35530:	tst	r3, #4
   35534:	beq	35598 <__assert_fail@plt+0x22fd4>
   35538:	tst	r0, #1
   3553c:	beq	355ec <__assert_fail@plt+0x23028>
   35540:	tst	r3, #8
   35544:	beq	355a8 <__assert_fail@plt+0x22fe4>
   35548:	mov	r0, #0
   3554c:	pop	{r4, pc}
   35550:	tst	ip, #128	; 0x80
   35554:	bne	355dc <__assert_fail@plt+0x23018>
   35558:	cmp	ip, #10
   3555c:	beq	35580 <__assert_fail@plt+0x22fbc>
   35560:	cmp	ip, #0
   35564:	bne	354fc <__assert_fail@plt+0x22f38>
   35568:	ldr	r3, [r0, #84]	; 0x54
   3556c:	ldr	r3, [r3, #128]	; 0x80
   35570:	tst	r3, #128	; 0x80
   35574:	beq	354fc <__assert_fail@plt+0x22f38>
   35578:	mov	r0, #0
   3557c:	pop	{r4, pc}
   35580:	ldr	r3, [r0, #84]	; 0x54
   35584:	ldr	r3, [r3, #128]	; 0x80
   35588:	tst	r3, #64	; 0x40
   3558c:	bne	354fc <__assert_fail@plt+0x22f38>
   35590:	mov	r0, #0
   35594:	pop	{r4, pc}
   35598:	tst	r3, #8
   3559c:	beq	355a8 <__assert_fail@plt+0x22fe4>
   355a0:	tst	r0, #1
   355a4:	bne	355f4 <__assert_fail@plt+0x23030>
   355a8:	tst	r3, #32
   355ac:	beq	355b8 <__assert_fail@plt+0x22ff4>
   355b0:	tst	r0, #2
   355b4:	beq	355fc <__assert_fail@plt+0x23038>
   355b8:	tst	r3, #128	; 0x80
   355bc:	beq	35604 <__assert_fail@plt+0x23040>
   355c0:	lsr	r0, r0, #3
   355c4:	and	r0, r0, #1
   355c8:	pop	{r4, pc}
   355cc:	mov	r0, #0
   355d0:	pop	{r4, pc}
   355d4:	mov	r0, #0
   355d8:	pop	{r4, pc}
   355dc:	mov	r0, #0
   355e0:	pop	{r4, pc}
   355e4:	mov	r0, #1
   355e8:	pop	{r4, pc}
   355ec:	mov	r0, #0
   355f0:	pop	{r4, pc}
   355f4:	mov	r0, #0
   355f8:	pop	{r4, pc}
   355fc:	mov	r0, #0
   35600:	pop	{r4, pc}
   35604:	mov	r0, #1
   35608:	pop	{r4, pc}
   3560c:	andeq	pc, r3, r0, lsl #30
   35610:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35614:	ldr	r7, [r0, #84]	; 0x54
   35618:	ldr	r3, [r1, #4]
   3561c:	cmp	r3, #0
   35620:	ble	35708 <__assert_fail@plt+0x23144>
   35624:	mov	r9, r2
   35628:	mov	r6, r1
   3562c:	mov	r8, r0
   35630:	mov	r4, #0
   35634:	b	35668 <__assert_fail@plt+0x230a4>
   35638:	lsl	sl, r1, #1
   3563c:	lsl	r1, r1, #3
   35640:	bl	31320 <__assert_fail@plt+0x1ed5c>
   35644:	cmp	r0, #0
   35648:	beq	35710 <__assert_fail@plt+0x2314c>
   3564c:	str	r0, [r8, #132]	; 0x84
   35650:	str	sl, [r8, #128]	; 0x80
   35654:	b	356b4 <__assert_fail@plt+0x230f0>
   35658:	add	r4, r4, #1
   3565c:	ldr	r3, [r6, #4]
   35660:	cmp	r3, r4
   35664:	ble	35700 <__assert_fail@plt+0x2313c>
   35668:	ldr	r3, [r6, #8]
   3566c:	ldr	r5, [r3, r4, lsl #2]
   35670:	ldr	r3, [r7]
   35674:	add	r2, r3, r5, lsl #3
   35678:	ldrb	r2, [r2, #4]
   3567c:	cmp	r2, #8
   35680:	bne	35658 <__assert_fail@plt+0x23094>
   35684:	ldr	r3, [r3, r5, lsl #3]
   35688:	cmp	r3, #31
   3568c:	bgt	35658 <__assert_fail@plt+0x23094>
   35690:	ldr	r2, [r7, #80]	; 0x50
   35694:	lsr	r3, r2, r3
   35698:	tst	r3, #1
   3569c:	beq	35658 <__assert_fail@plt+0x23094>
   356a0:	ldr	r0, [r8, #132]	; 0x84
   356a4:	ldr	r1, [r8, #128]	; 0x80
   356a8:	ldr	r3, [r8, #124]	; 0x7c
   356ac:	cmp	r1, r3
   356b0:	beq	35638 <__assert_fail@plt+0x23074>
   356b4:	ldr	fp, [r8, #124]	; 0x7c
   356b8:	ldr	sl, [r8, #132]	; 0x84
   356bc:	mov	r1, #24
   356c0:	mov	r0, #1
   356c4:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   356c8:	str	r0, [sl, fp, lsl #2]
   356cc:	ldr	r2, [r8, #124]	; 0x7c
   356d0:	ldr	r3, [r8, #132]	; 0x84
   356d4:	ldr	r3, [r3, r2, lsl #2]
   356d8:	cmp	r3, #0
   356dc:	beq	35710 <__assert_fail@plt+0x2314c>
   356e0:	str	r5, [r3, #4]
   356e4:	ldr	r2, [r8, #132]	; 0x84
   356e8:	ldr	r3, [r8, #124]	; 0x7c
   356ec:	add	r1, r3, #1
   356f0:	str	r1, [r8, #124]	; 0x7c
   356f4:	ldr	r3, [r2, r3, lsl #2]
   356f8:	str	r9, [r3]
   356fc:	b	35658 <__assert_fail@plt+0x23094>
   35700:	mov	r0, #0
   35704:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35708:	mov	r0, #0
   3570c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35710:	mov	r0, #12
   35714:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35718:	push	{r4, r5, r6, lr}
   3571c:	mov	r4, r0
   35720:	mov	r5, r1
   35724:	ldr	r6, [r0, #104]	; 0x68
   35728:	ldr	r3, [r0, #36]	; 0x24
   3572c:	cmp	r3, r1
   35730:	bgt	35740 <__assert_fail@plt+0x2317c>
   35734:	ldr	r2, [r0, #48]	; 0x30
   35738:	cmp	r3, r2
   3573c:	blt	35758 <__assert_fail@plt+0x23194>
   35740:	ldr	r3, [r4, #28]
   35744:	cmp	r5, r3
   35748:	blt	3576c <__assert_fail@plt+0x231a8>
   3574c:	ldr	r2, [r4, #48]	; 0x30
   35750:	cmp	r3, r2
   35754:	bge	3576c <__assert_fail@plt+0x231a8>
   35758:	add	r1, r5, #1
   3575c:	mov	r0, r4
   35760:	bl	331a4 <__assert_fail@plt+0x20be0>
   35764:	cmp	r0, #0
   35768:	popne	{r4, r5, r6, pc}
   3576c:	cmp	r6, r5
   35770:	bge	3579c <__assert_fail@plt+0x231d8>
   35774:	sub	r2, r5, r6
   35778:	add	r6, r6, #1
   3577c:	ldr	r0, [r4, #100]	; 0x64
   35780:	lsl	r2, r2, #2
   35784:	mov	r1, #0
   35788:	add	r0, r0, r6, lsl #2
   3578c:	bl	12348 <memset@plt>
   35790:	str	r5, [r4, #104]	; 0x68
   35794:	mov	r0, #0
   35798:	pop	{r4, r5, r6, pc}
   3579c:	mov	r0, #0
   357a0:	pop	{r4, r5, r6, pc}
   357a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   357a8:	sub	sp, sp, #28
   357ac:	mov	r7, r0
   357b0:	mov	r8, r1
   357b4:	mov	r5, r2
   357b8:	mov	r4, r3
   357bc:	ldr	r1, [r1, #4]
   357c0:	add	r0, sp, #12
   357c4:	bl	324c4 <__assert_fail@plt+0x1ff00>
   357c8:	subs	r9, r0, #0
   357cc:	bne	358c4 <__assert_fail@plt+0x23300>
   357d0:	ldr	r3, [r8, #4]
   357d4:	cmp	r3, #0
   357d8:	ble	358a8 <__assert_fail@plt+0x232e4>
   357dc:	mov	r6, #0
   357e0:	b	35844 <__assert_fail@plt+0x23280>
   357e4:	add	r3, r3, #1
   357e8:	cmp	fp, r3
   357ec:	beq	35878 <__assert_fail@plt+0x232b4>
   357f0:	ldr	r0, [ip, #4]!
   357f4:	add	lr, sl, r0, lsl #3
   357f8:	ldrb	lr, [lr, #4]
   357fc:	cmp	r4, lr
   35800:	bne	357e4 <__assert_fail@plt+0x23220>
   35804:	ldr	lr, [sl, r0, lsl #3]
   35808:	cmp	r5, lr
   3580c:	bne	357e4 <__assert_fail@plt+0x23220>
   35810:	cmn	r0, #1
   35814:	beq	35878 <__assert_fail@plt+0x232b4>
   35818:	str	r4, [sp]
   3581c:	mov	r3, r5
   35820:	add	r1, sp, #12
   35824:	mov	r0, r7
   35828:	bl	34e9c <__assert_fail@plt+0x228d8>
   3582c:	subs	sl, r0, #0
   35830:	bne	35894 <__assert_fail@plt+0x232d0>
   35834:	add	r6, r6, #1
   35838:	ldr	r3, [r8, #4]
   3583c:	cmp	r3, r6
   35840:	ble	358a8 <__assert_fail@plt+0x232e4>
   35844:	ldr	r3, [r8, #8]
   35848:	ldr	r2, [r3, r6, lsl #2]
   3584c:	add	r3, r2, r2, lsl #1
   35850:	ldr	r1, [r7, #24]
   35854:	add	r1, r1, r3, lsl #2
   35858:	ldr	fp, [r1, #4]
   3585c:	cmp	fp, #0
   35860:	ble	35878 <__assert_fail@plt+0x232b4>
   35864:	ldr	sl, [r7]
   35868:	ldr	ip, [r1, #8]
   3586c:	sub	ip, ip, #4
   35870:	mov	r3, #0
   35874:	b	357f0 <__assert_fail@plt+0x2322c>
   35878:	add	r0, sp, #12
   3587c:	bl	34fa8 <__assert_fail@plt+0x229e4>
   35880:	subs	sl, r0, #0
   35884:	beq	35834 <__assert_fail@plt+0x23270>
   35888:	ldr	r0, [sp, #20]
   3588c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   35890:	b	3589c <__assert_fail@plt+0x232d8>
   35894:	ldr	r0, [sp, #20]
   35898:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3589c:	mov	r0, sl
   358a0:	add	sp, sp, #28
   358a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   358a8:	ldr	r0, [r8, #8]
   358ac:	bl	2e3fc <__assert_fail@plt+0x1be38>
   358b0:	add	r3, sp, #24
   358b4:	ldmdb	r3, {r0, r1, r2}
   358b8:	stm	r8, {r0, r1, r2}
   358bc:	mov	sl, r9
   358c0:	b	3589c <__assert_fail@plt+0x232d8>
   358c4:	mov	sl, r9
   358c8:	b	3589c <__assert_fail@plt+0x232d8>
   358cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   358d0:	sub	sp, sp, #14464	; 0x3880
   358d4:	sub	sp, sp, #52	; 0x34
   358d8:	mov	r9, r0
   358dc:	mov	r4, r1
   358e0:	str	r1, [sp, #4]
   358e4:	mov	r1, #0
   358e8:	str	r1, [r4, #44]	; 0x2c
   358ec:	str	r1, [r4, #48]	; 0x30
   358f0:	mov	r2, #32
   358f4:	add	r0, sp, #32
   358f8:	bl	12348 <memset@plt>
   358fc:	ldr	r3, [r4, #8]
   35900:	cmp	r3, #0
   35904:	ble	35f58 <__assert_fail@plt+0x23994>
   35908:	mov	r8, #0
   3590c:	str	r8, [sp, #12]
   35910:	add	r3, sp, #8320	; 0x2080
   35914:	str	r3, [sp, #24]
   35918:	add	r3, sp, #32
   3591c:	str	r3, [sp, #28]
   35920:	str	r9, [sp, #20]
   35924:	b	35d64 <__assert_fail@plt+0x237a0>
   35928:	ldrb	r3, [r3, r2, lsl #3]
   3592c:	asr	r1, r3, #5
   35930:	and	r3, r3, #31
   35934:	ldr	ip, [sp, #28]
   35938:	ldr	r2, [ip, r1, lsl #2]
   3593c:	mov	r0, #1
   35940:	orr	r3, r2, r0, lsl r3
   35944:	str	r3, [ip, r1, lsl #2]
   35948:	cmp	r4, #0
   3594c:	beq	35a2c <__assert_fail@plt+0x23468>
   35950:	tst	r4, #32
   35954:	bne	35ae8 <__assert_fail@plt+0x23524>
   35958:	tst	r4, #128	; 0x80
   3595c:	bne	35b14 <__assert_fail@plt+0x23550>
   35960:	tst	r4, #4
   35964:	beq	359c8 <__assert_fail@plt+0x23404>
   35968:	cmp	r9, #1
   3596c:	beq	35b28 <__assert_fail@plt+0x23564>
   35970:	ldr	r2, [sp, #20]
   35974:	ldr	r3, [r2, #92]	; 0x5c
   35978:	cmp	r3, #1
   3597c:	ble	35b4c <__assert_fail@plt+0x23588>
   35980:	add	r0, sp, #32
   35984:	add	r1, r2, #96	; 0x60
   35988:	ldr	lr, [r2, #60]	; 0x3c
   3598c:	sub	lr, lr, #4
   35990:	add	r5, r2, #128	; 0x80
   35994:	mov	ip, #0
   35998:	ldr	r2, [r1], #4
   3599c:	ldr	r3, [lr, #4]!
   359a0:	mvn	r3, r3
   359a4:	orr	r3, r3, r2
   359a8:	ldr	r2, [r0]
   359ac:	and	r3, r3, r2
   359b0:	str	r3, [r0], #4
   359b4:	orr	ip, ip, r3
   359b8:	cmp	r1, r5
   359bc:	bne	35998 <__assert_fail@plt+0x233d4>
   359c0:	cmp	ip, #0
   359c4:	beq	35d44 <__assert_fail@plt+0x23780>
   359c8:	tst	r4, #8
   359cc:	beq	35a2c <__assert_fail@plt+0x23468>
   359d0:	cmp	r9, #1
   359d4:	beq	35b80 <__assert_fail@plt+0x235bc>
   359d8:	ldr	r2, [sp, #20]
   359dc:	ldr	r3, [r2, #92]	; 0x5c
   359e0:	cmp	r3, #1
   359e4:	ble	35ba4 <__assert_fail@plt+0x235e0>
   359e8:	add	ip, sp, #32
   359ec:	add	r0, r2, #96	; 0x60
   359f0:	ldr	lr, [r2, #60]	; 0x3c
   359f4:	sub	lr, lr, #4
   359f8:	add	r4, r2, #128	; 0x80
   359fc:	mov	r1, #0
   35a00:	ldr	r3, [r0], #4
   35a04:	ldr	r2, [lr, #4]!
   35a08:	and	r2, r2, r3
   35a0c:	ldr	r3, [ip]
   35a10:	bic	r3, r3, r2
   35a14:	str	r3, [ip], #4
   35a18:	orr	r1, r1, r3
   35a1c:	cmp	r0, r4
   35a20:	bne	35a00 <__assert_fail@plt+0x2343c>
   35a24:	cmp	r1, #0
   35a28:	beq	35d44 <__assert_fail@plt+0x23780>
   35a2c:	cmp	r8, #0
   35a30:	ble	35d38 <__assert_fail@plt+0x23774>
   35a34:	add	r5, sp, #124	; 0x7c
   35a38:	add	r6, sp, #8320	; 0x2080
   35a3c:	mov	r7, #0
   35a40:	b	35c50 <__assert_fail@plt+0x2368c>
   35a44:	ldr	ip, [r3, r2, lsl #3]
   35a48:	add	r0, sp, #32
   35a4c:	sub	r1, ip, #4
   35a50:	add	ip, ip, #28
   35a54:	ldr	r3, [r0]
   35a58:	ldr	r2, [r1, #4]!
   35a5c:	orr	r3, r3, r2
   35a60:	str	r3, [r0], #4
   35a64:	cmp	r1, ip
   35a68:	bne	35a54 <__assert_fail@plt+0x23490>
   35a6c:	b	35948 <__assert_fail@plt+0x23384>
   35a70:	ldr	r2, [sp, #20]
   35a74:	ldr	r3, [r2, #92]	; 0x5c
   35a78:	cmp	r3, #1
   35a7c:	ble	35ad4 <__assert_fail@plt+0x23510>
   35a80:	ldr	ip, [r2, #60]	; 0x3c
   35a84:	add	r0, sp, #32
   35a88:	sub	r1, ip, #4
   35a8c:	add	ip, ip, #28
   35a90:	ldr	r3, [r0]
   35a94:	ldr	r2, [r1, #4]!
   35a98:	orr	r3, r3, r2
   35a9c:	str	r3, [r0], #4
   35aa0:	cmp	r1, ip
   35aa4:	bne	35a90 <__assert_fail@plt+0x234cc>
   35aa8:	ldr	r3, [sp, #20]
   35aac:	ldr	r3, [r3, #128]	; 0x80
   35ab0:	tst	r3, #64	; 0x40
   35ab4:	ldreq	r2, [sp, #32]
   35ab8:	biceq	r2, r2, #1024	; 0x400
   35abc:	streq	r2, [sp, #32]
   35ac0:	tst	r3, #128	; 0x80
   35ac4:	ldrne	r3, [sp, #32]
   35ac8:	bicne	r3, r3, #1
   35acc:	strne	r3, [sp, #32]
   35ad0:	b	35948 <__assert_fail@plt+0x23384>
   35ad4:	mov	r2, #32
   35ad8:	mvn	r1, #0
   35adc:	ldr	r0, [sp, #28]
   35ae0:	bl	12348 <memset@plt>
   35ae4:	b	35aa8 <__assert_fail@plt+0x234e4>
   35ae8:	ldr	r5, [sp, #32]
   35aec:	and	r5, r5, #1024	; 0x400
   35af0:	mov	r2, #32
   35af4:	mov	r1, #0
   35af8:	ldr	r0, [sp, #28]
   35afc:	bl	12348 <memset@plt>
   35b00:	cmp	r5, #0
   35b04:	beq	35d44 <__assert_fail@plt+0x23780>
   35b08:	mov	r3, #1024	; 0x400
   35b0c:	str	r3, [sp, #32]
   35b10:	b	35958 <__assert_fail@plt+0x23394>
   35b14:	mov	r2, #32
   35b18:	mov	r1, #0
   35b1c:	ldr	r0, [sp, #28]
   35b20:	bl	12348 <memset@plt>
   35b24:	b	35d44 <__assert_fail@plt+0x23780>
   35b28:	ldr	r3, [sp, #16]
   35b2c:	ldrb	r3, [r3, #6]
   35b30:	tst	r3, #64	; 0x40
   35b34:	bne	35970 <__assert_fail@plt+0x233ac>
   35b38:	mov	r2, #32
   35b3c:	mov	r1, #0
   35b40:	ldr	r0, [sp, #28]
   35b44:	bl	12348 <memset@plt>
   35b48:	b	35d44 <__assert_fail@plt+0x23780>
   35b4c:	add	r1, sp, #32
   35b50:	ldr	r3, [sp, #20]
   35b54:	add	r2, r3, #96	; 0x60
   35b58:	add	r0, r3, #128	; 0x80
   35b5c:	mov	ip, #0
   35b60:	ldr	r3, [r2], #4
   35b64:	ldr	lr, [r1]
   35b68:	and	r3, r3, lr
   35b6c:	str	r3, [r1], #4
   35b70:	orr	ip, ip, r3
   35b74:	cmp	r2, r0
   35b78:	bne	35b60 <__assert_fail@plt+0x2359c>
   35b7c:	b	359c0 <__assert_fail@plt+0x233fc>
   35b80:	ldr	r3, [sp, #16]
   35b84:	ldrb	r3, [r3, #6]
   35b88:	tst	r3, #64	; 0x40
   35b8c:	beq	359d8 <__assert_fail@plt+0x23414>
   35b90:	mov	r2, #32
   35b94:	mov	r1, #0
   35b98:	ldr	r0, [sp, #28]
   35b9c:	bl	12348 <memset@plt>
   35ba0:	b	35d44 <__assert_fail@plt+0x23780>
   35ba4:	add	r0, sp, #32
   35ba8:	ldr	r3, [sp, #20]
   35bac:	add	r2, r3, #96	; 0x60
   35bb0:	add	ip, r3, #128	; 0x80
   35bb4:	mov	r1, #0
   35bb8:	ldr	lr, [r2], #4
   35bbc:	ldr	r3, [r0]
   35bc0:	bic	r3, r3, lr
   35bc4:	str	r3, [r0], #4
   35bc8:	orr	r1, r1, r3
   35bcc:	cmp	r2, ip
   35bd0:	bne	35bb8 <__assert_fail@plt+0x235f4>
   35bd4:	b	35a24 <__assert_fail@plt+0x23460>
   35bd8:	ldr	r3, [sp, #16]
   35bdc:	ldrb	r2, [r3]
   35be0:	asr	r1, r2, #5
   35be4:	lsl	r3, r7, #5
   35be8:	add	r3, r3, r1, lsl #2
   35bec:	add	r1, sp, #14464	; 0x3880
   35bf0:	add	r1, r1, #48	; 0x30
   35bf4:	add	r3, r1, r3
   35bf8:	sub	r3, r3, #14336	; 0x3800
   35bfc:	and	r2, r2, #31
   35c00:	ldr	r3, [r3, #-48]	; 0xffffffd0
   35c04:	lsr	r2, r3, r2
   35c08:	tst	r2, #1
   35c0c:	beq	35c3c <__assert_fail@plt+0x23678>
   35c10:	b	35c58 <__assert_fail@plt+0x23694>
   35c14:	ldr	r3, [sp, #4]
   35c18:	ldr	r3, [r3, #12]
   35c1c:	ldr	r2, [sp, #8]
   35c20:	ldr	r1, [r3, r2]
   35c24:	mov	r0, r6
   35c28:	bl	34a64 <__assert_fail@plt+0x224a0>
   35c2c:	cmp	r0, #0
   35c30:	beq	35e6c <__assert_fail@plt+0x238a8>
   35c34:	cmp	r4, #0
   35c38:	beq	35d3c <__assert_fail@plt+0x23778>
   35c3c:	add	r7, r7, #1
   35c40:	add	r5, r5, #32
   35c44:	add	r6, r6, #12
   35c48:	cmp	r7, r8
   35c4c:	bge	35d3c <__assert_fail@plt+0x23778>
   35c50:	cmp	r9, #1
   35c54:	beq	35bd8 <__assert_fail@plt+0x23614>
   35c58:	add	r0, sp, #32
   35c5c:	add	r4, sp, #64	; 0x40
   35c60:	add	sl, r5, #32
   35c64:	mov	r1, r5
   35c68:	mov	lr, r0
   35c6c:	mov	ip, #0
   35c70:	ldr	r3, [lr], #4
   35c74:	ldr	r2, [r1, #4]!
   35c78:	and	r3, r3, r2
   35c7c:	str	r3, [r4], #4
   35c80:	orr	ip, ip, r3
   35c84:	cmp	r1, sl
   35c88:	bne	35c70 <__assert_fail@plt+0x236ac>
   35c8c:	cmp	ip, #0
   35c90:	beq	35c3c <__assert_fail@plt+0x23678>
   35c94:	add	fp, sp, #96	; 0x60
   35c98:	mov	ip, r5
   35c9c:	mov	r4, #0
   35ca0:	mov	sl, r4
   35ca4:	ldr	r3, [r0]
   35ca8:	ldr	r2, [ip, #4]!
   35cac:	bic	lr, r2, r3
   35cb0:	str	lr, [fp], #4
   35cb4:	orr	sl, sl, lr
   35cb8:	bic	r3, r3, r2
   35cbc:	str	r3, [r0], #4
   35cc0:	orr	r4, r4, r3
   35cc4:	cmp	ip, r1
   35cc8:	bne	35ca4 <__assert_fail@plt+0x236e0>
   35ccc:	cmp	sl, #0
   35cd0:	beq	35c14 <__assert_fail@plt+0x23650>
   35cd4:	add	r3, sp, #14464	; 0x3880
   35cd8:	add	r3, r3, #48	; 0x30
   35cdc:	add	ip, r3, r8, lsl #5
   35ce0:	sub	ip, ip, #14336	; 0x3800
   35ce4:	sub	ip, ip, #48	; 0x30
   35ce8:	add	lr, sp, #96	; 0x60
   35cec:	ldm	lr!, {r0, r1, r2, r3}
   35cf0:	stmia	ip!, {r0, r1, r2, r3}
   35cf4:	ldm	lr, {r0, r1, r2, r3}
   35cf8:	stm	ip, {r0, r1, r2, r3}
   35cfc:	add	ip, r5, #4
   35d00:	add	lr, sp, #64	; 0x40
   35d04:	ldm	lr!, {r0, r1, r2, r3}
   35d08:	stmia	ip!, {r0, r1, r2, r3}
   35d0c:	ldm	lr, {r0, r1, r2, r3}
   35d10:	stm	ip, {r0, r1, r2, r3}
   35d14:	add	r0, r8, r8, lsl #1
   35d18:	mov	r1, r6
   35d1c:	ldr	r3, [sp, #24]
   35d20:	add	r0, r3, r0, lsl #2
   35d24:	bl	32d50 <__assert_fail@plt+0x2078c>
   35d28:	cmp	r0, #0
   35d2c:	bne	35e6c <__assert_fail@plt+0x238a8>
   35d30:	add	r8, r8, #1
   35d34:	b	35c14 <__assert_fail@plt+0x23650>
   35d38:	mov	r7, #0
   35d3c:	cmp	r8, r7
   35d40:	beq	35e00 <__assert_fail@plt+0x2383c>
   35d44:	ldr	r3, [sp, #12]
   35d48:	add	r3, r3, #1
   35d4c:	mov	r2, r3
   35d50:	str	r3, [sp, #12]
   35d54:	ldr	r3, [sp, #4]
   35d58:	ldr	r3, [r3, #8]
   35d5c:	cmp	r2, r3
   35d60:	bge	35ea4 <__assert_fail@plt+0x238e0>
   35d64:	ldr	r2, [sp, #12]
   35d68:	lsl	r3, r2, #2
   35d6c:	str	r3, [sp, #8]
   35d70:	ldr	r3, [sp, #4]
   35d74:	ldr	r3, [r3, #12]
   35d78:	ldr	r2, [r3, r2, lsl #2]
   35d7c:	ldr	r3, [sp, #20]
   35d80:	ldr	r3, [r3]
   35d84:	add	r1, r3, r2, lsl #3
   35d88:	str	r1, [sp, #16]
   35d8c:	ldrb	r9, [r1, #4]
   35d90:	ldr	r4, [r1, #4]
   35d94:	lsl	r4, r4, #14
   35d98:	lsr	r4, r4, #22
   35d9c:	cmp	r9, #1
   35da0:	beq	35928 <__assert_fail@plt+0x23364>
   35da4:	cmp	r9, #3
   35da8:	beq	35a44 <__assert_fail@plt+0x23480>
   35dac:	cmp	r9, #5
   35db0:	beq	35a70 <__assert_fail@plt+0x234ac>
   35db4:	cmp	r9, #7
   35db8:	bne	35d44 <__assert_fail@plt+0x23780>
   35dbc:	mvn	r3, #0
   35dc0:	ldr	r2, [sp, #28]
   35dc4:	str	r3, [r2]
   35dc8:	str	r3, [r2, #4]
   35dcc:	str	r3, [r2, #8]
   35dd0:	str	r3, [r2, #12]
   35dd4:	ldr	r3, [sp, #20]
   35dd8:	ldr	r2, [r3, #128]	; 0x80
   35ddc:	tst	r2, #64	; 0x40
   35de0:	ldreq	r3, [sp, #32]
   35de4:	biceq	r3, r3, #1024	; 0x400
   35de8:	streq	r3, [sp, #32]
   35dec:	tst	r2, #128	; 0x80
   35df0:	ldrne	r3, [sp, #32]
   35df4:	bicne	r3, r3, #1
   35df8:	strne	r3, [sp, #32]
   35dfc:	b	35948 <__assert_fail@plt+0x23384>
   35e00:	add	r3, sp, #14464	; 0x3880
   35e04:	add	r3, r3, #48	; 0x30
   35e08:	add	ip, r3, r8, lsl #5
   35e0c:	sub	ip, ip, #14336	; 0x3800
   35e10:	sub	ip, ip, #48	; 0x30
   35e14:	add	lr, sp, #32
   35e18:	ldm	lr!, {r0, r1, r2, r3}
   35e1c:	stmia	ip!, {r0, r1, r2, r3}
   35e20:	ldm	lr, {r0, r1, r2, r3}
   35e24:	stm	ip, {r0, r1, r2, r3}
   35e28:	ldr	r3, [sp, #4]
   35e2c:	ldr	r3, [r3, #12]
   35e30:	add	r0, r8, r8, lsl #1
   35e34:	ldr	r2, [sp, #8]
   35e38:	ldr	r1, [r3, r2]
   35e3c:	ldr	r3, [sp, #24]
   35e40:	add	r0, r3, r0, lsl #2
   35e44:	bl	32480 <__assert_fail@plt+0x1febc>
   35e48:	cmp	r0, #0
   35e4c:	bne	35e68 <__assert_fail@plt+0x238a4>
   35e50:	add	r8, r8, #1
   35e54:	mov	r2, #32
   35e58:	mov	r1, #0
   35e5c:	ldr	r0, [sp, #28]
   35e60:	bl	12348 <memset@plt>
   35e64:	b	35d44 <__assert_fail@plt+0x23780>
   35e68:	mov	r8, r7
   35e6c:	cmp	r8, #0
   35e70:	ble	35e94 <__assert_fail@plt+0x238d0>
   35e74:	add	r4, sp, #8320	; 0x2080
   35e78:	mov	r5, #0
   35e7c:	ldr	r0, [r4, #8]
   35e80:	bl	2e3fc <__assert_fail@plt+0x1be38>
   35e84:	add	r5, r5, #1
   35e88:	add	r4, r4, #12
   35e8c:	cmp	r5, r8
   35e90:	bne	35e7c <__assert_fail@plt+0x238b8>
   35e94:	mov	r0, #0
   35e98:	add	sp, sp, #14464	; 0x3880
   35e9c:	add	sp, sp, #52	; 0x34
   35ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ea4:	ldr	r9, [sp, #20]
   35ea8:	cmp	r8, #0
   35eac:	ble	35f50 <__assert_fail@plt+0x2398c>
   35eb0:	add	r1, r8, #1
   35eb4:	add	r0, sp, #11392	; 0x2c80
   35eb8:	add	r0, r0, #32
   35ebc:	bl	324c4 <__assert_fail@plt+0x1ff00>
   35ec0:	add	r3, sp, #14464	; 0x3880
   35ec4:	add	r3, r3, #44	; 0x2c
   35ec8:	str	r0, [r3]
   35ecc:	cmp	r0, #0
   35ed0:	bne	35fcc <__assert_fail@plt+0x23a08>
   35ed4:	mov	r2, #32
   35ed8:	mov	r1, #0
   35edc:	add	r0, sp, #11392	; 0x2c80
   35ee0:	bl	12348 <memset@plt>
   35ee4:	add	r3, sp, #8320	; 0x2080
   35ee8:	str	r3, [sp, #20]
   35eec:	add	r6, sp, #124	; 0x7c
   35ef0:	add	r2, sp, #12416	; 0x3080
   35ef4:	add	r2, r2, #48	; 0x30
   35ef8:	sub	fp, r2, #4
   35efc:	add	r2, sp, #13440	; 0x3480
   35f00:	add	r2, r2, #48	; 0x30
   35f04:	sub	sl, r2, #8
   35f08:	mov	r7, r3
   35f0c:	mov	r3, #0
   35f10:	str	r3, [sp, #16]
   35f14:	str	r3, [sp, #8]
   35f18:	add	r3, sp, #11392	; 0x2c80
   35f1c:	add	r3, r3, #48	; 0x30
   35f20:	sub	r3, r3, #4
   35f24:	str	r3, [sp, #12]
   35f28:	add	r3, sp, #11392	; 0x2c80
   35f2c:	add	r3, r3, #36	; 0x24
   35f30:	mov	r2, #0
   35f34:	str	r2, [r3]
   35f38:	mov	r5, r7
   35f3c:	ldr	r3, [r7, #4]
   35f40:	cmp	r3, r2
   35f44:	ble	36004 <__assert_fail@plt+0x23a40>
   35f48:	mov	r4, r2
   35f4c:	b	35f88 <__assert_fail@plt+0x239c4>
   35f50:	movne	r0, #0
   35f54:	bne	35e98 <__assert_fail@plt+0x238d4>
   35f58:	mov	r1, #256	; 0x100
   35f5c:	mov	r0, #4
   35f60:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   35f64:	ldr	r3, [sp, #4]
   35f68:	str	r0, [r3, #44]	; 0x2c
   35f6c:	adds	r0, r0, #0
   35f70:	movne	r0, #1
   35f74:	b	35e98 <__assert_fail@plt+0x238d4>
   35f78:	add	r4, r4, #1
   35f7c:	ldr	r3, [r5, #4]
   35f80:	cmp	r3, r4
   35f84:	ble	36004 <__assert_fail@plt+0x23a40>
   35f88:	ldr	r3, [r5, #8]
   35f8c:	ldr	r2, [r3, r4, lsl #2]
   35f90:	ldr	r3, [r9, #12]
   35f94:	ldr	r1, [r3, r2, lsl #2]
   35f98:	cmn	r1, #1
   35f9c:	beq	35f78 <__assert_fail@plt+0x239b4>
   35fa0:	add	r1, r1, r1, lsl #1
   35fa4:	ldr	r3, [r9, #24]
   35fa8:	add	r1, r3, r1, lsl #2
   35fac:	add	r0, sp, #11392	; 0x2c80
   35fb0:	add	r0, r0, #32
   35fb4:	bl	34fa8 <__assert_fail@plt+0x229e4>
   35fb8:	add	r3, sp, #14464	; 0x3880
   35fbc:	add	r3, r3, #44	; 0x2c
   35fc0:	str	r0, [r3]
   35fc4:	cmp	r0, #0
   35fc8:	beq	35f78 <__assert_fail@plt+0x239b4>
   35fcc:	add	r3, sp, #11392	; 0x2c80
   35fd0:	add	r3, r3, #40	; 0x28
   35fd4:	ldr	r0, [r3]
   35fd8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   35fdc:	add	r4, sp, #8320	; 0x2080
   35fe0:	mov	r5, #0
   35fe4:	ldr	r0, [r4, #8]
   35fe8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   35fec:	add	r5, r5, #1
   35ff0:	add	r4, r4, #12
   35ff4:	cmp	r5, r8
   35ff8:	bne	35fe4 <__assert_fail@plt+0x23a20>
   35ffc:	mov	r0, #0
   36000:	b	35e98 <__assert_fail@plt+0x238d4>
   36004:	mov	r3, #0
   36008:	add	r2, sp, #11392	; 0x2c80
   3600c:	add	r2, r2, #32
   36010:	mov	r1, r9
   36014:	add	r0, sp, #14464	; 0x3880
   36018:	add	r0, r0, #44	; 0x2c
   3601c:	bl	34108 <__assert_fail@plt+0x21b44>
   36020:	mov	r4, r0
   36024:	str	r0, [sl, #4]!
   36028:	cmp	r0, #0
   3602c:	beq	360cc <__assert_fail@plt+0x23b08>
   36030:	ldrsb	r3, [r4, #52]	; 0x34
   36034:	cmp	r3, #0
   36038:	blt	360e4 <__assert_fail@plt+0x23b20>
   3603c:	str	r4, [fp]
   36040:	ldr	r3, [sp, #12]
   36044:	ldr	r2, [sp, #8]
   36048:	str	r4, [r3, r2, lsl #2]
   3604c:	add	r4, sp, #11392	; 0x2c80
   36050:	add	r0, r6, #32
   36054:	mov	r1, r4
   36058:	ldr	r3, [r1]
   3605c:	ldr	r2, [r6, #4]!
   36060:	orr	r3, r3, r2
   36064:	str	r3, [r1], #4
   36068:	cmp	r0, r6
   3606c:	bne	36058 <__assert_fail@plt+0x23a94>
   36070:	ldr	r3, [sp, #8]
   36074:	add	r3, r3, #1
   36078:	str	r3, [sp, #8]
   3607c:	add	r7, r7, #12
   36080:	add	fp, fp, #4
   36084:	mov	r6, r0
   36088:	cmp	r3, r8
   3608c:	bne	35f28 <__assert_fail@plt+0x23964>
   36090:	ldr	r3, [sp, #16]
   36094:	cmp	r3, #0
   36098:	bne	3621c <__assert_fail@plt+0x23c58>
   3609c:	mov	r1, #256	; 0x100
   360a0:	mov	r0, #4
   360a4:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   360a8:	ldr	r3, [sp, #4]
   360ac:	str	r0, [r3, #44]	; 0x2c
   360b0:	cmp	r0, #0
   360b4:	beq	35fcc <__assert_fail@plt+0x23a08>
   360b8:	mov	r2, r0
   360bc:	add	r1, r9, #96	; 0x60
   360c0:	add	r7, sp, #128	; 0x80
   360c4:	add	sl, r0, #1024	; 0x400
   360c8:	b	36204 <__assert_fail@plt+0x23c40>
   360cc:	add	r3, sp, #14464	; 0x3880
   360d0:	add	r3, r3, #44	; 0x2c
   360d4:	ldr	r3, [r3]
   360d8:	cmp	r3, #0
   360dc:	beq	36030 <__assert_fail@plt+0x23a6c>
   360e0:	b	35fcc <__assert_fail@plt+0x23a08>
   360e4:	mov	r3, #1
   360e8:	add	r2, sp, #11392	; 0x2c80
   360ec:	add	r2, r2, #32
   360f0:	mov	r1, r9
   360f4:	add	r0, sp, #14464	; 0x3880
   360f8:	add	r0, r0, #44	; 0x2c
   360fc:	bl	34108 <__assert_fail@plt+0x21b44>
   36100:	str	r0, [fp]
   36104:	cmp	r0, #0
   36108:	beq	36170 <__assert_fail@plt+0x23bac>
   3610c:	cmp	r4, r0
   36110:	beq	36128 <__assert_fail@plt+0x23b64>
   36114:	ldr	r3, [r9, #92]	; 0x5c
   36118:	ldr	r2, [sp, #16]
   3611c:	cmp	r3, #1
   36120:	movgt	r2, #1
   36124:	str	r2, [sp, #16]
   36128:	mov	r3, #2
   3612c:	add	r2, sp, #11392	; 0x2c80
   36130:	add	r2, r2, #32
   36134:	mov	r1, r9
   36138:	add	r0, sp, #14464	; 0x3880
   3613c:	add	r0, r0, #44	; 0x2c
   36140:	bl	34108 <__assert_fail@plt+0x21b44>
   36144:	ldr	r3, [sp, #12]
   36148:	ldr	r2, [sp, #8]
   3614c:	str	r0, [r3, r2, lsl #2]
   36150:	cmp	r0, #0
   36154:	bne	3604c <__assert_fail@plt+0x23a88>
   36158:	add	r3, sp, #14464	; 0x3880
   3615c:	add	r3, r3, #44	; 0x2c
   36160:	ldr	r3, [r3]
   36164:	cmp	r3, #0
   36168:	beq	3604c <__assert_fail@plt+0x23a88>
   3616c:	b	35fcc <__assert_fail@plt+0x23a08>
   36170:	add	r3, sp, #14464	; 0x3880
   36174:	add	r3, r3, #44	; 0x2c
   36178:	ldr	r3, [r3]
   3617c:	cmp	r3, #0
   36180:	beq	3610c <__assert_fail@plt+0x23b48>
   36184:	b	35fcc <__assert_fail@plt+0x23a08>
   36188:	mov	r3, #0
   3618c:	b	361cc <__assert_fail@plt+0x23c08>
   36190:	lsl	lr, lr, #1
   36194:	add	r8, r8, #4
   36198:	lsrs	r6, r6, #1
   3619c:	beq	361f0 <__assert_fail@plt+0x23c2c>
   361a0:	tst	r6, #1
   361a4:	beq	36190 <__assert_fail@plt+0x23bcc>
   361a8:	mov	r5, r7
   361ac:	ldr	r3, [r7]
   361b0:	tst	lr, r3
   361b4:	bne	36188 <__assert_fail@plt+0x23bc4>
   361b8:	mov	r3, #0
   361bc:	add	r3, r3, #1
   361c0:	ldr	ip, [r5, r3, lsl #5]
   361c4:	tst	lr, ip
   361c8:	beq	361bc <__assert_fail@plt+0x23bf8>
   361cc:	ldr	ip, [r1]
   361d0:	tst	lr, ip
   361d4:	add	ip, sp, #14464	; 0x3880
   361d8:	add	ip, ip, #48	; 0x30
   361dc:	add	r3, ip, r3, lsl #2
   361e0:	ldrne	r3, [r3, #-2052]	; 0xfffff7fc
   361e4:	ldreq	r3, [r3, #-1028]	; 0xfffffbfc
   361e8:	str	r3, [r8]
   361ec:	b	36190 <__assert_fail@plt+0x23bcc>
   361f0:	add	r2, r2, #128	; 0x80
   361f4:	add	r1, r1, #4
   361f8:	add	r7, r7, #4
   361fc:	cmp	r2, sl
   36200:	beq	36280 <__assert_fail@plt+0x23cbc>
   36204:	ldr	r6, [r4], #4
   36208:	cmp	r6, #0
   3620c:	beq	361f0 <__assert_fail@plt+0x23c2c>
   36210:	mov	r8, r2
   36214:	mov	lr, #1
   36218:	b	361a0 <__assert_fail@plt+0x23bdc>
   3621c:	mov	r1, #512	; 0x200
   36220:	mov	r0, #4
   36224:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   36228:	ldr	r3, [sp, #4]
   3622c:	str	r0, [r3, #48]	; 0x30
   36230:	cmp	r0, #0
   36234:	beq	35fcc <__assert_fail@plt+0x23a08>
   36238:	mov	r5, r0
   3623c:	add	ip, sp, #128	; 0x80
   36240:	add	r7, r0, #1024	; 0x400
   36244:	ldr	r6, [r4], #4
   36248:	cmp	r6, #0
   3624c:	beq	36270 <__assert_fail@plt+0x23cac>
   36250:	mov	r8, r5
   36254:	mov	r1, #1
   36258:	tst	r6, #1
   3625c:	bne	362a8 <__assert_fail@plt+0x23ce4>
   36260:	lsl	r1, r1, #1
   36264:	add	r8, r8, #4
   36268:	lsrs	r6, r6, #1
   3626c:	bne	36258 <__assert_fail@plt+0x23c94>
   36270:	add	r5, r5, #128	; 0x80
   36274:	add	ip, ip, #4
   36278:	cmp	r7, r5
   3627c:	bne	36244 <__assert_fail@plt+0x23c80>
   36280:	add	r3, sp, #11392	; 0x2c80
   36284:	ldr	r3, [r3]
   36288:	tst	r3, #1024	; 0x400
   3628c:	beq	36338 <__assert_fail@plt+0x23d74>
   36290:	ldr	r3, [sp, #128]	; 0x80
   36294:	tst	r3, #1024	; 0x400
   36298:	bne	36314 <__assert_fail@plt+0x23d50>
   3629c:	mov	r3, #0
   362a0:	add	r2, sp, #128	; 0x80
   362a4:	b	36300 <__assert_fail@plt+0x23d3c>
   362a8:	mov	lr, ip
   362ac:	ldr	r3, [ip]
   362b0:	tst	r1, r3
   362b4:	bne	362ec <__assert_fail@plt+0x23d28>
   362b8:	mov	r3, #0
   362bc:	add	r3, r3, #1
   362c0:	ldr	r2, [lr, r3, lsl #5]
   362c4:	tst	r1, r2
   362c8:	beq	362bc <__assert_fail@plt+0x23cf8>
   362cc:	add	r2, sp, #14464	; 0x3880
   362d0:	add	r2, r2, #48	; 0x30
   362d4:	add	r3, r2, r3, lsl #2
   362d8:	ldr	r2, [r3, #-1028]	; 0xfffffbfc
   362dc:	str	r2, [r8]
   362e0:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   362e4:	str	r3, [r8, #1024]	; 0x400
   362e8:	b	36260 <__assert_fail@plt+0x23c9c>
   362ec:	mov	r3, #0
   362f0:	b	362cc <__assert_fail@plt+0x23d08>
   362f4:	ldr	r1, [r2, r3, lsl #5]
   362f8:	tst	r1, #1024	; 0x400
   362fc:	bne	36318 <__assert_fail@plt+0x23d54>
   36300:	add	r3, r3, #1
   36304:	ldr	r1, [sp, #8]
   36308:	cmp	r1, r3
   3630c:	bne	362f4 <__assert_fail@plt+0x23d30>
   36310:	b	36338 <__assert_fail@plt+0x23d74>
   36314:	mov	r3, #0
   36318:	add	r2, sp, #14464	; 0x3880
   3631c:	add	r2, r2, #48	; 0x30
   36320:	add	r3, r2, r3, lsl #2
   36324:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   36328:	str	r3, [r0, #40]	; 0x28
   3632c:	ldr	r2, [sp, #16]
   36330:	cmp	r2, #0
   36334:	strne	r3, [r0, #1064]	; 0x428
   36338:	add	r3, sp, #11392	; 0x2c80
   3633c:	add	r3, r3, #40	; 0x28
   36340:	ldr	r0, [r3]
   36344:	bl	2e3fc <__assert_fail@plt+0x1be38>
   36348:	mov	r4, #0
   3634c:	ldr	r5, [sp, #20]
   36350:	ldr	r6, [sp, #8]
   36354:	ldr	r0, [r5, #8]
   36358:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3635c:	add	r4, r4, #1
   36360:	add	r5, r5, #12
   36364:	cmp	r6, r4
   36368:	bne	36354 <__assert_fail@plt+0x23d90>
   3636c:	mov	r0, #1
   36370:	b	35e98 <__assert_fail@plt+0x238d4>
   36374:	push	{r4, r5, r6, r7, r8, lr}
   36378:	mov	r4, r0
   3637c:	mov	r5, r1
   36380:	mov	r1, r2
   36384:	ldr	r2, [r0, #88]	; 0x58
   36388:	bl	3537c <__assert_fail@plt+0x22db8>
   3638c:	ldr	lr, [r5, #8]
   36390:	cmp	lr, #0
   36394:	ble	3643c <__assert_fail@plt+0x23e78>
   36398:	ldr	r3, [r4, #84]	; 0x54
   3639c:	ldr	r4, [r3]
   363a0:	ldr	ip, [r5, #12]
   363a4:	sub	ip, ip, #4
   363a8:	mov	r1, #0
   363ac:	and	r7, r0, #8
   363b0:	and	r6, r0, #2
   363b4:	and	r5, r0, #1
   363b8:	b	363f8 <__assert_fail@plt+0x23e34>
   363bc:	tst	r3, #8
   363c0:	beq	363cc <__assert_fail@plt+0x23e08>
   363c4:	cmp	r5, #0
   363c8:	bne	363ec <__assert_fail@plt+0x23e28>
   363cc:	tst	r3, #32
   363d0:	beq	363dc <__assert_fail@plt+0x23e18>
   363d4:	cmp	r6, #0
   363d8:	beq	363ec <__assert_fail@plt+0x23e28>
   363dc:	tst	r3, #128	; 0x80
   363e0:	popeq	{r4, r5, r6, r7, r8, pc}
   363e4:	cmp	r7, #0
   363e8:	popne	{r4, r5, r6, r7, r8, pc}
   363ec:	add	r1, r1, #1
   363f0:	cmp	lr, r1
   363f4:	beq	36444 <__assert_fail@plt+0x23e80>
   363f8:	ldr	r0, [ip, #4]!
   363fc:	add	r2, r4, r0, lsl #3
   36400:	ldr	r3, [r2, #4]
   36404:	lsl	r3, r3, #14
   36408:	lsr	r3, r3, #22
   3640c:	ldrb	r2, [r2, #4]
   36410:	cmp	r2, #2
   36414:	bne	363ec <__assert_fail@plt+0x23e28>
   36418:	cmp	r3, #0
   3641c:	popeq	{r4, r5, r6, r7, r8, pc}
   36420:	tst	r3, #4
   36424:	beq	363bc <__assert_fail@plt+0x23df8>
   36428:	cmp	r5, #0
   3642c:	beq	363ec <__assert_fail@plt+0x23e28>
   36430:	tst	r3, #8
   36434:	bne	363ec <__assert_fail@plt+0x23e28>
   36438:	b	363cc <__assert_fail@plt+0x23e08>
   3643c:	mov	r0, #0
   36440:	pop	{r4, r5, r6, r7, r8, pc}
   36444:	mov	r0, #0
   36448:	pop	{r4, r5, r6, r7, r8, pc}
   3644c:	push	{r4, r5, r6, r7, r8, lr}
   36450:	ldr	r7, [sp, #28]
   36454:	subs	r5, r0, #0
   36458:	beq	364f8 <__assert_fail@plt+0x23f34>
   3645c:	ldr	r4, [r5]
   36460:	cmp	r4, #0
   36464:	beq	36500 <__assert_fail@plt+0x23f3c>
   36468:	mov	r0, r3
   3646c:	sub	r4, r4, #1
   36470:	str	r4, [r5]
   36474:	add	r4, r4, r4, lsl #1
   36478:	lsl	r4, r4, #3
   3647c:	ldr	r3, [r5, #8]
   36480:	ldr	r3, [r3, r4]
   36484:	str	r3, [r1]
   36488:	lsl	r6, r2, #3
   3648c:	ldr	r3, [r5, #8]
   36490:	add	r3, r3, r4
   36494:	mov	r2, r6
   36498:	ldr	r1, [r3, #8]
   3649c:	bl	12000 <memcpy@plt>
   364a0:	ldr	r3, [r5, #8]
   364a4:	add	r3, r3, r4
   364a8:	ldr	r1, [r3, #8]
   364ac:	mov	r2, r6
   364b0:	add	r1, r1, r6
   364b4:	ldr	r0, [sp, #24]
   364b8:	bl	12000 <memcpy@plt>
   364bc:	ldr	r0, [r7, #8]
   364c0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   364c4:	ldr	r3, [r5, #8]
   364c8:	add	r3, r3, r4
   364cc:	ldr	r0, [r3, #8]
   364d0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   364d4:	ldr	r3, [r5, #8]
   364d8:	add	r3, r3, r4
   364dc:	add	r3, r3, #12
   364e0:	ldm	r3, {r0, r1, r2}
   364e4:	stm	r7, {r0, r1, r2}
   364e8:	ldr	r3, [r5, #8]
   364ec:	add	r4, r3, r4
   364f0:	ldr	r0, [r4, #4]
   364f4:	pop	{r4, r5, r6, r7, r8, pc}
   364f8:	mvn	r0, #0
   364fc:	pop	{r4, r5, r6, r7, r8, pc}
   36500:	mvn	r0, #0
   36504:	pop	{r4, r5, r6, r7, r8, pc}
   36508:	push	{r4, r5, r6, r7, r8, lr}
   3650c:	mov	r6, r0
   36510:	mov	r5, r1
   36514:	mov	r4, r2
   36518:	mov	r8, r3
   3651c:	ldr	r3, [sp, #28]
   36520:	tst	r3, #4194304	; 0x400000
   36524:	beq	3655c <__assert_fail@plt+0x23f98>
   36528:	ldr	r1, [pc, #2780]	; 3700c <__assert_fail@plt+0x24a48>
   3652c:	ldr	r0, [sp, #24]
   36530:	bl	11f1c <strcmp@plt>
   36534:	cmp	r0, #0
   36538:	beq	365b0 <__assert_fail@plt+0x23fec>
   3653c:	ldr	r1, [pc, #2764]	; 37010 <__assert_fail@plt+0x24a4c>
   36540:	ldr	r0, [sp, #24]
   36544:	bl	11f1c <strcmp@plt>
   36548:	ldr	r3, [pc, #2756]	; 37014 <__assert_fail@plt+0x24a50>
   3654c:	ldr	r2, [sp, #24]
   36550:	cmp	r0, #0
   36554:	moveq	r2, r3
   36558:	str	r2, [sp, #24]
   3655c:	ldr	r3, [r8]
   36560:	ldr	r2, [r4, #36]	; 0x24
   36564:	cmp	r3, r2
   36568:	beq	365bc <__assert_fail@plt+0x23ff8>
   3656c:	ldr	r8, [r4, #12]
   36570:	ldr	r7, [r4, #36]	; 0x24
   36574:	add	r3, r7, #1
   36578:	str	r3, [r4, #36]	; 0x24
   3657c:	ldr	r0, [sp, #24]
   36580:	bl	11ebc <wctype@plt>
   36584:	str	r0, [r8, r7, lsl #2]
   36588:	ldr	r1, [pc, #2696]	; 37018 <__assert_fail@plt+0x24a54>
   3658c:	ldr	r0, [sp, #24]
   36590:	bl	11f1c <strcmp@plt>
   36594:	subs	r4, r0, #0
   36598:	bne	36698 <__assert_fail@plt+0x240d4>
   3659c:	cmp	r6, #0
   365a0:	bne	365e4 <__assert_fail@plt+0x24020>
   365a4:	bl	12288 <__ctype_b_loc@plt>
   365a8:	mov	ip, #1
   365ac:	b	36648 <__assert_fail@plt+0x24084>
   365b0:	ldr	r3, [pc, #2652]	; 37014 <__assert_fail@plt+0x24a50>
   365b4:	str	r3, [sp, #24]
   365b8:	b	3655c <__assert_fail@plt+0x23f98>
   365bc:	lsl	r3, r3, #1
   365c0:	add	r7, r3, #1
   365c4:	lsl	r1, r7, #2
   365c8:	ldr	r0, [r4, #12]
   365cc:	bl	31320 <__assert_fail@plt+0x1ed5c>
   365d0:	cmp	r0, #0
   365d4:	beq	36ffc <__assert_fail@plt+0x24a38>
   365d8:	str	r0, [r4, #12]
   365dc:	str	r7, [r8]
   365e0:	b	3656c <__assert_fail@plt+0x23fa8>
   365e4:	bl	12288 <__ctype_b_loc@plt>
   365e8:	mov	r2, r6
   365ec:	mov	r3, #0
   365f0:	mov	r4, #1
   365f4:	b	36608 <__assert_fail@plt+0x24044>
   365f8:	add	r3, r3, #2
   365fc:	add	r2, r2, #1
   36600:	cmp	r3, #512	; 0x200
   36604:	beq	36634 <__assert_fail@plt+0x24070>
   36608:	ldr	r1, [r0]
   3660c:	ldrh	r1, [r1, r3]
   36610:	tst	r1, #8
   36614:	beq	365f8 <__assert_fail@plt+0x24034>
   36618:	ldrb	r1, [r2]
   3661c:	asr	lr, r1, #5
   36620:	and	r1, r1, #31
   36624:	ldr	ip, [r5, lr, lsl #2]
   36628:	orr	r1, ip, r4, lsl r1
   3662c:	str	r1, [r5, lr, lsl #2]
   36630:	b	365f8 <__assert_fail@plt+0x24034>
   36634:	mov	r0, #0
   36638:	pop	{r4, r5, r6, r7, r8, pc}
   3663c:	add	r4, r4, #1
   36640:	cmp	r4, #256	; 0x100
   36644:	beq	36690 <__assert_fail@plt+0x240cc>
   36648:	ldr	r2, [r0]
   3664c:	lsl	r3, r4, #1
   36650:	ldrh	r3, [r2, r3]
   36654:	tst	r3, #8
   36658:	beq	3663c <__assert_fail@plt+0x24078>
   3665c:	add	r3, r4, #31
   36660:	cmp	r4, #0
   36664:	movge	r3, r4
   36668:	asr	r3, r3, #5
   3666c:	asr	r2, r4, #31
   36670:	lsr	r1, r2, #27
   36674:	add	r2, r4, r1
   36678:	and	r2, r2, #31
   3667c:	sub	r2, r2, r1
   36680:	ldr	r1, [r5, r3, lsl #2]
   36684:	orr	r2, r1, ip, lsl r2
   36688:	str	r2, [r5, r3, lsl #2]
   3668c:	b	3663c <__assert_fail@plt+0x24078>
   36690:	mov	r0, #0
   36694:	pop	{r4, r5, r6, r7, r8, pc}
   36698:	ldr	r1, [pc, #2428]	; 3701c <__assert_fail@plt+0x24a58>
   3669c:	ldr	r0, [sp, #24]
   366a0:	bl	11f1c <strcmp@plt>
   366a4:	subs	r4, r0, #0
   366a8:	bne	36774 <__assert_fail@plt+0x241b0>
   366ac:	cmp	r6, #0
   366b0:	bne	366c0 <__assert_fail@plt+0x240fc>
   366b4:	bl	12288 <__ctype_b_loc@plt>
   366b8:	mov	ip, #1
   366bc:	b	36724 <__assert_fail@plt+0x24160>
   366c0:	bl	12288 <__ctype_b_loc@plt>
   366c4:	mov	r2, r6
   366c8:	mov	r3, #0
   366cc:	mov	r4, #1
   366d0:	b	366e4 <__assert_fail@plt+0x24120>
   366d4:	add	r3, r3, #2
   366d8:	add	r2, r2, #1
   366dc:	cmp	r3, #512	; 0x200
   366e0:	beq	36710 <__assert_fail@plt+0x2414c>
   366e4:	ldr	r1, [r0]
   366e8:	ldrh	r1, [r1, r3]
   366ec:	tst	r1, #2
   366f0:	beq	366d4 <__assert_fail@plt+0x24110>
   366f4:	ldrb	r1, [r2]
   366f8:	asr	lr, r1, #5
   366fc:	and	r1, r1, #31
   36700:	ldr	ip, [r5, lr, lsl #2]
   36704:	orr	r1, ip, r4, lsl r1
   36708:	str	r1, [r5, lr, lsl #2]
   3670c:	b	366d4 <__assert_fail@plt+0x24110>
   36710:	mov	r0, #0
   36714:	pop	{r4, r5, r6, r7, r8, pc}
   36718:	add	r4, r4, #1
   3671c:	cmp	r4, #256	; 0x100
   36720:	beq	3676c <__assert_fail@plt+0x241a8>
   36724:	ldr	r2, [r0]
   36728:	lsl	r3, r4, #1
   3672c:	ldrh	r3, [r2, r3]
   36730:	tst	r3, #2
   36734:	beq	36718 <__assert_fail@plt+0x24154>
   36738:	add	r3, r4, #31
   3673c:	cmp	r4, #0
   36740:	movge	r3, r4
   36744:	asr	r3, r3, #5
   36748:	asr	r2, r4, #31
   3674c:	lsr	r1, r2, #27
   36750:	add	r2, r4, r1
   36754:	and	r2, r2, #31
   36758:	sub	r2, r2, r1
   3675c:	ldr	r1, [r5, r3, lsl #2]
   36760:	orr	r2, r1, ip, lsl r2
   36764:	str	r2, [r5, r3, lsl #2]
   36768:	b	36718 <__assert_fail@plt+0x24154>
   3676c:	mov	r0, #0
   36770:	pop	{r4, r5, r6, r7, r8, pc}
   36774:	ldr	r1, [pc, #2196]	; 37010 <__assert_fail@plt+0x24a4c>
   36778:	ldr	r0, [sp, #24]
   3677c:	bl	11f1c <strcmp@plt>
   36780:	subs	r4, r0, #0
   36784:	bne	36850 <__assert_fail@plt+0x2428c>
   36788:	cmp	r6, #0
   3678c:	bne	3679c <__assert_fail@plt+0x241d8>
   36790:	bl	12288 <__ctype_b_loc@plt>
   36794:	mov	ip, #1
   36798:	b	36800 <__assert_fail@plt+0x2423c>
   3679c:	bl	12288 <__ctype_b_loc@plt>
   367a0:	mov	r2, r6
   367a4:	mov	r3, #0
   367a8:	mov	r4, #1
   367ac:	b	367c0 <__assert_fail@plt+0x241fc>
   367b0:	add	r3, r3, #2
   367b4:	add	r2, r2, #1
   367b8:	cmp	r3, #512	; 0x200
   367bc:	beq	367ec <__assert_fail@plt+0x24228>
   367c0:	ldr	r1, [r0]
   367c4:	ldrh	r1, [r1, r3]
   367c8:	tst	r1, #512	; 0x200
   367cc:	beq	367b0 <__assert_fail@plt+0x241ec>
   367d0:	ldrb	r1, [r2]
   367d4:	asr	lr, r1, #5
   367d8:	and	r1, r1, #31
   367dc:	ldr	ip, [r5, lr, lsl #2]
   367e0:	orr	r1, ip, r4, lsl r1
   367e4:	str	r1, [r5, lr, lsl #2]
   367e8:	b	367b0 <__assert_fail@plt+0x241ec>
   367ec:	mov	r0, #0
   367f0:	pop	{r4, r5, r6, r7, r8, pc}
   367f4:	add	r4, r4, #1
   367f8:	cmp	r4, #256	; 0x100
   367fc:	beq	36848 <__assert_fail@plt+0x24284>
   36800:	ldr	r2, [r0]
   36804:	lsl	r3, r4, #1
   36808:	ldrh	r3, [r2, r3]
   3680c:	tst	r3, #512	; 0x200
   36810:	beq	367f4 <__assert_fail@plt+0x24230>
   36814:	add	r3, r4, #31
   36818:	cmp	r4, #0
   3681c:	movge	r3, r4
   36820:	asr	r3, r3, #5
   36824:	asr	r2, r4, #31
   36828:	lsr	r1, r2, #27
   3682c:	add	r2, r4, r1
   36830:	and	r2, r2, #31
   36834:	sub	r2, r2, r1
   36838:	ldr	r1, [r5, r3, lsl #2]
   3683c:	orr	r2, r1, ip, lsl r2
   36840:	str	r2, [r5, r3, lsl #2]
   36844:	b	367f4 <__assert_fail@plt+0x24230>
   36848:	mov	r0, #0
   3684c:	pop	{r4, r5, r6, r7, r8, pc}
   36850:	ldr	r1, [pc, #1992]	; 37020 <__assert_fail@plt+0x24a5c>
   36854:	ldr	r0, [sp, #24]
   36858:	bl	11f1c <strcmp@plt>
   3685c:	subs	r4, r0, #0
   36860:	bne	3692c <__assert_fail@plt+0x24368>
   36864:	cmp	r6, #0
   36868:	bne	36878 <__assert_fail@plt+0x242b4>
   3686c:	bl	12288 <__ctype_b_loc@plt>
   36870:	mov	ip, #1
   36874:	b	368dc <__assert_fail@plt+0x24318>
   36878:	bl	12288 <__ctype_b_loc@plt>
   3687c:	mov	r2, r6
   36880:	mov	r3, #0
   36884:	mov	r4, #1
   36888:	b	3689c <__assert_fail@plt+0x242d8>
   3688c:	add	r3, r3, #2
   36890:	add	r2, r2, #1
   36894:	cmp	r3, #512	; 0x200
   36898:	beq	368c8 <__assert_fail@plt+0x24304>
   3689c:	ldr	r1, [r0]
   368a0:	ldrh	r1, [r1, r3]
   368a4:	tst	r1, #8192	; 0x2000
   368a8:	beq	3688c <__assert_fail@plt+0x242c8>
   368ac:	ldrb	r1, [r2]
   368b0:	asr	lr, r1, #5
   368b4:	and	r1, r1, #31
   368b8:	ldr	ip, [r5, lr, lsl #2]
   368bc:	orr	r1, ip, r4, lsl r1
   368c0:	str	r1, [r5, lr, lsl #2]
   368c4:	b	3688c <__assert_fail@plt+0x242c8>
   368c8:	mov	r0, #0
   368cc:	pop	{r4, r5, r6, r7, r8, pc}
   368d0:	add	r4, r4, #1
   368d4:	cmp	r4, #256	; 0x100
   368d8:	beq	36924 <__assert_fail@plt+0x24360>
   368dc:	ldr	r2, [r0]
   368e0:	lsl	r3, r4, #1
   368e4:	ldrh	r3, [r2, r3]
   368e8:	tst	r3, #8192	; 0x2000
   368ec:	beq	368d0 <__assert_fail@plt+0x2430c>
   368f0:	add	r3, r4, #31
   368f4:	cmp	r4, #0
   368f8:	movge	r3, r4
   368fc:	asr	r3, r3, #5
   36900:	asr	r2, r4, #31
   36904:	lsr	r1, r2, #27
   36908:	add	r2, r4, r1
   3690c:	and	r2, r2, #31
   36910:	sub	r2, r2, r1
   36914:	ldr	r1, [r5, r3, lsl #2]
   36918:	orr	r2, r1, ip, lsl r2
   3691c:	str	r2, [r5, r3, lsl #2]
   36920:	b	368d0 <__assert_fail@plt+0x2430c>
   36924:	mov	r0, #0
   36928:	pop	{r4, r5, r6, r7, r8, pc}
   3692c:	ldr	r1, [pc, #1760]	; 37014 <__assert_fail@plt+0x24a50>
   36930:	ldr	r0, [sp, #24]
   36934:	bl	11f1c <strcmp@plt>
   36938:	subs	r4, r0, #0
   3693c:	bne	36a08 <__assert_fail@plt+0x24444>
   36940:	cmp	r6, #0
   36944:	bne	36954 <__assert_fail@plt+0x24390>
   36948:	bl	12288 <__ctype_b_loc@plt>
   3694c:	mov	ip, #1
   36950:	b	369b8 <__assert_fail@plt+0x243f4>
   36954:	bl	12288 <__ctype_b_loc@plt>
   36958:	mov	r2, r6
   3695c:	mov	r3, #0
   36960:	mov	r4, #1
   36964:	b	36978 <__assert_fail@plt+0x243b4>
   36968:	add	r3, r3, #2
   3696c:	add	r2, r2, #1
   36970:	cmp	r3, #512	; 0x200
   36974:	beq	369a4 <__assert_fail@plt+0x243e0>
   36978:	ldr	r1, [r0]
   3697c:	ldrh	r1, [r1, r3]
   36980:	tst	r1, #1024	; 0x400
   36984:	beq	36968 <__assert_fail@plt+0x243a4>
   36988:	ldrb	r1, [r2]
   3698c:	asr	lr, r1, #5
   36990:	and	r1, r1, #31
   36994:	ldr	ip, [r5, lr, lsl #2]
   36998:	orr	r1, ip, r4, lsl r1
   3699c:	str	r1, [r5, lr, lsl #2]
   369a0:	b	36968 <__assert_fail@plt+0x243a4>
   369a4:	mov	r0, #0
   369a8:	pop	{r4, r5, r6, r7, r8, pc}
   369ac:	add	r4, r4, #1
   369b0:	cmp	r4, #256	; 0x100
   369b4:	beq	36a00 <__assert_fail@plt+0x2443c>
   369b8:	ldr	r2, [r0]
   369bc:	lsl	r3, r4, #1
   369c0:	ldrh	r3, [r2, r3]
   369c4:	tst	r3, #1024	; 0x400
   369c8:	beq	369ac <__assert_fail@plt+0x243e8>
   369cc:	add	r3, r4, #31
   369d0:	cmp	r4, #0
   369d4:	movge	r3, r4
   369d8:	asr	r3, r3, #5
   369dc:	asr	r2, r4, #31
   369e0:	lsr	r1, r2, #27
   369e4:	add	r2, r4, r1
   369e8:	and	r2, r2, #31
   369ec:	sub	r2, r2, r1
   369f0:	ldr	r1, [r5, r3, lsl #2]
   369f4:	orr	r2, r1, ip, lsl r2
   369f8:	str	r2, [r5, r3, lsl #2]
   369fc:	b	369ac <__assert_fail@plt+0x243e8>
   36a00:	mov	r0, #0
   36a04:	pop	{r4, r5, r6, r7, r8, pc}
   36a08:	ldr	r1, [pc, #1556]	; 37024 <__assert_fail@plt+0x24a60>
   36a0c:	ldr	r0, [sp, #24]
   36a10:	bl	11f1c <strcmp@plt>
   36a14:	subs	r4, r0, #0
   36a18:	bne	36ae4 <__assert_fail@plt+0x24520>
   36a1c:	cmp	r6, #0
   36a20:	bne	36a30 <__assert_fail@plt+0x2446c>
   36a24:	bl	12288 <__ctype_b_loc@plt>
   36a28:	mov	ip, #1
   36a2c:	b	36a94 <__assert_fail@plt+0x244d0>
   36a30:	bl	12288 <__ctype_b_loc@plt>
   36a34:	mov	r2, r6
   36a38:	mov	r3, #0
   36a3c:	mov	r4, #1
   36a40:	b	36a54 <__assert_fail@plt+0x24490>
   36a44:	add	r3, r3, #2
   36a48:	add	r2, r2, #1
   36a4c:	cmp	r3, #512	; 0x200
   36a50:	beq	36a80 <__assert_fail@plt+0x244bc>
   36a54:	ldr	r1, [r0]
   36a58:	ldrh	r1, [r1, r3]
   36a5c:	tst	r1, #2048	; 0x800
   36a60:	beq	36a44 <__assert_fail@plt+0x24480>
   36a64:	ldrb	r1, [r2]
   36a68:	asr	lr, r1, #5
   36a6c:	and	r1, r1, #31
   36a70:	ldr	ip, [r5, lr, lsl #2]
   36a74:	orr	r1, ip, r4, lsl r1
   36a78:	str	r1, [r5, lr, lsl #2]
   36a7c:	b	36a44 <__assert_fail@plt+0x24480>
   36a80:	mov	r0, #0
   36a84:	pop	{r4, r5, r6, r7, r8, pc}
   36a88:	add	r4, r4, #1
   36a8c:	cmp	r4, #256	; 0x100
   36a90:	beq	36adc <__assert_fail@plt+0x24518>
   36a94:	ldr	r2, [r0]
   36a98:	lsl	r3, r4, #1
   36a9c:	ldrh	r3, [r2, r3]
   36aa0:	tst	r3, #2048	; 0x800
   36aa4:	beq	36a88 <__assert_fail@plt+0x244c4>
   36aa8:	add	r3, r4, #31
   36aac:	cmp	r4, #0
   36ab0:	movge	r3, r4
   36ab4:	asr	r3, r3, #5
   36ab8:	asr	r2, r4, #31
   36abc:	lsr	r1, r2, #27
   36ac0:	add	r2, r4, r1
   36ac4:	and	r2, r2, #31
   36ac8:	sub	r2, r2, r1
   36acc:	ldr	r1, [r5, r3, lsl #2]
   36ad0:	orr	r2, r1, ip, lsl r2
   36ad4:	str	r2, [r5, r3, lsl #2]
   36ad8:	b	36a88 <__assert_fail@plt+0x244c4>
   36adc:	mov	r0, #0
   36ae0:	pop	{r4, r5, r6, r7, r8, pc}
   36ae4:	ldr	r1, [pc, #1340]	; 37028 <__assert_fail@plt+0x24a64>
   36ae8:	ldr	r0, [sp, #24]
   36aec:	bl	11f1c <strcmp@plt>
   36af0:	subs	r4, r0, #0
   36af4:	bne	36bc0 <__assert_fail@plt+0x245fc>
   36af8:	cmp	r6, #0
   36afc:	bne	36b0c <__assert_fail@plt+0x24548>
   36b00:	bl	12288 <__ctype_b_loc@plt>
   36b04:	mov	ip, #1
   36b08:	b	36b70 <__assert_fail@plt+0x245ac>
   36b0c:	bl	12288 <__ctype_b_loc@plt>
   36b10:	mov	r2, r6
   36b14:	mov	r3, #0
   36b18:	mov	r4, #1
   36b1c:	b	36b30 <__assert_fail@plt+0x2456c>
   36b20:	add	r3, r3, #2
   36b24:	add	r2, r2, #1
   36b28:	cmp	r3, #512	; 0x200
   36b2c:	beq	36b5c <__assert_fail@plt+0x24598>
   36b30:	ldr	r1, [r0]
   36b34:	ldrh	r1, [r1, r3]
   36b38:	tst	r1, #16384	; 0x4000
   36b3c:	beq	36b20 <__assert_fail@plt+0x2455c>
   36b40:	ldrb	r1, [r2]
   36b44:	asr	lr, r1, #5
   36b48:	and	r1, r1, #31
   36b4c:	ldr	ip, [r5, lr, lsl #2]
   36b50:	orr	r1, ip, r4, lsl r1
   36b54:	str	r1, [r5, lr, lsl #2]
   36b58:	b	36b20 <__assert_fail@plt+0x2455c>
   36b5c:	mov	r0, #0
   36b60:	pop	{r4, r5, r6, r7, r8, pc}
   36b64:	add	r4, r4, #1
   36b68:	cmp	r4, #256	; 0x100
   36b6c:	beq	36bb8 <__assert_fail@plt+0x245f4>
   36b70:	ldr	r2, [r0]
   36b74:	lsl	r3, r4, #1
   36b78:	ldrh	r3, [r2, r3]
   36b7c:	tst	r3, #16384	; 0x4000
   36b80:	beq	36b64 <__assert_fail@plt+0x245a0>
   36b84:	add	r3, r4, #31
   36b88:	cmp	r4, #0
   36b8c:	movge	r3, r4
   36b90:	asr	r3, r3, #5
   36b94:	asr	r2, r4, #31
   36b98:	lsr	r1, r2, #27
   36b9c:	add	r2, r4, r1
   36ba0:	and	r2, r2, #31
   36ba4:	sub	r2, r2, r1
   36ba8:	ldr	r1, [r5, r3, lsl #2]
   36bac:	orr	r2, r1, ip, lsl r2
   36bb0:	str	r2, [r5, r3, lsl #2]
   36bb4:	b	36b64 <__assert_fail@plt+0x245a0>
   36bb8:	mov	r0, #0
   36bbc:	pop	{r4, r5, r6, r7, r8, pc}
   36bc0:	ldr	r1, [pc, #1092]	; 3700c <__assert_fail@plt+0x24a48>
   36bc4:	ldr	r0, [sp, #24]
   36bc8:	bl	11f1c <strcmp@plt>
   36bcc:	subs	r4, r0, #0
   36bd0:	bne	36c9c <__assert_fail@plt+0x246d8>
   36bd4:	cmp	r6, #0
   36bd8:	bne	36be8 <__assert_fail@plt+0x24624>
   36bdc:	bl	12288 <__ctype_b_loc@plt>
   36be0:	mov	ip, #1
   36be4:	b	36c4c <__assert_fail@plt+0x24688>
   36be8:	bl	12288 <__ctype_b_loc@plt>
   36bec:	mov	r2, r6
   36bf0:	mov	r3, #0
   36bf4:	mov	r4, #1
   36bf8:	b	36c0c <__assert_fail@plt+0x24648>
   36bfc:	add	r3, r3, #2
   36c00:	add	r2, r2, #1
   36c04:	cmp	r3, #512	; 0x200
   36c08:	beq	36c38 <__assert_fail@plt+0x24674>
   36c0c:	ldr	r1, [r0]
   36c10:	ldrh	r1, [r1, r3]
   36c14:	tst	r1, #256	; 0x100
   36c18:	beq	36bfc <__assert_fail@plt+0x24638>
   36c1c:	ldrb	r1, [r2]
   36c20:	asr	lr, r1, #5
   36c24:	and	r1, r1, #31
   36c28:	ldr	ip, [r5, lr, lsl #2]
   36c2c:	orr	r1, ip, r4, lsl r1
   36c30:	str	r1, [r5, lr, lsl #2]
   36c34:	b	36bfc <__assert_fail@plt+0x24638>
   36c38:	mov	r0, #0
   36c3c:	pop	{r4, r5, r6, r7, r8, pc}
   36c40:	add	r4, r4, #1
   36c44:	cmp	r4, #256	; 0x100
   36c48:	beq	36c94 <__assert_fail@plt+0x246d0>
   36c4c:	ldr	r2, [r0]
   36c50:	lsl	r3, r4, #1
   36c54:	ldrh	r3, [r2, r3]
   36c58:	tst	r3, #256	; 0x100
   36c5c:	beq	36c40 <__assert_fail@plt+0x2467c>
   36c60:	add	r3, r4, #31
   36c64:	cmp	r4, #0
   36c68:	movge	r3, r4
   36c6c:	asr	r3, r3, #5
   36c70:	asr	r2, r4, #31
   36c74:	lsr	r1, r2, #27
   36c78:	add	r2, r4, r1
   36c7c:	and	r2, r2, #31
   36c80:	sub	r2, r2, r1
   36c84:	ldr	r1, [r5, r3, lsl #2]
   36c88:	orr	r2, r1, ip, lsl r2
   36c8c:	str	r2, [r5, r3, lsl #2]
   36c90:	b	36c40 <__assert_fail@plt+0x2467c>
   36c94:	mov	r0, #0
   36c98:	pop	{r4, r5, r6, r7, r8, pc}
   36c9c:	ldr	r1, [pc, #904]	; 3702c <__assert_fail@plt+0x24a68>
   36ca0:	ldr	r0, [sp, #24]
   36ca4:	bl	11f1c <strcmp@plt>
   36ca8:	subs	r4, r0, #0
   36cac:	bne	36d78 <__assert_fail@plt+0x247b4>
   36cb0:	cmp	r6, #0
   36cb4:	beq	36d10 <__assert_fail@plt+0x2474c>
   36cb8:	bl	12288 <__ctype_b_loc@plt>
   36cbc:	mov	r2, r6
   36cc0:	mov	r3, #0
   36cc4:	mov	r4, #1
   36cc8:	b	36cdc <__assert_fail@plt+0x24718>
   36ccc:	add	r3, r3, #2
   36cd0:	add	r2, r2, #1
   36cd4:	cmp	r3, #512	; 0x200
   36cd8:	beq	36d08 <__assert_fail@plt+0x24744>
   36cdc:	ldr	r1, [r0]
   36ce0:	ldrh	r1, [r1, r3]
   36ce4:	tst	r1, #1
   36ce8:	beq	36ccc <__assert_fail@plt+0x24708>
   36cec:	ldrb	r1, [r2]
   36cf0:	asr	lr, r1, #5
   36cf4:	and	r1, r1, #31
   36cf8:	ldr	ip, [r5, lr, lsl #2]
   36cfc:	orr	r1, ip, r4, lsl r1
   36d00:	str	r1, [r5, lr, lsl #2]
   36d04:	b	36ccc <__assert_fail@plt+0x24708>
   36d08:	mov	r0, #0
   36d0c:	pop	{r4, r5, r6, r7, r8, pc}
   36d10:	bl	12288 <__ctype_b_loc@plt>
   36d14:	mov	ip, #1
   36d18:	b	36d28 <__assert_fail@plt+0x24764>
   36d1c:	add	r4, r4, #1
   36d20:	cmp	r4, #256	; 0x100
   36d24:	beq	36d70 <__assert_fail@plt+0x247ac>
   36d28:	ldr	r2, [r0]
   36d2c:	lsl	r3, r4, #1
   36d30:	ldrh	r3, [r2, r3]
   36d34:	tst	r3, #1
   36d38:	beq	36d1c <__assert_fail@plt+0x24758>
   36d3c:	add	r3, r4, #31
   36d40:	cmp	r4, #0
   36d44:	movge	r3, r4
   36d48:	asr	r3, r3, #5
   36d4c:	asr	r2, r4, #31
   36d50:	lsr	r1, r2, #27
   36d54:	add	r2, r4, r1
   36d58:	and	r2, r2, #31
   36d5c:	sub	r2, r2, r1
   36d60:	ldr	r1, [r5, r3, lsl #2]
   36d64:	orr	r2, r1, ip, lsl r2
   36d68:	str	r2, [r5, r3, lsl #2]
   36d6c:	b	36d1c <__assert_fail@plt+0x24758>
   36d70:	mov	r0, #0
   36d74:	pop	{r4, r5, r6, r7, r8, pc}
   36d78:	ldr	r1, [pc, #688]	; 37030 <__assert_fail@plt+0x24a6c>
   36d7c:	ldr	r0, [sp, #24]
   36d80:	bl	11f1c <strcmp@plt>
   36d84:	subs	r4, r0, #0
   36d88:	bne	36e54 <__assert_fail@plt+0x24890>
   36d8c:	cmp	r6, #0
   36d90:	beq	36dec <__assert_fail@plt+0x24828>
   36d94:	bl	12288 <__ctype_b_loc@plt>
   36d98:	mov	r2, r6
   36d9c:	mov	r3, #0
   36da0:	mov	r4, #1
   36da4:	b	36db8 <__assert_fail@plt+0x247f4>
   36da8:	add	r3, r3, #2
   36dac:	add	r2, r2, #1
   36db0:	cmp	r3, #512	; 0x200
   36db4:	beq	36de4 <__assert_fail@plt+0x24820>
   36db8:	ldr	r1, [r0]
   36dbc:	ldrsh	r1, [r1, r3]
   36dc0:	cmp	r1, #0
   36dc4:	bge	36da8 <__assert_fail@plt+0x247e4>
   36dc8:	ldrb	r1, [r2]
   36dcc:	asr	lr, r1, #5
   36dd0:	and	r1, r1, #31
   36dd4:	ldr	ip, [r5, lr, lsl #2]
   36dd8:	orr	r1, ip, r4, lsl r1
   36ddc:	str	r1, [r5, lr, lsl #2]
   36de0:	b	36da8 <__assert_fail@plt+0x247e4>
   36de4:	mov	r0, #0
   36de8:	pop	{r4, r5, r6, r7, r8, pc}
   36dec:	bl	12288 <__ctype_b_loc@plt>
   36df0:	mov	ip, #1
   36df4:	b	36e04 <__assert_fail@plt+0x24840>
   36df8:	add	r4, r4, #1
   36dfc:	cmp	r4, #256	; 0x100
   36e00:	beq	36e4c <__assert_fail@plt+0x24888>
   36e04:	ldr	r2, [r0]
   36e08:	lsl	r3, r4, #1
   36e0c:	ldrsh	r3, [r2, r3]
   36e10:	cmp	r3, #0
   36e14:	bge	36df8 <__assert_fail@plt+0x24834>
   36e18:	add	r3, r4, #31
   36e1c:	cmp	r4, #0
   36e20:	movge	r3, r4
   36e24:	asr	r3, r3, #5
   36e28:	asr	r2, r4, #31
   36e2c:	lsr	r1, r2, #27
   36e30:	add	r2, r4, r1
   36e34:	and	r2, r2, #31
   36e38:	sub	r2, r2, r1
   36e3c:	ldr	r1, [r5, r3, lsl #2]
   36e40:	orr	r2, r1, ip, lsl r2
   36e44:	str	r2, [r5, r3, lsl #2]
   36e48:	b	36df8 <__assert_fail@plt+0x24834>
   36e4c:	mov	r0, #0
   36e50:	pop	{r4, r5, r6, r7, r8, pc}
   36e54:	ldr	r1, [pc, #472]	; 37034 <__assert_fail@plt+0x24a70>
   36e58:	ldr	r0, [sp, #24]
   36e5c:	bl	11f1c <strcmp@plt>
   36e60:	subs	r4, r0, #0
   36e64:	bne	36f28 <__assert_fail@plt+0x24964>
   36e68:	cmp	r6, #0
   36e6c:	beq	36ec0 <__assert_fail@plt+0x248fc>
   36e70:	bl	12288 <__ctype_b_loc@plt>
   36e74:	mov	r2, r6
   36e78:	mov	r3, #0
   36e7c:	mov	r4, #1
   36e80:	ldr	r1, [r0]
   36e84:	ldrh	r1, [r1, r3]
   36e88:	tst	r1, #4
   36e8c:	beq	36ea8 <__assert_fail@plt+0x248e4>
   36e90:	ldrb	r1, [r2]
   36e94:	asr	lr, r1, #5
   36e98:	and	r1, r1, #31
   36e9c:	ldr	ip, [r5, lr, lsl #2]
   36ea0:	orr	r1, ip, r4, lsl r1
   36ea4:	str	r1, [r5, lr, lsl #2]
   36ea8:	add	r3, r3, #2
   36eac:	add	r2, r2, #1
   36eb0:	cmp	r3, #512	; 0x200
   36eb4:	bne	36e80 <__assert_fail@plt+0x248bc>
   36eb8:	mov	r0, #0
   36ebc:	pop	{r4, r5, r6, r7, r8, pc}
   36ec0:	bl	12288 <__ctype_b_loc@plt>
   36ec4:	mov	ip, #1
   36ec8:	b	36ed8 <__assert_fail@plt+0x24914>
   36ecc:	add	r4, r4, #1
   36ed0:	cmp	r4, #256	; 0x100
   36ed4:	beq	36f20 <__assert_fail@plt+0x2495c>
   36ed8:	ldr	r2, [r0]
   36edc:	lsl	r3, r4, #1
   36ee0:	ldrh	r3, [r2, r3]
   36ee4:	tst	r3, #4
   36ee8:	beq	36ecc <__assert_fail@plt+0x24908>
   36eec:	add	r3, r4, #31
   36ef0:	cmp	r4, #0
   36ef4:	movge	r3, r4
   36ef8:	asr	r3, r3, #5
   36efc:	asr	r2, r4, #31
   36f00:	lsr	r1, r2, #27
   36f04:	add	r2, r4, r1
   36f08:	and	r2, r2, #31
   36f0c:	sub	r2, r2, r1
   36f10:	ldr	r1, [r5, r3, lsl #2]
   36f14:	orr	r2, r1, ip, lsl r2
   36f18:	str	r2, [r5, r3, lsl #2]
   36f1c:	b	36ecc <__assert_fail@plt+0x24908>
   36f20:	mov	r0, #0
   36f24:	pop	{r4, r5, r6, r7, r8, pc}
   36f28:	ldr	r1, [pc, #264]	; 37038 <__assert_fail@plt+0x24a74>
   36f2c:	ldr	r0, [sp, #24]
   36f30:	bl	11f1c <strcmp@plt>
   36f34:	subs	r4, r0, #0
   36f38:	bne	37004 <__assert_fail@plt+0x24a40>
   36f3c:	cmp	r6, #0
   36f40:	beq	36f94 <__assert_fail@plt+0x249d0>
   36f44:	bl	12288 <__ctype_b_loc@plt>
   36f48:	mov	r2, r6
   36f4c:	mov	r3, #0
   36f50:	mov	r4, #1
   36f54:	ldr	r1, [r0]
   36f58:	ldrh	r1, [r1, r3]
   36f5c:	tst	r1, #4096	; 0x1000
   36f60:	beq	36f7c <__assert_fail@plt+0x249b8>
   36f64:	ldrb	r1, [r2]
   36f68:	asr	lr, r1, #5
   36f6c:	and	r1, r1, #31
   36f70:	ldr	ip, [r5, lr, lsl #2]
   36f74:	orr	r1, ip, r4, lsl r1
   36f78:	str	r1, [r5, lr, lsl #2]
   36f7c:	add	r3, r3, #2
   36f80:	add	r2, r2, #1
   36f84:	cmp	r3, #512	; 0x200
   36f88:	bne	36f54 <__assert_fail@plt+0x24990>
   36f8c:	mov	r0, #0
   36f90:	pop	{r4, r5, r6, r7, r8, pc}
   36f94:	bl	12288 <__ctype_b_loc@plt>
   36f98:	mov	ip, #1
   36f9c:	b	36fac <__assert_fail@plt+0x249e8>
   36fa0:	add	r4, r4, #1
   36fa4:	cmp	r4, #256	; 0x100
   36fa8:	beq	36ff4 <__assert_fail@plt+0x24a30>
   36fac:	ldr	r2, [r0]
   36fb0:	lsl	r3, r4, #1
   36fb4:	ldrh	r3, [r2, r3]
   36fb8:	tst	r3, #4096	; 0x1000
   36fbc:	beq	36fa0 <__assert_fail@plt+0x249dc>
   36fc0:	add	r3, r4, #31
   36fc4:	cmp	r4, #0
   36fc8:	movge	r3, r4
   36fcc:	asr	r3, r3, #5
   36fd0:	asr	r2, r4, #31
   36fd4:	lsr	r1, r2, #27
   36fd8:	add	r2, r4, r1
   36fdc:	and	r2, r2, #31
   36fe0:	sub	r2, r2, r1
   36fe4:	ldr	r1, [r5, r3, lsl #2]
   36fe8:	orr	r2, r1, ip, lsl r2
   36fec:	str	r2, [r5, r3, lsl #2]
   36ff0:	b	36fa0 <__assert_fail@plt+0x249dc>
   36ff4:	mov	r0, #0
   36ff8:	pop	{r4, r5, r6, r7, r8, pc}
   36ffc:	mov	r0, #12
   37000:	pop	{r4, r5, r6, r7, r8, pc}
   37004:	mov	r0, #4
   37008:	pop	{r4, r5, r6, r7, r8, pc}
   3700c:	andeq	r8, r4, ip, lsr #9
   37010:			; <UNDEFINED> instruction: 0x000484b4
   37014:	andeq	r8, r4, r4, lsr #9
   37018:			; <UNDEFINED> instruction: 0x000484bc
   3701c:	andeq	r8, r4, r4, asr #9
   37020:	andeq	r8, r4, ip, asr #9
   37024:	ldrdeq	r8, [r4], -r4
   37028:	andeq	r3, r4, ip, lsl #17
   3702c:	ldrdeq	r8, [r4], -ip
   37030:	andeq	r8, r4, r4, ror #9
   37034:	andeq	r8, r4, ip, ror #9
   37038:	strdeq	r8, [r4], -r4
   3703c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37040:	sub	sp, sp, #24
   37044:	mov	r6, r0
   37048:	mov	r9, r1
   3704c:	mov	sl, r2
   37050:	mov	r5, r3
   37054:	ldrb	r8, [sp, #56]	; 0x38
   37058:	mov	r3, #0
   3705c:	str	r3, [sp, #20]
   37060:	mov	r1, #1
   37064:	mov	r0, #32
   37068:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   3706c:	subs	r4, r0, #0
   37070:	beq	371d8 <__assert_fail@plt+0x24c14>
   37074:	mov	r1, #1
   37078:	mov	r0, #40	; 0x28
   3707c:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   37080:	subs	r7, r0, #0
   37084:	beq	371ec <__assert_fail@plt+0x24c28>
   37088:	ldrb	r2, [r7, #16]
   3708c:	and	r3, r8, #1
   37090:	bic	r2, r2, #1
   37094:	orr	r3, r3, r2
   37098:	strb	r3, [r7, #16]
   3709c:	mov	r3, #0
   370a0:	str	r3, [sp, #4]
   370a4:	str	sl, [sp]
   370a8:	add	r3, sp, #20
   370ac:	mov	r2, r7
   370b0:	mov	r1, r4
   370b4:	mov	r0, r9
   370b8:	bl	36508 <__assert_fail@plt+0x23f44>
   370bc:	subs	r9, r0, #0
   370c0:	bne	37208 <__assert_fail@plt+0x24c44>
   370c4:	ldrb	r3, [r5]
   370c8:	cmp	r3, #0
   370cc:	movne	r0, #1
   370d0:	beq	370f4 <__assert_fail@plt+0x24b30>
   370d4:	lsr	r1, r3, #5
   370d8:	and	r3, r3, #31
   370dc:	ldr	r2, [r4, r1, lsl #2]
   370e0:	orr	r3, r2, r0, lsl r3
   370e4:	str	r3, [r4, r1, lsl #2]
   370e8:	ldrb	r3, [r5, #1]!
   370ec:	cmp	r3, #0
   370f0:	bne	370d4 <__assert_fail@plt+0x24b10>
   370f4:	cmp	r8, #0
   370f8:	beq	37118 <__assert_fail@plt+0x24b54>
   370fc:	sub	r3, r4, #4
   37100:	add	r1, r4, #28
   37104:	ldr	r2, [r3, #4]
   37108:	mvn	r2, r2
   3710c:	str	r2, [r3, #4]!
   37110:	cmp	r3, r1
   37114:	bne	37104 <__assert_fail@plt+0x24b40>
   37118:	ldr	r3, [r6, #92]	; 0x5c
   3711c:	cmp	r3, #1
   37120:	ble	3714c <__assert_fail@plt+0x24b88>
   37124:	sub	r3, r4, #4
   37128:	ldr	r1, [r6, #60]	; 0x3c
   3712c:	sub	r1, r1, #4
   37130:	add	ip, r4, #28
   37134:	ldr	r2, [r3, #4]
   37138:	ldr	r0, [r1, #4]!
   3713c:	and	r2, r2, r0
   37140:	str	r2, [r3, #4]!
   37144:	cmp	r3, ip
   37148:	bne	37134 <__assert_fail@plt+0x24b70>
   3714c:	mov	r1, #0
   37150:	str	r1, [sp, #16]
   37154:	str	r4, [sp, #12]
   37158:	mov	r3, #3
   3715c:	strb	r3, [sp, #16]
   37160:	add	r3, sp, #12
   37164:	mov	r2, r1
   37168:	mov	r0, r6
   3716c:	bl	3213c <__assert_fail@plt+0x1fb78>
   37170:	subs	r5, r0, #0
   37174:	beq	37234 <__assert_fail@plt+0x24c70>
   37178:	ldr	r3, [r6, #92]	; 0x5c
   3717c:	cmp	r3, #1
   37180:	ble	37228 <__assert_fail@plt+0x24c64>
   37184:	mov	r3, #6
   37188:	strb	r3, [sp, #16]
   3718c:	add	r3, sp, #24
   37190:	str	r7, [r3, #-12]!
   37194:	ldrb	r2, [r6, #88]	; 0x58
   37198:	orr	r2, r2, #2
   3719c:	strb	r2, [r6, #88]	; 0x58
   371a0:	mov	r2, #0
   371a4:	mov	r1, r2
   371a8:	mov	r0, r6
   371ac:	bl	3213c <__assert_fail@plt+0x1fb78>
   371b0:	subs	r2, r0, #0
   371b4:	beq	37234 <__assert_fail@plt+0x24c70>
   371b8:	mov	r3, #10
   371bc:	mov	r1, r5
   371c0:	mov	r0, r6
   371c4:	bl	322b0 <__assert_fail@plt+0x1fcec>
   371c8:	mov	r5, r0
   371cc:	mov	r0, r5
   371d0:	add	sp, sp, #24
   371d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   371d8:	mov	r3, #12
   371dc:	ldr	r2, [sp, #60]	; 0x3c
   371e0:	str	r3, [r2]
   371e4:	mov	r5, #0
   371e8:	b	371cc <__assert_fail@plt+0x24c08>
   371ec:	mov	r0, r4
   371f0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   371f4:	mov	r3, #12
   371f8:	ldr	r2, [sp, #60]	; 0x3c
   371fc:	str	r3, [r2]
   37200:	mov	r5, #0
   37204:	b	371cc <__assert_fail@plt+0x24c08>
   37208:	mov	r0, r4
   3720c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   37210:	mov	r0, r7
   37214:	bl	33cf8 <__assert_fail@plt+0x21734>
   37218:	ldr	r3, [sp, #60]	; 0x3c
   3721c:	str	r9, [r3]
   37220:	mov	r5, #0
   37224:	b	371cc <__assert_fail@plt+0x24c08>
   37228:	mov	r0, r7
   3722c:	bl	33cf8 <__assert_fail@plt+0x21734>
   37230:	b	371cc <__assert_fail@plt+0x24c08>
   37234:	mov	r0, r4
   37238:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3723c:	mov	r0, r7
   37240:	bl	33cf8 <__assert_fail@plt+0x21734>
   37244:	mov	r3, #12
   37248:	ldr	r2, [sp, #60]	; 0x3c
   3724c:	str	r3, [r2]
   37250:	mov	r5, #0
   37254:	b	371cc <__assert_fail@plt+0x24c08>
   37258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3725c:	sub	sp, sp, #300	; 0x12c
   37260:	ldr	r3, [r0]
   37264:	str	r3, [sp, #4]
   37268:	ldr	r3, [r3, #92]	; 0x5c
   3726c:	cmp	r3, #1
   37270:	ldreq	r3, [r0, #12]
   37274:	lsreq	r3, r3, #22
   37278:	andeq	r3, r3, #1
   3727c:	movne	r3, #0
   37280:	mov	sl, r3
   37284:	ldr	r3, [r1, #8]
   37288:	cmp	r3, #0
   3728c:	ble	375c8 <__assert_fail@plt+0x25004>
   37290:	mov	r8, r2
   37294:	str	r1, [sp, #16]
   37298:	str	r0, [sp, #20]
   3729c:	mov	r3, #0
   372a0:	str	r3, [sp, #8]
   372a4:	ldr	fp, [pc, #1020]	; 376a8 <__assert_fail@plt+0x250e4>
   372a8:	b	3755c <__assert_fail@plt+0x24f98>
   372ac:	ldrb	r5, [r2, r4, lsl #3]
   372b0:	strb	r3, [r8, r5]
   372b4:	cmp	sl, #0
   372b8:	beq	372dc <__assert_fail@plt+0x24d18>
   372bc:	add	r3, r5, #128	; 0x80
   372c0:	cmp	r3, fp
   372c4:	bhi	372d4 <__assert_fail@plt+0x24d10>
   372c8:	bl	12258 <__ctype_tolower_loc@plt>
   372cc:	ldr	r3, [r0]
   372d0:	ldr	r5, [r3, r5, lsl #2]
   372d4:	mov	r3, #1
   372d8:	strb	r3, [r8, r5]
   372dc:	ldr	r3, [sp, #20]
   372e0:	ldr	r3, [r3, #12]
   372e4:	tst	r3, #4194304	; 0x400000
   372e8:	beq	3753c <__assert_fail@plt+0x24f78>
   372ec:	ldr	ip, [sp, #4]
   372f0:	ldr	r3, [ip, #92]	; 0x5c
   372f4:	cmp	r3, #1
   372f8:	ble	3753c <__assert_fail@plt+0x24f78>
   372fc:	ldr	r3, [ip]
   37300:	ldrb	r3, [r3, r4, lsl #3]
   37304:	strb	r3, [sp, #40]	; 0x28
   37308:	add	r1, r4, #1
   3730c:	ldr	r3, [ip, #8]
   37310:	cmp	r1, r3
   37314:	bcs	373e8 <__assert_fail@plt+0x24e24>
   37318:	ldr	r0, [sp, #12]
   3731c:	add	r3, r0, #8
   37320:	ldr	r2, [ip]
   37324:	add	r3, r2, r3
   37328:	ldr	r2, [r3, #4]
   3732c:	bic	r2, r2, #-16777216	; 0xff000000
   37330:	bic	r2, r2, #14614528	; 0xdf0000
   37334:	bic	r2, r2, #65280	; 0xff00
   37338:	ldr	lr, [pc, #876]	; 376ac <__assert_fail@plt+0x250e8>
   3733c:	cmp	r2, lr
   37340:	bne	373f0 <__assert_fail@plt+0x24e2c>
   37344:	add	r0, r0, #16
   37348:	add	r4, sp, #41	; 0x29
   3734c:	ldrb	r3, [r3]
   37350:	strb	r3, [r4], #1
   37354:	add	r1, r1, #1
   37358:	ldr	r3, [ip, #8]
   3735c:	cmp	r1, r3
   37360:	bcs	3738c <__assert_fail@plt+0x24dc8>
   37364:	ldr	r3, [ip]
   37368:	add	r3, r3, r0
   3736c:	add	r0, r0, #8
   37370:	ldr	r2, [r3, #4]
   37374:	bic	r2, r2, #-16777216	; 0xff000000
   37378:	bic	r2, r2, #14614528	; 0xdf0000
   3737c:	bic	r2, r2, #65280	; 0xff00
   37380:	ldr	lr, [pc, #804]	; 376ac <__assert_fail@plt+0x250e8>
   37384:	cmp	r2, lr
   37388:	beq	3734c <__assert_fail@plt+0x24d88>
   3738c:	mov	r3, #0
   37390:	str	r3, [sp, #32]
   37394:	str	r3, [sp, #36]	; 0x24
   37398:	add	r3, sp, #40	; 0x28
   3739c:	sub	r4, r4, r3
   373a0:	add	r3, sp, #32
   373a4:	mov	r2, r4
   373a8:	add	r1, sp, #40	; 0x28
   373ac:	add	r0, sp, #28
   373b0:	bl	307cc <__assert_fail@plt+0x1e208>
   373b4:	cmp	r4, r0
   373b8:	bne	3753c <__assert_fail@plt+0x24f78>
   373bc:	ldr	r0, [sp, #28]
   373c0:	bl	12030 <towlower@plt>
   373c4:	add	r2, sp, #32
   373c8:	mov	r1, r0
   373cc:	add	r0, sp, #40	; 0x28
   373d0:	bl	11ed4 <wcrtomb@plt>
   373d4:	cmn	r0, #1
   373d8:	ldrbne	r3, [sp, #40]	; 0x28
   373dc:	movne	r2, #1
   373e0:	strbne	r2, [r8, r3]
   373e4:	b	3753c <__assert_fail@plt+0x24f78>
   373e8:	add	r4, sp, #41	; 0x29
   373ec:	b	3738c <__assert_fail@plt+0x24dc8>
   373f0:	add	r4, sp, #41	; 0x29
   373f4:	b	3738c <__assert_fail@plt+0x24dc8>
   373f8:	mov	r3, #0
   373fc:	str	r3, [sp]
   37400:	mov	r9, #1
   37404:	b	3746c <__assert_fail@plt+0x24ea8>
   37408:	strb	r9, [r8, r3]
   3740c:	add	r4, r4, #1
   37410:	add	r5, r5, #1
   37414:	add	r6, r6, #4
   37418:	cmp	r4, #32
   3741c:	beq	37458 <__assert_fail@plt+0x24e94>
   37420:	lsr	r3, r7, r4
   37424:	tst	r3, #1
   37428:	beq	3740c <__assert_fail@plt+0x24e48>
   3742c:	strb	r9, [r8, r5]
   37430:	cmp	sl, #0
   37434:	beq	3740c <__assert_fail@plt+0x24e48>
   37438:	add	r3, r5, #128	; 0x80
   3743c:	cmp	r3, fp
   37440:	movhi	r3, r5
   37444:	bhi	37408 <__assert_fail@plt+0x24e44>
   37448:	bl	12258 <__ctype_tolower_loc@plt>
   3744c:	ldr	r3, [r0]
   37450:	ldr	r3, [r3, r6]
   37454:	b	37408 <__assert_fail@plt+0x24e44>
   37458:	ldr	r3, [sp]
   3745c:	add	r3, r3, #4
   37460:	str	r3, [sp]
   37464:	cmp	r3, #32
   37468:	beq	3753c <__assert_fail@plt+0x24f78>
   3746c:	ldr	r2, [sp]
   37470:	lsl	r5, r2, #3
   37474:	ldr	r3, [sp, #4]
   37478:	ldr	r3, [r3]
   3747c:	ldr	r1, [sp, #12]
   37480:	ldr	r3, [r3, r1]
   37484:	ldr	r7, [r3, r2]
   37488:	lsl	r6, r2, #5
   3748c:	mov	r4, #0
   37490:	b	37420 <__assert_fail@plt+0x24e5c>
   37494:	ldr	r5, [r2, r4, lsl #3]
   37498:	ldr	r3, [sp, #4]
   3749c:	ldr	r3, [r3, #92]	; 0x5c
   374a0:	cmp	r3, #1
   374a4:	ble	374cc <__assert_fail@plt+0x24f08>
   374a8:	ldr	r3, [r5, #36]	; 0x24
   374ac:	cmp	r3, #0
   374b0:	bne	374ec <__assert_fail@plt+0x24f28>
   374b4:	ldrb	r3, [r5, #16]
   374b8:	tst	r3, #1
   374bc:	bne	374ec <__assert_fail@plt+0x24f28>
   374c0:	ldr	r3, [r5, #32]
   374c4:	cmp	r3, #0
   374c8:	bne	374ec <__assert_fail@plt+0x24f28>
   374cc:	ldr	r3, [r5, #20]
   374d0:	cmp	r3, #0
   374d4:	ble	3753c <__assert_fail@plt+0x24f78>
   374d8:	mov	r4, #0
   374dc:	mov	r9, r4
   374e0:	str	sl, [sp]
   374e4:	ldr	sl, [sp, #20]
   374e8:	b	37630 <__assert_fail@plt+0x2506c>
   374ec:	mov	r3, #0
   374f0:	strb	r3, [sp, #32]
   374f4:	mov	r4, #0
   374f8:	mov	r5, #1
   374fc:	str	r4, [sp, #40]	; 0x28
   37500:	str	r4, [sp, #44]	; 0x2c
   37504:	add	r3, sp, #40	; 0x28
   37508:	mov	r2, r5
   3750c:	add	r1, sp, #32
   37510:	mov	r0, r4
   37514:	bl	307cc <__assert_fail@plt+0x1e208>
   37518:	cmn	r0, #2
   3751c:	ldrbeq	r3, [sp, #32]
   37520:	strbeq	r5, [r8, r3]
   37524:	ldrb	r3, [sp, #32]
   37528:	add	r3, r3, #1
   3752c:	uxtb	r3, r3
   37530:	strb	r3, [sp, #32]
   37534:	cmp	r3, #0
   37538:	bne	374fc <__assert_fail@plt+0x24f38>
   3753c:	ldr	r3, [sp, #8]
   37540:	add	r3, r3, #1
   37544:	mov	r2, r3
   37548:	str	r3, [sp, #8]
   3754c:	ldr	r3, [sp, #16]
   37550:	ldr	r3, [r3, #8]
   37554:	cmp	r3, r2
   37558:	ble	375c8 <__assert_fail@plt+0x25004>
   3755c:	ldr	r3, [sp, #16]
   37560:	ldr	r3, [r3, #12]
   37564:	ldr	r2, [sp, #8]
   37568:	ldr	r4, [r3, r2, lsl #2]
   3756c:	lsl	r3, r4, #3
   37570:	str	r3, [sp, #12]
   37574:	ldr	r2, [sp, #4]
   37578:	ldr	r2, [r2]
   3757c:	add	r3, r2, r3
   37580:	ldrb	r3, [r3, #4]
   37584:	mov	r5, r3
   37588:	cmp	r3, #1
   3758c:	beq	372ac <__assert_fail@plt+0x24ce8>
   37590:	cmp	r3, #3
   37594:	beq	373f8 <__assert_fail@plt+0x24e34>
   37598:	cmp	r3, #6
   3759c:	beq	37494 <__assert_fail@plt+0x24ed0>
   375a0:	and	r2, r3, #253	; 0xfd
   375a4:	cmp	r3, #2
   375a8:	cmpne	r2, #5
   375ac:	bne	3753c <__assert_fail@plt+0x24f78>
   375b0:	mov	r2, #256	; 0x100
   375b4:	mov	r1, #1
   375b8:	mov	r0, r8
   375bc:	bl	12348 <memset@plt>
   375c0:	cmp	r5, #2
   375c4:	beq	37694 <__assert_fail@plt+0x250d0>
   375c8:	add	sp, sp, #300	; 0x12c
   375cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   375d0:	mov	r3, #1
   375d4:	strb	r3, [r8, r6]
   375d8:	ldr	r3, [sl, #12]
   375dc:	tst	r3, #4194304	; 0x400000
   375e0:	beq	37620 <__assert_fail@plt+0x2505c>
   375e4:	ldr	r3, [sp, #4]
   375e8:	ldr	r3, [r3, #92]	; 0x5c
   375ec:	cmp	r3, #1
   375f0:	ble	37620 <__assert_fail@plt+0x2505c>
   375f4:	ldr	r3, [r5]
   375f8:	ldr	r0, [r3, r7]
   375fc:	bl	12030 <towlower@plt>
   37600:	add	r2, sp, #32
   37604:	mov	r1, r0
   37608:	add	r0, sp, #40	; 0x28
   3760c:	bl	11ed4 <wcrtomb@plt>
   37610:	cmn	r0, #1
   37614:	ldrbne	r3, [sp, #40]	; 0x28
   37618:	movne	r2, #1
   3761c:	strbne	r2, [r8, r3]
   37620:	add	r4, r4, #1
   37624:	ldr	r3, [r5, #20]
   37628:	cmp	r3, r4
   3762c:	ble	3768c <__assert_fail@plt+0x250c8>
   37630:	str	r9, [sp, #32]
   37634:	str	r9, [sp, #36]	; 0x24
   37638:	lsl	r7, r4, #2
   3763c:	ldr	r3, [r5]
   37640:	add	r2, sp, #32
   37644:	ldr	r1, [r3, r4, lsl #2]
   37648:	add	r0, sp, #40	; 0x28
   3764c:	bl	11ed4 <wcrtomb@plt>
   37650:	cmn	r0, #1
   37654:	beq	375d8 <__assert_fail@plt+0x25014>
   37658:	ldrb	r6, [sp, #40]	; 0x28
   3765c:	mov	r3, #1
   37660:	strb	r3, [r8, r6]
   37664:	ldr	r3, [sp]
   37668:	cmp	r3, #0
   3766c:	beq	375d8 <__assert_fail@plt+0x25014>
   37670:	add	r3, r6, #128	; 0x80
   37674:	cmp	r3, fp
   37678:	bhi	375d0 <__assert_fail@plt+0x2500c>
   3767c:	bl	12258 <__ctype_tolower_loc@plt>
   37680:	ldr	r3, [r0]
   37684:	ldr	r6, [r3, r6, lsl #2]
   37688:	b	375d0 <__assert_fail@plt+0x2500c>
   3768c:	ldr	sl, [sp]
   37690:	b	3753c <__assert_fail@plt+0x24f78>
   37694:	ldr	r2, [sp, #20]
   37698:	ldrb	r3, [r2, #28]
   3769c:	orr	r3, r3, #1
   376a0:	strb	r3, [r2, #28]
   376a4:	b	375c8 <__assert_fail@plt+0x25004>
   376a8:	andeq	r0, r0, pc, ror r1
   376ac:	eoreq	r0, r0, r1
   376b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   376b4:	sub	sp, sp, #36	; 0x24
   376b8:	mov	r4, r0
   376bc:	mov	r6, r1
   376c0:	mov	r7, r2
   376c4:	ldr	r5, [r0, #24]
   376c8:	cmp	r5, r1
   376cc:	suble	r5, r1, r5
   376d0:	ble	37734 <__assert_fail@plt+0x25170>
   376d4:	ldr	r3, [r0, #80]	; 0x50
   376d8:	cmp	r3, #1
   376dc:	movgt	r3, #0
   376e0:	strgt	r3, [r0, #16]
   376e4:	strgt	r3, [r0, #20]
   376e8:	ldr	r3, [r0, #44]	; 0x2c
   376ec:	str	r3, [r0, #48]	; 0x30
   376f0:	ldr	r3, [r0, #52]	; 0x34
   376f4:	str	r3, [r0, #56]	; 0x38
   376f8:	mov	r3, #0
   376fc:	str	r3, [r0, #28]
   37700:	str	r3, [r0, #24]
   37704:	str	r3, [r0, #32]
   37708:	strb	r3, [r0, #76]	; 0x4c
   3770c:	and	r3, r2, #1
   37710:	cmp	r3, #0
   37714:	movne	r3, #4
   37718:	moveq	r3, #6
   3771c:	str	r3, [r0, #60]	; 0x3c
   37720:	ldrb	r3, [r0, #75]	; 0x4b
   37724:	cmp	r3, #0
   37728:	ldreq	r3, [r0]
   3772c:	streq	r3, [r0, #4]
   37730:	mov	r5, r1
   37734:	cmp	r5, #0
   37738:	beq	377c4 <__assert_fail@plt+0x25200>
   3773c:	ldr	r3, [r4, #32]
   37740:	cmp	r5, r3
   37744:	bge	37a14 <__assert_fail@plt+0x25450>
   37748:	ldrb	r3, [r4, #76]	; 0x4c
   3774c:	cmp	r3, #0
   37750:	bne	3780c <__assert_fail@plt+0x25248>
   37754:	mov	r2, r7
   37758:	sub	r1, r5, #1
   3775c:	mov	r0, r4
   37760:	bl	3537c <__assert_fail@plt+0x22db8>
   37764:	str	r0, [r4, #60]	; 0x3c
   37768:	ldr	r3, [r4, #80]	; 0x50
   3776c:	cmp	r3, #1
   37770:	ble	3778c <__assert_fail@plt+0x251c8>
   37774:	ldr	r0, [r4, #8]
   37778:	ldr	r2, [r4, #28]
   3777c:	sub	r2, r2, r5
   37780:	lsl	r2, r2, #2
   37784:	add	r1, r0, r5, lsl #2
   37788:	bl	11f94 <memmove@plt>
   3778c:	ldrb	r3, [r4, #75]	; 0x4b
   37790:	cmp	r3, #0
   37794:	bne	379fc <__assert_fail@plt+0x25438>
   37798:	ldr	r3, [r4, #28]
   3779c:	sub	r3, r3, r5
   377a0:	str	r3, [r4, #28]
   377a4:	ldr	r3, [r4, #32]
   377a8:	sub	r3, r3, r5
   377ac:	str	r3, [r4, #32]
   377b0:	ldrb	r3, [r4, #75]	; 0x4b
   377b4:	cmp	r3, #0
   377b8:	ldreq	r3, [r4, #4]
   377bc:	addeq	r3, r3, r5
   377c0:	streq	r3, [r4, #4]
   377c4:	str	r6, [r4, #24]
   377c8:	ldr	r3, [r4, #48]	; 0x30
   377cc:	sub	r3, r3, r5
   377d0:	str	r3, [r4, #48]	; 0x30
   377d4:	ldr	r2, [r4, #56]	; 0x38
   377d8:	sub	r5, r2, r5
   377dc:	str	r5, [r4, #56]	; 0x38
   377e0:	ldr	r2, [r4, #80]	; 0x50
   377e4:	cmp	r2, #1
   377e8:	ble	37d78 <__assert_fail@plt+0x257b4>
   377ec:	ldrb	r3, [r4, #72]	; 0x48
   377f0:	cmp	r3, #0
   377f4:	beq	37d60 <__assert_fail@plt+0x2579c>
   377f8:	mov	r0, r4
   377fc:	bl	32790 <__assert_fail@plt+0x201cc>
   37800:	cmp	r0, #0
   37804:	beq	37d68 <__assert_fail@plt+0x257a4>
   37808:	b	37d70 <__assert_fail@plt+0x257ac>
   3780c:	ldr	sl, [r4, #28]
   37810:	ldr	r9, [r4, #12]
   37814:	mov	r2, sl
   37818:	mov	r1, #0
   3781c:	b	3782c <__assert_fail@plt+0x25268>
   37820:	mov	r2, r8
   37824:	cmp	r1, r2
   37828:	bge	37850 <__assert_fail@plt+0x2528c>
   3782c:	add	r3, r1, r2
   37830:	add	r3, r3, r3, lsr #31
   37834:	asr	r8, r3, #1
   37838:	ldr	r3, [r9, r8, lsl #2]
   3783c:	cmp	r5, r3
   37840:	blt	37820 <__assert_fail@plt+0x2525c>
   37844:	ble	37858 <__assert_fail@plt+0x25294>
   37848:	add	r1, r8, #1
   3784c:	b	37824 <__assert_fail@plt+0x25260>
   37850:	cmp	r5, r3
   37854:	addgt	r8, r8, #1
   37858:	mov	r2, r7
   3785c:	sub	r1, r8, #1
   37860:	mov	r0, r4
   37864:	bl	3537c <__assert_fail@plt+0x22db8>
   37868:	str	r0, [r4, #60]	; 0x3c
   3786c:	cmp	r5, sl
   37870:	movge	r3, #0
   37874:	movlt	r3, #1
   37878:	cmp	r5, r8
   3787c:	movne	r3, #0
   37880:	cmp	r3, #0
   37884:	bne	37964 <__assert_fail@plt+0x253a0>
   37888:	ldr	r3, [r4, #44]	; 0x2c
   3788c:	sub	r3, r3, r6
   37890:	add	r3, r3, r5
   37894:	str	r3, [r4, #48]	; 0x30
   37898:	ldr	r3, [r4, #52]	; 0x34
   3789c:	sub	r3, r3, r6
   378a0:	add	r3, r3, r5
   378a4:	str	r3, [r4, #56]	; 0x38
   378a8:	mov	r3, #0
   378ac:	strb	r3, [r4, #76]	; 0x4c
   378b0:	cmp	r8, r3
   378b4:	ble	378e0 <__assert_fail@plt+0x2531c>
   378b8:	sub	r2, r8, #-1073741823	; 0xc0000001
   378bc:	add	r3, r9, r2, lsl #2
   378c0:	ldr	r2, [r9, r2, lsl #2]
   378c4:	cmp	r5, r2
   378c8:	bne	378e0 <__assert_fail@plt+0x2531c>
   378cc:	subs	r8, r8, #1
   378d0:	beq	378e0 <__assert_fail@plt+0x2531c>
   378d4:	ldr	r2, [r3, #-4]!
   378d8:	cmp	r5, r2
   378dc:	beq	378cc <__assert_fail@plt+0x25308>
   378e0:	cmp	sl, r8
   378e4:	ble	379e8 <__assert_fail@plt+0x25424>
   378e8:	ldr	r2, [r4, #8]
   378ec:	add	r3, r2, r8, lsl #2
   378f0:	ldr	r2, [r2, r8, lsl #2]
   378f4:	cmn	r2, #1
   378f8:	bne	37914 <__assert_fail@plt+0x25350>
   378fc:	add	r8, r8, #1
   37900:	cmp	sl, r8
   37904:	beq	379f0 <__assert_fail@plt+0x2542c>
   37908:	ldr	r2, [r3, #4]!
   3790c:	cmn	r2, #1
   37910:	beq	378fc <__assert_fail@plt+0x25338>
   37914:	ldr	r2, [r9, r8, lsl #2]
   37918:	sub	r2, r2, r5
   3791c:	str	r2, [r4, #28]
   37920:	cmp	r2, #0
   37924:	beq	37958 <__assert_fail@plt+0x25394>
   37928:	ble	3794c <__assert_fail@plt+0x25388>
   3792c:	mov	r3, #0
   37930:	mvn	r1, #0
   37934:	ldr	r2, [r4, #8]
   37938:	str	r1, [r2, r3, lsl #2]
   3793c:	add	r3, r3, #1
   37940:	ldr	r2, [r4, #28]
   37944:	cmp	r2, r3
   37948:	bgt	37934 <__assert_fail@plt+0x25370>
   3794c:	mov	r1, #255	; 0xff
   37950:	ldr	r0, [r4, #4]
   37954:	bl	12348 <memset@plt>
   37958:	ldr	r3, [r4, #28]
   3795c:	str	r3, [r4, #32]
   37960:	b	377b0 <__assert_fail@plt+0x251ec>
   37964:	ldr	r3, [r9, r8, lsl #2]
   37968:	cmp	r5, r3
   3796c:	bne	37888 <__assert_fail@plt+0x252c4>
   37970:	ldr	r0, [r4, #8]
   37974:	lsl	r7, r5, #2
   37978:	sub	r2, sl, r5
   3797c:	lsl	r2, r2, #2
   37980:	add	r1, r0, r7
   37984:	bl	11f94 <memmove@plt>
   37988:	ldr	r0, [r4, #4]
   3798c:	ldr	r2, [r4, #28]
   37990:	sub	r2, r2, r5
   37994:	add	r1, r0, r5
   37998:	bl	11f94 <memmove@plt>
   3799c:	ldr	r3, [r4, #28]
   379a0:	sub	r3, r3, r5
   379a4:	str	r3, [r4, #28]
   379a8:	ldr	r2, [r4, #32]
   379ac:	sub	r2, r2, r5
   379b0:	str	r2, [r4, #32]
   379b4:	cmp	r3, #0
   379b8:	ble	377b0 <__assert_fail@plt+0x251ec>
   379bc:	mov	r3, #0
   379c0:	ldr	r1, [r4, #12]
   379c4:	ldr	r2, [r1, r7]
   379c8:	sub	r2, r2, r5
   379cc:	str	r2, [r1, r3, lsl #2]
   379d0:	add	r3, r3, #1
   379d4:	add	r7, r7, #4
   379d8:	ldr	r2, [r4, #28]
   379dc:	cmp	r2, r3
   379e0:	bgt	379c0 <__assert_fail@plt+0x253fc>
   379e4:	b	377b0 <__assert_fail@plt+0x251ec>
   379e8:	cmp	sl, r8
   379ec:	bne	37914 <__assert_fail@plt+0x25350>
   379f0:	mov	r3, #0
   379f4:	str	r3, [r4, #28]
   379f8:	b	37958 <__assert_fail@plt+0x25394>
   379fc:	ldr	r0, [r4, #4]
   37a00:	ldr	r2, [r4, #28]
   37a04:	sub	r2, r2, r5
   37a08:	add	r1, r0, r5
   37a0c:	bl	11f94 <memmove@plt>
   37a10:	b	37798 <__assert_fail@plt+0x251d4>
   37a14:	ldr	fp, [r4, #28]
   37a18:	ldrb	r3, [r4, #76]	; 0x4c
   37a1c:	cmp	r3, #0
   37a20:	bne	37b28 <__assert_fail@plt+0x25564>
   37a24:	mov	r3, #0
   37a28:	str	r3, [r4, #28]
   37a2c:	ldr	r3, [r4, #80]	; 0x50
   37a30:	cmp	r3, #1
   37a34:	ble	37cf0 <__assert_fail@plt+0x2572c>
   37a38:	ldrb	r2, [r4, #73]	; 0x49
   37a3c:	cmp	r2, #0
   37a40:	beq	37b04 <__assert_fail@plt+0x25540>
   37a44:	ldr	r0, [r4]
   37a48:	ldr	r8, [r4, #24]
   37a4c:	add	r8, r0, r8
   37a50:	sub	r3, r5, r3
   37a54:	add	r3, r8, r3
   37a58:	cmp	r0, r3
   37a5c:	movcc	r0, r3
   37a60:	mov	r9, r5
   37a64:	sub	r3, r5, #1
   37a68:	add	r1, r8, r3
   37a6c:	cmp	r1, r0
   37a70:	bcc	37b04 <__assert_fail@plt+0x25540>
   37a74:	ldrb	r3, [r8, r3]
   37a78:	and	r3, r3, #192	; 0xc0
   37a7c:	cmp	r3, #128	; 0x80
   37a80:	subeq	r3, r1, #1
   37a84:	subeq	r0, r0, #1
   37a88:	bne	37aac <__assert_fail@plt+0x254e8>
   37a8c:	mov	r1, r3
   37a90:	cmp	r3, r0
   37a94:	beq	37b04 <__assert_fail@plt+0x25540>
   37a98:	sub	r3, r3, #1
   37a9c:	ldrb	r2, [r1]
   37aa0:	and	r2, r2, #192	; 0xc0
   37aa4:	cmp	r2, #128	; 0x80
   37aa8:	beq	37a8c <__assert_fail@plt+0x254c8>
   37aac:	mov	sl, r1
   37ab0:	ldr	r2, [r4, #48]	; 0x30
   37ab4:	add	r2, r8, r2
   37ab8:	sub	r2, r2, r1
   37abc:	ldr	r3, [r4, #64]	; 0x40
   37ac0:	cmp	r3, #0
   37ac4:	bne	37b54 <__assert_fail@plt+0x25590>
   37ac8:	mov	r3, #0
   37acc:	str	r3, [sp, #24]
   37ad0:	str	r3, [sp, #28]
   37ad4:	add	r3, sp, #24
   37ad8:	add	r0, sp, #12
   37adc:	bl	307cc <__assert_fail@plt+0x1e208>
   37ae0:	add	r8, r8, r9
   37ae4:	sub	sl, r8, sl
   37ae8:	cmp	r0, sl
   37aec:	movcc	r3, #0
   37af0:	movcs	r3, #1
   37af4:	cmn	r0, #3
   37af8:	movhi	r3, #0
   37afc:	cmp	r3, #0
   37b00:	bne	37b98 <__assert_fail@plt+0x255d4>
   37b04:	ldr	ip, [r4, #24]
   37b08:	ldr	r3, [r4, #32]
   37b0c:	add	ip, ip, r3
   37b10:	cmp	r6, ip
   37b14:	ble	37db8 <__assert_fail@plt+0x257f4>
   37b18:	add	sl, sp, #24
   37b1c:	add	r9, r4, #16
   37b20:	str	r5, [sp, #4]
   37b24:	b	37bc8 <__assert_fail@plt+0x25604>
   37b28:	ldr	r3, [r4, #44]	; 0x2c
   37b2c:	sub	r3, r3, r6
   37b30:	add	r3, r3, r5
   37b34:	str	r3, [r4, #48]	; 0x30
   37b38:	ldr	r3, [r4, #52]	; 0x34
   37b3c:	sub	r3, r3, r6
   37b40:	add	r3, r3, r5
   37b44:	str	r3, [r4, #56]	; 0x38
   37b48:	mov	r3, #0
   37b4c:	strb	r3, [r4, #76]	; 0x4c
   37b50:	b	37a24 <__assert_fail@plt+0x25460>
   37b54:	cmp	r2, #6
   37b58:	movlt	ip, r2
   37b5c:	movge	ip, #6
   37b60:	cmp	ip, #1
   37b64:	addmi	r1, sp, #16
   37b68:	bmi	37ac8 <__assert_fail@plt+0x25504>
   37b6c:	add	r0, r1, ip
   37b70:	add	lr, sp, #32
   37b74:	add	ip, lr, ip
   37b78:	sub	ip, ip, #17
   37b7c:	ldrb	lr, [r0, #-1]!
   37b80:	ldrb	lr, [r3, lr]
   37b84:	strb	lr, [ip], #-1
   37b88:	cmp	r0, r1
   37b8c:	bne	37b7c <__assert_fail@plt+0x255b8>
   37b90:	add	r1, sp, #16
   37b94:	b	37ac8 <__assert_fail@plt+0x25504>
   37b98:	mov	r3, #0
   37b9c:	str	r3, [r4, #16]
   37ba0:	str	r3, [r4, #20]
   37ba4:	sub	sl, r0, sl
   37ba8:	str	sl, [r4, #28]
   37bac:	ldr	r8, [sp, #12]
   37bb0:	cmn	r8, #1
   37bb4:	bne	37c40 <__assert_fail@plt+0x2567c>
   37bb8:	b	37b04 <__assert_fail@plt+0x25540>
   37bbc:	add	ip, r8, r0
   37bc0:	cmp	r6, ip
   37bc4:	ble	37c28 <__assert_fail@plt+0x25664>
   37bc8:	ldr	r5, [r4, #44]	; 0x2c
   37bcc:	sub	r5, r5, ip
   37bd0:	ldm	r9, {r0, r1}
   37bd4:	stm	sl, {r0, r1}
   37bd8:	mov	r8, ip
   37bdc:	ldr	r1, [r4]
   37be0:	mov	r3, r9
   37be4:	mov	r2, r5
   37be8:	add	r1, r1, ip
   37bec:	add	r0, sp, #16
   37bf0:	bl	307cc <__assert_fail@plt+0x1e208>
   37bf4:	sub	r3, r0, #1
   37bf8:	cmn	r3, #4
   37bfc:	ldrls	r3, [sp, #16]
   37c00:	bls	37bbc <__assert_fail@plt+0x255f8>
   37c04:	cmp	r5, #0
   37c08:	cmpne	r0, #0
   37c0c:	ldrne	r3, [r4]
   37c10:	ldrbne	r3, [r3, r8]
   37c14:	moveq	r3, #0
   37c18:	ldm	sl, {r0, r1}
   37c1c:	stm	r9, {r0, r1}
   37c20:	mov	r0, #1
   37c24:	b	37bbc <__assert_fail@plt+0x255f8>
   37c28:	ldr	r5, [sp, #4]
   37c2c:	mov	r8, r3
   37c30:	sub	ip, ip, r6
   37c34:	str	ip, [r4, #28]
   37c38:	cmn	r3, #1
   37c3c:	beq	37dc0 <__assert_fail@plt+0x257fc>
   37c40:	ldrb	r3, [r4, #78]	; 0x4e
   37c44:	cmp	r3, #0
   37c48:	bne	37c74 <__assert_fail@plt+0x256b0>
   37c4c:	cmp	r8, #10
   37c50:	movne	r3, #0
   37c54:	beq	37c9c <__assert_fail@plt+0x256d8>
   37c58:	str	r3, [r4, #60]	; 0x3c
   37c5c:	ldr	r2, [r4, #28]
   37c60:	cmp	r2, #0
   37c64:	bne	37cb0 <__assert_fail@plt+0x256ec>
   37c68:	ldr	r3, [r4, #28]
   37c6c:	str	r3, [r4, #32]
   37c70:	b	377b0 <__assert_fail@plt+0x251ec>
   37c74:	mov	r0, r8
   37c78:	bl	12324 <iswalnum@plt>
   37c7c:	clz	r0, r0
   37c80:	lsr	r0, r0, #5
   37c84:	cmp	r8, #95	; 0x5f
   37c88:	moveq	r0, #0
   37c8c:	cmp	r0, #0
   37c90:	moveq	r3, #1
   37c94:	bne	37c4c <__assert_fail@plt+0x25688>
   37c98:	b	37c58 <__assert_fail@plt+0x25694>
   37c9c:	ldrb	r3, [r4, #77]	; 0x4d
   37ca0:	cmp	r3, #0
   37ca4:	movne	r3, #2
   37ca8:	moveq	r3, #0
   37cac:	b	37c58 <__assert_fail@plt+0x25694>
   37cb0:	ble	37cd4 <__assert_fail@plt+0x25710>
   37cb4:	mov	r3, #0
   37cb8:	mvn	r1, #0
   37cbc:	ldr	r2, [r4, #8]
   37cc0:	str	r1, [r2, r3, lsl #2]
   37cc4:	add	r3, r3, #1
   37cc8:	ldr	r2, [r4, #28]
   37ccc:	cmp	r2, r3
   37cd0:	bgt	37cbc <__assert_fail@plt+0x256f8>
   37cd4:	ldrb	r3, [r4, #75]	; 0x4b
   37cd8:	cmp	r3, #0
   37cdc:	beq	37c68 <__assert_fail@plt+0x256a4>
   37ce0:	mov	r1, #255	; 0xff
   37ce4:	ldr	r0, [r4, #4]
   37ce8:	bl	12348 <memset@plt>
   37cec:	b	37c68 <__assert_fail@plt+0x256a4>
   37cf0:	ldr	r3, [r4]
   37cf4:	ldr	r2, [r4, #24]
   37cf8:	add	r3, r3, r5
   37cfc:	add	r3, r3, r2
   37d00:	ldrb	r3, [r3, #-1]
   37d04:	mov	r2, #0
   37d08:	str	r2, [r4, #32]
   37d0c:	ldr	r2, [r4, #64]	; 0x40
   37d10:	cmp	r2, #0
   37d14:	ldrbne	r3, [r2, r3]
   37d18:	lsr	r1, r3, #5
   37d1c:	ldr	r0, [r4, #68]	; 0x44
   37d20:	and	r2, r3, #31
   37d24:	ldr	r1, [r0, r1, lsl #2]
   37d28:	lsr	r2, r1, r2
   37d2c:	tst	r2, #1
   37d30:	movne	r3, #1
   37d34:	bne	37d44 <__assert_fail@plt+0x25780>
   37d38:	cmp	r3, #10
   37d3c:	movne	r3, #0
   37d40:	beq	37d4c <__assert_fail@plt+0x25788>
   37d44:	str	r3, [r4, #60]	; 0x3c
   37d48:	b	377b0 <__assert_fail@plt+0x251ec>
   37d4c:	ldrb	r3, [r4, #77]	; 0x4d
   37d50:	cmp	r3, #0
   37d54:	movne	r3, #2
   37d58:	moveq	r3, #0
   37d5c:	b	37d44 <__assert_fail@plt+0x25780>
   37d60:	mov	r0, r4
   37d64:	bl	325f4 <__assert_fail@plt+0x20030>
   37d68:	mov	r0, #0
   37d6c:	str	r0, [r4, #40]	; 0x28
   37d70:	add	sp, sp, #36	; 0x24
   37d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d78:	ldrb	r2, [r4, #75]	; 0x4b
   37d7c:	cmp	r2, #0
   37d80:	streq	r3, [r4, #28]
   37d84:	beq	37d68 <__assert_fail@plt+0x257a4>
   37d88:	ldrb	r3, [r4, #72]	; 0x48
   37d8c:	cmp	r3, #0
   37d90:	bne	37dac <__assert_fail@plt+0x257e8>
   37d94:	ldr	r3, [r4, #64]	; 0x40
   37d98:	cmp	r3, #0
   37d9c:	beq	37d68 <__assert_fail@plt+0x257a4>
   37da0:	mov	r0, r4
   37da4:	bl	3144c <__assert_fail@plt+0x1ee88>
   37da8:	b	37d68 <__assert_fail@plt+0x257a4>
   37dac:	mov	r0, r4
   37db0:	bl	33118 <__assert_fail@plt+0x20b54>
   37db4:	b	37d68 <__assert_fail@plt+0x257a4>
   37db8:	sub	ip, ip, r6
   37dbc:	str	ip, [r4, #28]
   37dc0:	mov	r2, r7
   37dc4:	sub	r1, fp, #1
   37dc8:	mov	r0, r4
   37dcc:	bl	3537c <__assert_fail@plt+0x22db8>
   37dd0:	str	r0, [r4, #60]	; 0x3c
   37dd4:	b	37c5c <__assert_fail@plt+0x25698>
   37dd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37ddc:	ldr	r9, [r0]
   37de0:	add	ip, r9, r1, lsl #3
   37de4:	ldrb	r8, [ip, #4]
   37de8:	cmp	r8, #7
   37dec:	beq	37e40 <__assert_fail@plt+0x2587c>
   37df0:	mov	r4, r3
   37df4:	mov	r5, r2
   37df8:	mov	r7, r1
   37dfc:	mov	r6, r0
   37e00:	mov	r1, r3
   37e04:	mov	r0, r2
   37e08:	bl	313bc <__assert_fail@plt+0x1edf8>
   37e0c:	mov	sl, r0
   37e10:	cmp	r8, #5
   37e14:	beq	37f58 <__assert_fail@plt+0x25994>
   37e18:	cmp	r8, #6
   37e1c:	movne	r8, #0
   37e20:	moveq	r8, #1
   37e24:	cmp	r0, #1
   37e28:	movle	r8, #0
   37e2c:	cmp	r8, #0
   37e30:	moveq	sl, #0
   37e34:	bne	37fa0 <__assert_fail@plt+0x259dc>
   37e38:	mov	r0, sl
   37e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37e40:	ldr	r0, [r2, #4]
   37e44:	ldrb	r1, [r0, r3]
   37e48:	cmp	r1, #193	; 0xc1
   37e4c:	movls	sl, #0
   37e50:	bls	37e38 <__assert_fail@plt+0x25874>
   37e54:	ldr	ip, [r2, #48]	; 0x30
   37e58:	add	r2, r3, #2
   37e5c:	cmp	r2, ip
   37e60:	movgt	sl, #0
   37e64:	bgt	37e38 <__assert_fail@plt+0x25874>
   37e68:	add	lr, r3, #1
   37e6c:	add	r2, r0, lr
   37e70:	ldrb	lr, [r0, lr]
   37e74:	cmp	r1, #223	; 0xdf
   37e78:	bhi	37e90 <__assert_fail@plt+0x258cc>
   37e7c:	eor	lr, lr, #128	; 0x80
   37e80:	cmp	lr, #63	; 0x3f
   37e84:	movls	sl, #2
   37e88:	movhi	sl, #0
   37e8c:	b	37e38 <__assert_fail@plt+0x25874>
   37e90:	cmp	r1, #239	; 0xef
   37e94:	bhi	37ef4 <__assert_fail@plt+0x25930>
   37e98:	cmp	lr, #159	; 0x9f
   37e9c:	cmpls	r1, #224	; 0xe0
   37ea0:	movne	sl, #3
   37ea4:	beq	380d8 <__assert_fail@plt+0x25b14>
   37ea8:	add	r1, sl, r3
   37eac:	cmp	ip, r1
   37eb0:	blt	380e8 <__assert_fail@plt+0x25b24>
   37eb4:	add	r3, r0, r3
   37eb8:	ldrb	r3, [r3, #1]
   37ebc:	eor	r3, r3, #128	; 0x80
   37ec0:	cmp	r3, #63	; 0x3f
   37ec4:	bhi	380e0 <__assert_fail@plt+0x25b1c>
   37ec8:	mov	r1, r2
   37ecc:	mov	r2, #1
   37ed0:	add	r2, r2, #1
   37ed4:	cmp	sl, r2
   37ed8:	ble	37e38 <__assert_fail@plt+0x25874>
   37edc:	ldrb	r3, [r1, #1]!
   37ee0:	eor	r3, r3, #128	; 0x80
   37ee4:	cmp	r3, #63	; 0x3f
   37ee8:	bls	37ed0 <__assert_fail@plt+0x2590c>
   37eec:	mov	sl, #0
   37ef0:	b	37e38 <__assert_fail@plt+0x25874>
   37ef4:	cmp	r1, #247	; 0xf7
   37ef8:	bhi	37f14 <__assert_fail@plt+0x25950>
   37efc:	cmp	lr, #143	; 0x8f
   37f00:	cmpls	r1, #240	; 0xf0
   37f04:	movne	sl, #4
   37f08:	bne	37ea8 <__assert_fail@plt+0x258e4>
   37f0c:	mov	sl, #0
   37f10:	b	37e38 <__assert_fail@plt+0x25874>
   37f14:	cmp	r1, #251	; 0xfb
   37f18:	bhi	37f34 <__assert_fail@plt+0x25970>
   37f1c:	cmp	lr, #135	; 0x87
   37f20:	cmpls	r1, #248	; 0xf8
   37f24:	movne	sl, #5
   37f28:	bne	37ea8 <__assert_fail@plt+0x258e4>
   37f2c:	mov	sl, #0
   37f30:	b	37e38 <__assert_fail@plt+0x25874>
   37f34:	cmp	r1, #253	; 0xfd
   37f38:	movhi	sl, #0
   37f3c:	bhi	37e38 <__assert_fail@plt+0x25874>
   37f40:	cmp	lr, #131	; 0x83
   37f44:	cmpls	r1, #252	; 0xfc
   37f48:	movne	sl, #6
   37f4c:	bne	37ea8 <__assert_fail@plt+0x258e4>
   37f50:	mov	sl, #0
   37f54:	b	37e38 <__assert_fail@plt+0x25874>
   37f58:	cmp	r0, #1
   37f5c:	movle	sl, #0
   37f60:	ble	37e38 <__assert_fail@plt+0x25874>
   37f64:	ldr	r3, [r6, #128]	; 0x80
   37f68:	tst	r3, #64	; 0x40
   37f6c:	bne	37f84 <__assert_fail@plt+0x259c0>
   37f70:	ldr	r2, [r5, #4]
   37f74:	ldrb	r2, [r2, r4]
   37f78:	cmp	r2, #10
   37f7c:	moveq	sl, #0
   37f80:	beq	37e38 <__assert_fail@plt+0x25874>
   37f84:	tst	r3, #128	; 0x80
   37f88:	beq	37e38 <__assert_fail@plt+0x25874>
   37f8c:	ldr	r3, [r5, #4]
   37f90:	ldrb	r3, [r3, r4]
   37f94:	cmp	r3, #0
   37f98:	moveq	sl, #0
   37f9c:	b	37e38 <__assert_fail@plt+0x25874>
   37fa0:	ldr	r6, [r9, r7, lsl #3]
   37fa4:	ldr	r3, [r6, #32]
   37fa8:	cmp	r3, #0
   37fac:	bne	37fec <__assert_fail@plt+0x25a28>
   37fb0:	ldr	r3, [r6, #36]	; 0x24
   37fb4:	cmp	r3, #0
   37fb8:	bne	37fec <__assert_fail@plt+0x25a28>
   37fbc:	ldr	r3, [r6, #20]
   37fc0:	cmp	r3, #0
   37fc4:	moveq	r4, #0
   37fc8:	beq	38090 <__assert_fail@plt+0x25acc>
   37fcc:	mov	r1, r4
   37fd0:	mov	r0, r5
   37fd4:	bl	31430 <__assert_fail@plt+0x1ee6c>
   37fd8:	mov	r4, r0
   37fdc:	ldr	r0, [r6, #20]
   37fe0:	cmp	r0, #0
   37fe4:	bgt	38008 <__assert_fail@plt+0x25a44>
   37fe8:	b	38090 <__assert_fail@plt+0x25acc>
   37fec:	mov	r1, r4
   37ff0:	mov	r0, r5
   37ff4:	bl	31430 <__assert_fail@plt+0x1ee6c>
   37ff8:	mov	r4, r0
   37ffc:	ldr	r0, [r6, #20]
   38000:	cmp	r0, #0
   38004:	ble	38058 <__assert_fail@plt+0x25a94>
   38008:	ldr	r2, [r6]
   3800c:	ldr	r3, [r2]
   38010:	cmp	r4, r3
   38014:	beq	38034 <__assert_fail@plt+0x25a70>
   38018:	mov	r3, #0
   3801c:	add	r3, r3, #1
   38020:	cmp	r0, r3
   38024:	beq	38058 <__assert_fail@plt+0x25a94>
   38028:	ldr	r1, [r2, #4]!
   3802c:	cmp	r4, r1
   38030:	bne	3801c <__assert_fail@plt+0x25a58>
   38034:	ldrb	r3, [r6, #16]
   38038:	tst	r3, #1
   3803c:	beq	37e38 <__assert_fail@plt+0x25874>
   38040:	cmp	sl, #0
   38044:	movgt	sl, #0
   38048:	bgt	37e38 <__assert_fail@plt+0x25874>
   3804c:	cmp	sl, #1
   38050:	movlt	sl, #1
   38054:	b	37e38 <__assert_fail@plt+0x25874>
   38058:	ldr	r3, [r6, #36]	; 0x24
   3805c:	cmp	r3, #0
   38060:	ble	38090 <__assert_fail@plt+0x25acc>
   38064:	mov	r5, #0
   38068:	ldr	r3, [r6, #12]
   3806c:	ldr	r1, [r3, r5, lsl #2]
   38070:	mov	r0, r4
   38074:	bl	11f10 <iswctype@plt>
   38078:	cmp	r0, #0
   3807c:	bne	38034 <__assert_fail@plt+0x25a70>
   38080:	add	r5, r5, #1
   38084:	ldr	r3, [r6, #36]	; 0x24
   38088:	cmp	r3, r5
   3808c:	bgt	38068 <__assert_fail@plt+0x25aa4>
   38090:	ldr	r0, [r6, #32]
   38094:	cmp	r0, #0
   38098:	ble	380f0 <__assert_fail@plt+0x25b2c>
   3809c:	ldr	r2, [r6, #4]
   380a0:	sub	r2, r2, #4
   380a4:	mov	r3, #0
   380a8:	b	380b8 <__assert_fail@plt+0x25af4>
   380ac:	add	r3, r3, #1
   380b0:	cmp	r0, r3
   380b4:	beq	380f0 <__assert_fail@plt+0x25b2c>
   380b8:	ldr	r1, [r2, #4]!
   380bc:	cmp	r4, r1
   380c0:	bcc	380ac <__assert_fail@plt+0x25ae8>
   380c4:	ldr	r1, [r6, #8]
   380c8:	ldr	r1, [r1, r3, lsl #2]
   380cc:	cmp	r4, r1
   380d0:	bhi	380ac <__assert_fail@plt+0x25ae8>
   380d4:	b	38034 <__assert_fail@plt+0x25a70>
   380d8:	mov	sl, #0
   380dc:	b	37e38 <__assert_fail@plt+0x25874>
   380e0:	mov	sl, #0
   380e4:	b	37e38 <__assert_fail@plt+0x25874>
   380e8:	mov	sl, #0
   380ec:	b	37e38 <__assert_fail@plt+0x25874>
   380f0:	ldrb	r3, [r6, #16]
   380f4:	tst	r3, #1
   380f8:	bne	3804c <__assert_fail@plt+0x25a88>
   380fc:	mov	sl, #0
   38100:	b	37e38 <__assert_fail@plt+0x25874>
   38104:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38108:	ldr	lr, [r2, #4]
   3810c:	cmp	lr, #0
   38110:	moveq	r4, #0
   38114:	streq	r4, [r0]
   38118:	beq	382f0 <__assert_fail@plt+0x25d2c>
   3811c:	mov	r6, lr
   38120:	cmp	lr, #0
   38124:	ble	38140 <__assert_fail@plt+0x25b7c>
   38128:	ldr	r3, [r2, #8]
   3812c:	add	lr, r3, lr, lsl #2
   38130:	ldr	ip, [r3], #4
   38134:	add	r6, r6, ip
   38138:	cmp	r3, lr
   3813c:	bne	38130 <__assert_fail@plt+0x25b6c>
   38140:	mov	sl, r2
   38144:	mov	r7, r1
   38148:	mov	r8, r0
   3814c:	ldr	r3, [r1, #68]	; 0x44
   38150:	and	r3, r3, r6
   38154:	add	r3, r3, r3, lsl #1
   38158:	lsl	r3, r3, #2
   3815c:	ldr	r2, [r1, #32]
   38160:	add	r1, r2, r3
   38164:	ldr	fp, [r2, r3]
   38168:	cmp	fp, #0
   3816c:	ble	381b4 <__assert_fail@plt+0x25bf0>
   38170:	ldr	r9, [r1, #8]
   38174:	sub	r9, r9, #4
   38178:	mov	r5, #0
   3817c:	b	3818c <__assert_fail@plt+0x25bc8>
   38180:	add	r5, r5, #1
   38184:	cmp	r5, fp
   38188:	beq	381b4 <__assert_fail@plt+0x25bf0>
   3818c:	ldr	r4, [r9, #4]!
   38190:	ldr	r3, [r4]
   38194:	cmp	r6, r3
   38198:	bne	38180 <__assert_fail@plt+0x25bbc>
   3819c:	mov	r1, sl
   381a0:	add	r0, r4, #4
   381a4:	bl	314a0 <__assert_fail@plt+0x1eedc>
   381a8:	cmp	r0, #0
   381ac:	beq	38180 <__assert_fail@plt+0x25bbc>
   381b0:	b	382f0 <__assert_fail@plt+0x25d2c>
   381b4:	mov	r1, #1
   381b8:	mov	r0, #56	; 0x38
   381bc:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   381c0:	subs	r4, r0, #0
   381c4:	beq	3820c <__assert_fail@plt+0x25c48>
   381c8:	add	r5, r4, #4
   381cc:	mov	r1, sl
   381d0:	mov	r0, r5
   381d4:	bl	32d50 <__assert_fail@plt+0x2078c>
   381d8:	cmp	r0, #0
   381dc:	bne	38204 <__assert_fail@plt+0x25c40>
   381e0:	str	r5, [r4, #40]	; 0x28
   381e4:	ldr	lr, [sl, #4]
   381e8:	cmp	lr, #0
   381ec:	ble	382d8 <__assert_fail@plt+0x25d14>
   381f0:	ldr	r5, [r7]
   381f4:	ldr	ip, [sl, #8]
   381f8:	add	lr, ip, lr, lsl #2
   381fc:	ldr	r9, [pc, #256]	; 38304 <__assert_fail@plt+0x25d40>
   38200:	b	38270 <__assert_fail@plt+0x25cac>
   38204:	mov	r0, r4
   38208:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3820c:	mov	r3, #12
   38210:	str	r3, [r8]
   38214:	mov	r4, #0
   38218:	b	382f0 <__assert_fail@plt+0x25d2c>
   3821c:	ldr	r3, [r2, #4]
   38220:	tst	r3, r9
   38224:	beq	38268 <__assert_fail@plt+0x25ca4>
   38228:	ldrb	r0, [r2, #6]
   3822c:	ldrb	r3, [r4, #52]	; 0x34
   38230:	lsr	r1, r3, #5
   38234:	orr	r1, r1, r0, lsr #4
   38238:	and	r1, r1, #1
   3823c:	bic	r3, r3, #32
   38240:	orr	r3, r3, r1, lsl #5
   38244:	strb	r3, [r4, #52]	; 0x34
   38248:	b	382c8 <__assert_fail@plt+0x25d04>
   3824c:	ldrb	r3, [r4, #52]	; 0x34
   38250:	orr	r3, r3, #64	; 0x40
   38254:	strb	r3, [r4, #52]	; 0x34
   38258:	b	38268 <__assert_fail@plt+0x25ca4>
   3825c:	ldrb	r3, [r4, #52]	; 0x34
   38260:	orr	r3, r3, #128	; 0x80
   38264:	strb	r3, [r4, #52]	; 0x34
   38268:	cmp	ip, lr
   3826c:	beq	382d8 <__assert_fail@plt+0x25d14>
   38270:	ldr	r2, [ip], #4
   38274:	add	r2, r5, r2, lsl #3
   38278:	ldrb	r0, [r2, #4]
   3827c:	cmp	r0, #1
   38280:	beq	3821c <__assert_fail@plt+0x25c58>
   38284:	ldrb	r1, [r4, #52]	; 0x34
   38288:	ldrb	r3, [r2, #6]
   3828c:	lsr	r3, r3, #4
   38290:	orr	r3, r3, r1, lsr #5
   38294:	and	r3, r3, #1
   38298:	bic	r1, r1, #32
   3829c:	orr	r3, r1, r3, lsl #5
   382a0:	strb	r3, [r4, #52]	; 0x34
   382a4:	cmp	r0, #2
   382a8:	uxtbeq	r3, r3
   382ac:	orreq	r3, r3, #16
   382b0:	strbeq	r3, [r4, #52]	; 0x34
   382b4:	beq	38268 <__assert_fail@plt+0x25ca4>
   382b8:	cmp	r0, #4
   382bc:	beq	3824c <__assert_fail@plt+0x25c88>
   382c0:	cmp	r0, #12
   382c4:	beq	3825c <__assert_fail@plt+0x25c98>
   382c8:	ldr	r3, [r2, #4]
   382cc:	tst	r3, r9
   382d0:	beq	38268 <__assert_fail@plt+0x25ca4>
   382d4:	b	3825c <__assert_fail@plt+0x25c98>
   382d8:	mov	r2, r6
   382dc:	mov	r1, r4
   382e0:	mov	r0, r7
   382e4:	bl	324f4 <__assert_fail@plt+0x1ff30>
   382e8:	cmp	r0, #0
   382ec:	bne	382f8 <__assert_fail@plt+0x25d34>
   382f0:	mov	r0, r4
   382f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   382f8:	mov	r0, r4
   382fc:	bl	340ac <__assert_fail@plt+0x21ae8>
   38300:	b	3820c <__assert_fail@plt+0x25c48>
   38304:	andeq	pc, r3, r0, lsl #30
   38308:	push	{r4, r5, r6, r7, r8, r9, lr}
   3830c:	sub	sp, sp, #20
   38310:	subs	r8, r3, #0
   38314:	ble	383b4 <__assert_fail@plt+0x25df0>
   38318:	mov	r9, r0
   3831c:	mov	r4, r1
   38320:	mov	r5, r2
   38324:	mov	r6, #0
   38328:	b	38348 <__assert_fail@plt+0x25d84>
   3832c:	ldr	r3, [r5]
   38330:	str	r3, [r4]
   38334:	add	r6, r6, #1
   38338:	add	r4, r4, #4
   3833c:	add	r5, r5, #4
   38340:	cmp	r8, r6
   38344:	beq	383ac <__assert_fail@plt+0x25de8>
   38348:	ldr	r1, [r4]
   3834c:	cmp	r1, #0
   38350:	beq	3832c <__assert_fail@plt+0x25d68>
   38354:	ldr	r2, [r5]
   38358:	cmp	r2, #0
   3835c:	beq	38334 <__assert_fail@plt+0x25d70>
   38360:	add	r2, r2, #4
   38364:	add	r1, r1, #4
   38368:	mov	r0, sp
   3836c:	bl	32dcc <__assert_fail@plt+0x20808>
   38370:	str	r0, [sp, #12]
   38374:	cmp	r0, #0
   38378:	bne	383a4 <__assert_fail@plt+0x25de0>
   3837c:	mov	r2, sp
   38380:	mov	r1, r9
   38384:	add	r0, sp, #12
   38388:	bl	38104 <__assert_fail@plt+0x25b40>
   3838c:	str	r0, [r4]
   38390:	ldr	r0, [sp, #8]
   38394:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38398:	ldr	r0, [sp, #12]
   3839c:	cmp	r0, #0
   383a0:	beq	38334 <__assert_fail@plt+0x25d70>
   383a4:	add	sp, sp, #20
   383a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   383ac:	mov	r0, #0
   383b0:	b	383a4 <__assert_fail@plt+0x25de0>
   383b4:	mov	r0, #0
   383b8:	b	383a4 <__assert_fail@plt+0x25de0>
   383bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   383c0:	sub	sp, sp, #28
   383c4:	mov	sl, r0
   383c8:	mov	r7, r1
   383cc:	mov	r8, r2
   383d0:	str	r3, [sp, #4]
   383d4:	mov	r1, r2
   383d8:	bl	31b38 <__assert_fail@plt+0x1f574>
   383dc:	cmn	r0, #1
   383e0:	moveq	r0, #0
   383e4:	beq	385bc <__assert_fail@plt+0x25ff8>
   383e8:	ldr	fp, [sl, #84]	; 0x54
   383ec:	add	r0, r0, r0, lsl #1
   383f0:	lsl	r0, r0, #3
   383f4:	add	r3, r0, #24
   383f8:	str	r3, [sp]
   383fc:	b	3855c <__assert_fail@plt+0x25f98>
   38400:	ldr	r3, [fp, #20]
   38404:	add	r6, r6, r6, lsl #1
   38408:	add	r6, r3, r6, lsl #2
   3840c:	ldr	r3, [r6, #8]
   38410:	ldr	r5, [r3]
   38414:	mov	r1, r5
   38418:	mov	r0, r7
   3841c:	bl	31514 <__assert_fail@plt+0x1ef50>
   38420:	cmp	r0, #0
   38424:	beq	3850c <__assert_fail@plt+0x25f48>
   38428:	add	r4, r4, #24
   3842c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   38430:	cmp	r3, #0
   38434:	beq	385b8 <__assert_fail@plt+0x25ff4>
   38438:	ldr	r6, [r4, #-24]	; 0xffffffe8
   3843c:	mov	r1, r6
   38440:	mov	r0, r7
   38444:	bl	31514 <__assert_fail@plt+0x1ef50>
   38448:	cmp	r0, #0
   3844c:	beq	38428 <__assert_fail@plt+0x25e64>
   38450:	ldr	r5, [r4, #-12]
   38454:	add	r5, r8, r5
   38458:	ldr	r3, [r4, #-16]
   3845c:	sub	r5, r5, r3
   38460:	cmp	r8, r5
   38464:	beq	38400 <__assert_fail@plt+0x25e3c>
   38468:	ldr	r3, [fp, #12]
   3846c:	ldr	r9, [r3, r6, lsl #2]
   38470:	ldr	r3, [sl, #100]	; 0x64
   38474:	ldr	r6, [r3, r5, lsl #2]
   38478:	cmp	r6, #0
   3847c:	beq	3859c <__assert_fail@plt+0x25fd8>
   38480:	add	r6, r6, #4
   38484:	mov	r1, r9
   38488:	mov	r0, r6
   3848c:	bl	31514 <__assert_fail@plt+0x1ef50>
   38490:	cmp	r0, #0
   38494:	bne	38428 <__assert_fail@plt+0x25e64>
   38498:	mov	r1, r6
   3849c:	add	r0, sp, #8
   384a0:	bl	32d50 <__assert_fail@plt+0x2078c>
   384a4:	str	r0, [sp, #20]
   384a8:	mov	r1, r9
   384ac:	add	r0, sp, #8
   384b0:	bl	34a64 <__assert_fail@plt+0x224a0>
   384b4:	eor	r0, r0, #1
   384b8:	ldr	r3, [sp, #20]
   384bc:	cmp	r3, #0
   384c0:	orrne	r0, r0, #1
   384c4:	tst	r0, #255	; 0xff
   384c8:	bne	38584 <__assert_fail@plt+0x25fc0>
   384cc:	ldr	r6, [sl, #100]	; 0x64
   384d0:	add	r2, sp, #8
   384d4:	mov	r1, fp
   384d8:	add	r0, sp, #20
   384dc:	bl	38104 <__assert_fail@plt+0x25b40>
   384e0:	str	r0, [r6, r5, lsl #2]
   384e4:	ldr	r0, [sp, #16]
   384e8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   384ec:	ldr	r3, [sl, #100]	; 0x64
   384f0:	ldr	r3, [r3, r5, lsl #2]
   384f4:	cmp	r3, #0
   384f8:	bne	38428 <__assert_fail@plt+0x25e64>
   384fc:	ldr	r0, [sp, #20]
   38500:	cmp	r0, #0
   38504:	beq	38428 <__assert_fail@plt+0x25e64>
   38508:	b	385bc <__assert_fail@plt+0x25ff8>
   3850c:	mov	r1, r5
   38510:	add	r0, sp, #8
   38514:	bl	32480 <__assert_fail@plt+0x1febc>
   38518:	str	r0, [sp, #20]
   3851c:	ldr	r3, [sp, #64]	; 0x40
   38520:	ldr	r2, [sp, #4]
   38524:	add	r1, sp, #8
   38528:	mov	r0, fp
   3852c:	bl	357a4 <__assert_fail@plt+0x231e0>
   38530:	mov	r4, r0
   38534:	add	r1, sp, #8
   38538:	mov	r0, r7
   3853c:	bl	34fa8 <__assert_fail@plt+0x229e4>
   38540:	mov	r5, r0
   38544:	ldr	r0, [sp, #16]
   38548:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3854c:	ldr	r0, [sp, #20]
   38550:	orr	r3, r4, r5
   38554:	orrs	r3, r3, r0
   38558:	bne	3856c <__assert_fail@plt+0x25fa8>
   3855c:	ldr	r4, [sl, #116]	; 0x74
   38560:	ldr	r3, [sp]
   38564:	add	r4, r4, r3
   38568:	b	38438 <__assert_fail@plt+0x25e74>
   3856c:	cmp	r0, #0
   38570:	bne	385bc <__assert_fail@plt+0x25ff8>
   38574:	cmp	r4, #0
   38578:	movne	r0, r4
   3857c:	moveq	r0, r5
   38580:	b	385bc <__assert_fail@plt+0x25ff8>
   38584:	ldr	r0, [sp, #16]
   38588:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3858c:	ldr	r0, [sp, #20]
   38590:	cmp	r0, #0
   38594:	moveq	r0, #12
   38598:	b	385bc <__assert_fail@plt+0x25ff8>
   3859c:	mov	r1, r9
   385a0:	add	r0, sp, #8
   385a4:	bl	32480 <__assert_fail@plt+0x1febc>
   385a8:	str	r0, [sp, #20]
   385ac:	cmp	r0, #0
   385b0:	beq	384cc <__assert_fail@plt+0x25f08>
   385b4:	b	385bc <__assert_fail@plt+0x25ff8>
   385b8:	mov	r0, #0
   385bc:	add	sp, sp, #28
   385c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   385c8:	sub	sp, sp, #92	; 0x5c
   385cc:	mov	sl, r0
   385d0:	str	r1, [sp, #44]	; 0x2c
   385d4:	mov	r7, r2
   385d8:	mov	r5, r3
   385dc:	ldr	r3, [r0, #84]	; 0x54
   385e0:	mov	r2, r3
   385e4:	str	r3, [sp, #36]	; 0x24
   385e8:	mov	r3, #0
   385ec:	str	r3, [sp, #84]	; 0x54
   385f0:	ldr	r3, [r2]
   385f4:	ldr	r3, [r3, r7, lsl #3]
   385f8:	str	r3, [sp, #40]	; 0x28
   385fc:	ldr	r6, [r1, #4]
   38600:	ldr	r4, [r0, #120]	; 0x78
   38604:	ldr	r3, [sp, #132]	; 0x84
   38608:	add	r4, r3, r4
   3860c:	add	r4, r4, #1
   38610:	cmp	r6, r4
   38614:	blt	3872c <__assert_fail@plt+0x26168>
   38618:	ldr	r3, [sp, #44]	; 0x2c
   3861c:	ldr	fp, [r3]
   38620:	cmp	fp, #0
   38624:	beq	38b9c <__assert_fail@plt+0x265d8>
   38628:	ldr	r2, [sl, #100]	; 0x64
   3862c:	str	r2, [sp, #48]	; 0x30
   38630:	ldr	r2, [sl, #40]	; 0x28
   38634:	str	r2, [sp, #52]	; 0x34
   38638:	ldr	r6, [r3, #8]
   3863c:	str	r6, [sl, #100]	; 0x64
   38640:	str	fp, [sl, #40]	; 0x28
   38644:	str	sl, [sp, #20]
   38648:	ldr	r2, [sl, #88]	; 0x58
   3864c:	sub	r1, fp, #1
   38650:	mov	r0, sl
   38654:	bl	3537c <__assert_fail@plt+0x22db8>
   38658:	mov	r4, r0
   3865c:	cmp	fp, r5
   38660:	beq	38bd4 <__assert_fail@plt+0x26610>
   38664:	ldr	r6, [r6, fp, lsl #2]
   38668:	cmp	r6, #0
   3866c:	beq	38c40 <__assert_fail@plt+0x2667c>
   38670:	ldrb	r3, [r6, #52]	; 0x34
   38674:	tst	r3, #64	; 0x40
   38678:	bne	3877c <__assert_fail@plt+0x261b8>
   3867c:	mov	r3, #0
   38680:	str	r3, [sp, #72]	; 0x48
   38684:	str	r3, [sp, #76]	; 0x4c
   38688:	str	r3, [sp, #80]	; 0x50
   3868c:	ldrb	r3, [r6, #52]	; 0x34
   38690:	tst	r3, #64	; 0x40
   38694:	beq	386f0 <__assert_fail@plt+0x2612c>
   38698:	ldr	r3, [sp, #76]	; 0x4c
   3869c:	cmp	r3, #0
   386a0:	beq	386cc <__assert_fail@plt+0x26108>
   386a4:	ldr	r3, [sp, #136]	; 0x88
   386a8:	str	r3, [sp]
   386ac:	ldr	r3, [sp, #40]	; 0x28
   386b0:	mov	r2, fp
   386b4:	add	r1, sp, #72	; 0x48
   386b8:	mov	r0, sl
   386bc:	bl	383bc <__assert_fail@plt+0x25df8>
   386c0:	str	r0, [sp, #84]	; 0x54
   386c4:	cmp	r0, #0
   386c8:	bne	38798 <__assert_fail@plt+0x261d4>
   386cc:	mov	r3, r4
   386d0:	add	r2, sp, #72	; 0x48
   386d4:	ldr	r1, [sp, #36]	; 0x24
   386d8:	add	r0, sp, #84	; 0x54
   386dc:	bl	34108 <__assert_fail@plt+0x21b44>
   386e0:	subs	r6, r0, #0
   386e4:	beq	387a8 <__assert_fail@plt+0x261e4>
   386e8:	ldr	r3, [sl, #100]	; 0x64
   386ec:	str	r6, [r3, fp, lsl #2]
   386f0:	ldr	r3, [sp, #132]	; 0x84
   386f4:	cmp	r3, fp
   386f8:	ble	38b6c <__assert_fail@plt+0x265a8>
   386fc:	ldr	r3, [sl, #120]	; 0x78
   38700:	cmp	r3, #0
   38704:	blt	38b74 <__assert_fail@plt+0x265b0>
   38708:	add	r3, fp, #1
   3870c:	lsl	r3, r3, #2
   38710:	str	r3, [sp, #16]
   38714:	mov	r3, #0
   38718:	str	r3, [sp, #32]
   3871c:	mov	r9, r3
   38720:	str	fp, [sp, #12]
   38724:	mov	fp, sl
   38728:	b	38a3c <__assert_fail@plt+0x26478>
   3872c:	mvn	r3, #-2147483648	; 0x80000000
   38730:	sub	r3, r3, r6
   38734:	cmp	r4, r3
   38738:	bgt	38b84 <__assert_fail@plt+0x265c0>
   3873c:	add	r8, r6, r4
   38740:	cmn	r8, #-1073741823	; 0xc0000001
   38744:	bhi	38b8c <__assert_fail@plt+0x265c8>
   38748:	lsl	r1, r8, #2
   3874c:	ldr	r9, [sp, #44]	; 0x2c
   38750:	ldr	r0, [r9, #8]
   38754:	bl	31320 <__assert_fail@plt+0x1ed5c>
   38758:	cmp	r0, #0
   3875c:	beq	38b94 <__assert_fail@plt+0x265d0>
   38760:	str	r0, [r9, #8]
   38764:	str	r8, [r9, #4]
   38768:	lsl	r2, r4, #2
   3876c:	mov	r1, #0
   38770:	add	r0, r0, r6, lsl #2
   38774:	bl	12348 <memset@plt>
   38778:	b	38618 <__assert_fail@plt+0x26054>
   3877c:	add	r1, r6, #4
   38780:	add	r0, sp, #72	; 0x48
   38784:	bl	32d50 <__assert_fail@plt+0x2078c>
   38788:	str	r0, [sp, #84]	; 0x54
   3878c:	cmp	r0, #0
   38790:	beq	3868c <__assert_fail@plt+0x260c8>
   38794:	b	387d0 <__assert_fail@plt+0x2620c>
   38798:	ldr	r0, [sp, #80]	; 0x50
   3879c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   387a0:	ldr	r0, [sp, #84]	; 0x54
   387a4:	b	387d0 <__assert_fail@plt+0x2620c>
   387a8:	ldr	r3, [sp, #84]	; 0x54
   387ac:	cmp	r3, #0
   387b0:	beq	386e8 <__assert_fail@plt+0x26124>
   387b4:	ldr	r0, [sp, #80]	; 0x50
   387b8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   387bc:	ldr	r0, [sp, #84]	; 0x54
   387c0:	b	387d0 <__assert_fail@plt+0x2620c>
   387c4:	ldr	r0, [sp, #80]	; 0x50
   387c8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   387cc:	ldr	r0, [sp, #84]	; 0x54
   387d0:	add	sp, sp, #92	; 0x5c
   387d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   387d8:	ldr	r3, [sp, #12]
   387dc:	ldr	r2, [sp, #20]
   387e0:	mov	r0, r5
   387e4:	bl	37dd8 <__assert_fail@plt+0x25814>
   387e8:	mov	r8, r0
   387ec:	cmp	r0, #1
   387f0:	ble	38884 <__assert_fail@plt+0x262c0>
   387f4:	ldr	r3, [r5, #12]
   387f8:	ldr	r2, [r3, fp, lsl #2]
   387fc:	str	r2, [sp, #24]
   38800:	ldr	r3, [sp, #12]
   38804:	add	r3, r3, r0
   38808:	mov	r2, r3
   3880c:	str	r3, [sp, #28]
   38810:	ldr	r3, [sl, #100]	; 0x64
   38814:	ldr	r1, [r3, r2, lsl #2]
   38818:	str	r9, [sp, #64]	; 0x40
   3881c:	cmp	r1, #0
   38820:	beq	3883c <__assert_fail@plt+0x26278>
   38824:	add	r1, r1, #4
   38828:	add	r0, sp, #60	; 0x3c
   3882c:	bl	34fa8 <__assert_fail@plt+0x229e4>
   38830:	str	r0, [sp, #56]	; 0x38
   38834:	cmp	r0, #0
   38838:	bne	388f8 <__assert_fail@plt+0x26334>
   3883c:	ldr	r1, [sp, #24]
   38840:	add	r0, sp, #60	; 0x3c
   38844:	bl	34a64 <__assert_fail@plt+0x224a0>
   38848:	cmp	r0, #0
   3884c:	beq	38918 <__assert_fail@plt+0x26354>
   38850:	ldr	r3, [sl, #100]	; 0x64
   38854:	str	r3, [sp, #24]
   38858:	add	r2, sp, #60	; 0x3c
   3885c:	mov	r1, r5
   38860:	add	r0, sp, #56	; 0x38
   38864:	bl	38104 <__assert_fail@plt+0x25b40>
   38868:	ldr	r1, [sp, #24]
   3886c:	ldr	r2, [sp, #28]
   38870:	str	r0, [r1, r2, lsl #2]
   38874:	ldr	r3, [sl, #100]	; 0x64
   38878:	ldr	r3, [r3, r2, lsl #2]
   3887c:	cmp	r3, #0
   38880:	beq	38924 <__assert_fail@plt+0x26360>
   38884:	cmp	r8, #0
   38888:	beq	388d8 <__assert_fail@plt+0x26314>
   3888c:	ldr	r3, [r5, #12]
   38890:	ldr	r1, [r3, fp, lsl #2]
   38894:	add	r0, sp, #72	; 0x48
   38898:	bl	34a64 <__assert_fail@plt+0x224a0>
   3889c:	cmp	r0, #0
   388a0:	beq	38944 <__assert_fail@plt+0x26380>
   388a4:	add	r4, r4, #1
   388a8:	ldr	r3, [r6, #20]
   388ac:	cmp	r4, r3
   388b0:	bge	38964 <__assert_fail@plt+0x263a0>
   388b4:	ldr	r3, [r6, #24]
   388b8:	ldr	r1, [r3, r4, lsl #2]
   388bc:	mov	fp, r1
   388c0:	lsl	r7, r1, #3
   388c4:	ldr	r3, [r5]
   388c8:	add	r3, r3, r7
   388cc:	ldrb	r3, [r3, #6]
   388d0:	tst	r3, #16
   388d4:	bne	387d8 <__assert_fail@plt+0x26214>
   388d8:	ldr	r1, [r5]
   388dc:	ldr	r2, [sp, #12]
   388e0:	add	r1, r1, r7
   388e4:	mov	r0, sl
   388e8:	bl	35490 <__assert_fail@plt+0x22ecc>
   388ec:	cmp	r0, #0
   388f0:	beq	388a4 <__assert_fail@plt+0x262e0>
   388f4:	b	3888c <__assert_fail@plt+0x262c8>
   388f8:	mov	fp, sl
   388fc:	ldr	r0, [sp, #68]	; 0x44
   38900:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38904:	ldr	r3, [sp, #56]	; 0x38
   38908:	str	r3, [sp, #84]	; 0x54
   3890c:	cmp	r3, #0
   38910:	beq	38974 <__assert_fail@plt+0x263b0>
   38914:	b	38954 <__assert_fail@plt+0x26390>
   38918:	ldr	r0, [sp, #68]	; 0x44
   3891c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38920:	b	3894c <__assert_fail@plt+0x26388>
   38924:	ldr	r3, [sp, #56]	; 0x38
   38928:	cmp	r3, #0
   3892c:	beq	38884 <__assert_fail@plt+0x262c0>
   38930:	mov	fp, sl
   38934:	ldr	r0, [sp, #68]	; 0x44
   38938:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3893c:	ldr	r3, [sp, #56]	; 0x38
   38940:	b	38908 <__assert_fail@plt+0x26344>
   38944:	ldr	r0, [sp, #68]	; 0x44
   38948:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3894c:	mov	r3, #12
   38950:	str	r3, [sp, #84]	; 0x54
   38954:	ldr	r0, [sp, #80]	; 0x50
   38958:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3895c:	ldr	r0, [sp, #84]	; 0x54
   38960:	b	387d0 <__assert_fail@plt+0x2620c>
   38964:	mov	fp, sl
   38968:	ldr	r0, [sp, #68]	; 0x44
   3896c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38970:	str	r9, [sp, #84]	; 0x54
   38974:	ldr	r3, [sp, #12]
   38978:	add	r4, r3, #1
   3897c:	ldr	r3, [sp, #76]	; 0x4c
   38980:	cmp	r3, #0
   38984:	beq	389d0 <__assert_fail@plt+0x2640c>
   38988:	ldr	r3, [sp, #136]	; 0x88
   3898c:	ldr	r2, [sp, #40]	; 0x28
   38990:	add	r1, sp, #72	; 0x48
   38994:	ldr	r0, [sp, #36]	; 0x24
   38998:	bl	357a4 <__assert_fail@plt+0x231e0>
   3899c:	str	r0, [sp, #84]	; 0x54
   389a0:	cmp	r0, #0
   389a4:	bne	38abc <__assert_fail@plt+0x264f8>
   389a8:	ldr	r3, [sp, #136]	; 0x88
   389ac:	str	r3, [sp]
   389b0:	ldr	r3, [sp, #40]	; 0x28
   389b4:	mov	r2, r4
   389b8:	add	r1, sp, #72	; 0x48
   389bc:	mov	r0, fp
   389c0:	bl	383bc <__assert_fail@plt+0x25df8>
   389c4:	str	r0, [sp, #84]	; 0x54
   389c8:	cmp	r0, #0
   389cc:	bne	38acc <__assert_fail@plt+0x26508>
   389d0:	ldr	r2, [fp, #88]	; 0x58
   389d4:	ldr	r1, [sp, #12]
   389d8:	ldr	r0, [sp, #20]
   389dc:	bl	3537c <__assert_fail@plt+0x22db8>
   389e0:	mov	r3, r0
   389e4:	add	r2, sp, #72	; 0x48
   389e8:	ldr	r1, [sp, #36]	; 0x24
   389ec:	add	r0, sp, #84	; 0x54
   389f0:	bl	34108 <__assert_fail@plt+0x21b44>
   389f4:	subs	r6, r0, #0
   389f8:	beq	38adc <__assert_fail@plt+0x26518>
   389fc:	ldr	r3, [fp, #100]	; 0x64
   38a00:	ldr	r2, [sp, #16]
   38a04:	str	r6, [r3, r2]
   38a08:	mov	r3, #0
   38a0c:	str	r3, [sp, #32]
   38a10:	ldr	r3, [sp, #132]	; 0x84
   38a14:	cmp	r3, r4
   38a18:	ble	38b7c <__assert_fail@plt+0x265b8>
   38a1c:	ldr	r3, [sp, #16]
   38a20:	add	r3, r3, #4
   38a24:	str	r3, [sp, #16]
   38a28:	ldr	r3, [fp, #120]	; 0x78
   38a2c:	ldr	r2, [sp, #32]
   38a30:	cmp	r2, r3
   38a34:	bgt	38b14 <__assert_fail@plt+0x26550>
   38a38:	str	r4, [sp, #12]
   38a3c:	str	r9, [sp, #76]	; 0x4c
   38a40:	ldr	r3, [fp, #100]	; 0x64
   38a44:	ldr	r2, [sp, #16]
   38a48:	ldr	r1, [r3, r2]
   38a4c:	cmp	r1, #0
   38a50:	beq	38c54 <__assert_fail@plt+0x26690>
   38a54:	add	r1, r1, #4
   38a58:	add	r0, sp, #72	; 0x48
   38a5c:	bl	34fa8 <__assert_fail@plt+0x229e4>
   38a60:	str	r0, [sp, #84]	; 0x54
   38a64:	cmp	r0, #0
   38a68:	bne	387c4 <__assert_fail@plt+0x26200>
   38a6c:	cmp	r6, #0
   38a70:	beq	38974 <__assert_fail@plt+0x263b0>
   38a74:	ldr	r5, [fp, #84]	; 0x54
   38a78:	str	r9, [sp, #56]	; 0x38
   38a7c:	str	r9, [sp, #60]	; 0x3c
   38a80:	str	r9, [sp, #64]	; 0x40
   38a84:	str	r9, [sp, #68]	; 0x44
   38a88:	ldr	r3, [r6, #20]
   38a8c:	cmp	r3, #0
   38a90:	ble	38968 <__assert_fail@plt+0x263a4>
   38a94:	ldr	r3, [r6, #24]
   38a98:	ldr	r1, [r3]
   38a9c:	lsl	r7, r1, #3
   38aa0:	ldr	r3, [r5]
   38aa4:	add	r3, r3, r7
   38aa8:	mov	r4, #0
   38aac:	mov	r2, fp
   38ab0:	mov	fp, r1
   38ab4:	mov	sl, r2
   38ab8:	b	388cc <__assert_fail@plt+0x26308>
   38abc:	ldr	r0, [sp, #80]	; 0x50
   38ac0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38ac4:	ldr	r0, [sp, #84]	; 0x54
   38ac8:	b	387d0 <__assert_fail@plt+0x2620c>
   38acc:	ldr	r0, [sp, #80]	; 0x50
   38ad0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38ad4:	ldr	r0, [sp, #84]	; 0x54
   38ad8:	b	387d0 <__assert_fail@plt+0x2620c>
   38adc:	ldr	r3, [sp, #84]	; 0x54
   38ae0:	cmp	r3, #0
   38ae4:	bne	38b04 <__assert_fail@plt+0x26540>
   38ae8:	ldr	r3, [fp, #100]	; 0x64
   38aec:	ldr	r2, [sp, #16]
   38af0:	str	r9, [r3, r2]
   38af4:	ldr	r3, [sp, #32]
   38af8:	add	r3, r3, #1
   38afc:	str	r3, [sp, #32]
   38b00:	b	38a10 <__assert_fail@plt+0x2644c>
   38b04:	ldr	r0, [sp, #80]	; 0x50
   38b08:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38b0c:	ldr	r0, [sp, #84]	; 0x54
   38b10:	b	387d0 <__assert_fail@plt+0x2620c>
   38b14:	mov	sl, fp
   38b18:	ldr	r0, [sp, #80]	; 0x50
   38b1c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38b20:	ldr	r3, [sl, #100]	; 0x64
   38b24:	ldr	r2, [sp, #132]	; 0x84
   38b28:	ldr	r3, [r3, r2, lsl #2]
   38b2c:	cmp	r3, #0
   38b30:	beq	38c20 <__assert_fail@plt+0x2665c>
   38b34:	ldr	r2, [sp, #44]	; 0x2c
   38b38:	str	r4, [r2]
   38b3c:	ldr	r2, [sp, #48]	; 0x30
   38b40:	str	r2, [sl, #100]	; 0x64
   38b44:	ldr	r2, [sp, #52]	; 0x34
   38b48:	str	r2, [sl, #40]	; 0x28
   38b4c:	adds	r0, r3, #4
   38b50:	moveq	r0, #1
   38b54:	beq	387d0 <__assert_fail@plt+0x2620c>
   38b58:	ldr	r1, [sp, #128]	; 0x80
   38b5c:	bl	31514 <__assert_fail@plt+0x1ef50>
   38b60:	clz	r0, r0
   38b64:	lsr	r0, r0, #5
   38b68:	b	387d0 <__assert_fail@plt+0x2620c>
   38b6c:	mov	r4, fp
   38b70:	b	38b18 <__assert_fail@plt+0x26554>
   38b74:	mov	r4, fp
   38b78:	b	38b18 <__assert_fail@plt+0x26554>
   38b7c:	mov	sl, fp
   38b80:	b	38b18 <__assert_fail@plt+0x26554>
   38b84:	mov	r0, #12
   38b88:	b	387d0 <__assert_fail@plt+0x2620c>
   38b8c:	mov	r0, #12
   38b90:	b	387d0 <__assert_fail@plt+0x2620c>
   38b94:	mov	r0, #12
   38b98:	b	387d0 <__assert_fail@plt+0x2620c>
   38b9c:	ldr	r3, [sl, #100]	; 0x64
   38ba0:	str	r3, [sp, #48]	; 0x30
   38ba4:	ldr	r3, [sl, #40]	; 0x28
   38ba8:	str	r3, [sp, #52]	; 0x34
   38bac:	ldr	r3, [sp, #44]	; 0x2c
   38bb0:	ldr	r3, [r3, #8]
   38bb4:	str	r3, [sl, #100]	; 0x64
   38bb8:	str	r5, [sl, #40]	; 0x28
   38bbc:	str	sl, [sp, #20]
   38bc0:	ldr	r2, [sl, #88]	; 0x58
   38bc4:	sub	r1, r5, #1
   38bc8:	mov	r0, sl
   38bcc:	bl	3537c <__assert_fail@plt+0x22db8>
   38bd0:	mov	r4, r0
   38bd4:	mov	r1, r7
   38bd8:	add	r0, sp, #72	; 0x48
   38bdc:	bl	32480 <__assert_fail@plt+0x1febc>
   38be0:	str	r0, [sp, #84]	; 0x54
   38be4:	cmp	r0, #0
   38be8:	bne	387d0 <__assert_fail@plt+0x2620c>
   38bec:	ldr	r3, [sp, #136]	; 0x88
   38bf0:	ldr	r2, [sp, #40]	; 0x28
   38bf4:	add	r1, sp, #72	; 0x48
   38bf8:	ldr	r0, [sp, #36]	; 0x24
   38bfc:	bl	357a4 <__assert_fail@plt+0x231e0>
   38c00:	str	r0, [sp, #84]	; 0x54
   38c04:	cmp	r0, #0
   38c08:	moveq	fp, r5
   38c0c:	beq	38698 <__assert_fail@plt+0x260d4>
   38c10:	ldr	r0, [sp, #80]	; 0x50
   38c14:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38c18:	ldr	r0, [sp, #84]	; 0x54
   38c1c:	b	387d0 <__assert_fail@plt+0x2620c>
   38c20:	ldr	r3, [sp, #44]	; 0x2c
   38c24:	str	r4, [r3]
   38c28:	ldr	r3, [sp, #48]	; 0x30
   38c2c:	str	r3, [sl, #100]	; 0x64
   38c30:	ldr	r3, [sp, #52]	; 0x34
   38c34:	str	r3, [sl, #40]	; 0x28
   38c38:	mov	r0, #1
   38c3c:	b	387d0 <__assert_fail@plt+0x2620c>
   38c40:	mov	r3, #0
   38c44:	str	r3, [sp, #72]	; 0x48
   38c48:	str	r3, [sp, #76]	; 0x4c
   38c4c:	str	r3, [sp, #80]	; 0x50
   38c50:	b	386f0 <__assert_fail@plt+0x2612c>
   38c54:	cmp	r6, #0
   38c58:	bne	38a74 <__assert_fail@plt+0x264b0>
   38c5c:	ldr	r3, [sp, #12]
   38c60:	add	r4, r3, #1
   38c64:	b	389d0 <__assert_fail@plt+0x2640c>
   38c68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38c6c:	sub	sp, sp, #16
   38c70:	mov	r4, r0
   38c74:	mov	r8, r1
   38c78:	mov	r6, r2
   38c7c:	mov	r9, r3
   38c80:	ldr	r5, [sp, #48]	; 0x30
   38c84:	mov	r1, r2
   38c88:	ldr	r2, [r1], #8
   38c8c:	mov	r3, #8
   38c90:	str	r3, [sp, #8]
   38c94:	str	r5, [sp, #4]
   38c98:	str	r9, [sp]
   38c9c:	ldr	r3, [r6, #4]
   38ca0:	bl	385c4 <__assert_fail@plt+0x26000>
   38ca4:	cmp	r0, #0
   38ca8:	beq	38cb4 <__assert_fail@plt+0x266f0>
   38cac:	add	sp, sp, #16
   38cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38cb4:	ldr	sl, [r8]
   38cb8:	ldr	r7, [r6, #4]
   38cbc:	ldr	r1, [r4, #112]	; 0x70
   38cc0:	ldr	r3, [r4, #108]	; 0x6c
   38cc4:	cmp	r3, r1
   38cc8:	bge	38db4 <__assert_fail@plt+0x267f0>
   38ccc:	ldr	r3, [r4, #108]	; 0x6c
   38cd0:	cmp	r3, #0
   38cd4:	ble	38cfc <__assert_fail@plt+0x26738>
   38cd8:	add	r3, r3, r3, lsl #1
   38cdc:	lsl	r3, r3, #3
   38ce0:	sub	r3, r3, #24
   38ce4:	ldr	r2, [r4, #116]	; 0x74
   38ce8:	add	r3, r2, r3
   38cec:	ldr	r2, [r3, #4]
   38cf0:	cmp	r5, r2
   38cf4:	moveq	r2, #1
   38cf8:	strbeq	r2, [r3, #20]
   38cfc:	ldr	r3, [r4, #108]	; 0x6c
   38d00:	ldr	r2, [r4, #116]	; 0x74
   38d04:	add	r3, r3, r3, lsl #1
   38d08:	str	r9, [r2, r3, lsl #3]
   38d0c:	ldr	r3, [r4, #108]	; 0x6c
   38d10:	ldr	r2, [r4, #116]	; 0x74
   38d14:	add	r3, r3, r3, lsl #1
   38d18:	add	r3, r2, r3, lsl #3
   38d1c:	str	r5, [r3, #4]
   38d20:	ldr	r3, [r4, #108]	; 0x6c
   38d24:	ldr	r2, [r4, #116]	; 0x74
   38d28:	add	r3, r3, r3, lsl #1
   38d2c:	add	r3, r2, r3, lsl #3
   38d30:	str	sl, [r3, #8]
   38d34:	ldr	r3, [r4, #108]	; 0x6c
   38d38:	ldr	r2, [r4, #116]	; 0x74
   38d3c:	add	r3, r3, r3, lsl #1
   38d40:	add	r3, r2, r3, lsl #3
   38d44:	str	r7, [r3, #12]
   38d48:	ldr	r3, [r4, #108]	; 0x6c
   38d4c:	ldr	r2, [r4, #116]	; 0x74
   38d50:	add	r3, r3, r3, lsl #1
   38d54:	add	r3, r2, r3, lsl #3
   38d58:	cmp	sl, r7
   38d5c:	movne	r2, #0
   38d60:	mvneq	r2, #0
   38d64:	str	r2, [r3, #16]
   38d68:	ldr	r2, [r4, #116]	; 0x74
   38d6c:	ldr	r3, [r4, #108]	; 0x6c
   38d70:	add	r1, r3, #1
   38d74:	str	r1, [r4, #108]	; 0x6c
   38d78:	add	r3, r3, r3, lsl #1
   38d7c:	add	r3, r2, r3, lsl #3
   38d80:	mov	r2, #0
   38d84:	strb	r2, [r3, #20]
   38d88:	sub	r7, r7, sl
   38d8c:	ldr	r3, [r4, #120]	; 0x78
   38d90:	cmp	r3, r7
   38d94:	strlt	r7, [r4, #120]	; 0x78
   38d98:	ldr	r1, [r6, #4]
   38d9c:	add	r5, r5, r1
   38da0:	ldr	r1, [r8]
   38da4:	sub	r1, r5, r1
   38da8:	mov	r0, r4
   38dac:	bl	35718 <__assert_fail@plt+0x23154>
   38db0:	b	38cac <__assert_fail@plt+0x266e8>
   38db4:	add	r1, r1, r1, lsl #1
   38db8:	lsl	r1, r1, #4
   38dbc:	ldr	r0, [r4, #116]	; 0x74
   38dc0:	bl	31320 <__assert_fail@plt+0x1ed5c>
   38dc4:	cmp	r0, #0
   38dc8:	beq	38e00 <__assert_fail@plt+0x2683c>
   38dcc:	str	r0, [r4, #116]	; 0x74
   38dd0:	ldr	r2, [r4, #112]	; 0x70
   38dd4:	add	r2, r2, r2, lsl #1
   38dd8:	ldr	r3, [r4, #108]	; 0x6c
   38ddc:	add	r3, r3, r3, lsl #1
   38de0:	lsl	r2, r2, #3
   38de4:	mov	r1, #0
   38de8:	add	r0, r0, r3, lsl #3
   38dec:	bl	12348 <memset@plt>
   38df0:	ldr	r3, [r4, #112]	; 0x70
   38df4:	lsl	r3, r3, #1
   38df8:	str	r3, [r4, #112]	; 0x70
   38dfc:	b	38ccc <__assert_fail@plt+0x26708>
   38e00:	ldr	r0, [r4, #116]	; 0x74
   38e04:	bl	2e3fc <__assert_fail@plt+0x1be38>
   38e08:	mov	r0, #12
   38e0c:	b	38cac <__assert_fail@plt+0x266e8>
   38e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e14:	sub	sp, sp, #84	; 0x54
   38e18:	ldr	r3, [r0, #84]	; 0x54
   38e1c:	str	r3, [sp, #32]
   38e20:	ldr	r3, [r0, #40]	; 0x28
   38e24:	mov	r2, r3
   38e28:	str	r3, [sp, #28]
   38e2c:	ldr	r3, [r1, #4]
   38e30:	cmp	r3, #0
   38e34:	ble	394fc <__assert_fail@plt+0x26f38>
   38e38:	mov	sl, r0
   38e3c:	lsl	r3, r2, #2
   38e40:	str	r3, [sp, #44]	; 0x2c
   38e44:	mov	r3, #0
   38e48:	str	r3, [sp, #20]
   38e4c:	mov	r8, r1
   38e50:	b	39490 <__assert_fail@plt+0x26ecc>
   38e54:	tst	r3, #8
   38e58:	beq	38e64 <__assert_fail@plt+0x268a0>
   38e5c:	tst	r0, #1
   38e60:	bne	39474 <__assert_fail@plt+0x26eb0>
   38e64:	tst	r3, #32
   38e68:	beq	38e74 <__assert_fail@plt+0x268b0>
   38e6c:	tst	r0, #2
   38e70:	beq	39474 <__assert_fail@plt+0x26eb0>
   38e74:	tst	r3, #128	; 0x80
   38e78:	beq	38e84 <__assert_fail@plt+0x268c0>
   38e7c:	tst	r0, #8
   38e80:	beq	39474 <__assert_fail@plt+0x26eb0>
   38e84:	ldr	fp, [sl, #108]	; 0x6c
   38e88:	ldr	r1, [sp, #28]
   38e8c:	mov	r0, sl
   38e90:	bl	31b38 <__assert_fail@plt+0x1f574>
   38e94:	cmn	r0, #1
   38e98:	beq	38ecc <__assert_fail@plt+0x26908>
   38e9c:	add	r0, r0, r0, lsl #1
   38ea0:	lsl	r3, r0, #3
   38ea4:	add	r2, r3, #24
   38ea8:	ldr	r3, [sl, #116]	; 0x74
   38eac:	add	r3, r3, r2
   38eb0:	ldr	r2, [r3, #-24]	; 0xffffffe8
   38eb4:	cmp	r9, r2
   38eb8:	beq	3923c <__assert_fail@plt+0x26c78>
   38ebc:	add	r3, r3, #24
   38ec0:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   38ec4:	cmp	r2, #0
   38ec8:	bne	38eb0 <__assert_fail@plt+0x268ec>
   38ecc:	ldr	r3, [sl, #84]	; 0x54
   38ed0:	str	r3, [sp, #48]	; 0x30
   38ed4:	ldr	r3, [r3]
   38ed8:	ldr	r3, [r3, r9, lsl #3]
   38edc:	str	r3, [sp, #52]	; 0x34
   38ee0:	ldr	r3, [sl, #124]	; 0x7c
   38ee4:	cmp	r3, #0
   38ee8:	ble	3923c <__assert_fail@plt+0x26c78>
   38eec:	ldr	r3, [sl, #4]
   38ef0:	mov	r2, #0
   38ef4:	str	r2, [sp, #40]	; 0x28
   38ef8:	str	r9, [sp, #36]	; 0x24
   38efc:	str	fp, [sp, #56]	; 0x38
   38f00:	str	r8, [sp, #60]	; 0x3c
   38f04:	mov	r8, r3
   38f08:	b	38fe0 <__assert_fail@plt+0x26a1c>
   38f0c:	mov	r2, r5
   38f10:	ldr	r3, [sp, #24]
   38f14:	add	r1, r8, r3
   38f18:	add	r0, r8, r6
   38f1c:	bl	12060 <memcmp@plt>
   38f20:	cmp	r0, #0
   38f24:	bne	38fb8 <__assert_fail@plt+0x269f4>
   38f28:	add	r6, r6, r5
   38f2c:	ldr	r3, [sp, #28]
   38f30:	str	r3, [sp]
   38f34:	ldr	r3, [sp, #36]	; 0x24
   38f38:	mov	r2, r9
   38f3c:	mov	r1, r4
   38f40:	mov	r0, sl
   38f44:	bl	38c68 <__assert_fail@plt+0x266a4>
   38f48:	ldr	r8, [sl, #4]
   38f4c:	cmp	r0, #1
   38f50:	bhi	39248 <__assert_fail@plt+0x26c84>
   38f54:	add	r7, r7, #1
   38f58:	str	fp, [sp, #24]
   38f5c:	ldr	r3, [r4, #16]
   38f60:	cmp	r7, r3
   38f64:	bge	3902c <__assert_fail@plt+0x26a68>
   38f68:	ldr	r3, [r4, #20]
   38f6c:	ldr	r9, [r3, r7, lsl #2]
   38f70:	ldr	fp, [r9, #4]
   38f74:	ldr	r3, [sp, #24]
   38f78:	sub	r5, fp, r3
   38f7c:	cmp	r5, #0
   38f80:	ble	38f28 <__assert_fail@plt+0x26964>
   38f84:	add	r1, r6, r5
   38f88:	ldr	r3, [sl, #28]
   38f8c:	cmp	r1, r3
   38f90:	ble	38f0c <__assert_fail@plt+0x26948>
   38f94:	ldr	r3, [sl, #48]	; 0x30
   38f98:	cmp	r1, r3
   38f9c:	bgt	38fb8 <__assert_fail@plt+0x269f4>
   38fa0:	mov	r0, sl
   38fa4:	bl	35718 <__assert_fail@plt+0x23154>
   38fa8:	cmp	r0, #0
   38fac:	bne	39200 <__assert_fail@plt+0x26c3c>
   38fb0:	ldr	r8, [sl, #4]
   38fb4:	b	38f0c <__assert_fail@plt+0x26948>
   38fb8:	ldr	r3, [r4, #16]
   38fbc:	cmp	r3, r7
   38fc0:	ble	39028 <__assert_fail@plt+0x26a64>
   38fc4:	ldr	r3, [sp, #40]	; 0x28
   38fc8:	add	r3, r3, #1
   38fcc:	mov	r2, r3
   38fd0:	str	r3, [sp, #40]	; 0x28
   38fd4:	ldr	r3, [sl, #124]	; 0x7c
   38fd8:	cmp	r2, r3
   38fdc:	bge	39230 <__assert_fail@plt+0x26c6c>
   38fe0:	ldr	r3, [sl, #132]	; 0x84
   38fe4:	ldr	r2, [sp, #40]	; 0x28
   38fe8:	ldr	r4, [r3, r2, lsl #2]
   38fec:	ldr	r2, [r4, #4]
   38ff0:	ldr	r3, [sp, #48]	; 0x30
   38ff4:	ldr	r3, [r3]
   38ff8:	ldr	r3, [r3, r2, lsl #3]
   38ffc:	ldr	r2, [sp, #52]	; 0x34
   39000:	cmp	r2, r3
   39004:	bne	38fc4 <__assert_fail@plt+0x26a00>
   39008:	ldr	r3, [r4]
   3900c:	str	r3, [sp, #24]
   39010:	ldr	r3, [r4, #16]
   39014:	cmp	r3, #0
   39018:	ble	3904c <__assert_fail@plt+0x26a88>
   3901c:	ldr	r6, [sp, #28]
   39020:	mov	r7, #0
   39024:	b	38f68 <__assert_fail@plt+0x269a4>
   39028:	ldr	fp, [sp, #24]
   3902c:	cmp	r7, #0
   39030:	addgt	fp, fp, #1
   39034:	ldr	r3, [sp, #28]
   39038:	cmp	r3, fp
   3903c:	blt	38fc4 <__assert_fail@plt+0x26a00>
   39040:	lsl	r9, fp, #2
   39044:	ldr	r7, [sp, #52]	; 0x34
   39048:	b	39170 <__assert_fail@plt+0x26bac>
   3904c:	ldr	r6, [sp, #28]
   39050:	ldr	fp, [sp, #24]
   39054:	b	39034 <__assert_fail@plt+0x26a70>
   39058:	ldr	r3, [sl, #48]	; 0x30
   3905c:	cmp	r3, r6
   39060:	ble	38fc4 <__assert_fail@plt+0x26a00>
   39064:	add	r1, r6, #1
   39068:	mov	r0, sl
   3906c:	bl	331a4 <__assert_fail@plt+0x20be0>
   39070:	cmp	r0, #0
   39074:	bne	39200 <__assert_fail@plt+0x26c3c>
   39078:	ldr	r8, [sl, #4]
   3907c:	b	3918c <__assert_fail@plt+0x26bc8>
   39080:	add	r3, r3, #1
   39084:	cmp	ip, r3
   39088:	beq	3915c <__assert_fail@plt+0x26b98>
   3908c:	ldr	r5, [r2, #4]!
   39090:	add	r1, r0, r5, lsl #3
   39094:	ldrb	r1, [r1, #4]
   39098:	cmp	r1, #9
   3909c:	bne	39080 <__assert_fail@plt+0x26abc>
   390a0:	ldr	r1, [r0, r5, lsl #3]
   390a4:	cmp	r7, r1
   390a8:	bne	39080 <__assert_fail@plt+0x26abc>
   390ac:	cmn	r5, #1
   390b0:	beq	3915c <__assert_fail@plt+0x26b98>
   390b4:	ldr	r3, [r4, #8]
   390b8:	cmp	r3, #0
   390bc:	beq	391dc <__assert_fail@plt+0x26c18>
   390c0:	ldr	r3, [r4]
   390c4:	ldr	r2, [r4, #4]
   390c8:	ldr	r1, [r4, #8]
   390cc:	mov	r0, #9
   390d0:	str	r0, [sp, #8]
   390d4:	str	fp, [sp, #4]
   390d8:	str	r5, [sp]
   390dc:	mov	r0, sl
   390e0:	bl	385c4 <__assert_fail@plt+0x26000>
   390e4:	cmp	r0, #1
   390e8:	beq	3915c <__assert_fail@plt+0x26b98>
   390ec:	cmp	r0, #0
   390f0:	bne	39200 <__assert_fail@plt+0x26c3c>
   390f4:	ldr	r3, [r4, #16]
   390f8:	ldr	r2, [r4, #12]
   390fc:	cmp	r3, r2
   39100:	beq	39208 <__assert_fail@plt+0x26c44>
   39104:	mov	r1, #20
   39108:	mov	r0, #1
   3910c:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   39110:	subs	r2, r0, #0
   39114:	beq	39508 <__assert_fail@plt+0x26f44>
   39118:	ldr	r1, [r4, #16]
   3911c:	ldr	r3, [r4, #20]
   39120:	str	r2, [r3, r1, lsl #2]
   39124:	str	r5, [r2]
   39128:	str	fp, [r2, #4]
   3912c:	ldr	r3, [r4, #16]
   39130:	add	r3, r3, #1
   39134:	str	r3, [r4, #16]
   39138:	ldr	r3, [sp, #28]
   3913c:	str	r3, [sp]
   39140:	ldr	r3, [sp, #36]	; 0x24
   39144:	mov	r1, r4
   39148:	mov	r0, sl
   3914c:	bl	38c68 <__assert_fail@plt+0x266a4>
   39150:	ldr	r8, [sl, #4]
   39154:	cmp	r0, #1
   39158:	bhi	39298 <__assert_fail@plt+0x26cd4>
   3915c:	add	fp, fp, #1
   39160:	add	r9, r9, #4
   39164:	ldr	r3, [sp, #28]
   39168:	cmp	r3, fp
   3916c:	blt	38fc4 <__assert_fail@plt+0x26a00>
   39170:	ldr	r3, [r4]
   39174:	sub	r3, fp, r3
   39178:	cmp	r3, #0
   3917c:	ble	391a8 <__assert_fail@plt+0x26be4>
   39180:	ldr	r3, [sl, #28]
   39184:	cmp	r3, r6
   39188:	ble	39058 <__assert_fail@plt+0x26a94>
   3918c:	add	r2, r6, #1
   39190:	add	r3, r8, fp
   39194:	ldrb	r1, [r8, r6]
   39198:	ldrb	r3, [r3, #-1]
   3919c:	cmp	r1, r3
   391a0:	bne	38fc4 <__assert_fail@plt+0x26a00>
   391a4:	mov	r6, r2
   391a8:	ldr	r3, [sl, #100]	; 0x64
   391ac:	ldr	r3, [r3, r9]
   391b0:	cmp	r3, #0
   391b4:	beq	3915c <__assert_fail@plt+0x26b98>
   391b8:	ldr	ip, [r3, #8]
   391bc:	cmp	ip, #0
   391c0:	ble	3915c <__assert_fail@plt+0x26b98>
   391c4:	ldr	r2, [sp, #48]	; 0x30
   391c8:	ldr	r0, [r2]
   391cc:	ldr	r2, [r3, #12]
   391d0:	sub	r2, r2, #4
   391d4:	mov	r3, #0
   391d8:	b	3908c <__assert_fail@plt+0x26ac8>
   391dc:	ldr	r1, [r4]
   391e0:	sub	r1, fp, r1
   391e4:	add	r1, r1, #1
   391e8:	mov	r0, #12
   391ec:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   391f0:	str	r0, [r4, #8]
   391f4:	cmp	r0, #0
   391f8:	bne	390c0 <__assert_fail@plt+0x26afc>
   391fc:	mov	r0, #12
   39200:	str	r0, [sp, #76]	; 0x4c
   39204:	b	392e8 <__assert_fail@plt+0x26d24>
   39208:	lsl	r3, r3, #1
   3920c:	add	r8, r3, #1
   39210:	lsl	r1, r8, #2
   39214:	ldr	r0, [r4, #20]
   39218:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3921c:	cmp	r0, #0
   39220:	beq	39508 <__assert_fail@plt+0x26f44>
   39224:	str	r0, [r4, #20]
   39228:	str	r8, [r4, #12]
   3922c:	b	39104 <__assert_fail@plt+0x26b40>
   39230:	ldr	r9, [sp, #36]	; 0x24
   39234:	ldr	fp, [sp, #56]	; 0x38
   39238:	ldr	r8, [sp, #60]	; 0x3c
   3923c:	mov	r3, #0
   39240:	str	r3, [sp, #76]	; 0x4c
   39244:	b	39260 <__assert_fail@plt+0x26c9c>
   39248:	ldr	r9, [sp, #36]	; 0x24
   3924c:	ldr	fp, [sp, #56]	; 0x38
   39250:	ldr	r8, [sp, #60]	; 0x3c
   39254:	str	r0, [sp, #76]	; 0x4c
   39258:	cmp	r0, #0
   3925c:	bne	392e8 <__assert_fail@plt+0x26d24>
   39260:	lsl	r3, r9, #2
   39264:	str	r3, [sp, #52]	; 0x34
   39268:	ldr	r3, [sl, #108]	; 0x6c
   3926c:	cmp	fp, r3
   39270:	bge	39474 <__assert_fail@plt+0x26eb0>
   39274:	add	r3, r9, r9, lsl #1
   39278:	lsl	r3, r3, #2
   3927c:	str	r3, [sp, #56]	; 0x38
   39280:	add	r4, fp, fp, lsl #1
   39284:	lsl	r4, r4, #3
   39288:	ldr	r6, [sp, #28]
   3928c:	str	r8, [sp, #60]	; 0x3c
   39290:	ldr	r8, [sp, #32]
   39294:	b	39318 <__assert_fail@plt+0x26d54>
   39298:	ldr	r9, [sp, #36]	; 0x24
   3929c:	ldr	fp, [sp, #56]	; 0x38
   392a0:	ldr	r8, [sp, #60]	; 0x3c
   392a4:	b	39254 <__assert_fail@plt+0x26c90>
   392a8:	ldr	r3, [sp, #40]	; 0x28
   392ac:	ldr	r2, [sp, #24]
   392b0:	mov	r1, r8
   392b4:	add	r0, sp, #76	; 0x4c
   392b8:	bl	34108 <__assert_fail@plt+0x21b44>
   392bc:	str	r0, [r7, r5, lsl #2]
   392c0:	ldr	r3, [sl, #100]	; 0x64
   392c4:	ldr	r3, [r3, r5, lsl #2]
   392c8:	cmp	r3, #0
   392cc:	bne	3940c <__assert_fail@plt+0x26e48>
   392d0:	ldr	r3, [sp, #76]	; 0x4c
   392d4:	cmp	r3, #0
   392d8:	beq	3940c <__assert_fail@plt+0x26e48>
   392dc:	b	392e8 <__assert_fail@plt+0x26d24>
   392e0:	ldr	r0, [sp, #72]	; 0x48
   392e4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   392e8:	ldr	r0, [sp, #76]	; 0x4c
   392ec:	add	sp, sp, #84	; 0x54
   392f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   392f4:	ldr	r3, [sp, #76]	; 0x4c
   392f8:	cmp	r3, #0
   392fc:	beq	3940c <__assert_fail@plt+0x26e48>
   39300:	b	392e8 <__assert_fail@plt+0x26d24>
   39304:	add	fp, fp, #1
   39308:	add	r4, r4, #24
   3930c:	ldr	r3, [sl, #108]	; 0x6c
   39310:	cmp	r3, fp
   39314:	ble	39470 <__assert_fail@plt+0x26eac>
   39318:	ldr	r3, [sl, #116]	; 0x74
   3931c:	add	r2, r3, r4
   39320:	ldr	r3, [r3, r4]
   39324:	cmp	r9, r3
   39328:	bne	39304 <__assert_fail@plt+0x26d40>
   3932c:	ldr	r3, [r2, #4]
   39330:	cmp	r6, r3
   39334:	bne	39304 <__assert_fail@plt+0x26d40>
   39338:	ldr	r3, [r2, #12]
   3933c:	ldr	r5, [r2, #8]
   39340:	subs	r2, r3, r5
   39344:	str	r2, [sp, #36]	; 0x24
   39348:	ldreq	r2, [r8, #20]
   3934c:	ldreq	r1, [sp, #56]	; 0x38
   39350:	addeq	r2, r2, r1
   39354:	ldreq	r2, [r2, #8]
   39358:	ldreq	r2, [r2]
   3935c:	ldrne	r2, [r8, #12]
   39360:	ldrne	r1, [sp, #52]	; 0x34
   39364:	ldrne	r2, [r2, r1]
   39368:	add	r2, r2, r2, lsl #1
   3936c:	ldr	r1, [r8, #24]
   39370:	add	r2, r1, r2, lsl #2
   39374:	str	r2, [sp, #24]
   39378:	add	r3, r6, r3
   3937c:	sub	r5, r3, r5
   39380:	ldr	r2, [sl, #88]	; 0x58
   39384:	sub	r1, r5, #1
   39388:	mov	r0, sl
   3938c:	bl	3537c <__assert_fail@plt+0x22db8>
   39390:	str	r0, [sp, #40]	; 0x28
   39394:	ldr	r7, [sl, #100]	; 0x64
   39398:	ldr	r3, [r7, r5, lsl #2]
   3939c:	ldr	r2, [sp, #44]	; 0x2c
   393a0:	ldr	r2, [r7, r2]
   393a4:	cmp	r2, #0
   393a8:	ldrne	r2, [r2, #8]
   393ac:	moveq	r2, #0
   393b0:	str	r2, [sp, #48]	; 0x30
   393b4:	cmp	r3, #0
   393b8:	beq	392a8 <__assert_fail@plt+0x26ce4>
   393bc:	ldr	r2, [sp, #24]
   393c0:	ldr	r1, [r3, #40]	; 0x28
   393c4:	add	r0, sp, #64	; 0x40
   393c8:	bl	32dcc <__assert_fail@plt+0x20808>
   393cc:	str	r0, [sp, #76]	; 0x4c
   393d0:	cmp	r0, #0
   393d4:	bne	392e0 <__assert_fail@plt+0x26d1c>
   393d8:	ldr	r7, [sl, #100]	; 0x64
   393dc:	ldr	r3, [sp, #40]	; 0x28
   393e0:	add	r2, sp, #64	; 0x40
   393e4:	mov	r1, r8
   393e8:	add	r0, sp, #76	; 0x4c
   393ec:	bl	34108 <__assert_fail@plt+0x21b44>
   393f0:	str	r0, [r7, r5, lsl #2]
   393f4:	ldr	r0, [sp, #72]	; 0x48
   393f8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   393fc:	ldr	r3, [sl, #100]	; 0x64
   39400:	ldr	r3, [r3, r5, lsl #2]
   39404:	cmp	r3, #0
   39408:	beq	392f4 <__assert_fail@plt+0x26d30>
   3940c:	ldr	r3, [sp, #36]	; 0x24
   39410:	cmp	r3, #0
   39414:	bne	39304 <__assert_fail@plt+0x26d40>
   39418:	ldr	r3, [sl, #100]	; 0x64
   3941c:	ldr	r2, [sp, #44]	; 0x2c
   39420:	ldr	r3, [r3, r2]
   39424:	ldr	r3, [r3, #8]
   39428:	ldr	r2, [sp, #48]	; 0x30
   3942c:	cmp	r2, r3
   39430:	bge	39304 <__assert_fail@plt+0x26d40>
   39434:	mov	r2, r6
   39438:	ldr	r5, [sp, #24]
   3943c:	mov	r1, r5
   39440:	mov	r0, sl
   39444:	bl	35610 <__assert_fail@plt+0x2304c>
   39448:	str	r0, [sp, #76]	; 0x4c
   3944c:	cmp	r0, #0
   39450:	bne	392e8 <__assert_fail@plt+0x26d24>
   39454:	mov	r1, r5
   39458:	mov	r0, sl
   3945c:	bl	38e10 <__assert_fail@plt+0x2684c>
   39460:	str	r0, [sp, #76]	; 0x4c
   39464:	cmp	r0, #0
   39468:	beq	39304 <__assert_fail@plt+0x26d40>
   3946c:	b	392e8 <__assert_fail@plt+0x26d24>
   39470:	ldr	r8, [sp, #60]	; 0x3c
   39474:	ldr	r3, [sp, #20]
   39478:	add	r3, r3, #1
   3947c:	mov	r2, r3
   39480:	str	r3, [sp, #20]
   39484:	ldr	r3, [r8, #4]
   39488:	cmp	r3, r2
   3948c:	ble	394fc <__assert_fail@plt+0x26f38>
   39490:	ldr	r3, [r8, #8]
   39494:	ldr	r2, [sp, #20]
   39498:	ldr	r9, [r3, r2, lsl #2]
   3949c:	ldr	r3, [sp, #32]
   394a0:	ldr	r4, [r3]
   394a4:	add	r4, r4, r9, lsl #3
   394a8:	ldrb	r3, [r4, #4]
   394ac:	cmp	r3, #4
   394b0:	bne	39474 <__assert_fail@plt+0x26eb0>
   394b4:	ldr	r3, [r4, #4]
   394b8:	ldr	r2, [pc, #84]	; 39514 <__assert_fail@plt+0x26f50>
   394bc:	tst	r3, r2
   394c0:	beq	38e84 <__assert_fail@plt+0x268c0>
   394c4:	ldr	r2, [sl, #88]	; 0x58
   394c8:	ldr	r1, [sp, #28]
   394cc:	mov	r0, sl
   394d0:	bl	3537c <__assert_fail@plt+0x22db8>
   394d4:	ldr	r3, [r4, #4]
   394d8:	lsl	r3, r3, #14
   394dc:	lsr	r3, r3, #22
   394e0:	tst	r3, #4
   394e4:	beq	38e54 <__assert_fail@plt+0x26890>
   394e8:	tst	r0, #1
   394ec:	beq	39474 <__assert_fail@plt+0x26eb0>
   394f0:	tst	r3, #8
   394f4:	bne	39474 <__assert_fail@plt+0x26eb0>
   394f8:	b	38e64 <__assert_fail@plt+0x268a0>
   394fc:	mov	r3, #0
   39500:	str	r3, [sp, #76]	; 0x4c
   39504:	b	392e8 <__assert_fail@plt+0x26d24>
   39508:	mov	r3, #12
   3950c:	str	r3, [sp, #76]	; 0x4c
   39510:	b	392e8 <__assert_fail@plt+0x26d24>
   39514:	andeq	pc, r3, r0, lsl #30
   39518:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3951c:	sub	sp, sp, #16
   39520:	mov	r8, r0
   39524:	mov	r4, r1
   39528:	mov	r5, r2
   3952c:	ldr	r7, [r1, #84]	; 0x54
   39530:	ldr	r6, [r1, #40]	; 0x28
   39534:	ldr	r3, [r1, #104]	; 0x68
   39538:	cmp	r6, r3
   3953c:	ble	39598 <__assert_fail@plt+0x26fd4>
   39540:	ldr	r3, [r1, #100]	; 0x64
   39544:	str	r2, [r3, r6, lsl #2]
   39548:	str	r6, [r1, #104]	; 0x68
   3954c:	ldr	r3, [r7, #76]	; 0x4c
   39550:	cmp	r3, #0
   39554:	cmpne	r5, #0
   39558:	moveq	r0, r5
   3955c:	beq	39590 <__assert_fail@plt+0x26fcc>
   39560:	add	r7, r5, #4
   39564:	mov	r2, r6
   39568:	mov	r1, r7
   3956c:	mov	r0, r4
   39570:	bl	35610 <__assert_fail@plt+0x2304c>
   39574:	str	r0, [r8]
   39578:	cmp	r0, #0
   3957c:	bne	39680 <__assert_fail@plt+0x270bc>
   39580:	ldrb	r3, [r5, #52]	; 0x34
   39584:	tst	r3, #64	; 0x40
   39588:	moveq	r0, r5
   3958c:	bne	3965c <__assert_fail@plt+0x27098>
   39590:	add	sp, sp, #16
   39594:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39598:	ldr	r9, [r1, #100]	; 0x64
   3959c:	ldr	r3, [r9, r6, lsl #2]
   395a0:	cmp	r3, #0
   395a4:	streq	r2, [r9, r6, lsl #2]
   395a8:	beq	3954c <__assert_fail@plt+0x26f88>
   395ac:	ldr	r2, [r3, #40]	; 0x28
   395b0:	cmp	r5, #0
   395b4:	beq	39620 <__assert_fail@plt+0x2705c>
   395b8:	ldr	r9, [r5, #40]	; 0x28
   395bc:	mov	r1, r9
   395c0:	add	r0, sp, #4
   395c4:	bl	32dcc <__assert_fail@plt+0x20808>
   395c8:	str	r0, [r8]
   395cc:	cmp	r0, #0
   395d0:	movne	r0, #0
   395d4:	bne	39590 <__assert_fail@plt+0x26fcc>
   395d8:	ldr	r1, [r4, #40]	; 0x28
   395dc:	ldr	r2, [r4, #88]	; 0x58
   395e0:	sub	r1, r1, #1
   395e4:	mov	r0, r4
   395e8:	bl	3537c <__assert_fail@plt+0x22db8>
   395ec:	ldr	sl, [r4, #100]	; 0x64
   395f0:	mov	r3, r0
   395f4:	add	r2, sp, #4
   395f8:	mov	r1, r7
   395fc:	mov	r0, r8
   39600:	bl	34108 <__assert_fail@plt+0x21b44>
   39604:	mov	r5, r0
   39608:	str	r0, [sl, r6, lsl #2]
   3960c:	cmp	r9, #0
   39610:	beq	3954c <__assert_fail@plt+0x26f88>
   39614:	ldr	r0, [sp, #12]
   39618:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3961c:	b	3954c <__assert_fail@plt+0x26f88>
   39620:	add	r5, sp, #4
   39624:	ldm	r2, {r0, r1, r2}
   39628:	stm	r5, {r0, r1, r2}
   3962c:	ldr	r2, [r4, #88]	; 0x58
   39630:	sub	r1, r6, #1
   39634:	mov	r0, r4
   39638:	bl	3537c <__assert_fail@plt+0x22db8>
   3963c:	mov	r3, r0
   39640:	mov	r2, r5
   39644:	mov	r1, r7
   39648:	mov	r0, r8
   3964c:	bl	34108 <__assert_fail@plt+0x21b44>
   39650:	mov	r5, r0
   39654:	str	r0, [r9, r6, lsl #2]
   39658:	b	3954c <__assert_fail@plt+0x26f88>
   3965c:	mov	r1, r7
   39660:	mov	r0, r4
   39664:	bl	38e10 <__assert_fail@plt+0x2684c>
   39668:	str	r0, [r8]
   3966c:	cmp	r0, #0
   39670:	bne	39688 <__assert_fail@plt+0x270c4>
   39674:	ldr	r3, [r4, #100]	; 0x64
   39678:	ldr	r0, [r3, r6, lsl #2]
   3967c:	b	39590 <__assert_fail@plt+0x26fcc>
   39680:	mov	r0, #0
   39684:	b	39590 <__assert_fail@plt+0x26fcc>
   39688:	mov	r0, #0
   3968c:	b	39590 <__assert_fail@plt+0x26fcc>
   39690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39694:	sub	sp, sp, #92	; 0x5c
   39698:	str	r0, [sp, #28]
   3969c:	mov	sl, r1
   396a0:	mov	fp, r2
   396a4:	mov	r5, r3
   396a8:	ldr	r6, [r0, #84]	; 0x54
   396ac:	mov	r3, #0
   396b0:	str	r3, [sp, #84]	; 0x54
   396b4:	lsl	r3, r2, #2
   396b8:	str	r3, [sp, #32]
   396bc:	ldr	r3, [r0, #100]	; 0x64
   396c0:	ldr	r3, [r3, r2, lsl #2]
   396c4:	cmp	r3, #0
   396c8:	addne	r3, r3, #4
   396cc:	moveq	r3, #0
   396d0:	str	r3, [sp, #12]
   396d4:	ldr	r3, [r5, #4]
   396d8:	cmp	r3, #0
   396dc:	bne	39724 <__assert_fail@plt+0x27160>
   396e0:	ldr	r3, [r1]
   396e4:	mov	r2, #0
   396e8:	str	r2, [r3, fp, lsl #2]
   396ec:	ldr	r3, [sp, #12]
   396f0:	cmp	r3, #0
   396f4:	moveq	r4, #0
   396f8:	beq	39718 <__assert_fail@plt+0x27154>
   396fc:	ldr	r3, [sp, #28]
   39700:	ldr	r3, [r3, #100]	; 0x64
   39704:	ldr	r3, [r3, fp, lsl #2]
   39708:	ldrb	r3, [r3, #52]	; 0x34
   3970c:	tst	r3, #64	; 0x40
   39710:	moveq	r4, #0
   39714:	bne	399cc <__assert_fail@plt+0x27408>
   39718:	mov	r0, r4
   3971c:	add	sp, sp, #92	; 0x5c
   39720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39724:	ldr	r3, [sp, #12]
   39728:	cmp	r3, #0
   3972c:	beq	399a4 <__assert_fail@plt+0x273e0>
   39730:	add	r0, sp, #88	; 0x58
   39734:	mov	r3, #0
   39738:	str	r3, [r0, #-32]!	; 0xffffffe0
   3973c:	mov	r2, r5
   39740:	mov	r1, r6
   39744:	bl	38104 <__assert_fail@plt+0x25b40>
   39748:	mov	r7, r0
   3974c:	ldr	r4, [sp, #56]	; 0x38
   39750:	cmp	r4, #0
   39754:	bne	39718 <__assert_fail@plt+0x27154>
   39758:	ldr	r3, [r0, #28]
   3975c:	cmp	r3, #0
   39760:	bne	397c4 <__assert_fail@plt+0x27200>
   39764:	add	r8, r0, #28
   39768:	ldr	r1, [r5, #4]
   3976c:	mov	r0, r8
   39770:	bl	324c4 <__assert_fail@plt+0x1ff00>
   39774:	str	r0, [sp, #56]	; 0x38
   39778:	cmp	r0, #0
   3977c:	bne	39c8c <__assert_fail@plt+0x276c8>
   39780:	ldr	r3, [r5, #4]
   39784:	cmp	r3, #0
   39788:	ble	397c4 <__assert_fail@plt+0x27200>
   3978c:	ldr	r3, [r5, #8]
   39790:	ldr	r1, [r3, r4, lsl #2]
   39794:	add	r1, r1, r1, lsl #1
   39798:	ldr	r3, [r6, #28]
   3979c:	add	r1, r3, r1, lsl #2
   397a0:	mov	r0, r8
   397a4:	bl	34fa8 <__assert_fail@plt+0x229e4>
   397a8:	str	r0, [sp, #56]	; 0x38
   397ac:	cmp	r0, #0
   397b0:	bne	39c94 <__assert_fail@plt+0x276d0>
   397b4:	add	r4, r4, #1
   397b8:	ldr	r3, [r5, #4]
   397bc:	cmp	r4, r3
   397c0:	blt	3978c <__assert_fail@plt+0x271c8>
   397c4:	add	r2, r7, #28
   397c8:	ldr	r1, [sp, #12]
   397cc:	mov	r0, r5
   397d0:	bl	32f58 <__assert_fail@plt+0x20994>
   397d4:	mov	r4, r0
   397d8:	str	r0, [sp, #84]	; 0x54
   397dc:	cmp	r0, #0
   397e0:	bne	39718 <__assert_fail@plt+0x27154>
   397e4:	ldr	r3, [sl, #20]
   397e8:	cmp	r3, #0
   397ec:	bne	39818 <__assert_fail@plt+0x27254>
   397f0:	ldr	r4, [sl]
   397f4:	mov	r2, r5
   397f8:	mov	r1, r6
   397fc:	add	r0, sp, #84	; 0x54
   39800:	bl	38104 <__assert_fail@plt+0x25b40>
   39804:	str	r0, [r4, fp, lsl #2]
   39808:	ldr	r4, [sp, #84]	; 0x54
   3980c:	cmp	r4, #0
   39810:	beq	396fc <__assert_fail@plt+0x27138>
   39814:	b	39718 <__assert_fail@plt+0x27154>
   39818:	ldr	r3, [sp, #28]
   3981c:	ldr	r3, [r3, #116]	; 0x74
   39820:	str	r3, [sp, #20]
   39824:	ble	39c9c <__assert_fail@plt+0x276d8>
   39828:	mov	r7, #0
   3982c:	b	39ce8 <__assert_fail@plt+0x27724>
   39830:	ldr	lr, [r5, #4]
   39834:	cmp	lr, #0
   39838:	ble	39cd8 <__assert_fail@plt+0x27714>
   3983c:	ldr	r3, [r5, #8]
   39840:	add	lr, r3, lr, lsl #2
   39844:	mvn	r2, #0
   39848:	mov	r4, r2
   3984c:	mov	r1, r2
   39850:	b	39868 <__assert_fail@plt+0x272a4>
   39854:	ldr	ip, [r0, r2, lsl #3]
   39858:	cmp	r8, ip
   3985c:	moveq	r1, r2
   39860:	cmp	lr, r3
   39864:	beq	39894 <__assert_fail@plt+0x272d0>
   39868:	ldr	r2, [r3], #4
   3986c:	add	ip, r0, r2, lsl #3
   39870:	ldrb	ip, [ip, #4]
   39874:	cmp	ip, #8
   39878:	beq	39854 <__assert_fail@plt+0x27290>
   3987c:	cmp	ip, #9
   39880:	bne	39860 <__assert_fail@plt+0x2729c>
   39884:	ldr	ip, [r0, r2, lsl #3]
   39888:	cmp	r8, ip
   3988c:	moveq	r4, r2
   39890:	b	39860 <__assert_fail@plt+0x2729c>
   39894:	str	r4, [sp, #16]
   39898:	cmp	r1, #0
   3989c:	blt	39ccc <__assert_fail@plt+0x27708>
   398a0:	ldr	r3, [sp, #12]
   398a4:	mov	r2, r5
   398a8:	mov	r0, r6
   398ac:	bl	345e4 <__assert_fail@plt+0x22020>
   398b0:	cmp	r0, #0
   398b4:	bne	39d40 <__assert_fail@plt+0x2777c>
   398b8:	cmp	r4, #0
   398bc:	blt	39cd8 <__assert_fail@plt+0x27714>
   398c0:	ldr	r3, [r5, #4]
   398c4:	cmp	r3, #0
   398c8:	ble	39cd8 <__assert_fail@plt+0x27714>
   398cc:	mov	r8, #0
   398d0:	b	398e4 <__assert_fail@plt+0x27320>
   398d4:	add	r8, r8, #1
   398d8:	ldr	r3, [r5, #4]
   398dc:	cmp	r8, r3
   398e0:	bge	39cd8 <__assert_fail@plt+0x27714>
   398e4:	ldr	r3, [r5, #8]
   398e8:	ldr	r9, [r3, r8, lsl #2]
   398ec:	add	r4, r9, r9, lsl #1
   398f0:	lsl	r4, r4, #2
   398f4:	ldr	r0, [r6, #28]
   398f8:	ldr	r1, [sp, #16]
   398fc:	add	r0, r0, r4
   39900:	bl	31514 <__assert_fail@plt+0x1ef50>
   39904:	cmp	r0, #0
   39908:	bne	398d4 <__assert_fail@plt+0x27310>
   3990c:	ldr	r0, [r6, #24]
   39910:	ldr	r1, [sp, #16]
   39914:	add	r0, r0, r4
   39918:	bl	31514 <__assert_fail@plt+0x1ef50>
   3991c:	cmp	r0, #0
   39920:	bne	398d4 <__assert_fail@plt+0x27310>
   39924:	ldr	r3, [sp, #12]
   39928:	mov	r2, r5
   3992c:	mov	r1, r9
   39930:	mov	r0, r6
   39934:	bl	345e4 <__assert_fail@plt+0x22020>
   39938:	cmp	r0, #0
   3993c:	bne	39d48 <__assert_fail@plt+0x27784>
   39940:	sub	r8, r8, #1
   39944:	b	398d4 <__assert_fail@plt+0x27310>
   39948:	add	r9, r9, #1
   3994c:	ldr	r3, [r5, #4]
   39950:	cmp	r9, r3
   39954:	bge	39cd8 <__assert_fail@plt+0x27714>
   39958:	ldr	r3, [r5, #8]
   3995c:	ldr	r1, [r3, r9, lsl #2]
   39960:	ldr	r2, [r6]
   39964:	add	r3, r2, r1, lsl #3
   39968:	ldrb	r3, [r3, #4]
   3996c:	sub	r3, r3, #8
   39970:	cmp	r3, #1
   39974:	bhi	39948 <__assert_fail@plt+0x27384>
   39978:	ldr	r3, [r2, r1, lsl #3]
   3997c:	cmp	r8, r3
   39980:	bne	39948 <__assert_fail@plt+0x27384>
   39984:	ldr	r3, [sp, #12]
   39988:	mov	r2, r5
   3998c:	mov	r0, r6
   39990:	bl	345e4 <__assert_fail@plt+0x22020>
   39994:	cmp	r0, #0
   39998:	beq	39948 <__assert_fail@plt+0x27384>
   3999c:	mov	r4, r0
   399a0:	b	39718 <__assert_fail@plt+0x27154>
   399a4:	ldr	r4, [r1]
   399a8:	mov	r2, r5
   399ac:	mov	r1, r6
   399b0:	add	r0, sp, #84	; 0x54
   399b4:	bl	38104 <__assert_fail@plt+0x25b40>
   399b8:	str	r0, [r4, fp, lsl #2]
   399bc:	ldr	r4, [sp, #84]	; 0x54
   399c0:	cmp	r4, #0
   399c4:	beq	396ec <__assert_fail@plt+0x27128>
   399c8:	b	39718 <__assert_fail@plt+0x27154>
   399cc:	mov	r1, fp
   399d0:	ldr	r4, [sp, #28]
   399d4:	mov	r0, r4
   399d8:	bl	31b38 <__assert_fail@plt+0x1f574>
   399dc:	str	r0, [sp, #44]	; 0x2c
   399e0:	cmn	r0, #1
   399e4:	moveq	r4, #0
   399e8:	beq	39718 <__assert_fail@plt+0x27154>
   399ec:	ldr	r9, [r4, #84]	; 0x54
   399f0:	mov	r3, #0
   399f4:	str	r3, [sp, #56]	; 0x38
   399f8:	ldr	r1, [sp, #12]
   399fc:	ldr	r3, [r1, #4]
   39a00:	cmp	r3, #0
   39a04:	ble	39c84 <__assert_fail@plt+0x276c0>
   39a08:	add	r3, r0, r0, lsl #1
   39a0c:	lsl	r3, r3, #3
   39a10:	str	r3, [sp, #48]	; 0x30
   39a14:	mov	r3, #0
   39a18:	str	r3, [sp, #16]
   39a1c:	add	r3, sl, #16
   39a20:	str	r3, [sp, #40]	; 0x28
   39a24:	add	r3, fp, #1
   39a28:	str	r3, [sp, #52]	; 0x34
   39a2c:	str	fp, [sp, #12]
   39a30:	mov	fp, r1
   39a34:	b	39bfc <__assert_fail@plt+0x27638>
   39a38:	ldr	r3, [sl, #12]
   39a3c:	ldr	r1, [sp, #12]
   39a40:	cmp	r1, r3
   39a44:	bne	39c20 <__assert_fail@plt+0x2765c>
   39a48:	b	39be0 <__assert_fail@plt+0x2761c>
   39a4c:	add	ip, sp, #56	; 0x38
   39a50:	mov	lr, sl
   39a54:	ldm	lr!, {r0, r1, r2, r3}
   39a58:	stmia	ip!, {r0, r1, r2, r3}
   39a5c:	ldm	lr, {r0, r1, r2}
   39a60:	stm	ip, {r0, r1, r2}
   39a64:	ldr	r1, [sp, #40]	; 0x28
   39a68:	add	r0, sp, #72	; 0x48
   39a6c:	bl	32d50 <__assert_fail@plt+0x2078c>
   39a70:	cmp	r0, #0
   39a74:	beq	39b70 <__assert_fail@plt+0x275ac>
   39a78:	mov	r4, r0
   39a7c:	b	39c5c <__assert_fail@plt+0x27698>
   39a80:	ldr	r3, [sp, #56]	; 0x38
   39a84:	ldr	r2, [sp, #32]
   39a88:	str	r4, [r3, r2]
   39a8c:	mov	r1, r5
   39a90:	add	r0, sp, #72	; 0x48
   39a94:	bl	31514 <__assert_fail@plt+0x1ef50>
   39a98:	sub	r1, r0, #1
   39a9c:	add	r0, sp, #72	; 0x48
   39aa0:	bl	315ac <__assert_fail@plt+0x1efe8>
   39aa4:	ldr	r3, [sp, #28]
   39aa8:	ldr	r4, [r3, #116]	; 0x74
   39aac:	add	r4, r4, r6
   39ab0:	add	r5, r5, #1
   39ab4:	add	r2, r4, #24
   39ab8:	add	r6, r6, #24
   39abc:	ldrb	r3, [r4, #20]
   39ac0:	cmp	r3, #0
   39ac4:	beq	39bdc <__assert_fail@plt+0x27618>
   39ac8:	mov	r4, r2
   39acc:	ldr	r3, [r4]
   39ad0:	cmp	r7, r3
   39ad4:	bne	39ab0 <__assert_fail@plt+0x274ec>
   39ad8:	ldr	r3, [r4, #12]
   39adc:	ldr	r2, [r4, #8]
   39ae0:	sub	r3, r3, r2
   39ae4:	ldr	r2, [sp, #12]
   39ae8:	add	r8, r2, r3
   39aec:	cmp	r3, #0
   39af0:	ldrne	r3, [r9, #12]
   39af4:	ldrne	r2, [sp, #20]
   39af8:	ldrne	fp, [r3, r2]
   39afc:	ldreq	r3, [r9, #20]
   39b00:	ldreq	r2, [sp, #24]
   39b04:	addeq	r3, r3, r2
   39b08:	ldreq	r3, [r3, #8]
   39b0c:	ldreq	fp, [r3]
   39b10:	ldr	r3, [sl, #12]
   39b14:	cmp	r8, r3
   39b18:	bgt	39ab0 <__assert_fail@plt+0x274ec>
   39b1c:	ldr	r3, [sl]
   39b20:	ldr	r0, [r3, r8, lsl #2]
   39b24:	cmp	r0, #0
   39b28:	beq	39ab0 <__assert_fail@plt+0x274ec>
   39b2c:	mov	r1, fp
   39b30:	add	r0, r0, #4
   39b34:	bl	31514 <__assert_fail@plt+0x1ef50>
   39b38:	cmp	r0, #0
   39b3c:	beq	39ab0 <__assert_fail@plt+0x274ec>
   39b40:	str	r8, [sp, #4]
   39b44:	str	fp, [sp]
   39b48:	ldr	r3, [sp, #12]
   39b4c:	mov	r2, r7
   39b50:	ldr	r1, [sp, #40]	; 0x28
   39b54:	ldr	r0, [sp, #28]
   39b58:	bl	31be8 <__assert_fail@plt+0x1f624>
   39b5c:	cmp	r0, #0
   39b60:	bne	39ab0 <__assert_fail@plt+0x274ec>
   39b64:	ldr	r3, [sp, #56]	; 0x38
   39b68:	cmp	r3, #0
   39b6c:	beq	39a4c <__assert_fail@plt+0x27488>
   39b70:	str	r7, [sp, #64]	; 0x40
   39b74:	ldr	r3, [sp, #12]
   39b78:	str	r3, [sp, #68]	; 0x44
   39b7c:	mov	r1, r5
   39b80:	add	r0, sp, #72	; 0x48
   39b84:	bl	34a64 <__assert_fail@plt+0x224a0>
   39b88:	cmp	r0, #0
   39b8c:	beq	39c74 <__assert_fail@plt+0x276b0>
   39b90:	ldr	r3, [sp, #56]	; 0x38
   39b94:	ldr	r2, [sp, #32]
   39b98:	ldr	r4, [r3, r2]
   39b9c:	add	r1, sp, #56	; 0x38
   39ba0:	ldr	r0, [sp, #28]
   39ba4:	bl	39d50 <__assert_fail@plt+0x2778c>
   39ba8:	cmp	r0, #0
   39bac:	bne	39c7c <__assert_fail@plt+0x276b8>
   39bb0:	ldr	r1, [sl, #4]
   39bb4:	cmp	r1, #0
   39bb8:	beq	39a80 <__assert_fail@plt+0x274bc>
   39bbc:	ldr	r3, [sp, #52]	; 0x34
   39bc0:	ldr	r2, [sp, #56]	; 0x38
   39bc4:	mov	r0, r9
   39bc8:	bl	38308 <__assert_fail@plt+0x25d44>
   39bcc:	cmp	r0, #0
   39bd0:	beq	39a80 <__assert_fail@plt+0x274bc>
   39bd4:	mov	r4, r0
   39bd8:	b	39c5c <__assert_fail@plt+0x27698>
   39bdc:	ldr	fp, [sp, #36]	; 0x24
   39be0:	ldr	r3, [sp, #16]
   39be4:	add	r3, r3, #1
   39be8:	mov	r2, r3
   39bec:	str	r3, [sp, #16]
   39bf0:	ldr	r3, [fp, #4]
   39bf4:	cmp	r2, r3
   39bf8:	bge	39c58 <__assert_fail@plt+0x27694>
   39bfc:	ldr	r3, [fp, #8]
   39c00:	ldr	r2, [sp, #16]
   39c04:	ldr	r7, [r3, r2, lsl #2]
   39c08:	ldr	r3, [r9]
   39c0c:	add	r3, r3, r7, lsl #3
   39c10:	ldrb	r2, [r3, #4]
   39c14:	ldr	r3, [sl, #8]
   39c18:	cmp	r7, r3
   39c1c:	beq	39a38 <__assert_fail@plt+0x27474>
   39c20:	cmp	r2, #4
   39c24:	bne	39be0 <__assert_fail@plt+0x2761c>
   39c28:	ldr	r3, [sp, #28]
   39c2c:	ldr	r4, [r3, #116]	; 0x74
   39c30:	ldr	r6, [sp, #48]	; 0x30
   39c34:	add	r4, r4, r6
   39c38:	add	r3, r7, r7, lsl #1
   39c3c:	lsl	r3, r3, #2
   39c40:	str	r3, [sp, #24]
   39c44:	lsl	r3, r7, #2
   39c48:	str	r3, [sp, #20]
   39c4c:	ldr	r5, [sp, #44]	; 0x2c
   39c50:	str	fp, [sp, #36]	; 0x24
   39c54:	b	39acc <__assert_fail@plt+0x27508>
   39c58:	mov	r4, #0
   39c5c:	ldr	r3, [sp, #56]	; 0x38
   39c60:	cmp	r3, #0
   39c64:	beq	39718 <__assert_fail@plt+0x27154>
   39c68:	ldr	r0, [sp, #80]	; 0x50
   39c6c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   39c70:	b	39718 <__assert_fail@plt+0x27154>
   39c74:	mov	r4, #12
   39c78:	b	39c5c <__assert_fail@plt+0x27698>
   39c7c:	mov	r4, r0
   39c80:	b	39c5c <__assert_fail@plt+0x27698>
   39c84:	mov	r4, #0
   39c88:	b	39718 <__assert_fail@plt+0x27154>
   39c8c:	mov	r4, #12
   39c90:	b	39718 <__assert_fail@plt+0x27154>
   39c94:	mov	r4, #12
   39c98:	b	39718 <__assert_fail@plt+0x27154>
   39c9c:	add	r0, sp, #88	; 0x58
   39ca0:	mov	r3, #0
   39ca4:	str	r3, [r0, #-4]!
   39ca8:	ldr	r4, [sl]
   39cac:	mov	r2, r5
   39cb0:	mov	r1, r6
   39cb4:	bl	38104 <__assert_fail@plt+0x25b40>
   39cb8:	str	r0, [r4, fp, lsl #2]
   39cbc:	ldr	r4, [sp, #84]	; 0x54
   39cc0:	cmp	r4, #0
   39cc4:	beq	396fc <__assert_fail@plt+0x27138>
   39cc8:	b	39718 <__assert_fail@plt+0x27154>
   39ccc:	ldr	r3, [sp, #16]
   39cd0:	cmp	r3, #0
   39cd4:	bge	398cc <__assert_fail@plt+0x27308>
   39cd8:	add	r7, r7, #1
   39cdc:	ldr	r3, [sl, #20]
   39ce0:	cmp	r7, r3
   39ce4:	bge	39c9c <__assert_fail@plt+0x276d8>
   39ce8:	ldr	r3, [sl, #24]
   39cec:	ldr	r3, [r3, r7, lsl #2]
   39cf0:	add	r3, r3, r3, lsl #1
   39cf4:	ldr	ip, [sp, #20]
   39cf8:	add	r2, ip, r3, lsl #3
   39cfc:	ldr	r1, [r2, #8]
   39d00:	cmp	fp, r1
   39d04:	ble	39cd8 <__assert_fail@plt+0x27714>
   39d08:	ldr	r1, [r2, #4]
   39d0c:	cmp	fp, r1
   39d10:	bgt	39cd8 <__assert_fail@plt+0x27714>
   39d14:	ldr	r0, [r6]
   39d18:	ldr	r3, [ip, r3, lsl #3]
   39d1c:	ldr	r8, [r0, r3, lsl #3]
   39d20:	ldr	r3, [r2, #12]
   39d24:	cmp	fp, r3
   39d28:	beq	39830 <__assert_fail@plt+0x2726c>
   39d2c:	ldr	r3, [r5, #4]
   39d30:	cmp	r3, #0
   39d34:	movgt	r9, #0
   39d38:	bgt	39958 <__assert_fail@plt+0x27394>
   39d3c:	b	39cd8 <__assert_fail@plt+0x27714>
   39d40:	mov	r4, r0
   39d44:	b	39718 <__assert_fail@plt+0x27154>
   39d48:	mov	r4, r0
   39d4c:	b	39718 <__assert_fail@plt+0x27154>
   39d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d54:	sub	sp, sp, #60	; 0x3c
   39d58:	mov	r5, r0
   39d5c:	str	r0, [sp, #12]
   39d60:	mov	r9, r1
   39d64:	ldr	fp, [r1, #12]
   39d68:	lsl	r3, fp, #2
   39d6c:	str	r3, [sp, #16]
   39d70:	ldr	r1, [r1, #8]
   39d74:	add	r0, sp, #44	; 0x2c
   39d78:	bl	32480 <__assert_fail@plt+0x1febc>
   39d7c:	subs	r4, r0, #0
   39d80:	bne	3a014 <__assert_fail@plt+0x27a50>
   39d84:	add	r3, sp, #44	; 0x2c
   39d88:	mov	r2, fp
   39d8c:	mov	r1, r9
   39d90:	mov	r0, r5
   39d94:	bl	39690 <__assert_fail@plt+0x270cc>
   39d98:	subs	r3, r0, #0
   39d9c:	str	r3, [sp, #36]	; 0x24
   39da0:	bne	3a000 <__assert_fail@plt+0x27a3c>
   39da4:	cmp	fp, #0
   39da8:	ldrle	r4, [sp, #36]	; 0x24
   39dac:	ble	3a00c <__assert_fail@plt+0x27a48>
   39db0:	mov	r3, #0
   39db4:	str	r3, [sp, #32]
   39db8:	add	r3, r9, #16
   39dbc:	str	r3, [sp, #28]
   39dc0:	mov	sl, fp
   39dc4:	mov	fp, r9
   39dc8:	b	39f64 <__assert_fail@plt+0x279a0>
   39dcc:	ldr	r2, [sp, #16]
   39dd0:	mov	r1, #0
   39dd4:	bl	12348 <memset@plt>
   39dd8:	ldr	r0, [sp, #52]	; 0x34
   39ddc:	bl	2e3fc <__assert_fail@plt+0x1be38>
   39de0:	ldr	r4, [sp, #36]	; 0x24
   39de4:	b	3a014 <__assert_fail@plt+0x27a50>
   39de8:	ldr	r3, [fp, #12]
   39dec:	str	r3, [sp, #20]
   39df0:	ldr	r2, [sp, #12]
   39df4:	ldr	r3, [r2, #84]	; 0x54
   39df8:	mov	r0, r3
   39dfc:	mov	r3, sl
   39e00:	mov	r1, r4
   39e04:	str	r0, [sp, #24]
   39e08:	bl	37dd8 <__assert_fail@plt+0x25814>
   39e0c:	subs	r9, r0, #0
   39e10:	ble	39e58 <__assert_fail@plt+0x27894>
   39e14:	add	r3, sl, r9
   39e18:	ldr	r2, [sp, #20]
   39e1c:	cmp	r2, r3
   39e20:	blt	39e60 <__assert_fail@plt+0x2789c>
   39e24:	ldr	r2, [fp]
   39e28:	ldr	r0, [r2, r3, lsl #2]
   39e2c:	cmp	r0, #0
   39e30:	beq	39ee0 <__assert_fail@plt+0x2791c>
   39e34:	ldr	r3, [sp, #24]
   39e38:	ldr	r3, [r3, #12]
   39e3c:	ldr	r2, [sp, #8]
   39e40:	ldr	r1, [r3, r2, lsl #2]
   39e44:	add	r0, r0, #4
   39e48:	bl	31514 <__assert_fail@plt+0x1ef50>
   39e4c:	cmp	r0, #0
   39e50:	beq	39ee0 <__assert_fail@plt+0x2791c>
   39e54:	b	39e60 <__assert_fail@plt+0x2789c>
   39e58:	cmp	r9, #0
   39e5c:	beq	39ee0 <__assert_fail@plt+0x2791c>
   39e60:	ldr	r3, [fp, #20]
   39e64:	cmp	r3, #0
   39e68:	beq	39e98 <__assert_fail@plt+0x278d4>
   39e6c:	ldr	r3, [r8, #12]
   39e70:	ldr	r2, [sp, #8]
   39e74:	ldr	r2, [r3, r2, lsl #2]
   39e78:	str	sl, [sp, #4]
   39e7c:	str	r4, [sp]
   39e80:	add	r3, sl, r9
   39e84:	ldr	r1, [sp, #28]
   39e88:	ldr	r0, [sp, #12]
   39e8c:	bl	31be8 <__assert_fail@plt+0x1f624>
   39e90:	cmp	r0, #0
   39e94:	bne	39eac <__assert_fail@plt+0x278e8>
   39e98:	mov	r1, r4
   39e9c:	add	r0, sp, #44	; 0x2c
   39ea0:	bl	34a64 <__assert_fail@plt+0x224a0>
   39ea4:	cmp	r0, #0
   39ea8:	beq	3a008 <__assert_fail@plt+0x27a44>
   39eac:	add	r5, r5, #1
   39eb0:	ldr	r3, [r7, #20]
   39eb4:	cmp	r5, r3
   39eb8:	bge	39f34 <__assert_fail@plt+0x27970>
   39ebc:	ldr	r3, [r7, #24]
   39ec0:	ldr	r4, [r3, r5, lsl #2]
   39ec4:	str	r4, [sp, #8]
   39ec8:	lsl	r6, r4, #3
   39ecc:	ldr	r3, [r8]
   39ed0:	add	r3, r3, r6
   39ed4:	ldrb	r3, [r3, #6]
   39ed8:	tst	r3, #16
   39edc:	bne	39de8 <__assert_fail@plt+0x27824>
   39ee0:	ldr	r1, [r8]
   39ee4:	mov	r2, sl
   39ee8:	add	r1, r1, r6
   39eec:	ldr	r0, [sp, #12]
   39ef0:	bl	35490 <__assert_fail@plt+0x22ecc>
   39ef4:	cmp	r0, #0
   39ef8:	beq	39eac <__assert_fail@plt+0x278e8>
   39efc:	ldr	r3, [fp]
   39f00:	ldr	r2, [sp, #16]
   39f04:	ldr	r0, [r3, r2]
   39f08:	cmp	r0, #0
   39f0c:	beq	39eac <__assert_fail@plt+0x278e8>
   39f10:	ldr	r3, [r8, #12]
   39f14:	ldr	r2, [sp, #8]
   39f18:	ldr	r1, [r3, r2, lsl #2]
   39f1c:	add	r0, r0, #4
   39f20:	bl	31514 <__assert_fail@plt+0x1ef50>
   39f24:	cmp	r0, #0
   39f28:	beq	39eac <__assert_fail@plt+0x278e8>
   39f2c:	mov	r9, #1
   39f30:	b	39e60 <__assert_fail@plt+0x2789c>
   39f34:	add	r3, sp, #44	; 0x2c
   39f38:	mov	r2, sl
   39f3c:	mov	r1, fp
   39f40:	ldr	r0, [sp, #12]
   39f44:	bl	39690 <__assert_fail@plt+0x270cc>
   39f48:	cmp	r0, #0
   39f4c:	bne	39ff0 <__assert_fail@plt+0x27a2c>
   39f50:	ldr	r3, [sp, #16]
   39f54:	sub	r3, r3, #4
   39f58:	str	r3, [sp, #16]
   39f5c:	cmp	sl, #0
   39f60:	beq	39ff8 <__assert_fail@plt+0x27a34>
   39f64:	ldr	r0, [fp]
   39f68:	ldr	r3, [sp, #16]
   39f6c:	ldr	r3, [r0, r3]
   39f70:	cmp	r3, #0
   39f74:	ldreq	r3, [sp, #32]
   39f78:	addeq	r3, r3, #1
   39f7c:	movne	r3, #0
   39f80:	str	r3, [sp, #32]
   39f84:	ldr	r3, [sp, #12]
   39f88:	ldr	r3, [r3, #120]	; 0x78
   39f8c:	ldr	r2, [sp, #32]
   39f90:	cmp	r2, r3
   39f94:	bgt	39dcc <__assert_fail@plt+0x27808>
   39f98:	mov	r3, #0
   39f9c:	str	r3, [sp, #48]	; 0x30
   39fa0:	sub	sl, sl, #1
   39fa4:	ldr	r2, [sp, #12]
   39fa8:	ldr	r3, [r2, #100]	; 0x64
   39fac:	ldr	r1, [sp, #16]
   39fb0:	add	r3, r3, r1
   39fb4:	ldr	r7, [r3, #-4]
   39fb8:	cmp	r7, #0
   39fbc:	beq	39f34 <__assert_fail@plt+0x27970>
   39fc0:	ldr	r8, [r2, #84]	; 0x54
   39fc4:	ldr	r3, [r7, #20]
   39fc8:	cmp	r3, #0
   39fcc:	ble	39f34 <__assert_fail@plt+0x27970>
   39fd0:	ldr	r3, [r7, #24]
   39fd4:	ldr	r4, [r3]
   39fd8:	str	r4, [sp, #8]
   39fdc:	lsl	r6, r4, #3
   39fe0:	ldr	r3, [r8]
   39fe4:	add	r3, r3, r6
   39fe8:	mov	r5, #0
   39fec:	b	39ed4 <__assert_fail@plt+0x27910>
   39ff0:	mov	r4, r0
   39ff4:	b	3a00c <__assert_fail@plt+0x27a48>
   39ff8:	mov	r4, r0
   39ffc:	b	3a00c <__assert_fail@plt+0x27a48>
   3a000:	ldr	r4, [sp, #36]	; 0x24
   3a004:	b	3a00c <__assert_fail@plt+0x27a48>
   3a008:	mov	r4, #12
   3a00c:	ldr	r0, [sp, #52]	; 0x34
   3a010:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3a014:	mov	r0, r4
   3a018:	add	sp, sp, #60	; 0x3c
   3a01c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a024:	sub	sp, sp, #412	; 0x19c
   3a028:	mov	r6, r0
   3a02c:	str	r0, [sp, #24]
   3a030:	str	r1, [sp, #36]	; 0x24
   3a034:	str	r2, [sp, #48]	; 0x30
   3a038:	mov	r4, r3
   3a03c:	ldr	r5, [sp, #448]	; 0x1c0
   3a040:	ldr	fp, [r0]
   3a044:	mov	r2, #136	; 0x88
   3a048:	mov	r1, #0
   3a04c:	add	r0, sp, #268	; 0x10c
   3a050:	bl	12348 <memset@plt>
   3a054:	str	fp, [sp, #352]	; 0x160
   3a058:	ldr	r2, [r6, #16]
   3a05c:	cmp	r2, #0
   3a060:	beq	3a3fc <__assert_fail@plt+0x27e38>
   3a064:	ldrb	r3, [r6, #28]
   3a068:	subs	r1, r4, r5
   3a06c:	movne	r1, #1
   3a070:	ands	r1, r1, r3, lsr #3
   3a074:	beq	3a408 <__assert_fail@plt+0x27e44>
   3a078:	and	r3, r3, #1
   3a07c:	cmp	r3, #0
   3a080:	movne	r2, #0
   3a084:	str	r2, [sp, #52]	; 0x34
   3a088:	ldr	r3, [sp, #24]
   3a08c:	ldr	r3, [r3, #24]
   3a090:	ldr	r2, [sp, #456]	; 0x1c8
   3a094:	cmp	r3, r2
   3a098:	subcc	r2, r2, #1
   3a09c:	subcc	r3, r2, r3
   3a0a0:	movcs	r3, #0
   3a0a4:	str	r3, [sp, #64]	; 0x40
   3a0a8:	ldr	r2, [sp, #24]
   3a0ac:	ldr	r3, [r2, #8]
   3a0b0:	cmp	r3, #0
   3a0b4:	beq	3b610 <__assert_fail@plt+0x2904c>
   3a0b8:	ldr	r3, [fp, #36]	; 0x24
   3a0bc:	cmp	r3, #0
   3a0c0:	moveq	r3, #1
   3a0c4:	streq	r3, [sp, #28]
   3a0c8:	beq	3b694 <__assert_fail@plt+0x290d0>
   3a0cc:	ldr	r3, [fp, #40]	; 0x28
   3a0d0:	cmp	r3, #0
   3a0d4:	beq	3b61c <__assert_fail@plt+0x29058>
   3a0d8:	ldr	r3, [fp, #44]	; 0x2c
   3a0dc:	cmp	r3, #0
   3a0e0:	moveq	r3, #1
   3a0e4:	streq	r3, [sp, #28]
   3a0e8:	beq	3b694 <__assert_fail@plt+0x290d0>
   3a0ec:	ldr	r3, [fp, #48]	; 0x30
   3a0f0:	cmp	r3, #0
   3a0f4:	beq	3b628 <__assert_fail@plt+0x29064>
   3a0f8:	ldr	r3, [fp, #36]	; 0x24
   3a0fc:	ldr	r3, [r3, #8]
   3a100:	cmp	r3, #0
   3a104:	bne	3a150 <__assert_fail@plt+0x27b8c>
   3a108:	ldr	r3, [fp, #40]	; 0x28
   3a10c:	ldr	r3, [r3, #8]
   3a110:	cmp	r3, #0
   3a114:	bne	3a150 <__assert_fail@plt+0x27b8c>
   3a118:	ldr	r3, [fp, #44]	; 0x2c
   3a11c:	ldr	r3, [r3, #8]
   3a120:	cmp	r3, #0
   3a124:	beq	3a134 <__assert_fail@plt+0x27b70>
   3a128:	ldrsb	r3, [r2, #28]
   3a12c:	cmp	r3, #0
   3a130:	blt	3a150 <__assert_fail@plt+0x27b8c>
   3a134:	cmp	r4, #0
   3a138:	cmpne	r5, #0
   3a13c:	movne	r3, #1
   3a140:	strne	r3, [sp, #28]
   3a144:	bne	3b694 <__assert_fail@plt+0x290d0>
   3a148:	mov	r5, #0
   3a14c:	mov	r4, r5
   3a150:	ldr	r3, [sp, #456]	; 0x1c8
   3a154:	ldr	r2, [sp, #64]	; 0x40
   3a158:	subs	r3, r3, r2
   3a15c:	str	r3, [sp, #60]	; 0x3c
   3a160:	movne	r3, #1
   3a164:	strne	r3, [sp, #16]
   3a168:	bne	3a17c <__assert_fail@plt+0x27bb8>
   3a16c:	ldr	r3, [fp, #76]	; 0x4c
   3a170:	adds	r3, r3, #0
   3a174:	movne	r3, #1
   3a178:	str	r3, [sp, #16]
   3a17c:	ldr	r2, [sp, #24]
   3a180:	ldr	r3, [r2, #20]
   3a184:	mov	lr, r3
   3a188:	str	r3, [sp, #76]	; 0x4c
   3a18c:	ldr	r3, [r2, #12]
   3a190:	lsr	r3, r3, #22
   3a194:	and	r3, r3, #1
   3a198:	ldr	r0, [fp, #92]	; 0x5c
   3a19c:	ldr	r2, [fp, #8]
   3a1a0:	add	r2, r2, #1
   3a1a4:	cmp	r2, r0
   3a1a8:	movlt	r2, r0
   3a1ac:	ldr	ip, [sp, #48]	; 0x30
   3a1b0:	add	r1, ip, #1
   3a1b4:	ldr	r6, [sp, #36]	; 0x24
   3a1b8:	str	r6, [sp, #268]	; 0x10c
   3a1bc:	str	ip, [sp, #316]	; 0x13c
   3a1c0:	str	ip, [sp, #312]	; 0x138
   3a1c4:	str	lr, [sp, #332]	; 0x14c
   3a1c8:	strb	r3, [sp, #340]	; 0x154
   3a1cc:	adds	r6, lr, #0
   3a1d0:	movne	r6, #1
   3a1d4:	orr	r3, r3, r6
   3a1d8:	strb	r3, [sp, #343]	; 0x157
   3a1dc:	str	r0, [sp, #348]	; 0x15c
   3a1e0:	ldrb	r3, [fp, #88]	; 0x58
   3a1e4:	lsr	r0, r3, #2
   3a1e8:	and	r0, r0, #1
   3a1ec:	strb	r0, [sp, #341]	; 0x155
   3a1f0:	lsr	r3, r3, #3
   3a1f4:	and	r3, r3, #1
   3a1f8:	strb	r3, [sp, #342]	; 0x156
   3a1fc:	str	ip, [sp, #324]	; 0x144
   3a200:	str	ip, [sp, #320]	; 0x140
   3a204:	cmp	r2, r1
   3a208:	movlt	r1, r2
   3a20c:	add	r0, sp, #268	; 0x10c
   3a210:	bl	32028 <__assert_fail@plt+0x1fa64>
   3a214:	subs	r3, r0, #0
   3a218:	str	r3, [sp, #28]
   3a21c:	bne	3b678 <__assert_fail@plt+0x290b4>
   3a220:	add	r3, fp, #96	; 0x60
   3a224:	str	r3, [sp, #336]	; 0x150
   3a228:	ldrb	r3, [fp, #88]	; 0x58
   3a22c:	lsr	r3, r3, #4
   3a230:	and	r3, r3, #1
   3a234:	strb	r3, [sp, #346]	; 0x15a
   3a238:	ldrb	r3, [sp, #343]	; 0x157
   3a23c:	cmp	r3, #0
   3a240:	beq	3b634 <__assert_fail@plt+0x29070>
   3a244:	mov	r3, #0
   3a248:	str	r3, [sp, #296]	; 0x128
   3a24c:	str	r3, [sp, #300]	; 0x12c
   3a250:	ldr	r3, [sp, #452]	; 0x1c4
   3a254:	str	r3, [sp, #324]	; 0x144
   3a258:	str	r3, [sp, #320]	; 0x140
   3a25c:	ldr	r3, [sp, #24]
   3a260:	ldrb	r3, [r3, #28]
   3a264:	lsr	r3, r3, #7
   3a268:	strb	r3, [sp, #345]	; 0x159
   3a26c:	ldr	r7, [fp, #76]	; 0x4c
   3a270:	lsl	r7, r7, #1
   3a274:	ldr	r3, [sp, #464]	; 0x1d0
   3a278:	str	r3, [sp, #356]	; 0x164
   3a27c:	mvn	r3, #0
   3a280:	str	r3, [sp, #360]	; 0x168
   3a284:	cmp	r7, #0
   3a288:	ble	3a2c4 <__assert_fail@plt+0x27d00>
   3a28c:	ldr	r3, [pc, #4012]	; 3b240 <__assert_fail@plt+0x28c7c>
   3a290:	cmp	r7, r3
   3a294:	bhi	3b654 <__assert_fail@plt+0x29090>
   3a298:	add	r0, r7, r7, lsl #1
   3a29c:	lsl	r0, r0, #3
   3a2a0:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3a2a4:	str	r0, [sp, #384]	; 0x180
   3a2a8:	lsl	r0, r7, #2
   3a2ac:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3a2b0:	str	r0, [sp, #400]	; 0x190
   3a2b4:	ldr	r3, [sp, #384]	; 0x180
   3a2b8:	cmp	r0, #0
   3a2bc:	cmpne	r3, #0
   3a2c0:	beq	3b654 <__assert_fail@plt+0x29090>
   3a2c4:	str	r7, [sp, #380]	; 0x17c
   3a2c8:	mov	r3, #1
   3a2cc:	str	r3, [sp, #388]	; 0x184
   3a2d0:	str	r7, [sp, #396]	; 0x18c
   3a2d4:	ldr	r3, [sp, #60]	; 0x3c
   3a2d8:	cmp	r3, #1
   3a2dc:	bls	3a414 <__assert_fail@plt+0x27e50>
   3a2e0:	ldr	r3, [sp, #304]	; 0x130
   3a2e4:	cmn	r3, #-1073741822	; 0xc0000002
   3a2e8:	bhi	3b5ac <__assert_fail@plt+0x28fe8>
   3a2ec:	add	r3, r3, #1
   3a2f0:	lsl	r0, r3, #2
   3a2f4:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3a2f8:	str	r0, [sp, #368]	; 0x170
   3a2fc:	cmp	r0, #0
   3a300:	beq	3b5b8 <__assert_fail@plt+0x28ff4>
   3a304:	str	r4, [sp, #404]	; 0x194
   3a308:	ldr	r3, [sp, #464]	; 0x1d0
   3a30c:	and	r3, r3, #1
   3a310:	cmp	r3, #0
   3a314:	movne	r3, #4
   3a318:	moveq	r3, #6
   3a31c:	str	r3, [sp, #328]	; 0x148
   3a320:	cmp	r4, r5
   3a324:	mvngt	r3, #0
   3a328:	movle	r3, #1
   3a32c:	str	r3, [sp, #84]	; 0x54
   3a330:	movlt	r3, r4
   3a334:	movge	r3, r5
   3a338:	str	r3, [sp, #56]	; 0x38
   3a33c:	movge	r3, r4
   3a340:	movlt	r3, r5
   3a344:	str	r3, [sp, #40]	; 0x28
   3a348:	ldr	r3, [fp, #92]	; 0x5c
   3a34c:	str	r3, [sp, #80]	; 0x50
   3a350:	ldr	r2, [sp, #52]	; 0x34
   3a354:	cmp	r2, #0
   3a358:	moveq	r3, #8
   3a35c:	beq	3a3a4 <__assert_fail@plt+0x27de0>
   3a360:	cmp	r3, #1
   3a364:	moveq	r3, #4
   3a368:	beq	3a390 <__assert_fail@plt+0x27dcc>
   3a36c:	ldr	r3, [sp, #24]
   3a370:	ldr	r3, [r3, #12]
   3a374:	lsr	r3, r3, #22
   3a378:	eor	r3, r3, #1
   3a37c:	ldr	r2, [sp, #76]	; 0x4c
   3a380:	cmp	r2, #0
   3a384:	movne	r3, #0
   3a388:	andeq	r3, r3, #1
   3a38c:	lsl	r3, r3, #2
   3a390:	cmp	r4, r5
   3a394:	movle	r2, #2
   3a398:	movgt	r2, #0
   3a39c:	orr	r3, r6, r3
   3a3a0:	orr	r3, r3, r2
   3a3a4:	ldr	r2, [sp, #40]	; 0x28
   3a3a8:	cmp	r4, r2
   3a3ac:	movle	r2, #0
   3a3b0:	movgt	r2, #1
   3a3b4:	ldr	r1, [sp, #56]	; 0x38
   3a3b8:	cmp	r4, r1
   3a3bc:	orrlt	r2, r2, #1
   3a3c0:	str	r2, [sp, #68]	; 0x44
   3a3c4:	cmp	r2, #0
   3a3c8:	bne	3b5c4 <__assert_fail@plt+0x29000>
   3a3cc:	add	r2, sp, #408	; 0x198
   3a3d0:	cmp	r4, r5
   3a3d4:	suble	r2, r2, #4
   3a3d8:	movgt	r2, #0
   3a3dc:	str	r2, [sp, #88]	; 0x58
   3a3e0:	adds	r2, r2, #0
   3a3e4:	movne	r2, #1
   3a3e8:	str	r2, [sp, #92]	; 0x5c
   3a3ec:	sub	r3, r3, #4
   3a3f0:	str	r3, [sp, #72]	; 0x48
   3a3f4:	str	fp, [sp, #44]	; 0x2c
   3a3f8:	b	3b978 <__assert_fail@plt+0x293b4>
   3a3fc:	mov	r3, #0
   3a400:	str	r3, [sp, #52]	; 0x34
   3a404:	b	3a088 <__assert_fail@plt+0x27ac4>
   3a408:	mov	r3, #0
   3a40c:	str	r3, [sp, #52]	; 0x34
   3a410:	b	3a088 <__assert_fail@plt+0x27ac4>
   3a414:	ldrb	r3, [fp, #88]	; 0x58
   3a418:	tst	r3, #2
   3a41c:	beq	3a304 <__assert_fail@plt+0x27d40>
   3a420:	b	3a2e0 <__assert_fail@plt+0x27d1c>
   3a424:	ldr	r3, [sp, #404]	; 0x194
   3a428:	ldr	r2, [sp, #40]	; 0x28
   3a42c:	cmp	r2, r3
   3a430:	ble	3a56c <__assert_fail@plt+0x27fa8>
   3a434:	ldr	r1, [sp, #36]	; 0x24
   3a438:	add	r2, r1, r3
   3a43c:	ldrb	r1, [r1, r3]
   3a440:	ldr	r0, [sp, #76]	; 0x4c
   3a444:	ldrb	r1, [r0, r1]
   3a448:	ldr	r0, [sp, #52]	; 0x34
   3a44c:	ldrb	r1, [r0, r1]
   3a450:	cmp	r1, #0
   3a454:	bne	3a57c <__assert_fail@plt+0x27fb8>
   3a458:	add	r3, r3, #1
   3a45c:	ldr	ip, [sp, #40]	; 0x28
   3a460:	ldr	lr, [sp, #52]	; 0x34
   3a464:	ldr	r4, [sp, #76]	; 0x4c
   3a468:	mov	r0, r3
   3a46c:	cmp	r3, ip
   3a470:	beq	3a568 <__assert_fail@plt+0x27fa4>
   3a474:	add	r3, r3, #1
   3a478:	ldrb	r1, [r2, #1]!
   3a47c:	ldrb	r1, [r4, r1]
   3a480:	ldrb	r1, [lr, r1]
   3a484:	cmp	r1, #0
   3a488:	beq	3a468 <__assert_fail@plt+0x27ea4>
   3a48c:	str	r0, [sp, #404]	; 0x194
   3a490:	b	3a57c <__assert_fail@plt+0x27fb8>
   3a494:	ldr	r3, [sp, #404]	; 0x194
   3a498:	ldr	r2, [sp, #40]	; 0x28
   3a49c:	cmp	r2, r3
   3a4a0:	ble	3a56c <__assert_fail@plt+0x27fa8>
   3a4a4:	ldr	r1, [sp, #36]	; 0x24
   3a4a8:	add	r2, r1, r3
   3a4ac:	ldrb	r1, [r1, r3]
   3a4b0:	ldr	r0, [sp, #52]	; 0x34
   3a4b4:	ldrb	r1, [r0, r1]
   3a4b8:	cmp	r1, #0
   3a4bc:	bne	3a57c <__assert_fail@plt+0x27fb8>
   3a4c0:	add	r3, r3, #1
   3a4c4:	ldr	ip, [sp, #40]	; 0x28
   3a4c8:	ldr	lr, [sp, #52]	; 0x34
   3a4cc:	mov	r0, r3
   3a4d0:	cmp	r3, ip
   3a4d4:	beq	3a63c <__assert_fail@plt+0x28078>
   3a4d8:	add	r3, r3, #1
   3a4dc:	ldrb	r1, [r2, #1]!
   3a4e0:	ldrb	r1, [lr, r1]
   3a4e4:	cmp	r1, #0
   3a4e8:	beq	3a4cc <__assert_fail@plt+0x27f08>
   3a4ec:	str	r0, [sp, #404]	; 0x194
   3a4f0:	b	3a57c <__assert_fail@plt+0x27fb8>
   3a4f4:	ldr	r3, [sp, #404]	; 0x194
   3a4f8:	ldr	r2, [sp, #56]	; 0x38
   3a4fc:	cmp	r2, r3
   3a500:	bgt	3a560 <__assert_fail@plt+0x27f9c>
   3a504:	ldr	r1, [sp, #68]	; 0x44
   3a508:	ldr	ip, [sp, #52]	; 0x34
   3a50c:	ldr	r0, [sp, #76]	; 0x4c
   3a510:	ldr	r4, [sp, #56]	; 0x38
   3a514:	ldr	r5, [sp, #36]	; 0x24
   3a518:	ldr	lr, [sp, #48]	; 0x30
   3a51c:	cmp	lr, r3
   3a520:	ldrbgt	r2, [r5, r3]
   3a524:	movle	r2, #0
   3a528:	cmp	r0, #0
   3a52c:	ldrbne	r2, [r0, r2]
   3a530:	ldrb	r2, [ip, r2]
   3a534:	cmp	r2, #0
   3a538:	bne	3a688 <__assert_fail@plt+0x280c4>
   3a53c:	sub	r3, r3, #1
   3a540:	mov	r1, #1
   3a544:	cmp	r4, r3
   3a548:	ble	3a51c <__assert_fail@plt+0x27f58>
   3a54c:	ldr	fp, [sp, #44]	; 0x2c
   3a550:	str	r3, [sp, #404]	; 0x194
   3a554:	mov	r3, #1
   3a558:	str	r3, [sp, #28]
   3a55c:	b	3b678 <__assert_fail@plt+0x290b4>
   3a560:	ldr	fp, [sp, #44]	; 0x2c
   3a564:	b	3a554 <__assert_fail@plt+0x27f90>
   3a568:	str	r3, [sp, #404]	; 0x194
   3a56c:	ldr	r3, [sp, #404]	; 0x194
   3a570:	ldr	r2, [sp, #40]	; 0x28
   3a574:	cmp	r2, r3
   3a578:	beq	3a644 <__assert_fail@plt+0x28080>
   3a57c:	ldr	r2, [sp, #464]	; 0x1d0
   3a580:	ldr	r1, [sp, #404]	; 0x194
   3a584:	add	r0, sp, #268	; 0x10c
   3a588:	bl	376b0 <__assert_fail@plt+0x250ec>
   3a58c:	subs	r3, r0, #0
   3a590:	str	r3, [sp, #28]
   3a594:	bne	3b5ec <__assert_fail@plt+0x29028>
   3a598:	ldr	r3, [sp, #80]	; 0x50
   3a59c:	cmp	r3, #1
   3a5a0:	beq	3a5c0 <__assert_fail@plt+0x27ffc>
   3a5a4:	ldr	r3, [sp, #296]	; 0x128
   3a5a8:	cmp	r3, #0
   3a5ac:	beq	3a5c0 <__assert_fail@plt+0x27ffc>
   3a5b0:	ldr	r3, [sp, #276]	; 0x114
   3a5b4:	ldr	r3, [r3]
   3a5b8:	cmn	r3, #1
   3a5bc:	beq	3b940 <__assert_fail@plt+0x2937c>
   3a5c0:	mov	r3, #0
   3a5c4:	str	r3, [sp, #388]	; 0x184
   3a5c8:	str	r3, [sp, #376]	; 0x178
   3a5cc:	str	r3, [sp, #372]	; 0x174
   3a5d0:	ldr	r4, [sp, #352]	; 0x160
   3a5d4:	ldr	r3, [sp, #308]	; 0x134
   3a5d8:	str	r3, [sp, #32]
   3a5dc:	mov	r3, #0
   3a5e0:	str	r3, [sp, #104]	; 0x68
   3a5e4:	ldr	r6, [r4, #36]	; 0x24
   3a5e8:	ldrsb	r3, [r6, #52]	; 0x34
   3a5ec:	cmp	r3, #0
   3a5f0:	blt	3a754 <__assert_fail@plt+0x28190>
   3a5f4:	ldr	r3, [sp, #368]	; 0x170
   3a5f8:	cmp	r3, #0
   3a5fc:	beq	3a814 <__assert_fail@plt+0x28250>
   3a600:	ldr	r2, [sp, #32]
   3a604:	str	r6, [r3, r2, lsl #2]
   3a608:	ldr	r3, [r4, #76]	; 0x4c
   3a60c:	cmp	r3, #0
   3a610:	ldreq	fp, [sp, #92]	; 0x5c
   3a614:	bne	3a7c4 <__assert_fail@plt+0x28200>
   3a618:	ldrb	r3, [r6, #52]	; 0x34
   3a61c:	tst	r3, #16
   3a620:	bne	3a81c <__assert_fail@plt+0x28258>
   3a624:	mvn	sl, #0
   3a628:	mov	r3, #0
   3a62c:	str	r3, [sp, #12]
   3a630:	ldr	r3, [sp, #88]	; 0x58
   3a634:	str	r3, [sp, #20]
   3a638:	b	3abb8 <__assert_fail@plt+0x285f4>
   3a63c:	str	r3, [sp, #404]	; 0x194
   3a640:	b	3a56c <__assert_fail@plt+0x27fa8>
   3a644:	ldr	r2, [sp, #48]	; 0x30
   3a648:	ldr	r3, [sp, #40]	; 0x28
   3a64c:	cmp	r2, r3
   3a650:	ldrgt	r2, [sp, #36]	; 0x24
   3a654:	ldrbgt	r3, [r2, r3]
   3a658:	movle	r3, #0
   3a65c:	ldr	r2, [sp, #76]	; 0x4c
   3a660:	cmp	r2, #0
   3a664:	ldrbne	r3, [r2, r3]
   3a668:	ldr	r2, [sp, #52]	; 0x34
   3a66c:	ldrb	r3, [r2, r3]
   3a670:	cmp	r3, #0
   3a674:	bne	3a57c <__assert_fail@plt+0x27fb8>
   3a678:	ldr	fp, [sp, #44]	; 0x2c
   3a67c:	mov	r3, #1
   3a680:	str	r3, [sp, #28]
   3a684:	b	3b678 <__assert_fail@plt+0x290b4>
   3a688:	cmp	r1, #0
   3a68c:	strne	r3, [sp, #404]	; 0x194
   3a690:	ldr	r2, [sp, #56]	; 0x38
   3a694:	cmp	r2, r3
   3a698:	ble	3a57c <__assert_fail@plt+0x27fb8>
   3a69c:	ldr	fp, [sp, #44]	; 0x2c
   3a6a0:	mov	r3, #1
   3a6a4:	str	r3, [sp, #28]
   3a6a8:	b	3b678 <__assert_fail@plt+0x290b4>
   3a6ac:	ldr	r5, [sp, #52]	; 0x34
   3a6b0:	ldr	r6, [sp, #84]	; 0x54
   3a6b4:	ldr	r7, [sp, #56]	; 0x38
   3a6b8:	ldr	r8, [sp, #40]	; 0x28
   3a6bc:	b	3a708 <__assert_fail@plt+0x28144>
   3a6c0:	ldr	r2, [sp, #296]	; 0x128
   3a6c4:	cmp	r3, r2
   3a6c8:	ldrcc	r2, [sp, #272]	; 0x110
   3a6cc:	ldrbcc	r3, [r2, r3]
   3a6d0:	movcs	r3, #0
   3a6d4:	ldrb	r3, [r5, r3]
   3a6d8:	cmp	r3, #0
   3a6dc:	bne	3a57c <__assert_fail@plt+0x27fb8>
   3a6e0:	add	r3, r6, r4
   3a6e4:	str	r3, [sp, #404]	; 0x194
   3a6e8:	cmp	r8, r3
   3a6ec:	movge	r2, #0
   3a6f0:	movlt	r2, #1
   3a6f4:	cmp	r7, r3
   3a6f8:	movle	r3, r2
   3a6fc:	orrgt	r3, r2, #1
   3a700:	cmp	r3, #0
   3a704:	bne	3a744 <__assert_fail@plt+0x28180>
   3a708:	ldr	r4, [sp, #404]	; 0x194
   3a70c:	ldr	r3, [sp, #292]	; 0x124
   3a710:	sub	r3, r4, r3
   3a714:	ldr	r2, [sp, #300]	; 0x12c
   3a718:	cmp	r3, r2
   3a71c:	bcc	3a6c0 <__assert_fail@plt+0x280fc>
   3a720:	ldr	r2, [sp, #464]	; 0x1d0
   3a724:	mov	r1, r4
   3a728:	add	r0, sp, #268	; 0x10c
   3a72c:	bl	376b0 <__assert_fail@plt+0x250ec>
   3a730:	cmp	r0, #0
   3a734:	bne	3b5e0 <__assert_fail@plt+0x2901c>
   3a738:	ldr	r3, [sp, #292]	; 0x124
   3a73c:	sub	r3, r4, r3
   3a740:	b	3a6c0 <__assert_fail@plt+0x280fc>
   3a744:	ldr	fp, [sp, #44]	; 0x2c
   3a748:	mov	r3, #1
   3a74c:	str	r3, [sp, #28]
   3a750:	b	3b678 <__assert_fail@plt+0x290b4>
   3a754:	ldr	r2, [sp, #356]	; 0x164
   3a758:	ldr	r3, [sp, #32]
   3a75c:	sub	r1, r3, #1
   3a760:	add	r0, sp, #268	; 0x10c
   3a764:	bl	3537c <__assert_fail@plt+0x22db8>
   3a768:	tst	r0, #1
   3a76c:	ldrne	r6, [r4, #40]	; 0x28
   3a770:	bne	3a5f4 <__assert_fail@plt+0x28030>
   3a774:	cmp	r0, #0
   3a778:	beq	3a5f4 <__assert_fail@plt+0x28030>
   3a77c:	and	r3, r0, #6
   3a780:	cmp	r3, #6
   3a784:	ldreq	r6, [r4, #48]	; 0x30
   3a788:	beq	3a5f4 <__assert_fail@plt+0x28030>
   3a78c:	tst	r0, #2
   3a790:	ldrne	r6, [r4, #44]	; 0x2c
   3a794:	bne	3a5f4 <__assert_fail@plt+0x28030>
   3a798:	tst	r0, #4
   3a79c:	beq	3a5f4 <__assert_fail@plt+0x28030>
   3a7a0:	mov	r3, r0
   3a7a4:	ldr	r2, [r6, #40]	; 0x28
   3a7a8:	mov	r1, r4
   3a7ac:	add	r0, sp, #104	; 0x68
   3a7b0:	bl	34108 <__assert_fail@plt+0x21b44>
   3a7b4:	subs	r6, r0, #0
   3a7b8:	bne	3a5f4 <__assert_fail@plt+0x28030>
   3a7bc:	ldr	fp, [sp, #44]	; 0x2c
   3a7c0:	b	3b670 <__assert_fail@plt+0x290ac>
   3a7c4:	add	r4, r6, #4
   3a7c8:	mov	r2, #0
   3a7cc:	mov	r1, r4
   3a7d0:	add	r0, sp, #268	; 0x10c
   3a7d4:	bl	35610 <__assert_fail@plt+0x2304c>
   3a7d8:	str	r0, [sp, #104]	; 0x68
   3a7dc:	cmp	r0, #0
   3a7e0:	bne	3ac74 <__assert_fail@plt+0x286b0>
   3a7e4:	ldrb	r3, [r6, #52]	; 0x34
   3a7e8:	tst	r3, #64	; 0x40
   3a7ec:	ldreq	fp, [sp, #68]	; 0x44
   3a7f0:	beq	3a618 <__assert_fail@plt+0x28054>
   3a7f4:	mov	r1, r4
   3a7f8:	add	r0, sp, #268	; 0x10c
   3a7fc:	bl	38e10 <__assert_fail@plt+0x2684c>
   3a800:	str	r0, [sp, #104]	; 0x68
   3a804:	cmp	r0, #0
   3a808:	bne	3ac7c <__assert_fail@plt+0x286b8>
   3a80c:	ldr	fp, [sp, #68]	; 0x44
   3a810:	b	3a618 <__assert_fail@plt+0x28054>
   3a814:	ldr	fp, [sp, #92]	; 0x5c
   3a818:	b	3a618 <__assert_fail@plt+0x28054>
   3a81c:	ldrsb	r3, [r6, #52]	; 0x34
   3a820:	cmp	r3, #0
   3a824:	blt	3a844 <__assert_fail@plt+0x28280>
   3a828:	ldr	r3, [sp, #16]
   3a82c:	cmp	r3, #0
   3a830:	beq	3a86c <__assert_fail@plt+0x282a8>
   3a834:	ldr	sl, [sp, #32]
   3a838:	mov	r3, #1
   3a83c:	str	r3, [sp, #12]
   3a840:	b	3a630 <__assert_fail@plt+0x2806c>
   3a844:	ldr	r2, [sp, #32]
   3a848:	mov	r1, r6
   3a84c:	add	r0, sp, #268	; 0x10c
   3a850:	bl	36374 <__assert_fail@plt+0x23db0>
   3a854:	cmp	r0, #0
   3a858:	bne	3a828 <__assert_fail@plt+0x28264>
   3a85c:	mvn	sl, #0
   3a860:	mov	r3, #0
   3a864:	str	r3, [sp, #12]
   3a868:	b	3a630 <__assert_fail@plt+0x2806c>
   3a86c:	ldr	sl, [sp, #32]
   3a870:	b	3b790 <__assert_fail@plt+0x291cc>
   3a874:	ldr	r2, [sp, #316]	; 0x13c
   3a878:	cmp	r3, r2
   3a87c:	bge	3abd8 <__assert_fail@plt+0x28614>
   3a880:	add	r1, r1, #2
   3a884:	add	r0, sp, #268	; 0x10c
   3a888:	bl	331a4 <__assert_fail@plt+0x20be0>
   3a88c:	str	r0, [sp, #104]	; 0x68
   3a890:	cmp	r0, #0
   3a894:	beq	3abe4 <__assert_fail@plt+0x28620>
   3a898:	ldr	fp, [sp, #44]	; 0x2c
   3a89c:	b	3b670 <__assert_fail@plt+0x290ac>
   3a8a0:	ldr	r2, [sp, #316]	; 0x13c
   3a8a4:	cmp	r3, r2
   3a8a8:	bge	3abe4 <__assert_fail@plt+0x28620>
   3a8ac:	b	3a880 <__assert_fail@plt+0x282bc>
   3a8b0:	ldr	r8, [sp, #352]	; 0x160
   3a8b4:	ldr	r3, [r6, #8]
   3a8b8:	cmp	r3, #0
   3a8bc:	ble	3b660 <__assert_fail@plt+0x2909c>
   3a8c0:	mov	r5, #0
   3a8c4:	b	3a924 <__assert_fail@plt+0x28360>
   3a8c8:	tst	r3, #8
   3a8cc:	beq	3a8d8 <__assert_fail@plt+0x28314>
   3a8d0:	tst	r0, #1
   3a8d4:	bne	3a914 <__assert_fail@plt+0x28350>
   3a8d8:	tst	r3, #32
   3a8dc:	beq	3a8e8 <__assert_fail@plt+0x28324>
   3a8e0:	tst	r0, #2
   3a8e4:	beq	3a914 <__assert_fail@plt+0x28350>
   3a8e8:	tst	r3, #128	; 0x80
   3a8ec:	beq	3a8f8 <__assert_fail@plt+0x28334>
   3a8f0:	tst	r0, #8
   3a8f4:	beq	3a914 <__assert_fail@plt+0x28350>
   3a8f8:	ldr	r3, [sp, #308]	; 0x134
   3a8fc:	add	r2, sp, #268	; 0x10c
   3a900:	mov	r1, r7
   3a904:	mov	r0, r8
   3a908:	bl	37dd8 <__assert_fail@plt+0x25814>
   3a90c:	cmp	r0, #0
   3a910:	bne	3a988 <__assert_fail@plt+0x283c4>
   3a914:	add	r5, r5, #1
   3a918:	ldr	r3, [r6, #8]
   3a91c:	cmp	r5, r3
   3a920:	bge	3b660 <__assert_fail@plt+0x2909c>
   3a924:	ldr	r3, [r6, #12]
   3a928:	ldr	r7, [r3, r5, lsl #2]
   3a92c:	ldr	r4, [r8]
   3a930:	add	r4, r4, r7, lsl #3
   3a934:	ldrb	r3, [r4, #6]
   3a938:	tst	r3, #16
   3a93c:	beq	3a914 <__assert_fail@plt+0x28350>
   3a940:	ldr	r3, [r4, #4]
   3a944:	ldr	r2, [pc, #2296]	; 3b244 <__assert_fail@plt+0x28c80>
   3a948:	tst	r3, r2
   3a94c:	beq	3a8f8 <__assert_fail@plt+0x28334>
   3a950:	ldr	r2, [sp, #356]	; 0x164
   3a954:	ldr	r1, [sp, #308]	; 0x134
   3a958:	add	r0, sp, #268	; 0x10c
   3a95c:	bl	3537c <__assert_fail@plt+0x22db8>
   3a960:	ldr	r3, [r4, #4]
   3a964:	lsl	r3, r3, #14
   3a968:	lsr	r3, r3, #22
   3a96c:	tst	r3, #4
   3a970:	beq	3a8c8 <__assert_fail@plt+0x28304>
   3a974:	tst	r0, #1
   3a978:	beq	3a914 <__assert_fail@plt+0x28350>
   3a97c:	tst	r3, #8
   3a980:	bne	3a914 <__assert_fail@plt+0x28350>
   3a984:	b	3a8d8 <__assert_fail@plt+0x28314>
   3a988:	ldr	r4, [sp, #308]	; 0x134
   3a98c:	add	r4, r0, r4
   3a990:	ldr	r3, [sp, #388]	; 0x184
   3a994:	cmp	r3, r0
   3a998:	movge	r0, r3
   3a99c:	str	r0, [sp, #388]	; 0x184
   3a9a0:	mov	r1, r4
   3a9a4:	add	r0, sp, #268	; 0x10c
   3a9a8:	bl	35718 <__assert_fail@plt+0x23154>
   3a9ac:	str	r0, [sp, #116]	; 0x74
   3a9b0:	cmp	r0, #0
   3a9b4:	bne	3aa44 <__assert_fail@plt+0x28480>
   3a9b8:	ldr	r3, [r8, #12]
   3a9bc:	ldr	r2, [r3, r7, lsl #2]
   3a9c0:	add	r2, r2, r2, lsl #1
   3a9c4:	ldr	r3, [r8, #24]
   3a9c8:	add	r2, r3, r2, lsl #2
   3a9cc:	ldr	r7, [sp, #368]	; 0x170
   3a9d0:	ldr	r3, [r7, r4, lsl #2]
   3a9d4:	cmp	r3, #0
   3a9d8:	beq	3aa5c <__assert_fail@plt+0x28498>
   3a9dc:	ldr	r1, [r3, #40]	; 0x28
   3a9e0:	add	r0, sp, #128	; 0x80
   3a9e4:	bl	32dcc <__assert_fail@plt+0x20808>
   3a9e8:	str	r0, [sp, #116]	; 0x74
   3a9ec:	cmp	r0, #0
   3a9f0:	bne	3aa44 <__assert_fail@plt+0x28480>
   3a9f4:	ldr	r2, [sp, #356]	; 0x164
   3a9f8:	sub	r1, r4, #1
   3a9fc:	add	r0, sp, #268	; 0x10c
   3aa00:	bl	3537c <__assert_fail@plt+0x22db8>
   3aa04:	ldr	r7, [sp, #368]	; 0x170
   3aa08:	mov	r3, r0
   3aa0c:	add	r2, sp, #128	; 0x80
   3aa10:	mov	r1, r8
   3aa14:	add	r0, sp, #116	; 0x74
   3aa18:	bl	34108 <__assert_fail@plt+0x21b44>
   3aa1c:	str	r0, [r7, r4, lsl #2]
   3aa20:	ldr	r0, [sp, #136]	; 0x88
   3aa24:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3aa28:	ldr	r3, [sp, #368]	; 0x170
   3aa2c:	ldr	r3, [r3, r4, lsl #2]
   3aa30:	cmp	r3, #0
   3aa34:	bne	3a914 <__assert_fail@plt+0x28350>
   3aa38:	ldr	r0, [sp, #116]	; 0x74
   3aa3c:	cmp	r0, #0
   3aa40:	beq	3a914 <__assert_fail@plt+0x28350>
   3aa44:	str	r0, [sp, #104]	; 0x68
   3aa48:	ldr	r3, [sp, #368]	; 0x170
   3aa4c:	cmp	r3, #0
   3aa50:	beq	3b76c <__assert_fail@plt+0x291a8>
   3aa54:	mov	r4, #0
   3aa58:	b	3ac20 <__assert_fail@plt+0x2865c>
   3aa5c:	ldm	r2, {r0, r1, r2}
   3aa60:	add	r3, sp, #128	; 0x80
   3aa64:	stm	r3, {r0, r1, r2}
   3aa68:	ldr	r2, [sp, #356]	; 0x164
   3aa6c:	sub	r1, r4, #1
   3aa70:	add	r0, sp, #268	; 0x10c
   3aa74:	bl	3537c <__assert_fail@plt+0x22db8>
   3aa78:	mov	r3, r0
   3aa7c:	add	r2, sp, #128	; 0x80
   3aa80:	mov	r1, r8
   3aa84:	add	r0, sp, #116	; 0x74
   3aa88:	bl	34108 <__assert_fail@plt+0x21b44>
   3aa8c:	str	r0, [r7, r4, lsl #2]
   3aa90:	b	3aa28 <__assert_fail@plt+0x28464>
   3aa94:	ldr	r5, [r6, #48]	; 0x30
   3aa98:	cmp	r5, #0
   3aa9c:	beq	3aac4 <__assert_fail@plt+0x28500>
   3aaa0:	ldr	r2, [sp, #356]	; 0x164
   3aaa4:	ldr	r1, [sp, #308]	; 0x134
   3aaa8:	sub	r1, r1, #1
   3aaac:	add	r0, sp, #268	; 0x10c
   3aab0:	bl	3537c <__assert_fail@plt+0x22db8>
   3aab4:	tst	r0, #1
   3aab8:	addne	r4, r4, #256	; 0x100
   3aabc:	ldr	r4, [r5, r4, lsl #2]
   3aac0:	b	3ac14 <__assert_fail@plt+0x28650>
   3aac4:	mov	r1, r6
   3aac8:	ldr	r0, [sp, #352]	; 0x160
   3aacc:	bl	358cc <__assert_fail@plt+0x23308>
   3aad0:	cmp	r0, #0
   3aad4:	bne	3ac04 <__assert_fail@plt+0x28640>
   3aad8:	mov	r3, #12
   3aadc:	str	r3, [sp, #104]	; 0x68
   3aae0:	b	3aa48 <__assert_fail@plt+0x28484>
   3aae4:	ldr	r3, [sp, #104]	; 0x68
   3aae8:	cmp	r3, #0
   3aaec:	bne	3b66c <__assert_fail@plt+0x290a8>
   3aaf0:	ldr	r3, [sp, #368]	; 0x170
   3aaf4:	cmp	r3, #0
   3aaf8:	beq	3b778 <__assert_fail@plt+0x291b4>
   3aafc:	ldr	r3, [sp, #16]
   3ab00:	eor	r3, r3, #1
   3ab04:	ldr	r2, [sp, #12]
   3ab08:	tst	r2, r3
   3ab0c:	bne	3b778 <__assert_fail@plt+0x291b4>
   3ab10:	ldr	r0, [sp, #372]	; 0x174
   3ab14:	ldr	r2, [sp, #308]	; 0x134
   3ab18:	ldr	r1, [sp, #368]	; 0x170
   3ab1c:	add	r1, r1, r2, lsl #2
   3ab20:	add	r2, r2, #1
   3ab24:	cmp	r0, r2
   3ab28:	blt	3b778 <__assert_fail@plt+0x291b4>
   3ab2c:	ldr	r3, [sp, #308]	; 0x134
   3ab30:	add	r3, r3, #1
   3ab34:	str	r3, [sp, #308]	; 0x134
   3ab38:	ldr	r3, [r1, #4]!
   3ab3c:	cmp	r3, #0
   3ab40:	beq	3ab20 <__assert_fail@plt+0x2855c>
   3ab44:	mov	r2, #0
   3ab48:	add	r1, sp, #268	; 0x10c
   3ab4c:	add	r0, sp, #104	; 0x68
   3ab50:	bl	39518 <__assert_fail@plt+0x26f54>
   3ab54:	mov	r4, r0
   3ab58:	ldr	r3, [sp, #104]	; 0x68
   3ab5c:	cmp	r3, #0
   3ab60:	cmpeq	r0, #0
   3ab64:	beq	3ab10 <__assert_fail@plt+0x2854c>
   3ab68:	cmp	r0, #0
   3ab6c:	bne	3ac3c <__assert_fail@plt+0x28678>
   3ab70:	b	3b778 <__assert_fail@plt+0x291b4>
   3ab74:	ldr	r3, [sp, #68]	; 0x44
   3ab78:	cmp	r6, r4
   3ab7c:	movne	fp, r3
   3ab80:	ldr	r3, [sp, #32]
   3ab84:	cmp	r6, r4
   3ab88:	moveq	r3, r9
   3ab8c:	str	r3, [sp, #32]
   3ab90:	b	3ac44 <__assert_fail@plt+0x28680>
   3ab94:	ldr	sl, [sp, #308]	; 0x134
   3ab98:	ldr	r3, [sp, #16]
   3ab9c:	cmp	r3, #0
   3aba0:	beq	3b790 <__assert_fail@plt+0x291cc>
   3aba4:	mov	r3, #1
   3aba8:	str	r3, [sp, #12]
   3abac:	mov	r3, #0
   3abb0:	str	r3, [sp, #20]
   3abb4:	mov	r6, r4
   3abb8:	ldr	r1, [sp, #308]	; 0x134
   3abbc:	ldr	r3, [sp, #324]	; 0x144
   3abc0:	cmp	r1, r3
   3abc4:	bge	3b778 <__assert_fail@plt+0x291b4>
   3abc8:	add	r9, r1, #1
   3abcc:	ldr	r3, [sp, #304]	; 0x130
   3abd0:	cmp	r9, r3
   3abd4:	bge	3a874 <__assert_fail@plt+0x282b0>
   3abd8:	ldr	r3, [sp, #296]	; 0x128
   3abdc:	cmp	r9, r3
   3abe0:	bge	3a8a0 <__assert_fail@plt+0x282dc>
   3abe4:	ldrb	r3, [r6, #52]	; 0x34
   3abe8:	tst	r3, #32
   3abec:	bne	3a8b0 <__assert_fail@plt+0x282ec>
   3abf0:	ldr	r3, [sp, #308]	; 0x134
   3abf4:	add	r2, r3, #1
   3abf8:	str	r2, [sp, #308]	; 0x134
   3abfc:	ldr	r2, [sp, #272]	; 0x110
   3ac00:	ldrb	r4, [r2, r3]
   3ac04:	ldr	r3, [r6, #44]	; 0x2c
   3ac08:	cmp	r3, #0
   3ac0c:	beq	3aa94 <__assert_fail@plt+0x284d0>
   3ac10:	ldr	r4, [r3, r4, lsl #2]
   3ac14:	ldr	r3, [sp, #368]	; 0x170
   3ac18:	cmp	r3, #0
   3ac1c:	beq	3ac34 <__assert_fail@plt+0x28670>
   3ac20:	mov	r2, r4
   3ac24:	add	r1, sp, #268	; 0x10c
   3ac28:	add	r0, sp, #104	; 0x68
   3ac2c:	bl	39518 <__assert_fail@plt+0x26f54>
   3ac30:	mov	r4, r0
   3ac34:	cmp	r4, #0
   3ac38:	beq	3aae4 <__assert_fail@plt+0x28520>
   3ac3c:	cmp	fp, #0
   3ac40:	bne	3ab74 <__assert_fail@plt+0x285b0>
   3ac44:	ldrb	r3, [r4, #52]	; 0x34
   3ac48:	tst	r3, #16
   3ac4c:	beq	3abb4 <__assert_fail@plt+0x285f0>
   3ac50:	tst	r3, #128	; 0x80
   3ac54:	beq	3ab94 <__assert_fail@plt+0x285d0>
   3ac58:	ldr	r2, [sp, #308]	; 0x134
   3ac5c:	mov	r1, r4
   3ac60:	add	r0, sp, #268	; 0x10c
   3ac64:	bl	36374 <__assert_fail@plt+0x23db0>
   3ac68:	cmp	r0, #0
   3ac6c:	beq	3abb4 <__assert_fail@plt+0x285f0>
   3ac70:	b	3ab94 <__assert_fail@plt+0x285d0>
   3ac74:	mov	sl, r0
   3ac78:	b	3b790 <__assert_fail@plt+0x291cc>
   3ac7c:	mov	sl, r0
   3ac80:	b	3b790 <__assert_fail@plt+0x291cc>
   3ac84:	ldr	r2, [sp, #44]	; 0x2c
   3ac88:	ldr	r3, [r2, #76]	; 0x4c
   3ac8c:	cmp	r3, #0
   3ac90:	bne	3b900 <__assert_fail@plt+0x2933c>
   3ac94:	mov	r9, fp
   3ac98:	mov	fp, r2
   3ac9c:	b	3ad4c <__assert_fail@plt+0x28788>
   3aca0:	mov	r3, fp
   3aca4:	ldr	fp, [sp, #12]
   3aca8:	mov	r2, r6
   3acac:	mov	r1, r5
   3acb0:	mov	r0, r9
   3acb4:	bl	38308 <__assert_fail@plt+0x25d44>
   3acb8:	mov	r8, r0
   3acbc:	mov	r0, r6
   3acc0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3acc4:	cmp	r8, #0
   3acc8:	beq	3ad20 <__assert_fail@plt+0x2875c>
   3accc:	mov	r6, #0
   3acd0:	b	3b920 <__assert_fail@plt+0x2935c>
   3acd4:	str	r5, [sp, #128]	; 0x80
   3acd8:	mov	r3, #0
   3acdc:	str	r3, [sp, #132]	; 0x84
   3ace0:	str	r7, [sp, #136]	; 0x88
   3ace4:	str	sl, [sp, #140]	; 0x8c
   3ace8:	str	r3, [sp, #144]	; 0x90
   3acec:	str	r3, [sp, #148]	; 0x94
   3acf0:	str	r3, [sp, #152]	; 0x98
   3acf4:	add	r1, sp, #128	; 0x80
   3acf8:	add	r0, sp, #268	; 0x10c
   3acfc:	bl	39d50 <__assert_fail@plt+0x2778c>
   3ad00:	mov	r8, r0
   3ad04:	ldr	r0, [sp, #152]	; 0x98
   3ad08:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3ad0c:	cmp	r8, #0
   3ad10:	bne	3b91c <__assert_fail@plt+0x29358>
   3ad14:	ldr	r3, [r5]
   3ad18:	cmp	r3, #0
   3ad1c:	beq	3b9c8 <__assert_fail@plt+0x29404>
   3ad20:	mov	r9, fp
   3ad24:	ldr	fp, [sp, #44]	; 0x2c
   3ad28:	ldr	r0, [sp, #368]	; 0x170
   3ad2c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3ad30:	str	r5, [sp, #368]	; 0x170
   3ad34:	str	r7, [sp, #364]	; 0x16c
   3ad38:	str	sl, [sp, #360]	; 0x168
   3ad3c:	mov	r0, #0
   3ad40:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3ad44:	mov	r0, #0
   3ad48:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3ad4c:	ldr	r3, [sp, #60]	; 0x3c
   3ad50:	cmp	r3, #0
   3ad54:	beq	3b678 <__assert_fail@plt+0x290b4>
   3ad58:	cmp	r3, #1
   3ad5c:	bls	3b6b0 <__assert_fail@plt+0x290ec>
   3ad60:	ldr	r2, [sp, #460]	; 0x1cc
   3ad64:	str	r2, [sp, #36]	; 0x24
   3ad68:	sub	r4, r3, #-536870911	; 0xe0000001
   3ad6c:	lsl	r4, r4, #3
   3ad70:	mov	r3, r2
   3ad74:	add	r1, r2, r4
   3ad78:	mvn	r2, #0
   3ad7c:	str	r2, [r3, #12]
   3ad80:	str	r2, [r3, #8]!
   3ad84:	cmp	r3, r1
   3ad88:	bne	3ad7c <__assert_fail@plt+0x287b8>
   3ad8c:	mov	r3, #0
   3ad90:	ldr	r2, [sp, #460]	; 0x1cc
   3ad94:	str	r3, [r2]
   3ad98:	ldr	r3, [sp, #360]	; 0x168
   3ad9c:	str	r3, [r2, #4]
   3ada0:	ldr	r3, [sp, #24]
   3ada4:	ldrb	r3, [r3, #28]
   3ada8:	eor	r3, r3, #16
   3adac:	ands	r3, r9, r3, lsr #4
   3adb0:	beq	3b0a8 <__assert_fail@plt+0x28ae4>
   3adb4:	ldrb	r3, [fp, #88]	; 0x58
   3adb8:	tst	r3, #1
   3adbc:	beq	3b6c8 <__assert_fail@plt+0x29104>
   3adc0:	ldr	r3, [fp, #76]	; 0x4c
   3adc4:	cmp	r3, #0
   3adc8:	ble	3b6c8 <__assert_fail@plt+0x29104>
   3adcc:	ldr	r3, [sp, #24]
   3add0:	ldr	r3, [r3]
   3add4:	str	r3, [sp, #24]
   3add8:	mov	r3, #0
   3addc:	str	r3, [sp, #116]	; 0x74
   3ade0:	mov	r2, #2
   3ade4:	str	r2, [sp, #120]	; 0x78
   3ade8:	str	r3, [sp, #124]	; 0x7c
   3adec:	str	r3, [sp, #128]	; 0x80
   3adf0:	mov	r3, #16
   3adf4:	str	r3, [sp, #132]	; 0x84
   3adf8:	add	r3, sp, #140	; 0x8c
   3adfc:	str	r3, [sp, #136]	; 0x88
   3ae00:	mov	r0, #48	; 0x30
   3ae04:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3ae08:	str	r0, [sp, #124]	; 0x7c
   3ae0c:	cmp	r0, #0
   3ae10:	addne	r9, sp, #116	; 0x74
   3ae14:	beq	3b760 <__assert_fail@plt+0x2919c>
   3ae18:	ldr	r3, [sp, #24]
   3ae1c:	ldr	sl, [r3, #72]	; 0x48
   3ae20:	mov	r3, #0
   3ae24:	str	r3, [sp, #104]	; 0x68
   3ae28:	str	r3, [sp, #108]	; 0x6c
   3ae2c:	str	r3, [sp, #112]	; 0x70
   3ae30:	ldr	r3, [sp, #128]	; 0x80
   3ae34:	ldr	r2, [sp, #60]	; 0x3c
   3ae38:	cmp	r2, r3
   3ae3c:	bhi	3aeb4 <__assert_fail@plt+0x288f0>
   3ae40:	ldr	r3, [sp, #60]	; 0x3c
   3ae44:	str	r3, [sp, #128]	; 0x80
   3ae48:	ldr	r3, [sp, #136]	; 0x88
   3ae4c:	str	r3, [sp, #16]
   3ae50:	add	r2, r4, #8
   3ae54:	str	r2, [sp, #32]
   3ae58:	ldr	r1, [sp, #460]	; 0x1cc
   3ae5c:	mov	r0, r3
   3ae60:	bl	12000 <memcpy@plt>
   3ae64:	ldr	r3, [sp, #460]	; 0x1cc
   3ae68:	ldr	r3, [r3]
   3ae6c:	add	r2, sp, #408	; 0x198
   3ae70:	str	r3, [r2, #-308]!	; 0xfffffecc
   3ae74:	str	r2, [sp, #40]	; 0x28
   3ae78:	ldr	r3, [sp, #60]	; 0x3c
   3ae7c:	mov	r2, r3
   3ae80:	lsl	r3, r3, #4
   3ae84:	str	r3, [sp, #44]	; 0x2c
   3ae88:	str	fp, [sp, #12]
   3ae8c:	mov	fp, r2
   3ae90:	ldr	r4, [sp, #460]	; 0x1cc
   3ae94:	b	3b2e8 <__assert_fail@plt+0x28d24>
   3ae98:	ldr	fp, [sp, #44]	; 0x2c
   3ae9c:	mov	r3, #1
   3aea0:	str	r3, [sp, #28]
   3aea4:	b	3b678 <__assert_fail@plt+0x290b4>
   3aea8:	mov	r9, fp
   3aeac:	ldr	fp, [sp, #44]	; 0x2c
   3aeb0:	b	3ad4c <__assert_fail@plt+0x28788>
   3aeb4:	mov	r3, #8
   3aeb8:	add	r2, sp, #140	; 0x8c
   3aebc:	ldr	r1, [sp, #60]	; 0x3c
   3aec0:	add	r0, sp, #128	; 0x80
   3aec4:	bl	3fa28 <__assert_fail@plt+0x2d464>
   3aec8:	cmp	r0, #0
   3aecc:	bne	3ae48 <__assert_fail@plt+0x28884>
   3aed0:	ldr	r0, [sp, #136]	; 0x88
   3aed4:	add	r3, sp, #140	; 0x8c
   3aed8:	cmp	r0, r3
   3aedc:	beq	3aee4 <__assert_fail@plt+0x28920>
   3aee0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3aee4:	add	r3, sp, #140	; 0x8c
   3aee8:	str	r3, [sp, #136]	; 0x88
   3aeec:	mov	r3, #0
   3aef0:	str	r3, [sp, #128]	; 0x80
   3aef4:	mvn	r3, #0
   3aef8:	str	r3, [sp, #132]	; 0x84
   3aefc:	add	r0, sp, #128	; 0x80
   3af00:	bl	34850 <__assert_fail@plt+0x2228c>
   3af04:	mov	r0, r9
   3af08:	bl	34884 <__assert_fail@plt+0x222c0>
   3af0c:	mov	r3, #12
   3af10:	str	r3, [sp, #28]
   3af14:	b	3b678 <__assert_fail@plt+0x290b4>
   3af18:	ldr	r3, [r3, sl, lsl #3]
   3af1c:	add	r3, r3, #1
   3af20:	cmp	fp, r3
   3af24:	addgt	r1, r4, r3, lsl #3
   3af28:	strgt	r2, [r4, r3, lsl #3]
   3af2c:	mvngt	r3, #0
   3af30:	strgt	r3, [r1, #4]
   3af34:	ldr	r2, [r4, #4]
   3af38:	ldr	r3, [sp, #100]	; 0x64
   3af3c:	cmp	r2, r3
   3af40:	beq	3aff8 <__assert_fail@plt+0x28a34>
   3af44:	cmp	r9, #0
   3af48:	beq	3af60 <__assert_fail@plt+0x2899c>
   3af4c:	mov	r1, sl
   3af50:	add	r0, sp, #104	; 0x68
   3af54:	bl	31514 <__assert_fail@plt+0x1ef50>
   3af58:	cmp	r0, #0
   3af5c:	bne	3b018 <__assert_fail@plt+0x28a54>
   3af60:	ldr	r5, [sp, #352]	; 0x160
   3af64:	mov	r7, sl
   3af68:	lsl	r8, sl, #3
   3af6c:	ldr	r3, [r5]
   3af70:	add	r1, r3, r8
   3af74:	ldrb	r2, [r1, #4]
   3af78:	tst	r2, #8
   3af7c:	beq	3b248 <__assert_fail@plt+0x28c84>
   3af80:	ldr	r3, [sp, #368]	; 0x170
   3af84:	ldr	r2, [sp, #100]	; 0x64
   3af88:	ldr	r3, [r3, r2, lsl #2]
   3af8c:	add	r3, r3, #4
   3af90:	str	r3, [sp, #20]
   3af94:	add	r3, sl, sl, lsl #1
   3af98:	ldr	r5, [r5, #20]
   3af9c:	add	r5, r5, r3, lsl #2
   3afa0:	mov	r1, sl
   3afa4:	add	r0, sp, #104	; 0x68
   3afa8:	bl	31514 <__assert_fail@plt+0x1ef50>
   3afac:	cmp	r0, #0
   3afb0:	beq	3b0dc <__assert_fail@plt+0x28b18>
   3afb4:	ldr	r8, [r5, #4]
   3afb8:	cmp	r8, #0
   3afbc:	mvnle	sl, #0
   3afc0:	ble	3b704 <__assert_fail@plt+0x29140>
   3afc4:	ldr	r7, [r5, #8]
   3afc8:	sub	r7, r7, #4
   3afcc:	mvn	sl, #0
   3afd0:	mov	r5, #0
   3afd4:	b	3b218 <__assert_fail@plt+0x28c54>
   3afd8:	str	r2, [r1, #4]
   3afdc:	ldr	r2, [sp, #32]
   3afe0:	mov	r1, r4
   3afe4:	ldr	r0, [sp, #16]
   3afe8:	bl	12000 <memcpy@plt>
   3afec:	b	3af34 <__assert_fail@plt+0x28970>
   3aff0:	str	r2, [r1, #4]
   3aff4:	b	3af34 <__assert_fail@plt+0x28970>
   3aff8:	ldr	r3, [sp, #364]	; 0x16c
   3affc:	cmp	sl, r3
   3b000:	bne	3af44 <__assert_fail@plt+0x28980>
   3b004:	cmp	r9, #0
   3b008:	beq	3b0d4 <__assert_fail@plt+0x28b10>
   3b00c:	ldr	r2, [sp, #36]	; 0x24
   3b010:	mov	r3, #0
   3b014:	b	3b034 <__assert_fail@plt+0x28a70>
   3b018:	ldr	r2, [sp, #36]	; 0x24
   3b01c:	mov	r3, #0
   3b020:	b	3b034 <__assert_fail@plt+0x28a70>
   3b024:	add	r3, r3, #1
   3b028:	add	r2, r2, #8
   3b02c:	cmp	fp, r3
   3b030:	beq	3b080 <__assert_fail@plt+0x28abc>
   3b034:	ldr	r1, [r4, r3, lsl #3]
   3b038:	cmp	r1, #0
   3b03c:	blt	3b024 <__assert_fail@plt+0x28a60>
   3b040:	ldr	r1, [r2, #4]
   3b044:	cmn	r1, #1
   3b048:	bne	3b024 <__assert_fail@plt+0x28a60>
   3b04c:	add	r3, sp, #104	; 0x68
   3b050:	str	r3, [sp, #4]
   3b054:	ldr	r3, [sp, #16]
   3b058:	str	r3, [sp]
   3b05c:	mov	r3, r4
   3b060:	mov	r2, fp
   3b064:	ldr	r1, [sp, #40]	; 0x28
   3b068:	mov	r0, r9
   3b06c:	bl	3644c <__assert_fail@plt+0x23e88>
   3b070:	subs	sl, r0, #0
   3b074:	bge	3af60 <__assert_fail@plt+0x2899c>
   3b078:	ldr	fp, [sp, #12]
   3b07c:	b	3b084 <__assert_fail@plt+0x28ac0>
   3b080:	ldr	fp, [sp, #12]
   3b084:	ldr	r0, [sp, #112]	; 0x70
   3b088:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b08c:	add	r0, sp, #128	; 0x80
   3b090:	bl	34850 <__assert_fail@plt+0x2228c>
   3b094:	mov	r0, r9
   3b098:	bl	34884 <__assert_fail@plt+0x222c0>
   3b09c:	cmp	r0, #0
   3b0a0:	strne	r0, [sp, #28]
   3b0a4:	bne	3b678 <__assert_fail@plt+0x290b4>
   3b0a8:	ldrb	r4, [sp, #344]	; 0x158
   3b0ac:	ldr	r7, [sp, #296]	; 0x128
   3b0b0:	ldr	r8, [sp, #280]	; 0x118
   3b0b4:	ldr	r9, [sp, #300]	; 0x12c
   3b0b8:	ldr	ip, [sp, #404]	; 0x194
   3b0bc:	ldr	r1, [sp, #460]	; 0x1cc
   3b0c0:	mov	r3, r1
   3b0c4:	add	r2, r1, #4
   3b0c8:	ldr	r0, [sp, #60]	; 0x3c
   3b0cc:	add	lr, r1, r0, lsl #3
   3b0d0:	b	3b4d8 <__assert_fail@plt+0x28f14>
   3b0d4:	ldr	fp, [sp, #12]
   3b0d8:	b	3b084 <__assert_fail@plt+0x28ac0>
   3b0dc:	mov	r1, sl
   3b0e0:	add	r0, sp, #104	; 0x68
   3b0e4:	bl	34a64 <__assert_fail@plt+0x224a0>
   3b0e8:	cmp	r0, #0
   3b0ec:	bne	3afb4 <__assert_fail@plt+0x289f0>
   3b0f0:	ldr	fp, [sp, #12]
   3b0f4:	ldr	r0, [sp, #112]	; 0x70
   3b0f8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b0fc:	add	r0, sp, #128	; 0x80
   3b100:	bl	34850 <__assert_fail@plt+0x2228c>
   3b104:	mov	r0, r9
   3b108:	bl	34884 <__assert_fail@plt+0x222c0>
   3b10c:	mov	r3, #12
   3b110:	str	r3, [sp, #28]
   3b114:	b	3b678 <__assert_fail@plt+0x290b4>
   3b118:	mov	r1, sl
   3b11c:	add	r0, sp, #104	; 0x68
   3b120:	bl	31514 <__assert_fail@plt+0x1ef50>
   3b124:	cmp	r0, #0
   3b128:	bne	3b478 <__assert_fail@plt+0x28eb4>
   3b12c:	cmp	r9, #0
   3b130:	beq	3b2e0 <__assert_fail@plt+0x28d1c>
   3b134:	ldr	r7, [sp, #100]	; 0x64
   3b138:	ldr	r5, [r9]
   3b13c:	add	r1, r5, #1
   3b140:	str	r1, [r9]
   3b144:	ldr	r3, [r9, #4]
   3b148:	cmp	r1, r3
   3b14c:	bne	3b178 <__assert_fail@plt+0x28bb4>
   3b150:	add	r1, r1, r1, lsl #1
   3b154:	lsl	r1, r1, #4
   3b158:	ldr	r0, [r9, #8]
   3b15c:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3b160:	cmp	r0, #0
   3b164:	beq	3b700 <__assert_fail@plt+0x2913c>
   3b168:	ldr	r3, [r9, #4]
   3b16c:	lsl	r3, r3, #1
   3b170:	str	r3, [r9, #4]
   3b174:	str	r0, [r9, #8]
   3b178:	add	r5, r5, r5, lsl #1
   3b17c:	lsl	r8, r5, #3
   3b180:	ldr	r3, [r9, #8]
   3b184:	str	r7, [r3, r5, lsl #3]
   3b188:	ldr	r3, [r9, #8]
   3b18c:	add	r3, r3, r8
   3b190:	str	r6, [r3, #4]
   3b194:	ldr	r5, [r9, #8]
   3b198:	add	r5, r5, r8
   3b19c:	ldr	r0, [sp, #44]	; 0x2c
   3b1a0:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3b1a4:	str	r0, [r5, #8]
   3b1a8:	ldr	r3, [r9, #8]
   3b1ac:	add	r3, r3, r8
   3b1b0:	ldr	r0, [r3, #8]
   3b1b4:	cmp	r0, #0
   3b1b8:	beq	3b700 <__assert_fail@plt+0x2913c>
   3b1bc:	ldr	r5, [sp, #32]
   3b1c0:	mov	r2, r5
   3b1c4:	mov	r1, r4
   3b1c8:	bl	12000 <memcpy@plt>
   3b1cc:	ldr	r3, [r9, #8]
   3b1d0:	add	r3, r3, r8
   3b1d4:	ldr	r0, [r3, #8]
   3b1d8:	mov	r2, r5
   3b1dc:	ldr	r1, [sp, #16]
   3b1e0:	add	r0, r0, r5
   3b1e4:	bl	12000 <memcpy@plt>
   3b1e8:	ldr	r0, [r9, #8]
   3b1ec:	add	r0, r0, r8
   3b1f0:	add	r1, sp, #104	; 0x68
   3b1f4:	add	r0, r0, #12
   3b1f8:	bl	32d50 <__assert_fail@plt+0x2078c>
   3b1fc:	cmp	r0, #0
   3b200:	beq	3b2e0 <__assert_fail@plt+0x28d1c>
   3b204:	ldr	fp, [sp, #12]
   3b208:	b	3b0f4 <__assert_fail@plt+0x28b30>
   3b20c:	add	r5, r5, #1
   3b210:	cmp	r8, r5
   3b214:	beq	3b2e0 <__assert_fail@plt+0x28d1c>
   3b218:	ldr	r6, [r7, #4]!
   3b21c:	mov	r1, r6
   3b220:	ldr	r0, [sp, #20]
   3b224:	bl	31514 <__assert_fail@plt+0x1ef50>
   3b228:	cmp	r0, #0
   3b22c:	beq	3b20c <__assert_fail@plt+0x28c48>
   3b230:	cmn	sl, #1
   3b234:	bne	3b118 <__assert_fail@plt+0x28b54>
   3b238:	mov	sl, r6
   3b23c:	b	3b20c <__assert_fail@plt+0x28c48>
   3b240:	beq	feae5cf0 <stdout@@GLIBC_2.4+0xfea8c79c>
   3b244:	andeq	pc, r3, r0, lsl #30
   3b248:	ldrb	r1, [r1, #6]
   3b24c:	tst	r1, #16
   3b250:	bne	3b36c <__assert_fail@plt+0x28da8>
   3b254:	cmp	r2, #4
   3b258:	bne	3b3e8 <__assert_fail@plt+0x28e24>
   3b25c:	ldr	r3, [r3, r8]
   3b260:	add	r3, r3, #1
   3b264:	cmp	fp, r3
   3b268:	ble	3b394 <__assert_fail@plt+0x28dd0>
   3b26c:	add	r2, r4, r3, lsl #3
   3b270:	ldr	r6, [r2, #4]
   3b274:	ldr	r2, [r4, r3, lsl #3]
   3b278:	sub	r6, r6, r2
   3b27c:	cmp	r9, #0
   3b280:	bne	3b41c <__assert_fail@plt+0x28e58>
   3b284:	cmp	r6, #0
   3b288:	beq	3b3a0 <__assert_fail@plt+0x28ddc>
   3b28c:	ldr	r3, [r5, #12]
   3b290:	ldr	sl, [r3, sl, lsl #2]
   3b294:	ldr	r3, [sp, #100]	; 0x64
   3b298:	add	r6, r6, r3
   3b29c:	str	r6, [sp, #100]	; 0x64
   3b2a0:	cmp	r9, #0
   3b2a4:	beq	3b2d8 <__assert_fail@plt+0x28d14>
   3b2a8:	ldr	r3, [sp, #360]	; 0x168
   3b2ac:	cmp	r6, r3
   3b2b0:	bgt	3b9f8 <__assert_fail@plt+0x29434>
   3b2b4:	ldr	r3, [sp, #368]	; 0x170
   3b2b8:	ldr	r0, [r3, r6, lsl #2]
   3b2bc:	cmp	r0, #0
   3b2c0:	beq	3ba00 <__assert_fail@plt+0x2943c>
   3b2c4:	mov	r1, sl
   3b2c8:	add	r0, r0, #4
   3b2cc:	bl	31514 <__assert_fail@plt+0x1ef50>
   3b2d0:	cmp	r0, #0
   3b2d4:	beq	3ba08 <__assert_fail@plt+0x29444>
   3b2d8:	mov	r3, #0
   3b2dc:	str	r3, [sp, #108]	; 0x6c
   3b2e0:	cmp	sl, #0
   3b2e4:	blt	3b704 <__assert_fail@plt+0x29140>
   3b2e8:	ldr	r2, [sp, #100]	; 0x64
   3b2ec:	ldr	r3, [r4, #4]
   3b2f0:	cmp	r2, r3
   3b2f4:	bgt	3b490 <__assert_fail@plt+0x28ecc>
   3b2f8:	lsl	r1, sl, #3
   3b2fc:	ldr	r3, [sp, #24]
   3b300:	ldr	r3, [r3]
   3b304:	add	r0, r3, r1
   3b308:	ldrb	ip, [r0, #4]
   3b30c:	cmp	ip, #8
   3b310:	beq	3af18 <__assert_fail@plt+0x28954>
   3b314:	cmp	ip, #9
   3b318:	bne	3af34 <__assert_fail@plt+0x28970>
   3b31c:	ldr	r3, [r3, r1]
   3b320:	add	r3, r3, #1
   3b324:	cmp	fp, r3
   3b328:	ble	3af34 <__assert_fail@plt+0x28970>
   3b32c:	add	r1, r4, r3, lsl #3
   3b330:	ldr	ip, [r4, r3, lsl #3]
   3b334:	cmp	r2, ip
   3b338:	bgt	3afd8 <__assert_fail@plt+0x28a14>
   3b33c:	ldrb	r0, [r0, #6]
   3b340:	tst	r0, #8
   3b344:	beq	3aff0 <__assert_fail@plt+0x28a2c>
   3b348:	ldr	r0, [sp, #16]
   3b34c:	ldr	r3, [r0, r3, lsl #3]
   3b350:	cmn	r3, #1
   3b354:	beq	3aff0 <__assert_fail@plt+0x28a2c>
   3b358:	ldr	r2, [sp, #32]
   3b35c:	mov	r1, r0
   3b360:	mov	r0, r4
   3b364:	bl	12000 <memcpy@plt>
   3b368:	b	3af34 <__assert_fail@plt+0x28970>
   3b36c:	ldr	r3, [sp, #100]	; 0x64
   3b370:	add	r2, sp, #268	; 0x10c
   3b374:	mov	r1, sl
   3b378:	mov	r0, r5
   3b37c:	bl	37dd8 <__assert_fail@plt+0x25814>
   3b380:	subs	r6, r0, #0
   3b384:	beq	3b3e8 <__assert_fail@plt+0x28e24>
   3b388:	ldr	r3, [r5, #12]
   3b38c:	ldr	sl, [r3, r7, lsl #2]
   3b390:	b	3b294 <__assert_fail@plt+0x28cd0>
   3b394:	cmp	r9, #0
   3b398:	mvnne	sl, #0
   3b39c:	bne	3b2e0 <__assert_fail@plt+0x28d1c>
   3b3a0:	mov	r1, sl
   3b3a4:	add	r0, sp, #104	; 0x68
   3b3a8:	bl	34a64 <__assert_fail@plt+0x224a0>
   3b3ac:	cmp	r0, #0
   3b3b0:	beq	3b488 <__assert_fail@plt+0x28ec4>
   3b3b4:	ldr	r3, [r5, #20]
   3b3b8:	add	r2, r7, r7, lsl #1
   3b3bc:	add	r3, r3, r2, lsl #2
   3b3c0:	ldr	r3, [r3, #8]
   3b3c4:	ldr	sl, [r3]
   3b3c8:	ldr	r3, [sp, #368]	; 0x170
   3b3cc:	ldr	r2, [sp, #100]	; 0x64
   3b3d0:	ldr	r0, [r3, r2, lsl #2]
   3b3d4:	mov	r1, sl
   3b3d8:	add	r0, r0, #4
   3b3dc:	bl	31514 <__assert_fail@plt+0x1ef50>
   3b3e0:	cmp	r0, #0
   3b3e4:	bne	3b2e0 <__assert_fail@plt+0x28d1c>
   3b3e8:	ldr	r1, [r5]
   3b3ec:	ldr	r2, [sp, #100]	; 0x64
   3b3f0:	add	r1, r1, r8
   3b3f4:	add	r0, sp, #268	; 0x10c
   3b3f8:	bl	35490 <__assert_fail@plt+0x22ecc>
   3b3fc:	cmp	r0, #0
   3b400:	mvneq	sl, #0
   3b404:	beq	3b704 <__assert_fail@plt+0x29140>
   3b408:	ldr	r3, [r5, #12]
   3b40c:	ldr	sl, [r3, r7, lsl #2]
   3b410:	ldr	r6, [sp, #100]	; 0x64
   3b414:	add	r6, r6, #1
   3b418:	b	3b29c <__assert_fail@plt+0x28cd8>
   3b41c:	add	r2, r4, r3, lsl #3
   3b420:	ldr	r0, [r4, r3, lsl #3]
   3b424:	cmn	r0, #1
   3b428:	beq	3b9e0 <__assert_fail@plt+0x2941c>
   3b42c:	ldr	r3, [r2, #4]
   3b430:	cmn	r3, #1
   3b434:	beq	3b9e8 <__assert_fail@plt+0x29424>
   3b438:	cmp	r6, #0
   3b43c:	beq	3b3a0 <__assert_fail@plt+0x28ddc>
   3b440:	ldr	ip, [sp, #272]	; 0x110
   3b444:	ldr	r1, [sp, #100]	; 0x64
   3b448:	ldr	r3, [sp, #296]	; 0x128
   3b44c:	sub	r3, r3, r1
   3b450:	cmp	r6, r3
   3b454:	bgt	3b9f0 <__assert_fail@plt+0x2942c>
   3b458:	mov	r2, r6
   3b45c:	add	r1, ip, r1
   3b460:	add	r0, ip, r0
   3b464:	bl	12060 <memcmp@plt>
   3b468:	cmp	r0, #0
   3b46c:	beq	3b388 <__assert_fail@plt+0x28dc4>
   3b470:	mvn	sl, #0
   3b474:	b	3b704 <__assert_fail@plt+0x29140>
   3b478:	mov	sl, r6
   3b47c:	b	3b2e0 <__assert_fail@plt+0x28d1c>
   3b480:	ldr	fp, [sp, #12]
   3b484:	b	3b0f4 <__assert_fail@plt+0x28b30>
   3b488:	ldr	fp, [sp, #12]
   3b48c:	b	3b0f4 <__assert_fail@plt+0x28b30>
   3b490:	ldr	fp, [sp, #12]
   3b494:	ldr	r0, [sp, #112]	; 0x70
   3b498:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b49c:	add	r0, sp, #128	; 0x80
   3b4a0:	bl	34850 <__assert_fail@plt+0x2228c>
   3b4a4:	mov	r0, r9
   3b4a8:	bl	34884 <__assert_fail@plt+0x222c0>
   3b4ac:	b	3b09c <__assert_fail@plt+0x28ad8>
   3b4b0:	ldr	r5, [r0, #-4]
   3b4b4:	add	r5, r5, ip
   3b4b8:	str	r5, [r0, #-4]
   3b4bc:	ldr	r0, [r3, #4]
   3b4c0:	add	r0, r0, ip
   3b4c4:	str	r0, [r3, #4]
   3b4c8:	add	r3, r3, #8
   3b4cc:	add	r2, r2, #8
   3b4d0:	cmp	lr, r3
   3b4d4:	beq	3b518 <__assert_fail@plt+0x28f54>
   3b4d8:	mov	r0, r2
   3b4dc:	ldr	r5, [r2, #-4]
   3b4e0:	cmn	r5, #1
   3b4e4:	beq	3b4c8 <__assert_fail@plt+0x28f04>
   3b4e8:	cmp	r4, #0
   3b4ec:	beq	3b4b0 <__assert_fail@plt+0x28eec>
   3b4f0:	cmp	r5, r7
   3b4f4:	ldrne	r5, [r8, r5, lsl #2]
   3b4f8:	moveq	r5, r9
   3b4fc:	str	r5, [r2, #-4]
   3b500:	ldr	r5, [r3, #4]
   3b504:	cmp	r7, r5
   3b508:	ldrne	r5, [r8, r5, lsl #2]
   3b50c:	moveq	r5, r9
   3b510:	str	r5, [r3, #4]
   3b514:	b	3b4b0 <__assert_fail@plt+0x28eec>
   3b518:	ldr	r2, [sp, #64]	; 0x40
   3b51c:	cmp	r2, #0
   3b520:	ble	3b548 <__assert_fail@plt+0x28f84>
   3b524:	ldr	r2, [sp, #460]	; 0x1cc
   3b528:	ldr	r0, [sp, #456]	; 0x1c8
   3b52c:	add	r0, r2, r0, lsl #3
   3b530:	mvn	r2, #0
   3b534:	str	r2, [r3]
   3b538:	str	r2, [r3, #4]
   3b53c:	add	r3, r3, #8
   3b540:	cmp	r0, r3
   3b544:	bne	3b534 <__assert_fail@plt+0x28f70>
   3b548:	ldr	r3, [fp, #132]	; 0x84
   3b54c:	cmp	r3, #0
   3b550:	beq	3b678 <__assert_fail@plt+0x290b4>
   3b554:	ldr	r3, [sp, #60]	; 0x3c
   3b558:	sub	r0, r3, #1
   3b55c:	mov	r3, #0
   3b560:	ldr	ip, [sp, #460]	; 0x1cc
   3b564:	b	3b590 <__assert_fail@plt+0x28fcc>
   3b568:	add	r2, r2, #1
   3b56c:	ldr	r2, [ip, r2, lsl #3]
   3b570:	str	r2, [r1, #8]
   3b574:	ldr	r2, [fp, #132]	; 0x84
   3b578:	ldr	r2, [r2, r3, lsl #2]
   3b57c:	add	r2, ip, r2, lsl #3
   3b580:	ldr	r2, [r2, #12]
   3b584:	str	r2, [r1, #12]
   3b588:	add	r3, r3, #1
   3b58c:	add	r1, r1, #8
   3b590:	cmp	r0, r3
   3b594:	beq	3b678 <__assert_fail@plt+0x290b4>
   3b598:	ldr	r2, [fp, #132]	; 0x84
   3b59c:	ldr	r2, [r2, r3, lsl #2]
   3b5a0:	cmp	r3, r2
   3b5a4:	bne	3b568 <__assert_fail@plt+0x28fa4>
   3b5a8:	b	3b588 <__assert_fail@plt+0x28fc4>
   3b5ac:	mov	r3, #12
   3b5b0:	str	r3, [sp, #28]
   3b5b4:	b	3b678 <__assert_fail@plt+0x290b4>
   3b5b8:	mov	r3, #12
   3b5bc:	str	r3, [sp, #28]
   3b5c0:	b	3b678 <__assert_fail@plt+0x290b4>
   3b5c4:	mov	r3, #1
   3b5c8:	str	r3, [sp, #28]
   3b5cc:	b	3b678 <__assert_fail@plt+0x290b4>
   3b5d0:	ldr	fp, [sp, #44]	; 0x2c
   3b5d4:	mov	r3, #12
   3b5d8:	str	r3, [sp, #28]
   3b5dc:	b	3b678 <__assert_fail@plt+0x290b4>
   3b5e0:	ldr	fp, [sp, #44]	; 0x2c
   3b5e4:	str	r0, [sp, #28]
   3b5e8:	b	3b678 <__assert_fail@plt+0x290b4>
   3b5ec:	ldr	fp, [sp, #44]	; 0x2c
   3b5f0:	b	3b678 <__assert_fail@plt+0x290b4>
   3b5f4:	add	r0, sp, #268	; 0x10c
   3b5f8:	bl	347a4 <__assert_fail@plt+0x221e0>
   3b5fc:	ldr	r0, [sp, #400]	; 0x190
   3b600:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b604:	ldr	r0, [sp, #384]	; 0x180
   3b608:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b60c:	b	3b68c <__assert_fail@plt+0x290c8>
   3b610:	mov	r3, #1
   3b614:	str	r3, [sp, #28]
   3b618:	b	3b694 <__assert_fail@plt+0x290d0>
   3b61c:	mov	r3, #1
   3b620:	str	r3, [sp, #28]
   3b624:	b	3b694 <__assert_fail@plt+0x290d0>
   3b628:	mov	r3, #1
   3b62c:	str	r3, [sp, #28]
   3b630:	b	3b694 <__assert_fail@plt+0x290d0>
   3b634:	ldr	r3, [sp, #36]	; 0x24
   3b638:	str	r3, [sp, #272]	; 0x110
   3b63c:	ldr	r3, [fp, #92]	; 0x5c
   3b640:	ldr	r2, [sp, #48]	; 0x30
   3b644:	cmp	r3, #1
   3b648:	movgt	r2, #0
   3b64c:	mov	r3, r2
   3b650:	b	3a248 <__assert_fail@plt+0x27c84>
   3b654:	mov	r3, #12
   3b658:	str	r3, [sp, #28]
   3b65c:	b	3b678 <__assert_fail@plt+0x290b4>
   3b660:	mov	r3, #0
   3b664:	str	r3, [sp, #104]	; 0x68
   3b668:	b	3abf0 <__assert_fail@plt+0x2862c>
   3b66c:	ldr	fp, [sp, #44]	; 0x2c
   3b670:	mov	r3, #12
   3b674:	str	r3, [sp, #28]
   3b678:	ldr	r0, [sp, #368]	; 0x170
   3b67c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b680:	ldr	r3, [fp, #76]	; 0x4c
   3b684:	cmp	r3, #0
   3b688:	bne	3b5f4 <__assert_fail@plt+0x29030>
   3b68c:	add	r0, sp, #268	; 0x10c
   3b690:	bl	3443c <__assert_fail@plt+0x21e78>
   3b694:	ldr	r0, [sp, #28]
   3b698:	add	sp, sp, #412	; 0x19c
   3b69c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6a0:	ldr	fp, [sp, #44]	; 0x2c
   3b6a4:	mov	r3, #12
   3b6a8:	str	r3, [sp, #28]
   3b6ac:	b	3b678 <__assert_fail@plt+0x290b4>
   3b6b0:	mov	r3, #0
   3b6b4:	ldr	r2, [sp, #460]	; 0x1cc
   3b6b8:	str	r3, [r2]
   3b6bc:	ldr	r3, [sp, #360]	; 0x168
   3b6c0:	str	r3, [r2, #4]
   3b6c4:	b	3b0a8 <__assert_fail@plt+0x28ae4>
   3b6c8:	ldr	r3, [sp, #24]
   3b6cc:	ldr	r3, [r3]
   3b6d0:	str	r3, [sp, #24]
   3b6d4:	mov	r9, #0
   3b6d8:	str	r9, [sp, #116]	; 0x74
   3b6dc:	mov	r3, #2
   3b6e0:	str	r3, [sp, #120]	; 0x78
   3b6e4:	str	r9, [sp, #124]	; 0x7c
   3b6e8:	str	r9, [sp, #128]	; 0x80
   3b6ec:	mov	r3, #16
   3b6f0:	str	r3, [sp, #132]	; 0x84
   3b6f4:	add	r3, sp, #140	; 0x8c
   3b6f8:	str	r3, [sp, #136]	; 0x88
   3b6fc:	b	3ae18 <__assert_fail@plt+0x28854>
   3b700:	mvn	sl, #1
   3b704:	cmn	sl, #2
   3b708:	beq	3b480 <__assert_fail@plt+0x28ebc>
   3b70c:	add	r3, sp, #104	; 0x68
   3b710:	str	r3, [sp, #4]
   3b714:	ldr	r3, [sp, #16]
   3b718:	str	r3, [sp]
   3b71c:	mov	r3, r4
   3b720:	mov	r2, fp
   3b724:	ldr	r1, [sp, #40]	; 0x28
   3b728:	mov	r0, r9
   3b72c:	bl	3644c <__assert_fail@plt+0x23e88>
   3b730:	subs	sl, r0, #0
   3b734:	bge	3b2e8 <__assert_fail@plt+0x28d24>
   3b738:	ldr	fp, [sp, #12]
   3b73c:	ldr	r0, [sp, #112]	; 0x70
   3b740:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b744:	add	r0, sp, #128	; 0x80
   3b748:	bl	34850 <__assert_fail@plt+0x2228c>
   3b74c:	mov	r0, r9
   3b750:	bl	34884 <__assert_fail@plt+0x222c0>
   3b754:	mov	r3, #1
   3b758:	str	r3, [sp, #28]
   3b75c:	b	3b678 <__assert_fail@plt+0x290b4>
   3b760:	mov	r3, #12
   3b764:	str	r3, [sp, #28]
   3b768:	b	3b678 <__assert_fail@plt+0x290b4>
   3b76c:	ldr	r3, [sp, #104]	; 0x68
   3b770:	cmp	r3, #0
   3b774:	bne	3b8f8 <__assert_fail@plt+0x29334>
   3b778:	ldr	r2, [sp, #20]
   3b77c:	cmp	r2, #0
   3b780:	ldrne	r3, [r2]
   3b784:	ldrne	r1, [sp, #32]
   3b788:	addne	r3, r3, r1
   3b78c:	strne	r3, [r2]
   3b790:	cmn	sl, #1
   3b794:	beq	3b938 <__assert_fail@plt+0x29374>
   3b798:	cmn	sl, #2
   3b79c:	beq	3b5d0 <__assert_fail@plt+0x2900c>
   3b7a0:	str	sl, [sp, #360]	; 0x168
   3b7a4:	ldr	r3, [sp, #60]	; 0x3c
   3b7a8:	cmp	r3, #1
   3b7ac:	movls	fp, #0
   3b7b0:	movhi	fp, #1
   3b7b4:	ldr	r3, [sp, #24]
   3b7b8:	ldrb	r3, [r3, #28]
   3b7bc:	eor	r3, r3, #16
   3b7c0:	ands	r3, fp, r3, lsr #4
   3b7c4:	beq	3ac84 <__assert_fail@plt+0x286c0>
   3b7c8:	mov	r2, sl
   3b7cc:	ldr	r3, [sp, #368]	; 0x170
   3b7d0:	ldr	r1, [r3, sl, lsl #2]
   3b7d4:	add	r0, sp, #268	; 0x10c
   3b7d8:	bl	36374 <__assert_fail@plt+0x23db0>
   3b7dc:	str	r0, [sp, #364]	; 0x16c
   3b7e0:	ldr	r3, [sp, #44]	; 0x2c
   3b7e4:	ldrb	r3, [r3, #88]	; 0x58
   3b7e8:	tst	r3, #1
   3b7ec:	bne	3b800 <__assert_fail@plt+0x2923c>
   3b7f0:	ldr	r3, [sp, #44]	; 0x2c
   3b7f4:	ldr	r3, [r3, #76]	; 0x4c
   3b7f8:	cmp	r3, #0
   3b7fc:	beq	3aea8 <__assert_fail@plt+0x288e4>
   3b800:	ldr	r9, [sp, #352]	; 0x160
   3b804:	ldr	r7, [sp, #364]	; 0x16c
   3b808:	cmn	sl, #-1073741822	; 0xc0000002
   3b80c:	bhi	3b6a0 <__assert_fail@plt+0x290dc>
   3b810:	add	r4, sl, #1
   3b814:	lsl	r4, r4, #2
   3b818:	mov	r0, r4
   3b81c:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3b820:	subs	r5, r0, #0
   3b824:	beq	3b9a8 <__assert_fail@plt+0x293e4>
   3b828:	ldr	r3, [r9, #76]	; 0x4c
   3b82c:	cmp	r3, #0
   3b830:	beq	3acd4 <__assert_fail@plt+0x28710>
   3b834:	mov	r0, r4
   3b838:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3b83c:	subs	r6, r0, #0
   3b840:	beq	3b9a8 <__assert_fail@plt+0x293e4>
   3b844:	str	fp, [sp, #12]
   3b848:	add	fp, sl, #1
   3b84c:	lsl	r4, fp, #2
   3b850:	mov	r2, r4
   3b854:	mov	r1, #0
   3b858:	mov	r0, r6
   3b85c:	bl	12348 <memset@plt>
   3b860:	str	r5, [sp, #128]	; 0x80
   3b864:	str	r6, [sp, #132]	; 0x84
   3b868:	str	r7, [sp, #136]	; 0x88
   3b86c:	str	sl, [sp, #140]	; 0x8c
   3b870:	mov	r3, #0
   3b874:	str	r3, [sp, #144]	; 0x90
   3b878:	str	r3, [sp, #148]	; 0x94
   3b87c:	str	r3, [sp, #152]	; 0x98
   3b880:	add	r1, sp, #128	; 0x80
   3b884:	add	r0, sp, #268	; 0x10c
   3b888:	bl	39d50 <__assert_fail@plt+0x2778c>
   3b88c:	mov	r8, r0
   3b890:	ldr	r0, [sp, #152]	; 0x98
   3b894:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b898:	cmp	r8, #0
   3b89c:	bne	3b920 <__assert_fail@plt+0x2935c>
   3b8a0:	ldr	r3, [r5]
   3b8a4:	cmp	r3, #0
   3b8a8:	bne	3aca0 <__assert_fail@plt+0x286dc>
   3b8ac:	ldr	r3, [r6]
   3b8b0:	cmp	r3, #0
   3b8b4:	bne	3aca0 <__assert_fail@plt+0x286dc>
   3b8b8:	sub	r4, r4, #4
   3b8bc:	ldr	r3, [sp, #368]	; 0x170
   3b8c0:	add	r3, r3, r4
   3b8c4:	subs	sl, sl, #1
   3b8c8:	bmi	3b9cc <__assert_fail@plt+0x29408>
   3b8cc:	ldr	r1, [r3, #-4]!
   3b8d0:	cmp	r1, #0
   3b8d4:	beq	3b8c4 <__assert_fail@plt+0x29300>
   3b8d8:	ldrb	r2, [r1, #52]	; 0x34
   3b8dc:	tst	r2, #16
   3b8e0:	beq	3b8c4 <__assert_fail@plt+0x29300>
   3b8e4:	mov	r2, sl
   3b8e8:	add	r0, sp, #268	; 0x10c
   3b8ec:	bl	36374 <__assert_fail@plt+0x23db0>
   3b8f0:	mov	r7, r0
   3b8f4:	b	3b848 <__assert_fail@plt+0x29284>
   3b8f8:	ldr	fp, [sp, #44]	; 0x2c
   3b8fc:	b	3b670 <__assert_fail@plt+0x290ac>
   3b900:	mov	r2, sl
   3b904:	ldr	r3, [sp, #368]	; 0x170
   3b908:	ldr	r1, [r3, sl, lsl #2]
   3b90c:	add	r0, sp, #268	; 0x10c
   3b910:	bl	36374 <__assert_fail@plt+0x23db0>
   3b914:	str	r0, [sp, #364]	; 0x16c
   3b918:	b	3b7f0 <__assert_fail@plt+0x2922c>
   3b91c:	mov	r6, #0
   3b920:	mov	r0, r5
   3b924:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b928:	mov	r0, r6
   3b92c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b930:	cmp	r8, #1
   3b934:	bne	3b99c <__assert_fail@plt+0x293d8>
   3b938:	add	r0, sp, #268	; 0x10c
   3b93c:	bl	347a4 <__assert_fail@plt+0x221e0>
   3b940:	ldr	r3, [sp, #404]	; 0x194
   3b944:	ldr	r2, [sp, #84]	; 0x54
   3b948:	add	r3, r2, r3
   3b94c:	str	r3, [sp, #404]	; 0x194
   3b950:	ldr	r2, [sp, #40]	; 0x28
   3b954:	cmp	r2, r3
   3b958:	movge	r2, #0
   3b95c:	movlt	r2, #1
   3b960:	ldr	r1, [sp, #56]	; 0x38
   3b964:	cmp	r1, r3
   3b968:	movle	r3, r2
   3b96c:	orrgt	r3, r2, #1
   3b970:	cmp	r3, #0
   3b974:	bne	3ae98 <__assert_fail@plt+0x288d4>
   3b978:	ldr	r3, [sp, #72]	; 0x48
   3b97c:	cmp	r3, #4
   3b980:	ldrls	pc, [pc, r3, lsl #2]
   3b984:	b	3a6ac <__assert_fail@plt+0x280e8>
   3b988:	strdeq	sl, [r3], -r4
   3b98c:	strdeq	sl, [r3], -r4
   3b990:	muleq	r3, r4, r4
   3b994:	andeq	sl, r3, r4, lsr #8
   3b998:	andeq	sl, r3, ip, ror r5
   3b99c:	ldr	fp, [sp, #44]	; 0x2c
   3b9a0:	mov	r3, r8
   3b9a4:	b	3b9c0 <__assert_fail@plt+0x293fc>
   3b9a8:	ldr	fp, [sp, #44]	; 0x2c
   3b9ac:	mov	r0, r5
   3b9b0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b9b4:	mov	r0, #0
   3b9b8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b9bc:	mov	r3, #12
   3b9c0:	str	r3, [sp, #28]
   3b9c4:	b	3b678 <__assert_fail@plt+0x290b4>
   3b9c8:	mov	r6, #0
   3b9cc:	mov	r0, r5
   3b9d0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b9d4:	mov	r0, r6
   3b9d8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3b9dc:	b	3b938 <__assert_fail@plt+0x29374>
   3b9e0:	mvn	sl, #0
   3b9e4:	b	3b704 <__assert_fail@plt+0x29140>
   3b9e8:	mvn	sl, #0
   3b9ec:	b	3b704 <__assert_fail@plt+0x29140>
   3b9f0:	mvn	sl, #0
   3b9f4:	b	3b704 <__assert_fail@plt+0x29140>
   3b9f8:	mvn	sl, #0
   3b9fc:	b	3b704 <__assert_fail@plt+0x29140>
   3ba00:	mvn	sl, #0
   3ba04:	b	3b704 <__assert_fail@plt+0x29140>
   3ba08:	mvn	sl, #0
   3ba0c:	b	3b704 <__assert_fail@plt+0x29140>
   3ba10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba14:	sub	sp, sp, #156	; 0x9c
   3ba18:	mov	r9, r0
   3ba1c:	mov	r4, r1
   3ba20:	mov	r8, r2
   3ba24:	str	r3, [sp, #24]
   3ba28:	ldr	sl, [sp, #196]	; 0xc4
   3ba2c:	ldr	r3, [r1]
   3ba30:	str	r3, [sp, #20]
   3ba34:	ldrb	r2, [r2, #4]
   3ba38:	sub	r3, r2, #1
   3ba3c:	cmp	r3, #35	; 0x23
   3ba40:	ldrls	pc, [pc, r3, lsl #2]
   3ba44:	b	3c864 <__assert_fail@plt+0x2a2a0>
   3ba48:	ldrdeq	fp, [r3], -r8
   3ba4c:	andeq	ip, r3, ip, lsr #25
   3ba50:	andeq	ip, r3, r4, ror #16
   3ba54:	andeq	ip, r3, r8, lsr r4
   3ba58:	andeq	ip, r3, r4, ror r7
   3ba5c:	andeq	ip, r3, r4, ror #16
   3ba60:	andeq	ip, r3, r4, ror #16
   3ba64:	andeq	fp, r3, r0, lsr #23
   3ba68:	andeq	ip, r3, ip, ror #9
   3ba6c:	andeq	ip, r3, ip, lsr #25
   3ba70:	andeq	ip, r3, r8, asr #9
   3ba74:	andeq	ip, r3, ip, lsl #11
   3ba78:	andeq	ip, r3, r4, ror #16
   3ba7c:	andeq	ip, r3, r4, ror #16
   3ba80:	andeq	ip, r3, r4, ror #16
   3ba84:	andeq	ip, r3, r4, ror #16
   3ba88:	andeq	ip, r3, r4, ror #16
   3ba8c:	andeq	ip, r3, r8, asr #9
   3ba90:	andeq	ip, r3, r8, asr #9
   3ba94:	andeq	fp, r3, ip, ror ip
   3ba98:	andeq	ip, r3, r4, ror #16
   3ba9c:	andeq	ip, r3, r4, ror #16
   3baa0:			; <UNDEFINED> instruction: 0x0003c4b0
   3baa4:	strdeq	ip, [r3], -r4
   3baa8:	andeq	ip, r3, r4, ror #16
   3baac:	andeq	ip, r3, r4, ror #16
   3bab0:	andeq	ip, r3, r4, ror #16
   3bab4:	andeq	ip, r3, r4, ror #16
   3bab8:	andeq	ip, r3, r4, ror #16
   3babc:	andeq	ip, r3, r4, ror #16
   3bac0:	andeq	ip, r3, r4, ror #16
   3bac4:			; <UNDEFINED> instruction: 0x0003c7b4
   3bac8:			; <UNDEFINED> instruction: 0x0003c7b4
   3bacc:	andeq	ip, r3, r4, lsl #16
   3bad0:	andeq	ip, r3, r4, lsl #16
   3bad4:	andeq	ip, r3, r4, asr r8
   3bad8:	mov	r3, r8
   3badc:	mov	r2, #0
   3bae0:	mov	r1, r2
   3bae4:	ldr	r0, [sp, #20]
   3bae8:	bl	3213c <__assert_fail@plt+0x1fb78>
   3baec:	subs	fp, r0, #0
   3baf0:	moveq	r3, #12
   3baf4:	streq	r3, [sl]
   3baf8:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3bafc:	ldr	r3, [sp, #20]
   3bb00:	ldr	r3, [r3, #92]	; 0x5c
   3bb04:	cmp	r3, #1
   3bb08:	movgt	r6, #0
   3bb0c:	movgt	r5, #16
   3bb10:	ble	3c520 <__assert_fail@plt+0x29f5c>
   3bb14:	ldr	r3, [r9, #40]	; 0x28
   3bb18:	ldr	r2, [r9, #56]	; 0x38
   3bb1c:	cmp	r2, r3
   3bb20:	ble	3c520 <__assert_fail@plt+0x29f5c>
   3bb24:	ldr	r2, [r9, #28]
   3bb28:	cmp	r3, r2
   3bb2c:	beq	3c520 <__assert_fail@plt+0x29f5c>
   3bb30:	ldr	r2, [r9, #8]
   3bb34:	ldr	r3, [r2, r3, lsl #2]
   3bb38:	cmn	r3, #1
   3bb3c:	bne	3c520 <__assert_fail@plt+0x29f5c>
   3bb40:	ldr	r2, [sp, #24]
   3bb44:	mov	r1, r9
   3bb48:	mov	r0, r8
   3bb4c:	bl	33c38 <__assert_fail@plt+0x21674>
   3bb50:	mov	r3, r8
   3bb54:	mov	r2, r6
   3bb58:	mov	r1, r6
   3bb5c:	ldr	r7, [sp, #20]
   3bb60:	mov	r0, r7
   3bb64:	bl	3213c <__assert_fail@plt+0x1fb78>
   3bb68:	mov	r4, r0
   3bb6c:	mov	r3, r5
   3bb70:	mov	r2, r0
   3bb74:	mov	r1, fp
   3bb78:	mov	r0, r7
   3bb7c:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3bb80:	mov	fp, r0
   3bb84:	cmp	r0, #0
   3bb88:	cmpne	r4, #0
   3bb8c:	bne	3bb14 <__assert_fail@plt+0x29550>
   3bb90:	mov	r3, #12
   3bb94:	str	r3, [sl]
   3bb98:	mov	fp, #0
   3bb9c:	b	3cae4 <__assert_fail@plt+0x2a520>
   3bba0:	ldr	r5, [r1, #24]
   3bba4:	add	r3, r5, #1
   3bba8:	str	r3, [r1, #24]
   3bbac:	ldr	r6, [sp, #24]
   3bbb0:	orr	r2, r6, #8388608	; 0x800000
   3bbb4:	mov	r1, r0
   3bbb8:	mov	r0, r8
   3bbbc:	bl	33c38 <__assert_fail@plt+0x21674>
   3bbc0:	ldrb	r3, [r8, #4]
   3bbc4:	cmp	r3, #9
   3bbc8:	beq	3bc30 <__assert_fail@plt+0x2966c>
   3bbcc:	str	sl, [sp, #4]
   3bbd0:	ldr	r3, [sp, #192]	; 0xc0
   3bbd4:	add	r3, r3, #1
   3bbd8:	str	r3, [sp]
   3bbdc:	mov	r3, r6
   3bbe0:	mov	r2, r8
   3bbe4:	mov	r1, r4
   3bbe8:	mov	r0, r9
   3bbec:	bl	3cf18 <__assert_fail@plt+0x2a954>
   3bbf0:	ldr	r3, [sl]
   3bbf4:	cmp	r3, #0
   3bbf8:	beq	3bc04 <__assert_fail@plt+0x29640>
   3bbfc:	mov	fp, #0
   3bc00:	b	3cae4 <__assert_fail@plt+0x2a520>
   3bc04:	ldrb	r3, [r8, #4]
   3bc08:	cmp	r3, #9
   3bc0c:	beq	3bc34 <__assert_fail@plt+0x29670>
   3bc10:	cmp	r0, #0
   3bc14:	beq	3bc24 <__assert_fail@plt+0x29660>
   3bc18:	mov	r2, #0
   3bc1c:	ldr	r1, [pc, #3876]	; 3cb48 <__assert_fail@plt+0x2a584>
   3bc20:	bl	31f4c <__assert_fail@plt+0x1f988>
   3bc24:	mov	r3, #8
   3bc28:	str	r3, [sl]
   3bc2c:	b	3bbfc <__assert_fail@plt+0x29638>
   3bc30:	mov	r0, #0
   3bc34:	cmp	r5, #8
   3bc38:	bhi	3bc50 <__assert_fail@plt+0x2968c>
   3bc3c:	ldr	r1, [sp, #20]
   3bc40:	ldr	r3, [r1, #84]	; 0x54
   3bc44:	mov	r2, #1
   3bc48:	orr	r3, r3, r2, lsl r5
   3bc4c:	str	r3, [r1, #84]	; 0x54
   3bc50:	mov	r3, #17
   3bc54:	mov	r2, #0
   3bc58:	mov	r1, r0
   3bc5c:	ldr	r0, [sp, #20]
   3bc60:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3bc64:	subs	fp, r0, #0
   3bc68:	moveq	r3, #12
   3bc6c:	streq	r3, [sl]
   3bc70:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3bc74:	str	r5, [fp, #20]
   3bc78:	b	3c520 <__assert_fail@plt+0x29f5c>
   3bc7c:	mov	r3, #0
   3bc80:	str	r3, [sp, #60]	; 0x3c
   3bc84:	mov	r1, #1
   3bc88:	mov	r0, #32
   3bc8c:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   3bc90:	mov	r5, r0
   3bc94:	mov	r1, #1
   3bc98:	mov	r0, #40	; 0x28
   3bc9c:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   3bca0:	mov	r7, r0
   3bca4:	cmp	r0, #0
   3bca8:	cmpne	r5, #0
   3bcac:	moveq	r3, #1
   3bcb0:	movne	r3, #0
   3bcb4:	str	r3, [sp, #40]	; 0x28
   3bcb8:	beq	3bd28 <__assert_fail@plt+0x29764>
   3bcbc:	ldr	r2, [sp, #24]
   3bcc0:	mov	r1, r9
   3bcc4:	mov	r0, r8
   3bcc8:	bl	31704 <__assert_fail@plt+0x1f140>
   3bccc:	str	r0, [sp, #28]
   3bcd0:	ldrb	r3, [r8, #4]
   3bcd4:	cmp	r3, #2
   3bcd8:	streq	r3, [sl]
   3bcdc:	beq	3be70 <__assert_fail@plt+0x298ac>
   3bce0:	cmp	r3, #25
   3bce4:	beq	3bd44 <__assert_fail@plt+0x29780>
   3bce8:	ldr	r3, [sp, #40]	; 0x28
   3bcec:	str	r3, [sp, #44]	; 0x2c
   3bcf0:	ldrb	r3, [r8, #4]
   3bcf4:	cmp	r3, #21
   3bcf8:	moveq	r3, #1
   3bcfc:	strbeq	r3, [r8, #4]
   3bd00:	mov	fp, #0
   3bd04:	mov	r3, #1
   3bd08:	str	fp, [sp, #36]	; 0x24
   3bd0c:	ldr	r2, [sp, #24]
   3bd10:	lsr	r2, r2, #16
   3bd14:	and	r2, r2, r3
   3bd18:	str	r2, [sp, #52]	; 0x34
   3bd1c:	str	sl, [sp, #196]	; 0xc4
   3bd20:	ldr	sl, [sp, #20]
   3bd24:	b	3c120 <__assert_fail@plt+0x29b5c>
   3bd28:	mov	r0, r5
   3bd2c:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3bd30:	mov	r0, r7
   3bd34:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3bd38:	mov	r3, #12
   3bd3c:	str	r3, [sl]
   3bd40:	b	3be80 <__assert_fail@plt+0x298bc>
   3bd44:	ldrb	r3, [r7, #16]
   3bd48:	orr	r3, r3, #1
   3bd4c:	strb	r3, [r7, #16]
   3bd50:	ldr	r3, [sp, #24]
   3bd54:	tst	r3, #256	; 0x100
   3bd58:	ldrne	r3, [r5]
   3bd5c:	orrne	r3, r3, #1024	; 0x400
   3bd60:	strne	r3, [r5]
   3bd64:	ldr	r3, [r9, #40]	; 0x28
   3bd68:	ldr	r2, [sp, #28]
   3bd6c:	add	r3, r3, r2
   3bd70:	str	r3, [r9, #40]	; 0x28
   3bd74:	ldr	r2, [sp, #24]
   3bd78:	mov	r1, r9
   3bd7c:	mov	r0, r8
   3bd80:	bl	31704 <__assert_fail@plt+0x1f140>
   3bd84:	str	r0, [sp, #28]
   3bd88:	ldrb	r3, [r8, #4]
   3bd8c:	cmp	r3, #2
   3bd90:	streq	r3, [sl]
   3bd94:	beq	3be70 <__assert_fail@plt+0x298ac>
   3bd98:	mov	r3, #1
   3bd9c:	str	r3, [sp, #44]	; 0x2c
   3bda0:	b	3bcf0 <__assert_fail@plt+0x2972c>
   3bda4:	ldr	sl, [sp, #196]	; 0xc4
   3bda8:	str	r0, [sl]
   3bdac:	b	3be70 <__assert_fail@plt+0x298ac>
   3bdb0:	ldr	sl, [sp, #196]	; 0xc4
   3bdb4:	mov	r3, #7
   3bdb8:	str	r3, [sl]
   3bdbc:	b	3be70 <__assert_fail@plt+0x298ac>
   3bdc0:	ldr	r3, [r9, #40]	; 0x28
   3bdc4:	ldr	r2, [sp, #28]
   3bdc8:	add	r3, r3, r2
   3bdcc:	str	r3, [r9, #40]	; 0x28
   3bdd0:	ldr	r2, [sp, #24]
   3bdd4:	mov	r1, r9
   3bdd8:	add	r0, sp, #80	; 0x50
   3bddc:	bl	31704 <__assert_fail@plt+0x1f140>
   3bde0:	mov	r3, r0
   3bde4:	ldrb	r2, [sp, #84]	; 0x54
   3bde8:	cmp	r2, #2
   3bdec:	beq	3be94 <__assert_fail@plt+0x298d0>
   3bdf0:	cmp	r2, #21
   3bdf4:	beq	3bea4 <__assert_fail@plt+0x298e0>
   3bdf8:	add	r2, sp, #120	; 0x78
   3bdfc:	str	r2, [sp, #76]	; 0x4c
   3be00:	mov	r2, #3
   3be04:	str	r2, [sp, #72]	; 0x48
   3be08:	mov	r2, #1
   3be0c:	str	r2, [sp, #8]
   3be10:	ldr	r2, [sp, #24]
   3be14:	str	r2, [sp, #4]
   3be18:	str	sl, [sp]
   3be1c:	add	r2, sp, #80	; 0x50
   3be20:	mov	r1, r9
   3be24:	add	r0, sp, #72	; 0x48
   3be28:	bl	31cc4 <__assert_fail@plt+0x1f700>
   3be2c:	cmp	r0, #0
   3be30:	bne	3ccbc <__assert_fail@plt+0x2a6f8>
   3be34:	ldr	r2, [sp, #24]
   3be38:	mov	r1, r9
   3be3c:	mov	r0, r8
   3be40:	bl	31704 <__assert_fail@plt+0x1f140>
   3be44:	str	r0, [sp, #28]
   3be48:	ldr	r6, [sp, #64]	; 0x40
   3be4c:	sub	r3, r6, #2
   3be50:	bics	r3, r3, #2
   3be54:	beq	3c0dc <__assert_fail@plt+0x29b18>
   3be58:	ldr	r4, [sp, #72]	; 0x48
   3be5c:	cmp	r4, #2
   3be60:	bne	3bec0 <__assert_fail@plt+0x298fc>
   3be64:	ldr	sl, [sp, #196]	; 0xc4
   3be68:	mov	r3, #11
   3be6c:	str	r3, [sl]
   3be70:	mov	r0, r5
   3be74:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3be78:	mov	r0, r7
   3be7c:	bl	33cf8 <__assert_fail@plt+0x21734>
   3be80:	ldr	r3, [sl]
   3be84:	cmp	r3, #0
   3be88:	bne	3ccb4 <__assert_fail@plt+0x2a6f0>
   3be8c:	mov	fp, #0
   3be90:	b	3c520 <__assert_fail@plt+0x29f5c>
   3be94:	ldr	sl, [sp, #196]	; 0xc4
   3be98:	mov	r3, #7
   3be9c:	str	r3, [sl]
   3bea0:	b	3be70 <__assert_fail@plt+0x298ac>
   3bea4:	ldr	r3, [r9, #40]	; 0x28
   3bea8:	ldr	r2, [sp, #28]
   3beac:	sub	r3, r3, r2
   3beb0:	str	r3, [r9, #40]	; 0x28
   3beb4:	mov	r3, #1
   3beb8:	strb	r3, [r8, #4]
   3bebc:	b	3c194 <__assert_fail@plt+0x29bd0>
   3bec0:	cmp	r4, #4
   3bec4:	beq	3ccc8 <__assert_fail@plt+0x2a704>
   3bec8:	cmp	r6, #3
   3becc:	beq	3bef8 <__assert_fail@plt+0x29934>
   3bed0:	cmp	r4, #3
   3bed4:	beq	3cda0 <__assert_fail@plt+0x2a7dc>
   3bed8:	cmp	r6, #0
   3bedc:	beq	3bf14 <__assert_fail@plt+0x29950>
   3bee0:	cmp	r6, #3
   3bee4:	movne	r0, #0
   3bee8:	bne	3bf18 <__assert_fail@plt+0x29954>
   3beec:	ldr	r3, [sp, #68]	; 0x44
   3bef0:	ldrb	r0, [r3]
   3bef4:	b	3bf18 <__assert_fail@plt+0x29954>
   3bef8:	ldr	r0, [sp, #68]	; 0x44
   3befc:	bl	122d0 <strlen@plt>
   3bf00:	cmp	r0, #1
   3bf04:	bls	3cd98 <__assert_fail@plt+0x2a7d4>
   3bf08:	ldr	sl, [sp, #196]	; 0xc4
   3bf0c:	mov	r3, #3
   3bf10:	b	3c0e4 <__assert_fail@plt+0x29b20>
   3bf14:	ldrb	r0, [sp, #68]	; 0x44
   3bf18:	cmp	r4, #0
   3bf1c:	bne	3c00c <__assert_fail@plt+0x29a48>
   3bf20:	ldrb	r3, [sp, #76]	; 0x4c
   3bf24:	str	r3, [sp, #32]
   3bf28:	cmp	r6, #0
   3bf2c:	cmpne	r6, #3
   3bf30:	ldrne	r6, [sp, #68]	; 0x44
   3bf34:	bne	3bf4c <__assert_fail@plt+0x29988>
   3bf38:	ldr	r3, [sl, #92]	; 0x5c
   3bf3c:	cmp	r3, #1
   3bf40:	ble	3c024 <__assert_fail@plt+0x29a60>
   3bf44:	bl	12378 <btowc@plt>
   3bf48:	mov	r6, r0
   3bf4c:	ldr	r3, [sp, #72]	; 0x48
   3bf50:	cmp	r3, #3
   3bf54:	cmpne	r3, #0
   3bf58:	bne	3c03c <__assert_fail@plt+0x29a78>
   3bf5c:	ldr	r3, [sl, #92]	; 0x5c
   3bf60:	cmp	r3, #1
   3bf64:	ble	3c034 <__assert_fail@plt+0x29a70>
   3bf68:	ldr	r0, [sp, #32]
   3bf6c:	bl	12378 <btowc@plt>
   3bf70:	mov	r4, r0
   3bf74:	cmn	r6, #1
   3bf78:	cmnne	r4, #1
   3bf7c:	beq	3ccd4 <__assert_fail@plt+0x2a710>
   3bf80:	ldr	r3, [sp, #52]	; 0x34
   3bf84:	cmp	r4, r6
   3bf88:	movcs	r3, #0
   3bf8c:	andcc	r3, r3, #1
   3bf90:	cmp	r3, #0
   3bf94:	bne	3cce0 <__assert_fail@plt+0x2a71c>
   3bf98:	ldr	r3, [sl, #92]	; 0x5c
   3bf9c:	cmp	r3, #1
   3bfa0:	ble	3c074 <__assert_fail@plt+0x29ab0>
   3bfa4:	ldr	r3, [r7, #32]
   3bfa8:	cmp	r3, fp
   3bfac:	bne	3c054 <__assert_fail@plt+0x29a90>
   3bfb0:	lsl	fp, fp, #1
   3bfb4:	add	fp, fp, #1
   3bfb8:	lsl	r3, fp, #2
   3bfbc:	str	r3, [sp, #48]	; 0x30
   3bfc0:	mov	r1, r3
   3bfc4:	ldr	r0, [r7, #4]
   3bfc8:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3bfcc:	str	r0, [sp, #32]
   3bfd0:	ldr	r1, [sp, #48]	; 0x30
   3bfd4:	ldr	r0, [r7, #8]
   3bfd8:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3bfdc:	str	r0, [sp, #48]	; 0x30
   3bfe0:	ldr	r3, [sp, #32]
   3bfe4:	cmp	r0, #0
   3bfe8:	cmpne	r3, #0
   3bfec:	bne	3c044 <__assert_fail@plt+0x29a80>
   3bff0:	ldr	sl, [sp, #196]	; 0xc4
   3bff4:	mov	r0, r3
   3bff8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3bffc:	ldr	r0, [sp, #48]	; 0x30
   3c000:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3c004:	mov	r3, #12
   3c008:	b	3be6c <__assert_fail@plt+0x298a8>
   3c00c:	cmp	r4, #3
   3c010:	ldreq	r3, [sp, #76]	; 0x4c
   3c014:	ldrbeq	r3, [r3]
   3c018:	movne	r3, #0
   3c01c:	str	r3, [sp, #32]
   3c020:	b	3bf28 <__assert_fail@plt+0x29964>
   3c024:	uxtb	r6, r0
   3c028:	cmp	r4, #3
   3c02c:	cmpne	r4, #0
   3c030:	bne	3c03c <__assert_fail@plt+0x29a78>
   3c034:	ldrb	r4, [sp, #32]
   3c038:	b	3bf74 <__assert_fail@plt+0x299b0>
   3c03c:	ldr	r4, [sp, #76]	; 0x4c
   3c040:	b	3bf74 <__assert_fail@plt+0x299b0>
   3c044:	ldr	r3, [sp, #32]
   3c048:	str	r3, [r7, #4]
   3c04c:	ldr	r3, [sp, #48]	; 0x30
   3c050:	str	r3, [r7, #8]
   3c054:	ldr	r2, [r7, #32]
   3c058:	ldr	r3, [r7, #4]
   3c05c:	str	r6, [r3, r2, lsl #2]
   3c060:	ldr	r2, [r7, #8]
   3c064:	ldr	r3, [r7, #32]
   3c068:	add	r1, r3, #1
   3c06c:	str	r1, [r7, #32]
   3c070:	str	r4, [r2, r3, lsl #2]
   3c074:	mov	r1, #0
   3c078:	mov	ip, #1
   3c07c:	b	3c08c <__assert_fail@plt+0x29ac8>
   3c080:	add	r1, r1, #1
   3c084:	cmp	r1, #256	; 0x100
   3c088:	beq	3ccec <__assert_fail@plt+0x2a728>
   3c08c:	cmp	r1, r6
   3c090:	movcc	r3, #0
   3c094:	movcs	r3, #1
   3c098:	cmp	r1, r4
   3c09c:	movhi	r3, #0
   3c0a0:	cmp	r3, #0
   3c0a4:	beq	3c080 <__assert_fail@plt+0x29abc>
   3c0a8:	add	r3, r1, #31
   3c0ac:	cmp	r1, #0
   3c0b0:	movge	r3, r1
   3c0b4:	asr	r3, r3, #5
   3c0b8:	asr	r2, r1, #31
   3c0bc:	lsr	r0, r2, #27
   3c0c0:	add	r2, r1, r0
   3c0c4:	and	r2, r2, #31
   3c0c8:	sub	r2, r2, r0
   3c0cc:	ldr	r0, [r5, r3, lsl #2]
   3c0d0:	orr	r2, r0, ip, lsl r2
   3c0d4:	str	r2, [r5, r3, lsl #2]
   3c0d8:	b	3c080 <__assert_fail@plt+0x29abc>
   3c0dc:	ldr	sl, [sp, #196]	; 0xc4
   3c0e0:	mov	r3, #11
   3c0e4:	str	r3, [sl]
   3c0e8:	b	3be70 <__assert_fail@plt+0x298ac>
   3c0ec:	ldrb	r3, [sp, #68]	; 0x44
   3c0f0:	asr	r1, r3, #5
   3c0f4:	and	r3, r3, #31
   3c0f8:	ldr	r2, [r5, r1, lsl #2]
   3c0fc:	mov	r0, #1
   3c100:	orr	r3, r2, r0, lsl r3
   3c104:	str	r3, [r5, r1, lsl #2]
   3c108:	ldrb	r3, [r8, #4]
   3c10c:	cmp	r3, #2
   3c110:	beq	3c2c0 <__assert_fail@plt+0x29cfc>
   3c114:	cmp	r3, #21
   3c118:	beq	3c2d0 <__assert_fail@plt+0x29d0c>
   3c11c:	ldr	r3, [sp, #40]	; 0x28
   3c120:	add	r2, sp, #88	; 0x58
   3c124:	str	r2, [sp, #68]	; 0x44
   3c128:	mov	r2, #3
   3c12c:	str	r2, [sp, #64]	; 0x40
   3c130:	str	r3, [sp, #8]
   3c134:	ldr	r3, [sp, #24]
   3c138:	str	r3, [sp, #4]
   3c13c:	str	sl, [sp]
   3c140:	ldr	r3, [sp, #28]
   3c144:	mov	r2, r8
   3c148:	mov	r1, r9
   3c14c:	add	r0, sp, #64	; 0x40
   3c150:	bl	31cc4 <__assert_fail@plt+0x1f700>
   3c154:	cmp	r0, #0
   3c158:	bne	3bda4 <__assert_fail@plt+0x297e0>
   3c15c:	ldr	r2, [sp, #24]
   3c160:	mov	r1, r9
   3c164:	mov	r0, r8
   3c168:	bl	31704 <__assert_fail@plt+0x1f140>
   3c16c:	str	r0, [sp, #28]
   3c170:	ldr	r3, [sp, #64]	; 0x40
   3c174:	sub	r3, r3, #2
   3c178:	bics	r3, r3, #2
   3c17c:	beq	3c194 <__assert_fail@plt+0x29bd0>
   3c180:	ldrb	r3, [r8, #4]
   3c184:	cmp	r3, #2
   3c188:	beq	3bdb0 <__assert_fail@plt+0x297ec>
   3c18c:	cmp	r3, #22
   3c190:	beq	3bdc0 <__assert_fail@plt+0x297fc>
   3c194:	ldr	r3, [sp, #64]	; 0x40
   3c198:	cmp	r3, #4
   3c19c:	ldrls	pc, [pc, r3, lsl #2]
   3c1a0:	b	3c2c0 <__assert_fail@plt+0x29cfc>
   3c1a4:	andeq	ip, r3, ip, ror #1
   3c1a8:			; <UNDEFINED> instruction: 0x0003c1b8
   3c1ac:	andeq	ip, r3, ip, lsl #4
   3c1b0:	andeq	ip, r3, r8, asr #4
   3c1b4:	andeq	ip, r3, r4, lsl #5
   3c1b8:	ldr	r3, [r7, #20]
   3c1bc:	ldr	r2, [sp, #36]	; 0x24
   3c1c0:	cmp	r3, r2
   3c1c4:	beq	3c1e4 <__assert_fail@plt+0x29c20>
   3c1c8:	ldr	r2, [r7]
   3c1cc:	ldr	r3, [r7, #20]
   3c1d0:	add	r1, r3, #1
   3c1d4:	str	r1, [r7, #20]
   3c1d8:	ldr	r1, [sp, #68]	; 0x44
   3c1dc:	str	r1, [r2, r3, lsl #2]
   3c1e0:	b	3c108 <__assert_fail@plt+0x29b44>
   3c1e4:	lsl	r3, r2, #1
   3c1e8:	add	r3, r3, #1
   3c1ec:	str	r3, [sp, #36]	; 0x24
   3c1f0:	lsl	r1, r3, #2
   3c1f4:	ldr	r0, [r7]
   3c1f8:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3c1fc:	cmp	r0, #0
   3c200:	beq	3c430 <__assert_fail@plt+0x29e6c>
   3c204:	str	r0, [r7]
   3c208:	b	3c1c8 <__assert_fail@plt+0x29c04>
   3c20c:	ldr	r4, [sp, #68]	; 0x44
   3c210:	mov	r0, r4
   3c214:	bl	122d0 <strlen@plt>
   3c218:	cmp	r0, #1
   3c21c:	bne	3ccfc <__assert_fail@plt+0x2a738>
   3c220:	ldrb	r3, [r4]
   3c224:	asr	r1, r3, #5
   3c228:	and	r3, r3, #31
   3c22c:	ldr	r2, [r5, r1, lsl #2]
   3c230:	orr	r3, r2, r0, lsl r3
   3c234:	str	r3, [r5, r1, lsl #2]
   3c238:	mov	r3, #0
   3c23c:	ldr	r2, [sp, #196]	; 0xc4
   3c240:	str	r3, [r2]
   3c244:	b	3c108 <__assert_fail@plt+0x29b44>
   3c248:	ldr	r4, [sp, #68]	; 0x44
   3c24c:	mov	r0, r4
   3c250:	bl	122d0 <strlen@plt>
   3c254:	cmp	r0, #1
   3c258:	bne	3cd0c <__assert_fail@plt+0x2a748>
   3c25c:	ldrb	r3, [r4]
   3c260:	asr	r1, r3, #5
   3c264:	and	r3, r3, #31
   3c268:	ldr	r2, [r5, r1, lsl #2]
   3c26c:	orr	r3, r2, r0, lsl r3
   3c270:	str	r3, [r5, r1, lsl #2]
   3c274:	mov	r3, #0
   3c278:	ldr	r2, [sp, #196]	; 0xc4
   3c27c:	str	r3, [r2]
   3c280:	b	3c108 <__assert_fail@plt+0x29b44>
   3c284:	ldr	r3, [sp, #24]
   3c288:	str	r3, [sp, #4]
   3c28c:	ldr	r3, [sp, #68]	; 0x44
   3c290:	str	r3, [sp]
   3c294:	add	r3, sp, #60	; 0x3c
   3c298:	mov	r2, r7
   3c29c:	mov	r1, r5
   3c2a0:	ldr	r0, [r9, #64]	; 0x40
   3c2a4:	bl	36508 <__assert_fail@plt+0x23f44>
   3c2a8:	ldr	r3, [sp, #196]	; 0xc4
   3c2ac:	str	r0, [r3]
   3c2b0:	cmp	r0, #0
   3c2b4:	beq	3c108 <__assert_fail@plt+0x29b44>
   3c2b8:	mov	sl, r3
   3c2bc:	b	3be70 <__assert_fail@plt+0x298ac>
   3c2c0:	ldr	sl, [sp, #196]	; 0xc4
   3c2c4:	mov	r3, #7
   3c2c8:	str	r3, [sl]
   3c2cc:	b	3be70 <__assert_fail@plt+0x298ac>
   3c2d0:	ldr	sl, [sp, #196]	; 0xc4
   3c2d4:	ldr	r3, [r9, #40]	; 0x28
   3c2d8:	ldr	r2, [sp, #28]
   3c2dc:	add	r3, r3, r2
   3c2e0:	str	r3, [r9, #40]	; 0x28
   3c2e4:	ldr	r3, [sp, #44]	; 0x2c
   3c2e8:	cmp	r3, #0
   3c2ec:	beq	3c30c <__assert_fail@plt+0x29d48>
   3c2f0:	sub	r3, r5, #4
   3c2f4:	add	r1, r5, #28
   3c2f8:	ldr	r2, [r3, #4]
   3c2fc:	mvn	r2, r2
   3c300:	str	r2, [r3, #4]!
   3c304:	cmp	r1, r3
   3c308:	bne	3c2f8 <__assert_fail@plt+0x29d34>
   3c30c:	ldr	r3, [sp, #20]
   3c310:	ldr	ip, [r3, #92]	; 0x5c
   3c314:	cmp	ip, #1
   3c318:	ble	3c344 <__assert_fail@plt+0x29d80>
   3c31c:	sub	r0, r5, #4
   3c320:	ldr	r1, [r3, #60]	; 0x3c
   3c324:	sub	r1, r1, #4
   3c328:	add	lr, r5, #28
   3c32c:	ldr	r3, [r0, #4]
   3c330:	ldr	r2, [r1, #4]!
   3c334:	and	r3, r3, r2
   3c338:	str	r3, [r0, #4]!
   3c33c:	cmp	r0, lr
   3c340:	bne	3c32c <__assert_fail@plt+0x29d68>
   3c344:	ldr	r3, [r7, #20]
   3c348:	cmp	r3, #0
   3c34c:	bne	3c394 <__assert_fail@plt+0x29dd0>
   3c350:	ldr	r3, [r7, #24]
   3c354:	cmp	r3, #0
   3c358:	bne	3c394 <__assert_fail@plt+0x29dd0>
   3c35c:	ldr	r3, [r7, #28]
   3c360:	cmp	r3, #0
   3c364:	bne	3c394 <__assert_fail@plt+0x29dd0>
   3c368:	ldr	r3, [r7, #32]
   3c36c:	cmp	r3, #0
   3c370:	bne	3c394 <__assert_fail@plt+0x29dd0>
   3c374:	cmp	ip, #1
   3c378:	ble	3c3fc <__assert_fail@plt+0x29e38>
   3c37c:	ldr	r3, [r7, #36]	; 0x24
   3c380:	cmp	r3, #0
   3c384:	bne	3c394 <__assert_fail@plt+0x29dd0>
   3c388:	ldrb	r3, [r7, #16]
   3c38c:	tst	r3, #1
   3c390:	beq	3c3fc <__assert_fail@plt+0x29e38>
   3c394:	ldr	r0, [sp, #20]
   3c398:	ldrb	r3, [r0, #88]	; 0x58
   3c39c:	orr	r3, r3, #2
   3c3a0:	strb	r3, [r0, #88]	; 0x58
   3c3a4:	mov	r3, #6
   3c3a8:	strb	r3, [sp, #124]	; 0x7c
   3c3ac:	add	r3, sp, #152	; 0x98
   3c3b0:	str	r7, [r3, #-32]!	; 0xffffffe0
   3c3b4:	mov	r2, #0
   3c3b8:	mov	r1, r2
   3c3bc:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c3c0:	subs	fp, r0, #0
   3c3c4:	beq	3cd5c <__assert_fail@plt+0x2a798>
   3c3c8:	ldr	r3, [r5]
   3c3cc:	cmp	r3, #0
   3c3d0:	bne	3cd1c <__assert_fail@plt+0x2a758>
   3c3d4:	mov	r3, r5
   3c3d8:	add	r2, r5, #28
   3c3dc:	ldr	r1, [r3, #4]!
   3c3e0:	cmp	r1, #0
   3c3e4:	bne	3cd1c <__assert_fail@plt+0x2a758>
   3c3e8:	cmp	r3, r2
   3c3ec:	bne	3c3dc <__assert_fail@plt+0x29e18>
   3c3f0:	mov	r0, r5
   3c3f4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3c3f8:	b	3c520 <__assert_fail@plt+0x29f5c>
   3c3fc:	mov	r0, r7
   3c400:	bl	33cf8 <__assert_fail@plt+0x21734>
   3c404:	mov	r3, #3
   3c408:	strb	r3, [sp, #124]	; 0x7c
   3c40c:	add	r3, sp, #152	; 0x98
   3c410:	str	r5, [r3, #-32]!	; 0xffffffe0
   3c414:	mov	r2, #0
   3c418:	mov	r1, r2
   3c41c:	ldr	r0, [sp, #20]
   3c420:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c424:	subs	fp, r0, #0
   3c428:	bne	3c520 <__assert_fail@plt+0x29f5c>
   3c42c:	b	3cd5c <__assert_fail@plt+0x2a798>
   3c430:	ldr	sl, [sp, #196]	; 0xc4
   3c434:	b	3cd5c <__assert_fail@plt+0x2a798>
   3c438:	ldr	r2, [r8]
   3c43c:	mov	r3, #1
   3c440:	lsl	r3, r3, r2
   3c444:	ldr	r2, [sp, #20]
   3c448:	ldr	r2, [r2, #84]	; 0x54
   3c44c:	tst	r3, r2
   3c450:	moveq	r3, #6
   3c454:	streq	r3, [sl]
   3c458:	moveq	fp, #0
   3c45c:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3c460:	ldr	r0, [sp, #20]
   3c464:	ldr	r2, [r0, #80]	; 0x50
   3c468:	orr	r3, r2, r3
   3c46c:	str	r3, [r0, #80]	; 0x50
   3c470:	mov	r3, r8
   3c474:	mov	r2, #0
   3c478:	mov	r1, r2
   3c47c:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c480:	subs	fp, r0, #0
   3c484:	moveq	r3, #12
   3c488:	streq	r3, [sl]
   3c48c:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3c490:	ldr	r2, [sp, #20]
   3c494:	ldr	r3, [r2, #76]	; 0x4c
   3c498:	add	r3, r3, #1
   3c49c:	str	r3, [r2, #76]	; 0x4c
   3c4a0:	ldrb	r3, [r2, #88]	; 0x58
   3c4a4:	orr	r3, r3, #2
   3c4a8:	strb	r3, [r2, #88]	; 0x58
   3c4ac:	b	3c520 <__assert_fail@plt+0x29f5c>
   3c4b0:	ldr	r3, [sp, #24]
   3c4b4:	tst	r3, #16777216	; 0x1000000
   3c4b8:	movne	r3, #13
   3c4bc:	strne	r3, [sl]
   3c4c0:	movne	fp, #0
   3c4c4:	bne	3cae4 <__assert_fail@plt+0x2a520>
   3c4c8:	ldr	r3, [sp, #24]
   3c4cc:	tst	r3, #32
   3c4d0:	movne	r3, #13
   3c4d4:	strne	r3, [sl]
   3c4d8:	movne	fp, #0
   3c4dc:	bne	3cae4 <__assert_fail@plt+0x2a520>
   3c4e0:	ldr	r3, [sp, #24]
   3c4e4:	tst	r3, #16
   3c4e8:	bne	3c534 <__assert_fail@plt+0x29f70>
   3c4ec:	cmp	r2, #9
   3c4f0:	beq	3c570 <__assert_fail@plt+0x29fac>
   3c4f4:	mov	r3, #1
   3c4f8:	strb	r3, [r8, #4]
   3c4fc:	mov	r3, r8
   3c500:	mov	r2, #0
   3c504:	mov	r1, r2
   3c508:	ldr	r0, [sp, #20]
   3c50c:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c510:	subs	fp, r0, #0
   3c514:	moveq	r3, #12
   3c518:	streq	r3, [sl]
   3c51c:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3c520:	ldr	r2, [sp, #24]
   3c524:	mov	r1, r9
   3c528:	mov	r0, r8
   3c52c:	bl	33c38 <__assert_fail@plt+0x21674>
   3c530:	b	3cb74 <__assert_fail@plt+0x2a5b0>
   3c534:	mov	r5, r3
   3c538:	mov	r2, r3
   3c53c:	mov	r1, r9
   3c540:	mov	r0, r8
   3c544:	bl	33c38 <__assert_fail@plt+0x21674>
   3c548:	str	sl, [sp, #4]
   3c54c:	ldr	r3, [sp, #192]	; 0xc0
   3c550:	str	r3, [sp]
   3c554:	mov	r3, r5
   3c558:	mov	r2, r8
   3c55c:	mov	r1, r4
   3c560:	mov	r0, r9
   3c564:	bl	3ba10 <__assert_fail@plt+0x2944c>
   3c568:	mov	fp, r0
   3c56c:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c570:	ldr	r3, [sp, #24]
   3c574:	tst	r3, #131072	; 0x20000
   3c578:	moveq	r3, #16
   3c57c:	streq	r3, [sl]
   3c580:	moveq	fp, #0
   3c584:	bne	3c4f4 <__assert_fail@plt+0x29f30>
   3c588:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c58c:	ldr	r2, [r8]
   3c590:	ldr	r3, [pc, #1460]	; 3cb4c <__assert_fail@plt+0x2a588>
   3c594:	and	r3, r3, r2
   3c598:	cmp	r3, #0
   3c59c:	beq	3c5b0 <__assert_fail@plt+0x29fec>
   3c5a0:	ldr	r3, [sp, #20]
   3c5a4:	ldrb	r3, [r3, #88]	; 0x58
   3c5a8:	tst	r3, #16
   3c5ac:	beq	3c664 <__assert_fail@plt+0x2a0a0>
   3c5b0:	ldr	r3, [r8]
   3c5b4:	sub	r2, r3, #256	; 0x100
   3c5b8:	bics	r2, r2, #256	; 0x100
   3c5bc:	bne	3c74c <__assert_fail@plt+0x2a188>
   3c5c0:	cmp	r3, #256	; 0x100
   3c5c4:	beq	3c720 <__assert_fail@plt+0x2a15c>
   3c5c8:	mov	r3, #5
   3c5cc:	str	r3, [r8]
   3c5d0:	mov	r3, r8
   3c5d4:	mov	r2, #0
   3c5d8:	mov	r1, r2
   3c5dc:	ldr	r0, [sp, #20]
   3c5e0:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c5e4:	mov	r4, r0
   3c5e8:	mov	r3, #10
   3c5ec:	str	r3, [r8]
   3c5f0:	mov	r3, r8
   3c5f4:	mov	r2, #0
   3c5f8:	mov	r1, r2
   3c5fc:	ldr	r6, [sp, #20]
   3c600:	mov	r0, r6
   3c604:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c608:	mov	r5, r0
   3c60c:	mov	r3, #10
   3c610:	mov	r2, r0
   3c614:	mov	r1, r4
   3c618:	mov	r0, r6
   3c61c:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3c620:	cmp	r5, #0
   3c624:	cmpne	r4, #0
   3c628:	moveq	r4, #1
   3c62c:	movne	r4, #0
   3c630:	mov	fp, r0
   3c634:	cmp	r0, #0
   3c638:	orreq	r4, r4, #1
   3c63c:	cmp	r4, #0
   3c640:	movne	r3, #12
   3c644:	strne	r3, [sl]
   3c648:	movne	fp, #0
   3c64c:	bne	3cae4 <__assert_fail@plt+0x2a520>
   3c650:	ldr	r2, [sp, #24]
   3c654:	mov	r1, r9
   3c658:	mov	r0, r8
   3c65c:	bl	33c38 <__assert_fail@plt+0x21674>
   3c660:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c664:	ldr	r1, [sp, #20]
   3c668:	ldrb	r3, [r1, #88]	; 0x58
   3c66c:	orr	r3, r3, #16
   3c670:	strb	r3, [r1, #88]	; 0x58
   3c674:	tst	r3, #8
   3c678:	bne	3cd68 <__assert_fail@plt+0x2a7a4>
   3c67c:	mov	r3, #0
   3c680:	str	r3, [r1, #96]	; 0x60
   3c684:	ldr	r3, [pc, #1220]	; 3cb50 <__assert_fail@plt+0x2a58c>
   3c688:	str	r3, [r1, #100]	; 0x64
   3c68c:	mvn	r3, #2013265921	; 0x78000001
   3c690:	str	r3, [r1, #104]	; 0x68
   3c694:	mvn	r3, #-134217727	; 0xf8000001
   3c698:	str	r3, [r1, #108]	; 0x6c
   3c69c:	ldrb	r3, [r1, #88]	; 0x58
   3c6a0:	tst	r3, #4
   3c6a4:	beq	3cd8c <__assert_fail@plt+0x2a7c8>
   3c6a8:	add	r3, r1, #112	; 0x70
   3c6ac:	mov	r2, #0
   3c6b0:	str	r2, [r1, #112]	; 0x70
   3c6b4:	str	r2, [r3, #4]
   3c6b8:	str	r2, [r3, #8]
   3c6bc:	str	r2, [r3, #12]
   3c6c0:	b	3c5b0 <__assert_fail@plt+0x29fec>
   3c6c4:	add	r4, r4, #32
   3c6c8:	add	r5, r5, #1
   3c6cc:	add	r7, r7, #64	; 0x40
   3c6d0:	add	lr, lr, #4
   3c6d4:	cmp	r5, #7
   3c6d8:	bgt	3c5b0 <__assert_fail@plt+0x29fec>
   3c6dc:	mov	ip, r7
   3c6e0:	mov	r1, #0
   3c6e4:	ldr	r3, [r0]
   3c6e8:	ldrh	r3, [r3, ip]
   3c6ec:	lsr	r3, r3, #3
   3c6f0:	add	r2, r4, r1
   3c6f4:	cmp	r2, #95	; 0x5f
   3c6f8:	orreq	r3, r3, #1
   3c6fc:	tst	r3, #1
   3c700:	ldrne	r3, [lr]
   3c704:	orrne	r3, r3, r6, lsl r1
   3c708:	strne	r3, [lr]
   3c70c:	add	r1, r1, #1
   3c710:	add	ip, ip, #2
   3c714:	cmp	r1, #32
   3c718:	bne	3c6e4 <__assert_fail@plt+0x2a120>
   3c71c:	b	3c6c4 <__assert_fail@plt+0x2a100>
   3c720:	mov	r3, #6
   3c724:	str	r3, [r8]
   3c728:	mov	r3, r8
   3c72c:	mov	r2, #0
   3c730:	mov	r1, r2
   3c734:	ldr	r0, [sp, #20]
   3c738:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c73c:	mov	r4, r0
   3c740:	mov	r3, #9
   3c744:	str	r3, [r8]
   3c748:	b	3c5f0 <__assert_fail@plt+0x2a02c>
   3c74c:	mov	r3, r8
   3c750:	mov	r2, #0
   3c754:	mov	r1, r2
   3c758:	ldr	r0, [sp, #20]
   3c75c:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c760:	subs	fp, r0, #0
   3c764:	moveq	r3, #12
   3c768:	streq	r3, [sl]
   3c76c:	bne	3c650 <__assert_fail@plt+0x2a08c>
   3c770:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c774:	mov	r3, r8
   3c778:	mov	r2, #0
   3c77c:	mov	r1, r2
   3c780:	ldr	r0, [sp, #20]
   3c784:	bl	3213c <__assert_fail@plt+0x1fb78>
   3c788:	subs	fp, r0, #0
   3c78c:	moveq	r3, #12
   3c790:	streq	r3, [sl]
   3c794:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3c798:	ldr	r2, [sp, #20]
   3c79c:	ldr	r3, [r2, #92]	; 0x5c
   3c7a0:	cmp	r3, #1
   3c7a4:	ldrbgt	r3, [r2, #88]	; 0x58
   3c7a8:	orrgt	r3, r3, #2
   3c7ac:	strbgt	r3, [r2, #88]	; 0x58
   3c7b0:	b	3c520 <__assert_fail@plt+0x29f5c>
   3c7b4:	str	sl, [sp, #4]
   3c7b8:	cmp	r2, #33	; 0x21
   3c7bc:	movne	r2, #0
   3c7c0:	moveq	r2, #1
   3c7c4:	str	r2, [sp]
   3c7c8:	ldr	r3, [pc, #900]	; 3cb54 <__assert_fail@plt+0x2a590>
   3c7cc:	ldr	r2, [pc, #900]	; 3cb58 <__assert_fail@plt+0x2a594>
   3c7d0:	ldr	r1, [r0, #64]	; 0x40
   3c7d4:	ldr	r0, [sp, #20]
   3c7d8:	bl	3703c <__assert_fail@plt+0x24a78>
   3c7dc:	ldr	r2, [sl]
   3c7e0:	mov	fp, r0
   3c7e4:	adds	r3, r2, #0
   3c7e8:	movne	r3, #1
   3c7ec:	cmp	r0, #0
   3c7f0:	movne	r3, #0
   3c7f4:	cmp	r3, #0
   3c7f8:	beq	3c520 <__assert_fail@plt+0x29f5c>
   3c7fc:	mov	fp, #0
   3c800:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c804:	str	sl, [sp, #4]
   3c808:	cmp	r2, #35	; 0x23
   3c80c:	movne	r2, #0
   3c810:	moveq	r2, #1
   3c814:	str	r2, [sp]
   3c818:	ldr	r3, [pc, #828]	; 3cb5c <__assert_fail@plt+0x2a598>
   3c81c:	ldr	r2, [pc, #828]	; 3cb60 <__assert_fail@plt+0x2a59c>
   3c820:	ldr	r1, [r0, #64]	; 0x40
   3c824:	ldr	r0, [sp, #20]
   3c828:	bl	3703c <__assert_fail@plt+0x24a78>
   3c82c:	ldr	r2, [sl]
   3c830:	mov	fp, r0
   3c834:	adds	r3, r2, #0
   3c838:	movne	r3, #1
   3c83c:	cmp	r0, #0
   3c840:	movne	r3, #0
   3c844:	cmp	r3, #0
   3c848:	beq	3c520 <__assert_fail@plt+0x29f5c>
   3c84c:	mov	fp, #0
   3c850:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c854:	mov	r3, #5
   3c858:	str	r3, [sl]
   3c85c:	mov	fp, #0
   3c860:	b	3cae4 <__assert_fail@plt+0x2a520>
   3c864:	ldr	r2, [sp, #24]
   3c868:	mov	r1, r8
   3c86c:	mov	r0, r9
   3c870:	bl	33c54 <__assert_fail@plt+0x21690>
   3c874:	mov	r5, r0
   3c878:	cmn	r0, #1
   3c87c:	beq	3c8c4 <__assert_fail@plt+0x2a300>
   3c880:	cmn	r0, #2
   3c884:	beq	3c89c <__assert_fail@plt+0x2a2d8>
   3c888:	ldrb	r3, [r8, #4]
   3c88c:	cmp	r3, #24
   3c890:	beq	3c9a0 <__assert_fail@plt+0x2a3dc>
   3c894:	cmp	r3, #1
   3c898:	beq	3c8e0 <__assert_fail@plt+0x2a31c>
   3c89c:	ldr	r3, [sp, #24]
   3c8a0:	tst	r3, #2097152	; 0x200000
   3c8a4:	bne	3c8f8 <__assert_fail@plt+0x2a334>
   3c8a8:	ldrb	r3, [r8, #4]
   3c8ac:	cmp	r3, #2
   3c8b0:	bne	3c990 <__assert_fail@plt+0x2a3cc>
   3c8b4:	mov	r3, #9
   3c8b8:	str	r3, [sl]
   3c8bc:	mov	r6, #0
   3c8c0:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3c8c4:	ldrb	r3, [r8, #4]
   3c8c8:	cmp	r3, #1
   3c8cc:	bne	3c918 <__assert_fail@plt+0x2a354>
   3c8d0:	ldrb	r3, [r8]
   3c8d4:	cmp	r3, #44	; 0x2c
   3c8d8:	moveq	r5, #0
   3c8dc:	bne	3c918 <__assert_fail@plt+0x2a354>
   3c8e0:	ldrb	r3, [r8]
   3c8e4:	cmp	r3, #44	; 0x2c
   3c8e8:	beq	3c928 <__assert_fail@plt+0x2a364>
   3c8ec:	ldr	r3, [sp, #24]
   3c8f0:	tst	r3, #2097152	; 0x200000
   3c8f4:	beq	3c990 <__assert_fail@plt+0x2a3cc>
   3c8f8:	str	r4, [r9, #40]	; 0x28
   3c8fc:	add	r3, sp, #120	; 0x78
   3c900:	ldm	r3, {r0, r1}
   3c904:	stm	r8, {r0, r1}
   3c908:	mov	r3, #1
   3c90c:	strb	r3, [r8, #4]
   3c910:	mov	r6, fp
   3c914:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3c918:	mov	r3, #10
   3c91c:	str	r3, [sl]
   3c920:	mov	r6, #0
   3c924:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3c928:	ldr	r2, [sp, #24]
   3c92c:	mov	r1, r8
   3c930:	mov	r0, r9
   3c934:	bl	33c54 <__assert_fail@plt+0x21690>
   3c938:	mov	r7, r0
   3c93c:	cmn	r5, #2
   3c940:	cmnne	r0, #2
   3c944:	beq	3c89c <__assert_fail@plt+0x2a2d8>
   3c948:	cmn	r0, #1
   3c94c:	cmpne	r0, r5
   3c950:	blt	3c9a8 <__assert_fail@plt+0x2a3e4>
   3c954:	ldrb	r3, [r8, #4]
   3c958:	cmp	r3, #24
   3c95c:	bne	3c9a8 <__assert_fail@plt+0x2a3e4>
   3c960:	cmn	r7, #1
   3c964:	beq	3c9b8 <__assert_fail@plt+0x2a3f4>
   3c968:	ldr	r3, [pc, #500]	; 3cb64 <__assert_fail@plt+0x2a5a0>
   3c96c:	cmp	r7, r3
   3c970:	movle	r3, #0
   3c974:	movgt	r3, #1
   3c978:	cmp	r3, #0
   3c97c:	movne	r3, #15
   3c980:	strne	r3, [sl]
   3c984:	movne	r6, #0
   3c988:	beq	3c9d0 <__assert_fail@plt+0x2a40c>
   3c98c:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3c990:	mov	r3, #10
   3c994:	str	r3, [sl]
   3c998:	mov	r6, #0
   3c99c:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3c9a0:	mov	r7, r0
   3c9a4:	b	3c954 <__assert_fail@plt+0x2a390>
   3c9a8:	mov	r3, #10
   3c9ac:	str	r3, [sl]
   3c9b0:	mov	r6, #0
   3c9b4:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3c9b8:	ldr	r3, [pc, #420]	; 3cb64 <__assert_fail@plt+0x2a5a0>
   3c9bc:	cmp	r5, r3
   3c9c0:	movle	r3, #0
   3c9c4:	movgt	r3, #1
   3c9c8:	b	3c978 <__assert_fail@plt+0x2a3b4>
   3c9cc:	mov	r7, #1
   3c9d0:	ldr	r2, [sp, #24]
   3c9d4:	mov	r1, r9
   3c9d8:	mov	r0, r8
   3c9dc:	bl	33c38 <__assert_fail@plt+0x21674>
   3c9e0:	cmp	fp, #0
   3c9e4:	beq	3cb10 <__assert_fail@plt+0x2a54c>
   3c9e8:	orrs	r3, r5, r7
   3c9ec:	bne	3cbd8 <__assert_fail@plt+0x2a614>
   3c9f0:	mov	r2, #0
   3c9f4:	ldr	r1, [pc, #332]	; 3cb48 <__assert_fail@plt+0x2a584>
   3c9f8:	mov	r0, fp
   3c9fc:	bl	31f4c <__assert_fail@plt+0x1f988>
   3ca00:	mov	r6, #0
   3ca04:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3ca08:	cmp	r5, #1
   3ca0c:	ble	3caf0 <__assert_fail@plt+0x2a52c>
   3ca10:	str	fp, [sp, #28]
   3ca14:	mov	r4, fp
   3ca18:	mov	r6, #2
   3ca1c:	ldr	r1, [sp, #20]
   3ca20:	mov	r0, r4
   3ca24:	bl	321fc <__assert_fail@plt+0x1fc38>
   3ca28:	mov	r4, r0
   3ca2c:	mov	r3, #16
   3ca30:	mov	r2, r0
   3ca34:	ldr	r1, [sp, #28]
   3ca38:	ldr	r0, [sp, #20]
   3ca3c:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3ca40:	str	r0, [sp, #28]
   3ca44:	cmp	r0, #0
   3ca48:	cmpne	r4, #0
   3ca4c:	beq	3ca78 <__assert_fail@plt+0x2a4b4>
   3ca50:	add	r6, r6, #1
   3ca54:	cmp	r5, r6
   3ca58:	bge	3ca1c <__assert_fail@plt+0x2a458>
   3ca5c:	cmp	r5, r7
   3ca60:	beq	3cb18 <__assert_fail@plt+0x2a554>
   3ca64:	ldr	r1, [sp, #20]
   3ca68:	mov	r0, r4
   3ca6c:	bl	321fc <__assert_fail@plt+0x1fc38>
   3ca70:	subs	r4, r0, #0
   3ca74:	bne	3cbec <__assert_fail@plt+0x2a628>
   3ca78:	mov	r3, #12
   3ca7c:	str	r3, [sl]
   3ca80:	mov	r6, #0
   3ca84:	ldr	r2, [sl]
   3ca88:	adds	r3, r2, #0
   3ca8c:	movne	r3, #1
   3ca90:	cmp	r6, #0
   3ca94:	movne	r3, #0
   3ca98:	cmp	r3, #0
   3ca9c:	bne	3cb28 <__assert_fail@plt+0x2a564>
   3caa0:	ldr	r3, [sp, #24]
   3caa4:	tst	r3, #16777216	; 0x1000000
   3caa8:	beq	3cb70 <__assert_fail@plt+0x2a5ac>
   3caac:	ldrb	r3, [r8, #4]
   3cab0:	mov	fp, r6
   3cab4:	cmp	r3, #23
   3cab8:	cmpne	r3, #11
   3cabc:	bne	3cb74 <__assert_fail@plt+0x2a5b0>
   3cac0:	cmp	r6, #0
   3cac4:	beq	3cad8 <__assert_fail@plt+0x2a514>
   3cac8:	mov	r2, #0
   3cacc:	ldr	r1, [pc, #116]	; 3cb48 <__assert_fail@plt+0x2a584>
   3cad0:	mov	r0, r6
   3cad4:	bl	31f4c <__assert_fail@plt+0x1f988>
   3cad8:	mov	r3, #13
   3cadc:	str	r3, [sl]
   3cae0:	mov	fp, #0
   3cae4:	mov	r0, fp
   3cae8:	add	sp, sp, #156	; 0x9c
   3caec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3caf0:	str	fp, [sp, #28]
   3caf4:	mov	r4, fp
   3caf8:	b	3ca5c <__assert_fail@plt+0x2a498>
   3cafc:	ldr	r2, [r4, #20]
   3cb00:	ldr	r1, [pc, #96]	; 3cb68 <__assert_fail@plt+0x2a5a4>
   3cb04:	mov	r0, r4
   3cb08:	bl	31f4c <__assert_fail@plt+0x1f988>
   3cb0c:	b	3cbf8 <__assert_fail@plt+0x2a634>
   3cb10:	mov	r6, fp
   3cb14:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3cb18:	ldr	r6, [sp, #28]
   3cb1c:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3cb20:	mov	r6, fp
   3cb24:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3cb28:	cmp	fp, #0
   3cb2c:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3cb30:	mov	r2, #0
   3cb34:	ldr	r1, [pc, #12]	; 3cb48 <__assert_fail@plt+0x2a584>
   3cb38:	mov	r0, fp
   3cb3c:	bl	31f4c <__assert_fail@plt+0x1f988>
   3cb40:	mov	fp, #0
   3cb44:	b	3cae4 <__assert_fail@plt+0x2a520>
   3cb48:	andeq	r3, r3, r8, ror #26
   3cb4c:	andeq	r0, r0, pc, lsl #6
   3cb50:	mvnseq	r0, #0
   3cb54:	strdeq	r8, [r4], -ip
   3cb58:			; <UNDEFINED> instruction: 0x000484bc
   3cb5c:	andeq	r4, r4, r0, lsl r3
   3cb60:	andeq	r8, r4, ip, asr #9
   3cb64:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   3cb68:	andeq	r1, r3, r0, lsr #17
   3cb6c:	addeq	r0, ip, r0, lsl #16
   3cb70:	mov	fp, r6
   3cb74:	ldrb	r3, [r8, #4]
   3cb78:	cmp	r3, #23
   3cb7c:	bhi	3cae4 <__assert_fail@plt+0x2a520>
   3cb80:	cmp	r3, #18
   3cb84:	movne	r5, #0
   3cb88:	moveq	r5, #1
   3cb8c:	ldr	r2, [pc, #-40]	; 3cb6c <__assert_fail@plt+0x2a5a8>
   3cb90:	lsr	r2, r2, r3
   3cb94:	tst	r2, #1
   3cb98:	beq	3cae4 <__assert_fail@plt+0x2a520>
   3cb9c:	ldr	r4, [r9, #40]	; 0x28
   3cba0:	ldm	r8, {r0, r1}
   3cba4:	add	r2, sp, #120	; 0x78
   3cba8:	stm	r2, {r0, r1}
   3cbac:	cmp	r3, #23
   3cbb0:	beq	3c864 <__assert_fail@plt+0x2a2a0>
   3cbb4:	cmp	r3, #19
   3cbb8:	beq	3c9cc <__assert_fail@plt+0x2a408>
   3cbbc:	ldr	r2, [sp, #24]
   3cbc0:	mov	r1, r9
   3cbc4:	mov	r0, r8
   3cbc8:	bl	33c38 <__assert_fail@plt+0x21674>
   3cbcc:	cmp	fp, #0
   3cbd0:	beq	3cb20 <__assert_fail@plt+0x2a55c>
   3cbd4:	mvn	r7, #0
   3cbd8:	cmp	r5, #0
   3cbdc:	movle	r4, fp
   3cbe0:	movle	r3, #0
   3cbe4:	strle	r3, [sp, #28]
   3cbe8:	bgt	3ca08 <__assert_fail@plt+0x2a444>
   3cbec:	ldrb	r3, [r4, #24]
   3cbf0:	cmp	r3, #17
   3cbf4:	beq	3cafc <__assert_fail@plt+0x2a538>
   3cbf8:	cmn	r7, #1
   3cbfc:	moveq	r3, #11
   3cc00:	movne	r3, #10
   3cc04:	mov	r2, #0
   3cc08:	mov	r1, r4
   3cc0c:	ldr	r0, [sp, #20]
   3cc10:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3cc14:	subs	r6, r0, #0
   3cc18:	beq	3ca78 <__assert_fail@plt+0x2a4b4>
   3cc1c:	add	r5, r5, #2
   3cc20:	cmp	r7, r5
   3cc24:	blt	3cc84 <__assert_fail@plt+0x2a6c0>
   3cc28:	ldr	r1, [sp, #20]
   3cc2c:	mov	r0, r4
   3cc30:	bl	321fc <__assert_fail@plt+0x1fc38>
   3cc34:	mov	r4, r0
   3cc38:	mov	r3, #16
   3cc3c:	mov	r2, r0
   3cc40:	mov	r1, r6
   3cc44:	ldr	r6, [sp, #20]
   3cc48:	mov	r0, r6
   3cc4c:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3cc50:	mov	r1, r0
   3cc54:	cmp	r0, #0
   3cc58:	cmpne	r4, #0
   3cc5c:	beq	3ca78 <__assert_fail@plt+0x2a4b4>
   3cc60:	mov	r3, #10
   3cc64:	mov	r2, #0
   3cc68:	mov	r0, r6
   3cc6c:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3cc70:	subs	r6, r0, #0
   3cc74:	beq	3ca78 <__assert_fail@plt+0x2a4b4>
   3cc78:	add	r5, r5, #1
   3cc7c:	cmp	r7, r5
   3cc80:	bge	3cc28 <__assert_fail@plt+0x2a664>
   3cc84:	ldr	r3, [sp, #28]
   3cc88:	cmp	r3, #0
   3cc8c:	beq	3caa0 <__assert_fail@plt+0x2a4dc>
   3cc90:	mov	r3, #16
   3cc94:	mov	r2, r6
   3cc98:	ldr	r1, [sp, #28]
   3cc9c:	ldr	r0, [sp, #20]
   3cca0:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3cca4:	mov	r6, r0
   3cca8:	b	3ca84 <__assert_fail@plt+0x2a4c0>
   3ccac:	mov	fp, #0
   3ccb0:	b	3cae4 <__assert_fail@plt+0x2a520>
   3ccb4:	mov	fp, #0
   3ccb8:	b	3cae4 <__assert_fail@plt+0x2a520>
   3ccbc:	ldr	sl, [sp, #196]	; 0xc4
   3ccc0:	str	r0, [sl]
   3ccc4:	b	3be70 <__assert_fail@plt+0x298ac>
   3ccc8:	ldr	sl, [sp, #196]	; 0xc4
   3cccc:	mov	r3, #11
   3ccd0:	b	3be6c <__assert_fail@plt+0x298a8>
   3ccd4:	ldr	sl, [sp, #196]	; 0xc4
   3ccd8:	mov	r3, #3
   3ccdc:	b	3be6c <__assert_fail@plt+0x298a8>
   3cce0:	ldr	sl, [sp, #196]	; 0xc4
   3cce4:	mov	r3, #11
   3cce8:	b	3be6c <__assert_fail@plt+0x298a8>
   3ccec:	mov	r3, #0
   3ccf0:	ldr	r2, [sp, #196]	; 0xc4
   3ccf4:	str	r3, [r2]
   3ccf8:	b	3c108 <__assert_fail@plt+0x29b44>
   3ccfc:	ldr	sl, [sp, #196]	; 0xc4
   3cd00:	mov	r3, #3
   3cd04:	str	r3, [sl]
   3cd08:	b	3be70 <__assert_fail@plt+0x298ac>
   3cd0c:	ldr	sl, [sp, #196]	; 0xc4
   3cd10:	mov	r3, #3
   3cd14:	str	r3, [sl]
   3cd18:	b	3be70 <__assert_fail@plt+0x298ac>
   3cd1c:	mov	r3, #3
   3cd20:	strb	r3, [sp, #124]	; 0x7c
   3cd24:	add	r3, sp, #152	; 0x98
   3cd28:	str	r5, [r3, #-32]!	; 0xffffffe0
   3cd2c:	mov	r2, #0
   3cd30:	mov	r1, r2
   3cd34:	ldr	r0, [sp, #20]
   3cd38:	bl	3213c <__assert_fail@plt+0x1fb78>
   3cd3c:	subs	r1, r0, #0
   3cd40:	beq	3cd5c <__assert_fail@plt+0x2a798>
   3cd44:	mov	r3, #10
   3cd48:	mov	r2, fp
   3cd4c:	ldr	r0, [sp, #20]
   3cd50:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3cd54:	subs	fp, r0, #0
   3cd58:	bne	3c520 <__assert_fail@plt+0x29f5c>
   3cd5c:	mov	r3, #12
   3cd60:	str	r3, [sl]
   3cd64:	b	3be70 <__assert_fail@plt+0x298ac>
   3cd68:	mov	r4, #0
   3cd6c:	mov	r5, r4
   3cd70:	bl	12288 <__ctype_b_loc@plt>
   3cd74:	lsl	r7, r4, #1
   3cd78:	add	lr, r5, #24
   3cd7c:	ldr	r3, [sp, #20]
   3cd80:	add	lr, r3, lr, lsl #2
   3cd84:	mov	r6, #1
   3cd88:	b	3c6dc <__assert_fail@plt+0x2a118>
   3cd8c:	mov	r4, #128	; 0x80
   3cd90:	mov	r5, #4
   3cd94:	b	3cd70 <__assert_fail@plt+0x2a7ac>
   3cd98:	cmp	r4, #3
   3cd9c:	bne	3beec <__assert_fail@plt+0x29928>
   3cda0:	ldr	r0, [sp, #76]	; 0x4c
   3cda4:	bl	122d0 <strlen@plt>
   3cda8:	cmp	r0, #1
   3cdac:	bls	3bed8 <__assert_fail@plt+0x29914>
   3cdb0:	ldr	sl, [sp, #196]	; 0xc4
   3cdb4:	mov	r3, #3
   3cdb8:	b	3c0e4 <__assert_fail@plt+0x29b20>
   3cdbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cdc0:	sub	sp, sp, #20
   3cdc4:	mov	fp, r0
   3cdc8:	mov	r9, r1
   3cdcc:	mov	r7, r2
   3cdd0:	mov	sl, r3
   3cdd4:	ldr	r8, [sp, #56]	; 0x38
   3cdd8:	ldr	r6, [sp, #60]	; 0x3c
   3cddc:	ldr	ip, [r1]
   3cde0:	str	ip, [sp, #12]
   3cde4:	str	r6, [sp, #4]
   3cde8:	str	r8, [sp]
   3cdec:	bl	3ba10 <__assert_fail@plt+0x2944c>
   3cdf0:	ldr	r3, [r6]
   3cdf4:	mov	r4, r0
   3cdf8:	adds	r2, r3, #0
   3cdfc:	movne	r2, #1
   3ce00:	cmp	r0, #0
   3ce04:	movne	r2, #0
   3ce08:	cmp	r2, #0
   3ce0c:	beq	3ce60 <__assert_fail@plt+0x2a89c>
   3ce10:	mov	r4, #0
   3ce14:	b	3ce34 <__assert_fail@plt+0x2a870>
   3ce18:	cmp	r4, #0
   3ce1c:	beq	3ce34 <__assert_fail@plt+0x2a870>
   3ce20:	mov	r2, #0
   3ce24:	ldr	r1, [pc, #232]	; 3cf14 <__assert_fail@plt+0x2a950>
   3ce28:	mov	r0, r4
   3ce2c:	bl	31f4c <__assert_fail@plt+0x1f988>
   3ce30:	mov	r4, #0
   3ce34:	mov	r0, r4
   3ce38:	add	sp, sp, #20
   3ce3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ce40:	mov	r3, #16
   3ce44:	mov	r2, r5
   3ce48:	mov	r1, r4
   3ce4c:	ldr	r0, [sp, #12]
   3ce50:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3ce54:	cmp	r0, #0
   3ce58:	beq	3cedc <__assert_fail@plt+0x2a918>
   3ce5c:	mov	r4, r0
   3ce60:	ldrb	r3, [r7, #4]
   3ce64:	and	r2, r3, #247	; 0xf7
   3ce68:	cmp	r2, #2
   3ce6c:	beq	3ce34 <__assert_fail@plt+0x2a870>
   3ce70:	subs	r3, r3, #9
   3ce74:	movne	r3, #1
   3ce78:	cmp	r8, #0
   3ce7c:	orreq	r3, r3, #1
   3ce80:	cmp	r3, #0
   3ce84:	beq	3ce34 <__assert_fail@plt+0x2a870>
   3ce88:	str	r6, [sp, #4]
   3ce8c:	str	r8, [sp]
   3ce90:	mov	r3, sl
   3ce94:	mov	r2, r7
   3ce98:	mov	r1, r9
   3ce9c:	mov	r0, fp
   3cea0:	bl	3ba10 <__assert_fail@plt+0x2944c>
   3cea4:	ldr	r3, [r6]
   3cea8:	mov	r5, r0
   3ceac:	adds	r2, r3, #0
   3ceb0:	movne	r2, #1
   3ceb4:	cmp	r0, #0
   3ceb8:	movne	r2, #0
   3cebc:	cmp	r2, #0
   3cec0:	bne	3ce18 <__assert_fail@plt+0x2a854>
   3cec4:	cmp	r4, #0
   3cec8:	cmpne	r5, #0
   3cecc:	bne	3ce40 <__assert_fail@plt+0x2a87c>
   3ced0:	cmp	r4, #0
   3ced4:	moveq	r4, r5
   3ced8:	b	3ce60 <__assert_fail@plt+0x2a89c>
   3cedc:	mov	fp, r0
   3cee0:	ldr	r7, [pc, #44]	; 3cf14 <__assert_fail@plt+0x2a950>
   3cee4:	mov	r2, #0
   3cee8:	mov	r1, r7
   3ceec:	mov	r0, r5
   3cef0:	bl	31f4c <__assert_fail@plt+0x1f988>
   3cef4:	mov	r2, #0
   3cef8:	mov	r1, r7
   3cefc:	mov	r0, r4
   3cf00:	bl	31f4c <__assert_fail@plt+0x1f988>
   3cf04:	mov	r3, #12
   3cf08:	str	r3, [r6]
   3cf0c:	mov	r4, fp
   3cf10:	b	3ce34 <__assert_fail@plt+0x2a870>
   3cf14:	andeq	r3, r3, r8, ror #26
   3cf18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cf1c:	sub	sp, sp, #28
   3cf20:	str	r0, [sp, #12]
   3cf24:	str	r1, [sp, #16]
   3cf28:	mov	r4, r2
   3cf2c:	mov	r6, r3
   3cf30:	str	r3, [sp, #20]
   3cf34:	ldr	r9, [sp, #64]	; 0x40
   3cf38:	ldr	r8, [sp, #68]	; 0x44
   3cf3c:	ldr	r5, [r1]
   3cf40:	ldr	fp, [r5, #84]	; 0x54
   3cf44:	str	r8, [sp, #4]
   3cf48:	str	r9, [sp]
   3cf4c:	bl	3cdbc <__assert_fail@plt+0x2a7f8>
   3cf50:	ldr	r3, [r8]
   3cf54:	mov	r7, r0
   3cf58:	adds	r2, r3, #0
   3cf5c:	movne	r2, #1
   3cf60:	cmp	r0, #0
   3cf64:	movne	r2, #0
   3cf68:	cmp	r2, #0
   3cf6c:	bne	3d068 <__assert_fail@plt+0x2aaa4>
   3cf70:	orr	sl, r6, #8388608	; 0x800000
   3cf74:	b	3cfe0 <__assert_fail@plt+0x2aa1c>
   3cf78:	ldr	r6, [r5, #84]	; 0x54
   3cf7c:	str	fp, [r5, #84]	; 0x54
   3cf80:	str	r8, [sp, #4]
   3cf84:	str	r9, [sp]
   3cf88:	ldr	r3, [sp, #20]
   3cf8c:	mov	r2, r4
   3cf90:	ldr	r1, [sp, #16]
   3cf94:	ldr	r0, [sp, #12]
   3cf98:	bl	3cdbc <__assert_fail@plt+0x2a7f8>
   3cf9c:	ldr	r3, [r8]
   3cfa0:	mov	r2, r0
   3cfa4:	adds	r1, r3, #0
   3cfa8:	movne	r1, #1
   3cfac:	cmp	r0, #0
   3cfb0:	movne	r1, #0
   3cfb4:	cmp	r1, #0
   3cfb8:	bne	3d02c <__assert_fail@plt+0x2aa68>
   3cfbc:	ldr	r3, [r5, #84]	; 0x54
   3cfc0:	orr	r6, r3, r6
   3cfc4:	str	r6, [r5, #84]	; 0x54
   3cfc8:	mov	r3, #10
   3cfcc:	mov	r1, r7
   3cfd0:	mov	r0, r5
   3cfd4:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3cfd8:	subs	r7, r0, #0
   3cfdc:	beq	3d054 <__assert_fail@plt+0x2aa90>
   3cfe0:	ldrb	r3, [r4, #4]
   3cfe4:	cmp	r3, #10
   3cfe8:	bne	3d05c <__assert_fail@plt+0x2aa98>
   3cfec:	mov	r2, sl
   3cff0:	ldr	r1, [sp, #12]
   3cff4:	mov	r0, r4
   3cff8:	bl	33c38 <__assert_fail@plt+0x21674>
   3cffc:	ldrb	r2, [r4, #4]
   3d000:	and	r3, r2, #247	; 0xf7
   3d004:	cmp	r3, #2
   3d008:	beq	3d04c <__assert_fail@plt+0x2aa88>
   3d00c:	clz	r3, r9
   3d010:	lsr	r3, r3, #5
   3d014:	cmp	r2, #9
   3d018:	orrne	r3, r3, #1
   3d01c:	cmp	r3, #0
   3d020:	bne	3cf78 <__assert_fail@plt+0x2a9b4>
   3d024:	mov	r2, #0
   3d028:	b	3cfc8 <__assert_fail@plt+0x2aa04>
   3d02c:	cmp	r7, #0
   3d030:	beq	3d05c <__assert_fail@plt+0x2aa98>
   3d034:	mov	r2, #0
   3d038:	ldr	r1, [pc, #48]	; 3d070 <__assert_fail@plt+0x2aaac>
   3d03c:	mov	r0, r7
   3d040:	bl	31f4c <__assert_fail@plt+0x1f988>
   3d044:	mov	r7, #0
   3d048:	b	3d05c <__assert_fail@plt+0x2aa98>
   3d04c:	mov	r2, #0
   3d050:	b	3cfc8 <__assert_fail@plt+0x2aa04>
   3d054:	mov	r3, #12
   3d058:	str	r3, [r8]
   3d05c:	mov	r0, r7
   3d060:	add	sp, sp, #28
   3d064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d068:	mov	r7, #0
   3d06c:	b	3d05c <__assert_fail@plt+0x2aa98>
   3d070:	andeq	r3, r3, r8, ror #26
   3d074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d078:	sub	sp, sp, #124	; 0x7c
   3d07c:	mov	sl, r0
   3d080:	str	r1, [sp, #12]
   3d084:	mov	r9, r2
   3d088:	mov	fp, r3
   3d08c:	mov	r2, #0
   3d090:	str	r2, [sp, #116]	; 0x74
   3d094:	ldrb	r3, [r0, #28]
   3d098:	str	fp, [r0, #12]
   3d09c:	str	r2, [r0, #8]
   3d0a0:	str	r2, [r0, #24]
   3d0a4:	and	r3, r3, #144	; 0x90
   3d0a8:	strb	r3, [r0, #28]
   3d0ac:	ldr	r6, [r0]
   3d0b0:	ldr	r3, [r0, #4]
   3d0b4:	cmp	r3, #159	; 0x9f
   3d0b8:	bls	3d314 <__assert_fail@plt+0x2ad50>
   3d0bc:	mov	r2, #160	; 0xa0
   3d0c0:	str	r2, [sl, #8]
   3d0c4:	mov	r1, #0
   3d0c8:	mov	r0, r6
   3d0cc:	bl	12348 <memset@plt>
   3d0d0:	mov	r3, #31
   3d0d4:	str	r3, [r6, #64]	; 0x40
   3d0d8:	ldr	r3, [pc, #3044]	; 3dcc4 <__assert_fail@plt+0x2b700>
   3d0dc:	cmp	r9, r3
   3d0e0:	bhi	3dbfc <__assert_fail@plt+0x2b638>
   3d0e4:	add	r0, r9, #1
   3d0e8:	str	r0, [r6, #4]
   3d0ec:	lsl	r0, r0, #3
   3d0f0:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d0f4:	str	r0, [r6]
   3d0f8:	cmp	r9, #0
   3d0fc:	beq	3d338 <__assert_fail@plt+0x2ad74>
   3d100:	mov	r4, #1
   3d104:	lsl	r4, r4, #1
   3d108:	cmp	r9, r4
   3d10c:	bcs	3d104 <__assert_fail@plt+0x2ab40>
   3d110:	mov	r1, r4
   3d114:	mov	r0, #12
   3d118:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   3d11c:	str	r0, [r6, #32]
   3d120:	sub	r4, r4, #1
   3d124:	str	r4, [r6, #68]	; 0x44
   3d128:	bl	12168 <__ctype_get_mb_cur_max@plt>
   3d12c:	str	r0, [r6, #92]	; 0x5c
   3d130:	mov	r0, #14
   3d134:	bl	12450 <nl_langinfo@plt>
   3d138:	ldrb	r3, [r0]
   3d13c:	and	r3, r3, #223	; 0xdf
   3d140:	cmp	r3, #85	; 0x55
   3d144:	bne	3d194 <__assert_fail@plt+0x2abd0>
   3d148:	ldrb	r3, [r0, #1]
   3d14c:	and	r3, r3, #223	; 0xdf
   3d150:	cmp	r3, #84	; 0x54
   3d154:	bne	3d194 <__assert_fail@plt+0x2abd0>
   3d158:	ldrb	r3, [r0, #2]
   3d15c:	and	r3, r3, #223	; 0xdf
   3d160:	cmp	r3, #70	; 0x46
   3d164:	bne	3d194 <__assert_fail@plt+0x2abd0>
   3d168:	ldrb	r3, [r0, #3]
   3d16c:	cmp	r3, #45	; 0x2d
   3d170:	moveq	r3, #4
   3d174:	movne	r3, #3
   3d178:	ldr	r1, [pc, #2888]	; 3dcc8 <__assert_fail@plt+0x2b704>
   3d17c:	add	r0, r0, r3
   3d180:	bl	11f1c <strcmp@plt>
   3d184:	cmp	r0, #0
   3d188:	ldrbeq	r3, [r6, #88]	; 0x58
   3d18c:	orreq	r3, r3, #4
   3d190:	strbeq	r3, [r6, #88]	; 0x58
   3d194:	ldrb	r3, [r6, #88]	; 0x58
   3d198:	bic	r3, r3, #8
   3d19c:	strb	r3, [r6, #88]	; 0x58
   3d1a0:	ldr	r3, [r6, #92]	; 0x5c
   3d1a4:	cmp	r3, #1
   3d1a8:	ble	3d1c0 <__assert_fail@plt+0x2abfc>
   3d1ac:	ldrb	r3, [r6, #88]	; 0x58
   3d1b0:	tst	r3, #4
   3d1b4:	beq	3d340 <__assert_fail@plt+0x2ad7c>
   3d1b8:	ldr	r3, [pc, #2828]	; 3dccc <__assert_fail@plt+0x2b708>
   3d1bc:	str	r3, [r6, #60]	; 0x3c
   3d1c0:	ldr	r3, [r6]
   3d1c4:	cmp	r3, #0
   3d1c8:	beq	3dbfc <__assert_fail@plt+0x2b638>
   3d1cc:	ldr	r3, [r6, #32]
   3d1d0:	cmp	r3, #0
   3d1d4:	beq	3dbfc <__assert_fail@plt+0x2b638>
   3d1d8:	mov	r3, #0
   3d1dc:	str	r3, [sp, #116]	; 0x74
   3d1e0:	mov	r3, #1
   3d1e4:	ldr	r2, [pc, #2788]	; 3dcd0 <__assert_fail@plt+0x2b70c>
   3d1e8:	cmp	r2, #0
   3d1ec:	moveq	r3, #0
   3d1f0:	mov	r2, #1
   3d1f4:	ldr	r1, [pc, #2776]	; 3dcd4 <__assert_fail@plt+0x2b710>
   3d1f8:	cmp	r1, #0
   3d1fc:	moveq	r2, #0
   3d200:	orr	r3, r3, r2
   3d204:	tst	r3, #255	; 0xff
   3d208:	bne	3d3c4 <__assert_fail@plt+0x2ae00>
   3d20c:	mov	r7, r9
   3d210:	ldr	r5, [sl, #20]
   3d214:	ands	r8, fp, #4194304	; 0x400000
   3d218:	movne	r4, #1
   3d21c:	moveq	r4, #0
   3d220:	mov	r2, #84	; 0x54
   3d224:	mov	r1, #0
   3d228:	add	r0, sp, #32
   3d22c:	bl	12348 <memset@plt>
   3d230:	ldr	r3, [sp, #12]
   3d234:	str	r3, [sp, #32]
   3d238:	str	r9, [sp, #80]	; 0x50
   3d23c:	str	r9, [sp, #76]	; 0x4c
   3d240:	str	r5, [sp, #96]	; 0x60
   3d244:	strb	r4, [sp, #104]	; 0x68
   3d248:	cmp	r5, #0
   3d24c:	orrne	r4, r4, #1
   3d250:	strb	r4, [sp, #107]	; 0x6b
   3d254:	ldr	r3, [r6, #92]	; 0x5c
   3d258:	str	r3, [sp, #112]	; 0x70
   3d25c:	ldrb	r3, [r6, #88]	; 0x58
   3d260:	lsr	r2, r3, #2
   3d264:	and	r2, r2, #1
   3d268:	strb	r2, [sp, #105]	; 0x69
   3d26c:	lsr	r3, r3, #3
   3d270:	and	r3, r3, #1
   3d274:	strb	r3, [sp, #106]	; 0x6a
   3d278:	str	r9, [sp, #88]	; 0x58
   3d27c:	str	r9, [sp, #84]	; 0x54
   3d280:	cmp	r9, #0
   3d284:	ble	3d29c <__assert_fail@plt+0x2acd8>
   3d288:	add	r1, r9, #1
   3d28c:	add	r0, sp, #32
   3d290:	bl	32028 <__assert_fail@plt+0x1fa64>
   3d294:	cmp	r0, #0
   3d298:	bne	3d30c <__assert_fail@plt+0x2ad48>
   3d29c:	ldrb	r3, [sp, #107]	; 0x6b
   3d2a0:	cmp	r3, #0
   3d2a4:	ldrne	r3, [sp, #36]	; 0x24
   3d2a8:	ldreq	r3, [sp, #12]
   3d2ac:	str	r3, [sp, #36]	; 0x24
   3d2b0:	cmp	r8, #0
   3d2b4:	beq	3d3fc <__assert_fail@plt+0x2ae38>
   3d2b8:	ldr	r3, [r6, #92]	; 0x5c
   3d2bc:	cmp	r3, #1
   3d2c0:	ble	3d3f0 <__assert_fail@plt+0x2ae2c>
   3d2c4:	add	r0, sp, #32
   3d2c8:	bl	32790 <__assert_fail@plt+0x201cc>
   3d2cc:	cmp	r0, #0
   3d2d0:	bne	3d30c <__assert_fail@plt+0x2ad48>
   3d2d4:	ldr	r3, [sp, #64]	; 0x40
   3d2d8:	cmp	r7, r3
   3d2dc:	ble	3d424 <__assert_fail@plt+0x2ae60>
   3d2e0:	ldr	r1, [sp, #68]	; 0x44
   3d2e4:	ldr	r2, [r6, #92]	; 0x5c
   3d2e8:	ldr	r3, [sp, #60]	; 0x3c
   3d2ec:	add	r3, r3, r2
   3d2f0:	cmp	r1, r3
   3d2f4:	bgt	3d424 <__assert_fail@plt+0x2ae60>
   3d2f8:	lsl	r1, r1, #1
   3d2fc:	add	r0, sp, #32
   3d300:	bl	32028 <__assert_fail@plt+0x1fa64>
   3d304:	cmp	r0, #0
   3d308:	beq	3d2c4 <__assert_fail@plt+0x2ad00>
   3d30c:	str	r0, [sp, #116]	; 0x74
   3d310:	b	3dc64 <__assert_fail@plt+0x2b6a0>
   3d314:	mov	r1, #160	; 0xa0
   3d318:	mov	r0, r6
   3d31c:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3d320:	subs	r6, r0, #0
   3d324:	beq	3dbf4 <__assert_fail@plt+0x2b630>
   3d328:	mov	r3, #160	; 0xa0
   3d32c:	str	r3, [sl, #4]
   3d330:	str	r6, [sl]
   3d334:	b	3d0bc <__assert_fail@plt+0x2aaf8>
   3d338:	mov	r4, #1
   3d33c:	b	3d110 <__assert_fail@plt+0x2ab4c>
   3d340:	mov	r1, #1
   3d344:	mov	r0, #32
   3d348:	bl	2ddf8 <__assert_fail@plt+0x1b834>
   3d34c:	str	r0, [r6, #60]	; 0x3c
   3d350:	cmp	r0, #0
   3d354:	beq	3dbfc <__assert_fail@plt+0x2b638>
   3d358:	mov	r7, #0
   3d35c:	mov	r8, #1
   3d360:	b	3d3b8 <__assert_fail@plt+0x2adf4>
   3d364:	add	r5, r5, #1
   3d368:	add	r4, r4, #1
   3d36c:	cmp	r5, #32
   3d370:	beq	3d3ac <__assert_fail@plt+0x2ade8>
   3d374:	mov	r0, r4
   3d378:	bl	12378 <btowc@plt>
   3d37c:	cmn	r0, #1
   3d380:	ldrne	r2, [r6, #60]	; 0x3c
   3d384:	ldrne	r3, [r2, r7]
   3d388:	orrne	r3, r3, r8, lsl r5
   3d38c:	strne	r3, [r2, r7]
   3d390:	bics	r3, r4, #127	; 0x7f
   3d394:	bne	3d364 <__assert_fail@plt+0x2ada0>
   3d398:	cmp	r0, r4
   3d39c:	ldrbne	r3, [r6, #88]	; 0x58
   3d3a0:	orrne	r3, r3, #8
   3d3a4:	strbne	r3, [r6, #88]	; 0x58
   3d3a8:	b	3d364 <__assert_fail@plt+0x2ada0>
   3d3ac:	add	r7, r7, #4
   3d3b0:	cmp	r7, #32
   3d3b4:	beq	3d1c0 <__assert_fail@plt+0x2abfc>
   3d3b8:	lsl	r4, r7, #3
   3d3bc:	mov	r5, #0
   3d3c0:	b	3d374 <__assert_fail@plt+0x2adb0>
   3d3c4:	mov	r1, #0
   3d3c8:	add	r0, r6, #136	; 0x88
   3d3cc:	bl	12018 <pthread_mutex_init@plt>
   3d3d0:	cmp	r0, #0
   3d3d4:	movne	r3, #12
   3d3d8:	strne	r3, [sp, #116]	; 0x74
   3d3dc:	bne	3dc04 <__assert_fail@plt+0x2b640>
   3d3e0:	ldr	r3, [sp, #116]	; 0x74
   3d3e4:	cmp	r3, #0
   3d3e8:	beq	3d20c <__assert_fail@plt+0x2ac48>
   3d3ec:	b	3dc04 <__assert_fail@plt+0x2b640>
   3d3f0:	add	r0, sp, #32
   3d3f4:	bl	33118 <__assert_fail@plt+0x20b54>
   3d3f8:	b	3d424 <__assert_fail@plt+0x2ae60>
   3d3fc:	ldr	r3, [r6, #92]	; 0x5c
   3d400:	cmp	r3, #1
   3d404:	bgt	3d41c <__assert_fail@plt+0x2ae58>
   3d408:	cmp	r4, #0
   3d40c:	beq	3d67c <__assert_fail@plt+0x2b0b8>
   3d410:	add	r0, sp, #32
   3d414:	bl	3144c <__assert_fail@plt+0x1ee88>
   3d418:	b	3d424 <__assert_fail@plt+0x2ae60>
   3d41c:	add	r0, sp, #32
   3d420:	bl	325f4 <__assert_fail@plt+0x20030>
   3d424:	mov	r4, #0
   3d428:	str	r4, [sp, #116]	; 0x74
   3d42c:	str	r4, [sl, #24]
   3d430:	ldr	r5, [sl]
   3d434:	str	fp, [r5, #128]	; 0x80
   3d438:	orr	r2, fp, #8388608	; 0x800000
   3d43c:	add	r1, sp, #32
   3d440:	add	r0, sp, #20
   3d444:	bl	33c38 <__assert_fail@plt+0x21674>
   3d448:	add	r3, sp, #116	; 0x74
   3d44c:	str	r3, [sp, #4]
   3d450:	str	r4, [sp]
   3d454:	mov	r3, fp
   3d458:	add	r2, sp, #20
   3d45c:	mov	r1, sl
   3d460:	add	r0, sp, #32
   3d464:	bl	3cf18 <__assert_fail@plt+0x2a954>
   3d468:	mov	r7, r0
   3d46c:	ldr	r3, [sp, #116]	; 0x74
   3d470:	subs	r2, r3, r4
   3d474:	movne	r2, #1
   3d478:	cmp	r0, r4
   3d47c:	movne	r2, #0
   3d480:	cmp	r2, r4
   3d484:	bne	3dc20 <__assert_fail@plt+0x2b65c>
   3d488:	mov	r3, #2
   3d48c:	mov	r2, #0
   3d490:	mov	r1, r2
   3d494:	mov	r0, r5
   3d498:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3d49c:	mov	r4, r0
   3d4a0:	cmp	r7, #0
   3d4a4:	beq	3d4bc <__assert_fail@plt+0x2aef8>
   3d4a8:	mov	r3, #16
   3d4ac:	mov	r2, r4
   3d4b0:	mov	r1, r7
   3d4b4:	mov	r0, r5
   3d4b8:	bl	322b0 <__assert_fail@plt+0x1fcec>
   3d4bc:	cmp	r0, #0
   3d4c0:	cmpne	r4, #0
   3d4c4:	moveq	r3, #12
   3d4c8:	streq	r3, [sp, #116]	; 0x74
   3d4cc:	beq	3dc20 <__assert_fail@plt+0x2b65c>
   3d4d0:	str	r0, [r6, #52]	; 0x34
   3d4d4:	cmp	r0, #0
   3d4d8:	beq	3dc64 <__assert_fail@plt+0x2b6a0>
   3d4dc:	ldr	r4, [sl]
   3d4e0:	ldr	r0, [r4, #4]
   3d4e4:	lsl	r0, r0, #2
   3d4e8:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d4ec:	str	r0, [r4, #12]
   3d4f0:	ldr	r0, [r4, #4]
   3d4f4:	lsl	r0, r0, #2
   3d4f8:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d4fc:	str	r0, [r4, #16]
   3d500:	ldr	r0, [r4, #4]
   3d504:	add	r0, r0, r0, lsl #1
   3d508:	lsl	r0, r0, #2
   3d50c:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d510:	str	r0, [r4, #20]
   3d514:	ldr	r0, [r4, #4]
   3d518:	add	r0, r0, r0, lsl #1
   3d51c:	lsl	r0, r0, #2
   3d520:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d524:	str	r0, [r4, #24]
   3d528:	ldr	r3, [r4, #12]
   3d52c:	cmp	r3, #0
   3d530:	beq	3dc2c <__assert_fail@plt+0x2b668>
   3d534:	ldr	r3, [r4, #16]
   3d538:	cmp	r3, #0
   3d53c:	beq	3dc5c <__assert_fail@plt+0x2b698>
   3d540:	ldr	fp, [r4, #20]
   3d544:	cmp	r0, #0
   3d548:	cmpne	fp, #0
   3d54c:	moveq	fp, #1
   3d550:	movne	fp, #0
   3d554:	beq	3dc34 <__assert_fail@plt+0x2b670>
   3d558:	ldr	r0, [sl, #24]
   3d55c:	lsl	r0, r0, #2
   3d560:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d564:	str	r0, [r4, #132]	; 0x84
   3d568:	cmp	r0, #0
   3d56c:	beq	3d5dc <__assert_fail@plt+0x2b018>
   3d570:	ldr	r3, [sl, #24]
   3d574:	cmp	r3, #0
   3d578:	beq	3d598 <__assert_fail@plt+0x2afd4>
   3d57c:	mov	r3, #0
   3d580:	ldr	r2, [r4, #132]	; 0x84
   3d584:	str	r3, [r2, r3, lsl #2]
   3d588:	add	r3, r3, #1
   3d58c:	ldr	r2, [sl, #24]
   3d590:	cmp	r3, r2
   3d594:	bcc	3d580 <__assert_fail@plt+0x2afbc>
   3d598:	mov	r2, r4
   3d59c:	ldr	r1, [pc, #1844]	; 3dcd8 <__assert_fail@plt+0x2b714>
   3d5a0:	ldr	r0, [r4, #52]	; 0x34
   3d5a4:	bl	31fc0 <__assert_fail@plt+0x1f9fc>
   3d5a8:	ldr	r1, [sl, #24]
   3d5ac:	cmp	r1, #0
   3d5b0:	beq	3d690 <__assert_fail@plt+0x2b0cc>
   3d5b4:	ldr	r0, [r4, #132]	; 0x84
   3d5b8:	ldr	r3, [r0]
   3d5bc:	cmp	r3, #0
   3d5c0:	bne	3d5dc <__assert_fail@plt+0x2b018>
   3d5c4:	add	r3, r3, #1
   3d5c8:	cmp	r1, r3
   3d5cc:	bls	3d68c <__assert_fail@plt+0x2b0c8>
   3d5d0:	ldr	r2, [r0, r3, lsl #2]
   3d5d4:	cmp	r2, r3
   3d5d8:	beq	3d5c4 <__assert_fail@plt+0x2b000>
   3d5dc:	mov	r2, sl
   3d5e0:	ldr	r1, [pc, #1780]	; 3dcdc <__assert_fail@plt+0x2b718>
   3d5e4:	ldr	r0, [r4, #52]	; 0x34
   3d5e8:	bl	31f4c <__assert_fail@plt+0x1f988>
   3d5ec:	cmp	r0, #0
   3d5f0:	bne	3dc48 <__assert_fail@plt+0x2b684>
   3d5f4:	mov	r2, r4
   3d5f8:	ldr	r1, [pc, #1760]	; 3dce0 <__assert_fail@plt+0x2b71c>
   3d5fc:	ldr	r0, [r4, #52]	; 0x34
   3d600:	bl	31f4c <__assert_fail@plt+0x1f988>
   3d604:	cmp	r0, #0
   3d608:	bne	3dc48 <__assert_fail@plt+0x2b684>
   3d60c:	mov	r2, r4
   3d610:	ldr	r1, [pc, #1740]	; 3dce4 <__assert_fail@plt+0x2b720>
   3d614:	ldr	r0, [r4, #52]	; 0x34
   3d618:	bl	31fc0 <__assert_fail@plt+0x1f9fc>
   3d61c:	mov	r2, r4
   3d620:	ldr	r1, [pc, #1728]	; 3dce8 <__assert_fail@plt+0x2b724>
   3d624:	ldr	r0, [r4, #52]	; 0x34
   3d628:	bl	31fc0 <__assert_fail@plt+0x1f9fc>
   3d62c:	cmp	r0, #0
   3d630:	bne	3dc48 <__assert_fail@plt+0x2b684>
   3d634:	mov	r5, fp
   3d638:	mov	r7, #0
   3d63c:	add	r9, r7, r7, lsl #1
   3d640:	lsl	r9, r9, #2
   3d644:	ldr	r3, [r4, #24]
   3d648:	add	r3, r3, r9
   3d64c:	ldr	r3, [r3, #4]
   3d650:	cmp	r3, #0
   3d654:	beq	3d6a4 <__assert_fail@plt+0x2b0e0>
   3d658:	add	r7, r7, #1
   3d65c:	ldr	r3, [r4, #8]
   3d660:	cmp	r3, r7
   3d664:	bne	3d63c <__assert_fail@plt+0x2b078>
   3d668:	cmp	r5, #0
   3d66c:	beq	3d6e4 <__assert_fail@plt+0x2b120>
   3d670:	mov	r5, fp
   3d674:	mov	r7, #0
   3d678:	b	3d63c <__assert_fail@plt+0x2b078>
   3d67c:	ldr	r3, [sp, #68]	; 0x44
   3d680:	str	r3, [sp, #60]	; 0x3c
   3d684:	str	r3, [sp, #64]	; 0x40
   3d688:	b	3d424 <__assert_fail@plt+0x2ae60>
   3d68c:	bne	3d5dc <__assert_fail@plt+0x2b018>
   3d690:	ldr	r0, [r4, #132]	; 0x84
   3d694:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3d698:	mov	r3, #0
   3d69c:	str	r3, [r4, #132]	; 0x84
   3d6a0:	b	3d5dc <__assert_fail@plt+0x2b018>
   3d6a4:	mov	r3, #1
   3d6a8:	mov	r2, r7
   3d6ac:	mov	r1, r4
   3d6b0:	add	r0, sp, #20
   3d6b4:	bl	35150 <__assert_fail@plt+0x22b8c>
   3d6b8:	cmp	r0, #0
   3d6bc:	bne	3dc60 <__assert_fail@plt+0x2b69c>
   3d6c0:	ldr	r3, [r4, #24]
   3d6c4:	add	r9, r3, r9
   3d6c8:	ldr	r3, [r9, #4]
   3d6cc:	cmp	r3, #0
   3d6d0:	bne	3d658 <__assert_fail@plt+0x2b094>
   3d6d4:	ldr	r0, [sp, #28]
   3d6d8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3d6dc:	mov	r5, #1
   3d6e0:	b	3d658 <__assert_fail@plt+0x2b094>
   3d6e4:	ldrb	r3, [sl, #28]
   3d6e8:	tst	r3, #16
   3d6ec:	beq	3d858 <__assert_fail@plt+0x2b294>
   3d6f0:	ldr	r3, [r4, #76]	; 0x4c
   3d6f4:	cmp	r3, #0
   3d6f8:	beq	3d7dc <__assert_fail@plt+0x2b218>
   3d6fc:	ldr	r0, [r4, #8]
   3d700:	add	r0, r0, r0, lsl #1
   3d704:	lsl	r0, r0, #2
   3d708:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3d70c:	str	r0, [r4, #28]
   3d710:	cmp	r0, #0
   3d714:	beq	3dc3c <__assert_fail@plt+0x2b678>
   3d718:	ldr	r3, [r4, #8]
   3d71c:	cmp	r3, #0
   3d720:	beq	3dc50 <__assert_fail@plt+0x2b68c>
   3d724:	mov	r3, #0
   3d728:	mov	r1, r3
   3d72c:	mov	r2, r3
   3d730:	ldr	ip, [r4, #28]
   3d734:	add	r0, ip, r3
   3d738:	str	r2, [ip, r3]
   3d73c:	str	r2, [r0, #4]
   3d740:	str	r2, [r0, #8]
   3d744:	add	r1, r1, #1
   3d748:	ldr	r0, [r4, #8]
   3d74c:	add	r3, r3, #12
   3d750:	cmp	r1, r0
   3d754:	bcc	3d730 <__assert_fail@plt+0x2b16c>
   3d758:	cmp	r0, #0
   3d75c:	beq	3d7dc <__assert_fail@plt+0x2b218>
   3d760:	mov	fp, #0
   3d764:	str	r5, [sp, #12]
   3d768:	mov	r5, fp
   3d76c:	ldr	r3, [r4, #24]
   3d770:	add	r3, r3, fp
   3d774:	ldr	r9, [r3, #8]
   3d778:	ldr	r3, [r3, #4]
   3d77c:	cmp	r3, #0
   3d780:	ble	3d7c4 <__assert_fail@plt+0x2b200>
   3d784:	sub	r9, r9, #4
   3d788:	mov	r7, #0
   3d78c:	ldr	r0, [r9, #4]!
   3d790:	add	r0, r0, r0, lsl #1
   3d794:	ldr	r3, [r4, #28]
   3d798:	mov	r1, r5
   3d79c:	add	r0, r3, r0, lsl #2
   3d7a0:	bl	320d8 <__assert_fail@plt+0x1fb14>
   3d7a4:	cmp	r0, #0
   3d7a8:	beq	3dc44 <__assert_fail@plt+0x2b680>
   3d7ac:	add	r7, r7, #1
   3d7b0:	ldr	r3, [r4, #24]
   3d7b4:	add	r3, r3, fp
   3d7b8:	ldr	r3, [r3, #4]
   3d7bc:	cmp	r7, r3
   3d7c0:	blt	3d78c <__assert_fail@plt+0x2b1c8>
   3d7c4:	add	r5, r5, #1
   3d7c8:	add	fp, fp, #12
   3d7cc:	ldr	r3, [r4, #8]
   3d7d0:	cmp	r5, r3
   3d7d4:	bcc	3d76c <__assert_fail@plt+0x2b1a8>
   3d7d8:	ldr	r5, [sp, #12]
   3d7dc:	mov	r3, #0
   3d7e0:	str	r3, [sp, #116]	; 0x74
   3d7e4:	ldrb	r3, [r6, #88]	; 0x58
   3d7e8:	clz	r8, r8
   3d7ec:	lsr	r8, r8, #5
   3d7f0:	ands	r8, r8, r3, lsr #2
   3d7f4:	beq	3d804 <__assert_fail@plt+0x2b240>
   3d7f8:	ldr	r3, [sl, #20]
   3d7fc:	cmp	r3, #0
   3d800:	beq	3d874 <__assert_fail@plt+0x2b2b0>
   3d804:	ldr	r3, [r6, #52]	; 0x34
   3d808:	ldr	r3, [r3, #12]
   3d80c:	ldr	r1, [r3, #28]
   3d810:	str	r1, [r6, #72]	; 0x48
   3d814:	add	r1, r1, r1, lsl #1
   3d818:	ldr	r3, [r6, #24]
   3d81c:	add	r1, r3, r1, lsl #2
   3d820:	add	r0, sp, #20
   3d824:	bl	32d50 <__assert_fail@plt+0x2078c>
   3d828:	mov	r5, r0
   3d82c:	str	r0, [sp, #16]
   3d830:	cmp	r0, #0
   3d834:	bne	3db08 <__assert_fail@plt+0x2b544>
   3d838:	ldr	r3, [r6, #76]	; 0x4c
   3d83c:	cmp	r3, #0
   3d840:	ble	3dac4 <__assert_fail@plt+0x2b500>
   3d844:	ldr	lr, [sp, #24]
   3d848:	cmp	lr, #0
   3d84c:	ble	3dac4 <__assert_fail@plt+0x2b500>
   3d850:	mov	r4, #0
   3d854:	b	3da6c <__assert_fail@plt+0x2b4a8>
   3d858:	ldr	r3, [sl, #24]
   3d85c:	cmp	r3, #0
   3d860:	beq	3d6f0 <__assert_fail@plt+0x2b12c>
   3d864:	ldrb	r3, [r4, #88]	; 0x58
   3d868:	tst	r3, #1
   3d86c:	bne	3d6fc <__assert_fail@plt+0x2b138>
   3d870:	b	3d6f0 <__assert_fail@plt+0x2b12c>
   3d874:	ldr	r3, [r6, #8]
   3d878:	cmp	r3, #0
   3d87c:	beq	3d9f4 <__assert_fail@plt+0x2b430>
   3d880:	ldr	ip, [r6]
   3d884:	mov	lr, ip
   3d888:	mov	r0, r3
   3d88c:	mov	r3, r5
   3d890:	mov	r2, #0
   3d894:	b	3d8ac <__assert_fail@plt+0x2b2e8>
   3d898:	mov	r3, r8
   3d89c:	add	r2, r2, #1
   3d8a0:	add	lr, lr, #8
   3d8a4:	cmp	r2, r0
   3d8a8:	beq	3d96c <__assert_fail@plt+0x2b3a8>
   3d8ac:	ldrb	r1, [lr, #4]
   3d8b0:	sub	r1, r1, #1
   3d8b4:	cmp	r1, #11
   3d8b8:	ldrls	pc, [pc, r1, lsl #2]
   3d8bc:	b	3d968 <__assert_fail@plt+0x2b3a4>
   3d8c0:	andeq	sp, r3, r8, lsr #18
   3d8c4:	muleq	r3, ip, r8
   3d8c8:	strdeq	sp, [r3], -r0
   3d8cc:	muleq	r3, ip, r8
   3d8d0:	muleq	r3, r8, r8
   3d8d4:	andeq	sp, r3, r4, lsl #16
   3d8d8:	andeq	sp, r3, r8, ror #18
   3d8dc:	muleq	r3, ip, r8
   3d8e0:	muleq	r3, ip, r8
   3d8e4:	muleq	r3, ip, r8
   3d8e8:	muleq	r3, ip, r8
   3d8ec:	andeq	sp, r3, r8, lsr r9
   3d8f0:	ldr	r1, [ip, r2, lsl #3]
   3d8f4:	ldr	r4, [r1, #16]
   3d8f8:	cmp	r4, #0
   3d8fc:	bne	3d804 <__assert_fail@plt+0x2b240>
   3d900:	ldr	r4, [r1, #20]
   3d904:	cmp	r4, #0
   3d908:	bne	3d804 <__assert_fail@plt+0x2b240>
   3d90c:	ldr	r4, [r1, #24]
   3d910:	cmp	r4, #0
   3d914:	bne	3d804 <__assert_fail@plt+0x2b240>
   3d918:	ldr	r1, [r1, #28]
   3d91c:	cmp	r1, #0
   3d920:	beq	3d89c <__assert_fail@plt+0x2b2d8>
   3d924:	b	3d804 <__assert_fail@plt+0x2b240>
   3d928:	ldrb	r1, [ip, r2, lsl #3]
   3d92c:	lsrs	r1, r1, #7
   3d930:	movne	r5, r8
   3d934:	b	3d89c <__assert_fail@plt+0x2b2d8>
   3d938:	ldr	r1, [ip, r2, lsl #3]
   3d93c:	cmp	r1, #32
   3d940:	beq	3d89c <__assert_fail@plt+0x2b2d8>
   3d944:	bls	3d95c <__assert_fail@plt+0x2b398>
   3d948:	cmp	r1, #64	; 0x40
   3d94c:	beq	3d89c <__assert_fail@plt+0x2b2d8>
   3d950:	cmp	r1, #128	; 0x80
   3d954:	beq	3d89c <__assert_fail@plt+0x2b2d8>
   3d958:	b	3d804 <__assert_fail@plt+0x2b240>
   3d95c:	cmp	r1, #16
   3d960:	beq	3d89c <__assert_fail@plt+0x2b2d8>
   3d964:	b	3d804 <__assert_fail@plt+0x2b240>
   3d968:	bl	12570 <abort@plt>
   3d96c:	orr	r5, r5, r3
   3d970:	tst	r5, #255	; 0xff
   3d974:	beq	3d9b0 <__assert_fail@plt+0x2b3ec>
   3d978:	mov	r2, #0
   3d97c:	mov	r4, #7
   3d980:	lsl	ip, r2, #3
   3d984:	ldr	lr, [r6]
   3d988:	add	r1, lr, ip
   3d98c:	ldrb	r0, [r1, #4]
   3d990:	cmp	r0, #1
   3d994:	beq	3d9dc <__assert_fail@plt+0x2b418>
   3d998:	cmp	r0, #5
   3d99c:	strbeq	r4, [r1, #4]
   3d9a0:	add	r2, r2, #1
   3d9a4:	ldr	r1, [r6, #8]
   3d9a8:	cmp	r2, r1
   3d9ac:	bcc	3d980 <__assert_fail@plt+0x2b3bc>
   3d9b0:	mov	r2, #1
   3d9b4:	str	r2, [r6, #92]	; 0x5c
   3d9b8:	ldrb	r2, [r6, #88]	; 0x58
   3d9bc:	ldr	r1, [r6, #76]	; 0x4c
   3d9c0:	cmp	r1, #0
   3d9c4:	orrgt	r3, r3, #1
   3d9c8:	and	r3, r3, #1
   3d9cc:	and	r2, r2, #249	; 0xf9
   3d9d0:	orr	r3, r2, r3, lsl #1
   3d9d4:	strb	r3, [r6, #88]	; 0x58
   3d9d8:	b	3d804 <__assert_fail@plt+0x2b240>
   3d9dc:	ldrsb	r0, [lr, ip]
   3d9e0:	cmp	r0, #0
   3d9e4:	ldrblt	r0, [r1, #6]
   3d9e8:	biclt	r0, r0, #32
   3d9ec:	strblt	r0, [r1, #6]
   3d9f0:	b	3d9a0 <__assert_fail@plt+0x2b3dc>
   3d9f4:	mov	r3, r5
   3d9f8:	b	3d9b0 <__assert_fail@plt+0x2b3ec>
   3d9fc:	add	r3, r3, #1
   3da00:	cmp	lr, r3
   3da04:	beq	3da5c <__assert_fail@plt+0x2b498>
   3da08:	ldr	r1, [r2, #4]!
   3da0c:	add	r0, ip, r1, lsl #3
   3da10:	ldrb	r0, [r0, #4]
   3da14:	cmp	r0, #9
   3da18:	bne	3d9fc <__assert_fail@plt+0x2b438>
   3da1c:	ldr	r0, [ip, r1, lsl #3]
   3da20:	ldr	r1, [r7]
   3da24:	cmp	r0, r1
   3da28:	bne	3d9fc <__assert_fail@plt+0x2b438>
   3da2c:	cmp	lr, r3
   3da30:	beq	3da5c <__assert_fail@plt+0x2b498>
   3da34:	ldr	r3, [r6, #20]
   3da38:	add	r8, r8, r8, lsl #1
   3da3c:	add	r8, r3, r8, lsl #2
   3da40:	ldr	r3, [r8, #8]
   3da44:	ldr	r7, [r3]
   3da48:	mov	r1, r7
   3da4c:	add	r0, sp, #20
   3da50:	bl	31514 <__assert_fail@plt+0x1ef50>
   3da54:	cmp	r0, #0
   3da58:	beq	3daa0 <__assert_fail@plt+0x2b4dc>
   3da5c:	add	r4, r4, #1
   3da60:	ldr	lr, [sp, #24]
   3da64:	cmp	lr, r4
   3da68:	ble	3dac4 <__assert_fail@plt+0x2b500>
   3da6c:	ldr	r2, [sp, #28]
   3da70:	ldr	ip, [r6]
   3da74:	ldr	r8, [r2, r4, lsl #2]
   3da78:	add	r7, ip, r8, lsl #3
   3da7c:	ldrb	r3, [r7, #4]
   3da80:	cmp	r3, #4
   3da84:	bne	3da5c <__assert_fail@plt+0x2b498>
   3da88:	cmp	lr, #0
   3da8c:	subgt	r2, r2, #4
   3da90:	movgt	r3, #0
   3da94:	bgt	3da08 <__assert_fail@plt+0x2b444>
   3da98:	mov	r3, #0
   3da9c:	b	3da2c <__assert_fail@plt+0x2b468>
   3daa0:	add	r7, r7, r7, lsl #1
   3daa4:	ldr	r1, [r6, #24]
   3daa8:	add	r1, r1, r7, lsl #2
   3daac:	add	r0, sp, #20
   3dab0:	bl	34fa8 <__assert_fail@plt+0x229e4>
   3dab4:	cmp	r0, #0
   3dab8:	bne	3dba0 <__assert_fail@plt+0x2b5dc>
   3dabc:	mov	r4, #0
   3dac0:	b	3da5c <__assert_fail@plt+0x2b498>
   3dac4:	mov	r3, #0
   3dac8:	add	r2, sp, #20
   3dacc:	mov	r1, r6
   3dad0:	add	r0, sp, #16
   3dad4:	bl	34108 <__assert_fail@plt+0x21b44>
   3dad8:	str	r0, [r6, #36]	; 0x24
   3dadc:	cmp	r0, #0
   3dae0:	ldreq	r5, [sp, #16]
   3dae4:	beq	3db08 <__assert_fail@plt+0x2b544>
   3dae8:	ldrsb	r3, [r0, #52]	; 0x34
   3daec:	cmp	r3, #0
   3daf0:	strge	r0, [r6, #48]	; 0x30
   3daf4:	strge	r0, [r6, #44]	; 0x2c
   3daf8:	strge	r0, [r6, #40]	; 0x28
   3dafc:	blt	3db34 <__assert_fail@plt+0x2b570>
   3db00:	ldr	r0, [sp, #28]
   3db04:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3db08:	str	r5, [sp, #116]	; 0x74
   3db0c:	mov	r0, sl
   3db10:	bl	343f0 <__assert_fail@plt+0x21e2c>
   3db14:	add	r0, sp, #32
   3db18:	bl	3443c <__assert_fail@plt+0x21e78>
   3db1c:	ldr	r3, [sp, #116]	; 0x74
   3db20:	cmp	r3, #0
   3db24:	bne	3dba8 <__assert_fail@plt+0x2b5e4>
   3db28:	ldr	r0, [sp, #116]	; 0x74
   3db2c:	add	sp, sp, #124	; 0x7c
   3db30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3db34:	mov	r3, #1
   3db38:	add	r2, sp, #20
   3db3c:	mov	r1, r6
   3db40:	add	r0, sp, #16
   3db44:	bl	34108 <__assert_fail@plt+0x21b44>
   3db48:	str	r0, [r6, #40]	; 0x28
   3db4c:	mov	r3, #2
   3db50:	add	r2, sp, #20
   3db54:	mov	r1, r6
   3db58:	add	r0, sp, #16
   3db5c:	bl	34108 <__assert_fail@plt+0x21b44>
   3db60:	str	r0, [r6, #44]	; 0x2c
   3db64:	mov	r3, #6
   3db68:	add	r2, sp, #20
   3db6c:	mov	r1, r6
   3db70:	add	r0, sp, #16
   3db74:	bl	34108 <__assert_fail@plt+0x21b44>
   3db78:	str	r0, [r6, #48]	; 0x30
   3db7c:	ldr	r3, [r6, #40]	; 0x28
   3db80:	cmp	r3, #0
   3db84:	beq	3db98 <__assert_fail@plt+0x2b5d4>
   3db88:	ldr	r3, [r6, #44]	; 0x2c
   3db8c:	cmp	r0, #0
   3db90:	cmpne	r3, #0
   3db94:	bne	3db00 <__assert_fail@plt+0x2b53c>
   3db98:	ldr	r5, [sp, #16]
   3db9c:	b	3db08 <__assert_fail@plt+0x2b544>
   3dba0:	mov	r5, r0
   3dba4:	b	3db08 <__assert_fail@plt+0x2b544>
   3dba8:	mov	r3, #1
   3dbac:	ldr	r2, [pc, #284]	; 3dcd0 <__assert_fail@plt+0x2b70c>
   3dbb0:	cmp	r2, #0
   3dbb4:	moveq	r3, #0
   3dbb8:	mov	r2, #1
   3dbbc:	ldr	r1, [pc, #272]	; 3dcd4 <__assert_fail@plt+0x2b710>
   3dbc0:	cmp	r1, #0
   3dbc4:	moveq	r2, #0
   3dbc8:	orr	r3, r3, r2
   3dbcc:	tst	r3, #255	; 0xff
   3dbd0:	beq	3dbdc <__assert_fail@plt+0x2b618>
   3dbd4:	add	r0, r6, #136	; 0x88
   3dbd8:	bl	11f4c <pthread_mutex_destroy@plt>
   3dbdc:	mov	r0, r6
   3dbe0:	bl	3446c <__assert_fail@plt+0x21ea8>
   3dbe4:	mov	r3, #0
   3dbe8:	str	r3, [sl]
   3dbec:	str	r3, [sl, #4]
   3dbf0:	b	3db28 <__assert_fail@plt+0x2b564>
   3dbf4:	mov	r0, #12
   3dbf8:	b	3db2c <__assert_fail@plt+0x2b568>
   3dbfc:	mov	r3, #12
   3dc00:	str	r3, [sp, #116]	; 0x74
   3dc04:	mov	r0, r6
   3dc08:	bl	3446c <__assert_fail@plt+0x21ea8>
   3dc0c:	mov	r3, #0
   3dc10:	str	r3, [sl]
   3dc14:	str	r3, [sl, #4]
   3dc18:	ldr	r0, [sp, #116]	; 0x74
   3dc1c:	b	3db2c <__assert_fail@plt+0x2b568>
   3dc20:	mov	r3, #0
   3dc24:	str	r3, [r6, #52]	; 0x34
   3dc28:	b	3dc64 <__assert_fail@plt+0x2b6a0>
   3dc2c:	mov	r0, #12
   3dc30:	b	3dc48 <__assert_fail@plt+0x2b684>
   3dc34:	mov	r0, #12
   3dc38:	b	3dc48 <__assert_fail@plt+0x2b684>
   3dc3c:	mov	r0, #12
   3dc40:	b	3dc48 <__assert_fail@plt+0x2b684>
   3dc44:	mov	r0, #12
   3dc48:	str	r0, [sp, #116]	; 0x74
   3dc4c:	b	3dc64 <__assert_fail@plt+0x2b6a0>
   3dc50:	mov	r3, #0
   3dc54:	str	r3, [sp, #116]	; 0x74
   3dc58:	b	3d7e4 <__assert_fail@plt+0x2b220>
   3dc5c:	mov	r0, #12
   3dc60:	str	r0, [sp, #116]	; 0x74
   3dc64:	mov	r0, sl
   3dc68:	bl	343f0 <__assert_fail@plt+0x21e2c>
   3dc6c:	add	r0, sp, #32
   3dc70:	bl	3443c <__assert_fail@plt+0x21e78>
   3dc74:	mov	r3, #1
   3dc78:	ldr	r2, [pc, #84]	; 3dcd4 <__assert_fail@plt+0x2b710>
   3dc7c:	cmp	r2, #0
   3dc80:	moveq	r3, #0
   3dc84:	mov	r2, #1
   3dc88:	ldr	r1, [pc, #64]	; 3dcd0 <__assert_fail@plt+0x2b70c>
   3dc8c:	cmp	r1, #0
   3dc90:	moveq	r2, #0
   3dc94:	orr	r3, r3, r2
   3dc98:	tst	r3, #255	; 0xff
   3dc9c:	beq	3dca8 <__assert_fail@plt+0x2b6e4>
   3dca0:	add	r0, r6, #136	; 0x88
   3dca4:	bl	11f4c <pthread_mutex_destroy@plt>
   3dca8:	mov	r0, r6
   3dcac:	bl	3446c <__assert_fail@plt+0x21ea8>
   3dcb0:	mov	r3, #0
   3dcb4:	str	r3, [sl]
   3dcb8:	str	r3, [sl, #4]
   3dcbc:	ldr	r0, [sp, #116]	; 0x74
   3dcc0:	b	3db2c <__assert_fail@plt+0x2b568>
   3dcc4:	beq	feae8770 <stdout@@GLIBC_2.4+0xfea8f21c>
   3dcc8:	andeq	r8, r4, r0, lsl #10
   3dccc:	andeq	r8, r4, r0, asr #5
   3dcd0:	ldrdeq	r1, [r1], -r0
   3dcd4:	andeq	r2, r1, ip, ror #6
   3dcd8:	andeq	r1, r3, r0, lsl #12
   3dcdc:	strdeq	r2, [r3], -r4
   3dce0:	andeq	r3, r3, r8, ror #30
   3dce4:	muleq	r3, ip, r6
   3dce8:	andeq	r4, r3, r8, ror #17
   3dcec:	push	{r4, lr}
   3dcf0:	mov	ip, r2
   3dcf4:	ldr	r3, [pc, #96]	; 3dd5c <__assert_fail@plt+0x2b798>
   3dcf8:	ldr	r3, [r3]
   3dcfc:	lsr	lr, r3, #21
   3dd00:	ldrb	r2, [r2, #28]
   3dd04:	and	lr, lr, #16
   3dd08:	and	r2, r2, #239	; 0xef
   3dd0c:	orr	r2, r2, lr
   3dd10:	orr	r2, r2, #128	; 0x80
   3dd14:	strb	r2, [ip, #28]
   3dd18:	mov	r2, r1
   3dd1c:	mov	r1, r0
   3dd20:	mov	r0, ip
   3dd24:	bl	3d074 <__assert_fail@plt+0x2aab0>
   3dd28:	cmp	r0, #0
   3dd2c:	beq	3dd54 <__assert_fail@plt+0x2b790>
   3dd30:	ldr	r3, [pc, #40]	; 3dd60 <__assert_fail@plt+0x2b79c>
   3dd34:	add	r1, r3, #32
   3dd38:	add	r3, r3, r0, lsl #2
   3dd3c:	ldr	r3, [r3, #416]	; 0x1a0
   3dd40:	mov	r2, #5
   3dd44:	add	r1, r1, r3
   3dd48:	mov	r0, #0
   3dd4c:	bl	12084 <dcgettext@plt>
   3dd50:	pop	{r4, pc}
   3dd54:	mov	r0, #0
   3dd58:	pop	{r4, pc}
   3dd5c:	andeq	r9, r5, r0, asr #29
   3dd60:	andeq	r8, r4, r0, asr #5
   3dd64:	ldr	r3, [pc, #12]	; 3dd78 <__assert_fail@plt+0x2b7b4>
   3dd68:	ldr	r2, [r3]
   3dd6c:	str	r0, [r3]
   3dd70:	mov	r0, r2
   3dd74:	bx	lr
   3dd78:	andeq	r9, r5, r0, asr #29
   3dd7c:	push	{r4, r5, r6, lr}
   3dd80:	mov	r4, r0
   3dd84:	ldr	r5, [r0]
   3dd88:	ldr	r6, [r0, #16]
   3dd8c:	mov	r2, #256	; 0x100
   3dd90:	mov	r1, #0
   3dd94:	mov	r0, r6
   3dd98:	bl	12348 <memset@plt>
   3dd9c:	mov	r2, r6
   3dda0:	ldr	r1, [r5, #36]	; 0x24
   3dda4:	mov	r0, r4
   3dda8:	bl	37258 <__assert_fail@plt+0x24c94>
   3ddac:	ldr	r1, [r5, #40]	; 0x28
   3ddb0:	ldr	r3, [r5, #36]	; 0x24
   3ddb4:	cmp	r3, r1
   3ddb8:	beq	3ddc8 <__assert_fail@plt+0x2b804>
   3ddbc:	mov	r2, r6
   3ddc0:	mov	r0, r4
   3ddc4:	bl	37258 <__assert_fail@plt+0x24c94>
   3ddc8:	ldr	r1, [r5, #44]	; 0x2c
   3ddcc:	ldr	r3, [r5, #36]	; 0x24
   3ddd0:	cmp	r3, r1
   3ddd4:	beq	3dde4 <__assert_fail@plt+0x2b820>
   3ddd8:	mov	r2, r6
   3dddc:	mov	r0, r4
   3dde0:	bl	37258 <__assert_fail@plt+0x24c94>
   3dde4:	ldr	r1, [r5, #48]	; 0x30
   3dde8:	ldr	r3, [r5, #36]	; 0x24
   3ddec:	cmp	r3, r1
   3ddf0:	beq	3de00 <__assert_fail@plt+0x2b83c>
   3ddf4:	mov	r2, r6
   3ddf8:	mov	r0, r4
   3ddfc:	bl	37258 <__assert_fail@plt+0x24c94>
   3de00:	ldrb	r3, [r4, #28]
   3de04:	orr	r3, r3, #8
   3de08:	strb	r3, [r4, #28]
   3de0c:	mov	r0, #0
   3de10:	pop	{r4, r5, r6, pc}
   3de14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3de18:	sub	sp, sp, #44	; 0x2c
   3de1c:	ldr	ip, [sp, #80]	; 0x50
   3de20:	ldr	r4, [sp, #88]	; 0x58
   3de24:	ldr	fp, [r0]
   3de28:	add	r7, r3, ip
   3de2c:	cmp	r3, r2
   3de30:	movle	lr, #0
   3de34:	movgt	lr, #1
   3de38:	orrs	lr, lr, r3, lsr #31
   3de3c:	bne	3e19c <__assert_fail@plt+0x2bbd8>
   3de40:	cmp	r7, r2
   3de44:	bgt	3df94 <__assert_fail@plt+0x2b9d0>
   3de48:	cmp	ip, #0
   3de4c:	cmpge	r3, r7
   3de50:	bgt	3df9c <__assert_fail@plt+0x2b9d8>
   3de54:	cmp	r7, #0
   3de58:	blt	3dfa4 <__assert_fail@plt+0x2b9e0>
   3de5c:	cmp	r3, r7
   3de60:	movgt	lr, #0
   3de64:	movle	lr, #1
   3de68:	and	ip, lr, ip, lsr #31
   3de6c:	cmp	ip, #0
   3de70:	movne	r7, #0
   3de74:	mov	r8, #1
   3de78:	ldr	ip, [pc, #812]	; 3e1ac <__assert_fail@plt+0x2bbe8>
   3de7c:	cmp	ip, #0
   3de80:	moveq	r8, #0
   3de84:	mov	ip, #1
   3de88:	ldr	lr, [pc, #800]	; 3e1b0 <__assert_fail@plt+0x2bbec>
   3de8c:	cmp	lr, #0
   3de90:	moveq	ip, #0
   3de94:	str	r3, [sp, #24]
   3de98:	str	r2, [sp, #32]
   3de9c:	str	r1, [sp, #28]
   3dea0:	mov	r6, r0
   3dea4:	orr	r8, r8, ip
   3dea8:	ands	r8, r8, #255	; 0xff
   3deac:	beq	3deb8 <__assert_fail@plt+0x2b8f4>
   3deb0:	add	r0, fp, #136	; 0x88
   3deb4:	bl	11fac <pthread_mutex_lock@plt>
   3deb8:	ldrb	r3, [r6, #28]
   3debc:	lsl	r2, r3, #26
   3dec0:	and	sl, r3, #64	; 0x40
   3dec4:	cmp	sl, #0
   3dec8:	movne	sl, #2
   3decc:	moveq	sl, #0
   3ded0:	orr	sl, sl, r2, lsr #31
   3ded4:	ldr	r2, [sp, #24]
   3ded8:	cmp	r7, r2
   3dedc:	ble	3def4 <__assert_fail@plt+0x2b930>
   3dee0:	ldr	r2, [r6, #16]
   3dee4:	cmp	r2, #0
   3dee8:	beq	3def4 <__assert_fail@plt+0x2b930>
   3deec:	tst	r3, #8
   3def0:	beq	3dfac <__assert_fail@plt+0x2b9e8>
   3def4:	ldrb	r3, [r6, #28]
   3def8:	tst	r3, #16
   3defc:	bne	3dfe0 <__assert_fail@plt+0x2ba1c>
   3df00:	cmp	r4, #0
   3df04:	beq	3dfec <__assert_fail@plt+0x2ba28>
   3df08:	and	r3, r3, #6
   3df0c:	cmp	r3, #4
   3df10:	beq	3dfb8 <__assert_fail@plt+0x2b9f4>
   3df14:	ldr	r5, [r6, #24]
   3df18:	add	r5, r5, #1
   3df1c:	str	r5, [sp, #36]	; 0x24
   3df20:	lsl	r0, r5, #3
   3df24:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3df28:	subs	r9, r0, #0
   3df2c:	beq	3e194 <__assert_fail@plt+0x2bbd0>
   3df30:	str	sl, [sp, #16]
   3df34:	str	r9, [sp, #12]
   3df38:	str	r5, [sp, #8]
   3df3c:	ldr	r3, [sp, #84]	; 0x54
   3df40:	str	r3, [sp, #4]
   3df44:	str	r7, [sp]
   3df48:	ldr	r3, [sp, #24]
   3df4c:	ldr	r2, [sp, #32]
   3df50:	ldr	r1, [sp, #28]
   3df54:	mov	r0, r6
   3df58:	bl	3a020 <__assert_fail@plt+0x27a5c>
   3df5c:	cmp	r0, #0
   3df60:	beq	3dff4 <__assert_fail@plt+0x2ba30>
   3df64:	cmp	r0, #1
   3df68:	mvneq	r4, #0
   3df6c:	mvnne	r4, #1
   3df70:	mov	r0, r9
   3df74:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3df78:	cmp	r8, #0
   3df7c:	beq	3df88 <__assert_fail@plt+0x2b9c4>
   3df80:	add	r0, fp, #136	; 0x88
   3df84:	bl	11e80 <pthread_mutex_unlock@plt>
   3df88:	mov	r0, r4
   3df8c:	add	sp, sp, #44	; 0x2c
   3df90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df94:	mov	r7, r2
   3df98:	b	3de74 <__assert_fail@plt+0x2b8b0>
   3df9c:	mov	r7, r2
   3dfa0:	b	3de74 <__assert_fail@plt+0x2b8b0>
   3dfa4:	mov	r7, #0
   3dfa8:	b	3de74 <__assert_fail@plt+0x2b8b0>
   3dfac:	mov	r0, r6
   3dfb0:	bl	3dd7c <__assert_fail@plt+0x2b7b8>
   3dfb4:	b	3def4 <__assert_fail@plt+0x2b930>
   3dfb8:	ldr	r3, [r4]
   3dfbc:	ldr	r2, [r6, #24]
   3dfc0:	cmp	r3, r2
   3dfc4:	bhi	3df14 <__assert_fail@plt+0x2b950>
   3dfc8:	cmp	r3, #0
   3dfcc:	movgt	r5, r3
   3dfd0:	movle	r5, #1
   3dfd4:	cmp	r3, #0
   3dfd8:	movle	r4, #0
   3dfdc:	b	3df1c <__assert_fail@plt+0x2b958>
   3dfe0:	mov	r5, #1
   3dfe4:	mov	r4, #0
   3dfe8:	b	3df1c <__assert_fail@plt+0x2b958>
   3dfec:	mov	r5, #1
   3dff0:	b	3df1c <__assert_fail@plt+0x2b958>
   3dff4:	cmp	r4, #0
   3dff8:	beq	3e0b0 <__assert_fail@plt+0x2baec>
   3dffc:	ldrb	sl, [r6, #28]
   3e000:	lsr	sl, sl, #1
   3e004:	add	r7, r5, #1
   3e008:	ands	sl, sl, #3
   3e00c:	beq	3e0c4 <__assert_fail@plt+0x2bb00>
   3e010:	cmp	sl, #1
   3e014:	movne	sl, #2
   3e018:	beq	3e108 <__assert_fail@plt+0x2bb44>
   3e01c:	cmp	r5, #0
   3e020:	ble	3e16c <__assert_fail@plt+0x2bba8>
   3e024:	mov	r2, r9
   3e028:	ldr	r3, [sp, #36]	; 0x24
   3e02c:	lsl	ip, r3, #2
   3e030:	mov	r3, #0
   3e034:	ldr	r0, [r9, r3, lsl #1]
   3e038:	ldr	r1, [r4, #4]
   3e03c:	str	r0, [r1, r3]
   3e040:	ldr	r0, [r2, #4]
   3e044:	ldr	r1, [r4, #8]
   3e048:	str	r0, [r1, r3]
   3e04c:	add	r3, r3, #4
   3e050:	add	r2, r2, #8
   3e054:	cmp	ip, r3
   3e058:	bne	3e034 <__assert_fail@plt+0x2ba70>
   3e05c:	ldr	r3, [r4]
   3e060:	cmp	r3, r5
   3e064:	bls	3e094 <__assert_fail@plt+0x2bad0>
   3e068:	lsl	r3, r5, #2
   3e06c:	mvn	r2, #0
   3e070:	ldr	r1, [r4, #4]
   3e074:	ldr	r0, [r4, #8]
   3e078:	str	r2, [r0, r3]
   3e07c:	str	r2, [r1, r3]
   3e080:	add	r5, r5, #1
   3e084:	add	r3, r3, #4
   3e088:	ldr	r1, [r4]
   3e08c:	cmp	r5, r1
   3e090:	bcc	3e070 <__assert_fail@plt+0x2baac>
   3e094:	ldrb	r3, [r6, #28]
   3e098:	and	sl, sl, #3
   3e09c:	bic	r3, r3, #6
   3e0a0:	orr	sl, r3, sl, lsl #1
   3e0a4:	strb	sl, [r6, #28]
   3e0a8:	tst	sl, #6
   3e0ac:	beq	3e1a4 <__assert_fail@plt+0x2bbe0>
   3e0b0:	ldrb	r3, [sp, #92]	; 0x5c
   3e0b4:	cmp	r3, #0
   3e0b8:	bne	3e184 <__assert_fail@plt+0x2bbc0>
   3e0bc:	ldr	r4, [r9]
   3e0c0:	b	3df70 <__assert_fail@plt+0x2b9ac>
   3e0c4:	lsl	sl, r7, #2
   3e0c8:	mov	r0, sl
   3e0cc:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3e0d0:	str	r0, [r4, #4]
   3e0d4:	cmp	r0, #0
   3e0d8:	beq	3e174 <__assert_fail@plt+0x2bbb0>
   3e0dc:	mov	r0, sl
   3e0e0:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3e0e4:	str	r0, [r4, #8]
   3e0e8:	cmp	r0, #0
   3e0ec:	strne	r7, [r4]
   3e0f0:	movne	sl, #1
   3e0f4:	bne	3e01c <__assert_fail@plt+0x2ba58>
   3e0f8:	ldr	r0, [r4, #4]
   3e0fc:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3e100:	mov	sl, #0
   3e104:	b	3e094 <__assert_fail@plt+0x2bad0>
   3e108:	ldr	r3, [r4]
   3e10c:	cmp	r3, r7
   3e110:	bcs	3e01c <__assert_fail@plt+0x2ba58>
   3e114:	lsl	r3, r7, #2
   3e118:	str	r3, [sp, #32]
   3e11c:	mov	r1, r3
   3e120:	ldr	r0, [r4, #4]
   3e124:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3e128:	subs	r2, r0, #0
   3e12c:	str	r2, [sp, #28]
   3e130:	beq	3e17c <__assert_fail@plt+0x2bbb8>
   3e134:	ldr	r1, [sp, #32]
   3e138:	ldr	r0, [r4, #8]
   3e13c:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3e140:	cmp	r0, #0
   3e144:	beq	3e15c <__assert_fail@plt+0x2bb98>
   3e148:	ldr	r3, [sp, #28]
   3e14c:	str	r3, [r4, #4]
   3e150:	str	r0, [r4, #8]
   3e154:	str	r7, [r4]
   3e158:	b	3e01c <__assert_fail@plt+0x2ba58>
   3e15c:	ldr	r0, [sp, #28]
   3e160:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3e164:	mov	sl, #0
   3e168:	b	3e094 <__assert_fail@plt+0x2bad0>
   3e16c:	mov	r5, #0
   3e170:	b	3e05c <__assert_fail@plt+0x2ba98>
   3e174:	mov	sl, #0
   3e178:	b	3e094 <__assert_fail@plt+0x2bad0>
   3e17c:	mov	sl, #0
   3e180:	b	3e094 <__assert_fail@plt+0x2bad0>
   3e184:	ldr	r4, [r9, #4]
   3e188:	ldr	r3, [sp, #24]
   3e18c:	sub	r4, r4, r3
   3e190:	b	3df70 <__assert_fail@plt+0x2b9ac>
   3e194:	mvn	r4, #1
   3e198:	b	3df78 <__assert_fail@plt+0x2b9b4>
   3e19c:	mvn	r4, #0
   3e1a0:	b	3df88 <__assert_fail@plt+0x2b9c4>
   3e1a4:	mvn	r4, #1
   3e1a8:	b	3df70 <__assert_fail@plt+0x2b9ac>
   3e1ac:	ldrdeq	r1, [r1], -r0
   3e1b0:	andeq	r2, r1, ip, ror #6
   3e1b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e1b8:	sub	sp, sp, #20
   3e1bc:	mov	r5, r2
   3e1c0:	mov	r7, r3
   3e1c4:	ldr	r4, [sp, #56]	; 0x38
   3e1c8:	ldr	r6, [sp, #72]	; 0x48
   3e1cc:	lsr	r3, r4, #31
   3e1d0:	orr	r3, r3, r2, lsr #31
   3e1d4:	orrs	r2, r3, r6, lsr #31
   3e1d8:	bne	3e2e0 <__assert_fail@plt+0x2bd1c>
   3e1dc:	mov	r8, r0
   3e1e0:	mov	r9, r1
   3e1e4:	cmp	r4, #0
   3e1e8:	blt	3e260 <__assert_fail@plt+0x2bc9c>
   3e1ec:	cmp	r3, #0
   3e1f0:	bne	3e274 <__assert_fail@plt+0x2bcb0>
   3e1f4:	mvn	r3, #-2147483648	; 0x80000000
   3e1f8:	sub	r3, r3, r4
   3e1fc:	cmp	r5, r3
   3e200:	movle	r3, #0
   3e204:	movgt	r3, #1
   3e208:	cmp	r3, #0
   3e20c:	mvnne	r4, #1
   3e210:	bne	3e2d4 <__assert_fail@plt+0x2bd10>
   3e214:	add	fp, r5, r4
   3e218:	cmp	r4, #0
   3e21c:	ble	3e288 <__assert_fail@plt+0x2bcc4>
   3e220:	cmp	r5, #0
   3e224:	ble	3e294 <__assert_fail@plt+0x2bcd0>
   3e228:	mov	r0, fp
   3e22c:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3e230:	subs	sl, r0, #0
   3e234:	beq	3e2e8 <__assert_fail@plt+0x2bd24>
   3e238:	mov	r2, r5
   3e23c:	mov	r1, r9
   3e240:	mov	r0, sl
   3e244:	bl	12000 <memcpy@plt>
   3e248:	mov	r2, r4
   3e24c:	mov	r1, r7
   3e250:	add	r0, sl, r5
   3e254:	bl	12000 <memcpy@plt>
   3e258:	mov	r7, sl
   3e25c:	b	3e298 <__assert_fail@plt+0x2bcd4>
   3e260:	rsb	r3, r4, #-2147483648	; 0x80000000
   3e264:	cmp	r5, r3
   3e268:	movge	r3, #0
   3e26c:	movlt	r3, #1
   3e270:	b	3e208 <__assert_fail@plt+0x2bc44>
   3e274:	rsb	r3, r5, #-2147483648	; 0x80000000
   3e278:	cmp	r4, r3
   3e27c:	movge	r3, #0
   3e280:	movlt	r3, #1
   3e284:	b	3e208 <__assert_fail@plt+0x2bc44>
   3e288:	mov	r7, r9
   3e28c:	mov	sl, #0
   3e290:	b	3e298 <__assert_fail@plt+0x2bcd4>
   3e294:	mov	sl, #0
   3e298:	ldrb	r3, [sp, #76]	; 0x4c
   3e29c:	str	r3, [sp, #12]
   3e2a0:	ldr	r3, [sp, #68]	; 0x44
   3e2a4:	str	r3, [sp, #8]
   3e2a8:	str	r6, [sp, #4]
   3e2ac:	ldr	r3, [sp, #64]	; 0x40
   3e2b0:	str	r3, [sp]
   3e2b4:	ldr	r3, [sp, #60]	; 0x3c
   3e2b8:	mov	r2, fp
   3e2bc:	mov	r1, r7
   3e2c0:	mov	r0, r8
   3e2c4:	bl	3de14 <__assert_fail@plt+0x2b850>
   3e2c8:	mov	r4, r0
   3e2cc:	mov	r0, sl
   3e2d0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3e2d4:	mov	r0, r4
   3e2d8:	add	sp, sp, #20
   3e2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e2e0:	mvn	r4, #1
   3e2e4:	b	3e2d4 <__assert_fail@plt+0x2bd10>
   3e2e8:	mvn	r4, #1
   3e2ec:	b	3e2d4 <__assert_fail@plt+0x2bd10>
   3e2f0:	push	{r4, r5, r6, r7, r8, lr}
   3e2f4:	mov	r4, r0
   3e2f8:	mov	r7, r1
   3e2fc:	mov	r5, r2
   3e300:	and	r2, r2, #1
   3e304:	ldr	r3, [pc, #228]	; 3e3f0 <__assert_fail@plt+0x2be2c>
   3e308:	ldr	r6, [pc, #228]	; 3e3f4 <__assert_fail@plt+0x2be30>
   3e30c:	cmp	r2, #0
   3e310:	moveq	r6, r3
   3e314:	mov	r3, #0
   3e318:	str	r3, [r0]
   3e31c:	str	r3, [r0, #4]
   3e320:	str	r3, [r0, #8]
   3e324:	mov	r0, #256	; 0x100
   3e328:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3e32c:	str	r0, [r4, #16]
   3e330:	cmp	r0, #0
   3e334:	beq	3e3e8 <__assert_fail@plt+0x2be24>
   3e338:	and	r3, r5, #2
   3e33c:	cmp	r3, #0
   3e340:	movne	r3, #4194304	; 0x400000
   3e344:	moveq	r3, #0
   3e348:	orr	r6, r6, r3
   3e34c:	tst	r5, #4
   3e350:	bicne	r6, r6, #64	; 0x40
   3e354:	orrne	r6, r6, #256	; 0x100
   3e358:	ldrbne	r3, [r4, #28]
   3e35c:	orrne	r3, r3, #128	; 0x80
   3e360:	ldrbeq	r3, [r4, #28]
   3e364:	biceq	r3, r3, #128	; 0x80
   3e368:	strb	r3, [r4, #28]
   3e36c:	lsl	r5, r5, #1
   3e370:	ldrb	r3, [r4, #28]
   3e374:	bic	r3, r3, #16
   3e378:	and	r5, r5, #16
   3e37c:	orr	r5, r5, r3
   3e380:	strb	r5, [r4, #28]
   3e384:	mov	r3, #0
   3e388:	str	r3, [r4, #20]
   3e38c:	mov	r0, r7
   3e390:	bl	122d0 <strlen@plt>
   3e394:	mov	r3, r6
   3e398:	mov	r2, r0
   3e39c:	mov	r1, r7
   3e3a0:	mov	r0, r4
   3e3a4:	bl	3d074 <__assert_fail@plt+0x2aab0>
   3e3a8:	mov	r5, r0
   3e3ac:	cmp	r0, #16
   3e3b0:	beq	3e3cc <__assert_fail@plt+0x2be08>
   3e3b4:	cmp	r0, #0
   3e3b8:	bne	3e3d0 <__assert_fail@plt+0x2be0c>
   3e3bc:	mov	r0, r4
   3e3c0:	bl	3dd7c <__assert_fail@plt+0x2b7b8>
   3e3c4:	mov	r0, #0
   3e3c8:	pop	{r4, r5, r6, r7, r8, pc}
   3e3cc:	mov	r5, #8
   3e3d0:	ldr	r0, [r4, #16]
   3e3d4:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3e3d8:	mov	r3, #0
   3e3dc:	str	r3, [r4, #16]
   3e3e0:	mov	r0, r5
   3e3e4:	pop	{r4, r5, r6, r7, r8, pc}
   3e3e8:	mov	r0, #12
   3e3ec:	pop	{r4, r5, r6, r7, r8, pc}
   3e3f0:	smlabteq	r1, r6, r2, r0
   3e3f4:	strdeq	fp, [r3], -ip
   3e3f8:	push	{r4, r5, r6, r7, r8, lr}
   3e3fc:	cmp	r0, #16
   3e400:	bhi	3e468 <__assert_fail@plt+0x2bea4>
   3e404:	mov	r6, r2
   3e408:	mov	r4, r3
   3e40c:	ldr	r3, [pc, #88]	; 3e46c <__assert_fail@plt+0x2bea8>
   3e410:	add	r1, r3, #32
   3e414:	add	r3, r3, r0, lsl #2
   3e418:	ldr	r3, [r3, #416]	; 0x1a0
   3e41c:	mov	r2, #5
   3e420:	add	r1, r1, r3
   3e424:	mov	r0, #0
   3e428:	bl	12084 <dcgettext@plt>
   3e42c:	mov	r7, r0
   3e430:	bl	122d0 <strlen@plt>
   3e434:	add	r5, r0, #1
   3e438:	cmp	r4, #0
   3e43c:	beq	3e460 <__assert_fail@plt+0x2be9c>
   3e440:	cmp	r5, r4
   3e444:	subhi	r2, r4, #1
   3e448:	movhi	r3, #0
   3e44c:	strbhi	r3, [r6, r2]
   3e450:	movls	r2, r5
   3e454:	mov	r1, r7
   3e458:	mov	r0, r6
   3e45c:	bl	12000 <memcpy@plt>
   3e460:	mov	r0, r5
   3e464:	pop	{r4, r5, r6, r7, r8, pc}
   3e468:	bl	12570 <abort@plt>
   3e46c:	andeq	r8, r4, r0, asr #5
   3e470:	push	{r4, r5, r6, lr}
   3e474:	mov	r4, r0
   3e478:	ldr	r5, [r0]
   3e47c:	cmp	r5, #0
   3e480:	beq	3e4c0 <__assert_fail@plt+0x2befc>
   3e484:	mov	r3, #1
   3e488:	ldr	r2, [pc, #88]	; 3e4e8 <__assert_fail@plt+0x2bf24>
   3e48c:	cmp	r2, #0
   3e490:	moveq	r3, #0
   3e494:	mov	r2, #1
   3e498:	ldr	r1, [pc, #76]	; 3e4ec <__assert_fail@plt+0x2bf28>
   3e49c:	cmp	r1, #0
   3e4a0:	moveq	r2, #0
   3e4a4:	orr	r3, r3, r2
   3e4a8:	tst	r3, #255	; 0xff
   3e4ac:	beq	3e4b8 <__assert_fail@plt+0x2bef4>
   3e4b0:	add	r0, r5, #136	; 0x88
   3e4b4:	bl	11f4c <pthread_mutex_destroy@plt>
   3e4b8:	mov	r0, r5
   3e4bc:	bl	3446c <__assert_fail@plt+0x21ea8>
   3e4c0:	mov	r5, #0
   3e4c4:	str	r5, [r4]
   3e4c8:	str	r5, [r4, #4]
   3e4cc:	ldr	r0, [r4, #16]
   3e4d0:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3e4d4:	str	r5, [r4, #16]
   3e4d8:	ldr	r0, [r4, #20]
   3e4dc:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3e4e0:	str	r5, [r4, #20]
   3e4e4:	pop	{r4, r5, r6, pc}
   3e4e8:	ldrdeq	r1, [r1], -r0
   3e4ec:	andeq	r2, r1, ip, ror #6
   3e4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e4f4:	sub	sp, sp, #36	; 0x24
   3e4f8:	ldr	r4, [sp, #72]	; 0x48
   3e4fc:	bics	ip, r4, #7
   3e500:	movne	r0, #2
   3e504:	beq	3e510 <__assert_fail@plt+0x2bf4c>
   3e508:	add	sp, sp, #36	; 0x24
   3e50c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e510:	mov	r7, r3
   3e514:	mov	r8, r2
   3e518:	str	r1, [sp, #28]
   3e51c:	mov	r5, r0
   3e520:	ands	fp, r4, #4
   3e524:	beq	3e5c4 <__assert_fail@plt+0x2c000>
   3e528:	ldr	fp, [r3]
   3e52c:	ldr	r9, [r3, #4]
   3e530:	ldr	sl, [r5]
   3e534:	mov	r6, #1
   3e538:	ldr	r3, [pc, #148]	; 3e5d4 <__assert_fail@plt+0x2c010>
   3e53c:	cmp	r3, #0
   3e540:	moveq	r6, #0
   3e544:	mov	r3, #1
   3e548:	ldr	r2, [pc, #136]	; 3e5d8 <__assert_fail@plt+0x2c014>
   3e54c:	cmp	r2, #0
   3e550:	moveq	r3, #0
   3e554:	orr	r6, r6, r3
   3e558:	ands	r6, r6, #255	; 0xff
   3e55c:	beq	3e568 <__assert_fail@plt+0x2bfa4>
   3e560:	add	r0, sl, #136	; 0x88
   3e564:	bl	11fac <pthread_mutex_lock@plt>
   3e568:	ldrb	r3, [r5, #28]
   3e56c:	tst	r3, #16
   3e570:	str	r4, [sp, #16]
   3e574:	movne	r3, #0
   3e578:	strne	r3, [sp, #12]
   3e57c:	strne	r3, [sp, #8]
   3e580:	streq	r7, [sp, #12]
   3e584:	streq	r8, [sp, #8]
   3e588:	str	r9, [sp, #4]
   3e58c:	str	r9, [sp]
   3e590:	mov	r3, fp
   3e594:	mov	r2, r9
   3e598:	ldr	r1, [sp, #28]
   3e59c:	mov	r0, r5
   3e5a0:	bl	3a020 <__assert_fail@plt+0x27a5c>
   3e5a4:	mov	r4, r0
   3e5a8:	cmp	r6, #0
   3e5ac:	beq	3e5b8 <__assert_fail@plt+0x2bff4>
   3e5b0:	add	r0, sl, #136	; 0x88
   3e5b4:	bl	11e80 <pthread_mutex_unlock@plt>
   3e5b8:	adds	r0, r4, #0
   3e5bc:	movne	r0, #1
   3e5c0:	b	3e508 <__assert_fail@plt+0x2bf44>
   3e5c4:	ldr	r0, [sp, #28]
   3e5c8:	bl	122d0 <strlen@plt>
   3e5cc:	mov	r9, r0
   3e5d0:	b	3e530 <__assert_fail@plt+0x2bf6c>
   3e5d4:	ldrdeq	r1, [r1], -r0
   3e5d8:	andeq	r2, r1, ip, ror #6
   3e5dc:	push	{lr}		; (str lr, [sp, #-4]!)
   3e5e0:	sub	sp, sp, #20
   3e5e4:	mov	ip, #1
   3e5e8:	str	ip, [sp, #12]
   3e5ec:	ldr	ip, [sp, #24]
   3e5f0:	str	ip, [sp, #8]
   3e5f4:	str	r2, [sp, #4]
   3e5f8:	mov	ip, #0
   3e5fc:	str	ip, [sp]
   3e600:	bl	3de14 <__assert_fail@plt+0x2b850>
   3e604:	add	sp, sp, #20
   3e608:	pop	{pc}		; (ldr pc, [sp], #4)
   3e60c:	push	{lr}		; (str lr, [sp, #-4]!)
   3e610:	sub	sp, sp, #20
   3e614:	mov	ip, #0
   3e618:	str	ip, [sp, #12]
   3e61c:	ldr	ip, [sp, #28]
   3e620:	str	ip, [sp, #8]
   3e624:	str	r2, [sp, #4]
   3e628:	ldr	ip, [sp, #24]
   3e62c:	str	ip, [sp]
   3e630:	bl	3de14 <__assert_fail@plt+0x2b850>
   3e634:	add	sp, sp, #20
   3e638:	pop	{pc}		; (ldr pc, [sp], #4)
   3e63c:	push	{lr}		; (str lr, [sp, #-4]!)
   3e640:	sub	sp, sp, #28
   3e644:	mov	ip, #1
   3e648:	str	ip, [sp, #20]
   3e64c:	ldr	ip, [sp, #44]	; 0x2c
   3e650:	str	ip, [sp, #16]
   3e654:	ldr	ip, [sp, #40]	; 0x28
   3e658:	str	ip, [sp, #12]
   3e65c:	mov	ip, #0
   3e660:	str	ip, [sp, #8]
   3e664:	ldr	ip, [sp, #36]	; 0x24
   3e668:	str	ip, [sp, #4]
   3e66c:	ldr	ip, [sp, #32]
   3e670:	str	ip, [sp]
   3e674:	bl	3e1b4 <__assert_fail@plt+0x2bbf0>
   3e678:	add	sp, sp, #28
   3e67c:	pop	{pc}		; (ldr pc, [sp], #4)
   3e680:	push	{lr}		; (str lr, [sp, #-4]!)
   3e684:	sub	sp, sp, #28
   3e688:	mov	ip, #0
   3e68c:	str	ip, [sp, #20]
   3e690:	ldr	ip, [sp, #48]	; 0x30
   3e694:	str	ip, [sp, #16]
   3e698:	ldr	ip, [sp, #44]	; 0x2c
   3e69c:	str	ip, [sp, #12]
   3e6a0:	ldr	ip, [sp, #40]	; 0x28
   3e6a4:	str	ip, [sp, #8]
   3e6a8:	ldr	ip, [sp, #36]	; 0x24
   3e6ac:	str	ip, [sp, #4]
   3e6b0:	ldr	ip, [sp, #32]
   3e6b4:	str	ip, [sp]
   3e6b8:	bl	3e1b4 <__assert_fail@plt+0x2bbf0>
   3e6bc:	add	sp, sp, #28
   3e6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   3e6c4:	cmp	r2, #0
   3e6c8:	bne	3e6ec <__assert_fail@plt+0x2c128>
   3e6cc:	ldrb	r3, [r0, #28]
   3e6d0:	bic	r3, r3, #6
   3e6d4:	strb	r3, [r0, #28]
   3e6d8:	mov	r3, #0
   3e6dc:	str	r3, [r1]
   3e6e0:	str	r3, [r1, #8]
   3e6e4:	str	r3, [r1, #4]
   3e6e8:	bx	lr
   3e6ec:	ldrb	ip, [r0, #28]
   3e6f0:	bic	ip, ip, #4
   3e6f4:	orr	ip, ip, #2
   3e6f8:	strb	ip, [r0, #28]
   3e6fc:	str	r2, [r1]
   3e700:	str	r3, [r1, #4]
   3e704:	ldr	r3, [sp]
   3e708:	str	r3, [r1, #8]
   3e70c:	bx	lr
   3e710:	cmp	r1, #2
   3e714:	bls	3e734 <__assert_fail@plt+0x2c170>
   3e718:	push	{r4, r5, r6, r7, r8, r9, lr}
   3e71c:	mov	r7, #1
   3e720:	mov	ip, r7
   3e724:	mov	lr, #0
   3e728:	mvn	r4, #0
   3e72c:	mov	r8, r7
   3e730:	b	3e75c <__assert_fail@plt+0x2c198>
   3e734:	mov	r3, #1
   3e738:	str	r3, [r2]
   3e73c:	sub	r0, r1, #1
   3e740:	bx	lr
   3e744:	cmp	r6, r5
   3e748:	beq	3e78c <__assert_fail@plt+0x2c1c8>
   3e74c:	mov	r4, lr
   3e750:	add	lr, lr, #1
   3e754:	mov	r7, r8
   3e758:	mov	ip, r8
   3e75c:	add	r3, lr, ip
   3e760:	cmp	r1, r3
   3e764:	bls	3e7a0 <__assert_fail@plt+0x2c1dc>
   3e768:	ldrb	r6, [r0, r3]
   3e76c:	add	r5, r0, r4
   3e770:	ldrb	r5, [r5, ip]
   3e774:	cmp	r6, r5
   3e778:	bcs	3e744 <__assert_fail@plt+0x2c180>
   3e77c:	sub	r7, r3, r4
   3e780:	mov	lr, r3
   3e784:	mov	ip, #1
   3e788:	b	3e75c <__assert_fail@plt+0x2c198>
   3e78c:	cmp	ip, r7
   3e790:	addne	ip, ip, #1
   3e794:	addeq	lr, lr, r7
   3e798:	moveq	ip, #1
   3e79c:	b	3e75c <__assert_fail@plt+0x2c198>
   3e7a0:	str	r7, [r2]
   3e7a4:	mov	r8, #1
   3e7a8:	mov	ip, r8
   3e7ac:	mov	lr, #0
   3e7b0:	mvn	r7, #0
   3e7b4:	mov	r9, r8
   3e7b8:	b	3e7d4 <__assert_fail@plt+0x2c210>
   3e7bc:	cmp	r6, r5
   3e7c0:	beq	3e804 <__assert_fail@plt+0x2c240>
   3e7c4:	mov	r7, lr
   3e7c8:	add	lr, lr, #1
   3e7cc:	mov	r8, r9
   3e7d0:	mov	ip, r9
   3e7d4:	add	r3, lr, ip
   3e7d8:	cmp	r1, r3
   3e7dc:	bls	3e818 <__assert_fail@plt+0x2c254>
   3e7e0:	ldrb	r6, [r0, r3]
   3e7e4:	add	r5, r0, r7
   3e7e8:	ldrb	r5, [r5, ip]
   3e7ec:	cmp	r6, r5
   3e7f0:	bls	3e7bc <__assert_fail@plt+0x2c1f8>
   3e7f4:	sub	r8, r3, r7
   3e7f8:	mov	lr, r3
   3e7fc:	mov	ip, #1
   3e800:	b	3e7d4 <__assert_fail@plt+0x2c210>
   3e804:	cmp	ip, r8
   3e808:	addne	ip, ip, #1
   3e80c:	addeq	lr, lr, r8
   3e810:	moveq	ip, #1
   3e814:	b	3e7d4 <__assert_fail@plt+0x2c210>
   3e818:	add	r7, r7, #1
   3e81c:	add	r0, r4, #1
   3e820:	cmp	r7, r0
   3e824:	strcs	r8, [r2]
   3e828:	movcs	r0, r7
   3e82c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e834:	sub	sp, sp, #1056	; 0x420
   3e838:	sub	sp, sp, #4
   3e83c:	mov	r5, r0
   3e840:	mov	r6, r1
   3e844:	mov	r0, r2
   3e848:	str	r2, [sp]
   3e84c:	mov	r4, r3
   3e850:	add	r2, sp, #1040	; 0x410
   3e854:	add	r2, r2, #12
   3e858:	mov	r1, r3
   3e85c:	bl	3e710 <__assert_fail@plt+0x2c14c>
   3e860:	mov	sl, r0
   3e864:	add	r3, sp, #24
   3e868:	add	r2, sp, #32
   3e86c:	add	r2, r2, #1016	; 0x3f8
   3e870:	str	r4, [r3, #4]!
   3e874:	cmp	r3, r2
   3e878:	bne	3e870 <__assert_fail@plt+0x2c2ac>
   3e87c:	cmp	r4, #0
   3e880:	beq	3e8ac <__assert_fail@plt+0x2c2e8>
   3e884:	ldr	r3, [sp]
   3e888:	sub	r1, r3, #1
   3e88c:	sub	r3, r4, #1
   3e890:	ldrb	r2, [r1, #1]!
   3e894:	add	r0, sp, #1056	; 0x420
   3e898:	add	r2, r0, r2, lsl #2
   3e89c:	str	r3, [r2, #-1028]	; 0xfffffbfc
   3e8a0:	sub	r3, r3, #1
   3e8a4:	cmn	r3, #1
   3e8a8:	bne	3e890 <__assert_fail@plt+0x2c2cc>
   3e8ac:	ldr	r3, [sp, #1052]	; 0x41c
   3e8b0:	str	r3, [sp, #4]
   3e8b4:	mov	r2, sl
   3e8b8:	ldr	r0, [sp]
   3e8bc:	add	r1, r0, r3
   3e8c0:	bl	12060 <memcmp@plt>
   3e8c4:	cmp	r0, #0
   3e8c8:	beq	3ea28 <__assert_fail@plt+0x2c464>
   3e8cc:	sub	r3, r4, sl
   3e8d0:	cmp	r3, sl
   3e8d4:	movcc	r3, sl
   3e8d8:	add	r3, r3, #1
   3e8dc:	str	r3, [sp, #4]
   3e8e0:	mov	r9, #0
   3e8e4:	sub	r7, r4, #1
   3e8e8:	sub	fp, sl, #1
   3e8ec:	ldr	r3, [sp]
   3e8f0:	add	r2, r3, fp
   3e8f4:	str	r2, [sp, #8]
   3e8f8:	add	r3, r3, sl
   3e8fc:	rsb	r2, sl, #1
   3e900:	str	r2, [sp, #12]
   3e904:	mov	r0, r6
   3e908:	mov	r6, r3
   3e90c:	b	3ea6c <__assert_fail@plt+0x2c4a8>
   3e910:	cmp	fp, sl
   3e914:	movcs	r3, fp
   3e918:	movcc	r3, sl
   3e91c:	cmp	r3, r7
   3e920:	bcs	3eb10 <__assert_fail@plt+0x2c54c>
   3e924:	ldr	lr, [sp]
   3e928:	add	r1, lr, r3
   3e92c:	add	r0, r9, r3
   3e930:	add	r2, r5, r0
   3e934:	ldrb	lr, [lr, r3]
   3e938:	ldrb	r0, [r5, r0]
   3e93c:	cmp	lr, r0
   3e940:	bne	3e960 <__assert_fail@plt+0x2c39c>
   3e944:	add	r3, r3, #1
   3e948:	cmp	r3, r7
   3e94c:	bcs	3eb10 <__assert_fail@plt+0x2c54c>
   3e950:	ldrb	lr, [r1, #1]!
   3e954:	ldrb	r0, [r2, #1]!
   3e958:	cmp	lr, r0
   3e95c:	beq	3e944 <__assert_fail@plt+0x2c380>
   3e960:	ldr	r2, [sp, #20]
   3e964:	add	r9, r2, r9
   3e968:	add	r9, r3, r9
   3e96c:	mov	fp, ip
   3e970:	mov	r0, r8
   3e974:	add	r8, r9, r4
   3e978:	sub	r2, r8, r0
   3e97c:	mov	r1, #0
   3e980:	add	r0, r5, r0
   3e984:	bl	123a8 <memchr@plt>
   3e988:	adds	r3, r8, #0
   3e98c:	movne	r3, #1
   3e990:	cmp	r0, #0
   3e994:	movne	r3, #0
   3e998:	mov	r0, r3
   3e99c:	cmp	r3, #0
   3e9a0:	beq	3eba0 <__assert_fail@plt+0x2c5dc>
   3e9a4:	add	r3, r5, r8
   3e9a8:	ldrb	r3, [r3, #-1]
   3e9ac:	add	r2, sp, #1056	; 0x420
   3e9b0:	add	r3, r2, r3, lsl #2
   3e9b4:	ldr	ip, [r3, #-1028]	; 0xfffffbfc
   3e9b8:	cmp	ip, #0
   3e9bc:	beq	3e910 <__assert_fail@plt+0x2c34c>
   3e9c0:	ldr	r3, [sp, #4]
   3e9c4:	cmp	fp, #0
   3e9c8:	cmpne	r3, ip
   3e9cc:	ldrhi	ip, [sp, #12]
   3e9d0:	add	r9, r9, ip
   3e9d4:	mov	fp, #0
   3e9d8:	b	3e970 <__assert_fail@plt+0x2c3ac>
   3e9dc:	mov	r1, r3
   3e9e0:	sub	r3, r1, #1
   3e9e4:	cmp	r6, r3
   3e9e8:	beq	3e9fc <__assert_fail@plt+0x2c438>
   3e9ec:	ldrb	lr, [r0, #-1]!
   3e9f0:	ldrb	ip, [r2, #-1]!
   3e9f4:	cmp	lr, ip
   3e9f8:	beq	3e9dc <__assert_fail@plt+0x2c418>
   3e9fc:	add	fp, fp, #1
   3ea00:	cmp	fp, r1
   3ea04:	bhi	3ea20 <__assert_fail@plt+0x2c45c>
   3ea08:	ldr	r3, [sp, #4]
   3ea0c:	add	r9, r9, r3
   3ea10:	ldr	fp, [sp, #12]
   3ea14:	b	3e970 <__assert_fail@plt+0x2c3ac>
   3ea18:	mov	r1, sl
   3ea1c:	b	3e9fc <__assert_fail@plt+0x2c438>
   3ea20:	add	r0, r5, r9
   3ea24:	b	3eba0 <__assert_fail@plt+0x2c5dc>
   3ea28:	mov	fp, #0
   3ea2c:	mov	r9, fp
   3ea30:	sub	r7, r4, #1
   3ea34:	sub	r3, sl, #1
   3ea38:	str	r3, [sp, #8]
   3ea3c:	ldr	r2, [sp, #4]
   3ea40:	sub	r2, r4, r2
   3ea44:	str	r2, [sp, #12]
   3ea48:	ldr	r2, [sp]
   3ea4c:	add	r3, r2, r3
   3ea50:	str	r3, [sp, #16]
   3ea54:	rsb	r3, sl, #1
   3ea58:	str	r3, [sp, #20]
   3ea5c:	mov	r0, r6
   3ea60:	b	3e974 <__assert_fail@plt+0x2c3b0>
   3ea64:	add	r9, r9, r3
   3ea68:	mov	r0, r8
   3ea6c:	add	r8, r9, r4
   3ea70:	sub	r2, r8, r0
   3ea74:	mov	r1, #0
   3ea78:	add	r0, r5, r0
   3ea7c:	bl	123a8 <memchr@plt>
   3ea80:	adds	r3, r8, #0
   3ea84:	movne	r3, #1
   3ea88:	cmp	r0, #0
   3ea8c:	movne	r3, #0
   3ea90:	mov	r0, r3
   3ea94:	cmp	r3, #0
   3ea98:	beq	3eba0 <__assert_fail@plt+0x2c5dc>
   3ea9c:	add	r3, r5, r8
   3eaa0:	ldrb	r3, [r3, #-1]
   3eaa4:	add	r2, sp, #1056	; 0x420
   3eaa8:	add	r3, r2, r3, lsl #2
   3eaac:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   3eab0:	cmp	r3, #0
   3eab4:	bne	3ea64 <__assert_fail@plt+0x2c4a0>
   3eab8:	cmp	sl, r7
   3eabc:	bcs	3eb4c <__assert_fail@plt+0x2c588>
   3eac0:	add	r3, r9, sl
   3eac4:	add	r2, r5, r3
   3eac8:	ldrb	r1, [r6]
   3eacc:	ldrb	r3, [r5, r3]
   3ead0:	cmp	r1, r3
   3ead4:	movne	r3, sl
   3ead8:	bne	3eb00 <__assert_fail@plt+0x2c53c>
   3eadc:	mov	r1, r6
   3eae0:	mov	r3, sl
   3eae4:	add	r3, r3, #1
   3eae8:	cmp	r3, r7
   3eaec:	bcs	3eb4c <__assert_fail@plt+0x2c588>
   3eaf0:	ldrb	ip, [r1, #1]!
   3eaf4:	ldrb	r0, [r2, #1]!
   3eaf8:	cmp	ip, r0
   3eafc:	beq	3eae4 <__assert_fail@plt+0x2c520>
   3eb00:	ldr	r2, [sp, #12]
   3eb04:	add	r9, r2, r9
   3eb08:	add	r9, r9, r3
   3eb0c:	b	3ea68 <__assert_fail@plt+0x2c4a4>
   3eb10:	ldr	r1, [sp, #8]
   3eb14:	cmp	fp, sl
   3eb18:	movcs	r1, sl
   3eb1c:	bcs	3e9fc <__assert_fail@plt+0x2c438>
   3eb20:	ldr	r3, [sp, #8]
   3eb24:	add	r3, r9, r3
   3eb28:	add	r2, r5, r3
   3eb2c:	ldr	ip, [sp, #16]
   3eb30:	ldrb	r0, [ip]
   3eb34:	ldrb	r3, [r5, r3]
   3eb38:	cmp	r0, r3
   3eb3c:	bne	3ea18 <__assert_fail@plt+0x2c454>
   3eb40:	mov	r0, ip
   3eb44:	sub	r6, fp, #1
   3eb48:	b	3e9e0 <__assert_fail@plt+0x2c41c>
   3eb4c:	cmn	fp, #1
   3eb50:	beq	3eb9c <__assert_fail@plt+0x2c5d8>
   3eb54:	add	r3, r9, fp
   3eb58:	add	r2, r5, r3
   3eb5c:	ldr	r0, [sp, #8]
   3eb60:	ldrb	r1, [r0]
   3eb64:	ldrb	r3, [r5, r3]
   3eb68:	cmp	r1, r3
   3eb6c:	bne	3eb90 <__assert_fail@plt+0x2c5cc>
   3eb70:	mov	r3, r0
   3eb74:	ldr	ip, [sp]
   3eb78:	cmp	r3, ip
   3eb7c:	beq	3eb9c <__assert_fail@plt+0x2c5d8>
   3eb80:	ldrb	r0, [r3, #-1]!
   3eb84:	ldrb	r1, [r2, #-1]!
   3eb88:	cmp	r0, r1
   3eb8c:	beq	3eb78 <__assert_fail@plt+0x2c5b4>
   3eb90:	ldr	r3, [sp, #4]
   3eb94:	add	r9, r9, r3
   3eb98:	b	3ea68 <__assert_fail@plt+0x2c4a4>
   3eb9c:	add	r0, r5, r9
   3eba0:	add	sp, sp, #1056	; 0x420
   3eba4:	add	sp, sp, #4
   3eba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ebac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ebb0:	sub	sp, sp, #36	; 0x24
   3ebb4:	ldrb	r3, [r0]
   3ebb8:	cmp	r3, #0
   3ebbc:	beq	3ec60 <__assert_fail@plt+0x2c69c>
   3ebc0:	ldrb	r2, [r1]
   3ebc4:	cmp	r2, #0
   3ebc8:	beq	3ef20 <__assert_fail@plt+0x2c95c>
   3ebcc:	mov	r4, r0
   3ebd0:	add	ip, r1, #1
   3ebd4:	mov	lr, #1
   3ebd8:	mov	fp, ip
   3ebdc:	cmp	r3, r2
   3ebe0:	movne	lr, #0
   3ebe4:	andeq	lr, lr, #1
   3ebe8:	ldrb	r3, [r4, #1]!
   3ebec:	cmp	r3, #0
   3ebf0:	beq	3ec68 <__assert_fail@plt+0x2c6a4>
   3ebf4:	ldrb	r2, [ip], #1
   3ebf8:	cmp	r2, #0
   3ebfc:	bne	3ebd8 <__assert_fail@plt+0x2c614>
   3ec00:	cmp	lr, #0
   3ec04:	bne	3ef20 <__assert_fail@plt+0x2c95c>
   3ec08:	mov	r5, r0
   3ec0c:	sub	r4, fp, r1
   3ec10:	ldrb	r1, [r1]
   3ec14:	add	r0, r0, #1
   3ec18:	bl	122dc <strchr@plt>
   3ec1c:	mov	r6, r0
   3ec20:	cmp	r0, #0
   3ec24:	cmpne	r4, #1
   3ec28:	beq	3ef20 <__assert_fail@plt+0x2c95c>
   3ec2c:	sub	fp, fp, r4
   3ec30:	add	r0, r5, r4
   3ec34:	cmp	r6, r0
   3ec38:	subls	r1, r0, r6
   3ec3c:	movhi	r1, #1
   3ec40:	mov	r7, r1
   3ec44:	cmp	r4, #31
   3ec48:	bls	3ec7c <__assert_fail@plt+0x2c6b8>
   3ec4c:	mov	r3, r4
   3ec50:	mov	r2, fp
   3ec54:	mov	r0, r6
   3ec58:	bl	3e830 <__assert_fail@plt+0x2c26c>
   3ec5c:	b	3ef20 <__assert_fail@plt+0x2c95c>
   3ec60:	mov	fp, r1
   3ec64:	mov	lr, #1
   3ec68:	ldrb	r3, [fp]
   3ec6c:	cmp	r3, #0
   3ec70:	movne	r0, #0
   3ec74:	beq	3ec00 <__assert_fail@plt+0x2c63c>
   3ec78:	b	3ef20 <__assert_fail@plt+0x2c95c>
   3ec7c:	add	r2, sp, #28
   3ec80:	mov	r1, r4
   3ec84:	mov	r0, fp
   3ec88:	bl	3e710 <__assert_fail@plt+0x2c14c>
   3ec8c:	mov	r8, r0
   3ec90:	ldr	r3, [sp, #28]
   3ec94:	str	r3, [sp, #8]
   3ec98:	mov	r2, r0
   3ec9c:	add	r1, fp, r3
   3eca0:	mov	r0, fp
   3eca4:	bl	12060 <memcmp@plt>
   3eca8:	cmp	r0, #0
   3ecac:	beq	3ed3c <__assert_fail@plt+0x2c778>
   3ecb0:	sub	r3, r4, r8
   3ecb4:	cmp	r3, r8
   3ecb8:	movcc	r3, r8
   3ecbc:	add	r3, r3, #1
   3ecc0:	str	r3, [sp, #8]
   3ecc4:	mov	r5, #0
   3ecc8:	sub	r3, r8, #1
   3eccc:	add	r2, fp, r3
   3ecd0:	add	sl, fp, r8
   3ecd4:	rsb	r1, r8, #1
   3ecd8:	str	r1, [sp, #4]
   3ecdc:	mov	r0, r7
   3ece0:	str	fp, [sp, #12]
   3ece4:	mov	fp, r3
   3ece8:	mov	r7, r2
   3ecec:	b	3eea8 <__assert_fail@plt+0x2c8e4>
   3ecf0:	mov	r1, r3
   3ecf4:	sub	r3, r1, #1
   3ecf8:	cmp	r3, r7
   3ecfc:	beq	3ed10 <__assert_fail@plt+0x2c74c>
   3ed00:	ldrb	lr, [r0, #-1]!
   3ed04:	ldrb	ip, [r2, #-1]!
   3ed08:	cmp	lr, ip
   3ed0c:	beq	3ecf0 <__assert_fail@plt+0x2c72c>
   3ed10:	add	r9, r9, #1
   3ed14:	cmp	r9, r1
   3ed18:	bhi	3ed34 <__assert_fail@plt+0x2c770>
   3ed1c:	ldr	r3, [sp, #8]
   3ed20:	add	r5, r5, r3
   3ed24:	ldr	r9, [sp, #16]
   3ed28:	b	3ed88 <__assert_fail@plt+0x2c7c4>
   3ed2c:	mov	r1, r8
   3ed30:	b	3ed10 <__assert_fail@plt+0x2c74c>
   3ed34:	add	r0, r6, r5
   3ed38:	b	3ef20 <__assert_fail@plt+0x2c95c>
   3ed3c:	mov	r9, #0
   3ed40:	mov	r5, r9
   3ed44:	sub	r3, r8, #1
   3ed48:	str	r3, [sp, #4]
   3ed4c:	ldr	r2, [sp, #8]
   3ed50:	sub	r2, r4, r2
   3ed54:	str	r2, [sp, #16]
   3ed58:	add	r3, fp, r3
   3ed5c:	str	r3, [sp, #20]
   3ed60:	rsb	r3, r8, #1
   3ed64:	str	r3, [sp, #12]
   3ed68:	mov	r0, r7
   3ed6c:	b	3ed8c <__assert_fail@plt+0x2c7c8>
   3ed70:	mov	r0, #0
   3ed74:	b	3ef20 <__assert_fail@plt+0x2c95c>
   3ed78:	ldr	r2, [sp, #12]
   3ed7c:	add	r5, r2, r5
   3ed80:	add	r5, r5, r3
   3ed84:	mov	r9, #0
   3ed88:	mov	r0, sl
   3ed8c:	add	sl, r4, r5
   3ed90:	sub	r2, sl, r0
   3ed94:	mov	r1, #0
   3ed98:	add	r0, r6, r0
   3ed9c:	bl	123a8 <memchr@plt>
   3eda0:	adds	r3, sl, #0
   3eda4:	movne	r3, #1
   3eda8:	cmp	r0, #0
   3edac:	movne	r3, #0
   3edb0:	mov	r0, r3
   3edb4:	cmp	r3, #0
   3edb8:	beq	3ef20 <__assert_fail@plt+0x2c95c>
   3edbc:	cmp	r8, r9
   3edc0:	movcs	r3, r8
   3edc4:	movcc	r3, r9
   3edc8:	cmp	r4, r3
   3edcc:	bls	3ee0c <__assert_fail@plt+0x2c848>
   3edd0:	add	r1, fp, r3
   3edd4:	add	r0, r3, r5
   3edd8:	add	r2, r6, r0
   3eddc:	ldrb	ip, [fp, r3]
   3ede0:	ldrb	r0, [r6, r0]
   3ede4:	cmp	ip, r0
   3ede8:	bne	3ed78 <__assert_fail@plt+0x2c7b4>
   3edec:	add	r3, r3, #1
   3edf0:	cmp	r4, r3
   3edf4:	beq	3ee0c <__assert_fail@plt+0x2c848>
   3edf8:	ldrb	ip, [r1, #1]!
   3edfc:	ldrb	r0, [r2, #1]!
   3ee00:	cmp	ip, r0
   3ee04:	beq	3edec <__assert_fail@plt+0x2c828>
   3ee08:	b	3ed78 <__assert_fail@plt+0x2c7b4>
   3ee0c:	ldr	r1, [sp, #4]
   3ee10:	cmp	r8, r9
   3ee14:	movls	r1, r8
   3ee18:	bls	3ed10 <__assert_fail@plt+0x2c74c>
   3ee1c:	ldr	r3, [sp, #4]
   3ee20:	add	r3, r5, r3
   3ee24:	add	r2, r6, r3
   3ee28:	ldr	ip, [sp, #20]
   3ee2c:	ldrb	r0, [ip]
   3ee30:	ldrb	r3, [r6, r3]
   3ee34:	cmp	r0, r3
   3ee38:	bne	3ed2c <__assert_fail@plt+0x2c768>
   3ee3c:	mov	r0, ip
   3ee40:	sub	r7, r9, #1
   3ee44:	b	3ecf4 <__assert_fail@plt+0x2c730>
   3ee48:	cmn	fp, #1
   3ee4c:	beq	3ef1c <__assert_fail@plt+0x2c958>
   3ee50:	add	r3, r5, fp
   3ee54:	add	r2, r6, r3
   3ee58:	ldrb	r1, [r7]
   3ee5c:	ldrb	r3, [r6, r3]
   3ee60:	cmp	r1, r3
   3ee64:	bne	3ee88 <__assert_fail@plt+0x2c8c4>
   3ee68:	mov	r3, r7
   3ee6c:	ldr	ip, [sp, #12]
   3ee70:	cmp	r3, ip
   3ee74:	beq	3ef1c <__assert_fail@plt+0x2c958>
   3ee78:	ldrb	r0, [r3, #-1]!
   3ee7c:	ldrb	r1, [r2, #-1]!
   3ee80:	cmp	r0, r1
   3ee84:	beq	3ee70 <__assert_fail@plt+0x2c8ac>
   3ee88:	ldr	r3, [sp, #8]
   3ee8c:	add	r5, r5, r3
   3ee90:	b	3eea4 <__assert_fail@plt+0x2c8e0>
   3ee94:	mov	r3, r8
   3ee98:	ldr	r2, [sp, #4]
   3ee9c:	add	r5, r2, r5
   3eea0:	add	r5, r5, r3
   3eea4:	mov	r0, r9
   3eea8:	add	r9, r4, r5
   3eeac:	sub	r2, r9, r0
   3eeb0:	mov	r1, #0
   3eeb4:	add	r0, r6, r0
   3eeb8:	bl	123a8 <memchr@plt>
   3eebc:	adds	r3, r9, #0
   3eec0:	movne	r3, #1
   3eec4:	cmp	r0, #0
   3eec8:	movne	r3, #0
   3eecc:	cmp	r3, #0
   3eed0:	beq	3ed70 <__assert_fail@plt+0x2c7ac>
   3eed4:	cmp	r4, r8
   3eed8:	bls	3ee48 <__assert_fail@plt+0x2c884>
   3eedc:	add	r3, r8, r5
   3eee0:	add	r2, r6, r3
   3eee4:	ldrb	r1, [sl]
   3eee8:	ldrb	r3, [r6, r3]
   3eeec:	cmp	r1, r3
   3eef0:	bne	3ee94 <__assert_fail@plt+0x2c8d0>
   3eef4:	mov	r1, sl
   3eef8:	mov	r3, r8
   3eefc:	add	r3, r3, #1
   3ef00:	cmp	r4, r3
   3ef04:	beq	3ee48 <__assert_fail@plt+0x2c884>
   3ef08:	ldrb	ip, [r1, #1]!
   3ef0c:	ldrb	r0, [r2, #1]!
   3ef10:	cmp	ip, r0
   3ef14:	beq	3eefc <__assert_fail@plt+0x2c938>
   3ef18:	b	3ee98 <__assert_fail@plt+0x2c8d4>
   3ef1c:	add	r0, r6, r5
   3ef20:	add	sp, sp, #36	; 0x24
   3ef24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef28:	push	{r4, lr}
   3ef2c:	subs	r1, r0, #0
   3ef30:	beq	3ef44 <__assert_fail@plt+0x2c980>
   3ef34:	mov	r2, #1
   3ef38:	ldr	r0, [pc, #16]	; 3ef50 <__assert_fail@plt+0x2c98c>
   3ef3c:	bl	122e8 <setenv@plt>
   3ef40:	pop	{r4, pc}
   3ef44:	ldr	r0, [pc, #4]	; 3ef50 <__assert_fail@plt+0x2c98c>
   3ef48:	bl	12540 <unsetenv@plt>
   3ef4c:	pop	{r4, pc}
   3ef50:	andeq	r7, r4, r8, asr #19
   3ef54:	push	{r4, r5, r6, r7, r8, lr}
   3ef58:	subs	r6, r0, #0
   3ef5c:	beq	3efc8 <__assert_fail@plt+0x2ca04>
   3ef60:	mov	r0, r6
   3ef64:	bl	122d0 <strlen@plt>
   3ef68:	add	r7, r0, #1
   3ef6c:	cmp	r7, #58	; 0x3a
   3ef70:	addhi	r0, r0, #2
   3ef74:	bls	3f000 <__assert_fail@plt+0x2ca3c>
   3ef78:	add	r0, r0, #8
   3ef7c:	bic	r0, r0, #3
   3ef80:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3ef84:	subs	r4, r0, #0
   3ef88:	beq	3efc0 <__assert_fail@plt+0x2c9fc>
   3ef8c:	mov	r3, #0
   3ef90:	str	r3, [r4]
   3ef94:	subs	r2, r6, r3
   3ef98:	movne	r2, #1
   3ef9c:	strb	r2, [r4, #4]
   3efa0:	strb	r3, [r4, #5]
   3efa4:	add	r5, r4, #5
   3efa8:	mov	r2, r7
   3efac:	mov	r1, r6
   3efb0:	mov	r0, r5
   3efb4:	bl	12000 <memcpy@plt>
   3efb8:	mov	r3, #0
   3efbc:	strb	r3, [r5, r7]
   3efc0:	mov	r0, r4
   3efc4:	pop	{r4, r5, r6, r7, r8, pc}
   3efc8:	mov	r0, #64	; 0x40
   3efcc:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3efd0:	subs	r4, r0, #0
   3efd4:	beq	3efc0 <__assert_fail@plt+0x2c9fc>
   3efd8:	mov	r3, #0
   3efdc:	str	r3, [r4]
   3efe0:	cmp	r6, r3
   3efe4:	movne	r2, #1
   3efe8:	moveq	r2, r3
   3efec:	strb	r2, [r4, #4]
   3eff0:	strb	r3, [r4, #5]
   3eff4:	beq	3efc0 <__assert_fail@plt+0x2c9fc>
   3eff8:	mov	r7, r3
   3effc:	b	3efa4 <__assert_fail@plt+0x2c9e0>
   3f000:	mov	r0, #59	; 0x3b
   3f004:	b	3ef78 <__assert_fail@plt+0x2c9b4>
   3f008:	push	{r4, r5, r6, r7, r8, lr}
   3f00c:	ldr	r6, [r1, #40]	; 0x28
   3f010:	cmp	r6, #0
   3f014:	beq	3f110 <__assert_fail@plt+0x2cb4c>
   3f018:	mov	r5, r0
   3f01c:	mov	r7, r1
   3f020:	cmp	r1, r6
   3f024:	bhi	3f034 <__assert_fail@plt+0x2ca70>
   3f028:	add	r3, r1, #44	; 0x2c
   3f02c:	cmp	r6, r3
   3f030:	bcc	3f118 <__assert_fail@plt+0x2cb54>
   3f034:	ldrb	r3, [r6]
   3f038:	cmp	r3, #0
   3f03c:	addne	r4, r5, #5
   3f040:	bne	3f0a0 <__assert_fail@plt+0x2cadc>
   3f044:	ldr	r4, [pc, #220]	; 3f128 <__assert_fail@plt+0x2cb64>
   3f048:	str	r4, [r7, #40]	; 0x28
   3f04c:	mov	r0, #1
   3f050:	pop	{r4, r5, r6, r7, r8, pc}
   3f054:	mov	r0, r6
   3f058:	bl	3ef54 <__assert_fail@plt+0x2c990>
   3f05c:	str	r0, [r5]
   3f060:	cmp	r0, #0
   3f064:	beq	3f120 <__assert_fail@plt+0x2cb5c>
   3f068:	mov	r3, #0
   3f06c:	strb	r3, [r0, #4]
   3f070:	add	r4, r0, #5
   3f074:	b	3f048 <__assert_fail@plt+0x2ca84>
   3f078:	mov	r0, r4
   3f07c:	bl	122d0 <strlen@plt>
   3f080:	add	r0, r0, #1
   3f084:	ldrb	r3, [r4, r0]!
   3f088:	cmp	r3, #0
   3f08c:	bne	3f0a0 <__assert_fail@plt+0x2cadc>
   3f090:	ldr	r3, [r5]
   3f094:	cmp	r3, #0
   3f098:	addne	r4, r3, #5
   3f09c:	movne	r5, r3
   3f0a0:	mov	r1, r6
   3f0a4:	mov	r0, r4
   3f0a8:	bl	11f1c <strcmp@plt>
   3f0ac:	cmp	r0, #0
   3f0b0:	beq	3f048 <__assert_fail@plt+0x2ca84>
   3f0b4:	ldrb	r3, [r4]
   3f0b8:	cmp	r3, #0
   3f0bc:	bne	3f078 <__assert_fail@plt+0x2cab4>
   3f0c0:	add	r3, r5, #5
   3f0c4:	cmp	r4, r3
   3f0c8:	bne	3f0d8 <__assert_fail@plt+0x2cb14>
   3f0cc:	ldrb	r3, [r5, #4]
   3f0d0:	cmp	r3, #0
   3f0d4:	bne	3f078 <__assert_fail@plt+0x2cab4>
   3f0d8:	mov	r0, r6
   3f0dc:	bl	122d0 <strlen@plt>
   3f0e0:	add	r8, r0, #1
   3f0e4:	add	r3, r5, #64	; 0x40
   3f0e8:	sub	r3, r3, r4
   3f0ec:	cmp	r8, r3
   3f0f0:	bge	3f054 <__assert_fail@plt+0x2ca90>
   3f0f4:	mov	r2, r8
   3f0f8:	mov	r1, r6
   3f0fc:	mov	r0, r4
   3f100:	bl	12000 <memcpy@plt>
   3f104:	mov	r3, #0
   3f108:	strb	r3, [r4, r8]
   3f10c:	b	3f048 <__assert_fail@plt+0x2ca84>
   3f110:	mov	r0, #1
   3f114:	pop	{r4, r5, r6, r7, r8, pc}
   3f118:	mov	r0, #1
   3f11c:	pop	{r4, r5, r6, r7, r8, pc}
   3f120:	mov	r0, #0
   3f124:	pop	{r4, r5, r6, r7, r8, pc}
   3f128:	andeq	r4, r4, r0, lsl r3
   3f12c:	cmp	r0, #1
   3f130:	bxeq	lr
   3f134:	cmp	r0, #0
   3f138:	bxeq	lr
   3f13c:	push	{r4, lr}
   3f140:	ldr	r4, [r0]
   3f144:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3f148:	mov	r0, r4
   3f14c:	cmp	r4, #0
   3f150:	bne	3f140 <__assert_fail@plt+0x2cb7c>
   3f154:	pop	{r4, pc}
   3f158:	push	{r4, r5, r6, lr}
   3f15c:	mov	r4, r0
   3f160:	ldr	r0, [pc, #164]	; 3f20c <__assert_fail@plt+0x2cc48>
   3f164:	bl	121f8 <getenv@plt>
   3f168:	subs	r5, r0, #0
   3f16c:	beq	3f1a8 <__assert_fail@plt+0x2cbe4>
   3f170:	ldrb	r3, [r4, #4]
   3f174:	cmp	r3, #0
   3f178:	moveq	r0, #0
   3f17c:	beq	3f194 <__assert_fail@plt+0x2cbd0>
   3f180:	mov	r1, r5
   3f184:	add	r0, r4, #5
   3f188:	bl	11f1c <strcmp@plt>
   3f18c:	clz	r0, r0
   3f190:	lsr	r0, r0, #5
   3f194:	cmp	r0, #0
   3f198:	movne	r5, #1
   3f19c:	beq	3f1b8 <__assert_fail@plt+0x2cbf4>
   3f1a0:	mov	r0, r5
   3f1a4:	pop	{r4, r5, r6, pc}
   3f1a8:	ldrb	r0, [r4, #4]
   3f1ac:	clz	r0, r0
   3f1b0:	lsr	r0, r0, #5
   3f1b4:	b	3f194 <__assert_fail@plt+0x2cbd0>
   3f1b8:	mov	r0, r5
   3f1bc:	bl	3ef54 <__assert_fail@plt+0x2c990>
   3f1c0:	subs	r5, r0, #0
   3f1c4:	beq	3f1a0 <__assert_fail@plt+0x2cbdc>
   3f1c8:	ldrb	r3, [r4, #4]
   3f1cc:	cmp	r3, #0
   3f1d0:	addne	r0, r4, #5
   3f1d4:	moveq	r0, #0
   3f1d8:	bl	3ef28 <__assert_fail@plt+0x2c964>
   3f1dc:	cmp	r0, #0
   3f1e0:	beq	3f204 <__assert_fail@plt+0x2cc40>
   3f1e4:	bl	12318 <__errno_location@plt>
   3f1e8:	mov	r4, r0
   3f1ec:	ldr	r6, [r0]
   3f1f0:	mov	r0, r5
   3f1f4:	bl	3f12c <__assert_fail@plt+0x2cb68>
   3f1f8:	str	r6, [r4]
   3f1fc:	mov	r5, #0
   3f200:	b	3f1a0 <__assert_fail@plt+0x2cbdc>
   3f204:	bl	12114 <tzset@plt>
   3f208:	b	3f1a0 <__assert_fail@plt+0x2cbdc>
   3f20c:	andeq	r7, r4, r8, asr #19
   3f210:	push	{r4, r5, r6, r7, r8, lr}
   3f214:	cmp	r0, #1
   3f218:	moveq	r7, #1
   3f21c:	beq	3f260 <__assert_fail@plt+0x2cc9c>
   3f220:	mov	r4, r0
   3f224:	bl	12318 <__errno_location@plt>
   3f228:	mov	r5, r0
   3f22c:	ldr	r6, [r0]
   3f230:	ldrb	r3, [r4, #4]
   3f234:	cmp	r3, #0
   3f238:	addne	r0, r4, #5
   3f23c:	moveq	r0, #0
   3f240:	bl	3ef28 <__assert_fail@plt+0x2c964>
   3f244:	cmp	r0, #0
   3f248:	beq	3f268 <__assert_fail@plt+0x2cca4>
   3f24c:	ldr	r6, [r5]
   3f250:	mov	r7, #0
   3f254:	mov	r0, r4
   3f258:	bl	3f12c <__assert_fail@plt+0x2cb68>
   3f25c:	str	r6, [r5]
   3f260:	mov	r0, r7
   3f264:	pop	{r4, r5, r6, r7, r8, pc}
   3f268:	bl	12114 <tzset@plt>
   3f26c:	mov	r7, #1
   3f270:	b	3f254 <__assert_fail@plt+0x2cc90>
   3f274:	push	{r4, r5, r6, r7, r8, lr}
   3f278:	mov	r6, r1
   3f27c:	mov	r4, r2
   3f280:	subs	r5, r0, #0
   3f284:	beq	3f2dc <__assert_fail@plt+0x2cd18>
   3f288:	mov	r0, r5
   3f28c:	bl	3f158 <__assert_fail@plt+0x2cb94>
   3f290:	subs	r7, r0, #0
   3f294:	beq	3f2f0 <__assert_fail@plt+0x2cd2c>
   3f298:	mov	r1, r4
   3f29c:	mov	r0, r6
   3f2a0:	bl	120cc <localtime_r@plt>
   3f2a4:	subs	r6, r0, #0
   3f2a8:	beq	3f2f8 <__assert_fail@plt+0x2cd34>
   3f2ac:	mov	r1, r4
   3f2b0:	mov	r0, r5
   3f2b4:	bl	3f008 <__assert_fail@plt+0x2ca44>
   3f2b8:	mov	r5, r0
   3f2bc:	mov	r0, r7
   3f2c0:	bl	3f210 <__assert_fail@plt+0x2cc4c>
   3f2c4:	and	r0, r0, r5
   3f2c8:	uxtb	r0, r0
   3f2cc:	cmp	r0, #0
   3f2d0:	moveq	r4, #0
   3f2d4:	mov	r0, r4
   3f2d8:	pop	{r4, r5, r6, r7, r8, pc}
   3f2dc:	mov	r1, r2
   3f2e0:	mov	r0, r6
   3f2e4:	bl	11ee0 <gmtime_r@plt>
   3f2e8:	mov	r4, r0
   3f2ec:	b	3f2d4 <__assert_fail@plt+0x2cd10>
   3f2f0:	mov	r4, #0
   3f2f4:	b	3f2d4 <__assert_fail@plt+0x2cd10>
   3f2f8:	mov	r0, r7
   3f2fc:	bl	3f210 <__assert_fail@plt+0x2cc4c>
   3f300:	mov	r4, r6
   3f304:	b	3f2d4 <__assert_fail@plt+0x2cd10>
   3f308:	push	{r4, r5, r6, r7, lr}
   3f30c:	sub	sp, sp, #52	; 0x34
   3f310:	mov	r4, r1
   3f314:	subs	r5, r0, #0
   3f318:	beq	3f3d4 <__assert_fail@plt+0x2ce10>
   3f31c:	mov	r0, r5
   3f320:	bl	3f158 <__assert_fail@plt+0x2cb94>
   3f324:	subs	r7, r0, #0
   3f328:	beq	3f3e4 <__assert_fail@plt+0x2ce20>
   3f32c:	ldr	r3, [r4]
   3f330:	str	r3, [sp, #4]
   3f334:	ldr	r3, [r4, #4]
   3f338:	str	r3, [sp, #8]
   3f33c:	ldr	r3, [r4, #8]
   3f340:	str	r3, [sp, #12]
   3f344:	ldr	r3, [r4, #12]
   3f348:	str	r3, [sp, #16]
   3f34c:	ldr	r3, [r4, #16]
   3f350:	str	r3, [sp, #20]
   3f354:	ldr	r3, [r4, #20]
   3f358:	str	r3, [sp, #24]
   3f35c:	mvn	r3, #0
   3f360:	str	r3, [sp, #32]
   3f364:	ldr	r3, [r4, #32]
   3f368:	str	r3, [sp, #36]	; 0x24
   3f36c:	add	r0, sp, #4
   3f370:	bl	11f58 <mktime@plt>
   3f374:	mov	r6, r0
   3f378:	ldr	r3, [sp, #32]
   3f37c:	cmp	r3, #0
   3f380:	blt	3f3ec <__assert_fail@plt+0x2ce28>
   3f384:	add	r1, sp, #4
   3f388:	mov	r0, r5
   3f38c:	bl	3f008 <__assert_fail@plt+0x2ca44>
   3f390:	mov	r5, r0
   3f394:	mov	r0, r7
   3f398:	bl	3f210 <__assert_fail@plt+0x2cc4c>
   3f39c:	and	r0, r0, r5
   3f3a0:	tst	r0, #255	; 0xff
   3f3a4:	beq	3f3f4 <__assert_fail@plt+0x2ce30>
   3f3a8:	mov	ip, r4
   3f3ac:	add	lr, sp, #4
   3f3b0:	ldm	lr!, {r0, r1, r2, r3}
   3f3b4:	stmia	ip!, {r0, r1, r2, r3}
   3f3b8:	ldm	lr!, {r0, r1, r2, r3}
   3f3bc:	stmia	ip!, {r0, r1, r2, r3}
   3f3c0:	ldm	lr, {r0, r1, r2}
   3f3c4:	stm	ip, {r0, r1, r2}
   3f3c8:	mov	r0, r6
   3f3cc:	add	sp, sp, #52	; 0x34
   3f3d0:	pop	{r4, r5, r6, r7, pc}
   3f3d4:	mov	r0, r1
   3f3d8:	bl	124a4 <timegm@plt>
   3f3dc:	mov	r6, r0
   3f3e0:	b	3f3c8 <__assert_fail@plt+0x2ce04>
   3f3e4:	mvn	r6, #0
   3f3e8:	b	3f3c8 <__assert_fail@plt+0x2ce04>
   3f3ec:	mov	r0, r7
   3f3f0:	bl	3f210 <__assert_fail@plt+0x2cc4c>
   3f3f4:	mvn	r6, #0
   3f3f8:	b	3f3c8 <__assert_fail@plt+0x2ce04>
   3f3fc:	push	{r4, lr}
   3f400:	ldr	r3, [pc, #4]	; 3f40c <__assert_fail@plt+0x2ce48>
   3f404:	ldr	r0, [r3]
   3f408:	bl	122a0 <exit@plt>
   3f40c:	andeq	r9, r5, ip, ror #9
   3f410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f414:	sub	sp, sp, #12
   3f418:	str	r0, [sp, #4]
   3f41c:	mov	r6, r1
   3f420:	mov	fp, r2
   3f424:	mov	r8, r3
   3f428:	bl	122d0 <strlen@plt>
   3f42c:	str	r0, [sp]
   3f430:	ldr	r4, [r6]
   3f434:	cmp	r4, #0
   3f438:	beq	3f4e0 <__assert_fail@plt+0x2cf1c>
   3f43c:	mov	r5, fp
   3f440:	mov	sl, #0
   3f444:	mvn	r9, #0
   3f448:	mov	r7, sl
   3f44c:	b	3f46c <__assert_fail@plt+0x2cea8>
   3f450:	mov	r9, r7
   3f454:	b	3f4d4 <__assert_fail@plt+0x2cf10>
   3f458:	add	r7, r7, #1
   3f45c:	ldr	r4, [r6, #4]!
   3f460:	add	r5, r5, r8
   3f464:	cmp	r4, #0
   3f468:	beq	3f4cc <__assert_fail@plt+0x2cf08>
   3f46c:	ldr	r2, [sp]
   3f470:	ldr	r1, [sp, #4]
   3f474:	mov	r0, r4
   3f478:	bl	12564 <strncmp@plt>
   3f47c:	cmp	r0, #0
   3f480:	bne	3f458 <__assert_fail@plt+0x2ce94>
   3f484:	mov	r0, r4
   3f488:	bl	122d0 <strlen@plt>
   3f48c:	ldr	r3, [sp]
   3f490:	cmp	r3, r0
   3f494:	beq	3f450 <__assert_fail@plt+0x2ce8c>
   3f498:	cmn	r9, #1
   3f49c:	moveq	r9, r7
   3f4a0:	beq	3f458 <__assert_fail@plt+0x2ce94>
   3f4a4:	cmp	fp, #0
   3f4a8:	moveq	sl, #1
   3f4ac:	beq	3f458 <__assert_fail@plt+0x2ce94>
   3f4b0:	mov	r2, r8
   3f4b4:	mov	r1, r5
   3f4b8:	mla	r0, r8, r9, fp
   3f4bc:	bl	12060 <memcmp@plt>
   3f4c0:	cmp	r0, #0
   3f4c4:	movne	sl, #1
   3f4c8:	b	3f458 <__assert_fail@plt+0x2ce94>
   3f4cc:	cmp	sl, #0
   3f4d0:	mvnne	r9, #1
   3f4d4:	mov	r0, r9
   3f4d8:	add	sp, sp, #12
   3f4dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f4e0:	mvn	r9, #0
   3f4e4:	b	3f4d4 <__assert_fail@plt+0x2cf10>
   3f4e8:	push	{r4, r5, r6, lr}
   3f4ec:	sub	sp, sp, #8
   3f4f0:	mov	r5, r0
   3f4f4:	mov	r4, r1
   3f4f8:	cmn	r2, #1
   3f4fc:	mov	r2, #5
   3f500:	ldreq	r1, [pc, #76]	; 3f554 <__assert_fail@plt+0x2cf90>
   3f504:	ldrne	r1, [pc, #76]	; 3f558 <__assert_fail@plt+0x2cf94>
   3f508:	mov	r0, #0
   3f50c:	bl	12084 <dcgettext@plt>
   3f510:	mov	r6, r0
   3f514:	mov	r2, r4
   3f518:	mov	r1, #8
   3f51c:	mov	r0, #0
   3f520:	bl	2bc6c <__assert_fail@plt+0x196a8>
   3f524:	mov	r4, r0
   3f528:	mov	r1, r5
   3f52c:	mov	r0, #1
   3f530:	bl	2befc <__assert_fail@plt+0x19938>
   3f534:	str	r0, [sp]
   3f538:	mov	r3, r4
   3f53c:	mov	r2, r6
   3f540:	mov	r1, #0
   3f544:	mov	r0, r1
   3f548:	bl	121bc <error@plt>
   3f54c:	add	sp, sp, #8
   3f550:	pop	{r4, r5, r6, pc}
   3f554:	andeq	r8, r4, r4, lsl r5
   3f558:	andeq	r8, r4, r0, lsr r5
   3f55c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f560:	mov	r7, r0
   3f564:	mov	r4, r1
   3f568:	mov	r8, r2
   3f56c:	mov	r2, #5
   3f570:	ldr	r1, [pc, #180]	; 3f62c <__assert_fail@plt+0x2d068>
   3f574:	mov	r0, #0
   3f578:	bl	12084 <dcgettext@plt>
   3f57c:	ldr	r3, [pc, #172]	; 3f630 <__assert_fail@plt+0x2d06c>
   3f580:	ldr	r1, [r3]
   3f584:	bl	12558 <fputs@plt>
   3f588:	ldr	r5, [r7]
   3f58c:	cmp	r5, #0
   3f590:	beq	3f618 <__assert_fail@plt+0x2d054>
   3f594:	mov	r9, #0
   3f598:	mov	r6, r9
   3f59c:	ldr	sl, [pc, #140]	; 3f630 <__assert_fail@plt+0x2d06c>
   3f5a0:	b	3f5d8 <__assert_fail@plt+0x2d014>
   3f5a4:	ldr	r9, [sl]
   3f5a8:	mov	r0, r5
   3f5ac:	bl	2bf0c <__assert_fail@plt+0x19948>
   3f5b0:	mov	r2, r0
   3f5b4:	ldr	r1, [pc, #120]	; 3f634 <__assert_fail@plt+0x2d070>
   3f5b8:	mov	r0, r9
   3f5bc:	bl	1230c <fprintf@plt>
   3f5c0:	mov	r9, r4
   3f5c4:	add	r6, r6, #1
   3f5c8:	ldr	r5, [r7, #4]!
   3f5cc:	add	r4, r4, r8
   3f5d0:	cmp	r5, #0
   3f5d4:	beq	3f618 <__assert_fail@plt+0x2d054>
   3f5d8:	cmp	r6, #0
   3f5dc:	beq	3f5a4 <__assert_fail@plt+0x2cfe0>
   3f5e0:	mov	r2, r8
   3f5e4:	mov	r1, r4
   3f5e8:	mov	r0, r9
   3f5ec:	bl	12060 <memcmp@plt>
   3f5f0:	cmp	r0, #0
   3f5f4:	bne	3f5a4 <__assert_fail@plt+0x2cfe0>
   3f5f8:	ldr	fp, [sl]
   3f5fc:	mov	r0, r5
   3f600:	bl	2bf0c <__assert_fail@plt+0x19948>
   3f604:	mov	r2, r0
   3f608:	ldr	r1, [pc, #40]	; 3f638 <__assert_fail@plt+0x2d074>
   3f60c:	mov	r0, fp
   3f610:	bl	1230c <fprintf@plt>
   3f614:	b	3f5c4 <__assert_fail@plt+0x2d000>
   3f618:	ldr	r3, [pc, #16]	; 3f630 <__assert_fail@plt+0x2d06c>
   3f61c:	ldr	r1, [r3]
   3f620:	mov	r0, #10
   3f624:	bl	124b0 <putc@plt>
   3f628:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f62c:	andeq	r8, r4, r0, asr r5
   3f630:	andeq	r9, r5, r8, asr #10
   3f634:	andeq	r8, r4, r8, ror #10
   3f638:	andeq	r8, r4, r0, ror r5
   3f63c:	push	{r4, r5, r6, r7, r8, lr}
   3f640:	mov	r7, r0
   3f644:	mov	r6, r1
   3f648:	mov	r4, r2
   3f64c:	mov	r5, r3
   3f650:	ldr	r3, [sp, #24]
   3f654:	mov	r2, r5
   3f658:	mov	r1, r4
   3f65c:	mov	r0, r6
   3f660:	bl	3f410 <__assert_fail@plt+0x2ce4c>
   3f664:	cmp	r0, #0
   3f668:	popge	{r4, r5, r6, r7, r8, pc}
   3f66c:	mov	r2, r0
   3f670:	mov	r1, r6
   3f674:	mov	r0, r7
   3f678:	bl	3f4e8 <__assert_fail@plt+0x2cf24>
   3f67c:	ldr	r2, [sp, #24]
   3f680:	mov	r1, r5
   3f684:	mov	r0, r4
   3f688:	bl	3f55c <__assert_fail@plt+0x2cf98>
   3f68c:	ldr	r3, [sp, #28]
   3f690:	blx	r3
   3f694:	mvn	r0, #0
   3f698:	pop	{r4, r5, r6, r7, r8, pc}
   3f69c:	push	{r4, r5, r6, r7, r8, lr}
   3f6a0:	ldr	r6, [r1]
   3f6a4:	cmp	r6, #0
   3f6a8:	beq	3f6ec <__assert_fail@plt+0x2d128>
   3f6ac:	mov	r7, r3
   3f6b0:	mov	r8, r0
   3f6b4:	mov	r4, r2
   3f6b8:	mov	r5, r1
   3f6bc:	mov	r2, r7
   3f6c0:	mov	r1, r4
   3f6c4:	mov	r0, r8
   3f6c8:	bl	12060 <memcmp@plt>
   3f6cc:	cmp	r0, #0
   3f6d0:	beq	3f6e4 <__assert_fail@plt+0x2d120>
   3f6d4:	ldr	r6, [r5, #4]!
   3f6d8:	add	r4, r4, r7
   3f6dc:	cmp	r6, #0
   3f6e0:	bne	3f6bc <__assert_fail@plt+0x2d0f8>
   3f6e4:	mov	r0, r6
   3f6e8:	pop	{r4, r5, r6, r7, r8, pc}
   3f6ec:	mov	r6, #0
   3f6f0:	b	3f6e4 <__assert_fail@plt+0x2d120>
   3f6f4:	push	{r4, r5, r6, r7, lr}
   3f6f8:	sub	sp, sp, #36	; 0x24
   3f6fc:	mov	r4, r0
   3f700:	ldrb	r3, [r2]
   3f704:	cmp	r3, #0
   3f708:	strbeq	r3, [r0]
   3f70c:	beq	3f77c <__assert_fail@plt+0x2d1b8>
   3f710:	mov	r6, r1
   3f714:	mov	r5, r2
   3f718:	ldr	r3, [pc, #208]	; 3f7f0 <__assert_fail@plt+0x2d22c>
   3f71c:	ldr	r3, [r3]
   3f720:	cmp	r3, #0
   3f724:	beq	3f784 <__assert_fail@plt+0x2d1c0>
   3f728:	ldr	r3, [pc, #192]	; 3f7f0 <__assert_fail@plt+0x2d22c>
   3f72c:	ldr	r3, [r3]
   3f730:	cmp	r3, #0
   3f734:	movlt	r0, #0
   3f738:	blt	3f77c <__assert_fail@plt+0x2d1b8>
   3f73c:	mov	r0, r5
   3f740:	bl	122d0 <strlen@plt>
   3f744:	add	r0, r0, #27
   3f748:	cmp	r0, #4032	; 0xfc0
   3f74c:	bls	3f75c <__assert_fail@plt+0x2d198>
   3f750:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3f754:	subs	r4, r0, #0
   3f758:	beq	3f7e8 <__assert_fail@plt+0x2d224>
   3f75c:	mov	r2, r6
   3f760:	ldr	r1, [pc, #140]	; 3f7f4 <__assert_fail@plt+0x2d230>
   3f764:	mov	r0, r4
   3f768:	bl	12480 <sprintf@plt>
   3f76c:	mov	r1, r5
   3f770:	add	r0, r4, r0
   3f774:	bl	12180 <strcpy@plt>
   3f778:	mov	r0, r4
   3f77c:	add	sp, sp, #36	; 0x24
   3f780:	pop	{r4, r5, r6, r7, pc}
   3f784:	ldr	r1, [pc, #108]	; 3f7f8 <__assert_fail@plt+0x2d234>
   3f788:	ldr	r0, [pc, #108]	; 3f7fc <__assert_fail@plt+0x2d238>
   3f78c:	bl	121ec <open64@plt>
   3f790:	subs	r7, r0, #0
   3f794:	blt	3f7d4 <__assert_fail@plt+0x2d210>
   3f798:	mov	r2, r7
   3f79c:	ldr	r1, [pc, #92]	; 3f800 <__assert_fail@plt+0x2d23c>
   3f7a0:	mov	r0, sp
   3f7a4:	bl	12480 <sprintf@plt>
   3f7a8:	mov	r1, #0
   3f7ac:	mov	r0, sp
   3f7b0:	bl	123c0 <access@plt>
   3f7b4:	cmp	r0, #0
   3f7b8:	mvnne	r2, #0
   3f7bc:	moveq	r2, #1
   3f7c0:	ldr	r3, [pc, #40]	; 3f7f0 <__assert_fail@plt+0x2d22c>
   3f7c4:	str	r2, [r3]
   3f7c8:	mov	r0, r7
   3f7cc:	bl	1257c <close@plt>
   3f7d0:	b	3f728 <__assert_fail@plt+0x2d164>
   3f7d4:	mvn	r2, #0
   3f7d8:	ldr	r3, [pc, #16]	; 3f7f0 <__assert_fail@plt+0x2d22c>
   3f7dc:	str	r2, [r3]
   3f7e0:	mov	r0, #0
   3f7e4:	b	3f77c <__assert_fail@plt+0x2d1b8>
   3f7e8:	mov	r0, r4
   3f7ec:	b	3f77c <__assert_fail@plt+0x2d1b8>
   3f7f0:	andeq	r9, r5, ip, lsr lr
   3f7f4:	muleq	r4, r0, r5
   3f7f8:	andeq	r4, r8, r0, lsl #18
   3f7fc:	andeq	r6, r4, r8, asr r7
   3f800:	andeq	r8, r4, r8, ror r5
   3f804:	ldrb	r3, [r0]
   3f808:	cmp	r3, #47	; 0x2f
   3f80c:	bne	3f81c <__assert_fail@plt+0x2d258>
   3f810:	ldrb	r3, [r0, #1]!
   3f814:	cmp	r3, #47	; 0x2f
   3f818:	beq	3f810 <__assert_fail@plt+0x2d24c>
   3f81c:	ldrb	r2, [r0]
   3f820:	cmp	r2, #0
   3f824:	bxeq	lr
   3f828:	push	{lr}		; (str lr, [sp, #-4]!)
   3f82c:	mov	r1, r0
   3f830:	mov	r3, #0
   3f834:	mov	lr, #1
   3f838:	mov	ip, r3
   3f83c:	b	3f84c <__assert_fail@plt+0x2d288>
   3f840:	ldrb	r2, [r1, #1]!
   3f844:	cmp	r2, #0
   3f848:	beq	3f868 <__assert_fail@plt+0x2d2a4>
   3f84c:	cmp	r2, #47	; 0x2f
   3f850:	moveq	r3, lr
   3f854:	beq	3f840 <__assert_fail@plt+0x2d27c>
   3f858:	cmp	r3, #0
   3f85c:	movne	r0, r1
   3f860:	movne	r3, ip
   3f864:	b	3f840 <__assert_fail@plt+0x2d27c>
   3f868:	pop	{pc}		; (ldr pc, [sp], #4)
   3f86c:	push	{r4, lr}
   3f870:	mov	r4, r0
   3f874:	bl	122d0 <strlen@plt>
   3f878:	cmp	r0, #1
   3f87c:	popls	{r4, pc}
   3f880:	sub	r3, r0, #1
   3f884:	add	r2, r4, r3
   3f888:	ldrb	r1, [r4, r3]
   3f88c:	cmp	r1, #47	; 0x2f
   3f890:	popne	{r4, pc}
   3f894:	cmp	r3, #1
   3f898:	beq	3f8bc <__assert_fail@plt+0x2d2f8>
   3f89c:	sub	r0, r3, #1
   3f8a0:	ldrb	r1, [r2, #-1]!
   3f8a4:	cmp	r1, #47	; 0x2f
   3f8a8:	beq	3f8b4 <__assert_fail@plt+0x2d2f0>
   3f8ac:	mov	r0, r3
   3f8b0:	pop	{r4, pc}
   3f8b4:	mov	r3, r0
   3f8b8:	b	3f894 <__assert_fail@plt+0x2d2d0>
   3f8bc:	mov	r0, #1
   3f8c0:	pop	{r4, pc}
   3f8c4:	push	{r4, r5, r6, lr}
   3f8c8:	mov	r4, r0
   3f8cc:	bl	12198 <__fpending@plt>
   3f8d0:	mov	r6, r0
   3f8d4:	mov	r0, r4
   3f8d8:	bl	11fc4 <ferror@plt>
   3f8dc:	mov	r5, r0
   3f8e0:	mov	r0, r4
   3f8e4:	bl	123cc <fclose@plt>
   3f8e8:	cmp	r5, #0
   3f8ec:	bne	3f914 <__assert_fail@plt+0x2d350>
   3f8f0:	cmp	r0, #0
   3f8f4:	popeq	{r4, r5, r6, pc}
   3f8f8:	cmp	r6, #0
   3f8fc:	bne	3f930 <__assert_fail@plt+0x2d36c>
   3f900:	bl	12318 <__errno_location@plt>
   3f904:	ldr	r0, [r0]
   3f908:	subs	r0, r0, #9
   3f90c:	mvnne	r0, #0
   3f910:	pop	{r4, r5, r6, pc}
   3f914:	cmp	r0, #0
   3f918:	bne	3f938 <__assert_fail@plt+0x2d374>
   3f91c:	bl	12318 <__errno_location@plt>
   3f920:	mov	r3, #0
   3f924:	str	r3, [r0]
   3f928:	mvn	r0, #0
   3f92c:	pop	{r4, r5, r6, pc}
   3f930:	mvn	r0, #0
   3f934:	pop	{r4, r5, r6, pc}
   3f938:	mvn	r0, #0
   3f93c:	pop	{r4, r5, r6, pc}
   3f940:	mov	r2, #0
   3f944:	mov	r3, #0
   3f948:	strd	r2, [r0, #16]
   3f94c:	ldr	r3, [pc, #4]	; 3f958 <__assert_fail@plt+0x2d394>
   3f950:	str	r3, [r0, #24]
   3f954:	bx	lr
   3f958:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   3f95c:	push	{r4, r5, r6, r7, r8, lr}
   3f960:	ldr	r2, [r0, #24]
   3f964:	ldr	r3, [pc, #172]	; 3fa18 <__assert_fail@plt+0x2d454>
   3f968:	cmp	r2, r3
   3f96c:	bne	3f9b4 <__assert_fail@plt+0x2d3f0>
   3f970:	ldrd	r6, [r0, #16]
   3f974:	orrs	r3, r6, r7
   3f978:	beq	3f9f4 <__assert_fail@plt+0x2d430>
   3f97c:	ldrd	r4, [r1, #96]	; 0x60
   3f980:	ldrd	r2, [r0]
   3f984:	cmp	r5, r3
   3f988:	cmpeq	r4, r2
   3f98c:	beq	3f9c8 <__assert_fail@plt+0x2d404>
   3f990:	adds	r2, r6, #1
   3f994:	adc	r3, r7, #0
   3f998:	strd	r2, [r0, #16]
   3f99c:	and	r6, r6, r2
   3f9a0:	and	r7, r7, r3
   3f9a4:	orrs	ip, r6, r7
   3f9a8:	beq	3f9e4 <__assert_fail@plt+0x2d420>
   3f9ac:	mov	r0, #0
   3f9b0:	pop	{r4, r5, r6, r7, r8, pc}
   3f9b4:	ldr	r3, [pc, #96]	; 3fa1c <__assert_fail@plt+0x2d458>
   3f9b8:	mov	r2, #60	; 0x3c
   3f9bc:	ldr	r1, [pc, #92]	; 3fa20 <__assert_fail@plt+0x2d45c>
   3f9c0:	ldr	r0, [pc, #92]	; 3fa24 <__assert_fail@plt+0x2d460>
   3f9c4:	bl	125c4 <__assert_fail@plt>
   3f9c8:	ldrd	r4, [r1]
   3f9cc:	ldrd	r2, [r0, #8]
   3f9d0:	cmp	r5, r3
   3f9d4:	cmpeq	r4, r2
   3f9d8:	bne	3f990 <__assert_fail@plt+0x2d3cc>
   3f9dc:	mov	r0, #1
   3f9e0:	pop	{r4, r5, r6, r7, r8, pc}
   3f9e4:	orrs	r3, r2, r3
   3f9e8:	bne	3fa00 <__assert_fail@plt+0x2d43c>
   3f9ec:	mov	r0, #1
   3f9f0:	pop	{r4, r5, r6, r7, r8, pc}
   3f9f4:	mov	r2, #1
   3f9f8:	mov	r3, #0
   3f9fc:	strd	r2, [r0, #16]
   3fa00:	ldrd	r2, [r1]
   3fa04:	strd	r2, [r0, #8]
   3fa08:	ldrd	r2, [r1, #96]	; 0x60
   3fa0c:	strd	r2, [r0]
   3fa10:	mov	r0, #0
   3fa14:	pop	{r4, r5, r6, r7, r8, pc}
   3fa18:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   3fa1c:	andeq	r8, r4, r4, lsr #11
   3fa20:			; <UNDEFINED> instruction: 0x000485b0
   3fa24:	andeq	r8, r4, r0, asr #11
   3fa28:	ldr	ip, [r0, #4]
   3fa2c:	cmp	ip, r1
   3fa30:	bcs	3fa78 <__assert_fail@plt+0x2d4b4>
   3fa34:	push	{r4, r5, r6, r7, r8, lr}
   3fa38:	mov	r6, r3
   3fa3c:	mov	r7, r2
   3fa40:	mov	r5, r1
   3fa44:	mov	r4, r0
   3fa48:	cmp	r3, #0
   3fa4c:	beq	3fa84 <__assert_fail@plt+0x2d4c0>
   3fa50:	mov	r1, r3
   3fa54:	mvn	r0, #0
   3fa58:	bl	41a68 <__assert_fail@plt+0x2f4a4>
   3fa5c:	cmp	r5, r0
   3fa60:	bls	3fa84 <__assert_fail@plt+0x2d4c0>
   3fa64:	bl	12318 <__errno_location@plt>
   3fa68:	mov	r3, #12
   3fa6c:	str	r3, [r0]
   3fa70:	mov	r0, #0
   3fa74:	pop	{r4, r5, r6, r7, r8, pc}
   3fa78:	str	r1, [r0]
   3fa7c:	mov	r0, #1
   3fa80:	bx	lr
   3fa84:	mul	r1, r6, r5
   3fa88:	ldr	r0, [r4, #8]
   3fa8c:	cmp	r0, r7
   3fa90:	beq	3fab4 <__assert_fail@plt+0x2d4f0>
   3fa94:	bl	31320 <__assert_fail@plt+0x1ed5c>
   3fa98:	subs	r7, r0, #0
   3fa9c:	beq	3faec <__assert_fail@plt+0x2d528>
   3faa0:	str	r7, [r4, #8]
   3faa4:	str	r5, [r4, #4]
   3faa8:	str	r5, [r4]
   3faac:	mov	r0, #1
   3fab0:	pop	{r4, r5, r6, r7, r8, pc}
   3fab4:	mov	r0, r1
   3fab8:	bl	3079c <__assert_fail@plt+0x1e1d8>
   3fabc:	subs	r7, r0, #0
   3fac0:	beq	3fae4 <__assert_fail@plt+0x2d520>
   3fac4:	ldr	r1, [r4, #8]
   3fac8:	cmp	r1, #0
   3facc:	beq	3faa0 <__assert_fail@plt+0x2d4dc>
   3fad0:	ldr	r2, [r4]
   3fad4:	mul	r2, r2, r6
   3fad8:	mov	r0, r7
   3fadc:	bl	12000 <memcpy@plt>
   3fae0:	b	3faa0 <__assert_fail@plt+0x2d4dc>
   3fae4:	mov	r0, #0
   3fae8:	pop	{r4, r5, r6, r7, r8, pc}
   3faec:	mov	r0, #0
   3faf0:	pop	{r4, r5, r6, r7, r8, pc}
   3faf4:	push	{r4, lr}
   3faf8:	mov	r1, r0
   3fafc:	mov	r0, #0
   3fb00:	bl	11fe8 <clock_gettime@plt>
   3fb04:	pop	{r4, pc}
   3fb08:	push	{r4, r5, lr}
   3fb0c:	sub	sp, sp, #12
   3fb10:	mov	r4, r0
   3fb14:	mov	r0, sp
   3fb18:	bl	3faf4 <__assert_fail@plt+0x2d530>
   3fb1c:	ldm	sp, {r0, r1}
   3fb20:	stm	r4, {r0, r1}
   3fb24:	mov	r0, r4
   3fb28:	add	sp, sp, #12
   3fb2c:	pop	{r4, r5, pc}
   3fb30:	push	{lr}		; (str lr, [sp, #-4]!)
   3fb34:	sub	sp, sp, #268	; 0x10c
   3fb38:	ldr	r2, [pc, #68]	; 3fb84 <__assert_fail@plt+0x2d5c0>
   3fb3c:	add	r1, sp, #4
   3fb40:	bl	419c0 <__assert_fail@plt+0x2f3fc>
   3fb44:	cmp	r0, #0
   3fb48:	movne	r0, #0
   3fb4c:	bne	3fb7c <__assert_fail@plt+0x2d5b8>
   3fb50:	ldr	r1, [pc, #48]	; 3fb88 <__assert_fail@plt+0x2d5c4>
   3fb54:	add	r0, sp, #4
   3fb58:	bl	11f1c <strcmp@plt>
   3fb5c:	cmp	r0, #0
   3fb60:	moveq	r0, #0
   3fb64:	beq	3fb7c <__assert_fail@plt+0x2d5b8>
   3fb68:	ldr	r1, [pc, #28]	; 3fb8c <__assert_fail@plt+0x2d5c8>
   3fb6c:	add	r0, sp, #4
   3fb70:	bl	11f1c <strcmp@plt>
   3fb74:	adds	r0, r0, #0
   3fb78:	movne	r0, #1
   3fb7c:	add	sp, sp, #268	; 0x10c
   3fb80:	pop	{pc}		; (ldr pc, [sp], #4)
   3fb84:	andeq	r0, r0, r1, lsl #2
   3fb88:	ldrdeq	r7, [r4], -r4
   3fb8c:	ldrdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   3fb90:	mov	r3, #1
   3fb94:	strb	r3, [r0, #28]
   3fb98:	mov	r3, #0
   3fb9c:	str	r3, [r0, #20]
   3fba0:	str	r3, [r0, #24]
   3fba4:	str	r1, [r0]
   3fba8:	str	r1, [r0, #4]
   3fbac:	str	r1, [r0, #8]
   3fbb0:	str	r1, [r0, #12]
   3fbb4:	str	r1, [r0, #16]
   3fbb8:	bx	lr
   3fbbc:	ldrb	r0, [r0, #28]
   3fbc0:	bx	lr
   3fbc4:	mov	r2, r0
   3fbc8:	ldrb	ip, [r0, #28]
   3fbcc:	eor	ip, ip, #1
   3fbd0:	ldr	r3, [r0, #20]
   3fbd4:	add	r3, ip, r3
   3fbd8:	and	r3, r3, #3
   3fbdc:	ldr	r0, [r0, r3, lsl #2]
   3fbe0:	str	r1, [r2, r3, lsl #2]
   3fbe4:	str	r3, [r2, #20]
   3fbe8:	ldr	r1, [r2, #24]
   3fbec:	cmp	r3, r1
   3fbf0:	addeq	r3, ip, r3
   3fbf4:	andeq	r3, r3, #3
   3fbf8:	streq	r3, [r2, #24]
   3fbfc:	mov	r3, #0
   3fc00:	strb	r3, [r2, #28]
   3fc04:	bx	lr
   3fc08:	ldrb	r3, [r0, #28]
   3fc0c:	cmp	r3, #0
   3fc10:	bne	3fc48 <__assert_fail@plt+0x2d684>
   3fc14:	mov	r2, r0
   3fc18:	ldr	r3, [r0, #20]
   3fc1c:	ldr	r0, [r0, r3, lsl #2]
   3fc20:	ldr	r1, [r2, #16]
   3fc24:	str	r1, [r2, r3, lsl #2]
   3fc28:	ldr	r1, [r2, #24]
   3fc2c:	cmp	r3, r1
   3fc30:	moveq	r3, #1
   3fc34:	strbeq	r3, [r2, #28]
   3fc38:	addne	r3, r3, #3
   3fc3c:	andne	r3, r3, #3
   3fc40:	strne	r3, [r2, #20]
   3fc44:	bx	lr
   3fc48:	push	{r4, lr}
   3fc4c:	bl	12570 <abort@plt>
   3fc50:	push	{r4, lr}
   3fc54:	mov	r0, #14
   3fc58:	bl	12450 <nl_langinfo@plt>
   3fc5c:	cmp	r0, #0
   3fc60:	beq	3fc78 <__assert_fail@plt+0x2d6b4>
   3fc64:	ldrb	r2, [r0]
   3fc68:	ldr	r3, [pc, #16]	; 3fc80 <__assert_fail@plt+0x2d6bc>
   3fc6c:	cmp	r2, #0
   3fc70:	moveq	r0, r3
   3fc74:	pop	{r4, pc}
   3fc78:	ldr	r0, [pc]	; 3fc80 <__assert_fail@plt+0x2d6bc>
   3fc7c:	pop	{r4, pc}
   3fc80:	andeq	r8, r4, r0, ror #11
   3fc84:	cmn	r0, #-2147483631	; 0x80000011
   3fc88:	bhi	3fcbc <__assert_fail@plt+0x2d6f8>
   3fc8c:	push	{r4, lr}
   3fc90:	add	r0, r0, #16
   3fc94:	bl	12210 <malloc@plt>
   3fc98:	cmp	r0, #0
   3fc9c:	beq	3fcc4 <__assert_fail@plt+0x2d700>
   3fca0:	add	r3, r0, #8
   3fca4:	bic	r3, r3, #15
   3fca8:	rsb	r2, r0, #8
   3fcac:	add	r3, r3, r2
   3fcb0:	add	r0, r0, r3
   3fcb4:	strb	r3, [r0, #-1]
   3fcb8:	pop	{r4, pc}
   3fcbc:	mov	r0, #0
   3fcc0:	bx	lr
   3fcc4:	mov	r0, #0
   3fcc8:	pop	{r4, pc}
   3fccc:	push	{r4, lr}
   3fcd0:	tst	r0, #7
   3fcd4:	bne	3fcf0 <__assert_fail@plt+0x2d72c>
   3fcd8:	tst	r0, #8
   3fcdc:	popeq	{r4, pc}
   3fce0:	ldrb	r3, [r0, #-1]
   3fce4:	sub	r0, r0, r3
   3fce8:	bl	2e3fc <__assert_fail@plt+0x1be38>
   3fcec:	pop	{r4, pc}
   3fcf0:	bl	12570 <abort@plt>
   3fcf4:	push	{r4, lr}
   3fcf8:	mov	r4, r0
   3fcfc:	bl	11f7c <wcwidth@plt>
   3fd00:	cmp	r0, #0
   3fd04:	popge	{r4, pc}
   3fd08:	mov	r0, r4
   3fd0c:	bl	120e4 <iswcntrl@plt>
   3fd10:	clz	r0, r0
   3fd14:	lsr	r0, r0, #5
   3fd18:	pop	{r4, pc}
   3fd1c:	push	{r4, r5, r6, lr}
   3fd20:	mov	r5, r0
   3fd24:	mov	r4, r1
   3fd28:	mov	r3, r1
   3fd2c:	ldr	r1, [r3], #16
   3fd30:	cmp	r1, r3
   3fd34:	strne	r1, [r0]
   3fd38:	beq	3fd5c <__assert_fail@plt+0x2d798>
   3fd3c:	ldr	r3, [r4, #4]
   3fd40:	str	r3, [r5, #4]
   3fd44:	ldrb	r3, [r4, #8]
   3fd48:	strb	r3, [r5, #8]
   3fd4c:	cmp	r3, #0
   3fd50:	ldrne	r3, [r4, #12]
   3fd54:	strne	r3, [r5, #12]
   3fd58:	pop	{r4, r5, r6, pc}
   3fd5c:	add	r6, r0, #16
   3fd60:	ldr	r2, [r4, #4]
   3fd64:	mov	r0, r6
   3fd68:	bl	12000 <memcpy@plt>
   3fd6c:	str	r6, [r5]
   3fd70:	b	3fd3c <__assert_fail@plt+0x2d778>
   3fd74:	lsr	r2, r0, #5
   3fd78:	and	r0, r0, #31
   3fd7c:	ldr	r3, [pc, #12]	; 3fd90 <__assert_fail@plt+0x2d7cc>
   3fd80:	ldr	r3, [r3, r2, lsl #2]
   3fd84:	lsr	r0, r3, r0
   3fd88:	and	r0, r0, #1
   3fd8c:	bx	lr
   3fd90:	andeq	r8, r4, r8, ror #11
   3fd94:	push	{r4, r5, r6, r7, r8, lr}
   3fd98:	sub	sp, sp, #56	; 0x38
   3fd9c:	mov	r4, r0
   3fda0:	bl	12168 <__ctype_get_mb_cur_max@plt>
   3fda4:	cmp	r0, #1
   3fda8:	bls	3ff40 <__assert_fail@plt+0x2d97c>
   3fdac:	str	r4, [sp, #16]
   3fdb0:	mov	r4, #0
   3fdb4:	strb	r4, [sp]
   3fdb8:	str	r4, [sp, #4]
   3fdbc:	str	r4, [sp, #8]
   3fdc0:	strb	r4, [sp, #12]
   3fdc4:	mov	r6, #1
   3fdc8:	mov	r5, r4
   3fdcc:	ldr	r7, [pc, #380]	; 3ff50 <__assert_fail@plt+0x2d98c>
   3fdd0:	b	3fe8c <__assert_fail@plt+0x2d8c8>
   3fdd4:	add	r0, sp, #4
   3fdd8:	bl	1203c <mbsinit@plt>
   3fddc:	cmp	r0, #0
   3fde0:	beq	3fed8 <__assert_fail@plt+0x2d914>
   3fde4:	strb	r6, [sp]
   3fde8:	ldr	r8, [sp, #16]
   3fdec:	bl	12168 <__ctype_get_mb_cur_max@plt>
   3fdf0:	mov	r1, r0
   3fdf4:	mov	r0, r8
   3fdf8:	bl	2c690 <__assert_fail@plt+0x1a0cc>
   3fdfc:	add	r3, sp, #4
   3fe00:	mov	r2, r0
   3fe04:	mov	r1, r8
   3fe08:	add	r0, sp, #28
   3fe0c:	bl	307cc <__assert_fail@plt+0x1e208>
   3fe10:	str	r0, [sp, #20]
   3fe14:	cmn	r0, #1
   3fe18:	streq	r6, [sp, #20]
   3fe1c:	strbeq	r5, [sp, #24]
   3fe20:	beq	3fe68 <__assert_fail@plt+0x2d8a4>
   3fe24:	cmn	r0, #2
   3fe28:	beq	3feec <__assert_fail@plt+0x2d928>
   3fe2c:	cmp	r0, #0
   3fe30:	bne	3fe54 <__assert_fail@plt+0x2d890>
   3fe34:	str	r6, [sp, #20]
   3fe38:	ldr	r3, [sp, #16]
   3fe3c:	ldrb	r3, [r3]
   3fe40:	cmp	r3, #0
   3fe44:	bne	3ff00 <__assert_fail@plt+0x2d93c>
   3fe48:	ldr	r3, [sp, #28]
   3fe4c:	cmp	r3, #0
   3fe50:	bne	3ff14 <__assert_fail@plt+0x2d950>
   3fe54:	strb	r6, [sp, #24]
   3fe58:	add	r0, sp, #4
   3fe5c:	bl	1203c <mbsinit@plt>
   3fe60:	cmp	r0, #0
   3fe64:	strbne	r5, [sp]
   3fe68:	ldrb	r3, [sp, #24]
   3fe6c:	cmp	r3, #0
   3fe70:	bne	3ff28 <__assert_fail@plt+0x2d964>
   3fe74:	add	r4, r4, #1
   3fe78:	ldr	r2, [sp, #20]
   3fe7c:	ldr	r3, [sp, #16]
   3fe80:	add	r3, r3, r2
   3fe84:	str	r3, [sp, #16]
   3fe88:	strb	r5, [sp, #12]
   3fe8c:	ldrb	r3, [sp, #12]
   3fe90:	cmp	r3, #0
   3fe94:	bne	3fe68 <__assert_fail@plt+0x2d8a4>
   3fe98:	ldrb	r3, [sp]
   3fe9c:	cmp	r3, #0
   3fea0:	bne	3fde8 <__assert_fail@plt+0x2d824>
   3fea4:	ldr	r1, [sp, #16]
   3fea8:	ldrb	r3, [r1]
   3feac:	lsr	r2, r3, #5
   3feb0:	and	r3, r3, #31
   3feb4:	ldr	r2, [r7, r2, lsl #2]
   3feb8:	lsr	r3, r2, r3
   3febc:	tst	r3, #1
   3fec0:	beq	3fdd4 <__assert_fail@plt+0x2d810>
   3fec4:	str	r6, [sp, #20]
   3fec8:	ldrb	r3, [r1]
   3fecc:	str	r3, [sp, #28]
   3fed0:	strb	r6, [sp, #24]
   3fed4:	b	3fe68 <__assert_fail@plt+0x2d8a4>
   3fed8:	ldr	r3, [pc, #116]	; 3ff54 <__assert_fail@plt+0x2d990>
   3fedc:	mov	r2, #143	; 0x8f
   3fee0:	ldr	r1, [pc, #112]	; 3ff58 <__assert_fail@plt+0x2d994>
   3fee4:	ldr	r0, [pc, #112]	; 3ff5c <__assert_fail@plt+0x2d998>
   3fee8:	bl	125c4 <__assert_fail@plt>
   3feec:	ldr	r0, [sp, #16]
   3fef0:	bl	122d0 <strlen@plt>
   3fef4:	str	r0, [sp, #20]
   3fef8:	strb	r5, [sp, #24]
   3fefc:	b	3fe68 <__assert_fail@plt+0x2d8a4>
   3ff00:	ldr	r3, [pc, #76]	; 3ff54 <__assert_fail@plt+0x2d990>
   3ff04:	mov	r2, #171	; 0xab
   3ff08:	ldr	r1, [pc, #72]	; 3ff58 <__assert_fail@plt+0x2d994>
   3ff0c:	ldr	r0, [pc, #76]	; 3ff60 <__assert_fail@plt+0x2d99c>
   3ff10:	bl	125c4 <__assert_fail@plt>
   3ff14:	ldr	r3, [pc, #56]	; 3ff54 <__assert_fail@plt+0x2d990>
   3ff18:	mov	r2, #172	; 0xac
   3ff1c:	ldr	r1, [pc, #52]	; 3ff58 <__assert_fail@plt+0x2d994>
   3ff20:	ldr	r0, [pc, #60]	; 3ff64 <__assert_fail@plt+0x2d9a0>
   3ff24:	bl	125c4 <__assert_fail@plt>
   3ff28:	ldr	r3, [sp, #28]
   3ff2c:	cmp	r3, #0
   3ff30:	bne	3fe74 <__assert_fail@plt+0x2d8b0>
   3ff34:	mov	r0, r4
   3ff38:	add	sp, sp, #56	; 0x38
   3ff3c:	pop	{r4, r5, r6, r7, r8, pc}
   3ff40:	mov	r0, r4
   3ff44:	bl	122d0 <strlen@plt>
   3ff48:	mov	r4, r0
   3ff4c:	b	3ff34 <__assert_fail@plt+0x2d970>
   3ff50:	andeq	r8, r4, r8, ror #11
   3ff54:	andeq	r8, r4, r8, lsl #12
   3ff58:	andeq	r6, r4, ip, lsl #26
   3ff5c:	andeq	r6, r4, r8, lsl sp
   3ff60:	andeq	r6, r4, r0, lsr sp
   3ff64:	andeq	r6, r4, r8, asr #26
   3ff68:	push	{r4, r5, r6, lr}
   3ff6c:	mov	r5, r0
   3ff70:	subs	r4, r2, #0
   3ff74:	beq	3ffa4 <__assert_fail@plt+0x2d9e0>
   3ff78:	mov	r6, r1
   3ff7c:	bl	12258 <__ctype_tolower_loc@plt>
   3ff80:	add	r3, r6, r4
   3ff84:	add	r2, r5, r4
   3ff88:	mov	r1, r6
   3ff8c:	ldrb	lr, [r3, #-1]!
   3ff90:	ldr	ip, [r0]
   3ff94:	ldr	ip, [ip, lr, lsl #2]
   3ff98:	strb	ip, [r2, #-1]!
   3ff9c:	cmp	r3, r1
   3ffa0:	bne	3ff8c <__assert_fail@plt+0x2d9c8>
   3ffa4:	mov	r0, r5
   3ffa8:	pop	{r4, r5, r6, pc}
   3ffac:	push	{r4, r5, r6, lr}
   3ffb0:	mov	r5, r0
   3ffb4:	subs	r4, r2, #0
   3ffb8:	beq	3ffe8 <__assert_fail@plt+0x2da24>
   3ffbc:	mov	r6, r1
   3ffc0:	bl	12270 <__ctype_toupper_loc@plt>
   3ffc4:	add	r3, r6, r4
   3ffc8:	add	r2, r5, r4
   3ffcc:	mov	r1, r6
   3ffd0:	ldrb	lr, [r3, #-1]!
   3ffd4:	ldr	ip, [r0]
   3ffd8:	ldr	ip, [ip, lr, lsl #2]
   3ffdc:	strb	ip, [r2, #-1]!
   3ffe0:	cmp	r3, r1
   3ffe4:	bne	3ffd0 <__assert_fail@plt+0x2da0c>
   3ffe8:	mov	r0, r5
   3ffec:	pop	{r4, r5, r6, pc}
   3fff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fff4:	sub	sp, sp, #1104	; 0x450
   3fff8:	sub	sp, sp, #12
   3fffc:	mov	sl, r0
   40000:	str	r1, [sp, #32]
   40004:	mov	r9, r2
   40008:	mov	r4, r3
   4000c:	str	r3, [sp, #36]	; 0x24
   40010:	ldrb	r3, [sp, #1152]	; 0x480
   40014:	str	r3, [sp, #56]	; 0x38
   40018:	ldr	r5, [sp, #1160]	; 0x488
   4001c:	bl	12318 <__errno_location@plt>
   40020:	str	r0, [sp, #44]	; 0x2c
   40024:	ldr	r3, [r0]
   40028:	str	r3, [sp, #64]	; 0x40
   4002c:	ldr	r2, [r4, #8]
   40030:	mov	r0, r2
   40034:	str	r2, [sp, #48]	; 0x30
   40038:	ldr	r3, [r4, #40]	; 0x28
   4003c:	mov	r1, r3
   40040:	ldr	r3, [pc, #4004]	; 40fec <__assert_fail@plt+0x2ea28>
   40044:	mov	r2, r1
   40048:	cmp	r1, #0
   4004c:	moveq	r2, r3
   40050:	str	r2, [sp, #60]	; 0x3c
   40054:	cmp	r0, #12
   40058:	ble	4007c <__assert_fail@plt+0x2dab8>
   4005c:	sub	r3, r0, #12
   40060:	str	r3, [sp, #48]	; 0x30
   40064:	ldrb	r3, [r9]
   40068:	cmp	r3, #0
   4006c:	beq	417b0 <__assert_fail@plt+0x2f1ec>
   40070:	mov	fp, #0
   40074:	ldr	r6, [pc, #3956]	; 40ff0 <__assert_fail@plt+0x2ea2c>
   40078:	b	400e0 <__assert_fail@plt+0x2db1c>
   4007c:	ldr	r2, [sp, #48]	; 0x30
   40080:	mov	r3, r2
   40084:	cmp	r2, #0
   40088:	moveq	r3, #12
   4008c:	str	r3, [sp, #48]	; 0x30
   40090:	b	40064 <__assert_fail@plt+0x2daa0>
   40094:	cmp	sl, #0
   40098:	beq	400c4 <__assert_fail@plt+0x2db00>
   4009c:	cmp	r5, #1
   400a0:	bls	400bc <__assert_fail@plt+0x2daf8>
   400a4:	sub	r5, r5, #1
   400a8:	mov	r2, r5
   400ac:	mov	r1, #32
   400b0:	mov	r0, sl
   400b4:	bl	12348 <memset@plt>
   400b8:	add	sl, sl, r5
   400bc:	ldrb	r3, [r9]
   400c0:	strb	r3, [sl], #1
   400c4:	add	fp, fp, r4
   400c8:	mov	r7, r9
   400cc:	add	r9, r7, #1
   400d0:	ldrb	r3, [r7, #1]
   400d4:	mvn	r5, #0
   400d8:	cmp	r3, #0
   400dc:	beq	417b4 <__assert_fail@plt+0x2f1f0>
   400e0:	cmp	r3, #37	; 0x25
   400e4:	beq	4023c <__assert_fail@plt+0x2dc78>
   400e8:	bic	r5, r5, r5, asr #31
   400ec:	cmp	r5, #1
   400f0:	movcs	r4, r5
   400f4:	movcc	r4, #1
   400f8:	ldr	r3, [sp, #32]
   400fc:	sub	r3, r3, fp
   40100:	cmp	r4, r3
   40104:	bcc	40094 <__assert_fail@plt+0x2dad0>
   40108:	mov	r3, #34	; 0x22
   4010c:	ldr	r2, [sp, #44]	; 0x2c
   40110:	str	r3, [r2]
   40114:	mov	fp, #0
   40118:	mov	r0, fp
   4011c:	add	sp, sp, #1104	; 0x450
   40120:	add	sp, sp, #12
   40124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40128:	str	r3, [sp, #28]
   4012c:	b	40134 <__assert_fail@plt+0x2db70>
   40130:	mov	r8, r1
   40134:	ldrb	r3, [r7, #1]!
   40138:	sub	r2, r3, #35	; 0x23
   4013c:	cmp	r2, #60	; 0x3c
   40140:	ldrls	pc, [pc, r2, lsl #2]
   40144:	b	40264 <__assert_fail@plt+0x2dca0>
   40148:	andeq	r0, r4, r0, lsr r1
   4014c:	andeq	r0, r4, r4, ror #4
   40150:	andeq	r0, r4, r4, ror #4
   40154:	andeq	r0, r4, r4, ror #4
   40158:	andeq	r0, r4, r4, ror #4
   4015c:	andeq	r0, r4, r4, ror #4
   40160:	andeq	r0, r4, r4, ror #4
   40164:	andeq	r0, r4, r4, ror #4
   40168:	andeq	r0, r4, r8, lsr #2
   4016c:	andeq	r0, r4, r4, ror #4
   40170:	andeq	r0, r4, r8, lsr #2
   40174:	andeq	r0, r4, r4, ror #4
   40178:	andeq	r0, r4, r4, ror #4
   4017c:	andeq	r0, r4, r8, lsr #2
   40180:	andeq	r0, r4, r4, ror #4
   40184:	andeq	r0, r4, r4, ror #4
   40188:	andeq	r0, r4, r4, ror #4
   4018c:	andeq	r0, r4, r4, ror #4
   40190:	andeq	r0, r4, r4, ror #4
   40194:	andeq	r0, r4, r4, ror #4
   40198:	andeq	r0, r4, r4, ror #4
   4019c:	andeq	r0, r4, r4, ror #4
   401a0:	andeq	r0, r4, r4, ror #4
   401a4:	andeq	r0, r4, r4, ror #4
   401a8:	andeq	r0, r4, r4, ror #4
   401ac:	andeq	r0, r4, r4, ror #4
   401b0:	andeq	r0, r4, r4, ror #4
   401b4:	andeq	r0, r4, r4, ror #4
   401b8:	andeq	r0, r4, r4, ror #4
   401bc:	andeq	r0, r4, r4, ror #4
   401c0:	andeq	r0, r4, r4, ror #4
   401c4:	andeq	r0, r4, r4, ror #4
   401c8:	andeq	r0, r4, r4, ror #4
   401cc:	andeq	r0, r4, r4, ror #4
   401d0:	andeq	r0, r4, r4, ror #4
   401d4:	andeq	r0, r4, r4, ror #4
   401d8:	andeq	r0, r4, r4, ror #4
   401dc:	andeq	r0, r4, r4, ror #4
   401e0:	andeq	r0, r4, r4, ror #4
   401e4:	andeq	r0, r4, r4, ror #4
   401e8:	andeq	r0, r4, r4, ror #4
   401ec:	andeq	r0, r4, r4, ror #4
   401f0:	andeq	r0, r4, r4, ror #4
   401f4:	andeq	r0, r4, r4, ror #4
   401f8:	andeq	r0, r4, r4, ror #4
   401fc:	andeq	r0, r4, r4, ror #4
   40200:	andeq	r0, r4, r4, ror #4
   40204:	andeq	r0, r4, r4, ror #4
   40208:	andeq	r0, r4, r4, ror #4
   4020c:	andeq	r0, r4, r4, ror #4
   40210:	andeq	r0, r4, r4, ror #4
   40214:	andeq	r0, r4, r4, ror #4
   40218:	andeq	r0, r4, r4, ror #4
   4021c:	andeq	r0, r4, r4, ror #4
   40220:	andeq	r0, r4, r4, ror #4
   40224:	andeq	r0, r4, r4, ror #4
   40228:	andeq	r0, r4, r4, ror #4
   4022c:	andeq	r0, r4, r4, ror #4
   40230:	andeq	r0, r4, r4, ror #4
   40234:	andeq	r0, r4, r8, asr r2
   40238:	andeq	r0, r4, r8, lsr #2
   4023c:	ldr	r3, [sp, #56]	; 0x38
   40240:	str	r3, [sp, #40]	; 0x28
   40244:	mov	r7, r9
   40248:	mov	r8, #0
   4024c:	str	r8, [sp, #28]
   40250:	mov	r1, #1
   40254:	b	40134 <__assert_fail@plt+0x2db70>
   40258:	mov	r3, #1
   4025c:	str	r3, [sp, #40]	; 0x28
   40260:	b	40134 <__assert_fail@plt+0x2db70>
   40264:	sub	r3, r3, #48	; 0x30
   40268:	cmp	r3, #9
   4026c:	bhi	40344 <__assert_fail@plt+0x2dd80>
   40270:	mov	r5, #0
   40274:	ldr	r4, [pc, #3448]	; 40ff4 <__assert_fail@plt+0x2ea30>
   40278:	b	402d4 <__assert_fail@plt+0x2dd10>
   4027c:	cmn	r5, #1
   40280:	moveq	r0, #0
   40284:	beq	402e8 <__assert_fail@plt+0x2dd24>
   40288:	mov	r1, r5
   4028c:	mov	r0, #-2147483648	; 0x80000000
   40290:	bl	41c74 <__assert_fail@plt+0x2f6b0>
   40294:	cmp	r0, #9
   40298:	movgt	r0, #0
   4029c:	movle	r0, #1
   402a0:	b	402e8 <__assert_fail@plt+0x2dd24>
   402a4:	rsb	r3, r2, #-2147483600	; 0x80000030
   402a8:	cmp	r5, r3
   402ac:	movge	r3, #0
   402b0:	movlt	r3, #1
   402b4:	cmp	r3, #0
   402b8:	addeq	r5, r2, r5
   402bc:	subeq	r5, r5, #48	; 0x30
   402c0:	mvnne	r5, #-2147483648	; 0x80000000
   402c4:	ldrb	r3, [r7, #1]!
   402c8:	sub	r3, r3, #48	; 0x30
   402cc:	cmp	r3, #9
   402d0:	bhi	40344 <__assert_fail@plt+0x2dd80>
   402d4:	cmp	r5, #0
   402d8:	blt	4027c <__assert_fail@plt+0x2dcb8>
   402dc:	cmp	r5, r4
   402e0:	movle	r0, #0
   402e4:	movgt	r0, #1
   402e8:	cmp	r0, #0
   402ec:	mvnne	r5, #-2147483648	; 0x80000000
   402f0:	bne	402c4 <__assert_fail@plt+0x2dd00>
   402f4:	add	r5, r5, r5, lsl #2
   402f8:	lsl	r5, r5, #1
   402fc:	ldrb	r2, [r7]
   40300:	subs	r3, r2, #48	; 0x30
   40304:	bmi	402a4 <__assert_fail@plt+0x2dce0>
   40308:	cmp	r5, #0
   4030c:	blt	40330 <__assert_fail@plt+0x2dd6c>
   40310:	rsb	r3, r3, #2130706432	; 0x7f000000
   40314:	add	r3, r3, #16711680	; 0xff0000
   40318:	add	r3, r3, #65280	; 0xff00
   4031c:	add	r3, r3, #255	; 0xff
   40320:	cmp	r5, r3
   40324:	movle	r3, #0
   40328:	movgt	r3, #1
   4032c:	b	402b4 <__assert_fail@plt+0x2dcf0>
   40330:	rsb	r1, r5, #-2147483648	; 0x80000000
   40334:	cmp	r3, r1
   40338:	movge	r3, #0
   4033c:	movlt	r3, #1
   40340:	b	402b4 <__assert_fail@plt+0x2dcf0>
   40344:	ldrb	r2, [r7]
   40348:	cmp	r2, #69	; 0x45
   4034c:	beq	4055c <__assert_fail@plt+0x2df98>
   40350:	cmp	r2, #79	; 0x4f
   40354:	movne	r2, #0
   40358:	beq	4055c <__assert_fail@plt+0x2df98>
   4035c:	ldrb	r1, [r7]
   40360:	mov	r4, r1
   40364:	cmp	r1, #122	; 0x7a
   40368:	ldrls	pc, [pc, r1, lsl #2]
   4036c:	b	406a4 <__assert_fail@plt+0x2e0e0>
   40370:	andeq	r0, r4, r0, lsr #13
   40374:	andeq	r0, r4, r4, lsr #13
   40378:	andeq	r0, r4, r4, lsr #13
   4037c:	andeq	r0, r4, r4, lsr #13
   40380:	andeq	r0, r4, r4, lsr #13
   40384:	andeq	r0, r4, r4, lsr #13
   40388:	andeq	r0, r4, r4, lsr #13
   4038c:	andeq	r0, r4, r4, lsr #13
   40390:	andeq	r0, r4, r4, lsr #13
   40394:	andeq	r0, r4, r4, lsr #13
   40398:	andeq	r0, r4, r4, lsr #13
   4039c:	andeq	r0, r4, r4, lsr #13
   403a0:	andeq	r0, r4, r4, lsr #13
   403a4:	andeq	r0, r4, r4, lsr #13
   403a8:	andeq	r0, r4, r4, lsr #13
   403ac:	andeq	r0, r4, r4, lsr #13
   403b0:	andeq	r0, r4, r4, lsr #13
   403b4:	andeq	r0, r4, r4, lsr #13
   403b8:	andeq	r0, r4, r4, lsr #13
   403bc:	andeq	r0, r4, r4, lsr #13
   403c0:	andeq	r0, r4, r4, lsr #13
   403c4:	andeq	r0, r4, r4, lsr #13
   403c8:	andeq	r0, r4, r4, lsr #13
   403cc:	andeq	r0, r4, r4, lsr #13
   403d0:	andeq	r0, r4, r4, lsr #13
   403d4:	andeq	r0, r4, r4, lsr #13
   403d8:	andeq	r0, r4, r4, lsr #13
   403dc:	andeq	r0, r4, r4, lsr #13
   403e0:	andeq	r0, r4, r4, lsr #13
   403e4:	andeq	r0, r4, r4, lsr #13
   403e8:	andeq	r0, r4, r4, lsr #13
   403ec:	andeq	r0, r4, r4, lsr #13
   403f0:	andeq	r0, r4, r4, lsr #13
   403f4:	andeq	r0, r4, r4, lsr #13
   403f8:	andeq	r0, r4, r4, lsr #13
   403fc:	andeq	r0, r4, r4, lsr #13
   40400:	andeq	r0, r4, r4, lsr #13
   40404:	muleq	r4, r4, r6
   40408:	andeq	r0, r4, r4, lsr #13
   4040c:	andeq	r0, r4, r4, lsr #13
   40410:	andeq	r0, r4, r4, lsr #13
   40414:	andeq	r0, r4, r4, lsr #13
   40418:	andeq	r0, r4, r4, lsr #13
   4041c:	andeq	r0, r4, r4, lsr #13
   40420:	andeq	r0, r4, r4, lsr #13
   40424:	andeq	r0, r4, r4, lsr #13
   40428:	andeq	r0, r4, r4, lsr #13
   4042c:	andeq	r0, r4, r4, lsr #13
   40430:	andeq	r0, r4, r4, lsr #13
   40434:	andeq	r0, r4, r4, lsr #13
   40438:	andeq	r0, r4, r4, lsr #13
   4043c:	andeq	r0, r4, r4, lsr #13
   40440:	andeq	r0, r4, r4, lsr #13
   40444:	andeq	r0, r4, r4, lsr #13
   40448:	andeq	r0, r4, r4, lsr #13
   4044c:	andeq	r0, r4, r4, lsr #13
   40450:	andeq	r0, r4, r4, lsr #13
   40454:	andeq	r0, r4, r4, lsr #13
   40458:	andeq	r0, r4, r0, ror r6
   4045c:	andeq	r0, r4, r4, lsr #13
   40460:	andeq	r0, r4, r4, lsr #13
   40464:	andeq	r0, r4, r4, lsr #13
   40468:	andeq	r0, r4, r4, lsr #13
   4046c:	andeq	r0, r4, r4, lsr #13
   40470:	andeq	r0, r4, r4, lsr #13
   40474:	andeq	r0, r4, r8, lsl #16
   40478:	andeq	r0, r4, r8, asr #16
   4047c:	andeq	r0, r4, ip, ror #19
   40480:	andeq	r0, r4, ip, lsl #21
   40484:	andeq	r0, r4, r4, lsr #13
   40488:	andeq	r0, r4, r4, asr #24
   4048c:	andeq	r1, r4, r8, ror #3
   40490:	andeq	r0, r4, r4, ror ip
   40494:	andeq	r0, r4, ip, lsl #25
   40498:	andeq	r0, r4, r4, lsr #13
   4049c:	andeq	r0, r4, r4, lsr #13
   404a0:	andeq	r0, r4, r4, lsr #13
   404a4:	strdeq	r0, [r4], -r8
   404a8:	andeq	r0, r4, r4, asr #26
   404ac:	andeq	r0, r4, r4, lsr #13
   404b0:	andeq	r0, r4, ip, asr pc
   404b4:	andeq	r0, r4, r4, lsr #13
   404b8:	andeq	r0, r4, ip, ror r8
   404bc:	ldrdeq	r0, [r4], -r4
   404c0:	andeq	r0, r4, r4, ror #10
   404c4:			; <UNDEFINED> instruction: 0x000411b0
   404c8:	andeq	r1, r4, r8, ror #3
   404cc:	andeq	r1, r4, r8, asr r4
   404d0:	ldrdeq	r1, [r4], -r8
   404d4:	andeq	r1, r4, r8, asr #9
   404d8:	andeq	r1, r4, r8, asr r5
   404dc:	andeq	r0, r4, r4, lsr #13
   404e0:	andeq	r0, r4, r4, lsr #13
   404e4:	andeq	r0, r4, r4, lsr #13
   404e8:	andeq	r0, r4, r4, lsr #13
   404ec:	andeq	r0, r4, r4, lsr #13
   404f0:	andeq	r0, r4, r4, lsr #13
   404f4:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   404f8:	andeq	r0, r4, r8, lsr #16
   404fc:	andeq	r0, r4, r8, ror #16
   40500:	andeq	r0, r4, r4, lsr #21
   40504:			; <UNDEFINED> instruction: 0x00040abc
   40508:	andeq	r0, r4, r4, lsr #13
   4050c:	andeq	r1, r4, r8, ror #3
   40510:	andeq	r0, r4, r8, lsr #16
   40514:	andeq	r0, r4, r4, lsr #13
   40518:	andeq	r0, r4, r4, asr #25
   4051c:	andeq	r0, r4, r0, lsr #25
   40520:			; <UNDEFINED> instruction: 0x00040cb4
   40524:	andeq	r0, r4, r0, lsl sp
   40528:	andeq	r0, r4, ip, asr #29
   4052c:	andeq	r0, r4, r4, lsr #13
   40530:	andeq	r0, r4, ip, ror pc
   40534:	andeq	r0, r4, r4, lsl #31
   40538:			; <UNDEFINED> instruction: 0x000408b4
   4053c:	andeq	r1, r4, ip, lsr #32
   40540:	andeq	r1, r4, ip, ror #1
   40544:	andeq	r1, r4, ip, ror r1
   40548:	andeq	r0, r4, r4, lsr #13
   4054c:			; <UNDEFINED> instruction: 0x000414b0
   40550:	andeq	r0, r4, r8, ror sl
   40554:	andeq	r1, r4, r4, lsl #10
   40558:	andeq	r1, r4, ip, ror #12
   4055c:	add	r7, r7, #1
   40560:	b	4035c <__assert_fail@plt+0x2dd98>
   40564:	mvn	r8, #0
   40568:	ldr	r3, [pc, #2696]	; 40ff8 <__assert_fail@plt+0x2ea34>
   4056c:	str	r3, [sp, #52]	; 0x34
   40570:	ldr	r3, [sp, #1172]	; 0x494
   40574:	str	r3, [sp, #20]
   40578:	ldr	r3, [sp, #1168]	; 0x490
   4057c:	str	r3, [sp, #16]
   40580:	ldr	r3, [sp, #1164]	; 0x48c
   40584:	str	r3, [sp, #12]
   40588:	str	r8, [sp, #8]
   4058c:	ldr	r4, [sp, #28]
   40590:	str	r4, [sp, #4]
   40594:	ldr	r3, [sp, #40]	; 0x28
   40598:	str	r3, [sp]
   4059c:	ldr	r3, [sp, #36]	; 0x24
   405a0:	ldr	r2, [sp, #52]	; 0x34
   405a4:	mvn	r1, #0
   405a8:	mov	r0, #0
   405ac:	bl	3fff0 <__assert_fail@plt+0x2da2c>
   405b0:	mov	r9, r0
   405b4:	subs	r3, r4, #45	; 0x2d
   405b8:	movne	r3, #1
   405bc:	cmp	r5, #0
   405c0:	movlt	r3, #0
   405c4:	cmp	r3, #0
   405c8:	moveq	r5, #0
   405cc:	mov	r4, r5
   405d0:	cmp	r5, r0
   405d4:	movcc	r5, r0
   405d8:	ldr	r3, [sp, #32]
   405dc:	sub	r3, r3, fp
   405e0:	str	r3, [sp, #68]	; 0x44
   405e4:	cmp	r5, r3
   405e8:	bcs	408a4 <__assert_fail@plt+0x2e2e0>
   405ec:	cmp	sl, #0
   405f0:	beq	40668 <__assert_fail@plt+0x2e0a4>
   405f4:	cmp	r4, r0
   405f8:	bls	40624 <__assert_fail@plt+0x2e060>
   405fc:	sub	r4, r4, r0
   40600:	ldr	r3, [sp, #28]
   40604:	cmp	r3, #43	; 0x2b
   40608:	cmpne	r3, #48	; 0x30
   4060c:	mov	r2, r4
   40610:	moveq	r1, #48	; 0x30
   40614:	movne	r1, #32
   40618:	mov	r0, sl
   4061c:	bl	12348 <memset@plt>
   40620:	add	sl, sl, r4
   40624:	ldr	r3, [sp, #1172]	; 0x494
   40628:	str	r3, [sp, #20]
   4062c:	ldr	r3, [sp, #1168]	; 0x490
   40630:	str	r3, [sp, #16]
   40634:	ldr	r3, [sp, #1164]	; 0x48c
   40638:	str	r3, [sp, #12]
   4063c:	str	r8, [sp, #8]
   40640:	ldr	r3, [sp, #28]
   40644:	str	r3, [sp, #4]
   40648:	ldr	r3, [sp, #40]	; 0x28
   4064c:	str	r3, [sp]
   40650:	ldr	r3, [sp, #36]	; 0x24
   40654:	ldr	r2, [sp, #52]	; 0x34
   40658:	ldr	r1, [sp, #68]	; 0x44
   4065c:	mov	r0, sl
   40660:	bl	3fff0 <__assert_fail@plt+0x2da2c>
   40664:	add	sl, sl, r9
   40668:	add	fp, fp, r5
   4066c:	b	400cc <__assert_fail@plt+0x2db08>
   40670:	add	r0, r7, #1
   40674:	ldrb	r3, [r7, #1]
   40678:	cmp	r3, #58	; 0x3a
   4067c:	movne	lr, #1
   40680:	beq	4164c <__assert_fail@plt+0x2f088>
   40684:	cmp	r3, #122	; 0x7a
   40688:	moveq	r7, r0
   4068c:	bne	406a4 <__assert_fail@plt+0x2e0e0>
   40690:	b	41670 <__assert_fail@plt+0x2f0ac>
   40694:	sub	r3, r7, #1
   40698:	cmp	r9, r3
   4069c:	beq	40744 <__assert_fail@plt+0x2e180>
   406a0:	sub	r7, r7, #1
   406a4:	sub	r8, r7, r9
   406a8:	add	r8, r8, #1
   406ac:	ldr	r2, [sp, #28]
   406b0:	mvn	r3, r5
   406b4:	lsr	r3, r3, #31
   406b8:	cmp	r2, #45	; 0x2d
   406bc:	moveq	r3, #0
   406c0:	cmp	r3, #0
   406c4:	moveq	r5, #0
   406c8:	mov	r4, r5
   406cc:	cmp	r5, r8
   406d0:	movcc	r5, r8
   406d4:	ldr	r3, [sp, #32]
   406d8:	sub	r3, r3, fp
   406dc:	cmp	r5, r3
   406e0:	bcs	4178c <__assert_fail@plt+0x2f1c8>
   406e4:	cmp	sl, #0
   406e8:	beq	4073c <__assert_fail@plt+0x2e178>
   406ec:	cmp	r4, r8
   406f0:	bls	4071c <__assert_fail@plt+0x2e158>
   406f4:	sub	r4, r4, r8
   406f8:	ldr	r3, [sp, #28]
   406fc:	cmp	r3, #43	; 0x2b
   40700:	cmpne	r3, #48	; 0x30
   40704:	mov	r2, r4
   40708:	moveq	r1, #48	; 0x30
   4070c:	movne	r1, #32
   40710:	mov	r0, sl
   40714:	bl	12348 <memset@plt>
   40718:	add	sl, sl, r4
   4071c:	ldr	r3, [sp, #40]	; 0x28
   40720:	cmp	r3, #0
   40724:	beq	4179c <__assert_fail@plt+0x2f1d8>
   40728:	mov	r2, r8
   4072c:	mov	r1, r9
   40730:	mov	r0, sl
   40734:	bl	3ffac <__assert_fail@plt+0x2d9e8>
   40738:	add	sl, sl, r8
   4073c:	add	fp, fp, r5
   40740:	b	400cc <__assert_fail@plt+0x2db08>
   40744:	ldr	r2, [sp, #28]
   40748:	mvn	r3, r5
   4074c:	lsr	r3, r3, #31
   40750:	cmp	r2, #45	; 0x2d
   40754:	moveq	r3, #0
   40758:	cmp	r3, #0
   4075c:	moveq	r5, #0
   40760:	mov	r4, r5
   40764:	cmp	r5, #1
   40768:	movcc	r5, #1
   4076c:	ldr	r3, [sp, #32]
   40770:	sub	r3, r3, fp
   40774:	cmp	r5, r3
   40778:	movcs	r3, #34	; 0x22
   4077c:	ldrcs	r2, [sp, #44]	; 0x2c
   40780:	strcs	r3, [r2]
   40784:	bcs	40114 <__assert_fail@plt+0x2db50>
   40788:	cmp	sl, #0
   4078c:	beq	407c8 <__assert_fail@plt+0x2e204>
   40790:	cmp	r4, #1
   40794:	bls	407c0 <__assert_fail@plt+0x2e1fc>
   40798:	sub	r4, r4, #1
   4079c:	ldr	r3, [sp, #28]
   407a0:	cmp	r3, #43	; 0x2b
   407a4:	cmpne	r3, #48	; 0x30
   407a8:	mov	r2, r4
   407ac:	moveq	r1, #48	; 0x30
   407b0:	movne	r1, #32
   407b4:	mov	r0, sl
   407b8:	bl	12348 <memset@plt>
   407bc:	add	sl, sl, r4
   407c0:	ldrb	r3, [r7]
   407c4:	strb	r3, [sl], #1
   407c8:	add	fp, fp, r5
   407cc:	b	400cc <__assert_fail@plt+0x2db08>
   407d0:	cmp	r2, #0
   407d4:	bne	406a4 <__assert_fail@plt+0x2e0e0>
   407d8:	ldr	r3, [sp, #40]	; 0x28
   407dc:	cmp	r8, #0
   407e0:	movne	r3, r8
   407e4:	str	r3, [sp, #40]	; 0x28
   407e8:	mov	r4, #97	; 0x61
   407ec:	mov	r3, #32
   407f0:	strb	r3, [sp, #72]	; 0x48
   407f4:	mov	r3, #37	; 0x25
   407f8:	strb	r3, [sp, #73]	; 0x49
   407fc:	mov	r8, #0
   40800:	add	r3, sp, #74	; 0x4a
   40804:	b	408e8 <__assert_fail@plt+0x2e324>
   40808:	cmp	r2, #0
   4080c:	bne	406a4 <__assert_fail@plt+0x2e0e0>
   40810:	ldr	r3, [sp, #40]	; 0x28
   40814:	cmp	r8, #0
   40818:	movne	r3, r8
   4081c:	str	r3, [sp, #40]	; 0x28
   40820:	mov	r4, #65	; 0x41
   40824:	b	407ec <__assert_fail@plt+0x2e228>
   40828:	ldr	r3, [sp, #40]	; 0x28
   4082c:	cmp	r8, #0
   40830:	movne	r3, r8
   40834:	str	r3, [sp, #40]	; 0x28
   40838:	cmp	r2, #69	; 0x45
   4083c:	movne	r8, #0
   40840:	bne	408c0 <__assert_fail@plt+0x2e2fc>
   40844:	b	406a4 <__assert_fail@plt+0x2e0e0>
   40848:	cmp	r2, #69	; 0x45
   4084c:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40850:	cmp	r8, #0
   40854:	moveq	r4, #66	; 0x42
   40858:	strne	r8, [sp, #40]	; 0x28
   4085c:	movne	r4, #66	; 0x42
   40860:	movne	r8, #0
   40864:	b	408c0 <__assert_fail@plt+0x2e2fc>
   40868:	cmp	r2, #79	; 0x4f
   4086c:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40870:	mov	r4, #99	; 0x63
   40874:	mov	r8, #0
   40878:	b	408c0 <__assert_fail@plt+0x2e2fc>
   4087c:	mvn	r8, #0
   40880:	ldr	r3, [pc, #1908]	; 40ffc <__assert_fail@plt+0x2ea38>
   40884:	str	r3, [sp, #52]	; 0x34
   40888:	b	40570 <__assert_fail@plt+0x2dfac>
   4088c:	mov	r8, #4
   40890:	ldr	r3, [pc, #1896]	; 41000 <__assert_fail@plt+0x2ea3c>
   40894:	str	r3, [sp, #52]	; 0x34
   40898:	mov	r3, #43	; 0x2b
   4089c:	str	r3, [sp, #28]
   408a0:	b	40570 <__assert_fail@plt+0x2dfac>
   408a4:	mov	r3, #34	; 0x22
   408a8:	ldr	r2, [sp, #44]	; 0x2c
   408ac:	str	r3, [r2]
   408b0:	b	40114 <__assert_fail@plt+0x2db50>
   408b4:	mov	r8, #0
   408b8:	b	408c0 <__assert_fail@plt+0x2e2fc>
   408bc:	mov	r8, #0
   408c0:	mov	r3, #32
   408c4:	strb	r3, [sp, #72]	; 0x48
   408c8:	mov	r3, #37	; 0x25
   408cc:	strb	r3, [sp, #73]	; 0x49
   408d0:	cmp	r2, #0
   408d4:	addeq	r3, sp, #72	; 0x48
   408d8:	addeq	r3, sp, #74	; 0x4a
   408dc:	beq	408e8 <__assert_fail@plt+0x2e324>
   408e0:	strb	r2, [sp, #74]	; 0x4a
   408e4:	add	r3, sp, #75	; 0x4b
   408e8:	strb	r4, [r3]
   408ec:	mov	r2, #0
   408f0:	strb	r2, [r3, #1]
   408f4:	ldr	r3, [sp, #36]	; 0x24
   408f8:	add	r2, sp, #72	; 0x48
   408fc:	mov	r1, #1024	; 0x400
   40900:	add	r0, sp, #88	; 0x58
   40904:	bl	12234 <strftime@plt>
   40908:	cmp	r0, #0
   4090c:	beq	400cc <__assert_fail@plt+0x2db08>
   40910:	sub	r9, r0, #1
   40914:	ldr	r2, [sp, #28]
   40918:	mvn	r3, r5
   4091c:	lsr	r3, r3, #31
   40920:	cmp	r2, #45	; 0x2d
   40924:	moveq	r3, #0
   40928:	cmp	r3, #0
   4092c:	moveq	r5, #0
   40930:	mov	r4, r5
   40934:	cmp	r5, r9
   40938:	movcc	r5, r9
   4093c:	ldr	r3, [sp, #32]
   40940:	sub	r3, r3, fp
   40944:	cmp	r5, r3
   40948:	bcs	409ac <__assert_fail@plt+0x2e3e8>
   4094c:	cmp	sl, #0
   40950:	beq	409d0 <__assert_fail@plt+0x2e40c>
   40954:	cmp	r4, r9
   40958:	bls	40984 <__assert_fail@plt+0x2e3c0>
   4095c:	sub	r4, r4, r9
   40960:	ldr	r3, [sp, #28]
   40964:	cmp	r3, #43	; 0x2b
   40968:	cmpne	r3, #48	; 0x30
   4096c:	mov	r2, r4
   40970:	moveq	r1, #48	; 0x30
   40974:	movne	r1, #32
   40978:	mov	r0, sl
   4097c:	bl	12348 <memset@plt>
   40980:	add	sl, sl, r4
   40984:	cmp	r8, #0
   40988:	bne	409bc <__assert_fail@plt+0x2e3f8>
   4098c:	ldr	r3, [sp, #40]	; 0x28
   40990:	cmp	r3, #0
   40994:	beq	409d8 <__assert_fail@plt+0x2e414>
   40998:	mov	r2, r9
   4099c:	add	r1, sp, #89	; 0x59
   409a0:	mov	r0, sl
   409a4:	bl	3ffac <__assert_fail@plt+0x2d9e8>
   409a8:	b	409cc <__assert_fail@plt+0x2e408>
   409ac:	mov	r3, #34	; 0x22
   409b0:	ldr	r2, [sp, #44]	; 0x2c
   409b4:	str	r3, [r2]
   409b8:	b	40114 <__assert_fail@plt+0x2db50>
   409bc:	mov	r2, r9
   409c0:	add	r1, sp, #89	; 0x59
   409c4:	mov	r0, sl
   409c8:	bl	3ff68 <__assert_fail@plt+0x2d9a4>
   409cc:	add	sl, sl, r9
   409d0:	add	fp, fp, r5
   409d4:	b	400cc <__assert_fail@plt+0x2db08>
   409d8:	mov	r2, r9
   409dc:	add	r1, sp, #89	; 0x59
   409e0:	mov	r0, sl
   409e4:	bl	12000 <memcpy@plt>
   409e8:	b	409cc <__assert_fail@plt+0x2e408>
   409ec:	cmp	r2, #69	; 0x45
   409f0:	beq	417d8 <__assert_fail@plt+0x2f214>
   409f4:	ldr	r3, [sp, #36]	; 0x24
   409f8:	ldr	r1, [r3, #20]
   409fc:	ldr	r3, [pc, #1556]	; 41018 <__assert_fail@plt+0x2ea54>
   40a00:	cmp	r1, r3
   40a04:	movge	r3, #0
   40a08:	movlt	r3, #1
   40a0c:	str	r3, [sp, #52]	; 0x34
   40a10:	add	r3, r1, #1888	; 0x760
   40a14:	add	r3, r3, #12
   40a18:	ldr	r0, [pc, #1508]	; 41004 <__assert_fail@plt+0x2ea40>
   40a1c:	cmp	r3, r0
   40a20:	movhi	r3, #0
   40a24:	movls	r3, #1
   40a28:	mvn	r0, #98	; 0x62
   40a2c:	mla	r3, r0, r3, r1
   40a30:	ldr	r1, [pc, #1508]	; 4101c <__assert_fail@plt+0x2ea58>
   40a34:	smull	r0, r1, r1, r3
   40a38:	asr	r3, r3, #31
   40a3c:	rsb	r3, r3, r1, asr #5
   40a40:	add	r3, r3, #19
   40a44:	mov	r8, #2
   40a48:	ldr	r0, [sp, #28]
   40a4c:	mov	r1, r0
   40a50:	ldr	ip, [sp, #1156]	; 0x484
   40a54:	cmp	r0, #0
   40a58:	moveq	r1, ip
   40a5c:	str	r1, [sp, #28]
   40a60:	cmp	r1, #43	; 0x2b
   40a64:	movne	r1, #0
   40a68:	beq	40bc4 <__assert_fail@plt+0x2e600>
   40a6c:	mov	r9, r1
   40a70:	mov	r0, #0
   40a74:	b	40af0 <__assert_fail@plt+0x2e52c>
   40a78:	cmp	r2, #79	; 0x4f
   40a7c:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40a80:	mov	r4, #120	; 0x78
   40a84:	mov	r8, #0
   40a88:	b	408c0 <__assert_fail@plt+0x2e2fc>
   40a8c:	cmp	r2, #0
   40a90:	bne	406a4 <__assert_fail@plt+0x2e0e0>
   40a94:	mvn	r8, #0
   40a98:	ldr	r3, [pc, #1384]	; 41008 <__assert_fail@plt+0x2ea44>
   40a9c:	str	r3, [sp, #52]	; 0x34
   40aa0:	b	40570 <__assert_fail@plt+0x2dfac>
   40aa4:	cmp	r2, #69	; 0x45
   40aa8:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40aac:	ldr	r3, [sp, #36]	; 0x24
   40ab0:	ldr	r3, [r3, #12]
   40ab4:	mov	r8, #2
   40ab8:	b	40ae0 <__assert_fail@plt+0x2e51c>
   40abc:	cmp	r2, #69	; 0x45
   40ac0:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40ac4:	ldr	r3, [sp, #36]	; 0x24
   40ac8:	ldr	r3, [r3, #12]
   40acc:	ldr	r1, [sp, #28]
   40ad0:	cmp	r1, #0
   40ad4:	mov	r8, #2
   40ad8:	moveq	r1, #95	; 0x5f
   40adc:	streq	r1, [sp, #28]
   40ae0:	lsr	r1, r3, #31
   40ae4:	str	r1, [sp, #52]	; 0x34
   40ae8:	mov	r0, #0
   40aec:	mov	r9, r0
   40af0:	ldr	ip, [sp, #52]	; 0x34
   40af4:	eor	r1, ip, #1
   40af8:	cmp	r2, #79	; 0x4f
   40afc:	movne	r1, #0
   40b00:	andeq	r1, r1, #1
   40b04:	cmp	r1, #0
   40b08:	bne	408bc <__assert_fail@plt+0x2e2f8>
   40b0c:	mov	r1, ip
   40b10:	cmp	ip, #0
   40b14:	rsbne	r3, r3, #0
   40b18:	add	r4, sp, #86	; 0x56
   40b1c:	mov	lr, #58	; 0x3a
   40b20:	mov	ip, r3
   40b24:	tst	r0, #1
   40b28:	subne	r1, r4, #1
   40b2c:	strbne	lr, [r4, #-1]
   40b30:	moveq	r1, r4
   40b34:	sub	r4, r1, #1
   40b38:	ldr	r3, [pc, #1228]	; 4100c <__assert_fail@plt+0x2ea48>
   40b3c:	umull	r3, r2, r3, ip
   40b40:	lsr	r2, r2, #3
   40b44:	add	r3, r2, r2, lsl #2
   40b48:	sub	r3, ip, r3, lsl #1
   40b4c:	add	r3, r3, #48	; 0x30
   40b50:	strb	r3, [r1, #-1]
   40b54:	mov	ip, r2
   40b58:	asrs	r0, r0, #1
   40b5c:	movne	r3, #1
   40b60:	moveq	r3, #0
   40b64:	cmp	r2, #0
   40b68:	moveq	r2, r3
   40b6c:	orrne	r2, r3, #1
   40b70:	cmp	r2, #0
   40b74:	bne	40b24 <__assert_fail@plt+0x2e560>
   40b78:	ldr	r2, [sp, #28]
   40b7c:	mov	r3, r2
   40b80:	cmp	r2, #0
   40b84:	moveq	r3, #48	; 0x30
   40b88:	str	r3, [sp, #28]
   40b8c:	cmp	r5, #0
   40b90:	movlt	r5, r8
   40b94:	ldr	r3, [sp, #52]	; 0x34
   40b98:	cmp	r3, #0
   40b9c:	bne	41804 <__assert_fail@plt+0x2f240>
   40ba0:	cmp	r9, #0
   40ba4:	bne	41900 <__assert_fail@plt+0x2f33c>
   40ba8:	add	r8, sp, #86	; 0x56
   40bac:	sub	r3, r8, r4
   40bb0:	str	r3, [sp, #68]	; 0x44
   40bb4:	ldr	r3, [sp, #28]
   40bb8:	subs	r9, r3, #45	; 0x2d
   40bbc:	movne	r9, #1
   40bc0:	b	4186c <__assert_fail@plt+0x2f2a8>
   40bc4:	ldr	r0, [pc, #1092]	; 41010 <__assert_fail@plt+0x2ea4c>
   40bc8:	cmp	r8, #2
   40bcc:	moveq	r0, #99	; 0x63
   40bd0:	cmp	r8, r5
   40bd4:	movge	r1, #0
   40bd8:	movlt	r1, #1
   40bdc:	cmp	r3, r0
   40be0:	orrhi	r1, r1, #1
   40be4:	b	40a6c <__assert_fail@plt+0x2e4a8>
   40be8:	cmp	sl, #0
   40bec:	beq	40c04 <__assert_fail@plt+0x2e640>
   40bf0:	mov	r2, r8
   40bf4:	mov	r1, #32
   40bf8:	mov	r0, sl
   40bfc:	bl	12348 <memset@plt>
   40c00:	add	sl, sl, r8
   40c04:	add	fp, fp, r8
   40c08:	sub	r5, r5, r8
   40c0c:	b	41848 <__assert_fail@plt+0x2f284>
   40c10:	mov	r3, #34	; 0x22
   40c14:	ldr	r2, [sp, #44]	; 0x2c
   40c18:	str	r3, [r2]
   40c1c:	b	40114 <__assert_fail@plt+0x2db50>
   40c20:	mov	r3, #34	; 0x22
   40c24:	ldr	r2, [sp, #44]	; 0x2c
   40c28:	str	r3, [r2]
   40c2c:	b	40114 <__assert_fail@plt+0x2db50>
   40c30:	mov	r2, r8
   40c34:	mov	r1, r4
   40c38:	mov	r0, sl
   40c3c:	bl	12000 <memcpy@plt>
   40c40:	b	418f4 <__assert_fail@plt+0x2f330>
   40c44:	cmp	r2, #0
   40c48:	bne	406a4 <__assert_fail@plt+0x2e0e0>
   40c4c:	ldr	r3, [sp, #28]
   40c50:	clz	r3, r3
   40c54:	lsr	r3, r3, #5
   40c58:	ands	r3, r3, r5, lsr #31
   40c5c:	bne	4088c <__assert_fail@plt+0x2e2c8>
   40c60:	sub	r8, r5, #6
   40c64:	bic	r8, r8, r8, asr #31
   40c68:	ldr	r3, [pc, #912]	; 41000 <__assert_fail@plt+0x2ea3c>
   40c6c:	str	r3, [sp, #52]	; 0x34
   40c70:	b	40570 <__assert_fail@plt+0x2dfac>
   40c74:	cmp	r2, #69	; 0x45
   40c78:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40c7c:	ldr	r3, [sp, #36]	; 0x24
   40c80:	ldr	r3, [r3, #8]
   40c84:	mov	r8, #2
   40c88:	b	40ae0 <__assert_fail@plt+0x2e51c>
   40c8c:	cmp	r2, #69	; 0x45
   40c90:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40c94:	ldr	r3, [sp, #48]	; 0x30
   40c98:	mov	r8, #2
   40c9c:	b	40ae0 <__assert_fail@plt+0x2e51c>
   40ca0:	cmp	r2, #69	; 0x45
   40ca4:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40ca8:	ldr	r3, [sp, #36]	; 0x24
   40cac:	ldr	r3, [r3, #8]
   40cb0:	b	40acc <__assert_fail@plt+0x2e508>
   40cb4:	cmp	r2, #69	; 0x45
   40cb8:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40cbc:	ldr	r3, [sp, #48]	; 0x30
   40cc0:	b	40acc <__assert_fail@plt+0x2e508>
   40cc4:	cmp	r2, #69	; 0x45
   40cc8:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40ccc:	ldr	r3, [sp, #36]	; 0x24
   40cd0:	ldr	r3, [r3, #28]
   40cd4:	cmn	r3, #1
   40cd8:	movge	r1, #0
   40cdc:	movlt	r1, #1
   40ce0:	str	r1, [sp, #52]	; 0x34
   40ce4:	add	r3, r3, #1
   40ce8:	mov	r0, #0
   40cec:	mov	r9, r0
   40cf0:	mov	r8, #3
   40cf4:	b	40af0 <__assert_fail@plt+0x2e52c>
   40cf8:	cmp	r2, #69	; 0x45
   40cfc:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40d00:	ldr	r3, [sp, #36]	; 0x24
   40d04:	ldr	r3, [r3, #4]
   40d08:	mov	r8, #2
   40d0c:	b	40ae0 <__assert_fail@plt+0x2e51c>
   40d10:	cmp	r2, #69	; 0x45
   40d14:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40d18:	ldr	r3, [sp, #36]	; 0x24
   40d1c:	ldr	r3, [r3, #16]
   40d20:	cmn	r3, #1
   40d24:	movge	r1, #0
   40d28:	movlt	r1, #1
   40d2c:	str	r1, [sp, #52]	; 0x34
   40d30:	add	r3, r3, #1
   40d34:	mov	r0, #0
   40d38:	mov	r9, r0
   40d3c:	mov	r8, #2
   40d40:	b	40af0 <__assert_fail@plt+0x2e52c>
   40d44:	cmp	r2, #69	; 0x45
   40d48:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40d4c:	cmp	r5, #0
   40d50:	movle	r5, #9
   40d54:	ldr	r3, [sp, #1172]	; 0x494
   40d58:	mov	r4, #9
   40d5c:	b	40d70 <__assert_fail@plt+0x2e7ac>
   40d60:	sub	r4, r4, #1
   40d64:	smull	r1, r2, r6, r3
   40d68:	asr	r3, r3, #31
   40d6c:	rsb	r3, r3, r2, asr #2
   40d70:	cmp	r4, r5
   40d74:	bgt	40d60 <__assert_fail@plt+0x2e79c>
   40d78:	cmp	r4, #1
   40d7c:	ble	40d98 <__assert_fail@plt+0x2e7d4>
   40d80:	smull	r2, r1, r6, r3
   40d84:	asr	r2, r3, #31
   40d88:	rsb	r2, r2, r1, asr #2
   40d8c:	add	r2, r2, r2, lsl #2
   40d90:	cmp	r3, r2, lsl #1
   40d94:	beq	40d60 <__assert_fail@plt+0x2e79c>
   40d98:	cmp	r4, #0
   40d9c:	ble	40dd0 <__assert_fail@plt+0x2e80c>
   40da0:	add	r1, sp, #72	; 0x48
   40da4:	add	r0, r1, r4
   40da8:	smull	r2, ip, r6, r3
   40dac:	asr	r2, r3, #31
   40db0:	rsb	r2, r2, ip, asr #2
   40db4:	add	ip, r2, r2, lsl #2
   40db8:	sub	r3, r3, ip, lsl #1
   40dbc:	add	r3, r3, #48	; 0x30
   40dc0:	strb	r3, [r0, #-1]!
   40dc4:	mov	r3, r2
   40dc8:	cmp	r0, r1
   40dcc:	bne	40da8 <__assert_fail@plt+0x2e7e4>
   40dd0:	ldr	r2, [sp, #28]
   40dd4:	mov	r3, r2
   40dd8:	cmp	r2, #0
   40ddc:	moveq	r3, #48	; 0x30
   40de0:	str	r3, [sp, #28]
   40de4:	mov	r8, r4
   40de8:	cmp	r4, #0
   40dec:	movcs	r9, r4
   40df0:	movcc	r9, #0
   40df4:	ldr	r3, [sp, #32]
   40df8:	sub	r3, r3, fp
   40dfc:	cmp	r9, r3
   40e00:	bcs	40e98 <__assert_fail@plt+0x2e8d4>
   40e04:	cmp	sl, #0
   40e08:	beq	40e2c <__assert_fail@plt+0x2e868>
   40e0c:	ldr	r3, [sp, #40]	; 0x28
   40e10:	cmp	r3, #0
   40e14:	beq	40ea8 <__assert_fail@plt+0x2e8e4>
   40e18:	mov	r2, r4
   40e1c:	add	r1, sp, #72	; 0x48
   40e20:	mov	r0, sl
   40e24:	bl	3ffac <__assert_fail@plt+0x2d9e8>
   40e28:	add	sl, sl, r8
   40e2c:	add	fp, r9, fp
   40e30:	ldr	r3, [sp, #28]
   40e34:	cmp	r3, #45	; 0x2d
   40e38:	beq	4190c <__assert_fail@plt+0x2f348>
   40e3c:	subs	r4, r5, r4
   40e40:	bmi	4190c <__assert_fail@plt+0x2f348>
   40e44:	cmp	r4, #0
   40e48:	movcs	r5, r4
   40e4c:	movcc	r5, #0
   40e50:	ldr	r3, [sp, #32]
   40e54:	sub	r3, r3, fp
   40e58:	cmp	r5, r3
   40e5c:	bcs	40ebc <__assert_fail@plt+0x2e8f8>
   40e60:	cmp	r4, #0
   40e64:	cmpne	sl, #0
   40e68:	beq	40e90 <__assert_fail@plt+0x2e8cc>
   40e6c:	ldr	r3, [sp, #28]
   40e70:	cmp	r3, #43	; 0x2b
   40e74:	cmpne	r3, #48	; 0x30
   40e78:	mov	r2, r4
   40e7c:	moveq	r1, #48	; 0x30
   40e80:	movne	r1, #32
   40e84:	mov	r0, sl
   40e88:	bl	12348 <memset@plt>
   40e8c:	add	sl, sl, r4
   40e90:	add	fp, fp, r5
   40e94:	b	400cc <__assert_fail@plt+0x2db08>
   40e98:	mov	r3, #34	; 0x22
   40e9c:	ldr	r2, [sp, #44]	; 0x2c
   40ea0:	str	r3, [r2]
   40ea4:	b	40114 <__assert_fail@plt+0x2db50>
   40ea8:	mov	r2, r4
   40eac:	add	r1, sp, #72	; 0x48
   40eb0:	mov	r0, sl
   40eb4:	bl	12000 <memcpy@plt>
   40eb8:	b	40e28 <__assert_fail@plt+0x2e864>
   40ebc:	mov	r3, #34	; 0x22
   40ec0:	ldr	r2, [sp, #44]	; 0x2c
   40ec4:	str	r3, [r2]
   40ec8:	b	40114 <__assert_fail@plt+0x2db50>
   40ecc:	ldr	r2, [sp, #28]
   40ed0:	mvn	r3, r5
   40ed4:	lsr	r3, r3, #31
   40ed8:	cmp	r2, #45	; 0x2d
   40edc:	moveq	r3, #0
   40ee0:	cmp	r3, #0
   40ee4:	moveq	r5, #0
   40ee8:	mov	r4, r5
   40eec:	cmp	r5, #1
   40ef0:	movcc	r5, #1
   40ef4:	ldr	r3, [sp, #32]
   40ef8:	sub	r3, r3, fp
   40efc:	cmp	r5, r3
   40f00:	bcs	40f4c <__assert_fail@plt+0x2e988>
   40f04:	cmp	sl, #0
   40f08:	beq	40f44 <__assert_fail@plt+0x2e980>
   40f0c:	cmp	r4, #1
   40f10:	bls	40f3c <__assert_fail@plt+0x2e978>
   40f14:	sub	r4, r4, #1
   40f18:	ldr	r3, [sp, #28]
   40f1c:	cmp	r3, #43	; 0x2b
   40f20:	cmpne	r3, #48	; 0x30
   40f24:	mov	r2, r4
   40f28:	moveq	r1, #48	; 0x30
   40f2c:	movne	r1, #32
   40f30:	mov	r0, sl
   40f34:	bl	12348 <memset@plt>
   40f38:	add	sl, sl, r4
   40f3c:	mov	r3, #10
   40f40:	strb	r3, [sl], #1
   40f44:	add	fp, fp, r5
   40f48:	b	400cc <__assert_fail@plt+0x2db08>
   40f4c:	mov	r3, #34	; 0x22
   40f50:	ldr	r2, [sp, #44]	; 0x2c
   40f54:	str	r3, [r2]
   40f58:	b	40114 <__assert_fail@plt+0x2db50>
   40f5c:	mov	r3, #1
   40f60:	cmp	r8, #0
   40f64:	moveq	r8, r3
   40f68:	moveq	r4, #112	; 0x70
   40f6c:	movne	r4, #112	; 0x70
   40f70:	movne	r3, #0
   40f74:	strne	r3, [sp, #40]	; 0x28
   40f78:	b	408c0 <__assert_fail@plt+0x2e2fc>
   40f7c:	mov	r3, #0
   40f80:	b	40f60 <__assert_fail@plt+0x2e99c>
   40f84:	ldr	r3, [sp, #36]	; 0x24
   40f88:	ldr	r3, [r3, #16]
   40f8c:	cmp	r2, #79	; 0x4f
   40f90:	bne	40fb0 <__assert_fail@plt+0x2e9ec>
   40f94:	mov	r3, #32
   40f98:	strb	r3, [sp, #72]	; 0x48
   40f9c:	mov	r3, #37	; 0x25
   40fa0:	strb	r3, [sp, #73]	; 0x49
   40fa4:	mov	r4, #113	; 0x71
   40fa8:	mov	r8, #0
   40fac:	b	408e0 <__assert_fail@plt+0x2e31c>
   40fb0:	add	r2, r3, r3, lsl #2
   40fb4:	add	r3, r3, r2, lsl #1
   40fb8:	asr	r3, r3, #5
   40fbc:	add	r3, r3, #1
   40fc0:	mov	r0, #0
   40fc4:	mov	r9, r0
   40fc8:	str	r0, [sp, #52]	; 0x34
   40fcc:	mov	r8, #1
   40fd0:	b	40b18 <__assert_fail@plt+0x2e554>
   40fd4:	cmp	r2, #69	; 0x45
   40fd8:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   40fdc:	ldr	r3, [sp, #36]	; 0x24
   40fe0:	ldr	r3, [r3]
   40fe4:	mov	r8, #2
   40fe8:	b	40ae0 <__assert_fail@plt+0x2e51c>
   40fec:	andeq	r4, r4, r0, lsl r3
   40ff0:	strbtvs	r6, [r6], -r7, ror #12
   40ff4:	stcleq	12, cr12, [ip], {204}	; 0xcc
   40ff8:	andeq	r8, r4, r0, lsr r6
   40ffc:	andeq	r8, r4, ip, lsl r6
   41000:	andeq	r8, r4, r4, lsr #12
   41004:	andeq	r0, r0, fp, ror #14
   41008:	andeq	r8, r4, ip, lsr r6
   4100c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   41010:	andeq	r2, r0, pc, lsl #14
   41014:	subls	r2, r9, #-1828716544	; 0x93000000
   41018:			; <UNDEFINED> instruction: 0xfffff894
   4101c:	mvnpl	r8, pc, lsl r5
   41020:			; <UNDEFINED> instruction: 0x91a2b3c5
   41024:	stmhi	r8, {r0, r3, r7, fp, pc}
   41028:	andeq	r2, r0, r0, lsl r7
   4102c:	add	ip, sp, #88	; 0x58
   41030:	ldr	lr, [sp, #36]	; 0x24
   41034:	ldm	lr!, {r0, r1, r2, r3}
   41038:	stmia	ip!, {r0, r1, r2, r3}
   4103c:	ldm	lr!, {r0, r1, r2, r3}
   41040:	stmia	ip!, {r0, r1, r2, r3}
   41044:	ldm	lr, {r0, r1, r2}
   41048:	stm	ip, {r0, r1, r2}
   4104c:	mvn	r3, #0
   41050:	str	r3, [sp, #116]	; 0x74
   41054:	add	r1, sp, #88	; 0x58
   41058:	ldr	r0, [sp, #1168]	; 0x490
   4105c:	bl	3f308 <__assert_fail@plt+0x2cd44>
   41060:	ldr	r3, [sp, #116]	; 0x74
   41064:	cmp	r3, #0
   41068:	blt	410c8 <__assert_fail@plt+0x2eb04>
   4106c:	lsr	r3, r0, #31
   41070:	str	r3, [sp, #52]	; 0x34
   41074:	add	r2, sp, #85	; 0x55
   41078:	mov	r1, r0
   4107c:	smull	r3, ip, r6, r1
   41080:	asr	r3, r1, #31
   41084:	rsb	r3, r3, ip, asr #2
   41088:	mov	ip, r3
   4108c:	add	r3, r3, r3, lsl #2
   41090:	sub	r3, r1, r3, lsl #1
   41094:	mov	r1, ip
   41098:	mov	r4, r2
   4109c:	cmp	r0, #0
   410a0:	rsblt	r3, r3, #48	; 0x30
   410a4:	addge	r3, r3, #48	; 0x30
   410a8:	uxtb	r3, r3
   410ac:	strb	r3, [r2]
   410b0:	sub	r2, r2, #1
   410b4:	cmp	ip, #0
   410b8:	bne	4107c <__assert_fail@plt+0x2eab8>
   410bc:	mov	r9, #0
   410c0:	mov	r8, #1
   410c4:	b	40b78 <__assert_fail@plt+0x2e5b4>
   410c8:	mov	r3, #75	; 0x4b
   410cc:	ldr	r2, [sp, #44]	; 0x2c
   410d0:	str	r3, [r2]
   410d4:	b	40114 <__assert_fail@plt+0x2db50>
   410d8:	cmp	r2, #79	; 0x4f
   410dc:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   410e0:	mov	r4, #88	; 0x58
   410e4:	mov	r8, #0
   410e8:	b	408c0 <__assert_fail@plt+0x2e2fc>
   410ec:	ldr	r2, [sp, #28]
   410f0:	mvn	r3, r5
   410f4:	lsr	r3, r3, #31
   410f8:	cmp	r2, #45	; 0x2d
   410fc:	moveq	r3, #0
   41100:	cmp	r3, #0
   41104:	moveq	r5, #0
   41108:	mov	r4, r5
   4110c:	cmp	r5, #1
   41110:	movcc	r5, #1
   41114:	ldr	r3, [sp, #32]
   41118:	sub	r3, r3, fp
   4111c:	cmp	r5, r3
   41120:	bcs	4116c <__assert_fail@plt+0x2eba8>
   41124:	cmp	sl, #0
   41128:	beq	41164 <__assert_fail@plt+0x2eba0>
   4112c:	cmp	r4, #1
   41130:	bls	4115c <__assert_fail@plt+0x2eb98>
   41134:	sub	r4, r4, #1
   41138:	ldr	r3, [sp, #28]
   4113c:	cmp	r3, #43	; 0x2b
   41140:	cmpne	r3, #48	; 0x30
   41144:	mov	r2, r4
   41148:	moveq	r1, #48	; 0x30
   4114c:	movne	r1, #32
   41150:	mov	r0, sl
   41154:	bl	12348 <memset@plt>
   41158:	add	sl, sl, r4
   4115c:	mov	r3, #9
   41160:	strb	r3, [sl], #1
   41164:	add	fp, fp, r5
   41168:	b	400cc <__assert_fail@plt+0x2db08>
   4116c:	mov	r3, #34	; 0x22
   41170:	ldr	r2, [sp, #44]	; 0x2c
   41174:	str	r3, [r2]
   41178:	b	40114 <__assert_fail@plt+0x2db50>
   4117c:	ldr	r3, [sp, #36]	; 0x24
   41180:	ldr	r3, [r3, #24]
   41184:	add	r3, r3, #6
   41188:	ldr	r1, [pc, #-380]	; 41014 <__assert_fail@plt+0x2ea50>
   4118c:	smull	r0, r1, r1, r3
   41190:	add	r0, r1, r3
   41194:	asr	r1, r3, #31
   41198:	rsb	r1, r1, r0, asr #2
   4119c:	rsb	r1, r1, r1, lsl #3
   411a0:	sub	r3, r3, r1
   411a4:	add	r3, r3, #1
   411a8:	mov	r8, #1
   411ac:	b	40ae0 <__assert_fail@plt+0x2e51c>
   411b0:	cmp	r2, #69	; 0x45
   411b4:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   411b8:	ldr	r1, [sp, #36]	; 0x24
   411bc:	ldr	r3, [r1, #28]
   411c0:	ldr	r1, [r1, #24]
   411c4:	sub	r3, r3, r1
   411c8:	add	r3, r3, #7
   411cc:	ldr	r1, [pc, #-448]	; 41014 <__assert_fail@plt+0x2ea50>
   411d0:	smull	r0, r1, r1, r3
   411d4:	add	r1, r1, r3
   411d8:	asr	r3, r3, #31
   411dc:	rsb	r3, r3, r1, asr #2
   411e0:	mov	r8, #2
   411e4:	b	40ae0 <__assert_fail@plt+0x2e51c>
   411e8:	cmp	r2, #69	; 0x45
   411ec:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   411f0:	ldr	r0, [sp, #36]	; 0x24
   411f4:	mov	r3, r0
   411f8:	ldr	r8, [r0, #20]
   411fc:	cmp	r8, #0
   41200:	movlt	r3, #300	; 0x12c
   41204:	mvnge	r3, #99	; 0x63
   41208:	add	r3, r3, r8
   4120c:	ldr	lr, [r0, #28]
   41210:	ldr	r0, [r0, #24]
   41214:	str	r0, [sp, #52]	; 0x34
   41218:	sub	r0, lr, r0
   4121c:	add	r0, r0, #380	; 0x17c
   41220:	add	r0, r0, #2
   41224:	ldr	ip, [pc, #-536]	; 41014 <__assert_fail@plt+0x2ea50>
   41228:	smull	r9, ip, ip, r0
   4122c:	add	r9, ip, r0
   41230:	asr	ip, r0, #31
   41234:	rsb	ip, ip, r9, asr #2
   41238:	rsb	ip, ip, ip, lsl #3
   4123c:	sub	ip, r0, ip
   41240:	sub	r9, lr, ip
   41244:	adds	r9, r9, #3
   41248:	bmi	4136c <__assert_fail@plt+0x2eda8>
   4124c:	tst	r3, #3
   41250:	movne	r0, #0
   41254:	bne	412a0 <__assert_fail@plt+0x2ecdc>
   41258:	ldr	r0, [pc, #-580]	; 4101c <__assert_fail@plt+0x2ea58>
   4125c:	smull	ip, r0, r0, r3
   41260:	asr	ip, r3, #31
   41264:	rsb	r0, ip, r0, asr #5
   41268:	mov	ip, #100	; 0x64
   4126c:	mul	r0, ip, r0
   41270:	cmp	r3, r0
   41274:	movne	r0, #1
   41278:	bne	412a0 <__assert_fail@plt+0x2ecdc>
   4127c:	ldr	r0, [pc, #-616]	; 4101c <__assert_fail@plt+0x2ea58>
   41280:	smull	ip, r0, r0, r3
   41284:	asr	ip, r3, #31
   41288:	rsb	ip, ip, r0, asr #7
   4128c:	mov	r0, #400	; 0x190
   41290:	mul	r0, r0, ip
   41294:	cmp	r3, r0
   41298:	movne	r0, #0
   4129c:	moveq	r0, #1
   412a0:	add	r3, r0, #364	; 0x16c
   412a4:	add	r3, r3, #1
   412a8:	sub	r3, lr, r3
   412ac:	ldr	r0, [sp, #52]	; 0x34
   412b0:	sub	r0, r3, r0
   412b4:	add	r0, r0, #380	; 0x17c
   412b8:	add	r0, r0, #2
   412bc:	ldr	ip, [pc, #-688]	; 41014 <__assert_fail@plt+0x2ea50>
   412c0:	smull	ip, lr, ip, r0
   412c4:	add	lr, lr, r0
   412c8:	asr	ip, r0, #31
   412cc:	rsb	ip, ip, lr, asr #2
   412d0:	rsb	ip, ip, ip, lsl #3
   412d4:	sub	ip, r0, ip
   412d8:	sub	r3, r3, ip
   412dc:	add	r3, r3, #3
   412e0:	cmp	r3, #0
   412e4:	movge	r9, r3
   412e8:	mvn	lr, r3
   412ec:	lsr	lr, lr, #31
   412f0:	cmp	r1, #71	; 0x47
   412f4:	beq	4140c <__assert_fail@plt+0x2ee48>
   412f8:	cmp	r1, #103	; 0x67
   412fc:	bne	41438 <__assert_fail@plt+0x2ee74>
   41300:	ldr	r3, [pc, #-748]	; 4101c <__assert_fail@plt+0x2ea58>
   41304:	smull	r1, r3, r3, r8
   41308:	asr	r1, r8, #31
   4130c:	rsb	r1, r1, r3, asr #5
   41310:	mov	r0, #100	; 0x64
   41314:	mul	r1, r0, r1
   41318:	sub	r1, r8, r1
   4131c:	add	r1, r1, lr
   41320:	ldr	r3, [pc, #-780]	; 4101c <__assert_fail@plt+0x2ea58>
   41324:	smull	r3, ip, r3, r1
   41328:	asr	r3, r1, #31
   4132c:	rsb	r3, r3, ip, asr #5
   41330:	mul	r3, r0, r3
   41334:	subs	r3, r1, r3
   41338:	movpl	r1, #0
   4133c:	strpl	r1, [sp, #52]	; 0x34
   41340:	movpl	r8, #2
   41344:	bpl	40a48 <__assert_fail@plt+0x2e484>
   41348:	ldr	r1, [pc, #-824]	; 41018 <__assert_fail@plt+0x2ea54>
   4134c:	sub	r1, r1, lr
   41350:	cmp	r8, r1
   41354:	rsblt	r3, r3, #0
   41358:	addge	r3, r3, #100	; 0x64
   4135c:	mov	r1, #0
   41360:	str	r1, [sp, #52]	; 0x34
   41364:	mov	r8, #2
   41368:	b	40a48 <__assert_fail@plt+0x2e484>
   4136c:	sub	r3, r3, #1
   41370:	tst	r3, #3
   41374:	movne	r3, #0
   41378:	bne	413c4 <__assert_fail@plt+0x2ee00>
   4137c:	ldr	r0, [pc, #-872]	; 4101c <__assert_fail@plt+0x2ea58>
   41380:	smull	ip, r0, r0, r3
   41384:	asr	ip, r3, #31
   41388:	rsb	r0, ip, r0, asr #5
   4138c:	mov	ip, #100	; 0x64
   41390:	mul	r0, ip, r0
   41394:	cmp	r3, r0
   41398:	movne	r3, #1
   4139c:	bne	413c4 <__assert_fail@plt+0x2ee00>
   413a0:	ldr	r0, [pc, #-908]	; 4101c <__assert_fail@plt+0x2ea58>
   413a4:	smull	ip, r0, r0, r3
   413a8:	asr	ip, r3, #31
   413ac:	rsb	ip, ip, r0, asr #7
   413b0:	mov	r0, #400	; 0x190
   413b4:	mul	r0, r0, ip
   413b8:	cmp	r3, r0
   413bc:	movne	r3, #0
   413c0:	moveq	r3, #1
   413c4:	add	r3, r3, #364	; 0x16c
   413c8:	add	r3, r3, #1
   413cc:	add	r3, r3, lr
   413d0:	ldr	r0, [sp, #52]	; 0x34
   413d4:	sub	r0, r3, r0
   413d8:	add	r0, r0, #380	; 0x17c
   413dc:	add	r0, r0, #2
   413e0:	ldr	ip, [pc, #-980]	; 41014 <__assert_fail@plt+0x2ea50>
   413e4:	smull	ip, lr, ip, r0
   413e8:	add	lr, lr, r0
   413ec:	asr	ip, r0, #31
   413f0:	rsb	ip, ip, lr, asr #2
   413f4:	rsb	ip, ip, ip, lsl #3
   413f8:	sub	ip, r0, ip
   413fc:	sub	ip, r3, ip
   41400:	add	r9, ip, #3
   41404:	mvn	lr, #0
   41408:	b	412f0 <__assert_fail@plt+0x2ed2c>
   4140c:	ldr	r3, [pc, #-1020]	; 41018 <__assert_fail@plt+0x2ea54>
   41410:	sub	r3, r3, lr
   41414:	cmp	r8, r3
   41418:	movge	r3, #0
   4141c:	movlt	r3, #1
   41420:	str	r3, [sp, #52]	; 0x34
   41424:	add	r3, r8, #1888	; 0x760
   41428:	add	r3, r3, #12
   4142c:	add	r3, r3, lr
   41430:	mov	r8, #4
   41434:	b	40a48 <__assert_fail@plt+0x2e484>
   41438:	ldr	r3, [pc, #-1068]	; 41014 <__assert_fail@plt+0x2ea50>
   4143c:	smull	r1, r3, r3, r9
   41440:	add	r1, r3, r9
   41444:	asr	r3, r9, #31
   41448:	rsb	r3, r3, r1, asr #2
   4144c:	add	r3, r3, #1
   41450:	mov	r8, #2
   41454:	b	40ae0 <__assert_fail@plt+0x2e51c>
   41458:	cmp	r2, #69	; 0x45
   4145c:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   41460:	ldr	ip, [sp, #36]	; 0x24
   41464:	ldr	r3, [ip, #24]
   41468:	add	r3, r3, #6
   4146c:	ldr	r1, [pc, #-1120]	; 41014 <__assert_fail@plt+0x2ea50>
   41470:	smull	r0, r1, r1, r3
   41474:	add	r0, r1, r3
   41478:	asr	r1, r3, #31
   4147c:	rsb	r1, r1, r0, asr #2
   41480:	rsb	r1, r1, r1, lsl #3
   41484:	sub	r1, r3, r1
   41488:	ldr	r3, [ip, #28]
   4148c:	sub	r3, r3, r1
   41490:	add	r3, r3, #7
   41494:	ldr	r1, [pc, #-1160]	; 41014 <__assert_fail@plt+0x2ea50>
   41498:	smull	r0, r1, r1, r3
   4149c:	add	r1, r1, r3
   414a0:	asr	r3, r3, #31
   414a4:	rsb	r3, r3, r1, asr #2
   414a8:	mov	r8, #2
   414ac:	b	40ae0 <__assert_fail@plt+0x2e51c>
   414b0:	cmp	r2, #69	; 0x45
   414b4:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   414b8:	ldr	r3, [sp, #36]	; 0x24
   414bc:	ldr	r3, [r3, #24]
   414c0:	mov	r8, #1
   414c4:	b	40ae0 <__assert_fail@plt+0x2e51c>
   414c8:	cmp	r2, #69	; 0x45
   414cc:	beq	417f4 <__assert_fail@plt+0x2f230>
   414d0:	cmp	r2, #79	; 0x4f
   414d4:	beq	406a4 <__assert_fail@plt+0x2e0e0>
   414d8:	ldr	r3, [sp, #36]	; 0x24
   414dc:	ldr	r3, [r3, #20]
   414e0:	ldr	r1, [pc, #-1232]	; 41018 <__assert_fail@plt+0x2ea54>
   414e4:	cmp	r3, r1
   414e8:	movge	r1, #0
   414ec:	movlt	r1, #1
   414f0:	str	r1, [sp, #52]	; 0x34
   414f4:	add	r3, r3, #1888	; 0x760
   414f8:	add	r3, r3, #12
   414fc:	mov	r8, #4
   41500:	b	40a48 <__assert_fail@plt+0x2e484>
   41504:	cmp	r2, #69	; 0x45
   41508:	beq	417fc <__assert_fail@plt+0x2f238>
   4150c:	ldr	r3, [sp, #36]	; 0x24
   41510:	ldr	r1, [r3, #20]
   41514:	ldr	r3, [pc, #-1280]	; 4101c <__assert_fail@plt+0x2ea58>
   41518:	smull	r3, r0, r3, r1
   4151c:	asr	r3, r1, #31
   41520:	rsb	r3, r3, r0, asr #5
   41524:	mov	r0, #100	; 0x64
   41528:	mul	r3, r0, r3
   4152c:	subs	r3, r1, r3
   41530:	bmi	41544 <__assert_fail@plt+0x2ef80>
   41534:	mov	r1, #0
   41538:	str	r1, [sp, #52]	; 0x34
   4153c:	mov	r8, #2
   41540:	b	40a48 <__assert_fail@plt+0x2e484>
   41544:	sub	r0, r0, #2000	; 0x7d0
   41548:	cmp	r1, r0
   4154c:	rsblt	r3, r3, #0
   41550:	addge	r3, r3, #100	; 0x64
   41554:	b	41534 <__assert_fail@plt+0x2ef70>
   41558:	ldr	r3, [sp, #40]	; 0x28
   4155c:	cmp	r8, #0
   41560:	movne	r3, #0
   41564:	str	r3, [sp, #40]	; 0x28
   41568:	ldr	r0, [sp, #60]	; 0x3c
   4156c:	bl	122d0 <strlen@plt>
   41570:	mov	r9, r0
   41574:	ldr	r2, [sp, #28]
   41578:	mvn	r3, r5
   4157c:	lsr	r3, r3, #31
   41580:	cmp	r2, #45	; 0x2d
   41584:	moveq	r3, #0
   41588:	cmp	r3, #0
   4158c:	moveq	r5, #0
   41590:	mov	r4, r5
   41594:	cmp	r5, r0
   41598:	movcc	r5, r0
   4159c:	ldr	r3, [sp, #32]
   415a0:	sub	r3, r3, fp
   415a4:	cmp	r5, r3
   415a8:	bcs	4160c <__assert_fail@plt+0x2f048>
   415ac:	cmp	sl, #0
   415b0:	beq	41630 <__assert_fail@plt+0x2f06c>
   415b4:	cmp	r4, r0
   415b8:	bls	415e4 <__assert_fail@plt+0x2f020>
   415bc:	sub	r4, r4, r0
   415c0:	ldr	r3, [sp, #28]
   415c4:	cmp	r3, #43	; 0x2b
   415c8:	cmpne	r3, #48	; 0x30
   415cc:	mov	r2, r4
   415d0:	moveq	r1, #48	; 0x30
   415d4:	movne	r1, #32
   415d8:	mov	r0, sl
   415dc:	bl	12348 <memset@plt>
   415e0:	add	sl, sl, r4
   415e4:	cmp	r8, #0
   415e8:	bne	4161c <__assert_fail@plt+0x2f058>
   415ec:	ldr	r3, [sp, #40]	; 0x28
   415f0:	cmp	r3, #0
   415f4:	beq	41638 <__assert_fail@plt+0x2f074>
   415f8:	mov	r2, r9
   415fc:	ldr	r1, [sp, #60]	; 0x3c
   41600:	mov	r0, sl
   41604:	bl	3ffac <__assert_fail@plt+0x2d9e8>
   41608:	b	4162c <__assert_fail@plt+0x2f068>
   4160c:	mov	r3, #34	; 0x22
   41610:	ldr	r2, [sp, #44]	; 0x2c
   41614:	str	r3, [r2]
   41618:	b	40114 <__assert_fail@plt+0x2db50>
   4161c:	mov	r2, r9
   41620:	ldr	r1, [sp, #60]	; 0x3c
   41624:	mov	r0, sl
   41628:	bl	3ff68 <__assert_fail@plt+0x2d9a4>
   4162c:	add	sl, sl, r9
   41630:	add	fp, fp, r5
   41634:	b	400cc <__assert_fail@plt+0x2db08>
   41638:	mov	r2, r9
   4163c:	ldr	r1, [sp, #60]	; 0x3c
   41640:	mov	r0, sl
   41644:	bl	12000 <memcpy@plt>
   41648:	b	4162c <__assert_fail@plt+0x2f068>
   4164c:	add	r1, r7, #2
   41650:	mov	lr, #1
   41654:	add	lr, lr, #1
   41658:	mov	r0, r1
   4165c:	ldrb	r3, [r1], #1
   41660:	cmp	r3, #58	; 0x3a
   41664:	bne	40684 <__assert_fail@plt+0x2e0c0>
   41668:	b	41654 <__assert_fail@plt+0x2f090>
   4166c:	mov	lr, #0
   41670:	ldr	r1, [sp, #36]	; 0x24
   41674:	ldr	r3, [r1, #32]
   41678:	cmp	r3, #0
   4167c:	blt	400cc <__assert_fail@plt+0x2db08>
   41680:	mov	r3, r1
   41684:	ldr	r1, [r1, #36]	; 0x24
   41688:	cmp	r1, #0
   4168c:	movlt	r3, #1
   41690:	blt	416b0 <__assert_fail@plt+0x2f0ec>
   41694:	movne	r3, #0
   41698:	bne	416b0 <__assert_fail@plt+0x2f0ec>
   4169c:	ldr	r3, [sp, #60]	; 0x3c
   416a0:	ldrb	r3, [r3]
   416a4:	cmp	r3, #45	; 0x2d
   416a8:	movne	r3, #0
   416ac:	moveq	r3, #1
   416b0:	str	r3, [sp, #52]	; 0x34
   416b4:	ldr	r3, [pc, #-1692]	; 41020 <__assert_fail@plt+0x2ea5c>
   416b8:	smull	r0, r3, r3, r1
   416bc:	add	r3, r3, r1
   416c0:	asr	r0, r1, #31
   416c4:	rsb	r8, r0, r3, asr #11
   416c8:	ldr	r3, [pc, #-1708]	; 41024 <__assert_fail@plt+0x2ea60>
   416cc:	smull	ip, r3, r3, r1
   416d0:	add	r3, r3, r1
   416d4:	rsb	r3, r0, r3, asr #5
   416d8:	ldr	r0, [pc, #-1724]	; 41024 <__assert_fail@plt+0x2ea60>
   416dc:	smull	ip, r0, r0, r3
   416e0:	add	r0, r0, r3
   416e4:	asr	ip, r3, #31
   416e8:	rsb	r0, ip, r0, asr #5
   416ec:	rsb	r0, r0, r0, lsl #4
   416f0:	sub	r0, r3, r0, lsl #2
   416f4:	rsb	r3, r3, r3, lsl #4
   416f8:	sub	r3, r1, r3, lsl #2
   416fc:	cmp	lr, #3
   41700:	ldrls	pc, [pc, lr, lsl #2]
   41704:	b	406a4 <__assert_fail@plt+0x2e0e0>
   41708:	andeq	r1, r4, r8, lsl r7
   4170c:	andeq	r1, r4, r0, lsr r7
   41710:	andeq	r1, r4, r8, asr #14
   41714:	andeq	r1, r4, ip, ror #14
   41718:	mov	r3, #100	; 0x64
   4171c:	mla	r3, r3, r8, r0
   41720:	mov	r0, #0
   41724:	mov	r9, #1
   41728:	mov	r8, #5
   4172c:	b	40af0 <__assert_fail@plt+0x2e52c>
   41730:	mov	r3, #100	; 0x64
   41734:	mla	r3, r3, r8, r0
   41738:	mov	r0, #4
   4173c:	mov	r9, #1
   41740:	mov	r8, #6
   41744:	b	40af0 <__assert_fail@plt+0x2e52c>
   41748:	mov	r1, #100	; 0x64
   4174c:	mul	r0, r1, r0
   41750:	ldr	r1, [pc, #-1840]	; 41028 <__assert_fail@plt+0x2ea64>
   41754:	mla	r0, r1, r8, r0
   41758:	add	r3, r0, r3
   4175c:	mov	r0, #20
   41760:	mov	r9, #1
   41764:	mov	r8, #9
   41768:	b	40af0 <__assert_fail@plt+0x2e52c>
   4176c:	cmp	r3, #0
   41770:	bne	41748 <__assert_fail@plt+0x2f184>
   41774:	cmp	r0, #0
   41778:	bne	41730 <__assert_fail@plt+0x2f16c>
   4177c:	mov	r3, r8
   41780:	mov	r9, #1
   41784:	mov	r8, #3
   41788:	b	40af0 <__assert_fail@plt+0x2e52c>
   4178c:	mov	r3, #34	; 0x22
   41790:	ldr	r2, [sp, #44]	; 0x2c
   41794:	str	r3, [r2]
   41798:	b	40114 <__assert_fail@plt+0x2db50>
   4179c:	mov	r2, r8
   417a0:	mov	r1, r9
   417a4:	mov	r0, sl
   417a8:	bl	12000 <memcpy@plt>
   417ac:	b	40738 <__assert_fail@plt+0x2e174>
   417b0:	mov	fp, #0
   417b4:	ldr	r3, [sp, #32]
   417b8:	cmp	sl, #0
   417bc:	cmpne	r3, #0
   417c0:	movne	r3, #0
   417c4:	strbne	r3, [sl]
   417c8:	ldr	r3, [sp, #44]	; 0x2c
   417cc:	ldr	r2, [sp, #64]	; 0x40
   417d0:	str	r2, [r3]
   417d4:	b	40118 <__assert_fail@plt+0x2db54>
   417d8:	mov	r4, #67	; 0x43
   417dc:	mov	r3, #32
   417e0:	strb	r3, [sp, #72]	; 0x48
   417e4:	mov	r3, #37	; 0x25
   417e8:	strb	r3, [sp, #73]	; 0x49
   417ec:	mov	r8, #0
   417f0:	b	408e0 <__assert_fail@plt+0x2e31c>
   417f4:	mov	r4, #89	; 0x59
   417f8:	b	417dc <__assert_fail@plt+0x2f218>
   417fc:	mov	r4, #121	; 0x79
   41800:	b	417dc <__assert_fail@plt+0x2f218>
   41804:	mov	r3, #45	; 0x2d
   41808:	str	r3, [sp, #52]	; 0x34
   4180c:	add	r8, sp, #86	; 0x56
   41810:	sub	r3, r8, r4
   41814:	str	r3, [sp, #68]	; 0x44
   41818:	sub	r8, r5, #1
   4181c:	sub	r8, r8, r3
   41820:	ldr	r2, [sp, #28]
   41824:	subs	r9, r2, #45	; 0x2d
   41828:	movne	r9, #1
   4182c:	cmp	r8, #0
   41830:	movle	r3, #0
   41834:	andgt	r3, r9, #1
   41838:	cmp	r3, #0
   4183c:	moveq	r8, #0
   41840:	cmp	r2, #95	; 0x5f
   41844:	beq	40be8 <__assert_fail@plt+0x2e624>
   41848:	ldr	r3, [sp, #32]
   4184c:	sub	r3, r3, fp
   41850:	cmp	r3, #1
   41854:	bls	40c10 <__assert_fail@plt+0x2e64c>
   41858:	cmp	sl, #0
   4185c:	ldrbne	r3, [sp, #52]	; 0x34
   41860:	strbne	r3, [sl], #1
   41864:	add	fp, fp, #1
   41868:	sub	r5, r5, #1
   4186c:	ldr	r8, [sp, #68]	; 0x44
   41870:	cmp	r5, #0
   41874:	movlt	r9, #0
   41878:	andge	r9, r9, #1
   4187c:	cmp	r9, #0
   41880:	moveq	r5, #0
   41884:	cmp	r5, r8
   41888:	movcs	r9, r5
   4188c:	movcc	r9, r8
   41890:	ldr	r2, [sp, #32]
   41894:	sub	r2, r2, fp
   41898:	cmp	r9, r2
   4189c:	bcs	40c20 <__assert_fail@plt+0x2e65c>
   418a0:	cmp	sl, #0
   418a4:	beq	418f8 <__assert_fail@plt+0x2f334>
   418a8:	cmp	r5, r8
   418ac:	bls	418d8 <__assert_fail@plt+0x2f314>
   418b0:	sub	r5, r5, r8
   418b4:	ldr	r3, [sp, #28]
   418b8:	cmp	r3, #43	; 0x2b
   418bc:	cmpne	r3, #48	; 0x30
   418c0:	mov	r2, r5
   418c4:	moveq	r1, #48	; 0x30
   418c8:	movne	r1, #32
   418cc:	mov	r0, sl
   418d0:	bl	12348 <memset@plt>
   418d4:	add	sl, sl, r5
   418d8:	ldr	r3, [sp, #40]	; 0x28
   418dc:	cmp	r3, #0
   418e0:	beq	40c30 <__assert_fail@plt+0x2e66c>
   418e4:	mov	r2, r8
   418e8:	mov	r1, r4
   418ec:	mov	r0, sl
   418f0:	bl	3ffac <__assert_fail@plt+0x2d9e8>
   418f4:	add	sl, sl, r8
   418f8:	add	fp, fp, r9
   418fc:	b	400cc <__assert_fail@plt+0x2db08>
   41900:	mov	r3, #43	; 0x2b
   41904:	str	r3, [sp, #52]	; 0x34
   41908:	b	4180c <__assert_fail@plt+0x2f248>
   4190c:	ldr	r3, [sp, #32]
   41910:	cmp	r3, fp
   41914:	beq	40ebc <__assert_fail@plt+0x2e8f8>
   41918:	mov	r5, #0
   4191c:	b	40e90 <__assert_fail@plt+0x2e8cc>
   41920:	push	{r4, lr}
   41924:	sub	sp, sp, #32
   41928:	mov	ip, #0
   4192c:	add	lr, sp, #32
   41930:	strb	ip, [lr, #-1]!
   41934:	ldr	r4, [sp, #44]	; 0x2c
   41938:	str	r4, [sp, #20]
   4193c:	ldr	r4, [sp, #40]	; 0x28
   41940:	str	r4, [sp, #16]
   41944:	str	lr, [sp, #12]
   41948:	mvn	lr, #0
   4194c:	str	lr, [sp, #8]
   41950:	str	ip, [sp, #4]
   41954:	str	ip, [sp]
   41958:	bl	3fff0 <__assert_fail@plt+0x2da2c>
   4195c:	add	sp, sp, #32
   41960:	pop	{r4, pc}
   41964:	push	{r4, r5, r6, r7, r8, lr}
   41968:	mov	r6, r3
   4196c:	orr	r2, r2, #540672	; 0x84000
   41970:	orr	r2, r2, #2304	; 0x900
   41974:	bl	258c8 <__assert_fail@plt+0x13304>
   41978:	subs	r4, r0, #0
   4197c:	blt	419b8 <__assert_fail@plt+0x2f3f4>
   41980:	mov	r0, r4
   41984:	bl	12498 <fdopendir@plt>
   41988:	subs	r5, r0, #0
   4198c:	beq	4199c <__assert_fail@plt+0x2f3d8>
   41990:	str	r4, [r6]
   41994:	mov	r0, r5
   41998:	pop	{r4, r5, r6, r7, r8, pc}
   4199c:	bl	12318 <__errno_location@plt>
   419a0:	mov	r6, r0
   419a4:	ldr	r7, [r0]
   419a8:	mov	r0, r4
   419ac:	bl	1257c <close@plt>
   419b0:	str	r7, [r6]
   419b4:	b	41994 <__assert_fail@plt+0x2f3d0>
   419b8:	mov	r5, #0
   419bc:	b	41994 <__assert_fail@plt+0x2f3d0>
   419c0:	push	{r4, r5, r6, lr}
   419c4:	mov	r6, r1
   419c8:	mov	r4, r2
   419cc:	mov	r1, #0
   419d0:	bl	12414 <setlocale@plt>
   419d4:	subs	r5, r0, #0
   419d8:	beq	419fc <__assert_fail@plt+0x2f438>
   419dc:	mov	r0, r5
   419e0:	bl	122d0 <strlen@plt>
   419e4:	cmp	r4, r0
   419e8:	bhi	41a14 <__assert_fail@plt+0x2f450>
   419ec:	cmp	r4, #0
   419f0:	bne	41a2c <__assert_fail@plt+0x2f468>
   419f4:	mov	r0, #34	; 0x22
   419f8:	pop	{r4, r5, r6, pc}
   419fc:	cmp	r4, #0
   41a00:	beq	41a50 <__assert_fail@plt+0x2f48c>
   41a04:	mov	r3, #0
   41a08:	strb	r3, [r6]
   41a0c:	mov	r0, #22
   41a10:	pop	{r4, r5, r6, pc}
   41a14:	add	r2, r0, #1
   41a18:	mov	r1, r5
   41a1c:	mov	r0, r6
   41a20:	bl	12000 <memcpy@plt>
   41a24:	mov	r0, #0
   41a28:	pop	{r4, r5, r6, pc}
   41a2c:	sub	r4, r4, #1
   41a30:	mov	r2, r4
   41a34:	mov	r1, r5
   41a38:	mov	r0, r6
   41a3c:	bl	12000 <memcpy@plt>
   41a40:	mov	r3, #0
   41a44:	strb	r3, [r6, r4]
   41a48:	mov	r0, #34	; 0x22
   41a4c:	pop	{r4, r5, r6, pc}
   41a50:	mov	r0, #22
   41a54:	pop	{r4, r5, r6, pc}
   41a58:	push	{r4, lr}
   41a5c:	mov	r1, #0
   41a60:	bl	12414 <setlocale@plt>
   41a64:	pop	{r4, pc}
   41a68:	subs	r2, r1, #1
   41a6c:	bxeq	lr
   41a70:	bcc	41c48 <__assert_fail@plt+0x2f684>
   41a74:	cmp	r0, r1
   41a78:	bls	41c2c <__assert_fail@plt+0x2f668>
   41a7c:	tst	r1, r2
   41a80:	beq	41c38 <__assert_fail@plt+0x2f674>
   41a84:	clz	r3, r0
   41a88:	clz	r2, r1
   41a8c:	sub	r3, r2, r3
   41a90:	rsbs	r3, r3, #31
   41a94:	addne	r3, r3, r3, lsl #1
   41a98:	mov	r2, #0
   41a9c:	addne	pc, pc, r3, lsl #2
   41aa0:	nop			; (mov r0, r0)
   41aa4:	cmp	r0, r1, lsl #31
   41aa8:	adc	r2, r2, r2
   41aac:	subcs	r0, r0, r1, lsl #31
   41ab0:	cmp	r0, r1, lsl #30
   41ab4:	adc	r2, r2, r2
   41ab8:	subcs	r0, r0, r1, lsl #30
   41abc:	cmp	r0, r1, lsl #29
   41ac0:	adc	r2, r2, r2
   41ac4:	subcs	r0, r0, r1, lsl #29
   41ac8:	cmp	r0, r1, lsl #28
   41acc:	adc	r2, r2, r2
   41ad0:	subcs	r0, r0, r1, lsl #28
   41ad4:	cmp	r0, r1, lsl #27
   41ad8:	adc	r2, r2, r2
   41adc:	subcs	r0, r0, r1, lsl #27
   41ae0:	cmp	r0, r1, lsl #26
   41ae4:	adc	r2, r2, r2
   41ae8:	subcs	r0, r0, r1, lsl #26
   41aec:	cmp	r0, r1, lsl #25
   41af0:	adc	r2, r2, r2
   41af4:	subcs	r0, r0, r1, lsl #25
   41af8:	cmp	r0, r1, lsl #24
   41afc:	adc	r2, r2, r2
   41b00:	subcs	r0, r0, r1, lsl #24
   41b04:	cmp	r0, r1, lsl #23
   41b08:	adc	r2, r2, r2
   41b0c:	subcs	r0, r0, r1, lsl #23
   41b10:	cmp	r0, r1, lsl #22
   41b14:	adc	r2, r2, r2
   41b18:	subcs	r0, r0, r1, lsl #22
   41b1c:	cmp	r0, r1, lsl #21
   41b20:	adc	r2, r2, r2
   41b24:	subcs	r0, r0, r1, lsl #21
   41b28:	cmp	r0, r1, lsl #20
   41b2c:	adc	r2, r2, r2
   41b30:	subcs	r0, r0, r1, lsl #20
   41b34:	cmp	r0, r1, lsl #19
   41b38:	adc	r2, r2, r2
   41b3c:	subcs	r0, r0, r1, lsl #19
   41b40:	cmp	r0, r1, lsl #18
   41b44:	adc	r2, r2, r2
   41b48:	subcs	r0, r0, r1, lsl #18
   41b4c:	cmp	r0, r1, lsl #17
   41b50:	adc	r2, r2, r2
   41b54:	subcs	r0, r0, r1, lsl #17
   41b58:	cmp	r0, r1, lsl #16
   41b5c:	adc	r2, r2, r2
   41b60:	subcs	r0, r0, r1, lsl #16
   41b64:	cmp	r0, r1, lsl #15
   41b68:	adc	r2, r2, r2
   41b6c:	subcs	r0, r0, r1, lsl #15
   41b70:	cmp	r0, r1, lsl #14
   41b74:	adc	r2, r2, r2
   41b78:	subcs	r0, r0, r1, lsl #14
   41b7c:	cmp	r0, r1, lsl #13
   41b80:	adc	r2, r2, r2
   41b84:	subcs	r0, r0, r1, lsl #13
   41b88:	cmp	r0, r1, lsl #12
   41b8c:	adc	r2, r2, r2
   41b90:	subcs	r0, r0, r1, lsl #12
   41b94:	cmp	r0, r1, lsl #11
   41b98:	adc	r2, r2, r2
   41b9c:	subcs	r0, r0, r1, lsl #11
   41ba0:	cmp	r0, r1, lsl #10
   41ba4:	adc	r2, r2, r2
   41ba8:	subcs	r0, r0, r1, lsl #10
   41bac:	cmp	r0, r1, lsl #9
   41bb0:	adc	r2, r2, r2
   41bb4:	subcs	r0, r0, r1, lsl #9
   41bb8:	cmp	r0, r1, lsl #8
   41bbc:	adc	r2, r2, r2
   41bc0:	subcs	r0, r0, r1, lsl #8
   41bc4:	cmp	r0, r1, lsl #7
   41bc8:	adc	r2, r2, r2
   41bcc:	subcs	r0, r0, r1, lsl #7
   41bd0:	cmp	r0, r1, lsl #6
   41bd4:	adc	r2, r2, r2
   41bd8:	subcs	r0, r0, r1, lsl #6
   41bdc:	cmp	r0, r1, lsl #5
   41be0:	adc	r2, r2, r2
   41be4:	subcs	r0, r0, r1, lsl #5
   41be8:	cmp	r0, r1, lsl #4
   41bec:	adc	r2, r2, r2
   41bf0:	subcs	r0, r0, r1, lsl #4
   41bf4:	cmp	r0, r1, lsl #3
   41bf8:	adc	r2, r2, r2
   41bfc:	subcs	r0, r0, r1, lsl #3
   41c00:	cmp	r0, r1, lsl #2
   41c04:	adc	r2, r2, r2
   41c08:	subcs	r0, r0, r1, lsl #2
   41c0c:	cmp	r0, r1, lsl #1
   41c10:	adc	r2, r2, r2
   41c14:	subcs	r0, r0, r1, lsl #1
   41c18:	cmp	r0, r1
   41c1c:	adc	r2, r2, r2
   41c20:	subcs	r0, r0, r1
   41c24:	mov	r0, r2
   41c28:	bx	lr
   41c2c:	moveq	r0, #1
   41c30:	movne	r0, #0
   41c34:	bx	lr
   41c38:	clz	r2, r1
   41c3c:	rsb	r2, r2, #31
   41c40:	lsr	r0, r0, r2
   41c44:	bx	lr
   41c48:	cmp	r0, #0
   41c4c:	mvnne	r0, #0
   41c50:	b	4237c <__assert_fail@plt+0x2fdb8>
   41c54:	cmp	r1, #0
   41c58:	beq	41c48 <__assert_fail@plt+0x2f684>
   41c5c:	push	{r0, r1, lr}
   41c60:	bl	41a68 <__assert_fail@plt+0x2f4a4>
   41c64:	pop	{r1, r2, lr}
   41c68:	mul	r3, r2, r0
   41c6c:	sub	r1, r1, r3
   41c70:	bx	lr
   41c74:	cmp	r1, #0
   41c78:	beq	41e84 <__assert_fail@plt+0x2f8c0>
   41c7c:	eor	ip, r0, r1
   41c80:	rsbmi	r1, r1, #0
   41c84:	subs	r2, r1, #1
   41c88:	beq	41e50 <__assert_fail@plt+0x2f88c>
   41c8c:	movs	r3, r0
   41c90:	rsbmi	r3, r0, #0
   41c94:	cmp	r3, r1
   41c98:	bls	41e5c <__assert_fail@plt+0x2f898>
   41c9c:	tst	r1, r2
   41ca0:	beq	41e6c <__assert_fail@plt+0x2f8a8>
   41ca4:	clz	r2, r3
   41ca8:	clz	r0, r1
   41cac:	sub	r2, r0, r2
   41cb0:	rsbs	r2, r2, #31
   41cb4:	addne	r2, r2, r2, lsl #1
   41cb8:	mov	r0, #0
   41cbc:	addne	pc, pc, r2, lsl #2
   41cc0:	nop			; (mov r0, r0)
   41cc4:	cmp	r3, r1, lsl #31
   41cc8:	adc	r0, r0, r0
   41ccc:	subcs	r3, r3, r1, lsl #31
   41cd0:	cmp	r3, r1, lsl #30
   41cd4:	adc	r0, r0, r0
   41cd8:	subcs	r3, r3, r1, lsl #30
   41cdc:	cmp	r3, r1, lsl #29
   41ce0:	adc	r0, r0, r0
   41ce4:	subcs	r3, r3, r1, lsl #29
   41ce8:	cmp	r3, r1, lsl #28
   41cec:	adc	r0, r0, r0
   41cf0:	subcs	r3, r3, r1, lsl #28
   41cf4:	cmp	r3, r1, lsl #27
   41cf8:	adc	r0, r0, r0
   41cfc:	subcs	r3, r3, r1, lsl #27
   41d00:	cmp	r3, r1, lsl #26
   41d04:	adc	r0, r0, r0
   41d08:	subcs	r3, r3, r1, lsl #26
   41d0c:	cmp	r3, r1, lsl #25
   41d10:	adc	r0, r0, r0
   41d14:	subcs	r3, r3, r1, lsl #25
   41d18:	cmp	r3, r1, lsl #24
   41d1c:	adc	r0, r0, r0
   41d20:	subcs	r3, r3, r1, lsl #24
   41d24:	cmp	r3, r1, lsl #23
   41d28:	adc	r0, r0, r0
   41d2c:	subcs	r3, r3, r1, lsl #23
   41d30:	cmp	r3, r1, lsl #22
   41d34:	adc	r0, r0, r0
   41d38:	subcs	r3, r3, r1, lsl #22
   41d3c:	cmp	r3, r1, lsl #21
   41d40:	adc	r0, r0, r0
   41d44:	subcs	r3, r3, r1, lsl #21
   41d48:	cmp	r3, r1, lsl #20
   41d4c:	adc	r0, r0, r0
   41d50:	subcs	r3, r3, r1, lsl #20
   41d54:	cmp	r3, r1, lsl #19
   41d58:	adc	r0, r0, r0
   41d5c:	subcs	r3, r3, r1, lsl #19
   41d60:	cmp	r3, r1, lsl #18
   41d64:	adc	r0, r0, r0
   41d68:	subcs	r3, r3, r1, lsl #18
   41d6c:	cmp	r3, r1, lsl #17
   41d70:	adc	r0, r0, r0
   41d74:	subcs	r3, r3, r1, lsl #17
   41d78:	cmp	r3, r1, lsl #16
   41d7c:	adc	r0, r0, r0
   41d80:	subcs	r3, r3, r1, lsl #16
   41d84:	cmp	r3, r1, lsl #15
   41d88:	adc	r0, r0, r0
   41d8c:	subcs	r3, r3, r1, lsl #15
   41d90:	cmp	r3, r1, lsl #14
   41d94:	adc	r0, r0, r0
   41d98:	subcs	r3, r3, r1, lsl #14
   41d9c:	cmp	r3, r1, lsl #13
   41da0:	adc	r0, r0, r0
   41da4:	subcs	r3, r3, r1, lsl #13
   41da8:	cmp	r3, r1, lsl #12
   41dac:	adc	r0, r0, r0
   41db0:	subcs	r3, r3, r1, lsl #12
   41db4:	cmp	r3, r1, lsl #11
   41db8:	adc	r0, r0, r0
   41dbc:	subcs	r3, r3, r1, lsl #11
   41dc0:	cmp	r3, r1, lsl #10
   41dc4:	adc	r0, r0, r0
   41dc8:	subcs	r3, r3, r1, lsl #10
   41dcc:	cmp	r3, r1, lsl #9
   41dd0:	adc	r0, r0, r0
   41dd4:	subcs	r3, r3, r1, lsl #9
   41dd8:	cmp	r3, r1, lsl #8
   41ddc:	adc	r0, r0, r0
   41de0:	subcs	r3, r3, r1, lsl #8
   41de4:	cmp	r3, r1, lsl #7
   41de8:	adc	r0, r0, r0
   41dec:	subcs	r3, r3, r1, lsl #7
   41df0:	cmp	r3, r1, lsl #6
   41df4:	adc	r0, r0, r0
   41df8:	subcs	r3, r3, r1, lsl #6
   41dfc:	cmp	r3, r1, lsl #5
   41e00:	adc	r0, r0, r0
   41e04:	subcs	r3, r3, r1, lsl #5
   41e08:	cmp	r3, r1, lsl #4
   41e0c:	adc	r0, r0, r0
   41e10:	subcs	r3, r3, r1, lsl #4
   41e14:	cmp	r3, r1, lsl #3
   41e18:	adc	r0, r0, r0
   41e1c:	subcs	r3, r3, r1, lsl #3
   41e20:	cmp	r3, r1, lsl #2
   41e24:	adc	r0, r0, r0
   41e28:	subcs	r3, r3, r1, lsl #2
   41e2c:	cmp	r3, r1, lsl #1
   41e30:	adc	r0, r0, r0
   41e34:	subcs	r3, r3, r1, lsl #1
   41e38:	cmp	r3, r1
   41e3c:	adc	r0, r0, r0
   41e40:	subcs	r3, r3, r1
   41e44:	cmp	ip, #0
   41e48:	rsbmi	r0, r0, #0
   41e4c:	bx	lr
   41e50:	teq	ip, r0
   41e54:	rsbmi	r0, r0, #0
   41e58:	bx	lr
   41e5c:	movcc	r0, #0
   41e60:	asreq	r0, ip, #31
   41e64:	orreq	r0, r0, #1
   41e68:	bx	lr
   41e6c:	clz	r2, r1
   41e70:	rsb	r2, r2, #31
   41e74:	cmp	ip, #0
   41e78:	lsr	r0, r3, r2
   41e7c:	rsbmi	r0, r0, #0
   41e80:	bx	lr
   41e84:	cmp	r0, #0
   41e88:	mvngt	r0, #-2147483648	; 0x80000000
   41e8c:	movlt	r0, #-2147483648	; 0x80000000
   41e90:	b	4237c <__assert_fail@plt+0x2fdb8>
   41e94:	cmp	r1, #0
   41e98:	beq	41e84 <__assert_fail@plt+0x2f8c0>
   41e9c:	push	{r0, r1, lr}
   41ea0:	bl	41c7c <__assert_fail@plt+0x2f6b8>
   41ea4:	pop	{r1, r2, lr}
   41ea8:	mul	r3, r2, r0
   41eac:	sub	r1, r1, r3
   41eb0:	bx	lr
   41eb4:	eor	r1, r1, #-2147483648	; 0x80000000
   41eb8:	b	41ec0 <__assert_fail@plt+0x2f8fc>
   41ebc:	eor	r3, r3, #-2147483648	; 0x80000000
   41ec0:	push	{r4, r5, lr}
   41ec4:	lsl	r4, r1, #1
   41ec8:	lsl	r5, r3, #1
   41ecc:	teq	r4, r5
   41ed0:	teqeq	r0, r2
   41ed4:	orrsne	ip, r4, r0
   41ed8:	orrsne	ip, r5, r2
   41edc:	mvnsne	ip, r4, asr #21
   41ee0:	mvnsne	ip, r5, asr #21
   41ee4:	beq	420d0 <__assert_fail@plt+0x2fb0c>
   41ee8:	lsr	r4, r4, #21
   41eec:	rsbs	r5, r4, r5, lsr #21
   41ef0:	rsblt	r5, r5, #0
   41ef4:	ble	41f14 <__assert_fail@plt+0x2f950>
   41ef8:	add	r4, r4, r5
   41efc:	eor	r2, r0, r2
   41f00:	eor	r3, r1, r3
   41f04:	eor	r0, r2, r0
   41f08:	eor	r1, r3, r1
   41f0c:	eor	r2, r0, r2
   41f10:	eor	r3, r1, r3
   41f14:	cmp	r5, #54	; 0x36
   41f18:	pophi	{r4, r5, pc}
   41f1c:	tst	r1, #-2147483648	; 0x80000000
   41f20:	lsl	r1, r1, #12
   41f24:	mov	ip, #1048576	; 0x100000
   41f28:	orr	r1, ip, r1, lsr #12
   41f2c:	beq	41f38 <__assert_fail@plt+0x2f974>
   41f30:	rsbs	r0, r0, #0
   41f34:	rsc	r1, r1, #0
   41f38:	tst	r3, #-2147483648	; 0x80000000
   41f3c:	lsl	r3, r3, #12
   41f40:	orr	r3, ip, r3, lsr #12
   41f44:	beq	41f50 <__assert_fail@plt+0x2f98c>
   41f48:	rsbs	r2, r2, #0
   41f4c:	rsc	r3, r3, #0
   41f50:	teq	r4, r5
   41f54:	beq	420b8 <__assert_fail@plt+0x2faf4>
   41f58:	sub	r4, r4, #1
   41f5c:	rsbs	lr, r5, #32
   41f60:	blt	41f7c <__assert_fail@plt+0x2f9b8>
   41f64:	lsl	ip, r2, lr
   41f68:	adds	r0, r0, r2, lsr r5
   41f6c:	adc	r1, r1, #0
   41f70:	adds	r0, r0, r3, lsl lr
   41f74:	adcs	r1, r1, r3, asr r5
   41f78:	b	41f98 <__assert_fail@plt+0x2f9d4>
   41f7c:	sub	r5, r5, #32
   41f80:	add	lr, lr, #32
   41f84:	cmp	r2, #1
   41f88:	lsl	ip, r3, lr
   41f8c:	orrcs	ip, ip, #2
   41f90:	adds	r0, r0, r3, asr r5
   41f94:	adcs	r1, r1, r3, asr #31
   41f98:	and	r5, r1, #-2147483648	; 0x80000000
   41f9c:	bpl	41fac <__assert_fail@plt+0x2f9e8>
   41fa0:	rsbs	ip, ip, #0
   41fa4:	rscs	r0, r0, #0
   41fa8:	rsc	r1, r1, #0
   41fac:	cmp	r1, #1048576	; 0x100000
   41fb0:	bcc	41ff0 <__assert_fail@plt+0x2fa2c>
   41fb4:	cmp	r1, #2097152	; 0x200000
   41fb8:	bcc	41fd8 <__assert_fail@plt+0x2fa14>
   41fbc:	lsrs	r1, r1, #1
   41fc0:	rrxs	r0, r0
   41fc4:	rrx	ip, ip
   41fc8:	add	r4, r4, #1
   41fcc:	lsl	r2, r4, #21
   41fd0:	cmn	r2, #4194304	; 0x400000
   41fd4:	bcs	42130 <__assert_fail@plt+0x2fb6c>
   41fd8:	cmp	ip, #-2147483648	; 0x80000000
   41fdc:	lsrseq	ip, r0, #1
   41fe0:	adcs	r0, r0, #0
   41fe4:	adc	r1, r1, r4, lsl #20
   41fe8:	orr	r1, r1, r5
   41fec:	pop	{r4, r5, pc}
   41ff0:	lsls	ip, ip, #1
   41ff4:	adcs	r0, r0, r0
   41ff8:	adc	r1, r1, r1
   41ffc:	tst	r1, #1048576	; 0x100000
   42000:	sub	r4, r4, #1
   42004:	bne	41fd8 <__assert_fail@plt+0x2fa14>
   42008:	teq	r1, #0
   4200c:	moveq	r1, r0
   42010:	moveq	r0, #0
   42014:	clz	r3, r1
   42018:	addeq	r3, r3, #32
   4201c:	sub	r3, r3, #11
   42020:	subs	r2, r3, #32
   42024:	bge	42048 <__assert_fail@plt+0x2fa84>
   42028:	adds	r2, r2, #12
   4202c:	ble	42044 <__assert_fail@plt+0x2fa80>
   42030:	add	ip, r2, #20
   42034:	rsb	r2, r2, #12
   42038:	lsl	r0, r1, ip
   4203c:	lsr	r1, r1, r2
   42040:	b	42058 <__assert_fail@plt+0x2fa94>
   42044:	add	r2, r2, #20
   42048:	rsble	ip, r2, #32
   4204c:	lsl	r1, r1, r2
   42050:	orrle	r1, r1, r0, lsr ip
   42054:	lslle	r0, r0, r2
   42058:	subs	r4, r4, r3
   4205c:	addge	r1, r1, r4, lsl #20
   42060:	orrge	r1, r1, r5
   42064:	popge	{r4, r5, pc}
   42068:	mvn	r4, r4
   4206c:	subs	r4, r4, #31
   42070:	bge	420ac <__assert_fail@plt+0x2fae8>
   42074:	adds	r4, r4, #12
   42078:	bgt	42094 <__assert_fail@plt+0x2fad0>
   4207c:	add	r4, r4, #20
   42080:	rsb	r2, r4, #32
   42084:	lsr	r0, r0, r4
   42088:	orr	r0, r0, r1, lsl r2
   4208c:	orr	r1, r5, r1, lsr r4
   42090:	pop	{r4, r5, pc}
   42094:	rsb	r4, r4, #12
   42098:	rsb	r2, r4, #32
   4209c:	lsr	r0, r0, r2
   420a0:	orr	r0, r0, r1, lsl r4
   420a4:	mov	r1, r5
   420a8:	pop	{r4, r5, pc}
   420ac:	lsr	r0, r1, r4
   420b0:	mov	r1, r5
   420b4:	pop	{r4, r5, pc}
   420b8:	teq	r4, #0
   420bc:	eor	r3, r3, #1048576	; 0x100000
   420c0:	eoreq	r1, r1, #1048576	; 0x100000
   420c4:	addeq	r4, r4, #1
   420c8:	subne	r5, r5, #1
   420cc:	b	41f58 <__assert_fail@plt+0x2f994>
   420d0:	mvns	ip, r4, asr #21
   420d4:	mvnsne	ip, r5, asr #21
   420d8:	beq	42140 <__assert_fail@plt+0x2fb7c>
   420dc:	teq	r4, r5
   420e0:	teqeq	r0, r2
   420e4:	beq	420f8 <__assert_fail@plt+0x2fb34>
   420e8:	orrs	ip, r4, r0
   420ec:	moveq	r1, r3
   420f0:	moveq	r0, r2
   420f4:	pop	{r4, r5, pc}
   420f8:	teq	r1, r3
   420fc:	movne	r1, #0
   42100:	movne	r0, #0
   42104:	popne	{r4, r5, pc}
   42108:	lsrs	ip, r4, #21
   4210c:	bne	42120 <__assert_fail@plt+0x2fb5c>
   42110:	lsls	r0, r0, #1
   42114:	adcs	r1, r1, r1
   42118:	orrcs	r1, r1, #-2147483648	; 0x80000000
   4211c:	pop	{r4, r5, pc}
   42120:	adds	r4, r4, #4194304	; 0x400000
   42124:	addcc	r1, r1, #1048576	; 0x100000
   42128:	popcc	{r4, r5, pc}
   4212c:	and	r5, r1, #-2147483648	; 0x80000000
   42130:	orr	r1, r5, #2130706432	; 0x7f000000
   42134:	orr	r1, r1, #15728640	; 0xf00000
   42138:	mov	r0, #0
   4213c:	pop	{r4, r5, pc}
   42140:	mvns	ip, r4, asr #21
   42144:	movne	r1, r3
   42148:	movne	r0, r2
   4214c:	mvnseq	ip, r5, asr #21
   42150:	movne	r3, r1
   42154:	movne	r2, r0
   42158:	orrs	r4, r0, r1, lsl #12
   4215c:	orrseq	r5, r2, r3, lsl #12
   42160:	teqeq	r1, r3
   42164:	orrne	r1, r1, #524288	; 0x80000
   42168:	pop	{r4, r5, pc}
   4216c:	teq	r0, #0
   42170:	moveq	r1, #0
   42174:	bxeq	lr
   42178:	push	{r4, r5, lr}
   4217c:	mov	r4, #1024	; 0x400
   42180:	add	r4, r4, #50	; 0x32
   42184:	mov	r5, #0
   42188:	mov	r1, #0
   4218c:	b	42008 <__assert_fail@plt+0x2fa44>
   42190:	teq	r0, #0
   42194:	moveq	r1, #0
   42198:	bxeq	lr
   4219c:	push	{r4, r5, lr}
   421a0:	mov	r4, #1024	; 0x400
   421a4:	add	r4, r4, #50	; 0x32
   421a8:	ands	r5, r0, #-2147483648	; 0x80000000
   421ac:	rsbmi	r0, r0, #0
   421b0:	mov	r1, #0
   421b4:	b	42008 <__assert_fail@plt+0x2fa44>
   421b8:	lsls	r2, r0, #1
   421bc:	asr	r1, r2, #3
   421c0:	rrx	r1, r1
   421c4:	lsl	r0, r2, #28
   421c8:	andsne	r3, r2, #-16777216	; 0xff000000
   421cc:	teqne	r3, #-16777216	; 0xff000000
   421d0:	eorne	r1, r1, #939524096	; 0x38000000
   421d4:	bxne	lr
   421d8:	teq	r2, #0
   421dc:	teqne	r3, #-16777216	; 0xff000000
   421e0:	bxeq	lr
   421e4:	push	{r4, r5, lr}
   421e8:	mov	r4, #896	; 0x380
   421ec:	and	r5, r1, #-2147483648	; 0x80000000
   421f0:	bic	r1, r1, #-2147483648	; 0x80000000
   421f4:	b	42008 <__assert_fail@plt+0x2fa44>
   421f8:	orrs	r2, r0, r1
   421fc:	bxeq	lr
   42200:	push	{r4, r5, lr}
   42204:	mov	r5, #0
   42208:	b	42228 <__assert_fail@plt+0x2fc64>
   4220c:	orrs	r2, r0, r1
   42210:	bxeq	lr
   42214:	push	{r4, r5, lr}
   42218:	ands	r5, r1, #-2147483648	; 0x80000000
   4221c:	bpl	42228 <__assert_fail@plt+0x2fc64>
   42220:	rsbs	r0, r0, #0
   42224:	rsc	r1, r1, #0
   42228:	mov	r4, #1024	; 0x400
   4222c:	add	r4, r4, #50	; 0x32
   42230:	lsrs	ip, r1, #22
   42234:	beq	41fac <__assert_fail@plt+0x2f9e8>
   42238:	mov	r2, #3
   4223c:	lsrs	ip, ip, #3
   42240:	addne	r2, r2, #3
   42244:	lsrs	ip, ip, #3
   42248:	addne	r2, r2, #3
   4224c:	add	r2, r2, ip, lsr #3
   42250:	rsb	r3, r2, #32
   42254:	lsl	ip, r0, r3
   42258:	lsr	r0, r0, r2
   4225c:	orr	r0, r0, r1, lsl r3
   42260:	lsr	r1, r1, r2
   42264:	add	r4, r4, r2
   42268:	b	41fac <__assert_fail@plt+0x2f9e8>
   4226c:	cmp	r3, #0
   42270:	cmpeq	r2, #0
   42274:	bne	42298 <__assert_fail@plt+0x2fcd4>
   42278:	cmp	r1, #0
   4227c:	movlt	r1, #-2147483648	; 0x80000000
   42280:	movlt	r0, #0
   42284:	blt	42294 <__assert_fail@plt+0x2fcd0>
   42288:	cmpeq	r0, #0
   4228c:	mvnne	r1, #-2147483648	; 0x80000000
   42290:	mvnne	r0, #0
   42294:	b	4237c <__assert_fail@plt+0x2fdb8>
   42298:	sub	sp, sp, #8
   4229c:	push	{sp, lr}
   422a0:	cmp	r1, #0
   422a4:	blt	422c4 <__assert_fail@plt+0x2fd00>
   422a8:	cmp	r3, #0
   422ac:	blt	422f8 <__assert_fail@plt+0x2fd34>
   422b0:	bl	423d8 <__assert_fail@plt+0x2fe14>
   422b4:	ldr	lr, [sp, #4]
   422b8:	add	sp, sp, #8
   422bc:	pop	{r2, r3}
   422c0:	bx	lr
   422c4:	rsbs	r0, r0, #0
   422c8:	sbc	r1, r1, r1, lsl #1
   422cc:	cmp	r3, #0
   422d0:	blt	4231c <__assert_fail@plt+0x2fd58>
   422d4:	bl	423d8 <__assert_fail@plt+0x2fe14>
   422d8:	ldr	lr, [sp, #4]
   422dc:	add	sp, sp, #8
   422e0:	pop	{r2, r3}
   422e4:	rsbs	r0, r0, #0
   422e8:	sbc	r1, r1, r1, lsl #1
   422ec:	rsbs	r2, r2, #0
   422f0:	sbc	r3, r3, r3, lsl #1
   422f4:	bx	lr
   422f8:	rsbs	r2, r2, #0
   422fc:	sbc	r3, r3, r3, lsl #1
   42300:	bl	423d8 <__assert_fail@plt+0x2fe14>
   42304:	ldr	lr, [sp, #4]
   42308:	add	sp, sp, #8
   4230c:	pop	{r2, r3}
   42310:	rsbs	r0, r0, #0
   42314:	sbc	r1, r1, r1, lsl #1
   42318:	bx	lr
   4231c:	rsbs	r2, r2, #0
   42320:	sbc	r3, r3, r3, lsl #1
   42324:	bl	423d8 <__assert_fail@plt+0x2fe14>
   42328:	ldr	lr, [sp, #4]
   4232c:	add	sp, sp, #8
   42330:	pop	{r2, r3}
   42334:	rsbs	r2, r2, #0
   42338:	sbc	r3, r3, r3, lsl #1
   4233c:	bx	lr
   42340:	cmp	r3, #0
   42344:	cmpeq	r2, #0
   42348:	bne	42360 <__assert_fail@plt+0x2fd9c>
   4234c:	cmp	r1, #0
   42350:	cmpeq	r0, #0
   42354:	mvnne	r1, #0
   42358:	mvnne	r0, #0
   4235c:	b	4237c <__assert_fail@plt+0x2fdb8>
   42360:	sub	sp, sp, #8
   42364:	push	{sp, lr}
   42368:	bl	423d8 <__assert_fail@plt+0x2fe14>
   4236c:	ldr	lr, [sp, #4]
   42370:	add	sp, sp, #8
   42374:	pop	{r2, r3}
   42378:	bx	lr
   4237c:	push	{r1, lr}
   42380:	mov	r0, #8
   42384:	bl	11ec8 <raise@plt>
   42388:	pop	{r1, pc}
   4238c:	andeq	r0, r0, r0
   42390:	vmov	d7, r0, r1
   42394:	vldr	d6, [pc, #44]	; 423c8 <__assert_fail@plt+0x2fe04>
   42398:	vldr	d5, [pc, #48]	; 423d0 <__assert_fail@plt+0x2fe0c>
   4239c:	mov	r0, #0
   423a0:	vmul.f64	d6, d7, d6
   423a4:	vcvt.u32.f64	s12, d6
   423a8:	vcvt.f64.u32	d4, s12
   423ac:	vmov	r1, s12
   423b0:	vmls.f64	d7, d4, d5
   423b4:	vcvt.u32.f64	s14, d7
   423b8:	vmov	r3, s14
   423bc:	orr	r0, r0, r3
   423c0:	bx	lr
   423c4:	nop			; (mov r0, r0)
   423c8:	andeq	r0, r0, r0
   423cc:	ldclcc	0, cr0, [r0]
   423d0:	andeq	r0, r0, r0
   423d4:	mvnsmi	r0, r0
   423d8:	cmp	r1, r3
   423dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   423e0:	cmpeq	r0, r2
   423e4:	mov	r4, r0
   423e8:	mov	r5, r1
   423ec:	ldr	r9, [sp, #28]
   423f0:	movcc	r0, #0
   423f4:	movcc	r1, #0
   423f8:	bcc	424f0 <__assert_fail@plt+0x2ff2c>
   423fc:	cmp	r3, #0
   42400:	clzeq	ip, r2
   42404:	clzne	ip, r3
   42408:	addeq	ip, ip, #32
   4240c:	cmp	r5, #0
   42410:	clzeq	r1, r4
   42414:	addeq	r1, r1, #32
   42418:	clzne	r1, r5
   4241c:	sub	ip, ip, r1
   42420:	sub	lr, ip, #32
   42424:	lsl	r7, r3, ip
   42428:	rsb	r8, ip, #32
   4242c:	orr	r7, r7, r2, lsl lr
   42430:	orr	r7, r7, r2, lsr r8
   42434:	lsl	r6, r2, ip
   42438:	cmp	r5, r7
   4243c:	cmpeq	r4, r6
   42440:	movcc	r0, #0
   42444:	movcc	r1, #0
   42448:	bcc	42464 <__assert_fail@plt+0x2fea0>
   4244c:	mov	r3, #1
   42450:	subs	r4, r4, r6
   42454:	lsl	r1, r3, lr
   42458:	lsl	r0, r3, ip
   4245c:	orr	r1, r1, r3, lsr r8
   42460:	sbc	r5, r5, r7
   42464:	cmp	ip, #0
   42468:	beq	424f0 <__assert_fail@plt+0x2ff2c>
   4246c:	lsrs	r3, r7, #1
   42470:	rrx	r2, r6
   42474:	mov	r6, ip
   42478:	b	4249c <__assert_fail@plt+0x2fed8>
   4247c:	subs	r4, r4, r2
   42480:	sbc	r5, r5, r3
   42484:	adds	r4, r4, r4
   42488:	adc	r5, r5, r5
   4248c:	adds	r4, r4, #1
   42490:	adc	r5, r5, #0
   42494:	subs	r6, r6, #1
   42498:	beq	424b8 <__assert_fail@plt+0x2fef4>
   4249c:	cmp	r5, r3
   424a0:	cmpeq	r4, r2
   424a4:	bcs	4247c <__assert_fail@plt+0x2feb8>
   424a8:	adds	r4, r4, r4
   424ac:	adc	r5, r5, r5
   424b0:	subs	r6, r6, #1
   424b4:	bne	4249c <__assert_fail@plt+0x2fed8>
   424b8:	lsr	r6, r4, ip
   424bc:	lsr	r7, r5, ip
   424c0:	orr	r6, r6, r5, lsl r8
   424c4:	adds	r2, r0, r4
   424c8:	orr	r6, r6, r5, lsr lr
   424cc:	adc	r3, r1, r5
   424d0:	lsl	r1, r7, ip
   424d4:	orr	r1, r1, r6, lsl lr
   424d8:	lsl	r0, r6, ip
   424dc:	orr	r1, r1, r6, lsr r8
   424e0:	subs	r0, r2, r0
   424e4:	mov	r4, r6
   424e8:	mov	r5, r7
   424ec:	sbc	r1, r3, r1
   424f0:	cmp	r9, #0
   424f4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   424f8:	strd	r4, [r9]
   424fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   42500:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   42504:	mov	r7, r0
   42508:	ldr	r6, [pc, #72]	; 42558 <__assert_fail@plt+0x2ff94>
   4250c:	ldr	r5, [pc, #72]	; 4255c <__assert_fail@plt+0x2ff98>
   42510:	add	r6, pc, r6
   42514:	add	r5, pc, r5
   42518:	sub	r6, r6, r5
   4251c:	mov	r8, r1
   42520:	mov	r9, r2
   42524:	bl	11e60 <pthread_mutex_unlock@plt-0x20>
   42528:	asrs	r6, r6, #2
   4252c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   42530:	mov	r4, #0
   42534:	add	r4, r4, #1
   42538:	ldr	r3, [r5], #4
   4253c:	mov	r2, r9
   42540:	mov	r1, r8
   42544:	mov	r0, r7
   42548:	blx	r3
   4254c:	cmp	r6, r4
   42550:	bne	42534 <__assert_fail@plt+0x2ff70>
   42554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   42558:	andeq	r6, r1, r8, ror #19
   4255c:	andeq	r6, r1, r0, ror #19
   42560:	bx	lr
   42564:	ldr	r3, [pc, #12]	; 42578 <__assert_fail@plt+0x2ffb4>
   42568:	mov	r1, #0
   4256c:	add	r3, pc, r3
   42570:	ldr	r2, [r3]
   42574:	b	1233c <__cxa_atexit@plt>
   42578:	andeq	r6, r1, r0, lsl sp

Disassembly of section .fini:

0004257c <.fini>:
   4257c:	push	{r3, lr}
   42580:	pop	{r3, pc}
