
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

00010f90 <.init>:
   10f90:	push	{r3, lr}
   10f94:	bl	112a4 <__assert_fail@plt+0x48>
   10f98:	pop	{r3, pc}

Disassembly of section .plt:

00010f9c <fdopen@plt-0x14>:
   10f9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10fa0:	ldr	lr, [pc, #4]	; 10fac <fdopen@plt-0x4>
   10fa4:	add	lr, pc, lr
   10fa8:	ldr	pc, [lr, #8]!
   10fac:	andeq	r9, r1, r4, asr r0

00010fb0 <fdopen@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #84]!	; 0x54

00010fbc <calloc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #76]!	; 0x4c

00010fc8 <fputs_unlocked@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #68]!	; 0x44

00010fd4 <raise@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #60]!	; 0x3c

00010fe0 <strcmp@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #52]!	; 0x34

00010fec <posix_fadvise64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #44]!	; 0x2c

00010ff8 <fflush@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #36]!	; 0x24

00011004 <free@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #28]!

00011010 <_exit@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #20]!

0001101c <memcpy@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #12]!

00011028 <__strtoull_internal@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #4]!

00011034 <mbsinit@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #4092]!	; 0xffc

00011040 <fwrite_unlocked@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #4084]!	; 0xff4

0001104c <memcmp@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #4076]!	; 0xfec

00011058 <dcgettext@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #4068]!	; 0xfe4

00011064 <realloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011070 <textdomain@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #4052]!	; 0xfd4

0001107c <iswprint@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #4044]!	; 0xfcc

00011088 <fwrite@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #4036]!	; 0xfc4

00011094 <lseek64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a0 <__ctype_get_mb_cur_max@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110ac <__fpending@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #4012]!	; 0xfac

000110b8 <mbrtowc@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110c4 <error@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #24, 20	; 0x18000
   110cc:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d0 <strcoll@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #24, 20	; 0x18000
   110d8:	ldr	pc, [ip, #3988]!	; 0xf94

000110dc <malloc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #24, 20	; 0x18000
   110e4:	ldr	pc, [ip, #3980]!	; 0xf8c

000110e8 <__libc_start_main@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #24, 20	; 0x18000
   110f0:	ldr	pc, [ip, #3972]!	; 0xf84

000110f4 <__freading@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #24, 20	; 0x18000
   110fc:	ldr	pc, [ip, #3964]!	; 0xf7c

00011100 <__ctype_toupper_loc@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #24, 20	; 0x18000
   11108:	ldr	pc, [ip, #3956]!	; 0xf74

0001110c <__gmon_start__@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #24, 20	; 0x18000
   11114:	ldr	pc, [ip, #3948]!	; 0xf6c

00011118 <getopt_long@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #24, 20	; 0x18000
   11120:	ldr	pc, [ip, #3940]!	; 0xf64

00011124 <__ctype_b_loc@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #24, 20	; 0x18000
   1112c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011130 <exit@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #24, 20	; 0x18000
   11138:	ldr	pc, [ip, #3924]!	; 0xf54

0001113c <strtoul@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #24, 20	; 0x18000
   11144:	ldr	pc, [ip, #3916]!	; 0xf4c

00011148 <strlen@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #24, 20	; 0x18000
   11150:	ldr	pc, [ip, #3908]!	; 0xf44

00011154 <strchr@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #24, 20	; 0x18000
   1115c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011160 <__errno_location@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3892]!	; 0xf34

0001116c <__cxa_atexit@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3884]!	; 0xf2c

00011178 <memset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3876]!	; 0xf24

00011184 <__printf_chk@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011190 <fileno@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #24, 20	; 0x18000
   11198:	ldr	pc, [ip, #3860]!	; 0xf14

0001119c <__fprintf_chk@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #24, 20	; 0x18000
   111a4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111a8 <memchr@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #24, 20	; 0x18000
   111b0:	ldr	pc, [ip, #3844]!	; 0xf04

000111b4 <fclose@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #24, 20	; 0x18000
   111bc:	ldr	pc, [ip, #3836]!	; 0xefc

000111c0 <fseeko64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #24, 20	; 0x18000
   111c8:	ldr	pc, [ip, #3828]!	; 0xef4

000111cc <fcntl64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #24, 20	; 0x18000
   111d4:	ldr	pc, [ip, #3820]!	; 0xeec

000111d8 <__uflow@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #24, 20	; 0x18000
   111e0:	ldr	pc, [ip, #3812]!	; 0xee4

000111e4 <__overflow@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #24, 20	; 0x18000
   111ec:	ldr	pc, [ip, #3804]!	; 0xedc

000111f0 <setlocale@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #24, 20	; 0x18000
   111f8:	ldr	pc, [ip, #3796]!	; 0xed4

000111fc <strrchr@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #24, 20	; 0x18000
   11204:	ldr	pc, [ip, #3788]!	; 0xecc

00011208 <nl_langinfo@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #24, 20	; 0x18000
   11210:	ldr	pc, [ip, #3780]!	; 0xec4

00011214 <fopen64@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #24, 20	; 0x18000
   1121c:	ldr	pc, [ip, #3772]!	; 0xebc

00011220 <strpbrk@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #24, 20	; 0x18000
   11228:	ldr	pc, [ip, #3764]!	; 0xeb4

0001122c <bindtextdomain@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #24, 20	; 0x18000
   11234:	ldr	pc, [ip, #3756]!	; 0xeac

00011238 <strncmp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #24, 20	; 0x18000
   11240:	ldr	pc, [ip, #3748]!	; 0xea4

00011244 <abort@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #24, 20	; 0x18000
   1124c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011250 <close@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #24, 20	; 0x18000
   11258:	ldr	pc, [ip, #3732]!	; 0xe94

0001125c <__assert_fail@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #24, 20	; 0x18000
   11264:	ldr	pc, [ip, #3724]!	; 0xe8c

Disassembly of section .text:

00011268 <.text>:
   11268:	mov	fp, #0
   1126c:	mov	lr, #0
   11270:	pop	{r1}		; (ldr r1, [sp], #4)
   11274:	mov	r2, sp
   11278:	push	{r2}		; (str r2, [sp, #-4]!)
   1127c:	push	{r0}		; (str r0, [sp, #-4]!)
   11280:	ldr	ip, [pc, #16]	; 11298 <__assert_fail@plt+0x3c>
   11284:	push	{ip}		; (str ip, [sp, #-4]!)
   11288:	ldr	r0, [pc, #12]	; 1129c <__assert_fail@plt+0x40>
   1128c:	ldr	r3, [pc, #12]	; 112a0 <__assert_fail@plt+0x44>
   11290:	bl	110e8 <__libc_start_main@plt>
   11294:	bl	11244 <abort@plt>
   11298:	andeq	r8, r1, r4, lsr #22
   1129c:	andeq	r1, r1, r4, asr #12
   112a0:	andeq	r8, r1, r4, asr #21
   112a4:	ldr	r3, [pc, #20]	; 112c0 <__assert_fail@plt+0x64>
   112a8:	ldr	r2, [pc, #20]	; 112c4 <__assert_fail@plt+0x68>
   112ac:	add	r3, pc, r3
   112b0:	ldr	r2, [r3, r2]
   112b4:	cmp	r2, #0
   112b8:	bxeq	lr
   112bc:	b	1110c <__gmon_start__@plt>
   112c0:	andeq	r8, r1, ip, asr #26
   112c4:	strdeq	r0, [r0], -r4
   112c8:	ldr	r0, [pc, #24]	; 112e8 <__assert_fail@plt+0x8c>
   112cc:	ldr	r3, [pc, #24]	; 112ec <__assert_fail@plt+0x90>
   112d0:	cmp	r3, r0
   112d4:	bxeq	lr
   112d8:	ldr	r3, [pc, #16]	; 112f0 <__assert_fail@plt+0x94>
   112dc:	cmp	r3, #0
   112e0:	bxeq	lr
   112e4:	bx	r3
   112e8:	andeq	sl, r2, r8, asr r1
   112ec:	andeq	sl, r2, r8, asr r1
   112f0:	andeq	r0, r0, r0
   112f4:	ldr	r0, [pc, #36]	; 11320 <__assert_fail@plt+0xc4>
   112f8:	ldr	r1, [pc, #36]	; 11324 <__assert_fail@plt+0xc8>
   112fc:	sub	r1, r1, r0
   11300:	asr	r1, r1, #2
   11304:	add	r1, r1, r1, lsr #31
   11308:	asrs	r1, r1, #1
   1130c:	bxeq	lr
   11310:	ldr	r3, [pc, #16]	; 11328 <__assert_fail@plt+0xcc>
   11314:	cmp	r3, #0
   11318:	bxeq	lr
   1131c:	bx	r3
   11320:	andeq	sl, r2, r8, asr r1
   11324:	andeq	sl, r2, r8, asr r1
   11328:	andeq	r0, r0, r0
   1132c:	push	{r4, lr}
   11330:	ldr	r4, [pc, #24]	; 11350 <__assert_fail@plt+0xf4>
   11334:	ldrb	r3, [r4]
   11338:	cmp	r3, #0
   1133c:	popne	{r4, pc}
   11340:	bl	112c8 <__assert_fail@plt+0x6c>
   11344:	mov	r3, #1
   11348:	strb	r3, [r4]
   1134c:	pop	{r4, pc}
   11350:	andeq	sl, r2, ip, ror r1
   11354:	b	112f4 <__assert_fail@plt+0x98>
   11358:	push	{fp, lr}
   1135c:	mov	fp, sp
   11360:	sub	sp, sp, #56	; 0x38
   11364:	mov	r4, r0
   11368:	cmp	r0, #0
   1136c:	bne	11600 <__assert_fail@plt+0x3a4>
   11370:	movw	r1, #35699	; 0x8b73
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	movt	r1, #1
   11380:	bl	11058 <dcgettext@plt>
   11384:	mov	r1, r0
   11388:	movw	r0, #41464	; 0xa1f8
   1138c:	movt	r0, #2
   11390:	ldr	r2, [r0]
   11394:	mov	r0, #1
   11398:	bl	11184 <__printf_chk@plt>
   1139c:	movw	r1, #35734	; 0x8b96
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	movt	r1, #1
   113ac:	bl	11058 <dcgettext@plt>
   113b0:	movw	r7, #41332	; 0xa174
   113b4:	movt	r7, #2
   113b8:	ldr	r1, [r7]
   113bc:	bl	10fc8 <fputs_unlocked@plt>
   113c0:	movw	r1, #35884	; 0x8c2c
   113c4:	mov	r0, #0
   113c8:	mov	r2, #5
   113cc:	movt	r1, #1
   113d0:	bl	11058 <dcgettext@plt>
   113d4:	ldr	r1, [r7]
   113d8:	bl	10fc8 <fputs_unlocked@plt>
   113dc:	movw	r1, #35944	; 0x8c68
   113e0:	mov	r0, #0
   113e4:	mov	r2, #5
   113e8:	movt	r1, #1
   113ec:	bl	11058 <dcgettext@plt>
   113f0:	ldr	r1, [r7]
   113f4:	bl	10fc8 <fputs_unlocked@plt>
   113f8:	movw	r1, #36167	; 0x8d47
   113fc:	mov	r0, #0
   11400:	mov	r2, #5
   11404:	movt	r1, #1
   11408:	bl	11058 <dcgettext@plt>
   1140c:	ldr	r1, [r7]
   11410:	bl	10fc8 <fputs_unlocked@plt>
   11414:	movw	r1, #36439	; 0x8e57
   11418:	mov	r0, #0
   1141c:	mov	r2, #5
   11420:	movt	r1, #1
   11424:	bl	11058 <dcgettext@plt>
   11428:	ldr	r1, [r7]
   1142c:	bl	10fc8 <fputs_unlocked@plt>
   11430:	movw	r1, #36970	; 0x906a
   11434:	mov	r0, #0
   11438:	mov	r2, #5
   1143c:	movt	r1, #1
   11440:	bl	11058 <dcgettext@plt>
   11444:	ldr	r1, [r7]
   11448:	bl	10fc8 <fputs_unlocked@plt>
   1144c:	movw	r1, #37031	; 0x90a7
   11450:	mov	r0, #0
   11454:	mov	r2, #5
   11458:	movt	r1, #1
   1145c:	bl	11058 <dcgettext@plt>
   11460:	ldr	r1, [r7]
   11464:	bl	10fc8 <fputs_unlocked@plt>
   11468:	movw	r1, #37076	; 0x90d4
   1146c:	mov	r0, #0
   11470:	mov	r2, #5
   11474:	movt	r1, #1
   11478:	bl	11058 <dcgettext@plt>
   1147c:	ldr	r1, [r7]
   11480:	bl	10fc8 <fputs_unlocked@plt>
   11484:	movw	r1, #37130	; 0x910a
   11488:	mov	r0, #0
   1148c:	mov	r2, #5
   11490:	movt	r1, #1
   11494:	bl	11058 <dcgettext@plt>
   11498:	ldr	r1, [r7]
   1149c:	bl	10fc8 <fputs_unlocked@plt>
   114a0:	movw	r0, #38912	; 0x9800
   114a4:	mov	r2, #48	; 0x30
   114a8:	mov	r6, sp
   114ac:	movw	r5, #37948	; 0x943c
   114b0:	movt	r0, #1
   114b4:	movt	r5, #1
   114b8:	add	r1, r0, #32
   114bc:	add	r3, r0, #16
   114c0:	vld1.64	{d18-d19}, [r0], r2
   114c4:	vld1.64	{d16-d17}, [r1]
   114c8:	vld1.64	{d20-d21}, [r3]
   114cc:	add	r1, r6, #32
   114d0:	vldr	d22, [r0]
   114d4:	add	r0, r6, #16
   114d8:	vst1.64	{d16-d17}, [r1]
   114dc:	movw	r1, #38248	; 0x9568
   114e0:	vst1.64	{d20-d21}, [r0]
   114e4:	mov	r0, r6
   114e8:	vst1.64	{d18-d19}, [r0], r2
   114ec:	movt	r1, #1
   114f0:	vstr	d22, [r0]
   114f4:	mov	r0, r5
   114f8:	bl	10fe0 <strcmp@plt>
   114fc:	cmp	r0, #0
   11500:	ldrne	r1, [r6, #8]!
   11504:	cmpne	r1, #0
   11508:	bne	114f4 <__assert_fail@plt+0x298>
   1150c:	ldr	r6, [r6, #4]
   11510:	movw	r1, #38343	; 0x95c7
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11058 <dcgettext@plt>
   11524:	movw	r2, #38115	; 0x94e3
   11528:	movw	r3, #38366	; 0x95de
   1152c:	mov	r1, r0
   11530:	mov	r0, #1
   11534:	movt	r2, #1
   11538:	movt	r3, #1
   1153c:	bl	11184 <__printf_chk@plt>
   11540:	cmp	r6, #0
   11544:	mov	r0, #5
   11548:	mov	r1, #0
   1154c:	moveq	r6, r5
   11550:	bl	111f0 <setlocale@plt>
   11554:	cmp	r0, #0
   11558:	beq	11590 <__assert_fail@plt+0x334>
   1155c:	movw	r1, #38406	; 0x9606
   11560:	mov	r2, #3
   11564:	movt	r1, #1
   11568:	bl	11238 <strncmp@plt>
   1156c:	cmp	r0, #0
   11570:	beq	11590 <__assert_fail@plt+0x334>
   11574:	movw	r1, #38410	; 0x960a
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	11058 <dcgettext@plt>
   11588:	ldr	r1, [r7]
   1158c:	bl	10fc8 <fputs_unlocked@plt>
   11590:	movw	r1, #38481	; 0x9651
   11594:	mov	r0, #0
   11598:	mov	r2, #5
   1159c:	movt	r1, #1
   115a0:	bl	11058 <dcgettext@plt>
   115a4:	movw	r2, #38366	; 0x95de
   115a8:	mov	r1, r0
   115ac:	mov	r0, #1
   115b0:	mov	r3, r5
   115b4:	movt	r2, #1
   115b8:	bl	11184 <__printf_chk@plt>
   115bc:	movw	r1, #38508	; 0x966c
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	movt	r1, #1
   115cc:	bl	11058 <dcgettext@plt>
   115d0:	movw	r3, #38658	; 0x9702
   115d4:	mov	r1, r0
   115d8:	movw	r0, #38276	; 0x9584
   115dc:	cmp	r6, r5
   115e0:	mov	r2, r6
   115e4:	movt	r0, #1
   115e8:	movt	r3, #1
   115ec:	moveq	r3, r0
   115f0:	mov	r0, #1
   115f4:	bl	11184 <__printf_chk@plt>
   115f8:	mov	r0, r4
   115fc:	bl	11130 <exit@plt>
   11600:	movw	r0, #41320	; 0xa168
   11604:	movw	r1, #35660	; 0x8b4c
   11608:	mov	r2, #5
   1160c:	movt	r0, #2
   11610:	movt	r1, #1
   11614:	ldr	r5, [r0]
   11618:	mov	r0, #0
   1161c:	bl	11058 <dcgettext@plt>
   11620:	mov	r2, r0
   11624:	movw	r0, #41464	; 0xa1f8
   11628:	mov	r1, #1
   1162c:	movt	r0, #2
   11630:	ldr	r3, [r0]
   11634:	mov	r0, r5
   11638:	bl	1119c <__fprintf_chk@plt>
   1163c:	mov	r0, r4
   11640:	bl	11130 <exit@plt>
   11644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11648:	add	fp, sp, #28
   1164c:	sub	sp, sp, #84	; 0x54
   11650:	mov	r9, #0
   11654:	mov	r6, r0
   11658:	mov	r8, r1
   1165c:	str	r9, [sp, #48]	; 0x30
   11660:	str	r9, [sp, #36]	; 0x24
   11664:	str	r9, [sp, #32]
   11668:	str	r9, [sp, #28]
   1166c:	ldr	r0, [r1]
   11670:	bl	14238 <__assert_fail@plt+0x2fdc>
   11674:	movw	sl, #38658	; 0x9702
   11678:	mov	r0, #6
   1167c:	movt	sl, #1
   11680:	mov	r1, sl
   11684:	bl	111f0 <setlocale@plt>
   11688:	movw	r5, #38119	; 0x94e7
   1168c:	movw	r1, #37953	; 0x9441
   11690:	movt	r5, #1
   11694:	movt	r1, #1
   11698:	mov	r0, r5
   1169c:	bl	1122c <bindtextdomain@plt>
   116a0:	mov	r0, r5
   116a4:	bl	11070 <textdomain@plt>
   116a8:	mov	r0, #3
   116ac:	bl	13f8c <__assert_fail@plt+0x2d30>
   116b0:	movw	r1, #41344	; 0xa180
   116b4:	movt	r1, #2
   116b8:	strb	r0, [r1]
   116bc:	movw	r0, #15340	; 0x3bec
   116c0:	movt	r0, #1
   116c4:	bl	18b28 <__assert_fail@plt+0x78cc>
   116c8:	movw	r0, #11348	; 0x2c54
   116cc:	movt	r0, #1
   116d0:	bl	18b28 <__assert_fail@plt+0x78cc>
   116d4:	movw	r0, #41345	; 0xa181
   116d8:	mov	r4, #1
   116dc:	movw	r2, #37977	; 0x9459
   116e0:	movw	r3, #38784	; 0x9780
   116e4:	mov	r1, r8
   116e8:	str	r9, [sp]
   116ec:	movt	r0, #2
   116f0:	movt	r2, #1
   116f4:	movt	r3, #1
   116f8:	strb	r4, [r0]
   116fc:	movw	r0, #41346	; 0xa182
   11700:	movt	r0, #2
   11704:	strb	r9, [r0]
   11708:	movw	r0, #41347	; 0xa183
   1170c:	movt	r0, #2
   11710:	strh	r9, [r0]
   11714:	movw	r0, #41352	; 0xa188
   11718:	movt	r0, #2
   1171c:	str	r9, [r0]
   11720:	mov	r0, r6
   11724:	bl	11118 <getopt_long@plt>
   11728:	cmn	r0, #1
   1172c:	beq	11db0 <__assert_fail@plt+0xb54>
   11730:	movw	r5, #41336	; 0xa178
   11734:	movw	r7, #37977	; 0x9459
   11738:	movt	r5, #2
   1173c:	movt	r7, #1
   11740:	b	1177c <__assert_fail@plt+0x520>
   11744:	subs	r0, r0, #50	; 0x32
   11748:	add	r1, sp, #32
   1174c:	mov	sl, r4
   11750:	mov	r4, #1
   11754:	clz	r0, r0
   11758:	lsr	r0, r0, #5
   1175c:	orr	r0, r1, r0, lsl #2
   11760:	ldr	r1, [r0]
   11764:	add	r1, r1, #1
   11768:	str	r1, [r0]
   1176c:	mov	r0, #1
   11770:	movweq	r0, #2
   11774:	str	r0, [sp, #52]	; 0x34
   11778:	b	11d88 <__assert_fail@plt+0xb2c>
   1177c:	cmp	r0, #255	; 0xff
   11780:	str	r9, [sp, #52]	; 0x34
   11784:	bgt	119c0 <__assert_fail@plt+0x764>
   11788:	add	r0, r0, #3
   1178c:	cmp	r0, #125	; 0x7d
   11790:	bhi	12c4c <__assert_fail@plt+0x19f0>
   11794:	add	r1, pc, #0
   11798:	ldr	pc, [r1, r0, lsl #2]
   1179c:	andeq	r2, r1, ip, ror #19
   117a0:	andeq	r2, r1, r4, lsr sl
   117a4:	andeq	r2, r1, ip, asr #24
   117a8:	andeq	r2, r1, ip, asr #24
   117ac:	muleq	r1, r4, r9
   117b0:	andeq	r2, r1, ip, asr #24
   117b4:	andeq	r2, r1, ip, asr #24
   117b8:	andeq	r2, r1, ip, asr #24
   117bc:	andeq	r2, r1, ip, asr #24
   117c0:	andeq	r2, r1, ip, asr #24
   117c4:	andeq	r2, r1, ip, asr #24
   117c8:	andeq	r2, r1, ip, asr #24
   117cc:	andeq	r2, r1, ip, asr #24
   117d0:	andeq	r2, r1, ip, asr #24
   117d4:	andeq	r2, r1, ip, asr #24
   117d8:	andeq	r2, r1, ip, asr #24
   117dc:	andeq	r2, r1, ip, asr #24
   117e0:	andeq	r2, r1, ip, asr #24
   117e4:	andeq	r2, r1, ip, asr #24
   117e8:	andeq	r2, r1, ip, asr #24
   117ec:	andeq	r2, r1, ip, asr #24
   117f0:	andeq	r2, r1, ip, asr #24
   117f4:	andeq	r2, r1, ip, asr #24
   117f8:	andeq	r2, r1, ip, asr #24
   117fc:	andeq	r2, r1, ip, asr #24
   11800:	andeq	r2, r1, ip, asr #24
   11804:	andeq	r2, r1, ip, asr #24
   11808:	andeq	r2, r1, ip, asr #24
   1180c:	andeq	r2, r1, ip, asr #24
   11810:	andeq	r2, r1, ip, asr #24
   11814:	andeq	r2, r1, ip, asr #24
   11818:	andeq	r2, r1, ip, asr #24
   1181c:	andeq	r2, r1, ip, asr #24
   11820:	andeq	r2, r1, ip, asr #24
   11824:	andeq	r2, r1, ip, asr #24
   11828:	andeq	r2, r1, ip, asr #24
   1182c:	andeq	r2, r1, ip, asr #24
   11830:	andeq	r2, r1, ip, asr #24
   11834:	andeq	r2, r1, ip, asr #24
   11838:	andeq	r2, r1, ip, asr #24
   1183c:	andeq	r2, r1, ip, asr #24
   11840:	andeq	r2, r1, ip, asr #24
   11844:	andeq	r2, r1, ip, asr #24
   11848:	andeq	r2, r1, ip, asr #24
   1184c:	andeq	r2, r1, ip, asr #24
   11850:	andeq	r2, r1, ip, asr #24
   11854:	andeq	r2, r1, ip, asr #24
   11858:	andeq	r2, r1, ip, asr #24
   1185c:	andeq	r2, r1, ip, asr #24
   11860:	andeq	r2, r1, ip, asr #24
   11864:	andeq	r2, r1, ip, asr #24
   11868:	andeq	r2, r1, ip, asr #24
   1186c:	andeq	r1, r1, r0, asr #21
   11870:	andeq	r1, r1, ip, lsl #22
   11874:	andeq	r2, r1, ip, asr #24
   11878:	andeq	r2, r1, ip, asr #24
   1187c:	andeq	r2, r1, ip, asr #24
   11880:	andeq	r2, r1, ip, asr #24
   11884:	andeq	r2, r1, ip, asr #24
   11888:	andeq	r2, r1, ip, asr #24
   1188c:	andeq	r2, r1, ip, asr #24
   11890:	andeq	r2, r1, ip, asr #24
   11894:	andeq	r2, r1, ip, asr #24
   11898:	andeq	r2, r1, ip, asr #24
   1189c:	andeq	r2, r1, ip, asr #24
   118a0:	andeq	r2, r1, ip, asr #24
   118a4:	andeq	r2, r1, ip, asr #24
   118a8:	andeq	r2, r1, ip, asr #24
   118ac:	andeq	r2, r1, ip, asr #24
   118b0:	andeq	r2, r1, ip, asr #24
   118b4:	andeq	r2, r1, ip, asr #24
   118b8:	andeq	r2, r1, ip, asr #24
   118bc:	andeq	r2, r1, ip, asr #24
   118c0:	andeq	r2, r1, ip, asr #24
   118c4:	andeq	r2, r1, ip, asr #24
   118c8:	andeq	r2, r1, ip, asr #24
   118cc:	andeq	r2, r1, ip, asr #24
   118d0:	andeq	r2, r1, ip, asr #24
   118d4:	andeq	r2, r1, ip, asr #24
   118d8:	andeq	r2, r1, ip, asr #24
   118dc:	andeq	r2, r1, ip, asr #24
   118e0:	andeq	r2, r1, ip, asr #24
   118e4:	andeq	r2, r1, ip, asr #24
   118e8:	andeq	r2, r1, ip, asr #24
   118ec:	andeq	r2, r1, ip, asr #24
   118f0:	andeq	r2, r1, ip, asr #24
   118f4:	andeq	r2, r1, ip, asr #24
   118f8:	andeq	r2, r1, ip, asr #24
   118fc:	andeq	r2, r1, ip, asr #24
   11900:	andeq	r2, r1, ip, asr #24
   11904:	andeq	r2, r1, ip, asr #24
   11908:	andeq	r2, r1, ip, asr #24
   1190c:	andeq	r2, r1, ip, asr #24
   11910:	andeq	r2, r1, ip, asr #24
   11914:	andeq	r2, r1, ip, asr #24
   11918:	andeq	r2, r1, ip, asr #24
   1191c:	andeq	r2, r1, ip, asr #24
   11920:	andeq	r2, r1, ip, asr #24
   11924:	andeq	r2, r1, ip, asr #24
   11928:	andeq	r2, r1, ip, asr #24
   1192c:	strdeq	r1, [r1], -r0
   11930:	andeq	r2, r1, ip, asr #24
   11934:	andeq	r2, r1, ip, asr #24
   11938:	andeq	r2, r1, ip, asr #24
   1193c:	andeq	r1, r1, ip, ror fp
   11940:	andeq	r2, r1, ip, asr #24
   11944:	andeq	r2, r1, ip, asr #24
   11948:	andeq	r2, r1, ip, asr #24
   1194c:	andeq	r1, r1, r8, lsr #23
   11950:	andeq	r1, r1, r4, ror #19
   11954:	andeq	r2, r1, ip, asr #24
   11958:	andeq	r2, r1, ip, asr #24
   1195c:	andeq	r2, r1, ip, asr #24
   11960:	andeq	r2, r1, ip, asr #24
   11964:			; <UNDEFINED> instruction: 0x00011bb4
   11968:	andeq	r2, r1, ip, asr #24
   1196c:	andeq	r2, r1, ip, asr #24
   11970:	andeq	r2, r1, ip, asr #24
   11974:	andeq	r2, r1, ip, asr #24
   11978:	andeq	r1, r1, r8, lsl #21
   1197c:	andeq	r2, r1, ip, asr #24
   11980:	andeq	r1, r1, r4, ror #23
   11984:	andeq	r2, r1, ip, asr #24
   11988:	andeq	r2, r1, ip, asr #24
   1198c:	andeq	r2, r1, ip, asr #24
   11990:	andeq	r1, r1, r8, asr fp
   11994:	ldr	r0, [r5]
   11998:	add	r1, sp, #48	; 0x30
   1199c:	add	r2, sp, #32
   119a0:	add	r3, sp, #28
   119a4:	str	r1, [sp]
   119a8:	add	r1, sp, #52	; 0x34
   119ac:	str	r1, [sp, #4]
   119b0:	add	r1, sp, #40	; 0x28
   119b4:	bl	12e28 <__assert_fail@plt+0x1bcc>
   119b8:	ldr	r0, [sp, #52]	; 0x34
   119bc:	b	11d88 <__assert_fail@plt+0xb2c>
   119c0:	cmp	r0, #256	; 0x100
   119c4:	beq	11a74 <__assert_fail@plt+0x818>
   119c8:	movw	r1, #257	; 0x101
   119cc:	cmp	r0, r1
   119d0:	bne	11b64 <__assert_fail@plt+0x908>
   119d4:	movw	r0, #41352	; 0xa188
   119d8:	mov	r1, #2
   119dc:	movt	r0, #2
   119e0:	b	11c6c <__assert_fail@plt+0xa10>
   119e4:	mov	r4, sl
   119e8:	ldr	sl, [r5]
   119ec:	ldrb	r0, [sl]
   119f0:	sub	r1, r0, #49	; 0x31
   119f4:	uxtb	r1, r1
   119f8:	cmp	r1, #1
   119fc:	bhi	11a2c <__assert_fail@plt+0x7d0>
   11a00:	ldrb	r1, [sl, #1]
   11a04:	cmp	r1, #0
   11a08:	bne	11a2c <__assert_fail@plt+0x7d0>
   11a0c:	movw	r1, #41312	; 0xa160
   11a10:	movt	r1, #2
   11a14:	ldr	r1, [r1]
   11a18:	add	r1, r8, r1, lsl #2
   11a1c:	ldr	r1, [r1, #-4]
   11a20:	add	r1, r1, #2
   11a24:	cmp	sl, r1
   11a28:	beq	11744 <__assert_fail@plt+0x4e8>
   11a2c:	mov	r0, sl
   11a30:	mov	r1, #0
   11a34:	mov	r2, #10
   11a38:	sub	r3, fp, #40	; 0x28
   11a3c:	str	r4, [sp]
   11a40:	bl	176b4 <__assert_fail@plt+0x6458>
   11a44:	cmp	r0, #1
   11a48:	beq	11a64 <__assert_fail@plt+0x808>
   11a4c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   11a50:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11a54:	cmp	r0, #0
   11a58:	bne	11d0c <__assert_fail@plt+0xab0>
   11a5c:	cmp	r1, #0
   11a60:	beq	11d0c <__assert_fail@plt+0xab0>
   11a64:	mvn	r7, #0
   11a68:	str	r9, [fp, #-36]	; 0xffffffdc
   11a6c:	str	r7, [fp, #-40]	; 0xffffffd8
   11a70:	b	11d1c <__assert_fail@plt+0xac0>
   11a74:	movw	r0, #41352	; 0xa188
   11a78:	movt	r0, #2
   11a7c:	str	r4, [r0]
   11a80:	mov	r0, #0
   11a84:	b	11d88 <__assert_fail@plt+0xb2c>
   11a88:	ldr	r0, [r5]
   11a8c:	ldrb	r1, [r0]
   11a90:	cmp	r1, #0
   11a94:	beq	11c44 <__assert_fail@plt+0x9e8>
   11a98:	ldrb	r2, [r0, #1]
   11a9c:	cmp	r2, #0
   11aa0:	beq	11c48 <__assert_fail@plt+0x9ec>
   11aa4:	movw	r1, #38071	; 0x94b7
   11aa8:	movt	r1, #1
   11aac:	bl	10fe0 <strcmp@plt>
   11ab0:	mov	r1, #0
   11ab4:	cmp	r0, #0
   11ab8:	beq	11c48 <__assert_fail@plt+0x9ec>
   11abc:	b	12aec <__assert_fail@plt+0x1890>
   11ac0:	ldr	r7, [r5]
   11ac4:	mov	r1, #0
   11ac8:	mov	r2, #10
   11acc:	sub	r3, fp, #40	; 0x28
   11ad0:	str	sl, [sp]
   11ad4:	mov	r0, r7
   11ad8:	bl	176b4 <__assert_fail@plt+0x6458>
   11adc:	cmp	r0, #1
   11ae0:	beq	11afc <__assert_fail@plt+0x8a0>
   11ae4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11ae8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11aec:	cmp	r0, #0
   11af0:	bne	11ca4 <__assert_fail@plt+0xa48>
   11af4:	cmp	r1, #0
   11af8:	beq	11ca4 <__assert_fail@plt+0xa48>
   11afc:	mvn	r5, #0
   11b00:	str	r9, [fp, #-36]	; 0xffffffdc
   11b04:	str	r5, [fp, #-40]	; 0xffffffd8
   11b08:	b	11cb4 <__assert_fail@plt+0xa58>
   11b0c:	ldr	r7, [r5]
   11b10:	mov	r1, #0
   11b14:	mov	r2, #10
   11b18:	sub	r3, fp, #40	; 0x28
   11b1c:	str	sl, [sp]
   11b20:	mov	r0, r7
   11b24:	bl	176b4 <__assert_fail@plt+0x6458>
   11b28:	cmp	r0, #1
   11b2c:	beq	11b48 <__assert_fail@plt+0x8ec>
   11b30:	ldr	r5, [fp, #-40]	; 0xffffffd8
   11b34:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b38:	cmp	r0, #0
   11b3c:	bne	11cdc <__assert_fail@plt+0xa80>
   11b40:	cmp	r1, #0
   11b44:	beq	11cdc <__assert_fail@plt+0xa80>
   11b48:	mvn	r5, #0
   11b4c:	str	r9, [fp, #-36]	; 0xffffffdc
   11b50:	str	r5, [fp, #-40]	; 0xffffffd8
   11b54:	b	11cec <__assert_fail@plt+0xa90>
   11b58:	movw	r0, #41366	; 0xa196
   11b5c:	movt	r0, #2
   11b60:	b	11c38 <__assert_fail@plt+0x9dc>
   11b64:	movw	r1, #258	; 0x102
   11b68:	cmp	r0, r1
   11b6c:	bne	12c4c <__assert_fail@plt+0x19f0>
   11b70:	movw	r0, #41376	; 0xa1a0
   11b74:	movt	r0, #2
   11b78:	b	11c38 <__assert_fail@plt+0x9dc>
   11b7c:	movw	r0, #41360	; 0xa190
   11b80:	movt	r0, #2
   11b84:	ldr	r0, [r0]
   11b88:	cmp	r0, #0
   11b8c:	beq	11c78 <__assert_fail@plt+0xa1c>
   11b90:	ldr	r7, [r5]
   11b94:	mov	r1, r7
   11b98:	bl	10fe0 <strcmp@plt>
   11b9c:	cmp	r0, #0
   11ba0:	beq	11c7c <__assert_fail@plt+0xa20>
   11ba4:	b	12af8 <__assert_fail@plt+0x189c>
   11ba8:	movw	r0, #41364	; 0xa194
   11bac:	movt	r0, #2
   11bb0:	b	11c38 <__assert_fail@plt+0x9dc>
   11bb4:	ldr	r7, [r5]
   11bb8:	movw	r1, #38066	; 0x94b2
   11bbc:	movt	r1, #1
   11bc0:	mov	r0, r7
   11bc4:	bl	10fe0 <strcmp@plt>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11c90 <__assert_fail@plt+0xa34>
   11bd0:	mov	r0, r7
   11bd4:	bl	12cc8 <__assert_fail@plt+0x1a6c>
   11bd8:	mov	r0, #3
   11bdc:	str	r0, [sp, #52]	; 0x34
   11be0:	b	11d80 <__assert_fail@plt+0xb24>
   11be4:	movw	r0, #41345	; 0xa181
   11be8:	movt	r0, #2
   11bec:	strb	r9, [r0]
   11bf0:	ldr	r0, [r5]
   11bf4:	mov	r1, #0
   11bf8:	mov	r2, #10
   11bfc:	sub	r3, fp, #40	; 0x28
   11c00:	str	sl, [sp]
   11c04:	bl	16e90 <__assert_fail@plt+0x5c34>
   11c08:	cmp	r0, #0
   11c0c:	bne	12a3c <__assert_fail@plt+0x17e0>
   11c10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11c14:	sub	r1, r0, #1
   11c18:	cmp	r1, #2
   11c1c:	bcs	12a3c <__assert_fail@plt+0x17e0>
   11c20:	movw	r1, #41356	; 0xa18c
   11c24:	cmp	r0, #1
   11c28:	movw	r0, #41357	; 0xa18d
   11c2c:	movt	r0, #2
   11c30:	movt	r1, #2
   11c34:	moveq	r0, r1
   11c38:	strb	r4, [r0]
   11c3c:	mov	r0, #0
   11c40:	b	11d88 <__assert_fail@plt+0xb2c>
   11c44:	mov	r1, #10
   11c48:	movw	r0, #41224	; 0xa108
   11c4c:	movt	r0, #2
   11c50:	ldr	r0, [r0]
   11c54:	cmp	r0, #0
   11c58:	blt	11c64 <__assert_fail@plt+0xa08>
   11c5c:	cmp	r0, r1
   11c60:	bne	12b04 <__assert_fail@plt+0x18a8>
   11c64:	movw	r0, #41224	; 0xa108
   11c68:	movt	r0, #2
   11c6c:	str	r1, [r0]
   11c70:	mov	r0, #0
   11c74:	b	11d88 <__assert_fail@plt+0xb2c>
   11c78:	ldr	r7, [r5]
   11c7c:	movw	r0, #41360	; 0xa190
   11c80:	movt	r0, #2
   11c84:	str	r7, [r0]
   11c88:	mov	r0, #0
   11c8c:	b	11d80 <__assert_fail@plt+0xb24>
   11c90:	movw	r0, #41365	; 0xa195
   11c94:	movt	r0, #2
   11c98:	strb	r4, [r0]
   11c9c:	mov	r0, #0
   11ca0:	b	11d80 <__assert_fail@plt+0xb24>
   11ca4:	cmp	r0, #0
   11ca8:	bne	12b10 <__assert_fail@plt+0x18b4>
   11cac:	orrs	r0, r5, r1
   11cb0:	beq	12b10 <__assert_fail@plt+0x18b4>
   11cb4:	movw	r1, #41216	; 0xa100
   11cb8:	sub	r0, r5, #1
   11cbc:	movt	r1, #2
   11cc0:	ldr	r7, [r1]
   11cc4:	cmn	r7, #1
   11cc8:	cmpne	r7, r0
   11ccc:	bne	12a70 <__assert_fail@plt+0x1814>
   11cd0:	movw	r1, #41216	; 0xa100
   11cd4:	movt	r1, #2
   11cd8:	b	11d70 <__assert_fail@plt+0xb14>
   11cdc:	cmp	r0, #0
   11ce0:	bne	12b10 <__assert_fail@plt+0x18b4>
   11ce4:	orrs	r0, r5, r1
   11ce8:	beq	12b10 <__assert_fail@plt+0x18b4>
   11cec:	movw	r1, #41220	; 0xa104
   11cf0:	sub	r0, r5, #1
   11cf4:	movt	r1, #2
   11cf8:	ldr	r7, [r1]
   11cfc:	cmn	r7, #1
   11d00:	cmpne	r7, r0
   11d04:	beq	11d68 <__assert_fail@plt+0xb0c>
   11d08:	b	12a70 <__assert_fail@plt+0x1814>
   11d0c:	cmp	r0, #0
   11d10:	bne	12b30 <__assert_fail@plt+0x18d4>
   11d14:	orrs	r0, r7, r1
   11d18:	beq	12b30 <__assert_fail@plt+0x18d4>
   11d1c:	movw	r1, #41216	; 0xa100
   11d20:	sub	r0, r7, #1
   11d24:	movt	r1, #2
   11d28:	ldr	r5, [r1]
   11d2c:	cmn	r5, #1
   11d30:	cmpne	r5, r0
   11d34:	bne	12a94 <__assert_fail@plt+0x1838>
   11d38:	movw	r1, #41216	; 0xa100
   11d3c:	mov	sl, r4
   11d40:	mov	r4, #1
   11d44:	movt	r1, #2
   11d48:	str	r0, [r1]
   11d4c:	movw	r1, #41220	; 0xa104
   11d50:	movt	r1, #2
   11d54:	ldr	r5, [r1]
   11d58:	cmn	r5, #1
   11d5c:	beq	11d68 <__assert_fail@plt+0xb0c>
   11d60:	cmp	r5, r0
   11d64:	bne	12a94 <__assert_fail@plt+0x1838>
   11d68:	movw	r1, #41220	; 0xa104
   11d6c:	movt	r1, #2
   11d70:	movw	r5, #41336	; 0xa178
   11d74:	str	r0, [r1]
   11d78:	mov	r0, #0
   11d7c:	movt	r5, #2
   11d80:	movw	r7, #37977	; 0x9459
   11d84:	movt	r7, #1
   11d88:	movw	r3, #38784	; 0x9780
   11d8c:	str	r0, [sp, #48]	; 0x30
   11d90:	mov	r0, r6
   11d94:	mov	r1, r8
   11d98:	mov	r2, r7
   11d9c:	str	r9, [sp]
   11da0:	movt	r3, #1
   11da4:	bl	11118 <getopt_long@plt>
   11da8:	cmn	r0, #1
   11dac:	bne	1177c <__assert_fail@plt+0x520>
   11db0:	movw	r4, #41312	; 0xa160
   11db4:	str	r9, [sp, #48]	; 0x30
   11db8:	movt	r4, #2
   11dbc:	ldr	r0, [r4]
   11dc0:	cmp	r0, r6
   11dc4:	bge	11e0c <__assert_fail@plt+0xbb0>
   11dc8:	add	r9, sp, #48	; 0x30
   11dcc:	add	sl, sp, #40	; 0x28
   11dd0:	add	r7, sp, #32
   11dd4:	add	r5, sp, #28
   11dd8:	add	r1, r0, #1
   11ddc:	mov	r2, r7
   11de0:	mov	r3, r5
   11de4:	str	r1, [r4]
   11de8:	add	r1, sp, #52	; 0x34
   11dec:	ldr	r0, [r8, r0, lsl #2]
   11df0:	str	r1, [sp, #4]
   11df4:	mov	r1, sl
   11df8:	str	r9, [sp]
   11dfc:	bl	12e28 <__assert_fail@plt+0x1bcc>
   11e00:	ldr	r0, [r4]
   11e04:	cmp	r0, r6
   11e08:	blt	11dd8 <__assert_fail@plt+0xb7c>
   11e0c:	ldr	r0, [sp, #28]
   11e10:	cmp	r0, #2
   11e14:	bne	12ab8 <__assert_fail@plt+0x185c>
   11e18:	ldr	r0, [sp, #32]
   11e1c:	cmp	r0, #0
   11e20:	beq	11e5c <__assert_fail@plt+0xc00>
   11e24:	movw	r1, #41216	; 0xa100
   11e28:	movt	r1, #2
   11e2c:	ldr	r4, [r1]
   11e30:	add	r0, r4, #1
   11e34:	cmp	r0, #2
   11e38:	movcc	r0, #0
   11e3c:	strcc	r0, [r1]
   11e40:	movwcc	r1, #41220	; 0xa104
   11e44:	movtcc	r1, #2
   11e48:	ldrcc	r4, [r1]
   11e4c:	addcc	r2, r4, #1
   11e50:	cmpcc	r2, #2
   11e54:	bcs	12b50 <__assert_fail@plt+0x18f4>
   11e58:	str	r0, [r1]
   11e5c:	movw	r6, #41216	; 0xa100
   11e60:	ldr	r0, [sp, #36]	; 0x24
   11e64:	movt	r6, #2
   11e68:	ldr	r4, [r6]
   11e6c:	cmp	r0, #0
   11e70:	beq	11eb0 <__assert_fail@plt+0xc54>
   11e74:	cmp	r4, #1
   11e78:	cmnne	r4, #1
   11e7c:	bne	12b58 <__assert_fail@plt+0x18fc>
   11e80:	movw	r1, #41220	; 0xa104
   11e84:	mov	r0, #1
   11e88:	movt	r1, #2
   11e8c:	str	r0, [r6]
   11e90:	ldr	r4, [r1]
   11e94:	cmn	r4, #1
   11e98:	cmpne	r4, #1
   11e9c:	bne	12b58 <__assert_fail@plt+0x18fc>
   11ea0:	movw	r1, #41220	; 0xa104
   11ea4:	movt	r1, #2
   11ea8:	str	r0, [r1]
   11eac:	b	11ed0 <__assert_fail@plt+0xc74>
   11eb0:	cmn	r4, #1
   11eb4:	moveq	r0, #0
   11eb8:	streq	r0, [r6]
   11ebc:	movw	r0, #41220	; 0xa104
   11ec0:	movt	r0, #2
   11ec4:	ldr	r0, [r0]
   11ec8:	cmn	r0, #1
   11ecc:	beq	129e4 <__assert_fail@plt+0x1788>
   11ed0:	movw	r7, #41368	; 0xa198
   11ed4:	movw	r1, #39076	; 0x98a4
   11ed8:	movt	r7, #2
   11edc:	movt	r1, #1
   11ee0:	ldr	r4, [r7]
   11ee4:	mov	r0, r4
   11ee8:	bl	10fe0 <strcmp@plt>
   11eec:	cmp	r0, #0
   11ef0:	beq	11f08 <__assert_fail@plt+0xcac>
   11ef4:	movw	r1, #38606	; 0x96ce
   11ef8:	mov	r0, r4
   11efc:	movt	r1, #1
   11f00:	bl	13e0c <__assert_fail@plt+0x2bb0>
   11f04:	b	11f14 <__assert_fail@plt+0xcb8>
   11f08:	movw	r0, #41328	; 0xa170
   11f0c:	movt	r0, #2
   11f10:	ldr	r0, [r0]
   11f14:	cmp	r0, #0
   11f18:	str	r0, [sp, #16]
   11f1c:	beq	12b88 <__assert_fail@plt+0x192c>
   11f20:	ldr	r5, [r7, #4]
   11f24:	movw	r1, #39076	; 0x98a4
   11f28:	movt	r1, #1
   11f2c:	mov	r0, r5
   11f30:	bl	10fe0 <strcmp@plt>
   11f34:	cmp	r0, #0
   11f38:	beq	12138 <__assert_fail@plt+0xedc>
   11f3c:	movw	r1, #38606	; 0x96ce
   11f40:	mov	r0, r5
   11f44:	movt	r1, #1
   11f48:	bl	13e0c <__assert_fail@plt+0x2bb0>
   11f4c:	mov	r4, r0
   11f50:	cmp	r4, #0
   11f54:	beq	1214c <__assert_fail@plt+0xef0>
   11f58:	ldr	r0, [sp, #16]
   11f5c:	cmp	r0, r4
   11f60:	beq	12b98 <__assert_fail@plt+0x193c>
   11f64:	mov	r1, #2
   11f68:	bl	13cd8 <__assert_fail@plt+0x2a7c>
   11f6c:	mov	r0, r4
   11f70:	mov	r1, #2
   11f74:	str	r4, [sp, #12]
   11f78:	bl	13cd8 <__assert_fail@plt+0x2a7c>
   11f7c:	sub	r0, fp, #40	; 0x28
   11f80:	mov	r4, #0
   11f84:	mov	r2, #4
   11f88:	add	r1, r0, #4
   11f8c:	mov	r0, #0
   11f90:	str	r4, [fp, #-36]	; 0xffffffdc
   11f94:	str	r4, [fp, #-40]	; 0xffffffd8
   11f98:	str	r4, [fp, #-32]	; 0xffffffe0
   11f9c:	str	r1, [sp, #20]
   11fa0:	bl	168b8 <__assert_fail@plt+0x565c>
   11fa4:	str	r0, [fp, #-32]	; 0xffffffe0
   11fa8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11fac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11fb0:	cmp	r1, r2
   11fb4:	bcs	11fe0 <__assert_fail@plt+0xd84>
   11fb8:	str	r4, [r0, r1, lsl #2]
   11fbc:	add	r0, r1, #1
   11fc0:	cmp	r0, r2
   11fc4:	bcs	11fe0 <__assert_fail@plt+0xd84>
   11fc8:	mov	r3, #0
   11fcc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   11fd0:	str	r3, [r7, r0, lsl #2]
   11fd4:	add	r0, r0, #1
   11fd8:	cmp	r2, r0
   11fdc:	bne	11fcc <__assert_fail@plt+0xd70>
   11fe0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11fe4:	mov	r2, #1
   11fe8:	add	r1, r0, r1, lsl #2
   11fec:	ldr	r0, [sp, #16]
   11ff0:	bl	13700 <__assert_fail@plt+0x24a4>
   11ff4:	cmp	r0, #0
   11ff8:	mov	r4, #0
   11ffc:	mov	r2, #4
   12000:	ldrne	r0, [fp, #-40]	; 0xffffffd8
   12004:	str	r4, [fp, #-48]	; 0xffffffd0
   12008:	str	r4, [fp, #-52]	; 0xffffffcc
   1200c:	str	r4, [fp, #-44]	; 0xffffffd4
   12010:	addne	r0, r0, #1
   12014:	strne	r0, [fp, #-40]	; 0xffffffd8
   12018:	sub	r0, fp, #52	; 0x34
   1201c:	add	r1, r0, #4
   12020:	mov	r0, #0
   12024:	str	r1, [sp, #24]
   12028:	bl	168b8 <__assert_fail@plt+0x565c>
   1202c:	str	r0, [fp, #-44]	; 0xffffffd4
   12030:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12034:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12038:	cmp	r1, r2
   1203c:	bcs	12068 <__assert_fail@plt+0xe0c>
   12040:	str	r4, [r0, r1, lsl #2]
   12044:	add	r0, r1, #1
   12048:	cmp	r0, r2
   1204c:	bcs	12068 <__assert_fail@plt+0xe0c>
   12050:	mov	r3, #0
   12054:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12058:	str	r3, [r7, r0, lsl #2]
   1205c:	add	r0, r0, #1
   12060:	cmp	r2, r0
   12064:	bne	12054 <__assert_fail@plt+0xdf8>
   12068:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1206c:	ldr	r7, [sp, #12]
   12070:	mov	r2, #2
   12074:	add	r1, r0, r1, lsl #2
   12078:	mov	r0, r7
   1207c:	bl	13700 <__assert_fail@plt+0x24a4>
   12080:	cmp	r0, #0
   12084:	ldr	r5, [sp, #16]
   12088:	movw	r4, #41347	; 0xa183
   1208c:	ldrne	r0, [fp, #-52]	; 0xffffffcc
   12090:	movt	r4, #2
   12094:	addne	r0, r0, #1
   12098:	strne	r0, [fp, #-52]	; 0xffffffcc
   1209c:	movw	r0, #41365	; 0xa195
   120a0:	movt	r0, #2
   120a4:	ldrb	r0, [r0]
   120a8:	cmp	r0, #1
   120ac:	bne	120f8 <__assert_fail@plt+0xe9c>
   120b0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   120b4:	movw	r2, #41400	; 0xa1b8
   120b8:	mov	r0, #0
   120bc:	movt	r2, #2
   120c0:	cmp	r1, #0
   120c4:	mov	r1, #0
   120c8:	ldrne	r1, [fp, #-32]	; 0xffffffe0
   120cc:	ldrne	r1, [r1]
   120d0:	ldrne	r1, [r1, #12]
   120d4:	str	r1, [r2]
   120d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   120dc:	cmp	r1, #0
   120e0:	movw	r1, #41404	; 0xa1bc
   120e4:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   120e8:	movt	r1, #2
   120ec:	ldrne	r0, [r0]
   120f0:	ldrne	r0, [r0, #12]
   120f4:	str	r0, [r1]
   120f8:	movw	r0, #41376	; 0xa1a0
   120fc:	movt	r0, #2
   12100:	ldrb	r0, [r0]
   12104:	cmp	r0, #1
   12108:	bne	122bc <__assert_fail@plt+0x1060>
   1210c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12110:	cmp	r0, #0
   12114:	beq	1215c <__assert_fail@plt+0xf00>
   12118:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1211c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12120:	ldr	r0, [r0]
   12124:	cmp	r1, #0
   12128:	bne	12170 <__assert_fail@plt+0xf14>
   1212c:	movw	r1, #41408	; 0xa1c0
   12130:	movt	r1, #2
   12134:	b	12178 <__assert_fail@plt+0xf1c>
   12138:	movw	r0, #41328	; 0xa170
   1213c:	movt	r0, #2
   12140:	ldr	r4, [r0]
   12144:	cmp	r4, #0
   12148:	bne	11f58 <__assert_fail@plt+0xcfc>
   1214c:	bl	11160 <__errno_location@plt>
   12150:	ldr	r4, [r0]
   12154:	ldr	r2, [r7, #4]
   12158:	b	12bf0 <__assert_fail@plt+0x1994>
   1215c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12160:	cmp	r0, #0
   12164:	beq	122bc <__assert_fail@plt+0x1060>
   12168:	movw	r0, #41408	; 0xa1c0
   1216c:	movt	r0, #2
   12170:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12174:	ldr	r1, [r1]
   12178:	bl	13098 <__assert_fail@plt+0x1e3c>
   1217c:	movw	r0, #41432	; 0xa1d8
   12180:	mov	r1, #0
   12184:	movt	r0, #2
   12188:	str	r1, [r0]
   1218c:	str	r1, [r0, #4]
   12190:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12194:	cmp	r0, #0
   12198:	beq	12224 <__assert_fail@plt+0xfc8>
   1219c:	str	r1, [fp, #-40]	; 0xffffffd8
   121a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   121a4:	cmp	r0, #0
   121a8:	bne	12200 <__assert_fail@plt+0xfa4>
   121ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   121b0:	ldr	r1, [sp, #20]
   121b4:	mov	r2, #4
   121b8:	bl	168b8 <__assert_fail@plt+0x565c>
   121bc:	str	r0, [fp, #-32]	; 0xffffffe0
   121c0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   121c4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   121c8:	cmp	r1, r2
   121cc:	bcs	12200 <__assert_fail@plt+0xfa4>
   121d0:	mov	r3, #0
   121d4:	str	r3, [r0, r1, lsl #2]
   121d8:	add	r0, r1, #1
   121dc:	cmp	r0, r2
   121e0:	bcs	12200 <__assert_fail@plt+0xfa4>
   121e4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   121e8:	str	r3, [r7, r0, lsl #2]
   121ec:	add	r0, r0, #1
   121f0:	cmp	r2, r0
   121f4:	bne	121e4 <__assert_fail@plt+0xf88>
   121f8:	ldr	r5, [sp, #16]
   121fc:	ldr	r7, [sp, #12]
   12200:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12204:	mov	r2, #1
   12208:	add	r1, r0, r1, lsl #2
   1220c:	mov	r0, r5
   12210:	bl	13700 <__assert_fail@plt+0x24a4>
   12214:	cmp	r0, #0
   12218:	ldrne	r0, [fp, #-40]	; 0xffffffd8
   1221c:	addne	r0, r0, #1
   12220:	strne	r0, [fp, #-40]	; 0xffffffd8
   12224:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12228:	cmp	r0, #0
   1222c:	beq	122bc <__assert_fail@plt+0x1060>
   12230:	mov	r1, #0
   12234:	str	r1, [fp, #-52]	; 0xffffffcc
   12238:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1223c:	cmp	r0, #0
   12240:	bne	12298 <__assert_fail@plt+0x103c>
   12244:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12248:	ldr	r1, [sp, #24]
   1224c:	mov	r2, #4
   12250:	bl	168b8 <__assert_fail@plt+0x565c>
   12254:	str	r0, [fp, #-44]	; 0xffffffd4
   12258:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1225c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12260:	cmp	r1, r2
   12264:	bcs	12298 <__assert_fail@plt+0x103c>
   12268:	mov	r3, #0
   1226c:	str	r3, [r0, r1, lsl #2]
   12270:	add	r0, r1, #1
   12274:	cmp	r0, r2
   12278:	bcs	12298 <__assert_fail@plt+0x103c>
   1227c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12280:	str	r3, [r7, r0, lsl #2]
   12284:	add	r0, r0, #1
   12288:	cmp	r2, r0
   1228c:	bne	1227c <__assert_fail@plt+0x1020>
   12290:	ldr	r5, [sp, #16]
   12294:	ldr	r7, [sp, #12]
   12298:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1229c:	mov	r2, #2
   122a0:	add	r1, r0, r1, lsl #2
   122a4:	mov	r0, r7
   122a8:	bl	13700 <__assert_fail@plt+0x24a4>
   122ac:	cmp	r0, #0
   122b0:	ldrne	r0, [fp, #-52]	; 0xffffffcc
   122b4:	addne	r0, r0, #1
   122b8:	strne	r0, [fp, #-52]	; 0xffffffcc
   122bc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   122c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   122c4:	cmp	r1, #0
   122c8:	cmpne	r0, #0
   122cc:	beq	126d8 <__assert_fail@plt+0x147c>
   122d0:	movw	r9, #41220	; 0xa104
   122d4:	mov	r8, #0
   122d8:	movt	r9, #2
   122dc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   122e0:	ldr	r3, [r9]
   122e4:	ldr	r2, [r6]
   122e8:	ldr	r1, [r0]
   122ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   122f0:	ldr	r0, [r0]
   122f4:	bl	13618 <__assert_fail@plt+0x23bc>
   122f8:	cmn	r0, #1
   122fc:	ble	1250c <__assert_fail@plt+0x12b0>
   12300:	cmp	r0, #0
   12304:	beq	123b4 <__assert_fail@plt+0x1158>
   12308:	movw	r0, #41357	; 0xa18d
   1230c:	movt	r0, #2
   12310:	ldrb	r0, [r0]
   12314:	cmp	r0, #1
   12318:	bne	12330 <__assert_fail@plt+0x10d4>
   1231c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12320:	ldr	r1, [r0]
   12324:	movw	r0, #41408	; 0xa1c0
   12328:	movt	r0, #2
   1232c:	bl	13098 <__assert_fail@plt+0x1e3c>
   12330:	mov	r1, #0
   12334:	str	r1, [fp, #-52]	; 0xffffffcc
   12338:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1233c:	cmp	r0, #0
   12340:	bne	1238c <__assert_fail@plt+0x1130>
   12344:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12348:	ldr	r1, [sp, #24]
   1234c:	mov	r2, #4
   12350:	bl	168b8 <__assert_fail@plt+0x565c>
   12354:	str	r0, [fp, #-44]	; 0xffffffd4
   12358:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1235c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12360:	cmp	r1, r2
   12364:	bcs	1238c <__assert_fail@plt+0x1130>
   12368:	str	r8, [r0, r1, lsl #2]
   1236c:	add	r0, r1, #1
   12370:	cmp	r0, r2
   12374:	bcs	1238c <__assert_fail@plt+0x1130>
   12378:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1237c:	str	r8, [r3, r0, lsl #2]
   12380:	add	r0, r0, #1
   12384:	cmp	r2, r0
   12388:	bne	12378 <__assert_fail@plt+0x111c>
   1238c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12390:	mov	r2, #2
   12394:	add	r1, r0, r1, lsl #2
   12398:	mov	r0, r7
   1239c:	bl	13700 <__assert_fail@plt+0x24a4>
   123a0:	cmp	r0, #0
   123a4:	ldrne	r0, [fp, #-52]	; 0xffffffcc
   123a8:	addne	r0, r0, #1
   123ac:	strne	r0, [fp, #-52]	; 0xffffffcc
   123b0:	b	125b4 <__assert_fail@plt+0x1358>
   123b4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   123b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   123bc:	cmp	r1, r0
   123c0:	bne	1240c <__assert_fail@plt+0x11b0>
   123c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   123c8:	ldr	r1, [sp, #20]
   123cc:	mov	r2, #4
   123d0:	bl	168b8 <__assert_fail@plt+0x565c>
   123d4:	str	r0, [fp, #-32]	; 0xffffffe0
   123d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   123dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   123e0:	cmp	r1, r2
   123e4:	bcs	1240c <__assert_fail@plt+0x11b0>
   123e8:	str	r8, [r0, r1, lsl #2]
   123ec:	add	r0, r1, #1
   123f0:	cmp	r0, r2
   123f4:	bcs	1240c <__assert_fail@plt+0x11b0>
   123f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   123fc:	str	r8, [r3, r0, lsl #2]
   12400:	add	r0, r0, #1
   12404:	cmp	r2, r0
   12408:	bne	123f8 <__assert_fail@plt+0x119c>
   1240c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12410:	mov	r2, #1
   12414:	mov	sl, #1
   12418:	add	r1, r0, r1, lsl #2
   1241c:	mov	r0, r5
   12420:	bl	13700 <__assert_fail@plt+0x24a4>
   12424:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12428:	cmp	r0, #0
   1242c:	add	r2, r1, #1
   12430:	str	r2, [fp, #-40]	; 0xffffffd8
   12434:	beq	12460 <__assert_fail@plt+0x1204>
   12438:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1243c:	ldr	r3, [r9]
   12440:	ldr	r2, [r6]
   12444:	ldr	r0, [r0, r1, lsl #2]
   12448:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1244c:	ldr	r1, [r1]
   12450:	bl	13618 <__assert_fail@plt+0x23bc>
   12454:	cmp	r0, #0
   12458:	beq	123b4 <__assert_fail@plt+0x1158>
   1245c:	mov	sl, #0
   12460:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12464:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12468:	cmp	r1, r0
   1246c:	bne	124b8 <__assert_fail@plt+0x125c>
   12470:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12474:	ldr	r1, [sp, #24]
   12478:	mov	r2, #4
   1247c:	bl	168b8 <__assert_fail@plt+0x565c>
   12480:	str	r0, [fp, #-44]	; 0xffffffd4
   12484:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12488:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1248c:	cmp	r1, r2
   12490:	bcs	124b8 <__assert_fail@plt+0x125c>
   12494:	str	r8, [r0, r1, lsl #2]
   12498:	add	r0, r1, #1
   1249c:	cmp	r0, r2
   124a0:	bcs	124b8 <__assert_fail@plt+0x125c>
   124a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   124a8:	str	r8, [r3, r0, lsl #2]
   124ac:	add	r0, r0, #1
   124b0:	cmp	r2, r0
   124b4:	bne	124a4 <__assert_fail@plt+0x1248>
   124b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124bc:	mov	r2, #2
   124c0:	add	r1, r0, r1, lsl #2
   124c4:	mov	r0, r7
   124c8:	bl	13700 <__assert_fail@plt+0x24a4>
   124cc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   124d0:	cmp	r0, #0
   124d4:	add	r2, r1, #1
   124d8:	str	r2, [fp, #-52]	; 0xffffffcc
   124dc:	beq	125c8 <__assert_fail@plt+0x136c>
   124e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124e4:	ldr	r3, [r9]
   124e8:	ldr	r2, [r6]
   124ec:	ldr	r1, [r0, r1, lsl #2]
   124f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   124f4:	ldr	r0, [r0]
   124f8:	bl	13618 <__assert_fail@plt+0x23bc>
   124fc:	cmp	r0, #0
   12500:	beq	12460 <__assert_fail@plt+0x1204>
   12504:	mov	r7, #0
   12508:	b	125cc <__assert_fail@plt+0x1370>
   1250c:	movw	r0, #41356	; 0xa18c
   12510:	movt	r0, #2
   12514:	ldrb	r0, [r0]
   12518:	cmp	r0, #1
   1251c:	bne	12534 <__assert_fail@plt+0x12d8>
   12520:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12524:	movw	r1, #41408	; 0xa1c0
   12528:	movt	r1, #2
   1252c:	ldr	r0, [r0]
   12530:	bl	13098 <__assert_fail@plt+0x1e3c>
   12534:	mov	r1, #0
   12538:	str	r1, [fp, #-40]	; 0xffffffd8
   1253c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12540:	cmp	r0, #0
   12544:	bne	12590 <__assert_fail@plt+0x1334>
   12548:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1254c:	ldr	r1, [sp, #20]
   12550:	mov	r2, #4
   12554:	bl	168b8 <__assert_fail@plt+0x565c>
   12558:	str	r0, [fp, #-32]	; 0xffffffe0
   1255c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12560:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12564:	cmp	r1, r2
   12568:	bcs	12590 <__assert_fail@plt+0x1334>
   1256c:	str	r8, [r0, r1, lsl #2]
   12570:	add	r0, r1, #1
   12574:	cmp	r0, r2
   12578:	bcs	12590 <__assert_fail@plt+0x1334>
   1257c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12580:	str	r8, [r3, r0, lsl #2]
   12584:	add	r0, r0, #1
   12588:	cmp	r2, r0
   1258c:	bne	1257c <__assert_fail@plt+0x1320>
   12590:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12594:	mov	r2, #1
   12598:	add	r1, r0, r1, lsl #2
   1259c:	mov	r0, r5
   125a0:	bl	13700 <__assert_fail@plt+0x24a4>
   125a4:	cmp	r0, #0
   125a8:	ldrne	r0, [fp, #-40]	; 0xffffffd8
   125ac:	addne	r0, r0, #1
   125b0:	strne	r0, [fp, #-40]	; 0xffffffd8
   125b4:	movw	r0, #41346	; 0xa182
   125b8:	mov	r1, #1
   125bc:	movt	r0, #2
   125c0:	strb	r1, [r0]
   125c4:	b	126c4 <__assert_fail@plt+0x1468>
   125c8:	mov	r7, #1
   125cc:	movw	r0, #41345	; 0xa181
   125d0:	movt	r0, #2
   125d4:	ldrb	r0, [r0]
   125d8:	cmp	r0, #1
   125dc:	bne	12644 <__assert_fail@plt+0x13e8>
   125e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   125e4:	cmp	r0, #1
   125e8:	beq	12644 <__assert_fail@plt+0x13e8>
   125ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   125f0:	mov	r4, #0
   125f4:	mov	r1, #1
   125f8:	cmp	r2, #1
   125fc:	beq	12630 <__assert_fail@plt+0x13d4>
   12600:	mov	r5, #0
   12604:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12608:	ldr	r1, [r0, r5, lsl #2]
   1260c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12610:	ldr	r0, [r0, r4, lsl #2]
   12614:	bl	13098 <__assert_fail@plt+0x1e3c>
   12618:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1261c:	add	r5, r5, #1
   12620:	sub	r0, r1, #1
   12624:	cmp	r5, r0
   12628:	bcc	12604 <__assert_fail@plt+0x13a8>
   1262c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12630:	add	r4, r4, #1
   12634:	sub	r2, r0, #1
   12638:	cmp	r4, r2
   1263c:	mov	r2, r1
   12640:	bcc	125f4 <__assert_fail@plt+0x1398>
   12644:	mov	r0, #0
   12648:	cmp	sl, #0
   1264c:	mov	r1, #0
   12650:	bne	1267c <__assert_fail@plt+0x1420>
   12654:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12658:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1265c:	mvn	r3, #3
   12660:	add	r1, r3, r1, lsl #2
   12664:	ldr	r5, [r2]
   12668:	ldr	r3, [r2, r1]
   1266c:	str	r3, [r2]
   12670:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12674:	str	r5, [r2, r1]
   12678:	mov	r1, #1
   1267c:	movw	r4, #41347	; 0xa183
   12680:	cmp	r7, #0
   12684:	str	r1, [fp, #-40]	; 0xffffffd8
   12688:	movt	r4, #2
   1268c:	bne	126b8 <__assert_fail@plt+0x145c>
   12690:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12694:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12698:	mvn	r2, #3
   1269c:	add	r0, r2, r0, lsl #2
   126a0:	ldr	r3, [r1]
   126a4:	ldr	r2, [r1, r0]
   126a8:	str	r2, [r1]
   126ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   126b0:	str	r3, [r1, r0]
   126b4:	mov	r0, #1
   126b8:	ldr	r5, [sp, #16]
   126bc:	ldr	r7, [sp, #12]
   126c0:	str	r0, [fp, #-52]	; 0xffffffcc
   126c4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   126c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   126cc:	cmp	r1, #0
   126d0:	cmpne	r0, #0
   126d4:	bne	122dc <__assert_fail@plt+0x1080>
   126d8:	movw	r2, #41352	; 0xa188
   126dc:	mov	r9, #0
   126e0:	movt	r2, #2
   126e4:	str	r9, [sp, #56]	; 0x38
   126e8:	ldr	r2, [r2]
   126ec:	cmp	r2, #2
   126f0:	beq	12710 <__assert_fail@plt+0x14b4>
   126f4:	ldrb	r2, [r4]
   126f8:	ldrb	r3, [r4, #1]
   126fc:	clz	r3, r3
   12700:	clz	r2, r2
   12704:	lsr	r3, r3, #5
   12708:	lsr	r2, r2, #5
   1270c:	orr	r9, r2, r3
   12710:	cmp	r1, #0
   12714:	movwne	r6, #41356	; 0xa18c
   12718:	movtne	r6, #2
   1271c:	ldrbne	r1, [r6]
   12720:	orrsne	r2, r9, r1
   12724:	bne	128a4 <__assert_fail@plt+0x1648>
   12728:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1272c:	cmp	r0, #0
   12730:	movwne	r6, #41357	; 0xa18d
   12734:	movtne	r6, #2
   12738:	ldrbne	r0, [r6]
   1273c:	orrsne	r1, r9, r0
   12740:	bne	12944 <__assert_fail@plt+0x16e8>
   12744:	ldr	r6, [sp, #56]	; 0x38
   12748:	cmp	r6, #0
   1274c:	beq	1276c <__assert_fail@plt+0x1510>
   12750:	ldr	r0, [r6, #20]
   12754:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12758:	mov	r4, #0
   1275c:	str	r4, [r6, #20]
   12760:	ldr	r0, [r6, #8]
   12764:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12768:	str	r4, [r6, #8]
   1276c:	mov	r0, r6
   12770:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12774:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12778:	ldr	r7, [sp, #16]
   1277c:	cmp	r0, #0
   12780:	beq	127d4 <__assert_fail@plt+0x1578>
   12784:	mov	r4, #0
   12788:	mov	r6, #0
   1278c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12790:	ldr	r5, [r0, r6, lsl #2]!
   12794:	cmp	r5, #0
   12798:	beq	127bc <__assert_fail@plt+0x1560>
   1279c:	ldr	r0, [r5, #20]
   127a0:	bl	13ec0 <__assert_fail@plt+0x2c64>
   127a4:	str	r4, [r5, #20]
   127a8:	ldr	r0, [r5, #8]
   127ac:	bl	13ec0 <__assert_fail@plt+0x2c64>
   127b0:	str	r4, [r5, #8]
   127b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127b8:	add	r0, r0, r6, lsl #2
   127bc:	ldr	r0, [r0]
   127c0:	bl	13ec0 <__assert_fail@plt+0x2c64>
   127c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   127c8:	add	r6, r6, #1
   127cc:	cmp	r6, r0
   127d0:	bcc	1278c <__assert_fail@plt+0x1530>
   127d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   127d8:	bl	13ec0 <__assert_fail@plt+0x2c64>
   127dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   127e0:	cmp	r0, #0
   127e4:	beq	12838 <__assert_fail@plt+0x15dc>
   127e8:	mov	r4, #0
   127ec:	mov	r6, #0
   127f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   127f4:	ldr	r5, [r0, r6, lsl #2]!
   127f8:	cmp	r5, #0
   127fc:	beq	12820 <__assert_fail@plt+0x15c4>
   12800:	ldr	r0, [r5, #20]
   12804:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12808:	str	r4, [r5, #20]
   1280c:	ldr	r0, [r5, #8]
   12810:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12814:	str	r4, [r5, #8]
   12818:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1281c:	add	r0, r0, r6, lsl #2
   12820:	ldr	r0, [r0]
   12824:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12828:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1282c:	add	r6, r6, #1
   12830:	cmp	r6, r0
   12834:	bcc	127f0 <__assert_fail@plt+0x1594>
   12838:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1283c:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12840:	mov	r0, r7
   12844:	bl	13d14 <__assert_fail@plt+0x2ab8>
   12848:	cmp	r0, #0
   1284c:	bne	12bc4 <__assert_fail@plt+0x1968>
   12850:	ldr	r0, [sp, #12]
   12854:	bl	13d14 <__assert_fail@plt+0x2ab8>
   12858:	movw	r1, #41347	; 0xa183
   1285c:	cmp	r0, #0
   12860:	movt	r1, #2
   12864:	bne	12bdc <__assert_fail@plt+0x1980>
   12868:	ldrb	r0, [r1]
   1286c:	ldrb	r1, [r1, #1]
   12870:	orrs	r0, r1, r0
   12874:	moveq	r0, #0
   12878:	subeq	sp, fp, #28
   1287c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12880:	movw	r1, #38219	; 0x954b
   12884:	movt	r1, #1
   12888:	mov	r0, #0
   1288c:	mov	r2, #5
   12890:	bl	11058 <dcgettext@plt>
   12894:	mov	r2, r0
   12898:	mov	r0, #1
   1289c:	mov	r1, #0
   128a0:	bl	110c4 <error@plt>
   128a4:	cmp	r1, #0
   128a8:	beq	128c4 <__assert_fail@plt+0x1668>
   128ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   128b0:	movw	r1, #41408	; 0xa1c0
   128b4:	movt	r1, #2
   128b8:	ldr	r0, [r0]
   128bc:	bl	13098 <__assert_fail@plt+0x1e3c>
   128c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   128c4:	cmp	r0, #0
   128c8:	ldr	r0, [sp, #16]
   128cc:	movwne	r1, #41346	; 0xa182
   128d0:	movne	r2, #1
   128d4:	movtne	r1, #2
   128d8:	strbne	r2, [r1]
   128dc:	add	r1, sp, #56	; 0x38
   128e0:	mov	r2, #1
   128e4:	bl	13700 <__assert_fail@plt+0x24a4>
   128e8:	cmp	r0, #0
   128ec:	beq	12728 <__assert_fail@plt+0x14cc>
   128f0:	movw	r8, #41408	; 0xa1c0
   128f4:	add	r7, sp, #56	; 0x38
   128f8:	movt	r8, #2
   128fc:	ldrb	r0, [r6]
   12900:	cmp	r0, #1
   12904:	bne	12914 <__assert_fail@plt+0x16b8>
   12908:	ldr	r0, [sp, #56]	; 0x38
   1290c:	mov	r1, r8
   12910:	bl	13098 <__assert_fail@plt+0x1e3c>
   12914:	ldrb	r0, [r4]
   12918:	cmp	r0, #0
   1291c:	ldrbne	r0, [r6]
   12920:	cmpne	r0, #1
   12924:	bne	12728 <__assert_fail@plt+0x14cc>
   12928:	ldr	r0, [sp, #16]
   1292c:	mov	r1, r7
   12930:	mov	r2, #1
   12934:	bl	13700 <__assert_fail@plt+0x24a4>
   12938:	cmp	r0, #0
   1293c:	bne	128fc <__assert_fail@plt+0x16a0>
   12940:	b	12728 <__assert_fail@plt+0x14cc>
   12944:	cmp	r0, #0
   12948:	beq	12960 <__assert_fail@plt+0x1704>
   1294c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12950:	ldr	r1, [r0]
   12954:	movw	r0, #41408	; 0xa1c0
   12958:	movt	r0, #2
   1295c:	bl	13098 <__assert_fail@plt+0x1e3c>
   12960:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12964:	cmp	r0, #0
   12968:	ldr	r0, [sp, #12]
   1296c:	movwne	r1, #41346	; 0xa182
   12970:	movne	r2, #1
   12974:	movtne	r1, #2
   12978:	strbne	r2, [r1]
   1297c:	add	r1, sp, #56	; 0x38
   12980:	mov	r2, #2
   12984:	bl	13700 <__assert_fail@plt+0x24a4>
   12988:	cmp	r0, #0
   1298c:	beq	12744 <__assert_fail@plt+0x14e8>
   12990:	movw	r8, #41408	; 0xa1c0
   12994:	add	r7, sp, #56	; 0x38
   12998:	movt	r8, #2
   1299c:	ldrb	r0, [r6]
   129a0:	cmp	r0, #1
   129a4:	bne	129b4 <__assert_fail@plt+0x1758>
   129a8:	ldr	r1, [sp, #56]	; 0x38
   129ac:	mov	r0, r8
   129b0:	bl	13098 <__assert_fail@plt+0x1e3c>
   129b4:	ldrb	r0, [r4, #1]
   129b8:	cmp	r0, #0
   129bc:	ldrbne	r0, [r6]
   129c0:	cmpne	r0, #1
   129c4:	bne	12744 <__assert_fail@plt+0x14e8>
   129c8:	ldr	r0, [sp, #12]
   129cc:	mov	r1, r7
   129d0:	mov	r2, #2
   129d4:	bl	13700 <__assert_fail@plt+0x24a4>
   129d8:	cmp	r0, #0
   129dc:	bne	1299c <__assert_fail@plt+0x1740>
   129e0:	b	12744 <__assert_fail@plt+0x14e8>
   129e4:	mov	r0, #0
   129e8:	b	11ea0 <__assert_fail@plt+0xc44>
   129ec:	movw	r0, #41232	; 0xa110
   129f0:	movw	r2, #38129	; 0x94f1
   129f4:	mov	r1, #0
   129f8:	movt	r0, #2
   129fc:	movt	r2, #1
   12a00:	str	r1, [sp, #4]
   12a04:	movw	r1, #37948	; 0x943c
   12a08:	ldr	r3, [r0]
   12a0c:	movw	r0, #41332	; 0xa174
   12a10:	str	r2, [sp]
   12a14:	movw	r2, #38115	; 0x94e3
   12a18:	movt	r1, #1
   12a1c:	movt	r0, #2
   12a20:	movt	r2, #1
   12a24:	ldr	r0, [r0]
   12a28:	bl	164d8 <__assert_fail@plt+0x527c>
   12a2c:	mov	r0, #0
   12a30:	bl	11130 <exit@plt>
   12a34:	mov	r0, #0
   12a38:	bl	11358 <__assert_fail@plt+0xfc>
   12a3c:	movw	r1, #37997	; 0x946d
   12a40:	movt	r1, #1
   12a44:	mov	r0, #0
   12a48:	mov	r2, #5
   12a4c:	bl	11058 <dcgettext@plt>
   12a50:	mov	r4, r0
   12a54:	ldr	r0, [r5]
   12a58:	bl	15e6c <__assert_fail@plt+0x4c10>
   12a5c:	mov	r3, r0
   12a60:	mov	r0, #1
   12a64:	mov	r1, #0
   12a68:	mov	r2, r4
   12a6c:	bl	110c4 <error@plt>
   12a70:	movw	r1, #38621	; 0x96dd
   12a74:	mov	r0, #0
   12a78:	mov	r2, #5
   12a7c:	movt	r1, #1
   12a80:	bl	11058 <dcgettext@plt>
   12a84:	mov	r2, r0
   12a88:	add	r3, r7, #1
   12a8c:	str	r5, [sp]
   12a90:	b	12b7c <__assert_fail@plt+0x1920>
   12a94:	movw	r1, #38621	; 0x96dd
   12a98:	mov	r0, #0
   12a9c:	mov	r2, #5
   12aa0:	movt	r1, #1
   12aa4:	bl	11058 <dcgettext@plt>
   12aa8:	mov	r2, r0
   12aac:	str	r7, [sp]
   12ab0:	add	r3, r5, #1
   12ab4:	b	12b7c <__assert_fail@plt+0x1920>
   12ab8:	cmp	r0, #0
   12abc:	bne	12c14 <__assert_fail@plt+0x19b8>
   12ac0:	movw	r1, #38142	; 0x94fe
   12ac4:	mov	r0, #0
   12ac8:	mov	r2, #5
   12acc:	movt	r1, #1
   12ad0:	bl	11058 <dcgettext@plt>
   12ad4:	mov	r2, r0
   12ad8:	mov	r0, #0
   12adc:	mov	r1, #0
   12ae0:	bl	110c4 <error@plt>
   12ae4:	mov	r0, #1
   12ae8:	bl	11358 <__assert_fail@plt+0xfc>
   12aec:	movw	r1, #38074	; 0x94ba
   12af0:	movt	r1, #1
   12af4:	b	12a44 <__assert_fail@plt+0x17e8>
   12af8:	movw	r1, #38022	; 0x9486
   12afc:	movt	r1, #1
   12b00:	b	12888 <__assert_fail@plt+0x162c>
   12b04:	movw	r1, #38097	; 0x94d1
   12b08:	movt	r1, #1
   12b0c:	b	12888 <__assert_fail@plt+0x162c>
   12b10:	movw	r1, #37997	; 0x946d
   12b14:	mov	r0, #0
   12b18:	mov	r2, #5
   12b1c:	movt	r1, #1
   12b20:	bl	11058 <dcgettext@plt>
   12b24:	mov	r4, r0
   12b28:	mov	r0, r7
   12b2c:	b	12a58 <__assert_fail@plt+0x17fc>
   12b30:	movw	r1, #37997	; 0x946d
   12b34:	mov	r0, #0
   12b38:	mov	r2, #5
   12b3c:	movt	r1, #1
   12b40:	bl	11058 <dcgettext@plt>
   12b44:	mov	r4, r0
   12b48:	mov	r0, sl
   12b4c:	b	12a58 <__assert_fail@plt+0x17fc>
   12b50:	mov	r5, #1
   12b54:	b	12b5c <__assert_fail@plt+0x1900>
   12b58:	mov	r5, #2
   12b5c:	movw	r1, #38621	; 0x96dd
   12b60:	mov	r0, #0
   12b64:	mov	r2, #5
   12b68:	movt	r1, #1
   12b6c:	bl	11058 <dcgettext@plt>
   12b70:	mov	r2, r0
   12b74:	str	r5, [sp]
   12b78:	add	r3, r4, #1
   12b7c:	mov	r0, #1
   12b80:	mov	r1, #0
   12b84:	bl	110c4 <error@plt>
   12b88:	bl	11160 <__errno_location@plt>
   12b8c:	ldr	r4, [r0]
   12b90:	ldr	r2, [r7]
   12b94:	b	12bf0 <__assert_fail@plt+0x1994>
   12b98:	bl	11160 <__errno_location@plt>
   12b9c:	ldr	r4, [r0]
   12ba0:	movw	r1, #38183	; 0x9527
   12ba4:	mov	r0, #0
   12ba8:	mov	r2, #5
   12bac:	movt	r1, #1
   12bb0:	bl	11058 <dcgettext@plt>
   12bb4:	mov	r2, r0
   12bb8:	mov	r0, #1
   12bbc:	mov	r1, r4
   12bc0:	bl	110c4 <error@plt>
   12bc4:	bl	11160 <__errno_location@plt>
   12bc8:	ldr	r4, [r0]
   12bcc:	movw	r0, #41368	; 0xa198
   12bd0:	movt	r0, #2
   12bd4:	ldr	r2, [r0]
   12bd8:	b	12bf0 <__assert_fail@plt+0x1994>
   12bdc:	bl	11160 <__errno_location@plt>
   12be0:	ldr	r4, [r0]
   12be4:	movw	r0, #41368	; 0xa198
   12be8:	movt	r0, #2
   12bec:	ldr	r2, [r0, #4]
   12bf0:	mov	r0, #0
   12bf4:	mov	r1, #3
   12bf8:	bl	15bc0 <__assert_fail@plt+0x4964>
   12bfc:	movw	r2, #38722	; 0x9742
   12c00:	mov	r3, r0
   12c04:	mov	r0, #1
   12c08:	mov	r1, r4
   12c0c:	movt	r2, #1
   12c10:	bl	110c4 <error@plt>
   12c14:	movw	r1, #38158	; 0x950e
   12c18:	mov	r0, #0
   12c1c:	mov	r2, #5
   12c20:	movt	r1, #1
   12c24:	bl	11058 <dcgettext@plt>
   12c28:	mov	r5, r0
   12c2c:	add	r0, r8, r6, lsl #2
   12c30:	ldr	r0, [r0, #-4]
   12c34:	bl	15e6c <__assert_fail@plt+0x4c10>
   12c38:	mov	r3, r0
   12c3c:	mov	r0, #0
   12c40:	mov	r1, #0
   12c44:	mov	r2, r5
   12c48:	bl	110c4 <error@plt>
   12c4c:	mov	r0, #1
   12c50:	bl	11358 <__assert_fail@plt+0xfc>
   12c54:	push	{r4, r5, r6, sl, fp, lr}
   12c58:	add	fp, sp, #16
   12c5c:	movw	r4, #41380	; 0xa1a4
   12c60:	movt	r4, #2
   12c64:	ldr	r5, [r4]
   12c68:	cmp	r5, #0
   12c6c:	beq	12c94 <__assert_fail@plt+0x1a38>
   12c70:	ldr	r0, [r5, #20]
   12c74:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12c78:	mov	r6, #0
   12c7c:	str	r6, [r5, #20]
   12c80:	ldr	r0, [r5, #8]
   12c84:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12c88:	str	r6, [r5, #8]
   12c8c:	ldr	r0, [r4]
   12c90:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12c94:	ldr	r5, [r4, #4]
   12c98:	cmp	r5, #0
   12c9c:	popeq	{r4, r5, r6, sl, fp, pc}
   12ca0:	ldr	r0, [r5, #20]
   12ca4:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12ca8:	mov	r6, #0
   12cac:	str	r6, [r5, #20]
   12cb0:	ldr	r0, [r5, #8]
   12cb4:	bl	13ec0 <__assert_fail@plt+0x2c64>
   12cb8:	str	r6, [r5, #8]
   12cbc:	ldr	r0, [r4, #4]
   12cc0:	pop	{r4, r5, r6, sl, fp, lr}
   12cc4:	b	13ec0 <__assert_fail@plt+0x2c64>
   12cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ccc:	add	fp, sp, #28
   12cd0:	sub	sp, sp, #20
   12cd4:	movw	r9, #41228	; 0xa10c
   12cd8:	mov	r6, r0
   12cdc:	mov	sl, #0
   12ce0:	movt	r9, #2
   12ce4:	b	12d10 <__assert_fail@plt+0x1ab4>
   12ce8:	mov	r0, #12
   12cec:	bl	1670c <__assert_fail@plt+0x54b0>
   12cf0:	stm	r0, {r5, r7, sl}
   12cf4:	cmp	r4, #0
   12cf8:	mov	r6, r4
   12cfc:	ldr	r1, [r9]
   12d00:	str	r0, [r1, #8]
   12d04:	str	r0, [r9]
   12d08:	subeq	sp, fp, #28
   12d0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d10:	movw	r1, #38655	; 0x96ff
   12d14:	mov	r0, r6
   12d18:	movt	r1, #1
   12d1c:	bl	11220 <strpbrk@plt>
   12d20:	cmp	r0, #0
   12d24:	mov	r4, #0
   12d28:	strbne	sl, [r0], #1
   12d2c:	ldrb	r8, [r6]
   12d30:	movne	r4, r0
   12d34:	sub	r0, r8, #49	; 0x31
   12d38:	cmp	r0, #2
   12d3c:	bcs	12da0 <__assert_fail@plt+0x1b44>
   12d40:	ldrb	r0, [r6, #1]
   12d44:	cmp	r0, #46	; 0x2e
   12d48:	bne	12de8 <__assert_fail@plt+0x1b8c>
   12d4c:	movw	r0, #38658	; 0x9702
   12d50:	add	r6, r6, #2
   12d54:	mov	r1, #0
   12d58:	mov	r2, #10
   12d5c:	add	r3, sp, #8
   12d60:	movt	r0, #1
   12d64:	str	r0, [sp]
   12d68:	mov	r0, r6
   12d6c:	bl	176b4 <__assert_fail@plt+0x6458>
   12d70:	cmp	r0, #1
   12d74:	beq	12d90 <__assert_fail@plt+0x1b34>
   12d78:	ldr	r1, [sp, #8]
   12d7c:	ldr	r2, [sp, #12]
   12d80:	cmp	r0, #0
   12d84:	bne	12dc0 <__assert_fail@plt+0x1b64>
   12d88:	cmp	r2, #0
   12d8c:	beq	12dc0 <__assert_fail@plt+0x1b64>
   12d90:	mvn	r1, #0
   12d94:	str	sl, [sp, #12]
   12d98:	str	r1, [sp, #8]
   12d9c:	b	12dd0 <__assert_fail@plt+0x1b74>
   12da0:	cmp	r8, #48	; 0x30
   12da4:	bne	12ddc <__assert_fail@plt+0x1b80>
   12da8:	ldrb	r0, [r6, #1]
   12dac:	mov	r5, #0
   12db0:	mov	r7, #0
   12db4:	cmp	r0, #0
   12db8:	beq	12ce8 <__assert_fail@plt+0x1a8c>
   12dbc:	b	12de8 <__assert_fail@plt+0x1b8c>
   12dc0:	cmp	r0, #0
   12dc4:	bne	12df4 <__assert_fail@plt+0x1b98>
   12dc8:	orrs	r0, r1, r2
   12dcc:	beq	12df4 <__assert_fail@plt+0x1b98>
   12dd0:	sub	r5, r8, #48	; 0x30
   12dd4:	sub	r7, r1, #1
   12dd8:	b	12ce8 <__assert_fail@plt+0x1a8c>
   12ddc:	movw	r1, #38687	; 0x971f
   12de0:	movt	r1, #1
   12de4:	b	12dfc <__assert_fail@plt+0x1ba0>
   12de8:	movw	r1, #38659	; 0x9703
   12dec:	movt	r1, #1
   12df0:	b	12dfc <__assert_fail@plt+0x1ba0>
   12df4:	movw	r1, #37997	; 0x946d
   12df8:	movt	r1, #1
   12dfc:	mov	r0, #0
   12e00:	mov	r2, #5
   12e04:	bl	11058 <dcgettext@plt>
   12e08:	mov	r4, r0
   12e0c:	mov	r0, r6
   12e10:	bl	15e6c <__assert_fail@plt+0x4c10>
   12e14:	mov	r3, r0
   12e18:	mov	r0, #1
   12e1c:	mov	r1, #0
   12e20:	mov	r2, r4
   12e24:	bl	110c4 <error@plt>
   12e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e2c:	add	fp, sp, #28
   12e30:	sub	sp, sp, #20
   12e34:	mov	r4, r0
   12e38:	ldr	r0, [r3]
   12e3c:	mov	r5, r3
   12e40:	mov	r6, r1
   12e44:	cmp	r0, #2
   12e48:	bne	12fbc <__assert_fail@plt+0x1d60>
   12e4c:	ldr	r7, [r6]
   12e50:	movw	r8, #41368	; 0xa198
   12e54:	movt	r8, #2
   12e58:	clz	r0, r7
   12e5c:	lsr	r1, r0, #5
   12e60:	ldr	r0, [r6, r1, lsl #2]
   12e64:	cmp	r0, #3
   12e68:	bhi	12fa4 <__assert_fail@plt+0x1d48>
   12e6c:	ldr	r9, [r8, r1, lsl #2]
   12e70:	add	r1, pc, #0
   12e74:	ldr	pc, [r1, r0, lsl #2]
   12e78:	strdeq	r2, [r1], -r8
   12e7c:	andeq	r2, r1, r8, lsl #29
   12e80:	andeq	r2, r1, r8, ror #29
   12e84:	andeq	r2, r1, r8, asr #30
   12e88:	ldr	r0, [r2]
   12e8c:	add	r3, sp, #8
   12e90:	mov	r1, #0
   12e94:	sub	r0, r0, #1
   12e98:	str	r0, [r2]
   12e9c:	movw	r0, #38658	; 0x9702
   12ea0:	mov	r2, #10
   12ea4:	movt	r0, #1
   12ea8:	str	r0, [sp]
   12eac:	mov	r0, r9
   12eb0:	bl	176b4 <__assert_fail@plt+0x6458>
   12eb4:	cmp	r0, #1
   12eb8:	beq	12ed4 <__assert_fail@plt+0x1c78>
   12ebc:	ldr	sl, [sp, #8]
   12ec0:	ldr	r1, [sp, #12]
   12ec4:	cmp	r0, #0
   12ec8:	bne	12f54 <__assert_fail@plt+0x1cf8>
   12ecc:	cmp	r1, #0
   12ed0:	beq	12f54 <__assert_fail@plt+0x1cf8>
   12ed4:	mov	r0, #0
   12ed8:	mvn	sl, #0
   12edc:	str	r0, [sp, #12]
   12ee0:	str	sl, [sp, #8]
   12ee4:	b	12f64 <__assert_fail@plt+0x1d08>
   12ee8:	ldr	r0, [r2, #4]
   12eec:	add	r3, sp, #8
   12ef0:	mov	r1, #0
   12ef4:	sub	r0, r0, #1
   12ef8:	str	r0, [r2, #4]
   12efc:	movw	r0, #38658	; 0x9702
   12f00:	mov	r2, #10
   12f04:	movt	r0, #1
   12f08:	str	r0, [sp]
   12f0c:	mov	r0, r9
   12f10:	bl	176b4 <__assert_fail@plt+0x6458>
   12f14:	cmp	r0, #1
   12f18:	beq	12f34 <__assert_fail@plt+0x1cd8>
   12f1c:	ldr	sl, [sp, #8]
   12f20:	ldr	r1, [sp, #12]
   12f24:	cmp	r0, #0
   12f28:	bne	12f74 <__assert_fail@plt+0x1d18>
   12f2c:	cmp	r1, #0
   12f30:	beq	12f74 <__assert_fail@plt+0x1d18>
   12f34:	mov	r0, #0
   12f38:	mvn	sl, #0
   12f3c:	str	r0, [sp, #12]
   12f40:	str	sl, [sp, #8]
   12f44:	b	12f84 <__assert_fail@plt+0x1d28>
   12f48:	mov	r0, r9
   12f4c:	bl	12cc8 <__assert_fail@plt+0x1a6c>
   12f50:	b	12fa4 <__assert_fail@plt+0x1d48>
   12f54:	cmp	r0, #0
   12f58:	bne	13064 <__assert_fail@plt+0x1e08>
   12f5c:	orrs	r0, sl, r1
   12f60:	beq	13064 <__assert_fail@plt+0x1e08>
   12f64:	movw	r1, #41216	; 0xa100
   12f68:	sub	r0, sl, #1
   12f6c:	movt	r1, #2
   12f70:	b	12f90 <__assert_fail@plt+0x1d34>
   12f74:	cmp	r0, #0
   12f78:	bne	13064 <__assert_fail@plt+0x1e08>
   12f7c:	orrs	r0, sl, r1
   12f80:	beq	13064 <__assert_fail@plt+0x1e08>
   12f84:	movw	r1, #41220	; 0xa104
   12f88:	sub	r0, sl, #1
   12f8c:	movt	r1, #2
   12f90:	ldr	r9, [r1]
   12f94:	cmn	r9, #1
   12f98:	cmpne	r9, r0
   12f9c:	bne	13038 <__assert_fail@plt+0x1ddc>
   12fa0:	str	r0, [r1]
   12fa4:	cmp	r7, #0
   12fa8:	mov	r0, #1
   12fac:	ldrne	r1, [r6, #4]
   12fb0:	strne	r1, [r6]
   12fb4:	ldrne	r1, [r8, #4]
   12fb8:	strne	r1, [r8]
   12fbc:	ldr	r1, [fp, #8]
   12fc0:	ldr	r2, [r1]
   12fc4:	str	r2, [r6, r0, lsl #2]
   12fc8:	movw	r2, #41368	; 0xa198
   12fcc:	movt	r2, #2
   12fd0:	str	r4, [r2, r0, lsl #2]
   12fd4:	add	r0, r0, #1
   12fd8:	str	r0, [r5]
   12fdc:	ldr	r0, [r1]
   12fe0:	cmp	r0, #3
   12fe4:	ldreq	r0, [fp, #12]
   12fe8:	moveq	r1, #3
   12fec:	streq	r1, [r0]
   12ff0:	sub	sp, fp, #28
   12ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ff8:	movw	r1, #38725	; 0x9745
   12ffc:	mov	r0, #0
   13000:	mov	r2, #5
   13004:	movt	r1, #1
   13008:	bl	11058 <dcgettext@plt>
   1300c:	mov	r5, r0
   13010:	mov	r0, #4
   13014:	mov	r1, r4
   13018:	bl	15944 <__assert_fail@plt+0x46e8>
   1301c:	mov	r3, r0
   13020:	mov	r0, #0
   13024:	mov	r1, #0
   13028:	mov	r2, r5
   1302c:	bl	110c4 <error@plt>
   13030:	mov	r0, #1
   13034:	bl	11358 <__assert_fail@plt+0xfc>
   13038:	movw	r1, #38621	; 0x96dd
   1303c:	mov	r0, #0
   13040:	mov	r2, #5
   13044:	movt	r1, #1
   13048:	bl	11058 <dcgettext@plt>
   1304c:	mov	r2, r0
   13050:	add	r3, r9, #1
   13054:	mov	r0, #1
   13058:	mov	r1, #0
   1305c:	str	sl, [sp]
   13060:	bl	110c4 <error@plt>
   13064:	movw	r1, #37997	; 0x946d
   13068:	mov	r0, #0
   1306c:	mov	r2, #5
   13070:	movt	r1, #1
   13074:	bl	11058 <dcgettext@plt>
   13078:	mov	r4, r0
   1307c:	mov	r0, r9
   13080:	bl	15e6c <__assert_fail@plt+0x4c10>
   13084:	mov	r3, r0
   13088:	mov	r0, #1
   1308c:	mov	r1, #0
   13090:	mov	r2, r4
   13094:	bl	110c4 <error@plt>
   13098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1309c:	add	fp, sp, #28
   130a0:	sub	sp, sp, #12
   130a4:	mov	sl, r0
   130a8:	movw	r0, #41388	; 0xa1ac
   130ac:	movw	r4, #41224	; 0xa108
   130b0:	movt	r0, #2
   130b4:	movt	r4, #2
   130b8:	ldr	r7, [r0, #8]
   130bc:	cmp	r7, #0
   130c0:	beq	131d8 <__assert_fail@plt+0x1f7c>
   130c4:	ldr	r0, [r4]
   130c8:	movw	r3, #41408	; 0xa1c0
   130cc:	movw	r2, #41220	; 0xa104
   130d0:	movw	r4, #41216	; 0xa100
   130d4:	mov	r5, sl
   130d8:	movw	r8, #41332	; 0xa174
   130dc:	mov	r9, r1
   130e0:	movt	r3, #2
   130e4:	movt	r2, #2
   130e8:	movt	r4, #2
   130ec:	movt	r8, #2
   130f0:	cmp	sl, r3
   130f4:	moveq	r4, r2
   130f8:	moveq	r5, r1
   130fc:	uxtb	r6, r0
   13100:	cmp	r0, #0
   13104:	movwlt	r6, #32
   13108:	b	13118 <__assert_fail@plt+0x1ebc>
   1310c:	add	r2, r1, #1
   13110:	str	r2, [r0, #20]
   13114:	strb	r6, [r1]
   13118:	mov	r1, r7
   1311c:	mov	r0, r9
   13120:	ldr	r2, [r1], #4
   13124:	cmp	r2, #1
   13128:	moveq	r0, sl
   1312c:	cmp	r2, #0
   13130:	moveq	r1, r4
   13134:	moveq	r0, r5
   13138:	ldr	r2, [r0, #12]
   1313c:	ldr	r1, [r1]
   13140:	cmp	r2, r1
   13144:	bls	13170 <__assert_fail@plt+0x1f14>
   13148:	ldr	r0, [r0, #20]
   1314c:	add	r2, r0, r1, lsl #3
   13150:	ldr	r2, [r2, #4]
   13154:	cmp	r2, #0
   13158:	beq	13170 <__assert_fail@plt+0x1f14>
   1315c:	ldr	r0, [r0, r1, lsl #3]
   13160:	ldr	r3, [r8]
   13164:	mov	r1, #1
   13168:	bl	11040 <fwrite_unlocked@plt>
   1316c:	b	1318c <__assert_fail@plt+0x1f30>
   13170:	movw	r0, #41360	; 0xa190
   13174:	movt	r0, #2
   13178:	ldr	r0, [r0]
   1317c:	cmp	r0, #0
   13180:	beq	1318c <__assert_fail@plt+0x1f30>
   13184:	ldr	r1, [r8]
   13188:	bl	10fc8 <fputs_unlocked@plt>
   1318c:	ldr	r7, [r7, #8]
   13190:	cmp	r7, #0
   13194:	beq	131b8 <__assert_fail@plt+0x1f5c>
   13198:	ldr	r0, [r8]
   1319c:	ldr	r1, [r0, #20]
   131a0:	ldr	r2, [r0, #24]
   131a4:	cmp	r1, r2
   131a8:	bcc	1310c <__assert_fail@plt+0x1eb0>
   131ac:	mov	r1, r6
   131b0:	bl	111e4 <__overflow@plt>
   131b4:	b	13118 <__assert_fail@plt+0x1ebc>
   131b8:	movw	r0, #41366	; 0xa196
   131bc:	mov	r1, #10
   131c0:	movt	r0, #2
   131c4:	ldrb	r0, [r0]
   131c8:	cmp	r0, #0
   131cc:	ldr	r0, [r8]
   131d0:	movwne	r1, #0
   131d4:	b	135ec <__assert_fail@plt+0x2390>
   131d8:	movw	r0, #41408	; 0xa1c0
   131dc:	movw	r5, #41216	; 0xa100
   131e0:	movw	r2, #41220	; 0xa104
   131e4:	mov	r3, sl
   131e8:	movt	r0, #2
   131ec:	movt	r5, #2
   131f0:	movt	r2, #2
   131f4:	cmp	sl, r0
   131f8:	mov	r0, r5
   131fc:	moveq	r0, r2
   13200:	moveq	r3, r1
   13204:	ldr	r0, [r0]
   13208:	ldr	r2, [r3, #12]
   1320c:	str	r1, [sp, #8]
   13210:	cmp	r2, r0
   13214:	bls	13248 <__assert_fail@plt+0x1fec>
   13218:	ldr	r3, [r3, #20]
   1321c:	add	r2, r3, r0, lsl #3
   13220:	ldr	r2, [r2, #4]
   13224:	cmp	r2, #0
   13228:	beq	13248 <__assert_fail@plt+0x1fec>
   1322c:	movw	r1, #41332	; 0xa174
   13230:	ldr	r0, [r3, r0, lsl #3]
   13234:	movt	r1, #2
   13238:	ldr	r3, [r1]
   1323c:	mov	r1, #1
   13240:	bl	11040 <fwrite_unlocked@plt>
   13244:	b	1326c <__assert_fail@plt+0x2010>
   13248:	movw	r0, #41360	; 0xa190
   1324c:	movt	r0, #2
   13250:	ldr	r0, [r0]
   13254:	cmp	r0, #0
   13258:	beq	1326c <__assert_fail@plt+0x2010>
   1325c:	movw	r1, #41332	; 0xa174
   13260:	movt	r1, #2
   13264:	ldr	r1, [r1]
   13268:	bl	10fc8 <fputs_unlocked@plt>
   1326c:	movw	r0, #41365	; 0xa195
   13270:	movw	r1, #41400	; 0xa1b8
   13274:	add	r6, sl, #12
   13278:	ldr	r8, [r4]
   1327c:	ldr	r5, [r5]
   13280:	movt	r0, #2
   13284:	movt	r1, #2
   13288:	ldrb	r0, [r0]
   1328c:	cmp	r0, #0
   13290:	moveq	r1, r6
   13294:	cmp	r8, #0
   13298:	ldr	r7, [r1]
   1329c:	movwlt	r8, #32
   132a0:	cmp	r5, #0
   132a4:	cmpne	r7, #0
   132a8:	bne	132d0 <__assert_fail@plt+0x2074>
   132ac:	add	r0, r5, #1
   132b0:	cmp	r0, r7
   132b4:	bcs	1340c <__assert_fail@plt+0x21b0>
   132b8:	sub	r4, r7, #1
   132bc:	movw	r7, #41332	; 0xa174
   132c0:	uxtb	r0, r8
   132c4:	movt	r7, #2
   132c8:	str	r0, [sp, #4]
   132cc:	b	13384 <__assert_fail@plt+0x2128>
   132d0:	movw	r9, #41332	; 0xa174
   132d4:	uxtb	r0, r8
   132d8:	mov	r4, #0
   132dc:	movt	r9, #2
   132e0:	str	r0, [sp, #4]
   132e4:	ldr	r0, [r9]
   132e8:	ldr	r1, [r0, #20]
   132ec:	ldr	r2, [r0, #24]
   132f0:	cmp	r1, r2
   132f4:	bcs	1336c <__assert_fail@plt+0x2110>
   132f8:	add	r2, r1, #1
   132fc:	str	r2, [r0, #20]
   13300:	strb	r8, [r1]
   13304:	ldr	r0, [r6]
   13308:	cmp	r0, r4
   1330c:	bls	13338 <__assert_fail@plt+0x20dc>
   13310:	ldr	r0, [sl, #20]
   13314:	add	r1, r0, r4, lsl #3
   13318:	ldr	r2, [r1, #4]
   1331c:	cmp	r2, #0
   13320:	beq	13338 <__assert_fail@plt+0x20dc>
   13324:	ldr	r0, [r0, r4, lsl #3]
   13328:	ldr	r3, [r9]
   1332c:	mov	r1, #1
   13330:	bl	11040 <fwrite_unlocked@plt>
   13334:	b	13354 <__assert_fail@plt+0x20f8>
   13338:	movw	r0, #41360	; 0xa190
   1333c:	movt	r0, #2
   13340:	ldr	r0, [r0]
   13344:	cmp	r0, #0
   13348:	beq	13354 <__assert_fail@plt+0x20f8>
   1334c:	ldr	r1, [r9]
   13350:	bl	10fc8 <fputs_unlocked@plt>
   13354:	add	r4, r4, #1
   13358:	cmp	r4, r5
   1335c:	bcs	132ac <__assert_fail@plt+0x2050>
   13360:	cmp	r4, r7
   13364:	bcc	132e4 <__assert_fail@plt+0x2088>
   13368:	b	132ac <__assert_fail@plt+0x2050>
   1336c:	ldr	r1, [sp, #4]
   13370:	bl	111e4 <__overflow@plt>
   13374:	b	13304 <__assert_fail@plt+0x20a8>
   13378:	ldr	r1, [sp, #4]
   1337c:	bl	111e4 <__overflow@plt>
   13380:	b	133ac <__assert_fail@plt+0x2150>
   13384:	ldr	r0, [r7]
   13388:	mov	r9, r5
   1338c:	add	r5, r5, #1
   13390:	ldr	r1, [r0, #20]
   13394:	ldr	r2, [r0, #24]
   13398:	cmp	r1, r2
   1339c:	bcs	13378 <__assert_fail@plt+0x211c>
   133a0:	add	r2, r1, #1
   133a4:	str	r2, [r0, #20]
   133a8:	strb	r8, [r1]
   133ac:	ldr	r0, [r6]
   133b0:	cmp	r0, r5
   133b4:	bls	133e8 <__assert_fail@plt+0x218c>
   133b8:	ldr	r0, [sl, #20]
   133bc:	add	r0, r0, r9, lsl #3
   133c0:	ldr	r2, [r0, #12]
   133c4:	cmp	r2, #0
   133c8:	beq	133e8 <__assert_fail@plt+0x218c>
   133cc:	ldr	r0, [r0, #8]
   133d0:	ldr	r3, [r7]
   133d4:	mov	r1, #1
   133d8:	bl	11040 <fwrite_unlocked@plt>
   133dc:	cmp	r4, r5
   133e0:	bne	13384 <__assert_fail@plt+0x2128>
   133e4:	b	1340c <__assert_fail@plt+0x21b0>
   133e8:	movw	r0, #41360	; 0xa190
   133ec:	movt	r0, #2
   133f0:	ldr	r0, [r0]
   133f4:	cmp	r0, #0
   133f8:	beq	13404 <__assert_fail@plt+0x21a8>
   133fc:	ldr	r1, [r7]
   13400:	bl	10fc8 <fputs_unlocked@plt>
   13404:	cmp	r4, r5
   13408:	bne	13384 <__assert_fail@plt+0x2128>
   1340c:	movw	r0, #41365	; 0xa195
   13410:	ldr	r1, [sp, #8]
   13414:	movt	r0, #2
   13418:	ldrb	r0, [r0]
   1341c:	add	r6, r1, #12
   13420:	movw	r1, #41404	; 0xa1bc
   13424:	movt	r1, #2
   13428:	cmp	r0, #0
   1342c:	movw	r0, #41220	; 0xa104
   13430:	movt	r0, #2
   13434:	moveq	r1, r6
   13438:	ldr	r8, [r0]
   1343c:	movw	r0, #41224	; 0xa108
   13440:	ldr	r9, [r1]
   13444:	movt	r0, #2
   13448:	ldr	r7, [r0]
   1344c:	cmp	r7, #0
   13450:	movwlt	r7, #32
   13454:	cmp	r8, #0
   13458:	cmpne	r9, #0
   1345c:	bne	1348c <__assert_fail@plt+0x2230>
   13460:	add	r0, r8, #1
   13464:	cmp	r0, r9
   13468:	bcs	135c8 <__assert_fail@plt+0x236c>
   1346c:	movw	sl, #41360	; 0xa190
   13470:	sub	r4, r9, #1
   13474:	movw	r9, #41332	; 0xa174
   13478:	uxtb	r0, r7
   1347c:	movt	r9, #2
   13480:	movt	sl, #2
   13484:	str	r0, [sp, #4]
   13488:	b	13544 <__assert_fail@plt+0x22e8>
   1348c:	movw	sl, #41332	; 0xa174
   13490:	movw	r5, #41360	; 0xa190
   13494:	uxtb	r0, r7
   13498:	mov	r4, #0
   1349c:	movt	sl, #2
   134a0:	movt	r5, #2
   134a4:	str	r0, [sp, #4]
   134a8:	ldr	r0, [sl]
   134ac:	ldr	r1, [r0, #20]
   134b0:	ldr	r2, [r0, #24]
   134b4:	cmp	r1, r2
   134b8:	bcs	1352c <__assert_fail@plt+0x22d0>
   134bc:	add	r2, r1, #1
   134c0:	str	r2, [r0, #20]
   134c4:	strb	r7, [r1]
   134c8:	ldr	r0, [r6]
   134cc:	cmp	r0, r4
   134d0:	bls	13500 <__assert_fail@plt+0x22a4>
   134d4:	ldr	r0, [sp, #8]
   134d8:	ldr	r0, [r0, #20]
   134dc:	add	r1, r0, r4, lsl #3
   134e0:	ldr	r2, [r1, #4]
   134e4:	cmp	r2, #0
   134e8:	beq	13500 <__assert_fail@plt+0x22a4>
   134ec:	ldr	r0, [r0, r4, lsl #3]
   134f0:	ldr	r3, [sl]
   134f4:	mov	r1, #1
   134f8:	bl	11040 <fwrite_unlocked@plt>
   134fc:	b	13514 <__assert_fail@plt+0x22b8>
   13500:	ldr	r0, [r5]
   13504:	cmp	r0, #0
   13508:	beq	13514 <__assert_fail@plt+0x22b8>
   1350c:	ldr	r1, [sl]
   13510:	bl	10fc8 <fputs_unlocked@plt>
   13514:	add	r4, r4, #1
   13518:	cmp	r4, r8
   1351c:	bcs	13460 <__assert_fail@plt+0x2204>
   13520:	cmp	r4, r9
   13524:	bcc	134a8 <__assert_fail@plt+0x224c>
   13528:	b	13460 <__assert_fail@plt+0x2204>
   1352c:	ldr	r1, [sp, #4]
   13530:	bl	111e4 <__overflow@plt>
   13534:	b	134c8 <__assert_fail@plt+0x226c>
   13538:	ldr	r1, [sp, #4]
   1353c:	bl	111e4 <__overflow@plt>
   13540:	b	1356c <__assert_fail@plt+0x2310>
   13544:	ldr	r0, [r9]
   13548:	mov	r5, r8
   1354c:	add	r8, r8, #1
   13550:	ldr	r1, [r0, #20]
   13554:	ldr	r2, [r0, #24]
   13558:	cmp	r1, r2
   1355c:	bcs	13538 <__assert_fail@plt+0x22dc>
   13560:	add	r2, r1, #1
   13564:	str	r2, [r0, #20]
   13568:	strb	r7, [r1]
   1356c:	ldr	r0, [r6]
   13570:	cmp	r0, r8
   13574:	bls	135ac <__assert_fail@plt+0x2350>
   13578:	ldr	r0, [sp, #8]
   1357c:	ldr	r0, [r0, #20]
   13580:	add	r0, r0, r5, lsl #3
   13584:	ldr	r2, [r0, #12]
   13588:	cmp	r2, #0
   1358c:	beq	135ac <__assert_fail@plt+0x2350>
   13590:	ldr	r0, [r0, #8]
   13594:	ldr	r3, [r9]
   13598:	mov	r1, #1
   1359c:	bl	11040 <fwrite_unlocked@plt>
   135a0:	cmp	r4, r8
   135a4:	bne	13544 <__assert_fail@plt+0x22e8>
   135a8:	b	135c8 <__assert_fail@plt+0x236c>
   135ac:	ldr	r0, [sl]
   135b0:	cmp	r0, #0
   135b4:	beq	135c0 <__assert_fail@plt+0x2364>
   135b8:	ldr	r1, [r9]
   135bc:	bl	10fc8 <fputs_unlocked@plt>
   135c0:	cmp	r4, r8
   135c4:	bne	13544 <__assert_fail@plt+0x22e8>
   135c8:	movw	r0, #41366	; 0xa196
   135cc:	mov	r1, #10
   135d0:	movt	r0, #2
   135d4:	ldrb	r0, [r0]
   135d8:	cmp	r0, #0
   135dc:	movw	r0, #41332	; 0xa174
   135e0:	movt	r0, #2
   135e4:	movwne	r1, #0
   135e8:	ldr	r0, [r0]
   135ec:	ldr	r2, [r0, #20]
   135f0:	ldr	r3, [r0, #24]
   135f4:	cmp	r2, r3
   135f8:	addcc	r3, r2, #1
   135fc:	strcc	r3, [r0, #20]
   13600:	strbcc	r1, [r2]
   13604:	subcc	sp, fp, #28
   13608:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1360c:	sub	sp, fp, #28
   13610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13614:	b	111e4 <__overflow@plt>
   13618:	push	{r4, r5, fp, lr}
   1361c:	add	fp, sp, #8
   13620:	mov	r5, r0
   13624:	ldr	r0, [r0, #12]
   13628:	mov	r4, #0
   1362c:	mov	ip, #0
   13630:	cmp	r0, r2
   13634:	mov	r0, #0
   13638:	ldrhi	r5, [r5, #20]
   1363c:	ldrhi	r0, [r5, r2, lsl #3]!
   13640:	ldr	r2, [r1, #12]
   13644:	ldrhi	r4, [r5, #4]
   13648:	cmp	r2, r3
   1364c:	mov	r5, #0
   13650:	ldrhi	r1, [r1, #20]
   13654:	ldrhi	ip, [r1, r3, lsl #3]!
   13658:	ldrhi	r5, [r1, #4]
   1365c:	cmp	r4, #0
   13660:	beq	1369c <__assert_fail@plt+0x2440>
   13664:	cmp	r5, #0
   13668:	moveq	r0, #1
   1366c:	popeq	{r4, r5, fp, pc}
   13670:	movw	r1, #41364	; 0xa194
   13674:	movt	r1, #2
   13678:	ldrb	r1, [r1]
   1367c:	cmp	r1, #1
   13680:	bne	136ac <__assert_fail@plt+0x2450>
   13684:	cmp	r4, r5
   13688:	mov	r2, r5
   1368c:	mov	r1, ip
   13690:	movcc	r2, r4
   13694:	bl	141e0 <__assert_fail@plt+0x2f84>
   13698:	b	136e8 <__assert_fail@plt+0x248c>
   1369c:	cmp	r5, #0
   136a0:	mvnne	r5, #0
   136a4:	mov	r0, r5
   136a8:	pop	{r4, r5, fp, pc}
   136ac:	movw	r1, #41344	; 0xa180
   136b0:	movt	r1, #2
   136b4:	ldrb	r1, [r1]
   136b8:	cmp	r1, #0
   136bc:	beq	136d4 <__assert_fail@plt+0x2478>
   136c0:	mov	r1, r4
   136c4:	mov	r2, ip
   136c8:	mov	r3, r5
   136cc:	pop	{r4, r5, fp, lr}
   136d0:	b	16cb0 <__assert_fail@plt+0x5a54>
   136d4:	cmp	r4, r5
   136d8:	mov	r2, r5
   136dc:	mov	r1, ip
   136e0:	movcc	r2, r4
   136e4:	bl	1104c <memcmp@plt>
   136e8:	cmp	r0, #0
   136ec:	popne	{r4, r5, fp, pc}
   136f0:	subs	r0, r4, r5
   136f4:	movwne	r0, #1
   136f8:	mvncc	r0, #0
   136fc:	pop	{r4, r5, fp, pc}
   13700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13704:	add	fp, sp, #28
   13708:	sub	sp, sp, #44	; 0x2c
   1370c:	movw	r9, #41432	; 0xa1d8
   13710:	mov	r5, r1
   13714:	sub	r8, r2, #1
   13718:	mov	r4, r0
   1371c:	mov	r6, r2
   13720:	movt	r9, #2
   13724:	ldr	r0, [r5]
   13728:	ldr	r1, [r9, r8, lsl #2]
   1372c:	cmp	r0, r1
   13730:	beq	1374c <__assert_fail@plt+0x24f0>
   13734:	mov	sl, r0
   13738:	cmp	sl, #0
   1373c:	beq	13768 <__assert_fail@plt+0x250c>
   13740:	mov	r0, #0
   13744:	str	r0, [sl, #12]
   13748:	b	1377c <__assert_fail@plt+0x2520>
   1374c:	movw	r1, #41380	; 0xa1a4
   13750:	movt	r1, #2
   13754:	ldr	sl, [r1, r8, lsl #2]
   13758:	str	r0, [r1, r8, lsl #2]
   1375c:	str	sl, [r5]
   13760:	cmp	sl, #0
   13764:	bne	13740 <__assert_fail@plt+0x24e4>
   13768:	mov	r0, #1
   1376c:	mov	r1, #24
   13770:	bl	16b20 <__assert_fail@plt+0x58c4>
   13774:	mov	sl, r0
   13778:	str	r0, [r5]
   1377c:	movw	r0, #41366	; 0xa196
   13780:	mov	r2, #10
   13784:	mov	r1, r4
   13788:	movt	r0, #2
   1378c:	ldrb	r0, [r0]
   13790:	cmp	r0, #0
   13794:	mov	r0, sl
   13798:	movwne	r2, #0
   1379c:	bl	140ec <__assert_fail@plt+0x2e90>
   137a0:	cmp	r0, #0
   137a4:	beq	138a4 <__assert_fail@plt+0x2648>
   137a8:	movw	r1, #41440	; 0xa1e0
   137ac:	str	r6, [sp, #32]
   137b0:	movt	r1, #2
   137b4:	ldr	r0, [r1, r8, lsl #3]!
   137b8:	adds	r0, r0, #1
   137bc:	str	r1, [sp, #28]
   137c0:	str	r0, [r1]
   137c4:	ldr	r0, [r1, #4]
   137c8:	adc	r0, r0, #0
   137cc:	str	r0, [r1, #4]
   137d0:	ldmib	sl, {r0, r6}
   137d4:	add	r4, r6, r0
   137d8:	sub	r1, r4, #1
   137dc:	cmp	r6, r1
   137e0:	str	r1, [fp, #-32]	; 0xffffffe0
   137e4:	beq	13a78 <__assert_fail@plt+0x281c>
   137e8:	movw	r1, #41224	; 0xa108
   137ec:	str	r8, [sp, #36]	; 0x24
   137f0:	movt	r1, #2
   137f4:	ldr	r7, [r1]
   137f8:	cmp	r7, #0
   137fc:	blt	138d8 <__assert_fail@plt+0x267c>
   13800:	cmp	r7, #10
   13804:	beq	138d8 <__assert_fail@plt+0x267c>
   13808:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1380c:	mov	r1, r7
   13810:	sub	r2, r0, r6
   13814:	mov	r0, r6
   13818:	bl	111a8 <memchr@plt>
   1381c:	cmp	r0, #0
   13820:	beq	13a24 <__assert_fail@plt+0x27c8>
   13824:	ldr	r8, [sl, #12]
   13828:	mov	r4, r0
   1382c:	add	r5, sl, #16
   13830:	ldr	r0, [r5]
   13834:	sub	r9, r4, r6
   13838:	cmp	r8, r0
   1383c:	bcs	13848 <__assert_fail@plt+0x25ec>
   13840:	ldr	r0, [sl, #20]
   13844:	b	1386c <__assert_fail@plt+0x2610>
   13848:	ldr	r0, [sl, #20]
   1384c:	mov	r1, r5
   13850:	mov	r2, #8
   13854:	bl	168b8 <__assert_fail@plt+0x565c>
   13858:	movw	r1, #41224	; 0xa108
   1385c:	str	r0, [sl, #20]
   13860:	movt	r1, #2
   13864:	ldr	r8, [sl, #12]
   13868:	ldr	r7, [r1]
   1386c:	str	r6, [r0, r8, lsl #3]!
   13870:	add	r6, r4, #1
   13874:	add	r8, r8, #1
   13878:	mov	r1, r7
   1387c:	str	r9, [r0, #4]
   13880:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13884:	str	r8, [sl, #12]
   13888:	sub	r2, r0, r6
   1388c:	mov	r0, r6
   13890:	bl	111a8 <memchr@plt>
   13894:	mov	r4, r0
   13898:	cmp	r0, #0
   1389c:	bne	13830 <__assert_fail@plt+0x25d4>
   138a0:	b	13a24 <__assert_fail@plt+0x27c8>
   138a4:	ldrb	r0, [r4]
   138a8:	tst	r0, #32
   138ac:	bne	13ba0 <__assert_fail@plt+0x2944>
   138b0:	cmp	sl, #0
   138b4:	beq	1391c <__assert_fail@plt+0x26c0>
   138b8:	ldr	r0, [sl, #20]
   138bc:	bl	13ec0 <__assert_fail@plt+0x2c64>
   138c0:	mov	r4, #0
   138c4:	str	r4, [sl, #20]
   138c8:	ldr	r0, [sl, #8]
   138cc:	bl	13ec0 <__assert_fail@plt+0x2c64>
   138d0:	str	r4, [sl, #8]
   138d4:	b	13b94 <__assert_fail@plt+0x2938>
   138d8:	cmn	r7, #1
   138dc:	bgt	13a24 <__assert_fail@plt+0x27c8>
   138e0:	sub	r5, r0, #1
   138e4:	bl	11124 <__ctype_b_loc@plt>
   138e8:	mov	ip, r0
   138ec:	ldr	r0, [r0]
   138f0:	ldrb	r1, [r6]
   138f4:	cmp	r1, #10
   138f8:	beq	1390c <__assert_fail@plt+0x26b0>
   138fc:	add	r1, r0, r1, lsl #1
   13900:	ldrh	r1, [r1]
   13904:	ands	r1, r1, #1
   13908:	beq	13924 <__assert_fail@plt+0x26c8>
   1390c:	subs	r5, r5, #1
   13910:	add	r6, r6, #1
   13914:	bne	138f0 <__assert_fail@plt+0x2694>
   13918:	b	13a78 <__assert_fail@plt+0x281c>
   1391c:	mov	r4, #0
   13920:	b	13b94 <__assert_fail@plt+0x2938>
   13924:	sub	r5, r4, #3
   13928:	sub	r4, r4, #2
   1392c:	add	r1, sl, #16
   13930:	mov	r3, r6
   13934:	mov	r7, r3
   13938:	cmp	r4, r3
   1393c:	beq	13968 <__assert_fail@plt+0x270c>
   13940:	ldrb	r2, [r7, #1]
   13944:	add	r3, r7, #1
   13948:	mov	r8, #0
   1394c:	cmp	r2, #10
   13950:	beq	13970 <__assert_fail@plt+0x2714>
   13954:	add	r2, r0, r2, lsl #1
   13958:	ldrh	r2, [r2]
   1395c:	ands	r2, r2, #1
   13960:	beq	13934 <__assert_fail@plt+0x26d8>
   13964:	b	13970 <__assert_fail@plt+0x2714>
   13968:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1396c:	mov	r8, #1
   13970:	ldr	r2, [sl, #12]
   13974:	ldr	r0, [sl, #16]
   13978:	sub	r3, r3, r6
   1397c:	cmp	r2, r0
   13980:	bcs	1398c <__assert_fail@plt+0x2730>
   13984:	ldr	r0, [sl, #20]
   13988:	b	139b8 <__assert_fail@plt+0x275c>
   1398c:	ldr	r0, [sl, #20]
   13990:	mov	r2, #8
   13994:	str	ip, [sp, #24]
   13998:	mov	r9, r1
   1399c:	str	r3, [sp, #20]
   139a0:	bl	168b8 <__assert_fail@plt+0x565c>
   139a4:	str	r0, [sl, #20]
   139a8:	ldr	r3, [sp, #20]
   139ac:	ldr	ip, [sp, #24]
   139b0:	mov	r1, r9
   139b4:	ldr	r2, [sl, #12]
   139b8:	str	r6, [r0, r2, lsl #3]!
   139bc:	cmp	r8, #0
   139c0:	movw	r9, #41432	; 0xa1d8
   139c4:	ldr	r8, [sp, #36]	; 0x24
   139c8:	str	r3, [r0, #4]
   139cc:	add	r0, r2, #1
   139d0:	movt	r9, #2
   139d4:	str	r0, [sl, #12]
   139d8:	bne	13a78 <__assert_fail@plt+0x281c>
   139dc:	cmp	r5, r7
   139e0:	beq	13a20 <__assert_fail@plt+0x27c4>
   139e4:	ldr	r0, [ip]
   139e8:	ldrb	r2, [r7, #2]
   139ec:	cmp	r2, #10
   139f0:	beq	13a04 <__assert_fail@plt+0x27a8>
   139f4:	add	r2, r0, r2, lsl #1
   139f8:	ldrh	r2, [r2]
   139fc:	ands	r2, r2, #1
   13a00:	beq	13a14 <__assert_fail@plt+0x27b8>
   13a04:	add	r7, r7, #1
   13a08:	cmp	r5, r7
   13a0c:	bne	139e8 <__assert_fail@plt+0x278c>
   13a10:	b	13a20 <__assert_fail@plt+0x27c4>
   13a14:	add	r6, r7, #2
   13a18:	cmp	r5, r7
   13a1c:	bne	13930 <__assert_fail@plt+0x26d4>
   13a20:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13a24:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a28:	mov	r1, sl
   13a2c:	sub	r4, r0, r6
   13a30:	ldr	r0, [r1, #16]!
   13a34:	ldr	r2, [r1, #-4]
   13a38:	cmp	r2, r0
   13a3c:	bcs	13a48 <__assert_fail@plt+0x27ec>
   13a40:	ldr	r0, [sl, #20]
   13a44:	b	13a5c <__assert_fail@plt+0x2800>
   13a48:	ldr	r0, [sl, #20]
   13a4c:	mov	r2, #8
   13a50:	bl	168b8 <__assert_fail@plt+0x565c>
   13a54:	str	r0, [sl, #20]
   13a58:	ldr	r2, [sl, #12]
   13a5c:	ldr	r8, [sp, #36]	; 0x24
   13a60:	movw	r9, #41432	; 0xa1d8
   13a64:	str	r6, [r0, r2, lsl #3]!
   13a68:	movt	r9, #2
   13a6c:	str	r4, [r0, #4]
   13a70:	add	r0, r2, #1
   13a74:	str	r0, [sl, #12]
   13a78:	ldr	r0, [r9, r8, lsl #2]
   13a7c:	cmp	r0, #0
   13a80:	beq	13b8c <__assert_fail@plt+0x2930>
   13a84:	movw	r5, #41352	; 0xa188
   13a88:	movt	r5, #2
   13a8c:	ldr	r1, [r5]
   13a90:	cmp	r1, #1
   13a94:	beq	13ab4 <__assert_fail@plt+0x2858>
   13a98:	cmp	r1, #2
   13a9c:	beq	13b8c <__assert_fail@plt+0x2930>
   13aa0:	movw	r1, #41346	; 0xa182
   13aa4:	movt	r1, #2
   13aa8:	ldrb	r1, [r1]
   13aac:	cmp	r1, #1
   13ab0:	bne	13b8c <__assert_fail@plt+0x2930>
   13ab4:	movw	r4, #41347	; 0xa183
   13ab8:	movt	r4, #2
   13abc:	ldrb	r1, [r4, r8]
   13ac0:	cmp	r1, #0
   13ac4:	bne	13b8c <__assert_fail@plt+0x2930>
   13ac8:	ldr	r3, [sp, #32]
   13acc:	movw	r1, #41216	; 0xa100
   13ad0:	movw	r2, #41220	; 0xa104
   13ad4:	movt	r1, #2
   13ad8:	movt	r2, #2
   13adc:	cmp	r3, #1
   13ae0:	moveq	r2, r1
   13ae4:	mov	r1, sl
   13ae8:	ldr	r2, [r2]
   13aec:	mov	r3, r2
   13af0:	bl	13618 <__assert_fail@plt+0x23bc>
   13af4:	cmp	r0, #1
   13af8:	blt	13b8c <__assert_fail@plt+0x2930>
   13afc:	ldr	r0, [sl, #4]
   13b00:	cmp	r0, #0
   13b04:	beq	13b30 <__assert_fail@plt+0x28d4>
   13b08:	ldr	r1, [sl, #8]
   13b0c:	sub	r2, r0, #1
   13b10:	ldr	r7, [sp, #28]
   13b14:	mvn	r6, #-2147483648	; 0x80000000
   13b18:	ldrb	r1, [r1, r2]
   13b1c:	cmp	r1, #10
   13b20:	moveq	r0, r2
   13b24:	cmn	r0, #-2147483646	; 0x80000002
   13b28:	movls	r6, r0
   13b2c:	b	13b3c <__assert_fail@plt+0x28e0>
   13b30:	ldr	r7, [sp, #28]
   13b34:	mov	r0, #0
   13b38:	mov	r6, r0
   13b3c:	ldr	r5, [r5]
   13b40:	movw	r1, #38753	; 0x9761
   13b44:	mov	r0, #0
   13b48:	mov	r2, #5
   13b4c:	movt	r1, #1
   13b50:	bl	11058 <dcgettext@plt>
   13b54:	mov	r2, r0
   13b58:	movw	r0, #41368	; 0xa198
   13b5c:	movt	r0, #2
   13b60:	ldr	r3, [r0, r8, lsl #2]
   13b64:	ldrd	r0, [r7]
   13b68:	ldr	r7, [sl, #8]
   13b6c:	stm	sp, {r0, r1, r6, r7}
   13b70:	sub	r0, r5, #1
   13b74:	mov	r1, #0
   13b78:	clz	r0, r0
   13b7c:	lsr	r0, r0, #5
   13b80:	bl	110c4 <error@plt>
   13b84:	mov	r0, #1
   13b88:	strb	r0, [r4, r8]
   13b8c:	mov	r4, #1
   13b90:	str	sl, [r9, r8, lsl #2]
   13b94:	mov	r0, r4
   13b98:	sub	sp, fp, #28
   13b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba0:	bl	11160 <__errno_location@plt>
   13ba4:	ldr	r4, [r0]
   13ba8:	movw	r1, #38742	; 0x9756
   13bac:	mov	r0, #0
   13bb0:	mov	r2, #5
   13bb4:	movt	r1, #1
   13bb8:	bl	11058 <dcgettext@plt>
   13bbc:	mov	r2, r0
   13bc0:	mov	r0, #1
   13bc4:	mov	r1, r4
   13bc8:	bl	110c4 <error@plt>
   13bcc:	movw	r1, #41456	; 0xa1f0
   13bd0:	movt	r1, #2
   13bd4:	str	r0, [r1]
   13bd8:	bx	lr
   13bdc:	movw	r1, #41460	; 0xa1f4
   13be0:	movt	r1, #2
   13be4:	strb	r0, [r1]
   13be8:	bx	lr
   13bec:	push	{r4, r5, r6, sl, fp, lr}
   13bf0:	add	fp, sp, #16
   13bf4:	sub	sp, sp, #8
   13bf8:	movw	r0, #41332	; 0xa174
   13bfc:	movt	r0, #2
   13c00:	ldr	r0, [r0]
   13c04:	bl	1842c <__assert_fail@plt+0x71d0>
   13c08:	cmp	r0, #0
   13c0c:	beq	13c34 <__assert_fail@plt+0x29d8>
   13c10:	movw	r0, #41460	; 0xa1f4
   13c14:	movt	r0, #2
   13c18:	ldrb	r0, [r0]
   13c1c:	cmp	r0, #0
   13c20:	beq	13c54 <__assert_fail@plt+0x29f8>
   13c24:	bl	11160 <__errno_location@plt>
   13c28:	ldr	r0, [r0]
   13c2c:	cmp	r0, #32
   13c30:	bne	13c54 <__assert_fail@plt+0x29f8>
   13c34:	movw	r0, #41320	; 0xa168
   13c38:	movt	r0, #2
   13c3c:	ldr	r0, [r0]
   13c40:	bl	1842c <__assert_fail@plt+0x71d0>
   13c44:	cmp	r0, #0
   13c48:	subeq	sp, fp, #16
   13c4c:	popeq	{r4, r5, r6, sl, fp, pc}
   13c50:	b	13cc4 <__assert_fail@plt+0x2a68>
   13c54:	movw	r1, #38983	; 0x9847
   13c58:	mov	r0, #0
   13c5c:	mov	r2, #5
   13c60:	movt	r1, #1
   13c64:	bl	11058 <dcgettext@plt>
   13c68:	mov	r4, r0
   13c6c:	movw	r0, #41456	; 0xa1f0
   13c70:	movt	r0, #2
   13c74:	ldr	r6, [r0]
   13c78:	bl	11160 <__errno_location@plt>
   13c7c:	ldr	r5, [r0]
   13c80:	cmp	r6, #0
   13c84:	bne	13ca0 <__assert_fail@plt+0x2a44>
   13c88:	movw	r2, #38722	; 0x9742
   13c8c:	mov	r0, #0
   13c90:	mov	r1, r5
   13c94:	mov	r3, r4
   13c98:	movt	r2, #1
   13c9c:	b	13cc0 <__assert_fail@plt+0x2a64>
   13ca0:	mov	r0, r6
   13ca4:	bl	15ae4 <__assert_fail@plt+0x4888>
   13ca8:	movw	r2, #38995	; 0x9853
   13cac:	mov	r3, r0
   13cb0:	str	r4, [sp]
   13cb4:	mov	r0, #0
   13cb8:	mov	r1, r5
   13cbc:	movt	r2, #1
   13cc0:	bl	110c4 <error@plt>
   13cc4:	movw	r0, #41236	; 0xa114
   13cc8:	movt	r0, #2
   13ccc:	ldr	r0, [r0]
   13cd0:	bl	11010 <_exit@plt>
   13cd4:	b	10fec <posix_fadvise64@plt>
   13cd8:	cmp	r0, #0
   13cdc:	bxeq	lr
   13ce0:	push	{r4, sl, fp, lr}
   13ce4:	add	fp, sp, #8
   13ce8:	sub	sp, sp, #16
   13cec:	mov	r4, r1
   13cf0:	bl	11190 <fileno@plt>
   13cf4:	mov	r1, #0
   13cf8:	mov	r2, #0
   13cfc:	mov	r3, #0
   13d00:	str	r1, [sp]
   13d04:	stmib	sp, {r1, r4}
   13d08:	bl	10fec <posix_fadvise64@plt>
   13d0c:	sub	sp, fp, #8
   13d10:	pop	{r4, sl, fp, pc}
   13d14:	push	{r4, r5, r6, sl, fp, lr}
   13d18:	add	fp, sp, #16
   13d1c:	sub	sp, sp, #8
   13d20:	mov	r4, r0
   13d24:	bl	11190 <fileno@plt>
   13d28:	cmn	r0, #1
   13d2c:	ble	13da0 <__assert_fail@plt+0x2b44>
   13d30:	mov	r0, r4
   13d34:	bl	110f4 <__freading@plt>
   13d38:	cmp	r0, #0
   13d3c:	beq	13d68 <__assert_fail@plt+0x2b0c>
   13d40:	mov	r0, r4
   13d44:	bl	11190 <fileno@plt>
   13d48:	mov	r1, #1
   13d4c:	mov	r2, #0
   13d50:	mov	r3, #0
   13d54:	str	r1, [sp]
   13d58:	bl	11094 <lseek64@plt>
   13d5c:	and	r0, r0, r1
   13d60:	cmn	r0, #1
   13d64:	beq	13da0 <__assert_fail@plt+0x2b44>
   13d68:	mov	r0, r4
   13d6c:	bl	13db0 <__assert_fail@plt+0x2b54>
   13d70:	cmp	r0, #0
   13d74:	beq	13da0 <__assert_fail@plt+0x2b44>
   13d78:	bl	11160 <__errno_location@plt>
   13d7c:	ldr	r6, [r0]
   13d80:	mov	r5, r0
   13d84:	mov	r0, r4
   13d88:	bl	111b4 <fclose@plt>
   13d8c:	cmp	r6, #0
   13d90:	strne	r6, [r5]
   13d94:	mvnne	r0, #0
   13d98:	sub	sp, fp, #16
   13d9c:	pop	{r4, r5, r6, sl, fp, pc}
   13da0:	mov	r0, r4
   13da4:	sub	sp, fp, #16
   13da8:	pop	{r4, r5, r6, sl, fp, lr}
   13dac:	b	111b4 <fclose@plt>
   13db0:	push	{r4, sl, fp, lr}
   13db4:	add	fp, sp, #8
   13db8:	sub	sp, sp, #8
   13dbc:	mov	r4, r0
   13dc0:	cmp	r0, #0
   13dc4:	beq	13de0 <__assert_fail@plt+0x2b84>
   13dc8:	mov	r0, r4
   13dcc:	bl	110f4 <__freading@plt>
   13dd0:	cmp	r0, #0
   13dd4:	ldrbne	r0, [r4, #1]
   13dd8:	tstne	r0, #1
   13ddc:	bne	13df0 <__assert_fail@plt+0x2b94>
   13de0:	mov	r0, r4
   13de4:	sub	sp, fp, #8
   13de8:	pop	{r4, sl, fp, lr}
   13dec:	b	10ff8 <fflush@plt>
   13df0:	mov	r0, #1
   13df4:	mov	r2, #0
   13df8:	mov	r3, #0
   13dfc:	str	r0, [sp]
   13e00:	mov	r0, r4
   13e04:	bl	13ee8 <__assert_fail@plt+0x2c8c>
   13e08:	b	13de0 <__assert_fail@plt+0x2b84>
   13e0c:	push	{r4, r5, r6, r7, fp, lr}
   13e10:	add	fp, sp, #16
   13e14:	mov	r5, r1
   13e18:	bl	11214 <fopen64@plt>
   13e1c:	mov	r4, #0
   13e20:	cmp	r0, #0
   13e24:	beq	13e74 <__assert_fail@plt+0x2c18>
   13e28:	mov	r6, r0
   13e2c:	bl	11190 <fileno@plt>
   13e30:	cmp	r0, #2
   13e34:	movhi	r0, r6
   13e38:	pophi	{r4, r5, r6, r7, fp, pc}
   13e3c:	bl	16048 <__assert_fail@plt+0x4dec>
   13e40:	cmn	r0, #1
   13e44:	ble	13ea0 <__assert_fail@plt+0x2c44>
   13e48:	mov	r7, r0
   13e4c:	mov	r0, r6
   13e50:	bl	13d14 <__assert_fail@plt+0x2ab8>
   13e54:	cmp	r0, #0
   13e58:	bne	13e7c <__assert_fail@plt+0x2c20>
   13e5c:	mov	r0, r7
   13e60:	mov	r1, r5
   13e64:	bl	10fb0 <fdopen@plt>
   13e68:	mov	r4, r0
   13e6c:	cmp	r0, #0
   13e70:	beq	13e7c <__assert_fail@plt+0x2c20>
   13e74:	mov	r0, r4
   13e78:	pop	{r4, r5, r6, r7, fp, pc}
   13e7c:	bl	11160 <__errno_location@plt>
   13e80:	ldr	r5, [r0]
   13e84:	mov	r4, r0
   13e88:	mov	r0, r7
   13e8c:	bl	11250 <close@plt>
   13e90:	str	r5, [r4]
   13e94:	mov	r4, #0
   13e98:	mov	r0, r4
   13e9c:	pop	{r4, r5, r6, r7, fp, pc}
   13ea0:	bl	11160 <__errno_location@plt>
   13ea4:	ldr	r7, [r0]
   13ea8:	mov	r5, r0
   13eac:	mov	r0, r6
   13eb0:	bl	13d14 <__assert_fail@plt+0x2ab8>
   13eb4:	mov	r0, r4
   13eb8:	str	r7, [r5]
   13ebc:	pop	{r4, r5, r6, r7, fp, pc}
   13ec0:	push	{r4, r5, r6, sl, fp, lr}
   13ec4:	add	fp, sp, #16
   13ec8:	mov	r4, r0
   13ecc:	bl	11160 <__errno_location@plt>
   13ed0:	ldr	r6, [r0]
   13ed4:	mov	r5, r0
   13ed8:	mov	r0, r4
   13edc:	bl	11004 <free@plt>
   13ee0:	str	r6, [r5]
   13ee4:	pop	{r4, r5, r6, sl, fp, pc}
   13ee8:	push	{r4, r5, r6, r7, fp, lr}
   13eec:	add	fp, sp, #16
   13ef0:	sub	sp, sp, #8
   13ef4:	mov	r4, r0
   13ef8:	ldr	r0, [r0, #4]
   13efc:	mov	r5, r3
   13f00:	mov	r6, r2
   13f04:	ldr	r1, [r4, #8]
   13f08:	cmp	r1, r0
   13f0c:	bne	13f28 <__assert_fail@plt+0x2ccc>
   13f10:	ldrd	r0, [r4, #16]
   13f14:	cmp	r1, r0
   13f18:	bne	13f28 <__assert_fail@plt+0x2ccc>
   13f1c:	ldr	r0, [r4, #36]	; 0x24
   13f20:	cmp	r0, #0
   13f24:	beq	13f40 <__assert_fail@plt+0x2ce4>
   13f28:	mov	r0, r4
   13f2c:	mov	r2, r6
   13f30:	mov	r3, r5
   13f34:	sub	sp, fp, #16
   13f38:	pop	{r4, r5, r6, r7, fp, lr}
   13f3c:	b	111c0 <fseeko64@plt>
   13f40:	ldr	r7, [fp, #8]
   13f44:	mov	r0, r4
   13f48:	bl	11190 <fileno@plt>
   13f4c:	mov	r2, r6
   13f50:	mov	r3, r5
   13f54:	str	r7, [sp]
   13f58:	bl	11094 <lseek64@plt>
   13f5c:	and	r2, r0, r1
   13f60:	cmn	r2, #1
   13f64:	mvneq	r0, #0
   13f68:	subeq	sp, fp, #16
   13f6c:	popeq	{r4, r5, r6, r7, fp, pc}
   13f70:	strd	r0, [r4, #80]	; 0x50
   13f74:	ldr	r0, [r4]
   13f78:	bic	r0, r0, #16
   13f7c:	str	r0, [r4]
   13f80:	mov	r0, #0
   13f84:	sub	sp, fp, #16
   13f88:	pop	{r4, r5, r6, r7, fp, pc}
   13f8c:	push	{r4, sl, fp, lr}
   13f90:	add	fp, sp, #8
   13f94:	sub	sp, sp, #264	; 0x108
   13f98:	add	r1, sp, #7
   13f9c:	movw	r2, #257	; 0x101
   13fa0:	bl	15fa4 <__assert_fail@plt+0x4d48>
   13fa4:	mov	r4, #0
   13fa8:	cmp	r0, #0
   13fac:	bne	13fe4 <__assert_fail@plt+0x2d88>
   13fb0:	movw	r1, #39002	; 0x985a
   13fb4:	add	r0, sp, #7
   13fb8:	movt	r1, #1
   13fbc:	bl	10fe0 <strcmp@plt>
   13fc0:	cmp	r0, #0
   13fc4:	beq	13fe4 <__assert_fail@plt+0x2d88>
   13fc8:	movw	r1, #39004	; 0x985c
   13fcc:	add	r0, sp, #7
   13fd0:	movt	r1, #1
   13fd4:	bl	10fe0 <strcmp@plt>
   13fd8:	mov	r4, r0
   13fdc:	cmp	r0, #0
   13fe0:	movwne	r4, #1
   13fe4:	mov	r0, r4
   13fe8:	sub	sp, fp, #8
   13fec:	pop	{r4, sl, fp, pc}
   13ff0:	mov	r1, #0
   13ff4:	str	r1, [r0]
   13ff8:	str	r1, [r0, #4]
   13ffc:	str	r1, [r0, #8]
   14000:	bx	lr
   14004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14008:	add	fp, sp, #28
   1400c:	sub	sp, sp, #4
   14010:	mov	r9, r0
   14014:	ldrb	r0, [r1]
   14018:	tst	r0, #16
   1401c:	bne	140dc <__assert_fail@plt+0x2e80>
   14020:	ldr	r4, [r9, #8]
   14024:	ldr	r0, [r9]
   14028:	mov	r5, r1
   1402c:	mov	r8, #1
   14030:	add	sl, r4, r0
   14034:	mov	r6, r4
   14038:	ldmib	r5, {r0, r1}
   1403c:	cmp	r0, r1
   14040:	bcs	14098 <__assert_fail@plt+0x2e3c>
   14044:	add	r1, r0, #1
   14048:	str	r1, [r5, #4]
   1404c:	ldrb	r7, [r0]
   14050:	cmp	r6, sl
   14054:	bne	14088 <__assert_fail@plt+0x2e2c>
   14058:	ldr	r6, [r9]
   1405c:	mov	r0, r4
   14060:	mov	r1, r9
   14064:	mov	r2, #1
   14068:	mvn	r3, #0
   1406c:	str	r8, [sp]
   14070:	bl	1693c <__assert_fail@plt+0x56e0>
   14074:	str	r0, [r9, #8]
   14078:	mov	r4, r0
   1407c:	add	r6, r0, r6
   14080:	ldr	r0, [r9]
   14084:	add	sl, r4, r0
   14088:	strb	r7, [r6], #1
   1408c:	cmp	r7, #10
   14090:	bne	14038 <__assert_fail@plt+0x2ddc>
   14094:	b	140d0 <__assert_fail@plt+0x2e74>
   14098:	mov	r0, r5
   1409c:	bl	111d8 <__uflow@plt>
   140a0:	mov	r7, r0
   140a4:	cmn	r0, #1
   140a8:	bne	14050 <__assert_fail@plt+0x2df4>
   140ac:	cmp	r6, r4
   140b0:	beq	140dc <__assert_fail@plt+0x2e80>
   140b4:	ldrb	r0, [r5]
   140b8:	tst	r0, #32
   140bc:	bne	140dc <__assert_fail@plt+0x2e80>
   140c0:	ldrb	r0, [r6, #-1]
   140c4:	mov	r7, #10
   140c8:	cmp	r0, #10
   140cc:	bne	14050 <__assert_fail@plt+0x2df4>
   140d0:	sub	r0, r6, r4
   140d4:	str	r0, [r9, #4]
   140d8:	b	140e0 <__assert_fail@plt+0x2e84>
   140dc:	mov	r9, #0
   140e0:	mov	r0, r9
   140e4:	sub	sp, fp, #28
   140e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140f0:	add	fp, sp, #28
   140f4:	sub	sp, sp, #4
   140f8:	mov	sl, r0
   140fc:	ldrb	r0, [r1]
   14100:	tst	r0, #16
   14104:	bne	141c8 <__assert_fail@plt+0x2f6c>
   14108:	ldr	r4, [sl, #8]
   1410c:	ldr	r0, [sl]
   14110:	mov	r8, r2
   14114:	mov	r6, r1
   14118:	add	r9, r4, r0
   1411c:	mov	r7, r4
   14120:	ldmib	r6, {r0, r1}
   14124:	cmp	r0, r1
   14128:	bcs	14184 <__assert_fail@plt+0x2f28>
   1412c:	add	r1, r0, #1
   14130:	str	r1, [r6, #4]
   14134:	ldrb	r5, [r0]
   14138:	cmp	r7, r9
   1413c:	bne	14174 <__assert_fail@plt+0x2f18>
   14140:	ldr	r7, [sl]
   14144:	mov	r0, #1
   14148:	mov	r1, sl
   1414c:	mov	r2, #1
   14150:	mvn	r3, #0
   14154:	str	r0, [sp]
   14158:	mov	r0, r4
   1415c:	bl	1693c <__assert_fail@plt+0x56e0>
   14160:	str	r0, [sl, #8]
   14164:	mov	r4, r0
   14168:	add	r7, r0, r7
   1416c:	ldr	r0, [sl]
   14170:	add	r9, r4, r0
   14174:	strb	r5, [r7], #1
   14178:	cmp	r5, r8
   1417c:	bne	14120 <__assert_fail@plt+0x2ec4>
   14180:	b	141bc <__assert_fail@plt+0x2f60>
   14184:	mov	r0, r6
   14188:	bl	111d8 <__uflow@plt>
   1418c:	mov	r5, r0
   14190:	cmn	r0, #1
   14194:	bne	14138 <__assert_fail@plt+0x2edc>
   14198:	cmp	r7, r4
   1419c:	beq	141c8 <__assert_fail@plt+0x2f6c>
   141a0:	ldrb	r0, [r6]
   141a4:	tst	r0, #32
   141a8:	bne	141c8 <__assert_fail@plt+0x2f6c>
   141ac:	ldrb	r0, [r7, #-1]
   141b0:	mov	r5, r8
   141b4:	cmp	r0, r8
   141b8:	bne	14138 <__assert_fail@plt+0x2edc>
   141bc:	sub	r0, r7, r4
   141c0:	str	r0, [sl, #4]
   141c4:	b	141cc <__assert_fail@plt+0x2f70>
   141c8:	mov	sl, #0
   141cc:	mov	r0, sl
   141d0:	sub	sp, fp, #28
   141d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d8:	ldr	r0, [r0, #8]
   141dc:	b	13ec0 <__assert_fail@plt+0x2c64>
   141e0:	push	{r4, r5, r6, sl, fp, lr}
   141e4:	add	fp, sp, #16
   141e8:	cmp	r2, #0
   141ec:	moveq	r0, #0
   141f0:	popeq	{r4, r5, r6, sl, fp, pc}
   141f4:	mov	r4, r2
   141f8:	mov	r5, r1
   141fc:	mov	r6, r0
   14200:	bl	11100 <__ctype_toupper_loc@plt>
   14204:	ldr	r1, [r0]
   14208:	mov	r2, #0
   1420c:	ldrb	r0, [r5, r2]
   14210:	ldrb	r3, [r6, r2]
   14214:	ldr	r0, [r1, r0, lsl #2]
   14218:	ldr	r3, [r1, r3, lsl #2]
   1421c:	subs	r0, r3, r0
   14220:	popne	{r4, r5, r6, sl, fp, pc}
   14224:	add	r2, r2, #1
   14228:	cmp	r2, r4
   1422c:	movcs	r0, #0
   14230:	popcs	{r4, r5, r6, sl, fp, pc}
   14234:	b	1420c <__assert_fail@plt+0x2fb0>
   14238:	push	{r4, r5, fp, lr}
   1423c:	add	fp, sp, #8
   14240:	cmp	r0, #0
   14244:	beq	142d8 <__assert_fail@plt+0x307c>
   14248:	mov	r1, #47	; 0x2f
   1424c:	mov	r4, r0
   14250:	bl	111fc <strrchr@plt>
   14254:	cmp	r0, #0
   14258:	mov	r5, r4
   1425c:	addne	r5, r0, #1
   14260:	sub	r0, r5, r4
   14264:	cmp	r0, #7
   14268:	blt	142bc <__assert_fail@plt+0x3060>
   1426c:	movw	r1, #39066	; 0x989a
   14270:	sub	r0, r5, #7
   14274:	mov	r2, #7
   14278:	movt	r1, #1
   1427c:	bl	11238 <strncmp@plt>
   14280:	cmp	r0, #0
   14284:	bne	142bc <__assert_fail@plt+0x3060>
   14288:	movw	r1, #39074	; 0x98a2
   1428c:	mov	r0, r5
   14290:	mov	r2, #3
   14294:	movt	r1, #1
   14298:	bl	11238 <strncmp@plt>
   1429c:	cmp	r0, #0
   142a0:	beq	142ac <__assert_fail@plt+0x3050>
   142a4:	mov	r4, r5
   142a8:	b	142bc <__assert_fail@plt+0x3060>
   142ac:	movw	r0, #41304	; 0xa158
   142b0:	add	r4, r5, #3
   142b4:	movt	r0, #2
   142b8:	str	r4, [r0]
   142bc:	movw	r0, #41308	; 0xa15c
   142c0:	movt	r0, #2
   142c4:	str	r4, [r0]
   142c8:	movw	r0, #41464	; 0xa1f8
   142cc:	movt	r0, #2
   142d0:	str	r4, [r0]
   142d4:	pop	{r4, r5, fp, pc}
   142d8:	movw	r0, #41320	; 0xa168
   142dc:	mov	r1, #55	; 0x37
   142e0:	mov	r2, #1
   142e4:	movt	r0, #2
   142e8:	ldr	r3, [r0]
   142ec:	movw	r0, #39010	; 0x9862
   142f0:	movt	r0, #1
   142f4:	bl	11088 <fwrite@plt>
   142f8:	bl	11244 <abort@plt>
   142fc:	push	{r4, r5, r6, sl, fp, lr}
   14300:	add	fp, sp, #16
   14304:	mov	r4, r0
   14308:	movw	r0, #41472	; 0xa200
   1430c:	movt	r0, #2
   14310:	cmp	r4, #0
   14314:	moveq	r4, r0
   14318:	bl	11160 <__errno_location@plt>
   1431c:	ldr	r6, [r0]
   14320:	mov	r5, r0
   14324:	mov	r0, r4
   14328:	mov	r1, #48	; 0x30
   1432c:	bl	16b6c <__assert_fail@plt+0x5910>
   14330:	str	r6, [r5]
   14334:	pop	{r4, r5, r6, sl, fp, pc}
   14338:	movw	r1, #41472	; 0xa200
   1433c:	cmp	r0, #0
   14340:	movt	r1, #2
   14344:	movne	r1, r0
   14348:	ldr	r0, [r1]
   1434c:	bx	lr
   14350:	movw	r2, #41472	; 0xa200
   14354:	cmp	r0, #0
   14358:	movt	r2, #2
   1435c:	movne	r2, r0
   14360:	str	r1, [r2]
   14364:	bx	lr
   14368:	movw	r3, #41472	; 0xa200
   1436c:	cmp	r0, #0
   14370:	movt	r3, #2
   14374:	movne	r3, r0
   14378:	ubfx	r0, r1, #5, #3
   1437c:	and	r1, r1, #31
   14380:	add	r0, r3, r0, lsl #2
   14384:	ldr	r3, [r0, #8]
   14388:	eor	r2, r2, r3, lsr r1
   1438c:	and	r2, r2, #1
   14390:	eor	r2, r3, r2, lsl r1
   14394:	str	r2, [r0, #8]
   14398:	mov	r0, #1
   1439c:	and	r0, r0, r3, lsr r1
   143a0:	bx	lr
   143a4:	movw	r2, #41472	; 0xa200
   143a8:	cmp	r0, #0
   143ac:	movt	r2, #2
   143b0:	movne	r2, r0
   143b4:	ldr	r0, [r2, #4]
   143b8:	str	r1, [r2, #4]
   143bc:	bx	lr
   143c0:	movw	r3, #41472	; 0xa200
   143c4:	cmp	r0, #0
   143c8:	movt	r3, #2
   143cc:	movne	r3, r0
   143d0:	cmp	r1, #0
   143d4:	mov	r0, #10
   143d8:	cmpne	r2, #0
   143dc:	str	r0, [r3]
   143e0:	bne	143f0 <__assert_fail@plt+0x3194>
   143e4:	push	{fp, lr}
   143e8:	mov	fp, sp
   143ec:	bl	11244 <abort@plt>
   143f0:	str	r1, [r3, #40]	; 0x28
   143f4:	str	r2, [r3, #44]	; 0x2c
   143f8:	bx	lr
   143fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14400:	add	fp, sp, #28
   14404:	sub	sp, sp, #20
   14408:	mov	r7, r0
   1440c:	ldr	r0, [fp, #8]
   14410:	movw	r5, #41472	; 0xa200
   14414:	mov	r8, r3
   14418:	mov	r9, r2
   1441c:	mov	sl, r1
   14420:	movt	r5, #2
   14424:	cmp	r0, #0
   14428:	movne	r5, r0
   1442c:	bl	11160 <__errno_location@plt>
   14430:	mov	r4, r0
   14434:	ldm	r5, {r0, r1}
   14438:	ldr	r2, [r5, #40]	; 0x28
   1443c:	ldr	r3, [r5, #44]	; 0x2c
   14440:	add	r5, r5, #8
   14444:	ldr	r6, [r4]
   14448:	stm	sp, {r0, r1, r5}
   1444c:	str	r2, [sp, #12]
   14450:	str	r3, [sp, #16]
   14454:	mov	r0, r7
   14458:	mov	r1, sl
   1445c:	mov	r2, r9
   14460:	mov	r3, r8
   14464:	bl	14474 <__assert_fail@plt+0x3218>
   14468:	str	r6, [r4]
   1446c:	sub	sp, fp, #28
   14470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14478:	add	fp, sp, #28
   1447c:	sub	sp, sp, #156	; 0x9c
   14480:	str	r0, [sp, #80]	; 0x50
   14484:	ldr	r0, [fp, #12]
   14488:	mov	r6, r1
   1448c:	mov	r9, r3
   14490:	str	r2, [fp, #-84]	; 0xffffffac
   14494:	and	r1, r0, #4
   14498:	str	r1, [sp, #32]
   1449c:	and	r1, r0, #1
   144a0:	str	r1, [sp, #36]	; 0x24
   144a4:	ubfx	r4, r0, #1, #1
   144a8:	bl	110a0 <__ctype_get_mb_cur_max@plt>
   144ac:	str	r0, [sp, #40]	; 0x28
   144b0:	ldr	r0, [fp, #24]
   144b4:	ldr	r7, [fp, #8]
   144b8:	mov	r1, #0
   144bc:	mov	r5, #1
   144c0:	str	r1, [fp, #-56]	; 0xffffffc8
   144c4:	mov	r1, #0
   144c8:	str	r1, [sp, #60]	; 0x3c
   144cc:	str	r0, [sp, #76]	; 0x4c
   144d0:	ldr	r0, [fp, #20]
   144d4:	str	r0, [sp, #72]	; 0x48
   144d8:	mov	r0, #0
   144dc:	str	r0, [sp, #56]	; 0x38
   144e0:	mov	r0, #0
   144e4:	str	r0, [sp, #92]	; 0x5c
   144e8:	mov	r0, #0
   144ec:	str	r0, [fp, #-76]	; 0xffffffb4
   144f0:	mov	r0, #0
   144f4:	cmp	r7, #10
   144f8:	bhi	15478 <__assert_fail@plt+0x421c>
   144fc:	add	r1, pc, #28
   14500:	mov	sl, r6
   14504:	ldr	r6, [sp, #80]	; 0x50
   14508:	ldr	ip, [fp, #-84]	; 0xffffffac
   1450c:	mov	r8, #0
   14510:	mov	r2, #1
   14514:	mov	r3, #0
   14518:	mov	lr, r9
   1451c:	ldr	pc, [r1, r7, lsl #2]
   14520:	andeq	r4, r1, r4, lsl #12
   14524:	andeq	r4, r1, r0, lsr r6
   14528:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1452c:	andeq	r4, r1, ip, ror #11
   14530:	andeq	r4, r1, r4, lsr #12
   14534:	andeq	r4, r1, r8, ror r6
   14538:	andeq	r4, r1, r4, lsl r6
   1453c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14540:	andeq	r4, r1, ip, asr #10
   14544:	andeq	r4, r1, ip, asr #10
   14548:	andeq	r4, r1, r4, ror r5
   1454c:	movw	r0, #39156	; 0x98f4
   14550:	mov	r1, r7
   14554:	movt	r0, #1
   14558:	bl	15e84 <__assert_fail@plt+0x4c28>
   1455c:	str	r0, [sp, #72]	; 0x48
   14560:	movw	r0, #39158	; 0x98f6
   14564:	mov	r1, r7
   14568:	movt	r0, #1
   1456c:	bl	15e84 <__assert_fail@plt+0x4c28>
   14570:	str	r0, [sp, #76]	; 0x4c
   14574:	str	r5, [fp, #-48]	; 0xffffffd0
   14578:	mov	r8, #0
   1457c:	mov	r5, r7
   14580:	tst	r4, #1
   14584:	bne	145bc <__assert_fail@plt+0x3360>
   14588:	ldr	r0, [sp, #72]	; 0x48
   1458c:	ldrb	r0, [r0]
   14590:	cmp	r0, #0
   14594:	beq	145bc <__assert_fail@plt+0x3360>
   14598:	ldr	r1, [sp, #72]	; 0x48
   1459c:	mov	r8, #0
   145a0:	add	r1, r1, #1
   145a4:	cmp	r8, sl
   145a8:	strbcc	r0, [r6, r8]
   145ac:	ldrb	r0, [r1, r8]
   145b0:	add	r8, r8, #1
   145b4:	cmp	r0, #0
   145b8:	bne	145a4 <__assert_fail@plt+0x3348>
   145bc:	ldr	r7, [sp, #76]	; 0x4c
   145c0:	mov	r0, r7
   145c4:	bl	11148 <strlen@plt>
   145c8:	str	r7, [sp, #92]	; 0x5c
   145cc:	mov	r7, r5
   145d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   145d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   145d8:	str	r0, [fp, #-76]	; 0xffffffb4
   145dc:	mov	r2, #1
   145e0:	mov	r3, r4
   145e4:	mov	lr, r9
   145e8:	b	146d4 <__assert_fail@plt+0x3478>
   145ec:	mov	r0, #1
   145f0:	b	14630 <__assert_fail@plt+0x33d4>
   145f4:	tst	r4, #1
   145f8:	bne	14630 <__assert_fail@plt+0x33d4>
   145fc:	mov	r2, r0
   14600:	b	14658 <__assert_fail@plt+0x33fc>
   14604:	mov	r7, #0
   14608:	mov	r8, #0
   1460c:	mov	r2, r0
   14610:	b	146d0 <__assert_fail@plt+0x3474>
   14614:	mov	r0, #1
   14618:	mov	r8, #0
   1461c:	mov	r7, #5
   14620:	b	1468c <__assert_fail@plt+0x3430>
   14624:	mov	r2, #1
   14628:	tst	r4, #1
   1462c:	beq	14658 <__assert_fail@plt+0x33fc>
   14630:	mov	r1, #1
   14634:	mov	r8, #0
   14638:	mov	r7, #2
   1463c:	mov	r2, r0
   14640:	mov	r3, #1
   14644:	str	r1, [fp, #-76]	; 0xffffffb4
   14648:	movw	r1, #39158	; 0x98f6
   1464c:	movt	r1, #1
   14650:	str	r1, [sp, #92]	; 0x5c
   14654:	b	146d4 <__assert_fail@plt+0x3478>
   14658:	cmp	sl, #0
   1465c:	mov	r8, #1
   14660:	mov	r7, #2
   14664:	movne	r0, #39	; 0x27
   14668:	strbne	r0, [r6]
   1466c:	movw	r0, #39158	; 0x98f6
   14670:	movt	r0, #1
   14674:	b	146c4 <__assert_fail@plt+0x3468>
   14678:	mov	r7, #5
   1467c:	tst	r4, #1
   14680:	beq	146a8 <__assert_fail@plt+0x344c>
   14684:	mov	r0, #1
   14688:	mov	r8, #0
   1468c:	str	r0, [fp, #-76]	; 0xffffffb4
   14690:	movw	r0, #39154	; 0x98f2
   14694:	mov	r2, #1
   14698:	mov	r3, #1
   1469c:	movt	r0, #1
   146a0:	str	r0, [sp, #92]	; 0x5c
   146a4:	b	146d4 <__assert_fail@plt+0x3478>
   146a8:	cmp	sl, #0
   146ac:	mov	r8, #1
   146b0:	mov	r2, #1
   146b4:	movne	r0, #34	; 0x22
   146b8:	strbne	r0, [r6]
   146bc:	movw	r0, #39154	; 0x98f2
   146c0:	movt	r0, #1
   146c4:	str	r0, [sp, #92]	; 0x5c
   146c8:	mov	r0, #1
   146cc:	str	r0, [fp, #-76]	; 0xffffffb4
   146d0:	mov	r3, #0
   146d4:	ldr	r0, [fp, #16]
   146d8:	str	r3, [fp, #-72]	; 0xffffffb8
   146dc:	str	r7, [fp, #-64]	; 0xffffffc0
   146e0:	str	r2, [sp, #84]	; 0x54
   146e4:	cmp	r0, #0
   146e8:	movwne	r0, #1
   146ec:	and	r0, r0, r3
   146f0:	str	r0, [fp, #-88]	; 0xffffffa8
   146f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   146f8:	cmp	r0, #0
   146fc:	movwne	r0, #1
   14700:	subs	r4, r7, #2
   14704:	mov	r7, #0
   14708:	and	r1, r0, r3
   1470c:	str	r4, [fp, #-80]	; 0xffffffb0
   14710:	and	r1, r2, r1
   14714:	str	r1, [sp, #48]	; 0x30
   14718:	clz	r1, r4
   1471c:	lsr	r1, r1, #5
   14720:	and	r1, r1, r3
   14724:	eor	r3, r3, #1
   14728:	str	r1, [sp, #64]	; 0x40
   1472c:	mov	r1, r4
   14730:	str	r3, [sp, #88]	; 0x58
   14734:	movwne	r1, #1
   14738:	orr	r3, r1, r3
   1473c:	and	r1, r1, r2
   14740:	and	r0, r0, r1
   14744:	str	r3, [sp, #68]	; 0x44
   14748:	str	r1, [fp, #-68]	; 0xffffffbc
   1474c:	str	r0, [fp, #-60]	; 0xffffffc4
   14750:	eor	r0, r2, #1
   14754:	str	r0, [sp, #52]	; 0x34
   14758:	cmn	lr, #1
   1475c:	beq	1476c <__assert_fail@plt+0x3510>
   14760:	cmp	r7, lr
   14764:	bne	14778 <__assert_fail@plt+0x351c>
   14768:	b	152a0 <__assert_fail@plt+0x4044>
   1476c:	ldrb	r0, [ip, r7]
   14770:	cmp	r0, #0
   14774:	beq	152a8 <__assert_fail@plt+0x404c>
   14778:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1477c:	mov	r9, #0
   14780:	str	r5, [fp, #-48]	; 0xffffffd0
   14784:	cmp	r0, #0
   14788:	beq	147bc <__assert_fail@plt+0x3560>
   1478c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14790:	add	r4, r7, r0
   14794:	cmp	r0, #2
   14798:	bcc	147b4 <__assert_fail@plt+0x3558>
   1479c:	cmn	lr, #1
   147a0:	bne	147b4 <__assert_fail@plt+0x3558>
   147a4:	mov	r0, ip
   147a8:	bl	11148 <strlen@plt>
   147ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   147b0:	mov	lr, r0
   147b4:	cmp	r4, lr
   147b8:	bls	147c4 <__assert_fail@plt+0x3568>
   147bc:	mov	r0, #0
   147c0:	b	14804 <__assert_fail@plt+0x35a8>
   147c4:	ldr	r1, [sp, #92]	; 0x5c
   147c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   147cc:	add	r0, ip, r7
   147d0:	mov	r4, lr
   147d4:	bl	1104c <memcmp@plt>
   147d8:	ldr	r2, [sp, #88]	; 0x58
   147dc:	cmp	r0, #0
   147e0:	mov	r1, r0
   147e4:	movwne	r1, #1
   147e8:	orr	r1, r1, r2
   147ec:	tst	r1, #1
   147f0:	beq	15338 <__assert_fail@plt+0x40dc>
   147f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   147f8:	clz	r0, r0
   147fc:	mov	lr, r4
   14800:	lsr	r0, r0, #5
   14804:	str	r0, [fp, #-52]	; 0xffffffcc
   14808:	ldrb	r5, [ip, r7]
   1480c:	cmp	r5, #126	; 0x7e
   14810:	bhi	14bc8 <__assert_fail@plt+0x396c>
   14814:	add	r3, pc, #16
   14818:	mov	r4, #1
   1481c:	mov	r2, #110	; 0x6e
   14820:	mov	r0, #97	; 0x61
   14824:	mov	r1, #0
   14828:	ldr	pc, [r3, r5, lsl #2]
   1482c:	andeq	r4, r1, r4, asr #21
   14830:	andeq	r4, r1, r8, asr #23
   14834:	andeq	r4, r1, r8, asr #23
   14838:	andeq	r4, r1, r8, asr #23
   1483c:	andeq	r4, r1, r8, asr #23
   14840:	andeq	r4, r1, r8, asr #23
   14844:	andeq	r4, r1, r8, asr #23
   14848:	andeq	r4, r1, ip, ror ip
   1484c:	andeq	r4, r1, r4, lsr #21
   14850:	muleq	r1, ip, sl
   14854:			; <UNDEFINED> instruction: 0x00014ab0
   14858:	andeq	r4, r1, r0, lsr fp
   1485c:	muleq	r1, r4, sl
   14860:	andeq	r4, r1, ip, lsr #21
   14864:	andeq	r4, r1, r8, asr #23
   14868:	andeq	r4, r1, r8, asr #23
   1486c:	andeq	r4, r1, r8, asr #23
   14870:	andeq	r4, r1, r8, asr #23
   14874:	andeq	r4, r1, r8, asr #23
   14878:	andeq	r4, r1, r8, asr #23
   1487c:	andeq	r4, r1, r8, asr #23
   14880:	andeq	r4, r1, r8, asr #23
   14884:	andeq	r4, r1, r8, asr #23
   14888:	andeq	r4, r1, r8, asr #23
   1488c:	andeq	r4, r1, r8, asr #23
   14890:	andeq	r4, r1, r8, asr #23
   14894:	andeq	r4, r1, r8, asr #23
   14898:	andeq	r4, r1, r8, asr #23
   1489c:	andeq	r4, r1, r8, asr #23
   148a0:	andeq	r4, r1, r8, asr #23
   148a4:	andeq	r4, r1, r8, asr #23
   148a8:	andeq	r4, r1, r8, asr #23
   148ac:	andeq	r4, r1, r4, lsr ip
   148b0:	andeq	r4, r1, r8, lsr ip
   148b4:	andeq	r4, r1, r8, lsr ip
   148b8:	andeq	r4, r1, ip, lsr sl
   148bc:	andeq	r4, r1, r8, lsr ip
   148c0:	andeq	r4, r1, r8, lsr #20
   148c4:	andeq	r4, r1, r8, lsr ip
   148c8:	andeq	r4, r1, r8, lsr fp
   148cc:	andeq	r4, r1, r8, lsr ip
   148d0:	andeq	r4, r1, r8, lsr ip
   148d4:	andeq	r4, r1, r8, lsr ip
   148d8:	andeq	r4, r1, r8, lsr #20
   148dc:	andeq	r4, r1, r8, lsr #20
   148e0:	andeq	r4, r1, r8, lsr #20
   148e4:	andeq	r4, r1, r8, lsr #20
   148e8:	andeq	r4, r1, r8, lsr #20
   148ec:	andeq	r4, r1, r8, lsr #20
   148f0:	andeq	r4, r1, r8, lsr #20
   148f4:	andeq	r4, r1, r8, lsr #20
   148f8:	andeq	r4, r1, r8, lsr #20
   148fc:	andeq	r4, r1, r8, lsr #20
   14900:	andeq	r4, r1, r8, lsr #20
   14904:	andeq	r4, r1, r8, lsr #20
   14908:	andeq	r4, r1, r8, lsr #20
   1490c:	andeq	r4, r1, r8, lsr #20
   14910:	andeq	r4, r1, r8, lsr #20
   14914:	andeq	r4, r1, r8, lsr #20
   14918:	andeq	r4, r1, r8, lsr ip
   1491c:	andeq	r4, r1, r8, lsr ip
   14920:	andeq	r4, r1, r8, lsr ip
   14924:	andeq	r4, r1, r8, lsr ip
   14928:	andeq	r4, r1, r4, lsl #22
   1492c:	andeq	r4, r1, r8, asr #23
   14930:	andeq	r4, r1, r8, lsr #20
   14934:	andeq	r4, r1, r8, lsr #20
   14938:	andeq	r4, r1, r8, lsr #20
   1493c:	andeq	r4, r1, r8, lsr #20
   14940:	andeq	r4, r1, r8, lsr #20
   14944:	andeq	r4, r1, r8, lsr #20
   14948:	andeq	r4, r1, r8, lsr #20
   1494c:	andeq	r4, r1, r8, lsr #20
   14950:	andeq	r4, r1, r8, lsr #20
   14954:	andeq	r4, r1, r8, lsr #20
   14958:	andeq	r4, r1, r8, lsr #20
   1495c:	andeq	r4, r1, r8, lsr #20
   14960:	andeq	r4, r1, r8, lsr #20
   14964:	andeq	r4, r1, r8, lsr #20
   14968:	andeq	r4, r1, r8, lsr #20
   1496c:	andeq	r4, r1, r8, lsr #20
   14970:	andeq	r4, r1, r8, lsr #20
   14974:	andeq	r4, r1, r8, lsr #20
   14978:	andeq	r4, r1, r8, lsr #20
   1497c:	andeq	r4, r1, r8, lsr #20
   14980:	andeq	r4, r1, r8, lsr #20
   14984:	andeq	r4, r1, r8, lsr #20
   14988:	andeq	r4, r1, r8, lsr #20
   1498c:	andeq	r4, r1, r8, lsr #20
   14990:	andeq	r4, r1, r8, lsr #20
   14994:	andeq	r4, r1, r8, lsr #20
   14998:	andeq	r4, r1, r8, lsr ip
   1499c:	andeq	r4, r1, r0, ror sl
   149a0:	andeq	r4, r1, r8, lsr #20
   149a4:	andeq	r4, r1, r8, lsr ip
   149a8:	andeq	r4, r1, r8, lsr #20
   149ac:	andeq	r4, r1, r8, lsr ip
   149b0:	andeq	r4, r1, r8, lsr #20
   149b4:	andeq	r4, r1, r8, lsr #20
   149b8:	andeq	r4, r1, r8, lsr #20
   149bc:	andeq	r4, r1, r8, lsr #20
   149c0:	andeq	r4, r1, r8, lsr #20
   149c4:	andeq	r4, r1, r8, lsr #20
   149c8:	andeq	r4, r1, r8, lsr #20
   149cc:	andeq	r4, r1, r8, lsr #20
   149d0:	andeq	r4, r1, r8, lsr #20
   149d4:	andeq	r4, r1, r8, lsr #20
   149d8:	andeq	r4, r1, r8, lsr #20
   149dc:	andeq	r4, r1, r8, lsr #20
   149e0:	andeq	r4, r1, r8, lsr #20
   149e4:	andeq	r4, r1, r8, lsr #20
   149e8:	andeq	r4, r1, r8, lsr #20
   149ec:	andeq	r4, r1, r8, lsr #20
   149f0:	andeq	r4, r1, r8, lsr #20
   149f4:	andeq	r4, r1, r8, lsr #20
   149f8:	andeq	r4, r1, r8, lsr #20
   149fc:	andeq	r4, r1, r8, lsr #20
   14a00:	andeq	r4, r1, r8, lsr #20
   14a04:	andeq	r4, r1, r8, lsr #20
   14a08:	andeq	r4, r1, r8, lsr #20
   14a0c:	andeq	r4, r1, r8, lsr #20
   14a10:	andeq	r4, r1, r8, lsr #20
   14a14:	andeq	r4, r1, r8, lsr #20
   14a18:	andeq	r4, r1, r0, asr sl
   14a1c:	andeq	r4, r1, r8, lsr ip
   14a20:	andeq	r4, r1, r0, asr sl
   14a24:	andeq	r4, r1, ip, lsr sl
   14a28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14a2c:	cmp	r0, #0
   14a30:	beq	14c90 <__assert_fail@plt+0x3a34>
   14a34:	ldr	r0, [fp, #16]
   14a38:	b	14c94 <__assert_fail@plt+0x3a38>
   14a3c:	mov	r4, #0
   14a40:	cmp	r7, #0
   14a44:	beq	14c34 <__assert_fail@plt+0x39d8>
   14a48:	mov	r9, #0
   14a4c:	b	14a28 <__assert_fail@plt+0x37cc>
   14a50:	mov	r4, #0
   14a54:	cmn	lr, #1
   14a58:	beq	14c18 <__assert_fail@plt+0x39bc>
   14a5c:	cmp	r7, #0
   14a60:	bne	14a48 <__assert_fail@plt+0x37ec>
   14a64:	cmp	lr, #1
   14a68:	beq	14c34 <__assert_fail@plt+0x39d8>
   14a6c:	b	14a48 <__assert_fail@plt+0x37ec>
   14a70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a74:	cmp	r0, #2
   14a78:	bne	14c58 <__assert_fail@plt+0x39fc>
   14a7c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a80:	tst	r0, #1
   14a84:	bne	15354 <__assert_fail@plt+0x40f8>
   14a88:	mov	r9, #0
   14a8c:	mov	r0, #92	; 0x5c
   14a90:	b	14c6c <__assert_fail@plt+0x3a10>
   14a94:	mov	r0, #102	; 0x66
   14a98:	b	14c7c <__assert_fail@plt+0x3a20>
   14a9c:	mov	r2, #116	; 0x74
   14aa0:	b	14ab0 <__assert_fail@plt+0x3854>
   14aa4:	mov	r0, #98	; 0x62
   14aa8:	b	14c7c <__assert_fail@plt+0x3a20>
   14aac:	mov	r2, #114	; 0x72
   14ab0:	ldr	r0, [sp, #68]	; 0x44
   14ab4:	tst	r0, #1
   14ab8:	mov	r0, r2
   14abc:	bne	14c7c <__assert_fail@plt+0x3a20>
   14ac0:	b	15354 <__assert_fail@plt+0x40f8>
   14ac4:	ldr	r0, [sp, #84]	; 0x54
   14ac8:	tst	r0, #1
   14acc:	beq	14d6c <__assert_fail@plt+0x3b10>
   14ad0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ad4:	tst	r0, #1
   14ad8:	bne	15464 <__assert_fail@plt+0x4208>
   14adc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14ae0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14ae4:	cmp	r0, #2
   14ae8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14aec:	movwne	r0, #1
   14af0:	orr	r0, r0, r2
   14af4:	tst	r0, #1
   14af8:	beq	1513c <__assert_fail@plt+0x3ee0>
   14afc:	mov	r0, r8
   14b00:	b	15170 <__assert_fail@plt+0x3f14>
   14b04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b08:	mov	r9, #0
   14b0c:	mov	r5, #63	; 0x3f
   14b10:	cmp	r0, #5
   14b14:	beq	14f20 <__assert_fail@plt+0x3cc4>
   14b18:	cmp	r0, #2
   14b1c:	bne	14fc4 <__assert_fail@plt+0x3d68>
   14b20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b24:	tst	r0, #1
   14b28:	beq	14fc8 <__assert_fail@plt+0x3d6c>
   14b2c:	b	15354 <__assert_fail@plt+0x40f8>
   14b30:	mov	r0, #118	; 0x76
   14b34:	b	14c7c <__assert_fail@plt+0x3a20>
   14b38:	mov	r0, #1
   14b3c:	mov	r5, #39	; 0x27
   14b40:	str	r0, [sp, #60]	; 0x3c
   14b44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b48:	cmp	r0, #2
   14b4c:	bne	14bc0 <__assert_fail@plt+0x3964>
   14b50:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b54:	tst	r0, #1
   14b58:	bne	15354 <__assert_fail@plt+0x40f8>
   14b5c:	ldr	r2, [sp, #56]	; 0x38
   14b60:	clz	r1, sl
   14b64:	mov	r9, #0
   14b68:	lsr	r1, r1, #5
   14b6c:	cmp	r2, #0
   14b70:	mov	r0, r2
   14b74:	movwne	r0, #1
   14b78:	orrs	r0, r0, r1
   14b7c:	moveq	r2, sl
   14b80:	moveq	sl, r0
   14b84:	cmp	r8, sl
   14b88:	str	r2, [sp, #56]	; 0x38
   14b8c:	movcc	r0, #39	; 0x27
   14b90:	strbcc	r0, [r6, r8]
   14b94:	add	r0, r8, #1
   14b98:	cmp	r0, sl
   14b9c:	movcc	r1, #92	; 0x5c
   14ba0:	strbcc	r1, [r6, r0]
   14ba4:	add	r0, r8, #2
   14ba8:	add	r8, r8, #3
   14bac:	cmp	r0, sl
   14bb0:	movcc	r1, #39	; 0x27
   14bb4:	strbcc	r1, [r6, r0]
   14bb8:	mov	r0, #0
   14bbc:	str	r0, [fp, #-56]	; 0xffffffc8
   14bc0:	mov	r4, #1
   14bc4:	b	14a28 <__assert_fail@plt+0x37cc>
   14bc8:	ldr	r0, [sp, #40]	; 0x28
   14bcc:	cmp	r0, #1
   14bd0:	bne	14d98 <__assert_fail@plt+0x3b3c>
   14bd4:	str	lr, [sp, #28]
   14bd8:	bl	11124 <__ctype_b_loc@plt>
   14bdc:	ldr	r0, [r0]
   14be0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14be4:	mov	r1, #1
   14be8:	add	r0, r0, r5, lsl #1
   14bec:	ldrb	r0, [r0, #1]
   14bf0:	ubfx	r4, r0, #6, #1
   14bf4:	ldr	r0, [sp, #52]	; 0x34
   14bf8:	mov	r2, r1
   14bfc:	cmp	r1, #1
   14c00:	orr	r0, r4, r0
   14c04:	bhi	14fd0 <__assert_fail@plt+0x3d74>
   14c08:	tst	r0, #1
   14c0c:	beq	14fd0 <__assert_fail@plt+0x3d74>
   14c10:	ldr	lr, [sp, #28]
   14c14:	b	14a28 <__assert_fail@plt+0x37cc>
   14c18:	cmp	r7, #0
   14c1c:	ldrbeq	r0, [ip, #1]
   14c20:	cmpeq	r0, #0
   14c24:	beq	14c34 <__assert_fail@plt+0x39d8>
   14c28:	mvn	lr, #0
   14c2c:	mov	r9, #0
   14c30:	b	14a28 <__assert_fail@plt+0x37cc>
   14c34:	mov	r1, #1
   14c38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14c3c:	cmp	r0, #2
   14c40:	bne	14c50 <__assert_fail@plt+0x39f4>
   14c44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c48:	tst	r0, #1
   14c4c:	bne	15354 <__assert_fail@plt+0x40f8>
   14c50:	mov	r4, r1
   14c54:	b	14a28 <__assert_fail@plt+0x37cc>
   14c58:	ldr	r1, [sp, #48]	; 0x30
   14c5c:	mov	r9, #0
   14c60:	mov	r0, #92	; 0x5c
   14c64:	cmp	r1, #0
   14c68:	beq	14c7c <__assert_fail@plt+0x3a20>
   14c6c:	mov	r4, #0
   14c70:	cmp	r9, #0
   14c74:	beq	15208 <__assert_fail@plt+0x3fac>
   14c78:	b	15244 <__assert_fail@plt+0x3fe8>
   14c7c:	ldr	r1, [sp, #84]	; 0x54
   14c80:	mov	r4, #0
   14c84:	mov	r9, #0
   14c88:	tst	r1, #1
   14c8c:	bne	14ccc <__assert_fail@plt+0x3a70>
   14c90:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14c94:	cmp	r0, #0
   14c98:	mov	r0, r5
   14c9c:	beq	14cc0 <__assert_fail@plt+0x3a64>
   14ca0:	ldr	r1, [fp, #16]
   14ca4:	ubfx	r0, r5, #5, #3
   14ca8:	mov	r2, #1
   14cac:	ldr	r0, [r1, r0, lsl #2]
   14cb0:	and	r1, r5, #31
   14cb4:	tst	r0, r2, lsl r1
   14cb8:	mov	r0, r5
   14cbc:	bne	14ccc <__assert_fail@plt+0x3a70>
   14cc0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14cc4:	cmp	r1, #0
   14cc8:	beq	15200 <__assert_fail@plt+0x3fa4>
   14ccc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14cd0:	tst	r1, #1
   14cd4:	bne	1532c <__assert_fail@plt+0x40d0>
   14cd8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14cdc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14ce0:	cmp	r1, #2
   14ce4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14ce8:	movwne	r1, #1
   14cec:	orr	r1, r1, r2
   14cf0:	tst	r1, #1
   14cf4:	beq	14d00 <__assert_fail@plt+0x3aa4>
   14cf8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14cfc:	b	14d3c <__assert_fail@plt+0x3ae0>
   14d00:	cmp	r8, sl
   14d04:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d08:	movcc	r1, #39	; 0x27
   14d0c:	strbcc	r1, [r6, r8]
   14d10:	add	r1, r8, #1
   14d14:	cmp	r1, sl
   14d18:	movcc	r2, #36	; 0x24
   14d1c:	strbcc	r2, [r6, r1]
   14d20:	add	r1, r8, #2
   14d24:	add	r8, r8, #3
   14d28:	cmp	r1, sl
   14d2c:	movcc	r2, #39	; 0x27
   14d30:	strbcc	r2, [r6, r1]
   14d34:	mov	r1, #1
   14d38:	str	r1, [fp, #-56]	; 0xffffffc8
   14d3c:	cmp	r8, sl
   14d40:	movcc	r1, #92	; 0x5c
   14d44:	strbcc	r1, [r6, r8]
   14d48:	add	r8, r8, #1
   14d4c:	cmp	r8, sl
   14d50:	and	r5, r5, r4
   14d54:	add	r7, r7, #1
   14d58:	strbcc	r0, [r6, r8]
   14d5c:	add	r8, r8, #1
   14d60:	cmn	lr, #1
   14d64:	bne	14760 <__assert_fail@plt+0x3504>
   14d68:	b	1476c <__assert_fail@plt+0x3510>
   14d6c:	ldr	r0, [sp, #36]	; 0x24
   14d70:	mov	r4, #0
   14d74:	mov	r9, #0
   14d78:	mov	r5, #0
   14d7c:	cmp	r0, #0
   14d80:	beq	14c90 <__assert_fail@plt+0x3a34>
   14d84:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d88:	add	r7, r7, #1
   14d8c:	cmn	lr, #1
   14d90:	bne	14760 <__assert_fail@plt+0x3504>
   14d94:	b	1476c <__assert_fail@plt+0x3510>
   14d98:	mov	r0, #0
   14d9c:	cmn	lr, #1
   14da0:	str	r0, [fp, #-36]	; 0xffffffdc
   14da4:	str	r0, [fp, #-40]	; 0xffffffd8
   14da8:	bne	14dbc <__assert_fail@plt+0x3b60>
   14dac:	mov	r0, ip
   14db0:	bl	11148 <strlen@plt>
   14db4:	ldr	ip, [fp, #-84]	; 0xffffffac
   14db8:	mov	lr, r0
   14dbc:	add	r0, ip, r7
   14dc0:	mov	r4, #1
   14dc4:	mov	r6, #0
   14dc8:	str	lr, [sp, #28]
   14dcc:	str	r0, [sp, #24]
   14dd0:	sub	r0, fp, #40	; 0x28
   14dd4:	mov	r3, r0
   14dd8:	str	r6, [sp, #44]	; 0x2c
   14ddc:	add	r6, r6, r7
   14de0:	sub	r0, fp, #44	; 0x2c
   14de4:	add	r1, ip, r6
   14de8:	sub	r2, lr, r6
   14dec:	bl	186c8 <__assert_fail@plt+0x746c>
   14df0:	cmp	r0, #0
   14df4:	beq	1528c <__assert_fail@plt+0x4030>
   14df8:	cmn	r0, #1
   14dfc:	beq	1524c <__assert_fail@plt+0x3ff0>
   14e00:	ldr	lr, [sp, #28]
   14e04:	cmn	r0, #2
   14e08:	beq	15254 <__assert_fail@plt+0x3ff8>
   14e0c:	ldr	r2, [sp, #64]	; 0x40
   14e10:	cmp	r0, #2
   14e14:	mov	r1, #0
   14e18:	movwcc	r1, #1
   14e1c:	eor	r2, r2, #1
   14e20:	orrs	r1, r2, r1
   14e24:	bne	14ee4 <__assert_fail@plt+0x3c88>
   14e28:	ldr	r1, [sp, #44]	; 0x2c
   14e2c:	ldr	r2, [sp, #24]
   14e30:	add	r1, r2, r1
   14e34:	mov	r2, #1
   14e38:	ldrb	r3, [r1, r2]
   14e3c:	sub	r3, r3, #91	; 0x5b
   14e40:	cmp	r3, #33	; 0x21
   14e44:	bhi	14ed8 <__assert_fail@plt+0x3c7c>
   14e48:	add	r6, pc, #0
   14e4c:	ldr	pc, [r6, r3, lsl #2]
   14e50:	andeq	r5, r1, ip, asr #6
   14e54:	andeq	r5, r1, ip, asr #6
   14e58:	ldrdeq	r4, [r1], -r8
   14e5c:	andeq	r5, r1, ip, asr #6
   14e60:	ldrdeq	r4, [r1], -r8
   14e64:	andeq	r5, r1, ip, asr #6
   14e68:	ldrdeq	r4, [r1], -r8
   14e6c:	ldrdeq	r4, [r1], -r8
   14e70:	ldrdeq	r4, [r1], -r8
   14e74:	ldrdeq	r4, [r1], -r8
   14e78:	ldrdeq	r4, [r1], -r8
   14e7c:	ldrdeq	r4, [r1], -r8
   14e80:	ldrdeq	r4, [r1], -r8
   14e84:	ldrdeq	r4, [r1], -r8
   14e88:	ldrdeq	r4, [r1], -r8
   14e8c:	ldrdeq	r4, [r1], -r8
   14e90:	ldrdeq	r4, [r1], -r8
   14e94:	ldrdeq	r4, [r1], -r8
   14e98:	ldrdeq	r4, [r1], -r8
   14e9c:	ldrdeq	r4, [r1], -r8
   14ea0:	ldrdeq	r4, [r1], -r8
   14ea4:	ldrdeq	r4, [r1], -r8
   14ea8:	ldrdeq	r4, [r1], -r8
   14eac:	ldrdeq	r4, [r1], -r8
   14eb0:	ldrdeq	r4, [r1], -r8
   14eb4:	ldrdeq	r4, [r1], -r8
   14eb8:	ldrdeq	r4, [r1], -r8
   14ebc:	ldrdeq	r4, [r1], -r8
   14ec0:	ldrdeq	r4, [r1], -r8
   14ec4:	ldrdeq	r4, [r1], -r8
   14ec8:	ldrdeq	r4, [r1], -r8
   14ecc:	ldrdeq	r4, [r1], -r8
   14ed0:	ldrdeq	r4, [r1], -r8
   14ed4:	andeq	r5, r1, ip, asr #6
   14ed8:	add	r2, r2, #1
   14edc:	cmp	r2, r0
   14ee0:	bcc	14e38 <__assert_fail@plt+0x3bdc>
   14ee4:	ldr	r6, [sp, #44]	; 0x2c
   14ee8:	add	r6, r0, r6
   14eec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14ef0:	bl	1107c <iswprint@plt>
   14ef4:	cmp	r0, #0
   14ef8:	movwne	r0, #1
   14efc:	and	r4, r4, r0
   14f00:	sub	r0, fp, #40	; 0x28
   14f04:	bl	11034 <mbsinit@plt>
   14f08:	ldr	lr, [sp, #28]
   14f0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f10:	sub	r3, fp, #40	; 0x28
   14f14:	cmp	r0, #0
   14f18:	beq	14dd8 <__assert_fail@plt+0x3b7c>
   14f1c:	b	15294 <__assert_fail@plt+0x4038>
   14f20:	ldr	r0, [sp, #32]
   14f24:	cmp	r0, #0
   14f28:	beq	14fc4 <__assert_fail@plt+0x3d68>
   14f2c:	add	r0, r7, #2
   14f30:	cmp	r0, lr
   14f34:	bcs	14fc4 <__assert_fail@plt+0x3d68>
   14f38:	add	r1, ip, r7
   14f3c:	ldrb	r1, [r1, #1]
   14f40:	cmp	r1, #63	; 0x3f
   14f44:	bne	14fc4 <__assert_fail@plt+0x3d68>
   14f48:	ldrb	r5, [ip, r0]
   14f4c:	sub	r1, r5, #33	; 0x21
   14f50:	cmp	r1, #29
   14f54:	bhi	14fc4 <__assert_fail@plt+0x3d68>
   14f58:	movw	r3, #20929	; 0x51c1
   14f5c:	mov	r2, #1
   14f60:	movt	r3, #14336	; 0x3800
   14f64:	tst	r3, r2, lsl r1
   14f68:	beq	14fc4 <__assert_fail@plt+0x3d68>
   14f6c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14f70:	tst	r1, #1
   14f74:	bne	1546c <__assert_fail@plt+0x4210>
   14f78:	cmp	r8, sl
   14f7c:	mov	r7, r0
   14f80:	mov	r4, #0
   14f84:	movcc	r1, #63	; 0x3f
   14f88:	strbcc	r1, [r6, r8]
   14f8c:	add	r1, r8, #1
   14f90:	cmp	r1, sl
   14f94:	movcc	r2, #34	; 0x22
   14f98:	strbcc	r2, [r6, r1]
   14f9c:	add	r1, r8, #2
   14fa0:	cmp	r1, sl
   14fa4:	movcc	r2, #34	; 0x22
   14fa8:	strbcc	r2, [r6, r1]
   14fac:	add	r1, r8, #3
   14fb0:	add	r8, r8, #4
   14fb4:	cmp	r1, sl
   14fb8:	movcc	r2, #63	; 0x3f
   14fbc:	strbcc	r2, [r6, r1]
   14fc0:	b	14a28 <__assert_fail@plt+0x37cc>
   14fc4:	mov	r5, #63	; 0x3f
   14fc8:	mov	r4, #0
   14fcc:	b	14a28 <__assert_fail@plt+0x37cc>
   14fd0:	add	r1, r2, r7
   14fd4:	ldr	lr, [sp, #28]
   14fd8:	mov	r3, #0
   14fdc:	str	r1, [sp, #44]	; 0x2c
   14fe0:	add	r1, r7, #1
   14fe4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14fe8:	tst	r0, #1
   14fec:	bne	150c0 <__assert_fail@plt+0x3e64>
   14ff0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14ff4:	tst	r2, #1
   14ff8:	bne	153b4 <__assert_fail@plt+0x4158>
   14ffc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15000:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15004:	cmp	r7, #2
   15008:	movwne	r3, #1
   1500c:	orr	r3, r3, r2
   15010:	tst	r3, #1
   15014:	bne	15050 <__assert_fail@plt+0x3df4>
   15018:	cmp	r8, sl
   1501c:	add	r3, r8, #1
   15020:	movcc	r2, #39	; 0x27
   15024:	strbcc	r2, [r6, r8]
   15028:	cmp	r3, sl
   1502c:	movcc	r2, #36	; 0x24
   15030:	strbcc	r2, [r6, r3]
   15034:	add	r3, r8, #2
   15038:	add	r8, r8, #3
   1503c:	cmp	r3, sl
   15040:	movcc	r2, #39	; 0x27
   15044:	strbcc	r2, [r6, r3]
   15048:	mov	r2, #1
   1504c:	str	r2, [fp, #-56]	; 0xffffffc8
   15050:	cmp	r8, sl
   15054:	movcc	r3, #92	; 0x5c
   15058:	strbcc	r3, [r6, r8]
   1505c:	add	r3, r8, #1
   15060:	cmp	r3, sl
   15064:	andcc	r7, r5, #192	; 0xc0
   15068:	movcc	r2, #48	; 0x30
   1506c:	orrcc	r7, r2, r7, lsr #6
   15070:	strbcc	r7, [r6, r3]
   15074:	add	r3, r8, #2
   15078:	add	r8, r8, #3
   1507c:	cmp	r3, sl
   15080:	lsrcc	r7, r5, #3
   15084:	movcc	r2, #6
   15088:	bficc	r7, r2, #3, #29
   1508c:	mov	r2, #6
   15090:	strbcc	r7, [r6, r3]
   15094:	bfi	r5, r2, #3, #29
   15098:	mov	r3, #1
   1509c:	b	150e4 <__assert_fail@plt+0x3e88>
   150a0:	cmp	r8, sl
   150a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   150a8:	strbcc	r5, [r6, r8]
   150ac:	add	r8, r8, #1
   150b0:	ldrb	r5, [ip, r1]
   150b4:	add	r1, r1, #1
   150b8:	tst	r0, #1
   150bc:	beq	14ff0 <__assert_fail@plt+0x3d94>
   150c0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   150c4:	tst	r2, #1
   150c8:	beq	150dc <__assert_fail@plt+0x3e80>
   150cc:	cmp	r8, sl
   150d0:	movcc	r7, #92	; 0x5c
   150d4:	strbcc	r7, [r6, r8]
   150d8:	add	r8, r8, #1
   150dc:	mov	r2, #0
   150e0:	str	r2, [fp, #-52]	; 0xffffffcc
   150e4:	ldr	r2, [sp, #44]	; 0x2c
   150e8:	and	r9, r3, #1
   150ec:	cmp	r2, r1
   150f0:	bls	151f0 <__assert_fail@plt+0x3f94>
   150f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   150f8:	cmp	r9, #0
   150fc:	movwne	r9, #1
   15100:	mvn	r7, r2
   15104:	orr	r7, r7, r9
   15108:	tst	r7, #1
   1510c:	bne	150a0 <__assert_fail@plt+0x3e44>
   15110:	cmp	r8, sl
   15114:	movcc	r7, #39	; 0x27
   15118:	strbcc	r7, [r6, r8]
   1511c:	add	r7, r8, #1
   15120:	add	r8, r8, #2
   15124:	cmp	r7, sl
   15128:	movcc	r2, #39	; 0x27
   1512c:	strbcc	r2, [r6, r7]
   15130:	mov	r2, #0
   15134:	str	r2, [fp, #-56]	; 0xffffffc8
   15138:	b	150a0 <__assert_fail@plt+0x3e44>
   1513c:	cmp	r8, sl
   15140:	mov	r2, #1
   15144:	movcc	r0, #39	; 0x27
   15148:	strbcc	r0, [r6, r8]
   1514c:	add	r0, r8, #1
   15150:	cmp	r0, sl
   15154:	movcc	r1, #36	; 0x24
   15158:	strbcc	r1, [r6, r0]
   1515c:	add	r0, r8, #2
   15160:	cmp	r0, sl
   15164:	movcc	r1, #39	; 0x27
   15168:	strbcc	r1, [r6, r0]
   1516c:	add	r0, r8, #3
   15170:	cmp	r0, sl
   15174:	add	r8, r0, #1
   15178:	str	r2, [fp, #-56]	; 0xffffffc8
   1517c:	movcc	r1, #92	; 0x5c
   15180:	strbcc	r1, [r6, r0]
   15184:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15188:	cmp	r1, #2
   1518c:	beq	151e0 <__assert_fail@plt+0x3f84>
   15190:	add	r1, r7, #1
   15194:	mov	r4, #0
   15198:	mov	r9, #1
   1519c:	mov	r5, #48	; 0x30
   151a0:	cmp	r1, lr
   151a4:	bcs	14a28 <__assert_fail@plt+0x37cc>
   151a8:	ldrb	r1, [ip, r1]
   151ac:	sub	r1, r1, #48	; 0x30
   151b0:	uxtb	r1, r1
   151b4:	cmp	r1, #9
   151b8:	bhi	14a28 <__assert_fail@plt+0x37cc>
   151bc:	cmp	r8, sl
   151c0:	movcc	r1, #48	; 0x30
   151c4:	strbcc	r1, [r6, r8]
   151c8:	add	r1, r0, #2
   151cc:	add	r8, r0, #3
   151d0:	cmp	r1, sl
   151d4:	movcc	r2, #48	; 0x30
   151d8:	strbcc	r2, [r6, r1]
   151dc:	b	14a28 <__assert_fail@plt+0x37cc>
   151e0:	mov	r0, #48	; 0x30
   151e4:	mov	r9, #1
   151e8:	mov	r4, #0
   151ec:	b	14cc0 <__assert_fail@plt+0x3a64>
   151f0:	cmp	r9, #0
   151f4:	sub	r7, r1, #1
   151f8:	mov	r0, r5
   151fc:	movwne	r9, #1
   15200:	cmp	r9, #0
   15204:	bne	15244 <__assert_fail@plt+0x3fe8>
   15208:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1520c:	tst	r1, #1
   15210:	beq	15244 <__assert_fail@plt+0x3fe8>
   15214:	cmp	r8, sl
   15218:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1521c:	movcc	r1, #39	; 0x27
   15220:	strbcc	r1, [r6, r8]
   15224:	add	r1, r8, #1
   15228:	add	r8, r8, #2
   1522c:	cmp	r1, sl
   15230:	movcc	r2, #39	; 0x27
   15234:	strbcc	r2, [r6, r1]
   15238:	mov	r1, #0
   1523c:	str	r1, [fp, #-56]	; 0xffffffc8
   15240:	b	14d4c <__assert_fail@plt+0x3af0>
   15244:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15248:	b	14d4c <__assert_fail@plt+0x3af0>
   1524c:	mov	r4, #0
   15250:	b	1528c <__assert_fail@plt+0x4030>
   15254:	mov	r4, #0
   15258:	cmp	lr, r6
   1525c:	bls	1528c <__assert_fail@plt+0x4030>
   15260:	ldr	ip, [fp, #-84]	; 0xffffffac
   15264:	ldr	r6, [sp, #44]	; 0x2c
   15268:	ldr	r0, [sp, #24]
   1526c:	ldrb	r0, [r0, r6]
   15270:	cmp	r0, #0
   15274:	beq	15294 <__assert_fail@plt+0x4038>
   15278:	add	r6, r6, #1
   1527c:	add	r0, r7, r6
   15280:	cmp	r0, lr
   15284:	bcc	15268 <__assert_fail@plt+0x400c>
   15288:	b	15294 <__assert_fail@plt+0x4038>
   1528c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15290:	ldr	r6, [sp, #44]	; 0x2c
   15294:	mov	r1, r6
   15298:	ldr	r6, [sp, #80]	; 0x50
   1529c:	b	14bf4 <__assert_fail@plt+0x3998>
   152a0:	mov	lr, r7
   152a4:	b	152ac <__assert_fail@plt+0x4050>
   152a8:	mvn	lr, #0
   152ac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   152b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   152b4:	eor	r0, r7, #2
   152b8:	orr	r0, r0, r8
   152bc:	clz	r0, r0
   152c0:	lsr	r0, r0, #5
   152c4:	tst	r1, r0
   152c8:	bne	15354 <__assert_fail@plt+0x40f8>
   152cc:	mov	r0, r1
   152d0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   152d4:	cmp	r7, #2
   152d8:	movwne	r1, #1
   152dc:	orr	r0, r0, r1
   152e0:	tst	r0, #1
   152e4:	ldreq	r0, [sp, #60]	; 0x3c
   152e8:	eoreq	r0, r0, #1
   152ec:	tsteq	r0, #1
   152f0:	bne	15400 <__assert_fail@plt+0x41a4>
   152f4:	mov	r9, lr
   152f8:	tst	r5, #1
   152fc:	bne	153bc <__assert_fail@plt+0x4160>
   15300:	ldr	r6, [sp, #56]	; 0x38
   15304:	mov	r4, #0
   15308:	cmp	r6, #0
   1530c:	beq	153f8 <__assert_fail@plt+0x419c>
   15310:	ldr	r0, [sp, #84]	; 0x54
   15314:	mov	r1, #0
   15318:	cmp	sl, #0
   1531c:	mov	r5, #0
   15320:	str	r1, [fp, #-72]	; 0xffffffb8
   15324:	beq	144f4 <__assert_fail@plt+0x3298>
   15328:	b	15400 <__assert_fail@plt+0x41a4>
   1532c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15330:	ldr	r2, [sp, #84]	; 0x54
   15334:	b	1535c <__assert_fail@plt+0x4100>
   15338:	ldr	ip, [fp, #-84]	; 0xffffffac
   1533c:	mov	r2, #1
   15340:	mov	lr, r4
   15344:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15348:	b	1535c <__assert_fail@plt+0x4100>
   1534c:	ldr	r6, [sp, #80]	; 0x50
   15350:	ldr	ip, [fp, #-84]	; 0xffffffac
   15354:	ldr	r2, [sp, #84]	; 0x54
   15358:	mov	r7, #2
   1535c:	mov	r0, #0
   15360:	ldr	r1, [fp, #12]
   15364:	tst	r2, #1
   15368:	mov	r2, r7
   1536c:	mov	r3, lr
   15370:	str	r0, [sp, #8]
   15374:	ldr	r0, [sp, #72]	; 0x48
   15378:	movwne	r2, #4
   1537c:	cmp	r7, #2
   15380:	movne	r2, r7
   15384:	str	r2, [sp]
   15388:	mov	r2, ip
   1538c:	bic	r1, r1, #2
   15390:	str	r0, [sp, #12]
   15394:	ldr	r0, [sp, #76]	; 0x4c
   15398:	str	r1, [sp, #4]
   1539c:	mov	r1, sl
   153a0:	str	r0, [sp, #16]
   153a4:	mov	r0, r6
   153a8:	bl	14474 <__assert_fail@plt+0x3218>
   153ac:	mov	r8, r0
   153b0:	b	15458 <__assert_fail@plt+0x41fc>
   153b4:	ldr	r2, [sp, #84]	; 0x54
   153b8:	b	1535c <__assert_fail@plt+0x4100>
   153bc:	mov	r0, #5
   153c0:	ldr	r1, [sp, #56]	; 0x38
   153c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   153c8:	mov	r3, r9
   153cc:	str	r0, [sp]
   153d0:	ldr	r0, [fp, #12]
   153d4:	str	r0, [sp, #4]
   153d8:	ldr	r0, [fp, #16]
   153dc:	str	r0, [sp, #8]
   153e0:	ldr	r0, [sp, #72]	; 0x48
   153e4:	str	r0, [sp, #12]
   153e8:	ldr	r0, [sp, #76]	; 0x4c
   153ec:	str	r0, [sp, #16]
   153f0:	ldr	r0, [sp, #80]	; 0x50
   153f4:	b	153a8 <__assert_fail@plt+0x414c>
   153f8:	mov	r0, #0
   153fc:	str	r0, [fp, #-72]	; 0xffffffb8
   15400:	ldr	r1, [sp, #92]	; 0x5c
   15404:	cmp	r1, #0
   15408:	beq	15448 <__assert_fail@plt+0x41ec>
   1540c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15410:	ldr	r2, [sp, #80]	; 0x50
   15414:	tst	r0, #1
   15418:	bne	1544c <__assert_fail@plt+0x41f0>
   1541c:	ldrb	r0, [r1]
   15420:	cmp	r0, #0
   15424:	beq	1544c <__assert_fail@plt+0x41f0>
   15428:	add	r1, r1, #1
   1542c:	cmp	r8, sl
   15430:	strbcc	r0, [r2, r8]
   15434:	add	r8, r8, #1
   15438:	ldrb	r0, [r1], #1
   1543c:	cmp	r0, #0
   15440:	bne	1542c <__assert_fail@plt+0x41d0>
   15444:	b	1544c <__assert_fail@plt+0x41f0>
   15448:	ldr	r2, [sp, #80]	; 0x50
   1544c:	cmp	r8, sl
   15450:	movcc	r0, #0
   15454:	strbcc	r0, [r2, r8]
   15458:	mov	r0, r8
   1545c:	sub	sp, fp, #28
   15460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15464:	mov	r2, #1
   15468:	b	15344 <__assert_fail@plt+0x40e8>
   1546c:	ldr	r2, [sp, #84]	; 0x54
   15470:	mov	r7, #5
   15474:	b	1535c <__assert_fail@plt+0x4100>
   15478:	bl	11244 <abort@plt>
   1547c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15480:	add	fp, sp, #28
   15484:	sub	sp, sp, #28
   15488:	movw	r5, #41472	; 0xa200
   1548c:	cmp	r2, #0
   15490:	mov	r4, r1
   15494:	mov	r7, r0
   15498:	str	r0, [sp, #20]
   1549c:	movt	r5, #2
   154a0:	movne	r5, r2
   154a4:	bl	11160 <__errno_location@plt>
   154a8:	mov	sl, r0
   154ac:	ldm	r5, {r0, r1}
   154b0:	ldr	r2, [r5, #40]	; 0x28
   154b4:	ldr	r3, [r5, #44]	; 0x2c
   154b8:	add	r9, r5, #8
   154bc:	ldr	r6, [sl]
   154c0:	orr	r8, r1, #1
   154c4:	mov	r1, #0
   154c8:	str	r6, [sp, #24]
   154cc:	stm	sp, {r0, r8, r9}
   154d0:	str	r2, [sp, #12]
   154d4:	str	r3, [sp, #16]
   154d8:	mov	r0, #0
   154dc:	mov	r2, r7
   154e0:	mov	r3, r4
   154e4:	mov	r6, r4
   154e8:	bl	14474 <__assert_fail@plt+0x3218>
   154ec:	add	r7, r0, #1
   154f0:	mov	r0, r7
   154f4:	bl	1673c <__assert_fail@plt+0x54e0>
   154f8:	mov	r4, r0
   154fc:	ldr	r0, [r5]
   15500:	ldr	r2, [r5, #44]	; 0x2c
   15504:	ldr	r1, [r5, #40]	; 0x28
   15508:	mov	r3, r6
   1550c:	stm	sp, {r0, r8, r9}
   15510:	str	r2, [sp, #16]
   15514:	str	r1, [sp, #12]
   15518:	mov	r0, r4
   1551c:	mov	r1, r7
   15520:	ldr	r2, [sp, #20]
   15524:	bl	14474 <__assert_fail@plt+0x3218>
   15528:	ldr	r0, [sp, #24]
   1552c:	str	r0, [sl]
   15530:	mov	r0, r4
   15534:	sub	sp, fp, #28
   15538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1553c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15540:	add	fp, sp, #28
   15544:	sub	sp, sp, #36	; 0x24
   15548:	movw	r8, #41472	; 0xa200
   1554c:	cmp	r3, #0
   15550:	mov	r4, r2
   15554:	str	r2, [sp, #24]
   15558:	mov	r5, r1
   1555c:	mov	r6, r0
   15560:	str	r0, [sp, #20]
   15564:	movt	r8, #2
   15568:	movne	r8, r3
   1556c:	bl	11160 <__errno_location@plt>
   15570:	str	r0, [sp, #28]
   15574:	cmp	r4, #0
   15578:	add	sl, r8, #8
   1557c:	ldm	r8, {r3, r9}
   15580:	ldr	r7, [r0]
   15584:	ldr	r1, [r8, #40]	; 0x28
   15588:	ldr	r2, [r8, #44]	; 0x2c
   1558c:	mov	r0, #0
   15590:	orreq	r9, r9, #1
   15594:	str	r7, [sp, #32]
   15598:	mov	r7, r5
   1559c:	stm	sp, {r3, r9, sl}
   155a0:	str	r1, [sp, #12]
   155a4:	str	r2, [sp, #16]
   155a8:	mov	r1, #0
   155ac:	mov	r2, r6
   155b0:	mov	r3, r5
   155b4:	bl	14474 <__assert_fail@plt+0x3218>
   155b8:	add	r4, r0, #1
   155bc:	mov	r5, r0
   155c0:	mov	r0, r4
   155c4:	bl	1673c <__assert_fail@plt+0x54e0>
   155c8:	mov	r6, r0
   155cc:	ldr	r0, [r8]
   155d0:	ldr	r2, [r8, #44]	; 0x2c
   155d4:	ldr	r1, [r8, #40]	; 0x28
   155d8:	mov	r3, r7
   155dc:	stm	sp, {r0, r9, sl}
   155e0:	str	r2, [sp, #16]
   155e4:	str	r1, [sp, #12]
   155e8:	mov	r0, r6
   155ec:	mov	r1, r4
   155f0:	ldr	r2, [sp, #20]
   155f4:	bl	14474 <__assert_fail@plt+0x3218>
   155f8:	ldr	r0, [sp, #24]
   155fc:	ldr	r1, [sp, #32]
   15600:	ldr	r2, [sp, #28]
   15604:	cmp	r0, #0
   15608:	str	r1, [r2]
   1560c:	strne	r5, [r0]
   15610:	mov	r0, r6
   15614:	sub	sp, fp, #28
   15618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1561c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15620:	add	fp, sp, #24
   15624:	movw	r5, #41244	; 0xa11c
   15628:	movw	r8, #41240	; 0xa118
   1562c:	movt	r5, #2
   15630:	movt	r8, #2
   15634:	ldr	r0, [r5]
   15638:	ldr	r4, [r8]
   1563c:	cmp	r0, #2
   15640:	blt	1566c <__assert_fail@plt+0x4410>
   15644:	add	r7, r4, #12
   15648:	mov	r6, #0
   1564c:	ldr	r0, [r7, r6, lsl #3]
   15650:	bl	13ec0 <__assert_fail@plt+0x2c64>
   15654:	ldr	r1, [r5]
   15658:	add	r2, r6, #2
   1565c:	add	r0, r6, #1
   15660:	mov	r6, r0
   15664:	cmp	r2, r1
   15668:	blt	1564c <__assert_fail@plt+0x43f0>
   1566c:	ldr	r0, [r4, #4]
   15670:	movw	r7, #41520	; 0xa230
   15674:	movt	r7, #2
   15678:	cmp	r0, r7
   1567c:	beq	15694 <__assert_fail@plt+0x4438>
   15680:	bl	13ec0 <__assert_fail@plt+0x2c64>
   15684:	movw	r0, #41248	; 0xa120
   15688:	mov	r6, #256	; 0x100
   1568c:	movt	r0, #2
   15690:	strd	r6, [r0]
   15694:	movw	r6, #41248	; 0xa120
   15698:	movt	r6, #2
   1569c:	cmp	r4, r6
   156a0:	beq	156b0 <__assert_fail@plt+0x4454>
   156a4:	mov	r0, r4
   156a8:	bl	13ec0 <__assert_fail@plt+0x2c64>
   156ac:	str	r6, [r8]
   156b0:	mov	r0, #1
   156b4:	str	r0, [r5]
   156b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156bc:	movw	r3, #41472	; 0xa200
   156c0:	mvn	r2, #0
   156c4:	movt	r3, #2
   156c8:	b	156cc <__assert_fail@plt+0x4470>
   156cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156d0:	add	fp, sp, #28
   156d4:	sub	sp, sp, #44	; 0x2c
   156d8:	mov	r7, r3
   156dc:	str	r2, [sp, #36]	; 0x24
   156e0:	str	r1, [sp, #32]
   156e4:	mov	r5, r0
   156e8:	bl	11160 <__errno_location@plt>
   156ec:	cmp	r5, #0
   156f0:	blt	1585c <__assert_fail@plt+0x4600>
   156f4:	cmn	r5, #-2147483647	; 0x80000001
   156f8:	beq	1585c <__assert_fail@plt+0x4600>
   156fc:	movw	r8, #41244	; 0xa11c
   15700:	movw	r4, #41240	; 0xa118
   15704:	str	r0, [sp, #28]
   15708:	ldr	r0, [r0]
   1570c:	movt	r8, #2
   15710:	movt	r4, #2
   15714:	ldr	r1, [r8]
   15718:	ldr	r6, [r4]
   1571c:	str	r0, [sp, #24]
   15720:	cmp	r1, r5
   15724:	ble	15730 <__assert_fail@plt+0x44d4>
   15728:	mov	sl, r6
   1572c:	b	15798 <__assert_fail@plt+0x453c>
   15730:	movw	r9, #41248	; 0xa120
   15734:	mov	r0, #8
   15738:	add	r2, r5, #1
   1573c:	str	r1, [fp, #-32]	; 0xffffffe0
   15740:	mvn	r3, #-2147483648	; 0x80000000
   15744:	movt	r9, #2
   15748:	str	r0, [sp]
   1574c:	sub	r2, r2, r1
   15750:	sub	r1, fp, #32
   15754:	subs	r0, r6, r9
   15758:	movne	r0, r6
   1575c:	bl	1693c <__assert_fail@plt+0x56e0>
   15760:	cmp	r6, r9
   15764:	mov	sl, r0
   15768:	str	r0, [r4]
   1576c:	ldrdeq	r0, [r9]
   15770:	stmeq	sl, {r0, r1}
   15774:	ldr	r1, [r8]
   15778:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1577c:	add	r0, sl, r1, lsl #3
   15780:	sub	r1, r2, r1
   15784:	lsl	r2, r1, #3
   15788:	mov	r1, #0
   1578c:	bl	11178 <memset@plt>
   15790:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15794:	str	r0, [r8]
   15798:	mov	r9, sl
   1579c:	ldr	r6, [r9, r5, lsl #3]!
   157a0:	ldr	r4, [r9, #4]!
   157a4:	ldm	r7, {r0, r1}
   157a8:	ldr	r2, [r7, #40]	; 0x28
   157ac:	ldr	r3, [r7, #44]	; 0x2c
   157b0:	orr	r8, r1, #1
   157b4:	add	r1, r7, #8
   157b8:	stm	sp, {r0, r8}
   157bc:	add	r0, sp, #8
   157c0:	str	r1, [sp, #20]
   157c4:	stm	r0, {r1, r2, r3}
   157c8:	mov	r0, r4
   157cc:	mov	r1, r6
   157d0:	ldr	r2, [sp, #32]
   157d4:	ldr	r3, [sp, #36]	; 0x24
   157d8:	bl	14474 <__assert_fail@plt+0x3218>
   157dc:	cmp	r6, r0
   157e0:	bhi	15844 <__assert_fail@plt+0x45e8>
   157e4:	add	r6, r0, #1
   157e8:	movw	r0, #41520	; 0xa230
   157ec:	movt	r0, #2
   157f0:	str	r6, [sl, r5, lsl #3]
   157f4:	cmp	r4, r0
   157f8:	beq	15804 <__assert_fail@plt+0x45a8>
   157fc:	mov	r0, r4
   15800:	bl	13ec0 <__assert_fail@plt+0x2c64>
   15804:	mov	r0, r6
   15808:	bl	1673c <__assert_fail@plt+0x54e0>
   1580c:	str	r0, [r9]
   15810:	mov	r4, r0
   15814:	add	r3, sp, #8
   15818:	ldr	r0, [r7]
   1581c:	ldr	r1, [r7, #40]	; 0x28
   15820:	ldr	r2, [r7, #44]	; 0x2c
   15824:	stm	sp, {r0, r8}
   15828:	ldr	r0, [sp, #20]
   1582c:	stm	r3, {r0, r1, r2}
   15830:	mov	r0, r4
   15834:	mov	r1, r6
   15838:	ldr	r2, [sp, #32]
   1583c:	ldr	r3, [sp, #36]	; 0x24
   15840:	bl	14474 <__assert_fail@plt+0x3218>
   15844:	ldr	r0, [sp, #28]
   15848:	ldr	r1, [sp, #24]
   1584c:	str	r1, [r0]
   15850:	mov	r0, r4
   15854:	sub	sp, fp, #28
   15858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1585c:	bl	11244 <abort@plt>
   15860:	movw	r3, #41472	; 0xa200
   15864:	movt	r3, #2
   15868:	b	156cc <__assert_fail@plt+0x4470>
   1586c:	movw	r3, #41472	; 0xa200
   15870:	mov	r1, r0
   15874:	mov	r0, #0
   15878:	mvn	r2, #0
   1587c:	movt	r3, #2
   15880:	b	156cc <__assert_fail@plt+0x4470>
   15884:	movw	r3, #41472	; 0xa200
   15888:	mov	r2, r1
   1588c:	mov	r1, r0
   15890:	mov	r0, #0
   15894:	movt	r3, #2
   15898:	b	156cc <__assert_fail@plt+0x4470>
   1589c:	push	{fp, lr}
   158a0:	mov	fp, sp
   158a4:	sub	sp, sp, #48	; 0x30
   158a8:	vmov.i32	q8, #0	; 0x00000000
   158ac:	mov	ip, #32
   158b0:	mov	r3, sp
   158b4:	mov	lr, r2
   158b8:	cmp	r1, #10
   158bc:	add	r2, r3, #16
   158c0:	vst1.64	{d16-d17}, [r3], ip
   158c4:	vst1.64	{d16-d17}, [r3]
   158c8:	vst1.64	{d16-d17}, [r2]
   158cc:	beq	158ec <__assert_fail@plt+0x4690>
   158d0:	str	r1, [sp]
   158d4:	mov	r3, sp
   158d8:	mov	r1, lr
   158dc:	mvn	r2, #0
   158e0:	bl	156cc <__assert_fail@plt+0x4470>
   158e4:	mov	sp, fp
   158e8:	pop	{fp, pc}
   158ec:	bl	11244 <abort@plt>
   158f0:	push	{r4, sl, fp, lr}
   158f4:	add	fp, sp, #8
   158f8:	sub	sp, sp, #48	; 0x30
   158fc:	mov	ip, r3
   15900:	mov	r3, sp
   15904:	vmov.i32	q8, #0	; 0x00000000
   15908:	mov	lr, #32
   1590c:	cmp	r1, #10
   15910:	add	r4, r3, #16
   15914:	vst1.64	{d16-d17}, [r3], lr
   15918:	vst1.64	{d16-d17}, [r3]
   1591c:	vst1.64	{d16-d17}, [r4]
   15920:	beq	15940 <__assert_fail@plt+0x46e4>
   15924:	str	r1, [sp]
   15928:	mov	r1, r2
   1592c:	mov	r3, sp
   15930:	mov	r2, ip
   15934:	bl	156cc <__assert_fail@plt+0x4470>
   15938:	sub	sp, fp, #8
   1593c:	pop	{r4, sl, fp, pc}
   15940:	bl	11244 <abort@plt>
   15944:	push	{fp, lr}
   15948:	mov	fp, sp
   1594c:	sub	sp, sp, #48	; 0x30
   15950:	mov	r3, sp
   15954:	vmov.i32	q8, #0	; 0x00000000
   15958:	mov	ip, #32
   1595c:	cmp	r0, #10
   15960:	add	r2, r3, #16
   15964:	vst1.64	{d16-d17}, [r3], ip
   15968:	vst1.64	{d16-d17}, [r3]
   1596c:	vst1.64	{d16-d17}, [r2]
   15970:	beq	15990 <__assert_fail@plt+0x4734>
   15974:	str	r0, [sp]
   15978:	mov	r3, sp
   1597c:	mov	r0, #0
   15980:	mvn	r2, #0
   15984:	bl	156cc <__assert_fail@plt+0x4470>
   15988:	mov	sp, fp
   1598c:	pop	{fp, pc}
   15990:	bl	11244 <abort@plt>
   15994:	push	{fp, lr}
   15998:	mov	fp, sp
   1599c:	sub	sp, sp, #48	; 0x30
   159a0:	mov	r3, sp
   159a4:	vmov.i32	q8, #0	; 0x00000000
   159a8:	mov	ip, #32
   159ac:	cmp	r0, #10
   159b0:	add	lr, r3, #16
   159b4:	vst1.64	{d16-d17}, [r3], ip
   159b8:	vst1.64	{d16-d17}, [r3]
   159bc:	vst1.64	{d16-d17}, [lr]
   159c0:	beq	159dc <__assert_fail@plt+0x4780>
   159c4:	str	r0, [sp]
   159c8:	mov	r3, sp
   159cc:	mov	r0, #0
   159d0:	bl	156cc <__assert_fail@plt+0x4470>
   159d4:	mov	sp, fp
   159d8:	pop	{fp, pc}
   159dc:	bl	11244 <abort@plt>
   159e0:	push	{r4, sl, fp, lr}
   159e4:	add	fp, sp, #8
   159e8:	sub	sp, sp, #48	; 0x30
   159ec:	mov	lr, r0
   159f0:	movw	r0, #41472	; 0xa200
   159f4:	mov	r3, #32
   159f8:	mov	ip, r1
   159fc:	mov	r4, #1
   15a00:	movt	r0, #2
   15a04:	add	r1, r0, #16
   15a08:	vld1.64	{d16-d17}, [r0], r3
   15a0c:	mov	r3, sp
   15a10:	vld1.64	{d18-d19}, [r1]
   15a14:	add	r1, r3, #16
   15a18:	vld1.64	{d20-d21}, [r0]
   15a1c:	add	r0, r3, #32
   15a20:	vst1.64	{d18-d19}, [r1]
   15a24:	mov	r1, r3
   15a28:	vst1.64	{d20-d21}, [r0]
   15a2c:	mov	r0, #28
   15a30:	and	r0, r0, r2, lsr #3
   15a34:	and	r2, r2, #31
   15a38:	vst1.64	{d16-d17}, [r1], r0
   15a3c:	ldr	r0, [r1, #8]
   15a40:	bic	r4, r4, r0, lsr r2
   15a44:	eor	r0, r0, r4, lsl r2
   15a48:	mov	r2, ip
   15a4c:	str	r0, [r1, #8]
   15a50:	mov	r0, #0
   15a54:	mov	r1, lr
   15a58:	bl	156cc <__assert_fail@plt+0x4470>
   15a5c:	sub	sp, fp, #8
   15a60:	pop	{r4, sl, fp, pc}
   15a64:	push	{fp, lr}
   15a68:	mov	fp, sp
   15a6c:	sub	sp, sp, #48	; 0x30
   15a70:	mov	ip, r0
   15a74:	movw	r0, #41472	; 0xa200
   15a78:	mov	r3, #32
   15a7c:	movt	r0, #2
   15a80:	add	r2, r0, #16
   15a84:	vld1.64	{d16-d17}, [r0], r3
   15a88:	mov	r3, sp
   15a8c:	vld1.64	{d18-d19}, [r2]
   15a90:	add	r2, r3, #16
   15a94:	vld1.64	{d20-d21}, [r0]
   15a98:	add	r0, r3, #32
   15a9c:	vst1.64	{d18-d19}, [r2]
   15aa0:	mov	r2, r3
   15aa4:	vst1.64	{d20-d21}, [r0]
   15aa8:	mov	r0, #28
   15aac:	and	r0, r0, r1, lsr #3
   15ab0:	and	r1, r1, #31
   15ab4:	vst1.64	{d16-d17}, [r2], r0
   15ab8:	mov	r0, #1
   15abc:	ldr	lr, [r2, #8]
   15ac0:	bic	r0, r0, lr, lsr r1
   15ac4:	eor	r0, lr, r0, lsl r1
   15ac8:	mov	r1, ip
   15acc:	str	r0, [r2, #8]
   15ad0:	mov	r0, #0
   15ad4:	mvn	r2, #0
   15ad8:	bl	156cc <__assert_fail@plt+0x4470>
   15adc:	mov	sp, fp
   15ae0:	pop	{fp, pc}
   15ae4:	push	{fp, lr}
   15ae8:	mov	fp, sp
   15aec:	sub	sp, sp, #48	; 0x30
   15af0:	movw	r2, #41472	; 0xa200
   15af4:	mov	r3, #32
   15af8:	mov	r1, r0
   15afc:	movt	r2, #2
   15b00:	add	r0, r2, #16
   15b04:	vld1.64	{d16-d17}, [r2], r3
   15b08:	mov	r3, sp
   15b0c:	vld1.64	{d18-d19}, [r0]
   15b10:	add	r0, r3, #16
   15b14:	vld1.64	{d20-d21}, [r2]
   15b18:	mov	r2, r3
   15b1c:	vst1.64	{d18-d19}, [r0]
   15b20:	add	r0, r3, #32
   15b24:	vst1.64	{d20-d21}, [r0]
   15b28:	mov	r0, #12
   15b2c:	vst1.64	{d16-d17}, [r2], r0
   15b30:	ldr	r0, [r2]
   15b34:	orr	r0, r0, #67108864	; 0x4000000
   15b38:	str	r0, [r2]
   15b3c:	mov	r0, #0
   15b40:	mvn	r2, #0
   15b44:	bl	156cc <__assert_fail@plt+0x4470>
   15b48:	mov	sp, fp
   15b4c:	pop	{fp, pc}
   15b50:	push	{fp, lr}
   15b54:	mov	fp, sp
   15b58:	sub	sp, sp, #48	; 0x30
   15b5c:	mov	ip, r1
   15b60:	mov	r1, r0
   15b64:	movw	r0, #41472	; 0xa200
   15b68:	mov	r3, #32
   15b6c:	movt	r0, #2
   15b70:	add	r2, r0, #16
   15b74:	vld1.64	{d16-d17}, [r0], r3
   15b78:	mov	r3, sp
   15b7c:	vld1.64	{d18-d19}, [r2]
   15b80:	add	r2, r3, #16
   15b84:	vld1.64	{d20-d21}, [r0]
   15b88:	add	r0, r3, #32
   15b8c:	vst1.64	{d18-d19}, [r2]
   15b90:	mov	r2, r3
   15b94:	vst1.64	{d20-d21}, [r0]
   15b98:	mov	r0, #12
   15b9c:	vst1.64	{d16-d17}, [r2], r0
   15ba0:	ldr	r0, [r2]
   15ba4:	orr	r0, r0, #67108864	; 0x4000000
   15ba8:	str	r0, [r2]
   15bac:	mov	r0, #0
   15bb0:	mov	r2, ip
   15bb4:	bl	156cc <__assert_fail@plt+0x4470>
   15bb8:	mov	sp, fp
   15bbc:	pop	{fp, pc}
   15bc0:	push	{r4, sl, fp, lr}
   15bc4:	add	fp, sp, #8
   15bc8:	sub	sp, sp, #96	; 0x60
   15bcc:	mov	ip, r2
   15bd0:	mov	r2, sp
   15bd4:	vmov.i32	q8, #0	; 0x00000000
   15bd8:	mov	r4, #28
   15bdc:	cmp	r1, #10
   15be0:	mov	r3, r2
   15be4:	add	lr, r2, #16
   15be8:	vst1.64	{d16-d17}, [r3], r4
   15bec:	vst1.64	{d16-d17}, [lr]
   15bf0:	vst1.32	{d16-d17}, [r3]
   15bf4:	beq	15c44 <__assert_fail@plt+0x49e8>
   15bf8:	vld1.64	{d16-d17}, [r2], r4
   15bfc:	vld1.64	{d18-d19}, [lr]
   15c00:	add	r3, sp, #48	; 0x30
   15c04:	add	r4, r3, #4
   15c08:	vld1.32	{d20-d21}, [r2]
   15c0c:	add	r2, r3, #20
   15c10:	vst1.32	{d16-d17}, [r4]
   15c14:	vst1.32	{d18-d19}, [r2]
   15c18:	add	r2, r3, #32
   15c1c:	vst1.32	{d20-d21}, [r2]
   15c20:	str	r1, [sp, #48]	; 0x30
   15c24:	mvn	r2, #0
   15c28:	ldr	r1, [sp, #60]	; 0x3c
   15c2c:	orr	r1, r1, #67108864	; 0x4000000
   15c30:	str	r1, [sp, #60]	; 0x3c
   15c34:	mov	r1, ip
   15c38:	bl	156cc <__assert_fail@plt+0x4470>
   15c3c:	sub	sp, fp, #8
   15c40:	pop	{r4, sl, fp, pc}
   15c44:	bl	11244 <abort@plt>
   15c48:	push	{r4, r5, fp, lr}
   15c4c:	add	fp, sp, #8
   15c50:	sub	sp, sp, #48	; 0x30
   15c54:	mov	ip, r3
   15c58:	movw	r3, #41472	; 0xa200
   15c5c:	mov	lr, #32
   15c60:	cmp	r1, #0
   15c64:	mov	r5, sp
   15c68:	movt	r3, #2
   15c6c:	cmpne	r2, #0
   15c70:	add	r4, r3, #16
   15c74:	vld1.64	{d16-d17}, [r3], lr
   15c78:	vld1.64	{d18-d19}, [r4]
   15c7c:	add	r4, r5, #16
   15c80:	vld1.64	{d20-d21}, [r3]
   15c84:	vst1.64	{d16-d17}, [r5], lr
   15c88:	mov	r3, #10
   15c8c:	vst1.64	{d18-d19}, [r4]
   15c90:	vst1.64	{d20-d21}, [r5]
   15c94:	str	r3, [sp]
   15c98:	bne	15ca0 <__assert_fail@plt+0x4a44>
   15c9c:	bl	11244 <abort@plt>
   15ca0:	str	r2, [sp, #44]	; 0x2c
   15ca4:	str	r1, [sp, #40]	; 0x28
   15ca8:	mov	r3, sp
   15cac:	mov	r1, ip
   15cb0:	mvn	r2, #0
   15cb4:	bl	156cc <__assert_fail@plt+0x4470>
   15cb8:	sub	sp, fp, #8
   15cbc:	pop	{r4, r5, fp, pc}
   15cc0:	push	{r4, r5, fp, lr}
   15cc4:	add	fp, sp, #8
   15cc8:	sub	sp, sp, #48	; 0x30
   15ccc:	mov	lr, r3
   15cd0:	movw	r3, #41472	; 0xa200
   15cd4:	mov	ip, #32
   15cd8:	cmp	r1, #0
   15cdc:	mov	r5, sp
   15ce0:	movt	r3, #2
   15ce4:	cmpne	r2, #0
   15ce8:	add	r4, r3, #16
   15cec:	vld1.64	{d16-d17}, [r3], ip
   15cf0:	vld1.64	{d18-d19}, [r4]
   15cf4:	add	r4, r5, #16
   15cf8:	vld1.64	{d20-d21}, [r3]
   15cfc:	vst1.64	{d16-d17}, [r5], ip
   15d00:	mov	r3, #10
   15d04:	vst1.64	{d18-d19}, [r4]
   15d08:	vst1.64	{d20-d21}, [r5]
   15d0c:	str	r3, [sp]
   15d10:	bne	15d18 <__assert_fail@plt+0x4abc>
   15d14:	bl	11244 <abort@plt>
   15d18:	ldr	ip, [fp, #8]
   15d1c:	str	r2, [sp, #44]	; 0x2c
   15d20:	str	r1, [sp, #40]	; 0x28
   15d24:	mov	r3, sp
   15d28:	mov	r1, lr
   15d2c:	mov	r2, ip
   15d30:	bl	156cc <__assert_fail@plt+0x4470>
   15d34:	sub	sp, fp, #8
   15d38:	pop	{r4, r5, fp, pc}
   15d3c:	push	{r4, sl, fp, lr}
   15d40:	add	fp, sp, #8
   15d44:	sub	sp, sp, #48	; 0x30
   15d48:	mov	ip, r2
   15d4c:	movw	r2, #41472	; 0xa200
   15d50:	mov	lr, #32
   15d54:	cmp	r0, #0
   15d58:	mov	r4, sp
   15d5c:	movt	r2, #2
   15d60:	cmpne	r1, #0
   15d64:	add	r3, r2, #16
   15d68:	vld1.64	{d16-d17}, [r2], lr
   15d6c:	vld1.64	{d18-d19}, [r3]
   15d70:	add	r3, r4, #16
   15d74:	vld1.64	{d20-d21}, [r2]
   15d78:	vst1.64	{d16-d17}, [r4], lr
   15d7c:	mov	r2, #10
   15d80:	vst1.64	{d18-d19}, [r3]
   15d84:	vst1.64	{d20-d21}, [r4]
   15d88:	str	r2, [sp]
   15d8c:	bne	15d94 <__assert_fail@plt+0x4b38>
   15d90:	bl	11244 <abort@plt>
   15d94:	str	r1, [sp, #44]	; 0x2c
   15d98:	str	r0, [sp, #40]	; 0x28
   15d9c:	mov	r3, sp
   15da0:	mov	r0, #0
   15da4:	mov	r1, ip
   15da8:	mvn	r2, #0
   15dac:	bl	156cc <__assert_fail@plt+0x4470>
   15db0:	sub	sp, fp, #8
   15db4:	pop	{r4, sl, fp, pc}
   15db8:	push	{r4, r5, fp, lr}
   15dbc:	add	fp, sp, #8
   15dc0:	sub	sp, sp, #48	; 0x30
   15dc4:	mov	lr, r2
   15dc8:	movw	r2, #41472	; 0xa200
   15dcc:	mov	ip, r3
   15dd0:	mov	r3, #32
   15dd4:	cmp	r0, #0
   15dd8:	mov	r5, sp
   15ddc:	movt	r2, #2
   15de0:	cmpne	r1, #0
   15de4:	add	r4, r2, #16
   15de8:	vld1.64	{d16-d17}, [r2], r3
   15dec:	vld1.64	{d18-d19}, [r4]
   15df0:	add	r4, r5, #16
   15df4:	vld1.64	{d20-d21}, [r2]
   15df8:	vst1.64	{d16-d17}, [r5], r3
   15dfc:	mov	r2, #10
   15e00:	vst1.64	{d18-d19}, [r4]
   15e04:	vst1.64	{d20-d21}, [r5]
   15e08:	str	r2, [sp]
   15e0c:	bne	15e14 <__assert_fail@plt+0x4bb8>
   15e10:	bl	11244 <abort@plt>
   15e14:	str	r1, [sp, #44]	; 0x2c
   15e18:	str	r0, [sp, #40]	; 0x28
   15e1c:	mov	r3, sp
   15e20:	mov	r0, #0
   15e24:	mov	r1, lr
   15e28:	mov	r2, ip
   15e2c:	bl	156cc <__assert_fail@plt+0x4470>
   15e30:	sub	sp, fp, #8
   15e34:	pop	{r4, r5, fp, pc}
   15e38:	movw	r3, #41256	; 0xa128
   15e3c:	movt	r3, #2
   15e40:	b	156cc <__assert_fail@plt+0x4470>
   15e44:	movw	r3, #41256	; 0xa128
   15e48:	mov	r2, r1
   15e4c:	mov	r1, r0
   15e50:	mov	r0, #0
   15e54:	movt	r3, #2
   15e58:	b	156cc <__assert_fail@plt+0x4470>
   15e5c:	movw	r3, #41256	; 0xa128
   15e60:	mvn	r2, #0
   15e64:	movt	r3, #2
   15e68:	b	156cc <__assert_fail@plt+0x4470>
   15e6c:	movw	r3, #41256	; 0xa128
   15e70:	mov	r1, r0
   15e74:	mov	r0, #0
   15e78:	mvn	r2, #0
   15e7c:	movt	r3, #2
   15e80:	b	156cc <__assert_fail@plt+0x4470>
   15e84:	push	{r4, r5, fp, lr}
   15e88:	add	fp, sp, #8
   15e8c:	mov	r5, r0
   15e90:	mov	r4, r1
   15e94:	mov	r0, #0
   15e98:	mov	r2, #5
   15e9c:	mov	r1, r5
   15ea0:	bl	11058 <dcgettext@plt>
   15ea4:	cmp	r0, r5
   15ea8:	popne	{r4, r5, fp, pc}
   15eac:	bl	18690 <__assert_fail@plt+0x7434>
   15eb0:	ldrb	r1, [r0]
   15eb4:	and	r1, r1, #223	; 0xdf
   15eb8:	cmp	r1, #71	; 0x47
   15ebc:	beq	15f24 <__assert_fail@plt+0x4cc8>
   15ec0:	cmp	r1, #85	; 0x55
   15ec4:	bne	15f48 <__assert_fail@plt+0x4cec>
   15ec8:	ldrb	r1, [r0, #1]
   15ecc:	and	r1, r1, #223	; 0xdf
   15ed0:	cmp	r1, #84	; 0x54
   15ed4:	bne	15f48 <__assert_fail@plt+0x4cec>
   15ed8:	ldrb	r1, [r0, #2]
   15edc:	and	r1, r1, #223	; 0xdf
   15ee0:	cmp	r1, #70	; 0x46
   15ee4:	ldrbeq	r1, [r0, #3]
   15ee8:	cmpeq	r1, #45	; 0x2d
   15eec:	bne	15f48 <__assert_fail@plt+0x4cec>
   15ef0:	ldrb	r1, [r0, #4]
   15ef4:	cmp	r1, #56	; 0x38
   15ef8:	ldrbeq	r0, [r0, #5]
   15efc:	cmpeq	r0, #0
   15f00:	bne	15f48 <__assert_fail@plt+0x4cec>
   15f04:	ldrb	r1, [r5]
   15f08:	movw	r2, #39160	; 0x98f8
   15f0c:	movw	r0, #39164	; 0x98fc
   15f10:	movt	r2, #1
   15f14:	movt	r0, #1
   15f18:	cmp	r1, #96	; 0x60
   15f1c:	moveq	r0, r2
   15f20:	pop	{r4, r5, fp, pc}
   15f24:	ldrb	r1, [r0, #1]
   15f28:	and	r1, r1, #223	; 0xdf
   15f2c:	cmp	r1, #66	; 0x42
   15f30:	bne	15f48 <__assert_fail@plt+0x4cec>
   15f34:	ldrb	r1, [r0, #2]
   15f38:	cmp	r1, #49	; 0x31
   15f3c:	ldrbeq	r1, [r0, #3]
   15f40:	cmpeq	r1, #56	; 0x38
   15f44:	beq	15f64 <__assert_fail@plt+0x4d08>
   15f48:	movw	r1, #39154	; 0x98f2
   15f4c:	movw	r0, #39158	; 0x98f6
   15f50:	cmp	r4, #9
   15f54:	movt	r1, #1
   15f58:	movt	r0, #1
   15f5c:	moveq	r0, r1
   15f60:	pop	{r4, r5, fp, pc}
   15f64:	ldrb	r1, [r0, #4]
   15f68:	cmp	r1, #48	; 0x30
   15f6c:	ldrbeq	r1, [r0, #5]
   15f70:	cmpeq	r1, #51	; 0x33
   15f74:	bne	15f48 <__assert_fail@plt+0x4cec>
   15f78:	ldrb	r1, [r0, #6]
   15f7c:	cmp	r1, #48	; 0x30
   15f80:	ldrbeq	r0, [r0, #7]
   15f84:	cmpeq	r0, #0
   15f88:	bne	15f48 <__assert_fail@plt+0x4cec>
   15f8c:	ldrb	r1, [r5]
   15f90:	movw	r2, #39168	; 0x9900
   15f94:	movw	r0, #39172	; 0x9904
   15f98:	movt	r2, #1
   15f9c:	movt	r0, #1
   15fa0:	b	15f18 <__assert_fail@plt+0x4cbc>
   15fa4:	push	{r4, r5, r6, r7, fp, lr}
   15fa8:	add	fp, sp, #16
   15fac:	mov	r4, r1
   15fb0:	mov	r1, #0
   15fb4:	mov	r6, r2
   15fb8:	bl	111f0 <setlocale@plt>
   15fbc:	cmp	r0, #0
   15fc0:	beq	15ff0 <__assert_fail@plt+0x4d94>
   15fc4:	mov	r7, r0
   15fc8:	bl	11148 <strlen@plt>
   15fcc:	cmp	r0, r6
   15fd0:	bcs	16010 <__assert_fail@plt+0x4db4>
   15fd4:	add	r2, r0, #1
   15fd8:	mov	r0, r4
   15fdc:	mov	r1, r7
   15fe0:	bl	1101c <memcpy@plt>
   15fe4:	mov	r5, #0
   15fe8:	mov	r0, r5
   15fec:	pop	{r4, r5, r6, r7, fp, pc}
   15ff0:	cmp	r6, #0
   15ff4:	mov	r5, #22
   15ff8:	movne	r0, #0
   15ffc:	strbne	r0, [r4]
   16000:	movne	r0, r5
   16004:	popne	{r4, r5, r6, r7, fp, pc}
   16008:	mov	r0, r5
   1600c:	pop	{r4, r5, r6, r7, fp, pc}
   16010:	mov	r5, #34	; 0x22
   16014:	cmp	r6, #0
   16018:	beq	16038 <__assert_fail@plt+0x4ddc>
   1601c:	sub	r6, r6, #1
   16020:	mov	r0, r4
   16024:	mov	r1, r7
   16028:	mov	r2, r6
   1602c:	bl	1101c <memcpy@plt>
   16030:	mov	r0, #0
   16034:	strb	r0, [r4, r6]
   16038:	mov	r0, r5
   1603c:	pop	{r4, r5, r6, r7, fp, pc}
   16040:	mov	r1, #0
   16044:	b	111f0 <setlocale@plt>
   16048:	mov	r1, #0
   1604c:	mov	r2, #3
   16050:	b	184b0 <__assert_fail@plt+0x7254>
   16054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16058:	add	fp, sp, #24
   1605c:	sub	sp, sp, #32
   16060:	ldr	r6, [fp, #12]
   16064:	ldr	r7, [fp, #8]
   16068:	mov	r4, r2
   1606c:	mov	r8, r0
   16070:	cmp	r1, #0
   16074:	beq	1609c <__assert_fail@plt+0x4e40>
   16078:	movw	r2, #39260	; 0x995c
   1607c:	mov	r5, r1
   16080:	str	r3, [sp, #4]
   16084:	str	r4, [sp]
   16088:	mov	r0, r8
   1608c:	mov	r1, #1
   16090:	movt	r2, #1
   16094:	mov	r3, r5
   16098:	b	160b4 <__assert_fail@plt+0x4e58>
   1609c:	movw	r2, #39272	; 0x9968
   160a0:	str	r3, [sp]
   160a4:	mov	r0, r8
   160a8:	mov	r1, #1
   160ac:	mov	r3, r4
   160b0:	movt	r2, #1
   160b4:	bl	1119c <__fprintf_chk@plt>
   160b8:	movw	r1, #39279	; 0x996f
   160bc:	mov	r0, #0
   160c0:	mov	r2, #5
   160c4:	movt	r1, #1
   160c8:	bl	11058 <dcgettext@plt>
   160cc:	movw	r2, #39997	; 0x9c3d
   160d0:	mov	r3, r0
   160d4:	movw	r0, #2022	; 0x7e6
   160d8:	mov	r1, #1
   160dc:	str	r0, [sp]
   160e0:	movt	r2, #1
   160e4:	mov	r0, r8
   160e8:	bl	1119c <__fprintf_chk@plt>
   160ec:	movw	r4, #38557	; 0x969d
   160f0:	mov	r1, r8
   160f4:	movt	r4, #1
   160f8:	mov	r0, r4
   160fc:	bl	10fc8 <fputs_unlocked@plt>
   16100:	movw	r1, #39283	; 0x9973
   16104:	mov	r0, #0
   16108:	mov	r2, #5
   1610c:	movt	r1, #1
   16110:	bl	11058 <dcgettext@plt>
   16114:	movw	r3, #39454	; 0x9a1e
   16118:	mov	r2, r0
   1611c:	mov	r0, r8
   16120:	mov	r1, #1
   16124:	movt	r3, #1
   16128:	bl	1119c <__fprintf_chk@plt>
   1612c:	mov	r0, r4
   16130:	mov	r1, r8
   16134:	bl	10fc8 <fputs_unlocked@plt>
   16138:	cmp	r6, #9
   1613c:	bhi	16178 <__assert_fail@plt+0x4f1c>
   16140:	add	r0, pc, #0
   16144:	ldr	pc, [r0, r6, lsl #2]
   16148:	andeq	r6, r1, r0, ror r1
   1614c:	andeq	r6, r1, r4, lsl #3
   16150:			; <UNDEFINED> instruction: 0x000161b4
   16154:	ldrdeq	r6, [r1], -ip
   16158:	andeq	r6, r1, r4, lsl #4
   1615c:	andeq	r6, r1, ip, lsr #4
   16160:	andeq	r6, r1, r4, asr r2
   16164:	andeq	r6, r1, ip, lsl #5
   16168:	andeq	r6, r1, ip, lsr #6
   1616c:	ldrdeq	r6, [r1], -r4
   16170:	sub	sp, fp, #24
   16174:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16178:	movw	r1, #39807	; 0x9b7f
   1617c:	movt	r1, #1
   16180:	b	162dc <__assert_fail@plt+0x5080>
   16184:	movw	r1, #39488	; 0x9a40
   16188:	mov	r0, #0
   1618c:	mov	r2, #5
   16190:	movt	r1, #1
   16194:	bl	11058 <dcgettext@plt>
   16198:	ldr	r3, [r7]
   1619c:	mov	r2, r0
   161a0:	mov	r0, r8
   161a4:	mov	r1, #1
   161a8:	sub	sp, fp, #24
   161ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   161b0:	b	1119c <__fprintf_chk@plt>
   161b4:	movw	r1, #39504	; 0x9a50
   161b8:	mov	r0, #0
   161bc:	mov	r2, #5
   161c0:	movt	r1, #1
   161c4:	bl	11058 <dcgettext@plt>
   161c8:	mov	r2, r0
   161cc:	ldr	r3, [r7]
   161d0:	ldr	r0, [r7, #4]
   161d4:	str	r0, [sp]
   161d8:	b	162c8 <__assert_fail@plt+0x506c>
   161dc:	movw	r1, #39527	; 0x9a67
   161e0:	mov	r0, #0
   161e4:	mov	r2, #5
   161e8:	movt	r1, #1
   161ec:	bl	11058 <dcgettext@plt>
   161f0:	ldr	r3, [r7]
   161f4:	mov	r2, r0
   161f8:	ldmib	r7, {r0, r1}
   161fc:	stm	sp, {r0, r1}
   16200:	b	162c8 <__assert_fail@plt+0x506c>
   16204:	movw	r1, #39555	; 0x9a83
   16208:	mov	r0, #0
   1620c:	mov	r2, #5
   16210:	movt	r1, #1
   16214:	bl	11058 <dcgettext@plt>
   16218:	ldr	r3, [r7]
   1621c:	mov	r2, r0
   16220:	ldmib	r7, {r0, r1, r7}
   16224:	stm	sp, {r0, r1, r7}
   16228:	b	162c8 <__assert_fail@plt+0x506c>
   1622c:	movw	r1, #39587	; 0x9aa3
   16230:	mov	r0, #0
   16234:	mov	r2, #5
   16238:	movt	r1, #1
   1623c:	bl	11058 <dcgettext@plt>
   16240:	ldr	r3, [r7]
   16244:	mov	r2, r0
   16248:	ldmib	r7, {r0, r1, r6, r7}
   1624c:	stm	sp, {r0, r1, r6, r7}
   16250:	b	162c8 <__assert_fail@plt+0x506c>
   16254:	movw	r1, #39623	; 0x9ac7
   16258:	mov	r0, #0
   1625c:	mov	r2, #5
   16260:	movt	r1, #1
   16264:	bl	11058 <dcgettext@plt>
   16268:	ldr	r3, [r7]
   1626c:	mov	r2, r0
   16270:	ldmib	r7, {r0, r1, r6}
   16274:	ldr	r5, [r7, #16]
   16278:	ldr	r7, [r7, #20]
   1627c:	stm	sp, {r0, r1, r6}
   16280:	str	r5, [sp, #12]
   16284:	str	r7, [sp, #16]
   16288:	b	162c8 <__assert_fail@plt+0x506c>
   1628c:	movw	r1, #39663	; 0x9aef
   16290:	mov	r0, #0
   16294:	mov	r2, #5
   16298:	movt	r1, #1
   1629c:	bl	11058 <dcgettext@plt>
   162a0:	ldr	r3, [r7]
   162a4:	mov	r2, r0
   162a8:	ldmib	r7, {r0, r1, r6}
   162ac:	ldr	r5, [r7, #16]
   162b0:	ldr	r4, [r7, #20]
   162b4:	ldr	r7, [r7, #24]
   162b8:	stm	sp, {r0, r1, r6}
   162bc:	str	r5, [sp, #12]
   162c0:	str	r4, [sp, #16]
   162c4:	str	r7, [sp, #20]
   162c8:	mov	r0, r8
   162cc:	mov	r1, #1
   162d0:	b	1637c <__assert_fail@plt+0x5120>
   162d4:	movw	r1, #39755	; 0x9b4b
   162d8:	movt	r1, #1
   162dc:	mov	r0, #0
   162e0:	mov	r2, #5
   162e4:	bl	11058 <dcgettext@plt>
   162e8:	mov	ip, r0
   162ec:	ldr	r3, [r7]
   162f0:	ldr	r0, [r7, #4]
   162f4:	ldr	r1, [r7, #8]
   162f8:	ldr	r6, [r7, #12]
   162fc:	ldr	r5, [r7, #16]
   16300:	ldr	r4, [r7, #20]
   16304:	ldr	r2, [r7, #24]
   16308:	ldr	lr, [r7, #28]
   1630c:	ldr	r7, [r7, #32]
   16310:	stm	sp, {r0, r1, r6}
   16314:	str	r5, [sp, #12]
   16318:	str	r4, [sp, #16]
   1631c:	str	r2, [sp, #20]
   16320:	str	lr, [sp, #24]
   16324:	str	r7, [sp, #28]
   16328:	b	16370 <__assert_fail@plt+0x5114>
   1632c:	movw	r1, #39707	; 0x9b1b
   16330:	mov	r0, #0
   16334:	mov	r2, #5
   16338:	movt	r1, #1
   1633c:	bl	11058 <dcgettext@plt>
   16340:	mov	ip, r0
   16344:	ldr	r3, [r7]
   16348:	ldmib	r7, {r0, r1, r6}
   1634c:	ldr	r5, [r7, #16]
   16350:	ldr	r4, [r7, #20]
   16354:	ldr	r2, [r7, #24]
   16358:	ldr	r7, [r7, #28]
   1635c:	stm	sp, {r0, r1, r6}
   16360:	str	r5, [sp, #12]
   16364:	str	r4, [sp, #16]
   16368:	str	r2, [sp, #20]
   1636c:	str	r7, [sp, #24]
   16370:	mov	r0, r8
   16374:	mov	r1, #1
   16378:	mov	r2, ip
   1637c:	bl	1119c <__fprintf_chk@plt>
   16380:	sub	sp, fp, #24
   16384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16388:	push	{r4, sl, fp, lr}
   1638c:	add	fp, sp, #8
   16390:	sub	sp, sp, #8
   16394:	ldr	ip, [fp, #8]
   16398:	mov	lr, #0
   1639c:	ldr	r4, [ip, lr, lsl #2]
   163a0:	add	lr, lr, #1
   163a4:	cmp	r4, #0
   163a8:	bne	1639c <__assert_fail@plt+0x5140>
   163ac:	sub	r4, lr, #1
   163b0:	str	ip, [sp]
   163b4:	str	r4, [sp, #4]
   163b8:	bl	16054 <__assert_fail@plt+0x4df8>
   163bc:	sub	sp, fp, #8
   163c0:	pop	{r4, sl, fp, pc}
   163c4:	push	{fp, lr}
   163c8:	mov	fp, sp
   163cc:	sub	sp, sp, #48	; 0x30
   163d0:	ldr	ip, [fp, #8]
   163d4:	ldr	lr, [ip]
   163d8:	cmp	lr, #0
   163dc:	str	lr, [sp, #8]
   163e0:	beq	1647c <__assert_fail@plt+0x5220>
   163e4:	ldr	lr, [ip, #4]
   163e8:	cmp	lr, #0
   163ec:	str	lr, [sp, #12]
   163f0:	beq	16484 <__assert_fail@plt+0x5228>
   163f4:	ldr	lr, [ip, #8]
   163f8:	cmp	lr, #0
   163fc:	str	lr, [sp, #16]
   16400:	beq	1648c <__assert_fail@plt+0x5230>
   16404:	ldr	lr, [ip, #12]
   16408:	cmp	lr, #0
   1640c:	str	lr, [sp, #20]
   16410:	beq	16494 <__assert_fail@plt+0x5238>
   16414:	ldr	lr, [ip, #16]
   16418:	cmp	lr, #0
   1641c:	str	lr, [sp, #24]
   16420:	beq	1649c <__assert_fail@plt+0x5240>
   16424:	ldr	lr, [ip, #20]
   16428:	cmp	lr, #0
   1642c:	str	lr, [sp, #28]
   16430:	beq	164a4 <__assert_fail@plt+0x5248>
   16434:	ldr	lr, [ip, #24]
   16438:	cmp	lr, #0
   1643c:	str	lr, [sp, #32]
   16440:	beq	164ac <__assert_fail@plt+0x5250>
   16444:	ldr	lr, [ip, #28]
   16448:	cmp	lr, #0
   1644c:	str	lr, [sp, #36]	; 0x24
   16450:	beq	164b4 <__assert_fail@plt+0x5258>
   16454:	ldr	lr, [ip, #32]
   16458:	cmp	lr, #0
   1645c:	str	lr, [sp, #40]	; 0x28
   16460:	beq	164bc <__assert_fail@plt+0x5260>
   16464:	ldr	lr, [ip, #36]	; 0x24
   16468:	mov	ip, #10
   1646c:	cmp	lr, #0
   16470:	str	lr, [sp, #44]	; 0x2c
   16474:	movweq	ip, #9
   16478:	b	164c0 <__assert_fail@plt+0x5264>
   1647c:	mov	ip, #0
   16480:	b	164c0 <__assert_fail@plt+0x5264>
   16484:	mov	ip, #1
   16488:	b	164c0 <__assert_fail@plt+0x5264>
   1648c:	mov	ip, #2
   16490:	b	164c0 <__assert_fail@plt+0x5264>
   16494:	mov	ip, #3
   16498:	b	164c0 <__assert_fail@plt+0x5264>
   1649c:	mov	ip, #4
   164a0:	b	164c0 <__assert_fail@plt+0x5264>
   164a4:	mov	ip, #5
   164a8:	b	164c0 <__assert_fail@plt+0x5264>
   164ac:	mov	ip, #6
   164b0:	b	164c0 <__assert_fail@plt+0x5264>
   164b4:	mov	ip, #7
   164b8:	b	164c0 <__assert_fail@plt+0x5264>
   164bc:	mov	ip, #8
   164c0:	add	lr, sp, #8
   164c4:	str	ip, [sp, #4]
   164c8:	str	lr, [sp]
   164cc:	bl	16054 <__assert_fail@plt+0x4df8>
   164d0:	mov	sp, fp
   164d4:	pop	{fp, pc}
   164d8:	push	{fp, lr}
   164dc:	mov	fp, sp
   164e0:	sub	sp, sp, #56	; 0x38
   164e4:	add	ip, fp, #8
   164e8:	str	ip, [sp, #12]
   164ec:	ldr	lr, [fp, #8]
   164f0:	cmp	lr, #0
   164f4:	str	lr, [sp, #16]
   164f8:	beq	16594 <__assert_fail@plt+0x5338>
   164fc:	ldr	lr, [ip, #4]
   16500:	cmp	lr, #0
   16504:	str	lr, [sp, #20]
   16508:	beq	1659c <__assert_fail@plt+0x5340>
   1650c:	ldr	lr, [ip, #8]
   16510:	cmp	lr, #0
   16514:	str	lr, [sp, #24]
   16518:	beq	165a4 <__assert_fail@plt+0x5348>
   1651c:	ldr	lr, [ip, #12]
   16520:	cmp	lr, #0
   16524:	str	lr, [sp, #28]
   16528:	beq	165ac <__assert_fail@plt+0x5350>
   1652c:	ldr	lr, [ip, #16]
   16530:	cmp	lr, #0
   16534:	str	lr, [sp, #32]
   16538:	beq	165b4 <__assert_fail@plt+0x5358>
   1653c:	ldr	lr, [ip, #20]
   16540:	cmp	lr, #0
   16544:	str	lr, [sp, #36]	; 0x24
   16548:	beq	165bc <__assert_fail@plt+0x5360>
   1654c:	ldr	lr, [ip, #24]
   16550:	cmp	lr, #0
   16554:	str	lr, [sp, #40]	; 0x28
   16558:	beq	165c4 <__assert_fail@plt+0x5368>
   1655c:	ldr	lr, [ip, #28]
   16560:	cmp	lr, #0
   16564:	str	lr, [sp, #44]	; 0x2c
   16568:	beq	165cc <__assert_fail@plt+0x5370>
   1656c:	ldr	lr, [ip, #32]
   16570:	cmp	lr, #0
   16574:	str	lr, [sp, #48]	; 0x30
   16578:	beq	165d4 <__assert_fail@plt+0x5378>
   1657c:	ldr	lr, [ip, #36]	; 0x24
   16580:	mov	ip, #10
   16584:	cmp	lr, #0
   16588:	str	lr, [sp, #52]	; 0x34
   1658c:	movweq	ip, #9
   16590:	b	165d8 <__assert_fail@plt+0x537c>
   16594:	mov	ip, #0
   16598:	b	165d8 <__assert_fail@plt+0x537c>
   1659c:	mov	ip, #1
   165a0:	b	165d8 <__assert_fail@plt+0x537c>
   165a4:	mov	ip, #2
   165a8:	b	165d8 <__assert_fail@plt+0x537c>
   165ac:	mov	ip, #3
   165b0:	b	165d8 <__assert_fail@plt+0x537c>
   165b4:	mov	ip, #4
   165b8:	b	165d8 <__assert_fail@plt+0x537c>
   165bc:	mov	ip, #5
   165c0:	b	165d8 <__assert_fail@plt+0x537c>
   165c4:	mov	ip, #6
   165c8:	b	165d8 <__assert_fail@plt+0x537c>
   165cc:	mov	ip, #7
   165d0:	b	165d8 <__assert_fail@plt+0x537c>
   165d4:	mov	ip, #8
   165d8:	add	lr, sp, #16
   165dc:	str	ip, [sp, #4]
   165e0:	str	lr, [sp]
   165e4:	bl	16054 <__assert_fail@plt+0x4df8>
   165e8:	mov	sp, fp
   165ec:	pop	{fp, pc}
   165f0:	push	{fp, lr}
   165f4:	mov	fp, sp
   165f8:	movw	r0, #41332	; 0xa174
   165fc:	movt	r0, #2
   16600:	ldr	r1, [r0]
   16604:	movw	r0, #38557	; 0x969d
   16608:	movt	r0, #1
   1660c:	bl	10fc8 <fputs_unlocked@plt>
   16610:	movw	r1, #39867	; 0x9bbb
   16614:	mov	r0, #0
   16618:	mov	r2, #5
   1661c:	movt	r1, #1
   16620:	bl	11058 <dcgettext@plt>
   16624:	movw	r2, #39887	; 0x9bcf
   16628:	mov	r1, r0
   1662c:	mov	r0, #1
   16630:	movt	r2, #1
   16634:	bl	11184 <__printf_chk@plt>
   16638:	movw	r1, #39909	; 0x9be5
   1663c:	mov	r0, #0
   16640:	mov	r2, #5
   16644:	movt	r1, #1
   16648:	bl	11058 <dcgettext@plt>
   1664c:	movw	r2, #38115	; 0x94e3
   16650:	movw	r3, #38366	; 0x95de
   16654:	mov	r1, r0
   16658:	mov	r0, #1
   1665c:	movt	r2, #1
   16660:	movt	r3, #1
   16664:	bl	11184 <__printf_chk@plt>
   16668:	movw	r1, #39929	; 0x9bf9
   1666c:	mov	r0, #0
   16670:	mov	r2, #5
   16674:	movt	r1, #1
   16678:	bl	11058 <dcgettext@plt>
   1667c:	movw	r2, #39968	; 0x9c20
   16680:	mov	r1, r0
   16684:	mov	r0, #1
   16688:	movt	r2, #1
   1668c:	pop	{fp, lr}
   16690:	b	11184 <__printf_chk@plt>
   16694:	push	{r4, r5, r6, sl, fp, lr}
   16698:	add	fp, sp, #16
   1669c:	mov	r4, r2
   166a0:	mov	r5, r1
   166a4:	mov	r6, r0
   166a8:	bl	18914 <__assert_fail@plt+0x76b8>
   166ac:	cmp	r0, #0
   166b0:	popne	{r4, r5, r6, sl, fp, pc}
   166b4:	cmp	r6, #0
   166b8:	beq	166cc <__assert_fail@plt+0x5470>
   166bc:	cmp	r5, #0
   166c0:	cmpne	r4, #0
   166c4:	bne	166cc <__assert_fail@plt+0x5470>
   166c8:	pop	{r4, r5, r6, sl, fp, pc}
   166cc:	bl	16c6c <__assert_fail@plt+0x5a10>
   166d0:	push	{r4, r5, r6, sl, fp, lr}
   166d4:	add	fp, sp, #16
   166d8:	mov	r4, r2
   166dc:	mov	r5, r1
   166e0:	mov	r6, r0
   166e4:	bl	18914 <__assert_fail@plt+0x76b8>
   166e8:	cmp	r0, #0
   166ec:	popne	{r4, r5, r6, sl, fp, pc}
   166f0:	cmp	r6, #0
   166f4:	beq	16708 <__assert_fail@plt+0x54ac>
   166f8:	cmp	r5, #0
   166fc:	cmpne	r4, #0
   16700:	bne	16708 <__assert_fail@plt+0x54ac>
   16704:	pop	{r4, r5, r6, sl, fp, pc}
   16708:	bl	16c6c <__assert_fail@plt+0x5a10>
   1670c:	push	{fp, lr}
   16710:	mov	fp, sp
   16714:	bl	183a8 <__assert_fail@plt+0x714c>
   16718:	cmp	r0, #0
   1671c:	popne	{fp, pc}
   16720:	bl	16c6c <__assert_fail@plt+0x5a10>
   16724:	push	{fp, lr}
   16728:	mov	fp, sp
   1672c:	bl	183a8 <__assert_fail@plt+0x714c>
   16730:	cmp	r0, #0
   16734:	popne	{fp, pc}
   16738:	bl	16c6c <__assert_fail@plt+0x5a10>
   1673c:	push	{fp, lr}
   16740:	mov	fp, sp
   16744:	bl	183a8 <__assert_fail@plt+0x714c>
   16748:	cmp	r0, #0
   1674c:	popne	{fp, pc}
   16750:	bl	16c6c <__assert_fail@plt+0x5a10>
   16754:	push	{r4, r5, fp, lr}
   16758:	add	fp, sp, #8
   1675c:	mov	r4, r1
   16760:	mov	r5, r0
   16764:	bl	183d8 <__assert_fail@plt+0x717c>
   16768:	cmp	r0, #0
   1676c:	popne	{r4, r5, fp, pc}
   16770:	cmp	r5, #0
   16774:	beq	16784 <__assert_fail@plt+0x5528>
   16778:	cmp	r4, #0
   1677c:	bne	16784 <__assert_fail@plt+0x5528>
   16780:	pop	{r4, r5, fp, pc}
   16784:	bl	16c6c <__assert_fail@plt+0x5a10>
   16788:	push	{fp, lr}
   1678c:	mov	fp, sp
   16790:	cmp	r1, #0
   16794:	orreq	r1, r1, #1
   16798:	bl	183d8 <__assert_fail@plt+0x717c>
   1679c:	cmp	r0, #0
   167a0:	popne	{fp, pc}
   167a4:	bl	16c6c <__assert_fail@plt+0x5a10>
   167a8:	push	{fp, lr}
   167ac:	mov	fp, sp
   167b0:	clz	r3, r2
   167b4:	lsr	ip, r3, #5
   167b8:	clz	r3, r1
   167bc:	lsr	r3, r3, #5
   167c0:	orrs	r3, r3, ip
   167c4:	movwne	r1, #1
   167c8:	movwne	r2, #1
   167cc:	bl	18914 <__assert_fail@plt+0x76b8>
   167d0:	cmp	r0, #0
   167d4:	popne	{fp, pc}
   167d8:	bl	16c6c <__assert_fail@plt+0x5a10>
   167dc:	push	{fp, lr}
   167e0:	mov	fp, sp
   167e4:	mov	r2, r1
   167e8:	mov	r1, r0
   167ec:	mov	r0, #0
   167f0:	bl	18914 <__assert_fail@plt+0x76b8>
   167f4:	cmp	r0, #0
   167f8:	popne	{fp, pc}
   167fc:	bl	16c6c <__assert_fail@plt+0x5a10>
   16800:	push	{fp, lr}
   16804:	mov	fp, sp
   16808:	mov	r2, r1
   1680c:	mov	r1, r0
   16810:	clz	r0, r2
   16814:	clz	r3, r1
   16818:	lsr	r0, r0, #5
   1681c:	lsr	r3, r3, #5
   16820:	orrs	r0, r3, r0
   16824:	movwne	r1, #1
   16828:	movwne	r2, #1
   1682c:	mov	r0, #0
   16830:	bl	18914 <__assert_fail@plt+0x76b8>
   16834:	cmp	r0, #0
   16838:	popne	{fp, pc}
   1683c:	bl	16c6c <__assert_fail@plt+0x5a10>
   16840:	push	{r4, r5, r6, sl, fp, lr}
   16844:	add	fp, sp, #16
   16848:	ldr	r5, [r1]
   1684c:	mov	r4, r1
   16850:	mov	r6, r0
   16854:	cmp	r0, #0
   16858:	beq	16870 <__assert_fail@plt+0x5614>
   1685c:	mov	r0, #1
   16860:	add	r0, r0, r5, lsr #1
   16864:	adds	r5, r5, r0
   16868:	bcc	16878 <__assert_fail@plt+0x561c>
   1686c:	b	168b4 <__assert_fail@plt+0x5658>
   16870:	cmp	r5, #0
   16874:	movweq	r5, #64	; 0x40
   16878:	mov	r0, r6
   1687c:	mov	r1, r5
   16880:	mov	r2, #1
   16884:	bl	18914 <__assert_fail@plt+0x76b8>
   16888:	cmp	r5, #0
   1688c:	mov	r1, r5
   16890:	movwne	r1, #1
   16894:	cmp	r0, #0
   16898:	bne	168ac <__assert_fail@plt+0x5650>
   1689c:	clz	r2, r6
   168a0:	lsr	r2, r2, #5
   168a4:	orrs	r1, r2, r1
   168a8:	bne	168b4 <__assert_fail@plt+0x5658>
   168ac:	str	r5, [r4]
   168b0:	pop	{r4, r5, r6, sl, fp, pc}
   168b4:	bl	16c6c <__assert_fail@plt+0x5a10>
   168b8:	push	{r4, r5, r6, r7, fp, lr}
   168bc:	add	fp, sp, #16
   168c0:	ldr	r5, [r1]
   168c4:	mov	r6, r2
   168c8:	mov	r4, r1
   168cc:	mov	r7, r0
   168d0:	cmp	r0, #0
   168d4:	beq	168ec <__assert_fail@plt+0x5690>
   168d8:	mov	r0, #1
   168dc:	add	r0, r0, r5, lsr #1
   168e0:	adds	r5, r5, r0
   168e4:	bcc	16904 <__assert_fail@plt+0x56a8>
   168e8:	b	16938 <__assert_fail@plt+0x56dc>
   168ec:	cmp	r5, #0
   168f0:	bne	16904 <__assert_fail@plt+0x56a8>
   168f4:	mov	r0, #64	; 0x40
   168f8:	cmp	r6, #64	; 0x40
   168fc:	udiv	r5, r0, r6
   16900:	addhi	r5, r5, #1
   16904:	mov	r0, r7
   16908:	mov	r1, r5
   1690c:	mov	r2, r6
   16910:	bl	18914 <__assert_fail@plt+0x76b8>
   16914:	cmp	r0, #0
   16918:	bne	16930 <__assert_fail@plt+0x56d4>
   1691c:	cmp	r7, #0
   16920:	beq	16938 <__assert_fail@plt+0x56dc>
   16924:	cmp	r6, #0
   16928:	cmpne	r5, #0
   1692c:	bne	16938 <__assert_fail@plt+0x56dc>
   16930:	str	r5, [r4]
   16934:	pop	{r4, r5, r6, r7, fp, pc}
   16938:	bl	16c6c <__assert_fail@plt+0x5a10>
   1693c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16940:	add	fp, sp, #24
   16944:	mov	r8, r1
   16948:	ldr	r1, [r1]
   1694c:	mov	r5, r0
   16950:	add	r0, r1, r1, asr #1
   16954:	cmp	r0, r1
   16958:	mvnvs	r0, #-2147483648	; 0x80000000
   1695c:	cmp	r0, r3
   16960:	mov	r7, r0
   16964:	movgt	r7, r3
   16968:	cmn	r3, #1
   1696c:	movle	r7, r0
   16970:	ldr	r0, [fp, #8]
   16974:	cmn	r0, #1
   16978:	ble	169a0 <__assert_fail@plt+0x5744>
   1697c:	cmp	r0, #0
   16980:	beq	169f4 <__assert_fail@plt+0x5798>
   16984:	cmn	r7, #1
   16988:	ble	169c8 <__assert_fail@plt+0x576c>
   1698c:	mvn	r4, #-2147483648	; 0x80000000
   16990:	udiv	r6, r4, r0
   16994:	cmp	r6, r7
   16998:	bge	169f4 <__assert_fail@plt+0x5798>
   1699c:	b	16a04 <__assert_fail@plt+0x57a8>
   169a0:	cmn	r7, #1
   169a4:	ble	169e4 <__assert_fail@plt+0x5788>
   169a8:	cmn	r0, #1
   169ac:	beq	169f4 <__assert_fail@plt+0x5798>
   169b0:	mov	r6, #-2147483648	; 0x80000000
   169b4:	mvn	r4, #-2147483648	; 0x80000000
   169b8:	sdiv	r6, r6, r0
   169bc:	cmp	r6, r7
   169c0:	bge	169f4 <__assert_fail@plt+0x5798>
   169c4:	b	16a04 <__assert_fail@plt+0x57a8>
   169c8:	beq	169f4 <__assert_fail@plt+0x5798>
   169cc:	mov	r6, #-2147483648	; 0x80000000
   169d0:	mvn	r4, #-2147483648	; 0x80000000
   169d4:	sdiv	r6, r6, r7
   169d8:	cmp	r6, r0
   169dc:	bge	169f4 <__assert_fail@plt+0x5798>
   169e0:	b	16a04 <__assert_fail@plt+0x57a8>
   169e4:	mvn	r4, #-2147483648	; 0x80000000
   169e8:	sdiv	r6, r4, r0
   169ec:	cmp	r7, r6
   169f0:	blt	16a04 <__assert_fail@plt+0x57a8>
   169f4:	mul	r6, r7, r0
   169f8:	mov	r4, #64	; 0x40
   169fc:	cmp	r6, #63	; 0x3f
   16a00:	bgt	16a0c <__assert_fail@plt+0x57b0>
   16a04:	sdiv	r7, r4, r0
   16a08:	mul	r6, r7, r0
   16a0c:	cmp	r5, #0
   16a10:	moveq	r4, #0
   16a14:	streq	r4, [r8]
   16a18:	sub	r4, r7, r1
   16a1c:	cmp	r4, r2
   16a20:	bge	16acc <__assert_fail@plt+0x5870>
   16a24:	add	r7, r1, r2
   16a28:	mov	r6, #0
   16a2c:	mov	r2, #0
   16a30:	cmp	r7, r3
   16a34:	movwgt	r6, #1
   16a38:	cmn	r3, #1
   16a3c:	movwgt	r2, #1
   16a40:	cmp	r7, r1
   16a44:	bvs	16b00 <__assert_fail@plt+0x58a4>
   16a48:	ands	r1, r2, r6
   16a4c:	bne	16b00 <__assert_fail@plt+0x58a4>
   16a50:	cmn	r0, #1
   16a54:	ble	16a7c <__assert_fail@plt+0x5820>
   16a58:	cmp	r0, #0
   16a5c:	beq	16ac8 <__assert_fail@plt+0x586c>
   16a60:	cmn	r7, #1
   16a64:	ble	16aa0 <__assert_fail@plt+0x5844>
   16a68:	mvn	r1, #-2147483648	; 0x80000000
   16a6c:	udiv	r1, r1, r0
   16a70:	cmp	r1, r7
   16a74:	bge	16ac8 <__assert_fail@plt+0x586c>
   16a78:	b	16b00 <__assert_fail@plt+0x58a4>
   16a7c:	cmn	r7, #1
   16a80:	ble	16ab8 <__assert_fail@plt+0x585c>
   16a84:	cmn	r0, #1
   16a88:	beq	16ac8 <__assert_fail@plt+0x586c>
   16a8c:	mov	r1, #-2147483648	; 0x80000000
   16a90:	sdiv	r1, r1, r0
   16a94:	cmp	r1, r7
   16a98:	bge	16ac8 <__assert_fail@plt+0x586c>
   16a9c:	b	16b00 <__assert_fail@plt+0x58a4>
   16aa0:	beq	16ac8 <__assert_fail@plt+0x586c>
   16aa4:	mov	r1, #-2147483648	; 0x80000000
   16aa8:	sdiv	r1, r1, r7
   16aac:	cmp	r1, r0
   16ab0:	bge	16ac8 <__assert_fail@plt+0x586c>
   16ab4:	b	16b00 <__assert_fail@plt+0x58a4>
   16ab8:	mvn	r1, #-2147483648	; 0x80000000
   16abc:	sdiv	r1, r1, r0
   16ac0:	cmp	r7, r1
   16ac4:	blt	16b00 <__assert_fail@plt+0x58a4>
   16ac8:	mul	r6, r7, r0
   16acc:	mov	r0, r5
   16ad0:	mov	r1, r6
   16ad4:	bl	183d8 <__assert_fail@plt+0x717c>
   16ad8:	cmp	r6, #0
   16adc:	movwne	r6, #1
   16ae0:	cmp	r0, #0
   16ae4:	bne	16af8 <__assert_fail@plt+0x589c>
   16ae8:	clz	r1, r5
   16aec:	lsr	r1, r1, #5
   16af0:	orrs	r1, r1, r6
   16af4:	bne	16b00 <__assert_fail@plt+0x58a4>
   16af8:	str	r7, [r8]
   16afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16b00:	bl	16c6c <__assert_fail@plt+0x5a10>
   16b04:	push	{fp, lr}
   16b08:	mov	fp, sp
   16b0c:	mov	r1, #1
   16b10:	bl	18354 <__assert_fail@plt+0x70f8>
   16b14:	cmp	r0, #0
   16b18:	popne	{fp, pc}
   16b1c:	bl	16c6c <__assert_fail@plt+0x5a10>
   16b20:	push	{fp, lr}
   16b24:	mov	fp, sp
   16b28:	bl	18354 <__assert_fail@plt+0x70f8>
   16b2c:	cmp	r0, #0
   16b30:	popne	{fp, pc}
   16b34:	bl	16c6c <__assert_fail@plt+0x5a10>
   16b38:	push	{fp, lr}
   16b3c:	mov	fp, sp
   16b40:	mov	r1, #1
   16b44:	bl	18354 <__assert_fail@plt+0x70f8>
   16b48:	cmp	r0, #0
   16b4c:	popne	{fp, pc}
   16b50:	bl	16c6c <__assert_fail@plt+0x5a10>
   16b54:	push	{fp, lr}
   16b58:	mov	fp, sp
   16b5c:	bl	18354 <__assert_fail@plt+0x70f8>
   16b60:	cmp	r0, #0
   16b64:	popne	{fp, pc}
   16b68:	bl	16c6c <__assert_fail@plt+0x5a10>
   16b6c:	push	{r4, r5, r6, sl, fp, lr}
   16b70:	add	fp, sp, #16
   16b74:	mov	r5, r0
   16b78:	mov	r0, r1
   16b7c:	mov	r4, r1
   16b80:	bl	183a8 <__assert_fail@plt+0x714c>
   16b84:	cmp	r0, #0
   16b88:	beq	16ba4 <__assert_fail@plt+0x5948>
   16b8c:	mov	r1, r5
   16b90:	mov	r2, r4
   16b94:	mov	r6, r0
   16b98:	bl	1101c <memcpy@plt>
   16b9c:	mov	r0, r6
   16ba0:	pop	{r4, r5, r6, sl, fp, pc}
   16ba4:	bl	16c6c <__assert_fail@plt+0x5a10>
   16ba8:	push	{r4, r5, r6, sl, fp, lr}
   16bac:	add	fp, sp, #16
   16bb0:	mov	r5, r0
   16bb4:	mov	r0, r1
   16bb8:	mov	r4, r1
   16bbc:	bl	183a8 <__assert_fail@plt+0x714c>
   16bc0:	cmp	r0, #0
   16bc4:	beq	16be0 <__assert_fail@plt+0x5984>
   16bc8:	mov	r1, r5
   16bcc:	mov	r2, r4
   16bd0:	mov	r6, r0
   16bd4:	bl	1101c <memcpy@plt>
   16bd8:	mov	r0, r6
   16bdc:	pop	{r4, r5, r6, sl, fp, pc}
   16be0:	bl	16c6c <__assert_fail@plt+0x5a10>
   16be4:	push	{r4, r5, r6, sl, fp, lr}
   16be8:	add	fp, sp, #16
   16bec:	mov	r5, r0
   16bf0:	add	r0, r1, #1
   16bf4:	mov	r4, r1
   16bf8:	bl	183a8 <__assert_fail@plt+0x714c>
   16bfc:	cmp	r0, #0
   16c00:	beq	16c28 <__assert_fail@plt+0x59cc>
   16c04:	mov	r6, r0
   16c08:	mov	r0, #0
   16c0c:	mov	r1, r5
   16c10:	mov	r2, r4
   16c14:	strb	r0, [r6, r4]
   16c18:	mov	r0, r6
   16c1c:	bl	1101c <memcpy@plt>
   16c20:	mov	r0, r6
   16c24:	pop	{r4, r5, r6, sl, fp, pc}
   16c28:	bl	16c6c <__assert_fail@plt+0x5a10>
   16c2c:	push	{r4, r5, r6, sl, fp, lr}
   16c30:	add	fp, sp, #16
   16c34:	mov	r4, r0
   16c38:	bl	11148 <strlen@plt>
   16c3c:	add	r5, r0, #1
   16c40:	mov	r0, r5
   16c44:	bl	183a8 <__assert_fail@plt+0x714c>
   16c48:	cmp	r0, #0
   16c4c:	beq	16c68 <__assert_fail@plt+0x5a0c>
   16c50:	mov	r1, r4
   16c54:	mov	r2, r5
   16c58:	mov	r6, r0
   16c5c:	bl	1101c <memcpy@plt>
   16c60:	mov	r0, r6
   16c64:	pop	{r4, r5, r6, sl, fp, pc}
   16c68:	bl	16c6c <__assert_fail@plt+0x5a10>
   16c6c:	push	{fp, lr}
   16c70:	mov	fp, sp
   16c74:	movw	r0, #41236	; 0xa114
   16c78:	movw	r1, #40044	; 0x9c6c
   16c7c:	mov	r2, #5
   16c80:	movt	r0, #2
   16c84:	movt	r1, #1
   16c88:	ldr	r4, [r0]
   16c8c:	mov	r0, #0
   16c90:	bl	11058 <dcgettext@plt>
   16c94:	movw	r2, #38722	; 0x9742
   16c98:	mov	r3, r0
   16c9c:	mov	r0, r4
   16ca0:	mov	r1, #0
   16ca4:	movt	r2, #1
   16ca8:	bl	110c4 <error@plt>
   16cac:	bl	11244 <abort@plt>
   16cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cb4:	add	fp, sp, #28
   16cb8:	sub	sp, sp, #4
   16cbc:	mov	r9, r3
   16cc0:	mov	r6, r2
   16cc4:	mov	r7, r1
   16cc8:	mov	r4, r0
   16ccc:	bl	18728 <__assert_fail@plt+0x74cc>
   16cd0:	mov	r8, r0
   16cd4:	bl	11160 <__errno_location@plt>
   16cd8:	ldr	r5, [r0]
   16cdc:	cmp	r5, #0
   16ce0:	beq	16d94 <__assert_fail@plt+0x5b38>
   16ce4:	movw	r1, #40061	; 0x9c7d
   16ce8:	mov	r0, #0
   16cec:	mov	r2, #5
   16cf0:	movt	r1, #1
   16cf4:	bl	11058 <dcgettext@plt>
   16cf8:	mov	r2, r0
   16cfc:	mov	r0, #0
   16d00:	mov	r1, r5
   16d04:	bl	110c4 <error@plt>
   16d08:	movw	r1, #40086	; 0x9c96
   16d0c:	mov	r0, #0
   16d10:	mov	r2, #5
   16d14:	movt	r1, #1
   16d18:	bl	11058 <dcgettext@plt>
   16d1c:	mov	r2, r0
   16d20:	mov	r0, #0
   16d24:	mov	r1, #0
   16d28:	bl	110c4 <error@plt>
   16d2c:	movw	r0, #41236	; 0xa114
   16d30:	movw	r1, #40129	; 0x9cc1
   16d34:	mov	r2, #5
   16d38:	movt	r0, #2
   16d3c:	movt	r1, #1
   16d40:	ldr	sl, [r0]
   16d44:	mov	r0, #0
   16d48:	bl	11058 <dcgettext@plt>
   16d4c:	mov	r5, r0
   16d50:	mov	r0, #0
   16d54:	mov	r1, #8
   16d58:	mov	r2, r4
   16d5c:	mov	r3, r7
   16d60:	bl	158f0 <__assert_fail@plt+0x4694>
   16d64:	mov	r4, r0
   16d68:	mov	r0, #1
   16d6c:	mov	r1, #8
   16d70:	mov	r2, r6
   16d74:	mov	r3, r9
   16d78:	bl	158f0 <__assert_fail@plt+0x4694>
   16d7c:	str	r0, [sp]
   16d80:	mov	r0, sl
   16d84:	mov	r1, #0
   16d88:	mov	r2, r5
   16d8c:	mov	r3, r4
   16d90:	bl	110c4 <error@plt>
   16d94:	mov	r0, r8
   16d98:	sub	sp, fp, #28
   16d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da4:	add	fp, sp, #28
   16da8:	sub	sp, sp, #4
   16dac:	mov	r6, r3
   16db0:	mov	r9, r2
   16db4:	mov	r4, r1
   16db8:	mov	r7, r0
   16dbc:	bl	18844 <__assert_fail@plt+0x75e8>
   16dc0:	mov	r8, r0
   16dc4:	bl	11160 <__errno_location@plt>
   16dc8:	ldr	r5, [r0]
   16dcc:	cmp	r5, #0
   16dd0:	beq	16e84 <__assert_fail@plt+0x5c28>
   16dd4:	movw	r1, #40061	; 0x9c7d
   16dd8:	mov	r0, #0
   16ddc:	mov	r2, #5
   16de0:	movt	r1, #1
   16de4:	bl	11058 <dcgettext@plt>
   16de8:	mov	r2, r0
   16dec:	mov	r0, #0
   16df0:	mov	r1, r5
   16df4:	bl	110c4 <error@plt>
   16df8:	movw	r1, #40086	; 0x9c96
   16dfc:	mov	r0, #0
   16e00:	mov	r2, #5
   16e04:	movt	r1, #1
   16e08:	bl	11058 <dcgettext@plt>
   16e0c:	mov	r2, r0
   16e10:	mov	r0, #0
   16e14:	mov	r1, #0
   16e18:	bl	110c4 <error@plt>
   16e1c:	movw	r0, #41236	; 0xa114
   16e20:	movw	r1, #40129	; 0x9cc1
   16e24:	mov	r2, #5
   16e28:	movt	r0, #2
   16e2c:	movt	r1, #1
   16e30:	ldr	sl, [r0]
   16e34:	mov	r0, #0
   16e38:	bl	11058 <dcgettext@plt>
   16e3c:	mov	r5, r0
   16e40:	sub	r3, r4, #1
   16e44:	mov	r0, #0
   16e48:	mov	r1, #8
   16e4c:	mov	r2, r7
   16e50:	bl	158f0 <__assert_fail@plt+0x4694>
   16e54:	mov	r4, r0
   16e58:	sub	r3, r6, #1
   16e5c:	mov	r0, #1
   16e60:	mov	r1, #8
   16e64:	mov	r2, r9
   16e68:	bl	158f0 <__assert_fail@plt+0x4694>
   16e6c:	str	r0, [sp]
   16e70:	mov	r0, sl
   16e74:	mov	r1, #0
   16e78:	mov	r2, r5
   16e7c:	mov	r3, r4
   16e80:	bl	110c4 <error@plt>
   16e84:	mov	r0, r8
   16e88:	sub	sp, fp, #28
   16e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	add	fp, sp, #28
   16e98:	sub	sp, sp, #20
   16e9c:	cmp	r2, #37	; 0x25
   16ea0:	bcs	17694 <__assert_fail@plt+0x6438>
   16ea4:	ldr	r9, [fp, #8]
   16ea8:	mov	r5, r2
   16eac:	mov	r4, r1
   16eb0:	mov	r7, r0
   16eb4:	str	r3, [sp, #12]
   16eb8:	bl	11160 <__errno_location@plt>
   16ebc:	mov	r8, r0
   16ec0:	mov	r0, #0
   16ec4:	str	r0, [r8]
   16ec8:	bl	11124 <__ctype_b_loc@plt>
   16ecc:	ldr	r1, [r0]
   16ed0:	mov	r2, r7
   16ed4:	ldrb	r0, [r2], #1
   16ed8:	add	r3, r1, r0, lsl #1
   16edc:	ldrb	r3, [r3, #1]
   16ee0:	tst	r3, #32
   16ee4:	bne	16ed4 <__assert_fail@plt+0x5c78>
   16ee8:	add	r6, sp, #16
   16eec:	cmp	r4, #0
   16ef0:	mov	sl, #4
   16ef4:	movne	r6, r4
   16ef8:	cmp	r0, #45	; 0x2d
   16efc:	beq	17688 <__assert_fail@plt+0x642c>
   16f00:	mov	r0, r7
   16f04:	mov	r1, r6
   16f08:	mov	r2, r5
   16f0c:	bl	1113c <strtoul@plt>
   16f10:	ldr	r5, [r6]
   16f14:	cmp	r5, r7
   16f18:	beq	16f44 <__assert_fail@plt+0x5ce8>
   16f1c:	mov	r4, r0
   16f20:	ldr	r0, [r8]
   16f24:	cmp	r0, #0
   16f28:	beq	16f70 <__assert_fail@plt+0x5d14>
   16f2c:	cmp	r0, #34	; 0x22
   16f30:	bne	17688 <__assert_fail@plt+0x642c>
   16f34:	mov	sl, #1
   16f38:	cmp	r9, #0
   16f3c:	bne	16f7c <__assert_fail@plt+0x5d20>
   16f40:	b	17680 <__assert_fail@plt+0x6424>
   16f44:	cmp	r9, #0
   16f48:	ldrbne	r1, [r7]
   16f4c:	cmpne	r1, #0
   16f50:	beq	17688 <__assert_fail@plt+0x642c>
   16f54:	mov	r0, r9
   16f58:	bl	11154 <strchr@plt>
   16f5c:	cmp	r0, #0
   16f60:	beq	17688 <__assert_fail@plt+0x642c>
   16f64:	mov	r4, #1
   16f68:	mov	sl, #0
   16f6c:	b	16f7c <__assert_fail@plt+0x5d20>
   16f70:	mov	sl, r0
   16f74:	cmp	r9, #0
   16f78:	beq	17680 <__assert_fail@plt+0x6424>
   16f7c:	ldrb	r7, [r5]
   16f80:	cmp	r7, #0
   16f84:	beq	17680 <__assert_fail@plt+0x6424>
   16f88:	mov	r0, r9
   16f8c:	mov	r1, r7
   16f90:	bl	11154 <strchr@plt>
   16f94:	cmp	r0, #0
   16f98:	beq	17214 <__assert_fail@plt+0x5fb8>
   16f9c:	sub	r0, r7, #69	; 0x45
   16fa0:	mov	lr, #1
   16fa4:	mov	r8, #1024	; 0x400
   16fa8:	cmp	r0, #47	; 0x2f
   16fac:	bhi	170c8 <__assert_fail@plt+0x5e6c>
   16fb0:	add	r1, pc, #0
   16fb4:	ldr	pc, [r1, r0, lsl #2]
   16fb8:	andeq	r7, r1, r8, ror r0
   16fbc:	andeq	r7, r1, r8, asr #1
   16fc0:	andeq	r7, r1, r8, ror r0
   16fc4:	andeq	r7, r1, r8, asr #1
   16fc8:	andeq	r7, r1, r8, asr #1
   16fcc:	andeq	r7, r1, r8, asr #1
   16fd0:	andeq	r7, r1, r8, ror r0
   16fd4:	andeq	r7, r1, r8, asr #1
   16fd8:	andeq	r7, r1, r8, ror r0
   16fdc:	andeq	r7, r1, r8, asr #1
   16fe0:	andeq	r7, r1, r8, asr #1
   16fe4:	andeq	r7, r1, r8, ror r0
   16fe8:	andeq	r7, r1, r8, asr #1
   16fec:	andeq	r7, r1, r8, asr #1
   16ff0:	andeq	r7, r1, r8, asr #1
   16ff4:	andeq	r7, r1, r8, ror r0
   16ff8:	andeq	r7, r1, r8, asr #1
   16ffc:	andeq	r7, r1, r8, asr #1
   17000:	andeq	r7, r1, r8, asr #1
   17004:	andeq	r7, r1, r8, asr #1
   17008:	andeq	r7, r1, r8, ror r0
   1700c:	andeq	r7, r1, r8, ror r0
   17010:	andeq	r7, r1, r8, asr #1
   17014:	andeq	r7, r1, r8, asr #1
   17018:	andeq	r7, r1, r8, asr #1
   1701c:	andeq	r7, r1, r8, asr #1
   17020:	andeq	r7, r1, r8, asr #1
   17024:	andeq	r7, r1, r8, asr #1
   17028:	andeq	r7, r1, r8, asr #1
   1702c:	andeq	r7, r1, r8, asr #1
   17030:	andeq	r7, r1, r8, asr #1
   17034:	andeq	r7, r1, r8, asr #1
   17038:	andeq	r7, r1, r8, asr #1
   1703c:	andeq	r7, r1, r8, asr #1
   17040:	andeq	r7, r1, r8, ror r0
   17044:	andeq	r7, r1, r8, asr #1
   17048:	andeq	r7, r1, r8, asr #1
   1704c:	andeq	r7, r1, r8, asr #1
   17050:	andeq	r7, r1, r8, ror r0
   17054:	andeq	r7, r1, r8, asr #1
   17058:	andeq	r7, r1, r8, ror r0
   1705c:	andeq	r7, r1, r8, asr #1
   17060:	andeq	r7, r1, r8, asr #1
   17064:	andeq	r7, r1, r8, asr #1
   17068:	andeq	r7, r1, r8, asr #1
   1706c:	andeq	r7, r1, r8, asr #1
   17070:	andeq	r7, r1, r8, asr #1
   17074:	andeq	r7, r1, r8, ror r0
   17078:	mov	r0, r9
   1707c:	mov	r1, #48	; 0x30
   17080:	bl	11154 <strchr@plt>
   17084:	cmp	r0, #0
   17088:	beq	170c4 <__assert_fail@plt+0x5e68>
   1708c:	ldrb	r0, [r5, #1]
   17090:	cmp	r0, #66	; 0x42
   17094:	cmpne	r0, #68	; 0x44
   17098:	bne	170a8 <__assert_fail@plt+0x5e4c>
   1709c:	mov	lr, #2
   170a0:	mov	r8, #1000	; 0x3e8
   170a4:	b	170c8 <__assert_fail@plt+0x5e6c>
   170a8:	cmp	r0, #105	; 0x69
   170ac:	bne	170c4 <__assert_fail@plt+0x5e68>
   170b0:	ldrb	r0, [r5, #2]
   170b4:	mov	lr, #1
   170b8:	cmp	r0, #66	; 0x42
   170bc:	movweq	lr, #3
   170c0:	b	170c8 <__assert_fail@plt+0x5e6c>
   170c4:	mov	lr, #1
   170c8:	sub	r1, r7, #66	; 0x42
   170cc:	cmp	r1, #53	; 0x35
   170d0:	bhi	17214 <__assert_fail@plt+0x5fb8>
   170d4:	add	r2, pc, #4
   170d8:	mov	r0, #0
   170dc:	ldr	pc, [r2, r1, lsl #2]
   170e0:	andeq	r7, r1, r8, asr #7
   170e4:	andeq	r7, r1, r4, lsl r2
   170e8:	andeq	r7, r1, r4, lsl r2
   170ec:	andeq	r7, r1, r4, ror #7
   170f0:	andeq	r7, r1, r4, lsl r2
   170f4:			; <UNDEFINED> instruction: 0x000171b8
   170f8:	andeq	r7, r1, r4, lsl r2
   170fc:	andeq	r7, r1, r4, lsl r2
   17100:	andeq	r7, r1, r4, lsl r2
   17104:	andeq	r7, r1, r0, lsr #4
   17108:	andeq	r7, r1, r4, lsl r2
   1710c:	andeq	r7, r1, r0, asr #4
   17110:	andeq	r7, r1, r4, lsl r2
   17114:	andeq	r7, r1, r4, lsl r2
   17118:	muleq	r1, ip, r4
   1711c:	andeq	r7, r1, r4, lsl r2
   17120:	andeq	r7, r1, r4, lsl r2
   17124:	andeq	r7, r1, r4, lsl r2
   17128:	andeq	r7, r1, r0, lsl #5
   1712c:	andeq	r7, r1, r4, lsl r2
   17130:	andeq	r7, r1, r4, lsl r2
   17134:	andeq	r7, r1, r4, lsl r2
   17138:	andeq	r7, r1, r4, lsl r2
   1713c:	andeq	r7, r1, r8, lsr r5
   17140:	strdeq	r7, [r1], -r4
   17144:	andeq	r7, r1, r4, lsl r2
   17148:	andeq	r7, r1, r4, lsl r2
   1714c:	andeq	r7, r1, r4, lsl r2
   17150:	andeq	r7, r1, r4, lsl r2
   17154:	andeq	r7, r1, r4, lsl r2
   17158:	andeq	r7, r1, r4, lsl r2
   1715c:	andeq	r7, r1, r4, lsl r2
   17160:	andeq	r7, r1, r0, lsr r6
   17164:	andeq	r7, r1, r8, ror #12
   17168:	andeq	r7, r1, r4, lsl r2
   1716c:	andeq	r7, r1, r4, lsl r2
   17170:	andeq	r7, r1, r4, lsl r2
   17174:			; <UNDEFINED> instruction: 0x000171b8
   17178:	andeq	r7, r1, r4, lsl r2
   1717c:	andeq	r7, r1, r4, lsl r2
   17180:	andeq	r7, r1, r4, lsl r2
   17184:	andeq	r7, r1, r0, lsr #4
   17188:	andeq	r7, r1, r4, lsl r2
   1718c:	andeq	r7, r1, r0, asr #4
   17190:	andeq	r7, r1, r4, lsl r2
   17194:	andeq	r7, r1, r4, lsl r2
   17198:	andeq	r7, r1, r4, lsl r2
   1719c:	andeq	r7, r1, r4, lsl r2
   171a0:	andeq	r7, r1, r4, lsl r2
   171a4:	andeq	r7, r1, r4, lsl r2
   171a8:	andeq	r7, r1, r0, lsl #5
   171ac:	andeq	r7, r1, r4, lsl r2
   171b0:	andeq	r7, r1, r4, lsl r2
   171b4:	andeq	r7, r1, r4, asr r6
   171b8:	mvn	r0, #0
   171bc:	mul	r1, r4, r8
   171c0:	mov	r7, #0
   171c4:	udiv	r0, r0, r8
   171c8:	cmp	r0, r4
   171cc:	mvncc	r1, #0
   171d0:	mul	r2, r1, r8
   171d4:	cmp	r0, r1
   171d8:	mvncc	r2, #0
   171dc:	cmp	r0, r2
   171e0:	mul	r3, r2, r8
   171e4:	mov	r2, #0
   171e8:	mvncc	r3, #0
   171ec:	movwcc	r7, #1
   171f0:	cmp	r0, r1
   171f4:	mov	r1, #0
   171f8:	movwcc	r1, #1
   171fc:	cmp	r0, r4
   17200:	mov	r4, r3
   17204:	movwcc	r2, #1
   17208:	orr	r0, r2, r1
   1720c:	orr	r0, r0, r7
   17210:	b	17668 <__assert_fail@plt+0x640c>
   17214:	ldr	r0, [sp, #12]
   17218:	orr	sl, sl, #2
   1721c:	b	17684 <__assert_fail@plt+0x6428>
   17220:	mvn	r0, #0
   17224:	mul	r1, r4, r8
   17228:	udiv	r0, r0, r8
   1722c:	cmp	r0, r4
   17230:	mov	r0, #0
   17234:	mvncc	r1, #0
   17238:	movwcc	r0, #1
   1723c:	b	17664 <__assert_fail@plt+0x6408>
   17240:	mvn	r0, #0
   17244:	mul	r1, r4, r8
   17248:	mov	r3, #0
   1724c:	udiv	r0, r0, r8
   17250:	cmp	r0, r4
   17254:	mvncc	r1, #0
   17258:	cmp	r0, r1
   1725c:	mul	r2, r1, r8
   17260:	mov	r1, #0
   17264:	mvncc	r2, #0
   17268:	movwcc	r3, #1
   1726c:	cmp	r0, r4
   17270:	movwcc	r1, #1
   17274:	mov	r4, r2
   17278:	orr	r0, r1, r3
   1727c:	b	17668 <__assert_fail@plt+0x640c>
   17280:	mvn	r0, #0
   17284:	mul	r1, r4, r8
   17288:	mov	r7, #0
   1728c:	udiv	r0, r0, r8
   17290:	cmp	r0, r4
   17294:	mvncc	r1, #0
   17298:	mul	r2, r1, r8
   1729c:	cmp	r0, r1
   172a0:	mvncc	r2, #0
   172a4:	mul	r3, r2, r8
   172a8:	cmp	r0, r2
   172ac:	mvncc	r3, #0
   172b0:	cmp	r0, r3
   172b4:	mul	ip, r3, r8
   172b8:	mov	r3, #0
   172bc:	mvncc	ip, #0
   172c0:	movwcc	r7, #1
   172c4:	cmp	r0, r2
   172c8:	mov	r2, #0
   172cc:	movwcc	r2, #1
   172d0:	cmp	r0, r1
   172d4:	mov	r1, #0
   172d8:	movwcc	r1, #1
   172dc:	cmp	r0, r4
   172e0:	movwcc	r3, #1
   172e4:	orr	r0, r3, r1
   172e8:	orr	r0, r0, r2
   172ec:	orr	r0, r0, r7
   172f0:	b	17530 <__assert_fail@plt+0x62d4>
   172f4:	mvn	r0, #0
   172f8:	str	lr, [sp, #8]
   172fc:	mul	lr, r4, r8
   17300:	udiv	r0, r0, r8
   17304:	cmp	r0, r4
   17308:	mvncc	lr, #0
   1730c:	mul	r9, lr, r8
   17310:	cmp	r0, lr
   17314:	mvncc	r9, #0
   17318:	mul	r7, r9, r8
   1731c:	cmp	r0, r9
   17320:	mvncc	r7, #0
   17324:	mul	r3, r7, r8
   17328:	cmp	r0, r7
   1732c:	mvncc	r3, #0
   17330:	mul	r1, r3, r8
   17334:	cmp	r0, r3
   17338:	mvncc	r1, #0
   1733c:	mul	r2, r1, r8
   17340:	cmp	r0, r1
   17344:	mvncc	r2, #0
   17348:	mul	ip, r2, r8
   1734c:	cmp	r0, r2
   17350:	mov	r8, #0
   17354:	mov	r2, #0
   17358:	mvncc	ip, #0
   1735c:	movwcc	r8, #1
   17360:	cmp	r0, r1
   17364:	mov	r1, #0
   17368:	movwcc	r1, #1
   1736c:	cmp	r0, r3
   17370:	mov	r3, #0
   17374:	movwcc	r3, #1
   17378:	cmp	r0, r7
   1737c:	mov	r7, #0
   17380:	movwcc	r7, #1
   17384:	cmp	r0, r9
   17388:	mov	r9, #0
   1738c:	movwcc	r9, #1
   17390:	cmp	r0, lr
   17394:	mov	lr, #0
   17398:	movwcc	lr, #1
   1739c:	cmp	r0, r4
   173a0:	movwcc	r2, #1
   173a4:	orr	r0, r2, lr
   173a8:	ldr	lr, [sp, #8]
   173ac:	orr	r0, r0, r9
   173b0:	orr	r0, r0, r7
   173b4:	orr	r0, r0, r3
   173b8:	orr	r0, r0, r1
   173bc:	orr	r0, r0, r8
   173c0:	and	r0, r0, #1
   173c4:	b	17530 <__assert_fail@plt+0x62d4>
   173c8:	mov	r1, #0
   173cc:	lsr	r0, r4, #22
   173d0:	cmp	r1, r4, lsr #22
   173d4:	lsl	r4, r4, #10
   173d8:	movwne	r0, #1
   173dc:	mvnne	r4, #0
   173e0:	b	17668 <__assert_fail@plt+0x640c>
   173e4:	mvn	r0, #0
   173e8:	mul	ip, r4, r8
   173ec:	str	lr, [sp, #8]
   173f0:	mov	r9, #0
   173f4:	udiv	r0, r0, r8
   173f8:	cmp	r0, r4
   173fc:	mvncc	ip, #0
   17400:	mul	r2, ip, r8
   17404:	cmp	r0, ip
   17408:	mvncc	r2, #0
   1740c:	mul	r3, r2, r8
   17410:	cmp	r0, r2
   17414:	mvncc	r3, #0
   17418:	mul	r7, r3, r8
   1741c:	cmp	r0, r3
   17420:	mvncc	r7, #0
   17424:	mul	r1, r7, r8
   17428:	cmp	r0, r7
   1742c:	mvncc	r1, #0
   17430:	mul	lr, r1, r8
   17434:	cmp	r0, r1
   17438:	mov	r8, #0
   1743c:	mov	r1, #0
   17440:	mvncc	lr, #0
   17444:	movwcc	r8, #1
   17448:	cmp	r0, r7
   1744c:	mov	r7, #0
   17450:	movwcc	r7, #1
   17454:	cmp	r0, r3
   17458:	mov	r3, #0
   1745c:	movwcc	r3, #1
   17460:	cmp	r0, r2
   17464:	mov	r2, #0
   17468:	movwcc	r2, #1
   1746c:	cmp	r0, ip
   17470:	movwcc	r1, #1
   17474:	cmp	r0, r4
   17478:	mov	r4, lr
   1747c:	ldr	lr, [sp, #8]
   17480:	movwcc	r9, #1
   17484:	orr	r0, r9, r1
   17488:	orr	r0, r0, r2
   1748c:	orr	r0, r0, r3
   17490:	orr	r0, r0, r7
   17494:	orr	r0, r0, r8
   17498:	b	17668 <__assert_fail@plt+0x640c>
   1749c:	mvn	r0, #0
   174a0:	mul	r1, r4, r8
   174a4:	udiv	r0, r0, r8
   174a8:	cmp	r0, r4
   174ac:	mvncc	r1, #0
   174b0:	mul	r2, r1, r8
   174b4:	cmp	r0, r1
   174b8:	mvncc	r2, #0
   174bc:	mul	r3, r2, r8
   174c0:	cmp	r0, r2
   174c4:	mvncc	r3, #0
   174c8:	mul	r7, r3, r8
   174cc:	cmp	r0, r3
   174d0:	mvncc	r7, #0
   174d4:	mul	ip, r7, r8
   174d8:	cmp	r0, r7
   174dc:	mov	r8, lr
   174e0:	mov	lr, #0
   174e4:	mov	r7, #0
   174e8:	mvncc	ip, #0
   174ec:	movwcc	lr, #1
   174f0:	cmp	r0, r3
   174f4:	mov	r3, #0
   174f8:	movwcc	r3, #1
   174fc:	cmp	r0, r2
   17500:	mov	r2, #0
   17504:	movwcc	r2, #1
   17508:	cmp	r0, r1
   1750c:	mov	r1, #0
   17510:	movwcc	r1, #1
   17514:	cmp	r0, r4
   17518:	movwcc	r7, #1
   1751c:	orr	r0, r7, r1
   17520:	orr	r0, r0, r2
   17524:	orr	r0, r0, r3
   17528:	orr	r0, r0, lr
   1752c:	mov	lr, r8
   17530:	mov	r4, ip
   17534:	b	17668 <__assert_fail@plt+0x640c>
   17538:	mvn	r0, #0
   1753c:	str	lr, [sp, #8]
   17540:	mul	lr, r4, r8
   17544:	udiv	r0, r0, r8
   17548:	cmp	r0, r4
   1754c:	mvncc	lr, #0
   17550:	mul	r9, lr, r8
   17554:	cmp	r0, lr
   17558:	mvncc	r9, #0
   1755c:	mul	r7, r9, r8
   17560:	cmp	r0, r9
   17564:	mvncc	r7, #0
   17568:	mul	r3, r7, r8
   1756c:	cmp	r0, r7
   17570:	mvncc	r3, #0
   17574:	mul	r1, r3, r8
   17578:	cmp	r0, r3
   1757c:	mvncc	r1, #0
   17580:	mul	r2, r1, r8
   17584:	cmp	r0, r1
   17588:	mvncc	r2, #0
   1758c:	mul	ip, r2, r8
   17590:	cmp	r0, r2
   17594:	mvncc	ip, #0
   17598:	mul	r8, ip, r8
   1759c:	cmp	r0, ip
   175a0:	mov	ip, #0
   175a4:	mvncc	r8, #0
   175a8:	str	r8, [sp, #4]
   175ac:	mov	r8, #0
   175b0:	movwcc	r8, #1
   175b4:	cmp	r0, r2
   175b8:	mov	r2, #0
   175bc:	movwcc	r2, #1
   175c0:	cmp	r0, r1
   175c4:	mov	r1, #0
   175c8:	movwcc	r1, #1
   175cc:	cmp	r0, r3
   175d0:	mov	r3, #0
   175d4:	movwcc	r3, #1
   175d8:	cmp	r0, r7
   175dc:	mov	r7, #0
   175e0:	movwcc	r7, #1
   175e4:	cmp	r0, r9
   175e8:	mov	r9, #0
   175ec:	movwcc	r9, #1
   175f0:	cmp	r0, lr
   175f4:	mov	lr, #0
   175f8:	movwcc	lr, #1
   175fc:	cmp	r0, r4
   17600:	ldr	r4, [sp, #4]
   17604:	movwcc	ip, #1
   17608:	orr	r0, ip, lr
   1760c:	ldr	lr, [sp, #8]
   17610:	orr	r0, r0, r9
   17614:	orr	r0, r0, r7
   17618:	orr	r0, r0, r3
   1761c:	orr	r0, r0, r1
   17620:	orr	r0, r0, r2
   17624:	orr	r0, r0, r8
   17628:	and	r0, r0, #1
   1762c:	b	17668 <__assert_fail@plt+0x640c>
   17630:	movw	r0, #65535	; 0xffff
   17634:	movt	r0, #63	; 0x3f
   17638:	add	r1, r0, #4194304	; 0x400000
   1763c:	mov	r0, #0
   17640:	cmp	r4, r1
   17644:	lsl	r4, r4, #9
   17648:	movwhi	r0, #1
   1764c:	mvnhi	r4, #0
   17650:	b	17668 <__assert_fail@plt+0x640c>
   17654:	lsl	r1, r4, #1
   17658:	cmp	r4, #0
   1765c:	lsr	r0, r4, #31
   17660:	mvnlt	r1, #0
   17664:	mov	r4, r1
   17668:	add	r1, r5, lr
   1766c:	orr	sl, r0, sl
   17670:	str	r1, [r6]
   17674:	ldrb	r1, [r5, lr]
   17678:	cmp	r1, #0
   1767c:	orrne	sl, sl, #2
   17680:	ldr	r0, [sp, #12]
   17684:	str	r4, [r0]
   17688:	mov	r0, sl
   1768c:	sub	sp, fp, #28
   17690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17694:	movw	r0, #40166	; 0x9ce6
   17698:	movw	r1, #40204	; 0x9d0c
   1769c:	movw	r3, #40220	; 0x9d1c
   176a0:	mov	r2, #85	; 0x55
   176a4:	movt	r0, #1
   176a8:	movt	r1, #1
   176ac:	movt	r3, #1
   176b0:	bl	1125c <__assert_fail@plt>
   176b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b8:	add	fp, sp, #28
   176bc:	sub	sp, sp, #44	; 0x2c
   176c0:	cmp	r2, #37	; 0x25
   176c4:	bcs	18334 <__assert_fail@plt+0x70d8>
   176c8:	ldr	sl, [fp, #8]
   176cc:	mov	r6, r2
   176d0:	mov	r7, r1
   176d4:	mov	r4, r0
   176d8:	str	r3, [sp, #36]	; 0x24
   176dc:	bl	11160 <__errno_location@plt>
   176e0:	mov	r5, r0
   176e4:	mov	r0, #0
   176e8:	str	r0, [r5]
   176ec:	bl	11124 <__ctype_b_loc@plt>
   176f0:	ldr	r1, [r0]
   176f4:	mov	r2, r4
   176f8:	ldrb	r0, [r2], #1
   176fc:	add	r3, r1, r0, lsl #1
   17700:	ldrb	r3, [r3, #1]
   17704:	tst	r3, #32
   17708:	bne	176f8 <__assert_fail@plt+0x649c>
   1770c:	sub	r9, fp, #32
   17710:	cmp	r7, #0
   17714:	mov	r8, #4
   17718:	movne	r9, r7
   1771c:	cmp	r0, #45	; 0x2d
   17720:	beq	18328 <__assert_fail@plt+0x70cc>
   17724:	mov	r0, r4
   17728:	mov	r1, r9
   1772c:	mov	r2, r6
   17730:	mov	r3, #0
   17734:	bl	11028 <__strtoull_internal@plt>
   17738:	mov	r7, r1
   1773c:	ldr	r1, [r9]
   17740:	cmp	r1, r4
   17744:	beq	17770 <__assert_fail@plt+0x6514>
   17748:	mov	r6, r0
   1774c:	ldr	r0, [r5]
   17750:	cmp	r0, #0
   17754:	beq	177ac <__assert_fail@plt+0x6550>
   17758:	cmp	r0, #34	; 0x22
   1775c:	bne	18328 <__assert_fail@plt+0x70cc>
   17760:	mov	r8, #1
   17764:	cmp	sl, #0
   17768:	bne	177b8 <__assert_fail@plt+0x655c>
   1776c:	b	18320 <__assert_fail@plt+0x70c4>
   17770:	cmp	sl, #0
   17774:	beq	18328 <__assert_fail@plt+0x70cc>
   17778:	mov	r5, r1
   1777c:	ldrb	r1, [r4]
   17780:	cmp	r1, #0
   17784:	beq	18328 <__assert_fail@plt+0x70cc>
   17788:	mov	r0, sl
   1778c:	bl	11154 <strchr@plt>
   17790:	cmp	r0, #0
   17794:	beq	18328 <__assert_fail@plt+0x70cc>
   17798:	mov	r1, r5
   1779c:	mov	r8, #0
   177a0:	mov	r6, #1
   177a4:	mov	r7, #0
   177a8:	b	177b8 <__assert_fail@plt+0x655c>
   177ac:	mov	r8, r0
   177b0:	cmp	sl, #0
   177b4:	beq	18320 <__assert_fail@plt+0x70c4>
   177b8:	ldrb	r4, [r1]
   177bc:	cmp	r4, #0
   177c0:	beq	18320 <__assert_fail@plt+0x70c4>
   177c4:	str	r1, [sp, #32]
   177c8:	mov	r0, sl
   177cc:	mov	r1, r4
   177d0:	bl	11154 <strchr@plt>
   177d4:	cmp	r0, #0
   177d8:	beq	17aa0 <__assert_fail@plt+0x6844>
   177dc:	sub	r0, r4, #69	; 0x45
   177e0:	mov	r1, #1
   177e4:	mov	r3, #0
   177e8:	mov	r5, #1024	; 0x400
   177ec:	cmp	r0, #47	; 0x2f
   177f0:	str	r1, [sp, #28]
   177f4:	bhi	178f8 <__assert_fail@plt+0x669c>
   177f8:	add	r1, pc, #0
   177fc:	ldr	pc, [r1, r0, lsl #2]
   17800:	andeq	r7, r1, r0, asr #17
   17804:	strdeq	r7, [r1], -r8
   17808:	andeq	r7, r1, r0, asr #17
   1780c:	strdeq	r7, [r1], -r8
   17810:	strdeq	r7, [r1], -r8
   17814:	strdeq	r7, [r1], -r8
   17818:	andeq	r7, r1, r0, asr #17
   1781c:	strdeq	r7, [r1], -r8
   17820:	andeq	r7, r1, r0, asr #17
   17824:	strdeq	r7, [r1], -r8
   17828:	strdeq	r7, [r1], -r8
   1782c:	andeq	r7, r1, r0, asr #17
   17830:	strdeq	r7, [r1], -r8
   17834:	strdeq	r7, [r1], -r8
   17838:	strdeq	r7, [r1], -r8
   1783c:	andeq	r7, r1, r0, asr #17
   17840:	strdeq	r7, [r1], -r8
   17844:	strdeq	r7, [r1], -r8
   17848:	strdeq	r7, [r1], -r8
   1784c:	strdeq	r7, [r1], -r8
   17850:	andeq	r7, r1, r0, asr #17
   17854:	andeq	r7, r1, r0, asr #17
   17858:	strdeq	r7, [r1], -r8
   1785c:	strdeq	r7, [r1], -r8
   17860:	strdeq	r7, [r1], -r8
   17864:	strdeq	r7, [r1], -r8
   17868:	strdeq	r7, [r1], -r8
   1786c:	strdeq	r7, [r1], -r8
   17870:	strdeq	r7, [r1], -r8
   17874:	strdeq	r7, [r1], -r8
   17878:	strdeq	r7, [r1], -r8
   1787c:	strdeq	r7, [r1], -r8
   17880:	strdeq	r7, [r1], -r8
   17884:	strdeq	r7, [r1], -r8
   17888:	andeq	r7, r1, r0, asr #17
   1788c:	strdeq	r7, [r1], -r8
   17890:	strdeq	r7, [r1], -r8
   17894:	strdeq	r7, [r1], -r8
   17898:	andeq	r7, r1, r0, asr #17
   1789c:	strdeq	r7, [r1], -r8
   178a0:	andeq	r7, r1, r0, asr #17
   178a4:	strdeq	r7, [r1], -r8
   178a8:	strdeq	r7, [r1], -r8
   178ac:	strdeq	r7, [r1], -r8
   178b0:	strdeq	r7, [r1], -r8
   178b4:	strdeq	r7, [r1], -r8
   178b8:	strdeq	r7, [r1], -r8
   178bc:	andeq	r7, r1, r0, asr #17
   178c0:	mov	r0, sl
   178c4:	mov	r1, #48	; 0x30
   178c8:	bl	11154 <strchr@plt>
   178cc:	cmp	r0, #0
   178d0:	beq	178f4 <__assert_fail@plt+0x6698>
   178d4:	ldr	r1, [sp, #32]
   178d8:	ldrb	r0, [r1, #1]
   178dc:	cmp	r0, #66	; 0x42
   178e0:	cmpne	r0, #68	; 0x44
   178e4:	bne	17aac <__assert_fail@plt+0x6850>
   178e8:	mov	r5, #1000	; 0x3e8
   178ec:	mov	r0, #2
   178f0:	str	r0, [sp, #28]
   178f4:	mov	r3, #0
   178f8:	sub	r0, r4, #66	; 0x42
   178fc:	cmp	r0, #53	; 0x35
   17900:	bhi	17aa0 <__assert_fail@plt+0x6844>
   17904:	add	r1, pc, #0
   17908:	ldr	pc, [r1, r0, lsl #2]
   1790c:	andeq	r7, r1, r8, lsr #28
   17910:	andeq	r7, r1, r0, lsr #21
   17914:	andeq	r7, r1, r0, lsr #21
   17918:	andeq	r7, r1, r0, asr lr
   1791c:	andeq	r7, r1, r0, lsr #21
   17920:	andeq	r7, r1, r4, ror #19
   17924:	andeq	r7, r1, r0, lsr #21
   17928:	andeq	r7, r1, r0, lsr #21
   1792c:	andeq	r7, r1, r0, lsr #21
   17930:	ldrdeq	r7, [r1], -r0
   17934:	andeq	r7, r1, r0, lsr #21
   17938:	andeq	r7, r1, r8, lsl fp
   1793c:	andeq	r7, r1, r0, lsr #21
   17940:	andeq	r7, r1, r0, lsr #21
   17944:	andeq	r7, r1, r8, lsr #31
   17948:	andeq	r7, r1, r0, lsr #21
   1794c:	andeq	r7, r1, r0, lsr #21
   17950:	andeq	r7, r1, r0, lsr #21
   17954:	andeq	r7, r1, r4, lsr #23
   17958:	andeq	r7, r1, r0, lsr #21
   1795c:	andeq	r7, r1, r0, lsr #21
   17960:	andeq	r7, r1, r0, lsr #21
   17964:	andeq	r7, r1, r0, lsr #21
   17968:	ldrdeq	r8, [r1], -r0
   1796c:	andeq	r7, r1, ip, lsl #25
   17970:	andeq	r7, r1, r0, lsr #21
   17974:	andeq	r7, r1, r0, lsr #21
   17978:	andeq	r7, r1, r0, lsr #21
   1797c:	andeq	r7, r1, r0, lsr #21
   17980:	andeq	r7, r1, r0, lsr #21
   17984:	andeq	r7, r1, r0, lsr #21
   17988:	andeq	r7, r1, r0, lsr #21
   1798c:	andeq	r8, r1, r8, lsr #5
   17990:	andeq	r8, r1, r0, lsl #6
   17994:	andeq	r7, r1, r0, lsr #21
   17998:	andeq	r7, r1, r0, lsr #21
   1799c:	andeq	r7, r1, r0, lsr #21
   179a0:	andeq	r7, r1, r4, ror #19
   179a4:	andeq	r7, r1, r0, lsr #21
   179a8:	andeq	r7, r1, r0, lsr #21
   179ac:	andeq	r7, r1, r0, lsr #21
   179b0:	ldrdeq	r7, [r1], -r0
   179b4:	andeq	r7, r1, r0, lsr #21
   179b8:	andeq	r7, r1, r8, lsl fp
   179bc:	andeq	r7, r1, r0, lsr #21
   179c0:	andeq	r7, r1, r0, lsr #21
   179c4:	andeq	r7, r1, r0, lsr #21
   179c8:	andeq	r7, r1, r0, lsr #21
   179cc:	andeq	r7, r1, r0, lsr #21
   179d0:	andeq	r7, r1, r0, lsr #21
   179d4:	andeq	r7, r1, r4, lsr #23
   179d8:	andeq	r7, r1, r0, lsr #21
   179dc:	andeq	r7, r1, r0, lsr #21
   179e0:	ldrdeq	r8, [r1], -ip
   179e4:	mvn	r0, #0
   179e8:	mvn	r1, #0
   179ec:	mov	r2, r5
   179f0:	mov	sl, r3
   179f4:	bl	18950 <__assert_fail@plt+0x76f4>
   179f8:	subs	r3, r0, r6
   179fc:	mov	lr, #0
   17a00:	umull	r4, r2, r6, r5
   17a04:	str	r1, [sp, #20]
   17a08:	sbcs	r3, r1, r7
   17a0c:	mla	ip, r6, sl, r2
   17a10:	mov	r2, r1
   17a14:	movwcc	lr, #1
   17a18:	mla	r7, r7, r5, ip
   17a1c:	mov	r2, #0
   17a20:	cmp	lr, #0
   17a24:	mvnne	r4, #0
   17a28:	mvnne	r7, #0
   17a2c:	subs	r6, r0, r4
   17a30:	sbcs	r6, r1, r7
   17a34:	movwcc	r2, #1
   17a38:	umull	r3, r6, r4, r5
   17a3c:	cmp	r2, #0
   17a40:	str	r6, [sp, #16]
   17a44:	mvnne	r3, #0
   17a48:	cmp	r2, #0
   17a4c:	umull	r6, ip, r3, r5
   17a50:	mla	r1, r3, sl, ip
   17a54:	ldr	ip, [sp, #16]
   17a58:	str	r1, [sp, #12]
   17a5c:	mla	r4, r4, sl, ip
   17a60:	mla	r4, r7, r5, r4
   17a64:	ldr	r7, [sp, #12]
   17a68:	mvnne	r4, #0
   17a6c:	subs	r0, r0, r3
   17a70:	ldr	r0, [sp, #20]
   17a74:	mla	r7, r4, r5, r7
   17a78:	sbcs	r0, r0, r4
   17a7c:	mov	r0, #0
   17a80:	movwcc	r0, #1
   17a84:	cmp	r0, #0
   17a88:	mov	r1, r0
   17a8c:	orr	r0, lr, r2
   17a90:	mvnne	r7, #0
   17a94:	mvnne	r6, #0
   17a98:	orr	r3, r0, r1
   17a9c:	b	18300 <__assert_fail@plt+0x70a4>
   17aa0:	ldr	r0, [sp, #36]	; 0x24
   17aa4:	orr	r8, r8, #2
   17aa8:	b	18324 <__assert_fail@plt+0x70c8>
   17aac:	cmp	r0, #105	; 0x69
   17ab0:	mov	r3, #0
   17ab4:	bne	178f8 <__assert_fail@plt+0x669c>
   17ab8:	ldrb	r0, [r1, #2]
   17abc:	mov	r1, #1
   17ac0:	cmp	r0, #66	; 0x42
   17ac4:	movweq	r1, #3
   17ac8:	str	r1, [sp, #28]
   17acc:	b	178f8 <__assert_fail@plt+0x669c>
   17ad0:	mvn	r0, #0
   17ad4:	mvn	r1, #0
   17ad8:	mov	r2, r5
   17adc:	mov	r4, r3
   17ae0:	bl	18950 <__assert_fail@plt+0x76f4>
   17ae4:	subs	r0, r0, r6
   17ae8:	mov	r2, #0
   17aec:	sbcs	r0, r1, r7
   17af0:	movwcc	r2, #1
   17af4:	umull	r0, r1, r6, r5
   17af8:	mla	r1, r6, r4, r1
   17afc:	cmp	r2, #0
   17b00:	mov	r3, r2
   17b04:	mla	r7, r7, r5, r1
   17b08:	mvnne	r0, #0
   17b0c:	mvnne	r7, #0
   17b10:	mov	r6, r0
   17b14:	b	18300 <__assert_fail@plt+0x70a4>
   17b18:	mvn	r0, #0
   17b1c:	mvn	r1, #0
   17b20:	mov	r2, r5
   17b24:	str	r3, [sp, #24]
   17b28:	bl	18950 <__assert_fail@plt+0x76f4>
   17b2c:	subs	r3, r0, r6
   17b30:	mov	ip, r0
   17b34:	umull	r4, r0, r6, r5
   17b38:	mov	sl, #0
   17b3c:	sbcs	r3, r1, r7
   17b40:	str	r0, [sp, #20]
   17b44:	ldr	r0, [sp, #24]
   17b48:	mov	r3, #0
   17b4c:	movwcc	r3, #1
   17b50:	cmp	r3, #0
   17b54:	mvnne	r4, #0
   17b58:	cmp	r3, #0
   17b5c:	umull	lr, r2, r4, r5
   17b60:	mla	r2, r4, r0, r2
   17b64:	str	r2, [sp, #16]
   17b68:	ldr	r2, [sp, #20]
   17b6c:	mla	r6, r6, r0, r2
   17b70:	ldr	r0, [sp, #16]
   17b74:	mla	r6, r7, r5, r6
   17b78:	mvnne	r6, #0
   17b7c:	mla	r7, r6, r5, r0
   17b80:	subs	r0, ip, r4
   17b84:	sbcs	r0, r1, r6
   17b88:	movwcc	sl, #1
   17b8c:	cmp	sl, #0
   17b90:	orr	r3, r3, sl
   17b94:	mvnne	lr, #0
   17b98:	mvnne	r7, #0
   17b9c:	mov	r6, lr
   17ba0:	b	18300 <__assert_fail@plt+0x70a4>
   17ba4:	mvn	r0, #0
   17ba8:	mvn	r1, #0
   17bac:	mov	r2, r5
   17bb0:	mov	sl, r3
   17bb4:	bl	18950 <__assert_fail@plt+0x76f4>
   17bb8:	subs	r3, r0, r6
   17bbc:	mov	ip, r1
   17bc0:	umull	r2, lr, r6, r5
   17bc4:	str	r0, [sp, #20]
   17bc8:	sbcs	r3, r1, r7
   17bcc:	mov	r1, #0
   17bd0:	mla	r6, r6, sl, lr
   17bd4:	mov	lr, #0
   17bd8:	str	ip, [sp, #16]
   17bdc:	movwcc	r1, #1
   17be0:	mla	r7, r7, r5, r6
   17be4:	cmp	r1, #0
   17be8:	mvnne	r2, #0
   17bec:	cmp	r1, #0
   17bf0:	umull	r3, r4, r2, r5
   17bf4:	mvnne	r7, #0
   17bf8:	mla	r4, r2, sl, r4
   17bfc:	subs	r2, r0, r2
   17c00:	sbcs	r2, ip, r7
   17c04:	mla	r4, r7, r5, r4
   17c08:	movwcc	lr, #1
   17c0c:	mov	r2, #0
   17c10:	cmp	lr, #0
   17c14:	mvnne	r3, #0
   17c18:	mvnne	r4, #0
   17c1c:	subs	r7, r0, r3
   17c20:	mov	r0, r5
   17c24:	sbcs	r7, ip, r4
   17c28:	movwcc	r2, #1
   17c2c:	umull	r5, r7, r3, r5
   17c30:	cmp	r2, #0
   17c34:	mla	r3, r3, sl, r7
   17c38:	mvnne	r5, #0
   17c3c:	mla	r3, r4, r0, r3
   17c40:	cmp	r2, #0
   17c44:	umull	r6, ip, r5, r0
   17c48:	mvnne	r3, #0
   17c4c:	mla	ip, r5, sl, ip
   17c50:	mla	r7, r3, r0, ip
   17c54:	ldr	r0, [sp, #20]
   17c58:	subs	r0, r0, r5
   17c5c:	ldr	r0, [sp, #16]
   17c60:	sbcs	r0, r0, r3
   17c64:	mov	r0, #0
   17c68:	movwcc	r0, #1
   17c6c:	cmp	r0, #0
   17c70:	mov	r3, r0
   17c74:	orr	r0, r1, lr
   17c78:	orr	r0, r0, r2
   17c7c:	mvnne	r7, #0
   17c80:	mvnne	r6, #0
   17c84:	orr	r3, r0, r3
   17c88:	b	18300 <__assert_fail@plt+0x70a4>
   17c8c:	mvn	r0, #0
   17c90:	mvn	r1, #0
   17c94:	mov	r2, r5
   17c98:	mov	r4, r3
   17c9c:	str	r3, [sp, #24]
   17ca0:	bl	18950 <__assert_fail@plt+0x76f4>
   17ca4:	umull	r3, r2, r6, r5
   17ca8:	mla	r2, r6, r4, r2
   17cac:	subs	r6, r0, r6
   17cb0:	sbcs	r6, r1, r7
   17cb4:	mla	ip, r7, r5, r2
   17cb8:	ldr	r2, [sp, #24]
   17cbc:	mov	r6, #0
   17cc0:	movwcc	r6, #1
   17cc4:	cmp	r6, #0
   17cc8:	str	r6, [sp, #20]
   17ccc:	mov	r6, #0
   17cd0:	mvnne	r3, #0
   17cd4:	mvnne	ip, #0
   17cd8:	subs	r4, r0, r3
   17cdc:	umull	r7, lr, r3, r5
   17ce0:	sbcs	r4, r1, ip
   17ce4:	mla	r3, r3, r2, lr
   17ce8:	movwcc	r6, #1
   17cec:	cmp	r6, #0
   17cf0:	str	r6, [sp, #16]
   17cf4:	mvnne	r7, #0
   17cf8:	cmp	r6, #0
   17cfc:	umull	sl, r4, r7, r5
   17d00:	mla	r4, r7, r2, r4
   17d04:	mla	r2, ip, r5, r3
   17d08:	mov	ip, #0
   17d0c:	mvnne	r2, #0
   17d10:	subs	r3, r0, r7
   17d14:	mla	r6, r2, r5, r4
   17d18:	mov	r4, r0
   17d1c:	sbcs	r2, r1, r2
   17d20:	mov	r0, #0
   17d24:	movwcc	r0, #1
   17d28:	mov	r3, r4
   17d2c:	cmp	r0, #0
   17d30:	str	r0, [sp, #12]
   17d34:	mov	r0, r1
   17d38:	str	r3, [sp, #4]
   17d3c:	mvnne	sl, #0
   17d40:	mvnne	r6, #0
   17d44:	str	r0, [sp, #8]
   17d48:	subs	r2, r4, sl
   17d4c:	ldr	r4, [sp, #24]
   17d50:	sbcs	r2, r1, r6
   17d54:	movwcc	ip, #1
   17d58:	umull	r7, r2, sl, r5
   17d5c:	cmp	ip, #0
   17d60:	mla	r2, sl, r4, r2
   17d64:	mvnne	r7, #0
   17d68:	cmp	ip, #0
   17d6c:	mov	sl, #0
   17d70:	umull	r1, lr, r7, r5
   17d74:	mla	r2, r6, r5, r2
   17d78:	mvnne	r2, #0
   17d7c:	mla	lr, r7, r4, lr
   17d80:	subs	r6, r3, r7
   17d84:	mla	lr, r2, r5, lr
   17d88:	sbcs	r2, r0, r2
   17d8c:	movwcc	sl, #1
   17d90:	mov	r2, #0
   17d94:	cmp	sl, #0
   17d98:	mvnne	r1, #0
   17d9c:	mvnne	lr, #0
   17da0:	subs	r6, r3, r1
   17da4:	ldr	r3, [sp, #24]
   17da8:	sbcs	r6, r0, lr
   17dac:	umull	r0, r7, r1, r5
   17db0:	movwcc	r2, #1
   17db4:	cmp	r2, #0
   17db8:	mvnne	r0, #0
   17dbc:	mla	r1, r1, r3, r7
   17dc0:	cmp	r2, #0
   17dc4:	umull	r6, r4, r0, r5
   17dc8:	mla	r1, lr, r5, r1
   17dcc:	mla	r4, r0, r3, r4
   17dd0:	ldr	r3, [sp, #4]
   17dd4:	mvnne	r1, #0
   17dd8:	mla	r7, r1, r5, r4
   17ddc:	ldr	r5, [sp, #16]
   17de0:	subs	r0, r3, r0
   17de4:	ldr	r0, [sp, #8]
   17de8:	sbcs	r0, r0, r1
   17dec:	mov	r0, #0
   17df0:	movwcc	r0, #1
   17df4:	cmp	r0, #0
   17df8:	mov	r1, r0
   17dfc:	ldr	r0, [sp, #20]
   17e00:	mvnne	r7, #0
   17e04:	mvnne	r6, #0
   17e08:	orr	r0, r0, r5
   17e0c:	ldr	r5, [sp, #12]
   17e10:	orr	r0, r0, r5
   17e14:	orr	r0, r0, ip
   17e18:	orr	r0, r0, sl
   17e1c:	orr	r0, r0, r2
   17e20:	orr	r0, r0, r1
   17e24:	b	182a0 <__assert_fail@plt+0x7044>
   17e28:	mov	r1, #0
   17e2c:	lsl	r2, r7, #10
   17e30:	lsl	r0, r6, #10
   17e34:	lsr	r3, r7, #22
   17e38:	cmp	r1, r7, lsr #22
   17e3c:	orr	r2, r2, r6, lsr #22
   17e40:	mvnne	r0, #0
   17e44:	movwne	r3, #1
   17e48:	cmp	r1, r7, lsr #22
   17e4c:	b	182cc <__assert_fail@plt+0x7070>
   17e50:	mvn	r0, #0
   17e54:	mvn	r1, #0
   17e58:	mov	r2, r5
   17e5c:	mov	sl, r3
   17e60:	bl	18950 <__assert_fail@plt+0x76f4>
   17e64:	subs	r2, r0, r6
   17e68:	mov	ip, r0
   17e6c:	mov	r0, #0
   17e70:	sbcs	r2, r1, r7
   17e74:	movwcc	r0, #1
   17e78:	umull	r4, r2, r6, r5
   17e7c:	cmp	r0, #0
   17e80:	mla	r2, r6, sl, r2
   17e84:	str	r0, [sp, #20]
   17e88:	mvnne	r4, #0
   17e8c:	cmp	r0, #0
   17e90:	mla	r2, r7, r5, r2
   17e94:	mov	r0, #0
   17e98:	umull	lr, r3, r4, r5
   17e9c:	mvnne	r2, #0
   17ea0:	mla	r3, r4, sl, r3
   17ea4:	mla	r6, r2, r5, r3
   17ea8:	subs	r3, ip, r4
   17eac:	sbcs	r2, r1, r2
   17eb0:	mov	r3, r1
   17eb4:	movwcc	r0, #1
   17eb8:	str	r3, [sp, #8]
   17ebc:	cmp	r0, #0
   17ec0:	str	r0, [sp, #16]
   17ec4:	mov	r0, ip
   17ec8:	mvnne	lr, #0
   17ecc:	mvnne	r6, #0
   17ed0:	str	r0, [sp, #12]
   17ed4:	subs	r2, ip, lr
   17ed8:	umull	r7, r4, lr, r5
   17edc:	sbcs	r2, r1, r6
   17ee0:	mla	r4, lr, sl, r4
   17ee4:	mov	r2, #0
   17ee8:	mla	r6, r6, r5, r4
   17eec:	mov	r4, #0
   17ef0:	movwcc	r2, #1
   17ef4:	cmp	r2, #0
   17ef8:	mvnne	r7, #0
   17efc:	cmp	r2, #0
   17f00:	umull	r1, ip, r7, r5
   17f04:	mvnne	r6, #0
   17f08:	mla	ip, r7, sl, ip
   17f0c:	subs	r7, r0, r7
   17f10:	mla	lr, r6, r5, ip
   17f14:	sbcs	r7, r3, r6
   17f18:	mov	ip, #0
   17f1c:	movwcc	ip, #1
   17f20:	cmp	ip, #0
   17f24:	mvnne	r1, #0
   17f28:	mvnne	lr, #0
   17f2c:	subs	r7, r0, r1
   17f30:	sbcs	r7, r3, lr
   17f34:	movwcc	r4, #1
   17f38:	umull	r0, r7, r1, r5
   17f3c:	cmp	r4, #0
   17f40:	mla	r1, r1, sl, r7
   17f44:	mvnne	r0, #0
   17f48:	mla	r1, lr, r5, r1
   17f4c:	cmp	r4, #0
   17f50:	umull	r6, r3, r0, r5
   17f54:	mvnne	r1, #0
   17f58:	mla	r3, r0, sl, r3
   17f5c:	mla	r7, r1, r5, r3
   17f60:	ldr	r3, [sp, #12]
   17f64:	subs	r0, r3, r0
   17f68:	ldr	r3, [sp, #16]
   17f6c:	ldr	r0, [sp, #8]
   17f70:	sbcs	r0, r0, r1
   17f74:	mov	r0, #0
   17f78:	movwcc	r0, #1
   17f7c:	cmp	r0, #0
   17f80:	mov	r1, r0
   17f84:	ldr	r0, [sp, #20]
   17f88:	mvnne	r7, #0
   17f8c:	mvnne	r6, #0
   17f90:	orr	r0, r0, r3
   17f94:	orr	r0, r0, r2
   17f98:	orr	r0, r0, ip
   17f9c:	orr	r0, r0, r4
   17fa0:	orr	r3, r0, r1
   17fa4:	b	18300 <__assert_fail@plt+0x70a4>
   17fa8:	mvn	r0, #0
   17fac:	mvn	r1, #0
   17fb0:	mov	r2, r5
   17fb4:	mov	sl, r3
   17fb8:	bl	18950 <__assert_fail@plt+0x76f4>
   17fbc:	umull	r3, r2, r6, r5
   17fc0:	mov	lr, r1
   17fc4:	mov	r1, r0
   17fc8:	mla	r2, r6, sl, r2
   17fcc:	subs	r6, r0, r6
   17fd0:	mov	r0, #0
   17fd4:	sbcs	r6, lr, r7
   17fd8:	mla	r2, r7, r5, r2
   17fdc:	movwcc	r0, #1
   17fe0:	cmp	r0, #0
   17fe4:	str	r0, [sp, #20]
   17fe8:	mov	r0, r1
   17fec:	mvnne	r3, #0
   17ff0:	mvnne	r2, #0
   17ff4:	str	r0, [sp, #16]
   17ff8:	subs	r4, r1, r3
   17ffc:	umull	r7, ip, r3, r5
   18000:	sbcs	r4, lr, r2
   18004:	mla	r3, r3, sl, ip
   18008:	mov	ip, #0
   1800c:	mov	r4, #0
   18010:	mla	r2, r2, r5, r3
   18014:	movwcc	r4, #1
   18018:	cmp	r4, #0
   1801c:	mvnne	r7, #0
   18020:	cmp	r4, #0
   18024:	umull	r1, r6, r7, r5
   18028:	mvnne	r2, #0
   1802c:	mla	r6, r7, sl, r6
   18030:	mla	r3, r2, r5, r6
   18034:	subs	r6, r0, r7
   18038:	sbcs	r2, lr, r2
   1803c:	movwcc	ip, #1
   18040:	mov	r2, #0
   18044:	cmp	ip, #0
   18048:	mvnne	r1, #0
   1804c:	mvnne	r3, #0
   18050:	subs	r6, r0, r1
   18054:	sbcs	r6, lr, r3
   18058:	movwcc	r2, #1
   1805c:	umull	r0, r6, r1, r5
   18060:	cmp	r2, #0
   18064:	str	r6, [sp, #12]
   18068:	mvnne	r0, #0
   1806c:	cmp	r2, #0
   18070:	umull	r6, r7, r0, r5
   18074:	mla	r7, r0, sl, r7
   18078:	str	r7, [sp, #8]
   1807c:	ldr	r7, [sp, #12]
   18080:	mla	r1, r1, sl, r7
   18084:	mla	r1, r3, r5, r1
   18088:	ldr	r3, [sp, #8]
   1808c:	mvnne	r1, #0
   18090:	mla	r7, r1, r5, r3
   18094:	ldr	r3, [sp, #16]
   18098:	subs	r0, r3, r0
   1809c:	sbcs	r0, lr, r1
   180a0:	mov	r0, #0
   180a4:	movwcc	r0, #1
   180a8:	cmp	r0, #0
   180ac:	mov	r1, r0
   180b0:	ldr	r0, [sp, #20]
   180b4:	mvnne	r7, #0
   180b8:	mvnne	r6, #0
   180bc:	orr	r0, r0, r4
   180c0:	orr	r0, r0, ip
   180c4:	orr	r0, r0, r2
   180c8:	orr	r3, r0, r1
   180cc:	b	18300 <__assert_fail@plt+0x70a4>
   180d0:	mvn	r0, #0
   180d4:	mvn	r1, #0
   180d8:	mov	r2, r5
   180dc:	mov	sl, r3
   180e0:	bl	18950 <__assert_fail@plt+0x76f4>
   180e4:	mov	lr, r0
   180e8:	subs	r0, r0, r6
   180ec:	mov	r2, #0
   180f0:	mov	ip, r1
   180f4:	str	sl, [sp, #24]
   180f8:	sbcs	r0, r1, r7
   180fc:	umull	r3, r1, r6, r5
   18100:	str	lr, [sp, #4]
   18104:	movwcc	r2, #1
   18108:	mla	r6, r6, sl, r1
   1810c:	mov	r1, #0
   18110:	cmp	r2, #0
   18114:	mla	r7, r7, r5, r6
   18118:	str	r2, [sp, #20]
   1811c:	mvnne	r3, #0
   18120:	cmp	r2, #0
   18124:	mov	r2, #0
   18128:	umull	r0, r4, r3, r5
   1812c:	mvnne	r7, #0
   18130:	mla	r4, r3, sl, r4
   18134:	subs	r3, lr, r3
   18138:	sbcs	r3, ip, r7
   1813c:	mla	r4, r7, r5, r4
   18140:	movwcc	r1, #1
   18144:	cmp	r1, #0
   18148:	str	r1, [sp, #16]
   1814c:	mvnne	r0, #0
   18150:	mvnne	r4, #0
   18154:	subs	r3, lr, r0
   18158:	sbcs	r3, ip, r4
   1815c:	movwcc	r2, #1
   18160:	umull	r6, r3, r0, r5
   18164:	cmp	r2, #0
   18168:	mla	r0, r0, sl, r3
   1816c:	str	r2, [sp, #12]
   18170:	mvnne	r6, #0
   18174:	mla	r0, r4, r5, r0
   18178:	cmp	r2, #0
   1817c:	ldr	r4, [sp, #24]
   18180:	umull	r1, r7, r6, r5
   18184:	mvnne	r0, #0
   18188:	subs	r3, lr, r6
   1818c:	mla	r7, r6, sl, r7
   18190:	mov	r3, ip
   18194:	mla	r7, r0, r5, r7
   18198:	sbcs	r0, ip, r0
   1819c:	str	r3, [sp]
   181a0:	mov	r0, #0
   181a4:	movwcc	r0, #1
   181a8:	cmp	r0, #0
   181ac:	str	r0, [sp, #8]
   181b0:	mvnne	r1, #0
   181b4:	mvnne	r7, #0
   181b8:	subs	r0, lr, r1
   181bc:	sbcs	r0, ip, r7
   181c0:	mov	ip, #0
   181c4:	movwcc	ip, #1
   181c8:	umull	r6, r0, r1, r5
   181cc:	cmp	ip, #0
   181d0:	mla	r1, r1, r4, r0
   181d4:	mov	r0, lr
   181d8:	mvnne	r6, #0
   181dc:	mla	r1, r7, r5, r1
   181e0:	cmp	ip, #0
   181e4:	umull	r2, sl, r6, r5
   181e8:	mvnne	r1, #0
   181ec:	mla	sl, r6, r4, sl
   181f0:	subs	r6, lr, r6
   181f4:	mov	lr, #0
   181f8:	mla	r7, r1, r5, sl
   181fc:	sbcs	r1, r3, r1
   18200:	movwcc	lr, #1
   18204:	ldr	r1, [sp, #24]
   18208:	cmp	lr, #0
   1820c:	mvnne	r2, #0
   18210:	mvnne	r7, #0
   18214:	subs	r6, r0, r2
   18218:	umull	r0, sl, r2, r5
   1821c:	sbcs	r6, r3, r7
   18220:	mov	r3, #0
   18224:	mla	r2, r2, r1, sl
   18228:	movwcc	r3, #1
   1822c:	mla	r2, r7, r5, r2
   18230:	cmp	r3, #0
   18234:	mvnne	r0, #0
   18238:	cmp	r3, #0
   1823c:	umull	r6, r4, r0, r5
   18240:	mvnne	r2, #0
   18244:	mla	r4, r0, r1, r4
   18248:	ldr	r1, [sp, #4]
   1824c:	mla	r7, r2, r5, r4
   18250:	ldr	r5, [sp, #16]
   18254:	subs	r0, r1, r0
   18258:	ldr	r0, [sp]
   1825c:	sbcs	r0, r0, r2
   18260:	mov	r0, #0
   18264:	movwcc	r0, #1
   18268:	cmp	r0, #0
   1826c:	mov	r2, r0
   18270:	ldr	r0, [sp, #20]
   18274:	mvnne	r7, #0
   18278:	mvnne	r6, #0
   1827c:	orr	r0, r0, r5
   18280:	ldr	r5, [sp, #12]
   18284:	orr	r0, r0, r5
   18288:	ldr	r5, [sp, #8]
   1828c:	orr	r0, r0, r5
   18290:	orr	r0, r0, ip
   18294:	orr	r0, r0, lr
   18298:	orr	r0, r0, r3
   1829c:	orr	r0, r0, r2
   182a0:	and	r3, r0, #1
   182a4:	b	18300 <__assert_fail@plt+0x70a4>
   182a8:	mov	r1, #0
   182ac:	lsl	r2, r7, #9
   182b0:	lsl	r0, r6, #9
   182b4:	lsr	r3, r7, #23
   182b8:	cmp	r1, r7, lsr #23
   182bc:	orr	r2, r2, r6, lsr #23
   182c0:	mvnne	r0, #0
   182c4:	movwne	r3, #1
   182c8:	cmp	r1, r7, lsr #23
   182cc:	mvnne	r2, #0
   182d0:	mov	r6, r0
   182d4:	mov	r7, r2
   182d8:	b	18300 <__assert_fail@plt+0x70a4>
   182dc:	lsl	r1, r7, #1
   182e0:	lsl	r0, r6, #1
   182e4:	cmp	r7, #0
   182e8:	lsr	r3, r7, #31
   182ec:	orr	r1, r1, r6, lsr #31
   182f0:	mvnlt	r0, #0
   182f4:	mvnlt	r1, #0
   182f8:	mov	r6, r0
   182fc:	mov	r7, r1
   18300:	ldr	r1, [sp, #32]
   18304:	ldr	r2, [sp, #28]
   18308:	orr	r8, r3, r8
   1830c:	add	r0, r1, r2
   18310:	str	r0, [r9]
   18314:	ldrb	r0, [r1, r2]
   18318:	cmp	r0, #0
   1831c:	orrne	r8, r8, #2
   18320:	ldr	r0, [sp, #36]	; 0x24
   18324:	strd	r6, [r0]
   18328:	mov	r0, r8
   1832c:	sub	sp, fp, #28
   18330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18334:	movw	r0, #40166	; 0x9ce6
   18338:	movw	r1, #40204	; 0x9d0c
   1833c:	movw	r3, #40301	; 0x9d6d
   18340:	mov	r2, #85	; 0x55
   18344:	movt	r0, #1
   18348:	movt	r1, #1
   1834c:	movt	r3, #1
   18350:	bl	1125c <__assert_fail@plt>
   18354:	clz	r2, r1
   18358:	clz	r3, r0
   1835c:	lsr	r2, r2, #5
   18360:	lsr	r3, r3, #5
   18364:	orrs	r2, r3, r2
   18368:	movwne	r1, #1
   1836c:	movwne	r0, #1
   18370:	cmp	r1, #0
   18374:	beq	183a4 <__assert_fail@plt+0x7148>
   18378:	mvn	r2, #-2147483648	; 0x80000000
   1837c:	udiv	r2, r2, r1
   18380:	cmp	r2, r0
   18384:	bcs	183a4 <__assert_fail@plt+0x7148>
   18388:	push	{fp, lr}
   1838c:	mov	fp, sp
   18390:	bl	11160 <__errno_location@plt>
   18394:	mov	r1, #12
   18398:	str	r1, [r0]
   1839c:	mov	r0, #0
   183a0:	pop	{fp, pc}
   183a4:	b	10fbc <calloc@plt>
   183a8:	cmp	r0, #0
   183ac:	movweq	r0, #1
   183b0:	cmn	r0, #1
   183b4:	ble	183bc <__assert_fail@plt+0x7160>
   183b8:	b	110dc <malloc@plt>
   183bc:	push	{fp, lr}
   183c0:	mov	fp, sp
   183c4:	bl	11160 <__errno_location@plt>
   183c8:	mov	r1, #12
   183cc:	str	r1, [r0]
   183d0:	mov	r0, #0
   183d4:	pop	{fp, pc}
   183d8:	push	{fp, lr}
   183dc:	mov	fp, sp
   183e0:	cmp	r0, #0
   183e4:	beq	18400 <__assert_fail@plt+0x71a4>
   183e8:	cmp	r1, #0
   183ec:	beq	1840c <__assert_fail@plt+0x71b0>
   183f0:	cmn	r1, #1
   183f4:	ble	18418 <__assert_fail@plt+0x71bc>
   183f8:	pop	{fp, lr}
   183fc:	b	11064 <realloc@plt>
   18400:	mov	r0, r1
   18404:	pop	{fp, lr}
   18408:	b	183a8 <__assert_fail@plt+0x714c>
   1840c:	bl	13ec0 <__assert_fail@plt+0x2c64>
   18410:	mov	r0, #0
   18414:	pop	{fp, pc}
   18418:	bl	11160 <__errno_location@plt>
   1841c:	mov	r1, #12
   18420:	str	r1, [r0]
   18424:	mov	r0, #0
   18428:	pop	{fp, pc}
   1842c:	push	{r4, r5, r6, sl, fp, lr}
   18430:	add	fp, sp, #16
   18434:	mov	r4, r0
   18438:	bl	110ac <__fpending@plt>
   1843c:	ldr	r6, [r4]
   18440:	mov	r5, r0
   18444:	mov	r0, r4
   18448:	bl	13d14 <__assert_fail@plt+0x2ab8>
   1844c:	tst	r6, #32
   18450:	bne	18488 <__assert_fail@plt+0x722c>
   18454:	cmp	r0, #0
   18458:	mov	r4, r0
   1845c:	mvnne	r4, #0
   18460:	cmp	r5, #0
   18464:	bne	18494 <__assert_fail@plt+0x7238>
   18468:	cmp	r0, #0
   1846c:	beq	18494 <__assert_fail@plt+0x7238>
   18470:	bl	11160 <__errno_location@plt>
   18474:	ldr	r0, [r0]
   18478:	subs	r4, r0, #9
   1847c:	mvnne	r4, #0
   18480:	mov	r0, r4
   18484:	pop	{r4, r5, r6, sl, fp, pc}
   18488:	mvn	r4, #0
   1848c:	cmp	r0, #0
   18490:	beq	1849c <__assert_fail@plt+0x7240>
   18494:	mov	r0, r4
   18498:	pop	{r4, r5, r6, sl, fp, pc}
   1849c:	bl	11160 <__errno_location@plt>
   184a0:	mov	r1, #0
   184a4:	str	r1, [r0]
   184a8:	mov	r0, r4
   184ac:	pop	{r4, r5, r6, sl, fp, pc}
   184b0:	sub	sp, sp, #8
   184b4:	push	{r4, r5, r6, r7, fp, lr}
   184b8:	add	fp, sp, #16
   184bc:	sub	sp, sp, #8
   184c0:	mov	r5, r0
   184c4:	add	r0, fp, #8
   184c8:	cmp	r1, #11
   184cc:	str	r3, [fp, #12]
   184d0:	str	r2, [fp, #8]
   184d4:	str	r0, [sp, #4]
   184d8:	bhi	18514 <__assert_fail@plt+0x72b8>
   184dc:	mov	r0, #1
   184e0:	movw	r2, #1300	; 0x514
   184e4:	tst	r2, r0, lsl r1
   184e8:	bne	185d4 <__assert_fail@plt+0x7378>
   184ec:	movw	r2, #2570	; 0xa0a
   184f0:	tst	r2, r0, lsl r1
   184f4:	bne	1853c <__assert_fail@plt+0x72e0>
   184f8:	cmp	r1, #0
   184fc:	bne	18514 <__assert_fail@plt+0x72b8>
   18500:	ldr	r0, [sp, #4]
   18504:	add	r1, r0, #4
   18508:	str	r1, [sp, #4]
   1850c:	mov	r1, #0
   18510:	b	185e0 <__assert_fail@plt+0x7384>
   18514:	sub	r0, r1, #1024	; 0x400
   18518:	cmp	r0, #10
   1851c:	bhi	185d4 <__assert_fail@plt+0x7378>
   18520:	mov	r2, #1
   18524:	movw	r3, #645	; 0x285
   18528:	tst	r3, r2, lsl r0
   1852c:	bne	185d4 <__assert_fail@plt+0x7378>
   18530:	movw	r3, #1282	; 0x502
   18534:	tst	r3, r2, lsl r0
   18538:	beq	18548 <__assert_fail@plt+0x72ec>
   1853c:	mov	r0, r5
   18540:	bl	111cc <fcntl64@plt>
   18544:	b	185ec <__assert_fail@plt+0x7390>
   18548:	cmp	r0, #6
   1854c:	bne	185d4 <__assert_fail@plt+0x7378>
   18550:	ldr	r0, [sp, #4]
   18554:	movw	r7, #41776	; 0xa330
   18558:	movt	r7, #2
   1855c:	add	r1, r0, #4
   18560:	str	r1, [sp, #4]
   18564:	ldr	r6, [r0]
   18568:	ldr	r0, [r7]
   1856c:	cmp	r0, #0
   18570:	blt	18610 <__assert_fail@plt+0x73b4>
   18574:	mov	r0, r5
   18578:	movw	r1, #1030	; 0x406
   1857c:	mov	r2, r6
   18580:	bl	111cc <fcntl64@plt>
   18584:	mov	r4, r0
   18588:	cmn	r0, #1
   1858c:	bgt	18604 <__assert_fail@plt+0x73a8>
   18590:	bl	11160 <__errno_location@plt>
   18594:	ldr	r0, [r0]
   18598:	cmp	r0, #22
   1859c:	bne	18604 <__assert_fail@plt+0x73a8>
   185a0:	mov	r0, r5
   185a4:	mov	r1, #0
   185a8:	mov	r2, r6
   185ac:	bl	111cc <fcntl64@plt>
   185b0:	mov	r4, r0
   185b4:	cmp	r0, #0
   185b8:	blt	185f0 <__assert_fail@plt+0x7394>
   185bc:	mvn	r0, #0
   185c0:	str	r0, [r7]
   185c4:	mov	r0, #1
   185c8:	cmp	r0, #0
   185cc:	bne	1863c <__assert_fail@plt+0x73e0>
   185d0:	b	185f0 <__assert_fail@plt+0x7394>
   185d4:	ldr	r0, [sp, #4]
   185d8:	add	r2, r0, #4
   185dc:	str	r2, [sp, #4]
   185e0:	ldr	r2, [r0]
   185e4:	mov	r0, r5
   185e8:	bl	111cc <fcntl64@plt>
   185ec:	mov	r4, r0
   185f0:	mov	r0, r4
   185f4:	sub	sp, fp, #16
   185f8:	pop	{r4, r5, r6, r7, fp, lr}
   185fc:	add	sp, sp, #8
   18600:	bx	lr
   18604:	mov	r0, #1
   18608:	str	r0, [r7]
   1860c:	b	185f0 <__assert_fail@plt+0x7394>
   18610:	mov	r0, r5
   18614:	mov	r1, #0
   18618:	mov	r2, r6
   1861c:	bl	111cc <fcntl64@plt>
   18620:	mov	r4, r0
   18624:	ldr	r0, [r7]
   18628:	add	r0, r0, #1
   1862c:	clz	r0, r0
   18630:	lsr	r0, r0, #5
   18634:	cmp	r0, #0
   18638:	beq	185f0 <__assert_fail@plt+0x7394>
   1863c:	cmp	r4, #0
   18640:	blt	185f0 <__assert_fail@plt+0x7394>
   18644:	mov	r0, r4
   18648:	mov	r1, #1
   1864c:	bl	111cc <fcntl64@plt>
   18650:	cmp	r0, #0
   18654:	blt	18670 <__assert_fail@plt+0x7414>
   18658:	orr	r2, r0, #1
   1865c:	mov	r0, r4
   18660:	mov	r1, #2
   18664:	bl	111cc <fcntl64@plt>
   18668:	cmn	r0, #1
   1866c:	bne	185f0 <__assert_fail@plt+0x7394>
   18670:	bl	11160 <__errno_location@plt>
   18674:	ldr	r6, [r0]
   18678:	mov	r5, r0
   1867c:	mov	r0, r4
   18680:	bl	11250 <close@plt>
   18684:	str	r6, [r5]
   18688:	mvn	r4, #0
   1868c:	b	185f0 <__assert_fail@plt+0x7394>
   18690:	push	{fp, lr}
   18694:	mov	fp, sp
   18698:	mov	r0, #14
   1869c:	bl	11208 <nl_langinfo@plt>
   186a0:	movw	r1, #38658	; 0x9702
   186a4:	cmp	r0, #0
   186a8:	movt	r1, #1
   186ac:	movne	r1, r0
   186b0:	movw	r0, #40380	; 0x9dbc
   186b4:	ldrb	r2, [r1]
   186b8:	movt	r0, #1
   186bc:	cmp	r2, #0
   186c0:	movne	r0, r1
   186c4:	pop	{fp, pc}
   186c8:	push	{r4, r5, r6, r7, fp, lr}
   186cc:	add	fp, sp, #16
   186d0:	sub	sp, sp, #8
   186d4:	add	r5, sp, #4
   186d8:	cmp	r0, #0
   186dc:	mov	r7, r2
   186e0:	mov	r4, r1
   186e4:	movne	r5, r0
   186e8:	mov	r0, r5
   186ec:	bl	110b8 <mbrtowc@plt>
   186f0:	mov	r6, r0
   186f4:	cmp	r7, #0
   186f8:	beq	1871c <__assert_fail@plt+0x74c0>
   186fc:	cmn	r6, #2
   18700:	bcc	1871c <__assert_fail@plt+0x74c0>
   18704:	mov	r0, #0
   18708:	bl	13f8c <__assert_fail@plt+0x2d30>
   1870c:	cmp	r0, #0
   18710:	ldrbeq	r0, [r4]
   18714:	moveq	r6, #1
   18718:	streq	r0, [r5]
   1871c:	mov	r0, r6
   18720:	sub	sp, fp, #16
   18724:	pop	{r4, r5, r6, r7, fp, pc}
   18728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1872c:	add	fp, sp, #28
   18730:	sub	sp, sp, #28
   18734:	mov	r4, r3
   18738:	mov	r6, r2
   1873c:	mov	r5, r1
   18740:	mov	r7, r0
   18744:	cmp	r1, r3
   18748:	bne	18764 <__assert_fail@plt+0x7508>
   1874c:	mov	r0, r7
   18750:	mov	r1, r6
   18754:	mov	r2, r5
   18758:	bl	1104c <memcmp@plt>
   1875c:	cmp	r0, #0
   18760:	beq	1882c <__assert_fail@plt+0x75d0>
   18764:	ldrb	r0, [r6, r4]
   18768:	mov	r9, #0
   1876c:	str	r4, [sp, #24]
   18770:	add	r8, r4, #1
   18774:	str	r5, [sp, #16]
   18778:	add	sl, r5, #1
   1877c:	str	r0, [sp, #8]
   18780:	ldrb	r0, [r7, r5]
   18784:	strb	r9, [r7, r5]
   18788:	strb	r9, [r6, r4]
   1878c:	str	r0, [sp, #4]
   18790:	bl	11160 <__errno_location@plt>
   18794:	mov	r4, r7
   18798:	mov	r5, r0
   1879c:	mov	r7, r6
   187a0:	str	r6, [sp, #20]
   187a4:	str	r4, [sp, #12]
   187a8:	mov	r0, r4
   187ac:	mov	r1, r7
   187b0:	str	r9, [r5]
   187b4:	bl	110d0 <strcoll@plt>
   187b8:	cmp	r0, #0
   187bc:	bne	1880c <__assert_fail@plt+0x75b0>
   187c0:	mov	r0, r4
   187c4:	bl	11148 <strlen@plt>
   187c8:	add	r6, r0, #1
   187cc:	mov	r0, r7
   187d0:	sub	sl, sl, r6
   187d4:	bl	11148 <strlen@plt>
   187d8:	add	r0, r0, #1
   187dc:	cmp	sl, #0
   187e0:	sub	r8, r8, r0
   187e4:	beq	18800 <__assert_fail@plt+0x75a4>
   187e8:	add	r4, r4, r6
   187ec:	add	r7, r7, r0
   187f0:	cmp	r8, #0
   187f4:	bne	187a8 <__assert_fail@plt+0x754c>
   187f8:	mov	r0, #1
   187fc:	b	1880c <__assert_fail@plt+0x75b0>
   18800:	cmp	r8, #0
   18804:	mvnne	r8, #0
   18808:	mov	r0, r8
   1880c:	ldr	r1, [sp, #24]
   18810:	ldr	r2, [sp, #20]
   18814:	ldr	r3, [sp, #16]
   18818:	ldmib	sp, {r5, r6, r7}
   1881c:	strb	r5, [r7, r3]
   18820:	strb	r6, [r2, r1]
   18824:	sub	sp, fp, #28
   18828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1882c:	bl	11160 <__errno_location@plt>
   18830:	mov	r1, r0
   18834:	mov	r0, #0
   18838:	str	r0, [r1]
   1883c:	sub	sp, fp, #28
   18840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18844:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18848:	add	fp, sp, #28
   1884c:	sub	sp, sp, #4
   18850:	mov	sl, r3
   18854:	mov	r5, r2
   18858:	mov	r6, r1
   1885c:	mov	r7, r0
   18860:	cmp	r1, r3
   18864:	bne	18880 <__assert_fail@plt+0x7624>
   18868:	mov	r0, r7
   1886c:	mov	r1, r5
   18870:	mov	r2, r6
   18874:	bl	1104c <memcmp@plt>
   18878:	cmp	r0, #0
   1887c:	beq	188fc <__assert_fail@plt+0x76a0>
   18880:	bl	11160 <__errno_location@plt>
   18884:	mov	r8, r0
   18888:	mov	r9, #0
   1888c:	mov	r0, r7
   18890:	mov	r1, r5
   18894:	str	r9, [r8]
   18898:	bl	110d0 <strcoll@plt>
   1889c:	cmp	r0, #0
   188a0:	bne	188e0 <__assert_fail@plt+0x7684>
   188a4:	mov	r0, r7
   188a8:	bl	11148 <strlen@plt>
   188ac:	add	r4, r0, #1
   188b0:	mov	r0, r5
   188b4:	sub	r6, r6, r4
   188b8:	bl	11148 <strlen@plt>
   188bc:	add	r0, r0, #1
   188c0:	cmp	r6, #0
   188c4:	sub	sl, sl, r0
   188c8:	beq	188e8 <__assert_fail@plt+0x768c>
   188cc:	add	r7, r7, r4
   188d0:	add	r5, r5, r0
   188d4:	cmp	sl, #0
   188d8:	bne	1888c <__assert_fail@plt+0x7630>
   188dc:	mov	r0, #1
   188e0:	sub	sp, fp, #28
   188e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188e8:	cmp	sl, #0
   188ec:	mvnne	sl, #0
   188f0:	mov	r0, sl
   188f4:	sub	sp, fp, #28
   188f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188fc:	bl	11160 <__errno_location@plt>
   18900:	mov	r1, r0
   18904:	mov	r0, #0
   18908:	str	r0, [r1]
   1890c:	sub	sp, fp, #28
   18910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18914:	cmp	r2, #0
   18918:	beq	18948 <__assert_fail@plt+0x76ec>
   1891c:	mvn	r3, #0
   18920:	udiv	r3, r3, r2
   18924:	cmp	r3, r1
   18928:	bcs	18948 <__assert_fail@plt+0x76ec>
   1892c:	push	{fp, lr}
   18930:	mov	fp, sp
   18934:	bl	11160 <__errno_location@plt>
   18938:	mov	r1, #12
   1893c:	str	r1, [r0]
   18940:	mov	r0, #0
   18944:	pop	{fp, pc}
   18948:	mul	r1, r2, r1
   1894c:	b	183d8 <__assert_fail@plt+0x717c>
   18950:	cmp	r3, #0
   18954:	cmpeq	r2, #0
   18958:	bne	18970 <__assert_fail@plt+0x7714>
   1895c:	cmp	r1, #0
   18960:	cmpeq	r0, #0
   18964:	mvnne	r1, #0
   18968:	mvnne	r0, #0
   1896c:	b	1898c <__assert_fail@plt+0x7730>
   18970:	sub	sp, sp, #8
   18974:	push	{sp, lr}
   18978:	bl	1899c <__assert_fail@plt+0x7740>
   1897c:	ldr	lr, [sp, #4]
   18980:	add	sp, sp, #8
   18984:	pop	{r2, r3}
   18988:	bx	lr
   1898c:	push	{r1, lr}
   18990:	mov	r0, #8
   18994:	bl	10fd4 <raise@plt>
   18998:	pop	{r1, pc}
   1899c:	cmp	r1, r3
   189a0:	cmpeq	r0, r2
   189a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189a8:	mov	r4, r0
   189ac:	movcc	r0, #0
   189b0:	mov	r5, r1
   189b4:	ldr	lr, [sp, #36]	; 0x24
   189b8:	movcc	r1, r0
   189bc:	bcc	18ab8 <__assert_fail@plt+0x785c>
   189c0:	cmp	r3, #0
   189c4:	clzeq	ip, r2
   189c8:	clzne	ip, r3
   189cc:	addeq	ip, ip, #32
   189d0:	cmp	r5, #0
   189d4:	clzeq	r1, r4
   189d8:	addeq	r1, r1, #32
   189dc:	clzne	r1, r5
   189e0:	sub	ip, ip, r1
   189e4:	sub	sl, ip, #32
   189e8:	lsl	r9, r3, ip
   189ec:	rsb	fp, ip, #32
   189f0:	orr	r9, r9, r2, lsl sl
   189f4:	orr	r9, r9, r2, lsr fp
   189f8:	lsl	r8, r2, ip
   189fc:	cmp	r5, r9
   18a00:	cmpeq	r4, r8
   18a04:	movcc	r0, #0
   18a08:	movcc	r1, r0
   18a0c:	bcc	18a28 <__assert_fail@plt+0x77cc>
   18a10:	mov	r0, #1
   18a14:	subs	r4, r4, r8
   18a18:	lsl	r1, r0, sl
   18a1c:	orr	r1, r1, r0, lsr fp
   18a20:	lsl	r0, r0, ip
   18a24:	sbc	r5, r5, r9
   18a28:	cmp	ip, #0
   18a2c:	beq	18ab8 <__assert_fail@plt+0x785c>
   18a30:	lsr	r6, r8, #1
   18a34:	orr	r6, r6, r9, lsl #31
   18a38:	lsr	r7, r9, #1
   18a3c:	mov	r2, ip
   18a40:	b	18a64 <__assert_fail@plt+0x7808>
   18a44:	subs	r3, r4, r6
   18a48:	sbc	r8, r5, r7
   18a4c:	adds	r3, r3, r3
   18a50:	adc	r8, r8, r8
   18a54:	adds	r4, r3, #1
   18a58:	adc	r5, r8, #0
   18a5c:	subs	r2, r2, #1
   18a60:	beq	18a80 <__assert_fail@plt+0x7824>
   18a64:	cmp	r5, r7
   18a68:	cmpeq	r4, r6
   18a6c:	bcs	18a44 <__assert_fail@plt+0x77e8>
   18a70:	adds	r4, r4, r4
   18a74:	adc	r5, r5, r5
   18a78:	subs	r2, r2, #1
   18a7c:	bne	18a64 <__assert_fail@plt+0x7808>
   18a80:	lsr	r3, r4, ip
   18a84:	orr	r3, r3, r5, lsl fp
   18a88:	lsr	r2, r5, ip
   18a8c:	orr	r3, r3, r5, lsr sl
   18a90:	adds	r0, r0, r4
   18a94:	mov	r4, r3
   18a98:	lsl	r3, r2, ip
   18a9c:	orr	r3, r3, r4, lsl sl
   18aa0:	lsl	ip, r4, ip
   18aa4:	orr	r3, r3, r4, lsr fp
   18aa8:	adc	r1, r1, r5
   18aac:	subs	r0, r0, ip
   18ab0:	mov	r5, r2
   18ab4:	sbc	r1, r1, r3
   18ab8:	cmp	lr, #0
   18abc:	strdne	r4, [lr]
   18ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ac8:	mov	r7, r0
   18acc:	ldr	r6, [pc, #72]	; 18b1c <__assert_fail@plt+0x78c0>
   18ad0:	ldr	r5, [pc, #72]	; 18b20 <__assert_fail@plt+0x78c4>
   18ad4:	add	r6, pc, r6
   18ad8:	add	r5, pc, r5
   18adc:	sub	r6, r6, r5
   18ae0:	mov	r8, r1
   18ae4:	mov	r9, r2
   18ae8:	bl	10f90 <fdopen@plt-0x20>
   18aec:	asrs	r6, r6, #2
   18af0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18af4:	mov	r4, #0
   18af8:	add	r4, r4, #1
   18afc:	ldr	r3, [r5], #4
   18b00:	mov	r2, r9
   18b04:	mov	r1, r8
   18b08:	mov	r0, r7
   18b0c:	blx	r3
   18b10:	cmp	r6, r4
   18b14:	bne	18af8 <__assert_fail@plt+0x789c>
   18b18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b1c:	andeq	r1, r1, r0, lsr r4
   18b20:	andeq	r1, r1, r8, lsr #8
   18b24:	bx	lr
   18b28:	ldr	r3, [pc, #12]	; 18b3c <__assert_fail@plt+0x78e0>
   18b2c:	mov	r1, #0
   18b30:	add	r3, pc, r3
   18b34:	ldr	r2, [r3]
   18b38:	b	1116c <__cxa_atexit@plt>
   18b3c:	andeq	r1, r1, r4, asr #11

Disassembly of section .fini:

00018b40 <.fini>:
   18b40:	push	{r3, lr}
   18b44:	pop	{r3, pc}
