
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b3c <.init>:
   10b3c:	push	{r3, lr}
   10b40:	bl	10d64 <__assert_fail@plt+0x4c>
   10b44:	pop	{r3, pc}

Disassembly of section .plt:

00010b48 <calloc@plt-0x14>:
   10b48:	push	{lr}		; (str lr, [sp, #-4]!)
   10b4c:	ldr	lr, [pc, #4]	; 10b58 <calloc@plt-0x4>
   10b50:	add	lr, pc, lr
   10b54:	ldr	pc, [lr, #8]!
   10b58:	andeq	r6, r1, r8, lsr #9

00010b5c <calloc@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #90112	; 0x16000
   10b64:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b68 <strcmp@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #90112	; 0x16000
   10b70:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b74 <printf@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #90112	; 0x16000
   10b7c:	ldr	pc, [ip, #1176]!	; 0x498

00010b80 <fopen@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #90112	; 0x16000
   10b88:	ldr	pc, [ip, #1168]!	; 0x490

00010b8c <free@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #90112	; 0x16000
   10b94:	ldr	pc, [ip, #1160]!	; 0x488

00010b98 <utf8proc_get_property@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #90112	; 0x16000
   10ba0:	ldr	pc, [ip, #1152]!	; 0x480

00010ba4 <fgets@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #90112	; 0x16000
   10bac:	ldr	pc, [ip, #1144]!	; 0x478

00010bb0 <utf8proc_encode_char@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #90112	; 0x16000
   10bb8:	ldr	pc, [ip, #1136]!	; 0x470

00010bbc <strdup@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #90112	; 0x16000
   10bc4:	ldr	pc, [ip, #1128]!	; 0x468

00010bc8 <rewind@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #90112	; 0x16000
   10bd0:	ldr	pc, [ip, #1120]!	; 0x460

00010bd4 <unlink@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #90112	; 0x16000
   10bdc:	ldr	pc, [ip, #1112]!	; 0x458

00010be0 <utf8proc_tolower@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #90112	; 0x16000
   10be8:	ldr	pc, [ip, #1104]!	; 0x450

00010bec <__xstat@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #90112	; 0x16000
   10bf4:	ldr	pc, [ip, #1096]!	; 0x448

00010bf8 <fwrite@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #90112	; 0x16000
   10c00:	ldr	pc, [ip, #1088]!	; 0x440

00010c04 <fread@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #90112	; 0x16000
   10c0c:	ldr	pc, [ip, #1080]!	; 0x438

00010c10 <utf8proc_iterate@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #90112	; 0x16000
   10c18:	ldr	pc, [ip, #1072]!	; 0x430

00010c1c <puts@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #90112	; 0x16000
   10c24:	ldr	pc, [ip, #1064]!	; 0x428

00010c28 <malloc@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #90112	; 0x16000
   10c30:	ldr	pc, [ip, #1056]!	; 0x420

00010c34 <__libc_start_main@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #1048]!	; 0x418

00010c40 <__sysv_signal@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #1040]!	; 0x410

00010c4c <__gmon_start__@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #1032]!	; 0x408

00010c58 <getpid@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #1024]!	; 0x400

00010c64 <exit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c70 <utf8proc_category@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c7c <strlen@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c88 <fprintf@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #992]!	; 0x3e0

00010c94 <__isoc99_sscanf@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #984]!	; 0x3d8

00010ca0 <fclose@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cac <utf8proc_NFC@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #968]!	; 0x3c8

00010cb8 <fputc@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cc4 <sprintf@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #952]!	; 0x3b8

00010cd0 <atoi@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #944]!	; 0x3b0

00010cdc <utf8proc_errmsg@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #936]!	; 0x3a8

00010ce8 <fputs@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #928]!	; 0x3a0

00010cf4 <strncmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #920]!	; 0x398

00010d00 <abort@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #912]!	; 0x390

00010d0c <getc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #904]!	; 0x388

00010d18 <__assert_fail@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #896]!	; 0x380

Disassembly of section .text:

00010d28 <error@@Base-0x1a00>:
   10d28:	mov	fp, #0
   10d2c:	mov	lr, #0
   10d30:	pop	{r1}		; (ldr r1, [sp], #4)
   10d34:	mov	r2, sp
   10d38:	push	{r2}		; (str r2, [sp, #-4]!)
   10d3c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d40:	ldr	ip, [pc, #16]	; 10d58 <__assert_fail@plt+0x40>
   10d44:	push	{ip}		; (str ip, [sp, #-4]!)
   10d48:	ldr	r0, [pc, #12]	; 10d5c <__assert_fail@plt+0x44>
   10d4c:	ldr	r3, [pc, #12]	; 10d60 <__assert_fail@plt+0x48>
   10d50:	bl	10c34 <__libc_start_main@plt>
   10d54:	bl	10d00 <abort@plt>
   10d58:	andeq	r3, r1, r4, lsr r1
   10d5c:			; <UNDEFINED> instruction: 0x00010fbc
   10d60:	ldrdeq	r3, [r1], -r4
   10d64:	ldr	r3, [pc, #20]	; 10d80 <__assert_fail@plt+0x68>
   10d68:	ldr	r2, [pc, #20]	; 10d84 <__assert_fail@plt+0x6c>
   10d6c:	add	r3, pc, r3
   10d70:	ldr	r2, [r3, r2]
   10d74:	cmp	r2, #0
   10d78:	bxeq	lr
   10d7c:	b	10c4c <__gmon_start__@plt>
   10d80:	andeq	r6, r1, ip, lsl #5
   10d84:	andeq	r0, r0, r4, lsr #1
   10d88:	ldr	r0, [pc, #24]	; 10da8 <__assert_fail@plt+0x90>
   10d8c:	ldr	r3, [pc, #24]	; 10dac <__assert_fail@plt+0x94>
   10d90:	cmp	r3, r0
   10d94:	bxeq	lr
   10d98:	ldr	r3, [pc, #16]	; 10db0 <__assert_fail@plt+0x98>
   10d9c:	cmp	r3, #0
   10da0:	bxeq	lr
   10da4:	bx	r3
   10da8:	andeq	r7, r2, r4, asr #1
   10dac:	andeq	r7, r2, r4, asr #1
   10db0:	andeq	r0, r0, r0
   10db4:	ldr	r0, [pc, #36]	; 10de0 <__assert_fail@plt+0xc8>
   10db8:	ldr	r1, [pc, #36]	; 10de4 <__assert_fail@plt+0xcc>
   10dbc:	sub	r1, r1, r0
   10dc0:	asr	r1, r1, #2
   10dc4:	add	r1, r1, r1, lsr #31
   10dc8:	asrs	r1, r1, #1
   10dcc:	bxeq	lr
   10dd0:	ldr	r3, [pc, #16]	; 10de8 <__assert_fail@plt+0xd0>
   10dd4:	cmp	r3, #0
   10dd8:	bxeq	lr
   10ddc:	bx	r3
   10de0:	andeq	r7, r2, r4, asr #1
   10de4:	andeq	r7, r2, r4, asr #1
   10de8:	andeq	r0, r0, r0
   10dec:	push	{r4, lr}
   10df0:	ldr	r4, [pc, #24]	; 10e10 <__assert_fail@plt+0xf8>
   10df4:	ldrb	r3, [r4]
   10df8:	cmp	r3, #0
   10dfc:	popne	{r4, pc}
   10e00:	bl	10d88 <__assert_fail@plt+0x70>
   10e04:	mov	r3, #1
   10e08:	strb	r3, [r4]
   10e0c:	pop	{r4, pc}
   10e10:	ldrdeq	r7, [r2], -r8
   10e14:	b	10db4 <__assert_fail@plt+0x9c>
   10e18:	push	{r4, r5, fp, lr}
   10e1c:	add	fp, sp, #8
   10e20:	mov	r1, r0
   10e24:	movw	r4, #29004	; 0x714c
   10e28:	movt	r4, #2
   10e2c:	movw	r2, #28848	; 0x70b0
   10e30:	movt	r2, #2
   10e34:	mov	r0, r4
   10e38:	bl	12a14 <error@@Base+0x2ec>
   10e3c:	movw	r5, #29020	; 0x715c
   10e40:	movt	r5, #2
   10e44:	mov	r0, r5
   10e48:	mov	r1, r4
   10e4c:	bl	11db4 <__assert_fail@plt+0x109c>
   10e50:	ldr	r5, [r5]
   10e54:	cmp	r5, #0
   10e58:	beq	10e84 <__assert_fail@plt+0x16c>
   10e5c:	movw	r4, #29036	; 0x716c
   10e60:	movt	r4, #2
   10e64:	ldr	r1, [r5, #8]
   10e68:	mov	r0, r4
   10e6c:	mov	r2, #1
   10e70:	mov	r3, #0
   10e74:	bl	1130c <__assert_fail@plt+0x5f4>
   10e78:	ldr	r5, [r5, #4]
   10e7c:	cmp	r5, #0
   10e80:	bne	10e64 <__assert_fail@plt+0x14c>
   10e84:	movw	r0, #29004	; 0x714c
   10e88:	movt	r0, #2
   10e8c:	movw	r1, #2956	; 0xb8c
   10e90:	movt	r1, #1
   10e94:	bl	11188 <__assert_fail@plt+0x470>
   10e98:	movw	r0, #29020	; 0x715c
   10e9c:	movt	r0, #2
   10ea0:	movw	r1, #8468	; 0x2114
   10ea4:	movt	r1, #1
   10ea8:	pop	{r4, r5, fp, lr}
   10eac:	b	11188 <__assert_fail@plt+0x470>
   10eb0:	ldr	r1, [r1, #8]
   10eb4:	ldr	r0, [r0, #8]
   10eb8:	b	123a8 <__assert_fail@plt+0x1690>
   10ebc:	ldr	r2, [r1, #12]
   10ec0:	ldr	r3, [r0, #12]
   10ec4:	cmp	r2, r3
   10ec8:	subne	r0, r2, r3
   10ecc:	bxne	lr
   10ed0:	b	10eb0 <__assert_fail@plt+0x198>
   10ed4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10ed8:	add	fp, sp, #24
   10edc:	movw	r0, #12713	; 0x31a9
   10ee0:	movt	r0, #1
   10ee4:	bl	10c1c <puts@plt>
   10ee8:	movw	r0, #8052	; 0x1f74
   10eec:	movw	r8, #29036	; 0x716c
   10ef0:	movt	r8, #2
   10ef4:	ldr	r0, [r8, r0]
   10ef8:	mov	r4, #0
   10efc:	cmp	r0, #1
   10f00:	blt	10f4c <__assert_fail@plt+0x234>
   10f04:	movw	r9, #8048	; 0x1f70
   10f08:	movw	r5, #12628	; 0x3154
   10f0c:	movt	r5, #1
   10f10:	mov	r6, #0
   10f14:	mov	r7, r8
   10f18:	ldr	r0, [r7, r9]!
   10f1c:	ldr	r0, [r0, r6, lsl #2]
   10f20:	ldr	r2, [r0, #8]
   10f24:	ldr	r1, [r0, #12]
   10f28:	mov	r0, r5
   10f2c:	bl	10b74 <printf@plt>
   10f30:	ldm	r7, {r0, r1}
   10f34:	ldr	r0, [r0, r6, lsl #2]
   10f38:	ldr	r0, [r0, #12]
   10f3c:	add	r4, r0, r4
   10f40:	add	r6, r6, #1
   10f44:	cmp	r6, r1
   10f48:	blt	10f14 <__assert_fail@plt+0x1fc>
   10f4c:	movw	r0, #12639	; 0x315f
   10f50:	movt	r0, #1
   10f54:	mov	r1, r4
   10f58:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f5c:	b	10b74 <printf@plt>
   10f60:	push	{r4, sl, fp, lr}
   10f64:	add	fp, sp, #8
   10f68:	movw	r4, #29036	; 0x716c
   10f6c:	movt	r4, #2
   10f70:	mov	r0, r4
   10f74:	bl	11cf0 <__assert_fail@plt+0xfd8>
   10f78:	movw	r0, #8052	; 0x1f74
   10f7c:	ldr	r0, [r4, r0]!
   10f80:	ldr	r1, [r4, #-4]
   10f84:	movw	r2, #3760	; 0xeb0
   10f88:	movt	r2, #1
   10f8c:	bl	111c8 <__assert_fail@plt+0x4b0>
   10f90:	bl	10ed4 <__assert_fail@plt+0x1bc>
   10f94:	movw	r0, #26291	; 0x66b3
   10f98:	movt	r0, #1
   10f9c:	bl	10c1c <puts@plt>
   10fa0:	ldr	r1, [r4, #-4]
   10fa4:	ldr	r0, [r4]
   10fa8:	movw	r2, #3772	; 0xebc
   10fac:	movt	r2, #1
   10fb0:	bl	111c8 <__assert_fail@plt+0x4b0>
   10fb4:	pop	{r4, sl, fp, lr}
   10fb8:	b	10ed4 <__assert_fail@plt+0x1bc>
   10fbc:	push	{fp, lr}
   10fc0:	mov	fp, sp
   10fc4:	sub	sp, sp, #8
   10fc8:	mov	r4, r1
   10fcc:	str	r0, [sp, #4]
   10fd0:	add	r0, sp, #4
   10fd4:	movw	r2, #12653	; 0x316d
   10fd8:	movt	r2, #1
   10fdc:	mov	r3, #0
   10fe0:	bl	125a8 <__assert_fail@plt+0x1890>
   10fe4:	ldr	r0, [sp, #4]
   10fe8:	cmp	r0, #0
   10fec:	beq	11020 <__assert_fail@plt+0x308>
   10ff0:	ldr	r0, [sp, #4]
   10ff4:	cmp	r0, #1
   10ff8:	blt	11018 <__assert_fail@plt+0x300>
   10ffc:	mov	r5, #0
   11000:	ldr	r0, [r4, r5, lsl #2]
   11004:	bl	10e18 <__assert_fail@plt+0x100>
   11008:	add	r5, r5, #1
   1100c:	ldr	r0, [sp, #4]
   11010:	cmp	r5, r0
   11014:	blt	11000 <__assert_fail@plt+0x2e8>
   11018:	bl	10f60 <__assert_fail@plt+0x248>
   1101c:	bl	126e8 <__assert_fail@plt+0x19d0>
   11020:	movw	r0, #12689	; 0x3191
   11024:	movt	r0, #1
   11028:	bl	12728 <error@@Base>
   1102c:	vmov.i32	q8, #0	; 0x00000000
   11030:	vst1.32	{d16-d17}, [r0]
   11034:	bx	lr
   11038:	mov	r2, r1
   1103c:	ldr	r3, [r0]
   11040:	mov	r1, #0
   11044:	b	11048 <__assert_fail@plt+0x330>
   11048:	push	{r4, sl, fp, lr}
   1104c:	add	fp, sp, #8
   11050:	mov	r4, r0
   11054:	stm	r2, {r1, r3}
   11058:	cmp	r1, #0
   1105c:	addne	r0, r1, #4
   11060:	str	r2, [r0]
   11064:	cmp	r3, #0
   11068:	addeq	r3, r4, #4
   1106c:	str	r2, [r3]
   11070:	mov	r0, r4
   11074:	bl	11104 <__assert_fail@plt+0x3ec>
   11078:	ldr	r0, [r4, #12]
   1107c:	add	r0, r0, #1
   11080:	str	r0, [r4, #12]
   11084:	pop	{r4, sl, fp, pc}
   11088:	mov	r2, r1
   1108c:	ldr	r1, [r0, #4]
   11090:	mov	r3, #0
   11094:	b	11048 <__assert_fail@plt+0x330>
   11098:	mov	r3, r2
   1109c:	mov	r2, r1
   110a0:	ldr	r1, [r3]
   110a4:	b	11048 <__assert_fail@plt+0x330>
   110a8:	ldr	r3, [r1, #4]
   110ac:	b	11048 <__assert_fail@plt+0x330>
   110b0:	push	{r4, sl, fp, lr}
   110b4:	add	fp, sp, #8
   110b8:	mov	r4, r0
   110bc:	ldm	r1, {r0, r2}
   110c0:	cmp	r0, #0
   110c4:	mov	r3, r4
   110c8:	addne	r3, r0, #4
   110cc:	str	r2, [r3]
   110d0:	ldm	r1, {r0, r2}
   110d4:	cmp	r2, #0
   110d8:	addeq	r2, r4, #4
   110dc:	str	r0, [r2]
   110e0:	mov	r0, #0
   110e4:	str	r0, [r1]
   110e8:	str	r0, [r1, #4]
   110ec:	mov	r0, r4
   110f0:	bl	11104 <__assert_fail@plt+0x3ec>
   110f4:	ldr	r0, [r4, #12]
   110f8:	sub	r0, r0, #1
   110fc:	str	r0, [r4, #12]
   11100:	pop	{r4, sl, fp, pc}
   11104:	push	{r4, sl, fp, lr}
   11108:	add	fp, sp, #8
   1110c:	mov	r4, r0
   11110:	ldr	r0, [r0, #8]
   11114:	cmp	r0, #0
   11118:	popeq	{r4, sl, fp, pc}
   1111c:	bl	10b8c <free@plt>
   11120:	mov	r0, #0
   11124:	str	r0, [r4, #8]
   11128:	pop	{r4, sl, fp, pc}
   1112c:	push	{r4, sl, fp, lr}
   11130:	add	fp, sp, #8
   11134:	mov	r4, r0
   11138:	ldr	r0, [r0, #8]
   1113c:	cmp	r0, #0
   11140:	bne	11184 <__assert_fail@plt+0x46c>
   11144:	ldr	r0, [r4, #12]
   11148:	cmp	r0, #0
   1114c:	beq	11184 <__assert_fail@plt+0x46c>
   11150:	mov	r1, #4
   11154:	bl	12388 <__assert_fail@plt+0x1670>
   11158:	str	r0, [r4, #8]
   1115c:	ldr	r0, [r4]
   11160:	cmp	r0, #0
   11164:	popeq	{r4, sl, fp, pc}
   11168:	mov	r1, #0
   1116c:	ldr	r2, [r4, #8]
   11170:	str	r0, [r2, r1]
   11174:	add	r1, r1, #4
   11178:	ldr	r0, [r0, #4]
   1117c:	cmp	r0, #0
   11180:	bne	1116c <__assert_fail@plt+0x454>
   11184:	pop	{r4, sl, fp, pc}
   11188:	push	{r4, r5, r6, sl, fp, lr}
   1118c:	add	fp, sp, #16
   11190:	ldr	r6, [r0]
   11194:	cmp	r6, #0
   11198:	popeq	{r4, r5, r6, sl, fp, pc}
   1119c:	mov	r4, r1
   111a0:	mov	r5, r0
   111a4:	mov	r0, r5
   111a8:	mov	r1, r6
   111ac:	bl	110b0 <__assert_fail@plt+0x398>
   111b0:	mov	r0, r6
   111b4:	blx	r4
   111b8:	ldr	r6, [r5]
   111bc:	cmp	r6, #0
   111c0:	bne	111a4 <__assert_fail@plt+0x48c>
   111c4:	pop	{r4, r5, r6, sl, fp, pc}
   111c8:	cmp	r0, #2
   111cc:	bxlt	lr
   111d0:	movw	r3, #28896	; 0x70e0
   111d4:	movt	r3, #2
   111d8:	str	r2, [r3]
   111dc:	movw	r2, #28892	; 0x70dc
   111e0:	movt	r2, #2
   111e4:	str	r1, [r2]
   111e8:	sub	r1, r0, #1
   111ec:	mov	r0, #0
   111f0:	b	111f4 <__assert_fail@plt+0x4dc>
   111f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	add	fp, sp, #28
   111fc:	sub	sp, sp, #4
   11200:	mov	r8, r1
   11204:	mov	r9, r0
   11208:	movw	r7, #28892	; 0x70dc
   1120c:	movt	r7, #2
   11210:	movw	sl, #28896	; 0x70e0
   11214:	movt	sl, #2
   11218:	b	11244 <__assert_fail@plt+0x52c>
   1121c:	ldr	r0, [r7]
   11220:	str	r6, [r0, r4, lsl #2]
   11224:	sub	r1, r4, #1
   11228:	cmp	r1, r9
   1122c:	movgt	r0, r9
   11230:	blgt	111f4 <__assert_fail@plt+0x4dc>
   11234:	add	r9, r5, #1
   11238:	cmp	r9, r8
   1123c:	subge	sp, fp, #28
   11240:	popge	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11244:	ldr	r0, [r7]
   11248:	ldr	r6, [r0, r9, lsl #2]
   1124c:	cmp	r9, r8
   11250:	mov	r4, r8
   11254:	mov	r5, r9
   11258:	bge	1121c <__assert_fail@plt+0x504>
   1125c:	mov	r5, r9
   11260:	mov	r4, r8
   11264:	cmp	r5, r4
   11268:	blt	1127c <__assert_fail@plt+0x564>
   1126c:	b	11298 <__assert_fail@plt+0x580>
   11270:	sub	r4, r4, #1
   11274:	cmp	r5, r4
   11278:	bge	11298 <__assert_fail@plt+0x580>
   1127c:	ldr	r0, [r7]
   11280:	ldr	r1, [r0, r4, lsl #2]
   11284:	ldr	r2, [sl]
   11288:	mov	r0, r6
   1128c:	blx	r2
   11290:	cmn	r0, #1
   11294:	ble	11270 <__assert_fail@plt+0x558>
   11298:	cmp	r5, r4
   1129c:	beq	112b0 <__assert_fail@plt+0x598>
   112a0:	ldr	r0, [r7]
   112a4:	ldr	r1, [r0, r4, lsl #2]
   112a8:	str	r1, [r0, r5, lsl #2]
   112ac:	add	r5, r5, #1
   112b0:	cmp	r5, r4
   112b4:	bge	112d4 <__assert_fail@plt+0x5bc>
   112b8:	ldr	r0, [r7]
   112bc:	ldr	r1, [r0, r5, lsl #2]
   112c0:	ldr	r2, [sl]
   112c4:	mov	r0, r6
   112c8:	blx	r2
   112cc:	cmp	r0, #1
   112d0:	bge	112ac <__assert_fail@plt+0x594>
   112d4:	cmp	r5, r4
   112d8:	ldrne	r0, [r7]
   112dc:	ldrne	r1, [r0, r5, lsl #2]
   112e0:	strne	r1, [r0, r4, lsl #2]
   112e4:	subne	r4, r4, #1
   112e8:	cmp	r5, r4
   112ec:	blt	11274 <__assert_fail@plt+0x55c>
   112f0:	b	1121c <__assert_fail@plt+0x504>
   112f4:	andeq	r0, r0, r0
   112f8:	ldm	r0, {r3, ip}
   112fc:	add	r1, r3, r1
   11300:	add	r2, ip, r2
   11304:	stm	r0, {r1, r2}
   11308:	bx	lr
   1130c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11310:	add	fp, sp, #24
   11314:	mov	r8, r3
   11318:	mov	r5, r2
   1131c:	mov	r7, r1
   11320:	mov	r6, r0
   11324:	bl	11b9c <__assert_fail@plt+0xe84>
   11328:	mov	r4, r0
   1132c:	cmp	r0, #0
   11330:	bne	1135c <__assert_fail@plt+0x644>
   11334:	mov	r0, #1
   11338:	mov	r1, #20
   1133c:	bl	12388 <__assert_fail@plt+0x1670>
   11340:	mov	r4, r0
   11344:	mov	r0, r7
   11348:	bl	10bbc <strdup@plt>
   1134c:	str	r0, [r4, #8]
   11350:	mov	r0, r6
   11354:	mov	r1, r4
   11358:	bl	11c44 <__assert_fail@plt+0xf2c>
   1135c:	add	r0, r4, #12
   11360:	mov	r1, r5
   11364:	mov	r2, r8
   11368:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1136c:	b	112f8 <__assert_fail@plt+0x5e0>
   11370:	push	{r4, r5, r6, r7, fp, lr}
   11374:	add	fp, sp, #16
   11378:	sub	sp, sp, #8
   1137c:	mov	r6, r1
   11380:	mov	r5, r0
   11384:	movw	r1, #26577	; 0x67d1
   11388:	movt	r1, #1
   1138c:	mov	r0, r6
   11390:	bl	12424 <__assert_fail@plt+0x170c>
   11394:	mov	r4, r0
   11398:	bl	114e4 <__assert_fail@plt+0x7cc>
   1139c:	cmp	r0, #0
   113a0:	beq	114c8 <__assert_fail@plt+0x7b0>
   113a4:	movw	r0, #28900	; 0x70e4
   113a8:	movt	r0, #2
   113ac:	movw	r1, #12722	; 0x31b2
   113b0:	movt	r1, #1
   113b4:	mov	r2, #45	; 0x2d
   113b8:	bl	10cf4 <strncmp@plt>
   113bc:	cmp	r0, #0
   113c0:	bne	114c8 <__assert_fail@plt+0x7b0>
   113c4:	mov	r0, r4
   113c8:	bl	114e4 <__assert_fail@plt+0x7cc>
   113cc:	cmp	r0, #0
   113d0:	beq	114c8 <__assert_fail@plt+0x7b0>
   113d4:	movw	r0, #28900	; 0x70e4
   113d8:	movt	r0, #2
   113dc:	movw	r1, #26507	; 0x678b
   113e0:	movt	r1, #1
   113e4:	bl	10b68 <strcmp@plt>
   113e8:	cmp	r0, #0
   113ec:	bne	114c8 <__assert_fail@plt+0x7b0>
   113f0:	add	r1, sp, #4
   113f4:	mov	r0, r4
   113f8:	bl	1150c <__assert_fail@plt+0x7f4>
   113fc:	cmp	r0, #0
   11400:	beq	114c8 <__assert_fail@plt+0x7b0>
   11404:	mov	r1, sp
   11408:	mov	r0, r4
   1140c:	bl	1150c <__assert_fail@plt+0x7f4>
   11410:	cmp	r0, #0
   11414:	beq	114c8 <__assert_fail@plt+0x7b0>
   11418:	mov	r0, r4
   1141c:	bl	114e4 <__assert_fail@plt+0x7cc>
   11420:	cmp	r0, #0
   11424:	beq	114c8 <__assert_fail@plt+0x7b0>
   11428:	mov	r0, r4
   1142c:	bl	114e4 <__assert_fail@plt+0x7cc>
   11430:	cmp	r0, #0
   11434:	beq	114c8 <__assert_fail@plt+0x7b0>
   11438:	ldr	r2, [sp]
   1143c:	ldr	r1, [sp, #4]
   11440:	mov	r0, r5
   11444:	bl	112f8 <__assert_fail@plt+0x5e0>
   11448:	add	r1, r5, #8
   1144c:	mov	r0, r4
   11450:	bl	11550 <__assert_fail@plt+0x838>
   11454:	mov	r7, r0
   11458:	add	r1, r5, #416	; 0x1a0
   1145c:	mov	r0, r4
   11460:	bl	11550 <__assert_fail@plt+0x838>
   11464:	mov	r6, r0
   11468:	add	r1, r5, #824	; 0x338
   1146c:	mov	r0, r4
   11470:	bl	11550 <__assert_fail@plt+0x838>
   11474:	ldr	r0, [sp, #4]
   11478:	cmp	r0, #1
   1147c:	blt	114b8 <__assert_fail@plt+0x7a0>
   11480:	add	r1, r5, #920	; 0x398
   11484:	mov	r0, r4
   11488:	bl	11550 <__assert_fail@plt+0x838>
   1148c:	cmp	r7, #1
   11490:	blt	114a0 <__assert_fail@plt+0x788>
   11494:	add	r1, r5, #992	; 0x3e0
   11498:	mov	r0, r4
   1149c:	bl	1161c <__assert_fail@plt+0x904>
   114a0:	cmp	r6, #1
   114a4:	blt	114b8 <__assert_fail@plt+0x7a0>
   114a8:	movw	r0, #9048	; 0x2358
   114ac:	add	r1, r5, r0
   114b0:	mov	r0, r4
   114b4:	bl	1161c <__assert_fail@plt+0x904>
   114b8:	mov	r0, r4
   114bc:	bl	1249c <__assert_fail@plt+0x1784>
   114c0:	sub	sp, fp, #16
   114c4:	pop	{r4, r5, r6, r7, fp, pc}
   114c8:	movw	r1, #12788	; 0x31f4
   114cc:	movt	r1, #1
   114d0:	cmp	r6, #0
   114d4:	movne	r1, r6
   114d8:	movw	r0, #12770	; 0x31e2
   114dc:	movt	r0, #1
   114e0:	bl	12768 <error@@Base+0x40>
   114e4:	push	{fp, lr}
   114e8:	mov	fp, sp
   114ec:	mov	r2, r0
   114f0:	movw	r0, #28900	; 0x70e4
   114f4:	movt	r0, #2
   114f8:	mov	r1, #99	; 0x63
   114fc:	bl	10ba4 <fgets@plt>
   11500:	cmp	r0, #0
   11504:	movwne	r0, #1
   11508:	pop	{fp, pc}
   1150c:	push	{r4, sl, fp, lr}
   11510:	add	fp, sp, #8
   11514:	mov	r4, r1
   11518:	bl	114e4 <__assert_fail@plt+0x7cc>
   1151c:	cmp	r0, #0
   11520:	moveq	r0, #0
   11524:	popeq	{r4, sl, fp, pc}
   11528:	movw	r0, #28900	; 0x70e4
   1152c:	movt	r0, #2
   11530:	movw	r1, #12895	; 0x325f
   11534:	movt	r1, #1
   11538:	mov	r2, r4
   1153c:	bl	10c94 <__isoc99_sscanf@plt>
   11540:	sub	r0, r0, #1
   11544:	clz	r0, r0
   11548:	lsr	r0, r0, #5
   1154c:	pop	{r4, sl, fp, pc}
   11550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11554:	add	fp, sp, #28
   11558:	sub	sp, sp, #12
   1155c:	mov	r4, r1
   11560:	mov	r6, r0
   11564:	bl	114e4 <__assert_fail@plt+0x7cc>
   11568:	mov	r5, #0
   1156c:	cmp	r0, #0
   11570:	beq	11610 <__assert_fail@plt+0x8f8>
   11574:	mov	r0, r6
   11578:	bl	114e4 <__assert_fail@plt+0x7cc>
   1157c:	cmp	r0, #0
   11580:	beq	11610 <__assert_fail@plt+0x8f8>
   11584:	add	r1, sp, #8
   11588:	add	r2, sp, #4
   1158c:	mov	r0, r6
   11590:	bl	11a94 <__assert_fail@plt+0xd7c>
   11594:	cmp	r0, #0
   11598:	beq	11610 <__assert_fail@plt+0x8f8>
   1159c:	mov	r5, #0
   115a0:	movw	r0, #28900	; 0x70e4
   115a4:	movt	r0, #2
   115a8:	add	r7, r0, #29
   115ac:	add	r9, sp, #8
   115b0:	add	sl, sp, #4
   115b4:	mov	r0, r7
   115b8:	bl	10cd0 <atoi@plt>
   115bc:	mov	r8, r0
   115c0:	cmp	r0, #0
   115c4:	bne	115e8 <__assert_fail@plt+0x8d0>
   115c8:	mov	r0, r7
   115cc:	movw	r1, #12645	; 0x3165
   115d0:	movt	r1, #1
   115d4:	bl	10b68 <strcmp@plt>
   115d8:	cmp	r0, #0
   115dc:	movne	r8, #11
   115e0:	ldr	r0, [sp, #8]
   115e4:	moveq	r5, r0
   115e8:	add	r0, r4, r8, lsl #3
   115ec:	ldr	r2, [sp, #4]
   115f0:	ldr	r1, [sp, #8]
   115f4:	bl	112f8 <__assert_fail@plt+0x5e0>
   115f8:	mov	r0, r6
   115fc:	mov	r1, r9
   11600:	mov	r2, sl
   11604:	bl	11a94 <__assert_fail@plt+0xd7c>
   11608:	cmp	r0, #0
   1160c:	bne	115b4 <__assert_fail@plt+0x89c>
   11610:	mov	r0, r5
   11614:	sub	sp, fp, #28
   11618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1161c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11620:	add	fp, sp, #28
   11624:	sub	sp, sp, #12
   11628:	mov	r4, r1
   1162c:	mov	r5, r0
   11630:	bl	114e4 <__assert_fail@plt+0x7cc>
   11634:	cmp	r0, #0
   11638:	beq	116b8 <__assert_fail@plt+0x9a0>
   1163c:	mov	r0, r5
   11640:	bl	114e4 <__assert_fail@plt+0x7cc>
   11644:	cmp	r0, #0
   11648:	beq	116b8 <__assert_fail@plt+0x9a0>
   1164c:	add	r1, sp, #8
   11650:	add	r2, sp, #4
   11654:	mov	r0, r5
   11658:	bl	11a94 <__assert_fail@plt+0xd7c>
   1165c:	cmp	r0, #0
   11660:	beq	116b8 <__assert_fail@plt+0x9a0>
   11664:	movw	r6, #28900	; 0x70e4
   11668:	movt	r6, #2
   1166c:	mov	sl, #0
   11670:	add	r7, r6, #29
   11674:	add	r8, sp, #8
   11678:	add	r9, sp, #4
   1167c:	mov	r0, r6
   11680:	bl	10c7c <strlen@plt>
   11684:	add	r0, r6, r0
   11688:	strb	sl, [r0, #-1]
   1168c:	ldr	r2, [sp, #8]
   11690:	ldr	r3, [sp, #4]
   11694:	mov	r0, r4
   11698:	mov	r1, r7
   1169c:	bl	1130c <__assert_fail@plt+0x5f4>
   116a0:	mov	r0, r5
   116a4:	mov	r1, r8
   116a8:	mov	r2, r9
   116ac:	bl	11a94 <__assert_fail@plt+0xd7c>
   116b0:	cmp	r0, #0
   116b4:	bne	1167c <__assert_fail@plt+0x964>
   116b8:	sub	sp, fp, #28
   116bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   116c4:	add	fp, sp, #24
   116c8:	sub	sp, sp, #8
   116cc:	mov	r2, r1
   116d0:	mov	r5, r0
   116d4:	movw	r1, #12794	; 0x31fa
   116d8:	movt	r1, #1
   116dc:	mov	r0, r2
   116e0:	bl	12424 <__assert_fail@plt+0x170c>
   116e4:	mov	r4, r0
   116e8:	movw	r1, #12796	; 0x31fc
   116ec:	movt	r1, #1
   116f0:	movw	r2, #12722	; 0x31b2
   116f4:	movt	r2, #1
   116f8:	movw	r3, #26507	; 0x678b
   116fc:	movt	r3, #1
   11700:	bl	10c88 <fprintf@plt>
   11704:	ldr	r2, [r5]
   11708:	movw	r1, #12801	; 0x3201
   1170c:	movt	r1, #1
   11710:	mov	r0, r4
   11714:	bl	10c88 <fprintf@plt>
   11718:	ldr	r2, [r5, #4]
   1171c:	movw	r1, #12815	; 0x320f
   11720:	movt	r1, #1
   11724:	mov	r0, r4
   11728:	bl	10c88 <fprintf@plt>
   1172c:	mov	r0, r4
   11730:	mov	r1, r5
   11734:	bl	11840 <__assert_fail@plt+0xb28>
   11738:	movw	r0, #12837	; 0x3225
   1173c:	movt	r0, #1
   11740:	mov	r7, #1
   11744:	mov	r1, #12
   11748:	mov	r2, #1
   1174c:	mov	r3, r4
   11750:	bl	10bf8 <fwrite@plt>
   11754:	mov	r8, #0
   11758:	str	r8, [sp]
   1175c:	str	r7, [sp, #4]
   11760:	add	r1, r5, #8
   11764:	movw	r3, #12850	; 0x3232
   11768:	movt	r3, #1
   1176c:	mov	r0, r4
   11770:	mov	r2, #50	; 0x32
   11774:	bl	118a8 <__assert_fail@plt+0xb90>
   11778:	str	r8, [sp]
   1177c:	str	r7, [sp, #4]
   11780:	add	r6, r5, #416	; 0x1a0
   11784:	movw	r3, #12869	; 0x3245
   11788:	movt	r3, #1
   1178c:	mov	r0, r4
   11790:	mov	r1, r6
   11794:	mov	r2, #50	; 0x32
   11798:	bl	118a8 <__assert_fail@plt+0xb90>
   1179c:	str	r7, [sp]
   117a0:	str	r7, [sp, #4]
   117a4:	add	r1, r5, #824	; 0x338
   117a8:	movw	r3, #12860	; 0x323c
   117ac:	movt	r3, #1
   117b0:	mov	r0, r4
   117b4:	mov	r2, #10
   117b8:	bl	118a8 <__assert_fail@plt+0xb90>
   117bc:	ldr	r0, [r5]
   117c0:	cmp	r0, #1
   117c4:	blt	1182c <__assert_fail@plt+0xb14>
   117c8:	str	r8, [sp]
   117cc:	str	r8, [sp, #4]
   117d0:	add	r1, r5, #920	; 0x398
   117d4:	movw	r3, #12883	; 0x3253
   117d8:	movt	r3, #1
   117dc:	mov	r0, r4
   117e0:	mov	r2, #8
   117e4:	bl	118a8 <__assert_fail@plt+0xb90>
   117e8:	ldr	r0, [r5, #8]
   117ec:	cmp	r0, #1
   117f0:	blt	11808 <__assert_fail@plt+0xaf0>
   117f4:	add	r1, r5, #992	; 0x3e0
   117f8:	movw	r2, #12850	; 0x3232
   117fc:	movt	r2, #1
   11800:	mov	r0, r4
   11804:	bl	119d8 <__assert_fail@plt+0xcc0>
   11808:	ldr	r0, [r6]
   1180c:	cmp	r0, #1
   11810:	blt	1182c <__assert_fail@plt+0xb14>
   11814:	movw	r0, #9048	; 0x2358
   11818:	add	r1, r5, r0
   1181c:	movw	r2, #12869	; 0x3245
   11820:	movt	r2, #1
   11824:	mov	r0, r4
   11828:	bl	119d8 <__assert_fail@plt+0xcc0>
   1182c:	mov	r0, r4
   11830:	sub	sp, fp, #24
   11834:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11838:	b	1249c <__assert_fail@plt+0x1784>
   1183c:	nop	{0}
   11840:	mov	ip, r0
   11844:	ldr	r0, [r1]
   11848:	cmp	r0, #0
   1184c:	beq	11888 <__assert_fail@plt+0xb70>
   11850:	ldr	r1, [r1, #4]
   11854:	sub	r1, r0, r1
   11858:	vldr	d16, [pc, #64]	; 118a0 <__assert_fail@plt+0xb88>
   1185c:	vmov	s0, r1
   11860:	vmov	s2, r0
   11864:	vcvt.f64.s32	d17, s0
   11868:	vcvt.f64.s32	d18, s2
   1186c:	vmul.f64	d16, d17, d16
   11870:	vdiv.f64	d16, d16, d18
   11874:	vmov	r2, r3, d16
   11878:	movw	r1, #12908	; 0x326c
   1187c:	movt	r1, #1
   11880:	mov	r0, ip
   11884:	b	10c88 <fprintf@plt>
   11888:	movw	r0, #12899	; 0x3263
   1188c:	movt	r0, #1
   11890:	mov	r1, #8
   11894:	mov	r2, #1
   11898:	mov	r3, ip
   1189c:	b	10bf8 <fwrite@plt>
   118a0:	andeq	r0, r0, r0
   118a4:	subsmi	r0, r9, r0
   118a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118ac:	add	fp, sp, #28
   118b0:	sub	sp, sp, #4
   118b4:	mov	r7, r2
   118b8:	mov	r5, r1
   118bc:	mov	r4, r0
   118c0:	movw	r1, #12914	; 0x3272
   118c4:	movt	r1, #1
   118c8:	mov	r2, r3
   118cc:	bl	10c88 <fprintf@plt>
   118d0:	mov	r0, r4
   118d4:	mov	r1, #0
   118d8:	bl	11ae0 <__assert_fail@plt+0xdc8>
   118dc:	ldrb	sl, [fp, #8]
   118e0:	movw	r0, #12919	; 0x3277
   118e4:	movt	r0, #1
   118e8:	movw	r2, #12926	; 0x327e
   118ec:	movt	r2, #1
   118f0:	cmp	sl, #0
   118f4:	movne	r2, r0
   118f8:	movw	r1, #12915	; 0x3273
   118fc:	movt	r1, #1
   11900:	mov	r0, r4
   11904:	bl	10c88 <fprintf@plt>
   11908:	sxth	r6, r7
   1190c:	lsl	r0, r7, #16
   11910:	ldr	r1, [fp, #12]
   11914:	str	r1, [sp]
   11918:	cmp	r0, #65536	; 0x10000
   1191c:	blt	11968 <__assert_fail@plt+0xc50>
   11920:	mov	r7, #1
   11924:	movw	r8, #12933	; 0x3285
   11928:	movt	r8, #1
   1192c:	mov	r9, #1
   11930:	mov	r1, r5
   11934:	ldr	r0, [r1, r7, lsl #3]!
   11938:	cmp	r0, #1
   1193c:	blt	11958 <__assert_fail@plt+0xc40>
   11940:	mov	r0, r4
   11944:	bl	11ae0 <__assert_fail@plt+0xdc8>
   11948:	mov	r0, r4
   1194c:	mov	r1, r8
   11950:	mov	r2, r7
   11954:	bl	10c88 <fprintf@plt>
   11958:	add	r9, r9, #1
   1195c:	sxth	r7, r9
   11960:	cmp	r6, r7
   11964:	bge	11930 <__assert_fail@plt+0xc18>
   11968:	cmp	sl, #0
   1196c:	beq	1199c <__assert_fail@plt+0xc84>
   11970:	add	r1, r5, r6, lsl #3
   11974:	ldr	r0, [r1, #8]!
   11978:	cmp	r0, #1
   1197c:	blt	1199c <__assert_fail@plt+0xc84>
   11980:	mov	r0, r4
   11984:	bl	11ae0 <__assert_fail@plt+0xdc8>
   11988:	movw	r1, #12942	; 0x328e
   1198c:	movt	r1, #1
   11990:	mov	r0, r4
   11994:	mov	r2, r6
   11998:	bl	10c88 <fprintf@plt>
   1199c:	ldr	r0, [sp]
   119a0:	tst	r0, #255	; 0xff
   119a4:	subeq	sp, fp, #28
   119a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ac:	mov	r0, r4
   119b0:	mov	r1, r5
   119b4:	bl	11ae0 <__assert_fail@plt+0xdc8>
   119b8:	movw	r0, #12645	; 0x3165
   119bc:	movt	r0, #1
   119c0:	mov	r1, #7
   119c4:	mov	r2, #1
   119c8:	mov	r3, r4
   119cc:	sub	sp, fp, #28
   119d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	b	10bf8 <fwrite@plt>
   119d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   119dc:	add	fp, sp, #24
   119e0:	mov	r6, r2
   119e4:	mov	r4, r1
   119e8:	mov	r5, r0
   119ec:	mov	r0, r1
   119f0:	bl	11cf0 <__assert_fail@plt+0xfd8>
   119f4:	movw	r0, #8052	; 0x1f74
   119f8:	ldr	r0, [r4, r0]!
   119fc:	mov	r7, r4
   11a00:	ldr	r1, [r7, #-4]!
   11a04:	movw	r2, #6992	; 0x1b50
   11a08:	movt	r2, #1
   11a0c:	bl	111c8 <__assert_fail@plt+0x4b0>
   11a10:	movw	r1, #12914	; 0x3272
   11a14:	movt	r1, #1
   11a18:	mov	r0, r5
   11a1c:	mov	r2, r6
   11a20:	bl	10c88 <fprintf@plt>
   11a24:	mov	r6, #0
   11a28:	mov	r0, r5
   11a2c:	mov	r1, #0
   11a30:	bl	11ae0 <__assert_fail@plt+0xdc8>
   11a34:	mov	r0, #10
   11a38:	mov	r1, r5
   11a3c:	bl	10cb8 <fputc@plt>
   11a40:	ldr	r0, [r4]
   11a44:	cmp	r0, #1
   11a48:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   11a4c:	movw	r8, #12915	; 0x3273
   11a50:	movt	r8, #1
   11a54:	ldr	r0, [r7]
   11a58:	ldr	r0, [r0, r6, lsl #2]
   11a5c:	add	r1, r0, #12
   11a60:	mov	r0, r5
   11a64:	bl	11ae0 <__assert_fail@plt+0xdc8>
   11a68:	ldr	r0, [r7]
   11a6c:	ldr	r0, [r0, r6, lsl #2]
   11a70:	ldr	r2, [r0, #8]
   11a74:	mov	r0, r5
   11a78:	mov	r1, r8
   11a7c:	bl	10c88 <fprintf@plt>
   11a80:	add	r6, r6, #1
   11a84:	ldr	r0, [r4]
   11a88:	cmp	r6, r0
   11a8c:	blt	11a54 <__assert_fail@plt+0xd3c>
   11a90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11a94:	push	{r4, r5, fp, lr}
   11a98:	add	fp, sp, #8
   11a9c:	mov	r4, r2
   11aa0:	mov	r5, r1
   11aa4:	bl	114e4 <__assert_fail@plt+0x7cc>
   11aa8:	cmp	r0, #0
   11aac:	moveq	r0, #0
   11ab0:	popeq	{r4, r5, fp, pc}
   11ab4:	movw	r0, #28900	; 0x70e4
   11ab8:	movt	r0, #2
   11abc:	movw	r1, #12891	; 0x325b
   11ac0:	movt	r1, #1
   11ac4:	mov	r2, r5
   11ac8:	mov	r3, r4
   11acc:	bl	10c94 <__isoc99_sscanf@plt>
   11ad0:	sub	r0, r0, #2
   11ad4:	clz	r0, r0
   11ad8:	lsr	r0, r0, #5
   11adc:	pop	{r4, r5, fp, pc}
   11ae0:	push	{r4, r5, fp, lr}
   11ae4:	add	fp, sp, #8
   11ae8:	mov	r4, r0
   11aec:	cmp	r1, #0
   11af0:	beq	11b1c <__assert_fail@plt+0xe04>
   11af4:	mov	r5, r1
   11af8:	ldm	r1, {r2, r3}
   11afc:	movw	r1, #12951	; 0x3297
   11b00:	movt	r1, #1
   11b04:	mov	r0, r4
   11b08:	bl	10c88 <fprintf@plt>
   11b0c:	mov	r0, r4
   11b10:	mov	r1, r5
   11b14:	bl	11840 <__assert_fail@plt+0xb28>
   11b18:	b	11b34 <__assert_fail@plt+0xe1c>
   11b1c:	movw	r0, #12962	; 0x32a2
   11b20:	movt	r0, #1
   11b24:	mov	r1, #26
   11b28:	mov	r2, #1
   11b2c:	mov	r3, r4
   11b30:	bl	10bf8 <fwrite@plt>
   11b34:	movw	r0, #12989	; 0x32bd
   11b38:	movt	r0, #1
   11b3c:	mov	r1, #3
   11b40:	mov	r2, #1
   11b44:	mov	r3, r4
   11b48:	pop	{r4, r5, fp, lr}
   11b4c:	b	10bf8 <fwrite@plt>
   11b50:	ldr	r1, [r1, #8]
   11b54:	ldr	r0, [r0, #8]
   11b58:	b	123a8 <__assert_fail@plt+0x1690>
   11b5c:	push	{r4, r5, r6, sl, fp, lr}
   11b60:	add	fp, sp, #16
   11b64:	mov	r4, r0
   11b68:	movw	r6, #503	; 0x1f7
   11b6c:	mov	r5, r0
   11b70:	mov	r0, r5
   11b74:	bl	1102c <__assert_fail@plt+0x314>
   11b78:	subs	r6, r6, #1
   11b7c:	add	r5, r5, #16
   11b80:	bne	11b70 <__assert_fail@plt+0xe58>
   11b84:	movw	r0, #8052	; 0x1f74
   11b88:	mov	r1, #0
   11b8c:	str	r1, [r4, r0]
   11b90:	movw	r0, #8048	; 0x1f70
   11b94:	str	r1, [r4, r0]
   11b98:	pop	{r4, r5, r6, sl, fp, pc}
   11b9c:	push	{r4, r5, r6, sl, fp, lr}
   11ba0:	add	fp, sp, #16
   11ba4:	mov	r5, r1
   11ba8:	mov	r4, r0
   11bac:	mov	r0, r1
   11bb0:	bl	11bf8 <__assert_fail@plt+0xee0>
   11bb4:	ldr	r6, [r4, r0, lsl #4]
   11bb8:	mov	r4, #0
   11bbc:	cmp	r6, #0
   11bc0:	bne	11bd8 <__assert_fail@plt+0xec0>
   11bc4:	mov	r0, r4
   11bc8:	pop	{r4, r5, r6, sl, fp, pc}
   11bcc:	ldr	r6, [r6, #4]
   11bd0:	cmp	r6, #0
   11bd4:	beq	11bc4 <__assert_fail@plt+0xeac>
   11bd8:	ldr	r1, [r6, #8]
   11bdc:	mov	r0, r5
   11be0:	bl	10b68 <strcmp@plt>
   11be4:	cmp	r0, #0
   11be8:	bne	11bcc <__assert_fail@plt+0xeb4>
   11bec:	mov	r4, r6
   11bf0:	mov	r0, r4
   11bf4:	pop	{r4, r5, r6, sl, fp, pc}
   11bf8:	ldrb	r1, [r0]
   11bfc:	cmp	r1, #0
   11c00:	moveq	r0, #0
   11c04:	sxtheq	r0, r0
   11c08:	bxeq	lr
   11c0c:	add	r2, r0, #1
   11c10:	mov	r0, #0
   11c14:	uxtab	r0, r0, r1
   11c18:	ldrb	r1, [r2], #1
   11c1c:	cmp	r1, #0
   11c20:	bne	11c14 <__assert_fail@plt+0xefc>
   11c24:	movw	r1, #20065	; 0x4e61
   11c28:	movt	r1, #33354	; 0x824a
   11c2c:	umull	r1, r2, r0, r1
   11c30:	lsr	r1, r2, #8
   11c34:	movw	r2, #503	; 0x1f7
   11c38:	mls	r0, r1, r2, r0
   11c3c:	sxth	r0, r0
   11c40:	bx	lr
   11c44:	push	{r4, r5, fp, lr}
   11c48:	add	fp, sp, #8
   11c4c:	mov	r4, r1
   11c50:	mov	r5, r0
   11c54:	ldr	r0, [r1, #8]
   11c58:	bl	11bf8 <__assert_fail@plt+0xee0>
   11c5c:	add	r0, r5, r0, lsl #4
   11c60:	mov	r1, r4
   11c64:	bl	11038 <__assert_fail@plt+0x320>
   11c68:	mov	r0, r5
   11c6c:	bl	11c84 <__assert_fail@plt+0xf6c>
   11c70:	movw	r0, #8052	; 0x1f74
   11c74:	ldr	r0, [r5, r0]!
   11c78:	add	r0, r0, #1
   11c7c:	str	r0, [r5]
   11c80:	pop	{r4, r5, fp, pc}
   11c84:	push	{r4, sl, fp, lr}
   11c88:	add	fp, sp, #8
   11c8c:	mov	r4, r0
   11c90:	movw	r0, #8048	; 0x1f70
   11c94:	ldr	r0, [r4, r0]!
   11c98:	cmp	r0, #0
   11c9c:	popeq	{r4, sl, fp, pc}
   11ca0:	bl	10b8c <free@plt>
   11ca4:	mov	r0, #0
   11ca8:	str	r0, [r4]
   11cac:	pop	{r4, sl, fp, pc}
   11cb0:	push	{r4, r5, fp, lr}
   11cb4:	add	fp, sp, #8
   11cb8:	mov	r4, r1
   11cbc:	mov	r5, r0
   11cc0:	ldr	r0, [r1, #8]
   11cc4:	bl	11bf8 <__assert_fail@plt+0xee0>
   11cc8:	add	r0, r5, r0, lsl #4
   11ccc:	mov	r1, r4
   11cd0:	bl	110b0 <__assert_fail@plt+0x398>
   11cd4:	mov	r0, r5
   11cd8:	bl	11c84 <__assert_fail@plt+0xf6c>
   11cdc:	movw	r0, #8052	; 0x1f74
   11ce0:	ldr	r0, [r5, r0]!
   11ce4:	sub	r0, r0, #1
   11ce8:	str	r0, [r5]
   11cec:	pop	{r4, r5, fp, pc}
   11cf0:	push	{r4, r5, fp, lr}
   11cf4:	add	fp, sp, #8
   11cf8:	mov	r4, r0
   11cfc:	movw	r0, #8048	; 0x1f70
   11d00:	mov	r5, r4
   11d04:	ldr	r0, [r5, r0]!
   11d08:	cmp	r0, #0
   11d0c:	bne	11d68 <__assert_fail@plt+0x1050>
   11d10:	movw	r0, #8052	; 0x1f74
   11d14:	ldr	r0, [r4, r0]
   11d18:	cmp	r0, #0
   11d1c:	popeq	{r4, r5, fp, pc}
   11d20:	mov	r1, #4
   11d24:	bl	12388 <__assert_fail@plt+0x1670>
   11d28:	str	r0, [r5]
   11d2c:	mov	r0, #0
   11d30:	movw	ip, #503	; 0x1f7
   11d34:	mov	r2, #0
   11d38:	ldr	r3, [r4, r2, lsl #4]
   11d3c:	cmp	r3, #0
   11d40:	beq	11d5c <__assert_fail@plt+0x1044>
   11d44:	ldr	r1, [r5]
   11d48:	str	r3, [r1, r0, lsl #2]
   11d4c:	add	r0, r0, #1
   11d50:	ldr	r3, [r3, #4]
   11d54:	cmp	r3, #0
   11d58:	bne	11d44 <__assert_fail@plt+0x102c>
   11d5c:	add	r2, r2, #1
   11d60:	cmp	r2, ip
   11d64:	bne	11d38 <__assert_fail@plt+0x1020>
   11d68:	pop	{r4, r5, fp, pc}
   11d6c:	push	{r4, r5, r6, r7, fp, lr}
   11d70:	add	fp, sp, #16
   11d74:	mov	r5, r1
   11d78:	mov	r4, r0
   11d7c:	mov	r6, #0
   11d80:	movw	r7, #8048	; 0x1f70
   11d84:	add	r0, r4, r6
   11d88:	mov	r1, r5
   11d8c:	bl	11188 <__assert_fail@plt+0x470>
   11d90:	add	r6, r6, #16
   11d94:	cmp	r6, r7
   11d98:	bne	11d84 <__assert_fail@plt+0x106c>
   11d9c:	mov	r0, r4
   11da0:	bl	11c84 <__assert_fail@plt+0xf6c>
   11da4:	movw	r0, #8052	; 0x1f74
   11da8:	mov	r1, #0
   11dac:	str	r1, [r4, r0]
   11db0:	pop	{r4, r5, r6, r7, fp, pc}
   11db4:	push	{r4, r5, r6, sl, fp, lr}
   11db8:	add	fp, sp, #16
   11dbc:	mov	r4, r0
   11dc0:	ldr	r5, [r1]
   11dc4:	mov	r0, r5
   11dc8:	bl	11e14 <__assert_fail@plt+0x10fc>
   11dcc:	cmp	r0, #0
   11dd0:	popeq	{r4, r5, r6, sl, fp, pc}
   11dd4:	mov	r6, r0
   11dd8:	ldr	r0, [r5, #12]
   11ddc:	bl	1207c <__assert_fail@plt+0x1364>
   11de0:	cmp	r0, #0
   11de4:	beq	11df8 <__assert_fail@plt+0x10e0>
   11de8:	mov	r0, r4
   11dec:	mov	r1, r5
   11df0:	mov	r2, r6
   11df4:	bl	120a8 <__assert_fail@plt+0x1390>
   11df8:	ldr	r5, [r6, #4]
   11dfc:	mov	r0, r5
   11e00:	bl	11e14 <__assert_fail@plt+0x10fc>
   11e04:	mov	r6, r0
   11e08:	cmp	r0, #0
   11e0c:	bne	11dd8 <__assert_fail@plt+0x10c0>
   11e10:	pop	{r4, r5, r6, sl, fp, pc}
   11e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e18:	add	fp, sp, #28
   11e1c:	sub	sp, sp, #20
   11e20:	str	r0, [sp, #8]
   11e24:	cmp	r0, #0
   11e28:	moveq	r0, #0
   11e2c:	subeq	sp, fp, #28
   11e30:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e34:	ldr	r0, [sp, #8]
   11e38:	cmp	r0, #0
   11e3c:	beq	12068 <__assert_fail@plt+0x1350>
   11e40:	mov	r5, #17
   11e44:	add	r4, sp, #4
   11e48:	mov	sl, #1
   11e4c:	mov	r8, #13312	; 0x3400
   11e50:	movw	r9, #33664	; 0x8380
   11e54:	movt	r9, #1
   11e58:	mov	r7, r5
   11e5c:	mov	r0, r4
   11e60:	bl	12134 <__assert_fail@plt+0x141c>
   11e64:	mov	r4, r0
   11e68:	bl	12188 <__assert_fail@plt+0x1470>
   11e6c:	mov	r5, r0
   11e70:	mov	r0, r4
   11e74:	bl	12134 <__assert_fail@plt+0x141c>
   11e78:	bl	12188 <__assert_fail@plt+0x1470>
   11e7c:	mov	r6, r0
   11e80:	mov	r0, r4
   11e84:	bl	1219c <__assert_fail@plt+0x1484>
   11e88:	bl	12188 <__assert_fail@plt+0x1470>
   11e8c:	cmp	r5, #1
   11e90:	cmpeq	r6, #2
   11e94:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11e98:	sub	r1, r5, #1
   11e9c:	cmp	r1, #3
   11ea0:	subcs	r1, r6, #1
   11ea4:	cmpcs	r1, #3
   11ea8:	bcc	1206c <__assert_fail@plt+0x1354>
   11eac:	orr	r1, r6, #1
   11eb0:	orr	r2, r5, #1
   11eb4:	cmp	r2, #9
   11eb8:	cmpeq	r1, #9
   11ebc:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11ec0:	cmp	r2, #9
   11ec4:	bne	11ee4 <__assert_fail@plt+0x11cc>
   11ec8:	cmp	r6, #13
   11ecc:	bhi	11ee4 <__assert_fail@plt+0x11cc>
   11ed0:	tst	r8, sl, lsl r6
   11ed4:	beq	11ee4 <__assert_fail@plt+0x11cc>
   11ed8:	orr	r3, r0, #1
   11edc:	cmp	r3, #9
   11ee0:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11ee4:	orr	r3, r7, #1
   11ee8:	cmp	r3, #9
   11eec:	bne	11f08 <__assert_fail@plt+0x11f0>
   11ef0:	cmp	r5, #13
   11ef4:	bhi	11f08 <__assert_fail@plt+0x11f0>
   11ef8:	tst	r8, sl, lsl r5
   11efc:	beq	11f08 <__assert_fail@plt+0x11f0>
   11f00:	cmp	r1, #9
   11f04:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11f08:	cmp	r5, #8
   11f0c:	cmpeq	r6, #10
   11f10:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11f14:	cmp	r5, #8
   11f18:	cmpeq	r6, #11
   11f1c:	beq	11fdc <__assert_fail@plt+0x12c4>
   11f20:	cmp	r7, #8
   11f24:	cmpeq	r5, #11
   11f28:	beq	11fe8 <__assert_fail@plt+0x12d0>
   11f2c:	sub	r3, r5, #15
   11f30:	clz	r3, r3
   11f34:	lsr	lr, r3, #5
   11f38:	sub	r2, r2, #9
   11f3c:	clz	r2, r2
   11f40:	lsr	ip, r2, #5
   11f44:	orr	r2, lr, ip
   11f48:	sub	r3, r6, #15
   11f4c:	clz	r3, r3
   11f50:	lsr	r3, r3, #5
   11f54:	tst	r2, r3
   11f58:	subeq	r1, r1, #9
   11f5c:	clzeq	r1, r1
   11f60:	lsreq	r1, r1, #5
   11f64:	andseq	r1, lr, r1
   11f68:	bne	11ff0 <__assert_fail@plt+0x12d8>
   11f6c:	cmp	r7, #15
   11f70:	bne	11fa0 <__assert_fail@plt+0x1288>
   11f74:	sub	r1, r5, #10
   11f78:	clz	r1, r1
   11f7c:	lsr	r1, r1, #5
   11f80:	orr	r2, r5, #2
   11f84:	sub	r2, r2, #14
   11f88:	clz	r2, r2
   11f8c:	lsr	r2, r2, #5
   11f90:	orr	r1, r1, r2
   11f94:	cmp	r1, #1
   11f98:	cmpeq	r6, #15
   11f9c:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11fa0:	cmp	r5, #15
   11fa4:	bne	12000 <__assert_fail@plt+0x12e8>
   11fa8:	sub	r1, r6, #10
   11fac:	clz	r1, r1
   11fb0:	lsr	r1, r1, #5
   11fb4:	orr	r2, r6, #2
   11fb8:	sub	r2, r2, #14
   11fbc:	clz	r2, r2
   11fc0:	lsr	r2, r2, #5
   11fc4:	orr	r1, r1, r2
   11fc8:	cmp	r1, #1
   11fcc:	bne	1200c <__assert_fail@plt+0x12f4>
   11fd0:	cmp	r0, #15
   11fd4:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11fd8:	b	1200c <__assert_fail@plt+0x12f4>
   11fdc:	cmp	r0, #8
   11fe0:	beq	11ff0 <__assert_fail@plt+0x12d8>
   11fe4:	b	11f20 <__assert_fail@plt+0x1208>
   11fe8:	cmp	r6, #8
   11fec:	bne	11f2c <__assert_fail@plt+0x1214>
   11ff0:	ldr	r0, [r4, #4]
   11ff4:	cmp	r0, #0
   11ff8:	bne	11e58 <__assert_fail@plt+0x1140>
   11ffc:	b	1206c <__assert_fail@plt+0x1354>
   12000:	cmp	r5, #7
   12004:	cmpeq	r6, #7
   12008:	beq	11ff0 <__assert_fail@plt+0x12d8>
   1200c:	cmp	r6, #16
   12010:	bne	1203c <__assert_fail@plt+0x1324>
   12014:	orr	r0, r5, #8
   12018:	sub	r0, r0, #15
   1201c:	clz	r0, r0
   12020:	lsr	r0, r0, #5
   12024:	orr	r0, r0, ip
   12028:	sub	r1, r5, #16
   1202c:	clz	r1, r1
   12030:	lsr	r1, r1, #5
   12034:	orrs	r0, r1, r0
   12038:	bne	11ff0 <__assert_fail@plt+0x12d8>
   1203c:	cmp	r5, #16
   12040:	bne	12058 <__assert_fail@plt+0x1340>
   12044:	cmp	r6, #16
   12048:	bhi	1206c <__assert_fail@plt+0x1354>
   1204c:	tst	r9, sl, lsl r6
   12050:	bne	11ff0 <__assert_fail@plt+0x12d8>
   12054:	b	1206c <__assert_fail@plt+0x1354>
   12058:	cmp	r5, #5
   1205c:	cmpeq	r6, #5
   12060:	beq	11ff0 <__assert_fail@plt+0x12d8>
   12064:	b	1206c <__assert_fail@plt+0x1354>
   12068:	add	r4, sp, #4
   1206c:	mov	r0, r4
   12070:	bl	121b0 <__assert_fail@plt+0x1498>
   12074:	sub	sp, fp, #28
   12078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1207c:	push	{fp, lr}
   12080:	mov	fp, sp
   12084:	bl	10b98 <utf8proc_get_property@plt>
   12088:	ldrsh	r1, [r0]
   1208c:	sub	r2, r1, #1
   12090:	mov	r0, #1
   12094:	cmp	r2, #12
   12098:	popcc	{fp, pc}
   1209c:	cmp	r1, #29
   120a0:	movne	r0, #0
   120a4:	pop	{fp, pc}
   120a8:	push	{r4, r5, r6, r7, fp, lr}
   120ac:	add	fp, sp, #16
   120b0:	mov	r5, r1
   120b4:	mov	r4, r0
   120b8:	ldr	r6, [r2, #4]
   120bc:	mov	r0, r1
   120c0:	mov	r1, r6
   120c4:	bl	12270 <__assert_fail@plt+0x1558>
   120c8:	add	r0, r0, #1
   120cc:	bl	10c28 <malloc@plt>
   120d0:	mov	r7, r0
   120d4:	mov	r1, r5
   120d8:	mov	r2, r6
   120dc:	bl	12314 <__assert_fail@plt+0x15fc>
   120e0:	mov	r0, #1
   120e4:	mov	r1, #12
   120e8:	bl	12388 <__assert_fail@plt+0x1670>
   120ec:	mov	r5, r0
   120f0:	mov	r0, r7
   120f4:	bl	10cac <utf8proc_NFC@plt>
   120f8:	str	r0, [r5, #8]
   120fc:	mov	r0, r4
   12100:	mov	r1, r5
   12104:	bl	11088 <__assert_fail@plt+0x370>
   12108:	mov	r0, r7
   1210c:	pop	{r4, r5, r6, r7, fp, lr}
   12110:	b	10b8c <free@plt>
   12114:	push	{r4, sl, fp, lr}
   12118:	add	fp, sp, #8
   1211c:	mov	r4, r0
   12120:	ldr	r0, [r0, #8]
   12124:	bl	10b8c <free@plt>
   12128:	mov	r0, r4
   1212c:	pop	{r4, sl, fp, lr}
   12130:	b	10b8c <free@plt>
   12134:	push	{r4, r5, fp, lr}
   12138:	add	fp, sp, #8
   1213c:	mov	r4, #0
   12140:	cmp	r0, #0
   12144:	beq	12154 <__assert_fail@plt+0x143c>
   12148:	ldr	r5, [r0, #4]
   1214c:	cmp	r5, #0
   12150:	bne	12168 <__assert_fail@plt+0x1450>
   12154:	mov	r0, r4
   12158:	pop	{r4, r5, fp, pc}
   1215c:	ldr	r5, [r5, #4]
   12160:	cmp	r5, #0
   12164:	beq	12154 <__assert_fail@plt+0x143c>
   12168:	mov	r0, r5
   1216c:	bl	12188 <__assert_fail@plt+0x1470>
   12170:	orr	r0, r0, #2
   12174:	cmp	r0, #6
   12178:	beq	1215c <__assert_fail@plt+0x1444>
   1217c:	mov	r4, r5
   12180:	mov	r0, r4
   12184:	pop	{r4, r5, fp, pc}
   12188:	cmp	r0, #0
   1218c:	moveq	r0, #18
   12190:	bxeq	lr
   12194:	ldr	r0, [r0, #12]
   12198:	b	121f8 <__assert_fail@plt+0x14e0>
   1219c:	push	{fp, lr}
   121a0:	mov	fp, sp
   121a4:	bl	12134 <__assert_fail@plt+0x141c>
   121a8:	pop	{fp, lr}
   121ac:	b	12134 <__assert_fail@plt+0x141c>
   121b0:	push	{r4, r5, fp, lr}
   121b4:	add	fp, sp, #8
   121b8:	cmp	r0, #0
   121bc:	moveq	r4, #0
   121c0:	moveq	r0, r4
   121c4:	popeq	{r4, r5, fp, pc}
   121c8:	mov	r5, r0
   121cc:	mov	r4, r5
   121d0:	ldr	r5, [r5, #4]
   121d4:	cmp	r5, #0
   121d8:	beq	121f0 <__assert_fail@plt+0x14d8>
   121dc:	mov	r0, r5
   121e0:	bl	12188 <__assert_fail@plt+0x1470>
   121e4:	orr	r0, r0, #2
   121e8:	cmp	r0, #6
   121ec:	beq	121cc <__assert_fail@plt+0x14b4>
   121f0:	mov	r0, r4
   121f4:	pop	{r4, r5, fp, pc}
   121f8:	mov	r1, #0
   121fc:	movw	r2, #1092	; 0x444
   12200:	b	12204 <__assert_fail@plt+0x14ec>
   12204:	push	{r4, r5, fp, lr}
   12208:	add	fp, sp, #8
   1220c:	mov	lr, r0
   12210:	mov	r0, #0
   12214:	cmp	r2, r1
   12218:	popcc	{r4, r5, fp, pc}
   1221c:	movw	ip, #12996	; 0x32c4
   12220:	movt	ip, #1
   12224:	b	12240 <__assert_fail@plt+0x1528>
   12228:	add	r1, ip, r4, lsl #2
   1222c:	ldr	r4, [r1, #4]
   12230:	cmp	r4, lr
   12234:	bcs	12268 <__assert_fail@plt+0x1550>
   12238:	add	r1, r3, #1
   1223c:	b	1225c <__assert_fail@plt+0x1544>
   12240:	sub	r3, r2, r1
   12244:	add	r3, r1, r3, lsr #1
   12248:	add	r4, r3, r3, lsl #1
   1224c:	ldr	r5, [ip, r4, lsl #2]
   12250:	cmp	r5, lr
   12254:	bls	12228 <__assert_fail@plt+0x1510>
   12258:	sub	r2, r3, #1
   1225c:	cmp	r2, r1
   12260:	bcs	12240 <__assert_fail@plt+0x1528>
   12264:	pop	{r4, r5, fp, pc}
   12268:	ldr	r0, [r1, #8]
   1226c:	pop	{r4, r5, fp, pc}
   12270:	push	{r4, r5, r6, r7, fp, lr}
   12274:	add	fp, sp, #16
   12278:	sub	sp, sp, #8
   1227c:	cmp	r0, r1
   12280:	beq	122c4 <__assert_fail@plt+0x15ac>
   12284:	mov	r5, r1
   12288:	mov	r6, r0
   1228c:	mov	r4, #0
   12290:	add	r7, sp, #4
   12294:	cmp	r6, #0
   12298:	beq	122d4 <__assert_fail@plt+0x15bc>
   1229c:	ldr	r0, [r6, #12]
   122a0:	mov	r1, r7
   122a4:	bl	10bb0 <utf8proc_encode_char@plt>
   122a8:	cmp	r0, #0
   122ac:	beq	122f4 <__assert_fail@plt+0x15dc>
   122b0:	add	r4, r0, r4
   122b4:	ldr	r6, [r6, #4]
   122b8:	cmp	r6, r5
   122bc:	bne	12294 <__assert_fail@plt+0x157c>
   122c0:	b	122c8 <__assert_fail@plt+0x15b0>
   122c4:	mov	r4, #0
   122c8:	mov	r0, r4
   122cc:	sub	sp, fp, #16
   122d0:	pop	{r4, r5, r6, r7, fp, pc}
   122d4:	movw	r0, #26119	; 0x6607
   122d8:	movt	r0, #1
   122dc:	movw	r1, #26112	; 0x6600
   122e0:	movt	r1, #1
   122e4:	movw	r3, #26135	; 0x6617
   122e8:	movt	r3, #1
   122ec:	mov	r2, #249	; 0xf9
   122f0:	bl	10d18 <__assert_fail@plt>
   122f4:	movw	r0, #26161	; 0x6631
   122f8:	movt	r0, #1
   122fc:	movw	r1, #26112	; 0x6600
   12300:	movt	r1, #1
   12304:	movw	r3, #26135	; 0x6617
   12308:	movt	r3, #1
   1230c:	mov	r2, #253	; 0xfd
   12310:	bl	10d18 <__assert_fail@plt>
   12314:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12318:	add	fp, sp, #24
   1231c:	mov	r4, r0
   12320:	mov	r8, #0
   12324:	cmp	r1, r2
   12328:	mov	r7, #0
   1232c:	beq	12360 <__assert_fail@plt+0x1648>
   12330:	mov	r5, r2
   12334:	mov	r6, r1
   12338:	mov	r7, #0
   1233c:	cmp	r6, #0
   12340:	beq	12368 <__assert_fail@plt+0x1650>
   12344:	add	r1, r4, r7
   12348:	ldr	r0, [r6, #12]
   1234c:	bl	10bb0 <utf8proc_encode_char@plt>
   12350:	add	r7, r0, r7
   12354:	ldr	r6, [r6, #4]
   12358:	cmp	r6, r5
   1235c:	bne	1233c <__assert_fail@plt+0x1624>
   12360:	strb	r8, [r4, r7]
   12364:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12368:	movw	r0, #26119	; 0x6607
   1236c:	movt	r0, #1
   12370:	movw	r1, #26112	; 0x6600
   12374:	movt	r1, #1
   12378:	movw	r3, #26180	; 0x6644
   1237c:	movt	r3, #1
   12380:	movw	r2, #269	; 0x10d
   12384:	bl	10d18 <__assert_fail@plt>
   12388:	push	{fp, lr}
   1238c:	mov	fp, sp
   12390:	bl	10b5c <calloc@plt>
   12394:	cmp	r0, #0
   12398:	popne	{fp, pc}
   1239c:	movw	r0, #26204	; 0x665c
   123a0:	movt	r0, #1
   123a4:	bl	12728 <error@@Base>
   123a8:	push	{r4, r5, r6, sl, fp, lr}
   123ac:	add	fp, sp, #16
   123b0:	mov	r2, r0
   123b4:	ldrb	ip, [r1]
   123b8:	ldrb	r3, [r0]
   123bc:	mov	r0, #0
   123c0:	cmp	r3, #0
   123c4:	beq	123fc <__assert_fail@plt+0x16e4>
   123c8:	add	lr, r1, #1
   123cc:	add	r6, r2, #1
   123d0:	mov	r2, #0
   123d4:	uxtb	r4, ip
   123d8:	uxtb	r5, r3
   123dc:	cmp	r5, r4
   123e0:	bne	1240c <__assert_fail@plt+0x16f4>
   123e4:	ldrb	ip, [lr, r2]
   123e8:	ldrb	r3, [r6, r2]
   123ec:	add	r2, r2, #1
   123f0:	cmp	r3, #0
   123f4:	bne	123d4 <__assert_fail@plt+0x16bc>
   123f8:	b	12400 <__assert_fail@plt+0x16e8>
   123fc:	mov	r2, #0
   12400:	cmp	ip, #0
   12404:	popeq	{r4, r5, r6, sl, fp, pc}
   12408:	mov	r3, #0
   1240c:	ldrb	r1, [r1, r2]
   12410:	uxtb	r2, r3
   12414:	mov	r0, #1
   12418:	cmp	r2, r1
   1241c:	mvncc	r0, #0
   12420:	pop	{r4, r5, r6, sl, fp, pc}
   12424:	push	{r4, r5, fp, lr}
   12428:	add	fp, sp, #8
   1242c:	mov	r5, r1
   12430:	cmp	r0, #0
   12434:	beq	12468 <__assert_fail@plt+0x1750>
   12438:	mov	r4, r0
   1243c:	mov	r1, r5
   12440:	bl	10b80 <fopen@plt>
   12444:	cmp	r0, #0
   12448:	popne	{r4, r5, fp, pc}
   1244c:	ldrb	r0, [r5]
   12450:	cmp	r0, #119	; 0x77
   12454:	bne	1248c <__assert_fail@plt+0x1774>
   12458:	movw	r0, #26230	; 0x6676
   1245c:	movt	r0, #1
   12460:	mov	r1, r4
   12464:	bl	12768 <error@@Base+0x40>
   12468:	ldrb	r0, [r5]
   1246c:	movw	r1, #28880	; 0x70d0
   12470:	movt	r1, #2
   12474:	movw	r2, #28884	; 0x70d4
   12478:	movt	r2, #2
   1247c:	cmp	r0, #114	; 0x72
   12480:	moveq	r2, r1
   12484:	ldr	r0, [r2]
   12488:	pop	{r4, r5, fp, pc}
   1248c:	movw	r0, #26252	; 0x668c
   12490:	movt	r0, #1
   12494:	mov	r1, r4
   12498:	bl	12768 <error@@Base+0x40>
   1249c:	movw	r1, #28880	; 0x70d0
   124a0:	movt	r1, #2
   124a4:	ldr	r1, [r1]
   124a8:	cmp	r1, r0
   124ac:	movwne	r1, #28884	; 0x70d4
   124b0:	movtne	r1, #2
   124b4:	ldrne	r1, [r1]
   124b8:	cmpne	r1, r0
   124bc:	bxeq	lr
   124c0:	b	10ca0 <fclose@plt>
   124c4:	push	{fp, lr}
   124c8:	mov	fp, sp
   124cc:	sub	sp, sp, #88	; 0x58
   124d0:	mov	r1, sp
   124d4:	bl	13138 <error@@Base+0xa10>
   124d8:	clz	r0, r0
   124dc:	lsr	r0, r0, #5
   124e0:	mov	sp, fp
   124e4:	pop	{fp, pc}
   124e8:	push	{r4, sl, fp, lr}
   124ec:	add	fp, sp, #8
   124f0:	movw	r0, #29000	; 0x7148
   124f4:	movt	r0, #2
   124f8:	ldrh	r1, [r0]
   124fc:	add	r1, r1, #1
   12500:	strh	r1, [r0]
   12504:	sxth	r0, r1
   12508:	bl	1251c <__assert_fail@plt+0x1804>
   1250c:	mov	r4, r0
   12510:	bl	10bd4 <unlink@plt>
   12514:	mov	r0, r4
   12518:	pop	{r4, sl, fp, pc}
   1251c:	push	{r4, r5, fp, lr}
   12520:	add	fp, sp, #8
   12524:	sub	sp, sp, #104	; 0x68
   12528:	mov	r4, r0
   1252c:	movw	r0, #37096	; 0x90e8
   12530:	movt	r0, #2
   12534:	ldr	r5, [r0]
   12538:	bl	10c58 <getpid@plt>
   1253c:	mov	r3, r0
   12540:	sxth	r0, r4
   12544:	str	r0, [sp]
   12548:	add	r4, sp, #4
   1254c:	movw	r1, #26293	; 0x66b5
   12550:	movt	r1, #1
   12554:	mov	r0, r4
   12558:	mov	r2, r5
   1255c:	bl	10cc4 <sprintf@plt>
   12560:	mov	r0, r4
   12564:	bl	10bbc <strdup@plt>
   12568:	sub	sp, fp, #8
   1256c:	pop	{r4, r5, fp, pc}
   12570:	push	{r4, sl, fp, lr}
   12574:	add	fp, sp, #8
   12578:	mov	r4, r0
   1257c:	bl	10c7c <strlen@plt>
   12580:	sub	r0, r0, #1
   12584:	sxth	r0, r0
   12588:	cmp	r0, #0
   1258c:	blt	1259c <__assert_fail@plt+0x1884>
   12590:	ldrb	r1, [r4, r0]
   12594:	cmp	r1, #47	; 0x2f
   12598:	bne	12580 <__assert_fail@plt+0x1868>
   1259c:	add	r0, r4, r0
   125a0:	add	r0, r0, #1
   125a4:	pop	{r4, sl, fp, pc}
   125a8:	push	{r4, r5, r6, r7, fp, lr}
   125ac:	add	fp, sp, #16
   125b0:	mov	r4, r3
   125b4:	mov	r5, r2
   125b8:	mov	r6, r1
   125bc:	mov	r7, r0
   125c0:	ldr	r0, [r1]
   125c4:	bl	12570 <__assert_fail@plt+0x1858>
   125c8:	movw	r1, #37096	; 0x90e8
   125cc:	movt	r1, #2
   125d0:	str	r0, [r1]
   125d4:	bl	127f0 <error@@Base+0xc8>
   125d8:	mov	r0, r7
   125dc:	mov	r1, r6
   125e0:	mov	r2, r5
   125e4:	mov	r3, r4
   125e8:	pop	{r4, r5, r6, r7, fp, lr}
   125ec:	b	125f0 <__assert_fail@plt+0x18d8>
   125f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125f4:	add	fp, sp, #28
   125f8:	sub	sp, sp, #12
   125fc:	stmib	sp, {r2, r3}
   12600:	mov	r7, r1
   12604:	mov	r5, r0
   12608:	ldr	r0, [r0]
   1260c:	cmp	r0, #1
   12610:	bne	12628 <__assert_fail@plt+0x1910>
   12614:	movw	r0, #28860	; 0x70bc
   12618:	movt	r0, #2
   1261c:	ldrb	r0, [r0]
   12620:	cmp	r0, #0
   12624:	bne	126e0 <__assert_fail@plt+0x19c8>
   12628:	ldr	r9, [r5]
   1262c:	mov	r6, #0
   12630:	cmp	r9, #2
   12634:	blt	126d0 <__assert_fail@plt+0x19b8>
   12638:	mov	sl, #1
   1263c:	mov	r6, #0
   12640:	mov	r8, #1
   12644:	ldr	r4, [r7, sl, lsl #2]
   12648:	ldrb	r0, [r4]
   1264c:	cmp	r0, #45	; 0x2d
   12650:	bne	126ac <__assert_fail@plt+0x1994>
   12654:	ldrb	r0, [r4, #1]
   12658:	cmp	r0, #0
   1265c:	beq	126ac <__assert_fail@plt+0x1994>
   12660:	mov	r0, r4
   12664:	bl	10c7c <strlen@plt>
   12668:	mov	r2, r0
   1266c:	movw	r0, #26322	; 0x66d2
   12670:	movt	r0, #1
   12674:	mov	r1, r4
   12678:	bl	10cf4 <strncmp@plt>
   1267c:	cmp	r0, #0
   12680:	beq	126e0 <__assert_fail@plt+0x19c8>
   12684:	add	r0, sl, #1
   12688:	mov	r1, #0
   1268c:	cmp	r0, r9
   12690:	ldrlt	r1, [r7, r0, lsl #2]
   12694:	mov	r0, r4
   12698:	ldr	r2, [sp, #8]
   1269c:	bl	1289c <error@@Base+0x174>
   126a0:	cmp	r0, #0
   126a4:	addne	r8, r8, #1
   126a8:	b	126bc <__assert_fail@plt+0x19a4>
   126ac:	ldr	r0, [r7, sl, lsl #2]
   126b0:	sxth	r1, r6
   126b4:	str	r0, [r7, r1, lsl #2]
   126b8:	add	r6, r6, #1
   126bc:	ldr	r9, [r5]
   126c0:	add	r8, r8, #1
   126c4:	sxth	sl, r8
   126c8:	cmp	r9, sl
   126cc:	bgt	12644 <__assert_fail@plt+0x192c>
   126d0:	sxth	r0, r6
   126d4:	str	r0, [r5]
   126d8:	sub	sp, fp, #28
   126dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126e0:	ldr	r0, [sp, #4]
   126e4:	bl	1284c <error@@Base+0x124>
   126e8:	push	{fp, lr}
   126ec:	mov	fp, sp
   126f0:	mov	r0, #0
   126f4:	bl	126f8 <__assert_fail@plt+0x19e0>
   126f8:	push	{fp, lr}
   126fc:	mov	fp, sp
   12700:	mov	r4, r0
   12704:	movw	r0, #37100	; 0x90ec
   12708:	movt	r0, #2
   1270c:	ldr	r0, [r0]
   12710:	cmp	r0, #0
   12714:	beq	1271c <__assert_fail@plt+0x1a04>
   12718:	blx	r0
   1271c:	bl	1298c <error@@Base+0x264>
   12720:	mov	r0, r4
   12724:	bl	10c64 <exit@plt>

00012728 <error@@Base>:
   12728:	push	{fp, lr}
   1272c:	mov	fp, sp
   12730:	mov	r3, r0
   12734:	movw	r0, #37096	; 0x90e8
   12738:	movt	r0, #2
   1273c:	ldr	r2, [r0]
   12740:	movw	r0, #28872	; 0x70c8
   12744:	movt	r0, #2
   12748:	ldr	r0, [r0]
   1274c:	movw	r1, #26272	; 0x66a0
   12750:	movt	r1, #1
   12754:	bl	10c88 <fprintf@plt>
   12758:	movw	r0, #28864	; 0x70c0
   1275c:	movt	r0, #2
   12760:	ldr	r0, [r0]
   12764:	bl	126f8 <__assert_fail@plt+0x19e0>
   12768:	push	{fp, lr}
   1276c:	mov	fp, sp
   12770:	sub	sp, sp, #8
   12774:	mov	r3, r0
   12778:	movw	r0, #37096	; 0x90e8
   1277c:	movt	r0, #2
   12780:	ldr	r2, [r0]
   12784:	movw	r0, #28872	; 0x70c8
   12788:	movt	r0, #2
   1278c:	ldr	r0, [r0]
   12790:	str	r1, [sp]
   12794:	movw	r1, #26280	; 0x66a8
   12798:	movt	r1, #1
   1279c:	bl	10c88 <fprintf@plt>
   127a0:	movw	r0, #28864	; 0x70c0
   127a4:	movt	r0, #2
   127a8:	ldr	r0, [r0]
   127ac:	bl	126f8 <__assert_fail@plt+0x19e0>
   127b0:	push	{fp, lr}
   127b4:	mov	fp, sp
   127b8:	sub	sp, sp, #8
   127bc:	mov	r3, r0
   127c0:	movw	r0, #37096	; 0x90e8
   127c4:	movt	r0, #2
   127c8:	ldr	r2, [r0]
   127cc:	movw	r0, #28872	; 0x70c8
   127d0:	movt	r0, #2
   127d4:	ldr	r0, [r0]
   127d8:	str	r1, [sp]
   127dc:	movw	r1, #26280	; 0x66a8
   127e0:	movt	r1, #1
   127e4:	bl	10c88 <fprintf@plt>
   127e8:	mov	sp, fp
   127ec:	pop	{fp, pc}
   127f0:	push	{r4, sl, fp, lr}
   127f4:	add	fp, sp, #8
   127f8:	movw	r4, #10268	; 0x281c
   127fc:	movt	r4, #1
   12800:	mov	r0, #2
   12804:	mov	r1, r4
   12808:	bl	10c40 <__sysv_signal@plt>
   1280c:	mov	r0, #15
   12810:	mov	r1, r4
   12814:	pop	{r4, sl, fp, lr}
   12818:	b	10c40 <__sysv_signal@plt>
   1281c:	movw	r0, #29002	; 0x714a
   12820:	movt	r0, #2
   12824:	ldrb	r1, [r0]
   12828:	cmp	r1, #1
   1282c:	bxeq	lr
   12830:	push	{fp, lr}
   12834:	mov	fp, sp
   12838:	mov	r1, #1
   1283c:	strb	r1, [r0]
   12840:	movw	r0, #26307	; 0x66c3
   12844:	movt	r0, #1
   12848:	bl	12728 <error@@Base>
   1284c:	push	{fp, lr}
   12850:	mov	fp, sp
   12854:	mov	r3, r0
   12858:	movw	r0, #37092	; 0x90e4
   1285c:	movt	r0, #2
   12860:	ldr	r0, [r0]
   12864:	cmp	r0, #0
   12868:	bne	12894 <error@@Base+0x16c>
   1286c:	movw	r0, #37096	; 0x90e8
   12870:	movt	r0, #2
   12874:	ldr	r2, [r0]
   12878:	movw	r0, #28872	; 0x70c8
   1287c:	movt	r0, #2
   12880:	ldr	r0, [r0]
   12884:	movw	r1, #26328	; 0x66d8
   12888:	movt	r1, #1
   1288c:	bl	10c88 <fprintf@plt>
   12890:	bl	126e8 <__assert_fail@plt+0x19d0>
   12894:	blx	r0
   12898:	bl	126e8 <__assert_fail@plt+0x19d0>
   1289c:	push	{r4, sl, fp, lr}
   128a0:	add	fp, sp, #8
   128a4:	mov	ip, r0
   128a8:	cmp	r2, #0
   128ac:	ldrbne	r0, [r2]
   128b0:	cmpne	r0, #0
   128b4:	bne	128c8 <error@@Base+0x1a0>
   128b8:	movw	r0, #26343	; 0x66e7
   128bc:	movt	r0, #1
   128c0:	mov	r1, ip
   128c4:	bl	12768 <error@@Base+0x40>
   128c8:	ldrb	lr, [ip, #1]
   128cc:	mov	r3, #0
   128d0:	cmp	lr, r0
   128d4:	beq	128fc <error@@Base+0x1d4>
   128d8:	mov	r0, #1
   128dc:	sxth	r3, r0
   128e0:	add	r4, r3, r3, lsl #1
   128e4:	ldrb	r4, [r2, r4, lsl #2]
   128e8:	cmp	r4, #0
   128ec:	beq	128b8 <error@@Base+0x190>
   128f0:	add	r0, r0, #1
   128f4:	cmp	lr, r4
   128f8:	bne	128dc <error@@Base+0x1b4>
   128fc:	add	r0, r3, r3, lsl #1
   12900:	add	r3, r2, r0, lsl #2
   12904:	ldr	r0, [r3, #4]
   12908:	cmp	r0, #0
   1290c:	beq	1294c <error@@Base+0x224>
   12910:	mov	r2, ip
   12914:	ldrb	lr, [r2, #2]!
   12918:	cmp	r1, #0
   1291c:	cmpeq	lr, #0
   12920:	beq	1294c <error@@Base+0x224>
   12924:	ldr	r3, [r0]
   12928:	cmp	r3, #0
   1292c:	bne	1297c <error@@Base+0x254>
   12930:	cmp	lr, #0
   12934:	movne	r1, r2
   12938:	str	r1, [r0]
   1293c:	ldrb	r0, [r2]
   12940:	clz	r0, r0
   12944:	lsr	r0, r0, #5
   12948:	pop	{r4, sl, fp, pc}
   1294c:	ldr	r0, [r3, #8]
   12950:	cmp	r0, #0
   12954:	beq	128b8 <error@@Base+0x190>
   12958:	ldrb	r1, [ip, #2]
   1295c:	cmp	r1, #0
   12960:	bne	128b8 <error@@Base+0x190>
   12964:	ldrb	r1, [r0]
   12968:	cmp	r1, #0
   1296c:	moveq	r1, #1
   12970:	strbeq	r1, [r0]
   12974:	moveq	r0, #0
   12978:	popeq	{r4, sl, fp, pc}
   1297c:	movw	r0, #26358	; 0x66f6
   12980:	movt	r0, #1
   12984:	mov	r1, ip
   12988:	bl	12768 <error@@Base+0x40>
   1298c:	push	{r4, r5, r6, sl, fp, lr}
   12990:	add	fp, sp, #16
   12994:	movw	r5, #29000	; 0x7148
   12998:	movt	r5, #2
   1299c:	ldrsh	r0, [r5]
   129a0:	cmp	r0, #1
   129a4:	poplt	{r4, r5, r6, sl, fp, pc}
   129a8:	mov	r6, #1
   129ac:	sxth	r0, r6
   129b0:	bl	1251c <__assert_fail@plt+0x1804>
   129b4:	mov	r4, r0
   129b8:	bl	10bd4 <unlink@plt>
   129bc:	mov	r0, r4
   129c0:	bl	10b8c <free@plt>
   129c4:	add	r0, r6, #1
   129c8:	sxth	r6, r0
   129cc:	ldrsh	r0, [r5]
   129d0:	cmp	r6, r0
   129d4:	ble	129ac <error@@Base+0x284>
   129d8:	pop	{r4, r5, r6, sl, fp, pc}
   129dc:	push	{r4, r5, r6, sl, fp, lr}
   129e0:	add	fp, sp, #16
   129e4:	mov	r4, r2
   129e8:	mov	r5, r1
   129ec:	mov	r6, r0
   129f0:	mov	r0, #1
   129f4:	mov	r1, #16
   129f8:	bl	12388 <__assert_fail@plt+0x1670>
   129fc:	mov	r1, r0
   12a00:	strb	r5, [r0, #8]
   12a04:	str	r4, [r0, #12]
   12a08:	mov	r0, r6
   12a0c:	pop	{r4, r5, r6, sl, fp, lr}
   12a10:	b	11088 <__assert_fail@plt+0x370>
   12a14:	push	{r4, r5, r6, r7, fp, lr}
   12a18:	add	fp, sp, #16
   12a1c:	mov	r5, r2
   12a20:	mov	r2, r1
   12a24:	mov	r4, r0
   12a28:	cmp	r1, #0
   12a2c:	bne	12a3c <error@@Base+0x314>
   12a30:	ldrb	r0, [r5]
   12a34:	cmp	r0, #0
   12a38:	bne	12ad4 <error@@Base+0x3ac>
   12a3c:	ldr	r7, [r4, #4]
   12a40:	movw	r1, #26577	; 0x67d1
   12a44:	movt	r1, #1
   12a48:	mov	r0, r2
   12a4c:	bl	12424 <__assert_fail@plt+0x170c>
   12a50:	mov	r6, r0
   12a54:	ldrb	r0, [r5]
   12a58:	cmp	r0, #0
   12a5c:	beq	12a6c <error@@Base+0x344>
   12a60:	mov	r0, r6
   12a64:	bl	12ae8 <error@@Base+0x3c0>
   12a68:	strb	r0, [r5, #11]
   12a6c:	ldrb	r2, [r5, #1]
   12a70:	ldr	r3, [r5, #4]
   12a74:	cmp	r3, #0
   12a78:	movweq	r3, #94	; 0x5e
   12a7c:	mov	r0, r6
   12a80:	mov	r1, r4
   12a84:	bl	12b94 <error@@Base+0x46c>
   12a88:	mov	r0, r6
   12a8c:	bl	1249c <__assert_fail@plt+0x1784>
   12a90:	ldrb	r0, [r5, #9]
   12a94:	cmp	r0, #0
   12a98:	beq	12ab4 <error@@Base+0x38c>
   12a9c:	cmp	r7, #0
   12aa0:	mov	r0, r4
   12aa4:	addne	r0, r7, #4
   12aa8:	ldr	r1, [r0]
   12aac:	mov	r0, r4
   12ab0:	bl	12c9c <error@@Base+0x574>
   12ab4:	ldrb	r0, [r5, #10]
   12ab8:	cmp	r0, #0
   12abc:	popeq	{r4, r5, r6, r7, fp, pc}
   12ac0:	cmp	r7, #0
   12ac4:	addne	r4, r7, #4
   12ac8:	ldr	r0, [r4]
   12acc:	pop	{r4, r5, r6, r7, fp, lr}
   12ad0:	b	12d84 <error@@Base+0x65c>
   12ad4:	movw	r0, #26375	; 0x6707
   12ad8:	movt	r0, #1
   12adc:	movw	r1, #26391	; 0x6717
   12ae0:	movt	r1, #1
   12ae4:	bl	12768 <error@@Base+0x40>
   12ae8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12aec:	add	fp, sp, #24
   12af0:	sub	sp, sp, #104	; 0x68
   12af4:	mov	r4, r0
   12af8:	add	r0, sp, #4
   12afc:	mov	r1, #99	; 0x63
   12b00:	mov	r2, r4
   12b04:	bl	10ba4 <fgets@plt>
   12b08:	cmp	r0, #0
   12b0c:	beq	12b2c <error@@Base+0x404>
   12b10:	add	r0, sp, #4
   12b14:	movw	r1, #26443	; 0x674b
   12b18:	movt	r1, #1
   12b1c:	mov	r2, #51	; 0x33
   12b20:	bl	10cf4 <strncmp@plt>
   12b24:	cmp	r0, #0
   12b28:	beq	12b44 <error@@Base+0x41c>
   12b2c:	mov	r0, r4
   12b30:	bl	10bc8 <rewind@plt>
   12b34:	mov	r7, #0
   12b38:	mov	r0, r7
   12b3c:	sub	sp, fp, #24
   12b40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12b44:	mov	r6, #0
   12b48:	add	r5, sp, #4
   12b4c:	movw	r8, #26499	; 0x6783
   12b50:	movt	r8, #1
   12b54:	mov	r7, #1
   12b58:	mov	r0, r5
   12b5c:	mov	r1, #99	; 0x63
   12b60:	mov	r2, r4
   12b64:	bl	10ba4 <fgets@plt>
   12b68:	cmp	r0, #0
   12b6c:	beq	12b38 <error@@Base+0x410>
   12b70:	mov	r0, r5
   12b74:	mov	r1, r8
   12b78:	bl	10b68 <strcmp@plt>
   12b7c:	cmp	r0, #0
   12b80:	addeq	r6, r6, #1
   12b84:	sxth	r6, r6
   12b88:	cmp	r6, #2
   12b8c:	blt	12b58 <error@@Base+0x430>
   12b90:	b	12b38 <error@@Base+0x410>
   12b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b98:	add	fp, sp, #28
   12b9c:	sub	sp, sp, #20
   12ba0:	str	r3, [sp, #8]
   12ba4:	mov	r5, r2
   12ba8:	str	r1, [sp, #4]
   12bac:	mov	r9, r0
   12bb0:	bl	10d0c <getc@plt>
   12bb4:	cmn	r0, #1
   12bb8:	beq	12c74 <error@@Base+0x54c>
   12bbc:	uxtb	r8, r5
   12bc0:	add	r4, sp, #16
   12bc4:	add	r1, r4, #1
   12bc8:	str	r1, [sp]
   12bcc:	mov	r7, #0
   12bd0:	movw	r6, #28160	; 0x6e00
   12bd4:	movt	r6, #2
   12bd8:	add	r1, r6, r0
   12bdc:	ldrsb	sl, [r1]
   12be0:	cmp	sl, #0
   12be4:	ble	12c7c <error@@Base+0x554>
   12be8:	strb	r0, [sp, #16]
   12bec:	cmp	sl, #1
   12bf0:	beq	12c1c <error@@Base+0x4f4>
   12bf4:	mov	r5, r8
   12bf8:	sub	r8, sl, #1
   12bfc:	ldr	r0, [sp]
   12c00:	mov	r1, #1
   12c04:	mov	r2, r8
   12c08:	mov	r3, r9
   12c0c:	bl	10c04 <fread@plt>
   12c10:	cmp	r0, r8
   12c14:	mov	r8, r5
   12c18:	bne	12c90 <error@@Base+0x568>
   12c1c:	mov	r0, r4
   12c20:	mov	r1, #4
   12c24:	add	r2, sp, #12
   12c28:	bl	10c10 <utf8proc_iterate@plt>
   12c2c:	cmp	r0, sl
   12c30:	bne	12c88 <error@@Base+0x560>
   12c34:	ldr	r2, [sp, #12]
   12c38:	cmp	r8, #0
   12c3c:	beq	12c50 <error@@Base+0x528>
   12c40:	mov	r5, #1
   12c44:	ldr	r0, [sp, #8]
   12c48:	cmp	r2, r0
   12c4c:	beq	12c60 <error@@Base+0x538>
   12c50:	ldr	r0, [sp, #4]
   12c54:	mov	r1, r7
   12c58:	bl	129dc <error@@Base+0x2b4>
   12c5c:	mov	r5, #0
   12c60:	mov	r0, r9
   12c64:	bl	10d0c <getc@plt>
   12c68:	cmn	r0, #1
   12c6c:	mov	r7, r5
   12c70:	bne	12bd8 <error@@Base+0x4b0>
   12c74:	sub	sp, fp, #28
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	movw	r0, #26555	; 0x67bb
   12c80:	movt	r0, #1
   12c84:	bl	12728 <error@@Base>
   12c88:	bl	10cdc <utf8proc_errmsg@plt>
   12c8c:	bl	12728 <error@@Base>
   12c90:	movw	r0, #26579	; 0x67d3
   12c94:	movt	r0, #1
   12c98:	bl	12728 <error@@Base>
   12c9c:	push	{r4, r5, r6, r7, fp, lr}
   12ca0:	add	fp, sp, #16
   12ca4:	cmp	r1, #0
   12ca8:	popeq	{r4, r5, r6, r7, fp, pc}
   12cac:	mov	r5, r1
   12cb0:	mov	r4, r0
   12cb4:	mov	r6, #32
   12cb8:	mov	r7, r1
   12cbc:	ldr	r0, [r7, #12]
   12cc0:	bl	13060 <error@@Base+0x938>
   12cc4:	cmp	r0, #0
   12cc8:	strne	r6, [r7, #12]
   12ccc:	ldr	r7, [r7, #4]
   12cd0:	cmp	r7, #0
   12cd4:	bne	12cbc <error@@Base+0x594>
   12cd8:	mov	r6, #0
   12cdc:	b	12cf0 <error@@Base+0x5c8>
   12ce0:	mov	r0, #1
   12ce4:	cmp	r1, #32
   12ce8:	beq	12d18 <error@@Base+0x5f0>
   12cec:	b	12d58 <error@@Base+0x630>
   12cf0:	ldr	r7, [r5, #4]
   12cf4:	ldr	r1, [r5, #12]
   12cf8:	cmp	r1, #32
   12cfc:	bne	12d44 <error@@Base+0x61c>
   12d00:	tst	r6, #255	; 0xff
   12d04:	beq	12d18 <error@@Base+0x5f0>
   12d08:	cmp	r7, #0
   12d0c:	ldrne	r1, [r7, #12]
   12d10:	cmpne	r1, #10
   12d14:	bne	12ce0 <error@@Base+0x5b8>
   12d18:	tst	r6, #255	; 0xff
   12d1c:	cmpne	r7, #0
   12d20:	beq	12d60 <error@@Base+0x638>
   12d24:	ldr	r0, [r7, #12]
   12d28:	cmp	r0, #32
   12d2c:	bne	12d60 <error@@Base+0x638>
   12d30:	ldrb	r0, [r5, #8]
   12d34:	ldrb	r1, [r7, #8]
   12d38:	orr	r0, r1, r0
   12d3c:	strb	r0, [r7, #8]
   12d40:	b	12d60 <error@@Base+0x638>
   12d44:	subs	r0, r1, #10
   12d48:	movwne	r0, #1
   12d4c:	tst	r6, #255	; 0xff
   12d50:	cmpeq	r1, #10
   12d54:	beq	12d60 <error@@Base+0x638>
   12d58:	mov	r6, r0
   12d5c:	b	12d74 <error@@Base+0x64c>
   12d60:	mov	r0, r4
   12d64:	mov	r1, r5
   12d68:	bl	110b0 <__assert_fail@plt+0x398>
   12d6c:	mov	r0, r5
   12d70:	bl	10b8c <free@plt>
   12d74:	cmp	r7, #0
   12d78:	mov	r5, r7
   12d7c:	bne	12cf0 <error@@Base+0x5c8>
   12d80:	pop	{r4, r5, r6, r7, fp, pc}
   12d84:	push	{r4, sl, fp, lr}
   12d88:	add	fp, sp, #8
   12d8c:	cmp	r0, #0
   12d90:	popeq	{r4, sl, fp, pc}
   12d94:	mov	r4, r0
   12d98:	ldr	r0, [r4, #12]
   12d9c:	bl	10be0 <utf8proc_tolower@plt>
   12da0:	str	r0, [r4, #12]
   12da4:	ldr	r4, [r4, #4]
   12da8:	cmp	r4, #0
   12dac:	bne	12d98 <error@@Base+0x670>
   12db0:	pop	{r4, sl, fp, pc}
   12db4:	push	{fp, lr}
   12db8:	mov	fp, sp
   12dbc:	bl	10bb0 <utf8proc_encode_char@plt>
   12dc0:	cmp	r0, #0
   12dc4:	sxtbgt	r0, r0
   12dc8:	popgt	{fp, pc}
   12dcc:	movw	r0, #26401	; 0x6721
   12dd0:	movt	r0, #1
   12dd4:	bl	12728 <error@@Base>
   12dd8:	push	{r4, r5, r6, r7, fp, lr}
   12ddc:	add	fp, sp, #16
   12de0:	mov	r7, r3
   12de4:	mov	r4, r2
   12de8:	mov	r5, r1
   12dec:	tst	r0, #255	; 0xff
   12df0:	beq	12e30 <error@@Base+0x708>
   12df4:	mov	r0, #94	; 0x5e
   12df8:	mov	r1, r4
   12dfc:	bl	12db4 <error@@Base+0x68c>
   12e00:	mov	r6, r0
   12e04:	cmp	r5, #10
   12e08:	bne	12e3c <error@@Base+0x714>
   12e0c:	movw	r0, #26291	; 0x66b3
   12e10:	movt	r0, #1
   12e14:	movw	r1, #26424	; 0x6738
   12e18:	movt	r1, #1
   12e1c:	tst	r7, #255	; 0xff
   12e20:	moveq	r1, r0
   12e24:	add	r0, r4, r6
   12e28:	pop	{r4, r5, r6, r7, fp, lr}
   12e2c:	b	10cc4 <sprintf@plt>
   12e30:	mov	r6, #0
   12e34:	cmp	r5, #10
   12e38:	beq	12e0c <error@@Base+0x6e4>
   12e3c:	mov	r0, r5
   12e40:	bl	12eb4 <error@@Base+0x78c>
   12e44:	cmp	r0, #0
   12e48:	beq	12e88 <error@@Base+0x760>
   12e4c:	mov	r0, r5
   12e50:	bl	12ef4 <error@@Base+0x7cc>
   12e54:	cmp	r0, #0
   12e58:	beq	12e6c <error@@Base+0x744>
   12e5c:	add	r1, r4, r6
   12e60:	movw	r0, #9676	; 0x25cc
   12e64:	bl	12db4 <error@@Base+0x68c>
   12e68:	add	r6, r6, r0
   12e6c:	add	r1, r4, r6
   12e70:	mov	r0, r5
   12e74:	bl	12db4 <error@@Base+0x68c>
   12e78:	add	r0, r6, r0
   12e7c:	mov	r1, #0
   12e80:	strb	r1, [r4, r0]
   12e84:	pop	{r4, r5, r6, r7, fp, pc}
   12e88:	add	r0, r4, r6
   12e8c:	cmp	r5, #255	; 0xff
   12e90:	bhi	12ea0 <error@@Base+0x778>
   12e94:	movw	r1, #26429	; 0x673d
   12e98:	movt	r1, #1
   12e9c:	b	12ea8 <error@@Base+0x780>
   12ea0:	movw	r1, #26436	; 0x6744
   12ea4:	movt	r1, #1
   12ea8:	mov	r2, r5
   12eac:	pop	{r4, r5, r6, r7, fp, lr}
   12eb0:	b	10cc4 <sprintf@plt>
   12eb4:	push	{r4, sl, fp, lr}
   12eb8:	add	fp, sp, #8
   12ebc:	mov	r4, r0
   12ec0:	bl	10b98 <utf8proc_get_property@plt>
   12ec4:	mov	r1, r0
   12ec8:	mov	r0, #1
   12ecc:	cmp	r4, #32
   12ed0:	popeq	{r4, sl, fp, pc}
   12ed4:	ldrsh	r1, [r1]
   12ed8:	sub	r2, r1, #1
   12edc:	cmp	r2, #22
   12ee0:	bcs	12ee8 <error@@Base+0x7c0>
   12ee4:	pop	{r4, sl, fp, pc}
   12ee8:	cmp	r1, #29
   12eec:	movne	r0, #0
   12ef0:	pop	{r4, sl, fp, pc}
   12ef4:	push	{fp, lr}
   12ef8:	mov	fp, sp
   12efc:	bl	10c70 <utf8proc_category@plt>
   12f00:	sub	r1, r0, #6
   12f04:	mov	r0, #0
   12f08:	cmp	r1, #3
   12f0c:	movwcc	r0, #1
   12f10:	pop	{fp, pc}
   12f14:	push	{r4, r5, r6, r7, fp, lr}
   12f18:	add	fp, sp, #16
   12f1c:	sub	sp, sp, #16
   12f20:	mov	r6, r2
   12f24:	mov	r2, r1
   12f28:	mov	r5, r0
   12f2c:	movw	r1, #12794	; 0x31fa
   12f30:	movt	r1, #1
   12f34:	mov	r0, r2
   12f38:	bl	12424 <__assert_fail@plt+0x170c>
   12f3c:	mov	r4, r0
   12f40:	cmp	r6, #0
   12f44:	beq	12f98 <error@@Base+0x870>
   12f48:	movw	r0, #26443	; 0x674b
   12f4c:	movt	r0, #1
   12f50:	mov	r1, #55	; 0x37
   12f54:	mov	r2, #1
   12f58:	mov	r3, r4
   12f5c:	bl	10bf8 <fwrite@plt>
   12f60:	movw	r7, #26499	; 0x6783
   12f64:	movt	r7, #1
   12f68:	mov	r0, r7
   12f6c:	mov	r1, #55	; 0x37
   12f70:	mov	r2, #1
   12f74:	mov	r3, r4
   12f78:	bl	10bf8 <fwrite@plt>
   12f7c:	mov	r0, r4
   12f80:	blx	r6
   12f84:	mov	r0, r7
   12f88:	mov	r1, #55	; 0x37
   12f8c:	mov	r2, #1
   12f90:	mov	r3, r4
   12f94:	bl	10bf8 <fwrite@plt>
   12f98:	ldr	r6, [r5]
   12f9c:	cmp	r6, #0
   12fa0:	beq	12fd4 <error@@Base+0x8ac>
   12fa4:	add	r5, sp, #7
   12fa8:	ldr	r1, [r6, #12]
   12fac:	ldrb	r0, [r6, #8]
   12fb0:	mov	r2, r5
   12fb4:	mov	r3, #0
   12fb8:	bl	12dd8 <error@@Base+0x6b0>
   12fbc:	mov	r0, r5
   12fc0:	mov	r1, r4
   12fc4:	bl	10ce8 <fputs@plt>
   12fc8:	ldr	r6, [r6, #4]
   12fcc:	cmp	r6, #0
   12fd0:	bne	12fa8 <error@@Base+0x880>
   12fd4:	mov	r0, r4
   12fd8:	bl	1249c <__assert_fail@plt+0x1784>
   12fdc:	sub	sp, fp, #16
   12fe0:	pop	{r4, r5, r6, r7, fp, pc}
   12fe4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12fe8:	add	fp, sp, #24
   12fec:	sub	sp, sp, #8
   12ff0:	mov	r6, r0
   12ff4:	mov	r0, #0
   12ff8:	str	r0, [sp, #4]
   12ffc:	ldrb	r0, [r1]
   13000:	mov	r8, #1
   13004:	cmp	r0, #0
   13008:	beq	13054 <error@@Base+0x92c>
   1300c:	mov	r5, r1
   13010:	add	r7, sp, #4
   13014:	mov	r0, r5
   13018:	mvn	r1, #0
   1301c:	mov	r2, r7
   13020:	bl	10c10 <utf8proc_iterate@plt>
   13024:	cmp	r0, #1
   13028:	blt	13050 <error@@Base+0x928>
   1302c:	mov	r4, r0
   13030:	ldr	r2, [sp, #4]
   13034:	mov	r0, r6
   13038:	mov	r1, #0
   1303c:	bl	129dc <error@@Base+0x2b4>
   13040:	ldrb	r0, [r5, r4]!
   13044:	cmp	r0, #0
   13048:	bne	13014 <error@@Base+0x8ec>
   1304c:	b	13054 <error@@Base+0x92c>
   13050:	mov	r8, #0
   13054:	mov	r0, r8
   13058:	sub	sp, fp, #24
   1305c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13060:	push	{r4, sl, fp, lr}
   13064:	add	fp, sp, #8
   13068:	mov	r4, r0
   1306c:	bl	10b98 <utf8proc_get_property@plt>
   13070:	cmp	r4, #10
   13074:	ble	13090 <error@@Base+0x968>
   13078:	sub	r1, r4, #11
   1307c:	cmp	r1, #3
   13080:	bcc	130ac <error@@Base+0x984>
   13084:	cmp	r4, #160	; 0xa0
   13088:	beq	130ac <error@@Base+0x984>
   1308c:	b	130b8 <error@@Base+0x990>
   13090:	cmp	r4, #9
   13094:	beq	130ac <error@@Base+0x984>
   13098:	mov	r1, #0
   1309c:	cmp	r4, #10
   130a0:	bne	130b8 <error@@Base+0x990>
   130a4:	mov	r0, r1
   130a8:	pop	{r4, sl, fp, pc}
   130ac:	mov	r1, #1
   130b0:	mov	r0, r1
   130b4:	pop	{r4, sl, fp, pc}
   130b8:	ldrsh	r0, [r0]
   130bc:	sub	r0, r0, #23
   130c0:	mov	r1, #0
   130c4:	cmp	r0, #3
   130c8:	movwcc	r1, #1
   130cc:	mov	r0, r1
   130d0:	pop	{r4, sl, fp, pc}
   130d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130d8:	mov	r7, r0
   130dc:	ldr	r6, [pc, #72]	; 1312c <error@@Base+0xa04>
   130e0:	ldr	r5, [pc, #72]	; 13130 <error@@Base+0xa08>
   130e4:	add	r6, pc, r6
   130e8:	add	r5, pc, r5
   130ec:	sub	r6, r6, r5
   130f0:	mov	r8, r1
   130f4:	mov	r9, r2
   130f8:	bl	10b3c <calloc@plt-0x20>
   130fc:	asrs	r6, r6, #2
   13100:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13104:	mov	r4, #0
   13108:	add	r4, r4, #1
   1310c:	ldr	r3, [r5], #4
   13110:	mov	r2, r9
   13114:	mov	r1, r8
   13118:	mov	r0, r7
   1311c:	blx	r3
   13120:	cmp	r6, r4
   13124:	bne	13108 <error@@Base+0x9e0>
   13128:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1312c:	andeq	r3, r1, r0, lsl sp
   13130:	andeq	r3, r1, r8, lsl #26
   13134:	bx	lr
   13138:	mov	r2, r1
   1313c:	mov	r1, r0
   13140:	mov	r0, #3
   13144:	b	10bec <__xstat@plt>

Disassembly of section .fini:

00013148 <.fini>:
   13148:	push	{r3, lr}
   1314c:	pop	{r3, pc}
