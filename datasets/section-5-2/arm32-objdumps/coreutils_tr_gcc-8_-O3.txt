
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	11c6c <__assert_fail@plt+0xd58>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	fp, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #110592	; 0x1b000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #110592	; 0x1b000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <strcmp@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #110592	; 0x1b000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <posix_fadvise64@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #110592	; 0x1b000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <read@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #110592	; 0x1b000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <fflush@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #110592	; 0x1b000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #110592	; 0x1b000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #110592	; 0x1b000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #110592	; 0x1b000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <__strtoull_internal@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #110592	; 0x1b000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <mbsinit@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #110592	; 0x1b000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <fwrite_unlocked@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #110592	; 0x1b000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <memcmp@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #110592	; 0x1b000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <stpcpy@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #110592	; 0x1b000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <fputc_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #110592	; 0x1b000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <dcgettext@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #110592	; 0x1b000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <realloc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #110592	; 0x1b000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <textdomain@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #110592	; 0x1b000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <iswprint@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #110592	; 0x1b000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <fwrite@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #110592	; 0x1b000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <lseek64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #110592	; 0x1b000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <__ctype_get_mb_cur_max@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #110592	; 0x1b000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <__fpending@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #110592	; 0x1b000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <mbrtowc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #110592	; 0x1b000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <error@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #110592	; 0x1b000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <malloc@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #110592	; 0x1b000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__libc_start_main@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #110592	; 0x1b000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__freading@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #110592	; 0x1b000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <__ctype_tolower_loc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #110592	; 0x1b000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_toupper_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #110592	; 0x1b000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <__gmon_start__@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #110592	; 0x1b000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <getopt_long@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #110592	; 0x1b000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <__ctype_b_loc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #110592	; 0x1b000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <exit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #110592	; 0x1b000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <strlen@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #110592	; 0x1b000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <strchr@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #110592	; 0x1b000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <__errno_location@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #110592	; 0x1b000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <__sprintf_chk@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #110592	; 0x1b000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #110592	; 0x1b000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #110592	; 0x1b000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #110592	; 0x1b000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #110592	; 0x1b000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #110592	; 0x1b000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #110592	; 0x1b000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #110592	; 0x1b000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <setlocale@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #110592	; 0x1b000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <strrchr@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #110592	; 0x1b000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <nl_langinfo@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #110592	; 0x1b000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <bindtextdomain@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #110592	; 0x1b000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <strncmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #110592	; 0x1b000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <abort@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #110592	; 0x1b000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <close@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #110592	; 0x1b000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

00010f14 <__assert_fail@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #110592	; 0x1b000
   10f1c:	ldr	pc, [ip, #448]!	; 0x1c0

Disassembly of section .text:

00010f20 <.text>:
   10f20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f24:	movw	r5, #42464	; 0xa5e0
   10f28:	movt	r5, #1
   10f2c:	strd	r6, [sp, #8]
   10f30:	movw	r6, #49500	; 0xc15c
   10f34:	movt	r6, #2
   10f38:	strd	r8, [sp, #16]
   10f3c:	mov	r9, r0
   10f40:	mov	r8, r1
   10f44:	strd	sl, [sp, #24]
   10f48:	str	lr, [sp, #32]
   10f4c:	sub	sp, sp, #404	; 0x194
   10f50:	ldr	r0, [r1]
   10f54:	bl	13ad0 <__assert_fail@plt+0x2bbc>
   10f58:	movw	r1, #40756	; 0x9f34
   10f5c:	movt	r1, #1
   10f60:	ldr	r7, [pc, #3248]	; 11c18 <__assert_fail@plt+0xd04>
   10f64:	mov	r0, #6
   10f68:	bl	10ec0 <setlocale@plt>
   10f6c:	movw	r1, #42420	; 0xa5b4
   10f70:	movt	r1, #1
   10f74:	movw	r0, #42140	; 0xa49c
   10f78:	movt	r0, #1
   10f7c:	bl	10ee4 <bindtextdomain@plt>
   10f80:	movw	r0, #42140	; 0xa49c
   10f84:	movt	r0, #1
   10f88:	bl	10d70 <textdomain@plt>
   10f8c:	movw	r0, #14640	; 0x3930
   10f90:	movt	r0, #1
   10f94:	bl	196d8 <__assert_fail@plt+0x87c4>
   10f98:	mov	r4, #0
   10f9c:	mov	r3, r7
   10fa0:	mov	r2, r5
   10fa4:	mov	r1, r8
   10fa8:	mov	r0, r9
   10fac:	str	r4, [sp]
   10fb0:	bl	10e18 <getopt_long@plt>
   10fb4:	cmn	r0, #1
   10fb8:	beq	110a0 <__assert_fail@plt+0x18c>
   10fbc:	cmp	r0, #67	; 0x43
   10fc0:	beq	11038 <__assert_fail@plt+0x124>
   10fc4:	ble	10fe8 <__assert_fail@plt+0xd4>
   10fc8:	cmp	r0, #100	; 0x64
   10fcc:	beq	11054 <__assert_fail@plt+0x140>
   10fd0:	ble	11030 <__assert_fail@plt+0x11c>
   10fd4:	cmp	r0, #115	; 0x73
   10fd8:	bne	1101c <__assert_fail@plt+0x108>
   10fdc:	mov	r3, #1
   10fe0:	strb	r3, [r6, #770]	; 0x302
   10fe4:	b	10f98 <__assert_fail@plt+0x84>
   10fe8:	cmn	r0, #2
   10fec:	beq	11a54 <__assert_fail@plt+0xb40>
   10ff0:	cmp	r0, #65	; 0x41
   10ff4:	bne	11044 <__assert_fail@plt+0x130>
   10ff8:	movw	r1, #42444	; 0xa5cc
   10ffc:	movt	r1, #1
   11000:	mov	r0, #3
   11004:	bl	10ec0 <setlocale@plt>
   11008:	mov	r0, r4
   1100c:	movw	r1, #42444	; 0xa5cc
   11010:	movt	r1, #1
   11014:	bl	10ec0 <setlocale@plt>
   11018:	b	10f98 <__assert_fail@plt+0x84>
   1101c:	cmp	r0, #116	; 0x74
   11020:	bne	1104c <__assert_fail@plt+0x138>
   11024:	mov	r3, #1
   11028:	strb	r3, [r6, #771]	; 0x303
   1102c:	b	10f98 <__assert_fail@plt+0x84>
   11030:	cmp	r0, #99	; 0x63
   11034:	bne	1104c <__assert_fail@plt+0x138>
   11038:	mov	r3, #1
   1103c:	strb	r3, [r6, #768]	; 0x300
   11040:	b	10f98 <__assert_fail@plt+0x84>
   11044:	cmn	r0, #3
   11048:	beq	11060 <__assert_fail@plt+0x14c>
   1104c:	mov	r0, #1
   11050:	bl	13588 <__assert_fail@plt+0x2674>
   11054:	mov	r3, #1
   11058:	strb	r3, [r6, #769]	; 0x301
   1105c:	b	10f98 <__assert_fail@plt+0x84>
   11060:	movw	r2, #42448	; 0xa5d0
   11064:	movt	r2, #1
   11068:	movw	r3, #49388	; 0xc0ec
   1106c:	movt	r3, #2
   11070:	movw	r0, #49492	; 0xc154
   11074:	movt	r0, #2
   11078:	stm	sp, {r2, r4}
   1107c:	movw	r1, #39704	; 0x9b18
   11080:	movt	r1, #1
   11084:	ldr	r0, [r0]
   11088:	movw	r2, #42136	; 0xa498
   1108c:	movt	r2, #1
   11090:	ldr	r3, [r3]
   11094:	bl	17b88 <__assert_fail@plt+0x6c74>
   11098:	mov	r0, r4
   1109c:	bl	10e30 <exit@plt>
   110a0:	movw	sl, #49472	; 0xc140
   110a4:	movt	sl, #2
   110a8:	ldr	r7, [sl]
   110ac:	movw	r6, #49500	; 0xc15c
   110b0:	movt	r6, #2
   110b4:	ldrb	r3, [r6, #769]	; 0x301
   110b8:	ldrb	fp, [r6, #770]	; 0x302
   110bc:	sub	r7, r9, r7
   110c0:	cmp	r7, #2
   110c4:	beq	11470 <__assert_fail@plt+0x55c>
   110c8:	cmp	r3, fp
   110cc:	strb	r4, [r6, #772]	; 0x304
   110d0:	beq	11538 <__assert_fail@plt+0x624>
   110d4:	cmp	r3, fp
   110d8:	mov	r3, #1
   110dc:	bls	11a40 <__assert_fail@plt+0xb2c>
   110e0:	mov	r4, r3
   110e4:	cmp	r7, r3
   110e8:	blt	11b5c <__assert_fail@plt+0xc48>
   110ec:	cmp	r7, r4
   110f0:	bgt	11adc <__assert_fail@plt+0xbc8>
   110f4:	mov	r0, #24
   110f8:	add	r5, sp, #64	; 0x40
   110fc:	bl	17d98 <__assert_fail@plt+0x6e84>
   11100:	ldr	r3, [sl]
   11104:	mov	r4, #0
   11108:	mov	r1, r5
   1110c:	str	r0, [sp, #64]	; 0x40
   11110:	str	r4, [r0, #4]
   11114:	str	r0, [r5, #4]
   11118:	ldr	r0, [r8, r3, lsl #2]
   1111c:	bl	126e8 <__assert_fail@plt+0x17d4>
   11120:	cmp	r0, r4
   11124:	beq	11450 <__assert_fail@plt+0x53c>
   11128:	cmp	r7, #2
   1112c:	beq	114bc <__assert_fail@plt+0x5a8>
   11130:	mov	r0, r5
   11134:	bl	130cc <__assert_fail@plt+0x21b8>
   11138:	ldrb	r3, [r6, #768]	; 0x300
   1113c:	cmp	r3, #0
   11140:	bne	11540 <__assert_fail@plt+0x62c>
   11144:	ldr	sl, [sp, #88]	; 0x58
   11148:	cmp	sl, #0
   1114c:	movwne	r1, #42608	; 0xa670
   11150:	movtne	r1, #1
   11154:	bne	111ac <__assert_fail@plt+0x298>
   11158:	cmp	r4, #0
   1115c:	beq	1128c <__assert_fail@plt+0x378>
   11160:	mov	r0, r4
   11164:	ldrd	r8, [r5, #16]
   11168:	bl	130cc <__assert_fail@plt+0x21b8>
   1116c:	ldrd	r2, [r4, #16]
   11170:	ldr	r1, [r4, #24]
   11174:	cmp	r9, r3
   11178:	cmpeq	r8, r2
   1117c:	bcc	11188 <__assert_fail@plt+0x274>
   11180:	cmp	r1, #1
   11184:	beq	115cc <__assert_fail@plt+0x6b8>
   11188:	cmp	r1, #1
   1118c:	bhi	11ac0 <__assert_fail@plt+0xbac>
   11190:	ldrb	r3, [r6, #772]	; 0x304
   11194:	cmp	r3, #0
   11198:	bne	115f0 <__assert_fail@plt+0x6dc>
   1119c:	cmp	r1, #0
   111a0:	beq	1128c <__assert_fail@plt+0x378>
   111a4:	movw	r1, #43248	; 0xa8f0
   111a8:	movt	r1, #1
   111ac:	mov	r2, #5
   111b0:	mov	r0, #0
   111b4:	bl	10d58 <dcgettext@plt>
   111b8:	mov	r2, r0
   111bc:	mov	r1, #0
   111c0:	mov	r0, #1
   111c4:	bl	10dc4 <error@plt>
   111c8:	ldrb	r8, [r1, #8]
   111cc:	mov	r0, #24
   111d0:	ldr	r1, [sp, #24]
   111d4:	subs	sl, r1, r2
   111d8:	ldr	r1, [sp, #28]
   111dc:	sbc	r9, r1, r3
   111e0:	bl	17d98 <__assert_fail@plt+0x6e84>
   111e4:	ldr	r3, [r4, #4]
   111e8:	mov	r1, #0
   111ec:	mov	r2, #4
   111f0:	str	r2, [r0]
   111f4:	str	r1, [r0, #4]
   111f8:	strb	r8, [r0, #8]
   111fc:	cmp	r3, r1
   11200:	str	sl, [r0, #16]
   11204:	str	r9, [r0, #20]
   11208:	beq	11a68 <__assert_fail@plt+0xb54>
   1120c:	ldrb	r1, [r6, #768]	; 0x300
   11210:	str	r0, [r3, #4]
   11214:	ldrd	r2, [r5, #16]
   11218:	str	r0, [r4, #4]
   1121c:	cmp	r1, #0
   11220:	strd	r2, [r4, #16]
   11224:	beq	1128c <__assert_fail@plt+0x378>
   11228:	ldrb	r3, [sp, #97]	; 0x61
   1122c:	cmp	r3, #0
   11230:	beq	1128c <__assert_fail@plt+0x378>
   11234:	ldrd	r0, [r4, #16]
   11238:	ldrd	r2, [r5, #16]
   1123c:	cmp	r1, r3
   11240:	cmpeq	r0, r2
   11244:	bne	11a48 <__assert_fail@plt+0xb34>
   11248:	mvn	r2, #1
   1124c:	mvn	r3, #0
   11250:	mov	r1, #0
   11254:	mov	r0, r4
   11258:	strd	r2, [r4, #8]
   1125c:	bl	12000 <__assert_fail@plt+0x10ec>
   11260:	cmn	r0, #1
   11264:	mov	r8, r0
   11268:	bne	11278 <__assert_fail@plt+0x364>
   1126c:	b	11a48 <__assert_fail@plt+0xb34>
   11270:	cmp	r8, r0
   11274:	bne	11a48 <__assert_fail@plt+0xb34>
   11278:	mov	r1, #0
   1127c:	mov	r0, r4
   11280:	bl	12000 <__assert_fail@plt+0x10ec>
   11284:	cmn	r0, #1
   11288:	bne	11270 <__assert_fail@plt+0x35c>
   1128c:	movw	r3, #49488	; 0xc150
   11290:	movt	r3, #2
   11294:	mov	r1, #2
   11298:	ldr	r0, [r3]
   1129c:	bl	13a20 <__assert_fail@plt+0x2b0c>
   112a0:	ldrb	r3, [r6, #770]	; 0x302
   112a4:	mov	r8, r3
   112a8:	str	r3, [sp, #16]
   112ac:	cmp	r7, #1
   112b0:	movne	r8, #0
   112b4:	andeq	r8, r8, #1
   112b8:	cmp	r8, #0
   112bc:	bne	119a8 <__assert_fail@plt+0xa94>
   112c0:	ldrb	r3, [r6, #769]	; 0x301
   112c4:	cmp	r3, #0
   112c8:	beq	1132c <__assert_fail@plt+0x418>
   112cc:	cmp	r7, #1
   112d0:	beq	119e8 <__assert_fail@plt+0xad4>
   112d4:	ldr	r3, [sp, #16]
   112d8:	cmp	r7, #2
   112dc:	movne	r3, #0
   112e0:	andeq	r3, r3, #1
   112e4:	cmp	r3, #0
   112e8:	beq	1132c <__assert_fail@plt+0x418>
   112ec:	ldrb	r1, [r6, #768]	; 0x300
   112f0:	mov	r0, r5
   112f4:	ldr	r2, [pc, #2336]	; 11c1c <__assert_fail@plt+0xd08>
   112f8:	bl	12444 <__assert_fail@plt+0x1530>
   112fc:	mov	r0, r4
   11300:	mov	r1, r8
   11304:	ldr	r2, [pc, #2324]	; 11c20 <__assert_fail@plt+0xd0c>
   11308:	bl	12444 <__assert_fail@plt+0x1530>
   1130c:	movw	r0, #13400	; 0x3458
   11310:	movt	r0, #1
   11314:	bl	124cc <__assert_fail@plt+0x15b8>
   11318:	mov	r0, #0
   1131c:	bl	10f08 <close@plt>
   11320:	cmp	r0, #0
   11324:	bne	11acc <__assert_fail@plt+0xbb8>
   11328:	bl	10e30 <exit@plt>
   1132c:	ldrb	r3, [r6, #772]	; 0x304
   11330:	cmp	r3, #0
   11334:	beq	11318 <__assert_fail@plt+0x404>
   11338:	ldrb	r3, [r6, #768]	; 0x300
   1133c:	cmp	r3, #0
   11340:	ldreq	r2, [pc, #2268]	; 11c24 <__assert_fail@plt+0xd10>
   11344:	bne	118b0 <__assert_fail@plt+0x99c>
   11348:	strb	r3, [r2, #1]!
   1134c:	add	r3, r3, #1
   11350:	cmp	r3, #256	; 0x100
   11354:	bne	11348 <__assert_fail@plt+0x434>
   11358:	mvn	r2, #1
   1135c:	mvn	r3, #0
   11360:	mvn	sl, #3
   11364:	add	r1, sp, #144	; 0x90
   11368:	add	r9, sp, #60	; 0x3c
   1136c:	add	r7, r6, #256	; 0x100
   11370:	strd	r2, [r4, #8]
   11374:	mul	sl, r6, sl
   11378:	strd	r2, [r5, #8]
   1137c:	str	r1, [sp, #12]
   11380:	b	113ac <__assert_fail@plt+0x498>
   11384:	ldr	r3, [sp, #144]	; 0x90
   11388:	cmp	r3, #1
   1138c:	beq	114f8 <__assert_fail@plt+0x5e4>
   11390:	cmn	fp, #1
   11394:	cmnne	r0, #1
   11398:	beq	117c8 <__assert_fail@plt+0x8b4>
   1139c:	ldr	r3, [sp, #144]	; 0x90
   113a0:	strb	r0, [r6, fp]
   113a4:	cmp	r3, #2
   113a8:	bne	11424 <__assert_fail@plt+0x510>
   113ac:	mov	r1, r9
   113b0:	mov	r0, r5
   113b4:	bl	12000 <__assert_fail@plt+0x10ec>
   113b8:	mov	fp, r0
   113bc:	mov	r0, r4
   113c0:	ldr	r1, [sp, #12]
   113c4:	bl	12000 <__assert_fail@plt+0x10ec>
   113c8:	ldr	r3, [sp, #60]	; 0x3c
   113cc:	cmp	r3, #0
   113d0:	beq	11384 <__assert_fail@plt+0x470>
   113d4:	cmp	r3, #1
   113d8:	bne	11390 <__assert_fail@plt+0x47c>
   113dc:	ldr	r3, [sp, #144]	; 0x90
   113e0:	cmp	r3, #0
   113e4:	bne	11390 <__assert_fail@plt+0x47c>
   113e8:	bl	10e24 <__ctype_b_loc@plt>
   113ec:	ldr	fp, [r0]
   113f0:	mov	r8, r6
   113f4:	sub	fp, fp, #2
   113f8:	ldrh	r3, [fp, #2]!
   113fc:	tst	r3, #256	; 0x100
   11400:	beq	11418 <__assert_fail@plt+0x504>
   11404:	bl	10df4 <__ctype_tolower_loc@plt>
   11408:	ldr	r3, [r0]
   1140c:	add	r3, r3, r8, lsl #2
   11410:	ldr	r3, [r3, sl]
   11414:	strb	r3, [r8]
   11418:	add	r8, r8, #1
   1141c:	cmp	r8, r7
   11420:	bne	113f8 <__assert_fail@plt+0x4e4>
   11424:	ldr	r2, [sp, #68]	; 0x44
   11428:	mvn	r0, #0
   1142c:	mvn	r1, #0
   11430:	ldr	r3, [r4, #4]
   11434:	ldr	r2, [r2, #4]
   11438:	strd	r0, [r5, #8]
   1143c:	str	r2, [sp, #68]	; 0x44
   11440:	ldr	r3, [r3, #4]
   11444:	str	r3, [r4, #4]
   11448:	strd	r0, [r4, #8]
   1144c:	b	113ac <__assert_fail@plt+0x498>
   11450:	mov	r0, #1
   11454:	add	sp, sp, #404	; 0x194
   11458:	ldrd	r4, [sp]
   1145c:	ldrd	r6, [sp, #8]
   11460:	ldrd	r8, [sp, #16]
   11464:	ldrd	sl, [sp, #24]
   11468:	add	sp, sp, #32
   1146c:	pop	{pc}		; (ldr pc, [sp], #4)
   11470:	cmp	r3, r4
   11474:	bne	115a0 <__assert_fail@plt+0x68c>
   11478:	mov	r3, #1
   1147c:	cmp	fp, #0
   11480:	movne	r4, r7
   11484:	strb	r3, [r6, #772]	; 0x304
   11488:	bne	110ec <__assert_fail@plt+0x1d8>
   1148c:	mov	r0, #24
   11490:	add	r5, sp, #64	; 0x40
   11494:	bl	17d98 <__assert_fail@plt+0x6e84>
   11498:	ldr	r3, [sl]
   1149c:	mov	r1, r5
   114a0:	str	fp, [r0, #4]
   114a4:	str	r0, [sp, #64]	; 0x40
   114a8:	str	r0, [r5, #4]
   114ac:	ldr	r0, [r8, r3, lsl #2]
   114b0:	bl	126e8 <__assert_fail@plt+0x17d4>
   114b4:	cmp	r0, #0
   114b8:	beq	11450 <__assert_fail@plt+0x53c>
   114bc:	mov	r0, #24
   114c0:	bl	17d98 <__assert_fail@plt+0x6e84>
   114c4:	ldr	r3, [sl]
   114c8:	mov	r2, #0
   114cc:	add	r1, sp, #104	; 0x68
   114d0:	str	r0, [sp, #104]	; 0x68
   114d4:	str	r2, [r0, #4]
   114d8:	str	r0, [sp, #108]	; 0x6c
   114dc:	add	r3, r3, #1
   114e0:	ldr	r0, [r8, r3, lsl #2]
   114e4:	bl	126e8 <__assert_fail@plt+0x17d4>
   114e8:	cmp	r0, #0
   114ec:	beq	11450 <__assert_fail@plt+0x53c>
   114f0:	add	r4, sp, #104	; 0x68
   114f4:	b	11130 <__assert_fail@plt+0x21c>
   114f8:	bl	10e24 <__ctype_b_loc@plt>
   114fc:	ldr	fp, [r0]
   11500:	mov	r8, r6
   11504:	sub	fp, fp, #2
   11508:	ldrh	r3, [fp, #2]!
   1150c:	tst	r3, #512	; 0x200
   11510:	beq	11528 <__assert_fail@plt+0x614>
   11514:	bl	10e00 <__ctype_toupper_loc@plt>
   11518:	ldr	r3, [r0]
   1151c:	add	r3, r3, r8, lsl #2
   11520:	ldr	r3, [r3, sl]
   11524:	strb	r3, [r8]
   11528:	add	r8, r8, #1
   1152c:	cmp	r7, r8
   11530:	bne	11508 <__assert_fail@plt+0x5f4>
   11534:	b	11424 <__assert_fail@plt+0x510>
   11538:	mov	r3, #2
   1153c:	b	110e0 <__assert_fail@plt+0x1cc>
   11540:	mov	r2, #256	; 0x100
   11544:	mov	r1, #0
   11548:	add	r0, sp, #144	; 0x90
   1154c:	mov	r8, r2
   11550:	bl	10e78 <memset@plt>
   11554:	mvn	r2, #1
   11558:	mvn	r3, #0
   1155c:	mov	r9, #1
   11560:	strd	r2, [r5, #8]
   11564:	b	11580 <__assert_fail@plt+0x66c>
   11568:	add	r3, sp, #400	; 0x190
   1156c:	add	r0, r3, r0
   11570:	ldrb	r3, [r0, #-256]	; 0xffffff00
   11574:	strb	r9, [r0, #-256]	; 0xffffff00
   11578:	eor	r3, r3, #1
   1157c:	sub	r8, r8, r3
   11580:	mov	r1, #0
   11584:	mov	r0, r5
   11588:	bl	12000 <__assert_fail@plt+0x10ec>
   1158c:	cmn	r0, #1
   11590:	bne	11568 <__assert_fail@plt+0x654>
   11594:	asr	r9, r8, #31
   11598:	strd	r8, [r5, #16]
   1159c:	b	11144 <__assert_fail@plt+0x230>
   115a0:	cmp	fp, #0
   115a4:	strb	r4, [r6, #772]	; 0x304
   115a8:	beq	110d4 <__assert_fail@plt+0x1c0>
   115ac:	mov	r0, #24
   115b0:	add	r5, sp, #64	; 0x40
   115b4:	bl	17d98 <__assert_fail@plt+0x6e84>
   115b8:	mov	r1, r5
   115bc:	str	r4, [r0, #4]
   115c0:	str	r0, [sp, #64]	; 0x40
   115c4:	ldr	r3, [sl]
   115c8:	b	114a8 <__assert_fail@plt+0x594>
   115cc:	subs	r1, r8, r2
   115d0:	ldrb	r0, [r6, #772]	; 0x304
   115d4:	sbc	r2, r9, r3
   115d8:	ldr	r3, [r4, #28]
   115dc:	cmp	r0, #0
   115e0:	str	r1, [r3, #16]
   115e4:	str	r2, [r3, #20]
   115e8:	strd	r8, [r4, #16]
   115ec:	beq	111a4 <__assert_fail@plt+0x290>
   115f0:	ldrb	r8, [r4, #32]
   115f4:	cmp	r8, #0
   115f8:	movwne	r1, #42716	; 0xa6dc
   115fc:	movtne	r1, #1
   11600:	bne	111ac <__assert_fail@plt+0x298>
   11604:	ldrb	r3, [r4, #34]	; 0x22
   11608:	cmp	r3, #0
   1160c:	movwne	r1, #42780	; 0xa71c
   11610:	movtne	r1, #1
   11614:	bne	111ac <__assert_fail@plt+0x298>
   11618:	ldrb	r8, [r6, #768]	; 0x300
   1161c:	ldrd	r2, [r4, #16]
   11620:	ldrd	r0, [r5, #16]
   11624:	cmp	r8, #0
   11628:	strd	r0, [sp, #24]
   1162c:	strd	r2, [sp, #32]
   11630:	bne	119c8 <__assert_fail@plt+0xab4>
   11634:	ldrb	fp, [r4, #33]	; 0x21
   11638:	cmp	fp, #0
   1163c:	beq	11830 <__assert_fail@plt+0x91c>
   11640:	bl	10e24 <__ctype_b_loc@plt>
   11644:	ldr	r3, [r0]
   11648:	add	r2, r3, #508	; 0x1fc
   1164c:	sub	r3, r3, #2
   11650:	add	r2, r2, #2
   11654:	ldrh	r1, [r3, #2]!
   11658:	tst	r1, #256	; 0x100
   1165c:	addne	sl, sl, #1
   11660:	tst	r1, #512	; 0x200
   11664:	addne	r8, r8, #1
   11668:	cmp	r2, r3
   1166c:	bne	11654 <__assert_fail@plt+0x740>
   11670:	ldr	ip, [r4, #4]
   11674:	sub	r1, r8, #1
   11678:	sub	r0, sl, #1
   1167c:	mvn	r2, #1
   11680:	add	r9, sp, #60	; 0x3c
   11684:	ldr	r3, [sp, #68]	; 0x44
   11688:	mov	sl, r5
   1168c:	mov	r8, fp
   11690:	str	r1, [sp, #16]
   11694:	str	r0, [sp, #20]
   11698:	str	r3, [sp, #40]	; 0x28
   1169c:	mvn	r3, #0
   116a0:	str	ip, [sp, #44]	; 0x2c
   116a4:	add	ip, sp, #144	; 0x90
   116a8:	strd	r2, [r5, #8]
   116ac:	mov	r5, r9
   116b0:	mov	r9, fp
   116b4:	strd	r2, [r4, #8]
   116b8:	str	ip, [sp, #12]
   116bc:	str	r7, [sp, #48]	; 0x30
   116c0:	str	r6, [sp, #52]	; 0x34
   116c4:	b	11790 <__assert_fail@plt+0x87c>
   116c8:	cmp	r3, #2
   116cc:	beq	11754 <__assert_fail@plt+0x840>
   116d0:	cmp	r8, #0
   116d4:	beq	11ab4 <__assert_fail@plt+0xba0>
   116d8:	ldr	r2, [sp, #60]	; 0x3c
   116dc:	cmp	r2, #2
   116e0:	beq	11ab4 <__assert_fail@plt+0xba0>
   116e4:	cmp	r2, #1
   116e8:	ldr	r2, [sp, #16]
   116ec:	ldrd	r8, [sl, #16]
   116f0:	ldr	r1, [sp, #20]
   116f4:	movne	r1, r2
   116f8:	ldr	ip, [sp, #68]	; 0x44
   116fc:	ldr	r2, [r4, #4]
   11700:	subs	r6, r8, r1
   11704:	mvn	r8, #0
   11708:	sbc	r7, r9, #0
   1170c:	cmp	r3, #1
   11710:	ldr	r3, [sp, #16]
   11714:	mvn	r9, #0
   11718:	ldr	ip, [ip, #4]
   1171c:	strd	r8, [sl, #8]
   11720:	ldr	r1, [sp, #20]
   11724:	movne	r1, r3
   11728:	str	ip, [sp, #68]	; 0x44
   1172c:	ldr	ip, [r2, #4]
   11730:	ldrd	r2, [r4, #16]
   11734:	strd	r8, [r4, #8]
   11738:	mov	r8, r6
   1173c:	mov	r9, r7
   11740:	str	ip, [r4, #4]
   11744:	subs	r2, r2, r1
   11748:	strd	r8, [sl, #16]
   1174c:	sbc	r3, r3, #0
   11750:	strd	r2, [r4, #16]
   11754:	ldr	r8, [sl, #8]
   11758:	ldr	r2, [sl, #12]
   1175c:	ldr	r9, [r4, #8]
   11760:	ldr	r3, [r4, #12]
   11764:	and	r8, r8, r2
   11768:	cmn	r8, #1
   1176c:	movne	r8, #0
   11770:	moveq	r8, #1
   11774:	and	r9, r9, r3
   11778:	cmn	r9, #1
   1177c:	movne	r9, #0
   11780:	moveq	r9, #1
   11784:	cmn	r0, #1
   11788:	cmnne	fp, #1
   1178c:	beq	11948 <__assert_fail@plt+0xa34>
   11790:	mov	r1, r5
   11794:	mov	r0, sl
   11798:	bl	12000 <__assert_fail@plt+0x10ec>
   1179c:	mov	fp, r0
   117a0:	mov	r0, r4
   117a4:	ldr	r1, [sp, #12]
   117a8:	bl	12000 <__assert_fail@plt+0x10ec>
   117ac:	cmp	r9, #0
   117b0:	ldr	r3, [sp, #144]	; 0x90
   117b4:	bne	116c8 <__assert_fail@plt+0x7b4>
   117b8:	cmp	r3, #2
   117bc:	beq	11754 <__assert_fail@plt+0x840>
   117c0:	ldr	r2, [sp, #60]	; 0x3c
   117c4:	b	116e4 <__assert_fail@plt+0x7d0>
   117c8:	cmn	fp, #1
   117cc:	beq	117dc <__assert_fail@plt+0x8c8>
   117d0:	ldrb	r3, [r6, #771]	; 0x303
   117d4:	cmp	r3, #0
   117d8:	beq	11a98 <__assert_fail@plt+0xb84>
   117dc:	ldr	r3, [sp, #16]
   117e0:	cmp	r3, #0
   117e4:	bne	11890 <__assert_fail@plt+0x97c>
   117e8:	movw	r5, #50276	; 0xc464
   117ec:	movt	r5, #2
   117f0:	movw	r6, #49492	; 0xc154
   117f4:	movt	r6, #2
   117f8:	b	11818 <__assert_fail@plt+0x904>
   117fc:	mov	r2, r4
   11800:	mov	r1, #1
   11804:	ldr	r3, [r6]
   11808:	mov	r0, r5
   1180c:	bl	10d28 <fwrite_unlocked@plt>
   11810:	cmp	r4, r0
   11814:	bne	11a6c <__assert_fail@plt+0xb58>
   11818:	mov	r1, #8192	; 0x2000
   1181c:	mov	r0, r5
   11820:	bl	123bc <__assert_fail@plt+0x14a8>
   11824:	subs	r4, r0, #0
   11828:	bne	117fc <__assert_fail@plt+0x8e8>
   1182c:	b	11318 <__assert_fail@plt+0x404>
   11830:	ldrd	r0, [r5, #16]
   11834:	cmp	r3, r1
   11838:	strd	r0, [sp, #24]
   1183c:	cmpeq	r2, r0
   11840:	bcs	1128c <__assert_fail@plt+0x378>
   11844:	ldrb	r1, [r6, #771]	; 0x303
   11848:	cmp	r1, #0
   1184c:	bne	1128c <__assert_fail@plt+0x378>
   11850:	orrs	r1, r2, r3
   11854:	movweq	r1, #42980	; 0xa7e4
   11858:	movteq	r1, #1
   1185c:	beq	111ac <__assert_fail@plt+0x298>
   11860:	ldr	r1, [r4, #4]
   11864:	ldr	r0, [r1]
   11868:	cmp	r0, #4
   1186c:	ldrls	pc, [pc, r0, lsl #2]
   11870:	b	11c14 <__assert_fail@plt+0xd00>
   11874:	andeq	r1, r1, r8, asr #3
   11878:	andeq	r1, r1, r8, lsl #17
   1187c:	andeq	r1, r1, ip, asr sl
   11880:	andeq	r1, r1, r4, lsl ip
   11884:	andeq	r1, r1, r8, asr #3
   11888:	ldrb	r8, [r1, #9]
   1188c:	b	111cc <__assert_fail@plt+0x2b8>
   11890:	mov	r0, r4
   11894:	ldr	r2, [pc, #900]	; 11c20 <__assert_fail@plt+0xd0c>
   11898:	mov	r1, #0
   1189c:	bl	12444 <__assert_fail@plt+0x1530>
   118a0:	movw	r0, #9148	; 0x23bc
   118a4:	movt	r0, #1
   118a8:	bl	124cc <__assert_fail@plt+0x15b8>
   118ac:	b	11318 <__assert_fail@plt+0x404>
   118b0:	mov	r0, r5
   118b4:	ldr	r2, [pc, #864]	; 11c1c <__assert_fail@plt+0xd08>
   118b8:	mov	r1, #0
   118bc:	bl	12444 <__assert_fail@plt+0x1530>
   118c0:	ldr	r2, [pc, #860]	; 11c24 <__assert_fail@plt+0xd10>
   118c4:	mvn	r0, #1
   118c8:	mvn	r1, #0
   118cc:	mov	r3, #0
   118d0:	strd	r0, [r4, #8]
   118d4:	strb	r3, [r2, #1]!
   118d8:	add	r3, r3, #1
   118dc:	cmp	r3, #256	; 0x100
   118e0:	bne	118d4 <__assert_fail@plt+0x9c0>
   118e4:	ldr	r7, [pc, #816]	; 11c1c <__assert_fail@plt+0xd08>
   118e8:	mov	r5, #0
   118ec:	b	118fc <__assert_fail@plt+0x9e8>
   118f0:	add	r5, r5, #1
   118f4:	cmp	r5, #256	; 0x100
   118f8:	beq	117dc <__assert_fail@plt+0x8c8>
   118fc:	ldrb	r1, [r7], #1
   11900:	cmp	r1, #0
   11904:	bne	118f0 <__assert_fail@plt+0x9dc>
   11908:	mov	r0, r4
   1190c:	bl	12000 <__assert_fail@plt+0x10ec>
   11910:	cmn	r0, #1
   11914:	beq	11920 <__assert_fail@plt+0xa0c>
   11918:	strb	r0, [r6, r5]
   1191c:	b	118f0 <__assert_fail@plt+0x9dc>
   11920:	ldrb	r3, [r6, #771]	; 0x303
   11924:	cmp	r3, #0
   11928:	bne	117dc <__assert_fail@plt+0x8c8>
   1192c:	movw	r1, #39068	; 0x989c
   11930:	movt	r1, #1
   11934:	ldr	r3, [pc, #748]	; 11c28 <__assert_fail@plt+0xd14>
   11938:	movw	r0, #43312	; 0xa930
   1193c:	movt	r0, #1
   11940:	mov	r2, #1840	; 0x730
   11944:	bl	10f14 <__assert_fail@plt>
   11948:	ldrd	r2, [sl, #16]
   1194c:	mov	r5, sl
   11950:	ldrd	r0, [sp, #24]
   11954:	ldr	r7, [sp, #48]	; 0x30
   11958:	ldr	r6, [sp, #52]	; 0x34
   1195c:	cmp	r1, r3
   11960:	cmpeq	r0, r2
   11964:	bcc	1198c <__assert_fail@plt+0xa78>
   11968:	ldrd	r2, [r4, #16]
   1196c:	ldrd	r0, [sp, #32]
   11970:	cmp	r1, r3
   11974:	cmpeq	r0, r2
   11978:	ldrcs	r1, [sp, #40]	; 0x28
   1197c:	strcs	r1, [sp, #68]	; 0x44
   11980:	ldrcs	r1, [sp, #44]	; 0x2c
   11984:	strcs	r1, [r4, #4]
   11988:	bcs	11830 <__assert_fail@plt+0x91c>
   1198c:	movw	r1, #39068	; 0x989c
   11990:	movt	r1, #1
   11994:	ldr	r3, [pc, #656]	; 11c2c <__assert_fail@plt+0xd18>
   11998:	movw	r0, #42924	; 0xa7ac
   1199c:	movt	r0, #1
   119a0:	movw	r2, #1224	; 0x4c8
   119a4:	bl	10f14 <__assert_fail@plt>
   119a8:	mov	r0, r5
   119ac:	ldrb	r1, [r6, #768]	; 0x300
   119b0:	ldr	r2, [pc, #616]	; 11c20 <__assert_fail@plt+0xd0c>
   119b4:	bl	12444 <__assert_fail@plt+0x1530>
   119b8:	movw	r0, #9100	; 0x238c
   119bc:	movt	r0, #1
   119c0:	bl	124cc <__assert_fail@plt+0x15b8>
   119c4:	b	11318 <__assert_fail@plt+0x404>
   119c8:	ldrd	r0, [sp, #24]
   119cc:	cmp	r1, r3
   119d0:	cmpeq	r0, r2
   119d4:	bls	11228 <__assert_fail@plt+0x314>
   119d8:	ldrb	r1, [r6, #771]	; 0x303
   119dc:	cmp	r1, #0
   119e0:	bne	11228 <__assert_fail@plt+0x314>
   119e4:	b	11850 <__assert_fail@plt+0x93c>
   119e8:	ldrb	r1, [r6, #768]	; 0x300
   119ec:	mov	r0, r5
   119f0:	movw	r6, #49492	; 0xc154
   119f4:	movt	r6, #2
   119f8:	movw	r5, #50276	; 0xc464
   119fc:	movt	r5, #2
   11a00:	ldr	r2, [pc, #532]	; 11c1c <__assert_fail@plt+0xd08>
   11a04:	bl	12444 <__assert_fail@plt+0x1530>
   11a08:	b	11a28 <__assert_fail@plt+0xb14>
   11a0c:	mov	r2, r4
   11a10:	mov	r1, #1
   11a14:	ldr	r3, [r6]
   11a18:	mov	r0, r5
   11a1c:	bl	10d28 <fwrite_unlocked@plt>
   11a20:	cmp	r4, r0
   11a24:	bne	11a6c <__assert_fail@plt+0xb58>
   11a28:	mov	r1, #8192	; 0x2000
   11a2c:	mov	r0, r5
   11a30:	bl	13458 <__assert_fail@plt+0x2544>
   11a34:	subs	r4, r0, #0
   11a38:	bne	11a0c <__assert_fail@plt+0xaf8>
   11a3c:	b	11318 <__assert_fail@plt+0x404>
   11a40:	mov	r4, #2
   11a44:	b	110e4 <__assert_fail@plt+0x1d0>
   11a48:	movw	r1, #43140	; 0xa884
   11a4c:	movt	r1, #1
   11a50:	b	111ac <__assert_fail@plt+0x298>
   11a54:	mov	r0, r4
   11a58:	bl	13588 <__assert_fail@plt+0x2674>
   11a5c:	movw	r1, #43032	; 0xa818
   11a60:	movt	r1, #1
   11a64:	b	111ac <__assert_fail@plt+0x298>
   11a68:	bl	1241c <__assert_fail@plt+0x1508>
   11a6c:	bl	10e54 <__errno_location@plt>
   11a70:	movw	r1, #39168	; 0x9900
   11a74:	movt	r1, #1
   11a78:	ldr	r4, [r0]
   11a7c:	mov	r2, #5
   11a80:	mov	r0, #0
   11a84:	bl	10d58 <dcgettext@plt>
   11a88:	mov	r2, r0
   11a8c:	mov	r0, #1
   11a90:	mov	r1, r4
   11a94:	bl	10dc4 <error@plt>
   11a98:	movw	r1, #39068	; 0x989c
   11a9c:	movt	r1, #1
   11aa0:	ldr	r3, [pc, #384]	; 11c28 <__assert_fail@plt+0xd14>
   11aa4:	movw	r0, #43340	; 0xa94c
   11aa8:	movt	r0, #1
   11aac:	movw	r2, #1893	; 0x765
   11ab0:	bl	10f14 <__assert_fail@plt>
   11ab4:	movw	r1, #42876	; 0xa77c
   11ab8:	movt	r1, #1
   11abc:	b	111ac <__assert_fail@plt+0x298>
   11ac0:	movw	r1, #42660	; 0xa6a4
   11ac4:	movt	r1, #1
   11ac8:	b	111ac <__assert_fail@plt+0x298>
   11acc:	bl	10e54 <__errno_location@plt>
   11ad0:	movw	r1, #43368	; 0xa968
   11ad4:	movt	r1, #1
   11ad8:	b	11a78 <__assert_fail@plt+0xb64>
   11adc:	mov	r2, #5
   11ae0:	movw	r1, #42516	; 0xa614
   11ae4:	movt	r1, #1
   11ae8:	mov	r0, #0
   11aec:	bl	10d58 <dcgettext@plt>
   11af0:	ldr	r3, [sl]
   11af4:	mov	r5, r0
   11af8:	add	r4, r4, r3
   11afc:	ldr	r0, [r8, r4, lsl #2]
   11b00:	bl	17440 <__assert_fail@plt+0x652c>
   11b04:	mov	r1, #0
   11b08:	mov	r3, r0
   11b0c:	mov	r2, r5
   11b10:	mov	r0, r1
   11b14:	bl	10dc4 <error@plt>
   11b18:	cmp	r7, #2
   11b1c:	bne	1104c <__assert_fail@plt+0x138>
   11b20:	movw	r3, #49480	; 0xc148
   11b24:	movt	r3, #2
   11b28:	ldr	r4, [r3]
   11b2c:	mov	r2, #5
   11b30:	movw	r1, #42536	; 0xa628
   11b34:	movt	r1, #1
   11b38:	mov	r0, #0
   11b3c:	bl	10d58 <dcgettext@plt>
   11b40:	mov	r3, r0
   11b44:	movw	r2, #43968	; 0xabc0
   11b48:	movt	r2, #1
   11b4c:	mov	r1, #1
   11b50:	mov	r0, r4
   11b54:	bl	10e9c <__fprintf_chk@plt>
   11b58:	b	1104c <__assert_fail@plt+0x138>
   11b5c:	cmp	r7, #0
   11b60:	bne	11b8c <__assert_fail@plt+0xc78>
   11b64:	mov	r2, #5
   11b68:	mov	r0, r7
   11b6c:	movw	r1, #42472	; 0xa5e8
   11b70:	movt	r1, #1
   11b74:	bl	10d58 <dcgettext@plt>
   11b78:	mov	r2, r0
   11b7c:	mov	r1, r7
   11b80:	mov	r0, r7
   11b84:	bl	10dc4 <error@plt>
   11b88:	b	1104c <__assert_fail@plt+0x138>
   11b8c:	mov	r2, #5
   11b90:	movw	r1, #42488	; 0xa5f8
   11b94:	movt	r1, #1
   11b98:	mov	r0, #0
   11b9c:	bl	10d58 <dcgettext@plt>
   11ba0:	sub	r9, r9, #-1073741823	; 0xc0000001
   11ba4:	mov	r4, r0
   11ba8:	ldr	r0, [r8, r9, lsl #2]
   11bac:	bl	17440 <__assert_fail@plt+0x652c>
   11bb0:	mov	r1, #0
   11bb4:	mov	r3, r0
   11bb8:	mov	r2, r4
   11bbc:	mov	r0, r1
   11bc0:	bl	10dc4 <error@plt>
   11bc4:	ldrb	ip, [r6, #770]	; 0x302
   11bc8:	movw	r3, #49480	; 0xc148
   11bcc:	movt	r3, #2
   11bd0:	mov	r0, #0
   11bd4:	mov	r2, #5
   11bd8:	ldr	r4, [r3]
   11bdc:	movw	r3, #42376	; 0xa588
   11be0:	movt	r3, #1
   11be4:	movw	r1, #42308	; 0xa544
   11be8:	movt	r1, #1
   11bec:	cmp	ip, r0
   11bf0:	moveq	r1, r3
   11bf4:	bl	10d58 <dcgettext@plt>
   11bf8:	mov	r3, r0
   11bfc:	movw	r2, #43968	; 0xabc0
   11c00:	movt	r2, #1
   11c04:	mov	r0, r4
   11c08:	mov	r1, #1
   11c0c:	bl	10e9c <__fprintf_chk@plt>
   11c10:	b	1104c <__assert_fail@plt+0x138>
   11c14:	bl	10efc <abort@plt>
   11c18:	andeq	r9, r1, r4, ror #15
   11c1c:	andeq	ip, r2, ip, asr r3
   11c20:	andeq	ip, r2, ip, asr r2
   11c24:	andeq	ip, r2, fp, asr r1
   11c28:	andeq	r9, r1, ip, ror #16
   11c2c:	andeq	r9, r1, r4, asr r8
   11c30:	mov	fp, #0
   11c34:	mov	lr, #0
   11c38:	pop	{r1}		; (ldr r1, [sp], #4)
   11c3c:	mov	r2, sp
   11c40:	push	{r2}		; (str r2, [sp, #-4]!)
   11c44:	push	{r0}		; (str r0, [sp, #-4]!)
   11c48:	ldr	ip, [pc, #16]	; 11c60 <__assert_fail@plt+0xd4c>
   11c4c:	push	{ip}		; (str ip, [sp, #-4]!)
   11c50:	ldr	r0, [pc, #12]	; 11c64 <__assert_fail@plt+0xd50>
   11c54:	ldr	r3, [pc, #12]	; 11c68 <__assert_fail@plt+0xd54>
   11c58:	bl	10ddc <__libc_start_main@plt>
   11c5c:	bl	10efc <abort@plt>
   11c60:	ldrdeq	r9, [r1], -r4
   11c64:	andeq	r0, r1, r0, lsr #30
   11c68:	andeq	r9, r1, r4, ror r6
   11c6c:	ldr	r3, [pc, #20]	; 11c88 <__assert_fail@plt+0xd74>
   11c70:	ldr	r2, [pc, #20]	; 11c8c <__assert_fail@plt+0xd78>
   11c74:	add	r3, pc, r3
   11c78:	ldr	r2, [r3, r2]
   11c7c:	cmp	r2, #0
   11c80:	bxeq	lr
   11c84:	b	10e0c <__gmon_start__@plt>
   11c88:	andeq	sl, r1, r4, lsl #7
   11c8c:	andeq	r0, r0, r0, ror #1
   11c90:	ldr	r0, [pc, #24]	; 11cb0 <__assert_fail@plt+0xd9c>
   11c94:	ldr	r3, [pc, #24]	; 11cb4 <__assert_fail@plt+0xda0>
   11c98:	cmp	r3, r0
   11c9c:	bxeq	lr
   11ca0:	ldr	r3, [pc, #16]	; 11cb8 <__assert_fail@plt+0xda4>
   11ca4:	cmp	r3, #0
   11ca8:	bxeq	lr
   11cac:	bx	r3
   11cb0:	andeq	ip, r2, r4, lsr r1
   11cb4:	andeq	ip, r2, r4, lsr r1
   11cb8:	andeq	r0, r0, r0
   11cbc:	ldr	r0, [pc, #36]	; 11ce8 <__assert_fail@plt+0xdd4>
   11cc0:	ldr	r1, [pc, #36]	; 11cec <__assert_fail@plt+0xdd8>
   11cc4:	sub	r1, r1, r0
   11cc8:	asr	r1, r1, #2
   11ccc:	add	r1, r1, r1, lsr #31
   11cd0:	asrs	r1, r1, #1
   11cd4:	bxeq	lr
   11cd8:	ldr	r3, [pc, #16]	; 11cf0 <__assert_fail@plt+0xddc>
   11cdc:	cmp	r3, #0
   11ce0:	bxeq	lr
   11ce4:	bx	r3
   11ce8:	andeq	ip, r2, r4, lsr r1
   11cec:	andeq	ip, r2, r4, lsr r1
   11cf0:	andeq	r0, r0, r0
   11cf4:	push	{r4, lr}
   11cf8:	ldr	r4, [pc, #24]	; 11d18 <__assert_fail@plt+0xe04>
   11cfc:	ldrb	r3, [r4]
   11d00:	cmp	r3, #0
   11d04:	popne	{r4, pc}
   11d08:	bl	11c90 <__assert_fail@plt+0xd7c>
   11d0c:	mov	r3, #1
   11d10:	strb	r3, [r4]
   11d14:	pop	{r4, pc}
   11d18:	andeq	ip, r2, r8, asr r1
   11d1c:	b	11cbc <__assert_fail@plt+0xda8>
   11d20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11d24:	mov	r4, r0
   11d28:	strd	r6, [sp, #8]
   11d2c:	mov	r6, r1
   11d30:	mov	r1, #4
   11d34:	add	r0, r6, #1
   11d38:	strd	r8, [sp, #16]
   11d3c:	strd	sl, [sp, #24]
   11d40:	str	lr, [sp, #32]
   11d44:	sub	sp, sp, #20
   11d48:	bl	17efc <__assert_fail@plt+0x6fe8>
   11d4c:	cmp	r6, #0
   11d50:	mov	sl, r0
   11d54:	beq	11e3c <__assert_fail@plt+0xf28>
   11d58:	sub	r4, r4, #1
   11d5c:	movw	r8, #39040	; 0x9880
   11d60:	movt	r8, #1
   11d64:	movw	r9, #39060	; 0x9894
   11d68:	movt	r9, #1
   11d6c:	movw	r7, #39036	; 0x987c
   11d70:	movt	r7, #1
   11d74:	add	r6, r4, r6
   11d78:	mov	r5, r0
   11d7c:	b	11dc4 <__assert_fail@plt+0xeb0>
   11d80:	cmp	fp, #12
   11d84:	moveq	r1, r7
   11d88:	beq	11db0 <__assert_fail@plt+0xe9c>
   11d8c:	bcc	11e30 <__assert_fail@plt+0xf1c>
   11d90:	cmp	fp, #13
   11d94:	movweq	r1, #39044	; 0x9884
   11d98:	movteq	r1, #1
   11d9c:	beq	11db0 <__assert_fail@plt+0xe9c>
   11da0:	cmp	fp, #92	; 0x5c
   11da4:	movweq	r1, #39028	; 0x9874
   11da8:	movteq	r1, #1
   11dac:	bne	11df8 <__assert_fail@plt+0xee4>
   11db0:	mov	r0, r5
   11db4:	bl	10d40 <stpcpy@plt>
   11db8:	cmp	r6, r4
   11dbc:	mov	r5, r0
   11dc0:	beq	11e3c <__assert_fail@plt+0xf28>
   11dc4:	ldrb	fp, [r4, #1]!
   11dc8:	cmp	fp, #10
   11dcc:	beq	11e5c <__assert_fail@plt+0xf48>
   11dd0:	bhi	11d80 <__assert_fail@plt+0xe6c>
   11dd4:	cmp	fp, #8
   11dd8:	beq	11e24 <__assert_fail@plt+0xf10>
   11ddc:	movwhi	r1, #39048	; 0x9888
   11de0:	movthi	r1, #1
   11de4:	bhi	11db0 <__assert_fail@plt+0xe9c>
   11de8:	cmp	fp, #7
   11dec:	movweq	r1, #39056	; 0x9890
   11df0:	movteq	r1, #1
   11df4:	beq	11db0 <__assert_fail@plt+0xe9c>
   11df8:	bl	10e24 <__ctype_b_loc@plt>
   11dfc:	ldr	r2, [r0]
   11e00:	lsl	r3, fp, #1
   11e04:	ldrh	r3, [r2, r3]
   11e08:	tst	r3, #16384	; 0x4000
   11e0c:	beq	11e64 <__assert_fail@plt+0xf50>
   11e10:	mov	r3, #0
   11e14:	add	r1, sp, #8
   11e18:	strb	fp, [sp, #8]
   11e1c:	strb	r3, [sp, #9]
   11e20:	b	11db0 <__assert_fail@plt+0xe9c>
   11e24:	movw	r1, #39032	; 0x9878
   11e28:	movt	r1, #1
   11e2c:	b	11db0 <__assert_fail@plt+0xe9c>
   11e30:	movw	r1, #39052	; 0x988c
   11e34:	movt	r1, #1
   11e38:	b	11db0 <__assert_fail@plt+0xe9c>
   11e3c:	mov	r0, sl
   11e40:	add	sp, sp, #20
   11e44:	ldrd	r4, [sp]
   11e48:	ldrd	r6, [sp, #8]
   11e4c:	ldrd	r8, [sp, #16]
   11e50:	ldrd	sl, [sp, #24]
   11e54:	add	sp, sp, #32
   11e58:	pop	{pc}		; (ldr pc, [sp], #4)
   11e5c:	mov	r1, r8
   11e60:	b	11db0 <__assert_fail@plt+0xe9c>
   11e64:	mov	r1, #1
   11e68:	mov	r3, r9
   11e6c:	str	fp, [sp]
   11e70:	add	r0, sp, #8
   11e74:	mov	r2, #5
   11e78:	bl	10e60 <__sprintf_chk@plt>
   11e7c:	add	r1, sp, #8
   11e80:	b	11db0 <__assert_fail@plt+0xe9c>
   11e84:	str	r4, [sp, #-8]!
   11e88:	mov	r4, r1
   11e8c:	str	lr, [sp, #4]
   11e90:	cmp	r0, #11
   11e94:	ldrls	pc, [pc, r0, lsl #2]
   11e98:	b	11ffc <__assert_fail@plt+0x10e8>
   11e9c:	strdeq	r1, [r1], -r4
   11ea0:	andeq	r1, r1, ip, lsl #30
   11ea4:	andeq	r1, r1, r4, lsr #30
   11ea8:	andeq	r1, r1, ip, lsr pc
   11eac:	andeq	r1, r1, r4, asr pc
   11eb0:	andeq	r1, r1, ip, ror #30
   11eb4:	andeq	r1, r1, r4, lsl #31
   11eb8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11ebc:			; <UNDEFINED> instruction: 0x00011fb4
   11ec0:	andeq	r1, r1, ip, asr #31
   11ec4:	andeq	r1, r1, r4, ror #31
   11ec8:	andeq	r1, r1, ip, asr #29
   11ecc:	bl	10e24 <__ctype_b_loc@plt>
   11ed0:	ldr	r3, [r0]
   11ed4:	lsl	r4, r4, #1
   11ed8:	ldrh	r0, [r3, r4]
   11edc:	and	r0, r0, #4096	; 0x1000
   11ee0:	adds	r0, r0, #0
   11ee4:	ldr	r4, [sp]
   11ee8:	add	sp, sp, #4
   11eec:	movne	r0, #1
   11ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef4:	bl	10e24 <__ctype_b_loc@plt>
   11ef8:	ldr	r3, [r0]
   11efc:	lsl	r4, r4, #1
   11f00:	ldrh	r0, [r3, r4]
   11f04:	and	r0, r0, #8
   11f08:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f0c:	bl	10e24 <__ctype_b_loc@plt>
   11f10:	ldr	r3, [r0]
   11f14:	lsl	r4, r4, #1
   11f18:	ldrh	r0, [r3, r4]
   11f1c:	and	r0, r0, #1024	; 0x400
   11f20:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f24:	bl	10e24 <__ctype_b_loc@plt>
   11f28:	ldr	r3, [r0]
   11f2c:	lsl	r4, r4, #1
   11f30:	ldrh	r0, [r3, r4]
   11f34:	and	r0, r0, #1
   11f38:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f3c:	bl	10e24 <__ctype_b_loc@plt>
   11f40:	ldr	r3, [r0]
   11f44:	lsl	r4, r4, #1
   11f48:	ldrh	r0, [r3, r4]
   11f4c:	and	r0, r0, #2
   11f50:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f54:	bl	10e24 <__ctype_b_loc@plt>
   11f58:	ldr	r3, [r0]
   11f5c:	lsl	r4, r4, #1
   11f60:	ldrh	r0, [r3, r4]
   11f64:	and	r0, r0, #2048	; 0x800
   11f68:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f6c:	bl	10e24 <__ctype_b_loc@plt>
   11f70:	ldr	r3, [r0]
   11f74:	lsl	r4, r4, #1
   11f78:	ldrh	r0, [r3, r4]
   11f7c:	and	r0, r0, #32768	; 0x8000
   11f80:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f84:	bl	10e24 <__ctype_b_loc@plt>
   11f88:	ldr	r3, [r0]
   11f8c:	lsl	r4, r4, #1
   11f90:	ldrh	r0, [r3, r4]
   11f94:	and	r0, r0, #512	; 0x200
   11f98:	b	11ee0 <__assert_fail@plt+0xfcc>
   11f9c:	bl	10e24 <__ctype_b_loc@plt>
   11fa0:	ldr	r3, [r0]
   11fa4:	lsl	r4, r4, #1
   11fa8:	ldrh	r0, [r3, r4]
   11fac:	and	r0, r0, #16384	; 0x4000
   11fb0:	b	11ee0 <__assert_fail@plt+0xfcc>
   11fb4:	bl	10e24 <__ctype_b_loc@plt>
   11fb8:	ldr	r3, [r0]
   11fbc:	lsl	r4, r4, #1
   11fc0:	ldrh	r0, [r3, r4]
   11fc4:	and	r0, r0, #4
   11fc8:	b	11ee0 <__assert_fail@plt+0xfcc>
   11fcc:	bl	10e24 <__ctype_b_loc@plt>
   11fd0:	ldr	r3, [r0]
   11fd4:	lsl	r4, r4, #1
   11fd8:	ldrh	r0, [r3, r4]
   11fdc:	and	r0, r0, #8192	; 0x2000
   11fe0:	b	11ee0 <__assert_fail@plt+0xfcc>
   11fe4:	bl	10e24 <__ctype_b_loc@plt>
   11fe8:	ldr	r3, [r0]
   11fec:	lsl	r4, r4, #1
   11ff0:	ldrh	r0, [r3, r4]
   11ff4:	and	r0, r0, #256	; 0x100
   11ff8:	b	11ee0 <__assert_fail@plt+0xfcc>
   11ffc:	bl	10efc <abort@plt>
   12000:	subs	ip, r1, #0
   12004:	mvn	r1, #0
   12008:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1200c:	ldrd	r4, [r0, #8]
   12010:	strd	r6, [sp, #8]
   12014:	mov	r6, r0
   12018:	mvn	r0, #1
   1201c:	strd	r8, [sp, #16]
   12020:	str	sl, [sp, #24]
   12024:	str	lr, [sp, #28]
   12028:	beq	120c8 <__assert_fail@plt+0x11b4>
   1202c:	cmp	r5, r1
   12030:	cmpeq	r4, r0
   12034:	beq	120a4 <__assert_fail@plt+0x1190>
   12038:	ldr	r7, [r6, #4]
   1203c:	cmp	r7, #0
   12040:	beq	122b4 <__assert_fail@plt+0x13a0>
   12044:	ldr	r1, [r7]
   12048:	cmp	r1, #4
   1204c:	ldrls	pc, [pc, r1, lsl #2]
   12050:	b	1234c <__assert_fail@plt+0x1438>
   12054:	andeq	r2, r1, r8, rrx
   12058:	andeq	r2, r1, r4, lsl #2
   1205c:	andeq	r2, r1, ip, asr r1
   12060:	andeq	r2, r1, r8, rrx
   12064:	andeq	r2, r1, r4, ror #3
   12068:	mov	r3, #2
   1206c:	str	r3, [ip]
   12070:	ldr	r3, [r7, #4]
   12074:	mvn	r0, #0
   12078:	mvn	r1, #0
   1207c:	ldrb	r4, [r7, #8]
   12080:	str	r3, [r6, #4]
   12084:	strd	r0, [r6, #8]
   12088:	mov	r0, r4
   1208c:	ldrd	r4, [sp]
   12090:	ldrd	r6, [sp, #8]
   12094:	ldrd	r8, [sp, #16]
   12098:	ldr	sl, [sp, #24]
   1209c:	add	sp, sp, #28
   120a0:	pop	{pc}		; (ldr pc, [sp], #4)
   120a4:	ldr	lr, [r6]
   120a8:	mvn	r0, #0
   120ac:	mov	r1, r0
   120b0:	mov	r4, r0
   120b4:	mov	r5, r0
   120b8:	ldr	r7, [lr, #4]
   120bc:	str	r7, [r6, #4]
   120c0:	strd	r0, [r6, #8]
   120c4:	b	1203c <__assert_fail@plt+0x1128>
   120c8:	cmp	r5, r1
   120cc:	cmpeq	r4, r0
   120d0:	beq	12210 <__assert_fail@plt+0x12fc>
   120d4:	ldr	r7, [r6, #4]
   120d8:	cmp	r7, #0
   120dc:	beq	122bc <__assert_fail@plt+0x13a8>
   120e0:	ldr	r1, [r7]
   120e4:	cmp	r1, #4
   120e8:	ldrls	pc, [pc, r1, lsl #2]
   120ec:	b	12354 <__assert_fail@plt+0x1440>
   120f0:	andeq	r2, r1, r0, ror r0
   120f4:	andeq	r2, r1, ip, lsl #2
   120f8:	andeq	r2, r1, r0, asr #4
   120fc:	andeq	r2, r1, r0, ror r0
   12100:	andeq	r2, r1, r8, asr #4
   12104:	mov	r1, #2
   12108:	str	r1, [ip]
   1210c:	mvn	r1, #0
   12110:	mvn	r0, #0
   12114:	cmp	r5, r1
   12118:	cmpeq	r4, r0
   1211c:	beq	12234 <__assert_fail@plt+0x1320>
   12120:	adds	r2, r4, #1
   12124:	adc	r3, r5, #0
   12128:	ldrb	r0, [r7, #9]
   1212c:	mov	r1, #0
   12130:	mov	r4, r2
   12134:	cmp	r1, r3
   12138:	strd	r2, [r6, #8]
   1213c:	cmpeq	r0, r2
   12140:	bne	12088 <__assert_fail@plt+0x1174>
   12144:	ldr	r3, [r7, #4]
   12148:	mvn	r0, #0
   1214c:	mvn	r1, #0
   12150:	str	r3, [r6, #4]
   12154:	strd	r0, [r6, #8]
   12158:	b	12088 <__assert_fail@plt+0x1174>
   1215c:	ldr	r8, [r7, #8]
   12160:	mov	r3, #2
   12164:	str	r3, [ip]
   12168:	cmp	r8, #6
   1216c:	beq	122a8 <__assert_fail@plt+0x1394>
   12170:	cmp	r8, #10
   12174:	moveq	r3, #1
   12178:	streq	r3, [ip]
   1217c:	mvn	r3, #0
   12180:	mvn	r2, #0
   12184:	cmp	r5, r3
   12188:	cmpeq	r4, r2
   1218c:	beq	12274 <__assert_fail@plt+0x1360>
   12190:	uxtb	r1, r4
   12194:	mov	r0, r8
   12198:	bl	11e84 <__assert_fail@plt+0xf70>
   1219c:	cmp	r0, #0
   121a0:	beq	1232c <__assert_fail@plt+0x1418>
   121a4:	add	r9, r4, #1
   121a8:	cmp	r9, #255	; 0xff
   121ac:	ble	121c0 <__assert_fail@plt+0x12ac>
   121b0:	b	12144 <__assert_fail@plt+0x1230>
   121b4:	add	r9, r9, #1
   121b8:	cmp	r9, #256	; 0x100
   121bc:	beq	12144 <__assert_fail@plt+0x1230>
   121c0:	uxtb	r1, r9
   121c4:	mov	r0, r8
   121c8:	bl	11e84 <__assert_fail@plt+0xf70>
   121cc:	cmp	r0, #0
   121d0:	beq	121b4 <__assert_fail@plt+0x12a0>
   121d4:	asr	r3, r9, #31
   121d8:	mov	r2, r9
   121dc:	strd	r2, [r6, #8]
   121e0:	b	12088 <__assert_fail@plt+0x1174>
   121e4:	ldrd	r0, [r7, #16]
   121e8:	orrs	lr, r0, r1
   121ec:	bne	122c4 <__assert_fail@plt+0x13b0>
   121f0:	ldr	lr, [r7, #4]
   121f4:	mvn	r0, #0
   121f8:	mov	r1, r0
   121fc:	mov	r4, r0
   12200:	mov	r5, r0
   12204:	str	lr, [r6, #4]
   12208:	strd	r0, [r6, #8]
   1220c:	b	12038 <__assert_fail@plt+0x1124>
   12210:	ldr	ip, [r6]
   12214:	mvn	r0, #0
   12218:	mov	r1, r0
   1221c:	mov	r4, r0
   12220:	mov	r5, r0
   12224:	ldr	r7, [ip, #4]
   12228:	str	r7, [r6, #4]
   1222c:	strd	r0, [r6, #8]
   12230:	b	120d8 <__assert_fail@plt+0x11c4>
   12234:	ldrb	r2, [r7, #8]
   12238:	mov	r3, #0
   1223c:	b	12128 <__assert_fail@plt+0x1214>
   12240:	ldr	r8, [r7, #8]
   12244:	b	1217c <__assert_fail@plt+0x1268>
   12248:	ldrd	r0, [r7, #16]
   1224c:	orrs	ip, r0, r1
   12250:	bne	122cc <__assert_fail@plt+0x13b8>
   12254:	ldr	ip, [r7, #4]
   12258:	mvn	r0, #0
   1225c:	mov	r1, r0
   12260:	mov	r4, r0
   12264:	mov	r5, r0
   12268:	str	ip, [r6, #4]
   1226c:	strd	r0, [r6, #8]
   12270:	b	120d4 <__assert_fail@plt+0x11c0>
   12274:	mov	r4, #0
   12278:	b	12288 <__assert_fail@plt+0x1374>
   1227c:	add	r4, r4, #1
   12280:	cmp	r4, #256	; 0x100
   12284:	beq	1230c <__assert_fail@plt+0x13f8>
   12288:	uxtb	r1, r4
   1228c:	mov	r0, r8
   12290:	bl	11e84 <__assert_fail@plt+0xf70>
   12294:	cmp	r0, #0
   12298:	beq	1227c <__assert_fail@plt+0x1368>
   1229c:	asr	r5, r4, #31
   122a0:	strd	r4, [r6, #8]
   122a4:	b	12190 <__assert_fail@plt+0x127c>
   122a8:	mov	r3, #0
   122ac:	str	r3, [ip]
   122b0:	b	1217c <__assert_fail@plt+0x1268>
   122b4:	mov	r3, #2
   122b8:	str	r3, [ip]
   122bc:	mvn	r4, #0
   122c0:	b	12088 <__assert_fail@plt+0x1174>
   122c4:	mov	r3, #2
   122c8:	str	r3, [ip]
   122cc:	mvn	r3, #0
   122d0:	mvn	r2, #0
   122d4:	cmp	r5, r3
   122d8:	cmpeq	r4, r2
   122dc:	beq	12300 <__assert_fail@plt+0x13ec>
   122e0:	adds	r8, r4, #1
   122e4:	adc	r9, r5, #0
   122e8:	cmp	r9, r1
   122ec:	ldrb	r4, [r7, #8]
   122f0:	cmpeq	r8, r0
   122f4:	strd	r8, [r6, #8]
   122f8:	bne	12088 <__assert_fail@plt+0x1174>
   122fc:	b	12144 <__assert_fail@plt+0x1230>
   12300:	mov	r8, #1
   12304:	mov	r9, #0
   12308:	b	122e8 <__assert_fail@plt+0x13d4>
   1230c:	movw	r3, #38652	; 0x96fc
   12310:	movt	r3, #1
   12314:	movw	r1, #39068	; 0x989c
   12318:	movt	r1, #1
   1231c:	movw	r0, #39132	; 0x98dc
   12320:	movt	r0, #1
   12324:	movw	r2, #1079	; 0x437
   12328:	bl	10f14 <__assert_fail@plt>
   1232c:	movw	r3, #38652	; 0x96fc
   12330:	movt	r3, #1
   12334:	movw	r1, #39068	; 0x989c
   12338:	movt	r1, #1
   1233c:	movw	r0, #39080	; 0x98a8
   12340:	movt	r0, #1
   12344:	movw	r2, #1082	; 0x43a
   12348:	bl	10f14 <__assert_fail@plt>
   1234c:	mov	r3, #2
   12350:	str	r3, [ip]
   12354:	bl	10efc <abort@plt>
   12358:	str	r4, [sp, #-8]!
   1235c:	str	lr, [sp, #4]
   12360:	bl	10e54 <__errno_location@plt>
   12364:	ldr	r4, [r0]
   12368:	mov	r2, #5
   1236c:	movw	r1, #39144	; 0x98e8
   12370:	movt	r1, #1
   12374:	mov	r0, #0
   12378:	bl	10d58 <dcgettext@plt>
   1237c:	mov	r2, r0
   12380:	mov	r0, #1
   12384:	mov	r1, r4
   12388:	bl	10dc4 <error@plt>
   1238c:	mov	r2, r1
   12390:	mov	r1, r0
   12394:	str	r4, [sp, #-8]!
   12398:	mov	r0, #0
   1239c:	str	lr, [sp, #4]
   123a0:	bl	175d4 <__assert_fail@plt+0x66c0>
   123a4:	cmn	r0, #1
   123a8:	beq	123b8 <__assert_fail@plt+0x14a4>
   123ac:	ldr	r4, [sp]
   123b0:	add	sp, sp, #4
   123b4:	pop	{pc}		; (ldr pc, [sp], #4)
   123b8:	bl	12358 <__assert_fail@plt+0x1444>
   123bc:	str	r4, [sp, #-8]!
   123c0:	mov	r4, r0
   123c4:	mov	r2, r1
   123c8:	mov	r0, #0
   123cc:	mov	r1, r4
   123d0:	str	lr, [sp, #4]
   123d4:	bl	175d4 <__assert_fail@plt+0x66c0>
   123d8:	cmn	r0, #1
   123dc:	beq	12418 <__assert_fail@plt+0x1504>
   123e0:	cmp	r0, #0
   123e4:	subne	r1, r4, #1
   123e8:	movwne	r2, #49500	; 0xc15c
   123ec:	movtne	r2, #2
   123f0:	addne	ip, r1, r0
   123f4:	beq	1240c <__assert_fail@plt+0x14f8>
   123f8:	ldrb	r3, [r1, #1]!
   123fc:	ldrb	r3, [r2, r3]
   12400:	cmp	r1, ip
   12404:	strb	r3, [r1]
   12408:	bne	123f8 <__assert_fail@plt+0x14e4>
   1240c:	ldr	r4, [sp]
   12410:	add	sp, sp, #4
   12414:	pop	{pc}		; (ldr pc, [sp], #4)
   12418:	bl	12358 <__assert_fail@plt+0x1444>
   1241c:	movw	r1, #39068	; 0x989c
   12420:	movt	r1, #1
   12424:	ldr	r3, [pc, #20]	; 12440 <__assert_fail@plt+0x152c>
   12428:	movw	r0, #39156	; 0x98f4
   1242c:	movt	r0, #1
   12430:	str	r4, [sp, #-8]!
   12434:	movw	r2, #721	; 0x2d1
   12438:	str	lr, [sp, #4]
   1243c:	bl	10f14 <__assert_fail@plt>
   12440:	andeq	r9, r1, r8, lsl #14
   12444:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12448:	mov	r5, r0
   1244c:	mov	r4, r2
   12450:	strd	r6, [sp, #8]
   12454:	mov	r7, r1
   12458:	mov	r6, #1
   1245c:	strd	r8, [sp, #16]
   12460:	mvn	r8, #1
   12464:	mvn	r9, #0
   12468:	str	sl, [sp, #24]
   1246c:	str	lr, [sp, #28]
   12470:	strd	r8, [r0, #8]
   12474:	b	1247c <__assert_fail@plt+0x1568>
   12478:	strb	r6, [r4, r0]
   1247c:	mov	r1, #0
   12480:	mov	r0, r5
   12484:	bl	12000 <__assert_fail@plt+0x10ec>
   12488:	cmn	r0, #1
   1248c:	bne	12478 <__assert_fail@plt+0x1564>
   12490:	cmp	r7, #0
   12494:	beq	124b4 <__assert_fail@plt+0x15a0>
   12498:	sub	r3, r4, #1
   1249c:	add	r1, r4, #255	; 0xff
   124a0:	ldrb	r2, [r3, #1]!
   124a4:	eor	r2, r2, #1
   124a8:	cmp	r3, r1
   124ac:	strb	r2, [r3]
   124b0:	bne	124a0 <__assert_fail@plt+0x158c>
   124b4:	ldrd	r4, [sp]
   124b8:	ldrd	r6, [sp, #8]
   124bc:	ldrd	r8, [sp, #16]
   124c0:	ldr	sl, [sp, #24]
   124c4:	add	sp, sp, #28
   124c8:	pop	{pc}		; (ldr pc, [sp], #4)
   124cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   124d0:	mov	r5, #0
   124d4:	mov	r4, r5
   124d8:	strd	r6, [sp, #8]
   124dc:	movw	r7, #50276	; 0xc464
   124e0:	movt	r7, #2
   124e4:	mvn	r6, #-2147483648	; 0x80000000
   124e8:	strd	r8, [sp, #16]
   124ec:	mov	r8, r0
   124f0:	strd	sl, [sp, #24]
   124f4:	movw	sl, #49500	; 0xc15c
   124f8:	movt	sl, #2
   124fc:	movw	fp, #49492	; 0xc154
   12500:	movt	fp, #2
   12504:	str	lr, [sp, #32]
   12508:	sub	sp, sp, #4
   1250c:	cmp	r4, r5
   12510:	bcs	1261c <__assert_fail@plt+0x1708>
   12514:	cmn	r6, #-2147483647	; 0x80000001
   12518:	beq	1252c <__assert_fail@plt+0x1618>
   1251c:	ldrb	r3, [r7, r4]
   12520:	add	r2, r7, r4
   12524:	cmp	r3, r6
   12528:	beq	12658 <__assert_fail@plt+0x1744>
   1252c:	add	r3, r7, r4
   12530:	mov	r0, r4
   12534:	ldrb	r3, [r3]
   12538:	add	r2, sl, r3
   1253c:	mov	r6, r3
   12540:	ldrb	r2, [r2, #256]	; 0x100
   12544:	cmp	r2, #0
   12548:	moveq	r3, r0
   1254c:	beq	1267c <__assert_fail@plt+0x1768>
   12550:	mov	r4, r0
   12554:	mov	r9, #1
   12558:	mov	r2, #0
   1255c:	cmp	r4, #0
   12560:	beq	12574 <__assert_fail@plt+0x1660>
   12564:	ldr	r1, [pc, #376]	; 126e4 <__assert_fail@plt+0x17d0>
   12568:	ldrb	r1, [r4, r1]
   1256c:	cmp	r1, r3
   12570:	moveq	r9, r2
   12574:	cmp	r9, #0
   12578:	add	r4, r4, #1
   1257c:	beq	12640 <__assert_fail@plt+0x172c>
   12580:	add	r0, r7, r0
   12584:	mov	r2, r9
   12588:	ldr	r3, [fp]
   1258c:	mov	r1, #1
   12590:	bl	10d28 <fwrite_unlocked@plt>
   12594:	cmp	r9, r0
   12598:	beq	12640 <__assert_fail@plt+0x172c>
   1259c:	bl	10e54 <__errno_location@plt>
   125a0:	ldr	r4, [r0]
   125a4:	mov	r2, #5
   125a8:	movw	r1, #39168	; 0x9900
   125ac:	movt	r1, #1
   125b0:	mov	r0, #0
   125b4:	bl	10d58 <dcgettext@plt>
   125b8:	mov	r2, r0
   125bc:	mov	r0, #1
   125c0:	mov	r1, r4
   125c4:	bl	10dc4 <error@plt>
   125c8:	bne	125ec <__assert_fail@plt+0x16d8>
   125cc:	add	r4, r3, #1
   125d0:	ldrb	r3, [r7, r4]
   125d4:	add	r2, sl, r3
   125d8:	mov	r6, r3
   125dc:	ldrb	r2, [r2, #256]	; 0x100
   125e0:	cmp	r2, #0
   125e4:	bne	126d8 <__assert_fail@plt+0x17c4>
   125e8:	mov	r4, r5
   125ec:	subs	r6, r5, r0
   125f0:	beq	12610 <__assert_fail@plt+0x16fc>
   125f4:	add	r0, r7, r0
   125f8:	mov	r2, r6
   125fc:	ldr	r3, [fp]
   12600:	mov	r1, #1
   12604:	bl	10d28 <fwrite_unlocked@plt>
   12608:	cmp	r6, r0
   1260c:	bne	1259c <__assert_fail@plt+0x1688>
   12610:	cmp	r5, r4
   12614:	mvn	r6, #-2147483648	; 0x80000000
   12618:	bhi	1252c <__assert_fail@plt+0x1618>
   1261c:	movw	r0, #50276	; 0xc464
   12620:	movt	r0, #2
   12624:	mov	r1, #8192	; 0x2000
   12628:	blx	r8
   1262c:	subs	r5, r0, #0
   12630:	beq	126bc <__assert_fail@plt+0x17a8>
   12634:	cmn	r6, #-2147483647	; 0x80000001
   12638:	movne	r4, #0
   1263c:	beq	126ac <__assert_fail@plt+0x1798>
   12640:	cmp	r5, r4
   12644:	bls	1250c <__assert_fail@plt+0x15f8>
   12648:	ldrb	r3, [r7, r4]
   1264c:	add	r2, r7, r4
   12650:	cmp	r3, r6
   12654:	bne	1252c <__assert_fail@plt+0x1618>
   12658:	add	r4, r4, #1
   1265c:	cmp	r4, r5
   12660:	beq	1250c <__assert_fail@plt+0x15f8>
   12664:	ldrb	r3, [r2, #1]!
   12668:	cmp	r3, r6
   1266c:	beq	12658 <__assert_fail@plt+0x1744>
   12670:	mvn	r6, #-2147483648	; 0x80000000
   12674:	b	1250c <__assert_fail@plt+0x15f8>
   12678:	mov	r3, r4
   1267c:	add	r4, r3, #2
   12680:	cmp	r4, r5
   12684:	bcs	125c8 <__assert_fail@plt+0x16b4>
   12688:	ldrb	r3, [r7, r4]
   1268c:	add	r2, sl, r3
   12690:	mov	r6, r3
   12694:	ldrb	r2, [r2, #256]	; 0x100
   12698:	cmp	r2, #0
   1269c:	beq	12678 <__assert_fail@plt+0x1764>
   126a0:	sub	r2, r4, r0
   126a4:	add	r9, r2, #1
   126a8:	b	1255c <__assert_fail@plt+0x1648>
   126ac:	movw	r3, #50276	; 0xc464
   126b0:	movt	r3, #2
   126b4:	mov	r0, #0
   126b8:	b	12534 <__assert_fail@plt+0x1620>
   126bc:	add	sp, sp, #4
   126c0:	ldrd	r4, [sp]
   126c4:	ldrd	r6, [sp, #8]
   126c8:	ldrd	r8, [sp, #16]
   126cc:	ldrd	sl, [sp, #24]
   126d0:	add	sp, sp, #32
   126d4:	pop	{pc}		; (ldr pc, [sp], #4)
   126d8:	cmp	r4, r5
   126dc:	bcs	125ec <__assert_fail@plt+0x16d8>
   126e0:	b	126a0 <__assert_fail@plt+0x178c>
   126e4:	andeq	ip, r2, r3, ror #8
   126e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126ec:	strd	r6, [sp, #8]
   126f0:	mov	r7, r0
   126f4:	strd	r8, [sp, #16]
   126f8:	strd	sl, [sp, #24]
   126fc:	str	lr, [sp, #32]
   12700:	sub	sp, sp, #92	; 0x5c
   12704:	str	r1, [sp, #28]
   12708:	bl	10e3c <strlen@plt>
   1270c:	mov	r4, r0
   12710:	bl	17d98 <__assert_fail@plt+0x6e84>
   12714:	mov	r9, r0
   12718:	mov	r1, #1
   1271c:	mov	r0, r4
   12720:	bl	181dc <__assert_fail@plt+0x72c8>
   12724:	ldrb	fp, [r7]
   12728:	mov	r8, r0
   1272c:	cmp	fp, #0
   12730:	beq	12f18 <__assert_fail@plt+0x2004>
   12734:	movw	r3, #39180	; 0x990c
   12738:	movt	r3, #1
   1273c:	mov	sl, r0
   12740:	mov	r6, r9
   12744:	str	r3, [sp, #40]	; 0x28
   12748:	movw	r3, #39280	; 0x9970
   1274c:	movt	r3, #1
   12750:	mov	r5, #0
   12754:	str	r3, [sp, #36]	; 0x24
   12758:	rsb	r3, r9, #1
   1275c:	str	r3, [sp, #44]	; 0x2c
   12760:	b	12774 <__assert_fail@plt+0x1860>
   12764:	cmp	fp, #0
   12768:	add	r6, r6, #1
   1276c:	add	sl, sl, #1
   12770:	beq	12858 <__assert_fail@plt+0x1944>
   12774:	ldr	r2, [sp, #44]	; 0x2c
   12778:	add	r3, r5, #1
   1277c:	cmp	fp, #92	; 0x5c
   12780:	movne	r5, r3
   12784:	ldrb	r4, [r7, r3]
   12788:	strbne	fp, [r6]
   1278c:	add	r2, r2, r6
   12790:	movne	fp, r4
   12794:	str	r2, [sp, #32]
   12798:	bne	12764 <__assert_fail@plt+0x1850>
   1279c:	mov	r2, #1
   127a0:	cmp	r4, #98	; 0x62
   127a4:	strb	r2, [sl]
   127a8:	beq	12e58 <__assert_fail@plt+0x1f44>
   127ac:	bls	12ae0 <__assert_fail@plt+0x1bcc>
   127b0:	cmp	r4, #114	; 0x72
   127b4:	add	r2, r5, #2
   127b8:	moveq	r4, #13
   127bc:	beq	127d8 <__assert_fail@plt+0x18c4>
   127c0:	bhi	12b28 <__assert_fail@plt+0x1c14>
   127c4:	cmp	r4, #102	; 0x66
   127c8:	moveq	r4, #12
   127cc:	beq	127d8 <__assert_fail@plt+0x18c4>
   127d0:	cmp	r4, #110	; 0x6e
   127d4:	moveq	r4, #10
   127d8:	mov	r5, r2
   127dc:	strb	r4, [r6]
   127e0:	ldrb	fp, [r7, r2]
   127e4:	b	12764 <__assert_fail@plt+0x1850>
   127e8:	ldrb	r3, [r8, fp]
   127ec:	cmp	r3, #0
   127f0:	str	r3, [sp, #40]	; 0x28
   127f4:	bne	12814 <__assert_fail@plt+0x1900>
   127f8:	cmp	sl, #58	; 0x3a
   127fc:	beq	129ec <__assert_fail@plt+0x1ad8>
   12800:	cmp	sl, #61	; 0x3d
   12804:	beq	129ec <__assert_fail@plt+0x1ad8>
   12808:	ldrb	r3, [r9, r5]
   1280c:	cmp	r3, #42	; 0x2a
   12810:	beq	12974 <__assert_fail@plt+0x1a60>
   12814:	cmp	sl, #45	; 0x2d
   12818:	beq	12888 <__assert_fail@plt+0x1974>
   1281c:	mov	r0, #24
   12820:	bl	17d98 <__assert_fail@plt+0x6e84>
   12824:	ldr	r3, [sp, #28]
   12828:	mov	r2, #0
   1282c:	str	r2, [r0]
   12830:	str	r2, [r0, #4]
   12834:	ldr	r2, [sp, #36]	; 0x24
   12838:	ldr	r3, [r3, #4]
   1283c:	strb	r2, [r0, #8]
   12840:	cmp	r3, #0
   12844:	beq	13060 <__assert_fail@plt+0x214c>
   12848:	str	r0, [r3, #4]
   1284c:	ldr	r3, [sp, #28]
   12850:	str	r0, [r3, #4]
   12854:	mov	fp, r7
   12858:	ldr	r3, [sp, #32]
   1285c:	add	r5, fp, #2
   12860:	cmp	r3, r5
   12864:	bls	12ec0 <__assert_fail@plt+0x1fac>
   12868:	ldrb	r3, [r9, fp]
   1286c:	add	r7, fp, #1
   12870:	ldrb	sl, [r9, r7]
   12874:	cmp	r3, #91	; 0x5b
   12878:	str	r3, [sp, #36]	; 0x24
   1287c:	beq	127e8 <__assert_fail@plt+0x18d4>
   12880:	cmp	sl, #45	; 0x2d
   12884:	bne	1281c <__assert_fail@plt+0x1908>
   12888:	ldrb	r3, [r8, r7]
   1288c:	cmp	r3, #0
   12890:	str	r3, [sp, #40]	; 0x28
   12894:	bne	1281c <__assert_fail@plt+0x1908>
   12898:	ldrb	r4, [r9, r5]
   1289c:	ldr	r3, [sp, #36]	; 0x24
   128a0:	cmp	r3, r4
   128a4:	bhi	12b60 <__assert_fail@plt+0x1c4c>
   128a8:	mov	r0, #24
   128ac:	bl	17d98 <__assert_fail@plt+0x6e84>
   128b0:	mov	r2, #1
   128b4:	ldr	r3, [sp, #28]
   128b8:	str	r2, [r0]
   128bc:	ldr	r2, [sp, #40]	; 0x28
   128c0:	ldr	r3, [r3, #4]
   128c4:	str	r2, [r0, #4]
   128c8:	ldr	r2, [sp, #36]	; 0x24
   128cc:	cmp	r3, #0
   128d0:	strb	r2, [r0, #8]
   128d4:	strb	r4, [r0, #9]
   128d8:	beq	1307c <__assert_fail@plt+0x2168>
   128dc:	str	r0, [r3, #4]
   128e0:	add	r7, fp, #3
   128e4:	ldr	r3, [sp, #28]
   128e8:	str	r0, [r3, #4]
   128ec:	b	12854 <__assert_fail@plt+0x1940>
   128f0:	ldr	r2, [sp, #32]
   128f4:	add	r3, fp, #3
   128f8:	cmp	r2, r3
   128fc:	bls	12a9c <__assert_fail@plt+0x1b88>
   12900:	ldrb	r0, [r9, r3]
   12904:	add	r1, r9, r3
   12908:	sub	r2, r0, #48	; 0x30
   1290c:	cmp	r2, #9
   12910:	bhi	12960 <__assert_fail@plt+0x1a4c>
   12914:	ldrb	r0, [r8, r3]
   12918:	add	r2, r8, r3
   1291c:	cmp	r0, #0
   12920:	bne	12a9c <__assert_fail@plt+0x1b88>
   12924:	ldr	r3, [sp, #32]
   12928:	sub	ip, r9, #1
   1292c:	ldr	r4, [sp, #44]	; 0x2c
   12930:	add	ip, ip, r3
   12934:	b	12944 <__assert_fail@plt+0x1a30>
   12938:	ldrb	lr, [r2, #1]!
   1293c:	cmp	lr, #0
   12940:	bne	12960 <__assert_fail@plt+0x1a4c>
   12944:	cmp	ip, r1
   12948:	add	r3, r4, r1
   1294c:	beq	12a9c <__assert_fail@plt+0x1b88>
   12950:	ldrb	r0, [r1, #1]!
   12954:	sub	lr, r0, #48	; 0x30
   12958:	cmp	lr, #9
   1295c:	bls	12938 <__assert_fail@plt+0x1a24>
   12960:	cmp	r0, #93	; 0x5d
   12964:	bne	12a9c <__assert_fail@plt+0x1b88>
   12968:	ldrb	r3, [r8, r3]
   1296c:	cmp	r3, #0
   12970:	bne	12a9c <__assert_fail@plt+0x1b88>
   12974:	ldrb	r3, [r8, r5]
   12978:	cmp	r3, #0
   1297c:	bne	12814 <__assert_fail@plt+0x1900>
   12980:	ldr	r2, [sp, #32]
   12984:	add	r3, fp, #3
   12988:	cmp	r2, r3
   1298c:	bls	12814 <__assert_fail@plt+0x1900>
   12990:	ldrb	r1, [r8, r3]
   12994:	add	r2, r8, r3
   12998:	cmp	r1, #0
   1299c:	bne	12814 <__assert_fail@plt+0x1900>
   129a0:	ldrb	r0, [r9, r3]
   129a4:	add	r1, r9, r3
   129a8:	str	r1, [sp, #48]	; 0x30
   129ac:	cmp	r0, #93	; 0x5d
   129b0:	addne	r1, r9, r3
   129b4:	bne	129d8 <__assert_fail@plt+0x1ac4>
   129b8:	b	12d80 <__assert_fail@plt+0x1e6c>
   129bc:	ldrb	ip, [r2, #1]!
   129c0:	cmp	ip, #0
   129c4:	bne	12814 <__assert_fail@plt+0x1900>
   129c8:	ldrb	lr, [r1, #1]!
   129cc:	cmp	lr, #93	; 0x5d
   129d0:	beq	12c30 <__assert_fail@plt+0x1d1c>
   129d4:	mov	r3, r6
   129d8:	ldr	ip, [sp, #32]
   129dc:	add	r6, r3, #1
   129e0:	cmp	ip, r6
   129e4:	bhi	129bc <__assert_fail@plt+0x1aa8>
   129e8:	b	12814 <__assert_fail@plt+0x1900>
   129ec:	ldrb	r3, [r8, r7]
   129f0:	cmp	r3, #0
   129f4:	bne	12808 <__assert_fail@plt+0x18f4>
   129f8:	ldr	r3, [sp, #32]
   129fc:	sub	r1, r3, #1
   12a00:	cmp	r5, r1
   12a04:	bcs	12808 <__assert_fail@plt+0x18f4>
   12a08:	add	r3, r9, r5
   12a0c:	mov	r6, r5
   12a10:	mov	r2, r3
   12a14:	add	r3, r8, r5
   12a18:	str	r2, [sp, #52]	; 0x34
   12a1c:	b	12a30 <__assert_fail@plt+0x1b1c>
   12a20:	cmp	r0, r1
   12a24:	mov	r6, r0
   12a28:	add	r3, r3, #1
   12a2c:	bcs	12808 <__assert_fail@plt+0x18f4>
   12a30:	ldrb	ip, [r2], #1
   12a34:	add	r0, r6, #1
   12a38:	cmp	ip, sl
   12a3c:	bne	12a20 <__assert_fail@plt+0x1b0c>
   12a40:	ldrb	ip, [r2]
   12a44:	cmp	ip, #93	; 0x5d
   12a48:	bne	12a20 <__assert_fail@plt+0x1b0c>
   12a4c:	ldrb	ip, [r3]
   12a50:	cmp	ip, #0
   12a54:	bne	12a20 <__assert_fail@plt+0x1b0c>
   12a58:	ldrb	r4, [r3, #1]
   12a5c:	cmp	r4, #0
   12a60:	bne	12a20 <__assert_fail@plt+0x1b0c>
   12a64:	sub	r3, r6, fp
   12a68:	subs	r3, r3, #2
   12a6c:	str	r3, [sp, #48]	; 0x30
   12a70:	beq	13028 <__assert_fail@plt+0x2114>
   12a74:	cmp	sl, #58	; 0x3a
   12a78:	beq	12cd4 <__assert_fail@plt+0x1dc0>
   12a7c:	cmp	r3, #1
   12a80:	beq	12e14 <__assert_fail@plt+0x1f00>
   12a84:	ldrb	r3, [r9, r5]
   12a88:	cmp	r3, #42	; 0x2a
   12a8c:	bne	12a9c <__assert_fail@plt+0x1b88>
   12a90:	ldrb	r3, [r8, r5]
   12a94:	cmp	r3, #0
   12a98:	beq	128f0 <__assert_fail@plt+0x19dc>
   12a9c:	ldr	r1, [sp, #48]	; 0x30
   12aa0:	ldr	r0, [sp, #52]	; 0x34
   12aa4:	bl	11d20 <__assert_fail@plt+0xe0c>
   12aa8:	mov	r4, r0
   12aac:	mov	r2, #5
   12ab0:	movw	r1, #39456	; 0x9a20
   12ab4:	movt	r1, #1
   12ab8:	mov	r0, #0
   12abc:	bl	10d58 <dcgettext@plt>
   12ac0:	mov	r2, r0
   12ac4:	mov	r3, r4
   12ac8:	mov	r1, #0
   12acc:	mov	r0, r1
   12ad0:	bl	10dc4 <error@plt>
   12ad4:	mov	r0, r4
   12ad8:	bl	13a70 <__assert_fail@plt+0x2b5c>
   12adc:	b	12c00 <__assert_fail@plt+0x1cec>
   12ae0:	cmp	r4, #55	; 0x37
   12ae4:	bhi	12b48 <__assert_fail@plt+0x1c34>
   12ae8:	cmp	r4, #48	; 0x30
   12aec:	bcs	12e64 <__assert_fail@plt+0x1f50>
   12af0:	cmp	r4, #0
   12af4:	bne	12b40 <__assert_fail@plt+0x1c2c>
   12af8:	mov	r2, #5
   12afc:	mov	r0, r4
   12b00:	ldr	r1, [sp, #36]	; 0x24
   12b04:	bl	10d58 <dcgettext@plt>
   12b08:	mov	r2, r0
   12b0c:	mov	r1, r4
   12b10:	mov	r0, r4
   12b14:	bl	10dc4 <error@plt>
   12b18:	add	r2, r5, #1
   12b1c:	strb	r4, [sl]
   12b20:	mov	r4, fp
   12b24:	b	127d8 <__assert_fail@plt+0x18c4>
   12b28:	cmp	r4, #116	; 0x74
   12b2c:	moveq	r4, #9
   12b30:	beq	127d8 <__assert_fail@plt+0x18c4>
   12b34:	cmp	r4, #118	; 0x76
   12b38:	moveq	r4, #11
   12b3c:	b	127d8 <__assert_fail@plt+0x18c4>
   12b40:	add	r2, r5, #2
   12b44:	b	127d8 <__assert_fail@plt+0x18c4>
   12b48:	cmp	r4, #92	; 0x5c
   12b4c:	beq	12b40 <__assert_fail@plt+0x1c2c>
   12b50:	cmp	r4, #97	; 0x61
   12b54:	add	r2, r5, #2
   12b58:	moveq	r4, #7
   12b5c:	b	127d8 <__assert_fail@plt+0x18c4>
   12b60:	mov	r0, #5
   12b64:	mov	sl, r3
   12b68:	bl	17d98 <__assert_fail@plt+0x6e84>
   12b6c:	mov	r5, r0
   12b70:	bl	10e24 <__ctype_b_loc@plt>
   12b74:	ldr	r2, [r0]
   12b78:	lsl	r3, sl, #1
   12b7c:	mov	r7, r0
   12b80:	ldrh	r3, [r2, r3]
   12b84:	tst	r3, #16384	; 0x4000
   12b88:	beq	12db8 <__assert_fail@plt+0x1ea4>
   12b8c:	ldr	r3, [sp, #40]	; 0x28
   12b90:	strb	sl, [r5]
   12b94:	strb	r3, [r5, #1]
   12b98:	mov	r0, #5
   12b9c:	bl	17d98 <__assert_fail@plt+0x6e84>
   12ba0:	ldr	r2, [r7]
   12ba4:	lsl	r3, r4, #1
   12ba8:	mov	r6, r0
   12bac:	ldrh	r3, [r2, r3]
   12bb0:	tst	r3, #16384	; 0x4000
   12bb4:	beq	12d9c <__assert_fail@plt+0x1e88>
   12bb8:	mov	r3, #0
   12bbc:	strb	r4, [r0]
   12bc0:	strb	r3, [r0, #1]
   12bc4:	mov	r2, #5
   12bc8:	movw	r1, #39560	; 0x9a88
   12bcc:	movt	r1, #1
   12bd0:	mov	r0, #0
   12bd4:	bl	10d58 <dcgettext@plt>
   12bd8:	mov	r1, #0
   12bdc:	mov	r2, r0
   12be0:	str	r6, [sp]
   12be4:	mov	r0, r1
   12be8:	mov	r3, r5
   12bec:	bl	10dc4 <error@plt>
   12bf0:	mov	r0, r5
   12bf4:	bl	13a70 <__assert_fail@plt+0x2b5c>
   12bf8:	mov	r0, r6
   12bfc:	bl	13a70 <__assert_fail@plt+0x2b5c>
   12c00:	mov	r0, r9
   12c04:	bl	13a70 <__assert_fail@plt+0x2b5c>
   12c08:	mov	r0, r8
   12c0c:	bl	13a70 <__assert_fail@plt+0x2b5c>
   12c10:	ldr	r0, [sp, #40]	; 0x28
   12c14:	add	sp, sp, #92	; 0x5c
   12c18:	ldrd	r4, [sp]
   12c1c:	ldrd	r6, [sp, #8]
   12c20:	ldrd	r8, [sp, #16]
   12c24:	ldrd	sl, [sp, #24]
   12c28:	add	sp, sp, #32
   12c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c30:	mvn	r4, r7
   12c34:	adds	r7, r4, r3
   12c38:	beq	12d7c <__assert_fail@plt+0x1e68>
   12c3c:	ldr	fp, [sp, #48]	; 0x30
   12c40:	cmp	r0, #48	; 0x30
   12c44:	add	r3, sp, #80	; 0x50
   12c48:	moveq	r2, #8
   12c4c:	movne	r2, #10
   12c50:	str	ip, [sp]
   12c54:	add	r1, sp, #76	; 0x4c
   12c58:	mov	r0, fp
   12c5c:	bl	18394 <__assert_fail@plt+0x7480>
   12c60:	cmp	r0, #0
   12c64:	bne	13008 <__assert_fail@plt+0x20f4>
   12c68:	ldrd	r4, [sp, #80]	; 0x50
   12c6c:	mvn	r3, #0
   12c70:	mvn	r2, #0
   12c74:	cmp	r5, r3
   12c78:	cmpeq	r4, r2
   12c7c:	beq	13008 <__assert_fail@plt+0x20f4>
   12c80:	ldr	r2, [sp, #76]	; 0x4c
   12c84:	add	r3, fp, r7
   12c88:	cmp	r2, r3
   12c8c:	bne	13008 <__assert_fail@plt+0x20f4>
   12c90:	mov	r0, #24
   12c94:	bl	17d98 <__assert_fail@plt+0x6e84>
   12c98:	ldr	r3, [sp, #28]
   12c9c:	mov	r2, #0
   12ca0:	str	r2, [r0, #4]
   12ca4:	mov	r2, #4
   12ca8:	strb	sl, [r0, #8]
   12cac:	str	r2, [r0]
   12cb0:	ldr	r3, [r3, #4]
   12cb4:	strd	r4, [r0, #16]
   12cb8:	cmp	r3, #0
   12cbc:	beq	13098 <__assert_fail@plt+0x2184>
   12cc0:	str	r0, [r3, #4]
   12cc4:	add	r7, r6, #1
   12cc8:	ldr	r3, [sp, #28]
   12ccc:	str	r0, [r3, #4]
   12cd0:	b	12854 <__assert_fail@plt+0x1940>
   12cd4:	ldr	r3, [pc, #988]	; 130b8 <__assert_fail@plt+0x21a4>
   12cd8:	str	fp, [sp, #56]	; 0x38
   12cdc:	str	r6, [sp, #68]	; 0x44
   12ce0:	ldr	r6, [sp, #48]	; 0x30
   12ce4:	str	r5, [sp, #60]	; 0x3c
   12ce8:	mov	r5, r3
   12cec:	str	r7, [sp, #64]	; 0x40
   12cf0:	ldr	r7, [r5], #4
   12cf4:	mov	r2, r6
   12cf8:	ldr	r0, [sp, #52]	; 0x34
   12cfc:	mov	r1, r7
   12d00:	bl	10ef0 <strncmp@plt>
   12d04:	subs	fp, r0, #0
   12d08:	bne	12d1c <__assert_fail@plt+0x1e08>
   12d0c:	mov	r0, r7
   12d10:	bl	10e3c <strlen@plt>
   12d14:	cmp	r6, r0
   12d18:	beq	12dd8 <__assert_fail@plt+0x1ec4>
   12d1c:	add	r4, r4, #1
   12d20:	cmp	r4, #12
   12d24:	bne	12cf0 <__assert_fail@plt+0x1ddc>
   12d28:	ldr	fp, [sp, #56]	; 0x38
   12d2c:	ldr	r5, [sp, #60]	; 0x3c
   12d30:	ldr	r7, [sp, #64]	; 0x40
   12d34:	ldrb	r3, [r9, r5]
   12d38:	cmp	r3, #42	; 0x2a
   12d3c:	beq	12f24 <__assert_fail@plt+0x2010>
   12d40:	ldr	r1, [sp, #48]	; 0x30
   12d44:	ldr	r0, [sp, #52]	; 0x34
   12d48:	bl	11d20 <__assert_fail@plt+0xe0c>
   12d4c:	mov	r4, r0
   12d50:	movw	r1, #39428	; 0x9a04
   12d54:	movt	r1, #1
   12d58:	mov	r2, #5
   12d5c:	mov	r0, #0
   12d60:	bl	10d58 <dcgettext@plt>
   12d64:	mov	r5, r0
   12d68:	mov	r0, r4
   12d6c:	bl	17440 <__assert_fail@plt+0x652c>
   12d70:	mov	r3, r0
   12d74:	mov	r2, r5
   12d78:	b	12ac8 <__assert_fail@plt+0x1bb4>
   12d7c:	mov	r3, r6
   12d80:	mov	r4, #0
   12d84:	mov	r5, #0
   12d88:	mov	r6, r3
   12d8c:	mov	r2, r4
   12d90:	mov	r3, r5
   12d94:	strd	r2, [sp, #80]	; 0x50
   12d98:	b	12c90 <__assert_fail@plt+0x1d7c>
   12d9c:	movw	r3, #39060	; 0x9894
   12da0:	movt	r3, #1
   12da4:	str	r4, [sp]
   12da8:	mov	r2, #5
   12dac:	mov	r1, #1
   12db0:	bl	10e60 <__sprintf_chk@plt>
   12db4:	b	12bc4 <__assert_fail@plt+0x1cb0>
   12db8:	movw	r3, #39060	; 0x9894
   12dbc:	movt	r3, #1
   12dc0:	str	sl, [sp]
   12dc4:	mov	r2, #5
   12dc8:	mov	r1, #1
   12dcc:	mov	r0, r5
   12dd0:	bl	10e60 <__sprintf_chk@plt>
   12dd4:	b	12b98 <__assert_fail@plt+0x1c84>
   12dd8:	mov	r0, #24
   12ddc:	ldr	r6, [sp, #68]	; 0x44
   12de0:	bl	17d98 <__assert_fail@plt+0x6e84>
   12de4:	ldr	r3, [sp, #28]
   12de8:	mov	r2, #2
   12dec:	stm	r0, {r2, fp}
   12df0:	str	r4, [r0, #8]
   12df4:	ldr	r3, [r3, #4]
   12df8:	cmp	r3, #0
   12dfc:	beq	1309c <__assert_fail@plt+0x2188>
   12e00:	str	r0, [r3, #4]
   12e04:	add	r7, r6, #2
   12e08:	ldr	r3, [sp, #28]
   12e0c:	str	r0, [r3, #4]
   12e10:	b	12854 <__assert_fail@plt+0x1940>
   12e14:	mov	r0, #24
   12e18:	bl	17d98 <__assert_fail@plt+0x6e84>
   12e1c:	ldr	r3, [sp, #28]
   12e20:	mov	r1, #3
   12e24:	ldrb	r2, [r9, r5]
   12e28:	stm	r0, {r1, r4}
   12e2c:	ldr	r3, [r3, #4]
   12e30:	strb	r2, [r0, #8]
   12e34:	cmp	r3, #0
   12e38:	bne	12e00 <__assert_fail@plt+0x1eec>
   12e3c:	movw	r1, #39068	; 0x989c
   12e40:	movt	r1, #1
   12e44:	ldr	r3, [pc, #624]	; 130bc <__assert_fail@plt+0x21a8>
   12e48:	movw	r0, #39156	; 0x98f4
   12e4c:	movt	r0, #1
   12e50:	movw	r2, #743	; 0x2e7
   12e54:	bl	10f14 <__assert_fail@plt>
   12e58:	add	r2, r5, #2
   12e5c:	mov	r4, #8
   12e60:	b	127d8 <__assert_fail@plt+0x18c4>
   12e64:	add	r2, r5, #2
   12e68:	sub	r4, r4, #48	; 0x30
   12e6c:	ldrb	r1, [r7, r2]
   12e70:	add	r0, r7, r2
   12e74:	uxtb	r4, r4
   12e78:	str	r0, [sp, #48]	; 0x30
   12e7c:	sub	r1, r1, #48	; 0x30
   12e80:	cmp	r1, #7
   12e84:	bhi	127d8 <__assert_fail@plt+0x18c4>
   12e88:	add	fp, r5, #3
   12e8c:	add	r4, r1, r4, lsl #3
   12e90:	ldrb	r1, [r7, fp]
   12e94:	and	r4, r4, #255	; 0xff
   12e98:	sub	r1, r1, #48	; 0x30
   12e9c:	cmp	r1, #7
   12ea0:	addhi	r2, r5, #3
   12ea4:	bhi	127d8 <__assert_fail@plt+0x18c4>
   12ea8:	add	r0, r1, r4, lsl #3
   12eac:	cmp	r0, #255	; 0xff
   12eb0:	bgt	12fb8 <__assert_fail@plt+0x20a4>
   12eb4:	add	r2, r2, #2
   12eb8:	and	r4, r0, #255	; 0xff
   12ebc:	b	127d8 <__assert_fail@plt+0x18c4>
   12ec0:	cmp	r3, fp
   12ec4:	bls	12f18 <__assert_fail@plt+0x2004>
   12ec8:	ldr	r6, [sp, #28]
   12ecc:	sub	fp, fp, #1
   12ed0:	sub	r5, r9, #1
   12ed4:	add	fp, r9, fp
   12ed8:	mov	r4, #0
   12edc:	ldr	r3, [sp, #32]
   12ee0:	add	r5, r5, r3
   12ee4:	mov	r0, #24
   12ee8:	ldrb	r7, [fp, #1]!
   12eec:	bl	17d98 <__assert_fail@plt+0x6e84>
   12ef0:	ldr	r3, [r6, #4]
   12ef4:	str	r4, [r0]
   12ef8:	str	r4, [r0, #4]
   12efc:	strb	r7, [r0, #8]
   12f00:	cmp	r3, #0
   12f04:	beq	13060 <__assert_fail@plt+0x214c>
   12f08:	cmp	r5, fp
   12f0c:	str	r0, [r3, #4]
   12f10:	str	r0, [r6, #4]
   12f14:	bne	12ee4 <__assert_fail@plt+0x1fd0>
   12f18:	mov	r3, #1
   12f1c:	str	r3, [sp, #40]	; 0x28
   12f20:	b	12c00 <__assert_fail@plt+0x1cec>
   12f24:	ldrb	r3, [r8, r5]
   12f28:	cmp	r3, #0
   12f2c:	bne	12d40 <__assert_fail@plt+0x1e2c>
   12f30:	ldr	r3, [sp, #32]
   12f34:	add	r2, fp, #3
   12f38:	cmp	r3, r2
   12f3c:	bls	12d40 <__assert_fail@plt+0x1e2c>
   12f40:	ldrb	r0, [r9, r2]
   12f44:	add	r1, r9, r2
   12f48:	sub	r3, r0, #48	; 0x30
   12f4c:	cmp	r3, #9
   12f50:	bhi	12fa0 <__assert_fail@plt+0x208c>
   12f54:	ldrb	r0, [r8, r2]
   12f58:	add	r3, r8, r2
   12f5c:	cmp	r0, #0
   12f60:	bne	12d40 <__assert_fail@plt+0x1e2c>
   12f64:	ldr	r2, [sp, #32]
   12f68:	sub	lr, r9, #1
   12f6c:	ldr	r4, [sp, #44]	; 0x2c
   12f70:	add	lr, lr, r2
   12f74:	b	12f84 <__assert_fail@plt+0x2070>
   12f78:	ldrb	ip, [r3, #1]!
   12f7c:	cmp	ip, #0
   12f80:	bne	12fa0 <__assert_fail@plt+0x208c>
   12f84:	cmp	lr, r1
   12f88:	add	r2, r4, r1
   12f8c:	beq	12d40 <__assert_fail@plt+0x1e2c>
   12f90:	ldrb	r0, [r1, #1]!
   12f94:	sub	ip, r0, #48	; 0x30
   12f98:	cmp	ip, #9
   12f9c:	bls	12f78 <__assert_fail@plt+0x2064>
   12fa0:	cmp	r0, #93	; 0x5d
   12fa4:	bne	12d40 <__assert_fail@plt+0x1e2c>
   12fa8:	ldrb	r3, [r8, r2]
   12fac:	cmp	r3, #0
   12fb0:	beq	12974 <__assert_fail@plt+0x1a60>
   12fb4:	b	12d40 <__assert_fail@plt+0x1e2c>
   12fb8:	mov	r2, #5
   12fbc:	mov	r0, #0
   12fc0:	ldr	r1, [sp, #40]	; 0x28
   12fc4:	str	r3, [sp, #52]	; 0x34
   12fc8:	bl	10d58 <dcgettext@plt>
   12fcc:	ldr	ip, [sp, #48]	; 0x30
   12fd0:	mov	r1, #0
   12fd4:	mov	r2, r0
   12fd8:	mov	r0, r1
   12fdc:	ldr	r3, [sp, #52]	; 0x34
   12fe0:	ldrb	lr, [r7, fp]
   12fe4:	ldrb	ip, [ip]
   12fe8:	ldrb	r3, [r7, r3]
   12fec:	stm	sp, {ip, lr}
   12ff0:	str	lr, [sp, #16]
   12ff4:	str	r3, [sp, #8]
   12ff8:	str	ip, [sp, #12]
   12ffc:	bl	10dc4 <error@plt>
   13000:	add	r2, r5, #3
   13004:	b	127d8 <__assert_fail@plt+0x18c4>
   13008:	mov	r1, r7
   1300c:	ldr	r7, [sp, #48]	; 0x30
   13010:	mov	r0, r7
   13014:	bl	11d20 <__assert_fail@plt+0xe0c>
   13018:	mov	r4, r0
   1301c:	movw	r1, #39516	; 0x9a5c
   13020:	movt	r1, #1
   13024:	b	12d58 <__assert_fail@plt+0x1e44>
   13028:	ldr	r4, [sp, #48]	; 0x30
   1302c:	cmp	sl, #58	; 0x3a
   13030:	mov	r2, #5
   13034:	movweq	r1, #39348	; 0x99b4
   13038:	movwne	r1, #39384	; 0x99d8
   1303c:	movteq	r1, #1
   13040:	movtne	r1, #1
   13044:	mov	r0, r4
   13048:	bl	10d58 <dcgettext@plt>
   1304c:	mov	r2, r0
   13050:	mov	r1, r4
   13054:	mov	r0, r4
   13058:	bl	10dc4 <error@plt>
   1305c:	b	12c00 <__assert_fail@plt+0x1cec>
   13060:	movw	r1, #39068	; 0x989c
   13064:	movt	r1, #1
   13068:	ldr	r3, [pc, #80]	; 130c0 <__assert_fail@plt+0x21ac>
   1306c:	movw	r0, #39156	; 0x98f4
   13070:	movt	r0, #1
   13074:	movw	r2, #649	; 0x289
   13078:	bl	10f14 <__assert_fail@plt>
   1307c:	movw	r1, #39068	; 0x989c
   13080:	movt	r1, #1
   13084:	ldr	r3, [pc, #56]	; 130c4 <__assert_fail@plt+0x21b0>
   13088:	movw	r0, #39156	; 0x98f4
   1308c:	movt	r0, #1
   13090:	movw	r2, #679	; 0x2a7
   13094:	bl	10f14 <__assert_fail@plt>
   13098:	bl	1241c <__assert_fail@plt+0x1508>
   1309c:	movw	r1, #39068	; 0x989c
   130a0:	movt	r1, #1
   130a4:	ldr	r3, [pc, #28]	; 130c8 <__assert_fail@plt+0x21b4>
   130a8:	movw	r0, #39156	; 0x98f4
   130ac:	movt	r0, #1
   130b0:	movw	r2, #701	; 0x2bd
   130b4:	bl	10f14 <__assert_fail@plt>
   130b8:	andeq	r9, r1, r0, lsr #14
   130bc:	andeq	r9, r1, r4, ror #14
   130c0:	andeq	r9, r1, r8, lsl #15
   130c4:	andeq	r9, r1, r8, ror r7
   130c8:	andeq	r9, r1, r0, asr r7
   130cc:	ldr	r2, [r0]
   130d0:	mov	r3, #0
   130d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130d8:	ldr	r5, [r2, #4]
   130dc:	strd	r6, [sp, #8]
   130e0:	strd	r8, [sp, #16]
   130e4:	strd	sl, [sp, #24]
   130e8:	str	lr, [sp, #32]
   130ec:	sub	sp, sp, #12
   130f0:	cmp	r5, r3
   130f4:	str	r3, [r0, #24]
   130f8:	str	r0, [sp, #4]
   130fc:	strh	r3, [r0, #32]
   13100:	strb	r3, [r0, #34]	; 0x22
   13104:	beq	13428 <__assert_fail@plt+0x2514>
   13108:	mov	r3, #32768	; 0x8000
   1310c:	movt	r3, #65535	; 0xffff
   13110:	mov	r6, #0
   13114:	mov	r7, #0
   13118:	mov	sl, #1
   1311c:	str	r3, [sp]
   13120:	ldr	r3, [r5]
   13124:	cmp	r3, #4
   13128:	ldrls	pc, [pc, r3, lsl #2]
   1312c:	b	13450 <__assert_fail@plt+0x253c>
   13130:	andeq	r3, r1, ip, lsl r4
   13134:	strdeq	r3, [r1], -r8
   13138:	andeq	r3, r1, r0, lsr #4
   1313c:	muleq	r1, r4, r1
   13140:	andeq	r3, r1, r4, asr #2
   13144:	ldrd	r8, [r5, #16]
   13148:	orrs	r3, r8, r9
   1314c:	bne	131cc <__assert_fail@plt+0x22b8>
   13150:	ldr	r2, [sp, #4]
   13154:	ldr	r3, [r2, #24]
   13158:	str	r5, [r2, #28]
   1315c:	add	r3, r3, #1
   13160:	str	r3, [r2, #24]
   13164:	ldr	r5, [r5, #4]
   13168:	cmp	r5, #0
   1316c:	bne	13120 <__assert_fail@plt+0x220c>
   13170:	ldr	r3, [sp, #4]
   13174:	strd	r6, [r3, #16]
   13178:	add	sp, sp, #12
   1317c:	ldrd	r4, [sp]
   13180:	ldrd	r6, [sp, #8]
   13184:	ldrd	r8, [sp, #16]
   13188:	ldrd	sl, [sp, #24]
   1318c:	add	sp, sp, #32
   13190:	pop	{pc}		; (ldr pc, [sp], #4)
   13194:	ldrb	ip, [r5, #8]
   13198:	mov	r1, #0
   1319c:	mov	r8, #0
   131a0:	mov	r9, #0
   131a4:	uxtb	r0, r1
   131a8:	cmp	ip, r0
   131ac:	bne	131b8 <__assert_fail@plt+0x22a4>
   131b0:	adds	r8, r8, #1
   131b4:	adc	r9, r9, #0
   131b8:	add	r1, r1, #1
   131bc:	cmp	r1, #256	; 0x100
   131c0:	bne	131a4 <__assert_fail@plt+0x2290>
   131c4:	ldr	r3, [sp, #4]
   131c8:	strb	sl, [r3, #32]
   131cc:	adds	r0, r6, r8
   131d0:	adcs	r1, r7, r9
   131d4:	mov	r6, r0
   131d8:	and	r3, r0, r1
   131dc:	movcs	r2, #1
   131e0:	movcc	r2, #0
   131e4:	cmn	r3, #1
   131e8:	movne	r3, #0
   131ec:	moveq	r3, #1
   131f0:	orrs	r3, r2, r3
   131f4:	mov	r7, r1
   131f8:	beq	13164 <__assert_fail@plt+0x2250>
   131fc:	mov	r2, #5
   13200:	movw	r1, #39676	; 0x9afc
   13204:	movt	r1, #1
   13208:	mov	r0, #0
   1320c:	bl	10d58 <dcgettext@plt>
   13210:	mov	r2, r0
   13214:	mov	r1, #0
   13218:	mov	r0, #1
   1321c:	bl	10dc4 <error@plt>
   13220:	ldr	r3, [sp, #4]
   13224:	mov	fp, #256	; 0x100
   13228:	mov	r8, #0
   1322c:	mov	r9, #0
   13230:	ldr	r4, [r5, #8]
   13234:	strb	sl, [r3, #33]	; 0x21
   13238:	cmp	r4, #11
   1323c:	ldrls	pc, [pc, r4, lsl #2]
   13240:	b	13450 <__assert_fail@plt+0x253c>
   13244:	ldrdeq	r3, [r1], -ip
   13248:	andeq	r3, r1, r0, asr #7
   1324c:	andeq	r3, r1, r4, lsr #7
   13250:	andeq	r3, r1, r8, lsl #7
   13254:	andeq	r3, r1, ip, ror #6
   13258:	andeq	r3, r1, ip, asr #6
   1325c:	andeq	r3, r1, r0, lsr r3
   13260:	andeq	r3, r1, r4, lsl r3
   13264:	strdeq	r3, [r1], -r8
   13268:	ldrdeq	r3, [r1], -ip
   1326c:	andeq	r3, r1, r0, asr #5
   13270:	andeq	r3, r1, r4, ror r2
   13274:	bl	10e24 <__ctype_b_loc@plt>
   13278:	ldr	r1, [r0]
   1327c:	sub	r1, r1, fp, lsl #1
   13280:	add	r1, r1, #512	; 0x200
   13284:	ldrh	r1, [r1]
   13288:	and	r1, r1, #4096	; 0x1000
   1328c:	cmp	r1, #0
   13290:	beq	1329c <__assert_fail@plt+0x2388>
   13294:	adds	r8, r8, #1
   13298:	adc	r9, r9, #0
   1329c:	subs	fp, fp, #1
   132a0:	bne	13238 <__assert_fail@plt+0x2324>
   132a4:	cmp	r4, #6
   132a8:	beq	131cc <__assert_fail@plt+0x22b8>
   132ac:	cmp	r4, #10
   132b0:	beq	131cc <__assert_fail@plt+0x22b8>
   132b4:	ldr	r3, [sp, #4]
   132b8:	strb	sl, [r3, #34]	; 0x22
   132bc:	b	131cc <__assert_fail@plt+0x22b8>
   132c0:	bl	10e24 <__ctype_b_loc@plt>
   132c4:	ldr	r1, [r0]
   132c8:	sub	r1, r1, fp, lsl #1
   132cc:	add	r1, r1, #512	; 0x200
   132d0:	ldrh	r1, [r1]
   132d4:	and	r1, r1, #256	; 0x100
   132d8:	b	1328c <__assert_fail@plt+0x2378>
   132dc:	bl	10e24 <__ctype_b_loc@plt>
   132e0:	ldr	r1, [r0]
   132e4:	sub	r1, r1, fp, lsl #1
   132e8:	add	r1, r1, #512	; 0x200
   132ec:	ldrh	r1, [r1]
   132f0:	and	r1, r1, #8192	; 0x2000
   132f4:	b	1328c <__assert_fail@plt+0x2378>
   132f8:	bl	10e24 <__ctype_b_loc@plt>
   132fc:	ldr	r1, [r0]
   13300:	sub	r1, r1, fp, lsl #1
   13304:	add	r1, r1, #512	; 0x200
   13308:	ldrh	r1, [r1]
   1330c:	and	r1, r1, #4
   13310:	b	1328c <__assert_fail@plt+0x2378>
   13314:	bl	10e24 <__ctype_b_loc@plt>
   13318:	ldr	r1, [r0]
   1331c:	sub	r1, r1, fp, lsl #1
   13320:	add	r1, r1, #512	; 0x200
   13324:	ldrh	r1, [r1]
   13328:	and	r1, r1, #16384	; 0x4000
   1332c:	b	1328c <__assert_fail@plt+0x2378>
   13330:	bl	10e24 <__ctype_b_loc@plt>
   13334:	ldr	r1, [r0]
   13338:	sub	r1, r1, fp, lsl #1
   1333c:	add	r1, r1, #512	; 0x200
   13340:	ldrh	r1, [r1]
   13344:	and	r1, r1, #512	; 0x200
   13348:	b	1328c <__assert_fail@plt+0x2378>
   1334c:	bl	10e24 <__ctype_b_loc@plt>
   13350:	ldr	r1, [r0]
   13354:	ldr	r3, [sp]
   13358:	sub	r1, r1, fp, lsl #1
   1335c:	add	r1, r1, #512	; 0x200
   13360:	ldrh	r1, [r1]
   13364:	and	r1, r1, r3
   13368:	b	1328c <__assert_fail@plt+0x2378>
   1336c:	bl	10e24 <__ctype_b_loc@plt>
   13370:	ldr	r1, [r0]
   13374:	sub	r1, r1, fp, lsl #1
   13378:	add	r1, r1, #512	; 0x200
   1337c:	ldrh	r1, [r1]
   13380:	and	r1, r1, #2048	; 0x800
   13384:	b	1328c <__assert_fail@plt+0x2378>
   13388:	bl	10e24 <__ctype_b_loc@plt>
   1338c:	ldr	r1, [r0]
   13390:	sub	r1, r1, fp, lsl #1
   13394:	add	r1, r1, #512	; 0x200
   13398:	ldrh	r1, [r1]
   1339c:	and	r1, r1, #2
   133a0:	b	1328c <__assert_fail@plt+0x2378>
   133a4:	bl	10e24 <__ctype_b_loc@plt>
   133a8:	ldr	r1, [r0]
   133ac:	sub	r1, r1, fp, lsl #1
   133b0:	add	r1, r1, #512	; 0x200
   133b4:	ldrh	r1, [r1]
   133b8:	and	r1, r1, #1
   133bc:	b	1328c <__assert_fail@plt+0x2378>
   133c0:	bl	10e24 <__ctype_b_loc@plt>
   133c4:	ldr	r1, [r0]
   133c8:	sub	r1, r1, fp, lsl #1
   133cc:	add	r1, r1, #512	; 0x200
   133d0:	ldrh	r1, [r1]
   133d4:	and	r1, r1, #1024	; 0x400
   133d8:	b	1328c <__assert_fail@plt+0x2378>
   133dc:	bl	10e24 <__ctype_b_loc@plt>
   133e0:	ldr	r1, [r0]
   133e4:	sub	r1, r1, fp, lsl #1
   133e8:	add	r1, r1, #512	; 0x200
   133ec:	ldrh	r1, [r1]
   133f0:	and	r1, r1, #8
   133f4:	b	1328c <__assert_fail@plt+0x2378>
   133f8:	ldrb	r3, [r5, #9]
   133fc:	ldrb	r2, [r5, #8]
   13400:	cmp	r3, r2
   13404:	bcc	13434 <__assert_fail@plt+0x2520>
   13408:	sub	r2, r3, r2
   1340c:	add	r2, r2, #1
   13410:	mov	r8, r2
   13414:	asr	r9, r2, #31
   13418:	b	131cc <__assert_fail@plt+0x22b8>
   1341c:	mov	r8, #1
   13420:	mov	r9, #0
   13424:	b	131cc <__assert_fail@plt+0x22b8>
   13428:	mov	r6, #0
   1342c:	mov	r7, #0
   13430:	b	13170 <__assert_fail@plt+0x225c>
   13434:	movw	r1, #39068	; 0x989c
   13438:	movt	r1, #1
   1343c:	ldr	r3, [pc, #16]	; 13454 <__assert_fail@plt+0x2540>
   13440:	movw	r0, #39628	; 0x9acc
   13444:	movt	r0, #1
   13448:	movw	r2, #1265	; 0x4f1
   1344c:	bl	10f14 <__assert_fail@plt>
   13450:	bl	10efc <abort@plt>
   13454:	muleq	r1, ip, r7
   13458:	strd	r4, [sp, #-16]!
   1345c:	mov	r4, r0
   13460:	mov	r5, r1
   13464:	str	r6, [sp, #8]
   13468:	movw	r6, #49500	; 0xc15c
   1346c:	movt	r6, #2
   13470:	str	lr, [sp, #12]
   13474:	mov	r2, r5
   13478:	mov	r1, r4
   1347c:	mov	r0, #0
   13480:	bl	175d4 <__assert_fail@plt+0x66c0>
   13484:	cmn	r0, #1
   13488:	beq	1355c <__assert_fail@plt+0x2648>
   1348c:	cmp	r0, #0
   13490:	beq	134fc <__assert_fail@plt+0x25e8>
   13494:	ldrb	r3, [r4]
   13498:	add	r3, r6, r3
   1349c:	ldrb	r3, [r3, #512]	; 0x200
   134a0:	cmp	r3, #0
   134a4:	beq	1350c <__assert_fail@plt+0x25f8>
   134a8:	cmp	r0, #1
   134ac:	movne	lr, #0
   134b0:	movne	r3, #1
   134b4:	beq	13474 <__assert_fail@plt+0x2560>
   134b8:	sub	r3, r3, #1
   134bc:	add	r3, r4, r3
   134c0:	ldrb	r2, [r3, #1]
   134c4:	add	r1, r3, #1
   134c8:	add	ip, r6, r2
   134cc:	ldrb	ip, [ip, #512]	; 0x200
   134d0:	cmp	ip, #0
   134d4:	strbeq	r2, [r4, lr]
   134d8:	add	r2, r3, #2
   134dc:	addeq	lr, lr, #1
   134e0:	sub	r2, r2, r4
   134e4:	mov	r3, r1
   134e8:	cmp	r0, r2
   134ec:	bhi	134c0 <__assert_fail@plt+0x25ac>
   134f0:	cmp	lr, #0
   134f4:	beq	13474 <__assert_fail@plt+0x2560>
   134f8:	mov	r0, lr
   134fc:	ldrd	r4, [sp]
   13500:	ldr	r6, [sp, #8]
   13504:	add	sp, sp, #12
   13508:	pop	{pc}		; (ldr pc, [sp], #4)
   1350c:	add	lr, r3, #1
   13510:	mov	r1, r4
   13514:	cmp	lr, r0
   13518:	beq	13554 <__assert_fail@plt+0x2640>
   1351c:	ldrb	r2, [r1, #1]!
   13520:	add	r2, r6, r2
   13524:	ldrb	r2, [r2, #512]	; 0x200
   13528:	cmp	r2, #0
   1352c:	beq	13544 <__assert_fail@plt+0x2630>
   13530:	add	r3, r3, #2
   13534:	cmp	r0, r3
   13538:	bhi	134b8 <__assert_fail@plt+0x25a4>
   1353c:	mov	r0, lr
   13540:	b	134fc <__assert_fail@plt+0x25e8>
   13544:	mov	r3, lr
   13548:	add	lr, r3, #1
   1354c:	cmp	lr, r0
   13550:	bne	1351c <__assert_fail@plt+0x2608>
   13554:	mov	lr, r0
   13558:	b	13530 <__assert_fail@plt+0x261c>
   1355c:	bl	10e54 <__errno_location@plt>
   13560:	ldr	r4, [r0]
   13564:	mov	r2, #5
   13568:	movw	r1, #39144	; 0x98e8
   1356c:	movt	r1, #1
   13570:	mov	r0, #0
   13574:	bl	10d58 <dcgettext@plt>
   13578:	mov	r2, r0
   1357c:	mov	r0, #1
   13580:	mov	r1, r4
   13584:	bl	10dc4 <error@plt>
   13588:	subs	r4, r0, #0
   1358c:	str	r7, [sp, #-8]!
   13590:	str	lr, [sp, #4]
   13594:	sub	sp, sp, #56	; 0x38
   13598:	beq	135e0 <__assert_fail@plt+0x26cc>
   1359c:	movw	r3, #49480	; 0xc148
   135a0:	movt	r3, #2
   135a4:	ldr	r5, [r3]
   135a8:	mov	r2, #5
   135ac:	movw	r1, #39708	; 0x9b1c
   135b0:	movt	r1, #1
   135b4:	mov	r0, #0
   135b8:	bl	10d58 <dcgettext@plt>
   135bc:	movw	r3, #58476	; 0xe46c
   135c0:	movt	r3, #2
   135c4:	mov	r2, r0
   135c8:	mov	r1, #1
   135cc:	ldr	r3, [r3]
   135d0:	mov	r0, r5
   135d4:	bl	10e9c <__fprintf_chk@plt>
   135d8:	mov	r0, r4
   135dc:	bl	10e30 <exit@plt>
   135e0:	mov	r2, #5
   135e4:	movw	r1, #39748	; 0x9b44
   135e8:	movt	r1, #1
   135ec:	movw	r5, #49492	; 0xc154
   135f0:	movt	r5, #2
   135f4:	bl	10d58 <dcgettext@plt>
   135f8:	movw	r3, #58476	; 0xe46c
   135fc:	movt	r3, #2
   13600:	mov	r1, r0
   13604:	mov	r0, #1
   13608:	ldr	r2, [r3]
   1360c:	bl	10e84 <__printf_chk@plt>
   13610:	mov	r2, #5
   13614:	movw	r1, #39784	; 0x9b68
   13618:	movt	r1, #1
   1361c:	mov	r0, r4
   13620:	bl	10d58 <dcgettext@plt>
   13624:	ldr	r1, [r5]
   13628:	bl	10cb0 <fputs_unlocked@plt>
   1362c:	mov	r2, #5
   13630:	movw	r1, #40280	; 0x9d58
   13634:	movt	r1, #1
   13638:	mov	r0, r4
   1363c:	bl	10d58 <dcgettext@plt>
   13640:	ldr	r1, [r5]
   13644:	bl	10cb0 <fputs_unlocked@plt>
   13648:	mov	r2, #5
   1364c:	movw	r1, #40328	; 0x9d88
   13650:	movt	r1, #1
   13654:	mov	r0, r4
   13658:	bl	10d58 <dcgettext@plt>
   1365c:	ldr	r1, [r5]
   13660:	bl	10cb0 <fputs_unlocked@plt>
   13664:	mov	r2, #5
   13668:	movw	r1, #40384	; 0x9dc0
   1366c:	movt	r1, #1
   13670:	mov	r0, r4
   13674:	bl	10d58 <dcgettext@plt>
   13678:	ldr	r1, [r5]
   1367c:	bl	10cb0 <fputs_unlocked@plt>
   13680:	mov	r2, #5
   13684:	movw	r1, #40760	; 0x9f38
   13688:	movt	r1, #1
   1368c:	mov	r0, r4
   13690:	bl	10d58 <dcgettext@plt>
   13694:	ldr	r1, [r5]
   13698:	bl	10cb0 <fputs_unlocked@plt>
   1369c:	mov	r2, #5
   136a0:	movw	r1, #41188	; 0xa0e4
   136a4:	movt	r1, #1
   136a8:	mov	r0, r4
   136ac:	bl	10d58 <dcgettext@plt>
   136b0:	ldr	r1, [r5]
   136b4:	bl	10cb0 <fputs_unlocked@plt>
   136b8:	mov	r2, #5
   136bc:	movw	r1, #41600	; 0xa280
   136c0:	movt	r1, #1
   136c4:	mov	r0, r4
   136c8:	bl	10d58 <dcgettext@plt>
   136cc:	ldr	r1, [r5]
   136d0:	bl	10cb0 <fputs_unlocked@plt>
   136d4:	movw	r0, #38652	; 0x96fc
   136d8:	movt	r0, #1
   136dc:	ldr	ip, [r0, #176]	; 0xb0
   136e0:	ldrd	r2, [r0, #184]	; 0xb8
   136e4:	ldr	r6, [r0, #180]	; 0xb4
   136e8:	subs	r1, ip, #0
   136ec:	str	ip, [sp]
   136f0:	ldrd	r8, [r0, #192]	; 0xc0
   136f4:	strd	r2, [sp, #8]
   136f8:	ldrd	r2, [r0, #200]	; 0xc8
   136fc:	str	r6, [sp, #4]
   13700:	ldrd	r6, [r0, #208]	; 0xd0
   13704:	strd	r8, [sp, #16]
   13708:	ldrd	r8, [r0, #216]	; 0xd8
   1370c:	strd	r2, [sp, #24]
   13710:	ldrd	r2, [r0, #224]	; 0xe0
   13714:	strd	r6, [sp, #32]
   13718:	movwne	r7, #39704	; 0x9b18
   1371c:	mov	r6, sp
   13720:	movtne	r7, #1
   13724:	strd	r8, [sp, #40]	; 0x28
   13728:	strd	r2, [sp, #48]	; 0x30
   1372c:	bne	13824 <__assert_fail@plt+0x2910>
   13730:	ldr	r6, [r6, #4]
   13734:	movw	r1, #42072	; 0xa458
   13738:	movt	r1, #1
   1373c:	mov	r2, #5
   13740:	cmp	r6, #0
   13744:	beq	13838 <__assert_fail@plt+0x2924>
   13748:	mov	r0, #0
   1374c:	bl	10d58 <dcgettext@plt>
   13750:	mov	r1, r0
   13754:	movw	r3, #42096	; 0xa470
   13758:	movt	r3, #1
   1375c:	movw	r2, #42136	; 0xa498
   13760:	movt	r2, #1
   13764:	mov	r0, #1
   13768:	bl	10e84 <__printf_chk@plt>
   1376c:	mov	r1, #0
   13770:	mov	r0, #5
   13774:	bl	10ec0 <setlocale@plt>
   13778:	cmp	r0, #0
   1377c:	movweq	r7, #39704	; 0x9b18
   13780:	movteq	r7, #1
   13784:	beq	137a8 <__assert_fail@plt+0x2894>
   13788:	movw	r1, #42152	; 0xa4a8
   1378c:	movt	r1, #1
   13790:	mov	r2, #3
   13794:	movw	r7, #39704	; 0x9b18
   13798:	movt	r7, #1
   1379c:	bl	10ef0 <strncmp@plt>
   137a0:	cmp	r0, #0
   137a4:	bne	138f0 <__assert_fail@plt+0x29dc>
   137a8:	mov	r2, #5
   137ac:	movw	r1, #42228	; 0xa4f4
   137b0:	movt	r1, #1
   137b4:	mov	r0, #0
   137b8:	bl	10d58 <dcgettext@plt>
   137bc:	mov	r1, r0
   137c0:	movw	r3, #39704	; 0x9b18
   137c4:	movt	r3, #1
   137c8:	movw	r2, #42096	; 0xa470
   137cc:	movt	r2, #1
   137d0:	mov	r0, #1
   137d4:	bl	10e84 <__printf_chk@plt>
   137d8:	mov	r2, #5
   137dc:	movw	r1, #42256	; 0xa510
   137e0:	movt	r1, #1
   137e4:	mov	r0, #0
   137e8:	bl	10d58 <dcgettext@plt>
   137ec:	movw	r2, #43392	; 0xa980
   137f0:	movt	r2, #1
   137f4:	cmp	r6, r7
   137f8:	movw	r3, #40756	; 0x9f34
   137fc:	movt	r3, #1
   13800:	mov	r1, r0
   13804:	moveq	r3, r2
   13808:	mov	r2, r6
   1380c:	mov	r0, #1
   13810:	bl	10e84 <__printf_chk@plt>
   13814:	b	135d8 <__assert_fail@plt+0x26c4>
   13818:	ldr	r1, [r6, #8]!
   1381c:	cmp	r1, #0
   13820:	beq	13730 <__assert_fail@plt+0x281c>
   13824:	mov	r0, r7
   13828:	bl	10cbc <strcmp@plt>
   1382c:	cmp	r0, #0
   13830:	bne	13818 <__assert_fail@plt+0x2904>
   13834:	b	13730 <__assert_fail@plt+0x281c>
   13838:	mov	r0, r6
   1383c:	bl	10d58 <dcgettext@plt>
   13840:	mov	r1, r0
   13844:	movw	r3, #42096	; 0xa470
   13848:	movt	r3, #1
   1384c:	movw	r2, #42136	; 0xa498
   13850:	movt	r2, #1
   13854:	mov	r0, #1
   13858:	bl	10e84 <__printf_chk@plt>
   1385c:	mov	r1, r6
   13860:	mov	r0, #5
   13864:	bl	10ec0 <setlocale@plt>
   13868:	cmp	r0, #0
   1386c:	beq	13888 <__assert_fail@plt+0x2974>
   13870:	movw	r1, #42152	; 0xa4a8
   13874:	movt	r1, #1
   13878:	mov	r2, #3
   1387c:	bl	10ef0 <strncmp@plt>
   13880:	cmp	r0, #0
   13884:	bne	138e4 <__assert_fail@plt+0x29d0>
   13888:	mov	r2, #5
   1388c:	movw	r1, #42228	; 0xa4f4
   13890:	movt	r1, #1
   13894:	mov	r0, #0
   13898:	bl	10d58 <dcgettext@plt>
   1389c:	mov	r1, r0
   138a0:	movw	r3, #39704	; 0x9b18
   138a4:	movt	r3, #1
   138a8:	movw	r2, #42096	; 0xa470
   138ac:	movt	r2, #1
   138b0:	mov	r0, #1
   138b4:	bl	10e84 <__printf_chk@plt>
   138b8:	movw	r1, #42256	; 0xa510
   138bc:	movt	r1, #1
   138c0:	mov	r2, #5
   138c4:	mov	r0, #0
   138c8:	bl	10d58 <dcgettext@plt>
   138cc:	movw	r6, #39704	; 0x9b18
   138d0:	movt	r6, #1
   138d4:	movw	r3, #43392	; 0xa980
   138d8:	movt	r3, #1
   138dc:	mov	r1, r0
   138e0:	b	13808 <__assert_fail@plt+0x28f4>
   138e4:	movw	r7, #39704	; 0x9b18
   138e8:	movt	r7, #1
   138ec:	mov	r6, r7
   138f0:	mov	r2, #5
   138f4:	movw	r1, #42156	; 0xa4ac
   138f8:	movt	r1, #1
   138fc:	mov	r0, #0
   13900:	bl	10d58 <dcgettext@plt>
   13904:	ldr	r1, [r5]
   13908:	bl	10cb0 <fputs_unlocked@plt>
   1390c:	b	137a8 <__assert_fail@plt+0x2894>
   13910:	movw	r3, #58468	; 0xe464
   13914:	movt	r3, #2
   13918:	str	r0, [r3]
   1391c:	bx	lr
   13920:	movw	r3, #58468	; 0xe464
   13924:	movt	r3, #2
   13928:	strb	r0, [r3, #4]
   1392c:	bx	lr
   13930:	movw	r3, #49492	; 0xc154
   13934:	movt	r3, #2
   13938:	strd	r4, [sp, #-16]!
   1393c:	ldr	r0, [r3]
   13940:	str	r6, [sp, #8]
   13944:	str	lr, [sp, #12]
   13948:	sub	sp, sp, #8
   1394c:	bl	191f8 <__assert_fail@plt+0x82e4>
   13950:	cmp	r0, #0
   13954:	beq	13980 <__assert_fail@plt+0x2a6c>
   13958:	movw	r4, #58468	; 0xe464
   1395c:	movt	r4, #2
   13960:	ldrb	r6, [r4, #4]
   13964:	bl	10e54 <__errno_location@plt>
   13968:	mov	r5, r0
   1396c:	cmp	r6, #0
   13970:	beq	139ac <__assert_fail@plt+0x2a98>
   13974:	ldr	r3, [r0]
   13978:	cmp	r3, #32
   1397c:	bne	139ac <__assert_fail@plt+0x2a98>
   13980:	movw	r3, #49480	; 0xc148
   13984:	movt	r3, #2
   13988:	ldr	r0, [r3]
   1398c:	bl	191f8 <__assert_fail@plt+0x82e4>
   13990:	cmp	r0, #0
   13994:	bne	139f4 <__assert_fail@plt+0x2ae0>
   13998:	add	sp, sp, #8
   1399c:	ldrd	r4, [sp]
   139a0:	ldr	r6, [sp, #8]
   139a4:	add	sp, sp, #12
   139a8:	pop	{pc}		; (ldr pc, [sp], #4)
   139ac:	movw	r1, #39168	; 0x9900
   139b0:	movt	r1, #1
   139b4:	mov	r2, #5
   139b8:	mov	r0, #0
   139bc:	bl	10d58 <dcgettext@plt>
   139c0:	mov	r6, r0
   139c4:	ldr	r0, [r4]
   139c8:	cmp	r0, #0
   139cc:	beq	13a04 <__assert_fail@plt+0x2af0>
   139d0:	ldr	r4, [r5]
   139d4:	bl	168c4 <__assert_fail@plt+0x59b0>
   139d8:	mov	r3, r0
   139dc:	movw	r2, #43672	; 0xaa98
   139e0:	movt	r2, #1
   139e4:	mov	r0, #0
   139e8:	str	r6, [sp]
   139ec:	mov	r1, r4
   139f0:	bl	10dc4 <error@plt>
   139f4:	movw	r3, #49392	; 0xc0f0
   139f8:	movt	r3, #2
   139fc:	ldr	r0, [r3]
   13a00:	bl	10cf8 <_exit@plt>
   13a04:	mov	r3, r6
   13a08:	movw	r2, #43676	; 0xaa9c
   13a0c:	movt	r2, #1
   13a10:	ldr	r1, [r5]
   13a14:	bl	10dc4 <error@plt>
   13a18:	b	139f4 <__assert_fail@plt+0x2ae0>
   13a1c:	b	10cc8 <posix_fadvise64@plt>
   13a20:	cmp	r0, #0
   13a24:	bxeq	lr
   13a28:	str	r4, [sp, #-16]!
   13a2c:	mov	r4, r1
   13a30:	strd	r6, [sp, #4]
   13a34:	mov	r6, #0
   13a38:	mov	r7, #0
   13a3c:	str	lr, [sp, #12]
   13a40:	sub	sp, sp, #16
   13a44:	bl	10e90 <fileno@plt>
   13a48:	mov	r2, r6
   13a4c:	mov	r3, r7
   13a50:	strd	r6, [sp]
   13a54:	str	r4, [sp, #8]
   13a58:	bl	10cc8 <posix_fadvise64@plt>
   13a5c:	add	sp, sp, #16
   13a60:	ldr	r4, [sp]
   13a64:	ldrd	r6, [sp, #4]
   13a68:	add	sp, sp, #12
   13a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a70:	strd	r4, [sp, #-12]!
   13a74:	mov	r5, r0
   13a78:	str	lr, [sp, #8]
   13a7c:	sub	sp, sp, #12
   13a80:	bl	10e54 <__errno_location@plt>
   13a84:	mov	r4, r0
   13a88:	mov	r2, #0
   13a8c:	ldr	r3, [r4]
   13a90:	mov	r0, r5
   13a94:	str	r2, [r4]
   13a98:	str	r3, [sp]
   13a9c:	str	r3, [sp, #4]
   13aa0:	bl	10cec <free@plt>
   13aa4:	ldr	r3, [r4]
   13aa8:	add	r2, sp, #8
   13aac:	clz	r3, r3
   13ab0:	lsr	r3, r3, #5
   13ab4:	add	r3, r2, r3, lsl #2
   13ab8:	ldr	r3, [r3, #-8]
   13abc:	str	r3, [r4]
   13ac0:	add	sp, sp, #12
   13ac4:	ldrd	r4, [sp]
   13ac8:	add	sp, sp, #8
   13acc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad0:	strd	r4, [sp, #-16]!
   13ad4:	subs	r4, r0, #0
   13ad8:	str	r6, [sp, #8]
   13adc:	str	lr, [sp, #12]
   13ae0:	beq	13b78 <__assert_fail@plt+0x2c64>
   13ae4:	mov	r1, #47	; 0x2f
   13ae8:	bl	10ecc <strrchr@plt>
   13aec:	subs	r5, r0, #0
   13af0:	beq	13b50 <__assert_fail@plt+0x2c3c>
   13af4:	add	r6, r5, #1
   13af8:	sub	r3, r6, r4
   13afc:	cmp	r3, #6
   13b00:	ble	13b50 <__assert_fail@plt+0x2c3c>
   13b04:	movw	r1, #43736	; 0xaad8
   13b08:	movt	r1, #1
   13b0c:	mov	r2, #7
   13b10:	sub	r0, r5, #6
   13b14:	bl	10ef0 <strncmp@plt>
   13b18:	cmp	r0, #0
   13b1c:	bne	13b50 <__assert_fail@plt+0x2c3c>
   13b20:	movw	r1, #43744	; 0xaae0
   13b24:	movt	r1, #1
   13b28:	mov	r2, #3
   13b2c:	mov	r0, r6
   13b30:	bl	10ef0 <strncmp@plt>
   13b34:	cmp	r0, #0
   13b38:	movne	r4, r6
   13b3c:	bne	13b50 <__assert_fail@plt+0x2c3c>
   13b40:	add	r4, r5, #4
   13b44:	movw	r3, #49464	; 0xc138
   13b48:	movt	r3, #2
   13b4c:	str	r4, [r3]
   13b50:	movw	r2, #58476	; 0xe46c
   13b54:	movt	r2, #2
   13b58:	ldr	r6, [sp, #8]
   13b5c:	movw	r3, #49468	; 0xc13c
   13b60:	movt	r3, #2
   13b64:	str	r4, [r2]
   13b68:	str	r4, [r3]
   13b6c:	ldrd	r4, [sp]
   13b70:	add	sp, sp, #12
   13b74:	pop	{pc}		; (ldr pc, [sp], #4)
   13b78:	movw	r3, #49480	; 0xc148
   13b7c:	movt	r3, #2
   13b80:	movw	r0, #43680	; 0xaaa0
   13b84:	movt	r0, #1
   13b88:	ldr	r3, [r3]
   13b8c:	mov	r2, #55	; 0x37
   13b90:	mov	r1, #1
   13b94:	bl	10d88 <fwrite@plt>
   13b98:	bl	10efc <abort@plt>
   13b9c:	mov	r2, #5
   13ba0:	strd	r4, [sp, #-16]!
   13ba4:	mov	r5, r0
   13ba8:	str	r6, [sp, #8]
   13bac:	mov	r6, r1
   13bb0:	mov	r1, r0
   13bb4:	mov	r0, #0
   13bb8:	str	lr, [sp, #12]
   13bbc:	bl	10d58 <dcgettext@plt>
   13bc0:	cmp	r5, r0
   13bc4:	mov	r4, r0
   13bc8:	beq	13be0 <__assert_fail@plt+0x2ccc>
   13bcc:	mov	r0, r4
   13bd0:	ldrd	r4, [sp]
   13bd4:	ldr	r6, [sp, #8]
   13bd8:	add	sp, sp, #12
   13bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   13be0:	bl	19464 <__assert_fail@plt+0x8550>
   13be4:	ldrb	r3, [r0]
   13be8:	bic	r3, r3, #32
   13bec:	cmp	r3, #85	; 0x55
   13bf0:	bne	13c58 <__assert_fail@plt+0x2d44>
   13bf4:	ldrb	r3, [r0, #1]
   13bf8:	bic	r3, r3, #32
   13bfc:	cmp	r3, #84	; 0x54
   13c00:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c04:	ldrb	r3, [r0, #2]
   13c08:	bic	r3, r3, #32
   13c0c:	cmp	r3, #70	; 0x46
   13c10:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c14:	ldrb	r3, [r0, #3]
   13c18:	cmp	r3, #45	; 0x2d
   13c1c:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c20:	ldrb	r3, [r0, #4]
   13c24:	cmp	r3, #56	; 0x38
   13c28:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c2c:	ldrb	r3, [r0, #5]
   13c30:	cmp	r3, #0
   13c34:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c38:	ldrb	r2, [r4]
   13c3c:	movw	r3, #43836	; 0xab3c
   13c40:	movt	r3, #1
   13c44:	movw	r4, #43848	; 0xab48
   13c48:	movt	r4, #1
   13c4c:	cmp	r2, #96	; 0x60
   13c50:	movne	r4, r3
   13c54:	b	13bcc <__assert_fail@plt+0x2cb8>
   13c58:	cmp	r3, #71	; 0x47
   13c5c:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c60:	ldrb	r3, [r0, #1]
   13c64:	bic	r3, r3, #32
   13c68:	cmp	r3, #66	; 0x42
   13c6c:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c70:	ldrb	r3, [r0, #2]
   13c74:	cmp	r3, #49	; 0x31
   13c78:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c7c:	ldrb	r3, [r0, #3]
   13c80:	cmp	r3, #56	; 0x38
   13c84:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c88:	ldrb	r3, [r0, #4]
   13c8c:	cmp	r3, #48	; 0x30
   13c90:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13c94:	ldrb	r3, [r0, #5]
   13c98:	cmp	r3, #51	; 0x33
   13c9c:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13ca0:	ldrb	r3, [r0, #6]
   13ca4:	cmp	r3, #48	; 0x30
   13ca8:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13cac:	ldrb	r3, [r0, #7]
   13cb0:	cmp	r3, #0
   13cb4:	bne	13cd8 <__assert_fail@plt+0x2dc4>
   13cb8:	ldrb	r2, [r4]
   13cbc:	movw	r3, #43840	; 0xab40
   13cc0:	movt	r3, #1
   13cc4:	movw	r4, #43844	; 0xab44
   13cc8:	movt	r4, #1
   13ccc:	cmp	r2, #96	; 0x60
   13cd0:	movne	r4, r3
   13cd4:	b	13bcc <__assert_fail@plt+0x2cb8>
   13cd8:	movw	r3, #43852	; 0xab4c
   13cdc:	movt	r3, #1
   13ce0:	cmp	r6, #9
   13ce4:	movw	r4, #43832	; 0xab38
   13ce8:	movt	r4, #1
   13cec:	movne	r4, r3
   13cf0:	b	13bcc <__assert_fail@plt+0x2cb8>
   13cf4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13cf8:	strd	r6, [sp, #8]
   13cfc:	strd	r8, [sp, #16]
   13d00:	mov	r8, r3
   13d04:	strd	sl, [sp, #24]
   13d08:	mov	fp, r0
   13d0c:	mov	sl, r1
   13d10:	str	lr, [sp, #32]
   13d14:	sub	sp, sp, #140	; 0x8c
   13d18:	ldr	r3, [sp, #180]	; 0xb4
   13d1c:	str	r2, [sp, #28]
   13d20:	and	r4, r3, #2
   13d24:	ubfx	r3, r3, #1, #1
   13d28:	str	r3, [sp, #44]	; 0x2c
   13d2c:	bl	10da0 <__ctype_get_mb_cur_max@plt>
   13d30:	ldr	r3, [sp, #176]	; 0xb0
   13d34:	str	r0, [sp, #76]	; 0x4c
   13d38:	cmp	r3, #10
   13d3c:	ldrls	pc, [pc, r3, lsl #2]
   13d40:	b	156dc <__assert_fail@plt+0x47c8>
   13d44:	andeq	r4, r1, r4, asr #3
   13d48:	andeq	r4, r1, r0, ror #5
   13d4c:	andeq	r4, r1, ip, asr r8
   13d50:	andeq	r4, r1, ip, asr #6
   13d54:	andeq	r4, r1, ip, asr #1
   13d58:	andeq	r4, r1, r8, asr #2
   13d5c:	andeq	r4, r1, r0, lsr #4
   13d60:	andeq	r4, r1, r8, lsl #5
   13d64:	andeq	r3, r1, r0, ror sp
   13d68:	andeq	r3, r1, r0, ror sp
   13d6c:	andeq	r3, r1, r0, ror sp
   13d70:	ldr	r3, [sp, #176]	; 0xb0
   13d74:	cmp	r3, #10
   13d78:	beq	13da4 <__assert_fail@plt+0x2e90>
   13d7c:	mov	r1, r3
   13d80:	movw	r0, #43856	; 0xab50
   13d84:	movt	r0, #1
   13d88:	bl	13b9c <__assert_fail@plt+0x2c88>
   13d8c:	str	r0, [sp, #188]	; 0xbc
   13d90:	movw	r0, #43852	; 0xab4c
   13d94:	movt	r0, #1
   13d98:	ldr	r1, [sp, #176]	; 0xb0
   13d9c:	bl	13b9c <__assert_fail@plt+0x2c88>
   13da0:	str	r0, [sp, #192]	; 0xc0
   13da4:	cmp	r4, #0
   13da8:	movne	r4, #0
   13dac:	beq	15468 <__assert_fail@plt+0x4554>
   13db0:	mov	r5, #0
   13db4:	ldr	r0, [sp, #192]	; 0xc0
   13db8:	mov	r9, r5
   13dbc:	str	r5, [sp, #64]	; 0x40
   13dc0:	bl	10e3c <strlen@plt>
   13dc4:	mov	r3, #1
   13dc8:	ldr	r2, [sp, #44]	; 0x2c
   13dcc:	cmp	r0, r5
   13dd0:	moveq	r2, r5
   13dd4:	str	r3, [sp, #32]
   13dd8:	str	r3, [sp, #48]	; 0x30
   13ddc:	str	r5, [sp, #52]	; 0x34
   13de0:	str	r3, [sp, #60]	; 0x3c
   13de4:	ldr	r3, [sp, #180]	; 0xb4
   13de8:	str	r0, [sp, #56]	; 0x38
   13dec:	str	r5, [sp, #68]	; 0x44
   13df0:	str	r5, [sp, #80]	; 0x50
   13df4:	str	r5, [sp, #84]	; 0x54
   13df8:	and	r3, r3, #1
   13dfc:	str	r2, [sp, #88]	; 0x58
   13e00:	str	r3, [sp, #92]	; 0x5c
   13e04:	ldr	r3, [sp, #180]	; 0xb4
   13e08:	and	r3, r3, #4
   13e0c:	str	r3, [sp, #96]	; 0x60
   13e10:	ldr	r3, [sp, #192]	; 0xc0
   13e14:	str	r3, [sp, #72]	; 0x48
   13e18:	mov	r3, fp
   13e1c:	mov	r7, #0
   13e20:	mov	fp, r9
   13e24:	mov	r9, r3
   13e28:	cmn	r8, #1
   13e2c:	beq	14430 <__assert_fail@plt+0x351c>
   13e30:	subs	r6, r8, r7
   13e34:	movne	r6, #1
   13e38:	cmp	r6, #0
   13e3c:	beq	14448 <__assert_fail@plt+0x3534>
   13e40:	ldr	r0, [sp, #28]
   13e44:	ldr	r3, [sp, #48]	; 0x30
   13e48:	cmp	r3, #0
   13e4c:	add	r3, r0, r7
   13e50:	str	r3, [sp, #36]	; 0x24
   13e54:	beq	148d4 <__assert_fail@plt+0x39c0>
   13e58:	ldr	r2, [sp, #56]	; 0x38
   13e5c:	cmp	r2, #0
   13e60:	beq	14dd4 <__assert_fail@plt+0x3ec0>
   13e64:	cmp	r2, #1
   13e68:	mov	r3, r2
   13e6c:	movls	r3, #0
   13e70:	movhi	r3, #1
   13e74:	cmn	r8, #1
   13e78:	add	r5, r7, r2
   13e7c:	movne	r3, #0
   13e80:	cmp	r3, #0
   13e84:	beq	13e90 <__assert_fail@plt+0x2f7c>
   13e88:	bl	10e3c <strlen@plt>
   13e8c:	mov	r8, r0
   13e90:	cmp	r5, r8
   13e94:	bhi	14dd4 <__assert_fail@plt+0x3ec0>
   13e98:	ldr	r0, [sp, #36]	; 0x24
   13e9c:	ldr	r2, [sp, #56]	; 0x38
   13ea0:	ldr	r1, [sp, #72]	; 0x48
   13ea4:	bl	10d34 <memcmp@plt>
   13ea8:	cmp	r0, #0
   13eac:	bne	14dd4 <__assert_fail@plt+0x3ec0>
   13eb0:	ldr	r3, [sp, #44]	; 0x2c
   13eb4:	cmp	r3, #0
   13eb8:	bne	15580 <__assert_fail@plt+0x466c>
   13ebc:	ldr	r3, [sp, #36]	; 0x24
   13ec0:	ldrb	r5, [r3]
   13ec4:	cmp	r5, #126	; 0x7e
   13ec8:	ldrls	pc, [pc, r5, lsl #2]
   13ecc:	b	15368 <__assert_fail@plt+0x4454>
   13ed0:	andeq	r4, r1, r4, lsr #11
   13ed4:	andeq	r5, r1, r8, ror #6
   13ed8:	andeq	r5, r1, r8, ror #6
   13edc:	andeq	r5, r1, r8, ror #6
   13ee0:	andeq	r5, r1, r8, ror #6
   13ee4:	andeq	r5, r1, r8, ror #6
   13ee8:	andeq	r5, r1, r8, ror #6
   13eec:	strdeq	r4, [r1], -ip
   13ef0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ef4:	andeq	r4, r1, r4, lsl #10
   13ef8:	andeq	r4, r1, r8, lsl #13
   13efc:	andeq	r4, r1, r8, ror r6
   13f00:	andeq	r4, r1, r0, lsr #7
   13f04:	andeq	r4, r1, r4, asr r6
   13f08:	andeq	r5, r1, r8, ror #6
   13f0c:	andeq	r5, r1, r8, ror #6
   13f10:	andeq	r5, r1, r8, ror #6
   13f14:	andeq	r5, r1, r8, ror #6
   13f18:	andeq	r5, r1, r8, ror #6
   13f1c:	andeq	r5, r1, r8, ror #6
   13f20:	andeq	r5, r1, r8, ror #6
   13f24:	andeq	r5, r1, r8, ror #6
   13f28:	andeq	r5, r1, r8, ror #6
   13f2c:	andeq	r5, r1, r8, ror #6
   13f30:	andeq	r5, r1, r8, ror #6
   13f34:	andeq	r5, r1, r8, ror #6
   13f38:	andeq	r5, r1, r8, ror #6
   13f3c:	andeq	r5, r1, r8, ror #6
   13f40:	andeq	r5, r1, r8, ror #6
   13f44:	andeq	r5, r1, r8, ror #6
   13f48:	andeq	r5, r1, r8, ror #6
   13f4c:	andeq	r5, r1, r8, ror #6
   13f50:	andeq	r4, r1, r0, lsl #14
   13f54:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f58:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f5c:	andeq	r4, r1, r8, ror #13
   13f60:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f64:	andeq	r4, r1, ip, asr #15
   13f68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f6c:	andeq	r4, r1, ip, lsr r8
   13f70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f74:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13f7c:	andeq	r4, r1, ip, asr #15
   13f80:	andeq	r4, r1, ip, asr #15
   13f84:	andeq	r4, r1, ip, asr #15
   13f88:	andeq	r4, r1, ip, asr #15
   13f8c:	andeq	r4, r1, ip, asr #15
   13f90:	andeq	r4, r1, ip, asr #15
   13f94:	andeq	r4, r1, ip, asr #15
   13f98:	andeq	r4, r1, ip, asr #15
   13f9c:	andeq	r4, r1, ip, asr #15
   13fa0:	andeq	r4, r1, ip, asr #15
   13fa4:	andeq	r4, r1, ip, asr #15
   13fa8:	andeq	r4, r1, ip, asr #15
   13fac:	andeq	r4, r1, ip, asr #15
   13fb0:	andeq	r4, r1, ip, asr #15
   13fb4:	andeq	r4, r1, ip, asr #15
   13fb8:	andeq	r4, r1, ip, asr #15
   13fbc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fc0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fc4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fc8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13fcc:	andeq	r4, r1, ip, ror #15
   13fd0:	andeq	r5, r1, r8, ror #6
   13fd4:	andeq	r4, r1, ip, asr #15
   13fd8:	andeq	r4, r1, ip, asr #15
   13fdc:	andeq	r4, r1, ip, asr #15
   13fe0:	andeq	r4, r1, ip, asr #15
   13fe4:	andeq	r4, r1, ip, asr #15
   13fe8:	andeq	r4, r1, ip, asr #15
   13fec:	andeq	r4, r1, ip, asr #15
   13ff0:	andeq	r4, r1, ip, asr #15
   13ff4:	andeq	r4, r1, ip, asr #15
   13ff8:	andeq	r4, r1, ip, asr #15
   13ffc:	andeq	r4, r1, ip, asr #15
   14000:	andeq	r4, r1, ip, asr #15
   14004:	andeq	r4, r1, ip, asr #15
   14008:	andeq	r4, r1, ip, asr #15
   1400c:	andeq	r4, r1, ip, asr #15
   14010:	andeq	r4, r1, ip, asr #15
   14014:	andeq	r4, r1, ip, asr #15
   14018:	andeq	r4, r1, ip, asr #15
   1401c:	andeq	r4, r1, ip, asr #15
   14020:	andeq	r4, r1, ip, asr #15
   14024:	andeq	r4, r1, ip, asr #15
   14028:	andeq	r4, r1, ip, asr #15
   1402c:	andeq	r4, r1, ip, asr #15
   14030:	andeq	r4, r1, ip, asr #15
   14034:	andeq	r4, r1, ip, asr #15
   14038:	andeq	r4, r1, ip, asr #15
   1403c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14040:	muleq	r1, r0, r7
   14044:	andeq	r4, r1, ip, asr #15
   14048:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1404c:	andeq	r4, r1, ip, asr #15
   14050:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14054:	andeq	r4, r1, ip, asr #15
   14058:	andeq	r4, r1, ip, asr #15
   1405c:	andeq	r4, r1, ip, asr #15
   14060:	andeq	r4, r1, ip, asr #15
   14064:	andeq	r4, r1, ip, asr #15
   14068:	andeq	r4, r1, ip, asr #15
   1406c:	andeq	r4, r1, ip, asr #15
   14070:	andeq	r4, r1, ip, asr #15
   14074:	andeq	r4, r1, ip, asr #15
   14078:	andeq	r4, r1, ip, asr #15
   1407c:	andeq	r4, r1, ip, asr #15
   14080:	andeq	r4, r1, ip, asr #15
   14084:	andeq	r4, r1, ip, asr #15
   14088:	andeq	r4, r1, ip, asr #15
   1408c:	andeq	r4, r1, ip, asr #15
   14090:	andeq	r4, r1, ip, asr #15
   14094:	andeq	r4, r1, ip, asr #15
   14098:	andeq	r4, r1, ip, asr #15
   1409c:	andeq	r4, r1, ip, asr #15
   140a0:	andeq	r4, r1, ip, asr #15
   140a4:	andeq	r4, r1, ip, asr #15
   140a8:	andeq	r4, r1, ip, asr #15
   140ac:	andeq	r4, r1, ip, asr #15
   140b0:	andeq	r4, r1, ip, asr #15
   140b4:	andeq	r4, r1, ip, asr #15
   140b8:	andeq	r4, r1, ip, asr #15
   140bc:	muleq	r1, ip, r6
   140c0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c4:	muleq	r1, ip, r6
   140c8:	andeq	r4, r1, r8, ror #13
   140cc:	ldr	r3, [sp, #180]	; 0xb4
   140d0:	cmp	r4, #0
   140d4:	and	r3, r3, #1
   140d8:	str	r3, [sp, #92]	; 0x5c
   140dc:	ldr	r3, [sp, #180]	; 0xb4
   140e0:	and	r3, r3, #4
   140e4:	str	r3, [sp, #96]	; 0x60
   140e8:	moveq	r3, #1
   140ec:	streq	r3, [sp, #60]	; 0x3c
   140f0:	beq	14880 <__assert_fail@plt+0x396c>
   140f4:	mov	r3, #0
   140f8:	mov	r2, #1
   140fc:	mov	r4, r3
   14100:	mov	r9, r3
   14104:	str	r2, [sp, #32]
   14108:	str	r2, [sp, #44]	; 0x2c
   1410c:	str	r3, [sp, #48]	; 0x30
   14110:	str	r2, [sp, #52]	; 0x34
   14114:	str	r2, [sp, #56]	; 0x38
   14118:	str	r3, [sp, #60]	; 0x3c
   1411c:	str	r2, [sp, #64]	; 0x40
   14120:	str	r2, [sp, #68]	; 0x44
   14124:	str	r3, [sp, #80]	; 0x50
   14128:	str	r3, [sp, #84]	; 0x54
   1412c:	str	r3, [sp, #88]	; 0x58
   14130:	movw	r3, #43852	; 0xab4c
   14134:	movt	r3, #1
   14138:	str	r3, [sp, #72]	; 0x48
   1413c:	mov	r3, #2
   14140:	str	r3, [sp, #176]	; 0xb0
   14144:	b	13e18 <__assert_fail@plt+0x2f04>
   14148:	ldr	r3, [sp, #180]	; 0xb4
   1414c:	cmp	r4, #0
   14150:	and	r3, r3, #1
   14154:	str	r3, [sp, #92]	; 0x5c
   14158:	ldr	r3, [sp, #180]	; 0xb4
   1415c:	and	r3, r3, #4
   14160:	str	r3, [sp, #96]	; 0x60
   14164:	bne	15538 <__assert_fail@plt+0x4624>
   14168:	cmp	sl, #0
   1416c:	beq	152e4 <__assert_fail@plt+0x43d0>
   14170:	mov	r3, #34	; 0x22
   14174:	mov	r2, r4
   14178:	mov	r1, #1
   1417c:	mov	r9, r2
   14180:	strb	r3, [fp]
   14184:	movw	r3, #43832	; 0xab38
   14188:	movt	r3, #1
   1418c:	mov	r4, r1
   14190:	str	r1, [sp, #32]
   14194:	str	r2, [sp, #44]	; 0x2c
   14198:	str	r1, [sp, #48]	; 0x30
   1419c:	str	r2, [sp, #52]	; 0x34
   141a0:	str	r1, [sp, #56]	; 0x38
   141a4:	str	r1, [sp, #60]	; 0x3c
   141a8:	str	r2, [sp, #64]	; 0x40
   141ac:	str	r2, [sp, #68]	; 0x44
   141b0:	str	r3, [sp, #72]	; 0x48
   141b4:	str	r2, [sp, #80]	; 0x50
   141b8:	str	r2, [sp, #84]	; 0x54
   141bc:	str	r2, [sp, #88]	; 0x58
   141c0:	b	13e18 <__assert_fail@plt+0x2f04>
   141c4:	mov	r3, #0
   141c8:	mov	r2, #1
   141cc:	mov	r9, r3
   141d0:	str	r2, [sp, #32]
   141d4:	str	r3, [sp, #44]	; 0x2c
   141d8:	str	r3, [sp, #48]	; 0x30
   141dc:	str	r3, [sp, #52]	; 0x34
   141e0:	str	r3, [sp, #60]	; 0x3c
   141e4:	strd	r2, [sp, #64]	; 0x40
   141e8:	str	r3, [sp, #72]	; 0x48
   141ec:	str	r3, [sp, #80]	; 0x50
   141f0:	str	r3, [sp, #88]	; 0x58
   141f4:	ldr	r3, [sp, #180]	; 0xb4
   141f8:	and	r3, r3, r2
   141fc:	str	r3, [sp, #92]	; 0x5c
   14200:	ldr	r3, [sp, #180]	; 0xb4
   14204:	and	r3, r3, #4
   14208:	str	r3, [sp, #96]	; 0x60
   1420c:	ldr	r3, [sp, #176]	; 0xb0
   14210:	mov	r4, r3
   14214:	str	r3, [sp, #56]	; 0x38
   14218:	str	r3, [sp, #84]	; 0x54
   1421c:	b	13e18 <__assert_fail@plt+0x2f04>
   14220:	mov	r3, #1
   14224:	mov	r4, #0
   14228:	mov	r9, r4
   1422c:	str	r3, [sp, #32]
   14230:	str	r3, [sp, #44]	; 0x2c
   14234:	str	r3, [sp, #48]	; 0x30
   14238:	str	r4, [sp, #52]	; 0x34
   1423c:	str	r3, [sp, #56]	; 0x38
   14240:	str	r3, [sp, #60]	; 0x3c
   14244:	str	r3, [sp, #88]	; 0x58
   14248:	movw	r3, #43832	; 0xab38
   1424c:	movt	r3, #1
   14250:	str	r4, [sp, #64]	; 0x40
   14254:	str	r4, [sp, #68]	; 0x44
   14258:	str	r3, [sp, #72]	; 0x48
   1425c:	ldr	r3, [sp, #180]	; 0xb4
   14260:	str	r4, [sp, #80]	; 0x50
   14264:	str	r4, [sp, #84]	; 0x54
   14268:	and	r3, r3, #1
   1426c:	str	r3, [sp, #92]	; 0x5c
   14270:	ldr	r3, [sp, #180]	; 0xb4
   14274:	and	r3, r3, #4
   14278:	str	r3, [sp, #96]	; 0x60
   1427c:	mov	r3, #5
   14280:	str	r3, [sp, #176]	; 0xb0
   14284:	b	13e18 <__assert_fail@plt+0x2f04>
   14288:	mov	r3, #1
   1428c:	mov	r4, #0
   14290:	mov	r9, r4
   14294:	str	r3, [sp, #32]
   14298:	str	r4, [sp, #44]	; 0x2c
   1429c:	str	r3, [sp, #48]	; 0x30
   142a0:	str	r3, [sp, #60]	; 0x3c
   142a4:	ldr	r3, [sp, #180]	; 0xb4
   142a8:	str	r4, [sp, #52]	; 0x34
   142ac:	str	r4, [sp, #56]	; 0x38
   142b0:	str	r4, [sp, #64]	; 0x40
   142b4:	str	r4, [sp, #68]	; 0x44
   142b8:	and	r3, r3, #1
   142bc:	str	r4, [sp, #72]	; 0x48
   142c0:	str	r4, [sp, #80]	; 0x50
   142c4:	str	r4, [sp, #84]	; 0x54
   142c8:	str	r3, [sp, #92]	; 0x5c
   142cc:	ldr	r3, [sp, #180]	; 0xb4
   142d0:	str	r4, [sp, #88]	; 0x58
   142d4:	and	r3, r3, #4
   142d8:	str	r3, [sp, #96]	; 0x60
   142dc:	b	13e18 <__assert_fail@plt+0x2f04>
   142e0:	mov	r3, #0
   142e4:	mov	r2, #1
   142e8:	ldr	r1, [sp, #176]	; 0xb0
   142ec:	mov	r4, r3
   142f0:	mov	r9, r3
   142f4:	movw	r3, #43852	; 0xab4c
   142f8:	movt	r3, #1
   142fc:	str	r2, [sp, #32]
   14300:	str	r2, [sp, #44]	; 0x2c
   14304:	str	r4, [sp, #48]	; 0x30
   14308:	strd	r2, [sp, #68]	; 0x44
   1430c:	ldr	r3, [sp, #180]	; 0xb4
   14310:	str	r2, [sp, #52]	; 0x34
   14314:	str	r1, [sp, #56]	; 0x38
   14318:	str	r4, [sp, #60]	; 0x3c
   1431c:	str	r2, [sp, #64]	; 0x40
   14320:	and	r3, r3, r2
   14324:	str	r4, [sp, #80]	; 0x50
   14328:	str	r4, [sp, #84]	; 0x54
   1432c:	str	r4, [sp, #88]	; 0x58
   14330:	str	r3, [sp, #92]	; 0x5c
   14334:	ldr	r3, [sp, #180]	; 0xb4
   14338:	and	r3, r3, #4
   1433c:	str	r3, [sp, #96]	; 0x60
   14340:	mov	r3, #2
   14344:	str	r3, [sp, #176]	; 0xb0
   14348:	b	13e18 <__assert_fail@plt+0x2f04>
   1434c:	mov	r3, #1
   14350:	mov	r2, #0
   14354:	mov	r4, r2
   14358:	mov	r9, r2
   1435c:	str	r3, [sp, #32]
   14360:	str	r3, [sp, #44]	; 0x2c
   14364:	str	r2, [sp, #48]	; 0x30
   14368:	str	r3, [sp, #52]	; 0x34
   1436c:	str	r3, [sp, #56]	; 0x38
   14370:	str	r3, [sp, #60]	; 0x3c
   14374:	str	r3, [sp, #64]	; 0x40
   14378:	str	r3, [sp, #68]	; 0x44
   1437c:	str	r3, [sp, #88]	; 0x58
   14380:	movw	r3, #43852	; 0xab4c
   14384:	movt	r3, #1
   14388:	str	r3, [sp, #72]	; 0x48
   1438c:	ldr	r3, [sp, #180]	; 0xb4
   14390:	str	r2, [sp, #80]	; 0x50
   14394:	str	r2, [sp, #84]	; 0x54
   14398:	and	r3, r3, #1
   1439c:	b	14330 <__assert_fail@plt+0x341c>
   143a0:	mov	r5, #102	; 0x66
   143a4:	mov	r6, #0
   143a8:	ldr	r3, [sp, #44]	; 0x2c
   143ac:	cmp	r3, #0
   143b0:	bne	15260 <__assert_fail@plt+0x434c>
   143b4:	ldr	r2, [sp, #52]	; 0x34
   143b8:	eor	r3, fp, #1
   143bc:	ands	r3, r2, r3
   143c0:	beq	143f8 <__assert_fail@plt+0x34e4>
   143c4:	cmp	sl, r4
   143c8:	mov	fp, r3
   143cc:	movhi	r2, #39	; 0x27
   143d0:	strbhi	r2, [r9, r4]
   143d4:	add	r2, r4, #1
   143d8:	cmp	sl, r2
   143dc:	movhi	r1, #36	; 0x24
   143e0:	strbhi	r1, [r9, r2]
   143e4:	add	r2, r4, #2
   143e8:	add	r4, r4, #3
   143ec:	cmp	sl, r2
   143f0:	movhi	r1, #39	; 0x27
   143f4:	strbhi	r1, [r9, r2]
   143f8:	cmp	sl, r4
   143fc:	add	r7, r7, #1
   14400:	movhi	r3, #92	; 0x5c
   14404:	strbhi	r3, [r9, r4]
   14408:	add	r4, r4, #1
   1440c:	cmp	r4, sl
   14410:	ldr	r3, [sp, #32]
   14414:	strbcc	r5, [r9, r4]
   14418:	cmp	r6, #0
   1441c:	add	r4, r4, #1
   14420:	moveq	r3, #0
   14424:	cmn	r8, #1
   14428:	str	r3, [sp, #32]
   1442c:	bne	13e30 <__assert_fail@plt+0x2f1c>
   14430:	ldr	r3, [sp, #28]
   14434:	ldrb	r6, [r3, r7]
   14438:	adds	r6, r6, #0
   1443c:	movne	r6, #1
   14440:	cmp	r6, #0
   14444:	bne	13e40 <__assert_fail@plt+0x2f2c>
   14448:	mov	r3, r9
   1444c:	mov	r9, fp
   14450:	mov	fp, r3
   14454:	ldr	r3, [sp, #68]	; 0x44
   14458:	cmp	r4, #0
   1445c:	movne	r3, #0
   14460:	cmp	r3, #0
   14464:	bne	15658 <__assert_fail@plt+0x4744>
   14468:	ldr	r3, [sp, #44]	; 0x2c
   1446c:	ldr	r2, [sp, #52]	; 0x34
   14470:	eor	r3, r3, #1
   14474:	ands	r2, r3, r2
   14478:	beq	15590 <__assert_fail@plt+0x467c>
   1447c:	ldr	r3, [sp, #80]	; 0x50
   14480:	cmp	r3, #0
   14484:	beq	15594 <__assert_fail@plt+0x4680>
   14488:	ldr	r3, [sp, #32]
   1448c:	cmp	r3, #0
   14490:	bne	15608 <__assert_fail@plt+0x46f4>
   14494:	ldr	r3, [sp, #84]	; 0x54
   14498:	adds	r3, r3, #0
   1449c:	movne	r3, #1
   144a0:	cmp	sl, #0
   144a4:	movne	r3, #0
   144a8:	cmp	r3, #0
   144ac:	ldreq	r2, [sp, #80]	; 0x50
   144b0:	beq	15594 <__assert_fail@plt+0x4680>
   144b4:	ldr	r2, [sp, #84]	; 0x54
   144b8:	mov	sl, r2
   144bc:	mov	r0, #0
   144c0:	mov	r4, #1
   144c4:	mov	r1, #39	; 0x27
   144c8:	str	r0, [sp, #44]	; 0x2c
   144cc:	strb	r1, [fp]
   144d0:	str	r0, [sp, #48]	; 0x30
   144d4:	str	r4, [sp, #52]	; 0x34
   144d8:	str	r4, [sp, #56]	; 0x38
   144dc:	str	r4, [sp, #64]	; 0x40
   144e0:	str	r0, [sp, #68]	; 0x44
   144e4:	str	r3, [sp, #80]	; 0x50
   144e8:	str	r2, [sp, #84]	; 0x54
   144ec:	str	r0, [sp, #88]	; 0x58
   144f0:	b	14130 <__assert_fail@plt+0x321c>
   144f4:	mov	r5, #98	; 0x62
   144f8:	b	143a4 <__assert_fail@plt+0x3490>
   144fc:	mov	r5, #97	; 0x61
   14500:	b	143a4 <__assert_fail@plt+0x3490>
   14504:	ldr	r3, [sp, #48]	; 0x30
   14508:	str	r3, [sp, #40]	; 0x28
   1450c:	mov	r3, #116	; 0x74
   14510:	ldr	r2, [sp, #68]	; 0x44
   14514:	cmp	r2, #0
   14518:	bne	14714 <__assert_fail@plt+0x3800>
   1451c:	ldr	r2, [sp, #60]	; 0x3c
   14520:	cmp	r2, #0
   14524:	bne	14670 <__assert_fail@plt+0x375c>
   14528:	ldr	r3, [sp, #44]	; 0x2c
   1452c:	mov	r6, #0
   14530:	cmp	r3, #0
   14534:	beq	146e0 <__assert_fail@plt+0x37cc>
   14538:	mov	r3, fp
   1453c:	ldr	r2, [sp, #184]	; 0xb8
   14540:	cmp	r2, #0
   14544:	beq	14564 <__assert_fail@plt+0x3650>
   14548:	ubfx	r1, r5, #5, #8
   1454c:	mov	r0, r2
   14550:	and	r2, r5, #31
   14554:	ldr	r1, [r0, r1, lsl #2]
   14558:	lsr	r2, r1, r2
   1455c:	tst	r2, #1
   14560:	bne	143a8 <__assert_fail@plt+0x3494>
   14564:	ldr	r2, [sp, #40]	; 0x28
   14568:	cmp	r2, #0
   1456c:	addeq	r7, r7, #1
   14570:	bne	143a8 <__assert_fail@plt+0x3494>
   14574:	cmp	r3, #0
   14578:	beq	1440c <__assert_fail@plt+0x34f8>
   1457c:	cmp	sl, r4
   14580:	mov	fp, #0
   14584:	movhi	r3, #39	; 0x27
   14588:	strbhi	r3, [r9, r4]
   1458c:	add	r3, r4, #1
   14590:	add	r4, r4, #2
   14594:	cmp	sl, r3
   14598:	movhi	r2, #39	; 0x27
   1459c:	strbhi	r2, [r9, r3]
   145a0:	b	1440c <__assert_fail@plt+0x34f8>
   145a4:	ldr	r3, [sp, #48]	; 0x30
   145a8:	str	r3, [sp, #40]	; 0x28
   145ac:	eor	r3, fp, #1
   145b0:	ldr	r2, [sp, #52]	; 0x34
   145b4:	ands	r2, r2, r3
   145b8:	beq	15278 <__assert_fail@plt+0x4364>
   145bc:	cmp	sl, r4
   145c0:	movhi	r3, #39	; 0x27
   145c4:	strbhi	r3, [r9, r4]
   145c8:	add	r3, r4, #1
   145cc:	cmp	sl, r3
   145d0:	movhi	r1, #36	; 0x24
   145d4:	strbhi	r1, [r9, r3]
   145d8:	add	r3, r4, #2
   145dc:	cmp	sl, r3
   145e0:	movhi	r1, #39	; 0x27
   145e4:	strbhi	r1, [r9, r3]
   145e8:	add	r3, r4, #3
   145ec:	cmp	sl, r3
   145f0:	bls	152c4 <__assert_fail@plt+0x43b0>
   145f4:	mov	r4, r3
   145f8:	mov	r3, #92	; 0x5c
   145fc:	mov	fp, r2
   14600:	mov	r2, r4
   14604:	strb	r3, [r9, r4]
   14608:	ldr	r3, [sp, #176]	; 0xb0
   1460c:	add	r4, r4, #1
   14610:	cmp	r3, #2
   14614:	beq	1532c <__assert_fail@plt+0x4418>
   14618:	add	r3, r7, #1
   1461c:	cmp	r3, r8
   14620:	bcs	14638 <__assert_fail@plt+0x3724>
   14624:	ldr	r1, [sp, #28]
   14628:	ldrb	r3, [r1, r3]
   1462c:	sub	r3, r3, #48	; 0x30
   14630:	cmp	r3, #9
   14634:	bls	1533c <__assert_fail@plt+0x4428>
   14638:	mov	r3, #0
   1463c:	mov	r5, #48	; 0x30
   14640:	ldr	r6, [sp, #64]	; 0x40
   14644:	cmp	r6, #0
   14648:	beq	1453c <__assert_fail@plt+0x3628>
   1464c:	mov	r6, #0
   14650:	b	14564 <__assert_fail@plt+0x3650>
   14654:	ldr	r3, [sp, #48]	; 0x30
   14658:	str	r3, [sp, #40]	; 0x28
   1465c:	ldr	r2, [sp, #60]	; 0x3c
   14660:	mov	r5, #13
   14664:	mov	r3, #114	; 0x72
   14668:	cmp	r2, #0
   1466c:	beq	14528 <__assert_fail@plt+0x3614>
   14670:	mov	r5, r3
   14674:	b	143a4 <__assert_fail@plt+0x3490>
   14678:	ldr	r3, [sp, #48]	; 0x30
   1467c:	str	r3, [sp, #40]	; 0x28
   14680:	mov	r3, #118	; 0x76
   14684:	b	1451c <__assert_fail@plt+0x3608>
   14688:	ldr	r3, [sp, #48]	; 0x30
   1468c:	str	r3, [sp, #40]	; 0x28
   14690:	mov	r5, #10
   14694:	mov	r3, #110	; 0x6e
   14698:	b	1451c <__assert_fail@plt+0x3608>
   1469c:	ldr	r3, [sp, #48]	; 0x30
   146a0:	cmn	r8, #1
   146a4:	str	r3, [sp, #40]	; 0x28
   146a8:	beq	14af0 <__assert_fail@plt+0x3bdc>
   146ac:	subs	r3, r8, #1
   146b0:	movne	r3, #1
   146b4:	cmp	r3, #0
   146b8:	bne	146c4 <__assert_fail@plt+0x37b0>
   146bc:	cmp	r7, #0
   146c0:	beq	14708 <__assert_fail@plt+0x37f4>
   146c4:	mov	r6, #0
   146c8:	ldr	r3, [sp, #64]	; 0x40
   146cc:	cmp	r3, #0
   146d0:	beq	14538 <__assert_fail@plt+0x3624>
   146d4:	ldr	r3, [sp, #44]	; 0x2c
   146d8:	cmp	r3, #0
   146dc:	bne	14538 <__assert_fail@plt+0x3624>
   146e0:	mov	r3, fp
   146e4:	b	14564 <__assert_fail@plt+0x3650>
   146e8:	ldr	r3, [sp, #48]	; 0x30
   146ec:	str	r3, [sp, #40]	; 0x28
   146f0:	b	146bc <__assert_fail@plt+0x37a8>
   146f4:	ldr	r3, [sp, #48]	; 0x30
   146f8:	str	r3, [sp, #40]	; 0x28
   146fc:	b	146c4 <__assert_fail@plt+0x37b0>
   14700:	ldr	r6, [sp, #48]	; 0x30
   14704:	str	r6, [sp, #40]	; 0x28
   14708:	ldr	r3, [sp, #68]	; 0x44
   1470c:	cmp	r3, #0
   14710:	beq	146c8 <__assert_fail@plt+0x37b4>
   14714:	mov	r3, #2
   14718:	mov	fp, r9
   1471c:	str	r3, [sp, #176]	; 0xb0
   14720:	ldr	r3, [sp, #60]	; 0x3c
   14724:	cmp	r3, #0
   14728:	ldr	r3, [sp, #176]	; 0xb0
   1472c:	movne	r3, #4
   14730:	str	r3, [sp, #176]	; 0xb0
   14734:	mov	lr, #0
   14738:	mov	r0, fp
   1473c:	ldr	r2, [sp, #28]
   14740:	ldr	r3, [sp, #180]	; 0xb4
   14744:	ldr	r1, [sp, #188]	; 0xbc
   14748:	bic	ip, r3, #2
   1474c:	ldr	r3, [sp, #176]	; 0xb0
   14750:	stm	sp, {r3, ip, lr}
   14754:	mov	r3, r8
   14758:	ldr	ip, [sp, #192]	; 0xc0
   1475c:	str	r1, [sp, #12]
   14760:	mov	r1, sl
   14764:	str	ip, [sp, #16]
   14768:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1476c:	mov	r4, r0
   14770:	mov	r0, r4
   14774:	add	sp, sp, #140	; 0x8c
   14778:	ldrd	r4, [sp]
   1477c:	ldrd	r6, [sp, #8]
   14780:	ldrd	r8, [sp, #16]
   14784:	ldrd	sl, [sp, #24]
   14788:	add	sp, sp, #32
   1478c:	pop	{pc}		; (ldr pc, [sp], #4)
   14790:	ldr	r3, [sp, #48]	; 0x30
   14794:	str	r3, [sp, #40]	; 0x28
   14798:	ldr	r3, [sp, #176]	; 0xb0
   1479c:	cmp	r3, #2
   147a0:	beq	14b18 <__assert_fail@plt+0x3c04>
   147a4:	ldr	r3, [sp, #88]	; 0x58
   147a8:	cmp	r3, #0
   147ac:	moveq	r5, #92	; 0x5c
   147b0:	moveq	r3, r5
   147b4:	beq	1451c <__assert_fail@plt+0x3608>
   147b8:	add	r7, r7, #1
   147bc:	mov	r3, fp
   147c0:	mov	r6, #0
   147c4:	mov	r5, #92	; 0x5c
   147c8:	b	14574 <__assert_fail@plt+0x3660>
   147cc:	ldr	r3, [sp, #64]	; 0x40
   147d0:	cmp	r3, #0
   147d4:	bne	1564c <__assert_fail@plt+0x4738>
   147d8:	ldr	r2, [sp, #48]	; 0x30
   147dc:	mov	r3, fp
   147e0:	mov	r6, r2
   147e4:	str	r2, [sp, #40]	; 0x28
   147e8:	b	1453c <__assert_fail@plt+0x3628>
   147ec:	ldr	r3, [sp, #176]	; 0xb0
   147f0:	cmp	r3, #2
   147f4:	beq	15588 <__assert_fail@plt+0x4674>
   147f8:	cmp	r3, #5
   147fc:	ldr	r3, [sp, #48]	; 0x30
   14800:	str	r3, [sp, #40]	; 0x28
   14804:	bne	14830 <__assert_fail@plt+0x391c>
   14808:	ldr	r3, [sp, #96]	; 0x60
   1480c:	cmp	r3, #0
   14810:	beq	1528c <__assert_fail@plt+0x4378>
   14814:	add	r3, r7, #2
   14818:	cmp	r3, r8
   1481c:	bcs	14830 <__assert_fail@plt+0x391c>
   14820:	ldr	r2, [sp, #36]	; 0x24
   14824:	ldrb	r5, [r2, #1]
   14828:	cmp	r5, #63	; 0x3f
   1482c:	beq	15374 <__assert_fail@plt+0x4460>
   14830:	mov	r6, #0
   14834:	mov	r5, #63	; 0x3f
   14838:	b	146c8 <__assert_fail@plt+0x37b4>
   1483c:	ldr	r3, [sp, #176]	; 0xb0
   14840:	cmp	r3, #2
   14844:	ldr	r3, [sp, #48]	; 0x30
   14848:	beq	15030 <__assert_fail@plt+0x411c>
   1484c:	mov	r5, #39	; 0x27
   14850:	str	r3, [sp, #40]	; 0x28
   14854:	str	r6, [sp, #80]	; 0x50
   14858:	b	146c8 <__assert_fail@plt+0x37b4>
   1485c:	ldr	r3, [sp, #180]	; 0xb4
   14860:	cmp	r4, #0
   14864:	and	r3, r3, #1
   14868:	str	r3, [sp, #92]	; 0x5c
   1486c:	ldr	r3, [sp, #180]	; 0xb4
   14870:	and	r3, r3, #4
   14874:	str	r3, [sp, #96]	; 0x60
   14878:	bne	15698 <__assert_fail@plt+0x4784>
   1487c:	str	r4, [sp, #60]	; 0x3c
   14880:	cmp	sl, #0
   14884:	bne	1567c <__assert_fail@plt+0x4768>
   14888:	mov	r3, #1
   1488c:	movw	r2, #43852	; 0xab4c
   14890:	movt	r2, #1
   14894:	mov	r4, r3
   14898:	mov	r3, #2
   1489c:	mov	r9, sl
   148a0:	str	r4, [sp, #32]
   148a4:	str	sl, [sp, #44]	; 0x2c
   148a8:	str	sl, [sp, #48]	; 0x30
   148ac:	str	r4, [sp, #52]	; 0x34
   148b0:	str	r4, [sp, #56]	; 0x38
   148b4:	str	r4, [sp, #64]	; 0x40
   148b8:	str	sl, [sp, #68]	; 0x44
   148bc:	str	r2, [sp, #72]	; 0x48
   148c0:	str	sl, [sp, #80]	; 0x50
   148c4:	str	sl, [sp, #84]	; 0x54
   148c8:	str	sl, [sp, #88]	; 0x58
   148cc:	str	r3, [sp, #176]	; 0xb0
   148d0:	b	13e18 <__assert_fail@plt+0x2f04>
   148d4:	ldrb	r5, [r0, r7]
   148d8:	cmp	r5, #126	; 0x7e
   148dc:	ldrls	pc, [pc, r5, lsl #2]
   148e0:	b	14c44 <__assert_fail@plt+0x3d30>
   148e4:	andeq	r4, r1, r0, lsl ip
   148e8:	andeq	r4, r1, r4, asr #24
   148ec:	andeq	r4, r1, r4, asr #24
   148f0:	andeq	r4, r1, r4, asr #24
   148f4:	andeq	r4, r1, r4, asr #24
   148f8:	andeq	r4, r1, r4, asr #24
   148fc:	andeq	r4, r1, r4, asr #24
   14900:	andeq	r4, r1, r0, lsl #24
   14904:	strdeq	r4, [r1], -r0
   14908:	andeq	r4, r1, r4, ror fp
   1490c:	andeq	r4, r1, r0, ror #23
   14910:	andeq	r4, r1, r4, asr fp
   14914:	andeq	r4, r1, r4, lsr ip
   14918:	andeq	r4, r1, r0, asr #23
   1491c:	andeq	r4, r1, r4, asr #24
   14920:	andeq	r4, r1, r4, asr #24
   14924:	andeq	r4, r1, r4, asr #24
   14928:	andeq	r4, r1, r4, asr #24
   1492c:	andeq	r4, r1, r4, asr #24
   14930:	andeq	r4, r1, r4, asr #24
   14934:	andeq	r4, r1, r4, asr #24
   14938:	andeq	r4, r1, r4, asr #24
   1493c:	andeq	r4, r1, r4, asr #24
   14940:	andeq	r4, r1, r4, asr #24
   14944:	andeq	r4, r1, r4, asr #24
   14948:	andeq	r4, r1, r4, asr #24
   1494c:	andeq	r4, r1, r4, asr #24
   14950:	andeq	r4, r1, r4, asr #24
   14954:	andeq	r4, r1, r4, asr #24
   14958:	andeq	r4, r1, r4, asr #24
   1495c:	andeq	r4, r1, r4, asr #24
   14960:	andeq	r4, r1, r4, asr #24
   14964:	andeq	r4, r1, r8, ror #22
   14968:	ldrdeq	r4, [r1], -r0
   1496c:	ldrdeq	r4, [r1], -r0
   14970:	andeq	r4, r1, r8, asr #22
   14974:	ldrdeq	r4, [r1], -r0
   14978:	andeq	r4, r1, ip, lsr fp
   1497c:	ldrdeq	r4, [r1], -r0
   14980:	andeq	r4, r1, ip, lsr #23
   14984:	ldrdeq	r4, [r1], -r0
   14988:	ldrdeq	r4, [r1], -r0
   1498c:	ldrdeq	r4, [r1], -r0
   14990:	andeq	r4, r1, ip, lsr fp
   14994:	andeq	r4, r1, ip, lsr fp
   14998:	andeq	r4, r1, ip, lsr fp
   1499c:	andeq	r4, r1, ip, lsr fp
   149a0:	andeq	r4, r1, ip, lsr fp
   149a4:	andeq	r4, r1, ip, lsr fp
   149a8:	andeq	r4, r1, ip, lsr fp
   149ac:	andeq	r4, r1, ip, lsr fp
   149b0:	andeq	r4, r1, ip, lsr fp
   149b4:	andeq	r4, r1, ip, lsr fp
   149b8:	andeq	r4, r1, ip, lsr fp
   149bc:	andeq	r4, r1, ip, lsr fp
   149c0:	andeq	r4, r1, ip, lsr fp
   149c4:	andeq	r4, r1, ip, lsr fp
   149c8:	andeq	r4, r1, ip, lsr fp
   149cc:	andeq	r4, r1, ip, lsr fp
   149d0:	ldrdeq	r4, [r1], -r0
   149d4:	ldrdeq	r4, [r1], -r0
   149d8:	ldrdeq	r4, [r1], -r0
   149dc:	ldrdeq	r4, [r1], -r0
   149e0:	andeq	r4, r1, r4, lsl #23
   149e4:	andeq	r4, r1, r4, asr #24
   149e8:	andeq	r4, r1, ip, lsr fp
   149ec:	andeq	r4, r1, ip, lsr fp
   149f0:	andeq	r4, r1, ip, lsr fp
   149f4:	andeq	r4, r1, ip, lsr fp
   149f8:	andeq	r4, r1, ip, lsr fp
   149fc:	andeq	r4, r1, ip, lsr fp
   14a00:	andeq	r4, r1, ip, lsr fp
   14a04:	andeq	r4, r1, ip, lsr fp
   14a08:	andeq	r4, r1, ip, lsr fp
   14a0c:	andeq	r4, r1, ip, lsr fp
   14a10:	andeq	r4, r1, ip, lsr fp
   14a14:	andeq	r4, r1, ip, lsr fp
   14a18:	andeq	r4, r1, ip, lsr fp
   14a1c:	andeq	r4, r1, ip, lsr fp
   14a20:	andeq	r4, r1, ip, lsr fp
   14a24:	andeq	r4, r1, ip, lsr fp
   14a28:	andeq	r4, r1, ip, lsr fp
   14a2c:	andeq	r4, r1, ip, lsr fp
   14a30:	andeq	r4, r1, ip, lsr fp
   14a34:	andeq	r4, r1, ip, lsr fp
   14a38:	andeq	r4, r1, ip, lsr fp
   14a3c:	andeq	r4, r1, ip, lsr fp
   14a40:	andeq	r4, r1, ip, lsr fp
   14a44:	andeq	r4, r1, ip, lsr fp
   14a48:	andeq	r4, r1, ip, lsr fp
   14a4c:	andeq	r4, r1, ip, lsr fp
   14a50:	ldrdeq	r4, [r1], -r0
   14a54:	andeq	r4, r1, r4, lsl #22
   14a58:	andeq	r4, r1, ip, lsr fp
   14a5c:	ldrdeq	r4, [r1], -r0
   14a60:	andeq	r4, r1, ip, lsr fp
   14a64:	ldrdeq	r4, [r1], -r0
   14a68:	andeq	r4, r1, ip, lsr fp
   14a6c:	andeq	r4, r1, ip, lsr fp
   14a70:	andeq	r4, r1, ip, lsr fp
   14a74:	andeq	r4, r1, ip, lsr fp
   14a78:	andeq	r4, r1, ip, lsr fp
   14a7c:	andeq	r4, r1, ip, lsr fp
   14a80:	andeq	r4, r1, ip, lsr fp
   14a84:	andeq	r4, r1, ip, lsr fp
   14a88:	andeq	r4, r1, ip, lsr fp
   14a8c:	andeq	r4, r1, ip, lsr fp
   14a90:	andeq	r4, r1, ip, lsr fp
   14a94:	andeq	r4, r1, ip, lsr fp
   14a98:	andeq	r4, r1, ip, lsr fp
   14a9c:	andeq	r4, r1, ip, lsr fp
   14aa0:	andeq	r4, r1, ip, lsr fp
   14aa4:	andeq	r4, r1, ip, lsr fp
   14aa8:	andeq	r4, r1, ip, lsr fp
   14aac:	andeq	r4, r1, ip, lsr fp
   14ab0:	andeq	r4, r1, ip, lsr fp
   14ab4:	andeq	r4, r1, ip, lsr fp
   14ab8:	andeq	r4, r1, ip, lsr fp
   14abc:	andeq	r4, r1, ip, lsr fp
   14ac0:	andeq	r4, r1, ip, lsr fp
   14ac4:	andeq	r4, r1, ip, lsr fp
   14ac8:	andeq	r4, r1, ip, lsr fp
   14acc:	andeq	r4, r1, ip, lsr fp
   14ad0:	andeq	r4, r1, r0, ror #21
   14ad4:	ldrdeq	r4, [r1], -r0
   14ad8:	andeq	r4, r1, r0, ror #21
   14adc:	andeq	r4, r1, r8, asr #22
   14ae0:	mov	r3, #0
   14ae4:	cmn	r8, #1
   14ae8:	str	r3, [sp, #40]	; 0x28
   14aec:	bne	146ac <__assert_fail@plt+0x3798>
   14af0:	ldr	r3, [sp, #28]
   14af4:	ldrb	r3, [r3, #1]
   14af8:	adds	r3, r3, #0
   14afc:	movne	r3, #1
   14b00:	b	146b4 <__assert_fail@plt+0x37a0>
   14b04:	mov	r3, #0
   14b08:	str	r3, [sp, #40]	; 0x28
   14b0c:	ldr	r3, [sp, #176]	; 0xb0
   14b10:	cmp	r3, #2
   14b14:	bne	147a4 <__assert_fail@plt+0x3890>
   14b18:	ldr	r3, [sp, #44]	; 0x2c
   14b1c:	cmp	r3, #0
   14b20:	bne	15460 <__assert_fail@plt+0x454c>
   14b24:	mov	r6, r3
   14b28:	add	r7, r7, #1
   14b2c:	mov	r3, fp
   14b30:	mov	r5, #92	; 0x5c
   14b34:	b	14574 <__assert_fail@plt+0x3660>
   14b38:	ldr	r6, [sp, #48]	; 0x30
   14b3c:	mov	r3, #0
   14b40:	str	r3, [sp, #40]	; 0x28
   14b44:	b	146c8 <__assert_fail@plt+0x37b4>
   14b48:	mov	r3, #0
   14b4c:	str	r3, [sp, #40]	; 0x28
   14b50:	b	146bc <__assert_fail@plt+0x37a8>
   14b54:	mov	r3, #0
   14b58:	str	r3, [sp, #40]	; 0x28
   14b5c:	mov	r3, #118	; 0x76
   14b60:	b	1451c <__assert_fail@plt+0x3608>
   14b64:	ldr	r6, [sp, #48]	; 0x30
   14b68:	mov	r3, #0
   14b6c:	str	r3, [sp, #40]	; 0x28
   14b70:	b	14708 <__assert_fail@plt+0x37f4>
   14b74:	mov	r3, #0
   14b78:	str	r3, [sp, #40]	; 0x28
   14b7c:	mov	r3, #116	; 0x74
   14b80:	b	14510 <__assert_fail@plt+0x35fc>
   14b84:	ldr	r3, [sp, #176]	; 0xb0
   14b88:	cmp	r3, #2
   14b8c:	beq	1509c <__assert_fail@plt+0x4188>
   14b90:	cmp	r3, #5
   14b94:	mov	r3, #0
   14b98:	str	r3, [sp, #40]	; 0x28
   14b9c:	beq	14808 <__assert_fail@plt+0x38f4>
   14ba0:	mov	r6, #0
   14ba4:	mov	r5, #63	; 0x3f
   14ba8:	b	146c8 <__assert_fail@plt+0x37b4>
   14bac:	ldr	r3, [sp, #176]	; 0xb0
   14bb0:	cmp	r3, #2
   14bb4:	beq	15024 <__assert_fail@plt+0x4110>
   14bb8:	mov	r3, #0
   14bbc:	b	1484c <__assert_fail@plt+0x3938>
   14bc0:	mov	r3, #0
   14bc4:	str	r3, [sp, #40]	; 0x28
   14bc8:	mov	r3, #114	; 0x72
   14bcc:	b	14510 <__assert_fail@plt+0x35fc>
   14bd0:	mov	r3, #0
   14bd4:	mov	r6, r3
   14bd8:	str	r3, [sp, #40]	; 0x28
   14bdc:	b	14708 <__assert_fail@plt+0x37f4>
   14be0:	mov	r3, #0
   14be4:	str	r3, [sp, #40]	; 0x28
   14be8:	mov	r3, #110	; 0x6e
   14bec:	b	14510 <__assert_fail@plt+0x35fc>
   14bf0:	mov	r3, #0
   14bf4:	str	r3, [sp, #40]	; 0x28
   14bf8:	mov	r3, #98	; 0x62
   14bfc:	b	1451c <__assert_fail@plt+0x3608>
   14c00:	mov	r3, #0
   14c04:	str	r3, [sp, #40]	; 0x28
   14c08:	mov	r3, #97	; 0x61
   14c0c:	b	1451c <__assert_fail@plt+0x3608>
   14c10:	ldr	r3, [sp, #60]	; 0x3c
   14c14:	cmp	r3, #0
   14c18:	bne	15008 <__assert_fail@plt+0x40f4>
   14c1c:	ldr	r3, [sp, #92]	; 0x5c
   14c20:	cmp	r3, #0
   14c24:	addne	r7, r7, #1
   14c28:	bne	13e28 <__assert_fail@plt+0x2f14>
   14c2c:	str	r3, [sp, #40]	; 0x28
   14c30:	b	14528 <__assert_fail@plt+0x3614>
   14c34:	mov	r3, #0
   14c38:	str	r3, [sp, #40]	; 0x28
   14c3c:	mov	r3, #102	; 0x66
   14c40:	b	1451c <__assert_fail@plt+0x3608>
   14c44:	mov	r3, #0
   14c48:	str	r3, [sp, #40]	; 0x28
   14c4c:	ldr	r3, [sp, #76]	; 0x4c
   14c50:	cmp	r3, #1
   14c54:	bne	150bc <__assert_fail@plt+0x41a8>
   14c58:	bl	10e24 <__ctype_b_loc@plt>
   14c5c:	ldr	r2, [r0]
   14c60:	sxth	r3, r5
   14c64:	lsl	r3, r3, #1
   14c68:	ldr	r1, [sp, #76]	; 0x4c
   14c6c:	ldrh	r3, [r2, r3]
   14c70:	mov	r0, r1
   14c74:	and	r3, r3, #16384	; 0x4000
   14c78:	cmp	r3, #0
   14c7c:	ldr	r3, [sp, #60]	; 0x3c
   14c80:	movne	r6, #1
   14c84:	moveq	r6, #0
   14c88:	movne	r2, #0
   14c8c:	andeq	r2, r3, #1
   14c90:	cmp	r2, #0
   14c94:	beq	146c8 <__assert_fail@plt+0x37b4>
   14c98:	ldr	r2, [sp, #60]	; 0x3c
   14c9c:	mov	r6, #0
   14ca0:	add	r1, r0, r7
   14ca4:	mov	ip, #39	; 0x27
   14ca8:	str	r6, [sp, #100]	; 0x64
   14cac:	mov	r0, #0
   14cb0:	ldr	lr, [sp, #36]	; 0x24
   14cb4:	str	r8, [sp, #36]	; 0x24
   14cb8:	ldr	r6, [sp, #40]	; 0x28
   14cbc:	ldr	r8, [sp, #44]	; 0x2c
   14cc0:	b	14d70 <__assert_fail@plt+0x3e5c>
   14cc4:	cmp	r8, #0
   14cc8:	bne	152a4 <__assert_fail@plt+0x4390>
   14ccc:	ldr	r0, [sp, #52]	; 0x34
   14cd0:	eor	r3, fp, #1
   14cd4:	ands	r3, r0, r3
   14cd8:	beq	14d08 <__assert_fail@plt+0x3df4>
   14cdc:	cmp	sl, r4
   14ce0:	add	r0, r4, #1
   14ce4:	strbhi	ip, [r9, r4]
   14ce8:	cmp	sl, r0
   14cec:	movhi	fp, #36	; 0x24
   14cf0:	strbhi	fp, [r9, r0]
   14cf4:	add	r0, r4, #2
   14cf8:	mov	fp, r3
   14cfc:	cmp	sl, r0
   14d00:	add	r4, r4, #3
   14d04:	strbhi	ip, [r9, r0]
   14d08:	cmp	sl, r4
   14d0c:	movhi	r3, #92	; 0x5c
   14d10:	strbhi	r3, [r9, r4]
   14d14:	add	r3, r4, #1
   14d18:	cmp	sl, r3
   14d1c:	bls	14d2c <__assert_fail@plt+0x3e18>
   14d20:	lsr	r0, r5, #6
   14d24:	add	r0, r0, #48	; 0x30
   14d28:	strb	r0, [r9, r3]
   14d2c:	add	r3, r4, #2
   14d30:	cmp	sl, r3
   14d34:	bls	14d44 <__assert_fail@plt+0x3e30>
   14d38:	ubfx	r0, r5, #3, #3
   14d3c:	add	r0, r0, #48	; 0x30
   14d40:	strb	r0, [r9, r3]
   14d44:	add	r7, r7, #1
   14d48:	and	r5, r5, #7
   14d4c:	cmp	r1, r7
   14d50:	add	r5, r5, #48	; 0x30
   14d54:	add	r4, r4, #3
   14d58:	bls	152b8 <__assert_fail@plt+0x43a4>
   14d5c:	mov	r0, r2
   14d60:	cmp	sl, r4
   14d64:	strbhi	r5, [r9, r4]
   14d68:	add	r4, r4, #1
   14d6c:	ldrb	r5, [lr, #1]!
   14d70:	cmp	r2, #0
   14d74:	bne	14cc4 <__assert_fail@plt+0x3db0>
   14d78:	eor	r3, r0, #1
   14d7c:	cmp	r6, #0
   14d80:	and	r3, r3, fp
   14d84:	uxtb	r3, r3
   14d88:	beq	14d9c <__assert_fail@plt+0x3e88>
   14d8c:	cmp	sl, r4
   14d90:	movhi	r6, #92	; 0x5c
   14d94:	strbhi	r6, [r9, r4]
   14d98:	add	r4, r4, #1
   14d9c:	add	r7, r7, #1
   14da0:	cmp	r7, r1
   14da4:	bcs	15298 <__assert_fail@plt+0x4384>
   14da8:	cmp	r3, #0
   14dac:	beq	152dc <__assert_fail@plt+0x43c8>
   14db0:	cmp	sl, r4
   14db4:	add	r3, r4, #1
   14db8:	mov	r6, #0
   14dbc:	strbhi	ip, [r9, r4]
   14dc0:	cmp	sl, r3
   14dc4:	add	r4, r4, #2
   14dc8:	mov	fp, r6
   14dcc:	strbhi	ip, [r9, r3]
   14dd0:	b	14d60 <__assert_fail@plt+0x3e4c>
   14dd4:	ldr	r3, [sp, #36]	; 0x24
   14dd8:	ldrb	r5, [r3]
   14ddc:	cmp	r5, #126	; 0x7e
   14de0:	ldrls	pc, [pc, r5, lsl #2]
   14de4:	b	14c44 <__assert_fail@plt+0x3d30>
   14de8:	andeq	r5, r1, r8
   14dec:	andeq	r4, r1, r4, asr #24
   14df0:	andeq	r4, r1, r4, asr #24
   14df4:	andeq	r4, r1, r4, asr #24
   14df8:	andeq	r4, r1, r4, asr #24
   14dfc:	andeq	r4, r1, r4, asr #24
   14e00:	andeq	r4, r1, r4, asr #24
   14e04:	strdeq	r4, [r1], -ip
   14e08:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e0c:	andeq	r4, r1, r4, ror fp
   14e10:	strdeq	r4, [r1], -ip
   14e14:	andeq	r4, r1, r4, asr fp
   14e18:	andeq	r4, r1, r0, lsr #7
   14e1c:	strdeq	r4, [r1], -r0
   14e20:	andeq	r4, r1, r4, asr #24
   14e24:	andeq	r4, r1, r4, asr #24
   14e28:	andeq	r4, r1, r4, asr #24
   14e2c:	andeq	r4, r1, r4, asr #24
   14e30:	andeq	r4, r1, r4, asr #24
   14e34:	andeq	r4, r1, r4, asr #24
   14e38:	andeq	r4, r1, r4, asr #24
   14e3c:	andeq	r4, r1, r4, asr #24
   14e40:	andeq	r4, r1, r4, asr #24
   14e44:	andeq	r4, r1, r4, asr #24
   14e48:	andeq	r4, r1, r4, asr #24
   14e4c:	andeq	r4, r1, r4, asr #24
   14e50:	andeq	r4, r1, r4, asr #24
   14e54:	andeq	r4, r1, r4, asr #24
   14e58:	andeq	r4, r1, r4, asr #24
   14e5c:	andeq	r4, r1, r4, asr #24
   14e60:	andeq	r4, r1, r4, asr #24
   14e64:	andeq	r4, r1, r4, asr #24
   14e68:	andeq	r4, r1, r4, ror #22
   14e6c:	andeq	r4, r1, r4, ror #31
   14e70:	andeq	r4, r1, r4, ror #31
   14e74:	andeq	r4, r1, r8, asr #22
   14e78:	andeq	r4, r1, r4, ror #31
   14e7c:	andeq	r4, r1, r8, lsr fp
   14e80:	andeq	r4, r1, r4, ror #31
   14e84:	andeq	r4, r1, ip, lsr #23
   14e88:	andeq	r4, r1, r4, ror #31
   14e8c:	andeq	r4, r1, r4, ror #31
   14e90:	andeq	r4, r1, r4, ror #31
   14e94:	andeq	r4, r1, r8, lsr fp
   14e98:	andeq	r4, r1, r8, lsr fp
   14e9c:	andeq	r4, r1, r8, lsr fp
   14ea0:	andeq	r4, r1, r8, lsr fp
   14ea4:	andeq	r4, r1, r8, lsr fp
   14ea8:	andeq	r4, r1, r8, lsr fp
   14eac:	andeq	r4, r1, r8, lsr fp
   14eb0:	andeq	r4, r1, r8, lsr fp
   14eb4:	andeq	r4, r1, r8, lsr fp
   14eb8:	andeq	r4, r1, r8, lsr fp
   14ebc:	andeq	r4, r1, r8, lsr fp
   14ec0:	andeq	r4, r1, r8, lsr fp
   14ec4:	andeq	r4, r1, r8, lsr fp
   14ec8:	andeq	r4, r1, r8, lsr fp
   14ecc:	andeq	r4, r1, r8, lsr fp
   14ed0:	andeq	r4, r1, r8, lsr fp
   14ed4:	andeq	r4, r1, r4, ror #31
   14ed8:	andeq	r4, r1, r4, ror #31
   14edc:	andeq	r4, r1, r4, ror #31
   14ee0:	andeq	r4, r1, r4, ror #31
   14ee4:	andeq	r4, r1, r4, lsl #23
   14ee8:	andeq	r4, r1, r4, asr #24
   14eec:	andeq	r4, r1, r8, lsr fp
   14ef0:	andeq	r4, r1, r8, lsr fp
   14ef4:	andeq	r4, r1, r8, lsr fp
   14ef8:	andeq	r4, r1, r8, lsr fp
   14efc:	andeq	r4, r1, r8, lsr fp
   14f00:	andeq	r4, r1, r8, lsr fp
   14f04:	andeq	r4, r1, r8, lsr fp
   14f08:	andeq	r4, r1, r8, lsr fp
   14f0c:	andeq	r4, r1, r8, lsr fp
   14f10:	andeq	r4, r1, r8, lsr fp
   14f14:	andeq	r4, r1, r8, lsr fp
   14f18:	andeq	r4, r1, r8, lsr fp
   14f1c:	andeq	r4, r1, r8, lsr fp
   14f20:	andeq	r4, r1, r8, lsr fp
   14f24:	andeq	r4, r1, r8, lsr fp
   14f28:	andeq	r4, r1, r8, lsr fp
   14f2c:	andeq	r4, r1, r8, lsr fp
   14f30:	andeq	r4, r1, r8, lsr fp
   14f34:	andeq	r4, r1, r8, lsr fp
   14f38:	andeq	r4, r1, r8, lsr fp
   14f3c:	andeq	r4, r1, r8, lsr fp
   14f40:	andeq	r4, r1, r8, lsr fp
   14f44:	andeq	r4, r1, r8, lsr fp
   14f48:	andeq	r4, r1, r8, lsr fp
   14f4c:	andeq	r4, r1, r8, lsr fp
   14f50:	andeq	r4, r1, r8, lsr fp
   14f54:	andeq	r4, r1, r4, ror #31
   14f58:	andeq	r4, r1, r4, lsl #22
   14f5c:	andeq	r4, r1, r8, lsr fp
   14f60:	andeq	r4, r1, r4, ror #31
   14f64:	andeq	r4, r1, r8, lsr fp
   14f68:	andeq	r4, r1, r4, ror #31
   14f6c:	andeq	r4, r1, r8, lsr fp
   14f70:	andeq	r4, r1, r8, lsr fp
   14f74:	andeq	r4, r1, r8, lsr fp
   14f78:	andeq	r4, r1, r8, lsr fp
   14f7c:	andeq	r4, r1, r8, lsr fp
   14f80:	andeq	r4, r1, r8, lsr fp
   14f84:	andeq	r4, r1, r8, lsr fp
   14f88:	andeq	r4, r1, r8, lsr fp
   14f8c:	andeq	r4, r1, r8, lsr fp
   14f90:	andeq	r4, r1, r8, lsr fp
   14f94:	andeq	r4, r1, r8, lsr fp
   14f98:	andeq	r4, r1, r8, lsr fp
   14f9c:	andeq	r4, r1, r8, lsr fp
   14fa0:	andeq	r4, r1, r8, lsr fp
   14fa4:	andeq	r4, r1, r8, lsr fp
   14fa8:	andeq	r4, r1, r8, lsr fp
   14fac:	andeq	r4, r1, r8, lsr fp
   14fb0:	andeq	r4, r1, r8, lsr fp
   14fb4:	andeq	r4, r1, r8, lsr fp
   14fb8:	andeq	r4, r1, r8, lsr fp
   14fbc:	andeq	r4, r1, r8, lsr fp
   14fc0:	andeq	r4, r1, r8, lsr fp
   14fc4:	andeq	r4, r1, r8, lsr fp
   14fc8:	andeq	r4, r1, r8, lsr fp
   14fcc:	andeq	r4, r1, r8, lsr fp
   14fd0:	andeq	r4, r1, r8, lsr fp
   14fd4:	andeq	r4, r1, r0, ror #21
   14fd8:	andeq	r4, r1, r4, ror #31
   14fdc:	andeq	r4, r1, r0, ror #21
   14fe0:	andeq	r4, r1, r8, asr #22
   14fe4:	mov	r3, #0
   14fe8:	str	r3, [sp, #40]	; 0x28
   14fec:	b	146c4 <__assert_fail@plt+0x37b0>
   14ff0:	mov	r3, #0
   14ff4:	str	r3, [sp, #40]	; 0x28
   14ff8:	b	1465c <__assert_fail@plt+0x3748>
   14ffc:	mov	r3, #0
   15000:	str	r3, [sp, #40]	; 0x28
   15004:	b	14690 <__assert_fail@plt+0x377c>
   15008:	ldr	r3, [sp, #44]	; 0x2c
   1500c:	cmp	r3, #0
   15010:	beq	145a8 <__assert_fail@plt+0x3694>
   15014:	ldr	r3, [sp, #52]	; 0x34
   15018:	mov	fp, r9
   1501c:	str	r3, [sp, #60]	; 0x3c
   15020:	b	14720 <__assert_fail@plt+0x380c>
   15024:	ldr	r3, [sp, #44]	; 0x2c
   15028:	cmp	r3, #0
   1502c:	bne	15460 <__assert_fail@plt+0x454c>
   15030:	str	r3, [sp, #40]	; 0x28
   15034:	cmp	sl, #0
   15038:	ldr	r3, [sp, #84]	; 0x54
   1503c:	clz	r3, r3
   15040:	lsr	r3, r3, #5
   15044:	moveq	r3, #0
   15048:	cmp	r3, #0
   1504c:	strne	sl, [sp, #84]	; 0x54
   15050:	movne	sl, #0
   15054:	bne	15084 <__assert_fail@plt+0x4170>
   15058:	cmp	sl, r4
   1505c:	movhi	r3, #39	; 0x27
   15060:	strbhi	r3, [r9, r4]
   15064:	add	r3, r4, #1
   15068:	cmp	sl, r3
   1506c:	movhi	r2, #92	; 0x5c
   15070:	strbhi	r2, [r9, r3]
   15074:	add	r3, r4, #2
   15078:	cmp	sl, r3
   1507c:	movhi	r2, #39	; 0x27
   15080:	strbhi	r2, [r9, r3]
   15084:	mov	r3, #0
   15088:	add	r4, r4, #3
   1508c:	str	r6, [sp, #80]	; 0x50
   15090:	mov	fp, r3
   15094:	mov	r5, #39	; 0x27
   15098:	b	14564 <__assert_fail@plt+0x3650>
   1509c:	ldr	r3, [sp, #44]	; 0x2c
   150a0:	cmp	r3, #0
   150a4:	bne	15460 <__assert_fail@plt+0x454c>
   150a8:	mov	r6, #0
   150ac:	mov	r5, #63	; 0x3f
   150b0:	str	r3, [sp, #40]	; 0x28
   150b4:	mov	r3, fp
   150b8:	b	14564 <__assert_fail@plt+0x3650>
   150bc:	mov	r2, #0
   150c0:	mov	r3, #0
   150c4:	cmn	r8, #1
   150c8:	strd	r2, [sp, #128]	; 0x80
   150cc:	bne	150dc <__assert_fail@plt+0x41c8>
   150d0:	ldr	r0, [sp, #28]
   150d4:	bl	10e3c <strlen@plt>
   150d8:	mov	r8, r0
   150dc:	str	r9, [sp, #100]	; 0x64
   150e0:	mov	r3, #0
   150e4:	strd	sl, [sp, #104]	; 0x68
   150e8:	ldr	sl, [sp, #28]
   150ec:	str	r5, [sp, #112]	; 0x70
   150f0:	mov	r5, r3
   150f4:	ldr	r9, [sp, #68]	; 0x44
   150f8:	str	r4, [sp, #116]	; 0x74
   150fc:	add	r4, r7, r5
   15100:	add	r3, sp, #128	; 0x80
   15104:	add	fp, sl, r4
   15108:	sub	r2, r8, r4
   1510c:	mov	r1, fp
   15110:	add	r0, sp, #124	; 0x7c
   15114:	bl	194b0 <__assert_fail@plt+0x859c>
   15118:	subs	r1, r0, #0
   1511c:	beq	1515c <__assert_fail@plt+0x4248>
   15120:	cmn	r1, #1
   15124:	beq	154b4 <__assert_fail@plt+0x45a0>
   15128:	cmn	r1, #2
   1512c:	beq	154d4 <__assert_fail@plt+0x45c0>
   15130:	cmp	r9, #0
   15134:	bne	1518c <__assert_fail@plt+0x4278>
   15138:	ldr	r0, [sp, #124]	; 0x7c
   1513c:	add	r5, r5, r1
   15140:	bl	10d7c <iswprint@plt>
   15144:	cmp	r0, #0
   15148:	add	r0, sp, #128	; 0x80
   1514c:	moveq	r6, #0
   15150:	bl	10d1c <mbsinit@plt>
   15154:	cmp	r0, #0
   15158:	beq	150fc <__assert_fail@plt+0x41e8>
   1515c:	ldr	r3, [sp, #60]	; 0x3c
   15160:	add	r9, sp, #100	; 0x64
   15164:	mov	r0, r5
   15168:	ldm	r9, {r9, sl, fp}
   1516c:	eor	r2, r6, #1
   15170:	ldr	r5, [sp, #112]	; 0x70
   15174:	and	r2, r2, r3
   15178:	uxtb	r2, r2
   1517c:	ldr	r4, [sp, #116]	; 0x74
   15180:	cmp	r0, #1
   15184:	bhi	14ca0 <__assert_fail@plt+0x3d8c>
   15188:	b	14c90 <__assert_fail@plt+0x3d7c>
   1518c:	cmp	r1, #1
   15190:	beq	15138 <__assert_fail@plt+0x4224>
   15194:	add	r2, r4, #1
   15198:	add	r3, sl, r1
   1519c:	add	r2, sl, r2
   151a0:	add	r4, r3, r4
   151a4:	ldrb	r3, [r2], #1
   151a8:	sub	r3, r3, #91	; 0x5b
   151ac:	cmp	r3, #33	; 0x21
   151b0:	ldrls	pc, [pc, r3, lsl #2]
   151b4:	b	15240 <__assert_fail@plt+0x432c>
   151b8:	andeq	r5, r1, ip, asr #4
   151bc:	andeq	r5, r1, ip, asr #4
   151c0:	andeq	r5, r1, r0, asr #4
   151c4:	andeq	r5, r1, ip, asr #4
   151c8:	andeq	r5, r1, r0, asr #4
   151cc:	andeq	r5, r1, ip, asr #4
   151d0:	andeq	r5, r1, r0, asr #4
   151d4:	andeq	r5, r1, r0, asr #4
   151d8:	andeq	r5, r1, r0, asr #4
   151dc:	andeq	r5, r1, r0, asr #4
   151e0:	andeq	r5, r1, r0, asr #4
   151e4:	andeq	r5, r1, r0, asr #4
   151e8:	andeq	r5, r1, r0, asr #4
   151ec:	andeq	r5, r1, r0, asr #4
   151f0:	andeq	r5, r1, r0, asr #4
   151f4:	andeq	r5, r1, r0, asr #4
   151f8:	andeq	r5, r1, r0, asr #4
   151fc:	andeq	r5, r1, r0, asr #4
   15200:	andeq	r5, r1, r0, asr #4
   15204:	andeq	r5, r1, r0, asr #4
   15208:	andeq	r5, r1, r0, asr #4
   1520c:	andeq	r5, r1, r0, asr #4
   15210:	andeq	r5, r1, r0, asr #4
   15214:	andeq	r5, r1, r0, asr #4
   15218:	andeq	r5, r1, r0, asr #4
   1521c:	andeq	r5, r1, r0, asr #4
   15220:	andeq	r5, r1, r0, asr #4
   15224:	andeq	r5, r1, r0, asr #4
   15228:	andeq	r5, r1, r0, asr #4
   1522c:	andeq	r5, r1, r0, asr #4
   15230:	andeq	r5, r1, r0, asr #4
   15234:	andeq	r5, r1, r0, asr #4
   15238:	andeq	r5, r1, r0, asr #4
   1523c:	andeq	r5, r1, ip, asr #4
   15240:	cmp	r4, r2
   15244:	bne	151a4 <__assert_fail@plt+0x4290>
   15248:	b	15138 <__assert_fail@plt+0x4224>
   1524c:	mov	r3, #2
   15250:	ldr	fp, [sp, #100]	; 0x64
   15254:	str	r3, [sp, #176]	; 0xb0
   15258:	ldr	sl, [sp, #104]	; 0x68
   1525c:	b	14720 <__assert_fail@plt+0x380c>
   15260:	ldr	r2, [sp, #52]	; 0x34
   15264:	mov	fp, r9
   15268:	ldr	r3, [sp, #60]	; 0x3c
   1526c:	and	r3, r3, r2
   15270:	str	r3, [sp, #60]	; 0x3c
   15274:	b	14720 <__assert_fail@plt+0x380c>
   15278:	cmp	sl, r4
   1527c:	movhi	r2, fp
   15280:	bhi	145f8 <__assert_fail@plt+0x36e4>
   15284:	mov	r2, r4
   15288:	b	14608 <__assert_fail@plt+0x36f4>
   1528c:	mov	r6, r3
   15290:	mov	r5, #63	; 0x3f
   15294:	b	146c8 <__assert_fail@plt+0x37b4>
   15298:	ldr	r8, [sp, #36]	; 0x24
   1529c:	ldr	r6, [sp, #100]	; 0x64
   152a0:	b	14574 <__assert_fail@plt+0x3660>
   152a4:	mov	fp, r9
   152a8:	ldr	r8, [sp, #36]	; 0x24
   152ac:	ldr	r3, [sp, #52]	; 0x34
   152b0:	str	r3, [sp, #60]	; 0x3c
   152b4:	b	14720 <__assert_fail@plt+0x380c>
   152b8:	ldr	r8, [sp, #36]	; 0x24
   152bc:	ldr	r6, [sp, #100]	; 0x64
   152c0:	b	1440c <__assert_fail@plt+0x34f8>
   152c4:	mov	r3, #0
   152c8:	add	r4, r4, #4
   152cc:	mov	fp, r2
   152d0:	mov	r6, r3
   152d4:	mov	r5, #48	; 0x30
   152d8:	b	14564 <__assert_fail@plt+0x3650>
   152dc:	mov	r6, r3
   152e0:	b	14d60 <__assert_fail@plt+0x3e4c>
   152e4:	mov	r3, #1
   152e8:	movw	r2, #43832	; 0xab38
   152ec:	movt	r2, #1
   152f0:	mov	r4, r3
   152f4:	mov	r9, sl
   152f8:	str	r3, [sp, #32]
   152fc:	str	sl, [sp, #44]	; 0x2c
   15300:	str	r3, [sp, #48]	; 0x30
   15304:	str	sl, [sp, #52]	; 0x34
   15308:	str	r3, [sp, #56]	; 0x38
   1530c:	str	r3, [sp, #60]	; 0x3c
   15310:	str	sl, [sp, #64]	; 0x40
   15314:	str	sl, [sp, #68]	; 0x44
   15318:	str	r2, [sp, #72]	; 0x48
   1531c:	str	sl, [sp, #80]	; 0x50
   15320:	str	sl, [sp, #84]	; 0x54
   15324:	str	sl, [sp, #88]	; 0x58
   15328:	b	13e18 <__assert_fail@plt+0x2f04>
   1532c:	mov	r3, #0
   15330:	mov	r5, #48	; 0x30
   15334:	mov	r6, r3
   15338:	b	14564 <__assert_fail@plt+0x3650>
   1533c:	cmp	sl, r4
   15340:	mov	r5, #48	; 0x30
   15344:	movhi	r3, #48	; 0x30
   15348:	strbhi	r3, [r9, r4]
   1534c:	add	r3, r2, #2
   15350:	add	r4, r2, #3
   15354:	cmp	sl, r3
   15358:	movhi	r1, #48	; 0x30
   1535c:	strbhi	r1, [r9, r3]
   15360:	mov	r3, #0
   15364:	b	14640 <__assert_fail@plt+0x372c>
   15368:	ldr	r3, [sp, #48]	; 0x30
   1536c:	str	r3, [sp, #40]	; 0x28
   15370:	b	14c4c <__assert_fail@plt+0x3d38>
   15374:	ldr	r2, [sp, #28]
   15378:	ldrb	r2, [r2, r3]
   1537c:	sub	r1, r2, #33	; 0x21
   15380:	cmp	r1, #29
   15384:	ldrls	pc, [pc, r1, lsl #2]
   15388:	b	146c4 <__assert_fail@plt+0x37b0>
   1538c:	andeq	r5, r1, r4, lsl #8
   15390:	andeq	r4, r1, r4, asr #13
   15394:	andeq	r4, r1, r4, asr #13
   15398:	andeq	r4, r1, r4, asr #13
   1539c:	andeq	r4, r1, r4, asr #13
   153a0:	andeq	r4, r1, r4, asr #13
   153a4:	andeq	r5, r1, r4, lsl #8
   153a8:	andeq	r5, r1, r4, lsl #8
   153ac:	andeq	r5, r1, r4, lsl #8
   153b0:	andeq	r4, r1, r4, asr #13
   153b4:	andeq	r4, r1, r4, asr #13
   153b8:	andeq	r4, r1, r4, asr #13
   153bc:	andeq	r5, r1, r4, lsl #8
   153c0:	andeq	r4, r1, r4, asr #13
   153c4:	andeq	r5, r1, r4, lsl #8
   153c8:	andeq	r4, r1, r4, asr #13
   153cc:	andeq	r4, r1, r4, asr #13
   153d0:	andeq	r4, r1, r4, asr #13
   153d4:	andeq	r4, r1, r4, asr #13
   153d8:	andeq	r4, r1, r4, asr #13
   153dc:	andeq	r4, r1, r4, asr #13
   153e0:	andeq	r4, r1, r4, asr #13
   153e4:	andeq	r4, r1, r4, asr #13
   153e8:	andeq	r4, r1, r4, asr #13
   153ec:	andeq	r4, r1, r4, asr #13
   153f0:	andeq	r4, r1, r4, asr #13
   153f4:	andeq	r4, r1, r4, asr #13
   153f8:	andeq	r5, r1, r4, lsl #8
   153fc:	andeq	r5, r1, r4, lsl #8
   15400:	andeq	r5, r1, r4, lsl #8
   15404:	ldr	r1, [sp, #44]	; 0x2c
   15408:	cmp	r1, #0
   1540c:	bne	1566c <__assert_fail@plt+0x4758>
   15410:	cmp	sl, r4
   15414:	mov	r7, r3
   15418:	movhi	r1, #63	; 0x3f
   1541c:	mov	r5, r2
   15420:	mov	r3, fp
   15424:	strbhi	r1, [r9, r4]
   15428:	add	r1, r4, #1
   1542c:	cmp	sl, r1
   15430:	movhi	r0, #34	; 0x22
   15434:	strbhi	r0, [r9, r1]
   15438:	add	r1, r4, #2
   1543c:	cmp	sl, r1
   15440:	movhi	r0, #34	; 0x22
   15444:	strbhi	r0, [r9, r1]
   15448:	add	r1, r4, #3
   1544c:	add	r4, r4, #4
   15450:	cmp	sl, r1
   15454:	movhi	r0, #63	; 0x3f
   15458:	strbhi	r0, [r9, r1]
   1545c:	b	14640 <__assert_fail@plt+0x372c>
   15460:	mov	fp, r9
   15464:	b	14720 <__assert_fail@plt+0x380c>
   15468:	ldr	r3, [sp, #188]	; 0xbc
   1546c:	ldrb	r3, [r3]
   15470:	cmp	r3, #0
   15474:	beq	13db0 <__assert_fail@plt+0x2e9c>
   15478:	ldr	r2, [sp, #188]	; 0xbc
   1547c:	cmp	sl, r4
   15480:	bls	154a0 <__assert_fail@plt+0x458c>
   15484:	strb	r3, [fp, r4]
   15488:	add	r4, r4, #1
   1548c:	ldrb	r3, [r2, #1]!
   15490:	cmp	r3, #0
   15494:	beq	13db0 <__assert_fail@plt+0x2e9c>
   15498:	cmp	sl, r4
   1549c:	bhi	15484 <__assert_fail@plt+0x4570>
   154a0:	ldrb	r3, [r2, #1]!
   154a4:	add	r4, r4, #1
   154a8:	cmp	r3, #0
   154ac:	bne	1547c <__assert_fail@plt+0x4568>
   154b0:	b	13db0 <__assert_fail@plt+0x2e9c>
   154b4:	add	r9, sp, #100	; 0x64
   154b8:	mov	r0, r5
   154bc:	ldr	r2, [sp, #60]	; 0x3c
   154c0:	mov	r6, #0
   154c4:	ldm	r9, {r9, sl, fp}
   154c8:	ldr	r5, [sp, #112]	; 0x70
   154cc:	ldr	r4, [sp, #116]	; 0x74
   154d0:	b	15180 <__assert_fail@plt+0x426c>
   154d4:	cmp	r4, r8
   154d8:	add	r9, sp, #100	; 0x64
   154dc:	mov	r1, r4
   154e0:	mov	r2, fp
   154e4:	ldm	r9, {r9, sl, fp}
   154e8:	mov	r3, r5
   154ec:	mov	r0, r5
   154f0:	ldr	r5, [sp, #112]	; 0x70
   154f4:	ldr	r4, [sp, #116]	; 0x74
   154f8:	bcs	1552c <__assert_fail@plt+0x4618>
   154fc:	ldrb	r6, [r2]
   15500:	cmp	r6, #0
   15504:	bne	15518 <__assert_fail@plt+0x4604>
   15508:	b	15664 <__assert_fail@plt+0x4750>
   1550c:	ldrb	r6, [r2, #1]!
   15510:	cmp	r6, #0
   15514:	beq	155fc <__assert_fail@plt+0x46e8>
   15518:	add	r3, r3, #1
   1551c:	add	r1, r7, r3
   15520:	cmp	r8, r1
   15524:	bhi	1550c <__assert_fail@plt+0x45f8>
   15528:	mov	r0, r3
   1552c:	mov	r6, #0
   15530:	ldr	r2, [sp, #60]	; 0x3c
   15534:	b	15180 <__assert_fail@plt+0x426c>
   15538:	mov	r3, #1
   1553c:	mov	r4, #0
   15540:	mov	r9, r4
   15544:	str	r3, [sp, #32]
   15548:	str	r3, [sp, #44]	; 0x2c
   1554c:	str	r3, [sp, #48]	; 0x30
   15550:	str	r4, [sp, #52]	; 0x34
   15554:	str	r3, [sp, #56]	; 0x38
   15558:	str	r3, [sp, #60]	; 0x3c
   1555c:	str	r3, [sp, #88]	; 0x58
   15560:	movw	r3, #43832	; 0xab38
   15564:	movt	r3, #1
   15568:	str	r4, [sp, #64]	; 0x40
   1556c:	str	r4, [sp, #68]	; 0x44
   15570:	str	r3, [sp, #72]	; 0x48
   15574:	str	r4, [sp, #80]	; 0x50
   15578:	str	r4, [sp, #84]	; 0x54
   1557c:	b	13e18 <__assert_fail@plt+0x2f04>
   15580:	mov	fp, r9
   15584:	b	14734 <__assert_fail@plt+0x3820>
   15588:	ldr	r3, [sp, #48]	; 0x30
   1558c:	b	150a8 <__assert_fail@plt+0x4194>
   15590:	mov	r2, r3
   15594:	ldr	r3, [sp, #72]	; 0x48
   15598:	cmp	r3, #0
   1559c:	moveq	r2, #0
   155a0:	andne	r2, r2, #1
   155a4:	cmp	r2, #0
   155a8:	beq	155d8 <__assert_fail@plt+0x46c4>
   155ac:	mov	r2, r3
   155b0:	ldrb	r3, [r3]
   155b4:	cmp	r3, #0
   155b8:	beq	155d8 <__assert_fail@plt+0x46c4>
   155bc:	cmp	sl, r4
   155c0:	bls	155e8 <__assert_fail@plt+0x46d4>
   155c4:	strb	r3, [fp, r4]
   155c8:	add	r4, r4, #1
   155cc:	ldrb	r3, [r2, #1]!
   155d0:	cmp	r3, #0
   155d4:	bne	155bc <__assert_fail@plt+0x46a8>
   155d8:	cmp	sl, r4
   155dc:	movhi	r3, #0
   155e0:	strbhi	r3, [fp, r4]
   155e4:	b	14770 <__assert_fail@plt+0x385c>
   155e8:	ldrb	r3, [r2, #1]!
   155ec:	add	r4, r4, #1
   155f0:	cmp	r3, #0
   155f4:	bne	155bc <__assert_fail@plt+0x46a8>
   155f8:	b	155d8 <__assert_fail@plt+0x46c4>
   155fc:	mov	r0, r3
   15600:	ldr	r2, [sp, #60]	; 0x3c
   15604:	b	15180 <__assert_fail@plt+0x426c>
   15608:	mov	ip, #5
   1560c:	mov	r3, r8
   15610:	ldr	r1, [sp, #84]	; 0x54
   15614:	str	ip, [sp]
   15618:	ldr	r2, [sp, #180]	; 0xb4
   1561c:	ldr	ip, [sp, #188]	; 0xbc
   15620:	ldr	r0, [sp, #184]	; 0xb8
   15624:	str	r2, [sp, #4]
   15628:	ldr	r2, [sp, #28]
   1562c:	str	ip, [sp, #12]
   15630:	ldr	ip, [sp, #192]	; 0xc0
   15634:	str	r0, [sp, #8]
   15638:	mov	r0, fp
   1563c:	str	ip, [sp, #16]
   15640:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15644:	mov	r4, r0
   15648:	b	14770 <__assert_fail@plt+0x385c>
   1564c:	mov	r6, r3
   15650:	str	r3, [sp, #40]	; 0x28
   15654:	b	146e0 <__assert_fail@plt+0x37cc>
   15658:	mov	r3, #2
   1565c:	str	r3, [sp, #176]	; 0xb0
   15660:	b	14720 <__assert_fail@plt+0x380c>
   15664:	ldr	r2, [sp, #60]	; 0x3c
   15668:	b	15180 <__assert_fail@plt+0x426c>
   1566c:	mov	r3, #5
   15670:	mov	fp, r9
   15674:	str	r3, [sp, #176]	; 0xb0
   15678:	b	14734 <__assert_fail@plt+0x3820>
   1567c:	mov	r1, #1
   15680:	mov	r9, #0
   15684:	mov	r3, r9
   15688:	mov	r2, r9
   1568c:	str	r1, [sp, #32]
   15690:	str	sl, [sp, #84]	; 0x54
   15694:	b	144bc <__assert_fail@plt+0x35a8>
   15698:	mov	r3, #0
   1569c:	mov	r2, #1
   156a0:	mov	r9, r3
   156a4:	mov	r4, r3
   156a8:	str	r2, [sp, #32]
   156ac:	strd	r2, [sp, #44]	; 0x2c
   156b0:	strd	r2, [sp, #56]	; 0x38
   156b4:	str	r3, [sp, #80]	; 0x50
   156b8:	str	r3, [sp, #84]	; 0x54
   156bc:	str	r3, [sp, #88]	; 0x58
   156c0:	movw	r3, #43852	; 0xab4c
   156c4:	movt	r3, #1
   156c8:	str	r2, [sp, #52]	; 0x34
   156cc:	str	r2, [sp, #64]	; 0x40
   156d0:	str	r2, [sp, #68]	; 0x44
   156d4:	str	r3, [sp, #72]	; 0x48
   156d8:	b	13e18 <__assert_fail@plt+0x2f04>
   156dc:	bl	10efc <abort@plt>
   156e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156e4:	mov	r4, r0
   156e8:	mov	r5, r3
   156ec:	strd	r6, [sp, #8]
   156f0:	movw	r7, #49396	; 0xc0f4
   156f4:	movt	r7, #2
   156f8:	strd	r8, [sp, #16]
   156fc:	strd	sl, [sp, #24]
   15700:	mov	sl, r1
   15704:	mov	fp, r2
   15708:	str	lr, [sp, #32]
   1570c:	sub	sp, sp, #60	; 0x3c
   15710:	bl	10e54 <__errno_location@plt>
   15714:	mov	r8, r0
   15718:	cmn	r4, #-2147483647	; 0x80000001
   1571c:	ldr	r6, [r7]
   15720:	movne	r0, #0
   15724:	moveq	r0, #1
   15728:	ldr	r3, [r8]
   1572c:	orrs	r0, r0, r4, lsr #31
   15730:	str	r3, [sp, #28]
   15734:	bne	158c4 <__assert_fail@plt+0x49b0>
   15738:	ldr	r3, [r7, #4]
   1573c:	cmp	r3, r4
   15740:	bgt	157a0 <__assert_fail@plt+0x488c>
   15744:	add	r1, r7, #8
   15748:	sub	r2, r4, r3
   1574c:	str	r3, [sp, #52]	; 0x34
   15750:	cmp	r6, r1
   15754:	add	r2, r2, #1
   15758:	beq	1589c <__assert_fail@plt+0x4988>
   1575c:	mov	r1, #8
   15760:	mov	r0, r6
   15764:	mvn	r3, #-2147483648	; 0x80000000
   15768:	str	r1, [sp]
   1576c:	add	r1, sp, #52	; 0x34
   15770:	bl	18084 <__assert_fail@plt+0x7170>
   15774:	mov	r6, r0
   15778:	str	r0, [r7]
   1577c:	ldr	r0, [r7, #4]
   15780:	mov	r1, #0
   15784:	ldr	r2, [sp, #52]	; 0x34
   15788:	sub	r2, r2, r0
   1578c:	add	r0, r6, r0, lsl #3
   15790:	lsl	r2, r2, #3
   15794:	bl	10e78 <memset@plt>
   15798:	ldr	r3, [sp, #52]	; 0x34
   1579c:	str	r3, [r7, #4]
   157a0:	ldr	r1, [r5, #4]
   157a4:	add	r0, r6, r4, lsl #3
   157a8:	add	ip, r5, #8
   157ac:	mov	r3, fp
   157b0:	mov	r2, sl
   157b4:	ldr	r7, [r0, #4]
   157b8:	str	r0, [sp, #36]	; 0x24
   157bc:	str	ip, [sp, #40]	; 0x28
   157c0:	orr	r0, r1, #1
   157c4:	ldr	r9, [r6, r4, lsl #3]
   157c8:	str	ip, [sp, #8]
   157cc:	ldr	lr, [r5, #44]	; 0x2c
   157d0:	str	r0, [sp, #4]
   157d4:	ldr	ip, [r5]
   157d8:	mov	r1, r9
   157dc:	str	ip, [sp, #32]
   157e0:	ldr	ip, [r5, #40]	; 0x28
   157e4:	str	ip, [sp, #12]
   157e8:	ldr	ip, [sp, #32]
   157ec:	str	lr, [sp, #16]
   157f0:	str	r0, [sp, #44]	; 0x2c
   157f4:	mov	r0, r7
   157f8:	str	ip, [sp]
   157fc:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15800:	cmp	r9, r0
   15804:	bhi	15874 <__assert_fail@plt+0x4960>
   15808:	add	r9, r0, #1
   1580c:	movw	r3, #58480	; 0xe470
   15810:	movt	r3, #2
   15814:	cmp	r7, r3
   15818:	str	r9, [r6, r4, lsl #3]
   1581c:	beq	15828 <__assert_fail@plt+0x4914>
   15820:	mov	r0, r7
   15824:	bl	13a70 <__assert_fail@plt+0x2b5c>
   15828:	mov	r0, r9
   1582c:	bl	17de0 <__assert_fail@plt+0x6ecc>
   15830:	ldr	ip, [r5]
   15834:	mov	r3, fp
   15838:	mov	r2, sl
   1583c:	mov	r1, r9
   15840:	mov	r7, r0
   15844:	ldr	lr, [sp, #36]	; 0x24
   15848:	ldr	r4, [r5, #40]	; 0x28
   1584c:	str	r0, [lr, #4]
   15850:	ldr	lr, [r5, #44]	; 0x2c
   15854:	str	ip, [sp]
   15858:	ldr	ip, [sp, #44]	; 0x2c
   1585c:	str	ip, [sp, #4]
   15860:	ldr	ip, [sp, #40]	; 0x28
   15864:	str	r4, [sp, #12]
   15868:	str	lr, [sp, #16]
   1586c:	str	ip, [sp, #8]
   15870:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15874:	ldr	r3, [sp, #28]
   15878:	mov	r0, r7
   1587c:	str	r3, [r8]
   15880:	add	sp, sp, #60	; 0x3c
   15884:	ldrd	r4, [sp]
   15888:	ldrd	r6, [sp, #8]
   1588c:	ldrd	r8, [sp, #16]
   15890:	ldrd	sl, [sp, #24]
   15894:	add	sp, sp, #32
   15898:	pop	{pc}		; (ldr pc, [sp], #4)
   1589c:	mov	r1, #8
   158a0:	mvn	r3, #-2147483648	; 0x80000000
   158a4:	str	r1, [sp]
   158a8:	add	r1, sp, #52	; 0x34
   158ac:	bl	18084 <__assert_fail@plt+0x7170>
   158b0:	ldrd	r2, [r7, #8]
   158b4:	mov	r6, r0
   158b8:	str	r0, [r7]
   158bc:	strd	r2, [r0]
   158c0:	b	1577c <__assert_fail@plt+0x4868>
   158c4:	bl	10efc <abort@plt>
   158c8:	strd	r4, [sp, #-16]!
   158cc:	mov	r5, r0
   158d0:	str	r6, [sp, #8]
   158d4:	str	lr, [sp, #12]
   158d8:	bl	10e54 <__errno_location@plt>
   158dc:	mov	r4, r0
   158e0:	cmp	r5, #0
   158e4:	ldr	r0, [pc, #32]	; 1590c <__assert_fail@plt+0x49f8>
   158e8:	mov	r1, #48	; 0x30
   158ec:	movne	r0, r5
   158f0:	ldr	r6, [r4]
   158f4:	bl	18224 <__assert_fail@plt+0x7310>
   158f8:	str	r6, [r4]
   158fc:	ldrd	r4, [sp]
   15900:	ldr	r6, [sp, #8]
   15904:	add	sp, sp, #12
   15908:	pop	{pc}		; (ldr pc, [sp], #4)
   1590c:	andeq	lr, r2, r0, ror r5
   15910:	ldr	r3, [pc, #12]	; 15924 <__assert_fail@plt+0x4a10>
   15914:	cmp	r0, #0
   15918:	moveq	r0, r3
   1591c:	ldr	r0, [r0]
   15920:	bx	lr
   15924:	andeq	lr, r2, r0, ror r5
   15928:	ldr	r3, [pc, #12]	; 1593c <__assert_fail@plt+0x4a28>
   1592c:	cmp	r0, #0
   15930:	moveq	r0, r3
   15934:	str	r1, [r0]
   15938:	bx	lr
   1593c:	andeq	lr, r2, r0, ror r5
   15940:	ldr	r3, [pc, #52]	; 1597c <__assert_fail@plt+0x4a68>
   15944:	cmp	r0, #0
   15948:	push	{lr}		; (str lr, [sp, #-4]!)
   1594c:	lsr	lr, r1, #5
   15950:	and	r1, r1, #31
   15954:	moveq	r0, r3
   15958:	add	r3, r0, #8
   1595c:	ldr	ip, [r3, lr, lsl #2]
   15960:	lsr	r0, ip, r1
   15964:	eor	r2, r2, r0
   15968:	and	r0, r0, #1
   1596c:	and	r2, r2, #1
   15970:	eor	r1, ip, r2, lsl r1
   15974:	str	r1, [r3, lr, lsl #2]
   15978:	pop	{pc}		; (ldr pc, [sp], #4)
   1597c:	andeq	lr, r2, r0, ror r5
   15980:	ldr	r3, [pc, #16]	; 15998 <__assert_fail@plt+0x4a84>
   15984:	cmp	r0, #0
   15988:	movne	r3, r0
   1598c:	ldr	r0, [r3, #4]
   15990:	str	r1, [r3, #4]
   15994:	bx	lr
   15998:	andeq	lr, r2, r0, ror r5
   1599c:	ldr	r3, [pc, #48]	; 159d4 <__assert_fail@plt+0x4ac0>
   159a0:	cmp	r0, #0
   159a4:	mov	ip, #10
   159a8:	moveq	r0, r3
   159ac:	cmp	r2, #0
   159b0:	cmpne	r1, #0
   159b4:	str	ip, [r0]
   159b8:	beq	159c8 <__assert_fail@plt+0x4ab4>
   159bc:	str	r1, [r0, #40]	; 0x28
   159c0:	str	r2, [r0, #44]	; 0x2c
   159c4:	bx	lr
   159c8:	str	r4, [sp, #-8]!
   159cc:	str	lr, [sp, #4]
   159d0:	bl	10efc <abort@plt>
   159d4:	andeq	lr, r2, r0, ror r5
   159d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   159dc:	strd	r6, [sp, #8]
   159e0:	mov	r7, r0
   159e4:	mov	r6, r1
   159e8:	strd	r8, [sp, #16]
   159ec:	mov	r8, r2
   159f0:	mov	r9, r3
   159f4:	str	lr, [sp, #24]
   159f8:	sub	sp, sp, #28
   159fc:	ldr	r4, [sp, #56]	; 0x38
   15a00:	ldr	ip, [pc, #104]	; 15a70 <__assert_fail@plt+0x4b5c>
   15a04:	cmp	r4, #0
   15a08:	moveq	r4, ip
   15a0c:	bl	10e54 <__errno_location@plt>
   15a10:	ldr	ip, [r4, #44]	; 0x2c
   15a14:	mov	r5, r0
   15a18:	mov	r1, r6
   15a1c:	add	lr, r4, #8
   15a20:	mov	r3, r9
   15a24:	ldr	r6, [r5]
   15a28:	mov	r2, r8
   15a2c:	mov	r0, r7
   15a30:	str	ip, [sp, #16]
   15a34:	ldr	ip, [r4, #40]	; 0x28
   15a38:	str	lr, [sp, #8]
   15a3c:	str	ip, [sp, #12]
   15a40:	ldr	ip, [r4, #4]
   15a44:	str	ip, [sp, #4]
   15a48:	ldr	ip, [r4]
   15a4c:	str	ip, [sp]
   15a50:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15a54:	str	r6, [r5]
   15a58:	add	sp, sp, #28
   15a5c:	ldrd	r4, [sp]
   15a60:	ldrd	r6, [sp, #8]
   15a64:	ldrd	r8, [sp, #16]
   15a68:	add	sp, sp, #24
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	andeq	lr, r2, r0, ror r5
   15a74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a78:	cmp	r2, #0
   15a7c:	ldr	r4, [pc, #192]	; 15b44 <__assert_fail@plt+0x4c30>
   15a80:	movne	r4, r2
   15a84:	strd	r6, [sp, #8]
   15a88:	strd	r8, [sp, #16]
   15a8c:	mov	r9, r1
   15a90:	mov	r8, r0
   15a94:	strd	sl, [sp, #24]
   15a98:	str	lr, [sp, #32]
   15a9c:	sub	sp, sp, #36	; 0x24
   15aa0:	bl	10e54 <__errno_location@plt>
   15aa4:	ldr	r5, [r4, #4]
   15aa8:	mov	r6, r0
   15aac:	add	r7, r4, #8
   15ab0:	mov	r1, #0
   15ab4:	mov	r3, r9
   15ab8:	ldr	ip, [r4, #44]	; 0x2c
   15abc:	mov	r2, r8
   15ac0:	mov	r0, r1
   15ac4:	ldr	sl, [r6]
   15ac8:	orr	r5, r5, #1
   15acc:	str	ip, [sp, #16]
   15ad0:	ldr	ip, [r4, #40]	; 0x28
   15ad4:	stmib	sp, {r5, r7, ip}
   15ad8:	ldr	ip, [r4]
   15adc:	str	ip, [sp]
   15ae0:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15ae4:	add	r1, r0, #1
   15ae8:	mov	r0, r1
   15aec:	str	r1, [sp, #28]
   15af0:	bl	17de0 <__assert_fail@plt+0x6ecc>
   15af4:	ldr	ip, [r4, #44]	; 0x2c
   15af8:	mov	fp, r0
   15afc:	mov	r3, r9
   15b00:	mov	r2, r8
   15b04:	ldr	r1, [sp, #28]
   15b08:	str	ip, [sp, #16]
   15b0c:	ldr	ip, [r4, #40]	; 0x28
   15b10:	stmib	sp, {r5, r7, ip}
   15b14:	ldr	ip, [r4]
   15b18:	str	ip, [sp]
   15b1c:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15b20:	mov	r0, fp
   15b24:	str	sl, [r6]
   15b28:	add	sp, sp, #36	; 0x24
   15b2c:	ldrd	r4, [sp]
   15b30:	ldrd	r6, [sp, #8]
   15b34:	ldrd	r8, [sp, #16]
   15b38:	ldrd	sl, [sp, #24]
   15b3c:	add	sp, sp, #32
   15b40:	pop	{pc}		; (ldr pc, [sp], #4)
   15b44:	andeq	lr, r2, r0, ror r5
   15b48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b4c:	cmp	r3, #0
   15b50:	ldr	r4, [pc, #220]	; 15c34 <__assert_fail@plt+0x4d20>
   15b54:	movne	r4, r3
   15b58:	strd	r6, [sp, #8]
   15b5c:	mov	r6, r2
   15b60:	strd	r8, [sp, #16]
   15b64:	mov	r9, r0
   15b68:	strd	sl, [sp, #24]
   15b6c:	mov	sl, r1
   15b70:	str	lr, [sp, #32]
   15b74:	sub	sp, sp, #44	; 0x2c
   15b78:	bl	10e54 <__errno_location@plt>
   15b7c:	ldr	r5, [r4, #4]
   15b80:	mov	r7, r0
   15b84:	mov	r1, #0
   15b88:	add	r8, r4, #8
   15b8c:	mov	r3, sl
   15b90:	ldr	ip, [r4, #44]	; 0x2c
   15b94:	mov	r2, r9
   15b98:	mov	r0, r1
   15b9c:	ldr	lr, [r7]
   15ba0:	cmp	r6, r1
   15ba4:	orreq	r5, r5, #1
   15ba8:	str	ip, [sp, #16]
   15bac:	ldr	ip, [r4, #40]	; 0x28
   15bb0:	stmib	sp, {r5, r8, ip}
   15bb4:	ldr	ip, [r4]
   15bb8:	str	lr, [sp, #28]
   15bbc:	str	ip, [sp]
   15bc0:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15bc4:	add	r1, r0, #1
   15bc8:	mov	fp, r0
   15bcc:	mov	r0, r1
   15bd0:	str	r1, [sp, #36]	; 0x24
   15bd4:	bl	17de0 <__assert_fail@plt+0x6ecc>
   15bd8:	ldr	ip, [r4, #44]	; 0x2c
   15bdc:	mov	r3, sl
   15be0:	mov	r2, r9
   15be4:	ldr	r1, [sp, #36]	; 0x24
   15be8:	str	ip, [sp, #16]
   15bec:	ldr	ip, [r4, #40]	; 0x28
   15bf0:	str	r0, [sp, #32]
   15bf4:	stmib	sp, {r5, r8, ip}
   15bf8:	ldr	ip, [r4]
   15bfc:	str	ip, [sp]
   15c00:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15c04:	ldr	lr, [sp, #28]
   15c08:	cmp	r6, #0
   15c0c:	ldr	r0, [sp, #32]
   15c10:	str	lr, [r7]
   15c14:	strne	fp, [r6]
   15c18:	add	sp, sp, #44	; 0x2c
   15c1c:	ldrd	r4, [sp]
   15c20:	ldrd	r6, [sp, #8]
   15c24:	ldrd	r8, [sp, #16]
   15c28:	ldrd	sl, [sp, #24]
   15c2c:	add	sp, sp, #32
   15c30:	pop	{pc}		; (ldr pc, [sp], #4)
   15c34:	andeq	lr, r2, r0, ror r5
   15c38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c3c:	movw	r5, #49396	; 0xc0f4
   15c40:	movt	r5, #2
   15c44:	ldr	r3, [r5, #4]
   15c48:	strd	r6, [sp, #8]
   15c4c:	str	r8, [sp, #16]
   15c50:	str	lr, [sp, #20]
   15c54:	ldr	r7, [r5]
   15c58:	cmp	r3, #1
   15c5c:	ble	15c80 <__assert_fail@plt+0x4d6c>
   15c60:	mov	r4, #1
   15c64:	add	r6, r7, #4
   15c68:	ldr	r0, [r6, r4, lsl #3]
   15c6c:	add	r4, r4, #1
   15c70:	bl	13a70 <__assert_fail@plt+0x2b5c>
   15c74:	ldr	r3, [r5, #4]
   15c78:	cmp	r3, r4
   15c7c:	bgt	15c68 <__assert_fail@plt+0x4d54>
   15c80:	ldr	r0, [r7, #4]
   15c84:	movw	r4, #58480	; 0xe470
   15c88:	movt	r4, #2
   15c8c:	cmp	r0, r4
   15c90:	beq	15ca4 <__assert_fail@plt+0x4d90>
   15c94:	bl	13a70 <__assert_fail@plt+0x2b5c>
   15c98:	mov	r3, #256	; 0x100
   15c9c:	str	r3, [r5, #8]
   15ca0:	str	r4, [r5, #12]
   15ca4:	ldr	r4, [pc, #44]	; 15cd8 <__assert_fail@plt+0x4dc4>
   15ca8:	cmp	r7, r4
   15cac:	beq	15cbc <__assert_fail@plt+0x4da8>
   15cb0:	mov	r0, r7
   15cb4:	bl	13a70 <__assert_fail@plt+0x2b5c>
   15cb8:	str	r4, [r5]
   15cbc:	mov	r3, #1
   15cc0:	ldrd	r6, [sp, #8]
   15cc4:	str	r3, [r5, #4]
   15cc8:	ldrd	r4, [sp]
   15ccc:	ldr	r8, [sp, #16]
   15cd0:	add	sp, sp, #20
   15cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd8:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   15cdc:	ldr	r3, [pc, #4]	; 15ce8 <__assert_fail@plt+0x4dd4>
   15ce0:	mvn	r2, #0
   15ce4:	b	156e0 <__assert_fail@plt+0x47cc>
   15ce8:	andeq	lr, r2, r0, ror r5
   15cec:	ldr	r3, [pc]	; 15cf4 <__assert_fail@plt+0x4de0>
   15cf0:	b	156e0 <__assert_fail@plt+0x47cc>
   15cf4:	andeq	lr, r2, r0, ror r5
   15cf8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15cfc:	movw	r4, #49396	; 0xc0f4
   15d00:	movt	r4, #2
   15d04:	strd	r6, [sp, #8]
   15d08:	strd	r8, [sp, #16]
   15d0c:	strd	sl, [sp, #24]
   15d10:	mov	sl, r0
   15d14:	str	lr, [sp, #32]
   15d18:	sub	sp, sp, #44	; 0x2c
   15d1c:	bl	10e54 <__errno_location@plt>
   15d20:	ldr	r3, [r0]
   15d24:	mov	r8, r0
   15d28:	ldr	r2, [r4, #4]
   15d2c:	ldr	r5, [r4]
   15d30:	str	r3, [sp, #28]
   15d34:	cmp	r2, #0
   15d38:	bgt	15d94 <__assert_fail@plt+0x4e80>
   15d3c:	add	r3, r4, #8
   15d40:	str	r2, [sp, #36]	; 0x24
   15d44:	rsb	r2, r2, #1
   15d48:	cmp	r5, r3
   15d4c:	beq	15e60 <__assert_fail@plt+0x4f4c>
   15d50:	mov	r1, #8
   15d54:	mov	r0, r5
   15d58:	mvn	r3, #-2147483648	; 0x80000000
   15d5c:	str	r1, [sp]
   15d60:	add	r1, sp, #36	; 0x24
   15d64:	bl	18084 <__assert_fail@plt+0x7170>
   15d68:	mov	r5, r0
   15d6c:	str	r0, [r4]
   15d70:	ldr	r0, [r4, #4]
   15d74:	mov	r1, #0
   15d78:	ldr	r2, [sp, #36]	; 0x24
   15d7c:	sub	r2, r2, r0
   15d80:	add	r0, r5, r0, lsl #3
   15d84:	lsl	r2, r2, #3
   15d88:	bl	10e78 <memset@plt>
   15d8c:	ldr	r3, [sp, #36]	; 0x24
   15d90:	str	r3, [r4, #4]
   15d94:	movw	r4, #58480	; 0xe470
   15d98:	movt	r4, #2
   15d9c:	ldr	r9, [r5]
   15da0:	add	fp, r4, #264	; 0x108
   15da4:	mvn	r3, #0
   15da8:	ldr	r7, [r4, #260]	; 0x104
   15dac:	mov	r2, sl
   15db0:	ldr	r6, [r5, #4]
   15db4:	str	fp, [sp, #8]
   15db8:	mov	r1, r9
   15dbc:	ldr	ip, [r4, #256]	; 0x100
   15dc0:	orr	r7, r7, #1
   15dc4:	ldr	lr, [r4, #300]	; 0x12c
   15dc8:	mov	r0, r6
   15dcc:	str	ip, [sp]
   15dd0:	str	r7, [sp, #4]
   15dd4:	str	lr, [sp, #16]
   15dd8:	ldr	ip, [r4, #296]	; 0x128
   15ddc:	str	ip, [sp, #12]
   15de0:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15de4:	cmp	r9, r0
   15de8:	bhi	15e38 <__assert_fail@plt+0x4f24>
   15dec:	add	r9, r0, #1
   15df0:	cmp	r6, r4
   15df4:	str	r9, [r5]
   15df8:	beq	15e04 <__assert_fail@plt+0x4ef0>
   15dfc:	mov	r0, r6
   15e00:	bl	13a70 <__assert_fail@plt+0x2b5c>
   15e04:	mov	r0, r9
   15e08:	bl	17de0 <__assert_fail@plt+0x6ecc>
   15e0c:	ldr	r3, [r4, #256]	; 0x100
   15e10:	mov	r2, sl
   15e14:	mov	r1, r9
   15e18:	mov	r6, r0
   15e1c:	ldr	lr, [r4, #296]	; 0x128
   15e20:	ldr	ip, [r4, #300]	; 0x12c
   15e24:	str	r0, [r5, #4]
   15e28:	stm	sp, {r3, r7, fp, lr}
   15e2c:	mvn	r3, #0
   15e30:	str	ip, [sp, #16]
   15e34:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15e38:	ldr	r3, [sp, #28]
   15e3c:	mov	r0, r6
   15e40:	str	r3, [r8]
   15e44:	add	sp, sp, #44	; 0x2c
   15e48:	ldrd	r4, [sp]
   15e4c:	ldrd	r6, [sp, #8]
   15e50:	ldrd	r8, [sp, #16]
   15e54:	ldrd	sl, [sp, #24]
   15e58:	add	sp, sp, #32
   15e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e60:	mov	r0, #8
   15e64:	mvn	r3, #-2147483648	; 0x80000000
   15e68:	add	r1, sp, #36	; 0x24
   15e6c:	str	r0, [sp]
   15e70:	mov	r0, #0
   15e74:	bl	18084 <__assert_fail@plt+0x7170>
   15e78:	ldrd	r2, [r4, #8]
   15e7c:	mov	r5, r0
   15e80:	str	r0, [r4]
   15e84:	strd	r2, [r0]
   15e88:	b	15d70 <__assert_fail@plt+0x4e5c>
   15e8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e90:	movw	r4, #49396	; 0xc0f4
   15e94:	movt	r4, #2
   15e98:	strd	r6, [sp, #8]
   15e9c:	strd	r8, [sp, #16]
   15ea0:	strd	sl, [sp, #24]
   15ea4:	mov	sl, r0
   15ea8:	mov	fp, r1
   15eac:	str	lr, [sp, #32]
   15eb0:	sub	sp, sp, #44	; 0x2c
   15eb4:	bl	10e54 <__errno_location@plt>
   15eb8:	ldr	r3, [r0]
   15ebc:	mov	r8, r0
   15ec0:	ldr	r2, [r4, #4]
   15ec4:	ldr	r5, [r4]
   15ec8:	str	r3, [sp, #28]
   15ecc:	cmp	r2, #0
   15ed0:	bgt	15f2c <__assert_fail@plt+0x5018>
   15ed4:	add	r3, r4, #8
   15ed8:	str	r2, [sp, #36]	; 0x24
   15edc:	rsb	r2, r2, #1
   15ee0:	cmp	r5, r3
   15ee4:	beq	16008 <__assert_fail@plt+0x50f4>
   15ee8:	mov	r1, #8
   15eec:	mov	r0, r5
   15ef0:	mvn	r3, #-2147483648	; 0x80000000
   15ef4:	str	r1, [sp]
   15ef8:	add	r1, sp, #36	; 0x24
   15efc:	bl	18084 <__assert_fail@plt+0x7170>
   15f00:	mov	r5, r0
   15f04:	str	r0, [r4]
   15f08:	ldr	r0, [r4, #4]
   15f0c:	mov	r1, #0
   15f10:	ldr	r2, [sp, #36]	; 0x24
   15f14:	sub	r2, r2, r0
   15f18:	add	r0, r5, r0, lsl #3
   15f1c:	lsl	r2, r2, #3
   15f20:	bl	10e78 <memset@plt>
   15f24:	ldr	r3, [sp, #36]	; 0x24
   15f28:	str	r3, [r4, #4]
   15f2c:	movw	r4, #58480	; 0xe470
   15f30:	movt	r4, #2
   15f34:	ldr	r9, [r5]
   15f38:	add	r0, r4, #264	; 0x108
   15f3c:	mov	r3, fp
   15f40:	ldr	r7, [r4, #260]	; 0x104
   15f44:	mov	r2, sl
   15f48:	ldr	r6, [r5, #4]
   15f4c:	str	r0, [sp, #8]
   15f50:	mov	r1, r9
   15f54:	ldr	ip, [r4, #256]	; 0x100
   15f58:	orr	r7, r7, #1
   15f5c:	ldr	lr, [r4, #300]	; 0x12c
   15f60:	mov	r0, r6
   15f64:	str	ip, [sp]
   15f68:	str	r7, [sp, #4]
   15f6c:	str	lr, [sp, #16]
   15f70:	ldr	ip, [r4, #296]	; 0x128
   15f74:	str	ip, [sp, #12]
   15f78:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15f7c:	cmp	r9, r0
   15f80:	bhi	15fe0 <__assert_fail@plt+0x50cc>
   15f84:	add	r9, r0, #1
   15f88:	cmp	r6, r4
   15f8c:	str	r9, [r5]
   15f90:	beq	15f9c <__assert_fail@plt+0x5088>
   15f94:	mov	r0, r6
   15f98:	bl	13a70 <__assert_fail@plt+0x2b5c>
   15f9c:	mov	r0, r9
   15fa0:	bl	17de0 <__assert_fail@plt+0x6ecc>
   15fa4:	ldr	ip, [r4, #256]	; 0x100
   15fa8:	mov	r1, r9
   15fac:	mov	r3, fp
   15fb0:	mov	r2, sl
   15fb4:	mov	r6, r0
   15fb8:	ldr	r9, [r4, #296]	; 0x128
   15fbc:	ldr	lr, [r4, #300]	; 0x12c
   15fc0:	str	r0, [r5, #4]
   15fc4:	str	ip, [sp]
   15fc8:	ldr	ip, [pc, #100]	; 16034 <__assert_fail@plt+0x5120>
   15fcc:	str	r7, [sp, #4]
   15fd0:	str	ip, [sp, #8]
   15fd4:	str	r9, [sp, #12]
   15fd8:	str	lr, [sp, #16]
   15fdc:	bl	13cf4 <__assert_fail@plt+0x2de0>
   15fe0:	ldr	r3, [sp, #28]
   15fe4:	mov	r0, r6
   15fe8:	str	r3, [r8]
   15fec:	add	sp, sp, #44	; 0x2c
   15ff0:	ldrd	r4, [sp]
   15ff4:	ldrd	r6, [sp, #8]
   15ff8:	ldrd	r8, [sp, #16]
   15ffc:	ldrd	sl, [sp, #24]
   16000:	add	sp, sp, #32
   16004:	pop	{pc}		; (ldr pc, [sp], #4)
   16008:	mov	r0, #8
   1600c:	mvn	r3, #-2147483648	; 0x80000000
   16010:	add	r1, sp, #36	; 0x24
   16014:	str	r0, [sp]
   16018:	mov	r0, #0
   1601c:	bl	18084 <__assert_fail@plt+0x7170>
   16020:	ldrd	r2, [r4, #8]
   16024:	mov	r5, r0
   16028:	str	r0, [r4]
   1602c:	strd	r2, [r0]
   16030:	b	15f08 <__assert_fail@plt+0x4ff4>
   16034:	andeq	lr, r2, r8, ror r5
   16038:	strd	r4, [sp, #-20]!	; 0xffffffec
   1603c:	mov	r4, #0
   16040:	mov	r5, #0
   16044:	strd	r6, [sp, #8]
   16048:	cmp	r1, #10
   1604c:	str	lr, [sp, #16]
   16050:	sub	sp, sp, #100	; 0x64
   16054:	strd	r4, [sp, #48]	; 0x30
   16058:	beq	160a0 <__assert_fail@plt+0x518c>
   1605c:	mov	r3, sp
   16060:	strd	r4, [sp, #8]
   16064:	str	r1, [sp, #48]	; 0x30
   16068:	mov	r1, r2
   1606c:	mvn	r2, #0
   16070:	ldrd	r6, [sp, #48]	; 0x30
   16074:	strd	r6, [sp]
   16078:	strd	r4, [sp, #16]
   1607c:	strd	r4, [sp, #24]
   16080:	strd	r4, [sp, #32]
   16084:	strd	r4, [sp, #40]	; 0x28
   16088:	bl	156e0 <__assert_fail@plt+0x47cc>
   1608c:	add	sp, sp, #100	; 0x64
   16090:	ldrd	r4, [sp]
   16094:	ldrd	r6, [sp, #8]
   16098:	add	sp, sp, #16
   1609c:	pop	{pc}		; (ldr pc, [sp], #4)
   160a0:	bl	10efc <abort@plt>
   160a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   160a8:	mov	r4, #0
   160ac:	mov	r5, #0
   160b0:	strd	r6, [sp, #8]
   160b4:	cmp	r1, #10
   160b8:	str	lr, [sp, #16]
   160bc:	sub	sp, sp, #100	; 0x64
   160c0:	strd	r4, [sp, #48]	; 0x30
   160c4:	beq	16110 <__assert_fail@plt+0x51fc>
   160c8:	mov	ip, r2
   160cc:	mov	r2, r3
   160d0:	strd	r4, [sp, #8]
   160d4:	str	r1, [sp, #48]	; 0x30
   160d8:	mov	r3, sp
   160dc:	mov	r1, ip
   160e0:	ldrd	r6, [sp, #48]	; 0x30
   160e4:	strd	r6, [sp]
   160e8:	strd	r4, [sp, #16]
   160ec:	strd	r4, [sp, #24]
   160f0:	strd	r4, [sp, #32]
   160f4:	strd	r4, [sp, #40]	; 0x28
   160f8:	bl	156e0 <__assert_fail@plt+0x47cc>
   160fc:	add	sp, sp, #100	; 0x64
   16100:	ldrd	r4, [sp]
   16104:	ldrd	r6, [sp, #8]
   16108:	add	sp, sp, #16
   1610c:	pop	{pc}		; (ldr pc, [sp], #4)
   16110:	bl	10efc <abort@plt>
   16114:	mov	r2, #0
   16118:	mov	r3, #0
   1611c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16120:	strd	r6, [sp, #8]
   16124:	cmp	r0, #10
   16128:	strd	r8, [sp, #16]
   1612c:	strd	sl, [sp, #24]
   16130:	str	lr, [sp, #32]
   16134:	sub	sp, sp, #124	; 0x7c
   16138:	strd	r2, [sp, #72]	; 0x48
   1613c:	strd	r2, [sp, #80]	; 0x50
   16140:	strd	r2, [sp, #88]	; 0x58
   16144:	strd	r2, [sp, #96]	; 0x60
   16148:	strd	r2, [sp, #104]	; 0x68
   1614c:	strd	r2, [sp, #112]	; 0x70
   16150:	beq	162f4 <__assert_fail@plt+0x53e0>
   16154:	mov	r6, r1
   16158:	movw	r4, #49396	; 0xc0f4
   1615c:	movt	r4, #2
   16160:	str	r0, [sp, #72]	; 0x48
   16164:	ldrd	r0, [sp, #72]	; 0x48
   16168:	strd	r0, [sp, #24]
   1616c:	strd	r2, [sp, #32]
   16170:	strd	r2, [sp, #40]	; 0x28
   16174:	strd	r2, [sp, #48]	; 0x30
   16178:	strd	r2, [sp, #56]	; 0x38
   1617c:	strd	r2, [sp, #64]	; 0x40
   16180:	bl	10e54 <__errno_location@plt>
   16184:	mov	r8, r0
   16188:	ldr	r5, [r4]
   1618c:	ldr	r2, [r4, #4]
   16190:	ldr	r9, [r0]
   16194:	cmp	r2, #0
   16198:	bgt	161f4 <__assert_fail@plt+0x52e0>
   1619c:	add	r3, r4, #8
   161a0:	str	r2, [sp, #72]	; 0x48
   161a4:	rsb	r2, r2, #1
   161a8:	cmp	r5, r3
   161ac:	beq	162c8 <__assert_fail@plt+0x53b4>
   161b0:	mov	r3, #8
   161b4:	mov	r0, r5
   161b8:	add	r1, sp, #72	; 0x48
   161bc:	str	r3, [sp]
   161c0:	mvn	r3, #-2147483648	; 0x80000000
   161c4:	bl	18084 <__assert_fail@plt+0x7170>
   161c8:	mov	r5, r0
   161cc:	str	r0, [r4]
   161d0:	ldr	r0, [r4, #4]
   161d4:	mov	r1, #0
   161d8:	ldr	r2, [sp, #72]	; 0x48
   161dc:	sub	r2, r2, r0
   161e0:	add	r0, r5, r0, lsl #3
   161e4:	lsl	r2, r2, #3
   161e8:	bl	10e78 <memset@plt>
   161ec:	ldr	r3, [sp, #72]	; 0x48
   161f0:	str	r3, [r4, #4]
   161f4:	ldr	sl, [r5]
   161f8:	add	r0, sp, #32
   161fc:	mvn	r3, #0
   16200:	mov	r2, r6
   16204:	ldr	r7, [sp, #28]
   16208:	ldr	r4, [r5, #4]
   1620c:	mov	r1, sl
   16210:	str	r0, [sp, #8]
   16214:	ldr	lr, [sp, #24]
   16218:	orr	r7, r7, #1
   1621c:	ldr	ip, [sp, #64]	; 0x40
   16220:	mov	r0, r4
   16224:	ldr	fp, [sp, #68]	; 0x44
   16228:	str	lr, [sp]
   1622c:	str	r7, [sp, #4]
   16230:	str	ip, [sp, #12]
   16234:	str	fp, [sp, #16]
   16238:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1623c:	cmp	sl, r0
   16240:	bhi	162a4 <__assert_fail@plt+0x5390>
   16244:	add	sl, r0, #1
   16248:	movw	r3, #58480	; 0xe470
   1624c:	movt	r3, #2
   16250:	cmp	r4, r3
   16254:	str	sl, [r5]
   16258:	beq	16264 <__assert_fail@plt+0x5350>
   1625c:	mov	r0, r4
   16260:	bl	13a70 <__assert_fail@plt+0x2b5c>
   16264:	mov	r0, sl
   16268:	bl	17de0 <__assert_fail@plt+0x6ecc>
   1626c:	ldr	r3, [sp, #24]
   16270:	mov	r2, r6
   16274:	mov	r1, sl
   16278:	mov	r4, r0
   1627c:	ldr	lr, [sp, #64]	; 0x40
   16280:	ldr	ip, [sp, #68]	; 0x44
   16284:	str	r0, [r5, #4]
   16288:	add	r5, sp, #32
   1628c:	stm	sp, {r3, r7}
   16290:	mvn	r3, #0
   16294:	str	r5, [sp, #8]
   16298:	str	lr, [sp, #12]
   1629c:	str	ip, [sp, #16]
   162a0:	bl	13cf4 <__assert_fail@plt+0x2de0>
   162a4:	mov	r0, r4
   162a8:	str	r9, [r8]
   162ac:	add	sp, sp, #124	; 0x7c
   162b0:	ldrd	r4, [sp]
   162b4:	ldrd	r6, [sp, #8]
   162b8:	ldrd	r8, [sp, #16]
   162bc:	ldrd	sl, [sp, #24]
   162c0:	add	sp, sp, #32
   162c4:	pop	{pc}		; (ldr pc, [sp], #4)
   162c8:	mov	r0, #8
   162cc:	mvn	r3, #-2147483648	; 0x80000000
   162d0:	add	r1, sp, #72	; 0x48
   162d4:	str	r0, [sp]
   162d8:	mov	r0, #0
   162dc:	bl	18084 <__assert_fail@plt+0x7170>
   162e0:	ldrd	r2, [r4, #8]
   162e4:	mov	r5, r0
   162e8:	str	r0, [r4]
   162ec:	strd	r2, [r0]
   162f0:	b	161d0 <__assert_fail@plt+0x52bc>
   162f4:	bl	10efc <abort@plt>
   162f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162fc:	cmp	r0, #10
   16300:	strd	r6, [sp, #8]
   16304:	mov	r6, #0
   16308:	mov	r7, #0
   1630c:	strd	r8, [sp, #16]
   16310:	strd	sl, [sp, #24]
   16314:	str	lr, [sp, #32]
   16318:	sub	sp, sp, #124	; 0x7c
   1631c:	strd	r6, [sp, #72]	; 0x48
   16320:	strd	r6, [sp, #80]	; 0x50
   16324:	strd	r6, [sp, #88]	; 0x58
   16328:	strd	r6, [sp, #96]	; 0x60
   1632c:	strd	r6, [sp, #104]	; 0x68
   16330:	strd	r6, [sp, #112]	; 0x70
   16334:	beq	164e0 <__assert_fail@plt+0x55cc>
   16338:	mov	sl, r2
   1633c:	movw	r5, #49396	; 0xc0f4
   16340:	movt	r5, #2
   16344:	str	r0, [sp, #72]	; 0x48
   16348:	mov	r9, r1
   1634c:	ldrd	r2, [sp, #72]	; 0x48
   16350:	strd	r2, [sp, #24]
   16354:	strd	r6, [sp, #32]
   16358:	strd	r6, [sp, #40]	; 0x28
   1635c:	strd	r6, [sp, #48]	; 0x30
   16360:	strd	r6, [sp, #56]	; 0x38
   16364:	strd	r6, [sp, #64]	; 0x40
   16368:	bl	10e54 <__errno_location@plt>
   1636c:	mov	r7, r0
   16370:	ldr	r4, [r5]
   16374:	ldr	r2, [r5, #4]
   16378:	ldr	fp, [r0]
   1637c:	cmp	r2, #0
   16380:	bgt	163dc <__assert_fail@plt+0x54c8>
   16384:	add	r3, r5, #8
   16388:	str	r2, [sp, #72]	; 0x48
   1638c:	rsb	r2, r2, #1
   16390:	cmp	r4, r3
   16394:	beq	164b4 <__assert_fail@plt+0x55a0>
   16398:	mov	r3, #8
   1639c:	mov	r0, r4
   163a0:	add	r1, sp, #72	; 0x48
   163a4:	str	r3, [sp]
   163a8:	mvn	r3, #-2147483648	; 0x80000000
   163ac:	bl	18084 <__assert_fail@plt+0x7170>
   163b0:	mov	r4, r0
   163b4:	str	r0, [r5]
   163b8:	ldr	r0, [r5, #4]
   163bc:	mov	r1, #0
   163c0:	ldr	r2, [sp, #72]	; 0x48
   163c4:	sub	r2, r2, r0
   163c8:	add	r0, r4, r0, lsl #3
   163cc:	lsl	r2, r2, #3
   163d0:	bl	10e78 <memset@plt>
   163d4:	ldr	r3, [sp, #72]	; 0x48
   163d8:	str	r3, [r5, #4]
   163dc:	ldr	ip, [sp, #24]
   163e0:	add	r0, sp, #32
   163e4:	mov	r3, sl
   163e8:	mov	r2, r9
   163ec:	ldr	r6, [sp, #28]
   163f0:	ldr	r8, [r4]
   163f4:	ldr	r5, [r4, #4]
   163f8:	str	ip, [sp]
   163fc:	orr	r6, r6, #1
   16400:	ldr	ip, [sp, #64]	; 0x40
   16404:	mov	r1, r8
   16408:	str	r6, [sp, #4]
   1640c:	ldr	lr, [sp, #68]	; 0x44
   16410:	str	r0, [sp, #8]
   16414:	mov	r0, r5
   16418:	str	ip, [sp, #12]
   1641c:	str	lr, [sp, #16]
   16420:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16424:	cmp	r8, r0
   16428:	bhi	16490 <__assert_fail@plt+0x557c>
   1642c:	add	r8, r0, #1
   16430:	movw	r3, #58480	; 0xe470
   16434:	movt	r3, #2
   16438:	cmp	r5, r3
   1643c:	str	r8, [r4]
   16440:	beq	1644c <__assert_fail@plt+0x5538>
   16444:	mov	r0, r5
   16448:	bl	13a70 <__assert_fail@plt+0x2b5c>
   1644c:	mov	r0, r8
   16450:	bl	17de0 <__assert_fail@plt+0x6ecc>
   16454:	ldr	lr, [sp, #24]
   16458:	mov	r1, r8
   1645c:	mov	r3, sl
   16460:	mov	r2, r9
   16464:	mov	r5, r0
   16468:	ldr	r8, [sp, #64]	; 0x40
   1646c:	ldr	ip, [sp, #68]	; 0x44
   16470:	str	r0, [r4, #4]
   16474:	str	lr, [sp]
   16478:	add	lr, sp, #32
   1647c:	str	r6, [sp, #4]
   16480:	str	lr, [sp, #8]
   16484:	str	r8, [sp, #12]
   16488:	str	ip, [sp, #16]
   1648c:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16490:	mov	r0, r5
   16494:	str	fp, [r7]
   16498:	add	sp, sp, #124	; 0x7c
   1649c:	ldrd	r4, [sp]
   164a0:	ldrd	r6, [sp, #8]
   164a4:	ldrd	r8, [sp, #16]
   164a8:	ldrd	sl, [sp, #24]
   164ac:	add	sp, sp, #32
   164b0:	pop	{pc}		; (ldr pc, [sp], #4)
   164b4:	mov	r0, #8
   164b8:	mvn	r3, #-2147483648	; 0x80000000
   164bc:	add	r1, sp, #72	; 0x48
   164c0:	str	r0, [sp]
   164c4:	mov	r0, #0
   164c8:	bl	18084 <__assert_fail@plt+0x7170>
   164cc:	ldrd	r2, [r5, #8]
   164d0:	mov	r4, r0
   164d4:	str	r0, [r5]
   164d8:	strd	r2, [r0]
   164dc:	b	163b8 <__assert_fail@plt+0x54a4>
   164e0:	bl	10efc <abort@plt>
   164e4:	ldr	r3, [pc, #492]	; 166d8 <__assert_fail@plt+0x57c4>
   164e8:	lsr	ip, r2, #5
   164ec:	and	r2, r2, #31
   164f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   164f4:	movw	r5, #49396	; 0xc0f4
   164f8:	movt	r5, #2
   164fc:	strd	r6, [sp, #8]
   16500:	strd	r8, [sp, #16]
   16504:	strd	sl, [sp, #24]
   16508:	mov	sl, r0
   1650c:	mov	fp, r1
   16510:	ldrd	r0, [r3]
   16514:	str	lr, [sp, #32]
   16518:	sub	sp, sp, #92	; 0x5c
   1651c:	ldrd	r8, [r3, #8]
   16520:	add	r6, sp, #48	; 0x30
   16524:	strd	r0, [sp, #40]	; 0x28
   16528:	ldrd	r0, [r3, #16]
   1652c:	strd	r8, [sp, #48]	; 0x30
   16530:	ldrd	r8, [r3, #24]
   16534:	strd	r0, [sp, #56]	; 0x38
   16538:	ldrd	r0, [r3, #32]
   1653c:	strd	r8, [sp, #64]	; 0x40
   16540:	ldrd	r8, [r3, #40]	; 0x28
   16544:	strd	r0, [sp, #72]	; 0x48
   16548:	strd	r8, [sp, #80]	; 0x50
   1654c:	ldr	r3, [r6, ip, lsl #2]
   16550:	mvn	r1, r3, lsr r2
   16554:	and	r1, r1, #1
   16558:	eor	r2, r3, r1, lsl r2
   1655c:	str	r2, [r6, ip, lsl #2]
   16560:	bl	10e54 <__errno_location@plt>
   16564:	ldr	r3, [r0]
   16568:	mov	r8, r0
   1656c:	ldr	r2, [r5, #4]
   16570:	ldr	r4, [r5]
   16574:	str	r3, [sp, #28]
   16578:	cmp	r2, #0
   1657c:	bgt	165d8 <__assert_fail@plt+0x56c4>
   16580:	add	r3, r5, #8
   16584:	str	r2, [sp, #36]	; 0x24
   16588:	rsb	r2, r2, #1
   1658c:	cmp	r4, r3
   16590:	beq	166ac <__assert_fail@plt+0x5798>
   16594:	mov	r1, #8
   16598:	mov	r0, r4
   1659c:	mvn	r3, #-2147483648	; 0x80000000
   165a0:	str	r1, [sp]
   165a4:	add	r1, sp, #36	; 0x24
   165a8:	bl	18084 <__assert_fail@plt+0x7170>
   165ac:	mov	r4, r0
   165b0:	str	r0, [r5]
   165b4:	ldr	r0, [r5, #4]
   165b8:	mov	r1, #0
   165bc:	ldr	r2, [sp, #36]	; 0x24
   165c0:	sub	r2, r2, r0
   165c4:	add	r0, r4, r0, lsl #3
   165c8:	lsl	r2, r2, #3
   165cc:	bl	10e78 <memset@plt>
   165d0:	ldr	r3, [sp, #36]	; 0x24
   165d4:	str	r3, [r5, #4]
   165d8:	ldr	ip, [sp, #40]	; 0x28
   165dc:	mov	r3, fp
   165e0:	mov	r2, sl
   165e4:	ldr	r7, [sp, #44]	; 0x2c
   165e8:	ldr	r9, [r4]
   165ec:	ldr	r5, [r4, #4]
   165f0:	str	ip, [sp]
   165f4:	orr	r7, r7, #1
   165f8:	ldr	ip, [sp, #80]	; 0x50
   165fc:	mov	r1, r9
   16600:	str	r7, [sp, #4]
   16604:	ldr	lr, [sp, #84]	; 0x54
   16608:	mov	r0, r5
   1660c:	str	r6, [sp, #8]
   16610:	str	ip, [sp, #12]
   16614:	str	lr, [sp, #16]
   16618:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1661c:	cmp	r9, r0
   16620:	bhi	16684 <__assert_fail@plt+0x5770>
   16624:	add	r9, r0, #1
   16628:	movw	r3, #58480	; 0xe470
   1662c:	movt	r3, #2
   16630:	cmp	r5, r3
   16634:	str	r9, [r4]
   16638:	beq	16644 <__assert_fail@plt+0x5730>
   1663c:	mov	r0, r5
   16640:	bl	13a70 <__assert_fail@plt+0x2b5c>
   16644:	mov	r0, r9
   16648:	bl	17de0 <__assert_fail@plt+0x6ecc>
   1664c:	mov	r1, r9
   16650:	ldr	ip, [sp, #40]	; 0x28
   16654:	mov	r3, fp
   16658:	mov	r2, sl
   1665c:	mov	r5, r0
   16660:	ldr	r9, [sp, #80]	; 0x50
   16664:	ldr	lr, [sp, #84]	; 0x54
   16668:	str	r0, [r4, #4]
   1666c:	str	ip, [sp]
   16670:	str	r7, [sp, #4]
   16674:	str	r6, [sp, #8]
   16678:	str	r9, [sp, #12]
   1667c:	str	lr, [sp, #16]
   16680:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16684:	ldr	r3, [sp, #28]
   16688:	mov	r0, r5
   1668c:	str	r3, [r8]
   16690:	add	sp, sp, #92	; 0x5c
   16694:	ldrd	r4, [sp]
   16698:	ldrd	r6, [sp, #8]
   1669c:	ldrd	r8, [sp, #16]
   166a0:	ldrd	sl, [sp, #24]
   166a4:	add	sp, sp, #32
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	mov	r0, #8
   166b0:	mvn	r3, #-2147483648	; 0x80000000
   166b4:	add	r1, sp, #36	; 0x24
   166b8:	str	r0, [sp]
   166bc:	mov	r0, #0
   166c0:	bl	18084 <__assert_fail@plt+0x7170>
   166c4:	ldrd	r2, [r5, #8]
   166c8:	mov	r4, r0
   166cc:	str	r0, [r5]
   166d0:	strd	r2, [r0]
   166d4:	b	165b4 <__assert_fail@plt+0x56a0>
   166d8:	andeq	lr, r2, r0, ror r5
   166dc:	ldr	ip, [pc, #476]	; 168c0 <__assert_fail@plt+0x59ac>
   166e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166e4:	movw	r4, #49396	; 0xc0f4
   166e8:	movt	r4, #2
   166ec:	ldrd	r2, [ip, #8]
   166f0:	strd	r6, [sp, #8]
   166f4:	lsr	r7, r1, #5
   166f8:	mov	r6, r0
   166fc:	strd	r8, [sp, #16]
   16700:	str	lr, [sp, #32]
   16704:	and	lr, r1, #31
   16708:	ldrd	r0, [ip]
   1670c:	strd	sl, [sp, #24]
   16710:	sub	sp, sp, #84	; 0x54
   16714:	add	r5, sp, #40	; 0x28
   16718:	strd	r0, [sp, #32]
   1671c:	strd	r2, [sp, #40]	; 0x28
   16720:	ldrd	r0, [ip, #16]
   16724:	ldrd	r2, [ip, #24]
   16728:	strd	r0, [sp, #48]	; 0x30
   1672c:	ldrd	r0, [ip, #32]
   16730:	strd	r2, [sp, #56]	; 0x38
   16734:	ldrd	r2, [ip, #40]	; 0x28
   16738:	strd	r0, [sp, #64]	; 0x40
   1673c:	strd	r2, [sp, #72]	; 0x48
   16740:	ldr	r1, [r5, r7, lsl #2]
   16744:	mvn	r3, r1, lsr lr
   16748:	and	r3, r3, #1
   1674c:	eor	r1, r1, r3, lsl lr
   16750:	str	r1, [r5, r7, lsl #2]
   16754:	bl	10e54 <__errno_location@plt>
   16758:	mov	r9, r0
   1675c:	ldr	sl, [r0]
   16760:	ldr	r2, [r4, #4]
   16764:	ldr	r7, [r4]
   16768:	cmp	r2, #0
   1676c:	bgt	167c8 <__assert_fail@plt+0x58b4>
   16770:	add	r3, r4, #8
   16774:	str	r2, [sp, #28]
   16778:	rsb	r2, r2, #1
   1677c:	cmp	r7, r3
   16780:	beq	16894 <__assert_fail@plt+0x5980>
   16784:	mov	r1, #8
   16788:	mov	r0, r7
   1678c:	mvn	r3, #-2147483648	; 0x80000000
   16790:	str	r1, [sp]
   16794:	add	r1, sp, #28
   16798:	bl	18084 <__assert_fail@plt+0x7170>
   1679c:	mov	r7, r0
   167a0:	str	r0, [r4]
   167a4:	ldr	r0, [r4, #4]
   167a8:	mov	r1, #0
   167ac:	ldr	r2, [sp, #28]
   167b0:	sub	r2, r2, r0
   167b4:	add	r0, r7, r0, lsl #3
   167b8:	lsl	r2, r2, #3
   167bc:	bl	10e78 <memset@plt>
   167c0:	ldr	r3, [sp, #28]
   167c4:	str	r3, [r4, #4]
   167c8:	ldr	ip, [sp, #32]
   167cc:	mvn	r3, #0
   167d0:	mov	r2, r6
   167d4:	ldr	r8, [sp, #36]	; 0x24
   167d8:	ldr	fp, [r7]
   167dc:	ldr	r4, [r7, #4]
   167e0:	str	ip, [sp]
   167e4:	orr	r8, r8, #1
   167e8:	ldr	ip, [sp, #72]	; 0x48
   167ec:	mov	r1, fp
   167f0:	str	r8, [sp, #4]
   167f4:	ldr	lr, [sp, #76]	; 0x4c
   167f8:	mov	r0, r4
   167fc:	str	r5, [sp, #8]
   16800:	str	ip, [sp, #12]
   16804:	str	lr, [sp, #16]
   16808:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1680c:	cmp	fp, r0
   16810:	bhi	16870 <__assert_fail@plt+0x595c>
   16814:	add	fp, r0, #1
   16818:	movw	r3, #58480	; 0xe470
   1681c:	movt	r3, #2
   16820:	cmp	r4, r3
   16824:	str	fp, [r7]
   16828:	beq	16834 <__assert_fail@plt+0x5920>
   1682c:	mov	r0, r4
   16830:	bl	13a70 <__assert_fail@plt+0x2b5c>
   16834:	mov	r0, fp
   16838:	bl	17de0 <__assert_fail@plt+0x6ecc>
   1683c:	ldr	r3, [sp, #32]
   16840:	mov	r2, r6
   16844:	mov	r1, fp
   16848:	mov	r4, r0
   1684c:	ldr	lr, [sp, #72]	; 0x48
   16850:	ldr	ip, [sp, #76]	; 0x4c
   16854:	str	r0, [r7, #4]
   16858:	stm	sp, {r3, r8}
   1685c:	mvn	r3, #0
   16860:	str	r5, [sp, #8]
   16864:	str	lr, [sp, #12]
   16868:	str	ip, [sp, #16]
   1686c:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16870:	mov	r0, r4
   16874:	str	sl, [r9]
   16878:	add	sp, sp, #84	; 0x54
   1687c:	ldrd	r4, [sp]
   16880:	ldrd	r6, [sp, #8]
   16884:	ldrd	r8, [sp, #16]
   16888:	ldrd	sl, [sp, #24]
   1688c:	add	sp, sp, #32
   16890:	pop	{pc}		; (ldr pc, [sp], #4)
   16894:	mov	r0, #8
   16898:	mvn	r3, #-2147483648	; 0x80000000
   1689c:	add	r1, sp, #28
   168a0:	str	r0, [sp]
   168a4:	mov	r0, #0
   168a8:	bl	18084 <__assert_fail@plt+0x7170>
   168ac:	ldrd	r2, [r4, #8]
   168b0:	mov	r7, r0
   168b4:	str	r0, [r4]
   168b8:	strd	r2, [r0]
   168bc:	b	167a4 <__assert_fail@plt+0x5890>
   168c0:	andeq	lr, r2, r0, ror r5
   168c4:	ldr	ip, [pc, #472]	; 16aa4 <__assert_fail@plt+0x5b90>
   168c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168cc:	mov	r5, r0
   168d0:	movw	r4, #49396	; 0xc0f4
   168d4:	movt	r4, #2
   168d8:	ldrd	r2, [ip]
   168dc:	ldrd	r0, [ip, #8]
   168e0:	strd	r6, [sp, #8]
   168e4:	strd	r8, [sp, #16]
   168e8:	strd	sl, [sp, #24]
   168ec:	str	lr, [sp, #32]
   168f0:	sub	sp, sp, #84	; 0x54
   168f4:	strd	r2, [sp, #32]
   168f8:	strd	r0, [sp, #40]	; 0x28
   168fc:	ldr	r6, [sp, #44]	; 0x2c
   16900:	ldrd	r2, [ip, #16]
   16904:	ldrd	r0, [ip, #24]
   16908:	mvn	lr, r6
   1690c:	and	lr, lr, #67108864	; 0x4000000
   16910:	eor	lr, lr, r6
   16914:	ldrd	r6, [ip, #40]	; 0x28
   16918:	strd	r2, [sp, #48]	; 0x30
   1691c:	ldrd	r2, [ip, #32]
   16920:	str	lr, [sp, #44]	; 0x2c
   16924:	strd	r0, [sp, #56]	; 0x38
   16928:	strd	r2, [sp, #64]	; 0x40
   1692c:	strd	r6, [sp, #72]	; 0x48
   16930:	bl	10e54 <__errno_location@plt>
   16934:	mov	r8, r0
   16938:	ldr	r9, [r0]
   1693c:	ldr	r2, [r4, #4]
   16940:	ldr	r6, [r4]
   16944:	cmp	r2, #0
   16948:	bgt	169a4 <__assert_fail@plt+0x5a90>
   1694c:	add	r3, r4, #8
   16950:	str	r2, [sp, #28]
   16954:	rsb	r2, r2, #1
   16958:	cmp	r6, r3
   1695c:	beq	16a78 <__assert_fail@plt+0x5b64>
   16960:	mov	r1, #8
   16964:	mov	r0, r6
   16968:	mvn	r3, #-2147483648	; 0x80000000
   1696c:	str	r1, [sp]
   16970:	add	r1, sp, #28
   16974:	bl	18084 <__assert_fail@plt+0x7170>
   16978:	mov	r6, r0
   1697c:	str	r0, [r4]
   16980:	ldr	r0, [r4, #4]
   16984:	mov	r1, #0
   16988:	ldr	r2, [sp, #28]
   1698c:	sub	r2, r2, r0
   16990:	add	r0, r6, r0, lsl #3
   16994:	lsl	r2, r2, #3
   16998:	bl	10e78 <memset@plt>
   1699c:	ldr	r3, [sp, #28]
   169a0:	str	r3, [r4, #4]
   169a4:	ldr	sl, [r6]
   169a8:	add	r0, sp, #40	; 0x28
   169ac:	mvn	r3, #0
   169b0:	mov	r2, r5
   169b4:	ldr	r7, [sp, #36]	; 0x24
   169b8:	ldr	r4, [r6, #4]
   169bc:	mov	r1, sl
   169c0:	str	r0, [sp, #8]
   169c4:	ldr	lr, [sp, #32]
   169c8:	orr	r7, r7, #1
   169cc:	ldr	ip, [sp, #72]	; 0x48
   169d0:	mov	r0, r4
   169d4:	ldr	fp, [sp, #76]	; 0x4c
   169d8:	str	lr, [sp]
   169dc:	str	r7, [sp, #4]
   169e0:	str	ip, [sp, #12]
   169e4:	str	fp, [sp, #16]
   169e8:	bl	13cf4 <__assert_fail@plt+0x2de0>
   169ec:	cmp	sl, r0
   169f0:	bhi	16a54 <__assert_fail@plt+0x5b40>
   169f4:	add	sl, r0, #1
   169f8:	movw	r3, #58480	; 0xe470
   169fc:	movt	r3, #2
   16a00:	cmp	r4, r3
   16a04:	str	sl, [r6]
   16a08:	beq	16a14 <__assert_fail@plt+0x5b00>
   16a0c:	mov	r0, r4
   16a10:	bl	13a70 <__assert_fail@plt+0x2b5c>
   16a14:	mov	r0, sl
   16a18:	bl	17de0 <__assert_fail@plt+0x6ecc>
   16a1c:	ldr	r3, [sp, #32]
   16a20:	mov	r2, r5
   16a24:	add	r5, sp, #40	; 0x28
   16a28:	mov	r1, sl
   16a2c:	mov	r4, r0
   16a30:	ldr	lr, [sp, #72]	; 0x48
   16a34:	ldr	ip, [sp, #76]	; 0x4c
   16a38:	str	r0, [r6, #4]
   16a3c:	stm	sp, {r3, r7}
   16a40:	mvn	r3, #0
   16a44:	str	r5, [sp, #8]
   16a48:	str	lr, [sp, #12]
   16a4c:	str	ip, [sp, #16]
   16a50:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16a54:	mov	r0, r4
   16a58:	str	r9, [r8]
   16a5c:	add	sp, sp, #84	; 0x54
   16a60:	ldrd	r4, [sp]
   16a64:	ldrd	r6, [sp, #8]
   16a68:	ldrd	r8, [sp, #16]
   16a6c:	ldrd	sl, [sp, #24]
   16a70:	add	sp, sp, #32
   16a74:	pop	{pc}		; (ldr pc, [sp], #4)
   16a78:	mov	r0, #8
   16a7c:	mvn	r3, #-2147483648	; 0x80000000
   16a80:	add	r1, sp, #28
   16a84:	str	r0, [sp]
   16a88:	mov	r0, #0
   16a8c:	bl	18084 <__assert_fail@plt+0x7170>
   16a90:	ldrd	r2, [r4, #8]
   16a94:	mov	r6, r0
   16a98:	str	r0, [r4]
   16a9c:	strd	r2, [r0]
   16aa0:	b	16980 <__assert_fail@plt+0x5a6c>
   16aa4:	andeq	lr, r2, r0, ror r5
   16aa8:	ldr	ip, [pc, #480]	; 16c90 <__assert_fail@plt+0x5d7c>
   16aac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16ab0:	mov	r5, r0
   16ab4:	movw	r4, #49396	; 0xc0f4
   16ab8:	movt	r4, #2
   16abc:	ldrd	r2, [ip]
   16ac0:	strd	r6, [sp, #8]
   16ac4:	mov	r6, r1
   16ac8:	ldrd	r0, [ip, #8]
   16acc:	strd	r8, [sp, #16]
   16ad0:	strd	sl, [sp, #24]
   16ad4:	str	lr, [sp, #32]
   16ad8:	sub	sp, sp, #84	; 0x54
   16adc:	ldrd	r8, [ip, #40]	; 0x28
   16ae0:	strd	r2, [sp, #32]
   16ae4:	strd	r0, [sp, #40]	; 0x28
   16ae8:	ldrd	r2, [ip, #16]
   16aec:	ldr	r7, [sp, #44]	; 0x2c
   16af0:	ldrd	r0, [ip, #24]
   16af4:	strd	r2, [sp, #48]	; 0x30
   16af8:	ldrd	r2, [ip, #32]
   16afc:	mvn	lr, r7
   16b00:	and	lr, lr, #67108864	; 0x4000000
   16b04:	eor	lr, lr, r7
   16b08:	str	lr, [sp, #44]	; 0x2c
   16b0c:	strd	r0, [sp, #56]	; 0x38
   16b10:	strd	r2, [sp, #64]	; 0x40
   16b14:	strd	r8, [sp, #72]	; 0x48
   16b18:	bl	10e54 <__errno_location@plt>
   16b1c:	mov	r9, r0
   16b20:	ldr	sl, [r0]
   16b24:	ldr	r2, [r4, #4]
   16b28:	ldr	r7, [r4]
   16b2c:	cmp	r2, #0
   16b30:	bgt	16b8c <__assert_fail@plt+0x5c78>
   16b34:	add	r3, r4, #8
   16b38:	str	r2, [sp, #28]
   16b3c:	rsb	r2, r2, #1
   16b40:	cmp	r7, r3
   16b44:	beq	16c64 <__assert_fail@plt+0x5d50>
   16b48:	mov	r1, #8
   16b4c:	mov	r0, r7
   16b50:	mvn	r3, #-2147483648	; 0x80000000
   16b54:	str	r1, [sp]
   16b58:	add	r1, sp, #28
   16b5c:	bl	18084 <__assert_fail@plt+0x7170>
   16b60:	mov	r7, r0
   16b64:	str	r0, [r4]
   16b68:	ldr	r0, [r4, #4]
   16b6c:	mov	r1, #0
   16b70:	ldr	r2, [sp, #28]
   16b74:	sub	r2, r2, r0
   16b78:	add	r0, r7, r0, lsl #3
   16b7c:	lsl	r2, r2, #3
   16b80:	bl	10e78 <memset@plt>
   16b84:	ldr	r3, [sp, #28]
   16b88:	str	r3, [r4, #4]
   16b8c:	ldr	ip, [sp, #32]
   16b90:	add	r0, sp, #40	; 0x28
   16b94:	mov	r3, r6
   16b98:	mov	r2, r5
   16b9c:	ldr	r8, [sp, #36]	; 0x24
   16ba0:	ldr	fp, [r7]
   16ba4:	ldr	r4, [r7, #4]
   16ba8:	str	ip, [sp]
   16bac:	orr	r8, r8, #1
   16bb0:	ldr	ip, [sp, #72]	; 0x48
   16bb4:	mov	r1, fp
   16bb8:	str	r8, [sp, #4]
   16bbc:	ldr	lr, [sp, #76]	; 0x4c
   16bc0:	str	r0, [sp, #8]
   16bc4:	mov	r0, r4
   16bc8:	str	ip, [sp, #12]
   16bcc:	str	lr, [sp, #16]
   16bd0:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16bd4:	cmp	fp, r0
   16bd8:	bhi	16c40 <__assert_fail@plt+0x5d2c>
   16bdc:	add	fp, r0, #1
   16be0:	movw	r3, #58480	; 0xe470
   16be4:	movt	r3, #2
   16be8:	cmp	r4, r3
   16bec:	str	fp, [r7]
   16bf0:	beq	16bfc <__assert_fail@plt+0x5ce8>
   16bf4:	mov	r0, r4
   16bf8:	bl	13a70 <__assert_fail@plt+0x2b5c>
   16bfc:	mov	r0, fp
   16c00:	bl	17de0 <__assert_fail@plt+0x6ecc>
   16c04:	ldr	lr, [sp, #32]
   16c08:	mov	r2, r5
   16c0c:	mov	r3, r6
   16c10:	mov	r1, fp
   16c14:	mov	r4, r0
   16c18:	ldr	r5, [sp, #72]	; 0x48
   16c1c:	ldr	ip, [sp, #76]	; 0x4c
   16c20:	str	r0, [r7, #4]
   16c24:	str	lr, [sp]
   16c28:	add	lr, sp, #40	; 0x28
   16c2c:	str	r8, [sp, #4]
   16c30:	str	lr, [sp, #8]
   16c34:	str	r5, [sp, #12]
   16c38:	str	ip, [sp, #16]
   16c3c:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16c40:	mov	r0, r4
   16c44:	str	sl, [r9]
   16c48:	add	sp, sp, #84	; 0x54
   16c4c:	ldrd	r4, [sp]
   16c50:	ldrd	r6, [sp, #8]
   16c54:	ldrd	r8, [sp, #16]
   16c58:	ldrd	sl, [sp, #24]
   16c5c:	add	sp, sp, #32
   16c60:	pop	{pc}		; (ldr pc, [sp], #4)
   16c64:	mov	r0, #8
   16c68:	mvn	r3, #-2147483648	; 0x80000000
   16c6c:	add	r1, sp, #28
   16c70:	str	r0, [sp]
   16c74:	mov	r0, #0
   16c78:	bl	18084 <__assert_fail@plt+0x7170>
   16c7c:	ldrd	r2, [r4, #8]
   16c80:	mov	r7, r0
   16c84:	str	r0, [r4]
   16c88:	strd	r2, [r0]
   16c8c:	b	16b68 <__assert_fail@plt+0x5c54>
   16c90:	andeq	lr, r2, r0, ror r5
   16c94:	strd	r4, [sp, #-12]!
   16c98:	mov	r4, #0
   16c9c:	mov	r5, #0
   16ca0:	str	lr, [sp, #8]
   16ca4:	sub	sp, sp, #100	; 0x64
   16ca8:	cmp	r1, #10
   16cac:	strd	r4, [sp]
   16cb0:	strd	r4, [sp, #8]
   16cb4:	strd	r4, [sp, #16]
   16cb8:	strd	r4, [sp, #24]
   16cbc:	strd	r4, [sp, #32]
   16cc0:	strd	r4, [sp, #40]	; 0x28
   16cc4:	beq	16cf4 <__assert_fail@plt+0x5de0>
   16cc8:	mov	ip, #67108864	; 0x4000000
   16ccc:	mov	r3, sp
   16cd0:	str	r1, [sp]
   16cd4:	mov	r1, r2
   16cd8:	mvn	r2, #0
   16cdc:	str	ip, [sp, #12]
   16ce0:	bl	156e0 <__assert_fail@plt+0x47cc>
   16ce4:	add	sp, sp, #100	; 0x64
   16ce8:	ldrd	r4, [sp]
   16cec:	add	sp, sp, #8
   16cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf4:	bl	10efc <abort@plt>
   16cf8:	ldr	ip, [pc, #156]	; 16d9c <__assert_fail@plt+0x5e88>
   16cfc:	cmp	r2, #0
   16d00:	cmpne	r1, #0
   16d04:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16d08:	strd	r6, [sp, #8]
   16d0c:	mov	r6, r2
   16d10:	str	r8, [sp, #16]
   16d14:	mov	r8, r3
   16d18:	strd	sl, [sp, #20]
   16d1c:	ldrd	r4, [ip]
   16d20:	str	lr, [sp, #28]
   16d24:	sub	sp, sp, #48	; 0x30
   16d28:	mov	lr, #10
   16d2c:	ldrd	r2, [ip, #8]
   16d30:	ldrd	sl, [ip, #16]
   16d34:	strd	r4, [sp]
   16d38:	ldrd	r4, [ip, #32]
   16d3c:	str	lr, [sp]
   16d40:	strd	r2, [sp, #8]
   16d44:	strd	sl, [sp, #16]
   16d48:	ldrd	r2, [ip, #24]
   16d4c:	ldrd	sl, [ip, #40]	; 0x28
   16d50:	strd	r2, [sp, #24]
   16d54:	strd	r4, [sp, #32]
   16d58:	strd	sl, [sp, #40]	; 0x28
   16d5c:	beq	16d98 <__assert_fail@plt+0x5e84>
   16d60:	mov	r7, r1
   16d64:	mov	r3, sp
   16d68:	mov	r1, r8
   16d6c:	mvn	r2, #0
   16d70:	str	r7, [sp, #40]	; 0x28
   16d74:	str	r6, [sp, #44]	; 0x2c
   16d78:	bl	156e0 <__assert_fail@plt+0x47cc>
   16d7c:	add	sp, sp, #48	; 0x30
   16d80:	ldrd	r4, [sp]
   16d84:	ldrd	r6, [sp, #8]
   16d88:	ldr	r8, [sp, #16]
   16d8c:	ldrd	sl, [sp, #20]
   16d90:	add	sp, sp, #28
   16d94:	pop	{pc}		; (ldr pc, [sp], #4)
   16d98:	bl	10efc <abort@plt>
   16d9c:	andeq	lr, r2, r0, ror r5
   16da0:	ldr	ip, [pc, #156]	; 16e44 <__assert_fail@plt+0x5f30>
   16da4:	cmp	r2, #0
   16da8:	cmpne	r1, #0
   16dac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16db0:	strd	r6, [sp, #8]
   16db4:	mov	r6, r2
   16db8:	str	r8, [sp, #16]
   16dbc:	mov	r8, r3
   16dc0:	strd	sl, [sp, #20]
   16dc4:	ldrd	r4, [ip]
   16dc8:	str	lr, [sp, #28]
   16dcc:	sub	sp, sp, #48	; 0x30
   16dd0:	mov	lr, #10
   16dd4:	ldrd	r2, [ip, #8]
   16dd8:	ldrd	sl, [ip, #16]
   16ddc:	strd	r4, [sp]
   16de0:	ldrd	r4, [ip, #32]
   16de4:	str	lr, [sp]
   16de8:	strd	r2, [sp, #8]
   16dec:	strd	sl, [sp, #16]
   16df0:	ldrd	r2, [ip, #24]
   16df4:	ldrd	sl, [ip, #40]	; 0x28
   16df8:	strd	r2, [sp, #24]
   16dfc:	strd	r4, [sp, #32]
   16e00:	strd	sl, [sp, #40]	; 0x28
   16e04:	beq	16e40 <__assert_fail@plt+0x5f2c>
   16e08:	ldr	r2, [sp, #80]	; 0x50
   16e0c:	mov	r7, r1
   16e10:	mov	r3, sp
   16e14:	mov	r1, r8
   16e18:	str	r7, [sp, #40]	; 0x28
   16e1c:	str	r6, [sp, #44]	; 0x2c
   16e20:	bl	156e0 <__assert_fail@plt+0x47cc>
   16e24:	add	sp, sp, #48	; 0x30
   16e28:	ldrd	r4, [sp]
   16e2c:	ldrd	r6, [sp, #8]
   16e30:	ldr	r8, [sp, #16]
   16e34:	ldrd	sl, [sp, #20]
   16e38:	add	sp, sp, #28
   16e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e40:	bl	10efc <abort@plt>
   16e44:	andeq	lr, r2, r0, ror r5
   16e48:	ldr	ip, [pc, #512]	; 17050 <__assert_fail@plt+0x613c>
   16e4c:	cmp	r0, #0
   16e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e54:	ldrd	r4, [ip, #16]
   16e58:	strd	r6, [sp, #8]
   16e5c:	clz	r6, r1
   16e60:	mov	r7, r1
   16e64:	strd	r8, [sp, #16]
   16e68:	mov	r8, r0
   16e6c:	lsr	r6, r6, #5
   16e70:	strd	sl, [sp, #24]
   16e74:	mov	fp, r2
   16e78:	mov	sl, #10
   16e7c:	ldrd	r2, [ip]
   16e80:	moveq	r6, #1
   16e84:	str	lr, [sp, #32]
   16e88:	sub	sp, sp, #92	; 0x5c
   16e8c:	cmp	r6, #0
   16e90:	ldrd	r0, [ip, #8]
   16e94:	strd	r2, [sp, #40]	; 0x28
   16e98:	strd	r4, [sp, #56]	; 0x38
   16e9c:	ldrd	r2, [ip, #24]
   16ea0:	strd	r0, [sp, #48]	; 0x30
   16ea4:	ldrd	r0, [ip, #32]
   16ea8:	str	sl, [sp, #40]	; 0x28
   16eac:	ldrd	r4, [ip, #40]	; 0x28
   16eb0:	strd	r2, [sp, #64]	; 0x40
   16eb4:	strd	r0, [sp, #72]	; 0x48
   16eb8:	strd	r4, [sp, #80]	; 0x50
   16ebc:	bne	1704c <__assert_fail@plt+0x6138>
   16ec0:	movw	r5, #49396	; 0xc0f4
   16ec4:	movt	r5, #2
   16ec8:	str	r8, [sp, #80]	; 0x50
   16ecc:	str	r7, [sp, #84]	; 0x54
   16ed0:	bl	10e54 <__errno_location@plt>
   16ed4:	ldr	r3, [r0]
   16ed8:	mov	r9, r0
   16edc:	ldr	r2, [r5, #4]
   16ee0:	ldr	r4, [r5]
   16ee4:	str	r3, [sp, #28]
   16ee8:	cmp	r2, #0
   16eec:	movgt	r1, sl
   16ef0:	bgt	16f58 <__assert_fail@plt+0x6044>
   16ef4:	add	r3, r5, #8
   16ef8:	str	r2, [sp, #36]	; 0x24
   16efc:	rsb	r2, r2, #1
   16f00:	cmp	r4, r3
   16f04:	beq	17020 <__assert_fail@plt+0x610c>
   16f08:	mov	r1, #8
   16f0c:	mov	r0, r4
   16f10:	mvn	r3, #-2147483648	; 0x80000000
   16f14:	str	r1, [sp]
   16f18:	add	r1, sp, #36	; 0x24
   16f1c:	bl	18084 <__assert_fail@plt+0x7170>
   16f20:	mov	r4, r0
   16f24:	str	r0, [r5]
   16f28:	ldr	r0, [r5, #4]
   16f2c:	mov	r1, #0
   16f30:	ldr	r2, [sp, #36]	; 0x24
   16f34:	sub	r2, r2, r0
   16f38:	add	r0, r4, r0, lsl #3
   16f3c:	lsl	r2, r2, #3
   16f40:	bl	10e78 <memset@plt>
   16f44:	ldr	r3, [sp, #36]	; 0x24
   16f48:	ldr	r1, [sp, #40]	; 0x28
   16f4c:	ldr	r8, [sp, #80]	; 0x50
   16f50:	str	r3, [r5, #4]
   16f54:	ldr	r7, [sp, #84]	; 0x54
   16f58:	mvn	r3, #0
   16f5c:	mov	r2, fp
   16f60:	ldr	r6, [sp, #44]	; 0x2c
   16f64:	ldr	sl, [r4]
   16f68:	ldr	r5, [r4, #4]
   16f6c:	orr	r6, r6, #1
   16f70:	stm	sp, {r1, r6}
   16f74:	add	r1, sp, #48	; 0x30
   16f78:	str	r8, [sp, #12]
   16f7c:	mov	r0, r5
   16f80:	str	r1, [sp, #8]
   16f84:	mov	r1, sl
   16f88:	str	r7, [sp, #16]
   16f8c:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16f90:	cmp	sl, r0
   16f94:	bhi	16ff8 <__assert_fail@plt+0x60e4>
   16f98:	add	r7, r0, #1
   16f9c:	movw	r3, #58480	; 0xe470
   16fa0:	movt	r3, #2
   16fa4:	cmp	r5, r3
   16fa8:	str	r7, [r4]
   16fac:	beq	16fb8 <__assert_fail@plt+0x60a4>
   16fb0:	mov	r0, r5
   16fb4:	bl	13a70 <__assert_fail@plt+0x2b5c>
   16fb8:	mov	r0, r7
   16fbc:	bl	17de0 <__assert_fail@plt+0x6ecc>
   16fc0:	ldr	r3, [sp, #40]	; 0x28
   16fc4:	mov	r2, fp
   16fc8:	mov	r1, r7
   16fcc:	mov	r5, r0
   16fd0:	ldr	lr, [sp, #80]	; 0x50
   16fd4:	ldr	ip, [sp, #84]	; 0x54
   16fd8:	str	r0, [r4, #4]
   16fdc:	add	r4, sp, #48	; 0x30
   16fe0:	stm	sp, {r3, r6}
   16fe4:	mvn	r3, #0
   16fe8:	str	r4, [sp, #8]
   16fec:	str	lr, [sp, #12]
   16ff0:	str	ip, [sp, #16]
   16ff4:	bl	13cf4 <__assert_fail@plt+0x2de0>
   16ff8:	ldr	r3, [sp, #28]
   16ffc:	mov	r0, r5
   17000:	str	r3, [r9]
   17004:	add	sp, sp, #92	; 0x5c
   17008:	ldrd	r4, [sp]
   1700c:	ldrd	r6, [sp, #8]
   17010:	ldrd	r8, [sp, #16]
   17014:	ldrd	sl, [sp, #24]
   17018:	add	sp, sp, #32
   1701c:	pop	{pc}		; (ldr pc, [sp], #4)
   17020:	mov	r1, #8
   17024:	mvn	r3, #-2147483648	; 0x80000000
   17028:	mov	r0, r6
   1702c:	str	r1, [sp]
   17030:	add	r1, sp, #36	; 0x24
   17034:	bl	18084 <__assert_fail@plt+0x7170>
   17038:	ldrd	r2, [r5, #8]
   1703c:	mov	r4, r0
   17040:	str	r0, [r5]
   17044:	strd	r2, [r0]
   17048:	b	16f28 <__assert_fail@plt+0x6014>
   1704c:	bl	10efc <abort@plt>
   17050:	andeq	lr, r2, r0, ror r5
   17054:	ldr	ip, [pc, #536]	; 17274 <__assert_fail@plt+0x6360>
   17058:	cmp	r0, #0
   1705c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17060:	ldrd	r4, [ip, #16]
   17064:	strd	r6, [sp, #8]
   17068:	mov	r6, r1
   1706c:	mov	r7, r0
   17070:	strd	r8, [sp, #16]
   17074:	mov	r9, #10
   17078:	strd	sl, [sp, #24]
   1707c:	mov	sl, r2
   17080:	mov	fp, r3
   17084:	str	lr, [sp, #32]
   17088:	clz	lr, r1
   1708c:	sub	sp, sp, #92	; 0x5c
   17090:	ldrd	r2, [ip]
   17094:	lsr	lr, lr, #5
   17098:	moveq	lr, #1
   1709c:	ldrd	r0, [ip, #8]
   170a0:	cmp	lr, #0
   170a4:	strd	r4, [sp, #56]	; 0x38
   170a8:	ldrd	r4, [ip, #40]	; 0x28
   170ac:	str	lr, [sp, #28]
   170b0:	strd	r2, [sp, #40]	; 0x28
   170b4:	ldrd	r2, [ip, #24]
   170b8:	strd	r0, [sp, #48]	; 0x30
   170bc:	ldrd	r0, [ip, #32]
   170c0:	str	r9, [sp, #40]	; 0x28
   170c4:	strd	r2, [sp, #64]	; 0x40
   170c8:	strd	r4, [sp, #80]	; 0x50
   170cc:	strd	r0, [sp, #72]	; 0x48
   170d0:	bne	17270 <__assert_fail@plt+0x635c>
   170d4:	movw	r5, #49396	; 0xc0f4
   170d8:	movt	r5, #2
   170dc:	str	r7, [sp, #80]	; 0x50
   170e0:	str	r6, [sp, #84]	; 0x54
   170e4:	bl	10e54 <__errno_location@plt>
   170e8:	ldr	r3, [r0]
   170ec:	mov	r8, r0
   170f0:	ldr	r2, [r5, #4]
   170f4:	ldr	r4, [r5]
   170f8:	str	r3, [sp, #24]
   170fc:	cmp	r2, #0
   17100:	movgt	r1, r9
   17104:	bgt	1716c <__assert_fail@plt+0x6258>
   17108:	add	r3, r5, #8
   1710c:	str	r2, [sp, #36]	; 0x24
   17110:	rsb	r2, r2, #1
   17114:	cmp	r4, r3
   17118:	beq	17244 <__assert_fail@plt+0x6330>
   1711c:	mov	r1, #8
   17120:	mov	r0, r4
   17124:	mvn	r3, #-2147483648	; 0x80000000
   17128:	str	r1, [sp]
   1712c:	add	r1, sp, #36	; 0x24
   17130:	bl	18084 <__assert_fail@plt+0x7170>
   17134:	mov	r4, r0
   17138:	str	r0, [r5]
   1713c:	ldr	r0, [r5, #4]
   17140:	mov	r1, #0
   17144:	ldr	r2, [sp, #36]	; 0x24
   17148:	sub	r2, r2, r0
   1714c:	add	r0, r4, r0, lsl #3
   17150:	lsl	r2, r2, #3
   17154:	bl	10e78 <memset@plt>
   17158:	ldr	r3, [sp, #36]	; 0x24
   1715c:	ldr	r1, [sp, #40]	; 0x28
   17160:	ldr	r7, [sp, #80]	; 0x50
   17164:	str	r3, [r5, #4]
   17168:	ldr	r6, [sp, #84]	; 0x54
   1716c:	mov	r3, fp
   17170:	mov	r2, sl
   17174:	ldr	r0, [sp, #44]	; 0x2c
   17178:	ldr	r9, [r4]
   1717c:	ldr	r5, [r4, #4]
   17180:	orr	r0, r0, #1
   17184:	str	r1, [sp]
   17188:	add	r1, sp, #48	; 0x30
   1718c:	str	r0, [sp, #4]
   17190:	str	r1, [sp, #8]
   17194:	mov	r1, r9
   17198:	str	r7, [sp, #12]
   1719c:	str	r6, [sp, #16]
   171a0:	str	r0, [sp, #28]
   171a4:	mov	r0, r5
   171a8:	bl	13cf4 <__assert_fail@plt+0x2de0>
   171ac:	cmp	r9, r0
   171b0:	bhi	1721c <__assert_fail@plt+0x6308>
   171b4:	add	r6, r0, #1
   171b8:	movw	r3, #58480	; 0xe470
   171bc:	movt	r3, #2
   171c0:	cmp	r5, r3
   171c4:	str	r6, [r4]
   171c8:	beq	171d4 <__assert_fail@plt+0x62c0>
   171cc:	mov	r0, r5
   171d0:	bl	13a70 <__assert_fail@plt+0x2b5c>
   171d4:	mov	r0, r6
   171d8:	bl	17de0 <__assert_fail@plt+0x6ecc>
   171dc:	ldr	lr, [sp, #40]	; 0x28
   171e0:	mov	r1, r6
   171e4:	mov	r3, fp
   171e8:	mov	r2, sl
   171ec:	mov	r5, r0
   171f0:	ldr	r6, [sp, #80]	; 0x50
   171f4:	ldr	ip, [sp, #84]	; 0x54
   171f8:	str	r0, [r4, #4]
   171fc:	str	lr, [sp]
   17200:	ldr	lr, [sp, #28]
   17204:	str	lr, [sp, #4]
   17208:	add	lr, sp, #48	; 0x30
   1720c:	str	r6, [sp, #12]
   17210:	str	lr, [sp, #8]
   17214:	str	ip, [sp, #16]
   17218:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1721c:	ldr	r3, [sp, #24]
   17220:	mov	r0, r5
   17224:	str	r3, [r8]
   17228:	add	sp, sp, #92	; 0x5c
   1722c:	ldrd	r4, [sp]
   17230:	ldrd	r6, [sp, #8]
   17234:	ldrd	r8, [sp, #16]
   17238:	ldrd	sl, [sp, #24]
   1723c:	add	sp, sp, #32
   17240:	pop	{pc}		; (ldr pc, [sp], #4)
   17244:	mov	r1, #8
   17248:	mvn	r3, #-2147483648	; 0x80000000
   1724c:	ldr	r0, [sp, #28]
   17250:	str	r1, [sp]
   17254:	add	r1, sp, #36	; 0x24
   17258:	bl	18084 <__assert_fail@plt+0x7170>
   1725c:	ldrd	r2, [r5, #8]
   17260:	mov	r4, r0
   17264:	str	r0, [r5]
   17268:	strd	r2, [r0]
   1726c:	b	1713c <__assert_fail@plt+0x6228>
   17270:	bl	10efc <abort@plt>
   17274:	andeq	lr, r2, r0, ror r5
   17278:	ldr	r3, [pc]	; 17280 <__assert_fail@plt+0x636c>
   1727c:	b	156e0 <__assert_fail@plt+0x47cc>
   17280:	andeq	ip, r2, r4, lsl #2
   17284:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17288:	movw	r4, #49396	; 0xc0f4
   1728c:	movt	r4, #2
   17290:	strd	r6, [sp, #8]
   17294:	strd	r8, [sp, #16]
   17298:	strd	sl, [sp, #24]
   1729c:	mov	sl, r0
   172a0:	mov	fp, r1
   172a4:	str	lr, [sp, #32]
   172a8:	sub	sp, sp, #44	; 0x2c
   172ac:	bl	10e54 <__errno_location@plt>
   172b0:	ldr	r3, [r0]
   172b4:	mov	r8, r0
   172b8:	ldr	r2, [r4, #4]
   172bc:	ldr	r5, [r4]
   172c0:	str	r3, [sp, #28]
   172c4:	cmp	r2, #0
   172c8:	bgt	17324 <__assert_fail@plt+0x6410>
   172cc:	add	r3, r4, #8
   172d0:	str	r2, [sp, #36]	; 0x24
   172d4:	rsb	r2, r2, #1
   172d8:	cmp	r5, r3
   172dc:	beq	17400 <__assert_fail@plt+0x64ec>
   172e0:	mov	r1, #8
   172e4:	mov	r0, r5
   172e8:	mvn	r3, #-2147483648	; 0x80000000
   172ec:	str	r1, [sp]
   172f0:	add	r1, sp, #36	; 0x24
   172f4:	bl	18084 <__assert_fail@plt+0x7170>
   172f8:	mov	r5, r0
   172fc:	str	r0, [r4]
   17300:	ldr	r0, [r4, #4]
   17304:	mov	r1, #0
   17308:	ldr	r2, [sp, #36]	; 0x24
   1730c:	sub	r2, r2, r0
   17310:	add	r0, r5, r0, lsl #3
   17314:	lsl	r2, r2, #3
   17318:	bl	10e78 <memset@plt>
   1731c:	ldr	r3, [sp, #36]	; 0x24
   17320:	str	r3, [r4, #4]
   17324:	ldr	ip, [r4, #16]
   17328:	mov	r3, fp
   1732c:	mov	r2, sl
   17330:	ldr	r7, [r4, #20]
   17334:	ldr	r0, [pc, #240]	; 1742c <__assert_fail@plt+0x6518>
   17338:	ldr	r9, [r5]
   1733c:	orr	r7, r7, #1
   17340:	ldr	r6, [r5, #4]
   17344:	str	ip, [sp]
   17348:	ldr	ip, [r4, #56]	; 0x38
   1734c:	mov	r1, r9
   17350:	str	r7, [sp, #4]
   17354:	ldr	lr, [r4, #60]	; 0x3c
   17358:	str	r0, [sp, #8]
   1735c:	mov	r0, r6
   17360:	str	ip, [sp, #12]
   17364:	str	lr, [sp, #16]
   17368:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1736c:	cmp	r9, r0
   17370:	bhi	173d8 <__assert_fail@plt+0x64c4>
   17374:	add	r9, r0, #1
   17378:	movw	r3, #58480	; 0xe470
   1737c:	movt	r3, #2
   17380:	cmp	r6, r3
   17384:	str	r9, [r5]
   17388:	beq	17394 <__assert_fail@plt+0x6480>
   1738c:	mov	r0, r6
   17390:	bl	13a70 <__assert_fail@plt+0x2b5c>
   17394:	mov	r0, r9
   17398:	bl	17de0 <__assert_fail@plt+0x6ecc>
   1739c:	ldr	ip, [r4, #16]
   173a0:	mov	r1, r9
   173a4:	mov	r3, fp
   173a8:	mov	r2, sl
   173ac:	mov	r6, r0
   173b0:	ldr	r9, [r4, #56]	; 0x38
   173b4:	ldr	lr, [r4, #60]	; 0x3c
   173b8:	str	r0, [r5, #4]
   173bc:	str	ip, [sp]
   173c0:	ldr	ip, [pc, #100]	; 1742c <__assert_fail@plt+0x6518>
   173c4:	str	r7, [sp, #4]
   173c8:	str	ip, [sp, #8]
   173cc:	str	r9, [sp, #12]
   173d0:	str	lr, [sp, #16]
   173d4:	bl	13cf4 <__assert_fail@plt+0x2de0>
   173d8:	ldr	r3, [sp, #28]
   173dc:	mov	r0, r6
   173e0:	str	r3, [r8]
   173e4:	add	sp, sp, #44	; 0x2c
   173e8:	ldrd	r4, [sp]
   173ec:	ldrd	r6, [sp, #8]
   173f0:	ldrd	r8, [sp, #16]
   173f4:	ldrd	sl, [sp, #24]
   173f8:	add	sp, sp, #32
   173fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17400:	mov	r0, #8
   17404:	mvn	r3, #-2147483648	; 0x80000000
   17408:	add	r1, sp, #36	; 0x24
   1740c:	str	r0, [sp]
   17410:	mov	r0, #0
   17414:	bl	18084 <__assert_fail@plt+0x7170>
   17418:	ldrd	r2, [r4, #8]
   1741c:	mov	r5, r0
   17420:	str	r0, [r4]
   17424:	strd	r2, [r0]
   17428:	b	17300 <__assert_fail@plt+0x63ec>
   1742c:	andeq	ip, r2, ip, lsl #2
   17430:	ldr	r3, [pc, #4]	; 1743c <__assert_fail@plt+0x6528>
   17434:	mvn	r2, #0
   17438:	b	156e0 <__assert_fail@plt+0x47cc>
   1743c:	andeq	ip, r2, r4, lsl #2
   17440:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17444:	movw	r4, #49396	; 0xc0f4
   17448:	movt	r4, #2
   1744c:	strd	r6, [sp, #8]
   17450:	strd	r8, [sp, #16]
   17454:	strd	sl, [sp, #24]
   17458:	mov	sl, r0
   1745c:	str	lr, [sp, #32]
   17460:	sub	sp, sp, #44	; 0x2c
   17464:	bl	10e54 <__errno_location@plt>
   17468:	ldr	r3, [r0]
   1746c:	mov	r8, r0
   17470:	ldr	r2, [r4, #4]
   17474:	ldr	r5, [r4]
   17478:	str	r3, [sp, #28]
   1747c:	cmp	r2, #0
   17480:	bgt	174dc <__assert_fail@plt+0x65c8>
   17484:	add	r3, r4, #8
   17488:	str	r2, [sp, #36]	; 0x24
   1748c:	rsb	r2, r2, #1
   17490:	cmp	r5, r3
   17494:	beq	175a4 <__assert_fail@plt+0x6690>
   17498:	mov	r1, #8
   1749c:	mov	r0, r5
   174a0:	mvn	r3, #-2147483648	; 0x80000000
   174a4:	str	r1, [sp]
   174a8:	add	r1, sp, #36	; 0x24
   174ac:	bl	18084 <__assert_fail@plt+0x7170>
   174b0:	mov	r5, r0
   174b4:	str	r0, [r4]
   174b8:	ldr	r0, [r4, #4]
   174bc:	mov	r1, #0
   174c0:	ldr	r2, [sp, #36]	; 0x24
   174c4:	sub	r2, r2, r0
   174c8:	add	r0, r5, r0, lsl #3
   174cc:	lsl	r2, r2, #3
   174d0:	bl	10e78 <memset@plt>
   174d4:	ldr	r3, [sp, #36]	; 0x24
   174d8:	str	r3, [r4, #4]
   174dc:	ldr	ip, [r4, #16]
   174e0:	mvn	r3, #0
   174e4:	mov	r2, sl
   174e8:	ldr	r7, [r4, #20]
   174ec:	ldr	fp, [pc, #220]	; 175d0 <__assert_fail@plt+0x66bc>
   174f0:	ldr	r9, [r5]
   174f4:	orr	r7, r7, #1
   174f8:	ldr	r6, [r5, #4]
   174fc:	str	ip, [sp]
   17500:	ldr	ip, [r4, #56]	; 0x38
   17504:	mov	r1, r9
   17508:	stmib	sp, {r7, fp}
   1750c:	ldr	lr, [r4, #60]	; 0x3c
   17510:	mov	r0, r6
   17514:	str	ip, [sp, #12]
   17518:	str	lr, [sp, #16]
   1751c:	bl	13cf4 <__assert_fail@plt+0x2de0>
   17520:	cmp	r9, r0
   17524:	bhi	1757c <__assert_fail@plt+0x6668>
   17528:	add	r9, r0, #1
   1752c:	movw	r3, #58480	; 0xe470
   17530:	movt	r3, #2
   17534:	cmp	r6, r3
   17538:	str	r9, [r5]
   1753c:	beq	17548 <__assert_fail@plt+0x6634>
   17540:	mov	r0, r6
   17544:	bl	13a70 <__assert_fail@plt+0x2b5c>
   17548:	mov	r0, r9
   1754c:	bl	17de0 <__assert_fail@plt+0x6ecc>
   17550:	ldr	r3, [r4, #16]
   17554:	mov	r2, sl
   17558:	mov	r1, r9
   1755c:	mov	r6, r0
   17560:	ldr	lr, [r4, #56]	; 0x38
   17564:	ldr	ip, [r4, #60]	; 0x3c
   17568:	str	r0, [r5, #4]
   1756c:	stm	sp, {r3, r7, fp, lr}
   17570:	mvn	r3, #0
   17574:	str	ip, [sp, #16]
   17578:	bl	13cf4 <__assert_fail@plt+0x2de0>
   1757c:	ldr	r3, [sp, #28]
   17580:	mov	r0, r6
   17584:	str	r3, [r8]
   17588:	add	sp, sp, #44	; 0x2c
   1758c:	ldrd	r4, [sp]
   17590:	ldrd	r6, [sp, #8]
   17594:	ldrd	r8, [sp, #16]
   17598:	ldrd	sl, [sp, #24]
   1759c:	add	sp, sp, #32
   175a0:	pop	{pc}		; (ldr pc, [sp], #4)
   175a4:	mov	r0, #8
   175a8:	mvn	r3, #-2147483648	; 0x80000000
   175ac:	add	r1, sp, #36	; 0x24
   175b0:	str	r0, [sp]
   175b4:	mov	r0, #0
   175b8:	bl	18084 <__assert_fail@plt+0x7170>
   175bc:	ldrd	r2, [r4, #8]
   175c0:	mov	r5, r0
   175c4:	str	r0, [r4]
   175c8:	strd	r2, [r0]
   175cc:	b	174b8 <__assert_fail@plt+0x65a4>
   175d0:	andeq	ip, r2, ip, lsl #2
   175d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   175d8:	mov	r5, #0
   175dc:	movt	r5, #32752	; 0x7ff0
   175e0:	mov	r4, r2
   175e4:	strd	r6, [sp, #8]
   175e8:	mov	r7, r1
   175ec:	str	r8, [sp, #16]
   175f0:	mov	r8, r0
   175f4:	str	lr, [sp, #20]
   175f8:	mov	r2, r4
   175fc:	mov	r1, r7
   17600:	mov	r0, r8
   17604:	bl	10cd4 <read@plt>
   17608:	subs	r6, r0, #0
   1760c:	bge	17640 <__assert_fail@plt+0x672c>
   17610:	bl	10e54 <__errno_location@plt>
   17614:	ldr	r3, [r0]
   17618:	cmp	r3, #4
   1761c:	beq	175f8 <__assert_fail@plt+0x66e4>
   17620:	cmp	r4, r5
   17624:	mov	r4, r5
   17628:	movls	r2, #0
   1762c:	movhi	r2, #1
   17630:	cmp	r3, #22
   17634:	movne	r2, #0
   17638:	cmp	r2, #0
   1763c:	bne	175f8 <__assert_fail@plt+0x66e4>
   17640:	mov	r0, r6
   17644:	ldrd	r4, [sp]
   17648:	ldrd	r6, [sp, #8]
   1764c:	ldr	r8, [sp, #16]
   17650:	add	sp, sp, #20
   17654:	pop	{pc}		; (ldr pc, [sp], #4)
   17658:	cmp	r1, #0
   1765c:	strd	r4, [sp, #-16]!
   17660:	mov	ip, r3
   17664:	str	r6, [sp, #8]
   17668:	mov	r4, r0
   1766c:	str	lr, [sp, #12]
   17670:	sub	sp, sp, #32
   17674:	ldr	r5, [sp, #48]	; 0x30
   17678:	ldr	r6, [sp, #52]	; 0x34
   1767c:	beq	177c0 <__assert_fail@plt+0x68ac>
   17680:	mov	r3, r1
   17684:	mov	r1, #1
   17688:	stm	sp, {r2, ip}
   1768c:	movw	r2, #43960	; 0xabb8
   17690:	movt	r2, #1
   17694:	bl	10e9c <__fprintf_chk@plt>
   17698:	mov	r2, #5
   1769c:	movw	r1, #43980	; 0xabcc
   176a0:	movt	r1, #1
   176a4:	mov	r0, #0
   176a8:	bl	10d58 <dcgettext@plt>
   176ac:	movw	ip, #2022	; 0x7e6
   176b0:	mov	r3, r0
   176b4:	mov	r1, #1
   176b8:	movw	r2, #44708	; 0xaea4
   176bc:	movt	r2, #1
   176c0:	mov	r0, r4
   176c4:	str	ip, [sp]
   176c8:	bl	10e9c <__fprintf_chk@plt>
   176cc:	mov	r1, r4
   176d0:	mov	r0, #10
   176d4:	bl	10d4c <fputc_unlocked@plt>
   176d8:	mov	r2, #5
   176dc:	movw	r1, #43984	; 0xabd0
   176e0:	movt	r1, #1
   176e4:	mov	r0, #0
   176e8:	bl	10d58 <dcgettext@plt>
   176ec:	mov	r2, r0
   176f0:	mov	r1, #1
   176f4:	movw	r3, #44156	; 0xac7c
   176f8:	movt	r3, #1
   176fc:	mov	r0, r4
   17700:	bl	10e9c <__fprintf_chk@plt>
   17704:	mov	r1, r4
   17708:	mov	r0, #10
   1770c:	bl	10d4c <fputc_unlocked@plt>
   17710:	cmp	r6, #9
   17714:	ldrls	pc, [pc, r6, lsl #2]
   17718:	b	17a2c <__assert_fail@plt+0x6b18>
   1771c:	andeq	r7, r1, ip, lsr #15
   17720:	ldrdeq	r7, [r1], -ip
   17724:	andeq	r7, r1, r8, lsl r8
   17728:	andeq	r7, r1, r8, asr r8
   1772c:	andeq	r7, r1, r0, lsr #17
   17730:	ldrdeq	r7, [r1], -r8
   17734:	andeq	r7, r1, r0, lsr #18
   17738:	andeq	r7, r1, r4, ror r9
   1773c:	andeq	r7, r1, ip, asr #19
   17740:	andeq	r7, r1, r4, asr #14
   17744:	movw	r1, #44460	; 0xadac
   17748:	movt	r1, #1
   1774c:	mov	r2, #5
   17750:	mov	r0, #0
   17754:	bl	10d58 <dcgettext@plt>
   17758:	ldr	lr, [r5, #4]
   1775c:	mov	r2, r0
   17760:	mov	r1, #1
   17764:	mov	r0, r4
   17768:	ldr	r3, [r5, #8]
   1776c:	ldr	ip, [r5, #32]
   17770:	str	lr, [sp]
   17774:	ldr	lr, [r5, #12]
   17778:	str	ip, [sp, #28]
   1777c:	ldr	ip, [r5, #28]
   17780:	str	r3, [sp, #4]
   17784:	ldr	r3, [r5, #16]
   17788:	str	lr, [sp, #8]
   1778c:	ldr	lr, [r5, #20]
   17790:	str	ip, [sp, #24]
   17794:	ldr	ip, [r5, #24]
   17798:	str	r3, [sp, #12]
   1779c:	ldr	r3, [r5]
   177a0:	str	lr, [sp, #16]
   177a4:	str	ip, [sp, #20]
   177a8:	bl	10e9c <__fprintf_chk@plt>
   177ac:	add	sp, sp, #32
   177b0:	ldrd	r4, [sp]
   177b4:	ldr	r6, [sp, #8]
   177b8:	add	sp, sp, #12
   177bc:	pop	{pc}		; (ldr pc, [sp], #4)
   177c0:	mov	r3, r2
   177c4:	mov	r1, #1
   177c8:	str	ip, [sp]
   177cc:	movw	r2, #43972	; 0xabc4
   177d0:	movt	r2, #1
   177d4:	bl	10e9c <__fprintf_chk@plt>
   177d8:	b	17698 <__assert_fail@plt+0x6784>
   177dc:	mov	r2, #5
   177e0:	movw	r1, #44192	; 0xaca0
   177e4:	movt	r1, #1
   177e8:	mov	r0, #0
   177ec:	bl	10d58 <dcgettext@plt>
   177f0:	ldr	r3, [r5]
   177f4:	mov	r2, r0
   177f8:	mov	r1, #1
   177fc:	mov	r0, r4
   17800:	add	sp, sp, #32
   17804:	ldrd	r4, [sp]
   17808:	ldr	r6, [sp, #8]
   1780c:	ldr	lr, [sp, #12]
   17810:	add	sp, sp, #16
   17814:	b	10e9c <__fprintf_chk@plt>
   17818:	mov	r2, #5
   1781c:	movw	r1, #44208	; 0xacb0
   17820:	movt	r1, #1
   17824:	mov	r0, #0
   17828:	bl	10d58 <dcgettext@plt>
   1782c:	ldm	r5, {r3, ip}
   17830:	mov	r2, r0
   17834:	mov	r1, #1
   17838:	mov	r0, r4
   1783c:	str	ip, [sp, #48]	; 0x30
   17840:	add	sp, sp, #32
   17844:	ldrd	r4, [sp]
   17848:	ldr	r6, [sp, #8]
   1784c:	ldr	lr, [sp, #12]
   17850:	add	sp, sp, #16
   17854:	b	10e9c <__fprintf_chk@plt>
   17858:	mov	r2, #5
   1785c:	movw	r1, #44232	; 0xacc8
   17860:	movt	r1, #1
   17864:	mov	r0, #0
   17868:	bl	10d58 <dcgettext@plt>
   1786c:	ldm	r5, {r3, lr}
   17870:	mov	r2, r0
   17874:	mov	r1, #1
   17878:	mov	r0, r4
   1787c:	ldr	ip, [r5, #8]
   17880:	str	lr, [sp, #48]	; 0x30
   17884:	str	ip, [sp, #52]	; 0x34
   17888:	add	sp, sp, #32
   1788c:	ldrd	r4, [sp]
   17890:	ldr	r6, [sp, #8]
   17894:	ldr	lr, [sp, #12]
   17898:	add	sp, sp, #16
   1789c:	b	10e9c <__fprintf_chk@plt>
   178a0:	mov	r2, #5
   178a4:	movw	r1, #44260	; 0xace4
   178a8:	movt	r1, #1
   178ac:	mov	r0, #0
   178b0:	bl	10d58 <dcgettext@plt>
   178b4:	ldmib	r5, {r3, ip, lr}
   178b8:	mov	r2, r0
   178bc:	mov	r1, #1
   178c0:	mov	r0, r4
   178c4:	str	r3, [sp]
   178c8:	ldr	r3, [r5]
   178cc:	stmib	sp, {ip, lr}
   178d0:	bl	10e9c <__fprintf_chk@plt>
   178d4:	b	177ac <__assert_fail@plt+0x6898>
   178d8:	mov	r2, #5
   178dc:	movw	r1, #44292	; 0xad04
   178e0:	movt	r1, #1
   178e4:	mov	r0, #0
   178e8:	bl	10d58 <dcgettext@plt>
   178ec:	ldmib	r5, {ip, lr}
   178f0:	mov	r2, r0
   178f4:	mov	r1, #1
   178f8:	mov	r0, r4
   178fc:	ldr	r3, [r5, #16]
   17900:	str	ip, [sp]
   17904:	ldr	ip, [r5, #12]
   17908:	str	r3, [sp, #12]
   1790c:	ldr	r3, [r5]
   17910:	str	lr, [sp, #4]
   17914:	str	ip, [sp, #8]
   17918:	bl	10e9c <__fprintf_chk@plt>
   1791c:	b	177ac <__assert_fail@plt+0x6898>
   17920:	mov	r2, #5
   17924:	movw	r1, #44328	; 0xad28
   17928:	movt	r1, #1
   1792c:	mov	r0, #0
   17930:	bl	10d58 <dcgettext@plt>
   17934:	ldr	lr, [r5, #4]
   17938:	mov	r2, r0
   1793c:	mov	r1, #1
   17940:	mov	r0, r4
   17944:	ldr	r3, [r5, #8]
   17948:	ldr	ip, [r5, #20]
   1794c:	str	lr, [sp]
   17950:	ldr	lr, [r5, #12]
   17954:	str	ip, [sp, #16]
   17958:	ldr	ip, [r5, #16]
   1795c:	str	r3, [sp, #4]
   17960:	ldr	r3, [r5]
   17964:	str	lr, [sp, #8]
   17968:	str	ip, [sp, #12]
   1796c:	bl	10e9c <__fprintf_chk@plt>
   17970:	b	177ac <__assert_fail@plt+0x6898>
   17974:	mov	r2, #5
   17978:	movw	r1, #44368	; 0xad50
   1797c:	movt	r1, #1
   17980:	mov	r0, #0
   17984:	bl	10d58 <dcgettext@plt>
   17988:	ldmib	r5, {r3, ip}
   1798c:	mov	r2, r0
   17990:	mov	r1, #1
   17994:	mov	r0, r4
   17998:	ldr	lr, [r5, #24]
   1799c:	str	r3, [sp]
   179a0:	ldr	r3, [r5, #12]
   179a4:	str	lr, [sp, #20]
   179a8:	ldr	lr, [r5, #20]
   179ac:	str	ip, [sp, #4]
   179b0:	ldr	ip, [r5, #16]
   179b4:	str	r3, [sp, #8]
   179b8:	ldr	r3, [r5]
   179bc:	str	ip, [sp, #12]
   179c0:	str	lr, [sp, #16]
   179c4:	bl	10e9c <__fprintf_chk@plt>
   179c8:	b	177ac <__assert_fail@plt+0x6898>
   179cc:	mov	r2, #5
   179d0:	movw	r1, #44412	; 0xad7c
   179d4:	movt	r1, #1
   179d8:	mov	r0, #0
   179dc:	bl	10d58 <dcgettext@plt>
   179e0:	ldmib	r5, {ip, lr}
   179e4:	mov	r2, r0
   179e8:	mov	r1, #1
   179ec:	mov	r0, r4
   179f0:	ldr	r3, [r5, #28]
   179f4:	str	ip, [sp]
   179f8:	ldr	ip, [r5, #12]
   179fc:	str	r3, [sp, #24]
   17a00:	ldr	r3, [r5, #24]
   17a04:	str	lr, [sp, #4]
   17a08:	ldr	lr, [r5, #16]
   17a0c:	str	ip, [sp, #8]
   17a10:	ldr	ip, [r5, #20]
   17a14:	str	r3, [sp, #20]
   17a18:	ldr	r3, [r5]
   17a1c:	str	lr, [sp, #12]
   17a20:	str	ip, [sp, #16]
   17a24:	bl	10e9c <__fprintf_chk@plt>
   17a28:	b	177ac <__assert_fail@plt+0x6898>
   17a2c:	movw	r1, #44512	; 0xade0
   17a30:	movt	r1, #1
   17a34:	b	1774c <__assert_fail@plt+0x6838>
   17a38:	strd	r4, [sp, #-12]!
   17a3c:	str	lr, [sp, #8]
   17a40:	sub	sp, sp, #12
   17a44:	ldr	r5, [sp, #24]
   17a48:	ldr	ip, [r5]
   17a4c:	cmp	ip, #0
   17a50:	beq	17a6c <__assert_fail@plt+0x6b58>
   17a54:	mov	lr, r5
   17a58:	mov	ip, #0
   17a5c:	ldr	r4, [lr, #4]!
   17a60:	add	ip, ip, #1
   17a64:	cmp	r4, #0
   17a68:	bne	17a5c <__assert_fail@plt+0x6b48>
   17a6c:	stm	sp, {r5, ip}
   17a70:	bl	17658 <__assert_fail@plt+0x6744>
   17a74:	add	sp, sp, #12
   17a78:	ldrd	r4, [sp]
   17a7c:	add	sp, sp, #8
   17a80:	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	push	{lr}		; (str lr, [sp, #-4]!)
   17a88:	sub	sp, sp, #52	; 0x34
   17a8c:	ldr	ip, [sp, #56]	; 0x38
   17a90:	ldr	lr, [ip]
   17a94:	cmp	lr, #0
   17a98:	str	lr, [sp, #8]
   17a9c:	beq	17b34 <__assert_fail@plt+0x6c20>
   17aa0:	ldr	lr, [ip, #4]
   17aa4:	cmp	lr, #0
   17aa8:	str	lr, [sp, #12]
   17aac:	beq	17b48 <__assert_fail@plt+0x6c34>
   17ab0:	ldr	lr, [ip, #8]
   17ab4:	cmp	lr, #0
   17ab8:	str	lr, [sp, #16]
   17abc:	beq	17b50 <__assert_fail@plt+0x6c3c>
   17ac0:	ldr	lr, [ip, #12]
   17ac4:	cmp	lr, #0
   17ac8:	str	lr, [sp, #20]
   17acc:	beq	17b58 <__assert_fail@plt+0x6c44>
   17ad0:	ldr	lr, [ip, #16]
   17ad4:	cmp	lr, #0
   17ad8:	str	lr, [sp, #24]
   17adc:	beq	17b60 <__assert_fail@plt+0x6c4c>
   17ae0:	ldr	lr, [ip, #20]
   17ae4:	cmp	lr, #0
   17ae8:	str	lr, [sp, #28]
   17aec:	beq	17b68 <__assert_fail@plt+0x6c54>
   17af0:	ldr	lr, [ip, #24]
   17af4:	cmp	lr, #0
   17af8:	str	lr, [sp, #32]
   17afc:	beq	17b70 <__assert_fail@plt+0x6c5c>
   17b00:	ldr	lr, [ip, #28]
   17b04:	cmp	lr, #0
   17b08:	str	lr, [sp, #36]	; 0x24
   17b0c:	beq	17b78 <__assert_fail@plt+0x6c64>
   17b10:	ldr	lr, [ip, #32]
   17b14:	cmp	lr, #0
   17b18:	str	lr, [sp, #40]	; 0x28
   17b1c:	beq	17b80 <__assert_fail@plt+0x6c6c>
   17b20:	ldr	ip, [ip, #36]	; 0x24
   17b24:	cmp	ip, #0
   17b28:	str	ip, [sp, #44]	; 0x2c
   17b2c:	movne	lr, #10
   17b30:	moveq	lr, #9
   17b34:	add	ip, sp, #8
   17b38:	stm	sp, {ip, lr}
   17b3c:	bl	17658 <__assert_fail@plt+0x6744>
   17b40:	add	sp, sp, #52	; 0x34
   17b44:	pop	{pc}		; (ldr pc, [sp], #4)
   17b48:	mov	lr, #1
   17b4c:	b	17b34 <__assert_fail@plt+0x6c20>
   17b50:	mov	lr, #2
   17b54:	b	17b34 <__assert_fail@plt+0x6c20>
   17b58:	mov	lr, #3
   17b5c:	b	17b34 <__assert_fail@plt+0x6c20>
   17b60:	mov	lr, #4
   17b64:	b	17b34 <__assert_fail@plt+0x6c20>
   17b68:	mov	lr, #5
   17b6c:	b	17b34 <__assert_fail@plt+0x6c20>
   17b70:	mov	lr, #6
   17b74:	b	17b34 <__assert_fail@plt+0x6c20>
   17b78:	mov	lr, #7
   17b7c:	b	17b34 <__assert_fail@plt+0x6c20>
   17b80:	mov	lr, #8
   17b84:	b	17b34 <__assert_fail@plt+0x6c20>
   17b88:	push	{r3}		; (str r3, [sp, #-4]!)
   17b8c:	push	{lr}		; (str lr, [sp, #-4]!)
   17b90:	sub	sp, sp, #56	; 0x38
   17b94:	ldr	ip, [sp, #64]	; 0x40
   17b98:	add	r3, sp, #64	; 0x40
   17b9c:	str	r3, [sp, #12]
   17ba0:	cmp	ip, #0
   17ba4:	str	ip, [sp, #16]
   17ba8:	beq	17c40 <__assert_fail@plt+0x6d2c>
   17bac:	ldr	ip, [sp, #68]	; 0x44
   17bb0:	cmp	ip, #0
   17bb4:	str	ip, [sp, #20]
   17bb8:	beq	17c64 <__assert_fail@plt+0x6d50>
   17bbc:	ldr	ip, [sp, #72]	; 0x48
   17bc0:	cmp	ip, #0
   17bc4:	str	ip, [sp, #24]
   17bc8:	beq	17c6c <__assert_fail@plt+0x6d58>
   17bcc:	ldr	ip, [sp, #76]	; 0x4c
   17bd0:	cmp	ip, #0
   17bd4:	str	ip, [sp, #28]
   17bd8:	beq	17c74 <__assert_fail@plt+0x6d60>
   17bdc:	ldr	ip, [sp, #80]	; 0x50
   17be0:	cmp	ip, #0
   17be4:	str	ip, [sp, #32]
   17be8:	beq	17c7c <__assert_fail@plt+0x6d68>
   17bec:	ldr	ip, [sp, #84]	; 0x54
   17bf0:	cmp	ip, #0
   17bf4:	str	ip, [sp, #36]	; 0x24
   17bf8:	beq	17c84 <__assert_fail@plt+0x6d70>
   17bfc:	ldr	ip, [sp, #88]	; 0x58
   17c00:	cmp	ip, #0
   17c04:	str	ip, [sp, #40]	; 0x28
   17c08:	beq	17c8c <__assert_fail@plt+0x6d78>
   17c0c:	ldr	ip, [sp, #92]	; 0x5c
   17c10:	cmp	ip, #0
   17c14:	str	ip, [sp, #44]	; 0x2c
   17c18:	beq	17c94 <__assert_fail@plt+0x6d80>
   17c1c:	ldr	ip, [sp, #96]	; 0x60
   17c20:	cmp	ip, #0
   17c24:	str	ip, [sp, #48]	; 0x30
   17c28:	beq	17c9c <__assert_fail@plt+0x6d88>
   17c2c:	ldr	r3, [sp, #100]	; 0x64
   17c30:	cmp	r3, #0
   17c34:	str	r3, [sp, #52]	; 0x34
   17c38:	movne	ip, #10
   17c3c:	moveq	ip, #9
   17c40:	ldr	r3, [sp, #60]	; 0x3c
   17c44:	add	lr, sp, #16
   17c48:	str	lr, [sp]
   17c4c:	str	ip, [sp, #4]
   17c50:	bl	17658 <__assert_fail@plt+0x6744>
   17c54:	add	sp, sp, #56	; 0x38
   17c58:	pop	{lr}		; (ldr lr, [sp], #4)
   17c5c:	add	sp, sp, #4
   17c60:	bx	lr
   17c64:	mov	ip, #1
   17c68:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c6c:	mov	ip, #2
   17c70:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c74:	mov	ip, #3
   17c78:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c7c:	mov	ip, #4
   17c80:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c84:	mov	ip, #5
   17c88:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c8c:	mov	ip, #6
   17c90:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c94:	mov	ip, #7
   17c98:	b	17c40 <__assert_fail@plt+0x6d2c>
   17c9c:	mov	ip, #8
   17ca0:	b	17c40 <__assert_fail@plt+0x6d2c>
   17ca4:	movw	r3, #49492	; 0xc154
   17ca8:	movt	r3, #2
   17cac:	str	r4, [sp, #-8]!
   17cb0:	mov	r0, #10
   17cb4:	ldr	r1, [r3]
   17cb8:	str	lr, [sp, #4]
   17cbc:	bl	10d4c <fputc_unlocked@plt>
   17cc0:	mov	r2, #5
   17cc4:	movw	r1, #44572	; 0xae1c
   17cc8:	movt	r1, #1
   17ccc:	mov	r0, #0
   17cd0:	bl	10d58 <dcgettext@plt>
   17cd4:	mov	r1, r0
   17cd8:	movw	r2, #44592	; 0xae30
   17cdc:	movt	r2, #1
   17ce0:	mov	r0, #1
   17ce4:	bl	10e84 <__printf_chk@plt>
   17ce8:	mov	r2, #5
   17cec:	movw	r1, #44616	; 0xae48
   17cf0:	movt	r1, #1
   17cf4:	mov	r0, #0
   17cf8:	bl	10d58 <dcgettext@plt>
   17cfc:	mov	r1, r0
   17d00:	movw	r3, #42096	; 0xa470
   17d04:	movt	r3, #1
   17d08:	movw	r2, #42136	; 0xa498
   17d0c:	movt	r2, #1
   17d10:	mov	r0, #1
   17d14:	bl	10e84 <__printf_chk@plt>
   17d18:	mov	r2, #5
   17d1c:	movw	r1, #44636	; 0xae5c
   17d20:	movt	r1, #1
   17d24:	mov	r0, #0
   17d28:	bl	10d58 <dcgettext@plt>
   17d2c:	mov	r1, r0
   17d30:	movw	r2, #44676	; 0xae84
   17d34:	movt	r2, #1
   17d38:	mov	r0, #1
   17d3c:	ldr	r4, [sp]
   17d40:	ldr	lr, [sp, #4]
   17d44:	add	sp, sp, #8
   17d48:	b	10e84 <__printf_chk@plt>
   17d4c:	strd	r4, [sp, #-16]!
   17d50:	mov	r4, r0
   17d54:	mov	r5, r2
   17d58:	str	r6, [sp, #8]
   17d5c:	mov	r6, r1
   17d60:	str	lr, [sp, #12]
   17d64:	bl	19520 <__assert_fail@plt+0x860c>
   17d68:	cmp	r0, #0
   17d6c:	beq	17d80 <__assert_fail@plt+0x6e6c>
   17d70:	ldrd	r4, [sp]
   17d74:	ldr	r6, [sp, #8]
   17d78:	add	sp, sp, #12
   17d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d80:	cmp	r4, #0
   17d84:	beq	17d94 <__assert_fail@plt+0x6e80>
   17d88:	cmp	r6, #0
   17d8c:	cmpne	r5, #0
   17d90:	beq	17d70 <__assert_fail@plt+0x6e5c>
   17d94:	bl	18350 <__assert_fail@plt+0x743c>
   17d98:	str	r4, [sp, #-8]!
   17d9c:	str	lr, [sp, #4]
   17da0:	bl	19164 <__assert_fail@plt+0x8250>
   17da4:	cmp	r0, #0
   17da8:	beq	17db8 <__assert_fail@plt+0x6ea4>
   17dac:	ldr	r4, [sp]
   17db0:	add	sp, sp, #4
   17db4:	pop	{pc}		; (ldr pc, [sp], #4)
   17db8:	bl	18350 <__assert_fail@plt+0x743c>
   17dbc:	str	r4, [sp, #-8]!
   17dc0:	str	lr, [sp, #4]
   17dc4:	bl	19164 <__assert_fail@plt+0x8250>
   17dc8:	cmp	r0, #0
   17dcc:	beq	17ddc <__assert_fail@plt+0x6ec8>
   17dd0:	ldr	r4, [sp]
   17dd4:	add	sp, sp, #4
   17dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ddc:	bl	18350 <__assert_fail@plt+0x743c>
   17de0:	str	r4, [sp, #-8]!
   17de4:	str	lr, [sp, #4]
   17de8:	bl	19164 <__assert_fail@plt+0x8250>
   17dec:	cmp	r0, #0
   17df0:	beq	17e00 <__assert_fail@plt+0x6eec>
   17df4:	ldr	r4, [sp]
   17df8:	add	sp, sp, #4
   17dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17e00:	bl	18350 <__assert_fail@plt+0x743c>
   17e04:	strd	r4, [sp, #-16]!
   17e08:	mov	r5, r0
   17e0c:	mov	r4, r1
   17e10:	str	r6, [sp, #8]
   17e14:	str	lr, [sp, #12]
   17e18:	bl	191a0 <__assert_fail@plt+0x828c>
   17e1c:	cmp	r0, #0
   17e20:	beq	17e34 <__assert_fail@plt+0x6f20>
   17e24:	ldrd	r4, [sp]
   17e28:	ldr	r6, [sp, #8]
   17e2c:	add	sp, sp, #12
   17e30:	pop	{pc}		; (ldr pc, [sp], #4)
   17e34:	adds	r4, r4, #0
   17e38:	movne	r4, #1
   17e3c:	cmp	r5, #0
   17e40:	moveq	r4, #1
   17e44:	cmp	r4, #0
   17e48:	beq	17e24 <__assert_fail@plt+0x6f10>
   17e4c:	bl	18350 <__assert_fail@plt+0x743c>
   17e50:	cmp	r1, #0
   17e54:	orreq	r1, r1, #1
   17e58:	str	r4, [sp, #-8]!
   17e5c:	str	lr, [sp, #4]
   17e60:	bl	191a0 <__assert_fail@plt+0x828c>
   17e64:	cmp	r0, #0
   17e68:	beq	17e78 <__assert_fail@plt+0x6f64>
   17e6c:	ldr	r4, [sp]
   17e70:	add	sp, sp, #4
   17e74:	pop	{pc}		; (ldr pc, [sp], #4)
   17e78:	bl	18350 <__assert_fail@plt+0x743c>
   17e7c:	strd	r4, [sp, #-16]!
   17e80:	mov	r4, r0
   17e84:	mov	r5, r2
   17e88:	str	r6, [sp, #8]
   17e8c:	mov	r6, r1
   17e90:	str	lr, [sp, #12]
   17e94:	bl	19520 <__assert_fail@plt+0x860c>
   17e98:	cmp	r0, #0
   17e9c:	beq	17eb0 <__assert_fail@plt+0x6f9c>
   17ea0:	ldrd	r4, [sp]
   17ea4:	ldr	r6, [sp, #8]
   17ea8:	add	sp, sp, #12
   17eac:	pop	{pc}		; (ldr pc, [sp], #4)
   17eb0:	cmp	r4, #0
   17eb4:	beq	17ec4 <__assert_fail@plt+0x6fb0>
   17eb8:	cmp	r6, #0
   17ebc:	cmpne	r5, #0
   17ec0:	beq	17ea0 <__assert_fail@plt+0x6f8c>
   17ec4:	bl	18350 <__assert_fail@plt+0x743c>
   17ec8:	cmp	r2, #0
   17ecc:	cmpne	r1, #0
   17ed0:	str	r4, [sp, #-8]!
   17ed4:	moveq	r2, #1
   17ed8:	str	lr, [sp, #4]
   17edc:	moveq	r1, r2
   17ee0:	bl	19520 <__assert_fail@plt+0x860c>
   17ee4:	cmp	r0, #0
   17ee8:	beq	17ef8 <__assert_fail@plt+0x6fe4>
   17eec:	ldr	r4, [sp]
   17ef0:	add	sp, sp, #4
   17ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ef8:	bl	18350 <__assert_fail@plt+0x743c>
   17efc:	mov	r2, r1
   17f00:	mov	r1, r0
   17f04:	str	r4, [sp, #-8]!
   17f08:	mov	r0, #0
   17f0c:	str	lr, [sp, #4]
   17f10:	bl	19520 <__assert_fail@plt+0x860c>
   17f14:	cmp	r0, #0
   17f18:	beq	17f28 <__assert_fail@plt+0x7014>
   17f1c:	ldr	r4, [sp]
   17f20:	add	sp, sp, #4
   17f24:	pop	{pc}		; (ldr pc, [sp], #4)
   17f28:	bl	18350 <__assert_fail@plt+0x743c>
   17f2c:	cmp	r1, #0
   17f30:	cmpne	r0, #0
   17f34:	str	r4, [sp, #-8]!
   17f38:	moveq	r2, #1
   17f3c:	movne	r2, r1
   17f40:	str	lr, [sp, #4]
   17f44:	movne	r1, r0
   17f48:	moveq	r1, r2
   17f4c:	mov	r0, #0
   17f50:	bl	19520 <__assert_fail@plt+0x860c>
   17f54:	cmp	r0, #0
   17f58:	beq	17f68 <__assert_fail@plt+0x7054>
   17f5c:	ldr	r4, [sp]
   17f60:	add	sp, sp, #4
   17f64:	pop	{pc}		; (ldr pc, [sp], #4)
   17f68:	bl	18350 <__assert_fail@plt+0x743c>
   17f6c:	cmp	r0, #0
   17f70:	strd	r4, [sp, #-16]!
   17f74:	mov	r5, r1
   17f78:	ldr	r4, [r1]
   17f7c:	str	r6, [sp, #8]
   17f80:	str	lr, [sp, #12]
   17f84:	beq	17fcc <__assert_fail@plt+0x70b8>
   17f88:	lsr	r3, r4, #1
   17f8c:	add	r3, r3, #1
   17f90:	adds	r4, r4, r3
   17f94:	bcs	17fc8 <__assert_fail@plt+0x70b4>
   17f98:	mov	r2, #1
   17f9c:	mov	r1, r4
   17fa0:	bl	19520 <__assert_fail@plt+0x860c>
   17fa4:	cmp	r0, #0
   17fa8:	beq	17fc0 <__assert_fail@plt+0x70ac>
   17fac:	ldr	r6, [sp, #8]
   17fb0:	str	r4, [r5]
   17fb4:	ldrd	r4, [sp]
   17fb8:	add	sp, sp, #12
   17fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17fc0:	cmp	r4, #0
   17fc4:	beq	17fac <__assert_fail@plt+0x7098>
   17fc8:	bl	18350 <__assert_fail@plt+0x743c>
   17fcc:	cmp	r4, #0
   17fd0:	mov	r2, #1
   17fd4:	moveq	r4, #64	; 0x40
   17fd8:	mov	r1, r4
   17fdc:	bl	19520 <__assert_fail@plt+0x860c>
   17fe0:	cmp	r0, #0
   17fe4:	bne	17fac <__assert_fail@plt+0x7098>
   17fe8:	b	17fc8 <__assert_fail@plt+0x70b4>
   17fec:	cmp	r0, #0
   17ff0:	strd	r4, [sp, #-16]!
   17ff4:	mov	r5, r1
   17ff8:	ldr	r4, [r1]
   17ffc:	str	r6, [sp, #8]
   18000:	mov	r6, r2
   18004:	str	lr, [sp, #12]
   18008:	beq	18050 <__assert_fail@plt+0x713c>
   1800c:	lsr	r3, r4, #1
   18010:	add	r3, r3, #1
   18014:	adds	r4, r4, r3
   18018:	bcs	1804c <__assert_fail@plt+0x7138>
   1801c:	mov	r1, r4
   18020:	bl	19520 <__assert_fail@plt+0x860c>
   18024:	cmp	r0, #0
   18028:	beq	18040 <__assert_fail@plt+0x712c>
   1802c:	ldr	r6, [sp, #8]
   18030:	str	r4, [r5]
   18034:	ldrd	r4, [sp]
   18038:	add	sp, sp, #12
   1803c:	pop	{pc}		; (ldr pc, [sp], #4)
   18040:	cmp	r4, #0
   18044:	cmpne	r6, #0
   18048:	beq	1802c <__assert_fail@plt+0x7118>
   1804c:	bl	18350 <__assert_fail@plt+0x743c>
   18050:	cmp	r4, #0
   18054:	bne	18068 <__assert_fail@plt+0x7154>
   18058:	mov	r4, #64	; 0x40
   1805c:	udiv	r4, r4, r2
   18060:	cmp	r2, #64	; 0x40
   18064:	addhi	r4, r4, #1
   18068:	mov	r2, r6
   1806c:	mov	r1, r4
   18070:	mov	r0, #0
   18074:	bl	19520 <__assert_fail@plt+0x860c>
   18078:	cmp	r0, #0
   1807c:	bne	1802c <__assert_fail@plt+0x7118>
   18080:	b	1804c <__assert_fail@plt+0x7138>
   18084:	ldr	ip, [r1]
   18088:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1808c:	strd	r6, [sp, #8]
   18090:	mov	r7, r1
   18094:	mov	r6, r0
   18098:	str	r8, [sp, #16]
   1809c:	mvn	r8, r3
   180a0:	lsr	r8, r8, #31
   180a4:	str	lr, [sp, #20]
   180a8:	asr	r1, ip, #1
   180ac:	ldr	lr, [sp, #24]
   180b0:	adds	r4, ip, r1
   180b4:	mvnvs	r4, #-2147483648	; 0x80000000
   180b8:	cmp	r3, r4
   180bc:	movge	r1, #0
   180c0:	andlt	r1, r8, #1
   180c4:	cmp	r1, #0
   180c8:	movne	r4, r3
   180cc:	smull	r0, r1, r4, lr
   180d0:	cmp	r1, r0, asr #31
   180d4:	bne	18184 <__assert_fail@plt+0x7270>
   180d8:	cmp	r0, #63	; 0x3f
   180dc:	mov	r5, r0
   180e0:	ble	18150 <__assert_fail@plt+0x723c>
   180e4:	cmp	r6, #0
   180e8:	sub	r1, r4, ip
   180ec:	streq	r6, [r7]
   180f0:	cmp	r1, r2
   180f4:	bge	18124 <__assert_fail@plt+0x7210>
   180f8:	adds	r4, ip, r2
   180fc:	bvs	18180 <__assert_fail@plt+0x726c>
   18100:	cmp	r4, r3
   18104:	movle	r3, #0
   18108:	andgt	r3, r8, #1
   1810c:	cmp	r3, #0
   18110:	bne	18180 <__assert_fail@plt+0x726c>
   18114:	smull	r0, r1, r4, lr
   18118:	cmp	r1, r0, asr #31
   1811c:	mov	r5, r0
   18120:	bne	18180 <__assert_fail@plt+0x726c>
   18124:	mov	r1, r5
   18128:	mov	r0, r6
   1812c:	bl	191a0 <__assert_fail@plt+0x828c>
   18130:	cmp	r0, #0
   18134:	beq	18164 <__assert_fail@plt+0x7250>
   18138:	ldr	r8, [sp, #16]
   1813c:	str	r4, [r7]
   18140:	ldrd	r4, [sp]
   18144:	ldrd	r6, [sp, #8]
   18148:	add	sp, sp, #20
   1814c:	pop	{pc}		; (ldr pc, [sp], #4)
   18150:	mov	r0, #64	; 0x40
   18154:	sdiv	r4, r0, lr
   18158:	mls	r5, lr, r4, r0
   1815c:	sub	r5, r0, r5
   18160:	b	180e4 <__assert_fail@plt+0x71d0>
   18164:	adds	r5, r5, #0
   18168:	movne	r5, #1
   1816c:	cmp	r6, #0
   18170:	movne	r6, r5
   18174:	moveq	r6, #1
   18178:	cmp	r6, #0
   1817c:	beq	18138 <__assert_fail@plt+0x7224>
   18180:	bl	18350 <__assert_fail@plt+0x743c>
   18184:	mvn	r0, #-2147483648	; 0x80000000
   18188:	b	18154 <__assert_fail@plt+0x7240>
   1818c:	mov	r1, #1
   18190:	str	r4, [sp, #-8]!
   18194:	str	lr, [sp, #4]
   18198:	bl	190f0 <__assert_fail@plt+0x81dc>
   1819c:	cmp	r0, #0
   181a0:	beq	181b0 <__assert_fail@plt+0x729c>
   181a4:	ldr	r4, [sp]
   181a8:	add	sp, sp, #4
   181ac:	pop	{pc}		; (ldr pc, [sp], #4)
   181b0:	bl	18350 <__assert_fail@plt+0x743c>
   181b4:	mov	r1, #1
   181b8:	str	r4, [sp, #-8]!
   181bc:	str	lr, [sp, #4]
   181c0:	bl	190f0 <__assert_fail@plt+0x81dc>
   181c4:	cmp	r0, #0
   181c8:	beq	181d8 <__assert_fail@plt+0x72c4>
   181cc:	ldr	r4, [sp]
   181d0:	add	sp, sp, #4
   181d4:	pop	{pc}		; (ldr pc, [sp], #4)
   181d8:	bl	18350 <__assert_fail@plt+0x743c>
   181dc:	str	r4, [sp, #-8]!
   181e0:	str	lr, [sp, #4]
   181e4:	bl	190f0 <__assert_fail@plt+0x81dc>
   181e8:	cmp	r0, #0
   181ec:	beq	181fc <__assert_fail@plt+0x72e8>
   181f0:	ldr	r4, [sp]
   181f4:	add	sp, sp, #4
   181f8:	pop	{pc}		; (ldr pc, [sp], #4)
   181fc:	bl	18350 <__assert_fail@plt+0x743c>
   18200:	str	r4, [sp, #-8]!
   18204:	str	lr, [sp, #4]
   18208:	bl	190f0 <__assert_fail@plt+0x81dc>
   1820c:	cmp	r0, #0
   18210:	beq	18220 <__assert_fail@plt+0x730c>
   18214:	ldr	r4, [sp]
   18218:	add	sp, sp, #4
   1821c:	pop	{pc}		; (ldr pc, [sp], #4)
   18220:	bl	18350 <__assert_fail@plt+0x743c>
   18224:	strd	r4, [sp, #-16]!
   18228:	mov	r4, r1
   1822c:	str	r6, [sp, #8]
   18230:	mov	r6, r0
   18234:	mov	r0, r1
   18238:	str	lr, [sp, #12]
   1823c:	bl	19164 <__assert_fail@plt+0x8250>
   18240:	subs	r5, r0, #0
   18244:	beq	18268 <__assert_fail@plt+0x7354>
   18248:	mov	r2, r4
   1824c:	mov	r1, r6
   18250:	bl	10d04 <memcpy@plt>
   18254:	mov	r0, r5
   18258:	ldrd	r4, [sp]
   1825c:	ldr	r6, [sp, #8]
   18260:	add	sp, sp, #12
   18264:	pop	{pc}		; (ldr pc, [sp], #4)
   18268:	bl	18350 <__assert_fail@plt+0x743c>
   1826c:	strd	r4, [sp, #-16]!
   18270:	mov	r4, r1
   18274:	str	r6, [sp, #8]
   18278:	mov	r6, r0
   1827c:	mov	r0, r1
   18280:	str	lr, [sp, #12]
   18284:	bl	19164 <__assert_fail@plt+0x8250>
   18288:	subs	r5, r0, #0
   1828c:	beq	182b0 <__assert_fail@plt+0x739c>
   18290:	mov	r2, r4
   18294:	mov	r1, r6
   18298:	bl	10d04 <memcpy@plt>
   1829c:	mov	r0, r5
   182a0:	ldrd	r4, [sp]
   182a4:	ldr	r6, [sp, #8]
   182a8:	add	sp, sp, #12
   182ac:	pop	{pc}		; (ldr pc, [sp], #4)
   182b0:	bl	18350 <__assert_fail@plt+0x743c>
   182b4:	strd	r4, [sp, #-16]!
   182b8:	mov	r4, r1
   182bc:	str	r6, [sp, #8]
   182c0:	mov	r6, r0
   182c4:	add	r0, r1, #1
   182c8:	str	lr, [sp, #12]
   182cc:	bl	19164 <__assert_fail@plt+0x8250>
   182d0:	subs	r5, r0, #0
   182d4:	beq	18300 <__assert_fail@plt+0x73ec>
   182d8:	mov	r3, #0
   182dc:	mov	r1, r6
   182e0:	mov	r2, r4
   182e4:	strb	r3, [r5, r4]
   182e8:	bl	10d04 <memcpy@plt>
   182ec:	mov	r0, r5
   182f0:	ldrd	r4, [sp]
   182f4:	ldr	r6, [sp, #8]
   182f8:	add	sp, sp, #12
   182fc:	pop	{pc}		; (ldr pc, [sp], #4)
   18300:	bl	18350 <__assert_fail@plt+0x743c>
   18304:	strd	r4, [sp, #-16]!
   18308:	str	r6, [sp, #8]
   1830c:	mov	r6, r0
   18310:	str	lr, [sp, #12]
   18314:	bl	10e3c <strlen@plt>
   18318:	add	r4, r0, #1
   1831c:	mov	r0, r4
   18320:	bl	19164 <__assert_fail@plt+0x8250>
   18324:	subs	r5, r0, #0
   18328:	beq	1834c <__assert_fail@plt+0x7438>
   1832c:	mov	r2, r4
   18330:	mov	r1, r6
   18334:	bl	10d04 <memcpy@plt>
   18338:	mov	r0, r5
   1833c:	ldrd	r4, [sp]
   18340:	ldr	r6, [sp, #8]
   18344:	add	sp, sp, #12
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	bl	18350 <__assert_fail@plt+0x743c>
   18350:	movw	r3, #49392	; 0xc0f0
   18354:	movt	r3, #2
   18358:	str	r4, [sp, #-8]!
   1835c:	ldr	r4, [r3]
   18360:	mov	r2, #5
   18364:	movw	r1, #44756	; 0xaed4
   18368:	movt	r1, #1
   1836c:	mov	r0, #0
   18370:	str	lr, [sp, #4]
   18374:	bl	10d58 <dcgettext@plt>
   18378:	mov	r3, r0
   1837c:	movw	r2, #43676	; 0xaa9c
   18380:	movt	r2, #1
   18384:	mov	r1, #0
   18388:	mov	r0, r4
   1838c:	bl	10dc4 <error@plt>
   18390:	bl	10efc <abort@plt>
   18394:	cmp	r2, #36	; 0x24
   18398:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1839c:	strd	r6, [sp, #8]
   183a0:	strd	r8, [sp, #16]
   183a4:	strd	sl, [sp, #24]
   183a8:	str	lr, [sp, #32]
   183ac:	sub	sp, sp, #36	; 0x24
   183b0:	bhi	19028 <__assert_fail@plt+0x8114>
   183b4:	cmp	r1, #0
   183b8:	mov	r6, r2
   183bc:	mov	r5, r1
   183c0:	mov	sl, r0
   183c4:	addeq	r5, sp, #28
   183c8:	mov	r9, r3
   183cc:	bl	10e54 <__errno_location@plt>
   183d0:	mov	r3, #0
   183d4:	mov	fp, r0
   183d8:	str	r3, [r0]
   183dc:	ldrb	r4, [sl]
   183e0:	bl	10e24 <__ctype_b_loc@plt>
   183e4:	ldr	r2, [r0]
   183e8:	lsl	r3, r4, #1
   183ec:	ldrh	r3, [r2, r3]
   183f0:	tst	r3, #8192	; 0x2000
   183f4:	beq	18410 <__assert_fail@plt+0x74fc>
   183f8:	mov	r3, sl
   183fc:	ldrb	r4, [r3, #1]!
   18400:	lsl	r1, r4, #1
   18404:	ldrh	r1, [r2, r1]
   18408:	tst	r1, #8192	; 0x2000
   1840c:	bne	183fc <__assert_fail@plt+0x74e8>
   18410:	cmp	r4, #45	; 0x2d
   18414:	beq	184b0 <__assert_fail@plt+0x759c>
   18418:	mov	r2, r6
   1841c:	mov	r3, #0
   18420:	mov	r1, r5
   18424:	mov	r0, sl
   18428:	bl	10d10 <__strtoull_internal@plt>
   1842c:	ldr	r8, [r5]
   18430:	mov	r6, r0
   18434:	mov	r7, r1
   18438:	cmp	r8, sl
   1843c:	beq	18498 <__assert_fail@plt+0x7584>
   18440:	ldr	r4, [fp]
   18444:	cmp	r4, #0
   18448:	bne	18488 <__assert_fail@plt+0x7574>
   1844c:	ldr	r3, [sp, #72]	; 0x48
   18450:	cmp	r3, #0
   18454:	beq	18464 <__assert_fail@plt+0x7550>
   18458:	ldrb	sl, [r8]
   1845c:	cmp	sl, #0
   18460:	bne	1881c <__assert_fail@plt+0x7908>
   18464:	strd	r6, [r9]
   18468:	mov	r0, r4
   1846c:	add	sp, sp, #36	; 0x24
   18470:	ldrd	r4, [sp]
   18474:	ldrd	r6, [sp, #8]
   18478:	ldrd	r8, [sp, #16]
   1847c:	ldrd	sl, [sp, #24]
   18480:	add	sp, sp, #32
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	cmp	r4, #34	; 0x22
   1848c:	bne	184b0 <__assert_fail@plt+0x759c>
   18490:	mov	r4, #1
   18494:	b	1844c <__assert_fail@plt+0x7538>
   18498:	ldr	r3, [sp, #72]	; 0x48
   1849c:	cmp	r3, #0
   184a0:	beq	184b0 <__assert_fail@plt+0x759c>
   184a4:	ldrb	sl, [sl]
   184a8:	cmp	sl, #0
   184ac:	bne	184b8 <__assert_fail@plt+0x75a4>
   184b0:	mov	r4, #4
   184b4:	b	18468 <__assert_fail@plt+0x7554>
   184b8:	mov	r1, sl
   184bc:	mov	r0, r3
   184c0:	bl	10e48 <strchr@plt>
   184c4:	cmp	r0, #0
   184c8:	movne	r4, #0
   184cc:	movne	r6, #1
   184d0:	movne	r7, r4
   184d4:	beq	184b0 <__assert_fail@plt+0x759c>
   184d8:	sub	r3, sl, #69	; 0x45
   184dc:	cmp	r3, #47	; 0x2f
   184e0:	ldrls	pc, [pc, r3, lsl #2]
   184e4:	b	185ec <__assert_fail@plt+0x76d8>
   184e8:	andeq	r8, r1, r8, lsr #11
   184ec:	andeq	r8, r1, ip, ror #11
   184f0:	andeq	r8, r1, r8, lsr #11
   184f4:	andeq	r8, r1, ip, ror #11
   184f8:	andeq	r8, r1, ip, ror #11
   184fc:	andeq	r8, r1, ip, ror #11
   18500:	andeq	r8, r1, r8, lsr #11
   18504:	andeq	r8, r1, ip, ror #11
   18508:	andeq	r8, r1, r8, lsr #11
   1850c:	andeq	r8, r1, ip, ror #11
   18510:	andeq	r8, r1, ip, ror #11
   18514:	andeq	r8, r1, r8, lsr #11
   18518:	andeq	r8, r1, ip, ror #11
   1851c:	andeq	r8, r1, ip, ror #11
   18520:	andeq	r8, r1, ip, ror #11
   18524:	andeq	r8, r1, r8, lsr #11
   18528:	andeq	r8, r1, ip, ror #11
   1852c:	andeq	r8, r1, ip, ror #11
   18530:	andeq	r8, r1, ip, ror #11
   18534:	andeq	r8, r1, ip, ror #11
   18538:	andeq	r8, r1, r8, lsr #11
   1853c:	andeq	r8, r1, r8, lsr #11
   18540:	andeq	r8, r1, ip, ror #11
   18544:	andeq	r8, r1, ip, ror #11
   18548:	andeq	r8, r1, ip, ror #11
   1854c:	andeq	r8, r1, ip, ror #11
   18550:	andeq	r8, r1, ip, ror #11
   18554:	andeq	r8, r1, ip, ror #11
   18558:	andeq	r8, r1, ip, ror #11
   1855c:	andeq	r8, r1, ip, ror #11
   18560:	andeq	r8, r1, ip, ror #11
   18564:	andeq	r8, r1, ip, ror #11
   18568:	andeq	r8, r1, ip, ror #11
   1856c:	andeq	r8, r1, ip, ror #11
   18570:	andeq	r8, r1, r8, lsr #11
   18574:	andeq	r8, r1, ip, ror #11
   18578:	andeq	r8, r1, ip, ror #11
   1857c:	andeq	r8, r1, ip, ror #11
   18580:	andeq	r8, r1, r8, lsr #11
   18584:	andeq	r8, r1, ip, ror #11
   18588:	andeq	r8, r1, r8, lsr #11
   1858c:	andeq	r8, r1, ip, ror #11
   18590:	andeq	r8, r1, ip, ror #11
   18594:	andeq	r8, r1, ip, ror #11
   18598:	andeq	r8, r1, ip, ror #11
   1859c:	andeq	r8, r1, ip, ror #11
   185a0:	andeq	r8, r1, ip, ror #11
   185a4:	andeq	r8, r1, r8, lsr #11
   185a8:	mov	r1, #48	; 0x30
   185ac:	ldr	r0, [sp, #72]	; 0x48
   185b0:	bl	10e48 <strchr@plt>
   185b4:	cmp	r0, #0
   185b8:	beq	185ec <__assert_fail@plt+0x76d8>
   185bc:	ldrb	r3, [r8, #1]
   185c0:	cmp	r3, #68	; 0x44
   185c4:	beq	18b7c <__assert_fail@plt+0x7c68>
   185c8:	cmp	r3, #105	; 0x69
   185cc:	beq	18834 <__assert_fail@plt+0x7920>
   185d0:	cmp	r3, #66	; 0x42
   185d4:	moveq	r3, #2
   185d8:	movne	r3, #1
   185dc:	moveq	ip, #1000	; 0x3e8
   185e0:	movne	ip, #1024	; 0x400
   185e4:	str	r3, [sp, #12]
   185e8:	b	185f8 <__assert_fail@plt+0x76e4>
   185ec:	mov	r3, #1
   185f0:	mov	ip, #1024	; 0x400
   185f4:	str	r3, [sp, #12]
   185f8:	sub	sl, sl, #66	; 0x42
   185fc:	cmp	sl, #53	; 0x35
   18600:	ldrls	pc, [pc, sl, lsl #2]
   18604:	b	187e0 <__assert_fail@plt+0x78cc>
   18608:	andeq	r8, r1, r8, asr #21
   1860c:	andeq	r8, r1, r0, ror #15
   18610:	andeq	r8, r1, r0, ror #15
   18614:	andeq	r8, r1, r8, ror #20
   18618:	andeq	r8, r1, r0, ror #15
   1861c:	andeq	r8, r1, r4, ror #21
   18620:	andeq	r8, r1, r0, ror #15
   18624:	andeq	r8, r1, r0, ror #15
   18628:	andeq	r8, r1, r0, ror #15
   1862c:	andeq	r8, r1, r8, ror #15
   18630:	andeq	r8, r1, r0, ror #15
   18634:	andeq	r8, r1, r0, lsl sl
   18638:	andeq	r8, r1, r0, ror #15
   1863c:	andeq	r8, r1, r0, ror #15
   18640:			; <UNDEFINED> instruction: 0x000189b4
   18644:	andeq	r8, r1, r0, ror #15
   18648:	andeq	r8, r1, r0, ror #15
   1864c:	andeq	r8, r1, r0, ror #15
   18650:	andeq	r8, r1, r4, asr r9
   18654:	andeq	r8, r1, r0, ror #15
   18658:	andeq	r8, r1, r0, ror #15
   1865c:	andeq	r8, r1, r0, ror #15
   18660:	andeq	r8, r1, r0, ror #15
   18664:	andeq	r8, r1, r8, lsl #17
   18668:	andeq	r8, r1, r0, ror #13
   1866c:	andeq	r8, r1, r0, ror #15
   18670:	andeq	r8, r1, r0, ror #15
   18674:	andeq	r8, r1, r0, ror #15
   18678:	andeq	r8, r1, r0, ror #15
   1867c:	andeq	r8, r1, r0, ror #15
   18680:	andeq	r8, r1, r0, ror #15
   18684:	andeq	r8, r1, r0, ror #15
   18688:	andeq	r8, r1, r8, ror #16
   1868c:	andeq	r8, r1, r8, asr #15
   18690:	andeq	r8, r1, r0, ror #15
   18694:	andeq	r8, r1, r0, ror #15
   18698:	andeq	r8, r1, r0, ror #15
   1869c:	andeq	r8, r1, r4, ror #21
   186a0:	andeq	r8, r1, r0, ror #15
   186a4:	andeq	r8, r1, r0, ror #15
   186a8:	andeq	r8, r1, r0, ror #15
   186ac:	andeq	r8, r1, r8, ror #15
   186b0:	andeq	r8, r1, r0, ror #15
   186b4:	andeq	r8, r1, r0, lsl sl
   186b8:	andeq	r8, r1, r0, ror #15
   186bc:	andeq	r8, r1, r0, ror #15
   186c0:	andeq	r8, r1, r0, ror #15
   186c4:	andeq	r8, r1, r0, ror #15
   186c8:	andeq	r8, r1, r0, ror #15
   186cc:	andeq	r8, r1, r0, ror #15
   186d0:	andeq	r8, r1, r4, asr r9
   186d4:	andeq	r8, r1, r0, ror #15
   186d8:	andeq	r8, r1, r0, ror #15
   186dc:	andeq	r8, r1, r0, asr r8
   186e0:	asr	r3, ip, #31
   186e4:	mov	r2, ip
   186e8:	cmp	r7, #0
   186ec:	mov	r1, #0
   186f0:	strd	r2, [sp]
   186f4:	bne	18c34 <__assert_fail@plt+0x7d20>
   186f8:	umull	r6, r7, r6, ip
   186fc:	mov	r2, r6
   18700:	mov	r3, r7
   18704:	cmp	r1, #0
   18708:	bne	18b48 <__assert_fail@plt+0x7c34>
   1870c:	cmp	r3, #0
   18710:	mov	lr, r1
   18714:	bne	18d60 <__assert_fail@plt+0x7e4c>
   18718:	umull	r2, r3, r2, ip
   1871c:	mov	r0, r2
   18720:	mov	r1, r3
   18724:	cmp	lr, #0
   18728:	bne	18b48 <__assert_fail@plt+0x7c34>
   1872c:	cmp	r1, #0
   18730:	bne	18d3c <__assert_fail@plt+0x7e28>
   18734:	umull	r0, r1, r0, ip
   18738:	mov	r2, r0
   1873c:	mov	r3, r1
   18740:	cmp	lr, #0
   18744:	bne	18b48 <__assert_fail@plt+0x7c34>
   18748:	cmp	r3, #0
   1874c:	bne	189ec <__assert_fail@plt+0x7ad8>
   18750:	umull	r2, r3, r2, ip
   18754:	mov	r0, r2
   18758:	mov	r1, r3
   1875c:	cmp	lr, #0
   18760:	bne	18b48 <__assert_fail@plt+0x7c34>
   18764:	cmp	r1, #0
   18768:	bne	18bec <__assert_fail@plt+0x7cd8>
   1876c:	umull	r0, r1, r0, ip
   18770:	mov	r2, r0
   18774:	mov	r3, r1
   18778:	cmp	lr, #0
   1877c:	bne	18b48 <__assert_fail@plt+0x7c34>
   18780:	cmp	r3, #0
   18784:	mov	r7, lr
   18788:	bne	18bc8 <__assert_fail@plt+0x7cb4>
   1878c:	umull	r2, r3, r2, ip
   18790:	mov	r6, r2
   18794:	mov	lr, r3
   18798:	cmp	r7, #0
   1879c:	bne	18b48 <__assert_fail@plt+0x7c34>
   187a0:	cmp	lr, #0
   187a4:	bne	18b8c <__assert_fail@plt+0x7c78>
   187a8:	umull	r2, r3, r6, ip
   187ac:	mov	r0, r2
   187b0:	mov	r2, r3
   187b4:	subs	r3, r7, #0
   187b8:	bne	18b48 <__assert_fail@plt+0x7c34>
   187bc:	mov	r6, r0
   187c0:	mov	r7, r2
   187c4:	orr	r4, r4, r3
   187c8:	ldr	r2, [sp, #12]
   187cc:	add	r3, r8, r2
   187d0:	str	r3, [r5]
   187d4:	ldrb	r3, [r8, r2]
   187d8:	cmp	r3, #0
   187dc:	beq	18464 <__assert_fail@plt+0x7550>
   187e0:	orr	r4, r4, #2
   187e4:	b	18464 <__assert_fail@plt+0x7550>
   187e8:	cmp	r7, #0
   187ec:	asr	r1, ip, #31
   187f0:	mov	lr, #0
   187f4:	bne	18b58 <__assert_fail@plt+0x7c44>
   187f8:	umull	r2, r3, r6, ip
   187fc:	mov	r6, r2
   18800:	mov	r7, r3
   18804:	cmp	lr, #0
   18808:	beq	187c8 <__assert_fail@plt+0x78b4>
   1880c:	mvn	r6, #0
   18810:	mov	r4, #1
   18814:	mov	r7, r6
   18818:	b	187c8 <__assert_fail@plt+0x78b4>
   1881c:	mov	r0, r3
   18820:	mov	r1, sl
   18824:	bl	10e48 <strchr@plt>
   18828:	cmp	r0, #0
   1882c:	bne	184d8 <__assert_fail@plt+0x75c4>
   18830:	b	187e0 <__assert_fail@plt+0x78cc>
   18834:	ldrb	r3, [r8, #2]
   18838:	mov	ip, #1024	; 0x400
   1883c:	cmp	r3, #66	; 0x42
   18840:	movne	r3, #1
   18844:	moveq	r3, #3
   18848:	str	r3, [sp, #12]
   1884c:	b	185f8 <__assert_fail@plt+0x76e4>
   18850:	lsr	r3, r7, #31
   18854:	adds	r6, r6, r6
   18858:	adc	r7, r7, r7
   1885c:	cmp	r3, #0
   18860:	beq	187c8 <__assert_fail@plt+0x78b4>
   18864:	b	1880c <__assert_fail@plt+0x78f8>
   18868:	lsr	r3, r7, #23
   1886c:	lsl	r7, r7, #9
   18870:	cmp	r3, #0
   18874:	lsl	r3, r6, #9
   18878:	orr	r7, r7, r6, lsr #23
   1887c:	bne	1880c <__assert_fail@plt+0x78f8>
   18880:	mov	r6, r3
   18884:	b	187c8 <__assert_fail@plt+0x78b4>
   18888:	asr	r3, ip, #31
   1888c:	mov	r2, ip
   18890:	cmp	r7, #0
   18894:	mov	r1, #0
   18898:	strd	r2, [sp]
   1889c:	bne	18ca8 <__assert_fail@plt+0x7d94>
   188a0:	umull	r6, r7, r6, ip
   188a4:	mov	r0, r6
   188a8:	mov	fp, r7
   188ac:	cmp	r1, #0
   188b0:	bne	18b48 <__assert_fail@plt+0x7c34>
   188b4:	cmp	fp, #0
   188b8:	mov	lr, r1
   188bc:	bne	18e38 <__assert_fail@plt+0x7f24>
   188c0:	umull	r0, r1, r0, ip
   188c4:	mov	r2, r0
   188c8:	mov	r3, r1
   188cc:	cmp	lr, #0
   188d0:	bne	18b48 <__assert_fail@plt+0x7c34>
   188d4:	cmp	r3, #0
   188d8:	bne	18e60 <__assert_fail@plt+0x7f4c>
   188dc:	umull	r2, r3, r2, ip
   188e0:	mov	r0, r2
   188e4:	mov	r1, r3
   188e8:	cmp	lr, #0
   188ec:	bne	18b48 <__assert_fail@plt+0x7c34>
   188f0:	cmp	r1, #0
   188f4:	bne	18de0 <__assert_fail@plt+0x7ecc>
   188f8:	umull	r0, r1, r0, ip
   188fc:	mov	r2, r0
   18900:	mov	r3, r1
   18904:	cmp	lr, #0
   18908:	bne	18b48 <__assert_fail@plt+0x7c34>
   1890c:	cmp	r3, #0
   18910:	bne	18c10 <__assert_fail@plt+0x7cfc>
   18914:	umull	r2, r3, r2, ip
   18918:	mov	r0, r2
   1891c:	mov	r1, r3
   18920:	cmp	lr, #0
   18924:	bne	18b48 <__assert_fail@plt+0x7c34>
   18928:	cmp	r1, #0
   1892c:	beq	1876c <__assert_fail@plt+0x7858>
   18930:	umull	r6, r7, r0, ip
   18934:	mov	fp, lr
   18938:	mov	sl, r7
   1893c:	umlal	sl, fp, r1, ip
   18940:	cmp	fp, #0
   18944:	bne	19048 <__assert_fail@plt+0x8134>
   18948:	mov	r2, r6
   1894c:	mov	r3, sl
   18950:	b	18778 <__assert_fail@plt+0x7864>
   18954:	asr	r3, ip, #31
   18958:	mov	r2, ip
   1895c:	cmp	r7, #0
   18960:	mov	r1, #0
   18964:	strd	r2, [sp]
   18968:	bne	18ccc <__assert_fail@plt+0x7db8>
   1896c:	umull	r6, r7, r6, ip
   18970:	mov	r0, r6
   18974:	mov	fp, r7
   18978:	cmp	r1, #0
   1897c:	bne	18b48 <__assert_fail@plt+0x7c34>
   18980:	cmp	fp, #0
   18984:	mov	lr, r1
   18988:	beq	1876c <__assert_fail@plt+0x7858>
   1898c:	umull	r6, r7, r0, ip
   18990:	mov	r3, r1
   18994:	mov	r2, r7
   18998:	umlal	r2, r3, fp, ip
   1899c:	cmp	r3, #0
   189a0:	strd	r2, [sp, #16]
   189a4:	bne	18f2c <__assert_fail@plt+0x8018>
   189a8:	mov	r2, r6
   189ac:	ldr	r3, [sp, #16]
   189b0:	b	18778 <__assert_fail@plt+0x7864>
   189b4:	asr	r3, ip, #31
   189b8:	mov	r2, ip
   189bc:	cmp	r7, #0
   189c0:	mov	r1, #0
   189c4:	strd	r2, [sp]
   189c8:	bne	18d14 <__assert_fail@plt+0x7e00>
   189cc:	umull	r6, r7, r6, ip
   189d0:	mov	r2, r6
   189d4:	mov	r3, r7
   189d8:	cmp	r1, #0
   189dc:	bne	18b48 <__assert_fail@plt+0x7c34>
   189e0:	cmp	r3, #0
   189e4:	mov	lr, r1
   189e8:	beq	18750 <__assert_fail@plt+0x783c>
   189ec:	umull	r6, r7, r2, ip
   189f0:	mov	fp, lr
   189f4:	mov	sl, r7
   189f8:	umlal	sl, fp, r3, ip
   189fc:	cmp	fp, #0
   18a00:	bne	1900c <__assert_fail@plt+0x80f8>
   18a04:	mov	r0, r6
   18a08:	mov	r1, sl
   18a0c:	b	1875c <__assert_fail@plt+0x7848>
   18a10:	asr	r3, ip, #31
   18a14:	mov	r2, ip
   18a18:	cmp	r7, #0
   18a1c:	mov	r1, #0
   18a20:	strd	r2, [sp]
   18a24:	bne	18cf0 <__assert_fail@plt+0x7ddc>
   18a28:	umull	r6, r7, r6, ip
   18a2c:	mov	sl, r6
   18a30:	mov	lr, r7
   18a34:	cmp	r1, #0
   18a38:	bne	1880c <__assert_fail@plt+0x78f8>
   18a3c:	cmp	lr, #0
   18a40:	mov	r7, r1
   18a44:	bne	18e04 <__assert_fail@plt+0x7ef0>
   18a48:	umull	sl, fp, sl, ip
   18a4c:	mov	r0, sl
   18a50:	mov	r2, fp
   18a54:	cmp	r7, #0
   18a58:	mov	r6, r0
   18a5c:	mov	r7, r2
   18a60:	beq	187c8 <__assert_fail@plt+0x78b4>
   18a64:	b	1880c <__assert_fail@plt+0x78f8>
   18a68:	asr	r3, ip, #31
   18a6c:	mov	r2, ip
   18a70:	cmp	r7, #0
   18a74:	mov	r1, #0
   18a78:	strd	r2, [sp]
   18a7c:	bne	18c84 <__assert_fail@plt+0x7d70>
   18a80:	umull	r6, r7, r6, ip
   18a84:	mov	r0, r6
   18a88:	mov	fp, r7
   18a8c:	cmp	r1, #0
   18a90:	bne	18b48 <__assert_fail@plt+0x7c34>
   18a94:	cmp	fp, #0
   18a98:	mov	lr, r1
   18a9c:	beq	188f8 <__assert_fail@plt+0x79e4>
   18aa0:	umull	r6, r7, r0, ip
   18aa4:	mov	r3, r1
   18aa8:	mov	r2, r7
   18aac:	umlal	r2, r3, fp, ip
   18ab0:	cmp	r3, #0
   18ab4:	strd	r2, [sp, #16]
   18ab8:	bne	18f9c <__assert_fail@plt+0x8088>
   18abc:	mov	r2, r6
   18ac0:	ldr	r3, [sp, #16]
   18ac4:	b	18904 <__assert_fail@plt+0x79f0>
   18ac8:	lsr	r3, r7, #22
   18acc:	lsl	r7, r7, #10
   18ad0:	cmp	r3, #0
   18ad4:	lsl	r3, r6, #10
   18ad8:	orr	r7, r7, r6, lsr #22
   18adc:	beq	18880 <__assert_fail@plt+0x796c>
   18ae0:	b	1880c <__assert_fail@plt+0x78f8>
   18ae4:	asr	r3, ip, #31
   18ae8:	mov	r2, ip
   18aec:	cmp	r7, #0
   18af0:	mov	r1, #0
   18af4:	strd	r2, [sp]
   18af8:	bne	18c5c <__assert_fail@plt+0x7d48>
   18afc:	umull	r6, r7, r6, ip
   18b00:	mov	r2, r6
   18b04:	mov	r3, r7
   18b08:	cmp	r1, #0
   18b0c:	bne	1880c <__assert_fail@plt+0x78f8>
   18b10:	cmp	r3, #0
   18b14:	mov	r7, r1
   18b18:	bne	18dc0 <__assert_fail@plt+0x7eac>
   18b1c:	umull	r2, r3, r2, ip
   18b20:	mov	r6, r2
   18b24:	mov	lr, r3
   18b28:	cmp	r7, #0
   18b2c:	bne	1880c <__assert_fail@plt+0x78f8>
   18b30:	cmp	lr, #0
   18b34:	bne	18d84 <__assert_fail@plt+0x7e70>
   18b38:	umull	r2, r3, r6, ip
   18b3c:	mov	r0, r2
   18b40:	mov	r2, r3
   18b44:	b	18a54 <__assert_fail@plt+0x7b40>
   18b48:	mvn	r6, #0
   18b4c:	mov	r3, #1
   18b50:	mov	r7, r6
   18b54:	b	187c4 <__assert_fail@plt+0x78b0>
   18b58:	umull	sl, fp, r6, ip
   18b5c:	mov	r3, lr
   18b60:	mov	r2, fp
   18b64:	umlal	r2, r3, r7, ip
   18b68:	cmp	r3, #0
   18b6c:	bne	18f64 <__assert_fail@plt+0x8050>
   18b70:	mov	r6, sl
   18b74:	mov	r7, r2
   18b78:	b	18804 <__assert_fail@plt+0x78f0>
   18b7c:	mov	r3, #2
   18b80:	mov	ip, #1000	; 0x3e8
   18b84:	str	r3, [sp, #12]
   18b88:	b	185f8 <__assert_fail@plt+0x76e4>
   18b8c:	umull	r0, r1, r6, ip
   18b90:	mov	r3, r7
   18b94:	mov	r2, r1
   18b98:	strd	r0, [sp, #16]
   18b9c:	umlal	r2, r3, lr, ip
   18ba0:	cmp	r3, #0
   18ba4:	beq	187b4 <__assert_fail@plt+0x78a0>
   18ba8:	ldrd	sl, [sp]
   18bac:	mov	r7, #1
   18bb0:	ldr	r0, [sp, #16]
   18bb4:	ldr	r3, [sp, #20]
   18bb8:	mul	r2, r6, fp
   18bbc:	mla	r2, lr, sl, r2
   18bc0:	add	r2, r2, r3
   18bc4:	b	187b4 <__assert_fail@plt+0x78a0>
   18bc8:	umull	sl, fp, r2, ip
   18bcc:	mov	r1, lr
   18bd0:	mov	r0, fp
   18bd4:	umlal	r0, r1, r3, ip
   18bd8:	cmp	r1, #0
   18bdc:	bne	18ebc <__assert_fail@plt+0x7fa8>
   18be0:	mov	r6, sl
   18be4:	mov	lr, r0
   18be8:	b	18798 <__assert_fail@plt+0x7884>
   18bec:	umull	sl, fp, r0, ip
   18bf0:	mov	r7, lr
   18bf4:	mov	r6, fp
   18bf8:	umlal	r6, r7, r1, ip
   18bfc:	cmp	r7, #0
   18c00:	bne	19064 <__assert_fail@plt+0x8150>
   18c04:	mov	r2, sl
   18c08:	mov	r3, r6
   18c0c:	b	18778 <__assert_fail@plt+0x7864>
   18c10:	umull	sl, fp, r2, ip
   18c14:	mov	r7, lr
   18c18:	mov	r6, fp
   18c1c:	umlal	r6, r7, r3, ip
   18c20:	cmp	r7, #0
   18c24:	bne	18ef4 <__assert_fail@plt+0x7fe0>
   18c28:	mov	r0, sl
   18c2c:	mov	r1, r6
   18c30:	b	18920 <__assert_fail@plt+0x7a0c>
   18c34:	umull	sl, fp, r6, ip
   18c38:	mov	r3, r1
   18c3c:	mov	r2, fp
   18c40:	umlal	r2, r3, r7, ip
   18c44:	cmp	r3, #0
   18c48:	strd	r2, [sp, #16]
   18c4c:	bne	18ed8 <__assert_fail@plt+0x7fc4>
   18c50:	mov	r2, sl
   18c54:	ldr	r3, [sp, #16]
   18c58:	b	18704 <__assert_fail@plt+0x77f0>
   18c5c:	umull	sl, fp, r6, ip
   18c60:	mov	r3, r1
   18c64:	mov	r2, fp
   18c68:	umlal	r2, r3, r7, ip
   18c6c:	cmp	r3, #0
   18c70:	strd	r2, [sp, #16]
   18c74:	bne	18fb8 <__assert_fail@plt+0x80a4>
   18c78:	mov	r2, sl
   18c7c:	ldr	r3, [sp, #16]
   18c80:	b	18b08 <__assert_fail@plt+0x7bf4>
   18c84:	umull	sl, fp, r6, ip
   18c88:	mov	r3, r1
   18c8c:	mov	r2, fp
   18c90:	umlal	r2, r3, r7, ip
   18c94:	cmp	r3, #0
   18c98:	bne	18e84 <__assert_fail@plt+0x7f70>
   18c9c:	mov	r0, sl
   18ca0:	mov	fp, r2
   18ca4:	b	18a8c <__assert_fail@plt+0x7b78>
   18ca8:	umull	sl, fp, r6, ip
   18cac:	mov	r3, r1
   18cb0:	mov	r2, fp
   18cb4:	umlal	r2, r3, r7, ip
   18cb8:	cmp	r3, #0
   18cbc:	bne	18f48 <__assert_fail@plt+0x8034>
   18cc0:	mov	r0, sl
   18cc4:	mov	fp, r2
   18cc8:	b	188ac <__assert_fail@plt+0x7998>
   18ccc:	umull	sl, fp, r6, ip
   18cd0:	mov	r3, r1
   18cd4:	mov	r2, fp
   18cd8:	umlal	r2, r3, r7, ip
   18cdc:	cmp	r3, #0
   18ce0:	bne	18fd4 <__assert_fail@plt+0x80c0>
   18ce4:	mov	r0, sl
   18ce8:	mov	fp, r2
   18cec:	b	18978 <__assert_fail@plt+0x7a64>
   18cf0:	umull	sl, fp, r6, ip
   18cf4:	mov	r3, r1
   18cf8:	mov	r2, fp
   18cfc:	strd	sl, [sp, #16]
   18d00:	umlal	r2, r3, r7, ip
   18d04:	cmp	r3, #0
   18d08:	bne	18f7c <__assert_fail@plt+0x8068>
   18d0c:	mov	lr, r2
   18d10:	b	18a34 <__assert_fail@plt+0x7b20>
   18d14:	umull	sl, fp, r6, ip
   18d18:	mov	r3, r1
   18d1c:	mov	r2, fp
   18d20:	umlal	r2, r3, r7, ip
   18d24:	cmp	r3, #0
   18d28:	strd	r2, [sp, #16]
   18d2c:	bne	19080 <__assert_fail@plt+0x816c>
   18d30:	mov	r2, sl
   18d34:	ldr	r3, [sp, #16]
   18d38:	b	189d8 <__assert_fail@plt+0x7ac4>
   18d3c:	umull	sl, fp, r0, ip
   18d40:	mov	r7, lr
   18d44:	mov	r6, fp
   18d48:	umlal	r6, r7, r1, ip
   18d4c:	cmp	r7, #0
   18d50:	bne	1909c <__assert_fail@plt+0x8188>
   18d54:	mov	r2, sl
   18d58:	mov	r3, r6
   18d5c:	b	18740 <__assert_fail@plt+0x782c>
   18d60:	umull	r6, r7, r2, ip
   18d64:	mov	fp, r1
   18d68:	mov	sl, r7
   18d6c:	umlal	sl, fp, r3, ip
   18d70:	cmp	fp, #0
   18d74:	bne	18f10 <__assert_fail@plt+0x7ffc>
   18d78:	mov	r0, r6
   18d7c:	mov	r1, sl
   18d80:	b	18724 <__assert_fail@plt+0x7810>
   18d84:	umull	r0, r1, r6, ip
   18d88:	mov	r3, r7
   18d8c:	mov	r2, r1
   18d90:	strd	r0, [sp, #16]
   18d94:	umlal	r2, r3, lr, ip
   18d98:	cmp	r3, #0
   18d9c:	beq	18a54 <__assert_fail@plt+0x7b40>
   18da0:	ldrd	sl, [sp]
   18da4:	mov	r7, #1
   18da8:	ldr	r0, [sp, #16]
   18dac:	ldr	r3, [sp, #20]
   18db0:	mul	r2, r6, fp
   18db4:	mla	r2, lr, sl, r2
   18db8:	add	r2, r2, r3
   18dbc:	b	18a54 <__assert_fail@plt+0x7b40>
   18dc0:	umull	sl, fp, r2, ip
   18dc4:	mov	r0, fp
   18dc8:	umlal	r0, r1, r3, ip
   18dcc:	cmp	r1, #0
   18dd0:	bne	190b8 <__assert_fail@plt+0x81a4>
   18dd4:	mov	r6, sl
   18dd8:	mov	lr, r0
   18ddc:	b	18b28 <__assert_fail@plt+0x7c14>
   18de0:	umull	r6, r7, r0, ip
   18de4:	mov	fp, lr
   18de8:	mov	sl, r7
   18dec:	umlal	sl, fp, r1, ip
   18df0:	cmp	fp, #0
   18df4:	bne	18ff0 <__assert_fail@plt+0x80dc>
   18df8:	mov	r2, r6
   18dfc:	mov	r3, sl
   18e00:	b	18904 <__assert_fail@plt+0x79f0>
   18e04:	umull	r0, r1, sl, ip
   18e08:	mov	r3, r7
   18e0c:	mov	r2, r1
   18e10:	umlal	r2, r3, lr, ip
   18e14:	cmp	r3, #0
   18e18:	beq	18a54 <__assert_fail@plt+0x7b40>
   18e1c:	ldr	r3, [sp, #4]
   18e20:	mov	r7, #1
   18e24:	mul	r2, sl, r3
   18e28:	ldr	r3, [sp]
   18e2c:	mla	r2, lr, r3, r2
   18e30:	add	r2, r2, r1
   18e34:	b	18a54 <__assert_fail@plt+0x7b40>
   18e38:	umull	r6, r7, r0, ip
   18e3c:	mov	r3, r1
   18e40:	mov	r2, r7
   18e44:	umlal	r2, r3, fp, ip
   18e48:	cmp	r3, #0
   18e4c:	strd	r2, [sp, #16]
   18e50:	bne	190d4 <__assert_fail@plt+0x81c0>
   18e54:	mov	r2, r6
   18e58:	ldr	r3, [sp, #16]
   18e5c:	b	188cc <__assert_fail@plt+0x79b8>
   18e60:	umull	sl, fp, r2, ip
   18e64:	mov	r7, lr
   18e68:	mov	r6, fp
   18e6c:	umlal	r6, r7, r3, ip
   18e70:	cmp	r7, #0
   18e74:	bne	18ea0 <__assert_fail@plt+0x7f8c>
   18e78:	mov	r0, sl
   18e7c:	mov	r1, r6
   18e80:	b	188e8 <__assert_fail@plt+0x79d4>
   18e84:	ldrd	r2, [sp]
   18e88:	mov	r0, sl
   18e8c:	mov	r1, #1
   18e90:	mul	r6, r6, r3
   18e94:	mla	r7, r2, r7, r6
   18e98:	add	fp, r7, fp
   18e9c:	b	18a8c <__assert_fail@plt+0x7b78>
   18ea0:	ldrd	r6, [sp]
   18ea4:	mov	r0, sl
   18ea8:	mov	lr, #1
   18eac:	mul	r2, r2, r7
   18eb0:	mla	r1, r3, r6, r2
   18eb4:	add	r1, r1, fp
   18eb8:	b	188e8 <__assert_fail@plt+0x79d4>
   18ebc:	ldrd	r0, [sp]
   18ec0:	mov	r6, sl
   18ec4:	mov	r7, #1
   18ec8:	mul	r2, r2, r1
   18ecc:	mla	lr, r3, r0, r2
   18ed0:	add	lr, lr, fp
   18ed4:	b	18798 <__assert_fail@plt+0x7884>
   18ed8:	ldm	sp, {r0, r3}
   18edc:	mov	r2, sl
   18ee0:	mov	r1, #1
   18ee4:	mul	r3, r6, r3
   18ee8:	mla	r3, r0, r7, r3
   18eec:	add	r3, r3, fp
   18ef0:	b	18704 <__assert_fail@plt+0x77f0>
   18ef4:	ldrd	r6, [sp]
   18ef8:	mov	r0, sl
   18efc:	mov	lr, #1
   18f00:	mul	r2, r2, r7
   18f04:	mla	r1, r3, r6, r2
   18f08:	add	r1, r1, fp
   18f0c:	b	18920 <__assert_fail@plt+0x7a0c>
   18f10:	ldrd	sl, [sp]
   18f14:	mov	r0, r6
   18f18:	mov	lr, #1
   18f1c:	mul	r2, r2, fp
   18f20:	mla	r1, r3, sl, r2
   18f24:	add	r1, r1, r7
   18f28:	b	18724 <__assert_fail@plt+0x7810>
   18f2c:	ldm	sp, {r1, r3}
   18f30:	mov	r2, r6
   18f34:	mov	lr, #1
   18f38:	mul	r3, r0, r3
   18f3c:	mla	r3, fp, r1, r3
   18f40:	add	r3, r3, r7
   18f44:	b	18778 <__assert_fail@plt+0x7864>
   18f48:	ldrd	r2, [sp]
   18f4c:	mov	r0, sl
   18f50:	mov	r1, #1
   18f54:	mul	r6, r6, r3
   18f58:	mla	r7, r2, r7, r6
   18f5c:	add	fp, r7, fp
   18f60:	b	188ac <__assert_fail@plt+0x7998>
   18f64:	mul	r3, r6, r1
   18f68:	mov	lr, #1
   18f6c:	mov	r6, sl
   18f70:	mla	r7, ip, r7, r3
   18f74:	add	r7, r7, fp
   18f78:	b	18804 <__assert_fail@plt+0x78f0>
   18f7c:	ldrd	r2, [sp]
   18f80:	mov	r1, #1
   18f84:	ldr	sl, [sp, #16]
   18f88:	mul	lr, r6, r3
   18f8c:	ldr	r3, [sp, #20]
   18f90:	mla	lr, r2, r7, lr
   18f94:	add	lr, lr, r3
   18f98:	b	18a34 <__assert_fail@plt+0x7b20>
   18f9c:	ldm	sp, {r1, r3}
   18fa0:	mov	r2, r6
   18fa4:	mov	lr, #1
   18fa8:	mul	r3, r0, r3
   18fac:	mla	r3, fp, r1, r3
   18fb0:	add	r3, r3, r7
   18fb4:	b	18904 <__assert_fail@plt+0x79f0>
   18fb8:	ldm	sp, {r0, r3}
   18fbc:	mov	r2, sl
   18fc0:	mov	r1, #1
   18fc4:	mul	r3, r6, r3
   18fc8:	mla	r3, r0, r7, r3
   18fcc:	add	r3, r3, fp
   18fd0:	b	18b08 <__assert_fail@plt+0x7bf4>
   18fd4:	ldrd	r2, [sp]
   18fd8:	mov	r0, sl
   18fdc:	mov	r1, #1
   18fe0:	mul	r6, r6, r3
   18fe4:	mla	r7, r2, r7, r6
   18fe8:	add	fp, r7, fp
   18fec:	b	18978 <__assert_fail@plt+0x7a64>
   18ff0:	ldrd	sl, [sp]
   18ff4:	mov	r2, r6
   18ff8:	mov	lr, #1
   18ffc:	mul	r3, r0, fp
   19000:	mla	r3, r1, sl, r3
   19004:	add	r3, r3, r7
   19008:	b	18904 <__assert_fail@plt+0x79f0>
   1900c:	ldrd	sl, [sp]
   19010:	mov	r0, r6
   19014:	mov	lr, #1
   19018:	mul	r2, r2, fp
   1901c:	mla	r1, r3, sl, r2
   19020:	add	r1, r1, r7
   19024:	b	1875c <__assert_fail@plt+0x7848>
   19028:	movw	r3, #44776	; 0xaee8
   1902c:	movt	r3, #1
   19030:	movw	r1, #44788	; 0xaef4
   19034:	movt	r1, #1
   19038:	movw	r0, #44804	; 0xaf04
   1903c:	movt	r0, #1
   19040:	mov	r2, #85	; 0x55
   19044:	bl	10f14 <__assert_fail@plt>
   19048:	ldrd	sl, [sp]
   1904c:	mov	r2, r6
   19050:	mov	lr, #1
   19054:	mul	r3, r0, fp
   19058:	mla	r3, r1, sl, r3
   1905c:	add	r3, r3, r7
   19060:	b	18778 <__assert_fail@plt+0x7864>
   19064:	ldrd	r6, [sp]
   19068:	mov	r2, sl
   1906c:	mov	lr, #1
   19070:	mul	r3, r0, r7
   19074:	mla	r3, r1, r6, r3
   19078:	add	r3, r3, fp
   1907c:	b	18778 <__assert_fail@plt+0x7864>
   19080:	ldm	sp, {r0, r3}
   19084:	mov	r2, sl
   19088:	mov	r1, #1
   1908c:	mul	r3, r6, r3
   19090:	mla	r3, r0, r7, r3
   19094:	add	r3, r3, fp
   19098:	b	189d8 <__assert_fail@plt+0x7ac4>
   1909c:	ldrd	r6, [sp]
   190a0:	mov	r2, sl
   190a4:	mov	lr, #1
   190a8:	mul	r3, r0, r7
   190ac:	mla	r3, r1, r6, r3
   190b0:	add	r3, r3, fp
   190b4:	b	18740 <__assert_fail@plt+0x782c>
   190b8:	ldrd	r0, [sp]
   190bc:	mov	r6, sl
   190c0:	mov	r7, #1
   190c4:	mul	r2, r2, r1
   190c8:	mla	lr, r3, r0, r2
   190cc:	add	lr, lr, fp
   190d0:	b	18b28 <__assert_fail@plt+0x7c14>
   190d4:	ldm	sp, {r1, r3}
   190d8:	mov	r2, r6
   190dc:	mov	lr, #1
   190e0:	mul	r3, r0, r3
   190e4:	mla	r3, fp, r1, r3
   190e8:	add	r3, r3, r7
   190ec:	b	188cc <__assert_fail@plt+0x79b8>
   190f0:	cmp	r1, #0
   190f4:	cmpne	r0, #0
   190f8:	beq	19144 <__assert_fail@plt+0x8230>
   190fc:	strd	r4, [sp, #-16]!
   19100:	umull	r4, r5, r0, r1
   19104:	str	r6, [sp, #8]
   19108:	str	lr, [sp, #12]
   1910c:	adds	r3, r5, #0
   19110:	movne	r3, #1
   19114:	cmp	r4, #0
   19118:	blt	19124 <__assert_fail@plt+0x8210>
   1911c:	cmp	r3, #0
   19120:	beq	19150 <__assert_fail@plt+0x823c>
   19124:	bl	10e54 <__errno_location@plt>
   19128:	mov	r3, #12
   1912c:	ldrd	r4, [sp]
   19130:	ldr	r6, [sp, #8]
   19134:	add	sp, sp, #12
   19138:	str	r3, [r0]
   1913c:	mov	r0, #0
   19140:	pop	{pc}		; (ldr pc, [sp], #4)
   19144:	mov	r1, #1
   19148:	mov	r0, r1
   1914c:	b	10ca4 <calloc@plt>
   19150:	ldrd	r4, [sp]
   19154:	ldr	r6, [sp, #8]
   19158:	ldr	lr, [sp, #12]
   1915c:	add	sp, sp, #16
   19160:	b	10ca4 <calloc@plt>
   19164:	cmp	r0, #0
   19168:	beq	19174 <__assert_fail@plt+0x8260>
   1916c:	blt	1917c <__assert_fail@plt+0x8268>
   19170:	b	10dd0 <malloc@plt>
   19174:	mov	r0, #1
   19178:	b	10dd0 <malloc@plt>
   1917c:	str	r4, [sp, #-8]!
   19180:	str	lr, [sp, #4]
   19184:	bl	10e54 <__errno_location@plt>
   19188:	mov	r3, #12
   1918c:	ldr	r4, [sp]
   19190:	add	sp, sp, #4
   19194:	str	r3, [r0]
   19198:	mov	r0, #0
   1919c:	pop	{pc}		; (ldr pc, [sp], #4)
   191a0:	cmp	r0, #0
   191a4:	beq	191cc <__assert_fail@plt+0x82b8>
   191a8:	cmp	r1, #0
   191ac:	str	r4, [sp, #-8]!
   191b0:	str	lr, [sp, #4]
   191b4:	beq	191d4 <__assert_fail@plt+0x82c0>
   191b8:	blt	191e8 <__assert_fail@plt+0x82d4>
   191bc:	ldr	r4, [sp]
   191c0:	ldr	lr, [sp, #4]
   191c4:	add	sp, sp, #8
   191c8:	b	10d64 <realloc@plt>
   191cc:	mov	r0, r1
   191d0:	b	19164 <__assert_fail@plt+0x8250>
   191d4:	bl	13a70 <__assert_fail@plt+0x2b5c>
   191d8:	ldr	r4, [sp]
   191dc:	add	sp, sp, #4
   191e0:	mov	r0, #0
   191e4:	pop	{pc}		; (ldr pc, [sp], #4)
   191e8:	bl	10e54 <__errno_location@plt>
   191ec:	mov	r3, #12
   191f0:	str	r3, [r0]
   191f4:	b	191d8 <__assert_fail@plt+0x82c4>
   191f8:	strd	r4, [sp, #-16]!
   191fc:	mov	r4, r0
   19200:	str	r6, [sp, #8]
   19204:	str	lr, [sp, #12]
   19208:	bl	10dac <__fpending@plt>
   1920c:	ldr	r5, [r4]
   19210:	mov	r6, r0
   19214:	mov	r0, r4
   19218:	bl	19280 <__assert_fail@plt+0x836c>
   1921c:	mov	r4, r0
   19220:	and	r5, r5, #32
   19224:	cmp	r5, #0
   19228:	bne	19260 <__assert_fail@plt+0x834c>
   1922c:	cmp	r0, #0
   19230:	beq	1924c <__assert_fail@plt+0x8338>
   19234:	cmp	r6, #0
   19238:	bne	19278 <__assert_fail@plt+0x8364>
   1923c:	bl	10e54 <__errno_location@plt>
   19240:	ldr	r4, [r0]
   19244:	subs	r4, r4, #9
   19248:	mvnne	r4, #0
   1924c:	mov	r0, r4
   19250:	ldrd	r4, [sp]
   19254:	ldr	r6, [sp, #8]
   19258:	add	sp, sp, #12
   1925c:	pop	{pc}		; (ldr pc, [sp], #4)
   19260:	cmp	r0, #0
   19264:	bne	19278 <__assert_fail@plt+0x8364>
   19268:	bl	10e54 <__errno_location@plt>
   1926c:	str	r4, [r0]
   19270:	mvn	r4, #0
   19274:	b	1924c <__assert_fail@plt+0x8338>
   19278:	mvn	r4, #0
   1927c:	b	1924c <__assert_fail@plt+0x8338>
   19280:	strd	r4, [sp, #-12]!
   19284:	mov	r4, r0
   19288:	str	lr, [sp, #8]
   1928c:	sub	sp, sp, #12
   19290:	bl	10e90 <fileno@plt>
   19294:	cmp	r0, #0
   19298:	mov	r0, r4
   1929c:	blt	19320 <__assert_fail@plt+0x840c>
   192a0:	bl	10de8 <__freading@plt>
   192a4:	cmp	r0, #0
   192a8:	bne	192ec <__assert_fail@plt+0x83d8>
   192ac:	mov	r0, r4
   192b0:	bl	19334 <__assert_fail@plt+0x8420>
   192b4:	cmp	r0, #0
   192b8:	beq	1931c <__assert_fail@plt+0x8408>
   192bc:	bl	10e54 <__errno_location@plt>
   192c0:	mov	r5, r0
   192c4:	mov	r0, r4
   192c8:	ldr	r4, [r5]
   192cc:	bl	10ea8 <fclose@plt>
   192d0:	cmp	r4, #0
   192d4:	mvnne	r0, #0
   192d8:	strne	r4, [r5]
   192dc:	add	sp, sp, #12
   192e0:	ldrd	r4, [sp]
   192e4:	add	sp, sp, #8
   192e8:	pop	{pc}		; (ldr pc, [sp], #4)
   192ec:	mov	r0, r4
   192f0:	bl	10e90 <fileno@plt>
   192f4:	mov	r1, #1
   192f8:	mov	r2, #0
   192fc:	mov	r3, #0
   19300:	str	r1, [sp]
   19304:	bl	10d94 <lseek64@plt>
   19308:	mvn	r3, #0
   1930c:	mvn	r2, #0
   19310:	cmp	r1, r3
   19314:	cmpeq	r0, r2
   19318:	bne	192ac <__assert_fail@plt+0x8398>
   1931c:	mov	r0, r4
   19320:	add	sp, sp, #12
   19324:	ldrd	r4, [sp]
   19328:	ldr	lr, [sp, #8]
   1932c:	add	sp, sp, #12
   19330:	b	10ea8 <fclose@plt>
   19334:	str	r4, [sp, #-8]!
   19338:	subs	r4, r0, #0
   1933c:	str	lr, [sp, #4]
   19340:	sub	sp, sp, #8
   19344:	beq	19360 <__assert_fail@plt+0x844c>
   19348:	bl	10de8 <__freading@plt>
   1934c:	cmp	r0, #0
   19350:	beq	19360 <__assert_fail@plt+0x844c>
   19354:	ldr	r3, [r4]
   19358:	tst	r3, #256	; 0x100
   1935c:	bne	19378 <__assert_fail@plt+0x8464>
   19360:	mov	r0, r4
   19364:	add	sp, sp, #8
   19368:	ldr	r4, [sp]
   1936c:	ldr	lr, [sp, #4]
   19370:	add	sp, sp, #8
   19374:	b	10ce0 <fflush@plt>
   19378:	mov	r1, #1
   1937c:	mov	r2, #0
   19380:	mov	r3, #0
   19384:	mov	r0, r4
   19388:	str	r1, [sp]
   1938c:	bl	19394 <__assert_fail@plt+0x8480>
   19390:	b	19360 <__assert_fail@plt+0x844c>
   19394:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19398:	mov	r4, r0
   1939c:	ldr	ip, [r0, #4]
   193a0:	strd	r6, [sp, #8]
   193a4:	str	lr, [sp, #20]
   193a8:	ldr	lr, [r0, #8]
   193ac:	str	r8, [sp, #16]
   193b0:	sub	sp, sp, #8
   193b4:	ldr	r5, [sp, #32]
   193b8:	cmp	lr, ip
   193bc:	beq	193e4 <__assert_fail@plt+0x84d0>
   193c0:	mov	r0, r4
   193c4:	str	r5, [sp, #32]
   193c8:	add	sp, sp, #8
   193cc:	ldrd	r4, [sp]
   193d0:	ldrd	r6, [sp, #8]
   193d4:	ldr	r8, [sp, #16]
   193d8:	ldr	lr, [sp, #20]
   193dc:	add	sp, sp, #24
   193e0:	b	10eb4 <fseeko64@plt>
   193e4:	ldr	ip, [r0, #16]
   193e8:	ldr	lr, [r0, #20]
   193ec:	cmp	lr, ip
   193f0:	bne	193c0 <__assert_fail@plt+0x84ac>
   193f4:	ldr	r8, [r0, #36]	; 0x24
   193f8:	cmp	r8, #0
   193fc:	bne	193c0 <__assert_fail@plt+0x84ac>
   19400:	mov	r6, r2
   19404:	mov	r7, r3
   19408:	bl	10e90 <fileno@plt>
   1940c:	mov	r2, r6
   19410:	mov	r3, r7
   19414:	str	r5, [sp]
   19418:	bl	10d94 <lseek64@plt>
   1941c:	mvn	r3, #0
   19420:	mvn	r2, #0
   19424:	cmp	r1, r3
   19428:	cmpeq	r0, r2
   1942c:	beq	1945c <__assert_fail@plt+0x8548>
   19430:	ldr	r3, [r4]
   19434:	strd	r0, [r4, #80]	; 0x50
   19438:	bic	r3, r3, #16
   1943c:	str	r3, [r4]
   19440:	mov	r0, r8
   19444:	add	sp, sp, #8
   19448:	ldrd	r4, [sp]
   1944c:	ldrd	r6, [sp, #8]
   19450:	ldr	r8, [sp, #16]
   19454:	add	sp, sp, #20
   19458:	pop	{pc}		; (ldr pc, [sp], #4)
   1945c:	mvn	r8, #0
   19460:	b	19440 <__assert_fail@plt+0x852c>
   19464:	mov	r0, #14
   19468:	str	r4, [sp, #-8]!
   1946c:	str	lr, [sp, #4]
   19470:	bl	10ed8 <nl_langinfo@plt>
   19474:	cmp	r0, #0
   19478:	beq	1949c <__assert_fail@plt+0x8588>
   1947c:	ldrb	r2, [r0]
   19480:	movw	r3, #44844	; 0xaf2c
   19484:	movt	r3, #1
   19488:	ldr	r4, [sp]
   1948c:	add	sp, sp, #4
   19490:	cmp	r2, #0
   19494:	moveq	r0, r3
   19498:	pop	{pc}		; (ldr pc, [sp], #4)
   1949c:	ldr	r4, [sp]
   194a0:	add	sp, sp, #4
   194a4:	movw	r0, #44844	; 0xaf2c
   194a8:	movt	r0, #1
   194ac:	pop	{pc}		; (ldr pc, [sp], #4)
   194b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   194b4:	mov	r5, r2
   194b8:	strd	r6, [sp, #8]
   194bc:	subs	r6, r0, #0
   194c0:	mov	r7, r1
   194c4:	str	lr, [sp, #16]
   194c8:	sub	sp, sp, #12
   194cc:	addeq	r6, sp, #4
   194d0:	mov	r0, r6
   194d4:	bl	10db8 <mbrtowc@plt>
   194d8:	cmp	r5, #0
   194dc:	cmnne	r0, #3
   194e0:	mov	r4, r0
   194e4:	bhi	19500 <__assert_fail@plt+0x85ec>
   194e8:	mov	r0, r4
   194ec:	add	sp, sp, #12
   194f0:	ldrd	r4, [sp]
   194f4:	ldrd	r6, [sp, #8]
   194f8:	add	sp, sp, #16
   194fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19500:	mov	r0, #0
   19504:	bl	19558 <__assert_fail@plt+0x8644>
   19508:	cmp	r0, #0
   1950c:	bne	194e8 <__assert_fail@plt+0x85d4>
   19510:	ldrb	r3, [r7]
   19514:	mov	r4, #1
   19518:	str	r3, [r6]
   1951c:	b	194e8 <__assert_fail@plt+0x85d4>
   19520:	umull	r2, r3, r1, r2
   19524:	cmp	r3, #0
   19528:	bne	19534 <__assert_fail@plt+0x8620>
   1952c:	mov	r1, r2
   19530:	b	191a0 <__assert_fail@plt+0x828c>
   19534:	str	r4, [sp, #-8]!
   19538:	str	lr, [sp, #4]
   1953c:	bl	10e54 <__errno_location@plt>
   19540:	mov	r3, #12
   19544:	ldr	r4, [sp]
   19548:	add	sp, sp, #4
   1954c:	str	r3, [r0]
   19550:	mov	r0, #0
   19554:	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	push	{lr}		; (str lr, [sp, #-4]!)
   1955c:	sub	sp, sp, #268	; 0x10c
   19560:	movw	r2, #257	; 0x101
   19564:	add	r1, sp, #4
   19568:	bl	195b0 <__assert_fail@plt+0x869c>
   1956c:	cmp	r0, #0
   19570:	movne	r0, #0
   19574:	bne	195a8 <__assert_fail@plt+0x8694>
   19578:	movw	r1, #42444	; 0xa5cc
   1957c:	movt	r1, #1
   19580:	add	r0, sp, #4
   19584:	bl	10cbc <strcmp@plt>
   19588:	cmp	r0, #0
   1958c:	beq	195a8 <__assert_fail@plt+0x8694>
   19590:	add	r0, sp, #4
   19594:	movw	r1, #44852	; 0xaf34
   19598:	movt	r1, #1
   1959c:	bl	10cbc <strcmp@plt>
   195a0:	adds	r0, r0, #0
   195a4:	movne	r0, #1
   195a8:	add	sp, sp, #268	; 0x10c
   195ac:	pop	{pc}		; (ldr pc, [sp], #4)
   195b0:	strd	r4, [sp, #-16]!
   195b4:	mov	r5, r1
   195b8:	mov	r1, #0
   195bc:	mov	r4, r2
   195c0:	str	r6, [sp, #8]
   195c4:	str	lr, [sp, #12]
   195c8:	bl	10ec0 <setlocale@plt>
   195cc:	subs	r6, r0, #0
   195d0:	beq	19650 <__assert_fail@plt+0x873c>
   195d4:	bl	10e3c <strlen@plt>
   195d8:	cmp	r4, r0
   195dc:	bhi	195fc <__assert_fail@plt+0x86e8>
   195e0:	cmp	r4, #0
   195e4:	moveq	r0, #34	; 0x22
   195e8:	bne	19620 <__assert_fail@plt+0x870c>
   195ec:	ldrd	r4, [sp]
   195f0:	ldr	r6, [sp, #8]
   195f4:	add	sp, sp, #12
   195f8:	pop	{pc}		; (ldr pc, [sp], #4)
   195fc:	add	r2, r0, #1
   19600:	mov	r1, r6
   19604:	mov	r0, r5
   19608:	bl	10d04 <memcpy@plt>
   1960c:	ldrd	r4, [sp]
   19610:	mov	r0, #0
   19614:	ldr	r6, [sp, #8]
   19618:	add	sp, sp, #12
   1961c:	pop	{pc}		; (ldr pc, [sp], #4)
   19620:	sub	r4, r4, #1
   19624:	mov	r1, r6
   19628:	mov	r2, r4
   1962c:	mov	r0, r5
   19630:	bl	10d04 <memcpy@plt>
   19634:	mov	r3, #0
   19638:	mov	r0, #34	; 0x22
   1963c:	strb	r3, [r5, r4]
   19640:	ldrd	r4, [sp]
   19644:	ldr	r6, [sp, #8]
   19648:	add	sp, sp, #12
   1964c:	pop	{pc}		; (ldr pc, [sp], #4)
   19650:	cmp	r4, #0
   19654:	mov	r0, #22
   19658:	strbne	r6, [r5]
   1965c:	ldrd	r4, [sp]
   19660:	ldr	r6, [sp, #8]
   19664:	add	sp, sp, #12
   19668:	pop	{pc}		; (ldr pc, [sp], #4)
   1966c:	mov	r1, #0
   19670:	b	10ec0 <setlocale@plt>
   19674:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19678:	mov	r7, r0
   1967c:	ldr	r6, [pc, #72]	; 196cc <__assert_fail@plt+0x87b8>
   19680:	ldr	r5, [pc, #72]	; 196d0 <__assert_fail@plt+0x87bc>
   19684:	add	r6, pc, r6
   19688:	add	r5, pc, r5
   1968c:	sub	r6, r6, r5
   19690:	mov	r8, r1
   19694:	mov	r9, r2
   19698:	bl	10c84 <calloc@plt-0x20>
   1969c:	asrs	r6, r6, #2
   196a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   196a4:	mov	r4, #0
   196a8:	add	r4, r4, #1
   196ac:	ldr	r3, [r5], #4
   196b0:	mov	r2, r9
   196b4:	mov	r1, r8
   196b8:	mov	r0, r7
   196bc:	blx	r3
   196c0:	cmp	r6, r4
   196c4:	bne	196a8 <__assert_fail@plt+0x8794>
   196c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196cc:	andeq	r2, r1, r8, lsl #17
   196d0:	andeq	r2, r1, r0, lsl #17
   196d4:	bx	lr
   196d8:	ldr	r3, [pc, #12]	; 196ec <__assert_fail@plt+0x87d8>
   196dc:	mov	r1, #0
   196e0:	add	r3, pc, r3
   196e4:	ldr	r2, [r3]
   196e8:	b	10e6c <__cxa_atexit@plt>
   196ec:	andeq	r2, r1, r0, lsl #20

Disassembly of section .fini:

000196f0 <.fini>:
   196f0:	push	{r3, lr}
   196f4:	pop	{r3, pc}
