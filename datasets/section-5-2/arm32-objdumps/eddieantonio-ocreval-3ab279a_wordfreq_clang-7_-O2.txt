
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

00010b38 <.init>:
   10b38:	push	{r3, lr}
   10b3c:	bl	10d5c <__assert_fail@plt+0x48>
   10b40:	pop	{r3, pc}

Disassembly of section .plt:

00010b44 <calloc@plt-0x14>:
   10b44:	push	{lr}		; (str lr, [sp, #-4]!)
   10b48:	ldr	lr, [pc, #4]	; 10b54 <calloc@plt-0x4>
   10b4c:	add	lr, pc, lr
   10b50:	ldr	pc, [lr, #8]!
   10b54:	andeq	r7, r1, ip, lsr #9

00010b58 <calloc@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #94208	; 0x17000
   10b60:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b64 <strcmp@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b70 <strtol@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1180]!	; 0x49c

00010b7c <printf@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #94208	; 0x17000
   10b84:	ldr	pc, [ip, #1172]!	; 0x494

00010b88 <fopen@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1164]!	; 0x48c

00010b94 <free@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1156]!	; 0x484

00010ba0 <utf8proc_get_property@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bac <fgets@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1140]!	; 0x474

00010bb8 <utf8proc_encode_char@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bc4 <strdup@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1124]!	; 0x464

00010bd0 <rewind@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bdc <unlink@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1108]!	; 0x454

00010be8 <utf8proc_tolower@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1100]!	; 0x44c

00010bf4 <__xstat@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1092]!	; 0x444

00010c00 <fwrite@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1084]!	; 0x43c

00010c0c <fread@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1076]!	; 0x434

00010c18 <utf8proc_iterate@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1068]!	; 0x42c

00010c24 <puts@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1060]!	; 0x424

00010c30 <malloc@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1052]!	; 0x41c

00010c3c <__libc_start_main@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1044]!	; 0x414

00010c48 <__sysv_signal@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1036]!	; 0x40c

00010c54 <__gmon_start__@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1028]!	; 0x404

00010c60 <getpid@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c6c <exit@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c78 <utf8proc_category@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c84 <strlen@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c90 <fprintf@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #988]!	; 0x3dc

00010c9c <__isoc99_sscanf@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #980]!	; 0x3d4

00010ca8 <fclose@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #972]!	; 0x3cc

00010cb4 <utf8proc_NFC@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #964]!	; 0x3c4

00010cc0 <fputc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #956]!	; 0x3bc

00010ccc <sprintf@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cd8 <utf8proc_errmsg@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #940]!	; 0x3ac

00010ce4 <fputs@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #932]!	; 0x3a4

00010cf0 <strncmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #924]!	; 0x39c

00010cfc <abort@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #916]!	; 0x394

00010d08 <getc@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #908]!	; 0x38c

00010d14 <__assert_fail@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #900]!	; 0x384

Disassembly of section .text:

00010d20 <error@@Base-0x109c>:
   10d20:	mov	fp, #0
   10d24:	mov	lr, #0
   10d28:	pop	{r1}		; (ldr r1, [sp], #4)
   10d2c:	mov	r2, sp
   10d30:	push	{r2}		; (str r2, [sp, #-4]!)
   10d34:	push	{r0}		; (str r0, [sp, #-4]!)
   10d38:	ldr	ip, [pc, #16]	; 10d50 <__assert_fail@plt+0x3c>
   10d3c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d40:	ldr	r0, [pc, #12]	; 10d54 <__assert_fail@plt+0x40>
   10d44:	ldr	r3, [pc, #12]	; 10d58 <__assert_fail@plt+0x44>
   10d48:	bl	10c3c <__libc_start_main@plt>
   10d4c:	bl	10cfc <abort@plt>
   10d50:	andeq	r3, r1, ip, lsr #23
   10d54:	andeq	r1, r1, r8, lsl r1
   10d58:	andeq	r3, r1, ip, asr #22
   10d5c:	ldr	r3, [pc, #20]	; 10d78 <__assert_fail@plt+0x64>
   10d60:	ldr	r2, [pc, #20]	; 10d7c <__assert_fail@plt+0x68>
   10d64:	add	r3, pc, r3
   10d68:	ldr	r2, [r3, r2]
   10d6c:	cmp	r2, #0
   10d70:	bxeq	lr
   10d74:	b	10c54 <__gmon_start__@plt>
   10d78:	muleq	r1, r4, r2
   10d7c:	andeq	r0, r0, r4, asr #1
   10d80:	ldr	r0, [pc, #24]	; 10da0 <__assert_fail@plt+0x8c>
   10d84:	ldr	r3, [pc, #24]	; 10da4 <__assert_fail@plt+0x90>
   10d88:	cmp	r3, r0
   10d8c:	bxeq	lr
   10d90:	ldr	r3, [pc, #16]	; 10da8 <__assert_fail@plt+0x94>
   10d94:	cmp	r3, #0
   10d98:	bxeq	lr
   10d9c:	bx	r3
   10da0:	andeq	r8, r2, r8, lsl #2
   10da4:	andeq	r8, r2, r8, lsl #2
   10da8:	andeq	r0, r0, r0
   10dac:	ldr	r0, [pc, #36]	; 10dd8 <__assert_fail@plt+0xc4>
   10db0:	ldr	r1, [pc, #36]	; 10ddc <__assert_fail@plt+0xc8>
   10db4:	sub	r1, r1, r0
   10db8:	asr	r1, r1, #2
   10dbc:	add	r1, r1, r1, lsr #31
   10dc0:	asrs	r1, r1, #1
   10dc4:	bxeq	lr
   10dc8:	ldr	r3, [pc, #16]	; 10de0 <__assert_fail@plt+0xcc>
   10dcc:	cmp	r3, #0
   10dd0:	bxeq	lr
   10dd4:	bx	r3
   10dd8:	andeq	r8, r2, r8, lsl #2
   10ddc:	andeq	r8, r2, r8, lsl #2
   10de0:	andeq	r0, r0, r0
   10de4:	push	{r4, lr}
   10de8:	ldr	r4, [pc, #24]	; 10e08 <__assert_fail@plt+0xf4>
   10dec:	ldrb	r3, [r4]
   10df0:	cmp	r3, #0
   10df4:	popne	{r4, pc}
   10df8:	bl	10d80 <__assert_fail@plt+0x6c>
   10dfc:	mov	r3, #1
   10e00:	strb	r3, [r4]
   10e04:	pop	{r4, pc}
   10e08:	andeq	r8, r2, r8, lsl #2
   10e0c:	b	10dac <__assert_fail@plt+0x98>
   10e10:	push	{r4, r5, fp, lr}
   10e14:	add	fp, sp, #8
   10e18:	ldr	r4, [pc, #136]	; 10ea8 <__assert_fail@plt+0x194>
   10e1c:	mov	r1, r0
   10e20:	ldr	r4, [pc, r4]
   10e24:	ldr	r2, [pc, #128]	; 10eac <__assert_fail@plt+0x198>
   10e28:	ldr	r2, [pc, r2]
   10e2c:	mov	r0, r4
   10e30:	bl	134f8 <error@@Base+0x173c>
   10e34:	ldr	r5, [pc, #116]	; 10eb0 <__assert_fail@plt+0x19c>
   10e38:	mov	r1, r4
   10e3c:	ldr	r5, [pc, r5]
   10e40:	mov	r0, r5
   10e44:	bl	12ca0 <error@@Base+0xee4>
   10e48:	ldr	r5, [r5]
   10e4c:	cmp	r5, #0
   10e50:	beq	10e7c <__assert_fail@plt+0x168>
   10e54:	ldr	r4, [pc, #88]	; 10eb4 <__assert_fail@plt+0x1a0>
   10e58:	ldr	r4, [pc, r4]
   10e5c:	ldr	r1, [r5, #8]
   10e60:	mov	r0, r4
   10e64:	mov	r2, #1
   10e68:	mov	r3, #0
   10e6c:	bl	11ffc <error@@Base+0x240>
   10e70:	ldr	r5, [r5, #4]
   10e74:	cmp	r5, #0
   10e78:	bne	10e5c <__assert_fail@plt+0x148>
   10e7c:	ldr	r0, [pc, #52]	; 10eb8 <__assert_fail@plt+0x1a4>
   10e80:	ldr	r0, [pc, r0]
   10e84:	ldr	r1, [pc, #48]	; 10ebc <__assert_fail@plt+0x1a8>
   10e88:	ldr	r1, [pc, r1]
   10e8c:	bl	11444 <__assert_fail@plt+0x730>
   10e90:	ldr	r0, [pc, #40]	; 10ec0 <__assert_fail@plt+0x1ac>
   10e94:	ldr	r0, [pc, r0]
   10e98:	ldr	r1, [pc, #36]	; 10ec4 <__assert_fail@plt+0x1b0>
   10e9c:	ldr	r1, [pc, r1]
   10ea0:	pop	{r4, r5, fp, lr}
   10ea4:	b	11444 <__assert_fail@plt+0x730>
   10ea8:	andeq	r7, r1, ip, ror r2
   10eac:	andeq	r7, r1, r8, lsl #5
   10eb0:	andeq	r7, r1, r8, ror r2
   10eb4:	andeq	r7, r1, ip, ror r2
   10eb8:	andeq	r7, r1, ip, lsl r2
   10ebc:	andeq	r7, r1, r0, lsr #4
   10ec0:	andeq	r7, r1, r0, lsr #4
   10ec4:	andeq	r7, r1, r4, lsl #4
   10ec8:	ldr	r1, [r1, #8]
   10ecc:	ldr	r0, [r0, #8]
   10ed0:	b	11920 <__assert_fail@plt+0xc0c>
   10ed4:	ldr	r2, [r1, #12]
   10ed8:	ldr	r3, [r0, #12]
   10edc:	cmp	r2, r3
   10ee0:	subne	r0, r2, r3
   10ee4:	bxne	lr
   10ee8:	ldr	r1, [r1, #8]
   10eec:	ldr	r0, [r0, #8]
   10ef0:	b	11920 <__assert_fail@plt+0xc0c>
   10ef4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10ef8:	add	fp, sp, #24
   10efc:	ldr	r0, [pc, #132]	; 10f88 <__assert_fail@plt+0x274>
   10f00:	add	r0, pc, r0
   10f04:	bl	10c24 <puts@plt>
   10f08:	ldr	r6, [pc, #124]	; 10f8c <__assert_fail@plt+0x278>
   10f0c:	movw	r8, #8052	; 0x1f74
   10f10:	ldr	r6, [pc, r6]
   10f14:	ldr	r0, [r6, r8]
   10f18:	cmp	r0, #1
   10f1c:	blt	10f70 <__assert_fail@plt+0x25c>
   10f20:	movw	r9, #8048	; 0x1f70
   10f24:	mov	r4, #0
   10f28:	mov	r7, #0
   10f2c:	ldr	r0, [r6, r9]
   10f30:	ldr	r5, [pc, #88]	; 10f90 <__assert_fail@plt+0x27c>
   10f34:	add	r5, pc, r5
   10f38:	ldr	r0, [r0, r7, lsl #2]
   10f3c:	ldr	r2, [r0, #8]
   10f40:	ldr	r1, [r0, #12]
   10f44:	mov	r0, r5
   10f48:	bl	10b7c <printf@plt>
   10f4c:	ldr	r0, [r6, r9]
   10f50:	ldr	r1, [r6, r8]
   10f54:	ldr	r2, [r0, r7, lsl #2]
   10f58:	add	r7, r7, #1
   10f5c:	cmp	r7, r1
   10f60:	ldr	r2, [r2, #12]
   10f64:	add	r4, r2, r4
   10f68:	blt	10f38 <__assert_fail@plt+0x224>
   10f6c:	b	10f74 <__assert_fail@plt+0x260>
   10f70:	mov	r4, #0
   10f74:	ldr	r0, [pc, #24]	; 10f94 <__assert_fail@plt+0x280>
   10f78:	mov	r1, r4
   10f7c:	add	r0, pc, r0
   10f80:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   10f84:	b	10b7c <printf@plt>
   10f88:	andeq	r2, r0, r9, lsl #26
   10f8c:	andeq	r7, r1, r4, asr #3
   10f90:	andeq	r2, r0, r0, lsl #25
   10f94:	andeq	r2, r0, r3, asr #24
   10f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f9c:	add	fp, sp, #28
   10fa0:	sub	sp, sp, #4
   10fa4:	ldr	r4, [pc, #324]	; 110f0 <__assert_fail@plt+0x3dc>
   10fa8:	ldr	r4, [pc, r4]
   10fac:	mov	r0, r4
   10fb0:	bl	11820 <__assert_fail@plt+0xb0c>
   10fb4:	movw	r8, #8052	; 0x1f74
   10fb8:	mov	r5, r4
   10fbc:	ldr	r0, [r5, r8]!
   10fc0:	ldr	r1, [r5, #-4]
   10fc4:	ldr	r2, [pc, #296]	; 110f4 <__assert_fail@plt+0x3e0>
   10fc8:	ldr	r2, [pc, r2]
   10fcc:	bl	114c4 <__assert_fail@plt+0x7b0>
   10fd0:	ldr	r0, [pc, #288]	; 110f8 <__assert_fail@plt+0x3e4>
   10fd4:	add	r0, pc, r0
   10fd8:	bl	10c24 <puts@plt>
   10fdc:	ldr	r0, [r5]
   10fe0:	mov	r5, #0
   10fe4:	mov	r6, #0
   10fe8:	cmp	r0, #1
   10fec:	blt	1103c <__assert_fail@plt+0x328>
   10ff0:	movw	r9, #8048	; 0x1f70
   10ff4:	mov	r6, #0
   10ff8:	mov	r7, #0
   10ffc:	ldr	r0, [r4, r9]
   11000:	ldr	sl, [pc, #244]	; 110fc <__assert_fail@plt+0x3e8>
   11004:	add	sl, pc, sl
   11008:	ldr	r0, [r0, r7, lsl #2]
   1100c:	ldr	r2, [r0, #8]
   11010:	ldr	r1, [r0, #12]
   11014:	mov	r0, sl
   11018:	bl	10b7c <printf@plt>
   1101c:	ldr	r0, [r4, r9]
   11020:	ldr	r1, [r4, r8]
   11024:	ldr	r2, [r0, r7, lsl #2]
   11028:	add	r7, r7, #1
   1102c:	cmp	r7, r1
   11030:	ldr	r2, [r2, #12]
   11034:	add	r6, r2, r6
   11038:	blt	11008 <__assert_fail@plt+0x2f4>
   1103c:	ldr	r0, [pc, #188]	; 11100 <__assert_fail@plt+0x3ec>
   11040:	mov	r1, r6
   11044:	add	r0, pc, r0
   11048:	bl	10b7c <printf@plt>
   1104c:	ldr	r0, [pc, #176]	; 11104 <__assert_fail@plt+0x3f0>
   11050:	add	r0, pc, r0
   11054:	bl	10c24 <puts@plt>
   11058:	mov	r6, r4
   1105c:	ldr	r0, [r6, r8]!
   11060:	ldr	r1, [r6, #-4]
   11064:	ldr	r2, [pc, #156]	; 11108 <__assert_fail@plt+0x3f4>
   11068:	ldr	r2, [pc, r2]
   1106c:	bl	114c4 <__assert_fail@plt+0x7b0>
   11070:	ldr	r0, [pc, #148]	; 1110c <__assert_fail@plt+0x3f8>
   11074:	add	r0, pc, r0
   11078:	bl	10c24 <puts@plt>
   1107c:	ldr	r0, [r6]
   11080:	cmp	r0, #1
   11084:	blt	110d8 <__assert_fail@plt+0x3c4>
   11088:	movw	r8, #8048	; 0x1f70
   1108c:	mov	r5, #0
   11090:	movw	r7, #8052	; 0x1f74
   11094:	mov	r6, #0
   11098:	ldr	r0, [r4, r8]
   1109c:	ldr	r9, [pc, #108]	; 11110 <__assert_fail@plt+0x3fc>
   110a0:	add	r9, pc, r9
   110a4:	ldr	r0, [r0, r6, lsl #2]
   110a8:	ldr	r2, [r0, #8]
   110ac:	ldr	r1, [r0, #12]
   110b0:	mov	r0, r9
   110b4:	bl	10b7c <printf@plt>
   110b8:	ldr	r0, [r4, r8]
   110bc:	ldr	r1, [r4, r7]
   110c0:	ldr	r2, [r0, r6, lsl #2]
   110c4:	add	r6, r6, #1
   110c8:	cmp	r6, r1
   110cc:	ldr	r2, [r2, #12]
   110d0:	add	r5, r2, r5
   110d4:	blt	110a4 <__assert_fail@plt+0x390>
   110d8:	ldr	r0, [pc, #52]	; 11114 <__assert_fail@plt+0x400>
   110dc:	mov	r1, r5
   110e0:	add	r0, pc, r0
   110e4:	sub	sp, fp, #28
   110e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110ec:	b	10b7c <printf@plt>
   110f0:	andeq	r7, r1, ip, lsr #2
   110f4:	andeq	r7, r1, r4, lsl r1
   110f8:	andeq	r2, r0, r5, lsr ip
   110fc:			; <UNDEFINED> instruction: 0x00002bb0
   11100:	andeq	r2, r0, fp, ror fp
   11104:	andeq	r2, r0, r9, lsl ip
   11108:	andeq	r7, r1, r8, ror r0
   1110c:	muleq	r0, r5, fp
   11110:	andeq	r2, r0, r4, lsl fp
   11114:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   11118:	push	{fp, lr}
   1111c:	mov	fp, sp
   11120:	sub	sp, sp, #8
   11124:	str	r0, [sp, #4]
   11128:	add	r0, sp, #4
   1112c:	mov	r3, #0
   11130:	mov	r4, r1
   11134:	ldr	r2, [pc, #200]	; 11204 <__assert_fail@plt+0x4f0>
   11138:	add	r2, pc, r2
   1113c:	bl	11b34 <__assert_fail@plt+0xe20>
   11140:	ldr	r0, [sp, #4]
   11144:	cmp	r0, #0
   11148:	beq	111f8 <__assert_fail@plt+0x4e4>
   1114c:	cmp	r0, #1
   11150:	blt	111f0 <__assert_fail@plt+0x4dc>
   11154:	ldr	r5, [pc, #172]	; 11208 <__assert_fail@plt+0x4f4>
   11158:	mov	r8, #0
   1115c:	ldr	r5, [pc, r5]
   11160:	ldr	r7, [pc, #164]	; 1120c <__assert_fail@plt+0x4f8>
   11164:	ldr	r7, [pc, r7]
   11168:	ldr	sl, [pc, #160]	; 11210 <__assert_fail@plt+0x4fc>
   1116c:	ldr	sl, [pc, sl]
   11170:	ldr	r6, [pc, #156]	; 11214 <__assert_fail@plt+0x500>
   11174:	ldr	r6, [pc, r6]
   11178:	ldr	r1, [r4, r8, lsl #2]
   1117c:	ldr	r2, [pc, #148]	; 11218 <__assert_fail@plt+0x504>
   11180:	mov	r0, r5
   11184:	ldr	r2, [pc, r2]
   11188:	bl	134f8 <error@@Base+0x173c>
   1118c:	mov	r0, r7
   11190:	mov	r1, r5
   11194:	bl	12ca0 <error@@Base+0xee4>
   11198:	ldr	r9, [r7]
   1119c:	cmp	r9, #0
   111a0:	beq	111c4 <__assert_fail@plt+0x4b0>
   111a4:	ldr	r1, [r9, #8]
   111a8:	mov	r0, r6
   111ac:	mov	r2, #1
   111b0:	mov	r3, #0
   111b4:	bl	11ffc <error@@Base+0x240>
   111b8:	ldr	r9, [r9, #4]
   111bc:	cmp	r9, #0
   111c0:	bne	111a4 <__assert_fail@plt+0x490>
   111c4:	ldr	r1, [pc, #80]	; 1121c <__assert_fail@plt+0x508>
   111c8:	mov	r0, r5
   111cc:	ldr	r1, [pc, r1]
   111d0:	bl	11444 <__assert_fail@plt+0x730>
   111d4:	mov	r0, r7
   111d8:	mov	r1, sl
   111dc:	bl	11444 <__assert_fail@plt+0x730>
   111e0:	ldr	r0, [sp, #4]
   111e4:	add	r8, r8, #1
   111e8:	cmp	r8, r0
   111ec:	blt	11178 <__assert_fail@plt+0x464>
   111f0:	bl	10f98 <__assert_fail@plt+0x284>
   111f4:	bl	11d78 <__assert_fail@plt+0x1064>
   111f8:	ldr	r0, [pc, #32]	; 11220 <__assert_fail@plt+0x50c>
   111fc:	add	r0, pc, r0
   11200:	bl	11dbc <error@@Base>
   11204:	muleq	r0, r5, sl
   11208:	andeq	r6, r1, r0, asr #30
   1120c:	andeq	r6, r1, r0, asr pc
   11210:	andeq	r6, r1, r4, lsr pc
   11214:	andeq	r6, r1, r0, ror #30
   11218:	andeq	r6, r1, ip, lsr #30
   1121c:	ldrdeq	r6, [r1], -ip
   11220:	strdeq	r2, [r0], -r5
   11224:	vmov.i32	q8, #0	; 0x00000000
   11228:	vst1.32	{d16-d17}, [r0]
   1122c:	bx	lr
   11230:	push	{r4, r5, fp, lr}
   11234:	add	fp, sp, #8
   11238:	mov	r4, r0
   1123c:	ldr	r0, [r0]
   11240:	mov	r5, #0
   11244:	str	r5, [r1]
   11248:	cmp	r0, #0
   1124c:	str	r0, [r1, #4]
   11250:	str	r1, [r4]
   11254:	addeq	r0, r4, #4
   11258:	str	r1, [r0]
   1125c:	ldr	r0, [r4, #8]
   11260:	cmp	r0, #0
   11264:	beq	11270 <__assert_fail@plt+0x55c>
   11268:	bl	10b94 <free@plt>
   1126c:	str	r5, [r4, #8]
   11270:	ldr	r0, [r4, #12]
   11274:	add	r0, r0, #1
   11278:	str	r0, [r4, #12]
   1127c:	pop	{r4, r5, fp, pc}
   11280:	push	{r4, r5, fp, lr}
   11284:	add	fp, sp, #8
   11288:	mov	r4, r0
   1128c:	ldr	r0, [r0, #4]
   11290:	mov	r5, #0
   11294:	mov	r2, r4
   11298:	cmp	r0, #0
   1129c:	stm	r1, {r0, r5}
   112a0:	addne	r2, r0, #4
   112a4:	str	r1, [r2]
   112a8:	str	r1, [r4, #4]
   112ac:	ldr	r0, [r4, #8]
   112b0:	cmp	r0, #0
   112b4:	beq	112c0 <__assert_fail@plt+0x5ac>
   112b8:	bl	10b94 <free@plt>
   112bc:	str	r5, [r4, #8]
   112c0:	ldr	r0, [r4, #12]
   112c4:	add	r0, r0, #1
   112c8:	str	r0, [r4, #12]
   112cc:	pop	{r4, r5, fp, pc}
   112d0:	push	{r4, sl, fp, lr}
   112d4:	add	fp, sp, #8
   112d8:	mov	r4, r0
   112dc:	ldr	r0, [r2]
   112e0:	mov	r3, r4
   112e4:	cmp	r0, #0
   112e8:	stm	r1, {r0, r2}
   112ec:	addne	r3, r0, #4
   112f0:	str	r1, [r3]
   112f4:	str	r1, [r2]
   112f8:	ldr	r0, [r4, #8]
   112fc:	cmp	r0, #0
   11300:	beq	11310 <__assert_fail@plt+0x5fc>
   11304:	bl	10b94 <free@plt>
   11308:	mov	r0, #0
   1130c:	str	r0, [r4, #8]
   11310:	ldr	r0, [r4, #12]
   11314:	add	r0, r0, #1
   11318:	str	r0, [r4, #12]
   1131c:	pop	{r4, sl, fp, pc}
   11320:	push	{r4, sl, fp, lr}
   11324:	add	fp, sp, #8
   11328:	mov	r4, r0
   1132c:	mov	r0, r1
   11330:	cmp	r1, #0
   11334:	ldr	r3, [r0, #4]!
   11338:	moveq	r0, r4
   1133c:	cmp	r3, #0
   11340:	stm	r2, {r1, r3}
   11344:	addeq	r3, r4, #4
   11348:	str	r2, [r0]
   1134c:	str	r2, [r3]
   11350:	ldr	r0, [r4, #8]
   11354:	cmp	r0, #0
   11358:	beq	11368 <__assert_fail@plt+0x654>
   1135c:	bl	10b94 <free@plt>
   11360:	mov	r0, #0
   11364:	str	r0, [r4, #8]
   11368:	ldr	r0, [r4, #12]
   1136c:	add	r0, r0, #1
   11370:	str	r0, [r4, #12]
   11374:	pop	{r4, sl, fp, pc}
   11378:	push	{r4, r5, fp, lr}
   1137c:	add	fp, sp, #8
   11380:	mov	r4, r0
   11384:	ldm	r1, {r0, r2}
   11388:	mov	r5, #0
   1138c:	cmp	r0, #0
   11390:	streq	r2, [r4]
   11394:	strne	r2, [r0, #4]
   11398:	ldrne	r2, [r1, #4]
   1139c:	cmp	r2, #0
   113a0:	addeq	r2, r4, #4
   113a4:	str	r0, [r2]
   113a8:	str	r5, [r1]
   113ac:	str	r5, [r1, #4]
   113b0:	ldr	r0, [r4, #8]
   113b4:	cmp	r0, #0
   113b8:	beq	113c4 <__assert_fail@plt+0x6b0>
   113bc:	bl	10b94 <free@plt>
   113c0:	str	r5, [r4, #8]
   113c4:	ldr	r0, [r4, #12]
   113c8:	sub	r0, r0, #1
   113cc:	str	r0, [r4, #12]
   113d0:	pop	{r4, r5, fp, pc}
   113d4:	push	{r4, sl, fp, lr}
   113d8:	add	fp, sp, #8
   113dc:	mov	r4, r0
   113e0:	ldr	r0, [r0, #8]
   113e4:	cmp	r0, #0
   113e8:	beq	113f0 <__assert_fail@plt+0x6dc>
   113ec:	pop	{r4, sl, fp, pc}
   113f0:	ldr	r0, [r4, #12]
   113f4:	cmp	r0, #0
   113f8:	beq	113ec <__assert_fail@plt+0x6d8>
   113fc:	mov	r1, #4
   11400:	bl	118fc <__assert_fail@plt+0xbe8>
   11404:	str	r0, [r4, #8]
   11408:	ldr	r1, [r4]
   1140c:	cmp	r1, #0
   11410:	beq	113ec <__assert_fail@plt+0x6d8>
   11414:	str	r1, [r0]
   11418:	ldr	r0, [r1, #4]
   1141c:	cmp	r0, #0
   11420:	popeq	{r4, sl, fp, pc}
   11424:	mov	r1, #4
   11428:	ldr	r2, [r4, #8]
   1142c:	str	r0, [r2, r1]
   11430:	add	r1, r1, #4
   11434:	ldr	r0, [r0, #4]
   11438:	cmp	r0, #0
   1143c:	bne	11428 <__assert_fail@plt+0x714>
   11440:	b	113ec <__assert_fail@plt+0x6d8>
   11444:	push	{r4, r5, r6, r7, fp, lr}
   11448:	add	fp, sp, #16
   1144c:	ldr	r6, [r0]
   11450:	cmp	r6, #0
   11454:	popeq	{r4, r5, r6, r7, fp, pc}
   11458:	mov	r4, r1
   1145c:	mov	r5, r0
   11460:	mov	r7, #0
   11464:	ldm	r6, {r0, r1}
   11468:	cmp	r0, #0
   1146c:	streq	r1, [r5]
   11470:	strne	r1, [r0, #4]
   11474:	ldrne	r1, [r6, #4]
   11478:	cmp	r1, #0
   1147c:	addeq	r1, r5, #4
   11480:	str	r0, [r1]
   11484:	str	r7, [r6]
   11488:	str	r7, [r6, #4]
   1148c:	ldr	r0, [r5, #8]
   11490:	cmp	r0, #0
   11494:	beq	114a0 <__assert_fail@plt+0x78c>
   11498:	bl	10b94 <free@plt>
   1149c:	str	r7, [r5, #8]
   114a0:	ldr	r0, [r5, #12]
   114a4:	sub	r0, r0, #1
   114a8:	str	r0, [r5, #12]
   114ac:	mov	r0, r6
   114b0:	blx	r4
   114b4:	ldr	r6, [r5]
   114b8:	cmp	r6, #0
   114bc:	bne	11464 <__assert_fail@plt+0x750>
   114c0:	pop	{r4, r5, r6, r7, fp, pc}
   114c4:	cmp	r0, #2
   114c8:	bxlt	lr
   114cc:	ldr	r3, [pc, #28]	; 114f0 <__assert_fail@plt+0x7dc>
   114d0:	add	r3, pc, r3
   114d4:	str	r2, [r3]
   114d8:	ldr	r2, [pc, #20]	; 114f4 <__assert_fail@plt+0x7e0>
   114dc:	add	r2, pc, r2
   114e0:	str	r1, [r2]
   114e4:	sub	r1, r0, #1
   114e8:	mov	r0, #0
   114ec:	b	114f8 <__assert_fail@plt+0x7e4>
   114f0:	andeq	r6, r1, r8, lsr ip
   114f4:	andeq	r6, r1, r8, lsr #24
   114f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   114fc:	add	fp, sp, #24
   11500:	mov	r8, r1
   11504:	mov	r5, r0
   11508:	b	1152c <__assert_fail@plt+0x818>
   1150c:	sub	r1, r4, #1
   11510:	str	r6, [r0, r4, lsl #2]
   11514:	cmp	r1, r5
   11518:	movgt	r0, r5
   1151c:	blgt	114f8 <__assert_fail@plt+0x7e4>
   11520:	add	r5, r7, #1
   11524:	cmp	r5, r8
   11528:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1152c:	ldr	r0, [pc, #220]	; 11610 <__assert_fail@plt+0x8fc>
   11530:	cmp	r5, r8
   11534:	mov	r4, r8
   11538:	mov	r7, r5
   1153c:	ldr	r0, [pc, r0]
   11540:	ldr	r6, [r0, r5, lsl #2]
   11544:	bge	1150c <__assert_fail@plt+0x7f8>
   11548:	mov	r7, r5
   1154c:	mov	r4, r8
   11550:	cmp	r7, r4
   11554:	blt	11568 <__assert_fail@plt+0x854>
   11558:	b	1158c <__assert_fail@plt+0x878>
   1155c:	sub	r4, r4, #1
   11560:	cmp	r7, r4
   11564:	bge	1158c <__assert_fail@plt+0x878>
   11568:	ldr	r0, [pc, #164]	; 11614 <__assert_fail@plt+0x900>
   1156c:	ldr	r0, [pc, r0]
   11570:	ldr	r1, [r0, r4, lsl #2]
   11574:	ldr	r2, [pc, #156]	; 11618 <__assert_fail@plt+0x904>
   11578:	mov	r0, r6
   1157c:	ldr	r2, [pc, r2]
   11580:	blx	r2
   11584:	cmn	r0, #1
   11588:	ble	1155c <__assert_fail@plt+0x848>
   1158c:	cmp	r7, r4
   11590:	beq	115a8 <__assert_fail@plt+0x894>
   11594:	ldr	r0, [pc, #128]	; 1161c <__assert_fail@plt+0x908>
   11598:	ldr	r0, [pc, r0]
   1159c:	ldr	r1, [r0, r4, lsl #2]
   115a0:	str	r1, [r0, r7, lsl #2]
   115a4:	add	r7, r7, #1
   115a8:	cmp	r7, r4
   115ac:	bge	115d4 <__assert_fail@plt+0x8c0>
   115b0:	ldr	r0, [pc, #104]	; 11620 <__assert_fail@plt+0x90c>
   115b4:	ldr	r0, [pc, r0]
   115b8:	ldr	r1, [r0, r7, lsl #2]
   115bc:	ldr	r2, [pc, #96]	; 11624 <__assert_fail@plt+0x910>
   115c0:	mov	r0, r6
   115c4:	ldr	r2, [pc, r2]
   115c8:	blx	r2
   115cc:	cmp	r0, #1
   115d0:	bge	115a4 <__assert_fail@plt+0x890>
   115d4:	cmp	r7, r4
   115d8:	bne	115e8 <__assert_fail@plt+0x8d4>
   115dc:	cmp	r7, r4
   115e0:	blt	11560 <__assert_fail@plt+0x84c>
   115e4:	b	11604 <__assert_fail@plt+0x8f0>
   115e8:	ldr	r0, [pc, #56]	; 11628 <__assert_fail@plt+0x914>
   115ec:	ldr	r0, [pc, r0]
   115f0:	ldr	r1, [r0, r7, lsl #2]
   115f4:	str	r1, [r0, r4, lsl #2]
   115f8:	sub	r4, r4, #1
   115fc:	cmp	r7, r4
   11600:	blt	11560 <__assert_fail@plt+0x84c>
   11604:	ldr	r0, [pc, #32]	; 1162c <__assert_fail@plt+0x918>
   11608:	ldr	r0, [pc, r0]
   1160c:	b	1150c <__assert_fail@plt+0x7f8>
   11610:	andeq	r6, r1, r8, asr #23
   11614:	muleq	r1, r8, fp
   11618:	andeq	r6, r1, ip, lsl #23
   1161c:	andeq	r6, r1, ip, ror #22
   11620:	andeq	r6, r1, r0, asr fp
   11624:	andeq	r6, r1, r4, asr #22
   11628:	andeq	r6, r1, r8, lsl fp
   1162c:	strdeq	r6, [r1], -ip
   11630:	push	{r4, r5, r6, sl, fp, lr}
   11634:	add	fp, sp, #16
   11638:	mov	r4, r0
   1163c:	movw	r6, #503	; 0x1f7
   11640:	mov	r5, r0
   11644:	mov	r0, r5
   11648:	bl	11224 <__assert_fail@plt+0x510>
   1164c:	subs	r6, r6, #1
   11650:	add	r5, r5, #16
   11654:	bne	11644 <__assert_fail@plt+0x930>
   11658:	movw	r0, #8052	; 0x1f74
   1165c:	mov	r1, #0
   11660:	str	r1, [r4, r0]
   11664:	movw	r0, #8048	; 0x1f70
   11668:	str	r1, [r4, r0]
   1166c:	pop	{r4, r5, r6, sl, fp, pc}
   11670:	push	{r4, r5, r6, sl, fp, lr}
   11674:	add	fp, sp, #16
   11678:	mov	r5, r1
   1167c:	ldrb	r1, [r1]
   11680:	mov	r4, #0
   11684:	mov	r2, #0
   11688:	cmp	r1, #0
   1168c:	beq	116c0 <__assert_fail@plt+0x9ac>
   11690:	add	r3, r5, #1
   11694:	mov	r2, #0
   11698:	uxtab	r2, r2, r1
   1169c:	ldrb	r1, [r3], #1
   116a0:	cmp	r1, #0
   116a4:	bne	11698 <__assert_fail@plt+0x984>
   116a8:	movw	r1, #20065	; 0x4e61
   116ac:	movt	r1, #33354	; 0x824a
   116b0:	umull	r1, r3, r2, r1
   116b4:	lsr	r1, r3, #8
   116b8:	movw	r3, #503	; 0x1f7
   116bc:	mls	r2, r1, r3, r2
   116c0:	ldr	r6, [r0, r2, lsl #4]
   116c4:	cmp	r6, #0
   116c8:	bne	116e0 <__assert_fail@plt+0x9cc>
   116cc:	mov	r0, r4
   116d0:	pop	{r4, r5, r6, sl, fp, pc}
   116d4:	ldr	r6, [r6, #4]
   116d8:	cmp	r6, #0
   116dc:	beq	116cc <__assert_fail@plt+0x9b8>
   116e0:	ldr	r1, [r6, #8]
   116e4:	mov	r0, r5
   116e8:	bl	10b64 <strcmp@plt>
   116ec:	cmp	r0, #0
   116f0:	bne	116d4 <__assert_fail@plt+0x9c0>
   116f4:	mov	r4, r6
   116f8:	mov	r0, r4
   116fc:	pop	{r4, r5, r6, sl, fp, pc}
   11700:	push	{r4, r5, fp, lr}
   11704:	add	fp, sp, #8
   11708:	mov	r4, r0
   1170c:	ldr	r0, [r1, #8]
   11710:	ldrb	r2, [r0]
   11714:	cmp	r2, #0
   11718:	beq	11750 <__assert_fail@plt+0xa3c>
   1171c:	add	r3, r0, #1
   11720:	mov	r0, #0
   11724:	uxtab	r0, r0, r2
   11728:	ldrb	r2, [r3], #1
   1172c:	cmp	r2, #0
   11730:	bne	11724 <__assert_fail@plt+0xa10>
   11734:	movw	r2, #20065	; 0x4e61
   11738:	movt	r2, #33354	; 0x824a
   1173c:	umull	r2, r3, r0, r2
   11740:	lsr	r2, r3, #8
   11744:	movw	r3, #503	; 0x1f7
   11748:	mls	r0, r2, r3, r0
   1174c:	b	11754 <__assert_fail@plt+0xa40>
   11750:	mov	r0, #0
   11754:	add	r0, r4, r0, lsl #4
   11758:	bl	11230 <__assert_fail@plt+0x51c>
   1175c:	movw	r0, #8048	; 0x1f70
   11760:	mov	r5, r4
   11764:	ldr	r0, [r5, r0]!
   11768:	cmp	r0, #0
   1176c:	beq	1177c <__assert_fail@plt+0xa68>
   11770:	bl	10b94 <free@plt>
   11774:	mov	r0, #0
   11778:	str	r0, [r5]
   1177c:	movw	r0, #8052	; 0x1f74
   11780:	ldr	r0, [r4, r0]!
   11784:	add	r0, r0, #1
   11788:	str	r0, [r4]
   1178c:	pop	{r4, r5, fp, pc}
   11790:	push	{r4, r5, fp, lr}
   11794:	add	fp, sp, #8
   11798:	mov	r4, r0
   1179c:	ldr	r0, [r1, #8]
   117a0:	ldrb	r2, [r0]
   117a4:	cmp	r2, #0
   117a8:	beq	117e0 <__assert_fail@plt+0xacc>
   117ac:	add	r3, r0, #1
   117b0:	mov	r0, #0
   117b4:	uxtab	r0, r0, r2
   117b8:	ldrb	r2, [r3], #1
   117bc:	cmp	r2, #0
   117c0:	bne	117b4 <__assert_fail@plt+0xaa0>
   117c4:	movw	r2, #20065	; 0x4e61
   117c8:	movt	r2, #33354	; 0x824a
   117cc:	umull	r2, r3, r0, r2
   117d0:	lsr	r2, r3, #8
   117d4:	movw	r3, #503	; 0x1f7
   117d8:	mls	r0, r2, r3, r0
   117dc:	b	117e4 <__assert_fail@plt+0xad0>
   117e0:	mov	r0, #0
   117e4:	add	r0, r4, r0, lsl #4
   117e8:	bl	11378 <__assert_fail@plt+0x664>
   117ec:	movw	r0, #8048	; 0x1f70
   117f0:	mov	r5, r4
   117f4:	ldr	r0, [r5, r0]!
   117f8:	cmp	r0, #0
   117fc:	beq	1180c <__assert_fail@plt+0xaf8>
   11800:	bl	10b94 <free@plt>
   11804:	mov	r0, #0
   11808:	str	r0, [r5]
   1180c:	movw	r0, #8052	; 0x1f74
   11810:	ldr	r0, [r4, r0]!
   11814:	sub	r0, r0, #1
   11818:	str	r0, [r4]
   1181c:	pop	{r4, r5, fp, pc}
   11820:	push	{r4, r5, fp, lr}
   11824:	add	fp, sp, #8
   11828:	mov	r4, r0
   1182c:	movw	r0, #8048	; 0x1f70
   11830:	mov	r5, r4
   11834:	ldr	r0, [r5, r0]!
   11838:	cmp	r0, #0
   1183c:	bne	11898 <__assert_fail@plt+0xb84>
   11840:	movw	r0, #8052	; 0x1f74
   11844:	ldr	r0, [r4, r0]
   11848:	cmp	r0, #0
   1184c:	popeq	{r4, r5, fp, pc}
   11850:	mov	r1, #4
   11854:	bl	118fc <__assert_fail@plt+0xbe8>
   11858:	str	r0, [r5]
   1185c:	mov	r0, #0
   11860:	movw	ip, #503	; 0x1f7
   11864:	mov	r2, #0
   11868:	ldr	r3, [r4, r2, lsl #4]
   1186c:	cmp	r3, #0
   11870:	beq	1188c <__assert_fail@plt+0xb78>
   11874:	ldr	r1, [r5]
   11878:	str	r3, [r1, r0, lsl #2]
   1187c:	add	r0, r0, #1
   11880:	ldr	r3, [r3, #4]
   11884:	cmp	r3, #0
   11888:	bne	11874 <__assert_fail@plt+0xb60>
   1188c:	add	r2, r2, #1
   11890:	cmp	r2, ip
   11894:	bne	11868 <__assert_fail@plt+0xb54>
   11898:	pop	{r4, r5, fp, pc}
   1189c:	push	{r4, r5, r6, r7, fp, lr}
   118a0:	add	fp, sp, #16
   118a4:	mov	r5, r1
   118a8:	mov	r4, r0
   118ac:	movw	r7, #503	; 0x1f7
   118b0:	mov	r6, r0
   118b4:	mov	r0, r6
   118b8:	mov	r1, r5
   118bc:	bl	11444 <__assert_fail@plt+0x730>
   118c0:	subs	r7, r7, #1
   118c4:	add	r6, r6, #16
   118c8:	bne	118b4 <__assert_fail@plt+0xba0>
   118cc:	movw	r0, #8048	; 0x1f70
   118d0:	mov	r5, r4
   118d4:	ldr	r0, [r5, r0]!
   118d8:	cmp	r0, #0
   118dc:	beq	118ec <__assert_fail@plt+0xbd8>
   118e0:	bl	10b94 <free@plt>
   118e4:	mov	r0, #0
   118e8:	str	r0, [r5]
   118ec:	movw	r0, #8052	; 0x1f74
   118f0:	mov	r1, #0
   118f4:	str	r1, [r4, r0]
   118f8:	pop	{r4, r5, r6, r7, fp, pc}
   118fc:	push	{fp, lr}
   11900:	mov	fp, sp
   11904:	bl	10b58 <calloc@plt>
   11908:	cmp	r0, #0
   1190c:	popne	{fp, pc}
   11910:	ldr	r0, [pc, #4]	; 1191c <__assert_fail@plt+0xc08>
   11914:	add	r0, pc, r0
   11918:	bl	11dbc <error@@Base>
   1191c:	strdeq	r2, [r0], -lr
   11920:	push	{r4, r5, r6, sl, fp, lr}
   11924:	add	fp, sp, #16
   11928:	ldrb	r3, [r0]
   1192c:	ldrb	ip, [r1]
   11930:	mov	r2, r0
   11934:	mov	r0, #0
   11938:	cmp	r3, #0
   1193c:	beq	11974 <__assert_fail@plt+0xc60>
   11940:	add	r6, r2, #1
   11944:	add	lr, r1, #1
   11948:	mov	r2, #0
   1194c:	uxtb	r4, ip
   11950:	uxtb	r5, r3
   11954:	cmp	r5, r4
   11958:	bne	11984 <__assert_fail@plt+0xc70>
   1195c:	ldrb	r3, [r6, r2]
   11960:	ldrb	ip, [lr, r2]
   11964:	add	r2, r2, #1
   11968:	cmp	r3, #0
   1196c:	bne	1194c <__assert_fail@plt+0xc38>
   11970:	b	11978 <__assert_fail@plt+0xc64>
   11974:	mov	r2, #0
   11978:	cmp	ip, #0
   1197c:	popeq	{r4, r5, r6, sl, fp, pc}
   11980:	mov	r3, #0
   11984:	ldrb	r1, [r1, r2]
   11988:	uxtb	r2, r3
   1198c:	mov	r0, #1
   11990:	cmp	r2, r1
   11994:	mvncc	r0, #0
   11998:	pop	{r4, r5, r6, sl, fp, pc}
   1199c:	push	{r4, r5, fp, lr}
   119a0:	add	fp, sp, #8
   119a4:	mov	r5, r1
   119a8:	cmp	r0, #0
   119ac:	beq	119e0 <__assert_fail@plt+0xccc>
   119b0:	mov	r1, r5
   119b4:	mov	r4, r0
   119b8:	bl	10b88 <fopen@plt>
   119bc:	cmp	r0, #0
   119c0:	popne	{r4, r5, fp, pc}
   119c4:	ldrb	r0, [r5]
   119c8:	cmp	r0, #119	; 0x77
   119cc:	bne	11a04 <__assert_fail@plt+0xcf0>
   119d0:	ldr	r0, [pc, #72]	; 11a20 <__assert_fail@plt+0xd0c>
   119d4:	mov	r1, r4
   119d8:	add	r0, pc, r0
   119dc:	bl	11e0c <error@@Base+0x50>
   119e0:	ldrb	r0, [r5]
   119e4:	ldr	r1, [pc, #40]	; 11a14 <__assert_fail@plt+0xd00>
   119e8:	ldr	r1, [pc, r1]
   119ec:	ldr	r2, [pc, #36]	; 11a18 <__assert_fail@plt+0xd04>
   119f0:	cmp	r0, #114	; 0x72
   119f4:	ldr	r2, [pc, r2]
   119f8:	moveq	r2, r1
   119fc:	ldr	r0, [r2]
   11a00:	pop	{r4, r5, fp, pc}
   11a04:	ldr	r0, [pc, #16]	; 11a1c <__assert_fail@plt+0xd08>
   11a08:	mov	r1, r4
   11a0c:	add	r0, pc, r0
   11a10:	bl	11e0c <error@@Base+0x50>
   11a14:	andeq	r6, r1, r4, ror #13
   11a18:	ldrdeq	r6, [r1], -ip
   11a1c:	andeq	r2, r0, r6, lsr r2
   11a20:	andeq	r2, r0, r4, asr r2
   11a24:	ldr	r1, [pc, #32]	; 11a4c <__assert_fail@plt+0xd38>
   11a28:	ldr	r1, [pc, r1]
   11a2c:	ldr	r1, [r1]
   11a30:	cmp	r1, r0
   11a34:	ldrne	r1, [pc, #20]	; 11a50 <__assert_fail@plt+0xd3c>
   11a38:	ldrne	r1, [pc, r1]
   11a3c:	ldrne	r1, [r1]
   11a40:	cmpne	r1, r0
   11a44:	bxeq	lr
   11a48:	b	10ca8 <fclose@plt>
   11a4c:	andeq	r6, r1, r4, lsr #13
   11a50:	muleq	r1, r8, r6
   11a54:	push	{fp, lr}
   11a58:	mov	fp, sp
   11a5c:	sub	sp, sp, #88	; 0x58
   11a60:	mov	r1, r0
   11a64:	mov	r2, sp
   11a68:	mov	r0, #3
   11a6c:	bl	10bf4 <__xstat@plt>
   11a70:	clz	r0, r0
   11a74:	lsr	r0, r0, #5
   11a78:	mov	sp, fp
   11a7c:	pop	{fp, pc}
   11a80:	push	{r4, r5, fp, lr}
   11a84:	add	fp, sp, #8
   11a88:	sub	sp, sp, #104	; 0x68
   11a8c:	ldr	r0, [pc, #92]	; 11af0 <__assert_fail@plt+0xddc>
   11a90:	add	r0, pc, r0
   11a94:	ldrh	r1, [r0]
   11a98:	add	r5, r1, #1
   11a9c:	strh	r5, [r0]
   11aa0:	ldr	r0, [pc, #76]	; 11af4 <__assert_fail@plt+0xde0>
   11aa4:	ldr	r0, [pc, r0]
   11aa8:	ldr	r4, [r0]
   11aac:	bl	10c60 <getpid@plt>
   11ab0:	mov	r3, r0
   11ab4:	sxth	r0, r5
   11ab8:	add	r5, sp, #4
   11abc:	mov	r2, r4
   11ac0:	str	r0, [sp]
   11ac4:	mov	r0, r5
   11ac8:	ldr	r1, [pc, #40]	; 11af8 <__assert_fail@plt+0xde4>
   11acc:	add	r1, pc, r1
   11ad0:	bl	10ccc <sprintf@plt>
   11ad4:	mov	r0, r5
   11ad8:	bl	10bc4 <strdup@plt>
   11adc:	mov	r4, r0
   11ae0:	bl	10bdc <unlink@plt>
   11ae4:	mov	r0, r4
   11ae8:	sub	sp, fp, #8
   11aec:	pop	{r4, r5, fp, pc}
   11af0:	andeq	r6, r1, ip, ror r6
   11af4:	andeq	r6, r1, ip, lsl r6
   11af8:	muleq	r0, pc, r1	; <UNPREDICTABLE>
   11afc:	push	{r4, sl, fp, lr}
   11b00:	add	fp, sp, #8
   11b04:	mov	r4, r0
   11b08:	bl	10c84 <strlen@plt>
   11b0c:	sub	r0, r0, #1
   11b10:	sxth	r0, r0
   11b14:	cmp	r0, #0
   11b18:	blt	11b28 <__assert_fail@plt+0xe14>
   11b1c:	ldrb	r1, [r4, r0]
   11b20:	cmp	r1, #47	; 0x2f
   11b24:	bne	11b0c <__assert_fail@plt+0xdf8>
   11b28:	add	r0, r4, r0
   11b2c:	add	r0, r0, #1
   11b30:	pop	{r4, sl, fp, pc}
   11b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b38:	add	fp, sp, #28
   11b3c:	sub	sp, sp, #12
   11b40:	str	r2, [sp]
   11b44:	stmib	sp, {r0, r1}
   11b48:	mov	r6, r3
   11b4c:	ldr	r4, [r1]
   11b50:	mov	r0, r4
   11b54:	bl	10c84 <strlen@plt>
   11b58:	sub	r0, r0, #1
   11b5c:	sxth	r0, r0
   11b60:	cmp	r0, #0
   11b64:	blt	11b74 <__assert_fail@plt+0xe60>
   11b68:	ldrb	r1, [r4, r0]
   11b6c:	cmp	r1, #47	; 0x2f
   11b70:	bne	11b58 <__assert_fail@plt+0xe44>
   11b74:	ldr	r1, [pc, #484]	; 11d60 <__assert_fail@plt+0x104c>
   11b78:	add	r0, r4, r0
   11b7c:	add	r0, r0, #1
   11b80:	ldr	r1, [pc, r1]
   11b84:	str	r0, [r1]
   11b88:	mov	r0, #2
   11b8c:	ldr	r4, [pc, #464]	; 11d64 <__assert_fail@plt+0x1050>
   11b90:	add	r4, pc, r4
   11b94:	mov	r1, r4
   11b98:	bl	10c48 <__sysv_signal@plt>
   11b9c:	mov	r0, #15
   11ba0:	mov	r1, r4
   11ba4:	bl	10c48 <__sysv_signal@plt>
   11ba8:	ldr	r0, [sp, #4]
   11bac:	ldr	r5, [r0]
   11bb0:	cmp	r5, #1
   11bb4:	bne	11bcc <__assert_fail@plt+0xeb8>
   11bb8:	ldr	r0, [pc, #424]	; 11d68 <__assert_fail@plt+0x1054>
   11bbc:	ldr	r0, [pc, r0]
   11bc0:	ldrb	r0, [r0]
   11bc4:	cmp	r0, #0
   11bc8:	bne	11d48 <__assert_fail@plt+0x1034>
   11bcc:	ldr	ip, [sp, #8]
   11bd0:	mov	r8, #0
   11bd4:	cmp	r5, #2
   11bd8:	blt	11d24 <__assert_fail@plt+0x1010>
   11bdc:	mov	r8, #0
   11be0:	mov	r7, #1
   11be4:	mov	r9, #1
   11be8:	ldr	r4, [ip, r7, lsl #2]
   11bec:	ldrb	r0, [r4]
   11bf0:	cmp	r0, #45	; 0x2d
   11bf4:	bne	11ccc <__assert_fail@plt+0xfb8>
   11bf8:	ldrb	sl, [r4, #1]
   11bfc:	cmp	sl, #0
   11c00:	beq	11ccc <__assert_fail@plt+0xfb8>
   11c04:	mov	r0, r4
   11c08:	bl	10c84 <strlen@plt>
   11c0c:	mov	r2, r0
   11c10:	ldr	r0, [pc, #340]	; 11d6c <__assert_fail@plt+0x1058>
   11c14:	mov	r1, r4
   11c18:	add	r0, pc, r0
   11c1c:	bl	10cf0 <strncmp@plt>
   11c20:	cmp	r0, #0
   11c24:	beq	11d48 <__assert_fail@plt+0x1034>
   11c28:	ldr	ip, [sp, #8]
   11c2c:	add	r1, r7, #1
   11c30:	mov	r0, #0
   11c34:	cmp	r1, r5
   11c38:	ldrlt	r0, [ip, r1, lsl #2]
   11c3c:	cmp	r6, #0
   11c40:	ldrbne	r2, [r6]
   11c44:	cmpne	r2, #0
   11c48:	beq	11d38 <__assert_fail@plt+0x1024>
   11c4c:	mov	r1, #0
   11c50:	cmp	sl, r2
   11c54:	beq	11c7c <__assert_fail@plt+0xf68>
   11c58:	mov	r2, #1
   11c5c:	sxth	r1, r2
   11c60:	add	r3, r1, r1, lsl #1
   11c64:	ldrb	r3, [r6, r3, lsl #2]
   11c68:	cmp	r3, #0
   11c6c:	beq	11d38 <__assert_fail@plt+0x1024>
   11c70:	add	r2, r2, #1
   11c74:	cmp	sl, r3
   11c78:	bne	11c5c <__assert_fail@plt+0xf48>
   11c7c:	add	r1, r1, r1, lsl #1
   11c80:	add	r3, r6, r1, lsl #2
   11c84:	ldr	r1, [r3, #4]
   11c88:	cmp	r1, #0
   11c8c:	beq	11cec <__assert_fail@plt+0xfd8>
   11c90:	mov	r2, r4
   11c94:	cmp	r0, #0
   11c98:	ldrb	r7, [r2, #2]!
   11c9c:	cmpeq	r7, #0
   11ca0:	beq	11cec <__assert_fail@plt+0xfd8>
   11ca4:	ldr	r3, [r1]
   11ca8:	cmp	r3, #0
   11cac:	bne	11d50 <__assert_fail@plt+0x103c>
   11cb0:	cmp	r7, #0
   11cb4:	movne	r0, r2
   11cb8:	str	r0, [r1]
   11cbc:	ldrb	r0, [r2]
   11cc0:	cmp	r0, #0
   11cc4:	addeq	r9, r9, #1
   11cc8:	b	11cd8 <__assert_fail@plt+0xfc4>
   11ccc:	sxth	r0, r8
   11cd0:	add	r8, r8, #1
   11cd4:	str	r4, [ip, r0, lsl #2]
   11cd8:	add	r9, r9, #1
   11cdc:	sxth	r7, r9
   11ce0:	cmp	r5, r7
   11ce4:	bgt	11be8 <__assert_fail@plt+0xed4>
   11ce8:	b	11d24 <__assert_fail@plt+0x1010>
   11cec:	ldr	r0, [r3, #8]
   11cf0:	cmp	r0, #0
   11cf4:	beq	11d38 <__assert_fail@plt+0x1024>
   11cf8:	ldrb	r1, [r4, #2]
   11cfc:	cmp	r1, #0
   11d00:	bne	11d38 <__assert_fail@plt+0x1024>
   11d04:	ldrb	r1, [r0]
   11d08:	cmp	r1, #0
   11d0c:	bne	11d50 <__assert_fail@plt+0x103c>
   11d10:	mov	r1, #1
   11d14:	strb	r1, [r0]
   11d18:	ldr	r0, [sp, #4]
   11d1c:	ldr	r5, [r0]
   11d20:	b	11cd8 <__assert_fail@plt+0xfc4>
   11d24:	ldr	r1, [sp, #4]
   11d28:	sxth	r0, r8
   11d2c:	str	r0, [r1]
   11d30:	sub	sp, fp, #28
   11d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d38:	ldr	r0, [pc, #52]	; 11d74 <__assert_fail@plt+0x1060>
   11d3c:	mov	r1, r4
   11d40:	add	r0, pc, r0
   11d44:	bl	11e0c <error@@Base+0x50>
   11d48:	ldr	r0, [sp]
   11d4c:	bl	11ee8 <error@@Base+0x12c>
   11d50:	ldr	r0, [pc, #24]	; 11d70 <__assert_fail@plt+0x105c>
   11d54:	mov	r1, r4
   11d58:	add	r0, pc, r0
   11d5c:	bl	11e0c <error@@Base+0x50>
   11d60:	andeq	r6, r1, r0, asr #10
   11d64:	andeq	r0, r0, r8, lsl r3
   11d68:	andeq	r6, r1, r8, ror #9
   11d6c:	andeq	r2, r0, r0, ror r0
   11d70:	andeq	r1, r0, r4, asr pc
   11d74:	andeq	r1, r0, sp, asr pc
   11d78:	push	{fp, lr}
   11d7c:	mov	fp, sp
   11d80:	mov	r0, #0
   11d84:	bl	11d88 <__assert_fail@plt+0x1074>
   11d88:	push	{fp, lr}
   11d8c:	mov	fp, sp
   11d90:	mov	r4, r0
   11d94:	ldr	r0, [pc, #28]	; 11db8 <__assert_fail@plt+0x10a4>
   11d98:	ldr	r0, [pc, r0]
   11d9c:	ldr	r0, [r0]
   11da0:	cmp	r0, #0
   11da4:	beq	11dac <__assert_fail@plt+0x1098>
   11da8:	blx	r0
   11dac:	bl	11f48 <error@@Base+0x18c>
   11db0:	mov	r0, r4
   11db4:	bl	10c6c <exit@plt>
   11db8:	andeq	r6, r1, ip, lsr #6

00011dbc <error@@Base>:
   11dbc:	push	{fp, lr}
   11dc0:	mov	fp, sp
   11dc4:	mov	r3, r0
   11dc8:	ldr	r0, [pc, #44]	; 11dfc <error@@Base+0x40>
   11dcc:	ldr	r0, [pc, r0]
   11dd0:	ldr	r2, [r0]
   11dd4:	ldr	r0, [pc, #36]	; 11e00 <error@@Base+0x44>
   11dd8:	ldr	r0, [pc, r0]
   11ddc:	ldr	r0, [r0]
   11de0:	ldr	r1, [pc, #28]	; 11e04 <error@@Base+0x48>
   11de4:	add	r1, pc, r1
   11de8:	bl	10c90 <fprintf@plt>
   11dec:	ldr	r0, [pc, #20]	; 11e08 <error@@Base+0x4c>
   11df0:	ldr	r0, [pc, r0]
   11df4:	ldr	r0, [r0]
   11df8:	bl	11d88 <__assert_fail@plt+0x1074>
   11dfc:	strdeq	r6, [r1], -r4
   11e00:	andeq	r6, r1, r0, ror #5
   11e04:	andeq	r1, r0, r2, ror lr
   11e08:	andeq	r6, r1, r8, ror #5
   11e0c:	push	{fp, lr}
   11e10:	mov	fp, sp
   11e14:	sub	sp, sp, #8
   11e18:	mov	r3, r0
   11e1c:	ldr	r0, [pc, #48]	; 11e54 <error@@Base+0x98>
   11e20:	ldr	r0, [pc, r0]
   11e24:	ldr	r2, [r0]
   11e28:	ldr	r0, [pc, #40]	; 11e58 <error@@Base+0x9c>
   11e2c:	ldr	r0, [pc, r0]
   11e30:	str	r1, [sp]
   11e34:	ldr	r0, [r0]
   11e38:	ldr	r1, [pc, #28]	; 11e5c <error@@Base+0xa0>
   11e3c:	add	r1, pc, r1
   11e40:	bl	10c90 <fprintf@plt>
   11e44:	ldr	r0, [pc, #20]	; 11e60 <error@@Base+0xa4>
   11e48:	ldr	r0, [pc, r0]
   11e4c:	ldr	r0, [r0]
   11e50:	bl	11d88 <__assert_fail@plt+0x1074>
   11e54:	andeq	r6, r1, r0, lsr #5
   11e58:	andeq	r6, r1, ip, lsl #5
   11e5c:	andeq	r1, r0, r2, lsr #28
   11e60:	muleq	r1, r0, r2
   11e64:	push	{fp, lr}
   11e68:	mov	fp, sp
   11e6c:	sub	sp, sp, #8
   11e70:	mov	r3, r0
   11e74:	ldr	r0, [pc, #40]	; 11ea4 <error@@Base+0xe8>
   11e78:	ldr	r0, [pc, r0]
   11e7c:	ldr	r2, [r0]
   11e80:	ldr	r0, [pc, #32]	; 11ea8 <error@@Base+0xec>
   11e84:	ldr	r0, [pc, r0]
   11e88:	str	r1, [sp]
   11e8c:	ldr	r0, [r0]
   11e90:	ldr	r1, [pc, #20]	; 11eac <error@@Base+0xf0>
   11e94:	add	r1, pc, r1
   11e98:	bl	10c90 <fprintf@plt>
   11e9c:	mov	sp, fp
   11ea0:	pop	{fp, pc}
   11ea4:	andeq	r6, r1, r8, asr #4
   11ea8:	andeq	r6, r1, r4, lsr r2
   11eac:	andeq	r1, r0, sl, asr #27
   11eb0:	ldr	r0, [pc, #40]	; 11ee0 <error@@Base+0x124>
   11eb4:	add	r0, pc, r0
   11eb8:	ldrb	r1, [r0]
   11ebc:	cmp	r1, #1
   11ec0:	bxeq	lr
   11ec4:	push	{fp, lr}
   11ec8:	mov	fp, sp
   11ecc:	mov	r1, #1
   11ed0:	strb	r1, [r0]
   11ed4:	ldr	r0, [pc, #8]	; 11ee4 <error@@Base+0x128>
   11ed8:	add	r0, pc, r0
   11edc:	bl	11dbc <error@@Base>
   11ee0:	andeq	r6, r1, sl, asr r2
   11ee4:	andeq	r1, r0, r1, lsr #27
   11ee8:	push	{fp, lr}
   11eec:	mov	fp, sp
   11ef0:	mov	r3, r0
   11ef4:	ldr	r0, [pc, #60]	; 11f38 <error@@Base+0x17c>
   11ef8:	ldr	r0, [pc, r0]
   11efc:	ldr	r0, [r0]
   11f00:	cmp	r0, #0
   11f04:	bne	11f30 <error@@Base+0x174>
   11f08:	ldr	r0, [pc, #44]	; 11f3c <error@@Base+0x180>
   11f0c:	ldr	r0, [pc, r0]
   11f10:	ldr	r2, [r0]
   11f14:	ldr	r0, [pc, #36]	; 11f40 <error@@Base+0x184>
   11f18:	ldr	r0, [pc, r0]
   11f1c:	ldr	r0, [r0]
   11f20:	ldr	r1, [pc, #28]	; 11f44 <error@@Base+0x188>
   11f24:	add	r1, pc, r1
   11f28:	bl	10c90 <fprintf@plt>
   11f2c:	bl	11d78 <__assert_fail@plt+0x1064>
   11f30:	blx	r0
   11f34:	bl	11d78 <__assert_fail@plt+0x1064>
   11f38:			; <UNDEFINED> instruction: 0x000161b4
   11f3c:			; <UNDEFINED> instruction: 0x000161b4
   11f40:	andeq	r6, r1, r0, lsr #3
   11f44:	andeq	r1, r0, sl, ror #26
   11f48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f4c:	add	fp, sp, #24
   11f50:	sub	sp, sp, #104	; 0x68
   11f54:	ldr	r8, [pc, #124]	; 11fd8 <error@@Base+0x21c>
   11f58:	add	r8, pc, r8
   11f5c:	ldrsh	r0, [r8]
   11f60:	cmp	r0, #1
   11f64:	blt	11fd0 <error@@Base+0x214>
   11f68:	ldr	r9, [pc, #108]	; 11fdc <error@@Base+0x220>
   11f6c:	mov	r7, #1
   11f70:	add	r4, sp, #4
   11f74:	ldr	r9, [pc, r9]
   11f78:	ldr	r5, [pc, #96]	; 11fe0 <error@@Base+0x224>
   11f7c:	add	r5, pc, r5
   11f80:	ldr	r6, [r9]
   11f84:	bl	10c60 <getpid@plt>
   11f88:	mov	r3, r0
   11f8c:	sxth	r0, r7
   11f90:	mov	r1, r5
   11f94:	mov	r2, r6
   11f98:	str	r0, [sp]
   11f9c:	mov	r0, r4
   11fa0:	bl	10ccc <sprintf@plt>
   11fa4:	mov	r0, r4
   11fa8:	bl	10bc4 <strdup@plt>
   11fac:	mov	r6, r0
   11fb0:	bl	10bdc <unlink@plt>
   11fb4:	mov	r0, r6
   11fb8:	bl	10b94 <free@plt>
   11fbc:	add	r0, r7, #1
   11fc0:	sxth	r7, r0
   11fc4:	ldrsh	r0, [r8]
   11fc8:	cmp	r7, r0
   11fcc:	ble	11f80 <error@@Base+0x1c4>
   11fd0:	sub	sp, fp, #24
   11fd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11fd8:			; <UNDEFINED> instruction: 0x000161b4
   11fdc:	andeq	r6, r1, ip, asr #2
   11fe0:	andeq	r1, r0, pc, ror #25
   11fe4:	andeq	r0, r0, r0
   11fe8:	ldm	r0, {r3, ip}
   11fec:	add	r1, r3, r1
   11ff0:	add	r2, ip, r2
   11ff4:	stm	r0, {r1, r2}
   11ff8:	bx	lr
   11ffc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12000:	add	fp, sp, #24
   12004:	mov	r8, r3
   12008:	mov	r5, r2
   1200c:	mov	r4, r1
   12010:	mov	r6, r0
   12014:	bl	11670 <__assert_fail@plt+0x95c>
   12018:	mov	r7, r0
   1201c:	cmp	r0, #0
   12020:	bne	1204c <error@@Base+0x290>
   12024:	mov	r0, #1
   12028:	mov	r1, #20
   1202c:	bl	118fc <__assert_fail@plt+0xbe8>
   12030:	mov	r7, r0
   12034:	mov	r0, r4
   12038:	bl	10bc4 <strdup@plt>
   1203c:	str	r0, [r7, #8]
   12040:	mov	r0, r6
   12044:	mov	r1, r7
   12048:	bl	11700 <__assert_fail@plt+0x9ec>
   1204c:	ldr	r0, [r7, #12]
   12050:	ldr	r1, [r7, #16]
   12054:	add	r0, r0, r5
   12058:	add	r1, r1, r8
   1205c:	str	r0, [r7, #12]
   12060:	str	r1, [r7, #16]
   12064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12068:	push	{r4, r5, r6, r7, fp, lr}
   1206c:	add	fp, sp, #16
   12070:	sub	sp, sp, #8
   12074:	mov	r6, r1
   12078:	ldr	r1, [pc, #488]	; 12268 <error@@Base+0x4ac>
   1207c:	mov	r5, r0
   12080:	mov	r0, r6
   12084:	add	r1, pc, r1
   12088:	bl	1199c <__assert_fail@plt+0xc88>
   1208c:	mov	r4, r0
   12090:	ldr	r0, [pc, #468]	; 1226c <error@@Base+0x4b0>
   12094:	mov	r1, #99	; 0x63
   12098:	mov	r2, r4
   1209c:	add	r0, pc, r0
   120a0:	bl	10bac <fgets@plt>
   120a4:	cmp	r0, #0
   120a8:	beq	1224c <error@@Base+0x490>
   120ac:	ldr	r0, [pc, #444]	; 12270 <error@@Base+0x4b4>
   120b0:	ldr	r1, [pc, #444]	; 12274 <error@@Base+0x4b8>
   120b4:	mov	r2, #45	; 0x2d
   120b8:	add	r0, pc, r0
   120bc:	add	r1, pc, r1
   120c0:	bl	10cf0 <strncmp@plt>
   120c4:	cmp	r0, #0
   120c8:	bne	1224c <error@@Base+0x490>
   120cc:	ldr	r0, [pc, #420]	; 12278 <error@@Base+0x4bc>
   120d0:	mov	r1, #99	; 0x63
   120d4:	mov	r2, r4
   120d8:	add	r0, pc, r0
   120dc:	bl	10bac <fgets@plt>
   120e0:	cmp	r0, #0
   120e4:	beq	1224c <error@@Base+0x490>
   120e8:	ldr	r0, [pc, #396]	; 1227c <error@@Base+0x4c0>
   120ec:	ldr	r1, [pc, #396]	; 12280 <error@@Base+0x4c4>
   120f0:	add	r0, pc, r0
   120f4:	add	r1, pc, r1
   120f8:	bl	10b64 <strcmp@plt>
   120fc:	cmp	r0, #0
   12100:	bne	1224c <error@@Base+0x490>
   12104:	ldr	r0, [pc, #376]	; 12284 <error@@Base+0x4c8>
   12108:	mov	r1, #99	; 0x63
   1210c:	mov	r2, r4
   12110:	add	r0, pc, r0
   12114:	bl	10bac <fgets@plt>
   12118:	cmp	r0, #0
   1211c:	beq	1224c <error@@Base+0x490>
   12120:	ldr	r0, [pc, #352]	; 12288 <error@@Base+0x4cc>
   12124:	ldr	r1, [pc, #352]	; 1228c <error@@Base+0x4d0>
   12128:	add	r2, sp, #4
   1212c:	add	r0, pc, r0
   12130:	add	r1, pc, r1
   12134:	bl	10c9c <__isoc99_sscanf@plt>
   12138:	cmp	r0, #1
   1213c:	bne	1224c <error@@Base+0x490>
   12140:	ldr	r0, [pc, #328]	; 12290 <error@@Base+0x4d4>
   12144:	mov	r1, #99	; 0x63
   12148:	mov	r2, r4
   1214c:	add	r0, pc, r0
   12150:	bl	10bac <fgets@plt>
   12154:	cmp	r0, #0
   12158:	beq	1224c <error@@Base+0x490>
   1215c:	ldr	r0, [pc, #304]	; 12294 <error@@Base+0x4d8>
   12160:	ldr	r1, [pc, #304]	; 12298 <error@@Base+0x4dc>
   12164:	mov	r2, sp
   12168:	add	r0, pc, r0
   1216c:	add	r1, pc, r1
   12170:	bl	10c9c <__isoc99_sscanf@plt>
   12174:	cmp	r0, #1
   12178:	bne	1224c <error@@Base+0x490>
   1217c:	ldr	r0, [pc, #280]	; 1229c <error@@Base+0x4e0>
   12180:	mov	r1, #99	; 0x63
   12184:	mov	r2, r4
   12188:	add	r0, pc, r0
   1218c:	bl	10bac <fgets@plt>
   12190:	cmp	r0, #0
   12194:	beq	1224c <error@@Base+0x490>
   12198:	ldr	r0, [pc, #256]	; 122a0 <error@@Base+0x4e4>
   1219c:	mov	r1, #99	; 0x63
   121a0:	mov	r2, r4
   121a4:	add	r0, pc, r0
   121a8:	bl	10bac <fgets@plt>
   121ac:	cmp	r0, #0
   121b0:	beq	1224c <error@@Base+0x490>
   121b4:	ldm	r5, {r0, r1}
   121b8:	ldr	r2, [sp, #4]
   121bc:	add	r0, r0, r2
   121c0:	ldr	r2, [sp]
   121c4:	add	r1, r1, r2
   121c8:	stm	r5, {r0, r1}
   121cc:	add	r1, r5, #8
   121d0:	mov	r0, r4
   121d4:	bl	122ac <error@@Base+0x4f0>
   121d8:	mov	r7, r0
   121dc:	add	r1, r5, #416	; 0x1a0
   121e0:	mov	r0, r4
   121e4:	bl	122ac <error@@Base+0x4f0>
   121e8:	mov	r6, r0
   121ec:	add	r1, r5, #824	; 0x338
   121f0:	mov	r0, r4
   121f4:	bl	122ac <error@@Base+0x4f0>
   121f8:	ldr	r0, [sp, #4]
   121fc:	cmp	r0, #1
   12200:	blt	1223c <error@@Base+0x480>
   12204:	add	r1, r5, #920	; 0x398
   12208:	mov	r0, r4
   1220c:	bl	122ac <error@@Base+0x4f0>
   12210:	cmp	r7, #1
   12214:	blt	12224 <error@@Base+0x468>
   12218:	add	r1, r5, #992	; 0x3e0
   1221c:	mov	r0, r4
   12220:	bl	123e4 <error@@Base+0x628>
   12224:	cmp	r6, #1
   12228:	blt	1223c <error@@Base+0x480>
   1222c:	movw	r0, #9048	; 0x2358
   12230:	add	r1, r5, r0
   12234:	mov	r0, r4
   12238:	bl	123e4 <error@@Base+0x628>
   1223c:	mov	r0, r4
   12240:	bl	11a24 <__assert_fail@plt+0xd10>
   12244:	sub	sp, fp, #16
   12248:	pop	{r4, r5, r6, r7, fp, pc}
   1224c:	ldr	r1, [pc, #80]	; 122a4 <error@@Base+0x4e8>
   12250:	ldr	r0, [pc, #80]	; 122a8 <error@@Base+0x4ec>
   12254:	cmp	r6, #0
   12258:	add	r1, pc, r1
   1225c:	add	r0, pc, r0
   12260:	movne	r1, r6
   12264:	bl	11e0c <error@@Base+0x50>
   12268:	andeq	r5, r0, sl, lsr #3
   1226c:	andeq	r6, r1, r3, ror r0
   12270:	andeq	r6, r1, r7, asr r0
   12274:	andeq	r1, r0, r1, lsl #24
   12278:	andeq	r6, r1, r7, lsr r0
   1227c:	andeq	r6, r1, pc, lsl r0
   12280:	strdeq	r5, [r0], -r4
   12284:	strdeq	r5, [r1], -pc	; <UNPREDICTABLE>
   12288:	andeq	r5, r1, r3, ror #31
   1228c:	andeq	r1, r0, sl, lsr ip
   12290:	andeq	r5, r1, r3, asr #31
   12294:	andeq	r5, r1, r7, lsr #31
   12298:	strdeq	r1, [r0], -lr
   1229c:	andeq	r5, r1, r7, lsl #31
   122a0:	andeq	r5, r1, fp, ror #30
   122a4:	andeq	r1, r0, r7, lsr #21
   122a8:	muleq	r0, r1, sl
   122ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122b0:	add	fp, sp, #28
   122b4:	sub	sp, sp, #12
   122b8:	mov	r5, r0
   122bc:	ldr	r0, [pc, #268]	; 123d0 <error@@Base+0x614>
   122c0:	mov	r4, r1
   122c4:	mov	r1, #99	; 0x63
   122c8:	mov	r2, r5
   122cc:	add	r0, pc, r0
   122d0:	bl	10bac <fgets@plt>
   122d4:	mov	r6, #0
   122d8:	cmp	r0, #0
   122dc:	beq	123c4 <error@@Base+0x608>
   122e0:	ldr	r0, [pc, #236]	; 123d4 <error@@Base+0x618>
   122e4:	mov	r1, #99	; 0x63
   122e8:	mov	r2, r5
   122ec:	add	r0, pc, r0
   122f0:	bl	10bac <fgets@plt>
   122f4:	cmp	r0, #0
   122f8:	beq	123c4 <error@@Base+0x608>
   122fc:	ldr	r7, [pc, #212]	; 123d8 <error@@Base+0x61c>
   12300:	mov	r1, #99	; 0x63
   12304:	mov	r2, r5
   12308:	add	r7, pc, r7
   1230c:	mov	r0, r7
   12310:	bl	10bac <fgets@plt>
   12314:	cmp	r0, #0
   12318:	beq	123c4 <error@@Base+0x608>
   1231c:	mov	r6, #0
   12320:	add	r9, sp, #8
   12324:	add	sl, sp, #4
   12328:	add	r8, r7, #29
   1232c:	ldr	r1, [pc, #168]	; 123dc <error@@Base+0x620>
   12330:	mov	r0, r7
   12334:	mov	r2, r9
   12338:	mov	r3, sl
   1233c:	add	r1, pc, r1
   12340:	bl	10c9c <__isoc99_sscanf@plt>
   12344:	cmp	r0, #2
   12348:	bne	123c4 <error@@Base+0x608>
   1234c:	mov	r0, r8
   12350:	mov	r1, #0
   12354:	mov	r2, #10
   12358:	bl	10b70 <strtol@plt>
   1235c:	cmp	r0, #0
   12360:	beq	1236c <error@@Base+0x5b0>
   12364:	ldr	r1, [sp, #8]
   12368:	b	1238c <error@@Base+0x5d0>
   1236c:	ldr	r1, [pc, #108]	; 123e0 <error@@Base+0x624>
   12370:	mov	r0, r8
   12374:	add	r1, pc, r1
   12378:	bl	10b64 <strcmp@plt>
   1237c:	ldr	r1, [sp, #8]
   12380:	cmp	r0, #0
   12384:	movwne	r0, #11
   12388:	moveq	r6, r1
   1238c:	mov	r2, r4
   12390:	ldr	r0, [r2, r0, lsl #3]!
   12394:	add	r0, r0, r1
   12398:	ldr	r1, [sp, #4]
   1239c:	str	r0, [r2]
   123a0:	ldr	r0, [r2, #4]
   123a4:	add	r0, r0, r1
   123a8:	mov	r1, #99	; 0x63
   123ac:	str	r0, [r2, #4]
   123b0:	mov	r0, r7
   123b4:	mov	r2, r5
   123b8:	bl	10bac <fgets@plt>
   123bc:	cmp	r0, #0
   123c0:	bne	1232c <error@@Base+0x570>
   123c4:	mov	r0, r6
   123c8:	sub	sp, fp, #28
   123cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d0:	andeq	r5, r1, r3, asr #28
   123d4:	andeq	r5, r1, r3, lsr #28
   123d8:	andeq	r5, r1, r7, lsl #28
   123dc:	andeq	r1, r0, sl, lsr #20
   123e0:	andeq	r1, r0, r1, asr r8
   123e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123e8:	add	fp, sp, #28
   123ec:	sub	sp, sp, #12
   123f0:	mov	r5, r0
   123f4:	ldr	r0, [pc, #268]	; 12508 <error@@Base+0x74c>
   123f8:	mov	r4, r1
   123fc:	mov	r1, #99	; 0x63
   12400:	mov	r2, r5
   12404:	add	r0, pc, r0
   12408:	bl	10bac <fgets@plt>
   1240c:	cmp	r0, #0
   12410:	beq	12500 <error@@Base+0x744>
   12414:	ldr	r0, [pc, #240]	; 1250c <error@@Base+0x750>
   12418:	mov	r1, #99	; 0x63
   1241c:	mov	r2, r5
   12420:	add	r0, pc, r0
   12424:	bl	10bac <fgets@plt>
   12428:	cmp	r0, #0
   1242c:	beq	12500 <error@@Base+0x744>
   12430:	ldr	r6, [pc, #216]	; 12510 <error@@Base+0x754>
   12434:	mov	r1, #99	; 0x63
   12438:	mov	r2, r5
   1243c:	add	r6, pc, r6
   12440:	mov	r0, r6
   12444:	bl	10bac <fgets@plt>
   12448:	cmp	r0, #0
   1244c:	beq	12500 <error@@Base+0x744>
   12450:	add	r7, r6, #29
   12454:	ldr	r1, [pc, #184]	; 12514 <error@@Base+0x758>
   12458:	mov	r0, r6
   1245c:	add	r2, sp, #8
   12460:	add	r3, sp, #4
   12464:	add	r1, pc, r1
   12468:	bl	10c9c <__isoc99_sscanf@plt>
   1246c:	cmp	r0, #2
   12470:	bne	12500 <error@@Base+0x744>
   12474:	mov	r0, r6
   12478:	bl	10c84 <strlen@plt>
   1247c:	ldr	r9, [sp, #8]
   12480:	ldr	sl, [sp, #4]
   12484:	add	r0, r6, r0
   12488:	mov	r1, #0
   1248c:	strb	r1, [r0, #-1]
   12490:	mov	r0, r4
   12494:	mov	r1, r7
   12498:	bl	11670 <__assert_fail@plt+0x95c>
   1249c:	mov	r8, r0
   124a0:	cmp	r0, #0
   124a4:	bne	124d0 <error@@Base+0x714>
   124a8:	mov	r0, #1
   124ac:	mov	r1, #20
   124b0:	bl	118fc <__assert_fail@plt+0xbe8>
   124b4:	mov	r8, r0
   124b8:	mov	r0, r7
   124bc:	bl	10bc4 <strdup@plt>
   124c0:	str	r0, [r8, #8]
   124c4:	mov	r0, r4
   124c8:	mov	r1, r8
   124cc:	bl	11700 <__assert_fail@plt+0x9ec>
   124d0:	ldr	r0, [r8, #12]
   124d4:	ldr	r1, [r8, #16]
   124d8:	mov	r2, r5
   124dc:	add	r0, r0, r9
   124e0:	add	r1, r1, sl
   124e4:	str	r0, [r8, #12]
   124e8:	str	r1, [r8, #16]
   124ec:	mov	r0, r6
   124f0:	mov	r1, #99	; 0x63
   124f4:	bl	10bac <fgets@plt>
   124f8:	cmp	r0, #0
   124fc:	bne	12454 <error@@Base+0x698>
   12500:	sub	sp, fp, #28
   12504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12508:	andeq	r5, r1, fp, lsl #26
   1250c:	andeq	r5, r1, pc, ror #25
   12510:	ldrdeq	r5, [r1], -r3
   12514:	andeq	r1, r0, r2, lsl #18
   12518:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1251c:	add	fp, sp, #24
   12520:	sub	sp, sp, #8
   12524:	mov	r2, r1
   12528:	ldr	r1, [pc, #448]	; 126f0 <error@@Base+0x934>
   1252c:	mov	r5, r0
   12530:	mov	r0, r2
   12534:	add	r1, pc, r1
   12538:	bl	1199c <__assert_fail@plt+0xc88>
   1253c:	ldr	r1, [pc, #432]	; 126f4 <error@@Base+0x938>
   12540:	ldr	r2, [pc, #432]	; 126f8 <error@@Base+0x93c>
   12544:	ldr	r3, [pc, #432]	; 126fc <error@@Base+0x940>
   12548:	mov	r4, r0
   1254c:	add	r1, pc, r1
   12550:	add	r2, pc, r2
   12554:	add	r3, pc, r3
   12558:	bl	10c90 <fprintf@plt>
   1255c:	ldr	r2, [r5]
   12560:	ldr	r1, [pc, #408]	; 12700 <error@@Base+0x944>
   12564:	mov	r0, r4
   12568:	add	r1, pc, r1
   1256c:	bl	10c90 <fprintf@plt>
   12570:	ldr	r2, [r5, #4]
   12574:	ldr	r1, [pc, #392]	; 12704 <error@@Base+0x948>
   12578:	mov	r0, r4
   1257c:	add	r1, pc, r1
   12580:	bl	10c90 <fprintf@plt>
   12584:	ldr	r0, [r5]
   12588:	cmp	r0, #0
   1258c:	beq	125cc <error@@Base+0x810>
   12590:	ldr	r1, [r5, #4]
   12594:	vldr	d16, [pc, #332]	; 126e8 <error@@Base+0x92c>
   12598:	vmov	s2, r0
   1259c:	sub	r1, r0, r1
   125a0:	mov	r0, r4
   125a4:	vmov	s0, r1
   125a8:	vcvt.f64.s32	d17, s0
   125ac:	vcvt.f64.s32	d18, s2
   125b0:	ldr	r1, [pc, #340]	; 1270c <error@@Base+0x950>
   125b4:	vmul.f64	d16, d17, d16
   125b8:	vdiv.f64	d16, d16, d18
   125bc:	vmov	r2, r3, d16
   125c0:	add	r1, pc, r1
   125c4:	bl	10c90 <fprintf@plt>
   125c8:	b	125e4 <error@@Base+0x828>
   125cc:	ldr	r0, [pc, #308]	; 12708 <error@@Base+0x94c>
   125d0:	mov	r1, #8
   125d4:	mov	r2, #1
   125d8:	mov	r3, r4
   125dc:	add	r0, pc, r0
   125e0:	bl	10c00 <fwrite@plt>
   125e4:	ldr	r0, [pc, #292]	; 12710 <error@@Base+0x954>
   125e8:	mov	r1, #12
   125ec:	mov	r2, #1
   125f0:	mov	r3, r4
   125f4:	mov	r7, #1
   125f8:	add	r0, pc, r0
   125fc:	bl	10c00 <fwrite@plt>
   12600:	mov	r8, #0
   12604:	str	r7, [sp, #4]
   12608:	add	r1, r5, #8
   1260c:	mov	r0, r4
   12610:	mov	r2, #50	; 0x32
   12614:	str	r8, [sp]
   12618:	ldr	r3, [pc, #244]	; 12714 <error@@Base+0x958>
   1261c:	add	r3, pc, r3
   12620:	bl	12730 <error@@Base+0x974>
   12624:	str	r8, [sp]
   12628:	str	r7, [sp, #4]
   1262c:	add	r6, r5, #416	; 0x1a0
   12630:	mov	r0, r4
   12634:	mov	r2, #50	; 0x32
   12638:	ldr	r3, [pc, #216]	; 12718 <error@@Base+0x95c>
   1263c:	mov	r1, r6
   12640:	add	r3, pc, r3
   12644:	bl	12730 <error@@Base+0x974>
   12648:	str	r7, [sp]
   1264c:	str	r7, [sp, #4]
   12650:	add	r1, r5, #824	; 0x338
   12654:	mov	r0, r4
   12658:	mov	r2, #10
   1265c:	ldr	r3, [pc, #184]	; 1271c <error@@Base+0x960>
   12660:	add	r3, pc, r3
   12664:	bl	12730 <error@@Base+0x974>
   12668:	ldr	r0, [r5]
   1266c:	cmp	r0, #1
   12670:	blt	126d8 <error@@Base+0x91c>
   12674:	str	r8, [sp]
   12678:	str	r8, [sp, #4]
   1267c:	add	r1, r5, #920	; 0x398
   12680:	mov	r0, r4
   12684:	mov	r2, #8
   12688:	ldr	r3, [pc, #144]	; 12720 <error@@Base+0x964>
   1268c:	add	r3, pc, r3
   12690:	bl	12730 <error@@Base+0x974>
   12694:	ldr	r0, [r5, #8]
   12698:	cmp	r0, #1
   1269c:	blt	126b4 <error@@Base+0x8f8>
   126a0:	ldr	r2, [pc, #124]	; 12724 <error@@Base+0x968>
   126a4:	add	r1, r5, #992	; 0x3e0
   126a8:	mov	r0, r4
   126ac:	add	r2, pc, r2
   126b0:	bl	12af0 <error@@Base+0xd34>
   126b4:	ldr	r0, [r6]
   126b8:	cmp	r0, #1
   126bc:	blt	126d8 <error@@Base+0x91c>
   126c0:	ldr	r2, [pc, #96]	; 12728 <error@@Base+0x96c>
   126c4:	movw	r0, #9048	; 0x2358
   126c8:	add	r1, r5, r0
   126cc:	mov	r0, r4
   126d0:	add	r2, pc, r2
   126d4:	bl	12af0 <error@@Base+0xd34>
   126d8:	mov	r0, r4
   126dc:	sub	sp, fp, #24
   126e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   126e4:	b	11a24 <__assert_fail@plt+0xd10>
   126e8:	andeq	r0, r0, r0
   126ec:	subsmi	r0, r9, r0
   126f0:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   126f4:			; <UNDEFINED> instruction: 0x000017bb
   126f8:	andeq	r1, r0, sp, ror #14
   126fc:	muleq	r0, r4, ip
   12700:	andeq	r1, r0, r4, lsr #15
   12704:	muleq	r0, lr, r7
   12708:	muleq	r0, r2, r7
   1270c:			; <UNDEFINED> instruction: 0x000017b7
   12710:	andeq	r1, r0, r8, lsr r7
   12714:	andeq	r1, r0, r1, lsr #14
   12718:	andeq	r1, r0, r0, lsl r7
   1271c:	andeq	r1, r0, r7, ror #13
   12720:	ldrdeq	r1, [r0], -r2
   12724:	muleq	r0, r1, r6
   12728:	andeq	r1, r0, r0, lsl #13
   1272c:	nop	{0}
   12730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12734:	add	fp, sp, #28
   12738:	sub	sp, sp, #4
   1273c:	vpush	{d8}
   12740:	sub	sp, sp, #8
   12744:	mov	r5, r1
   12748:	ldr	r1, [pc, #832]	; 12a90 <error@@Base+0xcd4>
   1274c:	mov	r8, r2
   12750:	mov	r2, r3
   12754:	mov	r4, r0
   12758:	add	r1, pc, r1
   1275c:	bl	10c90 <fprintf@plt>
   12760:	ldr	r0, [pc, #812]	; 12a94 <error@@Base+0xcd8>
   12764:	mov	r1, #26
   12768:	mov	r2, #1
   1276c:	mov	r3, r4
   12770:	mov	r7, #1
   12774:	add	r0, pc, r0
   12778:	bl	10c00 <fwrite@plt>
   1277c:	ldr	r0, [pc, #788]	; 12a98 <error@@Base+0xcdc>
   12780:	mov	r1, #3
   12784:	mov	r2, #1
   12788:	mov	r3, r4
   1278c:	add	r0, pc, r0
   12790:	bl	10c00 <fwrite@plt>
   12794:	ldrb	r1, [fp, #8]
   12798:	ldr	r0, [pc, #764]	; 12a9c <error@@Base+0xce0>
   1279c:	ldr	r2, [pc, #764]	; 12aa0 <error@@Base+0xce4>
   127a0:	str	r1, [sp]
   127a4:	cmp	r1, #0
   127a8:	add	r0, pc, r0
   127ac:	add	r2, pc, r2
   127b0:	ldr	r1, [pc, #748]	; 12aa4 <error@@Base+0xce8>
   127b4:	movne	r2, r0
   127b8:	mov	r0, r4
   127bc:	add	r1, pc, r1
   127c0:	bl	10c90 <fprintf@plt>
   127c4:	ldr	r1, [fp, #12]
   127c8:	lsl	r0, r8, #16
   127cc:	sxth	r6, r8
   127d0:	cmp	r0, #65536	; 0x10000
   127d4:	str	r1, [sp, #4]
   127d8:	blt	128c0 <error@@Base+0xb04>
   127dc:	ldr	sl, [pc, #708]	; 12aa8 <error@@Base+0xcec>
   127e0:	vldr	d8, [pc, #672]	; 12a88 <error@@Base+0xccc>
   127e4:	mov	r8, #1
   127e8:	add	sl, pc, sl
   127ec:	mov	r0, r5
   127f0:	ldr	r2, [r0, r7, lsl #3]!
   127f4:	cmp	r2, #1
   127f8:	blt	128b0 <error@@Base+0xaf4>
   127fc:	cmp	r0, #0
   12800:	beq	12860 <error@@Base+0xaa4>
   12804:	add	r9, r5, r7, lsl #3
   12808:	mov	r0, r4
   1280c:	ldr	r3, [r9, #4]!
   12810:	ldr	r1, [pc, #660]	; 12aac <error@@Base+0xcf0>
   12814:	add	r1, pc, r1
   12818:	bl	10c90 <fprintf@plt>
   1281c:	ldr	r0, [r5, r7, lsl #3]
   12820:	cmp	r0, #0
   12824:	beq	12870 <error@@Base+0xab4>
   12828:	ldr	r1, [r9]
   1282c:	vmov	s2, r0
   12830:	sub	r1, r0, r1
   12834:	mov	r0, r4
   12838:	vmov	s0, r1
   1283c:	vcvt.f64.s32	d16, s0
   12840:	vcvt.f64.s32	d17, s2
   12844:	ldr	r1, [pc, #616]	; 12ab4 <error@@Base+0xcf8>
   12848:	vmul.f64	d16, d16, d8
   1284c:	vdiv.f64	d16, d16, d17
   12850:	vmov	r2, r3, d16
   12854:	add	r1, pc, r1
   12858:	bl	10c90 <fprintf@plt>
   1285c:	b	12888 <error@@Base+0xacc>
   12860:	ldr	r0, [pc, #592]	; 12ab8 <error@@Base+0xcfc>
   12864:	mov	r1, #26
   12868:	add	r0, pc, r0
   1286c:	b	1287c <error@@Base+0xac0>
   12870:	ldr	r0, [pc, #568]	; 12ab0 <error@@Base+0xcf4>
   12874:	mov	r1, #8
   12878:	add	r0, pc, r0
   1287c:	mov	r2, #1
   12880:	mov	r3, r4
   12884:	bl	10c00 <fwrite@plt>
   12888:	ldr	r0, [pc, #556]	; 12abc <error@@Base+0xd00>
   1288c:	mov	r1, #3
   12890:	mov	r2, #1
   12894:	mov	r3, r4
   12898:	add	r0, pc, r0
   1289c:	bl	10c00 <fwrite@plt>
   128a0:	mov	r0, r4
   128a4:	mov	r1, sl
   128a8:	mov	r2, r7
   128ac:	bl	10c90 <fprintf@plt>
   128b0:	add	r8, r8, #1
   128b4:	sxth	r7, r8
   128b8:	cmp	r6, r7
   128bc:	bge	127ec <error@@Base+0xa30>
   128c0:	ldr	r0, [sp]
   128c4:	cmp	r0, #0
   128c8:	beq	1299c <error@@Base+0xbe0>
   128cc:	add	r7, r6, #1
   128d0:	mov	r0, r5
   128d4:	ldr	r2, [r0, r7, lsl #3]!
   128d8:	cmp	r2, #1
   128dc:	blt	1299c <error@@Base+0xbe0>
   128e0:	cmp	r0, #0
   128e4:	beq	12948 <error@@Base+0xb8c>
   128e8:	add	r8, r5, r7, lsl #3
   128ec:	mov	r0, r4
   128f0:	ldr	r3, [r8, #4]!
   128f4:	ldr	r1, [pc, #452]	; 12ac0 <error@@Base+0xd04>
   128f8:	add	r1, pc, r1
   128fc:	bl	10c90 <fprintf@plt>
   12900:	ldr	r0, [r5, r7, lsl #3]
   12904:	cmp	r0, #0
   12908:	beq	12958 <error@@Base+0xb9c>
   1290c:	ldr	r1, [r8]
   12910:	vldr	d16, [pc, #368]	; 12a88 <error@@Base+0xccc>
   12914:	vmov	s2, r0
   12918:	sub	r1, r0, r1
   1291c:	mov	r0, r4
   12920:	vmov	s0, r1
   12924:	vcvt.f64.s32	d17, s0
   12928:	vcvt.f64.s32	d18, s2
   1292c:	ldr	r1, [pc, #404]	; 12ac8 <error@@Base+0xd0c>
   12930:	vmul.f64	d16, d17, d16
   12934:	vdiv.f64	d16, d16, d18
   12938:	vmov	r2, r3, d16
   1293c:	add	r1, pc, r1
   12940:	bl	10c90 <fprintf@plt>
   12944:	b	12970 <error@@Base+0xbb4>
   12948:	ldr	r0, [pc, #380]	; 12acc <error@@Base+0xd10>
   1294c:	mov	r1, #26
   12950:	add	r0, pc, r0
   12954:	b	12964 <error@@Base+0xba8>
   12958:	ldr	r0, [pc, #356]	; 12ac4 <error@@Base+0xd08>
   1295c:	mov	r1, #8
   12960:	add	r0, pc, r0
   12964:	mov	r2, #1
   12968:	mov	r3, r4
   1296c:	bl	10c00 <fwrite@plt>
   12970:	ldr	r0, [pc, #344]	; 12ad0 <error@@Base+0xd14>
   12974:	mov	r1, #3
   12978:	mov	r2, #1
   1297c:	mov	r3, r4
   12980:	add	r0, pc, r0
   12984:	bl	10c00 <fwrite@plt>
   12988:	ldr	r1, [pc, #324]	; 12ad4 <error@@Base+0xd18>
   1298c:	mov	r0, r4
   12990:	mov	r2, r6
   12994:	add	r1, pc, r1
   12998:	bl	10c90 <fprintf@plt>
   1299c:	ldr	r0, [sp, #4]
   129a0:	tst	r0, #255	; 0xff
   129a4:	beq	12a0c <error@@Base+0xc50>
   129a8:	cmp	r5, #0
   129ac:	beq	12a1c <error@@Base+0xc60>
   129b0:	ldm	r5, {r2, r3}
   129b4:	ldr	r1, [pc, #284]	; 12ad8 <error@@Base+0xd1c>
   129b8:	mov	r0, r4
   129bc:	add	r1, pc, r1
   129c0:	bl	10c90 <fprintf@plt>
   129c4:	ldr	r0, [r5]
   129c8:	cmp	r0, #0
   129cc:	beq	12a2c <error@@Base+0xc70>
   129d0:	ldr	r1, [r5, #4]
   129d4:	vldr	d16, [pc, #172]	; 12a88 <error@@Base+0xccc>
   129d8:	vmov	s2, r0
   129dc:	sub	r1, r0, r1
   129e0:	mov	r0, r4
   129e4:	vmov	s0, r1
   129e8:	vcvt.f64.s32	d17, s0
   129ec:	vcvt.f64.s32	d18, s2
   129f0:	ldr	r1, [pc, #232]	; 12ae0 <error@@Base+0xd24>
   129f4:	vmul.f64	d16, d17, d16
   129f8:	vdiv.f64	d16, d16, d18
   129fc:	vmov	r2, r3, d16
   12a00:	add	r1, pc, r1
   12a04:	bl	10c90 <fprintf@plt>
   12a08:	b	12a44 <error@@Base+0xc88>
   12a0c:	sub	sp, fp, #40	; 0x28
   12a10:	vpop	{d8}
   12a14:	add	sp, sp, #4
   12a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a1c:	ldr	r0, [pc, #192]	; 12ae4 <error@@Base+0xd28>
   12a20:	mov	r1, #26
   12a24:	add	r0, pc, r0
   12a28:	b	12a38 <error@@Base+0xc7c>
   12a2c:	ldr	r0, [pc, #168]	; 12adc <error@@Base+0xd20>
   12a30:	mov	r1, #8
   12a34:	add	r0, pc, r0
   12a38:	mov	r2, #1
   12a3c:	mov	r3, r4
   12a40:	bl	10c00 <fwrite@plt>
   12a44:	ldr	r0, [pc, #156]	; 12ae8 <error@@Base+0xd2c>
   12a48:	mov	r1, #3
   12a4c:	mov	r2, #1
   12a50:	mov	r3, r4
   12a54:	add	r0, pc, r0
   12a58:	bl	10c00 <fwrite@plt>
   12a5c:	ldr	r0, [pc, #136]	; 12aec <error@@Base+0xd30>
   12a60:	mov	r1, #7
   12a64:	mov	r2, #1
   12a68:	mov	r3, r4
   12a6c:	add	r0, pc, r0
   12a70:	sub	sp, fp, #40	; 0x28
   12a74:	vpop	{d8}
   12a78:	add	sp, sp, #4
   12a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a80:	b	10c00 <fwrite@plt>
   12a84:	nop	{0}
   12a88:	andeq	r0, r0, r0
   12a8c:	subsmi	r0, r9, r0
   12a90:	andeq	r1, r0, r5, lsr #12
   12a94:	andeq	r1, r0, r9, lsr r6
   12a98:	andeq	r1, r0, ip, lsr r6
   12a9c:	ldrdeq	r1, [r0], -sl
   12aa0:	ldrdeq	r1, [r0], -sp
   12aa4:	andeq	r1, r0, r2, asr #11
   12aa8:	andeq	r1, r0, r8, lsr #11
   12aac:	andeq	r1, r0, lr, lsl #11
   12ab0:	strdeq	r1, [r0], -r6
   12ab4:	andeq	r1, r0, r3, lsr #10
   12ab8:	andeq	r1, r0, r5, asr #10
   12abc:	andeq	r1, r0, r0, lsr r5
   12ac0:	andeq	r1, r0, sl, lsr #9
   12ac4:	andeq	r1, r0, lr, lsl #8
   12ac8:	andeq	r1, r0, fp, lsr r4
   12acc:	andeq	r1, r0, sp, asr r4
   12ad0:	andeq	r1, r0, r8, asr #8
   12ad4:	andeq	r1, r0, r5, lsl #8
   12ad8:	andeq	r1, r0, r6, ror #7
   12adc:	andeq	r1, r0, sl, lsr r3
   12ae0:	andeq	r1, r0, r7, ror r3
   12ae4:	andeq	r1, r0, r9, lsl #7
   12ae8:	andeq	r1, r0, r4, ror r3
   12aec:	andeq	r1, r0, r9, asr r1
   12af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af4:	add	fp, sp, #28
   12af8:	sub	sp, sp, #4
   12afc:	vpush	{d8}
   12b00:	mov	r5, r0
   12b04:	mov	r0, r1
   12b08:	mov	r6, r2
   12b0c:	mov	r8, r1
   12b10:	bl	11820 <__assert_fail@plt+0xb0c>
   12b14:	movw	r0, #8052	; 0x1f74
   12b18:	ldr	r0, [r8, r0]!
   12b1c:	mov	r4, r8
   12b20:	ldr	r1, [r4, #-4]!
   12b24:	ldr	r2, [pc, #324]	; 12c70 <error@@Base+0xeb4>
   12b28:	add	r2, pc, r2
   12b2c:	bl	114c4 <__assert_fail@plt+0x7b0>
   12b30:	ldr	r1, [pc, #316]	; 12c74 <error@@Base+0xeb8>
   12b34:	mov	r0, r5
   12b38:	mov	r2, r6
   12b3c:	add	r1, pc, r1
   12b40:	bl	10c90 <fprintf@plt>
   12b44:	ldr	r0, [pc, #300]	; 12c78 <error@@Base+0xebc>
   12b48:	mov	r1, #26
   12b4c:	mov	r2, #1
   12b50:	mov	r3, r5
   12b54:	add	r0, pc, r0
   12b58:	bl	10c00 <fwrite@plt>
   12b5c:	ldr	r0, [pc, #280]	; 12c7c <error@@Base+0xec0>
   12b60:	mov	r1, #3
   12b64:	mov	r2, #1
   12b68:	mov	r3, r5
   12b6c:	add	r0, pc, r0
   12b70:	bl	10c00 <fwrite@plt>
   12b74:	mov	r0, #10
   12b78:	mov	r1, r5
   12b7c:	bl	10cc0 <fputc@plt>
   12b80:	ldr	r0, [r8]
   12b84:	cmp	r0, #1
   12b88:	blt	12c5c <error@@Base+0xea0>
   12b8c:	ldr	r7, [pc, #236]	; 12c80 <error@@Base+0xec4>
   12b90:	ldr	r6, [pc, #236]	; 12c84 <error@@Base+0xec8>
   12b94:	vldr	d8, [pc, #204]	; 12c68 <error@@Base+0xeac>
   12b98:	mov	sl, #0
   12b9c:	add	r7, pc, r7
   12ba0:	add	r6, pc, r6
   12ba4:	ldr	r0, [r4]
   12ba8:	ldr	r9, [r0, sl, lsl #2]
   12bac:	mov	r0, r5
   12bb0:	ldr	r2, [r9, #12]
   12bb4:	ldr	r3, [r9, #16]
   12bb8:	ldr	r1, [pc, #200]	; 12c88 <error@@Base+0xecc>
   12bbc:	add	r1, pc, r1
   12bc0:	bl	10c90 <fprintf@plt>
   12bc4:	ldr	r0, [r9, #12]
   12bc8:	cmp	r0, #0
   12bcc:	beq	12c08 <error@@Base+0xe4c>
   12bd0:	ldr	r1, [r9, #16]
   12bd4:	vmov	s2, r0
   12bd8:	sub	r1, r0, r1
   12bdc:	mov	r0, r5
   12be0:	vmov	s0, r1
   12be4:	vcvt.f64.s32	d16, s0
   12be8:	vcvt.f64.s32	d17, s2
   12bec:	ldr	r1, [pc, #156]	; 12c90 <error@@Base+0xed4>
   12bf0:	vmul.f64	d16, d16, d8
   12bf4:	vdiv.f64	d16, d16, d17
   12bf8:	vmov	r2, r3, d16
   12bfc:	add	r1, pc, r1
   12c00:	bl	10c90 <fprintf@plt>
   12c04:	b	12c20 <error@@Base+0xe64>
   12c08:	ldr	r0, [pc, #124]	; 12c8c <error@@Base+0xed0>
   12c0c:	mov	r1, #8
   12c10:	mov	r2, #1
   12c14:	mov	r3, r5
   12c18:	add	r0, pc, r0
   12c1c:	bl	10c00 <fwrite@plt>
   12c20:	mov	r0, r7
   12c24:	mov	r1, #3
   12c28:	mov	r2, #1
   12c2c:	mov	r3, r5
   12c30:	bl	10c00 <fwrite@plt>
   12c34:	ldr	r0, [r4]
   12c38:	mov	r1, r6
   12c3c:	ldr	r0, [r0, sl, lsl #2]
   12c40:	ldr	r2, [r0, #8]
   12c44:	mov	r0, r5
   12c48:	bl	10c90 <fprintf@plt>
   12c4c:	ldr	r0, [r8]
   12c50:	add	sl, sl, #1
   12c54:	cmp	sl, r0
   12c58:	blt	12ba4 <error@@Base+0xde8>
   12c5c:	vpop	{d8}
   12c60:	add	sp, sp, #4
   12c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c68:	andeq	r0, r0, r0
   12c6c:	subsmi	r0, r9, r0
   12c70:	andeq	r0, r0, r4, ror #2
   12c74:	andeq	r1, r0, r1, asr #4
   12c78:	andeq	r1, r0, r9, asr r2
   12c7c:	andeq	r1, r0, ip, asr r2
   12c80:	andeq	r1, r0, ip, lsr #4
   12c84:	ldrdeq	r1, [r0], -lr
   12c88:	andeq	r1, r0, r6, ror #3
   12c8c:	andeq	r1, r0, r6, asr r1
   12c90:	andeq	r1, r0, fp, ror r1
   12c94:	ldr	r1, [r1, #8]
   12c98:	ldr	r0, [r0, #8]
   12c9c:	b	11920 <__assert_fail@plt+0xc0c>
   12ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca4:	add	fp, sp, #28
   12ca8:	sub	sp, sp, #28
   12cac:	ldr	r8, [r1]
   12cb0:	str	r0, [sp, #4]
   12cb4:	cmp	r8, #0
   12cb8:	str	r8, [sp, #16]
   12cbc:	beq	13410 <error@@Base+0x1654>
   12cc0:	ldr	sl, [pc, #1968]	; 13478 <error@@Base+0x16bc>
   12cc4:	add	r9, sp, #12
   12cc8:	add	sl, pc, sl
   12ccc:	mov	r0, #17
   12cd0:	mov	r1, r8
   12cd4:	mov	r5, r9
   12cd8:	mov	lr, r0
   12cdc:	mov	r9, #18
   12ce0:	cmp	r5, #0
   12ce4:	beq	12e50 <error@@Base+0x1094>
   12ce8:	mov	r5, r1
   12cec:	ldr	r0, [r5, #12]
   12cf0:	mov	r2, #0
   12cf4:	movw	r1, #1092	; 0x444
   12cf8:	sub	r3, r1, r2
   12cfc:	add	r3, r2, r3, lsr #1
   12d00:	add	r7, r3, r3, lsl #1
   12d04:	ldr	r6, [sl, r7, lsl #2]
   12d08:	cmp	r6, r0
   12d0c:	bls	12d20 <error@@Base+0xf64>
   12d10:	sub	r1, r3, #1
   12d14:	cmp	r1, r2
   12d18:	bcs	12cf8 <error@@Base+0xf3c>
   12d1c:	b	12d6c <error@@Base+0xfb0>
   12d20:	add	r2, sl, r7, lsl #2
   12d24:	ldr	r7, [r2, #4]
   12d28:	cmp	r7, r0
   12d2c:	bcs	12d40 <error@@Base+0xf84>
   12d30:	add	r2, r3, #1
   12d34:	cmp	r1, r2
   12d38:	bcs	12cf8 <error@@Base+0xf3c>
   12d3c:	b	12d6c <error@@Base+0xfb0>
   12d40:	ldr	r1, [r2, #8]
   12d44:	orr	r1, r1, #2
   12d48:	cmp	r1, #6
   12d4c:	bne	12d6c <error@@Base+0xfb0>
   12d50:	ldr	r5, [r5, #4]
   12d54:	cmp	r5, #0
   12d58:	bne	12cec <error@@Base+0xf30>
   12d5c:	mov	r2, #18
   12d60:	mov	ip, #18
   12d64:	mov	r5, #0
   12d68:	b	13050 <error@@Base+0x1294>
   12d6c:	cmp	r5, #0
   12d70:	beq	12e50 <error@@Base+0x1094>
   12d74:	mov	r2, #0
   12d78:	movw	r1, #1092	; 0x444
   12d7c:	sub	r3, r1, r2
   12d80:	add	r3, r2, r3, lsr #1
   12d84:	add	r7, r3, r3, lsl #1
   12d88:	ldr	r6, [sl, r7, lsl #2]
   12d8c:	cmp	r6, r0
   12d90:	bls	12da4 <error@@Base+0xfe8>
   12d94:	sub	r1, r3, #1
   12d98:	cmp	r1, r2
   12d9c:	bcs	12d7c <error@@Base+0xfc0>
   12da0:	b	12dc0 <error@@Base+0x1004>
   12da4:	add	r2, sl, r7, lsl #2
   12da8:	ldr	r7, [r2, #4]
   12dac:	cmp	r7, r0
   12db0:	bcs	131a4 <error@@Base+0x13e8>
   12db4:	add	r2, r3, #1
   12db8:	cmp	r1, r2
   12dbc:	bcs	12d7c <error@@Base+0xfc0>
   12dc0:	mov	ip, #0
   12dc4:	ldr	r6, [r5, #4]
   12dc8:	cmp	r6, #0
   12dcc:	beq	12ebc <error@@Base+0x1100>
   12dd0:	mov	r2, r6
   12dd4:	str	r5, [sp, #8]
   12dd8:	ldr	r0, [r2, #12]
   12ddc:	mov	r4, #0
   12de0:	movw	r3, #1092	; 0x444
   12de4:	sub	r7, r3, r4
   12de8:	add	r7, r4, r7, lsr #1
   12dec:	add	r5, r7, r7, lsl #1
   12df0:	ldr	r1, [sl, r5, lsl #2]
   12df4:	cmp	r1, r0
   12df8:	bls	12e0c <error@@Base+0x1050>
   12dfc:	sub	r3, r7, #1
   12e00:	cmp	r3, r4
   12e04:	bcs	12de4 <error@@Base+0x1028>
   12e08:	b	12e60 <error@@Base+0x10a4>
   12e0c:	add	r5, sl, r5, lsl #2
   12e10:	ldr	r1, [r5, #4]
   12e14:	cmp	r1, r0
   12e18:	bcs	12e2c <error@@Base+0x1070>
   12e1c:	add	r4, r7, #1
   12e20:	cmp	r3, r4
   12e24:	bcs	12de4 <error@@Base+0x1028>
   12e28:	b	12e60 <error@@Base+0x10a4>
   12e2c:	ldr	r1, [r5, #8]
   12e30:	orr	r1, r1, #2
   12e34:	cmp	r1, #6
   12e38:	bne	12e60 <error@@Base+0x10a4>
   12e3c:	ldr	r2, [r2, #4]
   12e40:	cmp	r2, #0
   12e44:	bne	12dd8 <error@@Base+0x101c>
   12e48:	mov	r2, #18
   12e4c:	b	12ed0 <error@@Base+0x1114>
   12e50:	mov	r5, #0
   12e54:	mov	r2, #18
   12e58:	mov	ip, #18
   12e5c:	b	13050 <error@@Base+0x1294>
   12e60:	cmp	r2, #0
   12e64:	beq	12ecc <error@@Base+0x1110>
   12e68:	mov	r3, #0
   12e6c:	movw	r2, #1092	; 0x444
   12e70:	sub	r1, r2, r3
   12e74:	add	r7, r3, r1, lsr #1
   12e78:	add	r5, r7, r7, lsl #1
   12e7c:	ldr	r1, [sl, r5, lsl #2]
   12e80:	cmp	r1, r0
   12e84:	bls	12e98 <error@@Base+0x10dc>
   12e88:	sub	r2, r7, #1
   12e8c:	cmp	r2, r3
   12e90:	bcs	12e70 <error@@Base+0x10b4>
   12e94:	b	12ec4 <error@@Base+0x1108>
   12e98:	add	r3, sl, r5, lsl #2
   12e9c:	ldr	r1, [r3, #4]
   12ea0:	cmp	r1, r0
   12ea4:	bcs	131ac <error@@Base+0x13f0>
   12ea8:	add	r3, r7, #1
   12eac:	cmp	r2, r3
   12eb0:	bcs	12e70 <error@@Base+0x10b4>
   12eb4:	mov	r2, #0
   12eb8:	b	12ed0 <error@@Base+0x1114>
   12ebc:	mov	r2, #18
   12ec0:	b	13050 <error@@Base+0x1294>
   12ec4:	mov	r2, #0
   12ec8:	b	12ed0 <error@@Base+0x1114>
   12ecc:	mov	r2, #18
   12ed0:	ldr	r0, [r6, #12]
   12ed4:	mov	r4, #0
   12ed8:	movw	r3, #1092	; 0x444
   12edc:	sub	r1, r3, r4
   12ee0:	add	r7, r4, r1, lsr #1
   12ee4:	add	r5, r7, r7, lsl #1
   12ee8:	ldr	r1, [sl, r5, lsl #2]
   12eec:	cmp	r1, r0
   12ef0:	bls	12f04 <error@@Base+0x1148>
   12ef4:	sub	r3, r7, #1
   12ef8:	cmp	r3, r4
   12efc:	bcs	12edc <error@@Base+0x1120>
   12f00:	b	12f4c <error@@Base+0x1190>
   12f04:	add	r5, sl, r5, lsl #2
   12f08:	ldr	r1, [r5, #4]
   12f0c:	cmp	r1, r0
   12f10:	bcs	12f24 <error@@Base+0x1168>
   12f14:	add	r4, r7, #1
   12f18:	cmp	r3, r4
   12f1c:	bcs	12edc <error@@Base+0x1120>
   12f20:	b	12f4c <error@@Base+0x1190>
   12f24:	ldr	r0, [r5, #8]
   12f28:	orr	r0, r0, #2
   12f2c:	cmp	r0, #6
   12f30:	bne	12f4c <error@@Base+0x1190>
   12f34:	ldr	r6, [r6, #4]
   12f38:	cmp	r6, #0
   12f3c:	bne	12ed0 <error@@Base+0x1114>
   12f40:	ldr	r5, [sp, #8]
   12f44:	mov	r9, #18
   12f48:	b	13040 <error@@Base+0x1284>
   12f4c:	mov	r9, #18
   12f50:	cmp	r6, #0
   12f54:	beq	12fd4 <error@@Base+0x1218>
   12f58:	ldr	r6, [r6, #4]
   12f5c:	cmp	r6, #0
   12f60:	beq	12fd4 <error@@Base+0x1218>
   12f64:	ldr	r0, [r6, #12]
   12f68:	mov	r3, #0
   12f6c:	movw	r4, #1092	; 0x444
   12f70:	sub	r1, r4, r3
   12f74:	add	r7, r3, r1, lsr #1
   12f78:	add	r5, r7, r7, lsl #1
   12f7c:	ldr	r1, [sl, r5, lsl #2]
   12f80:	cmp	r1, r0
   12f84:	bls	12f98 <error@@Base+0x11dc>
   12f88:	sub	r4, r7, #1
   12f8c:	cmp	r4, r3
   12f90:	bcs	12f70 <error@@Base+0x11b4>
   12f94:	b	12fdc <error@@Base+0x1220>
   12f98:	add	r3, sl, r5, lsl #2
   12f9c:	ldr	r1, [r3, #4]
   12fa0:	cmp	r1, r0
   12fa4:	bcs	12fb8 <error@@Base+0x11fc>
   12fa8:	add	r3, r7, #1
   12fac:	cmp	r4, r3
   12fb0:	bcs	12f70 <error@@Base+0x11b4>
   12fb4:	b	12fdc <error@@Base+0x1220>
   12fb8:	ldr	r1, [r3, #8]
   12fbc:	orr	r1, r1, #2
   12fc0:	cmp	r1, #6
   12fc4:	bne	12fdc <error@@Base+0x1220>
   12fc8:	ldr	r6, [r6, #4]
   12fcc:	cmp	r6, #0
   12fd0:	bne	12f64 <error@@Base+0x11a8>
   12fd4:	ldr	r5, [sp, #8]
   12fd8:	b	13040 <error@@Base+0x1284>
   12fdc:	ldr	r5, [sp, #8]
   12fe0:	cmp	r6, #0
   12fe4:	beq	13040 <error@@Base+0x1284>
   12fe8:	mov	r4, #0
   12fec:	movw	r6, #1092	; 0x444
   12ff0:	sub	r1, r6, r4
   12ff4:	add	r3, r4, r1, lsr #1
   12ff8:	add	r7, r3, r3, lsl #1
   12ffc:	ldr	r1, [sl, r7, lsl #2]
   13000:	cmp	r1, r0
   13004:	bls	13018 <error@@Base+0x125c>
   13008:	sub	r6, r3, #1
   1300c:	cmp	r6, r4
   13010:	bcs	12ff0 <error@@Base+0x1234>
   13014:	b	1303c <error@@Base+0x1280>
   13018:	add	r7, sl, r7, lsl #2
   1301c:	ldr	r1, [r7, #4]
   13020:	cmp	r1, r0
   13024:	bcs	13248 <error@@Base+0x148c>
   13028:	add	r4, r3, #1
   1302c:	mov	r9, #0
   13030:	cmp	r6, r4
   13034:	bcs	12ff0 <error@@Base+0x1234>
   13038:	b	13040 <error@@Base+0x1284>
   1303c:	mov	r9, #0
   13040:	cmp	ip, #1
   13044:	moveq	r0, #1
   13048:	cmpeq	r2, #2
   1304c:	beq	13124 <error@@Base+0x1368>
   13050:	sub	r0, r2, #1
   13054:	cmp	r0, #3
   13058:	subcs	r0, ip, #1
   1305c:	cmpcs	r0, #3
   13060:	bcc	13260 <error@@Base+0x14a4>
   13064:	orr	r6, r2, #1
   13068:	orr	r4, ip, #1
   1306c:	cmp	r6, #9
   13070:	cmpeq	r4, #9
   13074:	beq	13120 <error@@Base+0x1364>
   13078:	cmp	r4, #9
   1307c:	bne	130a4 <error@@Base+0x12e8>
   13080:	cmp	r2, #13
   13084:	bhi	130a4 <error@@Base+0x12e8>
   13088:	mov	r0, #1
   1308c:	mov	r1, #13312	; 0x3400
   13090:	tst	r1, r0, lsl r2
   13094:	beq	130a4 <error@@Base+0x12e8>
   13098:	orr	r0, r9, #1
   1309c:	cmp	r0, #9
   130a0:	beq	13120 <error@@Base+0x1364>
   130a4:	orr	r0, lr, #1
   130a8:	cmp	r0, #9
   130ac:	bne	130d0 <error@@Base+0x1314>
   130b0:	cmp	ip, #13
   130b4:	bhi	130d0 <error@@Base+0x1314>
   130b8:	mov	r0, #1
   130bc:	mov	r1, #13312	; 0x3400
   130c0:	tst	r1, r0, lsl ip
   130c4:	beq	130d0 <error@@Base+0x1314>
   130c8:	cmp	r6, #9
   130cc:	beq	13120 <error@@Base+0x1364>
   130d0:	cmp	r2, #10
   130d4:	mov	r0, #8
   130d8:	cmpeq	ip, #8
   130dc:	beq	13124 <error@@Base+0x1368>
   130e0:	cmp	r9, #8
   130e4:	cmpeq	r2, #11
   130e8:	beq	13134 <error@@Base+0x1378>
   130ec:	cmp	r2, #8
   130f0:	cmpeq	lr, #8
   130f4:	beq	13140 <error@@Base+0x1384>
   130f8:	sub	r0, r4, #9
   130fc:	cmp	r2, #15
   13100:	clz	r0, r0
   13104:	lsr	r1, r0, #5
   13108:	bne	13150 <error@@Base+0x1394>
   1310c:	sub	r0, ip, #15
   13110:	clz	r0, r0
   13114:	lsr	r0, r0, #5
   13118:	orrs	r0, r0, r1
   1311c:	beq	13150 <error@@Base+0x1394>
   13120:	mov	r0, ip
   13124:	ldr	r1, [r5, #4]
   13128:	cmp	r1, #0
   1312c:	bne	12cd8 <error@@Base+0xf1c>
   13130:	b	13260 <error@@Base+0x14a4>
   13134:	cmp	ip, #8
   13138:	beq	13124 <error@@Base+0x1368>
   1313c:	b	130ec <error@@Base+0x1330>
   13140:	mov	r0, #11
   13144:	cmp	ip, #11
   13148:	beq	13124 <error@@Base+0x1368>
   1314c:	b	130f8 <error@@Base+0x133c>
   13150:	cmp	ip, #15
   13154:	mov	r0, #15
   13158:	cmpeq	r6, #9
   1315c:	beq	13124 <error@@Base+0x1368>
   13160:	cmp	lr, #15
   13164:	cmpeq	r2, #15
   13168:	beq	13220 <error@@Base+0x1464>
   1316c:	cmp	ip, #15
   13170:	bne	131b4 <error@@Base+0x13f8>
   13174:	cmp	r9, #15
   13178:	bne	131c4 <error@@Base+0x1408>
   1317c:	orr	r7, r2, #2
   13180:	sub	r3, r2, #10
   13184:	sub	r7, r7, #14
   13188:	clz	r3, r3
   1318c:	clz	r7, r7
   13190:	lsr	r3, r3, #5
   13194:	lsr	r7, r7, #5
   13198:	orrs	r3, r3, r7
   1319c:	bne	13124 <error@@Base+0x1368>
   131a0:	b	131c4 <error@@Base+0x1408>
   131a4:	ldr	ip, [r2, #8]
   131a8:	b	12dc4 <error@@Base+0x1008>
   131ac:	ldr	r2, [r3, #8]
   131b0:	b	12ed0 <error@@Base+0x1114>
   131b4:	cmp	r2, #7
   131b8:	moveq	r0, #7
   131bc:	cmpeq	ip, #7
   131c0:	beq	13124 <error@@Base+0x1368>
   131c4:	cmp	r2, #16
   131c8:	bne	131f4 <error@@Base+0x1438>
   131cc:	orr	r0, ip, #8
   131d0:	sub	r0, r0, #15
   131d4:	clz	r0, r0
   131d8:	lsr	r0, r0, #5
   131dc:	orr	r0, r0, r1
   131e0:	sub	r1, ip, #16
   131e4:	clz	r1, r1
   131e8:	lsr	r1, r1, #5
   131ec:	orrs	r0, r1, r0
   131f0:	bne	13120 <error@@Base+0x1364>
   131f4:	cmp	ip, #16
   131f8:	bne	13250 <error@@Base+0x1494>
   131fc:	cmp	r2, #16
   13200:	bhi	13260 <error@@Base+0x14a4>
   13204:	movw	r3, #33664	; 0x8380
   13208:	mov	r1, #1
   1320c:	mov	r0, #16
   13210:	movt	r3, #1
   13214:	tst	r3, r1, lsl r2
   13218:	bne	13124 <error@@Base+0x1368>
   1321c:	b	13260 <error@@Base+0x14a4>
   13220:	orr	r7, ip, #2
   13224:	sub	r3, ip, #10
   13228:	sub	r7, r7, #14
   1322c:	clz	r3, r3
   13230:	clz	r7, r7
   13234:	lsr	r3, r3, #5
   13238:	lsr	r7, r7, #5
   1323c:	orrs	r3, r3, r7
   13240:	bne	13120 <error@@Base+0x1364>
   13244:	b	1316c <error@@Base+0x13b0>
   13248:	ldr	r9, [r7, #8]
   1324c:	b	13040 <error@@Base+0x1284>
   13250:	cmp	r2, #5
   13254:	moveq	r0, #5
   13258:	cmpeq	ip, #5
   1325c:	beq	13124 <error@@Base+0x1368>
   13260:	cmp	r5, #0
   13264:	add	r9, sp, #12
   13268:	beq	13410 <error@@Base+0x1654>
   1326c:	ldr	r1, [r5, #4]
   13270:	cmp	r1, #0
   13274:	beq	13308 <error@@Base+0x154c>
   13278:	mov	r0, r1
   1327c:	ldr	r1, [r1, #12]
   13280:	mov	r4, r5
   13284:	mov	r3, #0
   13288:	movw	r2, #1092	; 0x444
   1328c:	sub	r7, r2, r3
   13290:	add	r7, r3, r7, lsr #1
   13294:	add	r6, r7, r7, lsl #1
   13298:	ldr	r5, [sl, r6, lsl #2]
   1329c:	cmp	r5, r1
   132a0:	bls	132b4 <error@@Base+0x14f8>
   132a4:	sub	r2, r7, #1
   132a8:	cmp	r2, r3
   132ac:	bcs	1328c <error@@Base+0x14d0>
   132b0:	b	132f8 <error@@Base+0x153c>
   132b4:	add	r3, sl, r6, lsl #2
   132b8:	ldr	r6, [r3, #4]
   132bc:	cmp	r6, r1
   132c0:	bcs	132d4 <error@@Base+0x1518>
   132c4:	add	r3, r7, #1
   132c8:	cmp	r2, r3
   132cc:	bcs	1328c <error@@Base+0x14d0>
   132d0:	b	132f8 <error@@Base+0x153c>
   132d4:	ldr	r1, [r3, #8]
   132d8:	orr	r1, r1, #2
   132dc:	cmp	r1, #6
   132e0:	bne	132f8 <error@@Base+0x153c>
   132e4:	ldr	r1, [r0, #4]
   132e8:	mov	r5, r0
   132ec:	cmp	r1, #0
   132f0:	bne	13278 <error@@Base+0x14bc>
   132f4:	b	1330c <error@@Base+0x1550>
   132f8:	mov	r5, r4
   132fc:	cmp	r4, #0
   13300:	bne	13310 <error@@Base+0x1554>
   13304:	b	13410 <error@@Base+0x1654>
   13308:	mov	r0, r5
   1330c:	mov	r5, r0
   13310:	ldr	r0, [r8, #12]
   13314:	bl	10ba0 <utf8proc_get_property@plt>
   13318:	ldrsh	r0, [r0]
   1331c:	sub	r1, r0, #1
   13320:	cmp	r1, #12
   13324:	bcs	13400 <error@@Base+0x1644>
   13328:	ldr	r4, [r5, #4]!
   1332c:	cmp	r4, r8
   13330:	beq	133a0 <error@@Base+0x15e4>
   13334:	mov	r6, #0
   13338:	mov	r7, r8
   1333c:	cmp	r7, #0
   13340:	beq	13418 <error@@Base+0x165c>
   13344:	ldr	r0, [r7, #12]
   13348:	mov	r1, r9
   1334c:	bl	10bb8 <utf8proc_encode_char@plt>
   13350:	cmp	r0, #0
   13354:	beq	13438 <error@@Base+0x167c>
   13358:	ldr	r7, [r7, #4]
   1335c:	add	r6, r0, r6
   13360:	cmp	r7, r4
   13364:	bne	1333c <error@@Base+0x1580>
   13368:	add	r0, r6, #1
   1336c:	bl	10c30 <malloc@plt>
   13370:	mov	r6, r0
   13374:	mov	r9, #0
   13378:	cmp	r8, #0
   1337c:	beq	13458 <error@@Base+0x169c>
   13380:	ldr	r0, [r8, #12]
   13384:	add	r1, r6, r9
   13388:	bl	10bb8 <utf8proc_encode_char@plt>
   1338c:	ldr	r8, [r8, #4]
   13390:	add	r9, r0, r9
   13394:	cmp	r8, r4
   13398:	bne	13378 <error@@Base+0x15bc>
   1339c:	b	133b0 <error@@Base+0x15f4>
   133a0:	mov	r0, #1
   133a4:	bl	10c30 <malloc@plt>
   133a8:	mov	r6, r0
   133ac:	mov	r9, #0
   133b0:	mov	r0, #0
   133b4:	mov	r1, #12
   133b8:	strb	r0, [r6, r9]
   133bc:	mov	r0, #1
   133c0:	bl	118fc <__assert_fail@plt+0xbe8>
   133c4:	mov	r7, r0
   133c8:	mov	r0, r6
   133cc:	bl	10cb4 <utf8proc_NFC@plt>
   133d0:	str	r0, [r7, #8]
   133d4:	ldr	r0, [sp, #4]
   133d8:	mov	r1, r7
   133dc:	bl	11280 <__assert_fail@plt+0x56c>
   133e0:	mov	r0, r6
   133e4:	bl	10b94 <free@plt>
   133e8:	add	r9, sp, #12
   133ec:	ldr	r8, [r5]
   133f0:	cmp	r8, #0
   133f4:	str	r8, [sp, #16]
   133f8:	bne	12ccc <error@@Base+0xf10>
   133fc:	b	13410 <error@@Base+0x1654>
   13400:	cmp	r0, #29
   13404:	beq	13328 <error@@Base+0x156c>
   13408:	add	r5, r5, #4
   1340c:	b	133ec <error@@Base+0x1630>
   13410:	sub	sp, fp, #28
   13414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13418:	ldr	r0, [pc, #92]	; 1347c <error@@Base+0x16c0>
   1341c:	ldr	r1, [pc, #92]	; 13480 <error@@Base+0x16c4>
   13420:	ldr	r3, [pc, #92]	; 13484 <error@@Base+0x16c8>
   13424:	mov	r2, #249	; 0xf9
   13428:	add	r0, pc, r0
   1342c:	add	r1, pc, r1
   13430:	add	r3, pc, r3
   13434:	bl	10d14 <__assert_fail@plt>
   13438:	ldr	r0, [pc, #72]	; 13488 <error@@Base+0x16cc>
   1343c:	ldr	r1, [pc, #72]	; 1348c <error@@Base+0x16d0>
   13440:	ldr	r3, [pc, #72]	; 13490 <error@@Base+0x16d4>
   13444:	mov	r2, #253	; 0xfd
   13448:	add	r0, pc, r0
   1344c:	add	r1, pc, r1
   13450:	add	r3, pc, r3
   13454:	bl	10d14 <__assert_fail@plt>
   13458:	ldr	r0, [pc, #52]	; 13494 <error@@Base+0x16d8>
   1345c:	ldr	r1, [pc, #52]	; 13498 <error@@Base+0x16dc>
   13460:	ldr	r3, [pc, #52]	; 1349c <error@@Base+0x16e0>
   13464:	movw	r2, #269	; 0x10d
   13468:	add	r0, pc, r0
   1346c:	add	r1, pc, r1
   13470:	add	r3, pc, r3
   13474:	bl	10d14 <__assert_fail@plt>
   13478:	andeq	r1, r0, r4, lsl #2
   1347c:	andeq	r3, r0, r7, ror #25
   13480:	ldrdeq	r3, [r0], -ip
   13484:	andeq	r3, r0, pc, ror #25
   13488:	strdeq	r3, [r0], -r1
   1348c:			; <UNDEFINED> instruction: 0x00003cbc
   13490:	andeq	r3, r0, pc, asr #25
   13494:	andeq	r3, r0, r7, lsr #25
   13498:	muleq	r0, ip, ip
   1349c:	ldrdeq	r3, [r0], -ip
   134a0:	push	{r4, sl, fp, lr}
   134a4:	add	fp, sp, #8
   134a8:	mov	r4, r0
   134ac:	ldr	r0, [r0, #8]
   134b0:	bl	10b94 <free@plt>
   134b4:	mov	r0, r4
   134b8:	pop	{r4, sl, fp, lr}
   134bc:	b	10b94 <free@plt>
   134c0:	push	{r4, r5, r6, sl, fp, lr}
   134c4:	add	fp, sp, #16
   134c8:	mov	r5, r1
   134cc:	mov	r6, r0
   134d0:	mov	r0, #1
   134d4:	mov	r1, #16
   134d8:	mov	r4, r2
   134dc:	bl	118fc <__assert_fail@plt+0xbe8>
   134e0:	strb	r5, [r0, #8]
   134e4:	mov	r1, r0
   134e8:	str	r4, [r0, #12]
   134ec:	mov	r0, r6
   134f0:	pop	{r4, r5, r6, sl, fp, lr}
   134f4:	b	11280 <__assert_fail@plt+0x56c>
   134f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134fc:	add	fp, sp, #28
   13500:	sub	sp, sp, #124	; 0x7c
   13504:	mov	r4, r2
   13508:	mov	r2, r1
   1350c:	cmp	r1, #0
   13510:	str	r0, [sp, #16]
   13514:	bne	13524 <error@@Base+0x1768>
   13518:	ldrb	r0, [r4]
   1351c:	cmp	r0, #0
   13520:	bne	13850 <error@@Base+0x1a94>
   13524:	ldr	r0, [sp, #16]
   13528:	ldr	r0, [r0, #4]
   1352c:	str	r0, [sp, #4]
   13530:	mov	r0, r2
   13534:	ldr	r1, [pc, #808]	; 13864 <error@@Base+0x1aa8>
   13538:	add	r1, pc, r1
   1353c:	bl	1199c <__assert_fail@plt+0xc88>
   13540:	mov	r6, r0
   13544:	ldrb	r0, [r4]
   13548:	cmp	r0, #0
   1354c:	beq	13594 <error@@Base+0x17d8>
   13550:	add	r0, sp, #20
   13554:	mov	r1, #99	; 0x63
   13558:	mov	r2, r6
   1355c:	bl	10bac <fgets@plt>
   13560:	cmp	r0, #0
   13564:	beq	13584 <error@@Base+0x17c8>
   13568:	ldr	r1, [pc, #760]	; 13868 <error@@Base+0x1aac>
   1356c:	add	r0, sp, #20
   13570:	mov	r2, #51	; 0x33
   13574:	add	r1, pc, r1
   13578:	bl	10cf0 <strncmp@plt>
   1357c:	cmp	r0, #0
   13580:	beq	137e0 <error@@Base+0x1a24>
   13584:	mov	r0, r6
   13588:	bl	10bd0 <rewind@plt>
   1358c:	mov	r5, #0
   13590:	strb	r5, [r4, #11]
   13594:	ldr	r9, [r4, #4]
   13598:	ldrb	r8, [r4, #1]
   1359c:	mov	r0, r6
   135a0:	str	r4, [sp, #8]
   135a4:	cmp	r9, #0
   135a8:	movweq	r9, #94	; 0x5e
   135ac:	bl	10d08 <getc@plt>
   135b0:	cmn	r0, #1
   135b4:	beq	13678 <error@@Base+0x18bc>
   135b8:	add	r1, sp, #20
   135bc:	mov	sl, #0
   135c0:	sub	r4, fp, #32
   135c4:	add	r1, r1, #1
   135c8:	str	r1, [sp, #12]
   135cc:	ldr	r1, [pc, #668]	; 13870 <error@@Base+0x1ab4>
   135d0:	ldr	r1, [pc, r1]
   135d4:	add	r1, r1, r0
   135d8:	ldrsb	r5, [r1]
   135dc:	cmp	r5, #0
   135e0:	ble	13830 <error@@Base+0x1a74>
   135e4:	cmp	r5, #1
   135e8:	strb	r0, [sp, #20]
   135ec:	beq	13610 <error@@Base+0x1854>
   135f0:	ldr	r0, [sp, #12]
   135f4:	sub	r7, r5, #1
   135f8:	mov	r1, #1
   135fc:	mov	r3, r6
   13600:	mov	r2, r7
   13604:	bl	10c0c <fread@plt>
   13608:	cmp	r0, r7
   1360c:	bne	13844 <error@@Base+0x1a88>
   13610:	add	r0, sp, #20
   13614:	mov	r1, #4
   13618:	mov	r2, r4
   1361c:	bl	10c18 <utf8proc_iterate@plt>
   13620:	cmp	r0, r5
   13624:	bne	1383c <error@@Base+0x1a80>
   13628:	ldr	r5, [fp, #-32]	; 0xffffffe0
   1362c:	cmp	r8, #0
   13630:	beq	13640 <error@@Base+0x1884>
   13634:	mov	r7, #1
   13638:	cmp	r5, r9
   1363c:	beq	13664 <error@@Base+0x18a8>
   13640:	mov	r0, #1
   13644:	mov	r1, #16
   13648:	bl	118fc <__assert_fail@plt+0xbe8>
   1364c:	strb	sl, [r0, #8]
   13650:	mov	r1, r0
   13654:	str	r5, [r0, #12]
   13658:	ldr	r0, [sp, #16]
   1365c:	bl	11280 <__assert_fail@plt+0x56c>
   13660:	mov	r7, #0
   13664:	mov	r0, r6
   13668:	bl	10d08 <getc@plt>
   1366c:	cmn	r0, #1
   13670:	mov	sl, r7
   13674:	bne	135cc <error@@Base+0x1810>
   13678:	mov	r0, r6
   1367c:	bl	11a24 <__assert_fail@plt+0xd10>
   13680:	ldr	r8, [sp, #8]
   13684:	ldr	r9, [sp, #4]
   13688:	ldrb	r0, [r8, #9]
   1368c:	cmp	r0, #0
   13690:	beq	1379c <error@@Base+0x19e0>
   13694:	ldr	r0, [sp, #16]
   13698:	cmp	r9, #0
   1369c:	addne	r0, r9, #4
   136a0:	ldr	r6, [r0]
   136a4:	cmp	r6, #0
   136a8:	beq	1379c <error@@Base+0x19e0>
   136ac:	mov	r5, #32
   136b0:	mov	r7, r6
   136b4:	ldr	r4, [r7, #12]
   136b8:	mov	r0, r4
   136bc:	bl	10ba0 <utf8proc_get_property@plt>
   136c0:	cmp	r4, #10
   136c4:	ble	136e0 <error@@Base+0x1924>
   136c8:	sub	r1, r4, #11
   136cc:	cmp	r1, #3
   136d0:	bcc	13704 <error@@Base+0x1948>
   136d4:	cmp	r4, #160	; 0xa0
   136d8:	beq	13704 <error@@Base+0x1948>
   136dc:	b	136f0 <error@@Base+0x1934>
   136e0:	cmp	r4, #9
   136e4:	beq	13704 <error@@Base+0x1948>
   136e8:	cmp	r4, #10
   136ec:	beq	13708 <error@@Base+0x194c>
   136f0:	ldrsh	r0, [r0]
   136f4:	sub	r0, r0, #23
   136f8:	cmp	r0, #2
   136fc:	strls	r5, [r7, #12]
   13700:	b	13708 <error@@Base+0x194c>
   13704:	str	r5, [r7, #12]
   13708:	ldr	r7, [r7, #4]
   1370c:	cmp	r7, #0
   13710:	bne	136b4 <error@@Base+0x18f8>
   13714:	mov	r4, #0
   13718:	ldr	r1, [r6, #12]
   1371c:	ldr	r5, [r6, #4]
   13720:	cmp	r1, #32
   13724:	bne	13760 <error@@Base+0x19a4>
   13728:	tst	r4, #255	; 0xff
   1372c:	beq	1377c <error@@Base+0x19c0>
   13730:	cmp	r5, #0
   13734:	ldrne	r1, [r5, #12]
   13738:	cmpne	r1, #10
   1373c:	beq	1377c <error@@Base+0x19c0>
   13740:	mov	r0, #1
   13744:	cmp	r1, #32
   13748:	bne	13774 <error@@Base+0x19b8>
   1374c:	ldrb	r0, [r6, #8]
   13750:	ldrb	r1, [r5, #8]
   13754:	orr	r0, r1, r0
   13758:	strb	r0, [r5, #8]
   1375c:	b	1377c <error@@Base+0x19c0>
   13760:	subs	r0, r1, #10
   13764:	movwne	r0, #1
   13768:	tst	r4, #255	; 0xff
   1376c:	cmpeq	r1, #10
   13770:	beq	1377c <error@@Base+0x19c0>
   13774:	mov	r4, r0
   13778:	b	13790 <error@@Base+0x19d4>
   1377c:	ldr	r0, [sp, #16]
   13780:	mov	r1, r6
   13784:	bl	11378 <__assert_fail@plt+0x664>
   13788:	mov	r0, r6
   1378c:	bl	10b94 <free@plt>
   13790:	cmp	r5, #0
   13794:	mov	r6, r5
   13798:	bne	13718 <error@@Base+0x195c>
   1379c:	ldrb	r0, [r8, #10]
   137a0:	cmp	r0, #0
   137a4:	beq	137d8 <error@@Base+0x1a1c>
   137a8:	ldr	r0, [sp, #16]
   137ac:	cmp	r9, #0
   137b0:	addne	r0, r9, #4
   137b4:	ldr	r4, [r0]
   137b8:	cmp	r4, #0
   137bc:	beq	137d8 <error@@Base+0x1a1c>
   137c0:	ldr	r0, [r4, #12]
   137c4:	bl	10be8 <utf8proc_tolower@plt>
   137c8:	str	r0, [r4, #12]
   137cc:	ldr	r4, [r4, #4]
   137d0:	cmp	r4, #0
   137d4:	bne	137c0 <error@@Base+0x1a04>
   137d8:	sub	sp, fp, #28
   137dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e0:	ldr	r8, [pc, #132]	; 1386c <error@@Base+0x1ab0>
   137e4:	mov	r7, #0
   137e8:	add	r9, sp, #20
   137ec:	mov	r5, #1
   137f0:	add	r8, pc, r8
   137f4:	mov	r0, r9
   137f8:	mov	r1, #99	; 0x63
   137fc:	mov	r2, r6
   13800:	bl	10bac <fgets@plt>
   13804:	cmp	r0, #0
   13808:	beq	13590 <error@@Base+0x17d4>
   1380c:	mov	r0, r9
   13810:	mov	r1, r8
   13814:	bl	10b64 <strcmp@plt>
   13818:	cmp	r0, #0
   1381c:	addeq	r7, r7, #1
   13820:	sxth	r7, r7
   13824:	cmp	r7, #2
   13828:	blt	137f4 <error@@Base+0x1a38>
   1382c:	b	13590 <error@@Base+0x17d4>
   13830:	ldr	r0, [pc, #68]	; 1387c <error@@Base+0x1ac0>
   13834:	add	r0, pc, r0
   13838:	bl	11dbc <error@@Base>
   1383c:	bl	10cd8 <utf8proc_errmsg@plt>
   13840:	bl	11dbc <error@@Base>
   13844:	ldr	r0, [pc, #52]	; 13880 <error@@Base+0x1ac4>
   13848:	add	r0, pc, r0
   1384c:	bl	11dbc <error@@Base>
   13850:	ldr	r0, [pc, #28]	; 13874 <error@@Base+0x1ab8>
   13854:	ldr	r1, [pc, #28]	; 13878 <error@@Base+0x1abc>
   13858:	add	r0, pc, r0
   1385c:	add	r1, pc, r1
   13860:	bl	11e0c <error@@Base+0x50>
   13864:	strdeq	r3, [r0], -r6
   13868:	andeq	r3, r0, r4, lsr ip
   1386c:	strdeq	r3, [r0], -r0
   13870:	strdeq	r4, [r1], -r8
   13874:	andeq	r3, r0, ip, lsl #18
   13878:	andeq	r3, r0, r8, lsl r9
   1387c:	andeq	r3, r0, r4, ror #19
   13880:	andeq	r3, r0, r8, ror #19
   13884:	push	{fp, lr}
   13888:	mov	fp, sp
   1388c:	bl	10bb8 <utf8proc_encode_char@plt>
   13890:	cmp	r0, #0
   13894:	sxtbgt	r0, r0
   13898:	popgt	{fp, pc}
   1389c:	ldr	r0, [pc, #4]	; 138a8 <error@@Base+0x1aec>
   138a0:	add	r0, pc, r0
   138a4:	bl	11dbc <error@@Base>
   138a8:	ldrdeq	r3, [r0], -lr
   138ac:	push	{r4, r5, r6, r7, fp, lr}
   138b0:	add	fp, sp, #16
   138b4:	mov	r6, r3
   138b8:	mov	r4, r2
   138bc:	mov	r5, r1
   138c0:	tst	r0, #255	; 0xff
   138c4:	beq	1390c <error@@Base+0x1b50>
   138c8:	mov	r0, #94	; 0x5e
   138cc:	mov	r1, r4
   138d0:	bl	10bb8 <utf8proc_encode_char@plt>
   138d4:	cmp	r0, #0
   138d8:	ble	13984 <error@@Base+0x1bc8>
   138dc:	sxtb	r7, r0
   138e0:	cmp	r5, #10
   138e4:	bne	13918 <error@@Base+0x1b5c>
   138e8:	ldr	r0, [pc, #224]	; 139d0 <error@@Base+0x1c14>
   138ec:	ldr	r1, [pc, #224]	; 139d4 <error@@Base+0x1c18>
   138f0:	tst	r6, #255	; 0xff
   138f4:	add	r0, pc, r0
   138f8:	add	r1, pc, r1
   138fc:	moveq	r1, r0
   13900:	add	r0, r4, r7
   13904:	pop	{r4, r5, r6, r7, fp, lr}
   13908:	b	10ccc <sprintf@plt>
   1390c:	mov	r7, #0
   13910:	cmp	r5, #10
   13914:	beq	138e8 <error@@Base+0x1b2c>
   13918:	mov	r0, r5
   1391c:	bl	10ba0 <utf8proc_get_property@plt>
   13920:	cmp	r5, #32
   13924:	beq	13938 <error@@Base+0x1b7c>
   13928:	ldrsh	r0, [r0]
   1392c:	sub	r1, r0, #1
   13930:	cmp	r1, #22
   13934:	bcs	13990 <error@@Base+0x1bd4>
   13938:	mov	r0, r5
   1393c:	bl	10c78 <utf8proc_category@plt>
   13940:	sub	r0, r0, #6
   13944:	cmp	r0, #2
   13948:	bhi	13964 <error@@Base+0x1ba8>
   1394c:	add	r1, r4, r7
   13950:	movw	r0, #9676	; 0x25cc
   13954:	bl	10bb8 <utf8proc_encode_char@plt>
   13958:	cmp	r0, #0
   1395c:	ble	13984 <error@@Base+0x1bc8>
   13960:	sxtab	r7, r7, r0
   13964:	add	r1, r4, r7
   13968:	mov	r0, r5
   1396c:	bl	10bb8 <utf8proc_encode_char@plt>
   13970:	cmp	r0, #0
   13974:	sxtabgt	r0, r7, r0
   13978:	movgt	r1, #0
   1397c:	strbgt	r1, [r4, r0]
   13980:	popgt	{r4, r5, r6, r7, fp, pc}
   13984:	ldr	r0, [pc, #64]	; 139cc <error@@Base+0x1c10>
   13988:	add	r0, pc, r0
   1398c:	bl	11dbc <error@@Base>
   13990:	cmp	r0, #29
   13994:	beq	13938 <error@@Base+0x1b7c>
   13998:	add	r0, r4, r7
   1399c:	cmp	r5, #255	; 0xff
   139a0:	bhi	139b0 <error@@Base+0x1bf4>
   139a4:	ldr	r1, [pc, #24]	; 139c4 <error@@Base+0x1c08>
   139a8:	add	r1, pc, r1
   139ac:	b	139b8 <error@@Base+0x1bfc>
   139b0:	ldr	r1, [pc, #16]	; 139c8 <error@@Base+0x1c0c>
   139b4:	add	r1, pc, r1
   139b8:	mov	r2, r5
   139bc:	pop	{r4, r5, r6, r7, fp, lr}
   139c0:	b	10ccc <sprintf@plt>
   139c4:	strdeq	r3, [r0], -r2
   139c8:	andeq	r3, r0, sp, ror #15
   139cc:	strdeq	r3, [r0], -r6
   139d0:	andeq	r0, r0, r5, ror r3
   139d4:	muleq	r0, sp, r8
   139d8:	push	{r4, r5, r6, r7, fp, lr}
   139dc:	add	fp, sp, #16
   139e0:	sub	sp, sp, #16
   139e4:	mov	r6, r2
   139e8:	mov	r2, r1
   139ec:	ldr	r1, [pc, #180]	; 13aa8 <error@@Base+0x1cec>
   139f0:	mov	r5, r0
   139f4:	mov	r0, r2
   139f8:	add	r1, pc, r1
   139fc:	bl	1199c <__assert_fail@plt+0xc88>
   13a00:	mov	r4, r0
   13a04:	cmp	r6, #0
   13a08:	beq	13a5c <error@@Base+0x1ca0>
   13a0c:	ldr	r0, [pc, #152]	; 13aac <error@@Base+0x1cf0>
   13a10:	mov	r1, #55	; 0x37
   13a14:	mov	r2, #1
   13a18:	mov	r3, r4
   13a1c:	add	r0, pc, r0
   13a20:	bl	10c00 <fwrite@plt>
   13a24:	ldr	r7, [pc, #132]	; 13ab0 <error@@Base+0x1cf4>
   13a28:	mov	r1, #55	; 0x37
   13a2c:	mov	r2, #1
   13a30:	mov	r3, r4
   13a34:	add	r7, pc, r7
   13a38:	mov	r0, r7
   13a3c:	bl	10c00 <fwrite@plt>
   13a40:	mov	r0, r4
   13a44:	blx	r6
   13a48:	mov	r0, r7
   13a4c:	mov	r1, #55	; 0x37
   13a50:	mov	r2, #1
   13a54:	mov	r3, r4
   13a58:	bl	10c00 <fwrite@plt>
   13a5c:	ldr	r6, [r5]
   13a60:	cmp	r6, #0
   13a64:	beq	13a98 <error@@Base+0x1cdc>
   13a68:	add	r5, sp, #7
   13a6c:	ldr	r1, [r6, #12]
   13a70:	ldrb	r0, [r6, #8]
   13a74:	mov	r2, r5
   13a78:	mov	r3, #0
   13a7c:	bl	138ac <error@@Base+0x1af0>
   13a80:	mov	r0, r5
   13a84:	mov	r1, r4
   13a88:	bl	10ce4 <fputs@plt>
   13a8c:	ldr	r6, [r6, #4]
   13a90:	cmp	r6, #0
   13a94:	bne	13a6c <error@@Base+0x1cb0>
   13a98:	mov	r0, r4
   13a9c:	bl	11a24 <__assert_fail@plt+0xd10>
   13aa0:	sub	sp, fp, #16
   13aa4:	pop	{r4, r5, r6, r7, fp, pc}
   13aa8:	andeq	r0, r0, sp, lsl #6
   13aac:	andeq	r3, r0, ip, lsl #15
   13ab0:	andeq	r3, r0, ip, lsr #15
   13ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab8:	add	fp, sp, #28
   13abc:	sub	sp, sp, #4
   13ac0:	mov	r9, #0
   13ac4:	mov	sl, r0
   13ac8:	str	r9, [sp]
   13acc:	ldrb	r0, [r1]
   13ad0:	cmp	r0, #0
   13ad4:	beq	13b34 <error@@Base+0x1d78>
   13ad8:	mov	r4, r1
   13adc:	mov	r8, sp
   13ae0:	mov	r7, #1
   13ae4:	mov	r0, r4
   13ae8:	mvn	r1, #0
   13aec:	mov	r2, r8
   13af0:	bl	10c18 <utf8proc_iterate@plt>
   13af4:	cmp	r0, #1
   13af8:	blt	13b3c <error@@Base+0x1d80>
   13afc:	ldr	r5, [sp]
   13b00:	mov	r6, r0
   13b04:	mov	r0, #1
   13b08:	mov	r1, #16
   13b0c:	bl	118fc <__assert_fail@plt+0xbe8>
   13b10:	strb	r9, [r0, #8]
   13b14:	mov	r1, r0
   13b18:	str	r5, [r0, #12]
   13b1c:	mov	r0, sl
   13b20:	bl	11280 <__assert_fail@plt+0x56c>
   13b24:	ldrb	r0, [r4, r6]!
   13b28:	cmp	r0, #0
   13b2c:	bne	13ae4 <error@@Base+0x1d28>
   13b30:	b	13b40 <error@@Base+0x1d84>
   13b34:	mov	r7, #1
   13b38:	b	13b40 <error@@Base+0x1d84>
   13b3c:	mov	r7, #0
   13b40:	mov	r0, r7
   13b44:	sub	sp, fp, #28
   13b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b50:	mov	r7, r0
   13b54:	ldr	r6, [pc, #72]	; 13ba4 <error@@Base+0x1de8>
   13b58:	ldr	r5, [pc, #72]	; 13ba8 <error@@Base+0x1dec>
   13b5c:	add	r6, pc, r6
   13b60:	add	r5, pc, r5
   13b64:	sub	r6, r6, r5
   13b68:	mov	r8, r1
   13b6c:	mov	r9, r2
   13b70:	bl	10b38 <calloc@plt-0x20>
   13b74:	asrs	r6, r6, #2
   13b78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b7c:	mov	r4, #0
   13b80:	add	r4, r4, #1
   13b84:	ldr	r3, [r5], #4
   13b88:	mov	r2, r9
   13b8c:	mov	r1, r8
   13b90:	mov	r0, r7
   13b94:	blx	r3
   13b98:	cmp	r6, r4
   13b9c:	bne	13b80 <error@@Base+0x1dc4>
   13ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ba4:	muleq	r1, r8, r3
   13ba8:	muleq	r1, r0, r3
   13bac:	bx	lr

Disassembly of section .fini:

00013bb0 <.fini>:
   13bb0:	push	{r3, lr}
   13bb4:	pop	{r3, pc}
