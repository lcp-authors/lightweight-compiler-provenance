
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010bf0 <.init>:
   10bf0:	push	{r3, lr}
   10bf4:	bl	10e50 <__assert_fail@plt+0x48>
   10bf8:	pop	{r3, pc}

Disassembly of section .plt:

00010bfc <calloc@plt-0x14>:
   10bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   10c00:	ldr	lr, [pc, #4]	; 10c0c <calloc@plt-0x4>
   10c04:	add	lr, pc, lr
   10c08:	ldr	pc, [lr, #8]!
   10c0c:	strdeq	r5, [r1], -r4

00010c10 <calloc@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #86016	; 0x15000
   10c18:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c1c <fputs_unlocked@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #86016	; 0x15000
   10c24:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c28 <strcmp@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #86016	; 0x15000
   10c30:	ldr	pc, [ip, #996]!	; 0x3e4

00010c34 <fflush@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #86016	; 0x15000
   10c3c:	ldr	pc, [ip, #988]!	; 0x3dc

00010c40 <free@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #980]!	; 0x3d4

00010c4c <_exit@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #972]!	; 0x3cc

00010c58 <memcpy@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #964]!	; 0x3c4

00010c64 <mbsinit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #956]!	; 0x3bc

00010c70 <memcmp@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #948]!	; 0x3b4

00010c7c <dcgettext@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #940]!	; 0x3ac

00010c88 <realloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #932]!	; 0x3a4

00010c94 <textdomain@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #924]!	; 0x39c

00010ca0 <iswprint@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #916]!	; 0x394

00010cac <fwrite@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #908]!	; 0x38c

00010cb8 <lseek64@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #900]!	; 0x384

00010cc4 <__ctype_get_mb_cur_max@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #892]!	; 0x37c

00010cd0 <__fpending@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #884]!	; 0x374

00010cdc <mbrtowc@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #876]!	; 0x36c

00010ce8 <error@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #868]!	; 0x364

00010cf4 <getenv@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #860]!	; 0x35c

00010d00 <malloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #852]!	; 0x354

00010d0c <__libc_start_main@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #844]!	; 0x34c

00010d18 <__freading@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #836]!	; 0x344

00010d24 <__gmon_start__@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #828]!	; 0x33c

00010d30 <__ctype_b_loc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #820]!	; 0x334

00010d3c <exit@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #812]!	; 0x32c

00010d48 <strlen@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #804]!	; 0x324

00010d54 <__errno_location@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #796]!	; 0x31c

00010d60 <__cxa_atexit@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #788]!	; 0x314

00010d6c <memset@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #780]!	; 0x30c

00010d78 <__printf_chk@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #772]!	; 0x304

00010d84 <fileno@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d90 <__fprintf_chk@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #756]!	; 0x2f4

00010d9c <fclose@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #748]!	; 0x2ec

00010da8 <fseeko64@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #740]!	; 0x2e4

00010db4 <__overflow@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #732]!	; 0x2dc

00010dc0 <setlocale@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #724]!	; 0x2d4

00010dcc <strrchr@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #716]!	; 0x2cc

00010dd8 <nl_langinfo@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #708]!	; 0x2c4

00010de4 <bindtextdomain@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #700]!	; 0x2bc

00010df0 <strncmp@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dfc <abort@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #684]!	; 0x2ac

00010e08 <__assert_fail@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #676]!	; 0x2a4

Disassembly of section .text:

00010e14 <.text>:
   10e14:	mov	fp, #0
   10e18:	mov	lr, #0
   10e1c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e20:	mov	r2, sp
   10e24:	push	{r2}		; (str r2, [sp, #-4]!)
   10e28:	push	{r0}		; (str r0, [sp, #-4]!)
   10e2c:	ldr	ip, [pc, #16]	; 10e44 <__assert_fail@plt+0x3c>
   10e30:	push	{ip}		; (str ip, [sp, #-4]!)
   10e34:	ldr	r0, [pc, #12]	; 10e48 <__assert_fail@plt+0x40>
   10e38:	ldr	r3, [pc, #12]	; 10e4c <__assert_fail@plt+0x44>
   10e3c:	bl	10d0c <__libc_start_main@plt>
   10e40:	bl	10dfc <abort@plt>
   10e44:	muleq	r1, ip, ip
   10e48:	strdeq	r1, [r1], -r4
   10e4c:	andeq	r4, r1, ip, lsr ip
   10e50:	ldr	r3, [pc, #20]	; 10e6c <__assert_fail@plt+0x64>
   10e54:	ldr	r2, [pc, #20]	; 10e70 <__assert_fail@plt+0x68>
   10e58:	add	r3, pc, r3
   10e5c:	ldr	r2, [r3, r2]
   10e60:	cmp	r2, #0
   10e64:	bxeq	lr
   10e68:	b	10d24 <__gmon_start__@plt>
   10e6c:	andeq	r5, r1, r0, lsr #3
   10e70:	strheq	r0, [r0], -r8
   10e74:	ldr	r0, [pc, #24]	; 10e94 <__assert_fail@plt+0x8c>
   10e78:	ldr	r3, [pc, #24]	; 10e98 <__assert_fail@plt+0x90>
   10e7c:	cmp	r3, r0
   10e80:	bxeq	lr
   10e84:	ldr	r3, [pc, #16]	; 10e9c <__assert_fail@plt+0x94>
   10e88:	cmp	r3, #0
   10e8c:	bxeq	lr
   10e90:	bx	r3
   10e94:	andeq	r6, r2, r0, lsl r1
   10e98:	andeq	r6, r2, r0, lsl r1
   10e9c:	andeq	r0, r0, r0
   10ea0:	ldr	r0, [pc, #36]	; 10ecc <__assert_fail@plt+0xc4>
   10ea4:	ldr	r1, [pc, #36]	; 10ed0 <__assert_fail@plt+0xc8>
   10ea8:	sub	r1, r1, r0
   10eac:	asr	r1, r1, #2
   10eb0:	add	r1, r1, r1, lsr #31
   10eb4:	asrs	r1, r1, #1
   10eb8:	bxeq	lr
   10ebc:	ldr	r3, [pc, #16]	; 10ed4 <__assert_fail@plt+0xcc>
   10ec0:	cmp	r3, #0
   10ec4:	bxeq	lr
   10ec8:	bx	r3
   10ecc:	andeq	r6, r2, r0, lsl r1
   10ed0:	andeq	r6, r2, r0, lsl r1
   10ed4:	andeq	r0, r0, r0
   10ed8:	push	{r4, lr}
   10edc:	ldr	r4, [pc, #24]	; 10efc <__assert_fail@plt+0xf4>
   10ee0:	ldrb	r3, [r4]
   10ee4:	cmp	r3, #0
   10ee8:	popne	{r4, pc}
   10eec:	bl	10e74 <__assert_fail@plt+0x6c>
   10ef0:	mov	r3, #1
   10ef4:	strb	r3, [r4]
   10ef8:	pop	{r4, pc}
   10efc:	andeq	r6, r2, r0, lsr #2
   10f00:	b	10ea0 <__assert_fail@plt+0x98>
   10f04:	push	{fp, lr}
   10f08:	mov	fp, sp
   10f0c:	cmp	r0, #0
   10f10:	bne	11060 <__assert_fail@plt+0x258>
   10f14:	movw	r1, #19702	; 0x4cf6
   10f18:	mov	r0, #0
   10f1c:	mov	r2, #5
   10f20:	movt	r1, #1
   10f24:	bl	10c7c <dcgettext@plt>
   10f28:	mov	r1, r0
   10f2c:	movw	r0, #24876	; 0x612c
   10f30:	movt	r0, #2
   10f34:	ldr	r2, [r0]
   10f38:	mov	r0, #1
   10f3c:	mov	r3, r2
   10f40:	bl	10d78 <__printf_chk@plt>
   10f44:	movw	r1, #19765	; 0x4d35
   10f48:	mov	r0, #0
   10f4c:	mov	r2, #5
   10f50:	movt	r1, #1
   10f54:	bl	10c7c <dcgettext@plt>
   10f58:	movw	r4, #24860	; 0x611c
   10f5c:	movt	r4, #2
   10f60:	ldr	r1, [r4]
   10f64:	bl	10c1c <fputs_unlocked@plt>
   10f68:	movw	r1, #19858	; 0x4d92
   10f6c:	mov	r0, #0
   10f70:	mov	r2, #5
   10f74:	movt	r1, #1
   10f78:	bl	10c7c <dcgettext@plt>
   10f7c:	ldr	r1, [r4]
   10f80:	bl	10c1c <fputs_unlocked@plt>
   10f84:	movw	r1, #19990	; 0x4e16
   10f88:	mov	r0, #0
   10f8c:	mov	r2, #5
   10f90:	movt	r1, #1
   10f94:	bl	10c7c <dcgettext@plt>
   10f98:	ldr	r1, [r4]
   10f9c:	bl	10c1c <fputs_unlocked@plt>
   10fa0:	movw	r1, #20035	; 0x4e43
   10fa4:	mov	r0, #0
   10fa8:	mov	r2, #5
   10fac:	movt	r1, #1
   10fb0:	bl	10c7c <dcgettext@plt>
   10fb4:	ldr	r1, [r4]
   10fb8:	bl	10c1c <fputs_unlocked@plt>
   10fbc:	movw	r1, #20089	; 0x4e79
   10fc0:	mov	r0, #0
   10fc4:	mov	r2, #5
   10fc8:	movt	r1, #1
   10fcc:	bl	10c7c <dcgettext@plt>
   10fd0:	ldr	r1, [r4]
   10fd4:	bl	10c1c <fputs_unlocked@plt>
   10fd8:	movw	r1, #20152	; 0x4eb8
   10fdc:	mov	r0, #0
   10fe0:	mov	r2, #5
   10fe4:	movt	r1, #1
   10fe8:	bl	10c7c <dcgettext@plt>
   10fec:	ldr	r1, [r4]
   10ff0:	bl	10c1c <fputs_unlocked@plt>
   10ff4:	movw	r1, #20381	; 0x4f9d
   10ff8:	mov	r0, #0
   10ffc:	mov	r2, #5
   11000:	movt	r1, #1
   11004:	bl	10c7c <dcgettext@plt>
   11008:	ldr	r1, [r4]
   1100c:	bl	10c1c <fputs_unlocked@plt>
   11010:	movw	r1, #20491	; 0x500b
   11014:	mov	r0, #0
   11018:	mov	r2, #5
   1101c:	movt	r1, #1
   11020:	bl	10c7c <dcgettext@plt>
   11024:	movw	r2, #20682	; 0x50ca
   11028:	mov	r1, r0
   1102c:	mov	r0, #1
   11030:	movt	r2, #1
   11034:	bl	10d78 <__printf_chk@plt>
   11038:	movw	r1, #20687	; 0x50cf
   1103c:	mov	r0, #0
   11040:	mov	r2, #5
   11044:	movt	r1, #1
   11048:	bl	10c7c <dcgettext@plt>
   1104c:	ldr	r1, [r4]
   11050:	bl	10c1c <fputs_unlocked@plt>
   11054:	bl	11080 <__assert_fail@plt+0x278>
   11058:	mov	r0, #0
   1105c:	bl	10d3c <exit@plt>
   11060:	movw	r0, #19652	; 0x4cc4
   11064:	movw	r1, #19675	; 0x4cdb
   11068:	movw	r3, #19686	; 0x4ce6
   1106c:	mov	r2, #40	; 0x28
   11070:	movt	r0, #1
   11074:	movt	r1, #1
   11078:	movt	r3, #1
   1107c:	bl	10e08 <__assert_fail@plt>
   11080:	push	{r4, r5, fp, lr}
   11084:	add	fp, sp, #8
   11088:	sub	sp, sp, #56	; 0x38
   1108c:	movw	r0, #21200	; 0x52d0
   11090:	mov	r2, #48	; 0x30
   11094:	mov	r5, sp
   11098:	movw	r4, #20682	; 0x50ca
   1109c:	movt	r0, #1
   110a0:	movt	r4, #1
   110a4:	add	r1, r0, #32
   110a8:	add	r3, r0, #16
   110ac:	vld1.64	{d18-d19}, [r0], r2
   110b0:	vld1.64	{d16-d17}, [r1]
   110b4:	vld1.64	{d20-d21}, [r3]
   110b8:	add	r1, r5, #32
   110bc:	vldr	d22, [r0]
   110c0:	add	r0, r5, #16
   110c4:	vst1.64	{d16-d17}, [r1]
   110c8:	movw	r1, #20887	; 0x5197
   110cc:	vst1.64	{d20-d21}, [r0]
   110d0:	mov	r0, r5
   110d4:	vst1.64	{d18-d19}, [r0], r2
   110d8:	movt	r1, #1
   110dc:	vstr	d22, [r0]
   110e0:	mov	r0, r4
   110e4:	bl	10c28 <strcmp@plt>
   110e8:	cmp	r0, #0
   110ec:	ldrne	r1, [r5, #8]!
   110f0:	cmpne	r1, #0
   110f4:	bne	110e0 <__assert_fail@plt+0x2d8>
   110f8:	ldr	r5, [r5, #4]
   110fc:	movw	r1, #20982	; 0x51f6
   11100:	mov	r0, #0
   11104:	mov	r2, #5
   11108:	movt	r1, #1
   1110c:	bl	10c7c <dcgettext@plt>
   11110:	movw	r2, #20852	; 0x5174
   11114:	movw	r3, #21005	; 0x520d
   11118:	mov	r1, r0
   1111c:	mov	r0, #1
   11120:	movt	r2, #1
   11124:	movt	r3, #1
   11128:	bl	10d78 <__printf_chk@plt>
   1112c:	cmp	r5, #0
   11130:	mov	r0, #5
   11134:	mov	r1, #0
   11138:	moveq	r5, r4
   1113c:	bl	10dc0 <setlocale@plt>
   11140:	cmp	r0, #0
   11144:	beq	11184 <__assert_fail@plt+0x37c>
   11148:	movw	r1, #21045	; 0x5235
   1114c:	mov	r2, #3
   11150:	movt	r1, #1
   11154:	bl	10df0 <strncmp@plt>
   11158:	cmp	r0, #0
   1115c:	beq	11184 <__assert_fail@plt+0x37c>
   11160:	movw	r1, #21049	; 0x5239
   11164:	mov	r0, #0
   11168:	mov	r2, #5
   1116c:	movt	r1, #1
   11170:	bl	10c7c <dcgettext@plt>
   11174:	movw	r1, #24860	; 0x611c
   11178:	movt	r1, #2
   1117c:	ldr	r1, [r1]
   11180:	bl	10c1c <fputs_unlocked@plt>
   11184:	movw	r1, #21120	; 0x5280
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	movt	r1, #1
   11194:	bl	10c7c <dcgettext@plt>
   11198:	movw	r2, #21005	; 0x520d
   1119c:	mov	r1, r0
   111a0:	mov	r0, #1
   111a4:	mov	r3, r4
   111a8:	movt	r2, #1
   111ac:	bl	10d78 <__printf_chk@plt>
   111b0:	movw	r1, #21147	; 0x529b
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	movt	r1, #1
   111c0:	bl	10c7c <dcgettext@plt>
   111c4:	movw	r3, #20151	; 0x4eb7
   111c8:	mov	r1, r0
   111cc:	movw	r0, #20915	; 0x51b3
   111d0:	cmp	r5, r4
   111d4:	mov	r2, r5
   111d8:	movt	r0, #1
   111dc:	movt	r3, #1
   111e0:	moveq	r3, r0
   111e4:	mov	r0, #1
   111e8:	bl	10d78 <__printf_chk@plt>
   111ec:	sub	sp, fp, #8
   111f0:	pop	{r4, r5, fp, pc}
   111f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	add	fp, sp, #28
   111fc:	sub	sp, sp, #20
   11200:	mov	r6, r0
   11204:	movw	r0, #20792	; 0x5138
   11208:	mov	r4, r1
   1120c:	movt	r0, #1
   11210:	bl	10cf4 <getenv@plt>
   11214:	mov	r8, r0
   11218:	cmp	r0, #0
   1121c:	beq	11248 <__assert_fail@plt+0x440>
   11220:	mov	r5, #0
   11224:	cmp	r6, #2
   11228:	blt	1124c <__assert_fail@plt+0x444>
   1122c:	ldr	r0, [r4, #4]
   11230:	movw	r1, #20808	; 0x5148
   11234:	movt	r1, #1
   11238:	bl	10c28 <strcmp@plt>
   1123c:	clz	r0, r0
   11240:	lsr	r5, r0, #5
   11244:	b	1124c <__assert_fail@plt+0x444>
   11248:	mov	r5, #1
   1124c:	ldr	r0, [r4], #4
   11250:	bl	11b3c <__assert_fail@plt+0xd34>
   11254:	movw	r1, #20151	; 0x4eb7
   11258:	mov	r0, #6
   1125c:	movt	r1, #1
   11260:	bl	10dc0 <setlocale@plt>
   11264:	movw	r7, #20856	; 0x5178
   11268:	movw	r1, #20811	; 0x514b
   1126c:	movt	r7, #1
   11270:	movt	r1, #1
   11274:	mov	r0, r7
   11278:	bl	10de4 <bindtextdomain@plt>
   1127c:	mov	r0, r7
   11280:	bl	10c94 <textdomain@plt>
   11284:	movw	r0, #6736	; 0x1a50
   11288:	movt	r0, #1
   1128c:	bl	14ca0 <__assert_fail@plt+0x3e98>
   11290:	cmp	r6, #2
   11294:	bne	112d4 <__assert_fail@plt+0x4cc>
   11298:	cmp	r5, #0
   1129c:	beq	112d4 <__assert_fail@plt+0x4cc>
   112a0:	ldr	r7, [r4]
   112a4:	movw	r1, #20835	; 0x5163
   112a8:	movt	r1, #1
   112ac:	mov	r0, r7
   112b0:	bl	10c28 <strcmp@plt>
   112b4:	cmp	r0, #0
   112b8:	beq	11a28 <__assert_fail@plt+0xc20>
   112bc:	movw	r1, #20842	; 0x516a
   112c0:	mov	r0, r7
   112c4:	movt	r1, #1
   112c8:	bl	10c28 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	119bc <__assert_fail@plt+0xbb4>
   112d4:	cmp	r6, #2
   112d8:	mov	r0, #0
   112dc:	eor	r2, r5, #1
   112e0:	mov	r1, #0
   112e4:	movwlt	r0, #1
   112e8:	orrs	r0, r0, r2
   112ec:	sub	r2, r6, #1
   112f0:	bne	113dc <__assert_fail@plt+0x5d4>
   112f4:	mov	r1, #0
   112f8:	mov	r0, #1
   112fc:	mov	r6, r2
   11300:	ldr	r2, [r4]
   11304:	ldrb	r3, [r2]
   11308:	cmp	r3, #45	; 0x2d
   1130c:	bne	118f0 <__assert_fail@plt+0xae8>
   11310:	add	r3, r2, #1
   11314:	mov	r7, #0
   11318:	ldrb	r5, [r3, -r7]
   1131c:	cmp	r5, #100	; 0x64
   11320:	bgt	11338 <__assert_fail@plt+0x530>
   11324:	b	11348 <__assert_fail@plt+0x540>
   11328:	sub	r7, r7, #1
   1132c:	ldrb	r5, [r3, -r7]
   11330:	cmp	r5, #100	; 0x64
   11334:	ble	11348 <__assert_fail@plt+0x540>
   11338:	cmp	r5, #110	; 0x6e
   1133c:	cmpne	r5, #101	; 0x65
   11340:	beq	11328 <__assert_fail@plt+0x520>
   11344:	b	118f0 <__assert_fail@plt+0xae8>
   11348:	cmp	r5, #69	; 0x45
   1134c:	beq	11328 <__assert_fail@plt+0x520>
   11350:	cmp	r5, #0
   11354:	bne	118f0 <__assert_fail@plt+0xae8>
   11358:	cmp	r7, #0
   1135c:	beq	118f0 <__assert_fail@plt+0xae8>
   11360:	ldrb	r3, [r3]
   11364:	cmp	r3, #0
   11368:	beq	113c0 <__assert_fail@plt+0x5b8>
   1136c:	add	r2, r2, #2
   11370:	uxtb	r3, r3
   11374:	cmp	r3, #69	; 0x45
   11378:	beq	113b0 <__assert_fail@plt+0x5a8>
   1137c:	cmp	r3, #110	; 0x6e
   11380:	beq	1139c <__assert_fail@plt+0x594>
   11384:	cmp	r3, #101	; 0x65
   11388:	moveq	r1, #1
   1138c:	ldrb	r3, [r2], #1
   11390:	cmp	r3, #0
   11394:	bne	11370 <__assert_fail@plt+0x568>
   11398:	b	113c0 <__assert_fail@plt+0x5b8>
   1139c:	mov	r0, #0
   113a0:	ldrb	r3, [r2], #1
   113a4:	cmp	r3, #0
   113a8:	bne	11370 <__assert_fail@plt+0x568>
   113ac:	b	113c0 <__assert_fail@plt+0x5b8>
   113b0:	mov	r1, #0
   113b4:	ldrb	r3, [r2], #1
   113b8:	cmp	r3, #0
   113bc:	bne	11370 <__assert_fail@plt+0x568>
   113c0:	add	r4, r4, #4
   113c4:	sub	r2, r6, #1
   113c8:	cmp	r6, #2
   113cc:	bge	112fc <__assert_fail@plt+0x4f4>
   113d0:	and	r1, r1, #1
   113d4:	and	r0, r0, #1
   113d8:	b	113e0 <__assert_fail@plt+0x5d8>
   113dc:	mov	r0, #1
   113e0:	mov	r6, r2
   113e4:	str	r0, [sp, #16]
   113e8:	cmp	r8, #0
   113ec:	cmpeq	r1, #0
   113f0:	beq	11908 <__assert_fail@plt+0xb00>
   113f4:	cmp	r6, #1
   113f8:	blt	11978 <__assert_fail@plt+0xb70>
   113fc:	movw	r5, #24860	; 0x611c
   11400:	mov	ip, #92	; 0x5c
   11404:	mov	lr, #32
   11408:	movt	r5, #2
   1140c:	b	1141c <__assert_fail@plt+0x614>
   11410:	add	r2, r1, #1
   11414:	str	r2, [r0, #20]
   11418:	strb	lr, [r1]
   1141c:	ldr	r9, [r4]
   11420:	mov	r7, r9
   11424:	ldrb	r8, [r7], #1
   11428:	cmp	r8, #92	; 0x5c
   1142c:	bne	11454 <__assert_fail@plt+0x64c>
   11430:	b	11460 <__assert_fail@plt+0x658>
   11434:	add	r2, r1, #1
   11438:	mov	r9, r7
   1143c:	str	r2, [r0, #20]
   11440:	strb	r8, [r1]
   11444:	mov	r7, r9
   11448:	ldrb	r8, [r7], #1
   1144c:	cmp	r8, #92	; 0x5c
   11450:	beq	11460 <__assert_fail@plt+0x658>
   11454:	cmp	r8, #0
   11458:	bne	115e0 <__assert_fail@plt+0x7d8>
   1145c:	b	118b8 <__assert_fail@plt+0xab0>
   11460:	ldrb	r8, [r7]
   11464:	cmp	r8, #0
   11468:	beq	115dc <__assert_fail@plt+0x7d4>
   1146c:	sub	r0, r8, #48	; 0x30
   11470:	add	r7, r9, #2
   11474:	cmp	r0, #72	; 0x48
   11478:	bhi	11698 <__assert_fail@plt+0x890>
   1147c:	add	r1, pc, #0
   11480:	ldr	pc, [r1, r0, lsl #2]
   11484:	andeq	r1, r1, r4, asr #12
   11488:	andeq	r1, r1, r8, lsr #11
   1148c:	andeq	r1, r1, r8, lsr #11
   11490:	andeq	r1, r1, r8, lsr #11
   11494:	andeq	r1, r1, r8, lsr #11
   11498:	andeq	r1, r1, r8, lsr #11
   1149c:	andeq	r1, r1, r8, lsr #11
   114a0:	andeq	r1, r1, r8, lsr #11
   114a4:	muleq	r1, r8, r6
   114a8:	muleq	r1, r8, r6
   114ac:	muleq	r1, r8, r6
   114b0:	muleq	r1, r8, r6
   114b4:	muleq	r1, r8, r6
   114b8:	muleq	r1, r8, r6
   114bc:	muleq	r1, r8, r6
   114c0:	muleq	r1, r8, r6
   114c4:	muleq	r1, r8, r6
   114c8:	muleq	r1, r8, r6
   114cc:	muleq	r1, r8, r6
   114d0:	muleq	r1, r8, r6
   114d4:	muleq	r1, r8, r6
   114d8:	muleq	r1, r8, r6
   114dc:	muleq	r1, r8, r6
   114e0:	muleq	r1, r8, r6
   114e4:	muleq	r1, r8, r6
   114e8:	muleq	r1, r8, r6
   114ec:	muleq	r1, r8, r6
   114f0:	muleq	r1, r8, r6
   114f4:	muleq	r1, r8, r6
   114f8:	muleq	r1, r8, r6
   114fc:	muleq	r1, r8, r6
   11500:	muleq	r1, r8, r6
   11504:	muleq	r1, r8, r6
   11508:	muleq	r1, r8, r6
   1150c:	muleq	r1, r8, r6
   11510:	muleq	r1, r8, r6
   11514:	muleq	r1, r8, r6
   11518:	muleq	r1, r8, r6
   1151c:	muleq	r1, r8, r6
   11520:	muleq	r1, r8, r6
   11524:	muleq	r1, r8, r6
   11528:	muleq	r1, r8, r6
   1152c:	muleq	r1, r8, r6
   11530:	muleq	r1, r8, r6
   11534:	andeq	r1, r1, r0, ror #11
   11538:	muleq	r1, r8, r6
   1153c:	muleq	r1, r8, r6
   11540:	muleq	r1, r8, r6
   11544:	muleq	r1, r8, r6
   11548:	andeq	r1, r1, ip, ror #12
   1154c:	andeq	r1, r1, r4, lsr r6
   11550:			; <UNDEFINED> instruction: 0x000119b0
   11554:	muleq	r1, r8, r6
   11558:	andeq	r1, r1, ip, lsr #12
   1155c:	andeq	r1, r1, r4, lsr #12
   11560:	muleq	r1, r8, r6
   11564:	muleq	r1, r8, r6
   11568:	muleq	r1, r8, r6
   1156c:	muleq	r1, r8, r6
   11570:	muleq	r1, r8, r6
   11574:	muleq	r1, r8, r6
   11578:	muleq	r1, r8, r6
   1157c:	andeq	r1, r1, ip, lsl r6
   11580:	muleq	r1, r8, r6
   11584:	muleq	r1, r8, r6
   11588:	muleq	r1, r8, r6
   1158c:			; <UNDEFINED> instruction: 0x000116bc
   11590:	muleq	r1, r8, r6
   11594:	andeq	r1, r1, r4, ror #12
   11598:	muleq	r1, r8, r6
   1159c:	andeq	r1, r1, ip, lsr r6
   115a0:	muleq	r1, r8, r6
   115a4:	andeq	r1, r1, r4, ror r6
   115a8:	ldrb	r0, [r7]
   115ac:	sub	r8, r8, #48	; 0x30
   115b0:	and	r1, r0, #248	; 0xf8
   115b4:	cmp	r1, #48	; 0x30
   115b8:	addeq	r0, r0, r8, lsl #3
   115bc:	subeq	r8, r0, #48	; 0x30
   115c0:	ldrbeq	r0, [r7, #1]!
   115c4:	and	r1, r0, #248	; 0xf8
   115c8:	cmp	r1, #48	; 0x30
   115cc:	addeq	r0, r0, r8, lsl #3
   115d0:	addeq	r7, r7, #1
   115d4:	subeq	r8, r0, #48	; 0x30
   115d8:	b	115e0 <__assert_fail@plt+0x7d8>
   115dc:	mov	r8, #92	; 0x5c
   115e0:	ldr	r0, [r5]
   115e4:	ldr	r1, [r0, #20]
   115e8:	ldr	r2, [r0, #24]
   115ec:	cmp	r1, r2
   115f0:	bcc	11434 <__assert_fail@plt+0x62c>
   115f4:	uxtb	r1, r8
   115f8:	bl	10db4 <__overflow@plt>
   115fc:	mov	lr, #32
   11600:	mov	ip, #92	; 0x5c
   11604:	mov	r9, r7
   11608:	mov	r7, r9
   1160c:	ldrb	r8, [r7], #1
   11610:	cmp	r8, #92	; 0x5c
   11614:	bne	11454 <__assert_fail@plt+0x64c>
   11618:	b	11460 <__assert_fail@plt+0x658>
   1161c:	mov	r8, #10
   11620:	b	115e0 <__assert_fail@plt+0x7d8>
   11624:	mov	r8, #12
   11628:	b	115e0 <__assert_fail@plt+0x7d8>
   1162c:	mov	r8, #27
   11630:	b	115e0 <__assert_fail@plt+0x7d8>
   11634:	mov	r8, #8
   11638:	b	115e0 <__assert_fail@plt+0x7d8>
   1163c:	mov	r8, #11
   11640:	b	115e0 <__assert_fail@plt+0x7d8>
   11644:	ldrb	r0, [r7]
   11648:	mov	r8, #0
   1164c:	and	r1, r0, #248	; 0xf8
   11650:	cmp	r1, #48	; 0x30
   11654:	bne	115e0 <__assert_fail@plt+0x7d8>
   11658:	add	r7, r9, #3
   1165c:	mov	r8, r0
   11660:	b	115a8 <__assert_fail@plt+0x7a0>
   11664:	mov	r8, #9
   11668:	b	115e0 <__assert_fail@plt+0x7d8>
   1166c:	mov	r8, #7
   11670:	b	115e0 <__assert_fail@plt+0x7d8>
   11674:	ldrb	sl, [r7]
   11678:	bl	10d30 <__ctype_b_loc@plt>
   1167c:	ldr	r0, [r0]
   11680:	mov	lr, #32
   11684:	mov	ip, #92	; 0x5c
   11688:	add	r1, r0, sl, lsl #1
   1168c:	ldrb	r1, [r1, #1]
   11690:	tst	r1, #16
   11694:	bne	116c4 <__assert_fail@plt+0x8bc>
   11698:	ldr	r0, [r5]
   1169c:	ldr	r1, [r0, #20]
   116a0:	ldr	r2, [r0, #24]
   116a4:	cmp	r1, r2
   116a8:	bcs	118a4 <__assert_fail@plt+0xa9c>
   116ac:	add	r2, r1, #1
   116b0:	str	r2, [r0, #20]
   116b4:	strb	ip, [r1]
   116b8:	b	115e0 <__assert_fail@plt+0x7d8>
   116bc:	mov	r8, #13
   116c0:	b	115e0 <__assert_fail@plt+0x7d8>
   116c4:	sub	r1, sl, #65	; 0x41
   116c8:	add	r7, r9, #3
   116cc:	cmp	r1, #37	; 0x25
   116d0:	bhi	117a0 <__assert_fail@plt+0x998>
   116d4:	add	r2, pc, #4
   116d8:	mov	r8, #10
   116dc:	ldr	pc, [r2, r1, lsl #2]
   116e0:	andeq	r1, r1, r4, lsr #15
   116e4:	andeq	r1, r1, r8, ror r7
   116e8:	andeq	r1, r1, r8, lsl #15
   116ec:	muleq	r1, r0, r7
   116f0:	muleq	r1, r8, r7
   116f4:	andeq	r1, r1, r0, lsl #15
   116f8:	andeq	r1, r1, r0, lsr #15
   116fc:	andeq	r1, r1, r0, lsr #15
   11700:	andeq	r1, r1, r0, lsr #15
   11704:	andeq	r1, r1, r0, lsr #15
   11708:	andeq	r1, r1, r0, lsr #15
   1170c:	andeq	r1, r1, r0, lsr #15
   11710:	andeq	r1, r1, r0, lsr #15
   11714:	andeq	r1, r1, r0, lsr #15
   11718:	andeq	r1, r1, r0, lsr #15
   1171c:	andeq	r1, r1, r0, lsr #15
   11720:	andeq	r1, r1, r0, lsr #15
   11724:	andeq	r1, r1, r0, lsr #15
   11728:	andeq	r1, r1, r0, lsr #15
   1172c:	andeq	r1, r1, r0, lsr #15
   11730:	andeq	r1, r1, r0, lsr #15
   11734:	andeq	r1, r1, r0, lsr #15
   11738:	andeq	r1, r1, r0, lsr #15
   1173c:	andeq	r1, r1, r0, lsr #15
   11740:	andeq	r1, r1, r0, lsr #15
   11744:	andeq	r1, r1, r0, lsr #15
   11748:	andeq	r1, r1, r0, lsr #15
   1174c:	andeq	r1, r1, r0, lsr #15
   11750:	andeq	r1, r1, r0, lsr #15
   11754:	andeq	r1, r1, r0, lsr #15
   11758:	andeq	r1, r1, r0, lsr #15
   1175c:	andeq	r1, r1, r0, lsr #15
   11760:	andeq	r1, r1, r4, lsr #15
   11764:	andeq	r1, r1, r8, ror r7
   11768:	andeq	r1, r1, r8, lsl #15
   1176c:	muleq	r1, r0, r7
   11770:	muleq	r1, r8, r7
   11774:	andeq	r1, r1, r0, lsl #15
   11778:	mov	r8, #11
   1177c:	b	117a4 <__assert_fail@plt+0x99c>
   11780:	mov	r8, #15
   11784:	b	117a4 <__assert_fail@plt+0x99c>
   11788:	mov	r8, #12
   1178c:	b	117a4 <__assert_fail@plt+0x99c>
   11790:	mov	r8, #13
   11794:	b	117a4 <__assert_fail@plt+0x99c>
   11798:	mov	r8, #14
   1179c:	b	117a4 <__assert_fail@plt+0x99c>
   117a0:	sub	r8, sl, #48	; 0x30
   117a4:	ldrb	r2, [r7]
   117a8:	add	r0, r0, r2, lsl #1
   117ac:	ldrb	r0, [r0, #1]
   117b0:	tst	r0, #16
   117b4:	beq	115e0 <__assert_fail@plt+0x7d8>
   117b8:	sub	r3, r2, #65	; 0x41
   117bc:	lsl	r0, r8, #4
   117c0:	cmp	r3, #37	; 0x25
   117c4:	bhi	11894 <__assert_fail@plt+0xa8c>
   117c8:	add	r7, pc, #4
   117cc:	mov	r1, #10
   117d0:	ldr	pc, [r7, r3, lsl #2]
   117d4:	muleq	r1, r8, r8
   117d8:	andeq	r1, r1, ip, ror #16
   117dc:	andeq	r1, r1, ip, ror r8
   117e0:	andeq	r1, r1, r4, lsl #17
   117e4:	andeq	r1, r1, ip, lsl #17
   117e8:	andeq	r1, r1, r4, ror r8
   117ec:	muleq	r1, r4, r8
   117f0:	muleq	r1, r4, r8
   117f4:	muleq	r1, r4, r8
   117f8:	muleq	r1, r4, r8
   117fc:	muleq	r1, r4, r8
   11800:	muleq	r1, r4, r8
   11804:	muleq	r1, r4, r8
   11808:	muleq	r1, r4, r8
   1180c:	muleq	r1, r4, r8
   11810:	muleq	r1, r4, r8
   11814:	muleq	r1, r4, r8
   11818:	muleq	r1, r4, r8
   1181c:	muleq	r1, r4, r8
   11820:	muleq	r1, r4, r8
   11824:	muleq	r1, r4, r8
   11828:	muleq	r1, r4, r8
   1182c:	muleq	r1, r4, r8
   11830:	muleq	r1, r4, r8
   11834:	muleq	r1, r4, r8
   11838:	muleq	r1, r4, r8
   1183c:	muleq	r1, r4, r8
   11840:	muleq	r1, r4, r8
   11844:	muleq	r1, r4, r8
   11848:	muleq	r1, r4, r8
   1184c:	muleq	r1, r4, r8
   11850:	muleq	r1, r4, r8
   11854:	muleq	r1, r8, r8
   11858:	andeq	r1, r1, ip, ror #16
   1185c:	andeq	r1, r1, ip, ror r8
   11860:	andeq	r1, r1, r4, lsl #17
   11864:	andeq	r1, r1, ip, lsl #17
   11868:	andeq	r1, r1, r4, ror r8
   1186c:	mov	r1, #11
   11870:	b	11898 <__assert_fail@plt+0xa90>
   11874:	mov	r1, #15
   11878:	b	11898 <__assert_fail@plt+0xa90>
   1187c:	mov	r1, #12
   11880:	b	11898 <__assert_fail@plt+0xa90>
   11884:	mov	r1, #13
   11888:	b	11898 <__assert_fail@plt+0xa90>
   1188c:	mov	r1, #14
   11890:	b	11898 <__assert_fail@plt+0xa90>
   11894:	sub	r1, r2, #48	; 0x30
   11898:	add	r7, r9, #4
   1189c:	add	r8, r1, r0
   118a0:	b	115e0 <__assert_fail@plt+0x7d8>
   118a4:	mov	r1, #92	; 0x5c
   118a8:	bl	10db4 <__overflow@plt>
   118ac:	mov	lr, #32
   118b0:	mov	ip, #92	; 0x5c
   118b4:	b	115e0 <__assert_fail@plt+0x7d8>
   118b8:	cmp	r6, #2
   118bc:	blt	11978 <__assert_fail@plt+0xb70>
   118c0:	ldr	r0, [r5]
   118c4:	add	r4, r4, #4
   118c8:	sub	r6, r6, #1
   118cc:	ldr	r1, [r0, #20]
   118d0:	ldr	r2, [r0, #24]
   118d4:	cmp	r1, r2
   118d8:	bcc	11410 <__assert_fail@plt+0x608>
   118dc:	mov	r1, #32
   118e0:	bl	10db4 <__overflow@plt>
   118e4:	mov	lr, #32
   118e8:	mov	ip, #92	; 0x5c
   118ec:	b	1141c <__assert_fail@plt+0x614>
   118f0:	and	r0, r0, #1
   118f4:	and	r1, r1, #1
   118f8:	str	r0, [sp, #16]
   118fc:	cmp	r8, #0
   11900:	cmpeq	r1, #0
   11904:	bne	113f4 <__assert_fail@plt+0x5ec>
   11908:	cmp	r6, #1
   1190c:	blt	11978 <__assert_fail@plt+0xb70>
   11910:	add	r5, r6, #1
   11914:	movw	r6, #24860	; 0x611c
   11918:	mov	r7, #32
   1191c:	movt	r6, #2
   11920:	ldr	r1, [r6]
   11924:	ldr	r0, [r4], #4
   11928:	bl	10c1c <fputs_unlocked@plt>
   1192c:	cmp	r5, #2
   11930:	beq	11978 <__assert_fail@plt+0xb70>
   11934:	ldr	r0, [r6]
   11938:	ldr	r1, [r0, #20]
   1193c:	ldr	r2, [r0, #24]
   11940:	cmp	r1, r2
   11944:	bcs	11964 <__assert_fail@plt+0xb5c>
   11948:	add	r2, r1, #1
   1194c:	str	r2, [r0, #20]
   11950:	strb	r7, [r1]
   11954:	sub	r5, r5, #1
   11958:	cmp	r5, #1
   1195c:	bgt	11920 <__assert_fail@plt+0xb18>
   11960:	b	11978 <__assert_fail@plt+0xb70>
   11964:	mov	r1, #32
   11968:	bl	10db4 <__overflow@plt>
   1196c:	sub	r5, r5, #1
   11970:	cmp	r5, #1
   11974:	bgt	11920 <__assert_fail@plt+0xb18>
   11978:	ldr	r0, [sp, #16]
   1197c:	cmp	r0, #0
   11980:	beq	119b0 <__assert_fail@plt+0xba8>
   11984:	movw	r0, #24860	; 0x611c
   11988:	movt	r0, #2
   1198c:	ldr	r0, [r0]
   11990:	ldr	r1, [r0, #20]
   11994:	ldr	r2, [r0, #24]
   11998:	cmp	r1, r2
   1199c:	bcs	11a14 <__assert_fail@plt+0xc0c>
   119a0:	add	r2, r1, #1
   119a4:	str	r2, [r0, #20]
   119a8:	mov	r0, #10
   119ac:	strb	r0, [r1]
   119b0:	mov	r0, #0
   119b4:	sub	sp, fp, #28
   119b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119bc:	movw	r0, #24776	; 0x60c8
   119c0:	movw	r2, #20876	; 0x518c
   119c4:	mov	r1, #0
   119c8:	movw	r7, #20866	; 0x5182
   119cc:	movt	r0, #2
   119d0:	movt	r2, #1
   119d4:	str	r1, [sp, #8]
   119d8:	movw	r1, #20682	; 0x50ca
   119dc:	movt	r7, #1
   119e0:	ldr	r3, [r0]
   119e4:	movw	r0, #24860	; 0x611c
   119e8:	str	r2, [sp, #4]
   119ec:	movw	r2, #20852	; 0x5174
   119f0:	movt	r1, #1
   119f4:	str	r7, [sp]
   119f8:	movt	r0, #2
   119fc:	movt	r2, #1
   11a00:	ldr	r0, [r0]
   11a04:	bl	13f5c <__assert_fail@plt+0x3154>
   11a08:	mov	r0, #0
   11a0c:	sub	sp, fp, #28
   11a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a14:	mov	r1, #10
   11a18:	bl	10db4 <__overflow@plt>
   11a1c:	mov	r0, #0
   11a20:	sub	sp, fp, #28
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a28:	mov	r0, #0
   11a2c:	bl	10f04 <__assert_fail@plt+0xfc>
   11a30:	movw	r1, #24868	; 0x6124
   11a34:	movt	r1, #2
   11a38:	str	r0, [r1, #4]
   11a3c:	bx	lr
   11a40:	movw	r1, #24868	; 0x6124
   11a44:	movt	r1, #2
   11a48:	strb	r0, [r1]
   11a4c:	bx	lr
   11a50:	push	{r4, r5, r6, sl, fp, lr}
   11a54:	add	fp, sp, #16
   11a58:	sub	sp, sp, #8
   11a5c:	movw	r0, #24860	; 0x611c
   11a60:	movt	r0, #2
   11a64:	ldr	r0, [r0]
   11a68:	bl	1480c <__assert_fail@plt+0x3a04>
   11a6c:	cmp	r0, #0
   11a70:	beq	11a98 <__assert_fail@plt+0xc90>
   11a74:	movw	r5, #24868	; 0x6124
   11a78:	movt	r5, #2
   11a7c:	ldrb	r0, [r5]
   11a80:	cmp	r0, #0
   11a84:	beq	11ac4 <__assert_fail@plt+0xcbc>
   11a88:	bl	10d54 <__errno_location@plt>
   11a8c:	ldr	r0, [r0]
   11a90:	cmp	r0, #32
   11a94:	bne	11ac4 <__assert_fail@plt+0xcbc>
   11a98:	movw	r0, #24856	; 0x6118
   11a9c:	movt	r0, #2
   11aa0:	ldr	r0, [r0]
   11aa4:	bl	1480c <__assert_fail@plt+0x3a04>
   11aa8:	cmp	r0, #0
   11aac:	subeq	sp, fp, #16
   11ab0:	popeq	{r4, r5, r6, sl, fp, pc}
   11ab4:	movw	r0, #24780	; 0x60cc
   11ab8:	movt	r0, #2
   11abc:	ldr	r0, [r0]
   11ac0:	bl	10c4c <_exit@plt>
   11ac4:	movw	r1, #21271	; 0x5317
   11ac8:	mov	r0, #0
   11acc:	mov	r2, #5
   11ad0:	movt	r1, #1
   11ad4:	bl	10c7c <dcgettext@plt>
   11ad8:	ldr	r6, [r5, #4]
   11adc:	mov	r4, r0
   11ae0:	bl	10d54 <__errno_location@plt>
   11ae4:	ldr	r5, [r0]
   11ae8:	cmp	r6, #0
   11aec:	bne	11b08 <__assert_fail@plt+0xd00>
   11af0:	movw	r2, #21287	; 0x5327
   11af4:	mov	r0, #0
   11af8:	mov	r1, r5
   11afc:	mov	r3, r4
   11b00:	movt	r2, #1
   11b04:	b	11b28 <__assert_fail@plt+0xd20>
   11b08:	mov	r0, r6
   11b0c:	bl	13730 <__assert_fail@plt+0x2928>
   11b10:	movw	r2, #21283	; 0x5323
   11b14:	mov	r3, r0
   11b18:	str	r4, [sp]
   11b1c:	mov	r0, #0
   11b20:	mov	r1, r5
   11b24:	movt	r2, #1
   11b28:	bl	10ce8 <error@plt>
   11b2c:	movw	r0, #24780	; 0x60cc
   11b30:	movt	r0, #2
   11b34:	ldr	r0, [r0]
   11b38:	bl	10c4c <_exit@plt>
   11b3c:	push	{r4, r5, fp, lr}
   11b40:	add	fp, sp, #8
   11b44:	cmp	r0, #0
   11b48:	beq	11bdc <__assert_fail@plt+0xdd4>
   11b4c:	mov	r1, #47	; 0x2f
   11b50:	mov	r4, r0
   11b54:	bl	10dcc <strrchr@plt>
   11b58:	cmp	r0, #0
   11b5c:	mov	r5, r4
   11b60:	addne	r5, r0, #1
   11b64:	sub	r0, r5, r4
   11b68:	cmp	r0, #7
   11b6c:	blt	11bc0 <__assert_fail@plt+0xdb8>
   11b70:	movw	r1, #21346	; 0x5362
   11b74:	sub	r0, r5, #7
   11b78:	mov	r2, #7
   11b7c:	movt	r1, #1
   11b80:	bl	10df0 <strncmp@plt>
   11b84:	cmp	r0, #0
   11b88:	bne	11bc0 <__assert_fail@plt+0xdb8>
   11b8c:	movw	r1, #21354	; 0x536a
   11b90:	mov	r0, r5
   11b94:	mov	r2, #3
   11b98:	movt	r1, #1
   11b9c:	bl	10df0 <strncmp@plt>
   11ba0:	cmp	r0, #0
   11ba4:	beq	11bb0 <__assert_fail@plt+0xda8>
   11ba8:	mov	r4, r5
   11bac:	b	11bc0 <__assert_fail@plt+0xdb8>
   11bb0:	movw	r0, #24848	; 0x6110
   11bb4:	add	r4, r5, #3
   11bb8:	movt	r0, #2
   11bbc:	str	r4, [r0]
   11bc0:	movw	r0, #24852	; 0x6114
   11bc4:	movt	r0, #2
   11bc8:	str	r4, [r0]
   11bcc:	movw	r0, #24876	; 0x612c
   11bd0:	movt	r0, #2
   11bd4:	str	r4, [r0]
   11bd8:	pop	{r4, r5, fp, pc}
   11bdc:	movw	r0, #24856	; 0x6118
   11be0:	mov	r1, #55	; 0x37
   11be4:	mov	r2, #1
   11be8:	movt	r0, #2
   11bec:	ldr	r3, [r0]
   11bf0:	movw	r0, #21290	; 0x532a
   11bf4:	movt	r0, #1
   11bf8:	bl	10cac <fwrite@plt>
   11bfc:	bl	10dfc <abort@plt>
   11c00:	push	{r4, r5, r6, sl, fp, lr}
   11c04:	add	fp, sp, #16
   11c08:	mov	r4, r0
   11c0c:	movw	r0, #24880	; 0x6130
   11c10:	movt	r0, #2
   11c14:	cmp	r4, #0
   11c18:	moveq	r4, r0
   11c1c:	bl	10d54 <__errno_location@plt>
   11c20:	ldr	r6, [r0]
   11c24:	mov	r5, r0
   11c28:	mov	r0, r4
   11c2c:	mov	r1, #48	; 0x30
   11c30:	bl	145f0 <__assert_fail@plt+0x37e8>
   11c34:	str	r6, [r5]
   11c38:	pop	{r4, r5, r6, sl, fp, pc}
   11c3c:	movw	r1, #24880	; 0x6130
   11c40:	cmp	r0, #0
   11c44:	movt	r1, #2
   11c48:	movne	r1, r0
   11c4c:	ldr	r0, [r1]
   11c50:	bx	lr
   11c54:	movw	r2, #24880	; 0x6130
   11c58:	cmp	r0, #0
   11c5c:	movt	r2, #2
   11c60:	movne	r2, r0
   11c64:	str	r1, [r2]
   11c68:	bx	lr
   11c6c:	movw	r3, #24880	; 0x6130
   11c70:	cmp	r0, #0
   11c74:	movt	r3, #2
   11c78:	movne	r3, r0
   11c7c:	ubfx	r0, r1, #5, #3
   11c80:	and	r1, r1, #31
   11c84:	add	r0, r3, r0, lsl #2
   11c88:	ldr	r3, [r0, #8]
   11c8c:	eor	r2, r2, r3, lsr r1
   11c90:	and	r2, r2, #1
   11c94:	eor	r2, r3, r2, lsl r1
   11c98:	str	r2, [r0, #8]
   11c9c:	mov	r0, #1
   11ca0:	and	r0, r0, r3, lsr r1
   11ca4:	bx	lr
   11ca8:	movw	r2, #24880	; 0x6130
   11cac:	cmp	r0, #0
   11cb0:	movt	r2, #2
   11cb4:	movne	r2, r0
   11cb8:	ldr	r0, [r2, #4]
   11cbc:	str	r1, [r2, #4]
   11cc0:	bx	lr
   11cc4:	movw	r3, #24880	; 0x6130
   11cc8:	cmp	r0, #0
   11ccc:	movt	r3, #2
   11cd0:	movne	r3, r0
   11cd4:	cmp	r1, #0
   11cd8:	mov	r0, #10
   11cdc:	cmpne	r2, #0
   11ce0:	str	r0, [r3]
   11ce4:	bne	11cf4 <__assert_fail@plt+0xeec>
   11ce8:	push	{fp, lr}
   11cec:	mov	fp, sp
   11cf0:	bl	10dfc <abort@plt>
   11cf4:	str	r1, [r3, #40]	; 0x28
   11cf8:	str	r2, [r3, #44]	; 0x2c
   11cfc:	bx	lr
   11d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d04:	add	fp, sp, #28
   11d08:	sub	sp, sp, #20
   11d0c:	mov	r7, r0
   11d10:	ldr	r0, [fp, #8]
   11d14:	movw	r5, #24880	; 0x6130
   11d18:	mov	r8, r3
   11d1c:	mov	r9, r2
   11d20:	mov	sl, r1
   11d24:	movt	r5, #2
   11d28:	cmp	r0, #0
   11d2c:	movne	r5, r0
   11d30:	bl	10d54 <__errno_location@plt>
   11d34:	mov	r4, r0
   11d38:	ldm	r5, {r0, r1}
   11d3c:	ldr	r2, [r5, #40]	; 0x28
   11d40:	ldr	r3, [r5, #44]	; 0x2c
   11d44:	add	r5, r5, #8
   11d48:	ldr	r6, [r4]
   11d4c:	stm	sp, {r0, r1, r5}
   11d50:	str	r2, [sp, #12]
   11d54:	str	r3, [sp, #16]
   11d58:	mov	r0, r7
   11d5c:	mov	r1, sl
   11d60:	mov	r2, r9
   11d64:	mov	r3, r8
   11d68:	bl	11d78 <__assert_fail@plt+0xf70>
   11d6c:	str	r6, [r4]
   11d70:	sub	sp, fp, #28
   11d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d7c:	add	fp, sp, #28
   11d80:	sub	sp, sp, #156	; 0x9c
   11d84:	str	r0, [sp, #76]	; 0x4c
   11d88:	ldr	r0, [fp, #12]
   11d8c:	mov	r6, r1
   11d90:	str	r3, [sp, #84]	; 0x54
   11d94:	str	r2, [fp, #-84]	; 0xffffffac
   11d98:	and	r1, r0, #4
   11d9c:	str	r1, [sp, #24]
   11da0:	and	r1, r0, #1
   11da4:	str	r1, [sp, #28]
   11da8:	ubfx	r8, r0, #1, #1
   11dac:	bl	10cc4 <__ctype_get_mb_cur_max@plt>
   11db0:	str	r0, [sp, #32]
   11db4:	ldr	r0, [fp, #24]
   11db8:	ldr	r7, [fp, #8]
   11dbc:	mov	r1, #0
   11dc0:	mov	r2, #0
   11dc4:	mov	r4, #1
   11dc8:	str	r1, [sp, #52]	; 0x34
   11dcc:	str	r0, [sp, #72]	; 0x48
   11dd0:	ldr	r0, [fp, #20]
   11dd4:	str	r0, [sp, #68]	; 0x44
   11dd8:	mov	r0, #0
   11ddc:	str	r0, [sp, #48]	; 0x30
   11de0:	mov	r0, #0
   11de4:	str	r0, [sp, #92]	; 0x5c
   11de8:	mov	r0, #0
   11dec:	str	r0, [fp, #-76]	; 0xffffffb4
   11df0:	mov	r0, #0
   11df4:	cmp	r7, #10
   11df8:	bhi	130e0 <__assert_fail@plt+0x22d8>
   11dfc:	add	r1, pc, #28
   11e00:	mov	sl, r6
   11e04:	ldr	r6, [sp, #76]	; 0x4c
   11e08:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e0c:	ldr	lr, [sp, #84]	; 0x54
   11e10:	mov	r9, #0
   11e14:	mov	r3, #1
   11e18:	mov	r5, #0
   11e1c:	ldr	pc, [r1, r7, lsl #2]
   11e20:	strdeq	r1, [r1], -r0
   11e24:	andeq	r1, r1, ip, lsr #30
   11e28:	andeq	r1, r1, r0, lsl #30
   11e2c:	andeq	r1, r1, r8, ror #29
   11e30:	andeq	r1, r1, r0, lsr #30
   11e34:	andeq	r1, r1, r4, asr pc
   11e38:	andeq	r1, r1, r0, lsl pc
   11e3c:	andeq	r2, r1, r0, ror #2
   11e40:	andeq	r1, r1, ip, asr #28
   11e44:	andeq	r1, r1, ip, asr #28
   11e48:	strdeq	r2, [r1], -r4
   11e4c:	mov	r9, r4
   11e50:	movw	r4, #21436	; 0x53bc
   11e54:	mov	r5, r8
   11e58:	mov	r8, r2
   11e5c:	mov	r0, #0
   11e60:	mov	r2, #5
   11e64:	movt	r4, #1
   11e68:	mov	r1, r4
   11e6c:	bl	10c7c <dcgettext@plt>
   11e70:	cmp	r0, r4
   11e74:	str	r0, [sp, #68]	; 0x44
   11e78:	bne	12008 <__assert_fail@plt+0x1200>
   11e7c:	bl	14a60 <__assert_fail@plt+0x3c58>
   11e80:	ldrb	r1, [r0]
   11e84:	and	r1, r1, #223	; 0xdf
   11e88:	cmp	r1, #71	; 0x47
   11e8c:	beq	11fd4 <__assert_fail@plt+0x11cc>
   11e90:	cmp	r1, #85	; 0x55
   11e94:	bne	11fec <__assert_fail@plt+0x11e4>
   11e98:	ldrb	r1, [r0, #1]
   11e9c:	and	r1, r1, #223	; 0xdf
   11ea0:	cmp	r1, #84	; 0x54
   11ea4:	bne	11fec <__assert_fail@plt+0x11e4>
   11ea8:	ldrb	r1, [r0, #2]
   11eac:	and	r1, r1, #223	; 0xdf
   11eb0:	cmp	r1, #70	; 0x46
   11eb4:	bne	11fec <__assert_fail@plt+0x11e4>
   11eb8:	ldrb	r1, [r0, #3]
   11ebc:	cmp	r1, #45	; 0x2d
   11ec0:	ldrbeq	r1, [r0, #4]
   11ec4:	cmpeq	r1, #56	; 0x38
   11ec8:	bne	11fec <__assert_fail@plt+0x11e4>
   11ecc:	ldrb	r0, [r0, #5]
   11ed0:	cmp	r0, #0
   11ed4:	movw	r0, #21440	; 0x53c0
   11ed8:	movt	r0, #1
   11edc:	str	r0, [sp, #68]	; 0x44
   11ee0:	bne	11fec <__assert_fail@plt+0x11e4>
   11ee4:	b	12008 <__assert_fail@plt+0x1200>
   11ee8:	mov	r0, #1
   11eec:	b	11f2c <__assert_fail@plt+0x1124>
   11ef0:	mov	r7, #0
   11ef4:	mov	r9, #0
   11ef8:	mov	r3, r0
   11efc:	b	11fcc <__assert_fail@plt+0x11c4>
   11f00:	tst	r8, #1
   11f04:	bne	11f2c <__assert_fail@plt+0x1124>
   11f08:	mov	r3, r0
   11f0c:	b	11f84 <__assert_fail@plt+0x117c>
   11f10:	mov	r0, #1
   11f14:	mov	r9, #0
   11f18:	mov	r7, #5
   11f1c:	b	11f68 <__assert_fail@plt+0x1160>
   11f20:	mov	r3, #1
   11f24:	tst	r8, #1
   11f28:	beq	11f84 <__assert_fail@plt+0x117c>
   11f2c:	mov	r1, #1
   11f30:	mov	r9, #0
   11f34:	mov	r7, #2
   11f38:	mov	r3, r0
   11f3c:	mov	r5, #1
   11f40:	str	r1, [fp, #-76]	; 0xffffffb4
   11f44:	movw	r1, #21438	; 0x53be
   11f48:	movt	r1, #1
   11f4c:	str	r1, [sp, #92]	; 0x5c
   11f50:	b	12160 <__assert_fail@plt+0x1358>
   11f54:	mov	r7, #5
   11f58:	tst	r8, #1
   11f5c:	beq	11fa4 <__assert_fail@plt+0x119c>
   11f60:	mov	r0, #1
   11f64:	mov	r9, #0
   11f68:	str	r0, [fp, #-76]	; 0xffffffb4
   11f6c:	movw	r0, #21434	; 0x53ba
   11f70:	mov	r3, #1
   11f74:	mov	r5, #1
   11f78:	movt	r0, #1
   11f7c:	str	r0, [sp, #92]	; 0x5c
   11f80:	b	12160 <__assert_fail@plt+0x1358>
   11f84:	cmp	sl, #0
   11f88:	mov	r9, #1
   11f8c:	mov	r7, #2
   11f90:	movne	r0, #39	; 0x27
   11f94:	strbne	r0, [r6]
   11f98:	movw	r0, #21438	; 0x53be
   11f9c:	movt	r0, #1
   11fa0:	b	11fc0 <__assert_fail@plt+0x11b8>
   11fa4:	cmp	sl, #0
   11fa8:	mov	r9, #1
   11fac:	mov	r3, #1
   11fb0:	movne	r0, #34	; 0x22
   11fb4:	strbne	r0, [r6]
   11fb8:	movw	r0, #21434	; 0x53ba
   11fbc:	movt	r0, #1
   11fc0:	str	r0, [sp, #92]	; 0x5c
   11fc4:	mov	r0, #1
   11fc8:	str	r0, [fp, #-76]	; 0xffffffb4
   11fcc:	mov	r5, #0
   11fd0:	b	12160 <__assert_fail@plt+0x1358>
   11fd4:	ldrb	r1, [r0, #1]
   11fd8:	and	r1, r1, #223	; 0xdf
   11fdc:	cmp	r1, #66	; 0x42
   11fe0:	ldrbeq	r1, [r0, #2]
   11fe4:	cmpeq	r1, #49	; 0x31
   11fe8:	beq	12f08 <__assert_fail@plt+0x2100>
   11fec:	movw	r0, #21438	; 0x53be
   11ff0:	movw	r1, #21434	; 0x53ba
   11ff4:	cmp	r7, #9
   11ff8:	movt	r0, #1
   11ffc:	movt	r1, #1
   12000:	moveq	r0, r1
   12004:	str	r0, [sp, #68]	; 0x44
   12008:	movw	r4, #21438	; 0x53be
   1200c:	mov	r0, #0
   12010:	mov	r2, #5
   12014:	movt	r4, #1
   12018:	mov	r1, r4
   1201c:	bl	10c7c <dcgettext@plt>
   12020:	cmp	r0, r4
   12024:	str	r0, [sp, #72]	; 0x48
   12028:	beq	12038 <__assert_fail@plt+0x1230>
   1202c:	mov	r4, r9
   12030:	mov	r2, r8
   12034:	b	120f0 <__assert_fail@plt+0x12e8>
   12038:	bl	14a60 <__assert_fail@plt+0x3c58>
   1203c:	ldrb	r1, [r0]
   12040:	mov	r4, r9
   12044:	and	r1, r1, #223	; 0xdf
   12048:	cmp	r1, #71	; 0x47
   1204c:	beq	120a8 <__assert_fail@plt+0x12a0>
   12050:	cmp	r1, #85	; 0x55
   12054:	mov	r2, r8
   12058:	bne	120d0 <__assert_fail@plt+0x12c8>
   1205c:	ldrb	r1, [r0, #1]
   12060:	and	r1, r1, #223	; 0xdf
   12064:	cmp	r1, #84	; 0x54
   12068:	bne	120d0 <__assert_fail@plt+0x12c8>
   1206c:	ldrb	r1, [r0, #2]
   12070:	and	r1, r1, #223	; 0xdf
   12074:	cmp	r1, #70	; 0x46
   12078:	ldrbeq	r1, [r0, #3]
   1207c:	cmpeq	r1, #45	; 0x2d
   12080:	bne	120d0 <__assert_fail@plt+0x12c8>
   12084:	ldrb	r1, [r0, #4]
   12088:	cmp	r1, #56	; 0x38
   1208c:	ldrbeq	r0, [r0, #5]
   12090:	cmpeq	r0, #0
   12094:	bne	120d0 <__assert_fail@plt+0x12c8>
   12098:	movw	r0, #21444	; 0x53c4
   1209c:	movt	r0, #1
   120a0:	str	r0, [sp, #72]	; 0x48
   120a4:	b	120f0 <__assert_fail@plt+0x12e8>
   120a8:	ldrb	r1, [r0, #1]
   120ac:	mov	r2, r8
   120b0:	and	r1, r1, #223	; 0xdf
   120b4:	cmp	r1, #66	; 0x42
   120b8:	bne	120d0 <__assert_fail@plt+0x12c8>
   120bc:	ldrb	r1, [r0, #2]
   120c0:	cmp	r1, #49	; 0x31
   120c4:	ldrbeq	r1, [r0, #3]
   120c8:	cmpeq	r1, #56	; 0x38
   120cc:	beq	12f4c <__assert_fail@plt+0x2144>
   120d0:	movw	r0, #21438	; 0x53be
   120d4:	cmp	r7, #9
   120d8:	movt	r0, #1
   120dc:	mov	r1, r0
   120e0:	movw	r0, #21434	; 0x53ba
   120e4:	movt	r0, #1
   120e8:	moveq	r1, r0
   120ec:	str	r1, [sp, #72]	; 0x48
   120f0:	mov	r8, r5
   120f4:	mov	r9, #0
   120f8:	tst	r8, #1
   120fc:	mov	r5, r8
   12100:	str	r2, [fp, #-48]	; 0xffffffd0
   12104:	bne	1213c <__assert_fail@plt+0x1334>
   12108:	ldr	r0, [sp, #68]	; 0x44
   1210c:	ldrb	r0, [r0]
   12110:	cmp	r0, #0
   12114:	beq	1213c <__assert_fail@plt+0x1334>
   12118:	ldr	r1, [sp, #68]	; 0x44
   1211c:	mov	r9, #0
   12120:	add	r1, r1, #1
   12124:	cmp	r9, sl
   12128:	strbcc	r0, [r6, r9]
   1212c:	ldrb	r0, [r1, r9]
   12130:	add	r9, r9, #1
   12134:	cmp	r0, #0
   12138:	bne	12124 <__assert_fail@plt+0x131c>
   1213c:	ldr	r8, [sp, #72]	; 0x48
   12140:	mov	r0, r8
   12144:	bl	10d48 <strlen@plt>
   12148:	ldr	ip, [fp, #-84]	; 0xffffffac
   1214c:	ldr	lr, [sp, #84]	; 0x54
   12150:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12154:	str	r0, [fp, #-76]	; 0xffffffb4
   12158:	str	r8, [sp, #92]	; 0x5c
   1215c:	mov	r3, #1
   12160:	ldr	r0, [fp, #16]
   12164:	str	r7, [fp, #-64]	; 0xffffffc0
   12168:	str	r5, [fp, #-72]	; 0xffffffb8
   1216c:	str	r3, [sp, #80]	; 0x50
   12170:	cmp	r0, #0
   12174:	movwne	r0, #1
   12178:	and	r0, r0, r5
   1217c:	str	r0, [fp, #-88]	; 0xffffffa8
   12180:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12184:	cmp	r0, #0
   12188:	movwne	r0, #1
   1218c:	subs	r7, r7, #2
   12190:	and	r1, r0, r5
   12194:	str	r7, [fp, #-80]	; 0xffffffb0
   12198:	and	r1, r3, r1
   1219c:	str	r1, [sp, #40]	; 0x28
   121a0:	clz	r1, r7
   121a4:	lsr	r1, r1, #5
   121a8:	and	r1, r1, r5
   121ac:	eor	r5, r5, #1
   121b0:	str	r1, [sp, #36]	; 0x24
   121b4:	mov	r1, r7
   121b8:	str	r5, [sp, #88]	; 0x58
   121bc:	mov	r7, #0
   121c0:	movwne	r1, #1
   121c4:	orr	r5, r1, r5
   121c8:	and	r1, r1, r3
   121cc:	and	r0, r0, r1
   121d0:	str	r5, [sp, #60]	; 0x3c
   121d4:	str	r1, [fp, #-68]	; 0xffffffbc
   121d8:	str	r0, [fp, #-60]	; 0xffffffc4
   121dc:	eor	r0, r3, #1
   121e0:	str	r0, [sp, #44]	; 0x2c
   121e4:	cmn	lr, #1
   121e8:	beq	121f8 <__assert_fail@plt+0x13f0>
   121ec:	cmp	r7, lr
   121f0:	bne	12204 <__assert_fail@plt+0x13fc>
   121f4:	b	12e7c <__assert_fail@plt+0x2074>
   121f8:	ldrb	r0, [ip, r7]
   121fc:	cmp	r0, #0
   12200:	beq	12e84 <__assert_fail@plt+0x207c>
   12204:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12208:	mov	r8, #0
   1220c:	str	r4, [fp, #-52]	; 0xffffffcc
   12210:	str	r2, [fp, #-48]	; 0xffffffd0
   12214:	cmp	r0, #0
   12218:	beq	1224c <__assert_fail@plt+0x1444>
   1221c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12220:	add	r4, r7, r0
   12224:	cmp	r0, #2
   12228:	bcc	12244 <__assert_fail@plt+0x143c>
   1222c:	cmn	lr, #1
   12230:	bne	12244 <__assert_fail@plt+0x143c>
   12234:	mov	r0, ip
   12238:	bl	10d48 <strlen@plt>
   1223c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12240:	mov	lr, r0
   12244:	cmp	r4, lr
   12248:	bls	12264 <__assert_fail@plt+0x145c>
   1224c:	mov	r0, #0
   12250:	str	r0, [fp, #-56]	; 0xffffffc8
   12254:	ldrb	r5, [ip, r7]
   12258:	cmp	r5, #126	; 0x7e
   1225c:	bls	122b4 <__assert_fail@plt+0x14ac>
   12260:	b	126bc <__assert_fail@plt+0x18b4>
   12264:	ldr	r1, [sp, #92]	; 0x5c
   12268:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1226c:	add	r0, ip, r7
   12270:	mov	r4, lr
   12274:	bl	10c70 <memcmp@plt>
   12278:	ldr	r2, [sp, #88]	; 0x58
   1227c:	cmp	r0, #0
   12280:	mov	r1, r0
   12284:	movwne	r1, #1
   12288:	orr	r1, r1, r2
   1228c:	tst	r1, #1
   12290:	beq	12f90 <__assert_fail@plt+0x2188>
   12294:	ldr	ip, [fp, #-84]	; 0xffffffac
   12298:	clz	r0, r0
   1229c:	mov	lr, r4
   122a0:	lsr	r0, r0, #5
   122a4:	str	r0, [fp, #-56]	; 0xffffffc8
   122a8:	ldrb	r5, [ip, r7]
   122ac:	cmp	r5, #126	; 0x7e
   122b0:	bhi	126bc <__assert_fail@plt+0x18b4>
   122b4:	add	r3, pc, #16
   122b8:	mov	r4, #1
   122bc:	mov	r2, #110	; 0x6e
   122c0:	mov	r0, #97	; 0x61
   122c4:	mov	r1, #0
   122c8:	ldr	pc, [r3, r5, lsl #2]
   122cc:	muleq	r1, ip, r5
   122d0:			; <UNDEFINED> instruction: 0x000126bc
   122d4:			; <UNDEFINED> instruction: 0x000126bc
   122d8:			; <UNDEFINED> instruction: 0x000126bc
   122dc:			; <UNDEFINED> instruction: 0x000126bc
   122e0:			; <UNDEFINED> instruction: 0x000126bc
   122e4:			; <UNDEFINED> instruction: 0x000126bc
   122e8:	muleq	r1, r8, r7
   122ec:	andeq	r2, r1, ip, ror r5
   122f0:	andeq	r2, r1, r4, ror #10
   122f4:	andeq	r2, r1, r8, lsl #11
   122f8:	andeq	r2, r1, r8, lsl r6
   122fc:	andeq	r2, r1, ip, asr r5
   12300:	andeq	r2, r1, r4, lsl #11
   12304:			; <UNDEFINED> instruction: 0x000126bc
   12308:			; <UNDEFINED> instruction: 0x000126bc
   1230c:			; <UNDEFINED> instruction: 0x000126bc
   12310:			; <UNDEFINED> instruction: 0x000126bc
   12314:			; <UNDEFINED> instruction: 0x000126bc
   12318:			; <UNDEFINED> instruction: 0x000126bc
   1231c:			; <UNDEFINED> instruction: 0x000126bc
   12320:			; <UNDEFINED> instruction: 0x000126bc
   12324:			; <UNDEFINED> instruction: 0x000126bc
   12328:			; <UNDEFINED> instruction: 0x000126bc
   1232c:			; <UNDEFINED> instruction: 0x000126bc
   12330:			; <UNDEFINED> instruction: 0x000126bc
   12334:			; <UNDEFINED> instruction: 0x000126bc
   12338:			; <UNDEFINED> instruction: 0x000126bc
   1233c:			; <UNDEFINED> instruction: 0x000126bc
   12340:			; <UNDEFINED> instruction: 0x000126bc
   12344:			; <UNDEFINED> instruction: 0x000126bc
   12348:			; <UNDEFINED> instruction: 0x000126bc
   1234c:	andeq	r2, r1, r4, lsl r7
   12350:	andeq	r2, r1, r8, lsl r7
   12354:	andeq	r2, r1, r8, lsl r7
   12358:	andeq	r2, r1, r8, ror #9
   1235c:	andeq	r2, r1, r8, lsl r7
   12360:	andeq	r2, r1, r8, asr #9
   12364:	andeq	r2, r1, r8, lsl r7
   12368:	andeq	r2, r1, r0, lsr #12
   1236c:	andeq	r2, r1, r8, lsl r7
   12370:	andeq	r2, r1, r8, lsl r7
   12374:	andeq	r2, r1, r8, lsl r7
   12378:	andeq	r2, r1, r8, asr #9
   1237c:	andeq	r2, r1, r8, asr #9
   12380:	andeq	r2, r1, r8, asr #9
   12384:	andeq	r2, r1, r8, asr #9
   12388:	andeq	r2, r1, r8, asr #9
   1238c:	andeq	r2, r1, r8, asr #9
   12390:	andeq	r2, r1, r8, asr #9
   12394:	andeq	r2, r1, r8, asr #9
   12398:	andeq	r2, r1, r8, asr #9
   1239c:	andeq	r2, r1, r8, asr #9
   123a0:	andeq	r2, r1, r8, asr #9
   123a4:	andeq	r2, r1, r8, asr #9
   123a8:	andeq	r2, r1, r8, asr #9
   123ac:	andeq	r2, r1, r8, asr #9
   123b0:	andeq	r2, r1, r8, asr #9
   123b4:	andeq	r2, r1, r8, asr #9
   123b8:	andeq	r2, r1, r8, lsl r7
   123bc:	andeq	r2, r1, r8, lsl r7
   123c0:	andeq	r2, r1, r8, lsl r7
   123c4:	andeq	r2, r1, r8, lsl r7
   123c8:	ldrdeq	r2, [r1], -ip
   123cc:			; <UNDEFINED> instruction: 0x000126bc
   123d0:	andeq	r2, r1, r8, asr #9
   123d4:	andeq	r2, r1, r8, asr #9
   123d8:	andeq	r2, r1, r8, asr #9
   123dc:	andeq	r2, r1, r8, asr #9
   123e0:	andeq	r2, r1, r8, asr #9
   123e4:	andeq	r2, r1, r8, asr #9
   123e8:	andeq	r2, r1, r8, asr #9
   123ec:	andeq	r2, r1, r8, asr #9
   123f0:	andeq	r2, r1, r8, asr #9
   123f4:	andeq	r2, r1, r8, asr #9
   123f8:	andeq	r2, r1, r8, asr #9
   123fc:	andeq	r2, r1, r8, asr #9
   12400:	andeq	r2, r1, r8, asr #9
   12404:	andeq	r2, r1, r8, asr #9
   12408:	andeq	r2, r1, r8, asr #9
   1240c:	andeq	r2, r1, r8, asr #9
   12410:	andeq	r2, r1, r8, asr #9
   12414:	andeq	r2, r1, r8, asr #9
   12418:	andeq	r2, r1, r8, asr #9
   1241c:	andeq	r2, r1, r8, asr #9
   12420:	andeq	r2, r1, r8, asr #9
   12424:	andeq	r2, r1, r8, asr #9
   12428:	andeq	r2, r1, r8, asr #9
   1242c:	andeq	r2, r1, r8, asr #9
   12430:	andeq	r2, r1, r8, asr #9
   12434:	andeq	r2, r1, r8, asr #9
   12438:	andeq	r2, r1, r8, lsl r7
   1243c:	andeq	r2, r1, r8, lsr #10
   12440:	andeq	r2, r1, r8, asr #9
   12444:	andeq	r2, r1, r8, lsl r7
   12448:	andeq	r2, r1, r8, asr #9
   1244c:	andeq	r2, r1, r8, lsl r7
   12450:	andeq	r2, r1, r8, asr #9
   12454:	andeq	r2, r1, r8, asr #9
   12458:	andeq	r2, r1, r8, asr #9
   1245c:	andeq	r2, r1, r8, asr #9
   12460:	andeq	r2, r1, r8, asr #9
   12464:	andeq	r2, r1, r8, asr #9
   12468:	andeq	r2, r1, r8, asr #9
   1246c:	andeq	r2, r1, r8, asr #9
   12470:	andeq	r2, r1, r8, asr #9
   12474:	andeq	r2, r1, r8, asr #9
   12478:	andeq	r2, r1, r8, asr #9
   1247c:	andeq	r2, r1, r8, asr #9
   12480:	andeq	r2, r1, r8, asr #9
   12484:	andeq	r2, r1, r8, asr #9
   12488:	andeq	r2, r1, r8, asr #9
   1248c:	andeq	r2, r1, r8, asr #9
   12490:	andeq	r2, r1, r8, asr #9
   12494:	andeq	r2, r1, r8, asr #9
   12498:	andeq	r2, r1, r8, asr #9
   1249c:	andeq	r2, r1, r8, asr #9
   124a0:	andeq	r2, r1, r8, asr #9
   124a4:	andeq	r2, r1, r8, asr #9
   124a8:	andeq	r2, r1, r8, asr #9
   124ac:	andeq	r2, r1, r8, asr #9
   124b0:	andeq	r2, r1, r8, asr #9
   124b4:	andeq	r2, r1, r8, asr #9
   124b8:	andeq	r2, r1, r8, lsl #10
   124bc:	andeq	r2, r1, r8, lsl r7
   124c0:	andeq	r2, r1, r8, lsl #10
   124c4:	andeq	r2, r1, r8, ror #9
   124c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   124cc:	cmp	r0, #0
   124d0:	beq	127ac <__assert_fail@plt+0x19a4>
   124d4:	ldr	r0, [fp, #16]
   124d8:	cmp	r0, #0
   124dc:	mov	r0, r5
   124e0:	bne	127bc <__assert_fail@plt+0x19b4>
   124e4:	b	127dc <__assert_fail@plt+0x19d4>
   124e8:	mov	r4, #0
   124ec:	cmp	r7, #0
   124f0:	beq	12714 <__assert_fail@plt+0x190c>
   124f4:	mov	r8, #0
   124f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   124fc:	cmp	r0, #0
   12500:	bne	124d4 <__assert_fail@plt+0x16cc>
   12504:	b	127ac <__assert_fail@plt+0x19a4>
   12508:	mov	r4, #0
   1250c:	cmn	lr, #1
   12510:	beq	126ec <__assert_fail@plt+0x18e4>
   12514:	cmp	r7, #0
   12518:	bne	124f4 <__assert_fail@plt+0x16ec>
   1251c:	cmp	lr, #1
   12520:	beq	12714 <__assert_fail@plt+0x190c>
   12524:	b	124f4 <__assert_fail@plt+0x16ec>
   12528:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1252c:	cmp	r0, #2
   12530:	bne	12744 <__assert_fail@plt+0x193c>
   12534:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12538:	tst	r0, #1
   1253c:	bne	12fa4 <__assert_fail@plt+0x219c>
   12540:	mov	r8, #0
   12544:	mov	r0, #92	; 0x5c
   12548:	mov	r4, #0
   1254c:	cmp	r8, #0
   12550:	beq	12764 <__assert_fail@plt+0x195c>
   12554:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12558:	b	12858 <__assert_fail@plt+0x1a50>
   1255c:	mov	r0, #102	; 0x66
   12560:	b	12798 <__assert_fail@plt+0x1990>
   12564:	mov	r2, #116	; 0x74
   12568:	ldr	r0, [sp, #60]	; 0x3c
   1256c:	tst	r0, #1
   12570:	mov	r0, r2
   12574:	bne	12798 <__assert_fail@plt+0x1990>
   12578:	b	12fa4 <__assert_fail@plt+0x219c>
   1257c:	mov	r0, #98	; 0x62
   12580:	b	12798 <__assert_fail@plt+0x1990>
   12584:	mov	r2, #114	; 0x72
   12588:	ldr	r0, [sp, #60]	; 0x3c
   1258c:	tst	r0, #1
   12590:	mov	r0, r2
   12594:	bne	12798 <__assert_fail@plt+0x1990>
   12598:	b	12fa4 <__assert_fail@plt+0x219c>
   1259c:	ldr	r0, [sp, #80]	; 0x50
   125a0:	tst	r0, #1
   125a4:	beq	12880 <__assert_fail@plt+0x1a78>
   125a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125ac:	tst	r0, #1
   125b0:	bne	130cc <__assert_fail@plt+0x22c4>
   125b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   125b8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   125bc:	cmp	r0, #2
   125c0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   125c4:	movwne	r0, #1
   125c8:	orr	r0, r0, r2
   125cc:	tst	r0, #1
   125d0:	beq	12b78 <__assert_fail@plt+0x1d70>
   125d4:	mov	r0, r9
   125d8:	b	12bac <__assert_fail@plt+0x1da4>
   125dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   125e0:	mov	r8, #0
   125e4:	mov	r5, #63	; 0x3f
   125e8:	cmp	r0, #5
   125ec:	beq	12a34 <__assert_fail@plt+0x1c2c>
   125f0:	cmp	r0, #2
   125f4:	bne	12ae4 <__assert_fail@plt+0x1cdc>
   125f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125fc:	tst	r0, #1
   12600:	bne	12fa4 <__assert_fail@plt+0x219c>
   12604:	mov	r4, #0
   12608:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1260c:	cmp	r0, #0
   12610:	bne	124d4 <__assert_fail@plt+0x16cc>
   12614:	b	127ac <__assert_fail@plt+0x19a4>
   12618:	mov	r0, #118	; 0x76
   1261c:	b	12798 <__assert_fail@plt+0x1990>
   12620:	mov	r0, #1
   12624:	mov	r5, #39	; 0x27
   12628:	str	r0, [sp, #52]	; 0x34
   1262c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12630:	cmp	r0, #2
   12634:	bne	126a8 <__assert_fail@plt+0x18a0>
   12638:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1263c:	tst	r0, #1
   12640:	bne	12fa4 <__assert_fail@plt+0x219c>
   12644:	ldr	r2, [sp, #48]	; 0x30
   12648:	clz	r1, sl
   1264c:	mov	r8, #0
   12650:	lsr	r1, r1, #5
   12654:	cmp	r2, #0
   12658:	mov	r0, r2
   1265c:	movwne	r0, #1
   12660:	orrs	r0, r0, r1
   12664:	moveq	r2, sl
   12668:	moveq	sl, r0
   1266c:	cmp	r9, sl
   12670:	str	r2, [sp, #48]	; 0x30
   12674:	movcc	r0, #39	; 0x27
   12678:	strbcc	r0, [r6, r9]
   1267c:	add	r0, r9, #1
   12680:	cmp	r0, sl
   12684:	movcc	r1, #92	; 0x5c
   12688:	strbcc	r1, [r6, r0]
   1268c:	add	r0, r9, #2
   12690:	add	r9, r9, #3
   12694:	cmp	r0, sl
   12698:	movcc	r1, #39	; 0x27
   1269c:	strbcc	r1, [r6, r0]
   126a0:	mov	r0, #0
   126a4:	str	r0, [fp, #-48]	; 0xffffffd0
   126a8:	mov	r4, #1
   126ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126b0:	cmp	r0, #0
   126b4:	bne	124d4 <__assert_fail@plt+0x16cc>
   126b8:	b	127ac <__assert_fail@plt+0x19a4>
   126bc:	ldr	r0, [sp, #32]
   126c0:	cmp	r0, #1
   126c4:	bne	128b0 <__assert_fail@plt+0x1aa8>
   126c8:	str	lr, [sp, #84]	; 0x54
   126cc:	bl	10d30 <__ctype_b_loc@plt>
   126d0:	ldr	r0, [r0]
   126d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   126d8:	mov	r1, #1
   126dc:	add	r0, r0, r5, lsl #1
   126e0:	ldrb	r0, [r0, #1]
   126e4:	ubfx	r4, r0, #6, #1
   126e8:	b	12ca8 <__assert_fail@plt+0x1ea0>
   126ec:	cmp	r7, #0
   126f0:	ldrbeq	r0, [ip, #1]
   126f4:	cmpeq	r0, #0
   126f8:	beq	12714 <__assert_fail@plt+0x190c>
   126fc:	mvn	lr, #0
   12700:	mov	r8, #0
   12704:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12708:	cmp	r0, #0
   1270c:	bne	124d4 <__assert_fail@plt+0x16cc>
   12710:	b	127ac <__assert_fail@plt+0x19a4>
   12714:	mov	r1, #1
   12718:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1271c:	cmp	r0, #2
   12720:	bne	12730 <__assert_fail@plt+0x1928>
   12724:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12728:	tst	r0, #1
   1272c:	bne	12fa4 <__assert_fail@plt+0x219c>
   12730:	mov	r4, r1
   12734:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12738:	cmp	r0, #0
   1273c:	bne	124d4 <__assert_fail@plt+0x16cc>
   12740:	b	127ac <__assert_fail@plt+0x19a4>
   12744:	ldr	r1, [sp, #40]	; 0x28
   12748:	mov	r8, #0
   1274c:	mov	r0, #92	; 0x5c
   12750:	cmp	r1, #0
   12754:	beq	12798 <__assert_fail@plt+0x1990>
   12758:	mov	r4, #0
   1275c:	cmp	r8, #0
   12760:	bne	12554 <__assert_fail@plt+0x174c>
   12764:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12768:	tst	r2, #1
   1276c:	beq	12858 <__assert_fail@plt+0x1a50>
   12770:	cmp	r9, sl
   12774:	movcc	r1, #39	; 0x27
   12778:	strbcc	r1, [r6, r9]
   1277c:	add	r1, r9, #1
   12780:	add	r9, r9, #2
   12784:	cmp	r1, sl
   12788:	movcc	r2, #39	; 0x27
   1278c:	strbcc	r2, [r6, r1]
   12790:	mov	r2, #0
   12794:	b	12858 <__assert_fail@plt+0x1a50>
   12798:	ldr	r1, [sp, #80]	; 0x50
   1279c:	mov	r4, #0
   127a0:	mov	r8, #0
   127a4:	tst	r1, #1
   127a8:	bne	127e8 <__assert_fail@plt+0x19e0>
   127ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   127b0:	cmp	r0, #0
   127b4:	mov	r0, r5
   127b8:	beq	127dc <__assert_fail@plt+0x19d4>
   127bc:	ldr	r1, [fp, #16]
   127c0:	ubfx	r0, r5, #5, #3
   127c4:	mov	r2, #1
   127c8:	ldr	r0, [r1, r0, lsl #2]
   127cc:	and	r1, r5, #31
   127d0:	tst	r0, r2, lsl r1
   127d4:	mov	r0, r5
   127d8:	bne	127e8 <__assert_fail@plt+0x19e0>
   127dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   127e0:	cmp	r1, #0
   127e4:	beq	12c40 <__assert_fail@plt+0x1e38>
   127e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   127ec:	tst	r1, #1
   127f0:	bne	12f84 <__assert_fail@plt+0x217c>
   127f4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   127f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   127fc:	cmp	r1, #2
   12800:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12804:	movwne	r1, #1
   12808:	orr	r1, r1, r2
   1280c:	tst	r1, #1
   12810:	bne	12848 <__assert_fail@plt+0x1a40>
   12814:	cmp	r9, sl
   12818:	movcc	r1, #39	; 0x27
   1281c:	strbcc	r1, [r6, r9]
   12820:	add	r1, r9, #1
   12824:	cmp	r1, sl
   12828:	movcc	r2, #36	; 0x24
   1282c:	strbcc	r2, [r6, r1]
   12830:	add	r1, r9, #2
   12834:	add	r9, r9, #3
   12838:	cmp	r1, sl
   1283c:	movcc	r2, #39	; 0x27
   12840:	strbcc	r2, [r6, r1]
   12844:	mov	r2, #1
   12848:	cmp	r9, sl
   1284c:	movcc	r1, #92	; 0x5c
   12850:	strbcc	r1, [r6, r9]
   12854:	add	r9, r9, #1
   12858:	cmp	r9, sl
   1285c:	add	r7, r7, #1
   12860:	strbcc	r0, [r6, r9]
   12864:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12868:	add	r9, r9, #1
   1286c:	and	r0, r0, r4
   12870:	mov	r4, r0
   12874:	cmn	lr, #1
   12878:	bne	121ec <__assert_fail@plt+0x13e4>
   1287c:	b	121f8 <__assert_fail@plt+0x13f0>
   12880:	ldr	r0, [sp, #28]
   12884:	mov	r4, #0
   12888:	mov	r8, #0
   1288c:	mov	r5, #0
   12890:	cmp	r0, #0
   12894:	beq	127ac <__assert_fail@plt+0x19a4>
   12898:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1289c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   128a0:	add	r7, r7, #1
   128a4:	cmn	lr, #1
   128a8:	bne	121ec <__assert_fail@plt+0x13e4>
   128ac:	b	121f8 <__assert_fail@plt+0x13f0>
   128b0:	mov	r0, #0
   128b4:	cmn	lr, #1
   128b8:	str	r0, [fp, #-36]	; 0xffffffdc
   128bc:	str	r0, [fp, #-40]	; 0xffffffd8
   128c0:	bne	128d4 <__assert_fail@plt+0x1acc>
   128c4:	mov	r0, ip
   128c8:	bl	10d48 <strlen@plt>
   128cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   128d0:	mov	lr, r0
   128d4:	ldr	r0, [sp, #36]	; 0x24
   128d8:	str	sl, [sp, #56]	; 0x38
   128dc:	str	lr, [sp, #84]	; 0x54
   128e0:	cmp	r0, #0
   128e4:	beq	12afc <__assert_fail@plt+0x1cf4>
   128e8:	add	r0, ip, r7
   128ec:	mov	r4, #1
   128f0:	mov	r6, #0
   128f4:	sub	sl, fp, #40	; 0x28
   128f8:	str	r0, [sp, #20]
   128fc:	str	r6, [sp, #64]	; 0x40
   12900:	add	r6, r6, r7
   12904:	sub	r0, fp, #44	; 0x2c
   12908:	mov	r3, sl
   1290c:	add	r1, ip, r6
   12910:	sub	r2, lr, r6
   12914:	bl	14a98 <__assert_fail@plt+0x3c90>
   12918:	cmn	r0, #2
   1291c:	beq	12c58 <__assert_fail@plt+0x1e50>
   12920:	ldr	sl, [sp, #56]	; 0x38
   12924:	cmn	r0, #1
   12928:	beq	12c4c <__assert_fail@plt+0x1e44>
   1292c:	cmp	r0, #0
   12930:	beq	12c50 <__assert_fail@plt+0x1e48>
   12934:	cmp	r0, #2
   12938:	bcc	129f8 <__assert_fail@plt+0x1bf0>
   1293c:	ldr	r1, [sp, #64]	; 0x40
   12940:	ldr	r2, [sp, #20]
   12944:	add	r1, r2, r1
   12948:	mov	r2, #1
   1294c:	ldrb	r3, [r1, r2]
   12950:	sub	r3, r3, #91	; 0x5b
   12954:	cmp	r3, #33	; 0x21
   12958:	bhi	129ec <__assert_fail@plt+0x1be4>
   1295c:	add	r6, pc, #0
   12960:	ldr	pc, [r6, r3, lsl #2]
   12964:			; <UNDEFINED> instruction: 0x00012fb0
   12968:			; <UNDEFINED> instruction: 0x00012fb0
   1296c:	andeq	r2, r1, ip, ror #19
   12970:			; <UNDEFINED> instruction: 0x00012fb0
   12974:	andeq	r2, r1, ip, ror #19
   12978:			; <UNDEFINED> instruction: 0x00012fb0
   1297c:	andeq	r2, r1, ip, ror #19
   12980:	andeq	r2, r1, ip, ror #19
   12984:	andeq	r2, r1, ip, ror #19
   12988:	andeq	r2, r1, ip, ror #19
   1298c:	andeq	r2, r1, ip, ror #19
   12990:	andeq	r2, r1, ip, ror #19
   12994:	andeq	r2, r1, ip, ror #19
   12998:	andeq	r2, r1, ip, ror #19
   1299c:	andeq	r2, r1, ip, ror #19
   129a0:	andeq	r2, r1, ip, ror #19
   129a4:	andeq	r2, r1, ip, ror #19
   129a8:	andeq	r2, r1, ip, ror #19
   129ac:	andeq	r2, r1, ip, ror #19
   129b0:	andeq	r2, r1, ip, ror #19
   129b4:	andeq	r2, r1, ip, ror #19
   129b8:	andeq	r2, r1, ip, ror #19
   129bc:	andeq	r2, r1, ip, ror #19
   129c0:	andeq	r2, r1, ip, ror #19
   129c4:	andeq	r2, r1, ip, ror #19
   129c8:	andeq	r2, r1, ip, ror #19
   129cc:	andeq	r2, r1, ip, ror #19
   129d0:	andeq	r2, r1, ip, ror #19
   129d4:	andeq	r2, r1, ip, ror #19
   129d8:	andeq	r2, r1, ip, ror #19
   129dc:	andeq	r2, r1, ip, ror #19
   129e0:	andeq	r2, r1, ip, ror #19
   129e4:	andeq	r2, r1, ip, ror #19
   129e8:			; <UNDEFINED> instruction: 0x00012fb0
   129ec:	add	r2, r2, #1
   129f0:	cmp	r2, r0
   129f4:	bcc	1294c <__assert_fail@plt+0x1b44>
   129f8:	ldr	r6, [sp, #64]	; 0x40
   129fc:	add	r6, r0, r6
   12a00:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12a04:	bl	10ca0 <iswprint@plt>
   12a08:	cmp	r0, #0
   12a0c:	sub	sl, fp, #40	; 0x28
   12a10:	movwne	r0, #1
   12a14:	and	r4, r4, r0
   12a18:	mov	r0, sl
   12a1c:	bl	10c64 <mbsinit@plt>
   12a20:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a24:	ldr	lr, [sp, #84]	; 0x54
   12a28:	cmp	r0, #0
   12a2c:	beq	128fc <__assert_fail@plt+0x1af4>
   12a30:	b	12c9c <__assert_fail@plt+0x1e94>
   12a34:	ldr	r0, [sp, #24]
   12a38:	cmp	r0, #0
   12a3c:	beq	12ae4 <__assert_fail@plt+0x1cdc>
   12a40:	add	r0, r7, #2
   12a44:	cmp	r0, lr
   12a48:	bcs	12ae4 <__assert_fail@plt+0x1cdc>
   12a4c:	add	r1, ip, r7
   12a50:	ldrb	r1, [r1, #1]
   12a54:	cmp	r1, #63	; 0x3f
   12a58:	bne	12ae4 <__assert_fail@plt+0x1cdc>
   12a5c:	ldrb	r5, [ip, r0]
   12a60:	sub	r1, r5, #33	; 0x21
   12a64:	cmp	r1, #29
   12a68:	bhi	12ae4 <__assert_fail@plt+0x1cdc>
   12a6c:	movw	r3, #20929	; 0x51c1
   12a70:	mov	r2, #1
   12a74:	movt	r3, #14336	; 0x3800
   12a78:	tst	r3, r2, lsl r1
   12a7c:	beq	12ae4 <__assert_fail@plt+0x1cdc>
   12a80:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12a84:	tst	r1, #1
   12a88:	bne	130d4 <__assert_fail@plt+0x22cc>
   12a8c:	cmp	r9, sl
   12a90:	mov	r7, r0
   12a94:	mov	r4, #0
   12a98:	movcc	r1, #63	; 0x3f
   12a9c:	strbcc	r1, [r6, r9]
   12aa0:	add	r1, r9, #1
   12aa4:	cmp	r1, sl
   12aa8:	movcc	r2, #34	; 0x22
   12aac:	strbcc	r2, [r6, r1]
   12ab0:	add	r1, r9, #2
   12ab4:	cmp	r1, sl
   12ab8:	movcc	r2, #34	; 0x22
   12abc:	strbcc	r2, [r6, r1]
   12ac0:	add	r1, r9, #3
   12ac4:	add	r9, r9, #4
   12ac8:	cmp	r1, sl
   12acc:	movcc	r2, #63	; 0x3f
   12ad0:	strbcc	r2, [r6, r1]
   12ad4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ad8:	cmp	r0, #0
   12adc:	bne	124d4 <__assert_fail@plt+0x16cc>
   12ae0:	b	127ac <__assert_fail@plt+0x19a4>
   12ae4:	mov	r5, #63	; 0x3f
   12ae8:	mov	r4, #0
   12aec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12af0:	cmp	r0, #0
   12af4:	bne	124d4 <__assert_fail@plt+0x16cc>
   12af8:	b	127ac <__assert_fail@plt+0x19a4>
   12afc:	mov	r4, #1
   12b00:	mov	r6, #0
   12b04:	sub	sl, fp, #40	; 0x28
   12b08:	str	r6, [sp, #64]	; 0x40
   12b0c:	add	r6, r6, r7
   12b10:	sub	r0, fp, #44	; 0x2c
   12b14:	mov	r3, sl
   12b18:	add	r1, ip, r6
   12b1c:	sub	r2, lr, r6
   12b20:	bl	14a98 <__assert_fail@plt+0x3c90>
   12b24:	cmn	r0, #2
   12b28:	beq	12c58 <__assert_fail@plt+0x1e50>
   12b2c:	cmn	r0, #1
   12b30:	beq	12c4c <__assert_fail@plt+0x1e44>
   12b34:	ldr	r6, [sp, #64]	; 0x40
   12b38:	cmp	r0, #0
   12b3c:	beq	12c98 <__assert_fail@plt+0x1e90>
   12b40:	add	r6, r0, r6
   12b44:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12b48:	bl	10ca0 <iswprint@plt>
   12b4c:	cmp	r0, #0
   12b50:	sub	sl, fp, #40	; 0x28
   12b54:	movwne	r0, #1
   12b58:	and	r4, r4, r0
   12b5c:	mov	r0, sl
   12b60:	bl	10c64 <mbsinit@plt>
   12b64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b68:	ldr	lr, [sp, #84]	; 0x54
   12b6c:	cmp	r0, #0
   12b70:	beq	12b08 <__assert_fail@plt+0x1d00>
   12b74:	b	12c9c <__assert_fail@plt+0x1e94>
   12b78:	cmp	r9, sl
   12b7c:	mov	r2, #1
   12b80:	movcc	r0, #39	; 0x27
   12b84:	strbcc	r0, [r6, r9]
   12b88:	add	r0, r9, #1
   12b8c:	cmp	r0, sl
   12b90:	movcc	r1, #36	; 0x24
   12b94:	strbcc	r1, [r6, r0]
   12b98:	add	r0, r9, #2
   12b9c:	cmp	r0, sl
   12ba0:	movcc	r1, #39	; 0x27
   12ba4:	strbcc	r1, [r6, r0]
   12ba8:	add	r0, r9, #3
   12bac:	cmp	r0, sl
   12bb0:	add	r9, r0, #1
   12bb4:	str	r2, [fp, #-48]	; 0xffffffd0
   12bb8:	movcc	r1, #92	; 0x5c
   12bbc:	strbcc	r1, [r6, r0]
   12bc0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12bc4:	cmp	r1, #2
   12bc8:	beq	12c28 <__assert_fail@plt+0x1e20>
   12bcc:	add	r1, r7, #1
   12bd0:	mov	r4, #0
   12bd4:	mov	r8, #1
   12bd8:	mov	r5, #48	; 0x30
   12bdc:	cmp	r1, lr
   12be0:	bcs	124c8 <__assert_fail@plt+0x16c0>
   12be4:	ldrb	r1, [ip, r1]
   12be8:	sub	r1, r1, #48	; 0x30
   12bec:	uxtb	r1, r1
   12bf0:	cmp	r1, #9
   12bf4:	bhi	124c8 <__assert_fail@plt+0x16c0>
   12bf8:	cmp	r9, sl
   12bfc:	movcc	r1, #48	; 0x30
   12c00:	strbcc	r1, [r6, r9]
   12c04:	add	r1, r0, #2
   12c08:	add	r9, r0, #3
   12c0c:	cmp	r1, sl
   12c10:	movcc	r2, #48	; 0x30
   12c14:	strbcc	r2, [r6, r1]
   12c18:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c1c:	cmp	r0, #0
   12c20:	bne	124d4 <__assert_fail@plt+0x16cc>
   12c24:	b	127ac <__assert_fail@plt+0x19a4>
   12c28:	mov	r0, #48	; 0x30
   12c2c:	mov	r8, #1
   12c30:	mov	r4, #0
   12c34:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12c38:	cmp	r1, #0
   12c3c:	bne	127e8 <__assert_fail@plt+0x19e0>
   12c40:	cmp	r8, #0
   12c44:	beq	12764 <__assert_fail@plt+0x195c>
   12c48:	b	12554 <__assert_fail@plt+0x174c>
   12c4c:	mov	r4, #0
   12c50:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c54:	b	12c90 <__assert_fail@plt+0x1e88>
   12c58:	ldr	r1, [sp, #84]	; 0x54
   12c5c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c60:	mov	r4, #0
   12c64:	cmp	r6, r1
   12c68:	bcs	12c90 <__assert_fail@plt+0x1e88>
   12c6c:	ldrb	r0, [ip, r6]
   12c70:	cmp	r0, #0
   12c74:	beq	12c90 <__assert_fail@plt+0x1e88>
   12c78:	ldr	r0, [sp, #64]	; 0x40
   12c7c:	add	r0, r0, #1
   12c80:	add	r6, r0, r7
   12c84:	str	r0, [sp, #64]	; 0x40
   12c88:	cmp	r6, r1
   12c8c:	bcc	12c6c <__assert_fail@plt+0x1e64>
   12c90:	ldr	r6, [sp, #64]	; 0x40
   12c94:	b	12c9c <__assert_fail@plt+0x1e94>
   12c98:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c9c:	mov	r1, r6
   12ca0:	ldr	r6, [sp, #76]	; 0x4c
   12ca4:	ldr	sl, [sp, #56]	; 0x38
   12ca8:	ldr	r0, [sp, #44]	; 0x2c
   12cac:	cmp	r1, #1
   12cb0:	orr	r2, r4, r0
   12cb4:	mov	r0, r1
   12cb8:	bhi	12cd8 <__assert_fail@plt+0x1ed0>
   12cbc:	tst	r2, #1
   12cc0:	beq	12cd8 <__assert_fail@plt+0x1ed0>
   12cc4:	ldr	lr, [sp, #84]	; 0x54
   12cc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ccc:	cmp	r0, #0
   12cd0:	bne	124d4 <__assert_fail@plt+0x16cc>
   12cd4:	b	127ac <__assert_fail@plt+0x19a4>
   12cd8:	str	r2, [sp, #64]	; 0x40
   12cdc:	add	r0, r0, r7
   12ce0:	add	r1, r7, #1
   12ce4:	ldr	lr, [sp, #84]	; 0x54
   12ce8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12cec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12cf0:	mov	r3, #0
   12cf4:	str	r0, [sp, #56]	; 0x38
   12cf8:	ldr	r0, [sp, #64]	; 0x40
   12cfc:	tst	r0, #1
   12d00:	bne	12de8 <__assert_fail@plt+0x1fe0>
   12d04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d08:	tst	r0, #1
   12d0c:	bne	12f88 <__assert_fail@plt+0x2180>
   12d10:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12d14:	cmp	r7, #2
   12d18:	movwne	r3, #1
   12d1c:	orr	r3, r3, r2
   12d20:	tst	r3, #1
   12d24:	bne	12d5c <__assert_fail@plt+0x1f54>
   12d28:	cmp	r9, sl
   12d2c:	add	r3, r9, #1
   12d30:	movcc	r2, #39	; 0x27
   12d34:	strbcc	r2, [r6, r9]
   12d38:	cmp	r3, sl
   12d3c:	movcc	r2, #36	; 0x24
   12d40:	strbcc	r2, [r6, r3]
   12d44:	add	r3, r9, #2
   12d48:	add	r9, r9, #3
   12d4c:	cmp	r3, sl
   12d50:	movcc	r2, #39	; 0x27
   12d54:	strbcc	r2, [r6, r3]
   12d58:	mov	r2, #1
   12d5c:	cmp	r9, sl
   12d60:	mov	r0, r2
   12d64:	movcc	r3, #92	; 0x5c
   12d68:	strbcc	r3, [r6, r9]
   12d6c:	add	r3, r9, #1
   12d70:	cmp	r3, sl
   12d74:	andcc	r7, r5, #192	; 0xc0
   12d78:	movcc	r2, #48	; 0x30
   12d7c:	orrcc	r7, r2, r7, lsr #6
   12d80:	strbcc	r7, [r6, r3]
   12d84:	add	r3, r9, #2
   12d88:	add	r9, r9, #3
   12d8c:	cmp	r3, sl
   12d90:	lsrcc	r7, r5, #3
   12d94:	movcc	r2, #6
   12d98:	bficc	r7, r2, #3, #29
   12d9c:	mov	r2, #6
   12da0:	strbcc	r7, [r6, r3]
   12da4:	bfi	r5, r2, #3, #29
   12da8:	mov	r3, #1
   12dac:	mov	r2, r0
   12db0:	ldr	r0, [sp, #56]	; 0x38
   12db4:	and	r8, r3, #1
   12db8:	cmp	r0, r1
   12dbc:	bhi	12e1c <__assert_fail@plt+0x2014>
   12dc0:	b	12e5c <__assert_fail@plt+0x2054>
   12dc4:	cmp	r9, sl
   12dc8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12dcc:	strbcc	r5, [r6, r9]
   12dd0:	add	r9, r9, #1
   12dd4:	ldrb	r5, [ip, r1]
   12dd8:	add	r1, r1, #1
   12ddc:	ldr	r0, [sp, #64]	; 0x40
   12de0:	tst	r0, #1
   12de4:	beq	12d04 <__assert_fail@plt+0x1efc>
   12de8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12dec:	tst	r7, #1
   12df0:	beq	12e04 <__assert_fail@plt+0x1ffc>
   12df4:	cmp	r9, sl
   12df8:	movcc	r7, #92	; 0x5c
   12dfc:	strbcc	r7, [r6, r9]
   12e00:	add	r9, r9, #1
   12e04:	mov	r7, #0
   12e08:	str	r7, [fp, #-56]	; 0xffffffc8
   12e0c:	ldr	r0, [sp, #56]	; 0x38
   12e10:	and	r8, r3, #1
   12e14:	cmp	r0, r1
   12e18:	bls	12e5c <__assert_fail@plt+0x2054>
   12e1c:	cmp	r8, #0
   12e20:	mvn	r7, r2
   12e24:	movwne	r8, #1
   12e28:	orr	r7, r7, r8
   12e2c:	tst	r7, #1
   12e30:	bne	12dc4 <__assert_fail@plt+0x1fbc>
   12e34:	cmp	r9, sl
   12e38:	movcc	r7, #39	; 0x27
   12e3c:	strbcc	r7, [r6, r9]
   12e40:	add	r7, r9, #1
   12e44:	add	r9, r9, #2
   12e48:	cmp	r7, sl
   12e4c:	movcc	r2, #39	; 0x27
   12e50:	strbcc	r2, [r6, r7]
   12e54:	mov	r2, #0
   12e58:	b	12dc4 <__assert_fail@plt+0x1fbc>
   12e5c:	cmp	r8, #0
   12e60:	sub	r7, r1, #1
   12e64:	mov	r0, r5
   12e68:	str	r2, [fp, #-48]	; 0xffffffd0
   12e6c:	movwne	r8, #1
   12e70:	cmp	r8, #0
   12e74:	beq	12764 <__assert_fail@plt+0x195c>
   12e78:	b	12554 <__assert_fail@plt+0x174c>
   12e7c:	mov	lr, r7
   12e80:	b	12e88 <__assert_fail@plt+0x2080>
   12e84:	mvn	lr, #0
   12e88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12e8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e90:	eor	r0, r7, #2
   12e94:	orr	r0, r0, r9
   12e98:	clz	r0, r0
   12e9c:	lsr	r0, r0, #5
   12ea0:	tst	r1, r0
   12ea4:	bne	12fa4 <__assert_fail@plt+0x219c>
   12ea8:	mov	r0, r1
   12eac:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12eb0:	cmp	r7, #2
   12eb4:	movwne	r1, #1
   12eb8:	orr	r0, r0, r1
   12ebc:	tst	r0, #1
   12ec0:	ldreq	r0, [sp, #52]	; 0x34
   12ec4:	streq	lr, [sp, #84]	; 0x54
   12ec8:	eoreq	r0, r0, #1
   12ecc:	tsteq	r0, #1
   12ed0:	bne	13068 <__assert_fail@plt+0x2260>
   12ed4:	tst	r4, #1
   12ed8:	bne	13024 <__assert_fail@plt+0x221c>
   12edc:	ldr	r6, [sp, #48]	; 0x30
   12ee0:	mov	r8, #0
   12ee4:	cmp	r6, #0
   12ee8:	beq	13060 <__assert_fail@plt+0x2258>
   12eec:	ldr	r0, [sp, #80]	; 0x50
   12ef0:	mov	r1, #0
   12ef4:	cmp	sl, #0
   12ef8:	mov	r4, #0
   12efc:	str	r1, [fp, #-72]	; 0xffffffb8
   12f00:	beq	11df4 <__assert_fail@plt+0xfec>
   12f04:	b	13068 <__assert_fail@plt+0x2260>
   12f08:	ldrb	r1, [r0, #3]
   12f0c:	cmp	r1, #56	; 0x38
   12f10:	ldrbeq	r1, [r0, #4]
   12f14:	cmpeq	r1, #48	; 0x30
   12f18:	bne	11fec <__assert_fail@plt+0x11e4>
   12f1c:	ldrb	r1, [r0, #5]
   12f20:	cmp	r1, #51	; 0x33
   12f24:	ldrbeq	r1, [r0, #6]
   12f28:	cmpeq	r1, #48	; 0x30
   12f2c:	bne	11fec <__assert_fail@plt+0x11e4>
   12f30:	ldrb	r0, [r0, #7]
   12f34:	cmp	r0, #0
   12f38:	movw	r0, #21448	; 0x53c8
   12f3c:	movt	r0, #1
   12f40:	str	r0, [sp, #68]	; 0x44
   12f44:	bne	11fec <__assert_fail@plt+0x11e4>
   12f48:	b	12008 <__assert_fail@plt+0x1200>
   12f4c:	ldrb	r1, [r0, #4]
   12f50:	cmp	r1, #48	; 0x30
   12f54:	ldrbeq	r1, [r0, #5]
   12f58:	cmpeq	r1, #51	; 0x33
   12f5c:	bne	120d0 <__assert_fail@plt+0x12c8>
   12f60:	ldrb	r1, [r0, #6]
   12f64:	cmp	r1, #48	; 0x30
   12f68:	ldrbeq	r0, [r0, #7]
   12f6c:	cmpeq	r0, #0
   12f70:	bne	120d0 <__assert_fail@plt+0x12c8>
   12f74:	movw	r0, #21452	; 0x53cc
   12f78:	movt	r0, #1
   12f7c:	str	r0, [sp, #72]	; 0x48
   12f80:	b	120f0 <__assert_fail@plt+0x12e8>
   12f84:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12f88:	ldr	r2, [sp, #80]	; 0x50
   12f8c:	b	12fc4 <__assert_fail@plt+0x21bc>
   12f90:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f94:	mov	r2, #1
   12f98:	mov	lr, r4
   12f9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12fa0:	b	12fc4 <__assert_fail@plt+0x21bc>
   12fa4:	ldr	r2, [sp, #80]	; 0x50
   12fa8:	mov	r7, #2
   12fac:	b	12fc4 <__assert_fail@plt+0x21bc>
   12fb0:	ldr	r6, [sp, #76]	; 0x4c
   12fb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fb8:	ldr	lr, [sp, #84]	; 0x54
   12fbc:	ldr	r2, [sp, #80]	; 0x50
   12fc0:	mov	r7, #2
   12fc4:	mov	r0, #0
   12fc8:	ldr	r1, [fp, #12]
   12fcc:	tst	r2, #1
   12fd0:	mov	r2, r7
   12fd4:	mov	r3, lr
   12fd8:	str	r0, [sp, #8]
   12fdc:	ldr	r0, [sp, #68]	; 0x44
   12fe0:	movwne	r2, #4
   12fe4:	cmp	r7, #2
   12fe8:	movne	r2, r7
   12fec:	str	r2, [sp]
   12ff0:	mov	r2, ip
   12ff4:	bic	r1, r1, #2
   12ff8:	str	r0, [sp, #12]
   12ffc:	ldr	r0, [sp, #72]	; 0x48
   13000:	str	r1, [sp, #4]
   13004:	mov	r1, sl
   13008:	str	r0, [sp, #16]
   1300c:	mov	r0, r6
   13010:	bl	11d78 <__assert_fail@plt+0xf70>
   13014:	mov	r9, r0
   13018:	mov	r0, r9
   1301c:	sub	sp, fp, #28
   13020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13024:	mov	r0, #5
   13028:	ldr	r1, [sp, #48]	; 0x30
   1302c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13030:	ldr	r3, [sp, #84]	; 0x54
   13034:	str	r0, [sp]
   13038:	ldr	r0, [fp, #12]
   1303c:	str	r0, [sp, #4]
   13040:	ldr	r0, [fp, #16]
   13044:	str	r0, [sp, #8]
   13048:	ldr	r0, [sp, #68]	; 0x44
   1304c:	str	r0, [sp, #12]
   13050:	ldr	r0, [sp, #72]	; 0x48
   13054:	str	r0, [sp, #16]
   13058:	ldr	r0, [sp, #76]	; 0x4c
   1305c:	b	13010 <__assert_fail@plt+0x2208>
   13060:	mov	r0, #0
   13064:	str	r0, [fp, #-72]	; 0xffffffb8
   13068:	ldr	r1, [sp, #92]	; 0x5c
   1306c:	cmp	r1, #0
   13070:	beq	130b0 <__assert_fail@plt+0x22a8>
   13074:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13078:	ldr	r2, [sp, #76]	; 0x4c
   1307c:	tst	r0, #1
   13080:	bne	130b4 <__assert_fail@plt+0x22ac>
   13084:	ldrb	r0, [r1]
   13088:	cmp	r0, #0
   1308c:	beq	130b4 <__assert_fail@plt+0x22ac>
   13090:	add	r1, r1, #1
   13094:	cmp	r9, sl
   13098:	strbcc	r0, [r2, r9]
   1309c:	add	r9, r9, #1
   130a0:	ldrb	r0, [r1], #1
   130a4:	cmp	r0, #0
   130a8:	bne	13094 <__assert_fail@plt+0x228c>
   130ac:	b	130b4 <__assert_fail@plt+0x22ac>
   130b0:	ldr	r2, [sp, #76]	; 0x4c
   130b4:	cmp	r9, sl
   130b8:	movcc	r0, #0
   130bc:	strbcc	r0, [r2, r9]
   130c0:	mov	r0, r9
   130c4:	sub	sp, fp, #28
   130c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130cc:	mov	r2, #1
   130d0:	b	12f9c <__assert_fail@plt+0x2194>
   130d4:	ldr	r2, [sp, #80]	; 0x50
   130d8:	mov	r7, #5
   130dc:	b	12fc4 <__assert_fail@plt+0x21bc>
   130e0:	bl	10dfc <abort@plt>
   130e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e8:	add	fp, sp, #28
   130ec:	sub	sp, sp, #28
   130f0:	movw	r5, #24880	; 0x6130
   130f4:	cmp	r2, #0
   130f8:	mov	r4, r1
   130fc:	mov	r7, r0
   13100:	str	r0, [sp, #20]
   13104:	movt	r5, #2
   13108:	movne	r5, r2
   1310c:	bl	10d54 <__errno_location@plt>
   13110:	mov	sl, r0
   13114:	ldm	r5, {r0, r1}
   13118:	ldr	r2, [r5, #40]	; 0x28
   1311c:	ldr	r3, [r5, #44]	; 0x2c
   13120:	add	r9, r5, #8
   13124:	ldr	r6, [sl]
   13128:	orr	r8, r1, #1
   1312c:	mov	r1, #0
   13130:	str	r6, [sp, #24]
   13134:	stm	sp, {r0, r8, r9}
   13138:	str	r2, [sp, #12]
   1313c:	str	r3, [sp, #16]
   13140:	mov	r0, #0
   13144:	mov	r2, r7
   13148:	mov	r3, r4
   1314c:	mov	r6, r4
   13150:	bl	11d78 <__assert_fail@plt+0xf70>
   13154:	add	r7, r0, #1
   13158:	mov	r0, r7
   1315c:	bl	141c0 <__assert_fail@plt+0x33b8>
   13160:	mov	r4, r0
   13164:	ldr	r0, [r5]
   13168:	ldr	r2, [r5, #44]	; 0x2c
   1316c:	ldr	r1, [r5, #40]	; 0x28
   13170:	mov	r3, r6
   13174:	stm	sp, {r0, r8, r9}
   13178:	str	r2, [sp, #16]
   1317c:	str	r1, [sp, #12]
   13180:	mov	r0, r4
   13184:	mov	r1, r7
   13188:	ldr	r2, [sp, #20]
   1318c:	bl	11d78 <__assert_fail@plt+0xf70>
   13190:	ldr	r0, [sp, #24]
   13194:	str	r0, [sl]
   13198:	mov	r0, r4
   1319c:	sub	sp, fp, #28
   131a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a8:	add	fp, sp, #28
   131ac:	sub	sp, sp, #36	; 0x24
   131b0:	movw	r8, #24880	; 0x6130
   131b4:	cmp	r3, #0
   131b8:	mov	r4, r2
   131bc:	str	r2, [sp, #24]
   131c0:	mov	r5, r1
   131c4:	mov	r6, r0
   131c8:	str	r0, [sp, #20]
   131cc:	movt	r8, #2
   131d0:	movne	r8, r3
   131d4:	bl	10d54 <__errno_location@plt>
   131d8:	str	r0, [sp, #28]
   131dc:	cmp	r4, #0
   131e0:	add	sl, r8, #8
   131e4:	ldm	r8, {r3, r9}
   131e8:	ldr	r7, [r0]
   131ec:	ldr	r1, [r8, #40]	; 0x28
   131f0:	ldr	r2, [r8, #44]	; 0x2c
   131f4:	mov	r0, #0
   131f8:	orreq	r9, r9, #1
   131fc:	str	r7, [sp, #32]
   13200:	mov	r7, r5
   13204:	stm	sp, {r3, r9, sl}
   13208:	str	r1, [sp, #12]
   1320c:	str	r2, [sp, #16]
   13210:	mov	r1, #0
   13214:	mov	r2, r6
   13218:	mov	r3, r5
   1321c:	bl	11d78 <__assert_fail@plt+0xf70>
   13220:	add	r4, r0, #1
   13224:	mov	r5, r0
   13228:	mov	r0, r4
   1322c:	bl	141c0 <__assert_fail@plt+0x33b8>
   13230:	mov	r6, r0
   13234:	ldr	r0, [r8]
   13238:	ldr	r2, [r8, #44]	; 0x2c
   1323c:	ldr	r1, [r8, #40]	; 0x28
   13240:	mov	r3, r7
   13244:	stm	sp, {r0, r9, sl}
   13248:	str	r2, [sp, #16]
   1324c:	str	r1, [sp, #12]
   13250:	mov	r0, r6
   13254:	mov	r1, r4
   13258:	ldr	r2, [sp, #20]
   1325c:	bl	11d78 <__assert_fail@plt+0xf70>
   13260:	ldr	r0, [sp, #24]
   13264:	ldr	r1, [sp, #32]
   13268:	ldr	r2, [sp, #28]
   1326c:	cmp	r0, #0
   13270:	str	r1, [r2]
   13274:	strne	r5, [r0]
   13278:	mov	r0, r6
   1327c:	sub	sp, fp, #28
   13280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13284:	push	{r4, r5, r6, r7, fp, lr}
   13288:	add	fp, sp, #16
   1328c:	movw	r4, #24832	; 0x6100
   13290:	movt	r4, #2
   13294:	ldrd	r6, [r4]
   13298:	cmp	r7, #2
   1329c:	blt	132c8 <__assert_fail@plt+0x24c0>
   132a0:	add	r5, r6, #12
   132a4:	mov	r7, #0
   132a8:	ldr	r0, [r5, r7, lsl #3]
   132ac:	bl	14994 <__assert_fail@plt+0x3b8c>
   132b0:	ldr	r1, [r4, #4]
   132b4:	add	r2, r7, #2
   132b8:	add	r0, r7, #1
   132bc:	mov	r7, r0
   132c0:	cmp	r2, r1
   132c4:	blt	132a8 <__assert_fail@plt+0x24a0>
   132c8:	ldr	r0, [r6, #4]
   132cc:	movw	r5, #24928	; 0x6160
   132d0:	movt	r5, #2
   132d4:	cmp	r0, r5
   132d8:	beq	132ec <__assert_fail@plt+0x24e4>
   132dc:	bl	14994 <__assert_fail@plt+0x3b8c>
   132e0:	mov	r0, #256	; 0x100
   132e4:	str	r0, [r4, #8]
   132e8:	str	r5, [r4, #12]
   132ec:	add	r5, r4, #8
   132f0:	cmp	r6, r5
   132f4:	beq	13304 <__assert_fail@plt+0x24fc>
   132f8:	mov	r0, r6
   132fc:	bl	14994 <__assert_fail@plt+0x3b8c>
   13300:	str	r5, [r4]
   13304:	mov	r0, #1
   13308:	str	r0, [r4, #4]
   1330c:	pop	{r4, r5, r6, r7, fp, pc}
   13310:	movw	r3, #24880	; 0x6130
   13314:	mvn	r2, #0
   13318:	movt	r3, #2
   1331c:	b	13320 <__assert_fail@plt+0x2518>
   13320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13324:	add	fp, sp, #28
   13328:	sub	sp, sp, #44	; 0x2c
   1332c:	mov	r7, r3
   13330:	str	r2, [sp, #36]	; 0x24
   13334:	str	r1, [sp, #32]
   13338:	mov	r5, r0
   1333c:	bl	10d54 <__errno_location@plt>
   13340:	cmp	r5, #0
   13344:	blt	134a8 <__assert_fail@plt+0x26a0>
   13348:	cmn	r5, #-2147483647	; 0x80000001
   1334c:	beq	134a8 <__assert_fail@plt+0x26a0>
   13350:	movw	r8, #24832	; 0x6100
   13354:	mov	r4, r0
   13358:	movt	r8, #2
   1335c:	ldr	r6, [r8]
   13360:	ldr	r1, [r8, #4]
   13364:	ldr	r0, [r0]
   13368:	str	r4, [sp, #28]
   1336c:	cmp	r1, r5
   13370:	str	r0, [sp, #24]
   13374:	ble	13380 <__assert_fail@plt+0x2578>
   13378:	mov	sl, r6
   1337c:	b	133e4 <__assert_fail@plt+0x25dc>
   13380:	mov	r0, #8
   13384:	add	r9, r8, #8
   13388:	add	r2, r5, #1
   1338c:	str	r1, [fp, #-32]	; 0xffffffe0
   13390:	mvn	r3, #-2147483648	; 0x80000000
   13394:	str	r0, [sp]
   13398:	subs	r0, r6, r9
   1339c:	sub	r2, r2, r1
   133a0:	sub	r1, fp, #32
   133a4:	movne	r0, r6
   133a8:	bl	143c0 <__assert_fail@plt+0x35b8>
   133ac:	str	r0, [r8]
   133b0:	cmp	r6, r9
   133b4:	mov	sl, r0
   133b8:	ldrdeq	r0, [r8, #8]
   133bc:	stmeq	sl, {r0, r1}
   133c0:	ldr	r1, [r8, #4]
   133c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   133c8:	add	r0, sl, r1, lsl #3
   133cc:	sub	r1, r2, r1
   133d0:	lsl	r2, r1, #3
   133d4:	mov	r1, #0
   133d8:	bl	10d6c <memset@plt>
   133dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   133e0:	str	r0, [r8, #4]
   133e4:	mov	r9, sl
   133e8:	ldr	r6, [r9, r5, lsl #3]!
   133ec:	ldr	r4, [r9, #4]!
   133f0:	ldm	r7, {r0, r1}
   133f4:	ldr	r2, [r7, #40]	; 0x28
   133f8:	ldr	r3, [r7, #44]	; 0x2c
   133fc:	orr	r8, r1, #1
   13400:	add	r1, r7, #8
   13404:	stm	sp, {r0, r8}
   13408:	add	r0, sp, #8
   1340c:	str	r1, [sp, #20]
   13410:	stm	r0, {r1, r2, r3}
   13414:	mov	r0, r4
   13418:	mov	r1, r6
   1341c:	ldr	r2, [sp, #32]
   13420:	ldr	r3, [sp, #36]	; 0x24
   13424:	bl	11d78 <__assert_fail@plt+0xf70>
   13428:	cmp	r6, r0
   1342c:	bhi	13490 <__assert_fail@plt+0x2688>
   13430:	add	r6, r0, #1
   13434:	movw	r0, #24928	; 0x6160
   13438:	movt	r0, #2
   1343c:	str	r6, [sl, r5, lsl #3]
   13440:	cmp	r4, r0
   13444:	beq	13450 <__assert_fail@plt+0x2648>
   13448:	mov	r0, r4
   1344c:	bl	14994 <__assert_fail@plt+0x3b8c>
   13450:	mov	r0, r6
   13454:	bl	141c0 <__assert_fail@plt+0x33b8>
   13458:	str	r0, [r9]
   1345c:	mov	r4, r0
   13460:	add	r3, sp, #8
   13464:	ldr	r0, [r7]
   13468:	ldr	r1, [r7, #40]	; 0x28
   1346c:	ldr	r2, [r7, #44]	; 0x2c
   13470:	stm	sp, {r0, r8}
   13474:	ldr	r0, [sp, #20]
   13478:	stm	r3, {r0, r1, r2}
   1347c:	mov	r0, r4
   13480:	mov	r1, r6
   13484:	ldr	r2, [sp, #32]
   13488:	ldr	r3, [sp, #36]	; 0x24
   1348c:	bl	11d78 <__assert_fail@plt+0xf70>
   13490:	ldr	r1, [sp, #24]
   13494:	ldr	r0, [sp, #28]
   13498:	str	r1, [r0]
   1349c:	mov	r0, r4
   134a0:	sub	sp, fp, #28
   134a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a8:	bl	10dfc <abort@plt>
   134ac:	movw	r3, #24880	; 0x6130
   134b0:	movt	r3, #2
   134b4:	b	13320 <__assert_fail@plt+0x2518>
   134b8:	movw	r3, #24880	; 0x6130
   134bc:	mov	r1, r0
   134c0:	mov	r0, #0
   134c4:	mvn	r2, #0
   134c8:	movt	r3, #2
   134cc:	b	13320 <__assert_fail@plt+0x2518>
   134d0:	movw	r3, #24880	; 0x6130
   134d4:	mov	r2, r1
   134d8:	mov	r1, r0
   134dc:	mov	r0, #0
   134e0:	movt	r3, #2
   134e4:	b	13320 <__assert_fail@plt+0x2518>
   134e8:	push	{fp, lr}
   134ec:	mov	fp, sp
   134f0:	sub	sp, sp, #48	; 0x30
   134f4:	vmov.i32	q8, #0	; 0x00000000
   134f8:	mov	ip, #32
   134fc:	mov	r3, sp
   13500:	mov	lr, r2
   13504:	cmp	r1, #10
   13508:	add	r2, r3, #16
   1350c:	vst1.64	{d16-d17}, [r3], ip
   13510:	vst1.64	{d16-d17}, [r3]
   13514:	vst1.64	{d16-d17}, [r2]
   13518:	beq	13538 <__assert_fail@plt+0x2730>
   1351c:	str	r1, [sp]
   13520:	mov	r3, sp
   13524:	mov	r1, lr
   13528:	mvn	r2, #0
   1352c:	bl	13320 <__assert_fail@plt+0x2518>
   13530:	mov	sp, fp
   13534:	pop	{fp, pc}
   13538:	bl	10dfc <abort@plt>
   1353c:	push	{r4, sl, fp, lr}
   13540:	add	fp, sp, #8
   13544:	sub	sp, sp, #48	; 0x30
   13548:	mov	ip, r3
   1354c:	mov	r3, sp
   13550:	vmov.i32	q8, #0	; 0x00000000
   13554:	mov	lr, #32
   13558:	cmp	r1, #10
   1355c:	add	r4, r3, #16
   13560:	vst1.64	{d16-d17}, [r3], lr
   13564:	vst1.64	{d16-d17}, [r3]
   13568:	vst1.64	{d16-d17}, [r4]
   1356c:	beq	1358c <__assert_fail@plt+0x2784>
   13570:	str	r1, [sp]
   13574:	mov	r1, r2
   13578:	mov	r3, sp
   1357c:	mov	r2, ip
   13580:	bl	13320 <__assert_fail@plt+0x2518>
   13584:	sub	sp, fp, #8
   13588:	pop	{r4, sl, fp, pc}
   1358c:	bl	10dfc <abort@plt>
   13590:	push	{fp, lr}
   13594:	mov	fp, sp
   13598:	sub	sp, sp, #48	; 0x30
   1359c:	mov	r3, sp
   135a0:	vmov.i32	q8, #0	; 0x00000000
   135a4:	mov	ip, #32
   135a8:	cmp	r0, #10
   135ac:	add	r2, r3, #16
   135b0:	vst1.64	{d16-d17}, [r3], ip
   135b4:	vst1.64	{d16-d17}, [r3]
   135b8:	vst1.64	{d16-d17}, [r2]
   135bc:	beq	135dc <__assert_fail@plt+0x27d4>
   135c0:	str	r0, [sp]
   135c4:	mov	r3, sp
   135c8:	mov	r0, #0
   135cc:	mvn	r2, #0
   135d0:	bl	13320 <__assert_fail@plt+0x2518>
   135d4:	mov	sp, fp
   135d8:	pop	{fp, pc}
   135dc:	bl	10dfc <abort@plt>
   135e0:	push	{fp, lr}
   135e4:	mov	fp, sp
   135e8:	sub	sp, sp, #48	; 0x30
   135ec:	mov	r3, sp
   135f0:	vmov.i32	q8, #0	; 0x00000000
   135f4:	mov	ip, #32
   135f8:	cmp	r0, #10
   135fc:	add	lr, r3, #16
   13600:	vst1.64	{d16-d17}, [r3], ip
   13604:	vst1.64	{d16-d17}, [r3]
   13608:	vst1.64	{d16-d17}, [lr]
   1360c:	beq	13628 <__assert_fail@plt+0x2820>
   13610:	str	r0, [sp]
   13614:	mov	r3, sp
   13618:	mov	r0, #0
   1361c:	bl	13320 <__assert_fail@plt+0x2518>
   13620:	mov	sp, fp
   13624:	pop	{fp, pc}
   13628:	bl	10dfc <abort@plt>
   1362c:	push	{r4, sl, fp, lr}
   13630:	add	fp, sp, #8
   13634:	sub	sp, sp, #48	; 0x30
   13638:	mov	lr, r0
   1363c:	movw	r0, #24880	; 0x6130
   13640:	mov	r3, #32
   13644:	mov	ip, r1
   13648:	mov	r4, #1
   1364c:	movt	r0, #2
   13650:	add	r1, r0, #16
   13654:	vld1.64	{d16-d17}, [r0], r3
   13658:	mov	r3, sp
   1365c:	vld1.64	{d18-d19}, [r1]
   13660:	add	r1, r3, #16
   13664:	vld1.64	{d20-d21}, [r0]
   13668:	add	r0, r3, #32
   1366c:	vst1.64	{d18-d19}, [r1]
   13670:	mov	r1, r3
   13674:	vst1.64	{d20-d21}, [r0]
   13678:	mov	r0, #28
   1367c:	and	r0, r0, r2, lsr #3
   13680:	and	r2, r2, #31
   13684:	vst1.64	{d16-d17}, [r1], r0
   13688:	ldr	r0, [r1, #8]
   1368c:	bic	r4, r4, r0, lsr r2
   13690:	eor	r0, r0, r4, lsl r2
   13694:	mov	r2, ip
   13698:	str	r0, [r1, #8]
   1369c:	mov	r0, #0
   136a0:	mov	r1, lr
   136a4:	bl	13320 <__assert_fail@plt+0x2518>
   136a8:	sub	sp, fp, #8
   136ac:	pop	{r4, sl, fp, pc}
   136b0:	push	{fp, lr}
   136b4:	mov	fp, sp
   136b8:	sub	sp, sp, #48	; 0x30
   136bc:	mov	ip, r0
   136c0:	movw	r0, #24880	; 0x6130
   136c4:	mov	r3, #32
   136c8:	movt	r0, #2
   136cc:	add	r2, r0, #16
   136d0:	vld1.64	{d16-d17}, [r0], r3
   136d4:	mov	r3, sp
   136d8:	vld1.64	{d18-d19}, [r2]
   136dc:	add	r2, r3, #16
   136e0:	vld1.64	{d20-d21}, [r0]
   136e4:	add	r0, r3, #32
   136e8:	vst1.64	{d18-d19}, [r2]
   136ec:	mov	r2, r3
   136f0:	vst1.64	{d20-d21}, [r0]
   136f4:	mov	r0, #28
   136f8:	and	r0, r0, r1, lsr #3
   136fc:	and	r1, r1, #31
   13700:	vst1.64	{d16-d17}, [r2], r0
   13704:	mov	r0, #1
   13708:	ldr	lr, [r2, #8]
   1370c:	bic	r0, r0, lr, lsr r1
   13710:	eor	r0, lr, r0, lsl r1
   13714:	mov	r1, ip
   13718:	str	r0, [r2, #8]
   1371c:	mov	r0, #0
   13720:	mvn	r2, #0
   13724:	bl	13320 <__assert_fail@plt+0x2518>
   13728:	mov	sp, fp
   1372c:	pop	{fp, pc}
   13730:	push	{fp, lr}
   13734:	mov	fp, sp
   13738:	sub	sp, sp, #48	; 0x30
   1373c:	movw	r2, #24880	; 0x6130
   13740:	mov	r3, #32
   13744:	mov	r1, r0
   13748:	movt	r2, #2
   1374c:	add	r0, r2, #16
   13750:	vld1.64	{d16-d17}, [r2], r3
   13754:	mov	r3, sp
   13758:	vld1.64	{d18-d19}, [r0]
   1375c:	add	r0, r3, #16
   13760:	vld1.64	{d20-d21}, [r2]
   13764:	mov	r2, r3
   13768:	vst1.64	{d18-d19}, [r0]
   1376c:	add	r0, r3, #32
   13770:	vst1.64	{d20-d21}, [r0]
   13774:	mov	r0, #12
   13778:	vst1.64	{d16-d17}, [r2], r0
   1377c:	ldr	r0, [r2]
   13780:	orr	r0, r0, #67108864	; 0x4000000
   13784:	str	r0, [r2]
   13788:	mov	r0, #0
   1378c:	mvn	r2, #0
   13790:	bl	13320 <__assert_fail@plt+0x2518>
   13794:	mov	sp, fp
   13798:	pop	{fp, pc}
   1379c:	push	{fp, lr}
   137a0:	mov	fp, sp
   137a4:	sub	sp, sp, #48	; 0x30
   137a8:	mov	ip, r1
   137ac:	mov	r1, r0
   137b0:	movw	r0, #24880	; 0x6130
   137b4:	mov	r3, #32
   137b8:	movt	r0, #2
   137bc:	add	r2, r0, #16
   137c0:	vld1.64	{d16-d17}, [r0], r3
   137c4:	mov	r3, sp
   137c8:	vld1.64	{d18-d19}, [r2]
   137cc:	add	r2, r3, #16
   137d0:	vld1.64	{d20-d21}, [r0]
   137d4:	add	r0, r3, #32
   137d8:	vst1.64	{d18-d19}, [r2]
   137dc:	mov	r2, r3
   137e0:	vst1.64	{d20-d21}, [r0]
   137e4:	mov	r0, #12
   137e8:	vst1.64	{d16-d17}, [r2], r0
   137ec:	ldr	r0, [r2]
   137f0:	orr	r0, r0, #67108864	; 0x4000000
   137f4:	str	r0, [r2]
   137f8:	mov	r0, #0
   137fc:	mov	r2, ip
   13800:	bl	13320 <__assert_fail@plt+0x2518>
   13804:	mov	sp, fp
   13808:	pop	{fp, pc}
   1380c:	push	{r4, sl, fp, lr}
   13810:	add	fp, sp, #8
   13814:	sub	sp, sp, #96	; 0x60
   13818:	mov	ip, r2
   1381c:	mov	r2, sp
   13820:	vmov.i32	q8, #0	; 0x00000000
   13824:	mov	r4, #28
   13828:	cmp	r1, #10
   1382c:	mov	r3, r2
   13830:	add	lr, r2, #16
   13834:	vst1.64	{d16-d17}, [r3], r4
   13838:	vst1.64	{d16-d17}, [lr]
   1383c:	vst1.32	{d16-d17}, [r3]
   13840:	beq	13890 <__assert_fail@plt+0x2a88>
   13844:	vld1.64	{d16-d17}, [r2], r4
   13848:	vld1.64	{d18-d19}, [lr]
   1384c:	add	r3, sp, #48	; 0x30
   13850:	add	r4, r3, #4
   13854:	vld1.32	{d20-d21}, [r2]
   13858:	add	r2, r3, #20
   1385c:	vst1.32	{d16-d17}, [r4]
   13860:	vst1.32	{d18-d19}, [r2]
   13864:	add	r2, r3, #32
   13868:	vst1.32	{d20-d21}, [r2]
   1386c:	str	r1, [sp, #48]	; 0x30
   13870:	mvn	r2, #0
   13874:	ldr	r1, [sp, #60]	; 0x3c
   13878:	orr	r1, r1, #67108864	; 0x4000000
   1387c:	str	r1, [sp, #60]	; 0x3c
   13880:	mov	r1, ip
   13884:	bl	13320 <__assert_fail@plt+0x2518>
   13888:	sub	sp, fp, #8
   1388c:	pop	{r4, sl, fp, pc}
   13890:	bl	10dfc <abort@plt>
   13894:	push	{r4, r5, fp, lr}
   13898:	add	fp, sp, #8
   1389c:	sub	sp, sp, #48	; 0x30
   138a0:	mov	ip, r3
   138a4:	movw	r3, #24880	; 0x6130
   138a8:	mov	lr, #32
   138ac:	cmp	r1, #0
   138b0:	mov	r5, sp
   138b4:	movt	r3, #2
   138b8:	cmpne	r2, #0
   138bc:	add	r4, r3, #16
   138c0:	vld1.64	{d16-d17}, [r3], lr
   138c4:	vld1.64	{d18-d19}, [r4]
   138c8:	add	r4, r5, #16
   138cc:	vld1.64	{d20-d21}, [r3]
   138d0:	vst1.64	{d16-d17}, [r5], lr
   138d4:	mov	r3, #10
   138d8:	vst1.64	{d18-d19}, [r4]
   138dc:	vst1.64	{d20-d21}, [r5]
   138e0:	str	r3, [sp]
   138e4:	bne	138ec <__assert_fail@plt+0x2ae4>
   138e8:	bl	10dfc <abort@plt>
   138ec:	str	r2, [sp, #44]	; 0x2c
   138f0:	str	r1, [sp, #40]	; 0x28
   138f4:	mov	r3, sp
   138f8:	mov	r1, ip
   138fc:	mvn	r2, #0
   13900:	bl	13320 <__assert_fail@plt+0x2518>
   13904:	sub	sp, fp, #8
   13908:	pop	{r4, r5, fp, pc}
   1390c:	push	{r4, r5, fp, lr}
   13910:	add	fp, sp, #8
   13914:	sub	sp, sp, #48	; 0x30
   13918:	mov	lr, r3
   1391c:	movw	r3, #24880	; 0x6130
   13920:	mov	ip, #32
   13924:	cmp	r1, #0
   13928:	mov	r5, sp
   1392c:	movt	r3, #2
   13930:	cmpne	r2, #0
   13934:	add	r4, r3, #16
   13938:	vld1.64	{d16-d17}, [r3], ip
   1393c:	vld1.64	{d18-d19}, [r4]
   13940:	add	r4, r5, #16
   13944:	vld1.64	{d20-d21}, [r3]
   13948:	vst1.64	{d16-d17}, [r5], ip
   1394c:	mov	r3, #10
   13950:	vst1.64	{d18-d19}, [r4]
   13954:	vst1.64	{d20-d21}, [r5]
   13958:	str	r3, [sp]
   1395c:	bne	13964 <__assert_fail@plt+0x2b5c>
   13960:	bl	10dfc <abort@plt>
   13964:	ldr	ip, [fp, #8]
   13968:	str	r2, [sp, #44]	; 0x2c
   1396c:	str	r1, [sp, #40]	; 0x28
   13970:	mov	r3, sp
   13974:	mov	r1, lr
   13978:	mov	r2, ip
   1397c:	bl	13320 <__assert_fail@plt+0x2518>
   13980:	sub	sp, fp, #8
   13984:	pop	{r4, r5, fp, pc}
   13988:	push	{r4, sl, fp, lr}
   1398c:	add	fp, sp, #8
   13990:	sub	sp, sp, #48	; 0x30
   13994:	mov	ip, r2
   13998:	movw	r2, #24880	; 0x6130
   1399c:	mov	lr, #32
   139a0:	cmp	r0, #0
   139a4:	mov	r4, sp
   139a8:	movt	r2, #2
   139ac:	cmpne	r1, #0
   139b0:	add	r3, r2, #16
   139b4:	vld1.64	{d16-d17}, [r2], lr
   139b8:	vld1.64	{d18-d19}, [r3]
   139bc:	add	r3, r4, #16
   139c0:	vld1.64	{d20-d21}, [r2]
   139c4:	vst1.64	{d16-d17}, [r4], lr
   139c8:	mov	r2, #10
   139cc:	vst1.64	{d18-d19}, [r3]
   139d0:	vst1.64	{d20-d21}, [r4]
   139d4:	str	r2, [sp]
   139d8:	bne	139e0 <__assert_fail@plt+0x2bd8>
   139dc:	bl	10dfc <abort@plt>
   139e0:	str	r1, [sp, #44]	; 0x2c
   139e4:	str	r0, [sp, #40]	; 0x28
   139e8:	mov	r3, sp
   139ec:	mov	r0, #0
   139f0:	mov	r1, ip
   139f4:	mvn	r2, #0
   139f8:	bl	13320 <__assert_fail@plt+0x2518>
   139fc:	sub	sp, fp, #8
   13a00:	pop	{r4, sl, fp, pc}
   13a04:	push	{r4, r5, fp, lr}
   13a08:	add	fp, sp, #8
   13a0c:	sub	sp, sp, #48	; 0x30
   13a10:	mov	lr, r2
   13a14:	movw	r2, #24880	; 0x6130
   13a18:	mov	ip, r3
   13a1c:	mov	r3, #32
   13a20:	cmp	r0, #0
   13a24:	mov	r5, sp
   13a28:	movt	r2, #2
   13a2c:	cmpne	r1, #0
   13a30:	add	r4, r2, #16
   13a34:	vld1.64	{d16-d17}, [r2], r3
   13a38:	vld1.64	{d18-d19}, [r4]
   13a3c:	add	r4, r5, #16
   13a40:	vld1.64	{d20-d21}, [r2]
   13a44:	vst1.64	{d16-d17}, [r5], r3
   13a48:	mov	r2, #10
   13a4c:	vst1.64	{d18-d19}, [r4]
   13a50:	vst1.64	{d20-d21}, [r5]
   13a54:	str	r2, [sp]
   13a58:	bne	13a60 <__assert_fail@plt+0x2c58>
   13a5c:	bl	10dfc <abort@plt>
   13a60:	str	r1, [sp, #44]	; 0x2c
   13a64:	str	r0, [sp, #40]	; 0x28
   13a68:	mov	r3, sp
   13a6c:	mov	r0, #0
   13a70:	mov	r1, lr
   13a74:	mov	r2, ip
   13a78:	bl	13320 <__assert_fail@plt+0x2518>
   13a7c:	sub	sp, fp, #8
   13a80:	pop	{r4, r5, fp, pc}
   13a84:	movw	r3, #24784	; 0x60d0
   13a88:	movt	r3, #2
   13a8c:	b	13320 <__assert_fail@plt+0x2518>
   13a90:	movw	r3, #24784	; 0x60d0
   13a94:	mov	r2, r1
   13a98:	mov	r1, r0
   13a9c:	mov	r0, #0
   13aa0:	movt	r3, #2
   13aa4:	b	13320 <__assert_fail@plt+0x2518>
   13aa8:	movw	r3, #24784	; 0x60d0
   13aac:	mvn	r2, #0
   13ab0:	movt	r3, #2
   13ab4:	b	13320 <__assert_fail@plt+0x2518>
   13ab8:	movw	r3, #24784	; 0x60d0
   13abc:	mov	r1, r0
   13ac0:	mov	r0, #0
   13ac4:	mvn	r2, #0
   13ac8:	movt	r3, #2
   13acc:	b	13320 <__assert_fail@plt+0x2518>
   13ad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ad4:	add	fp, sp, #24
   13ad8:	sub	sp, sp, #32
   13adc:	ldr	r6, [fp, #12]
   13ae0:	ldr	r7, [fp, #8]
   13ae4:	mov	r4, r2
   13ae8:	mov	r8, r0
   13aec:	cmp	r1, #0
   13af0:	beq	13b18 <__assert_fail@plt+0x2d10>
   13af4:	movw	r2, #21540	; 0x5424
   13af8:	mov	r5, r1
   13afc:	str	r3, [sp, #4]
   13b00:	str	r4, [sp]
   13b04:	mov	r0, r8
   13b08:	mov	r1, #1
   13b0c:	movt	r2, #1
   13b10:	mov	r3, r5
   13b14:	b	13b30 <__assert_fail@plt+0x2d28>
   13b18:	movw	r2, #21552	; 0x5430
   13b1c:	str	r3, [sp]
   13b20:	mov	r0, r8
   13b24:	mov	r1, #1
   13b28:	mov	r3, r4
   13b2c:	movt	r2, #1
   13b30:	bl	10d90 <__fprintf_chk@plt>
   13b34:	movw	r1, #21559	; 0x5437
   13b38:	mov	r0, #0
   13b3c:	mov	r2, #5
   13b40:	movt	r1, #1
   13b44:	bl	10c7c <dcgettext@plt>
   13b48:	movw	r2, #22277	; 0x5705
   13b4c:	mov	r3, r0
   13b50:	movw	r0, #2022	; 0x7e6
   13b54:	mov	r1, #1
   13b58:	str	r0, [sp]
   13b5c:	movt	r2, #1
   13b60:	mov	r0, r8
   13b64:	bl	10d90 <__fprintf_chk@plt>
   13b68:	movw	r4, #20150	; 0x4eb6
   13b6c:	mov	r1, r8
   13b70:	movt	r4, #1
   13b74:	mov	r0, r4
   13b78:	bl	10c1c <fputs_unlocked@plt>
   13b7c:	movw	r1, #21563	; 0x543b
   13b80:	mov	r0, #0
   13b84:	mov	r2, #5
   13b88:	movt	r1, #1
   13b8c:	bl	10c7c <dcgettext@plt>
   13b90:	movw	r3, #21734	; 0x54e6
   13b94:	mov	r2, r0
   13b98:	mov	r0, r8
   13b9c:	mov	r1, #1
   13ba0:	movt	r3, #1
   13ba4:	bl	10d90 <__fprintf_chk@plt>
   13ba8:	mov	r0, r4
   13bac:	mov	r1, r8
   13bb0:	bl	10c1c <fputs_unlocked@plt>
   13bb4:	cmp	r6, #9
   13bb8:	bhi	13bf4 <__assert_fail@plt+0x2dec>
   13bbc:	add	r0, pc, #0
   13bc0:	ldr	pc, [r0, r6, lsl #2]
   13bc4:	andeq	r3, r1, ip, ror #23
   13bc8:	andeq	r3, r1, r0, lsl #24
   13bcc:	andeq	r3, r1, r0, lsr ip
   13bd0:	andeq	r3, r1, r8, asr ip
   13bd4:	andeq	r3, r1, r0, lsl #25
   13bd8:	andeq	r3, r1, r8, lsr #25
   13bdc:	ldrdeq	r3, [r1], -r0
   13be0:	andeq	r3, r1, r8, lsl #26
   13be4:			; <UNDEFINED> instruction: 0x00013db0
   13be8:	andeq	r3, r1, r8, asr sp
   13bec:	sub	sp, fp, #24
   13bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bf4:	movw	r1, #22087	; 0x5647
   13bf8:	movt	r1, #1
   13bfc:	b	13d60 <__assert_fail@plt+0x2f58>
   13c00:	movw	r1, #21768	; 0x5508
   13c04:	mov	r0, #0
   13c08:	mov	r2, #5
   13c0c:	movt	r1, #1
   13c10:	bl	10c7c <dcgettext@plt>
   13c14:	ldr	r3, [r7]
   13c18:	mov	r2, r0
   13c1c:	mov	r0, r8
   13c20:	mov	r1, #1
   13c24:	sub	sp, fp, #24
   13c28:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c2c:	b	10d90 <__fprintf_chk@plt>
   13c30:	movw	r1, #21784	; 0x5518
   13c34:	mov	r0, #0
   13c38:	mov	r2, #5
   13c3c:	movt	r1, #1
   13c40:	bl	10c7c <dcgettext@plt>
   13c44:	mov	r2, r0
   13c48:	ldr	r3, [r7]
   13c4c:	ldr	r0, [r7, #4]
   13c50:	str	r0, [sp]
   13c54:	b	13d44 <__assert_fail@plt+0x2f3c>
   13c58:	movw	r1, #21807	; 0x552f
   13c5c:	mov	r0, #0
   13c60:	mov	r2, #5
   13c64:	movt	r1, #1
   13c68:	bl	10c7c <dcgettext@plt>
   13c6c:	ldr	r3, [r7]
   13c70:	mov	r2, r0
   13c74:	ldmib	r7, {r0, r1}
   13c78:	stm	sp, {r0, r1}
   13c7c:	b	13d44 <__assert_fail@plt+0x2f3c>
   13c80:	movw	r1, #21835	; 0x554b
   13c84:	mov	r0, #0
   13c88:	mov	r2, #5
   13c8c:	movt	r1, #1
   13c90:	bl	10c7c <dcgettext@plt>
   13c94:	ldr	r3, [r7]
   13c98:	mov	r2, r0
   13c9c:	ldmib	r7, {r0, r1, r7}
   13ca0:	stm	sp, {r0, r1, r7}
   13ca4:	b	13d44 <__assert_fail@plt+0x2f3c>
   13ca8:	movw	r1, #21867	; 0x556b
   13cac:	mov	r0, #0
   13cb0:	mov	r2, #5
   13cb4:	movt	r1, #1
   13cb8:	bl	10c7c <dcgettext@plt>
   13cbc:	ldr	r3, [r7]
   13cc0:	mov	r2, r0
   13cc4:	ldmib	r7, {r0, r1, r6, r7}
   13cc8:	stm	sp, {r0, r1, r6, r7}
   13ccc:	b	13d44 <__assert_fail@plt+0x2f3c>
   13cd0:	movw	r1, #21903	; 0x558f
   13cd4:	mov	r0, #0
   13cd8:	mov	r2, #5
   13cdc:	movt	r1, #1
   13ce0:	bl	10c7c <dcgettext@plt>
   13ce4:	ldr	r3, [r7]
   13ce8:	mov	r2, r0
   13cec:	ldmib	r7, {r0, r1, r6}
   13cf0:	ldr	r5, [r7, #16]
   13cf4:	ldr	r7, [r7, #20]
   13cf8:	stm	sp, {r0, r1, r6}
   13cfc:	str	r5, [sp, #12]
   13d00:	str	r7, [sp, #16]
   13d04:	b	13d44 <__assert_fail@plt+0x2f3c>
   13d08:	movw	r1, #21943	; 0x55b7
   13d0c:	mov	r0, #0
   13d10:	mov	r2, #5
   13d14:	movt	r1, #1
   13d18:	bl	10c7c <dcgettext@plt>
   13d1c:	ldr	r3, [r7]
   13d20:	mov	r2, r0
   13d24:	ldmib	r7, {r0, r1, r6}
   13d28:	ldr	r5, [r7, #16]
   13d2c:	ldr	r4, [r7, #20]
   13d30:	ldr	r7, [r7, #24]
   13d34:	stm	sp, {r0, r1, r6}
   13d38:	str	r5, [sp, #12]
   13d3c:	str	r4, [sp, #16]
   13d40:	str	r7, [sp, #20]
   13d44:	mov	r0, r8
   13d48:	mov	r1, #1
   13d4c:	bl	10d90 <__fprintf_chk@plt>
   13d50:	sub	sp, fp, #24
   13d54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d58:	movw	r1, #22035	; 0x5613
   13d5c:	movt	r1, #1
   13d60:	mov	r0, #0
   13d64:	mov	r2, #5
   13d68:	bl	10c7c <dcgettext@plt>
   13d6c:	mov	ip, r0
   13d70:	ldr	r3, [r7]
   13d74:	ldr	r0, [r7, #4]
   13d78:	ldr	r1, [r7, #8]
   13d7c:	ldr	r6, [r7, #12]
   13d80:	ldr	r5, [r7, #16]
   13d84:	ldr	r4, [r7, #20]
   13d88:	ldr	r2, [r7, #24]
   13d8c:	ldr	lr, [r7, #28]
   13d90:	ldr	r7, [r7, #32]
   13d94:	stm	sp, {r0, r1, r6}
   13d98:	str	r5, [sp, #12]
   13d9c:	str	r4, [sp, #16]
   13da0:	str	r2, [sp, #20]
   13da4:	str	lr, [sp, #24]
   13da8:	str	r7, [sp, #28]
   13dac:	b	13df4 <__assert_fail@plt+0x2fec>
   13db0:	movw	r1, #21987	; 0x55e3
   13db4:	mov	r0, #0
   13db8:	mov	r2, #5
   13dbc:	movt	r1, #1
   13dc0:	bl	10c7c <dcgettext@plt>
   13dc4:	mov	ip, r0
   13dc8:	ldr	r3, [r7]
   13dcc:	ldmib	r7, {r0, r1, r6}
   13dd0:	ldr	r5, [r7, #16]
   13dd4:	ldr	r4, [r7, #20]
   13dd8:	ldr	r2, [r7, #24]
   13ddc:	ldr	r7, [r7, #28]
   13de0:	stm	sp, {r0, r1, r6}
   13de4:	str	r5, [sp, #12]
   13de8:	str	r4, [sp, #16]
   13dec:	str	r2, [sp, #20]
   13df0:	str	r7, [sp, #24]
   13df4:	mov	r0, r8
   13df8:	mov	r1, #1
   13dfc:	mov	r2, ip
   13e00:	bl	10d90 <__fprintf_chk@plt>
   13e04:	sub	sp, fp, #24
   13e08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e0c:	push	{r4, sl, fp, lr}
   13e10:	add	fp, sp, #8
   13e14:	sub	sp, sp, #8
   13e18:	ldr	ip, [fp, #8]
   13e1c:	mov	lr, #0
   13e20:	ldr	r4, [ip, lr, lsl #2]
   13e24:	add	lr, lr, #1
   13e28:	cmp	r4, #0
   13e2c:	bne	13e20 <__assert_fail@plt+0x3018>
   13e30:	sub	r4, lr, #1
   13e34:	str	ip, [sp]
   13e38:	str	r4, [sp, #4]
   13e3c:	bl	13ad0 <__assert_fail@plt+0x2cc8>
   13e40:	sub	sp, fp, #8
   13e44:	pop	{r4, sl, fp, pc}
   13e48:	push	{fp, lr}
   13e4c:	mov	fp, sp
   13e50:	sub	sp, sp, #48	; 0x30
   13e54:	ldr	ip, [fp, #8]
   13e58:	ldr	lr, [ip]
   13e5c:	cmp	lr, #0
   13e60:	str	lr, [sp, #8]
   13e64:	beq	13f00 <__assert_fail@plt+0x30f8>
   13e68:	ldr	lr, [ip, #4]
   13e6c:	cmp	lr, #0
   13e70:	str	lr, [sp, #12]
   13e74:	beq	13f08 <__assert_fail@plt+0x3100>
   13e78:	ldr	lr, [ip, #8]
   13e7c:	cmp	lr, #0
   13e80:	str	lr, [sp, #16]
   13e84:	beq	13f10 <__assert_fail@plt+0x3108>
   13e88:	ldr	lr, [ip, #12]
   13e8c:	cmp	lr, #0
   13e90:	str	lr, [sp, #20]
   13e94:	beq	13f18 <__assert_fail@plt+0x3110>
   13e98:	ldr	lr, [ip, #16]
   13e9c:	cmp	lr, #0
   13ea0:	str	lr, [sp, #24]
   13ea4:	beq	13f20 <__assert_fail@plt+0x3118>
   13ea8:	ldr	lr, [ip, #20]
   13eac:	cmp	lr, #0
   13eb0:	str	lr, [sp, #28]
   13eb4:	beq	13f28 <__assert_fail@plt+0x3120>
   13eb8:	ldr	lr, [ip, #24]
   13ebc:	cmp	lr, #0
   13ec0:	str	lr, [sp, #32]
   13ec4:	beq	13f30 <__assert_fail@plt+0x3128>
   13ec8:	ldr	lr, [ip, #28]
   13ecc:	cmp	lr, #0
   13ed0:	str	lr, [sp, #36]	; 0x24
   13ed4:	beq	13f38 <__assert_fail@plt+0x3130>
   13ed8:	ldr	lr, [ip, #32]
   13edc:	cmp	lr, #0
   13ee0:	str	lr, [sp, #40]	; 0x28
   13ee4:	beq	13f40 <__assert_fail@plt+0x3138>
   13ee8:	ldr	lr, [ip, #36]	; 0x24
   13eec:	mov	ip, #10
   13ef0:	cmp	lr, #0
   13ef4:	str	lr, [sp, #44]	; 0x2c
   13ef8:	movweq	ip, #9
   13efc:	b	13f44 <__assert_fail@plt+0x313c>
   13f00:	mov	ip, #0
   13f04:	b	13f44 <__assert_fail@plt+0x313c>
   13f08:	mov	ip, #1
   13f0c:	b	13f44 <__assert_fail@plt+0x313c>
   13f10:	mov	ip, #2
   13f14:	b	13f44 <__assert_fail@plt+0x313c>
   13f18:	mov	ip, #3
   13f1c:	b	13f44 <__assert_fail@plt+0x313c>
   13f20:	mov	ip, #4
   13f24:	b	13f44 <__assert_fail@plt+0x313c>
   13f28:	mov	ip, #5
   13f2c:	b	13f44 <__assert_fail@plt+0x313c>
   13f30:	mov	ip, #6
   13f34:	b	13f44 <__assert_fail@plt+0x313c>
   13f38:	mov	ip, #7
   13f3c:	b	13f44 <__assert_fail@plt+0x313c>
   13f40:	mov	ip, #8
   13f44:	add	lr, sp, #8
   13f48:	str	ip, [sp, #4]
   13f4c:	str	lr, [sp]
   13f50:	bl	13ad0 <__assert_fail@plt+0x2cc8>
   13f54:	mov	sp, fp
   13f58:	pop	{fp, pc}
   13f5c:	push	{fp, lr}
   13f60:	mov	fp, sp
   13f64:	sub	sp, sp, #56	; 0x38
   13f68:	add	ip, fp, #8
   13f6c:	str	ip, [sp, #12]
   13f70:	ldr	lr, [fp, #8]
   13f74:	cmp	lr, #0
   13f78:	str	lr, [sp, #16]
   13f7c:	beq	14018 <__assert_fail@plt+0x3210>
   13f80:	ldr	lr, [ip, #4]
   13f84:	cmp	lr, #0
   13f88:	str	lr, [sp, #20]
   13f8c:	beq	14020 <__assert_fail@plt+0x3218>
   13f90:	ldr	lr, [ip, #8]
   13f94:	cmp	lr, #0
   13f98:	str	lr, [sp, #24]
   13f9c:	beq	14028 <__assert_fail@plt+0x3220>
   13fa0:	ldr	lr, [ip, #12]
   13fa4:	cmp	lr, #0
   13fa8:	str	lr, [sp, #28]
   13fac:	beq	14030 <__assert_fail@plt+0x3228>
   13fb0:	ldr	lr, [ip, #16]
   13fb4:	cmp	lr, #0
   13fb8:	str	lr, [sp, #32]
   13fbc:	beq	14038 <__assert_fail@plt+0x3230>
   13fc0:	ldr	lr, [ip, #20]
   13fc4:	cmp	lr, #0
   13fc8:	str	lr, [sp, #36]	; 0x24
   13fcc:	beq	14040 <__assert_fail@plt+0x3238>
   13fd0:	ldr	lr, [ip, #24]
   13fd4:	cmp	lr, #0
   13fd8:	str	lr, [sp, #40]	; 0x28
   13fdc:	beq	14048 <__assert_fail@plt+0x3240>
   13fe0:	ldr	lr, [ip, #28]
   13fe4:	cmp	lr, #0
   13fe8:	str	lr, [sp, #44]	; 0x2c
   13fec:	beq	14050 <__assert_fail@plt+0x3248>
   13ff0:	ldr	lr, [ip, #32]
   13ff4:	cmp	lr, #0
   13ff8:	str	lr, [sp, #48]	; 0x30
   13ffc:	beq	14058 <__assert_fail@plt+0x3250>
   14000:	ldr	lr, [ip, #36]	; 0x24
   14004:	mov	ip, #10
   14008:	cmp	lr, #0
   1400c:	str	lr, [sp, #52]	; 0x34
   14010:	movweq	ip, #9
   14014:	b	1405c <__assert_fail@plt+0x3254>
   14018:	mov	ip, #0
   1401c:	b	1405c <__assert_fail@plt+0x3254>
   14020:	mov	ip, #1
   14024:	b	1405c <__assert_fail@plt+0x3254>
   14028:	mov	ip, #2
   1402c:	b	1405c <__assert_fail@plt+0x3254>
   14030:	mov	ip, #3
   14034:	b	1405c <__assert_fail@plt+0x3254>
   14038:	mov	ip, #4
   1403c:	b	1405c <__assert_fail@plt+0x3254>
   14040:	mov	ip, #5
   14044:	b	1405c <__assert_fail@plt+0x3254>
   14048:	mov	ip, #6
   1404c:	b	1405c <__assert_fail@plt+0x3254>
   14050:	mov	ip, #7
   14054:	b	1405c <__assert_fail@plt+0x3254>
   14058:	mov	ip, #8
   1405c:	add	lr, sp, #16
   14060:	str	ip, [sp, #4]
   14064:	str	lr, [sp]
   14068:	bl	13ad0 <__assert_fail@plt+0x2cc8>
   1406c:	mov	sp, fp
   14070:	pop	{fp, pc}
   14074:	push	{fp, lr}
   14078:	mov	fp, sp
   1407c:	movw	r0, #24860	; 0x611c
   14080:	movt	r0, #2
   14084:	ldr	r1, [r0]
   14088:	movw	r0, #20150	; 0x4eb6
   1408c:	movt	r0, #1
   14090:	bl	10c1c <fputs_unlocked@plt>
   14094:	movw	r1, #22147	; 0x5683
   14098:	mov	r0, #0
   1409c:	mov	r2, #5
   140a0:	movt	r1, #1
   140a4:	bl	10c7c <dcgettext@plt>
   140a8:	movw	r2, #22167	; 0x5697
   140ac:	mov	r1, r0
   140b0:	mov	r0, #1
   140b4:	movt	r2, #1
   140b8:	bl	10d78 <__printf_chk@plt>
   140bc:	movw	r1, #22189	; 0x56ad
   140c0:	mov	r0, #0
   140c4:	mov	r2, #5
   140c8:	movt	r1, #1
   140cc:	bl	10c7c <dcgettext@plt>
   140d0:	movw	r2, #20852	; 0x5174
   140d4:	movw	r3, #21005	; 0x520d
   140d8:	mov	r1, r0
   140dc:	mov	r0, #1
   140e0:	movt	r2, #1
   140e4:	movt	r3, #1
   140e8:	bl	10d78 <__printf_chk@plt>
   140ec:	movw	r1, #22209	; 0x56c1
   140f0:	mov	r0, #0
   140f4:	mov	r2, #5
   140f8:	movt	r1, #1
   140fc:	bl	10c7c <dcgettext@plt>
   14100:	movw	r2, #22248	; 0x56e8
   14104:	mov	r1, r0
   14108:	mov	r0, #1
   1410c:	movt	r2, #1
   14110:	pop	{fp, lr}
   14114:	b	10d78 <__printf_chk@plt>
   14118:	push	{r4, r5, r6, sl, fp, lr}
   1411c:	add	fp, sp, #16
   14120:	mov	r4, r2
   14124:	mov	r5, r1
   14128:	mov	r6, r0
   1412c:	bl	14af8 <__assert_fail@plt+0x3cf0>
   14130:	cmp	r0, #0
   14134:	popne	{r4, r5, r6, sl, fp, pc}
   14138:	cmp	r6, #0
   1413c:	beq	14150 <__assert_fail@plt+0x3348>
   14140:	cmp	r5, #0
   14144:	cmpne	r4, #0
   14148:	bne	14150 <__assert_fail@plt+0x3348>
   1414c:	pop	{r4, r5, r6, sl, fp, pc}
   14150:	bl	146f0 <__assert_fail@plt+0x38e8>
   14154:	push	{r4, r5, r6, sl, fp, lr}
   14158:	add	fp, sp, #16
   1415c:	mov	r4, r2
   14160:	mov	r5, r1
   14164:	mov	r6, r0
   14168:	bl	14af8 <__assert_fail@plt+0x3cf0>
   1416c:	cmp	r0, #0
   14170:	popne	{r4, r5, r6, sl, fp, pc}
   14174:	cmp	r6, #0
   14178:	beq	1418c <__assert_fail@plt+0x3384>
   1417c:	cmp	r5, #0
   14180:	cmpne	r4, #0
   14184:	bne	1418c <__assert_fail@plt+0x3384>
   14188:	pop	{r4, r5, r6, sl, fp, pc}
   1418c:	bl	146f0 <__assert_fail@plt+0x38e8>
   14190:	push	{fp, lr}
   14194:	mov	fp, sp
   14198:	bl	14788 <__assert_fail@plt+0x3980>
   1419c:	cmp	r0, #0
   141a0:	popne	{fp, pc}
   141a4:	bl	146f0 <__assert_fail@plt+0x38e8>
   141a8:	push	{fp, lr}
   141ac:	mov	fp, sp
   141b0:	bl	14788 <__assert_fail@plt+0x3980>
   141b4:	cmp	r0, #0
   141b8:	popne	{fp, pc}
   141bc:	bl	146f0 <__assert_fail@plt+0x38e8>
   141c0:	push	{fp, lr}
   141c4:	mov	fp, sp
   141c8:	bl	14788 <__assert_fail@plt+0x3980>
   141cc:	cmp	r0, #0
   141d0:	popne	{fp, pc}
   141d4:	bl	146f0 <__assert_fail@plt+0x38e8>
   141d8:	push	{r4, r5, fp, lr}
   141dc:	add	fp, sp, #8
   141e0:	mov	r4, r1
   141e4:	mov	r5, r0
   141e8:	bl	147b8 <__assert_fail@plt+0x39b0>
   141ec:	cmp	r0, #0
   141f0:	popne	{r4, r5, fp, pc}
   141f4:	cmp	r5, #0
   141f8:	beq	14208 <__assert_fail@plt+0x3400>
   141fc:	cmp	r4, #0
   14200:	bne	14208 <__assert_fail@plt+0x3400>
   14204:	pop	{r4, r5, fp, pc}
   14208:	bl	146f0 <__assert_fail@plt+0x38e8>
   1420c:	push	{fp, lr}
   14210:	mov	fp, sp
   14214:	cmp	r1, #0
   14218:	orreq	r1, r1, #1
   1421c:	bl	147b8 <__assert_fail@plt+0x39b0>
   14220:	cmp	r0, #0
   14224:	popne	{fp, pc}
   14228:	bl	146f0 <__assert_fail@plt+0x38e8>
   1422c:	push	{fp, lr}
   14230:	mov	fp, sp
   14234:	clz	r3, r2
   14238:	lsr	ip, r3, #5
   1423c:	clz	r3, r1
   14240:	lsr	r3, r3, #5
   14244:	orrs	r3, r3, ip
   14248:	movwne	r1, #1
   1424c:	movwne	r2, #1
   14250:	bl	14af8 <__assert_fail@plt+0x3cf0>
   14254:	cmp	r0, #0
   14258:	popne	{fp, pc}
   1425c:	bl	146f0 <__assert_fail@plt+0x38e8>
   14260:	push	{fp, lr}
   14264:	mov	fp, sp
   14268:	mov	r2, r1
   1426c:	mov	r1, r0
   14270:	mov	r0, #0
   14274:	bl	14af8 <__assert_fail@plt+0x3cf0>
   14278:	cmp	r0, #0
   1427c:	popne	{fp, pc}
   14280:	bl	146f0 <__assert_fail@plt+0x38e8>
   14284:	push	{fp, lr}
   14288:	mov	fp, sp
   1428c:	mov	r2, r1
   14290:	mov	r1, r0
   14294:	clz	r0, r2
   14298:	clz	r3, r1
   1429c:	lsr	r0, r0, #5
   142a0:	lsr	r3, r3, #5
   142a4:	orrs	r0, r3, r0
   142a8:	movwne	r1, #1
   142ac:	movwne	r2, #1
   142b0:	mov	r0, #0
   142b4:	bl	14af8 <__assert_fail@plt+0x3cf0>
   142b8:	cmp	r0, #0
   142bc:	popne	{fp, pc}
   142c0:	bl	146f0 <__assert_fail@plt+0x38e8>
   142c4:	push	{r4, r5, r6, sl, fp, lr}
   142c8:	add	fp, sp, #16
   142cc:	ldr	r5, [r1]
   142d0:	mov	r4, r1
   142d4:	mov	r6, r0
   142d8:	cmp	r0, #0
   142dc:	beq	142f4 <__assert_fail@plt+0x34ec>
   142e0:	mov	r0, #1
   142e4:	add	r0, r0, r5, lsr #1
   142e8:	adds	r5, r5, r0
   142ec:	bcc	142fc <__assert_fail@plt+0x34f4>
   142f0:	b	14338 <__assert_fail@plt+0x3530>
   142f4:	cmp	r5, #0
   142f8:	movweq	r5, #64	; 0x40
   142fc:	mov	r0, r6
   14300:	mov	r1, r5
   14304:	mov	r2, #1
   14308:	bl	14af8 <__assert_fail@plt+0x3cf0>
   1430c:	cmp	r5, #0
   14310:	mov	r1, r5
   14314:	movwne	r1, #1
   14318:	cmp	r0, #0
   1431c:	bne	14330 <__assert_fail@plt+0x3528>
   14320:	clz	r2, r6
   14324:	lsr	r2, r2, #5
   14328:	orrs	r1, r2, r1
   1432c:	bne	14338 <__assert_fail@plt+0x3530>
   14330:	str	r5, [r4]
   14334:	pop	{r4, r5, r6, sl, fp, pc}
   14338:	bl	146f0 <__assert_fail@plt+0x38e8>
   1433c:	push	{r4, r5, r6, r7, fp, lr}
   14340:	add	fp, sp, #16
   14344:	ldr	r5, [r1]
   14348:	mov	r6, r2
   1434c:	mov	r4, r1
   14350:	mov	r7, r0
   14354:	cmp	r0, #0
   14358:	beq	14370 <__assert_fail@plt+0x3568>
   1435c:	mov	r0, #1
   14360:	add	r0, r0, r5, lsr #1
   14364:	adds	r5, r5, r0
   14368:	bcc	14388 <__assert_fail@plt+0x3580>
   1436c:	b	143bc <__assert_fail@plt+0x35b4>
   14370:	cmp	r5, #0
   14374:	bne	14388 <__assert_fail@plt+0x3580>
   14378:	mov	r0, #64	; 0x40
   1437c:	cmp	r6, #64	; 0x40
   14380:	udiv	r5, r0, r6
   14384:	addhi	r5, r5, #1
   14388:	mov	r0, r7
   1438c:	mov	r1, r5
   14390:	mov	r2, r6
   14394:	bl	14af8 <__assert_fail@plt+0x3cf0>
   14398:	cmp	r0, #0
   1439c:	bne	143b4 <__assert_fail@plt+0x35ac>
   143a0:	cmp	r7, #0
   143a4:	beq	143bc <__assert_fail@plt+0x35b4>
   143a8:	cmp	r6, #0
   143ac:	cmpne	r5, #0
   143b0:	bne	143bc <__assert_fail@plt+0x35b4>
   143b4:	str	r5, [r4]
   143b8:	pop	{r4, r5, r6, r7, fp, pc}
   143bc:	bl	146f0 <__assert_fail@plt+0x38e8>
   143c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143c4:	add	fp, sp, #24
   143c8:	mov	r8, r1
   143cc:	ldr	r1, [r1]
   143d0:	mov	r5, r0
   143d4:	add	r0, r1, r1, asr #1
   143d8:	cmp	r0, r1
   143dc:	mvnvs	r0, #-2147483648	; 0x80000000
   143e0:	cmp	r0, r3
   143e4:	mov	r7, r0
   143e8:	movgt	r7, r3
   143ec:	cmn	r3, #1
   143f0:	movle	r7, r0
   143f4:	ldr	r0, [fp, #8]
   143f8:	cmn	r0, #1
   143fc:	ble	14424 <__assert_fail@plt+0x361c>
   14400:	cmp	r0, #0
   14404:	beq	14478 <__assert_fail@plt+0x3670>
   14408:	cmn	r7, #1
   1440c:	ble	1444c <__assert_fail@plt+0x3644>
   14410:	mvn	r4, #-2147483648	; 0x80000000
   14414:	udiv	r6, r4, r0
   14418:	cmp	r6, r7
   1441c:	bge	14478 <__assert_fail@plt+0x3670>
   14420:	b	14488 <__assert_fail@plt+0x3680>
   14424:	cmn	r7, #1
   14428:	ble	14468 <__assert_fail@plt+0x3660>
   1442c:	cmn	r0, #1
   14430:	beq	14478 <__assert_fail@plt+0x3670>
   14434:	mov	r6, #-2147483648	; 0x80000000
   14438:	mvn	r4, #-2147483648	; 0x80000000
   1443c:	sdiv	r6, r6, r0
   14440:	cmp	r6, r7
   14444:	bge	14478 <__assert_fail@plt+0x3670>
   14448:	b	14488 <__assert_fail@plt+0x3680>
   1444c:	beq	14478 <__assert_fail@plt+0x3670>
   14450:	mov	r6, #-2147483648	; 0x80000000
   14454:	mvn	r4, #-2147483648	; 0x80000000
   14458:	sdiv	r6, r6, r7
   1445c:	cmp	r6, r0
   14460:	bge	14478 <__assert_fail@plt+0x3670>
   14464:	b	14488 <__assert_fail@plt+0x3680>
   14468:	mvn	r4, #-2147483648	; 0x80000000
   1446c:	sdiv	r6, r4, r0
   14470:	cmp	r7, r6
   14474:	blt	14488 <__assert_fail@plt+0x3680>
   14478:	mul	r6, r7, r0
   1447c:	mov	r4, #64	; 0x40
   14480:	cmp	r6, #63	; 0x3f
   14484:	bgt	14490 <__assert_fail@plt+0x3688>
   14488:	sdiv	r7, r4, r0
   1448c:	mul	r6, r7, r0
   14490:	cmp	r5, #0
   14494:	moveq	r4, #0
   14498:	streq	r4, [r8]
   1449c:	sub	r4, r7, r1
   144a0:	cmp	r4, r2
   144a4:	bge	14550 <__assert_fail@plt+0x3748>
   144a8:	add	r7, r1, r2
   144ac:	mov	r6, #0
   144b0:	mov	r2, #0
   144b4:	cmp	r7, r3
   144b8:	movwgt	r6, #1
   144bc:	cmn	r3, #1
   144c0:	movwgt	r2, #1
   144c4:	cmp	r7, r1
   144c8:	bvs	14584 <__assert_fail@plt+0x377c>
   144cc:	ands	r1, r2, r6
   144d0:	bne	14584 <__assert_fail@plt+0x377c>
   144d4:	cmn	r0, #1
   144d8:	ble	14500 <__assert_fail@plt+0x36f8>
   144dc:	cmp	r0, #0
   144e0:	beq	1454c <__assert_fail@plt+0x3744>
   144e4:	cmn	r7, #1
   144e8:	ble	14524 <__assert_fail@plt+0x371c>
   144ec:	mvn	r1, #-2147483648	; 0x80000000
   144f0:	udiv	r1, r1, r0
   144f4:	cmp	r1, r7
   144f8:	bge	1454c <__assert_fail@plt+0x3744>
   144fc:	b	14584 <__assert_fail@plt+0x377c>
   14500:	cmn	r7, #1
   14504:	ble	1453c <__assert_fail@plt+0x3734>
   14508:	cmn	r0, #1
   1450c:	beq	1454c <__assert_fail@plt+0x3744>
   14510:	mov	r1, #-2147483648	; 0x80000000
   14514:	sdiv	r1, r1, r0
   14518:	cmp	r1, r7
   1451c:	bge	1454c <__assert_fail@plt+0x3744>
   14520:	b	14584 <__assert_fail@plt+0x377c>
   14524:	beq	1454c <__assert_fail@plt+0x3744>
   14528:	mov	r1, #-2147483648	; 0x80000000
   1452c:	sdiv	r1, r1, r7
   14530:	cmp	r1, r0
   14534:	bge	1454c <__assert_fail@plt+0x3744>
   14538:	b	14584 <__assert_fail@plt+0x377c>
   1453c:	mvn	r1, #-2147483648	; 0x80000000
   14540:	sdiv	r1, r1, r0
   14544:	cmp	r7, r1
   14548:	blt	14584 <__assert_fail@plt+0x377c>
   1454c:	mul	r6, r7, r0
   14550:	mov	r0, r5
   14554:	mov	r1, r6
   14558:	bl	147b8 <__assert_fail@plt+0x39b0>
   1455c:	cmp	r6, #0
   14560:	movwne	r6, #1
   14564:	cmp	r0, #0
   14568:	bne	1457c <__assert_fail@plt+0x3774>
   1456c:	clz	r1, r5
   14570:	lsr	r1, r1, #5
   14574:	orrs	r1, r1, r6
   14578:	bne	14584 <__assert_fail@plt+0x377c>
   1457c:	str	r7, [r8]
   14580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14584:	bl	146f0 <__assert_fail@plt+0x38e8>
   14588:	push	{fp, lr}
   1458c:	mov	fp, sp
   14590:	mov	r1, #1
   14594:	bl	14734 <__assert_fail@plt+0x392c>
   14598:	cmp	r0, #0
   1459c:	popne	{fp, pc}
   145a0:	bl	146f0 <__assert_fail@plt+0x38e8>
   145a4:	push	{fp, lr}
   145a8:	mov	fp, sp
   145ac:	bl	14734 <__assert_fail@plt+0x392c>
   145b0:	cmp	r0, #0
   145b4:	popne	{fp, pc}
   145b8:	bl	146f0 <__assert_fail@plt+0x38e8>
   145bc:	push	{fp, lr}
   145c0:	mov	fp, sp
   145c4:	mov	r1, #1
   145c8:	bl	14734 <__assert_fail@plt+0x392c>
   145cc:	cmp	r0, #0
   145d0:	popne	{fp, pc}
   145d4:	bl	146f0 <__assert_fail@plt+0x38e8>
   145d8:	push	{fp, lr}
   145dc:	mov	fp, sp
   145e0:	bl	14734 <__assert_fail@plt+0x392c>
   145e4:	cmp	r0, #0
   145e8:	popne	{fp, pc}
   145ec:	bl	146f0 <__assert_fail@plt+0x38e8>
   145f0:	push	{r4, r5, r6, sl, fp, lr}
   145f4:	add	fp, sp, #16
   145f8:	mov	r5, r0
   145fc:	mov	r0, r1
   14600:	mov	r4, r1
   14604:	bl	14788 <__assert_fail@plt+0x3980>
   14608:	cmp	r0, #0
   1460c:	beq	14628 <__assert_fail@plt+0x3820>
   14610:	mov	r1, r5
   14614:	mov	r2, r4
   14618:	mov	r6, r0
   1461c:	bl	10c58 <memcpy@plt>
   14620:	mov	r0, r6
   14624:	pop	{r4, r5, r6, sl, fp, pc}
   14628:	bl	146f0 <__assert_fail@plt+0x38e8>
   1462c:	push	{r4, r5, r6, sl, fp, lr}
   14630:	add	fp, sp, #16
   14634:	mov	r5, r0
   14638:	mov	r0, r1
   1463c:	mov	r4, r1
   14640:	bl	14788 <__assert_fail@plt+0x3980>
   14644:	cmp	r0, #0
   14648:	beq	14664 <__assert_fail@plt+0x385c>
   1464c:	mov	r1, r5
   14650:	mov	r2, r4
   14654:	mov	r6, r0
   14658:	bl	10c58 <memcpy@plt>
   1465c:	mov	r0, r6
   14660:	pop	{r4, r5, r6, sl, fp, pc}
   14664:	bl	146f0 <__assert_fail@plt+0x38e8>
   14668:	push	{r4, r5, r6, sl, fp, lr}
   1466c:	add	fp, sp, #16
   14670:	mov	r5, r0
   14674:	add	r0, r1, #1
   14678:	mov	r4, r1
   1467c:	bl	14788 <__assert_fail@plt+0x3980>
   14680:	cmp	r0, #0
   14684:	beq	146ac <__assert_fail@plt+0x38a4>
   14688:	mov	r6, r0
   1468c:	mov	r0, #0
   14690:	mov	r1, r5
   14694:	mov	r2, r4
   14698:	strb	r0, [r6, r4]
   1469c:	mov	r0, r6
   146a0:	bl	10c58 <memcpy@plt>
   146a4:	mov	r0, r6
   146a8:	pop	{r4, r5, r6, sl, fp, pc}
   146ac:	bl	146f0 <__assert_fail@plt+0x38e8>
   146b0:	push	{r4, r5, r6, sl, fp, lr}
   146b4:	add	fp, sp, #16
   146b8:	mov	r4, r0
   146bc:	bl	10d48 <strlen@plt>
   146c0:	add	r5, r0, #1
   146c4:	mov	r0, r5
   146c8:	bl	14788 <__assert_fail@plt+0x3980>
   146cc:	cmp	r0, #0
   146d0:	beq	146ec <__assert_fail@plt+0x38e4>
   146d4:	mov	r1, r4
   146d8:	mov	r2, r5
   146dc:	mov	r6, r0
   146e0:	bl	10c58 <memcpy@plt>
   146e4:	mov	r0, r6
   146e8:	pop	{r4, r5, r6, sl, fp, pc}
   146ec:	bl	146f0 <__assert_fail@plt+0x38e8>
   146f0:	push	{fp, lr}
   146f4:	mov	fp, sp
   146f8:	movw	r0, #24780	; 0x60cc
   146fc:	movw	r1, #22324	; 0x5734
   14700:	mov	r2, #5
   14704:	movt	r0, #2
   14708:	movt	r1, #1
   1470c:	ldr	r4, [r0]
   14710:	mov	r0, #0
   14714:	bl	10c7c <dcgettext@plt>
   14718:	movw	r2, #21287	; 0x5327
   1471c:	mov	r3, r0
   14720:	mov	r0, r4
   14724:	mov	r1, #0
   14728:	movt	r2, #1
   1472c:	bl	10ce8 <error@plt>
   14730:	bl	10dfc <abort@plt>
   14734:	clz	r2, r1
   14738:	clz	r3, r0
   1473c:	lsr	r2, r2, #5
   14740:	lsr	r3, r3, #5
   14744:	orrs	r2, r3, r2
   14748:	movwne	r1, #1
   1474c:	movwne	r0, #1
   14750:	cmp	r1, #0
   14754:	beq	14784 <__assert_fail@plt+0x397c>
   14758:	mvn	r2, #-2147483648	; 0x80000000
   1475c:	udiv	r2, r2, r1
   14760:	cmp	r2, r0
   14764:	bcs	14784 <__assert_fail@plt+0x397c>
   14768:	push	{fp, lr}
   1476c:	mov	fp, sp
   14770:	bl	10d54 <__errno_location@plt>
   14774:	mov	r1, #12
   14778:	str	r1, [r0]
   1477c:	mov	r0, #0
   14780:	pop	{fp, pc}
   14784:	b	10c10 <calloc@plt>
   14788:	cmp	r0, #0
   1478c:	movweq	r0, #1
   14790:	cmn	r0, #1
   14794:	ble	1479c <__assert_fail@plt+0x3994>
   14798:	b	10d00 <malloc@plt>
   1479c:	push	{fp, lr}
   147a0:	mov	fp, sp
   147a4:	bl	10d54 <__errno_location@plt>
   147a8:	mov	r1, #12
   147ac:	str	r1, [r0]
   147b0:	mov	r0, #0
   147b4:	pop	{fp, pc}
   147b8:	push	{fp, lr}
   147bc:	mov	fp, sp
   147c0:	cmp	r0, #0
   147c4:	beq	147e0 <__assert_fail@plt+0x39d8>
   147c8:	cmp	r1, #0
   147cc:	beq	147ec <__assert_fail@plt+0x39e4>
   147d0:	cmn	r1, #1
   147d4:	ble	147f8 <__assert_fail@plt+0x39f0>
   147d8:	pop	{fp, lr}
   147dc:	b	10c88 <realloc@plt>
   147e0:	mov	r0, r1
   147e4:	pop	{fp, lr}
   147e8:	b	14788 <__assert_fail@plt+0x3980>
   147ec:	bl	14994 <__assert_fail@plt+0x3b8c>
   147f0:	mov	r0, #0
   147f4:	pop	{fp, pc}
   147f8:	bl	10d54 <__errno_location@plt>
   147fc:	mov	r1, #12
   14800:	str	r1, [r0]
   14804:	mov	r0, #0
   14808:	pop	{fp, pc}
   1480c:	push	{r4, r5, r6, sl, fp, lr}
   14810:	add	fp, sp, #16
   14814:	mov	r4, r0
   14818:	bl	10cd0 <__fpending@plt>
   1481c:	ldr	r6, [r4]
   14820:	mov	r5, r0
   14824:	mov	r0, r4
   14828:	bl	14890 <__assert_fail@plt+0x3a88>
   1482c:	tst	r6, #32
   14830:	bne	14868 <__assert_fail@plt+0x3a60>
   14834:	cmp	r0, #0
   14838:	mov	r4, r0
   1483c:	mvnne	r4, #0
   14840:	cmp	r5, #0
   14844:	bne	14874 <__assert_fail@plt+0x3a6c>
   14848:	cmp	r0, #0
   1484c:	beq	14874 <__assert_fail@plt+0x3a6c>
   14850:	bl	10d54 <__errno_location@plt>
   14854:	ldr	r0, [r0]
   14858:	subs	r4, r0, #9
   1485c:	mvnne	r4, #0
   14860:	mov	r0, r4
   14864:	pop	{r4, r5, r6, sl, fp, pc}
   14868:	mvn	r4, #0
   1486c:	cmp	r0, #0
   14870:	beq	1487c <__assert_fail@plt+0x3a74>
   14874:	mov	r0, r4
   14878:	pop	{r4, r5, r6, sl, fp, pc}
   1487c:	bl	10d54 <__errno_location@plt>
   14880:	mov	r1, #0
   14884:	str	r1, [r0]
   14888:	mov	r0, r4
   1488c:	pop	{r4, r5, r6, sl, fp, pc}
   14890:	push	{r4, r5, r6, sl, fp, lr}
   14894:	add	fp, sp, #16
   14898:	sub	sp, sp, #8
   1489c:	mov	r4, r0
   148a0:	bl	10d84 <fileno@plt>
   148a4:	cmn	r0, #1
   148a8:	ble	1491c <__assert_fail@plt+0x3b14>
   148ac:	mov	r0, r4
   148b0:	bl	10d18 <__freading@plt>
   148b4:	cmp	r0, #0
   148b8:	beq	148e4 <__assert_fail@plt+0x3adc>
   148bc:	mov	r0, r4
   148c0:	bl	10d84 <fileno@plt>
   148c4:	mov	r1, #1
   148c8:	mov	r2, #0
   148cc:	mov	r3, #0
   148d0:	str	r1, [sp]
   148d4:	bl	10cb8 <lseek64@plt>
   148d8:	and	r0, r0, r1
   148dc:	cmn	r0, #1
   148e0:	beq	1491c <__assert_fail@plt+0x3b14>
   148e4:	mov	r0, r4
   148e8:	bl	1492c <__assert_fail@plt+0x3b24>
   148ec:	cmp	r0, #0
   148f0:	beq	1491c <__assert_fail@plt+0x3b14>
   148f4:	bl	10d54 <__errno_location@plt>
   148f8:	ldr	r6, [r0]
   148fc:	mov	r5, r0
   14900:	mov	r0, r4
   14904:	bl	10d9c <fclose@plt>
   14908:	cmp	r6, #0
   1490c:	strne	r6, [r5]
   14910:	mvnne	r0, #0
   14914:	sub	sp, fp, #16
   14918:	pop	{r4, r5, r6, sl, fp, pc}
   1491c:	mov	r0, r4
   14920:	sub	sp, fp, #16
   14924:	pop	{r4, r5, r6, sl, fp, lr}
   14928:	b	10d9c <fclose@plt>
   1492c:	push	{r4, sl, fp, lr}
   14930:	add	fp, sp, #8
   14934:	sub	sp, sp, #8
   14938:	mov	r4, r0
   1493c:	cmp	r0, #0
   14940:	beq	1495c <__assert_fail@plt+0x3b54>
   14944:	mov	r0, r4
   14948:	bl	10d18 <__freading@plt>
   1494c:	cmp	r0, #0
   14950:	ldrbne	r0, [r4, #1]
   14954:	tstne	r0, #1
   14958:	bne	1496c <__assert_fail@plt+0x3b64>
   1495c:	mov	r0, r4
   14960:	sub	sp, fp, #8
   14964:	pop	{r4, sl, fp, lr}
   14968:	b	10c34 <fflush@plt>
   1496c:	mov	r0, #1
   14970:	mov	r2, #0
   14974:	mov	r3, #0
   14978:	str	r0, [sp]
   1497c:	mov	r0, r4
   14980:	bl	149bc <__assert_fail@plt+0x3bb4>
   14984:	mov	r0, r4
   14988:	sub	sp, fp, #8
   1498c:	pop	{r4, sl, fp, lr}
   14990:	b	10c34 <fflush@plt>
   14994:	push	{r4, r5, r6, sl, fp, lr}
   14998:	add	fp, sp, #16
   1499c:	mov	r4, r0
   149a0:	bl	10d54 <__errno_location@plt>
   149a4:	ldr	r6, [r0]
   149a8:	mov	r5, r0
   149ac:	mov	r0, r4
   149b0:	bl	10c40 <free@plt>
   149b4:	str	r6, [r5]
   149b8:	pop	{r4, r5, r6, sl, fp, pc}
   149bc:	push	{r4, r5, r6, r7, fp, lr}
   149c0:	add	fp, sp, #16
   149c4:	sub	sp, sp, #8
   149c8:	mov	r4, r0
   149cc:	ldr	r0, [r0, #4]
   149d0:	mov	r5, r3
   149d4:	mov	r6, r2
   149d8:	ldr	r1, [r4, #8]
   149dc:	cmp	r1, r0
   149e0:	bne	149fc <__assert_fail@plt+0x3bf4>
   149e4:	ldrd	r0, [r4, #16]
   149e8:	cmp	r1, r0
   149ec:	bne	149fc <__assert_fail@plt+0x3bf4>
   149f0:	ldr	r0, [r4, #36]	; 0x24
   149f4:	cmp	r0, #0
   149f8:	beq	14a14 <__assert_fail@plt+0x3c0c>
   149fc:	mov	r0, r4
   14a00:	mov	r2, r6
   14a04:	mov	r3, r5
   14a08:	sub	sp, fp, #16
   14a0c:	pop	{r4, r5, r6, r7, fp, lr}
   14a10:	b	10da8 <fseeko64@plt>
   14a14:	ldr	r7, [fp, #8]
   14a18:	mov	r0, r4
   14a1c:	bl	10d84 <fileno@plt>
   14a20:	mov	r2, r6
   14a24:	mov	r3, r5
   14a28:	str	r7, [sp]
   14a2c:	bl	10cb8 <lseek64@plt>
   14a30:	and	r2, r0, r1
   14a34:	cmn	r2, #1
   14a38:	mvneq	r0, #0
   14a3c:	subeq	sp, fp, #16
   14a40:	popeq	{r4, r5, r6, r7, fp, pc}
   14a44:	strd	r0, [r4, #80]	; 0x50
   14a48:	ldr	r0, [r4]
   14a4c:	bic	r0, r0, #16
   14a50:	str	r0, [r4]
   14a54:	mov	r0, #0
   14a58:	sub	sp, fp, #16
   14a5c:	pop	{r4, r5, r6, r7, fp, pc}
   14a60:	push	{fp, lr}
   14a64:	mov	fp, sp
   14a68:	mov	r0, #14
   14a6c:	bl	10dd8 <nl_langinfo@plt>
   14a70:	movw	r1, #20151	; 0x4eb7
   14a74:	cmp	r0, #0
   14a78:	movt	r1, #1
   14a7c:	movne	r1, r0
   14a80:	movw	r0, #22341	; 0x5745
   14a84:	ldrb	r2, [r1]
   14a88:	movt	r0, #1
   14a8c:	cmp	r2, #0
   14a90:	movne	r0, r1
   14a94:	pop	{fp, pc}
   14a98:	push	{r4, r5, r6, r7, fp, lr}
   14a9c:	add	fp, sp, #16
   14aa0:	sub	sp, sp, #8
   14aa4:	add	r5, sp, #4
   14aa8:	cmp	r0, #0
   14aac:	mov	r7, r2
   14ab0:	mov	r4, r1
   14ab4:	movne	r5, r0
   14ab8:	mov	r0, r5
   14abc:	bl	10cdc <mbrtowc@plt>
   14ac0:	mov	r6, r0
   14ac4:	cmp	r7, #0
   14ac8:	beq	14aec <__assert_fail@plt+0x3ce4>
   14acc:	cmn	r6, #2
   14ad0:	bcc	14aec <__assert_fail@plt+0x3ce4>
   14ad4:	mov	r0, #0
   14ad8:	bl	14b34 <__assert_fail@plt+0x3d2c>
   14adc:	cmp	r0, #0
   14ae0:	ldrbeq	r0, [r4]
   14ae4:	moveq	r6, #1
   14ae8:	streq	r0, [r5]
   14aec:	mov	r0, r6
   14af0:	sub	sp, fp, #16
   14af4:	pop	{r4, r5, r6, r7, fp, pc}
   14af8:	cmp	r2, #0
   14afc:	beq	14b2c <__assert_fail@plt+0x3d24>
   14b00:	mvn	r3, #0
   14b04:	udiv	r3, r3, r2
   14b08:	cmp	r3, r1
   14b0c:	bcs	14b2c <__assert_fail@plt+0x3d24>
   14b10:	push	{fp, lr}
   14b14:	mov	fp, sp
   14b18:	bl	10d54 <__errno_location@plt>
   14b1c:	mov	r1, #12
   14b20:	str	r1, [r0]
   14b24:	mov	r0, #0
   14b28:	pop	{fp, pc}
   14b2c:	mul	r1, r2, r1
   14b30:	b	147b8 <__assert_fail@plt+0x39b0>
   14b34:	push	{r4, sl, fp, lr}
   14b38:	add	fp, sp, #8
   14b3c:	sub	sp, sp, #264	; 0x108
   14b40:	add	r1, sp, #7
   14b44:	movw	r2, #257	; 0x101
   14b48:	bl	14b98 <__assert_fail@plt+0x3d90>
   14b4c:	mov	r4, #0
   14b50:	cmp	r0, #0
   14b54:	bne	14b8c <__assert_fail@plt+0x3d84>
   14b58:	movw	r1, #22347	; 0x574b
   14b5c:	add	r0, sp, #7
   14b60:	movt	r1, #1
   14b64:	bl	10c28 <strcmp@plt>
   14b68:	cmp	r0, #0
   14b6c:	beq	14b8c <__assert_fail@plt+0x3d84>
   14b70:	movw	r1, #22349	; 0x574d
   14b74:	add	r0, sp, #7
   14b78:	movt	r1, #1
   14b7c:	bl	10c28 <strcmp@plt>
   14b80:	mov	r4, r0
   14b84:	cmp	r0, #0
   14b88:	movwne	r4, #1
   14b8c:	mov	r0, r4
   14b90:	sub	sp, fp, #8
   14b94:	pop	{r4, sl, fp, pc}
   14b98:	push	{r4, r5, r6, r7, fp, lr}
   14b9c:	add	fp, sp, #16
   14ba0:	mov	r4, r1
   14ba4:	mov	r1, #0
   14ba8:	mov	r6, r2
   14bac:	bl	10dc0 <setlocale@plt>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14be4 <__assert_fail@plt+0x3ddc>
   14bb8:	mov	r7, r0
   14bbc:	bl	10d48 <strlen@plt>
   14bc0:	cmp	r0, r6
   14bc4:	bcs	14c04 <__assert_fail@plt+0x3dfc>
   14bc8:	add	r2, r0, #1
   14bcc:	mov	r0, r4
   14bd0:	mov	r1, r7
   14bd4:	bl	10c58 <memcpy@plt>
   14bd8:	mov	r5, #0
   14bdc:	mov	r0, r5
   14be0:	pop	{r4, r5, r6, r7, fp, pc}
   14be4:	cmp	r6, #0
   14be8:	mov	r5, #22
   14bec:	movne	r0, #0
   14bf0:	strbne	r0, [r4]
   14bf4:	movne	r0, r5
   14bf8:	popne	{r4, r5, r6, r7, fp, pc}
   14bfc:	mov	r0, r5
   14c00:	pop	{r4, r5, r6, r7, fp, pc}
   14c04:	mov	r5, #34	; 0x22
   14c08:	cmp	r6, #0
   14c0c:	beq	14c2c <__assert_fail@plt+0x3e24>
   14c10:	sub	r6, r6, #1
   14c14:	mov	r0, r4
   14c18:	mov	r1, r7
   14c1c:	mov	r2, r6
   14c20:	bl	10c58 <memcpy@plt>
   14c24:	mov	r0, #0
   14c28:	strb	r0, [r4, r6]
   14c2c:	mov	r0, r5
   14c30:	pop	{r4, r5, r6, r7, fp, pc}
   14c34:	mov	r1, #0
   14c38:	b	10dc0 <setlocale@plt>
   14c3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c40:	mov	r7, r0
   14c44:	ldr	r6, [pc, #72]	; 14c94 <__assert_fail@plt+0x3e8c>
   14c48:	ldr	r5, [pc, #72]	; 14c98 <__assert_fail@plt+0x3e90>
   14c4c:	add	r6, pc, r6
   14c50:	add	r5, pc, r5
   14c54:	sub	r6, r6, r5
   14c58:	mov	r8, r1
   14c5c:	mov	r9, r2
   14c60:	bl	10bf0 <calloc@plt-0x20>
   14c64:	asrs	r6, r6, #2
   14c68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c6c:	mov	r4, #0
   14c70:	add	r4, r4, #1
   14c74:	ldr	r3, [r5], #4
   14c78:	mov	r2, r9
   14c7c:	mov	r1, r8
   14c80:	mov	r0, r7
   14c84:	blx	r3
   14c88:	cmp	r6, r4
   14c8c:	bne	14c70 <__assert_fail@plt+0x3e68>
   14c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c94:			; <UNDEFINED> instruction: 0x000112b8
   14c98:			; <UNDEFINED> instruction: 0x000112b0
   14c9c:	bx	lr
   14ca0:	ldr	r3, [pc, #12]	; 14cb4 <__assert_fail@plt+0x3eac>
   14ca4:	mov	r1, #0
   14ca8:	add	r3, pc, r3
   14cac:	ldr	r2, [r3]
   14cb0:	b	10d60 <__cxa_atexit@plt>
   14cb4:	andeq	r1, r1, r4, lsl r4

Disassembly of section .fini:

00014cb8 <.fini>:
   14cb8:	push	{r3, lr}
   14cbc:	pop	{r3, pc}
