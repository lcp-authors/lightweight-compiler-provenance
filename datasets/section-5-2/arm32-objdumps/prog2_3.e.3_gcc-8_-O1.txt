
../repos/prog2/3.e.3:     file format elf32-littlearm


Disassembly of section .init:

0001066c <.init>:
   1066c:	push	{r3, lr}
   10670:	bl	10740 <_start@@Base+0x3c>
   10674:	pop	{r3, pc}

Disassembly of section .plt:

00010678 <__isoc99_fscanf@plt-0x14>:
   10678:	push	{lr}		; (str lr, [sp, #-4]!)
   1067c:	ldr	lr, [pc, #4]	; 10688 <__isoc99_fscanf@plt-0x4>
   10680:	add	lr, pc, lr
   10684:	ldr	pc, [lr, #8]!
   10688:	andeq	r0, r1, r8, ror r9

0001068c <__isoc99_fscanf@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2424]!	; 0x978

00010698 <fopen@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2416]!	; 0x970

000106a4 <realloc@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2408]!	; 0x968

000106b0 <fwrite@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2400]!	; 0x960

000106bc <malloc@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2392]!	; 0x958

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2384]!	; 0x950

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2376]!	; 0x948

000106e0 <fprintf@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2368]!	; 0x940

000106ec <fclose@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2360]!	; 0x938

000106f8 <abort@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2352]!	; 0x930

Disassembly of section .text:

00010704 <_start@@Base>:
   10704:	mov	fp, #0
   10708:	mov	lr, #0
   1070c:	pop	{r1}		; (ldr r1, [sp], #4)
   10710:	mov	r2, sp
   10714:	push	{r2}		; (str r2, [sp, #-4]!)
   10718:	push	{r0}		; (str r0, [sp, #-4]!)
   1071c:	ldr	ip, [pc, #16]	; 10734 <_start@@Base+0x30>
   10720:	push	{ip}		; (str ip, [sp, #-4]!)
   10724:	ldr	r0, [pc, #12]	; 10738 <_start@@Base+0x34>
   10728:	ldr	r3, [pc, #12]	; 1073c <_start@@Base+0x38>
   1072c:	bl	106c8 <__libc_start_main@plt>
   10730:	bl	106f8 <abort@plt>
   10734:	andeq	r0, r1, r0, lsr sl
   10738:	andeq	r0, r1, r8, lsl #19
   1073c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10740:	ldr	r3, [pc, #20]	; 1075c <_start@@Base+0x58>
   10744:	ldr	r2, [pc, #20]	; 10760 <_start@@Base+0x5c>
   10748:	add	r3, pc, r3
   1074c:	ldr	r2, [r3, r2]
   10750:	cmp	r2, #0
   10754:	bxeq	lr
   10758:	b	106d4 <__gmon_start__@plt>
   1075c:			; <UNDEFINED> instruction: 0x000108b0
   10760:	andeq	r0, r0, r4, lsr r0
   10764:	ldr	r0, [pc, #24]	; 10784 <_start@@Base+0x80>
   10768:	ldr	r3, [pc, #24]	; 10788 <_start@@Base+0x84>
   1076c:	cmp	r3, r0
   10770:	bxeq	lr
   10774:	ldr	r3, [pc, #16]	; 1078c <_start@@Base+0x88>
   10778:	cmp	r3, #0
   1077c:	bxeq	lr
   10780:	bx	r3
   10784:	andeq	r1, r2, r0, asr #32
   10788:	andeq	r1, r2, r0, asr #32
   1078c:	andeq	r0, r0, r0
   10790:	ldr	r0, [pc, #36]	; 107bc <_start@@Base+0xb8>
   10794:	ldr	r1, [pc, #36]	; 107c0 <_start@@Base+0xbc>
   10798:	sub	r1, r1, r0
   1079c:	asr	r1, r1, #2
   107a0:	add	r1, r1, r1, lsr #31
   107a4:	asrs	r1, r1, #1
   107a8:	bxeq	lr
   107ac:	ldr	r3, [pc, #16]	; 107c4 <_start@@Base+0xc0>
   107b0:	cmp	r3, #0
   107b4:	bxeq	lr
   107b8:	bx	r3
   107bc:	andeq	r1, r2, r0, asr #32
   107c0:	andeq	r1, r2, r0, asr #32
   107c4:	andeq	r0, r0, r0
   107c8:	push	{r4, lr}
   107cc:	ldr	r4, [pc, #24]	; 107ec <_start@@Base+0xe8>
   107d0:	ldrb	r3, [r4]
   107d4:	cmp	r3, #0
   107d8:	popne	{r4, pc}
   107dc:	bl	10764 <_start@@Base+0x60>
   107e0:	mov	r3, #1
   107e4:	strb	r3, [r4]
   107e8:	pop	{r4, pc}
   107ec:	andeq	r1, r2, r0, asr #32
   107f0:	b	10790 <_start@@Base+0x8c>

000107f4 <analisarFicheiro@@Base>:
   107f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   107f8:	strd	r6, [sp, #8]
   107fc:	strd	r8, [sp, #16]
   10800:	str	sl, [sp, #24]
   10804:	str	lr, [sp, #28]
   10808:	sub	sp, sp, #8
   1080c:	mov	sl, r1
   10810:	movw	r1, #2624	; 0xa40
   10814:	movt	r1, #1
   10818:	movw	r0, #2628	; 0xa44
   1081c:	movt	r0, #1
   10820:	bl	10698 <fopen@plt>
   10824:	mov	r8, r0
   10828:	mov	r0, #104	; 0x68
   1082c:	bl	106bc <malloc@plt>
   10830:	mov	r4, r0
   10834:	mov	r5, #0
   10838:	mov	r9, #104	; 0x68
   1083c:	movw	r7, #2644	; 0xa54
   10840:	movt	r7, #1
   10844:	mul	r6, r9, r5
   10848:	add	r2, r4, r6
   1084c:	add	r3, r2, #100	; 0x64
   10850:	str	r3, [sp]
   10854:	add	r3, r2, #50	; 0x32
   10858:	mov	r1, r7
   1085c:	mov	r0, r8
   10860:	bl	1068c <__isoc99_fscanf@plt>
   10864:	cmp	r0, #3
   10868:	bne	10884 <analisarFicheiro@@Base+0x90>
   1086c:	add	r5, r5, #1
   10870:	add	r1, r6, #104	; 0x68
   10874:	mov	r0, r4
   10878:	bl	106a4 <realloc@plt>
   1087c:	mov	r4, r0
   10880:	b	10844 <analisarFicheiro@@Base+0x50>
   10884:	str	r5, [sl]
   10888:	mov	r0, r8
   1088c:	bl	106ec <fclose@plt>
   10890:	mov	r0, r4
   10894:	add	sp, sp, #8
   10898:	ldrd	r4, [sp]
   1089c:	ldrd	r6, [sp, #8]
   108a0:	ldrd	r8, [sp, #16]
   108a4:	ldr	sl, [sp, #24]
   108a8:	add	sp, sp, #28
   108ac:	pop	{pc}		; (ldr pc, [sp], #4)

000108b0 <gerarRelatorio@@Base>:
   108b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   108b4:	strd	r6, [sp, #8]
   108b8:	strd	r8, [sp, #16]
   108bc:	str	sl, [sp, #24]
   108c0:	str	lr, [sp, #28]
   108c4:	sub	sp, sp, #8
   108c8:	mov	sl, r2
   108cc:	movw	r1, #2656	; 0xa60
   108d0:	movt	r1, #1
   108d4:	bl	10698 <fopen@plt>
   108d8:	mov	r8, r0
   108dc:	mov	r3, r0
   108e0:	mov	r2, #10
   108e4:	mov	r1, #1
   108e8:	movw	r0, #2660	; 0xa64
   108ec:	movt	r0, #1
   108f0:	bl	106b0 <fwrite@plt>
   108f4:	mov	r0, #104	; 0x68
   108f8:	bl	106bc <malloc@plt>
   108fc:	cmp	sl, #0
   10900:	ble	10964 <gerarRelatorio@@Base+0xb4>
   10904:	mov	r5, r0
   10908:	mov	r4, #104	; 0x68
   1090c:	mov	r6, #0
   10910:	movw	r9, #2672	; 0xa70
   10914:	movt	r9, #1
   10918:	add	r7, r6, #1
   1091c:	mov	r1, r4
   10920:	mov	r0, r5
   10924:	bl	106a4 <realloc@plt>
   10928:	mov	r5, r0
   1092c:	sub	r3, r4, #104	; 0x68
   10930:	add	r3, r0, r3
   10934:	ldr	r2, [r3, #100]	; 0x64
   10938:	str	r2, [sp, #4]
   1093c:	str	r3, [sp]
   10940:	add	r3, r3, #50	; 0x32
   10944:	mov	r2, r6
   10948:	mov	r1, r9
   1094c:	mov	r0, r8
   10950:	bl	106e0 <fprintf@plt>
   10954:	add	r4, r4, #104	; 0x68
   10958:	mov	r6, r7
   1095c:	cmp	r7, sl
   10960:	bne	10918 <gerarRelatorio@@Base+0x68>
   10964:	mov	r0, r8
   10968:	bl	106ec <fclose@plt>
   1096c:	add	sp, sp, #8
   10970:	ldrd	r4, [sp]
   10974:	ldrd	r6, [sp, #8]
   10978:	ldrd	r8, [sp, #16]
   1097c:	ldr	sl, [sp, #24]
   10980:	add	sp, sp, #28
   10984:	pop	{pc}		; (ldr pc, [sp], #4)

00010988 <main@@Base>:
   10988:	str	r4, [sp, #-8]!
   1098c:	str	lr, [sp, #4]
   10990:	sub	sp, sp, #8
   10994:	mov	r4, #0
   10998:	str	r4, [sp, #4]
   1099c:	add	r1, sp, #4
   109a0:	mov	r0, r4
   109a4:	bl	107f4 <analisarFicheiro@@Base>
   109a8:	ldr	r2, [sp, #4]
   109ac:	mov	r1, r0
   109b0:	movw	r0, #2692	; 0xa84
   109b4:	movt	r0, #1
   109b8:	bl	108b0 <gerarRelatorio@@Base>
   109bc:	mov	r0, r4
   109c0:	add	sp, sp, #8
   109c4:	ldr	r4, [sp]
   109c8:	add	sp, sp, #4
   109cc:	pop	{pc}		; (ldr pc, [sp], #4)

000109d0 <__libc_csu_init@@Base>:
   109d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109d4:	mov	r7, r0
   109d8:	ldr	r6, [pc, #72]	; 10a28 <__libc_csu_init@@Base+0x58>
   109dc:	ldr	r5, [pc, #72]	; 10a2c <__libc_csu_init@@Base+0x5c>
   109e0:	add	r6, pc, r6
   109e4:	add	r5, pc, r5
   109e8:	sub	r6, r6, r5
   109ec:	mov	r8, r1
   109f0:	mov	r9, r2
   109f4:	bl	1066c <__isoc99_fscanf@plt-0x20>
   109f8:	asrs	r6, r6, #2
   109fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a00:	mov	r4, #0
   10a04:	add	r4, r4, #1
   10a08:	ldr	r3, [r5], #4
   10a0c:	mov	r2, r9
   10a10:	mov	r1, r8
   10a14:	mov	r0, r7
   10a18:	blx	r3
   10a1c:	cmp	r6, r4
   10a20:	bne	10a04 <__libc_csu_init@@Base+0x34>
   10a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a28:	andeq	r0, r1, ip, lsr #10
   10a2c:	andeq	r0, r1, r4, lsr #10

00010a30 <__libc_csu_fini@@Base>:
   10a30:	bx	lr

Disassembly of section .fini:

00010a34 <.fini>:
   10a34:	push	{r3, lr}
   10a38:	pop	{r3, pc}
